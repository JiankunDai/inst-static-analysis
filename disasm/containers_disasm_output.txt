BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x5f030, which lies outside .bss
BOLT-WARNING: split function detected on input : _ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x2000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x2000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x5eff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "_start" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x3380
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3380
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x5efe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 16
  State       : disassembled
  Address     : 0x33b0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x33b0
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp46 # Offset: 17
    00000013: 	movq	DATAat0x5efe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp46 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp46:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 17
  State       : disassembled
  Address     : 0x33e0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x33e0
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp47 # Offset: 34
    00000024: 	movq	DATAat0x5eff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp47 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp47:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 18
  State       : disassembled
  Address     : 0x3420
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x3420
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp48 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp49 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp49:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp48:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 19
  State       : disassembled
  Address     : 0x3460
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x3460
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/containers.cpp/1
  Number      : 20
  State       : disassembled
  Address     : 0x3470
  Size        : 0x121
  MaxSize     : 0x130
  Offset      : 0x3470
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdx, %rbx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movq	%rax, %r10
    0000000e: 	movq	%rsi, %rdi
    00000011: 	movq	%rdx, %r11
    00000014: 	andl	$0x1, %ebx
    00000017: 	shrq	$0x3f, %r10
    0000001b: 	addq	%rax, %r10
    0000001e: 	sarq	%r10
    00000021: 	cmpq	%r10, %rsi
    00000024: 	jl	.Ltmp50 # Offset: 36
    00000026: 	jmp	.Ltmp51 # Offset: 38
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp53:
    00000030: 	movq	%rdx, %rsi
.Ltmp50:
    00000033: 	leaq	0x1(%rsi), %rax
    00000037: 	leaq	(%rax,%rax), %rdx
    0000003b: 	shlq	$0x4, %rax
    0000003f: 	leaq	-0x1(%rdx), %r8
    00000043: 	addq	%rcx, %rax
    00000046: 	leaq	(%rcx,%r8,8), %r9
    0000004a: 	movsd	(%rax), %xmm1
    0000004e: 	movsd	(%r9), %xmm2
    00000053: 	comisd	%xmm1, %xmm2
    00000057: 	jbe	.Ltmp52 # Offset: 87
    00000059: 	movapd	%xmm2, %xmm1
    0000005d: 	movq	%r9, %rax
    00000060: 	movq	%r8, %rdx
.Ltmp52:
    00000063: 	movsd	%xmm1, (%rcx,%rsi,8)
    00000068: 	cmpq	%rdx, %r10
    0000006b: 	jg	.Ltmp53 # Offset: 107
    0000006d: 	testq	%rbx, %rbx
    00000070: 	je	.Ltmp54 # Offset: 112
.Ltmp59:
    00000072: 	leaq	-0x1(%rdx), %r8
    00000076: 	movq	%r8, %rsi
    00000079: 	shrq	$0x3f, %rsi
    0000007d: 	addq	%r8, %rsi
    00000080: 	sarq	%rsi
    00000083: 	cmpq	%rdi, %rdx
    00000086: 	jg	.Ltmp55 # Offset: 134
    00000088: 	jmp	.Ltmp56 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp58:
    00000090: 	leaq	-0x1(%rsi), %rdx
    00000094: 	movsd	%xmm1, (%rax)
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	movq	%rsi, %rdx
    000000a5: 	sarq	%rax
    000000a8: 	cmpq	%rsi, %rdi
    000000ab: 	jge	.Ltmp57 # Offset: 171
    000000ad: 	movq	%rax, %rsi
.Ltmp55:
    000000b0: 	leaq	(%rcx,%rsi,8), %r8
    000000b4: 	leaq	(%rcx,%rdx,8), %rax
    000000b8: 	movsd	(%r8), %xmm1
    000000bd: 	comisd	%xmm1, %xmm0
    000000c1: 	ja	.Ltmp58 # Offset: 193
.Ltmp56:
    000000c3: 	movsd	%xmm0, (%rax)
    000000c7: 	popq	%rbx
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp51:
    000000d0: 	leaq	(%rcx,%rsi,8), %rax
    000000d4: 	testq	%rbx, %rbx
    000000d7: 	jne	.Ltmp56 # Offset: 215
    000000d9: 	movq	%rdi, %rdx
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp54:
    000000e0: 	subq	$0x2, %r11
    000000e4: 	movq	%r11, %rsi
    000000e7: 	shrq	$0x3f, %rsi
    000000eb: 	addq	%r11, %rsi
    000000ee: 	sarq	%rsi
    000000f1: 	cmpq	%rsi, %rdx
    000000f4: 	jne	.Ltmp59 # Offset: 244
    000000fa: 	leaq	0x1(%rdx,%rdx), %rdx
    000000ff: 	leaq	(%rcx,%rdx,8), %rsi
    00000103: 	movsd	(%rsi), %xmm1
    00000107: 	movsd	%xmm1, (%rax)
    0000010b: 	movq	%rsi, %rax
    0000010e: 	jmp	.Ltmp59 # Offset: 270
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp57:
    00000118: 	movq	%r8, %rax
    0000011b: 	movsd	%xmm0, (%rax)
    0000011f: 	popq	%rbx
    00000120: 	retq # Offset: 288
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/containers.cpp/1
  Number      : 21
  State       : disassembled
  Address     : 0x35a0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x35a0
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	pushq	%r13
    00000002: 	movq	%rsi, %rax
    00000005: 	pushq	%r12
    00000007: 	subq	%rdi, %rax
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rsi, %rbx
    0000000f: 	subq	$0x8, %rsp
    00000013: 	cmpq	$0x80, %rax
    00000019: 	jle	.Ltmp60 # Offset: 25
    0000001f: 	movq	%rdi, %rbp
    00000022: 	movq	%rdx, %r13
    00000025: 	leaq	0x8(%rdi), %r12
    00000029: 	testq	%rdx, %rdx
    0000002c: 	je	.Ltmp61 # Offset: 44
.Ltmp72:
    00000032: 	movq	%rsi, %rax
    00000035: 	movupd	(%rbp), %xmm0
    0000003a: 	subq	$0x1, %r13
    0000003e: 	movsd	-0x8(%rsi), %xmm3
    00000043: 	subq	%rbp, %rax
    00000046: 	movq	%rax, %rdx
    00000049: 	shrq	$0x3f, %rax
    0000004d: 	movapd	%xmm0, %xmm4
    00000051: 	movapd	%xmm0, %xmm1
    00000055: 	sarq	$0x3, %rdx
    00000059: 	shufpd	$0x1, %xmm0, %xmm4
    0000005e: 	unpckhpd	%xmm0, %xmm0
    00000062: 	addq	%rdx, %rax
    00000065: 	sarq	%rax
    00000068: 	leaq	(%rbp,%rax,8), %rax
    0000006d: 	movsd	(%rax), %xmm2
    00000071: 	comisd	%xmm0, %xmm2
    00000075: 	jbe	.Ltmp62 # Offset: 117
    00000077: 	comisd	%xmm2, %xmm3
    0000007b: 	ja	.Ltmp63 # Offset: 123
    00000081: 	comisd	%xmm0, %xmm3
    00000085: 	ja	.Ltmp64 # Offset: 133
.Ltmp70:
    00000087: 	movups	%xmm4, (%rbp)
    0000008b: 	movsd	-0x8(%rsi), %xmm2
.Ltmp71:
    00000090: 	movq	%rsi, %rax
    00000093: 	movq	%r12, %rbx
    00000096: 	jmp	.Ltmp65 # Offset: 150
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp66:
    000000a0: 	movsd	0x8(%rbx), %xmm1
    000000a5: 	addq	$0x8, %rbx
.Ltmp65:
    000000a9: 	comisd	%xmm1, %xmm0
    000000ad: 	ja	.Ltmp66 # Offset: 173
    000000af: 	subq	$0x8, %rax
    000000b3: 	comisd	%xmm0, %xmm2
    000000b7: 	jbe	.Ltmp67 # Offset: 183
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp68:
    000000c0: 	movsd	-0x8(%rax), %xmm2
    000000c5: 	subq	$0x8, %rax
    000000c9: 	comisd	%xmm0, %xmm2
    000000cd: 	ja	.Ltmp68 # Offset: 205
.Ltmp67:
    000000cf: 	cmpq	%rbx, %rax
    000000d2: 	jbe	.Ltmp69 # Offset: 210
    000000d4: 	movsd	%xmm2, (%rbx)
    000000d8: 	addq	$0x8, %rbx
    000000dc: 	movsd	-0x8(%rax), %xmm2
    000000e1: 	movsd	%xmm1, (%rax)
    000000e5: 	movsd	(%rbx), %xmm1
    000000e9: 	movsd	(%rbp), %xmm0
    000000ee: 	jmp	.Ltmp65 # Offset: 238
.Ltmp62:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp70 # Offset: 244
    000000f6: 	comisd	%xmm2, %xmm3
    000000fa: 	jbe	.Ltmp63 # Offset: 250
.Ltmp64:
    000000fc: 	movsd	%xmm3, (%rbp)
    00000101: 	movapd	%xmm1, %xmm2
    00000105: 	movsd	%xmm1, -0x8(%rsi)
    0000010a: 	movsd	(%rbp), %xmm0
    0000010f: 	movsd	0x8(%rbp), %xmm1
    00000114: 	jmp	.Ltmp71 # Offset: 276
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp69:
    00000120: 	movq	%r13, %rdx
    00000123: 	movq	%rbx, %rdi
    00000126: 	callq	"_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1" # Offset: 294
    0000012b: 	movq	%rbx, %rax
    0000012e: 	subq	%rbp, %rax
    00000131: 	cmpq	$0x80, %rax
    00000137: 	jle	.Ltmp60 # Offset: 311
    0000013d: 	testq	%r13, %r13
    00000140: 	je	.Ltmp61 # Offset: 320
    00000142: 	movq	%rbx, %rsi
    00000145: 	jmp	.Ltmp72 # Offset: 325
.Ltmp63:
    0000014a: 	movsd	%xmm2, (%rbp)
    0000014f: 	movsd	%xmm1, (%rax)
    00000153: 	movsd	0x8(%rbp), %xmm1
    00000158: 	movsd	(%rbp), %xmm0
    0000015d: 	movsd	-0x8(%rsi), %xmm2
    00000162: 	jmp	.Ltmp71 # Offset: 354
.Ltmp61:
    00000167: 	sarq	$0x3, %rax
    0000016b: 	leaq	-0x2(%rax), %r13
    0000016f: 	movq	%rax, %r12
    00000172: 	sarq	%r13
    00000175: 	jmp	.Ltmp73 # Offset: 373
.Ltmp74:
    00000177: 	subq	$0x1, %r13
.Ltmp73:
    0000017b: 	movsd	(%rbp,%r13,8), %xmm0
    00000182: 	movq	%r12, %rdx
    00000185: 	movq	%r13, %rsi
    00000188: 	movq	%rbp, %rdi
    0000018b: 	callq	"_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1" # Offset: 395
    00000190: 	testq	%r13, %r13
    00000193: 	jne	.Ltmp74 # Offset: 403
    00000195: 	subq	$0x8, %rbx
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp75:
    000001a0: 	movq	%rbx, %r12
    000001a3: 	movsd	(%rbp), %xmm1
    000001a8: 	movsd	(%rbx), %xmm0
    000001ac: 	xorl	%esi, %esi
    000001ae: 	subq	%rbp, %r12
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	subq	$0x8, %rbx
    000001b8: 	movq	%r12, %rdx
    000001bb: 	movsd	%xmm1, 0x8(%rbx)
    000001c0: 	sarq	$0x3, %rdx
    000001c4: 	callq	"_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEldNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_.isra.0/1" # Offset: 452
    000001c9: 	cmpq	$0x8, %r12
    000001cd: 	jg	.Ltmp75 # Offset: 461
.Ltmp60:
    000001cf: 	addq	$0x8, %rsp
    000001d3: 	popq	%rbx
    000001d4: 	popq	%rbp
    000001d5: 	popq	%r12
    000001d7: 	popq	%r13
    000001d9: 	retq # Offset: 473
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1(*2)"

Binary Function "_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1
                _ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/containers.cpp/1
  Number      : 22
  State       : disassembled
  Address     : 0x3780
  Size        : 0x7f
  MaxSize     : 0x80
  Offset      : 0x3780
  Section     : .text
  Orc Section : .local.text._ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	movq	(%rdi), %rcx
    00000003: 	movq	%rdi, %rdx
    00000006: 	movq	%rcx, %rax
    00000009: 	subq	0x8(%rdi), %rax
    0000000d: 	sarq	$0x3, %rax
    00000011: 	addq	%rsi, %rax
    00000014: 	js	.Ltmp76 # Offset: 20
    00000016: 	cmpq	$0x3f, %rax
    0000001a: 	jle	.Ltmp77 # Offset: 26
    0000001c: 	movq	%rax, %rcx
    0000001f: 	sarq	$0x6, %rcx
.Ltmp78:
    00000023: 	movq	0x18(%rdx), %rsi
    00000027: 	leaq	(%rsi,%rcx,8), %rsi
    0000002b: 	shlq	$0x6, %rcx
    0000002f: 	movq	%rsi, 0x18(%rdx)
    00000033: 	movq	(%rsi), %rsi
    00000036: 	subq	%rcx, %rax
    00000039: 	leaq	0x200(%rsi), %rdi
    00000040: 	movq	%rsi, %xmm0
    00000045: 	leaq	(%rsi,%rax,8), %rax
    00000049: 	movq	%rdi, %xmm1
    0000004e: 	movq	%rax, (%rdx)
    00000051: 	punpcklqdq	%xmm1, %xmm0
    00000055: 	movups	%xmm0, 0x8(%rdx)
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp77:
    00000060: 	leaq	(%rcx,%rsi,8), %rax
    00000064: 	movq	%rax, (%rdx)
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp76:
    00000070: 	movq	%rax, %rcx
    00000073: 	notq	%rcx
    00000076: 	shrq	$0x6, %rcx
    0000007a: 	notq	%rcx
    0000007d: 	jmp	.Ltmp78 # Offset: 125
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1(*2)"

Binary Function "_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1
                _ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/containers.cpp/1
  Number      : 23
  State       : disassembled
  Address     : 0x3800
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x3800
  Section     : .text
  Orc Section : .local.text._ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	testq	%rdi, %rdi
    00000003: 	je	.Ltmp79 # Offset: 3
    00000005: 	pushq	%rbx
    00000006: 	movq	%rdi, %rbx
.Ltmp80:
    00000009: 	movq	0x18(%rbx), %rdi
    0000000d: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 13
    00000012: 	movq	%rbx, %rdi
    00000015: 	movq	0x10(%rbx), %rbx
    00000019: 	movl	$0x30, %esi
    0000001e: 	callq	_ZdlPvm@PLT # Offset: 30
    00000023: 	testq	%rbx, %rbx
    00000026: 	jne	.Ltmp80 # Offset: 38
    00000028: 	popq	%rbx
    00000029: 	retq # Offset: 41
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp79:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1(*2)"

Binary Function "_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1
                _ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/containers.cpp/1
  Number      : 24
  State       : disassembled
  Address     : 0x3840
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x3840
  Section     : .text
  Orc Section : .local.text._ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	testq	%rdi, %rdi
    00000003: 	je	.Ltmp81 # Offset: 3
    00000005: 	pushq	%rbx
    00000006: 	movq	%rdi, %rbx
.Ltmp82:
    00000009: 	movq	0x18(%rbx), %rdi
    0000000d: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 13
    00000012: 	movq	%rbx, %rdi
    00000015: 	movq	0x10(%rbx), %rbx
    00000019: 	movl	$0x28, %esi
    0000001e: 	callq	_ZdlPvm@PLT # Offset: 30
    00000023: 	testq	%rbx, %rbx
    00000026: 	jne	.Ltmp82 # Offset: 38
    00000028: 	popq	%rbx
    00000029: 	retq # Offset: 41
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp81:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1(*2)" after disassembly {
  All names   : _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1
                _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/containers.cpp/1
  Number      : 25
  State       : disassembled
  Address     : 0x3880
  Size        : 0x65
  MaxSize     : 0x70
  Offset      : 0x3880
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	pushq	%r12
    00000002: 	movq	%rdi, %r12
    00000005: 	movq	%rsi, %rdi
    00000008: 	movq	%rdx, %rsi
    0000000b: 	movq	%rcx, %rdx
    0000000e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 14
    00000013: 	leaq	0x10(%r12), %rdx
    00000018: 	movq	%rdx, (%r12)
    0000001c: 	movq	(%rax), %rcx
    0000001f: 	leaq	0x10(%rax), %rdx
    00000023: 	cmpq	%rdx, %rcx
    00000026: 	je	.Ltmp83 # Offset: 38
    00000028: 	movq	%rcx, (%r12)
    0000002c: 	movq	0x10(%rax), %rcx
    00000030: 	movq	%rcx, 0x10(%r12)
.Ltmp84:
    00000035: 	movq	0x8(%rax), %rcx
    00000039: 	movq	%rdx, (%rax)
    0000003c: 	movq	$0x0, 0x8(%rax)
    00000044: 	movq	%rcx, 0x8(%r12)
    00000049: 	movb	$0x0, 0x10(%rax)
    0000004d: 	movq	%r12, %rax
    00000050: 	popq	%r12
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp83:
    00000058: 	movdqu	0x10(%rax), %xmm0
    0000005d: 	movups	%xmm0, 0x10(%r12)
    00000063: 	jmp	.Ltmp84 # Offset: 99
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/containers.cpp/1
  Number      : 26
  State       : disassembled
  Address     : 0x38f0
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x38f0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp85 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp86 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp87 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp89:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp88 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp87:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp89 # Offset: 131
    00000085: 	jmp	.Ltmp90 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp86:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp90:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp89 # Offset: 192
.Ltmp88:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp85:
    000000c7: 	leaq	DATAat0x52008(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_.isra.0/1
                _ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_.isra.0/containers.cpp/1
  Number      : 35
  State       : disassembled
  Address     : 0x4c60
  Size        : 0x420
  MaxSize     : 0x420
  Offset      : 0x4c60
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	pushq	%r15
    00000002: 	movapd	%xmm0, %xmm3
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%r12, %rax
    00000013: 	pushq	%rbx
    00000014: 	andl	$0x1, %eax
    00000017: 	movq	%rsi, %rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movdqu	(%rdi), %xmm4
    00000022: 	movdqu	0x10(%rdi), %xmm5
    00000027: 	movq	%fs:0x28, %rdx
    00000030: 	movq	%rdx, 0x58(%rsp)
    00000035: 	xorl	%edx, %edx
    00000037: 	leaq	-0x1(%r12), %rdx
    0000003c: 	movq	%rax, 0x8(%rsp)
    00000041: 	movhlps	%xmm4, %xmm2
    00000044: 	movhlps	%xmm5, %xmm6
    00000047: 	movq	%xmm4, %r11
    0000004c: 	movq	%rdx, %rbp
    0000004f: 	shrq	$0x3f, %rbp
    00000053: 	movq	%xmm2, %r13
    00000058: 	movq	%xmm6, %r9
    0000005d: 	addq	%rdx, %rbp
    00000060: 	sarq	%rbp
    00000063: 	cmpq	%rbp, %rsi
    00000066: 	jge	.Ltmp230 # Offset: 102
    0000006c: 	movq	%xmm4, %rax
    00000071: 	subq	%r13, %rax
    00000074: 	sarq	$0x3, %rax
    00000078: 	jmp	.Ltmp231 # Offset: 120
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp240:
    00000080: 	cmpq	$0x3f, %rcx
    00000084: 	jg	.Ltmp232 # Offset: 132
    0000008a: 	leaq	(%r11,%rdi,8), %rdx
    0000008e: 	movsd	(%rdx), %xmm0
    00000092: 	movq	%r8, %rdx
    00000095: 	addq	%rax, %rdx
    00000098: 	js	.Ltmp233 # Offset: 152
.Ltmp241:
    0000009e: 	cmpq	$0x3f, %rdx
    000000a2: 	jg	.Ltmp234 # Offset: 162
    000000a8: 	movsd	(%r11,%r8,8), %xmm1
    000000ae: 	comisd	%xmm1, %xmm0
    000000b2: 	jbe	.Ltmp235 # Offset: 178
.Ltmp242:
    000000b4: 	testq	%rcx, %rcx
    000000b7: 	jns	.Ltmp236 # Offset: 183
.Ltmp243:
    000000bd: 	movq	%rcx, %r10
    000000c0: 	movq	%rcx, %rdx
    000000c3: 	movq	%rdi, %r8
    000000c6: 	notq	%r10
    000000c9: 	shrq	$0x6, %r10
    000000cd: 	notq	%r10
.Ltmp255:
    000000d0: 	movq	%r10, %rcx
    000000d3: 	shlq	$0x6, %rcx
    000000d7: 	subq	%rcx, %rdx
    000000da: 	movq	(%r9,%r10,8), %rcx
    000000de: 	movsd	(%rcx,%rdx,8), %xmm1
.Ltmp235:
    000000e3: 	movq	%rsi, %rdx
    000000e6: 	addq	%rax, %rdx
    000000e9: 	js	.Ltmp237 # Offset: 233
    000000ef: 	cmpq	$0x3f, %rdx
    000000f3: 	jg	.Ltmp238 # Offset: 243
    000000f9: 	leaq	(%r11,%rsi,8), %rdx
    000000fd: 	movsd	%xmm1, (%rdx)
    00000101: 	cmpq	%r8, %rbp
    00000104: 	jle	.Ltmp239 # Offset: 260
.Ltmp244:
    0000010a: 	movq	%r8, %rsi
.Ltmp231:
    0000010d: 	leaq	0x2(%rsi,%rsi), %r8
    00000112: 	leaq	-0x1(%r8), %rdi
    00000116: 	movq	%rdi, %rcx
    00000119: 	addq	%rax, %rcx
    0000011c: 	jns	.Ltmp240 # Offset: 284
    00000122: 	movq	%rcx, %rdx
    00000125: 	notq	%rdx
    00000128: 	shrq	$0x6, %rdx
    0000012c: 	notq	%rdx
.Ltmp254:
    0000012f: 	movq	%rdx, %r10
    00000132: 	movq	%rcx, %r14
    00000135: 	movq	(%r9,%rdx,8), %rdx
    00000139: 	shlq	$0x6, %r10
    0000013d: 	subq	%r10, %r14
    00000140: 	leaq	(%rdx,%r14,8), %rdx
    00000144: 	movsd	(%rdx), %xmm0
    00000148: 	movq	%r8, %rdx
    0000014b: 	addq	%rax, %rdx
    0000014e: 	jns	.Ltmp241 # Offset: 334
.Ltmp233:
    00000154: 	movq	%rdx, %r10
    00000157: 	movq	%rdx, %r14
    0000015a: 	notq	%r10
    0000015d: 	shrq	$0x6, %r10
    00000161: 	notq	%r10
    00000164: 	movq	%r10, %r15
    00000167: 	movq	(%r9,%r10,8), %r10
    0000016b: 	shlq	$0x6, %r15
    0000016f: 	subq	%r15, %r14
    00000172: 	comisd	(%r10,%r14,8), %xmm0
    00000178: 	ja	.Ltmp242 # Offset: 376
    0000017e: 	movq	%rdx, %rcx
    00000181: 	movq	%r8, %rdi
    00000184: 	jmp	.Ltmp243 # Offset: 388
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp238:
    00000190: 	movq	%rdx, %rcx
    00000193: 	sarq	$0x6, %rcx
.Ltmp256:
    00000197: 	movq	%rcx, %rsi
    0000019a: 	movq	(%r9,%rcx,8), %rcx
    0000019e: 	shlq	$0x6, %rsi
    000001a2: 	subq	%rsi, %rdx
    000001a5: 	leaq	(%rcx,%rdx,8), %rdx
    000001a9: 	movsd	%xmm1, (%rdx)
    000001ad: 	cmpq	%r8, %rbp
    000001b0: 	jg	.Ltmp244 # Offset: 432
.Ltmp239:
    000001b6: 	cmpq	$0x0, 0x8(%rsp)
    000001bc: 	leaq	0x30(%rsp), %r10
    000001c1: 	je	.Ltmp245 # Offset: 449
.Ltmp258:
    000001c7: 	leaq	-0x1(%r8), %rax
    000001cb: 	movq	%rax, %rdx
    000001ce: 	shrq	$0x3f, %rdx
    000001d2: 	addq	%rax, %rdx
    000001d5: 	sarq	%rdx
    000001d8: 	cmpq	%rbx, %r8
    000001db: 	jle	.Ltmp246 # Offset: 475
    000001e1: 	movq	%r11, %rcx
    000001e4: 	subq	%r13, %rcx
    000001e7: 	sarq	$0x3, %rcx
    000001eb: 	jmp	.Ltmp247 # Offset: 491
    000001ed: 	nopl	(%rax) # Size: 3
.Ltmp251:
    000001f0: 	cmpq	$0x3f, %rax
    000001f4: 	jg	.Ltmp248 # Offset: 500
    000001fa: 	movsd	(%r11,%rdx,8), %xmm1
    00000200: 	comisd	%xmm1, %xmm3
    00000204: 	jbe	.Ltmp246 # Offset: 516
.Ltmp252:
    00000206: 	movq	%r8, %rax
    00000209: 	addq	%rcx, %rax
    0000020c: 	js	.Ltmp249 # Offset: 524
.Ltmp259:
    00000212: 	cmpq	$0x3f, %rax
    00000216: 	jg	.Ltmp250 # Offset: 534
    0000021c: 	leaq	(%r11,%r8,8), %rax
.Ltmp261:
    00000220: 	leaq	-0x1(%rdx), %rsi
    00000224: 	movsd	%xmm1, (%rax)
    00000228: 	movq	%rdx, %r8
    0000022b: 	movq	%rsi, %rax
    0000022e: 	shrq	$0x3f, %rax
    00000232: 	addq	%rsi, %rax
    00000235: 	sarq	%rax
    00000238: 	cmpq	%rdx, %rbx
    0000023b: 	jge	.Ltmp246 # Offset: 571
    0000023d: 	movq	%rax, %rdx
.Ltmp247:
    00000240: 	movq	%rdx, %rax
    00000243: 	addq	%rcx, %rax
    00000246: 	jns	.Ltmp251 # Offset: 582
    00000248: 	movq	%rax, %rsi
    0000024b: 	notq	%rsi
    0000024e: 	shrq	$0x6, %rsi
    00000252: 	notq	%rsi
    00000255: 	movq	%rsi, %rdi
    00000258: 	movq	(%r9,%rsi,8), %rsi
    0000025c: 	shlq	$0x6, %rdi
    00000260: 	subq	%rdi, %rax
    00000263: 	movsd	(%rsi,%rax,8), %xmm1
    00000268: 	comisd	%xmm1, %xmm3
    0000026c: 	ja	.Ltmp252 # Offset: 620
    0000026e: 	nop # Size: 2
.Ltmp246:
    00000270: 	movq	%r8, %rsi
    00000273: 	movq	%r10, %rdi
    00000276: 	movaps	%xmm4, 0x30(%rsp)
    0000027b: 	movaps	%xmm5, 0x40(%rsp)
    00000280: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 640
    00000285: 	movq	0x30(%rsp), %rax
    0000028a: 	movsd	%xmm3, (%rax)
    0000028e: 	movq	0x58(%rsp), %rax
    00000293: 	subq	%fs:0x28, %rax
    0000029c: 	jne	.Ltmp253 # Offset: 668
    000002a2: 	addq	$0x68, %rsp
    000002a6: 	popq	%rbx
    000002a7: 	popq	%rbp
    000002a8: 	popq	%r12
    000002aa: 	popq	%r13
    000002ac: 	popq	%r14
    000002ae: 	popq	%r15
    000002b0: 	retq # Offset: 688
    000002b1: 	nopl	(%rax) # Size: 7
.Ltmp232:
    000002b8: 	movq	%rcx, %rdx
    000002bb: 	sarq	$0x6, %rdx
    000002bf: 	jmp	.Ltmp254 # Offset: 703
    000002c4: 	nopl	(%rax) # Size: 4
.Ltmp234:
    000002c8: 	movq	%rdx, %r10
    000002cb: 	movq	%rdx, %r14
    000002ce: 	sarq	$0x6, %r10
    000002d2: 	andl	$0x3f, %r14d
    000002d6: 	movq	(%r9,%r10,8), %r10
    000002da: 	comisd	(%r10,%r14,8), %xmm0
    000002e0: 	ja	.Ltmp242 # Offset: 736
.Ltmp262:
    000002e6: 	movq	%rdx, %r10
    000002e9: 	sarq	$0x6, %r10
    000002ed: 	jmp	.Ltmp255 # Offset: 749
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp237:
    000002f8: 	movq	%rdx, %rcx
    000002fb: 	notq	%rcx
    000002fe: 	shrq	$0x6, %rcx
    00000302: 	notq	%rcx
    00000305: 	jmp	.Ltmp256 # Offset: 773
    0000030a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp236:
    00000310: 	cmpq	$0x3f, %rcx
    00000314: 	jg	.Ltmp257 # Offset: 788
    0000031a: 	movsd	(%r11,%rdi,8), %xmm1
    00000320: 	movq	%rdi, %r8
    00000323: 	jmp	.Ltmp235 # Offset: 803
    00000328: 	nopl	(%rax,%rax) # Size: 8
.Ltmp230:
    00000330: 	cmpq	$0x0, 0x8(%rsp)
    00000336: 	movq	%rsi, %r8
    00000339: 	leaq	0x30(%rsp), %r10
    0000033e: 	jne	.Ltmp246 # Offset: 830
    00000344: 	nopl	(%rax) # Size: 4
.Ltmp245:
    00000348: 	subq	$0x2, %r12
    0000034c: 	leaq	0x30(%rsp), %r10
    00000351: 	movq	%r12, %rax
    00000354: 	shrq	$0x3f, %rax
    00000358: 	addq	%r12, %rax
    0000035b: 	sarq	%rax
    0000035e: 	cmpq	%r8, %rax
    00000361: 	jne	.Ltmp258 # Offset: 865
    00000367: 	leaq	0x1(%r8,%r8), %rbp
    0000036c: 	movq	%r10, %rdi
    0000036f: 	movaps	%xmm4, 0x30(%rsp)
    00000374: 	movq	%rbp, %rsi
    00000377: 	movaps	%xmm5, 0x40(%rsp)
    0000037c: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 892
    00000381: 	movq	0x30(%rsp), %r12
    00000386: 	movq	%r8, %rsi
    00000389: 	leaq	0x10(%rsp), %rdi
    0000038e: 	movaps	%xmm4, 0x10(%rsp)
    00000393: 	movq	%rbp, %r8
    00000396: 	movaps	%xmm5, 0x20(%rsp)
    0000039b: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 923
    000003a0: 	movsd	(%r12), %xmm0
    000003a6: 	movq	0x10(%rsp), %rax
    000003ab: 	movsd	%xmm0, (%rax)
    000003af: 	jmp	.Ltmp258 # Offset: 943
    000003b4: 	nopl	(%rax) # Size: 4
.Ltmp248:
    000003b8: 	movq	%rax, %rsi
    000003bb: 	andl	$0x3f, %eax
    000003be: 	sarq	$0x6, %rsi
    000003c2: 	movq	(%r9,%rsi,8), %rsi
    000003c6: 	movsd	(%rsi,%rax,8), %xmm1
    000003cb: 	comisd	%xmm1, %xmm3
    000003cf: 	jbe	.Ltmp246 # Offset: 975
    000003d5: 	movq	%r8, %rax
    000003d8: 	addq	%rcx, %rax
    000003db: 	jns	.Ltmp259 # Offset: 987
.Ltmp249:
    000003e1: 	movq	%rax, %rsi
    000003e4: 	notq	%rsi
    000003e7: 	shrq	$0x6, %rsi
    000003eb: 	notq	%rsi
    000003ee: 	jmp	.Ltmp260 # Offset: 1006
.Ltmp250:
    000003f0: 	movq	%rax, %rsi
    000003f3: 	sarq	$0x6, %rsi
.Ltmp260:
    000003f7: 	movq	%rsi, %rdi
    000003fa: 	movq	(%r9,%rsi,8), %rsi
    000003fe: 	shlq	$0x6, %rdi
    00000402: 	subq	%rdi, %rax
    00000405: 	leaq	(%rsi,%rax,8), %rax
    00000409: 	jmp	.Ltmp261 # Offset: 1033
    0000040e: 	nop # Size: 2
.Ltmp257:
    00000410: 	movq	%rcx, %rdx
    00000413: 	movq	%rdi, %r8
    00000416: 	jmp	.Ltmp262 # Offset: 1046
.Ltmp253:
    0000041b: 	callq	__stack_chk_fail@PLT # Offset: 1051
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_.isra.0/1(*2)"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x5080
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x5080
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x5090
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x5090
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x50e0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x50e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x5130
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x5130
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp263 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp264 # Offset: 38
.Ltmp263:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp265 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp264:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp265:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x52038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x51d0
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x51d0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp266 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp267 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp268:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp268 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp281:
    00000069: 	leaq	DATAat0x52a64(%rip), %rbp
    00000070: 	leaq	DATAat0x52058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x52098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp269 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x53790(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x520c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x53788(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp270 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp274:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp271 # Offset: 244
    000000fa: 	movq	DATAat0x53778(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp275:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x53778(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp272 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp272:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x52289(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x53790(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp273 # Offset: 398
.Ltmp270:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp274 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp275 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp271:
    000001c8: 	movq	DATAat0x53780(%rip), %rsi
    000001cf: 	movq	DATAat0x53778(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp272 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp273:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp269 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp276 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp277:
    00000210: 	addq	$0x10, %rax
.Ltmp276:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp277 # Offset: 542
.Ltmp282:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x520f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp278 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp279 # Offset: 592
.Ltmp278:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp266:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp279:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp280:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp280 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x5223e(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp266 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp267:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp281 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp269:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp282 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x5500
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x5500
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp283 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp284 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp285:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp285 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp290:
    0000006a: 	leaq	DATAat0x52a64(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x52120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x52264(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x52a64(%rip), %r8
    000000a1: 	leaq	DATAat0x52252(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp286 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp287:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x52289(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp287 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp286 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp288 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp289:
    00000140: 	addq	$0x10, %rax
.Ltmp288:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp289 # Offset: 334
.Ltmp291:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x520f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp283:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp284:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp290 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp286:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp291 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x56b0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x56b0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x56d0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x56d0
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x53788(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x5710
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x5710
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x5740
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x5740
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x5770
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x5770
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x57a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x57a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x57d0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x57d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x5800
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x5800
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x5830
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x5830
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x5860
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x5860
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x5890
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x5890
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x58c0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x58c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x58f0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x58f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x5920
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x5920
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x5960
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x5960
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x5990
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x5990
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x59c0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x59c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x59f0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x59f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x5a20
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x5a20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x5a50
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x5a50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x5a80
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x5a80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x5ab0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x5ab0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x5ae0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x5ae0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x5b10
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x5b10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x5b40
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x5b40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z21summarize_spreadhseetP8_IO_FILEii" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x5b70
  Size        : 0x175
  MaxSize     : 0x180
  Offset      : 0x5b70
  Section     : .text
  Orc Section : .local.text._Z21summarize_spreadhseetP8_IO_FILEii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%esi, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdi, %r13
    0000000e: 	pushq	%r12
    00000010: 	leaq	DATAat0x52262(%rip), %r12
    00000017: 	pushq	%rbp
    00000018: 	movl	%edx, %ebp
    0000001a: 	pushq	%rbx
    0000001b: 	subq	$0x10, %rsp
    0000001f: 	cmpb	$0x0, "_ZZ21summarize_spreadhseetP8_IO_FILEiiE11firstOutput/1"(%rip)
    00000026: 	jne	.Ltmp292 # Offset: 38
.Ltmp297:
    0000002c: 	movl	%r14d, %ecx
    0000002f: 	leaq	DATAat0x52286(%rip), %rdx
    00000036: 	movq	%r13, %rdi
    00000039: 	xorl	%eax, %eax
    0000003b: 	movl	$0x1, %esi
    00000040: 	callq	__fprintf_chk@PLT # Offset: 64
    00000045: 	movl	current_test(%rip), %eax
    0000004b: 	testl	%eax, %eax
    0000004d: 	jle	.Ltmp293 # Offset: 77
    0000004f: 	pxor	%xmm3, %xmm3
    00000053: 	xorl	%ebx, %ebx
    00000055: 	cvtsi2sd	%ebp, %xmm3
    00000059: 	leaq	DATAat0x5228a(%rip), %rbp
    00000060: 	movsd	%xmm3, 0x8(%rsp)
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp294:
    00000070: 	movq	%rbx, %rax
    00000073: 	pxor	%xmm1, %xmm1
    00000077: 	movq	%rbp, %rdx
    0000007a: 	movl	$0x1, %esi
    0000007f: 	shlq	$0x4, %rax
    00000083: 	addq	results(%rip), %rax
    0000008a: 	movq	%r13, %rdi
    0000008d: 	addq	$0x1, %rbx
    00000091: 	movsd	DATAat0x53788(%rip), %xmm0
    00000099: 	mulsd	(%rax), %xmm0
    0000009d: 	movl	$0x1, %eax
    000000a2: 	divsd	0x8(%rsp), %xmm0
    000000a8: 	maxsd	%xmm0, %xmm1
    000000ac: 	movapd	%xmm1, %xmm0
    000000b0: 	callq	__fprintf_chk@PLT # Offset: 176
    000000b5: 	cmpl	%ebx, current_test(%rip)
    000000bb: 	jg	.Ltmp294 # Offset: 187
.Ltmp293:
    000000bd: 	movq	%r12, %rdx
    000000c0: 	movq	%r13, %rdi
    000000c3: 	movl	$0x1, %esi
    000000c8: 	xorl	%eax, %eax
    000000ca: 	callq	__fprintf_chk@PLT # Offset: 202
    000000cf: 	movq	%r13, %rdi
    000000d2: 	callq	fflush@PLT # Offset: 210
    000000d7: 	movl	$0x0, current_test(%rip)
    000000e1: 	addq	$0x10, %rsp
    000000e5: 	popq	%rbx
    000000e6: 	popq	%rbp
    000000e7: 	popq	%r12
    000000e9: 	popq	%r13
    000000eb: 	popq	%r14
    000000ed: 	retq # Offset: 237
    000000ee: 	nop # Size: 2
.Ltmp292:
    000000f0: 	leaq	DATAat0x5227c(%rip), %rdx
    000000f7: 	movl	$0x1, %esi
    000000fc: 	xorl	%eax, %eax
    000000fe: 	xorl	%ebx, %ebx
    00000100: 	callq	__fprintf_chk@PLT # Offset: 256
    00000105: 	movl	current_test(%rip), %edx
    0000010b: 	leaq	DATAat0x52282(%rip), %r12
    00000112: 	testl	%edx, %edx
    00000114: 	jle	.Ltmp295 # Offset: 276
    00000116: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp296:
    00000120: 	movq	%rbx, %rax
    00000123: 	movq	%r12, %rdx
    00000126: 	movl	$0x1, %esi
    0000012b: 	movq	%r13, %rdi
    0000012e: 	shlq	$0x4, %rax
    00000132: 	addq	results(%rip), %rax
    00000139: 	addq	$0x1, %rbx
    0000013d: 	movq	0x8(%rax), %rcx
    00000141: 	xorl	%eax, %eax
    00000143: 	callq	__fprintf_chk@PLT # Offset: 323
    00000148: 	cmpl	%ebx, current_test(%rip)
    0000014e: 	jg	.Ltmp296 # Offset: 334
.Ltmp295:
    00000150: 	leaq	DATAat0x52262(%rip), %r12
    00000157: 	movl	$0x1, %esi
    0000015c: 	movq	%r13, %rdi
    0000015f: 	xorl	%eax, %eax
    00000161: 	movq	%r12, %rdx
    00000164: 	callq	__fprintf_chk@PLT # Offset: 356
    00000169: 	movb	$0x0, "_ZZ21summarize_spreadhseetP8_IO_FILEiiE11firstOutput/1"(%rip)
    00000170: 	jmp	.Ltmp297 # Offset: 368
DWARF CFI Instructions:
    <empty>
End of Function "_Z21summarize_spreadhseetP8_IO_FILEii"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/containers.cpp/1
  Number      : 68
  State       : disassembled
  Address     : 0x5cf0
  Size        : 0x114
  MaxSize     : 0x120
  Offset      : 0x5cf0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	pushq	%r12
    00000002: 	movq	%rdi, %rsi
    00000005: 	pushq	%rbp
    00000006: 	pushq	%rbx
    00000007: 	subq	$0x10, %rsp
    0000000b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000012: 	movq	%fs:0x28, %rax
    0000001b: 	movq	%rax, 0x8(%rsp)
    00000020: 	xorl	%eax, %eax
    00000022: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000029: 	subq	$0x20, %rax
    0000002d: 	cmpq	%rax, %rbx
    00000030: 	je	.Ltmp298 # Offset: 48
    00000036: 	leaq	0x10(%rbx), %rdi
    0000003a: 	movq	0x8(%rsi), %r12
    0000003e: 	movq	%rdi, (%rbx)
    00000041: 	movq	(%rsi), %rbp
    00000044: 	movq	%rbp, %rax
    00000047: 	addq	%r12, %rax
    0000004a: 	je	.Ltmp299 # Offset: 74
    0000004c: 	testq	%rbp, %rbp
    0000004f: 	je	.Ltmp300 # Offset: 79
.Ltmp299:
    00000055: 	movq	%r12, (%rsp)
    00000059: 	cmpq	$0xf, %r12
    0000005d: 	ja	.Ltmp301 # Offset: 93
    0000005f: 	cmpq	$0x1, %r12
    00000063: 	jne	.Ltmp302 # Offset: 99
    00000069: 	movzbl	(%rbp), %eax
    0000006d: 	movb	%al, 0x10(%rbx)
.Ltmp304:
    00000070: 	movq	%r12, 0x8(%rbx)
    00000074: 	movb	$0x0, (%rdi,%r12)
    00000079: 	addq	$0x20, _Z7gLabelsB5cxx11+48(%rip)
    00000081: 	movq	0x8(%rsp), %rax
    00000086: 	subq	%fs:0x28, %rax
    0000008f: 	jne	.Ltmp303 # Offset: 143
    00000091: 	addq	$0x10, %rsp
    00000095: 	popq	%rbx
    00000096: 	popq	%rbp
    00000097: 	popq	%r12
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp301:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	%rsp, %rsi
    000000a6: 	xorl	%edx, %edx
    000000a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 168
    000000ad: 	movq	%rax, (%rbx)
    000000b0: 	movq	%rax, %rdi
    000000b3: 	movq	(%rsp), %rax
    000000b7: 	movq	%rax, 0x10(%rbx)
.Ltmp305:
    000000bb: 	movq	%r12, %rdx
    000000be: 	movq	%rbp, %rsi
    000000c1: 	callq	memcpy@PLT # Offset: 193
    000000c6: 	movq	(%rsp), %r12
    000000ca: 	movq	(%rbx), %rdi
    000000cd: 	jmp	.Ltmp304 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp298:
    000000d0: 	movq	0x8(%rsp), %rax
    000000d5: 	subq	%fs:0x28, %rax
    000000de: 	jne	.Ltmp303 # Offset: 222
    000000e0: 	addq	$0x10, %rsp
    000000e4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000000eb: 	popq	%rbx
    000000ec: 	popq	%rbp
    000000ed: 	popq	%r12
    000000ef: 	jmp	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # TAILCALL  # Offset: 239
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp302:
    000000f8: 	testq	%r12, %r12
    000000fb: 	je	.Ltmp304 # Offset: 251
    00000101: 	jmp	.Ltmp305 # Offset: 257
.Ltmp300:
    00000103: 	leaq	DATAat0x52008(%rip), %rdi
    0000010a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 266
.Ltmp303:
    0000010f: 	callq	__stack_chk_fail@PLT # Offset: 271
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1(*2)"

Binary Function "_ZNSt5dequeIdSaIdEE17_M_default_appendEm.part.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeIdSaIdEE17_M_default_appendEm.part.0/1
                _ZNSt5dequeIdSaIdEE17_M_default_appendEm.part.0/containers.cpp/1
  Number      : 69
  State       : disassembled
  Address     : 0x5e10
  Size        : 0x1e1
  MaxSize     : 0x1f0
  Offset      : 0x5e10
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEE17_M_default_appendEm.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x38, %rsp
    00000014: 	movq	0x40(%rdi), %r8
    00000018: 	movq	0x30(%rdi), %r12
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x28(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	movq	%r8, %rax
    0000002f: 	subq	%r12, %rax
    00000032: 	sarq	$0x3, %rax
    00000036: 	subq	$0x1, %rax
    0000003a: 	cmpq	%rax, %rsi
    0000003d: 	ja	.Ltmp306 # Offset: 61
.Ltmp317:
    00000043: 	movq	0x48(%rbp), %rbx
    00000047: 	movq	%r12, %xmm0
    0000004c: 	movq	%r13, %rsi
    0000004f: 	movq	%rsp, %rdi
    00000052: 	movhps	0x38(%rbp), %xmm0
    00000056: 	movaps	%xmm0, (%rsp)
    0000005a: 	movq	%rbx, %xmm2
    0000005f: 	movq	%r8, %xmm0
    00000064: 	punpcklqdq	%xmm2, %xmm0
    00000068: 	movaps	%xmm0, 0x10(%rsp)
    0000006d: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 109
    00000072: 	movq	(%rsp), %r13
    00000076: 	movq	0x8(%rsp), %r14
    0000007b: 	movq	0x18(%rsp), %r15
    00000080: 	cmpq	%r12, %r13
    00000083: 	je	.Ltmp307 # Offset: 131
    00000089: 	leaq	0x8(%r12), %rdi
    0000008e: 	movq	$0x0, (%r12)
    00000096: 	cmpq	%r8, %rdi
    00000099: 	je	.Ltmp308 # Offset: 153
.Ltmp318:
    0000009f: 	cmpq	%rdi, %r13
    000000a2: 	je	.Ltmp307 # Offset: 162
    000000a8: 	cmpq	%rbx, %r15
    000000ab: 	je	.Ltmp309 # Offset: 171
    000000b1: 	cmpq	%rdi, %r8
    000000b4: 	je	.Ltmp310 # Offset: 180
    000000ba: 	movq	%r8, %rdx
    000000bd: 	xorl	%esi, %esi
    000000bf: 	subq	%rdi, %rdx
    000000c2: 	callq	memset@PLT # Offset: 194
    000000c7: 	movsd	(%r12), %xmm0
.Ltmp319:
    000000cd: 	leaq	0x8(%rbx), %rcx
    000000d1: 	cmpq	%rcx, %r15
    000000d4: 	jbe	.Ltmp311 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp313:
    000000e0: 	movq	(%rcx), %rax
    000000e3: 	unpcklpd	%xmm0, %xmm0
    000000e7: 	leaq	0x200(%rax), %rdx
    000000ee: 	nop # Size: 2
.Ltmp312:
    000000f0: 	movups	%xmm0, (%rax)
    000000f3: 	addq	$0x10, %rax
    000000f7: 	cmpq	%rdx, %rax
    000000fa: 	jne	.Ltmp312 # Offset: 250
    000000fc: 	addq	$0x8, %rcx
    00000100: 	movsd	(%r12), %xmm0
    00000106: 	cmpq	%rcx, %r15
    00000109: 	ja	.Ltmp313 # Offset: 265
.Ltmp311:
    0000010b: 	cmpq	%r14, %r13
    0000010e: 	je	.Ltmp307 # Offset: 270
    00000110: 	subq	%r14, %r13
    00000113: 	movq	%r14, %rax
    00000116: 	leaq	-0x8(%r13), %rcx
    0000011a: 	shrq	$0x3, %rcx
    0000011e: 	addq	$0x1, %rcx
    00000122: 	cmpq	$0x8, %r13
    00000126: 	je	.Ltmp314 # Offset: 294
    00000128: 	movq	%rcx, %rdx
    0000012b: 	movapd	%xmm0, %xmm1
    0000012f: 	shrq	%rdx
    00000132: 	unpcklpd	%xmm1, %xmm1
    00000136: 	shlq	$0x4, %rdx
    0000013a: 	addq	%r14, %rdx
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp315:
    00000140: 	movups	%xmm1, (%rax)
    00000143: 	addq	$0x10, %rax
    00000147: 	cmpq	%rdx, %rax
    0000014a: 	jne	.Ltmp315 # Offset: 330
    0000014c: 	movq	%rcx, %rax
    0000014f: 	andq	$-0x2, %rax
    00000153: 	leaq	(%r14,%rax,8), %r14
    00000157: 	cmpq	%rcx, %rax
    0000015a: 	je	.Ltmp307 # Offset: 346
.Ltmp314:
    0000015c: 	movsd	%xmm0, (%r14)
.Ltmp307:
    00000161: 	movdqa	(%rsp), %xmm3
    00000166: 	movdqa	0x10(%rsp), %xmm4
    0000016c: 	movups	%xmm3, 0x30(%rbp)
    00000170: 	movups	%xmm4, 0x40(%rbp)
    00000174: 	movq	0x28(%rsp), %rax
    00000179: 	subq	%fs:0x28, %rax
    00000182: 	jne	.Ltmp316 # Offset: 386
    00000184: 	addq	$0x38, %rsp
    00000188: 	popq	%rbx
    00000189: 	popq	%rbp
    0000018a: 	popq	%r12
    0000018c: 	popq	%r13
    0000018e: 	popq	%r14
    00000190: 	popq	%r15
    00000192: 	retq # Offset: 402
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp306:
    00000198: 	subq	%rax, %rsi
    0000019b: 	callq	_ZNSt5dequeIdSaIdEE23_M_new_elements_at_backEm # Offset: 411
    000001a0: 	movq	0x30(%rbp), %r12
    000001a4: 	movq	0x40(%rbp), %r8
    000001a8: 	jmp	.Ltmp317 # Offset: 424
    000001ad: 	nopl	(%rax) # Size: 3
.Ltmp308:
    000001b0: 	movq	0x8(%rbx), %rdi
    000001b4: 	addq	$0x8, %rbx
    000001b8: 	leaq	0x200(%rdi), %r8
    000001bf: 	jmp	.Ltmp318 # Offset: 447
.Ltmp309:
    000001c4: 	movq	%r13, %rdx
    000001c7: 	xorl	%esi, %esi
    000001c9: 	subq	%rdi, %rdx
    000001cc: 	callq	memset@PLT # Offset: 460
    000001d1: 	jmp	.Ltmp307 # Offset: 465
.Ltmp310:
    000001d3: 	pxor	%xmm0, %xmm0
    000001d7: 	jmp	.Ltmp319 # Offset: 471
.Ltmp316:
    000001dc: 	callq	__stack_chk_fail@PLT # Offset: 476
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEE17_M_default_appendEm.part.0/1(*2)"

Binary Function "_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1
                _ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/containers.cpp/1
  Number      : 70
  State       : disassembled
  Address     : 0x6000
  Size        : 0x23f
  MaxSize     : 0x240
  Offset      : 0x6000
  Section     : .text
  Orc Section : .local.text._ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	movl	$0x30, %edi
    00000018: 	leaq	0x8(%rbx), %r15
    0000001c: 	subq	$0x18, %rsp
    00000020: 	callq	_Znwm@PLT # Offset: 32
    00000025: 	movq	%rax, %r12
    00000028: 	movq	(%rbp), %rax
    0000002c: 	movq	$0x0, 0x28(%r12)
    00000035: 	movsd	(%rax), %xmm0
    00000039: 	movsd	%xmm0, 0x20(%r12)
    00000040: 	cmpq	%r14, %r15
    00000043: 	je	.Ltmp320 # Offset: 67
    00000049: 	movsd	0x20(%r14), %xmm1
    0000004f: 	movq	%r14, %r13
    00000052: 	leaq	0x20(%r12), %rbp
    00000057: 	comisd	%xmm0, %xmm1
    0000005b: 	jbe	.Ltmp321 # Offset: 91
    0000005d: 	cmpq	%r14, 0x18(%rbx)
    00000061: 	je	.Ltmp322 # Offset: 97
    00000067: 	movq	%r14, %rdi
    0000006a: 	movsd	%xmm0, (%rsp)
    0000006f: 	callq	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT # Offset: 111
    00000074: 	movsd	(%rsp), %xmm0
    00000079: 	comisd	0x20(%rax), %xmm0
    0000007e: 	ja	.Ltmp323 # Offset: 126
.Ltmp328:
    00000084: 	movq	%rbp, %rsi
    00000087: 	movq	%rbx, %rdi
    0000008a: 	movsd	%xmm0, (%rsp)
    0000008f: 	callq	_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE24_M_get_insert_unique_posERS1_ # Offset: 143
    00000094: 	movsd	(%rsp), %xmm0
    00000099: 	movq	%rdx, %r13
.Ltmp345:
    0000009c: 	testq	%r13, %r13
    0000009f: 	je	.Ltmp324 # Offset: 159
.Ltmp344:
    000000a5: 	testq	%rax, %rax
    000000a8: 	setne	%al
    000000ab: 	jmp	.Ltmp325 # Offset: 171
.Ltmp321:
    000000b0: 	comisd	%xmm1, %xmm0
    000000b4: 	movsd	%xmm1, (%rsp)
    000000b9: 	jbe	.Ltmp326 # Offset: 185
    000000bb: 	cmpq	%r14, 0x20(%rbx)
    000000bf: 	je	.Ltmp327 # Offset: 191
    000000c5: 	movq	%r14, %rdi
    000000c8: 	movsd	%xmm0, 0x8(%rsp)
    000000ce: 	callq	_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@PLT # Offset: 206
    000000d3: 	movsd	0x8(%rsp), %xmm0
    000000d9: 	movsd	0x20(%rax), %xmm2
    000000de: 	comisd	%xmm0, %xmm2
    000000e2: 	jbe	.Ltmp328 # Offset: 226
    000000e4: 	cmpq	$0x0, 0x18(%r14)
    000000e9: 	movsd	(%rsp), %xmm1
    000000ee: 	je	.Ltmp329 # Offset: 238
    000000f4: 	movq	%rax, %r13
    000000f7: 	movl	$0x1, %edi
    000000fc: 	jmp	.Ltmp330 # Offset: 252
    000000fe: 	nop # Size: 2
.Ltmp340:
    00000100: 	movq	%rbp, %r13
    00000103: 	testb	%dl, %dl
    00000105: 	jne	.Ltmp331 # Offset: 261
.Ltmp339:
    0000010b: 	comisd	%xmm1, %xmm0
    0000010f: 	ja	.Ltmp332 # Offset: 271
    00000115: 	movq	%rbp, %r13
.Ltmp326:
    00000118: 	movq	%r12, %rdi
    0000011b: 	movl	$0x30, %esi
    00000120: 	movq	%r13, %r12
    00000123: 	callq	_ZdlPvm@PLT # Offset: 291
.Ltmp336:
    00000128: 	addq	$0x18, %rsp
    0000012c: 	movq	%r12, %rax
    0000012f: 	popq	%rbx
    00000130: 	popq	%rbp
    00000131: 	popq	%r12
    00000133: 	popq	%r13
    00000135: 	popq	%r14
    00000137: 	popq	%r15
    00000139: 	retq # Offset: 313
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp320:
    00000140: 	cmpq	$0x0, 0x28(%rbx)
    00000145: 	je	.Ltmp333 # Offset: 325
    00000147: 	movq	0x20(%rbx), %rax
    0000014b: 	comisd	0x20(%rax), %xmm0
    00000150: 	jbe	.Ltmp333 # Offset: 336
.Ltmp343:
    00000152: 	movq	%rax, %r13
    00000155: 	xorl	%eax, %eax
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp325:
    00000160: 	cmpq	%r13, %r15
    00000163: 	je	.Ltmp334 # Offset: 355
    00000165: 	testb	%al, %al
    00000167: 	je	.Ltmp335 # Offset: 359
.Ltmp334:
    0000016d: 	movl	$0x1, %edi
.Ltmp330:
    00000172: 	movq	%r15, %rcx
    00000175: 	movq	%r13, %rdx
    00000178: 	movq	%r12, %rsi
    0000017b: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 379
    00000180: 	addq	$0x1, 0x28(%rbx)
    00000185: 	jmp	.Ltmp336 # Offset: 389
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp333:
    00000190: 	movq	0x10(%rbx), %rbp
    00000194: 	testq	%rbp, %rbp
    00000197: 	jne	.Ltmp337 # Offset: 407
    00000199: 	movq	%r14, %rbp
.Ltmp331:
    0000019c: 	cmpq	%rbp, 0x18(%rbx)
    000001a0: 	je	.Ltmp338 # Offset: 416
    000001a2: 	movq	%rbp, %rdi
    000001a5: 	movsd	%xmm0, (%rsp)
    000001aa: 	movq	%rbp, %r13
    000001ad: 	callq	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT # Offset: 429
    000001b2: 	movsd	(%rsp), %xmm0
    000001b7: 	movsd	0x20(%rax), %xmm1
    000001bc: 	movq	%rax, %rbp
    000001bf: 	jmp	.Ltmp339 # Offset: 447
    000001c4: 	nopl	(%rax) # Size: 4
.Ltmp341:
    000001c8: 	movq	0x10(%rbp), %rax
    000001cc: 	movl	$0x1, %edx
.Ltmp342:
    000001d1: 	testq	%rax, %rax
    000001d4: 	je	.Ltmp340 # Offset: 468
    000001da: 	movq	%rax, %rbp
.Ltmp337:
    000001dd: 	movsd	0x20(%rbp), %xmm1
    000001e2: 	comisd	%xmm0, %xmm1
    000001e6: 	ja	.Ltmp341 # Offset: 486
    000001e8: 	movq	0x18(%rbp), %rax
    000001ec: 	xorl	%edx, %edx
    000001ee: 	jmp	.Ltmp342 # Offset: 494
.Ltmp323:
    000001f0: 	cmpq	$0x0, 0x18(%rax)
    000001f5: 	je	.Ltmp343 # Offset: 501
.Ltmp322:
    000001fb: 	movq	%r13, %rax
    000001fe: 	jmp	.Ltmp344 # Offset: 510
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp335:
    00000208: 	movsd	0x20(%r13), %xmm1
.Ltmp329:
    0000020e: 	xorl	%edi, %edi
    00000210: 	comisd	%xmm0, %xmm1
    00000214: 	seta	%dil
    00000218: 	jmp	.Ltmp330 # Offset: 536
    0000021d: 	nopl	(%rax) # Size: 3
.Ltmp338:
    00000220: 	movq	%rbp, %r13
.Ltmp332:
    00000223: 	xorl	%eax, %eax
    00000225: 	jmp	.Ltmp345 # Offset: 549
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp327:
    00000230: 	xorl	%eax, %eax
    00000232: 	jmp	.Ltmp344 # Offset: 562
.Ltmp324:
    00000237: 	movq	%rax, %r13
    0000023a: 	jmp	.Ltmp326 # Offset: 570
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopISt15_Deque_iteratorIdRdPdElN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopISt15_Deque_iteratorIdRdPdElN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_T1_.isra.0/1
                _ZSt16__introsort_loopISt15_Deque_iteratorIdRdPdElN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_T1_.isra.0/containers.cpp/1
  Number      : 72
  State       : disassembled
  Address     : 0x64d0
  Size        : 0x5fa
  MaxSize     : 0x600
  Offset      : 0x64d0
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopISt15_Deque_iteratorIdRdPdElN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0xc8, %rsp
    00000014: 	movq	0x18(%rsi), %rbp
    00000018: 	movq	0x10(%rdi), %rcx
    0000001c: 	movq	(%rdi), %r15
    0000001f: 	movdqu	(%rsi), %xmm3
    00000023: 	movq	%rdx, 0x8(%rsp)
    00000028: 	movq	0x18(%rdi), %r12
    0000002c: 	movq	%rbp, %rdx
    0000002f: 	movq	0x8(%rsi), %r13
    00000033: 	movq	%rdi, 0x38(%rsp)
    00000038: 	movhlps	%xmm3, %xmm6
    0000003b: 	subq	%r12, %rdx
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0xb8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	movq	%rcx, (%rsp)
    00000055: 	subq	%r15, %rcx
    00000058: 	sarq	$0x3, %rdx
    0000005c: 	movq	%rcx, %r10
    0000005f: 	movq	(%rsi), %rax
    00000062: 	movq	%xmm6, %rcx
    00000067: 	movq	%xmm3, %rsi
    0000006c: 	sarq	$0x3, %r10
    00000070: 	cmpq	$0x1, %rbp
    00000074: 	movaps	%xmm3, 0x10(%rsp)
    00000079: 	adcq	$-0x1, %rdx
    0000007d: 	subq	%rcx, %rsi
    00000080: 	movq	%xmm6, 0x20(%rsp)
    00000086: 	shlq	$0x6, %rdx
    0000008a: 	sarq	$0x3, %rsi
    0000008e: 	addq	%rsi, %rdx
    00000091: 	addq	%r10, %rdx
    00000094: 	cmpq	$0x10, %rdx
    00000098: 	jle	.Ltmp363 # Offset: 152
    0000009e: 	leaq	0x70(%rsp), %rdi
    000000a3: 	movq	0x10(%r14), %r9
    000000a7: 	movq	%r10, %rsi
    000000aa: 	movq	%rbp, %r8
    000000ad: 	leaq	0x90(%rsp), %rcx
    000000b5: 	movq	%rdi, 0x30(%rsp)
    000000ba: 	movq	%r12, %r10
    000000bd: 	movq	%r15, %r11
    000000c0: 	leaq	0x50(%rsp), %rdi
    000000c5: 	movq	%rcx, 0x40(%rsp)
    000000ca: 	movq	%rcx, %r12
    000000cd: 	movq	%rdi, 0x48(%rsp)
    000000d2: 	movq	%xmm3, 0x28(%rsp)
.Ltmp383:
    000000d8: 	movq	0x38(%rsp), %rcx
    000000dd: 	movq	(%rsp), %xmm0
    000000e2: 	movq	%r10, %xmm6
    000000e7: 	movq	%r11, %xmm1
    000000ec: 	cmpq	$0x0, 0x8(%rsp)
    000000f2: 	movq	0x8(%rcx), %rbx
    000000f6: 	punpcklqdq	%xmm6, %xmm0
    000000fa: 	movq	%rbx, %xmm7
    000000ff: 	punpcklqdq	%xmm7, %xmm1
    00000103: 	je	.Ltmp364 # Offset: 259
    00000109: 	movq	%rdx, %rsi
    0000010c: 	movq	0x48(%rsp), %rdi
    00000111: 	movaps	%xmm1, 0x50(%rsp)
    00000116: 	sarq	%rsi
    00000119: 	movaps	%xmm0, 0x60(%rsp)
    0000011e: 	subq	$0x1, 0x8(%rsp)
    00000124: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 292
    00000129: 	movdqa	0x10(%rsp), %xmm6
    0000012f: 	movq	0x30(%rsp), %rdi
    00000134: 	movq	$-0x1, %rsi
    0000013b: 	movq	%r9, 0x80(%rsp)
    00000143: 	movq	%r8, 0x88(%rsp)
    0000014b: 	movaps	%xmm6, 0x70(%rsp)
    00000150: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 336
    00000155: 	movq	(%rsp), %rax
    00000159: 	movl	$0x1, %esi
    0000015e: 	movq	%r12, %rdi
    00000161: 	movq	0x50(%rsp), %rbp
    00000166: 	movq	%r11, 0x90(%rsp)
    0000016e: 	movq	%rax, 0xa0(%rsp)
    00000176: 	movq	%rbx, 0x98(%rsp)
    0000017e: 	movq	%r10, 0xa8(%rsp)
    00000186: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 390
    0000018b: 	movsd	(%rbp), %xmm0
    00000190: 	movq	0x70(%rsp), %rdx
    00000195: 	movq	0x90(%rsp), %rax
    0000019d: 	movsd	(%r11), %xmm2
    000001a2: 	movsd	(%rdx), %xmm3
    000001a6: 	movsd	(%rax), %xmm1
    000001aa: 	comisd	%xmm1, %xmm0
    000001ae: 	jbe	.Ltmp365 # Offset: 430
    000001b4: 	comisd	%xmm0, %xmm3
    000001b8: 	ja	.Ltmp366 # Offset: 440
    000001be: 	comisd	%xmm1, %xmm3
    000001c2: 	ja	.Ltmp367 # Offset: 450
.Ltmp380:
    000001c8: 	movsd	%xmm1, (%r11)
    000001cd: 	movsd	%xmm2, (%rax)
.Ltmp381:
    000001d1: 	movq	(%rsp), %rax
    000001d5: 	movl	$0x1, %esi
    000001da: 	movq	%r12, %rdi
    000001dd: 	movq	%rbx, 0x98(%rsp)
    000001e5: 	movq	%r10, 0xa8(%rsp)
    000001ed: 	xorl	%r10d, %r10d
    000001f0: 	movq	%r11, 0x90(%rsp)
    000001f8: 	movq	%rax, 0xa0(%rsp)
    00000200: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 512
    00000205: 	movq	0xa8(%rsp), %rbp
    0000020d: 	movq	0x20(%rsp), %rsi
    00000212: 	movq	%r8, %rdi
    00000215: 	movq	0xa0(%rsp), %r15
    0000021d: 	movq	0x90(%rsp), %rbx
    00000225: 	movq	0x28(%rsp), %rdx
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp379:
    00000230: 	movsd	(%r11), %xmm1
    00000235: 	nopl	(%rax) # Size: 3
.Ltmp369:
    00000238: 	movsd	(%rbx), %xmm2
    0000023c: 	comisd	%xmm2, %xmm1
    00000240: 	jbe	.Ltmp368 # Offset: 576
.Ltmp370:
    00000242: 	addq	$0x8, %rbx
    00000246: 	cmpq	%rbx, %r15
    00000249: 	jne	.Ltmp369 # Offset: 585
    0000024b: 	movq	0x8(%rbp), %r13
    0000024f: 	addq	$0x8, %rbp
    00000253: 	movl	$0x1, %r10d
    00000259: 	movq	%r13, %rbx
    0000025c: 	leaq	0x200(%r13), %r15
    00000263: 	movsd	(%rbx), %xmm2
    00000267: 	comisd	%xmm2, %xmm1
    0000026b: 	ja	.Ltmp370 # Offset: 619
.Ltmp368:
    0000026d: 	cmpq	%rsi, %rdx
    00000270: 	je	.Ltmp371 # Offset: 624
    00000276: 	movsd	-0x8(%rdx), %xmm0
    0000027b: 	leaq	-0x8(%rdx), %rax
    0000027f: 	comisd	%xmm1, %xmm0
    00000283: 	ja	.Ltmp372 # Offset: 643
    00000285: 	jmp	.Ltmp373 # Offset: 645
    0000028a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp375:
    00000290: 	movsd	-0x8(%rax), %xmm0
    00000295: 	leaq	-0x8(%rax), %rdx
    00000299: 	comisd	%xmm1, %xmm0
    0000029d: 	jbe	.Ltmp374 # Offset: 669
.Ltmp376:
    0000029f: 	movq	%rdx, %rax
.Ltmp372:
    000002a2: 	cmpq	%rsi, %rax
    000002a5: 	jne	.Ltmp375 # Offset: 677
    000002a7: 	movq	-0x8(%rdi), %rsi
    000002ab: 	leaq	-0x8(%rdi), %rax
    000002af: 	movq	%rax, %rdi
    000002b2: 	movsd	0x1f8(%rsi), %xmm0
    000002ba: 	leaq	0x1f8(%rsi), %rdx
    000002c1: 	comisd	%xmm1, %xmm0
    000002c5: 	ja	.Ltmp376 # Offset: 709
.Ltmp374:
    000002c7: 	cmpq	%rdi, %rbp
    000002ca: 	je	.Ltmp377 # Offset: 714
    000002cc: 	jae	.Ltmp378 # Offset: 716
.Ltmp382:
    000002ce: 	leaq	0x8(%rbx), %rax
    000002d2: 	movsd	%xmm0, (%rbx)
    000002d6: 	movsd	%xmm2, (%rdx)
    000002da: 	movq	%rax, %rbx
    000002dd: 	cmpq	%rax, %r15
    000002e0: 	jne	.Ltmp379 # Offset: 736
    000002e6: 	movq	0x8(%rbp), %r13
    000002ea: 	movl	$0x1, %r10d
    000002f0: 	addq	$0x8, %rbp
    000002f4: 	leaq	0x200(%r13), %r15
    000002fb: 	movq	%r13, %rbx
    000002fe: 	jmp	.Ltmp379 # Offset: 766
.Ltmp365:
    00000303: 	comisd	%xmm1, %xmm3
    00000307: 	ja	.Ltmp380 # Offset: 775
    0000030d: 	comisd	%xmm0, %xmm3
    00000311: 	jbe	.Ltmp366 # Offset: 785
.Ltmp367:
    00000317: 	movsd	%xmm3, (%r11)
    0000031c: 	movsd	%xmm2, (%rdx)
    00000320: 	jmp	.Ltmp381 # Offset: 800
    00000325: 	nopl	(%rax) # Size: 3
.Ltmp377:
    00000328: 	cmpq	%rdx, %rbx
    0000032b: 	jb	.Ltmp382 # Offset: 811
.Ltmp378:
    0000032d: 	testb	%r10b, %r10b
    00000330: 	movq	0x28(%rsp), %rax
    00000335: 	movq	0x8(%rsp), %rdx
    0000033a: 	movq	%r12, %rsi
    0000033d: 	movq	0x30(%rsp), %rdi
    00000342: 	movq	%rbx, %xmm4
    00000347: 	cmoveq	0x98(%rsp), %r13
    00000350: 	movq	%r9, 0xa0(%rsp)
    00000358: 	movq	%rax, 0x90(%rsp)
    00000360: 	movq	0x20(%rsp), %rax
    00000365: 	movq	%r13, %xmm7
    0000036a: 	movq	%r8, 0xa8(%rsp)
    00000372: 	punpcklqdq	%xmm7, %xmm4
    00000376: 	movq	%rax, 0x98(%rsp)
    0000037e: 	movq	%rbx, 0x70(%rsp)
    00000383: 	movq	%r13, 0x78(%rsp)
    00000388: 	movq	%r15, 0x80(%rsp)
    00000390: 	movq	%rbp, 0x88(%rsp)
    00000398: 	movaps	%xmm4, 0x10(%rsp)
    0000039d: 	callq	"_ZSt16__introsort_loopISt15_Deque_iteratorIdRdPdElN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_T1_.isra.0/1" # Offset: 925
    000003a2: 	movq	0x38(%rsp), %rax
    000003a7: 	movq	%rbx, (%r14)
    000003aa: 	movq	%rbx, %rdx
    000003ad: 	movq	%r15, 0x10(%r14)
    000003b1: 	movq	(%rax), %r11
    000003b4: 	movq	0x10(%rax), %rcx
    000003b8: 	movq	%rbp, 0x18(%r14)
    000003bc: 	movq	0x18(%rax), %r10
    000003c0: 	movq	%rbp, %rax
    000003c3: 	movq	%r13, 0x8(%r14)
    000003c7: 	movq	%rcx, (%rsp)
    000003cb: 	subq	%r11, %rcx
    000003ce: 	subq	%r10, %rax
    000003d1: 	movq	%rcx, %rsi
    000003d4: 	sarq	$0x3, %rsi
    000003d8: 	sarq	$0x3, %rax
    000003dc: 	cmpq	$0x1, %rbp
    000003e0: 	adcq	$-0x1, %rax
    000003e4: 	subq	%r13, %rdx
    000003e7: 	sarq	$0x3, %rdx
    000003eb: 	shlq	$0x6, %rax
    000003ef: 	addq	%rdx, %rax
    000003f2: 	leaq	(%rax,%rsi), %rdx
    000003f6: 	cmpq	$0x10, %rdx
    000003fa: 	jle	.Ltmp363 # Offset: 1018
    000003fc: 	movdqa	0x10(%rsp), %xmm5
    00000402: 	movq	%r15, %r9
    00000405: 	movq	%rbp, %r8
    00000408: 	movq	%rbx, %rax
    0000040b: 	movq	%xmm5, 0x28(%rsp)
    00000411: 	movhps	%xmm5, 0x20(%rsp)
    00000416: 	jmp	.Ltmp383 # Offset: 1046
    0000041b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp371:
    00000420: 	movq	-0x8(%rdi), %rsi
    00000424: 	subq	$0x8, %rdi
    00000428: 	movsd	0x1f8(%rsi), %xmm0
    00000430: 	leaq	0x200(%rsi), %rdx
    00000437: 	leaq	-0x8(%rdx), %rax
    0000043b: 	comisd	%xmm1, %xmm0
    0000043f: 	ja	.Ltmp372 # Offset: 1087
.Ltmp373:
    00000445: 	movq	%rax, %rdx
    00000448: 	jmp	.Ltmp374 # Offset: 1096
.Ltmp366:
    0000044d: 	movsd	%xmm0, (%r11)
    00000452: 	movsd	%xmm2, (%rbp)
    00000457: 	jmp	.Ltmp381 # Offset: 1111
.Ltmp363:
    0000045c: 	movq	0xb8(%rsp), %rax
    00000464: 	subq	%fs:0x28, %rax
    0000046d: 	jne	.Ltmp384 # Offset: 1133
    00000473: 	addq	$0xc8, %rsp
    0000047a: 	popq	%rbx
    0000047b: 	popq	%rbp
    0000047c: 	popq	%r12
    0000047e: 	popq	%r13
    00000480: 	popq	%r14
    00000482: 	popq	%r15
    00000484: 	retq # Offset: 1156
.Ltmp364:
    00000485: 	movq	%rsi, 0x10(%rsp)
    0000048a: 	movq	0x40(%rsp), %rdx
    0000048f: 	movq	%r8, %rbp
    00000492: 	movq	%r10, %r12
    00000495: 	movq	%rax, 0x90(%rsp)
    0000049d: 	movq	0x30(%rsp), %rsi
    000004a2: 	movq	%r11, %r15
    000004a5: 	movq	%rax, 0x70(%rsp)
    000004aa: 	movq	0x48(%rsp), %rdi
    000004af: 	movq	%rax, 0x8(%rsp)
    000004b4: 	movq	(%rsp), %rax
    000004b8: 	movq	%r13, 0x98(%rsp)
    000004c0: 	movq	%rax, 0x60(%rsp)
    000004c5: 	movq	%r9, 0xa0(%rsp)
    000004cd: 	movq	%r8, 0xa8(%rsp)
    000004d5: 	movq	%r13, 0x78(%rsp)
    000004da: 	movq	%r9, 0x80(%rsp)
    000004e2: 	movq	%r8, 0x88(%rsp)
    000004ea: 	movq	%r11, 0x50(%rsp)
    000004ef: 	movq	%rbx, 0x58(%rsp)
    000004f4: 	movq	%xmm6, 0x68(%rsp)
    000004fa: 	callq	_ZSt13__heap_selectISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_S7_T0_ # Offset: 1274
    000004ff: 	movq	0x8(%rsp), %rax
    00000504: 	movq	%rbp, %rdx
    00000507: 	movq	0x10(%rsp), %r10
    0000050c: 	subq	%r12, %rdx
    0000050f: 	sarq	$0x3, %rdx
    00000513: 	movq	%rax, %rsi
    00000516: 	cmpq	$0x1, %rbp
    0000051a: 	adcq	$-0x1, %rdx
    0000051e: 	subq	%r13, %rsi
    00000521: 	shlq	$0x6, %rdx
    00000525: 	sarq	$0x3, %rsi
    00000529: 	addq	%rsi, %rdx
    0000052c: 	addq	%r10, %rdx
    0000052f: 	cmpq	$0x1, %rdx
    00000533: 	jle	.Ltmp363 # Offset: 1331
    00000539: 	movq	%r13, %rcx
    0000053c: 	movq	%rbx, 0x10(%rsp)
    00000541: 	movq	%r12, %r13
    00000544: 	movq	%rbp, %rbx
    00000547: 	movq	%r10, 0x8(%rsp)
    0000054c: 	movq	%r15, %rbp
    0000054f: 	movq	%rcx, %r12
    00000552: 	movq	%rax, %r15
    00000555: 	jmp	.Ltmp385 # Offset: 1365
.Ltmp386:
    00000557: 	movsd	(%rbp), %xmm1
    0000055c: 	movq	%rbx, %r14
    0000055f: 	leaq	-0x8(%rdx), %r15
    00000563: 	movsd	-0x8(%rdx), %xmm0
    00000568: 	subq	%r13, %r14
    0000056b: 	movq	0x10(%rsp), %rax
    00000570: 	movq	0x40(%rsp), %rdi
    00000575: 	movq	%rbp, 0x90(%rsp)
    0000057d: 	sarq	$0x3, %r14
    00000581: 	movsd	%xmm1, -0x8(%rdx)
    00000586: 	cmpq	$0x1, %rbx
    0000058a: 	movq	%r15, %rdx
    0000058d: 	adcq	$-0x1, %r14
    00000591: 	subq	%r12, %rdx
    00000594: 	movq	%rax, 0x98(%rsp)
    0000059c: 	movq	(%rsp), %rax
    000005a0: 	sarq	$0x3, %rdx
    000005a4: 	shlq	$0x6, %r14
    000005a8: 	xorl	%esi, %esi
    000005aa: 	movq	%r13, 0xa8(%rsp)
    000005b2: 	addq	%rdx, %r14
    000005b5: 	addq	0x8(%rsp), %r14
    000005ba: 	movq	%rax, 0xa0(%rsp)
    000005c2: 	movq	%r14, %rdx
    000005c5: 	callq	"_ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_.isra.0/1" # Offset: 1477
    000005ca: 	cmpq	$0x1, %r14
    000005ce: 	jle	.Ltmp363 # Offset: 1486
.Ltmp385:
    000005d4: 	movq	%r15, %rdx
    000005d7: 	cmpq	%r12, %r15
    000005da: 	jne	.Ltmp386 # Offset: 1498
    000005e0: 	movq	-0x8(%rbx), %r12
    000005e4: 	subq	$0x8, %rbx
    000005e8: 	leaq	0x200(%r12), %rdx
    000005f0: 	jmp	.Ltmp386 # Offset: 1520
.Ltmp384:
    000005f5: 	callq	__stack_chk_fail@PLT # Offset: 1525
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopISt15_Deque_iteratorIdRdPdElN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_T1_.isra.0/1(*2)"

Binary Function "_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEdET0_T_S9_S8_RSaIT1_E.isra.0/1(*2)" after disassembly {
  All names   : _ZSt22__uninitialized_copy_aISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEdET0_T_S9_S8_RSaIT1_E.isra.0/1
                _ZSt22__uninitialized_copy_aISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEdET0_T_S9_S8_RSaIT1_E.isra.0/containers.cpp/1
  Number      : 73
  State       : disassembled
  Address     : 0x6ad0
  Size        : 0x126
  MaxSize     : 0x130
  Offset      : 0x6ad0
  Section     : .text
  Orc Section : .local.text._ZSt22__uninitialized_copy_aISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEdET0_T_S9_S8_RSaIT1_E.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x68, %rsp
    00000011: 	movq	0x18(%rdx), %rbp
    00000015: 	movq	0x18(%rsi), %rbx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x58(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movq	0x8(%rdx), %rax
    0000002d: 	movq	(%rdx), %r13
    00000030: 	movdqu	(%rcx), %xmm1
    00000034: 	movdqu	0x10(%rcx), %xmm0
    00000039: 	movq	(%rsi), %r9
    0000003c: 	movq	0x10(%rsi), %rdx
    00000040: 	movq	%rax, 0x8(%rsp)
    00000045: 	cmpq	%rbx, %rbp
    00000048: 	je	.Ltmp387 # Offset: 72
    0000004e: 	leaq	0x10(%rsp), %r15
    00000053: 	movaps	%xmm1, 0x10(%rsp)
    00000058: 	leaq	0x30(%rsp), %r14
    0000005d: 	movq	%r9, %rsi
    00000060: 	movaps	%xmm0, 0x20(%rsp)
    00000065: 	movq	%r15, %rcx
    00000068: 	jmp	.Ltmp388 # Offset: 104
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp389:
    00000070: 	movaps	%xmm1, 0x10(%rsp)
    00000075: 	movq	%r15, %rcx
    00000078: 	movaps	%xmm0, 0x20(%rsp)
    0000007d: 	movq	(%rbx), %rsi
    00000080: 	leaq	0x200(%rsi), %rdx
.Ltmp388:
    00000087: 	movq	%r14, %rdi
    0000008a: 	addq	$0x8, %rbx
    0000008e: 	callq	_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 142
    00000093: 	movdqa	0x30(%rsp), %xmm1
    00000099: 	movdqa	0x40(%rsp), %xmm0
    0000009f: 	cmpq	%rbx, %rbp
    000000a2: 	jne	.Ltmp389 # Offset: 162
    000000a4: 	movq	0x8(%rsp), %rsi
    000000a9: 	movq	%r14, %rcx
    000000ac: 	movq	%r13, %rdx
    000000af: 	movq	%r15, %rdi
    000000b2: 	movaps	%xmm1, 0x30(%rsp)
    000000b7: 	movaps	%xmm0, 0x40(%rsp)
    000000bc: 	callq	_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 188
.Ltmp391:
    000000c1: 	movdqa	0x10(%rsp), %xmm2
    000000c7: 	movdqa	0x20(%rsp), %xmm3
    000000cd: 	movups	%xmm2, (%r12)
    000000d2: 	movups	%xmm3, 0x10(%r12)
    000000d8: 	movq	0x58(%rsp), %rax
    000000dd: 	subq	%fs:0x28, %rax
    000000e6: 	jne	.Ltmp390 # Offset: 230
    000000e8: 	addq	$0x68, %rsp
    000000ec: 	movq	%r12, %rax
    000000ef: 	popq	%rbx
    000000f0: 	popq	%rbp
    000000f1: 	popq	%r12
    000000f3: 	popq	%r13
    000000f5: 	popq	%r14
    000000f7: 	popq	%r15
    000000f9: 	retq # Offset: 249
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp387:
    00000100: 	leaq	0x10(%rsp), %rdi
    00000105: 	leaq	0x30(%rsp), %rcx
    0000010a: 	movq	%r13, %rdx
    0000010d: 	movq	%r9, %rsi
    00000110: 	movaps	%xmm1, 0x30(%rsp)
    00000115: 	movaps	%xmm0, 0x40(%rsp)
    0000011a: 	callq	_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 282
    0000011f: 	jmp	.Ltmp391 # Offset: 287
.Ltmp390:
    00000121: 	callq	__stack_chk_fail@PLT # Offset: 289
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEdET0_T_S9_S8_RSaIT1_E.isra.0/1(*2)"

Binary Function "_ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_.isra.0/1
                _ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_.isra.0/containers.cpp/1
  Number      : 74
  State       : disassembled
  Address     : 0x6c00
  Size        : 0x35c
  MaxSize     : 0x360
  Offset      : 0x6c00
  Section     : .text
  Orc Section : .local.text._ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0xa8, %rsp
    00000011: 	movq	(%rsi), %r8
    00000014: 	movq	%rsi, 0x28(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x98(%rsp)
    0000002a: 	movq	(%rdi), %rax
    0000002d: 	cmpq	%r8, %rax
    00000030: 	je	.Ltmp392 # Offset: 48
    00000036: 	movq	0x10(%rdi), %xmm1
    0000003b: 	movq	%rax, %xmm0
    00000040: 	movq	%rdi, %r14
    00000043: 	movl	$0x1, %esi
    00000048: 	movhps	0x8(%rdi), %xmm0
    0000004c: 	leaq	0x50(%rsp), %r15
    00000051: 	movhps	0x18(%rdi), %xmm1
    00000055: 	leaq	0x30(%rsp), %rdi
    0000005a: 	movaps	%xmm0, 0x30(%rsp)
    0000005f: 	movaps	%xmm1, 0x40(%rsp)
    00000064: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 100
    00000069: 	movq	0x30(%rsp), %rdx
    0000006e: 	cmpq	%rdx, %r8
    00000071: 	je	.Ltmp392 # Offset: 113
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp400:
    00000080: 	movq	0x10(%r14), %rax
    00000084: 	movq	(%r14), %r13
    00000087: 	movsd	(%rdx), %xmm5
    0000008b: 	movq	0x18(%r14), %rbx
    0000008f: 	movsd	(%r13), %xmm0
    00000095: 	movq	0x38(%rsp), %rsi
    0000009a: 	movq	%rax, 0x20(%rsp)
    0000009f: 	movq	0x40(%rsp), %rax
    000000a4: 	movsd	%xmm5, (%rsp)
    000000a9: 	comisd	%xmm5, %xmm0
    000000ad: 	movq	%rax, 0x10(%rsp)
    000000b2: 	movq	0x48(%rsp), %rax
    000000b7: 	movq	%rax, 0x8(%rsp)
    000000bc: 	leaq	0x8(%rdx), %rax
    000000c0: 	movq	%rax, 0x18(%rsp)
    000000c5: 	jbe	.Ltmp393 # Offset: 197
    000000cb: 	movq	%rdx, %rax
    000000ce: 	subq	%rsi, %rax
    000000d1: 	sarq	$0x3, %rax
    000000d5: 	addq	$0x1, %rax
    000000d9: 	js	.Ltmp394 # Offset: 217
    000000df: 	cmpq	$0x3f, %rax
    000000e3: 	jg	.Ltmp395 # Offset: 227
    000000e9: 	movq	0x8(%rsp), %r8
    000000ee: 	movq	0x10(%rsp), %xmm0
    000000f4: 	movq	%rsi, %rdi
    000000f7: 	movq	0x18(%rsp), %xmm1
.Ltmp410:
    000000fd: 	movq	%rdi, %xmm7
    00000102: 	movdqa	%xmm1, %xmm3
    00000106: 	movq	0x8(%rsp), %rbp
    0000010b: 	movdqa	%xmm0, %xmm2
    0000010f: 	punpcklqdq	%xmm7, %xmm3
    00000113: 	movq	%r8, %xmm7
    00000118: 	punpcklqdq	%xmm7, %xmm2
    0000011c: 	cmpq	%rbp, %rbx
    0000011f: 	je	.Ltmp396 # Offset: 287
    00000125: 	movq	%rdi, 0x58(%rsp)
    0000012a: 	leaq	0x70(%rsp), %r12
    0000012f: 	movq	%r8, 0x68(%rsp)
    00000134: 	movq	%xmm1, 0x50(%rsp)
    0000013a: 	movq	%xmm0, 0x60(%rsp)
    00000140: 	jmp	.Ltmp397 # Offset: 320
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp398:
    00000148: 	movaps	%xmm1, 0x50(%rsp)
    0000014d: 	movaps	%xmm0, 0x60(%rsp)
    00000152: 	movq	(%rbp), %rsi
    00000156: 	leaq	0x200(%rsi), %rdx
.Ltmp397:
    0000015d: 	movq	%r15, %rcx
    00000160: 	movq	%r12, %rdi
    00000163: 	subq	$0x8, %rbp
    00000167: 	callq	_ZSt23__copy_move_backward_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 359
    0000016c: 	movdqa	0x70(%rsp), %xmm1
    00000172: 	movdqa	0x80(%rsp), %xmm0
    0000017b: 	cmpq	%rbp, %rbx
    0000017e: 	jne	.Ltmp398 # Offset: 382
    00000180: 	movq	0x20(%rsp), %rdx
    00000185: 	movq	%r12, %rcx
    00000188: 	movq	%r13, %rsi
    0000018b: 	movq	%r15, %rdi
    0000018e: 	movaps	%xmm1, 0x70(%rsp)
    00000193: 	movaps	%xmm0, 0x80(%rsp)
    0000019b: 	callq	_ZSt23__copy_move_backward_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 411
.Ltmp412:
    000001a0: 	movq	(%r14), %rax
    000001a3: 	movsd	(%rsp), %xmm7
    000001a8: 	movsd	%xmm7, (%rax)
.Ltmp408:
    000001ac: 	movq	0x18(%rsp), %rdx
    000001b1: 	movq	%rdx, 0x30(%rsp)
    000001b6: 	cmpq	%rdx, 0x10(%rsp)
    000001bb: 	je	.Ltmp399 # Offset: 443
.Ltmp409:
    000001c1: 	movq	0x28(%rsp), %rax
    000001c6: 	movq	(%rax), %r8
    000001c9: 	cmpq	%rdx, %r8
    000001cc: 	jne	.Ltmp400 # Offset: 460
.Ltmp392:
    000001d2: 	movq	0x98(%rsp), %rax
    000001da: 	subq	%fs:0x28, %rax
    000001e3: 	jne	.Ltmp401 # Offset: 483
    000001e9: 	addq	$0xa8, %rsp
    000001f0: 	popq	%rbx
    000001f1: 	popq	%rbp
    000001f2: 	popq	%r12
    000001f4: 	popq	%r13
    000001f6: 	popq	%r14
    000001f8: 	popq	%r15
    000001fa: 	retq # Offset: 506
    000001fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp393:
    00000200: 	movq	0x8(%rsp), %rdi
    00000205: 	movq	%rdx, %rcx
    00000208: 	cmpq	%rdx, %rsi
    0000020b: 	je	.Ltmp402 # Offset: 523
.Ltmp411:
    00000211: 	movsd	-0x8(%rcx), %xmm0
    00000216: 	comisd	(%rsp), %xmm0
    0000021b: 	leaq	-0x8(%rcx), %rax
    0000021f: 	ja	.Ltmp403 # Offset: 543
    00000221: 	jmp	.Ltmp404 # Offset: 545
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp406:
    00000228: 	movsd	-0x8(%rax), %xmm0
    0000022d: 	comisd	(%rsp), %xmm0
    00000232: 	leaq	-0x8(%rax), %rcx
    00000236: 	jbe	.Ltmp405 # Offset: 566
.Ltmp407:
    00000238: 	movq	%rax, %rdx
    0000023b: 	movq	%rcx, %rax
.Ltmp403:
    0000023e: 	movsd	%xmm0, (%rdx)
    00000242: 	cmpq	%rsi, %rax
    00000245: 	jne	.Ltmp406 # Offset: 581
    00000247: 	movq	-0x8(%rdi), %rsi
    0000024b: 	leaq	-0x8(%rdi), %rdx
    0000024f: 	movsd	0x1f8(%rsi), %xmm0
    00000257: 	comisd	(%rsp), %xmm0
    0000025c: 	leaq	0x1f8(%rsi), %rcx
    00000263: 	jbe	.Ltmp405 # Offset: 611
    00000265: 	movq	%rdx, %rdi
    00000268: 	jmp	.Ltmp407 # Offset: 616
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp404:
    00000270: 	movq	%rdx, %rax
    00000273: 	nopl	(%rax,%rax) # Size: 5
.Ltmp405:
    00000278: 	movsd	(%rsp), %xmm7
    0000027d: 	movsd	%xmm7, (%rax)
    00000281: 	jmp	.Ltmp408 # Offset: 641
    00000286: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp399:
    00000290: 	movq	0x8(%rsp), %rax
    00000295: 	movq	0x8(%rax), %rdx
    00000299: 	leaq	0x8(%rax), %rbp
    0000029d: 	movq	%rbp, %xmm2
    000002a2: 	movq	%rdx, %xmm0
    000002a7: 	leaq	0x200(%rdx), %rbx
    000002ae: 	punpcklqdq	%xmm0, %xmm0
    000002b2: 	movaps	%xmm0, 0x30(%rsp)
    000002b7: 	movq	%rbx, %xmm0
    000002bc: 	punpcklqdq	%xmm2, %xmm0
    000002c0: 	movaps	%xmm0, 0x40(%rsp)
    000002c5: 	jmp	.Ltmp409 # Offset: 709
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp395:
    000002d0: 	movq	%rax, %rcx
    000002d3: 	sarq	$0x6, %rcx
.Ltmp413:
    000002d7: 	movq	0x8(%rsp), %rdi
    000002dc: 	leaq	(%rdi,%rcx,8), %r8
    000002e0: 	shlq	$0x6, %rcx
    000002e4: 	movq	(%r8), %rdi
    000002e7: 	subq	%rcx, %rax
    000002ea: 	leaq	0x200(%rdi), %r9
    000002f1: 	leaq	(%rdi,%rax,8), %rax
    000002f5: 	movq	%r9, %xmm0
    000002fa: 	movq	%rax, %xmm1
    000002ff: 	jmp	.Ltmp410 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp402:
    00000308: 	movq	%rdi, %rax
    0000030b: 	leaq	-0x8(%rdi), %rdi
    0000030f: 	movq	-0x8(%rax), %rsi
    00000313: 	leaq	0x200(%rsi), %rcx
    0000031a: 	jmp	.Ltmp411 # Offset: 794
    0000031f: 	nop # Size: 1
.Ltmp396:
    00000320: 	leaq	0x70(%rsp), %rcx
    00000325: 	movq	%r13, %rsi
    00000328: 	movq	%r15, %rdi
    0000032b: 	movaps	%xmm3, 0x70(%rsp)
    00000330: 	movaps	%xmm2, 0x80(%rsp)
    00000338: 	callq	_ZSt23__copy_move_backward_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 824
    0000033d: 	jmp	.Ltmp412 # Offset: 829
    00000342: 	nopw	(%rax,%rax) # Size: 6
.Ltmp394:
    00000348: 	movq	%rax, %rcx
    0000034b: 	notq	%rcx
    0000034e: 	shrq	$0x6, %rcx
    00000352: 	notq	%rcx
    00000355: 	jmp	.Ltmp413 # Offset: 853
.Ltmp401:
    00000357: 	callq	__stack_chk_fail@PLT # Offset: 855
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_.isra.0/1(*2)"

Binary Function "_ZNSt5dequeIdSaIdEEaSERKS1_.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeIdSaIdEEaSERKS1_.isra.0/1
                _ZNSt5dequeIdSaIdEEaSERKS1_.isra.0/containers.cpp/1
  Number      : 75
  State       : disassembled
  Address     : 0x6f60
  Size        : 0x576
  MaxSize     : 0x580
  Offset      : 0x6f60
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEEaSERKS1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x108, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0xf8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	cmpq	%rdi, %rsi
    00000027: 	je	.Ltmp414 # Offset: 39
    0000002d: 	movq	0x48(%rdi), %rdx
    00000031: 	movq	%rsi, %rbx
    00000034: 	movq	0x48(%rsi), %rsi
    00000038: 	movq	%rdi, %rbp
    0000003b: 	movdqu	0x30(%rbx), %xmm0
    00000040: 	movq	0x28(%rbx), %r13
    00000044: 	movq	%rdx, %rax
    00000047: 	subq	0x28(%rdi), %rax
    0000004b: 	movq	0x20(%rbx), %r14
    0000004f: 	sarq	$0x3, %rax
    00000053: 	cmpq	$0x1, %rdx
    00000057: 	movq	0x30(%rdi), %rdx
    0000005b: 	movhlps	%xmm0, %xmm5
    0000005e: 	adcq	$-0x1, %rax
    00000062: 	subq	0x38(%rdi), %rdx
    00000066: 	movq	%xmm0, %rcx
    0000006b: 	movdqu	0x10(%rdi), %xmm4
    00000070: 	sarq	$0x3, %rdx
    00000074: 	shlq	$0x6, %rax
    00000078: 	movq	%xmm5, %r8
    0000007d: 	movdqu	0x20(%rdi), %xmm3
    00000082: 	addq	%rdx, %rax
    00000085: 	movq	0x20(%rdi), %rdx
    00000089: 	subq	0x10(%rdi), %rdx
    0000008d: 	sarq	$0x3, %rdx
    00000091: 	movq	0x10(%rbx), %rdi
    00000095: 	movdqu	0x10(%rbx), %xmm1
    0000009a: 	addq	%rdx, %rax
    0000009d: 	movq	%rsi, %rdx
    000000a0: 	movdqu	0x20(%rbx), %xmm2
    000000a5: 	subq	%r13, %rdx
    000000a8: 	movhps	%xmm1, (%rsp)
    000000ac: 	sarq	$0x3, %rdx
    000000b0: 	cmpq	$0x1, %rsi
    000000b4: 	adcq	$-0x1, %rdx
    000000b8: 	subq	%r8, %rcx
    000000bb: 	sarq	$0x3, %rcx
    000000bf: 	shlq	$0x6, %rdx
    000000c3: 	addq	%rcx, %rdx
    000000c6: 	movq	%r14, %rcx
    000000c9: 	subq	%rdi, %rcx
    000000cc: 	sarq	$0x3, %rcx
    000000d0: 	addq	%rcx, %rdx
    000000d3: 	cmpq	%rdx, %rax
    000000d6: 	jb	.Ltmp415 # Offset: 214
    000000dc: 	movaps	%xmm0, 0x90(%rsp)
    000000e4: 	movq	0x40(%rbx), %xmm0
    000000e9: 	movq	%rsi, %xmm6
    000000ee: 	leaq	0xd0(%rsp), %rdi
    000000f6: 	leaq	0xb0(%rsp), %rcx
    000000fe: 	leaq	0x90(%rsp), %rdx
    00000106: 	movaps	%xmm4, 0xb0(%rsp)
    0000010e: 	punpcklqdq	%xmm6, %xmm0
    00000112: 	leaq	0x70(%rsp), %rsi
    00000117: 	movaps	%xmm3, 0xc0(%rsp)
    0000011f: 	movaps	%xmm0, 0xa0(%rsp)
    00000127: 	movaps	%xmm1, 0x70(%rsp)
    0000012c: 	movaps	%xmm2, 0x80(%rsp)
    00000134: 	callq	_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_ # Offset: 308
    00000139: 	movq	0x48(%rbp), %rax
    0000013d: 	leaq	0x8(%rax), %r12
    00000141: 	movq	0xe8(%rsp), %rax
    00000149: 	leaq	0x8(%rax), %rbx
    0000014d: 	cmpq	%rbx, %r12
    00000150: 	jbe	.Ltmp416 # Offset: 336
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp417:
    00000158: 	movq	(%rbx), %rdi
    0000015b: 	movl	$0x200, %esi
    00000160: 	addq	$0x8, %rbx
    00000164: 	callq	_ZdlPvm@PLT # Offset: 356
    00000169: 	cmpq	%rbx, %r12
    0000016c: 	ja	.Ltmp417 # Offset: 364
.Ltmp416:
    0000016e: 	movdqa	0xd0(%rsp), %xmm7
    00000177: 	movdqa	0xe0(%rsp), %xmm6
    00000180: 	movups	%xmm7, 0x30(%rbp)
    00000184: 	movups	%xmm6, 0x40(%rbp)
.Ltmp414:
    00000188: 	movq	0xf8(%rsp), %rax
    00000190: 	subq	%fs:0x28, %rax
    00000199: 	jne	.Ltmp418 # Offset: 409
    0000019f: 	addq	$0x108, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	retq # Offset: 432
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp415:
    000001b8: 	movq	%rdi, %rdx
    000001bb: 	subq	(%rsp), %rdx
    000001bf: 	sarq	$0x3, %rdx
    000001c3: 	addq	%rax, %rdx
    000001c6: 	js	.Ltmp419 # Offset: 454
    000001cc: 	cmpq	$0x3f, %rdx
    000001d0: 	jle	.Ltmp420 # Offset: 464
    000001d6: 	movq	%rdx, %rax
    000001d9: 	sarq	$0x6, %rax
.Ltmp424:
    000001dd: 	leaq	(%r13,%rax,8), %r13
    000001e2: 	shlq	$0x6, %rax
    000001e6: 	movq	(%r13), %rdi
    000001ea: 	subq	%rax, %rdx
    000001ed: 	leaq	(%rdi,%rdx,8), %rax
    000001f1: 	movq	%rdi, (%rsp)
    000001f5: 	leaq	0x200(%rdi), %r14
    000001fc: 	movq	%rax, 0x8(%rsp)
    00000201: 	movq	%rax, %xmm0
.Ltmp423:
    00000206: 	movhps	(%rsp), %xmm0
    0000020a: 	movq	%r13, %xmm7
    0000020f: 	leaq	0xb0(%rsp), %r10
    00000217: 	movaps	%xmm1, 0x70(%rsp)
    0000021c: 	leaq	0x90(%rsp), %r11
    00000224: 	movaps	%xmm0, 0x90(%rsp)
    0000022c: 	leaq	0x70(%rsp), %r15
    00000231: 	movq	%r10, %rcx
    00000234: 	movq	%r14, %xmm0
    00000239: 	movq	%r11, %rdx
    0000023c: 	movq	%r15, %rsi
    0000023f: 	movq	%r10, 0x20(%rsp)
    00000244: 	leaq	0xd0(%rsp), %r12
    0000024c: 	punpcklqdq	%xmm7, %xmm0
    00000250: 	movq	%r11, 0x10(%rsp)
    00000255: 	movq	%r12, %rdi
    00000258: 	movaps	%xmm0, 0xa0(%rsp)
    00000260: 	movaps	%xmm4, 0xb0(%rsp)
    00000268: 	movaps	%xmm3, 0xc0(%rsp)
    00000270: 	movaps	%xmm2, 0x80(%rsp)
    00000278: 	callq	_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_ # Offset: 632
    0000027d: 	movdqu	0x40(%rbx), %xmm1
    00000282: 	movdqu	0x30(%rbx), %xmm0
    00000287: 	movq	0x30(%rbp), %rbx
    0000028b: 	movq	0x40(%rbp), %r8
    0000028f: 	movhlps	%xmm1, %xmm5
    00000292: 	movhlps	%xmm0, %xmm6
    00000295: 	movq	0x10(%rsp), %r11
    0000029a: 	movq	0x20(%rsp), %r10
    0000029f: 	movq	%xmm5, %rax
    000002a4: 	movq	%xmm5, %rcx
    000002a9: 	movq	%xmm6, %rsi
    000002ae: 	subq	%r13, %rax
    000002b1: 	sarq	$0x3, %rax
    000002b5: 	cmpq	$0x1, %rcx
    000002b9: 	adcq	$-0x1, %rax
    000002bd: 	shlq	$0x6, %rax
    000002c1: 	movq	%rax, %rcx
    000002c4: 	movq	%xmm0, %rax
    000002c9: 	subq	%rsi, %rax
    000002cc: 	sarq	$0x3, %rax
    000002d0: 	addq	%rcx, %rax
    000002d3: 	movq	%r14, %rcx
    000002d6: 	subq	0x8(%rsp), %rcx
    000002db: 	sarq	$0x3, %rcx
    000002df: 	cmpq	0x10(%rbp), %rbx
    000002e3: 	leaq	(%rax,%rcx), %r9
    000002e7: 	je	.Ltmp421 # Offset: 743
    000002ed: 	movq	%r8, %rcx
    000002f0: 	subq	%rbx, %rcx
    000002f3: 	sarq	$0x3, %rcx
    000002f7: 	subq	$0x1, %rcx
    000002fb: 	cmpq	%rcx, %r9
    000002fe: 	ja	.Ltmp422 # Offset: 766
.Ltmp427:
    00000304: 	movq	0x38(%rbp), %xmm3
    00000309: 	movq	%rbx, %xmm4
    0000030e: 	movq	%r9, %rsi
    00000311: 	leaq	0x50(%rsp), %rdi
    00000316: 	movq	0x48(%rbp), %xmm2
    0000031b: 	movaps	%xmm1, 0x20(%rsp)
    00000320: 	punpcklqdq	%xmm3, %xmm4
    00000324: 	movaps	%xmm0, 0x10(%rsp)
    00000329: 	movaps	%xmm4, 0x50(%rsp)
    0000032e: 	movq	%r8, %xmm4
    00000333: 	punpcklqdq	%xmm2, %xmm4
    00000337: 	movaps	%xmm4, 0x60(%rsp)
    0000033c: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 828
    00000341: 	movq	0x8(%rsp), %rax
    00000346: 	movq	%r11, %rcx
    00000349: 	movq	%r10, %rdx
    0000034c: 	movdqa	0x10(%rsp), %xmm0
    00000352: 	movdqa	0x20(%rsp), %xmm1
    00000358: 	movq	%r12, %rsi
    0000035b: 	movq	%r15, %rdi
    0000035e: 	movq	%rax, 0xd0(%rsp)
    00000366: 	movq	(%rsp), %rax
    0000036a: 	movq	%rbx, 0x90(%rsp)
    00000372: 	movq	%r8, 0xa0(%rsp)
    0000037a: 	movq	%rax, 0xd8(%rsp)
    00000382: 	movq	%r14, 0xe0(%rsp)
    0000038a: 	movq	%r13, 0xe8(%rsp)
    00000392: 	movq	%xmm3, 0x98(%rsp)
    0000039b: 	movq	%xmm2, 0xa8(%rsp)
    000003a4: 	movaps	%xmm0, 0xb0(%rsp)
    000003ac: 	movaps	%xmm1, 0xc0(%rsp)
    000003b4: 	callq	"_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEdET0_T_S9_S8_RSaIT1_E.isra.0/1" # Offset: 948
    000003b9: 	movdqa	0x50(%rsp), %xmm7
    000003bf: 	movups	%xmm7, 0x30(%rbp)
    000003c3: 	movdqa	0x60(%rsp), %xmm7
    000003c9: 	movups	%xmm7, 0x40(%rbp)
    000003cd: 	jmp	.Ltmp414 # Offset: 973
    000003d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp420:
    000003d8: 	leaq	(%rdi,%rax,8), %rax
    000003dc: 	movq	%rax, 0x8(%rsp)
    000003e1: 	movq	%rax, %xmm0
    000003e6: 	jmp	.Ltmp423 # Offset: 998
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp419:
    000003f0: 	movq	%rdx, %rax
    000003f3: 	notq	%rax
    000003f6: 	shrq	$0x6, %rax
    000003fa: 	notq	%rax
    000003fd: 	jmp	.Ltmp424 # Offset: 1021
    00000402: 	nopw	(%rax,%rax) # Size: 6
.Ltmp421:
    00000408: 	movq	%rbx, %xmm2
    0000040d: 	subq	0x18(%rbp), %rbx
    00000411: 	sarq	$0x3, %rbx
    00000415: 	movhps	0x18(%rbp), %xmm2
    00000419: 	cmpq	%rbx, %r9
    0000041c: 	ja	.Ltmp425 # Offset: 1052
.Ltmp426:
    00000422: 	movdqu	0x20(%rbp), %xmm3
    00000427: 	movq	%r9, %rsi
    0000042a: 	leaq	0x50(%rsp), %rdi
    0000042f: 	movaps	%xmm1, 0x20(%rsp)
    00000434: 	negq	%rsi
    00000437: 	movaps	%xmm0, 0x10(%rsp)
    0000043c: 	movaps	%xmm2, 0x50(%rsp)
    00000441: 	movaps	%xmm3, 0x60(%rsp)
    00000446: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 1094
    0000044b: 	movq	0x8(%rsp), %rax
    00000450: 	movq	%r11, %rcx
    00000453: 	movdqa	0x50(%rsp), %xmm7
    00000459: 	movdqa	0x60(%rsp), %xmm3
    0000045f: 	movq	%r10, %rdx
    00000462: 	movq	%r12, %rsi
    00000465: 	movq	%r15, %rdi
    00000468: 	movq	%rax, 0xd0(%rsp)
    00000470: 	movdqa	0x10(%rsp), %xmm0
    00000476: 	movdqa	0x20(%rsp), %xmm1
    0000047c: 	movq	(%rsp), %rax
    00000480: 	movaps	%xmm7, 0x90(%rsp)
    00000488: 	movaps	%xmm3, 0xa0(%rsp)
    00000490: 	movq	%rax, 0xd8(%rsp)
    00000498: 	movq	%r14, 0xe0(%rsp)
    000004a0: 	movq	%r13, 0xe8(%rsp)
    000004a8: 	movaps	%xmm0, 0xb0(%rsp)
    000004b0: 	movaps	%xmm1, 0xc0(%rsp)
    000004b8: 	callq	"_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEdET0_T_S9_S8_RSaIT1_E.isra.0/1" # Offset: 1208
    000004bd: 	movdqa	0x50(%rsp), %xmm7
    000004c3: 	movdqa	0x60(%rsp), %xmm3
    000004c9: 	movups	%xmm7, 0x10(%rbp)
    000004cd: 	movups	%xmm3, 0x20(%rbp)
    000004d1: 	jmp	.Ltmp414 # Offset: 1233
.Ltmp425:
    000004d6: 	movq	%r9, %rsi
    000004d9: 	movq	%rbp, %rdi
    000004dc: 	movq	%r11, 0x48(%rsp)
    000004e1: 	subq	%rbx, %rsi
    000004e4: 	movq	%r10, 0x40(%rsp)
    000004e9: 	movq	%r9, 0x10(%rsp)
    000004ee: 	movaps	%xmm1, 0x30(%rsp)
    000004f3: 	movaps	%xmm0, 0x20(%rsp)
    000004f8: 	callq	_ZNSt5dequeIdSaIdEE24_M_new_elements_at_frontEm # Offset: 1272
    000004fd: 	movdqu	0x10(%rbp), %xmm2
    00000502: 	movq	0x48(%rsp), %r11
    00000507: 	movq	0x40(%rsp), %r10
    0000050c: 	movdqa	0x30(%rsp), %xmm1
    00000512: 	movdqa	0x20(%rsp), %xmm0
    00000518: 	movq	0x10(%rsp), %r9
    0000051d: 	jmp	.Ltmp426 # Offset: 1309
.Ltmp422:
    00000522: 	movq	%r9, %rsi
    00000525: 	movq	%rbp, %rdi
    00000528: 	movq	%r11, 0x48(%rsp)
    0000052d: 	subq	%rcx, %rsi
    00000530: 	movq	%r10, 0x40(%rsp)
    00000535: 	movq	%r9, 0x10(%rsp)
    0000053a: 	movaps	%xmm1, 0x30(%rsp)
    0000053f: 	movaps	%xmm0, 0x20(%rsp)
    00000544: 	callq	_ZNSt5dequeIdSaIdEE23_M_new_elements_at_backEm # Offset: 1348
    00000549: 	movq	0x30(%rbp), %rbx
    0000054d: 	movq	0x40(%rbp), %r8
    00000551: 	movq	0x48(%rsp), %r11
    00000556: 	movq	0x40(%rsp), %r10
    0000055b: 	movdqa	0x30(%rsp), %xmm1
    00000561: 	movdqa	0x20(%rsp), %xmm0
    00000567: 	movq	0x10(%rsp), %r9
    0000056c: 	jmp	.Ltmp427 # Offset: 1388
.Ltmp418:
    00000571: 	callq	__stack_chk_fail@PLT # Offset: 1393
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEEaSERKS1_.isra.0/1(*2)"

Binary Function "_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1
                _ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/containers.cpp/1
  Number      : 76
  State       : disassembled
  Address     : 0x74e0
  Size        : 0x18c
  MaxSize     : 0x190
  Offset      : 0x74e0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	movabsq	$-0x5555555555555555, %rdx
    0000000a: 	pushq	%rbp
    0000000b: 	movq	%rsi, %rbp
    0000000e: 	pushq	%rbx
    0000000f: 	movq	%rdi, %rbx
    00000012: 	subq	$0x8, %rsp
    00000016: 	movq	0x40(%rdi), %rsi
    0000001a: 	movq	0x30(%rdi), %rcx
    0000001e: 	movq	%rsi, %rax
    00000021: 	subq	%rcx, %rax
    00000024: 	sarq	$0x3, %rax
    00000028: 	imulq	%rdx, %rax
    0000002c: 	subq	$0x1, %rax
    00000030: 	cmpq	%rax, %rbp
    00000033: 	ja	.Ltmp428 # Offset: 51
.Ltmp435:
    00000039: 	movq	0x38(%rbx), %r9
    0000003d: 	movq	%rcx, %r8
    00000040: 	movq	0x48(%rbx), %rdi
    00000044: 	movabsq	$-0x5555555555555555, %rax
    0000004e: 	subq	%r9, %r8
    00000051: 	sarq	$0x3, %r8
    00000055: 	imulq	%rax, %r8
    00000059: 	addq	%rbp, %r8
    0000005c: 	js	.Ltmp429 # Offset: 92
    00000062: 	cmpq	$0x14, %r8
    00000066: 	jle	.Ltmp430 # Offset: 102
    0000006c: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000076: 	movq	%r8, %rax
    00000079: 	imulq	%rdx
    0000007c: 	leaq	(%rdx,%r8), %rax
    00000080: 	movq	%r8, %rdx
    00000083: 	sarq	$0x4, %rax
    00000087: 	sarq	$0x3f, %rdx
    0000008b: 	subq	%rdx, %rax
.Ltmp436:
    0000008e: 	leaq	(%rdi,%rax,8), %r10
    00000092: 	movq	(%r10), %r9
    00000095: 	leaq	0x1f8(%r9), %rdx
    0000009c: 	movq	%rdx, %xmm0
    000000a1: 	leaq	(%rax,%rax,4), %rdx
    000000a5: 	leaq	(%rax,%rdx,4), %rax
    000000a9: 	subq	%rax, %r8
    000000ac: 	leaq	(%r8,%r8,2), %rax
    000000b0: 	leaq	(%r9,%rax,8), %rdx
.Ltmp434:
    000000b4: 	movq	%rdx, %xmm1
    000000b9: 	movq	%r9, %xmm2
    000000be: 	movq	%r10, %xmm3
    000000c3: 	punpcklqdq	%xmm2, %xmm1
    000000c7: 	punpcklqdq	%xmm3, %xmm0
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp433:
    000000d0: 	movq	%rcx, %rax
.Ltmp432:
    000000d3: 	cmpq	%rax, %rdx
    000000d6: 	je	.Ltmp431 # Offset: 214
    000000d8: 	movq	$0x0, (%rax)
    000000df: 	addq	$0x18, %rax
    000000e3: 	movq	$0x0, -0x10(%rax)
    000000eb: 	movq	$-0x1, -0x8(%rax)
    000000f3: 	cmpq	%rax, %rsi
    000000f6: 	jne	.Ltmp432 # Offset: 246
    000000f8: 	movq	0x8(%rdi), %rcx
    000000fc: 	addq	$0x8, %rdi
    00000100: 	leaq	0x1f8(%rcx), %rsi
    00000107: 	jmp	.Ltmp433 # Offset: 263
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp430:
    00000110: 	leaq	(%rbp,%rbp,2), %rax
    00000115: 	movq	%rdi, %r10
    00000118: 	movq	%rsi, %xmm0
    0000011d: 	leaq	(%rcx,%rax,8), %rdx
    00000121: 	jmp	.Ltmp434 # Offset: 289
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp431:
    00000128: 	movups	%xmm1, 0x30(%rbx)
    0000012c: 	movups	%xmm0, 0x40(%rbx)
    00000130: 	addq	$0x8, %rsp
    00000134: 	popq	%rbx
    00000135: 	popq	%rbp
    00000136: 	retq # Offset: 310
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp428:
    00000140: 	movq	%rbp, %rsi
    00000143: 	subq	%rax, %rsi
    00000146: 	callq	_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE23_M_new_elements_at_backEm # Offset: 326
    0000014b: 	movq	0x30(%rbx), %rcx
    0000014f: 	movq	0x40(%rbx), %rsi
    00000153: 	jmp	.Ltmp435 # Offset: 339
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp429:
    00000160: 	movabsq	$-0x79e79e79e79e79e7, %rdx
    0000016a: 	movq	%r8, %r9
    0000016d: 	notq	%r9
    00000170: 	movq	%r9, %rax
    00000173: 	mulq	%rdx
    00000176: 	subq	%rdx, %r9
    00000179: 	shrq	%r9
    0000017c: 	leaq	(%rdx,%r9), %rax
    00000180: 	shrq	$0x4, %rax
    00000184: 	notq	%rax
    00000187: 	jmp	.Ltmp436 # Offset: 391
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1(*2)"

Binary Function "_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1
                _ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/containers.cpp/1
  Number      : 77
  State       : disassembled
  Address     : 0x7670
  Size        : 0x122
  MaxSize     : 0x130
  Offset      : 0x7670
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	pushq	%rbp
    00000001: 	movq	%rsi, %rbp
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x8, %rsp
    0000000c: 	movq	0x40(%rdi), %rcx
    00000010: 	movq	0x30(%rdi), %rax
    00000014: 	movq	%rcx, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	sarq	$0x5, %rdx
    0000001e: 	subq	$0x1, %rdx
    00000022: 	cmpq	%rdx, %rsi
    00000025: 	ja	.Ltmp437 # Offset: 37
.Ltmp444:
    0000002b: 	movq	0x38(%rbx), %rsi
    0000002f: 	movq	%rax, %rdx
    00000032: 	movq	0x48(%rbx), %rdi
    00000036: 	subq	%rsi, %rdx
    00000039: 	sarq	$0x5, %rdx
    0000003d: 	addq	%rbp, %rdx
    00000040: 	js	.Ltmp438 # Offset: 64
    00000046: 	cmpq	$0xf, %rdx
    0000004a: 	jle	.Ltmp439 # Offset: 74
    00000050: 	movq	%rdx, %r8
    00000053: 	sarq	$0x4, %r8
.Ltmp445:
    00000057: 	leaq	(%rdi,%r8,8), %r9
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	movq	(%r9), %rsi
    00000062: 	subq	%r8, %rdx
    00000065: 	shlq	$0x5, %rdx
    00000069: 	leaq	0x200(%rsi), %r10
    00000070: 	addq	%rsi, %rdx
    00000073: 	movq	%r10, %xmm1
.Ltmp443:
    00000078: 	movq	%rdx, %xmm2
    0000007d: 	movq	%rsi, %xmm3
    00000082: 	movq	%r9, %xmm4
    00000087: 	punpcklqdq	%xmm3, %xmm2
    0000008b: 	punpcklqdq	%xmm4, %xmm1
    0000008f: 	pxor	%xmm0, %xmm0
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp441:
    00000098: 	cmpq	%rax, %rdx
    0000009b: 	je	.Ltmp440 # Offset: 155
.Ltmp442:
    0000009d: 	movq	$0x0, (%rax)
    000000a4: 	addq	$0x20, %rax
    000000a8: 	movups	%xmm0, -0x18(%rax)
    000000ac: 	movq	$-0x1, -0x8(%rax)
    000000b4: 	cmpq	%rax, %rcx
    000000b7: 	jne	.Ltmp441 # Offset: 183
    000000b9: 	movq	0x8(%rdi), %rax
    000000bd: 	addq	$0x8, %rdi
    000000c1: 	leaq	0x200(%rax), %rcx
    000000c8: 	cmpq	%rax, %rdx
    000000cb: 	jne	.Ltmp442 # Offset: 203
.Ltmp440:
    000000cd: 	movups	%xmm2, 0x30(%rbx)
    000000d1: 	movups	%xmm1, 0x40(%rbx)
    000000d5: 	addq	$0x8, %rsp
    000000d9: 	popq	%rbx
    000000da: 	popq	%rbp
    000000db: 	retq # Offset: 219
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp439:
    000000e0: 	shlq	$0x5, %rbp
    000000e4: 	movq	%rdi, %r9
    000000e7: 	movq	%rcx, %xmm1
    000000ec: 	leaq	(%rax,%rbp), %rdx
    000000f0: 	jmp	.Ltmp443 # Offset: 240
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp437:
    000000f8: 	subq	%rdx, %rsi
    000000fb: 	callq	_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE23_M_new_elements_at_backEm # Offset: 251
    00000100: 	movq	0x30(%rbx), %rax
    00000104: 	movq	0x40(%rbx), %rcx
    00000108: 	jmp	.Ltmp444 # Offset: 264
    0000010d: 	nopl	(%rax) # Size: 3
.Ltmp438:
    00000110: 	movq	%rdx, %r8
    00000113: 	notq	%r8
    00000116: 	shrq	$0x4, %r8
    0000011a: 	notq	%r8
    0000011d: 	jmp	.Ltmp445 # Offset: 285
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1(*2)"

Binary Function "_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1
                _ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/containers.cpp/1
  Number      : 78
  State       : disassembled
  Address     : 0x77a0
  Size        : 0x122
  MaxSize     : 0x130
  Offset      : 0x77a0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	pushq	%rbp
    00000001: 	movq	%rsi, %rbp
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x8, %rsp
    0000000c: 	movq	0x40(%rdi), %rcx
    00000010: 	movq	0x30(%rdi), %rax
    00000014: 	movq	%rcx, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	sarq	$0x5, %rdx
    0000001e: 	subq	$0x1, %rdx
    00000022: 	cmpq	%rdx, %rsi
    00000025: 	ja	.Ltmp446 # Offset: 37
.Ltmp453:
    0000002b: 	movq	0x38(%rbx), %rsi
    0000002f: 	movq	%rax, %rdx
    00000032: 	movq	0x48(%rbx), %rdi
    00000036: 	subq	%rsi, %rdx
    00000039: 	sarq	$0x5, %rdx
    0000003d: 	addq	%rbp, %rdx
    00000040: 	js	.Ltmp447 # Offset: 64
    00000046: 	cmpq	$0xf, %rdx
    0000004a: 	jle	.Ltmp448 # Offset: 74
    00000050: 	movq	%rdx, %r8
    00000053: 	sarq	$0x4, %r8
.Ltmp454:
    00000057: 	leaq	(%rdi,%r8,8), %r9
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	movq	(%r9), %rsi
    00000062: 	subq	%r8, %rdx
    00000065: 	shlq	$0x5, %rdx
    00000069: 	leaq	0x200(%rsi), %r10
    00000070: 	addq	%rsi, %rdx
    00000073: 	movq	%r10, %xmm1
.Ltmp452:
    00000078: 	movq	%rdx, %xmm2
    0000007d: 	movq	%rsi, %xmm3
    00000082: 	movq	%r9, %xmm4
    00000087: 	punpcklqdq	%xmm3, %xmm2
    0000008b: 	punpcklqdq	%xmm4, %xmm1
    0000008f: 	pxor	%xmm0, %xmm0
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp450:
    00000098: 	cmpq	%rax, %rdx
    0000009b: 	je	.Ltmp449 # Offset: 155
.Ltmp451:
    0000009d: 	movq	$0x0, 0x10(%rax)
    000000a5: 	addq	$0x20, %rax
    000000a9: 	movups	%xmm0, -0x20(%rax)
    000000ad: 	movq	$-0x1, -0x8(%rax)
    000000b5: 	cmpq	%rax, %rcx
    000000b8: 	jne	.Ltmp450 # Offset: 184
    000000ba: 	movq	0x8(%rdi), %rax
    000000be: 	addq	$0x8, %rdi
    000000c2: 	leaq	0x200(%rax), %rcx
    000000c9: 	cmpq	%rax, %rdx
    000000cc: 	jne	.Ltmp451 # Offset: 204
.Ltmp449:
    000000ce: 	movups	%xmm2, 0x30(%rbx)
    000000d2: 	movups	%xmm1, 0x40(%rbx)
    000000d6: 	addq	$0x8, %rsp
    000000da: 	popq	%rbx
    000000db: 	popq	%rbp
    000000dc: 	retq # Offset: 220
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp448:
    000000e0: 	shlq	$0x5, %rbp
    000000e4: 	movq	%rdi, %r9
    000000e7: 	movq	%rcx, %xmm1
    000000ec: 	leaq	(%rax,%rbp), %rdx
    000000f0: 	jmp	.Ltmp452 # Offset: 240
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp446:
    000000f8: 	subq	%rdx, %rsi
    000000fb: 	callq	_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE23_M_new_elements_at_backEm # Offset: 251
    00000100: 	movq	0x30(%rbx), %rax
    00000104: 	movq	0x40(%rbx), %rcx
    00000108: 	jmp	.Ltmp453 # Offset: 264
    0000010d: 	nopl	(%rax) # Size: 3
.Ltmp447:
    00000110: 	movq	%rdx, %r8
    00000113: 	notq	%r8
    00000116: 	shrq	$0x4, %r8
    0000011a: 	notq	%r8
    0000011d: 	jmp	.Ltmp454 # Offset: 285
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 79
  State       : disassembled
  Address     : 0x78d0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x78d0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp455 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp458:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp457:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp456 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp457 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp458 # Offset: 142
.Ltmp455:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp459 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp460 # Offset: 164
.Ltmp463:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp461 # Offset: 177
.Ltmp462:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp460 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp462 # Offset: 214
.Ltmp461:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp463 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp464 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp466:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp465 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp465:
    0000010a: 	addq	$0x20, %r13
.Ltmp460:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp466 # Offset: 275
.Ltmp464:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp467 # Offset: 283
.Ltmp473:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp468 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp469:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp469 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp468:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp456:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp457 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp458 # Offset: 389
    0000018b: 	jmp	.Ltmp455 # Offset: 395
.Ltmp459:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp464 # Offset: 405
.Ltmp472:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp470 # Offset: 422
.Ltmp471:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp464 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp471 # Offset: 463
.Ltmp470:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp472 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp473 # Offset: 482
.Ltmp467:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x7ad0
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x7ad0
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp474 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp475 # Offset: 63
.Ltmp474:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp476 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp477 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp481:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp478 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp479 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp477:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp480 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp481 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp476:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp482:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp481 # Offset: 248
.Ltmp475:
    000000fd: 	leaq	DATAat0x52008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp478:
    00000109: 	leaq	DATAat0x522e0(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp479:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp480:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp482 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp483 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp483:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x7c20
  Size        : 0x99
  MaxSize     : 0xa0
  Offset      : 0x7c20
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	movq	%rdx, %rdi
    00000011: 	pushq	%rbp
    00000012: 	movq	%rsi, %rbp
    00000015: 	callq	strlen@PLT # Offset: 21
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movabsq	$0x3fffffffffffffff, %rax
    00000027: 	subq	0x8(%rbp), %rax
    0000002b: 	cmpq	%rax, %rdx
    0000002e: 	ja	.Ltmp484 # Offset: 46
    00000030: 	movq	%r13, %rsi
    00000033: 	movq	%rbp, %rdi
    00000036: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 54
    0000003b: 	leaq	0x10(%r12), %rdx
    00000040: 	movq	%rdx, (%r12)
    00000044: 	movq	(%rax), %rcx
    00000047: 	leaq	0x10(%rax), %rdx
    0000004b: 	cmpq	%rdx, %rcx
    0000004e: 	je	.Ltmp485 # Offset: 78
    00000050: 	movq	%rcx, (%r12)
    00000054: 	movq	0x10(%rax), %rcx
    00000058: 	movq	%rcx, 0x10(%r12)
.Ltmp486:
    0000005d: 	movq	0x8(%rax), %rcx
    00000061: 	movq	%rdx, (%rax)
    00000064: 	movq	$0x0, 0x8(%rax)
    0000006c: 	movq	%rcx, 0x8(%r12)
    00000071: 	movb	$0x0, 0x10(%rax)
    00000075: 	movq	%r12, %rax
    00000078: 	popq	%rbp
    00000079: 	popq	%r12
    0000007b: 	popq	%r13
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp485:
    00000080: 	movdqu	0x10(%rax), %xmm0
    00000085: 	movups	%xmm0, 0x10(%r12)
    0000008b: 	jmp	.Ltmp486 # Offset: 139
.Ltmp484:
    0000008d: 	leaq	DATAat0x522e0(%rip), %rdi
    00000094: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 148
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_"

Binary Function "_ZN9benchmark14random_shuffleIPdEEvT_S2_" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x7cc0
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0x7cc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark14random_shuffleIPdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	movabsq	$0x5851f42d4c957f2d, %r10
    0000000e: 	movq	%rdi, %r8
    00000011: 	movq	%rsi, %rdi
    00000014: 	movabsq	$0x14057b7ef767814f, %r9
    0000001e: 	subq	%r8, %rsi
    00000021: 	leaq	0x8(%r8), %rcx
    00000025: 	sarq	$0x3, %rsi
    00000029: 	cmpq	%rcx, %rdi
    0000002c: 	je	.Ltmp487 # Offset: 44
    0000002e: 	nop # Size: 2
.Ltmp488:
    00000030: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000037: 	movsd	(%rcx), %xmm0
    0000003b: 	addq	$0x8, %rcx
    0000003f: 	imulq	%r10, %rax
    00000043: 	addq	%r9, %rax
    00000046: 	movq	%rax, %rdx
    00000049: 	movq	%rax, %r11
    0000004c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000053: 	shrq	$0x14, %rdx
    00000057: 	shlq	$0x17, %r11
    0000005b: 	xorq	%r11, %rdx
    0000005e: 	xorq	%rdx, %rax
    00000061: 	xorl	%edx, %edx
    00000063: 	divq	%rsi
    00000066: 	leaq	(%r8,%rdx,8), %rax
    0000006a: 	movsd	(%rax), %xmm1
    0000006e: 	movsd	%xmm1, -0x8(%rcx)
    00000073: 	movsd	%xmm0, (%rax)
    00000077: 	cmpq	%rcx, %rdi
    0000007a: 	jne	.Ltmp488 # Offset: 122
.Ltmp487:
    0000007c: 	retq # Offset: 124
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark14random_shuffleIPdEEvT_S2_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x7d40
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0x7d40
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0x30(%rdi), %rcx
    00000019: 	movq	0x48(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	(%rsi), %rbp
    00000024: 	movq	%rdi, 0x20(%rsp)
    00000029: 	movq	%rcx, 0x10(%rsp)
    0000002e: 	movq	0x10(%rsi), %rcx
    00000032: 	movq	%rax, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	0x18(%rsi), %rcx
    0000003f: 	leaq	0x8(%rcx), %r12
    00000043: 	movq	%rcx, 0x28(%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp489 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp492:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp491:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp490 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp491 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp492 # Offset: 142
.Ltmp489:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x28(%rsp)
    00000099: 	je	.Ltmp493 # Offset: 153
    0000009f: 	cmpq	0x18(%rsp), %rbp
    000000a4: 	je	.Ltmp494 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp496:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp495 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x18(%rsp)
    000000d7: 	jne	.Ltmp496 # Offset: 215
.Ltmp494:
    000000d9: 	cmpq	%r13, 0x10(%rsp)
    000000de: 	je	.Ltmp497 # Offset: 222
.Ltmp499:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp498 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x10(%rsp)
    00000107: 	jne	.Ltmp499 # Offset: 263
.Ltmp497:
    00000109: 	movq	0x20(%rsp), %rax
    0000010e: 	movq	0x48(%rax), %rax
    00000112: 	movq	%rax, (%rsp)
    00000116: 	leaq	0x8(%rax), %rbp
    0000011a: 	movq	0x18(%r15), %rax
    0000011e: 	leaq	0x8(%rax), %rbx
    00000122: 	cmpq	%rbx, %rbp
    00000125: 	jbe	.Ltmp500 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp501:
    00000130: 	movq	(%rbx), %rdi
    00000133: 	movl	$0x200, %esi
    00000138: 	addq	$0x8, %rbx
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
    00000141: 	cmpq	%rbx, %rbp
    00000144: 	ja	.Ltmp501 # Offset: 324
.Ltmp500:
    00000146: 	movdqu	(%r15), %xmm0
    0000014b: 	movq	0x20(%rsp), %rax
    00000150: 	movups	%xmm0, 0x30(%rax)
    00000154: 	movdqu	0x10(%r15), %xmm1
    0000015a: 	movaps	%xmm1, (%rsp)
    0000015e: 	movups	%xmm1, 0x40(%rax)
    00000162: 	addq	$0x38, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	popq	%r13
    0000016c: 	popq	%r14
    0000016e: 	popq	%r15
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp490:
    00000178: 	addq	$0x20, %r14
    0000017c: 	cmpq	%r14, %rbx
    0000017f: 	jne	.Ltmp491 # Offset: 383
    00000185: 	addq	$0x8, %r12
    00000189: 	cmpq	%r12, (%rsp)
    0000018d: 	ja	.Ltmp492 # Offset: 397
    00000193: 	jmp	.Ltmp489 # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp498:
    000001a0: 	addq	$0x20, %r13
    000001a4: 	cmpq	%r13, 0x10(%rsp)
    000001a9: 	jne	.Ltmp499 # Offset: 425
    000001af: 	jmp	.Ltmp497 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp495:
    000001b8: 	addq	$0x20, %rbp
    000001bc: 	cmpq	%rbp, 0x18(%rsp)
    000001c1: 	jne	.Ltmp496 # Offset: 449
    000001c7: 	jmp	.Ltmp494 # Offset: 455
.Ltmp493:
    000001cc: 	cmpq	0x10(%rsp), %rbp
    000001d1: 	je	.Ltmp497 # Offset: 465
.Ltmp504:
    000001d7: 	movq	(%rbp), %rdi
    000001db: 	leaq	0x10(%rbp), %rax
    000001df: 	cmpq	%rax, %rdi
    000001e2: 	je	.Ltmp502 # Offset: 482
.Ltmp503:
    000001e4: 	movq	0x10(%rbp), %rax
    000001e8: 	addq	$0x20, %rbp
    000001ec: 	leaq	0x1(%rax), %rsi
    000001f0: 	callq	_ZdlPvm@PLT # Offset: 496
    000001f5: 	cmpq	%rbp, 0x10(%rsp)
    000001fa: 	je	.Ltmp497 # Offset: 506
    00000200: 	movq	(%rbp), %rdi
    00000204: 	leaq	0x10(%rbp), %rax
    00000208: 	cmpq	%rax, %rdi
    0000020b: 	jne	.Ltmp503 # Offset: 523
.Ltmp502:
    0000020d: 	addq	$0x20, %rbp
    00000211: 	cmpq	%rbp, 0x10(%rsp)
    00000216: 	jne	.Ltmp504 # Offset: 534
    00000218: 	jmp	.Ltmp497 # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E"

Binary Function "_ZNSt11_Deque_baseIdSaIdEED2Ev(*2)" after disassembly {
  All names   : _ZNSt11_Deque_baseIdSaIdEED2Ev
                _ZNSt11_Deque_baseIdSaIdEED1Ev
  Number      : 84
  State       : disassembled
  Address     : 0x7f60
  Size        : 0x65
  MaxSize     : 0x70
  Offset      : 0x7f60
  Section     : .text
  Orc Section : .local.text._ZNSt11_Deque_baseIdSaIdEED2Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	(%rdi), %rdi
    0000000e: 	testq	%rdi, %rdi
    00000011: 	je	.Ltmp505 # Offset: 17
    00000013: 	movq	0x48(%r12), %rax
    00000018: 	movq	0x28(%r12), %rbx
    0000001d: 	leaq	0x8(%rax), %rbp
    00000021: 	cmpq	%rbx, %rbp
    00000024: 	jbe	.Ltmp506 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp507:
    00000030: 	movq	(%rbx), %rdi
    00000033: 	movl	$0x200, %esi
    00000038: 	addq	$0x8, %rbx
    0000003c: 	callq	_ZdlPvm@PLT # Offset: 60
    00000041: 	cmpq	%rbx, %rbp
    00000044: 	ja	.Ltmp507 # Offset: 68
    00000046: 	movq	(%r12), %rdi
.Ltmp506:
    0000004a: 	movq	0x8(%r12), %rsi
    0000004f: 	popq	%rbx
    00000050: 	popq	%rbp
    00000051: 	popq	%r12
    00000053: 	shlq	$0x3, %rsi
    00000057: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 87
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp505:
    00000060: 	popq	%rbx
    00000061: 	popq	%rbp
    00000062: 	popq	%r12
    00000064: 	retq # Offset: 100
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt11_Deque_baseIdSaIdEED2Ev(*2)"

Binary Function "_ZNSt12forward_listIdSaIdEE6resizeEm" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x7fd0
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0x7fd0
  Section     : .text
  Orc Section : .local.text._ZNSt12forward_listIdSaIdEE6resizeEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	xorl	%eax, %eax
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x8, %rsp
    00000013: 	movq	(%rdi), %rbx
    00000016: 	testq	%rbx, %rbx
    00000019: 	je	.Ltmp508 # Offset: 25
    0000001b: 	testq	%rsi, %rsi
    0000001e: 	jne	.Ltmp509 # Offset: 30
    00000020: 	jmp	.Ltmp508 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp510:
    00000028: 	testq	%rbx, %rbx
    0000002b: 	je	.Ltmp508 # Offset: 43
.Ltmp509:
    0000002d: 	addq	$0x1, %rax
    00000031: 	movq	%rbx, %r12
    00000034: 	movq	(%rbx), %rbx
    00000037: 	cmpq	%rax, %rsi
    0000003a: 	ja	.Ltmp510 # Offset: 58
.Ltmp508:
    0000003c: 	cmpq	%rax, %rsi
    0000003f: 	je	.Ltmp511 # Offset: 63
    00000041: 	jmp	.Ltmp512 # Offset: 65
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp513:
    00000048: 	movq	%rbx, %rdi
    0000004b: 	movl	$0x10, %esi
    00000050: 	movq	(%rbx), %rbx
    00000053: 	callq	_ZdlPvm@PLT # Offset: 83
.Ltmp511:
    00000058: 	testq	%rbx, %rbx
    0000005b: 	jne	.Ltmp513 # Offset: 91
    0000005d: 	movq	$0x0, (%r12)
    00000065: 	addq	$0x8, %rsp
    00000069: 	popq	%rbx
    0000006a: 	popq	%rbp
    0000006b: 	popq	%r12
    0000006d: 	popq	%r13
    0000006f: 	retq # Offset: 111
.Ltmp512:
    00000070: 	subq	%rax, %rsi
    00000073: 	movq	%r12, %rbx
    00000076: 	movq	%rsi, %rbp
.Ltmp514:
    00000079: 	movl	$0x10, %edi
    0000007e: 	movq	%rbx, %r13
    00000081: 	callq	_Znwm@PLT # Offset: 129
    00000086: 	movq	$0x0, 0x8(%rax)
    0000008e: 	movq	%rax, %rbx
    00000091: 	movq	(%r13), %rax
    00000095: 	movq	%rax, (%rbx)
    00000098: 	movq	%rbx, (%r13)
    0000009c: 	subq	$0x1, %rbp
    000000a0: 	jne	.Ltmp514 # Offset: 160
    000000a2: 	addq	$0x8, %rsp
    000000a6: 	popq	%rbx
    000000a7: 	popq	%rbp
    000000a8: 	popq	%r12
    000000aa: 	popq	%r13
    000000ac: 	retq # Offset: 172
    000000ad: 	endbr64
    000000b1: 	movq	%rax, %rdi
    000000b4: 	callq	__cxa_begin_catch@PLT # Offset: 180
    000000b9: 	movq	(%rbx), %rbx
    000000bc: 	movq	(%r12), %rdi
.Ltmp516:
    000000c0: 	cmpq	%rdi, %rbx
    000000c3: 	je	.Ltmp515 # Offset: 195
    000000c5: 	movq	(%rdi), %rbp
    000000c8: 	movl	$0x10, %esi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	movq	%rbp, %rdi
    000000d5: 	jmp	.Ltmp516 # Offset: 213
.Ltmp515:
    000000d7: 	movq	%rbx, (%r12)
    000000db: 	callq	__cxa_rethrow@PLT # Offset: 219
    000000e0: 	endbr64
    000000e4: 	movq	%rax, %rbp
    000000e7: 	callq	__cxa_end_catch@PLT # Offset: 231
    000000ec: 	movq	%rbp, %rdi
    000000ef: 	callq	_Unwind_Resume@PLT # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt12forward_listIdSaIdEE6resizeEm"

Binary Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEED2Ev(*2)" after disassembly {
  All names   : _ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEED2Ev
                _ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEED1Ev
  Number      : 86
  State       : disassembled
  Address     : 0x80d0
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x80d0
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEED2Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x8, %rsp
    0000000d: 	movq	0x10(%rdi), %rbx
    00000011: 	testq	%rbx, %rbx
    00000014: 	je	.Ltmp517 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp518:
    00000020: 	movq	%rbx, %rdi
    00000023: 	movq	(%rbx), %rbx
    00000026: 	movl	$0x10, %esi
    0000002b: 	callq	_ZdlPvm@PLT # Offset: 43
    00000030: 	testq	%rbx, %rbx
    00000033: 	jne	.Ltmp518 # Offset: 51
.Ltmp517:
    00000035: 	movq	0x8(%rbp), %rax
    00000039: 	movq	(%rbp), %rdi
    0000003d: 	xorl	%esi, %esi
    0000003f: 	addq	$0x30, %rbp
    00000043: 	leaq	(,%rax,8), %rdx
    0000004b: 	callq	memset@PLT # Offset: 75
    00000050: 	movq	-0x30(%rbp), %rdi
    00000054: 	movq	-0x28(%rbp), %rsi
    00000058: 	movq	$0x0, -0x18(%rbp)
    00000060: 	movq	$0x0, -0x20(%rbp)
    00000068: 	cmpq	%rbp, %rdi
    0000006b: 	je	.Ltmp519 # Offset: 107
    0000006d: 	addq	$0x8, %rsp
    00000071: 	shlq	$0x3, %rsi
    00000075: 	popq	%rbx
    00000076: 	popq	%rbp
    00000077: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 119
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp519:
    00000080: 	addq	$0x8, %rsp
    00000084: 	popq	%rbx
    00000085: 	popq	%rbp
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEED2Ev(*2)"

Binary Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEED2Ev(*2)" after disassembly {
  All names   : _ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEED2Ev
                _ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEED1Ev
  Number      : 87
  State       : disassembled
  Address     : 0x8160
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x8160
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEED2Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x8, %rsp
    0000000d: 	movq	0x10(%rdi), %rbx
    00000011: 	testq	%rbx, %rbx
    00000014: 	je	.Ltmp520 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp521:
    00000020: 	movq	%rbx, %rdi
    00000023: 	movq	(%rbx), %rbx
    00000026: 	movl	$0x10, %esi
    0000002b: 	callq	_ZdlPvm@PLT # Offset: 43
    00000030: 	testq	%rbx, %rbx
    00000033: 	jne	.Ltmp521 # Offset: 51
.Ltmp520:
    00000035: 	movq	0x8(%rbp), %rax
    00000039: 	movq	(%rbp), %rdi
    0000003d: 	xorl	%esi, %esi
    0000003f: 	addq	$0x30, %rbp
    00000043: 	leaq	(,%rax,8), %rdx
    0000004b: 	callq	memset@PLT # Offset: 75
    00000050: 	movq	-0x30(%rbp), %rdi
    00000054: 	movq	-0x28(%rbp), %rsi
    00000058: 	movq	$0x0, -0x18(%rbp)
    00000060: 	movq	$0x0, -0x20(%rbp)
    00000068: 	cmpq	%rbp, %rdi
    0000006b: 	je	.Ltmp522 # Offset: 107
    0000006d: 	addq	$0x8, %rsp
    00000071: 	shlq	$0x3, %rsi
    00000075: 	popq	%rbx
    00000076: 	popq	%rbp
    00000077: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 119
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp522:
    00000080: 	addq	$0x8, %rsp
    00000084: 	popq	%rbx
    00000085: 	popq	%rbp
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEED2Ev(*2)"

Binary Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev(*2)" after disassembly {
  All names   : _ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev
                _ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED2Ev
  Number      : 88
  State       : disassembled
  Address     : 0x81f0
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x81f0
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x8, %rsp
    0000000d: 	movq	0x10(%rdi), %rbx
    00000011: 	testq	%rbx, %rbx
    00000014: 	je	.Ltmp523 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp524:
    00000020: 	movq	%rbx, %rdi
    00000023: 	movq	(%rbx), %rbx
    00000026: 	movl	$0x18, %esi
    0000002b: 	callq	_ZdlPvm@PLT # Offset: 43
    00000030: 	testq	%rbx, %rbx
    00000033: 	jne	.Ltmp524 # Offset: 51
.Ltmp523:
    00000035: 	movq	0x8(%rbp), %rax
    00000039: 	movq	(%rbp), %rdi
    0000003d: 	xorl	%esi, %esi
    0000003f: 	addq	$0x30, %rbp
    00000043: 	leaq	(,%rax,8), %rdx
    0000004b: 	callq	memset@PLT # Offset: 75
    00000050: 	movq	-0x30(%rbp), %rdi
    00000054: 	movq	-0x28(%rbp), %rsi
    00000058: 	movq	$0x0, -0x18(%rbp)
    00000060: 	movq	$0x0, -0x20(%rbp)
    00000068: 	cmpq	%rbp, %rdi
    0000006b: 	je	.Ltmp525 # Offset: 107
    0000006d: 	addq	$0x8, %rsp
    00000071: 	shlq	$0x3, %rsi
    00000075: 	popq	%rbx
    00000076: 	popq	%rbp
    00000077: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 119
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp525:
    00000080: 	addq	$0x8, %rsp
    00000084: 	popq	%rbx
    00000085: 	popq	%rbp
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev(*2)"

Binary Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEED2Ev(*2)" after disassembly {
  All names   : _ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEED2Ev
                _ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEED1Ev
  Number      : 89
  State       : disassembled
  Address     : 0x8280
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x8280
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEED2Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x8, %rsp
    0000000d: 	movq	0x10(%rdi), %rbx
    00000011: 	testq	%rbx, %rbx
    00000014: 	je	.Ltmp526 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp527:
    00000020: 	movq	%rbx, %rdi
    00000023: 	movq	(%rbx), %rbx
    00000026: 	movl	$0x18, %esi
    0000002b: 	callq	_ZdlPvm@PLT # Offset: 43
    00000030: 	testq	%rbx, %rbx
    00000033: 	jne	.Ltmp527 # Offset: 51
.Ltmp526:
    00000035: 	movq	0x8(%rbp), %rax
    00000039: 	movq	(%rbp), %rdi
    0000003d: 	xorl	%esi, %esi
    0000003f: 	addq	$0x30, %rbp
    00000043: 	leaq	(,%rax,8), %rdx
    0000004b: 	callq	memset@PLT # Offset: 75
    00000050: 	movq	-0x30(%rbp), %rdi
    00000054: 	movq	-0x28(%rbp), %rsi
    00000058: 	movq	$0x0, -0x18(%rbp)
    00000060: 	movq	$0x0, -0x20(%rbp)
    00000068: 	cmpq	%rbp, %rdi
    0000006b: 	je	.Ltmp528 # Offset: 107
    0000006d: 	addq	$0x8, %rsp
    00000071: 	shlq	$0x3, %rsi
    00000075: 	popq	%rbx
    00000076: 	popq	%rbp
    00000077: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 119
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp528:
    00000080: 	addq	$0x8, %rsp
    00000084: 	popq	%rbx
    00000085: 	popq	%rbp
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEED2Ev(*2)"

Binary Function "_ZN7HashMapIddED2Ev(*2)" after disassembly {
  All names   : _ZN7HashMapIddED2Ev
                _ZN7HashMapIddED1Ev
  Number      : 90
  State       : disassembled
  Address     : 0x8310
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0x8310
  Section     : .text
  Orc Section : .local.text._ZN7HashMapIddED2Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	0x18(%rdi), %rdx
    0000000f: 	movq	0x20(%rdi), %rdi
    00000013: 	testq	%rdx, %rdx
    00000016: 	je	.Ltmp529 # Offset: 22
    00000018: 	xorl	%ebp, %ebp
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp532:
    00000020: 	leaq	(%rdi,%rbp,8), %rax
    00000024: 	movq	(%rax), %rbx
    00000027: 	movq	$0x0, (%rax)
    0000002e: 	testq	%rbx, %rbx
    00000031: 	je	.Ltmp530 # Offset: 49
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp531:
    00000038: 	movq	%rbx, %rdi
    0000003b: 	movq	0x10(%rbx), %rbx
    0000003f: 	movl	$0x18, %esi
    00000044: 	callq	_ZdlPvm@PLT # Offset: 68
    00000049: 	testq	%rbx, %rbx
    0000004c: 	jne	.Ltmp531 # Offset: 76
    0000004e: 	movq	0x18(%r12), %rdx
    00000053: 	movq	0x20(%r12), %rdi
.Ltmp530:
    00000058: 	addq	$0x1, %rbp
    0000005c: 	cmpq	%rdx, %rbp
    0000005f: 	jb	.Ltmp532 # Offset: 95
.Ltmp529:
    00000061: 	movq	$0x0, 0x8(%r12)
    0000006a: 	testq	%rdi, %rdi
    0000006d: 	je	.Ltmp533 # Offset: 109
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	jmp	_ZdaPv@PLT # TAILCALL  # Offset: 115
.Ltmp533:
    00000078: 	popq	%rbx
    00000079: 	popq	%rbp
    0000007a: 	popq	%r12
    0000007c: 	retq # Offset: 124
DWARF CFI Instructions:
    <empty>
End of Function "_ZN7HashMapIddED2Ev(*2)"

Binary Function "_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x8390
  Size        : 0x157
  MaxSize     : 0x160
  Offset      : 0x8390
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	movabsq	$0xfffffffffffffff, %rdx
    00000013: 	pushq	%r14
    00000015: 	pushq	%r13
    00000017: 	pushq	%r12
    00000019: 	pushq	%rbp
    0000001a: 	pushq	%rbx
    0000001b: 	subq	$0x18, %rsp
    0000001f: 	movq	0x8(%rdi), %r12
    00000023: 	movq	(%rdi), %r14
    00000026: 	movq	%r12, %rax
    00000029: 	subq	%r14, %rax
    0000002c: 	sarq	$0x3, %rax
    00000030: 	cmpq	%rdx, %rax
    00000033: 	je	.Ltmp534 # Offset: 51
    00000039: 	testq	%rax, %rax
    0000003c: 	movl	$0x1, %edx
    00000041: 	movq	%rdi, %rbp
    00000044: 	movq	%rsi, %r13
    00000047: 	cmovneq	%rax, %rdx
    0000004b: 	xorl	%ecx, %ecx
    0000004d: 	addq	%rdx, %rax
    00000050: 	movq	%rsi, %rdx
    00000053: 	setb	%cl
    00000056: 	subq	%r14, %rdx
    00000059: 	testq	%rcx, %rcx
    0000005c: 	jne	.Ltmp535 # Offset: 92
    00000062: 	testq	%rax, %rax
    00000065: 	jne	.Ltmp536 # Offset: 101
    0000006b: 	xorl	%ebx, %ebx
    0000006d: 	xorl	%edi, %edi
.Ltmp541:
    0000006f: 	movsd	(%r15), %xmm0
    00000074: 	subq	%r13, %r12
    00000077: 	leaq	0x8(%rdi,%rdx), %r15
    0000007c: 	movq	%rdi, %xmm1
    00000081: 	leaq	(%r15,%r12), %rax
    00000085: 	movq	%rax, %xmm2
    0000008a: 	movsd	%xmm0, (%rdi,%rdx)
    0000008f: 	punpcklqdq	%xmm2, %xmm1
    00000093: 	movaps	%xmm1, (%rsp)
    00000097: 	testq	%rdx, %rdx
    0000009a: 	jg	.Ltmp537 # Offset: 154
    0000009c: 	testq	%r12, %r12
    0000009f: 	jg	.Ltmp538 # Offset: 159
    000000a1: 	testq	%r14, %r14
    000000a4: 	jne	.Ltmp539 # Offset: 164
.Ltmp540:
    000000a6: 	movdqa	(%rsp), %xmm3
    000000ab: 	movq	%rbx, 0x10(%rbp)
    000000af: 	movups	%xmm3, (%rbp)
    000000b3: 	addq	$0x18, %rsp
    000000b7: 	popq	%rbx
    000000b8: 	popq	%rbp
    000000b9: 	popq	%r12
    000000bb: 	popq	%r13
    000000bd: 	popq	%r14
    000000bf: 	popq	%r15
    000000c1: 	retq # Offset: 193
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp537:
    000000c8: 	movq	%r14, %rsi
    000000cb: 	callq	memmove@PLT # Offset: 203
    000000d0: 	testq	%r12, %r12
    000000d3: 	jg	.Ltmp538 # Offset: 211
.Ltmp539:
    000000d5: 	movq	0x10(%rbp), %rsi
    000000d9: 	movq	%r14, %rdi
    000000dc: 	subq	%r14, %rsi
    000000df: 	callq	_ZdlPvm@PLT # Offset: 223
    000000e4: 	jmp	.Ltmp540 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp538:
    000000f0: 	movq	%r12, %rdx
    000000f3: 	movq	%r13, %rsi
    000000f6: 	movq	%r15, %rdi
    000000f9: 	callq	memcpy@PLT # Offset: 249
    000000fe: 	testq	%r14, %r14
    00000101: 	je	.Ltmp540 # Offset: 257
    00000103: 	jmp	.Ltmp539 # Offset: 259
    00000105: 	nopl	(%rax) # Size: 3
.Ltmp535:
    00000108: 	movabsq	$0x7ffffffffffffff8, %rbx
.Ltmp542:
    00000112: 	movq	%rbx, %rdi
    00000115: 	movq	%rdx, (%rsp)
    00000119: 	callq	_Znwm@PLT # Offset: 281
    0000011e: 	movq	(%rsp), %rdx
    00000122: 	movq	%rax, %rdi
    00000125: 	addq	%rax, %rbx
    00000128: 	jmp	.Ltmp541 # Offset: 296
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp536:
    00000130: 	movabsq	$0xfffffffffffffff, %rcx
    0000013a: 	cmpq	%rcx, %rax
    0000013d: 	cmovaq	%rcx, %rax
    00000141: 	leaq	(,%rax,8), %rbx
    00000149: 	jmp	.Ltmp542 # Offset: 329
.Ltmp534:
    0000014b: 	leaq	DATAat0x522f5(%rip), %rdi
    00000152: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 338
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_"

Binary Function "_ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x84f0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x84f0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp543 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp544 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp545 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp546 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp547 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp554:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp548 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp548:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp549 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp550 # Offset: 200
.Ltmp552:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp544:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp551 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp551:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp543:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp549:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp553:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp552 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp550:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp553 # Offset: 392
.Ltmp547:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp555:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp554 # Offset: 445
.Ltmp546:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp555 # Offset: 460
.Ltmp545:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x86d0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x86d0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp556 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp557 # Offset: 152
.Ltmp568:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp558 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp559 # Offset: 204
.Ltmp558:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp560 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp561 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp563:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp562 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp561:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp563 # Offset: 339
    00000155: 	jmp	.Ltmp564 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp557:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp565 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp566 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp567 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp567:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp570:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp568 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp560:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp564:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp563 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp565:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp569 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp570 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp570 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp569:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp570 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp570 # Offset: 696
.Ltmp559:
    000002bd: 	leaq	DATAat0x52008(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp566:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp571 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp571:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp556:
    000002e0: 	leaq	DATAat0x52330(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp562:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z26test_erase_pushback_sortedIdSt6vectorIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x8a00
  Size        : 0x6b5
  MaxSize     : 0x6c0
  Offset      : 0x8a00
  Section     : .text
  Orc Section : .local.text._Z26test_erase_pushback_sortedIdSt6vectorIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rcx, %rbx
    00000011: 	subq	$0x88, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	subq	%rdi, %rsi
    00000020: 	movq	%rdx, 0x38(%rsp)
    00000025: 	xorl	%edx, %edx
    00000027: 	movq	%rdi, 0x48(%rsp)
    0000002c: 	movq	%r8, 0x50(%rsp)
    00000031: 	movq	%fs:0x28, %rax
    0000003a: 	movq	%rax, 0x78(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	movabsq	$0x500000000, %rax
    0000004b: 	divq	%rsi
    0000004e: 	movq	%rax, 0x18(%rsp)
    00000053: 	cmpq	$0x3e8, %rax
    00000059: 	ja	.Ltmp572 # Offset: 89
    0000005f: 	cmpq	$0x3, %rax
    00000063: 	ja	.Ltmp573 # Offset: 99
    00000069: 	movq	$0x0, 0x70(%rsp)
    00000072: 	pxor	%xmm0, %xmm0
    00000076: 	movq	$0x4, 0x18(%rsp)
    0000007f: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp621:
    00000084: 	movq	0x18(%rsp), %r14
    00000089: 	leaq	0x60(%rsp), %rdi
    0000008e: 	movq	%r14, %rsi
    00000091: 	callq	_ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm # Offset: 145
    00000096: 	movq	0x60(%rsp), %rsi
    0000009b: 	movl	iterations(%rip), %eax
    000000a1: 	movq	%rsi, (%rsp)
    000000a5: 	testl	%eax, %eax
    000000a7: 	jle	.Ltmp574 # Offset: 167
    000000ad: 	movl	%r14d, 0x44(%rsp)
    000000b2: 	pxor	%xmm2, %xmm2
    000000b6: 	movl	$0x0, 0x40(%rsp)
    000000be: 	movsd	%xmm2, 0x28(%rsp)
.Ltmp610:
    000000c4: 	movslq	0x40(%rsp), %rdx
    000000c9: 	movslq	%eax, %rcx
    000000cc: 	movl	$0x18, %edi
    000000d1: 	movq	%rdx, %rsi
    000000d4: 	addq	0x18(%rsp), %rdx
    000000d9: 	subl	%esi, %eax
    000000db: 	cmpq	%rcx, %rdx
    000000de: 	cmovbl	0x44(%rsp), %eax
    000000e3: 	movl	%eax, 0x24(%rsp)
    000000e7: 	callq	_Znwm@PLT # Offset: 231
    000000ec: 	pxor	%xmm0, %xmm0
    000000f0: 	movq	$0x0, 0x10(%rax)
    000000f8: 	movq	%rax, %r12
    000000fb: 	movups	%xmm0, (%rax)
    000000fe: 	movq	0x48(%rsp), %rax
    00000103: 	cmpq	%rax, 0x8(%rsp)
    00000108: 	je	.Ltmp575 # Offset: 264
    0000010e: 	movq	%rax, %rdx
    00000111: 	xorl	%r13d, %r13d
    00000114: 	xorl	%eax, %eax
    00000116: 	jmp	.Ltmp576 # Offset: 278
    00000118: 	nopl	(%rax,%rax) # Size: 8
.Ltmp578:
    00000120: 	movsd	-0x8(%rbp), %xmm0
    00000125: 	addq	$0x8, %r13
    00000129: 	movsd	%xmm0, -0x8(%r13)
    0000012f: 	movq	%r13, 0x8(%r12)
    00000134: 	cmpq	%rbp, 0x8(%rsp)
    00000139: 	je	.Ltmp577 # Offset: 313
.Ltmp579:
    0000013b: 	movq	0x10(%r12), %rax
    00000140: 	movq	%rbp, %rdx
.Ltmp576:
    00000143: 	leaq	0x8(%rdx), %rbp
    00000147: 	cmpq	%rax, %r13
    0000014a: 	jne	.Ltmp578 # Offset: 330
    0000014c: 	movq	%r13, %rsi
    0000014f: 	movq	%r12, %rdi
    00000152: 	callq	_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_ # Offset: 338
    00000157: 	movq	0x8(%r12), %r13
    0000015c: 	cmpq	%rbp, 0x8(%rsp)
    00000161: 	jne	.Ltmp579 # Offset: 353
.Ltmp577:
    00000163: 	movq	(%r12), %r15
    00000167: 	cmpq	%r13, %r15
    0000016a: 	je	.Ltmp575 # Offset: 362
    00000170: 	movq	%r13, %r14
    00000173: 	movl	$0x3f, %edx
    00000178: 	movq	%r13, %rsi
    0000017b: 	movq	%r15, %rdi
    0000017e: 	subq	%r15, %r14
    00000181: 	leaq	0x8(%r15), %rbp
    00000185: 	movq	%r14, %rax
    00000188: 	sarq	$0x3, %rax
    0000018c: 	bsrq	%rax, %rax
    00000190: 	xorq	$0x3f, %rax
    00000194: 	subl	%eax, %edx
    00000196: 	movslq	%edx, %rdx
    00000199: 	addq	%rdx, %rdx
    0000019c: 	callq	"_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1" # Offset: 412
    000001a1: 	cmpq	$0x80, %r14
    000001a8: 	jle	.Ltmp580 # Offset: 424
    000001ae: 	leaq	0x80(%r15), %r14
    000001b5: 	jmp	.Ltmp581 # Offset: 437
.Ltmp584:
    000001b7: 	cmpq	%rbp, %r15
    000001ba: 	je	.Ltmp582 # Offset: 442
    000001bc: 	movl	$0x8, %eax
    000001c1: 	movq	%rbp, %rdx
    000001c4: 	movq	%r15, %rsi
    000001c7: 	movsd	%xmm1, 0x10(%rsp)
    000001cd: 	addq	%r15, %rax
    000001d0: 	subq	%r15, %rdx
    000001d3: 	movq	%rax, %rdi
    000001d6: 	callq	memmove@PLT # Offset: 470
    000001db: 	movsd	0x10(%rsp), %xmm1
.Ltmp582:
    000001e1: 	addq	$0x8, %rbp
    000001e5: 	movsd	%xmm1, (%r15)
    000001ea: 	cmpq	%rbp, %r14
    000001ed: 	je	.Ltmp583 # Offset: 493
.Ltmp581:
    000001ef: 	movsd	(%rbp), %xmm1
    000001f4: 	movsd	(%r15), %xmm0
    000001f9: 	comisd	%xmm1, %xmm0
    000001fd: 	ja	.Ltmp584 # Offset: 509
    000001ff: 	movsd	-0x8(%rbp), %xmm0
    00000204: 	leaq	-0x8(%rbp), %rax
    00000208: 	comisd	%xmm1, %xmm0
    0000020c: 	jbe	.Ltmp585 # Offset: 524
.Ltmp586:
    00000212: 	movsd	%xmm0, 0x8(%rax)
    00000217: 	movq	%rax, %rdx
    0000021a: 	movsd	-0x8(%rax), %xmm0
    0000021f: 	subq	$0x8, %rax
    00000223: 	comisd	%xmm1, %xmm0
    00000227: 	ja	.Ltmp586 # Offset: 551
    00000229: 	movsd	%xmm1, (%rdx)
.Ltmp622:
    0000022d: 	addq	$0x8, %rbp
    00000231: 	cmpq	%rbp, %r14
    00000234: 	jne	.Ltmp581 # Offset: 564
.Ltmp583:
    00000236: 	cmpq	%r13, %r14
    00000239: 	je	.Ltmp575 # Offset: 569
.Ltmp589:
    0000023b: 	movsd	(%r14), %xmm1
    00000240: 	movsd	-0x8(%r14), %xmm0
    00000246: 	leaq	-0x8(%r14), %rax
    0000024a: 	comisd	%xmm1, %xmm0
    0000024e: 	jbe	.Ltmp587 # Offset: 590
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp588:
    00000258: 	movsd	%xmm0, 0x8(%rax)
    0000025d: 	movq	%rax, %rdx
    00000260: 	movsd	-0x8(%rax), %xmm0
    00000265: 	subq	$0x8, %rax
    00000269: 	comisd	%xmm1, %xmm0
    0000026d: 	ja	.Ltmp588 # Offset: 621
    0000026f: 	addq	$0x8, %r14
    00000273: 	movsd	%xmm1, (%rdx)
    00000277: 	cmpq	%r13, %r14
    0000027a: 	jne	.Ltmp589 # Offset: 634
.Ltmp575:
    0000027c: 	movq	(%rsp), %rax
    00000280: 	cmpl	$0x1, 0x24(%rsp)
    00000285: 	movq	%r12, (%rax)
    00000288: 	je	.Ltmp590 # Offset: 648
    0000028e: 	movq	%rax, %rsi
    00000291: 	leaq	0x8(%rax), %rax
    00000295: 	movq	%rax, 0x30(%rsp)
    0000029a: 	movq	%rax, %r12
    0000029d: 	movl	0x24(%rsp), %eax
    000002a1: 	subl	$0x2, %eax
    000002a4: 	leaq	0x10(%rsi,%rax,8), %rax
    000002a9: 	movq	%rax, 0x10(%rsp)
    000002ae: 	jmp	.Ltmp591 # Offset: 686
.Ltmp594:
    000002b0: 	movq	%rax, 0x8(%rbp)
.Ltmp593:
    000002b4: 	movq	%rbp, (%r12)
    000002b8: 	addq	$0x8, %r12
    000002bc: 	cmpq	%r12, 0x10(%rsp)
    000002c1: 	je	.Ltmp592 # Offset: 705
.Ltmp591:
    000002c7: 	movl	$0x18, %edi
    000002cc: 	callq	_Znwm@PLT # Offset: 716
    000002d1: 	pxor	%xmm0, %xmm0
    000002d5: 	movq	$0x0, 0x10(%rax)
    000002dd: 	movq	%rax, %rbp
    000002e0: 	movups	%xmm0, (%rax)
    000002e3: 	movq	(%rsp), %rax
    000002e7: 	movq	(%rax), %rax
    000002ea: 	cmpq	%rbp, %rax
    000002ed: 	je	.Ltmp593 # Offset: 749
    000002ef: 	movq	0x8(%rax), %r14
    000002f3: 	movq	(%rax), %r13
    000002f6: 	xorl	%eax, %eax
    000002f8: 	movq	%r14, %r15
    000002fb: 	subq	%r13, %r15
    000002fe: 	je	.Ltmp594 # Offset: 766
    00000300: 	movabsq	$0x7ffffffffffffff8, %rax
    0000030a: 	cmpq	%rax, %r15
    0000030d: 	ja	.Ltmp595 # Offset: 781
    00000313: 	movq	%r15, %rdi
    00000316: 	callq	_Znwm@PLT # Offset: 790
    0000031b: 	movq	%rax, %rcx
    0000031e: 	cmpq	%r13, %r14
    00000321: 	je	.Ltmp596 # Offset: 801
    00000323: 	movq	%r15, %rdx
    00000326: 	movq	%r13, %rsi
    00000329: 	movq	%rax, %rdi
    0000032c: 	callq	memcpy@PLT # Offset: 812
    00000331: 	movq	%rax, %rcx
.Ltmp596:
    00000334: 	movq	(%rbp), %rdi
    00000338: 	testq	%rdi, %rdi
    0000033b: 	je	.Ltmp597 # Offset: 827
    0000033d: 	movq	0x10(%rbp), %rsi
    00000341: 	movq	%rcx, 0x58(%rsp)
    00000346: 	subq	%rdi, %rsi
    00000349: 	callq	_ZdlPvm@PLT # Offset: 841
    0000034e: 	movq	0x58(%rsp), %rcx
.Ltmp597:
    00000353: 	leaq	(%rcx,%r15), %rax
    00000357: 	movq	%rcx, (%rbp)
    0000035b: 	movq	%rax, 0x10(%rbp)
    0000035f: 	jmp	.Ltmp594 # Offset: 863
.Ltmp590:
    00000364: 	addq	$0x8, %rax
    00000368: 	movq	%rax, 0x30(%rsp)
.Ltmp592:
    0000036d: 	callq	clock@PLT # Offset: 877
    00000372: 	movq	%rax, start_time(%rip)
    00000379: 	cmpq	%rbx, 0x38(%rsp)
    0000037e: 	je	.Ltmp598 # Offset: 894
    00000384: 	movl	0x24(%rsp), %r13d
    00000389: 	movq	0x30(%rsp), %rsi
    0000038e: 	movq	(%rsp), %rbp
    00000392: 	movq	0x38(%rsp), %r14
    00000397: 	leal	-0x1(%r13), %eax
    0000039b: 	movl	%eax, 0x10(%rsp)
    0000039f: 	leaq	(%rsi,%rax,8), %r12
    000003a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp606:
    000003a8: 	movq	(%rbp), %r13
    000003ac: 	movq	%r14, %r15
    000003af: 	movq	0x8(%r13), %r8
    000003b3: 	movq	(%r13), %r9
    000003b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp604:
    000003c0: 	movq	%r8, %rax
    000003c3: 	addq	$0x8, %r15
    000003c7: 	movq	%r9, %rdi
    000003ca: 	subq	%r9, %rax
    000003cd: 	sarq	$0x3, %rax
    000003d1: 	nopl	(%rax) # Size: 7
.Ltmp605:
    000003d8: 	testq	%rax, %rax
    000003db: 	jle	.Ltmp599 # Offset: 987
.Ltmp601:
    000003dd: 	movq	%rax, %rdx
    000003e0: 	movsd	-0x8(%r15), %xmm0
    000003e6: 	sarq	%rdx
    000003e9: 	leaq	(%rdi,%rdx,8), %rcx
    000003ed: 	comisd	(%rcx), %xmm0
    000003f1: 	jbe	.Ltmp600 # Offset: 1009
    000003f3: 	subq	%rdx, %rax
    000003f6: 	leaq	0x8(%rcx), %rdi
    000003fa: 	subq	$0x1, %rax
    000003fe: 	testq	%rax, %rax
    00000401: 	jg	.Ltmp601 # Offset: 1025
.Ltmp599:
    00000403: 	leaq	0x8(%rdi), %rsi
    00000407: 	cmpq	%rsi, %r8
    0000040a: 	je	.Ltmp602 # Offset: 1034
    0000040c: 	movq	%r8, %rdx
    0000040f: 	subq	%rsi, %rdx
    00000412: 	callq	memmove@PLT # Offset: 1042
    00000417: 	movq	0x8(%r13), %rax
    0000041b: 	leaq	-0x8(%rax), %r8
    0000041f: 	movq	%r8, 0x8(%r13)
    00000423: 	cmpq	%r15, %rbx
    00000426: 	je	.Ltmp603 # Offset: 1062
    00000428: 	movq	(%r13), %r9
    0000042c: 	jmp	.Ltmp604 # Offset: 1068
    0000042e: 	nop # Size: 2
.Ltmp600:
    00000430: 	movq	%rdx, %rax
    00000433: 	jmp	.Ltmp605 # Offset: 1075
    00000435: 	nopl	(%rax) # Size: 3
.Ltmp602:
    00000438: 	movq	%rdi, 0x8(%r13)
    0000043c: 	movq	%rdi, %r8
    0000043f: 	cmpq	%r15, %rbx
    00000442: 	jne	.Ltmp604 # Offset: 1090
.Ltmp603:
    00000448: 	addq	$0x8, %rbp
    0000044c: 	cmpq	%rbp, %r12
    0000044f: 	jne	.Ltmp606 # Offset: 1103
    00000455: 	movl	0x10(%rsp), %r13d
.Ltmp619:
    0000045a: 	callq	clock@PLT # Offset: 1114
    0000045f: 	pxor	%xmm0, %xmm0
    00000463: 	movq	(%rsp), %r12
    00000467: 	movq	%rax, end_time(%rip)
    0000046e: 	subq	start_time(%rip), %rax
    00000475: 	cvtsi2sd	%rax, %xmm0
    0000047a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000482: 	addsd	0x28(%rsp), %xmm0
    00000488: 	movq	0x30(%rsp), %rax
    0000048d: 	leaq	(%rax,%r13,8), %rbp
    00000491: 	movsd	%xmm0, 0x28(%rsp)
    00000497: 	nopw	(%rax,%rax) # Size: 9
.Ltmp609:
    000004a0: 	movq	(%r12), %r13
    000004a4: 	testq	%r13, %r13
    000004a7: 	je	.Ltmp607 # Offset: 1191
    000004a9: 	movq	(%r13), %rdi
    000004ad: 	testq	%rdi, %rdi
    000004b0: 	je	.Ltmp608 # Offset: 1200
    000004b2: 	movq	0x10(%r13), %rsi
    000004b6: 	subq	%rdi, %rsi
    000004b9: 	callq	_ZdlPvm@PLT # Offset: 1209
.Ltmp608:
    000004be: 	movl	$0x18, %esi
    000004c3: 	movq	%r13, %rdi
    000004c6: 	callq	_ZdlPvm@PLT # Offset: 1222
.Ltmp607:
    000004cb: 	movq	$0x0, (%r12)
    000004d3: 	addq	$0x8, %r12
    000004d7: 	cmpq	%rbp, %r12
    000004da: 	jne	.Ltmp609 # Offset: 1242
    000004dc: 	movl	0x18(%rsp), %esi
    000004e0: 	movl	iterations(%rip), %eax
    000004e6: 	addl	%esi, 0x40(%rsp)
    000004ea: 	movl	0x40(%rsp), %esi
    000004ee: 	cmpl	%esi, %eax
    000004f0: 	jg	.Ltmp610 # Offset: 1264
.Ltmp624:
    000004f6: 	movq	0x50(%rsp), %rdi
    000004fb: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1275
    00000500: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000507: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000050e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000515: 	je	.Ltmp611 # Offset: 1301
.Ltmp623:
    0000051b: 	movq	-0x20(%rax), %rdi
    0000051f: 	movsd	0x28(%rsp), %xmm0
    00000525: 	callq	_Z13record_resultdPKc # Offset: 1317
    0000052a: 	cmpq	$0x0, (%rsp)
    0000052f: 	je	.Ltmp612 # Offset: 1327
    00000535: 	movq	0x78(%rsp), %rax
    0000053a: 	subq	%fs:0x28, %rax
    00000543: 	jne	.Ltmp613 # Offset: 1347
    00000549: 	movq	0x70(%rsp), %rsi
    0000054e: 	movq	(%rsp), %rdi
    00000552: 	addq	$0x88, %rsp
    00000559: 	popq	%rbx
    0000055a: 	popq	%rbp
    0000055b: 	subq	%rdi, %rsi
    0000055e: 	popq	%r12
    00000560: 	popq	%r13
    00000562: 	popq	%r14
    00000564: 	popq	%r15
    00000566: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1382
    0000056b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp615:
    00000570: 	cmpq	%r15, %rbp
    00000573: 	je	.Ltmp614 # Offset: 1395
    00000575: 	movl	$0x8, %eax
    0000057a: 	subq	%r15, %rdx
    0000057d: 	movq	%r15, %rsi
    00000580: 	movsd	%xmm1, 0x10(%rsp)
    00000586: 	addq	%r15, %rax
    00000589: 	movq	%rax, %rdi
    0000058c: 	callq	memmove@PLT # Offset: 1420
    00000591: 	movsd	0x10(%rsp), %xmm1
.Ltmp614:
    00000597: 	movsd	%xmm1, (%r15)
.Ltmp618:
    0000059c: 	addq	$0x8, %rbp
.Ltmp580:
    000005a0: 	cmpq	%rbp, %r13
    000005a3: 	je	.Ltmp575 # Offset: 1443
    000005a9: 	movsd	(%rbp), %xmm1
    000005ae: 	movsd	(%r15), %xmm0
    000005b3: 	movq	%rbp, %rdx
    000005b6: 	comisd	%xmm1, %xmm0
    000005ba: 	ja	.Ltmp615 # Offset: 1466
    000005bc: 	movsd	-0x8(%rbp), %xmm0
    000005c1: 	leaq	-0x8(%rbp), %rax
    000005c5: 	comisd	%xmm1, %xmm0
    000005c9: 	jbe	.Ltmp616 # Offset: 1481
.Ltmp617:
    000005cb: 	movsd	%xmm0, 0x8(%rax)
    000005d0: 	movq	%rax, %rdx
    000005d3: 	movsd	-0x8(%rax), %xmm0
    000005d8: 	subq	$0x8, %rax
    000005dc: 	comisd	%xmm1, %xmm0
    000005e0: 	ja	.Ltmp617 # Offset: 1504
.Ltmp616:
    000005e2: 	movsd	%xmm1, (%rdx)
    000005e6: 	jmp	.Ltmp618 # Offset: 1510
.Ltmp587:
    000005e8: 	movq	%r14, %rdx
    000005eb: 	addq	$0x8, %r14
    000005ef: 	movsd	%xmm1, (%rdx)
    000005f3: 	cmpq	%r13, %r14
    000005f6: 	jne	.Ltmp589 # Offset: 1526
    000005fc: 	jmp	.Ltmp575 # Offset: 1532
.Ltmp598:
    00000601: 	movl	0x24(%rsp), %eax
    00000605: 	leal	-0x1(%rax), %r13d
    00000609: 	jmp	.Ltmp619 # Offset: 1545
.Ltmp595:
    0000060e: 	testq	%r15, %r15
    00000611: 	jns	.Ltmp620 # Offset: 1553
    00000613: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 1555
.Ltmp572:
    00000618: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp573:
    00000621: 	movq	$0x0, 0x70(%rsp)
    0000062a: 	pxor	%xmm0, %xmm0
    0000062e: 	movaps	%xmm0, 0x60(%rsp)
    00000633: 	jmp	.Ltmp621 # Offset: 1587
.Ltmp612:
    00000638: 	movq	0x78(%rsp), %rax
    0000063d: 	subq	%fs:0x28, %rax
    00000646: 	jne	.Ltmp613 # Offset: 1606
    00000648: 	addq	$0x88, %rsp
    0000064f: 	popq	%rbx
    00000650: 	popq	%rbp
    00000651: 	popq	%r12
    00000653: 	popq	%r13
    00000655: 	popq	%r14
    00000657: 	popq	%r15
    00000659: 	retq # Offset: 1625
.Ltmp585:
    0000065a: 	movq	%rbp, %rdx
    0000065d: 	movsd	%xmm1, (%rdx)
    00000661: 	jmp	.Ltmp622 # Offset: 1633
.Ltmp620:
    00000666: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 1638
.Ltmp611:
    0000066b: 	movq	-0x8(%rdx), %rax
    0000066f: 	addq	$0x200, %rax
    00000675: 	jmp	.Ltmp623 # Offset: 1653
.Ltmp613:
    0000067a: 	callq	__stack_chk_fail@PLT # Offset: 1658
    0000067f: 	nop # Size: 1
.Ltmp574:
    00000680: 	pxor	%xmm4, %xmm4
    00000684: 	movsd	%xmm4, 0x28(%rsp)
    0000068a: 	jmp	.Ltmp624 # Offset: 1674
    0000068f: 	endbr64
    00000693: 	movq	%rax, %rbp
    00000696: 	movq	0x60(%rsp), %rdi
    0000069b: 	movq	0x70(%rsp), %rsi
    000006a0: 	subq	%rdi, %rsi
    000006a3: 	testq	%rdi, %rdi
    000006a6: 	je	.Ltmp625 # Offset: 1702
    000006a8: 	callq	_ZdlPvm@PLT # Offset: 1704
.Ltmp625:
    000006ad: 	movq	%rbp, %rdi
    000006b0: 	callq	_Unwind_Resume@PLT # Offset: 1712
DWARF CFI Instructions:
    <empty>
End of Function "_Z26test_erase_pushback_sortedIdSt6vectorIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z25test_find_pushback_sortedIdSt6vectorIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x90c0
  Size        : 0x471
  MaxSize     : 0x480
  Offset      : 0x90c0
  Section     : .text
  Orc Section : .local.text._Z25test_find_pushback_sortedIdSt6vectorIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rdx, %r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	movq	%rcx, %r12
    00000016: 	pushq	%rbp
    00000017: 	pushq	%rbx
    00000018: 	subq	$0x48, %rsp
    0000001c: 	movq	%r8, 0x18(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x38(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	movaps	%xmm0, 0x20(%rsp)
    00000036: 	movq	$0x0, 0x30(%rsp)
    0000003f: 	cmpq	%rsi, %rdi
    00000042: 	je	.Ltmp626 # Offset: 66
    00000048: 	pxor	%xmm4, %xmm4
    0000004c: 	movq	%rsi, %rbp
    0000004f: 	movq	%rdi, %rbx
    00000052: 	xorl	%esi, %esi
    00000054: 	xorl	%r15d, %r15d
    00000057: 	movsd	%xmm4, 0x8(%rsp)
    0000005d: 	leaq	0x20(%rsp), %r13
    00000062: 	movsd	%xmm4, (%rsp)
    00000067: 	jmp	.Ltmp627 # Offset: 103
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp629:
    00000070: 	movsd	(%rbx), %xmm0
    00000074: 	addq	$0x8, %r15
    00000078: 	movsd	%xmm0, -0x8(%r15)
    0000007e: 	movq	%r15, 0x28(%rsp)
.Ltmp630:
    00000083: 	movsd	(%rsp), %xmm2
    00000088: 	addsd	(%rbx), %xmm2
    0000008c: 	addq	$0x8, %rbx
    00000090: 	movsd	%xmm2, (%rsp)
    00000095: 	cmpq	%rbx, %rbp
    00000098: 	je	.Ltmp628 # Offset: 152
    0000009a: 	movq	0x30(%rsp), %rsi
.Ltmp627:
    0000009f: 	cmpq	%r15, %rsi
    000000a2: 	jne	.Ltmp629 # Offset: 162
    000000a4: 	movq	%rbx, %rdx
    000000a7: 	movq	%r13, %rdi
    000000aa: 	callq	_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_ # Offset: 170
    000000af: 	movq	0x28(%rsp), %r15
    000000b4: 	jmp	.Ltmp630 # Offset: 180
.Ltmp628:
    000000b6: 	movq	0x20(%rsp), %rbp
    000000bb: 	cmpq	%r15, %rbp
    000000be: 	je	.Ltmp631 # Offset: 190
    000000c4: 	movq	%r15, %r13
    000000c7: 	movl	$0x3f, %edx
    000000cc: 	movq	%r15, %rsi
    000000cf: 	movq	%rbp, %rdi
    000000d2: 	subq	%rbp, %r13
    000000d5: 	leaq	0x8(%rbp), %rbx
    000000d9: 	movq	%r13, %rax
    000000dc: 	sarq	$0x3, %rax
    000000e0: 	bsrq	%rax, %rax
    000000e4: 	xorq	$0x3f, %rax
    000000e8: 	subl	%eax, %edx
    000000ea: 	movslq	%edx, %rdx
    000000ed: 	addq	%rdx, %rdx
    000000f0: 	callq	"_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0/1" # Offset: 240
    000000f5: 	cmpq	$0x80, %r13
    000000fc: 	jle	.Ltmp632 # Offset: 252
    00000102: 	leaq	0x80(%rbp), %r13
    00000109: 	movl	$0x8, %ecx
    0000010e: 	jmp	.Ltmp633 # Offset: 270
.Ltmp636:
    00000110: 	cmpq	%rbx, %rbp
    00000113: 	je	.Ltmp634 # Offset: 275
    00000115: 	leaq	(%rbp,%rcx), %rax
    0000011a: 	movq	%rbx, %rdx
    0000011d: 	movq	%rbp, %rsi
    00000120: 	movsd	%xmm1, 0x10(%rsp)
    00000126: 	subq	%rbp, %rdx
    00000129: 	movq	%rax, %rdi
    0000012c: 	callq	memmove@PLT # Offset: 300
    00000131: 	movsd	0x10(%rsp), %xmm1
    00000137: 	movl	$0x8, %ecx
.Ltmp634:
    0000013c: 	addq	$0x8, %rbx
    00000140: 	movsd	%xmm1, (%rbp)
    00000145: 	cmpq	%rbx, %r13
    00000148: 	je	.Ltmp635 # Offset: 328
.Ltmp633:
    0000014a: 	movsd	(%rbx), %xmm1
    0000014e: 	movsd	(%rbp), %xmm0
    00000153: 	comisd	%xmm1, %xmm0
    00000157: 	ja	.Ltmp636 # Offset: 343
    00000159: 	movsd	-0x8(%rbx), %xmm0
    0000015e: 	leaq	-0x8(%rbx), %rax
    00000162: 	comisd	%xmm1, %xmm0
    00000166: 	jbe	.Ltmp637 # Offset: 358
.Ltmp638:
    0000016c: 	movsd	%xmm0, 0x8(%rax)
    00000171: 	movq	%rax, %rdx
    00000174: 	movsd	-0x8(%rax), %xmm0
    00000179: 	subq	$0x8, %rax
    0000017d: 	comisd	%xmm1, %xmm0
    00000181: 	ja	.Ltmp638 # Offset: 385
.Ltmp663:
    00000183: 	addq	$0x8, %rbx
    00000187: 	movsd	%xmm1, (%rdx)
    0000018b: 	cmpq	%rbx, %r13
    0000018e: 	jne	.Ltmp633 # Offset: 398
.Ltmp635:
    00000190: 	cmpq	%r15, %r13
    00000193: 	je	.Ltmp631 # Offset: 403
.Ltmp641:
    00000195: 	movsd	(%r13), %xmm1
    0000019b: 	movsd	-0x8(%r13), %xmm0
    000001a1: 	leaq	-0x8(%r13), %rax
    000001a5: 	comisd	%xmm1, %xmm0
    000001a9: 	jbe	.Ltmp639 # Offset: 425
    000001af: 	nop # Size: 1
.Ltmp640:
    000001b0: 	movsd	%xmm0, 0x8(%rax)
    000001b5: 	movq	%rax, %rdx
    000001b8: 	movsd	-0x8(%rax), %xmm0
    000001bd: 	subq	$0x8, %rax
    000001c1: 	comisd	%xmm1, %xmm0
    000001c5: 	ja	.Ltmp640 # Offset: 453
    000001c7: 	addq	$0x8, %r13
    000001cb: 	movsd	%xmm1, (%rdx)
    000001cf: 	cmpq	%r13, %r15
    000001d2: 	jne	.Ltmp641 # Offset: 466
.Ltmp631:
    000001d4: 	movq	0x30(%rsp), %rax
    000001d9: 	movq	%rax, 0x10(%rsp)
.Ltmp662:
    000001de: 	callq	clock@PLT # Offset: 478
    000001e3: 	movl	iterations(%rip), %r8d
    000001ea: 	movq	%rax, start_time(%rip)
    000001f1: 	testl	%r8d, %r8d
    000001f4: 	jle	.Ltmp642 # Offset: 500
    000001fa: 	movq	%r15, %rbx
    000001fd: 	xorl	%r13d, %r13d
    00000200: 	leaq	DATAat0x52360(%rip), %r15
    00000207: 	subq	%rbp, %rbx
    0000020a: 	sarq	$0x3, %rbx
    0000020e: 	nop # Size: 2
.Ltmp649:
    00000210: 	movq	%r14, %rdi
    00000213: 	pxor	%xmm1, %xmm1
    00000217: 	cmpq	%r12, %r14
    0000021a: 	je	.Ltmp643 # Offset: 538
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp647:
    00000220: 	addq	$0x8, %rdi
    00000224: 	movq	%rbp, %rsi
    00000227: 	movq	%rbx, %rax
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp653:
    00000230: 	testq	%rax, %rax
    00000233: 	jle	.Ltmp644 # Offset: 563
.Ltmp646:
    00000235: 	movq	%rax, %rdx
    00000238: 	movsd	-0x8(%rdi), %xmm0
    0000023d: 	sarq	%rdx
    00000240: 	leaq	(%rsi,%rdx,8), %rcx
    00000244: 	comisd	(%rcx), %xmm0
    00000248: 	jbe	.Ltmp645 # Offset: 584
    0000024e: 	subq	%rdx, %rax
    00000251: 	leaq	0x8(%rcx), %rsi
    00000255: 	subq	$0x1, %rax
    00000259: 	testq	%rax, %rax
    0000025c: 	jg	.Ltmp646 # Offset: 604
.Ltmp644:
    0000025e: 	addsd	(%rsi), %xmm1
    00000262: 	cmpq	%rdi, %r12
    00000265: 	jne	.Ltmp647 # Offset: 613
.Ltmp643:
    00000267: 	movsd	(%rsp), %xmm3
    0000026c: 	ucomisd	%xmm1, %xmm3
    00000270: 	jp	.Ltmp648 # Offset: 624
    00000276: 	jne	.Ltmp648 # Offset: 630
.Ltmp654:
    0000027c: 	addl	$0x1, %r13d
    00000280: 	cmpl	%r8d, %r13d
    00000283: 	jl	.Ltmp649 # Offset: 643
.Ltmp642:
    00000285: 	movq	0x18(%rsp), %rdi
    0000028a: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 650
    0000028f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000296: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000029d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a4: 	je	.Ltmp650 # Offset: 676
.Ltmp661:
    000002aa: 	movq	-0x20(%rax), %r12
    000002ae: 	callq	clock@PLT # Offset: 686
    000002b3: 	pxor	%xmm0, %xmm0
    000002b7: 	movq	%rax, end_time(%rip)
    000002be: 	movq	%r12, %rdi
    000002c1: 	subq	start_time(%rip), %rax
    000002c8: 	cvtsi2sd	%rax, %xmm0
    000002cd: 	divsd	DATAat0x53788(%rip), %xmm0
    000002d5: 	callq	_Z13record_resultdPKc # Offset: 725
    000002da: 	testq	%rbp, %rbp
    000002dd: 	je	.Ltmp651 # Offset: 733
    000002e3: 	movq	0x38(%rsp), %rax
    000002e8: 	subq	%fs:0x28, %rax
    000002f1: 	jne	.Ltmp652 # Offset: 753
    000002f7: 	movq	0x10(%rsp), %rsi
    000002fc: 	addq	$0x48, %rsp
    00000300: 	movq	%rbp, %rdi
    00000303: 	popq	%rbx
    00000304: 	subq	%rbp, %rsi
    00000307: 	popq	%rbp
    00000308: 	popq	%r12
    0000030a: 	popq	%r13
    0000030c: 	popq	%r14
    0000030e: 	popq	%r15
    00000310: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 784
    00000315: 	nopl	(%rax) # Size: 3
.Ltmp645:
    00000318: 	movq	%rdx, %rax
    0000031b: 	jmp	.Ltmp653 # Offset: 795
.Ltmp648:
    00000320: 	movl	current_test(%rip), %edx
    00000326: 	movq	%r15, %rsi
    00000329: 	movl	$0x1, %edi
    0000032e: 	xorl	%eax, %eax
    00000330: 	callq	__printf_chk@PLT # Offset: 816
    00000335: 	movl	iterations(%rip), %r8d
    0000033c: 	jmp	.Ltmp654 # Offset: 828
.Ltmp632:
    00000341: 	movl	$0x8, %r13d
    00000347: 	cmpq	%rbx, %r15
    0000034a: 	jne	.Ltmp655 # Offset: 842
    0000034c: 	jmp	.Ltmp631 # Offset: 844
    00000351: 	nopl	(%rax) # Size: 7
.Ltmp657:
    00000358: 	cmpq	%rbx, %rbp
    0000035b: 	je	.Ltmp656 # Offset: 859
    0000035d: 	leaq	(%rbp,%r13), %rax
    00000362: 	movq	%rbx, %rdx
    00000365: 	movq	%rbp, %rsi
    00000368: 	movsd	%xmm1, 0x10(%rsp)
    0000036e: 	subq	%rbp, %rdx
    00000371: 	movq	%rax, %rdi
    00000374: 	callq	memmove@PLT # Offset: 884
    00000379: 	movsd	0x10(%rsp), %xmm1
.Ltmp656:
    0000037f: 	movsd	%xmm1, (%rbp)
.Ltmp660:
    00000384: 	addq	$0x8, %rbx
    00000388: 	cmpq	%rbx, %r15
    0000038b: 	je	.Ltmp631 # Offset: 907
.Ltmp655:
    00000391: 	movsd	(%rbx), %xmm1
    00000395: 	movsd	(%rbp), %xmm0
    0000039a: 	comisd	%xmm1, %xmm0
    0000039e: 	ja	.Ltmp657 # Offset: 926
    000003a0: 	movsd	-0x8(%rbx), %xmm0
    000003a5: 	leaq	-0x8(%rbx), %rax
    000003a9: 	comisd	%xmm1, %xmm0
    000003ad: 	jbe	.Ltmp658 # Offset: 941
.Ltmp659:
    000003b3: 	movsd	%xmm0, 0x8(%rax)
    000003b8: 	movq	%rax, %rdx
    000003bb: 	movsd	-0x8(%rax), %xmm0
    000003c0: 	subq	$0x8, %rax
    000003c4: 	comisd	%xmm1, %xmm0
    000003c8: 	ja	.Ltmp659 # Offset: 968
.Ltmp664:
    000003ca: 	movsd	%xmm1, (%rdx)
    000003ce: 	jmp	.Ltmp660 # Offset: 974
.Ltmp651:
    000003d0: 	movq	0x38(%rsp), %rax
    000003d5: 	subq	%fs:0x28, %rax
    000003de: 	jne	.Ltmp652 # Offset: 990
    000003e0: 	addq	$0x48, %rsp
    000003e4: 	popq	%rbx
    000003e5: 	popq	%rbp
    000003e6: 	popq	%r12
    000003e8: 	popq	%r13
    000003ea: 	popq	%r14
    000003ec: 	popq	%r15
    000003ee: 	retq # Offset: 1006
.Ltmp650:
    000003ef: 	movq	-0x8(%rdx), %rax
    000003f3: 	addq	$0x200, %rax
    000003f9: 	jmp	.Ltmp661 # Offset: 1017
.Ltmp639:
    000003fe: 	movq	%r13, %rdx
    00000401: 	addq	$0x8, %r13
    00000405: 	movsd	%xmm1, (%rdx)
    00000409: 	cmpq	%r13, %r15
    0000040c: 	jne	.Ltmp641 # Offset: 1036
    00000412: 	jmp	.Ltmp631 # Offset: 1042
.Ltmp626:
    00000417: 	pxor	%xmm5, %xmm5
    0000041b: 	xorl	%r15d, %r15d
    0000041e: 	xorl	%ebp, %ebp
    00000420: 	movq	$0x0, 0x10(%rsp)
    00000429: 	movsd	%xmm5, 0x8(%rsp)
    0000042f: 	movsd	%xmm5, (%rsp)
    00000434: 	jmp	.Ltmp662 # Offset: 1076
.Ltmp637:
    00000439: 	movq	%rbx, %rdx
    0000043c: 	jmp	.Ltmp663 # Offset: 1084
.Ltmp658:
    00000441: 	movq	%rbx, %rdx
    00000444: 	jmp	.Ltmp664 # Offset: 1092
.Ltmp652:
    00000446: 	callq	__stack_chk_fail@PLT # Offset: 1094
    0000044b: 	endbr64
    0000044f: 	movq	%rax, %rbp
    00000452: 	movq	0x20(%rsp), %rdi
    00000457: 	movq	0x30(%rsp), %rsi
    0000045c: 	subq	%rdi, %rsi
    0000045f: 	testq	%rdi, %rdi
    00000462: 	je	.Ltmp665 # Offset: 1122
    00000464: 	callq	_ZdlPvm@PLT # Offset: 1124
.Ltmp665:
    00000469: 	movq	%rbp, %rdi
    0000046c: 	callq	_Unwind_Resume@PLT # Offset: 1132
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_find_pushback_sortedIdSt6vectorIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_find_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x9540
  Size        : 0x3dd
  MaxSize     : 0x3e0
  Offset      : 0x9540
  Section     : .text
  Orc Section : .local.text._Z18test_find_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rcx, %rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	%rdx, 0x28(%rsp)
    0000001d: 	movq	%r8, 0x30(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x88(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	leaq	0x80(%rsp), %rax
    0000003d: 	movq	$0x1, 0x58(%rsp)
    00000046: 	movq	%rax, 0x38(%rsp)
    0000004b: 	movq	%rax, 0x50(%rsp)
    00000050: 	movq	$0x0, 0x60(%rsp)
    00000059: 	movq	$0x0, 0x68(%rsp)
    00000062: 	movl	$0x3f800000, 0x70(%rsp)
    0000006a: 	movq	$0x0, 0x78(%rsp)
    00000073: 	movq	$0x0, 0x80(%rsp)
    0000007f: 	cmpq	%rsi, %rdi
    00000082: 	je	.Ltmp666 # Offset: 130
    00000088: 	pxor	%xmm6, %xmm6
    0000008c: 	movq	%rdi, %rbp
    0000008f: 	leaq	0x40(%rsp), %r13
    00000094: 	movq	%rsi, %r12
    00000097: 	movsd	%xmm6, (%rsp)
    0000009c: 	leaq	0x50(%rsp), %r15
    000000a1: 	movsd	%xmm6, 0x20(%rsp)
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp667:
    000000b0: 	movsd	(%rbp), %xmm0
    000000b5: 	movq	%r13, %rdx
    000000b8: 	xorl	%esi, %esi
    000000ba: 	movq	%r15, %rdi
    000000bd: 	unpcklpd	%xmm0, %xmm0
    000000c1: 	movaps	%xmm0, 0x40(%rsp)
    000000c6: 	callq	"_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE10_M_emplaceIJS0_IddEEEENS4_14_Node_iteratorIS2_Lb0ELb0EEENS4_20_Node_const_iteratorIS2_Lb0ELb0EEESt17integral_constantIbLb0EEDpOT_.constprop.0/1" # Offset: 198
    000000cb: 	movsd	0x20(%rsp), %xmm4
    000000d1: 	addsd	(%rbp), %xmm4
    000000d6: 	addq	$0x8, %rbp
    000000da: 	movsd	%xmm4, 0x20(%rsp)
    000000e0: 	cmpq	%rbp, %r12
    000000e3: 	jne	.Ltmp667 # Offset: 227
.Ltmp688:
    000000e5: 	callq	clock@PLT # Offset: 229
    000000ea: 	movl	$0xc70f6907, %ebp
    000000ef: 	movl	$0x0, 0x1c(%rsp)
    000000f7: 	leaq	0x40(%rsp), %r12
    000000fc: 	movq	%rax, start_time(%rip)
    00000103: 	movl	iterations(%rip), %eax
    00000109: 	testl	%eax, %eax
    0000010b: 	jle	.Ltmp668 # Offset: 267
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp678:
    00000118: 	movq	0x28(%rsp), %rax
    0000011d: 	pxor	%xmm1, %xmm1
    00000121: 	movq	%rax, %r14
    00000124: 	cmpq	%rbx, %rax
    00000127: 	je	.Ltmp669 # Offset: 295
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp676:
    00000130: 	addq	$0x8, %r14
    00000134: 	movsd	-0x8(%r14), %xmm0
    0000013a: 	ucomisd	(%rsp), %xmm0
    0000013f: 	movsd	%xmm0, 0x40(%rsp)
    00000145: 	jp	.Ltmp670 # Offset: 325
    0000014b: 	movl	$0x0, %eax
    00000150: 	jne	.Ltmp670 # Offset: 336
.Ltmp684:
    00000156: 	xorl	%edx, %edx
    00000158: 	divq	0x58(%rsp)
    0000015d: 	movq	0x50(%rsp), %rax
    00000162: 	movq	(%rax,%rdx,8), %rax
    00000166: 	movq	%rdx, %r15
    00000169: 	testq	%rax, %rax
    0000016c: 	je	.Ltmp671 # Offset: 364
    00000172: 	movq	(%rax), %r13
    00000175: 	movsd	0x8(%r13), %xmm0
    0000017b: 	ucomisd	-0x8(%r14), %xmm0
    00000181: 	jp	.Ltmp672 # Offset: 385
    00000183: 	je	.Ltmp673 # Offset: 387
.Ltmp672:
    00000185: 	movq	%r12, %rcx
    00000188: 	movq	%rbx, %r12
    0000018b: 	movq	%r15, %rbx
.Ltmp675:
    0000018e: 	movq	(%r13), %rax
    00000192: 	testq	%rax, %rax
    00000195: 	je	.Ltmp671 # Offset: 405
    0000019b: 	movsd	0x8(%rax), %xmm0
    000001a0: 	ucomisd	(%rsp), %xmm0
    000001a5: 	movq	0x58(%rsp), %r15
    000001aa: 	movsd	%xmm0, 0x40(%rsp)
    000001b0: 	jp	.Ltmp674 # Offset: 432
    000001b6: 	movl	$0x0, %edx
    000001bb: 	jne	.Ltmp674 # Offset: 443
.Ltmp685:
    000001c1: 	cmpq	%rbx, %rdx
    000001c4: 	jne	.Ltmp671 # Offset: 452
    000001ca: 	movq	(%r13), %r13
    000001ce: 	movsd	-0x8(%r14), %xmm0
    000001d4: 	ucomisd	0x8(%r13), %xmm0
    000001da: 	jp	.Ltmp675 # Offset: 474
    000001dc: 	jne	.Ltmp675 # Offset: 476
    000001de: 	movq	%r12, %rbx
    000001e1: 	movq	%rcx, %r12
.Ltmp673:
    000001e4: 	addsd	0x10(%r13), %xmm1
    000001ea: 	cmpq	%r14, %rbx
    000001ed: 	jne	.Ltmp676 # Offset: 493
.Ltmp669:
    000001f3: 	ucomisd	0x20(%rsp), %xmm1
    000001f9: 	jp	.Ltmp677 # Offset: 505
    000001ff: 	jne	.Ltmp677 # Offset: 511
.Ltmp686:
    00000205: 	addl	$0x1, 0x1c(%rsp)
    0000020a: 	movl	0x1c(%rsp), %eax
    0000020e: 	cmpl	%eax, iterations(%rip)
    00000214: 	jg	.Ltmp678 # Offset: 532
.Ltmp668:
    0000021a: 	movq	0x30(%rsp), %rdi
    0000021f: 	leaq	0x50(%rsp), %r15
    00000224: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 548
    00000229: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000230: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000237: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023e: 	je	.Ltmp679 # Offset: 574
.Ltmp687:
    00000244: 	movq	-0x20(%rax), %rbp
    00000248: 	leaq	0x50(%rsp), %r15
    0000024d: 	callq	clock@PLT # Offset: 589
    00000252: 	pxor	%xmm0, %xmm0
    00000256: 	movq	%rax, end_time(%rip)
    0000025d: 	movq	%rbp, %rdi
    00000260: 	subq	start_time(%rip), %rax
    00000267: 	cvtsi2sd	%rax, %xmm0
    0000026c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000274: 	callq	_Z13record_resultdPKc # Offset: 628
    00000279: 	movq	0x60(%rsp), %rbx
    0000027e: 	testq	%rbx, %rbx
    00000281: 	je	.Ltmp680 # Offset: 641
    00000283: 	nopl	(%rax,%rax) # Size: 5
.Ltmp681:
    00000288: 	movq	%rbx, %rdi
    0000028b: 	movq	(%rbx), %rbx
    0000028e: 	movl	$0x18, %esi
    00000293: 	callq	_ZdlPvm@PLT # Offset: 659
    00000298: 	testq	%rbx, %rbx
    0000029b: 	jne	.Ltmp681 # Offset: 667
.Ltmp680:
    0000029d: 	movq	0x58(%rsp), %rax
    000002a2: 	movq	0x50(%rsp), %rdi
    000002a7: 	xorl	%esi, %esi
    000002a9: 	leaq	(,%rax,8), %rdx
    000002b1: 	callq	memset@PLT # Offset: 689
    000002b6: 	movq	0x58(%rsp), %rsi
    000002bb: 	movq	0x50(%rsp), %rdi
    000002c0: 	movq	$0x0, 0x68(%rsp)
    000002c9: 	movq	$0x0, 0x60(%rsp)
    000002d2: 	cmpq	0x38(%rsp), %rdi
    000002d7: 	je	.Ltmp682 # Offset: 727
    000002d9: 	shlq	$0x3, %rsi
    000002dd: 	callq	_ZdlPvm@PLT # Offset: 733
.Ltmp682:
    000002e2: 	movq	0x88(%rsp), %rax
    000002ea: 	subq	%fs:0x28, %rax
    000002f3: 	jne	.Ltmp683 # Offset: 755
    000002f9: 	addq	$0x98, %rsp
    00000300: 	popq	%rbx
    00000301: 	popq	%rbp
    00000302: 	popq	%r12
    00000304: 	popq	%r13
    00000306: 	popq	%r14
    00000308: 	popq	%r15
    0000030a: 	retq # Offset: 778
    0000030b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp670:
    00000310: 	movq	%rbp, %rdx
    00000313: 	movl	$0x8, %esi
    00000318: 	movq	%r12, %rdi
    0000031b: 	movsd	%xmm1, 0x8(%rsp)
    00000321: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 801
    00000326: 	movsd	0x8(%rsp), %xmm1
    0000032c: 	jmp	.Ltmp684 # Offset: 812
    00000331: 	nopl	(%rax) # Size: 7
.Ltmp674:
    00000338: 	movq	%rbp, %rdx
    0000033b: 	movq	%rcx, %rdi
    0000033e: 	movl	$0x8, %esi
    00000343: 	movq	%rcx, 0x8(%rsp)
    00000348: 	movsd	%xmm1, 0x10(%rsp)
    0000034e: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 846
    00000353: 	xorl	%edx, %edx
    00000355: 	movsd	0x10(%rsp), %xmm1
    0000035b: 	movq	0x8(%rsp), %rcx
    00000360: 	divq	%r15
    00000363: 	jmp	.Ltmp685 # Offset: 867
    00000368: 	nopl	(%rax,%rax) # Size: 8
.Ltmp677:
    00000370: 	movl	current_test(%rip), %edx
    00000376: 	leaq	DATAat0x52360(%rip), %rsi
    0000037d: 	movl	$0x1, %edi
    00000382: 	xorl	%eax, %eax
    00000384: 	leaq	0x50(%rsp), %r15
    00000389: 	callq	__printf_chk@PLT # Offset: 905
    0000038e: 	jmp	.Ltmp686 # Offset: 910
.Ltmp679:
    00000393: 	movq	-0x8(%rdx), %rax
    00000397: 	addq	$0x200, %rax
    0000039d: 	jmp	.Ltmp687 # Offset: 925
.Ltmp666:
    000003a2: 	pxor	%xmm7, %xmm7
    000003a6: 	movsd	%xmm7, (%rsp)
    000003ab: 	movsd	%xmm7, 0x20(%rsp)
    000003b1: 	jmp	.Ltmp688 # Offset: 945
.Ltmp683:
    000003b6: 	callq	__stack_chk_fail@PLT # Offset: 950
.Ltmp671:
    000003bb: 	movsd	0x10, %xmm0
    000003c4: 	ud2
    000003c6: 	endbr64
    000003ca: 	movq	%rax, %rbp
    000003cd: 	movq	%r15, %rdi
    000003d0: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEED2Ev # Offset: 976
    000003d5: 	movq	%rbp, %rdi
    000003d8: 	callq	_Unwind_Resume@PLT # Offset: 984
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_find_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_find_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x9920
  Size        : 0x3bd
  MaxSize     : 0x3c0
  Offset      : 0x9920
  Section     : .text
  Orc Section : .local.text._Z14test_find_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rcx, %rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	%rdx, 0x28(%rsp)
    0000001d: 	movq	%r8, 0x30(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x88(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	leaq	0x80(%rsp), %rax
    0000003d: 	movq	$0x1, 0x58(%rsp)
    00000046: 	movq	%rax, 0x38(%rsp)
    0000004b: 	movq	%rax, 0x50(%rsp)
    00000050: 	movq	$0x0, 0x60(%rsp)
    00000059: 	movq	$0x0, 0x68(%rsp)
    00000062: 	movl	$0x3f800000, 0x70(%rsp)
    0000006a: 	movq	$0x0, 0x78(%rsp)
    00000073: 	movq	$0x0, 0x80(%rsp)
    0000007f: 	cmpq	%rsi, %rdi
    00000082: 	je	.Ltmp689 # Offset: 130
    00000088: 	pxor	%xmm6, %xmm6
    0000008c: 	movq	%rdi, %rbp
    0000008f: 	leaq	0x50(%rsp), %r15
    00000094: 	movq	%rsi, %r12
    00000097: 	movsd	%xmm6, (%rsp)
    0000009c: 	movsd	%xmm6, 0x20(%rsp)
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp690:
    000000a8: 	movq	%rbp, %rdx
    000000ab: 	xorl	%esi, %esi
    000000ad: 	movq	%r15, %rdi
    000000b0: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0/1" # Offset: 176
    000000b5: 	movsd	0x20(%rsp), %xmm4
    000000bb: 	addsd	(%rbp), %xmm4
    000000c0: 	addq	$0x8, %rbp
    000000c4: 	movsd	%xmm4, 0x20(%rsp)
    000000ca: 	cmpq	%rbp, %r12
    000000cd: 	jne	.Ltmp690 # Offset: 205
.Ltmp711:
    000000cf: 	callq	clock@PLT # Offset: 207
    000000d4: 	movl	$0xc70f6907, %ebp
    000000d9: 	movl	$0x0, 0x1c(%rsp)
    000000e1: 	leaq	0x48(%rsp), %r12
    000000e6: 	movq	%rax, start_time(%rip)
    000000ed: 	movl	iterations(%rip), %eax
    000000f3: 	testl	%eax, %eax
    000000f5: 	jle	.Ltmp691 # Offset: 245
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp701:
    00000100: 	movq	0x28(%rsp), %rax
    00000105: 	pxor	%xmm1, %xmm1
    00000109: 	movq	%rax, %r15
    0000010c: 	cmpq	%rbx, %rax
    0000010f: 	je	.Ltmp692 # Offset: 271
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp699:
    00000118: 	addq	$0x8, %r15
    0000011c: 	movsd	-0x8(%r15), %xmm0
    00000122: 	ucomisd	(%rsp), %xmm0
    00000127: 	movsd	%xmm0, 0x48(%rsp)
    0000012d: 	jp	.Ltmp693 # Offset: 301
    00000133: 	movl	$0x0, %eax
    00000138: 	jne	.Ltmp693 # Offset: 312
.Ltmp707:
    0000013e: 	xorl	%edx, %edx
    00000140: 	divq	0x58(%rsp)
    00000145: 	movq	0x50(%rsp), %rax
    0000014a: 	movq	(%rax,%rdx,8), %rax
    0000014e: 	movq	%rdx, %r14
    00000151: 	testq	%rax, %rax
    00000154: 	je	.Ltmp694 # Offset: 340
    0000015a: 	movq	(%rax), %r13
    0000015d: 	movsd	0x8(%r13), %xmm0
    00000163: 	ucomisd	-0x8(%r15), %xmm0
    00000169: 	jp	.Ltmp695 # Offset: 361
    0000016b: 	je	.Ltmp696 # Offset: 363
.Ltmp695:
    0000016d: 	movq	%r12, %rcx
    00000170: 	movq	%rbx, %r12
    00000173: 	movq	%r14, %rbx
.Ltmp698:
    00000176: 	movq	(%r13), %rax
    0000017a: 	testq	%rax, %rax
    0000017d: 	je	.Ltmp694 # Offset: 381
    00000183: 	movsd	0x8(%rax), %xmm0
    00000188: 	ucomisd	(%rsp), %xmm0
    0000018d: 	movq	0x58(%rsp), %r14
    00000192: 	movsd	%xmm0, 0x48(%rsp)
    00000198: 	jp	.Ltmp697 # Offset: 408
    0000019e: 	movl	$0x0, %edx
    000001a3: 	jne	.Ltmp697 # Offset: 419
.Ltmp708:
    000001a9: 	cmpq	%rdx, %rbx
    000001ac: 	jne	.Ltmp694 # Offset: 428
    000001b2: 	movq	(%r13), %r13
    000001b6: 	movsd	0x8(%r13), %xmm0
    000001bc: 	ucomisd	-0x8(%r15), %xmm0
    000001c2: 	jp	.Ltmp698 # Offset: 450
    000001c4: 	jne	.Ltmp698 # Offset: 452
    000001c6: 	movq	%r12, %rbx
    000001c9: 	movq	%rcx, %r12
.Ltmp696:
    000001cc: 	addsd	%xmm0, %xmm1
    000001d0: 	cmpq	%r15, %rbx
    000001d3: 	jne	.Ltmp699 # Offset: 467
.Ltmp692:
    000001d9: 	movsd	0x20(%rsp), %xmm5
    000001df: 	ucomisd	%xmm1, %xmm5
    000001e3: 	jp	.Ltmp700 # Offset: 483
    000001e9: 	jne	.Ltmp700 # Offset: 489
.Ltmp709:
    000001ef: 	addl	$0x1, 0x1c(%rsp)
    000001f4: 	movl	0x1c(%rsp), %eax
    000001f8: 	cmpl	%eax, iterations(%rip)
    000001fe: 	jg	.Ltmp701 # Offset: 510
.Ltmp691:
    00000204: 	movq	0x30(%rsp), %rdi
    00000209: 	leaq	0x50(%rsp), %r15
    0000020e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 526
    00000213: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000221: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000228: 	je	.Ltmp702 # Offset: 552
.Ltmp710:
    0000022e: 	movq	-0x20(%rax), %rbp
    00000232: 	leaq	0x50(%rsp), %r15
    00000237: 	callq	clock@PLT # Offset: 567
    0000023c: 	pxor	%xmm0, %xmm0
    00000240: 	movq	%rax, end_time(%rip)
    00000247: 	movq	%rbp, %rdi
    0000024a: 	subq	start_time(%rip), %rax
    00000251: 	cvtsi2sd	%rax, %xmm0
    00000256: 	divsd	DATAat0x53788(%rip), %xmm0
    0000025e: 	callq	_Z13record_resultdPKc # Offset: 606
    00000263: 	movq	0x60(%rsp), %rbx
    00000268: 	testq	%rbx, %rbx
    0000026b: 	je	.Ltmp703 # Offset: 619
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp704:
    00000270: 	movq	%rbx, %rdi
    00000273: 	movq	(%rbx), %rbx
    00000276: 	movl	$0x10, %esi
    0000027b: 	callq	_ZdlPvm@PLT # Offset: 635
    00000280: 	testq	%rbx, %rbx
    00000283: 	jne	.Ltmp704 # Offset: 643
.Ltmp703:
    00000285: 	movq	0x58(%rsp), %rax
    0000028a: 	movq	0x50(%rsp), %rdi
    0000028f: 	xorl	%esi, %esi
    00000291: 	leaq	(,%rax,8), %rdx
    00000299: 	callq	memset@PLT # Offset: 665
    0000029e: 	movq	0x58(%rsp), %rsi
    000002a3: 	movq	0x50(%rsp), %rdi
    000002a8: 	movq	$0x0, 0x68(%rsp)
    000002b1: 	movq	$0x0, 0x60(%rsp)
    000002ba: 	cmpq	0x38(%rsp), %rdi
    000002bf: 	je	.Ltmp705 # Offset: 703
    000002c1: 	shlq	$0x3, %rsi
    000002c5: 	callq	_ZdlPvm@PLT # Offset: 709
.Ltmp705:
    000002ca: 	movq	0x88(%rsp), %rax
    000002d2: 	subq	%fs:0x28, %rax
    000002db: 	jne	.Ltmp706 # Offset: 731
    000002e1: 	addq	$0x98, %rsp
    000002e8: 	popq	%rbx
    000002e9: 	popq	%rbp
    000002ea: 	popq	%r12
    000002ec: 	popq	%r13
    000002ee: 	popq	%r14
    000002f0: 	popq	%r15
    000002f2: 	retq # Offset: 754
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp693:
    000002f8: 	movq	%rbp, %rdx
    000002fb: 	movl	$0x8, %esi
    00000300: 	movq	%r12, %rdi
    00000303: 	movsd	%xmm1, 0x8(%rsp)
    00000309: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 777
    0000030e: 	movsd	0x8(%rsp), %xmm1
    00000314: 	jmp	.Ltmp707 # Offset: 788
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp697:
    00000320: 	movq	%rbp, %rdx
    00000323: 	movq	%rcx, %rdi
    00000326: 	movl	$0x8, %esi
    0000032b: 	movq	%rcx, 0x8(%rsp)
    00000330: 	movsd	%xmm1, 0x10(%rsp)
    00000336: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 822
    0000033b: 	xorl	%edx, %edx
    0000033d: 	movsd	0x10(%rsp), %xmm1
    00000343: 	movq	0x8(%rsp), %rcx
    00000348: 	divq	%r14
    0000034b: 	jmp	.Ltmp708 # Offset: 843
.Ltmp700:
    00000350: 	movl	current_test(%rip), %edx
    00000356: 	leaq	DATAat0x52360(%rip), %rsi
    0000035d: 	movl	$0x1, %edi
    00000362: 	xorl	%eax, %eax
    00000364: 	leaq	0x50(%rsp), %r15
    00000369: 	callq	__printf_chk@PLT # Offset: 873
    0000036e: 	jmp	.Ltmp709 # Offset: 878
.Ltmp702:
    00000373: 	movq	-0x8(%rdx), %rax
    00000377: 	addq	$0x200, %rax
    0000037d: 	jmp	.Ltmp710 # Offset: 893
.Ltmp689:
    00000382: 	pxor	%xmm7, %xmm7
    00000386: 	movsd	%xmm7, (%rsp)
    0000038b: 	movsd	%xmm7, 0x20(%rsp)
    00000391: 	jmp	.Ltmp711 # Offset: 913
.Ltmp706:
    00000396: 	callq	__stack_chk_fail@PLT # Offset: 918
.Ltmp694:
    0000039b: 	movsd	0x8, %xmm0
    000003a4: 	ud2
    000003a6: 	endbr64
    000003aa: 	movq	%rax, %rbp
    000003ad: 	movq	%r15, %rdi
    000003b0: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEED2Ev # Offset: 944
    000003b5: 	movq	%rbp, %rdi
    000003b8: 	callq	_Unwind_Resume@PLT # Offset: 952
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_find_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_find_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x9ce0
  Size        : 0x2c7
  MaxSize     : 0x2d0
  Offset      : 0x9ce0
  Section     : .text
  Orc Section : .local.text._Z18test_find_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x58(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	leaq	0x28(%rsp), %rbx
    00000030: 	movl	$0x0, 0x28(%rsp)
    00000038: 	movq	$0x0, 0x30(%rsp)
    00000041: 	movq	%rbx, 0x38(%rsp)
    00000046: 	movq	%rbx, 0x40(%rsp)
    0000004b: 	movq	$0x0, 0x48(%rsp)
    00000054: 	cmpq	%rsi, %rdi
    00000057: 	je	.Ltmp712 # Offset: 87
    0000005d: 	pxor	%xmm7, %xmm7
    00000061: 	movq	%rdi, %r12
    00000064: 	movq	%rsi, %r15
    00000067: 	movsd	%xmm7, 0x18(%rsp)
    0000006d: 	movsd	%xmm7, 0x10(%rsp)
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp719:
    00000078: 	movsd	(%r12), %xmm4
    0000007e: 	movl	$0x30, %edi
    00000083: 	movsd	%xmm4, 0x8(%rsp)
    00000089: 	callq	_Znwm@PLT # Offset: 137
    0000008e: 	movsd	0x8(%rsp), %xmm0
    00000094: 	movq	0x30(%rsp), %rdx
    00000099: 	movq	%rax, %rsi
    0000009c: 	unpcklpd	%xmm0, %xmm0
    000000a0: 	movups	%xmm0, 0x20(%rax)
    000000a4: 	testq	%rdx, %rdx
    000000a7: 	jne	.Ltmp713 # Offset: 167
    000000a9: 	jmp	.Ltmp714 # Offset: 169
    000000ae: 	nop # Size: 2
.Ltmp716:
    000000b0: 	movq	0x10(%rdx), %rcx
    000000b4: 	testq	%rcx, %rcx
    000000b7: 	je	.Ltmp715 # Offset: 183
.Ltmp717:
    000000b9: 	movq	%rcx, %rdx
.Ltmp713:
    000000bc: 	movsd	0x20(%rdx), %xmm0
    000000c1: 	comisd	0x8(%rsp), %xmm0
    000000c7: 	ja	.Ltmp716 # Offset: 199
    000000c9: 	movq	0x18(%rdx), %rcx
    000000cd: 	testq	%rcx, %rcx
    000000d0: 	jne	.Ltmp717 # Offset: 208
.Ltmp715:
    000000d2: 	movl	$0x1, %edi
    000000d7: 	cmpq	%rbx, %rdx
    000000da: 	je	.Ltmp718 # Offset: 218
    000000dc: 	xorl	%edi, %edi
    000000de: 	comisd	0x8(%rsp), %xmm0
    000000e4: 	seta	%dil
.Ltmp718:
    000000e8: 	movq	%rbx, %rcx
    000000eb: 	addq	$0x8, %r12
    000000ef: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 239
    000000f4: 	movsd	0x10(%rsp), %xmm5
    000000fa: 	addsd	-0x8(%r12), %xmm5
    00000101: 	addq	$0x1, 0x48(%rsp)
    00000107: 	movsd	%xmm5, 0x10(%rsp)
    0000010d: 	cmpq	%r12, %r15
    00000110: 	jne	.Ltmp719 # Offset: 272
.Ltmp734:
    00000116: 	callq	clock@PLT # Offset: 278
    0000011b: 	movl	iterations(%rip), %edi
    00000121: 	xorl	%r12d, %r12d
    00000124: 	leaq	DATAat0x52360(%rip), %r15
    0000012b: 	movq	%rax, start_time(%rip)
    00000132: 	testl	%edi, %edi
    00000134: 	jle	.Ltmp720 # Offset: 308
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp729:
    00000140: 	pxor	%xmm1, %xmm1
    00000144: 	cmpq	%rbp, %r13
    00000147: 	je	.Ltmp721 # Offset: 327
    00000149: 	movq	0x30(%rsp), %rsi
    0000014e: 	movq	%r13, %rcx
    00000151: 	pxor	%xmm1, %xmm1
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp727:
    00000158: 	addq	$0x8, %rcx
    0000015c: 	testq	%rsi, %rsi
    0000015f: 	je	.Ltmp722 # Offset: 351
    00000165: 	movsd	-0x8(%rcx), %xmm0
    0000016a: 	movq	%rsi, %rax
    0000016d: 	movq	%rbx, %rdx
    00000170: 	jmp	.Ltmp723 # Offset: 368
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp725:
    00000178: 	movq	%rax, %rdx
    0000017b: 	movq	0x10(%rax), %rax
    0000017f: 	testq	%rax, %rax
    00000182: 	je	.Ltmp724 # Offset: 386
.Ltmp723:
    00000184: 	comisd	0x20(%rax), %xmm0
    00000189: 	jbe	.Ltmp725 # Offset: 393
    0000018b: 	movq	0x18(%rax), %rax
    0000018f: 	testq	%rax, %rax
    00000192: 	jne	.Ltmp723 # Offset: 402
.Ltmp724:
    00000194: 	cmpq	%rbx, %rdx
    00000197: 	je	.Ltmp726 # Offset: 407
    00000199: 	movsd	0x20(%rdx), %xmm2
    0000019e: 	ucomisd	%xmm0, %xmm2
    000001a2: 	cmovaq	%rbx, %rdx
.Ltmp726:
    000001a6: 	addsd	0x28(%rdx), %xmm1
    000001ab: 	cmpq	%rcx, %rbp
    000001ae: 	jne	.Ltmp727 # Offset: 430
.Ltmp721:
    000001b0: 	ucomisd	0x10(%rsp), %xmm1
    000001b6: 	jp	.Ltmp728 # Offset: 438
    000001bc: 	jne	.Ltmp728 # Offset: 444
.Ltmp732:
    000001c2: 	addl	$0x1, %r12d
    000001c6: 	cmpl	%edi, %r12d
    000001c9: 	jl	.Ltmp729 # Offset: 457
.Ltmp720:
    000001cf: 	movq	%r14, %rdi
    000001d2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	je	.Ltmp730 # Offset: 492
.Ltmp733:
    000001f2: 	movq	-0x20(%rax), %rbp
    000001f6: 	callq	clock@PLT # Offset: 502
    000001fb: 	pxor	%xmm0, %xmm0
    000001ff: 	movq	%rax, end_time(%rip)
    00000206: 	movq	%rbp, %rdi
    00000209: 	subq	start_time(%rip), %rax
    00000210: 	cvtsi2sd	%rax, %xmm0
    00000215: 	divsd	DATAat0x53788(%rip), %xmm0
    0000021d: 	callq	_Z13record_resultdPKc # Offset: 541
    00000222: 	movq	0x30(%rsp), %rdi
    00000227: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 551
    0000022c: 	movq	0x58(%rsp), %rax
    00000231: 	subq	%fs:0x28, %rax
    0000023a: 	jne	.Ltmp731 # Offset: 570
    0000023c: 	addq	$0x68, %rsp
    00000240: 	popq	%rbx
    00000241: 	popq	%rbp
    00000242: 	popq	%r12
    00000244: 	popq	%r13
    00000246: 	popq	%r14
    00000248: 	popq	%r15
    0000024a: 	retq # Offset: 586
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp722:
    00000250: 	movq	%rbx, %rdx
    00000253: 	jmp	.Ltmp726 # Offset: 595
.Ltmp728:
    00000258: 	movl	current_test(%rip), %edx
    0000025e: 	movq	%r15, %rsi
    00000261: 	movl	$0x1, %edi
    00000266: 	xorl	%eax, %eax
    00000268: 	callq	__printf_chk@PLT # Offset: 616
    0000026d: 	movl	iterations(%rip), %edi
    00000273: 	jmp	.Ltmp732 # Offset: 627
.Ltmp714:
    00000278: 	movl	$0x1, %edi
    0000027d: 	movq	%rbx, %rdx
    00000280: 	jmp	.Ltmp718 # Offset: 640
.Ltmp730:
    00000285: 	movq	-0x8(%rdx), %rax
    00000289: 	addq	$0x200, %rax
    0000028f: 	jmp	.Ltmp733 # Offset: 655
.Ltmp712:
    00000294: 	pxor	%xmm4, %xmm4
    00000298: 	movsd	%xmm4, 0x18(%rsp)
    0000029e: 	movsd	%xmm4, 0x10(%rsp)
    000002a4: 	jmp	.Ltmp734 # Offset: 676
.Ltmp731:
    000002a9: 	callq	__stack_chk_fail@PLT # Offset: 681
    000002ae: 	endbr64
    000002b2: 	movq	%rax, %rbp
    000002b5: 	movq	0x30(%rsp), %rdi
    000002ba: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 698
    000002bf: 	movq	%rbp, %rdi
    000002c2: 	callq	_Unwind_Resume@PLT # Offset: 706
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_find_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_find_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x9fb0
  Size        : 0x2d6
  MaxSize     : 0x2e0
  Offset      : 0x9fb0
  Section     : .text
  Orc Section : .local.text._Z14test_find_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rcx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x68, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	leaq	0x28(%rsp), %rbx
    00000022: 	movq	%r8, 0x18(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movl	$0x0, 0x28(%rsp)
    0000003f: 	movq	$0x0, 0x30(%rsp)
    00000048: 	movq	%rbx, 0x38(%rsp)
    0000004d: 	movq	%rbx, 0x40(%rsp)
    00000052: 	movq	$0x0, 0x48(%rsp)
    0000005b: 	cmpq	%rsi, %rdi
    0000005e: 	je	.Ltmp735 # Offset: 94
    00000064: 	pxor	%xmm6, %xmm6
    00000068: 	movq	%rdi, %r13
    0000006b: 	movsd	%xmm6, 0x10(%rsp)
    00000071: 	movsd	%xmm6, (%rsp)
.Ltmp737:
    00000076: 	movq	%rbx, %r12
    00000079: 	movl	$0x1, %r14d
    0000007f: 	nop # Size: 1
.Ltmp742:
    00000080: 	movl	$0x28, %edi
    00000085: 	callq	_Znwm@PLT # Offset: 133
    0000008a: 	movsd	(%r13), %xmm0
    00000090: 	movq	%rax, %rsi
    00000093: 	movzbl	%r14b, %edi
    00000097: 	movq	%rbx, %rcx
    0000009a: 	movq	%r12, %rdx
    0000009d: 	addq	$0x8, %r13
    000000a1: 	movsd	%xmm0, 0x20(%rax)
    000000a6: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 166
    000000ab: 	movsd	(%rsp), %xmm4
    000000b0: 	addsd	-0x8(%r13), %xmm4
    000000b6: 	addq	$0x1, 0x48(%rsp)
    000000bc: 	movsd	%xmm4, (%rsp)
    000000c1: 	cmpq	%r13, 0x8(%rsp)
    000000c6: 	je	.Ltmp736 # Offset: 198
    000000c8: 	movq	0x30(%rsp), %r12
    000000cd: 	testq	%r12, %r12
    000000d0: 	je	.Ltmp737 # Offset: 208
    000000d2: 	movsd	(%r13), %xmm1
    000000d8: 	jmp	.Ltmp738 # Offset: 216
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp740:
    000000e0: 	movq	0x10(%r12), %rax
    000000e5: 	testq	%rax, %rax
    000000e8: 	je	.Ltmp739 # Offset: 232
.Ltmp741:
    000000ea: 	movq	%rax, %r12
.Ltmp738:
    000000ed: 	movsd	0x20(%r12), %xmm0
    000000f4: 	comisd	%xmm1, %xmm0
    000000f8: 	ja	.Ltmp740 # Offset: 248
    000000fa: 	movq	0x18(%r12), %rax
    000000ff: 	testq	%rax, %rax
    00000102: 	jne	.Ltmp741 # Offset: 258
.Ltmp739:
    00000104: 	movl	$0x1, %r14d
    0000010a: 	cmpq	%rbx, %r12
    0000010d: 	je	.Ltmp742 # Offset: 269
    00000113: 	comisd	%xmm1, %xmm0
    00000117: 	seta	%r14b
    0000011b: 	jmp	.Ltmp742 # Offset: 283
.Ltmp735:
    00000120: 	pxor	%xmm7, %xmm7
    00000124: 	movsd	%xmm7, 0x10(%rsp)
    0000012a: 	movsd	%xmm7, (%rsp)
.Ltmp736:
    0000012f: 	callq	clock@PLT # Offset: 303
    00000134: 	movl	iterations(%rip), %edi
    0000013a: 	xorl	%r12d, %r12d
    0000013d: 	leaq	DATAat0x52360(%rip), %r13
    00000144: 	movq	%rax, start_time(%rip)
    0000014b: 	testl	%edi, %edi
    0000014d: 	jle	.Ltmp743 # Offset: 333
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp752:
    00000158: 	pxor	%xmm2, %xmm2
    0000015c: 	cmpq	%rbp, %r15
    0000015f: 	je	.Ltmp744 # Offset: 351
    00000161: 	movq	0x30(%rsp), %rsi
    00000166: 	movsd	0x48(%rsp), %xmm3
    0000016c: 	movq	%r15, %rcx
    0000016f: 	pxor	%xmm2, %xmm2
    00000173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp750:
    00000178: 	addq	$0x8, %rcx
    0000017c: 	testq	%rsi, %rsi
    0000017f: 	je	.Ltmp745 # Offset: 383
    00000185: 	movsd	-0x8(%rcx), %xmm0
    0000018a: 	movq	%rsi, %rax
    0000018d: 	movq	%rbx, %rdx
    00000190: 	jmp	.Ltmp746 # Offset: 400
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp748:
    00000198: 	movq	%rax, %rdx
    0000019b: 	movq	0x10(%rax), %rax
    0000019f: 	testq	%rax, %rax
    000001a2: 	je	.Ltmp747 # Offset: 418
.Ltmp746:
    000001a4: 	comisd	0x20(%rax), %xmm0
    000001a9: 	jbe	.Ltmp748 # Offset: 425
    000001ab: 	movq	0x18(%rax), %rax
    000001af: 	testq	%rax, %rax
    000001b2: 	jne	.Ltmp746 # Offset: 434
.Ltmp747:
    000001b4: 	movapd	%xmm3, %xmm1
    000001b8: 	cmpq	%rbx, %rdx
    000001bb: 	je	.Ltmp749 # Offset: 443
    000001bd: 	movsd	0x20(%rdx), %xmm1
    000001c2: 	cmpnltsd	%xmm1, %xmm0
    000001c7: 	andpd	%xmm0, %xmm1
    000001cb: 	andnpd	%xmm3, %xmm0
    000001cf: 	orpd	%xmm0, %xmm1
.Ltmp749:
    000001d3: 	addsd	%xmm1, %xmm2
    000001d7: 	cmpq	%rcx, %rbp
    000001da: 	jne	.Ltmp750 # Offset: 474
.Ltmp744:
    000001dc: 	ucomisd	(%rsp), %xmm2
    000001e1: 	jp	.Ltmp751 # Offset: 481
    000001e7: 	jne	.Ltmp751 # Offset: 487
.Ltmp755:
    000001ed: 	addl	$0x1, %r12d
    000001f1: 	cmpl	%r12d, %edi
    000001f4: 	jg	.Ltmp752 # Offset: 500
.Ltmp743:
    000001fa: 	movq	0x18(%rsp), %rdi
    000001ff: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 511
    00000204: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000212: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000219: 	je	.Ltmp753 # Offset: 537
.Ltmp756:
    0000021f: 	movq	-0x20(%rax), %rbp
    00000223: 	callq	clock@PLT # Offset: 547
    00000228: 	pxor	%xmm0, %xmm0
    0000022c: 	movq	%rax, end_time(%rip)
    00000233: 	movq	%rbp, %rdi
    00000236: 	subq	start_time(%rip), %rax
    0000023d: 	cvtsi2sd	%rax, %xmm0
    00000242: 	divsd	DATAat0x53788(%rip), %xmm0
    0000024a: 	callq	_Z13record_resultdPKc # Offset: 586
    0000024f: 	movq	0x30(%rsp), %rdi
    00000254: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 596
    00000259: 	movq	0x58(%rsp), %rax
    0000025e: 	subq	%fs:0x28, %rax
    00000267: 	jne	.Ltmp754 # Offset: 615
    00000269: 	addq	$0x68, %rsp
    0000026d: 	popq	%rbx
    0000026e: 	popq	%rbp
    0000026f: 	popq	%r12
    00000271: 	popq	%r13
    00000273: 	popq	%r14
    00000275: 	popq	%r15
    00000277: 	retq # Offset: 631
    00000278: 	nopl	(%rax,%rax) # Size: 8
.Ltmp745:
    00000280: 	movapd	%xmm3, %xmm1
    00000284: 	jmp	.Ltmp749 # Offset: 644
.Ltmp751:
    00000289: 	movl	current_test(%rip), %edx
    0000028f: 	movq	%r13, %rsi
    00000292: 	movl	$0x1, %edi
    00000297: 	xorl	%eax, %eax
    00000299: 	callq	__printf_chk@PLT # Offset: 665
    0000029e: 	movl	iterations(%rip), %edi
    000002a4: 	jmp	.Ltmp755 # Offset: 676
.Ltmp753:
    000002a9: 	movq	-0x8(%rdx), %rax
    000002ad: 	addq	$0x200, %rax
    000002b3: 	jmp	.Ltmp756 # Offset: 691
.Ltmp754:
    000002b8: 	callq	__stack_chk_fail@PLT # Offset: 696
    000002bd: 	endbr64
    000002c1: 	movq	%rax, %rbp
    000002c4: 	movq	0x30(%rsp), %rdi
    000002c9: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 713
    000002ce: 	movq	%rbp, %rdi
    000002d1: 	callq	_Unwind_Resume@PLT # Offset: 721
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_find_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_popbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0xa290
  Size        : 0x35a
  MaxSize     : 0x360
  Offset      : 0xa290
  Section     : .text
  Orc Section : .local.text._Z12test_popbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, (%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	movabsq	$0x500000000, %rax
    00000040: 	divq	%rcx
    00000043: 	movq	%rax, 0x8(%rsp)
    00000048: 	cmpq	$0x3e8, %rax
    0000004e: 	ja	.Ltmp757 # Offset: 78
    00000054: 	cmpq	$0x3, %rax
    00000058: 	ja	.Ltmp758 # Offset: 88
    0000005e: 	movq	$0x0, 0x50(%rsp)
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	movq	$0x4, 0x8(%rsp)
    00000074: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp775:
    00000079: 	movq	0x8(%rsp), %rbx
    0000007e: 	leaq	0x40(%rsp), %rdi
    00000083: 	movq	%rbx, %rsi
    00000086: 	callq	_ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm # Offset: 134
    0000008b: 	movq	0x40(%rsp), %rdi
    00000090: 	movl	iterations(%rip), %eax
    00000096: 	movq	%rdi, 0x18(%rsp)
    0000009b: 	testl	%eax, %eax
    0000009d: 	jle	.Ltmp759 # Offset: 157
    000000a3: 	movq	%r12, %rdx
    000000a6: 	subq	(%rsp), %rdx
    000000aa: 	addq	$0x8, %rdi
    000000ae: 	movl	%ebx, 0x24(%rsp)
    000000b2: 	subq	$0x8, %rdx
    000000b6: 	movl	$0x0, 0x20(%rsp)
    000000be: 	pxor	%xmm3, %xmm3
    000000c2: 	notq	%rdx
    000000c5: 	movq	%rdi, 0x28(%rsp)
    000000ca: 	andq	$-0x8, %rdx
    000000ce: 	movsd	%xmm3, 0x10(%rsp)
    000000d4: 	movq	%rdx, 0x30(%rsp)
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp771:
    000000e0: 	movslq	0x20(%rsp), %rdx
    000000e5: 	movslq	%eax, %rcx
    000000e8: 	movq	0x18(%rsp), %r14
    000000ed: 	movq	%rdx, %rdi
    000000f0: 	addq	0x8(%rsp), %rdx
    000000f5: 	movq	%r14, %r13
    000000f8: 	subl	%edi, %eax
    000000fa: 	cmpq	%rcx, %rdx
    000000fd: 	cmovbl	0x24(%rsp), %eax
    00000102: 	movq	0x28(%rsp), %rdi
    00000107: 	subl	$0x1, %eax
    0000010a: 	leaq	(%rdi,%rax,8), %r15
    0000010e: 	nop # Size: 2
.Ltmp764:
    00000110: 	movl	$0x18, %edi
    00000115: 	callq	_Znwm@PLT # Offset: 277
    0000011a: 	pxor	%xmm1, %xmm1
    0000011e: 	movq	$0x0, 0x10(%rax)
    00000126: 	movq	%rax, %rbp
    00000129: 	movups	%xmm1, (%rax)
    0000012c: 	movq	(%rsp), %rax
    00000130: 	cmpq	%rax, %r12
    00000133: 	je	.Ltmp760 # Offset: 307
    00000135: 	movq	%rax, %rdx
    00000138: 	xorl	%esi, %esi
    0000013a: 	xorl	%eax, %eax
    0000013c: 	jmp	.Ltmp761 # Offset: 316
    0000013e: 	nop # Size: 2
.Ltmp762:
    00000140: 	movsd	-0x8(%rbx), %xmm0
    00000145: 	addq	$0x8, %rax
    00000149: 	movsd	%xmm0, -0x8(%rax)
    0000014e: 	movq	%rax, 0x8(%rbp)
    00000152: 	cmpq	%rbx, %r12
    00000155: 	je	.Ltmp760 # Offset: 341
.Ltmp763:
    00000157: 	movq	0x8(%rbp), %rax
    0000015b: 	movq	0x10(%rbp), %rsi
    0000015f: 	movq	%rbx, %rdx
.Ltmp761:
    00000162: 	leaq	0x8(%rdx), %rbx
    00000166: 	cmpq	%rax, %rsi
    00000169: 	jne	.Ltmp762 # Offset: 361
    0000016b: 	movq	%rbp, %rdi
    0000016e: 	callq	_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_ # Offset: 366
    00000173: 	cmpq	%rbx, %r12
    00000176: 	jne	.Ltmp763 # Offset: 374
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp760:
    00000180: 	movq	%rbp, (%r14)
    00000183: 	addq	$0x8, %r14
    00000187: 	cmpq	%r15, %r14
    0000018a: 	jne	.Ltmp764 # Offset: 394
    0000018c: 	callq	clock@PLT # Offset: 396
    00000191: 	movq	%rax, start_time(%rip)
    00000198: 	cmpq	(%rsp), %r12
    0000019c: 	je	.Ltmp765 # Offset: 412
    0000019e: 	movq	0x18(%rsp), %rsi
    000001a3: 	movq	0x30(%rsp), %rdi
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp767:
    000001b0: 	movq	(%rsi), %rdx
    000001b3: 	movq	0x8(%rdx), %rax
    000001b7: 	leaq	(%rax,%rdi), %rcx
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp766:
    000001c0: 	subq	$0x8, %rax
    000001c4: 	movq	%rax, 0x8(%rdx)
    000001c8: 	cmpq	%rax, %rcx
    000001cb: 	jne	.Ltmp766 # Offset: 459
    000001cd: 	addq	$0x8, %rsi
    000001d1: 	cmpq	%r15, %rsi
    000001d4: 	jne	.Ltmp767 # Offset: 468
.Ltmp765:
    000001d6: 	callq	clock@PLT # Offset: 470
    000001db: 	pxor	%xmm0, %xmm0
    000001df: 	movq	%rax, end_time(%rip)
    000001e6: 	subq	start_time(%rip), %rax
    000001ed: 	cvtsi2sd	%rax, %xmm0
    000001f2: 	divsd	DATAat0x53788(%rip), %xmm0
    000001fa: 	addsd	0x10(%rsp), %xmm0
    00000200: 	movsd	%xmm0, 0x10(%rsp)
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp770:
    00000210: 	movq	(%r13), %rbp
    00000214: 	testq	%rbp, %rbp
    00000217: 	je	.Ltmp768 # Offset: 535
    00000219: 	movq	(%rbp), %rdi
    0000021d: 	testq	%rdi, %rdi
    00000220: 	je	.Ltmp769 # Offset: 544
    00000222: 	movq	0x10(%rbp), %rsi
    00000226: 	subq	%rdi, %rsi
    00000229: 	callq	_ZdlPvm@PLT # Offset: 553
.Ltmp769:
    0000022e: 	movl	$0x18, %esi
    00000233: 	movq	%rbp, %rdi
    00000236: 	callq	_ZdlPvm@PLT # Offset: 566
.Ltmp768:
    0000023b: 	movq	$0x0, (%r13)
    00000243: 	addq	$0x8, %r13
    00000247: 	cmpq	%r15, %r13
    0000024a: 	jne	.Ltmp770 # Offset: 586
    0000024c: 	movl	0x8(%rsp), %edi
    00000250: 	movl	iterations(%rip), %eax
    00000256: 	addl	%edi, 0x20(%rsp)
    0000025a: 	movl	0x20(%rsp), %edi
    0000025e: 	cmpl	%edi, %eax
    00000260: 	jg	.Ltmp771 # Offset: 608
.Ltmp777:
    00000266: 	movq	0x38(%rsp), %rdi
    0000026b: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 619
    00000270: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000277: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000027e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000285: 	je	.Ltmp772 # Offset: 645
.Ltmp776:
    0000028b: 	movq	-0x20(%rax), %rdi
    0000028f: 	movsd	0x10(%rsp), %xmm0
    00000295: 	callq	_Z13record_resultdPKc # Offset: 661
    0000029a: 	cmpq	$0x0, 0x18(%rsp)
    000002a0: 	je	.Ltmp773 # Offset: 672
    000002a2: 	movq	0x58(%rsp), %rax
    000002a7: 	subq	%fs:0x28, %rax
    000002b0: 	jne	.Ltmp774 # Offset: 688
    000002b2: 	movq	0x50(%rsp), %rsi
    000002b7: 	movq	0x18(%rsp), %rdi
    000002bc: 	addq	$0x68, %rsp
    000002c0: 	popq	%rbx
    000002c1: 	popq	%rbp
    000002c2: 	subq	%rdi, %rsi
    000002c5: 	popq	%r12
    000002c7: 	popq	%r13
    000002c9: 	popq	%r14
    000002cb: 	popq	%r15
    000002cd: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 717
.Ltmp773:
    000002d2: 	movq	0x58(%rsp), %rax
    000002d7: 	subq	%fs:0x28, %rax
    000002e0: 	jne	.Ltmp774 # Offset: 736
    000002e2: 	addq	$0x68, %rsp
    000002e6: 	popq	%rbx
    000002e7: 	popq	%rbp
    000002e8: 	popq	%r12
    000002ea: 	popq	%r13
    000002ec: 	popq	%r14
    000002ee: 	popq	%r15
    000002f0: 	retq # Offset: 752
.Ltmp757:
    000002f1: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp758:
    000002fa: 	movq	$0x0, 0x50(%rsp)
    00000303: 	pxor	%xmm0, %xmm0
    00000307: 	movaps	%xmm0, 0x40(%rsp)
    0000030c: 	jmp	.Ltmp775 # Offset: 780
.Ltmp772:
    00000311: 	movq	-0x8(%rdx), %rax
    00000315: 	addq	$0x200, %rax
    0000031b: 	jmp	.Ltmp776 # Offset: 795
.Ltmp759:
    00000320: 	pxor	%xmm4, %xmm4
    00000324: 	movsd	%xmm4, 0x10(%rsp)
    0000032a: 	jmp	.Ltmp777 # Offset: 810
.Ltmp774:
    0000032f: 	callq	__stack_chk_fail@PLT # Offset: 815
    00000334: 	endbr64
    00000338: 	movq	%rax, %rbp
    0000033b: 	movq	0x40(%rsp), %rdi
    00000340: 	movq	0x50(%rsp), %rsi
    00000345: 	subq	%rdi, %rsi
    00000348: 	testq	%rdi, %rdi
    0000034b: 	je	.Ltmp778 # Offset: 843
    0000034d: 	callq	_ZdlPvm@PLT # Offset: 845
.Ltmp778:
    00000352: 	movq	%rbp, %rdi
    00000355: 	callq	_Unwind_Resume@PLT # Offset: 853
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_popbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_clearall_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0xa5f0
  Size        : 0x4a1
  MaxSize     : 0x4b0
  Offset      : 0xa5f0
  Section     : .text
  Orc Section : .local.text._Z22test_clearall_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	%rdx, 0x68(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x30(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x88(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	movabsq	$0x500000000, %rax
    00000047: 	divq	%rcx
    0000004a: 	movq	%rax, 0x38(%rsp)
    0000004f: 	cmpq	$0x3e8, %rax
    00000055: 	ja	.Ltmp779 # Offset: 85
    0000005b: 	cmpq	$0x3, %rax
    0000005f: 	ja	.Ltmp780 # Offset: 95
    00000065: 	movq	$0x0, 0x80(%rsp)
    00000071: 	pxor	%xmm0, %xmm0
    00000075: 	movq	$0x4, 0x38(%rsp)
    0000007e: 	movaps	%xmm0, 0x70(%rsp)
.Ltmp803:
    00000083: 	movq	0x38(%rsp), %rbx
    00000088: 	leaq	0x70(%rsp), %rdi
    0000008d: 	movq	%rbx, %rsi
    00000090: 	callq	_ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm # Offset: 144
    00000095: 	movq	0x70(%rsp), %rdx
    0000009a: 	movl	iterations(%rip), %eax
    000000a0: 	movq	%rdx, 0x40(%rsp)
    000000a5: 	testl	%eax, %eax
    000000a7: 	jle	.Ltmp781 # Offset: 167
    000000ad: 	leaq	0x8(%rdx), %rsi
    000000b1: 	movl	%ebx, 0x5c(%rsp)
    000000b5: 	pxor	%xmm4, %xmm4
    000000b9: 	movl	$0x0, 0x58(%rsp)
    000000c1: 	movq	%rsi, 0x60(%rsp)
    000000c6: 	movsd	%xmm4, 0x50(%rsp)
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp796:
    000000d0: 	movslq	0x58(%rsp), %rdx
    000000d5: 	movslq	%eax, %rcx
    000000d8: 	movq	%rdx, %rsi
    000000db: 	addq	0x38(%rsp), %rdx
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x5c(%rsp), %eax
    000000ea: 	movq	0x60(%rsp), %rsi
    000000ef: 	movq	0x40(%rsp), %rdx
    000000f4: 	subl	$0x1, %eax
    000000f7: 	leaq	(%rsi,%rax,8), %rax
    000000fb: 	movq	%rdx, 0x48(%rsp)
    00000100: 	movq	%rax, 0x10(%rsp)
    00000105: 	movq	%rdx, 0x8(%rsp)
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp790:
    00000110: 	movl	$0x18, %edi
    00000115: 	callq	_Znwm@PLT # Offset: 277
    0000011a: 	pxor	%xmm2, %xmm2
    0000011e: 	movq	$0x0, 0x10(%rax)
    00000126: 	xorl	%ecx, %ecx
    00000128: 	xorl	%ebp, %ebp
    0000012a: 	movq	%rax, %r12
    0000012d: 	movups	%xmm2, (%rax)
    00000130: 	movq	0x30(%rsp), %rax
    00000135: 	movq	%rax, %rbx
    00000138: 	cmpq	%rax, %r13
    0000013b: 	jne	.Ltmp782 # Offset: 315
    0000013d: 	jmp	.Ltmp783 # Offset: 317
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp784:
    00000148: 	movsd	-0x8(%rbx), %xmm0
    0000014d: 	addq	$0x8, %rbp
    00000151: 	movsd	%xmm0, -0x8(%rbp)
    00000156: 	movq	%rbp, 0x8(%r12)
    0000015b: 	cmpq	%rbx, %r13
    0000015e: 	je	.Ltmp783 # Offset: 350
.Ltmp782:
    00000164: 	addq	$0x8, %rbx
    00000168: 	cmpq	%rbp, %rcx
    0000016b: 	jne	.Ltmp784 # Offset: 363
    0000016d: 	movabsq	$0xfffffffffffffff, %rax
    00000177: 	movq	(%r12), %r15
    0000017b: 	subq	%r15, %rcx
    0000017e: 	movq	%rcx, %rbp
    00000181: 	movq	%rcx, %r14
    00000184: 	sarq	$0x3, %rbp
    00000188: 	cmpq	%rax, %rbp
    0000018b: 	je	.Ltmp785 # Offset: 395
    00000191: 	testq	%rbp, %rbp
    00000194: 	movl	$0x1, %eax
    00000199: 	cmovneq	%rbp, %rax
    0000019d: 	addq	%rax, %rbp
    000001a0: 	jb	.Ltmp786 # Offset: 416
    000001a6: 	testq	%rbp, %rbp
    000001a9: 	je	.Ltmp787 # Offset: 425
    000001af: 	movabsq	$0xfffffffffffffff, %rax
    000001b9: 	cmpq	%rax, %rbp
    000001bc: 	cmovaq	%rax, %rbp
    000001c0: 	shlq	$0x3, %rbp
.Ltmp806:
    000001c4: 	movq	%rbp, %rdi
    000001c7: 	callq	_Znwm@PLT # Offset: 455
    000001cc: 	movq	%rax, %rdi
    000001cf: 	leaq	(%rax,%rbp), %rcx
.Ltmp801:
    000001d3: 	movsd	-0x8(%rbx), %xmm0
    000001d8: 	leaq	0x8(%rdi,%r14), %rbp
    000001dd: 	movq	%rbp, %xmm1
    000001e2: 	movsd	%xmm0, (%rdi,%r14)
    000001e8: 	movq	%rdi, %xmm0
    000001ed: 	punpcklqdq	%xmm1, %xmm0
    000001f1: 	testq	%r14, %r14
    000001f4: 	jg	.Ltmp788 # Offset: 500
    000001fa: 	testq	%r15, %r15
    000001fd: 	jne	.Ltmp789 # Offset: 509
.Ltmp800:
    00000203: 	movq	%rcx, 0x10(%r12)
    00000208: 	movups	%xmm0, (%r12)
    0000020d: 	cmpq	%rbx, %r13
    00000210: 	jne	.Ltmp782 # Offset: 528
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp783:
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	movq	%r12, (%rax)
    00000228: 	addq	$0x8, %rax
    0000022c: 	movq	%rax, 0x8(%rsp)
    00000231: 	cmpq	0x10(%rsp), %rax
    00000236: 	jne	.Ltmp790 # Offset: 566
    0000023c: 	callq	clock@PLT # Offset: 572
    00000241: 	movq	0x10(%rsp), %rsi
    00000246: 	movq	%rax, start_time(%rip)
    0000024d: 	movq	0x40(%rsp), %rax
    00000252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp792:
    00000258: 	movq	(%rax), %rdx
    0000025b: 	movq	(%rdx), %rcx
    0000025e: 	cmpq	0x8(%rdx), %rcx
    00000262: 	je	.Ltmp791 # Offset: 610
    00000264: 	movq	%rcx, 0x8(%rdx)
.Ltmp791:
    00000268: 	addq	$0x8, %rax
    0000026c: 	cmpq	%rsi, %rax
    0000026f: 	jne	.Ltmp792 # Offset: 623
    00000271: 	callq	clock@PLT # Offset: 625
    00000276: 	pxor	%xmm0, %xmm0
    0000027a: 	movq	0x48(%rsp), %rbx
    0000027f: 	movq	0x10(%rsp), %r12
    00000284: 	movq	%rax, end_time(%rip)
    0000028b: 	subq	start_time(%rip), %rax
    00000292: 	cvtsi2sd	%rax, %xmm0
    00000297: 	divsd	DATAat0x53788(%rip), %xmm0
    0000029f: 	addsd	0x50(%rsp), %xmm0
    000002a5: 	movsd	%xmm0, 0x50(%rsp)
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp795:
    000002b0: 	movq	(%rbx), %rbp
    000002b3: 	testq	%rbp, %rbp
    000002b6: 	je	.Ltmp793 # Offset: 694
    000002b8: 	movq	(%rbp), %rdi
    000002bc: 	testq	%rdi, %rdi
    000002bf: 	je	.Ltmp794 # Offset: 703
    000002c1: 	movq	0x10(%rbp), %rsi
    000002c5: 	subq	%rdi, %rsi
    000002c8: 	callq	_ZdlPvm@PLT # Offset: 712
.Ltmp794:
    000002cd: 	movl	$0x18, %esi
    000002d2: 	movq	%rbp, %rdi
    000002d5: 	callq	_ZdlPvm@PLT # Offset: 725
.Ltmp793:
    000002da: 	movq	$0x0, (%rbx)
    000002e1: 	addq	$0x8, %rbx
    000002e5: 	cmpq	%r12, %rbx
    000002e8: 	jne	.Ltmp795 # Offset: 744
    000002ea: 	movl	0x38(%rsp), %edx
    000002ee: 	movl	iterations(%rip), %eax
    000002f4: 	addl	%edx, 0x58(%rsp)
    000002f8: 	movl	0x58(%rsp), %edx
    000002fc: 	cmpl	%edx, %eax
    000002fe: 	jg	.Ltmp796 # Offset: 766
.Ltmp805:
    00000304: 	movq	0x68(%rsp), %rdi
    00000309: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 777
    0000030e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000315: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000031c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000323: 	je	.Ltmp797 # Offset: 803
.Ltmp804:
    00000329: 	movq	-0x20(%rax), %rdi
    0000032d: 	movsd	0x50(%rsp), %xmm0
    00000333: 	callq	_Z13record_resultdPKc # Offset: 819
    00000338: 	cmpq	$0x0, 0x40(%rsp)
    0000033e: 	je	.Ltmp798 # Offset: 830
    00000344: 	movq	0x88(%rsp), %rax
    0000034c: 	subq	%fs:0x28, %rax
    00000355: 	jne	.Ltmp799 # Offset: 853
    0000035b: 	movq	0x80(%rsp), %rsi
    00000363: 	movq	0x40(%rsp), %rdi
    00000368: 	addq	$0x98, %rsp
    0000036f: 	popq	%rbx
    00000370: 	popq	%rbp
    00000371: 	subq	%rdi, %rsi
    00000374: 	popq	%r12
    00000376: 	popq	%r13
    00000378: 	popq	%r14
    0000037a: 	popq	%r15
    0000037c: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 892
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp788:
    00000388: 	movq	%r15, %rsi
    0000038b: 	movq	%r14, %rdx
    0000038e: 	movq	%rcx, 0x18(%rsp)
    00000393: 	movaps	%xmm0, 0x20(%rsp)
    00000398: 	callq	memmove@PLT # Offset: 920
    0000039d: 	movq	0x10(%r12), %rsi
    000003a2: 	movq	0x18(%rsp), %rcx
    000003a7: 	movdqa	0x20(%rsp), %xmm0
    000003ad: 	subq	%r15, %rsi
.Ltmp802:
    000003b0: 	movq	%r15, %rdi
    000003b3: 	movq	%rcx, 0x18(%rsp)
    000003b8: 	movaps	%xmm0, 0x20(%rsp)
    000003bd: 	callq	_ZdlPvm@PLT # Offset: 957
    000003c2: 	movdqa	0x20(%rsp), %xmm0
    000003c8: 	movq	0x18(%rsp), %rcx
    000003cd: 	jmp	.Ltmp800 # Offset: 973
    000003d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp787:
    000003d8: 	xorl	%ecx, %ecx
    000003da: 	xorl	%edi, %edi
    000003dc: 	jmp	.Ltmp801 # Offset: 988
    000003e1: 	nopl	(%rax) # Size: 7
.Ltmp789:
    000003e8: 	movq	0x10(%r12), %rsi
    000003ed: 	subq	%r15, %rsi
    000003f0: 	jmp	.Ltmp802 # Offset: 1008
.Ltmp779:
    000003f2: 	movq	$0x3e8, 0x38(%rsp)
.Ltmp780:
    000003fb: 	movq	$0x0, 0x80(%rsp)
    00000407: 	pxor	%xmm0, %xmm0
    0000040b: 	movaps	%xmm0, 0x70(%rsp)
    00000410: 	jmp	.Ltmp803 # Offset: 1040
.Ltmp798:
    00000415: 	movq	0x88(%rsp), %rax
    0000041d: 	subq	%fs:0x28, %rax
    00000426: 	jne	.Ltmp799 # Offset: 1062
    00000428: 	addq	$0x98, %rsp
    0000042f: 	popq	%rbx
    00000430: 	popq	%rbp
    00000431: 	popq	%r12
    00000433: 	popq	%r13
    00000435: 	popq	%r14
    00000437: 	popq	%r15
    00000439: 	retq # Offset: 1081
.Ltmp797:
    0000043a: 	movq	-0x8(%rdx), %rax
    0000043e: 	addq	$0x200, %rax
    00000444: 	jmp	.Ltmp804 # Offset: 1092
.Ltmp781:
    00000449: 	pxor	%xmm5, %xmm5
    0000044d: 	movsd	%xmm5, 0x50(%rsp)
    00000453: 	jmp	.Ltmp805 # Offset: 1107
.Ltmp786:
    00000458: 	movabsq	$0x7ffffffffffffff8, %rbp
    00000462: 	jmp	.Ltmp806 # Offset: 1122
.Ltmp785:
    00000467: 	leaq	DATAat0x522f5(%rip), %rdi
    0000046e: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1134
.Ltmp799:
    00000473: 	callq	__stack_chk_fail@PLT # Offset: 1139
    00000478: 	endbr64
    0000047c: 	movq	%rax, %rbp
    0000047f: 	movq	0x70(%rsp), %rdi
    00000484: 	movq	0x80(%rsp), %rsi
    0000048c: 	subq	%rdi, %rsi
    0000048f: 	testq	%rdi, %rdi
    00000492: 	je	.Ltmp807 # Offset: 1170
    00000494: 	callq	_ZdlPvm@PLT # Offset: 1172
.Ltmp807:
    00000499: 	movq	%rbp, %rdi
    0000049c: 	callq	_Unwind_Resume@PLT # Offset: 1180
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_clearall_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_eraseall_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0xaaa0
  Size        : 0x4b9
  MaxSize     : 0x4c0
  Offset      : 0xaaa0
  Section     : .text
  Orc Section : .local.text._Z22test_eraseall_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	%rdx, 0x68(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x30(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x88(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	movabsq	$0x500000000, %rax
    00000047: 	divq	%rcx
    0000004a: 	movq	%rax, 0x38(%rsp)
    0000004f: 	cmpq	$0x3e8, %rax
    00000055: 	ja	.Ltmp808 # Offset: 85
    0000005b: 	cmpq	$0x3, %rax
    0000005f: 	ja	.Ltmp809 # Offset: 95
    00000065: 	movq	$0x0, 0x80(%rsp)
    00000071: 	pxor	%xmm0, %xmm0
    00000075: 	movq	$0x4, 0x38(%rsp)
    0000007e: 	movaps	%xmm0, 0x70(%rsp)
.Ltmp833:
    00000083: 	movq	0x38(%rsp), %rbx
    00000088: 	leaq	0x70(%rsp), %rdi
    0000008d: 	movq	%rbx, %rsi
    00000090: 	callq	_ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm # Offset: 144
    00000095: 	movq	0x70(%rsp), %rdx
    0000009a: 	movl	iterations(%rip), %eax
    000000a0: 	movq	%rdx, 0x40(%rsp)
    000000a5: 	testl	%eax, %eax
    000000a7: 	jle	.Ltmp810 # Offset: 167
    000000ad: 	addq	$0x8, %rdx
    000000b1: 	movl	%ebx, 0x5c(%rsp)
    000000b5: 	pxor	%xmm4, %xmm4
    000000b9: 	movl	$0x0, 0x58(%rsp)
    000000c1: 	movq	%rdx, 0x60(%rsp)
    000000c6: 	movsd	%xmm4, 0x50(%rsp)
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp825:
    000000d0: 	movslq	0x58(%rsp), %rdx
    000000d5: 	movslq	%eax, %rcx
    000000d8: 	movq	%rdx, %rsi
    000000db: 	addq	0x38(%rsp), %rdx
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x5c(%rsp), %eax
    000000ea: 	movq	0x60(%rsp), %rsi
    000000ef: 	movq	0x40(%rsp), %rdx
    000000f4: 	subl	$0x1, %eax
    000000f7: 	leaq	(%rsi,%rax,8), %rax
    000000fb: 	movq	%rdx, 0x48(%rsp)
    00000100: 	movq	%rax, 0x8(%rsp)
    00000105: 	movq	%rdx, 0x10(%rsp)
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp819:
    00000110: 	movl	$0x18, %edi
    00000115: 	callq	_Znwm@PLT # Offset: 277
    0000011a: 	pxor	%xmm2, %xmm2
    0000011e: 	movq	$0x0, 0x10(%rax)
    00000126: 	xorl	%ecx, %ecx
    00000128: 	xorl	%ebp, %ebp
    0000012a: 	movq	%rax, %r12
    0000012d: 	movups	%xmm2, (%rax)
    00000130: 	movq	0x30(%rsp), %rax
    00000135: 	movq	%rax, %rbx
    00000138: 	cmpq	%rax, %r13
    0000013b: 	jne	.Ltmp811 # Offset: 315
    0000013d: 	jmp	.Ltmp812 # Offset: 317
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp813:
    00000148: 	movsd	-0x8(%rbx), %xmm0
    0000014d: 	addq	$0x8, %rbp
    00000151: 	movsd	%xmm0, -0x8(%rbp)
    00000156: 	movq	%rbp, 0x8(%r12)
    0000015b: 	cmpq	%rbx, %r13
    0000015e: 	je	.Ltmp812 # Offset: 350
.Ltmp811:
    00000164: 	addq	$0x8, %rbx
    00000168: 	cmpq	%rbp, %rcx
    0000016b: 	jne	.Ltmp813 # Offset: 363
    0000016d: 	movabsq	$0xfffffffffffffff, %rax
    00000177: 	movq	(%r12), %r15
    0000017b: 	subq	%r15, %rcx
    0000017e: 	movq	%rcx, %rbp
    00000181: 	movq	%rcx, %r14
    00000184: 	sarq	$0x3, %rbp
    00000188: 	cmpq	%rax, %rbp
    0000018b: 	je	.Ltmp814 # Offset: 395
    00000191: 	testq	%rbp, %rbp
    00000194: 	movl	$0x1, %eax
    00000199: 	cmovneq	%rbp, %rax
    0000019d: 	addq	%rax, %rbp
    000001a0: 	jb	.Ltmp815 # Offset: 416
    000001a6: 	testq	%rbp, %rbp
    000001a9: 	je	.Ltmp816 # Offset: 425
    000001af: 	movabsq	$0xfffffffffffffff, %rax
    000001b9: 	cmpq	%rax, %rbp
    000001bc: 	cmovaq	%rax, %rbp
    000001c0: 	shlq	$0x3, %rbp
.Ltmp836:
    000001c4: 	movq	%rbp, %rdi
    000001c7: 	callq	_Znwm@PLT # Offset: 455
    000001cc: 	movq	%rax, %rdi
    000001cf: 	leaq	(%rax,%rbp), %rcx
.Ltmp830:
    000001d3: 	movsd	-0x8(%rbx), %xmm0
    000001d8: 	leaq	0x8(%rdi,%r14), %rbp
    000001dd: 	movq	%rbp, %xmm1
    000001e2: 	movsd	%xmm0, (%rdi,%r14)
    000001e8: 	movq	%rdi, %xmm0
    000001ed: 	punpcklqdq	%xmm1, %xmm0
    000001f1: 	testq	%r14, %r14
    000001f4: 	jg	.Ltmp817 # Offset: 500
    000001fa: 	testq	%r15, %r15
    000001fd: 	jne	.Ltmp818 # Offset: 509
.Ltmp829:
    00000203: 	movq	%rcx, 0x10(%r12)
    00000208: 	movups	%xmm0, (%r12)
    0000020d: 	cmpq	%rbx, %r13
    00000210: 	jne	.Ltmp811 # Offset: 528
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp812:
    00000220: 	movq	0x10(%rsp), %rax
    00000225: 	movq	%r12, (%rax)
    00000228: 	addq	$0x8, %rax
    0000022c: 	movq	%rax, 0x10(%rsp)
    00000231: 	cmpq	0x8(%rsp), %rax
    00000236: 	jne	.Ltmp819 # Offset: 566
    0000023c: 	callq	clock@PLT # Offset: 572
    00000241: 	movq	%rax, start_time(%rip)
    00000248: 	movq	0x40(%rsp), %rax
    0000024d: 	nopl	(%rax) # Size: 3
.Ltmp821:
    00000250: 	movq	(%rax), %rdx
    00000253: 	movq	(%rdx), %rcx
    00000256: 	cmpq	%rcx, 0x8(%rdx)
    0000025a: 	je	.Ltmp820 # Offset: 602
    00000260: 	movq	%rcx, 0x8(%rdx)
    00000264: 	addq	$0x8, %rax
    00000268: 	cmpq	0x8(%rsp), %rax
    0000026d: 	jne	.Ltmp821 # Offset: 621
.Ltmp831:
    0000026f: 	callq	clock@PLT # Offset: 623
    00000274: 	pxor	%xmm0, %xmm0
    00000278: 	movq	0x48(%rsp), %rbx
    0000027d: 	movq	0x8(%rsp), %r12
    00000282: 	movq	%rax, end_time(%rip)
    00000289: 	subq	start_time(%rip), %rax
    00000290: 	cvtsi2sd	%rax, %xmm0
    00000295: 	divsd	DATAat0x53788(%rip), %xmm0
    0000029d: 	addsd	0x50(%rsp), %xmm0
    000002a3: 	movsd	%xmm0, 0x50(%rsp)
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp824:
    000002b0: 	movq	(%rbx), %rbp
    000002b3: 	testq	%rbp, %rbp
    000002b6: 	je	.Ltmp822 # Offset: 694
    000002b8: 	movq	(%rbp), %rdi
    000002bc: 	testq	%rdi, %rdi
    000002bf: 	je	.Ltmp823 # Offset: 703
    000002c1: 	movq	0x10(%rbp), %rsi
    000002c5: 	subq	%rdi, %rsi
    000002c8: 	callq	_ZdlPvm@PLT # Offset: 712
.Ltmp823:
    000002cd: 	movl	$0x18, %esi
    000002d2: 	movq	%rbp, %rdi
    000002d5: 	callq	_ZdlPvm@PLT # Offset: 725
.Ltmp822:
    000002da: 	movq	$0x0, (%rbx)
    000002e1: 	addq	$0x8, %rbx
    000002e5: 	cmpq	%r12, %rbx
    000002e8: 	jne	.Ltmp824 # Offset: 744
    000002ea: 	movl	0x38(%rsp), %edx
    000002ee: 	movl	iterations(%rip), %eax
    000002f4: 	addl	%edx, 0x58(%rsp)
    000002f8: 	movl	0x58(%rsp), %edx
    000002fc: 	cmpl	%edx, %eax
    000002fe: 	jg	.Ltmp825 # Offset: 766
.Ltmp835:
    00000304: 	movq	0x68(%rsp), %rdi
    00000309: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 777
    0000030e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000315: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000031c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000323: 	je	.Ltmp826 # Offset: 803
.Ltmp834:
    00000329: 	movq	-0x20(%rax), %rdi
    0000032d: 	movsd	0x50(%rsp), %xmm0
    00000333: 	callq	_Z13record_resultdPKc # Offset: 819
    00000338: 	cmpq	$0x0, 0x40(%rsp)
    0000033e: 	je	.Ltmp827 # Offset: 830
    00000344: 	movq	0x88(%rsp), %rax
    0000034c: 	subq	%fs:0x28, %rax
    00000355: 	jne	.Ltmp828 # Offset: 853
    0000035b: 	movq	0x80(%rsp), %rsi
    00000363: 	movq	0x40(%rsp), %rdi
    00000368: 	addq	$0x98, %rsp
    0000036f: 	popq	%rbx
    00000370: 	popq	%rbp
    00000371: 	subq	%rdi, %rsi
    00000374: 	popq	%r12
    00000376: 	popq	%r13
    00000378: 	popq	%r14
    0000037a: 	popq	%r15
    0000037c: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 892
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp817:
    00000388: 	movq	%r15, %rsi
    0000038b: 	movq	%r14, %rdx
    0000038e: 	movq	%rcx, 0x18(%rsp)
    00000393: 	movaps	%xmm0, 0x20(%rsp)
    00000398: 	callq	memmove@PLT # Offset: 920
    0000039d: 	movq	0x10(%r12), %rsi
    000003a2: 	movq	0x18(%rsp), %rcx
    000003a7: 	movdqa	0x20(%rsp), %xmm0
    000003ad: 	subq	%r15, %rsi
.Ltmp832:
    000003b0: 	movq	%r15, %rdi
    000003b3: 	movq	%rcx, 0x18(%rsp)
    000003b8: 	movaps	%xmm0, 0x20(%rsp)
    000003bd: 	callq	_ZdlPvm@PLT # Offset: 957
    000003c2: 	movdqa	0x20(%rsp), %xmm0
    000003c8: 	movq	0x18(%rsp), %rcx
    000003cd: 	jmp	.Ltmp829 # Offset: 973
    000003d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp816:
    000003d8: 	xorl	%ecx, %ecx
    000003da: 	xorl	%edi, %edi
    000003dc: 	jmp	.Ltmp830 # Offset: 988
    000003e1: 	nopl	(%rax) # Size: 7
.Ltmp820:
    000003e8: 	addq	$0x8, %rax
    000003ec: 	cmpq	0x8(%rsp), %rax
    000003f1: 	jne	.Ltmp821 # Offset: 1009
    000003f7: 	jmp	.Ltmp831 # Offset: 1015
    000003fc: 	nopl	(%rax) # Size: 4
.Ltmp818:
    00000400: 	movq	0x10(%r12), %rsi
    00000405: 	subq	%r15, %rsi
    00000408: 	jmp	.Ltmp832 # Offset: 1032
.Ltmp808:
    0000040a: 	movq	$0x3e8, 0x38(%rsp)
.Ltmp809:
    00000413: 	movq	$0x0, 0x80(%rsp)
    0000041f: 	pxor	%xmm0, %xmm0
    00000423: 	movaps	%xmm0, 0x70(%rsp)
    00000428: 	jmp	.Ltmp833 # Offset: 1064
.Ltmp827:
    0000042d: 	movq	0x88(%rsp), %rax
    00000435: 	subq	%fs:0x28, %rax
    0000043e: 	jne	.Ltmp828 # Offset: 1086
    00000440: 	addq	$0x98, %rsp
    00000447: 	popq	%rbx
    00000448: 	popq	%rbp
    00000449: 	popq	%r12
    0000044b: 	popq	%r13
    0000044d: 	popq	%r14
    0000044f: 	popq	%r15
    00000451: 	retq # Offset: 1105
.Ltmp826:
    00000452: 	movq	-0x8(%rdx), %rax
    00000456: 	addq	$0x200, %rax
    0000045c: 	jmp	.Ltmp834 # Offset: 1116
.Ltmp810:
    00000461: 	pxor	%xmm5, %xmm5
    00000465: 	movsd	%xmm5, 0x50(%rsp)
    0000046b: 	jmp	.Ltmp835 # Offset: 1131
.Ltmp815:
    00000470: 	movabsq	$0x7ffffffffffffff8, %rbp
    0000047a: 	jmp	.Ltmp836 # Offset: 1146
.Ltmp814:
    0000047f: 	leaq	DATAat0x522f5(%rip), %rdi
    00000486: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1158
.Ltmp828:
    0000048b: 	callq	__stack_chk_fail@PLT # Offset: 1163
    00000490: 	endbr64
    00000494: 	movq	%rax, %rbp
    00000497: 	movq	0x70(%rsp), %rdi
    0000049c: 	movq	0x80(%rsp), %rsi
    000004a4: 	subq	%rdi, %rsi
    000004a7: 	testq	%rdi, %rdi
    000004aa: 	je	.Ltmp837 # Offset: 1194
    000004ac: 	callq	_ZdlPvm@PLT # Offset: 1196
.Ltmp837:
    000004b1: 	movq	%rbp, %rdi
    000004b4: 	callq	_Unwind_Resume@PLT # Offset: 1204
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_eraseall_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_delete_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0xaf60
  Size        : 0x479
  MaxSize     : 0x480
  Offset      : 0xaf60
  Section     : .text
  Orc Section : .local.text._Z20test_delete_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	%rdx, 0x68(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x30(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x88(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	movabsq	$0x500000000, %rax
    00000047: 	divq	%rcx
    0000004a: 	movq	%rax, 0x38(%rsp)
    0000004f: 	cmpq	$0x3e8, %rax
    00000055: 	ja	.Ltmp838 # Offset: 85
    0000005b: 	cmpq	$0x3, %rax
    0000005f: 	ja	.Ltmp839 # Offset: 95
    00000065: 	movq	$0x0, 0x80(%rsp)
    00000071: 	pxor	%xmm0, %xmm0
    00000075: 	movq	$0x4, 0x38(%rsp)
    0000007e: 	movaps	%xmm0, 0x70(%rsp)
.Ltmp860:
    00000083: 	movq	0x38(%rsp), %rbx
    00000088: 	leaq	0x70(%rsp), %rdi
    0000008d: 	movq	%rbx, %rsi
    00000090: 	callq	_ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm # Offset: 144
    00000095: 	movq	0x70(%rsp), %rdx
    0000009a: 	movl	iterations(%rip), %eax
    000000a0: 	movq	%rdx, 0x50(%rsp)
    000000a5: 	testl	%eax, %eax
    000000a7: 	jle	.Ltmp840 # Offset: 167
    000000ad: 	addq	$0x8, %rdx
    000000b1: 	movl	%ebx, 0x5c(%rsp)
    000000b5: 	pxor	%xmm4, %xmm4
    000000b9: 	movl	$0x0, 0x58(%rsp)
    000000c1: 	movq	%rdx, 0x60(%rsp)
    000000c6: 	movsd	%xmm4, 0x40(%rsp)
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp853:
    000000d0: 	movslq	0x58(%rsp), %rdx
    000000d5: 	movslq	%eax, %rcx
    000000d8: 	movq	%rdx, %rsi
    000000db: 	addq	0x38(%rsp), %rdx
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x5c(%rsp), %eax
    000000ea: 	movq	0x60(%rsp), %rsi
    000000ef: 	movq	0x50(%rsp), %rdx
    000000f4: 	subl	$0x1, %eax
    000000f7: 	leaq	(%rsi,%rax,8), %rax
    000000fb: 	movq	%rdx, 0x48(%rsp)
    00000100: 	movq	%rax, 0x28(%rsp)
    00000105: 	movq	%rdx, 0x8(%rsp)
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp849:
    00000110: 	movl	$0x18, %edi
    00000115: 	callq	_Znwm@PLT # Offset: 277
    0000011a: 	pxor	%xmm2, %xmm2
    0000011e: 	movq	$0x0, 0x10(%rax)
    00000126: 	xorl	%ecx, %ecx
    00000128: 	xorl	%ebp, %ebp
    0000012a: 	movq	%rax, %r12
    0000012d: 	movups	%xmm2, (%rax)
    00000130: 	movq	0x30(%rsp), %rax
    00000135: 	movq	%rax, %rbx
    00000138: 	cmpq	%rax, %r13
    0000013b: 	jne	.Ltmp841 # Offset: 315
    0000013d: 	jmp	.Ltmp842 # Offset: 317
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp843:
    00000148: 	movsd	-0x8(%rbx), %xmm0
    0000014d: 	addq	$0x8, %rbp
    00000151: 	movsd	%xmm0, -0x8(%rbp)
    00000156: 	movq	%rbp, 0x8(%r12)
    0000015b: 	cmpq	%rbx, %r13
    0000015e: 	je	.Ltmp842 # Offset: 350
.Ltmp841:
    00000164: 	addq	$0x8, %rbx
    00000168: 	cmpq	%rcx, %rbp
    0000016b: 	jne	.Ltmp843 # Offset: 363
    0000016d: 	movq	(%r12), %r15
    00000171: 	movq	%rbp, %r14
    00000174: 	movabsq	$0xfffffffffffffff, %rax
    0000017e: 	subq	%r15, %r14
    00000181: 	movq	%r14, %rbp
    00000184: 	sarq	$0x3, %rbp
    00000188: 	cmpq	%rax, %rbp
    0000018b: 	je	.Ltmp844 # Offset: 395
    00000191: 	testq	%rbp, %rbp
    00000194: 	movl	$0x1, %eax
    00000199: 	cmovneq	%rbp, %rax
    0000019d: 	addq	%rax, %rbp
    000001a0: 	jb	.Ltmp845 # Offset: 416
    000001a6: 	testq	%rbp, %rbp
    000001a9: 	je	.Ltmp846 # Offset: 425
    000001af: 	movabsq	$0xfffffffffffffff, %rax
    000001b9: 	cmpq	%rax, %rbp
    000001bc: 	cmovaq	%rax, %rbp
    000001c0: 	shlq	$0x3, %rbp
.Ltmp863:
    000001c4: 	movq	%rbp, %rdi
    000001c7: 	callq	_Znwm@PLT # Offset: 455
    000001cc: 	movq	%rax, %rdi
    000001cf: 	leaq	(%rax,%rbp), %rcx
.Ltmp858:
    000001d3: 	movsd	-0x8(%rbx), %xmm0
    000001d8: 	leaq	0x8(%rdi,%r14), %rbp
    000001dd: 	movq	%rbp, %xmm1
    000001e2: 	movsd	%xmm0, (%rdi,%r14)
    000001e8: 	movq	%rdi, %xmm0
    000001ed: 	punpcklqdq	%xmm1, %xmm0
    000001f1: 	testq	%r14, %r14
    000001f4: 	jg	.Ltmp847 # Offset: 500
    000001fa: 	testq	%r15, %r15
    000001fd: 	jne	.Ltmp848 # Offset: 509
.Ltmp857:
    00000203: 	movq	%rcx, 0x10(%r12)
    00000208: 	movups	%xmm0, (%r12)
    0000020d: 	cmpq	%rbx, %r13
    00000210: 	jne	.Ltmp841 # Offset: 528
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp842:
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	movq	%r12, (%rax)
    00000228: 	addq	$0x8, %rax
    0000022c: 	movq	%rax, 0x8(%rsp)
    00000231: 	cmpq	%rax, 0x28(%rsp)
    00000236: 	jne	.Ltmp849 # Offset: 566
    0000023c: 	callq	clock@PLT # Offset: 572
    00000241: 	movq	0x28(%rsp), %r12
    00000246: 	movq	0x48(%rsp), %rbx
    0000024b: 	movq	%rax, start_time(%rip)
    00000252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp852:
    00000258: 	movq	(%rbx), %rbp
    0000025b: 	testq	%rbp, %rbp
    0000025e: 	je	.Ltmp850 # Offset: 606
    00000260: 	movq	(%rbp), %rdi
    00000264: 	testq	%rdi, %rdi
    00000267: 	je	.Ltmp851 # Offset: 615
    00000269: 	movq	0x10(%rbp), %rsi
    0000026d: 	subq	%rdi, %rsi
    00000270: 	callq	_ZdlPvm@PLT # Offset: 624
.Ltmp851:
    00000275: 	movl	$0x18, %esi
    0000027a: 	movq	%rbp, %rdi
    0000027d: 	callq	_ZdlPvm@PLT # Offset: 637
.Ltmp850:
    00000282: 	movq	$0x0, (%rbx)
    00000289: 	addq	$0x8, %rbx
    0000028d: 	cmpq	%rbx, %r12
    00000290: 	jne	.Ltmp852 # Offset: 656
    00000292: 	callq	clock@PLT # Offset: 658
    00000297: 	pxor	%xmm0, %xmm0
    0000029b: 	movl	0x38(%rsp), %edx
    0000029f: 	addl	%edx, 0x58(%rsp)
    000002a3: 	movq	%rax, end_time(%rip)
    000002aa: 	subq	start_time(%rip), %rax
    000002b1: 	cvtsi2sd	%rax, %xmm0
    000002b6: 	movl	0x58(%rsp), %edx
    000002ba: 	divsd	DATAat0x53788(%rip), %xmm0
    000002c2: 	addsd	0x40(%rsp), %xmm0
    000002c8: 	movl	iterations(%rip), %eax
    000002ce: 	movsd	%xmm0, 0x40(%rsp)
    000002d4: 	cmpl	%edx, %eax
    000002d6: 	jg	.Ltmp853 # Offset: 726
.Ltmp862:
    000002dc: 	movq	0x68(%rsp), %rdi
    000002e1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 737
    000002e6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ed: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002f4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fb: 	je	.Ltmp854 # Offset: 763
.Ltmp861:
    00000301: 	movq	-0x20(%rax), %rdi
    00000305: 	movsd	0x40(%rsp), %xmm0
    0000030b: 	callq	_Z13record_resultdPKc # Offset: 779
    00000310: 	cmpq	$0x0, 0x50(%rsp)
    00000316: 	je	.Ltmp855 # Offset: 790
    0000031c: 	movq	0x88(%rsp), %rax
    00000324: 	subq	%fs:0x28, %rax
    0000032d: 	jne	.Ltmp856 # Offset: 813
    00000333: 	movq	0x80(%rsp), %rsi
    0000033b: 	movq	0x50(%rsp), %rdi
    00000340: 	addq	$0x98, %rsp
    00000347: 	popq	%rbx
    00000348: 	popq	%rbp
    00000349: 	subq	%rdi, %rsi
    0000034c: 	popq	%r12
    0000034e: 	popq	%r13
    00000350: 	popq	%r14
    00000352: 	popq	%r15
    00000354: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 852
    00000359: 	nopl	(%rax) # Size: 7
.Ltmp847:
    00000360: 	movq	%r15, %rsi
    00000363: 	movq	%r14, %rdx
    00000366: 	movq	%rcx, 0x20(%rsp)
    0000036b: 	movaps	%xmm0, 0x10(%rsp)
    00000370: 	callq	memmove@PLT # Offset: 880
    00000375: 	movq	0x10(%r12), %rsi
    0000037a: 	movdqa	0x10(%rsp), %xmm0
    00000380: 	movq	0x20(%rsp), %rcx
    00000385: 	subq	%r15, %rsi
.Ltmp859:
    00000388: 	movq	%r15, %rdi
    0000038b: 	movq	%rcx, 0x20(%rsp)
    00000390: 	movaps	%xmm0, 0x10(%rsp)
    00000395: 	callq	_ZdlPvm@PLT # Offset: 917
    0000039a: 	movq	0x20(%rsp), %rcx
    0000039f: 	movdqa	0x10(%rsp), %xmm0
    000003a5: 	jmp	.Ltmp857 # Offset: 933
    000003aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp846:
    000003b0: 	xorl	%ecx, %ecx
    000003b2: 	xorl	%edi, %edi
    000003b4: 	jmp	.Ltmp858 # Offset: 948
    000003b9: 	nopl	(%rax) # Size: 7
.Ltmp848:
    000003c0: 	movq	0x10(%r12), %rsi
    000003c5: 	subq	%r15, %rsi
    000003c8: 	jmp	.Ltmp859 # Offset: 968
.Ltmp838:
    000003ca: 	movq	$0x3e8, 0x38(%rsp)
.Ltmp839:
    000003d3: 	movq	$0x0, 0x80(%rsp)
    000003df: 	pxor	%xmm0, %xmm0
    000003e3: 	movaps	%xmm0, 0x70(%rsp)
    000003e8: 	jmp	.Ltmp860 # Offset: 1000
.Ltmp855:
    000003ed: 	movq	0x88(%rsp), %rax
    000003f5: 	subq	%fs:0x28, %rax
    000003fe: 	jne	.Ltmp856 # Offset: 1022
    00000400: 	addq	$0x98, %rsp
    00000407: 	popq	%rbx
    00000408: 	popq	%rbp
    00000409: 	popq	%r12
    0000040b: 	popq	%r13
    0000040d: 	popq	%r14
    0000040f: 	popq	%r15
    00000411: 	retq # Offset: 1041
.Ltmp854:
    00000412: 	movq	-0x8(%rdx), %rax
    00000416: 	addq	$0x200, %rax
    0000041c: 	jmp	.Ltmp861 # Offset: 1052
.Ltmp840:
    00000421: 	pxor	%xmm5, %xmm5
    00000425: 	movsd	%xmm5, 0x40(%rsp)
    0000042b: 	jmp	.Ltmp862 # Offset: 1067
.Ltmp845:
    00000430: 	movabsq	$0x7ffffffffffffff8, %rbp
    0000043a: 	jmp	.Ltmp863 # Offset: 1082
.Ltmp844:
    0000043f: 	leaq	DATAat0x522f5(%rip), %rdi
    00000446: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1094
.Ltmp856:
    0000044b: 	callq	__stack_chk_fail@PLT # Offset: 1099
    00000450: 	endbr64
    00000454: 	movq	%rax, %rbp
    00000457: 	movq	0x70(%rsp), %rdi
    0000045c: 	movq	0x80(%rsp), %rsi
    00000464: 	subq	%rdi, %rsi
    00000467: 	testq	%rdi, %rdi
    0000046a: 	je	.Ltmp864 # Offset: 1130
    0000046c: 	callq	_ZdlPvm@PLT # Offset: 1132
.Ltmp864:
    00000471: 	movq	%rbp, %rdi
    00000474: 	callq	_Unwind_Resume@PLT # Offset: 1140
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_delete_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_pushbackIdSt6vectorIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0xb3e0
  Size        : 0x567
  MaxSize     : 0x570
  Offset      : 0xb3e0
  Section     : .text
  Orc Section : .local.text._Z13test_pushbackIdSt6vectorIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	xorl	%ebx, %ebx
    00000013: 	subq	$0xa8, %rsp
    0000001a: 	movq	%rdi, 0x28(%rsp)
    0000001f: 	movq	%rdx, 0x78(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x98(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movq	0x28(%rsp), %r12
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp865 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp867:
    00000058: 	movl	$0x18, %edi
    0000005d: 	callq	_Znwm@PLT # Offset: 93
    00000062: 	pxor	%xmm4, %xmm4
    00000066: 	movq	%r12, %rdx
    00000069: 	xorl	%esi, %esi
    0000006b: 	movq	$0x0, 0x10(%rax)
    00000073: 	movq	%rax, %rbp
    00000076: 	movq	%rax, %rdi
    00000079: 	movups	%xmm4, (%rax)
    0000007c: 	callq	_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_ # Offset: 124
    00000081: 	movq	(%rbp), %rdi
    00000085: 	testq	%rdi, %rdi
    00000088: 	je	.Ltmp866 # Offset: 136
    0000008e: 	movq	0x10(%rbp), %rsi
    00000092: 	addl	$0x1, %ebx
    00000095: 	subq	%rdi, %rsi
    00000098: 	callq	_ZdlPvm@PLT # Offset: 152
    0000009d: 	movl	$0x18, %esi
    000000a2: 	movq	%rbp, %rdi
    000000a5: 	callq	_ZdlPvm@PLT # Offset: 165
    000000aa: 	cmpl	iterations(%rip), %ebx
    000000b0: 	jl	.Ltmp867 # Offset: 176
.Ltmp865:
    000000b2: 	callq	clock@PLT # Offset: 178
    000000b7: 	movq	%r13, %rcx
    000000ba: 	xorl	%edx, %edx
    000000bc: 	subq	0x28(%rsp), %rcx
    000000c1: 	movq	%rax, 0x68(%rsp)
    000000c6: 	movq	%rax, end_time(%rip)
    000000cd: 	movq	start_time(%rip), %rax
    000000d4: 	movq	%rax, 0x70(%rsp)
    000000d9: 	movabsq	$0x500000000, %rax
    000000e3: 	divq	%rcx
    000000e6: 	movq	%rax, 0x38(%rsp)
    000000eb: 	cmpq	$0x3e8, %rax
    000000f1: 	ja	.Ltmp868 # Offset: 241
    000000f7: 	cmpq	$0x3, 0x38(%rsp)
    000000fd: 	ja	.Ltmp869 # Offset: 253
    00000103: 	movq	$0x0, 0x90(%rsp)
    0000010f: 	pxor	%xmm0, %xmm0
    00000113: 	movq	$0x4, 0x38(%rsp)
    0000011c: 	movaps	%xmm0, 0x80(%rsp)
.Ltmp890:
    00000124: 	movq	0x38(%rsp), %rbx
    00000129: 	leaq	0x80(%rsp), %rdi
    00000131: 	movq	%rbx, %rsi
    00000134: 	callq	_ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm # Offset: 308
    00000139: 	movq	0x80(%rsp), %rdx
    00000141: 	movl	iterations(%rip), %eax
    00000147: 	movq	%rdx, 0x50(%rsp)
    0000014c: 	testl	%eax, %eax
    0000014e: 	jle	.Ltmp870 # Offset: 334
    00000154: 	addq	$0x8, %rdx
    00000158: 	movl	%ebx, 0x5c(%rsp)
    0000015c: 	pxor	%xmm6, %xmm6
    00000160: 	movl	$0x0, 0x58(%rsp)
    00000168: 	movq	%rdx, 0x60(%rsp)
    0000016d: 	movsd	%xmm6, 0x48(%rsp)
    00000173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp883:
    00000178: 	movslq	0x58(%rsp), %rdx
    0000017d: 	movslq	%eax, %rcx
    00000180: 	movq	%rdx, %rsi
    00000183: 	addq	0x38(%rsp), %rdx
    00000188: 	subl	%esi, %eax
    0000018a: 	cmpq	%rcx, %rdx
    0000018d: 	cmovbl	0x5c(%rsp), %eax
    00000192: 	movl	%eax, %ebx
    00000194: 	callq	clock@PLT # Offset: 404
    00000199: 	movq	0x60(%rsp), %rsi
    0000019e: 	movq	0x50(%rsp), %rdx
    000001a3: 	movq	%rax, start_time(%rip)
    000001aa: 	leal	-0x1(%rbx), %eax
    000001ad: 	leaq	(%rsi,%rax,8), %rax
    000001b1: 	movq	%rdx, 0x40(%rsp)
    000001b6: 	movq	%rax, 0x30(%rsp)
    000001bb: 	movq	%rdx, 0x8(%rsp)
.Ltmp879:
    000001c0: 	movl	$0x18, %edi
    000001c5: 	callq	_Znwm@PLT # Offset: 453
    000001ca: 	pxor	%xmm3, %xmm3
    000001ce: 	movq	$0x0, 0x10(%rax)
    000001d6: 	xorl	%ecx, %ecx
    000001d8: 	xorl	%ebp, %ebp
    000001da: 	movq	%rax, %r12
    000001dd: 	movups	%xmm3, (%rax)
    000001e0: 	movq	0x28(%rsp), %rax
    000001e5: 	movq	%rax, %rbx
    000001e8: 	cmpq	%rax, %r13
    000001eb: 	jne	.Ltmp871 # Offset: 491
    000001ed: 	jmp	.Ltmp872 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp873:
    000001f8: 	movsd	-0x8(%rbx), %xmm0
    000001fd: 	addq	$0x8, %rbp
    00000201: 	movsd	%xmm0, -0x8(%rbp)
    00000206: 	movq	%rbp, 0x8(%r12)
    0000020b: 	cmpq	%rbx, %r13
    0000020e: 	je	.Ltmp872 # Offset: 526
.Ltmp871:
    00000214: 	addq	$0x8, %rbx
    00000218: 	cmpq	%rcx, %rbp
    0000021b: 	jne	.Ltmp873 # Offset: 539
    0000021d: 	movq	(%r12), %r15
    00000221: 	movq	%rbp, %r14
    00000224: 	movabsq	$0xfffffffffffffff, %rax
    0000022e: 	subq	%r15, %r14
    00000231: 	movq	%r14, %rbp
    00000234: 	sarq	$0x3, %rbp
    00000238: 	cmpq	%rax, %rbp
    0000023b: 	je	.Ltmp874 # Offset: 571
    00000241: 	testq	%rbp, %rbp
    00000244: 	movl	$0x1, %eax
    00000249: 	cmovneq	%rbp, %rax
    0000024d: 	addq	%rax, %rbp
    00000250: 	jb	.Ltmp875 # Offset: 592
    00000256: 	testq	%rbp, %rbp
    00000259: 	je	.Ltmp876 # Offset: 601
    0000025f: 	movabsq	$0xfffffffffffffff, %rax
    00000269: 	cmpq	%rax, %rbp
    0000026c: 	cmovaq	%rax, %rbp
    00000270: 	shlq	$0x3, %rbp
.Ltmp893:
    00000274: 	movq	%rbp, %rdi
    00000277: 	callq	_Znwm@PLT # Offset: 631
    0000027c: 	movq	%rax, %rdi
    0000027f: 	leaq	(%rax,%rbp), %rcx
.Ltmp888:
    00000283: 	movsd	-0x8(%rbx), %xmm0
    00000288: 	leaq	0x8(%rdi,%r14), %rbp
    0000028d: 	movq	%rbp, %xmm2
    00000292: 	movsd	%xmm0, (%rdi,%r14)
    00000298: 	movq	%rdi, %xmm0
    0000029d: 	punpcklqdq	%xmm2, %xmm0
    000002a1: 	testq	%r14, %r14
    000002a4: 	jg	.Ltmp877 # Offset: 676
    000002aa: 	testq	%r15, %r15
    000002ad: 	jne	.Ltmp878 # Offset: 685
.Ltmp887:
    000002b3: 	movq	%rcx, 0x10(%r12)
    000002b8: 	movups	%xmm0, (%r12)
    000002bd: 	cmpq	%rbx, %r13
    000002c0: 	jne	.Ltmp871 # Offset: 704
    000002c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp872:
    000002d0: 	movq	0x8(%rsp), %rax
    000002d5: 	movq	%r12, (%rax)
    000002d8: 	addq	$0x8, %rax
    000002dc: 	movq	%rax, 0x8(%rsp)
    000002e1: 	cmpq	%rax, 0x30(%rsp)
    000002e6: 	jne	.Ltmp879 # Offset: 742
    000002ec: 	callq	clock@PLT # Offset: 748
    000002f1: 	pxor	%xmm0, %xmm0
    000002f5: 	movq	0x30(%rsp), %r12
    000002fa: 	movq	0x40(%rsp), %rbx
    000002ff: 	movq	%rax, end_time(%rip)
    00000306: 	subq	start_time(%rip), %rax
    0000030d: 	cvtsi2sd	%rax, %xmm0
    00000312: 	divsd	DATAat0x53788(%rip), %xmm0
    0000031a: 	addsd	0x48(%rsp), %xmm0
    00000320: 	movsd	%xmm0, 0x48(%rsp)
    00000326: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp882:
    00000330: 	movq	(%rbx), %rbp
    00000333: 	testq	%rbp, %rbp
    00000336: 	je	.Ltmp880 # Offset: 822
    00000338: 	movq	(%rbp), %rdi
    0000033c: 	testq	%rdi, %rdi
    0000033f: 	je	.Ltmp881 # Offset: 831
    00000341: 	movq	0x10(%rbp), %rsi
    00000345: 	subq	%rdi, %rsi
    00000348: 	callq	_ZdlPvm@PLT # Offset: 840
.Ltmp881:
    0000034d: 	movl	$0x18, %esi
    00000352: 	movq	%rbp, %rdi
    00000355: 	callq	_ZdlPvm@PLT # Offset: 853
.Ltmp880:
    0000035a: 	movq	$0x0, (%rbx)
    00000361: 	addq	$0x8, %rbx
    00000365: 	cmpq	%rbx, %r12
    00000368: 	jne	.Ltmp882 # Offset: 872
    0000036a: 	movl	0x38(%rsp), %edx
    0000036e: 	movl	iterations(%rip), %eax
    00000374: 	addl	%edx, 0x58(%rsp)
    00000378: 	movl	0x58(%rsp), %edx
    0000037c: 	cmpl	%edx, %eax
    0000037e: 	jg	.Ltmp883 # Offset: 894
.Ltmp892:
    00000384: 	movq	0x78(%rsp), %rdi
    00000389: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 905
    0000038e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000395: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000039c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a3: 	je	.Ltmp884 # Offset: 931
.Ltmp891:
    000003a9: 	movsd	0x48(%rsp), %xmm0
    000003af: 	movq	-0x20(%rax), %rdi
    000003b3: 	pxor	%xmm1, %xmm1
    000003b7: 	movq	0x68(%rsp), %rax
    000003bc: 	subq	0x70(%rsp), %rax
    000003c1: 	cvtsi2sd	%rax, %xmm1
    000003c6: 	divsd	DATAat0x53788(%rip), %xmm1
    000003ce: 	subsd	%xmm1, %xmm0
    000003d2: 	callq	_Z13record_resultdPKc # Offset: 978
    000003d7: 	cmpq	$0x0, 0x50(%rsp)
    000003dd: 	je	.Ltmp885 # Offset: 989
    000003e3: 	movq	0x98(%rsp), %rax
    000003eb: 	subq	%fs:0x28, %rax
    000003f4: 	jne	.Ltmp886 # Offset: 1012
    000003fa: 	movq	0x90(%rsp), %rsi
    00000402: 	movq	0x50(%rsp), %rdi
    00000407: 	addq	$0xa8, %rsp
    0000040e: 	popq	%rbx
    0000040f: 	popq	%rbp
    00000410: 	subq	%rdi, %rsi
    00000413: 	popq	%r12
    00000415: 	popq	%r13
    00000417: 	popq	%r14
    00000419: 	popq	%r15
    0000041b: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1051
.Ltmp866:
    00000420: 	movl	$0x18, %esi
    00000425: 	movq	%rbp, %rdi
    00000428: 	addl	$0x1, %ebx
    0000042b: 	callq	_ZdlPvm@PLT # Offset: 1067
    00000430: 	cmpl	%ebx, iterations(%rip)
    00000436: 	jg	.Ltmp867 # Offset: 1078
    0000043c: 	jmp	.Ltmp865 # Offset: 1084
    00000441: 	nopl	(%rax) # Size: 7
.Ltmp877:
    00000448: 	movq	%r15, %rsi
    0000044b: 	movq	%r14, %rdx
    0000044e: 	movq	%rcx, 0x20(%rsp)
    00000453: 	movaps	%xmm0, 0x10(%rsp)
    00000458: 	callq	memmove@PLT # Offset: 1112
    0000045d: 	movq	0x10(%r12), %rsi
    00000462: 	movq	0x20(%rsp), %rcx
    00000467: 	movdqa	0x10(%rsp), %xmm0
    0000046d: 	subq	%r15, %rsi
.Ltmp889:
    00000470: 	movq	%r15, %rdi
    00000473: 	movq	%rcx, 0x20(%rsp)
    00000478: 	movaps	%xmm0, 0x10(%rsp)
    0000047d: 	callq	_ZdlPvm@PLT # Offset: 1149
    00000482: 	movdqa	0x10(%rsp), %xmm0
    00000488: 	movq	0x20(%rsp), %rcx
    0000048d: 	jmp	.Ltmp887 # Offset: 1165
    00000492: 	nopw	(%rax,%rax) # Size: 6
.Ltmp876:
    00000498: 	xorl	%ecx, %ecx
    0000049a: 	xorl	%edi, %edi
    0000049c: 	jmp	.Ltmp888 # Offset: 1180
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp878:
    000004a8: 	movq	0x10(%r12), %rsi
    000004ad: 	subq	%r15, %rsi
    000004b0: 	jmp	.Ltmp889 # Offset: 1200
.Ltmp868:
    000004b2: 	movq	$0x3e8, 0x38(%rsp)
.Ltmp869:
    000004bb: 	movq	$0x0, 0x90(%rsp)
    000004c7: 	pxor	%xmm0, %xmm0
    000004cb: 	movaps	%xmm0, 0x80(%rsp)
    000004d3: 	jmp	.Ltmp890 # Offset: 1235
.Ltmp885:
    000004d8: 	movq	0x98(%rsp), %rax
    000004e0: 	subq	%fs:0x28, %rax
    000004e9: 	jne	.Ltmp886 # Offset: 1257
    000004eb: 	addq	$0xa8, %rsp
    000004f2: 	popq	%rbx
    000004f3: 	popq	%rbp
    000004f4: 	popq	%r12
    000004f6: 	popq	%r13
    000004f8: 	popq	%r14
    000004fa: 	popq	%r15
    000004fc: 	retq # Offset: 1276
.Ltmp884:
    000004fd: 	movq	-0x8(%rdx), %rax
    00000501: 	addq	$0x200, %rax
    00000507: 	jmp	.Ltmp891 # Offset: 1287
.Ltmp870:
    0000050c: 	pxor	%xmm7, %xmm7
    00000510: 	movsd	%xmm7, 0x48(%rsp)
    00000516: 	jmp	.Ltmp892 # Offset: 1302
.Ltmp875:
    0000051b: 	movabsq	$0x7ffffffffffffff8, %rbp
    00000525: 	jmp	.Ltmp893 # Offset: 1317
.Ltmp874:
    0000052a: 	leaq	DATAat0x522f5(%rip), %rdi
    00000531: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1329
.Ltmp886:
    00000536: 	callq	__stack_chk_fail@PLT # Offset: 1334
    0000053b: 	endbr64
    0000053f: 	movq	%rax, %rbp
    00000542: 	movq	0x80(%rsp), %rdi
    0000054a: 	movq	0x90(%rsp), %rsi
    00000552: 	subq	%rdi, %rsi
    00000555: 	testq	%rdi, %rdi
    00000558: 	je	.Ltmp894 # Offset: 1368
    0000055a: 	callq	_ZdlPvm@PLT # Offset: 1370
.Ltmp894:
    0000055f: 	movq	%rbp, %rdi
    00000562: 	callq	_Unwind_Resume@PLT # Offset: 1378
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_pushbackIdSt6vectorIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_duplicate_coreISt6vectorIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0xb950
  Size        : 0x357
  MaxSize     : 0x360
  Offset      : 0xb950
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt6vectorIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x3, %rsi
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	movq	%rdi, %r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x68, %rsp
    00000019: 	movq	%rdx, 0x38(%rsp)
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x58(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movabsq	$0x500000000, %rax
    0000003a: 	divq	%rsi
    0000003d: 	movq	%rax, 0x10(%rsp)
    00000042: 	cmpq	$0x3e8, %rax
    00000048: 	ja	.Ltmp895 # Offset: 72
    0000004e: 	cmpq	$0x3, %rax
    00000052: 	ja	.Ltmp896 # Offset: 82
    00000058: 	movq	$0x0, 0x50(%rsp)
    00000061: 	pxor	%xmm0, %xmm0
    00000065: 	movq	$0x4, 0x10(%rsp)
    0000006e: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp913:
    00000073: 	movq	0x10(%rsp), %rbx
    00000078: 	leaq	0x40(%rsp), %rdi
    0000007d: 	movq	%rbx, %rsi
    00000080: 	callq	_ZNSt6vectorIPS_IdSaIdEESaIS2_EE17_M_default_appendEm # Offset: 128
    00000085: 	movq	0x40(%rsp), %rcx
    0000008a: 	movl	iterations(%rip), %eax
    00000090: 	movq	%rcx, 0x20(%rsp)
    00000095: 	testl	%eax, %eax
    00000097: 	jle	.Ltmp897 # Offset: 151
    0000009d: 	addq	$0x8, %rcx
    000000a1: 	movl	%ebx, 0x2c(%rsp)
    000000a5: 	pxor	%xmm3, %xmm3
    000000a9: 	movl	$0x0, 0x28(%rsp)
    000000b1: 	movq	%rcx, 0x30(%rsp)
    000000b6: 	movsd	%xmm3, 0x18(%rsp)
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp908:
    000000c0: 	movslq	0x28(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	%rdx, %rsi
    000000cb: 	addq	0x10(%rsp), %rdx
    000000d0: 	subl	%esi, %eax
    000000d2: 	cmpq	%rcx, %rdx
    000000d5: 	cmovbl	0x2c(%rsp), %eax
    000000da: 	movl	%eax, %ebx
    000000dc: 	callq	clock@PLT # Offset: 220
    000000e1: 	movq	0x20(%rsp), %r12
    000000e6: 	movq	0x30(%rsp), %rcx
    000000eb: 	movq	%rax, start_time(%rip)
    000000f2: 	leal	-0x1(%rbx), %eax
    000000f5: 	movq	%r12, %rbp
    000000f8: 	leaq	(%rcx,%rax,8), %r15
    000000fc: 	jmp	.Ltmp898 # Offset: 252
    000000fe: 	nop # Size: 2
.Ltmp901:
    00000100: 	movq	%rax, 0x8(%rbx)
.Ltmp900:
    00000104: 	movq	%rbx, (%r12)
    00000108: 	addq	$0x8, %r12
    0000010c: 	cmpq	%r15, %r12
    0000010f: 	je	.Ltmp899 # Offset: 271
.Ltmp898:
    00000115: 	movl	$0x18, %edi
    0000011a: 	callq	_Znwm@PLT # Offset: 282
    0000011f: 	pxor	%xmm1, %xmm1
    00000123: 	movq	$0x0, 0x10(%rax)
    0000012b: 	movq	%rax, %rbx
    0000012e: 	movups	%xmm1, (%rax)
    00000131: 	cmpq	%r13, %rax
    00000134: 	je	.Ltmp900 # Offset: 308
    00000136: 	movq	0x8(%r13), %rdx
    0000013a: 	movq	(%r13), %r14
    0000013e: 	xorl	%eax, %eax
    00000140: 	movq	%rdx, 0x8(%rsp)
    00000145: 	subq	%r14, %rdx
    00000148: 	movq	%rdx, (%rsp)
    0000014c: 	je	.Ltmp901 # Offset: 332
    0000014e: 	movabsq	$0x7ffffffffffffff8, %rcx
    00000158: 	cmpq	%rcx, %rdx
    0000015b: 	ja	.Ltmp902 # Offset: 347
    00000161: 	movq	%rdx, %rdi
    00000164: 	callq	_Znwm@PLT # Offset: 356
    00000169: 	movq	%rax, %rcx
    0000016c: 	cmpq	%r14, 0x8(%rsp)
    00000171: 	je	.Ltmp903 # Offset: 369
    00000173: 	movq	(%rsp), %rdx
    00000177: 	movq	%r14, %rsi
    0000017a: 	movq	%rax, %rdi
    0000017d: 	callq	memcpy@PLT # Offset: 381
    00000182: 	movq	%rax, %rcx
.Ltmp903:
    00000185: 	movq	(%rbx), %rdi
    00000188: 	testq	%rdi, %rdi
    0000018b: 	je	.Ltmp904 # Offset: 395
    0000018d: 	movq	0x10(%rbx), %rsi
    00000191: 	movq	%rcx, 0x8(%rsp)
    00000196: 	subq	%rdi, %rsi
    00000199: 	callq	_ZdlPvm@PLT # Offset: 409
    0000019e: 	movq	0x8(%rsp), %rcx
.Ltmp904:
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rcx, (%rbx)
    000001aa: 	addq	%rcx, %rax
    000001ad: 	movq	%rax, 0x10(%rbx)
    000001b1: 	jmp	.Ltmp901 # Offset: 433
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp899:
    000001c0: 	callq	clock@PLT # Offset: 448
    000001c5: 	pxor	%xmm0, %xmm0
    000001c9: 	movq	%rax, end_time(%rip)
    000001d0: 	subq	start_time(%rip), %rax
    000001d7: 	cvtsi2sd	%rax, %xmm0
    000001dc: 	divsd	DATAat0x53788(%rip), %xmm0
    000001e4: 	addsd	0x18(%rsp), %xmm0
    000001ea: 	movsd	%xmm0, 0x18(%rsp)
.Ltmp907:
    000001f0: 	movq	(%rbp), %r12
    000001f4: 	testq	%r12, %r12
    000001f7: 	je	.Ltmp905 # Offset: 503
    000001f9: 	movq	(%r12), %rdi
    000001fd: 	testq	%rdi, %rdi
    00000200: 	je	.Ltmp906 # Offset: 512
    00000202: 	movq	0x10(%r12), %rsi
    00000207: 	subq	%rdi, %rsi
    0000020a: 	callq	_ZdlPvm@PLT # Offset: 522
.Ltmp906:
    0000020f: 	movl	$0x18, %esi
    00000214: 	movq	%r12, %rdi
    00000217: 	callq	_ZdlPvm@PLT # Offset: 535
.Ltmp905:
    0000021c: 	movq	$0x0, (%rbp)
    00000224: 	addq	$0x8, %rbp
    00000228: 	cmpq	%rbp, %r15
    0000022b: 	jne	.Ltmp907 # Offset: 555
    0000022d: 	movl	0x10(%rsp), %ecx
    00000231: 	movl	iterations(%rip), %eax
    00000237: 	addl	%ecx, 0x28(%rsp)
    0000023b: 	movl	0x28(%rsp), %ecx
    0000023f: 	cmpl	%ecx, %eax
    00000241: 	jg	.Ltmp908 # Offset: 577
.Ltmp915:
    00000247: 	movq	0x38(%rsp), %rdi
    0000024c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 588
    00000251: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000258: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000025f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000266: 	je	.Ltmp909 # Offset: 614
.Ltmp914:
    0000026c: 	movq	-0x20(%rax), %rdi
    00000270: 	movsd	0x18(%rsp), %xmm0
    00000276: 	callq	_Z13record_resultdPKc # Offset: 630
    0000027b: 	cmpq	$0x0, 0x20(%rsp)
    00000281: 	je	.Ltmp910 # Offset: 641
    00000283: 	movq	0x58(%rsp), %rax
    00000288: 	subq	%fs:0x28, %rax
    00000291: 	jne	.Ltmp911 # Offset: 657
    00000297: 	movq	0x50(%rsp), %rsi
    0000029c: 	movq	0x20(%rsp), %rdi
    000002a1: 	addq	$0x68, %rsp
    000002a5: 	popq	%rbx
    000002a6: 	popq	%rbp
    000002a7: 	subq	%rdi, %rsi
    000002aa: 	popq	%r12
    000002ac: 	popq	%r13
    000002ae: 	popq	%r14
    000002b0: 	popq	%r15
    000002b2: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 690
    000002b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp902:
    000002c0: 	testq	%rdx, %rdx
    000002c3: 	jns	.Ltmp912 # Offset: 707
    000002c5: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 709
.Ltmp895:
    000002ca: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp896:
    000002d3: 	movq	$0x0, 0x50(%rsp)
    000002dc: 	pxor	%xmm0, %xmm0
    000002e0: 	movaps	%xmm0, 0x40(%rsp)
    000002e5: 	jmp	.Ltmp913 # Offset: 741
.Ltmp910:
    000002ea: 	movq	0x58(%rsp), %rax
    000002ef: 	subq	%fs:0x28, %rax
    000002f8: 	jne	.Ltmp911 # Offset: 760
    000002fa: 	addq	$0x68, %rsp
    000002fe: 	popq	%rbx
    000002ff: 	popq	%rbp
    00000300: 	popq	%r12
    00000302: 	popq	%r13
    00000304: 	popq	%r14
    00000306: 	popq	%r15
    00000308: 	retq # Offset: 776
.Ltmp912:
    00000309: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 777
.Ltmp909:
    0000030e: 	movq	-0x8(%rdx), %rax
    00000312: 	addq	$0x200, %rax
    00000318: 	jmp	.Ltmp914 # Offset: 792
.Ltmp897:
    0000031d: 	pxor	%xmm4, %xmm4
    00000321: 	movsd	%xmm4, 0x18(%rsp)
    00000327: 	jmp	.Ltmp915 # Offset: 807
.Ltmp911:
    0000032c: 	callq	__stack_chk_fail@PLT # Offset: 812
    00000331: 	endbr64
    00000335: 	movq	%rax, %rbp
    00000338: 	movq	0x40(%rsp), %rdi
    0000033d: 	movq	0x50(%rsp), %rsi
    00000342: 	subq	%rdi, %rsi
    00000345: 	testq	%rdi, %rdi
    00000348: 	je	.Ltmp916 # Offset: 840
    0000034a: 	callq	_ZdlPvm@PLT # Offset: 842
.Ltmp916:
    0000034f: 	movq	%rbp, %rdi
    00000352: 	callq	_Unwind_Resume@PLT # Offset: 850
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt6vectorIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_duplicate_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0xbcb0
  Size        : 0x25e
  MaxSize     : 0x260
  Offset      : 0xbcb0
  Section     : .text
  Orc Section : .local.text._Z20test_duplicate_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	movabsq	$0x500000000, %rax
    0000000e: 	pushq	%r15
    00000010: 	subq	%rdi, %rsi
    00000013: 	pushq	%r14
    00000015: 	pushq	%r13
    00000017: 	movq	%rdi, %r13
    0000001a: 	pushq	%r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	pushq	%rbx
    00000021: 	subq	$0x38, %rsp
    00000025: 	movq	%rdx, 0x28(%rsp)
    0000002a: 	xorl	%edx, %edx
    0000002c: 	divq	%rsi
    0000002f: 	cmpq	$0x3e8, %rax
    00000035: 	ja	.Ltmp917 # Offset: 53
    0000003b: 	movq	%rax, %r15
    0000003e: 	cmpq	$0x3, %rax
    00000042: 	ja	.Ltmp918 # Offset: 66
    00000048: 	movq	$0x20, 0x20(%rsp)
    00000051: 	movl	$0x4, %r15d
.Ltmp927:
    00000057: 	movq	0x20(%rsp), %rdi
    0000005c: 	callq	_Znwm@PLT # Offset: 92
    00000061: 	leaq	-0x8(,%r15,8), %rdx
    00000069: 	xorl	%esi, %esi
    0000006b: 	movq	$0x0, (%rax)
    00000072: 	movq	%rax, (%rsp)
    00000076: 	addq	$0x8, %rax
    0000007a: 	movq	%rax, %rdi
    0000007d: 	movq	%rax, 0x10(%rsp)
    00000082: 	callq	memset@PLT # Offset: 130
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	testl	%eax, %eax
    0000008f: 	jle	.Ltmp919 # Offset: 143
    00000095: 	movl	%r15d, 0x1c(%rsp)
    0000009a: 	pxor	%xmm2, %xmm2
    0000009e: 	xorl	%r14d, %r14d
    000000a1: 	movsd	%xmm2, 0x8(%rsp)
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp924:
    000000b0: 	movslq	%r14d, %rdx
    000000b3: 	movslq	%eax, %rcx
    000000b6: 	subl	%r14d, %eax
    000000b9: 	addq	%r15, %rdx
    000000bc: 	cmpq	%rcx, %rdx
    000000bf: 	cmovbl	0x1c(%rsp), %eax
    000000c4: 	movl	%eax, %ebx
    000000c6: 	callq	clock@PLT # Offset: 198
    000000cb: 	movq	%rax, start_time(%rip)
    000000d2: 	movabsq	$0x7ffffffffffffff8, %rax
    000000dc: 	cmpq	%rax, %rbp
    000000df: 	ja	.Ltmp920 # Offset: 223
    000000e5: 	movq	0x10(%rsp), %rdx
    000000ea: 	leal	-0x1(%rbx), %eax
    000000ed: 	movq	(%rsp), %rbx
    000000f1: 	leaq	(%rdx,%rax,8), %r12
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp921:
    000000f8: 	movq	%rbp, %rdi
    000000fb: 	callq	_Znam@PLT # Offset: 251
    00000100: 	movq	%rbp, %rdx
    00000103: 	movq	%r13, %rsi
    00000106: 	movq	%rax, %rdi
    00000109: 	addq	$0x8, %rbx
    0000010d: 	callq	memcpy@PLT # Offset: 269
    00000112: 	movq	%rax, -0x8(%rbx)
    00000116: 	cmpq	%r12, %rbx
    00000119: 	jne	.Ltmp921 # Offset: 281
    0000011b: 	callq	clock@PLT # Offset: 283
    00000120: 	pxor	%xmm0, %xmm0
    00000124: 	movq	(%rsp), %rbx
    00000128: 	movq	%rax, end_time(%rip)
    0000012f: 	subq	start_time(%rip), %rax
    00000136: 	cvtsi2sd	%rax, %xmm0
    0000013b: 	divsd	DATAat0x53788(%rip), %xmm0
    00000143: 	addsd	0x8(%rsp), %xmm0
    00000149: 	movsd	%xmm0, 0x8(%rsp)
    0000014f: 	nop # Size: 1
.Ltmp923:
    00000150: 	movq	(%rbx), %rdi
    00000153: 	testq	%rdi, %rdi
    00000156: 	je	.Ltmp922 # Offset: 342
    0000015c: 	movl	$0x8, %esi
    00000161: 	addq	$0x8, %rbx
    00000165: 	callq	_ZdlPvm@PLT # Offset: 357
    0000016a: 	movq	$0x0, -0x8(%rbx)
    00000172: 	cmpq	%r12, %rbx
    00000175: 	jne	.Ltmp923 # Offset: 373
    00000177: 	movl	iterations(%rip), %eax
    0000017d: 	addl	%r15d, %r14d
    00000180: 	cmpl	%r14d, %eax
    00000183: 	jg	.Ltmp924 # Offset: 387
.Ltmp926:
    00000189: 	movq	0x28(%rsp), %rdi
    0000018e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 398
    00000193: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000019a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001a1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001a8: 	je	.Ltmp925 # Offset: 424
.Ltmp928:
    000001aa: 	movq	-0x20(%rax), %rdi
    000001ae: 	movsd	0x8(%rsp), %xmm0
    000001b4: 	callq	_Z13record_resultdPKc # Offset: 436
    000001b9: 	movq	0x20(%rsp), %rsi
    000001be: 	movq	(%rsp), %rdi
    000001c2: 	addq	$0x38, %rsp
    000001c6: 	popq	%rbx
    000001c7: 	popq	%rbp
    000001c8: 	popq	%r12
    000001ca: 	popq	%r13
    000001cc: 	popq	%r14
    000001ce: 	popq	%r15
    000001d0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 464
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp922:
    000001d8: 	addq	$0x8, %rbx
    000001dc: 	cmpq	%r12, %rbx
    000001df: 	jne	.Ltmp923 # Offset: 479
    000001e5: 	movl	iterations(%rip), %eax
    000001eb: 	addl	%r15d, %r14d
    000001ee: 	cmpl	%r14d, %eax
    000001f1: 	jg	.Ltmp924 # Offset: 497
    000001f7: 	jmp	.Ltmp926 # Offset: 503
.Ltmp917:
    000001f9: 	movq	$0x1f40, 0x20(%rsp)
    00000202: 	movl	$0x3e8, %r15d
    00000208: 	jmp	.Ltmp927 # Offset: 520
.Ltmp925:
    0000020d: 	movq	-0x8(%rdx), %rax
    00000211: 	addq	$0x200, %rax
    00000217: 	jmp	.Ltmp928 # Offset: 535
.Ltmp918:
    00000219: 	leaq	(,%rax,8), %rax
    00000221: 	movq	%rax, 0x20(%rsp)
    00000226: 	jmp	.Ltmp927 # Offset: 550
.Ltmp919:
    0000022b: 	pxor	%xmm3, %xmm3
    0000022f: 	movsd	%xmm3, 0x8(%rsp)
    00000235: 	jmp	.Ltmp926 # Offset: 565
    0000023a: 	endbr64
    0000023e: 	movq	%rax, %rbp
    00000241: 	jmp	.Ltmp929 # Offset: 577
.Ltmp920:
    00000243: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 579
.Ltmp929:
    00000248: 	movq	(%rsp), %rdi
    0000024c: 	movq	0x20(%rsp), %rsi
    00000251: 	callq	_ZdlPvm@PLT # Offset: 593
    00000256: 	movq	%rbp, %rdi
    00000259: 	callq	_Unwind_Resume@PLT # Offset: 601
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_duplicate_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z27test_accum_multimap_reverseIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0xbf10
  Size        : 0x277
  MaxSize     : 0x280
  Offset      : 0xbf10
  Section     : .text
  Orc Section : .local.text._Z27test_accum_multimap_reverseIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x58(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x28(%rsp), %rbp
    0000002a: 	movl	$0x0, 0x28(%rsp)
    00000032: 	movq	$0x0, 0x30(%rsp)
    0000003b: 	movq	%rbp, 0x38(%rsp)
    00000040: 	movq	%rbp, 0x40(%rsp)
    00000045: 	movq	$0x0, 0x48(%rsp)
    0000004e: 	cmpq	%rsi, %rdi
    00000051: 	je	.Ltmp930 # Offset: 81
    00000057: 	pxor	%xmm6, %xmm6
    0000005b: 	movq	%rdi, %rbx
    0000005e: 	movq	%rsi, %r12
    00000061: 	movsd	%xmm6, 0x18(%rsp)
    00000067: 	movsd	%xmm6, 0x10(%rsp)
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp937:
    00000070: 	movsd	(%rbx), %xmm2
    00000074: 	movl	$0x30, %edi
    00000079: 	movsd	%xmm2, 0x8(%rsp)
    0000007f: 	callq	_Znwm@PLT # Offset: 127
    00000084: 	movsd	0x8(%rsp), %xmm0
    0000008a: 	movq	0x30(%rsp), %rdx
    0000008f: 	movq	%rax, %rsi
    00000092: 	unpcklpd	%xmm0, %xmm0
    00000096: 	movups	%xmm0, 0x20(%rax)
    0000009a: 	testq	%rdx, %rdx
    0000009d: 	jne	.Ltmp931 # Offset: 157
    0000009f: 	jmp	.Ltmp932 # Offset: 159
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp934:
    000000a8: 	movq	0x10(%rdx), %rcx
    000000ac: 	testq	%rcx, %rcx
    000000af: 	je	.Ltmp933 # Offset: 175
.Ltmp935:
    000000b1: 	movq	%rcx, %rdx
.Ltmp931:
    000000b4: 	movsd	0x20(%rdx), %xmm0
    000000b9: 	comisd	0x8(%rsp), %xmm0
    000000bf: 	ja	.Ltmp934 # Offset: 191
    000000c1: 	movq	0x18(%rdx), %rcx
    000000c5: 	testq	%rcx, %rcx
    000000c8: 	jne	.Ltmp935 # Offset: 200
.Ltmp933:
    000000ca: 	movl	$0x1, %edi
    000000cf: 	cmpq	%rbp, %rdx
    000000d2: 	je	.Ltmp936 # Offset: 210
    000000d4: 	xorl	%edi, %edi
    000000d6: 	comisd	0x8(%rsp), %xmm0
    000000dc: 	seta	%dil
.Ltmp936:
    000000e0: 	movq	%rbp, %rcx
    000000e3: 	addq	$0x8, %rbx
    000000e7: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 231
    000000ec: 	movsd	0x10(%rsp), %xmm3
    000000f2: 	addsd	-0x8(%rbx), %xmm3
    000000f7: 	addq	$0x1, 0x48(%rsp)
    000000fd: 	movsd	%xmm3, 0x10(%rsp)
    00000103: 	cmpq	%rbx, %r12
    00000106: 	jne	.Ltmp937 # Offset: 262
.Ltmp947:
    0000010c: 	callq	clock@PLT # Offset: 268
    00000111: 	movl	iterations(%rip), %r13d
    00000118: 	xorl	%r12d, %r12d
    0000011b: 	leaq	DATAat0x52360(%rip), %r15
    00000122: 	movq	%rax, start_time(%rip)
    00000129: 	testl	%r13d, %r13d
    0000012c: 	jle	.Ltmp938 # Offset: 300
    0000012e: 	nop # Size: 2
.Ltmp942:
    00000130: 	movq	0x38(%rsp), %rbx
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	cmpq	%rbp, %rbx
    0000013c: 	je	.Ltmp939 # Offset: 316
    0000013e: 	movq	%rbp, %rdi
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp940:
    00000148: 	movsd	%xmm0, 0x8(%rsp)
    0000014e: 	callq	_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base@PLT # Offset: 334
    00000153: 	movsd	0x8(%rsp), %xmm0
    00000159: 	movq	%rax, %rdi
    0000015c: 	addsd	0x28(%rax), %xmm0
    00000161: 	cmpq	%rax, %rbx
    00000164: 	jne	.Ltmp940 # Offset: 356
.Ltmp939:
    00000166: 	ucomisd	0x10(%rsp), %xmm0
    0000016c: 	jp	.Ltmp941 # Offset: 364
    00000172: 	jne	.Ltmp941 # Offset: 370
.Ltmp945:
    00000178: 	addl	$0x1, %r12d
    0000017c: 	cmpl	%r13d, %r12d
    0000017f: 	jl	.Ltmp942 # Offset: 383
.Ltmp938:
    00000181: 	movq	%r14, %rdi
    00000184: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 388
    00000189: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000190: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000197: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000019e: 	je	.Ltmp943 # Offset: 414
.Ltmp946:
    000001a4: 	movq	-0x20(%rax), %rbp
    000001a8: 	callq	clock@PLT # Offset: 424
    000001ad: 	pxor	%xmm0, %xmm0
    000001b1: 	movq	%rax, end_time(%rip)
    000001b8: 	movq	%rbp, %rdi
    000001bb: 	subq	start_time(%rip), %rax
    000001c2: 	cvtsi2sd	%rax, %xmm0
    000001c7: 	divsd	DATAat0x53788(%rip), %xmm0
    000001cf: 	callq	_Z13record_resultdPKc # Offset: 463
    000001d4: 	movq	0x30(%rsp), %rdi
    000001d9: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 473
    000001de: 	movq	0x58(%rsp), %rax
    000001e3: 	subq	%fs:0x28, %rax
    000001ec: 	jne	.Ltmp944 # Offset: 492
    000001ee: 	addq	$0x68, %rsp
    000001f2: 	popq	%rbx
    000001f3: 	popq	%rbp
    000001f4: 	popq	%r12
    000001f6: 	popq	%r13
    000001f8: 	popq	%r14
    000001fa: 	popq	%r15
    000001fc: 	retq # Offset: 508
    000001fd: 	nopl	(%rax) # Size: 3
.Ltmp941:
    00000200: 	movl	current_test(%rip), %edx
    00000206: 	movq	%r15, %rsi
    00000209: 	movl	$0x1, %edi
    0000020e: 	xorl	%eax, %eax
    00000210: 	callq	__printf_chk@PLT # Offset: 528
    00000215: 	movl	iterations(%rip), %r13d
    0000021c: 	jmp	.Ltmp945 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp932:
    00000228: 	movl	$0x1, %edi
    0000022d: 	movq	%rbp, %rdx
    00000230: 	jmp	.Ltmp936 # Offset: 560
.Ltmp943:
    00000235: 	movq	-0x8(%rdx), %rax
    00000239: 	addq	$0x200, %rax
    0000023f: 	jmp	.Ltmp946 # Offset: 575
.Ltmp930:
    00000244: 	pxor	%xmm7, %xmm7
    00000248: 	movsd	%xmm7, 0x18(%rsp)
    0000024e: 	movsd	%xmm7, 0x10(%rsp)
    00000254: 	jmp	.Ltmp947 # Offset: 596
.Ltmp944:
    00000259: 	callq	__stack_chk_fail@PLT # Offset: 601
    0000025e: 	endbr64
    00000262: 	movq	%rax, %rbp
    00000265: 	movq	0x30(%rsp), %rdi
    0000026a: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 618
    0000026f: 	movq	%rbp, %rdi
    00000272: 	callq	_Unwind_Resume@PLT # Offset: 626
DWARF CFI Instructions:
    <empty>
End of Function "_Z27test_accum_multimap_reverseIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_accum_set_reverseIdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0xc190
  Size        : 0x25d
  MaxSize     : 0x260
  Offset      : 0xc190
  Section     : .text
  Orc Section : .local.text._Z22test_accum_set_reverseIdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x58(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x28(%rsp), %r13
    0000002a: 	movl	$0x0, 0x28(%rsp)
    00000032: 	movq	$0x0, 0x30(%rsp)
    0000003b: 	movq	%r13, 0x38(%rsp)
    00000040: 	movq	%r13, 0x40(%rsp)
    00000045: 	movq	$0x0, 0x48(%rsp)
    0000004e: 	cmpq	%rsi, %rdi
    00000051: 	je	.Ltmp948 # Offset: 81
    00000057: 	pxor	%xmm4, %xmm4
    0000005b: 	movq	%rdi, %rbx
    0000005e: 	movq	%rsi, %r15
    00000061: 	movsd	%xmm4, 0x18(%rsp)
    00000067: 	movsd	%xmm4, 0x10(%rsp)
.Ltmp950:
    0000006d: 	movq	%r13, %r12
    00000070: 	movl	$0x1, %ebp
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp955:
    00000078: 	movl	$0x28, %edi
    0000007d: 	callq	_Znwm@PLT # Offset: 125
    00000082: 	movsd	(%rbx), %xmm0
    00000086: 	movq	%rax, %rsi
    00000089: 	movzbl	%bpl, %edi
    0000008d: 	movq	%r13, %rcx
    00000090: 	movq	%r12, %rdx
    00000093: 	addq	$0x8, %rbx
    00000097: 	movsd	%xmm0, 0x20(%rax)
    0000009c: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 156
    000000a1: 	movsd	0x10(%rsp), %xmm2
    000000a7: 	addsd	-0x8(%rbx), %xmm2
    000000ac: 	addq	$0x1, 0x48(%rsp)
    000000b2: 	movsd	%xmm2, 0x10(%rsp)
    000000b8: 	cmpq	%rbx, %r15
    000000bb: 	je	.Ltmp949 # Offset: 187
    000000bd: 	movq	0x30(%rsp), %r12
    000000c2: 	testq	%r12, %r12
    000000c5: 	je	.Ltmp950 # Offset: 197
    000000c7: 	movsd	(%rbx), %xmm1
    000000cb: 	jmp	.Ltmp951 # Offset: 203
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp953:
    000000d0: 	movq	0x10(%r12), %rax
    000000d5: 	testq	%rax, %rax
    000000d8: 	je	.Ltmp952 # Offset: 216
.Ltmp954:
    000000da: 	movq	%rax, %r12
.Ltmp951:
    000000dd: 	movsd	0x20(%r12), %xmm0
    000000e4: 	comisd	%xmm1, %xmm0
    000000e8: 	ja	.Ltmp953 # Offset: 232
    000000ea: 	movq	0x18(%r12), %rax
    000000ef: 	testq	%rax, %rax
    000000f2: 	jne	.Ltmp954 # Offset: 242
.Ltmp952:
    000000f4: 	movl	$0x1, %ebp
    000000f9: 	cmpq	%r13, %r12
    000000fc: 	je	.Ltmp955 # Offset: 252
    00000102: 	comisd	%xmm1, %xmm0
    00000106: 	seta	%bpl
    0000010a: 	jmp	.Ltmp955 # Offset: 266
.Ltmp948:
    0000010f: 	pxor	%xmm5, %xmm5
    00000113: 	movsd	%xmm5, 0x18(%rsp)
    00000119: 	movsd	%xmm5, 0x10(%rsp)
    0000011f: 	nop # Size: 1
.Ltmp949:
    00000120: 	callq	clock@PLT # Offset: 288
    00000125: 	movl	iterations(%rip), %ebp
    0000012b: 	xorl	%ebx, %ebx
    0000012d: 	leaq	DATAat0x52360(%rip), %r15
    00000134: 	movq	%rax, start_time(%rip)
    0000013b: 	testl	%ebp, %ebp
    0000013d: 	jle	.Ltmp956 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp960:
    00000140: 	movq	0x38(%rsp), %r12
    00000145: 	pxor	%xmm0, %xmm0
    00000149: 	cmpq	%r13, %r12
    0000014c: 	je	.Ltmp957 # Offset: 332
    0000014e: 	movq	%r13, %rdi
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp958:
    00000158: 	movsd	%xmm0, 0x8(%rsp)
    0000015e: 	callq	_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base@PLT # Offset: 350
    00000163: 	movsd	0x8(%rsp), %xmm0
    00000169: 	movq	%rax, %rdi
    0000016c: 	addsd	0x20(%rax), %xmm0
    00000171: 	cmpq	%rax, %r12
    00000174: 	jne	.Ltmp958 # Offset: 372
.Ltmp957:
    00000176: 	ucomisd	0x10(%rsp), %xmm0
    0000017c: 	jp	.Ltmp959 # Offset: 380
    00000182: 	jne	.Ltmp959 # Offset: 386
.Ltmp963:
    00000188: 	addl	$0x1, %ebx
    0000018b: 	cmpl	%ebp, %ebx
    0000018d: 	jl	.Ltmp960 # Offset: 397
.Ltmp956:
    0000018f: 	movq	%r14, %rdi
    00000192: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 402
    00000197: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000019e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ac: 	je	.Ltmp961 # Offset: 428
.Ltmp964:
    000001b2: 	movq	-0x20(%rax), %rbp
    000001b6: 	callq	clock@PLT # Offset: 438
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	movq	%rax, end_time(%rip)
    000001c6: 	movq	%rbp, %rdi
    000001c9: 	subq	start_time(%rip), %rax
    000001d0: 	cvtsi2sd	%rax, %xmm0
    000001d5: 	divsd	DATAat0x53788(%rip), %xmm0
    000001dd: 	callq	_Z13record_resultdPKc # Offset: 477
    000001e2: 	movq	0x30(%rsp), %rdi
    000001e7: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 487
    000001ec: 	movq	0x58(%rsp), %rax
    000001f1: 	subq	%fs:0x28, %rax
    000001fa: 	jne	.Ltmp962 # Offset: 506
    000001fc: 	addq	$0x68, %rsp
    00000200: 	popq	%rbx
    00000201: 	popq	%rbp
    00000202: 	popq	%r12
    00000204: 	popq	%r13
    00000206: 	popq	%r14
    00000208: 	popq	%r15
    0000020a: 	retq # Offset: 522
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp959:
    00000210: 	movl	current_test(%rip), %edx
    00000216: 	movq	%r15, %rsi
    00000219: 	movl	$0x1, %edi
    0000021e: 	xorl	%eax, %eax
    00000220: 	callq	__printf_chk@PLT # Offset: 544
    00000225: 	movl	iterations(%rip), %ebp
    0000022b: 	jmp	.Ltmp963 # Offset: 555
.Ltmp961:
    00000230: 	movq	-0x8(%rdx), %rax
    00000234: 	addq	$0x200, %rax
    0000023a: 	jmp	.Ltmp964 # Offset: 570
.Ltmp962:
    0000023f: 	callq	__stack_chk_fail@PLT # Offset: 575
    00000244: 	endbr64
    00000248: 	movq	%rax, %rbp
    0000024b: 	movq	0x30(%rsp), %rdi
    00000250: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 592
    00000255: 	movq	%rbp, %rdi
    00000258: 	callq	_Unwind_Resume@PLT # Offset: 600
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_accum_set_reverseIdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_accum_reverseId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0xc3f0
  Size        : 0x2b0
  MaxSize     : 0x2b0
  Offset      : 0xc3f0
  Section     : .text
  Orc Section : .local.text._Z18test_accum_reverseId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	movl	$0x20, %edi
    0000000e: 	pushq	%r14
    00000010: 	movq	%rsi, %r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rdx, %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%r14, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	subq	%r15, %r12
    00000021: 	pushq	%rbx
    00000022: 	xorl	%ebx, %ebx
    00000024: 	subq	$0x18, %rsp
    00000028: 	callq	_Znwm@PLT # Offset: 40
    0000002d: 	pxor	%xmm0, %xmm0
    00000031: 	movq	$0x0, 0x8(%rax)
    00000039: 	movq	%rax, %rbp
    0000003c: 	movups	%xmm0, 0x10(%rax)
    00000040: 	testq	%r12, %r12
    00000043: 	jle	.Ltmp965 # Offset: 67
    00000049: 	sarq	$0x3, %r12
    0000004d: 	subq	$0x2, %r12
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp983:
    00000058: 	movl	$0x18, %edi
    0000005d: 	callq	_Znwm@PLT # Offset: 93
    00000062: 	movq	0x18(%rbp), %rdx
    00000066: 	movq	$0x0, (%rax)
    0000006d: 	movq	$0x0, 0x8(%rax)
    00000075: 	movq	%rdx, 0x10(%rax)
    00000079: 	testq	%rdx, %rdx
    0000007c: 	je	.Ltmp966 # Offset: 124
    0000007e: 	movq	%rax, 0x8(%rdx)
.Ltmp966:
    00000082: 	movq	0x10(%rbp), %rbx
    00000086: 	movq	%rax, 0x18(%rbp)
    0000008a: 	testq	%rbx, %rbx
    0000008d: 	je	.Ltmp967 # Offset: 141
    00000093: 	addq	$0x1, 0x8(%rbp)
    00000098: 	cmpq	$-0x1, %r12
    0000009c: 	je	.Ltmp965 # Offset: 156
.Ltmp969:
    0000009e: 	movl	$0x18, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	0x18(%rbp), %rdx
    000000ac: 	movq	$0x0, (%rax)
    000000b3: 	movq	$0x0, 0x8(%rax)
    000000bb: 	movq	%rdx, 0x10(%rax)
    000000bf: 	testq	%rdx, %rdx
    000000c2: 	je	.Ltmp968 # Offset: 194
    000000c4: 	movq	%rax, 0x8(%rdx)
.Ltmp968:
    000000c8: 	addq	$0x1, 0x8(%rbp)
    000000cd: 	movq	0x10(%rbp), %rbx
    000000d1: 	movq	%rax, 0x18(%rbp)
    000000d5: 	subq	$0x1, %r12
    000000d9: 	jae	.Ltmp969 # Offset: 217
.Ltmp965:
    000000db: 	cmpq	%r15, %r14
    000000de: 	je	.Ltmp970 # Offset: 222
.Ltmp985:
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	%rbx, %rax
    000000eb: 	movapd	%xmm2, %xmm1
    000000ef: 	nop # Size: 1
.Ltmp971:
    000000f0: 	movsd	(%r15), %xmm0
    000000f5: 	movq	%rax, %rdx
    000000f8: 	addq	$0x8, %r15
    000000fc: 	movq	0x8(%rax), %rax
    00000100: 	addsd	%xmm0, %xmm1
    00000104: 	movsd	%xmm0, (%rdx)
    00000108: 	cmpq	%r15, %r14
    0000010b: 	jne	.Ltmp971 # Offset: 267
.Ltmp986:
    0000010d: 	movsd	%xmm2, 0x8(%rsp)
    00000113: 	movsd	%xmm1, (%rsp)
    00000118: 	callq	clock@PLT # Offset: 280
    0000011d: 	movl	iterations(%rip), %ecx
    00000123: 	movsd	(%rsp), %xmm1
    00000128: 	movq	%rax, start_time(%rip)
    0000012f: 	movsd	0x8(%rsp), %xmm2
    00000135: 	testl	%ecx, %ecx
    00000137: 	jle	.Ltmp972 # Offset: 311
    00000139: 	movq	0x18(%rbp), %r14
    0000013d: 	xorl	%r12d, %r12d
    00000140: 	leaq	DATAat0x52360(%rip), %r15
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp976:
    00000150: 	testq	%r14, %r14
    00000153: 	je	.Ltmp973 # Offset: 339
.Ltmp980:
    00000159: 	movq	%r14, %rax
    0000015c: 	movapd	%xmm2, %xmm0
.Ltmp974:
    00000160: 	movq	%rax, %rdx
    00000163: 	movq	0x10(%rax), %rax
    00000167: 	addsd	(%rdx), %xmm0
    0000016b: 	testq	%rax, %rax
    0000016e: 	jne	.Ltmp974 # Offset: 366
.Ltmp981:
    00000170: 	ucomisd	%xmm0, %xmm1
    00000174: 	jp	.Ltmp975 # Offset: 372
    0000017a: 	jne	.Ltmp975 # Offset: 378
    00000180: 	addl	$0x1, %r12d
    00000184: 	cmpl	%r12d, %ecx
    00000187: 	jg	.Ltmp976 # Offset: 391
.Ltmp972:
    00000189: 	movq	%r13, %rdi
    0000018c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 396
    00000191: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000198: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000019f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001a6: 	je	.Ltmp977 # Offset: 422
.Ltmp984:
    000001ac: 	movq	-0x20(%rax), %r12
    000001b0: 	callq	clock@PLT # Offset: 432
    000001b5: 	pxor	%xmm0, %xmm0
    000001b9: 	movq	%rax, end_time(%rip)
    000001c0: 	movq	%r12, %rdi
    000001c3: 	subq	start_time(%rip), %rax
    000001ca: 	cvtsi2sd	%rax, %xmm0
    000001cf: 	divsd	DATAat0x53788(%rip), %xmm0
    000001d7: 	callq	_Z13record_resultdPKc # Offset: 471
    000001dc: 	testq	%rbx, %rbx
    000001df: 	je	.Ltmp978 # Offset: 479
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp979:
    000001e8: 	movq	%rbx, %rdi
    000001eb: 	movq	0x8(%rbx), %rbx
    000001ef: 	movl	$0x18, %esi
    000001f4: 	callq	_ZdlPvm@PLT # Offset: 500
    000001f9: 	testq	%rbx, %rbx
    000001fc: 	jne	.Ltmp979 # Offset: 508
.Ltmp978:
    000001fe: 	addq	$0x18, %rsp
    00000202: 	movq	%rbp, %rdi
    00000205: 	movl	$0x20, %esi
    0000020a: 	popq	%rbx
    0000020b: 	popq	%rbp
    0000020c: 	popq	%r12
    0000020e: 	popq	%r13
    00000210: 	popq	%r14
    00000212: 	popq	%r15
    00000214: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp975:
    00000220: 	movl	current_test(%rip), %edx
    00000226: 	xorl	%eax, %eax
    00000228: 	movq	%r15, %rsi
    0000022b: 	movl	$0x1, %edi
    00000230: 	movsd	%xmm2, 0x8(%rsp)
    00000236: 	addl	$0x1, %r12d
    0000023a: 	movsd	%xmm1, (%rsp)
    0000023f: 	callq	__printf_chk@PLT # Offset: 575
    00000244: 	movl	iterations(%rip), %ecx
    0000024a: 	movsd	(%rsp), %xmm1
    0000024f: 	movsd	0x8(%rsp), %xmm2
    00000255: 	cmpl	%r12d, %ecx
    00000258: 	jle	.Ltmp972 # Offset: 600
    0000025e: 	testq	%r14, %r14
    00000261: 	jne	.Ltmp980 # Offset: 609
.Ltmp973:
    00000267: 	movapd	%xmm2, %xmm0
    0000026b: 	jmp	.Ltmp981 # Offset: 619
.Ltmp967:
    00000270: 	addq	$0x1, 0x8(%rbp)
    00000275: 	movq	%rax, 0x10(%rbp)
    00000279: 	cmpq	$-0x1, %r12
    0000027d: 	je	.Ltmp982 # Offset: 637
    0000027f: 	subq	$0x1, %r12
    00000283: 	jmp	.Ltmp983 # Offset: 643
.Ltmp977:
    00000288: 	movq	-0x8(%rdx), %rax
    0000028c: 	addq	$0x200, %rax
    00000292: 	jmp	.Ltmp984 # Offset: 658
.Ltmp982:
    00000297: 	movq	%rax, %rbx
    0000029a: 	cmpq	%r15, %r14
    0000029d: 	jne	.Ltmp985 # Offset: 669
.Ltmp970:
    000002a3: 	pxor	%xmm2, %xmm2
    000002a7: 	movapd	%xmm2, %xmm1
    000002ab: 	jmp	.Ltmp986 # Offset: 683
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_accum_reverseId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z27test_accum_stdarray_reverseIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0xc6a0
  Size        : 0x244
  MaxSize     : 0x250
  Offset      : 0xc6a0
  Section     : .text
  Orc Section : .local.text._Z27test_accum_stdarray_reverseIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	leaq	-0xf000(%rsp), %r11
.Ltmp987:
    00000014: 	subq	$0x1000, %rsp
    0000001b: 	orq	$0x0, (%rsp)
    00000020: 	cmpq	%r11, %rsp
    00000023: 	jne	.Ltmp987 # Offset: 35
    00000025: 	subq	$0xa20, %rsp
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0xfa18(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	movq	%rdx, %r12
    00000042: 	cmpq	%rsi, %rdi
    00000045: 	je	.Ltmp988 # Offset: 69
    0000004b: 	subq	%rdi, %rsi
    0000004e: 	movq	%rdi, %rcx
    00000051: 	leaq	-0x8(%rsi), %rdi
    00000055: 	shrq	$0x3, %rdi
    00000059: 	addq	$0x1, %rdi
    0000005d: 	cmpq	$0x8, %rsi
    00000061: 	je	.Ltmp989 # Offset: 97
    00000067: 	movq	%rdi, %rdx
    0000006a: 	pxor	%xmm3, %xmm3
    0000006e: 	leaq	0x10(%rsp), %rbx
    00000073: 	shrq	%rdx
    00000076: 	movapd	%xmm3, %xmm2
    0000007a: 	shlq	$0x4, %rdx
    0000007e: 	nop # Size: 2
.Ltmp990:
    00000080: 	movupd	(%rcx,%rax), %xmm4
    00000085: 	movsd	0x8(%rcx,%rax), %xmm0
    0000008b: 	addsd	%xmm4, %xmm2
    0000008f: 	movaps	%xmm4, (%rbx,%rax)
    00000093: 	addq	$0x10, %rax
    00000097: 	addsd	%xmm0, %xmm2
    0000009b: 	cmpq	%rax, %rdx
    0000009e: 	jne	.Ltmp990 # Offset: 158
    000000a0: 	movq	%rdi, %rdx
    000000a3: 	andq	$-0x2, %rdx
    000000a7: 	leaq	(,%rdx,8), %rax
    000000af: 	addq	%rax, %rcx
    000000b2: 	addq	%rbx, %rax
    000000b5: 	cmpq	%rdx, %rdi
    000000b8: 	je	.Ltmp991 # Offset: 184
.Ltmp999:
    000000ba: 	movsd	(%rcx), %xmm0
    000000be: 	addsd	%xmm0, %xmm2
    000000c2: 	movsd	%xmm0, (%rax)
.Ltmp991:
    000000c6: 	movsd	%xmm3, 0x8(%rsp)
    000000cc: 	xorl	%ebp, %ebp
    000000ce: 	leaq	0x10(%rsp), %rbx
    000000d3: 	leaq	0xfa00(%rsp), %r13
    000000db: 	movsd	%xmm2, (%rsp)
    000000e0: 	leaq	DATAat0x52360(%rip), %r14
    000000e7: 	callq	clock@PLT # Offset: 231
    000000ec: 	movl	iterations(%rip), %ecx
    000000f2: 	movsd	(%rsp), %xmm2
    000000f7: 	movq	%rax, start_time(%rip)
    000000fe: 	movsd	0x8(%rsp), %xmm3
    00000104: 	testl	%ecx, %ecx
    00000106: 	jle	.Ltmp992 # Offset: 262
    00000108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp995:
    00000110: 	movq	%r13, %rax
    00000113: 	movapd	%xmm3, %xmm0
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp993:
    00000120: 	movsd	0x8(%rax), %xmm1
    00000125: 	movq	%rax, %rdx
    00000128: 	subq	$0x10, %rax
    0000012c: 	addsd	%xmm0, %xmm1
    00000130: 	movsd	0x10(%rax), %xmm0
    00000135: 	addsd	%xmm1, %xmm0
    00000139: 	cmpq	%rdx, %rbx
    0000013c: 	jne	.Ltmp993 # Offset: 316
    0000013e: 	ucomisd	%xmm2, %xmm0
    00000142: 	jp	.Ltmp994 # Offset: 322
    00000148: 	jne	.Ltmp994 # Offset: 328
    0000014e: 	addl	$0x1, %ebp
    00000151: 	cmpl	%ebp, %ecx
    00000153: 	jg	.Ltmp995 # Offset: 339
.Ltmp992:
    00000155: 	movq	%r12, %rdi
    00000158: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 344
    0000015d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000164: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000016b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000172: 	je	.Ltmp996 # Offset: 370
.Ltmp998:
    00000178: 	movq	-0x20(%rax), %rbp
    0000017c: 	callq	clock@PLT # Offset: 380
    00000181: 	movq	%rax, end_time(%rip)
    00000188: 	movq	0xfa18(%rsp), %rdx
    00000190: 	subq	%fs:0x28, %rdx
    00000199: 	jne	.Ltmp997 # Offset: 409
    0000019f: 	subq	start_time(%rip), %rax
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	movq	%rbp, %rdi
    000001ad: 	cvtsi2sd	%rax, %xmm0
    000001b2: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ba: 	addq	$0xfa20, %rsp
    000001c1: 	popq	%rbx
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp994:
    000001d0: 	movl	current_test(%rip), %edx
    000001d6: 	xorl	%eax, %eax
    000001d8: 	movq	%r14, %rsi
    000001db: 	movl	$0x1, %edi
    000001e0: 	movsd	%xmm3, 0x8(%rsp)
    000001e6: 	addl	$0x1, %ebp
    000001e9: 	movsd	%xmm2, (%rsp)
    000001ee: 	callq	__printf_chk@PLT # Offset: 494
    000001f3: 	movl	iterations(%rip), %ecx
    000001f9: 	movsd	(%rsp), %xmm2
    000001fe: 	movsd	0x8(%rsp), %xmm3
    00000204: 	cmpl	%ecx, %ebp
    00000206: 	jl	.Ltmp995 # Offset: 518
    0000020c: 	jmp	.Ltmp992 # Offset: 524
.Ltmp996:
    00000211: 	movq	-0x8(%rdx), %rax
    00000215: 	addq	$0x200, %rax
    0000021b: 	jmp	.Ltmp998 # Offset: 539
.Ltmp988:
    00000220: 	pxor	%xmm3, %xmm3
    00000224: 	movapd	%xmm3, %xmm2
    00000228: 	jmp	.Ltmp991 # Offset: 552
.Ltmp989:
    0000022d: 	pxor	%xmm3, %xmm3
    00000231: 	leaq	0x10(%rsp), %rax
    00000236: 	movapd	%xmm3, %xmm2
    0000023a: 	jmp	.Ltmp999 # Offset: 570
.Ltmp997:
    0000023f: 	callq	__stack_chk_fail@PLT # Offset: 575
DWARF CFI Instructions:
    <empty>
End of Function "_Z27test_accum_stdarray_reverseIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24test_accum_array_reverseIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0xc8f0
  Size        : 0x2b4
  MaxSize     : 0x2c0
  Offset      : 0xc8f0
  Section     : .text
  Orc Section : .local.text._Z24test_accum_array_reverseIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	movabsq	$0x7ffffffffffffff8, %rax
    0000000e: 	pushq	%r15
    00000010: 	movq	%rsi, %r15
    00000013: 	pushq	%r14
    00000015: 	subq	%rdi, %r15
    00000018: 	pushq	%r13
    0000001a: 	pushq	%r12
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	subq	$0x48, %rsp
    00000022: 	movq	%rdx, 0x38(%rsp)
    00000027: 	cmpq	%rax, %r15
    0000002a: 	ja	.Ltmp1000 # Offset: 42
    00000030: 	movq	%rdi, %rbx
    00000033: 	movq	%r15, %rdi
    00000036: 	movq	%rsi, %rbp
    00000039: 	callq	_Znam@PLT # Offset: 57
    0000003e: 	pxor	%xmm3, %xmm3
    00000042: 	movq	%rax, %r14
    00000045: 	movapd	%xmm3, %xmm2
    00000049: 	cmpq	%rbx, %rbp
    0000004c: 	je	.Ltmp1001 # Offset: 76
    0000004e: 	leaq	-0x8(%r15), %rcx
    00000052: 	shrq	$0x3, %rcx
    00000056: 	addq	$0x1, %rcx
    0000005a: 	cmpq	$0x8, %r15
    0000005e: 	je	.Ltmp1002 # Offset: 94
    00000064: 	movq	%rcx, %rdx
    00000067: 	pxor	%xmm3, %xmm3
    0000006b: 	xorl	%eax, %eax
    0000006d: 	shrq	%rdx
    00000070: 	movapd	%xmm3, %xmm2
    00000074: 	shlq	$0x4, %rdx
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1003:
    00000080: 	movupd	(%rbx,%rax), %xmm4
    00000085: 	movsd	0x8(%rbx,%rax), %xmm0
    0000008b: 	addsd	%xmm4, %xmm2
    0000008f: 	movups	%xmm4, (%r14,%rax)
    00000094: 	addq	$0x10, %rax
    00000098: 	addsd	%xmm0, %xmm2
    0000009c: 	cmpq	%rax, %rdx
    0000009f: 	jne	.Ltmp1003 # Offset: 159
    000000a1: 	movq	%rcx, %rdx
    000000a4: 	andq	$-0x2, %rdx
    000000a8: 	leaq	(,%rdx,8), %rax
    000000b0: 	addq	%rax, %rbx
    000000b3: 	addq	%r14, %rax
    000000b6: 	cmpq	%rdx, %rcx
    000000b9: 	je	.Ltmp1001 # Offset: 185
.Ltmp1015:
    000000bb: 	movsd	(%rbx), %xmm0
    000000bf: 	addsd	%xmm0, %xmm2
    000000c3: 	movsd	%xmm0, (%rax)
.Ltmp1001:
    000000c7: 	movsd	%xmm3, 0x10(%rsp)
    000000cd: 	movsd	%xmm2, 0x8(%rsp)
    000000d3: 	callq	clock@PLT # Offset: 211
    000000d8: 	movl	iterations(%rip), %edx
    000000de: 	movsd	0x8(%rsp), %xmm2
    000000e4: 	movq	%rax, start_time(%rip)
    000000eb: 	movsd	0x10(%rsp), %xmm3
    000000f1: 	testl	%edx, %edx
    000000f3: 	jle	.Ltmp1004 # Offset: 243
    000000f9: 	leaq	-0x8(%r15), %rcx
    000000fd: 	leaq	-0x10(%r14,%r15), %r10
    00000102: 	shrq	$0x3, %rcx
    00000106: 	movq	%r10, %rbp
    00000109: 	leaq	(%r14,%r15), %r8
    0000010d: 	addq	$0x1, %rcx
    00000111: 	leaq	DATAat0x52360(%rip), %r13
    00000118: 	movq	%rcx, %rax
    0000011b: 	movq	%rcx, %r9
    0000011e: 	shrq	%rax
    00000121: 	andq	$-0x2, %r9
    00000125: 	shlq	$0x4, %rax
    00000129: 	subq	%rax, %rbp
    0000012c: 	movq	%r9, %rax
    0000012f: 	negq	%rax
    00000132: 	cmpq	$0x8, %r15
    00000136: 	leaq	(%r8,%rax,8), %rbx
    0000013a: 	cmoveq	%r8, %rbx
    0000013e: 	xorl	%r12d, %r12d
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp1010:
    00000148: 	cmpq	%r8, %r14
    0000014b: 	je	.Ltmp1005 # Offset: 331
.Ltmp1012:
    00000151: 	cmpq	$0x8, %r15
    00000155: 	je	.Ltmp1006 # Offset: 341
    0000015b: 	movq	%r10, %rax
    0000015e: 	movapd	%xmm3, %xmm0
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1007:
    00000168: 	movsd	0x8(%rax), %xmm1
    0000016d: 	subq	$0x10, %rax
    00000171: 	addsd	%xmm1, %xmm0
    00000175: 	movsd	0x10(%rax), %xmm1
    0000017a: 	addsd	%xmm1, %xmm0
    0000017e: 	cmpq	%rax, %rbp
    00000181: 	jne	.Ltmp1007 # Offset: 385
    00000183: 	cmpq	%r9, %rcx
    00000186: 	je	.Ltmp1008 # Offset: 390
.Ltmp1013:
    00000188: 	addsd	-0x8(%rbx), %xmm0
.Ltmp1008:
    0000018d: 	ucomisd	%xmm0, %xmm2
    00000191: 	jp	.Ltmp1009 # Offset: 401
    00000193: 	jne	.Ltmp1009 # Offset: 403
    00000195: 	addl	$0x1, %r12d
    00000199: 	cmpl	%r12d, %edx
    0000019c: 	jg	.Ltmp1010 # Offset: 412
.Ltmp1004:
    0000019e: 	movq	0x38(%rsp), %rdi
    000001a3: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 419
    000001a8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001af: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001b6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001bd: 	je	.Ltmp1011 # Offset: 445
.Ltmp1014:
    000001c3: 	movq	-0x20(%rax), %rbp
    000001c7: 	callq	clock@PLT # Offset: 455
    000001cc: 	pxor	%xmm0, %xmm0
    000001d0: 	movq	%rbp, %rdi
    000001d3: 	movq	%rax, end_time(%rip)
    000001da: 	subq	start_time(%rip), %rax
    000001e1: 	cvtsi2sd	%rax, %xmm0
    000001e6: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ee: 	callq	_Z13record_resultdPKc # Offset: 494
    000001f3: 	addq	$0x48, %rsp
    000001f7: 	movq	%r14, %rdi
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_ZdaPv@PLT # TAILCALL  # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1009:
    00000210: 	movl	current_test(%rip), %edx
    00000216: 	xorl	%eax, %eax
    00000218: 	movq	%r13, %rsi
    0000021b: 	movl	$0x1, %edi
    00000220: 	movq	%r9, 0x28(%rsp)
    00000225: 	addl	$0x1, %r12d
    00000229: 	movq	%rcx, 0x20(%rsp)
    0000022e: 	movq	%r8, 0x18(%rsp)
    00000233: 	movq	%r10, 0x10(%rsp)
    00000238: 	movsd	%xmm3, 0x30(%rsp)
    0000023e: 	movsd	%xmm2, 0x8(%rsp)
    00000244: 	callq	__printf_chk@PLT # Offset: 580
    00000249: 	movl	iterations(%rip), %edx
    0000024f: 	movsd	0x8(%rsp), %xmm2
    00000255: 	movq	0x10(%rsp), %r10
    0000025a: 	movq	0x18(%rsp), %r8
    0000025f: 	cmpl	%r12d, %edx
    00000262: 	movq	0x20(%rsp), %rcx
    00000267: 	movq	0x28(%rsp), %r9
    0000026c: 	movsd	0x30(%rsp), %xmm3
    00000272: 	jle	.Ltmp1004 # Offset: 626
    00000278: 	cmpq	%r8, %r14
    0000027b: 	jne	.Ltmp1012 # Offset: 635
.Ltmp1005:
    00000281: 	movapd	%xmm3, %xmm0
    00000285: 	jmp	.Ltmp1008 # Offset: 645
.Ltmp1006:
    0000028a: 	movapd	%xmm3, %xmm0
    0000028e: 	jmp	.Ltmp1013 # Offset: 654
.Ltmp1011:
    00000293: 	movq	-0x8(%rdx), %rax
    00000297: 	addq	$0x200, %rax
    0000029d: 	jmp	.Ltmp1014 # Offset: 669
.Ltmp1002:
    000002a2: 	pxor	%xmm3, %xmm3
    000002a6: 	movapd	%xmm3, %xmm2
    000002aa: 	jmp	.Ltmp1015 # Offset: 682
.Ltmp1000:
    000002af: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 687
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_accum_array_reverseIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_accum_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0xcbb0
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0xcbb0
  Section     : .text
  Orc Section : .local.text._Z19test_accum_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x58(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x50(%rsp), %r15
    0000002a: 	movl	$0x3f800000, 0x40(%rsp)
    00000032: 	movq	%r15, 0x20(%rsp)
    00000037: 	movq	$0x1, 0x28(%rsp)
    00000040: 	movq	$0x0, 0x30(%rsp)
    00000049: 	movq	$0x0, 0x38(%rsp)
    00000052: 	movq	$0x0, 0x48(%rsp)
    0000005b: 	movq	$0x0, 0x50(%rsp)
    00000064: 	cmpq	%rsi, %rdi
    00000067: 	je	.Ltmp1016 # Offset: 103
    0000006d: 	pxor	%xmm3, %xmm3
    00000071: 	movq	%rdi, %rbx
    00000074: 	leaq	0x10(%rsp), %r13
    00000079: 	movq	%rsi, %r12
    0000007c: 	movsd	%xmm3, 0x8(%rsp)
    00000082: 	leaq	0x20(%rsp), %rbp
    00000087: 	movsd	%xmm3, (%rsp)
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp1017:
    00000090: 	movsd	(%rbx), %xmm0
    00000094: 	movq	%r13, %rdx
    00000097: 	xorl	%esi, %esi
    00000099: 	movq	%rbp, %rdi
    0000009c: 	unpcklpd	%xmm0, %xmm0
    000000a0: 	movaps	%xmm0, 0x10(%rsp)
    000000a5: 	callq	"_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE10_M_emplaceIJS0_IddEEEENS4_14_Node_iteratorIS2_Lb0ELb0EEENS4_20_Node_const_iteratorIS2_Lb0ELb0EEESt17integral_constantIbLb0EEDpOT_.constprop.0/1" # Offset: 165
    000000aa: 	movsd	(%rsp), %xmm1
    000000af: 	addsd	(%rbx), %xmm1
    000000b3: 	addq	$0x8, %rbx
    000000b7: 	movsd	%xmm1, (%rsp)
    000000bc: 	cmpq	%rbx, %r12
    000000bf: 	jne	.Ltmp1017 # Offset: 191
.Ltmp1030:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	movl	iterations(%rip), %ecx
    000000cc: 	xorl	%ebx, %ebx
    000000ce: 	leaq	DATAat0x52360(%rip), %r12
    000000d5: 	movq	%rax, start_time(%rip)
    000000dc: 	testl	%ecx, %ecx
    000000de: 	jle	.Ltmp1018 # Offset: 222
.Ltmp1022:
    000000e0: 	movq	0x30(%rsp), %rax
    000000e5: 	pxor	%xmm0, %xmm0
    000000e9: 	testq	%rax, %rax
    000000ec: 	je	.Ltmp1019 # Offset: 236
    000000ee: 	nop # Size: 2
.Ltmp1020:
    000000f0: 	movq	%rax, %rdx
    000000f3: 	movq	(%rax), %rax
    000000f6: 	addsd	0x10(%rdx), %xmm0
    000000fb: 	testq	%rax, %rax
    000000fe: 	jne	.Ltmp1020 # Offset: 254
.Ltmp1019:
    00000100: 	movsd	(%rsp), %xmm2
    00000105: 	ucomisd	%xmm0, %xmm2
    00000109: 	jp	.Ltmp1021 # Offset: 265
    0000010f: 	jne	.Ltmp1021 # Offset: 271
.Ltmp1028:
    00000115: 	addl	$0x1, %ebx
    00000118: 	cmpl	%ebx, %ecx
    0000011a: 	jg	.Ltmp1022 # Offset: 282
.Ltmp1018:
    0000011c: 	movq	%r14, %rdi
    0000011f: 	leaq	0x20(%rsp), %rbp
    00000124: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 292
    00000129: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000130: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000137: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000013e: 	je	.Ltmp1023 # Offset: 318
.Ltmp1029:
    00000144: 	movq	-0x20(%rax), %r12
    00000148: 	leaq	0x20(%rsp), %rbp
    0000014d: 	callq	clock@PLT # Offset: 333
    00000152: 	pxor	%xmm0, %xmm0
    00000156: 	movq	%rax, end_time(%rip)
    0000015d: 	movq	%r12, %rdi
    00000160: 	subq	start_time(%rip), %rax
    00000167: 	cvtsi2sd	%rax, %xmm0
    0000016c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000174: 	callq	_Z13record_resultdPKc # Offset: 372
    00000179: 	movq	0x30(%rsp), %rbx
    0000017e: 	testq	%rbx, %rbx
    00000181: 	je	.Ltmp1024 # Offset: 385
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1025:
    00000188: 	movq	%rbx, %rdi
    0000018b: 	movq	(%rbx), %rbx
    0000018e: 	movl	$0x18, %esi
    00000193: 	callq	_ZdlPvm@PLT # Offset: 403
    00000198: 	testq	%rbx, %rbx
    0000019b: 	jne	.Ltmp1025 # Offset: 411
.Ltmp1024:
    0000019d: 	movq	0x28(%rsp), %rax
    000001a2: 	movq	0x20(%rsp), %rdi
    000001a7: 	xorl	%esi, %esi
    000001a9: 	leaq	(,%rax,8), %rdx
    000001b1: 	callq	memset@PLT # Offset: 433
    000001b6: 	movq	0x20(%rsp), %rdi
    000001bb: 	movq	0x28(%rsp), %rax
    000001c0: 	movq	$0x0, 0x38(%rsp)
    000001c9: 	movq	$0x0, 0x30(%rsp)
    000001d2: 	cmpq	%r15, %rdi
    000001d5: 	je	.Ltmp1026 # Offset: 469
    000001d7: 	leaq	(,%rax,8), %rsi
    000001df: 	callq	_ZdlPvm@PLT # Offset: 479
.Ltmp1026:
    000001e4: 	movq	0x58(%rsp), %rax
    000001e9: 	subq	%fs:0x28, %rax
    000001f2: 	jne	.Ltmp1027 # Offset: 498
    000001f4: 	addq	$0x68, %rsp
    000001f8: 	popq	%rbx
    000001f9: 	popq	%rbp
    000001fa: 	popq	%r12
    000001fc: 	popq	%r13
    000001fe: 	popq	%r14
    00000200: 	popq	%r15
    00000202: 	retq # Offset: 514
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1021:
    00000208: 	movl	current_test(%rip), %edx
    0000020e: 	movq	%r12, %rsi
    00000211: 	movl	$0x1, %edi
    00000216: 	xorl	%eax, %eax
    00000218: 	leaq	0x20(%rsp), %rbp
    0000021d: 	callq	__printf_chk@PLT # Offset: 541
    00000222: 	movl	iterations(%rip), %ecx
    00000228: 	jmp	.Ltmp1028 # Offset: 552
.Ltmp1023:
    0000022d: 	movq	-0x8(%rdx), %rax
    00000231: 	addq	$0x200, %rax
    00000237: 	jmp	.Ltmp1029 # Offset: 567
.Ltmp1016:
    0000023c: 	pxor	%xmm4, %xmm4
    00000240: 	movsd	%xmm4, 0x8(%rsp)
    00000246: 	movsd	%xmm4, (%rsp)
    0000024b: 	jmp	.Ltmp1030 # Offset: 587
.Ltmp1027:
    00000250: 	callq	__stack_chk_fail@PLT # Offset: 592
    00000255: 	endbr64
    00000259: 	movq	%rax, %r12
    0000025c: 	movq	%rbp, %rdi
    0000025f: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEED2Ev # Offset: 607
    00000264: 	movq	%r12, %rdi
    00000267: 	callq	_Unwind_Resume@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_accum_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_accum_setIdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0xce20
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0xce20
  Section     : .text
  Orc Section : .local.text._Z14test_accum_setIdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x58, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x48(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x40(%rsp), %r13
    0000002a: 	movl	$0x3f800000, 0x30(%rsp)
    00000032: 	movq	%r13, 0x10(%rsp)
    00000037: 	movq	$0x1, 0x18(%rsp)
    00000040: 	movq	$0x0, 0x20(%rsp)
    00000049: 	movq	$0x0, 0x28(%rsp)
    00000052: 	movq	$0x0, 0x38(%rsp)
    0000005b: 	movq	$0x0, 0x40(%rsp)
    00000064: 	cmpq	%rsi, %rdi
    00000067: 	je	.Ltmp1031 # Offset: 103
    0000006d: 	pxor	%xmm3, %xmm3
    00000071: 	movq	%rdi, %rbx
    00000074: 	leaq	0x10(%rsp), %rbp
    00000079: 	movq	%rsi, %r14
    0000007c: 	movsd	%xmm3, 0x8(%rsp)
    00000082: 	movq	%xmm3, %r15
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1032:
    00000090: 	movq	%rbx, %rdx
    00000093: 	xorl	%esi, %esi
    00000095: 	movq	%rbp, %rdi
    00000098: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0/1" # Offset: 152
    0000009d: 	movq	%r15, %xmm1
    000000a2: 	addsd	(%rbx), %xmm1
    000000a6: 	addq	$0x8, %rbx
    000000aa: 	movq	%xmm1, %r15
    000000af: 	cmpq	%rbx, %r14
    000000b2: 	jne	.Ltmp1032 # Offset: 178
.Ltmp1045:
    000000b4: 	callq	clock@PLT # Offset: 180
    000000b9: 	movl	iterations(%rip), %ecx
    000000bf: 	xorl	%ebx, %ebx
    000000c1: 	leaq	DATAat0x52360(%rip), %r14
    000000c8: 	movq	%rax, start_time(%rip)
    000000cf: 	testl	%ecx, %ecx
    000000d1: 	jle	.Ltmp1033 # Offset: 209
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1037:
    000000d8: 	movq	0x20(%rsp), %rax
    000000dd: 	pxor	%xmm0, %xmm0
    000000e1: 	testq	%rax, %rax
    000000e4: 	je	.Ltmp1034 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1035:
    000000f0: 	movq	%rax, %rdx
    000000f3: 	movq	(%rax), %rax
    000000f6: 	addsd	0x8(%rdx), %xmm0
    000000fb: 	testq	%rax, %rax
    000000fe: 	jne	.Ltmp1035 # Offset: 254
.Ltmp1034:
    00000100: 	movq	%r15, %xmm2
    00000105: 	ucomisd	%xmm0, %xmm2
    00000109: 	jp	.Ltmp1036 # Offset: 265
    0000010f: 	jne	.Ltmp1036 # Offset: 271
.Ltmp1043:
    00000115: 	addl	$0x1, %ebx
    00000118: 	cmpl	%ecx, %ebx
    0000011a: 	jl	.Ltmp1037 # Offset: 282
.Ltmp1033:
    0000011c: 	movq	%r12, %rdi
    0000011f: 	leaq	0x10(%rsp), %rbp
    00000124: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 292
    00000129: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000130: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000137: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000013e: 	je	.Ltmp1038 # Offset: 318
.Ltmp1044:
    00000144: 	movq	-0x20(%rax), %r12
    00000148: 	leaq	0x10(%rsp), %rbp
    0000014d: 	callq	clock@PLT # Offset: 333
    00000152: 	pxor	%xmm0, %xmm0
    00000156: 	movq	%rax, end_time(%rip)
    0000015d: 	movq	%r12, %rdi
    00000160: 	subq	start_time(%rip), %rax
    00000167: 	cvtsi2sd	%rax, %xmm0
    0000016c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000174: 	callq	_Z13record_resultdPKc # Offset: 372
    00000179: 	movq	0x20(%rsp), %rbx
    0000017e: 	testq	%rbx, %rbx
    00000181: 	je	.Ltmp1039 # Offset: 385
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1040:
    00000188: 	movq	%rbx, %rdi
    0000018b: 	movq	(%rbx), %rbx
    0000018e: 	movl	$0x10, %esi
    00000193: 	callq	_ZdlPvm@PLT # Offset: 403
    00000198: 	testq	%rbx, %rbx
    0000019b: 	jne	.Ltmp1040 # Offset: 411
.Ltmp1039:
    0000019d: 	movq	0x18(%rsp), %rax
    000001a2: 	movq	0x10(%rsp), %rdi
    000001a7: 	xorl	%esi, %esi
    000001a9: 	leaq	(,%rax,8), %rdx
    000001b1: 	callq	memset@PLT # Offset: 433
    000001b6: 	movq	0x10(%rsp), %rdi
    000001bb: 	movq	0x18(%rsp), %rax
    000001c0: 	movq	$0x0, 0x28(%rsp)
    000001c9: 	movq	$0x0, 0x20(%rsp)
    000001d2: 	cmpq	%r13, %rdi
    000001d5: 	je	.Ltmp1041 # Offset: 469
    000001d7: 	leaq	(,%rax,8), %rsi
    000001df: 	callq	_ZdlPvm@PLT # Offset: 479
.Ltmp1041:
    000001e4: 	movq	0x48(%rsp), %rax
    000001e9: 	subq	%fs:0x28, %rax
    000001f2: 	jne	.Ltmp1042 # Offset: 498
    000001f4: 	addq	$0x58, %rsp
    000001f8: 	popq	%rbx
    000001f9: 	popq	%rbp
    000001fa: 	popq	%r12
    000001fc: 	popq	%r13
    000001fe: 	popq	%r14
    00000200: 	popq	%r15
    00000202: 	retq # Offset: 514
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1036:
    00000208: 	movl	current_test(%rip), %edx
    0000020e: 	movq	%r14, %rsi
    00000211: 	movl	$0x1, %edi
    00000216: 	xorl	%eax, %eax
    00000218: 	leaq	0x10(%rsp), %rbp
    0000021d: 	callq	__printf_chk@PLT # Offset: 541
    00000222: 	movl	iterations(%rip), %ecx
    00000228: 	jmp	.Ltmp1043 # Offset: 552
.Ltmp1038:
    0000022d: 	movq	-0x8(%rdx), %rax
    00000231: 	addq	$0x200, %rax
    00000237: 	jmp	.Ltmp1044 # Offset: 567
.Ltmp1031:
    0000023c: 	pxor	%xmm4, %xmm4
    00000240: 	movsd	%xmm4, 0x8(%rsp)
    00000246: 	movq	%xmm4, %r15
    0000024b: 	jmp	.Ltmp1045 # Offset: 587
.Ltmp1042:
    00000250: 	callq	__stack_chk_fail@PLT # Offset: 592
    00000255: 	endbr64
    00000259: 	movq	%rax, %r12
    0000025c: 	movq	%rbp, %rdi
    0000025f: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEED2Ev # Offset: 607
    00000264: 	movq	%r12, %rdi
    00000267: 	callq	_Unwind_Resume@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_accum_setIdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_accum_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0xd090
  Size        : 0x277
  MaxSize     : 0x280
  Offset      : 0xd090
  Section     : .text
  Orc Section : .local.text._Z19test_accum_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x58(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x28(%rsp), %rbx
    0000002a: 	movl	$0x0, 0x28(%rsp)
    00000032: 	movq	$0x0, 0x30(%rsp)
    0000003b: 	movq	%rbx, 0x38(%rsp)
    00000040: 	movq	%rbx, 0x40(%rsp)
    00000045: 	movq	$0x0, 0x48(%rsp)
    0000004e: 	cmpq	%rsi, %rdi
    00000051: 	je	.Ltmp1046 # Offset: 81
    00000057: 	pxor	%xmm6, %xmm6
    0000005b: 	movq	%rdi, %rbp
    0000005e: 	movq	%rsi, %r12
    00000061: 	movsd	%xmm6, 0x18(%rsp)
    00000067: 	movsd	%xmm6, 0x10(%rsp)
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp1053:
    00000070: 	movsd	(%rbp), %xmm2
    00000075: 	movl	$0x30, %edi
    0000007a: 	movsd	%xmm2, 0x8(%rsp)
    00000080: 	callq	_Znwm@PLT # Offset: 128
    00000085: 	movsd	0x8(%rsp), %xmm0
    0000008b: 	movq	0x30(%rsp), %rdx
    00000090: 	movq	%rax, %rsi
    00000093: 	unpcklpd	%xmm0, %xmm0
    00000097: 	movups	%xmm0, 0x20(%rax)
    0000009b: 	testq	%rdx, %rdx
    0000009e: 	jne	.Ltmp1047 # Offset: 158
    000000a0: 	jmp	.Ltmp1048 # Offset: 160
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp1050:
    000000a8: 	movq	0x10(%rdx), %rcx
    000000ac: 	testq	%rcx, %rcx
    000000af: 	je	.Ltmp1049 # Offset: 175
.Ltmp1051:
    000000b1: 	movq	%rcx, %rdx
.Ltmp1047:
    000000b4: 	movsd	0x20(%rdx), %xmm0
    000000b9: 	comisd	0x8(%rsp), %xmm0
    000000bf: 	ja	.Ltmp1050 # Offset: 191
    000000c1: 	movq	0x18(%rdx), %rcx
    000000c5: 	testq	%rcx, %rcx
    000000c8: 	jne	.Ltmp1051 # Offset: 200
.Ltmp1049:
    000000ca: 	movl	$0x1, %edi
    000000cf: 	cmpq	%rbx, %rdx
    000000d2: 	je	.Ltmp1052 # Offset: 210
    000000d4: 	xorl	%edi, %edi
    000000d6: 	comisd	0x8(%rsp), %xmm0
    000000dc: 	seta	%dil
.Ltmp1052:
    000000e0: 	movq	%rbx, %rcx
    000000e3: 	addq	$0x8, %rbp
    000000e7: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 231
    000000ec: 	movsd	0x10(%rsp), %xmm3
    000000f2: 	addsd	-0x8(%rbp), %xmm3
    000000f7: 	addq	$0x1, 0x48(%rsp)
    000000fd: 	movsd	%xmm3, 0x10(%rsp)
    00000103: 	cmpq	%rbp, %r12
    00000106: 	jne	.Ltmp1053 # Offset: 262
.Ltmp1063:
    0000010c: 	callq	clock@PLT # Offset: 268
    00000111: 	movl	iterations(%rip), %r12d
    00000118: 	xorl	%ebp, %ebp
    0000011a: 	leaq	DATAat0x52360(%rip), %r14
    00000121: 	movq	%rax, start_time(%rip)
    00000128: 	testl	%r12d, %r12d
    0000012b: 	jle	.Ltmp1054 # Offset: 299
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp1058:
    00000130: 	movq	0x38(%rsp), %rax
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	cmpq	%rbx, %rax
    0000013c: 	je	.Ltmp1055 # Offset: 316
    0000013e: 	nop # Size: 2
.Ltmp1056:
    00000140: 	movq	%rax, %rdi
    00000143: 	movsd	%xmm0, 0x8(%rsp)
    00000149: 	movq	%rax, %r15
    0000014c: 	callq	_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@PLT # Offset: 332
    00000151: 	movsd	0x8(%rsp), %xmm0
    00000157: 	addsd	0x28(%r15), %xmm0
    0000015d: 	cmpq	%rbx, %rax
    00000160: 	jne	.Ltmp1056 # Offset: 352
.Ltmp1055:
    00000162: 	movsd	0x10(%rsp), %xmm4
    00000168: 	ucomisd	%xmm0, %xmm4
    0000016c: 	jp	.Ltmp1057 # Offset: 364
    00000172: 	jne	.Ltmp1057 # Offset: 370
.Ltmp1061:
    00000178: 	addl	$0x1, %ebp
    0000017b: 	cmpl	%ebp, %r12d
    0000017e: 	jg	.Ltmp1058 # Offset: 382
.Ltmp1054:
    00000180: 	movq	%r13, %rdi
    00000183: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 387
    00000188: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000196: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000019d: 	je	.Ltmp1059 # Offset: 413
.Ltmp1062:
    000001a3: 	movq	-0x20(%rax), %rbp
    000001a7: 	callq	clock@PLT # Offset: 423
    000001ac: 	pxor	%xmm0, %xmm0
    000001b0: 	movq	%rax, end_time(%rip)
    000001b7: 	movq	%rbp, %rdi
    000001ba: 	subq	start_time(%rip), %rax
    000001c1: 	cvtsi2sd	%rax, %xmm0
    000001c6: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ce: 	callq	_Z13record_resultdPKc # Offset: 462
    000001d3: 	movq	0x30(%rsp), %rdi
    000001d8: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 472
    000001dd: 	movq	0x58(%rsp), %rax
    000001e2: 	subq	%fs:0x28, %rax
    000001eb: 	jne	.Ltmp1060 # Offset: 491
    000001ed: 	addq	$0x68, %rsp
    000001f1: 	popq	%rbx
    000001f2: 	popq	%rbp
    000001f3: 	popq	%r12
    000001f5: 	popq	%r13
    000001f7: 	popq	%r14
    000001f9: 	popq	%r15
    000001fb: 	retq # Offset: 507
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1057:
    00000200: 	movl	current_test(%rip), %edx
    00000206: 	movq	%r14, %rsi
    00000209: 	movl	$0x1, %edi
    0000020e: 	xorl	%eax, %eax
    00000210: 	callq	__printf_chk@PLT # Offset: 528
    00000215: 	movl	iterations(%rip), %r12d
    0000021c: 	jmp	.Ltmp1061 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp1048:
    00000228: 	movl	$0x1, %edi
    0000022d: 	movq	%rbx, %rdx
    00000230: 	jmp	.Ltmp1052 # Offset: 560
.Ltmp1059:
    00000235: 	movq	-0x8(%rdx), %rax
    00000239: 	addq	$0x200, %rax
    0000023f: 	jmp	.Ltmp1062 # Offset: 575
.Ltmp1046:
    00000244: 	pxor	%xmm7, %xmm7
    00000248: 	movsd	%xmm7, 0x18(%rsp)
    0000024e: 	movsd	%xmm7, 0x10(%rsp)
    00000254: 	jmp	.Ltmp1063 # Offset: 596
.Ltmp1060:
    00000259: 	callq	__stack_chk_fail@PLT # Offset: 601
    0000025e: 	endbr64
    00000262: 	movq	%rax, %rbp
    00000265: 	movq	0x30(%rsp), %rdi
    0000026a: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 618
    0000026f: 	movq	%rbp, %rdi
    00000272: 	callq	_Unwind_Resume@PLT # Offset: 626
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_accum_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_accum_setIdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0xd310
  Size        : 0x276
  MaxSize     : 0x280
  Offset      : 0xd310
  Section     : .text
  Orc Section : .local.text._Z14test_accum_setIdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x58(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x28(%rsp), %rbx
    0000002a: 	movl	$0x0, 0x28(%rsp)
    00000032: 	movq	$0x0, 0x30(%rsp)
    0000003b: 	movq	%rbx, 0x38(%rsp)
    00000040: 	movq	%rbx, 0x40(%rsp)
    00000045: 	movq	$0x0, 0x48(%rsp)
    0000004e: 	cmpq	%rsi, %rdi
    00000051: 	je	.Ltmp1064 # Offset: 81
    00000057: 	pxor	%xmm4, %xmm4
    0000005b: 	movq	%rdi, %rbp
    0000005e: 	movq	%rsi, %r14
    00000061: 	movsd	%xmm4, 0x18(%rsp)
    00000067: 	movsd	%xmm4, 0x10(%rsp)
.Ltmp1066:
    0000006d: 	movq	%rbx, %r12
    00000070: 	movl	$0x1, %r13d
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1071:
    00000080: 	movl	$0x28, %edi
    00000085: 	callq	_Znwm@PLT # Offset: 133
    0000008a: 	movsd	(%rbp), %xmm0
    0000008f: 	movq	%rax, %rsi
    00000092: 	movzbl	%r13b, %edi
    00000096: 	movq	%rbx, %rcx
    00000099: 	movq	%r12, %rdx
    0000009c: 	addq	$0x8, %rbp
    000000a0: 	movsd	%xmm0, 0x20(%rax)
    000000a5: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 165
    000000aa: 	movsd	0x10(%rsp), %xmm2
    000000b0: 	addsd	-0x8(%rbp), %xmm2
    000000b5: 	addq	$0x1, 0x48(%rsp)
    000000bb: 	movsd	%xmm2, 0x10(%rsp)
    000000c1: 	cmpq	%rbp, %r14
    000000c4: 	je	.Ltmp1065 # Offset: 196
    000000c6: 	movq	0x30(%rsp), %r12
    000000cb: 	testq	%r12, %r12
    000000ce: 	je	.Ltmp1066 # Offset: 206
    000000d0: 	movsd	(%rbp), %xmm1
    000000d5: 	jmp	.Ltmp1067 # Offset: 213
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1069:
    000000e0: 	movq	0x10(%r12), %rax
    000000e5: 	testq	%rax, %rax
    000000e8: 	je	.Ltmp1068 # Offset: 232
.Ltmp1070:
    000000ea: 	movq	%rax, %r12
.Ltmp1067:
    000000ed: 	movsd	0x20(%r12), %xmm0
    000000f4: 	comisd	%xmm1, %xmm0
    000000f8: 	ja	.Ltmp1069 # Offset: 248
    000000fa: 	movq	0x18(%r12), %rax
    000000ff: 	testq	%rax, %rax
    00000102: 	jne	.Ltmp1070 # Offset: 258
.Ltmp1068:
    00000104: 	movl	$0x1, %r13d
    0000010a: 	cmpq	%rbx, %r12
    0000010d: 	je	.Ltmp1071 # Offset: 269
    00000113: 	comisd	%xmm1, %xmm0
    00000117: 	seta	%r13b
    0000011b: 	jmp	.Ltmp1071 # Offset: 283
.Ltmp1064:
    00000120: 	pxor	%xmm5, %xmm5
    00000124: 	movsd	%xmm5, 0x18(%rsp)
    0000012a: 	movsd	%xmm5, 0x10(%rsp)
.Ltmp1065:
    00000130: 	callq	clock@PLT # Offset: 304
    00000135: 	movl	iterations(%rip), %r12d
    0000013c: 	xorl	%ebp, %ebp
    0000013e: 	leaq	DATAat0x52360(%rip), %r13
    00000145: 	movq	%rax, start_time(%rip)
    0000014c: 	testl	%r12d, %r12d
    0000014f: 	jle	.Ltmp1072 # Offset: 335
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp1076:
    00000158: 	movq	0x38(%rsp), %rax
    0000015d: 	pxor	%xmm0, %xmm0
    00000161: 	cmpq	%rbx, %rax
    00000164: 	je	.Ltmp1073 # Offset: 356
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1074:
    00000170: 	movq	%rax, %rdi
    00000173: 	movsd	%xmm0, 0x8(%rsp)
    00000179: 	movq	%rax, %r14
    0000017c: 	callq	_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@PLT # Offset: 380
    00000181: 	movsd	0x8(%rsp), %xmm0
    00000187: 	addsd	0x20(%r14), %xmm0
    0000018d: 	cmpq	%rbx, %rax
    00000190: 	jne	.Ltmp1074 # Offset: 400
.Ltmp1073:
    00000192: 	ucomisd	0x10(%rsp), %xmm0
    00000198: 	jp	.Ltmp1075 # Offset: 408
    0000019e: 	jne	.Ltmp1075 # Offset: 414
.Ltmp1079:
    000001a4: 	addl	$0x1, %ebp
    000001a7: 	cmpl	%r12d, %ebp
    000001aa: 	jl	.Ltmp1076 # Offset: 426
.Ltmp1072:
    000001ac: 	movq	%r15, %rdi
    000001af: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 431
    000001b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001bb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c9: 	je	.Ltmp1077 # Offset: 457
.Ltmp1080:
    000001cb: 	movq	-0x20(%rax), %rbp
    000001cf: 	callq	clock@PLT # Offset: 463
    000001d4: 	pxor	%xmm0, %xmm0
    000001d8: 	movq	%rax, end_time(%rip)
    000001df: 	movq	%rbp, %rdi
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x53788(%rip), %xmm0
    000001f6: 	callq	_Z13record_resultdPKc # Offset: 502
    000001fb: 	movq	0x30(%rsp), %rdi
    00000200: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 512
    00000205: 	movq	0x58(%rsp), %rax
    0000020a: 	subq	%fs:0x28, %rax
    00000213: 	jne	.Ltmp1078 # Offset: 531
    00000215: 	addq	$0x68, %rsp
    00000219: 	popq	%rbx
    0000021a: 	popq	%rbp
    0000021b: 	popq	%r12
    0000021d: 	popq	%r13
    0000021f: 	popq	%r14
    00000221: 	popq	%r15
    00000223: 	retq # Offset: 547
    00000224: 	nopl	(%rax) # Size: 4
.Ltmp1075:
    00000228: 	movl	current_test(%rip), %edx
    0000022e: 	movq	%r13, %rsi
    00000231: 	movl	$0x1, %edi
    00000236: 	xorl	%eax, %eax
    00000238: 	callq	__printf_chk@PLT # Offset: 568
    0000023d: 	movl	iterations(%rip), %r12d
    00000244: 	jmp	.Ltmp1079 # Offset: 580
.Ltmp1077:
    00000249: 	movq	-0x8(%rdx), %rax
    0000024d: 	addq	$0x200, %rax
    00000253: 	jmp	.Ltmp1080 # Offset: 595
.Ltmp1078:
    00000258: 	callq	__stack_chk_fail@PLT # Offset: 600
    0000025d: 	endbr64
    00000261: 	movq	%rax, %rbp
    00000264: 	movq	0x30(%rsp), %rdi
    00000269: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 617
    0000026e: 	movq	%rbp, %rdi
    00000271: 	callq	_Unwind_Resume@PLT # Offset: 625
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_accum_setIdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_accumId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0xd590
  Size        : 0x2a0
  MaxSize     : 0x2a0
  Offset      : 0xd590
  Section     : .text
  Orc Section : .local.text._Z10test_accumId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	movl	$0x20, %edi
    0000000e: 	pushq	%r14
    00000010: 	movq	%rsi, %r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rdx, %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%r14, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	subq	%r15, %r12
    00000021: 	pushq	%rbx
    00000022: 	xorl	%ebx, %ebx
    00000024: 	subq	$0x18, %rsp
    00000028: 	callq	_Znwm@PLT # Offset: 40
    0000002d: 	pxor	%xmm0, %xmm0
    00000031: 	movq	$0x0, 0x8(%rax)
    00000039: 	movq	%rax, %rbp
    0000003c: 	movups	%xmm0, 0x10(%rax)
    00000040: 	testq	%r12, %r12
    00000043: 	jle	.Ltmp1081 # Offset: 67
    00000049: 	sarq	$0x3, %r12
    0000004d: 	subq	$0x2, %r12
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp1097:
    00000058: 	movl	$0x18, %edi
    0000005d: 	callq	_Znwm@PLT # Offset: 93
    00000062: 	movq	0x18(%rbp), %rdx
    00000066: 	movq	$0x0, (%rax)
    0000006d: 	movq	$0x0, 0x8(%rax)
    00000075: 	movq	%rdx, 0x10(%rax)
    00000079: 	testq	%rdx, %rdx
    0000007c: 	je	.Ltmp1082 # Offset: 124
    0000007e: 	movq	%rax, 0x8(%rdx)
.Ltmp1082:
    00000082: 	movq	0x10(%rbp), %rbx
    00000086: 	movq	%rax, 0x18(%rbp)
    0000008a: 	testq	%rbx, %rbx
    0000008d: 	je	.Ltmp1083 # Offset: 141
    00000093: 	addq	$0x1, 0x8(%rbp)
    00000098: 	cmpq	$-0x1, %r12
    0000009c: 	je	.Ltmp1081 # Offset: 156
.Ltmp1085:
    0000009e: 	movl	$0x18, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	0x18(%rbp), %rdx
    000000ac: 	movq	$0x0, (%rax)
    000000b3: 	movq	$0x0, 0x8(%rax)
    000000bb: 	movq	%rdx, 0x10(%rax)
    000000bf: 	testq	%rdx, %rdx
    000000c2: 	je	.Ltmp1084 # Offset: 194
    000000c4: 	movq	%rax, 0x8(%rdx)
.Ltmp1084:
    000000c8: 	addq	$0x1, 0x8(%rbp)
    000000cd: 	movq	0x10(%rbp), %rbx
    000000d1: 	movq	%rax, 0x18(%rbp)
    000000d5: 	subq	$0x1, %r12
    000000d9: 	jae	.Ltmp1085 # Offset: 217
.Ltmp1081:
    000000db: 	cmpq	%r15, %r14
    000000de: 	je	.Ltmp1086 # Offset: 222
.Ltmp1099:
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	%rbx, %rax
    000000eb: 	movapd	%xmm2, %xmm1
    000000ef: 	nop # Size: 1
.Ltmp1087:
    000000f0: 	movsd	(%r15), %xmm0
    000000f5: 	movq	%rax, %rdx
    000000f8: 	addq	$0x8, %r15
    000000fc: 	movq	0x8(%rax), %rax
    00000100: 	addsd	%xmm0, %xmm1
    00000104: 	movsd	%xmm0, (%rdx)
    00000108: 	cmpq	%r15, %r14
    0000010b: 	jne	.Ltmp1087 # Offset: 267
.Ltmp1100:
    0000010d: 	movsd	%xmm2, 0x8(%rsp)
    00000113: 	xorl	%r12d, %r12d
    00000116: 	leaq	DATAat0x52360(%rip), %r14
    0000011d: 	movsd	%xmm1, (%rsp)
    00000122: 	callq	clock@PLT # Offset: 290
    00000127: 	movl	iterations(%rip), %ecx
    0000012d: 	movsd	(%rsp), %xmm1
    00000132: 	movq	%rax, start_time(%rip)
    00000139: 	movsd	0x8(%rsp), %xmm2
    0000013f: 	testl	%ecx, %ecx
    00000141: 	jle	.Ltmp1088 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1092:
    00000148: 	movq	%rbx, %rax
    0000014b: 	movapd	%xmm2, %xmm0
    0000014f: 	testq	%rbx, %rbx
    00000152: 	je	.Ltmp1089 # Offset: 338
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp1090:
    00000158: 	movq	%rax, %rdx
    0000015b: 	movq	0x8(%rax), %rax
    0000015f: 	addsd	(%rdx), %xmm0
    00000163: 	testq	%rax, %rax
    00000166: 	jne	.Ltmp1090 # Offset: 358
.Ltmp1089:
    00000168: 	ucomisd	%xmm0, %xmm1
    0000016c: 	jp	.Ltmp1091 # Offset: 364
    00000172: 	jne	.Ltmp1091 # Offset: 370
    00000178: 	addl	$0x1, %r12d
    0000017c: 	cmpl	%ecx, %r12d
    0000017f: 	jl	.Ltmp1092 # Offset: 383
.Ltmp1088:
    00000181: 	movq	%r13, %rdi
    00000184: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 388
    00000189: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000190: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000197: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000019e: 	je	.Ltmp1093 # Offset: 414
.Ltmp1098:
    000001a4: 	movq	-0x20(%rax), %r12
    000001a8: 	callq	clock@PLT # Offset: 424
    000001ad: 	pxor	%xmm0, %xmm0
    000001b1: 	movq	%rax, end_time(%rip)
    000001b8: 	movq	%r12, %rdi
    000001bb: 	subq	start_time(%rip), %rax
    000001c2: 	cvtsi2sd	%rax, %xmm0
    000001c7: 	divsd	DATAat0x53788(%rip), %xmm0
    000001cf: 	callq	_Z13record_resultdPKc # Offset: 463
    000001d4: 	testq	%rbx, %rbx
    000001d7: 	je	.Ltmp1094 # Offset: 471
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1095:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	movq	0x8(%rbx), %rbx
    000001e7: 	movl	$0x18, %esi
    000001ec: 	callq	_ZdlPvm@PLT # Offset: 492
    000001f1: 	testq	%rbx, %rbx
    000001f4: 	jne	.Ltmp1095 # Offset: 500
.Ltmp1094:
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	movq	%rbp, %rdi
    000001fd: 	movl	$0x20, %esi
    00000202: 	popq	%rbx
    00000203: 	popq	%rbp
    00000204: 	popq	%r12
    00000206: 	popq	%r13
    00000208: 	popq	%r14
    0000020a: 	popq	%r15
    0000020c: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp1091:
    00000218: 	movl	current_test(%rip), %edx
    0000021e: 	xorl	%eax, %eax
    00000220: 	movq	%r14, %rsi
    00000223: 	movl	$0x1, %edi
    00000228: 	movsd	%xmm2, 0x8(%rsp)
    0000022e: 	addl	$0x1, %r12d
    00000232: 	movsd	%xmm1, (%rsp)
    00000237: 	callq	__printf_chk@PLT # Offset: 567
    0000023c: 	movl	iterations(%rip), %ecx
    00000242: 	movsd	(%rsp), %xmm1
    00000247: 	movsd	0x8(%rsp), %xmm2
    0000024d: 	cmpl	%r12d, %ecx
    00000250: 	jg	.Ltmp1092 # Offset: 592
    00000256: 	jmp	.Ltmp1088 # Offset: 598
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1083:
    00000260: 	addq	$0x1, 0x8(%rbp)
    00000265: 	movq	%rax, 0x10(%rbp)
    00000269: 	cmpq	$-0x1, %r12
    0000026d: 	je	.Ltmp1096 # Offset: 621
    0000026f: 	subq	$0x1, %r12
    00000273: 	jmp	.Ltmp1097 # Offset: 627
.Ltmp1093:
    00000278: 	movq	-0x8(%rdx), %rax
    0000027c: 	addq	$0x200, %rax
    00000282: 	jmp	.Ltmp1098 # Offset: 642
.Ltmp1096:
    00000287: 	movq	%rax, %rbx
    0000028a: 	cmpq	%r15, %r14
    0000028d: 	jne	.Ltmp1099 # Offset: 653
.Ltmp1086:
    00000293: 	pxor	%xmm2, %xmm2
    00000297: 	movapd	%xmm2, %xmm1
    0000029b: 	jmp	.Ltmp1100 # Offset: 667
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_accumId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_accumId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0xd830
  Size        : 0x28f
  MaxSize     : 0x290
  Offset      : 0xd830
  Section     : .text
  Orc Section : .local.text._Z10test_accumId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	movl	$0x18, %edi
    0000000e: 	pushq	%r14
    00000010: 	movq	%rsi, %r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rdx, %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%r14, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	subq	%r15, %r12
    00000021: 	pushq	%rbx
    00000022: 	xorl	%ebx, %ebx
    00000024: 	subq	$0x18, %rsp
    00000028: 	callq	_Znwm@PLT # Offset: 40
    0000002d: 	pxor	%xmm0, %xmm0
    00000031: 	movl	$0x0, 0x4(%rax)
    00000038: 	movq	%rax, %rbp
    0000003b: 	movups	%xmm0, 0x8(%rax)
    0000003f: 	testq	%r12, %r12
    00000042: 	jle	.Ltmp1101 # Offset: 66
    00000048: 	sarq	$0x3, %r12
    0000004c: 	subq	$0x2, %r12
.Ltmp1117:
    00000050: 	movl	$0x10, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movq	0x10(%rbp), %rdx
    0000005e: 	movq	$0x0, (%rax)
    00000065: 	movq	$0x0, 0x8(%rax)
    0000006d: 	testq	%rdx, %rdx
    00000070: 	je	.Ltmp1102 # Offset: 112
    00000072: 	movq	%rax, 0x8(%rdx)
.Ltmp1102:
    00000076: 	movq	0x8(%rbp), %rbx
    0000007a: 	movq	%rax, 0x10(%rbp)
    0000007e: 	testq	%rbx, %rbx
    00000081: 	je	.Ltmp1103 # Offset: 129
    00000087: 	addl	$0x1, 0x4(%rbp)
    0000008b: 	cmpq	$-0x1, %r12
    0000008f: 	je	.Ltmp1101 # Offset: 143
.Ltmp1105:
    00000091: 	movl	$0x10, %edi
    00000096: 	callq	_Znwm@PLT # Offset: 150
    0000009b: 	movq	0x10(%rbp), %rdx
    0000009f: 	movq	$0x0, (%rax)
    000000a6: 	movq	$0x0, 0x8(%rax)
    000000ae: 	testq	%rdx, %rdx
    000000b1: 	je	.Ltmp1104 # Offset: 177
    000000b3: 	movq	%rax, 0x8(%rdx)
.Ltmp1104:
    000000b7: 	addl	$0x1, 0x4(%rbp)
    000000bb: 	movq	0x8(%rbp), %rbx
    000000bf: 	movq	%rax, 0x10(%rbp)
    000000c3: 	subq	$0x1, %r12
    000000c7: 	jae	.Ltmp1105 # Offset: 199
.Ltmp1101:
    000000c9: 	cmpq	%r15, %r14
    000000cc: 	je	.Ltmp1106 # Offset: 204
.Ltmp1119:
    000000d2: 	pxor	%xmm2, %xmm2
    000000d6: 	movq	%rbx, %rax
    000000d9: 	movapd	%xmm2, %xmm1
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1107:
    000000e0: 	movsd	(%r15), %xmm0
    000000e5: 	movq	%rax, %rdx
    000000e8: 	addq	$0x8, %r15
    000000ec: 	movq	0x8(%rax), %rax
    000000f0: 	addsd	%xmm0, %xmm1
    000000f4: 	movsd	%xmm0, (%rdx)
    000000f8: 	cmpq	%r15, %r14
    000000fb: 	jne	.Ltmp1107 # Offset: 251
.Ltmp1120:
    000000fd: 	movsd	%xmm2, 0x8(%rsp)
    00000103: 	xorl	%r12d, %r12d
    00000106: 	leaq	DATAat0x52360(%rip), %r14
    0000010d: 	movsd	%xmm1, (%rsp)
    00000112: 	callq	clock@PLT # Offset: 274
    00000117: 	movl	iterations(%rip), %ecx
    0000011d: 	movsd	(%rsp), %xmm1
    00000122: 	movq	%rax, start_time(%rip)
    00000129: 	movsd	0x8(%rsp), %xmm2
    0000012f: 	testl	%ecx, %ecx
    00000131: 	jle	.Ltmp1108 # Offset: 305
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1112:
    00000138: 	movq	%rbx, %rax
    0000013b: 	movapd	%xmm2, %xmm0
    0000013f: 	testq	%rbx, %rbx
    00000142: 	je	.Ltmp1109 # Offset: 322
    00000144: 	nopl	(%rax) # Size: 4
.Ltmp1110:
    00000148: 	movq	%rax, %rdx
    0000014b: 	movq	0x8(%rax), %rax
    0000014f: 	addsd	(%rdx), %xmm0
    00000153: 	testq	%rax, %rax
    00000156: 	jne	.Ltmp1110 # Offset: 342
.Ltmp1109:
    00000158: 	ucomisd	%xmm0, %xmm1
    0000015c: 	jp	.Ltmp1111 # Offset: 348
    00000162: 	jne	.Ltmp1111 # Offset: 354
    00000168: 	addl	$0x1, %r12d
    0000016c: 	cmpl	%ecx, %r12d
    0000016f: 	jl	.Ltmp1112 # Offset: 367
.Ltmp1108:
    00000171: 	movq	%r13, %rdi
    00000174: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 372
    00000179: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000180: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000187: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000018e: 	je	.Ltmp1113 # Offset: 398
.Ltmp1118:
    00000194: 	movq	-0x20(%rax), %r12
    00000198: 	callq	clock@PLT # Offset: 408
    0000019d: 	pxor	%xmm0, %xmm0
    000001a1: 	movq	%rax, end_time(%rip)
    000001a8: 	movq	%r12, %rdi
    000001ab: 	subq	start_time(%rip), %rax
    000001b2: 	cvtsi2sd	%rax, %xmm0
    000001b7: 	divsd	DATAat0x53788(%rip), %xmm0
    000001bf: 	callq	_Z13record_resultdPKc # Offset: 447
    000001c4: 	testq	%rbx, %rbx
    000001c7: 	je	.Ltmp1114 # Offset: 455
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp1115:
    000001d0: 	movq	%rbx, %rdi
    000001d3: 	movq	0x8(%rbx), %rbx
    000001d7: 	movl	$0x10, %esi
    000001dc: 	callq	_ZdlPvm@PLT # Offset: 476
    000001e1: 	testq	%rbx, %rbx
    000001e4: 	jne	.Ltmp1115 # Offset: 484
.Ltmp1114:
    000001e6: 	addq	$0x18, %rsp
    000001ea: 	movq	%rbp, %rdi
    000001ed: 	movl	$0x18, %esi
    000001f2: 	popq	%rbx
    000001f3: 	popq	%rbp
    000001f4: 	popq	%r12
    000001f6: 	popq	%r13
    000001f8: 	popq	%r14
    000001fa: 	popq	%r15
    000001fc: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp1111:
    00000208: 	movl	current_test(%rip), %edx
    0000020e: 	xorl	%eax, %eax
    00000210: 	movq	%r14, %rsi
    00000213: 	movl	$0x1, %edi
    00000218: 	movsd	%xmm2, 0x8(%rsp)
    0000021e: 	addl	$0x1, %r12d
    00000222: 	movsd	%xmm1, (%rsp)
    00000227: 	callq	__printf_chk@PLT # Offset: 551
    0000022c: 	movl	iterations(%rip), %ecx
    00000232: 	movsd	(%rsp), %xmm1
    00000237: 	movsd	0x8(%rsp), %xmm2
    0000023d: 	cmpl	%r12d, %ecx
    00000240: 	jg	.Ltmp1112 # Offset: 576
    00000246: 	jmp	.Ltmp1108 # Offset: 582
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1103:
    00000250: 	addl	$0x1, 0x4(%rbp)
    00000254: 	movq	%rax, 0x8(%rbp)
    00000258: 	cmpq	$-0x1, %r12
    0000025c: 	je	.Ltmp1116 # Offset: 604
    0000025e: 	subq	$0x1, %r12
    00000262: 	jmp	.Ltmp1117 # Offset: 610
.Ltmp1113:
    00000267: 	movq	-0x8(%rdx), %rax
    0000026b: 	addq	$0x200, %rax
    00000271: 	jmp	.Ltmp1118 # Offset: 625
.Ltmp1116:
    00000276: 	movq	%rax, %rbx
    00000279: 	cmpq	%r15, %r14
    0000027c: 	jne	.Ltmp1119 # Offset: 636
.Ltmp1106:
    00000282: 	pxor	%xmm2, %xmm2
    00000286: 	movapd	%xmm2, %xmm1
    0000028a: 	jmp	.Ltmp1120 # Offset: 650
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_accumId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_accumIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0xdac0
  Size        : 0x1dd
  MaxSize     : 0x1e0
  Offset      : 0xdac0
  Section     : .text
  Orc Section : .local.text._Z10test_accumIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rsi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdx, %r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdi, %rbp
    00000014: 	movl	$0x8, %edi
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x10, %rsp
    0000001e: 	callq	_Znwm@PLT # Offset: 30
    00000023: 	movq	%r14, %rsi
    00000026: 	movq	$0x0, (%rax)
    0000002d: 	subq	%rbp, %rsi
    00000030: 	movq	%rax, %r12
    00000033: 	movq	%rax, %rdi
    00000036: 	sarq	$0x3, %rsi
    0000003a: 	callq	_ZNSt12forward_listIdSaIdEE6resizeEm # Offset: 58
    0000003f: 	movq	(%r12), %rbx
    00000043: 	cmpq	%rbp, %r14
    00000046: 	je	.Ltmp1121 # Offset: 70
    0000004c: 	pxor	%xmm2, %xmm2
    00000050: 	movq	%rbx, %rax
    00000053: 	movapd	%xmm2, %xmm1
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1122:
    00000060: 	movsd	(%rbp), %xmm0
    00000065: 	movq	%rax, %rdx
    00000068: 	addq	$0x8, %rbp
    0000006c: 	movq	(%rax), %rax
    0000006f: 	addsd	%xmm0, %xmm1
    00000073: 	movsd	%xmm0, 0x8(%rdx)
    00000078: 	cmpq	%rbp, %r14
    0000007b: 	jne	.Ltmp1122 # Offset: 123
.Ltmp1132:
    0000007d: 	movsd	%xmm2, 0x8(%rsp)
    00000083: 	xorl	%ebp, %ebp
    00000085: 	leaq	DATAat0x52360(%rip), %r14
    0000008c: 	movsd	%xmm1, (%rsp)
    00000091: 	callq	clock@PLT # Offset: 145
    00000096: 	movl	iterations(%rip), %ecx
    0000009c: 	movsd	(%rsp), %xmm1
    000000a1: 	movq	%rax, start_time(%rip)
    000000a8: 	movsd	0x8(%rsp), %xmm2
    000000ae: 	testl	%ecx, %ecx
    000000b0: 	jle	.Ltmp1123 # Offset: 176
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1127:
    000000b8: 	movq	%rbx, %rax
    000000bb: 	movapd	%xmm2, %xmm0
    000000bf: 	testq	%rbx, %rbx
    000000c2: 	je	.Ltmp1124 # Offset: 194
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp1125:
    000000c8: 	movq	%rax, %rdx
    000000cb: 	movq	(%rax), %rax
    000000ce: 	addsd	0x8(%rdx), %xmm0
    000000d3: 	testq	%rax, %rax
    000000d6: 	jne	.Ltmp1125 # Offset: 214
.Ltmp1124:
    000000d8: 	ucomisd	%xmm0, %xmm1
    000000dc: 	jp	.Ltmp1126 # Offset: 220
    000000e2: 	jne	.Ltmp1126 # Offset: 226
    000000e8: 	addl	$0x1, %ebp
    000000eb: 	cmpl	%ebp, %ecx
    000000ed: 	jg	.Ltmp1127 # Offset: 237
.Ltmp1123:
    000000ef: 	movq	%r13, %rdi
    000000f2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 242
    000000f7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000fe: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000105: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000010c: 	je	.Ltmp1128 # Offset: 268
.Ltmp1131:
    00000112: 	movq	-0x20(%rax), %rbp
    00000116: 	callq	clock@PLT # Offset: 278
    0000011b: 	pxor	%xmm0, %xmm0
    0000011f: 	movq	%rax, end_time(%rip)
    00000126: 	movq	%rbp, %rdi
    00000129: 	subq	start_time(%rip), %rax
    00000130: 	cvtsi2sd	%rax, %xmm0
    00000135: 	divsd	DATAat0x53788(%rip), %xmm0
    0000013d: 	callq	_Z13record_resultdPKc # Offset: 317
    00000142: 	testq	%rbx, %rbx
    00000145: 	je	.Ltmp1129 # Offset: 325
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1130:
    00000150: 	movq	%rbx, %rdi
    00000153: 	movq	(%rbx), %rbx
    00000156: 	movl	$0x10, %esi
    0000015b: 	callq	_ZdlPvm@PLT # Offset: 347
    00000160: 	testq	%rbx, %rbx
    00000163: 	jne	.Ltmp1130 # Offset: 355
.Ltmp1129:
    00000165: 	addq	$0x10, %rsp
    00000169: 	movq	%r12, %rdi
    0000016c: 	movl	$0x8, %esi
    00000171: 	popq	%rbx
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 377
    0000017e: 	nop # Size: 2
.Ltmp1126:
    00000180: 	movl	current_test(%rip), %edx
    00000186: 	xorl	%eax, %eax
    00000188: 	movq	%r14, %rsi
    0000018b: 	movl	$0x1, %edi
    00000190: 	movsd	%xmm2, 0x8(%rsp)
    00000196: 	addl	$0x1, %ebp
    00000199: 	movsd	%xmm1, (%rsp)
    0000019e: 	callq	__printf_chk@PLT # Offset: 414
    000001a3: 	movl	iterations(%rip), %ecx
    000001a9: 	movsd	(%rsp), %xmm1
    000001ae: 	movsd	0x8(%rsp), %xmm2
    000001b4: 	cmpl	%ebp, %ecx
    000001b6: 	jg	.Ltmp1127 # Offset: 438
    000001bc: 	jmp	.Ltmp1123 # Offset: 444
.Ltmp1128:
    000001c1: 	movq	-0x8(%rdx), %rax
    000001c5: 	addq	$0x200, %rax
    000001cb: 	jmp	.Ltmp1131 # Offset: 459
.Ltmp1121:
    000001d0: 	pxor	%xmm2, %xmm2
    000001d4: 	movapd	%xmm2, %xmm1
    000001d8: 	jmp	.Ltmp1132 # Offset: 472
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_accumIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_accum_stdarrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0xdca0
  Size        : 0x244
  MaxSize     : 0x250
  Offset      : 0xdca0
  Section     : .text
  Orc Section : .local.text._Z19test_accum_stdarrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	leaq	-0xf000(%rsp), %r11
.Ltmp1133:
    00000014: 	subq	$0x1000, %rsp
    0000001b: 	orq	$0x0, (%rsp)
    00000020: 	cmpq	%r11, %rsp
    00000023: 	jne	.Ltmp1133 # Offset: 35
    00000025: 	subq	$0xa20, %rsp
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0xfa18(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	movq	%rdx, %r12
    00000042: 	cmpq	%rsi, %rdi
    00000045: 	je	.Ltmp1134 # Offset: 69
    0000004b: 	subq	%rdi, %rsi
    0000004e: 	movq	%rdi, %rcx
    00000051: 	leaq	-0x8(%rsi), %rdi
    00000055: 	shrq	$0x3, %rdi
    00000059: 	addq	$0x1, %rdi
    0000005d: 	cmpq	$0x8, %rsi
    00000061: 	je	.Ltmp1135 # Offset: 97
    00000067: 	movq	%rdi, %rdx
    0000006a: 	pxor	%xmm3, %xmm3
    0000006e: 	leaq	0x10(%rsp), %r13
    00000073: 	shrq	%rdx
    00000076: 	movapd	%xmm3, %xmm2
    0000007a: 	shlq	$0x4, %rdx
    0000007e: 	nop # Size: 2
.Ltmp1136:
    00000080: 	movupd	(%rcx,%rax), %xmm4
    00000085: 	movsd	0x8(%rcx,%rax), %xmm0
    0000008b: 	addq	$0x10, %rax
    0000008f: 	addsd	%xmm4, %xmm2
    00000093: 	movaps	%xmm4, -0x10(%rax,%r13)
    00000099: 	addsd	%xmm0, %xmm2
    0000009d: 	cmpq	%rax, %rdx
    000000a0: 	jne	.Ltmp1136 # Offset: 160
    000000a2: 	movq	%rdi, %rdx
    000000a5: 	andq	$-0x2, %rdx
    000000a9: 	leaq	(,%rdx,8), %rax
    000000b1: 	addq	%rax, %rcx
    000000b4: 	addq	%r13, %rax
    000000b7: 	cmpq	%rdx, %rdi
    000000ba: 	je	.Ltmp1137 # Offset: 186
.Ltmp1145:
    000000bc: 	movsd	(%rcx), %xmm0
    000000c0: 	addsd	%xmm0, %xmm2
    000000c4: 	movsd	%xmm0, (%rax)
.Ltmp1137:
    000000c8: 	movsd	%xmm3, 0x8(%rsp)
    000000ce: 	xorl	%ebp, %ebp
    000000d0: 	leaq	0x10(%rsp), %r13
    000000d5: 	leaq	0xfa10(%rsp), %rbx
    000000dd: 	movsd	%xmm2, (%rsp)
    000000e2: 	leaq	DATAat0x52360(%rip), %r14
    000000e9: 	callq	clock@PLT # Offset: 233
    000000ee: 	movl	iterations(%rip), %edx
    000000f4: 	movsd	(%rsp), %xmm2
    000000f9: 	movq	%rax, start_time(%rip)
    00000100: 	movsd	0x8(%rsp), %xmm3
    00000106: 	testl	%edx, %edx
    00000108: 	jle	.Ltmp1138 # Offset: 264
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1141:
    00000110: 	movq	%r13, %rax
    00000113: 	movapd	%xmm3, %xmm0
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1139:
    00000120: 	movsd	(%rax), %xmm1
    00000124: 	addq	$0x10, %rax
    00000128: 	addsd	%xmm0, %xmm1
    0000012c: 	movsd	-0x8(%rax), %xmm0
    00000131: 	addsd	%xmm1, %xmm0
    00000135: 	cmpq	%rax, %rbx
    00000138: 	jne	.Ltmp1139 # Offset: 312
    0000013a: 	ucomisd	%xmm2, %xmm0
    0000013e: 	jp	.Ltmp1140 # Offset: 318
    00000144: 	jne	.Ltmp1140 # Offset: 324
    0000014a: 	addl	$0x1, %ebp
    0000014d: 	cmpl	%ebp, %edx
    0000014f: 	jg	.Ltmp1141 # Offset: 335
.Ltmp1138:
    00000151: 	movq	%r12, %rdi
    00000154: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 340
    00000159: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000160: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000167: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016e: 	je	.Ltmp1142 # Offset: 366
.Ltmp1144:
    00000174: 	movq	-0x20(%rax), %rbp
    00000178: 	callq	clock@PLT # Offset: 376
    0000017d: 	movq	%rax, end_time(%rip)
    00000184: 	movq	0xfa18(%rsp), %rdx
    0000018c: 	subq	%fs:0x28, %rdx
    00000195: 	jne	.Ltmp1143 # Offset: 405
    0000019b: 	subq	start_time(%rip), %rax
    000001a2: 	pxor	%xmm0, %xmm0
    000001a6: 	movq	%rbp, %rdi
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x53788(%rip), %xmm0
    000001b6: 	addq	$0xfa20, %rsp
    000001bd: 	popq	%rbx
    000001be: 	popq	%rbp
    000001bf: 	popq	%r12
    000001c1: 	popq	%r13
    000001c3: 	popq	%r14
    000001c5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 453
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1140:
    000001d0: 	movl	current_test(%rip), %edx
    000001d6: 	xorl	%eax, %eax
    000001d8: 	movq	%r14, %rsi
    000001db: 	movl	$0x1, %edi
    000001e0: 	movsd	%xmm3, 0x8(%rsp)
    000001e6: 	addl	$0x1, %ebp
    000001e9: 	movsd	%xmm2, (%rsp)
    000001ee: 	callq	__printf_chk@PLT # Offset: 494
    000001f3: 	movl	iterations(%rip), %edx
    000001f9: 	movsd	(%rsp), %xmm2
    000001fe: 	movsd	0x8(%rsp), %xmm3
    00000204: 	cmpl	%ebp, %edx
    00000206: 	jg	.Ltmp1141 # Offset: 518
    0000020c: 	jmp	.Ltmp1138 # Offset: 524
.Ltmp1142:
    00000211: 	movq	-0x8(%rdx), %rax
    00000215: 	addq	$0x200, %rax
    0000021b: 	jmp	.Ltmp1144 # Offset: 539
.Ltmp1134:
    00000220: 	pxor	%xmm3, %xmm3
    00000224: 	movapd	%xmm3, %xmm2
    00000228: 	jmp	.Ltmp1137 # Offset: 552
.Ltmp1135:
    0000022d: 	pxor	%xmm3, %xmm3
    00000231: 	leaq	0x10(%rsp), %rax
    00000236: 	movapd	%xmm3, %xmm2
    0000023a: 	jmp	.Ltmp1145 # Offset: 570
.Ltmp1143:
    0000023f: 	callq	__stack_chk_fail@PLT # Offset: 575
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_accum_stdarrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_accum_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0xdef0
  Size        : 0x280
  MaxSize     : 0x280
  Offset      : 0xdef0
  Section     : .text
  Orc Section : .local.text._Z16test_accum_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	movabsq	$0x7ffffffffffffff8, %rax
    0000000e: 	pushq	%r15
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	pushq	%r13
    00000017: 	subq	%rdi, %r14
    0000001a: 	pushq	%r12
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	subq	$0x38, %rsp
    00000022: 	movq	%rdx, 0x28(%rsp)
    00000027: 	cmpq	%rax, %r14
    0000002a: 	ja	.Ltmp1146 # Offset: 42
    00000030: 	movq	%rdi, %rbx
    00000033: 	movq	%r14, %rdi
    00000036: 	movq	%rsi, %rbp
    00000039: 	callq	_Znam@PLT # Offset: 57
    0000003e: 	pxor	%xmm3, %xmm3
    00000042: 	movq	%rax, %r15
    00000045: 	movapd	%xmm3, %xmm2
    00000049: 	cmpq	%rbx, %rbp
    0000004c: 	je	.Ltmp1147 # Offset: 76
    0000004e: 	leaq	-0x8(%r14), %rcx
    00000052: 	shrq	$0x3, %rcx
    00000056: 	addq	$0x1, %rcx
    0000005a: 	cmpq	$0x8, %r14
    0000005e: 	je	.Ltmp1148 # Offset: 94
    00000064: 	movq	%rcx, %rdx
    00000067: 	pxor	%xmm3, %xmm3
    0000006b: 	xorl	%eax, %eax
    0000006d: 	shrq	%rdx
    00000070: 	movapd	%xmm3, %xmm2
    00000074: 	shlq	$0x4, %rdx
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1149:
    00000080: 	movupd	(%rbx,%rax), %xmm4
    00000085: 	movsd	0x8(%rbx,%rax), %xmm0
    0000008b: 	addsd	%xmm4, %xmm2
    0000008f: 	movups	%xmm4, (%r15,%rax)
    00000094: 	addq	$0x10, %rax
    00000098: 	addsd	%xmm0, %xmm2
    0000009c: 	cmpq	%rax, %rdx
    0000009f: 	jne	.Ltmp1149 # Offset: 159
    000000a1: 	movq	%rcx, %rdx
    000000a4: 	andq	$-0x2, %rdx
    000000a8: 	leaq	(,%rdx,8), %rax
    000000b0: 	addq	%rax, %rbx
    000000b3: 	addq	%r15, %rax
    000000b6: 	cmpq	%rdx, %rcx
    000000b9: 	je	.Ltmp1147 # Offset: 185
.Ltmp1161:
    000000bb: 	movsd	(%rbx), %xmm0
    000000bf: 	addsd	%xmm0, %xmm2
    000000c3: 	movsd	%xmm0, (%rax)
.Ltmp1147:
    000000c7: 	movsd	%xmm3, 0x10(%rsp)
    000000cd: 	movsd	%xmm2, 0x8(%rsp)
    000000d3: 	callq	clock@PLT # Offset: 211
    000000d8: 	movl	iterations(%rip), %edx
    000000de: 	movsd	0x8(%rsp), %xmm2
    000000e4: 	movq	%rax, start_time(%rip)
    000000eb: 	movsd	0x10(%rsp), %xmm3
    000000f1: 	testl	%edx, %edx
    000000f3: 	jle	.Ltmp1150 # Offset: 243
    000000f9: 	leaq	-0x8(%r14), %rcx
    000000fd: 	leaq	DATAat0x52360(%rip), %r13
    00000104: 	shrq	$0x3, %rcx
    00000108: 	addq	$0x1, %rcx
    0000010c: 	movq	%rcx, %rbp
    0000010f: 	movq	%rcx, %r8
    00000112: 	shrq	%rbp
    00000115: 	andq	$-0x2, %r8
    00000119: 	shlq	$0x4, %rbp
    0000011d: 	leaq	(%r15,%r8,8), %rbx
    00000121: 	addq	%r15, %rbp
    00000124: 	cmpq	$0x8, %r14
    00000128: 	cmoveq	%r15, %rbx
    0000012c: 	xorl	%r12d, %r12d
    0000012f: 	nop # Size: 1
.Ltmp1156:
    00000130: 	testq	%r14, %r14
    00000133: 	je	.Ltmp1151 # Offset: 307
.Ltmp1158:
    00000139: 	cmpq	$0x8, %r14
    0000013d: 	je	.Ltmp1152 # Offset: 317
    00000143: 	movq	%r15, %rax
    00000146: 	movapd	%xmm3, %xmm0
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1153:
    00000150: 	movsd	(%rax), %xmm1
    00000154: 	addq	$0x10, %rax
    00000158: 	addsd	%xmm1, %xmm0
    0000015c: 	movsd	-0x8(%rax), %xmm1
    00000161: 	addsd	%xmm1, %xmm0
    00000165: 	cmpq	%rax, %rbp
    00000168: 	jne	.Ltmp1153 # Offset: 360
    0000016a: 	cmpq	%r8, %rcx
    0000016d: 	je	.Ltmp1154 # Offset: 365
.Ltmp1159:
    0000016f: 	addsd	(%rbx), %xmm0
.Ltmp1154:
    00000173: 	ucomisd	%xmm0, %xmm2
    00000177: 	jp	.Ltmp1155 # Offset: 375
    00000179: 	jne	.Ltmp1155 # Offset: 377
    0000017b: 	addl	$0x1, %r12d
    0000017f: 	cmpl	%r12d, %edx
    00000182: 	jg	.Ltmp1156 # Offset: 386
.Ltmp1150:
    00000184: 	movq	0x28(%rsp), %rdi
    00000189: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 393
    0000018e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000195: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000019c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001a3: 	je	.Ltmp1157 # Offset: 419
.Ltmp1160:
    000001a9: 	movq	-0x20(%rax), %rbp
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	%rbp, %rdi
    000001b9: 	movq	%rax, end_time(%rip)
    000001c0: 	subq	start_time(%rip), %rax
    000001c7: 	cvtsi2sd	%rax, %xmm0
    000001cc: 	divsd	DATAat0x53788(%rip), %xmm0
    000001d4: 	callq	_Z13record_resultdPKc # Offset: 468
    000001d9: 	addq	$0x38, %rsp
    000001dd: 	movq	%r15, %rdi
    000001e0: 	popq	%rbx
    000001e1: 	popq	%rbp
    000001e2: 	popq	%r12
    000001e4: 	popq	%r13
    000001e6: 	popq	%r14
    000001e8: 	popq	%r15
    000001ea: 	jmp	_ZdaPv@PLT # TAILCALL  # Offset: 490
    000001ef: 	nop # Size: 1
.Ltmp1155:
    000001f0: 	movl	current_test(%rip), %edx
    000001f6: 	xorl	%eax, %eax
    000001f8: 	movq	%r13, %rsi
    000001fb: 	movl	$0x1, %edi
    00000200: 	movq	%r8, 0x18(%rsp)
    00000205: 	addl	$0x1, %r12d
    00000209: 	movq	%rcx, 0x10(%rsp)
    0000020e: 	movsd	%xmm3, 0x20(%rsp)
    00000214: 	movsd	%xmm2, 0x8(%rsp)
    0000021a: 	callq	__printf_chk@PLT # Offset: 538
    0000021f: 	movl	iterations(%rip), %edx
    00000225: 	movsd	0x8(%rsp), %xmm2
    0000022b: 	movq	0x10(%rsp), %rcx
    00000230: 	movq	0x18(%rsp), %r8
    00000235: 	cmpl	%r12d, %edx
    00000238: 	movsd	0x20(%rsp), %xmm3
    0000023e: 	jle	.Ltmp1150 # Offset: 574
    00000244: 	testq	%r14, %r14
    00000247: 	jne	.Ltmp1158 # Offset: 583
.Ltmp1151:
    0000024d: 	movapd	%xmm3, %xmm0
    00000251: 	jmp	.Ltmp1154 # Offset: 593
.Ltmp1152:
    00000256: 	movapd	%xmm3, %xmm0
    0000025a: 	jmp	.Ltmp1159 # Offset: 602
.Ltmp1157:
    0000025f: 	movq	-0x8(%rdx), %rax
    00000263: 	addq	$0x200, %rax
    00000269: 	jmp	.Ltmp1160 # Offset: 617
.Ltmp1148:
    0000026e: 	pxor	%xmm3, %xmm3
    00000272: 	movapd	%xmm3, %xmm2
    00000276: 	jmp	.Ltmp1161 # Offset: 630
.Ltmp1146:
    0000027b: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 635
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_accum_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_copyId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0xe170
  Size        : 0x300
  MaxSize     : 0x300
  Offset      : 0xe170
  Section     : .text
  Orc Section : .local.text._Z9test_copyId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdx, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdi, %rbp
    00000011: 	movl	$0x20, %edi
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movq	%rbx, %r14
    0000001d: 	subq	%rbp, %r14
    00000020: 	subq	$0x10, %rsp
    00000024: 	callq	_Znwm@PLT # Offset: 36
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	movq	$0x0, 0x8(%rax)
    00000035: 	movq	%rax, %r13
    00000038: 	movups	%xmm0, 0x10(%rax)
    0000003c: 	testq	%r14, %r14
    0000003f: 	jle	.Ltmp1162 # Offset: 63
    00000045: 	sarq	$0x3, %r14
    00000049: 	subq	$0x2, %r14
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp1179:
    00000050: 	movl	$0x18, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movq	0x18(%r13), %rdx
    0000005e: 	movq	$0x0, (%rax)
    00000065: 	movq	$0x0, 0x8(%rax)
    0000006d: 	movq	%rdx, 0x10(%rax)
    00000071: 	testq	%rdx, %rdx
    00000074: 	je	.Ltmp1163 # Offset: 116
    00000076: 	movq	%rax, 0x8(%rdx)
.Ltmp1163:
    0000007a: 	cmpq	$0x0, 0x10(%r13)
    0000007f: 	movq	%rax, 0x18(%r13)
    00000083: 	je	.Ltmp1164 # Offset: 131
    00000089: 	addq	$0x1, 0x8(%r13)
    0000008e: 	cmpq	$-0x1, %r14
    00000092: 	je	.Ltmp1162 # Offset: 146
.Ltmp1166:
    00000094: 	movl	$0x18, %edi
    00000099: 	callq	_Znwm@PLT # Offset: 153
    0000009e: 	movq	0x18(%r13), %rdx
    000000a2: 	movq	$0x0, (%rax)
    000000a9: 	movq	$0x0, 0x8(%rax)
    000000b1: 	movq	%rdx, 0x10(%rax)
    000000b5: 	testq	%rdx, %rdx
    000000b8: 	je	.Ltmp1165 # Offset: 184
    000000ba: 	movq	%rax, 0x8(%rdx)
.Ltmp1165:
    000000be: 	addq	$0x1, 0x8(%r13)
    000000c3: 	movq	%rax, 0x18(%r13)
    000000c7: 	subq	$0x1, %r14
    000000cb: 	jae	.Ltmp1166 # Offset: 203
.Ltmp1162:
    000000cd: 	cmpq	%rbp, %rbx
    000000d0: 	je	.Ltmp1167 # Offset: 208
    000000d6: 	movq	%rbx, %rdx
    000000d9: 	movq	%rbp, %rax
    000000dc: 	subq	%rbp, %rdx
    000000df: 	leaq	-0x8(%rdx), %rcx
    000000e3: 	shrq	$0x3, %rcx
    000000e7: 	addq	$0x1, %rcx
    000000eb: 	cmpq	$0x8, %rdx
    000000ef: 	je	.Ltmp1168 # Offset: 239
    000000f5: 	movq	%rcx, %rdx
    000000f8: 	pxor	%xmm2, %xmm2
    000000fc: 	shrq	%rdx
    000000ff: 	movsd	%xmm2, 0x8(%rsp)
    00000105: 	movapd	%xmm2, %xmm1
    00000109: 	shlq	$0x4, %rdx
    0000010d: 	addq	%rbp, %rdx
.Ltmp1169:
    00000110: 	movsd	(%rax), %xmm0
    00000114: 	addq	$0x10, %rax
    00000118: 	addsd	%xmm0, %xmm1
    0000011c: 	movsd	-0x8(%rax), %xmm0
    00000121: 	addsd	%xmm0, %xmm1
    00000125: 	cmpq	%rax, %rdx
    00000128: 	jne	.Ltmp1169 # Offset: 296
    0000012a: 	movq	%rcx, %rdx
    0000012d: 	andq	$-0x2, %rdx
    00000131: 	leaq	(%rbp,%rdx,8), %rax
    00000136: 	cmpq	%rdx, %rcx
    00000139: 	je	.Ltmp1170 # Offset: 313
.Ltmp1183:
    0000013b: 	addsd	(%rax), %xmm1
.Ltmp1170:
    0000013f: 	movsd	%xmm1, (%rsp)
    00000144: 	callq	clock@PLT # Offset: 324
    00000149: 	movl	iterations(%rip), %edi
    0000014f: 	movsd	(%rsp), %xmm1
    00000154: 	movq	%rax, start_time(%rip)
    0000015b: 	testl	%edi, %edi
    0000015d: 	jle	.Ltmp1171 # Offset: 349
    0000015f: 	movq	0x10(%r13), %r8
    00000163: 	xorl	%esi, %esi
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp1173:
    00000168: 	movq	%r8, %rdx
    0000016b: 	movq	%rbp, %rax
    0000016e: 	nop # Size: 2
.Ltmp1172:
    00000170: 	movsd	(%rax), %xmm0
    00000174: 	movq	%rdx, %rcx
    00000177: 	addq	$0x8, %rax
    0000017b: 	movq	0x8(%rdx), %rdx
    0000017f: 	movsd	%xmm0, (%rcx)
    00000183: 	cmpq	%rax, %rbx
    00000186: 	jne	.Ltmp1172 # Offset: 390
    00000188: 	addl	$0x1, %esi
    0000018b: 	cmpl	%edi, %esi
    0000018d: 	jne	.Ltmp1173 # Offset: 397
.Ltmp1171:
    0000018f: 	movq	%r12, %rdi
    00000192: 	movsd	%xmm1, (%rsp)
    00000197: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 407
    0000019c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001a3: 	movsd	(%rsp), %xmm1
    000001a8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001af: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001b6: 	je	.Ltmp1174 # Offset: 438
.Ltmp1180:
    000001bc: 	movq	-0x20(%rax), %rbp
    000001c0: 	movsd	%xmm1, (%rsp)
    000001c5: 	callq	clock@PLT # Offset: 453
    000001ca: 	pxor	%xmm0, %xmm0
    000001ce: 	movq	%rax, end_time(%rip)
    000001d5: 	movq	%rbp, %rdi
    000001d8: 	subq	start_time(%rip), %rax
    000001df: 	cvtsi2sd	%rax, %xmm0
    000001e4: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ec: 	callq	_Z13record_resultdPKc # Offset: 492
    000001f1: 	movq	0x10(%r13), %rbx
    000001f5: 	movsd	(%rsp), %xmm1
    000001fa: 	testq	%rbx, %rbx
    000001fd: 	je	.Ltmp1175 # Offset: 509
    00000203: 	movq	%rbx, %rax
    00000206: 	pxor	%xmm0, %xmm0
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1176:
    00000210: 	movq	%rax, %rdx
    00000213: 	movq	0x8(%rax), %rax
    00000217: 	addsd	(%rdx), %xmm0
    0000021b: 	testq	%rax, %rax
    0000021e: 	jne	.Ltmp1176 # Offset: 542
    00000220: 	ucomisd	%xmm1, %xmm0
    00000224: 	jp	.Ltmp1177 # Offset: 548
    00000226: 	jne	.Ltmp1177 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1178:
    00000230: 	movq	%rbx, %rdi
    00000233: 	movq	0x8(%rbx), %rbx
    00000237: 	movl	$0x18, %esi
    0000023c: 	callq	_ZdlPvm@PLT # Offset: 572
    00000241: 	testq	%rbx, %rbx
    00000244: 	jne	.Ltmp1178 # Offset: 580
.Ltmp1182:
    00000246: 	addq	$0x10, %rsp
    0000024a: 	movq	%r13, %rdi
    0000024d: 	movl	$0x20, %esi
    00000252: 	popq	%rbx
    00000253: 	popq	%rbp
    00000254: 	popq	%r12
    00000256: 	popq	%r13
    00000258: 	popq	%r14
    0000025a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 602
    0000025f: 	nop # Size: 1
.Ltmp1164:
    00000260: 	addq	$0x1, 0x8(%r13)
    00000265: 	movq	%rax, 0x10(%r13)
    00000269: 	cmpq	$-0x1, %r14
    0000026d: 	je	.Ltmp1162 # Offset: 621
    00000273: 	subq	$0x1, %r14
    00000277: 	jmp	.Ltmp1179 # Offset: 631
.Ltmp1174:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1180 # Offset: 646
.Ltmp1177:
    0000028b: 	movl	current_test(%rip), %edx
    00000291: 	leaq	DATAat0x52360(%rip), %rsi
    00000298: 	movl	$0x1, %edi
    0000029d: 	xorl	%eax, %eax
    0000029f: 	callq	__printf_chk@PLT # Offset: 671
    000002a4: 	jmp	.Ltmp1178 # Offset: 676
.Ltmp1175:
    000002a6: 	ucomisd	0x8(%rsp), %xmm1
    000002ac: 	jp	.Ltmp1181 # Offset: 684
    000002ae: 	je	.Ltmp1182 # Offset: 686
.Ltmp1181:
    000002b0: 	movl	current_test(%rip), %edx
    000002b6: 	leaq	DATAat0x52360(%rip), %rsi
    000002bd: 	movl	$0x1, %edi
    000002c2: 	xorl	%eax, %eax
    000002c4: 	callq	__printf_chk@PLT # Offset: 708
    000002c9: 	jmp	.Ltmp1182 # Offset: 713
.Ltmp1167:
    000002ce: 	callq	clock@PLT # Offset: 718
    000002d3: 	pxor	%xmm4, %xmm4
    000002d7: 	movq	%rax, start_time(%rip)
    000002de: 	movapd	%xmm4, %xmm1
    000002e2: 	movsd	%xmm4, 0x8(%rsp)
    000002e8: 	jmp	.Ltmp1171 # Offset: 744
.Ltmp1168:
    000002ed: 	pxor	%xmm3, %xmm3
    000002f1: 	movsd	%xmm3, 0x8(%rsp)
    000002f7: 	movapd	%xmm3, %xmm1
    000002fb: 	jmp	.Ltmp1183 # Offset: 763
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_copyId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_copyId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0xe470
  Size        : 0x300
  MaxSize     : 0x300
  Offset      : 0xe470
  Section     : .text
  Orc Section : .local.text._Z9test_copyId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdx, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdi, %rbp
    00000011: 	movl	$0x18, %edi
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movq	%rbx, %r14
    0000001d: 	subq	%rbp, %r14
    00000020: 	subq	$0x10, %rsp
    00000024: 	callq	_Znwm@PLT # Offset: 36
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	movl	$0x0, 0x4(%rax)
    00000034: 	movq	%rax, %r13
    00000037: 	movups	%xmm0, 0x8(%rax)
    0000003b: 	testq	%r14, %r14
    0000003e: 	jle	.Ltmp1184 # Offset: 62
    00000044: 	sarq	$0x3, %r14
    00000048: 	subq	$0x2, %r14
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp1201:
    00000050: 	movl	$0x10, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movq	0x10(%r13), %rdx
    0000005e: 	movq	$0x0, (%rax)
    00000065: 	movq	$0x0, 0x8(%rax)
    0000006d: 	testq	%rdx, %rdx
    00000070: 	je	.Ltmp1185 # Offset: 112
    00000072: 	movq	%rax, 0x8(%rdx)
.Ltmp1185:
    00000076: 	cmpq	$0x0, 0x8(%r13)
    0000007b: 	movq	%rax, 0x10(%r13)
    0000007f: 	je	.Ltmp1186 # Offset: 127
    00000085: 	addl	$0x1, 0x4(%r13)
    0000008a: 	cmpq	$-0x1, %r14
    0000008e: 	je	.Ltmp1184 # Offset: 142
.Ltmp1188:
    00000090: 	movl	$0x10, %edi
    00000095: 	callq	_Znwm@PLT # Offset: 149
    0000009a: 	movq	0x10(%r13), %rdx
    0000009e: 	movq	$0x0, (%rax)
    000000a5: 	movq	$0x0, 0x8(%rax)
    000000ad: 	testq	%rdx, %rdx
    000000b0: 	je	.Ltmp1187 # Offset: 176
    000000b2: 	movq	%rax, 0x8(%rdx)
.Ltmp1187:
    000000b6: 	addl	$0x1, 0x4(%r13)
    000000bb: 	movq	%rax, 0x10(%r13)
    000000bf: 	subq	$0x1, %r14
    000000c3: 	jae	.Ltmp1188 # Offset: 195
.Ltmp1184:
    000000c5: 	cmpq	%rbp, %rbx
    000000c8: 	je	.Ltmp1189 # Offset: 200
    000000ce: 	movq	%rbx, %rdx
    000000d1: 	movq	%rbp, %rax
    000000d4: 	subq	%rbp, %rdx
    000000d7: 	leaq	-0x8(%rdx), %rcx
    000000db: 	shrq	$0x3, %rcx
    000000df: 	addq	$0x1, %rcx
    000000e3: 	cmpq	$0x8, %rdx
    000000e7: 	je	.Ltmp1190 # Offset: 231
    000000ed: 	movq	%rcx, %rdx
    000000f0: 	pxor	%xmm2, %xmm2
    000000f4: 	shrq	%rdx
    000000f7: 	movsd	%xmm2, 0x8(%rsp)
    000000fd: 	movapd	%xmm2, %xmm1
    00000101: 	shlq	$0x4, %rdx
    00000105: 	addq	%rbp, %rdx
    00000108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1191:
    00000110: 	movsd	(%rax), %xmm0
    00000114: 	addq	$0x10, %rax
    00000118: 	addsd	%xmm0, %xmm1
    0000011c: 	movsd	-0x8(%rax), %xmm0
    00000121: 	addsd	%xmm0, %xmm1
    00000125: 	cmpq	%rax, %rdx
    00000128: 	jne	.Ltmp1191 # Offset: 296
    0000012a: 	movq	%rcx, %rdx
    0000012d: 	andq	$-0x2, %rdx
    00000131: 	leaq	(%rbp,%rdx,8), %rax
    00000136: 	cmpq	%rdx, %rcx
    00000139: 	je	.Ltmp1192 # Offset: 313
.Ltmp1205:
    0000013b: 	addsd	(%rax), %xmm1
.Ltmp1192:
    0000013f: 	movsd	%xmm1, (%rsp)
    00000144: 	callq	clock@PLT # Offset: 324
    00000149: 	movl	iterations(%rip), %edi
    0000014f: 	movsd	(%rsp), %xmm1
    00000154: 	movq	%rax, start_time(%rip)
    0000015b: 	testl	%edi, %edi
    0000015d: 	jle	.Ltmp1193 # Offset: 349
    0000015f: 	movq	0x8(%r13), %r8
    00000163: 	xorl	%esi, %esi
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp1195:
    00000168: 	movq	%r8, %rdx
    0000016b: 	movq	%rbp, %rax
    0000016e: 	nop # Size: 2
.Ltmp1194:
    00000170: 	movsd	(%rax), %xmm0
    00000174: 	movq	%rdx, %rcx
    00000177: 	addq	$0x8, %rax
    0000017b: 	movq	0x8(%rdx), %rdx
    0000017f: 	movsd	%xmm0, (%rcx)
    00000183: 	cmpq	%rax, %rbx
    00000186: 	jne	.Ltmp1194 # Offset: 390
    00000188: 	addl	$0x1, %esi
    0000018b: 	cmpl	%edi, %esi
    0000018d: 	jne	.Ltmp1195 # Offset: 397
.Ltmp1193:
    0000018f: 	movq	%r12, %rdi
    00000192: 	movsd	%xmm1, (%rsp)
    00000197: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 407
    0000019c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001a3: 	movsd	(%rsp), %xmm1
    000001a8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001af: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001b6: 	je	.Ltmp1196 # Offset: 438
.Ltmp1202:
    000001bc: 	movq	-0x20(%rax), %rbp
    000001c0: 	movsd	%xmm1, (%rsp)
    000001c5: 	callq	clock@PLT # Offset: 453
    000001ca: 	pxor	%xmm0, %xmm0
    000001ce: 	movq	%rax, end_time(%rip)
    000001d5: 	movq	%rbp, %rdi
    000001d8: 	subq	start_time(%rip), %rax
    000001df: 	cvtsi2sd	%rax, %xmm0
    000001e4: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ec: 	callq	_Z13record_resultdPKc # Offset: 492
    000001f1: 	movq	0x8(%r13), %rbx
    000001f5: 	movsd	(%rsp), %xmm1
    000001fa: 	testq	%rbx, %rbx
    000001fd: 	je	.Ltmp1197 # Offset: 509
    00000203: 	movq	%rbx, %rax
    00000206: 	pxor	%xmm0, %xmm0
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1198:
    00000210: 	movq	%rax, %rdx
    00000213: 	movq	0x8(%rax), %rax
    00000217: 	addsd	(%rdx), %xmm0
    0000021b: 	testq	%rax, %rax
    0000021e: 	jne	.Ltmp1198 # Offset: 542
    00000220: 	ucomisd	%xmm1, %xmm0
    00000224: 	jp	.Ltmp1199 # Offset: 548
    00000226: 	jne	.Ltmp1199 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1200:
    00000230: 	movq	%rbx, %rdi
    00000233: 	movq	0x8(%rbx), %rbx
    00000237: 	movl	$0x10, %esi
    0000023c: 	callq	_ZdlPvm@PLT # Offset: 572
    00000241: 	testq	%rbx, %rbx
    00000244: 	jne	.Ltmp1200 # Offset: 580
.Ltmp1204:
    00000246: 	addq	$0x10, %rsp
    0000024a: 	movq	%r13, %rdi
    0000024d: 	movl	$0x18, %esi
    00000252: 	popq	%rbx
    00000253: 	popq	%rbp
    00000254: 	popq	%r12
    00000256: 	popq	%r13
    00000258: 	popq	%r14
    0000025a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 602
    0000025f: 	nop # Size: 1
.Ltmp1186:
    00000260: 	addl	$0x1, 0x4(%r13)
    00000265: 	movq	%rax, 0x8(%r13)
    00000269: 	cmpq	$-0x1, %r14
    0000026d: 	je	.Ltmp1184 # Offset: 621
    00000273: 	subq	$0x1, %r14
    00000277: 	jmp	.Ltmp1201 # Offset: 631
.Ltmp1196:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1202 # Offset: 646
.Ltmp1199:
    0000028b: 	movl	current_test(%rip), %edx
    00000291: 	leaq	DATAat0x52360(%rip), %rsi
    00000298: 	movl	$0x1, %edi
    0000029d: 	xorl	%eax, %eax
    0000029f: 	callq	__printf_chk@PLT # Offset: 671
    000002a4: 	jmp	.Ltmp1200 # Offset: 676
.Ltmp1197:
    000002a6: 	ucomisd	0x8(%rsp), %xmm1
    000002ac: 	jp	.Ltmp1203 # Offset: 684
    000002ae: 	je	.Ltmp1204 # Offset: 686
.Ltmp1203:
    000002b0: 	movl	current_test(%rip), %edx
    000002b6: 	leaq	DATAat0x52360(%rip), %rsi
    000002bd: 	movl	$0x1, %edi
    000002c2: 	xorl	%eax, %eax
    000002c4: 	callq	__printf_chk@PLT # Offset: 708
    000002c9: 	jmp	.Ltmp1204 # Offset: 713
.Ltmp1189:
    000002ce: 	callq	clock@PLT # Offset: 718
    000002d3: 	pxor	%xmm4, %xmm4
    000002d7: 	movq	%rax, start_time(%rip)
    000002de: 	movapd	%xmm4, %xmm1
    000002e2: 	movsd	%xmm4, 0x8(%rsp)
    000002e8: 	jmp	.Ltmp1193 # Offset: 744
.Ltmp1190:
    000002ed: 	pxor	%xmm3, %xmm3
    000002f1: 	movsd	%xmm3, 0x8(%rsp)
    000002f7: 	movapd	%xmm3, %xmm1
    000002fb: 	jmp	.Ltmp1205 # Offset: 763
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_copyId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_copyIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0xe770
  Size        : 0x24f
  MaxSize     : 0x250
  Offset      : 0xe770
  Section     : .text
  Orc Section : .local.text._Z9test_copyIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rdi, %r13
    0000000b: 	movl	$0x8, %edi
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movq	%rbx, %r14
    0000001d: 	subq	%r13, %r14
    00000020: 	subq	$0x10, %rsp
    00000024: 	callq	_Znwm@PLT # Offset: 36
    00000029: 	movq	%r14, %rsi
    0000002c: 	movq	$0x0, (%rax)
    00000033: 	sarq	$0x3, %rsi
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, %rbp
    0000003d: 	callq	_ZNSt12forward_listIdSaIdEE6resizeEm # Offset: 61
    00000042: 	cmpq	%r13, %rbx
    00000045: 	je	.Ltmp1206 # Offset: 69
    0000004b: 	leaq	-0x8(%r14), %rcx
    0000004f: 	movq	%r13, %rax
    00000052: 	shrq	$0x3, %rcx
    00000056: 	addq	$0x1, %rcx
    0000005a: 	cmpq	$0x8, %r14
    0000005e: 	je	.Ltmp1207 # Offset: 94
    00000064: 	movq	%rcx, %rdx
    00000067: 	pxor	%xmm2, %xmm2
    0000006b: 	shrq	%rdx
    0000006e: 	movsd	%xmm2, 0x8(%rsp)
    00000074: 	movapd	%xmm2, %xmm1
    00000078: 	shlq	$0x4, %rdx
    0000007c: 	addq	%r13, %rdx
    0000007f: 	nop # Size: 1
.Ltmp1208:
    00000080: 	movsd	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	addsd	%xmm0, %xmm1
    0000008c: 	movsd	-0x8(%rax), %xmm0
    00000091: 	addsd	%xmm0, %xmm1
    00000095: 	cmpq	%rdx, %rax
    00000098: 	jne	.Ltmp1208 # Offset: 152
    0000009a: 	movq	%rcx, %rdx
    0000009d: 	andq	$-0x2, %rdx
    000000a1: 	leaq	(%r13,%rdx,8), %rax
    000000a6: 	cmpq	%rdx, %rcx
    000000a9: 	je	.Ltmp1209 # Offset: 169
.Ltmp1221:
    000000ab: 	addsd	(%rax), %xmm1
.Ltmp1209:
    000000af: 	movsd	%xmm1, (%rsp)
    000000b4: 	callq	clock@PLT # Offset: 180
    000000b9: 	movl	iterations(%rip), %edi
    000000bf: 	movsd	(%rsp), %xmm1
    000000c4: 	movq	%rax, start_time(%rip)
    000000cb: 	testl	%edi, %edi
    000000cd: 	jle	.Ltmp1210 # Offset: 205
    000000cf: 	movq	(%rbp), %r8
    000000d3: 	xorl	%esi, %esi
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp1212:
    000000d8: 	movq	%r8, %rdx
    000000db: 	movq	%r13, %rax
    000000de: 	nop # Size: 2
.Ltmp1211:
    000000e0: 	movsd	(%rax), %xmm0
    000000e4: 	movq	%rdx, %rcx
    000000e7: 	addq	$0x8, %rax
    000000eb: 	movq	(%rdx), %rdx
    000000ee: 	movsd	%xmm0, 0x8(%rcx)
    000000f3: 	cmpq	%rax, %rbx
    000000f6: 	jne	.Ltmp1211 # Offset: 246
    000000f8: 	addl	$0x1, %esi
    000000fb: 	cmpl	%edi, %esi
    000000fd: 	jne	.Ltmp1212 # Offset: 253
.Ltmp1210:
    000000ff: 	movq	%r12, %rdi
    00000102: 	movsd	%xmm1, (%rsp)
    00000107: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 263
    0000010c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000113: 	movsd	(%rsp), %xmm1
    00000118: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000011f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000126: 	je	.Ltmp1213 # Offset: 294
.Ltmp1218:
    0000012c: 	movq	-0x20(%rax), %r12
    00000130: 	movsd	%xmm1, (%rsp)
    00000135: 	callq	clock@PLT # Offset: 309
    0000013a: 	pxor	%xmm0, %xmm0
    0000013e: 	movq	%rax, end_time(%rip)
    00000145: 	movq	%r12, %rdi
    00000148: 	subq	start_time(%rip), %rax
    0000014f: 	cvtsi2sd	%rax, %xmm0
    00000154: 	divsd	DATAat0x53788(%rip), %xmm0
    0000015c: 	callq	_Z13record_resultdPKc # Offset: 348
    00000161: 	movq	(%rbp), %rbx
    00000165: 	movsd	(%rsp), %xmm1
    0000016a: 	testq	%rbx, %rbx
    0000016d: 	je	.Ltmp1214 # Offset: 365
    00000173: 	movq	%rbx, %rax
    00000176: 	pxor	%xmm0, %xmm0
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1215:
    00000180: 	movq	%rax, %rdx
    00000183: 	movq	(%rax), %rax
    00000186: 	addsd	0x8(%rdx), %xmm0
    0000018b: 	testq	%rax, %rax
    0000018e: 	jne	.Ltmp1215 # Offset: 398
    00000190: 	ucomisd	%xmm1, %xmm0
    00000194: 	jp	.Ltmp1216 # Offset: 404
    00000196: 	jne	.Ltmp1216 # Offset: 406
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1217:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	movq	(%rbx), %rbx
    000001a6: 	movl	$0x10, %esi
    000001ab: 	callq	_ZdlPvm@PLT # Offset: 427
    000001b0: 	testq	%rbx, %rbx
    000001b3: 	jne	.Ltmp1217 # Offset: 435
.Ltmp1220:
    000001b5: 	addq	$0x10, %rsp
    000001b9: 	movq	%rbp, %rdi
    000001bc: 	movl	$0x8, %esi
    000001c1: 	popq	%rbx
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 457
.Ltmp1213:
    000001ce: 	movq	-0x8(%rdx), %rax
    000001d2: 	addq	$0x200, %rax
    000001d8: 	jmp	.Ltmp1218 # Offset: 472
.Ltmp1216:
    000001dd: 	movl	current_test(%rip), %edx
    000001e3: 	leaq	DATAat0x52360(%rip), %rsi
    000001ea: 	movl	$0x1, %edi
    000001ef: 	xorl	%eax, %eax
    000001f1: 	callq	__printf_chk@PLT # Offset: 497
    000001f6: 	jmp	.Ltmp1217 # Offset: 502
.Ltmp1214:
    000001f8: 	ucomisd	0x8(%rsp), %xmm1
    000001fe: 	jp	.Ltmp1219 # Offset: 510
    00000200: 	je	.Ltmp1220 # Offset: 512
.Ltmp1219:
    00000202: 	movl	current_test(%rip), %edx
    00000208: 	leaq	DATAat0x52360(%rip), %rsi
    0000020f: 	movl	$0x1, %edi
    00000214: 	xorl	%eax, %eax
    00000216: 	callq	__printf_chk@PLT # Offset: 534
    0000021b: 	jmp	.Ltmp1220 # Offset: 539
.Ltmp1206:
    0000021d: 	callq	clock@PLT # Offset: 541
    00000222: 	pxor	%xmm4, %xmm4
    00000226: 	movq	%rax, start_time(%rip)
    0000022d: 	movapd	%xmm4, %xmm1
    00000231: 	movsd	%xmm4, 0x8(%rsp)
    00000237: 	jmp	.Ltmp1210 # Offset: 567
.Ltmp1207:
    0000023c: 	pxor	%xmm3, %xmm3
    00000240: 	movsd	%xmm3, 0x8(%rsp)
    00000246: 	movapd	%xmm3, %xmm1
    0000024a: 	jmp	.Ltmp1221 # Offset: 586
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_copyIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_copy_stdarrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0xe9c0
  Size        : 0x263
  MaxSize     : 0x270
  Offset      : 0xe9c0
  Section     : .text
  Orc Section : .local.text._Z18test_copy_stdarrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp1222:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1222 # Offset: 37
    00000027: 	subq	$0xa28, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0xfa18(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	movq	%rdx, %r13
    00000044: 	cmpq	%rsi, %rdi
    00000047: 	je	.Ltmp1223 # Offset: 71
    0000004d: 	movq	%rsi, %rdx
    00000050: 	movq	%rdi, %r15
    00000053: 	movq	%rsi, %r12
    00000056: 	movq	%rdi, %rax
    00000059: 	subq	%rdi, %rdx
    0000005c: 	leaq	-0x8(%rdx), %rcx
    00000060: 	shrq	$0x3, %rcx
    00000064: 	addq	$0x1, %rcx
    00000068: 	cmpq	$0x8, %rdx
    0000006c: 	je	.Ltmp1224 # Offset: 108
    00000072: 	movq	%rcx, %rdx
    00000075: 	pxor	%xmm3, %xmm3
    00000079: 	shrq	%rdx
    0000007c: 	movsd	%xmm3, 0x8(%rsp)
    00000082: 	movapd	%xmm3, %xmm1
    00000086: 	shlq	$0x4, %rdx
    0000008a: 	addq	%rdi, %rdx
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp1225:
    00000090: 	movsd	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	addsd	%xmm0, %xmm1
    0000009c: 	movsd	-0x8(%rax), %xmm0
    000000a1: 	addsd	%xmm0, %xmm1
    000000a5: 	cmpq	%rdx, %rax
    000000a8: 	jne	.Ltmp1225 # Offset: 168
    000000aa: 	movq	%rcx, %rdx
    000000ad: 	andq	$-0x2, %rdx
    000000b1: 	leaq	(%r15,%rdx,8), %rax
    000000b5: 	cmpq	%rdx, %rcx
    000000b8: 	je	.Ltmp1226 # Offset: 184
.Ltmp1235:
    000000ba: 	addsd	(%rax), %xmm1
.Ltmp1226:
    000000be: 	movsd	%xmm1, (%rsp)
    000000c3: 	xorl	%ebp, %ebp
    000000c5: 	subq	%r15, %r12
    000000c8: 	leaq	0x10(%rsp), %rbx
    000000cd: 	callq	clock@PLT # Offset: 205
    000000d2: 	movl	iterations(%rip), %r14d
    000000d9: 	movsd	(%rsp), %xmm1
    000000de: 	movq	%rax, start_time(%rip)
    000000e5: 	testl	%r14d, %r14d
    000000e8: 	jle	.Ltmp1227 # Offset: 232
    000000ee: 	nop # Size: 2
.Ltmp1228:
    000000f0: 	movq	%r12, %rdx
    000000f3: 	movq	%r15, %rsi
    000000f6: 	movq	%rbx, %rdi
    000000f9: 	addl	$0x1, %ebp
    000000fc: 	movsd	%xmm1, (%rsp)
    00000101: 	callq	memcpy@PLT # Offset: 257
    00000106: 	cmpl	%r14d, %ebp
    00000109: 	movsd	(%rsp), %xmm1
    0000010e: 	jne	.Ltmp1228 # Offset: 270
.Ltmp1234:
    00000110: 	movq	%r13, %rdi
    00000113: 	movsd	%xmm1, (%rsp)
    00000118: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 280
    0000011d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000124: 	movsd	(%rsp), %xmm1
    00000129: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000130: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000137: 	je	.Ltmp1229 # Offset: 311
.Ltmp1233:
    0000013d: 	movq	-0x20(%rax), %rbp
    00000141: 	movsd	%xmm1, (%rsp)
    00000146: 	callq	clock@PLT # Offset: 326
    0000014b: 	pxor	%xmm0, %xmm0
    0000014f: 	movq	%rax, end_time(%rip)
    00000156: 	movq	%rbp, %rdi
    00000159: 	subq	start_time(%rip), %rax
    00000160: 	cvtsi2sd	%rax, %xmm0
    00000165: 	divsd	DATAat0x53788(%rip), %xmm0
    0000016d: 	callq	_Z13record_resultdPKc # Offset: 365
    00000172: 	movsd	(%rsp), %xmm1
    00000177: 	movq	%rbx, %rax
    0000017a: 	pxor	%xmm0, %xmm0
    0000017e: 	leaq	0xfa10(%rsp), %rdx
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1230:
    00000190: 	movsd	(%rax), %xmm2
    00000194: 	addq	$0x10, %rax
    00000198: 	addsd	%xmm0, %xmm2
    0000019c: 	movsd	-0x8(%rax), %xmm0
    000001a1: 	addsd	%xmm2, %xmm0
    000001a5: 	cmpq	%rax, %rdx
    000001a8: 	jne	.Ltmp1230 # Offset: 424
    000001aa: 	ucomisd	%xmm1, %xmm0
    000001ae: 	jp	.Ltmp1231 # Offset: 430
    000001b0: 	jne	.Ltmp1231 # Offset: 432
    000001b2: 	movq	0xfa18(%rsp), %rax
    000001ba: 	subq	%fs:0x28, %rax
    000001c3: 	jne	.Ltmp1232 # Offset: 451
    000001c9: 	addq	$0xfa28, %rsp
    000001d0: 	popq	%rbx
    000001d1: 	popq	%rbp
    000001d2: 	popq	%r12
    000001d4: 	popq	%r13
    000001d6: 	popq	%r14
    000001d8: 	popq	%r15
    000001da: 	retq # Offset: 474
.Ltmp1231:
    000001db: 	movq	0xfa18(%rsp), %rax
    000001e3: 	subq	%fs:0x28, %rax
    000001ec: 	jne	.Ltmp1232 # Offset: 492
    000001ee: 	movl	current_test(%rip), %edx
    000001f4: 	addq	$0xfa28, %rsp
    000001fb: 	movl	$0x1, %edi
    00000200: 	xorl	%eax, %eax
    00000202: 	popq	%rbx
    00000203: 	leaq	DATAat0x52360(%rip), %rsi
    0000020a: 	popq	%rbp
    0000020b: 	popq	%r12
    0000020d: 	popq	%r13
    0000020f: 	popq	%r14
    00000211: 	popq	%r15
    00000213: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 531
.Ltmp1229:
    00000218: 	movq	-0x8(%rdx), %rax
    0000021c: 	addq	$0x200, %rax
    00000222: 	jmp	.Ltmp1233 # Offset: 546
.Ltmp1223:
    00000227: 	callq	clock@PLT # Offset: 551
    0000022c: 	pxor	%xmm5, %xmm5
    00000230: 	movq	%rax, start_time(%rip)
    00000237: 	movapd	%xmm5, %xmm1
    0000023b: 	movsd	%xmm5, 0x8(%rsp)
.Ltmp1227:
    00000241: 	leaq	0x10(%rsp), %rbx
    00000246: 	jmp	.Ltmp1234 # Offset: 582
.Ltmp1224:
    0000024b: 	pxor	%xmm4, %xmm4
    0000024f: 	movsd	%xmm4, 0x8(%rsp)
    00000255: 	movapd	%xmm4, %xmm1
    00000259: 	jmp	.Ltmp1235 # Offset: 601
.Ltmp1232:
    0000025e: 	callq	__stack_chk_fail@PLT # Offset: 606
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_copy_stdarrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_copy_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0xec30
  Size        : 0x264
  MaxSize     : 0x270
  Offset      : 0xec30
  Section     : .text
  Orc Section : .local.text._Z15test_copy_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	movabsq	$0x7ffffffffffffff8, %rax
    0000000e: 	pushq	%r15
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	pushq	%r13
    00000017: 	subq	%rdi, %r14
    0000001a: 	pushq	%r12
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	subq	$0x28, %rsp
    00000022: 	movq	%rdx, 0x10(%rsp)
    00000027: 	cmpq	%rax, %r14
    0000002a: 	ja	.Ltmp1236 # Offset: 42
    00000030: 	movq	%rdi, %rbx
    00000033: 	movq	%r14, %rdi
    00000036: 	movq	%rsi, %rbp
    00000039: 	callq	_Znam@PLT # Offset: 57
    0000003e: 	movq	%rax, %r12
    00000041: 	cmpq	%rbx, %rbp
    00000044: 	je	.Ltmp1237 # Offset: 68
    0000004a: 	leaq	-0x8(%r14), %rcx
    0000004e: 	movq	%rbx, %rax
    00000051: 	shrq	$0x3, %rcx
    00000055: 	addq	$0x1, %rcx
    00000059: 	cmpq	$0x8, %r14
    0000005d: 	je	.Ltmp1238 # Offset: 93
    00000063: 	movq	%rcx, %rdx
    00000066: 	pxor	%xmm3, %xmm3
    0000006a: 	shrq	%rdx
    0000006d: 	movsd	%xmm3, 0x18(%rsp)
    00000073: 	movapd	%xmm3, %xmm1
    00000077: 	shlq	$0x4, %rdx
    0000007b: 	addq	%rbx, %rdx
    0000007e: 	nop # Size: 2
.Ltmp1239:
    00000080: 	movsd	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	addsd	%xmm0, %xmm1
    0000008c: 	movsd	-0x8(%rax), %xmm0
    00000091: 	addsd	%xmm0, %xmm1
    00000095: 	cmpq	%rax, %rdx
    00000098: 	jne	.Ltmp1239 # Offset: 152
    0000009a: 	movq	%rcx, %rdx
    0000009d: 	andq	$-0x2, %rdx
    000000a1: 	leaq	(%rbx,%rdx,8), %rax
    000000a5: 	cmpq	%rdx, %rcx
    000000a8: 	je	.Ltmp1240 # Offset: 168
.Ltmp1251:
    000000aa: 	addsd	(%rax), %xmm1
.Ltmp1240:
    000000ae: 	movsd	%xmm1, 0x8(%rsp)
    000000b4: 	xorl	%r15d, %r15d
    000000b7: 	subq	%rbx, %rbp
    000000ba: 	callq	clock@PLT # Offset: 186
    000000bf: 	movl	iterations(%rip), %r13d
    000000c6: 	movsd	0x8(%rsp), %xmm1
    000000cc: 	movq	%rax, start_time(%rip)
    000000d3: 	testl	%r13d, %r13d
    000000d6: 	jle	.Ltmp1241 # Offset: 214
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1242:
    000000e0: 	movq	%rbp, %rdx
    000000e3: 	movq	%rbx, %rsi
    000000e6: 	movq	%r12, %rdi
    000000e9: 	addl	$0x1, %r15d
    000000ed: 	movsd	%xmm1, 0x8(%rsp)
    000000f3: 	callq	memcpy@PLT # Offset: 243
    000000f8: 	cmpl	%r13d, %r15d
    000000fb: 	movsd	0x8(%rsp), %xmm1
    00000101: 	jne	.Ltmp1242 # Offset: 257
.Ltmp1241:
    00000103: 	movq	0x10(%rsp), %rdi
    00000108: 	movsd	%xmm1, 0x8(%rsp)
    0000010e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 270
    00000113: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000121: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000128: 	movsd	0x8(%rsp), %xmm1
    0000012e: 	je	.Ltmp1243 # Offset: 302
.Ltmp1250:
    00000134: 	movq	-0x20(%rax), %rbp
    00000138: 	movsd	%xmm1, 0x8(%rsp)
    0000013e: 	callq	clock@PLT # Offset: 318
    00000143: 	pxor	%xmm0, %xmm0
    00000147: 	movq	%rax, end_time(%rip)
    0000014e: 	movq	%rbp, %rdi
    00000151: 	subq	start_time(%rip), %rax
    00000158: 	cvtsi2sd	%rax, %xmm0
    0000015d: 	divsd	DATAat0x53788(%rip), %xmm0
    00000165: 	callq	_Z13record_resultdPKc # Offset: 357
    0000016a: 	testq	%r14, %r14
    0000016d: 	movsd	0x8(%rsp), %xmm1
    00000173: 	je	.Ltmp1244 # Offset: 371
    00000179: 	leaq	-0x8(%r14), %rcx
    0000017d: 	movq	%r12, %rax
    00000180: 	shrq	$0x3, %rcx
    00000184: 	addq	$0x1, %rcx
    00000188: 	cmpq	$0x8, %r14
    0000018c: 	je	.Ltmp1245 # Offset: 396
    00000192: 	movq	%rcx, %rdx
    00000195: 	pxor	%xmm0, %xmm0
    00000199: 	shrq	%rdx
    0000019c: 	shlq	$0x4, %rdx
    000001a0: 	addq	%r12, %rdx
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1246:
    000001a8: 	movsd	(%rax), %xmm2
    000001ac: 	addq	$0x10, %rax
    000001b0: 	addsd	%xmm2, %xmm0
    000001b4: 	movsd	-0x8(%rax), %xmm2
    000001b9: 	addsd	%xmm2, %xmm0
    000001bd: 	cmpq	%rax, %rdx
    000001c0: 	jne	.Ltmp1246 # Offset: 448
    000001c2: 	movq	%rcx, %rdx
    000001c5: 	andq	$-0x2, %rdx
    000001c9: 	leaq	(%r12,%rdx,8), %rax
    000001cd: 	cmpq	%rcx, %rdx
    000001d0: 	je	.Ltmp1247 # Offset: 464
.Ltmp1252:
    000001d2: 	addsd	(%rax), %xmm0
.Ltmp1247:
    000001d6: 	ucomisd	%xmm1, %xmm0
    000001da: 	jp	.Ltmp1248 # Offset: 474
    000001dc: 	jne	.Ltmp1248 # Offset: 476
.Ltmp1249:
    000001de: 	addq	$0x28, %rsp
    000001e2: 	movq	%r12, %rdi
    000001e5: 	popq	%rbx
    000001e6: 	popq	%rbp
    000001e7: 	popq	%r12
    000001e9: 	popq	%r13
    000001eb: 	popq	%r14
    000001ed: 	popq	%r15
    000001ef: 	jmp	_ZdaPv@PLT # TAILCALL  # Offset: 495
.Ltmp1248:
    000001f4: 	movl	current_test(%rip), %edx
    000001fa: 	leaq	DATAat0x52360(%rip), %rsi
    00000201: 	movl	$0x1, %edi
    00000206: 	xorl	%eax, %eax
    00000208: 	callq	__printf_chk@PLT # Offset: 520
    0000020d: 	jmp	.Ltmp1249 # Offset: 525
.Ltmp1243:
    0000020f: 	movq	-0x8(%rdx), %rax
    00000213: 	addq	$0x200, %rax
    00000219: 	jmp	.Ltmp1250 # Offset: 537
.Ltmp1244:
    0000021e: 	pxor	%xmm0, %xmm0
    00000222: 	jmp	.Ltmp1247 # Offset: 546
.Ltmp1237:
    00000224: 	callq	clock@PLT # Offset: 548
    00000229: 	pxor	%xmm5, %xmm5
    0000022d: 	movq	%rax, start_time(%rip)
    00000234: 	movapd	%xmm5, %xmm1
    00000238: 	movsd	%xmm5, 0x18(%rsp)
    0000023e: 	jmp	.Ltmp1241 # Offset: 574
.Ltmp1238:
    00000243: 	pxor	%xmm4, %xmm4
    00000247: 	movsd	%xmm4, 0x18(%rsp)
    0000024d: 	movapd	%xmm4, %xmm1
    00000251: 	jmp	.Ltmp1251 # Offset: 593
.Ltmp1245:
    00000256: 	pxor	%xmm0, %xmm0
    0000025a: 	jmp	.Ltmp1252 # Offset: 602
.Ltmp1236:
    0000025f: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 607
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_copy_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0xeea0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0xeea0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1253 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp1254 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp1255 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp1256 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp1257 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp1264:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp1258 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp1258:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp1259 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp1260 # Offset: 200
.Ltmp1262:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1254:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp1261 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp1261:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1253:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1259:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1263:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1262 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1260:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1263 # Offset: 392
.Ltmp1257:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp1265:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp1264 # Offset: 445
.Ltmp1256:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp1265 # Offset: 460
.Ltmp1255:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm"

Binary Function "_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0xf080
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0xf080
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1266 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp1267 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp1268 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp1269 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp1270 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp1277:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp1271 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp1271:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp1272 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp1273 # Offset: 200
.Ltmp1275:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1267:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp1274 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp1274:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1266:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1272:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1276:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1275 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1273:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1276 # Offset: 392
.Ltmp1270:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp1278:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp1277 # Offset: 445
.Ltmp1269:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp1278 # Offset: 460
.Ltmp1268:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm"

Binary Function "_Z19test_duplicate_coreINSt7__cxx114listIdSaIdEEEEvRT_mRKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0xf260
  Size        : 0x37d
  MaxSize     : 0x380
  Offset      : 0xf260
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreINSt7__cxx114listIdSaIdEEEEvRT_mRKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x3, %rsi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rdi, %r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x88, %rsp
    0000001c: 	movq	%rdx, 0x38(%rsp)
    00000021: 	xorl	%edx, %edx
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x78(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	movabsq	$0x500000000, %rax
    0000003d: 	divq	%rsi
    00000040: 	movq	%rax, 0x10(%rsp)
    00000045: 	cmpq	$0x3e8, %rax
    0000004b: 	ja	.Ltmp1279 # Offset: 75
    00000051: 	cmpq	$0x3, %rax
    00000055: 	ja	.Ltmp1280 # Offset: 85
    0000005b: 	movq	$0x0, 0x50(%rsp)
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	movq	$0x4, 0x10(%rsp)
    00000071: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1295:
    00000076: 	movq	0x10(%rsp), %rbx
    0000007b: 	leaq	0x40(%rsp), %rdi
    00000080: 	movq	%rbx, %rsi
    00000083: 	callq	_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm # Offset: 131
    00000088: 	movq	0x40(%rsp), %rdx
    0000008d: 	movl	iterations(%rip), %eax
    00000093: 	movq	%rdx, 0x18(%rsp)
    00000098: 	testl	%eax, %eax
    0000009a: 	jle	.Ltmp1281 # Offset: 154
    000000a0: 	addq	$0x8, %rdx
    000000a4: 	movl	%ebx, 0x2c(%rsp)
    000000a8: 	pxor	%xmm3, %xmm3
    000000ac: 	leaq	0x60(%rsp), %r13
    000000b1: 	movl	$0x0, 0x28(%rsp)
    000000b9: 	movq	%rdx, 0x30(%rsp)
    000000be: 	movsd	%xmm3, 0x20(%rsp)
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp1291:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	%rdx, %rsi
    000000d3: 	addq	0x10(%rsp), %rdx
    000000d8: 	subl	%esi, %eax
    000000da: 	cmpq	%rcx, %rdx
    000000dd: 	cmovbl	0x2c(%rsp), %eax
    000000e2: 	movl	%eax, %ebx
    000000e4: 	callq	clock@PLT # Offset: 228
    000000e9: 	movq	0x30(%rsp), %rdx
    000000ee: 	movq	0x18(%rsp), %r15
    000000f3: 	movq	%rax, start_time(%rip)
    000000fa: 	leal	-0x1(%rbx), %eax
    000000fd: 	leaq	(%rdx,%rax,8), %rax
    00000101: 	movq	%r15, %r12
    00000104: 	movq	%rax, 0x8(%rsp)
.Ltmp1285:
    00000109: 	movl	$0x18, %edi
    0000010e: 	callq	_Znwm@PLT # Offset: 270
    00000113: 	movq	%rax, %xmm0
    00000118: 	movq	%r13, %xmm1
    0000011d: 	movq	$0x0, 0x10(%rax)
    00000125: 	movq	%rax, %rbx
    00000128: 	punpcklqdq	%xmm0, %xmm0
    0000012c: 	punpcklqdq	%xmm1, %xmm1
    00000130: 	movups	%xmm0, (%rax)
    00000133: 	cmpq	%r14, %rax
    00000136: 	je	.Ltmp1282 # Offset: 310
    0000013c: 	movq	(%r14), %rbp
    0000013f: 	cmpq	%rbp, %r14
    00000142: 	je	.Ltmp1282 # Offset: 322
    00000148: 	movq	$0x0, 0x70(%rsp)
    00000151: 	movaps	%xmm1, 0x60(%rsp)
.Ltmp1283:
    00000156: 	movl	$0x18, %edi
    0000015b: 	callq	_Znwm@PLT # Offset: 347
    00000160: 	movsd	0x10(%rbp), %xmm0
    00000165: 	movq	%rax, %rdi
    00000168: 	movq	%r13, %rsi
    0000016b: 	movsd	%xmm0, 0x10(%rax)
    00000170: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 368
    00000175: 	movq	(%rbp), %rbp
    00000179: 	addq	$0x1, 0x70(%rsp)
    0000017f: 	cmpq	%rbp, %r14
    00000182: 	jne	.Ltmp1283 # Offset: 386
    00000184: 	movq	0x60(%rsp), %rsi
    00000189: 	cmpq	%r13, %rsi
    0000018c: 	je	.Ltmp1282 # Offset: 396
    0000018e: 	movq	%r13, %rdx
    00000191: 	movq	%rbx, %rdi
    00000194: 	callq	_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_@PLT # Offset: 404
    00000199: 	movq	0x60(%rsp), %rbp
    0000019e: 	movq	0x70(%rsp), %rax
    000001a3: 	movq	$0x0, 0x70(%rsp)
    000001ac: 	addq	%rax, 0x10(%rbx)
    000001b0: 	cmpq	%r13, %rbp
    000001b3: 	je	.Ltmp1282 # Offset: 435
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1284:
    000001b8: 	movq	%rbp, %rdi
    000001bb: 	movq	(%rbp), %rbp
    000001bf: 	movl	$0x18, %esi
    000001c4: 	callq	_ZdlPvm@PLT # Offset: 452
    000001c9: 	cmpq	%r13, %rbp
    000001cc: 	jne	.Ltmp1284 # Offset: 460
    000001ce: 	nop # Size: 2
.Ltmp1282:
    000001d0: 	movq	%rbx, (%r15)
    000001d3: 	addq	$0x8, %r15
    000001d7: 	cmpq	0x8(%rsp), %r15
    000001dc: 	jne	.Ltmp1285 # Offset: 476
    000001e2: 	callq	clock@PLT # Offset: 482
    000001e7: 	pxor	%xmm0, %xmm0
    000001eb: 	movq	%rax, end_time(%rip)
    000001f2: 	subq	start_time(%rip), %rax
    000001f9: 	cvtsi2sd	%rax, %xmm0
    000001fe: 	divsd	DATAat0x53788(%rip), %xmm0
    00000206: 	addsd	0x20(%rsp), %xmm0
    0000020c: 	movsd	%xmm0, 0x20(%rsp)
    00000212: 	jmp	.Ltmp1286 # Offset: 530
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp1288:
    00000218: 	movq	$0x0, (%r12)
    00000220: 	addq	$0x8, %r12
    00000224: 	cmpq	%r12, 0x8(%rsp)
    00000229: 	je	.Ltmp1287 # Offset: 553
.Ltmp1286:
    0000022b: 	movq	(%r12), %rbp
    0000022f: 	testq	%rbp, %rbp
    00000232: 	je	.Ltmp1288 # Offset: 562
    00000234: 	movq	(%rbp), %rbx
    00000238: 	cmpq	%rbp, %rbx
    0000023b: 	je	.Ltmp1289 # Offset: 571
    0000023d: 	nopl	(%rax) # Size: 3
.Ltmp1290:
    00000240: 	movq	%rbx, %rdi
    00000243: 	movq	(%rbx), %rbx
    00000246: 	movl	$0x18, %esi
    0000024b: 	callq	_ZdlPvm@PLT # Offset: 587
    00000250: 	cmpq	%rbp, %rbx
    00000253: 	jne	.Ltmp1290 # Offset: 595
.Ltmp1289:
    00000255: 	movl	$0x18, %esi
    0000025a: 	movq	%rbp, %rdi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
    00000262: 	jmp	.Ltmp1288 # Offset: 610
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp1287:
    00000268: 	movl	0x10(%rsp), %ecx
    0000026c: 	movl	iterations(%rip), %eax
    00000272: 	addl	%ecx, 0x28(%rsp)
    00000276: 	movl	0x28(%rsp), %ecx
    0000027a: 	cmpl	%ecx, %eax
    0000027c: 	jg	.Ltmp1291 # Offset: 636
.Ltmp1297:
    00000282: 	movq	0x38(%rsp), %rdi
    00000287: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 647
    0000028c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000293: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000029a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a1: 	je	.Ltmp1292 # Offset: 673
.Ltmp1296:
    000002a3: 	movq	-0x20(%rax), %rdi
    000002a7: 	movsd	0x20(%rsp), %xmm0
    000002ad: 	callq	_Z13record_resultdPKc # Offset: 685
    000002b2: 	movq	0x18(%rsp), %rdi
    000002b7: 	testq	%rdi, %rdi
    000002ba: 	je	.Ltmp1293 # Offset: 698
    000002bc: 	movq	0x50(%rsp), %rsi
    000002c1: 	subq	%rdi, %rsi
    000002c4: 	callq	_ZdlPvm@PLT # Offset: 708
.Ltmp1293:
    000002c9: 	movq	0x78(%rsp), %rax
    000002ce: 	subq	%fs:0x28, %rax
    000002d7: 	jne	.Ltmp1294 # Offset: 727
    000002d9: 	addq	$0x88, %rsp
    000002e0: 	popq	%rbx
    000002e1: 	popq	%rbp
    000002e2: 	popq	%r12
    000002e4: 	popq	%r13
    000002e6: 	popq	%r14
    000002e8: 	popq	%r15
    000002ea: 	retq # Offset: 746
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1279:
    000002f0: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1280:
    000002f9: 	movq	$0x0, 0x50(%rsp)
    00000302: 	pxor	%xmm0, %xmm0
    00000306: 	movaps	%xmm0, 0x40(%rsp)
    0000030b: 	jmp	.Ltmp1295 # Offset: 779
.Ltmp1292:
    00000310: 	movq	-0x8(%rdx), %rax
    00000314: 	addq	$0x200, %rax
    0000031a: 	jmp	.Ltmp1296 # Offset: 794
.Ltmp1281:
    0000031c: 	pxor	%xmm4, %xmm4
    00000320: 	movsd	%xmm4, 0x20(%rsp)
    00000326: 	jmp	.Ltmp1297 # Offset: 806
.Ltmp1294:
    0000032b: 	callq	__stack_chk_fail@PLT # Offset: 811
    00000330: 	endbr64
    00000334: 	movq	%rax, %rbp
    00000337: 	jmp	.Ltmp1298 # Offset: 823
    00000339: 	endbr64
    0000033d: 	movq	%rax, %rbp
    00000340: 	jmp	.Ltmp1299 # Offset: 832
.Ltmp1298:
    00000342: 	movq	0x60(%rsp), %rdi
.Ltmp1300:
    00000347: 	cmpq	%r13, %rdi
    0000034a: 	je	.Ltmp1299 # Offset: 842
    0000034c: 	movq	(%rdi), %rbx
    0000034f: 	movl	$0x18, %esi
    00000354: 	callq	_ZdlPvm@PLT # Offset: 852
    00000359: 	movq	%rbx, %rdi
    0000035c: 	jmp	.Ltmp1300 # Offset: 860
.Ltmp1299:
    0000035e: 	movq	0x40(%rsp), %rdi
    00000363: 	movq	0x50(%rsp), %rsi
    00000368: 	subq	%rdi, %rsi
    0000036b: 	testq	%rdi, %rdi
    0000036e: 	je	.Ltmp1301 # Offset: 878
    00000370: 	callq	_ZdlPvm@PLT # Offset: 880
.Ltmp1301:
    00000375: 	movq	%rbp, %rdi
    00000378: 	callq	_Unwind_Resume@PLT # Offset: 888
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreINSt7__cxx114listIdSaIdEEEEvRT_mRKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_delete_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0xf5e0
  Size        : 0x305
  MaxSize     : 0x310
  Offset      : 0xf5e0
  Section     : .text
  Orc Section : .local.text._Z20test_delete_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rdi, %r15
    0000000c: 	pushq	%r14
    0000000e: 	subq	%rdi, %rcx
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rdx, 0x38(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x58(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	movabsq	$0x500000000, %rax
    0000003f: 	divq	%rcx
    00000042: 	cmpq	$0x3e8, %rax
    00000048: 	ja	.Ltmp1302 # Offset: 72
    0000004e: 	movq	%rax, %r14
    00000051: 	cmpq	$0x3, %rax
    00000055: 	ja	.Ltmp1303 # Offset: 85
    0000005b: 	movq	$0x0, 0x50(%rsp)
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	movl	$0x4, %r14d
    0000006e: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1317:
    00000073: 	leaq	0x40(%rsp), %rdi
    00000078: 	movq	%r14, %rsi
    0000007b: 	callq	_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm # Offset: 123
    00000080: 	movq	0x40(%rsp), %rcx
    00000085: 	movl	iterations(%rip), %eax
    0000008b: 	movq	%rcx, 0x20(%rsp)
    00000090: 	testl	%eax, %eax
    00000092: 	jle	.Ltmp1304 # Offset: 146
    00000098: 	leaq	0x8(%rcx), %rdx
    0000009c: 	movl	%r14d, 0x2c(%rsp)
    000000a1: 	pxor	%xmm2, %xmm2
    000000a5: 	movl	$0x0, 0x28(%rsp)
    000000ad: 	movq	%rdx, 0x30(%rsp)
    000000b2: 	movsd	%xmm2, 0x18(%rsp)
.Ltmp1313:
    000000b8: 	movslq	0x28(%rsp), %rdx
    000000bd: 	movslq	%eax, %rcx
    000000c0: 	movq	%rdx, %rsi
    000000c3: 	addq	%r14, %rdx
    000000c6: 	subl	%esi, %eax
    000000c8: 	cmpq	%rcx, %rdx
    000000cb: 	cmovbl	0x2c(%rsp), %eax
    000000d0: 	movq	0x30(%rsp), %rcx
    000000d5: 	movq	0x20(%rsp), %rdx
    000000da: 	subl	$0x1, %eax
    000000dd: 	leaq	(%rcx,%rax,8), %rax
    000000e1: 	movq	%rdx, 0x10(%rsp)
    000000e6: 	movq	%rdx, %r13
    000000e9: 	movq	%rax, 0x8(%rsp)
.Ltmp1307:
    000000ee: 	movl	$0x18, %edi
    000000f3: 	callq	_Znwm@PLT # Offset: 243
    000000f8: 	movq	%rax, %xmm0
    000000fd: 	movq	$0x0, 0x10(%rax)
    00000105: 	movq	%rax, %rbx
    00000108: 	movq	%r15, %rbp
    0000010b: 	punpcklqdq	%xmm0, %xmm0
    0000010f: 	movups	%xmm0, (%rax)
    00000112: 	cmpq	%r15, %r12
    00000115: 	je	.Ltmp1305 # Offset: 277
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1306:
    00000120: 	movl	$0x18, %edi
    00000125: 	addq	$0x8, %rbp
    00000129: 	callq	_Znwm@PLT # Offset: 297
    0000012e: 	movsd	-0x8(%rbp), %xmm0
    00000133: 	movq	%rax, %rdi
    00000136: 	movq	%rbx, %rsi
    00000139: 	movsd	%xmm0, 0x10(%rax)
    0000013e: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 318
    00000143: 	addq	$0x1, 0x10(%rbx)
    00000148: 	cmpq	%rbp, %r12
    0000014b: 	jne	.Ltmp1306 # Offset: 331
.Ltmp1305:
    0000014d: 	movq	0x10(%rsp), %rax
    00000152: 	movq	%rbx, (%rax)
    00000155: 	addq	$0x8, %rax
    00000159: 	movq	%rax, 0x10(%rsp)
    0000015e: 	cmpq	%rax, 0x8(%rsp)
    00000163: 	jne	.Ltmp1307 # Offset: 355
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	movq	%rax, start_time(%rip)
    00000171: 	jmp	.Ltmp1308 # Offset: 369
    00000173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1310:
    00000178: 	movq	$0x0, (%r13)
    00000180: 	addq	$0x8, %r13
    00000184: 	cmpq	%r13, 0x8(%rsp)
    00000189: 	je	.Ltmp1309 # Offset: 393
.Ltmp1308:
    0000018b: 	movq	(%r13), %rbp
    0000018f: 	testq	%rbp, %rbp
    00000192: 	je	.Ltmp1310 # Offset: 402
    00000194: 	movq	(%rbp), %rbx
    00000198: 	cmpq	%rbp, %rbx
    0000019b: 	je	.Ltmp1311 # Offset: 411
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp1312:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	movq	(%rbx), %rbx
    000001a6: 	movl	$0x18, %esi
    000001ab: 	callq	_ZdlPvm@PLT # Offset: 427
    000001b0: 	cmpq	%rbp, %rbx
    000001b3: 	jne	.Ltmp1312 # Offset: 435
.Ltmp1311:
    000001b5: 	movl	$0x18, %esi
    000001ba: 	movq	%rbp, %rdi
    000001bd: 	callq	_ZdlPvm@PLT # Offset: 445
    000001c2: 	jmp	.Ltmp1310 # Offset: 450
    000001c4: 	nopl	(%rax) # Size: 4
.Ltmp1309:
    000001c8: 	callq	clock@PLT # Offset: 456
    000001cd: 	pxor	%xmm0, %xmm0
    000001d1: 	addl	%r14d, 0x28(%rsp)
    000001d6: 	movl	0x28(%rsp), %ecx
    000001da: 	movq	%rax, end_time(%rip)
    000001e1: 	subq	start_time(%rip), %rax
    000001e8: 	cvtsi2sd	%rax, %xmm0
    000001ed: 	divsd	DATAat0x53788(%rip), %xmm0
    000001f5: 	addsd	0x18(%rsp), %xmm0
    000001fb: 	movl	iterations(%rip), %eax
    00000201: 	movsd	%xmm0, 0x18(%rsp)
    00000207: 	cmpl	%eax, %ecx
    00000209: 	jl	.Ltmp1313 # Offset: 521
.Ltmp1319:
    0000020f: 	movq	0x38(%rsp), %rdi
    00000214: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 532
    00000219: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000220: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000227: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022e: 	je	.Ltmp1314 # Offset: 558
.Ltmp1318:
    00000234: 	movq	-0x20(%rax), %rdi
    00000238: 	movsd	0x18(%rsp), %xmm0
    0000023e: 	callq	_Z13record_resultdPKc # Offset: 574
    00000243: 	cmpq	$0x0, 0x20(%rsp)
    00000249: 	je	.Ltmp1315 # Offset: 585
    0000024b: 	movq	0x58(%rsp), %rax
    00000250: 	subq	%fs:0x28, %rax
    00000259: 	jne	.Ltmp1316 # Offset: 601
    0000025b: 	movq	0x50(%rsp), %rsi
    00000260: 	movq	0x20(%rsp), %rdi
    00000265: 	addq	$0x68, %rsp
    00000269: 	popq	%rbx
    0000026a: 	popq	%rbp
    0000026b: 	subq	%rdi, %rsi
    0000026e: 	popq	%r12
    00000270: 	popq	%r13
    00000272: 	popq	%r14
    00000274: 	popq	%r15
    00000276: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 630
    0000027b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1302:
    00000280: 	movl	$0x3e8, %r14d
.Ltmp1303:
    00000286: 	movq	$0x0, 0x50(%rsp)
    0000028f: 	pxor	%xmm0, %xmm0
    00000293: 	movaps	%xmm0, 0x40(%rsp)
    00000298: 	jmp	.Ltmp1317 # Offset: 664
.Ltmp1315:
    0000029d: 	movq	0x58(%rsp), %rax
    000002a2: 	subq	%fs:0x28, %rax
    000002ab: 	jne	.Ltmp1316 # Offset: 683
    000002ad: 	addq	$0x68, %rsp
    000002b1: 	popq	%rbx
    000002b2: 	popq	%rbp
    000002b3: 	popq	%r12
    000002b5: 	popq	%r13
    000002b7: 	popq	%r14
    000002b9: 	popq	%r15
    000002bb: 	retq # Offset: 699
.Ltmp1314:
    000002bc: 	movq	-0x8(%rdx), %rax
    000002c0: 	addq	$0x200, %rax
    000002c6: 	jmp	.Ltmp1318 # Offset: 710
.Ltmp1304:
    000002cb: 	pxor	%xmm3, %xmm3
    000002cf: 	movsd	%xmm3, 0x18(%rsp)
    000002d5: 	jmp	.Ltmp1319 # Offset: 725
.Ltmp1316:
    000002da: 	callq	__stack_chk_fail@PLT # Offset: 730
    000002df: 	endbr64
    000002e3: 	movq	%rax, %rbp
    000002e6: 	movq	0x40(%rsp), %rdi
    000002eb: 	movq	0x50(%rsp), %rsi
    000002f0: 	subq	%rdi, %rsi
    000002f3: 	testq	%rdi, %rdi
    000002f6: 	je	.Ltmp1320 # Offset: 758
    000002f8: 	callq	_ZdlPvm@PLT # Offset: 760
.Ltmp1320:
    000002fd: 	movq	%rbp, %rdi
    00000300: 	callq	_Unwind_Resume@PLT # Offset: 768
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_delete_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_clearall_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0xf8f0
  Size        : 0x34d
  MaxSize     : 0x350
  Offset      : 0xf8f0
  Section     : .text
  Orc Section : .local.text._Z22test_clearall_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x30(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	cmpq	$0x3e8, %rax
    0000004a: 	ja	.Ltmp1321 # Offset: 74
    00000050: 	movq	%rax, %r14
    00000053: 	cmpq	$0x3, %rax
    00000057: 	ja	.Ltmp1322 # Offset: 87
    0000005d: 	movq	$0x0, 0x50(%rsp)
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movl	$0x4, %r14d
    00000070: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1339:
    00000075: 	leaq	0x40(%rsp), %rdi
    0000007a: 	movq	%r14, %rsi
    0000007d: 	callq	_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm # Offset: 125
    00000082: 	movq	0x40(%rsp), %rcx
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movq	%rcx, 0x18(%rsp)
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp1323 # Offset: 148
    0000009a: 	leaq	0x8(%rcx), %rdx
    0000009e: 	movl	%r14d, 0x24(%rsp)
    000000a3: 	pxor	%xmm1, %xmm1
    000000a7: 	movl	$0x0, 0x20(%rsp)
    000000af: 	movq	%rdx, 0x28(%rsp)
    000000b4: 	movsd	%xmm1, 0x38(%rsp)
.Ltmp1335:
    000000ba: 	movslq	0x20(%rsp), %rdx
    000000bf: 	movslq	%eax, %rcx
    000000c2: 	movq	%rdx, %rsi
    000000c5: 	addq	%r14, %rdx
    000000c8: 	subl	%esi, %eax
    000000ca: 	cmpq	%rcx, %rdx
    000000cd: 	cmovbl	0x24(%rsp), %eax
    000000d2: 	movq	0x28(%rsp), %rcx
    000000d7: 	movq	0x18(%rsp), %rdx
    000000dc: 	subl	$0x1, %eax
    000000df: 	leaq	(%rcx,%rax,8), %rax
    000000e3: 	movq	%rdx, %r13
    000000e6: 	movq	%rdx, %r15
    000000e9: 	movq	%rax, 0x8(%rsp)
.Ltmp1326:
    000000ee: 	movl	$0x18, %edi
    000000f3: 	callq	_Znwm@PLT # Offset: 243
    000000f8: 	movq	%rax, %xmm0
    000000fd: 	movq	$0x0, 0x10(%rax)
    00000105: 	movq	%rax, %rbx
    00000108: 	punpcklqdq	%xmm0, %xmm0
    0000010c: 	movups	%xmm0, (%rax)
    0000010f: 	movq	0x10(%rsp), %rax
    00000114: 	movq	%rax, %rbp
    00000117: 	cmpq	%rax, %r12
    0000011a: 	je	.Ltmp1324 # Offset: 282
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1325:
    00000120: 	movl	$0x18, %edi
    00000125: 	addq	$0x8, %rbp
    00000129: 	callq	_Znwm@PLT # Offset: 297
    0000012e: 	movsd	-0x8(%rbp), %xmm0
    00000133: 	movq	%rax, %rdi
    00000136: 	movq	%rbx, %rsi
    00000139: 	movsd	%xmm0, 0x10(%rax)
    0000013e: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 318
    00000143: 	addq	$0x1, 0x10(%rbx)
    00000148: 	cmpq	%rbp, %r12
    0000014b: 	jne	.Ltmp1325 # Offset: 331
.Ltmp1324:
    0000014d: 	movq	%r15, %rax
    00000150: 	movq	%rbx, (%r15)
    00000153: 	addq	$0x8, %rax
    00000157: 	movq	%rax, %r15
    0000015a: 	cmpq	0x8(%rsp), %rax
    0000015f: 	jne	.Ltmp1326 # Offset: 351
    00000161: 	callq	clock@PLT # Offset: 353
    00000166: 	movq	0x18(%rsp), %rbp
    0000016b: 	movq	%rax, start_time(%rip)
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1329:
    00000178: 	movq	(%rbp), %rbx
    0000017c: 	movq	(%rbx), %r15
    0000017f: 	cmpq	%r15, %rbx
    00000182: 	je	.Ltmp1327 # Offset: 386
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp1328:
    00000188: 	movq	%r15, %rdi
    0000018b: 	movq	(%r15), %r15
    0000018e: 	movl	$0x18, %esi
    00000193: 	callq	_ZdlPvm@PLT # Offset: 403
    00000198: 	cmpq	%r15, %rbx
    0000019b: 	jne	.Ltmp1328 # Offset: 411
.Ltmp1327:
    0000019d: 	movq	%r15, %xmm0
    000001a2: 	movq	$0x0, 0x10(%rbx)
    000001aa: 	addq	$0x8, %rbp
    000001ae: 	punpcklqdq	%xmm0, %xmm0
    000001b2: 	movups	%xmm0, (%rbx)
    000001b5: 	cmpq	0x8(%rsp), %rbp
    000001ba: 	jne	.Ltmp1329 # Offset: 442
    000001bc: 	callq	clock@PLT # Offset: 444
    000001c1: 	pxor	%xmm0, %xmm0
    000001c5: 	movq	%rax, end_time(%rip)
    000001cc: 	subq	start_time(%rip), %rax
    000001d3: 	cvtsi2sd	%rax, %xmm0
    000001d8: 	divsd	DATAat0x53788(%rip), %xmm0
    000001e0: 	addsd	0x38(%rsp), %xmm0
    000001e6: 	movsd	%xmm0, 0x38(%rsp)
    000001ec: 	jmp	.Ltmp1330 # Offset: 492
    000001ee: 	nop # Size: 2
.Ltmp1332:
    000001f0: 	movq	$0x0, (%r13)
    000001f8: 	addq	$0x8, %r13
    000001fc: 	cmpq	0x8(%rsp), %r13
    00000201: 	je	.Ltmp1331 # Offset: 513
.Ltmp1330:
    00000203: 	movq	(%r13), %rbp
    00000207: 	testq	%rbp, %rbp
    0000020a: 	je	.Ltmp1332 # Offset: 522
    0000020c: 	movq	(%rbp), %rbx
    00000210: 	cmpq	%rbp, %rbx
    00000213: 	je	.Ltmp1333 # Offset: 531
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp1334:
    00000218: 	movq	%rbx, %rdi
    0000021b: 	movq	(%rbx), %rbx
    0000021e: 	movl	$0x18, %esi
    00000223: 	callq	_ZdlPvm@PLT # Offset: 547
    00000228: 	cmpq	%rbp, %rbx
    0000022b: 	jne	.Ltmp1334 # Offset: 555
.Ltmp1333:
    0000022d: 	movl	$0x18, %esi
    00000232: 	movq	%rbp, %rdi
    00000235: 	callq	_ZdlPvm@PLT # Offset: 565
    0000023a: 	jmp	.Ltmp1332 # Offset: 570
    0000023c: 	nopl	(%rax) # Size: 4
.Ltmp1331:
    00000240: 	addl	%r14d, 0x20(%rsp)
    00000245: 	movl	iterations(%rip), %eax
    0000024b: 	movl	0x20(%rsp), %ecx
    0000024f: 	cmpl	%ecx, %eax
    00000251: 	jg	.Ltmp1335 # Offset: 593
.Ltmp1341:
    00000257: 	movq	0x30(%rsp), %rdi
    0000025c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 604
    00000261: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000268: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000026f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000276: 	je	.Ltmp1336 # Offset: 630
.Ltmp1340:
    0000027c: 	movq	-0x20(%rax), %rdi
    00000280: 	movsd	0x38(%rsp), %xmm0
    00000286: 	callq	_Z13record_resultdPKc # Offset: 646
    0000028b: 	cmpq	$0x0, 0x18(%rsp)
    00000291: 	je	.Ltmp1337 # Offset: 657
    00000293: 	movq	0x58(%rsp), %rax
    00000298: 	subq	%fs:0x28, %rax
    000002a1: 	jne	.Ltmp1338 # Offset: 673
    000002a3: 	movq	0x50(%rsp), %rsi
    000002a8: 	movq	0x18(%rsp), %rdi
    000002ad: 	addq	$0x68, %rsp
    000002b1: 	popq	%rbx
    000002b2: 	popq	%rbp
    000002b3: 	subq	%rdi, %rsi
    000002b6: 	popq	%r12
    000002b8: 	popq	%r13
    000002ba: 	popq	%r14
    000002bc: 	popq	%r15
    000002be: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 702
    000002c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1321:
    000002c8: 	movl	$0x3e8, %r14d
.Ltmp1322:
    000002ce: 	movq	$0x0, 0x50(%rsp)
    000002d7: 	pxor	%xmm0, %xmm0
    000002db: 	movaps	%xmm0, 0x40(%rsp)
    000002e0: 	jmp	.Ltmp1339 # Offset: 736
.Ltmp1337:
    000002e5: 	movq	0x58(%rsp), %rax
    000002ea: 	subq	%fs:0x28, %rax
    000002f3: 	jne	.Ltmp1338 # Offset: 755
    000002f5: 	addq	$0x68, %rsp
    000002f9: 	popq	%rbx
    000002fa: 	popq	%rbp
    000002fb: 	popq	%r12
    000002fd: 	popq	%r13
    000002ff: 	popq	%r14
    00000301: 	popq	%r15
    00000303: 	retq # Offset: 771
.Ltmp1336:
    00000304: 	movq	-0x8(%rdx), %rax
    00000308: 	addq	$0x200, %rax
    0000030e: 	jmp	.Ltmp1340 # Offset: 782
.Ltmp1323:
    00000313: 	pxor	%xmm3, %xmm3
    00000317: 	movsd	%xmm3, 0x38(%rsp)
    0000031d: 	jmp	.Ltmp1341 # Offset: 797
.Ltmp1338:
    00000322: 	callq	__stack_chk_fail@PLT # Offset: 802
    00000327: 	endbr64
    0000032b: 	movq	%rax, %rbp
    0000032e: 	movq	0x40(%rsp), %rdi
    00000333: 	movq	0x50(%rsp), %rsi
    00000338: 	subq	%rdi, %rsi
    0000033b: 	testq	%rdi, %rdi
    0000033e: 	je	.Ltmp1342 # Offset: 830
    00000340: 	callq	_ZdlPvm@PLT # Offset: 832
.Ltmp1342:
    00000345: 	movq	%rbp, %rdi
    00000348: 	callq	_Unwind_Resume@PLT # Offset: 840
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_clearall_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_popbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0xfc40
  Size        : 0x368
  MaxSize     : 0x370
  Offset      : 0xfc40
  Section     : .text
  Orc Section : .local.text._Z12test_popbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x30(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1343 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1344 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1361:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rdx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rdx, 0x18(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1345 # Offset: 158
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	movl	%ebx, 0x24(%rsp)
    000000ac: 	pxor	%xmm1, %xmm1
    000000b0: 	movl	$0x0, 0x20(%rsp)
    000000b8: 	movq	%rdx, 0x28(%rsp)
    000000bd: 	movsd	%xmm1, 0x38(%rsp)
.Ltmp1357:
    000000c3: 	movslq	0x20(%rsp), %rdx
    000000c8: 	movslq	%eax, %rcx
    000000cb: 	movq	%rdx, %rsi
    000000ce: 	addq	0x10(%rsp), %rdx
    000000d3: 	subl	%esi, %eax
    000000d5: 	cmpq	%rcx, %rdx
    000000d8: 	cmovbl	0x24(%rsp), %eax
    000000dd: 	movq	0x28(%rsp), %rcx
    000000e2: 	movq	0x18(%rsp), %rdx
    000000e7: 	subl	$0x1, %eax
    000000ea: 	leaq	(%rcx,%rax,8), %rax
    000000ee: 	movq	%rdx, %r13
    000000f1: 	movq	%rdx, %r15
    000000f4: 	movq	%rax, (%rsp)
.Ltmp1348:
    000000f8: 	movl	$0x18, %edi
    000000fd: 	callq	_Znwm@PLT # Offset: 253
    00000102: 	movq	%rax, %xmm0
    00000107: 	movq	$0x0, 0x10(%rax)
    0000010f: 	movq	%rax, %rbx
    00000112: 	punpcklqdq	%xmm0, %xmm0
    00000116: 	movups	%xmm0, (%rax)
    00000119: 	movq	0x8(%rsp), %rax
    0000011e: 	movq	%rax, %rbp
    00000121: 	cmpq	%rax, %r12
    00000124: 	je	.Ltmp1346 # Offset: 292
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1347:
    00000130: 	movl	$0x18, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	%rax, %rdi
    00000146: 	movq	%rbx, %rsi
    00000149: 	movsd	%xmm0, 0x10(%rax)
    0000014e: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 334
    00000153: 	addq	$0x1, 0x10(%rbx)
    00000158: 	cmpq	%rbp, %r12
    0000015b: 	jne	.Ltmp1347 # Offset: 347
.Ltmp1346:
    0000015d: 	movq	%r15, %rax
    00000160: 	movq	%rbx, (%r15)
    00000163: 	addq	$0x8, %rax
    00000167: 	movq	%rax, %r15
    0000016a: 	cmpq	%rax, (%rsp)
    0000016e: 	jne	.Ltmp1348 # Offset: 366
    00000170: 	callq	clock@PLT # Offset: 368
    00000175: 	movq	%rax, start_time(%rip)
    0000017c: 	cmpq	0x8(%rsp), %r12
    00000181: 	je	.Ltmp1349 # Offset: 385
    00000183: 	movq	0x18(%rsp), %rbx
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1351:
    00000190: 	movq	(%rbx), %r15
    00000193: 	movq	0x8(%rsp), %rbp
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1350:
    000001a0: 	subq	$0x1, 0x10(%r15)
    000001a5: 	movq	0x8(%r15), %r14
    000001a9: 	addq	$0x8, %rbp
    000001ad: 	movq	%r14, %rdi
    000001b0: 	callq	_ZNSt8__detail15_List_node_base9_M_unhookEv@PLT # Offset: 432
    000001b5: 	movl	$0x18, %esi
    000001ba: 	movq	%r14, %rdi
    000001bd: 	callq	_ZdlPvm@PLT # Offset: 445
    000001c2: 	cmpq	%rbp, %r12
    000001c5: 	jne	.Ltmp1350 # Offset: 453
    000001c7: 	addq	$0x8, %rbx
    000001cb: 	cmpq	(%rsp), %rbx
    000001cf: 	jne	.Ltmp1351 # Offset: 463
.Ltmp1349:
    000001d1: 	callq	clock@PLT # Offset: 465
    000001d6: 	pxor	%xmm0, %xmm0
    000001da: 	movq	%rax, end_time(%rip)
    000001e1: 	subq	start_time(%rip), %rax
    000001e8: 	cvtsi2sd	%rax, %xmm0
    000001ed: 	divsd	DATAat0x53788(%rip), %xmm0
    000001f5: 	addsd	0x38(%rsp), %xmm0
    000001fb: 	movsd	%xmm0, 0x38(%rsp)
    00000201: 	jmp	.Ltmp1352 # Offset: 513
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1354:
    00000208: 	movq	$0x0, (%r13)
    00000210: 	addq	$0x8, %r13
    00000214: 	cmpq	(%rsp), %r13
    00000218: 	je	.Ltmp1353 # Offset: 536
.Ltmp1352:
    0000021a: 	movq	(%r13), %rbp
    0000021e: 	testq	%rbp, %rbp
    00000221: 	je	.Ltmp1354 # Offset: 545
    00000223: 	movq	(%rbp), %rbx
    00000227: 	cmpq	%rbp, %rbx
    0000022a: 	je	.Ltmp1355 # Offset: 554
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp1356:
    00000230: 	movq	%rbx, %rdi
    00000233: 	movq	(%rbx), %rbx
    00000236: 	movl	$0x18, %esi
    0000023b: 	callq	_ZdlPvm@PLT # Offset: 571
    00000240: 	cmpq	%rbp, %rbx
    00000243: 	jne	.Ltmp1356 # Offset: 579
.Ltmp1355:
    00000245: 	movl	$0x18, %esi
    0000024a: 	movq	%rbp, %rdi
    0000024d: 	callq	_ZdlPvm@PLT # Offset: 589
    00000252: 	jmp	.Ltmp1354 # Offset: 594
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp1353:
    00000258: 	movl	0x10(%rsp), %ecx
    0000025c: 	movl	iterations(%rip), %eax
    00000262: 	addl	%ecx, 0x20(%rsp)
    00000266: 	movl	0x20(%rsp), %ecx
    0000026a: 	cmpl	%ecx, %eax
    0000026c: 	jg	.Ltmp1357 # Offset: 620
.Ltmp1363:
    00000272: 	movq	0x30(%rsp), %rdi
    00000277: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 631
    0000027c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000283: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000028a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000291: 	je	.Ltmp1358 # Offset: 657
.Ltmp1362:
    00000297: 	movq	-0x20(%rax), %rdi
    0000029b: 	movsd	0x38(%rsp), %xmm0
    000002a1: 	callq	_Z13record_resultdPKc # Offset: 673
    000002a6: 	cmpq	$0x0, 0x18(%rsp)
    000002ac: 	je	.Ltmp1359 # Offset: 684
    000002ae: 	movq	0x58(%rsp), %rax
    000002b3: 	subq	%fs:0x28, %rax
    000002bc: 	jne	.Ltmp1360 # Offset: 700
    000002be: 	movq	0x50(%rsp), %rsi
    000002c3: 	movq	0x18(%rsp), %rdi
    000002c8: 	addq	$0x68, %rsp
    000002cc: 	popq	%rbx
    000002cd: 	popq	%rbp
    000002ce: 	subq	%rdi, %rsi
    000002d1: 	popq	%r12
    000002d3: 	popq	%r13
    000002d5: 	popq	%r14
    000002d7: 	popq	%r15
    000002d9: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 729
    000002de: 	nop # Size: 2
.Ltmp1343:
    000002e0: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1344:
    000002e9: 	movq	$0x0, 0x50(%rsp)
    000002f2: 	pxor	%xmm0, %xmm0
    000002f6: 	movaps	%xmm0, 0x40(%rsp)
    000002fb: 	jmp	.Ltmp1361 # Offset: 763
.Ltmp1359:
    00000300: 	movq	0x58(%rsp), %rax
    00000305: 	subq	%fs:0x28, %rax
    0000030e: 	jne	.Ltmp1360 # Offset: 782
    00000310: 	addq	$0x68, %rsp
    00000314: 	popq	%rbx
    00000315: 	popq	%rbp
    00000316: 	popq	%r12
    00000318: 	popq	%r13
    0000031a: 	popq	%r14
    0000031c: 	popq	%r15
    0000031e: 	retq # Offset: 798
.Ltmp1358:
    0000031f: 	movq	-0x8(%rdx), %rax
    00000323: 	addq	$0x200, %rax
    00000329: 	jmp	.Ltmp1362 # Offset: 809
.Ltmp1345:
    0000032e: 	pxor	%xmm3, %xmm3
    00000332: 	movsd	%xmm3, 0x38(%rsp)
    00000338: 	jmp	.Ltmp1363 # Offset: 824
.Ltmp1360:
    0000033d: 	callq	__stack_chk_fail@PLT # Offset: 829
    00000342: 	endbr64
    00000346: 	movq	%rax, %rbp
    00000349: 	movq	0x40(%rsp), %rdi
    0000034e: 	movq	0x50(%rsp), %rsi
    00000353: 	subq	%rdi, %rsi
    00000356: 	testq	%rdi, %rdi
    00000359: 	je	.Ltmp1364 # Offset: 857
    0000035b: 	callq	_ZdlPvm@PLT # Offset: 859
.Ltmp1364:
    00000360: 	movq	%rbp, %rdi
    00000363: 	callq	_Unwind_Resume@PLT # Offset: 867
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_popbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_popfrontIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0xffb0
  Size        : 0x368
  MaxSize     : 0x370
  Offset      : 0xffb0
  Section     : .text
  Orc Section : .local.text._Z13test_popfrontIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x30(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1365 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1366 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1383:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rdx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rdx, 0x18(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1367 # Offset: 158
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	movl	%ebx, 0x24(%rsp)
    000000ac: 	pxor	%xmm1, %xmm1
    000000b0: 	movl	$0x0, 0x20(%rsp)
    000000b8: 	movq	%rdx, 0x28(%rsp)
    000000bd: 	movsd	%xmm1, 0x38(%rsp)
.Ltmp1379:
    000000c3: 	movslq	0x20(%rsp), %rdx
    000000c8: 	movslq	%eax, %rcx
    000000cb: 	movq	%rdx, %rsi
    000000ce: 	addq	0x10(%rsp), %rdx
    000000d3: 	subl	%esi, %eax
    000000d5: 	cmpq	%rcx, %rdx
    000000d8: 	cmovbl	0x24(%rsp), %eax
    000000dd: 	movq	0x28(%rsp), %rcx
    000000e2: 	movq	0x18(%rsp), %rdx
    000000e7: 	subl	$0x1, %eax
    000000ea: 	leaq	(%rcx,%rax,8), %rax
    000000ee: 	movq	%rdx, %r13
    000000f1: 	movq	%rdx, %r15
    000000f4: 	movq	%rax, (%rsp)
.Ltmp1370:
    000000f8: 	movl	$0x18, %edi
    000000fd: 	callq	_Znwm@PLT # Offset: 253
    00000102: 	movq	%rax, %xmm0
    00000107: 	movq	$0x0, 0x10(%rax)
    0000010f: 	movq	%rax, %rbx
    00000112: 	punpcklqdq	%xmm0, %xmm0
    00000116: 	movups	%xmm0, (%rax)
    00000119: 	movq	0x8(%rsp), %rax
    0000011e: 	movq	%rax, %rbp
    00000121: 	cmpq	%rax, %r12
    00000124: 	je	.Ltmp1368 # Offset: 292
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1369:
    00000130: 	movl	$0x18, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	%rax, %rdi
    00000146: 	movq	%rbx, %rsi
    00000149: 	movsd	%xmm0, 0x10(%rax)
    0000014e: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 334
    00000153: 	addq	$0x1, 0x10(%rbx)
    00000158: 	cmpq	%rbp, %r12
    0000015b: 	jne	.Ltmp1369 # Offset: 347
.Ltmp1368:
    0000015d: 	movq	%r15, %rax
    00000160: 	movq	%rbx, (%r15)
    00000163: 	addq	$0x8, %rax
    00000167: 	movq	%rax, %r15
    0000016a: 	cmpq	%rax, (%rsp)
    0000016e: 	jne	.Ltmp1370 # Offset: 366
    00000170: 	callq	clock@PLT # Offset: 368
    00000175: 	movq	%rax, start_time(%rip)
    0000017c: 	cmpq	0x8(%rsp), %r12
    00000181: 	je	.Ltmp1371 # Offset: 385
    00000183: 	movq	0x18(%rsp), %rbx
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1373:
    00000190: 	movq	(%rbx), %r15
    00000193: 	movq	0x8(%rsp), %rbp
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1372:
    000001a0: 	subq	$0x1, 0x10(%r15)
    000001a5: 	movq	(%r15), %r14
    000001a8: 	addq	$0x8, %rbp
    000001ac: 	movq	%r14, %rdi
    000001af: 	callq	_ZNSt8__detail15_List_node_base9_M_unhookEv@PLT # Offset: 431
    000001b4: 	movl	$0x18, %esi
    000001b9: 	movq	%r14, %rdi
    000001bc: 	callq	_ZdlPvm@PLT # Offset: 444
    000001c1: 	cmpq	%rbp, %r12
    000001c4: 	jne	.Ltmp1372 # Offset: 452
    000001c6: 	addq	$0x8, %rbx
    000001ca: 	cmpq	(%rsp), %rbx
    000001ce: 	jne	.Ltmp1373 # Offset: 462
.Ltmp1371:
    000001d0: 	callq	clock@PLT # Offset: 464
    000001d5: 	pxor	%xmm0, %xmm0
    000001d9: 	movq	%rax, end_time(%rip)
    000001e0: 	subq	start_time(%rip), %rax
    000001e7: 	cvtsi2sd	%rax, %xmm0
    000001ec: 	divsd	DATAat0x53788(%rip), %xmm0
    000001f4: 	addsd	0x38(%rsp), %xmm0
    000001fa: 	movsd	%xmm0, 0x38(%rsp)
    00000200: 	jmp	.Ltmp1374 # Offset: 512
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1376:
    00000208: 	movq	$0x0, (%r13)
    00000210: 	addq	$0x8, %r13
    00000214: 	cmpq	(%rsp), %r13
    00000218: 	je	.Ltmp1375 # Offset: 536
.Ltmp1374:
    0000021a: 	movq	(%r13), %rbp
    0000021e: 	testq	%rbp, %rbp
    00000221: 	je	.Ltmp1376 # Offset: 545
    00000223: 	movq	(%rbp), %rbx
    00000227: 	cmpq	%rbp, %rbx
    0000022a: 	je	.Ltmp1377 # Offset: 554
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp1378:
    00000230: 	movq	%rbx, %rdi
    00000233: 	movq	(%rbx), %rbx
    00000236: 	movl	$0x18, %esi
    0000023b: 	callq	_ZdlPvm@PLT # Offset: 571
    00000240: 	cmpq	%rbp, %rbx
    00000243: 	jne	.Ltmp1378 # Offset: 579
.Ltmp1377:
    00000245: 	movl	$0x18, %esi
    0000024a: 	movq	%rbp, %rdi
    0000024d: 	callq	_ZdlPvm@PLT # Offset: 589
    00000252: 	jmp	.Ltmp1376 # Offset: 594
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp1375:
    00000258: 	movl	0x10(%rsp), %ecx
    0000025c: 	movl	iterations(%rip), %eax
    00000262: 	addl	%ecx, 0x20(%rsp)
    00000266: 	movl	0x20(%rsp), %ecx
    0000026a: 	cmpl	%ecx, %eax
    0000026c: 	jg	.Ltmp1379 # Offset: 620
.Ltmp1385:
    00000272: 	movq	0x30(%rsp), %rdi
    00000277: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 631
    0000027c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000283: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000028a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000291: 	je	.Ltmp1380 # Offset: 657
.Ltmp1384:
    00000297: 	movq	-0x20(%rax), %rdi
    0000029b: 	movsd	0x38(%rsp), %xmm0
    000002a1: 	callq	_Z13record_resultdPKc # Offset: 673
    000002a6: 	cmpq	$0x0, 0x18(%rsp)
    000002ac: 	je	.Ltmp1381 # Offset: 684
    000002ae: 	movq	0x58(%rsp), %rax
    000002b3: 	subq	%fs:0x28, %rax
    000002bc: 	jne	.Ltmp1382 # Offset: 700
    000002be: 	movq	0x50(%rsp), %rsi
    000002c3: 	movq	0x18(%rsp), %rdi
    000002c8: 	addq	$0x68, %rsp
    000002cc: 	popq	%rbx
    000002cd: 	popq	%rbp
    000002ce: 	subq	%rdi, %rsi
    000002d1: 	popq	%r12
    000002d3: 	popq	%r13
    000002d5: 	popq	%r14
    000002d7: 	popq	%r15
    000002d9: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 729
    000002de: 	nop # Size: 2
.Ltmp1365:
    000002e0: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1366:
    000002e9: 	movq	$0x0, 0x50(%rsp)
    000002f2: 	pxor	%xmm0, %xmm0
    000002f6: 	movaps	%xmm0, 0x40(%rsp)
    000002fb: 	jmp	.Ltmp1383 # Offset: 763
.Ltmp1381:
    00000300: 	movq	0x58(%rsp), %rax
    00000305: 	subq	%fs:0x28, %rax
    0000030e: 	jne	.Ltmp1382 # Offset: 782
    00000310: 	addq	$0x68, %rsp
    00000314: 	popq	%rbx
    00000315: 	popq	%rbp
    00000316: 	popq	%r12
    00000318: 	popq	%r13
    0000031a: 	popq	%r14
    0000031c: 	popq	%r15
    0000031e: 	retq # Offset: 798
.Ltmp1380:
    0000031f: 	movq	-0x8(%rdx), %rax
    00000323: 	addq	$0x200, %rax
    00000329: 	jmp	.Ltmp1384 # Offset: 809
.Ltmp1367:
    0000032e: 	pxor	%xmm3, %xmm3
    00000332: 	movsd	%xmm3, 0x38(%rsp)
    00000338: 	jmp	.Ltmp1385 # Offset: 824
.Ltmp1382:
    0000033d: 	callq	__stack_chk_fail@PLT # Offset: 829
    00000342: 	endbr64
    00000346: 	movq	%rax, %rbp
    00000349: 	movq	0x40(%rsp), %rdi
    0000034e: 	movq	0x50(%rsp), %rsi
    00000353: 	subq	%rdi, %rsi
    00000356: 	testq	%rdi, %rdi
    00000359: 	je	.Ltmp1386 # Offset: 857
    0000035b: 	callq	_ZdlPvm@PLT # Offset: 859
.Ltmp1386:
    00000360: 	movq	%rbp, %rdi
    00000363: 	callq	_Unwind_Resume@PLT # Offset: 867
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_popfrontIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_eraseall_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x10320
  Size        : 0x368
  MaxSize     : 0x370
  Offset      : 0x10320
  Section     : .text
  Orc Section : .local.text._Z22test_eraseall_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x30(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x8(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1387 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1388 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x8(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1405:
    0000007a: 	movq	0x8(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rdx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rdx, 0x18(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1389 # Offset: 158
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	movl	%ebx, 0x24(%rsp)
    000000ac: 	pxor	%xmm1, %xmm1
    000000b0: 	movl	$0x0, 0x20(%rsp)
    000000b8: 	movq	%rdx, 0x28(%rsp)
    000000bd: 	movsd	%xmm1, 0x38(%rsp)
.Ltmp1401:
    000000c3: 	movslq	0x20(%rsp), %rdx
    000000c8: 	movslq	%eax, %rcx
    000000cb: 	movq	%rdx, %rsi
    000000ce: 	addq	0x8(%rsp), %rdx
    000000d3: 	subl	%esi, %eax
    000000d5: 	cmpq	%rcx, %rdx
    000000d8: 	cmovbl	0x24(%rsp), %eax
    000000dd: 	movq	0x28(%rsp), %rcx
    000000e2: 	movq	0x18(%rsp), %rdx
    000000e7: 	subl	$0x1, %eax
    000000ea: 	leaq	(%rcx,%rax,8), %rax
    000000ee: 	movq	%rdx, %r13
    000000f1: 	movq	%rdx, %r15
    000000f4: 	movq	%rax, (%rsp)
.Ltmp1392:
    000000f8: 	movl	$0x18, %edi
    000000fd: 	callq	_Znwm@PLT # Offset: 253
    00000102: 	movq	%rax, %xmm0
    00000107: 	movq	$0x0, 0x10(%rax)
    0000010f: 	movq	%rax, %rbx
    00000112: 	punpcklqdq	%xmm0, %xmm0
    00000116: 	movups	%xmm0, (%rax)
    00000119: 	movq	0x10(%rsp), %rax
    0000011e: 	movq	%rax, %rbp
    00000121: 	cmpq	%rax, %r12
    00000124: 	je	.Ltmp1390 # Offset: 292
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1391:
    00000130: 	movl	$0x18, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	%rax, %rdi
    00000146: 	movq	%rbx, %rsi
    00000149: 	movsd	%xmm0, 0x10(%rax)
    0000014e: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 334
    00000153: 	addq	$0x1, 0x10(%rbx)
    00000158: 	cmpq	%rbp, %r12
    0000015b: 	jne	.Ltmp1391 # Offset: 347
.Ltmp1390:
    0000015d: 	movq	%r15, %rax
    00000160: 	movq	%rbx, (%r15)
    00000163: 	addq	$0x8, %rax
    00000167: 	movq	%rax, %r15
    0000016a: 	cmpq	(%rsp), %rax
    0000016e: 	jne	.Ltmp1392 # Offset: 366
    00000170: 	callq	clock@PLT # Offset: 368
    00000175: 	movq	0x18(%rsp), %rbx
    0000017a: 	movq	%rax, start_time(%rip)
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp1395:
    00000188: 	movq	(%rbx), %r15
    0000018b: 	movq	(%r15), %rbp
    0000018e: 	cmpq	%rbp, %r15
    00000191: 	je	.Ltmp1393 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1394:
    00000198: 	movq	%rbp, %r14
    0000019b: 	movq	(%rbp), %rbp
    0000019f: 	subq	$0x1, 0x10(%r15)
    000001a4: 	movq	%r14, %rdi
    000001a7: 	callq	_ZNSt8__detail15_List_node_base9_M_unhookEv@PLT # Offset: 423
    000001ac: 	movl	$0x18, %esi
    000001b1: 	movq	%r14, %rdi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, %r15
    000001bc: 	jne	.Ltmp1394 # Offset: 444
.Ltmp1393:
    000001be: 	addq	$0x8, %rbx
    000001c2: 	cmpq	(%rsp), %rbx
    000001c6: 	jne	.Ltmp1395 # Offset: 454
    000001c8: 	callq	clock@PLT # Offset: 456
    000001cd: 	pxor	%xmm0, %xmm0
    000001d1: 	movq	%rax, end_time(%rip)
    000001d8: 	subq	start_time(%rip), %rax
    000001df: 	cvtsi2sd	%rax, %xmm0
    000001e4: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ec: 	addsd	0x38(%rsp), %xmm0
    000001f2: 	movsd	%xmm0, 0x38(%rsp)
    000001f8: 	jmp	.Ltmp1396 # Offset: 504
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1398:
    00000200: 	movq	$0x0, (%r13)
    00000208: 	addq	$0x8, %r13
    0000020c: 	cmpq	%r13, (%rsp)
    00000210: 	je	.Ltmp1397 # Offset: 528
.Ltmp1396:
    00000212: 	movq	(%r13), %rbp
    00000216: 	testq	%rbp, %rbp
    00000219: 	je	.Ltmp1398 # Offset: 537
    0000021b: 	movq	(%rbp), %rbx
    0000021f: 	cmpq	%rbp, %rbx
    00000222: 	je	.Ltmp1399 # Offset: 546
    00000224: 	nopl	(%rax) # Size: 4
.Ltmp1400:
    00000228: 	movq	%rbx, %rdi
    0000022b: 	movq	(%rbx), %rbx
    0000022e: 	movl	$0x18, %esi
    00000233: 	callq	_ZdlPvm@PLT # Offset: 563
    00000238: 	cmpq	%rbp, %rbx
    0000023b: 	jne	.Ltmp1400 # Offset: 571
.Ltmp1399:
    0000023d: 	movl	$0x18, %esi
    00000242: 	movq	%rbp, %rdi
    00000245: 	callq	_ZdlPvm@PLT # Offset: 581
    0000024a: 	jmp	.Ltmp1398 # Offset: 586
    0000024c: 	nopl	(%rax) # Size: 4
.Ltmp1397:
    00000250: 	movl	0x8(%rsp), %ecx
    00000254: 	movl	iterations(%rip), %eax
    0000025a: 	addl	%ecx, 0x20(%rsp)
    0000025e: 	movl	0x20(%rsp), %ecx
    00000262: 	cmpl	%ecx, %eax
    00000264: 	jg	.Ltmp1401 # Offset: 612
.Ltmp1407:
    0000026a: 	movq	0x30(%rsp), %rdi
    0000026f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 623
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000282: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000289: 	je	.Ltmp1402 # Offset: 649
.Ltmp1406:
    0000028f: 	movq	-0x20(%rax), %rdi
    00000293: 	movsd	0x38(%rsp), %xmm0
    00000299: 	callq	_Z13record_resultdPKc # Offset: 665
    0000029e: 	cmpq	$0x0, 0x18(%rsp)
    000002a4: 	je	.Ltmp1403 # Offset: 676
    000002a6: 	movq	0x58(%rsp), %rax
    000002ab: 	subq	%fs:0x28, %rax
    000002b4: 	jne	.Ltmp1404 # Offset: 692
    000002ba: 	movq	0x50(%rsp), %rsi
    000002bf: 	movq	0x18(%rsp), %rdi
    000002c4: 	addq	$0x68, %rsp
    000002c8: 	popq	%rbx
    000002c9: 	popq	%rbp
    000002ca: 	subq	%rdi, %rsi
    000002cd: 	popq	%r12
    000002cf: 	popq	%r13
    000002d1: 	popq	%r14
    000002d3: 	popq	%r15
    000002d5: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 725
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1387:
    000002e0: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp1388:
    000002e9: 	movq	$0x0, 0x50(%rsp)
    000002f2: 	pxor	%xmm0, %xmm0
    000002f6: 	movaps	%xmm0, 0x40(%rsp)
    000002fb: 	jmp	.Ltmp1405 # Offset: 763
.Ltmp1403:
    00000300: 	movq	0x58(%rsp), %rax
    00000305: 	subq	%fs:0x28, %rax
    0000030e: 	jne	.Ltmp1404 # Offset: 782
    00000310: 	addq	$0x68, %rsp
    00000314: 	popq	%rbx
    00000315: 	popq	%rbp
    00000316: 	popq	%r12
    00000318: 	popq	%r13
    0000031a: 	popq	%r14
    0000031c: 	popq	%r15
    0000031e: 	retq # Offset: 798
.Ltmp1402:
    0000031f: 	movq	-0x8(%rdx), %rax
    00000323: 	addq	$0x200, %rax
    00000329: 	jmp	.Ltmp1406 # Offset: 809
.Ltmp1389:
    0000032e: 	pxor	%xmm3, %xmm3
    00000332: 	movsd	%xmm3, 0x38(%rsp)
    00000338: 	jmp	.Ltmp1407 # Offset: 824
.Ltmp1404:
    0000033d: 	callq	__stack_chk_fail@PLT # Offset: 829
    00000342: 	endbr64
    00000346: 	movq	%rax, %rbp
    00000349: 	movq	0x40(%rsp), %rdi
    0000034e: 	movq	0x50(%rsp), %rsi
    00000353: 	subq	%rdi, %rsi
    00000356: 	testq	%rdi, %rdi
    00000359: 	je	.Ltmp1408 # Offset: 857
    0000035b: 	callq	_ZdlPvm@PLT # Offset: 859
.Ltmp1408:
    00000360: 	movq	%rbp, %rdi
    00000363: 	callq	_Unwind_Resume@PLT # Offset: 867
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_eraseall_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_pushbackIdNSt7__cxx114listIdSaIdEEELb1EEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x10690
  Size        : 0x3f8
  MaxSize     : 0x400
  Offset      : 0x10690
  Section     : .text
  Orc Section : .local.text._Z13test_pushbackIdNSt7__cxx114listIdSaIdEEELb1EEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	xorl	%r14d, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x18(%rsp)
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x68(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp1409 # Offset: 68
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1412:
    00000050: 	movl	$0x18, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movl	$0x18, %edi
    0000005f: 	movq	%rax, %xmm0
    00000064: 	movq	$0x0, 0x10(%rax)
    0000006c: 	movq	%rax, %rbp
    0000006f: 	punpcklqdq	%xmm0, %xmm0
    00000073: 	movups	%xmm0, (%rax)
    00000076: 	callq	_Znwm@PLT # Offset: 118
    0000007b: 	movsd	(%r12), %xmm0
    00000081: 	movq	%rbp, %rsi
    00000084: 	movq	%rax, %rdi
    00000087: 	movsd	%xmm0, 0x10(%rax)
    0000008c: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 140
    00000091: 	movq	(%rbp), %rbx
    00000095: 	addq	$0x1, 0x10(%rbp)
    0000009a: 	cmpq	%rbp, %rbx
    0000009d: 	je	.Ltmp1410 # Offset: 157
    0000009f: 	nop # Size: 1
.Ltmp1411:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	(%rbx), %rbx
    000000a6: 	movl	$0x18, %esi
    000000ab: 	callq	_ZdlPvm@PLT # Offset: 171
    000000b0: 	cmpq	%rbp, %rbx
    000000b3: 	jne	.Ltmp1411 # Offset: 179
.Ltmp1410:
    000000b5: 	movl	$0x18, %esi
    000000ba: 	movq	%rbp, %rdi
    000000bd: 	addl	$0x1, %r14d
    000000c1: 	callq	_ZdlPvm@PLT # Offset: 193
    000000c6: 	cmpl	%r14d, iterations(%rip)
    000000cd: 	jg	.Ltmp1412 # Offset: 205
.Ltmp1409:
    000000cf: 	callq	clock@PLT # Offset: 207
    000000d4: 	movq	%r13, %rcx
    000000d7: 	xorl	%edx, %edx
    000000d9: 	movq	%rax, 0x38(%rsp)
    000000de: 	subq	%r12, %rcx
    000000e1: 	movq	%rax, end_time(%rip)
    000000e8: 	movq	start_time(%rip), %rax
    000000ef: 	movq	%rax, 0x40(%rsp)
    000000f4: 	movabsq	$0x500000000, %rax
    000000fe: 	divq	%rcx
    00000101: 	movq	%rax, %r15
    00000104: 	cmpq	$0x3e8, %rax
    0000010a: 	ja	.Ltmp1413 # Offset: 266
    00000110: 	cmpq	$0x3, %rax
    00000114: 	ja	.Ltmp1414 # Offset: 276
    0000011a: 	movq	$0x0, 0x60(%rsp)
    00000123: 	pxor	%xmm0, %xmm0
    00000127: 	movl	$0x4, %r15d
    0000012d: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp1428:
    00000132: 	leaq	0x50(%rsp), %rdi
    00000137: 	movq	%r15, %rsi
    0000013a: 	callq	_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm # Offset: 314
    0000013f: 	movq	0x50(%rsp), %rcx
    00000144: 	movl	iterations(%rip), %eax
    0000014a: 	movq	%rcx, 0x20(%rsp)
    0000014f: 	testl	%eax, %eax
    00000151: 	jle	.Ltmp1415 # Offset: 337
    00000157: 	leaq	0x8(%rcx), %rdx
    0000015b: 	movl	%r15d, 0x2c(%rsp)
    00000160: 	pxor	%xmm2, %xmm2
    00000164: 	movl	$0x0, 0x28(%rsp)
    0000016c: 	movq	%rdx, 0x30(%rsp)
    00000171: 	movsd	%xmm2, 0x48(%rsp)
.Ltmp1424:
    00000177: 	movslq	0x28(%rsp), %rdx
    0000017c: 	movslq	%eax, %rcx
    0000017f: 	movq	%rdx, %rsi
    00000182: 	addq	%r15, %rdx
    00000185: 	subl	%esi, %eax
    00000187: 	cmpq	%rcx, %rdx
    0000018a: 	cmovbl	0x2c(%rsp), %eax
    0000018f: 	movl	%eax, %ebx
    00000191: 	callq	clock@PLT # Offset: 401
    00000196: 	movq	0x30(%rsp), %rdx
    0000019b: 	movq	0x20(%rsp), %rcx
    000001a0: 	movq	%rax, start_time(%rip)
    000001a7: 	leal	-0x1(%rbx), %eax
    000001aa: 	leaq	(%rdx,%rax,8), %rax
    000001ae: 	movq	%rcx, 0x8(%rsp)
    000001b3: 	movq	%rcx, %r14
    000001b6: 	movq	%rax, 0x10(%rsp)
.Ltmp1418:
    000001bb: 	movl	$0x18, %edi
    000001c0: 	callq	_Znwm@PLT # Offset: 448
    000001c5: 	movq	%rax, %xmm0
    000001ca: 	movq	$0x0, 0x10(%rax)
    000001d2: 	movq	%rax, %rbx
    000001d5: 	movq	%r12, %rbp
    000001d8: 	punpcklqdq	%xmm0, %xmm0
    000001dc: 	movups	%xmm0, (%rax)
    000001df: 	cmpq	%r12, %r13
    000001e2: 	je	.Ltmp1416 # Offset: 482
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp1417:
    000001e8: 	movl	$0x18, %edi
    000001ed: 	addq	$0x8, %rbp
    000001f1: 	callq	_Znwm@PLT # Offset: 497
    000001f6: 	movsd	-0x8(%rbp), %xmm0
    000001fb: 	movq	%rax, %rdi
    000001fe: 	movq	%rbx, %rsi
    00000201: 	movsd	%xmm0, 0x10(%rax)
    00000206: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 518
    0000020b: 	addq	$0x1, 0x10(%rbx)
    00000210: 	cmpq	%rbp, %r13
    00000213: 	jne	.Ltmp1417 # Offset: 531
.Ltmp1416:
    00000215: 	movq	0x8(%rsp), %rax
    0000021a: 	movq	%rbx, (%rax)
    0000021d: 	addq	$0x8, %rax
    00000221: 	movq	%rax, 0x8(%rsp)
    00000226: 	cmpq	0x10(%rsp), %rax
    0000022b: 	jne	.Ltmp1418 # Offset: 555
    0000022d: 	callq	clock@PLT # Offset: 557
    00000232: 	pxor	%xmm0, %xmm0
    00000236: 	movq	%r12, 0x8(%rsp)
    0000023b: 	movq	0x10(%rsp), %rbx
    00000240: 	movq	%rax, end_time(%rip)
    00000247: 	subq	start_time(%rip), %rax
    0000024e: 	cvtsi2sd	%rax, %xmm0
    00000253: 	divsd	DATAat0x53788(%rip), %xmm0
    0000025b: 	addsd	0x48(%rsp), %xmm0
    00000261: 	movsd	%xmm0, 0x48(%rsp)
    00000267: 	jmp	.Ltmp1419 # Offset: 615
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp1421:
    00000270: 	movq	$0x0, (%r14)
    00000277: 	addq	$0x8, %r14
    0000027b: 	cmpq	%r14, %rbx
    0000027e: 	je	.Ltmp1420 # Offset: 638
.Ltmp1419:
    00000280: 	movq	(%r14), %rbp
    00000283: 	testq	%rbp, %rbp
    00000286: 	je	.Ltmp1421 # Offset: 646
    00000288: 	movq	(%rbp), %r12
    0000028c: 	cmpq	%rbp, %r12
    0000028f: 	je	.Ltmp1422 # Offset: 655
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp1423:
    00000298: 	movq	%r12, %rdi
    0000029b: 	movq	(%r12), %r12
    0000029f: 	movl	$0x18, %esi
    000002a4: 	callq	_ZdlPvm@PLT # Offset: 676
    000002a9: 	cmpq	%rbp, %r12
    000002ac: 	jne	.Ltmp1423 # Offset: 684
.Ltmp1422:
    000002ae: 	movl	$0x18, %esi
    000002b3: 	movq	%rbp, %rdi
    000002b6: 	addq	$0x8, %r14
    000002ba: 	callq	_ZdlPvm@PLT # Offset: 698
    000002bf: 	movq	$0x0, -0x8(%r14)
    000002c7: 	cmpq	%r14, %rbx
    000002ca: 	jne	.Ltmp1419 # Offset: 714
.Ltmp1420:
    000002cc: 	addl	%r15d, 0x28(%rsp)
    000002d1: 	movl	iterations(%rip), %eax
    000002d7: 	movl	0x28(%rsp), %ecx
    000002db: 	movq	0x8(%rsp), %r12
    000002e0: 	cmpl	%ecx, %eax
    000002e2: 	jg	.Ltmp1424 # Offset: 738
.Ltmp1429:
    000002e8: 	movq	0x18(%rsp), %rdi
    000002ed: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 749
    000002f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002f9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000300: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000307: 	je	.Ltmp1425 # Offset: 775
.Ltmp1430:
    0000030d: 	movsd	0x48(%rsp), %xmm0
    00000313: 	movq	-0x20(%rax), %rdi
    00000317: 	pxor	%xmm1, %xmm1
    0000031b: 	movq	0x38(%rsp), %rax
    00000320: 	subq	0x40(%rsp), %rax
    00000325: 	cvtsi2sd	%rax, %xmm1
    0000032a: 	divsd	DATAat0x53788(%rip), %xmm1
    00000332: 	subsd	%xmm1, %xmm0
    00000336: 	callq	_Z13record_resultdPKc # Offset: 822
    0000033b: 	cmpq	$0x0, 0x20(%rsp)
    00000341: 	je	.Ltmp1426 # Offset: 833
    00000343: 	movq	0x68(%rsp), %rax
    00000348: 	subq	%fs:0x28, %rax
    00000351: 	jne	.Ltmp1427 # Offset: 849
    00000353: 	movq	0x60(%rsp), %rsi
    00000358: 	movq	0x20(%rsp), %rdi
    0000035d: 	addq	$0x78, %rsp
    00000361: 	popq	%rbx
    00000362: 	popq	%rbp
    00000363: 	subq	%rdi, %rsi
    00000366: 	popq	%r12
    00000368: 	popq	%r13
    0000036a: 	popq	%r14
    0000036c: 	popq	%r15
    0000036e: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 878
.Ltmp1413:
    00000373: 	movl	$0x3e8, %r15d
.Ltmp1414:
    00000379: 	movq	$0x0, 0x60(%rsp)
    00000382: 	pxor	%xmm0, %xmm0
    00000386: 	movaps	%xmm0, 0x50(%rsp)
    0000038b: 	jmp	.Ltmp1428 # Offset: 907
.Ltmp1426:
    00000390: 	movq	0x68(%rsp), %rax
    00000395: 	subq	%fs:0x28, %rax
    0000039e: 	jne	.Ltmp1427 # Offset: 926
    000003a0: 	addq	$0x78, %rsp
    000003a4: 	popq	%rbx
    000003a5: 	popq	%rbp
    000003a6: 	popq	%r12
    000003a8: 	popq	%r13
    000003aa: 	popq	%r14
    000003ac: 	popq	%r15
    000003ae: 	retq # Offset: 942
.Ltmp1415:
    000003af: 	pxor	%xmm4, %xmm4
    000003b3: 	movsd	%xmm4, 0x48(%rsp)
    000003b9: 	jmp	.Ltmp1429 # Offset: 953
.Ltmp1425:
    000003be: 	movq	-0x8(%rdx), %rax
    000003c2: 	addq	$0x200, %rax
    000003c8: 	jmp	.Ltmp1430 # Offset: 968
.Ltmp1427:
    000003cd: 	callq	__stack_chk_fail@PLT # Offset: 973
    000003d2: 	endbr64
    000003d6: 	movq	%rax, %rbp
    000003d9: 	movq	0x50(%rsp), %rdi
    000003de: 	movq	0x60(%rsp), %rsi
    000003e3: 	subq	%rdi, %rsi
    000003e6: 	testq	%rdi, %rdi
    000003e9: 	je	.Ltmp1431 # Offset: 1001
    000003eb: 	callq	_ZdlPvm@PLT # Offset: 1003
.Ltmp1431:
    000003f0: 	movq	%rbp, %rdi
    000003f3: 	callq	_Unwind_Resume@PLT # Offset: 1011
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_pushbackIdNSt7__cxx114listIdSaIdEEELb1EEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_pushfrontIdNSt7__cxx114listIdSaIdEEELb1EEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0x10a90
  Size        : 0x406
  MaxSize     : 0x410
  Offset      : 0x10a90
  Section     : .text
  Orc Section : .local.text._Z14test_pushfrontIdNSt7__cxx114listIdSaIdEEELb1EEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rsi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	xorl	%r13d, %r13d
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x18(%rsp)
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x68(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp1432 # Offset: 68
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1435:
    00000050: 	movl	$0x18, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movl	$0x18, %edi
    0000005f: 	movq	%rax, %xmm0
    00000064: 	movq	$0x0, 0x10(%rax)
    0000006c: 	movq	%rax, %rbp
    0000006f: 	punpcklqdq	%xmm0, %xmm0
    00000073: 	movups	%xmm0, (%rax)
    00000076: 	callq	_Znwm@PLT # Offset: 118
    0000007b: 	movsd	(%r12), %xmm0
    00000081: 	movq	%rbp, %rsi
    00000084: 	movq	%rax, %rdi
    00000087: 	movsd	%xmm0, 0x10(%rax)
    0000008c: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 140
    00000091: 	movq	(%rbp), %rbx
    00000095: 	addq	$0x1, 0x10(%rbp)
    0000009a: 	cmpq	%rbp, %rbx
    0000009d: 	je	.Ltmp1433 # Offset: 157
    0000009f: 	nop # Size: 1
.Ltmp1434:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	(%rbx), %rbx
    000000a6: 	movl	$0x18, %esi
    000000ab: 	callq	_ZdlPvm@PLT # Offset: 171
    000000b0: 	cmpq	%rbp, %rbx
    000000b3: 	jne	.Ltmp1434 # Offset: 179
.Ltmp1433:
    000000b5: 	movl	$0x18, %esi
    000000ba: 	movq	%rbp, %rdi
    000000bd: 	addl	$0x1, %r13d
    000000c1: 	callq	_ZdlPvm@PLT # Offset: 193
    000000c6: 	cmpl	%r13d, iterations(%rip)
    000000cd: 	jg	.Ltmp1435 # Offset: 205
.Ltmp1432:
    000000cf: 	callq	clock@PLT # Offset: 207
    000000d4: 	movq	%r14, %rcx
    000000d7: 	xorl	%edx, %edx
    000000d9: 	movq	%rax, 0x38(%rsp)
    000000de: 	subq	%r12, %rcx
    000000e1: 	movq	%rax, end_time(%rip)
    000000e8: 	movq	start_time(%rip), %rax
    000000ef: 	movq	%rax, 0x40(%rsp)
    000000f4: 	movabsq	$0x500000000, %rax
    000000fe: 	divq	%rcx
    00000101: 	movq	%rax, (%rsp)
    00000105: 	cmpq	$0x3e8, %rax
    0000010b: 	ja	.Ltmp1436 # Offset: 267
    00000111: 	cmpq	$0x3, (%rsp)
    00000116: 	ja	.Ltmp1437 # Offset: 278
    0000011c: 	movq	$0x0, 0x60(%rsp)
    00000125: 	pxor	%xmm0, %xmm0
    00000129: 	movq	$0x4, (%rsp)
    00000131: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp1452:
    00000136: 	movq	(%rsp), %rbx
    0000013a: 	leaq	0x50(%rsp), %rdi
    0000013f: 	movq	%rbx, %rsi
    00000142: 	callq	_ZNSt6vectorIPNSt7__cxx114listIdSaIdEEESaIS4_EE17_M_default_appendEm # Offset: 322
    00000147: 	movq	0x50(%rsp), %rdx
    0000014c: 	movl	iterations(%rip), %eax
    00000152: 	movq	%rdx, 0x20(%rsp)
    00000157: 	testl	%eax, %eax
    00000159: 	jle	.Ltmp1438 # Offset: 345
    0000015f: 	leaq	0x8(%rdx), %rcx
    00000163: 	movl	%ebx, 0x2c(%rsp)
    00000167: 	pxor	%xmm2, %xmm2
    0000016b: 	movl	$0x0, 0x28(%rsp)
    00000173: 	movq	%rcx, 0x30(%rsp)
    00000178: 	movsd	%xmm2, 0x48(%rsp)
.Ltmp1448:
    0000017e: 	movslq	0x28(%rsp), %rdx
    00000183: 	movslq	%eax, %rcx
    00000186: 	movq	%rdx, %rsi
    00000189: 	addq	(%rsp), %rdx
    0000018d: 	subl	%esi, %eax
    0000018f: 	cmpq	%rcx, %rdx
    00000192: 	cmovbl	0x2c(%rsp), %eax
    00000197: 	movl	%eax, %ebx
    00000199: 	callq	clock@PLT # Offset: 409
    0000019e: 	movq	0x30(%rsp), %rdx
    000001a3: 	movq	0x20(%rsp), %rcx
    000001a8: 	movq	%rax, start_time(%rip)
    000001af: 	leal	-0x1(%rbx), %eax
    000001b2: 	leaq	(%rdx,%rax,8), %rax
    000001b6: 	movq	%rcx, 0x8(%rsp)
    000001bb: 	movq	%rcx, %r15
    000001be: 	movq	%rax, 0x10(%rsp)
.Ltmp1442:
    000001c3: 	movl	$0x18, %edi
    000001c8: 	callq	_Znwm@PLT # Offset: 456
    000001cd: 	movq	%rax, %xmm0
    000001d2: 	movq	$0x0, 0x10(%rax)
    000001da: 	movq	%rax, %rbx
    000001dd: 	movq	%rax, %r13
    000001e0: 	punpcklqdq	%xmm0, %xmm0
    000001e4: 	movups	%xmm0, (%rax)
    000001e7: 	cmpq	%r12, %r14
    000001ea: 	je	.Ltmp1439 # Offset: 490
    000001ec: 	movq	%r12, %rbp
    000001ef: 	jmp	.Ltmp1440 # Offset: 495
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp1441:
    000001f8: 	movq	(%rbx), %r13
.Ltmp1440:
    000001fb: 	movl	$0x18, %edi
    00000200: 	addq	$0x8, %rbp
    00000204: 	callq	_Znwm@PLT # Offset: 516
    00000209: 	movsd	-0x8(%rbp), %xmm0
    0000020e: 	movq	%rax, %rdi
    00000211: 	movq	%r13, %rsi
    00000214: 	movsd	%xmm0, 0x10(%rax)
    00000219: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 537
    0000021e: 	addq	$0x1, 0x10(%rbx)
    00000223: 	cmpq	%rbp, %r14
    00000226: 	jne	.Ltmp1441 # Offset: 550
.Ltmp1439:
    00000228: 	movq	0x8(%rsp), %rax
    0000022d: 	movq	%rbx, (%rax)
    00000230: 	addq	$0x8, %rax
    00000234: 	movq	%rax, 0x8(%rsp)
    00000239: 	cmpq	0x10(%rsp), %rax
    0000023e: 	jne	.Ltmp1442 # Offset: 574
    00000240: 	callq	clock@PLT # Offset: 576
    00000245: 	pxor	%xmm0, %xmm0
    00000249: 	movq	0x10(%rsp), %r13
    0000024e: 	movq	%rax, end_time(%rip)
    00000255: 	subq	start_time(%rip), %rax
    0000025c: 	cvtsi2sd	%rax, %xmm0
    00000261: 	divsd	DATAat0x53788(%rip), %xmm0
    00000269: 	addsd	0x48(%rsp), %xmm0
    0000026f: 	movsd	%xmm0, 0x48(%rsp)
    00000275: 	jmp	.Ltmp1443 # Offset: 629
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1445:
    00000280: 	movq	$0x0, (%r15)
    00000287: 	addq	$0x8, %r15
    0000028b: 	cmpq	%r15, %r13
    0000028e: 	je	.Ltmp1444 # Offset: 654
.Ltmp1443:
    00000290: 	movq	(%r15), %rbp
    00000293: 	testq	%rbp, %rbp
    00000296: 	je	.Ltmp1445 # Offset: 662
    00000298: 	movq	(%rbp), %rbx
    0000029c: 	cmpq	%rbp, %rbx
    0000029f: 	je	.Ltmp1446 # Offset: 671
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp1447:
    000002a8: 	movq	%rbx, %rdi
    000002ab: 	movq	(%rbx), %rbx
    000002ae: 	movl	$0x18, %esi
    000002b3: 	callq	_ZdlPvm@PLT # Offset: 691
    000002b8: 	cmpq	%rbp, %rbx
    000002bb: 	jne	.Ltmp1447 # Offset: 699
.Ltmp1446:
    000002bd: 	movl	$0x18, %esi
    000002c2: 	movq	%rbp, %rdi
    000002c5: 	addq	$0x8, %r15
    000002c9: 	callq	_ZdlPvm@PLT # Offset: 713
    000002ce: 	movq	$0x0, -0x8(%r15)
    000002d6: 	cmpq	%r15, %r13
    000002d9: 	jne	.Ltmp1443 # Offset: 729
.Ltmp1444:
    000002db: 	movl	(%rsp), %ecx
    000002de: 	movl	iterations(%rip), %eax
    000002e4: 	addl	%ecx, 0x28(%rsp)
    000002e8: 	movl	0x28(%rsp), %ecx
    000002ec: 	cmpl	%ecx, %eax
    000002ee: 	jg	.Ltmp1448 # Offset: 750
.Ltmp1453:
    000002f4: 	movq	0x18(%rsp), %rdi
    000002f9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 761
    000002fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000305: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000030c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000313: 	je	.Ltmp1449 # Offset: 787
.Ltmp1454:
    00000319: 	movsd	0x48(%rsp), %xmm0
    0000031f: 	movq	-0x20(%rax), %rdi
    00000323: 	pxor	%xmm1, %xmm1
    00000327: 	movq	0x38(%rsp), %rax
    0000032c: 	subq	0x40(%rsp), %rax
    00000331: 	cvtsi2sd	%rax, %xmm1
    00000336: 	divsd	DATAat0x53788(%rip), %xmm1
    0000033e: 	subsd	%xmm1, %xmm0
    00000342: 	callq	_Z13record_resultdPKc # Offset: 834
    00000347: 	cmpq	$0x0, 0x20(%rsp)
    0000034d: 	je	.Ltmp1450 # Offset: 845
    0000034f: 	movq	0x68(%rsp), %rax
    00000354: 	subq	%fs:0x28, %rax
    0000035d: 	jne	.Ltmp1451 # Offset: 861
    0000035f: 	movq	0x60(%rsp), %rsi
    00000364: 	movq	0x20(%rsp), %rdi
    00000369: 	addq	$0x78, %rsp
    0000036d: 	popq	%rbx
    0000036e: 	popq	%rbp
    0000036f: 	subq	%rdi, %rsi
    00000372: 	popq	%r12
    00000374: 	popq	%r13
    00000376: 	popq	%r14
    00000378: 	popq	%r15
    0000037a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 890
.Ltmp1436:
    0000037f: 	movq	$0x3e8, (%rsp)
.Ltmp1437:
    00000387: 	movq	$0x0, 0x60(%rsp)
    00000390: 	pxor	%xmm0, %xmm0
    00000394: 	movaps	%xmm0, 0x50(%rsp)
    00000399: 	jmp	.Ltmp1452 # Offset: 921
.Ltmp1450:
    0000039e: 	movq	0x68(%rsp), %rax
    000003a3: 	subq	%fs:0x28, %rax
    000003ac: 	jne	.Ltmp1451 # Offset: 940
    000003ae: 	addq	$0x78, %rsp
    000003b2: 	popq	%rbx
    000003b3: 	popq	%rbp
    000003b4: 	popq	%r12
    000003b6: 	popq	%r13
    000003b8: 	popq	%r14
    000003ba: 	popq	%r15
    000003bc: 	retq # Offset: 956
.Ltmp1438:
    000003bd: 	pxor	%xmm4, %xmm4
    000003c1: 	movsd	%xmm4, 0x48(%rsp)
    000003c7: 	jmp	.Ltmp1453 # Offset: 967
.Ltmp1449:
    000003cc: 	movq	-0x8(%rdx), %rax
    000003d0: 	addq	$0x200, %rax
    000003d6: 	jmp	.Ltmp1454 # Offset: 982
.Ltmp1451:
    000003db: 	callq	__stack_chk_fail@PLT # Offset: 987
    000003e0: 	endbr64
    000003e4: 	movq	%rax, %rbp
    000003e7: 	movq	0x50(%rsp), %rdi
    000003ec: 	movq	0x60(%rsp), %rsi
    000003f1: 	subq	%rdi, %rsi
    000003f4: 	testq	%rdi, %rdi
    000003f7: 	je	.Ltmp1455 # Offset: 1015
    000003f9: 	callq	_ZdlPvm@PLT # Offset: 1017
.Ltmp1455:
    000003fe: 	movq	%rbp, %rdi
    00000401: 	callq	_Unwind_Resume@PLT # Offset: 1025
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_pushfrontIdNSt7__cxx114listIdSaIdEEELb1EEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0x10ea0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x10ea0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1456 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp1457 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp1458 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp1459 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp1460 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp1467:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp1461 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp1461:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp1462 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp1463 # Offset: 200
.Ltmp1465:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1457:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp1464 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp1464:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1456:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1462:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1466:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1465 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1463:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1466 # Offset: 392
.Ltmp1460:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp1468:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp1467 # Offset: 445
.Ltmp1459:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp1468 # Offset: 460
.Ltmp1458:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm"

Binary Function "_Z13test_pushbackId14SingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0x11080
  Size        : 0x3a4
  MaxSize     : 0x3b0
  Offset      : 0x11080
  Section     : .text
  Orc Section : .local.text._Z13test_pushbackId14SingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%rdi, (%rsp)
    00000019: 	movq	%rdx, 0x38(%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x58(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp1469 # Offset: 66
    00000044: 	xorl	%eax, %eax
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1470:
    00000050: 	addl	$0x1, %eax
    00000053: 	cmpl	%eax, iterations(%rip)
    00000059: 	jg	.Ltmp1470 # Offset: 89
.Ltmp1469:
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	movq	%r12, %rcx
    00000067: 	xorl	%edx, %edx
    00000069: 	movq	%rax, end_time(%rip)
    00000070: 	subq	start_time(%rip), %rax
    00000077: 	cvtsi2sd	%rax, %xmm0
    0000007c: 	subq	(%rsp), %rcx
    00000080: 	movabsq	$0x500000000, %rax
    0000008a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000092: 	divq	%rcx
    00000095: 	movsd	%xmm0, 0x30(%rsp)
    0000009b: 	movq	%rax, 0x8(%rsp)
    000000a0: 	cmpq	$0x3e8, %rax
    000000a6: 	ja	.Ltmp1471 # Offset: 166
    000000ac: 	cmpq	$0x3, 0x8(%rsp)
    000000b2: 	ja	.Ltmp1472 # Offset: 178
    000000b8: 	movq	$0x0, 0x50(%rsp)
    000000c1: 	pxor	%xmm0, %xmm0
    000000c5: 	movq	$0x4, 0x8(%rsp)
    000000ce: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1489:
    000000d3: 	movq	0x8(%rsp), %rbx
    000000d8: 	leaq	0x40(%rsp), %rdi
    000000dd: 	movq	%rbx, %rsi
    000000e0: 	callq	_ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 224
    000000e5: 	movq	0x40(%rsp), %rcx
    000000ea: 	movl	iterations(%rip), %eax
    000000f0: 	movq	%rcx, 0x18(%rsp)
    000000f5: 	testl	%eax, %eax
    000000f7: 	jle	.Ltmp1473 # Offset: 247
    000000fd: 	addq	$0x8, %rcx
    00000101: 	movl	%ebx, 0x24(%rsp)
    00000105: 	pxor	%xmm3, %xmm3
    00000109: 	movl	$0x0, 0x20(%rsp)
    00000111: 	movq	%rcx, 0x28(%rsp)
    00000116: 	movsd	%xmm3, 0x10(%rsp)
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1485:
    00000120: 	movslq	0x20(%rsp), %rdx
    00000125: 	movslq	%eax, %rcx
    00000128: 	movq	%rdx, %rsi
    0000012b: 	addq	0x8(%rsp), %rdx
    00000130: 	subl	%esi, %eax
    00000132: 	cmpq	%rcx, %rdx
    00000135: 	cmovbl	0x24(%rsp), %eax
    0000013a: 	movl	%eax, %ebx
    0000013c: 	callq	clock@PLT # Offset: 316
    00000141: 	movq	0x18(%rsp), %r14
    00000146: 	movq	0x28(%rsp), %rcx
    0000014b: 	movq	%rax, start_time(%rip)
    00000152: 	leal	-0x1(%rbx), %eax
    00000155: 	movq	%r14, %r13
    00000158: 	leaq	(%rcx,%rax,8), %r15
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp1478:
    00000160: 	movl	$0x18, %edi
    00000165: 	callq	_Znwm@PLT # Offset: 357
    0000016a: 	pxor	%xmm1, %xmm1
    0000016e: 	movl	$0x0, 0x4(%rax)
    00000175: 	movq	%rax, %rbx
    00000178: 	movups	%xmm1, 0x8(%rax)
    0000017c: 	movq	(%rsp), %rax
    00000180: 	movq	%rax, %rbp
    00000183: 	cmpq	%rax, %r12
    00000186: 	je	.Ltmp1474 # Offset: 390
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1477:
    00000190: 	movl	$0x10, %edi
    00000195: 	addq	$0x8, %rbp
    00000199: 	callq	_Znwm@PLT # Offset: 409
    0000019e: 	movsd	-0x8(%rbp), %xmm0
    000001a3: 	movq	0x10(%rbx), %rdx
    000001a7: 	movq	$0x0, 0x8(%rax)
    000001af: 	movsd	%xmm0, (%rax)
    000001b3: 	testq	%rdx, %rdx
    000001b6: 	je	.Ltmp1475 # Offset: 438
    000001b8: 	movq	%rax, 0x8(%rdx)
.Ltmp1475:
    000001bc: 	cmpq	$0x0, 0x8(%rbx)
    000001c1: 	movq	%rax, 0x10(%rbx)
    000001c5: 	je	.Ltmp1476 # Offset: 453
    000001cb: 	addl	$0x1, 0x4(%rbx)
    000001cf: 	cmpq	%rbp, %r12
    000001d2: 	jne	.Ltmp1477 # Offset: 466
.Ltmp1474:
    000001d4: 	movq	%rbx, (%r14)
    000001d7: 	addq	$0x8, %r14
    000001db: 	cmpq	%r14, %r15
    000001de: 	jne	.Ltmp1478 # Offset: 478
.Ltmp1484:
    000001e0: 	callq	clock@PLT # Offset: 480
    000001e5: 	pxor	%xmm0, %xmm0
    000001e9: 	movq	%rax, end_time(%rip)
    000001f0: 	subq	start_time(%rip), %rax
    000001f7: 	cvtsi2sd	%rax, %xmm0
    000001fc: 	divsd	DATAat0x53788(%rip), %xmm0
    00000204: 	addsd	0x10(%rsp), %xmm0
    0000020a: 	movsd	%xmm0, 0x10(%rsp)
    00000210: 	jmp	.Ltmp1479 # Offset: 528
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1481:
    00000218: 	movq	$0x0, (%r13)
    00000220: 	addq	$0x8, %r13
    00000224: 	cmpq	%r13, %r15
    00000227: 	je	.Ltmp1480 # Offset: 551
.Ltmp1479:
    00000229: 	movq	(%r13), %rbp
    0000022d: 	testq	%rbp, %rbp
    00000230: 	je	.Ltmp1481 # Offset: 560
    00000232: 	movq	0x8(%rbp), %rbx
    00000236: 	testq	%rbx, %rbx
    00000239: 	je	.Ltmp1482 # Offset: 569
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1483:
    00000240: 	movq	%rbx, %rdi
    00000243: 	movq	0x8(%rbx), %rbx
    00000247: 	movl	$0x10, %esi
    0000024c: 	callq	_ZdlPvm@PLT # Offset: 588
    00000251: 	testq	%rbx, %rbx
    00000254: 	jne	.Ltmp1483 # Offset: 596
.Ltmp1482:
    00000256: 	movl	$0x18, %esi
    0000025b: 	movq	%rbp, %rdi
    0000025e: 	callq	_ZdlPvm@PLT # Offset: 606
    00000263: 	jmp	.Ltmp1481 # Offset: 611
    00000265: 	nopl	(%rax) # Size: 3
.Ltmp1476:
    00000268: 	addl	$0x1, 0x4(%rbx)
    0000026c: 	movq	%rax, 0x8(%rbx)
    00000270: 	cmpq	%rbp, %r12
    00000273: 	jne	.Ltmp1477 # Offset: 627
    00000279: 	movq	%rbx, (%r14)
    0000027c: 	addq	$0x8, %r14
    00000280: 	cmpq	%r14, %r15
    00000283: 	jne	.Ltmp1478 # Offset: 643
    00000289: 	jmp	.Ltmp1484 # Offset: 649
    0000028e: 	nop # Size: 2
.Ltmp1480:
    00000290: 	movl	0x8(%rsp), %ecx
    00000294: 	movl	iterations(%rip), %eax
    0000029a: 	addl	%ecx, 0x20(%rsp)
    0000029e: 	movl	0x20(%rsp), %ecx
    000002a2: 	cmpl	%ecx, %eax
    000002a4: 	jg	.Ltmp1485 # Offset: 676
.Ltmp1491:
    000002aa: 	movq	0x38(%rsp), %rdi
    000002af: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 687
    000002b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002bb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002c9: 	je	.Ltmp1486 # Offset: 713
.Ltmp1490:
    000002cf: 	movsd	0x10(%rsp), %xmm0
    000002d5: 	subsd	0x30(%rsp), %xmm0
    000002db: 	movq	-0x20(%rax), %rdi
    000002df: 	callq	_Z13record_resultdPKc # Offset: 735
    000002e4: 	cmpq	$0x0, 0x18(%rsp)
    000002ea: 	je	.Ltmp1487 # Offset: 746
    000002ec: 	movq	0x58(%rsp), %rax
    000002f1: 	subq	%fs:0x28, %rax
    000002fa: 	jne	.Ltmp1488 # Offset: 762
    000002fc: 	movq	0x50(%rsp), %rsi
    00000301: 	movq	0x18(%rsp), %rdi
    00000306: 	addq	$0x68, %rsp
    0000030a: 	popq	%rbx
    0000030b: 	popq	%rbp
    0000030c: 	subq	%rdi, %rsi
    0000030f: 	popq	%r12
    00000311: 	popq	%r13
    00000313: 	popq	%r14
    00000315: 	popq	%r15
    00000317: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 791
.Ltmp1487:
    0000031c: 	movq	0x58(%rsp), %rax
    00000321: 	subq	%fs:0x28, %rax
    0000032a: 	jne	.Ltmp1488 # Offset: 810
    0000032c: 	addq	$0x68, %rsp
    00000330: 	popq	%rbx
    00000331: 	popq	%rbp
    00000332: 	popq	%r12
    00000334: 	popq	%r13
    00000336: 	popq	%r14
    00000338: 	popq	%r15
    0000033a: 	retq # Offset: 826
.Ltmp1471:
    0000033b: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp1472:
    00000344: 	movq	$0x0, 0x50(%rsp)
    0000034d: 	pxor	%xmm0, %xmm0
    00000351: 	movaps	%xmm0, 0x40(%rsp)
    00000356: 	jmp	.Ltmp1489 # Offset: 854
.Ltmp1486:
    0000035b: 	movq	-0x8(%rdx), %rax
    0000035f: 	addq	$0x200, %rax
    00000365: 	jmp	.Ltmp1490 # Offset: 869
.Ltmp1473:
    0000036a: 	pxor	%xmm4, %xmm4
    0000036e: 	movsd	%xmm4, 0x10(%rsp)
    00000374: 	jmp	.Ltmp1491 # Offset: 884
.Ltmp1488:
    00000379: 	callq	__stack_chk_fail@PLT # Offset: 889
    0000037e: 	endbr64
    00000382: 	movq	%rax, %rbp
    00000385: 	movq	0x40(%rsp), %rdi
    0000038a: 	movq	0x50(%rsp), %rsi
    0000038f: 	subq	%rdi, %rsi
    00000392: 	testq	%rdi, %rdi
    00000395: 	je	.Ltmp1492 # Offset: 917
    00000397: 	callq	_ZdlPvm@PLT # Offset: 919
.Ltmp1492:
    0000039c: 	movq	%rbp, %rdi
    0000039f: 	callq	_Unwind_Resume@PLT # Offset: 927
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_pushbackId14SingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_delete_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0x11430
  Size        : 0x34e
  MaxSize     : 0x350
  Offset      : 0x11430
  Section     : .text
  Orc Section : .local.text._Z20test_delete_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x18(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1493 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1494 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x18(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1511:
    0000007a: 	movq	0x18(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1495 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm3, %xmm3
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm3, 0x10(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1507:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x18(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1500:
    00000100: 	movl	$0x18, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	movl	$0x0, 0x4(%rax)
    00000115: 	movq	%rax, %rbx
    00000118: 	movups	%xmm1, 0x8(%rax)
    0000011c: 	movq	0x8(%rsp), %rax
    00000121: 	movq	%rax, %rbp
    00000124: 	cmpq	%rax, %r12
    00000127: 	je	.Ltmp1496 # Offset: 295
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp1499:
    00000130: 	movl	$0x10, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	0x10(%rbx), %rdx
    00000147: 	movq	$0x0, 0x8(%rax)
    0000014f: 	movsd	%xmm0, (%rax)
    00000153: 	testq	%rdx, %rdx
    00000156: 	je	.Ltmp1497 # Offset: 342
    00000158: 	movq	%rax, 0x8(%rdx)
.Ltmp1497:
    0000015c: 	cmpq	$0x0, 0x8(%rbx)
    00000161: 	movq	%rax, 0x10(%rbx)
    00000165: 	je	.Ltmp1498 # Offset: 357
    00000167: 	addl	$0x1, 0x4(%rbx)
    0000016b: 	cmpq	%rbp, %r12
    0000016e: 	jne	.Ltmp1499 # Offset: 366
.Ltmp1496:
    00000170: 	movq	%rbx, (%r14)
    00000173: 	addq	$0x8, %r14
    00000177: 	cmpq	%r14, %r15
    0000017a: 	jne	.Ltmp1500 # Offset: 378
.Ltmp1506:
    0000017c: 	callq	clock@PLT # Offset: 380
    00000181: 	movq	%rax, start_time(%rip)
    00000188: 	jmp	.Ltmp1501 # Offset: 392
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1503:
    00000190: 	movq	$0x0, (%r13)
    00000198: 	addq	$0x8, %r13
    0000019c: 	cmpq	%r13, %r15
    0000019f: 	je	.Ltmp1502 # Offset: 415
.Ltmp1501:
    000001a1: 	movq	(%r13), %rbp
    000001a5: 	testq	%rbp, %rbp
    000001a8: 	je	.Ltmp1503 # Offset: 424
    000001aa: 	movq	0x8(%rbp), %rbx
    000001ae: 	testq	%rbx, %rbx
    000001b1: 	je	.Ltmp1504 # Offset: 433
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1505:
    000001b8: 	movq	%rbx, %rdi
    000001bb: 	movq	0x8(%rbx), %rbx
    000001bf: 	movl	$0x10, %esi
    000001c4: 	callq	_ZdlPvm@PLT # Offset: 452
    000001c9: 	testq	%rbx, %rbx
    000001cc: 	jne	.Ltmp1505 # Offset: 460
.Ltmp1504:
    000001ce: 	movl	$0x18, %esi
    000001d3: 	movq	%rbp, %rdi
    000001d6: 	callq	_ZdlPvm@PLT # Offset: 470
    000001db: 	jmp	.Ltmp1503 # Offset: 475
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp1498:
    000001e0: 	addl	$0x1, 0x4(%rbx)
    000001e4: 	movq	%rax, 0x8(%rbx)
    000001e8: 	cmpq	%rbp, %r12
    000001eb: 	jne	.Ltmp1499 # Offset: 491
    000001f1: 	movq	%rbx, (%r14)
    000001f4: 	addq	$0x8, %r14
    000001f8: 	cmpq	%r14, %r15
    000001fb: 	jne	.Ltmp1500 # Offset: 507
    00000201: 	jmp	.Ltmp1506 # Offset: 513
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1502:
    00000210: 	callq	clock@PLT # Offset: 528
    00000215: 	pxor	%xmm0, %xmm0
    00000219: 	movl	0x18(%rsp), %ecx
    0000021d: 	addl	%ecx, 0x28(%rsp)
    00000221: 	movq	%rax, end_time(%rip)
    00000228: 	subq	start_time(%rip), %rax
    0000022f: 	cvtsi2sd	%rax, %xmm0
    00000234: 	movl	0x28(%rsp), %ecx
    00000238: 	divsd	DATAat0x53788(%rip), %xmm0
    00000240: 	addsd	0x10(%rsp), %xmm0
    00000246: 	movl	iterations(%rip), %eax
    0000024c: 	movsd	%xmm0, 0x10(%rsp)
    00000252: 	cmpl	%ecx, %eax
    00000254: 	jg	.Ltmp1507 # Offset: 596
.Ltmp1513:
    0000025a: 	movq	0x38(%rsp), %rdi
    0000025f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 607
    00000264: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000026b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000272: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000279: 	je	.Ltmp1508 # Offset: 633
.Ltmp1512:
    0000027f: 	movq	-0x20(%rax), %rdi
    00000283: 	movsd	0x10(%rsp), %xmm0
    00000289: 	callq	_Z13record_resultdPKc # Offset: 649
    0000028e: 	cmpq	$0x0, 0x20(%rsp)
    00000294: 	je	.Ltmp1509 # Offset: 660
    00000296: 	movq	0x58(%rsp), %rax
    0000029b: 	subq	%fs:0x28, %rax
    000002a4: 	jne	.Ltmp1510 # Offset: 676
    000002a6: 	movq	0x50(%rsp), %rsi
    000002ab: 	movq	0x20(%rsp), %rdi
    000002b0: 	addq	$0x68, %rsp
    000002b4: 	popq	%rbx
    000002b5: 	popq	%rbp
    000002b6: 	subq	%rdi, %rsi
    000002b9: 	popq	%r12
    000002bb: 	popq	%r13
    000002bd: 	popq	%r14
    000002bf: 	popq	%r15
    000002c1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 705
.Ltmp1509:
    000002c6: 	movq	0x58(%rsp), %rax
    000002cb: 	subq	%fs:0x28, %rax
    000002d4: 	jne	.Ltmp1510 # Offset: 724
    000002d6: 	addq	$0x68, %rsp
    000002da: 	popq	%rbx
    000002db: 	popq	%rbp
    000002dc: 	popq	%r12
    000002de: 	popq	%r13
    000002e0: 	popq	%r14
    000002e2: 	popq	%r15
    000002e4: 	retq # Offset: 740
.Ltmp1493:
    000002e5: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp1494:
    000002ee: 	movq	$0x0, 0x50(%rsp)
    000002f7: 	pxor	%xmm0, %xmm0
    000002fb: 	movaps	%xmm0, 0x40(%rsp)
    00000300: 	jmp	.Ltmp1511 # Offset: 768
.Ltmp1508:
    00000305: 	movq	-0x8(%rdx), %rax
    00000309: 	addq	$0x200, %rax
    0000030f: 	jmp	.Ltmp1512 # Offset: 783
.Ltmp1495:
    00000314: 	pxor	%xmm4, %xmm4
    00000318: 	movsd	%xmm4, 0x10(%rsp)
    0000031e: 	jmp	.Ltmp1513 # Offset: 798
.Ltmp1510:
    00000323: 	callq	__stack_chk_fail@PLT # Offset: 803
    00000328: 	endbr64
    0000032c: 	movq	%rax, %rbp
    0000032f: 	movq	0x40(%rsp), %rdi
    00000334: 	movq	0x50(%rsp), %rsi
    00000339: 	subq	%rdi, %rsi
    0000033c: 	testq	%rdi, %rdi
    0000033f: 	je	.Ltmp1514 # Offset: 831
    00000341: 	callq	_ZdlPvm@PLT # Offset: 833
.Ltmp1514:
    00000346: 	movq	%rbp, %rdi
    00000349: 	callq	_Unwind_Resume@PLT # Offset: 841
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_delete_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_duplicate_coreI14SingleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0x11780
  Size        : 0x32e
  MaxSize     : 0x330
  Offset      : 0x11780
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreI14SingleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	(,%rsi,8), %rcx
    0000000e: 	pushq	%r14
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x68, %rsp
    0000001a: 	movq	%rdx, 0x38(%rsp)
    0000001f: 	xorl	%edx, %edx
    00000021: 	movq	%rdi, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	movabsq	$0x500000000, %rax
    00000040: 	divq	%rcx
    00000043: 	movq	%rax, 0x10(%rsp)
    00000048: 	cmpq	$0x3e8, %rax
    0000004e: 	ja	.Ltmp1515 # Offset: 78
    00000054: 	cmpq	$0x3, %rax
    00000058: 	ja	.Ltmp1516 # Offset: 88
    0000005e: 	movq	$0x0, 0x50(%rsp)
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	movq	$0x4, 0x10(%rsp)
    00000074: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1533:
    00000079: 	movq	0x10(%rsp), %rbx
    0000007e: 	leaq	0x40(%rsp), %rdi
    00000083: 	movq	%rbx, %rsi
    00000086: 	callq	_ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 134
    0000008b: 	movq	0x40(%rsp), %rcx
    00000090: 	movl	iterations(%rip), %eax
    00000096: 	movq	%rcx, 0x20(%rsp)
    0000009b: 	testl	%eax, %eax
    0000009d: 	jle	.Ltmp1517 # Offset: 157
    000000a3: 	addq	$0x8, %rcx
    000000a7: 	movl	%ebx, 0x2c(%rsp)
    000000ab: 	pxor	%xmm3, %xmm3
    000000af: 	movl	$0x0, 0x28(%rsp)
    000000b7: 	movq	%rcx, 0x30(%rsp)
    000000bc: 	movsd	%xmm3, 0x18(%rsp)
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1529:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	%rdx, %rsi
    000000d3: 	addq	0x10(%rsp), %rdx
    000000d8: 	subl	%esi, %eax
    000000da: 	cmpq	%rcx, %rdx
    000000dd: 	cmovbl	0x2c(%rsp), %eax
    000000e2: 	movl	%eax, %ebx
    000000e4: 	callq	clock@PLT # Offset: 228
    000000e9: 	movq	0x20(%rsp), %r14
    000000ee: 	movq	0x30(%rsp), %rcx
    000000f3: 	movq	%rax, start_time(%rip)
    000000fa: 	leal	-0x1(%rbx), %eax
    000000fd: 	movq	%r14, %r13
    00000100: 	leaq	(%rcx,%rax,8), %r15
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp1523:
    00000108: 	movl	$0x18, %edi
    0000010d: 	callq	_Znwm@PLT # Offset: 269
    00000112: 	pxor	%xmm1, %xmm1
    00000116: 	movl	$0x0, 0x4(%rax)
    0000011d: 	movq	%rax, %rbx
    00000120: 	movups	%xmm1, 0x8(%rax)
    00000124: 	movq	0x8(%rsp), %rax
    00000129: 	movq	0x8(%rax), %rbp
    0000012d: 	testq	%rbp, %rbp
    00000130: 	jne	.Ltmp1518 # Offset: 304
    00000132: 	jmp	.Ltmp1519 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp1521:
    00000138: 	addl	$0x1, 0x4(%rbx)
    0000013c: 	testq	%r12, %r12
    0000013f: 	je	.Ltmp1519 # Offset: 319
.Ltmp1522:
    00000141: 	movq	%r12, %rbp
.Ltmp1518:
    00000144: 	movl	$0x10, %edi
    00000149: 	movq	0x8(%rbp), %r12
    0000014d: 	callq	_Znwm@PLT # Offset: 333
    00000152: 	movsd	(%rbp), %xmm0
    00000157: 	movq	0x10(%rbx), %rdx
    0000015b: 	movq	$0x0, 0x8(%rax)
    00000163: 	movsd	%xmm0, (%rax)
    00000167: 	testq	%rdx, %rdx
    0000016a: 	je	.Ltmp1520 # Offset: 362
    0000016c: 	movq	%rax, 0x8(%rdx)
.Ltmp1520:
    00000170: 	cmpq	$0x0, 0x8(%rbx)
    00000175: 	movq	%rax, 0x10(%rbx)
    00000179: 	jne	.Ltmp1521 # Offset: 377
    0000017b: 	addl	$0x1, 0x4(%rbx)
    0000017f: 	movq	%rax, 0x8(%rbx)
    00000183: 	testq	%r12, %r12
    00000186: 	jne	.Ltmp1522 # Offset: 390
.Ltmp1519:
    00000188: 	movq	%rbx, (%r14)
    0000018b: 	addq	$0x8, %r14
    0000018f: 	cmpq	%r14, %r15
    00000192: 	jne	.Ltmp1523 # Offset: 402
    00000198: 	callq	clock@PLT # Offset: 408
    0000019d: 	pxor	%xmm0, %xmm0
    000001a1: 	movq	%rax, end_time(%rip)
    000001a8: 	subq	start_time(%rip), %rax
    000001af: 	cvtsi2sd	%rax, %xmm0
    000001b4: 	divsd	DATAat0x53788(%rip), %xmm0
    000001bc: 	addsd	0x18(%rsp), %xmm0
    000001c2: 	movsd	%xmm0, 0x18(%rsp)
    000001c8: 	jmp	.Ltmp1524 # Offset: 456
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1526:
    000001d0: 	movq	$0x0, (%r13)
    000001d8: 	addq	$0x8, %r13
    000001dc: 	cmpq	%r13, %r15
    000001df: 	je	.Ltmp1525 # Offset: 479
.Ltmp1524:
    000001e1: 	movq	(%r13), %rbp
    000001e5: 	testq	%rbp, %rbp
    000001e8: 	je	.Ltmp1526 # Offset: 488
    000001ea: 	movq	0x8(%rbp), %rbx
    000001ee: 	testq	%rbx, %rbx
    000001f1: 	je	.Ltmp1527 # Offset: 497
    000001f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1528:
    000001f8: 	movq	%rbx, %rdi
    000001fb: 	movq	0x8(%rbx), %rbx
    000001ff: 	movl	$0x10, %esi
    00000204: 	callq	_ZdlPvm@PLT # Offset: 516
    00000209: 	testq	%rbx, %rbx
    0000020c: 	jne	.Ltmp1528 # Offset: 524
.Ltmp1527:
    0000020e: 	movl	$0x18, %esi
    00000213: 	movq	%rbp, %rdi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
    0000021b: 	jmp	.Ltmp1526 # Offset: 539
    0000021d: 	nopl	(%rax) # Size: 3
.Ltmp1525:
    00000220: 	movl	0x10(%rsp), %ecx
    00000224: 	movl	iterations(%rip), %eax
    0000022a: 	addl	%ecx, 0x28(%rsp)
    0000022e: 	movl	0x28(%rsp), %ecx
    00000232: 	cmpl	%ecx, %eax
    00000234: 	jg	.Ltmp1529 # Offset: 564
.Ltmp1535:
    0000023a: 	movq	0x38(%rsp), %rdi
    0000023f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 575
    00000244: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000024b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000252: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000259: 	je	.Ltmp1530 # Offset: 601
.Ltmp1534:
    0000025f: 	movq	-0x20(%rax), %rdi
    00000263: 	movsd	0x18(%rsp), %xmm0
    00000269: 	callq	_Z13record_resultdPKc # Offset: 617
    0000026e: 	cmpq	$0x0, 0x20(%rsp)
    00000274: 	je	.Ltmp1531 # Offset: 628
    00000276: 	movq	0x58(%rsp), %rax
    0000027b: 	subq	%fs:0x28, %rax
    00000284: 	jne	.Ltmp1532 # Offset: 644
    00000286: 	movq	0x50(%rsp), %rsi
    0000028b: 	movq	0x20(%rsp), %rdi
    00000290: 	addq	$0x68, %rsp
    00000294: 	popq	%rbx
    00000295: 	popq	%rbp
    00000296: 	subq	%rdi, %rsi
    00000299: 	popq	%r12
    0000029b: 	popq	%r13
    0000029d: 	popq	%r14
    0000029f: 	popq	%r15
    000002a1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 673
.Ltmp1531:
    000002a6: 	movq	0x58(%rsp), %rax
    000002ab: 	subq	%fs:0x28, %rax
    000002b4: 	jne	.Ltmp1532 # Offset: 692
    000002b6: 	addq	$0x68, %rsp
    000002ba: 	popq	%rbx
    000002bb: 	popq	%rbp
    000002bc: 	popq	%r12
    000002be: 	popq	%r13
    000002c0: 	popq	%r14
    000002c2: 	popq	%r15
    000002c4: 	retq # Offset: 708
.Ltmp1515:
    000002c5: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1516:
    000002ce: 	movq	$0x0, 0x50(%rsp)
    000002d7: 	pxor	%xmm0, %xmm0
    000002db: 	movaps	%xmm0, 0x40(%rsp)
    000002e0: 	jmp	.Ltmp1533 # Offset: 736
.Ltmp1530:
    000002e5: 	movq	-0x8(%rdx), %rax
    000002e9: 	addq	$0x200, %rax
    000002ef: 	jmp	.Ltmp1534 # Offset: 751
.Ltmp1517:
    000002f4: 	pxor	%xmm4, %xmm4
    000002f8: 	movsd	%xmm4, 0x18(%rsp)
    000002fe: 	jmp	.Ltmp1535 # Offset: 766
.Ltmp1532:
    00000303: 	callq	__stack_chk_fail@PLT # Offset: 771
    00000308: 	endbr64
    0000030c: 	movq	%rax, %rbp
    0000030f: 	movq	0x40(%rsp), %rdi
    00000314: 	movq	0x50(%rsp), %rsi
    00000319: 	subq	%rdi, %rsi
    0000031c: 	testq	%rdi, %rdi
    0000031f: 	je	.Ltmp1536 # Offset: 799
    00000321: 	callq	_ZdlPvm@PLT # Offset: 801
.Ltmp1536:
    00000326: 	movq	%rbp, %rdi
    00000329: 	callq	_Unwind_Resume@PLT # Offset: 809
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreI14SingleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_clearall_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0x11ab0
  Size        : 0x39e
  MaxSize     : 0x3a0
  Offset      : 0x11ab0
  Section     : .text
  Orc Section : .local.text._Z22test_clearall_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1537 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1538 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1558:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x18(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1539 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm4, %xmm4
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm4, 0x20(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1554:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x18(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1544:
    00000100: 	movl	$0x18, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	movl	$0x0, 0x4(%rax)
    00000115: 	movq	%rax, %rbx
    00000118: 	movups	%xmm1, 0x8(%rax)
    0000011c: 	movq	0x8(%rsp), %rax
    00000121: 	movq	%rax, %rbp
    00000124: 	cmpq	%rax, %r12
    00000127: 	je	.Ltmp1540 # Offset: 295
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp1543:
    00000130: 	movl	$0x10, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	0x10(%rbx), %rdx
    00000147: 	movq	$0x0, 0x8(%rax)
    0000014f: 	movsd	%xmm0, (%rax)
    00000153: 	testq	%rdx, %rdx
    00000156: 	je	.Ltmp1541 # Offset: 342
    00000158: 	movq	%rax, 0x8(%rdx)
.Ltmp1541:
    0000015c: 	cmpq	$0x0, 0x8(%rbx)
    00000161: 	movq	%rax, 0x10(%rbx)
    00000165: 	je	.Ltmp1542 # Offset: 357
    0000016b: 	addl	$0x1, 0x4(%rbx)
    0000016f: 	cmpq	%rbp, %r12
    00000172: 	jne	.Ltmp1543 # Offset: 370
.Ltmp1540:
    00000174: 	movq	%rbx, (%r14)
    00000177: 	addq	$0x8, %r14
    0000017b: 	cmpq	%r15, %r14
    0000017e: 	jne	.Ltmp1544 # Offset: 382
.Ltmp1553:
    00000180: 	callq	clock@PLT # Offset: 384
    00000185: 	movq	0x18(%rsp), %rbx
    0000018a: 	movq	%rax, start_time(%rip)
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp1547:
    00000198: 	movq	(%rbx), %rbp
    0000019b: 	movq	0x8(%rbp), %r14
    0000019f: 	testq	%r14, %r14
    000001a2: 	je	.Ltmp1545 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp1546:
    000001a8: 	movq	%r14, %rdi
    000001ab: 	movq	0x8(%r14), %r14
    000001af: 	movl	$0x10, %esi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	testq	%r14, %r14
    000001bc: 	jne	.Ltmp1546 # Offset: 444
.Ltmp1545:
    000001be: 	pxor	%xmm2, %xmm2
    000001c2: 	addq	$0x8, %rbx
    000001c6: 	movl	$0x0, 0x4(%rbp)
    000001cd: 	movups	%xmm2, 0x8(%rbp)
    000001d1: 	cmpq	%r15, %rbx
    000001d4: 	jne	.Ltmp1547 # Offset: 468
    000001d6: 	callq	clock@PLT # Offset: 470
    000001db: 	pxor	%xmm0, %xmm0
    000001df: 	movq	%rax, end_time(%rip)
    000001e6: 	subq	start_time(%rip), %rax
    000001ed: 	cvtsi2sd	%rax, %xmm0
    000001f2: 	divsd	DATAat0x53788(%rip), %xmm0
    000001fa: 	addsd	0x20(%rsp), %xmm0
    00000200: 	movsd	%xmm0, 0x20(%rsp)
    00000206: 	jmp	.Ltmp1548 # Offset: 518
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1550:
    00000210: 	movq	$0x0, (%r13)
    00000218: 	addq	$0x8, %r13
    0000021c: 	cmpq	%r15, %r13
    0000021f: 	je	.Ltmp1549 # Offset: 543
.Ltmp1548:
    00000221: 	movq	(%r13), %rbp
    00000225: 	testq	%rbp, %rbp
    00000228: 	je	.Ltmp1550 # Offset: 552
    0000022a: 	movq	0x8(%rbp), %rbx
    0000022e: 	testq	%rbx, %rbx
    00000231: 	je	.Ltmp1551 # Offset: 561
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1552:
    00000238: 	movq	%rbx, %rdi
    0000023b: 	movq	0x8(%rbx), %rbx
    0000023f: 	movl	$0x10, %esi
    00000244: 	callq	_ZdlPvm@PLT # Offset: 580
    00000249: 	testq	%rbx, %rbx
    0000024c: 	jne	.Ltmp1552 # Offset: 588
.Ltmp1551:
    0000024e: 	movl	$0x18, %esi
    00000253: 	movq	%rbp, %rdi
    00000256: 	callq	_ZdlPvm@PLT # Offset: 598
    0000025b: 	jmp	.Ltmp1550 # Offset: 603
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp1542:
    00000260: 	addl	$0x1, 0x4(%rbx)
    00000264: 	movq	%rax, 0x8(%rbx)
    00000268: 	cmpq	%rbp, %r12
    0000026b: 	jne	.Ltmp1543 # Offset: 619
    00000271: 	movq	%rbx, (%r14)
    00000274: 	addq	$0x8, %r14
    00000278: 	cmpq	%r15, %r14
    0000027b: 	jne	.Ltmp1544 # Offset: 635
    00000281: 	jmp	.Ltmp1553 # Offset: 641
    00000286: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1549:
    00000290: 	movl	0x10(%rsp), %ecx
    00000294: 	movl	iterations(%rip), %eax
    0000029a: 	addl	%ecx, 0x28(%rsp)
    0000029e: 	movl	0x28(%rsp), %ecx
    000002a2: 	cmpl	%ecx, %eax
    000002a4: 	jg	.Ltmp1554 # Offset: 676
.Ltmp1560:
    000002aa: 	movq	0x38(%rsp), %rdi
    000002af: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 687
    000002b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002bb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002c9: 	je	.Ltmp1555 # Offset: 713
.Ltmp1559:
    000002cf: 	movq	-0x20(%rax), %rdi
    000002d3: 	movsd	0x20(%rsp), %xmm0
    000002d9: 	callq	_Z13record_resultdPKc # Offset: 729
    000002de: 	cmpq	$0x0, 0x18(%rsp)
    000002e4: 	je	.Ltmp1556 # Offset: 740
    000002e6: 	movq	0x58(%rsp), %rax
    000002eb: 	subq	%fs:0x28, %rax
    000002f4: 	jne	.Ltmp1557 # Offset: 756
    000002f6: 	movq	0x50(%rsp), %rsi
    000002fb: 	movq	0x18(%rsp), %rdi
    00000300: 	addq	$0x68, %rsp
    00000304: 	popq	%rbx
    00000305: 	popq	%rbp
    00000306: 	subq	%rdi, %rsi
    00000309: 	popq	%r12
    0000030b: 	popq	%r13
    0000030d: 	popq	%r14
    0000030f: 	popq	%r15
    00000311: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 785
.Ltmp1556:
    00000316: 	movq	0x58(%rsp), %rax
    0000031b: 	subq	%fs:0x28, %rax
    00000324: 	jne	.Ltmp1557 # Offset: 804
    00000326: 	addq	$0x68, %rsp
    0000032a: 	popq	%rbx
    0000032b: 	popq	%rbp
    0000032c: 	popq	%r12
    0000032e: 	popq	%r13
    00000330: 	popq	%r14
    00000332: 	popq	%r15
    00000334: 	retq # Offset: 820
.Ltmp1537:
    00000335: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1538:
    0000033e: 	movq	$0x0, 0x50(%rsp)
    00000347: 	pxor	%xmm0, %xmm0
    0000034b: 	movaps	%xmm0, 0x40(%rsp)
    00000350: 	jmp	.Ltmp1558 # Offset: 848
.Ltmp1555:
    00000355: 	movq	-0x8(%rdx), %rax
    00000359: 	addq	$0x200, %rax
    0000035f: 	jmp	.Ltmp1559 # Offset: 863
.Ltmp1539:
    00000364: 	pxor	%xmm5, %xmm5
    00000368: 	movsd	%xmm5, 0x20(%rsp)
    0000036e: 	jmp	.Ltmp1560 # Offset: 878
.Ltmp1557:
    00000373: 	callq	__stack_chk_fail@PLT # Offset: 883
    00000378: 	endbr64
    0000037c: 	movq	%rax, %rbp
    0000037f: 	movq	0x40(%rsp), %rdi
    00000384: 	movq	0x50(%rsp), %rsi
    00000389: 	subq	%rdi, %rsi
    0000038c: 	testq	%rdi, %rdi
    0000038f: 	je	.Ltmp1561 # Offset: 911
    00000391: 	callq	_ZdlPvm@PLT # Offset: 913
.Ltmp1561:
    00000396: 	movq	%rbp, %rdi
    00000399: 	callq	_Unwind_Resume@PLT # Offset: 921
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_clearall_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_popfrontId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0x11e50
  Size        : 0x3c6
  MaxSize     : 0x3d0
  Offset      : 0x11e50
  Section     : .text
  Orc Section : .local.text._Z13test_popfrontId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, (%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	movabsq	$0x500000000, %rax
    00000040: 	divq	%rcx
    00000043: 	movq	%rax, 0x8(%rsp)
    00000048: 	cmpq	$0x3e8, %rax
    0000004e: 	ja	.Ltmp1562 # Offset: 78
    00000054: 	cmpq	$0x3, %rax
    00000058: 	ja	.Ltmp1563 # Offset: 88
    0000005e: 	movq	$0x0, 0x50(%rsp)
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	movq	$0x4, 0x8(%rsp)
    00000074: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1586:
    00000079: 	movq	0x8(%rsp), %rbx
    0000007e: 	leaq	0x40(%rsp), %rdi
    00000083: 	movq	%rbx, %rsi
    00000086: 	callq	_ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 134
    0000008b: 	movq	0x40(%rsp), %rcx
    00000090: 	movl	iterations(%rip), %eax
    00000096: 	movq	%rcx, 0x18(%rsp)
    0000009b: 	testl	%eax, %eax
    0000009d: 	jle	.Ltmp1564 # Offset: 157
    000000a3: 	addq	$0x8, %rcx
    000000a7: 	movl	%ebx, 0x2c(%rsp)
    000000ab: 	pxor	%xmm3, %xmm3
    000000af: 	movl	$0x0, 0x28(%rsp)
    000000b7: 	movq	%rcx, 0x30(%rsp)
    000000bc: 	movsd	%xmm3, 0x10(%rsp)
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1582:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x18(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x8(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1569:
    00000100: 	movl	$0x18, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	movl	$0x0, 0x4(%rax)
    00000115: 	movq	%rax, %rbx
    00000118: 	movups	%xmm1, 0x8(%rax)
    0000011c: 	movq	(%rsp), %rax
    00000120: 	movq	%rax, %rbp
    00000123: 	cmpq	%rax, %r12
    00000126: 	je	.Ltmp1565 # Offset: 294
    00000128: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1568:
    00000130: 	movl	$0x10, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	0x10(%rbx), %rdx
    00000147: 	movq	$0x0, 0x8(%rax)
    0000014f: 	movsd	%xmm0, (%rax)
    00000153: 	testq	%rdx, %rdx
    00000156: 	je	.Ltmp1566 # Offset: 342
    00000158: 	movq	%rax, 0x8(%rdx)
.Ltmp1566:
    0000015c: 	cmpq	$0x0, 0x8(%rbx)
    00000161: 	movq	%rax, 0x10(%rbx)
    00000165: 	je	.Ltmp1567 # Offset: 357
    0000016b: 	addl	$0x1, 0x4(%rbx)
    0000016f: 	cmpq	%rbp, %r12
    00000172: 	jne	.Ltmp1568 # Offset: 370
.Ltmp1565:
    00000174: 	movq	%rbx, (%r14)
    00000177: 	addq	$0x8, %r14
    0000017b: 	cmpq	%r15, %r14
    0000017e: 	jne	.Ltmp1569 # Offset: 382
.Ltmp1575:
    00000180: 	callq	clock@PLT # Offset: 384
    00000185: 	movq	(%rsp), %r14
    00000189: 	movq	%rax, start_time(%rip)
    00000190: 	cmpq	%r14, %r12
    00000193: 	je	.Ltmp1570 # Offset: 403
    00000199: 	movq	%r13, 0x20(%rsp)
    0000019e: 	movq	0x18(%rsp), %rbx
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1576:
    000001a8: 	movq	(%rbx), %rbp
    000001ab: 	movq	%r14, %r13
    000001ae: 	jmp	.Ltmp1571 # Offset: 430
.Ltmp1574:
    000001b0: 	movq	%rdx, 0x8(%rbp)
    000001b4: 	movl	$0x10, %esi
    000001b9: 	callq	_ZdlPvm@PLT # Offset: 441
.Ltmp1573:
    000001be: 	addq	$0x8, %r13
    000001c2: 	subl	$0x1, 0x4(%rbp)
    000001c6: 	cmpq	%r13, %r12
    000001c9: 	je	.Ltmp1572 # Offset: 457
.Ltmp1571:
    000001cb: 	movq	0x8(%rbp), %rdi
    000001cf: 	movq	0x10(%rbp), %rax
    000001d3: 	testq	%rdi, %rdi
    000001d6: 	je	.Ltmp1573 # Offset: 470
    000001d8: 	movq	0x8(%rdi), %rdx
    000001dc: 	cmpq	%rdi, %rax
    000001df: 	jne	.Ltmp1574 # Offset: 479
    000001e1: 	movq	$0x0, 0x10(%rbp)
    000001e9: 	jmp	.Ltmp1574 # Offset: 489
    000001eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1567:
    000001f0: 	addl	$0x1, 0x4(%rbx)
    000001f4: 	movq	%rax, 0x8(%rbx)
    000001f8: 	cmpq	%rbp, %r12
    000001fb: 	jne	.Ltmp1568 # Offset: 507
    00000201: 	movq	%rbx, (%r14)
    00000204: 	addq	$0x8, %r14
    00000208: 	cmpq	%r15, %r14
    0000020b: 	jne	.Ltmp1569 # Offset: 523
    00000211: 	jmp	.Ltmp1575 # Offset: 529
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1572:
    00000220: 	addq	$0x8, %rbx
    00000224: 	cmpq	%r15, %rbx
    00000227: 	jne	.Ltmp1576 # Offset: 551
    0000022d: 	movq	0x20(%rsp), %r13
.Ltmp1570:
    00000232: 	callq	clock@PLT # Offset: 562
    00000237: 	pxor	%xmm0, %xmm0
    0000023b: 	movq	%rax, end_time(%rip)
    00000242: 	subq	start_time(%rip), %rax
    00000249: 	cvtsi2sd	%rax, %xmm0
    0000024e: 	divsd	DATAat0x53788(%rip), %xmm0
    00000256: 	addsd	0x10(%rsp), %xmm0
    0000025c: 	movsd	%xmm0, 0x10(%rsp)
    00000262: 	jmp	.Ltmp1577 # Offset: 610
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp1579:
    00000268: 	movq	$0x0, (%r13)
    00000270: 	addq	$0x8, %r13
    00000274: 	cmpq	%r15, %r13
    00000277: 	je	.Ltmp1578 # Offset: 631
.Ltmp1577:
    00000279: 	movq	(%r13), %rbp
    0000027d: 	testq	%rbp, %rbp
    00000280: 	je	.Ltmp1579 # Offset: 640
    00000282: 	movq	0x8(%rbp), %rbx
    00000286: 	testq	%rbx, %rbx
    00000289: 	je	.Ltmp1580 # Offset: 649
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1581:
    00000290: 	movq	%rbx, %rdi
    00000293: 	movq	0x8(%rbx), %rbx
    00000297: 	movl	$0x10, %esi
    0000029c: 	callq	_ZdlPvm@PLT # Offset: 668
    000002a1: 	testq	%rbx, %rbx
    000002a4: 	jne	.Ltmp1581 # Offset: 676
.Ltmp1580:
    000002a6: 	movl	$0x18, %esi
    000002ab: 	movq	%rbp, %rdi
    000002ae: 	callq	_ZdlPvm@PLT # Offset: 686
    000002b3: 	jmp	.Ltmp1579 # Offset: 691
    000002b5: 	nopl	(%rax) # Size: 3
.Ltmp1578:
    000002b8: 	movl	0x8(%rsp), %ecx
    000002bc: 	movl	iterations(%rip), %eax
    000002c2: 	addl	%ecx, 0x28(%rsp)
    000002c6: 	movl	0x28(%rsp), %ecx
    000002ca: 	cmpl	%ecx, %eax
    000002cc: 	jg	.Ltmp1582 # Offset: 716
.Ltmp1588:
    000002d2: 	movq	0x38(%rsp), %rdi
    000002d7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 727
    000002dc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002ea: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002f1: 	je	.Ltmp1583 # Offset: 753
.Ltmp1587:
    000002f7: 	movq	-0x20(%rax), %rdi
    000002fb: 	movsd	0x10(%rsp), %xmm0
    00000301: 	callq	_Z13record_resultdPKc # Offset: 769
    00000306: 	cmpq	$0x0, 0x18(%rsp)
    0000030c: 	je	.Ltmp1584 # Offset: 780
    0000030e: 	movq	0x58(%rsp), %rax
    00000313: 	subq	%fs:0x28, %rax
    0000031c: 	jne	.Ltmp1585 # Offset: 796
    0000031e: 	movq	0x50(%rsp), %rsi
    00000323: 	movq	0x18(%rsp), %rdi
    00000328: 	addq	$0x68, %rsp
    0000032c: 	popq	%rbx
    0000032d: 	popq	%rbp
    0000032e: 	subq	%rdi, %rsi
    00000331: 	popq	%r12
    00000333: 	popq	%r13
    00000335: 	popq	%r14
    00000337: 	popq	%r15
    00000339: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 825
.Ltmp1584:
    0000033e: 	movq	0x58(%rsp), %rax
    00000343: 	subq	%fs:0x28, %rax
    0000034c: 	jne	.Ltmp1585 # Offset: 844
    0000034e: 	addq	$0x68, %rsp
    00000352: 	popq	%rbx
    00000353: 	popq	%rbp
    00000354: 	popq	%r12
    00000356: 	popq	%r13
    00000358: 	popq	%r14
    0000035a: 	popq	%r15
    0000035c: 	retq # Offset: 860
.Ltmp1562:
    0000035d: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp1563:
    00000366: 	movq	$0x0, 0x50(%rsp)
    0000036f: 	pxor	%xmm0, %xmm0
    00000373: 	movaps	%xmm0, 0x40(%rsp)
    00000378: 	jmp	.Ltmp1586 # Offset: 888
.Ltmp1583:
    0000037d: 	movq	-0x8(%rdx), %rax
    00000381: 	addq	$0x200, %rax
    00000387: 	jmp	.Ltmp1587 # Offset: 903
.Ltmp1564:
    0000038c: 	pxor	%xmm4, %xmm4
    00000390: 	movsd	%xmm4, 0x10(%rsp)
    00000396: 	jmp	.Ltmp1588 # Offset: 918
.Ltmp1585:
    0000039b: 	callq	__stack_chk_fail@PLT # Offset: 923
    000003a0: 	endbr64
    000003a4: 	movq	%rax, %rbp
    000003a7: 	movq	0x40(%rsp), %rdi
    000003ac: 	movq	0x50(%rsp), %rsi
    000003b1: 	subq	%rdi, %rsi
    000003b4: 	testq	%rdi, %rdi
    000003b7: 	je	.Ltmp1589 # Offset: 951
    000003b9: 	callq	_ZdlPvm@PLT # Offset: 953
.Ltmp1589:
    000003be: 	movq	%rbp, %rdi
    000003c1: 	callq	_Unwind_Resume@PLT # Offset: 961
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_popfrontId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_eraseall_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0x12220
  Size        : 0x3ae
  MaxSize     : 0x3b0
  Offset      : 0x12220
  Section     : .text
  Orc Section : .local.text._Z22test_eraseall_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1590 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1591 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1612:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x18(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1592 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm3, %xmm3
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm3, 0x20(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1608:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x18(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1597:
    00000100: 	movl	$0x18, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	movl	$0x0, 0x4(%rax)
    00000115: 	movq	%rax, %rbx
    00000118: 	movups	%xmm1, 0x8(%rax)
    0000011c: 	movq	0x8(%rsp), %rax
    00000121: 	movq	%rax, %rbp
    00000124: 	cmpq	%rax, %r12
    00000127: 	je	.Ltmp1593 # Offset: 295
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp1596:
    00000130: 	movl	$0x10, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	0x10(%rbx), %rdx
    00000147: 	movq	$0x0, 0x8(%rax)
    0000014f: 	movsd	%xmm0, (%rax)
    00000153: 	testq	%rdx, %rdx
    00000156: 	je	.Ltmp1594 # Offset: 342
    00000158: 	movq	%rax, 0x8(%rdx)
.Ltmp1594:
    0000015c: 	cmpq	$0x0, 0x8(%rbx)
    00000161: 	movq	%rax, 0x10(%rbx)
    00000165: 	je	.Ltmp1595 # Offset: 357
    0000016b: 	addl	$0x1, 0x4(%rbx)
    0000016f: 	cmpq	%rbp, %r12
    00000172: 	jne	.Ltmp1596 # Offset: 370
.Ltmp1593:
    00000174: 	movq	%rbx, (%r14)
    00000177: 	addq	$0x8, %r14
    0000017b: 	cmpq	%r14, %r15
    0000017e: 	jne	.Ltmp1597 # Offset: 382
.Ltmp1607:
    00000180: 	callq	clock@PLT # Offset: 384
    00000185: 	movq	0x18(%rsp), %rbx
    0000018a: 	movq	%rax, start_time(%rip)
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp1601:
    00000198: 	movq	(%rbx), %r14
    0000019b: 	movq	0x8(%r14), %rbp
    0000019f: 	movq	$0x0, 0x8(%r14)
    000001a7: 	cmpq	0x10(%r14), %rbp
    000001ab: 	jne	.Ltmp1598 # Offset: 427
    000001ad: 	jmp	.Ltmp1599 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1600:
    000001b8: 	movq	%rbp, %rdi
    000001bb: 	movl	$0x10, %esi
    000001c0: 	movq	0x8(%rbp), %rbp
    000001c4: 	callq	_ZdlPvm@PLT # Offset: 452
    000001c9: 	subl	$0x1, 0x4(%r14)
.Ltmp1598:
    000001ce: 	testq	%rbp, %rbp
    000001d1: 	jne	.Ltmp1600 # Offset: 465
    000001d3: 	addq	$0x8, %rbx
    000001d7: 	cmpq	%r15, %rbx
    000001da: 	jne	.Ltmp1601 # Offset: 474
    000001dc: 	callq	clock@PLT # Offset: 476
    000001e1: 	pxor	%xmm0, %xmm0
    000001e5: 	movq	%rax, end_time(%rip)
    000001ec: 	subq	start_time(%rip), %rax
    000001f3: 	cvtsi2sd	%rax, %xmm0
    000001f8: 	divsd	DATAat0x53788(%rip), %xmm0
    00000200: 	addsd	0x20(%rsp), %xmm0
    00000206: 	movsd	%xmm0, 0x20(%rsp)
    0000020c: 	jmp	.Ltmp1602 # Offset: 524
    0000020e: 	nop # Size: 2
.Ltmp1604:
    00000210: 	movq	$0x0, (%r13)
    00000218: 	addq	$0x8, %r13
    0000021c: 	cmpq	%r13, %r15
    0000021f: 	je	.Ltmp1603 # Offset: 543
.Ltmp1602:
    00000221: 	movq	(%r13), %rbp
    00000225: 	testq	%rbp, %rbp
    00000228: 	je	.Ltmp1604 # Offset: 552
    0000022a: 	movq	0x8(%rbp), %rbx
    0000022e: 	testq	%rbx, %rbx
    00000231: 	je	.Ltmp1605 # Offset: 561
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1606:
    00000238: 	movq	%rbx, %rdi
    0000023b: 	movq	0x8(%rbx), %rbx
    0000023f: 	movl	$0x10, %esi
    00000244: 	callq	_ZdlPvm@PLT # Offset: 580
    00000249: 	testq	%rbx, %rbx
    0000024c: 	jne	.Ltmp1606 # Offset: 588
.Ltmp1605:
    0000024e: 	movl	$0x18, %esi
    00000253: 	movq	%rbp, %rdi
    00000256: 	callq	_ZdlPvm@PLT # Offset: 598
    0000025b: 	jmp	.Ltmp1604 # Offset: 603
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp1595:
    00000260: 	addl	$0x1, 0x4(%rbx)
    00000264: 	movq	%rax, 0x8(%rbx)
    00000268: 	cmpq	%rbp, %r12
    0000026b: 	jne	.Ltmp1596 # Offset: 619
    00000271: 	movq	%rbx, (%r14)
    00000274: 	addq	$0x8, %r14
    00000278: 	cmpq	%r14, %r15
    0000027b: 	jne	.Ltmp1597 # Offset: 635
    00000281: 	jmp	.Ltmp1607 # Offset: 641
    00000286: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1599:
    00000290: 	movq	$0x0, 0x10(%r14)
    00000298: 	jmp	.Ltmp1598 # Offset: 664
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp1603:
    000002a0: 	movl	0x10(%rsp), %ecx
    000002a4: 	movl	iterations(%rip), %eax
    000002aa: 	addl	%ecx, 0x28(%rsp)
    000002ae: 	movl	0x28(%rsp), %ecx
    000002b2: 	cmpl	%ecx, %eax
    000002b4: 	jg	.Ltmp1608 # Offset: 692
.Ltmp1614:
    000002ba: 	movq	0x38(%rsp), %rdi
    000002bf: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 703
    000002c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002cb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002d2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002d9: 	je	.Ltmp1609 # Offset: 729
.Ltmp1613:
    000002df: 	movq	-0x20(%rax), %rdi
    000002e3: 	movsd	0x20(%rsp), %xmm0
    000002e9: 	callq	_Z13record_resultdPKc # Offset: 745
    000002ee: 	cmpq	$0x0, 0x18(%rsp)
    000002f4: 	je	.Ltmp1610 # Offset: 756
    000002f6: 	movq	0x58(%rsp), %rax
    000002fb: 	subq	%fs:0x28, %rax
    00000304: 	jne	.Ltmp1611 # Offset: 772
    00000306: 	movq	0x50(%rsp), %rsi
    0000030b: 	movq	0x18(%rsp), %rdi
    00000310: 	addq	$0x68, %rsp
    00000314: 	popq	%rbx
    00000315: 	popq	%rbp
    00000316: 	subq	%rdi, %rsi
    00000319: 	popq	%r12
    0000031b: 	popq	%r13
    0000031d: 	popq	%r14
    0000031f: 	popq	%r15
    00000321: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 801
.Ltmp1610:
    00000326: 	movq	0x58(%rsp), %rax
    0000032b: 	subq	%fs:0x28, %rax
    00000334: 	jne	.Ltmp1611 # Offset: 820
    00000336: 	addq	$0x68, %rsp
    0000033a: 	popq	%rbx
    0000033b: 	popq	%rbp
    0000033c: 	popq	%r12
    0000033e: 	popq	%r13
    00000340: 	popq	%r14
    00000342: 	popq	%r15
    00000344: 	retq # Offset: 836
.Ltmp1590:
    00000345: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1591:
    0000034e: 	movq	$0x0, 0x50(%rsp)
    00000357: 	pxor	%xmm0, %xmm0
    0000035b: 	movaps	%xmm0, 0x40(%rsp)
    00000360: 	jmp	.Ltmp1612 # Offset: 864
.Ltmp1609:
    00000365: 	movq	-0x8(%rdx), %rax
    00000369: 	addq	$0x200, %rax
    0000036f: 	jmp	.Ltmp1613 # Offset: 879
.Ltmp1592:
    00000374: 	pxor	%xmm4, %xmm4
    00000378: 	movsd	%xmm4, 0x20(%rsp)
    0000037e: 	jmp	.Ltmp1614 # Offset: 894
.Ltmp1611:
    00000383: 	callq	__stack_chk_fail@PLT # Offset: 899
    00000388: 	endbr64
    0000038c: 	movq	%rax, %rbp
    0000038f: 	movq	0x40(%rsp), %rdi
    00000394: 	movq	0x50(%rsp), %rsi
    00000399: 	subq	%rdi, %rsi
    0000039c: 	testq	%rdi, %rdi
    0000039f: 	je	.Ltmp1615 # Offset: 927
    000003a1: 	callq	_ZdlPvm@PLT # Offset: 929
.Ltmp1615:
    000003a6: 	movq	%rbp, %rdi
    000003a9: 	callq	_Unwind_Resume@PLT # Offset: 937
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_eraseall_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_pushfrontId14SingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0x125d0
  Size        : 0x394
  MaxSize     : 0x3a0
  Offset      : 0x125d0
  Section     : .text
  Orc Section : .local.text._Z14test_pushfrontId14SingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%rdi, (%rsp)
    00000019: 	movq	%rdx, 0x38(%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x58(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp1616 # Offset: 66
    00000044: 	xorl	%eax, %eax
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1617:
    00000050: 	addl	$0x1, %eax
    00000053: 	cmpl	%eax, iterations(%rip)
    00000059: 	jg	.Ltmp1617 # Offset: 89
.Ltmp1616:
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	movq	%r12, %rcx
    00000067: 	xorl	%edx, %edx
    00000069: 	movq	%rax, end_time(%rip)
    00000070: 	subq	start_time(%rip), %rax
    00000077: 	cvtsi2sd	%rax, %xmm0
    0000007c: 	subq	(%rsp), %rcx
    00000080: 	movabsq	$0x500000000, %rax
    0000008a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000092: 	divq	%rcx
    00000095: 	movsd	%xmm0, 0x30(%rsp)
    0000009b: 	movq	%rax, 0x8(%rsp)
    000000a0: 	cmpq	$0x3e8, %rax
    000000a6: 	ja	.Ltmp1618 # Offset: 166
    000000ac: 	cmpq	$0x3, 0x8(%rsp)
    000000b2: 	ja	.Ltmp1619 # Offset: 178
    000000b8: 	movq	$0x0, 0x50(%rsp)
    000000c1: 	pxor	%xmm0, %xmm0
    000000c5: 	movq	$0x4, 0x8(%rsp)
    000000ce: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1635:
    000000d3: 	movq	0x8(%rsp), %rbx
    000000d8: 	leaq	0x40(%rsp), %rdi
    000000dd: 	movq	%rbx, %rsi
    000000e0: 	callq	_ZNSt6vectorIP14SingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 224
    000000e5: 	movq	0x40(%rsp), %rcx
    000000ea: 	movl	iterations(%rip), %eax
    000000f0: 	movq	%rcx, 0x18(%rsp)
    000000f5: 	testl	%eax, %eax
    000000f7: 	jle	.Ltmp1620 # Offset: 247
    000000fd: 	addq	$0x8, %rcx
    00000101: 	movl	%ebx, 0x24(%rsp)
    00000105: 	pxor	%xmm3, %xmm3
    00000109: 	movl	$0x0, 0x20(%rsp)
    00000111: 	movq	%rcx, 0x28(%rsp)
    00000116: 	movsd	%xmm3, 0x10(%rsp)
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1631:
    00000120: 	movslq	0x20(%rsp), %rdx
    00000125: 	movslq	%eax, %rcx
    00000128: 	movq	%rdx, %rsi
    0000012b: 	addq	0x8(%rsp), %rdx
    00000130: 	subl	%esi, %eax
    00000132: 	cmpq	%rcx, %rdx
    00000135: 	cmovbl	0x24(%rsp), %eax
    0000013a: 	movl	%eax, %ebx
    0000013c: 	callq	clock@PLT # Offset: 316
    00000141: 	movq	0x18(%rsp), %r14
    00000146: 	movq	0x28(%rsp), %rcx
    0000014b: 	movq	%rax, start_time(%rip)
    00000152: 	leal	-0x1(%rbx), %eax
    00000155: 	movq	%r14, %r13
    00000158: 	leaq	(%rcx,%rax,8), %r15
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp1624:
    00000160: 	movl	$0x18, %edi
    00000165: 	callq	_Znwm@PLT # Offset: 357
    0000016a: 	pxor	%xmm1, %xmm1
    0000016e: 	movl	$0x0, 0x4(%rax)
    00000175: 	movq	%rax, %rbx
    00000178: 	movups	%xmm1, 0x8(%rax)
    0000017c: 	movq	(%rsp), %rax
    00000180: 	movq	%rax, %rbp
    00000183: 	cmpq	%rax, %r12
    00000186: 	je	.Ltmp1621 # Offset: 390
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1623:
    00000190: 	movl	$0x10, %edi
    00000195: 	addq	$0x8, %rbp
    00000199: 	callq	_Znwm@PLT # Offset: 409
    0000019e: 	movq	0x8(%rbx), %rdx
    000001a2: 	movsd	-0x8(%rbp), %xmm0
    000001a7: 	movq	%rax, 0x8(%rbx)
    000001ab: 	cmpq	$0x0, 0x10(%rbx)
    000001b0: 	movq	%rdx, 0x8(%rax)
    000001b4: 	movsd	%xmm0, (%rax)
    000001b8: 	je	.Ltmp1622 # Offset: 440
    000001be: 	addl	$0x1, 0x4(%rbx)
    000001c2: 	cmpq	%rbp, %r12
    000001c5: 	jne	.Ltmp1623 # Offset: 453
.Ltmp1621:
    000001c7: 	movq	%rbx, (%r14)
    000001ca: 	addq	$0x8, %r14
    000001ce: 	cmpq	%r14, %r15
    000001d1: 	jne	.Ltmp1624 # Offset: 465
.Ltmp1630:
    000001d3: 	callq	clock@PLT # Offset: 467
    000001d8: 	pxor	%xmm0, %xmm0
    000001dc: 	movq	%rax, end_time(%rip)
    000001e3: 	subq	start_time(%rip), %rax
    000001ea: 	cvtsi2sd	%rax, %xmm0
    000001ef: 	divsd	DATAat0x53788(%rip), %xmm0
    000001f7: 	addsd	0x10(%rsp), %xmm0
    000001fd: 	movsd	%xmm0, 0x10(%rsp)
    00000203: 	jmp	.Ltmp1625 # Offset: 515
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp1627:
    00000208: 	movq	$0x0, (%r13)
    00000210: 	addq	$0x8, %r13
    00000214: 	cmpq	%r13, %r15
    00000217: 	je	.Ltmp1626 # Offset: 535
.Ltmp1625:
    00000219: 	movq	(%r13), %rbp
    0000021d: 	testq	%rbp, %rbp
    00000220: 	je	.Ltmp1627 # Offset: 544
    00000222: 	movq	0x8(%rbp), %rbx
    00000226: 	testq	%rbx, %rbx
    00000229: 	je	.Ltmp1628 # Offset: 553
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1629:
    00000230: 	movq	%rbx, %rdi
    00000233: 	movq	0x8(%rbx), %rbx
    00000237: 	movl	$0x10, %esi
    0000023c: 	callq	_ZdlPvm@PLT # Offset: 572
    00000241: 	testq	%rbx, %rbx
    00000244: 	jne	.Ltmp1629 # Offset: 580
.Ltmp1628:
    00000246: 	movl	$0x18, %esi
    0000024b: 	movq	%rbp, %rdi
    0000024e: 	callq	_ZdlPvm@PLT # Offset: 590
    00000253: 	jmp	.Ltmp1627 # Offset: 595
    00000255: 	nopl	(%rax) # Size: 3
.Ltmp1622:
    00000258: 	addl	$0x1, 0x4(%rbx)
    0000025c: 	movq	%rax, 0x10(%rbx)
    00000260: 	cmpq	%rbp, %r12
    00000263: 	jne	.Ltmp1623 # Offset: 611
    00000269: 	movq	%rbx, (%r14)
    0000026c: 	addq	$0x8, %r14
    00000270: 	cmpq	%r14, %r15
    00000273: 	jne	.Ltmp1624 # Offset: 627
    00000279: 	jmp	.Ltmp1630 # Offset: 633
    0000027e: 	nop # Size: 2
.Ltmp1626:
    00000280: 	movl	0x8(%rsp), %ecx
    00000284: 	movl	iterations(%rip), %eax
    0000028a: 	addl	%ecx, 0x20(%rsp)
    0000028e: 	movl	0x20(%rsp), %ecx
    00000292: 	cmpl	%ecx, %eax
    00000294: 	jg	.Ltmp1631 # Offset: 660
.Ltmp1637:
    0000029a: 	movq	0x38(%rsp), %rdi
    0000029f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 671
    000002a4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ab: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002b2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002b9: 	je	.Ltmp1632 # Offset: 697
.Ltmp1636:
    000002bf: 	movsd	0x10(%rsp), %xmm0
    000002c5: 	subsd	0x30(%rsp), %xmm0
    000002cb: 	movq	-0x20(%rax), %rdi
    000002cf: 	callq	_Z13record_resultdPKc # Offset: 719
    000002d4: 	cmpq	$0x0, 0x18(%rsp)
    000002da: 	je	.Ltmp1633 # Offset: 730
    000002dc: 	movq	0x58(%rsp), %rax
    000002e1: 	subq	%fs:0x28, %rax
    000002ea: 	jne	.Ltmp1634 # Offset: 746
    000002ec: 	movq	0x50(%rsp), %rsi
    000002f1: 	movq	0x18(%rsp), %rdi
    000002f6: 	addq	$0x68, %rsp
    000002fa: 	popq	%rbx
    000002fb: 	popq	%rbp
    000002fc: 	subq	%rdi, %rsi
    000002ff: 	popq	%r12
    00000301: 	popq	%r13
    00000303: 	popq	%r14
    00000305: 	popq	%r15
    00000307: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 775
.Ltmp1633:
    0000030c: 	movq	0x58(%rsp), %rax
    00000311: 	subq	%fs:0x28, %rax
    0000031a: 	jne	.Ltmp1634 # Offset: 794
    0000031c: 	addq	$0x68, %rsp
    00000320: 	popq	%rbx
    00000321: 	popq	%rbp
    00000322: 	popq	%r12
    00000324: 	popq	%r13
    00000326: 	popq	%r14
    00000328: 	popq	%r15
    0000032a: 	retq # Offset: 810
.Ltmp1618:
    0000032b: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp1619:
    00000334: 	movq	$0x0, 0x50(%rsp)
    0000033d: 	pxor	%xmm0, %xmm0
    00000341: 	movaps	%xmm0, 0x40(%rsp)
    00000346: 	jmp	.Ltmp1635 # Offset: 838
.Ltmp1632:
    0000034b: 	movq	-0x8(%rdx), %rax
    0000034f: 	addq	$0x200, %rax
    00000355: 	jmp	.Ltmp1636 # Offset: 853
.Ltmp1620:
    0000035a: 	pxor	%xmm4, %xmm4
    0000035e: 	movsd	%xmm4, 0x10(%rsp)
    00000364: 	jmp	.Ltmp1637 # Offset: 868
.Ltmp1634:
    00000369: 	callq	__stack_chk_fail@PLT # Offset: 873
    0000036e: 	endbr64
    00000372: 	movq	%rax, %rbp
    00000375: 	movq	0x40(%rsp), %rdi
    0000037a: 	movq	0x50(%rsp), %rsi
    0000037f: 	subq	%rdi, %rsi
    00000382: 	testq	%rdi, %rdi
    00000385: 	je	.Ltmp1638 # Offset: 901
    00000387: 	callq	_ZdlPvm@PLT # Offset: 903
.Ltmp1638:
    0000038c: 	movq	%rbp, %rdi
    0000038f: 	callq	_Unwind_Resume@PLT # Offset: 911
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_pushfrontId14SingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0x12970
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x12970
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1639 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp1640 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp1641 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp1642 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp1643 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp1650:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp1644 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp1644:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp1645 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp1646 # Offset: 200
.Ltmp1648:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1640:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp1647 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp1647:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1639:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1645:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1649:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1648 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1646:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1649 # Offset: 392
.Ltmp1643:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp1651:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp1650 # Offset: 445
.Ltmp1642:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp1651 # Offset: 460
.Ltmp1641:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm"

Binary Function "_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x12b50
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x12b50
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1652 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp1653 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp1654 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp1655 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp1656 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp1663:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp1657 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp1657:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp1658 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp1659 # Offset: 200
.Ltmp1661:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1653:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp1660 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp1660:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1652:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1658:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1662:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1661 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1659:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1662 # Offset: 392
.Ltmp1656:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp1664:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp1663 # Offset: 445
.Ltmp1655:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp1664 # Offset: 460
.Ltmp1654:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm"

Binary Function "_Z14test_pushfrontId14DoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x12d30
  Size        : 0x3b4
  MaxSize     : 0x3c0
  Offset      : 0x12d30
  Section     : .text
  Orc Section : .local.text._Z14test_pushfrontId14DoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%rdi, (%rsp)
    00000019: 	movq	%rdx, 0x38(%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x58(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp1665 # Offset: 66
    00000044: 	xorl	%eax, %eax
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1666:
    00000050: 	addl	$0x1, %eax
    00000053: 	cmpl	%eax, iterations(%rip)
    00000059: 	jg	.Ltmp1666 # Offset: 89
.Ltmp1665:
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	movq	%r12, %rcx
    00000067: 	xorl	%edx, %edx
    00000069: 	movq	%rax, end_time(%rip)
    00000070: 	subq	start_time(%rip), %rax
    00000077: 	cvtsi2sd	%rax, %xmm0
    0000007c: 	subq	(%rsp), %rcx
    00000080: 	movabsq	$0x500000000, %rax
    0000008a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000092: 	divq	%rcx
    00000095: 	movsd	%xmm0, 0x30(%rsp)
    0000009b: 	movq	%rax, 0x8(%rsp)
    000000a0: 	cmpq	$0x3e8, %rax
    000000a6: 	ja	.Ltmp1667 # Offset: 166
    000000ac: 	cmpq	$0x3, 0x8(%rsp)
    000000b2: 	ja	.Ltmp1668 # Offset: 178
    000000b8: 	movq	$0x0, 0x50(%rsp)
    000000c1: 	pxor	%xmm0, %xmm0
    000000c5: 	movq	$0x4, 0x8(%rsp)
    000000ce: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1685:
    000000d3: 	movq	0x8(%rsp), %rbx
    000000d8: 	leaq	0x40(%rsp), %rdi
    000000dd: 	movq	%rbx, %rsi
    000000e0: 	callq	_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 224
    000000e5: 	movq	0x40(%rsp), %rcx
    000000ea: 	movl	iterations(%rip), %eax
    000000f0: 	movq	%rcx, 0x18(%rsp)
    000000f5: 	testl	%eax, %eax
    000000f7: 	jle	.Ltmp1669 # Offset: 247
    000000fd: 	addq	$0x8, %rcx
    00000101: 	movl	%ebx, 0x24(%rsp)
    00000105: 	pxor	%xmm3, %xmm3
    00000109: 	movl	$0x0, 0x20(%rsp)
    00000111: 	movq	%rcx, 0x28(%rsp)
    00000116: 	movsd	%xmm3, 0x10(%rsp)
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1681:
    00000120: 	movslq	0x20(%rsp), %rdx
    00000125: 	movslq	%eax, %rcx
    00000128: 	movq	%rdx, %rsi
    0000012b: 	addq	0x8(%rsp), %rdx
    00000130: 	subl	%esi, %eax
    00000132: 	cmpq	%rcx, %rdx
    00000135: 	cmovbl	0x24(%rsp), %eax
    0000013a: 	movl	%eax, %ebx
    0000013c: 	callq	clock@PLT # Offset: 316
    00000141: 	movq	0x18(%rsp), %r14
    00000146: 	movq	0x28(%rsp), %rcx
    0000014b: 	movq	%rax, start_time(%rip)
    00000152: 	leal	-0x1(%rbx), %eax
    00000155: 	movq	%r14, %r13
    00000158: 	leaq	(%rcx,%rax,8), %r15
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp1674:
    00000160: 	movl	$0x20, %edi
    00000165: 	callq	_Znwm@PLT # Offset: 357
    0000016a: 	pxor	%xmm1, %xmm1
    0000016e: 	movq	$0x0, 0x8(%rax)
    00000176: 	movq	%rax, %rbx
    00000179: 	movups	%xmm1, 0x10(%rax)
    0000017d: 	movq	(%rsp), %rax
    00000181: 	movq	%rax, %rbp
    00000184: 	cmpq	%rax, %r12
    00000187: 	je	.Ltmp1670 # Offset: 391
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp1673:
    00000190: 	movl	$0x18, %edi
    00000195: 	addq	$0x8, %rbp
    00000199: 	callq	_Znwm@PLT # Offset: 409
    0000019e: 	movsd	-0x8(%rbp), %xmm0
    000001a3: 	movq	0x10(%rbx), %rdx
    000001a7: 	movq	$0x0, 0x10(%rax)
    000001af: 	movq	%rdx, 0x8(%rax)
    000001b3: 	movsd	%xmm0, (%rax)
    000001b7: 	testq	%rdx, %rdx
    000001ba: 	je	.Ltmp1671 # Offset: 442
    000001bc: 	movq	%rax, 0x10(%rdx)
.Ltmp1671:
    000001c0: 	cmpq	$0x0, 0x18(%rbx)
    000001c5: 	movq	%rax, 0x10(%rbx)
    000001c9: 	je	.Ltmp1672 # Offset: 457
    000001cf: 	addq	$0x1, 0x8(%rbx)
    000001d4: 	cmpq	%rbp, %r12
    000001d7: 	jne	.Ltmp1673 # Offset: 471
.Ltmp1670:
    000001d9: 	movq	%rbx, (%r14)
    000001dc: 	addq	$0x8, %r14
    000001e0: 	cmpq	%r14, %r15
    000001e3: 	jne	.Ltmp1674 # Offset: 483
.Ltmp1680:
    000001e9: 	callq	clock@PLT # Offset: 489
    000001ee: 	pxor	%xmm0, %xmm0
    000001f2: 	movq	%rax, end_time(%rip)
    000001f9: 	subq	start_time(%rip), %rax
    00000200: 	cvtsi2sd	%rax, %xmm0
    00000205: 	divsd	DATAat0x53788(%rip), %xmm0
    0000020d: 	addsd	0x10(%rsp), %xmm0
    00000213: 	movsd	%xmm0, 0x10(%rsp)
    00000219: 	jmp	.Ltmp1675 # Offset: 537
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1677:
    00000220: 	movq	$0x0, (%r13)
    00000228: 	addq	$0x8, %r13
    0000022c: 	cmpq	%r13, %r15
    0000022f: 	je	.Ltmp1676 # Offset: 559
.Ltmp1675:
    00000231: 	movq	(%r13), %rbp
    00000235: 	testq	%rbp, %rbp
    00000238: 	je	.Ltmp1677 # Offset: 568
    0000023a: 	movq	0x10(%rbp), %rbx
    0000023e: 	testq	%rbx, %rbx
    00000241: 	je	.Ltmp1678 # Offset: 577
    00000243: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1679:
    00000248: 	movq	%rbx, %rdi
    0000024b: 	movq	0x8(%rbx), %rbx
    0000024f: 	movl	$0x18, %esi
    00000254: 	callq	_ZdlPvm@PLT # Offset: 596
    00000259: 	testq	%rbx, %rbx
    0000025c: 	jne	.Ltmp1679 # Offset: 604
.Ltmp1678:
    0000025e: 	movl	$0x20, %esi
    00000263: 	movq	%rbp, %rdi
    00000266: 	callq	_ZdlPvm@PLT # Offset: 614
    0000026b: 	jmp	.Ltmp1677 # Offset: 619
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp1672:
    00000270: 	addq	$0x1, 0x8(%rbx)
    00000275: 	movq	%rax, 0x18(%rbx)
    00000279: 	cmpq	%rbp, %r12
    0000027c: 	jne	.Ltmp1673 # Offset: 636
    00000282: 	movq	%rbx, (%r14)
    00000285: 	addq	$0x8, %r14
    00000289: 	cmpq	%r14, %r15
    0000028c: 	jne	.Ltmp1674 # Offset: 652
    00000292: 	jmp	.Ltmp1680 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1676:
    000002a0: 	movl	0x8(%rsp), %ecx
    000002a4: 	movl	iterations(%rip), %eax
    000002aa: 	addl	%ecx, 0x20(%rsp)
    000002ae: 	movl	0x20(%rsp), %ecx
    000002b2: 	cmpl	%ecx, %eax
    000002b4: 	jg	.Ltmp1681 # Offset: 692
.Ltmp1687:
    000002ba: 	movq	0x38(%rsp), %rdi
    000002bf: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 703
    000002c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002cb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002d2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002d9: 	je	.Ltmp1682 # Offset: 729
.Ltmp1686:
    000002df: 	movsd	0x10(%rsp), %xmm0
    000002e5: 	subsd	0x30(%rsp), %xmm0
    000002eb: 	movq	-0x20(%rax), %rdi
    000002ef: 	callq	_Z13record_resultdPKc # Offset: 751
    000002f4: 	cmpq	$0x0, 0x18(%rsp)
    000002fa: 	je	.Ltmp1683 # Offset: 762
    000002fc: 	movq	0x58(%rsp), %rax
    00000301: 	subq	%fs:0x28, %rax
    0000030a: 	jne	.Ltmp1684 # Offset: 778
    0000030c: 	movq	0x50(%rsp), %rsi
    00000311: 	movq	0x18(%rsp), %rdi
    00000316: 	addq	$0x68, %rsp
    0000031a: 	popq	%rbx
    0000031b: 	popq	%rbp
    0000031c: 	subq	%rdi, %rsi
    0000031f: 	popq	%r12
    00000321: 	popq	%r13
    00000323: 	popq	%r14
    00000325: 	popq	%r15
    00000327: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 807
.Ltmp1683:
    0000032c: 	movq	0x58(%rsp), %rax
    00000331: 	subq	%fs:0x28, %rax
    0000033a: 	jne	.Ltmp1684 # Offset: 826
    0000033c: 	addq	$0x68, %rsp
    00000340: 	popq	%rbx
    00000341: 	popq	%rbp
    00000342: 	popq	%r12
    00000344: 	popq	%r13
    00000346: 	popq	%r14
    00000348: 	popq	%r15
    0000034a: 	retq # Offset: 842
.Ltmp1667:
    0000034b: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp1668:
    00000354: 	movq	$0x0, 0x50(%rsp)
    0000035d: 	pxor	%xmm0, %xmm0
    00000361: 	movaps	%xmm0, 0x40(%rsp)
    00000366: 	jmp	.Ltmp1685 # Offset: 870
.Ltmp1682:
    0000036b: 	movq	-0x8(%rdx), %rax
    0000036f: 	addq	$0x200, %rax
    00000375: 	jmp	.Ltmp1686 # Offset: 885
.Ltmp1669:
    0000037a: 	pxor	%xmm4, %xmm4
    0000037e: 	movsd	%xmm4, 0x10(%rsp)
    00000384: 	jmp	.Ltmp1687 # Offset: 900
.Ltmp1684:
    00000389: 	callq	__stack_chk_fail@PLT # Offset: 905
    0000038e: 	endbr64
    00000392: 	movq	%rax, %rbp
    00000395: 	movq	0x40(%rsp), %rdi
    0000039a: 	movq	0x50(%rsp), %rsi
    0000039f: 	subq	%rdi, %rsi
    000003a2: 	testq	%rdi, %rdi
    000003a5: 	je	.Ltmp1688 # Offset: 933
    000003a7: 	callq	_ZdlPvm@PLT # Offset: 935
.Ltmp1688:
    000003ac: 	movq	%rbp, %rdi
    000003af: 	callq	_Unwind_Resume@PLT # Offset: 943
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_pushfrontId14DoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_delete_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0x130f0
  Size        : 0x34e
  MaxSize     : 0x350
  Offset      : 0x130f0
  Section     : .text
  Orc Section : .local.text._Z20test_delete_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x18(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1689 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1690 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x18(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1707:
    0000007a: 	movq	0x18(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1691 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm3, %xmm3
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm3, 0x10(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1703:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x18(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1696:
    00000100: 	movl	$0x20, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	movq	$0x0, 0x8(%rax)
    00000116: 	movq	%rax, %rbx
    00000119: 	movups	%xmm1, 0x10(%rax)
    0000011d: 	movq	0x8(%rsp), %rax
    00000122: 	movq	%rax, %rbp
    00000125: 	cmpq	%rax, %r12
    00000128: 	je	.Ltmp1692 # Offset: 296
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1695:
    00000130: 	movl	$0x18, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	0x18(%rbx), %rdx
    00000147: 	movq	$0x0, 0x8(%rax)
    0000014f: 	movq	%rdx, 0x10(%rax)
    00000153: 	movsd	%xmm0, (%rax)
    00000157: 	testq	%rdx, %rdx
    0000015a: 	je	.Ltmp1693 # Offset: 346
    0000015c: 	movq	%rax, 0x8(%rdx)
.Ltmp1693:
    00000160: 	cmpq	$0x0, 0x10(%rbx)
    00000165: 	movq	%rax, 0x18(%rbx)
    00000169: 	je	.Ltmp1694 # Offset: 361
    0000016b: 	addq	$0x1, 0x8(%rbx)
    00000170: 	cmpq	%rbp, %r12
    00000173: 	jne	.Ltmp1695 # Offset: 371
.Ltmp1692:
    00000175: 	movq	%rbx, (%r14)
    00000178: 	addq	$0x8, %r14
    0000017c: 	cmpq	%r14, %r15
    0000017f: 	jne	.Ltmp1696 # Offset: 383
.Ltmp1702:
    00000185: 	callq	clock@PLT # Offset: 389
    0000018a: 	movq	%rax, start_time(%rip)
    00000191: 	jmp	.Ltmp1697 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1699:
    00000198: 	movq	$0x0, (%r13)
    000001a0: 	addq	$0x8, %r13
    000001a4: 	cmpq	%r13, %r15
    000001a7: 	je	.Ltmp1698 # Offset: 423
.Ltmp1697:
    000001a9: 	movq	(%r13), %rbp
    000001ad: 	testq	%rbp, %rbp
    000001b0: 	je	.Ltmp1699 # Offset: 432
    000001b2: 	movq	0x10(%rbp), %rbx
    000001b6: 	testq	%rbx, %rbx
    000001b9: 	je	.Ltmp1700 # Offset: 441
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1701:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	0x8(%rbx), %rbx
    000001c7: 	movl	$0x18, %esi
    000001cc: 	callq	_ZdlPvm@PLT # Offset: 460
    000001d1: 	testq	%rbx, %rbx
    000001d4: 	jne	.Ltmp1701 # Offset: 468
.Ltmp1700:
    000001d6: 	movl	$0x20, %esi
    000001db: 	movq	%rbp, %rdi
    000001de: 	callq	_ZdlPvm@PLT # Offset: 478
    000001e3: 	jmp	.Ltmp1699 # Offset: 483
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp1694:
    000001e8: 	addq	$0x1, 0x8(%rbx)
    000001ed: 	movq	%rax, 0x10(%rbx)
    000001f1: 	cmpq	%rbp, %r12
    000001f4: 	jne	.Ltmp1695 # Offset: 500
    000001fa: 	movq	%rbx, (%r14)
    000001fd: 	addq	$0x8, %r14
    00000201: 	cmpq	%r14, %r15
    00000204: 	jne	.Ltmp1696 # Offset: 516
    0000020a: 	jmp	.Ltmp1702 # Offset: 522
    0000020f: 	nop # Size: 1
.Ltmp1698:
    00000210: 	callq	clock@PLT # Offset: 528
    00000215: 	pxor	%xmm0, %xmm0
    00000219: 	movl	0x18(%rsp), %ecx
    0000021d: 	addl	%ecx, 0x28(%rsp)
    00000221: 	movq	%rax, end_time(%rip)
    00000228: 	subq	start_time(%rip), %rax
    0000022f: 	cvtsi2sd	%rax, %xmm0
    00000234: 	movl	0x28(%rsp), %ecx
    00000238: 	divsd	DATAat0x53788(%rip), %xmm0
    00000240: 	addsd	0x10(%rsp), %xmm0
    00000246: 	movl	iterations(%rip), %eax
    0000024c: 	movsd	%xmm0, 0x10(%rsp)
    00000252: 	cmpl	%ecx, %eax
    00000254: 	jg	.Ltmp1703 # Offset: 596
.Ltmp1709:
    0000025a: 	movq	0x38(%rsp), %rdi
    0000025f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 607
    00000264: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000026b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000272: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000279: 	je	.Ltmp1704 # Offset: 633
.Ltmp1708:
    0000027f: 	movq	-0x20(%rax), %rdi
    00000283: 	movsd	0x10(%rsp), %xmm0
    00000289: 	callq	_Z13record_resultdPKc # Offset: 649
    0000028e: 	cmpq	$0x0, 0x20(%rsp)
    00000294: 	je	.Ltmp1705 # Offset: 660
    00000296: 	movq	0x58(%rsp), %rax
    0000029b: 	subq	%fs:0x28, %rax
    000002a4: 	jne	.Ltmp1706 # Offset: 676
    000002a6: 	movq	0x50(%rsp), %rsi
    000002ab: 	movq	0x20(%rsp), %rdi
    000002b0: 	addq	$0x68, %rsp
    000002b4: 	popq	%rbx
    000002b5: 	popq	%rbp
    000002b6: 	subq	%rdi, %rsi
    000002b9: 	popq	%r12
    000002bb: 	popq	%r13
    000002bd: 	popq	%r14
    000002bf: 	popq	%r15
    000002c1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 705
.Ltmp1705:
    000002c6: 	movq	0x58(%rsp), %rax
    000002cb: 	subq	%fs:0x28, %rax
    000002d4: 	jne	.Ltmp1706 # Offset: 724
    000002d6: 	addq	$0x68, %rsp
    000002da: 	popq	%rbx
    000002db: 	popq	%rbp
    000002dc: 	popq	%r12
    000002de: 	popq	%r13
    000002e0: 	popq	%r14
    000002e2: 	popq	%r15
    000002e4: 	retq # Offset: 740
.Ltmp1689:
    000002e5: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp1690:
    000002ee: 	movq	$0x0, 0x50(%rsp)
    000002f7: 	pxor	%xmm0, %xmm0
    000002fb: 	movaps	%xmm0, 0x40(%rsp)
    00000300: 	jmp	.Ltmp1707 # Offset: 768
.Ltmp1704:
    00000305: 	movq	-0x8(%rdx), %rax
    00000309: 	addq	$0x200, %rax
    0000030f: 	jmp	.Ltmp1708 # Offset: 783
.Ltmp1691:
    00000314: 	pxor	%xmm4, %xmm4
    00000318: 	movsd	%xmm4, 0x10(%rsp)
    0000031e: 	jmp	.Ltmp1709 # Offset: 798
.Ltmp1706:
    00000323: 	callq	__stack_chk_fail@PLT # Offset: 803
    00000328: 	endbr64
    0000032c: 	movq	%rax, %rbp
    0000032f: 	movq	0x40(%rsp), %rdi
    00000334: 	movq	0x50(%rsp), %rsi
    00000339: 	subq	%rdi, %rsi
    0000033c: 	testq	%rdi, %rdi
    0000033f: 	je	.Ltmp1710 # Offset: 831
    00000341: 	callq	_ZdlPvm@PLT # Offset: 833
.Ltmp1710:
    00000346: 	movq	%rbp, %rdi
    00000349: 	callq	_Unwind_Resume@PLT # Offset: 841
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_delete_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_duplicate_coreI14DoubleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0x13440
  Size        : 0x32e
  MaxSize     : 0x330
  Offset      : 0x13440
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreI14DoubleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	(,%rsi,8), %rcx
    0000000e: 	pushq	%r14
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x68, %rsp
    0000001a: 	movq	%rdx, 0x38(%rsp)
    0000001f: 	xorl	%edx, %edx
    00000021: 	movq	%rdi, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	movabsq	$0x500000000, %rax
    00000040: 	divq	%rcx
    00000043: 	movq	%rax, 0x10(%rsp)
    00000048: 	cmpq	$0x3e8, %rax
    0000004e: 	ja	.Ltmp1711 # Offset: 78
    00000054: 	cmpq	$0x3, %rax
    00000058: 	ja	.Ltmp1712 # Offset: 88
    0000005e: 	movq	$0x0, 0x50(%rsp)
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	movq	$0x4, 0x10(%rsp)
    00000074: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1729:
    00000079: 	movq	0x10(%rsp), %rbx
    0000007e: 	leaq	0x40(%rsp), %rdi
    00000083: 	movq	%rbx, %rsi
    00000086: 	callq	_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 134
    0000008b: 	movq	0x40(%rsp), %rcx
    00000090: 	movl	iterations(%rip), %eax
    00000096: 	movq	%rcx, 0x20(%rsp)
    0000009b: 	testl	%eax, %eax
    0000009d: 	jle	.Ltmp1713 # Offset: 157
    000000a3: 	addq	$0x8, %rcx
    000000a7: 	movl	%ebx, 0x2c(%rsp)
    000000ab: 	pxor	%xmm3, %xmm3
    000000af: 	movl	$0x0, 0x28(%rsp)
    000000b7: 	movq	%rcx, 0x30(%rsp)
    000000bc: 	movsd	%xmm3, 0x18(%rsp)
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1725:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	%rdx, %rsi
    000000d3: 	addq	0x10(%rsp), %rdx
    000000d8: 	subl	%esi, %eax
    000000da: 	cmpq	%rcx, %rdx
    000000dd: 	cmovbl	0x2c(%rsp), %eax
    000000e2: 	movl	%eax, %ebx
    000000e4: 	callq	clock@PLT # Offset: 228
    000000e9: 	movq	0x20(%rsp), %r14
    000000ee: 	movq	0x30(%rsp), %rcx
    000000f3: 	movq	%rax, start_time(%rip)
    000000fa: 	leal	-0x1(%rbx), %eax
    000000fd: 	movq	%r14, %r13
    00000100: 	leaq	(%rcx,%rax,8), %r15
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp1719:
    00000108: 	movl	$0x20, %edi
    0000010d: 	callq	_Znwm@PLT # Offset: 269
    00000112: 	pxor	%xmm1, %xmm1
    00000116: 	movq	$0x0, 0x8(%rax)
    0000011e: 	movq	%rax, %rbx
    00000121: 	movups	%xmm1, 0x10(%rax)
    00000125: 	movq	0x8(%rsp), %rax
    0000012a: 	movq	0x10(%rax), %rbp
    0000012e: 	testq	%rbp, %rbp
    00000131: 	jne	.Ltmp1714 # Offset: 305
    00000133: 	jmp	.Ltmp1715 # Offset: 307
    00000135: 	nopl	(%rax) # Size: 3
.Ltmp1717:
    00000138: 	addq	$0x1, 0x8(%rbx)
    0000013d: 	testq	%r12, %r12
    00000140: 	je	.Ltmp1715 # Offset: 320
.Ltmp1718:
    00000142: 	movq	%r12, %rbp
.Ltmp1714:
    00000145: 	movl	$0x18, %edi
    0000014a: 	movq	0x8(%rbp), %r12
    0000014e: 	callq	_Znwm@PLT # Offset: 334
    00000153: 	movsd	(%rbp), %xmm0
    00000158: 	movq	0x18(%rbx), %rdx
    0000015c: 	movq	$0x0, 0x8(%rax)
    00000164: 	movq	%rdx, 0x10(%rax)
    00000168: 	movsd	%xmm0, (%rax)
    0000016c: 	testq	%rdx, %rdx
    0000016f: 	je	.Ltmp1716 # Offset: 367
    00000171: 	movq	%rax, 0x8(%rdx)
.Ltmp1716:
    00000175: 	cmpq	$0x0, 0x10(%rbx)
    0000017a: 	movq	%rax, 0x18(%rbx)
    0000017e: 	jne	.Ltmp1717 # Offset: 382
    00000180: 	addq	$0x1, 0x8(%rbx)
    00000185: 	movq	%rax, 0x10(%rbx)
    00000189: 	testq	%r12, %r12
    0000018c: 	jne	.Ltmp1718 # Offset: 396
.Ltmp1715:
    0000018e: 	movq	%rbx, (%r14)
    00000191: 	addq	$0x8, %r14
    00000195: 	cmpq	%r15, %r14
    00000198: 	jne	.Ltmp1719 # Offset: 408
    0000019e: 	callq	clock@PLT # Offset: 414
    000001a3: 	pxor	%xmm0, %xmm0
    000001a7: 	movq	%rax, end_time(%rip)
    000001ae: 	subq	start_time(%rip), %rax
    000001b5: 	cvtsi2sd	%rax, %xmm0
    000001ba: 	divsd	DATAat0x53788(%rip), %xmm0
    000001c2: 	addsd	0x18(%rsp), %xmm0
    000001c8: 	movsd	%xmm0, 0x18(%rsp)
    000001ce: 	jmp	.Ltmp1720 # Offset: 462
.Ltmp1722:
    000001d0: 	movq	$0x0, (%r13)
    000001d8: 	addq	$0x8, %r13
    000001dc: 	cmpq	%r15, %r13
    000001df: 	je	.Ltmp1721 # Offset: 479
.Ltmp1720:
    000001e1: 	movq	(%r13), %rbp
    000001e5: 	testq	%rbp, %rbp
    000001e8: 	je	.Ltmp1722 # Offset: 488
    000001ea: 	movq	0x10(%rbp), %rbx
    000001ee: 	testq	%rbx, %rbx
    000001f1: 	je	.Ltmp1723 # Offset: 497
    000001f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1724:
    000001f8: 	movq	%rbx, %rdi
    000001fb: 	movq	0x8(%rbx), %rbx
    000001ff: 	movl	$0x18, %esi
    00000204: 	callq	_ZdlPvm@PLT # Offset: 516
    00000209: 	testq	%rbx, %rbx
    0000020c: 	jne	.Ltmp1724 # Offset: 524
.Ltmp1723:
    0000020e: 	movl	$0x20, %esi
    00000213: 	movq	%rbp, %rdi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
    0000021b: 	jmp	.Ltmp1722 # Offset: 539
    0000021d: 	nopl	(%rax) # Size: 3
.Ltmp1721:
    00000220: 	movl	0x10(%rsp), %ecx
    00000224: 	movl	iterations(%rip), %eax
    0000022a: 	addl	%ecx, 0x28(%rsp)
    0000022e: 	movl	0x28(%rsp), %ecx
    00000232: 	cmpl	%ecx, %eax
    00000234: 	jg	.Ltmp1725 # Offset: 564
.Ltmp1731:
    0000023a: 	movq	0x38(%rsp), %rdi
    0000023f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 575
    00000244: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000024b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000252: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000259: 	je	.Ltmp1726 # Offset: 601
.Ltmp1730:
    0000025f: 	movq	-0x20(%rax), %rdi
    00000263: 	movsd	0x18(%rsp), %xmm0
    00000269: 	callq	_Z13record_resultdPKc # Offset: 617
    0000026e: 	cmpq	$0x0, 0x20(%rsp)
    00000274: 	je	.Ltmp1727 # Offset: 628
    00000276: 	movq	0x58(%rsp), %rax
    0000027b: 	subq	%fs:0x28, %rax
    00000284: 	jne	.Ltmp1728 # Offset: 644
    00000286: 	movq	0x50(%rsp), %rsi
    0000028b: 	movq	0x20(%rsp), %rdi
    00000290: 	addq	$0x68, %rsp
    00000294: 	popq	%rbx
    00000295: 	popq	%rbp
    00000296: 	subq	%rdi, %rsi
    00000299: 	popq	%r12
    0000029b: 	popq	%r13
    0000029d: 	popq	%r14
    0000029f: 	popq	%r15
    000002a1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 673
.Ltmp1727:
    000002a6: 	movq	0x58(%rsp), %rax
    000002ab: 	subq	%fs:0x28, %rax
    000002b4: 	jne	.Ltmp1728 # Offset: 692
    000002b6: 	addq	$0x68, %rsp
    000002ba: 	popq	%rbx
    000002bb: 	popq	%rbp
    000002bc: 	popq	%r12
    000002be: 	popq	%r13
    000002c0: 	popq	%r14
    000002c2: 	popq	%r15
    000002c4: 	retq # Offset: 708
.Ltmp1711:
    000002c5: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1712:
    000002ce: 	movq	$0x0, 0x50(%rsp)
    000002d7: 	pxor	%xmm0, %xmm0
    000002db: 	movaps	%xmm0, 0x40(%rsp)
    000002e0: 	jmp	.Ltmp1729 # Offset: 736
.Ltmp1726:
    000002e5: 	movq	-0x8(%rdx), %rax
    000002e9: 	addq	$0x200, %rax
    000002ef: 	jmp	.Ltmp1730 # Offset: 751
.Ltmp1713:
    000002f4: 	pxor	%xmm4, %xmm4
    000002f8: 	movsd	%xmm4, 0x18(%rsp)
    000002fe: 	jmp	.Ltmp1731 # Offset: 766
.Ltmp1728:
    00000303: 	callq	__stack_chk_fail@PLT # Offset: 771
    00000308: 	endbr64
    0000030c: 	movq	%rax, %rbp
    0000030f: 	movq	0x40(%rsp), %rdi
    00000314: 	movq	0x50(%rsp), %rsi
    00000319: 	subq	%rdi, %rsi
    0000031c: 	testq	%rdi, %rdi
    0000031f: 	je	.Ltmp1732 # Offset: 799
    00000321: 	callq	_ZdlPvm@PLT # Offset: 801
.Ltmp1732:
    00000326: 	movq	%rbp, %rdi
    00000329: 	callq	_Unwind_Resume@PLT # Offset: 809
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreI14DoubleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_clearall_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0x13770
  Size        : 0x39e
  MaxSize     : 0x3a0
  Offset      : 0x13770
  Section     : .text
  Orc Section : .local.text._Z22test_clearall_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1733 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1734 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1754:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x18(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1735 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm4, %xmm4
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm4, 0x20(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1750:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x18(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1740:
    00000100: 	movl	$0x20, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	movq	$0x0, 0x8(%rax)
    00000116: 	movq	%rax, %rbx
    00000119: 	movups	%xmm1, 0x10(%rax)
    0000011d: 	movq	0x8(%rsp), %rax
    00000122: 	movq	%rax, %rbp
    00000125: 	cmpq	%rax, %r12
    00000128: 	je	.Ltmp1736 # Offset: 296
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1739:
    00000130: 	movl	$0x18, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	0x18(%rbx), %rdx
    00000147: 	movq	$0x0, 0x8(%rax)
    0000014f: 	movq	%rdx, 0x10(%rax)
    00000153: 	movsd	%xmm0, (%rax)
    00000157: 	testq	%rdx, %rdx
    0000015a: 	je	.Ltmp1737 # Offset: 346
    0000015c: 	movq	%rax, 0x8(%rdx)
.Ltmp1737:
    00000160: 	cmpq	$0x0, 0x10(%rbx)
    00000165: 	movq	%rax, 0x18(%rbx)
    00000169: 	je	.Ltmp1738 # Offset: 361
    0000016f: 	addq	$0x1, 0x8(%rbx)
    00000174: 	cmpq	%rbp, %r12
    00000177: 	jne	.Ltmp1739 # Offset: 375
.Ltmp1736:
    00000179: 	movq	%rbx, (%r14)
    0000017c: 	addq	$0x8, %r14
    00000180: 	cmpq	%r15, %r14
    00000183: 	jne	.Ltmp1740 # Offset: 387
.Ltmp1749:
    00000189: 	callq	clock@PLT # Offset: 393
    0000018e: 	movq	0x18(%rsp), %rbx
    00000193: 	movq	%rax, start_time(%rip)
    0000019a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1743:
    000001a0: 	movq	(%rbx), %rbp
    000001a3: 	movq	0x10(%rbp), %r14
    000001a7: 	testq	%r14, %r14
    000001aa: 	je	.Ltmp1741 # Offset: 426
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp1742:
    000001b0: 	movq	%r14, %rdi
    000001b3: 	movq	0x8(%r14), %r14
    000001b7: 	movl	$0x18, %esi
    000001bc: 	callq	_ZdlPvm@PLT # Offset: 444
    000001c1: 	testq	%r14, %r14
    000001c4: 	jne	.Ltmp1742 # Offset: 452
.Ltmp1741:
    000001c6: 	pxor	%xmm2, %xmm2
    000001ca: 	addq	$0x8, %rbx
    000001ce: 	movq	$0x0, 0x8(%rbp)
    000001d6: 	movups	%xmm2, 0x10(%rbp)
    000001da: 	cmpq	%r15, %rbx
    000001dd: 	jne	.Ltmp1743 # Offset: 477
    000001df: 	callq	clock@PLT # Offset: 479
    000001e4: 	pxor	%xmm0, %xmm0
    000001e8: 	movq	%rax, end_time(%rip)
    000001ef: 	subq	start_time(%rip), %rax
    000001f6: 	cvtsi2sd	%rax, %xmm0
    000001fb: 	divsd	DATAat0x53788(%rip), %xmm0
    00000203: 	addsd	0x20(%rsp), %xmm0
    00000209: 	movsd	%xmm0, 0x20(%rsp)
    0000020f: 	jmp	.Ltmp1744 # Offset: 527
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp1746:
    00000218: 	movq	$0x0, (%r13)
    00000220: 	addq	$0x8, %r13
    00000224: 	cmpq	%r15, %r13
    00000227: 	je	.Ltmp1745 # Offset: 551
.Ltmp1744:
    00000229: 	movq	(%r13), %rbp
    0000022d: 	testq	%rbp, %rbp
    00000230: 	je	.Ltmp1746 # Offset: 560
    00000232: 	movq	0x10(%rbp), %rbx
    00000236: 	testq	%rbx, %rbx
    00000239: 	je	.Ltmp1747 # Offset: 569
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1748:
    00000240: 	movq	%rbx, %rdi
    00000243: 	movq	0x8(%rbx), %rbx
    00000247: 	movl	$0x18, %esi
    0000024c: 	callq	_ZdlPvm@PLT # Offset: 588
    00000251: 	testq	%rbx, %rbx
    00000254: 	jne	.Ltmp1748 # Offset: 596
.Ltmp1747:
    00000256: 	movl	$0x20, %esi
    0000025b: 	movq	%rbp, %rdi
    0000025e: 	callq	_ZdlPvm@PLT # Offset: 606
    00000263: 	jmp	.Ltmp1746 # Offset: 611
    00000265: 	nopl	(%rax) # Size: 3
.Ltmp1738:
    00000268: 	addq	$0x1, 0x8(%rbx)
    0000026d: 	movq	%rax, 0x10(%rbx)
    00000271: 	cmpq	%rbp, %r12
    00000274: 	jne	.Ltmp1739 # Offset: 628
    0000027a: 	movq	%rbx, (%r14)
    0000027d: 	addq	$0x8, %r14
    00000281: 	cmpq	%r15, %r14
    00000284: 	jne	.Ltmp1740 # Offset: 644
    0000028a: 	jmp	.Ltmp1749 # Offset: 650
    0000028f: 	nop # Size: 1
.Ltmp1745:
    00000290: 	movl	0x10(%rsp), %ecx
    00000294: 	movl	iterations(%rip), %eax
    0000029a: 	addl	%ecx, 0x28(%rsp)
    0000029e: 	movl	0x28(%rsp), %ecx
    000002a2: 	cmpl	%ecx, %eax
    000002a4: 	jg	.Ltmp1750 # Offset: 676
.Ltmp1756:
    000002aa: 	movq	0x38(%rsp), %rdi
    000002af: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 687
    000002b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002bb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002c9: 	je	.Ltmp1751 # Offset: 713
.Ltmp1755:
    000002cf: 	movq	-0x20(%rax), %rdi
    000002d3: 	movsd	0x20(%rsp), %xmm0
    000002d9: 	callq	_Z13record_resultdPKc # Offset: 729
    000002de: 	cmpq	$0x0, 0x18(%rsp)
    000002e4: 	je	.Ltmp1752 # Offset: 740
    000002e6: 	movq	0x58(%rsp), %rax
    000002eb: 	subq	%fs:0x28, %rax
    000002f4: 	jne	.Ltmp1753 # Offset: 756
    000002f6: 	movq	0x50(%rsp), %rsi
    000002fb: 	movq	0x18(%rsp), %rdi
    00000300: 	addq	$0x68, %rsp
    00000304: 	popq	%rbx
    00000305: 	popq	%rbp
    00000306: 	subq	%rdi, %rsi
    00000309: 	popq	%r12
    0000030b: 	popq	%r13
    0000030d: 	popq	%r14
    0000030f: 	popq	%r15
    00000311: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 785
.Ltmp1752:
    00000316: 	movq	0x58(%rsp), %rax
    0000031b: 	subq	%fs:0x28, %rax
    00000324: 	jne	.Ltmp1753 # Offset: 804
    00000326: 	addq	$0x68, %rsp
    0000032a: 	popq	%rbx
    0000032b: 	popq	%rbp
    0000032c: 	popq	%r12
    0000032e: 	popq	%r13
    00000330: 	popq	%r14
    00000332: 	popq	%r15
    00000334: 	retq # Offset: 820
.Ltmp1733:
    00000335: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1734:
    0000033e: 	movq	$0x0, 0x50(%rsp)
    00000347: 	pxor	%xmm0, %xmm0
    0000034b: 	movaps	%xmm0, 0x40(%rsp)
    00000350: 	jmp	.Ltmp1754 # Offset: 848
.Ltmp1751:
    00000355: 	movq	-0x8(%rdx), %rax
    00000359: 	addq	$0x200, %rax
    0000035f: 	jmp	.Ltmp1755 # Offset: 863
.Ltmp1735:
    00000364: 	pxor	%xmm5, %xmm5
    00000368: 	movsd	%xmm5, 0x20(%rsp)
    0000036e: 	jmp	.Ltmp1756 # Offset: 878
.Ltmp1753:
    00000373: 	callq	__stack_chk_fail@PLT # Offset: 883
    00000378: 	endbr64
    0000037c: 	movq	%rax, %rbp
    0000037f: 	movq	0x40(%rsp), %rdi
    00000384: 	movq	0x50(%rsp), %rsi
    00000389: 	subq	%rdi, %rsi
    0000038c: 	testq	%rdi, %rdi
    0000038f: 	je	.Ltmp1757 # Offset: 911
    00000391: 	callq	_ZdlPvm@PLT # Offset: 913
.Ltmp1757:
    00000396: 	movq	%rbp, %rdi
    00000399: 	callq	_Unwind_Resume@PLT # Offset: 921
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_clearall_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_popfrontId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0x13b10
  Size        : 0x3f5
  MaxSize     : 0x400
  Offset      : 0x13b10
  Section     : .text
  Orc Section : .local.text._Z13test_popfrontId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x48(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x18(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1758 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1759 # Offset: 89
    0000005f: 	movq	$0x0, 0x60(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x18(%rsp)
    00000075: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp1783:
    0000007a: 	movq	0x18(%rsp), %rbx
    0000007f: 	leaq	0x50(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x50(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x28(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1760 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x3c(%rsp)
    000000ac: 	pxor	%xmm3, %xmm3
    000000b0: 	movl	$0x0, 0x38(%rsp)
    000000b8: 	movq	%rcx, 0x40(%rsp)
    000000bd: 	movsd	%xmm3, 0x20(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1779:
    000000c8: 	movslq	0x38(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x28(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x18(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x3c(%rsp), %eax
    000000ea: 	movq	0x40(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %rax
    000000f6: 	movq	%rax, 0x8(%rsp)
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1765:
    00000100: 	movl	$0x20, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	movq	$0x0, 0x8(%rax)
    00000116: 	movq	%rax, %rbx
    00000119: 	movups	%xmm1, 0x10(%rax)
    0000011d: 	movq	0x10(%rsp), %rax
    00000122: 	movq	%rax, %rbp
    00000125: 	cmpq	%rax, %r12
    00000128: 	je	.Ltmp1761 # Offset: 296
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1764:
    00000130: 	movl	$0x18, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	0x18(%rbx), %rdx
    00000147: 	movq	$0x0, 0x8(%rax)
    0000014f: 	movq	%rdx, 0x10(%rax)
    00000153: 	movsd	%xmm0, (%rax)
    00000157: 	testq	%rdx, %rdx
    0000015a: 	je	.Ltmp1762 # Offset: 346
    0000015c: 	movq	%rax, 0x8(%rdx)
.Ltmp1762:
    00000160: 	cmpq	$0x0, 0x10(%rbx)
    00000165: 	movq	%rax, 0x18(%rbx)
    00000169: 	je	.Ltmp1763 # Offset: 361
    0000016f: 	addq	$0x1, 0x8(%rbx)
    00000174: 	cmpq	%rbp, %r12
    00000177: 	jne	.Ltmp1764 # Offset: 375
.Ltmp1761:
    00000179: 	movq	%rbx, (%r14)
    0000017c: 	addq	$0x8, %r14
    00000180: 	cmpq	0x8(%rsp), %r14
    00000185: 	jne	.Ltmp1765 # Offset: 389
.Ltmp1772:
    0000018b: 	callq	clock@PLT # Offset: 395
    00000190: 	movq	0x10(%rsp), %r15
    00000195: 	movq	%rax, start_time(%rip)
    0000019c: 	cmpq	%r15, %r12
    0000019f: 	je	.Ltmp1766 # Offset: 415
    000001a5: 	movq	%r13, 0x30(%rsp)
    000001aa: 	movq	0x28(%rsp), %rbx
    000001af: 	nop # Size: 1
.Ltmp1773:
    000001b0: 	movq	(%rbx), %rbp
    000001b3: 	movq	%r15, %r13
    000001b6: 	movq	0x10(%rbp), %rdi
    000001ba: 	jmp	.Ltmp1767 # Offset: 442
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp1771:
    000001c0: 	testq	%r14, %r14
    000001c3: 	je	.Ltmp1768 # Offset: 451
    000001c9: 	movq	$0x0, 0x10(%r14)
    000001d1: 	movq	%r14, %rdi
.Ltmp1770:
    000001d4: 	addq	$0x8, %r13
    000001d8: 	subq	$0x1, 0x8(%rbp)
    000001dd: 	movq	%rdi, 0x10(%rbp)
    000001e1: 	cmpq	%r13, %r12
    000001e4: 	je	.Ltmp1769 # Offset: 484
.Ltmp1767:
    000001e6: 	testq	%rdi, %rdi
    000001e9: 	je	.Ltmp1770 # Offset: 489
    000001eb: 	movl	$0x18, %esi
    000001f0: 	movq	0x8(%rdi), %r14
    000001f4: 	callq	_ZdlPvm@PLT # Offset: 500
    000001f9: 	movq	0x10(%rbp), %rax
    000001fd: 	cmpq	%rax, 0x18(%rbp)
    00000201: 	jne	.Ltmp1771 # Offset: 513
    00000203: 	movq	$0x0, 0x18(%rbp)
    0000020b: 	jmp	.Ltmp1771 # Offset: 523
    0000020d: 	nopl	(%rax) # Size: 3
.Ltmp1763:
    00000210: 	addq	$0x1, 0x8(%rbx)
    00000215: 	movq	%rax, 0x10(%rbx)
    00000219: 	cmpq	%rbp, %r12
    0000021c: 	jne	.Ltmp1764 # Offset: 540
    00000222: 	movq	%rbx, (%r14)
    00000225: 	addq	$0x8, %r14
    00000229: 	cmpq	0x8(%rsp), %r14
    0000022e: 	jne	.Ltmp1765 # Offset: 558
    00000234: 	jmp	.Ltmp1772 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp1769:
    00000240: 	addq	$0x8, %rbx
    00000244: 	cmpq	%rbx, 0x8(%rsp)
    00000249: 	jne	.Ltmp1773 # Offset: 585
    0000024f: 	movq	0x30(%rsp), %r13
.Ltmp1766:
    00000254: 	callq	clock@PLT # Offset: 596
    00000259: 	pxor	%xmm0, %xmm0
    0000025d: 	movq	0x8(%rsp), %r14
    00000262: 	movq	%rax, end_time(%rip)
    00000269: 	subq	start_time(%rip), %rax
    00000270: 	cvtsi2sd	%rax, %xmm0
    00000275: 	divsd	DATAat0x53788(%rip), %xmm0
    0000027d: 	addsd	0x20(%rsp), %xmm0
    00000283: 	movsd	%xmm0, 0x20(%rsp)
    00000289: 	jmp	.Ltmp1774 # Offset: 649
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1776:
    00000290: 	movq	$0x0, (%r13)
    00000298: 	addq	$0x8, %r13
    0000029c: 	cmpq	%r13, %r14
    0000029f: 	je	.Ltmp1775 # Offset: 671
.Ltmp1774:
    000002a1: 	movq	(%r13), %rbp
    000002a5: 	testq	%rbp, %rbp
    000002a8: 	je	.Ltmp1776 # Offset: 680
    000002aa: 	movq	0x10(%rbp), %rbx
    000002ae: 	testq	%rbx, %rbx
    000002b1: 	je	.Ltmp1777 # Offset: 689
    000002b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1778:
    000002b8: 	movq	%rbx, %rdi
    000002bb: 	movq	0x8(%rbx), %rbx
    000002bf: 	movl	$0x18, %esi
    000002c4: 	callq	_ZdlPvm@PLT # Offset: 708
    000002c9: 	testq	%rbx, %rbx
    000002cc: 	jne	.Ltmp1778 # Offset: 716
.Ltmp1777:
    000002ce: 	movl	$0x20, %esi
    000002d3: 	movq	%rbp, %rdi
    000002d6: 	callq	_ZdlPvm@PLT # Offset: 726
    000002db: 	jmp	.Ltmp1776 # Offset: 731
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp1775:
    000002e0: 	movl	0x18(%rsp), %ecx
    000002e4: 	movl	iterations(%rip), %eax
    000002ea: 	addl	%ecx, 0x38(%rsp)
    000002ee: 	movl	0x38(%rsp), %ecx
    000002f2: 	cmpl	%ecx, %eax
    000002f4: 	jg	.Ltmp1779 # Offset: 756
.Ltmp1785:
    000002fa: 	movq	0x48(%rsp), %rdi
    000002ff: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 767
    00000304: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000030b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000312: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000319: 	je	.Ltmp1780 # Offset: 793
.Ltmp1784:
    0000031f: 	movq	-0x20(%rax), %rdi
    00000323: 	movsd	0x20(%rsp), %xmm0
    00000329: 	callq	_Z13record_resultdPKc # Offset: 809
    0000032e: 	cmpq	$0x0, 0x28(%rsp)
    00000334: 	je	.Ltmp1781 # Offset: 820
    00000336: 	movq	0x68(%rsp), %rax
    0000033b: 	subq	%fs:0x28, %rax
    00000344: 	jne	.Ltmp1782 # Offset: 836
    00000346: 	movq	0x60(%rsp), %rsi
    0000034b: 	movq	0x28(%rsp), %rdi
    00000350: 	addq	$0x78, %rsp
    00000354: 	popq	%rbx
    00000355: 	popq	%rbp
    00000356: 	subq	%rdi, %rsi
    00000359: 	popq	%r12
    0000035b: 	popq	%r13
    0000035d: 	popq	%r14
    0000035f: 	popq	%r15
    00000361: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 865
.Ltmp1781:
    00000366: 	movq	0x68(%rsp), %rax
    0000036b: 	subq	%fs:0x28, %rax
    00000374: 	jne	.Ltmp1782 # Offset: 884
    00000376: 	addq	$0x78, %rsp
    0000037a: 	popq	%rbx
    0000037b: 	popq	%rbp
    0000037c: 	popq	%r12
    0000037e: 	popq	%r13
    00000380: 	popq	%r14
    00000382: 	popq	%r15
    00000384: 	retq # Offset: 900
.Ltmp1758:
    00000385: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp1759:
    0000038e: 	movq	$0x0, 0x60(%rsp)
    00000397: 	pxor	%xmm0, %xmm0
    0000039b: 	movaps	%xmm0, 0x50(%rsp)
    000003a0: 	jmp	.Ltmp1783 # Offset: 928
.Ltmp1780:
    000003a5: 	movq	-0x8(%rdx), %rax
    000003a9: 	addq	$0x200, %rax
    000003af: 	jmp	.Ltmp1784 # Offset: 943
.Ltmp1760:
    000003b4: 	pxor	%xmm4, %xmm4
    000003b8: 	movsd	%xmm4, 0x20(%rsp)
    000003be: 	jmp	.Ltmp1785 # Offset: 958
.Ltmp1782:
    000003c3: 	callq	__stack_chk_fail@PLT # Offset: 963
.Ltmp1768:
    000003c8: 	xorl	%edi, %edi
    000003ca: 	jmp	.Ltmp1770 # Offset: 970
    000003cf: 	endbr64
    000003d3: 	movq	%rax, %rbp
    000003d6: 	movq	0x50(%rsp), %rdi
    000003db: 	movq	0x60(%rsp), %rsi
    000003e0: 	subq	%rdi, %rsi
    000003e3: 	testq	%rdi, %rdi
    000003e6: 	je	.Ltmp1786 # Offset: 998
    000003e8: 	callq	_ZdlPvm@PLT # Offset: 1000
.Ltmp1786:
    000003ed: 	movq	%rbp, %rdi
    000003f0: 	callq	_Unwind_Resume@PLT # Offset: 1008
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_popfrontId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_popbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0x13f10
  Size        : 0x3f5
  MaxSize     : 0x400
  Offset      : 0x13f10
  Section     : .text
  Orc Section : .local.text._Z12test_popbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x48(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x18(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1787 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1788 # Offset: 89
    0000005f: 	movq	$0x0, 0x60(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x18(%rsp)
    00000075: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp1812:
    0000007a: 	movq	0x18(%rsp), %rbx
    0000007f: 	leaq	0x50(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x50(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x28(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1789 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x3c(%rsp)
    000000ac: 	pxor	%xmm3, %xmm3
    000000b0: 	movl	$0x0, 0x38(%rsp)
    000000b8: 	movq	%rcx, 0x40(%rsp)
    000000bd: 	movsd	%xmm3, 0x20(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1808:
    000000c8: 	movslq	0x38(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x28(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x18(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x3c(%rsp), %eax
    000000ea: 	movq	0x40(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %rax
    000000f6: 	movq	%rax, 0x8(%rsp)
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1794:
    00000100: 	movl	$0x20, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	movq	$0x0, 0x8(%rax)
    00000116: 	movq	%rax, %rbx
    00000119: 	movups	%xmm1, 0x10(%rax)
    0000011d: 	movq	0x10(%rsp), %rax
    00000122: 	movq	%rax, %rbp
    00000125: 	cmpq	%rax, %r12
    00000128: 	je	.Ltmp1790 # Offset: 296
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1793:
    00000130: 	movl	$0x18, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	0x18(%rbx), %rdx
    00000147: 	movq	$0x0, 0x8(%rax)
    0000014f: 	movq	%rdx, 0x10(%rax)
    00000153: 	movsd	%xmm0, (%rax)
    00000157: 	testq	%rdx, %rdx
    0000015a: 	je	.Ltmp1791 # Offset: 346
    0000015c: 	movq	%rax, 0x8(%rdx)
.Ltmp1791:
    00000160: 	cmpq	$0x0, 0x10(%rbx)
    00000165: 	movq	%rax, 0x18(%rbx)
    00000169: 	je	.Ltmp1792 # Offset: 361
    0000016f: 	addq	$0x1, 0x8(%rbx)
    00000174: 	cmpq	%rbp, %r12
    00000177: 	jne	.Ltmp1793 # Offset: 375
.Ltmp1790:
    00000179: 	movq	%rbx, (%r14)
    0000017c: 	addq	$0x8, %r14
    00000180: 	cmpq	0x8(%rsp), %r14
    00000185: 	jne	.Ltmp1794 # Offset: 389
.Ltmp1801:
    0000018b: 	callq	clock@PLT # Offset: 395
    00000190: 	movq	0x10(%rsp), %r15
    00000195: 	movq	%rax, start_time(%rip)
    0000019c: 	cmpq	%r15, %r12
    0000019f: 	je	.Ltmp1795 # Offset: 415
    000001a5: 	movq	%r13, 0x30(%rsp)
    000001aa: 	movq	0x28(%rsp), %rbx
    000001af: 	nop # Size: 1
.Ltmp1802:
    000001b0: 	movq	(%rbx), %rbp
    000001b3: 	movq	%r15, %r13
    000001b6: 	movq	0x18(%rbp), %rdi
    000001ba: 	jmp	.Ltmp1796 # Offset: 442
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp1800:
    000001c0: 	testq	%r14, %r14
    000001c3: 	je	.Ltmp1797 # Offset: 451
    000001c9: 	movq	$0x0, 0x8(%r14)
    000001d1: 	movq	%r14, %rdi
.Ltmp1799:
    000001d4: 	addq	$0x8, %r13
    000001d8: 	subq	$0x1, 0x8(%rbp)
    000001dd: 	movq	%rdi, 0x18(%rbp)
    000001e1: 	cmpq	%r13, %r12
    000001e4: 	je	.Ltmp1798 # Offset: 484
.Ltmp1796:
    000001e6: 	testq	%rdi, %rdi
    000001e9: 	je	.Ltmp1799 # Offset: 489
    000001eb: 	movl	$0x18, %esi
    000001f0: 	movq	0x10(%rdi), %r14
    000001f4: 	callq	_ZdlPvm@PLT # Offset: 500
    000001f9: 	movq	0x18(%rbp), %rax
    000001fd: 	cmpq	%rax, 0x10(%rbp)
    00000201: 	jne	.Ltmp1800 # Offset: 513
    00000203: 	movq	$0x0, 0x10(%rbp)
    0000020b: 	jmp	.Ltmp1800 # Offset: 523
    0000020d: 	nopl	(%rax) # Size: 3
.Ltmp1792:
    00000210: 	addq	$0x1, 0x8(%rbx)
    00000215: 	movq	%rax, 0x10(%rbx)
    00000219: 	cmpq	%rbp, %r12
    0000021c: 	jne	.Ltmp1793 # Offset: 540
    00000222: 	movq	%rbx, (%r14)
    00000225: 	addq	$0x8, %r14
    00000229: 	cmpq	0x8(%rsp), %r14
    0000022e: 	jne	.Ltmp1794 # Offset: 558
    00000234: 	jmp	.Ltmp1801 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp1798:
    00000240: 	addq	$0x8, %rbx
    00000244: 	cmpq	%rbx, 0x8(%rsp)
    00000249: 	jne	.Ltmp1802 # Offset: 585
    0000024f: 	movq	0x30(%rsp), %r13
.Ltmp1795:
    00000254: 	callq	clock@PLT # Offset: 596
    00000259: 	pxor	%xmm0, %xmm0
    0000025d: 	movq	0x8(%rsp), %r14
    00000262: 	movq	%rax, end_time(%rip)
    00000269: 	subq	start_time(%rip), %rax
    00000270: 	cvtsi2sd	%rax, %xmm0
    00000275: 	divsd	DATAat0x53788(%rip), %xmm0
    0000027d: 	addsd	0x20(%rsp), %xmm0
    00000283: 	movsd	%xmm0, 0x20(%rsp)
    00000289: 	jmp	.Ltmp1803 # Offset: 649
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1805:
    00000290: 	movq	$0x0, (%r13)
    00000298: 	addq	$0x8, %r13
    0000029c: 	cmpq	%r13, %r14
    0000029f: 	je	.Ltmp1804 # Offset: 671
.Ltmp1803:
    000002a1: 	movq	(%r13), %rbp
    000002a5: 	testq	%rbp, %rbp
    000002a8: 	je	.Ltmp1805 # Offset: 680
    000002aa: 	movq	0x10(%rbp), %rbx
    000002ae: 	testq	%rbx, %rbx
    000002b1: 	je	.Ltmp1806 # Offset: 689
    000002b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1807:
    000002b8: 	movq	%rbx, %rdi
    000002bb: 	movq	0x8(%rbx), %rbx
    000002bf: 	movl	$0x18, %esi
    000002c4: 	callq	_ZdlPvm@PLT # Offset: 708
    000002c9: 	testq	%rbx, %rbx
    000002cc: 	jne	.Ltmp1807 # Offset: 716
.Ltmp1806:
    000002ce: 	movl	$0x20, %esi
    000002d3: 	movq	%rbp, %rdi
    000002d6: 	callq	_ZdlPvm@PLT # Offset: 726
    000002db: 	jmp	.Ltmp1805 # Offset: 731
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp1804:
    000002e0: 	movl	0x18(%rsp), %ecx
    000002e4: 	movl	iterations(%rip), %eax
    000002ea: 	addl	%ecx, 0x38(%rsp)
    000002ee: 	movl	0x38(%rsp), %ecx
    000002f2: 	cmpl	%ecx, %eax
    000002f4: 	jg	.Ltmp1808 # Offset: 756
.Ltmp1814:
    000002fa: 	movq	0x48(%rsp), %rdi
    000002ff: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 767
    00000304: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000030b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000312: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000319: 	je	.Ltmp1809 # Offset: 793
.Ltmp1813:
    0000031f: 	movq	-0x20(%rax), %rdi
    00000323: 	movsd	0x20(%rsp), %xmm0
    00000329: 	callq	_Z13record_resultdPKc # Offset: 809
    0000032e: 	cmpq	$0x0, 0x28(%rsp)
    00000334: 	je	.Ltmp1810 # Offset: 820
    00000336: 	movq	0x68(%rsp), %rax
    0000033b: 	subq	%fs:0x28, %rax
    00000344: 	jne	.Ltmp1811 # Offset: 836
    00000346: 	movq	0x60(%rsp), %rsi
    0000034b: 	movq	0x28(%rsp), %rdi
    00000350: 	addq	$0x78, %rsp
    00000354: 	popq	%rbx
    00000355: 	popq	%rbp
    00000356: 	subq	%rdi, %rsi
    00000359: 	popq	%r12
    0000035b: 	popq	%r13
    0000035d: 	popq	%r14
    0000035f: 	popq	%r15
    00000361: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 865
.Ltmp1810:
    00000366: 	movq	0x68(%rsp), %rax
    0000036b: 	subq	%fs:0x28, %rax
    00000374: 	jne	.Ltmp1811 # Offset: 884
    00000376: 	addq	$0x78, %rsp
    0000037a: 	popq	%rbx
    0000037b: 	popq	%rbp
    0000037c: 	popq	%r12
    0000037e: 	popq	%r13
    00000380: 	popq	%r14
    00000382: 	popq	%r15
    00000384: 	retq # Offset: 900
.Ltmp1787:
    00000385: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp1788:
    0000038e: 	movq	$0x0, 0x60(%rsp)
    00000397: 	pxor	%xmm0, %xmm0
    0000039b: 	movaps	%xmm0, 0x50(%rsp)
    000003a0: 	jmp	.Ltmp1812 # Offset: 928
.Ltmp1809:
    000003a5: 	movq	-0x8(%rdx), %rax
    000003a9: 	addq	$0x200, %rax
    000003af: 	jmp	.Ltmp1813 # Offset: 943
.Ltmp1789:
    000003b4: 	pxor	%xmm4, %xmm4
    000003b8: 	movsd	%xmm4, 0x20(%rsp)
    000003be: 	jmp	.Ltmp1814 # Offset: 958
.Ltmp1811:
    000003c3: 	callq	__stack_chk_fail@PLT # Offset: 963
.Ltmp1797:
    000003c8: 	xorl	%edi, %edi
    000003ca: 	jmp	.Ltmp1799 # Offset: 970
    000003cf: 	endbr64
    000003d3: 	movq	%rax, %rbp
    000003d6: 	movq	0x50(%rsp), %rdi
    000003db: 	movq	0x60(%rsp), %rsi
    000003e0: 	subq	%rdi, %rsi
    000003e3: 	testq	%rdi, %rdi
    000003e6: 	je	.Ltmp1815 # Offset: 998
    000003e8: 	callq	_ZdlPvm@PLT # Offset: 1000
.Ltmp1815:
    000003ed: 	movq	%rbp, %rdi
    000003f0: 	callq	_Unwind_Resume@PLT # Offset: 1008
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_popbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_eraseall_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0x14310
  Size        : 0x3e5
  MaxSize     : 0x3f0
  Offset      : 0x14310
  Section     : .text
  Orc Section : .local.text._Z22test_eraseall_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp1816 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp1817 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1839:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp1818 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm3, %xmm3
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm3, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1835:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1823:
    00000100: 	movl	$0x20, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	movq	$0x0, 0x8(%rax)
    00000116: 	movq	%rax, %rbx
    00000119: 	movups	%xmm1, 0x10(%rax)
    0000011d: 	movq	0x8(%rsp), %rax
    00000122: 	movq	%rax, %rbp
    00000125: 	cmpq	%rax, %r12
    00000128: 	je	.Ltmp1819 # Offset: 296
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1822:
    00000130: 	movl	$0x18, %edi
    00000135: 	addq	$0x8, %rbp
    00000139: 	callq	_Znwm@PLT # Offset: 313
    0000013e: 	movsd	-0x8(%rbp), %xmm0
    00000143: 	movq	0x18(%rbx), %rdx
    00000147: 	movq	$0x0, 0x8(%rax)
    0000014f: 	movq	%rdx, 0x10(%rax)
    00000153: 	movsd	%xmm0, (%rax)
    00000157: 	testq	%rdx, %rdx
    0000015a: 	je	.Ltmp1820 # Offset: 346
    0000015c: 	movq	%rax, 0x8(%rdx)
.Ltmp1820:
    00000160: 	cmpq	$0x0, 0x10(%rbx)
    00000165: 	movq	%rax, 0x18(%rbx)
    00000169: 	je	.Ltmp1821 # Offset: 361
    0000016f: 	addq	$0x1, 0x8(%rbx)
    00000174: 	cmpq	%rbp, %r12
    00000177: 	jne	.Ltmp1822 # Offset: 375
.Ltmp1819:
    00000179: 	movq	%rbx, (%r14)
    0000017c: 	addq	$0x8, %r14
    00000180: 	cmpq	%r15, %r14
    00000183: 	jne	.Ltmp1823 # Offset: 387
.Ltmp1834:
    00000189: 	callq	clock@PLT # Offset: 393
    0000018e: 	movq	0x20(%rsp), %rbx
    00000193: 	movq	%rax, start_time(%rip)
    0000019a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1828:
    000001a0: 	movq	(%rbx), %r14
    000001a3: 	movq	0x10(%r14), %rbp
    000001a7: 	movq	0x18(%r14), %rdx
    000001ab: 	testq	%rbp, %rbp
    000001ae: 	je	.Ltmp1824 # Offset: 430
    000001b0: 	movq	0x10(%rbp), %rax
    000001b4: 	testq	%rax, %rax
    000001b7: 	je	.Ltmp1825 # Offset: 439
    000001b9: 	cmpq	%rax, %rbp
    000001bc: 	je	.Ltmp1825 # Offset: 444
    000001be: 	movq	$0x0, 0x8(%rax)
.Ltmp1825:
    000001c6: 	movq	$0x0, 0x10(%r14)
    000001ce: 	cmpq	%rdx, %rax
    000001d1: 	je	.Ltmp1826 # Offset: 465
    000001d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1827:
    000001e0: 	movq	%rbp, %rdi
    000001e3: 	movq	0x8(%rbp), %rbp
    000001e7: 	movl	$0x18, %esi
    000001ec: 	callq	_ZdlPvm@PLT # Offset: 492
    000001f1: 	subq	$0x1, 0x8(%r14)
    000001f6: 	testq	%rbp, %rbp
    000001f9: 	jne	.Ltmp1827 # Offset: 505
.Ltmp1824:
    000001fb: 	addq	$0x8, %rbx
    000001ff: 	cmpq	%rbx, %r15
    00000202: 	jne	.Ltmp1828 # Offset: 514
    00000204: 	callq	clock@PLT # Offset: 516
    00000209: 	pxor	%xmm0, %xmm0
    0000020d: 	movq	%rax, end_time(%rip)
    00000214: 	subq	start_time(%rip), %rax
    0000021b: 	cvtsi2sd	%rax, %xmm0
    00000220: 	divsd	DATAat0x53788(%rip), %xmm0
    00000228: 	addsd	0x18(%rsp), %xmm0
    0000022e: 	movsd	%xmm0, 0x18(%rsp)
    00000234: 	jmp	.Ltmp1829 # Offset: 564
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1831:
    00000240: 	movq	$0x0, (%r13)
    00000248: 	addq	$0x8, %r13
    0000024c: 	cmpq	%r13, %r15
    0000024f: 	je	.Ltmp1830 # Offset: 591
.Ltmp1829:
    00000251: 	movq	(%r13), %rbp
    00000255: 	testq	%rbp, %rbp
    00000258: 	je	.Ltmp1831 # Offset: 600
    0000025a: 	movq	0x10(%rbp), %rbx
    0000025e: 	testq	%rbx, %rbx
    00000261: 	je	.Ltmp1832 # Offset: 609
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1833:
    00000268: 	movq	%rbx, %rdi
    0000026b: 	movq	0x8(%rbx), %rbx
    0000026f: 	movl	$0x18, %esi
    00000274: 	callq	_ZdlPvm@PLT # Offset: 628
    00000279: 	testq	%rbx, %rbx
    0000027c: 	jne	.Ltmp1833 # Offset: 636
.Ltmp1832:
    0000027e: 	movl	$0x20, %esi
    00000283: 	movq	%rbp, %rdi
    00000286: 	callq	_ZdlPvm@PLT # Offset: 646
    0000028b: 	jmp	.Ltmp1831 # Offset: 651
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp1821:
    00000290: 	addq	$0x1, 0x8(%rbx)
    00000295: 	movq	%rax, 0x10(%rbx)
    00000299: 	cmpq	%rbp, %r12
    0000029c: 	jne	.Ltmp1822 # Offset: 668
    000002a2: 	movq	%rbx, (%r14)
    000002a5: 	addq	$0x8, %r14
    000002a9: 	cmpq	%r15, %r14
    000002ac: 	jne	.Ltmp1823 # Offset: 684
    000002b2: 	jmp	.Ltmp1834 # Offset: 690
    000002b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1830:
    000002c0: 	movl	0x10(%rsp), %ecx
    000002c4: 	movl	iterations(%rip), %eax
    000002ca: 	addl	%ecx, 0x28(%rsp)
    000002ce: 	movl	0x28(%rsp), %ecx
    000002d2: 	cmpl	%ecx, %eax
    000002d4: 	jg	.Ltmp1835 # Offset: 724
.Ltmp1841:
    000002da: 	movq	0x38(%rsp), %rdi
    000002df: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 735
    000002e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002eb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002f2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002f9: 	je	.Ltmp1836 # Offset: 761
.Ltmp1840:
    000002ff: 	movq	-0x20(%rax), %rdi
    00000303: 	movsd	0x18(%rsp), %xmm0
    00000309: 	callq	_Z13record_resultdPKc # Offset: 777
    0000030e: 	cmpq	$0x0, 0x20(%rsp)
    00000314: 	je	.Ltmp1837 # Offset: 788
    00000316: 	movq	0x58(%rsp), %rax
    0000031b: 	subq	%fs:0x28, %rax
    00000324: 	jne	.Ltmp1838 # Offset: 804
    0000032a: 	movq	0x50(%rsp), %rsi
    0000032f: 	movq	0x20(%rsp), %rdi
    00000334: 	addq	$0x68, %rsp
    00000338: 	popq	%rbx
    00000339: 	popq	%rbp
    0000033a: 	subq	%rdi, %rsi
    0000033d: 	popq	%r12
    0000033f: 	popq	%r13
    00000341: 	popq	%r14
    00000343: 	popq	%r15
    00000345: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 837
    0000034a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1826:
    00000350: 	movq	$0x0, 0x18(%r14)
    00000358: 	jmp	.Ltmp1827 # Offset: 856
.Ltmp1837:
    0000035d: 	movq	0x58(%rsp), %rax
    00000362: 	subq	%fs:0x28, %rax
    0000036b: 	jne	.Ltmp1838 # Offset: 875
    0000036d: 	addq	$0x68, %rsp
    00000371: 	popq	%rbx
    00000372: 	popq	%rbp
    00000373: 	popq	%r12
    00000375: 	popq	%r13
    00000377: 	popq	%r14
    00000379: 	popq	%r15
    0000037b: 	retq # Offset: 891
.Ltmp1816:
    0000037c: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1817:
    00000385: 	movq	$0x0, 0x50(%rsp)
    0000038e: 	pxor	%xmm0, %xmm0
    00000392: 	movaps	%xmm0, 0x40(%rsp)
    00000397: 	jmp	.Ltmp1839 # Offset: 919
.Ltmp1836:
    0000039c: 	movq	-0x8(%rdx), %rax
    000003a0: 	addq	$0x200, %rax
    000003a6: 	jmp	.Ltmp1840 # Offset: 934
.Ltmp1818:
    000003ab: 	pxor	%xmm4, %xmm4
    000003af: 	movsd	%xmm4, 0x18(%rsp)
    000003b5: 	jmp	.Ltmp1841 # Offset: 949
.Ltmp1838:
    000003ba: 	callq	__stack_chk_fail@PLT # Offset: 954
    000003bf: 	endbr64
    000003c3: 	movq	%rax, %rbp
    000003c6: 	movq	0x40(%rsp), %rdi
    000003cb: 	movq	0x50(%rsp), %rsi
    000003d0: 	subq	%rdi, %rsi
    000003d3: 	testq	%rdi, %rdi
    000003d6: 	je	.Ltmp1842 # Offset: 982
    000003d8: 	callq	_ZdlPvm@PLT # Offset: 984
.Ltmp1842:
    000003dd: 	movq	%rbp, %rdi
    000003e0: 	callq	_Unwind_Resume@PLT # Offset: 992
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_eraseall_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_pushbackId14DoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0x14700
  Size        : 0x3b4
  MaxSize     : 0x3c0
  Offset      : 0x14700
  Section     : .text
  Orc Section : .local.text._Z13test_pushbackId14DoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%rdi, (%rsp)
    00000019: 	movq	%rdx, 0x38(%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x58(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp1843 # Offset: 66
    00000044: 	xorl	%eax, %eax
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1844:
    00000050: 	addl	$0x1, %eax
    00000053: 	cmpl	%eax, iterations(%rip)
    00000059: 	jg	.Ltmp1844 # Offset: 89
.Ltmp1843:
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	movq	%r12, %rcx
    00000067: 	xorl	%edx, %edx
    00000069: 	movq	%rax, end_time(%rip)
    00000070: 	subq	start_time(%rip), %rax
    00000077: 	cvtsi2sd	%rax, %xmm0
    0000007c: 	subq	(%rsp), %rcx
    00000080: 	movabsq	$0x500000000, %rax
    0000008a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000092: 	divq	%rcx
    00000095: 	movsd	%xmm0, 0x30(%rsp)
    0000009b: 	movq	%rax, 0x8(%rsp)
    000000a0: 	cmpq	$0x3e8, %rax
    000000a6: 	ja	.Ltmp1845 # Offset: 166
    000000ac: 	cmpq	$0x3, 0x8(%rsp)
    000000b2: 	ja	.Ltmp1846 # Offset: 178
    000000b8: 	movq	$0x0, 0x50(%rsp)
    000000c1: 	pxor	%xmm0, %xmm0
    000000c5: 	movq	$0x4, 0x8(%rsp)
    000000ce: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1863:
    000000d3: 	movq	0x8(%rsp), %rbx
    000000d8: 	leaq	0x40(%rsp), %rdi
    000000dd: 	movq	%rbx, %rsi
    000000e0: 	callq	_ZNSt6vectorIP14DoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 224
    000000e5: 	movq	0x40(%rsp), %rcx
    000000ea: 	movl	iterations(%rip), %eax
    000000f0: 	movq	%rcx, 0x18(%rsp)
    000000f5: 	testl	%eax, %eax
    000000f7: 	jle	.Ltmp1847 # Offset: 247
    000000fd: 	addq	$0x8, %rcx
    00000101: 	movl	%ebx, 0x24(%rsp)
    00000105: 	pxor	%xmm3, %xmm3
    00000109: 	movl	$0x0, 0x20(%rsp)
    00000111: 	movq	%rcx, 0x28(%rsp)
    00000116: 	movsd	%xmm3, 0x10(%rsp)
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1859:
    00000120: 	movslq	0x20(%rsp), %rdx
    00000125: 	movslq	%eax, %rcx
    00000128: 	movq	%rdx, %rsi
    0000012b: 	addq	0x8(%rsp), %rdx
    00000130: 	subl	%esi, %eax
    00000132: 	cmpq	%rcx, %rdx
    00000135: 	cmovbl	0x24(%rsp), %eax
    0000013a: 	movl	%eax, %ebx
    0000013c: 	callq	clock@PLT # Offset: 316
    00000141: 	movq	0x18(%rsp), %r14
    00000146: 	movq	0x28(%rsp), %rcx
    0000014b: 	movq	%rax, start_time(%rip)
    00000152: 	leal	-0x1(%rbx), %eax
    00000155: 	movq	%r14, %r13
    00000158: 	leaq	(%rcx,%rax,8), %r15
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp1852:
    00000160: 	movl	$0x20, %edi
    00000165: 	callq	_Znwm@PLT # Offset: 357
    0000016a: 	pxor	%xmm1, %xmm1
    0000016e: 	movq	$0x0, 0x8(%rax)
    00000176: 	movq	%rax, %rbx
    00000179: 	movups	%xmm1, 0x10(%rax)
    0000017d: 	movq	(%rsp), %rax
    00000181: 	movq	%rax, %rbp
    00000184: 	cmpq	%rax, %r12
    00000187: 	je	.Ltmp1848 # Offset: 391
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp1851:
    00000190: 	movl	$0x18, %edi
    00000195: 	addq	$0x8, %rbp
    00000199: 	callq	_Znwm@PLT # Offset: 409
    0000019e: 	movsd	-0x8(%rbp), %xmm0
    000001a3: 	movq	0x18(%rbx), %rdx
    000001a7: 	movq	$0x0, 0x8(%rax)
    000001af: 	movq	%rdx, 0x10(%rax)
    000001b3: 	movsd	%xmm0, (%rax)
    000001b7: 	testq	%rdx, %rdx
    000001ba: 	je	.Ltmp1849 # Offset: 442
    000001bc: 	movq	%rax, 0x8(%rdx)
.Ltmp1849:
    000001c0: 	cmpq	$0x0, 0x10(%rbx)
    000001c5: 	movq	%rax, 0x18(%rbx)
    000001c9: 	je	.Ltmp1850 # Offset: 457
    000001cf: 	addq	$0x1, 0x8(%rbx)
    000001d4: 	cmpq	%rbp, %r12
    000001d7: 	jne	.Ltmp1851 # Offset: 471
.Ltmp1848:
    000001d9: 	movq	%rbx, (%r14)
    000001dc: 	addq	$0x8, %r14
    000001e0: 	cmpq	%r14, %r15
    000001e3: 	jne	.Ltmp1852 # Offset: 483
.Ltmp1858:
    000001e9: 	callq	clock@PLT # Offset: 489
    000001ee: 	pxor	%xmm0, %xmm0
    000001f2: 	movq	%rax, end_time(%rip)
    000001f9: 	subq	start_time(%rip), %rax
    00000200: 	cvtsi2sd	%rax, %xmm0
    00000205: 	divsd	DATAat0x53788(%rip), %xmm0
    0000020d: 	addsd	0x10(%rsp), %xmm0
    00000213: 	movsd	%xmm0, 0x10(%rsp)
    00000219: 	jmp	.Ltmp1853 # Offset: 537
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1855:
    00000220: 	movq	$0x0, (%r13)
    00000228: 	addq	$0x8, %r13
    0000022c: 	cmpq	%r13, %r15
    0000022f: 	je	.Ltmp1854 # Offset: 559
.Ltmp1853:
    00000231: 	movq	(%r13), %rbp
    00000235: 	testq	%rbp, %rbp
    00000238: 	je	.Ltmp1855 # Offset: 568
    0000023a: 	movq	0x10(%rbp), %rbx
    0000023e: 	testq	%rbx, %rbx
    00000241: 	je	.Ltmp1856 # Offset: 577
    00000243: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1857:
    00000248: 	movq	%rbx, %rdi
    0000024b: 	movq	0x8(%rbx), %rbx
    0000024f: 	movl	$0x18, %esi
    00000254: 	callq	_ZdlPvm@PLT # Offset: 596
    00000259: 	testq	%rbx, %rbx
    0000025c: 	jne	.Ltmp1857 # Offset: 604
.Ltmp1856:
    0000025e: 	movl	$0x20, %esi
    00000263: 	movq	%rbp, %rdi
    00000266: 	callq	_ZdlPvm@PLT # Offset: 614
    0000026b: 	jmp	.Ltmp1855 # Offset: 619
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp1850:
    00000270: 	addq	$0x1, 0x8(%rbx)
    00000275: 	movq	%rax, 0x10(%rbx)
    00000279: 	cmpq	%rbp, %r12
    0000027c: 	jne	.Ltmp1851 # Offset: 636
    00000282: 	movq	%rbx, (%r14)
    00000285: 	addq	$0x8, %r14
    00000289: 	cmpq	%r14, %r15
    0000028c: 	jne	.Ltmp1852 # Offset: 652
    00000292: 	jmp	.Ltmp1858 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1854:
    000002a0: 	movl	0x8(%rsp), %ecx
    000002a4: 	movl	iterations(%rip), %eax
    000002aa: 	addl	%ecx, 0x20(%rsp)
    000002ae: 	movl	0x20(%rsp), %ecx
    000002b2: 	cmpl	%ecx, %eax
    000002b4: 	jg	.Ltmp1859 # Offset: 692
.Ltmp1865:
    000002ba: 	movq	0x38(%rsp), %rdi
    000002bf: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 703
    000002c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002cb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002d2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002d9: 	je	.Ltmp1860 # Offset: 729
.Ltmp1864:
    000002df: 	movsd	0x10(%rsp), %xmm0
    000002e5: 	subsd	0x30(%rsp), %xmm0
    000002eb: 	movq	-0x20(%rax), %rdi
    000002ef: 	callq	_Z13record_resultdPKc # Offset: 751
    000002f4: 	cmpq	$0x0, 0x18(%rsp)
    000002fa: 	je	.Ltmp1861 # Offset: 762
    000002fc: 	movq	0x58(%rsp), %rax
    00000301: 	subq	%fs:0x28, %rax
    0000030a: 	jne	.Ltmp1862 # Offset: 778
    0000030c: 	movq	0x50(%rsp), %rsi
    00000311: 	movq	0x18(%rsp), %rdi
    00000316: 	addq	$0x68, %rsp
    0000031a: 	popq	%rbx
    0000031b: 	popq	%rbp
    0000031c: 	subq	%rdi, %rsi
    0000031f: 	popq	%r12
    00000321: 	popq	%r13
    00000323: 	popq	%r14
    00000325: 	popq	%r15
    00000327: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 807
.Ltmp1861:
    0000032c: 	movq	0x58(%rsp), %rax
    00000331: 	subq	%fs:0x28, %rax
    0000033a: 	jne	.Ltmp1862 # Offset: 826
    0000033c: 	addq	$0x68, %rsp
    00000340: 	popq	%rbx
    00000341: 	popq	%rbp
    00000342: 	popq	%r12
    00000344: 	popq	%r13
    00000346: 	popq	%r14
    00000348: 	popq	%r15
    0000034a: 	retq # Offset: 842
.Ltmp1845:
    0000034b: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp1846:
    00000354: 	movq	$0x0, 0x50(%rsp)
    0000035d: 	pxor	%xmm0, %xmm0
    00000361: 	movaps	%xmm0, 0x40(%rsp)
    00000366: 	jmp	.Ltmp1863 # Offset: 870
.Ltmp1860:
    0000036b: 	movq	-0x8(%rdx), %rax
    0000036f: 	addq	$0x200, %rax
    00000375: 	jmp	.Ltmp1864 # Offset: 885
.Ltmp1847:
    0000037a: 	pxor	%xmm4, %xmm4
    0000037e: 	movsd	%xmm4, 0x10(%rsp)
    00000384: 	jmp	.Ltmp1865 # Offset: 900
.Ltmp1862:
    00000389: 	callq	__stack_chk_fail@PLT # Offset: 905
    0000038e: 	endbr64
    00000392: 	movq	%rax, %rbp
    00000395: 	movq	0x40(%rsp), %rdi
    0000039a: 	movq	0x50(%rsp), %rsi
    0000039f: 	subq	%rdi, %rsi
    000003a2: 	testq	%rdi, %rdi
    000003a5: 	je	.Ltmp1866 # Offset: 933
    000003a7: 	callq	_ZdlPvm@PLT # Offset: 935
.Ltmp1866:
    000003ac: 	movq	%rbp, %rdi
    000003af: 	callq	_Unwind_Resume@PLT # Offset: 943
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_pushbackId14DoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0x14ac0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x14ac0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1867 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp1868 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp1869 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp1870 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp1871 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp1878:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp1872 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp1872:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp1873 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp1874 # Offset: 200
.Ltmp1876:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1868:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp1875 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp1875:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1867:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1873:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1877:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1876 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1874:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1877 # Offset: 392
.Ltmp1871:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp1879:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp1878 # Offset: 445
.Ltmp1870:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp1879 # Offset: 460
.Ltmp1869:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm"

Binary Function "_ZNSt6vectorIPSt12forward_listIdSaIdEESaIS3_EE17_M_default_appendEm" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0x14ca0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x14ca0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt12forward_listIdSaIdEESaIS3_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1880 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp1881 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp1882 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp1883 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp1884 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp1891:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp1885 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp1885:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp1886 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp1887 # Offset: 200
.Ltmp1889:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1881:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp1888 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp1888:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1880:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1886:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1890:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1889 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1887:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1890 # Offset: 392
.Ltmp1884:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp1892:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp1891 # Offset: 445
.Ltmp1883:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp1892 # Offset: 460
.Ltmp1882:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt12forward_listIdSaIdEESaIS3_EE17_M_default_appendEm"

Binary Function "_Z19test_duplicate_coreISt12forward_listIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0x14e80
  Size        : 0x36f
  MaxSize     : 0x370
  Offset      : 0x14e80
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt12forward_listIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x3, %rsi
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	subq	$0x78, %rsp
    00000016: 	movq	%rdx, 0x38(%rsp)
    0000001b: 	xorl	%edx, %edx
    0000001d: 	movq	%rdi, (%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x68(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	movabsq	$0x500000000, %rax
    0000003b: 	divq	%rsi
    0000003e: 	movq	%rax, 0x8(%rsp)
    00000043: 	cmpq	$0x3e8, %rax
    00000049: 	ja	.Ltmp1893 # Offset: 73
    0000004f: 	cmpq	$0x3, %rax
    00000053: 	ja	.Ltmp1894 # Offset: 83
    00000059: 	movq	$0x0, 0x60(%rsp)
    00000062: 	pxor	%xmm0, %xmm0
    00000066: 	movq	$0x4, 0x8(%rsp)
    0000006f: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp1909:
    00000074: 	movq	0x8(%rsp), %rbx
    00000079: 	leaq	0x50(%rsp), %rdi
    0000007e: 	movq	%rbx, %rsi
    00000081: 	callq	_ZNSt6vectorIPSt12forward_listIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 129
    00000086: 	movq	0x50(%rsp), %rcx
    0000008b: 	movl	iterations(%rip), %eax
    00000091: 	movq	%rcx, 0x18(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp1895 # Offset: 152
    0000009e: 	addq	$0x8, %rcx
    000000a2: 	movl	%ebx, 0x24(%rsp)
    000000a6: 	pxor	%xmm2, %xmm2
    000000aa: 	movq	%rcx, 0x28(%rsp)
    000000af: 	leaq	0x48(%rsp), %rcx
    000000b4: 	movl	$0x0, 0x20(%rsp)
    000000bc: 	movq	%rcx, 0x10(%rsp)
    000000c1: 	movsd	%xmm2, 0x30(%rsp)
.Ltmp1905:
    000000c7: 	movslq	0x20(%rsp), %rdx
    000000cc: 	movslq	%eax, %rcx
    000000cf: 	movq	%rdx, %rsi
    000000d2: 	addq	0x8(%rsp), %rdx
    000000d7: 	subl	%esi, %eax
    000000d9: 	cmpq	%rcx, %rdx
    000000dc: 	cmovbl	0x24(%rsp), %eax
    000000e1: 	movl	%eax, %ebx
    000000e3: 	callq	clock@PLT # Offset: 227
    000000e8: 	movq	0x18(%rsp), %r14
    000000ed: 	movq	0x28(%rsp), %rcx
    000000f2: 	movq	%rax, start_time(%rip)
    000000f9: 	leal	-0x1(%rbx), %eax
    000000fc: 	movq	%r14, %r12
    000000ff: 	leaq	(%rcx,%rax,8), %r15
.Ltmp1899:
    00000103: 	movl	$0x8, %edi
    00000108: 	callq	_Znwm@PLT # Offset: 264
    0000010d: 	movq	$0x0, (%rax)
    00000114: 	movq	%rax, %rbp
    00000117: 	movq	(%rsp), %rax
    0000011b: 	cmpq	%rax, %rbp
    0000011e: 	je	.Ltmp1896 # Offset: 286
    00000120: 	movq	$0x0, 0x48(%rsp)
    00000129: 	movq	(%rax), %rbx
    0000012c: 	movq	0x10(%rsp), %rax
    00000131: 	testq	%rbx, %rbx
    00000134: 	je	.Ltmp1896 # Offset: 308
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1897:
    00000140: 	movl	$0x10, %edi
    00000145: 	movq	%rax, %r13
    00000148: 	callq	_Znwm@PLT # Offset: 328
    0000014d: 	movsd	0x8(%rbx), %xmm0
    00000152: 	movq	$0x0, (%rax)
    00000159: 	movsd	%xmm0, 0x8(%rax)
    0000015e: 	movq	%rax, (%r13)
    00000162: 	movq	(%rbx), %rbx
    00000165: 	testq	%rbx, %rbx
    00000168: 	jne	.Ltmp1897 # Offset: 360
    0000016a: 	movq	0x48(%rsp), %rcx
    0000016f: 	movq	%rcx, %rax
    00000172: 	testq	%rcx, %rcx
    00000175: 	je	.Ltmp1896 # Offset: 373
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1898:
    00000180: 	movq	%rax, %rdx
    00000183: 	movq	(%rax), %rax
    00000186: 	testq	%rax, %rax
    00000189: 	jne	.Ltmp1898 # Offset: 393
    0000018b: 	movq	(%rbp), %rax
    0000018f: 	movq	%rax, (%rdx)
    00000192: 	movq	%rcx, (%rbp)
.Ltmp1896:
    00000196: 	movq	%rbp, (%r14)
    00000199: 	addq	$0x8, %r14
    0000019d: 	cmpq	%r15, %r14
    000001a0: 	jne	.Ltmp1899 # Offset: 416
    000001a6: 	callq	clock@PLT # Offset: 422
    000001ab: 	pxor	%xmm0, %xmm0
    000001af: 	movq	%rax, end_time(%rip)
    000001b6: 	subq	start_time(%rip), %rax
    000001bd: 	cvtsi2sd	%rax, %xmm0
    000001c2: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ca: 	addsd	0x30(%rsp), %xmm0
    000001d0: 	movsd	%xmm0, 0x30(%rsp)
    000001d6: 	jmp	.Ltmp1900 # Offset: 470
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1902:
    000001e0: 	movq	$0x0, (%r12)
    000001e8: 	addq	$0x8, %r12
    000001ec: 	cmpq	%r12, %r15
    000001ef: 	je	.Ltmp1901 # Offset: 495
.Ltmp1900:
    000001f1: 	movq	(%r12), %rbp
    000001f5: 	testq	%rbp, %rbp
    000001f8: 	je	.Ltmp1902 # Offset: 504
    000001fa: 	movq	(%rbp), %rbx
    000001fe: 	testq	%rbx, %rbx
    00000201: 	je	.Ltmp1903 # Offset: 513
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1904:
    00000208: 	movq	%rbx, %rdi
    0000020b: 	movq	(%rbx), %rbx
    0000020e: 	movl	$0x10, %esi
    00000213: 	callq	_ZdlPvm@PLT # Offset: 531
    00000218: 	testq	%rbx, %rbx
    0000021b: 	jne	.Ltmp1904 # Offset: 539
.Ltmp1903:
    0000021d: 	movl	$0x8, %esi
    00000222: 	movq	%rbp, %rdi
    00000225: 	callq	_ZdlPvm@PLT # Offset: 549
    0000022a: 	jmp	.Ltmp1902 # Offset: 554
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp1901:
    00000230: 	movl	0x8(%rsp), %ecx
    00000234: 	movl	iterations(%rip), %eax
    0000023a: 	addl	%ecx, 0x20(%rsp)
    0000023e: 	movl	0x20(%rsp), %ecx
    00000242: 	cmpl	%ecx, %eax
    00000244: 	jg	.Ltmp1905 # Offset: 580
.Ltmp1911:
    0000024a: 	movq	0x38(%rsp), %rdi
    0000024f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 591
    00000254: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000262: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000269: 	je	.Ltmp1906 # Offset: 617
.Ltmp1910:
    0000026f: 	movq	-0x20(%rax), %rdi
    00000273: 	movsd	0x30(%rsp), %xmm0
    00000279: 	callq	_Z13record_resultdPKc # Offset: 633
    0000027e: 	cmpq	$0x0, 0x18(%rsp)
    00000284: 	je	.Ltmp1907 # Offset: 644
    00000286: 	movq	0x68(%rsp), %rax
    0000028b: 	subq	%fs:0x28, %rax
    00000294: 	jne	.Ltmp1908 # Offset: 660
    0000029a: 	movq	0x60(%rsp), %rsi
    0000029f: 	movq	0x18(%rsp), %rdi
    000002a4: 	addq	$0x78, %rsp
    000002a8: 	popq	%rbx
    000002a9: 	popq	%rbp
    000002aa: 	subq	%rdi, %rsi
    000002ad: 	popq	%r12
    000002af: 	popq	%r13
    000002b1: 	popq	%r14
    000002b3: 	popq	%r15
    000002b5: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 693
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1893:
    000002c0: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp1894:
    000002c9: 	movq	$0x0, 0x60(%rsp)
    000002d2: 	pxor	%xmm0, %xmm0
    000002d6: 	movaps	%xmm0, 0x50(%rsp)
    000002db: 	jmp	.Ltmp1909 # Offset: 731
.Ltmp1907:
    000002e0: 	movq	0x68(%rsp), %rax
    000002e5: 	subq	%fs:0x28, %rax
    000002ee: 	jne	.Ltmp1908 # Offset: 750
    000002f0: 	addq	$0x78, %rsp
    000002f4: 	popq	%rbx
    000002f5: 	popq	%rbp
    000002f6: 	popq	%r12
    000002f8: 	popq	%r13
    000002fa: 	popq	%r14
    000002fc: 	popq	%r15
    000002fe: 	retq # Offset: 766
.Ltmp1906:
    000002ff: 	movq	-0x8(%rdx), %rax
    00000303: 	addq	$0x200, %rax
    00000309: 	jmp	.Ltmp1910 # Offset: 777
.Ltmp1895:
    0000030e: 	pxor	%xmm3, %xmm3
    00000312: 	movsd	%xmm3, 0x30(%rsp)
    00000318: 	jmp	.Ltmp1911 # Offset: 792
.Ltmp1908:
    0000031d: 	callq	__stack_chk_fail@PLT # Offset: 797
    00000322: 	endbr64
    00000326: 	movq	%rax, %rbp
    00000329: 	jmp	.Ltmp1912 # Offset: 809
    0000032b: 	endbr64
    0000032f: 	movq	%rax, %rbp
    00000332: 	jmp	.Ltmp1913 # Offset: 818
.Ltmp1912:
    00000334: 	movq	0x48(%rsp), %rdi
.Ltmp1914:
    00000339: 	testq	%rdi, %rdi
    0000033c: 	je	.Ltmp1913 # Offset: 828
    0000033e: 	movq	(%rdi), %rbx
    00000341: 	movl	$0x10, %esi
    00000346: 	callq	_ZdlPvm@PLT # Offset: 838
    0000034b: 	movq	%rbx, %rdi
    0000034e: 	jmp	.Ltmp1914 # Offset: 846
.Ltmp1913:
    00000350: 	movq	0x50(%rsp), %rdi
    00000355: 	movq	0x60(%rsp), %rsi
    0000035a: 	subq	%rdi, %rsi
    0000035d: 	testq	%rdi, %rdi
    00000360: 	je	.Ltmp1915 # Offset: 864
    00000362: 	callq	_ZdlPvm@PLT # Offset: 866
.Ltmp1915:
    00000367: 	movq	%rbp, %rdi
    0000036a: 	callq	_Unwind_Resume@PLT # Offset: 874
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt12forward_listIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_delete_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0x151f0
  Size        : 0x2ed
  MaxSize     : 0x2f0
  Offset      : 0x151f0
  Section     : .text
  Orc Section : .local.text._Z19test_delete_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rdi, %r15
    0000000c: 	pushq	%r14
    0000000e: 	subq	%rdi, %rcx
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rdx, 0x38(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x58(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	movabsq	$0x500000000, %rax
    0000003f: 	divq	%rcx
    00000042: 	cmpq	$0x3e8, %rax
    00000048: 	ja	.Ltmp1916 # Offset: 72
    0000004e: 	movq	%rax, %r14
    00000051: 	cmpq	$0x3, %rax
    00000055: 	ja	.Ltmp1917 # Offset: 85
    0000005b: 	movq	$0x0, 0x50(%rsp)
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	movl	$0x4, %r14d
    0000006e: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1931:
    00000073: 	leaq	0x40(%rsp), %rdi
    00000078: 	movq	%r14, %rsi
    0000007b: 	callq	_ZNSt6vectorIPSt12forward_listIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 123
    00000080: 	movq	0x40(%rsp), %rcx
    00000085: 	movl	iterations(%rip), %eax
    0000008b: 	movq	%rcx, 0x20(%rsp)
    00000090: 	testl	%eax, %eax
    00000092: 	jle	.Ltmp1918 # Offset: 146
    00000098: 	addq	$0x8, %rcx
    0000009c: 	movl	%r14d, 0x2c(%rsp)
    000000a1: 	pxor	%xmm2, %xmm2
    000000a5: 	movl	$0x0, 0x28(%rsp)
    000000ad: 	movq	%rcx, 0x30(%rsp)
    000000b2: 	movsd	%xmm2, 0x18(%rsp)
.Ltmp1927:
    000000b8: 	movslq	0x28(%rsp), %rdx
    000000bd: 	movslq	%eax, %rcx
    000000c0: 	movq	%rdx, %rsi
    000000c3: 	addq	%r14, %rdx
    000000c6: 	subl	%esi, %eax
    000000c8: 	cmpq	%rcx, %rdx
    000000cb: 	cmovbl	0x2c(%rsp), %eax
    000000d0: 	movq	0x30(%rsp), %rsi
    000000d5: 	movq	0x20(%rsp), %rcx
    000000da: 	subl	$0x1, %eax
    000000dd: 	leaq	(%rsi,%rax,8), %rax
    000000e1: 	movq	%rcx, 0x10(%rsp)
    000000e6: 	movq	%rcx, %r13
    000000e9: 	movq	%rax, 0x8(%rsp)
.Ltmp1921:
    000000ee: 	movl	$0x8, %edi
    000000f3: 	callq	_Znwm@PLT # Offset: 243
    000000f8: 	movq	$0x0, (%rax)
    000000ff: 	movq	%rax, %rbp
    00000102: 	movq	%r15, %rbx
    00000105: 	cmpq	%r15, %r12
    00000108: 	je	.Ltmp1919 # Offset: 264
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1920:
    00000110: 	movl	$0x10, %edi
    00000115: 	addq	$0x8, %rbx
    00000119: 	callq	_Znwm@PLT # Offset: 281
    0000011e: 	movq	(%rbp), %rdx
    00000122: 	movsd	-0x8(%rbx), %xmm0
    00000127: 	movq	%rax, (%rbp)
    0000012b: 	movq	%rdx, (%rax)
    0000012e: 	movsd	%xmm0, 0x8(%rax)
    00000133: 	cmpq	%rbx, %r12
    00000136: 	jne	.Ltmp1920 # Offset: 310
.Ltmp1919:
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	movq	%rbp, (%rax)
    00000140: 	addq	$0x8, %rax
    00000144: 	movq	%rax, 0x10(%rsp)
    00000149: 	cmpq	0x8(%rsp), %rax
    0000014e: 	jne	.Ltmp1921 # Offset: 334
    00000150: 	callq	clock@PLT # Offset: 336
    00000155: 	movq	%rax, start_time(%rip)
    0000015c: 	jmp	.Ltmp1922 # Offset: 348
    0000015e: 	nop # Size: 2
.Ltmp1924:
    00000160: 	movq	$0x0, (%r13)
    00000168: 	addq	$0x8, %r13
    0000016c: 	cmpq	%r13, 0x8(%rsp)
    00000171: 	je	.Ltmp1923 # Offset: 369
.Ltmp1922:
    00000173: 	movq	(%r13), %rbp
    00000177: 	testq	%rbp, %rbp
    0000017a: 	je	.Ltmp1924 # Offset: 378
    0000017c: 	movq	(%rbp), %rbx
    00000180: 	testq	%rbx, %rbx
    00000183: 	je	.Ltmp1925 # Offset: 387
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp1926:
    00000188: 	movq	%rbx, %rdi
    0000018b: 	movq	(%rbx), %rbx
    0000018e: 	movl	$0x10, %esi
    00000193: 	callq	_ZdlPvm@PLT # Offset: 403
    00000198: 	testq	%rbx, %rbx
    0000019b: 	jne	.Ltmp1926 # Offset: 411
.Ltmp1925:
    0000019d: 	movl	$0x8, %esi
    000001a2: 	movq	%rbp, %rdi
    000001a5: 	callq	_ZdlPvm@PLT # Offset: 421
    000001aa: 	jmp	.Ltmp1924 # Offset: 426
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp1923:
    000001b0: 	callq	clock@PLT # Offset: 432
    000001b5: 	pxor	%xmm0, %xmm0
    000001b9: 	addl	%r14d, 0x28(%rsp)
    000001be: 	movl	0x28(%rsp), %ecx
    000001c2: 	movq	%rax, end_time(%rip)
    000001c9: 	subq	start_time(%rip), %rax
    000001d0: 	cvtsi2sd	%rax, %xmm0
    000001d5: 	divsd	DATAat0x53788(%rip), %xmm0
    000001dd: 	addsd	0x18(%rsp), %xmm0
    000001e3: 	movl	iterations(%rip), %eax
    000001e9: 	movsd	%xmm0, 0x18(%rsp)
    000001ef: 	cmpl	%ecx, %eax
    000001f1: 	jg	.Ltmp1927 # Offset: 497
.Ltmp1933:
    000001f7: 	movq	0x38(%rsp), %rdi
    000001fc: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 508
    00000201: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000208: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000020f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000216: 	je	.Ltmp1928 # Offset: 534
.Ltmp1932:
    0000021c: 	movq	-0x20(%rax), %rdi
    00000220: 	movsd	0x18(%rsp), %xmm0
    00000226: 	callq	_Z13record_resultdPKc # Offset: 550
    0000022b: 	cmpq	$0x0, 0x20(%rsp)
    00000231: 	je	.Ltmp1929 # Offset: 561
    00000233: 	movq	0x58(%rsp), %rax
    00000238: 	subq	%fs:0x28, %rax
    00000241: 	jne	.Ltmp1930 # Offset: 577
    00000243: 	movq	0x50(%rsp), %rsi
    00000248: 	movq	0x20(%rsp), %rdi
    0000024d: 	addq	$0x68, %rsp
    00000251: 	popq	%rbx
    00000252: 	popq	%rbp
    00000253: 	subq	%rdi, %rsi
    00000256: 	popq	%r12
    00000258: 	popq	%r13
    0000025a: 	popq	%r14
    0000025c: 	popq	%r15
    0000025e: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 606
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1916:
    00000268: 	movl	$0x3e8, %r14d
.Ltmp1917:
    0000026e: 	movq	$0x0, 0x50(%rsp)
    00000277: 	pxor	%xmm0, %xmm0
    0000027b: 	movaps	%xmm0, 0x40(%rsp)
    00000280: 	jmp	.Ltmp1931 # Offset: 640
.Ltmp1929:
    00000285: 	movq	0x58(%rsp), %rax
    0000028a: 	subq	%fs:0x28, %rax
    00000293: 	jne	.Ltmp1930 # Offset: 659
    00000295: 	addq	$0x68, %rsp
    00000299: 	popq	%rbx
    0000029a: 	popq	%rbp
    0000029b: 	popq	%r12
    0000029d: 	popq	%r13
    0000029f: 	popq	%r14
    000002a1: 	popq	%r15
    000002a3: 	retq # Offset: 675
.Ltmp1928:
    000002a4: 	movq	-0x8(%rdx), %rax
    000002a8: 	addq	$0x200, %rax
    000002ae: 	jmp	.Ltmp1932 # Offset: 686
.Ltmp1918:
    000002b3: 	pxor	%xmm3, %xmm3
    000002b7: 	movsd	%xmm3, 0x18(%rsp)
    000002bd: 	jmp	.Ltmp1933 # Offset: 701
.Ltmp1930:
    000002c2: 	callq	__stack_chk_fail@PLT # Offset: 706
    000002c7: 	endbr64
    000002cb: 	movq	%rax, %rbp
    000002ce: 	movq	0x40(%rsp), %rdi
    000002d3: 	movq	0x50(%rsp), %rsi
    000002d8: 	subq	%rdi, %rsi
    000002db: 	testq	%rdi, %rdi
    000002de: 	je	.Ltmp1934 # Offset: 734
    000002e0: 	callq	_ZdlPvm@PLT # Offset: 736
.Ltmp1934:
    000002e5: 	movq	%rbp, %rdi
    000002e8: 	callq	_Unwind_Resume@PLT # Offset: 744
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_delete_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z21test_clearall_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0x154e0
  Size        : 0x32d
  MaxSize     : 0x330
  Offset      : 0x154e0
  Section     : .text
  Orc Section : .local.text._Z21test_clearall_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x30(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	cmpq	$0x3e8, %rax
    0000004a: 	ja	.Ltmp1935 # Offset: 74
    00000050: 	movq	%rax, %r14
    00000053: 	cmpq	$0x3, %rax
    00000057: 	ja	.Ltmp1936 # Offset: 87
    0000005d: 	movq	$0x0, 0x50(%rsp)
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movl	$0x4, %r14d
    00000070: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1953:
    00000075: 	leaq	0x40(%rsp), %rdi
    0000007a: 	movq	%r14, %rsi
    0000007d: 	callq	_ZNSt6vectorIPSt12forward_listIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 125
    00000082: 	movq	0x40(%rsp), %rcx
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movq	%rcx, 0x18(%rsp)
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp1937 # Offset: 148
    0000009a: 	addq	$0x8, %rcx
    0000009e: 	movl	%r14d, 0x24(%rsp)
    000000a3: 	pxor	%xmm1, %xmm1
    000000a7: 	movl	$0x0, 0x20(%rsp)
    000000af: 	movq	%rcx, 0x28(%rsp)
    000000b4: 	movsd	%xmm1, 0x38(%rsp)
.Ltmp1949:
    000000ba: 	movslq	0x20(%rsp), %rdx
    000000bf: 	movslq	%eax, %rcx
    000000c2: 	movq	%rdx, %rsi
    000000c5: 	addq	%r14, %rdx
    000000c8: 	subl	%esi, %eax
    000000ca: 	cmpq	%rcx, %rdx
    000000cd: 	cmovbl	0x24(%rsp), %eax
    000000d2: 	movq	0x28(%rsp), %rdx
    000000d7: 	movq	0x18(%rsp), %rcx
    000000dc: 	subl	$0x1, %eax
    000000df: 	leaq	(%rdx,%rax,8), %rax
    000000e3: 	movq	%rcx, %r13
    000000e6: 	movq	%rcx, %r15
    000000e9: 	movq	%rax, 0x8(%rsp)
.Ltmp1940:
    000000ee: 	movl	$0x8, %edi
    000000f3: 	callq	_Znwm@PLT # Offset: 243
    000000f8: 	movq	$0x0, (%rax)
    000000ff: 	movq	%rax, %rbp
    00000102: 	movq	0x10(%rsp), %rax
    00000107: 	movq	%rax, %rbx
    0000010a: 	cmpq	%rax, %r12
    0000010d: 	je	.Ltmp1938 # Offset: 269
    0000010f: 	nop # Size: 1
.Ltmp1939:
    00000110: 	movl	$0x10, %edi
    00000115: 	addq	$0x8, %rbx
    00000119: 	callq	_Znwm@PLT # Offset: 281
    0000011e: 	movq	(%rbp), %rdx
    00000122: 	movsd	-0x8(%rbx), %xmm0
    00000127: 	movq	%rax, (%rbp)
    0000012b: 	movq	%rdx, (%rax)
    0000012e: 	movsd	%xmm0, 0x8(%rax)
    00000133: 	cmpq	%rbx, %r12
    00000136: 	jne	.Ltmp1939 # Offset: 310
.Ltmp1938:
    00000138: 	movq	%r15, %rax
    0000013b: 	movq	%rbp, (%r15)
    0000013e: 	addq	$0x8, %rax
    00000142: 	movq	%rax, %r15
    00000145: 	cmpq	0x8(%rsp), %rax
    0000014a: 	jne	.Ltmp1940 # Offset: 330
    0000014c: 	callq	clock@PLT # Offset: 332
    00000151: 	movq	0x18(%rsp), %rbx
    00000156: 	movq	%rax, start_time(%rip)
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp1943:
    00000160: 	movq	(%rbx), %rbp
    00000163: 	movq	(%rbp), %r15
    00000167: 	testq	%r15, %r15
    0000016a: 	je	.Ltmp1941 # Offset: 362
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp1942:
    00000170: 	movq	%r15, %rdi
    00000173: 	movq	(%r15), %r15
    00000176: 	movl	$0x10, %esi
    0000017b: 	callq	_ZdlPvm@PLT # Offset: 379
    00000180: 	testq	%r15, %r15
    00000183: 	jne	.Ltmp1942 # Offset: 387
.Ltmp1941:
    00000185: 	movq	$0x0, (%rbp)
    0000018d: 	addq	$0x8, %rbx
    00000191: 	cmpq	0x8(%rsp), %rbx
    00000196: 	jne	.Ltmp1943 # Offset: 406
    00000198: 	callq	clock@PLT # Offset: 408
    0000019d: 	pxor	%xmm0, %xmm0
    000001a1: 	movq	%rax, end_time(%rip)
    000001a8: 	subq	start_time(%rip), %rax
    000001af: 	cvtsi2sd	%rax, %xmm0
    000001b4: 	divsd	DATAat0x53788(%rip), %xmm0
    000001bc: 	addsd	0x38(%rsp), %xmm0
    000001c2: 	movsd	%xmm0, 0x38(%rsp)
    000001c8: 	jmp	.Ltmp1944 # Offset: 456
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1946:
    000001d0: 	movq	$0x0, (%r13)
    000001d8: 	addq	$0x8, %r13
    000001dc: 	cmpq	%r13, 0x8(%rsp)
    000001e1: 	je	.Ltmp1945 # Offset: 481
.Ltmp1944:
    000001e3: 	movq	(%r13), %rbp
    000001e7: 	testq	%rbp, %rbp
    000001ea: 	je	.Ltmp1946 # Offset: 490
    000001ec: 	movq	(%rbp), %rbx
    000001f0: 	testq	%rbx, %rbx
    000001f3: 	je	.Ltmp1947 # Offset: 499
    000001f5: 	nopl	(%rax) # Size: 3
.Ltmp1948:
    000001f8: 	movq	%rbx, %rdi
    000001fb: 	movq	(%rbx), %rbx
    000001fe: 	movl	$0x10, %esi
    00000203: 	callq	_ZdlPvm@PLT # Offset: 515
    00000208: 	testq	%rbx, %rbx
    0000020b: 	jne	.Ltmp1948 # Offset: 523
.Ltmp1947:
    0000020d: 	movl	$0x8, %esi
    00000212: 	movq	%rbp, %rdi
    00000215: 	callq	_ZdlPvm@PLT # Offset: 533
    0000021a: 	jmp	.Ltmp1946 # Offset: 538
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp1945:
    00000220: 	addl	%r14d, 0x20(%rsp)
    00000225: 	movl	iterations(%rip), %eax
    0000022b: 	movl	0x20(%rsp), %ecx
    0000022f: 	cmpl	%ecx, %eax
    00000231: 	jg	.Ltmp1949 # Offset: 561
.Ltmp1955:
    00000237: 	movq	0x30(%rsp), %rdi
    0000023c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 572
    00000241: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000248: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000024f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000256: 	je	.Ltmp1950 # Offset: 598
.Ltmp1954:
    0000025c: 	movq	-0x20(%rax), %rdi
    00000260: 	movsd	0x38(%rsp), %xmm0
    00000266: 	callq	_Z13record_resultdPKc # Offset: 614
    0000026b: 	cmpq	$0x0, 0x18(%rsp)
    00000271: 	je	.Ltmp1951 # Offset: 625
    00000273: 	movq	0x58(%rsp), %rax
    00000278: 	subq	%fs:0x28, %rax
    00000281: 	jne	.Ltmp1952 # Offset: 641
    00000283: 	movq	0x50(%rsp), %rsi
    00000288: 	movq	0x18(%rsp), %rdi
    0000028d: 	addq	$0x68, %rsp
    00000291: 	popq	%rbx
    00000292: 	popq	%rbp
    00000293: 	subq	%rdi, %rsi
    00000296: 	popq	%r12
    00000298: 	popq	%r13
    0000029a: 	popq	%r14
    0000029c: 	popq	%r15
    0000029e: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 670
    000002a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1935:
    000002a8: 	movl	$0x3e8, %r14d
.Ltmp1936:
    000002ae: 	movq	$0x0, 0x50(%rsp)
    000002b7: 	pxor	%xmm0, %xmm0
    000002bb: 	movaps	%xmm0, 0x40(%rsp)
    000002c0: 	jmp	.Ltmp1953 # Offset: 704
.Ltmp1951:
    000002c5: 	movq	0x58(%rsp), %rax
    000002ca: 	subq	%fs:0x28, %rax
    000002d3: 	jne	.Ltmp1952 # Offset: 723
    000002d5: 	addq	$0x68, %rsp
    000002d9: 	popq	%rbx
    000002da: 	popq	%rbp
    000002db: 	popq	%r12
    000002dd: 	popq	%r13
    000002df: 	popq	%r14
    000002e1: 	popq	%r15
    000002e3: 	retq # Offset: 739
.Ltmp1950:
    000002e4: 	movq	-0x8(%rdx), %rax
    000002e8: 	addq	$0x200, %rax
    000002ee: 	jmp	.Ltmp1954 # Offset: 750
.Ltmp1937:
    000002f3: 	pxor	%xmm3, %xmm3
    000002f7: 	movsd	%xmm3, 0x38(%rsp)
    000002fd: 	jmp	.Ltmp1955 # Offset: 765
.Ltmp1952:
    00000302: 	callq	__stack_chk_fail@PLT # Offset: 770
    00000307: 	endbr64
    0000030b: 	movq	%rax, %rbp
    0000030e: 	movq	0x40(%rsp), %rdi
    00000313: 	movq	0x50(%rsp), %rsi
    00000318: 	subq	%rdi, %rsi
    0000031b: 	testq	%rdi, %rdi
    0000031e: 	je	.Ltmp1956 # Offset: 798
    00000320: 	callq	_ZdlPvm@PLT # Offset: 800
.Ltmp1956:
    00000325: 	movq	%rbp, %rdi
    00000328: 	callq	_Unwind_Resume@PLT # Offset: 808
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_clearall_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z21test_popfront_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x15810
  Size        : 0x348
  MaxSize     : 0x350
  Offset      : 0x15810
  Section     : .text
  Orc Section : .local.text._Z21test_popfront_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	movq	%rdi, %r14
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rdx, 0x30(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x58(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	movabsq	$0x500000000, %rax
    0000003f: 	divq	%rcx
    00000042: 	movq	%rax, 0x10(%rsp)
    00000047: 	cmpq	$0x3e8, %rax
    0000004d: 	ja	.Ltmp1957 # Offset: 77
    00000053: 	cmpq	$0x3, %rax
    00000057: 	ja	.Ltmp1958 # Offset: 87
    0000005d: 	movq	$0x0, 0x50(%rsp)
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movq	$0x4, 0x10(%rsp)
    00000073: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp1975:
    00000078: 	movq	0x10(%rsp), %rbx
    0000007d: 	leaq	0x40(%rsp), %rdi
    00000082: 	movq	%rbx, %rsi
    00000085: 	callq	_ZNSt6vectorIPSt12forward_listIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 133
    0000008a: 	movq	0x40(%rsp), %rcx
    0000008f: 	movl	iterations(%rip), %eax
    00000095: 	movq	%rcx, 0x18(%rsp)
    0000009a: 	testl	%eax, %eax
    0000009c: 	jle	.Ltmp1959 # Offset: 156
    000000a2: 	addq	$0x8, %rcx
    000000a6: 	movl	%ebx, 0x24(%rsp)
    000000aa: 	pxor	%xmm1, %xmm1
    000000ae: 	movl	$0x0, 0x20(%rsp)
    000000b6: 	movq	%rcx, 0x28(%rsp)
    000000bb: 	movsd	%xmm1, 0x38(%rsp)
.Ltmp1971:
    000000c1: 	movslq	0x20(%rsp), %rdx
    000000c6: 	movslq	%eax, %rcx
    000000c9: 	movq	%rdx, %rsi
    000000cc: 	addq	0x10(%rsp), %rdx
    000000d1: 	subl	%esi, %eax
    000000d3: 	cmpq	%rcx, %rdx
    000000d6: 	cmovbl	0x24(%rsp), %eax
    000000db: 	movq	0x28(%rsp), %rsi
    000000e0: 	movq	0x18(%rsp), %rcx
    000000e5: 	subl	$0x1, %eax
    000000e8: 	leaq	(%rsi,%rax,8), %rax
    000000ec: 	movq	%rcx, %r13
    000000ef: 	movq	%rcx, %r15
    000000f2: 	movq	%rax, 0x8(%rsp)
.Ltmp1962:
    000000f7: 	movl	$0x8, %edi
    000000fc: 	callq	_Znwm@PLT # Offset: 252
    00000101: 	movq	$0x0, (%rax)
    00000108: 	movq	%rax, %r12
    0000010b: 	movq	%r14, %rbx
    0000010e: 	cmpq	%r14, %rbp
    00000111: 	je	.Ltmp1960 # Offset: 273
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1961:
    00000118: 	movl	$0x10, %edi
    0000011d: 	addq	$0x8, %rbx
    00000121: 	callq	_Znwm@PLT # Offset: 289
    00000126: 	movq	(%r12), %rdx
    0000012a: 	movsd	-0x8(%rbx), %xmm0
    0000012f: 	movq	%rax, (%r12)
    00000133: 	movq	%rdx, (%rax)
    00000136: 	movsd	%xmm0, 0x8(%rax)
    0000013b: 	cmpq	%rbx, %rbp
    0000013e: 	jne	.Ltmp1961 # Offset: 318
.Ltmp1960:
    00000140: 	movq	%r15, %rax
    00000143: 	movq	%r12, (%r15)
    00000146: 	addq	$0x8, %rax
    0000014a: 	movq	%rax, %r15
    0000014d: 	cmpq	0x8(%rsp), %rax
    00000152: 	jne	.Ltmp1962 # Offset: 338
    00000154: 	callq	clock@PLT # Offset: 340
    00000159: 	movq	%rax, start_time(%rip)
    00000160: 	cmpq	%r14, %rbp
    00000163: 	je	.Ltmp1963 # Offset: 355
    00000165: 	movq	0x18(%rsp), %rbx
    0000016a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1965:
    00000170: 	movq	(%rbx), %r15
    00000173: 	movq	%r14, %r12
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1964:
    00000180: 	movq	(%r15), %rdi
    00000183: 	movl	$0x10, %esi
    00000188: 	addq	$0x8, %r12
    0000018c: 	movq	(%rdi), %rdx
    0000018f: 	movq	%rdx, (%r15)
    00000192: 	callq	_ZdlPvm@PLT # Offset: 402
    00000197: 	cmpq	%r12, %rbp
    0000019a: 	jne	.Ltmp1964 # Offset: 410
    0000019c: 	addq	$0x8, %rbx
    000001a0: 	cmpq	%rbx, 0x8(%rsp)
    000001a5: 	jne	.Ltmp1965 # Offset: 421
.Ltmp1963:
    000001a7: 	callq	clock@PLT # Offset: 423
    000001ac: 	pxor	%xmm0, %xmm0
    000001b0: 	movq	%rax, end_time(%rip)
    000001b7: 	subq	start_time(%rip), %rax
    000001be: 	cvtsi2sd	%rax, %xmm0
    000001c3: 	divsd	DATAat0x53788(%rip), %xmm0
    000001cb: 	addsd	0x38(%rsp), %xmm0
    000001d1: 	movsd	%xmm0, 0x38(%rsp)
    000001d7: 	jmp	.Ltmp1966 # Offset: 471
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1968:
    000001e0: 	movq	$0x0, (%r13)
    000001e8: 	addq	$0x8, %r13
    000001ec: 	cmpq	%r13, 0x8(%rsp)
    000001f1: 	je	.Ltmp1967 # Offset: 497
.Ltmp1966:
    000001f3: 	movq	(%r13), %r12
    000001f7: 	testq	%r12, %r12
    000001fa: 	je	.Ltmp1968 # Offset: 506
    000001fc: 	movq	(%r12), %rbx
    00000200: 	testq	%rbx, %rbx
    00000203: 	je	.Ltmp1969 # Offset: 515
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp1970:
    00000208: 	movq	%rbx, %rdi
    0000020b: 	movq	(%rbx), %rbx
    0000020e: 	movl	$0x10, %esi
    00000213: 	callq	_ZdlPvm@PLT # Offset: 531
    00000218: 	testq	%rbx, %rbx
    0000021b: 	jne	.Ltmp1970 # Offset: 539
.Ltmp1969:
    0000021d: 	movl	$0x8, %esi
    00000222: 	movq	%r12, %rdi
    00000225: 	callq	_ZdlPvm@PLT # Offset: 549
    0000022a: 	jmp	.Ltmp1968 # Offset: 554
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp1967:
    00000230: 	movl	0x10(%rsp), %ecx
    00000234: 	movl	iterations(%rip), %eax
    0000023a: 	addl	%ecx, 0x20(%rsp)
    0000023e: 	movl	0x20(%rsp), %ecx
    00000242: 	cmpl	%ecx, %eax
    00000244: 	jg	.Ltmp1971 # Offset: 580
.Ltmp1977:
    0000024a: 	movq	0x30(%rsp), %rdi
    0000024f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 591
    00000254: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000262: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000269: 	je	.Ltmp1972 # Offset: 617
.Ltmp1976:
    0000026f: 	movq	-0x20(%rax), %rdi
    00000273: 	movsd	0x38(%rsp), %xmm0
    00000279: 	callq	_Z13record_resultdPKc # Offset: 633
    0000027e: 	cmpq	$0x0, 0x18(%rsp)
    00000284: 	je	.Ltmp1973 # Offset: 644
    00000286: 	movq	0x58(%rsp), %rax
    0000028b: 	subq	%fs:0x28, %rax
    00000294: 	jne	.Ltmp1974 # Offset: 660
    0000029a: 	movq	0x50(%rsp), %rsi
    0000029f: 	movq	0x18(%rsp), %rdi
    000002a4: 	addq	$0x68, %rsp
    000002a8: 	popq	%rbx
    000002a9: 	popq	%rbp
    000002aa: 	subq	%rdi, %rsi
    000002ad: 	popq	%r12
    000002af: 	popq	%r13
    000002b1: 	popq	%r14
    000002b3: 	popq	%r15
    000002b5: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 693
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1957:
    000002c0: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp1958:
    000002c9: 	movq	$0x0, 0x50(%rsp)
    000002d2: 	pxor	%xmm0, %xmm0
    000002d6: 	movaps	%xmm0, 0x40(%rsp)
    000002db: 	jmp	.Ltmp1975 # Offset: 731
.Ltmp1973:
    000002e0: 	movq	0x58(%rsp), %rax
    000002e5: 	subq	%fs:0x28, %rax
    000002ee: 	jne	.Ltmp1974 # Offset: 750
    000002f0: 	addq	$0x68, %rsp
    000002f4: 	popq	%rbx
    000002f5: 	popq	%rbp
    000002f6: 	popq	%r12
    000002f8: 	popq	%r13
    000002fa: 	popq	%r14
    000002fc: 	popq	%r15
    000002fe: 	retq # Offset: 766
.Ltmp1972:
    000002ff: 	movq	-0x8(%rdx), %rax
    00000303: 	addq	$0x200, %rax
    00000309: 	jmp	.Ltmp1976 # Offset: 777
.Ltmp1959:
    0000030e: 	pxor	%xmm3, %xmm3
    00000312: 	movsd	%xmm3, 0x38(%rsp)
    00000318: 	jmp	.Ltmp1977 # Offset: 792
.Ltmp1974:
    0000031d: 	callq	__stack_chk_fail@PLT # Offset: 797
    00000322: 	endbr64
    00000326: 	movq	%rax, %rbp
    00000329: 	movq	0x40(%rsp), %rdi
    0000032e: 	movq	0x50(%rsp), %rsi
    00000333: 	subq	%rdi, %rsi
    00000336: 	testq	%rdi, %rdi
    00000339: 	je	.Ltmp1978 # Offset: 825
    0000033b: 	callq	_ZdlPvm@PLT # Offset: 827
.Ltmp1978:
    00000340: 	movq	%rbp, %rdi
    00000343: 	callq	_Unwind_Resume@PLT # Offset: 835
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_popfront_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_pushfrontIdSt12forward_listIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x15b60
  Size        : 0x377
  MaxSize     : 0x380
  Offset      : 0x15b60
  Section     : .text
  Orc Section : .local.text._Z14test_pushfrontIdSt12forward_listIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	xorl	%ebx, %ebx
    00000016: 	subq	$0x78, %rsp
    0000001a: 	movq	%rdx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x68(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp1979 # Offset: 67
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1980:
    00000048: 	movl	$0x10, %edi
    0000004d: 	addl	$0x1, %ebx
    00000050: 	callq	_Znwm@PLT # Offset: 80
    00000055: 	movl	$0x10, %esi
    0000005a: 	movq	%rax, %rdi
    0000005d: 	callq	_ZdlPvm@PLT # Offset: 93
    00000062: 	cmpl	%ebx, iterations(%rip)
    00000068: 	jg	.Ltmp1980 # Offset: 104
.Ltmp1979:
    0000006a: 	callq	clock@PLT # Offset: 106
    0000006f: 	movq	%r12, %rcx
    00000072: 	xorl	%edx, %edx
    00000074: 	movq	%rax, 0x38(%rsp)
    00000079: 	subq	%r14, %rcx
    0000007c: 	movq	%rax, end_time(%rip)
    00000083: 	movq	start_time(%rip), %rax
    0000008a: 	movq	%rax, 0x40(%rsp)
    0000008f: 	movabsq	$0x500000000, %rax
    00000099: 	divq	%rcx
    0000009c: 	movq	%rax, %r15
    0000009f: 	cmpq	$0x3e8, %rax
    000000a5: 	ja	.Ltmp1981 # Offset: 165
    000000ab: 	cmpq	$0x3, %rax
    000000af: 	ja	.Ltmp1982 # Offset: 175
    000000b5: 	movq	$0x0, 0x60(%rsp)
    000000be: 	pxor	%xmm0, %xmm0
    000000c2: 	movl	$0x4, %r15d
    000000c8: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp1992:
    000000cd: 	leaq	0x50(%rsp), %rdi
    000000d2: 	movq	%r15, %rsi
    000000d5: 	callq	_ZNSt6vectorIPSt12forward_listIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 213
    000000da: 	movq	0x50(%rsp), %rcx
    000000df: 	movl	iterations(%rip), %eax
    000000e5: 	movq	%rcx, 0x20(%rsp)
    000000ea: 	testl	%eax, %eax
    000000ec: 	jle	.Ltmp1983 # Offset: 236
    000000f2: 	addq	$0x8, %rcx
    000000f6: 	movl	%r15d, 0x2c(%rsp)
    000000fb: 	pxor	%xmm2, %xmm2
    000000ff: 	movl	$0x0, 0x28(%rsp)
    00000107: 	movq	%rcx, 0x30(%rsp)
    0000010c: 	movsd	%xmm2, 0x48(%rsp)
.Ltmp1993:
    00000112: 	movslq	0x28(%rsp), %rdx
    00000117: 	movslq	%eax, %rcx
    0000011a: 	movq	%rdx, %rsi
    0000011d: 	addq	%r15, %rdx
    00000120: 	subl	%esi, %eax
    00000122: 	cmpq	%rcx, %rdx
    00000125: 	cmovbl	0x2c(%rsp), %eax
    0000012a: 	movl	%eax, %ebx
    0000012c: 	callq	clock@PLT # Offset: 300
    00000131: 	movq	0x30(%rsp), %rsi
    00000136: 	movq	0x20(%rsp), %rcx
    0000013b: 	movq	%rax, start_time(%rip)
    00000142: 	leal	-0x1(%rbx), %eax
    00000145: 	leaq	(%rsi,%rax,8), %rax
    00000149: 	movq	%rcx, 0x8(%rsp)
    0000014e: 	movq	%rcx, %r13
    00000151: 	movq	%rax, 0x10(%rsp)
.Ltmp1986:
    00000156: 	movl	$0x8, %edi
    0000015b: 	callq	_Znwm@PLT # Offset: 347
    00000160: 	movq	$0x0, (%rax)
    00000167: 	movq	%rax, %rbp
    0000016a: 	movq	%r14, %rbx
    0000016d: 	cmpq	%r14, %r12
    00000170: 	je	.Ltmp1984 # Offset: 368
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1985:
    00000178: 	movl	$0x10, %edi
    0000017d: 	addq	$0x8, %rbx
    00000181: 	callq	_Znwm@PLT # Offset: 385
    00000186: 	movq	(%rbp), %rdx
    0000018a: 	movsd	-0x8(%rbx), %xmm0
    0000018f: 	movq	%rax, (%rbp)
    00000193: 	movq	%rdx, (%rax)
    00000196: 	movsd	%xmm0, 0x8(%rax)
    0000019b: 	cmpq	%rbx, %r12
    0000019e: 	jne	.Ltmp1985 # Offset: 414
.Ltmp1984:
    000001a0: 	movq	0x8(%rsp), %rax
    000001a5: 	movq	%rbp, (%rax)
    000001a8: 	addq	$0x8, %rax
    000001ac: 	movq	%rax, 0x8(%rsp)
    000001b1: 	cmpq	%rax, 0x10(%rsp)
    000001b6: 	jne	.Ltmp1986 # Offset: 438
    000001b8: 	callq	clock@PLT # Offset: 440
    000001bd: 	pxor	%xmm0, %xmm0
    000001c1: 	movq	%r12, 0x8(%rsp)
    000001c6: 	movq	0x10(%rsp), %rbx
    000001cb: 	movq	%rax, end_time(%rip)
    000001d2: 	subq	start_time(%rip), %rax
    000001d9: 	cvtsi2sd	%rax, %xmm0
    000001de: 	divsd	DATAat0x53788(%rip), %xmm0
    000001e6: 	addsd	0x48(%rsp), %xmm0
    000001ec: 	movsd	%xmm0, 0x48(%rsp)
    000001f2: 	jmp	.Ltmp1987 # Offset: 498
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp1989:
    000001f8: 	movq	$0x0, (%r13)
    00000200: 	addq	$0x8, %r13
    00000204: 	cmpq	%r13, %rbx
    00000207: 	je	.Ltmp1988 # Offset: 519
.Ltmp1987:
    00000209: 	movq	(%r13), %rbp
    0000020d: 	testq	%rbp, %rbp
    00000210: 	je	.Ltmp1989 # Offset: 528
    00000212: 	movq	(%rbp), %r12
    00000216: 	testq	%r12, %r12
    00000219: 	je	.Ltmp1990 # Offset: 537
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1991:
    00000220: 	movq	%r12, %rdi
    00000223: 	movq	(%r12), %r12
    00000227: 	movl	$0x10, %esi
    0000022c: 	callq	_ZdlPvm@PLT # Offset: 556
    00000231: 	testq	%r12, %r12
    00000234: 	jne	.Ltmp1991 # Offset: 564
.Ltmp1990:
    00000236: 	movl	$0x8, %esi
    0000023b: 	movq	%rbp, %rdi
    0000023e: 	callq	_ZdlPvm@PLT # Offset: 574
    00000243: 	jmp	.Ltmp1989 # Offset: 579
.Ltmp1981:
    00000245: 	movl	$0x3e8, %r15d
.Ltmp1982:
    0000024b: 	movq	$0x0, 0x60(%rsp)
    00000254: 	pxor	%xmm0, %xmm0
    00000258: 	movaps	%xmm0, 0x50(%rsp)
    0000025d: 	jmp	.Ltmp1992 # Offset: 605
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1988:
    00000268: 	addl	%r15d, 0x28(%rsp)
    0000026d: 	movl	iterations(%rip), %eax
    00000273: 	movl	0x28(%rsp), %ecx
    00000277: 	movq	0x8(%rsp), %r12
    0000027c: 	cmpl	%ecx, %eax
    0000027e: 	jg	.Ltmp1993 # Offset: 638
.Ltmp1997:
    00000284: 	movq	0x18(%rsp), %rdi
    00000289: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 649
    0000028e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000295: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000029c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a3: 	je	.Ltmp1994 # Offset: 675
.Ltmp1998:
    000002a9: 	movsd	0x48(%rsp), %xmm0
    000002af: 	movq	-0x20(%rax), %rdi
    000002b3: 	pxor	%xmm1, %xmm1
    000002b7: 	movq	0x38(%rsp), %rax
    000002bc: 	subq	0x40(%rsp), %rax
    000002c1: 	cvtsi2sd	%rax, %xmm1
    000002c6: 	divsd	DATAat0x53788(%rip), %xmm1
    000002ce: 	subsd	%xmm1, %xmm0
    000002d2: 	callq	_Z13record_resultdPKc # Offset: 722
    000002d7: 	cmpq	$0x0, 0x20(%rsp)
    000002dd: 	je	.Ltmp1995 # Offset: 733
    000002df: 	movq	0x68(%rsp), %rax
    000002e4: 	subq	%fs:0x28, %rax
    000002ed: 	jne	.Ltmp1996 # Offset: 749
    000002ef: 	movq	0x60(%rsp), %rsi
    000002f4: 	movq	0x20(%rsp), %rdi
    000002f9: 	addq	$0x78, %rsp
    000002fd: 	popq	%rbx
    000002fe: 	popq	%rbp
    000002ff: 	subq	%rdi, %rsi
    00000302: 	popq	%r12
    00000304: 	popq	%r13
    00000306: 	popq	%r14
    00000308: 	popq	%r15
    0000030a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 778
.Ltmp1995:
    0000030f: 	movq	0x68(%rsp), %rax
    00000314: 	subq	%fs:0x28, %rax
    0000031d: 	jne	.Ltmp1996 # Offset: 797
    0000031f: 	addq	$0x78, %rsp
    00000323: 	popq	%rbx
    00000324: 	popq	%rbp
    00000325: 	popq	%r12
    00000327: 	popq	%r13
    00000329: 	popq	%r14
    0000032b: 	popq	%r15
    0000032d: 	retq # Offset: 813
.Ltmp1983:
    0000032e: 	pxor	%xmm4, %xmm4
    00000332: 	movsd	%xmm4, 0x48(%rsp)
    00000338: 	jmp	.Ltmp1997 # Offset: 824
.Ltmp1994:
    0000033d: 	movq	-0x8(%rdx), %rax
    00000341: 	addq	$0x200, %rax
    00000347: 	jmp	.Ltmp1998 # Offset: 839
.Ltmp1996:
    0000034c: 	callq	__stack_chk_fail@PLT # Offset: 844
    00000351: 	endbr64
    00000355: 	movq	%rax, %rbp
    00000358: 	movq	0x50(%rsp), %rdi
    0000035d: 	movq	0x60(%rsp), %rsi
    00000362: 	subq	%rdi, %rsi
    00000365: 	testq	%rdi, %rdi
    00000368: 	je	.Ltmp1999 # Offset: 872
    0000036a: 	callq	_ZdlPvm@PLT # Offset: 874
.Ltmp1999:
    0000036f: 	movq	%rbp, %rdi
    00000372: 	callq	_Unwind_Resume@PLT # Offset: 882
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_pushfrontIdSt12forward_listIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIdSaIdEE17_M_default_appendEm" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x15ee0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x15ee0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIdSaIdEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp2000 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp2001 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp2002 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp2003 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp2004 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp2011:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp2005 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp2005:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp2006 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp2007 # Offset: 200
.Ltmp2009:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp2001:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp2008 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp2008:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2000:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2006:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp2010:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp2009 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2007:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp2010 # Offset: 392
.Ltmp2004:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp2012:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp2011 # Offset: 445
.Ltmp2003:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp2012 # Offset: 460
.Ltmp2002:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIdSaIdEE17_M_default_appendEm"

Binary Function "_Z9test_copyIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x160c0
  Size        : 0x326
  MaxSize     : 0x330
  Offset      : 0x160c0
  Section     : .text
  Orc Section : .local.text._Z9test_copyIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rsi, %r13
    0000000b: 	pushq	%r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, %rbx
    00000015: 	movl	$0x18, %edi
    0000001a: 	subq	$0x10, %rsp
    0000001e: 	callq	_Znwm@PLT # Offset: 30
    00000023: 	pxor	%xmm0, %xmm0
    00000027: 	movq	%r13, %rsi
    0000002a: 	movq	$0x0, 0x10(%rax)
    00000032: 	movq	%rax, %r12
    00000035: 	movups	%xmm0, (%rax)
    00000038: 	subq	%rbx, %rsi
    0000003b: 	jne	.Ltmp2013 # Offset: 59
    00000041: 	cmpq	%rbx, %r13
    00000044: 	je	.Ltmp2014 # Offset: 68
.Ltmp2030:
    0000004a: 	movq	%r13, %rdx
    0000004d: 	movq	%rbx, %rax
    00000050: 	subq	%rbx, %rdx
    00000053: 	leaq	-0x8(%rdx), %rcx
    00000057: 	shrq	$0x3, %rcx
    0000005b: 	addq	$0x1, %rcx
    0000005f: 	cmpq	$0x8, %rdx
    00000063: 	je	.Ltmp2015 # Offset: 99
    00000069: 	movq	%rcx, %rdx
    0000006c: 	pxor	%xmm4, %xmm4
    00000070: 	shrq	%rdx
    00000073: 	movq	%xmm4, %r14
    00000078: 	movapd	%xmm4, %xmm1
    0000007c: 	shlq	$0x4, %rdx
    00000080: 	addq	%rbx, %rdx
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2016:
    00000088: 	movsd	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	addsd	%xmm0, %xmm1
    00000094: 	movsd	-0x8(%rax), %xmm0
    00000099: 	addsd	%xmm0, %xmm1
    0000009d: 	cmpq	%rax, %rdx
    000000a0: 	jne	.Ltmp2016 # Offset: 160
    000000a2: 	movq	%rcx, %rdx
    000000a5: 	andq	$-0x2, %rdx
    000000a9: 	leaq	(%rbx,%rdx,8), %rax
    000000ad: 	cmpq	%rdx, %rcx
    000000b0: 	je	.Ltmp2017 # Offset: 176
.Ltmp2035:
    000000b2: 	addsd	(%rax), %xmm1
.Ltmp2017:
    000000b6: 	movsd	%xmm1, 0x8(%rsp)
    000000bc: 	callq	clock@PLT # Offset: 188
    000000c1: 	movl	iterations(%rip), %r8d
    000000c8: 	movsd	0x8(%rsp), %xmm1
    000000ce: 	movq	%rax, start_time(%rip)
    000000d5: 	testl	%r8d, %r8d
    000000d8: 	jle	.Ltmp2018 # Offset: 216
    000000de: 	movq	%r13, %rcx
    000000e1: 	movq	(%r12), %rdx
    000000e5: 	leaq	0x8(%rbx), %rax
    000000e9: 	subq	%rbx, %rcx
    000000ec: 	leaq	-0x8(%rcx), %r10
    000000f0: 	cmpq	%rax, %rdx
    000000f3: 	je	.Ltmp2019 # Offset: 243
    000000f9: 	cmpq	$0x10, %r10
    000000fd: 	jbe	.Ltmp2019 # Offset: 253
    00000103: 	shrq	$0x3, %r10
    00000107: 	xorl	%r9d, %r9d
    0000010a: 	addq	$0x1, %r10
    0000010e: 	movq	%r10, %r11
    00000111: 	movq	%r10, %rsi
    00000114: 	andq	$-0x2, %r11
    00000118: 	shrq	%rsi
    0000011b: 	leaq	(,%r11,8), %rcx
    00000123: 	shlq	$0x4, %rsi
    00000127: 	leaq	(%rbx,%rcx), %rdi
    0000012b: 	addq	%rdx, %rcx
    0000012e: 	nop # Size: 2
.Ltmp2022:
    00000130: 	xorl	%eax, %eax
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2020:
    00000138: 	movupd	(%rbx,%rax), %xmm3
    0000013d: 	movups	%xmm3, (%rdx,%rax)
    00000141: 	addq	$0x10, %rax
    00000145: 	cmpq	%rsi, %rax
    00000148: 	jne	.Ltmp2020 # Offset: 328
    0000014a: 	cmpq	%r11, %r10
    0000014d: 	je	.Ltmp2021 # Offset: 333
    0000014f: 	movsd	(%rdi), %xmm0
    00000153: 	movsd	%xmm0, (%rcx)
.Ltmp2021:
    00000157: 	addl	$0x1, %r9d
    0000015b: 	cmpl	%r8d, %r9d
    0000015e: 	jne	.Ltmp2022 # Offset: 350
.Ltmp2018:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movsd	%xmm1, 0x8(%rsp)
    00000169: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 361
    0000016e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000175: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000017c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000183: 	movsd	0x8(%rsp), %xmm1
    00000189: 	je	.Ltmp2023 # Offset: 393
.Ltmp2032:
    0000018f: 	movq	-0x20(%rax), %rbp
    00000193: 	movsd	%xmm1, 0x8(%rsp)
    00000199: 	callq	clock@PLT # Offset: 409
    0000019e: 	pxor	%xmm0, %xmm0
    000001a2: 	movq	%rax, end_time(%rip)
    000001a9: 	movq	%rbp, %rdi
    000001ac: 	subq	start_time(%rip), %rax
    000001b3: 	cvtsi2sd	%rax, %xmm0
    000001b8: 	divsd	DATAat0x53788(%rip), %xmm0
    000001c0: 	callq	_Z13record_resultdPKc # Offset: 448
    000001c5: 	movq	0x8(%r12), %rdx
    000001ca: 	movq	(%r12), %rbp
    000001ce: 	movsd	0x8(%rsp), %xmm1
    000001d4: 	cmpq	%rdx, %rbp
    000001d7: 	je	.Ltmp2024 # Offset: 471
    000001dd: 	subq	%rbp, %rdx
    000001e0: 	movq	%rbp, %rax
    000001e3: 	leaq	-0x8(%rdx), %rcx
    000001e7: 	shrq	$0x3, %rcx
    000001eb: 	addq	$0x1, %rcx
    000001ef: 	cmpq	$0x8, %rdx
    000001f3: 	je	.Ltmp2025 # Offset: 499
    000001f9: 	movq	%rcx, %rdx
    000001fc: 	movq	%r14, %xmm0
    00000201: 	shrq	%rdx
    00000204: 	shlq	$0x4, %rdx
    00000208: 	addq	%rbp, %rdx
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2026:
    00000210: 	movsd	(%rax), %xmm2
    00000214: 	addq	$0x10, %rax
    00000218: 	addsd	%xmm2, %xmm0
    0000021c: 	movsd	-0x8(%rax), %xmm2
    00000221: 	addsd	%xmm2, %xmm0
    00000225: 	cmpq	%rax, %rdx
    00000228: 	jne	.Ltmp2026 # Offset: 552
    0000022a: 	movq	%rcx, %rdx
    0000022d: 	andq	$-0x2, %rdx
    00000231: 	leaq	(%rbp,%rdx,8), %rax
    00000236: 	cmpq	%rdx, %rcx
    00000239: 	je	.Ltmp2027 # Offset: 569
.Ltmp2036:
    0000023b: 	addsd	(%rax), %xmm0
.Ltmp2027:
    0000023f: 	ucomisd	%xmm1, %xmm0
    00000243: 	jp	.Ltmp2028 # Offset: 579
    00000245: 	jne	.Ltmp2028 # Offset: 581
.Ltmp2031:
    00000247: 	testq	%rbp, %rbp
    0000024a: 	je	.Ltmp2029 # Offset: 586
    0000024c: 	movq	0x10(%r12), %rsi
    00000251: 	movq	%rbp, %rdi
    00000254: 	subq	%rbp, %rsi
    00000257: 	callq	_ZdlPvm@PLT # Offset: 599
.Ltmp2029:
    0000025c: 	addq	$0x10, %rsp
    00000260: 	movq	%r12, %rdi
    00000263: 	movl	$0x18, %esi
    00000268: 	popq	%rbx
    00000269: 	popq	%rbp
    0000026a: 	popq	%r12
    0000026c: 	popq	%r13
    0000026e: 	popq	%r14
    00000270: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 624
.Ltmp2013:
    00000275: 	sarq	$0x3, %rsi
    00000279: 	movq	%rax, %rdi
    0000027c: 	callq	_ZNSt6vectorIdSaIdEE17_M_default_appendEm # Offset: 636
    00000281: 	cmpq	%rbx, %r13
    00000284: 	jne	.Ltmp2030 # Offset: 644
.Ltmp2014:
    0000028a: 	callq	clock@PLT # Offset: 650
    0000028f: 	pxor	%xmm6, %xmm6
    00000293: 	movq	%rax, start_time(%rip)
    0000029a: 	movq	%xmm6, %r14
    0000029f: 	movapd	%xmm6, %xmm1
    000002a3: 	jmp	.Ltmp2018 # Offset: 675
.Ltmp2028:
    000002a8: 	movl	current_test(%rip), %edx
    000002ae: 	leaq	DATAat0x52360(%rip), %rsi
    000002b5: 	movl	$0x1, %edi
    000002ba: 	xorl	%eax, %eax
    000002bc: 	callq	__printf_chk@PLT # Offset: 700
    000002c1: 	jmp	.Ltmp2031 # Offset: 705
.Ltmp2023:
    000002c3: 	movq	-0x8(%rdx), %rax
    000002c7: 	addq	$0x200, %rax
    000002cd: 	jmp	.Ltmp2032 # Offset: 717
.Ltmp2019:
    000002d2: 	xorl	%esi, %esi
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp2034:
    000002d8: 	xorl	%eax, %eax
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2033:
    000002e0: 	movsd	(%rbx,%rax), %xmm0
    000002e5: 	movsd	%xmm0, (%rdx,%rax)
    000002ea: 	addq	$0x8, %rax
    000002ee: 	cmpq	%rcx, %rax
    000002f1: 	jne	.Ltmp2033 # Offset: 753
    000002f3: 	addl	$0x1, %esi
    000002f6: 	cmpl	%esi, %r8d
    000002f9: 	jne	.Ltmp2034 # Offset: 761
    000002fb: 	jmp	.Ltmp2018 # Offset: 763
.Ltmp2024:
    00000300: 	movq	%r14, %xmm0
    00000305: 	jmp	.Ltmp2027 # Offset: 773
.Ltmp2015:
    0000030a: 	pxor	%xmm5, %xmm5
    0000030e: 	movq	%xmm5, %r14
    00000313: 	movapd	%xmm5, %xmm1
    00000317: 	jmp	.Ltmp2035 # Offset: 791
.Ltmp2025:
    0000031c: 	movq	%r14, %xmm0
    00000321: 	jmp	.Ltmp2036 # Offset: 801
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_copyIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_duplicate1IdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x163f0
  Size        : 0x10e
  MaxSize     : 0x110
  Offset      : 0x163f0
  Section     : .text
  Orc Section : .local.text._Z15test_duplicate1IdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	movq	%rsi, %r13
    00000011: 	pushq	%r12
    00000013: 	subq	%rdi, %r13
    00000016: 	movq	%rdx, %r12
    00000019: 	pushq	%rbp
    0000001a: 	movq	%r13, %r15
    0000001d: 	movq	%rdi, %rbp
    00000020: 	xorl	%edi, %edi
    00000022: 	pushq	%rbx
    00000023: 	sarq	$0x3, %r15
    00000027: 	movq	%rsi, %rbx
    0000002a: 	subq	$0x28, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	movq	%rsp, %r14
    00000041: 	movaps	%xmm0, (%rsp)
    00000045: 	movq	$0x0, 0x10(%rsp)
    0000004e: 	testq	%r13, %r13
    00000051: 	jne	.Ltmp2037 # Offset: 81
.Ltmp2041:
    00000053: 	cmpq	%rbp, %rbx
    00000056: 	je	.Ltmp2038 # Offset: 86
    00000058: 	movq	%r13, %rdx
    0000005b: 	movq	%rbp, %rsi
    0000005e: 	callq	memmove@PLT # Offset: 94
.Ltmp2038:
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%r15, %rsi
    00000069: 	movq	%r14, %rdi
    0000006c: 	callq	_Z19test_duplicate_coreISt6vectorIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 108
    00000071: 	movq	(%rsp), %rdi
    00000075: 	testq	%rdi, %rdi
    00000078: 	je	.Ltmp2039 # Offset: 120
    0000007a: 	movq	0x18(%rsp), %rax
    0000007f: 	subq	%fs:0x28, %rax
    00000088: 	jne	.Ltmp2040 # Offset: 136
    0000008a: 	movq	0x10(%rsp), %rsi
    0000008f: 	addq	$0x28, %rsp
    00000093: 	popq	%rbx
    00000094: 	popq	%rbp
    00000095: 	subq	%rdi, %rsi
    00000098: 	popq	%r12
    0000009a: 	popq	%r13
    0000009c: 	popq	%r14
    0000009e: 	popq	%r15
    000000a0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 160
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp2039:
    000000a8: 	movq	0x18(%rsp), %rax
    000000ad: 	subq	%fs:0x28, %rax
    000000b6: 	jne	.Ltmp2040 # Offset: 182
    000000b8: 	addq	$0x28, %rsp
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	popq	%r12
    000000c0: 	popq	%r13
    000000c2: 	popq	%r14
    000000c4: 	popq	%r15
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2037:
    000000d0: 	movq	%r15, %rsi
    000000d3: 	movq	%r14, %rdi
    000000d6: 	callq	_ZNSt6vectorIdSaIdEE17_M_default_appendEm # Offset: 214
    000000db: 	movq	(%rsp), %rdi
    000000df: 	jmp	.Ltmp2041 # Offset: 223
.Ltmp2040:
    000000e4: 	callq	__stack_chk_fail@PLT # Offset: 228
    000000e9: 	endbr64
    000000ed: 	movq	%rax, %rbp
    000000f0: 	movq	(%rsp), %rdi
    000000f4: 	movq	0x10(%rsp), %rsi
    000000f9: 	subq	%rdi, %rsi
    000000fc: 	testq	%rdi, %rdi
    000000ff: 	je	.Ltmp2042 # Offset: 255
    00000101: 	callq	_ZdlPvm@PLT # Offset: 257
.Ltmp2042:
    00000106: 	movq	%rbp, %rdi
    00000109: 	callq	_Unwind_Resume@PLT # Offset: 265
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_duplicate1IdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_accum_reverseIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x16500
  Size        : 0x31d
  MaxSize     : 0x320
  Offset      : 0x16500
  Section     : .text
  Orc Section : .local.text._Z18test_accum_reverseIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	movl	$0x18, %edi
    00000019: 	subq	$0x48, %rsp
    0000001d: 	movq	%rdx, 0x38(%rsp)
    00000022: 	callq	_Znwm@PLT # Offset: 34
    00000027: 	pxor	%xmm0, %xmm0
    0000002b: 	movq	%rbp, %rsi
    0000002e: 	movq	$0x0, 0x10(%rax)
    00000036: 	movq	%rax, %r13
    00000039: 	movups	%xmm0, (%rax)
    0000003c: 	subq	%rbx, %rsi
    0000003f: 	jne	.Ltmp2043 # Offset: 63
    00000045: 	xorl	%r15d, %r15d
    00000048: 	cmpq	%rbx, %rbp
    0000004b: 	je	.Ltmp2044 # Offset: 75
.Ltmp2059:
    00000051: 	subq	%rbx, %rbp
    00000054: 	leaq	0x8(%rbx), %rax
    00000058: 	leaq	-0x8(%rbp), %rdx
    0000005c: 	cmpq	%rax, %r15
    0000005f: 	je	.Ltmp2045 # Offset: 95
    00000065: 	cmpq	$0x18, %rdx
    00000069: 	jbe	.Ltmp2045 # Offset: 105
    0000006f: 	shrq	$0x3, %rdx
    00000073: 	pxor	%xmm3, %xmm3
    00000077: 	xorl	%eax, %eax
    00000079: 	addq	$0x1, %rdx
    0000007d: 	movapd	%xmm3, %xmm2
    00000081: 	movq	%rdx, %rcx
    00000084: 	shrq	%rcx
    00000087: 	shlq	$0x4, %rcx
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2046:
    00000090: 	movupd	(%rbx,%rax), %xmm1
    00000095: 	addsd	%xmm1, %xmm2
    00000099: 	movups	%xmm1, (%r15,%rax)
    0000009e: 	unpckhpd	%xmm1, %xmm1
    000000a2: 	addq	$0x10, %rax
    000000a6: 	addsd	%xmm1, %xmm2
    000000aa: 	cmpq	%rax, %rcx
    000000ad: 	jne	.Ltmp2046 # Offset: 173
    000000af: 	movq	%rdx, %rcx
    000000b2: 	andq	$-0x2, %rcx
    000000b6: 	leaq	(,%rcx,8), %rax
    000000be: 	addq	%rax, %rbx
    000000c1: 	addq	%r15, %rax
    000000c4: 	cmpq	%rcx, %rdx
    000000c7: 	je	.Ltmp2047 # Offset: 199
    000000c9: 	movsd	(%rbx), %xmm0
    000000cd: 	addsd	%xmm0, %xmm2
    000000d1: 	movsd	%xmm0, (%rax)
.Ltmp2047:
    000000d5: 	movsd	%xmm3, 0x10(%rsp)
    000000db: 	movsd	%xmm2, 0x8(%rsp)
    000000e1: 	callq	clock@PLT # Offset: 225
    000000e6: 	movl	iterations(%rip), %edx
    000000ec: 	movsd	0x8(%rsp), %xmm2
    000000f2: 	movq	%rax, start_time(%rip)
    000000f9: 	movsd	0x10(%rsp), %xmm3
    000000ff: 	testl	%edx, %edx
    00000101: 	jle	.Ltmp2048 # Offset: 257
    00000107: 	movq	0x8(%r13), %rcx
    0000010b: 	leaq	DATAat0x52360(%rip), %r14
    00000112: 	movq	%rcx, %r9
    00000115: 	movq	%rcx, %rbp
    00000118: 	subq	%r15, %r9
    0000011b: 	leaq	-0x8(%r9), %r8
    0000011f: 	shrq	$0x3, %r8
    00000123: 	addq	$0x1, %r8
    00000127: 	movq	%r8, %rax
    0000012a: 	movq	%r8, %r10
    0000012d: 	shrq	%rax
    00000130: 	andq	$-0x2, %r10
    00000134: 	shlq	$0x4, %rax
    00000138: 	subq	%rax, %rbp
    0000013b: 	movq	%r10, %rax
    0000013e: 	negq	%rax
    00000141: 	cmpq	$0x8, %r9
    00000145: 	leaq	(%rcx,%rax,8), %rbx
    00000149: 	cmoveq	%rcx, %rbx
    0000014d: 	xorl	%r12d, %r12d
.Ltmp2054:
    00000150: 	cmpq	%rcx, %r15
    00000153: 	je	.Ltmp2049 # Offset: 339
.Ltmp2057:
    00000159: 	cmpq	$0x8, %r9
    0000015d: 	je	.Ltmp2050 # Offset: 349
    00000163: 	movq	%rcx, %rax
    00000166: 	movapd	%xmm3, %xmm0
    0000016a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2051:
    00000170: 	movsd	-0x8(%rax), %xmm1
    00000175: 	subq	$0x10, %rax
    00000179: 	addsd	%xmm1, %xmm0
    0000017d: 	movsd	(%rax), %xmm1
    00000181: 	addsd	%xmm1, %xmm0
    00000185: 	cmpq	%rbp, %rax
    00000188: 	jne	.Ltmp2051 # Offset: 392
    0000018a: 	cmpq	%r10, %r8
    0000018d: 	je	.Ltmp2052 # Offset: 397
.Ltmp2058:
    0000018f: 	addsd	-0x8(%rbx), %xmm0
.Ltmp2052:
    00000194: 	ucomisd	%xmm0, %xmm2
    00000198: 	jp	.Ltmp2053 # Offset: 408
    0000019e: 	jne	.Ltmp2053 # Offset: 414
    000001a4: 	addl	$0x1, %r12d
    000001a8: 	cmpl	%r12d, %edx
    000001ab: 	jg	.Ltmp2054 # Offset: 427
.Ltmp2048:
    000001ad: 	movq	0x38(%rsp), %rdi
    000001b2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 434
    000001b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001be: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001c5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001cc: 	je	.Ltmp2055 # Offset: 460
.Ltmp2060:
    000001d2: 	movq	-0x20(%rax), %rbp
    000001d6: 	callq	clock@PLT # Offset: 470
    000001db: 	pxor	%xmm0, %xmm0
    000001df: 	movq	%rax, end_time(%rip)
    000001e6: 	movq	%rbp, %rdi
    000001e9: 	subq	start_time(%rip), %rax
    000001f0: 	cvtsi2sd	%rax, %xmm0
    000001f5: 	divsd	DATAat0x53788(%rip), %xmm0
    000001fd: 	callq	_Z13record_resultdPKc # Offset: 509
    00000202: 	testq	%r15, %r15
    00000205: 	je	.Ltmp2056 # Offset: 517
    00000207: 	movq	0x10(%r13), %rsi
    0000020b: 	movq	%r15, %rdi
    0000020e: 	subq	%r15, %rsi
    00000211: 	callq	_ZdlPvm@PLT # Offset: 529
.Ltmp2056:
    00000216: 	addq	$0x48, %rsp
    0000021a: 	movq	%r13, %rdi
    0000021d: 	movl	$0x18, %esi
    00000222: 	popq	%rbx
    00000223: 	popq	%rbp
    00000224: 	popq	%r12
    00000226: 	popq	%r13
    00000228: 	popq	%r14
    0000022a: 	popq	%r15
    0000022c: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp2053:
    00000238: 	movl	current_test(%rip), %edx
    0000023e: 	xorl	%eax, %eax
    00000240: 	movq	%r14, %rsi
    00000243: 	movl	$0x1, %edi
    00000248: 	movq	%r10, 0x28(%rsp)
    0000024d: 	addl	$0x1, %r12d
    00000251: 	movq	%r8, 0x20(%rsp)
    00000256: 	movq	%rcx, 0x18(%rsp)
    0000025b: 	movq	%r9, 0x10(%rsp)
    00000260: 	movsd	%xmm3, 0x30(%rsp)
    00000266: 	movsd	%xmm2, 0x8(%rsp)
    0000026c: 	callq	__printf_chk@PLT # Offset: 620
    00000271: 	movl	iterations(%rip), %edx
    00000277: 	movsd	0x8(%rsp), %xmm2
    0000027d: 	movq	0x10(%rsp), %r9
    00000282: 	movq	0x18(%rsp), %rcx
    00000287: 	cmpl	%r12d, %edx
    0000028a: 	movq	0x20(%rsp), %r8
    0000028f: 	movq	0x28(%rsp), %r10
    00000294: 	movsd	0x30(%rsp), %xmm3
    0000029a: 	jle	.Ltmp2048 # Offset: 666
    000002a0: 	cmpq	%rcx, %r15
    000002a3: 	jne	.Ltmp2057 # Offset: 675
.Ltmp2049:
    000002a9: 	movapd	%xmm3, %xmm0
    000002ad: 	jmp	.Ltmp2052 # Offset: 685
.Ltmp2050:
    000002b2: 	movapd	%xmm3, %xmm0
    000002b6: 	jmp	.Ltmp2058 # Offset: 694
.Ltmp2043:
    000002bb: 	sarq	$0x3, %rsi
    000002bf: 	movq	%rax, %rdi
    000002c2: 	callq	_ZNSt6vectorIdSaIdEE17_M_default_appendEm # Offset: 706
    000002c7: 	movq	(%r13), %r15
    000002cb: 	cmpq	%rbx, %rbp
    000002ce: 	jne	.Ltmp2059 # Offset: 718
.Ltmp2044:
    000002d4: 	pxor	%xmm3, %xmm3
    000002d8: 	movapd	%xmm3, %xmm2
    000002dc: 	jmp	.Ltmp2047 # Offset: 732
.Ltmp2055:
    000002e1: 	movq	-0x8(%rdx), %rax
    000002e5: 	addq	$0x200, %rax
    000002eb: 	jmp	.Ltmp2060 # Offset: 747
.Ltmp2045:
    000002f0: 	pxor	%xmm3, %xmm3
    000002f4: 	xorl	%eax, %eax
    000002f6: 	movapd	%xmm3, %xmm2
    000002fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2061:
    00000300: 	movsd	(%rbx,%rax), %xmm0
    00000305: 	movsd	%xmm0, (%r15,%rax)
    0000030b: 	addq	$0x8, %rax
    0000030f: 	addsd	%xmm0, %xmm2
    00000313: 	cmpq	%rbp, %rax
    00000316: 	jne	.Ltmp2061 # Offset: 790
    00000318: 	jmp	.Ltmp2047 # Offset: 792
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_accum_reverseIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_accumIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0x16820
  Size        : 0x315
  MaxSize     : 0x320
  Offset      : 0x16820
  Section     : .text
  Orc Section : .local.text._Z10test_accumIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	movl	$0x18, %edi
    00000019: 	subq	$0x48, %rsp
    0000001d: 	movq	%rdx, 0x38(%rsp)
    00000022: 	callq	_Znwm@PLT # Offset: 34
    00000027: 	pxor	%xmm0, %xmm0
    0000002b: 	movq	%rbp, %rsi
    0000002e: 	movq	$0x0, 0x10(%rax)
    00000036: 	movq	%rax, %r13
    00000039: 	movups	%xmm0, (%rax)
    0000003c: 	subq	%rbx, %rsi
    0000003f: 	jne	.Ltmp2062 # Offset: 63
    00000045: 	xorl	%r12d, %r12d
    00000048: 	cmpq	%rbx, %rbp
    0000004b: 	je	.Ltmp2063 # Offset: 75
.Ltmp2078:
    00000051: 	subq	%rbx, %rbp
    00000054: 	leaq	0x8(%rbx), %rax
    00000058: 	leaq	-0x8(%rbp), %rdx
    0000005c: 	cmpq	%rax, %r12
    0000005f: 	je	.Ltmp2064 # Offset: 95
    00000065: 	cmpq	$0x18, %rdx
    00000069: 	jbe	.Ltmp2064 # Offset: 105
    0000006f: 	shrq	$0x3, %rdx
    00000073: 	pxor	%xmm3, %xmm3
    00000077: 	xorl	%eax, %eax
    00000079: 	addq	$0x1, %rdx
    0000007d: 	movapd	%xmm3, %xmm2
    00000081: 	movq	%rdx, %rcx
    00000084: 	shrq	%rcx
    00000087: 	shlq	$0x4, %rcx
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2065:
    00000090: 	movupd	(%rbx,%rax), %xmm1
    00000095: 	addsd	%xmm1, %xmm2
    00000099: 	movups	%xmm1, (%r12,%rax)
    0000009e: 	unpckhpd	%xmm1, %xmm1
    000000a2: 	addq	$0x10, %rax
    000000a6: 	addsd	%xmm1, %xmm2
    000000aa: 	cmpq	%rax, %rcx
    000000ad: 	jne	.Ltmp2065 # Offset: 173
    000000af: 	movq	%rdx, %rcx
    000000b2: 	andq	$-0x2, %rcx
    000000b6: 	leaq	(,%rcx,8), %rax
    000000be: 	addq	%rax, %rbx
    000000c1: 	addq	%r12, %rax
    000000c4: 	cmpq	%rcx, %rdx
    000000c7: 	je	.Ltmp2066 # Offset: 199
    000000c9: 	movsd	(%rbx), %xmm0
    000000cd: 	addsd	%xmm0, %xmm2
    000000d1: 	movsd	%xmm0, (%rax)
.Ltmp2066:
    000000d5: 	movsd	%xmm3, 0x10(%rsp)
    000000db: 	movsd	%xmm2, 0x8(%rsp)
    000000e1: 	callq	clock@PLT # Offset: 225
    000000e6: 	movl	iterations(%rip), %edx
    000000ec: 	movsd	0x8(%rsp), %xmm2
    000000f2: 	movq	%rax, start_time(%rip)
    000000f9: 	movsd	0x10(%rsp), %xmm3
    000000ff: 	testl	%edx, %edx
    00000101: 	jle	.Ltmp2067 # Offset: 257
    00000107: 	movq	0x8(%r13), %r8
    0000010b: 	leaq	DATAat0x52360(%rip), %r14
    00000112: 	movq	%r8, %r9
    00000115: 	subq	%r12, %r9
    00000118: 	leaq	-0x8(%r9), %rcx
    0000011c: 	shrq	$0x3, %rcx
    00000120: 	addq	$0x1, %rcx
    00000124: 	movq	%rcx, %rbp
    00000127: 	movq	%rcx, %r10
    0000012a: 	shrq	%rbp
    0000012d: 	andq	$-0x2, %r10
    00000131: 	shlq	$0x4, %rbp
    00000135: 	leaq	(%r12,%r10,8), %rbx
    00000139: 	addq	%r12, %rbp
    0000013c: 	cmpq	$0x8, %r9
    00000140: 	cmoveq	%r12, %rbx
    00000144: 	xorl	%r15d, %r15d
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2073:
    00000150: 	cmpq	%r12, %r8
    00000153: 	je	.Ltmp2068 # Offset: 339
.Ltmp2076:
    00000159: 	cmpq	$0x8, %r9
    0000015d: 	je	.Ltmp2069 # Offset: 349
    00000163: 	movq	%r12, %rax
    00000166: 	movapd	%xmm3, %xmm0
    0000016a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2070:
    00000170: 	movsd	(%rax), %xmm1
    00000174: 	addq	$0x10, %rax
    00000178: 	addsd	%xmm1, %xmm0
    0000017c: 	movsd	-0x8(%rax), %xmm1
    00000181: 	addsd	%xmm1, %xmm0
    00000185: 	cmpq	%rbp, %rax
    00000188: 	jne	.Ltmp2070 # Offset: 392
    0000018a: 	cmpq	%r10, %rcx
    0000018d: 	je	.Ltmp2071 # Offset: 397
.Ltmp2077:
    0000018f: 	addsd	(%rbx), %xmm0
.Ltmp2071:
    00000193: 	ucomisd	%xmm0, %xmm2
    00000197: 	jp	.Ltmp2072 # Offset: 407
    0000019d: 	jne	.Ltmp2072 # Offset: 413
    000001a3: 	addl	$0x1, %r15d
    000001a7: 	cmpl	%edx, %r15d
    000001aa: 	jl	.Ltmp2073 # Offset: 426
.Ltmp2067:
    000001ac: 	movq	0x38(%rsp), %rdi
    000001b1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 433
    000001b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001bd: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001c4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001cb: 	je	.Ltmp2074 # Offset: 459
.Ltmp2079:
    000001d1: 	movq	-0x20(%rax), %rbp
    000001d5: 	callq	clock@PLT # Offset: 469
    000001da: 	pxor	%xmm0, %xmm0
    000001de: 	movq	%rax, end_time(%rip)
    000001e5: 	movq	%rbp, %rdi
    000001e8: 	subq	start_time(%rip), %rax
    000001ef: 	cvtsi2sd	%rax, %xmm0
    000001f4: 	divsd	DATAat0x53788(%rip), %xmm0
    000001fc: 	callq	_Z13record_resultdPKc # Offset: 508
    00000201: 	testq	%r12, %r12
    00000204: 	je	.Ltmp2075 # Offset: 516
    00000206: 	movq	0x10(%r13), %rsi
    0000020a: 	movq	%r12, %rdi
    0000020d: 	subq	%r12, %rsi
    00000210: 	callq	_ZdlPvm@PLT # Offset: 528
.Ltmp2075:
    00000215: 	addq	$0x48, %rsp
    00000219: 	movq	%r13, %rdi
    0000021c: 	movl	$0x18, %esi
    00000221: 	popq	%rbx
    00000222: 	popq	%rbp
    00000223: 	popq	%r12
    00000225: 	popq	%r13
    00000227: 	popq	%r14
    00000229: 	popq	%r15
    0000022b: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 555
.Ltmp2072:
    00000230: 	movl	current_test(%rip), %edx
    00000236: 	xorl	%eax, %eax
    00000238: 	movq	%r14, %rsi
    0000023b: 	movl	$0x1, %edi
    00000240: 	movq	%r10, 0x28(%rsp)
    00000245: 	addl	$0x1, %r15d
    00000249: 	movq	%rcx, 0x20(%rsp)
    0000024e: 	movq	%r9, 0x18(%rsp)
    00000253: 	movq	%r8, 0x10(%rsp)
    00000258: 	movsd	%xmm3, 0x30(%rsp)
    0000025e: 	movsd	%xmm2, 0x8(%rsp)
    00000264: 	callq	__printf_chk@PLT # Offset: 612
    00000269: 	movl	iterations(%rip), %edx
    0000026f: 	movsd	0x8(%rsp), %xmm2
    00000275: 	movq	0x10(%rsp), %r8
    0000027a: 	movq	0x18(%rsp), %r9
    0000027f: 	cmpl	%r15d, %edx
    00000282: 	movq	0x20(%rsp), %rcx
    00000287: 	movq	0x28(%rsp), %r10
    0000028c: 	movsd	0x30(%rsp), %xmm3
    00000292: 	jle	.Ltmp2067 # Offset: 658
    00000298: 	cmpq	%r12, %r8
    0000029b: 	jne	.Ltmp2076 # Offset: 667
.Ltmp2068:
    000002a1: 	movapd	%xmm3, %xmm0
    000002a5: 	jmp	.Ltmp2071 # Offset: 677
.Ltmp2069:
    000002aa: 	movapd	%xmm3, %xmm0
    000002ae: 	jmp	.Ltmp2077 # Offset: 686
.Ltmp2062:
    000002b3: 	sarq	$0x3, %rsi
    000002b7: 	movq	%rax, %rdi
    000002ba: 	callq	_ZNSt6vectorIdSaIdEE17_M_default_appendEm # Offset: 698
    000002bf: 	movq	(%r13), %r12
    000002c3: 	cmpq	%rbx, %rbp
    000002c6: 	jne	.Ltmp2078 # Offset: 710
.Ltmp2063:
    000002cc: 	pxor	%xmm3, %xmm3
    000002d0: 	movapd	%xmm3, %xmm2
    000002d4: 	jmp	.Ltmp2066 # Offset: 724
.Ltmp2074:
    000002d9: 	movq	-0x8(%rdx), %rax
    000002dd: 	addq	$0x200, %rax
    000002e3: 	jmp	.Ltmp2079 # Offset: 739
.Ltmp2064:
    000002e8: 	pxor	%xmm3, %xmm3
    000002ec: 	xorl	%eax, %eax
    000002ee: 	movapd	%xmm3, %xmm2
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2080:
    000002f8: 	movsd	(%rbx,%rax), %xmm0
    000002fd: 	movsd	%xmm0, (%r12,%rax)
    00000303: 	addq	$0x8, %rax
    00000307: 	addsd	%xmm0, %xmm2
    0000030b: 	cmpq	%rbp, %rax
    0000030e: 	jne	.Ltmp2080 # Offset: 782
    00000310: 	jmp	.Ltmp2066 # Offset: 784
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_accumIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt7__cxx114listIdSaIdEE17_M_default_appendEm" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0x16b40
  Size        : 0x9f
  MaxSize     : 0xa0
  Offset      : 0x16b40
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx114listIdSaIdEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp2081 # Offset: 7
    00000009: 	pushq	%r12
    0000000b: 	movq	%rsi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	xorl	%ebp, %ebp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, %rbx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp2082:
    00000018: 	movl	$0x18, %edi
    0000001d: 	callq	_Znwm@PLT # Offset: 29
    00000022: 	movq	$0x0, 0x10(%rax)
    0000002a: 	movq	%rax, %rdi
    0000002d: 	movq	%rbx, %rsi
    00000030: 	addq	$0x1, %rbp
    00000034: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 52
    00000039: 	addq	$0x1, 0x10(%rbx)
    0000003e: 	cmpq	%rbp, %r12
    00000041: 	jne	.Ltmp2082 # Offset: 65
    00000043: 	popq	%rbx
    00000044: 	popq	%rbp
    00000045: 	popq	%r12
    00000047: 	retq # Offset: 71
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2081:
    00000050: 	retq # Offset: 80
    00000051: 	endbr64
    00000055: 	movq	%rax, %rdi
    00000058: 	callq	__cxa_begin_catch@PLT # Offset: 88
.Ltmp2084:
    0000005d: 	testq	%rbp, %rbp
    00000060: 	je	.Ltmp2083 # Offset: 96
    00000062: 	subq	$0x1, 0x10(%rbx)
    00000067: 	movq	0x8(%rbx), %r12
    0000006b: 	subq	$0x1, %rbp
    0000006f: 	movq	%r12, %rdi
    00000072: 	callq	_ZNSt8__detail15_List_node_base9_M_unhookEv@PLT # Offset: 114
    00000077: 	movl	$0x18, %esi
    0000007c: 	movq	%r12, %rdi
    0000007f: 	callq	_ZdlPvm@PLT # Offset: 127
    00000084: 	jmp	.Ltmp2084 # Offset: 132
.Ltmp2083:
    00000086: 	callq	__cxa_rethrow@PLT # Offset: 134
    0000008b: 	endbr64
    0000008f: 	movq	%rax, %rbp
    00000092: 	callq	__cxa_end_catch@PLT # Offset: 146
    00000097: 	movq	%rbp, %rdi
    0000009a: 	callq	_Unwind_Resume@PLT # Offset: 154
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx114listIdSaIdEE17_M_default_appendEm"

Binary Function "_ZNSt7__cxx114listIdSaIdEE6resizeEm" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0x16be0
  Size        : 0xe3
  MaxSize     : 0xf0
  Offset      : 0x16be0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx114listIdSaIdEE6resizeEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	0x10(%rdi), %rax
    0000000f: 	cmpq	%rsi, %rax
    00000012: 	jbe	.Ltmp2085 # Offset: 18
    00000014: 	movq	%rax, %rdx
    00000017: 	shrq	%rdx
    0000001a: 	cmpq	%rsi, %rdx
    0000001d: 	jb	.Ltmp2086 # Offset: 29
    0000001f: 	movq	(%rdi), %rbp
    00000022: 	testq	%rsi, %rsi
    00000025: 	je	.Ltmp2087 # Offset: 37
    00000027: 	subq	$0x1, %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2088:
    00000030: 	movq	(%rbp), %rbp
    00000034: 	subq	$0x1, %rsi
    00000038: 	jae	.Ltmp2088 # Offset: 56
.Ltmp2087:
    0000003a: 	cmpq	%rbp, %r12
    0000003d: 	jne	.Ltmp2089 # Offset: 61
    0000003f: 	jmp	.Ltmp2090 # Offset: 63
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp2091:
    00000048: 	movq	0x10(%r12), %rax
    0000004d: 	movq	%rbx, %rbp
.Ltmp2089:
    00000050: 	subq	$0x1, %rax
    00000054: 	movq	(%rbp), %rbx
    00000058: 	movq	%rbp, %rdi
    0000005b: 	movq	%rax, 0x10(%r12)
    00000060: 	callq	_ZNSt8__detail15_List_node_base9_M_unhookEv@PLT # Offset: 96
    00000065: 	movl	$0x18, %esi
    0000006a: 	movq	%rbp, %rdi
    0000006d: 	callq	_ZdlPvm@PLT # Offset: 109
    00000072: 	cmpq	%rbx, %r12
    00000075: 	jne	.Ltmp2091 # Offset: 117
.Ltmp2090:
    00000077: 	popq	%rbx
    00000078: 	popq	%rbp
    00000079: 	popq	%r12
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp2085:
    00000080: 	subq	%rax, %rsi
    00000083: 	je	.Ltmp2090 # Offset: 131
    00000085: 	popq	%rbx
    00000086: 	popq	%rbp
    00000087: 	popq	%r12
    00000089: 	jmp	_ZNSt7__cxx114listIdSaIdEE17_M_default_appendEm # TAILCALL  # Offset: 137
    0000008e: 	nop # Size: 2
.Ltmp2086:
    00000090: 	movq	%rax, %rcx
    00000093: 	movq	%rdi, %rbp
    00000096: 	subq	%rsi, %rcx
    00000099: 	movq	%rcx, %rdx
    0000009c: 	notq	%rdx
    0000009f: 	jns	.Ltmp2092 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2093:
    000000a8: 	movq	(%rbp), %rbp
    000000ac: 	subq	$0x1, %rdx
    000000b0: 	jb	.Ltmp2087 # Offset: 176
    000000b2: 	movq	(%rbp), %rbp
    000000b6: 	subq	$0x1, %rdx
    000000ba: 	jae	.Ltmp2093 # Offset: 186
    000000bc: 	jmp	.Ltmp2087 # Offset: 188
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp2092:
    000000c8: 	movl	$0x1, %edx
    000000cd: 	subq	%rcx, %rdx
.Ltmp2094:
    000000d0: 	addq	$0x1, %rdx
    000000d4: 	movq	0x8(%rbp), %rbp
    000000d8: 	cmpq	$0x1, %rdx
    000000dc: 	jne	.Ltmp2094 # Offset: 220
    000000de: 	jmp	.Ltmp2087 # Offset: 222
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx114listIdSaIdEE6resizeEm"

Binary Function "_Z10test_accumIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0x16cd0
  Size        : 0x1d4
  MaxSize     : 0x1e0
  Offset      : 0x16cd0
  Section     : .text
  Orc Section : .local.text._Z10test_accumIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdx, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	movl	$0x18, %edi
    00000018: 	subq	$0x18, %rsp
    0000001c: 	callq	_Znwm@PLT # Offset: 28
    00000021: 	movq	%r13, %rsi
    00000024: 	movq	%rax, %xmm0
    00000029: 	subq	%rbx, %rsi
    0000002c: 	movq	%rax, %rdi
    0000002f: 	movq	%rax, %rbp
    00000032: 	movq	$0x0, 0x10(%rax)
    0000003a: 	punpcklqdq	%xmm0, %xmm0
    0000003e: 	sarq	$0x3, %rsi
    00000042: 	movups	%xmm0, (%rax)
    00000045: 	callq	_ZNSt7__cxx114listIdSaIdEE6resizeEm # Offset: 69
    0000004a: 	pxor	%xmm2, %xmm2
    0000004e: 	movq	(%rbp), %rax
    00000052: 	movapd	%xmm2, %xmm1
    00000056: 	cmpq	%rbx, %r13
    00000059: 	je	.Ltmp2095 # Offset: 89
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2096:
    00000060: 	movsd	(%rbx), %xmm0
    00000064: 	movq	%rax, %rdx
    00000067: 	addq	$0x8, %rbx
    0000006b: 	movq	(%rax), %rax
    0000006e: 	addsd	%xmm0, %xmm1
    00000072: 	movsd	%xmm0, 0x10(%rdx)
    00000077: 	cmpq	%rbx, %r13
    0000007a: 	jne	.Ltmp2096 # Offset: 122
.Ltmp2095:
    0000007c: 	movsd	%xmm2, 0x8(%rsp)
    00000082: 	movsd	%xmm1, (%rsp)
    00000087: 	callq	clock@PLT # Offset: 135
    0000008c: 	movl	iterations(%rip), %esi
    00000092: 	movsd	(%rsp), %xmm1
    00000097: 	movq	%rax, start_time(%rip)
    0000009e: 	movsd	0x8(%rsp), %xmm2
    000000a4: 	testl	%esi, %esi
    000000a6: 	jle	.Ltmp2097 # Offset: 166
    000000a8: 	movq	(%rbp), %rcx
    000000ac: 	xorl	%ebx, %ebx
    000000ae: 	leaq	DATAat0x52360(%rip), %r13
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp2101:
    000000b8: 	movq	%rcx, %rax
    000000bb: 	movapd	%xmm2, %xmm0
    000000bf: 	cmpq	%rcx, %rbp
    000000c2: 	je	.Ltmp2098 # Offset: 194
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp2099:
    000000c8: 	movq	%rax, %rdx
    000000cb: 	movq	(%rax), %rax
    000000ce: 	addsd	0x10(%rdx), %xmm0
    000000d3: 	cmpq	%rax, %rbp
    000000d6: 	jne	.Ltmp2099 # Offset: 214
.Ltmp2098:
    000000d8: 	ucomisd	%xmm0, %xmm1
    000000dc: 	jp	.Ltmp2100 # Offset: 220
    000000e2: 	jne	.Ltmp2100 # Offset: 226
    000000e8: 	addl	$0x1, %ebx
    000000eb: 	cmpl	%esi, %ebx
    000000ed: 	jl	.Ltmp2101 # Offset: 237
.Ltmp2097:
    000000ef: 	movq	%r12, %rdi
    000000f2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 242
    000000f7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000fe: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000105: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000010c: 	je	.Ltmp2102 # Offset: 268
.Ltmp2105:
    00000112: 	movq	-0x20(%rax), %r12
    00000116: 	callq	clock@PLT # Offset: 278
    0000011b: 	pxor	%xmm0, %xmm0
    0000011f: 	movq	%rax, end_time(%rip)
    00000126: 	movq	%r12, %rdi
    00000129: 	subq	start_time(%rip), %rax
    00000130: 	cvtsi2sd	%rax, %xmm0
    00000135: 	divsd	DATAat0x53788(%rip), %xmm0
    0000013d: 	callq	_Z13record_resultdPKc # Offset: 317
    00000142: 	movq	(%rbp), %rbx
    00000146: 	cmpq	%rbx, %rbp
    00000149: 	je	.Ltmp2103 # Offset: 329
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2104:
    00000150: 	movq	%rbx, %rdi
    00000153: 	movq	(%rbx), %rbx
    00000156: 	movl	$0x18, %esi
    0000015b: 	callq	_ZdlPvm@PLT # Offset: 347
    00000160: 	cmpq	%rbx, %rbp
    00000163: 	jne	.Ltmp2104 # Offset: 355
.Ltmp2103:
    00000165: 	addq	$0x18, %rsp
    00000169: 	movq	%rbp, %rdi
    0000016c: 	movl	$0x18, %esi
    00000171: 	popq	%rbx
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 375
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp2100:
    00000180: 	movl	current_test(%rip), %edx
    00000186: 	movq	%r13, %rsi
    00000189: 	movl	$0x1, %edi
    0000018e: 	xorl	%eax, %eax
    00000190: 	movsd	%xmm2, 0x8(%rsp)
    00000196: 	addl	$0x1, %ebx
    00000199: 	movsd	%xmm1, (%rsp)
    0000019e: 	callq	__printf_chk@PLT # Offset: 414
    000001a3: 	movl	iterations(%rip), %esi
    000001a9: 	cmpl	%ebx, %esi
    000001ab: 	jle	.Ltmp2097 # Offset: 427
    000001b1: 	movq	(%rbp), %rcx
    000001b5: 	movsd	(%rsp), %xmm1
    000001ba: 	movsd	0x8(%rsp), %xmm2
    000001c0: 	jmp	.Ltmp2101 # Offset: 448
.Ltmp2102:
    000001c5: 	movq	-0x8(%rdx), %rax
    000001c9: 	addq	$0x200, %rax
    000001cf: 	jmp	.Ltmp2105 # Offset: 463
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_accumIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_copyIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x16eb0
  Size        : 0x24d
  MaxSize     : 0x250
  Offset      : 0x16eb0
  Section     : .text
  Orc Section : .local.text._Z9test_copyIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rdi, %r13
    0000000b: 	movl	$0x18, %edi
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movq	%rbx, %r14
    0000001d: 	subq	%r13, %r14
    00000020: 	subq	$0x10, %rsp
    00000024: 	callq	_Znwm@PLT # Offset: 36
    00000029: 	movq	%r14, %rsi
    0000002c: 	movq	%rax, %xmm0
    00000031: 	sarq	$0x3, %rsi
    00000035: 	movq	%rax, %rdi
    00000038: 	movq	%rax, %rbp
    0000003b: 	movq	$0x0, 0x10(%rax)
    00000043: 	punpcklqdq	%xmm0, %xmm0
    00000047: 	movups	%xmm0, (%rax)
    0000004a: 	callq	_ZNSt7__cxx114listIdSaIdEE6resizeEm # Offset: 74
    0000004f: 	cmpq	%r13, %rbx
    00000052: 	je	.Ltmp2106 # Offset: 82
    00000058: 	leaq	-0x8(%r14), %rcx
    0000005c: 	movq	%r13, %rax
    0000005f: 	shrq	$0x3, %rcx
    00000063: 	addq	$0x1, %rcx
    00000067: 	cmpq	$0x8, %r14
    0000006b: 	je	.Ltmp2107 # Offset: 107
    00000071: 	movq	%rcx, %rdx
    00000074: 	pxor	%xmm2, %xmm2
    00000078: 	shrq	%rdx
    0000007b: 	movsd	%xmm2, 0x8(%rsp)
    00000081: 	movapd	%xmm2, %xmm1
    00000085: 	shlq	$0x4, %rdx
    00000089: 	addq	%r13, %rdx
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp2108:
    00000090: 	movsd	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	addsd	%xmm0, %xmm1
    0000009c: 	movsd	-0x8(%rax), %xmm0
    000000a1: 	addsd	%xmm0, %xmm1
    000000a5: 	cmpq	%rdx, %rax
    000000a8: 	jne	.Ltmp2108 # Offset: 168
    000000aa: 	movq	%rcx, %rdx
    000000ad: 	andq	$-0x2, %rdx
    000000b1: 	leaq	(%r13,%rdx,8), %rax
    000000b6: 	cmpq	%rcx, %rdx
    000000b9: 	je	.Ltmp2109 # Offset: 185
.Ltmp2120:
    000000bb: 	addsd	(%rax), %xmm1
.Ltmp2109:
    000000bf: 	movsd	%xmm1, (%rsp)
    000000c4: 	callq	clock@PLT # Offset: 196
    000000c9: 	movl	iterations(%rip), %edi
    000000cf: 	movsd	(%rsp), %xmm1
    000000d4: 	movq	%rax, start_time(%rip)
    000000db: 	testl	%edi, %edi
    000000dd: 	jle	.Ltmp2110 # Offset: 221
    000000df: 	movq	(%rbp), %r8
    000000e3: 	xorl	%esi, %esi
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp2112:
    000000e8: 	movq	%r8, %rdx
    000000eb: 	movq	%r13, %rax
    000000ee: 	nop # Size: 2
.Ltmp2111:
    000000f0: 	movsd	(%rax), %xmm0
    000000f4: 	movq	%rdx, %rcx
    000000f7: 	addq	$0x8, %rax
    000000fb: 	movq	(%rdx), %rdx
    000000fe: 	movsd	%xmm0, 0x10(%rcx)
    00000103: 	cmpq	%rax, %rbx
    00000106: 	jne	.Ltmp2111 # Offset: 262
    00000108: 	addl	$0x1, %esi
    0000010b: 	cmpl	%edi, %esi
    0000010d: 	jne	.Ltmp2112 # Offset: 269
.Ltmp2110:
    0000010f: 	movq	%r12, %rdi
    00000112: 	movsd	%xmm1, (%rsp)
    00000117: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 279
    0000011c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000123: 	movsd	(%rsp), %xmm1
    00000128: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000012f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000136: 	je	.Ltmp2113 # Offset: 310
.Ltmp2119:
    0000013c: 	movq	-0x20(%rax), %r12
    00000140: 	movsd	%xmm1, (%rsp)
    00000145: 	callq	clock@PLT # Offset: 325
    0000014a: 	pxor	%xmm0, %xmm0
    0000014e: 	movq	%rax, end_time(%rip)
    00000155: 	movq	%r12, %rdi
    00000158: 	subq	start_time(%rip), %rax
    0000015f: 	cvtsi2sd	%rax, %xmm0
    00000164: 	divsd	DATAat0x53788(%rip), %xmm0
    0000016c: 	callq	_Z13record_resultdPKc # Offset: 364
    00000171: 	movq	(%rbp), %rbx
    00000175: 	movsd	(%rsp), %xmm1
    0000017a: 	cmpq	%rbx, %rbp
    0000017d: 	je	.Ltmp2114 # Offset: 381
    0000017f: 	movq	%rbx, %rax
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2115:
    00000190: 	movq	%rax, %rdx
    00000193: 	movq	(%rax), %rax
    00000196: 	addsd	0x10(%rdx), %xmm0
    0000019b: 	cmpq	%rax, %rbp
    0000019e: 	jne	.Ltmp2115 # Offset: 414
    000001a0: 	ucomisd	%xmm1, %xmm0
    000001a4: 	jp	.Ltmp2116 # Offset: 420
    000001a6: 	jne	.Ltmp2116 # Offset: 422
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2117:
    000001b0: 	movq	%rbx, %rdi
    000001b3: 	movq	(%rbx), %rbx
    000001b6: 	movl	$0x18, %esi
    000001bb: 	callq	_ZdlPvm@PLT # Offset: 443
    000001c0: 	cmpq	%rbx, %rbp
    000001c3: 	jne	.Ltmp2117 # Offset: 451
.Ltmp2118:
    000001c5: 	addq	$0x10, %rsp
    000001c9: 	movq	%rbp, %rdi
    000001cc: 	movl	$0x18, %esi
    000001d1: 	popq	%rbx
    000001d2: 	popq	%rbp
    000001d3: 	popq	%r12
    000001d5: 	popq	%r13
    000001d7: 	popq	%r14
    000001d9: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 473
.Ltmp2114:
    000001de: 	ucomisd	0x8(%rsp), %xmm1
    000001e4: 	jp	.Ltmp2116 # Offset: 484
    000001e6: 	je	.Ltmp2118 # Offset: 486
.Ltmp2116:
    000001e8: 	movl	current_test(%rip), %edx
    000001ee: 	leaq	DATAat0x52360(%rip), %rsi
    000001f5: 	movl	$0x1, %edi
    000001fa: 	xorl	%eax, %eax
    000001fc: 	callq	__printf_chk@PLT # Offset: 508
    00000201: 	movq	(%rbp), %rbx
    00000205: 	cmpq	%rbp, %rbx
    00000208: 	jne	.Ltmp2117 # Offset: 520
    0000020a: 	jmp	.Ltmp2118 # Offset: 522
.Ltmp2113:
    0000020c: 	movq	-0x8(%rdx), %rax
    00000210: 	addq	$0x200, %rax
    00000216: 	jmp	.Ltmp2119 # Offset: 534
.Ltmp2106:
    0000021b: 	callq	clock@PLT # Offset: 539
    00000220: 	pxor	%xmm4, %xmm4
    00000224: 	movq	%rax, start_time(%rip)
    0000022b: 	movapd	%xmm4, %xmm1
    0000022f: 	movsd	%xmm4, 0x8(%rsp)
    00000235: 	jmp	.Ltmp2110 # Offset: 565
.Ltmp2107:
    0000023a: 	pxor	%xmm3, %xmm3
    0000023e: 	movsd	%xmm3, 0x8(%rsp)
    00000244: 	movapd	%xmm3, %xmm1
    00000248: 	jmp	.Ltmp2120 # Offset: 584
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_copyIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_accum_reverseIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x17100
  Size        : 0x1e9
  MaxSize     : 0x1f0
  Offset      : 0x17100
  Section     : .text
  Orc Section : .local.text._Z18test_accum_reverseIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdx, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	movl	$0x18, %edi
    00000018: 	subq	$0x18, %rsp
    0000001c: 	callq	_Znwm@PLT # Offset: 28
    00000021: 	movq	%r13, %rsi
    00000024: 	movq	%rax, %xmm0
    00000029: 	subq	%rbx, %rsi
    0000002c: 	movq	%rax, %rdi
    0000002f: 	movq	%rax, %rbp
    00000032: 	movq	$0x0, 0x10(%rax)
    0000003a: 	punpcklqdq	%xmm0, %xmm0
    0000003e: 	sarq	$0x3, %rsi
    00000042: 	movups	%xmm0, (%rax)
    00000045: 	callq	_ZNSt7__cxx114listIdSaIdEE6resizeEm # Offset: 69
    0000004a: 	pxor	%xmm2, %xmm2
    0000004e: 	movq	(%rbp), %rax
    00000052: 	movapd	%xmm2, %xmm1
    00000056: 	cmpq	%rbx, %r13
    00000059: 	je	.Ltmp2121 # Offset: 89
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2122:
    00000060: 	movsd	(%rbx), %xmm0
    00000064: 	movq	%rax, %rdx
    00000067: 	addq	$0x8, %rbx
    0000006b: 	movq	(%rax), %rax
    0000006e: 	addsd	%xmm0, %xmm1
    00000072: 	movsd	%xmm0, 0x10(%rdx)
    00000077: 	cmpq	%rbx, %r13
    0000007a: 	jne	.Ltmp2122 # Offset: 122
.Ltmp2121:
    0000007c: 	movsd	%xmm2, 0x8(%rsp)
    00000082: 	movsd	%xmm1, (%rsp)
    00000087: 	callq	clock@PLT # Offset: 135
    0000008c: 	movl	iterations(%rip), %ecx
    00000092: 	movsd	(%rsp), %xmm1
    00000097: 	movq	%rax, start_time(%rip)
    0000009e: 	movsd	0x8(%rsp), %xmm2
    000000a4: 	testl	%ecx, %ecx
    000000a6: 	jle	.Ltmp2123 # Offset: 166
    000000a8: 	movq	(%rbp), %rdx
    000000ac: 	xorl	%ebx, %ebx
    000000ae: 	leaq	DATAat0x52360(%rip), %r13
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp2127:
    000000b8: 	cmpq	%rdx, %rbp
    000000bb: 	je	.Ltmp2124 # Offset: 187
.Ltmp2131:
    000000c1: 	movq	%rbp, %rax
    000000c4: 	movapd	%xmm2, %xmm0
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2125:
    000000d0: 	movq	0x8(%rax), %rax
    000000d4: 	addsd	0x10(%rax), %xmm0
    000000d9: 	cmpq	%rdx, %rax
    000000dc: 	jne	.Ltmp2125 # Offset: 220
.Ltmp2132:
    000000de: 	ucomisd	%xmm0, %xmm1
    000000e2: 	jp	.Ltmp2126 # Offset: 226
    000000e8: 	jne	.Ltmp2126 # Offset: 232
    000000ee: 	addl	$0x1, %ebx
    000000f1: 	cmpl	%ecx, %ebx
    000000f3: 	jl	.Ltmp2127 # Offset: 243
.Ltmp2123:
    000000f5: 	movq	%r12, %rdi
    000000f8: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 248
    000000fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000104: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000010b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000112: 	je	.Ltmp2128 # Offset: 274
.Ltmp2133:
    00000118: 	movq	-0x20(%rax), %r12
    0000011c: 	callq	clock@PLT # Offset: 284
    00000121: 	pxor	%xmm0, %xmm0
    00000125: 	movq	%rax, end_time(%rip)
    0000012c: 	movq	%r12, %rdi
    0000012f: 	subq	start_time(%rip), %rax
    00000136: 	cvtsi2sd	%rax, %xmm0
    0000013b: 	divsd	DATAat0x53788(%rip), %xmm0
    00000143: 	callq	_Z13record_resultdPKc # Offset: 323
    00000148: 	movq	(%rbp), %rbx
    0000014c: 	cmpq	%rbx, %rbp
    0000014f: 	je	.Ltmp2129 # Offset: 335
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp2130:
    00000158: 	movq	%rbx, %rdi
    0000015b: 	movq	(%rbx), %rbx
    0000015e: 	movl	$0x18, %esi
    00000163: 	callq	_ZdlPvm@PLT # Offset: 355
    00000168: 	cmpq	%rbx, %rbp
    0000016b: 	jne	.Ltmp2130 # Offset: 363
.Ltmp2129:
    0000016d: 	addq	$0x18, %rsp
    00000171: 	movq	%rbp, %rdi
    00000174: 	movl	$0x18, %esi
    00000179: 	popq	%rbx
    0000017a: 	popq	%rbp
    0000017b: 	popq	%r12
    0000017d: 	popq	%r13
    0000017f: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 383
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp2126:
    00000188: 	movl	current_test(%rip), %edx
    0000018e: 	movq	%r13, %rsi
    00000191: 	movl	$0x1, %edi
    00000196: 	xorl	%eax, %eax
    00000198: 	movsd	%xmm2, 0x8(%rsp)
    0000019e: 	addl	$0x1, %ebx
    000001a1: 	movsd	%xmm1, (%rsp)
    000001a6: 	callq	__printf_chk@PLT # Offset: 422
    000001ab: 	movl	iterations(%rip), %ecx
    000001b1: 	cmpl	%ebx, %ecx
    000001b3: 	jle	.Ltmp2123 # Offset: 435
    000001b9: 	movq	(%rbp), %rdx
    000001bd: 	movsd	(%rsp), %xmm1
    000001c2: 	movsd	0x8(%rsp), %xmm2
    000001c8: 	cmpq	%rdx, %rbp
    000001cb: 	jne	.Ltmp2131 # Offset: 459
.Ltmp2124:
    000001d1: 	movapd	%xmm2, %xmm0
    000001d5: 	jmp	.Ltmp2132 # Offset: 469
.Ltmp2128:
    000001da: 	movq	-0x8(%rdx), %rax
    000001de: 	addq	$0x200, %rax
    000001e4: 	jmp	.Ltmp2133 # Offset: 484
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_accum_reverseIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_duplicate1IdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x172f0
  Size        : 0xfb
  MaxSize     : 0x100
  Offset      : 0x172f0
  Section     : .text
  Orc Section : .local.text._Z15test_duplicate1IdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	subq	%rdi, %rsi
    00000009: 	movq	%rdx, %r15
    0000000c: 	pushq	%r14
    0000000e: 	movq	%rsi, %r14
    00000011: 	pushq	%r13
    00000013: 	sarq	$0x3, %r14
    00000017: 	movq	%rsi, %r13
    0000001a: 	pushq	%r12
    0000001c: 	movq	%r14, %rsi
    0000001f: 	pushq	%rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdi, %rbx
    00000024: 	subq	$0x28, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x18(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %r12
    0000003b: 	movq	$0x0, 0x10(%rsp)
    00000044: 	movq	%r12, %xmm0
    00000049: 	movq	%r12, %rdi
    0000004c: 	punpcklqdq	%xmm0, %xmm0
    00000050: 	movaps	%xmm0, (%rsp)
    00000054: 	callq	_ZNSt7__cxx114listIdSaIdEE6resizeEm # Offset: 84
    00000059: 	movq	(%rsp), %rax
    0000005d: 	movq	%r14, %rbp
    00000060: 	testq	%r13, %r13
    00000063: 	jle	.Ltmp2134 # Offset: 99
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp2135:
    00000068: 	movsd	(%rbx), %xmm0
    0000006c: 	addq	$0x8, %rbx
    00000070: 	movsd	%xmm0, 0x10(%rax)
    00000075: 	movq	(%rax), %rax
    00000078: 	subq	$0x1, %rbp
    0000007c: 	jne	.Ltmp2135 # Offset: 124
.Ltmp2134:
    0000007e: 	movq	%r15, %rdx
    00000081: 	movq	%r14, %rsi
    00000084: 	movq	%r12, %rdi
    00000087: 	callq	_Z19test_duplicate_coreINSt7__cxx114listIdSaIdEEEEvRT_mRKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 135
    0000008c: 	movq	(%rsp), %rbx
    00000090: 	cmpq	%r12, %rbx
    00000093: 	je	.Ltmp2136 # Offset: 147
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp2137:
    00000098: 	movq	%rbx, %rdi
    0000009b: 	movq	(%rbx), %rbx
    0000009e: 	movl	$0x18, %esi
    000000a3: 	callq	_ZdlPvm@PLT # Offset: 163
    000000a8: 	cmpq	%r12, %rbx
    000000ab: 	jne	.Ltmp2137 # Offset: 171
.Ltmp2136:
    000000ad: 	movq	0x18(%rsp), %rax
    000000b2: 	subq	%fs:0x28, %rax
    000000bb: 	jne	.Ltmp2138 # Offset: 187
    000000bd: 	addq	$0x28, %rsp
    000000c1: 	popq	%rbx
    000000c2: 	popq	%rbp
    000000c3: 	popq	%r12
    000000c5: 	popq	%r13
    000000c7: 	popq	%r14
    000000c9: 	popq	%r15
    000000cb: 	retq # Offset: 203
.Ltmp2138:
    000000cc: 	callq	__stack_chk_fail@PLT # Offset: 204
    000000d1: 	endbr64
    000000d5: 	movq	%rax, %rbp
    000000d8: 	movq	(%rsp), %rdi
.Ltmp2140:
    000000dc: 	cmpq	%r12, %rdi
    000000df: 	je	.Ltmp2139 # Offset: 223
    000000e1: 	movq	(%rdi), %rbx
    000000e4: 	movl	$0x18, %esi
    000000e9: 	callq	_ZdlPvm@PLT # Offset: 233
    000000ee: 	movq	%rbx, %rdi
    000000f1: 	jmp	.Ltmp2140 # Offset: 241
.Ltmp2139:
    000000f3: 	movq	%rbp, %rdi
    000000f6: 	callq	_Unwind_Resume@PLT # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_duplicate1IdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0x173f0
  Size        : 0x13a
  MaxSize     : 0x140
  Offset      : 0x173f0
  Section     : .text
  Orc Section : .local.text._ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	leaq	0x8(%rdi), %r14
    0000000c: 	pushq	%r13
    0000000e: 	movq	%rsi, %r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	movq	%rdi, %rbx
    00000018: 	subq	$0x18, %rsp
    0000001c: 	movq	0x10(%rdi), %r12
    00000020: 	testq	%r12, %r12
    00000023: 	je	.Ltmp2141 # Offset: 35
    00000029: 	movsd	(%rsi), %xmm1
    0000002d: 	jmp	.Ltmp2142 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp2144:
    00000030: 	movq	0x10(%r12), %rax
    00000035: 	movl	$0x1, %edx
    0000003a: 	testq	%rax, %rax
    0000003d: 	je	.Ltmp2143 # Offset: 61
.Ltmp2145:
    0000003f: 	movq	%rax, %r12
.Ltmp2142:
    00000042: 	movsd	0x20(%r12), %xmm0
    00000049: 	comisd	%xmm1, %xmm0
    0000004d: 	ja	.Ltmp2144 # Offset: 77
    0000004f: 	movq	0x18(%r12), %rax
    00000054: 	xorl	%edx, %edx
    00000056: 	testq	%rax, %rax
    00000059: 	jne	.Ltmp2145 # Offset: 89
.Ltmp2143:
    0000005b: 	testb	%dl, %dl
    0000005d: 	jne	.Ltmp2146 # Offset: 93
    0000005f: 	comisd	%xmm0, %xmm1
    00000063: 	jbe	.Ltmp2147 # Offset: 99
.Ltmp2149:
    00000065: 	movl	$0x1, %r15d
    0000006b: 	cmpq	%r12, %r14
    0000006e: 	jne	.Ltmp2148 # Offset: 110
.Ltmp2150:
    00000074: 	movl	$0x28, %edi
    00000079: 	callq	_Znwm@PLT # Offset: 121
    0000007e: 	movq	%r12, %rdx
    00000081: 	movq	%r14, %rcx
    00000084: 	movl	%r15d, %edi
    00000087: 	movsd	(%r13), %xmm0
    0000008d: 	movq	%rax, %rsi
    00000090: 	movq	%rax, %rbp
    00000093: 	movsd	%xmm0, 0x20(%rax)
    00000098: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 152
    0000009d: 	addq	$0x1, 0x28(%rbx)
    000000a2: 	addq	$0x18, %rsp
    000000a6: 	movq	%rbp, %rax
    000000a9: 	popq	%rbx
    000000aa: 	movl	$0x1, %edx
    000000af: 	popq	%rbp
    000000b0: 	popq	%r12
    000000b2: 	popq	%r13
    000000b4: 	popq	%r14
    000000b6: 	popq	%r15
    000000b8: 	retq # Offset: 184
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp2146:
    000000c0: 	cmpq	0x18(%rbx), %r12
    000000c4: 	je	.Ltmp2149 # Offset: 196
.Ltmp2152:
    000000c6: 	movq	%r12, %rdi
    000000c9: 	movsd	%xmm1, 0x8(%rsp)
    000000cf: 	callq	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT # Offset: 207
    000000d4: 	movsd	0x8(%rsp), %xmm1
    000000da: 	comisd	0x20(%rax), %xmm1
    000000df: 	ja	.Ltmp2149 # Offset: 223
    000000e1: 	movq	%rax, %r12
.Ltmp2147:
    000000e4: 	addq	$0x18, %rsp
    000000e8: 	movq	%r12, %rax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	popq	%rbx
    000000ee: 	popq	%rbp
    000000ef: 	popq	%r12
    000000f1: 	popq	%r13
    000000f3: 	popq	%r14
    000000f5: 	popq	%r15
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2148:
    00000100: 	xorl	%r15d, %r15d
    00000103: 	movsd	0x20(%r12), %xmm0
    0000010a: 	comisd	(%r13), %xmm0
    00000110: 	seta	%r15b
    00000114: 	jmp	.Ltmp2150 # Offset: 276
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp2141:
    00000120: 	movq	%r14, %r12
    00000123: 	cmpq	0x18(%rdi), %r14
    00000127: 	je	.Ltmp2151 # Offset: 295
    00000129: 	movsd	(%rsi), %xmm1
    0000012d: 	jmp	.Ltmp2152 # Offset: 301
.Ltmp2151:
    0000012f: 	movl	$0x1, %r15d
    00000135: 	jmp	.Ltmp2150 # Offset: 309
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_"

Binary Function "_Z14test_find_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0x17530
  Size        : 0x263
  MaxSize     : 0x270
  Offset      : 0x17530
  Section     : .text
  Orc Section : .local.text._Z14test_find_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rcx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x68, %rsp
    00000018: 	movq	%r8, 0x18(%rsp)
    0000001d: 	leaq	0x28(%rsp), %rbx
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x58(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	movl	$0x0, 0x28(%rsp)
    0000003a: 	movq	$0x0, 0x30(%rsp)
    00000043: 	movq	%rbx, 0x38(%rsp)
    00000048: 	movq	%rbx, 0x40(%rsp)
    0000004d: 	movq	$0x0, 0x48(%rsp)
    00000056: 	cmpq	%rsi, %rdi
    00000059: 	je	.Ltmp2153 # Offset: 89
    0000005f: 	pxor	%xmm6, %xmm6
    00000063: 	movq	%rdi, %r12
    00000066: 	leaq	0x20(%rsp), %r15
    0000006b: 	movq	%rsi, %r14
    0000006e: 	movsd	%xmm6, 0x10(%rsp)
    00000074: 	movsd	%xmm6, 0x8(%rsp)
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2154:
    00000080: 	movq	%r12, %rsi
    00000083: 	movq	%r15, %rdi
    00000086: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 134
    0000008b: 	movsd	0x8(%rsp), %xmm4
    00000091: 	addsd	(%r12), %xmm4
    00000097: 	addq	$0x8, %r12
    0000009b: 	movsd	%xmm4, 0x8(%rsp)
    000000a1: 	cmpq	%r12, %r14
    000000a4: 	jne	.Ltmp2154 # Offset: 164
.Ltmp2169:
    000000a6: 	callq	clock@PLT # Offset: 166
    000000ab: 	movl	iterations(%rip), %edi
    000000b1: 	xorl	%r12d, %r12d
    000000b4: 	leaq	DATAat0x52360(%rip), %r14
    000000bb: 	movq	%rax, start_time(%rip)
    000000c2: 	testl	%edi, %edi
    000000c4: 	jle	.Ltmp2155 # Offset: 196
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2164:
    000000d0: 	pxor	%xmm2, %xmm2
    000000d4: 	cmpq	%rbp, %r13
    000000d7: 	je	.Ltmp2156 # Offset: 215
    000000d9: 	movq	0x30(%rsp), %rsi
    000000de: 	movsd	0x48(%rsp), %xmm3
    000000e4: 	movq	%r13, %rcx
    000000e7: 	pxor	%xmm2, %xmm2
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2162:
    000000f0: 	addq	$0x8, %rcx
    000000f4: 	testq	%rsi, %rsi
    000000f7: 	je	.Ltmp2157 # Offset: 247
    000000fd: 	movsd	-0x8(%rcx), %xmm0
    00000102: 	movq	%rsi, %rax
    00000105: 	movq	%rbx, %rdx
    00000108: 	jmp	.Ltmp2158 # Offset: 264
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2160:
    00000110: 	movq	%rax, %rdx
    00000113: 	movq	0x10(%rax), %rax
    00000117: 	testq	%rax, %rax
    0000011a: 	je	.Ltmp2159 # Offset: 282
.Ltmp2158:
    0000011c: 	comisd	0x20(%rax), %xmm0
    00000121: 	jbe	.Ltmp2160 # Offset: 289
    00000123: 	movq	0x18(%rax), %rax
    00000127: 	testq	%rax, %rax
    0000012a: 	jne	.Ltmp2158 # Offset: 298
.Ltmp2159:
    0000012c: 	movapd	%xmm3, %xmm1
    00000130: 	cmpq	%rbx, %rdx
    00000133: 	je	.Ltmp2161 # Offset: 307
    00000135: 	movsd	0x20(%rdx), %xmm1
    0000013a: 	cmpnltsd	%xmm1, %xmm0
    0000013f: 	andpd	%xmm0, %xmm1
    00000143: 	andnpd	%xmm3, %xmm0
    00000147: 	orpd	%xmm0, %xmm1
.Ltmp2161:
    0000014b: 	addsd	%xmm1, %xmm2
    0000014f: 	cmpq	%rcx, %rbp
    00000152: 	jne	.Ltmp2162 # Offset: 338
.Ltmp2156:
    00000154: 	movsd	0x8(%rsp), %xmm5
    0000015a: 	ucomisd	%xmm2, %xmm5
    0000015e: 	jp	.Ltmp2163 # Offset: 350
    00000164: 	jne	.Ltmp2163 # Offset: 356
.Ltmp2167:
    0000016a: 	addl	$0x1, %r12d
    0000016e: 	cmpl	%r12d, %edi
    00000171: 	jg	.Ltmp2164 # Offset: 369
.Ltmp2155:
    00000177: 	movq	0x18(%rsp), %rdi
    0000017c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 380
    00000181: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000188: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000018f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000196: 	je	.Ltmp2165 # Offset: 406
.Ltmp2168:
    0000019c: 	movq	-0x20(%rax), %rbp
    000001a0: 	callq	clock@PLT # Offset: 416
    000001a5: 	pxor	%xmm0, %xmm0
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	movq	%rbp, %rdi
    000001b3: 	subq	start_time(%rip), %rax
    000001ba: 	cvtsi2sd	%rax, %xmm0
    000001bf: 	divsd	DATAat0x53788(%rip), %xmm0
    000001c7: 	callq	_Z13record_resultdPKc # Offset: 455
    000001cc: 	movq	0x30(%rsp), %rdi
    000001d1: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 465
    000001d6: 	movq	0x58(%rsp), %rax
    000001db: 	subq	%fs:0x28, %rax
    000001e4: 	jne	.Ltmp2166 # Offset: 484
    000001e6: 	addq	$0x68, %rsp
    000001ea: 	popq	%rbx
    000001eb: 	popq	%rbp
    000001ec: 	popq	%r12
    000001ee: 	popq	%r13
    000001f0: 	popq	%r14
    000001f2: 	popq	%r15
    000001f4: 	retq # Offset: 500
    000001f5: 	nopl	(%rax) # Size: 3
.Ltmp2157:
    000001f8: 	movapd	%xmm3, %xmm1
    000001fc: 	jmp	.Ltmp2161 # Offset: 508
.Ltmp2163:
    00000201: 	movl	current_test(%rip), %edx
    00000207: 	movq	%r14, %rsi
    0000020a: 	movl	$0x1, %edi
    0000020f: 	xorl	%eax, %eax
    00000211: 	callq	__printf_chk@PLT # Offset: 529
    00000216: 	movl	iterations(%rip), %edi
    0000021c: 	jmp	.Ltmp2167 # Offset: 540
.Ltmp2165:
    00000221: 	movq	-0x8(%rdx), %rax
    00000225: 	addq	$0x200, %rax
    0000022b: 	jmp	.Ltmp2168 # Offset: 555
.Ltmp2153:
    00000230: 	pxor	%xmm7, %xmm7
    00000234: 	movsd	%xmm7, 0x10(%rsp)
    0000023a: 	movsd	%xmm7, 0x8(%rsp)
    00000240: 	jmp	.Ltmp2169 # Offset: 576
.Ltmp2166:
    00000245: 	callq	__stack_chk_fail@PLT # Offset: 581
    0000024a: 	endbr64
    0000024e: 	movq	%rax, %rbp
    00000251: 	movq	0x30(%rsp), %rdi
    00000256: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 598
    0000025b: 	movq	%rbp, %rdi
    0000025e: 	callq	_Unwind_Resume@PLT # Offset: 606
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_find_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_accum_setIdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0x177a0
  Size        : 0x1f3
  MaxSize     : 0x200
  Offset      : 0x177a0
  Section     : .text
  Orc Section : .local.text._Z14test_accum_setIdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x58(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x28(%rsp), %rbx
    0000002a: 	movl	$0x0, 0x28(%rsp)
    00000032: 	movq	$0x0, 0x30(%rsp)
    0000003b: 	movq	%rbx, 0x38(%rsp)
    00000040: 	movq	%rbx, 0x40(%rsp)
    00000045: 	movq	$0x0, 0x48(%rsp)
    0000004e: 	cmpq	%rsi, %rdi
    00000051: 	je	.Ltmp2170 # Offset: 81
    00000057: 	pxor	%xmm3, %xmm3
    0000005b: 	movq	%rdi, %rbp
    0000005e: 	leaq	0x20(%rsp), %r14
    00000063: 	movq	%rsi, %r12
    00000066: 	movsd	%xmm3, 0x18(%rsp)
    0000006c: 	movsd	%xmm3, 0x10(%rsp)
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2171:
    00000078: 	movq	%rbp, %rsi
    0000007b: 	movq	%r14, %rdi
    0000007e: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 126
    00000083: 	movsd	0x10(%rsp), %xmm1
    00000089: 	addsd	(%rbp), %xmm1
    0000008e: 	addq	$0x8, %rbp
    00000092: 	movsd	%xmm1, 0x10(%rsp)
    00000098: 	cmpq	%rbp, %r12
    0000009b: 	jne	.Ltmp2171 # Offset: 155
.Ltmp2181:
    0000009d: 	callq	clock@PLT # Offset: 157
    000000a2: 	movl	iterations(%rip), %r12d
    000000a9: 	xorl	%ebp, %ebp
    000000ab: 	leaq	DATAat0x52360(%rip), %r14
    000000b2: 	movq	%rax, start_time(%rip)
    000000b9: 	testl	%r12d, %r12d
    000000bc: 	jle	.Ltmp2172 # Offset: 188
    000000be: 	nop # Size: 2
.Ltmp2176:
    000000c0: 	movq	0x38(%rsp), %rax
    000000c5: 	pxor	%xmm0, %xmm0
    000000c9: 	cmpq	%rbx, %rax
    000000cc: 	je	.Ltmp2173 # Offset: 204
    000000ce: 	nop # Size: 2
.Ltmp2174:
    000000d0: 	movq	%rax, %rdi
    000000d3: 	movsd	%xmm0, 0x8(%rsp)
    000000d9: 	movq	%rax, %r15
    000000dc: 	callq	_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@PLT # Offset: 220
    000000e1: 	movsd	0x8(%rsp), %xmm0
    000000e7: 	addsd	0x20(%r15), %xmm0
    000000ed: 	cmpq	%rbx, %rax
    000000f0: 	jne	.Ltmp2174 # Offset: 240
.Ltmp2173:
    000000f2: 	movsd	0x10(%rsp), %xmm2
    000000f8: 	ucomisd	%xmm0, %xmm2
    000000fc: 	jp	.Ltmp2175 # Offset: 252
    00000102: 	jne	.Ltmp2175 # Offset: 258
.Ltmp2179:
    00000108: 	addl	$0x1, %ebp
    0000010b: 	cmpl	%r12d, %ebp
    0000010e: 	jl	.Ltmp2176 # Offset: 270
.Ltmp2172:
    00000110: 	movq	%r13, %rdi
    00000113: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 275
    00000118: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000126: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000012d: 	je	.Ltmp2177 # Offset: 301
.Ltmp2180:
    00000133: 	movq	-0x20(%rax), %rbp
    00000137: 	callq	clock@PLT # Offset: 311
    0000013c: 	pxor	%xmm0, %xmm0
    00000140: 	movq	%rax, end_time(%rip)
    00000147: 	movq	%rbp, %rdi
    0000014a: 	subq	start_time(%rip), %rax
    00000151: 	cvtsi2sd	%rax, %xmm0
    00000156: 	divsd	DATAat0x53788(%rip), %xmm0
    0000015e: 	callq	_Z13record_resultdPKc # Offset: 350
    00000163: 	movq	0x30(%rsp), %rdi
    00000168: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 360
    0000016d: 	movq	0x58(%rsp), %rax
    00000172: 	subq	%fs:0x28, %rax
    0000017b: 	jne	.Ltmp2178 # Offset: 379
    0000017d: 	addq	$0x68, %rsp
    00000181: 	popq	%rbx
    00000182: 	popq	%rbp
    00000183: 	popq	%r12
    00000185: 	popq	%r13
    00000187: 	popq	%r14
    00000189: 	popq	%r15
    0000018b: 	retq # Offset: 395
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp2175:
    00000190: 	movl	current_test(%rip), %edx
    00000196: 	movq	%r14, %rsi
    00000199: 	movl	$0x1, %edi
    0000019e: 	xorl	%eax, %eax
    000001a0: 	callq	__printf_chk@PLT # Offset: 416
    000001a5: 	movl	iterations(%rip), %r12d
    000001ac: 	jmp	.Ltmp2179 # Offset: 428
.Ltmp2177:
    000001b1: 	movq	-0x8(%rdx), %rax
    000001b5: 	addq	$0x200, %rax
    000001bb: 	jmp	.Ltmp2180 # Offset: 443
.Ltmp2170:
    000001c0: 	pxor	%xmm4, %xmm4
    000001c4: 	movsd	%xmm4, 0x18(%rsp)
    000001ca: 	movsd	%xmm4, 0x10(%rsp)
    000001d0: 	jmp	.Ltmp2181 # Offset: 464
.Ltmp2178:
    000001d5: 	callq	__stack_chk_fail@PLT # Offset: 469
    000001da: 	endbr64
    000001de: 	movq	%rax, %rbp
    000001e1: 	movq	0x30(%rsp), %rdi
    000001e6: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 486
    000001eb: 	movq	%rbp, %rdi
    000001ee: 	callq	_Unwind_Resume@PLT # Offset: 494
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_accum_setIdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_accum_set_reverseIdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0x179a0
  Size        : 0x1f3
  MaxSize     : 0x200
  Offset      : 0x179a0
  Section     : .text
  Orc Section : .local.text._Z22test_accum_set_reverseIdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x58(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x28(%rsp), %r12
    0000002a: 	movl	$0x0, 0x28(%rsp)
    00000032: 	movq	$0x0, 0x30(%rsp)
    0000003b: 	movq	%r12, 0x38(%rsp)
    00000040: 	movq	%r12, 0x40(%rsp)
    00000045: 	movq	$0x0, 0x48(%rsp)
    0000004e: 	cmpq	%rsi, %rdi
    00000051: 	je	.Ltmp2182 # Offset: 81
    00000057: 	pxor	%xmm3, %xmm3
    0000005b: 	movq	%rdi, %rbx
    0000005e: 	leaq	0x20(%rsp), %r13
    00000063: 	movq	%rsi, %rbp
    00000066: 	movsd	%xmm3, 0x18(%rsp)
    0000006c: 	movsd	%xmm3, 0x10(%rsp)
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2183:
    00000078: 	movq	%rbx, %rsi
    0000007b: 	movq	%r13, %rdi
    0000007e: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 126
    00000083: 	movsd	0x10(%rsp), %xmm1
    00000089: 	addsd	(%rbx), %xmm1
    0000008d: 	addq	$0x8, %rbx
    00000091: 	movsd	%xmm1, 0x10(%rsp)
    00000097: 	cmpq	%rbx, %rbp
    0000009a: 	jne	.Ltmp2183 # Offset: 154
.Ltmp2193:
    0000009c: 	callq	clock@PLT # Offset: 156
    000000a1: 	movl	iterations(%rip), %r13d
    000000a8: 	xorl	%ebp, %ebp
    000000aa: 	leaq	DATAat0x52360(%rip), %r15
    000000b1: 	movq	%rax, start_time(%rip)
    000000b8: 	testl	%r13d, %r13d
    000000bb: 	jle	.Ltmp2184 # Offset: 187
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp2188:
    000000c0: 	movq	0x38(%rsp), %rbx
    000000c5: 	pxor	%xmm0, %xmm0
    000000c9: 	cmpq	%r12, %rbx
    000000cc: 	je	.Ltmp2185 # Offset: 204
    000000ce: 	movq	%r12, %rdi
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp2186:
    000000d8: 	movsd	%xmm0, 0x8(%rsp)
    000000de: 	callq	_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base@PLT # Offset: 222
    000000e3: 	movsd	0x8(%rsp), %xmm0
    000000e9: 	movq	%rax, %rdi
    000000ec: 	addsd	0x20(%rax), %xmm0
    000000f1: 	cmpq	%rax, %rbx
    000000f4: 	jne	.Ltmp2186 # Offset: 244
.Ltmp2185:
    000000f6: 	movsd	0x10(%rsp), %xmm2
    000000fc: 	ucomisd	%xmm0, %xmm2
    00000100: 	jp	.Ltmp2187 # Offset: 256
    00000106: 	jne	.Ltmp2187 # Offset: 262
.Ltmp2191:
    0000010c: 	addl	$0x1, %ebp
    0000010f: 	cmpl	%r13d, %ebp
    00000112: 	jl	.Ltmp2188 # Offset: 274
.Ltmp2184:
    00000114: 	movq	%r14, %rdi
    00000117: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 279
    0000011c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000123: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000012a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000131: 	je	.Ltmp2189 # Offset: 305
.Ltmp2192:
    00000133: 	movq	-0x20(%rax), %rbp
    00000137: 	callq	clock@PLT # Offset: 311
    0000013c: 	pxor	%xmm0, %xmm0
    00000140: 	movq	%rax, end_time(%rip)
    00000147: 	movq	%rbp, %rdi
    0000014a: 	subq	start_time(%rip), %rax
    00000151: 	cvtsi2sd	%rax, %xmm0
    00000156: 	divsd	DATAat0x53788(%rip), %xmm0
    0000015e: 	callq	_Z13record_resultdPKc # Offset: 350
    00000163: 	movq	0x30(%rsp), %rdi
    00000168: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 360
    0000016d: 	movq	0x58(%rsp), %rax
    00000172: 	subq	%fs:0x28, %rax
    0000017b: 	jne	.Ltmp2190 # Offset: 379
    0000017d: 	addq	$0x68, %rsp
    00000181: 	popq	%rbx
    00000182: 	popq	%rbp
    00000183: 	popq	%r12
    00000185: 	popq	%r13
    00000187: 	popq	%r14
    00000189: 	popq	%r15
    0000018b: 	retq # Offset: 395
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp2187:
    00000190: 	movl	current_test(%rip), %edx
    00000196: 	movq	%r15, %rsi
    00000199: 	movl	$0x1, %edi
    0000019e: 	xorl	%eax, %eax
    000001a0: 	callq	__printf_chk@PLT # Offset: 416
    000001a5: 	movl	iterations(%rip), %r13d
    000001ac: 	jmp	.Ltmp2191 # Offset: 428
.Ltmp2189:
    000001b1: 	movq	-0x8(%rdx), %rax
    000001b5: 	addq	$0x200, %rax
    000001bb: 	jmp	.Ltmp2192 # Offset: 443
.Ltmp2182:
    000001c0: 	pxor	%xmm4, %xmm4
    000001c4: 	movsd	%xmm4, 0x18(%rsp)
    000001ca: 	movsd	%xmm4, 0x10(%rsp)
    000001d0: 	jmp	.Ltmp2193 # Offset: 464
.Ltmp2190:
    000001d5: 	callq	__stack_chk_fail@PLT # Offset: 469
    000001da: 	endbr64
    000001de: 	movq	%rax, %rbp
    000001e1: 	movq	0x30(%rsp), %rdi
    000001e6: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 486
    000001eb: 	movq	%rbp, %rdi
    000001ee: 	callq	_Unwind_Resume@PLT # Offset: 494
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_accum_set_reverseIdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZN11HashMapBaseIdd20HashMapBaseAllocatorIddEE15grow_hash_tableEv" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0x17ba0
  Size        : 0x2fe
  MaxSize     : 0x300
  Offset      : 0x17ba0
  Section     : .text
  Orc Section : .local.text._ZN11HashMapBaseIdd20HashMapBaseAllocatorIddEE15grow_hash_tableEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0x10(%rdi), %rbp
    00000019: 	movss	0x28(%rdi), %xmm1
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x28(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	0x18(%rdi), %rax
    00000032: 	movq	%rax, 0x10(%rsp)
    00000037: 	testq	%rbp, %rbp
    0000003a: 	je	.Ltmp2194 # Offset: 58
    00000040: 	js	.Ltmp2195 # Offset: 64
    00000046: 	pxor	%xmm0, %xmm0
    0000004a: 	cvtsi2ss	%rbp, %xmm0
.Ltmp2214:
    0000004f: 	divss	%xmm1, %xmm0
    00000053: 	movss	DATAat0x537b0(%rip), %xmm2
    0000005b: 	movss	DATAat0x5379c(%rip), %xmm3
    00000063: 	movaps	%xmm0, %xmm1
    00000066: 	andps	%xmm2, %xmm1
    00000069: 	ucomiss	%xmm1, %xmm3
    0000006c: 	jbe	.Ltmp2196 # Offset: 108
    0000006e: 	cvttss2si	%xmm0, %eax
    00000072: 	pxor	%xmm1, %xmm1
    00000076: 	movaps	%xmm0, %xmm3
    00000079: 	movss	DATAat0x53798(%rip), %xmm4
    00000081: 	andnps	%xmm0, %xmm2
    00000084: 	cvtsi2ss	%eax, %xmm1
    00000088: 	cmpnless	%xmm1, %xmm3
    0000008d: 	andps	%xmm4, %xmm3
    00000090: 	addss	%xmm3, %xmm1
    00000094: 	orps	%xmm2, %xmm1
    00000097: 	movaps	%xmm1, %xmm0
.Ltmp2196:
    0000009a: 	comiss	DATAat0x537a0(%rip), %xmm0
    000000a1: 	jae	.Ltmp2197 # Offset: 161
    000000a7: 	cvttss2si	%xmm0, %rax
.Ltmp2215:
    000000ac: 	movl	$0x8, %edx
    000000b1: 	movq	%rbp, %xmm5
    000000b6: 	cmpq	%rdx, %rax
    000000b9: 	cmovbq	%rdx, %rax
    000000bd: 	movq	%rax, %rdx
    000000c0: 	shrq	%rdx
    000000c3: 	addq	%rdx, %rax
    000000c6: 	movq	%rax, %xmm0
    000000cb: 	punpcklqdq	%xmm5, %xmm0
    000000cf: 	movups	%xmm0, 0x10(%rbx)
    000000d3: 	cmpq	0x10(%rsp), %rbp
    000000d8: 	je	.Ltmp2198 # Offset: 216
    000000de: 	movq	%rbp, %rax
    000000e1: 	shrq	$0x3c, %rax
    000000e5: 	jne	.Ltmp2199 # Offset: 229
    000000eb: 	leaq	(,%rbp,8), %rdi
.Ltmp2211:
    000000f3: 	callq	_Znam@PLT # Offset: 243
    000000f8: 	xorl	%esi, %esi
    000000fa: 	movl	$0xc70f6907, %r13d
    00000100: 	leaq	(,%rbp,8), %rdx
    00000108: 	movq	%rax, %rdi
    0000010b: 	movq	%rax, %r14
    0000010e: 	leaq	0x20(%rsp), %r12
    00000113: 	callq	memset@PLT # Offset: 275
    00000118: 	movq	0x20(%rbx), %rax
    0000011c: 	cmpq	$0x0, 0x10(%rsp)
    00000122: 	movq	$0x0, 0x8(%rsp)
    0000012b: 	pxor	%xmm1, %xmm1
    0000012f: 	movq	%rax, 0x18(%rsp)
    00000134: 	je	.Ltmp2200 # Offset: 308
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2206:
    00000140: 	movq	0x18(%rsp), %rax
    00000145: 	movq	0x8(%rsp), %rcx
    0000014a: 	movq	(%rax,%rcx,8), %r15
    0000014e: 	testq	%r15, %r15
    00000151: 	jne	.Ltmp2201 # Offset: 337
    00000153: 	jmp	.Ltmp2202 # Offset: 339
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp2204:
    00000158: 	movq	(%r14), %rax
    0000015b: 	movq	%rax, 0x10(%r15)
    0000015f: 	movq	%r15, (%r14)
    00000162: 	testq	%rbp, %rbp
    00000165: 	je	.Ltmp2202 # Offset: 357
.Ltmp2205:
    00000167: 	movq	%rbp, %r15
.Ltmp2201:
    0000016a: 	movsd	(%r15), %xmm0
    0000016f: 	movq	0x10(%r15), %rbp
    00000173: 	ucomisd	%xmm1, %xmm0
    00000177: 	movsd	%xmm0, 0x20(%rsp)
    0000017d: 	jp	.Ltmp2203 # Offset: 381
    0000017f: 	je	.Ltmp2204 # Offset: 383
.Ltmp2203:
    00000181: 	movq	%r13, %rdx
    00000184: 	movl	$0x8, %esi
    00000189: 	movq	%r12, %rdi
    0000018c: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 396
    00000191: 	xorl	%edx, %edx
    00000193: 	pxor	%xmm1, %xmm1
    00000197: 	divq	0x18(%rbx)
    0000019b: 	testq	%rbp, %rbp
    0000019e: 	leaq	(%r14,%rdx,8), %rax
    000001a2: 	movq	(%rax), %rdx
    000001a5: 	movq	%rdx, 0x10(%r15)
    000001a9: 	movq	%r15, (%rax)
    000001ac: 	jne	.Ltmp2205 # Offset: 428
.Ltmp2202:
    000001ae: 	addq	$0x1, 0x8(%rsp)
    000001b4: 	movq	0x8(%rsp), %rax
    000001b9: 	cmpq	%rax, 0x10(%rsp)
    000001be: 	jne	.Ltmp2206 # Offset: 446
    000001c0: 	movq	0x20(%rbx), %rax
    000001c4: 	movq	%rax, 0x18(%rsp)
.Ltmp2200:
    000001c9: 	testq	%rax, %rax
    000001cc: 	je	.Ltmp2207 # Offset: 460
    000001ce: 	movq	%rax, %rdi
    000001d1: 	callq	_ZdaPv@PLT # Offset: 465
.Ltmp2207:
    000001d6: 	movq	%r14, 0x20(%rbx)
.Ltmp2198:
    000001da: 	movq	0x28(%rsp), %rax
    000001df: 	subq	%fs:0x28, %rax
    000001e8: 	jne	.Ltmp2208 # Offset: 488
    000001ee: 	addq	$0x38, %rsp
    000001f2: 	popq	%rbx
    000001f3: 	popq	%rbp
    000001f4: 	popq	%r12
    000001f6: 	popq	%r13
    000001f8: 	popq	%r14
    000001fa: 	popq	%r15
    000001fc: 	retq # Offset: 508
.Ltmp2194:
    000001fd: 	movss	DATAat0x537a4(%rip), %xmm0
    00000205: 	movss	DATAat0x537b0(%rip), %xmm2
    0000020d: 	movss	DATAat0x5379c(%rip), %xmm3
    00000215: 	divss	%xmm1, %xmm0
    00000219: 	movaps	%xmm0, %xmm1
    0000021c: 	andps	%xmm2, %xmm1
    0000021f: 	ucomiss	%xmm1, %xmm3
    00000222: 	ja	.Ltmp2209 # Offset: 546
    00000224: 	comiss	DATAat0x537a0(%rip), %xmm0
    0000022b: 	jae	.Ltmp2210 # Offset: 555
.Ltmp2213:
    0000022d: 	cvttss2si	%xmm0, %rax
.Ltmp2212:
    00000232: 	movl	$0x8, %edx
    00000237: 	movq	$0x8, 0x18(%rbx)
    0000023f: 	cmpq	%rdx, %rax
    00000242: 	cmovbq	%rdx, %rax
    00000246: 	movq	%rax, %rdx
    00000249: 	shrq	%rdx
    0000024c: 	addq	%rdx, %rax
    0000024f: 	cmpq	$0x8, 0x10(%rsp)
    00000255: 	movq	%rax, 0x10(%rbx)
    00000259: 	je	.Ltmp2198 # Offset: 601
    0000025f: 	movl	$0x40, %edi
    00000264: 	movl	$0x8, %ebp
    00000269: 	jmp	.Ltmp2211 # Offset: 617
.Ltmp2210:
    0000026e: 	subss	DATAat0x537a0(%rip), %xmm0
    00000276: 	cvttss2si	%xmm0, %rax
    0000027b: 	btcq	$0x3f, %rax
    00000280: 	jmp	.Ltmp2212 # Offset: 640
.Ltmp2209:
    00000282: 	cvttss2si	%xmm0, %eax
    00000286: 	pxor	%xmm1, %xmm1
    0000028a: 	movaps	%xmm0, %xmm3
    0000028d: 	movss	DATAat0x53798(%rip), %xmm4
    00000295: 	andnps	%xmm0, %xmm2
    00000298: 	cvtsi2ss	%eax, %xmm1
    0000029c: 	cmpnless	%xmm1, %xmm3
    000002a1: 	andps	%xmm4, %xmm3
    000002a4: 	addss	%xmm3, %xmm1
    000002a8: 	orps	%xmm2, %xmm1
    000002ab: 	movaps	%xmm1, %xmm0
    000002ae: 	comiss	DATAat0x537a0(%rip), %xmm0
    000002b5: 	jae	.Ltmp2210 # Offset: 693
    000002b7: 	jmp	.Ltmp2213 # Offset: 695
.Ltmp2195:
    000002bc: 	movq	%rbp, %rax
    000002bf: 	movq	%rbp, %rdx
    000002c2: 	pxor	%xmm0, %xmm0
    000002c6: 	shrq	%rax
    000002c9: 	andl	$0x1, %edx
    000002cc: 	orq	%rdx, %rax
    000002cf: 	cvtsi2ss	%rax, %xmm0
    000002d4: 	addss	%xmm0, %xmm0
    000002d8: 	jmp	.Ltmp2214 # Offset: 728
.Ltmp2197:
    000002dd: 	subss	DATAat0x537a0(%rip), %xmm0
    000002e5: 	cvttss2si	%xmm0, %rax
    000002ea: 	btcq	$0x3f, %rax
    000002ef: 	jmp	.Ltmp2215 # Offset: 751
.Ltmp2208:
    000002f4: 	callq	__stack_chk_fail@PLT # Offset: 756
.Ltmp2199:
    000002f9: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 761
DWARF CFI Instructions:
    <empty>
End of Function "_ZN11HashMapBaseIdd20HashMapBaseAllocatorIddEE15grow_hash_tableEv"

Binary Function "_Z23test_find_simplehashmapId7HashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0x17ea0
  Size        : 0x616
  MaxSize     : 0x620
  Offset      : 0x17ea0
  Section     : .text
  Orc Section : .local.text._Z23test_find_simplehashmapId7HashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	subq	$0xa8, %rsp
    00000019: 	movq	%rsi, 0x28(%rsp)
    0000001e: 	movq	%rdx, 0x20(%rsp)
    00000023: 	movq	%rcx, 0x18(%rsp)
    00000028: 	movq	%r8, 0x48(%rsp)
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x98(%rsp)
    0000003e: 	xorl	%eax, %eax
    00000040: 	movups	%xmm0, 0x68(%rsp)
    00000045: 	movq	$0x0, 0x78(%rsp)
    0000004e: 	movq	$0x0, 0x80(%rsp)
    0000005a: 	movl	$0x3f800000, 0x88(%rsp)
    00000065: 	cmpq	%rsi, %rdi
    00000068: 	je	.Ltmp2216 # Offset: 104
    0000006e: 	pxor	%xmm3, %xmm3
    00000072: 	xorl	%ebp, %ebp
    00000074: 	movq	%rdi, %r12
    00000077: 	movl	$0xc70f6907, %r13d
    0000007d: 	movq	$0x0, 0x8(%rsp)
    00000086: 	movsd	%xmm3, (%rsp)
    0000008b: 	movsd	%xmm3, 0x10(%rsp)
    00000091: 	testq	%rbp, %rbp
    00000094: 	je	.Ltmp2217 # Offset: 148
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2223:
    000000a0: 	movq	0x80(%rsp), %rbx
.Ltmp2234:
    000000a8: 	movsd	(%r12), %xmm0
    000000ae: 	ucomisd	(%rsp), %xmm0
    000000b3: 	movsd	%xmm0, 0x58(%rsp)
    000000b9: 	jp	.Ltmp2218 # Offset: 185
    000000bf: 	jne	.Ltmp2218 # Offset: 191
    000000c5: 	movq	(%rbx), %rax
    000000c8: 	testq	%rax, %rax
    000000cb: 	je	.Ltmp2219 # Offset: 203
.Ltmp2235:
    000000d1: 	movsd	(%r12), %xmm0
    000000d7: 	jmp	.Ltmp2220 # Offset: 215
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2221:
    000000e0: 	movq	0x10(%rax), %rax
    000000e4: 	testq	%rax, %rax
    000000e7: 	je	.Ltmp2219 # Offset: 231
.Ltmp2220:
    000000ed: 	ucomisd	(%rax), %xmm0
    000000f1: 	jp	.Ltmp2221 # Offset: 241
    000000f3: 	jne	.Ltmp2221 # Offset: 243
    000000f5: 	movsd	%xmm0, 0x8(%rax)
    000000fa: 	movsd	(%r12), %xmm0
.Ltmp2236:
    00000100: 	addsd	0x10(%rsp), %xmm0
    00000106: 	addq	$0x8, %r12
    0000010a: 	movsd	%xmm0, 0x10(%rsp)
    00000110: 	cmpq	%r12, 0x28(%rsp)
    00000115: 	je	.Ltmp2222 # Offset: 277
    0000011b: 	movq	0x78(%rsp), %rax
    00000120: 	movq	0x70(%rsp), %rbp
    00000125: 	movq	%rax, 0x8(%rsp)
    0000012a: 	testq	%rbp, %rbp
    0000012d: 	jne	.Ltmp2223 # Offset: 301
.Ltmp2217:
    00000133: 	movss	DATAat0x537b0(%rip), %xmm2
    0000013b: 	movss	DATAat0x537a4(%rip), %xmm0
    00000143: 	divss	0x88(%rsp), %xmm0
    0000014c: 	movaps	%xmm0, %xmm1
    0000014f: 	movss	DATAat0x5379c(%rip), %xmm3
    00000157: 	andps	%xmm2, %xmm1
    0000015a: 	ucomiss	%xmm1, %xmm3
    0000015d: 	jbe	.Ltmp2224 # Offset: 349
    0000015f: 	cvttss2si	%xmm0, %eax
    00000163: 	pxor	%xmm1, %xmm1
    00000167: 	movaps	%xmm0, %xmm3
    0000016a: 	movss	DATAat0x53798(%rip), %xmm6
    00000172: 	andnps	%xmm0, %xmm2
    00000175: 	cvtsi2ss	%eax, %xmm1
    00000179: 	cmpnless	%xmm1, %xmm3
    0000017e: 	andps	%xmm6, %xmm3
    00000181: 	addss	%xmm3, %xmm1
    00000185: 	orps	%xmm2, %xmm1
    00000188: 	movaps	%xmm1, %xmm0
.Ltmp2224:
    0000018b: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000192: 	jae	.Ltmp2225 # Offset: 402
    00000198: 	cvttss2si	%xmm0, %rax
.Ltmp2237:
    0000019d: 	movq	$0x8, 0x78(%rsp)
    000001a6: 	movl	$0x8, %edx
    000001ab: 	cmpq	%rdx, %rax
    000001ae: 	cmovbq	%rdx, %rax
    000001b2: 	movq	%rax, %rdx
    000001b5: 	shrq	%rdx
    000001b8: 	addq	%rdx, %rax
    000001bb: 	cmpq	$0x8, 0x8(%rsp)
    000001c1: 	movq	%rax, 0x38(%rsp)
    000001c6: 	movq	%rax, 0x70(%rsp)
    000001cb: 	je	.Ltmp2226 # Offset: 459
    000001d1: 	movl	$0x40, %edi
    000001d6: 	leaq	0x60(%rsp), %r15
    000001db: 	callq	_Znam@PLT # Offset: 475
    000001e0: 	pxor	%xmm0, %xmm0
    000001e4: 	movq	%rax, %rbx
    000001e7: 	cmpq	$0x0, 0x8(%rsp)
    000001ed: 	movups	%xmm0, (%rax)
    000001f0: 	movups	%xmm0, 0x10(%rax)
    000001f4: 	movups	%xmm0, 0x20(%rax)
    000001f8: 	movups	%xmm0, 0x30(%rax)
    000001fc: 	movq	0x80(%rsp), %rax
    00000204: 	movq	%rax, 0x30(%rsp)
    00000209: 	je	.Ltmp2227 # Offset: 521
    0000020f: 	movq	%r12, 0x40(%rsp)
    00000214: 	movq	%rbx, %r12
    00000217: 	movq	0x30(%rsp), %rbx
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp2233:
    00000220: 	movq	(%rbx,%rbp,8), %r14
    00000224: 	testq	%r14, %r14
    00000227: 	jne	.Ltmp2228 # Offset: 551
    00000229: 	jmp	.Ltmp2229 # Offset: 553
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2231:
    00000230: 	movq	(%r12), %rax
    00000234: 	movq	%rax, 0x10(%r14)
    00000238: 	movq	%r14, (%r12)
    0000023c: 	testq	%r15, %r15
    0000023f: 	je	.Ltmp2229 # Offset: 575
.Ltmp2232:
    00000241: 	movq	%r15, %r14
.Ltmp2228:
    00000244: 	movsd	(%r14), %xmm0
    00000249: 	ucomisd	(%rsp), %xmm0
    0000024e: 	movq	0x10(%r14), %r15
    00000252: 	movsd	%xmm0, 0x58(%rsp)
    00000258: 	jp	.Ltmp2230 # Offset: 600
    0000025a: 	je	.Ltmp2231 # Offset: 602
.Ltmp2230:
    0000025c: 	movq	%r13, %rdx
    0000025f: 	leaq	0x58(%rsp), %rdi
    00000264: 	movl	$0x8, %esi
    00000269: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 617
    0000026e: 	andl	$0x7, %eax
    00000271: 	leaq	(%r12,%rax,8), %rax
    00000275: 	movq	(%rax), %rdx
    00000278: 	movq	%rdx, 0x10(%r14)
    0000027c: 	movq	%r14, (%rax)
    0000027f: 	testq	%r15, %r15
    00000282: 	jne	.Ltmp2232 # Offset: 642
.Ltmp2229:
    00000284: 	addq	$0x1, %rbp
    00000288: 	cmpq	0x8(%rsp), %rbp
    0000028d: 	jne	.Ltmp2233 # Offset: 653
    0000028f: 	movq	%r12, %rbx
    00000292: 	movq	0x40(%rsp), %r12
.Ltmp2256:
    00000297: 	movq	0x30(%rsp), %rdi
    0000029c: 	callq	_ZdaPv@PLT # Offset: 668
.Ltmp2255:
    000002a1: 	movq	%rbx, 0x80(%rsp)
    000002a9: 	movq	0x38(%rsp), %rbp
    000002ae: 	movq	$0x8, 0x8(%rsp)
    000002b7: 	jmp	.Ltmp2234 # Offset: 695
.Ltmp2218:
    000002bc: 	movq	%r13, %rdx
    000002bf: 	leaq	0x58(%rsp), %rdi
    000002c4: 	movl	$0x8, %esi
    000002c9: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 713
    000002ce: 	xorl	%edx, %edx
    000002d0: 	divq	0x8(%rsp)
    000002d5: 	leaq	(%rbx,%rdx,8), %rbx
    000002d9: 	movq	(%rbx), %rax
    000002dc: 	testq	%rax, %rax
    000002df: 	jne	.Ltmp2235 # Offset: 735
    000002e5: 	nopl	(%rax) # Size: 3
.Ltmp2219:
    000002e8: 	movl	$0x18, %edi
    000002ed: 	leaq	0x60(%rsp), %r15
    000002f2: 	callq	_Znwm@PLT # Offset: 754
    000002f7: 	movsd	(%r12), %xmm0
    000002fd: 	movq	(%rbx), %rdx
    00000300: 	movapd	%xmm0, %xmm1
    00000304: 	movq	%rdx, 0x10(%rax)
    00000308: 	unpcklpd	%xmm1, %xmm1
    0000030c: 	movups	%xmm1, (%rax)
    0000030f: 	movq	%rax, (%rbx)
    00000312: 	movq	0x68(%rsp), %rax
    00000317: 	addq	$0x1, %rax
    0000031b: 	movq	%rax, 0x68(%rsp)
    00000320: 	cmpq	%rbp, %rax
    00000323: 	jbe	.Ltmp2236 # Offset: 803
    00000329: 	leaq	0x60(%rsp), %r15
    0000032e: 	movq	%r15, %rdi
    00000331: 	callq	_ZN11HashMapBaseIdd20HashMapBaseAllocatorIddEE15grow_hash_tableEv # Offset: 817
    00000336: 	movsd	(%r12), %xmm0
    0000033c: 	jmp	.Ltmp2236 # Offset: 828
.Ltmp2225:
    00000341: 	subss	DATAat0x537a0(%rip), %xmm0
    00000349: 	cvttss2si	%xmm0, %rax
    0000034e: 	btcq	$0x3f, %rax
    00000353: 	jmp	.Ltmp2237 # Offset: 851
.Ltmp2216:
    00000358: 	pxor	%xmm7, %xmm7
    0000035c: 	movsd	%xmm7, (%rsp)
    00000361: 	movsd	%xmm7, 0x10(%rsp)
.Ltmp2222:
    00000367: 	callq	clock@PLT # Offset: 871
    0000036c: 	xorl	%ebx, %ebx
    0000036e: 	movl	$0xc70f6907, %ebp
    00000373: 	leaq	0x58(%rsp), %r12
    00000378: 	movq	%rax, start_time(%rip)
    0000037f: 	movl	iterations(%rip), %eax
    00000385: 	leaq	DATAat0x52360(%rip), %r13
    0000038c: 	testl	%eax, %eax
    0000038e: 	jle	.Ltmp2238 # Offset: 910
    00000394: 	nopl	(%rax) # Size: 4
.Ltmp2246:
    00000398: 	movq	0x18(%rsp), %rcx
    0000039d: 	pxor	%xmm1, %xmm1
    000003a1: 	cmpq	%rcx, 0x20(%rsp)
    000003a6: 	je	.Ltmp2239 # Offset: 934
    000003ac: 	movq	0x78(%rsp), %r15
    000003b1: 	movq	0x20(%rsp), %r14
    000003b6: 	movq	%r12, %rax
    000003b9: 	pxor	%xmm1, %xmm1
    000003bd: 	movq	%r15, %r12
    000003c0: 	movq	%r14, %r15
    000003c3: 	movq	%rax, %r14
.Ltmp2244:
    000003c6: 	testq	%r12, %r12
    000003c9: 	je	.Ltmp2240 # Offset: 969
    000003cf: 	movsd	(%r15), %xmm0
    000003d4: 	ucomisd	(%rsp), %xmm0
    000003d9: 	movsd	%xmm0, 0x58(%rsp)
    000003df: 	jp	.Ltmp2241 # Offset: 991
    000003e5: 	movl	$0x0, %edx
    000003ea: 	jne	.Ltmp2241 # Offset: 1002
.Ltmp2253:
    000003f0: 	movq	0x80(%rsp), %rax
    000003f8: 	movq	(%rax,%rdx), %rax
    000003fc: 	testq	%rax, %rax
    000003ff: 	je	.Ltmp2240 # Offset: 1023
    00000405: 	movsd	(%r15), %xmm0
    0000040a: 	jmp	.Ltmp2242 # Offset: 1034
    0000040c: 	nopl	(%rax) # Size: 4
.Ltmp2243:
    00000410: 	movq	0x10(%rax), %rax
    00000414: 	testq	%rax, %rax
    00000417: 	je	.Ltmp2240 # Offset: 1047
.Ltmp2242:
    0000041d: 	ucomisd	(%rax), %xmm0
    00000421: 	jp	.Ltmp2243 # Offset: 1057
    00000423: 	jne	.Ltmp2243 # Offset: 1059
    00000425: 	addsd	0x8(%rax), %xmm1
    0000042a: 	addq	$0x8, %r15
    0000042e: 	cmpq	%r15, 0x18(%rsp)
    00000433: 	jne	.Ltmp2244 # Offset: 1075
    00000435: 	movq	%r14, %r12
.Ltmp2239:
    00000438: 	movsd	0x10(%rsp), %xmm2
    0000043e: 	ucomisd	%xmm1, %xmm2
    00000442: 	jp	.Ltmp2245 # Offset: 1090
    00000448: 	jne	.Ltmp2245 # Offset: 1096
.Ltmp2254:
    0000044e: 	addl	$0x1, %ebx
    00000451: 	cmpl	%ebx, iterations(%rip)
    00000457: 	jg	.Ltmp2246 # Offset: 1111
.Ltmp2238:
    0000045d: 	movq	0x48(%rsp), %rdi
    00000462: 	leaq	0x60(%rsp), %r15
    00000467: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1127
    0000046c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000473: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000047a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000481: 	je	.Ltmp2247 # Offset: 1153
.Ltmp2258:
    00000487: 	movq	-0x20(%rax), %rbp
    0000048b: 	leaq	0x60(%rsp), %r15
    00000490: 	callq	clock@PLT # Offset: 1168
    00000495: 	pxor	%xmm0, %xmm0
    00000499: 	movq	%rax, end_time(%rip)
    000004a0: 	movq	%rbp, %rdi
    000004a3: 	subq	start_time(%rip), %rax
    000004aa: 	cvtsi2sd	%rax, %xmm0
    000004af: 	divsd	DATAat0x53788(%rip), %xmm0
    000004b7: 	callq	_Z13record_resultdPKc # Offset: 1207
    000004bc: 	movq	0x78(%rsp), %r13
    000004c1: 	movq	0x80(%rsp), %r12
    000004c9: 	xorl	%ebp, %ebp
    000004cb: 	testq	%r13, %r13
    000004ce: 	je	.Ltmp2248 # Offset: 1230
    000004d4: 	nopl	(%rax) # Size: 4
.Ltmp2251:
    000004d8: 	movq	(%r12,%rbp,8), %rbx
    000004dc: 	movq	$0x0, (%r12,%rbp,8)
    000004e4: 	testq	%rbx, %rbx
    000004e7: 	je	.Ltmp2249 # Offset: 1255
    000004e9: 	nopl	(%rax) # Size: 7
.Ltmp2250:
    000004f0: 	movq	%rbx, %rdi
    000004f3: 	movq	0x10(%rbx), %rbx
    000004f7: 	movl	$0x18, %esi
    000004fc: 	callq	_ZdlPvm@PLT # Offset: 1276
    00000501: 	testq	%rbx, %rbx
    00000504: 	jne	.Ltmp2250 # Offset: 1284
.Ltmp2249:
    00000506: 	addq	$0x1, %rbp
    0000050a: 	cmpq	%r13, %rbp
    0000050d: 	jne	.Ltmp2251 # Offset: 1293
.Ltmp2257:
    0000050f: 	movq	0x98(%rsp), %rax
    00000517: 	subq	%fs:0x28, %rax
    00000520: 	jne	.Ltmp2252 # Offset: 1312
    00000526: 	addq	$0xa8, %rsp
    0000052d: 	movq	%r12, %rdi
    00000530: 	popq	%rbx
    00000531: 	popq	%rbp
    00000532: 	popq	%r12
    00000534: 	popq	%r13
    00000536: 	popq	%r14
    00000538: 	popq	%r15
    0000053a: 	jmp	_ZdaPv@PLT # TAILCALL  # Offset: 1338
    0000053f: 	nop # Size: 1
.Ltmp2241:
    00000540: 	movq	%rbp, %rdx
    00000543: 	movl	$0x8, %esi
    00000548: 	movq	%r14, %rdi
    0000054b: 	movsd	%xmm1, 0x8(%rsp)
    00000551: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1361
    00000556: 	xorl	%edx, %edx
    00000558: 	movsd	0x8(%rsp), %xmm1
    0000055e: 	divq	%r12
    00000561: 	shlq	$0x3, %rdx
    00000565: 	jmp	.Ltmp2253 # Offset: 1381
.Ltmp2245:
    0000056a: 	movl	current_test(%rip), %edx
    00000570: 	movq	%r13, %rsi
    00000573: 	movl	$0x1, %edi
    00000578: 	xorl	%eax, %eax
    0000057a: 	leaq	0x60(%rsp), %r15
    0000057f: 	callq	__printf_chk@PLT # Offset: 1407
    00000584: 	jmp	.Ltmp2254 # Offset: 1412
.Ltmp2227:
    00000589: 	testq	%rax, %rax
    0000058c: 	je	.Ltmp2255 # Offset: 1420
    00000592: 	jmp	.Ltmp2256 # Offset: 1426
    00000597: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2226:
    000005a0: 	movq	0x80(%rsp), %rbx
    000005a8: 	movq	%rax, %rbp
    000005ab: 	jmp	.Ltmp2234 # Offset: 1451
.Ltmp2248:
    000005b0: 	testq	%r12, %r12
    000005b3: 	jne	.Ltmp2257 # Offset: 1459
    000005b9: 	movq	0x98(%rsp), %rax
    000005c1: 	subq	%fs:0x28, %rax
    000005ca: 	jne	.Ltmp2252 # Offset: 1482
    000005cc: 	addq	$0xa8, %rsp
    000005d3: 	popq	%rbx
    000005d4: 	popq	%rbp
    000005d5: 	popq	%r12
    000005d7: 	popq	%r13
    000005d9: 	popq	%r14
    000005db: 	popq	%r15
    000005dd: 	retq # Offset: 1501
.Ltmp2247:
    000005de: 	movq	-0x8(%rdx), %rax
    000005e2: 	addq	$0x200, %rax
    000005e8: 	jmp	.Ltmp2258 # Offset: 1512
.Ltmp2252:
    000005ed: 	callq	__stack_chk_fail@PLT # Offset: 1517
    000005f2: 	endbr64
    000005f6: 	movq	%rax, %rbp
    000005f9: 	jmp	.Ltmp2259 # Offset: 1529
.Ltmp2240:
    000005fb: 	movsd	0x8, %xmm0
    00000604: 	ud2
.Ltmp2259:
    00000606: 	movq	%r15, %rdi
    00000609: 	callq	_ZN7HashMapIddED2Ev # Offset: 1545
    0000060e: 	movq	%rbp, %rdi
    00000611: 	callq	_Unwind_Resume@PLT # Offset: 1553
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_find_simplehashmapId7HashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24test_accum_simplehashmapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0x184c0
  Size        : 0x606
  MaxSize     : 0x610
  Offset      : 0x184c0
  Section     : .text
  Orc Section : .local.text._Z24test_accum_simplehashmapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	subq	$0xd8, %rsp
    00000019: 	movq	%rsi, 0x18(%rsp)
    0000001e: 	movq	%rdx, 0x28(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0xc8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	movl	$0x3f800000, 0x58(%rsp)
    0000003e: 	movq	$0x0, 0x48(%rsp)
    00000047: 	movq	$0x0, 0x50(%rsp)
    00000050: 	movups	%xmm0, 0x38(%rsp)
    00000055: 	cmpq	%rsi, %rdi
    00000058: 	je	.Ltmp2260 # Offset: 88
    0000005e: 	xorl	%ebp, %ebp
    00000060: 	movq	$0x0, (%rsp)
    00000068: 	movq	%rdi, %r13
    0000006b: 	movl	$0xc70f6907, %r12d
    00000071: 	movq	$0x0, 0x8(%rsp)
    0000007a: 	testq	%rbp, %rbp
    0000007d: 	je	.Ltmp2261 # Offset: 125
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2267:
    00000088: 	movq	0x50(%rsp), %rbx
.Ltmp2278:
    0000008d: 	movsd	(%r13), %xmm0
    00000093: 	pxor	%xmm5, %xmm5
    00000097: 	movsd	%xmm0, 0x90(%rsp)
    000000a0: 	ucomisd	%xmm5, %xmm0
    000000a4: 	jp	.Ltmp2262 # Offset: 164
    000000aa: 	jne	.Ltmp2262 # Offset: 170
    000000b0: 	movq	(%rbx), %rax
    000000b3: 	testq	%rax, %rax
    000000b6: 	je	.Ltmp2263 # Offset: 182
.Ltmp2279:
    000000bc: 	movsd	(%r13), %xmm0
    000000c2: 	jmp	.Ltmp2264 # Offset: 194
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp2265:
    000000c8: 	movq	0x10(%rax), %rax
    000000cc: 	testq	%rax, %rax
    000000cf: 	je	.Ltmp2263 # Offset: 207
.Ltmp2264:
    000000d5: 	ucomisd	(%rax), %xmm0
    000000d9: 	jp	.Ltmp2265 # Offset: 217
    000000db: 	jne	.Ltmp2265 # Offset: 219
    000000dd: 	addq	$0x8, %rax
.Ltmp2281:
    000000e1: 	movsd	%xmm0, (%rax)
    000000e5: 	addsd	0x8(%rsp), %xmm0
    000000eb: 	addq	$0x8, %r13
    000000ef: 	movsd	%xmm0, 0x8(%rsp)
    000000f5: 	cmpq	%r13, 0x18(%rsp)
    000000fa: 	je	.Ltmp2266 # Offset: 250
    00000100: 	movq	0x48(%rsp), %rax
    00000105: 	movq	0x40(%rsp), %rbp
    0000010a: 	movq	%rax, (%rsp)
    0000010e: 	testq	%rbp, %rbp
    00000111: 	jne	.Ltmp2267 # Offset: 273
.Ltmp2261:
    00000117: 	movss	DATAat0x537b0(%rip), %xmm2
    0000011f: 	movss	DATAat0x537a4(%rip), %xmm0
    00000127: 	divss	0x58(%rsp), %xmm0
    0000012d: 	movaps	%xmm0, %xmm1
    00000130: 	movss	DATAat0x5379c(%rip), %xmm3
    00000138: 	andps	%xmm2, %xmm1
    0000013b: 	ucomiss	%xmm1, %xmm3
    0000013e: 	jbe	.Ltmp2268 # Offset: 318
    00000140: 	cvttss2si	%xmm0, %eax
    00000144: 	pxor	%xmm1, %xmm1
    00000148: 	movaps	%xmm0, %xmm3
    0000014b: 	movss	DATAat0x53798(%rip), %xmm6
    00000153: 	andnps	%xmm0, %xmm2
    00000156: 	cvtsi2ss	%eax, %xmm1
    0000015a: 	cmpnless	%xmm1, %xmm3
    0000015f: 	andps	%xmm6, %xmm3
    00000162: 	addss	%xmm3, %xmm1
    00000166: 	orps	%xmm2, %xmm1
    00000169: 	movaps	%xmm1, %xmm0
.Ltmp2268:
    0000016c: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000173: 	jae	.Ltmp2269 # Offset: 371
    00000179: 	cvttss2si	%xmm0, %rax
.Ltmp2282:
    0000017e: 	movq	$0x8, 0x48(%rsp)
    00000187: 	movl	$0x8, %edx
    0000018c: 	cmpq	%rdx, %rax
    0000018f: 	cmovbq	%rdx, %rax
    00000193: 	movq	%rax, %rdx
    00000196: 	shrq	%rdx
    00000199: 	addq	%rdx, %rax
    0000019c: 	cmpq	$0x8, (%rsp)
    000001a1: 	movq	%rax, 0x20(%rsp)
    000001a6: 	movq	%rax, 0x40(%rsp)
    000001ab: 	je	.Ltmp2270 # Offset: 427
    000001b1: 	movl	$0x40, %edi
    000001b6: 	leaq	0x30(%rsp), %r15
    000001bb: 	callq	_Znam@PLT # Offset: 443
    000001c0: 	pxor	%xmm0, %xmm0
    000001c4: 	movq	%rax, %rbx
    000001c7: 	cmpq	$0x0, (%rsp)
    000001cc: 	movups	%xmm0, (%rax)
    000001cf: 	movups	%xmm0, 0x10(%rax)
    000001d3: 	movups	%xmm0, 0x20(%rax)
    000001d7: 	movups	%xmm0, 0x30(%rax)
    000001db: 	movq	0x50(%rsp), %rax
    000001e0: 	movq	%rax, 0x10(%rsp)
    000001e5: 	je	.Ltmp2271 # Offset: 485
    000001eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2277:
    000001f0: 	movq	0x10(%rsp), %rax
    000001f5: 	movq	(%rax,%rbp,8), %r15
    000001f9: 	testq	%r15, %r15
    000001fc: 	jne	.Ltmp2272 # Offset: 508
    000001fe: 	jmp	.Ltmp2273 # Offset: 510
.Ltmp2275:
    00000200: 	movq	(%rbx), %rax
    00000203: 	movq	%rax, 0x10(%r15)
    00000207: 	movq	%r15, (%rbx)
    0000020a: 	testq	%r14, %r14
    0000020d: 	je	.Ltmp2273 # Offset: 525
.Ltmp2276:
    0000020f: 	movq	%r14, %r15
.Ltmp2272:
    00000212: 	movsd	(%r15), %xmm0
    00000217: 	pxor	%xmm4, %xmm4
    0000021b: 	movq	0x10(%r15), %r14
    0000021f: 	movsd	%xmm0, 0x90(%rsp)
    00000228: 	ucomisd	%xmm4, %xmm0
    0000022c: 	jp	.Ltmp2274 # Offset: 556
    0000022e: 	je	.Ltmp2275 # Offset: 558
.Ltmp2274:
    00000230: 	movq	%r12, %rdx
    00000233: 	leaq	0x90(%rsp), %rdi
    0000023b: 	movl	$0x8, %esi
    00000240: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 576
    00000245: 	andl	$0x7, %eax
    00000248: 	leaq	(%rbx,%rax,8), %rax
    0000024c: 	movq	(%rax), %rdx
    0000024f: 	movq	%rdx, 0x10(%r15)
    00000253: 	movq	%r15, (%rax)
    00000256: 	testq	%r14, %r14
    00000259: 	jne	.Ltmp2276 # Offset: 601
.Ltmp2273:
    0000025b: 	addq	$0x1, %rbp
    0000025f: 	cmpq	(%rsp), %rbp
    00000263: 	jne	.Ltmp2277 # Offset: 611
.Ltmp2299:
    00000265: 	movq	0x10(%rsp), %rdi
    0000026a: 	callq	_ZdaPv@PLT # Offset: 618
.Ltmp2298:
    0000026f: 	movq	%rbx, 0x50(%rsp)
    00000274: 	movq	0x20(%rsp), %rbp
    00000279: 	movq	$0x8, (%rsp)
    00000281: 	jmp	.Ltmp2278 # Offset: 641
    00000286: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2262:
    00000290: 	movq	%r12, %rdx
    00000293: 	leaq	0x90(%rsp), %rdi
    0000029b: 	movl	$0x8, %esi
    000002a0: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 672
    000002a5: 	xorl	%edx, %edx
    000002a7: 	divq	(%rsp)
    000002ab: 	leaq	(%rbx,%rdx,8), %rbx
    000002af: 	movq	(%rbx), %rax
    000002b2: 	testq	%rax, %rax
    000002b5: 	jne	.Ltmp2279 # Offset: 693
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2263:
    000002c0: 	movl	$0x18, %edi
    000002c5: 	leaq	0x30(%rsp), %r15
    000002ca: 	callq	_Znwm@PLT # Offset: 714
    000002cf: 	movsd	(%r13), %xmm0
    000002d5: 	movq	$0x0, 0x8(%rax)
    000002dd: 	movq	%rax, %r14
    000002e0: 	movsd	%xmm0, (%rax)
    000002e4: 	movq	(%rbx), %rax
    000002e7: 	movq	%rax, 0x10(%r14)
    000002eb: 	movq	0x38(%rsp), %rax
    000002f0: 	movq	%r14, (%rbx)
    000002f3: 	addq	$0x1, %rax
    000002f7: 	movq	%rax, 0x38(%rsp)
    000002fc: 	cmpq	%rbp, %rax
    000002ff: 	ja	.Ltmp2280 # Offset: 767
.Ltmp2300:
    00000305: 	leaq	0x8(%r14), %rax
    00000309: 	jmp	.Ltmp2281 # Offset: 777
.Ltmp2269:
    0000030e: 	subss	DATAat0x537a0(%rip), %xmm0
    00000316: 	cvttss2si	%xmm0, %rax
    0000031b: 	btcq	$0x3f, %rax
    00000320: 	jmp	.Ltmp2282 # Offset: 800
.Ltmp2260:
    00000325: 	pxor	%xmm7, %xmm7
    00000329: 	movsd	%xmm7, 0x8(%rsp)
.Ltmp2266:
    0000032f: 	callq	clock@PLT # Offset: 815
    00000334: 	movl	iterations(%rip), %r9d
    0000033b: 	movq	%rax, start_time(%rip)
    00000342: 	testl	%r9d, %r9d
    00000345: 	jle	.Ltmp2283 # Offset: 837
    0000034b: 	movq	0x48(%rsp), %r12
    00000350: 	leaq	0x30(%rsp), %rax
    00000355: 	movq	0x50(%rsp), %rbx
    0000035a: 	leaq	DATAat0x52360(%rip), %r14
    00000361: 	movq	%rax, (%rsp)
    00000365: 	testq	%r12, %r12
    00000368: 	sete	%r13b
    0000036c: 	xorl	%ebp, %ebp
    0000036e: 	nop # Size: 2
.Ltmp2287:
    00000370: 	movq	(%rbx), %rax
    00000373: 	movq	%rbx, %xmm7
    00000378: 	pxor	%xmm2, %xmm2
    0000037c: 	movq	%r12, 0x78(%rsp)
    00000381: 	movaps	%xmm2, 0x80(%rsp)
    00000389: 	movq	%rax, %xmm0
    0000038e: 	punpcklqdq	%xmm7, %xmm0
    00000392: 	movaps	%xmm0, 0x60(%rsp)
    00000397: 	testq	%rax, %rax
    0000039a: 	jne	.Ltmp2284 # Offset: 922
    0000039c: 	testb	%r13b, %r13b
    0000039f: 	je	.Ltmp2285 # Offset: 927
.Ltmp2284:
    000003a5: 	xorl	%eax, %eax
.Ltmp2295:
    000003a7: 	pxor	%xmm3, %xmm3
    000003ab: 	pxor	%xmm1, %xmm1
    000003af: 	movq	$0x0, 0x90(%rsp)
    000003bb: 	movq	%rbx, 0x98(%rsp)
    000003c3: 	movq	%rax, 0x70(%rsp)
    000003c8: 	movaps	%xmm3, 0xa0(%rsp)
    000003d0: 	movaps	%xmm1, 0xb0(%rsp)
    000003d8: 	pushq	$0x0
    000003da: 	pushq	$0x0
    000003dc: 	pushq	$0x0
    000003de: 	pushq	$0x0
    000003e0: 	pushq	0xb8(%rsp)
    000003e7: 	pushq	0xb8(%rsp)
    000003ee: 	pushq	0xb8(%rsp)
    000003f5: 	pushq	0xb8(%rsp)
    000003fc: 	pushq	0xb8(%rsp)
    00000403: 	pushq	0xb8(%rsp)
    0000040a: 	pushq	0xb8(%rsp)
    00000411: 	pushq	0xb8(%rsp)
    00000418: 	callq	"_Z17myaccumulate_pairI27ConstHashMapForwardIteratorIddEdET0_T_S3_S2_.constprop.0/1" # Offset: 1048
    0000041d: 	addq	$0x60, %rsp
    00000421: 	ucomisd	0x8(%rsp), %xmm0
    00000427: 	jp	.Ltmp2286 # Offset: 1063
    0000042d: 	jne	.Ltmp2286 # Offset: 1069
.Ltmp2297:
    00000433: 	addl	$0x1, %ebp
    00000436: 	cmpl	%r9d, %ebp
    00000439: 	jl	.Ltmp2287 # Offset: 1081
.Ltmp2283:
    0000043f: 	movq	0x28(%rsp), %rdi
    00000444: 	leaq	0x30(%rsp), %r15
    00000449: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1097
    0000044e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000455: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000045c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000463: 	je	.Ltmp2288 # Offset: 1123
.Ltmp2302:
    00000469: 	movq	-0x20(%rax), %rbp
    0000046d: 	leaq	0x30(%rsp), %r15
    00000472: 	callq	clock@PLT # Offset: 1138
    00000477: 	pxor	%xmm0, %xmm0
    0000047b: 	movq	%rax, end_time(%rip)
    00000482: 	movq	%rbp, %rdi
    00000485: 	subq	start_time(%rip), %rax
    0000048c: 	cvtsi2sd	%rax, %xmm0
    00000491: 	divsd	DATAat0x53788(%rip), %xmm0
    00000499: 	callq	_Z13record_resultdPKc # Offset: 1177
    0000049e: 	movq	0x48(%rsp), %r13
    000004a3: 	movq	0x50(%rsp), %r12
    000004a8: 	xorl	%ebp, %ebp
    000004aa: 	testq	%r13, %r13
    000004ad: 	je	.Ltmp2289 # Offset: 1197
    000004b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2292:
    000004b8: 	movq	(%r12,%rbp,8), %rbx
    000004bc: 	movq	$0x0, (%r12,%rbp,8)
    000004c4: 	testq	%rbx, %rbx
    000004c7: 	je	.Ltmp2290 # Offset: 1223
    000004c9: 	nopl	(%rax) # Size: 7
.Ltmp2291:
    000004d0: 	movq	%rbx, %rdi
    000004d3: 	movq	0x10(%rbx), %rbx
    000004d7: 	movl	$0x18, %esi
    000004dc: 	callq	_ZdlPvm@PLT # Offset: 1244
    000004e1: 	testq	%rbx, %rbx
    000004e4: 	jne	.Ltmp2291 # Offset: 1252
.Ltmp2290:
    000004e6: 	addq	$0x1, %rbp
    000004ea: 	cmpq	%r13, %rbp
    000004ed: 	jne	.Ltmp2292 # Offset: 1261
.Ltmp2301:
    000004ef: 	movq	0xc8(%rsp), %rax
    000004f7: 	subq	%fs:0x28, %rax
    00000500: 	jne	.Ltmp2293 # Offset: 1280
    00000506: 	addq	$0xd8, %rsp
    0000050d: 	movq	%r12, %rdi
    00000510: 	popq	%rbx
    00000511: 	popq	%rbp
    00000512: 	popq	%r12
    00000514: 	popq	%r13
    00000516: 	popq	%r14
    00000518: 	popq	%r15
    0000051a: 	jmp	_ZdaPv@PLT # TAILCALL  # Offset: 1306
    0000051f: 	nop # Size: 1
.Ltmp2285:
    00000520: 	movl	$0x1, %eax
    00000525: 	cmpq	$0x1, %r12
    00000529: 	jne	.Ltmp2294 # Offset: 1321
    0000052b: 	jmp	.Ltmp2295 # Offset: 1323
.Ltmp2296:
    00000530: 	addq	$0x1, %rax
    00000534: 	cmpq	%r12, %rax
    00000537: 	je	.Ltmp2295 # Offset: 1335
.Ltmp2294:
    0000053d: 	movq	(%rbx,%rax,8), %rdx
    00000541: 	testq	%rdx, %rdx
    00000544: 	je	.Ltmp2296 # Offset: 1348
    00000546: 	movq	%rdx, 0x60(%rsp)
    0000054b: 	jmp	.Ltmp2295 # Offset: 1355
.Ltmp2286:
    00000550: 	movl	current_test(%rip), %edx
    00000556: 	movq	%r14, %rsi
    00000559: 	movl	$0x1, %edi
    0000055e: 	xorl	%eax, %eax
    00000560: 	movq	(%rsp), %r15
    00000564: 	callq	__printf_chk@PLT # Offset: 1380
    00000569: 	movl	iterations(%rip), %r9d
    00000570: 	jmp	.Ltmp2297 # Offset: 1392
.Ltmp2271:
    00000575: 	testq	%rax, %rax
    00000578: 	je	.Ltmp2298 # Offset: 1400
    0000057e: 	jmp	.Ltmp2299 # Offset: 1406
    00000583: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2270:
    00000588: 	movq	0x50(%rsp), %rbx
    0000058d: 	movq	%rax, %rbp
    00000590: 	jmp	.Ltmp2278 # Offset: 1424
.Ltmp2280:
    00000595: 	leaq	0x30(%rsp), %r15
    0000059a: 	movq	%r15, %rdi
    0000059d: 	callq	_ZN11HashMapBaseIdd20HashMapBaseAllocatorIddEE15grow_hash_tableEv # Offset: 1437
    000005a2: 	movsd	(%r13), %xmm0
    000005a8: 	jmp	.Ltmp2300 # Offset: 1448
.Ltmp2289:
    000005ad: 	testq	%r12, %r12
    000005b0: 	jne	.Ltmp2301 # Offset: 1456
    000005b6: 	movq	0xc8(%rsp), %rax
    000005be: 	subq	%fs:0x28, %rax
    000005c7: 	jne	.Ltmp2293 # Offset: 1479
    000005c9: 	addq	$0xd8, %rsp
    000005d0: 	popq	%rbx
    000005d1: 	popq	%rbp
    000005d2: 	popq	%r12
    000005d4: 	popq	%r13
    000005d6: 	popq	%r14
    000005d8: 	popq	%r15
    000005da: 	retq # Offset: 1498
.Ltmp2288:
    000005db: 	movq	-0x8(%rdx), %rax
    000005df: 	addq	$0x200, %rax
    000005e5: 	jmp	.Ltmp2302 # Offset: 1509
.Ltmp2293:
    000005ea: 	callq	__stack_chk_fail@PLT # Offset: 1514
    000005ef: 	endbr64
    000005f3: 	movq	%rax, %rbp
    000005f6: 	movq	%r15, %rdi
    000005f9: 	callq	_ZN7HashMapIddED2Ev # Offset: 1529
    000005fe: 	movq	%rbp, %rdi
    00000601: 	callq	_Unwind_Resume@PLT # Offset: 1537
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_accum_simplehashmapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0x18ad0
  Size        : 0x321
  MaxSize     : 0x330
  Offset      : 0x18ad0
  Section     : .text
  Orc Section : .local.text._ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0xa8(%rdi), %rbp
    0000001c: 	movss	0xc0(%rdi), %xmm1
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x28(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	movq	0xb0(%rdi), %rax
    0000003b: 	movq	%rax, 0x10(%rsp)
    00000040: 	testq	%rbp, %rbp
    00000043: 	je	.Ltmp2303 # Offset: 67
    00000049: 	js	.Ltmp2304 # Offset: 73
    0000004f: 	pxor	%xmm0, %xmm0
    00000053: 	cvtsi2ss	%rbp, %xmm0
.Ltmp2323:
    00000058: 	divss	%xmm1, %xmm0
    0000005c: 	movss	DATAat0x537b0(%rip), %xmm2
    00000064: 	movss	DATAat0x5379c(%rip), %xmm3
    0000006c: 	movaps	%xmm0, %xmm1
    0000006f: 	andps	%xmm2, %xmm1
    00000072: 	ucomiss	%xmm1, %xmm3
    00000075: 	jbe	.Ltmp2305 # Offset: 117
    00000077: 	cvttss2si	%xmm0, %eax
    0000007b: 	pxor	%xmm1, %xmm1
    0000007f: 	movaps	%xmm0, %xmm3
    00000082: 	movss	DATAat0x53798(%rip), %xmm4
    0000008a: 	andnps	%xmm0, %xmm2
    0000008d: 	cvtsi2ss	%eax, %xmm1
    00000091: 	cmpnless	%xmm1, %xmm3
    00000096: 	andps	%xmm4, %xmm3
    00000099: 	addss	%xmm3, %xmm1
    0000009d: 	orps	%xmm2, %xmm1
    000000a0: 	movaps	%xmm1, %xmm0
.Ltmp2305:
    000000a3: 	comiss	DATAat0x537a0(%rip), %xmm0
    000000aa: 	jae	.Ltmp2306 # Offset: 170
    000000b0: 	cvttss2si	%xmm0, %rax
.Ltmp2324:
    000000b5: 	movl	$0x8, %edx
    000000ba: 	movq	%rbp, %xmm5
    000000bf: 	cmpq	%rdx, %rax
    000000c2: 	cmovbq	%rdx, %rax
    000000c6: 	movq	%rax, %rdx
    000000c9: 	shrq	%rdx
    000000cc: 	addq	%rdx, %rax
    000000cf: 	movq	%rax, %xmm0
    000000d4: 	punpcklqdq	%xmm5, %xmm0
    000000d8: 	movups	%xmm0, 0xa8(%rbx)
    000000df: 	cmpq	0x10(%rsp), %rbp
    000000e4: 	je	.Ltmp2307 # Offset: 228
    000000ea: 	movq	%rbp, %rax
    000000ed: 	shrq	$0x3c, %rax
    000000f1: 	jne	.Ltmp2308 # Offset: 241
    000000f7: 	leaq	(,%rbp,8), %rdi
.Ltmp2320:
    000000ff: 	callq	_Znam@PLT # Offset: 255
    00000104: 	xorl	%esi, %esi
    00000106: 	movl	$0xc70f6907, %r13d
    0000010c: 	leaq	(,%rbp,8), %rdx
    00000114: 	movq	%rax, %rdi
    00000117: 	movq	%rax, %r14
    0000011a: 	leaq	0x20(%rsp), %r12
    0000011f: 	callq	memset@PLT # Offset: 287
    00000124: 	movq	0xb8(%rbx), %rax
    0000012b: 	cmpq	$0x0, 0x10(%rsp)
    00000131: 	movq	$0x0, 0x8(%rsp)
    0000013a: 	pxor	%xmm1, %xmm1
    0000013e: 	movq	%rax, 0x18(%rsp)
    00000143: 	je	.Ltmp2309 # Offset: 323
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2315:
    00000150: 	movq	0x18(%rsp), %rax
    00000155: 	movq	0x8(%rsp), %rcx
    0000015a: 	movq	(%rax,%rcx,8), %r15
    0000015e: 	testq	%r15, %r15
    00000161: 	jne	.Ltmp2310 # Offset: 353
    00000163: 	jmp	.Ltmp2311 # Offset: 355
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp2313:
    00000168: 	movq	(%r14), %rax
    0000016b: 	movq	%rax, 0x10(%r15)
    0000016f: 	movq	%r15, (%r14)
    00000172: 	testq	%rbp, %rbp
    00000175: 	je	.Ltmp2311 # Offset: 373
.Ltmp2314:
    00000177: 	movq	%rbp, %r15
.Ltmp2310:
    0000017a: 	movsd	(%r15), %xmm0
    0000017f: 	movq	0x10(%r15), %rbp
    00000183: 	ucomisd	%xmm1, %xmm0
    00000187: 	movsd	%xmm0, 0x20(%rsp)
    0000018d: 	jp	.Ltmp2312 # Offset: 397
    0000018f: 	je	.Ltmp2313 # Offset: 399
.Ltmp2312:
    00000191: 	movq	%r13, %rdx
    00000194: 	movl	$0x8, %esi
    00000199: 	movq	%r12, %rdi
    0000019c: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 412
    000001a1: 	xorl	%edx, %edx
    000001a3: 	pxor	%xmm1, %xmm1
    000001a7: 	divq	0xb0(%rbx)
    000001ae: 	testq	%rbp, %rbp
    000001b1: 	leaq	(%r14,%rdx,8), %rax
    000001b5: 	movq	(%rax), %rdx
    000001b8: 	movq	%rdx, 0x10(%r15)
    000001bc: 	movq	%r15, (%rax)
    000001bf: 	jne	.Ltmp2314 # Offset: 447
.Ltmp2311:
    000001c1: 	addq	$0x1, 0x8(%rsp)
    000001c7: 	movq	0x8(%rsp), %rax
    000001cc: 	cmpq	%rax, 0x10(%rsp)
    000001d1: 	jne	.Ltmp2315 # Offset: 465
    000001d7: 	movq	0xb8(%rbx), %rax
    000001de: 	movq	%rax, 0x18(%rsp)
.Ltmp2309:
    000001e3: 	testq	%rax, %rax
    000001e6: 	je	.Ltmp2316 # Offset: 486
    000001e8: 	movq	%rax, %rdi
    000001eb: 	callq	_ZdaPv@PLT # Offset: 491
.Ltmp2316:
    000001f0: 	movq	%r14, 0xb8(%rbx)
.Ltmp2307:
    000001f7: 	movq	0x28(%rsp), %rax
    000001fc: 	subq	%fs:0x28, %rax
    00000205: 	jne	.Ltmp2317 # Offset: 517
    0000020b: 	addq	$0x38, %rsp
    0000020f: 	popq	%rbx
    00000210: 	popq	%rbp
    00000211: 	popq	%r12
    00000213: 	popq	%r13
    00000215: 	popq	%r14
    00000217: 	popq	%r15
    00000219: 	retq # Offset: 537
.Ltmp2303:
    0000021a: 	movss	DATAat0x537a4(%rip), %xmm0
    00000222: 	movss	DATAat0x537b0(%rip), %xmm2
    0000022a: 	movss	DATAat0x5379c(%rip), %xmm3
    00000232: 	divss	%xmm1, %xmm0
    00000236: 	movaps	%xmm0, %xmm1
    00000239: 	andps	%xmm2, %xmm1
    0000023c: 	ucomiss	%xmm1, %xmm3
    0000023f: 	ja	.Ltmp2318 # Offset: 575
    00000241: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000248: 	jae	.Ltmp2319 # Offset: 584
.Ltmp2322:
    0000024a: 	cvttss2si	%xmm0, %rax
.Ltmp2321:
    0000024f: 	movq	$0x8, 0xb0(%rbx)
    0000025a: 	movl	$0x8, %edx
    0000025f: 	cmpq	%rdx, %rax
    00000262: 	cmovbq	%rdx, %rax
    00000266: 	movq	%rax, %rdx
    00000269: 	shrq	%rdx
    0000026c: 	addq	%rdx, %rax
    0000026f: 	cmpq	$0x8, 0x10(%rsp)
    00000275: 	movq	%rax, 0xa8(%rbx)
    0000027c: 	je	.Ltmp2307 # Offset: 636
    00000282: 	movl	$0x40, %edi
    00000287: 	movl	$0x8, %ebp
    0000028c: 	jmp	.Ltmp2320 # Offset: 652
.Ltmp2319:
    00000291: 	subss	DATAat0x537a0(%rip), %xmm0
    00000299: 	cvttss2si	%xmm0, %rax
    0000029e: 	btcq	$0x3f, %rax
    000002a3: 	jmp	.Ltmp2321 # Offset: 675
.Ltmp2318:
    000002a5: 	cvttss2si	%xmm0, %eax
    000002a9: 	pxor	%xmm1, %xmm1
    000002ad: 	movaps	%xmm0, %xmm3
    000002b0: 	movss	DATAat0x53798(%rip), %xmm4
    000002b8: 	andnps	%xmm0, %xmm2
    000002bb: 	cvtsi2ss	%eax, %xmm1
    000002bf: 	cmpnless	%xmm1, %xmm3
    000002c4: 	andps	%xmm4, %xmm3
    000002c7: 	addss	%xmm3, %xmm1
    000002cb: 	orps	%xmm2, %xmm1
    000002ce: 	movaps	%xmm1, %xmm0
    000002d1: 	comiss	DATAat0x537a0(%rip), %xmm0
    000002d8: 	jae	.Ltmp2319 # Offset: 728
    000002da: 	jmp	.Ltmp2322 # Offset: 730
.Ltmp2304:
    000002df: 	movq	%rbp, %rax
    000002e2: 	movq	%rbp, %rdx
    000002e5: 	pxor	%xmm0, %xmm0
    000002e9: 	shrq	%rax
    000002ec: 	andl	$0x1, %edx
    000002ef: 	orq	%rdx, %rax
    000002f2: 	cvtsi2ss	%rax, %xmm0
    000002f7: 	addss	%xmm0, %xmm0
    000002fb: 	jmp	.Ltmp2323 # Offset: 763
.Ltmp2306:
    00000300: 	subss	DATAat0x537a0(%rip), %xmm0
    00000308: 	cvttss2si	%xmm0, %rax
    0000030d: 	btcq	$0x3f, %rax
    00000312: 	jmp	.Ltmp2324 # Offset: 786
.Ltmp2317:
    00000317: 	callq	__stack_chk_fail@PLT # Offset: 791
.Ltmp2308:
    0000031c: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 796
DWARF CFI Instructions:
    <empty>
End of Function "_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv"

Binary Function "_ZNSt6vectorIPSt3setIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0x18e00
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x18e00
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt3setIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp2325 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp2326 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp2327 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp2328 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp2329 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp2336:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp2330 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp2330:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp2331 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp2332 # Offset: 200
.Ltmp2334:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp2326:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp2333 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp2333:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2325:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2331:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp2335:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp2334 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2332:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp2335 # Offset: 392
.Ltmp2329:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp2337:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp2336 # Offset: 445
.Ltmp2328:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp2337 # Offset: 460
.Ltmp2327:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt3setIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm"

Binary Function "_Z15test_erase_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0x18fe0
  Size        : 0x4be
  MaxSize     : 0x4c0
  Offset      : 0x18fe0
  Section     : .text
  Orc Section : .local.text._Z15test_erase_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x88, %rsp
    00000015: 	movq	%rdx, 0x28(%rsp)
    0000001a: 	xorl	%edx, %edx
    0000001c: 	movq	%rcx, 0x8(%rsp)
    00000021: 	movq	%rsi, %rcx
    00000024: 	movq	%rdi, 0x20(%rsp)
    00000029: 	subq	%rdi, %rcx
    0000002c: 	movq	%rsi, (%rsp)
    00000030: 	movq	%r8, 0x50(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x78(%rsp)
    00000043: 	xorl	%eax, %eax
    00000045: 	movabsq	$0x500000000, %rax
    0000004f: 	divq	%rcx
    00000052: 	movq	%rax, 0x30(%rsp)
    00000057: 	cmpq	$0x3e8, %rax
    0000005d: 	ja	.Ltmp2338 # Offset: 93
    00000063: 	cmpq	$0x3, %rax
    00000067: 	ja	.Ltmp2339 # Offset: 103
    0000006d: 	movq	$0x0, 0x70(%rsp)
    00000076: 	pxor	%xmm0, %xmm0
    0000007a: 	movq	$0x4, 0x30(%rsp)
    00000083: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp2373:
    00000088: 	movq	0x30(%rsp), %rbx
    0000008d: 	leaq	0x60(%rsp), %rdi
    00000092: 	movq	%rbx, %rsi
    00000095: 	callq	_ZNSt6vectorIPSt3setIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 149
    0000009a: 	movl	iterations(%rip), %eax
    000000a0: 	testl	%eax, %eax
    000000a2: 	jle	.Ltmp2340 # Offset: 162
    000000a8: 	movl	%ebx, 0x4c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x48(%rsp)
    000000b8: 	movsd	%xmm2, 0x38(%rsp)
.Ltmp2369:
    000000be: 	movslq	0x48(%rsp), %rdx
    000000c3: 	movslq	%eax, %rcx
    000000c6: 	movq	0x60(%rsp), %r14
    000000cb: 	movq	%rdx, %rsi
    000000ce: 	addq	0x30(%rsp), %rdx
    000000d3: 	movq	%r14, 0x40(%rsp)
    000000d8: 	subl	%esi, %eax
    000000da: 	cmpq	%rcx, %rdx
    000000dd: 	leaq	0x8(%r14), %rdx
    000000e1: 	cmovbl	0x4c(%rsp), %eax
    000000e6: 	movq	%rdx, 0x58(%rsp)
    000000eb: 	subl	$0x1, %eax
    000000ee: 	leaq	(%rdx,%rax,8), %rax
    000000f2: 	movq	%rax, 0x18(%rsp)
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2343:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movl	$0x0, 0x8(%rax)
    00000111: 	movq	%rax, %rbp
    00000114: 	leaq	0x8(%rax), %rax
    00000118: 	movq	$0x0, 0x8(%rax)
    00000120: 	movq	%rax, 0x18(%rbp)
    00000124: 	movq	%rax, 0x20(%rbp)
    00000128: 	movq	0x20(%rsp), %rax
    0000012d: 	movq	$0x0, 0x28(%rbp)
    00000135: 	movq	%rax, %rbx
    00000138: 	cmpq	%rax, (%rsp)
    0000013c: 	je	.Ltmp2341 # Offset: 316
    0000013e: 	nop # Size: 2
.Ltmp2342:
    00000140: 	movq	%rbx, %rsi
    00000143: 	movq	%rbp, %rdi
    00000146: 	addq	$0x8, %rbx
    0000014a: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 330
    0000014f: 	cmpq	%rbx, (%rsp)
    00000153: 	jne	.Ltmp2342 # Offset: 339
.Ltmp2341:
    00000155: 	movq	%rbp, (%r14)
    00000158: 	addq	$0x8, %r14
    0000015c: 	cmpq	%r14, 0x18(%rsp)
    00000161: 	jne	.Ltmp2343 # Offset: 353
    00000163: 	callq	clock@PLT # Offset: 355
    00000168: 	movq	0x8(%rsp), %rdx
    0000016d: 	movq	%rax, start_time(%rip)
    00000174: 	cmpq	%rdx, 0x28(%rsp)
    00000179: 	je	.Ltmp2344 # Offset: 377
    0000017f: 	movq	0x40(%rsp), %rax
    00000184: 	movq	%rax, 0x10(%rsp)
.Ltmp2353:
    00000189: 	movq	0x10(%rsp), %rax
    0000018e: 	movq	0x28(%rsp), %rbp
    00000193: 	movq	(%rax), %r14
    00000196: 	leaq	0x8(%r14), %rbx
    0000019a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2352:
    000001a0: 	movq	0x10(%r14), %r15
    000001a4: 	addq	$0x8, %rbp
    000001a8: 	testq	%r15, %r15
    000001ab: 	je	.Ltmp2345 # Offset: 427
    000001b1: 	movsd	-0x8(%rbp), %xmm1
    000001b6: 	movq	%rbx, %r13
    000001b9: 	movq	%r15, %r12
    000001bc: 	jmp	.Ltmp2346 # Offset: 444
    000001be: 	nop # Size: 2
.Ltmp2348:
    000001c0: 	movq	0x18(%r12), %r12
    000001c5: 	testq	%r12, %r12
    000001c8: 	je	.Ltmp2347 # Offset: 456
.Ltmp2346:
    000001ca: 	movsd	0x20(%r12), %xmm0
    000001d1: 	comisd	%xmm0, %xmm1
    000001d5: 	ja	.Ltmp2348 # Offset: 469
    000001d7: 	comisd	%xmm1, %xmm0
    000001db: 	movq	0x10(%r12), %rax
    000001e0: 	jbe	.Ltmp2349 # Offset: 480
    000001e6: 	movq	%r12, %r13
    000001e9: 	movq	%rax, %r12
    000001ec: 	testq	%r12, %r12
    000001ef: 	jne	.Ltmp2346 # Offset: 495
.Ltmp2347:
    000001f1: 	cmpq	%r13, 0x18(%r14)
    000001f5: 	jne	.Ltmp2350 # Offset: 501
    000001f7: 	cmpq	%r13, %rbx
    000001fa: 	je	.Ltmp2351 # Offset: 506
.Ltmp2350:
    00000200: 	cmpq	%rbp, 0x8(%rsp)
    00000205: 	jne	.Ltmp2352 # Offset: 517
    00000207: 	addq	$0x8, 0x10(%rsp)
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	cmpq	%rax, 0x18(%rsp)
    00000217: 	jne	.Ltmp2353 # Offset: 535
.Ltmp2344:
    0000021d: 	callq	clock@PLT # Offset: 541
    00000222: 	pxor	%xmm0, %xmm0
    00000226: 	movq	0x18(%rsp), %r14
    0000022b: 	movq	0x40(%rsp), %r12
    00000230: 	movq	%rax, end_time(%rip)
    00000237: 	subq	start_time(%rip), %rax
    0000023e: 	cvtsi2sd	%rax, %xmm0
    00000243: 	divsd	DATAat0x53788(%rip), %xmm0
    0000024b: 	addsd	0x38(%rsp), %xmm0
    00000251: 	movq	0x58(%rsp), %rbp
    00000256: 	movsd	%xmm0, 0x38(%rsp)
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp2358:
    00000260: 	movq	(%r12), %r13
    00000264: 	testq	%r13, %r13
    00000267: 	je	.Ltmp2354 # Offset: 615
    00000269: 	movq	0x10(%r13), %rbx
    0000026d: 	testq	%rbx, %rbx
    00000270: 	je	.Ltmp2355 # Offset: 624
.Ltmp2356:
    00000272: 	movq	0x18(%rbx), %rdi
    00000276: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 630
    0000027b: 	movq	%rbx, %rdi
    0000027e: 	movq	0x10(%rbx), %rbx
    00000282: 	movl	$0x28, %esi
    00000287: 	callq	_ZdlPvm@PLT # Offset: 647
    0000028c: 	testq	%rbx, %rbx
    0000028f: 	jne	.Ltmp2356 # Offset: 655
.Ltmp2355:
    00000291: 	movl	$0x30, %esi
    00000296: 	movq	%r13, %rdi
    00000299: 	callq	_ZdlPvm@PLT # Offset: 665
.Ltmp2354:
    0000029e: 	movq	$0x0, (%r12)
    000002a6: 	movq	%rbp, %r12
    000002a9: 	cmpq	%rbp, %r14
    000002ac: 	je	.Ltmp2357 # Offset: 684
    000002b2: 	addq	$0x8, %rbp
    000002b6: 	jmp	.Ltmp2358 # Offset: 694
    000002b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2351:
    000002c0: 	movq	0x18(%r15), %rdi
    000002c4: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 708
    000002c9: 	movq	%r15, %rdi
    000002cc: 	movq	0x10(%r15), %r15
    000002d0: 	movl	$0x28, %esi
    000002d5: 	callq	_ZdlPvm@PLT # Offset: 725
    000002da: 	testq	%r15, %r15
    000002dd: 	jne	.Ltmp2351 # Offset: 733
.Ltmp2368:
    000002df: 	movq	$0x0, 0x10(%r14)
    000002e7: 	movq	%rbx, 0x18(%r14)
    000002eb: 	movq	%rbx, 0x20(%r14)
    000002ef: 	movq	$0x0, 0x28(%r14)
    000002f7: 	jmp	.Ltmp2350 # Offset: 759
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp2349:
    00000300: 	movq	0x18(%r12), %rcx
    00000305: 	nopl	(%rax) # Size: 3
.Ltmp2367:
    00000308: 	testq	%rcx, %rcx
    0000030b: 	je	.Ltmp2359 # Offset: 779
.Ltmp2361:
    0000030d: 	movsd	0x20(%rcx), %xmm0
    00000312: 	comisd	%xmm1, %xmm0
    00000316: 	jbe	.Ltmp2360 # Offset: 790
    00000318: 	movq	%rcx, %r13
    0000031b: 	movq	0x10(%rcx), %rcx
    0000031f: 	testq	%rcx, %rcx
    00000322: 	jne	.Ltmp2361 # Offset: 802
    00000324: 	nopl	(%rax) # Size: 4
.Ltmp2359:
    00000328: 	testq	%rax, %rax
    0000032b: 	je	.Ltmp2362 # Offset: 811
.Ltmp2364:
    0000032d: 	comisd	0x20(%rax), %xmm1
    00000332: 	ja	.Ltmp2363 # Offset: 818
    00000334: 	movq	%rax, %r12
    00000337: 	movq	0x10(%rax), %rax
    0000033b: 	testq	%rax, %rax
    0000033e: 	jne	.Ltmp2364 # Offset: 830
.Ltmp2362:
    00000340: 	cmpq	%r12, 0x18(%r14)
    00000344: 	jne	.Ltmp2365 # Offset: 836
    00000346: 	cmpq	%rbx, %r13
    00000349: 	jne	.Ltmp2365 # Offset: 841
    0000034b: 	jmp	.Ltmp2351 # Offset: 843
.Ltmp2366:
    00000350: 	movq	%r12, %rdi
    00000353: 	movq	%r12, %r15
    00000356: 	callq	_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@PLT # Offset: 854
    0000035b: 	movq	%rbx, %rsi
    0000035e: 	movq	%r15, %rdi
    00000361: 	movq	%rax, %r12
    00000364: 	callq	_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_@PLT # Offset: 868
    00000369: 	movl	$0x28, %esi
    0000036e: 	movq	%rax, %rdi
    00000371: 	callq	_ZdlPvm@PLT # Offset: 881
    00000376: 	subq	$0x1, 0x28(%r14)
.Ltmp2365:
    0000037b: 	cmpq	%r12, %r13
    0000037e: 	jne	.Ltmp2366 # Offset: 894
    00000380: 	jmp	.Ltmp2350 # Offset: 896
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp2360:
    00000388: 	movq	0x18(%rcx), %rcx
    0000038c: 	jmp	.Ltmp2367 # Offset: 908
    00000391: 	nopl	(%rax) # Size: 7
.Ltmp2363:
    00000398: 	movq	0x18(%rax), %rax
    0000039c: 	jmp	.Ltmp2359 # Offset: 924
.Ltmp2345:
    0000039e: 	cmpq	0x18(%r14), %rbx
    000003a2: 	jne	.Ltmp2350 # Offset: 930
    000003a8: 	jmp	.Ltmp2368 # Offset: 936
.Ltmp2357:
    000003ad: 	movl	0x30(%rsp), %edx
    000003b1: 	movl	iterations(%rip), %eax
    000003b7: 	addl	%edx, 0x48(%rsp)
    000003bb: 	movl	0x48(%rsp), %edx
    000003bf: 	cmpl	%edx, %eax
    000003c1: 	jg	.Ltmp2369 # Offset: 961
.Ltmp2375:
    000003c7: 	movq	0x50(%rsp), %rdi
    000003cc: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 972
    000003d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003d8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003df: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003e6: 	je	.Ltmp2370 # Offset: 998
.Ltmp2374:
    000003ec: 	movq	-0x20(%rax), %rdi
    000003f0: 	movsd	0x38(%rsp), %xmm0
    000003f6: 	callq	_Z13record_resultdPKc # Offset: 1014
    000003fb: 	movq	0x60(%rsp), %rdi
    00000400: 	testq	%rdi, %rdi
    00000403: 	je	.Ltmp2371 # Offset: 1027
    00000405: 	movq	0x78(%rsp), %rax
    0000040a: 	subq	%fs:0x28, %rax
    00000413: 	jne	.Ltmp2372 # Offset: 1043
    00000415: 	movq	0x70(%rsp), %rsi
    0000041a: 	addq	$0x88, %rsp
    00000421: 	popq	%rbx
    00000422: 	popq	%rbp
    00000423: 	subq	%rdi, %rsi
    00000426: 	popq	%r12
    00000428: 	popq	%r13
    0000042a: 	popq	%r14
    0000042c: 	popq	%r15
    0000042e: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1070
.Ltmp2338:
    00000433: 	movq	$0x3e8, 0x30(%rsp)
.Ltmp2339:
    0000043c: 	movq	$0x0, 0x70(%rsp)
    00000445: 	pxor	%xmm0, %xmm0
    00000449: 	movaps	%xmm0, 0x60(%rsp)
    0000044e: 	jmp	.Ltmp2373 # Offset: 1102
.Ltmp2371:
    00000453: 	movq	0x78(%rsp), %rax
    00000458: 	subq	%fs:0x28, %rax
    00000461: 	jne	.Ltmp2372 # Offset: 1121
    00000463: 	addq	$0x88, %rsp
    0000046a: 	popq	%rbx
    0000046b: 	popq	%rbp
    0000046c: 	popq	%r12
    0000046e: 	popq	%r13
    00000470: 	popq	%r14
    00000472: 	popq	%r15
    00000474: 	retq # Offset: 1140
.Ltmp2370:
    00000475: 	movq	-0x8(%rdx), %rax
    00000479: 	addq	$0x200, %rax
    0000047f: 	jmp	.Ltmp2374 # Offset: 1151
.Ltmp2340:
    00000484: 	pxor	%xmm4, %xmm4
    00000488: 	movsd	%xmm4, 0x38(%rsp)
    0000048e: 	jmp	.Ltmp2375 # Offset: 1166
.Ltmp2372:
    00000493: 	callq	__stack_chk_fail@PLT # Offset: 1171
    00000498: 	endbr64
    0000049c: 	movq	%rax, %rbp
    0000049f: 	movq	0x60(%rsp), %rdi
    000004a4: 	movq	0x70(%rsp), %rsi
    000004a9: 	subq	%rdi, %rsi
    000004ac: 	testq	%rdi, %rdi
    000004af: 	je	.Ltmp2376 # Offset: 1199
    000004b1: 	callq	_ZdlPvm@PLT # Offset: 1201
.Ltmp2376:
    000004b6: 	movq	%rbp, %rdi
    000004b9: 	callq	_Unwind_Resume@PLT # Offset: 1209
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_erase_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_duplicate_coreISt3setIdSt4lessIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0x194a0
  Size        : 0x2d6
  MaxSize     : 0x2e0
  Offset      : 0x194a0
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt3setIdSt4lessIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	(,%rsi,8), %rcx
    0000000e: 	pushq	%r14
    00000010: 	movq	%rdi, %r14
    00000013: 	pushq	%r13
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x28(%rsp)
    00000022: 	xorl	%edx, %edx
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x48(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	movabsq	$0x500000000, %rax
    0000003e: 	divq	%rcx
    00000041: 	movq	%rax, (%rsp)
    00000045: 	cmpq	$0x3e8, %rax
    0000004b: 	ja	.Ltmp2377 # Offset: 75
    00000051: 	cmpq	$0x3, %rax
    00000055: 	ja	.Ltmp2378 # Offset: 85
    0000005b: 	movq	$0x0, 0x40(%rsp)
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	movq	$0x4, (%rsp)
    00000070: 	movaps	%xmm0, 0x30(%rsp)
.Ltmp2389:
    00000075: 	movq	(%rsp), %rbx
    00000079: 	leaq	0x30(%rsp), %rdi
    0000007e: 	movq	%rbx, %rsi
    00000081: 	callq	_ZNSt6vectorIPSt3setIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 129
    00000086: 	movq	0x30(%rsp), %rdx
    0000008b: 	movl	iterations(%rip), %eax
    00000091: 	movq	%rdx, 0x10(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp2379 # Offset: 152
    0000009e: 	addq	$0x8, %rdx
    000000a2: 	movl	%ebx, 0x1c(%rsp)
    000000a6: 	pxor	%xmm2, %xmm2
    000000aa: 	xorl	%r15d, %r15d
    000000ad: 	movq	%rdx, 0x20(%rsp)
    000000b2: 	movsd	%xmm2, 0x8(%rsp)
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2385:
    000000c0: 	movslq	%eax, %rcx
    000000c3: 	movslq	%r15d, %rdx
    000000c6: 	addq	(%rsp), %rdx
    000000ca: 	subl	%r15d, %eax
    000000cd: 	cmpq	%rcx, %rdx
    000000d0: 	cmovbl	0x1c(%rsp), %eax
    000000d5: 	movl	%eax, %ebx
    000000d7: 	callq	clock@PLT # Offset: 215
    000000dc: 	movq	0x10(%rsp), %r12
    000000e1: 	movq	0x20(%rsp), %rcx
    000000e6: 	movq	%rax, start_time(%rip)
    000000ed: 	leal	-0x1(%rbx), %eax
    000000f0: 	movq	%r12, %rbp
    000000f3: 	leaq	(%rcx,%rax,8), %r13
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2380:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbx
    0000010d: 	movl	$0x0, 0x8(%rax)
    00000114: 	leaq	0x8(%rax), %rax
    00000118: 	movq	%r14, %rsi
    0000011b: 	movq	$0x0, 0x8(%rax)
    00000123: 	movq	%rbx, %rdi
    00000126: 	movq	%rax, 0x18(%rbx)
    0000012a: 	movq	%rax, 0x20(%rbx)
    0000012e: 	movq	$0x0, 0x28(%rbx)
    00000136: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEEaSERKS5_.isra.0/1" # Offset: 310
    0000013b: 	movq	%rbx, (%r12)
    0000013f: 	addq	$0x8, %r12
    00000143: 	cmpq	%r13, %r12
    00000146: 	jne	.Ltmp2380 # Offset: 326
    00000148: 	callq	clock@PLT # Offset: 328
    0000014d: 	pxor	%xmm0, %xmm0
    00000151: 	movq	%rax, end_time(%rip)
    00000158: 	subq	start_time(%rip), %rax
    0000015f: 	cvtsi2sd	%rax, %xmm0
    00000164: 	divsd	DATAat0x53788(%rip), %xmm0
    0000016c: 	addsd	0x8(%rsp), %xmm0
    00000172: 	movsd	%xmm0, 0x8(%rsp)
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2384:
    00000180: 	movq	(%rbp), %r12
    00000184: 	testq	%r12, %r12
    00000187: 	je	.Ltmp2381 # Offset: 391
    00000189: 	movq	0x10(%r12), %rbx
    0000018e: 	testq	%rbx, %rbx
    00000191: 	je	.Ltmp2382 # Offset: 401
.Ltmp2383:
    00000193: 	movq	0x18(%rbx), %rdi
    00000197: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 407
    0000019c: 	movq	%rbx, %rdi
    0000019f: 	movq	0x10(%rbx), %rbx
    000001a3: 	movl	$0x28, %esi
    000001a8: 	callq	_ZdlPvm@PLT # Offset: 424
    000001ad: 	testq	%rbx, %rbx
    000001b0: 	jne	.Ltmp2383 # Offset: 432
.Ltmp2382:
    000001b2: 	movl	$0x30, %esi
    000001b7: 	movq	%r12, %rdi
    000001ba: 	callq	_ZdlPvm@PLT # Offset: 442
.Ltmp2381:
    000001bf: 	movq	$0x0, (%rbp)
    000001c7: 	addq	$0x8, %rbp
    000001cb: 	cmpq	%rbp, %r13
    000001ce: 	jne	.Ltmp2384 # Offset: 462
    000001d0: 	movl	iterations(%rip), %eax
    000001d6: 	addl	(%rsp), %r15d
    000001da: 	cmpl	%r15d, %eax
    000001dd: 	jg	.Ltmp2385 # Offset: 477
.Ltmp2391:
    000001e3: 	movq	0x28(%rsp), %rdi
    000001e8: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 488
    000001ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001fb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000202: 	je	.Ltmp2386 # Offset: 514
.Ltmp2390:
    00000208: 	movq	-0x20(%rax), %rdi
    0000020c: 	movsd	0x8(%rsp), %xmm0
    00000212: 	callq	_Z13record_resultdPKc # Offset: 530
    00000217: 	cmpq	$0x0, 0x10(%rsp)
    0000021d: 	je	.Ltmp2387 # Offset: 541
    0000021f: 	movq	0x48(%rsp), %rax
    00000224: 	subq	%fs:0x28, %rax
    0000022d: 	jne	.Ltmp2388 # Offset: 557
    0000022f: 	movq	0x40(%rsp), %rsi
    00000234: 	movq	0x10(%rsp), %rdi
    00000239: 	addq	$0x58, %rsp
    0000023d: 	popq	%rbx
    0000023e: 	popq	%rbp
    0000023f: 	subq	%rdi, %rsi
    00000242: 	popq	%r12
    00000244: 	popq	%r13
    00000246: 	popq	%r14
    00000248: 	popq	%r15
    0000024a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 586
.Ltmp2387:
    0000024f: 	movq	0x48(%rsp), %rax
    00000254: 	subq	%fs:0x28, %rax
    0000025d: 	jne	.Ltmp2388 # Offset: 605
    0000025f: 	addq	$0x58, %rsp
    00000263: 	popq	%rbx
    00000264: 	popq	%rbp
    00000265: 	popq	%r12
    00000267: 	popq	%r13
    00000269: 	popq	%r14
    0000026b: 	popq	%r15
    0000026d: 	retq # Offset: 621
.Ltmp2377:
    0000026e: 	movq	$0x3e8, (%rsp)
.Ltmp2378:
    00000276: 	movq	$0x0, 0x40(%rsp)
    0000027f: 	pxor	%xmm0, %xmm0
    00000283: 	movaps	%xmm0, 0x30(%rsp)
    00000288: 	jmp	.Ltmp2389 # Offset: 648
.Ltmp2386:
    0000028d: 	movq	-0x8(%rdx), %rax
    00000291: 	addq	$0x200, %rax
    00000297: 	jmp	.Ltmp2390 # Offset: 663
.Ltmp2379:
    0000029c: 	pxor	%xmm3, %xmm3
    000002a0: 	movsd	%xmm3, 0x8(%rsp)
    000002a6: 	jmp	.Ltmp2391 # Offset: 678
.Ltmp2388:
    000002ab: 	callq	__stack_chk_fail@PLT # Offset: 683
    000002b0: 	endbr64
    000002b4: 	movq	%rax, %rbp
    000002b7: 	movq	0x30(%rsp), %rdi
    000002bc: 	movq	0x40(%rsp), %rsi
    000002c1: 	subq	%rdi, %rsi
    000002c4: 	testq	%rdi, %rdi
    000002c7: 	je	.Ltmp2392 # Offset: 711
    000002c9: 	callq	_ZdlPvm@PLT # Offset: 713
.Ltmp2392:
    000002ce: 	movq	%rbp, %rdi
    000002d1: 	callq	_Unwind_Resume@PLT # Offset: 721
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt3setIdSt4lessIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_delete_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0x19780
  Size        : 0x2fd
  MaxSize     : 0x300
  Offset      : 0x19780
  Section     : .text
  Orc Section : .local.text._Z16test_delete_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x18(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp2393 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp2394 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x18(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp2407:
    0000007a: 	movq	0x18(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt3setIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rdx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rdx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp2395 # Offset: 158
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rdx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x10(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2403:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rdi
    000000d8: 	addq	0x18(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%edi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2398:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movl	$0x0, 0x8(%rax)
    00000111: 	movq	%rax, %rbp
    00000114: 	leaq	0x8(%rax), %rax
    00000118: 	movq	$0x0, 0x8(%rax)
    00000120: 	movq	%rax, 0x18(%rbp)
    00000124: 	movq	%rax, 0x20(%rbp)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	movq	$0x0, 0x28(%rbp)
    00000135: 	movq	%rax, %rbx
    00000138: 	cmpq	%rax, %r12
    0000013b: 	je	.Ltmp2396 # Offset: 315
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp2397:
    00000140: 	movq	%rbx, %rsi
    00000143: 	movq	%rbp, %rdi
    00000146: 	addq	$0x8, %rbx
    0000014a: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 330
    0000014f: 	cmpq	%rbx, %r12
    00000152: 	jne	.Ltmp2397 # Offset: 338
.Ltmp2396:
    00000154: 	movq	%rbp, (%r14)
    00000157: 	addq	$0x8, %r14
    0000015b: 	cmpq	%r15, %r14
    0000015e: 	jne	.Ltmp2398 # Offset: 350
    00000160: 	callq	clock@PLT # Offset: 352
    00000165: 	movq	%rax, start_time(%rip)
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2402:
    00000170: 	movq	(%r13), %rbp
    00000174: 	testq	%rbp, %rbp
    00000177: 	je	.Ltmp2399 # Offset: 375
    00000179: 	movq	0x10(%rbp), %rbx
    0000017d: 	testq	%rbx, %rbx
    00000180: 	je	.Ltmp2400 # Offset: 384
.Ltmp2401:
    00000182: 	movq	0x18(%rbx), %rdi
    00000186: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 390
    0000018b: 	movq	%rbx, %rdi
    0000018e: 	movq	0x10(%rbx), %rbx
    00000192: 	movl	$0x28, %esi
    00000197: 	callq	_ZdlPvm@PLT # Offset: 407
    0000019c: 	testq	%rbx, %rbx
    0000019f: 	jne	.Ltmp2401 # Offset: 415
.Ltmp2400:
    000001a1: 	movl	$0x30, %esi
    000001a6: 	movq	%rbp, %rdi
    000001a9: 	callq	_ZdlPvm@PLT # Offset: 425
.Ltmp2399:
    000001ae: 	movq	$0x0, (%r13)
    000001b6: 	addq	$0x8, %r13
    000001ba: 	cmpq	%r13, %r15
    000001bd: 	jne	.Ltmp2402 # Offset: 445
    000001bf: 	callq	clock@PLT # Offset: 447
    000001c4: 	pxor	%xmm0, %xmm0
    000001c8: 	movl	0x18(%rsp), %edx
    000001cc: 	addl	%edx, 0x28(%rsp)
    000001d0: 	movq	%rax, end_time(%rip)
    000001d7: 	subq	start_time(%rip), %rax
    000001de: 	cvtsi2sd	%rax, %xmm0
    000001e3: 	movl	0x28(%rsp), %ecx
    000001e7: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ef: 	addsd	0x10(%rsp), %xmm0
    000001f5: 	movl	iterations(%rip), %eax
    000001fb: 	movsd	%xmm0, 0x10(%rsp)
    00000201: 	cmpl	%ecx, %eax
    00000203: 	jg	.Ltmp2403 # Offset: 515
.Ltmp2409:
    00000209: 	movq	0x38(%rsp), %rdi
    0000020e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 526
    00000213: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000221: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000228: 	je	.Ltmp2404 # Offset: 552
.Ltmp2408:
    0000022e: 	movq	-0x20(%rax), %rdi
    00000232: 	movsd	0x10(%rsp), %xmm0
    00000238: 	callq	_Z13record_resultdPKc # Offset: 568
    0000023d: 	cmpq	$0x0, 0x20(%rsp)
    00000243: 	je	.Ltmp2405 # Offset: 579
    00000245: 	movq	0x58(%rsp), %rax
    0000024a: 	subq	%fs:0x28, %rax
    00000253: 	jne	.Ltmp2406 # Offset: 595
    00000255: 	movq	0x50(%rsp), %rsi
    0000025a: 	movq	0x20(%rsp), %rdi
    0000025f: 	addq	$0x68, %rsp
    00000263: 	popq	%rbx
    00000264: 	popq	%rbp
    00000265: 	subq	%rdi, %rsi
    00000268: 	popq	%r12
    0000026a: 	popq	%r13
    0000026c: 	popq	%r14
    0000026e: 	popq	%r15
    00000270: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 624
.Ltmp2405:
    00000275: 	movq	0x58(%rsp), %rax
    0000027a: 	subq	%fs:0x28, %rax
    00000283: 	jne	.Ltmp2406 # Offset: 643
    00000285: 	addq	$0x68, %rsp
    00000289: 	popq	%rbx
    0000028a: 	popq	%rbp
    0000028b: 	popq	%r12
    0000028d: 	popq	%r13
    0000028f: 	popq	%r14
    00000291: 	popq	%r15
    00000293: 	retq # Offset: 659
.Ltmp2393:
    00000294: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp2394:
    0000029d: 	movq	$0x0, 0x50(%rsp)
    000002a6: 	pxor	%xmm0, %xmm0
    000002aa: 	movaps	%xmm0, 0x40(%rsp)
    000002af: 	jmp	.Ltmp2407 # Offset: 687
.Ltmp2404:
    000002b4: 	movq	-0x8(%rdx), %rax
    000002b8: 	addq	$0x200, %rax
    000002be: 	jmp	.Ltmp2408 # Offset: 702
.Ltmp2395:
    000002c3: 	pxor	%xmm3, %xmm3
    000002c7: 	movsd	%xmm3, 0x10(%rsp)
    000002cd: 	jmp	.Ltmp2409 # Offset: 717
.Ltmp2406:
    000002d2: 	callq	__stack_chk_fail@PLT # Offset: 722
    000002d7: 	endbr64
    000002db: 	movq	%rax, %rbp
    000002de: 	movq	0x40(%rsp), %rdi
    000002e3: 	movq	0x50(%rsp), %rsi
    000002e8: 	subq	%rdi, %rsi
    000002eb: 	testq	%rdi, %rdi
    000002ee: 	je	.Ltmp2410 # Offset: 750
    000002f0: 	callq	_ZdlPvm@PLT # Offset: 752
.Ltmp2410:
    000002f5: 	movq	%rbp, %rdi
    000002f8: 	callq	_Unwind_Resume@PLT # Offset: 760
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_delete_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_clearall_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0x19a80
  Size        : 0x35d
  MaxSize     : 0x360
  Offset      : 0x19a80
  Section     : .text
  Orc Section : .local.text._Z18test_clearall_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp2411 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp2412 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp2428:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt3setIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rdx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rdx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp2413 # Offset: 158
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rdx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2424:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2416:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movl	$0x0, 0x8(%rax)
    00000111: 	movq	%rax, %rbp
    00000114: 	leaq	0x8(%rax), %rax
    00000118: 	movq	$0x0, 0x8(%rax)
    00000120: 	movq	%rax, 0x18(%rbp)
    00000124: 	movq	%rax, 0x20(%rbp)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	movq	$0x0, 0x28(%rbp)
    00000135: 	movq	%rax, %rbx
    00000138: 	cmpq	%rax, %r12
    0000013b: 	je	.Ltmp2414 # Offset: 315
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp2415:
    00000140: 	movq	%rbx, %rsi
    00000143: 	movq	%rbp, %rdi
    00000146: 	addq	$0x8, %rbx
    0000014a: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 330
    0000014f: 	cmpq	%rbx, %r12
    00000152: 	jne	.Ltmp2415 # Offset: 338
.Ltmp2414:
    00000154: 	movq	%rbp, (%r14)
    00000157: 	addq	$0x8, %r14
    0000015b: 	cmpq	%r15, %r14
    0000015e: 	jne	.Ltmp2416 # Offset: 350
    00000160: 	callq	clock@PLT # Offset: 352
    00000165: 	movq	0x20(%rsp), %rbp
    0000016a: 	movq	%rax, start_time(%rip)
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp2419:
    00000178: 	movq	(%rbp), %rbx
    0000017c: 	movq	0x10(%rbx), %r14
    00000180: 	testq	%r14, %r14
    00000183: 	je	.Ltmp2417 # Offset: 387
.Ltmp2418:
    00000185: 	movq	0x18(%r14), %rdi
    00000189: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 393
    0000018e: 	movq	%r14, %rdi
    00000191: 	movq	0x10(%r14), %r14
    00000195: 	movl	$0x28, %esi
    0000019a: 	callq	_ZdlPvm@PLT # Offset: 410
    0000019f: 	testq	%r14, %r14
    000001a2: 	jne	.Ltmp2418 # Offset: 418
.Ltmp2417:
    000001a4: 	leaq	0x8(%rbx), %rax
    000001a8: 	addq	$0x8, %rbp
    000001ac: 	movq	$0x0, 0x10(%rbx)
    000001b4: 	movq	%rax, 0x18(%rbx)
    000001b8: 	movq	%rax, 0x20(%rbx)
    000001bc: 	movq	$0x0, 0x28(%rbx)
    000001c4: 	cmpq	%rbp, %r15
    000001c7: 	jne	.Ltmp2419 # Offset: 455
    000001c9: 	callq	clock@PLT # Offset: 457
    000001ce: 	pxor	%xmm0, %xmm0
    000001d2: 	movq	%rax, end_time(%rip)
    000001d9: 	subq	start_time(%rip), %rax
    000001e0: 	cvtsi2sd	%rax, %xmm0
    000001e5: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ed: 	addsd	0x18(%rsp), %xmm0
    000001f3: 	movsd	%xmm0, 0x18(%rsp)
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp2423:
    00000200: 	movq	(%r13), %rbp
    00000204: 	testq	%rbp, %rbp
    00000207: 	je	.Ltmp2420 # Offset: 519
    00000209: 	movq	0x10(%rbp), %rbx
    0000020d: 	testq	%rbx, %rbx
    00000210: 	je	.Ltmp2421 # Offset: 528
.Ltmp2422:
    00000212: 	movq	0x18(%rbx), %rdi
    00000216: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 534
    0000021b: 	movq	%rbx, %rdi
    0000021e: 	movq	0x10(%rbx), %rbx
    00000222: 	movl	$0x28, %esi
    00000227: 	callq	_ZdlPvm@PLT # Offset: 551
    0000022c: 	testq	%rbx, %rbx
    0000022f: 	jne	.Ltmp2422 # Offset: 559
.Ltmp2421:
    00000231: 	movl	$0x30, %esi
    00000236: 	movq	%rbp, %rdi
    00000239: 	callq	_ZdlPvm@PLT # Offset: 569
.Ltmp2420:
    0000023e: 	movq	$0x0, (%r13)
    00000246: 	addq	$0x8, %r13
    0000024a: 	cmpq	%r13, %r15
    0000024d: 	jne	.Ltmp2423 # Offset: 589
    0000024f: 	movl	0x10(%rsp), %edx
    00000253: 	movl	iterations(%rip), %eax
    00000259: 	addl	%edx, 0x28(%rsp)
    0000025d: 	movl	0x28(%rsp), %ecx
    00000261: 	cmpl	%ecx, %eax
    00000263: 	jg	.Ltmp2424 # Offset: 611
.Ltmp2430:
    00000269: 	movq	0x38(%rsp), %rdi
    0000026e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 622
    00000273: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000281: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000288: 	je	.Ltmp2425 # Offset: 648
.Ltmp2429:
    0000028e: 	movq	-0x20(%rax), %rdi
    00000292: 	movsd	0x18(%rsp), %xmm0
    00000298: 	callq	_Z13record_resultdPKc # Offset: 664
    0000029d: 	cmpq	$0x0, 0x20(%rsp)
    000002a3: 	je	.Ltmp2426 # Offset: 675
    000002a5: 	movq	0x58(%rsp), %rax
    000002aa: 	subq	%fs:0x28, %rax
    000002b3: 	jne	.Ltmp2427 # Offset: 691
    000002b5: 	movq	0x50(%rsp), %rsi
    000002ba: 	movq	0x20(%rsp), %rdi
    000002bf: 	addq	$0x68, %rsp
    000002c3: 	popq	%rbx
    000002c4: 	popq	%rbp
    000002c5: 	subq	%rdi, %rsi
    000002c8: 	popq	%r12
    000002ca: 	popq	%r13
    000002cc: 	popq	%r14
    000002ce: 	popq	%r15
    000002d0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 720
.Ltmp2426:
    000002d5: 	movq	0x58(%rsp), %rax
    000002da: 	subq	%fs:0x28, %rax
    000002e3: 	jne	.Ltmp2427 # Offset: 739
    000002e5: 	addq	$0x68, %rsp
    000002e9: 	popq	%rbx
    000002ea: 	popq	%rbp
    000002eb: 	popq	%r12
    000002ed: 	popq	%r13
    000002ef: 	popq	%r14
    000002f1: 	popq	%r15
    000002f3: 	retq # Offset: 755
.Ltmp2411:
    000002f4: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp2412:
    000002fd: 	movq	$0x0, 0x50(%rsp)
    00000306: 	pxor	%xmm0, %xmm0
    0000030a: 	movaps	%xmm0, 0x40(%rsp)
    0000030f: 	jmp	.Ltmp2428 # Offset: 783
.Ltmp2425:
    00000314: 	movq	-0x8(%rdx), %rax
    00000318: 	addq	$0x200, %rax
    0000031e: 	jmp	.Ltmp2429 # Offset: 798
.Ltmp2413:
    00000323: 	pxor	%xmm3, %xmm3
    00000327: 	movsd	%xmm3, 0x18(%rsp)
    0000032d: 	jmp	.Ltmp2430 # Offset: 813
.Ltmp2427:
    00000332: 	callq	__stack_chk_fail@PLT # Offset: 818
    00000337: 	endbr64
    0000033b: 	movq	%rax, %rbp
    0000033e: 	movq	0x40(%rsp), %rdi
    00000343: 	movq	0x50(%rsp), %rsi
    00000348: 	subq	%rdi, %rsi
    0000034b: 	testq	%rdi, %rdi
    0000034e: 	je	.Ltmp2431 # Offset: 846
    00000350: 	callq	_ZdlPvm@PLT # Offset: 848
.Ltmp2431:
    00000355: 	movq	%rbp, %rdi
    00000358: 	callq	_Unwind_Resume@PLT # Offset: 856
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_clearall_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_insert_set1IdSt3setIdSt4lessIdESaIdEELb1EEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0x19de0
  Size        : 0x3cc
  MaxSize     : 0x3d0
  Offset      : 0x19de0
  Section     : .text
  Orc Section : .local.text._Z16test_insert_set1IdSt3setIdSt4lessIdESaIdEELb1EEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	xorl	%r13d, %r13d
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x58(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp2432 # Offset: 68
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2435:
    00000050: 	movl	$0x30, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movq	%r15, %rsi
    0000005d: 	movq	%rax, %rbp
    00000060: 	movl	$0x0, 0x8(%rax)
    00000067: 	leaq	0x8(%rax), %rax
    0000006b: 	movq	$0x0, 0x8(%rax)
    00000073: 	movq	%rbp, %rdi
    00000076: 	movq	%rax, 0x18(%rbp)
    0000007a: 	movq	%rax, 0x20(%rbp)
    0000007e: 	movq	$0x0, 0x28(%rbp)
    00000086: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 134
    0000008b: 	movq	0x10(%rbp), %rbx
    0000008f: 	testq	%rbx, %rbx
    00000092: 	je	.Ltmp2433 # Offset: 146
.Ltmp2434:
    00000094: 	movq	0x18(%rbx), %rdi
    00000098: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 152
    0000009d: 	movq	%rbx, %rdi
    000000a0: 	movq	0x10(%rbx), %rbx
    000000a4: 	movl	$0x28, %esi
    000000a9: 	callq	_ZdlPvm@PLT # Offset: 169
    000000ae: 	testq	%rbx, %rbx
    000000b1: 	jne	.Ltmp2434 # Offset: 177
.Ltmp2433:
    000000b3: 	movl	$0x30, %esi
    000000b8: 	movq	%rbp, %rdi
    000000bb: 	addl	$0x1, %r13d
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpl	%r13d, iterations(%rip)
    000000cb: 	jg	.Ltmp2435 # Offset: 203
.Ltmp2432:
    000000cd: 	callq	clock@PLT # Offset: 205
    000000d2: 	pxor	%xmm0, %xmm0
    000000d6: 	movq	%r12, %rcx
    000000d9: 	xorl	%edx, %edx
    000000db: 	movq	%rax, end_time(%rip)
    000000e2: 	subq	start_time(%rip), %rax
    000000e9: 	subq	%r15, %rcx
    000000ec: 	cvtsi2sd	%rax, %xmm0
    000000f1: 	divsd	DATAat0x53788(%rip), %xmm0
    000000f9: 	movabsq	$0x500000000, %rax
    00000103: 	movsd	%xmm0, 0x30(%rsp)
    00000109: 	divq	%rcx
    0000010c: 	movq	%rax, 0x8(%rsp)
    00000111: 	cmpq	$0x3e8, %rax
    00000117: 	ja	.Ltmp2436 # Offset: 279
    0000011d: 	cmpq	$0x3, 0x8(%rsp)
    00000123: 	ja	.Ltmp2437 # Offset: 291
    00000129: 	movq	$0x0, 0x50(%rsp)
    00000132: 	pxor	%xmm0, %xmm0
    00000136: 	movq	$0x4, 0x8(%rsp)
    0000013f: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp2450:
    00000144: 	movq	0x8(%rsp), %rbx
    00000149: 	leaq	0x40(%rsp), %rdi
    0000014e: 	movq	%rbx, %rsi
    00000151: 	callq	_ZNSt6vectorIPSt3setIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 337
    00000156: 	movq	0x40(%rsp), %rdx
    0000015b: 	movl	iterations(%rip), %eax
    00000161: 	movq	%rdx, 0x18(%rsp)
    00000166: 	testl	%eax, %eax
    00000168: 	jle	.Ltmp2438 # Offset: 360
    0000016e: 	addq	$0x8, %rdx
    00000172: 	movl	%ebx, 0x24(%rsp)
    00000176: 	pxor	%xmm2, %xmm2
    0000017a: 	movl	$0x0, 0x20(%rsp)
    00000182: 	movq	%rdx, 0x28(%rsp)
    00000187: 	movsd	%xmm2, 0x10(%rsp)
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp2446:
    00000190: 	movslq	0x20(%rsp), %rdx
    00000195: 	movslq	%eax, %rcx
    00000198: 	movq	%rdx, %rdi
    0000019b: 	addq	0x8(%rsp), %rdx
    000001a0: 	subl	%edi, %eax
    000001a2: 	cmpq	%rcx, %rdx
    000001a5: 	cmovbl	0x24(%rsp), %eax
    000001aa: 	movl	%eax, %ebx
    000001ac: 	callq	clock@PLT # Offset: 428
    000001b1: 	movq	0x28(%rsp), %rcx
    000001b6: 	movq	0x18(%rsp), %r14
    000001bb: 	movq	%rax, start_time(%rip)
    000001c2: 	leal	-0x1(%rbx), %eax
    000001c5: 	leaq	(%rcx,%rax,8), %rax
    000001c9: 	movq	%r14, %r13
    000001cc: 	movq	%rax, (%rsp)
.Ltmp2441:
    000001d0: 	movl	$0x30, %edi
    000001d5: 	callq	_Znwm@PLT # Offset: 469
    000001da: 	movl	$0x0, 0x8(%rax)
    000001e1: 	movq	%rax, %rbp
    000001e4: 	leaq	0x8(%rax), %rax
    000001e8: 	movq	%r15, %rbx
    000001eb: 	movq	$0x0, 0x8(%rax)
    000001f3: 	movq	%rax, 0x18(%rbp)
    000001f7: 	movq	%rax, 0x20(%rbp)
    000001fb: 	movq	$0x0, 0x28(%rbp)
    00000203: 	cmpq	%r15, %r12
    00000206: 	je	.Ltmp2439 # Offset: 518
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2440:
    00000210: 	movq	%rbx, %rsi
    00000213: 	movq	%rbp, %rdi
    00000216: 	addq	$0x8, %rbx
    0000021a: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 538
    0000021f: 	cmpq	%rbx, %r12
    00000222: 	jne	.Ltmp2440 # Offset: 546
.Ltmp2439:
    00000224: 	movq	%rbp, (%r14)
    00000227: 	addq	$0x8, %r14
    0000022b: 	cmpq	(%rsp), %r14
    0000022f: 	jne	.Ltmp2441 # Offset: 559
    00000231: 	callq	clock@PLT # Offset: 561
    00000236: 	pxor	%xmm0, %xmm0
    0000023a: 	movq	%rax, end_time(%rip)
    00000241: 	subq	start_time(%rip), %rax
    00000248: 	cvtsi2sd	%rax, %xmm0
    0000024d: 	divsd	DATAat0x53788(%rip), %xmm0
    00000255: 	addsd	0x10(%rsp), %xmm0
    0000025b: 	movsd	%xmm0, 0x10(%rsp)
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp2445:
    00000268: 	movq	(%r13), %rbp
    0000026c: 	testq	%rbp, %rbp
    0000026f: 	je	.Ltmp2442 # Offset: 623
    00000271: 	movq	0x10(%rbp), %rbx
    00000275: 	testq	%rbx, %rbx
    00000278: 	je	.Ltmp2443 # Offset: 632
.Ltmp2444:
    0000027a: 	movq	0x18(%rbx), %rdi
    0000027e: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 638
    00000283: 	movq	%rbx, %rdi
    00000286: 	movq	0x10(%rbx), %rbx
    0000028a: 	movl	$0x28, %esi
    0000028f: 	callq	_ZdlPvm@PLT # Offset: 655
    00000294: 	testq	%rbx, %rbx
    00000297: 	jne	.Ltmp2444 # Offset: 663
.Ltmp2443:
    00000299: 	movl	$0x30, %esi
    0000029e: 	movq	%rbp, %rdi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp2442:
    000002a6: 	movq	$0x0, (%r13)
    000002ae: 	addq	$0x8, %r13
    000002b2: 	cmpq	%r13, (%rsp)
    000002b6: 	jne	.Ltmp2445 # Offset: 694
    000002b8: 	movl	0x8(%rsp), %edx
    000002bc: 	movl	iterations(%rip), %eax
    000002c2: 	addl	%edx, 0x20(%rsp)
    000002c6: 	movl	0x20(%rsp), %ecx
    000002ca: 	cmpl	%ecx, %eax
    000002cc: 	jg	.Ltmp2446 # Offset: 716
.Ltmp2452:
    000002d2: 	movq	0x38(%rsp), %rdi
    000002d7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 727
    000002dc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002ea: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002f1: 	je	.Ltmp2447 # Offset: 753
.Ltmp2451:
    000002f7: 	movsd	0x10(%rsp), %xmm0
    000002fd: 	subsd	0x30(%rsp), %xmm0
    00000303: 	movq	-0x20(%rax), %rdi
    00000307: 	callq	_Z13record_resultdPKc # Offset: 775
    0000030c: 	cmpq	$0x0, 0x18(%rsp)
    00000312: 	je	.Ltmp2448 # Offset: 786
    00000314: 	movq	0x58(%rsp), %rax
    00000319: 	subq	%fs:0x28, %rax
    00000322: 	jne	.Ltmp2449 # Offset: 802
    00000324: 	movq	0x50(%rsp), %rsi
    00000329: 	movq	0x18(%rsp), %rdi
    0000032e: 	addq	$0x68, %rsp
    00000332: 	popq	%rbx
    00000333: 	popq	%rbp
    00000334: 	subq	%rdi, %rsi
    00000337: 	popq	%r12
    00000339: 	popq	%r13
    0000033b: 	popq	%r14
    0000033d: 	popq	%r15
    0000033f: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 831
.Ltmp2448:
    00000344: 	movq	0x58(%rsp), %rax
    00000349: 	subq	%fs:0x28, %rax
    00000352: 	jne	.Ltmp2449 # Offset: 850
    00000354: 	addq	$0x68, %rsp
    00000358: 	popq	%rbx
    00000359: 	popq	%rbp
    0000035a: 	popq	%r12
    0000035c: 	popq	%r13
    0000035e: 	popq	%r14
    00000360: 	popq	%r15
    00000362: 	retq # Offset: 866
.Ltmp2436:
    00000363: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp2437:
    0000036c: 	movq	$0x0, 0x50(%rsp)
    00000375: 	pxor	%xmm0, %xmm0
    00000379: 	movaps	%xmm0, 0x40(%rsp)
    0000037e: 	jmp	.Ltmp2450 # Offset: 894
.Ltmp2447:
    00000383: 	movq	-0x8(%rdx), %rax
    00000387: 	addq	$0x200, %rax
    0000038d: 	jmp	.Ltmp2451 # Offset: 909
.Ltmp2438:
    00000392: 	pxor	%xmm3, %xmm3
    00000396: 	movsd	%xmm3, 0x10(%rsp)
    0000039c: 	jmp	.Ltmp2452 # Offset: 924
.Ltmp2449:
    000003a1: 	callq	__stack_chk_fail@PLT # Offset: 929
    000003a6: 	endbr64
    000003aa: 	movq	%rax, %rbp
    000003ad: 	movq	0x40(%rsp), %rdi
    000003b2: 	movq	0x50(%rsp), %rsi
    000003b7: 	subq	%rdi, %rsi
    000003ba: 	testq	%rdi, %rdi
    000003bd: 	je	.Ltmp2453 # Offset: 957
    000003bf: 	callq	_ZdlPvm@PLT # Offset: 959
.Ltmp2453:
    000003c4: 	movq	%rbp, %rdi
    000003c7: 	callq	_Unwind_Resume@PLT # Offset: 967
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_insert_set1IdSt3setIdSt4lessIdESaIdEELb1EEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_eraseall_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0x1a1b0
  Size        : 0x33d
  MaxSize     : 0x340
  Offset      : 0x1a1b0
  Section     : .text
  Orc Section : .local.text._Z18test_eraseall_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp2454 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp2455 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp2469:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt3setIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rdx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rdx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp2456 # Offset: 158
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rdx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2465:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rdi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%edi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2459:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movl	$0x0, 0x8(%rax)
    00000111: 	movq	%rax, %rbp
    00000114: 	leaq	0x8(%rax), %rax
    00000118: 	movq	$0x0, 0x8(%rax)
    00000120: 	movq	%rax, 0x18(%rbp)
    00000124: 	movq	%rax, 0x20(%rbp)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	movq	$0x0, 0x28(%rbp)
    00000135: 	movq	%rax, %rbx
    00000138: 	cmpq	%rax, %r12
    0000013b: 	je	.Ltmp2457 # Offset: 315
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp2458:
    00000140: 	movq	%rbx, %rsi
    00000143: 	movq	%rbp, %rdi
    00000146: 	addq	$0x8, %rbx
    0000014a: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 330
    0000014f: 	cmpq	%rbx, %r12
    00000152: 	jne	.Ltmp2458 # Offset: 338
.Ltmp2457:
    00000154: 	movq	%rbp, (%r14)
    00000157: 	addq	$0x8, %r14
    0000015b: 	cmpq	%r15, %r14
    0000015e: 	jne	.Ltmp2459 # Offset: 350
    00000160: 	callq	clock@PLT # Offset: 352
    00000165: 	movq	0x20(%rsp), %rbp
    0000016a: 	movq	%rax, start_time(%rip)
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp2460:
    00000178: 	movq	(%rbp), %rbx
    0000017c: 	addq	$0x8, %rbp
    00000180: 	movq	0x10(%rbx), %rdi
    00000184: 	leaq	0x8(%rbx), %r14
    00000188: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 392
    0000018d: 	movq	$0x0, 0x10(%rbx)
    00000195: 	movq	%r14, 0x18(%rbx)
    00000199: 	movq	%r14, 0x20(%rbx)
    0000019d: 	movq	$0x0, 0x28(%rbx)
    000001a5: 	cmpq	%r15, %rbp
    000001a8: 	jne	.Ltmp2460 # Offset: 424
    000001aa: 	callq	clock@PLT # Offset: 426
    000001af: 	pxor	%xmm0, %xmm0
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	subq	start_time(%rip), %rax
    000001c1: 	cvtsi2sd	%rax, %xmm0
    000001c6: 	divsd	DATAat0x53788(%rip), %xmm0
    000001ce: 	addsd	0x18(%rsp), %xmm0
    000001d4: 	movsd	%xmm0, 0x18(%rsp)
    000001da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2464:
    000001e0: 	movq	(%r13), %rbp
    000001e4: 	testq	%rbp, %rbp
    000001e7: 	je	.Ltmp2461 # Offset: 487
    000001e9: 	movq	0x10(%rbp), %rbx
    000001ed: 	testq	%rbx, %rbx
    000001f0: 	je	.Ltmp2462 # Offset: 496
.Ltmp2463:
    000001f2: 	movq	0x18(%rbx), %rdi
    000001f6: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 502
    000001fb: 	movq	%rbx, %rdi
    000001fe: 	movq	0x10(%rbx), %rbx
    00000202: 	movl	$0x28, %esi
    00000207: 	callq	_ZdlPvm@PLT # Offset: 519
    0000020c: 	testq	%rbx, %rbx
    0000020f: 	jne	.Ltmp2463 # Offset: 527
.Ltmp2462:
    00000211: 	movl	$0x30, %esi
    00000216: 	movq	%rbp, %rdi
    00000219: 	callq	_ZdlPvm@PLT # Offset: 537
.Ltmp2461:
    0000021e: 	movq	$0x0, (%r13)
    00000226: 	addq	$0x8, %r13
    0000022a: 	cmpq	%r15, %r13
    0000022d: 	jne	.Ltmp2464 # Offset: 557
    0000022f: 	movl	0x10(%rsp), %edx
    00000233: 	movl	iterations(%rip), %eax
    00000239: 	addl	%edx, 0x28(%rsp)
    0000023d: 	movl	0x28(%rsp), %ecx
    00000241: 	cmpl	%ecx, %eax
    00000243: 	jg	.Ltmp2465 # Offset: 579
.Ltmp2471:
    00000249: 	movq	0x38(%rsp), %rdi
    0000024e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 590
    00000253: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000261: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000268: 	je	.Ltmp2466 # Offset: 616
.Ltmp2470:
    0000026e: 	movq	-0x20(%rax), %rdi
    00000272: 	movsd	0x18(%rsp), %xmm0
    00000278: 	callq	_Z13record_resultdPKc # Offset: 632
    0000027d: 	cmpq	$0x0, 0x20(%rsp)
    00000283: 	je	.Ltmp2467 # Offset: 643
    00000285: 	movq	0x58(%rsp), %rax
    0000028a: 	subq	%fs:0x28, %rax
    00000293: 	jne	.Ltmp2468 # Offset: 659
    00000295: 	movq	0x50(%rsp), %rsi
    0000029a: 	movq	0x20(%rsp), %rdi
    0000029f: 	addq	$0x68, %rsp
    000002a3: 	popq	%rbx
    000002a4: 	popq	%rbp
    000002a5: 	subq	%rdi, %rsi
    000002a8: 	popq	%r12
    000002aa: 	popq	%r13
    000002ac: 	popq	%r14
    000002ae: 	popq	%r15
    000002b0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 688
.Ltmp2467:
    000002b5: 	movq	0x58(%rsp), %rax
    000002ba: 	subq	%fs:0x28, %rax
    000002c3: 	jne	.Ltmp2468 # Offset: 707
    000002c5: 	addq	$0x68, %rsp
    000002c9: 	popq	%rbx
    000002ca: 	popq	%rbp
    000002cb: 	popq	%r12
    000002cd: 	popq	%r13
    000002cf: 	popq	%r14
    000002d1: 	popq	%r15
    000002d3: 	retq # Offset: 723
.Ltmp2454:
    000002d4: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp2455:
    000002dd: 	movq	$0x0, 0x50(%rsp)
    000002e6: 	pxor	%xmm0, %xmm0
    000002ea: 	movaps	%xmm0, 0x40(%rsp)
    000002ef: 	jmp	.Ltmp2469 # Offset: 751
.Ltmp2466:
    000002f4: 	movq	-0x8(%rdx), %rax
    000002f8: 	addq	$0x200, %rax
    000002fe: 	jmp	.Ltmp2470 # Offset: 766
.Ltmp2456:
    00000303: 	pxor	%xmm3, %xmm3
    00000307: 	movsd	%xmm3, 0x18(%rsp)
    0000030d: 	jmp	.Ltmp2471 # Offset: 781
.Ltmp2468:
    00000312: 	callq	__stack_chk_fail@PLT # Offset: 786
    00000317: 	endbr64
    0000031b: 	movq	%rax, %rbp
    0000031e: 	movq	0x40(%rsp), %rdi
    00000323: 	movq	0x50(%rsp), %rsi
    00000328: 	subq	%rdi, %rsi
    0000032b: 	testq	%rdi, %rdi
    0000032e: 	je	.Ltmp2472 # Offset: 814
    00000330: 	callq	_ZdlPvm@PLT # Offset: 816
.Ltmp2472:
    00000335: 	movq	%rbp, %rdi
    00000338: 	callq	_Unwind_Resume@PLT # Offset: 824
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_eraseall_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIPSt8multisetIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x1a4f0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x1a4f0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt8multisetIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp2473 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp2474 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp2475 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp2476 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp2477 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp2484:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp2478 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp2478:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp2479 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp2480 # Offset: 200
.Ltmp2482:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp2474:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp2481 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp2481:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2473:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2479:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp2483:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp2482 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2480:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp2483 # Offset: 392
.Ltmp2477:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp2485:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp2484 # Offset: 445
.Ltmp2476:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp2485 # Offset: 460
.Ltmp2475:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt8multisetIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm"

Binary Function "_Z15test_erase_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0x1a6d0
  Size        : 0x57a
  MaxSize     : 0x580
  Offset      : 0x1a6d0
  Section     : .text
  Orc Section : .local.text._Z15test_erase_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x88, %rsp
    00000015: 	movq	%rdx, 0x30(%rsp)
    0000001a: 	xorl	%edx, %edx
    0000001c: 	movq	%rcx, (%rsp)
    00000020: 	movq	%rsi, %rcx
    00000023: 	movq	%rdi, 0x28(%rsp)
    00000028: 	subq	%rdi, %rcx
    0000002b: 	movq	%rsi, 0x8(%rsp)
    00000030: 	movq	%r8, 0x48(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x78(%rsp)
    00000043: 	xorl	%eax, %eax
    00000045: 	movabsq	$0x500000000, %rax
    0000004f: 	divq	%rcx
    00000052: 	movq	%rax, 0x20(%rsp)
    00000057: 	cmpq	$0x3e8, %rax
    0000005d: 	ja	.Ltmp2486 # Offset: 93
    00000063: 	cmpq	$0x3, %rax
    00000067: 	ja	.Ltmp2487 # Offset: 103
    0000006d: 	movq	$0x0, 0x70(%rsp)
    00000076: 	pxor	%xmm0, %xmm0
    0000007a: 	movq	$0x4, 0x20(%rsp)
    00000083: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp2527:
    00000088: 	movq	0x20(%rsp), %rbx
    0000008d: 	leaq	0x60(%rsp), %rdi
    00000092: 	movq	%rbx, %rsi
    00000095: 	callq	_ZNSt6vectorIPSt8multisetIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 149
    0000009a: 	movl	iterations(%rip), %eax
    000000a0: 	testl	%eax, %eax
    000000a2: 	jle	.Ltmp2488 # Offset: 162
    000000a8: 	movl	%ebx, 0x44(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x40(%rsp)
    000000b8: 	movsd	%xmm2, 0x58(%rsp)
.Ltmp2522:
    000000be: 	movslq	0x40(%rsp), %rdx
    000000c3: 	movslq	%eax, %rcx
    000000c6: 	movq	%rdx, %rsi
    000000c9: 	addq	0x20(%rsp), %rdx
    000000ce: 	subl	%esi, %eax
    000000d0: 	cmpq	%rcx, %rdx
    000000d3: 	movq	0x60(%rsp), %rdx
    000000d8: 	cmovbl	0x44(%rsp), %eax
    000000dd: 	leaq	0x8(%rdx), %rcx
    000000e1: 	subl	$0x1, %eax
    000000e4: 	movq	%rdx, 0x38(%rsp)
    000000e9: 	movq	%rdx, %r15
    000000ec: 	leaq	(%rcx,%rax,8), %rax
    000000f0: 	movq	%rcx, 0x50(%rsp)
    000000f5: 	movq	%rax, 0x18(%rsp)
.Ltmp2497:
    000000fa: 	movl	$0x30, %edi
    000000ff: 	callq	_Znwm@PLT # Offset: 255
    00000104: 	leaq	0x8(%rax), %r14
    00000108: 	movl	$0x0, 0x8(%rax)
    0000010f: 	movq	%rax, %rbp
    00000112: 	movq	$0x0, 0x10(%rax)
    0000011a: 	movq	%r14, 0x18(%rax)
    0000011e: 	movq	%r14, 0x20(%rax)
    00000122: 	movq	$0x0, 0x28(%rax)
    0000012a: 	movq	0x28(%rsp), %rax
    0000012f: 	cmpq	%rax, 0x8(%rsp)
    00000134: 	je	.Ltmp2489 # Offset: 308
    0000013a: 	movq	%rax, %rbx
    0000013d: 	xorl	%r12d, %r12d
    00000140: 	addq	$0x8, %rbx
    00000144: 	testq	%r12, %r12
    00000147: 	je	.Ltmp2490 # Offset: 327
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp2496:
    00000150: 	movsd	-0x8(%rbx), %xmm1
    00000155: 	jmp	.Ltmp2491 # Offset: 341
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2493:
    00000160: 	movq	0x10(%r12), %rax
    00000165: 	testq	%rax, %rax
    00000168: 	je	.Ltmp2492 # Offset: 360
.Ltmp2494:
    0000016a: 	movq	%rax, %r12
.Ltmp2491:
    0000016d: 	movsd	0x20(%r12), %xmm0
    00000174: 	comisd	%xmm1, %xmm0
    00000178: 	ja	.Ltmp2493 # Offset: 376
    0000017a: 	movq	0x18(%r12), %rax
    0000017f: 	testq	%rax, %rax
    00000182: 	jne	.Ltmp2494 # Offset: 386
.Ltmp2492:
    00000184: 	movl	$0x1, %r13d
    0000018a: 	cmpq	%r12, %r14
    0000018d: 	je	.Ltmp2495 # Offset: 397
    0000018f: 	comisd	%xmm1, %xmm0
    00000193: 	seta	%r13b
.Ltmp2495:
    00000197: 	movl	$0x28, %edi
    0000019c: 	callq	_Znwm@PLT # Offset: 412
    000001a1: 	movsd	-0x8(%rbx), %xmm0
    000001a6: 	movq	%rax, %rsi
    000001a9: 	movzbl	%r13b, %edi
    000001ad: 	movq	%r14, %rcx
    000001b0: 	movq	%r12, %rdx
    000001b3: 	movsd	%xmm0, 0x20(%rax)
    000001b8: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 440
    000001bd: 	addq	$0x1, 0x28(%rbp)
    000001c2: 	cmpq	%rbx, 0x8(%rsp)
    000001c7: 	je	.Ltmp2489 # Offset: 455
    000001c9: 	movq	0x10(%rbp), %r12
    000001cd: 	addq	$0x8, %rbx
    000001d1: 	testq	%r12, %r12
    000001d4: 	jne	.Ltmp2496 # Offset: 468
.Ltmp2490:
    000001da: 	movq	%r14, %r12
    000001dd: 	movl	$0x1, %r13d
    000001e3: 	jmp	.Ltmp2495 # Offset: 483
.Ltmp2489:
    000001e5: 	movq	%r15, %rax
    000001e8: 	movq	%rbp, (%r15)
    000001eb: 	addq	$0x8, %rax
    000001ef: 	movq	%rax, %r15
    000001f2: 	cmpq	%rax, 0x18(%rsp)
    000001f7: 	jne	.Ltmp2497 # Offset: 503
    000001fd: 	callq	clock@PLT # Offset: 509
    00000202: 	movq	(%rsp), %rdx
    00000206: 	movq	%rax, start_time(%rip)
    0000020d: 	cmpq	%rdx, 0x30(%rsp)
    00000212: 	je	.Ltmp2498 # Offset: 530
    00000218: 	movq	0x38(%rsp), %rax
    0000021d: 	movq	%rax, 0x10(%rsp)
.Ltmp2507:
    00000222: 	movq	0x10(%rsp), %rax
    00000227: 	movq	0x30(%rsp), %rbp
    0000022c: 	movq	(%rax), %r14
    0000022f: 	leaq	0x8(%r14), %rbx
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2506:
    00000238: 	movq	0x10(%r14), %r15
    0000023c: 	addq	$0x8, %rbp
    00000240: 	testq	%r15, %r15
    00000243: 	je	.Ltmp2499 # Offset: 579
    00000249: 	movsd	-0x8(%rbp), %xmm1
    0000024e: 	movq	%rbx, %r13
    00000251: 	movq	%r15, %r12
    00000254: 	jmp	.Ltmp2500 # Offset: 596
    00000256: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2502:
    00000260: 	movq	0x18(%r12), %r12
    00000265: 	testq	%r12, %r12
    00000268: 	je	.Ltmp2501 # Offset: 616
.Ltmp2500:
    0000026a: 	movsd	0x20(%r12), %xmm0
    00000271: 	comisd	%xmm0, %xmm1
    00000275: 	ja	.Ltmp2502 # Offset: 629
    00000277: 	comisd	%xmm1, %xmm0
    0000027b: 	movq	0x10(%r12), %rax
    00000280: 	jbe	.Ltmp2503 # Offset: 640
    00000286: 	movq	%r12, %r13
    00000289: 	movq	%rax, %r12
    0000028c: 	testq	%r12, %r12
    0000028f: 	jne	.Ltmp2500 # Offset: 655
.Ltmp2501:
    00000291: 	cmpq	%r13, 0x18(%r14)
    00000295: 	jne	.Ltmp2504 # Offset: 661
    00000297: 	cmpq	%r13, %rbx
    0000029a: 	je	.Ltmp2505 # Offset: 666
.Ltmp2504:
    000002a0: 	cmpq	%rbp, (%rsp)
    000002a4: 	jne	.Ltmp2506 # Offset: 676
    000002a6: 	addq	$0x8, 0x10(%rsp)
    000002ac: 	movq	0x10(%rsp), %rax
    000002b1: 	cmpq	%rax, 0x18(%rsp)
    000002b6: 	jne	.Ltmp2507 # Offset: 694
.Ltmp2498:
    000002bc: 	callq	clock@PLT # Offset: 700
    000002c1: 	pxor	%xmm0, %xmm0
    000002c5: 	movq	0x18(%rsp), %r14
    000002ca: 	movq	0x38(%rsp), %r12
    000002cf: 	movq	%rax, end_time(%rip)
    000002d6: 	subq	start_time(%rip), %rax
    000002dd: 	cvtsi2sd	%rax, %xmm0
    000002e2: 	divsd	DATAat0x53788(%rip), %xmm0
    000002ea: 	addsd	0x58(%rsp), %xmm0
    000002f0: 	movq	0x50(%rsp), %rbp
    000002f5: 	movsd	%xmm0, 0x58(%rsp)
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2512:
    00000300: 	movq	(%r12), %r13
    00000304: 	testq	%r13, %r13
    00000307: 	je	.Ltmp2508 # Offset: 775
    00000309: 	movq	0x10(%r13), %rbx
    0000030d: 	testq	%rbx, %rbx
    00000310: 	je	.Ltmp2509 # Offset: 784
.Ltmp2510:
    00000312: 	movq	0x18(%rbx), %rdi
    00000316: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 790
    0000031b: 	movq	%rbx, %rdi
    0000031e: 	movq	0x10(%rbx), %rbx
    00000322: 	movl	$0x28, %esi
    00000327: 	callq	_ZdlPvm@PLT # Offset: 807
    0000032c: 	testq	%rbx, %rbx
    0000032f: 	jne	.Ltmp2510 # Offset: 815
.Ltmp2509:
    00000331: 	movl	$0x30, %esi
    00000336: 	movq	%r13, %rdi
    00000339: 	callq	_ZdlPvm@PLT # Offset: 825
.Ltmp2508:
    0000033e: 	movq	$0x0, (%r12)
    00000346: 	movq	%rbp, %r12
    00000349: 	cmpq	%rbp, %r14
    0000034c: 	je	.Ltmp2511 # Offset: 844
    00000352: 	addq	$0x8, %rbp
    00000356: 	jmp	.Ltmp2512 # Offset: 854
    00000358: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2505:
    00000360: 	movq	0x18(%r15), %rdi
    00000364: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 868
    00000369: 	movq	%r15, %rdi
    0000036c: 	movq	0x10(%r15), %r15
    00000370: 	movl	$0x28, %esi
    00000375: 	callq	_ZdlPvm@PLT # Offset: 885
    0000037a: 	testq	%r15, %r15
    0000037d: 	jne	.Ltmp2505 # Offset: 893
.Ltmp2526:
    0000037f: 	movq	$0x0, 0x10(%r14)
    00000387: 	movq	%rbx, 0x18(%r14)
    0000038b: 	movq	%rbx, 0x20(%r14)
    0000038f: 	movq	$0x0, 0x28(%r14)
    00000397: 	jmp	.Ltmp2504 # Offset: 919
    0000039c: 	nopl	(%rax) # Size: 4
.Ltmp2503:
    000003a0: 	movq	0x18(%r12), %rcx
    000003a5: 	nopl	(%rax) # Size: 3
.Ltmp2521:
    000003a8: 	testq	%rcx, %rcx
    000003ab: 	je	.Ltmp2513 # Offset: 939
.Ltmp2515:
    000003ad: 	movsd	0x20(%rcx), %xmm0
    000003b2: 	comisd	%xmm1, %xmm0
    000003b6: 	jbe	.Ltmp2514 # Offset: 950
    000003bc: 	movq	%rcx, %r13
    000003bf: 	movq	0x10(%rcx), %rcx
    000003c3: 	testq	%rcx, %rcx
    000003c6: 	jne	.Ltmp2515 # Offset: 966
    000003c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2513:
    000003d0: 	testq	%rax, %rax
    000003d3: 	je	.Ltmp2516 # Offset: 979
.Ltmp2518:
    000003d5: 	comisd	0x20(%rax), %xmm1
    000003da: 	ja	.Ltmp2517 # Offset: 986
    000003dc: 	movq	%rax, %r12
    000003df: 	movq	0x10(%rax), %rax
    000003e3: 	testq	%rax, %rax
    000003e6: 	jne	.Ltmp2518 # Offset: 998
.Ltmp2516:
    000003e8: 	cmpq	%r12, 0x18(%r14)
    000003ec: 	jne	.Ltmp2519 # Offset: 1004
    000003ee: 	cmpq	%r13, %rbx
    000003f1: 	je	.Ltmp2505 # Offset: 1009
.Ltmp2519:
    000003f7: 	cmpq	%r13, %r12
    000003fa: 	je	.Ltmp2504 # Offset: 1018
.Ltmp2520:
    00000400: 	movq	%r12, %rdi
    00000403: 	movq	%r12, %r15
    00000406: 	callq	_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@PLT # Offset: 1030
    0000040b: 	movq	%rbx, %rsi
    0000040e: 	movq	%r15, %rdi
    00000411: 	movq	%rax, %r12
    00000414: 	callq	_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_@PLT # Offset: 1044
    00000419: 	movl	$0x28, %esi
    0000041e: 	movq	%rax, %rdi
    00000421: 	callq	_ZdlPvm@PLT # Offset: 1057
    00000426: 	subq	$0x1, 0x28(%r14)
    0000042b: 	cmpq	%r12, %r13
    0000042e: 	jne	.Ltmp2520 # Offset: 1070
    00000430: 	jmp	.Ltmp2504 # Offset: 1072
    00000435: 	nopl	(%rax) # Size: 3
.Ltmp2514:
    00000438: 	movq	0x18(%rcx), %rcx
    0000043c: 	jmp	.Ltmp2521 # Offset: 1084
    00000441: 	nopl	(%rax) # Size: 7
.Ltmp2517:
    00000448: 	movq	0x18(%rax), %rax
    0000044c: 	jmp	.Ltmp2513 # Offset: 1100
.Ltmp2511:
    00000451: 	movl	0x20(%rsp), %edx
    00000455: 	movl	iterations(%rip), %eax
    0000045b: 	addl	%edx, 0x40(%rsp)
    0000045f: 	movl	0x40(%rsp), %edx
    00000463: 	cmpl	%edx, %eax
    00000465: 	jg	.Ltmp2522 # Offset: 1125
.Ltmp2529:
    0000046b: 	movq	0x48(%rsp), %rdi
    00000470: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1136
    00000475: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000047c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000483: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000048a: 	je	.Ltmp2523 # Offset: 1162
.Ltmp2528:
    00000490: 	movq	-0x20(%rax), %rdi
    00000494: 	movsd	0x58(%rsp), %xmm0
    0000049a: 	callq	_Z13record_resultdPKc # Offset: 1178
    0000049f: 	movq	0x60(%rsp), %rdi
    000004a4: 	testq	%rdi, %rdi
    000004a7: 	je	.Ltmp2524 # Offset: 1191
    000004a9: 	movq	0x78(%rsp), %rax
    000004ae: 	subq	%fs:0x28, %rax
    000004b7: 	jne	.Ltmp2525 # Offset: 1207
    000004bd: 	movq	0x70(%rsp), %rsi
    000004c2: 	addq	$0x88, %rsp
    000004c9: 	popq	%rbx
    000004ca: 	popq	%rbp
    000004cb: 	subq	%rdi, %rsi
    000004ce: 	popq	%r12
    000004d0: 	popq	%r13
    000004d2: 	popq	%r14
    000004d4: 	popq	%r15
    000004d6: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1238
    000004db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2499:
    000004e0: 	cmpq	0x18(%r14), %rbx
    000004e4: 	jne	.Ltmp2504 # Offset: 1252
    000004ea: 	jmp	.Ltmp2526 # Offset: 1258
.Ltmp2486:
    000004ef: 	movq	$0x3e8, 0x20(%rsp)
.Ltmp2487:
    000004f8: 	movq	$0x0, 0x70(%rsp)
    00000501: 	pxor	%xmm0, %xmm0
    00000505: 	movaps	%xmm0, 0x60(%rsp)
    0000050a: 	jmp	.Ltmp2527 # Offset: 1290
.Ltmp2524:
    0000050f: 	movq	0x78(%rsp), %rax
    00000514: 	subq	%fs:0x28, %rax
    0000051d: 	jne	.Ltmp2525 # Offset: 1309
    0000051f: 	addq	$0x88, %rsp
    00000526: 	popq	%rbx
    00000527: 	popq	%rbp
    00000528: 	popq	%r12
    0000052a: 	popq	%r13
    0000052c: 	popq	%r14
    0000052e: 	popq	%r15
    00000530: 	retq # Offset: 1328
.Ltmp2523:
    00000531: 	movq	-0x8(%rdx), %rax
    00000535: 	addq	$0x200, %rax
    0000053b: 	jmp	.Ltmp2528 # Offset: 1339
.Ltmp2488:
    00000540: 	pxor	%xmm4, %xmm4
    00000544: 	movsd	%xmm4, 0x58(%rsp)
    0000054a: 	jmp	.Ltmp2529 # Offset: 1354
.Ltmp2525:
    0000054f: 	callq	__stack_chk_fail@PLT # Offset: 1359
    00000554: 	endbr64
    00000558: 	movq	%rax, %rbp
    0000055b: 	movq	0x60(%rsp), %rdi
    00000560: 	movq	0x70(%rsp), %rsi
    00000565: 	subq	%rdi, %rsi
    00000568: 	testq	%rdi, %rdi
    0000056b: 	je	.Ltmp2530 # Offset: 1387
    0000056d: 	callq	_ZdlPvm@PLT # Offset: 1389
.Ltmp2530:
    00000572: 	movq	%rbp, %rdi
    00000575: 	callq	_Unwind_Resume@PLT # Offset: 1397
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_erase_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_duplicate_coreISt8multisetIdSt4lessIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0x1ac50
  Size        : 0x2d6
  MaxSize     : 0x2e0
  Offset      : 0x1ac50
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt8multisetIdSt4lessIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	(,%rsi,8), %rcx
    0000000e: 	pushq	%r14
    00000010: 	movq	%rdi, %r14
    00000013: 	pushq	%r13
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x28(%rsp)
    00000022: 	xorl	%edx, %edx
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x48(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	movabsq	$0x500000000, %rax
    0000003e: 	divq	%rcx
    00000041: 	movq	%rax, (%rsp)
    00000045: 	cmpq	$0x3e8, %rax
    0000004b: 	ja	.Ltmp2531 # Offset: 75
    00000051: 	cmpq	$0x3, %rax
    00000055: 	ja	.Ltmp2532 # Offset: 85
    0000005b: 	movq	$0x0, 0x40(%rsp)
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	movq	$0x4, (%rsp)
    00000070: 	movaps	%xmm0, 0x30(%rsp)
.Ltmp2543:
    00000075: 	movq	(%rsp), %rbx
    00000079: 	leaq	0x30(%rsp), %rdi
    0000007e: 	movq	%rbx, %rsi
    00000081: 	callq	_ZNSt6vectorIPSt8multisetIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 129
    00000086: 	movq	0x30(%rsp), %rdx
    0000008b: 	movl	iterations(%rip), %eax
    00000091: 	movq	%rdx, 0x10(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp2533 # Offset: 152
    0000009e: 	addq	$0x8, %rdx
    000000a2: 	movl	%ebx, 0x1c(%rsp)
    000000a6: 	pxor	%xmm2, %xmm2
    000000aa: 	xorl	%r15d, %r15d
    000000ad: 	movq	%rdx, 0x20(%rsp)
    000000b2: 	movsd	%xmm2, 0x8(%rsp)
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2539:
    000000c0: 	movslq	%eax, %rcx
    000000c3: 	movslq	%r15d, %rdx
    000000c6: 	addq	(%rsp), %rdx
    000000ca: 	subl	%r15d, %eax
    000000cd: 	cmpq	%rcx, %rdx
    000000d0: 	cmovbl	0x1c(%rsp), %eax
    000000d5: 	movl	%eax, %ebx
    000000d7: 	callq	clock@PLT # Offset: 215
    000000dc: 	movq	0x10(%rsp), %r12
    000000e1: 	movq	0x20(%rsp), %rcx
    000000e6: 	movq	%rax, start_time(%rip)
    000000ed: 	leal	-0x1(%rbx), %eax
    000000f0: 	movq	%r12, %rbp
    000000f3: 	leaq	(%rcx,%rax,8), %r13
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2534:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbx
    0000010d: 	movl	$0x0, 0x8(%rax)
    00000114: 	leaq	0x8(%rax), %rax
    00000118: 	movq	%r14, %rsi
    0000011b: 	movq	$0x0, 0x8(%rax)
    00000123: 	movq	%rbx, %rdi
    00000126: 	movq	%rax, 0x18(%rbx)
    0000012a: 	movq	%rax, 0x20(%rbx)
    0000012e: 	movq	$0x0, 0x28(%rbx)
    00000136: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEEaSERKS5_.isra.0/1" # Offset: 310
    0000013b: 	movq	%rbx, (%r12)
    0000013f: 	addq	$0x8, %r12
    00000143: 	cmpq	%r13, %r12
    00000146: 	jne	.Ltmp2534 # Offset: 326
    00000148: 	callq	clock@PLT # Offset: 328
    0000014d: 	pxor	%xmm0, %xmm0
    00000151: 	movq	%rax, end_time(%rip)
    00000158: 	subq	start_time(%rip), %rax
    0000015f: 	cvtsi2sd	%rax, %xmm0
    00000164: 	divsd	DATAat0x53788(%rip), %xmm0
    0000016c: 	addsd	0x8(%rsp), %xmm0
    00000172: 	movsd	%xmm0, 0x8(%rsp)
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2538:
    00000180: 	movq	(%rbp), %r12
    00000184: 	testq	%r12, %r12
    00000187: 	je	.Ltmp2535 # Offset: 391
    00000189: 	movq	0x10(%r12), %rbx
    0000018e: 	testq	%rbx, %rbx
    00000191: 	je	.Ltmp2536 # Offset: 401
.Ltmp2537:
    00000193: 	movq	0x18(%rbx), %rdi
    00000197: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 407
    0000019c: 	movq	%rbx, %rdi
    0000019f: 	movq	0x10(%rbx), %rbx
    000001a3: 	movl	$0x28, %esi
    000001a8: 	callq	_ZdlPvm@PLT # Offset: 424
    000001ad: 	testq	%rbx, %rbx
    000001b0: 	jne	.Ltmp2537 # Offset: 432
.Ltmp2536:
    000001b2: 	movl	$0x30, %esi
    000001b7: 	movq	%r12, %rdi
    000001ba: 	callq	_ZdlPvm@PLT # Offset: 442
.Ltmp2535:
    000001bf: 	movq	$0x0, (%rbp)
    000001c7: 	addq	$0x8, %rbp
    000001cb: 	cmpq	%rbp, %r13
    000001ce: 	jne	.Ltmp2538 # Offset: 462
    000001d0: 	movl	iterations(%rip), %eax
    000001d6: 	addl	(%rsp), %r15d
    000001da: 	cmpl	%r15d, %eax
    000001dd: 	jg	.Ltmp2539 # Offset: 477
.Ltmp2545:
    000001e3: 	movq	0x28(%rsp), %rdi
    000001e8: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 488
    000001ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001fb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000202: 	je	.Ltmp2540 # Offset: 514
.Ltmp2544:
    00000208: 	movq	-0x20(%rax), %rdi
    0000020c: 	movsd	0x8(%rsp), %xmm0
    00000212: 	callq	_Z13record_resultdPKc # Offset: 530
    00000217: 	cmpq	$0x0, 0x10(%rsp)
    0000021d: 	je	.Ltmp2541 # Offset: 541
    0000021f: 	movq	0x48(%rsp), %rax
    00000224: 	subq	%fs:0x28, %rax
    0000022d: 	jne	.Ltmp2542 # Offset: 557
    0000022f: 	movq	0x40(%rsp), %rsi
    00000234: 	movq	0x10(%rsp), %rdi
    00000239: 	addq	$0x58, %rsp
    0000023d: 	popq	%rbx
    0000023e: 	popq	%rbp
    0000023f: 	subq	%rdi, %rsi
    00000242: 	popq	%r12
    00000244: 	popq	%r13
    00000246: 	popq	%r14
    00000248: 	popq	%r15
    0000024a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 586
.Ltmp2541:
    0000024f: 	movq	0x48(%rsp), %rax
    00000254: 	subq	%fs:0x28, %rax
    0000025d: 	jne	.Ltmp2542 # Offset: 605
    0000025f: 	addq	$0x58, %rsp
    00000263: 	popq	%rbx
    00000264: 	popq	%rbp
    00000265: 	popq	%r12
    00000267: 	popq	%r13
    00000269: 	popq	%r14
    0000026b: 	popq	%r15
    0000026d: 	retq # Offset: 621
.Ltmp2531:
    0000026e: 	movq	$0x3e8, (%rsp)
.Ltmp2532:
    00000276: 	movq	$0x0, 0x40(%rsp)
    0000027f: 	pxor	%xmm0, %xmm0
    00000283: 	movaps	%xmm0, 0x30(%rsp)
    00000288: 	jmp	.Ltmp2543 # Offset: 648
.Ltmp2540:
    0000028d: 	movq	-0x8(%rdx), %rax
    00000291: 	addq	$0x200, %rax
    00000297: 	jmp	.Ltmp2544 # Offset: 663
.Ltmp2533:
    0000029c: 	pxor	%xmm3, %xmm3
    000002a0: 	movsd	%xmm3, 0x8(%rsp)
    000002a6: 	jmp	.Ltmp2545 # Offset: 678
.Ltmp2542:
    000002ab: 	callq	__stack_chk_fail@PLT # Offset: 683
    000002b0: 	endbr64
    000002b4: 	movq	%rax, %rbp
    000002b7: 	movq	0x30(%rsp), %rdi
    000002bc: 	movq	0x40(%rsp), %rsi
    000002c1: 	subq	%rdi, %rsi
    000002c4: 	testq	%rdi, %rdi
    000002c7: 	je	.Ltmp2546 # Offset: 711
    000002c9: 	callq	_ZdlPvm@PLT # Offset: 713
.Ltmp2546:
    000002ce: 	movq	%rbp, %rdi
    000002d1: 	callq	_Unwind_Resume@PLT # Offset: 721
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt8multisetIdSt4lessIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_delete_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x1af30
  Size        : 0x3ac
  MaxSize     : 0x3b0
  Offset      : 0x1af30
  Section     : .text
  Orc Section : .local.text._Z16test_delete_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rsi, %r15
    0000000c: 	pushq	%r14
    0000000e: 	subq	%rdi, %rcx
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x48(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, (%rsp)
    00000048: 	cmpq	$0x3e8, %rax
    0000004e: 	ja	.Ltmp2547 # Offset: 78
    00000054: 	cmpq	$0x3, %rax
    00000058: 	ja	.Ltmp2548 # Offset: 88
    0000005e: 	movq	$0x0, 0x60(%rsp)
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	movq	$0x4, (%rsp)
    00000073: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp2567:
    00000078: 	movq	(%rsp), %rbx
    0000007c: 	leaq	0x50(%rsp), %rdi
    00000081: 	movq	%rbx, %rsi
    00000084: 	callq	_ZNSt6vectorIPSt8multisetIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 132
    00000089: 	movq	0x50(%rsp), %rcx
    0000008e: 	movl	iterations(%rip), %eax
    00000094: 	movq	%rcx, 0x28(%rsp)
    00000099: 	testl	%eax, %eax
    0000009b: 	jle	.Ltmp2549 # Offset: 155
    000000a1: 	leaq	0x8(%rcx), %rdx
    000000a5: 	movl	%ebx, 0x34(%rsp)
    000000a9: 	pxor	%xmm3, %xmm3
    000000ad: 	movl	$0x0, 0x30(%rsp)
    000000b5: 	movq	%rdx, 0x40(%rsp)
    000000ba: 	movsd	%xmm3, 0x20(%rsp)
.Ltmp2563:
    000000c0: 	movslq	0x30(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	%rdx, %rsi
    000000cb: 	addq	(%rsp), %rdx
    000000cf: 	subl	%esi, %eax
    000000d1: 	cmpq	%rcx, %rdx
    000000d4: 	cmovbl	0x34(%rsp), %eax
    000000d9: 	movq	0x40(%rsp), %rcx
    000000de: 	movq	0x28(%rsp), %rdx
    000000e3: 	subl	$0x1, %eax
    000000e6: 	leaq	(%rcx,%rax,8), %rax
    000000ea: 	movq	%rdx, 0x38(%rsp)
    000000ef: 	movq	%rax, 0x18(%rsp)
    000000f4: 	movq	%rdx, 0x8(%rsp)
.Ltmp2558:
    000000f9: 	movl	$0x30, %edi
    000000fe: 	callq	_Znwm@PLT # Offset: 254
    00000103: 	leaq	0x8(%rax), %r14
    00000107: 	movl	$0x0, 0x8(%rax)
    0000010e: 	movq	%rax, %rbp
    00000111: 	movq	$0x0, 0x10(%rax)
    00000119: 	movq	%r14, 0x18(%rax)
    0000011d: 	movq	%r14, 0x20(%rax)
    00000121: 	movq	$0x0, 0x28(%rax)
    00000129: 	movq	0x10(%rsp), %rax
    0000012e: 	cmpq	%rax, %r15
    00000131: 	je	.Ltmp2550 # Offset: 305
    00000137: 	movq	%rax, %rbx
    0000013a: 	xorl	%r12d, %r12d
    0000013d: 	addq	$0x8, %rbx
    00000141: 	testq	%r12, %r12
    00000144: 	je	.Ltmp2551 # Offset: 324
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2557:
    00000150: 	movsd	-0x8(%rbx), %xmm1
    00000155: 	jmp	.Ltmp2552 # Offset: 341
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2554:
    00000160: 	movq	0x10(%r12), %rax
    00000165: 	testq	%rax, %rax
    00000168: 	je	.Ltmp2553 # Offset: 360
.Ltmp2555:
    0000016a: 	movq	%rax, %r12
.Ltmp2552:
    0000016d: 	movsd	0x20(%r12), %xmm0
    00000174: 	comisd	%xmm1, %xmm0
    00000178: 	ja	.Ltmp2554 # Offset: 376
    0000017a: 	movq	0x18(%r12), %rax
    0000017f: 	testq	%rax, %rax
    00000182: 	jne	.Ltmp2555 # Offset: 386
.Ltmp2553:
    00000184: 	movl	$0x1, %r13d
    0000018a: 	cmpq	%r12, %r14
    0000018d: 	je	.Ltmp2556 # Offset: 397
    0000018f: 	comisd	%xmm1, %xmm0
    00000193: 	seta	%r13b
.Ltmp2556:
    00000197: 	movl	$0x28, %edi
    0000019c: 	callq	_Znwm@PLT # Offset: 412
    000001a1: 	movsd	-0x8(%rbx), %xmm0
    000001a6: 	movq	%rax, %rsi
    000001a9: 	movzbl	%r13b, %edi
    000001ad: 	movq	%r14, %rcx
    000001b0: 	movq	%r12, %rdx
    000001b3: 	movsd	%xmm0, 0x20(%rax)
    000001b8: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 440
    000001bd: 	addq	$0x1, 0x28(%rbp)
    000001c2: 	cmpq	%rbx, %r15
    000001c5: 	je	.Ltmp2550 # Offset: 453
    000001c7: 	movq	0x10(%rbp), %r12
    000001cb: 	addq	$0x8, %rbx
    000001cf: 	testq	%r12, %r12
    000001d2: 	jne	.Ltmp2557 # Offset: 466
.Ltmp2551:
    000001d8: 	movq	%r14, %r12
    000001db: 	movl	$0x1, %r13d
    000001e1: 	jmp	.Ltmp2556 # Offset: 481
    000001e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2550:
    000001e8: 	movq	0x8(%rsp), %rax
    000001ed: 	movq	%rbp, (%rax)
    000001f0: 	addq	$0x8, %rax
    000001f4: 	movq	%rax, 0x8(%rsp)
    000001f9: 	cmpq	0x18(%rsp), %rax
    000001fe: 	jne	.Ltmp2558 # Offset: 510
    00000204: 	callq	clock@PLT # Offset: 516
    00000209: 	movq	0x18(%rsp), %r13
    0000020e: 	movq	0x38(%rsp), %rbp
    00000213: 	movq	%rax, start_time(%rip)
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2562:
    00000220: 	movq	(%rbp), %r12
    00000224: 	testq	%r12, %r12
    00000227: 	je	.Ltmp2559 # Offset: 551
    00000229: 	movq	0x10(%r12), %rbx
    0000022e: 	testq	%rbx, %rbx
    00000231: 	je	.Ltmp2560 # Offset: 561
.Ltmp2561:
    00000233: 	movq	0x18(%rbx), %rdi
    00000237: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 567
    0000023c: 	movq	%rbx, %rdi
    0000023f: 	movq	0x10(%rbx), %rbx
    00000243: 	movl	$0x28, %esi
    00000248: 	callq	_ZdlPvm@PLT # Offset: 584
    0000024d: 	testq	%rbx, %rbx
    00000250: 	jne	.Ltmp2561 # Offset: 592
.Ltmp2560:
    00000252: 	movl	$0x30, %esi
    00000257: 	movq	%r12, %rdi
    0000025a: 	callq	_ZdlPvm@PLT # Offset: 602
.Ltmp2559:
    0000025f: 	movq	$0x0, (%rbp)
    00000267: 	addq	$0x8, %rbp
    0000026b: 	cmpq	%rbp, %r13
    0000026e: 	jne	.Ltmp2562 # Offset: 622
    00000270: 	callq	clock@PLT # Offset: 624
    00000275: 	pxor	%xmm0, %xmm0
    00000279: 	movl	(%rsp), %edx
    0000027c: 	addl	%edx, 0x30(%rsp)
    00000280: 	movq	%rax, end_time(%rip)
    00000287: 	subq	start_time(%rip), %rax
    0000028e: 	cvtsi2sd	%rax, %xmm0
    00000293: 	movl	0x30(%rsp), %ecx
    00000297: 	divsd	DATAat0x53788(%rip), %xmm0
    0000029f: 	addsd	0x20(%rsp), %xmm0
    000002a5: 	movl	iterations(%rip), %eax
    000002ab: 	movsd	%xmm0, 0x20(%rsp)
    000002b1: 	cmpl	%ecx, %eax
    000002b3: 	jg	.Ltmp2563 # Offset: 691
.Ltmp2569:
    000002b9: 	movq	0x48(%rsp), %rdi
    000002be: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 702
    000002c3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ca: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002d1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002d8: 	je	.Ltmp2564 # Offset: 728
.Ltmp2568:
    000002de: 	movq	-0x20(%rax), %rdi
    000002e2: 	movsd	0x20(%rsp), %xmm0
    000002e8: 	callq	_Z13record_resultdPKc # Offset: 744
    000002ed: 	cmpq	$0x0, 0x28(%rsp)
    000002f3: 	je	.Ltmp2565 # Offset: 755
    000002f5: 	movq	0x68(%rsp), %rax
    000002fa: 	subq	%fs:0x28, %rax
    00000303: 	jne	.Ltmp2566 # Offset: 771
    00000305: 	movq	0x60(%rsp), %rsi
    0000030a: 	movq	0x28(%rsp), %rdi
    0000030f: 	addq	$0x78, %rsp
    00000313: 	popq	%rbx
    00000314: 	popq	%rbp
    00000315: 	subq	%rdi, %rsi
    00000318: 	popq	%r12
    0000031a: 	popq	%r13
    0000031c: 	popq	%r14
    0000031e: 	popq	%r15
    00000320: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 800
.Ltmp2547:
    00000325: 	movq	$0x3e8, (%rsp)
.Ltmp2548:
    0000032d: 	movq	$0x0, 0x60(%rsp)
    00000336: 	pxor	%xmm0, %xmm0
    0000033a: 	movaps	%xmm0, 0x50(%rsp)
    0000033f: 	jmp	.Ltmp2567 # Offset: 831
.Ltmp2565:
    00000344: 	movq	0x68(%rsp), %rax
    00000349: 	subq	%fs:0x28, %rax
    00000352: 	jne	.Ltmp2566 # Offset: 850
    00000354: 	addq	$0x78, %rsp
    00000358: 	popq	%rbx
    00000359: 	popq	%rbp
    0000035a: 	popq	%r12
    0000035c: 	popq	%r13
    0000035e: 	popq	%r14
    00000360: 	popq	%r15
    00000362: 	retq # Offset: 866
.Ltmp2564:
    00000363: 	movq	-0x8(%rdx), %rax
    00000367: 	addq	$0x200, %rax
    0000036d: 	jmp	.Ltmp2568 # Offset: 877
.Ltmp2549:
    00000372: 	pxor	%xmm4, %xmm4
    00000376: 	movsd	%xmm4, 0x20(%rsp)
    0000037c: 	jmp	.Ltmp2569 # Offset: 892
.Ltmp2566:
    00000381: 	callq	__stack_chk_fail@PLT # Offset: 897
    00000386: 	endbr64
    0000038a: 	movq	%rax, %rbp
    0000038d: 	movq	0x50(%rsp), %rdi
    00000392: 	movq	0x60(%rsp), %rsi
    00000397: 	subq	%rdi, %rsi
    0000039a: 	testq	%rdi, %rdi
    0000039d: 	je	.Ltmp2570 # Offset: 925
    0000039f: 	callq	_ZdlPvm@PLT # Offset: 927
.Ltmp2570:
    000003a4: 	movq	%rbp, %rdi
    000003a7: 	callq	_Unwind_Resume@PLT # Offset: 935
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_delete_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_clearall_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x1b2e0
  Size        : 0x414
  MaxSize     : 0x420
  Offset      : 0x1b2e0
  Section     : .text
  Orc Section : .local.text._Z18test_clearall_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rsi, %r15
    0000000c: 	pushq	%r14
    0000000e: 	subq	%rdi, %rcx
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x40(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, (%rsp)
    00000048: 	cmpq	$0x3e8, %rax
    0000004e: 	ja	.Ltmp2571 # Offset: 78
    00000054: 	cmpq	$0x3, %rax
    00000058: 	ja	.Ltmp2572 # Offset: 88
    0000005e: 	movq	$0x0, 0x60(%rsp)
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	movq	$0x4, (%rsp)
    00000073: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp2594:
    00000078: 	movq	(%rsp), %rbx
    0000007c: 	leaq	0x50(%rsp), %rdi
    00000081: 	movq	%rbx, %rsi
    00000084: 	callq	_ZNSt6vectorIPSt8multisetIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 132
    00000089: 	movq	0x50(%rsp), %rcx
    0000008e: 	movl	iterations(%rip), %eax
    00000094: 	movq	%rcx, 0x20(%rsp)
    00000099: 	testl	%eax, %eax
    0000009b: 	jle	.Ltmp2573 # Offset: 155
    000000a1: 	leaq	0x8(%rcx), %rdx
    000000a5: 	movl	%ebx, 0x34(%rsp)
    000000a9: 	pxor	%xmm2, %xmm2
    000000ad: 	movl	$0x0, 0x30(%rsp)
    000000b5: 	movq	%rdx, 0x38(%rsp)
    000000ba: 	movsd	%xmm2, 0x48(%rsp)
.Ltmp2590:
    000000c0: 	movslq	0x30(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	%rdx, %rsi
    000000cb: 	addq	(%rsp), %rdx
    000000cf: 	subl	%esi, %eax
    000000d1: 	cmpq	%rcx, %rdx
    000000d4: 	cmovbl	0x34(%rsp), %eax
    000000d9: 	movq	0x38(%rsp), %rcx
    000000de: 	movq	0x20(%rsp), %rdx
    000000e3: 	subl	$0x1, %eax
    000000e6: 	leaq	(%rcx,%rax,8), %rax
    000000ea: 	movq	%rdx, 0x28(%rsp)
    000000ef: 	movq	%rax, 0x18(%rsp)
    000000f4: 	movq	%rdx, 0x8(%rsp)
.Ltmp2582:
    000000f9: 	movl	$0x30, %edi
    000000fe: 	callq	_Znwm@PLT # Offset: 254
    00000103: 	leaq	0x8(%rax), %r14
    00000107: 	movl	$0x0, 0x8(%rax)
    0000010e: 	movq	%rax, %rbp
    00000111: 	movq	$0x0, 0x10(%rax)
    00000119: 	movq	%r14, 0x18(%rax)
    0000011d: 	movq	%r14, 0x20(%rax)
    00000121: 	movq	$0x0, 0x28(%rax)
    00000129: 	movq	0x10(%rsp), %rax
    0000012e: 	cmpq	%rax, %r15
    00000131: 	je	.Ltmp2574 # Offset: 305
    00000137: 	movq	%rax, %rbx
    0000013a: 	xorl	%r12d, %r12d
    0000013d: 	addq	$0x8, %rbx
    00000141: 	testq	%r12, %r12
    00000144: 	je	.Ltmp2575 # Offset: 324
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2581:
    00000150: 	movsd	-0x8(%rbx), %xmm1
    00000155: 	jmp	.Ltmp2576 # Offset: 341
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2578:
    00000160: 	movq	0x10(%r12), %rax
    00000165: 	testq	%rax, %rax
    00000168: 	je	.Ltmp2577 # Offset: 360
.Ltmp2579:
    0000016a: 	movq	%rax, %r12
.Ltmp2576:
    0000016d: 	movsd	0x20(%r12), %xmm0
    00000174: 	comisd	%xmm1, %xmm0
    00000178: 	ja	.Ltmp2578 # Offset: 376
    0000017a: 	movq	0x18(%r12), %rax
    0000017f: 	testq	%rax, %rax
    00000182: 	jne	.Ltmp2579 # Offset: 386
.Ltmp2577:
    00000184: 	movl	$0x1, %r13d
    0000018a: 	cmpq	%r12, %r14
    0000018d: 	je	.Ltmp2580 # Offset: 397
    0000018f: 	comisd	%xmm1, %xmm0
    00000193: 	seta	%r13b
.Ltmp2580:
    00000197: 	movl	$0x28, %edi
    0000019c: 	callq	_Znwm@PLT # Offset: 412
    000001a1: 	movsd	-0x8(%rbx), %xmm0
    000001a6: 	movq	%rax, %rsi
    000001a9: 	movzbl	%r13b, %edi
    000001ad: 	movq	%r14, %rcx
    000001b0: 	movq	%r12, %rdx
    000001b3: 	movsd	%xmm0, 0x20(%rax)
    000001b8: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 440
    000001bd: 	addq	$0x1, 0x28(%rbp)
    000001c2: 	cmpq	%rbx, %r15
    000001c5: 	je	.Ltmp2574 # Offset: 453
    000001c7: 	movq	0x10(%rbp), %r12
    000001cb: 	addq	$0x8, %rbx
    000001cf: 	testq	%r12, %r12
    000001d2: 	jne	.Ltmp2581 # Offset: 466
.Ltmp2575:
    000001d8: 	movq	%r14, %r12
    000001db: 	movl	$0x1, %r13d
    000001e1: 	jmp	.Ltmp2580 # Offset: 481
    000001e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2574:
    000001e8: 	movq	0x8(%rsp), %rax
    000001ed: 	movq	%rbp, (%rax)
    000001f0: 	addq	$0x8, %rax
    000001f4: 	movq	%rax, 0x8(%rsp)
    000001f9: 	cmpq	0x18(%rsp), %rax
    000001fe: 	jne	.Ltmp2582 # Offset: 510
    00000204: 	callq	clock@PLT # Offset: 516
    00000209: 	movq	0x20(%rsp), %rbp
    0000020e: 	movq	0x18(%rsp), %r13
    00000213: 	movq	%rax, start_time(%rip)
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2585:
    00000220: 	movq	(%rbp), %r12
    00000224: 	movq	0x10(%r12), %rbx
    00000229: 	testq	%rbx, %rbx
    0000022c: 	je	.Ltmp2583 # Offset: 556
.Ltmp2584:
    0000022e: 	movq	0x18(%rbx), %rdi
    00000232: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 562
    00000237: 	movq	%rbx, %rdi
    0000023a: 	movq	0x10(%rbx), %rbx
    0000023e: 	movl	$0x28, %esi
    00000243: 	callq	_ZdlPvm@PLT # Offset: 579
    00000248: 	testq	%rbx, %rbx
    0000024b: 	jne	.Ltmp2584 # Offset: 587
.Ltmp2583:
    0000024d: 	leaq	0x8(%r12), %rax
    00000252: 	addq	$0x8, %rbp
    00000256: 	movq	$0x0, 0x10(%r12)
    0000025f: 	movq	%rax, 0x18(%r12)
    00000264: 	movq	%rax, 0x20(%r12)
    00000269: 	movq	$0x0, 0x28(%r12)
    00000272: 	cmpq	%rbp, %r13
    00000275: 	jne	.Ltmp2585 # Offset: 629
    00000277: 	callq	clock@PLT # Offset: 631
    0000027c: 	pxor	%xmm0, %xmm0
    00000280: 	movq	0x28(%rsp), %rbp
    00000285: 	movq	0x18(%rsp), %r13
    0000028a: 	movq	%rax, end_time(%rip)
    00000291: 	subq	start_time(%rip), %rax
    00000298: 	cvtsi2sd	%rax, %xmm0
    0000029d: 	divsd	DATAat0x53788(%rip), %xmm0
    000002a5: 	addsd	0x48(%rsp), %xmm0
    000002ab: 	movsd	%xmm0, 0x48(%rsp)
    000002b1: 	nopl	(%rax) # Size: 7
.Ltmp2589:
    000002b8: 	movq	(%rbp), %r12
    000002bc: 	testq	%r12, %r12
    000002bf: 	je	.Ltmp2586 # Offset: 703
    000002c1: 	movq	0x10(%r12), %rbx
    000002c6: 	testq	%rbx, %rbx
    000002c9: 	je	.Ltmp2587 # Offset: 713
.Ltmp2588:
    000002cb: 	movq	0x18(%rbx), %rdi
    000002cf: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 719
    000002d4: 	movq	%rbx, %rdi
    000002d7: 	movq	0x10(%rbx), %rbx
    000002db: 	movl	$0x28, %esi
    000002e0: 	callq	_ZdlPvm@PLT # Offset: 736
    000002e5: 	testq	%rbx, %rbx
    000002e8: 	jne	.Ltmp2588 # Offset: 744
.Ltmp2587:
    000002ea: 	movl	$0x30, %esi
    000002ef: 	movq	%r12, %rdi
    000002f2: 	callq	_ZdlPvm@PLT # Offset: 754
.Ltmp2586:
    000002f7: 	movq	$0x0, (%rbp)
    000002ff: 	addq	$0x8, %rbp
    00000303: 	cmpq	%rbp, %r13
    00000306: 	jne	.Ltmp2589 # Offset: 774
    00000308: 	movl	(%rsp), %edx
    0000030b: 	movl	iterations(%rip), %eax
    00000311: 	addl	%edx, 0x30(%rsp)
    00000315: 	movl	0x30(%rsp), %ecx
    00000319: 	cmpl	%ecx, %eax
    0000031b: 	jg	.Ltmp2590 # Offset: 795
.Ltmp2596:
    00000321: 	movq	0x40(%rsp), %rdi
    00000326: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 806
    0000032b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000332: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000339: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000340: 	je	.Ltmp2591 # Offset: 832
.Ltmp2595:
    00000346: 	movq	-0x20(%rax), %rdi
    0000034a: 	movsd	0x48(%rsp), %xmm0
    00000350: 	callq	_Z13record_resultdPKc # Offset: 848
    00000355: 	cmpq	$0x0, 0x20(%rsp)
    0000035b: 	je	.Ltmp2592 # Offset: 859
    0000035d: 	movq	0x68(%rsp), %rax
    00000362: 	subq	%fs:0x28, %rax
    0000036b: 	jne	.Ltmp2593 # Offset: 875
    0000036d: 	movq	0x60(%rsp), %rsi
    00000372: 	movq	0x20(%rsp), %rdi
    00000377: 	addq	$0x78, %rsp
    0000037b: 	popq	%rbx
    0000037c: 	popq	%rbp
    0000037d: 	subq	%rdi, %rsi
    00000380: 	popq	%r12
    00000382: 	popq	%r13
    00000384: 	popq	%r14
    00000386: 	popq	%r15
    00000388: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 904
.Ltmp2571:
    0000038d: 	movq	$0x3e8, (%rsp)
.Ltmp2572:
    00000395: 	movq	$0x0, 0x60(%rsp)
    0000039e: 	pxor	%xmm0, %xmm0
    000003a2: 	movaps	%xmm0, 0x50(%rsp)
    000003a7: 	jmp	.Ltmp2594 # Offset: 935
.Ltmp2592:
    000003ac: 	movq	0x68(%rsp), %rax
    000003b1: 	subq	%fs:0x28, %rax
    000003ba: 	jne	.Ltmp2593 # Offset: 954
    000003bc: 	addq	$0x78, %rsp
    000003c0: 	popq	%rbx
    000003c1: 	popq	%rbp
    000003c2: 	popq	%r12
    000003c4: 	popq	%r13
    000003c6: 	popq	%r14
    000003c8: 	popq	%r15
    000003ca: 	retq # Offset: 970
.Ltmp2591:
    000003cb: 	movq	-0x8(%rdx), %rax
    000003cf: 	addq	$0x200, %rax
    000003d5: 	jmp	.Ltmp2595 # Offset: 981
.Ltmp2573:
    000003da: 	pxor	%xmm4, %xmm4
    000003de: 	movsd	%xmm4, 0x48(%rsp)
    000003e4: 	jmp	.Ltmp2596 # Offset: 996
.Ltmp2593:
    000003e9: 	callq	__stack_chk_fail@PLT # Offset: 1001
    000003ee: 	endbr64
    000003f2: 	movq	%rax, %rbp
    000003f5: 	movq	0x50(%rsp), %rdi
    000003fa: 	movq	0x60(%rsp), %rsi
    000003ff: 	subq	%rdi, %rsi
    00000402: 	testq	%rdi, %rdi
    00000405: 	je	.Ltmp2597 # Offset: 1029
    00000407: 	callq	_ZdlPvm@PLT # Offset: 1031
.Ltmp2597:
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Unwind_Resume@PLT # Offset: 1039
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_clearall_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_insert_set1IdSt8multisetIdSt4lessIdESaIdEELb1EEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0x1b700
  Size        : 0x4b3
  MaxSize     : 0x4c0
  Offset      : 0x1b700
  Section     : .text
  Orc Section : .local.text._Z16test_insert_set1IdSt8multisetIdSt4lessIdESaIdEELb1EEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	xorl	%r12d, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x88, %rsp
    0000001b: 	movq	%rsi, (%rsp)
    0000001f: 	movq	%rdx, 0x20(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x78(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	testl	%eax, %eax
    00000048: 	jle	.Ltmp2598 # Offset: 72
    0000004e: 	nop # Size: 2
.Ltmp2601:
    00000050: 	movl	$0x30, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movl	$0x28, %edi
    0000005f: 	leaq	0x8(%rax), %r13
    00000063: 	movl	$0x0, 0x8(%rax)
    0000006a: 	movq	%rax, %rbp
    0000006d: 	movq	$0x0, 0x10(%rax)
    00000075: 	movq	%r13, 0x18(%rax)
    00000079: 	movq	%r13, 0x20(%rax)
    0000007d: 	movq	$0x0, 0x28(%rax)
    00000085: 	callq	_Znwm@PLT # Offset: 133
    0000008a: 	movsd	(%r15), %xmm0
    0000008f: 	movq	%r13, %rcx
    00000092: 	movq	%r13, %rdx
    00000095: 	movq	%rax, %rsi
    00000098: 	movl	$0x1, %edi
    0000009d: 	movsd	%xmm0, 0x20(%rax)
    000000a2: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 162
    000000a7: 	movq	0x10(%rbp), %rbx
    000000ab: 	addq	$0x1, 0x28(%rbp)
    000000b0: 	testq	%rbx, %rbx
    000000b3: 	je	.Ltmp2599 # Offset: 179
.Ltmp2600:
    000000b5: 	movq	0x18(%rbx), %rdi
    000000b9: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 185
    000000be: 	movq	%rbx, %rdi
    000000c1: 	movq	0x10(%rbx), %rbx
    000000c5: 	movl	$0x28, %esi
    000000ca: 	callq	_ZdlPvm@PLT # Offset: 202
    000000cf: 	testq	%rbx, %rbx
    000000d2: 	jne	.Ltmp2600 # Offset: 210
.Ltmp2599:
    000000d4: 	movl	$0x30, %esi
    000000d9: 	movq	%rbp, %rdi
    000000dc: 	addl	$0x1, %r12d
    000000e0: 	callq	_ZdlPvm@PLT # Offset: 224
    000000e5: 	cmpl	%r12d, iterations(%rip)
    000000ec: 	jg	.Ltmp2601 # Offset: 236
.Ltmp2598:
    000000f2: 	callq	clock@PLT # Offset: 242
    000000f7: 	movq	(%rsp), %rcx
    000000fb: 	xorl	%edx, %edx
    000000fd: 	movq	%rax, 0x48(%rsp)
    00000102: 	movq	%rax, end_time(%rip)
    00000109: 	movq	start_time(%rip), %rax
    00000110: 	subq	%r15, %rcx
    00000113: 	movq	%rax, 0x50(%rsp)
    00000118: 	movabsq	$0x500000000, %rax
    00000122: 	divq	%rcx
    00000125: 	movq	%rax, 0x8(%rsp)
    0000012a: 	cmpq	$0x3e8, %rax
    00000130: 	ja	.Ltmp2602 # Offset: 304
    00000136: 	cmpq	$0x3, 0x8(%rsp)
    0000013c: 	ja	.Ltmp2603 # Offset: 316
    00000142: 	movq	$0x0, 0x70(%rsp)
    0000014b: 	pxor	%xmm0, %xmm0
    0000014f: 	movq	$0x4, 0x8(%rsp)
    00000158: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp2613:
    0000015d: 	movq	0x8(%rsp), %rbx
    00000162: 	leaq	0x60(%rsp), %rdi
    00000167: 	movq	%rbx, %rsi
    0000016a: 	callq	_ZNSt6vectorIPSt8multisetIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 362
    0000016f: 	movq	0x60(%rsp), %rcx
    00000174: 	movl	iterations(%rip), %eax
    0000017a: 	movq	%rcx, 0x28(%rsp)
    0000017f: 	testl	%eax, %eax
    00000181: 	jle	.Ltmp2604 # Offset: 385
    00000187: 	leaq	0x8(%rcx), %rdx
    0000018b: 	movl	%ebx, 0x34(%rsp)
    0000018f: 	pxor	%xmm2, %xmm2
    00000193: 	movl	$0x0, 0x30(%rsp)
    0000019b: 	movq	%rdx, 0x40(%rsp)
    000001a0: 	movsd	%xmm2, 0x58(%rsp)
.Ltmp2619:
    000001a6: 	movslq	0x30(%rsp), %rdx
    000001ab: 	movslq	%eax, %rcx
    000001ae: 	movq	%rdx, %rsi
    000001b1: 	addq	0x8(%rsp), %rdx
    000001b6: 	subl	%esi, %eax
    000001b8: 	cmpq	%rcx, %rdx
    000001bb: 	cmovbl	0x34(%rsp), %eax
    000001c0: 	movl	%eax, %ebx
    000001c2: 	callq	clock@PLT # Offset: 450
    000001c7: 	movq	0x40(%rsp), %rdx
    000001cc: 	movq	0x28(%rsp), %rcx
    000001d1: 	movq	%rax, start_time(%rip)
    000001d8: 	leal	-0x1(%rbx), %eax
    000001db: 	leaq	(%rdx,%rax,8), %rax
    000001df: 	movq	%rcx, 0x38(%rsp)
    000001e4: 	movq	%rax, 0x18(%rsp)
    000001e9: 	movq	%rcx, 0x10(%rsp)
.Ltmp2614:
    000001ee: 	movl	$0x30, %edi
    000001f3: 	callq	_Znwm@PLT # Offset: 499
    000001f8: 	leaq	0x8(%rax), %r14
    000001fc: 	movl	$0x0, 0x8(%rax)
    00000203: 	movq	%rax, %rbp
    00000206: 	movq	$0x0, 0x10(%rax)
    0000020e: 	movq	%r14, 0x18(%rax)
    00000212: 	movq	%r14, 0x20(%rax)
    00000216: 	movq	$0x0, 0x28(%rax)
    0000021e: 	cmpq	%r15, (%rsp)
    00000222: 	je	.Ltmp2605 # Offset: 546
    00000228: 	movq	%r15, %rbx
    0000022b: 	xorl	%r12d, %r12d
    0000022e: 	addq	$0x8, %rbx
    00000232: 	testq	%r12, %r12
    00000235: 	je	.Ltmp2606 # Offset: 565
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2612:
    00000240: 	movsd	-0x8(%rbx), %xmm1
    00000245: 	jmp	.Ltmp2607 # Offset: 581
    00000247: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2609:
    00000250: 	movq	0x10(%r12), %rax
    00000255: 	testq	%rax, %rax
    00000258: 	je	.Ltmp2608 # Offset: 600
.Ltmp2610:
    0000025a: 	movq	%rax, %r12
.Ltmp2607:
    0000025d: 	movsd	0x20(%r12), %xmm0
    00000264: 	comisd	%xmm1, %xmm0
    00000268: 	ja	.Ltmp2609 # Offset: 616
    0000026a: 	movq	0x18(%r12), %rax
    0000026f: 	testq	%rax, %rax
    00000272: 	jne	.Ltmp2610 # Offset: 626
.Ltmp2608:
    00000274: 	movl	$0x1, %r13d
    0000027a: 	cmpq	%r14, %r12
    0000027d: 	je	.Ltmp2611 # Offset: 637
    0000027f: 	comisd	%xmm1, %xmm0
    00000283: 	seta	%r13b
.Ltmp2611:
    00000287: 	movl	$0x28, %edi
    0000028c: 	callq	_Znwm@PLT # Offset: 652
    00000291: 	movsd	-0x8(%rbx), %xmm0
    00000296: 	movq	%rax, %rsi
    00000299: 	movzbl	%r13b, %edi
    0000029d: 	movq	%r14, %rcx
    000002a0: 	movq	%r12, %rdx
    000002a3: 	movsd	%xmm0, 0x20(%rax)
    000002a8: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 680
    000002ad: 	addq	$0x1, 0x28(%rbp)
    000002b2: 	cmpq	%rbx, (%rsp)
    000002b6: 	je	.Ltmp2605 # Offset: 694
    000002b8: 	movq	0x10(%rbp), %r12
    000002bc: 	addq	$0x8, %rbx
    000002c0: 	testq	%r12, %r12
    000002c3: 	jne	.Ltmp2612 # Offset: 707
.Ltmp2606:
    000002c9: 	movq	%r14, %r12
    000002cc: 	movl	$0x1, %r13d
    000002d2: 	jmp	.Ltmp2611 # Offset: 722
.Ltmp2602:
    000002d4: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp2603:
    000002dd: 	movq	$0x0, 0x70(%rsp)
    000002e6: 	pxor	%xmm0, %xmm0
    000002ea: 	movaps	%xmm0, 0x60(%rsp)
    000002ef: 	jmp	.Ltmp2613 # Offset: 751
    000002f4: 	nopl	(%rax) # Size: 4
.Ltmp2605:
    000002f8: 	movq	0x10(%rsp), %rax
    000002fd: 	movq	%rbp, (%rax)
    00000300: 	addq	$0x8, %rax
    00000304: 	movq	%rax, 0x10(%rsp)
    00000309: 	cmpq	%rax, 0x18(%rsp)
    0000030e: 	jne	.Ltmp2614 # Offset: 782
    00000314: 	callq	clock@PLT # Offset: 788
    00000319: 	pxor	%xmm0, %xmm0
    0000031d: 	movq	0x18(%rsp), %r13
    00000322: 	movq	0x38(%rsp), %rbp
    00000327: 	movq	%rax, end_time(%rip)
    0000032e: 	subq	start_time(%rip), %rax
    00000335: 	cvtsi2sd	%rax, %xmm0
    0000033a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000342: 	addsd	0x58(%rsp), %xmm0
    00000348: 	movsd	%xmm0, 0x58(%rsp)
    0000034e: 	nop # Size: 2
.Ltmp2618:
    00000350: 	movq	(%rbp), %r12
    00000354: 	testq	%r12, %r12
    00000357: 	je	.Ltmp2615 # Offset: 855
    00000359: 	movq	0x10(%r12), %rbx
    0000035e: 	testq	%rbx, %rbx
    00000361: 	je	.Ltmp2616 # Offset: 865
.Ltmp2617:
    00000363: 	movq	0x18(%rbx), %rdi
    00000367: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 871
    0000036c: 	movq	%rbx, %rdi
    0000036f: 	movq	0x10(%rbx), %rbx
    00000373: 	movl	$0x28, %esi
    00000378: 	callq	_ZdlPvm@PLT # Offset: 888
    0000037d: 	testq	%rbx, %rbx
    00000380: 	jne	.Ltmp2617 # Offset: 896
.Ltmp2616:
    00000382: 	movl	$0x30, %esi
    00000387: 	movq	%r12, %rdi
    0000038a: 	callq	_ZdlPvm@PLT # Offset: 906
.Ltmp2615:
    0000038f: 	movq	$0x0, (%rbp)
    00000397: 	addq	$0x8, %rbp
    0000039b: 	cmpq	%rbp, %r13
    0000039e: 	jne	.Ltmp2618 # Offset: 926
    000003a0: 	movl	0x8(%rsp), %edx
    000003a4: 	movl	iterations(%rip), %eax
    000003aa: 	addl	%edx, 0x30(%rsp)
    000003ae: 	movl	0x30(%rsp), %ecx
    000003b2: 	cmpl	%ecx, %eax
    000003b4: 	jg	.Ltmp2619 # Offset: 948
.Ltmp2623:
    000003ba: 	movq	0x20(%rsp), %rdi
    000003bf: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 959
    000003c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003cb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003d2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003d9: 	je	.Ltmp2620 # Offset: 985
.Ltmp2624:
    000003df: 	movsd	0x58(%rsp), %xmm0
    000003e5: 	movq	-0x20(%rax), %rdi
    000003e9: 	pxor	%xmm1, %xmm1
    000003ed: 	movq	0x48(%rsp), %rax
    000003f2: 	subq	0x50(%rsp), %rax
    000003f7: 	cvtsi2sd	%rax, %xmm1
    000003fc: 	divsd	DATAat0x53788(%rip), %xmm1
    00000404: 	subsd	%xmm1, %xmm0
    00000408: 	callq	_Z13record_resultdPKc # Offset: 1032
    0000040d: 	cmpq	$0x0, 0x28(%rsp)
    00000413: 	je	.Ltmp2621 # Offset: 1043
    00000415: 	movq	0x78(%rsp), %rax
    0000041a: 	subq	%fs:0x28, %rax
    00000423: 	jne	.Ltmp2622 # Offset: 1059
    00000425: 	movq	0x70(%rsp), %rsi
    0000042a: 	movq	0x28(%rsp), %rdi
    0000042f: 	addq	$0x88, %rsp
    00000436: 	popq	%rbx
    00000437: 	popq	%rbp
    00000438: 	subq	%rdi, %rsi
    0000043b: 	popq	%r12
    0000043d: 	popq	%r13
    0000043f: 	popq	%r14
    00000441: 	popq	%r15
    00000443: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1091
.Ltmp2621:
    00000448: 	movq	0x78(%rsp), %rax
    0000044d: 	subq	%fs:0x28, %rax
    00000456: 	jne	.Ltmp2622 # Offset: 1110
    00000458: 	addq	$0x88, %rsp
    0000045f: 	popq	%rbx
    00000460: 	popq	%rbp
    00000461: 	popq	%r12
    00000463: 	popq	%r13
    00000465: 	popq	%r14
    00000467: 	popq	%r15
    00000469: 	retq # Offset: 1129
.Ltmp2604:
    0000046a: 	pxor	%xmm4, %xmm4
    0000046e: 	movsd	%xmm4, 0x58(%rsp)
    00000474: 	jmp	.Ltmp2623 # Offset: 1140
.Ltmp2620:
    00000479: 	movq	-0x8(%rdx), %rax
    0000047d: 	addq	$0x200, %rax
    00000483: 	jmp	.Ltmp2624 # Offset: 1155
.Ltmp2622:
    00000488: 	callq	__stack_chk_fail@PLT # Offset: 1160
    0000048d: 	endbr64
    00000491: 	movq	%rax, %rbp
    00000494: 	movq	0x60(%rsp), %rdi
    00000499: 	movq	0x70(%rsp), %rsi
    0000049e: 	subq	%rdi, %rsi
    000004a1: 	testq	%rdi, %rdi
    000004a4: 	je	.Ltmp2625 # Offset: 1188
    000004a6: 	callq	_ZdlPvm@PLT # Offset: 1190
.Ltmp2625:
    000004ab: 	movq	%rbp, %rdi
    000004ae: 	callq	_Unwind_Resume@PLT # Offset: 1198
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_insert_set1IdSt8multisetIdSt4lessIdESaIdEELb1EEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_eraseall_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 193
  State       : disassembled
  Address     : 0x1bbc0
  Size        : 0x3ec
  MaxSize     : 0x3f0
  Offset      : 0x1bbc0
  Section     : .text
  Orc Section : .local.text._Z18test_eraseall_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0192:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rsi, %r15
    0000000c: 	pushq	%r14
    0000000e: 	subq	%rdi, %rcx
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x40(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, (%rsp)
    00000048: 	cmpq	$0x3e8, %rax
    0000004e: 	ja	.Ltmp2626 # Offset: 78
    00000054: 	cmpq	$0x3, %rax
    00000058: 	ja	.Ltmp2627 # Offset: 88
    0000005e: 	movq	$0x0, 0x60(%rsp)
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	movq	$0x4, (%rsp)
    00000073: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp2647:
    00000078: 	movq	(%rsp), %rbx
    0000007c: 	leaq	0x50(%rsp), %rdi
    00000081: 	movq	%rbx, %rsi
    00000084: 	callq	_ZNSt6vectorIPSt8multisetIdSt4lessIdESaIdEESaIS5_EE17_M_default_appendEm # Offset: 132
    00000089: 	movq	0x50(%rsp), %rcx
    0000008e: 	movl	iterations(%rip), %eax
    00000094: 	movq	%rcx, 0x20(%rsp)
    00000099: 	testl	%eax, %eax
    0000009b: 	jle	.Ltmp2628 # Offset: 155
    000000a1: 	leaq	0x8(%rcx), %rdx
    000000a5: 	movl	%ebx, 0x34(%rsp)
    000000a9: 	pxor	%xmm2, %xmm2
    000000ad: 	movl	$0x0, 0x30(%rsp)
    000000b5: 	movq	%rdx, 0x38(%rsp)
    000000ba: 	movsd	%xmm2, 0x48(%rsp)
.Ltmp2643:
    000000c0: 	movslq	0x30(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	%rdx, %rsi
    000000cb: 	addq	(%rsp), %rdx
    000000cf: 	subl	%esi, %eax
    000000d1: 	cmpq	%rcx, %rdx
    000000d4: 	cmovbl	0x34(%rsp), %eax
    000000d9: 	movq	0x38(%rsp), %rcx
    000000de: 	movq	0x20(%rsp), %rdx
    000000e3: 	subl	$0x1, %eax
    000000e6: 	leaq	(%rcx,%rax,8), %rax
    000000ea: 	movq	%rdx, 0x28(%rsp)
    000000ef: 	movq	%rax, 0x18(%rsp)
    000000f4: 	movq	%rdx, 0x8(%rsp)
.Ltmp2637:
    000000f9: 	movl	$0x30, %edi
    000000fe: 	callq	_Znwm@PLT # Offset: 254
    00000103: 	leaq	0x8(%rax), %r14
    00000107: 	movl	$0x0, 0x8(%rax)
    0000010e: 	movq	%rax, %rbp
    00000111: 	movq	$0x0, 0x10(%rax)
    00000119: 	movq	%r14, 0x18(%rax)
    0000011d: 	movq	%r14, 0x20(%rax)
    00000121: 	movq	$0x0, 0x28(%rax)
    00000129: 	movq	0x10(%rsp), %rax
    0000012e: 	cmpq	%rax, %r15
    00000131: 	je	.Ltmp2629 # Offset: 305
    00000137: 	movq	%rax, %rbx
    0000013a: 	xorl	%r12d, %r12d
    0000013d: 	addq	$0x8, %rbx
    00000141: 	testq	%r12, %r12
    00000144: 	je	.Ltmp2630 # Offset: 324
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2636:
    00000150: 	movsd	-0x8(%rbx), %xmm1
    00000155: 	jmp	.Ltmp2631 # Offset: 341
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2633:
    00000160: 	movq	0x10(%r12), %rax
    00000165: 	testq	%rax, %rax
    00000168: 	je	.Ltmp2632 # Offset: 360
.Ltmp2634:
    0000016a: 	movq	%rax, %r12
.Ltmp2631:
    0000016d: 	movsd	0x20(%r12), %xmm0
    00000174: 	comisd	%xmm1, %xmm0
    00000178: 	ja	.Ltmp2633 # Offset: 376
    0000017a: 	movq	0x18(%r12), %rax
    0000017f: 	testq	%rax, %rax
    00000182: 	jne	.Ltmp2634 # Offset: 386
.Ltmp2632:
    00000184: 	movl	$0x1, %r13d
    0000018a: 	cmpq	%r12, %r14
    0000018d: 	je	.Ltmp2635 # Offset: 397
    0000018f: 	comisd	%xmm1, %xmm0
    00000193: 	seta	%r13b
.Ltmp2635:
    00000197: 	movl	$0x28, %edi
    0000019c: 	callq	_Znwm@PLT # Offset: 412
    000001a1: 	movsd	-0x8(%rbx), %xmm0
    000001a6: 	movq	%rax, %rsi
    000001a9: 	movzbl	%r13b, %edi
    000001ad: 	movq	%r14, %rcx
    000001b0: 	movq	%r12, %rdx
    000001b3: 	movsd	%xmm0, 0x20(%rax)
    000001b8: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 440
    000001bd: 	addq	$0x1, 0x28(%rbp)
    000001c2: 	cmpq	%rbx, %r15
    000001c5: 	je	.Ltmp2629 # Offset: 453
    000001c7: 	movq	0x10(%rbp), %r12
    000001cb: 	addq	$0x8, %rbx
    000001cf: 	testq	%r12, %r12
    000001d2: 	jne	.Ltmp2636 # Offset: 466
.Ltmp2630:
    000001d8: 	movq	%r14, %r12
    000001db: 	movl	$0x1, %r13d
    000001e1: 	jmp	.Ltmp2635 # Offset: 481
    000001e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2629:
    000001e8: 	movq	0x8(%rsp), %rax
    000001ed: 	movq	%rbp, (%rax)
    000001f0: 	addq	$0x8, %rax
    000001f4: 	movq	%rax, 0x8(%rsp)
    000001f9: 	cmpq	0x18(%rsp), %rax
    000001fe: 	jne	.Ltmp2637 # Offset: 510
    00000204: 	callq	clock@PLT # Offset: 516
    00000209: 	movq	0x20(%rsp), %rbp
    0000020e: 	movq	0x18(%rsp), %r13
    00000213: 	movq	%rax, start_time(%rip)
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2638:
    00000220: 	movq	(%rbp), %rbx
    00000224: 	addq	$0x8, %rbp
    00000228: 	movq	0x10(%rbx), %rdi
    0000022c: 	leaq	0x8(%rbx), %r12
    00000230: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 560
    00000235: 	movq	$0x0, 0x10(%rbx)
    0000023d: 	movq	%r12, 0x18(%rbx)
    00000241: 	movq	%r12, 0x20(%rbx)
    00000245: 	movq	$0x0, 0x28(%rbx)
    0000024d: 	cmpq	%r13, %rbp
    00000250: 	jne	.Ltmp2638 # Offset: 592
    00000252: 	callq	clock@PLT # Offset: 594
    00000257: 	pxor	%xmm0, %xmm0
    0000025b: 	movq	0x28(%rsp), %rbp
    00000260: 	movq	0x18(%rsp), %r13
    00000265: 	movq	%rax, end_time(%rip)
    0000026c: 	subq	start_time(%rip), %rax
    00000273: 	cvtsi2sd	%rax, %xmm0
    00000278: 	divsd	DATAat0x53788(%rip), %xmm0
    00000280: 	addsd	0x48(%rsp), %xmm0
    00000286: 	movsd	%xmm0, 0x48(%rsp)
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp2642:
    00000290: 	movq	(%rbp), %r12
    00000294: 	testq	%r12, %r12
    00000297: 	je	.Ltmp2639 # Offset: 663
    00000299: 	movq	0x10(%r12), %rbx
    0000029e: 	testq	%rbx, %rbx
    000002a1: 	je	.Ltmp2640 # Offset: 673
.Ltmp2641:
    000002a3: 	movq	0x18(%rbx), %rdi
    000002a7: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 679
    000002ac: 	movq	%rbx, %rdi
    000002af: 	movq	0x10(%rbx), %rbx
    000002b3: 	movl	$0x28, %esi
    000002b8: 	callq	_ZdlPvm@PLT # Offset: 696
    000002bd: 	testq	%rbx, %rbx
    000002c0: 	jne	.Ltmp2641 # Offset: 704
.Ltmp2640:
    000002c2: 	movl	$0x30, %esi
    000002c7: 	movq	%r12, %rdi
    000002ca: 	callq	_ZdlPvm@PLT # Offset: 714
.Ltmp2639:
    000002cf: 	movq	$0x0, (%rbp)
    000002d7: 	addq	$0x8, %rbp
    000002db: 	cmpq	%rbp, %r13
    000002de: 	jne	.Ltmp2642 # Offset: 734
    000002e0: 	movl	(%rsp), %edx
    000002e3: 	movl	iterations(%rip), %eax
    000002e9: 	addl	%edx, 0x30(%rsp)
    000002ed: 	movl	0x30(%rsp), %ecx
    000002f1: 	cmpl	%ecx, %eax
    000002f3: 	jg	.Ltmp2643 # Offset: 755
.Ltmp2649:
    000002f9: 	movq	0x40(%rsp), %rdi
    000002fe: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 766
    00000303: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000030a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000311: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000318: 	je	.Ltmp2644 # Offset: 792
.Ltmp2648:
    0000031e: 	movq	-0x20(%rax), %rdi
    00000322: 	movsd	0x48(%rsp), %xmm0
    00000328: 	callq	_Z13record_resultdPKc # Offset: 808
    0000032d: 	cmpq	$0x0, 0x20(%rsp)
    00000333: 	je	.Ltmp2645 # Offset: 819
    00000335: 	movq	0x68(%rsp), %rax
    0000033a: 	subq	%fs:0x28, %rax
    00000343: 	jne	.Ltmp2646 # Offset: 835
    00000345: 	movq	0x60(%rsp), %rsi
    0000034a: 	movq	0x20(%rsp), %rdi
    0000034f: 	addq	$0x78, %rsp
    00000353: 	popq	%rbx
    00000354: 	popq	%rbp
    00000355: 	subq	%rdi, %rsi
    00000358: 	popq	%r12
    0000035a: 	popq	%r13
    0000035c: 	popq	%r14
    0000035e: 	popq	%r15
    00000360: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 864
.Ltmp2626:
    00000365: 	movq	$0x3e8, (%rsp)
.Ltmp2627:
    0000036d: 	movq	$0x0, 0x60(%rsp)
    00000376: 	pxor	%xmm0, %xmm0
    0000037a: 	movaps	%xmm0, 0x50(%rsp)
    0000037f: 	jmp	.Ltmp2647 # Offset: 895
.Ltmp2645:
    00000384: 	movq	0x68(%rsp), %rax
    00000389: 	subq	%fs:0x28, %rax
    00000392: 	jne	.Ltmp2646 # Offset: 914
    00000394: 	addq	$0x78, %rsp
    00000398: 	popq	%rbx
    00000399: 	popq	%rbp
    0000039a: 	popq	%r12
    0000039c: 	popq	%r13
    0000039e: 	popq	%r14
    000003a0: 	popq	%r15
    000003a2: 	retq # Offset: 930
.Ltmp2644:
    000003a3: 	movq	-0x8(%rdx), %rax
    000003a7: 	addq	$0x200, %rax
    000003ad: 	jmp	.Ltmp2648 # Offset: 941
.Ltmp2628:
    000003b2: 	pxor	%xmm4, %xmm4
    000003b6: 	movsd	%xmm4, 0x48(%rsp)
    000003bc: 	jmp	.Ltmp2649 # Offset: 956
.Ltmp2646:
    000003c1: 	callq	__stack_chk_fail@PLT # Offset: 961
    000003c6: 	endbr64
    000003ca: 	movq	%rax, %rbp
    000003cd: 	movq	0x50(%rsp), %rdi
    000003d2: 	movq	0x60(%rsp), %rsi
    000003d7: 	subq	%rdi, %rsi
    000003da: 	testq	%rdi, %rdi
    000003dd: 	je	.Ltmp2650 # Offset: 989
    000003df: 	callq	_ZdlPvm@PLT # Offset: 991
.Ltmp2650:
    000003e4: 	movq	%rbp, %rdi
    000003e7: 	callq	_Unwind_Resume@PLT # Offset: 999
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_eraseall_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIPSt3mapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm" after disassembly {
  Number      : 194
  State       : disassembled
  Address     : 0x1bfb0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x1bfb0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt3mapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0193:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp2651 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp2652 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp2653 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp2654 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp2655 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp2662:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp2656 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp2656:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp2657 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp2658 # Offset: 200
.Ltmp2660:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp2652:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp2659 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp2659:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2651:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2657:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp2661:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp2660 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2658:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp2661 # Offset: 392
.Ltmp2655:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp2663:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp2662 # Offset: 445
.Ltmp2654:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp2663 # Offset: 460
.Ltmp2653:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt3mapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm"

Binary Function "_Z19test_duplicate_coreISt3mapIddSt4lessIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 195
  State       : disassembled
  Address     : 0x1c190
  Size        : 0x2c6
  MaxSize     : 0x2d0
  Offset      : 0x1c190
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt3mapIddSt4lessIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0194:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x4, %rsi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rdi, %r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x58, %rsp
    00000019: 	movq	%rdx, 0x28(%rsp)
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x48(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movabsq	$0x500000000, %rax
    0000003a: 	divq	%rsi
    0000003d: 	movq	%rax, (%rsp)
    00000041: 	cmpq	$0x3e8, %rax
    00000047: 	ja	.Ltmp2664 # Offset: 71
    0000004d: 	cmpq	$0x3, %rax
    00000051: 	ja	.Ltmp2665 # Offset: 81
    00000057: 	movq	$0x0, 0x40(%rsp)
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	movq	$0x4, (%rsp)
    0000006c: 	movaps	%xmm0, 0x30(%rsp)
.Ltmp2676:
    00000071: 	movq	(%rsp), %rbx
    00000075: 	leaq	0x30(%rsp), %rdi
    0000007a: 	movq	%rbx, %rsi
    0000007d: 	callq	_ZNSt6vectorIPSt3mapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 125
    00000082: 	movq	0x30(%rsp), %rdx
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movq	%rdx, 0x10(%rsp)
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp2666 # Offset: 148
    0000009a: 	addq	$0x8, %rdx
    0000009e: 	movl	%ebx, 0x1c(%rsp)
    000000a2: 	pxor	%xmm2, %xmm2
    000000a6: 	xorl	%r15d, %r15d
    000000a9: 	movq	%rdx, 0x20(%rsp)
    000000ae: 	movsd	%xmm2, 0x8(%rsp)
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp2672:
    000000b8: 	movslq	%eax, %rcx
    000000bb: 	movslq	%r15d, %rdx
    000000be: 	addq	(%rsp), %rdx
    000000c2: 	subl	%r15d, %eax
    000000c5: 	cmpq	%rcx, %rdx
    000000c8: 	cmovbl	0x1c(%rsp), %eax
    000000cd: 	movl	%eax, %ebx
    000000cf: 	callq	clock@PLT # Offset: 207
    000000d4: 	movq	0x10(%rsp), %r12
    000000d9: 	movq	0x20(%rsp), %rcx
    000000de: 	movq	%rax, start_time(%rip)
    000000e5: 	leal	-0x1(%rbx), %eax
    000000e8: 	movq	%r12, %rbp
    000000eb: 	leaq	(%rcx,%rax,8), %r13
    000000ef: 	nop # Size: 1
.Ltmp2667:
    000000f0: 	movl	$0x30, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	movq	%rax, %rbx
    000000fd: 	movl	$0x0, 0x8(%rax)
    00000104: 	leaq	0x8(%rax), %rax
    00000108: 	movq	%r14, %rsi
    0000010b: 	movq	$0x0, 0x8(%rax)
    00000113: 	movq	%rbx, %rdi
    00000116: 	movq	%rax, 0x18(%rbx)
    0000011a: 	movq	%rax, 0x20(%rbx)
    0000011e: 	movq	$0x0, 0x28(%rbx)
    00000126: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EEaSERKS8_.isra.0/1" # Offset: 294
    0000012b: 	movq	%rbx, (%r12)
    0000012f: 	addq	$0x8, %r12
    00000133: 	cmpq	%r13, %r12
    00000136: 	jne	.Ltmp2667 # Offset: 310
    00000138: 	callq	clock@PLT # Offset: 312
    0000013d: 	pxor	%xmm0, %xmm0
    00000141: 	movq	%rax, end_time(%rip)
    00000148: 	subq	start_time(%rip), %rax
    0000014f: 	cvtsi2sd	%rax, %xmm0
    00000154: 	divsd	DATAat0x53788(%rip), %xmm0
    0000015c: 	addsd	0x8(%rsp), %xmm0
    00000162: 	movsd	%xmm0, 0x8(%rsp)
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2671:
    00000170: 	movq	(%rbp), %r12
    00000174: 	testq	%r12, %r12
    00000177: 	je	.Ltmp2668 # Offset: 375
    00000179: 	movq	0x10(%r12), %rbx
    0000017e: 	testq	%rbx, %rbx
    00000181: 	je	.Ltmp2669 # Offset: 385
.Ltmp2670:
    00000183: 	movq	0x18(%rbx), %rdi
    00000187: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 391
    0000018c: 	movq	%rbx, %rdi
    0000018f: 	movq	0x10(%rbx), %rbx
    00000193: 	movl	$0x30, %esi
    00000198: 	callq	_ZdlPvm@PLT # Offset: 408
    0000019d: 	testq	%rbx, %rbx
    000001a0: 	jne	.Ltmp2670 # Offset: 416
.Ltmp2669:
    000001a2: 	movl	$0x30, %esi
    000001a7: 	movq	%r12, %rdi
    000001aa: 	callq	_ZdlPvm@PLT # Offset: 426
.Ltmp2668:
    000001af: 	movq	$0x0, (%rbp)
    000001b7: 	addq	$0x8, %rbp
    000001bb: 	cmpq	%rbp, %r13
    000001be: 	jne	.Ltmp2671 # Offset: 446
    000001c0: 	movl	iterations(%rip), %eax
    000001c6: 	addl	(%rsp), %r15d
    000001ca: 	cmpl	%r15d, %eax
    000001cd: 	jg	.Ltmp2672 # Offset: 461
.Ltmp2678:
    000001d3: 	movq	0x28(%rsp), %rdi
    000001d8: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 472
    000001dd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f2: 	je	.Ltmp2673 # Offset: 498
.Ltmp2677:
    000001f8: 	movq	-0x20(%rax), %rdi
    000001fc: 	movsd	0x8(%rsp), %xmm0
    00000202: 	callq	_Z13record_resultdPKc # Offset: 514
    00000207: 	cmpq	$0x0, 0x10(%rsp)
    0000020d: 	je	.Ltmp2674 # Offset: 525
    0000020f: 	movq	0x48(%rsp), %rax
    00000214: 	subq	%fs:0x28, %rax
    0000021d: 	jne	.Ltmp2675 # Offset: 541
    0000021f: 	movq	0x40(%rsp), %rsi
    00000224: 	movq	0x10(%rsp), %rdi
    00000229: 	addq	$0x58, %rsp
    0000022d: 	popq	%rbx
    0000022e: 	popq	%rbp
    0000022f: 	subq	%rdi, %rsi
    00000232: 	popq	%r12
    00000234: 	popq	%r13
    00000236: 	popq	%r14
    00000238: 	popq	%r15
    0000023a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 570
.Ltmp2674:
    0000023f: 	movq	0x48(%rsp), %rax
    00000244: 	subq	%fs:0x28, %rax
    0000024d: 	jne	.Ltmp2675 # Offset: 589
    0000024f: 	addq	$0x58, %rsp
    00000253: 	popq	%rbx
    00000254: 	popq	%rbp
    00000255: 	popq	%r12
    00000257: 	popq	%r13
    00000259: 	popq	%r14
    0000025b: 	popq	%r15
    0000025d: 	retq # Offset: 605
.Ltmp2664:
    0000025e: 	movq	$0x3e8, (%rsp)
.Ltmp2665:
    00000266: 	movq	$0x0, 0x40(%rsp)
    0000026f: 	pxor	%xmm0, %xmm0
    00000273: 	movaps	%xmm0, 0x30(%rsp)
    00000278: 	jmp	.Ltmp2676 # Offset: 632
.Ltmp2673:
    0000027d: 	movq	-0x8(%rdx), %rax
    00000281: 	addq	$0x200, %rax
    00000287: 	jmp	.Ltmp2677 # Offset: 647
.Ltmp2666:
    0000028c: 	pxor	%xmm3, %xmm3
    00000290: 	movsd	%xmm3, 0x8(%rsp)
    00000296: 	jmp	.Ltmp2678 # Offset: 662
.Ltmp2675:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
    000002a0: 	endbr64
    000002a4: 	movq	%rax, %rbp
    000002a7: 	movq	0x30(%rsp), %rdi
    000002ac: 	movq	0x40(%rsp), %rsi
    000002b1: 	subq	%rdi, %rsi
    000002b4: 	testq	%rdi, %rdi
    000002b7: 	je	.Ltmp2679 # Offset: 695
    000002b9: 	callq	_ZdlPvm@PLT # Offset: 697
.Ltmp2679:
    000002be: 	movq	%rbp, %rdi
    000002c1: 	callq	_Unwind_Resume@PLT # Offset: 705
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt3mapIddSt4lessIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIPSt8multimapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm" after disassembly {
  Number      : 196
  State       : disassembled
  Address     : 0x1c460
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x1c460
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt8multimapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0195:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp2680 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp2681 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp2682 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp2683 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp2684 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp2691:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp2685 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp2685:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp2686 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp2687 # Offset: 200
.Ltmp2689:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp2681:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp2688 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp2688:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2680:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2686:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp2690:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp2689 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2687:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp2690 # Offset: 392
.Ltmp2684:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp2692:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp2691 # Offset: 445
.Ltmp2683:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp2692 # Offset: 460
.Ltmp2682:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt8multimapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm"

Binary Function "_Z19test_erase_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 197
  State       : disassembled
  Address     : 0x1c640
  Size        : 0x567
  MaxSize     : 0x570
  Offset      : 0x1c640
  Section     : .text
  Orc Section : .local.text._Z19test_erase_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0196:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x88, %rsp
    00000015: 	movq	%rdx, 0x30(%rsp)
    0000001a: 	xorl	%edx, %edx
    0000001c: 	movq	%rcx, 0x8(%rsp)
    00000021: 	movq	%rsi, %rcx
    00000024: 	movq	%rdi, 0x28(%rsp)
    00000029: 	subq	%rdi, %rcx
    0000002c: 	movq	%rsi, 0x10(%rsp)
    00000031: 	movq	%r8, 0x48(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x78(%rsp)
    00000044: 	xorl	%eax, %eax
    00000046: 	movabsq	$0x500000000, %rax
    00000050: 	divq	%rcx
    00000053: 	movq	%rax, 0x20(%rsp)
    00000058: 	cmpq	$0x3e8, %rax
    0000005e: 	ja	.Ltmp2693 # Offset: 94
    00000064: 	cmpq	$0x3, %rax
    00000068: 	ja	.Ltmp2694 # Offset: 104
    0000006e: 	movq	$0x0, 0x70(%rsp)
    00000077: 	pxor	%xmm0, %xmm0
    0000007b: 	movq	$0x4, 0x20(%rsp)
    00000084: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp2734:
    00000089: 	movq	0x20(%rsp), %rbx
    0000008e: 	leaq	0x60(%rsp), %rdi
    00000093: 	movq	%rbx, %rsi
    00000096: 	callq	_ZNSt6vectorIPSt8multimapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 150
    0000009b: 	movl	iterations(%rip), %eax
    000000a1: 	testl	%eax, %eax
    000000a3: 	jle	.Ltmp2695 # Offset: 163
    000000a9: 	movl	%ebx, 0x44(%rsp)
    000000ad: 	pxor	%xmm5, %xmm5
    000000b1: 	movl	$0x0, 0x40(%rsp)
    000000b9: 	movsd	%xmm5, 0x58(%rsp)
.Ltmp2729:
    000000bf: 	movslq	0x40(%rsp), %rdx
    000000c4: 	movslq	%eax, %rcx
    000000c7: 	movq	%rdx, %rsi
    000000ca: 	addq	0x20(%rsp), %rdx
    000000cf: 	subl	%esi, %eax
    000000d1: 	cmpq	%rcx, %rdx
    000000d4: 	movq	0x60(%rsp), %rcx
    000000d9: 	cmovbl	0x44(%rsp), %eax
    000000de: 	leaq	0x8(%rcx), %rdx
    000000e2: 	subl	$0x1, %eax
    000000e5: 	movq	%rcx, 0x38(%rsp)
    000000ea: 	movq	%rcx, %r14
    000000ed: 	leaq	(%rdx,%rax,8), %rax
    000000f1: 	movq	%rdx, 0x50(%rsp)
    000000f6: 	movq	%rax, 0x18(%rsp)
.Ltmp2704:
    000000fb: 	movl	$0x30, %edi
    00000100: 	callq	_Znwm@PLT # Offset: 256
    00000105: 	leaq	0x8(%rax), %r12
    00000109: 	movl	$0x0, 0x8(%rax)
    00000110: 	movq	%rax, %rbx
    00000113: 	movq	$0x0, 0x10(%rax)
    0000011b: 	movq	%r12, 0x18(%rax)
    0000011f: 	movq	%r12, 0x20(%rax)
    00000123: 	movq	$0x0, 0x28(%rax)
    0000012b: 	movq	0x28(%rsp), %rax
    00000130: 	movq	%rax, %rbp
    00000133: 	cmpq	%rax, 0x10(%rsp)
    00000138: 	je	.Ltmp2696 # Offset: 312
    0000013e: 	nop # Size: 2
.Ltmp2703:
    00000140: 	movsd	(%rbp), %xmm3
    00000145: 	movl	$0x30, %edi
    0000014a: 	movsd	%xmm3, (%rsp)
    0000014f: 	callq	_Znwm@PLT # Offset: 335
    00000154: 	movsd	(%rsp), %xmm0
    00000159: 	movq	0x10(%rbx), %rdx
    0000015d: 	movq	%rax, %rsi
    00000160: 	unpcklpd	%xmm0, %xmm0
    00000164: 	movups	%xmm0, 0x20(%rax)
    00000168: 	testq	%rdx, %rdx
    0000016b: 	jne	.Ltmp2697 # Offset: 363
    0000016d: 	jmp	.Ltmp2698 # Offset: 365
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2700:
    00000178: 	movq	0x10(%rdx), %rax
    0000017c: 	testq	%rax, %rax
    0000017f: 	je	.Ltmp2699 # Offset: 383
.Ltmp2701:
    00000181: 	movq	%rax, %rdx
.Ltmp2697:
    00000184: 	movsd	0x20(%rdx), %xmm0
    00000189: 	comisd	(%rsp), %xmm0
    0000018e: 	ja	.Ltmp2700 # Offset: 398
    00000190: 	movq	0x18(%rdx), %rax
    00000194: 	testq	%rax, %rax
    00000197: 	jne	.Ltmp2701 # Offset: 407
.Ltmp2699:
    00000199: 	movl	$0x1, %edi
    0000019e: 	cmpq	%rdx, %r12
    000001a1: 	je	.Ltmp2702 # Offset: 417
    000001a3: 	xorl	%edi, %edi
    000001a5: 	comisd	(%rsp), %xmm0
    000001aa: 	seta	%dil
.Ltmp2702:
    000001ae: 	movq	%r12, %rcx
    000001b1: 	addq	$0x8, %rbp
    000001b5: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 437
    000001ba: 	addq	$0x1, 0x28(%rbx)
    000001bf: 	cmpq	%rbp, 0x10(%rsp)
    000001c4: 	jne	.Ltmp2703 # Offset: 452
.Ltmp2696:
    000001ca: 	movq	%r14, %rax
    000001cd: 	movq	%rbx, (%r14)
    000001d0: 	addq	$0x8, %rax
    000001d4: 	movq	%rax, %r14
    000001d7: 	cmpq	%rax, 0x18(%rsp)
    000001dc: 	jne	.Ltmp2704 # Offset: 476
    000001e2: 	callq	clock@PLT # Offset: 482
    000001e7: 	movq	0x8(%rsp), %rcx
    000001ec: 	movq	%rax, start_time(%rip)
    000001f3: 	cmpq	%rcx, 0x30(%rsp)
    000001f8: 	je	.Ltmp2705 # Offset: 504
    000001fe: 	movq	0x38(%rsp), %rax
    00000203: 	movq	%rax, (%rsp)
.Ltmp2714:
    00000207: 	movq	(%rsp), %rax
    0000020b: 	movq	0x30(%rsp), %rbp
    00000210: 	movq	(%rax), %r14
    00000213: 	leaq	0x8(%r14), %rbx
    00000217: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2713:
    00000220: 	movq	0x10(%r14), %r15
    00000224: 	addq	$0x8, %rbp
    00000228: 	testq	%r15, %r15
    0000022b: 	je	.Ltmp2706 # Offset: 555
    00000231: 	movsd	-0x8(%rbp), %xmm1
    00000236: 	movq	%rbx, %r13
    00000239: 	movq	%r15, %r12
    0000023c: 	jmp	.Ltmp2707 # Offset: 572
    0000023e: 	nop # Size: 2
.Ltmp2709:
    00000240: 	movq	0x18(%r12), %r12
    00000245: 	testq	%r12, %r12
    00000248: 	je	.Ltmp2708 # Offset: 584
.Ltmp2707:
    0000024a: 	movsd	0x20(%r12), %xmm0
    00000251: 	comisd	%xmm0, %xmm1
    00000255: 	ja	.Ltmp2709 # Offset: 597
    00000257: 	comisd	%xmm1, %xmm0
    0000025b: 	movq	0x10(%r12), %rax
    00000260: 	jbe	.Ltmp2710 # Offset: 608
    00000266: 	movq	%r12, %r13
    00000269: 	movq	%rax, %r12
    0000026c: 	testq	%r12, %r12
    0000026f: 	jne	.Ltmp2707 # Offset: 623
.Ltmp2708:
    00000271: 	cmpq	%r13, 0x18(%r14)
    00000275: 	jne	.Ltmp2711 # Offset: 629
    00000277: 	cmpq	%r13, %rbx
    0000027a: 	je	.Ltmp2712 # Offset: 634
.Ltmp2711:
    00000280: 	cmpq	%rbp, 0x8(%rsp)
    00000285: 	jne	.Ltmp2713 # Offset: 645
    00000287: 	addq	$0x8, (%rsp)
    0000028c: 	movq	(%rsp), %rax
    00000290: 	cmpq	%rax, 0x18(%rsp)
    00000295: 	jne	.Ltmp2714 # Offset: 661
.Ltmp2705:
    0000029b: 	callq	clock@PLT # Offset: 667
    000002a0: 	pxor	%xmm0, %xmm0
    000002a4: 	movq	0x18(%rsp), %r14
    000002a9: 	movq	0x38(%rsp), %r12
    000002ae: 	movq	%rax, end_time(%rip)
    000002b5: 	subq	start_time(%rip), %rax
    000002bc: 	cvtsi2sd	%rax, %xmm0
    000002c1: 	divsd	DATAat0x53788(%rip), %xmm0
    000002c9: 	addsd	0x58(%rsp), %xmm0
    000002cf: 	movq	0x50(%rsp), %rbp
    000002d4: 	movsd	%xmm0, 0x58(%rsp)
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2719:
    000002e0: 	movq	(%r12), %r13
    000002e4: 	testq	%r13, %r13
    000002e7: 	je	.Ltmp2715 # Offset: 743
    000002e9: 	movq	0x10(%r13), %rbx
    000002ed: 	testq	%rbx, %rbx
    000002f0: 	je	.Ltmp2716 # Offset: 752
.Ltmp2717:
    000002f2: 	movq	0x18(%rbx), %rdi
    000002f6: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 758
    000002fb: 	movq	%rbx, %rdi
    000002fe: 	movq	0x10(%rbx), %rbx
    00000302: 	movl	$0x30, %esi
    00000307: 	callq	_ZdlPvm@PLT # Offset: 775
    0000030c: 	testq	%rbx, %rbx
    0000030f: 	jne	.Ltmp2717 # Offset: 783
.Ltmp2716:
    00000311: 	movl	$0x30, %esi
    00000316: 	movq	%r13, %rdi
    00000319: 	callq	_ZdlPvm@PLT # Offset: 793
.Ltmp2715:
    0000031e: 	movq	$0x0, (%r12)
    00000326: 	movq	%rbp, %r12
    00000329: 	cmpq	%rbp, %r14
    0000032c: 	je	.Ltmp2718 # Offset: 812
    00000332: 	addq	$0x8, %rbp
    00000336: 	jmp	.Ltmp2719 # Offset: 822
    00000338: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2712:
    00000340: 	movq	0x18(%r15), %rdi
    00000344: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 836
    00000349: 	movq	%r15, %rdi
    0000034c: 	movq	0x10(%r15), %r15
    00000350: 	movl	$0x30, %esi
    00000355: 	callq	_ZdlPvm@PLT # Offset: 853
    0000035a: 	testq	%r15, %r15
    0000035d: 	jne	.Ltmp2712 # Offset: 861
.Ltmp2733:
    0000035f: 	movq	$0x0, 0x10(%r14)
    00000367: 	movq	%rbx, 0x18(%r14)
    0000036b: 	movq	%rbx, 0x20(%r14)
    0000036f: 	movq	$0x0, 0x28(%r14)
    00000377: 	jmp	.Ltmp2711 # Offset: 887
    0000037c: 	nopl	(%rax) # Size: 4
.Ltmp2710:
    00000380: 	movq	0x18(%r12), %rcx
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp2728:
    00000388: 	testq	%rcx, %rcx
    0000038b: 	je	.Ltmp2720 # Offset: 907
.Ltmp2722:
    0000038d: 	movsd	0x20(%rcx), %xmm0
    00000392: 	comisd	%xmm1, %xmm0
    00000396: 	jbe	.Ltmp2721 # Offset: 918
    0000039c: 	movq	%rcx, %r13
    0000039f: 	movq	0x10(%rcx), %rcx
    000003a3: 	testq	%rcx, %rcx
    000003a6: 	jne	.Ltmp2722 # Offset: 934
    000003a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2720:
    000003b0: 	testq	%rax, %rax
    000003b3: 	je	.Ltmp2723 # Offset: 947
.Ltmp2725:
    000003b5: 	comisd	0x20(%rax), %xmm1
    000003ba: 	ja	.Ltmp2724 # Offset: 954
    000003bc: 	movq	%rax, %r12
    000003bf: 	movq	0x10(%rax), %rax
    000003c3: 	testq	%rax, %rax
    000003c6: 	jne	.Ltmp2725 # Offset: 966
.Ltmp2723:
    000003c8: 	cmpq	%r12, 0x18(%r14)
    000003cc: 	jne	.Ltmp2726 # Offset: 972
    000003ce: 	cmpq	%rbx, %r13
    000003d1: 	je	.Ltmp2712 # Offset: 977
.Ltmp2726:
    000003d7: 	cmpq	%r13, %r12
    000003da: 	je	.Ltmp2711 # Offset: 986
.Ltmp2727:
    000003e0: 	movq	%r12, %rdi
    000003e3: 	movq	%r12, %r15
    000003e6: 	callq	_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@PLT # Offset: 998
    000003eb: 	movq	%rbx, %rsi
    000003ee: 	movq	%r15, %rdi
    000003f1: 	movq	%rax, %r12
    000003f4: 	callq	_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_@PLT # Offset: 1012
    000003f9: 	movl	$0x30, %esi
    000003fe: 	movq	%rax, %rdi
    00000401: 	callq	_ZdlPvm@PLT # Offset: 1025
    00000406: 	subq	$0x1, 0x28(%r14)
    0000040b: 	cmpq	%r12, %r13
    0000040e: 	jne	.Ltmp2727 # Offset: 1038
    00000410: 	jmp	.Ltmp2711 # Offset: 1040
    00000415: 	nopl	(%rax) # Size: 3
.Ltmp2721:
    00000418: 	movq	0x18(%rcx), %rcx
    0000041c: 	jmp	.Ltmp2728 # Offset: 1052
    00000421: 	nopl	(%rax) # Size: 7
.Ltmp2724:
    00000428: 	movq	0x18(%rax), %rax
    0000042c: 	jmp	.Ltmp2720 # Offset: 1068
.Ltmp2718:
    00000431: 	movl	0x20(%rsp), %ecx
    00000435: 	movl	iterations(%rip), %eax
    0000043b: 	addl	%ecx, 0x40(%rsp)
    0000043f: 	movl	0x40(%rsp), %ecx
    00000443: 	cmpl	%ecx, %eax
    00000445: 	jg	.Ltmp2729 # Offset: 1093
.Ltmp2736:
    0000044b: 	movq	0x48(%rsp), %rdi
    00000450: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1104
    00000455: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000045c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000463: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000046a: 	je	.Ltmp2730 # Offset: 1130
.Ltmp2735:
    00000470: 	movq	-0x20(%rax), %rdi
    00000474: 	movsd	0x58(%rsp), %xmm0
    0000047a: 	callq	_Z13record_resultdPKc # Offset: 1146
    0000047f: 	movq	0x60(%rsp), %rdi
    00000484: 	testq	%rdi, %rdi
    00000487: 	je	.Ltmp2731 # Offset: 1159
    00000489: 	movq	0x78(%rsp), %rax
    0000048e: 	subq	%fs:0x28, %rax
    00000497: 	jne	.Ltmp2732 # Offset: 1175
    0000049d: 	movq	0x70(%rsp), %rsi
    000004a2: 	addq	$0x88, %rsp
    000004a9: 	popq	%rbx
    000004aa: 	popq	%rbp
    000004ab: 	subq	%rdi, %rsi
    000004ae: 	popq	%r12
    000004b0: 	popq	%r13
    000004b2: 	popq	%r14
    000004b4: 	popq	%r15
    000004b6: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1206
    000004bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2706:
    000004c0: 	cmpq	0x18(%r14), %rbx
    000004c4: 	jne	.Ltmp2711 # Offset: 1220
    000004ca: 	jmp	.Ltmp2733 # Offset: 1226
.Ltmp2698:
    000004cf: 	movq	%r12, %rdx
    000004d2: 	movl	$0x1, %edi
    000004d7: 	jmp	.Ltmp2702 # Offset: 1239
.Ltmp2693:
    000004dc: 	movq	$0x3e8, 0x20(%rsp)
.Ltmp2694:
    000004e5: 	movq	$0x0, 0x70(%rsp)
    000004ee: 	pxor	%xmm0, %xmm0
    000004f2: 	movaps	%xmm0, 0x60(%rsp)
    000004f7: 	jmp	.Ltmp2734 # Offset: 1271
.Ltmp2731:
    000004fc: 	movq	0x78(%rsp), %rax
    00000501: 	subq	%fs:0x28, %rax
    0000050a: 	jne	.Ltmp2732 # Offset: 1290
    0000050c: 	addq	$0x88, %rsp
    00000513: 	popq	%rbx
    00000514: 	popq	%rbp
    00000515: 	popq	%r12
    00000517: 	popq	%r13
    00000519: 	popq	%r14
    0000051b: 	popq	%r15
    0000051d: 	retq # Offset: 1309
.Ltmp2730:
    0000051e: 	movq	-0x8(%rdx), %rax
    00000522: 	addq	$0x200, %rax
    00000528: 	jmp	.Ltmp2735 # Offset: 1320
.Ltmp2695:
    0000052d: 	pxor	%xmm7, %xmm7
    00000531: 	movsd	%xmm7, 0x58(%rsp)
    00000537: 	jmp	.Ltmp2736 # Offset: 1335
.Ltmp2732:
    0000053c: 	callq	__stack_chk_fail@PLT # Offset: 1340
    00000541: 	endbr64
    00000545: 	movq	%rax, %rbp
    00000548: 	movq	0x60(%rsp), %rdi
    0000054d: 	movq	0x70(%rsp), %rsi
    00000552: 	subq	%rdi, %rsi
    00000555: 	testq	%rdi, %rdi
    00000558: 	je	.Ltmp2737 # Offset: 1368
    0000055a: 	callq	_ZdlPvm@PLT # Offset: 1370
.Ltmp2737:
    0000055f: 	movq	%rbp, %rdi
    00000562: 	callq	_Unwind_Resume@PLT # Offset: 1378
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_erase_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_duplicate_coreISt8multimapIddSt4lessIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 198
  State       : disassembled
  Address     : 0x1cbb0
  Size        : 0x2c6
  MaxSize     : 0x2d0
  Offset      : 0x1cbb0
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt8multimapIddSt4lessIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0197:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x4, %rsi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rdi, %r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x58, %rsp
    00000019: 	movq	%rdx, 0x28(%rsp)
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x48(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movabsq	$0x500000000, %rax
    0000003a: 	divq	%rsi
    0000003d: 	movq	%rax, (%rsp)
    00000041: 	cmpq	$0x3e8, %rax
    00000047: 	ja	.Ltmp2738 # Offset: 71
    0000004d: 	cmpq	$0x3, %rax
    00000051: 	ja	.Ltmp2739 # Offset: 81
    00000057: 	movq	$0x0, 0x40(%rsp)
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	movq	$0x4, (%rsp)
    0000006c: 	movaps	%xmm0, 0x30(%rsp)
.Ltmp2750:
    00000071: 	movq	(%rsp), %rbx
    00000075: 	leaq	0x30(%rsp), %rdi
    0000007a: 	movq	%rbx, %rsi
    0000007d: 	callq	_ZNSt6vectorIPSt8multimapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 125
    00000082: 	movq	0x30(%rsp), %rdx
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movq	%rdx, 0x10(%rsp)
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp2740 # Offset: 148
    0000009a: 	addq	$0x8, %rdx
    0000009e: 	movl	%ebx, 0x1c(%rsp)
    000000a2: 	pxor	%xmm2, %xmm2
    000000a6: 	xorl	%r15d, %r15d
    000000a9: 	movq	%rdx, 0x20(%rsp)
    000000ae: 	movsd	%xmm2, 0x8(%rsp)
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp2746:
    000000b8: 	movslq	%eax, %rcx
    000000bb: 	movslq	%r15d, %rdx
    000000be: 	addq	(%rsp), %rdx
    000000c2: 	subl	%r15d, %eax
    000000c5: 	cmpq	%rcx, %rdx
    000000c8: 	cmovbl	0x1c(%rsp), %eax
    000000cd: 	movl	%eax, %ebx
    000000cf: 	callq	clock@PLT # Offset: 207
    000000d4: 	movq	0x10(%rsp), %r12
    000000d9: 	movq	0x20(%rsp), %rcx
    000000de: 	movq	%rax, start_time(%rip)
    000000e5: 	leal	-0x1(%rbx), %eax
    000000e8: 	movq	%r12, %rbp
    000000eb: 	leaq	(%rcx,%rax,8), %r13
    000000ef: 	nop # Size: 1
.Ltmp2741:
    000000f0: 	movl	$0x30, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	movq	%rax, %rbx
    000000fd: 	movl	$0x0, 0x8(%rax)
    00000104: 	leaq	0x8(%rax), %rax
    00000108: 	movq	%r14, %rsi
    0000010b: 	movq	$0x0, 0x8(%rax)
    00000113: 	movq	%rbx, %rdi
    00000116: 	movq	%rax, 0x18(%rbx)
    0000011a: 	movq	%rax, 0x20(%rbx)
    0000011e: 	movq	$0x0, 0x28(%rbx)
    00000126: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EEaSERKS8_.isra.0/1" # Offset: 294
    0000012b: 	movq	%rbx, (%r12)
    0000012f: 	addq	$0x8, %r12
    00000133: 	cmpq	%r13, %r12
    00000136: 	jne	.Ltmp2741 # Offset: 310
    00000138: 	callq	clock@PLT # Offset: 312
    0000013d: 	pxor	%xmm0, %xmm0
    00000141: 	movq	%rax, end_time(%rip)
    00000148: 	subq	start_time(%rip), %rax
    0000014f: 	cvtsi2sd	%rax, %xmm0
    00000154: 	divsd	DATAat0x53788(%rip), %xmm0
    0000015c: 	addsd	0x8(%rsp), %xmm0
    00000162: 	movsd	%xmm0, 0x8(%rsp)
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2745:
    00000170: 	movq	(%rbp), %r12
    00000174: 	testq	%r12, %r12
    00000177: 	je	.Ltmp2742 # Offset: 375
    00000179: 	movq	0x10(%r12), %rbx
    0000017e: 	testq	%rbx, %rbx
    00000181: 	je	.Ltmp2743 # Offset: 385
.Ltmp2744:
    00000183: 	movq	0x18(%rbx), %rdi
    00000187: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 391
    0000018c: 	movq	%rbx, %rdi
    0000018f: 	movq	0x10(%rbx), %rbx
    00000193: 	movl	$0x30, %esi
    00000198: 	callq	_ZdlPvm@PLT # Offset: 408
    0000019d: 	testq	%rbx, %rbx
    000001a0: 	jne	.Ltmp2744 # Offset: 416
.Ltmp2743:
    000001a2: 	movl	$0x30, %esi
    000001a7: 	movq	%r12, %rdi
    000001aa: 	callq	_ZdlPvm@PLT # Offset: 426
.Ltmp2742:
    000001af: 	movq	$0x0, (%rbp)
    000001b7: 	addq	$0x8, %rbp
    000001bb: 	cmpq	%rbp, %r13
    000001be: 	jne	.Ltmp2745 # Offset: 446
    000001c0: 	movl	iterations(%rip), %eax
    000001c6: 	addl	(%rsp), %r15d
    000001ca: 	cmpl	%r15d, %eax
    000001cd: 	jg	.Ltmp2746 # Offset: 461
.Ltmp2752:
    000001d3: 	movq	0x28(%rsp), %rdi
    000001d8: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 472
    000001dd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f2: 	je	.Ltmp2747 # Offset: 498
.Ltmp2751:
    000001f8: 	movq	-0x20(%rax), %rdi
    000001fc: 	movsd	0x8(%rsp), %xmm0
    00000202: 	callq	_Z13record_resultdPKc # Offset: 514
    00000207: 	cmpq	$0x0, 0x10(%rsp)
    0000020d: 	je	.Ltmp2748 # Offset: 525
    0000020f: 	movq	0x48(%rsp), %rax
    00000214: 	subq	%fs:0x28, %rax
    0000021d: 	jne	.Ltmp2749 # Offset: 541
    0000021f: 	movq	0x40(%rsp), %rsi
    00000224: 	movq	0x10(%rsp), %rdi
    00000229: 	addq	$0x58, %rsp
    0000022d: 	popq	%rbx
    0000022e: 	popq	%rbp
    0000022f: 	subq	%rdi, %rsi
    00000232: 	popq	%r12
    00000234: 	popq	%r13
    00000236: 	popq	%r14
    00000238: 	popq	%r15
    0000023a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 570
.Ltmp2748:
    0000023f: 	movq	0x48(%rsp), %rax
    00000244: 	subq	%fs:0x28, %rax
    0000024d: 	jne	.Ltmp2749 # Offset: 589
    0000024f: 	addq	$0x58, %rsp
    00000253: 	popq	%rbx
    00000254: 	popq	%rbp
    00000255: 	popq	%r12
    00000257: 	popq	%r13
    00000259: 	popq	%r14
    0000025b: 	popq	%r15
    0000025d: 	retq # Offset: 605
.Ltmp2738:
    0000025e: 	movq	$0x3e8, (%rsp)
.Ltmp2739:
    00000266: 	movq	$0x0, 0x40(%rsp)
    0000026f: 	pxor	%xmm0, %xmm0
    00000273: 	movaps	%xmm0, 0x30(%rsp)
    00000278: 	jmp	.Ltmp2750 # Offset: 632
.Ltmp2747:
    0000027d: 	movq	-0x8(%rdx), %rax
    00000281: 	addq	$0x200, %rax
    00000287: 	jmp	.Ltmp2751 # Offset: 647
.Ltmp2740:
    0000028c: 	pxor	%xmm3, %xmm3
    00000290: 	movsd	%xmm3, 0x8(%rsp)
    00000296: 	jmp	.Ltmp2752 # Offset: 662
.Ltmp2749:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
    000002a0: 	endbr64
    000002a4: 	movq	%rax, %rbp
    000002a7: 	movq	0x30(%rsp), %rdi
    000002ac: 	movq	0x40(%rsp), %rsi
    000002b1: 	subq	%rdi, %rsi
    000002b4: 	testq	%rdi, %rdi
    000002b7: 	je	.Ltmp2753 # Offset: 695
    000002b9: 	callq	_ZdlPvm@PLT # Offset: 697
.Ltmp2753:
    000002be: 	movq	%rbp, %rdi
    000002c1: 	callq	_Unwind_Resume@PLT # Offset: 705
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt8multimapIddSt4lessIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_delete_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 199
  State       : disassembled
  Address     : 0x1ce80
  Size        : 0x38a
  MaxSize     : 0x390
  Offset      : 0x1ce80
  Section     : .text
  Orc Section : .local.text._Z20test_delete_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0198:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x48(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x18(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	cmpq	$0x3e8, %rax
    0000004a: 	ja	.Ltmp2754 # Offset: 74
    00000050: 	movq	%rax, %r15
    00000053: 	cmpq	$0x3, %rax
    00000057: 	ja	.Ltmp2755 # Offset: 87
    0000005d: 	movq	$0x0, 0x60(%rsp)
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movl	$0x4, %r15d
    00000070: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp2774:
    00000075: 	leaq	0x50(%rsp), %rdi
    0000007a: 	movq	%r15, %rsi
    0000007d: 	callq	_ZNSt6vectorIPSt8multimapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 125
    00000082: 	movq	0x50(%rsp), %rcx
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movq	%rcx, 0x30(%rsp)
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp2756 # Offset: 148
    0000009a: 	addq	$0x8, %rcx
    0000009e: 	movl	%r15d, 0x3c(%rsp)
    000000a3: 	pxor	%xmm5, %xmm5
    000000a7: 	movl	$0x0, 0x38(%rsp)
    000000af: 	movq	%rcx, 0x40(%rsp)
    000000b4: 	movsd	%xmm5, 0x28(%rsp)
.Ltmp2770:
    000000ba: 	movslq	0x38(%rsp), %rdx
    000000bf: 	movslq	%eax, %rcx
    000000c2: 	movq	0x40(%rsp), %rsi
    000000c7: 	movq	%rdx, %rdi
    000000ca: 	addq	%r15, %rdx
    000000cd: 	subl	%edi, %eax
    000000cf: 	cmpq	%rcx, %rdx
    000000d2: 	cmovbl	0x3c(%rsp), %eax
    000000d7: 	movq	0x30(%rsp), %rcx
    000000dc: 	subl	$0x1, %eax
    000000df: 	movq	%rcx, 0x10(%rsp)
    000000e4: 	movq	%rcx, %r14
    000000e7: 	leaq	(%rsi,%rax,8), %rax
    000000eb: 	movq	%rax, 0x20(%rsp)
.Ltmp2765:
    000000f0: 	movl	$0x30, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	leaq	0x8(%rax), %r12
    000000fe: 	movl	$0x0, 0x8(%rax)
    00000105: 	movq	%rax, %rbx
    00000108: 	movq	$0x0, 0x10(%rax)
    00000110: 	movq	%r12, 0x18(%rax)
    00000114: 	movq	%r12, 0x20(%rax)
    00000118: 	movq	$0x0, 0x28(%rax)
    00000120: 	movq	0x18(%rsp), %rax
    00000125: 	movq	%rax, %rbp
    00000128: 	cmpq	%rax, %r13
    0000012b: 	je	.Ltmp2757 # Offset: 299
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp2764:
    00000138: 	movsd	(%rbp), %xmm2
    0000013d: 	movl	$0x30, %edi
    00000142: 	movsd	%xmm2, 0x8(%rsp)
    00000148: 	callq	_Znwm@PLT # Offset: 328
    0000014d: 	movsd	0x8(%rsp), %xmm0
    00000153: 	movq	0x10(%rbx), %rdx
    00000157: 	movq	%rax, %rsi
    0000015a: 	unpcklpd	%xmm0, %xmm0
    0000015e: 	movups	%xmm0, 0x20(%rax)
    00000162: 	testq	%rdx, %rdx
    00000165: 	jne	.Ltmp2758 # Offset: 357
    00000167: 	jmp	.Ltmp2759 # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2761:
    00000170: 	movq	0x10(%rdx), %rax
    00000174: 	testq	%rax, %rax
    00000177: 	je	.Ltmp2760 # Offset: 375
.Ltmp2762:
    00000179: 	movq	%rax, %rdx
.Ltmp2758:
    0000017c: 	movsd	0x20(%rdx), %xmm0
    00000181: 	comisd	0x8(%rsp), %xmm0
    00000187: 	ja	.Ltmp2761 # Offset: 391
    00000189: 	movq	0x18(%rdx), %rax
    0000018d: 	testq	%rax, %rax
    00000190: 	jne	.Ltmp2762 # Offset: 400
.Ltmp2760:
    00000192: 	movl	$0x1, %edi
    00000197: 	cmpq	%rdx, %r12
    0000019a: 	je	.Ltmp2763 # Offset: 410
    0000019c: 	xorl	%edi, %edi
    0000019e: 	comisd	0x8(%rsp), %xmm0
    000001a4: 	seta	%dil
.Ltmp2763:
    000001a8: 	movq	%r12, %rcx
    000001ab: 	addq	$0x8, %rbp
    000001af: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 431
    000001b4: 	addq	$0x1, 0x28(%rbx)
    000001b9: 	cmpq	%rbp, %r13
    000001bc: 	jne	.Ltmp2764 # Offset: 444
.Ltmp2757:
    000001c2: 	movq	0x10(%rsp), %rax
    000001c7: 	movq	%rbx, (%rax)
    000001ca: 	addq	$0x8, %rax
    000001ce: 	movq	%rax, 0x10(%rsp)
    000001d3: 	cmpq	0x20(%rsp), %rax
    000001d8: 	jne	.Ltmp2765 # Offset: 472
    000001de: 	callq	clock@PLT # Offset: 478
    000001e3: 	movq	0x20(%rsp), %r12
    000001e8: 	movq	%rax, start_time(%rip)
    000001ef: 	nop # Size: 1
.Ltmp2769:
    000001f0: 	movq	(%r14), %rbp
    000001f3: 	testq	%rbp, %rbp
    000001f6: 	je	.Ltmp2766 # Offset: 502
    000001f8: 	movq	0x10(%rbp), %rbx
    000001fc: 	testq	%rbx, %rbx
    000001ff: 	je	.Ltmp2767 # Offset: 511
.Ltmp2768:
    00000201: 	movq	0x18(%rbx), %rdi
    00000205: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 517
    0000020a: 	movq	%rbx, %rdi
    0000020d: 	movq	0x10(%rbx), %rbx
    00000211: 	movl	$0x30, %esi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
    0000021b: 	testq	%rbx, %rbx
    0000021e: 	jne	.Ltmp2768 # Offset: 542
.Ltmp2767:
    00000220: 	movl	$0x30, %esi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZdlPvm@PLT # Offset: 552
.Ltmp2766:
    0000022d: 	movq	$0x0, (%r14)
    00000234: 	addq	$0x8, %r14
    00000238: 	cmpq	%r14, %r12
    0000023b: 	jne	.Ltmp2769 # Offset: 571
    0000023d: 	callq	clock@PLT # Offset: 573
    00000242: 	pxor	%xmm0, %xmm0
    00000246: 	addl	%r15d, 0x38(%rsp)
    0000024b: 	movl	0x38(%rsp), %ecx
    0000024f: 	movq	%rax, end_time(%rip)
    00000256: 	subq	start_time(%rip), %rax
    0000025d: 	cvtsi2sd	%rax, %xmm0
    00000262: 	divsd	DATAat0x53788(%rip), %xmm0
    0000026a: 	addsd	0x28(%rsp), %xmm0
    00000270: 	movl	iterations(%rip), %eax
    00000276: 	movsd	%xmm0, 0x28(%rsp)
    0000027c: 	cmpl	%ecx, %eax
    0000027e: 	jg	.Ltmp2770 # Offset: 638
.Ltmp2776:
    00000284: 	movq	0x48(%rsp), %rdi
    00000289: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 649
    0000028e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000295: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000029c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a3: 	je	.Ltmp2771 # Offset: 675
.Ltmp2775:
    000002a9: 	movq	-0x20(%rax), %rdi
    000002ad: 	movsd	0x28(%rsp), %xmm0
    000002b3: 	callq	_Z13record_resultdPKc # Offset: 691
    000002b8: 	cmpq	$0x0, 0x30(%rsp)
    000002be: 	je	.Ltmp2772 # Offset: 702
    000002c0: 	movq	0x68(%rsp), %rax
    000002c5: 	subq	%fs:0x28, %rax
    000002ce: 	jne	.Ltmp2773 # Offset: 718
    000002d4: 	movq	0x60(%rsp), %rsi
    000002d9: 	movq	0x30(%rsp), %rdi
    000002de: 	addq	$0x78, %rsp
    000002e2: 	popq	%rbx
    000002e3: 	popq	%rbp
    000002e4: 	subq	%rdi, %rsi
    000002e7: 	popq	%r12
    000002e9: 	popq	%r13
    000002eb: 	popq	%r14
    000002ed: 	popq	%r15
    000002ef: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 751
    000002f4: 	nopl	(%rax) # Size: 4
.Ltmp2759:
    000002f8: 	movq	%r12, %rdx
    000002fb: 	movl	$0x1, %edi
    00000300: 	jmp	.Ltmp2763 # Offset: 768
.Ltmp2754:
    00000305: 	movl	$0x3e8, %r15d
.Ltmp2755:
    0000030b: 	movq	$0x0, 0x60(%rsp)
    00000314: 	pxor	%xmm0, %xmm0
    00000318: 	movaps	%xmm0, 0x50(%rsp)
    0000031d: 	jmp	.Ltmp2774 # Offset: 797
.Ltmp2772:
    00000322: 	movq	0x68(%rsp), %rax
    00000327: 	subq	%fs:0x28, %rax
    00000330: 	jne	.Ltmp2773 # Offset: 816
    00000332: 	addq	$0x78, %rsp
    00000336: 	popq	%rbx
    00000337: 	popq	%rbp
    00000338: 	popq	%r12
    0000033a: 	popq	%r13
    0000033c: 	popq	%r14
    0000033e: 	popq	%r15
    00000340: 	retq # Offset: 832
.Ltmp2771:
    00000341: 	movq	-0x8(%rdx), %rax
    00000345: 	addq	$0x200, %rax
    0000034b: 	jmp	.Ltmp2775 # Offset: 843
.Ltmp2756:
    00000350: 	pxor	%xmm6, %xmm6
    00000354: 	movsd	%xmm6, 0x28(%rsp)
    0000035a: 	jmp	.Ltmp2776 # Offset: 858
.Ltmp2773:
    0000035f: 	callq	__stack_chk_fail@PLT # Offset: 863
    00000364: 	endbr64
    00000368: 	movq	%rax, %rbp
    0000036b: 	movq	0x50(%rsp), %rdi
    00000370: 	movq	0x60(%rsp), %rsi
    00000375: 	subq	%rdi, %rsi
    00000378: 	testq	%rdi, %rdi
    0000037b: 	je	.Ltmp2777 # Offset: 891
    0000037d: 	callq	_ZdlPvm@PLT # Offset: 893
.Ltmp2777:
    00000382: 	movq	%rbp, %rdi
    00000385: 	callq	_Unwind_Resume@PLT # Offset: 901
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_delete_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_clearall_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 200
  State       : disassembled
  Address     : 0x1d210
  Size        : 0x3fa
  MaxSize     : 0x400
  Offset      : 0x1d210
  Section     : .text
  Orc Section : .local.text._Z22test_clearall_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0199:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x40(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x18(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	cmpq	$0x3e8, %rax
    0000004a: 	ja	.Ltmp2778 # Offset: 74
    00000050: 	movq	%rax, %r15
    00000053: 	cmpq	$0x3, %rax
    00000057: 	ja	.Ltmp2779 # Offset: 87
    0000005d: 	movq	$0x0, 0x60(%rsp)
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movl	$0x4, %r15d
    00000070: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp2801:
    00000075: 	leaq	0x50(%rsp), %rdi
    0000007a: 	movq	%r15, %rsi
    0000007d: 	callq	_ZNSt6vectorIPSt8multimapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 125
    00000082: 	movq	0x50(%rsp), %rcx
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movq	%rcx, 0x28(%rsp)
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp2780 # Offset: 148
    0000009a: 	addq	$0x8, %rcx
    0000009e: 	movl	%r15d, 0x34(%rsp)
    000000a3: 	pxor	%xmm4, %xmm4
    000000a7: 	movl	$0x0, 0x30(%rsp)
    000000af: 	movq	%rcx, 0x38(%rsp)
    000000b4: 	movsd	%xmm4, 0x48(%rsp)
.Ltmp2797:
    000000ba: 	movslq	0x30(%rsp), %rdx
    000000bf: 	movslq	%eax, %rcx
    000000c2: 	movq	%rdx, %rsi
    000000c5: 	addq	%r15, %rdx
    000000c8: 	subl	%esi, %eax
    000000ca: 	cmpq	%rcx, %rdx
    000000cd: 	cmovbl	0x34(%rsp), %eax
    000000d2: 	movq	0x38(%rsp), %rsi
    000000d7: 	movq	0x28(%rsp), %rcx
    000000dc: 	subl	$0x1, %eax
    000000df: 	leaq	(%rsi,%rax,8), %rax
    000000e3: 	movq	%rcx, 0x10(%rsp)
    000000e8: 	movq	%rcx, %r14
    000000eb: 	movq	%rax, 0x20(%rsp)
.Ltmp2789:
    000000f0: 	movl	$0x30, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	leaq	0x8(%rax), %r12
    000000fe: 	movl	$0x0, 0x8(%rax)
    00000105: 	movq	%rax, %rbx
    00000108: 	movq	$0x0, 0x10(%rax)
    00000110: 	movq	%r12, 0x18(%rax)
    00000114: 	movq	%r12, 0x20(%rax)
    00000118: 	movq	$0x0, 0x28(%rax)
    00000120: 	movq	0x18(%rsp), %rax
    00000125: 	movq	%rax, %rbp
    00000128: 	cmpq	%rax, %r13
    0000012b: 	je	.Ltmp2781 # Offset: 299
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp2788:
    00000138: 	movsd	(%rbp), %xmm2
    0000013d: 	movl	$0x30, %edi
    00000142: 	movsd	%xmm2, 0x8(%rsp)
    00000148: 	callq	_Znwm@PLT # Offset: 328
    0000014d: 	movsd	0x8(%rsp), %xmm0
    00000153: 	movq	0x10(%rbx), %rdx
    00000157: 	movq	%rax, %rsi
    0000015a: 	unpcklpd	%xmm0, %xmm0
    0000015e: 	movups	%xmm0, 0x20(%rax)
    00000162: 	testq	%rdx, %rdx
    00000165: 	jne	.Ltmp2782 # Offset: 357
    00000167: 	jmp	.Ltmp2783 # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2785:
    00000170: 	movq	0x10(%rdx), %rax
    00000174: 	testq	%rax, %rax
    00000177: 	je	.Ltmp2784 # Offset: 375
.Ltmp2786:
    00000179: 	movq	%rax, %rdx
.Ltmp2782:
    0000017c: 	movsd	0x20(%rdx), %xmm0
    00000181: 	comisd	0x8(%rsp), %xmm0
    00000187: 	ja	.Ltmp2785 # Offset: 391
    00000189: 	movq	0x18(%rdx), %rax
    0000018d: 	testq	%rax, %rax
    00000190: 	jne	.Ltmp2786 # Offset: 400
.Ltmp2784:
    00000192: 	movl	$0x1, %edi
    00000197: 	cmpq	%r12, %rdx
    0000019a: 	je	.Ltmp2787 # Offset: 410
    0000019c: 	xorl	%edi, %edi
    0000019e: 	comisd	0x8(%rsp), %xmm0
    000001a4: 	seta	%dil
.Ltmp2787:
    000001a8: 	movq	%r12, %rcx
    000001ab: 	addq	$0x8, %rbp
    000001af: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 431
    000001b4: 	addq	$0x1, 0x28(%rbx)
    000001b9: 	cmpq	%rbp, %r13
    000001bc: 	jne	.Ltmp2788 # Offset: 444
.Ltmp2781:
    000001c2: 	movq	0x10(%rsp), %rax
    000001c7: 	movq	%rbx, (%rax)
    000001ca: 	addq	$0x8, %rax
    000001ce: 	movq	%rax, 0x10(%rsp)
    000001d3: 	cmpq	0x20(%rsp), %rax
    000001d8: 	jne	.Ltmp2789 # Offset: 472
    000001de: 	callq	clock@PLT # Offset: 478
    000001e3: 	movq	%r13, 0x8(%rsp)
    000001e8: 	movq	0x28(%rsp), %rbp
    000001ed: 	movq	%rax, start_time(%rip)
    000001f4: 	movq	0x20(%rsp), %r12
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp2792:
    00000200: 	movq	(%rbp), %rbx
    00000204: 	movq	0x10(%rbx), %r13
    00000208: 	testq	%r13, %r13
    0000020b: 	je	.Ltmp2790 # Offset: 523
.Ltmp2791:
    0000020d: 	movq	0x18(%r13), %rdi
    00000211: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 529
    00000216: 	movq	%r13, %rdi
    00000219: 	movq	0x10(%r13), %r13
    0000021d: 	movl	$0x30, %esi
    00000222: 	callq	_ZdlPvm@PLT # Offset: 546
    00000227: 	testq	%r13, %r13
    0000022a: 	jne	.Ltmp2791 # Offset: 554
.Ltmp2790:
    0000022c: 	leaq	0x8(%rbx), %rax
    00000230: 	addq	$0x8, %rbp
    00000234: 	movq	$0x0, 0x10(%rbx)
    0000023c: 	movq	%rax, 0x18(%rbx)
    00000240: 	movq	%rax, 0x20(%rbx)
    00000244: 	movq	$0x0, 0x28(%rbx)
    0000024c: 	cmpq	%r12, %rbp
    0000024f: 	jne	.Ltmp2792 # Offset: 591
    00000251: 	movq	0x8(%rsp), %r13
    00000256: 	callq	clock@PLT # Offset: 598
    0000025b: 	pxor	%xmm0, %xmm0
    0000025f: 	movq	0x20(%rsp), %r12
    00000264: 	movq	%rax, end_time(%rip)
    0000026b: 	subq	start_time(%rip), %rax
    00000272: 	cvtsi2sd	%rax, %xmm0
    00000277: 	divsd	DATAat0x53788(%rip), %xmm0
    0000027f: 	addsd	0x48(%rsp), %xmm0
    00000285: 	movsd	%xmm0, 0x48(%rsp)
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2796:
    00000290: 	movq	(%r14), %rbp
    00000293: 	testq	%rbp, %rbp
    00000296: 	je	.Ltmp2793 # Offset: 662
    00000298: 	movq	0x10(%rbp), %rbx
    0000029c: 	testq	%rbx, %rbx
    0000029f: 	je	.Ltmp2794 # Offset: 671
.Ltmp2795:
    000002a1: 	movq	0x18(%rbx), %rdi
    000002a5: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 677
    000002aa: 	movq	%rbx, %rdi
    000002ad: 	movq	0x10(%rbx), %rbx
    000002b1: 	movl	$0x30, %esi
    000002b6: 	callq	_ZdlPvm@PLT # Offset: 694
    000002bb: 	testq	%rbx, %rbx
    000002be: 	jne	.Ltmp2795 # Offset: 702
.Ltmp2794:
    000002c0: 	movl	$0x30, %esi
    000002c5: 	movq	%rbp, %rdi
    000002c8: 	callq	_ZdlPvm@PLT # Offset: 712
.Ltmp2793:
    000002cd: 	movq	$0x0, (%r14)
    000002d4: 	addq	$0x8, %r14
    000002d8: 	cmpq	%r12, %r14
    000002db: 	jne	.Ltmp2796 # Offset: 731
    000002dd: 	addl	%r15d, 0x30(%rsp)
    000002e2: 	movl	iterations(%rip), %eax
    000002e8: 	movl	0x30(%rsp), %ecx
    000002ec: 	cmpl	%ecx, %eax
    000002ee: 	jg	.Ltmp2797 # Offset: 750
.Ltmp2803:
    000002f4: 	movq	0x40(%rsp), %rdi
    000002f9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 761
    000002fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000305: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000030c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000313: 	je	.Ltmp2798 # Offset: 787
.Ltmp2802:
    00000319: 	movq	-0x20(%rax), %rdi
    0000031d: 	movsd	0x48(%rsp), %xmm0
    00000323: 	callq	_Z13record_resultdPKc # Offset: 803
    00000328: 	cmpq	$0x0, 0x28(%rsp)
    0000032e: 	je	.Ltmp2799 # Offset: 814
    00000330: 	movq	0x68(%rsp), %rax
    00000335: 	subq	%fs:0x28, %rax
    0000033e: 	jne	.Ltmp2800 # Offset: 830
    00000344: 	movq	0x60(%rsp), %rsi
    00000349: 	movq	0x28(%rsp), %rdi
    0000034e: 	addq	$0x78, %rsp
    00000352: 	popq	%rbx
    00000353: 	popq	%rbp
    00000354: 	subq	%rdi, %rsi
    00000357: 	popq	%r12
    00000359: 	popq	%r13
    0000035b: 	popq	%r14
    0000035d: 	popq	%r15
    0000035f: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 863
    00000364: 	nopl	(%rax) # Size: 4
.Ltmp2783:
    00000368: 	movq	%r12, %rdx
    0000036b: 	movl	$0x1, %edi
    00000370: 	jmp	.Ltmp2787 # Offset: 880
.Ltmp2778:
    00000375: 	movl	$0x3e8, %r15d
.Ltmp2779:
    0000037b: 	movq	$0x0, 0x60(%rsp)
    00000384: 	pxor	%xmm0, %xmm0
    00000388: 	movaps	%xmm0, 0x50(%rsp)
    0000038d: 	jmp	.Ltmp2801 # Offset: 909
.Ltmp2799:
    00000392: 	movq	0x68(%rsp), %rax
    00000397: 	subq	%fs:0x28, %rax
    000003a0: 	jne	.Ltmp2800 # Offset: 928
    000003a2: 	addq	$0x78, %rsp
    000003a6: 	popq	%rbx
    000003a7: 	popq	%rbp
    000003a8: 	popq	%r12
    000003aa: 	popq	%r13
    000003ac: 	popq	%r14
    000003ae: 	popq	%r15
    000003b0: 	retq # Offset: 944
.Ltmp2798:
    000003b1: 	movq	-0x8(%rdx), %rax
    000003b5: 	addq	$0x200, %rax
    000003bb: 	jmp	.Ltmp2802 # Offset: 955
.Ltmp2780:
    000003c0: 	pxor	%xmm6, %xmm6
    000003c4: 	movsd	%xmm6, 0x48(%rsp)
    000003ca: 	jmp	.Ltmp2803 # Offset: 970
.Ltmp2800:
    000003cf: 	callq	__stack_chk_fail@PLT # Offset: 975
    000003d4: 	endbr64
    000003d8: 	movq	%rax, %rbp
    000003db: 	movq	0x50(%rsp), %rdi
    000003e0: 	movq	0x60(%rsp), %rsi
    000003e5: 	subq	%rdi, %rsi
    000003e8: 	testq	%rdi, %rdi
    000003eb: 	je	.Ltmp2804 # Offset: 1003
    000003ed: 	callq	_ZdlPvm@PLT # Offset: 1005
.Ltmp2804:
    000003f2: 	movq	%rbp, %rdi
    000003f5: 	callq	_Unwind_Resume@PLT # Offset: 1013
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_clearall_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_eraseall_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 201
  State       : disassembled
  Address     : 0x1d610
  Size        : 0x3da
  MaxSize     : 0x3e0
  Offset      : 0x1d610
  Section     : .text
  Orc Section : .local.text._Z22test_eraseall_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0200:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x40(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x18(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	cmpq	$0x3e8, %rax
    0000004a: 	ja	.Ltmp2805 # Offset: 74
    00000050: 	movq	%rax, %r15
    00000053: 	cmpq	$0x3, %rax
    00000057: 	ja	.Ltmp2806 # Offset: 87
    0000005d: 	movq	$0x0, 0x60(%rsp)
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movl	$0x4, %r15d
    00000070: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp2826:
    00000075: 	leaq	0x50(%rsp), %rdi
    0000007a: 	movq	%r15, %rsi
    0000007d: 	callq	_ZNSt6vectorIPSt8multimapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 125
    00000082: 	movq	0x50(%rsp), %rcx
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movq	%rcx, 0x28(%rsp)
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp2807 # Offset: 148
    0000009a: 	addq	$0x8, %rcx
    0000009e: 	movl	%r15d, 0x34(%rsp)
    000000a3: 	pxor	%xmm4, %xmm4
    000000a7: 	movl	$0x0, 0x30(%rsp)
    000000af: 	movq	%rcx, 0x38(%rsp)
    000000b4: 	movsd	%xmm4, 0x48(%rsp)
.Ltmp2822:
    000000ba: 	movslq	0x30(%rsp), %rdx
    000000bf: 	movslq	%eax, %rcx
    000000c2: 	movq	0x38(%rsp), %rdi
    000000c7: 	movq	%rdx, %rsi
    000000ca: 	addq	%r15, %rdx
    000000cd: 	subl	%esi, %eax
    000000cf: 	cmpq	%rcx, %rdx
    000000d2: 	cmovbl	0x34(%rsp), %eax
    000000d7: 	movq	0x28(%rsp), %rcx
    000000dc: 	subl	$0x1, %eax
    000000df: 	movq	%rcx, 0x10(%rsp)
    000000e4: 	movq	%rcx, %r14
    000000e7: 	leaq	(%rdi,%rax,8), %rax
    000000eb: 	movq	%rax, 0x20(%rsp)
.Ltmp2816:
    000000f0: 	movl	$0x30, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	leaq	0x8(%rax), %r12
    000000fe: 	movl	$0x0, 0x8(%rax)
    00000105: 	movq	%rax, %rbx
    00000108: 	movq	$0x0, 0x10(%rax)
    00000110: 	movq	%r12, 0x18(%rax)
    00000114: 	movq	%r12, 0x20(%rax)
    00000118: 	movq	$0x0, 0x28(%rax)
    00000120: 	movq	0x18(%rsp), %rax
    00000125: 	movq	%rax, %rbp
    00000128: 	cmpq	%rax, %r13
    0000012b: 	je	.Ltmp2808 # Offset: 299
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp2815:
    00000138: 	movsd	(%rbp), %xmm2
    0000013d: 	movl	$0x30, %edi
    00000142: 	movsd	%xmm2, 0x8(%rsp)
    00000148: 	callq	_Znwm@PLT # Offset: 328
    0000014d: 	movsd	0x8(%rsp), %xmm0
    00000153: 	movq	0x10(%rbx), %rdx
    00000157: 	movq	%rax, %rsi
    0000015a: 	unpcklpd	%xmm0, %xmm0
    0000015e: 	movups	%xmm0, 0x20(%rax)
    00000162: 	testq	%rdx, %rdx
    00000165: 	jne	.Ltmp2809 # Offset: 357
    00000167: 	jmp	.Ltmp2810 # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2812:
    00000170: 	movq	0x10(%rdx), %rax
    00000174: 	testq	%rax, %rax
    00000177: 	je	.Ltmp2811 # Offset: 375
.Ltmp2813:
    00000179: 	movq	%rax, %rdx
.Ltmp2809:
    0000017c: 	movsd	0x20(%rdx), %xmm0
    00000181: 	comisd	0x8(%rsp), %xmm0
    00000187: 	ja	.Ltmp2812 # Offset: 391
    00000189: 	movq	0x18(%rdx), %rax
    0000018d: 	testq	%rax, %rax
    00000190: 	jne	.Ltmp2813 # Offset: 400
.Ltmp2811:
    00000192: 	movl	$0x1, %edi
    00000197: 	cmpq	%rdx, %r12
    0000019a: 	je	.Ltmp2814 # Offset: 410
    0000019c: 	xorl	%edi, %edi
    0000019e: 	comisd	0x8(%rsp), %xmm0
    000001a4: 	seta	%dil
.Ltmp2814:
    000001a8: 	movq	%r12, %rcx
    000001ab: 	addq	$0x8, %rbp
    000001af: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 431
    000001b4: 	addq	$0x1, 0x28(%rbx)
    000001b9: 	cmpq	%rbp, %r13
    000001bc: 	jne	.Ltmp2815 # Offset: 444
.Ltmp2808:
    000001c2: 	movq	0x10(%rsp), %rax
    000001c7: 	movq	%rbx, (%rax)
    000001ca: 	addq	$0x8, %rax
    000001ce: 	movq	%rax, 0x10(%rsp)
    000001d3: 	cmpq	0x20(%rsp), %rax
    000001d8: 	jne	.Ltmp2816 # Offset: 472
    000001de: 	callq	clock@PLT # Offset: 478
    000001e3: 	movq	%r13, 0x8(%rsp)
    000001e8: 	movq	0x28(%rsp), %rbp
    000001ed: 	movq	%rax, start_time(%rip)
    000001f4: 	movq	0x20(%rsp), %r12
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp2817:
    00000200: 	movq	(%rbp), %rbx
    00000204: 	addq	$0x8, %rbp
    00000208: 	movq	0x10(%rbx), %rdi
    0000020c: 	leaq	0x8(%rbx), %r13
    00000210: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 528
    00000215: 	movq	$0x0, 0x10(%rbx)
    0000021d: 	movq	%r13, 0x18(%rbx)
    00000221: 	movq	%r13, 0x20(%rbx)
    00000225: 	movq	$0x0, 0x28(%rbx)
    0000022d: 	cmpq	%rbp, %r12
    00000230: 	jne	.Ltmp2817 # Offset: 560
    00000232: 	movq	0x8(%rsp), %r13
    00000237: 	callq	clock@PLT # Offset: 567
    0000023c: 	pxor	%xmm0, %xmm0
    00000240: 	movq	0x20(%rsp), %r12
    00000245: 	movq	%rax, end_time(%rip)
    0000024c: 	subq	start_time(%rip), %rax
    00000253: 	cvtsi2sd	%rax, %xmm0
    00000258: 	divsd	DATAat0x53788(%rip), %xmm0
    00000260: 	addsd	0x48(%rsp), %xmm0
    00000266: 	movsd	%xmm0, 0x48(%rsp)
    0000026c: 	nopl	(%rax) # Size: 4
.Ltmp2821:
    00000270: 	movq	(%r14), %rbp
    00000273: 	testq	%rbp, %rbp
    00000276: 	je	.Ltmp2818 # Offset: 630
    00000278: 	movq	0x10(%rbp), %rbx
    0000027c: 	testq	%rbx, %rbx
    0000027f: 	je	.Ltmp2819 # Offset: 639
.Ltmp2820:
    00000281: 	movq	0x18(%rbx), %rdi
    00000285: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 645
    0000028a: 	movq	%rbx, %rdi
    0000028d: 	movq	0x10(%rbx), %rbx
    00000291: 	movl	$0x30, %esi
    00000296: 	callq	_ZdlPvm@PLT # Offset: 662
    0000029b: 	testq	%rbx, %rbx
    0000029e: 	jne	.Ltmp2820 # Offset: 670
.Ltmp2819:
    000002a0: 	movl	$0x30, %esi
    000002a5: 	movq	%rbp, %rdi
    000002a8: 	callq	_ZdlPvm@PLT # Offset: 680
.Ltmp2818:
    000002ad: 	movq	$0x0, (%r14)
    000002b4: 	addq	$0x8, %r14
    000002b8: 	cmpq	%r14, %r12
    000002bb: 	jne	.Ltmp2821 # Offset: 699
    000002bd: 	addl	%r15d, 0x30(%rsp)
    000002c2: 	movl	iterations(%rip), %eax
    000002c8: 	movl	0x30(%rsp), %ecx
    000002cc: 	cmpl	%ecx, %eax
    000002ce: 	jg	.Ltmp2822 # Offset: 718
.Ltmp2828:
    000002d4: 	movq	0x40(%rsp), %rdi
    000002d9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 729
    000002de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002ec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002f3: 	je	.Ltmp2823 # Offset: 755
.Ltmp2827:
    000002f9: 	movq	-0x20(%rax), %rdi
    000002fd: 	movsd	0x48(%rsp), %xmm0
    00000303: 	callq	_Z13record_resultdPKc # Offset: 771
    00000308: 	cmpq	$0x0, 0x28(%rsp)
    0000030e: 	je	.Ltmp2824 # Offset: 782
    00000310: 	movq	0x68(%rsp), %rax
    00000315: 	subq	%fs:0x28, %rax
    0000031e: 	jne	.Ltmp2825 # Offset: 798
    00000324: 	movq	0x60(%rsp), %rsi
    00000329: 	movq	0x28(%rsp), %rdi
    0000032e: 	addq	$0x78, %rsp
    00000332: 	popq	%rbx
    00000333: 	popq	%rbp
    00000334: 	subq	%rdi, %rsi
    00000337: 	popq	%r12
    00000339: 	popq	%r13
    0000033b: 	popq	%r14
    0000033d: 	popq	%r15
    0000033f: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 831
    00000344: 	nopl	(%rax) # Size: 4
.Ltmp2810:
    00000348: 	movq	%r12, %rdx
    0000034b: 	movl	$0x1, %edi
    00000350: 	jmp	.Ltmp2814 # Offset: 848
.Ltmp2805:
    00000355: 	movl	$0x3e8, %r15d
.Ltmp2806:
    0000035b: 	movq	$0x0, 0x60(%rsp)
    00000364: 	pxor	%xmm0, %xmm0
    00000368: 	movaps	%xmm0, 0x50(%rsp)
    0000036d: 	jmp	.Ltmp2826 # Offset: 877
.Ltmp2824:
    00000372: 	movq	0x68(%rsp), %rax
    00000377: 	subq	%fs:0x28, %rax
    00000380: 	jne	.Ltmp2825 # Offset: 896
    00000382: 	addq	$0x78, %rsp
    00000386: 	popq	%rbx
    00000387: 	popq	%rbp
    00000388: 	popq	%r12
    0000038a: 	popq	%r13
    0000038c: 	popq	%r14
    0000038e: 	popq	%r15
    00000390: 	retq # Offset: 912
.Ltmp2823:
    00000391: 	movq	-0x8(%rdx), %rax
    00000395: 	addq	$0x200, %rax
    0000039b: 	jmp	.Ltmp2827 # Offset: 923
.Ltmp2807:
    000003a0: 	pxor	%xmm6, %xmm6
    000003a4: 	movsd	%xmm6, 0x48(%rsp)
    000003aa: 	jmp	.Ltmp2828 # Offset: 938
.Ltmp2825:
    000003af: 	callq	__stack_chk_fail@PLT # Offset: 943
    000003b4: 	endbr64
    000003b8: 	movq	%rax, %rbp
    000003bb: 	movq	0x50(%rsp), %rdi
    000003c0: 	movq	0x60(%rsp), %rsi
    000003c5: 	subq	%rdi, %rsi
    000003c8: 	testq	%rdi, %rdi
    000003cb: 	je	.Ltmp2829 # Offset: 971
    000003cd: 	callq	_ZdlPvm@PLT # Offset: 973
.Ltmp2829:
    000003d2: 	movq	%rbp, %rdi
    000003d5: 	callq	_Unwind_Resume@PLT # Offset: 981
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_eraseall_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_insert_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEELb1EEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 202
  State       : disassembled
  Address     : 0x1d9f0
  Size        : 0x520
  MaxSize     : 0x520
  Offset      : 0x1d9f0
  Section     : .text
  Orc Section : .local.text._Z20test_insert_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEELb1EEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0201:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rsi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	xorl	%ebx, %ebx
    00000016: 	subq	$0x88, %rsp
    0000001d: 	movq	%rdx, 0x28(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x78(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	movl	iterations(%rip), %eax
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp2830 # Offset: 70
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2839:
    00000050: 	movl	$0x30, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movsd	(%r13), %xmm1
    00000060: 	movl	$0x30, %edi
    00000065: 	leaq	0x8(%rax), %r15
    00000069: 	movl	$0x0, 0x8(%rax)
    00000070: 	movq	%rax, %r12
    00000073: 	movq	$0x0, 0x10(%rax)
    0000007b: 	movapd	%xmm1, %xmm0
    0000007f: 	movq	%r15, 0x18(%rax)
    00000083: 	unpcklpd	%xmm0, %xmm0
    00000087: 	movq	%r15, 0x20(%rax)
    0000008b: 	movq	$0x0, 0x28(%rax)
    00000093: 	movsd	%xmm1, 0x10(%rsp)
    00000099: 	movaps	%xmm0, (%rsp)
    0000009d: 	callq	_Znwm@PLT # Offset: 157
    000000a2: 	movq	0x10(%r12), %rdx
    000000a7: 	movapd	(%rsp), %xmm0
    000000ac: 	movsd	0x10(%rsp), %xmm1
    000000b2: 	movq	%rax, %rsi
    000000b5: 	testq	%rdx, %rdx
    000000b8: 	movups	%xmm0, 0x20(%rax)
    000000bc: 	jne	.Ltmp2831 # Offset: 188
    000000be: 	jmp	.Ltmp2832 # Offset: 190
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2834:
    000000c8: 	movq	0x10(%rdx), %rcx
    000000cc: 	testq	%rcx, %rcx
    000000cf: 	je	.Ltmp2833 # Offset: 207
.Ltmp2835:
    000000d1: 	movq	%rcx, %rdx
.Ltmp2831:
    000000d4: 	movsd	0x20(%rdx), %xmm0
    000000d9: 	comisd	%xmm1, %xmm0
    000000dd: 	ja	.Ltmp2834 # Offset: 221
    000000df: 	movq	0x18(%rdx), %rcx
    000000e3: 	testq	%rcx, %rcx
    000000e6: 	jne	.Ltmp2835 # Offset: 230
.Ltmp2833:
    000000e8: 	cmpq	%rdx, %r15
    000000eb: 	je	.Ltmp2836 # Offset: 235
    000000f1: 	xorl	%edi, %edi
    000000f3: 	comisd	%xmm1, %xmm0
    000000f7: 	seta	%dil
.Ltmp2860:
    000000fb: 	movq	%r15, %rcx
    000000fe: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 254
    00000103: 	movq	0x10(%r12), %rbp
    00000108: 	addq	$0x1, 0x28(%r12)
    0000010e: 	testq	%rbp, %rbp
    00000111: 	je	.Ltmp2837 # Offset: 273
.Ltmp2838:
    00000113: 	movq	0x18(%rbp), %rdi
    00000117: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 279
    0000011c: 	movq	%rbp, %rdi
    0000011f: 	movq	0x10(%rbp), %rbp
    00000123: 	movl	$0x30, %esi
    00000128: 	callq	_ZdlPvm@PLT # Offset: 296
    0000012d: 	testq	%rbp, %rbp
    00000130: 	jne	.Ltmp2838 # Offset: 304
.Ltmp2837:
    00000132: 	movl	$0x30, %esi
    00000137: 	movq	%r12, %rdi
    0000013a: 	addl	$0x1, %ebx
    0000013d: 	callq	_ZdlPvm@PLT # Offset: 317
    00000142: 	cmpl	%ebx, iterations(%rip)
    00000148: 	jg	.Ltmp2839 # Offset: 328
.Ltmp2830:
    0000014e: 	callq	clock@PLT # Offset: 334
    00000153: 	movq	%r14, %rcx
    00000156: 	xorl	%edx, %edx
    00000158: 	movq	%rax, 0x48(%rsp)
    0000015d: 	subq	%r13, %rcx
    00000160: 	movq	%rax, end_time(%rip)
    00000167: 	movq	start_time(%rip), %rax
    0000016e: 	movq	%rax, 0x50(%rsp)
    00000173: 	movabsq	$0x500000000, %rax
    0000017d: 	divq	%rcx
    00000180: 	movq	%rax, 0x10(%rsp)
    00000185: 	cmpq	$0x3e8, %rax
    0000018b: 	ja	.Ltmp2840 # Offset: 395
    00000191: 	cmpq	$0x3, 0x10(%rsp)
    00000197: 	ja	.Ltmp2841 # Offset: 407
    0000019d: 	movq	$0x0, 0x70(%rsp)
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	movq	$0x4, 0x10(%rsp)
    000001b3: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp2861:
    000001b8: 	movq	0x10(%rsp), %r15
    000001bd: 	leaq	0x60(%rsp), %rdi
    000001c2: 	movq	%r15, %rsi
    000001c5: 	callq	_ZNSt6vectorIPSt8multimapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 453
    000001ca: 	movq	0x60(%rsp), %rbx
    000001cf: 	movl	iterations(%rip), %eax
    000001d5: 	movq	%rbx, 0x30(%rsp)
    000001da: 	testl	%eax, %eax
    000001dc: 	jle	.Ltmp2842 # Offset: 476
    000001e2: 	addq	$0x8, %rbx
    000001e6: 	movl	%r15d, 0x3c(%rsp)
    000001eb: 	pxor	%xmm5, %xmm5
    000001ef: 	movl	$0x0, 0x38(%rsp)
    000001f7: 	movq	%rbx, 0x40(%rsp)
    000001fc: 	movsd	%xmm5, 0x58(%rsp)
.Ltmp2856:
    00000202: 	movslq	0x38(%rsp), %rdx
    00000207: 	movslq	%eax, %rcx
    0000020a: 	movq	%rdx, %rbx
    0000020d: 	addq	0x10(%rsp), %rdx
    00000212: 	subl	%ebx, %eax
    00000214: 	cmpq	%rcx, %rdx
    00000217: 	cmovbl	0x3c(%rsp), %eax
    0000021c: 	movl	%eax, %ebx
    0000021e: 	callq	clock@PLT # Offset: 542
    00000223: 	movq	0x30(%rsp), %rsi
    00000228: 	movq	%rax, start_time(%rip)
    0000022f: 	leal	-0x1(%rbx), %eax
    00000232: 	movq	0x40(%rsp), %rbx
    00000237: 	movq	%rsi, 0x18(%rsp)
    0000023c: 	movq	%rsi, %r15
    0000023f: 	leaq	(%rbx,%rax,8), %rax
    00000243: 	movq	%rax, 0x20(%rsp)
.Ltmp2851:
    00000248: 	movl	$0x30, %edi
    0000024d: 	callq	_Znwm@PLT # Offset: 589
    00000252: 	leaq	0x8(%rax), %r12
    00000256: 	movq	%rax, %rbx
    00000259: 	movq	%r13, %rbp
    0000025c: 	movl	$0x0, 0x8(%rax)
    00000263: 	movq	$0x0, 0x10(%rax)
    0000026b: 	movq	%r12, 0x18(%rax)
    0000026f: 	movq	%r12, 0x20(%rax)
    00000273: 	movq	$0x0, 0x28(%rax)
    0000027b: 	cmpq	%r13, %r14
    0000027e: 	je	.Ltmp2843 # Offset: 638
    00000284: 	nopl	(%rax) # Size: 4
.Ltmp2850:
    00000288: 	movsd	(%rbp), %xmm3
    0000028d: 	movl	$0x30, %edi
    00000292: 	movsd	%xmm3, (%rsp)
    00000297: 	callq	_Znwm@PLT # Offset: 663
    0000029c: 	movsd	(%rsp), %xmm0
    000002a1: 	movq	0x10(%rbx), %rdx
    000002a5: 	movq	%rax, %rsi
    000002a8: 	unpcklpd	%xmm0, %xmm0
    000002ac: 	movups	%xmm0, 0x20(%rax)
    000002b0: 	testq	%rdx, %rdx
    000002b3: 	jne	.Ltmp2844 # Offset: 691
    000002b5: 	jmp	.Ltmp2845 # Offset: 693
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2847:
    000002c0: 	movq	0x10(%rdx), %rax
    000002c4: 	testq	%rax, %rax
    000002c7: 	je	.Ltmp2846 # Offset: 711
.Ltmp2848:
    000002c9: 	movq	%rax, %rdx
.Ltmp2844:
    000002cc: 	movsd	0x20(%rdx), %xmm0
    000002d1: 	comisd	(%rsp), %xmm0
    000002d6: 	ja	.Ltmp2847 # Offset: 726
    000002d8: 	movq	0x18(%rdx), %rax
    000002dc: 	testq	%rax, %rax
    000002df: 	jne	.Ltmp2848 # Offset: 735
.Ltmp2846:
    000002e1: 	movl	$0x1, %edi
    000002e6: 	cmpq	%rdx, %r12
    000002e9: 	je	.Ltmp2849 # Offset: 745
    000002eb: 	xorl	%edi, %edi
    000002ed: 	comisd	(%rsp), %xmm0
    000002f2: 	seta	%dil
.Ltmp2849:
    000002f6: 	movq	%r12, %rcx
    000002f9: 	addq	$0x8, %rbp
    000002fd: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 765
    00000302: 	addq	$0x1, 0x28(%rbx)
    00000307: 	cmpq	%rbp, %r14
    0000030a: 	jne	.Ltmp2850 # Offset: 778
.Ltmp2843:
    00000310: 	movq	0x18(%rsp), %rax
    00000315: 	movq	%rbx, (%rax)
    00000318: 	addq	$0x8, %rax
    0000031c: 	movq	%rax, 0x18(%rsp)
    00000321: 	cmpq	0x20(%rsp), %rax
    00000326: 	jne	.Ltmp2851 # Offset: 806
    0000032c: 	callq	clock@PLT # Offset: 812
    00000331: 	pxor	%xmm0, %xmm0
    00000335: 	movq	0x20(%rsp), %r12
    0000033a: 	movq	%rax, end_time(%rip)
    00000341: 	subq	start_time(%rip), %rax
    00000348: 	cvtsi2sd	%rax, %xmm0
    0000034d: 	divsd	DATAat0x53788(%rip), %xmm0
    00000355: 	addsd	0x58(%rsp), %xmm0
    0000035b: 	movsd	%xmm0, 0x58(%rsp)
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp2855:
    00000368: 	movq	(%r15), %rbp
    0000036b: 	testq	%rbp, %rbp
    0000036e: 	je	.Ltmp2852 # Offset: 878
    00000370: 	movq	0x10(%rbp), %rbx
    00000374: 	testq	%rbx, %rbx
    00000377: 	je	.Ltmp2853 # Offset: 887
.Ltmp2854:
    00000379: 	movq	0x18(%rbx), %rdi
    0000037d: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 893
    00000382: 	movq	%rbx, %rdi
    00000385: 	movq	0x10(%rbx), %rbx
    00000389: 	movl	$0x30, %esi
    0000038e: 	callq	_ZdlPvm@PLT # Offset: 910
    00000393: 	testq	%rbx, %rbx
    00000396: 	jne	.Ltmp2854 # Offset: 918
.Ltmp2853:
    00000398: 	movl	$0x30, %esi
    0000039d: 	movq	%rbp, %rdi
    000003a0: 	callq	_ZdlPvm@PLT # Offset: 928
.Ltmp2852:
    000003a5: 	movq	$0x0, (%r15)
    000003ac: 	addq	$0x8, %r15
    000003b0: 	cmpq	%r12, %r15
    000003b3: 	jne	.Ltmp2855 # Offset: 947
    000003b5: 	movl	0x10(%rsp), %ebx
    000003b9: 	movl	iterations(%rip), %eax
    000003bf: 	addl	%ebx, 0x38(%rsp)
    000003c3: 	movl	0x38(%rsp), %ebx
    000003c7: 	cmpl	%ebx, %eax
    000003c9: 	jg	.Ltmp2856 # Offset: 969
.Ltmp2862:
    000003cf: 	movq	0x28(%rsp), %rdi
    000003d4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 980
    000003d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003e0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003e7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003ee: 	je	.Ltmp2857 # Offset: 1006
.Ltmp2863:
    000003f4: 	movsd	0x58(%rsp), %xmm0
    000003fa: 	movq	-0x20(%rax), %rdi
    000003fe: 	pxor	%xmm1, %xmm1
    00000402: 	movq	0x48(%rsp), %rax
    00000407: 	subq	0x50(%rsp), %rax
    0000040c: 	cvtsi2sd	%rax, %xmm1
    00000411: 	divsd	DATAat0x53788(%rip), %xmm1
    00000419: 	subsd	%xmm1, %xmm0
    0000041d: 	callq	_Z13record_resultdPKc # Offset: 1053
    00000422: 	cmpq	$0x0, 0x30(%rsp)
    00000428: 	je	.Ltmp2858 # Offset: 1064
    0000042e: 	movq	0x78(%rsp), %rax
    00000433: 	subq	%fs:0x28, %rax
    0000043c: 	jne	.Ltmp2859 # Offset: 1084
    00000442: 	movq	0x70(%rsp), %rsi
    00000447: 	movq	0x30(%rsp), %rdi
    0000044c: 	addq	$0x88, %rsp
    00000453: 	popq	%rbx
    00000454: 	popq	%rbp
    00000455: 	subq	%rdi, %rsi
    00000458: 	popq	%r12
    0000045a: 	popq	%r13
    0000045c: 	popq	%r14
    0000045e: 	popq	%r15
    00000460: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1120
    00000465: 	nopl	(%rax) # Size: 3
.Ltmp2836:
    00000468: 	movl	$0x1, %edi
    0000046d: 	jmp	.Ltmp2860 # Offset: 1133
    00000472: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2832:
    00000478: 	movq	%r15, %rdx
    0000047b: 	movl	$0x1, %edi
    00000480: 	jmp	.Ltmp2860 # Offset: 1152
.Ltmp2840:
    00000485: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp2841:
    0000048e: 	movq	$0x0, 0x70(%rsp)
    00000497: 	pxor	%xmm0, %xmm0
    0000049b: 	movaps	%xmm0, 0x60(%rsp)
    000004a0: 	jmp	.Ltmp2861 # Offset: 1184
    000004a5: 	nopl	(%rax) # Size: 3
.Ltmp2845:
    000004a8: 	movq	%r12, %rdx
    000004ab: 	movl	$0x1, %edi
    000004b0: 	jmp	.Ltmp2849 # Offset: 1200
.Ltmp2858:
    000004b5: 	movq	0x78(%rsp), %rax
    000004ba: 	subq	%fs:0x28, %rax
    000004c3: 	jne	.Ltmp2859 # Offset: 1219
    000004c5: 	addq	$0x88, %rsp
    000004cc: 	popq	%rbx
    000004cd: 	popq	%rbp
    000004ce: 	popq	%r12
    000004d0: 	popq	%r13
    000004d2: 	popq	%r14
    000004d4: 	popq	%r15
    000004d6: 	retq # Offset: 1238
.Ltmp2842:
    000004d7: 	pxor	%xmm7, %xmm7
    000004db: 	movsd	%xmm7, 0x58(%rsp)
    000004e1: 	jmp	.Ltmp2862 # Offset: 1249
.Ltmp2857:
    000004e6: 	movq	-0x8(%rdx), %rax
    000004ea: 	addq	$0x200, %rax
    000004f0: 	jmp	.Ltmp2863 # Offset: 1264
.Ltmp2859:
    000004f5: 	callq	__stack_chk_fail@PLT # Offset: 1269
    000004fa: 	endbr64
    000004fe: 	movq	%rax, %rbp
    00000501: 	movq	0x60(%rsp), %rdi
    00000506: 	movq	0x70(%rsp), %rsi
    0000050b: 	subq	%rdi, %rsi
    0000050e: 	testq	%rdi, %rdi
    00000511: 	je	.Ltmp2864 # Offset: 1297
    00000513: 	callq	_ZdlPvm@PLT # Offset: 1299
.Ltmp2864:
    00000518: 	movq	%rbp, %rdi
    0000051b: 	callq	_Unwind_Resume@PLT # Offset: 1307
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_insert_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEELb1EEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIPSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm" after disassembly {
  Number      : 203
  State       : disassembled
  Address     : 0x1df10
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x1df10
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0202:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp2865 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp2866 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp2867 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp2868 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp2869 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp2876:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp2870 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp2870:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp2871 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp2872 # Offset: 200
.Ltmp2874:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp2866:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp2873 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp2873:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2865:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2871:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp2875:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp2874 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2872:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp2875 # Offset: 392
.Ltmp2869:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp2877:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp2876 # Offset: 445
.Ltmp2868:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp2877 # Offset: 460
.Ltmp2867:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm"

Binary Function "_ZNSt6vectorIPSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm" after disassembly {
  Number      : 204
  State       : disassembled
  Address     : 0x1e0f0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x1e0f0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0203:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp2878 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp2879 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp2880 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp2881 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp2882 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp2889:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp2883 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp2883:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp2884 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp2885 # Offset: 200
.Ltmp2887:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp2879:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp2886 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp2886:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2878:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2884:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp2888:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp2887 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2885:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp2888 # Offset: 392
.Ltmp2882:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp2890:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp2889 # Offset: 445
.Ltmp2881:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp2890 # Offset: 460
.Ltmp2880:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm"

Binary Function "_Z15test_erase_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 205
  State       : disassembled
  Address     : 0x1e2d0
  Size        : 0x6a2
  MaxSize     : 0x6b0
  Offset      : 0x1e2d0
  Section     : .text
  Orc Section : .local.text._Z15test_erase_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0204:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xc8, %rsp
    00000015: 	movq	%rdx, 0x50(%rsp)
    0000001a: 	xorl	%edx, %edx
    0000001c: 	movq	%rcx, 0x28(%rsp)
    00000021: 	movq	%rsi, %rcx
    00000024: 	movq	%rdi, 0x48(%rsp)
    00000029: 	subq	%rdi, %rcx
    0000002c: 	movq	%rsi, 0x20(%rsp)
    00000031: 	movq	%r8, 0x88(%rsp)
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0xb8(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	movabsq	$0x500000000, %rax
    00000056: 	divq	%rcx
    00000059: 	movq	%rax, 0x58(%rsp)
    0000005e: 	cmpq	$0x3e8, %rax
    00000064: 	ja	.Ltmp2891 # Offset: 100
    0000006a: 	cmpq	$0x3, %rax
    0000006e: 	ja	.Ltmp2892 # Offset: 110
    00000074: 	movq	$0x0, 0xb0(%rsp)
    00000080: 	pxor	%xmm0, %xmm0
    00000084: 	movq	$0x4, 0x58(%rsp)
    0000008d: 	movaps	%xmm0, 0xa0(%rsp)
.Ltmp2934:
    00000095: 	movq	0x58(%rsp), %rbx
    0000009a: 	leaq	0xa0(%rsp), %rdi
    000000a2: 	movq	%rbx, %rsi
    000000a5: 	callq	_ZNSt6vectorIPSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 165
    000000aa: 	movq	0xa0(%rsp), %rcx
    000000b2: 	movl	iterations(%rip), %eax
    000000b8: 	movq	%rcx, 0x68(%rsp)
    000000bd: 	testl	%eax, %eax
    000000bf: 	jle	.Ltmp2893 # Offset: 191
    000000c5: 	addq	$0x8, %rcx
    000000c9: 	movl	%ebx, 0x7c(%rsp)
    000000cd: 	movq	$0x0, 0x60(%rsp)
    000000d6: 	movl	$0x0, 0x78(%rsp)
    000000de: 	movq	%rcx, 0x80(%rsp)
.Ltmp2913:
    000000e6: 	movslq	0x78(%rsp), %rdx
    000000eb: 	movslq	%eax, %rcx
    000000ee: 	movq	0x68(%rsp), %r12
    000000f3: 	movq	%rdx, %rsi
    000000f6: 	addq	0x58(%rsp), %rdx
    000000fb: 	movq	%r12, 0x70(%rsp)
    00000100: 	subl	%esi, %eax
    00000102: 	cmpq	%rcx, %rdx
    00000105: 	cmovbl	0x7c(%rsp), %eax
    0000010a: 	movq	0x80(%rsp), %rcx
    00000112: 	subl	$0x1, %eax
    00000115: 	leaq	(%rcx,%rax,8), %rax
    00000119: 	movq	%rax, 0x40(%rsp)
    0000011e: 	nop # Size: 2
.Ltmp2896:
    00000120: 	movl	$0x38, %edi
    00000125: 	callq	_Znwm@PLT # Offset: 293
    0000012a: 	movq	%rax, %rbp
    0000012d: 	leaq	0x30(%rax), %rax
    00000131: 	movq	%rax, (%rbp)
    00000135: 	movq	0x48(%rsp), %rax
    0000013a: 	movq	$0x1, 0x8(%rbp)
    00000142: 	movq	$0x0, 0x10(%rbp)
    0000014a: 	movq	%rax, %rbx
    0000014d: 	movq	$0x0, 0x18(%rbp)
    00000155: 	movl	$0x3f800000, 0x20(%rbp)
    0000015c: 	movq	$0x0, 0x28(%rbp)
    00000164: 	movq	$0x0, 0x30(%rbp)
    0000016c: 	cmpq	%rax, 0x20(%rsp)
    00000171: 	je	.Ltmp2894 # Offset: 369
    00000173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2895:
    00000178: 	movq	%rbx, %rdx
    0000017b: 	xorl	%esi, %esi
    0000017d: 	movq	%rbp, %rdi
    00000180: 	addq	$0x8, %rbx
    00000184: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0/1" # Offset: 388
    00000189: 	cmpq	%rbx, 0x20(%rsp)
    0000018e: 	jne	.Ltmp2895 # Offset: 398
.Ltmp2894:
    00000190: 	movq	%rbp, (%r12)
    00000194: 	addq	$0x8, %r12
    00000198: 	cmpq	%r12, 0x40(%rsp)
    0000019d: 	jne	.Ltmp2896 # Offset: 413
    0000019f: 	callq	clock@PLT # Offset: 415
    000001a4: 	movq	0x28(%rsp), %rcx
    000001a9: 	movq	%rax, start_time(%rip)
    000001b0: 	cmpq	%rcx, 0x50(%rsp)
    000001b5: 	je	.Ltmp2897 # Offset: 437
    000001bb: 	movq	0x68(%rsp), %rax
    000001c0: 	movq	%rax, 0x30(%rsp)
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp2907:
    000001c8: 	movq	0x30(%rsp), %rax
    000001cd: 	movq	0x50(%rsp), %r15
    000001d2: 	movq	(%rax), %r14
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp2906:
    000001d8: 	movsd	(%r15), %xmm0
    000001dd: 	pxor	%xmm2, %xmm2
    000001e1: 	addq	$0x8, %r15
    000001e5: 	movsd	%xmm0, 0x98(%rsp)
    000001ee: 	ucomisd	%xmm2, %xmm0
    000001f2: 	jp	.Ltmp2898 # Offset: 498
    000001f8: 	movl	$0x0, %eax
    000001fd: 	jne	.Ltmp2898 # Offset: 509
.Ltmp2928:
    00000203: 	xorl	%edx, %edx
    00000205: 	divq	0x8(%r14)
    00000209: 	leaq	(,%rdx,8), %rax
    00000211: 	movq	%rdx, 0x8(%rsp)
    00000216: 	movq	%rax, 0x10(%rsp)
    0000021b: 	movq	(%r14), %rax
    0000021e: 	movq	(%rax,%rdx,8), %r12
    00000222: 	testq	%r12, %r12
    00000225: 	je	.Ltmp2899 # Offset: 549
    00000227: 	movq	(%r12), %r8
    0000022b: 	movsd	0x8(%r8), %xmm0
    00000231: 	ucomisd	-0x8(%r15), %xmm0
    00000237: 	jp	.Ltmp2900 # Offset: 567
    00000239: 	je	.Ltmp2901 # Offset: 569
.Ltmp2900:
    0000023f: 	movq	%r8, %rbx
    00000242: 	movq	(%rbx), %rax
    00000245: 	testq	%rax, %rax
    00000248: 	je	.Ltmp2899 # Offset: 584
.Ltmp2905:
    0000024a: 	movsd	0x8(%rax), %xmm0
    0000024f: 	pxor	%xmm3, %xmm3
    00000253: 	movq	0x8(%r14), %rbp
    00000257: 	movsd	%xmm0, 0x98(%rsp)
    00000260: 	ucomisd	%xmm3, %xmm0
    00000264: 	jp	.Ltmp2902 # Offset: 612
    0000026a: 	movl	$0x0, %edx
    0000026f: 	jne	.Ltmp2902 # Offset: 623
.Ltmp2929:
    00000275: 	cmpq	%rdx, 0x8(%rsp)
    0000027a: 	jne	.Ltmp2899 # Offset: 634
    0000027c: 	movq	(%rbx), %rax
    0000027f: 	movsd	0x8(%rax), %xmm0
    00000284: 	ucomisd	-0x8(%r15), %xmm0
    0000028a: 	jp	.Ltmp2903 # Offset: 650
    0000028c: 	je	.Ltmp2904 # Offset: 652
.Ltmp2903:
    00000292: 	movq	%rax, %rbx
    00000295: 	movq	(%rbx), %rax
    00000298: 	testq	%rax, %rax
    0000029b: 	jne	.Ltmp2905 # Offset: 667
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp2899:
    000002a0: 	cmpq	%r15, 0x28(%rsp)
    000002a5: 	jne	.Ltmp2906 # Offset: 677
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2925:
    000002b0: 	addq	$0x8, 0x30(%rsp)
    000002b6: 	movq	0x30(%rsp), %rax
    000002bb: 	cmpq	%rax, 0x40(%rsp)
    000002c0: 	jne	.Ltmp2907 # Offset: 704
.Ltmp2897:
    000002c6: 	callq	clock@PLT # Offset: 710
    000002cb: 	pxor	%xmm0, %xmm0
    000002cf: 	movq	0x40(%rsp), %r13
    000002d4: 	movq	0x70(%rsp), %r12
    000002d9: 	movq	%rax, end_time(%rip)
    000002e0: 	subq	start_time(%rip), %rax
    000002e7: 	cvtsi2sd	%rax, %xmm0
    000002ec: 	divsd	DATAat0x53788(%rip), %xmm0
    000002f4: 	addsd	0x60(%rsp), %xmm0
    000002fa: 	movsd	%xmm0, 0x60(%rsp)
.Ltmp2912:
    00000300: 	movq	(%r12), %rbp
    00000304: 	testq	%rbp, %rbp
    00000307: 	je	.Ltmp2908 # Offset: 775
    00000309: 	movq	0x10(%rbp), %rbx
    0000030d: 	testq	%rbx, %rbx
    00000310: 	je	.Ltmp2909 # Offset: 784
    00000312: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2910:
    00000318: 	movq	%rbx, %rdi
    0000031b: 	movq	(%rbx), %rbx
    0000031e: 	movl	$0x10, %esi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
    00000328: 	testq	%rbx, %rbx
    0000032b: 	jne	.Ltmp2910 # Offset: 811
.Ltmp2909:
    0000032d: 	movq	0x8(%rbp), %rax
    00000331: 	movq	(%rbp), %rdi
    00000335: 	xorl	%esi, %esi
    00000337: 	leaq	(,%rax,8), %rdx
    0000033f: 	callq	memset@PLT # Offset: 831
    00000344: 	movq	(%rbp), %rdi
    00000348: 	leaq	0x30(%rbp), %rax
    0000034c: 	movq	$0x0, 0x18(%rbp)
    00000354: 	movq	$0x0, 0x10(%rbp)
    0000035c: 	movq	0x8(%rbp), %rsi
    00000360: 	cmpq	%rax, %rdi
    00000363: 	je	.Ltmp2911 # Offset: 867
    00000365: 	shlq	$0x3, %rsi
    00000369: 	callq	_ZdlPvm@PLT # Offset: 873
.Ltmp2911:
    0000036e: 	movl	$0x38, %esi
    00000373: 	movq	%rbp, %rdi
    00000376: 	callq	_ZdlPvm@PLT # Offset: 886
.Ltmp2908:
    0000037b: 	movq	$0x0, (%r12)
    00000383: 	addq	$0x8, %r12
    00000387: 	cmpq	%r12, %r13
    0000038a: 	jne	.Ltmp2912 # Offset: 906
    00000390: 	movl	0x58(%rsp), %ecx
    00000394: 	movl	iterations(%rip), %eax
    0000039a: 	addl	%ecx, 0x78(%rsp)
    0000039e: 	movl	0x78(%rsp), %ecx
    000003a2: 	cmpl	%ecx, %eax
    000003a4: 	jg	.Ltmp2913 # Offset: 932
.Ltmp2936:
    000003aa: 	movq	0x88(%rsp), %rdi
    000003b2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 946
    000003b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003be: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003c5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003cc: 	je	.Ltmp2914 # Offset: 972
.Ltmp2935:
    000003d2: 	movq	-0x20(%rax), %rdi
    000003d6: 	movsd	0x60(%rsp), %xmm0
    000003dc: 	callq	_Z13record_resultdPKc # Offset: 988
    000003e1: 	cmpq	$0x0, 0x68(%rsp)
    000003e7: 	je	.Ltmp2915 # Offset: 999
    000003ed: 	movq	0xb8(%rsp), %rax
    000003f5: 	subq	%fs:0x28, %rax
    000003fe: 	jne	.Ltmp2916 # Offset: 1022
    00000404: 	movq	0xb0(%rsp), %rsi
    0000040c: 	movq	0x68(%rsp), %rdi
    00000411: 	addq	$0xc8, %rsp
    00000418: 	popq	%rbx
    00000419: 	popq	%rbp
    0000041a: 	subq	%rdi, %rsi
    0000041d: 	popq	%r12
    0000041f: 	popq	%r13
    00000421: 	popq	%r14
    00000423: 	popq	%r15
    00000425: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1061
    0000042a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2904:
    00000430: 	movq	%rbx, %r12
    00000433: 	movq	%rax, %r8
.Ltmp2901:
    00000436: 	movq	(%r8), %rbp
    00000439: 	movq	%rbp, %r13
    0000043c: 	testq	%rbp, %rbp
    0000043f: 	je	.Ltmp2917 # Offset: 1087
.Ltmp2926:
    00000445: 	movsd	0x8(%rbp), %xmm1
    0000044a: 	ucomisd	%xmm0, %xmm1
    0000044e: 	jp	.Ltmp2918 # Offset: 1102
    00000450: 	je	.Ltmp2919 # Offset: 1104
.Ltmp2918:
    00000456: 	pxor	%xmm4, %xmm4
    0000045a: 	movq	0x8(%r14), %rbx
    0000045e: 	movsd	%xmm1, 0x98(%rsp)
    00000467: 	ucomisd	%xmm4, %xmm1
    0000046b: 	jp	.Ltmp2920 # Offset: 1131
    00000471: 	movq	$0x0, 0x18(%rsp)
    0000047a: 	jne	.Ltmp2920 # Offset: 1146
.Ltmp2927:
    00000480: 	xorl	%ebx, %ebx
    00000482: 	movq	%r8, %rdi
    00000485: 	jmp	.Ltmp2921 # Offset: 1157
    00000487: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2922:
    00000490: 	movq	%r13, %rdi
    00000493: 	movq	(%r13), %r13
.Ltmp2921:
    00000497: 	movl	$0x10, %esi
    0000049c: 	addq	$0x1, %rbx
    000004a0: 	callq	_ZdlPvm@PLT # Offset: 1184
    000004a5: 	cmpq	%rbp, %r13
    000004a8: 	jne	.Ltmp2922 # Offset: 1192
    000004aa: 	movq	(%r14), %rdx
    000004ad: 	movq	0x10(%rsp), %rax
    000004b2: 	subq	%rbx, 0x18(%r14)
    000004b6: 	addq	%rdx, %rax
    000004b9: 	cmpq	%r12, (%rax)
    000004bc: 	je	.Ltmp2923 # Offset: 1212
    000004c2: 	movq	0x18(%rsp), %rax
    000004c7: 	cmpq	%rax, 0x8(%rsp)
    000004cc: 	je	.Ltmp2924 # Offset: 1228
    000004ce: 	movq	%r12, (%rdx,%rax,8)
.Ltmp2924:
    000004d2: 	movq	%rbp, (%r12)
    000004d6: 	cmpq	%r15, 0x28(%rsp)
    000004db: 	jne	.Ltmp2906 # Offset: 1243
    000004e1: 	jmp	.Ltmp2925 # Offset: 1249
    000004e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2919:
    000004f0: 	movq	(%rbp), %rbp
    000004f4: 	testq	%rbp, %rbp
    000004f7: 	jne	.Ltmp2926 # Offset: 1271
    000004fd: 	movq	0x8(%rsp), %rax
    00000502: 	movq	%rax, 0x18(%rsp)
    00000507: 	jmp	.Ltmp2927 # Offset: 1287
    0000050c: 	nopl	(%rax) # Size: 4
.Ltmp2898:
    00000510: 	leaq	0x98(%rsp), %rdi
    00000518: 	movl	$0xc70f6907, %edx
    0000051d: 	movl	$0x8, %esi
    00000522: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1314
    00000527: 	jmp	.Ltmp2928 # Offset: 1319
    0000052c: 	nopl	(%rax) # Size: 4
.Ltmp2902:
    00000530: 	movl	$0xc70f6907, %edx
    00000535: 	leaq	0x98(%rsp), %rdi
    0000053d: 	movl	$0x8, %esi
    00000542: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1346
    00000547: 	xorl	%edx, %edx
    00000549: 	divq	%rbp
    0000054c: 	jmp	.Ltmp2929 # Offset: 1356
    00000551: 	nopl	(%rax) # Size: 7
.Ltmp2923:
    00000558: 	testq	%rbp, %rbp
    0000055b: 	je	.Ltmp2930 # Offset: 1371
    0000055d: 	movq	0x18(%rsp), %rsi
    00000562: 	cmpq	%rsi, 0x8(%rsp)
    00000567: 	je	.Ltmp2924 # Offset: 1383
.Ltmp2930:
    0000056d: 	movq	%r12, %rcx
    00000570: 	testq	%rbp, %rbp
    00000573: 	je	.Ltmp2931 # Offset: 1395
    00000575: 	movq	0x18(%rsp), %rcx
    0000057a: 	movq	%r12, (%rdx,%rcx,8)
    0000057e: 	movq	(%rax), %rcx
.Ltmp2931:
    00000581: 	leaq	0x10(%r14), %rdx
    00000585: 	cmpq	%rdx, %rcx
    00000588: 	je	.Ltmp2932 # Offset: 1416
.Ltmp2933:
    0000058a: 	movq	$0x0, (%rax)
    00000591: 	jmp	.Ltmp2924 # Offset: 1425
    00000596: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2920:
    000005a0: 	movl	$0xc70f6907, %edx
    000005a5: 	movl	$0x8, %esi
    000005aa: 	movq	%r8, 0x38(%rsp)
    000005af: 	leaq	0x98(%rsp), %rdi
    000005b7: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1463
    000005bc: 	xorl	%edx, %edx
    000005be: 	movq	0x38(%rsp), %r8
    000005c3: 	divq	%rbx
    000005c6: 	movq	(%r8), %r13
    000005c9: 	movq	%rdx, 0x18(%rsp)
    000005ce: 	jmp	.Ltmp2927 # Offset: 1486
.Ltmp2917:
    000005d3: 	movl	$0x10, %esi
    000005d8: 	movq	%r8, %rdi
    000005db: 	callq	_ZdlPvm@PLT # Offset: 1499
    000005e0: 	movq	0x10(%rsp), %rax
    000005e5: 	addq	(%r14), %rax
    000005e8: 	subq	$0x1, 0x18(%r14)
    000005ed: 	cmpq	(%rax), %r12
    000005f0: 	jne	.Ltmp2924 # Offset: 1520
    000005f6: 	movq	%r12, %rcx
    000005f9: 	leaq	0x10(%r14), %rdx
    000005fd: 	cmpq	%rdx, %rcx
    00000600: 	jne	.Ltmp2933 # Offset: 1536
.Ltmp2932:
    00000602: 	movq	%rbp, 0x10(%r14)
    00000606: 	jmp	.Ltmp2933 # Offset: 1542
.Ltmp2891:
    00000608: 	movq	$0x3e8, 0x58(%rsp)
.Ltmp2892:
    00000611: 	movq	$0x0, 0xb0(%rsp)
    0000061d: 	pxor	%xmm0, %xmm0
    00000621: 	movaps	%xmm0, 0xa0(%rsp)
    00000629: 	jmp	.Ltmp2934 # Offset: 1577
.Ltmp2915:
    0000062e: 	movq	0xb8(%rsp), %rax
    00000636: 	subq	%fs:0x28, %rax
    0000063f: 	jne	.Ltmp2916 # Offset: 1599
    00000641: 	addq	$0xc8, %rsp
    00000648: 	popq	%rbx
    00000649: 	popq	%rbp
    0000064a: 	popq	%r12
    0000064c: 	popq	%r13
    0000064e: 	popq	%r14
    00000650: 	popq	%r15
    00000652: 	retq # Offset: 1618
.Ltmp2914:
    00000653: 	movq	-0x8(%rdx), %rax
    00000657: 	addq	$0x200, %rax
    0000065d: 	jmp	.Ltmp2935 # Offset: 1629
.Ltmp2893:
    00000662: 	pxor	%xmm6, %xmm6
    00000666: 	movsd	%xmm6, 0x60(%rsp)
    0000066c: 	jmp	.Ltmp2936 # Offset: 1644
.Ltmp2916:
    00000671: 	callq	__stack_chk_fail@PLT # Offset: 1649
    00000676: 	endbr64
    0000067a: 	movq	%rax, %rbp
    0000067d: 	movq	0xa0(%rsp), %rdi
    00000685: 	movq	0xb0(%rsp), %rsi
    0000068d: 	subq	%rdi, %rsi
    00000690: 	testq	%rdi, %rdi
    00000693: 	je	.Ltmp2937 # Offset: 1683
    00000695: 	callq	_ZdlPvm@PLT # Offset: 1685
.Ltmp2937:
    0000069a: 	movq	%rbp, %rdi
    0000069d: 	callq	_Unwind_Resume@PLT # Offset: 1693
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_erase_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_delete_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 206
  State       : disassembled
  Address     : 0x1e980
  Size        : 0x35e
  MaxSize     : 0x360
  Offset      : 0x1e980
  Section     : .text
  Orc Section : .local.text._Z16test_delete_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0205:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x18(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp2938 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp2939 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x18(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp2953:
    0000007a: 	movq	0x18(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp2940 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x10(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2949:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x18(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2943:
    00000100: 	movl	$0x38, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbp
    0000010d: 	leaq	0x30(%rax), %rax
    00000111: 	movq	%rax, (%rbp)
    00000115: 	movq	0x8(%rsp), %rax
    0000011a: 	movq	$0x1, 0x8(%rbp)
    00000122: 	movq	$0x0, 0x10(%rbp)
    0000012a: 	movq	%rax, %rbx
    0000012d: 	movq	$0x0, 0x18(%rbp)
    00000135: 	movl	$0x3f800000, 0x20(%rbp)
    0000013c: 	movq	$0x0, 0x28(%rbp)
    00000144: 	movq	$0x0, 0x30(%rbp)
    0000014c: 	cmpq	%rax, %r12
    0000014f: 	je	.Ltmp2941 # Offset: 335
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp2942:
    00000158: 	movq	%rbx, %rdx
    0000015b: 	xorl	%esi, %esi
    0000015d: 	movq	%rbp, %rdi
    00000160: 	addq	$0x8, %rbx
    00000164: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0/1" # Offset: 356
    00000169: 	cmpq	%rbx, %r12
    0000016c: 	jne	.Ltmp2942 # Offset: 364
.Ltmp2941:
    0000016e: 	movq	%rbp, (%r14)
    00000171: 	addq	$0x8, %r14
    00000175: 	cmpq	%r14, %r15
    00000178: 	jne	.Ltmp2943 # Offset: 376
    0000017a: 	callq	clock@PLT # Offset: 378
    0000017f: 	movq	%rax, start_time(%rip)
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2948:
    00000190: 	movq	(%r13), %rbp
    00000194: 	testq	%rbp, %rbp
    00000197: 	je	.Ltmp2944 # Offset: 407
    00000199: 	movq	0x10(%rbp), %rbx
    0000019d: 	testq	%rbx, %rbx
    000001a0: 	je	.Ltmp2945 # Offset: 416
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2946:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	movq	(%rbx), %rbx
    000001ae: 	movl	$0x10, %esi
    000001b3: 	callq	_ZdlPvm@PLT # Offset: 435
    000001b8: 	testq	%rbx, %rbx
    000001bb: 	jne	.Ltmp2946 # Offset: 443
.Ltmp2945:
    000001bd: 	movq	0x8(%rbp), %rax
    000001c1: 	movq	(%rbp), %rdi
    000001c5: 	xorl	%esi, %esi
    000001c7: 	leaq	(,%rax,8), %rdx
    000001cf: 	callq	memset@PLT # Offset: 463
    000001d4: 	movq	(%rbp), %rdi
    000001d8: 	leaq	0x30(%rbp), %rax
    000001dc: 	movq	$0x0, 0x18(%rbp)
    000001e4: 	movq	$0x0, 0x10(%rbp)
    000001ec: 	movq	0x8(%rbp), %rsi
    000001f0: 	cmpq	%rax, %rdi
    000001f3: 	je	.Ltmp2947 # Offset: 499
    000001f5: 	shlq	$0x3, %rsi
    000001f9: 	callq	_ZdlPvm@PLT # Offset: 505
.Ltmp2947:
    000001fe: 	movl	$0x38, %esi
    00000203: 	movq	%rbp, %rdi
    00000206: 	callq	_ZdlPvm@PLT # Offset: 518
.Ltmp2944:
    0000020b: 	movq	$0x0, (%r13)
    00000213: 	addq	$0x8, %r13
    00000217: 	cmpq	%r13, %r15
    0000021a: 	jne	.Ltmp2948 # Offset: 538
    00000220: 	callq	clock@PLT # Offset: 544
    00000225: 	pxor	%xmm0, %xmm0
    00000229: 	movl	0x18(%rsp), %ecx
    0000022d: 	addl	%ecx, 0x28(%rsp)
    00000231: 	movq	%rax, end_time(%rip)
    00000238: 	subq	start_time(%rip), %rax
    0000023f: 	cvtsi2sd	%rax, %xmm0
    00000244: 	movl	0x28(%rsp), %ecx
    00000248: 	divsd	DATAat0x53788(%rip), %xmm0
    00000250: 	addsd	0x10(%rsp), %xmm0
    00000256: 	movl	iterations(%rip), %eax
    0000025c: 	movsd	%xmm0, 0x10(%rsp)
    00000262: 	cmpl	%ecx, %eax
    00000264: 	jg	.Ltmp2949 # Offset: 612
.Ltmp2955:
    0000026a: 	movq	0x38(%rsp), %rdi
    0000026f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 623
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000282: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000289: 	je	.Ltmp2950 # Offset: 649
.Ltmp2954:
    0000028f: 	movq	-0x20(%rax), %rdi
    00000293: 	movsd	0x10(%rsp), %xmm0
    00000299: 	callq	_Z13record_resultdPKc # Offset: 665
    0000029e: 	cmpq	$0x0, 0x20(%rsp)
    000002a4: 	je	.Ltmp2951 # Offset: 676
    000002a6: 	movq	0x58(%rsp), %rax
    000002ab: 	subq	%fs:0x28, %rax
    000002b4: 	jne	.Ltmp2952 # Offset: 692
    000002b6: 	movq	0x50(%rsp), %rsi
    000002bb: 	movq	0x20(%rsp), %rdi
    000002c0: 	addq	$0x68, %rsp
    000002c4: 	popq	%rbx
    000002c5: 	popq	%rbp
    000002c6: 	subq	%rdi, %rsi
    000002c9: 	popq	%r12
    000002cb: 	popq	%r13
    000002cd: 	popq	%r14
    000002cf: 	popq	%r15
    000002d1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 721
.Ltmp2951:
    000002d6: 	movq	0x58(%rsp), %rax
    000002db: 	subq	%fs:0x28, %rax
    000002e4: 	jne	.Ltmp2952 # Offset: 740
    000002e6: 	addq	$0x68, %rsp
    000002ea: 	popq	%rbx
    000002eb: 	popq	%rbp
    000002ec: 	popq	%r12
    000002ee: 	popq	%r13
    000002f0: 	popq	%r14
    000002f2: 	popq	%r15
    000002f4: 	retq # Offset: 756
.Ltmp2938:
    000002f5: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp2939:
    000002fe: 	movq	$0x0, 0x50(%rsp)
    00000307: 	pxor	%xmm0, %xmm0
    0000030b: 	movaps	%xmm0, 0x40(%rsp)
    00000310: 	jmp	.Ltmp2953 # Offset: 784
.Ltmp2950:
    00000315: 	movq	-0x8(%rdx), %rax
    00000319: 	addq	$0x200, %rax
    0000031f: 	jmp	.Ltmp2954 # Offset: 799
.Ltmp2940:
    00000324: 	pxor	%xmm3, %xmm3
    00000328: 	movsd	%xmm3, 0x10(%rsp)
    0000032e: 	jmp	.Ltmp2955 # Offset: 814
.Ltmp2952:
    00000333: 	callq	__stack_chk_fail@PLT # Offset: 819
    00000338: 	endbr64
    0000033c: 	movq	%rax, %rbp
    0000033f: 	movq	0x40(%rsp), %rdi
    00000344: 	movq	0x50(%rsp), %rsi
    00000349: 	subq	%rdi, %rsi
    0000034c: 	testq	%rdi, %rdi
    0000034f: 	je	.Ltmp2956 # Offset: 847
    00000351: 	callq	_ZdlPvm@PLT # Offset: 849
.Ltmp2956:
    00000356: 	movq	%rbp, %rdi
    00000359: 	callq	_Unwind_Resume@PLT # Offset: 857
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_delete_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_clearall_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 207
  State       : disassembled
  Address     : 0x1ece0
  Size        : 0x3b6
  MaxSize     : 0x3c0
  Offset      : 0x1ece0
  Section     : .text
  Orc Section : .local.text._Z18test_clearall_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0206:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp2957 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp2958 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp2975:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp2959 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2971:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2962:
    00000100: 	movl	$0x38, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbp
    0000010d: 	leaq	0x30(%rax), %rax
    00000111: 	movq	%rax, (%rbp)
    00000115: 	movq	0x8(%rsp), %rax
    0000011a: 	movq	$0x1, 0x8(%rbp)
    00000122: 	movq	$0x0, 0x10(%rbp)
    0000012a: 	movq	%rax, %rbx
    0000012d: 	movq	$0x0, 0x18(%rbp)
    00000135: 	movl	$0x3f800000, 0x20(%rbp)
    0000013c: 	movq	$0x0, 0x28(%rbp)
    00000144: 	movq	$0x0, 0x30(%rbp)
    0000014c: 	cmpq	%rax, %r12
    0000014f: 	je	.Ltmp2960 # Offset: 335
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp2961:
    00000158: 	movq	%rbx, %rdx
    0000015b: 	xorl	%esi, %esi
    0000015d: 	movq	%rbp, %rdi
    00000160: 	addq	$0x8, %rbx
    00000164: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0/1" # Offset: 356
    00000169: 	cmpq	%rbx, %r12
    0000016c: 	jne	.Ltmp2961 # Offset: 364
.Ltmp2960:
    0000016e: 	movq	%rbp, (%r14)
    00000171: 	addq	$0x8, %r14
    00000175: 	cmpq	%r15, %r14
    00000178: 	jne	.Ltmp2962 # Offset: 376
    0000017a: 	callq	clock@PLT # Offset: 378
    0000017f: 	movq	0x20(%rsp), %rbp
    00000184: 	movq	%rax, start_time(%rip)
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2965:
    00000190: 	movq	(%rbp), %r14
    00000194: 	movq	0x10(%r14), %rbx
    00000198: 	testq	%rbx, %rbx
    0000019b: 	je	.Ltmp2963 # Offset: 411
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp2964:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	movq	(%rbx), %rbx
    000001a6: 	movl	$0x10, %esi
    000001ab: 	callq	_ZdlPvm@PLT # Offset: 427
    000001b0: 	testq	%rbx, %rbx
    000001b3: 	jne	.Ltmp2964 # Offset: 435
.Ltmp2963:
    000001b5: 	movq	0x8(%r14), %rax
    000001b9: 	movq	(%r14), %rdi
    000001bc: 	xorl	%esi, %esi
    000001be: 	addq	$0x8, %rbp
    000001c2: 	leaq	(,%rax,8), %rdx
    000001ca: 	callq	memset@PLT # Offset: 458
    000001cf: 	movq	$0x0, 0x18(%r14)
    000001d7: 	movq	$0x0, 0x10(%r14)
    000001df: 	cmpq	%rbp, %r15
    000001e2: 	jne	.Ltmp2965 # Offset: 482
    000001e4: 	callq	clock@PLT # Offset: 484
    000001e9: 	pxor	%xmm0, %xmm0
    000001ed: 	movq	%rax, end_time(%rip)
    000001f4: 	subq	start_time(%rip), %rax
    000001fb: 	cvtsi2sd	%rax, %xmm0
    00000200: 	divsd	DATAat0x53788(%rip), %xmm0
    00000208: 	addsd	0x18(%rsp), %xmm0
    0000020e: 	movsd	%xmm0, 0x18(%rsp)
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp2970:
    00000218: 	movq	(%r13), %rbp
    0000021c: 	testq	%rbp, %rbp
    0000021f: 	je	.Ltmp2966 # Offset: 543
    00000221: 	movq	0x10(%rbp), %rbx
    00000225: 	testq	%rbx, %rbx
    00000228: 	je	.Ltmp2967 # Offset: 552
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2968:
    00000230: 	movq	%rbx, %rdi
    00000233: 	movq	(%rbx), %rbx
    00000236: 	movl	$0x10, %esi
    0000023b: 	callq	_ZdlPvm@PLT # Offset: 571
    00000240: 	testq	%rbx, %rbx
    00000243: 	jne	.Ltmp2968 # Offset: 579
.Ltmp2967:
    00000245: 	movq	0x8(%rbp), %rax
    00000249: 	movq	(%rbp), %rdi
    0000024d: 	xorl	%esi, %esi
    0000024f: 	leaq	(,%rax,8), %rdx
    00000257: 	callq	memset@PLT # Offset: 599
    0000025c: 	movq	(%rbp), %rdi
    00000260: 	leaq	0x30(%rbp), %rax
    00000264: 	movq	$0x0, 0x18(%rbp)
    0000026c: 	movq	$0x0, 0x10(%rbp)
    00000274: 	movq	0x8(%rbp), %rsi
    00000278: 	cmpq	%rax, %rdi
    0000027b: 	je	.Ltmp2969 # Offset: 635
    0000027d: 	shlq	$0x3, %rsi
    00000281: 	callq	_ZdlPvm@PLT # Offset: 641
.Ltmp2969:
    00000286: 	movl	$0x38, %esi
    0000028b: 	movq	%rbp, %rdi
    0000028e: 	callq	_ZdlPvm@PLT # Offset: 654
.Ltmp2966:
    00000293: 	movq	$0x0, (%r13)
    0000029b: 	addq	$0x8, %r13
    0000029f: 	cmpq	%r13, %r15
    000002a2: 	jne	.Ltmp2970 # Offset: 674
    000002a8: 	movl	0x10(%rsp), %ecx
    000002ac: 	movl	iterations(%rip), %eax
    000002b2: 	addl	%ecx, 0x28(%rsp)
    000002b6: 	movl	0x28(%rsp), %ecx
    000002ba: 	cmpl	%ecx, %eax
    000002bc: 	jg	.Ltmp2971 # Offset: 700
.Ltmp2977:
    000002c2: 	movq	0x38(%rsp), %rdi
    000002c7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 711
    000002cc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002d3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002da: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e1: 	je	.Ltmp2972 # Offset: 737
.Ltmp2976:
    000002e7: 	movq	-0x20(%rax), %rdi
    000002eb: 	movsd	0x18(%rsp), %xmm0
    000002f1: 	callq	_Z13record_resultdPKc # Offset: 753
    000002f6: 	cmpq	$0x0, 0x20(%rsp)
    000002fc: 	je	.Ltmp2973 # Offset: 764
    000002fe: 	movq	0x58(%rsp), %rax
    00000303: 	subq	%fs:0x28, %rax
    0000030c: 	jne	.Ltmp2974 # Offset: 780
    0000030e: 	movq	0x50(%rsp), %rsi
    00000313: 	movq	0x20(%rsp), %rdi
    00000318: 	addq	$0x68, %rsp
    0000031c: 	popq	%rbx
    0000031d: 	popq	%rbp
    0000031e: 	subq	%rdi, %rsi
    00000321: 	popq	%r12
    00000323: 	popq	%r13
    00000325: 	popq	%r14
    00000327: 	popq	%r15
    00000329: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 809
.Ltmp2973:
    0000032e: 	movq	0x58(%rsp), %rax
    00000333: 	subq	%fs:0x28, %rax
    0000033c: 	jne	.Ltmp2974 # Offset: 828
    0000033e: 	addq	$0x68, %rsp
    00000342: 	popq	%rbx
    00000343: 	popq	%rbp
    00000344: 	popq	%r12
    00000346: 	popq	%r13
    00000348: 	popq	%r14
    0000034a: 	popq	%r15
    0000034c: 	retq # Offset: 844
.Ltmp2957:
    0000034d: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp2958:
    00000356: 	movq	$0x0, 0x50(%rsp)
    0000035f: 	pxor	%xmm0, %xmm0
    00000363: 	movaps	%xmm0, 0x40(%rsp)
    00000368: 	jmp	.Ltmp2975 # Offset: 872
.Ltmp2972:
    0000036d: 	movq	-0x8(%rdx), %rax
    00000371: 	addq	$0x200, %rax
    00000377: 	jmp	.Ltmp2976 # Offset: 887
.Ltmp2959:
    0000037c: 	pxor	%xmm3, %xmm3
    00000380: 	movsd	%xmm3, 0x18(%rsp)
    00000386: 	jmp	.Ltmp2977 # Offset: 902
.Ltmp2974:
    0000038b: 	callq	__stack_chk_fail@PLT # Offset: 907
    00000390: 	endbr64
    00000394: 	movq	%rax, %rbp
    00000397: 	movq	0x40(%rsp), %rdi
    0000039c: 	movq	0x50(%rsp), %rsi
    000003a1: 	subq	%rdi, %rsi
    000003a4: 	testq	%rdi, %rdi
    000003a7: 	je	.Ltmp2978 # Offset: 935
    000003a9: 	callq	_ZdlPvm@PLT # Offset: 937
.Ltmp2978:
    000003ae: 	movq	%rbp, %rdi
    000003b1: 	callq	_Unwind_Resume@PLT # Offset: 945
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_clearall_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_insert_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEELb1EEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 208
  State       : disassembled
  Address     : 0x1f0a0
  Size        : 0x4a9
  MaxSize     : 0x4b0
  Offset      : 0x1f0a0
  Section     : .text
  Orc Section : .local.text._Z16test_insert_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEELb1EEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0207:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	xorl	%ebx, %ebx
    00000016: 	subq	$0x68, %rsp
    0000001a: 	movq	%rdx, 0x38(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x58(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp2979 # Offset: 67
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp2983:
    00000050: 	movl	$0x38, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movq	%r15, %rdx
    0000005d: 	xorl	%esi, %esi
    0000005f: 	leaq	0x30(%rax), %r14
    00000063: 	movq	$0x1, 0x8(%rax)
    0000006b: 	movq	%rax, %r13
    0000006e: 	movq	%rax, %rdi
    00000071: 	movq	%r14, (%rax)
    00000074: 	movq	$0x0, 0x10(%rax)
    0000007c: 	movq	$0x0, 0x18(%rax)
    00000084: 	movl	$0x3f800000, 0x20(%rax)
    0000008b: 	movq	$0x0, 0x28(%rax)
    00000093: 	movq	$0x0, 0x30(%rax)
    0000009b: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0/1" # Offset: 155
    000000a0: 	movq	0x10(%r13), %rbp
    000000a4: 	testq	%rbp, %rbp
    000000a7: 	je	.Ltmp2980 # Offset: 167
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp2981:
    000000b0: 	movq	%rbp, %rdi
    000000b3: 	movq	(%rbp), %rbp
    000000b7: 	movl	$0x10, %esi
    000000bc: 	callq	_ZdlPvm@PLT # Offset: 188
    000000c1: 	testq	%rbp, %rbp
    000000c4: 	jne	.Ltmp2981 # Offset: 196
.Ltmp2980:
    000000c6: 	movq	0x8(%r13), %rax
    000000ca: 	movq	(%r13), %rdi
    000000ce: 	xorl	%esi, %esi
    000000d0: 	leaq	(,%rax,8), %rdx
    000000d8: 	callq	memset@PLT # Offset: 216
    000000dd: 	movq	(%r13), %rdi
    000000e1: 	movq	0x8(%r13), %rax
    000000e5: 	movq	$0x0, 0x18(%r13)
    000000ed: 	movq	$0x0, 0x10(%r13)
    000000f5: 	cmpq	%rdi, %r14
    000000f8: 	je	.Ltmp2982 # Offset: 248
    000000fe: 	leaq	(,%rax,8), %rsi
    00000106: 	addl	$0x1, %ebx
    00000109: 	callq	_ZdlPvm@PLT # Offset: 265
    0000010e: 	movl	$0x38, %esi
    00000113: 	movq	%r13, %rdi
    00000116: 	callq	_ZdlPvm@PLT # Offset: 278
    0000011b: 	cmpl	iterations(%rip), %ebx
    00000121: 	jl	.Ltmp2983 # Offset: 289
.Ltmp2979:
    00000127: 	callq	clock@PLT # Offset: 295
    0000012c: 	pxor	%xmm0, %xmm0
    00000130: 	movq	%r12, %rcx
    00000133: 	xorl	%edx, %edx
    00000135: 	movq	%rax, end_time(%rip)
    0000013c: 	subq	start_time(%rip), %rax
    00000143: 	subq	%r15, %rcx
    00000146: 	cvtsi2sd	%rax, %xmm0
    0000014b: 	divsd	DATAat0x53788(%rip), %xmm0
    00000153: 	movabsq	$0x500000000, %rax
    0000015d: 	movsd	%xmm0, 0x30(%rsp)
    00000163: 	divq	%rcx
    00000166: 	movq	%rax, 0x8(%rsp)
    0000016b: 	cmpq	$0x3e8, %rax
    00000171: 	ja	.Ltmp2984 # Offset: 369
    00000177: 	cmpq	$0x3, 0x8(%rsp)
    0000017d: 	ja	.Ltmp2985 # Offset: 381
    00000183: 	movq	$0x0, 0x50(%rsp)
    0000018c: 	pxor	%xmm0, %xmm0
    00000190: 	movq	$0x4, 0x8(%rsp)
    00000199: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp2999:
    0000019e: 	movq	0x8(%rsp), %rbx
    000001a3: 	leaq	0x40(%rsp), %rdi
    000001a8: 	movq	%rbx, %rsi
    000001ab: 	callq	_ZNSt6vectorIPSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 427
    000001b0: 	movq	0x40(%rsp), %rcx
    000001b5: 	movl	iterations(%rip), %eax
    000001bb: 	movq	%rcx, 0x18(%rsp)
    000001c0: 	testl	%eax, %eax
    000001c2: 	jle	.Ltmp2986 # Offset: 450
    000001c8: 	addq	$0x8, %rcx
    000001cc: 	movl	%ebx, 0x24(%rsp)
    000001d0: 	pxor	%xmm2, %xmm2
    000001d4: 	movl	$0x0, 0x20(%rsp)
    000001dc: 	movq	%rcx, 0x28(%rsp)
    000001e1: 	movsd	%xmm2, 0x10(%rsp)
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2995:
    000001f0: 	movslq	0x20(%rsp), %rdx
    000001f5: 	movslq	%eax, %rcx
    000001f8: 	movq	%rdx, %rsi
    000001fb: 	addq	0x8(%rsp), %rdx
    00000200: 	subl	%esi, %eax
    00000202: 	cmpq	%rcx, %rdx
    00000205: 	cmovbl	0x24(%rsp), %eax
    0000020a: 	movl	%eax, %ebx
    0000020c: 	callq	clock@PLT # Offset: 524
    00000211: 	movq	0x28(%rsp), %rcx
    00000216: 	movq	0x18(%rsp), %r14
    0000021b: 	movq	%rax, start_time(%rip)
    00000222: 	leal	-0x1(%rbx), %eax
    00000225: 	leaq	(%rcx,%rax,8), %rax
    00000229: 	movq	%r14, %r13
    0000022c: 	movq	%rax, (%rsp)
.Ltmp2989:
    00000230: 	movl	$0x38, %edi
    00000235: 	callq	_Znwm@PLT # Offset: 565
    0000023a: 	movq	%rax, %rbp
    0000023d: 	leaq	0x30(%rax), %rax
    00000241: 	movq	%r15, %rbx
    00000244: 	movq	%rax, (%rbp)
    00000248: 	movq	$0x1, 0x8(%rbp)
    00000250: 	movq	$0x0, 0x10(%rbp)
    00000258: 	movq	$0x0, 0x18(%rbp)
    00000260: 	movl	$0x3f800000, 0x20(%rbp)
    00000267: 	movq	$0x0, 0x28(%rbp)
    0000026f: 	movq	$0x0, 0x30(%rbp)
    00000277: 	cmpq	%r15, %r12
    0000027a: 	je	.Ltmp2987 # Offset: 634
    0000027c: 	nopl	(%rax) # Size: 4
.Ltmp2988:
    00000280: 	movq	%rbx, %rdx
    00000283: 	xorl	%esi, %esi
    00000285: 	movq	%rbp, %rdi
    00000288: 	addq	$0x8, %rbx
    0000028c: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0/1" # Offset: 652
    00000291: 	cmpq	%rbx, %r12
    00000294: 	jne	.Ltmp2988 # Offset: 660
.Ltmp2987:
    00000296: 	movq	%rbp, (%r14)
    00000299: 	addq	$0x8, %r14
    0000029d: 	cmpq	%r14, (%rsp)
    000002a1: 	jne	.Ltmp2989 # Offset: 673
    000002a3: 	callq	clock@PLT # Offset: 675
    000002a8: 	pxor	%xmm0, %xmm0
    000002ac: 	movq	(%rsp), %r14
    000002b0: 	movq	%rax, end_time(%rip)
    000002b7: 	subq	start_time(%rip), %rax
    000002be: 	cvtsi2sd	%rax, %xmm0
    000002c3: 	divsd	DATAat0x53788(%rip), %xmm0
    000002cb: 	addsd	0x10(%rsp), %xmm0
    000002d1: 	movsd	%xmm0, 0x10(%rsp)
    000002d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2994:
    000002e0: 	movq	(%r13), %rbp
    000002e4: 	testq	%rbp, %rbp
    000002e7: 	je	.Ltmp2990 # Offset: 743
    000002e9: 	movq	0x10(%rbp), %rbx
    000002ed: 	testq	%rbx, %rbx
    000002f0: 	je	.Ltmp2991 # Offset: 752
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2992:
    000002f8: 	movq	%rbx, %rdi
    000002fb: 	movq	(%rbx), %rbx
    000002fe: 	movl	$0x10, %esi
    00000303: 	callq	_ZdlPvm@PLT # Offset: 771
    00000308: 	testq	%rbx, %rbx
    0000030b: 	jne	.Ltmp2992 # Offset: 779
.Ltmp2991:
    0000030d: 	movq	0x8(%rbp), %rax
    00000311: 	movq	(%rbp), %rdi
    00000315: 	xorl	%esi, %esi
    00000317: 	leaq	(,%rax,8), %rdx
    0000031f: 	callq	memset@PLT # Offset: 799
    00000324: 	movq	(%rbp), %rdi
    00000328: 	leaq	0x30(%rbp), %rax
    0000032c: 	movq	$0x0, 0x18(%rbp)
    00000334: 	movq	$0x0, 0x10(%rbp)
    0000033c: 	movq	0x8(%rbp), %rsi
    00000340: 	cmpq	%rax, %rdi
    00000343: 	je	.Ltmp2993 # Offset: 835
    00000345: 	shlq	$0x3, %rsi
    00000349: 	callq	_ZdlPvm@PLT # Offset: 841
.Ltmp2993:
    0000034e: 	movl	$0x38, %esi
    00000353: 	movq	%rbp, %rdi
    00000356: 	callq	_ZdlPvm@PLT # Offset: 854
.Ltmp2990:
    0000035b: 	movq	$0x0, (%r13)
    00000363: 	addq	$0x8, %r13
    00000367: 	cmpq	%r13, %r14
    0000036a: 	jne	.Ltmp2994 # Offset: 874
    00000370: 	movl	0x8(%rsp), %ecx
    00000374: 	movl	iterations(%rip), %eax
    0000037a: 	addl	%ecx, 0x20(%rsp)
    0000037e: 	movl	0x20(%rsp), %ecx
    00000382: 	cmpl	%ecx, %eax
    00000384: 	jg	.Ltmp2995 # Offset: 900
.Ltmp3001:
    0000038a: 	movq	0x38(%rsp), %rdi
    0000038f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 911
    00000394: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000039b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003a2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a9: 	je	.Ltmp2996 # Offset: 937
.Ltmp3000:
    000003af: 	movsd	0x10(%rsp), %xmm0
    000003b5: 	subsd	0x30(%rsp), %xmm0
    000003bb: 	movq	-0x20(%rax), %rdi
    000003bf: 	callq	_Z13record_resultdPKc # Offset: 959
    000003c4: 	cmpq	$0x0, 0x18(%rsp)
    000003ca: 	je	.Ltmp2997 # Offset: 970
    000003cc: 	movq	0x58(%rsp), %rax
    000003d1: 	subq	%fs:0x28, %rax
    000003da: 	jne	.Ltmp2998 # Offset: 986
    000003e0: 	movq	0x50(%rsp), %rsi
    000003e5: 	movq	0x18(%rsp), %rdi
    000003ea: 	addq	$0x68, %rsp
    000003ee: 	popq	%rbx
    000003ef: 	popq	%rbp
    000003f0: 	subq	%rdi, %rsi
    000003f3: 	popq	%r12
    000003f5: 	popq	%r13
    000003f7: 	popq	%r14
    000003f9: 	popq	%r15
    000003fb: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1019
.Ltmp2982:
    00000400: 	movl	$0x38, %esi
    00000405: 	movq	%r13, %rdi
    00000408: 	addl	$0x1, %ebx
    0000040b: 	callq	_ZdlPvm@PLT # Offset: 1035
    00000410: 	cmpl	%ebx, iterations(%rip)
    00000416: 	jg	.Ltmp2983 # Offset: 1046
    0000041c: 	jmp	.Ltmp2979 # Offset: 1052
.Ltmp2997:
    00000421: 	movq	0x58(%rsp), %rax
    00000426: 	subq	%fs:0x28, %rax
    0000042f: 	jne	.Ltmp2998 # Offset: 1071
    00000431: 	addq	$0x68, %rsp
    00000435: 	popq	%rbx
    00000436: 	popq	%rbp
    00000437: 	popq	%r12
    00000439: 	popq	%r13
    0000043b: 	popq	%r14
    0000043d: 	popq	%r15
    0000043f: 	retq # Offset: 1087
.Ltmp2984:
    00000440: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp2985:
    00000449: 	movq	$0x0, 0x50(%rsp)
    00000452: 	pxor	%xmm0, %xmm0
    00000456: 	movaps	%xmm0, 0x40(%rsp)
    0000045b: 	jmp	.Ltmp2999 # Offset: 1115
.Ltmp2996:
    00000460: 	movq	-0x8(%rdx), %rax
    00000464: 	addq	$0x200, %rax
    0000046a: 	jmp	.Ltmp3000 # Offset: 1130
.Ltmp2986:
    0000046f: 	pxor	%xmm3, %xmm3
    00000473: 	movsd	%xmm3, 0x10(%rsp)
    00000479: 	jmp	.Ltmp3001 # Offset: 1145
.Ltmp2998:
    0000047e: 	callq	__stack_chk_fail@PLT # Offset: 1150
    00000483: 	endbr64
    00000487: 	movq	%rax, %rbp
    0000048a: 	movq	0x40(%rsp), %rdi
    0000048f: 	movq	0x50(%rsp), %rsi
    00000494: 	subq	%rdi, %rsi
    00000497: 	testq	%rdi, %rdi
    0000049a: 	je	.Ltmp3002 # Offset: 1178
    0000049c: 	callq	_ZdlPvm@PLT # Offset: 1180
.Ltmp3002:
    000004a1: 	movq	%rbp, %rdi
    000004a4: 	callq	_Unwind_Resume@PLT # Offset: 1188
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_insert_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEELb1EEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_eraseall_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 209
  State       : disassembled
  Address     : 0x1f550
  Size        : 0x560
  MaxSize     : 0x560
  Offset      : 0x1f550
  Section     : .text
  Orc Section : .local.text._Z18test_eraseall_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0208:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x88, %rsp
    0000001e: 	movq	%rdx, 0x48(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x18(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x78(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	movabsq	$0x500000000, %rax
    00000044: 	divq	%rcx
    00000047: 	movq	%rax, 0x28(%rsp)
    0000004c: 	cmpq	$0x3e8, %rax
    00000052: 	ja	.Ltmp3003 # Offset: 82
    00000058: 	cmpq	$0x3, %rax
    0000005c: 	ja	.Ltmp3004 # Offset: 92
    00000062: 	movq	$0x0, 0x70(%rsp)
    0000006b: 	pxor	%xmm0, %xmm0
    0000006f: 	movq	$0x4, 0x28(%rsp)
    00000078: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp3034:
    0000007d: 	movq	0x28(%rsp), %rbx
    00000082: 	leaq	0x60(%rsp), %rdi
    00000087: 	movq	%rbx, %rsi
    0000008a: 	callq	_ZNSt6vectorIPSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 138
    0000008f: 	movq	0x60(%rsp), %rax
    00000094: 	movl	iterations(%rip), %r14d
    0000009b: 	movq	%rax, 0x8(%rsp)
    000000a0: 	testl	%r14d, %r14d
    000000a3: 	jle	.Ltmp3005 # Offset: 163
    000000a9: 	movl	%ebx, 0x44(%rsp)
    000000ad: 	movq	$0x0, 0x30(%rsp)
    000000b6: 	movl	$0x0, 0x40(%rsp)
    000000be: 	nop # Size: 2
.Ltmp3025:
    000000c0: 	movslq	0x40(%rsp), %rax
    000000c5: 	movslq	%r14d, %rdx
    000000c8: 	movq	%rax, %rcx
    000000cb: 	addq	0x28(%rsp), %rax
    000000d0: 	subl	%ecx, %r14d
    000000d3: 	cmpq	%rdx, %rax
    000000d6: 	movq	0x8(%rsp), %rcx
    000000db: 	movl	%r14d, %r15d
    000000de: 	cmovbl	0x44(%rsp), %r15d
    000000e4: 	movq	%rcx, %r13
    000000e7: 	leal	-0x1(%r15), %eax
    000000eb: 	leaq	0x8(%rcx,%rax,8), %r14
.Ltmp3008:
    000000f0: 	movl	$0x38, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	movq	%rax, %rbp
    000000fd: 	leaq	0x30(%rax), %rax
    00000101: 	movq	%rax, (%rbp)
    00000105: 	movq	0x18(%rsp), %rax
    0000010a: 	movq	$0x1, 0x8(%rbp)
    00000112: 	movq	$0x0, 0x10(%rbp)
    0000011a: 	movq	%rax, %rbx
    0000011d: 	movq	$0x0, 0x18(%rbp)
    00000125: 	movl	$0x3f800000, 0x20(%rbp)
    0000012c: 	movq	$0x0, 0x28(%rbp)
    00000134: 	movq	$0x0, 0x30(%rbp)
    0000013c: 	cmpq	%rax, %r12
    0000013f: 	je	.Ltmp3006 # Offset: 319
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp3007:
    00000148: 	movq	%rbx, %rdx
    0000014b: 	xorl	%esi, %esi
    0000014d: 	movq	%rbp, %rdi
    00000150: 	addq	$0x8, %rbx
    00000154: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0/1" # Offset: 340
    00000159: 	cmpq	%rbx, %r12
    0000015c: 	jne	.Ltmp3007 # Offset: 348
.Ltmp3006:
    0000015e: 	movq	%rbp, (%r13)
    00000162: 	addq	$0x8, %r13
    00000166: 	cmpq	%r13, %r14
    00000169: 	jne	.Ltmp3008 # Offset: 361
    0000016b: 	callq	clock@PLT # Offset: 363
    00000170: 	movl	%r15d, %r14d
    00000173: 	movq	%r12, 0x38(%rsp)
    00000178: 	movq	%rax, start_time(%rip)
    0000017f: 	leaq	(,%r14,8), %rax
    00000187: 	movq	%rax, 0x10(%rsp)
    0000018c: 	movq	$0x0, (%rsp)
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp3019:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	movq	(%rsp), %rcx
    000001a1: 	movq	(%rax,%rcx), %r12
    000001a5: 	movq	0x10(%r12), %r8
    000001aa: 	testq	%r8, %r8
    000001ad: 	je	.Ltmp3009 # Offset: 429
    000001b3: 	movsd	0x8(%r8), %xmm0
    000001b9: 	pxor	%xmm2, %xmm2
    000001bd: 	movq	0x8(%r12), %rbp
    000001c2: 	ucomisd	%xmm2, %xmm0
    000001c6: 	movsd	%xmm0, 0x58(%rsp)
    000001cc: 	jp	.Ltmp3010 # Offset: 460
    000001d2: 	movl	$0x0, %eax
    000001d7: 	movl	$0x0, %ebx
    000001dc: 	jne	.Ltmp3010 # Offset: 476
.Ltmp3033:
    000001e2: 	movq	(%r12), %rdx
    000001e6: 	movq	(%rdx,%rax), %rdx
    000001ea: 	movq	%rdx, %rax
    000001ed: 	nopl	(%rax) # Size: 3
.Ltmp3011:
    000001f0: 	movq	%rax, %r13
    000001f3: 	movq	(%rax), %rax
    000001f6: 	cmpq	%rax, %r8
    000001f9: 	jne	.Ltmp3011 # Offset: 505
    000001fb: 	testq	%rdx, %rdx
    000001fe: 	je	.Ltmp3012 # Offset: 510
    00000200: 	movq	(%rdx), %rdx
.Ltmp3012:
    00000203: 	cmpq	%rdx, %r8
    00000206: 	movq	%r8, %rdi
    00000209: 	sete	%bpl
    0000020d: 	nopl	(%rax) # Size: 3
.Ltmp3017:
    00000210: 	movq	(%rdi), %r14
    00000213: 	movl	$0x10, %esi
    00000218: 	callq	_ZdlPvm@PLT # Offset: 536
    0000021d: 	subq	$0x1, 0x18(%r12)
    00000223: 	testq	%r14, %r14
    00000226: 	je	.Ltmp3013 # Offset: 550
    00000228: 	movsd	0x8(%r14), %xmm0
    0000022e: 	pxor	%xmm1, %xmm1
    00000232: 	movq	0x8(%r12), %r15
    00000237: 	ucomisd	%xmm1, %xmm0
    0000023b: 	movsd	%xmm0, 0x58(%rsp)
    00000241: 	jp	.Ltmp3014 # Offset: 577
    00000247: 	movl	$0x0, %edx
    0000024c: 	jne	.Ltmp3014 # Offset: 588
.Ltmp3029:
    00000252: 	cmpq	%rdx, %rbx
    00000255: 	je	.Ltmp3015 # Offset: 597
    00000257: 	testb	%bpl, %bpl
    0000025a: 	jne	.Ltmp3016 # Offset: 602
    00000260: 	movl	$0x1, %ebp
.Ltmp3015:
    00000265: 	movq	%rdx, %rbx
    00000268: 	movq	%r14, %rdi
    0000026b: 	jmp	.Ltmp3017 # Offset: 619
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp3013:
    00000270: 	testb	%bpl, %bpl
    00000273: 	jne	.Ltmp3018 # Offset: 627
.Ltmp3032:
    00000279: 	movq	$0x0, (%r13)
.Ltmp3009:
    00000281: 	addq	$0x8, (%rsp)
    00000286: 	movq	(%rsp), %rax
    0000028a: 	cmpq	%rax, 0x10(%rsp)
    0000028f: 	jne	.Ltmp3019 # Offset: 655
    00000295: 	movq	0x38(%rsp), %r12
    0000029a: 	callq	clock@PLT # Offset: 666
    0000029f: 	pxor	%xmm0, %xmm0
    000002a3: 	movq	0x10(%rsp), %r13
    000002a8: 	movq	%rax, end_time(%rip)
    000002af: 	subq	start_time(%rip), %rax
    000002b6: 	cvtsi2sd	%rax, %xmm0
    000002bb: 	divsd	DATAat0x53788(%rip), %xmm0
    000002c3: 	addsd	0x30(%rsp), %xmm0
    000002c9: 	movq	0x8(%rsp), %rax
    000002ce: 	movq	%rax, %rbx
    000002d1: 	addq	%rax, %r13
    000002d4: 	movsd	%xmm0, 0x30(%rsp)
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3024:
    000002e0: 	movq	(%rbx), %r14
    000002e3: 	testq	%r14, %r14
    000002e6: 	je	.Ltmp3020 # Offset: 742
    000002e8: 	movq	0x10(%r14), %rbp
    000002ec: 	testq	%rbp, %rbp
    000002ef: 	je	.Ltmp3021 # Offset: 751
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp3022:
    000002f8: 	movq	%rbp, %rdi
    000002fb: 	movq	(%rbp), %rbp
    000002ff: 	movl	$0x10, %esi
    00000304: 	callq	_ZdlPvm@PLT # Offset: 772
    00000309: 	testq	%rbp, %rbp
    0000030c: 	jne	.Ltmp3022 # Offset: 780
.Ltmp3021:
    0000030e: 	movq	0x8(%r14), %rax
    00000312: 	movq	(%r14), %rdi
    00000315: 	xorl	%esi, %esi
    00000317: 	leaq	(,%rax,8), %rdx
    0000031f: 	callq	memset@PLT # Offset: 799
    00000324: 	movq	(%r14), %rdi
    00000327: 	leaq	0x30(%r14), %rax
    0000032b: 	movq	0x8(%r14), %rsi
    0000032f: 	movq	$0x0, 0x18(%r14)
    00000337: 	movq	$0x0, 0x10(%r14)
    0000033f: 	cmpq	%rax, %rdi
    00000342: 	je	.Ltmp3023 # Offset: 834
    00000344: 	shlq	$0x3, %rsi
    00000348: 	callq	_ZdlPvm@PLT # Offset: 840
.Ltmp3023:
    0000034d: 	movl	$0x38, %esi
    00000352: 	movq	%r14, %rdi
    00000355: 	callq	_ZdlPvm@PLT # Offset: 853
.Ltmp3020:
    0000035a: 	movq	$0x0, (%rbx)
    00000361: 	addq	$0x8, %rbx
    00000365: 	cmpq	%rbx, %r13
    00000368: 	jne	.Ltmp3024 # Offset: 872
    0000036e: 	movl	0x28(%rsp), %ecx
    00000372: 	movl	iterations(%rip), %r14d
    00000379: 	addl	%ecx, 0x40(%rsp)
    0000037d: 	movl	0x40(%rsp), %eax
    00000381: 	cmpl	%eax, %r14d
    00000384: 	jg	.Ltmp3025 # Offset: 900
.Ltmp3036:
    0000038a: 	movq	0x48(%rsp), %rdi
    0000038f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 911
    00000394: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000039b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003a2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a9: 	je	.Ltmp3026 # Offset: 937
.Ltmp3035:
    000003af: 	movq	-0x20(%rax), %rdi
    000003b3: 	movsd	0x30(%rsp), %xmm0
    000003b9: 	callq	_Z13record_resultdPKc # Offset: 953
    000003be: 	cmpq	$0x0, 0x8(%rsp)
    000003c4: 	je	.Ltmp3027 # Offset: 964
    000003ca: 	movq	0x78(%rsp), %rax
    000003cf: 	subq	%fs:0x28, %rax
    000003d8: 	jne	.Ltmp3028 # Offset: 984
    000003de: 	movq	0x70(%rsp), %rsi
    000003e3: 	movq	0x8(%rsp), %rdi
    000003e8: 	addq	$0x88, %rsp
    000003ef: 	popq	%rbx
    000003f0: 	popq	%rbp
    000003f1: 	subq	%rdi, %rsi
    000003f4: 	popq	%r12
    000003f6: 	popq	%r13
    000003f8: 	popq	%r14
    000003fa: 	popq	%r15
    000003fc: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1020
    00000401: 	nopl	(%rax) # Size: 7
.Ltmp3014:
    00000408: 	movl	$0xc70f6907, %edx
    0000040d: 	leaq	0x58(%rsp), %rdi
    00000412: 	movl	$0x8, %esi
    00000417: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1047
    0000041c: 	xorl	%edx, %edx
    0000041e: 	divq	%r15
    00000421: 	jmp	.Ltmp3029 # Offset: 1057
    00000426: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3016:
    00000430: 	movq	(%r12), %rcx
    00000434: 	leaq	(%rcx,%rbx,8), %rax
    00000438: 	movq	(%rax), %rsi
    0000043b: 	movq	%rsi, (%rcx,%rdx,8)
    0000043f: 	leaq	0x10(%r12), %rcx
    00000444: 	cmpq	%rcx, (%rax)
    00000447: 	je	.Ltmp3030 # Offset: 1095
.Ltmp3037:
    0000044d: 	movq	$0x0, (%rax)
    00000454: 	jmp	.Ltmp3015 # Offset: 1108
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp3018:
    00000460: 	movq	(%r12), %rax
    00000464: 	leaq	0x10(%r12), %rdx
    00000469: 	leaq	(%rax,%rbx,8), %rax
    0000046d: 	cmpq	%rdx, (%rax)
    00000470: 	jne	.Ltmp3031 # Offset: 1136
    00000472: 	movq	$0x0, 0x10(%r12)
.Ltmp3031:
    0000047b: 	movq	$0x0, (%rax)
    00000482: 	movq	0x60(%rsp), %rax
    00000487: 	movq	%rax, 0x8(%rsp)
    0000048c: 	jmp	.Ltmp3032 # Offset: 1164
    00000491: 	nopl	(%rax) # Size: 7
.Ltmp3010:
    00000498: 	movl	$0xc70f6907, %edx
    0000049d: 	leaq	0x58(%rsp), %rdi
    000004a2: 	movl	$0x8, %esi
    000004a7: 	movq	%r8, 0x20(%rsp)
    000004ac: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1196
    000004b1: 	xorl	%edx, %edx
    000004b3: 	movq	0x20(%rsp), %r8
    000004b8: 	divq	%rbp
    000004bb: 	movq	%rdx, %rbx
    000004be: 	leaq	(,%rdx,8), %rax
    000004c6: 	jmp	.Ltmp3033 # Offset: 1222
.Ltmp3027:
    000004cb: 	movq	0x78(%rsp), %rax
    000004d0: 	subq	%fs:0x28, %rax
    000004d9: 	jne	.Ltmp3028 # Offset: 1241
    000004db: 	addq	$0x88, %rsp
    000004e2: 	popq	%rbx
    000004e3: 	popq	%rbp
    000004e4: 	popq	%r12
    000004e6: 	popq	%r13
    000004e8: 	popq	%r14
    000004ea: 	popq	%r15
    000004ec: 	retq # Offset: 1260
.Ltmp3003:
    000004ed: 	movq	$0x3e8, 0x28(%rsp)
.Ltmp3004:
    000004f6: 	movq	$0x0, 0x70(%rsp)
    000004ff: 	pxor	%xmm0, %xmm0
    00000503: 	movaps	%xmm0, 0x60(%rsp)
    00000508: 	jmp	.Ltmp3034 # Offset: 1288
.Ltmp3026:
    0000050d: 	movq	-0x8(%rdx), %rax
    00000511: 	addq	$0x200, %rax
    00000517: 	jmp	.Ltmp3035 # Offset: 1303
.Ltmp3005:
    0000051c: 	pxor	%xmm4, %xmm4
    00000520: 	movsd	%xmm4, 0x30(%rsp)
    00000526: 	jmp	.Ltmp3036 # Offset: 1318
.Ltmp3028:
    0000052b: 	callq	__stack_chk_fail@PLT # Offset: 1323
.Ltmp3030:
    00000530: 	movq	%r14, 0x10(%r12)
    00000535: 	jmp	.Ltmp3037 # Offset: 1333
    0000053a: 	endbr64
    0000053e: 	movq	%rax, %rbp
    00000541: 	movq	0x60(%rsp), %rdi
    00000546: 	movq	0x70(%rsp), %rsi
    0000054b: 	subq	%rdi, %rsi
    0000054e: 	testq	%rdi, %rdi
    00000551: 	je	.Ltmp3038 # Offset: 1361
    00000553: 	callq	_ZdlPvm@PLT # Offset: 1363
.Ltmp3038:
    00000558: 	movq	%rbp, %rdi
    0000055b: 	callq	_Unwind_Resume@PLT # Offset: 1371
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_eraseall_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIPSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm" after disassembly {
  Number      : 210
  State       : disassembled
  Address     : 0x1fab0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x1fab0
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0209:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp3039 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp3040 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp3041 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp3042 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp3043 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp3050:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp3044 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp3044:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp3045 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp3046 # Offset: 200
.Ltmp3048:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp3040:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp3047 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp3047:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3039:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp3045:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp3049:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp3048 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3046:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp3049 # Offset: 392
.Ltmp3043:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp3051:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp3050 # Offset: 445
.Ltmp3042:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp3051 # Offset: 460
.Ltmp3041:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm"

Binary Function "_ZNSt6vectorIPSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm" after disassembly {
  Number      : 211
  State       : disassembled
  Address     : 0x1fc90
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x1fc90
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIPSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0210:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp3052 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp3053 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp3054 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp3055 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp3056 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp3063:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp3057 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp3057:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp3058 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp3059 # Offset: 200
.Ltmp3061:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp3053:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp3060 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp3060:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3052:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp3058:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp3062:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp3061 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3059:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp3062 # Offset: 392
.Ltmp3056:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp3064:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp3063 # Offset: 445
.Ltmp3055:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp3064 # Offset: 460
.Ltmp3054:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIPSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm"

Binary Function "_Z19test_erase_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 212
  State       : disassembled
  Address     : 0x1fe70
  Size        : 0x6c2
  MaxSize     : 0x6d0
  Offset      : 0x1fe70
  Section     : .text
  Orc Section : .local.text._Z19test_erase_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0211:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xc8, %rsp
    00000015: 	movq	%rdx, 0x50(%rsp)
    0000001a: 	xorl	%edx, %edx
    0000001c: 	movq	%rcx, 0x28(%rsp)
    00000021: 	movq	%rsi, %rcx
    00000024: 	movq	%rdi, 0x48(%rsp)
    00000029: 	subq	%rdi, %rcx
    0000002c: 	movq	%rsi, 0x20(%rsp)
    00000031: 	movq	%r8, 0x88(%rsp)
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0xb8(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	movabsq	$0x500000000, %rax
    00000056: 	divq	%rcx
    00000059: 	movq	%rax, 0x58(%rsp)
    0000005e: 	cmpq	$0x3e8, %rax
    00000064: 	ja	.Ltmp3065 # Offset: 100
    0000006a: 	cmpq	$0x3, %rax
    0000006e: 	ja	.Ltmp3066 # Offset: 110
    00000074: 	movq	$0x0, 0xb0(%rsp)
    00000080: 	pxor	%xmm0, %xmm0
    00000084: 	movq	$0x4, 0x58(%rsp)
    0000008d: 	movaps	%xmm0, 0xa0(%rsp)
.Ltmp3108:
    00000095: 	movq	0x58(%rsp), %rbx
    0000009a: 	leaq	0xa0(%rsp), %rdi
    000000a2: 	movq	%rbx, %rsi
    000000a5: 	callq	_ZNSt6vectorIPSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 165
    000000aa: 	movq	0xa0(%rsp), %rcx
    000000b2: 	movl	iterations(%rip), %eax
    000000b8: 	movq	%rcx, 0x68(%rsp)
    000000bd: 	testl	%eax, %eax
    000000bf: 	jle	.Ltmp3067 # Offset: 191
    000000c5: 	addq	$0x8, %rcx
    000000c9: 	movl	%ebx, 0x7c(%rsp)
    000000cd: 	movq	$0x0, 0x60(%rsp)
    000000d6: 	movl	$0x0, 0x78(%rsp)
    000000de: 	movq	%rcx, 0x80(%rsp)
.Ltmp3087:
    000000e6: 	movslq	0x78(%rsp), %rdx
    000000eb: 	movslq	%eax, %rcx
    000000ee: 	movq	0x68(%rsp), %r13
    000000f3: 	movq	%rdx, %rsi
    000000f6: 	addq	0x58(%rsp), %rdx
    000000fb: 	movq	%r13, 0x70(%rsp)
    00000100: 	subl	%esi, %eax
    00000102: 	cmpq	%rcx, %rdx
    00000105: 	cmovbl	0x7c(%rsp), %eax
    0000010a: 	movq	0x80(%rsp), %rcx
    00000112: 	subl	$0x1, %eax
    00000115: 	leaq	(%rcx,%rax,8), %rax
    00000119: 	movq	%rax, 0x40(%rsp)
    0000011e: 	nop # Size: 2
.Ltmp3070:
    00000120: 	movl	$0x38, %edi
    00000125: 	callq	_Znwm@PLT # Offset: 293
    0000012a: 	movq	%rax, %rbp
    0000012d: 	leaq	0x30(%rax), %rax
    00000131: 	leaq	0x90(%rsp), %r12
    00000139: 	movq	%rax, (%rbp)
    0000013d: 	movq	0x48(%rsp), %rax
    00000142: 	movq	$0x1, 0x8(%rbp)
    0000014a: 	movq	$0x0, 0x10(%rbp)
    00000152: 	movq	%rax, %rbx
    00000155: 	movq	$0x0, 0x18(%rbp)
    0000015d: 	movl	$0x3f800000, 0x20(%rbp)
    00000164: 	movq	$0x0, 0x28(%rbp)
    0000016c: 	movq	$0x0, 0x30(%rbp)
    00000174: 	cmpq	%rax, 0x20(%rsp)
    00000179: 	je	.Ltmp3068 # Offset: 377
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3069:
    00000180: 	movsd	(%rbx), %xmm0
    00000184: 	movq	%r12, %rdx
    00000187: 	xorl	%esi, %esi
    00000189: 	movq	%rbp, %rdi
    0000018c: 	unpcklpd	%xmm0, %xmm0
    00000190: 	movaps	%xmm0, 0x90(%rsp)
    00000198: 	callq	"_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE10_M_emplaceIJS0_IddEEEENS4_14_Node_iteratorIS2_Lb0ELb0EEENS4_20_Node_const_iteratorIS2_Lb0ELb0EEESt17integral_constantIbLb0EEDpOT_.constprop.0/1" # Offset: 408
    0000019d: 	addq	$0x8, %rbx
    000001a1: 	cmpq	%rbx, 0x20(%rsp)
    000001a6: 	jne	.Ltmp3069 # Offset: 422
.Ltmp3068:
    000001a8: 	movq	%rbp, (%r13)
    000001ac: 	addq	$0x8, %r13
    000001b0: 	cmpq	%r13, 0x40(%rsp)
    000001b5: 	jne	.Ltmp3070 # Offset: 437
    000001bb: 	callq	clock@PLT # Offset: 443
    000001c0: 	movq	0x28(%rsp), %rcx
    000001c5: 	movq	%rax, start_time(%rip)
    000001cc: 	cmpq	%rcx, 0x50(%rsp)
    000001d1: 	je	.Ltmp3071 # Offset: 465
    000001d7: 	movq	0x68(%rsp), %rax
    000001dc: 	movq	%rax, 0x30(%rsp)
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp3081:
    000001e8: 	movq	0x30(%rsp), %rax
    000001ed: 	movq	0x50(%rsp), %r15
    000001f2: 	movq	(%rax), %r14
    000001f5: 	nopl	(%rax) # Size: 3
.Ltmp3080:
    000001f8: 	movsd	(%r15), %xmm0
    000001fd: 	pxor	%xmm2, %xmm2
    00000201: 	addq	$0x8, %r15
    00000205: 	movsd	%xmm0, 0x90(%rsp)
    0000020e: 	ucomisd	%xmm2, %xmm0
    00000212: 	jp	.Ltmp3072 # Offset: 530
    00000218: 	movl	$0x0, %eax
    0000021d: 	jne	.Ltmp3072 # Offset: 541
.Ltmp3102:
    00000223: 	xorl	%edx, %edx
    00000225: 	divq	0x8(%r14)
    00000229: 	leaq	(,%rdx,8), %rax
    00000231: 	movq	%rdx, 0x8(%rsp)
    00000236: 	movq	%rax, 0x10(%rsp)
    0000023b: 	movq	(%r14), %rax
    0000023e: 	movq	(%rax,%rdx,8), %r12
    00000242: 	testq	%r12, %r12
    00000245: 	je	.Ltmp3073 # Offset: 581
    00000247: 	movq	(%r12), %r8
    0000024b: 	movsd	0x8(%r8), %xmm0
    00000251: 	ucomisd	-0x8(%r15), %xmm0
    00000257: 	jp	.Ltmp3074 # Offset: 599
    00000259: 	je	.Ltmp3075 # Offset: 601
.Ltmp3074:
    0000025f: 	movq	%r8, %rbx
    00000262: 	movq	(%rbx), %rax
    00000265: 	testq	%rax, %rax
    00000268: 	je	.Ltmp3073 # Offset: 616
.Ltmp3079:
    0000026a: 	movsd	0x8(%rax), %xmm0
    0000026f: 	pxor	%xmm3, %xmm3
    00000273: 	movq	0x8(%r14), %rbp
    00000277: 	movsd	%xmm0, 0x90(%rsp)
    00000280: 	ucomisd	%xmm3, %xmm0
    00000284: 	jp	.Ltmp3076 # Offset: 644
    0000028a: 	movl	$0x0, %edx
    0000028f: 	jne	.Ltmp3076 # Offset: 655
.Ltmp3103:
    00000295: 	cmpq	%rdx, 0x8(%rsp)
    0000029a: 	jne	.Ltmp3073 # Offset: 666
    0000029c: 	movq	(%rbx), %rax
    0000029f: 	movsd	0x8(%rax), %xmm0
    000002a4: 	ucomisd	-0x8(%r15), %xmm0
    000002aa: 	jp	.Ltmp3077 # Offset: 682
    000002ac: 	je	.Ltmp3078 # Offset: 684
.Ltmp3077:
    000002b2: 	movq	%rax, %rbx
    000002b5: 	movq	(%rbx), %rax
    000002b8: 	testq	%rax, %rax
    000002bb: 	jne	.Ltmp3079 # Offset: 699
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp3073:
    000002c0: 	cmpq	%r15, 0x28(%rsp)
    000002c5: 	jne	.Ltmp3080 # Offset: 709
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3099:
    000002d0: 	addq	$0x8, 0x30(%rsp)
    000002d6: 	movq	0x30(%rsp), %rax
    000002db: 	cmpq	%rax, 0x40(%rsp)
    000002e0: 	jne	.Ltmp3081 # Offset: 736
.Ltmp3071:
    000002e6: 	callq	clock@PLT # Offset: 742
    000002eb: 	pxor	%xmm0, %xmm0
    000002ef: 	movq	0x70(%rsp), %r12
    000002f4: 	movq	0x40(%rsp), %r13
    000002f9: 	movq	%rax, end_time(%rip)
    00000300: 	subq	start_time(%rip), %rax
    00000307: 	cvtsi2sd	%rax, %xmm0
    0000030c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000314: 	addsd	0x60(%rsp), %xmm0
    0000031a: 	movsd	%xmm0, 0x60(%rsp)
.Ltmp3086:
    00000320: 	movq	(%r12), %rbp
    00000324: 	testq	%rbp, %rbp
    00000327: 	je	.Ltmp3082 # Offset: 807
    00000329: 	movq	0x10(%rbp), %rbx
    0000032d: 	testq	%rbx, %rbx
    00000330: 	je	.Ltmp3083 # Offset: 816
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3084:
    00000338: 	movq	%rbx, %rdi
    0000033b: 	movq	(%rbx), %rbx
    0000033e: 	movl	$0x18, %esi
    00000343: 	callq	_ZdlPvm@PLT # Offset: 835
    00000348: 	testq	%rbx, %rbx
    0000034b: 	jne	.Ltmp3084 # Offset: 843
.Ltmp3083:
    0000034d: 	movq	0x8(%rbp), %rax
    00000351: 	movq	(%rbp), %rdi
    00000355: 	xorl	%esi, %esi
    00000357: 	leaq	(,%rax,8), %rdx
    0000035f: 	callq	memset@PLT # Offset: 863
    00000364: 	movq	(%rbp), %rdi
    00000368: 	leaq	0x30(%rbp), %rax
    0000036c: 	movq	$0x0, 0x18(%rbp)
    00000374: 	movq	$0x0, 0x10(%rbp)
    0000037c: 	movq	0x8(%rbp), %rsi
    00000380: 	cmpq	%rax, %rdi
    00000383: 	je	.Ltmp3085 # Offset: 899
    00000385: 	shlq	$0x3, %rsi
    00000389: 	callq	_ZdlPvm@PLT # Offset: 905
.Ltmp3085:
    0000038e: 	movl	$0x38, %esi
    00000393: 	movq	%rbp, %rdi
    00000396: 	callq	_ZdlPvm@PLT # Offset: 918
.Ltmp3082:
    0000039b: 	movq	$0x0, (%r12)
    000003a3: 	addq	$0x8, %r12
    000003a7: 	cmpq	%r13, %r12
    000003aa: 	jne	.Ltmp3086 # Offset: 938
    000003b0: 	movl	0x58(%rsp), %ecx
    000003b4: 	movl	iterations(%rip), %eax
    000003ba: 	addl	%ecx, 0x78(%rsp)
    000003be: 	movl	0x78(%rsp), %ecx
    000003c2: 	cmpl	%ecx, %eax
    000003c4: 	jg	.Ltmp3087 # Offset: 964
.Ltmp3110:
    000003ca: 	movq	0x88(%rsp), %rdi
    000003d2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 978
    000003d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003ec: 	je	.Ltmp3088 # Offset: 1004
.Ltmp3109:
    000003f2: 	movq	-0x20(%rax), %rdi
    000003f6: 	movsd	0x60(%rsp), %xmm0
    000003fc: 	callq	_Z13record_resultdPKc # Offset: 1020
    00000401: 	cmpq	$0x0, 0x68(%rsp)
    00000407: 	je	.Ltmp3089 # Offset: 1031
    0000040d: 	movq	0xb8(%rsp), %rax
    00000415: 	subq	%fs:0x28, %rax
    0000041e: 	jne	.Ltmp3090 # Offset: 1054
    00000424: 	movq	0xb0(%rsp), %rsi
    0000042c: 	movq	0x68(%rsp), %rdi
    00000431: 	addq	$0xc8, %rsp
    00000438: 	popq	%rbx
    00000439: 	popq	%rbp
    0000043a: 	subq	%rdi, %rsi
    0000043d: 	popq	%r12
    0000043f: 	popq	%r13
    00000441: 	popq	%r14
    00000443: 	popq	%r15
    00000445: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1093
    0000044a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3078:
    00000450: 	movq	%rbx, %r12
    00000453: 	movq	%rax, %r8
.Ltmp3075:
    00000456: 	movq	(%r8), %rbp
    00000459: 	movq	%rbp, %r13
    0000045c: 	testq	%rbp, %rbp
    0000045f: 	je	.Ltmp3091 # Offset: 1119
.Ltmp3100:
    00000465: 	movsd	0x8(%rbp), %xmm1
    0000046a: 	ucomisd	%xmm0, %xmm1
    0000046e: 	jp	.Ltmp3092 # Offset: 1134
    00000470: 	je	.Ltmp3093 # Offset: 1136
.Ltmp3092:
    00000476: 	pxor	%xmm4, %xmm4
    0000047a: 	movq	0x8(%r14), %rbx
    0000047e: 	movsd	%xmm1, 0x90(%rsp)
    00000487: 	ucomisd	%xmm4, %xmm1
    0000048b: 	jp	.Ltmp3094 # Offset: 1163
    00000491: 	movq	$0x0, 0x18(%rsp)
    0000049a: 	jne	.Ltmp3094 # Offset: 1178
.Ltmp3101:
    000004a0: 	xorl	%ebx, %ebx
    000004a2: 	movq	%r8, %rdi
    000004a5: 	jmp	.Ltmp3095 # Offset: 1189
    000004a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3096:
    000004b0: 	movq	%r13, %rdi
    000004b3: 	movq	(%r13), %r13
.Ltmp3095:
    000004b7: 	movl	$0x18, %esi
    000004bc: 	addq	$0x1, %rbx
    000004c0: 	callq	_ZdlPvm@PLT # Offset: 1216
    000004c5: 	cmpq	%rbp, %r13
    000004c8: 	jne	.Ltmp3096 # Offset: 1224
    000004ca: 	movq	(%r14), %rdx
    000004cd: 	movq	0x10(%rsp), %rax
    000004d2: 	subq	%rbx, 0x18(%r14)
    000004d6: 	addq	%rdx, %rax
    000004d9: 	cmpq	%r12, (%rax)
    000004dc: 	je	.Ltmp3097 # Offset: 1244
    000004e2: 	movq	0x18(%rsp), %rax
    000004e7: 	cmpq	%rax, 0x8(%rsp)
    000004ec: 	je	.Ltmp3098 # Offset: 1260
    000004ee: 	movq	%r12, (%rdx,%rax,8)
.Ltmp3098:
    000004f2: 	movq	%rbp, (%r12)
    000004f6: 	cmpq	%r15, 0x28(%rsp)
    000004fb: 	jne	.Ltmp3080 # Offset: 1275
    00000501: 	jmp	.Ltmp3099 # Offset: 1281
    00000506: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3093:
    00000510: 	movq	(%rbp), %rbp
    00000514: 	testq	%rbp, %rbp
    00000517: 	jne	.Ltmp3100 # Offset: 1303
    0000051d: 	movq	0x8(%rsp), %rax
    00000522: 	movq	%rax, 0x18(%rsp)
    00000527: 	jmp	.Ltmp3101 # Offset: 1319
    0000052c: 	nopl	(%rax) # Size: 4
.Ltmp3072:
    00000530: 	leaq	0x90(%rsp), %rdi
    00000538: 	movl	$0xc70f6907, %edx
    0000053d: 	movl	$0x8, %esi
    00000542: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1346
    00000547: 	jmp	.Ltmp3102 # Offset: 1351
    0000054c: 	nopl	(%rax) # Size: 4
.Ltmp3076:
    00000550: 	movl	$0xc70f6907, %edx
    00000555: 	leaq	0x90(%rsp), %rdi
    0000055d: 	movl	$0x8, %esi
    00000562: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1378
    00000567: 	xorl	%edx, %edx
    00000569: 	divq	%rbp
    0000056c: 	jmp	.Ltmp3103 # Offset: 1388
    00000571: 	nopl	(%rax) # Size: 7
.Ltmp3097:
    00000578: 	testq	%rbp, %rbp
    0000057b: 	je	.Ltmp3104 # Offset: 1403
    0000057d: 	movq	0x18(%rsp), %rsi
    00000582: 	cmpq	%rsi, 0x8(%rsp)
    00000587: 	je	.Ltmp3098 # Offset: 1415
.Ltmp3104:
    0000058d: 	movq	%r12, %rcx
    00000590: 	testq	%rbp, %rbp
    00000593: 	je	.Ltmp3105 # Offset: 1427
    00000595: 	movq	0x18(%rsp), %rcx
    0000059a: 	movq	%r12, (%rdx,%rcx,8)
    0000059e: 	movq	(%rax), %rcx
.Ltmp3105:
    000005a1: 	leaq	0x10(%r14), %rdx
    000005a5: 	cmpq	%rdx, %rcx
    000005a8: 	je	.Ltmp3106 # Offset: 1448
.Ltmp3107:
    000005aa: 	movq	$0x0, (%rax)
    000005b1: 	jmp	.Ltmp3098 # Offset: 1457
    000005b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3094:
    000005c0: 	movl	$0xc70f6907, %edx
    000005c5: 	movl	$0x8, %esi
    000005ca: 	movq	%r8, 0x38(%rsp)
    000005cf: 	leaq	0x90(%rsp), %rdi
    000005d7: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1495
    000005dc: 	xorl	%edx, %edx
    000005de: 	movq	0x38(%rsp), %r8
    000005e3: 	divq	%rbx
    000005e6: 	movq	(%r8), %r13
    000005e9: 	movq	%rdx, 0x18(%rsp)
    000005ee: 	jmp	.Ltmp3101 # Offset: 1518
.Ltmp3091:
    000005f3: 	movl	$0x18, %esi
    000005f8: 	movq	%r8, %rdi
    000005fb: 	callq	_ZdlPvm@PLT # Offset: 1531
    00000600: 	movq	0x10(%rsp), %rax
    00000605: 	addq	(%r14), %rax
    00000608: 	subq	$0x1, 0x18(%r14)
    0000060d: 	cmpq	(%rax), %r12
    00000610: 	jne	.Ltmp3098 # Offset: 1552
    00000616: 	movq	%r12, %rcx
    00000619: 	leaq	0x10(%r14), %rdx
    0000061d: 	cmpq	%rdx, %rcx
    00000620: 	jne	.Ltmp3107 # Offset: 1568
.Ltmp3106:
    00000622: 	movq	%rbp, 0x10(%r14)
    00000626: 	jmp	.Ltmp3107 # Offset: 1574
.Ltmp3065:
    00000628: 	movq	$0x3e8, 0x58(%rsp)
.Ltmp3066:
    00000631: 	movq	$0x0, 0xb0(%rsp)
    0000063d: 	pxor	%xmm0, %xmm0
    00000641: 	movaps	%xmm0, 0xa0(%rsp)
    00000649: 	jmp	.Ltmp3108 # Offset: 1609
.Ltmp3089:
    0000064e: 	movq	0xb8(%rsp), %rax
    00000656: 	subq	%fs:0x28, %rax
    0000065f: 	jne	.Ltmp3090 # Offset: 1631
    00000661: 	addq	$0xc8, %rsp
    00000668: 	popq	%rbx
    00000669: 	popq	%rbp
    0000066a: 	popq	%r12
    0000066c: 	popq	%r13
    0000066e: 	popq	%r14
    00000670: 	popq	%r15
    00000672: 	retq # Offset: 1650
.Ltmp3088:
    00000673: 	movq	-0x8(%rdx), %rax
    00000677: 	addq	$0x200, %rax
    0000067d: 	jmp	.Ltmp3109 # Offset: 1661
.Ltmp3067:
    00000682: 	pxor	%xmm6, %xmm6
    00000686: 	movsd	%xmm6, 0x60(%rsp)
    0000068c: 	jmp	.Ltmp3110 # Offset: 1676
.Ltmp3090:
    00000691: 	callq	__stack_chk_fail@PLT # Offset: 1681
    00000696: 	endbr64
    0000069a: 	movq	%rax, %rbp
    0000069d: 	movq	0xa0(%rsp), %rdi
    000006a5: 	movq	0xb0(%rsp), %rsi
    000006ad: 	subq	%rdi, %rsi
    000006b0: 	testq	%rdi, %rdi
    000006b3: 	je	.Ltmp3111 # Offset: 1715
    000006b5: 	callq	_ZdlPvm@PLT # Offset: 1717
.Ltmp3111:
    000006ba: 	movq	%rbp, %rdi
    000006bd: 	callq	_Unwind_Resume@PLT # Offset: 1725
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_erase_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_delete_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 213
  State       : disassembled
  Address     : 0x20540
  Size        : 0x375
  MaxSize     : 0x380
  Offset      : 0x20540
  Section     : .text
  Orc Section : .local.text._Z20test_delete_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0212:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp3112 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp3113 # Offset: 89
    0000005f: 	movq	$0x0, 0x60(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp3127:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x50(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x50(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp3114 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3123:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r15
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r15, %r14
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %rax
    000000f6: 	movq	%rax, (%rsp)
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3117:
    00000100: 	movl	$0x38, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbp
    0000010d: 	leaq	0x30(%rax), %rax
    00000111: 	leaq	0x40(%rsp), %r13
    00000116: 	movq	%rax, (%rbp)
    0000011a: 	movq	0x8(%rsp), %rax
    0000011f: 	movq	$0x1, 0x8(%rbp)
    00000127: 	movq	$0x0, 0x10(%rbp)
    0000012f: 	movq	%rax, %rbx
    00000132: 	movq	$0x0, 0x18(%rbp)
    0000013a: 	movl	$0x3f800000, 0x20(%rbp)
    00000141: 	movq	$0x0, 0x28(%rbp)
    00000149: 	movq	$0x0, 0x30(%rbp)
    00000151: 	cmpq	%rax, %r12
    00000154: 	je	.Ltmp3115 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3116:
    00000160: 	movsd	(%rbx), %xmm0
    00000164: 	movq	%r13, %rdx
    00000167: 	xorl	%esi, %esi
    00000169: 	movq	%rbp, %rdi
    0000016c: 	unpcklpd	%xmm0, %xmm0
    00000170: 	movaps	%xmm0, 0x40(%rsp)
    00000175: 	callq	"_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE10_M_emplaceIJS0_IddEEEENS4_14_Node_iteratorIS2_Lb0ELb0EEENS4_20_Node_const_iteratorIS2_Lb0ELb0EEESt17integral_constantIbLb0EEDpOT_.constprop.0/1" # Offset: 373
    0000017a: 	addq	$0x8, %rbx
    0000017e: 	cmpq	%rbx, %r12
    00000181: 	jne	.Ltmp3116 # Offset: 385
.Ltmp3115:
    00000183: 	movq	%rbp, (%r15)
    00000186: 	addq	$0x8, %r15
    0000018a: 	cmpq	(%rsp), %r15
    0000018e: 	jne	.Ltmp3117 # Offset: 398
    00000194: 	callq	clock@PLT # Offset: 404
    00000199: 	movq	(%rsp), %r13
    0000019d: 	movq	%rax, start_time(%rip)
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp3122:
    000001a8: 	movq	(%r14), %rbp
    000001ab: 	testq	%rbp, %rbp
    000001ae: 	je	.Ltmp3118 # Offset: 430
    000001b0: 	movq	0x10(%rbp), %rbx
    000001b4: 	testq	%rbx, %rbx
    000001b7: 	je	.Ltmp3119 # Offset: 439
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp3120:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	(%rbx), %rbx
    000001c6: 	movl	$0x18, %esi
    000001cb: 	callq	_ZdlPvm@PLT # Offset: 459
    000001d0: 	testq	%rbx, %rbx
    000001d3: 	jne	.Ltmp3120 # Offset: 467
.Ltmp3119:
    000001d5: 	movq	0x8(%rbp), %rax
    000001d9: 	movq	(%rbp), %rdi
    000001dd: 	xorl	%esi, %esi
    000001df: 	leaq	(,%rax,8), %rdx
    000001e7: 	callq	memset@PLT # Offset: 487
    000001ec: 	movq	(%rbp), %rdi
    000001f0: 	leaq	0x30(%rbp), %rax
    000001f4: 	movq	$0x0, 0x18(%rbp)
    000001fc: 	movq	$0x0, 0x10(%rbp)
    00000204: 	movq	0x8(%rbp), %rsi
    00000208: 	cmpq	%rax, %rdi
    0000020b: 	je	.Ltmp3121 # Offset: 523
    0000020d: 	shlq	$0x3, %rsi
    00000211: 	callq	_ZdlPvm@PLT # Offset: 529
.Ltmp3121:
    00000216: 	movl	$0x38, %esi
    0000021b: 	movq	%rbp, %rdi
    0000021e: 	callq	_ZdlPvm@PLT # Offset: 542
.Ltmp3118:
    00000223: 	movq	$0x0, (%r14)
    0000022a: 	addq	$0x8, %r14
    0000022e: 	cmpq	%r14, %r13
    00000231: 	jne	.Ltmp3122 # Offset: 561
    00000237: 	callq	clock@PLT # Offset: 567
    0000023c: 	pxor	%xmm0, %xmm0
    00000240: 	movl	0x10(%rsp), %ecx
    00000244: 	addl	%ecx, 0x28(%rsp)
    00000248: 	movq	%rax, end_time(%rip)
    0000024f: 	subq	start_time(%rip), %rax
    00000256: 	cvtsi2sd	%rax, %xmm0
    0000025b: 	movl	0x28(%rsp), %ecx
    0000025f: 	divsd	DATAat0x53788(%rip), %xmm0
    00000267: 	addsd	0x18(%rsp), %xmm0
    0000026d: 	movl	iterations(%rip), %eax
    00000273: 	movsd	%xmm0, 0x18(%rsp)
    00000279: 	cmpl	%ecx, %eax
    0000027b: 	jg	.Ltmp3123 # Offset: 635
.Ltmp3129:
    00000281: 	movq	0x38(%rsp), %rdi
    00000286: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 646
    0000028b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000292: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000299: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a0: 	je	.Ltmp3124 # Offset: 672
.Ltmp3128:
    000002a6: 	movq	-0x20(%rax), %rdi
    000002aa: 	movsd	0x18(%rsp), %xmm0
    000002b0: 	callq	_Z13record_resultdPKc # Offset: 688
    000002b5: 	cmpq	$0x0, 0x20(%rsp)
    000002bb: 	je	.Ltmp3125 # Offset: 699
    000002bd: 	movq	0x68(%rsp), %rax
    000002c2: 	subq	%fs:0x28, %rax
    000002cb: 	jne	.Ltmp3126 # Offset: 715
    000002cd: 	movq	0x60(%rsp), %rsi
    000002d2: 	movq	0x20(%rsp), %rdi
    000002d7: 	addq	$0x78, %rsp
    000002db: 	popq	%rbx
    000002dc: 	popq	%rbp
    000002dd: 	subq	%rdi, %rsi
    000002e0: 	popq	%r12
    000002e2: 	popq	%r13
    000002e4: 	popq	%r14
    000002e6: 	popq	%r15
    000002e8: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 744
.Ltmp3125:
    000002ed: 	movq	0x68(%rsp), %rax
    000002f2: 	subq	%fs:0x28, %rax
    000002fb: 	jne	.Ltmp3126 # Offset: 763
    000002fd: 	addq	$0x78, %rsp
    00000301: 	popq	%rbx
    00000302: 	popq	%rbp
    00000303: 	popq	%r12
    00000305: 	popq	%r13
    00000307: 	popq	%r14
    00000309: 	popq	%r15
    0000030b: 	retq # Offset: 779
.Ltmp3112:
    0000030c: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp3113:
    00000315: 	movq	$0x0, 0x60(%rsp)
    0000031e: 	pxor	%xmm0, %xmm0
    00000322: 	movaps	%xmm0, 0x50(%rsp)
    00000327: 	jmp	.Ltmp3127 # Offset: 807
.Ltmp3124:
    0000032c: 	movq	-0x8(%rdx), %rax
    00000330: 	addq	$0x200, %rax
    00000336: 	jmp	.Ltmp3128 # Offset: 822
.Ltmp3114:
    0000033b: 	pxor	%xmm3, %xmm3
    0000033f: 	movsd	%xmm3, 0x18(%rsp)
    00000345: 	jmp	.Ltmp3129 # Offset: 837
.Ltmp3126:
    0000034a: 	callq	__stack_chk_fail@PLT # Offset: 842
    0000034f: 	endbr64
    00000353: 	movq	%rax, %rbp
    00000356: 	movq	0x50(%rsp), %rdi
    0000035b: 	movq	0x60(%rsp), %rsi
    00000360: 	subq	%rdi, %rsi
    00000363: 	testq	%rdi, %rdi
    00000366: 	je	.Ltmp3130 # Offset: 870
    00000368: 	callq	_ZdlPvm@PLT # Offset: 872
.Ltmp3130:
    0000036d: 	movq	%rbp, %rdi
    00000370: 	callq	_Unwind_Resume@PLT # Offset: 880
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_delete_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_clearall_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 214
  State       : disassembled
  Address     : 0x208c0
  Size        : 0x3dd
  MaxSize     : 0x3e0
  Offset      : 0x208c0
  Section     : .text
  Orc Section : .local.text._Z22test_clearall_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0213:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x78, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp3131 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp3132 # Offset: 89
    0000005f: 	movq	$0x0, 0x60(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x50(%rsp)
.Ltmp3149:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x50(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x50(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp3133 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3145:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r15
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r15, %r14
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %rax
    000000f6: 	movq	%rax, (%rsp)
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3136:
    00000100: 	movl	$0x38, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbp
    0000010d: 	leaq	0x30(%rax), %rax
    00000111: 	leaq	0x40(%rsp), %r13
    00000116: 	movq	%rax, (%rbp)
    0000011a: 	movq	0x8(%rsp), %rax
    0000011f: 	movq	$0x1, 0x8(%rbp)
    00000127: 	movq	$0x0, 0x10(%rbp)
    0000012f: 	movq	%rax, %rbx
    00000132: 	movq	$0x0, 0x18(%rbp)
    0000013a: 	movl	$0x3f800000, 0x20(%rbp)
    00000141: 	movq	$0x0, 0x28(%rbp)
    00000149: 	movq	$0x0, 0x30(%rbp)
    00000151: 	cmpq	%rax, %r12
    00000154: 	je	.Ltmp3134 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3135:
    00000160: 	movsd	(%rbx), %xmm0
    00000164: 	movq	%r13, %rdx
    00000167: 	xorl	%esi, %esi
    00000169: 	movq	%rbp, %rdi
    0000016c: 	unpcklpd	%xmm0, %xmm0
    00000170: 	movaps	%xmm0, 0x40(%rsp)
    00000175: 	callq	"_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE10_M_emplaceIJS0_IddEEEENS4_14_Node_iteratorIS2_Lb0ELb0EEENS4_20_Node_const_iteratorIS2_Lb0ELb0EEESt17integral_constantIbLb0EEDpOT_.constprop.0/1" # Offset: 373
    0000017a: 	addq	$0x8, %rbx
    0000017e: 	cmpq	%rbx, %r12
    00000181: 	jne	.Ltmp3135 # Offset: 385
.Ltmp3134:
    00000183: 	movq	%rbp, (%r15)
    00000186: 	addq	$0x8, %r15
    0000018a: 	cmpq	(%rsp), %r15
    0000018e: 	jne	.Ltmp3136 # Offset: 398
    00000194: 	callq	clock@PLT # Offset: 404
    00000199: 	movq	0x20(%rsp), %rbp
    0000019e: 	movq	(%rsp), %r15
    000001a2: 	movq	%rax, start_time(%rip)
    000001a9: 	nopl	(%rax) # Size: 7
.Ltmp3139:
    000001b0: 	movq	(%rbp), %r13
    000001b4: 	movq	0x10(%r13), %rbx
    000001b8: 	testq	%rbx, %rbx
    000001bb: 	je	.Ltmp3137 # Offset: 443
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp3138:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	(%rbx), %rbx
    000001c6: 	movl	$0x18, %esi
    000001cb: 	callq	_ZdlPvm@PLT # Offset: 459
    000001d0: 	testq	%rbx, %rbx
    000001d3: 	jne	.Ltmp3138 # Offset: 467
.Ltmp3137:
    000001d5: 	movq	0x8(%r13), %rax
    000001d9: 	movq	(%r13), %rdi
    000001dd: 	xorl	%esi, %esi
    000001df: 	addq	$0x8, %rbp
    000001e3: 	leaq	(,%rax,8), %rdx
    000001eb: 	callq	memset@PLT # Offset: 491
    000001f0: 	movq	$0x0, 0x18(%r13)
    000001f8: 	movq	$0x0, 0x10(%r13)
    00000200: 	cmpq	%rbp, %r15
    00000203: 	jne	.Ltmp3139 # Offset: 515
    00000205: 	callq	clock@PLT # Offset: 517
    0000020a: 	pxor	%xmm0, %xmm0
    0000020e: 	movq	(%rsp), %r13
    00000212: 	movq	%rax, end_time(%rip)
    00000219: 	subq	start_time(%rip), %rax
    00000220: 	cvtsi2sd	%rax, %xmm0
    00000225: 	divsd	DATAat0x53788(%rip), %xmm0
    0000022d: 	addsd	0x18(%rsp), %xmm0
    00000233: 	movsd	%xmm0, 0x18(%rsp)
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp3144:
    00000240: 	movq	(%r14), %rbp
    00000243: 	testq	%rbp, %rbp
    00000246: 	je	.Ltmp3140 # Offset: 582
    00000248: 	movq	0x10(%rbp), %rbx
    0000024c: 	testq	%rbx, %rbx
    0000024f: 	je	.Ltmp3141 # Offset: 591
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp3142:
    00000258: 	movq	%rbx, %rdi
    0000025b: 	movq	(%rbx), %rbx
    0000025e: 	movl	$0x18, %esi
    00000263: 	callq	_ZdlPvm@PLT # Offset: 611
    00000268: 	testq	%rbx, %rbx
    0000026b: 	jne	.Ltmp3142 # Offset: 619
.Ltmp3141:
    0000026d: 	movq	0x8(%rbp), %rax
    00000271: 	movq	(%rbp), %rdi
    00000275: 	xorl	%esi, %esi
    00000277: 	leaq	(,%rax,8), %rdx
    0000027f: 	callq	memset@PLT # Offset: 639
    00000284: 	movq	(%rbp), %rdi
    00000288: 	leaq	0x30(%rbp), %rax
    0000028c: 	movq	$0x0, 0x18(%rbp)
    00000294: 	movq	$0x0, 0x10(%rbp)
    0000029c: 	movq	0x8(%rbp), %rsi
    000002a0: 	cmpq	%rax, %rdi
    000002a3: 	je	.Ltmp3143 # Offset: 675
    000002a5: 	shlq	$0x3, %rsi
    000002a9: 	callq	_ZdlPvm@PLT # Offset: 681
.Ltmp3143:
    000002ae: 	movl	$0x38, %esi
    000002b3: 	movq	%rbp, %rdi
    000002b6: 	callq	_ZdlPvm@PLT # Offset: 694
.Ltmp3140:
    000002bb: 	movq	$0x0, (%r14)
    000002c2: 	addq	$0x8, %r14
    000002c6: 	cmpq	%r14, %r13
    000002c9: 	jne	.Ltmp3144 # Offset: 713
    000002cf: 	movl	0x10(%rsp), %ecx
    000002d3: 	movl	iterations(%rip), %eax
    000002d9: 	addl	%ecx, 0x28(%rsp)
    000002dd: 	movl	0x28(%rsp), %ecx
    000002e1: 	cmpl	%ecx, %eax
    000002e3: 	jg	.Ltmp3145 # Offset: 739
.Ltmp3151:
    000002e9: 	movq	0x38(%rsp), %rdi
    000002ee: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 750
    000002f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002fa: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000301: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000308: 	je	.Ltmp3146 # Offset: 776
.Ltmp3150:
    0000030e: 	movq	-0x20(%rax), %rdi
    00000312: 	movsd	0x18(%rsp), %xmm0
    00000318: 	callq	_Z13record_resultdPKc # Offset: 792
    0000031d: 	cmpq	$0x0, 0x20(%rsp)
    00000323: 	je	.Ltmp3147 # Offset: 803
    00000325: 	movq	0x68(%rsp), %rax
    0000032a: 	subq	%fs:0x28, %rax
    00000333: 	jne	.Ltmp3148 # Offset: 819
    00000335: 	movq	0x60(%rsp), %rsi
    0000033a: 	movq	0x20(%rsp), %rdi
    0000033f: 	addq	$0x78, %rsp
    00000343: 	popq	%rbx
    00000344: 	popq	%rbp
    00000345: 	subq	%rdi, %rsi
    00000348: 	popq	%r12
    0000034a: 	popq	%r13
    0000034c: 	popq	%r14
    0000034e: 	popq	%r15
    00000350: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 848
.Ltmp3147:
    00000355: 	movq	0x68(%rsp), %rax
    0000035a: 	subq	%fs:0x28, %rax
    00000363: 	jne	.Ltmp3148 # Offset: 867
    00000365: 	addq	$0x78, %rsp
    00000369: 	popq	%rbx
    0000036a: 	popq	%rbp
    0000036b: 	popq	%r12
    0000036d: 	popq	%r13
    0000036f: 	popq	%r14
    00000371: 	popq	%r15
    00000373: 	retq # Offset: 883
.Ltmp3131:
    00000374: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp3132:
    0000037d: 	movq	$0x0, 0x60(%rsp)
    00000386: 	pxor	%xmm0, %xmm0
    0000038a: 	movaps	%xmm0, 0x50(%rsp)
    0000038f: 	jmp	.Ltmp3149 # Offset: 911
.Ltmp3146:
    00000394: 	movq	-0x8(%rdx), %rax
    00000398: 	addq	$0x200, %rax
    0000039e: 	jmp	.Ltmp3150 # Offset: 926
.Ltmp3133:
    000003a3: 	pxor	%xmm3, %xmm3
    000003a7: 	movsd	%xmm3, 0x18(%rsp)
    000003ad: 	jmp	.Ltmp3151 # Offset: 941
.Ltmp3148:
    000003b2: 	callq	__stack_chk_fail@PLT # Offset: 946
    000003b7: 	endbr64
    000003bb: 	movq	%rax, %rbp
    000003be: 	movq	0x50(%rsp), %rdi
    000003c3: 	movq	0x60(%rsp), %rsi
    000003c8: 	subq	%rdi, %rsi
    000003cb: 	testq	%rdi, %rdi
    000003ce: 	je	.Ltmp3152 # Offset: 974
    000003d0: 	callq	_ZdlPvm@PLT # Offset: 976
.Ltmp3152:
    000003d5: 	movq	%rbp, %rdi
    000003d8: 	callq	_Unwind_Resume@PLT # Offset: 984
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_clearall_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_insert_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEELb1EEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 215
  State       : disassembled
  Address     : 0x20ca0
  Size        : 0x4e8
  MaxSize     : 0x4f0
  Offset      : 0x20ca0
  Section     : .text
  Orc Section : .local.text._Z20test_insert_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEELb1EEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0214:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	xorl	%ebx, %ebx
    00000013: 	subq	$0x88, %rsp
    0000001a: 	movq	%rdi, 0x10(%rsp)
    0000001f: 	leaq	0x60(%rsp), %r13
    00000024: 	movq	%rdx, 0x48(%rsp)
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x78(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	callq	clock@PLT # Offset: 57
    0000003e: 	movq	%rax, start_time(%rip)
    00000045: 	movl	iterations(%rip), %eax
    0000004b: 	testl	%eax, %eax
    0000004d: 	jle	.Ltmp3153 # Offset: 77
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3157:
    00000058: 	movl	$0x38, %edi
    0000005d: 	callq	_Znwm@PLT # Offset: 93
    00000062: 	movq	%r13, %rdx
    00000065: 	xorl	%esi, %esi
    00000067: 	leaq	0x30(%rax), %r15
    0000006b: 	movq	%rax, %r14
    0000006e: 	movq	$0x1, 0x8(%rax)
    00000076: 	movq	%r15, (%rax)
    00000079: 	movq	%r14, %rdi
    0000007c: 	movq	$0x0, 0x10(%rax)
    00000084: 	movq	$0x0, 0x18(%rax)
    0000008c: 	movl	$0x3f800000, 0x20(%rax)
    00000093: 	movq	$0x0, 0x28(%rax)
    0000009b: 	movq	$0x0, 0x30(%rax)
    000000a3: 	movq	0x10(%rsp), %rax
    000000a8: 	movsd	(%rax), %xmm0
    000000ac: 	unpcklpd	%xmm0, %xmm0
    000000b0: 	movaps	%xmm0, 0x60(%rsp)
    000000b5: 	callq	"_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE10_M_emplaceIJS0_IddEEEENS4_14_Node_iteratorIS2_Lb0ELb0EEENS4_20_Node_const_iteratorIS2_Lb0ELb0EEESt17integral_constantIbLb0EEDpOT_.constprop.0/1" # Offset: 181
    000000ba: 	movq	0x10(%r14), %rbp
    000000be: 	testq	%rbp, %rbp
    000000c1: 	je	.Ltmp3154 # Offset: 193
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3155:
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	movq	(%rbp), %rbp
    000000cf: 	movl	$0x18, %esi
    000000d4: 	callq	_ZdlPvm@PLT # Offset: 212
    000000d9: 	testq	%rbp, %rbp
    000000dc: 	jne	.Ltmp3155 # Offset: 220
.Ltmp3154:
    000000de: 	movq	0x8(%r14), %rax
    000000e2: 	movq	(%r14), %rdi
    000000e5: 	xorl	%esi, %esi
    000000e7: 	leaq	(,%rax,8), %rdx
    000000ef: 	callq	memset@PLT # Offset: 239
    000000f4: 	movq	(%r14), %rdi
    000000f7: 	movq	0x8(%r14), %rax
    000000fb: 	movq	$0x0, 0x18(%r14)
    00000103: 	movq	$0x0, 0x10(%r14)
    0000010b: 	cmpq	%rdi, %r15
    0000010e: 	je	.Ltmp3156 # Offset: 270
    00000114: 	leaq	(,%rax,8), %rsi
    0000011c: 	addl	$0x1, %ebx
    0000011f: 	callq	_ZdlPvm@PLT # Offset: 287
    00000124: 	movl	$0x38, %esi
    00000129: 	movq	%r14, %rdi
    0000012c: 	callq	_ZdlPvm@PLT # Offset: 300
    00000131: 	cmpl	iterations(%rip), %ebx
    00000137: 	jl	.Ltmp3157 # Offset: 311
.Ltmp3173:
    0000013d: 	callq	clock@PLT # Offset: 317
    00000142: 	pxor	%xmm0, %xmm0
    00000146: 	movq	%r12, %rcx
    00000149: 	xorl	%edx, %edx
    0000014b: 	movq	%rax, end_time(%rip)
    00000152: 	subq	start_time(%rip), %rax
    00000159: 	cvtsi2sd	%rax, %xmm0
    0000015e: 	subq	0x10(%rsp), %rcx
    00000163: 	movabsq	$0x500000000, %rax
    0000016d: 	divsd	DATAat0x53788(%rip), %xmm0
    00000175: 	divq	%rcx
    00000178: 	movsd	%xmm0, 0x40(%rsp)
    0000017e: 	movq	%rax, 0x18(%rsp)
    00000183: 	cmpq	$0x3e8, %rax
    00000189: 	ja	.Ltmp3158 # Offset: 393
    0000018f: 	cmpq	$0x3, 0x18(%rsp)
    00000195: 	ja	.Ltmp3159 # Offset: 405
    0000019b: 	movq	$0x0, 0x70(%rsp)
    000001a4: 	pxor	%xmm0, %xmm0
    000001a8: 	movq	$0x4, 0x18(%rsp)
    000001b1: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp3174:
    000001b6: 	movq	0x18(%rsp), %rbx
    000001bb: 	movq	%r13, %rdi
    000001be: 	movq	%rbx, %rsi
    000001c1: 	callq	_ZNSt6vectorIPSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 449
    000001c6: 	movq	0x60(%rsp), %rcx
    000001cb: 	movl	iterations(%rip), %eax
    000001d1: 	movq	%rcx, 0x28(%rsp)
    000001d6: 	testl	%eax, %eax
    000001d8: 	jle	.Ltmp3160 # Offset: 472
    000001de: 	addq	$0x8, %rcx
    000001e2: 	movl	%ebx, 0x34(%rsp)
    000001e6: 	pxor	%xmm2, %xmm2
    000001ea: 	movl	$0x0, 0x30(%rsp)
    000001f2: 	movq	%rcx, 0x38(%rsp)
    000001f7: 	movsd	%xmm2, 0x20(%rsp)
    000001fd: 	nopl	(%rax) # Size: 3
.Ltmp3169:
    00000200: 	movslq	0x30(%rsp), %rdx
    00000205: 	movslq	%eax, %rcx
    00000208: 	movq	%rdx, %rsi
    0000020b: 	addq	0x18(%rsp), %rdx
    00000210: 	subl	%esi, %eax
    00000212: 	cmpq	%rcx, %rdx
    00000215: 	cmovbl	0x34(%rsp), %eax
    0000021a: 	movl	%eax, %ebx
    0000021c: 	callq	clock@PLT # Offset: 540
    00000221: 	movq	0x38(%rsp), %rcx
    00000226: 	movq	0x28(%rsp), %r15
    0000022b: 	movq	%rax, start_time(%rip)
    00000232: 	leal	-0x1(%rbx), %eax
    00000235: 	leaq	(%rcx,%rax,8), %rax
    00000239: 	movq	%r15, %r14
    0000023c: 	movq	%rax, 0x8(%rsp)
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp3163:
    00000248: 	movl	$0x38, %edi
    0000024d: 	callq	_Znwm@PLT # Offset: 589
    00000252: 	movq	%rax, %rbp
    00000255: 	leaq	0x30(%rax), %rax
    00000259: 	leaq	0x50(%rsp), %r13
    0000025e: 	movq	%rax, (%rbp)
    00000262: 	movq	0x10(%rsp), %rax
    00000267: 	movq	$0x1, 0x8(%rbp)
    0000026f: 	movq	$0x0, 0x10(%rbp)
    00000277: 	movq	%rax, %rbx
    0000027a: 	movq	$0x0, 0x18(%rbp)
    00000282: 	movl	$0x3f800000, 0x20(%rbp)
    00000289: 	movq	$0x0, 0x28(%rbp)
    00000291: 	movq	$0x0, 0x30(%rbp)
    00000299: 	cmpq	%rax, %r12
    0000029c: 	je	.Ltmp3161 # Offset: 668
    0000029e: 	nop # Size: 2
.Ltmp3162:
    000002a0: 	movsd	(%rbx), %xmm0
    000002a4: 	movq	%r13, %rdx
    000002a7: 	xorl	%esi, %esi
    000002a9: 	movq	%rbp, %rdi
    000002ac: 	unpcklpd	%xmm0, %xmm0
    000002b0: 	movaps	%xmm0, 0x50(%rsp)
    000002b5: 	callq	"_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE10_M_emplaceIJS0_IddEEEENS4_14_Node_iteratorIS2_Lb0ELb0EEENS4_20_Node_const_iteratorIS2_Lb0ELb0EEESt17integral_constantIbLb0EEDpOT_.constprop.0/1" # Offset: 693
    000002ba: 	addq	$0x8, %rbx
    000002be: 	cmpq	%rbx, %r12
    000002c1: 	jne	.Ltmp3162 # Offset: 705
.Ltmp3161:
    000002c3: 	movq	%rbp, (%r15)
    000002c6: 	addq	$0x8, %r15
    000002ca: 	cmpq	%r15, 0x8(%rsp)
    000002cf: 	jne	.Ltmp3163 # Offset: 719
    000002d5: 	callq	clock@PLT # Offset: 725
    000002da: 	pxor	%xmm0, %xmm0
    000002de: 	movq	0x8(%rsp), %r13
    000002e3: 	movq	%rax, end_time(%rip)
    000002ea: 	subq	start_time(%rip), %rax
    000002f1: 	cvtsi2sd	%rax, %xmm0
    000002f6: 	divsd	DATAat0x53788(%rip), %xmm0
    000002fe: 	addsd	0x20(%rsp), %xmm0
    00000304: 	movsd	%xmm0, 0x20(%rsp)
    0000030a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3168:
    00000310: 	movq	(%r14), %rbp
    00000313: 	testq	%rbp, %rbp
    00000316: 	je	.Ltmp3164 # Offset: 790
    00000318: 	movq	0x10(%rbp), %rbx
    0000031c: 	testq	%rbx, %rbx
    0000031f: 	je	.Ltmp3165 # Offset: 799
    00000321: 	nopl	(%rax) # Size: 7
.Ltmp3166:
    00000328: 	movq	%rbx, %rdi
    0000032b: 	movq	(%rbx), %rbx
    0000032e: 	movl	$0x18, %esi
    00000333: 	callq	_ZdlPvm@PLT # Offset: 819
    00000338: 	testq	%rbx, %rbx
    0000033b: 	jne	.Ltmp3166 # Offset: 827
.Ltmp3165:
    0000033d: 	movq	0x8(%rbp), %rax
    00000341: 	movq	(%rbp), %rdi
    00000345: 	xorl	%esi, %esi
    00000347: 	leaq	(,%rax,8), %rdx
    0000034f: 	callq	memset@PLT # Offset: 847
    00000354: 	movq	(%rbp), %rdi
    00000358: 	leaq	0x30(%rbp), %rax
    0000035c: 	movq	$0x0, 0x18(%rbp)
    00000364: 	movq	$0x0, 0x10(%rbp)
    0000036c: 	movq	0x8(%rbp), %rsi
    00000370: 	cmpq	%rax, %rdi
    00000373: 	je	.Ltmp3167 # Offset: 883
    00000375: 	shlq	$0x3, %rsi
    00000379: 	callq	_ZdlPvm@PLT # Offset: 889
.Ltmp3167:
    0000037e: 	movl	$0x38, %esi
    00000383: 	movq	%rbp, %rdi
    00000386: 	callq	_ZdlPvm@PLT # Offset: 902
.Ltmp3164:
    0000038b: 	movq	$0x0, (%r14)
    00000392: 	addq	$0x8, %r14
    00000396: 	cmpq	%r14, %r13
    00000399: 	jne	.Ltmp3168 # Offset: 921
    0000039f: 	movl	0x18(%rsp), %ecx
    000003a3: 	movl	iterations(%rip), %eax
    000003a9: 	addl	%ecx, 0x30(%rsp)
    000003ad: 	movl	0x30(%rsp), %ecx
    000003b1: 	cmpl	%ecx, %eax
    000003b3: 	jg	.Ltmp3169 # Offset: 947
.Ltmp3176:
    000003b9: 	movq	0x48(%rsp), %rdi
    000003be: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 958
    000003c3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003ca: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003d1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003d8: 	je	.Ltmp3170 # Offset: 984
.Ltmp3175:
    000003de: 	movsd	0x20(%rsp), %xmm0
    000003e4: 	subsd	0x40(%rsp), %xmm0
    000003ea: 	movq	-0x20(%rax), %rdi
    000003ee: 	callq	_Z13record_resultdPKc # Offset: 1006
    000003f3: 	cmpq	$0x0, 0x28(%rsp)
    000003f9: 	je	.Ltmp3171 # Offset: 1017
    000003fb: 	movq	0x78(%rsp), %rax
    00000400: 	subq	%fs:0x28, %rax
    00000409: 	jne	.Ltmp3172 # Offset: 1033
    0000040f: 	movq	0x70(%rsp), %rsi
    00000414: 	movq	0x28(%rsp), %rdi
    00000419: 	addq	$0x88, %rsp
    00000420: 	popq	%rbx
    00000421: 	popq	%rbp
    00000422: 	subq	%rdi, %rsi
    00000425: 	popq	%r12
    00000427: 	popq	%r13
    00000429: 	popq	%r14
    0000042b: 	popq	%r15
    0000042d: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1069
.Ltmp3156:
    00000432: 	movl	$0x38, %esi
    00000437: 	movq	%r14, %rdi
    0000043a: 	addl	$0x1, %ebx
    0000043d: 	callq	_ZdlPvm@PLT # Offset: 1085
    00000442: 	cmpl	%ebx, iterations(%rip)
    00000448: 	jg	.Ltmp3157 # Offset: 1096
    0000044e: 	jmp	.Ltmp3173 # Offset: 1102
.Ltmp3171:
    00000453: 	movq	0x78(%rsp), %rax
    00000458: 	subq	%fs:0x28, %rax
    00000461: 	jne	.Ltmp3172 # Offset: 1121
    00000463: 	addq	$0x88, %rsp
    0000046a: 	popq	%rbx
    0000046b: 	popq	%rbp
    0000046c: 	popq	%r12
    0000046e: 	popq	%r13
    00000470: 	popq	%r14
    00000472: 	popq	%r15
    00000474: 	retq # Offset: 1140
.Ltmp3158:
    00000475: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp3159:
    0000047e: 	movq	$0x0, 0x70(%rsp)
    00000487: 	pxor	%xmm0, %xmm0
    0000048b: 	movaps	%xmm0, 0x60(%rsp)
    00000490: 	jmp	.Ltmp3174 # Offset: 1168
.Ltmp3170:
    00000495: 	movq	-0x8(%rdx), %rax
    00000499: 	addq	$0x200, %rax
    0000049f: 	jmp	.Ltmp3175 # Offset: 1183
.Ltmp3153:
    000004a4: 	leaq	0x60(%rsp), %r13
    000004a9: 	jmp	.Ltmp3173 # Offset: 1193
.Ltmp3160:
    000004ae: 	pxor	%xmm3, %xmm3
    000004b2: 	movsd	%xmm3, 0x20(%rsp)
    000004b8: 	jmp	.Ltmp3176 # Offset: 1208
.Ltmp3172:
    000004bd: 	callq	__stack_chk_fail@PLT # Offset: 1213
    000004c2: 	endbr64
    000004c6: 	movq	%rax, %rbp
    000004c9: 	movq	0x60(%rsp), %rdi
    000004ce: 	movq	0x70(%rsp), %rsi
    000004d3: 	subq	%rdi, %rsi
    000004d6: 	testq	%rdi, %rdi
    000004d9: 	je	.Ltmp3177 # Offset: 1241
    000004db: 	callq	_ZdlPvm@PLT # Offset: 1243
.Ltmp3177:
    000004e0: 	movq	%rbp, %rdi
    000004e3: 	callq	_Unwind_Resume@PLT # Offset: 1251
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_insert_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEELb1EEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_eraseall_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 216
  State       : disassembled
  Address     : 0x21190
  Size        : 0x570
  MaxSize     : 0x570
  Offset      : 0x21190
  Section     : .text
  Orc Section : .local.text._Z22test_eraseall_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0215:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x88, %rsp
    0000001e: 	movq	%rdx, 0x48(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x18(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x78(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	movabsq	$0x500000000, %rax
    00000044: 	divq	%rcx
    00000047: 	movq	%rax, 0x28(%rsp)
    0000004c: 	cmpq	$0x3e8, %rax
    00000052: 	ja	.Ltmp3178 # Offset: 82
    00000058: 	cmpq	$0x3, %rax
    0000005c: 	ja	.Ltmp3179 # Offset: 92
    00000062: 	movq	$0x0, 0x70(%rsp)
    0000006b: 	pxor	%xmm0, %xmm0
    0000006f: 	movq	$0x4, 0x28(%rsp)
    00000078: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp3209:
    0000007d: 	movq	0x28(%rsp), %rbx
    00000082: 	leaq	0x60(%rsp), %rdi
    00000087: 	movq	%rbx, %rsi
    0000008a: 	callq	_ZNSt6vectorIPSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 138
    0000008f: 	movq	0x60(%rsp), %rcx
    00000094: 	movl	iterations(%rip), %eax
    0000009a: 	movq	%rcx, 0x8(%rsp)
    0000009f: 	testl	%eax, %eax
    000000a1: 	jle	.Ltmp3180 # Offset: 161
    000000a7: 	movl	%ebx, 0x44(%rsp)
    000000ab: 	movq	$0x0, 0x30(%rsp)
    000000b4: 	movl	$0x0, 0x40(%rsp)
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp3200:
    000000c0: 	movslq	0x40(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	%rdx, %rsi
    000000cb: 	addq	0x28(%rsp), %rdx
    000000d0: 	subl	%esi, %eax
    000000d2: 	cmpq	%rcx, %rdx
    000000d5: 	cmovbl	0x44(%rsp), %eax
    000000da: 	movq	0x8(%rsp), %rcx
    000000df: 	movl	%eax, (%rsp)
    000000e2: 	subl	$0x1, %eax
    000000e5: 	movq	%rcx, %r14
    000000e8: 	leaq	0x8(%rcx,%rax,8), %r15
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp3183:
    000000f0: 	movl	$0x38, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	movq	%rax, %rbp
    000000fd: 	leaq	0x30(%rax), %rax
    00000101: 	leaq	0x50(%rsp), %r13
    00000106: 	movq	%rax, (%rbp)
    0000010a: 	movq	0x18(%rsp), %rax
    0000010f: 	movq	$0x1, 0x8(%rbp)
    00000117: 	movq	$0x0, 0x10(%rbp)
    0000011f: 	movq	%rax, %rbx
    00000122: 	movq	$0x0, 0x18(%rbp)
    0000012a: 	movl	$0x3f800000, 0x20(%rbp)
    00000131: 	movq	$0x0, 0x28(%rbp)
    00000139: 	movq	$0x0, 0x30(%rbp)
    00000141: 	cmpq	%rax, %r12
    00000144: 	je	.Ltmp3181 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3182:
    00000150: 	movsd	(%rbx), %xmm0
    00000154: 	movq	%r13, %rdx
    00000157: 	xorl	%esi, %esi
    00000159: 	movq	%rbp, %rdi
    0000015c: 	unpcklpd	%xmm0, %xmm0
    00000160: 	movaps	%xmm0, 0x50(%rsp)
    00000165: 	callq	"_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE10_M_emplaceIJS0_IddEEEENS4_14_Node_iteratorIS2_Lb0ELb0EEENS4_20_Node_const_iteratorIS2_Lb0ELb0EEESt17integral_constantIbLb0EEDpOT_.constprop.0/1" # Offset: 357
    0000016a: 	addq	$0x8, %rbx
    0000016e: 	cmpq	%rbx, %r12
    00000171: 	jne	.Ltmp3182 # Offset: 369
.Ltmp3181:
    00000173: 	movq	%rbp, (%r14)
    00000176: 	addq	$0x8, %r14
    0000017a: 	cmpq	%r14, %r15
    0000017d: 	jne	.Ltmp3183 # Offset: 381
    00000183: 	callq	clock@PLT # Offset: 387
    00000188: 	movq	%r12, 0x38(%rsp)
    0000018d: 	movq	%rax, start_time(%rip)
    00000194: 	movl	(%rsp), %eax
    00000197: 	movq	$0x0, (%rsp)
    0000019f: 	shlq	$0x3, %rax
    000001a3: 	movq	%rax, 0x10(%rsp)
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3194:
    000001b0: 	movq	0x8(%rsp), %rax
    000001b5: 	movq	(%rsp), %rcx
    000001b9: 	movq	(%rax,%rcx), %r12
    000001bd: 	movq	0x10(%r12), %r8
    000001c2: 	testq	%r8, %r8
    000001c5: 	je	.Ltmp3184 # Offset: 453
    000001cb: 	movsd	0x8(%r8), %xmm0
    000001d1: 	pxor	%xmm2, %xmm2
    000001d5: 	movq	0x8(%r12), %rbp
    000001da: 	ucomisd	%xmm2, %xmm0
    000001de: 	movsd	%xmm0, 0x50(%rsp)
    000001e4: 	jp	.Ltmp3185 # Offset: 484
    000001ea: 	movl	$0x0, %eax
    000001ef: 	movl	$0x0, %ebx
    000001f4: 	jne	.Ltmp3185 # Offset: 500
.Ltmp3208:
    000001fa: 	movq	(%r12), %rdx
    000001fe: 	movq	(%rdx,%rax), %rdx
    00000202: 	movq	%rdx, %rax
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp3186:
    00000208: 	movq	%rax, %r13
    0000020b: 	movq	(%rax), %rax
    0000020e: 	cmpq	%rax, %r8
    00000211: 	jne	.Ltmp3186 # Offset: 529
    00000213: 	testq	%rdx, %rdx
    00000216: 	je	.Ltmp3187 # Offset: 534
    00000218: 	movq	(%rdx), %rdx
.Ltmp3187:
    0000021b: 	cmpq	%rdx, %r8
    0000021e: 	movq	%r8, %rdi
    00000221: 	sete	%bpl
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp3192:
    00000228: 	movq	(%rdi), %r14
    0000022b: 	movl	$0x18, %esi
    00000230: 	callq	_ZdlPvm@PLT # Offset: 560
    00000235: 	subq	$0x1, 0x18(%r12)
    0000023b: 	testq	%r14, %r14
    0000023e: 	je	.Ltmp3188 # Offset: 574
    00000240: 	movsd	0x8(%r14), %xmm0
    00000246: 	pxor	%xmm1, %xmm1
    0000024a: 	movq	0x8(%r12), %r15
    0000024f: 	ucomisd	%xmm1, %xmm0
    00000253: 	movsd	%xmm0, 0x50(%rsp)
    00000259: 	jp	.Ltmp3189 # Offset: 601
    0000025f: 	movl	$0x0, %edx
    00000264: 	jne	.Ltmp3189 # Offset: 612
.Ltmp3204:
    0000026a: 	cmpq	%rdx, %rbx
    0000026d: 	je	.Ltmp3190 # Offset: 621
    0000026f: 	testb	%bpl, %bpl
    00000272: 	jne	.Ltmp3191 # Offset: 626
    00000278: 	movl	$0x1, %ebp
.Ltmp3190:
    0000027d: 	movq	%rdx, %rbx
    00000280: 	movq	%r14, %rdi
    00000283: 	jmp	.Ltmp3192 # Offset: 643
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp3188:
    00000288: 	testb	%bpl, %bpl
    0000028b: 	jne	.Ltmp3193 # Offset: 651
.Ltmp3207:
    00000291: 	movq	$0x0, (%r13)
.Ltmp3184:
    00000299: 	addq	$0x8, (%rsp)
    0000029e: 	movq	(%rsp), %rax
    000002a2: 	cmpq	%rax, 0x10(%rsp)
    000002a7: 	jne	.Ltmp3194 # Offset: 679
    000002ad: 	movq	0x38(%rsp), %r12
    000002b2: 	callq	clock@PLT # Offset: 690
    000002b7: 	pxor	%xmm0, %xmm0
    000002bb: 	movq	0x10(%rsp), %r13
    000002c0: 	movq	%rax, end_time(%rip)
    000002c7: 	subq	start_time(%rip), %rax
    000002ce: 	cvtsi2sd	%rax, %xmm0
    000002d3: 	divsd	DATAat0x53788(%rip), %xmm0
    000002db: 	addsd	0x30(%rsp), %xmm0
    000002e1: 	movq	0x8(%rsp), %rax
    000002e6: 	movq	%rax, %rbx
    000002e9: 	addq	%rax, %r13
    000002ec: 	movsd	%xmm0, 0x30(%rsp)
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3199:
    000002f8: 	movq	(%rbx), %r14
    000002fb: 	testq	%r14, %r14
    000002fe: 	je	.Ltmp3195 # Offset: 766
    00000300: 	movq	0x10(%r14), %rbp
    00000304: 	testq	%rbp, %rbp
    00000307: 	je	.Ltmp3196 # Offset: 775
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp3197:
    00000310: 	movq	%rbp, %rdi
    00000313: 	movq	(%rbp), %rbp
    00000317: 	movl	$0x18, %esi
    0000031c: 	callq	_ZdlPvm@PLT # Offset: 796
    00000321: 	testq	%rbp, %rbp
    00000324: 	jne	.Ltmp3197 # Offset: 804
.Ltmp3196:
    00000326: 	movq	0x8(%r14), %rax
    0000032a: 	movq	(%r14), %rdi
    0000032d: 	xorl	%esi, %esi
    0000032f: 	leaq	(,%rax,8), %rdx
    00000337: 	callq	memset@PLT # Offset: 823
    0000033c: 	movq	(%r14), %rdi
    0000033f: 	leaq	0x30(%r14), %rax
    00000343: 	movq	0x8(%r14), %rsi
    00000347: 	movq	$0x0, 0x18(%r14)
    0000034f: 	movq	$0x0, 0x10(%r14)
    00000357: 	cmpq	%rax, %rdi
    0000035a: 	je	.Ltmp3198 # Offset: 858
    0000035c: 	shlq	$0x3, %rsi
    00000360: 	callq	_ZdlPvm@PLT # Offset: 864
.Ltmp3198:
    00000365: 	movl	$0x38, %esi
    0000036a: 	movq	%r14, %rdi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp3195:
    00000372: 	movq	$0x0, (%rbx)
    00000379: 	addq	$0x8, %rbx
    0000037d: 	cmpq	%r13, %rbx
    00000380: 	jne	.Ltmp3199 # Offset: 896
    00000386: 	movl	0x28(%rsp), %ecx
    0000038a: 	movl	iterations(%rip), %eax
    00000390: 	addl	%ecx, 0x40(%rsp)
    00000394: 	movl	0x40(%rsp), %ecx
    00000398: 	cmpl	%ecx, %eax
    0000039a: 	jg	.Ltmp3200 # Offset: 922
.Ltmp3211:
    000003a0: 	movq	0x48(%rsp), %rdi
    000003a5: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 933
    000003aa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003b1: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003b8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003bf: 	je	.Ltmp3201 # Offset: 959
.Ltmp3210:
    000003c5: 	movq	-0x20(%rax), %rdi
    000003c9: 	movsd	0x30(%rsp), %xmm0
    000003cf: 	callq	_Z13record_resultdPKc # Offset: 975
    000003d4: 	cmpq	$0x0, 0x8(%rsp)
    000003da: 	je	.Ltmp3202 # Offset: 986
    000003e0: 	movq	0x78(%rsp), %rax
    000003e5: 	subq	%fs:0x28, %rax
    000003ee: 	jne	.Ltmp3203 # Offset: 1006
    000003f4: 	movq	0x70(%rsp), %rsi
    000003f9: 	movq	0x8(%rsp), %rdi
    000003fe: 	addq	$0x88, %rsp
    00000405: 	popq	%rbx
    00000406: 	popq	%rbp
    00000407: 	subq	%rdi, %rsi
    0000040a: 	popq	%r12
    0000040c: 	popq	%r13
    0000040e: 	popq	%r14
    00000410: 	popq	%r15
    00000412: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1042
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3189:
    00000420: 	movl	$0xc70f6907, %edx
    00000425: 	leaq	0x50(%rsp), %rdi
    0000042a: 	movl	$0x8, %esi
    0000042f: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1071
    00000434: 	xorl	%edx, %edx
    00000436: 	divq	%r15
    00000439: 	jmp	.Ltmp3204 # Offset: 1081
    0000043e: 	nop # Size: 2
.Ltmp3191:
    00000440: 	movq	(%r12), %rcx
    00000444: 	leaq	(%rcx,%rbx,8), %rax
    00000448: 	movq	(%rax), %rsi
    0000044b: 	movq	%rsi, (%rcx,%rdx,8)
    0000044f: 	leaq	0x10(%r12), %rcx
    00000454: 	cmpq	%rcx, (%rax)
    00000457: 	je	.Ltmp3205 # Offset: 1111
.Ltmp3212:
    0000045d: 	movq	$0x0, (%rax)
    00000464: 	jmp	.Ltmp3190 # Offset: 1124
    00000469: 	nopl	(%rax) # Size: 7
.Ltmp3193:
    00000470: 	movq	(%r12), %rax
    00000474: 	leaq	0x10(%r12), %rdx
    00000479: 	leaq	(%rax,%rbx,8), %rax
    0000047d: 	cmpq	%rdx, (%rax)
    00000480: 	jne	.Ltmp3206 # Offset: 1152
    00000482: 	movq	$0x0, 0x10(%r12)
.Ltmp3206:
    0000048b: 	movq	$0x0, (%rax)
    00000492: 	movq	0x60(%rsp), %rax
    00000497: 	movq	%rax, 0x8(%rsp)
    0000049c: 	jmp	.Ltmp3207 # Offset: 1180
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp3185:
    000004a8: 	movl	$0xc70f6907, %edx
    000004ad: 	leaq	0x50(%rsp), %rdi
    000004b2: 	movl	$0x8, %esi
    000004b7: 	movq	%r8, 0x20(%rsp)
    000004bc: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1212
    000004c1: 	xorl	%edx, %edx
    000004c3: 	movq	0x20(%rsp), %r8
    000004c8: 	divq	%rbp
    000004cb: 	movq	%rdx, %rbx
    000004ce: 	leaq	(,%rdx,8), %rax
    000004d6: 	jmp	.Ltmp3208 # Offset: 1238
.Ltmp3202:
    000004db: 	movq	0x78(%rsp), %rax
    000004e0: 	subq	%fs:0x28, %rax
    000004e9: 	jne	.Ltmp3203 # Offset: 1257
    000004eb: 	addq	$0x88, %rsp
    000004f2: 	popq	%rbx
    000004f3: 	popq	%rbp
    000004f4: 	popq	%r12
    000004f6: 	popq	%r13
    000004f8: 	popq	%r14
    000004fa: 	popq	%r15
    000004fc: 	retq # Offset: 1276
.Ltmp3178:
    000004fd: 	movq	$0x3e8, 0x28(%rsp)
.Ltmp3179:
    00000506: 	movq	$0x0, 0x70(%rsp)
    0000050f: 	pxor	%xmm0, %xmm0
    00000513: 	movaps	%xmm0, 0x60(%rsp)
    00000518: 	jmp	.Ltmp3209 # Offset: 1304
.Ltmp3201:
    0000051d: 	movq	-0x8(%rdx), %rax
    00000521: 	addq	$0x200, %rax
    00000527: 	jmp	.Ltmp3210 # Offset: 1319
.Ltmp3180:
    0000052c: 	pxor	%xmm4, %xmm4
    00000530: 	movsd	%xmm4, 0x30(%rsp)
    00000536: 	jmp	.Ltmp3211 # Offset: 1334
.Ltmp3203:
    0000053b: 	callq	__stack_chk_fail@PLT # Offset: 1339
.Ltmp3205:
    00000540: 	movq	%r14, 0x10(%r12)
    00000545: 	jmp	.Ltmp3212 # Offset: 1349
    0000054a: 	endbr64
    0000054e: 	movq	%rax, %rbp
    00000551: 	movq	0x60(%rsp), %rdi
    00000556: 	movq	0x70(%rsp), %rsi
    0000055b: 	subq	%rdi, %rsi
    0000055e: 	testq	%rdi, %rdi
    00000561: 	je	.Ltmp3213 # Offset: 1377
    00000563: 	callq	_ZdlPvm@PLT # Offset: 1379
.Ltmp3213:
    00000568: 	movq	%rbp, %rdi
    0000056b: 	callq	_Unwind_Resume@PLT # Offset: 1387
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_eraseall_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIP7HashMapIddESaIS2_EE17_M_default_appendEm" after disassembly {
  Number      : 217
  State       : disassembled
  Address     : 0x21700
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x21700
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIP7HashMapIddESaIS2_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0216:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp3214 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp3215 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp3216 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp3217 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp3218 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp3225:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp3219 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp3219:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp3220 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp3221 # Offset: 200
.Ltmp3223:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp3215:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp3222 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp3222:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3214:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp3220:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp3224:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp3223 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3221:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp3224 # Offset: 392
.Ltmp3218:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp3226:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp3225 # Offset: 445
.Ltmp3217:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp3226 # Offset: 460
.Ltmp3216:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIP7HashMapIddESaIS2_EE17_M_default_appendEm"

Binary Function "_Z17test_eraseall_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 218
  State       : disassembled
  Address     : 0x218e0
  Size        : 0xa45
  MaxSize     : 0xa50
  Offset      : 0x218e0
  Section     : .text
  Orc Section : .local.text._Z17test_eraseall_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0217:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xa8, %rsp
    0000001b: 	movq	%rdx, 0x68(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x40(%rsp)
    00000027: 	movq	%rsi, 0x20(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x98(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	movabsq	$0x500000000, %rax
    00000049: 	divq	%rcx
    0000004c: 	movq	%rax, 0x48(%rsp)
    00000051: 	cmpq	$0x3e8, %rax
    00000057: 	ja	.Ltmp3227 # Offset: 87
    0000005d: 	cmpq	$0x3, %rax
    00000061: 	ja	.Ltmp3228 # Offset: 97
    00000067: 	movq	$0x0, 0x90(%rsp)
    00000073: 	pxor	%xmm0, %xmm0
    00000077: 	movq	$0x4, 0x48(%rsp)
    00000080: 	movaps	%xmm0, 0x80(%rsp)
.Ltmp3247:
    00000088: 	movq	0x48(%rsp), %rbx
    0000008d: 	leaq	0x80(%rsp), %rdi
    00000095: 	movq	%rbx, %rsi
    00000098: 	callq	_ZNSt6vectorIP7HashMapIddESaIS2_EE17_M_default_appendEm # Offset: 152
    0000009d: 	movl	iterations(%rip), %eax
    000000a3: 	testl	%eax, %eax
    000000a5: 	jle	.Ltmp3229 # Offset: 165
    000000ab: 	movl	%ebx, 0x5c(%rsp)
    000000af: 	movq	$0x0, 0x50(%rsp)
    000000b8: 	movl	$0x0, 0x58(%rsp)
.Ltmp3277:
    000000c0: 	movslq	0x58(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	$0x0, 0x30(%rsp)
    000000d1: 	movq	%rdx, %rsi
    000000d4: 	addq	0x48(%rsp), %rdx
    000000d9: 	subl	%esi, %eax
    000000db: 	cmpq	%rcx, %rdx
    000000de: 	cmovbl	0x5c(%rsp), %eax
    000000e3: 	leal	-0x1(%rax), %ecx
    000000e6: 	movl	%eax, %eax
    000000e8: 	shlq	$0x3, %rax
    000000ec: 	movq	%rcx, 0x60(%rsp)
    000000f1: 	movq	%rax, 0x38(%rsp)
.Ltmp3252:
    000000f6: 	movl	$0x30, %edi
    000000fb: 	callq	_Znwm@PLT # Offset: 251
    00000100: 	pxor	%xmm0, %xmm0
    00000104: 	movq	$0x0, 0x18(%rax)
    0000010c: 	movq	%rax, %rbp
    0000010f: 	movq	$0x0, 0x20(%rax)
    00000117: 	movl	$0x3f800000, 0x28(%rax)
    0000011e: 	movups	%xmm0, 0x8(%rax)
    00000122: 	movq	0x40(%rsp), %rax
    00000127: 	cmpq	%rax, 0x20(%rsp)
    0000012c: 	je	.Ltmp3230 # Offset: 300
    00000132: 	xorl	%ebx, %ebx
    00000134: 	movq	%rax, 0x8(%rsp)
    00000139: 	testq	%rbx, %rbx
    0000013c: 	je	.Ltmp3231 # Offset: 316
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3236:
    00000148: 	movq	0x8(%rsp), %rax
    0000014d: 	pxor	%xmm7, %xmm7
    00000151: 	movsd	(%rax), %xmm0
    00000155: 	ucomisd	%xmm7, %xmm0
    00000159: 	movsd	%xmm0, 0x78(%rsp)
    0000015f: 	jp	.Ltmp3232 # Offset: 351
    00000165: 	movl	$0x0, %eax
    0000016a: 	jne	.Ltmp3232 # Offset: 362
.Ltmp3248:
    00000170: 	xorl	%edx, %edx
    00000172: 	divq	0x18(%rbp)
    00000176: 	movq	0x20(%rbp), %rax
    0000017a: 	movq	(%rax,%rdx,8), %rbx
    0000017e: 	leaq	(,%rdx,8), %r12
    00000186: 	testq	%rbx, %rbx
    00000189: 	je	.Ltmp3233 # Offset: 393
    0000018f: 	movq	0x8(%rsp), %rax
    00000194: 	movsd	(%rax), %xmm0
    00000198: 	jmp	.Ltmp3234 # Offset: 408
    0000019a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3235:
    000001a0: 	movq	0x10(%rbx), %rbx
    000001a4: 	testq	%rbx, %rbx
    000001a7: 	je	.Ltmp3233 # Offset: 423
.Ltmp3234:
    000001ad: 	ucomisd	(%rbx), %xmm0
    000001b1: 	jp	.Ltmp3235 # Offset: 433
    000001b3: 	jne	.Ltmp3235 # Offset: 435
.Ltmp3250:
    000001b5: 	addq	$0x8, 0x8(%rsp)
    000001bb: 	addq	$0x8, %rbx
    000001bf: 	movq	0x8(%rsp), %rax
    000001c4: 	movsd	%xmm0, (%rbx)
    000001c8: 	cmpq	%rax, 0x20(%rsp)
    000001cd: 	je	.Ltmp3230 # Offset: 461
    000001d3: 	movq	0x10(%rbp), %rbx
    000001d7: 	testq	%rbx, %rbx
    000001da: 	jne	.Ltmp3236 # Offset: 474
.Ltmp3231:
    000001e0: 	movss	DATAat0x537b0(%rip), %xmm2
    000001e8: 	movss	DATAat0x537a4(%rip), %xmm0
    000001f0: 	divss	0x28(%rbp), %xmm0
    000001f5: 	movaps	%xmm0, %xmm1
    000001f8: 	movss	DATAat0x5379c(%rip), %xmm3
    00000200: 	movq	0x18(%rbp), %rax
    00000204: 	andps	%xmm2, %xmm1
    00000207: 	ucomiss	%xmm1, %xmm3
    0000020a: 	movq	%rax, 0x18(%rsp)
    0000020f: 	jbe	.Ltmp3237 # Offset: 527
    00000211: 	cvttss2si	%xmm0, %eax
    00000215: 	pxor	%xmm1, %xmm1
    00000219: 	movaps	%xmm0, %xmm3
    0000021c: 	movss	DATAat0x53798(%rip), %xmm4
    00000224: 	andnps	%xmm0, %xmm2
    00000227: 	cvtsi2ss	%eax, %xmm1
    0000022b: 	cmpnless	%xmm1, %xmm3
    00000230: 	andps	%xmm4, %xmm3
    00000233: 	addss	%xmm3, %xmm1
    00000237: 	orps	%xmm2, %xmm1
    0000023a: 	movaps	%xmm1, %xmm0
.Ltmp3237:
    0000023d: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000244: 	jae	.Ltmp3238 # Offset: 580
    0000024a: 	cvttss2si	%xmm0, %rax
.Ltmp3251:
    0000024f: 	movl	$0x8, %edx
    00000254: 	movq	0x18(%rsp), %r15
    00000259: 	movq	$0x8, 0x18(%rbp)
    00000261: 	cmpq	%rdx, %rax
    00000264: 	cmovbq	%rdx, %rax
    00000268: 	movq	%rax, %rdx
    0000026b: 	shrq	%rdx
    0000026e: 	addq	%rdx, %rax
    00000271: 	movq	%rax, 0x10(%rbp)
    00000275: 	cmpq	$0x8, %r15
    00000279: 	je	.Ltmp3236 # Offset: 633
    0000027f: 	movl	$0x40, %edi
    00000284: 	callq	_Znam@PLT # Offset: 644
    00000289: 	pxor	%xmm0, %xmm0
    0000028d: 	movq	%rax, %r14
    00000290: 	movups	%xmm0, (%rax)
    00000293: 	movups	%xmm0, 0x10(%rax)
    00000297: 	movups	%xmm0, 0x20(%rax)
    0000029b: 	movups	%xmm0, 0x30(%rax)
    0000029f: 	movq	0x20(%rbp), %rax
    000002a3: 	movq	%rax, 0x10(%rsp)
    000002a8: 	testq	%r15, %r15
    000002ab: 	je	.Ltmp3239 # Offset: 683
    000002b1: 	movl	$0xc70f6907, %r12d
    000002b7: 	movq	%r14, %r15
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3245:
    000002c0: 	movq	0x10(%rsp), %rax
    000002c5: 	movq	(%rax,%rbx,8), %r13
    000002c9: 	testq	%r13, %r13
    000002cc: 	jne	.Ltmp3240 # Offset: 716
    000002ce: 	jmp	.Ltmp3241 # Offset: 718
.Ltmp3243:
    000002d0: 	movq	(%r15), %rax
    000002d3: 	movq	%rax, 0x10(%r13)
    000002d7: 	movq	%r13, (%r15)
    000002da: 	testq	%r14, %r14
    000002dd: 	je	.Ltmp3241 # Offset: 733
.Ltmp3244:
    000002df: 	movq	%r14, %r13
.Ltmp3240:
    000002e2: 	movsd	(%r13), %xmm0
    000002e8: 	pxor	%xmm5, %xmm5
    000002ec: 	movq	0x10(%r13), %r14
    000002f0: 	ucomisd	%xmm5, %xmm0
    000002f4: 	movsd	%xmm0, 0x78(%rsp)
    000002fa: 	jp	.Ltmp3242 # Offset: 762
    000002fc: 	je	.Ltmp3243 # Offset: 764
.Ltmp3242:
    000002fe: 	movq	%r12, %rdx
    00000301: 	leaq	0x78(%rsp), %rdi
    00000306: 	movl	$0x8, %esi
    0000030b: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 779
    00000310: 	xorl	%edx, %edx
    00000312: 	divq	0x18(%rbp)
    00000316: 	leaq	(%r15,%rdx,8), %rax
    0000031a: 	movq	(%rax), %rdx
    0000031d: 	movq	%rdx, 0x10(%r13)
    00000321: 	movq	%r13, (%rax)
    00000324: 	testq	%r14, %r14
    00000327: 	jne	.Ltmp3244 # Offset: 807
.Ltmp3241:
    00000329: 	addq	$0x1, %rbx
    0000032d: 	cmpq	%rbx, 0x18(%rsp)
    00000332: 	jne	.Ltmp3245 # Offset: 818
    00000334: 	movq	0x20(%rbp), %rax
    00000338: 	movq	%r15, %r14
    0000033b: 	movq	%rax, 0x10(%rsp)
.Ltmp3239:
    00000340: 	movq	0x10(%rsp), %rax
    00000345: 	testq	%rax, %rax
    00000348: 	je	.Ltmp3246 # Offset: 840
    0000034a: 	movq	%rax, %rdi
    0000034d: 	callq	_ZdaPv@PLT # Offset: 845
.Ltmp3246:
    00000352: 	movq	%r14, 0x20(%rbp)
    00000356: 	jmp	.Ltmp3236 # Offset: 854
.Ltmp3227:
    0000035b: 	movq	$0x3e8, 0x48(%rsp)
.Ltmp3228:
    00000364: 	movq	$0x0, 0x90(%rsp)
    00000370: 	pxor	%xmm0, %xmm0
    00000374: 	movaps	%xmm0, 0x80(%rsp)
    0000037c: 	jmp	.Ltmp3247 # Offset: 892
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp3232:
    00000388: 	leaq	0x78(%rsp), %rdi
    0000038d: 	movl	$0xc70f6907, %edx
    00000392: 	movl	$0x8, %esi
    00000397: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 919
    0000039c: 	jmp	.Ltmp3248 # Offset: 924
    000003a1: 	nopl	(%rax) # Size: 7
.Ltmp3233:
    000003a8: 	movl	$0x18, %edi
    000003ad: 	callq	_Znwm@PLT # Offset: 941
    000003b2: 	movq	0x8(%rsp), %rcx
    000003b7: 	addq	0x20(%rbp), %r12
    000003bb: 	movq	%rax, 0x28(%rsp)
    000003c0: 	movq	$0x0, 0x8(%rax)
    000003c8: 	movsd	(%rcx), %xmm0
    000003cc: 	movq	%rax, %rcx
    000003cf: 	movsd	%xmm0, (%rax)
    000003d3: 	movq	(%r12), %rax
    000003d7: 	movq	%rax, 0x10(%rcx)
    000003db: 	movq	0x8(%rbp), %rax
    000003df: 	movq	%rcx, (%r12)
    000003e3: 	movq	0x10(%rbp), %r12
    000003e7: 	addq	$0x1, %rax
    000003eb: 	movq	%rax, 0x8(%rbp)
    000003ef: 	cmpq	%r12, %rax
    000003f2: 	ja	.Ltmp3249 # Offset: 1010
.Ltmp3287:
    000003f8: 	movq	0x28(%rsp), %rbx
    000003fd: 	jmp	.Ltmp3250 # Offset: 1021
.Ltmp3238:
    00000402: 	subss	DATAat0x537a0(%rip), %xmm0
    0000040a: 	cvttss2si	%xmm0, %rax
    0000040f: 	btcq	$0x3f, %rax
    00000414: 	jmp	.Ltmp3251 # Offset: 1044
.Ltmp3230:
    00000419: 	movq	0x30(%rsp), %rax
    0000041e: 	movq	0x80(%rsp), %rcx
    00000426: 	movq	%rbp, (%rcx,%rax)
    0000042a: 	addq	$0x8, %rax
    0000042e: 	movq	%rcx, 0x10(%rsp)
    00000433: 	movq	%rax, 0x30(%rsp)
    00000438: 	cmpq	%rax, 0x38(%rsp)
    0000043d: 	jne	.Ltmp3252 # Offset: 1085
    00000443: 	callq	clock@PLT # Offset: 1091
    00000448: 	movq	0x10(%rsp), %rbx
    0000044d: 	movq	%rax, start_time(%rip)
    00000454: 	movq	0x60(%rsp), %rax
    00000459: 	movq	%rbx, 0x18(%rsp)
    0000045e: 	leaq	0x8(%rbx,%rax,8), %rax
    00000463: 	movq	%rax, 0x8(%rsp)
    00000468: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3269:
    00000470: 	movq	(%rbx), %r14
    00000473: 	movq	0x20(%r14), %r12
    00000477: 	movq	0x18(%r14), %r15
    0000047b: 	movq	(%r12), %rcx
    0000047f: 	testq	%r15, %r15
    00000482: 	je	.Ltmp3253 # Offset: 1154
    00000488: 	testq	%rcx, %rcx
    0000048b: 	je	.Ltmp3254 # Offset: 1163
.Ltmp3297:
    00000491: 	xorl	%eax, %eax
.Ltmp3267:
    00000493: 	movq	%rcx, %rdi
    00000496: 	movq	%r12, %rdx
    00000499: 	movq	0x10(%rdi), %rsi
    0000049d: 	testq	%rsi, %rsi
    000004a0: 	je	.Ltmp3255 # Offset: 1184
    000004a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3261:
    000004a8: 	movq	%rax, %rbp
    000004ab: 	movq	%rsi, %r13
.Ltmp3265:
    000004ae: 	leaq	(%rdx,%rax,8), %r8
    000004b2: 	movq	%rcx, %rax
    000004b5: 	jmp	.Ltmp3256 # Offset: 1205
    000004b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3258:
    000004c0: 	movq	0x10(%rax), %rdx
    000004c4: 	cmpq	%rdx, %rdi
    000004c7: 	je	.Ltmp3257 # Offset: 1223
    000004cd: 	movq	%rdx, %rax
.Ltmp3256:
    000004d0: 	testq	%rax, %rax
    000004d3: 	jne	.Ltmp3258 # Offset: 1235
.Ltmp3281:
    000004d5: 	cmpq	%rcx, %rdi
    000004d8: 	je	.Ltmp3259 # Offset: 1240
.Ltmp3282:
    000004de: 	movl	$0x18, %esi
    000004e3: 	callq	_ZdlPvm@PLT # Offset: 1251
    000004e8: 	subq	$0x1, 0x8(%r14)
    000004ed: 	testq	%r13, %r13
    000004f0: 	je	.Ltmp3260 # Offset: 1264
    000004f2: 	movq	%r13, %rdi
    000004f5: 	movq	0x20(%r14), %rdx
    000004f9: 	movq	%rbp, %rax
    000004fc: 	movq	0x10(%rdi), %rsi
    00000500: 	movq	(%rdx,%rbp,8), %rcx
    00000504: 	testq	%rsi, %rsi
    00000507: 	jne	.Ltmp3261 # Offset: 1287
.Ltmp3255:
    00000509: 	cmpq	%rax, %r15
    0000050c: 	jbe	.Ltmp3262 # Offset: 1292
    00000512: 	leaq	0x1(%rax), %rbp
    00000516: 	cmpq	%rbp, %r15
    00000519: 	ja	.Ltmp3263 # Offset: 1305
    0000051b: 	jmp	.Ltmp3264 # Offset: 1307
.Ltmp3266:
    00000520: 	addq	$0x1, %rbp
    00000524: 	cmpq	%rbp, %r15
    00000527: 	jbe	.Ltmp3265 # Offset: 1319
.Ltmp3263:
    00000529: 	movq	(%r12,%rbp,8), %r13
    0000052d: 	testq	%r13, %r13
    00000530: 	je	.Ltmp3266 # Offset: 1328
    00000532: 	jmp	.Ltmp3265 # Offset: 1330
.Ltmp3254:
    00000537: 	cmpq	$0x1, %r15
    0000053b: 	je	.Ltmp3260 # Offset: 1339
    0000053d: 	movl	$0x1, %eax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3268:
    00000548: 	movq	(%r12,%rax,8), %rcx
    0000054c: 	testq	%rcx, %rcx
    0000054f: 	jne	.Ltmp3267 # Offset: 1359
    00000555: 	addq	$0x1, %rax
    00000559: 	cmpq	%rax, %r15
    0000055c: 	jne	.Ltmp3268 # Offset: 1372
    0000055e: 	nop # Size: 2
.Ltmp3260:
    00000560: 	addq	$0x8, %rbx
    00000564: 	cmpq	%rbx, 0x8(%rsp)
    00000569: 	jne	.Ltmp3269 # Offset: 1385
.Ltmp3298:
    0000056f: 	callq	clock@PLT # Offset: 1391
    00000574: 	pxor	%xmm0, %xmm0
    00000578: 	movq	0x18(%rsp), %r13
    0000057d: 	movq	0x8(%rsp), %r14
    00000582: 	movq	%rax, end_time(%rip)
    00000589: 	subq	start_time(%rip), %rax
    00000590: 	cvtsi2sd	%rax, %xmm0
    00000595: 	divsd	DATAat0x53788(%rip), %xmm0
    0000059d: 	addsd	0x50(%rsp), %xmm0
    000005a3: 	movsd	%xmm0, 0x50(%rsp)
.Ltmp3276:
    000005a9: 	movq	(%r13), %r12
    000005ad: 	testq	%r12, %r12
    000005b0: 	je	.Ltmp3270 # Offset: 1456
    000005b2: 	movq	0x18(%r12), %rdx
    000005b7: 	movq	0x20(%r12), %rdi
    000005bc: 	testq	%rdx, %rdx
    000005bf: 	je	.Ltmp3271 # Offset: 1471
    000005c1: 	xorl	%ebp, %ebp
    000005c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3274:
    000005c8: 	leaq	(%rdi,%rbp,8), %rax
    000005cc: 	movq	(%rax), %rbx
    000005cf: 	movq	$0x0, (%rax)
    000005d6: 	testq	%rbx, %rbx
    000005d9: 	je	.Ltmp3272 # Offset: 1497
    000005db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3273:
    000005e0: 	movq	%rbx, %rdi
    000005e3: 	movq	0x10(%rbx), %rbx
    000005e7: 	movl	$0x18, %esi
    000005ec: 	callq	_ZdlPvm@PLT # Offset: 1516
    000005f1: 	testq	%rbx, %rbx
    000005f4: 	jne	.Ltmp3273 # Offset: 1524
    000005f6: 	movq	0x18(%r12), %rdx
    000005fb: 	movq	0x20(%r12), %rdi
.Ltmp3272:
    00000600: 	addq	$0x1, %rbp
    00000604: 	cmpq	%rbp, %rdx
    00000607: 	ja	.Ltmp3274 # Offset: 1543
.Ltmp3271:
    00000609: 	movq	$0x0, 0x8(%r12)
    00000612: 	testq	%rdi, %rdi
    00000615: 	je	.Ltmp3275 # Offset: 1557
    00000617: 	callq	_ZdaPv@PLT # Offset: 1559
.Ltmp3275:
    0000061c: 	movl	$0x30, %esi
    00000621: 	movq	%r12, %rdi
    00000624: 	callq	_ZdlPvm@PLT # Offset: 1572
.Ltmp3270:
    00000629: 	movq	$0x0, (%r13)
    00000631: 	addq	$0x8, %r13
    00000635: 	cmpq	%r14, %r13
    00000638: 	jne	.Ltmp3276 # Offset: 1592
    0000063e: 	movl	0x48(%rsp), %ecx
    00000642: 	movl	iterations(%rip), %eax
    00000648: 	addl	%ecx, 0x58(%rsp)
    0000064c: 	movl	0x58(%rsp), %ecx
    00000650: 	cmpl	%ecx, %eax
    00000652: 	jg	.Ltmp3277 # Offset: 1618
.Ltmp3306:
    00000658: 	movq	0x68(%rsp), %rdi
    0000065d: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1629
    00000662: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000669: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000670: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000677: 	je	.Ltmp3278 # Offset: 1655
.Ltmp3305:
    0000067d: 	movq	-0x20(%rax), %rdi
    00000681: 	movsd	0x50(%rsp), %xmm0
    00000687: 	callq	_Z13record_resultdPKc # Offset: 1671
    0000068c: 	cmpq	$0x0, 0x10(%rsp)
    00000692: 	je	.Ltmp3279 # Offset: 1682
    00000698: 	movq	0x98(%rsp), %rax
    000006a0: 	subq	%fs:0x28, %rax
    000006a9: 	jne	.Ltmp3280 # Offset: 1705
    000006af: 	movq	0x90(%rsp), %rsi
    000006b7: 	movq	0x10(%rsp), %rdi
    000006bc: 	addq	$0xa8, %rsp
    000006c3: 	popq	%rbx
    000006c4: 	popq	%rbp
    000006c5: 	subq	%rdi, %rsi
    000006c8: 	popq	%r12
    000006ca: 	popq	%r13
    000006cc: 	popq	%r14
    000006ce: 	popq	%r15
    000006d0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1744
    000006d5: 	nopl	(%rax) # Size: 3
.Ltmp3257:
    000006d8: 	cmpq	%rax, %rdi
    000006db: 	je	.Ltmp3281 # Offset: 1755
    000006e1: 	movq	%rsi, 0x10(%rax)
    000006e5: 	movq	(%r8), %rcx
    000006e8: 	cmpq	%rcx, %rdi
    000006eb: 	jne	.Ltmp3282 # Offset: 1771
.Ltmp3259:
    000006f1: 	movq	%rsi, (%r8)
    000006f4: 	jmp	.Ltmp3282 # Offset: 1780
.Ltmp3262:
    000006f9: 	movq	%rax, %rbp
    000006fc: 	xorl	%r13d, %r13d
    000006ff: 	jmp	.Ltmp3265 # Offset: 1791
.Ltmp3249:
    00000704: 	movq	0x18(%rbp), %rax
    00000708: 	movss	0x28(%rbp), %xmm2
    0000070d: 	movq	%rax, 0x10(%rsp)
    00000712: 	testq	%r12, %r12
    00000715: 	je	.Ltmp3283 # Offset: 1813
    0000071b: 	js	.Ltmp3284 # Offset: 1819
    00000721: 	pxor	%xmm1, %xmm1
    00000725: 	cvtsi2ss	%r12, %xmm1
.Ltmp3304:
    0000072a: 	divss	%xmm2, %xmm1
    0000072e: 	movss	DATAat0x537b0(%rip), %xmm3
    00000736: 	movss	DATAat0x5379c(%rip), %xmm4
    0000073e: 	movaps	%xmm1, %xmm2
    00000741: 	andps	%xmm3, %xmm2
    00000744: 	ucomiss	%xmm2, %xmm4
    00000747: 	jbe	.Ltmp3285 # Offset: 1863
    00000749: 	cvttss2si	%xmm1, %eax
    0000074d: 	pxor	%xmm2, %xmm2
    00000751: 	movaps	%xmm1, %xmm4
    00000754: 	movss	DATAat0x53798(%rip), %xmm7
    0000075c: 	andnps	%xmm1, %xmm3
    0000075f: 	cvtsi2ss	%eax, %xmm2
    00000763: 	cmpnless	%xmm2, %xmm4
    00000768: 	andps	%xmm7, %xmm4
    0000076b: 	addss	%xmm4, %xmm2
    0000076f: 	orps	%xmm3, %xmm2
    00000772: 	movaps	%xmm2, %xmm1
.Ltmp3285:
    00000775: 	comiss	DATAat0x537a0(%rip), %xmm1
    0000077c: 	jae	.Ltmp3286 # Offset: 1916
    00000782: 	cvttss2si	%xmm1, %rax
.Ltmp3302:
    00000787: 	movl	$0x8, %edx
    0000078c: 	movq	%r12, %xmm4
    00000791: 	cmpq	%rdx, %rax
    00000794: 	cmovbq	%rdx, %rax
    00000798: 	movq	%rax, %rdx
    0000079b: 	shrq	%rdx
    0000079e: 	addq	%rax, %rdx
    000007a1: 	movq	%rdx, %xmm1
    000007a6: 	punpcklqdq	%xmm4, %xmm1
    000007aa: 	movups	%xmm1, 0x10(%rbp)
    000007ae: 	cmpq	0x10(%rsp), %r12
    000007b3: 	je	.Ltmp3287 # Offset: 1971
    000007b9: 	movq	%r12, %rax
    000007bc: 	shrq	$0x3c, %rax
    000007c0: 	jne	.Ltmp3288 # Offset: 1984
    000007c6: 	leaq	(,%r12,8), %rdi
.Ltmp3301:
    000007ce: 	callq	_Znam@PLT # Offset: 1998
    000007d3: 	xorl	%esi, %esi
    000007d5: 	leaq	(,%r12,8), %rdx
    000007dd: 	movq	%rax, %rdi
    000007e0: 	movq	%rax, %r15
    000007e3: 	callq	memset@PLT # Offset: 2019
    000007e8: 	cmpq	$0x0, 0x10(%rsp)
    000007ee: 	movq	0x20(%rbp), %r13
    000007f2: 	je	.Ltmp3289 # Offset: 2034
    000007f8: 	movq	%r13, 0x18(%rsp)
    000007fd: 	xorl	%r12d, %r12d
    00000800: 	movl	$0xc70f6907, %r14d
    00000806: 	movq	%r15, %r13
    00000809: 	nopl	(%rax) # Size: 7
.Ltmp3295:
    00000810: 	movq	0x18(%rsp), %rax
    00000815: 	movq	(%rax,%r12,8), %rbx
    00000819: 	testq	%rbx, %rbx
    0000081c: 	jne	.Ltmp3290 # Offset: 2076
    0000081e: 	jmp	.Ltmp3291 # Offset: 2078
.Ltmp3293:
    00000820: 	movq	(%r13), %rax
    00000824: 	movq	%rax, 0x10(%rbx)
    00000828: 	movq	%rbx, (%r13)
    0000082c: 	testq	%r15, %r15
    0000082f: 	je	.Ltmp3291 # Offset: 2095
.Ltmp3294:
    00000831: 	movq	%r15, %rbx
.Ltmp3290:
    00000834: 	movsd	(%rbx), %xmm0
    00000838: 	pxor	%xmm6, %xmm6
    0000083c: 	movq	0x10(%rbx), %r15
    00000840: 	ucomisd	%xmm6, %xmm0
    00000844: 	movsd	%xmm0, 0x78(%rsp)
    0000084a: 	jp	.Ltmp3292 # Offset: 2122
    0000084c: 	je	.Ltmp3293 # Offset: 2124
.Ltmp3292:
    0000084e: 	movq	%r14, %rdx
    00000851: 	leaq	0x78(%rsp), %rdi
    00000856: 	movl	$0x8, %esi
    0000085b: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 2139
    00000860: 	xorl	%edx, %edx
    00000862: 	divq	0x18(%rbp)
    00000866: 	leaq	(%r13,%rdx,8), %rax
    0000086b: 	movq	(%rax), %rdx
    0000086e: 	movq	%rdx, 0x10(%rbx)
    00000872: 	movq	%rbx, (%rax)
    00000875: 	testq	%r15, %r15
    00000878: 	jne	.Ltmp3294 # Offset: 2168
.Ltmp3291:
    0000087a: 	addq	$0x1, %r12
    0000087e: 	cmpq	%r12, 0x10(%rsp)
    00000883: 	jne	.Ltmp3295 # Offset: 2179
    00000885: 	movq	%r13, %r15
    00000888: 	movq	0x20(%rbp), %r13
.Ltmp3289:
    0000088c: 	testq	%r13, %r13
    0000088f: 	je	.Ltmp3296 # Offset: 2191
    00000891: 	movq	%r13, %rdi
    00000894: 	callq	_ZdaPv@PLT # Offset: 2196
.Ltmp3296:
    00000899: 	movq	0x8(%rsp), %rax
    0000089e: 	movq	%r15, 0x20(%rbp)
    000008a2: 	movsd	(%rax), %xmm0
    000008a6: 	jmp	.Ltmp3287 # Offset: 2214
.Ltmp3253:
    000008ab: 	testq	%rcx, %rcx
    000008ae: 	jne	.Ltmp3297 # Offset: 2222
    000008b4: 	addq	$0x8, %rbx
    000008b8: 	cmpq	%rbx, 0x8(%rsp)
    000008bd: 	jne	.Ltmp3269 # Offset: 2237
    000008c3: 	jmp	.Ltmp3298 # Offset: 2243
.Ltmp3283:
    000008c8: 	movss	DATAat0x537a4(%rip), %xmm1
    000008d0: 	movss	DATAat0x5379c(%rip), %xmm3
    000008d8: 	divss	%xmm2, %xmm1
    000008dc: 	movss	DATAat0x537b0(%rip), %xmm2
    000008e4: 	andps	%xmm1, %xmm2
    000008e7: 	ucomiss	%xmm2, %xmm3
    000008ea: 	jbe	.Ltmp3299 # Offset: 2282
    000008ec: 	cvttss2si	%xmm1, %eax
    000008f0: 	pxor	%xmm2, %xmm2
    000008f4: 	movaps	%xmm1, %xmm3
    000008f7: 	movss	DATAat0x53798(%rip), %xmm4
    000008ff: 	cvtsi2ss	%eax, %xmm2
    00000903: 	cmpnless	%xmm2, %xmm3
    00000908: 	andps	%xmm4, %xmm3
    0000090b: 	addss	%xmm3, %xmm2
    0000090f: 	movss	DATAat0x537b0(%rip), %xmm3
    00000917: 	andnps	%xmm1, %xmm3
    0000091a: 	orps	%xmm3, %xmm2
    0000091d: 	movaps	%xmm2, %xmm1
.Ltmp3299:
    00000920: 	comiss	DATAat0x537a0(%rip), %xmm1
    00000927: 	jae	.Ltmp3300 # Offset: 2343
    00000929: 	cvttss2si	%xmm1, %rax
.Ltmp3303:
    0000092e: 	movl	$0x8, %edx
    00000933: 	movq	$0x8, 0x18(%rbp)
    0000093b: 	cmpq	%rdx, %rax
    0000093e: 	cmovbq	%rdx, %rax
    00000942: 	movq	%rax, %rdx
    00000945: 	shrq	%rdx
    00000948: 	addq	%rdx, %rax
    0000094b: 	cmpq	$0x8, 0x10(%rsp)
    00000951: 	movq	%rax, 0x10(%rbp)
    00000955: 	je	.Ltmp3287 # Offset: 2389
    0000095b: 	movl	$0x40, %edi
    00000960: 	movl	$0x8, %r12d
    00000966: 	jmp	.Ltmp3301 # Offset: 2406
.Ltmp3286:
    0000096b: 	subss	DATAat0x537a0(%rip), %xmm1
    00000973: 	cvttss2si	%xmm1, %rax
    00000978: 	btcq	$0x3f, %rax
    0000097d: 	jmp	.Ltmp3302 # Offset: 2429
.Ltmp3300:
    00000982: 	subss	DATAat0x537a0(%rip), %xmm1
    0000098a: 	cvttss2si	%xmm1, %rax
    0000098f: 	btcq	$0x3f, %rax
    00000994: 	jmp	.Ltmp3303 # Offset: 2452
.Ltmp3284:
    00000996: 	movq	%r12, %rax
    00000999: 	movq	%r12, %rdx
    0000099c: 	pxor	%xmm1, %xmm1
    000009a0: 	shrq	%rax
    000009a3: 	andl	$0x1, %edx
    000009a6: 	orq	%rdx, %rax
    000009a9: 	cvtsi2ss	%rax, %xmm1
    000009ae: 	addss	%xmm1, %xmm1
    000009b2: 	jmp	.Ltmp3304 # Offset: 2482
.Ltmp3264:
    000009b7: 	xorl	%r13d, %r13d
    000009ba: 	jmp	.Ltmp3265 # Offset: 2490
.Ltmp3279:
    000009bf: 	movq	0x98(%rsp), %rax
    000009c7: 	subq	%fs:0x28, %rax
    000009d0: 	jne	.Ltmp3280 # Offset: 2512
    000009d2: 	addq	$0xa8, %rsp
    000009d9: 	popq	%rbx
    000009da: 	popq	%rbp
    000009db: 	popq	%r12
    000009dd: 	popq	%r13
    000009df: 	popq	%r14
    000009e1: 	popq	%r15
    000009e3: 	retq # Offset: 2531
.Ltmp3278:
    000009e4: 	movq	-0x8(%rdx), %rax
    000009e8: 	addq	$0x200, %rax
    000009ee: 	jmp	.Ltmp3305 # Offset: 2542
.Ltmp3229:
    000009f3: 	movq	0x80(%rsp), %rax
    000009fb: 	pxor	%xmm4, %xmm4
    000009ff: 	movsd	%xmm4, 0x50(%rsp)
    00000a05: 	movq	%rax, 0x10(%rsp)
    00000a0a: 	jmp	.Ltmp3306 # Offset: 2570
.Ltmp3280:
    00000a0f: 	callq	__stack_chk_fail@PLT # Offset: 2575
.Ltmp3288:
    00000a14: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 2580
    00000a19: 	endbr64
    00000a1d: 	movq	%rax, %rbp
    00000a20: 	movq	0x80(%rsp), %rdi
    00000a28: 	movq	0x90(%rsp), %rsi
    00000a30: 	subq	%rdi, %rsi
    00000a33: 	testq	%rdi, %rdi
    00000a36: 	je	.Ltmp3307 # Offset: 2614
    00000a38: 	callq	_ZdlPvm@PLT # Offset: 2616
.Ltmp3307:
    00000a3d: 	movq	%rbp, %rdi
    00000a40: 	callq	_Unwind_Resume@PLT # Offset: 2624
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_eraseall_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_duplicate_coreI7HashMapIddEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 219
  State       : disassembled
  Address     : 0x22330
  Size        : 0x3c8
  MaxSize     : 0x3d0
  Offset      : 0x22330
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreI7HashMapIddEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0218:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	(,%rsi,8), %rcx
    0000000e: 	pushq	%r14
    00000010: 	movq	%rdi, %r14
    00000013: 	pushq	%r13
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x68, %rsp
    0000001d: 	movq	%rdx, 0x30(%rsp)
    00000022: 	xorl	%edx, %edx
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x58(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	movabsq	$0x500000000, %rax
    0000003e: 	divq	%rcx
    00000041: 	movq	%rax, 0x10(%rsp)
    00000046: 	cmpq	$0x3e8, %rax
    0000004c: 	ja	.Ltmp3308 # Offset: 76
    00000052: 	cmpq	$0x3, %rax
    00000056: 	ja	.Ltmp3309 # Offset: 86
    0000005c: 	movq	$0x0, 0x50(%rsp)
    00000065: 	pxor	%xmm0, %xmm0
    00000069: 	movq	$0x4, 0x10(%rsp)
    00000072: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp3328:
    00000077: 	movq	0x10(%rsp), %rbx
    0000007c: 	leaq	0x40(%rsp), %rdi
    00000081: 	movq	%rbx, %rsi
    00000084: 	callq	_ZNSt6vectorIP7HashMapIddESaIS2_EE17_M_default_appendEm # Offset: 132
    00000089: 	movq	0x40(%rsp), %rcx
    0000008e: 	movl	iterations(%rip), %eax
    00000094: 	movq	%rcx, 0x20(%rsp)
    00000099: 	testl	%eax, %eax
    0000009b: 	jle	.Ltmp3310 # Offset: 155
    000000a1: 	addq	$0x8, %rcx
    000000a5: 	movl	%ebx, 0x2c(%rsp)
    000000a9: 	pxor	%xmm3, %xmm3
    000000ad: 	movl	$0x0, 0x28(%rsp)
    000000b5: 	movq	%rcx, 0x38(%rsp)
    000000ba: 	movsd	%xmm3, 0x18(%rsp)
.Ltmp3324:
    000000c0: 	movslq	0x28(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	%rdx, %rsi
    000000cb: 	addq	0x10(%rsp), %rdx
    000000d0: 	subl	%esi, %eax
    000000d2: 	cmpq	%rcx, %rdx
    000000d5: 	cmovbl	0x2c(%rsp), %eax
    000000da: 	movl	%eax, %ebx
    000000dc: 	callq	clock@PLT # Offset: 220
    000000e1: 	movq	0x38(%rsp), %rsi
    000000e6: 	movq	0x20(%rsp), %rcx
    000000eb: 	movq	%rax, start_time(%rip)
    000000f2: 	leal	-0x1(%rbx), %eax
    000000f5: 	leaq	(%rsi,%rax,8), %rax
    000000f9: 	movq	%rcx, (%rsp)
    000000fd: 	movq	%rcx, %r15
    00000100: 	movq	%rax, 0x8(%rsp)
    00000105: 	nopl	(%rax) # Size: 3
.Ltmp3316:
    00000108: 	movl	$0x30, %edi
    0000010d: 	callq	_Znwm@PLT # Offset: 269
    00000112: 	movq	%rax, %rbp
    00000115: 	movq	$0x0, 0x20(%rax)
    0000011d: 	movq	0x18(%r14), %rax
    00000121: 	movabsq	$0xfffffffffffffff, %rcx
    0000012b: 	movdqu	0x8(%r14), %xmm2
    00000131: 	movss	0x28(%r14), %xmm0
    00000137: 	movq	%rax, 0x18(%rbp)
    0000013b: 	movups	%xmm2, 0x8(%rbp)
    0000013f: 	movss	%xmm0, 0x28(%rbp)
    00000144: 	cmpq	%rcx, %rax
    00000147: 	ja	.Ltmp3311 # Offset: 327
    0000014d: 	leaq	(,%rax,8), %rdi
    00000155: 	callq	_Znam@PLT # Offset: 341
    0000015a: 	movq	%rax, 0x20(%rbp)
    0000015e: 	movq	%rax, %rcx
    00000161: 	movq	0x18(%rbp), %rax
    00000165: 	xorl	%r13d, %r13d
    00000168: 	testq	%rax, %rax
    0000016b: 	je	.Ltmp3312 # Offset: 363
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp3315:
    00000170: 	movq	0x20(%r14), %rdx
    00000174: 	leaq	(,%r13,8), %r12
    0000017c: 	movq	(%rdx,%r13,8), %rbx
    00000180: 	movq	$0x0, (%rcx,%r13,8)
    00000188: 	testq	%rbx, %rbx
    0000018b: 	je	.Ltmp3313 # Offset: 395
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp3314:
    00000190: 	movl	$0x18, %edi
    00000195: 	callq	_Znwm@PLT # Offset: 405
    0000019a: 	movq	0x20(%rbp), %rcx
    0000019e: 	movupd	(%rbx), %xmm1
    000001a2: 	leaq	(%rcx,%r12), %rdx
    000001a6: 	movups	%xmm1, (%rax)
    000001a9: 	movq	(%rdx), %rsi
    000001ac: 	movq	%rsi, 0x10(%rax)
    000001b0: 	movq	%rax, (%rdx)
    000001b3: 	movq	0x10(%rbx), %rbx
    000001b7: 	testq	%rbx, %rbx
    000001ba: 	jne	.Ltmp3314 # Offset: 442
    000001bc: 	movq	0x18(%rbp), %rax
.Ltmp3313:
    000001c0: 	addq	$0x1, %r13
    000001c4: 	cmpq	%rax, %r13
    000001c7: 	jb	.Ltmp3315 # Offset: 455
.Ltmp3312:
    000001c9: 	movq	(%rsp), %rax
    000001cd: 	movq	%rbp, (%rax)
    000001d0: 	addq	$0x8, %rax
    000001d4: 	movq	%rax, (%rsp)
    000001d8: 	cmpq	0x8(%rsp), %rax
    000001dd: 	jne	.Ltmp3316 # Offset: 477
    000001e3: 	callq	clock@PLT # Offset: 483
    000001e8: 	pxor	%xmm0, %xmm0
    000001ec: 	movq	0x8(%rsp), %r13
    000001f1: 	movq	%rax, end_time(%rip)
    000001f8: 	subq	start_time(%rip), %rax
    000001ff: 	cvtsi2sd	%rax, %xmm0
    00000204: 	divsd	DATAat0x53788(%rip), %xmm0
    0000020c: 	addsd	0x18(%rsp), %xmm0
    00000212: 	movsd	%xmm0, 0x18(%rsp)
    00000218: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3323:
    00000220: 	movq	(%r15), %r12
    00000223: 	testq	%r12, %r12
    00000226: 	je	.Ltmp3317 # Offset: 550
    00000228: 	movq	0x18(%r12), %rdx
    0000022d: 	movq	0x20(%r12), %rdi
    00000232: 	testq	%rdx, %rdx
    00000235: 	je	.Ltmp3318 # Offset: 565
    00000237: 	xorl	%ebp, %ebp
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp3321:
    00000240: 	leaq	(%rdi,%rbp,8), %rax
    00000244: 	movq	(%rax), %rbx
    00000247: 	movq	$0x0, (%rax)
    0000024e: 	testq	%rbx, %rbx
    00000251: 	je	.Ltmp3319 # Offset: 593
    00000253: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3320:
    00000258: 	movq	%rbx, %rdi
    0000025b: 	movq	0x10(%rbx), %rbx
    0000025f: 	movl	$0x18, %esi
    00000264: 	callq	_ZdlPvm@PLT # Offset: 612
    00000269: 	testq	%rbx, %rbx
    0000026c: 	jne	.Ltmp3320 # Offset: 620
    0000026e: 	movq	0x18(%r12), %rdx
    00000273: 	movq	0x20(%r12), %rdi
.Ltmp3319:
    00000278: 	addq	$0x1, %rbp
    0000027c: 	cmpq	%rdx, %rbp
    0000027f: 	jb	.Ltmp3321 # Offset: 639
.Ltmp3318:
    00000281: 	movq	$0x0, 0x8(%r12)
    0000028a: 	testq	%rdi, %rdi
    0000028d: 	je	.Ltmp3322 # Offset: 653
    0000028f: 	callq	_ZdaPv@PLT # Offset: 655
.Ltmp3322:
    00000294: 	movl	$0x30, %esi
    00000299: 	movq	%r12, %rdi
    0000029c: 	callq	_ZdlPvm@PLT # Offset: 668
.Ltmp3317:
    000002a1: 	movq	$0x0, (%r15)
    000002a8: 	addq	$0x8, %r15
    000002ac: 	cmpq	%r15, %r13
    000002af: 	jne	.Ltmp3323 # Offset: 687
    000002b5: 	movl	0x10(%rsp), %ecx
    000002b9: 	movl	iterations(%rip), %eax
    000002bf: 	addl	%ecx, 0x28(%rsp)
    000002c3: 	movl	0x28(%rsp), %ecx
    000002c7: 	cmpl	%ecx, %eax
    000002c9: 	jg	.Ltmp3324 # Offset: 713
.Ltmp3330:
    000002cf: 	movq	0x30(%rsp), %rdi
    000002d4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 724
    000002d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002e7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ee: 	je	.Ltmp3325 # Offset: 750
.Ltmp3329:
    000002f4: 	movq	-0x20(%rax), %rdi
    000002f8: 	movsd	0x18(%rsp), %xmm0
    000002fe: 	callq	_Z13record_resultdPKc # Offset: 766
    00000303: 	cmpq	$0x0, 0x20(%rsp)
    00000309: 	je	.Ltmp3326 # Offset: 777
    0000030b: 	movq	0x58(%rsp), %rax
    00000310: 	subq	%fs:0x28, %rax
    00000319: 	jne	.Ltmp3327 # Offset: 793
    0000031b: 	movq	0x50(%rsp), %rsi
    00000320: 	movq	0x20(%rsp), %rdi
    00000325: 	addq	$0x68, %rsp
    00000329: 	popq	%rbx
    0000032a: 	popq	%rbp
    0000032b: 	subq	%rdi, %rsi
    0000032e: 	popq	%r12
    00000330: 	popq	%r13
    00000332: 	popq	%r14
    00000334: 	popq	%r15
    00000336: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 822
.Ltmp3308:
    0000033b: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp3309:
    00000344: 	movq	$0x0, 0x50(%rsp)
    0000034d: 	pxor	%xmm0, %xmm0
    00000351: 	movaps	%xmm0, 0x40(%rsp)
    00000356: 	jmp	.Ltmp3328 # Offset: 854
.Ltmp3326:
    0000035b: 	movq	0x58(%rsp), %rax
    00000360: 	subq	%fs:0x28, %rax
    00000369: 	jne	.Ltmp3327 # Offset: 873
    0000036b: 	addq	$0x68, %rsp
    0000036f: 	popq	%rbx
    00000370: 	popq	%rbp
    00000371: 	popq	%r12
    00000373: 	popq	%r13
    00000375: 	popq	%r14
    00000377: 	popq	%r15
    00000379: 	retq # Offset: 889
.Ltmp3325:
    0000037a: 	movq	-0x8(%rdx), %rax
    0000037e: 	addq	$0x200, %rax
    00000384: 	jmp	.Ltmp3329 # Offset: 900
.Ltmp3310:
    00000389: 	pxor	%xmm5, %xmm5
    0000038d: 	movsd	%xmm5, 0x18(%rsp)
    00000393: 	jmp	.Ltmp3330 # Offset: 915
.Ltmp3327:
    00000398: 	callq	__stack_chk_fail@PLT # Offset: 920
.Ltmp3311:
    0000039d: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 925
    000003a2: 	endbr64
    000003a6: 	movq	%rax, %rbp
    000003a9: 	movq	0x40(%rsp), %rdi
    000003ae: 	movq	0x50(%rsp), %rsi
    000003b3: 	subq	%rdi, %rsi
    000003b6: 	testq	%rdi, %rdi
    000003b9: 	je	.Ltmp3331 # Offset: 953
    000003bb: 	callq	_ZdlPvm@PLT # Offset: 955
.Ltmp3331:
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_Unwind_Resume@PLT # Offset: 963
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreI7HashMapIddEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_delete_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 220
  State       : disassembled
  Address     : 0x22700
  Size        : 0x8bb
  MaxSize     : 0x8c0
  Offset      : 0x22700
  Section     : .text
  Orc Section : .local.text._Z15test_delete_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0219:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xa8, %rsp
    0000001b: 	movq	%rdx, 0x68(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x40(%rsp)
    00000027: 	movq	%rsi, 0x20(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x98(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	movabsq	$0x500000000, %rax
    00000049: 	divq	%rcx
    0000004c: 	movq	%rax, 0x48(%rsp)
    00000051: 	cmpq	$0x3e8, %rax
    00000057: 	ja	.Ltmp3332 # Offset: 87
    0000005d: 	cmpq	$0x3, %rax
    00000061: 	ja	.Ltmp3333 # Offset: 97
    00000067: 	movq	$0x0, 0x90(%rsp)
    00000073: 	pxor	%xmm0, %xmm0
    00000077: 	movq	$0x4, 0x48(%rsp)
    00000080: 	movaps	%xmm0, 0x80(%rsp)
.Ltmp3352:
    00000088: 	movq	0x48(%rsp), %rbx
    0000008d: 	leaq	0x80(%rsp), %rdi
    00000095: 	movq	%rbx, %rsi
    00000098: 	callq	_ZNSt6vectorIP7HashMapIddESaIS2_EE17_M_default_appendEm # Offset: 152
    0000009d: 	movl	iterations(%rip), %eax
    000000a3: 	testl	%eax, %eax
    000000a5: 	jle	.Ltmp3334 # Offset: 165
    000000ab: 	movl	%ebx, 0x64(%rsp)
    000000af: 	movq	$0x0, 0x50(%rsp)
    000000b8: 	movl	$0x0, 0x60(%rsp)
.Ltmp3365:
    000000c0: 	movslq	0x60(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	$0x0, 0x30(%rsp)
    000000d1: 	movq	%rdx, %rsi
    000000d4: 	addq	0x48(%rsp), %rdx
    000000d9: 	subl	%esi, %eax
    000000db: 	cmpq	%rcx, %rdx
    000000de: 	cmovbl	0x64(%rsp), %eax
    000000e3: 	leal	-0x1(%rax), %ecx
    000000e6: 	movl	%eax, %eax
    000000e8: 	shlq	$0x3, %rax
    000000ec: 	movq	%rcx, 0x58(%rsp)
    000000f1: 	movq	%rax, 0x38(%rsp)
.Ltmp3357:
    000000f6: 	movl	$0x30, %edi
    000000fb: 	callq	_Znwm@PLT # Offset: 251
    00000100: 	pxor	%xmm0, %xmm0
    00000104: 	movq	$0x0, 0x18(%rax)
    0000010c: 	movq	%rax, %rbp
    0000010f: 	movq	$0x0, 0x20(%rax)
    00000117: 	movl	$0x3f800000, 0x28(%rax)
    0000011e: 	movups	%xmm0, 0x8(%rax)
    00000122: 	movq	0x40(%rsp), %rax
    00000127: 	cmpq	%rax, 0x20(%rsp)
    0000012c: 	je	.Ltmp3335 # Offset: 300
    00000132: 	xorl	%ebx, %ebx
    00000134: 	movq	%rax, 0x8(%rsp)
    00000139: 	testq	%rbx, %rbx
    0000013c: 	je	.Ltmp3336 # Offset: 316
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3341:
    00000148: 	movq	0x8(%rsp), %rax
    0000014d: 	pxor	%xmm7, %xmm7
    00000151: 	movsd	(%rax), %xmm0
    00000155: 	ucomisd	%xmm7, %xmm0
    00000159: 	movsd	%xmm0, 0x78(%rsp)
    0000015f: 	jp	.Ltmp3337 # Offset: 351
    00000165: 	movl	$0x0, %eax
    0000016a: 	jne	.Ltmp3337 # Offset: 362
.Ltmp3353:
    00000170: 	xorl	%edx, %edx
    00000172: 	divq	0x18(%rbp)
    00000176: 	movq	0x20(%rbp), %rax
    0000017a: 	movq	(%rax,%rdx,8), %rbx
    0000017e: 	leaq	(,%rdx,8), %r12
    00000186: 	testq	%rbx, %rbx
    00000189: 	je	.Ltmp3338 # Offset: 393
    0000018f: 	movq	0x8(%rsp), %rax
    00000194: 	movsd	(%rax), %xmm0
    00000198: 	jmp	.Ltmp3339 # Offset: 408
    0000019a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3340:
    000001a0: 	movq	0x10(%rbx), %rbx
    000001a4: 	testq	%rbx, %rbx
    000001a7: 	je	.Ltmp3338 # Offset: 423
.Ltmp3339:
    000001ad: 	ucomisd	(%rbx), %xmm0
    000001b1: 	jp	.Ltmp3340 # Offset: 433
    000001b3: 	jne	.Ltmp3340 # Offset: 435
.Ltmp3355:
    000001b5: 	addq	$0x8, 0x8(%rsp)
    000001bb: 	addq	$0x8, %rbx
    000001bf: 	movq	0x8(%rsp), %rax
    000001c4: 	movsd	%xmm0, (%rbx)
    000001c8: 	cmpq	%rax, 0x20(%rsp)
    000001cd: 	je	.Ltmp3335 # Offset: 461
    000001d3: 	movq	0x10(%rbp), %rbx
    000001d7: 	testq	%rbx, %rbx
    000001da: 	jne	.Ltmp3341 # Offset: 474
.Ltmp3336:
    000001e0: 	movss	DATAat0x537b0(%rip), %xmm2
    000001e8: 	movss	DATAat0x537a4(%rip), %xmm0
    000001f0: 	divss	0x28(%rbp), %xmm0
    000001f5: 	movaps	%xmm0, %xmm1
    000001f8: 	movss	DATAat0x5379c(%rip), %xmm3
    00000200: 	movq	0x18(%rbp), %rax
    00000204: 	andps	%xmm2, %xmm1
    00000207: 	ucomiss	%xmm1, %xmm3
    0000020a: 	movq	%rax, 0x18(%rsp)
    0000020f: 	jbe	.Ltmp3342 # Offset: 527
    00000211: 	cvttss2si	%xmm0, %eax
    00000215: 	pxor	%xmm1, %xmm1
    00000219: 	movaps	%xmm0, %xmm3
    0000021c: 	movss	DATAat0x53798(%rip), %xmm4
    00000224: 	andnps	%xmm0, %xmm2
    00000227: 	cvtsi2ss	%eax, %xmm1
    0000022b: 	cmpnless	%xmm1, %xmm3
    00000230: 	andps	%xmm4, %xmm3
    00000233: 	addss	%xmm3, %xmm1
    00000237: 	orps	%xmm2, %xmm1
    0000023a: 	movaps	%xmm1, %xmm0
.Ltmp3342:
    0000023d: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000244: 	jae	.Ltmp3343 # Offset: 580
    0000024a: 	cvttss2si	%xmm0, %rax
.Ltmp3356:
    0000024f: 	movl	$0x8, %edx
    00000254: 	movq	0x18(%rsp), %r15
    00000259: 	movq	$0x8, 0x18(%rbp)
    00000261: 	cmpq	%rdx, %rax
    00000264: 	cmovbq	%rdx, %rax
    00000268: 	movq	%rax, %rdx
    0000026b: 	shrq	%rdx
    0000026e: 	addq	%rdx, %rax
    00000271: 	movq	%rax, 0x10(%rbp)
    00000275: 	cmpq	$0x8, %r15
    00000279: 	je	.Ltmp3341 # Offset: 633
    0000027f: 	movl	$0x40, %edi
    00000284: 	callq	_Znam@PLT # Offset: 644
    00000289: 	pxor	%xmm0, %xmm0
    0000028d: 	movq	%rax, %r14
    00000290: 	movups	%xmm0, (%rax)
    00000293: 	movups	%xmm0, 0x10(%rax)
    00000297: 	movups	%xmm0, 0x20(%rax)
    0000029b: 	movups	%xmm0, 0x30(%rax)
    0000029f: 	movq	0x20(%rbp), %rax
    000002a3: 	movq	%rax, 0x10(%rsp)
    000002a8: 	testq	%r15, %r15
    000002ab: 	je	.Ltmp3344 # Offset: 683
    000002b1: 	movl	$0xc70f6907, %r12d
    000002b7: 	movq	%r14, %r15
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3350:
    000002c0: 	movq	0x10(%rsp), %rax
    000002c5: 	movq	(%rax,%rbx,8), %r13
    000002c9: 	testq	%r13, %r13
    000002cc: 	jne	.Ltmp3345 # Offset: 716
    000002ce: 	jmp	.Ltmp3346 # Offset: 718
.Ltmp3348:
    000002d0: 	movq	(%r15), %rax
    000002d3: 	movq	%rax, 0x10(%r13)
    000002d7: 	movq	%r13, (%r15)
    000002da: 	testq	%r14, %r14
    000002dd: 	je	.Ltmp3346 # Offset: 733
.Ltmp3349:
    000002df: 	movq	%r14, %r13
.Ltmp3345:
    000002e2: 	movsd	(%r13), %xmm0
    000002e8: 	pxor	%xmm5, %xmm5
    000002ec: 	movq	0x10(%r13), %r14
    000002f0: 	ucomisd	%xmm5, %xmm0
    000002f4: 	movsd	%xmm0, 0x78(%rsp)
    000002fa: 	jp	.Ltmp3347 # Offset: 762
    000002fc: 	je	.Ltmp3348 # Offset: 764
.Ltmp3347:
    000002fe: 	movq	%r12, %rdx
    00000301: 	leaq	0x78(%rsp), %rdi
    00000306: 	movl	$0x8, %esi
    0000030b: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 779
    00000310: 	xorl	%edx, %edx
    00000312: 	divq	0x18(%rbp)
    00000316: 	leaq	(%r15,%rdx,8), %rax
    0000031a: 	movq	(%rax), %rdx
    0000031d: 	movq	%rdx, 0x10(%r13)
    00000321: 	movq	%r13, (%rax)
    00000324: 	testq	%r14, %r14
    00000327: 	jne	.Ltmp3349 # Offset: 807
.Ltmp3346:
    00000329: 	addq	$0x1, %rbx
    0000032d: 	cmpq	%rbx, 0x18(%rsp)
    00000332: 	jne	.Ltmp3350 # Offset: 818
    00000334: 	movq	0x20(%rbp), %rax
    00000338: 	movq	%r15, %r14
    0000033b: 	movq	%rax, 0x10(%rsp)
.Ltmp3344:
    00000340: 	movq	0x10(%rsp), %rax
    00000345: 	testq	%rax, %rax
    00000348: 	je	.Ltmp3351 # Offset: 840
    0000034a: 	movq	%rax, %rdi
    0000034d: 	callq	_ZdaPv@PLT # Offset: 845
.Ltmp3351:
    00000352: 	movq	%r14, 0x20(%rbp)
    00000356: 	jmp	.Ltmp3341 # Offset: 854
.Ltmp3332:
    0000035b: 	movq	$0x3e8, 0x48(%rsp)
.Ltmp3333:
    00000364: 	movq	$0x0, 0x90(%rsp)
    00000370: 	pxor	%xmm0, %xmm0
    00000374: 	movaps	%xmm0, 0x80(%rsp)
    0000037c: 	jmp	.Ltmp3352 # Offset: 892
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp3337:
    00000388: 	leaq	0x78(%rsp), %rdi
    0000038d: 	movl	$0xc70f6907, %edx
    00000392: 	movl	$0x8, %esi
    00000397: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 919
    0000039c: 	jmp	.Ltmp3353 # Offset: 924
    000003a1: 	nopl	(%rax) # Size: 7
.Ltmp3338:
    000003a8: 	movl	$0x18, %edi
    000003ad: 	callq	_Znwm@PLT # Offset: 941
    000003b2: 	movq	0x8(%rsp), %rcx
    000003b7: 	addq	0x20(%rbp), %r12
    000003bb: 	movq	%rax, 0x28(%rsp)
    000003c0: 	movq	$0x0, 0x8(%rax)
    000003c8: 	movsd	(%rcx), %xmm0
    000003cc: 	movq	%rax, %rcx
    000003cf: 	movsd	%xmm0, (%rax)
    000003d3: 	movq	(%r12), %rax
    000003d7: 	movq	%rax, 0x10(%rcx)
    000003db: 	movq	0x8(%rbp), %rax
    000003df: 	movq	%rcx, (%r12)
    000003e3: 	movq	0x10(%rbp), %r12
    000003e7: 	addq	$0x1, %rax
    000003eb: 	movq	%rax, 0x8(%rbp)
    000003ef: 	cmpq	%r12, %rax
    000003f2: 	ja	.Ltmp3354 # Offset: 1010
.Ltmp3373:
    000003f8: 	movq	0x28(%rsp), %rbx
    000003fd: 	jmp	.Ltmp3355 # Offset: 1021
.Ltmp3343:
    00000402: 	subss	DATAat0x537a0(%rip), %xmm0
    0000040a: 	cvttss2si	%xmm0, %rax
    0000040f: 	btcq	$0x3f, %rax
    00000414: 	jmp	.Ltmp3356 # Offset: 1044
.Ltmp3335:
    00000419: 	movq	0x30(%rsp), %rax
    0000041e: 	movq	0x80(%rsp), %r12
    00000426: 	movq	%rbp, (%r12,%rax)
    0000042a: 	addq	$0x8, %rax
    0000042e: 	movq	%rax, 0x30(%rsp)
    00000433: 	cmpq	%rax, 0x38(%rsp)
    00000438: 	jne	.Ltmp3357 # Offset: 1080
    0000043e: 	callq	clock@PLT # Offset: 1086
    00000443: 	movq	%r12, %r13
    00000446: 	movq	%rax, start_time(%rip)
    0000044d: 	movq	0x58(%rsp), %rax
    00000452: 	leaq	0x8(%r12,%rax,8), %r14
.Ltmp3364:
    00000457: 	movq	(%r13), %r15
    0000045b: 	testq	%r15, %r15
    0000045e: 	je	.Ltmp3358 # Offset: 1118
    00000460: 	movq	0x18(%r15), %rdx
    00000464: 	movq	0x20(%r15), %rdi
    00000468: 	testq	%rdx, %rdx
    0000046b: 	je	.Ltmp3359 # Offset: 1131
    0000046d: 	xorl	%ebp, %ebp
    0000046f: 	nop # Size: 1
.Ltmp3362:
    00000470: 	leaq	(%rdi,%rbp,8), %rax
    00000474: 	movq	(%rax), %rbx
    00000477: 	movq	$0x0, (%rax)
    0000047e: 	testq	%rbx, %rbx
    00000481: 	je	.Ltmp3360 # Offset: 1153
    00000483: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3361:
    00000488: 	movq	%rbx, %rdi
    0000048b: 	movq	0x10(%rbx), %rbx
    0000048f: 	movl	$0x18, %esi
    00000494: 	callq	_ZdlPvm@PLT # Offset: 1172
    00000499: 	testq	%rbx, %rbx
    0000049c: 	jne	.Ltmp3361 # Offset: 1180
    0000049e: 	movq	0x18(%r15), %rdx
    000004a2: 	movq	0x20(%r15), %rdi
.Ltmp3360:
    000004a6: 	addq	$0x1, %rbp
    000004aa: 	cmpq	%rdx, %rbp
    000004ad: 	jb	.Ltmp3362 # Offset: 1197
.Ltmp3359:
    000004af: 	movq	$0x0, 0x8(%r15)
    000004b7: 	testq	%rdi, %rdi
    000004ba: 	je	.Ltmp3363 # Offset: 1210
    000004bc: 	callq	_ZdaPv@PLT # Offset: 1212
.Ltmp3363:
    000004c1: 	movl	$0x30, %esi
    000004c6: 	movq	%r15, %rdi
    000004c9: 	callq	_ZdlPvm@PLT # Offset: 1225
.Ltmp3358:
    000004ce: 	movq	$0x0, (%r13)
    000004d6: 	addq	$0x8, %r13
    000004da: 	cmpq	%r14, %r13
    000004dd: 	jne	.Ltmp3364 # Offset: 1245
    000004e3: 	callq	clock@PLT # Offset: 1251
    000004e8: 	pxor	%xmm0, %xmm0
    000004ec: 	movl	0x48(%rsp), %ecx
    000004f0: 	addl	%ecx, 0x60(%rsp)
    000004f4: 	movq	%rax, end_time(%rip)
    000004fb: 	subq	start_time(%rip), %rax
    00000502: 	cvtsi2sd	%rax, %xmm0
    00000507: 	movl	0x60(%rsp), %ecx
    0000050b: 	divsd	DATAat0x53788(%rip), %xmm0
    00000513: 	addsd	0x50(%rsp), %xmm0
    00000519: 	movl	iterations(%rip), %eax
    0000051f: 	movsd	%xmm0, 0x50(%rsp)
    00000525: 	cmpl	%ecx, %eax
    00000527: 	jg	.Ltmp3365 # Offset: 1319
.Ltmp3390:
    0000052d: 	movq	0x68(%rsp), %rdi
    00000532: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1330
    00000537: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000053e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000545: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000054c: 	je	.Ltmp3366 # Offset: 1356
.Ltmp3389:
    00000552: 	movq	-0x20(%rax), %rdi
    00000556: 	movsd	0x50(%rsp), %xmm0
    0000055c: 	callq	_Z13record_resultdPKc # Offset: 1372
    00000561: 	testq	%r12, %r12
    00000564: 	je	.Ltmp3367 # Offset: 1380
    0000056a: 	movq	0x98(%rsp), %rax
    00000572: 	subq	%fs:0x28, %rax
    0000057b: 	jne	.Ltmp3368 # Offset: 1403
    00000581: 	movq	0x90(%rsp), %rsi
    00000589: 	addq	$0xa8, %rsp
    00000590: 	movq	%r12, %rdi
    00000593: 	popq	%rbx
    00000594: 	popq	%rbp
    00000595: 	subq	%r12, %rsi
    00000598: 	popq	%r12
    0000059a: 	popq	%r13
    0000059c: 	popq	%r14
    0000059e: 	popq	%r15
    000005a0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1440
.Ltmp3354:
    000005a5: 	movq	0x18(%rbp), %rax
    000005a9: 	movss	0x28(%rbp), %xmm2
    000005ae: 	movq	%rax, 0x10(%rsp)
    000005b3: 	testq	%r12, %r12
    000005b6: 	je	.Ltmp3369 # Offset: 1462
    000005bc: 	js	.Ltmp3370 # Offset: 1468
    000005c2: 	pxor	%xmm1, %xmm1
    000005c6: 	cvtsi2ss	%r12, %xmm1
.Ltmp3388:
    000005cb: 	divss	%xmm2, %xmm1
    000005cf: 	movss	DATAat0x537b0(%rip), %xmm3
    000005d7: 	movss	DATAat0x5379c(%rip), %xmm4
    000005df: 	movaps	%xmm1, %xmm2
    000005e2: 	andps	%xmm3, %xmm2
    000005e5: 	ucomiss	%xmm2, %xmm4
    000005e8: 	jbe	.Ltmp3371 # Offset: 1512
    000005ea: 	cvttss2si	%xmm1, %eax
    000005ee: 	pxor	%xmm2, %xmm2
    000005f2: 	movaps	%xmm1, %xmm4
    000005f5: 	movss	DATAat0x53798(%rip), %xmm7
    000005fd: 	andnps	%xmm1, %xmm3
    00000600: 	cvtsi2ss	%eax, %xmm2
    00000604: 	cmpnless	%xmm2, %xmm4
    00000609: 	andps	%xmm7, %xmm4
    0000060c: 	addss	%xmm4, %xmm2
    00000610: 	orps	%xmm3, %xmm2
    00000613: 	movaps	%xmm2, %xmm1
.Ltmp3371:
    00000616: 	comiss	DATAat0x537a0(%rip), %xmm1
    0000061d: 	jae	.Ltmp3372 # Offset: 1565
    00000623: 	cvttss2si	%xmm1, %rax
.Ltmp3386:
    00000628: 	movl	$0x8, %edx
    0000062d: 	movq	%r12, %xmm4
    00000632: 	cmpq	%rdx, %rax
    00000635: 	cmovbq	%rdx, %rax
    00000639: 	movq	%rax, %rdx
    0000063c: 	shrq	%rdx
    0000063f: 	addq	%rax, %rdx
    00000642: 	movq	%rdx, %xmm1
    00000647: 	punpcklqdq	%xmm4, %xmm1
    0000064b: 	movups	%xmm1, 0x10(%rbp)
    0000064f: 	cmpq	0x10(%rsp), %r12
    00000654: 	je	.Ltmp3373 # Offset: 1620
    0000065a: 	movq	%r12, %rax
    0000065d: 	shrq	$0x3c, %rax
    00000661: 	jne	.Ltmp3374 # Offset: 1633
    00000667: 	leaq	(,%r12,8), %rdi
.Ltmp3385:
    0000066f: 	callq	_Znam@PLT # Offset: 1647
    00000674: 	xorl	%esi, %esi
    00000676: 	leaq	(,%r12,8), %rdx
    0000067e: 	movq	%rax, %rdi
    00000681: 	movq	%rax, %r15
    00000684: 	callq	memset@PLT # Offset: 1668
    00000689: 	cmpq	$0x0, 0x10(%rsp)
    0000068f: 	movq	0x20(%rbp), %r13
    00000693: 	je	.Ltmp3375 # Offset: 1683
    00000699: 	movq	%r13, 0x18(%rsp)
    0000069e: 	xorl	%r12d, %r12d
    000006a1: 	movl	$0xc70f6907, %r14d
    000006a7: 	movq	%r15, %r13
    000006aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3381:
    000006b0: 	movq	0x18(%rsp), %rax
    000006b5: 	movq	(%rax,%r12,8), %rbx
    000006b9: 	testq	%rbx, %rbx
    000006bc: 	jne	.Ltmp3376 # Offset: 1724
    000006be: 	jmp	.Ltmp3377 # Offset: 1726
.Ltmp3379:
    000006c0: 	movq	(%r13), %rax
    000006c4: 	movq	%rax, 0x10(%rbx)
    000006c8: 	movq	%rbx, (%r13)
    000006cc: 	testq	%r15, %r15
    000006cf: 	je	.Ltmp3377 # Offset: 1743
.Ltmp3380:
    000006d1: 	movq	%r15, %rbx
.Ltmp3376:
    000006d4: 	movsd	(%rbx), %xmm0
    000006d8: 	pxor	%xmm6, %xmm6
    000006dc: 	movq	0x10(%rbx), %r15
    000006e0: 	ucomisd	%xmm6, %xmm0
    000006e4: 	movsd	%xmm0, 0x78(%rsp)
    000006ea: 	jp	.Ltmp3378 # Offset: 1770
    000006ec: 	je	.Ltmp3379 # Offset: 1772
.Ltmp3378:
    000006ee: 	movq	%r14, %rdx
    000006f1: 	leaq	0x78(%rsp), %rdi
    000006f6: 	movl	$0x8, %esi
    000006fb: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1787
    00000700: 	xorl	%edx, %edx
    00000702: 	divq	0x18(%rbp)
    00000706: 	leaq	(%r13,%rdx,8), %rax
    0000070b: 	movq	(%rax), %rdx
    0000070e: 	movq	%rdx, 0x10(%rbx)
    00000712: 	movq	%rbx, (%rax)
    00000715: 	testq	%r15, %r15
    00000718: 	jne	.Ltmp3380 # Offset: 1816
.Ltmp3377:
    0000071a: 	addq	$0x1, %r12
    0000071e: 	cmpq	%r12, 0x10(%rsp)
    00000723: 	jne	.Ltmp3381 # Offset: 1827
    00000725: 	movq	%r13, %r15
    00000728: 	movq	0x20(%rbp), %r13
.Ltmp3375:
    0000072c: 	testq	%r13, %r13
    0000072f: 	je	.Ltmp3382 # Offset: 1839
    00000731: 	movq	%r13, %rdi
    00000734: 	callq	_ZdaPv@PLT # Offset: 1844
.Ltmp3382:
    00000739: 	movq	0x8(%rsp), %rax
    0000073e: 	movq	%r15, 0x20(%rbp)
    00000742: 	movsd	(%rax), %xmm0
    00000746: 	jmp	.Ltmp3373 # Offset: 1862
.Ltmp3369:
    0000074b: 	movss	DATAat0x537a4(%rip), %xmm1
    00000753: 	movss	DATAat0x5379c(%rip), %xmm3
    0000075b: 	divss	%xmm2, %xmm1
    0000075f: 	movss	DATAat0x537b0(%rip), %xmm2
    00000767: 	andps	%xmm1, %xmm2
    0000076a: 	ucomiss	%xmm2, %xmm3
    0000076d: 	jbe	.Ltmp3383 # Offset: 1901
    0000076f: 	cvttss2si	%xmm1, %eax
    00000773: 	pxor	%xmm2, %xmm2
    00000777: 	movaps	%xmm1, %xmm3
    0000077a: 	movss	DATAat0x53798(%rip), %xmm4
    00000782: 	cvtsi2ss	%eax, %xmm2
    00000786: 	cmpnless	%xmm2, %xmm3
    0000078b: 	andps	%xmm4, %xmm3
    0000078e: 	addss	%xmm3, %xmm2
    00000792: 	movss	DATAat0x537b0(%rip), %xmm3
    0000079a: 	andnps	%xmm1, %xmm3
    0000079d: 	orps	%xmm3, %xmm2
    000007a0: 	movaps	%xmm2, %xmm1
.Ltmp3383:
    000007a3: 	comiss	DATAat0x537a0(%rip), %xmm1
    000007aa: 	jae	.Ltmp3384 # Offset: 1962
    000007ac: 	cvttss2si	%xmm1, %rax
.Ltmp3387:
    000007b1: 	movl	$0x8, %edx
    000007b6: 	movq	$0x8, 0x18(%rbp)
    000007be: 	cmpq	%rdx, %rax
    000007c1: 	cmovbq	%rdx, %rax
    000007c5: 	movq	%rax, %rdx
    000007c8: 	shrq	%rdx
    000007cb: 	addq	%rdx, %rax
    000007ce: 	cmpq	$0x8, 0x10(%rsp)
    000007d4: 	movq	%rax, 0x10(%rbp)
    000007d8: 	je	.Ltmp3373 # Offset: 2008
    000007de: 	movl	$0x40, %edi
    000007e3: 	movl	$0x8, %r12d
    000007e9: 	jmp	.Ltmp3385 # Offset: 2025
.Ltmp3372:
    000007ee: 	subss	DATAat0x537a0(%rip), %xmm1
    000007f6: 	cvttss2si	%xmm1, %rax
    000007fb: 	btcq	$0x3f, %rax
    00000800: 	jmp	.Ltmp3386 # Offset: 2048
.Ltmp3384:
    00000805: 	subss	DATAat0x537a0(%rip), %xmm1
    0000080d: 	cvttss2si	%xmm1, %rax
    00000812: 	btcq	$0x3f, %rax
    00000817: 	jmp	.Ltmp3387 # Offset: 2071
.Ltmp3370:
    00000819: 	movq	%r12, %rax
    0000081c: 	movq	%r12, %rdx
    0000081f: 	pxor	%xmm1, %xmm1
    00000823: 	shrq	%rax
    00000826: 	andl	$0x1, %edx
    00000829: 	orq	%rdx, %rax
    0000082c: 	cvtsi2ss	%rax, %xmm1
    00000831: 	addss	%xmm1, %xmm1
    00000835: 	jmp	.Ltmp3388 # Offset: 2101
.Ltmp3367:
    0000083a: 	movq	0x98(%rsp), %rax
    00000842: 	subq	%fs:0x28, %rax
    0000084b: 	jne	.Ltmp3368 # Offset: 2123
    0000084d: 	addq	$0xa8, %rsp
    00000854: 	popq	%rbx
    00000855: 	popq	%rbp
    00000856: 	popq	%r12
    00000858: 	popq	%r13
    0000085a: 	popq	%r14
    0000085c: 	popq	%r15
    0000085e: 	retq # Offset: 2142
.Ltmp3366:
    0000085f: 	movq	-0x8(%rdx), %rax
    00000863: 	addq	$0x200, %rax
    00000869: 	jmp	.Ltmp3389 # Offset: 2153
.Ltmp3334:
    0000086e: 	pxor	%xmm4, %xmm4
    00000872: 	movq	0x80(%rsp), %r12
    0000087a: 	movsd	%xmm4, 0x50(%rsp)
    00000880: 	jmp	.Ltmp3390 # Offset: 2176
.Ltmp3368:
    00000885: 	callq	__stack_chk_fail@PLT # Offset: 2181
.Ltmp3374:
    0000088a: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 2186
    0000088f: 	endbr64
    00000893: 	movq	%rax, %rbp
    00000896: 	movq	0x80(%rsp), %rdi
    0000089e: 	movq	0x90(%rsp), %rsi
    000008a6: 	subq	%rdi, %rsi
    000008a9: 	testq	%rdi, %rdi
    000008ac: 	je	.Ltmp3391 # Offset: 2220
    000008ae: 	callq	_ZdlPvm@PLT # Offset: 2222
.Ltmp3391:
    000008b3: 	movq	%rbp, %rdi
    000008b6: 	callq	_Unwind_Resume@PLT # Offset: 2230
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_delete_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_clearall_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 221
  State       : disassembled
  Address     : 0x22fc0
  Size        : 0x93b
  MaxSize     : 0x940
  Offset      : 0x22fc0
  Section     : .text
  Orc Section : .local.text._Z17test_clearall_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0220:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xa8, %rsp
    0000001b: 	movq	%rdx, 0x68(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x40(%rsp)
    00000027: 	movq	%rsi, 0x20(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x98(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	movabsq	$0x500000000, %rax
    00000049: 	divq	%rcx
    0000004c: 	movq	%rax, 0x48(%rsp)
    00000051: 	cmpq	$0x3e8, %rax
    00000057: 	ja	.Ltmp3392 # Offset: 87
    0000005d: 	cmpq	$0x3, %rax
    00000061: 	ja	.Ltmp3393 # Offset: 97
    00000067: 	movq	$0x0, 0x90(%rsp)
    00000073: 	pxor	%xmm0, %xmm0
    00000077: 	movq	$0x4, 0x48(%rsp)
    00000080: 	movaps	%xmm0, 0x80(%rsp)
.Ltmp3412:
    00000088: 	movq	0x48(%rsp), %rbx
    0000008d: 	leaq	0x80(%rsp), %rdi
    00000095: 	movq	%rbx, %rsi
    00000098: 	callq	_ZNSt6vectorIP7HashMapIddESaIS2_EE17_M_default_appendEm # Offset: 152
    0000009d: 	movl	iterations(%rip), %eax
    000000a3: 	testl	%eax, %eax
    000000a5: 	jle	.Ltmp3394 # Offset: 165
    000000ab: 	movl	%ebx, 0x64(%rsp)
    000000af: 	movq	$0x0, 0x50(%rsp)
    000000b8: 	movl	$0x0, 0x60(%rsp)
.Ltmp3430:
    000000c0: 	movslq	0x60(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	$0x0, 0x30(%rsp)
    000000d1: 	movq	%rdx, %rsi
    000000d4: 	addq	0x48(%rsp), %rdx
    000000d9: 	subl	%esi, %eax
    000000db: 	cmpq	%rcx, %rdx
    000000de: 	cmovbl	0x64(%rsp), %eax
    000000e3: 	leal	-0x1(%rax), %ecx
    000000e6: 	movl	%eax, %eax
    000000e8: 	shlq	$0x3, %rax
    000000ec: 	movq	%rcx, 0x58(%rsp)
    000000f1: 	movq	%rax, 0x38(%rsp)
.Ltmp3417:
    000000f6: 	movl	$0x30, %edi
    000000fb: 	callq	_Znwm@PLT # Offset: 251
    00000100: 	pxor	%xmm0, %xmm0
    00000104: 	movq	$0x0, 0x18(%rax)
    0000010c: 	movq	%rax, %rbp
    0000010f: 	movq	$0x0, 0x20(%rax)
    00000117: 	movl	$0x3f800000, 0x28(%rax)
    0000011e: 	movups	%xmm0, 0x8(%rax)
    00000122: 	movq	0x40(%rsp), %rax
    00000127: 	cmpq	%rax, 0x20(%rsp)
    0000012c: 	je	.Ltmp3395 # Offset: 300
    00000132: 	xorl	%ebx, %ebx
    00000134: 	movq	%rax, 0x8(%rsp)
    00000139: 	testq	%rbx, %rbx
    0000013c: 	je	.Ltmp3396 # Offset: 316
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3401:
    00000148: 	movq	0x8(%rsp), %rax
    0000014d: 	pxor	%xmm7, %xmm7
    00000151: 	movsd	(%rax), %xmm0
    00000155: 	ucomisd	%xmm7, %xmm0
    00000159: 	movsd	%xmm0, 0x78(%rsp)
    0000015f: 	jp	.Ltmp3397 # Offset: 351
    00000165: 	movl	$0x0, %eax
    0000016a: 	jne	.Ltmp3397 # Offset: 362
.Ltmp3413:
    00000170: 	xorl	%edx, %edx
    00000172: 	divq	0x18(%rbp)
    00000176: 	movq	0x20(%rbp), %rax
    0000017a: 	movq	(%rax,%rdx,8), %rbx
    0000017e: 	leaq	(,%rdx,8), %r12
    00000186: 	testq	%rbx, %rbx
    00000189: 	je	.Ltmp3398 # Offset: 393
    0000018f: 	movq	0x8(%rsp), %rax
    00000194: 	movsd	(%rax), %xmm0
    00000198: 	jmp	.Ltmp3399 # Offset: 408
    0000019a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3400:
    000001a0: 	movq	0x10(%rbx), %rbx
    000001a4: 	testq	%rbx, %rbx
    000001a7: 	je	.Ltmp3398 # Offset: 423
.Ltmp3399:
    000001ad: 	ucomisd	(%rbx), %xmm0
    000001b1: 	jp	.Ltmp3400 # Offset: 433
    000001b3: 	jne	.Ltmp3400 # Offset: 435
.Ltmp3415:
    000001b5: 	addq	$0x8, 0x8(%rsp)
    000001bb: 	addq	$0x8, %rbx
    000001bf: 	movq	0x8(%rsp), %rax
    000001c4: 	movsd	%xmm0, (%rbx)
    000001c8: 	cmpq	%rax, 0x20(%rsp)
    000001cd: 	je	.Ltmp3395 # Offset: 461
    000001d3: 	movq	0x10(%rbp), %rbx
    000001d7: 	testq	%rbx, %rbx
    000001da: 	jne	.Ltmp3401 # Offset: 474
.Ltmp3396:
    000001e0: 	movss	DATAat0x537b0(%rip), %xmm2
    000001e8: 	movss	DATAat0x537a4(%rip), %xmm0
    000001f0: 	divss	0x28(%rbp), %xmm0
    000001f5: 	movaps	%xmm0, %xmm1
    000001f8: 	movss	DATAat0x5379c(%rip), %xmm3
    00000200: 	movq	0x18(%rbp), %rax
    00000204: 	andps	%xmm2, %xmm1
    00000207: 	ucomiss	%xmm1, %xmm3
    0000020a: 	movq	%rax, 0x18(%rsp)
    0000020f: 	jbe	.Ltmp3402 # Offset: 527
    00000211: 	cvttss2si	%xmm0, %eax
    00000215: 	pxor	%xmm1, %xmm1
    00000219: 	movaps	%xmm0, %xmm3
    0000021c: 	movss	DATAat0x53798(%rip), %xmm4
    00000224: 	andnps	%xmm0, %xmm2
    00000227: 	cvtsi2ss	%eax, %xmm1
    0000022b: 	cmpnless	%xmm1, %xmm3
    00000230: 	andps	%xmm4, %xmm3
    00000233: 	addss	%xmm3, %xmm1
    00000237: 	orps	%xmm2, %xmm1
    0000023a: 	movaps	%xmm1, %xmm0
.Ltmp3402:
    0000023d: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000244: 	jae	.Ltmp3403 # Offset: 580
    0000024a: 	cvttss2si	%xmm0, %rax
.Ltmp3416:
    0000024f: 	movl	$0x8, %edx
    00000254: 	movq	0x18(%rsp), %r15
    00000259: 	movq	$0x8, 0x18(%rbp)
    00000261: 	cmpq	%rdx, %rax
    00000264: 	cmovbq	%rdx, %rax
    00000268: 	movq	%rax, %rdx
    0000026b: 	shrq	%rdx
    0000026e: 	addq	%rdx, %rax
    00000271: 	movq	%rax, 0x10(%rbp)
    00000275: 	cmpq	$0x8, %r15
    00000279: 	je	.Ltmp3401 # Offset: 633
    0000027f: 	movl	$0x40, %edi
    00000284: 	callq	_Znam@PLT # Offset: 644
    00000289: 	pxor	%xmm0, %xmm0
    0000028d: 	movq	%rax, %r14
    00000290: 	movups	%xmm0, (%rax)
    00000293: 	movups	%xmm0, 0x10(%rax)
    00000297: 	movups	%xmm0, 0x20(%rax)
    0000029b: 	movups	%xmm0, 0x30(%rax)
    0000029f: 	movq	0x20(%rbp), %rax
    000002a3: 	movq	%rax, 0x10(%rsp)
    000002a8: 	testq	%r15, %r15
    000002ab: 	je	.Ltmp3404 # Offset: 683
    000002b1: 	movl	$0xc70f6907, %r12d
    000002b7: 	movq	%r14, %r15
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3410:
    000002c0: 	movq	0x10(%rsp), %rax
    000002c5: 	movq	(%rax,%rbx,8), %r13
    000002c9: 	testq	%r13, %r13
    000002cc: 	jne	.Ltmp3405 # Offset: 716
    000002ce: 	jmp	.Ltmp3406 # Offset: 718
.Ltmp3408:
    000002d0: 	movq	(%r15), %rax
    000002d3: 	movq	%rax, 0x10(%r13)
    000002d7: 	movq	%r13, (%r15)
    000002da: 	testq	%r14, %r14
    000002dd: 	je	.Ltmp3406 # Offset: 733
.Ltmp3409:
    000002df: 	movq	%r14, %r13
.Ltmp3405:
    000002e2: 	movsd	(%r13), %xmm0
    000002e8: 	pxor	%xmm5, %xmm5
    000002ec: 	movq	0x10(%r13), %r14
    000002f0: 	ucomisd	%xmm5, %xmm0
    000002f4: 	movsd	%xmm0, 0x78(%rsp)
    000002fa: 	jp	.Ltmp3407 # Offset: 762
    000002fc: 	je	.Ltmp3408 # Offset: 764
.Ltmp3407:
    000002fe: 	movq	%r12, %rdx
    00000301: 	leaq	0x78(%rsp), %rdi
    00000306: 	movl	$0x8, %esi
    0000030b: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 779
    00000310: 	xorl	%edx, %edx
    00000312: 	divq	0x18(%rbp)
    00000316: 	leaq	(%r15,%rdx,8), %rax
    0000031a: 	movq	(%rax), %rdx
    0000031d: 	movq	%rdx, 0x10(%r13)
    00000321: 	movq	%r13, (%rax)
    00000324: 	testq	%r14, %r14
    00000327: 	jne	.Ltmp3409 # Offset: 807
.Ltmp3406:
    00000329: 	addq	$0x1, %rbx
    0000032d: 	cmpq	%rbx, 0x18(%rsp)
    00000332: 	jne	.Ltmp3410 # Offset: 818
    00000334: 	movq	0x20(%rbp), %rax
    00000338: 	movq	%r15, %r14
    0000033b: 	movq	%rax, 0x10(%rsp)
.Ltmp3404:
    00000340: 	movq	0x10(%rsp), %rax
    00000345: 	testq	%rax, %rax
    00000348: 	je	.Ltmp3411 # Offset: 840
    0000034a: 	movq	%rax, %rdi
    0000034d: 	callq	_ZdaPv@PLT # Offset: 845
.Ltmp3411:
    00000352: 	movq	%r14, 0x20(%rbp)
    00000356: 	jmp	.Ltmp3401 # Offset: 854
.Ltmp3392:
    0000035b: 	movq	$0x3e8, 0x48(%rsp)
.Ltmp3393:
    00000364: 	movq	$0x0, 0x90(%rsp)
    00000370: 	pxor	%xmm0, %xmm0
    00000374: 	movaps	%xmm0, 0x80(%rsp)
    0000037c: 	jmp	.Ltmp3412 # Offset: 892
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp3397:
    00000388: 	leaq	0x78(%rsp), %rdi
    0000038d: 	movl	$0xc70f6907, %edx
    00000392: 	movl	$0x8, %esi
    00000397: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 919
    0000039c: 	jmp	.Ltmp3413 # Offset: 924
    000003a1: 	nopl	(%rax) # Size: 7
.Ltmp3398:
    000003a8: 	movl	$0x18, %edi
    000003ad: 	callq	_Znwm@PLT # Offset: 941
    000003b2: 	movq	0x8(%rsp), %rcx
    000003b7: 	addq	0x20(%rbp), %r12
    000003bb: 	movq	%rax, 0x28(%rsp)
    000003c0: 	movq	$0x0, 0x8(%rax)
    000003c8: 	movsd	(%rcx), %xmm0
    000003cc: 	movq	%rax, %rcx
    000003cf: 	movsd	%xmm0, (%rax)
    000003d3: 	movq	(%r12), %rax
    000003d7: 	movq	%rax, 0x10(%rcx)
    000003db: 	movq	0x8(%rbp), %rax
    000003df: 	movq	%rcx, (%r12)
    000003e3: 	movq	0x10(%rbp), %r12
    000003e7: 	addq	$0x1, %rax
    000003eb: 	movq	%rax, 0x8(%rbp)
    000003ef: 	cmpq	%r12, %rax
    000003f2: 	ja	.Ltmp3414 # Offset: 1010
.Ltmp3438:
    000003f8: 	movq	0x28(%rsp), %rbx
    000003fd: 	jmp	.Ltmp3415 # Offset: 1021
.Ltmp3403:
    00000402: 	subss	DATAat0x537a0(%rip), %xmm0
    0000040a: 	cvttss2si	%xmm0, %rax
    0000040f: 	btcq	$0x3f, %rax
    00000414: 	jmp	.Ltmp3416 # Offset: 1044
.Ltmp3395:
    00000419: 	movq	0x30(%rsp), %rax
    0000041e: 	movq	0x80(%rsp), %r14
    00000426: 	movq	%rbp, (%r14,%rax)
    0000042a: 	addq	$0x8, %rax
    0000042e: 	movq	%rax, 0x30(%rsp)
    00000433: 	cmpq	%rax, 0x38(%rsp)
    00000438: 	jne	.Ltmp3417 # Offset: 1080
    0000043e: 	callq	clock@PLT # Offset: 1086
    00000443: 	movq	%r14, 0x10(%rsp)
    00000448: 	movq	%r14, %r13
    0000044b: 	movq	%rax, start_time(%rip)
    00000452: 	movq	0x58(%rsp), %rax
    00000457: 	leaq	0x8(%r14,%rax,8), %r15
    0000045c: 	movq	%r15, 0x8(%rsp)
.Ltmp3422:
    00000461: 	movq	(%r13), %rbp
    00000465: 	xorl	%ebx, %ebx
    00000467: 	movq	0x18(%rbp), %rcx
    0000046b: 	testq	%rcx, %rcx
    0000046e: 	je	.Ltmp3418 # Offset: 1134
.Ltmp3421:
    00000470: 	movq	0x20(%rbp), %rax
    00000474: 	leaq	(%rax,%rbx,8), %rax
    00000478: 	movq	(%rax), %r12
    0000047b: 	movq	$0x0, (%rax)
    00000482: 	testq	%r12, %r12
    00000485: 	je	.Ltmp3419 # Offset: 1157
    00000487: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3420:
    00000490: 	movq	%r12, %rdi
    00000493: 	movq	0x10(%r12), %r12
    00000498: 	movl	$0x18, %esi
    0000049d: 	callq	_ZdlPvm@PLT # Offset: 1181
    000004a2: 	testq	%r12, %r12
    000004a5: 	jne	.Ltmp3420 # Offset: 1189
    000004a7: 	movq	0x18(%rbp), %rcx
.Ltmp3419:
    000004ab: 	addq	$0x1, %rbx
    000004af: 	cmpq	%rcx, %rbx
    000004b2: 	jb	.Ltmp3421 # Offset: 1202
.Ltmp3418:
    000004b4: 	addq	$0x8, %r13
    000004b8: 	movq	$0x0, 0x8(%rbp)
    000004c0: 	cmpq	%r13, %r15
    000004c3: 	jne	.Ltmp3422 # Offset: 1219
    000004c5: 	movq	0x10(%rsp), %r12
    000004ca: 	callq	clock@PLT # Offset: 1226
    000004cf: 	pxor	%xmm0, %xmm0
    000004d3: 	movq	0x8(%rsp), %r15
    000004d8: 	movq	%rax, end_time(%rip)
    000004df: 	subq	start_time(%rip), %rax
    000004e6: 	cvtsi2sd	%rax, %xmm0
    000004eb: 	divsd	DATAat0x53788(%rip), %xmm0
    000004f3: 	addsd	0x50(%rsp), %xmm0
    000004f9: 	movsd	%xmm0, 0x50(%rsp)
.Ltmp3429:
    000004ff: 	movq	(%r12), %r13
    00000503: 	testq	%r13, %r13
    00000506: 	je	.Ltmp3423 # Offset: 1286
    00000508: 	movq	0x18(%r13), %rdx
    0000050c: 	movq	0x20(%r13), %rdi
    00000510: 	testq	%rdx, %rdx
    00000513: 	je	.Ltmp3424 # Offset: 1299
    00000515: 	xorl	%ebp, %ebp
    00000517: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3427:
    00000520: 	leaq	(%rdi,%rbp,8), %rax
    00000524: 	movq	(%rax), %rbx
    00000527: 	movq	$0x0, (%rax)
    0000052e: 	testq	%rbx, %rbx
    00000531: 	je	.Ltmp3425 # Offset: 1329
    00000533: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3426:
    00000538: 	movq	%rbx, %rdi
    0000053b: 	movq	0x10(%rbx), %rbx
    0000053f: 	movl	$0x18, %esi
    00000544: 	callq	_ZdlPvm@PLT # Offset: 1348
    00000549: 	testq	%rbx, %rbx
    0000054c: 	jne	.Ltmp3426 # Offset: 1356
    0000054e: 	movq	0x18(%r13), %rdx
    00000552: 	movq	0x20(%r13), %rdi
.Ltmp3425:
    00000556: 	addq	$0x1, %rbp
    0000055a: 	cmpq	%rdx, %rbp
    0000055d: 	jb	.Ltmp3427 # Offset: 1373
.Ltmp3424:
    0000055f: 	movq	$0x0, 0x8(%r13)
    00000567: 	testq	%rdi, %rdi
    0000056a: 	je	.Ltmp3428 # Offset: 1386
    0000056c: 	callq	_ZdaPv@PLT # Offset: 1388
.Ltmp3428:
    00000571: 	movl	$0x30, %esi
    00000576: 	movq	%r13, %rdi
    00000579: 	callq	_ZdlPvm@PLT # Offset: 1401
.Ltmp3423:
    0000057e: 	movq	$0x0, (%r12)
    00000586: 	addq	$0x8, %r12
    0000058a: 	cmpq	%r15, %r12
    0000058d: 	jne	.Ltmp3429 # Offset: 1421
    00000593: 	movl	0x48(%rsp), %ecx
    00000597: 	movl	iterations(%rip), %eax
    0000059d: 	addl	%ecx, 0x60(%rsp)
    000005a1: 	movl	0x60(%rsp), %ecx
    000005a5: 	cmpl	%ecx, %eax
    000005a7: 	jg	.Ltmp3430 # Offset: 1447
.Ltmp3455:
    000005ad: 	movq	0x68(%rsp), %rdi
    000005b2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1458
    000005b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005be: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000005c5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005cc: 	je	.Ltmp3431 # Offset: 1484
.Ltmp3454:
    000005d2: 	movq	-0x20(%rax), %rdi
    000005d6: 	movsd	0x50(%rsp), %xmm0
    000005dc: 	callq	_Z13record_resultdPKc # Offset: 1500
    000005e1: 	testq	%r14, %r14
    000005e4: 	je	.Ltmp3432 # Offset: 1508
    000005ea: 	movq	0x98(%rsp), %rax
    000005f2: 	subq	%fs:0x28, %rax
    000005fb: 	jne	.Ltmp3433 # Offset: 1531
    00000601: 	movq	0x90(%rsp), %rsi
    00000609: 	addq	$0xa8, %rsp
    00000610: 	movq	%r14, %rdi
    00000613: 	popq	%rbx
    00000614: 	popq	%rbp
    00000615: 	subq	%r14, %rsi
    00000618: 	popq	%r12
    0000061a: 	popq	%r13
    0000061c: 	popq	%r14
    0000061e: 	popq	%r15
    00000620: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1568
.Ltmp3414:
    00000625: 	movq	0x18(%rbp), %rax
    00000629: 	movss	0x28(%rbp), %xmm2
    0000062e: 	movq	%rax, 0x10(%rsp)
    00000633: 	testq	%r12, %r12
    00000636: 	je	.Ltmp3434 # Offset: 1590
    0000063c: 	js	.Ltmp3435 # Offset: 1596
    00000642: 	pxor	%xmm1, %xmm1
    00000646: 	cvtsi2ss	%r12, %xmm1
.Ltmp3453:
    0000064b: 	divss	%xmm2, %xmm1
    0000064f: 	movss	DATAat0x537b0(%rip), %xmm3
    00000657: 	movss	DATAat0x5379c(%rip), %xmm4
    0000065f: 	movaps	%xmm1, %xmm2
    00000662: 	andps	%xmm3, %xmm2
    00000665: 	ucomiss	%xmm2, %xmm4
    00000668: 	jbe	.Ltmp3436 # Offset: 1640
    0000066a: 	cvttss2si	%xmm1, %eax
    0000066e: 	pxor	%xmm2, %xmm2
    00000672: 	movaps	%xmm1, %xmm4
    00000675: 	movss	DATAat0x53798(%rip), %xmm7
    0000067d: 	andnps	%xmm1, %xmm3
    00000680: 	cvtsi2ss	%eax, %xmm2
    00000684: 	cmpnless	%xmm2, %xmm4
    00000689: 	andps	%xmm7, %xmm4
    0000068c: 	addss	%xmm4, %xmm2
    00000690: 	orps	%xmm3, %xmm2
    00000693: 	movaps	%xmm2, %xmm1
.Ltmp3436:
    00000696: 	comiss	DATAat0x537a0(%rip), %xmm1
    0000069d: 	jae	.Ltmp3437 # Offset: 1693
    000006a3: 	cvttss2si	%xmm1, %rax
.Ltmp3451:
    000006a8: 	movl	$0x8, %edx
    000006ad: 	movq	%r12, %xmm4
    000006b2: 	cmpq	%rdx, %rax
    000006b5: 	cmovbq	%rdx, %rax
    000006b9: 	movq	%rax, %rdx
    000006bc: 	shrq	%rdx
    000006bf: 	addq	%rax, %rdx
    000006c2: 	movq	%rdx, %xmm1
    000006c7: 	punpcklqdq	%xmm4, %xmm1
    000006cb: 	movups	%xmm1, 0x10(%rbp)
    000006cf: 	cmpq	0x10(%rsp), %r12
    000006d4: 	je	.Ltmp3438 # Offset: 1748
    000006da: 	movq	%r12, %rax
    000006dd: 	shrq	$0x3c, %rax
    000006e1: 	jne	.Ltmp3439 # Offset: 1761
    000006e7: 	leaq	(,%r12,8), %rdi
.Ltmp3450:
    000006ef: 	callq	_Znam@PLT # Offset: 1775
    000006f4: 	xorl	%esi, %esi
    000006f6: 	leaq	(,%r12,8), %rdx
    000006fe: 	movq	%rax, %rdi
    00000701: 	movq	%rax, %r15
    00000704: 	callq	memset@PLT # Offset: 1796
    00000709: 	cmpq	$0x0, 0x10(%rsp)
    0000070f: 	movq	0x20(%rbp), %r13
    00000713: 	je	.Ltmp3440 # Offset: 1811
    00000719: 	movq	%r13, 0x18(%rsp)
    0000071e: 	xorl	%r12d, %r12d
    00000721: 	movl	$0xc70f6907, %r14d
    00000727: 	movq	%r15, %r13
    0000072a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3446:
    00000730: 	movq	0x18(%rsp), %rax
    00000735: 	movq	(%rax,%r12,8), %rbx
    00000739: 	testq	%rbx, %rbx
    0000073c: 	jne	.Ltmp3441 # Offset: 1852
    0000073e: 	jmp	.Ltmp3442 # Offset: 1854
.Ltmp3444:
    00000740: 	movq	(%r13), %rax
    00000744: 	movq	%rax, 0x10(%rbx)
    00000748: 	movq	%rbx, (%r13)
    0000074c: 	testq	%r15, %r15
    0000074f: 	je	.Ltmp3442 # Offset: 1871
.Ltmp3445:
    00000751: 	movq	%r15, %rbx
.Ltmp3441:
    00000754: 	movsd	(%rbx), %xmm0
    00000758: 	pxor	%xmm6, %xmm6
    0000075c: 	movq	0x10(%rbx), %r15
    00000760: 	ucomisd	%xmm6, %xmm0
    00000764: 	movsd	%xmm0, 0x78(%rsp)
    0000076a: 	jp	.Ltmp3443 # Offset: 1898
    0000076c: 	je	.Ltmp3444 # Offset: 1900
.Ltmp3443:
    0000076e: 	movq	%r14, %rdx
    00000771: 	leaq	0x78(%rsp), %rdi
    00000776: 	movl	$0x8, %esi
    0000077b: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1915
    00000780: 	xorl	%edx, %edx
    00000782: 	divq	0x18(%rbp)
    00000786: 	leaq	(%r13,%rdx,8), %rax
    0000078b: 	movq	(%rax), %rdx
    0000078e: 	movq	%rdx, 0x10(%rbx)
    00000792: 	movq	%rbx, (%rax)
    00000795: 	testq	%r15, %r15
    00000798: 	jne	.Ltmp3445 # Offset: 1944
.Ltmp3442:
    0000079a: 	addq	$0x1, %r12
    0000079e: 	cmpq	%r12, 0x10(%rsp)
    000007a3: 	jne	.Ltmp3446 # Offset: 1955
    000007a5: 	movq	%r13, %r15
    000007a8: 	movq	0x20(%rbp), %r13
.Ltmp3440:
    000007ac: 	testq	%r13, %r13
    000007af: 	je	.Ltmp3447 # Offset: 1967
    000007b1: 	movq	%r13, %rdi
    000007b4: 	callq	_ZdaPv@PLT # Offset: 1972
.Ltmp3447:
    000007b9: 	movq	0x8(%rsp), %rax
    000007be: 	movq	%r15, 0x20(%rbp)
    000007c2: 	movsd	(%rax), %xmm0
    000007c6: 	jmp	.Ltmp3438 # Offset: 1990
.Ltmp3434:
    000007cb: 	movss	DATAat0x537a4(%rip), %xmm1
    000007d3: 	movss	DATAat0x5379c(%rip), %xmm3
    000007db: 	divss	%xmm2, %xmm1
    000007df: 	movss	DATAat0x537b0(%rip), %xmm2
    000007e7: 	andps	%xmm1, %xmm2
    000007ea: 	ucomiss	%xmm2, %xmm3
    000007ed: 	jbe	.Ltmp3448 # Offset: 2029
    000007ef: 	cvttss2si	%xmm1, %eax
    000007f3: 	pxor	%xmm2, %xmm2
    000007f7: 	movaps	%xmm1, %xmm3
    000007fa: 	movss	DATAat0x53798(%rip), %xmm4
    00000802: 	cvtsi2ss	%eax, %xmm2
    00000806: 	cmpnless	%xmm2, %xmm3
    0000080b: 	andps	%xmm4, %xmm3
    0000080e: 	addss	%xmm3, %xmm2
    00000812: 	movss	DATAat0x537b0(%rip), %xmm3
    0000081a: 	andnps	%xmm1, %xmm3
    0000081d: 	orps	%xmm3, %xmm2
    00000820: 	movaps	%xmm2, %xmm1
.Ltmp3448:
    00000823: 	comiss	DATAat0x537a0(%rip), %xmm1
    0000082a: 	jae	.Ltmp3449 # Offset: 2090
    0000082c: 	cvttss2si	%xmm1, %rax
.Ltmp3452:
    00000831: 	movl	$0x8, %edx
    00000836: 	movq	$0x8, 0x18(%rbp)
    0000083e: 	cmpq	%rdx, %rax
    00000841: 	cmovbq	%rdx, %rax
    00000845: 	movq	%rax, %rdx
    00000848: 	shrq	%rdx
    0000084b: 	addq	%rdx, %rax
    0000084e: 	cmpq	$0x8, 0x10(%rsp)
    00000854: 	movq	%rax, 0x10(%rbp)
    00000858: 	je	.Ltmp3438 # Offset: 2136
    0000085e: 	movl	$0x40, %edi
    00000863: 	movl	$0x8, %r12d
    00000869: 	jmp	.Ltmp3450 # Offset: 2153
.Ltmp3437:
    0000086e: 	subss	DATAat0x537a0(%rip), %xmm1
    00000876: 	cvttss2si	%xmm1, %rax
    0000087b: 	btcq	$0x3f, %rax
    00000880: 	jmp	.Ltmp3451 # Offset: 2176
.Ltmp3449:
    00000885: 	subss	DATAat0x537a0(%rip), %xmm1
    0000088d: 	cvttss2si	%xmm1, %rax
    00000892: 	btcq	$0x3f, %rax
    00000897: 	jmp	.Ltmp3452 # Offset: 2199
.Ltmp3435:
    00000899: 	movq	%r12, %rax
    0000089c: 	movq	%r12, %rdx
    0000089f: 	pxor	%xmm1, %xmm1
    000008a3: 	shrq	%rax
    000008a6: 	andl	$0x1, %edx
    000008a9: 	orq	%rdx, %rax
    000008ac: 	cvtsi2ss	%rax, %xmm1
    000008b1: 	addss	%xmm1, %xmm1
    000008b5: 	jmp	.Ltmp3453 # Offset: 2229
.Ltmp3432:
    000008ba: 	movq	0x98(%rsp), %rax
    000008c2: 	subq	%fs:0x28, %rax
    000008cb: 	jne	.Ltmp3433 # Offset: 2251
    000008cd: 	addq	$0xa8, %rsp
    000008d4: 	popq	%rbx
    000008d5: 	popq	%rbp
    000008d6: 	popq	%r12
    000008d8: 	popq	%r13
    000008da: 	popq	%r14
    000008dc: 	popq	%r15
    000008de: 	retq # Offset: 2270
.Ltmp3431:
    000008df: 	movq	-0x8(%rdx), %rax
    000008e3: 	addq	$0x200, %rax
    000008e9: 	jmp	.Ltmp3454 # Offset: 2281
.Ltmp3394:
    000008ee: 	pxor	%xmm4, %xmm4
    000008f2: 	movq	0x80(%rsp), %r14
    000008fa: 	movsd	%xmm4, 0x50(%rsp)
    00000900: 	jmp	.Ltmp3455 # Offset: 2304
.Ltmp3433:
    00000905: 	callq	__stack_chk_fail@PLT # Offset: 2309
.Ltmp3439:
    0000090a: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 2314
    0000090f: 	endbr64
    00000913: 	movq	%rax, %rbp
    00000916: 	movq	0x80(%rsp), %rdi
    0000091e: 	movq	0x90(%rsp), %rsi
    00000926: 	subq	%rdi, %rsi
    00000929: 	testq	%rdi, %rdi
    0000092c: 	je	.Ltmp3456 # Offset: 2348
    0000092e: 	callq	_ZdlPvm@PLT # Offset: 2350
.Ltmp3456:
    00000933: 	movq	%rbp, %rdi
    00000936: 	callq	_Unwind_Resume@PLT # Offset: 2358
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_clearall_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_insert_mapId7HashMapIddELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 222
  State       : disassembled
  Address     : 0x23900
  Size        : 0xac2
  MaxSize     : 0xad0
  Offset      : 0x23900
  Section     : .text
  Orc Section : .local.text._Z15test_insert_mapId7HashMapIddELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0221:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movq	%rdi, 0x40(%rsp)
    0000001a: 	movq	%rsi, 0x20(%rsp)
    0000001f: 	movq	%rdx, 0x78(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0xa8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	movl	iterations(%rip), %eax
    00000049: 	testl	%eax, %eax
    0000004b: 	jle	.Ltmp3457 # Offset: 75
    00000051: 	movss	DATAat0x53798(%rip), %xmm4
    00000059: 	movl	$0x0, 0x8(%rsp)
    00000061: 	leaq	0x90(%rsp), %r14
    00000069: 	movss	%xmm4, 0x34(%rsp)
    0000006f: 	pxor	%xmm4, %xmm4
    00000073: 	movsd	%xmm4, (%rsp)
.Ltmp3465:
    00000078: 	movl	$0x30, %edi
    0000007d: 	callq	_Znwm@PLT # Offset: 125
    00000082: 	movss	0x34(%rsp), %xmm4
    00000088: 	movl	$0x40, %edi
    0000008d: 	movq	$0x8, 0x18(%rax)
    00000095: 	movq	%rax, %r12
    00000098: 	movss	%xmm4, 0x28(%rax)
    0000009d: 	movdqa	DATAat0x537c0(%rip), %xmm4
    000000a5: 	movups	%xmm4, 0x8(%rax)
    000000a9: 	callq	_Znam@PLT # Offset: 169
    000000ae: 	pxor	%xmm0, %xmm0
    000000b2: 	movups	%xmm0, (%rax)
    000000b5: 	movq	%rax, %rbp
    000000b8: 	movups	%xmm0, 0x10(%rax)
    000000bc: 	movups	%xmm0, 0x20(%rax)
    000000c0: 	movups	%xmm0, 0x30(%rax)
    000000c4: 	movq	%rax, 0x20(%r12)
    000000c9: 	movq	0x40(%rsp), %rax
    000000ce: 	movsd	(%rax), %xmm0
    000000d2: 	ucomisd	(%rsp), %xmm0
    000000d7: 	movsd	%xmm0, 0x90(%rsp)
    000000e0: 	jp	.Ltmp3458 # Offset: 224
    000000e6: 	movq	%rbp, %rbx
    000000e9: 	jne	.Ltmp3458 # Offset: 233
    000000ef: 	movq	(%rbx), %r13
    000000f2: 	testq	%r13, %r13
    000000f5: 	je	.Ltmp3459 # Offset: 245
.Ltmp3486:
    000000fb: 	movq	0x40(%rsp), %rax
    00000100: 	movsd	(%rax), %xmm0
    00000104: 	movq	%r13, %rax
    00000107: 	jmp	.Ltmp3460 # Offset: 263
.Ltmp3461:
    00000109: 	movq	0x10(%rax), %rax
    0000010d: 	testq	%rax, %rax
    00000110: 	je	.Ltmp3459 # Offset: 272
.Ltmp3460:
    00000116: 	ucomisd	(%rax), %xmm0
    0000011a: 	jp	.Ltmp3461 # Offset: 282
    0000011c: 	jne	.Ltmp3461 # Offset: 284
    0000011e: 	addq	$0x8, %rax
.Ltmp3487:
    00000122: 	movsd	%xmm0, (%rax)
    00000126: 	movq	%rbp, %rbx
    00000129: 	leaq	0x40(%rbp), %r13
.Ltmp3464:
    0000012d: 	movq	(%rbx), %r15
    00000130: 	movq	$0x0, (%rbx)
    00000137: 	testq	%r15, %r15
    0000013a: 	je	.Ltmp3462 # Offset: 314
    0000013c: 	nopl	(%rax) # Size: 4
.Ltmp3463:
    00000140: 	movq	%r15, %rdi
    00000143: 	movq	0x10(%r15), %r15
    00000147: 	movl	$0x18, %esi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
    00000151: 	testq	%r15, %r15
    00000154: 	jne	.Ltmp3463 # Offset: 340
.Ltmp3462:
    00000156: 	addq	$0x8, %rbx
    0000015a: 	cmpq	%rbx, %r13
    0000015d: 	jne	.Ltmp3464 # Offset: 349
    0000015f: 	movq	%rbp, %rdi
    00000162: 	callq	_ZdaPv@PLT # Offset: 354
    00000167: 	movl	$0x30, %esi
    0000016c: 	movq	%r12, %rdi
    0000016f: 	callq	_ZdlPvm@PLT # Offset: 367
    00000174: 	addl	$0x1, 0x8(%rsp)
    00000179: 	movl	0x8(%rsp), %eax
    0000017d: 	cmpl	%eax, iterations(%rip)
    00000183: 	jg	.Ltmp3465 # Offset: 387
.Ltmp3526:
    00000189: 	callq	clock@PLT # Offset: 393
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	0x20(%rsp), %rcx
    00000197: 	xorl	%edx, %edx
    00000199: 	movq	%rax, end_time(%rip)
    000001a0: 	subq	start_time(%rip), %rax
    000001a7: 	cvtsi2sd	%rax, %xmm0
    000001ac: 	subq	0x40(%rsp), %rcx
    000001b1: 	movabsq	$0x500000000, %rax
    000001bb: 	divsd	DATAat0x53788(%rip), %xmm0
    000001c3: 	divq	%rcx
    000001c6: 	movsd	%xmm0, 0x60(%rsp)
    000001cc: 	movq	%rax, 0x48(%rsp)
    000001d1: 	cmpq	$0x3e8, %rax
    000001d7: 	ja	.Ltmp3466 # Offset: 471
    000001dd: 	cmpq	$0x3, 0x48(%rsp)
    000001e3: 	ja	.Ltmp3467 # Offset: 483
    000001e9: 	movq	$0x0, 0xa0(%rsp)
    000001f5: 	pxor	%xmm0, %xmm0
    000001f9: 	movq	$0x4, 0x48(%rsp)
    00000202: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp3524:
    0000020a: 	movq	0x48(%rsp), %rbx
    0000020f: 	movq	%r14, %rdi
    00000212: 	movq	%rbx, %rsi
    00000215: 	callq	_ZNSt6vectorIP7HashMapIddESaIS2_EE17_M_default_appendEm # Offset: 533
    0000021a: 	movl	iterations(%rip), %eax
    00000220: 	testl	%eax, %eax
    00000222: 	jle	.Ltmp3468 # Offset: 546
    00000228: 	movl	%ebx, 0x6c(%rsp)
    0000022c: 	pxor	%xmm4, %xmm4
    00000230: 	movl	$0x0, 0x68(%rsp)
    00000238: 	movsd	%xmm4, (%rsp)
    0000023d: 	movsd	%xmm4, 0x58(%rsp)
.Ltmp3500:
    00000243: 	movslq	0x68(%rsp), %rdx
    00000248: 	movslq	%eax, %rcx
    0000024b: 	movq	%rdx, %rsi
    0000024e: 	addq	0x48(%rsp), %rdx
    00000253: 	subl	%esi, %eax
    00000255: 	cmpq	%rcx, %rdx
    00000258: 	cmovbl	0x6c(%rsp), %eax
    0000025d: 	movl	%eax, %ebx
    0000025f: 	callq	clock@PLT # Offset: 607
    00000264: 	movq	$0x0, 0x38(%rsp)
    0000026d: 	movq	%rax, start_time(%rip)
    00000274: 	leal	-0x1(%rbx), %eax
    00000277: 	movq	%rax, 0x70(%rsp)
    0000027c: 	leaq	(,%rbx,8), %rax
    00000284: 	movq	%rax, 0x50(%rsp)
.Ltmp3492:
    00000289: 	movl	$0x30, %edi
    0000028e: 	callq	_Znwm@PLT # Offset: 654
    00000293: 	movss	DATAat0x53798(%rip), %xmm4
    0000029b: 	pxor	%xmm0, %xmm0
    0000029f: 	movq	%rax, %rbp
    000002a2: 	movq	$0x0, 0x18(%rax)
    000002aa: 	movq	$0x0, 0x20(%rax)
    000002b2: 	movups	%xmm0, 0x8(%rax)
    000002b6: 	movss	%xmm4, 0x28(%rax)
    000002bb: 	movq	0x40(%rsp), %rax
    000002c0: 	movss	%xmm4, 0x34(%rsp)
    000002c6: 	cmpq	%rax, 0x20(%rsp)
    000002cb: 	je	.Ltmp3469 # Offset: 715
    000002d1: 	xorl	%ebx, %ebx
    000002d3: 	movq	%rax, 0x8(%rsp)
    000002d8: 	testq	%rbx, %rbx
    000002db: 	je	.Ltmp3470 # Offset: 731
    000002e1: 	nopl	(%rax) # Size: 7
.Ltmp3475:
    000002e8: 	movq	0x8(%rsp), %rax
    000002ed: 	movsd	(%rax), %xmm0
    000002f1: 	ucomisd	(%rsp), %xmm0
    000002f6: 	movsd	%xmm0, 0x88(%rsp)
    000002ff: 	jp	.Ltmp3471 # Offset: 767
    00000305: 	movl	$0x0, %eax
    0000030a: 	jne	.Ltmp3471 # Offset: 778
.Ltmp3488:
    00000310: 	xorl	%edx, %edx
    00000312: 	divq	0x18(%rbp)
    00000316: 	movq	0x20(%rbp), %rax
    0000031a: 	movq	(%rax,%rdx,8), %rbx
    0000031e: 	leaq	(,%rdx,8), %r12
    00000326: 	testq	%rbx, %rbx
    00000329: 	je	.Ltmp3472 # Offset: 809
    0000032f: 	movq	0x8(%rsp), %rax
    00000334: 	movsd	(%rax), %xmm0
    00000338: 	jmp	.Ltmp3473 # Offset: 824
    0000033a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3474:
    00000340: 	movq	0x10(%rbx), %rbx
    00000344: 	testq	%rbx, %rbx
    00000347: 	je	.Ltmp3472 # Offset: 839
.Ltmp3473:
    0000034d: 	ucomisd	(%rbx), %xmm0
    00000351: 	jp	.Ltmp3474 # Offset: 849
    00000353: 	jne	.Ltmp3474 # Offset: 851
.Ltmp3490:
    00000355: 	addq	$0x8, 0x8(%rsp)
    0000035b: 	addq	$0x8, %rbx
    0000035f: 	movq	0x8(%rsp), %rax
    00000364: 	movsd	%xmm0, (%rbx)
    00000368: 	cmpq	%rax, 0x20(%rsp)
    0000036d: 	je	.Ltmp3469 # Offset: 877
    00000373: 	movq	0x10(%rbp), %rbx
    00000377: 	testq	%rbx, %rbx
    0000037a: 	jne	.Ltmp3475 # Offset: 890
.Ltmp3470:
    00000380: 	movss	DATAat0x537b0(%rip), %xmm2
    00000388: 	movss	DATAat0x537a4(%rip), %xmm0
    00000390: 	divss	0x28(%rbp), %xmm0
    00000395: 	movaps	%xmm0, %xmm1
    00000398: 	movss	DATAat0x5379c(%rip), %xmm3
    000003a0: 	movq	0x18(%rbp), %rax
    000003a4: 	andps	%xmm2, %xmm1
    000003a7: 	ucomiss	%xmm1, %xmm3
    000003aa: 	movq	%rax, 0x18(%rsp)
    000003af: 	jbe	.Ltmp3476 # Offset: 943
    000003b1: 	cvttss2si	%xmm0, %eax
    000003b5: 	movaps	%xmm0, %xmm3
    000003b8: 	movss	0x34(%rsp), %xmm4
    000003be: 	andnps	%xmm0, %xmm2
    000003c1: 	pxor	%xmm1, %xmm1
    000003c5: 	cvtsi2ss	%eax, %xmm1
    000003c9: 	cmpnless	%xmm1, %xmm3
    000003ce: 	andps	%xmm4, %xmm3
    000003d1: 	addss	%xmm3, %xmm1
    000003d5: 	orps	%xmm2, %xmm1
    000003d8: 	movaps	%xmm1, %xmm0
.Ltmp3476:
    000003db: 	comiss	DATAat0x537a0(%rip), %xmm0
    000003e2: 	jae	.Ltmp3477 # Offset: 994
    000003e8: 	cvttss2si	%xmm0, %rax
.Ltmp3491:
    000003ed: 	movl	$0x8, %edx
    000003f2: 	movq	0x18(%rsp), %r15
    000003f7: 	movq	$0x8, 0x18(%rbp)
    000003ff: 	cmpq	%rdx, %rax
    00000402: 	cmovbq	%rdx, %rax
    00000406: 	movq	%rax, %rdx
    00000409: 	shrq	%rdx
    0000040c: 	addq	%rdx, %rax
    0000040f: 	movq	%rax, 0x10(%rbp)
    00000413: 	cmpq	$0x8, %r15
    00000417: 	je	.Ltmp3475 # Offset: 1047
    0000041d: 	movl	$0x40, %edi
    00000422: 	callq	_Znam@PLT # Offset: 1058
    00000427: 	pxor	%xmm0, %xmm0
    0000042b: 	movq	%rax, %r14
    0000042e: 	movups	%xmm0, (%rax)
    00000431: 	movups	%xmm0, 0x10(%rax)
    00000435: 	movups	%xmm0, 0x20(%rax)
    00000439: 	movups	%xmm0, 0x30(%rax)
    0000043d: 	movq	0x20(%rbp), %rax
    00000441: 	movq	%rax, 0x10(%rsp)
    00000446: 	testq	%r15, %r15
    00000449: 	je	.Ltmp3478 # Offset: 1097
    0000044f: 	movl	$0xc70f6907, %r12d
    00000455: 	nopl	(%rax) # Size: 3
.Ltmp3484:
    00000458: 	movq	0x10(%rsp), %rax
    0000045d: 	movq	(%rax,%rbx,8), %r13
    00000461: 	testq	%r13, %r13
    00000464: 	jne	.Ltmp3479 # Offset: 1124
    00000466: 	jmp	.Ltmp3480 # Offset: 1126
    00000468: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3482:
    00000470: 	movq	(%r14), %rax
    00000473: 	movq	%rax, 0x10(%r13)
    00000477: 	movq	%r13, (%r14)
    0000047a: 	testq	%r15, %r15
    0000047d: 	je	.Ltmp3480 # Offset: 1149
.Ltmp3483:
    0000047f: 	movq	%r15, %r13
.Ltmp3479:
    00000482: 	movsd	(%r13), %xmm0
    00000488: 	ucomisd	(%rsp), %xmm0
    0000048d: 	movq	0x10(%r13), %r15
    00000491: 	movsd	%xmm0, 0x88(%rsp)
    0000049a: 	jp	.Ltmp3481 # Offset: 1178
    0000049c: 	je	.Ltmp3482 # Offset: 1180
.Ltmp3481:
    0000049e: 	movq	%r12, %rdx
    000004a1: 	leaq	0x88(%rsp), %rdi
    000004a9: 	movl	$0x8, %esi
    000004ae: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1198
    000004b3: 	xorl	%edx, %edx
    000004b5: 	divq	0x18(%rbp)
    000004b9: 	leaq	(%r14,%rdx,8), %rax
    000004bd: 	movq	(%rax), %rdx
    000004c0: 	movq	%rdx, 0x10(%r13)
    000004c4: 	movq	%r13, (%rax)
    000004c7: 	testq	%r15, %r15
    000004ca: 	jne	.Ltmp3483 # Offset: 1226
.Ltmp3480:
    000004cc: 	addq	$0x1, %rbx
    000004d0: 	cmpq	%rbx, 0x18(%rsp)
    000004d5: 	jne	.Ltmp3484 # Offset: 1237
    000004d7: 	movq	0x20(%rbp), %rax
    000004db: 	movq	%rax, 0x10(%rsp)
.Ltmp3478:
    000004e0: 	movq	0x10(%rsp), %rax
    000004e5: 	testq	%rax, %rax
    000004e8: 	je	.Ltmp3485 # Offset: 1256
    000004ea: 	movq	%rax, %rdi
    000004ed: 	callq	_ZdaPv@PLT # Offset: 1261
.Ltmp3485:
    000004f2: 	movq	%r14, 0x20(%rbp)
    000004f6: 	jmp	.Ltmp3475 # Offset: 1270
.Ltmp3458:
    000004fb: 	movl	$0xc70f6907, %edx
    00000500: 	movl	$0x8, %esi
    00000505: 	movq	%r14, %rdi
    00000508: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1288
    0000050d: 	andl	$0x7, %eax
    00000510: 	leaq	(%rbp,%rax,8), %rbx
    00000515: 	movq	(%rbx), %r13
    00000518: 	testq	%r13, %r13
    0000051b: 	jne	.Ltmp3486 # Offset: 1307
.Ltmp3459:
    00000521: 	movl	$0x18, %edi
    00000526: 	callq	_Znwm@PLT # Offset: 1318
    0000052b: 	movq	0x40(%rsp), %rcx
    00000530: 	movq	$0x1, 0x8(%r12)
    00000539: 	movq	$0x0, 0x8(%rax)
    00000541: 	movsd	(%rcx), %xmm0
    00000545: 	movq	%r13, 0x10(%rax)
    00000549: 	movq	%rax, (%rbx)
    0000054c: 	addq	$0x8, %rax
    00000550: 	movsd	%xmm0, -0x8(%rax)
    00000555: 	jmp	.Ltmp3487 # Offset: 1365
    0000055a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3471:
    00000560: 	leaq	0x88(%rsp), %rdi
    00000568: 	movl	$0xc70f6907, %edx
    0000056d: 	movl	$0x8, %esi
    00000572: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1394
    00000577: 	jmp	.Ltmp3488 # Offset: 1399
    0000057c: 	nopl	(%rax) # Size: 4
.Ltmp3472:
    00000580: 	movl	$0x18, %edi
    00000585: 	callq	_Znwm@PLT # Offset: 1413
    0000058a: 	movq	0x8(%rsp), %rcx
    0000058f: 	addq	0x20(%rbp), %r12
    00000593: 	movq	%rax, 0x28(%rsp)
    00000598: 	movq	$0x0, 0x8(%rax)
    000005a0: 	movsd	(%rcx), %xmm0
    000005a4: 	movq	%rax, %rcx
    000005a7: 	movsd	%xmm0, (%rax)
    000005ab: 	movq	(%r12), %rax
    000005af: 	movq	%rax, 0x10(%rcx)
    000005b3: 	movq	0x8(%rbp), %rax
    000005b7: 	movq	%rcx, (%r12)
    000005bb: 	movq	0x10(%rbp), %r12
    000005bf: 	addq	$0x1, %rax
    000005c3: 	movq	%rax, 0x8(%rbp)
    000005c7: 	cmpq	%r12, %rax
    000005ca: 	ja	.Ltmp3489 # Offset: 1482
.Ltmp3508:
    000005d0: 	movq	0x28(%rsp), %rbx
    000005d5: 	jmp	.Ltmp3490 # Offset: 1493
.Ltmp3477:
    000005da: 	subss	DATAat0x537a0(%rip), %xmm0
    000005e2: 	cvttss2si	%xmm0, %rax
    000005e7: 	btcq	$0x3f, %rax
    000005ec: 	jmp	.Ltmp3491 # Offset: 1516
.Ltmp3469:
    000005f1: 	movq	0x38(%rsp), %rax
    000005f6: 	movq	0x90(%rsp), %r12
    000005fe: 	movq	%rbp, (%r12,%rax)
    00000602: 	addq	$0x8, %rax
    00000606: 	movq	%rax, 0x38(%rsp)
    0000060b: 	cmpq	0x50(%rsp), %rax
    00000610: 	jne	.Ltmp3492 # Offset: 1552
    00000616: 	callq	clock@PLT # Offset: 1558
    0000061b: 	pxor	%xmm0, %xmm0
    0000061f: 	movq	%r12, %r13
    00000622: 	movq	%rax, end_time(%rip)
    00000629: 	subq	start_time(%rip), %rax
    00000630: 	cvtsi2sd	%rax, %xmm0
    00000635: 	divsd	DATAat0x53788(%rip), %xmm0
    0000063d: 	addsd	0x58(%rsp), %xmm0
    00000643: 	movq	0x70(%rsp), %rax
    00000648: 	leaq	0x8(%r12,%rax,8), %r14
    0000064d: 	movsd	%xmm0, 0x58(%rsp)
.Ltmp3499:
    00000653: 	movq	(%r13), %r15
    00000657: 	testq	%r15, %r15
    0000065a: 	je	.Ltmp3493 # Offset: 1626
    0000065c: 	movq	0x18(%r15), %rdx
    00000660: 	movq	0x20(%r15), %rdi
    00000664: 	testq	%rdx, %rdx
    00000667: 	je	.Ltmp3494 # Offset: 1639
    00000669: 	xorl	%ebp, %ebp
    0000066b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3497:
    00000670: 	leaq	(%rdi,%rbp,8), %rax
    00000674: 	movq	(%rax), %rbx
    00000677: 	movq	$0x0, (%rax)
    0000067e: 	testq	%rbx, %rbx
    00000681: 	je	.Ltmp3495 # Offset: 1665
    00000683: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3496:
    00000688: 	movq	%rbx, %rdi
    0000068b: 	movq	0x10(%rbx), %rbx
    0000068f: 	movl	$0x18, %esi
    00000694: 	callq	_ZdlPvm@PLT # Offset: 1684
    00000699: 	testq	%rbx, %rbx
    0000069c: 	jne	.Ltmp3496 # Offset: 1692
    0000069e: 	movq	0x18(%r15), %rdx
    000006a2: 	movq	0x20(%r15), %rdi
.Ltmp3495:
    000006a6: 	addq	$0x1, %rbp
    000006aa: 	cmpq	%rbp, %rdx
    000006ad: 	ja	.Ltmp3497 # Offset: 1709
.Ltmp3494:
    000006af: 	movq	$0x0, 0x8(%r15)
    000006b7: 	testq	%rdi, %rdi
    000006ba: 	je	.Ltmp3498 # Offset: 1722
    000006bc: 	callq	_ZdaPv@PLT # Offset: 1724
.Ltmp3498:
    000006c1: 	movl	$0x30, %esi
    000006c6: 	movq	%r15, %rdi
    000006c9: 	callq	_ZdlPvm@PLT # Offset: 1737
.Ltmp3493:
    000006ce: 	movq	$0x0, (%r13)
    000006d6: 	addq	$0x8, %r13
    000006da: 	cmpq	%r14, %r13
    000006dd: 	jne	.Ltmp3499 # Offset: 1757
    000006e3: 	movl	0x48(%rsp), %ecx
    000006e7: 	movl	iterations(%rip), %eax
    000006ed: 	addl	%ecx, 0x68(%rsp)
    000006f1: 	movl	0x68(%rsp), %ecx
    000006f5: 	cmpl	%ecx, %eax
    000006f7: 	jg	.Ltmp3500 # Offset: 1783
.Ltmp3527:
    000006fd: 	movq	0x78(%rsp), %rdi
    00000702: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1794
    00000707: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000070e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000715: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000071c: 	je	.Ltmp3501 # Offset: 1820
.Ltmp3525:
    00000722: 	movsd	0x58(%rsp), %xmm0
    00000728: 	subsd	0x60(%rsp), %xmm0
    0000072e: 	movq	-0x20(%rax), %rdi
    00000732: 	callq	_Z13record_resultdPKc # Offset: 1842
    00000737: 	testq	%r12, %r12
    0000073a: 	je	.Ltmp3502 # Offset: 1850
    00000740: 	movq	0xa8(%rsp), %rax
    00000748: 	subq	%fs:0x28, %rax
    00000751: 	jne	.Ltmp3503 # Offset: 1873
    00000757: 	movq	0xa0(%rsp), %rsi
    0000075f: 	addq	$0xb8, %rsp
    00000766: 	movq	%r12, %rdi
    00000769: 	popq	%rbx
    0000076a: 	popq	%rbp
    0000076b: 	subq	%r12, %rsi
    0000076e: 	popq	%r12
    00000770: 	popq	%r13
    00000772: 	popq	%r14
    00000774: 	popq	%r15
    00000776: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1910
.Ltmp3489:
    0000077b: 	movq	0x18(%rbp), %rax
    0000077f: 	movss	0x28(%rbp), %xmm2
    00000784: 	movq	%rax, 0x10(%rsp)
    00000789: 	testq	%r12, %r12
    0000078c: 	je	.Ltmp3504 # Offset: 1932
    00000792: 	js	.Ltmp3505 # Offset: 1938
    00000798: 	pxor	%xmm1, %xmm1
    0000079c: 	cvtsi2ss	%r12, %xmm1
.Ltmp3523:
    000007a1: 	divss	%xmm2, %xmm1
    000007a5: 	movss	DATAat0x537b0(%rip), %xmm3
    000007ad: 	movss	DATAat0x5379c(%rip), %xmm4
    000007b5: 	movaps	%xmm1, %xmm2
    000007b8: 	andps	%xmm3, %xmm2
    000007bb: 	ucomiss	%xmm2, %xmm4
    000007be: 	jbe	.Ltmp3506 # Offset: 1982
    000007c0: 	cvttss2si	%xmm1, %eax
    000007c4: 	movaps	%xmm1, %xmm4
    000007c7: 	movss	0x34(%rsp), %xmm7
    000007cd: 	andnps	%xmm1, %xmm3
    000007d0: 	pxor	%xmm2, %xmm2
    000007d4: 	cvtsi2ss	%eax, %xmm2
    000007d8: 	cmpnless	%xmm2, %xmm4
    000007dd: 	andps	%xmm7, %xmm4
    000007e0: 	addss	%xmm4, %xmm2
    000007e4: 	orps	%xmm3, %xmm2
    000007e7: 	movaps	%xmm2, %xmm1
.Ltmp3506:
    000007ea: 	comiss	DATAat0x537a0(%rip), %xmm1
    000007f1: 	jae	.Ltmp3507 # Offset: 2033
    000007f7: 	cvttss2si	%xmm1, %rax
.Ltmp3521:
    000007fc: 	movl	$0x8, %edx
    00000801: 	movq	%r12, %xmm4
    00000806: 	cmpq	%rdx, %rax
    00000809: 	cmovbq	%rdx, %rax
    0000080d: 	movq	%rax, %rdx
    00000810: 	shrq	%rdx
    00000813: 	addq	%rax, %rdx
    00000816: 	movq	%rdx, %xmm1
    0000081b: 	punpcklqdq	%xmm4, %xmm1
    0000081f: 	movups	%xmm1, 0x10(%rbp)
    00000823: 	cmpq	0x10(%rsp), %r12
    00000828: 	je	.Ltmp3508 # Offset: 2088
    0000082e: 	movq	%r12, %rax
    00000831: 	shrq	$0x3c, %rax
    00000835: 	jne	.Ltmp3509 # Offset: 2101
    0000083b: 	leaq	(,%r12,8), %rdi
.Ltmp3520:
    00000843: 	callq	_Znam@PLT # Offset: 2115
    00000848: 	xorl	%esi, %esi
    0000084a: 	leaq	(,%r12,8), %rdx
    00000852: 	movq	%rax, %rdi
    00000855: 	movq	%rax, %r15
    00000858: 	callq	memset@PLT # Offset: 2136
    0000085d: 	cmpq	$0x0, 0x10(%rsp)
    00000863: 	movq	0x20(%rbp), %r13
    00000867: 	je	.Ltmp3510 # Offset: 2151
    0000086d: 	movq	%r13, 0x18(%rsp)
    00000872: 	xorl	%r12d, %r12d
    00000875: 	movl	$0xc70f6907, %r14d
    0000087b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3516:
    00000880: 	movq	0x18(%rsp), %rax
    00000885: 	movq	(%rax,%r12,8), %rbx
    00000889: 	testq	%rbx, %rbx
    0000088c: 	jne	.Ltmp3511 # Offset: 2188
    0000088e: 	jmp	.Ltmp3512 # Offset: 2190
.Ltmp3514:
    00000890: 	movq	(%r15), %rax
    00000893: 	movq	%rax, 0x10(%rbx)
    00000897: 	movq	%rbx, (%r15)
    0000089a: 	testq	%r13, %r13
    0000089d: 	je	.Ltmp3512 # Offset: 2205
.Ltmp3515:
    0000089f: 	movq	%r13, %rbx
.Ltmp3511:
    000008a2: 	movsd	(%rbx), %xmm0
    000008a6: 	ucomisd	(%rsp), %xmm0
    000008ab: 	movq	0x10(%rbx), %r13
    000008af: 	movsd	%xmm0, 0x88(%rsp)
    000008b8: 	jp	.Ltmp3513 # Offset: 2232
    000008ba: 	je	.Ltmp3514 # Offset: 2234
.Ltmp3513:
    000008bc: 	movq	%r14, %rdx
    000008bf: 	leaq	0x88(%rsp), %rdi
    000008c7: 	movl	$0x8, %esi
    000008cc: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 2252
    000008d1: 	xorl	%edx, %edx
    000008d3: 	divq	0x18(%rbp)
    000008d7: 	leaq	(%r15,%rdx,8), %rax
    000008db: 	movq	(%rax), %rdx
    000008de: 	movq	%rdx, 0x10(%rbx)
    000008e2: 	movq	%rbx, (%rax)
    000008e5: 	testq	%r13, %r13
    000008e8: 	jne	.Ltmp3515 # Offset: 2280
.Ltmp3512:
    000008ea: 	addq	$0x1, %r12
    000008ee: 	cmpq	%r12, 0x10(%rsp)
    000008f3: 	jne	.Ltmp3516 # Offset: 2291
    000008f5: 	movq	0x20(%rbp), %r13
.Ltmp3510:
    000008f9: 	testq	%r13, %r13
    000008fc: 	je	.Ltmp3517 # Offset: 2300
    000008fe: 	movq	%r13, %rdi
    00000901: 	callq	_ZdaPv@PLT # Offset: 2305
.Ltmp3517:
    00000906: 	movq	0x8(%rsp), %rax
    0000090b: 	movq	%r15, 0x20(%rbp)
    0000090f: 	movsd	(%rax), %xmm0
    00000913: 	jmp	.Ltmp3508 # Offset: 2323
.Ltmp3504:
    00000918: 	movss	DATAat0x537a4(%rip), %xmm1
    00000920: 	movss	DATAat0x5379c(%rip), %xmm3
    00000928: 	divss	%xmm2, %xmm1
    0000092c: 	movss	DATAat0x537b0(%rip), %xmm2
    00000934: 	andps	%xmm1, %xmm2
    00000937: 	ucomiss	%xmm2, %xmm3
    0000093a: 	jbe	.Ltmp3518 # Offset: 2362
    0000093c: 	cvttss2si	%xmm1, %eax
    00000940: 	pxor	%xmm2, %xmm2
    00000944: 	movaps	%xmm1, %xmm3
    00000947: 	movss	0x34(%rsp), %xmm4
    0000094d: 	cvtsi2ss	%eax, %xmm2
    00000951: 	cmpnless	%xmm2, %xmm3
    00000956: 	andps	%xmm4, %xmm3
    00000959: 	addss	%xmm3, %xmm2
    0000095d: 	movss	DATAat0x537b0(%rip), %xmm3
    00000965: 	andnps	%xmm1, %xmm3
    00000968: 	orps	%xmm3, %xmm2
    0000096b: 	movaps	%xmm2, %xmm1
.Ltmp3518:
    0000096e: 	comiss	DATAat0x537a0(%rip), %xmm1
    00000975: 	jae	.Ltmp3519 # Offset: 2421
    00000977: 	cvttss2si	%xmm1, %rax
.Ltmp3522:
    0000097c: 	movl	$0x8, %edx
    00000981: 	movq	$0x8, 0x18(%rbp)
    00000989: 	cmpq	%rdx, %rax
    0000098c: 	cmovbq	%rdx, %rax
    00000990: 	movq	%rax, %rdx
    00000993: 	shrq	%rdx
    00000996: 	addq	%rdx, %rax
    00000999: 	cmpq	$0x8, 0x10(%rsp)
    0000099f: 	movq	%rax, 0x10(%rbp)
    000009a3: 	je	.Ltmp3508 # Offset: 2467
    000009a9: 	movl	$0x40, %edi
    000009ae: 	movl	$0x8, %r12d
    000009b4: 	jmp	.Ltmp3520 # Offset: 2484
.Ltmp3507:
    000009b9: 	subss	DATAat0x537a0(%rip), %xmm1
    000009c1: 	cvttss2si	%xmm1, %rax
    000009c6: 	btcq	$0x3f, %rax
    000009cb: 	jmp	.Ltmp3521 # Offset: 2507
.Ltmp3519:
    000009d0: 	subss	DATAat0x537a0(%rip), %xmm1
    000009d8: 	cvttss2si	%xmm1, %rax
    000009dd: 	btcq	$0x3f, %rax
    000009e2: 	jmp	.Ltmp3522 # Offset: 2530
.Ltmp3505:
    000009e4: 	movq	%r12, %rax
    000009e7: 	movq	%r12, %rdx
    000009ea: 	pxor	%xmm1, %xmm1
    000009ee: 	shrq	%rax
    000009f1: 	andl	$0x1, %edx
    000009f4: 	orq	%rdx, %rax
    000009f7: 	cvtsi2ss	%rax, %xmm1
    000009fc: 	addss	%xmm1, %xmm1
    00000a00: 	jmp	.Ltmp3523 # Offset: 2560
.Ltmp3466:
    00000a05: 	movq	$0x3e8, 0x48(%rsp)
.Ltmp3467:
    00000a0e: 	movq	$0x0, 0xa0(%rsp)
    00000a1a: 	pxor	%xmm0, %xmm0
    00000a1e: 	movaps	%xmm0, 0x90(%rsp)
    00000a26: 	jmp	.Ltmp3524 # Offset: 2598
.Ltmp3502:
    00000a2b: 	movq	0xa8(%rsp), %rax
    00000a33: 	subq	%fs:0x28, %rax
    00000a3c: 	jne	.Ltmp3503 # Offset: 2620
    00000a3e: 	addq	$0xb8, %rsp
    00000a45: 	popq	%rbx
    00000a46: 	popq	%rbp
    00000a47: 	popq	%r12
    00000a49: 	popq	%r13
    00000a4b: 	popq	%r14
    00000a4d: 	popq	%r15
    00000a4f: 	retq # Offset: 2639
.Ltmp3501:
    00000a50: 	movq	-0x8(%rdx), %rax
    00000a54: 	addq	$0x200, %rax
    00000a5a: 	jmp	.Ltmp3525 # Offset: 2650
.Ltmp3457:
    00000a5f: 	leaq	0x90(%rsp), %r14
    00000a67: 	jmp	.Ltmp3526 # Offset: 2663
.Ltmp3503:
    00000a6c: 	callq	__stack_chk_fail@PLT # Offset: 2668
    00000a71: 	nopl	(%rax) # Size: 7
.Ltmp3468:
    00000a78: 	pxor	%xmm4, %xmm4
    00000a7c: 	movq	0x90(%rsp), %r12
    00000a84: 	movsd	%xmm4, 0x58(%rsp)
    00000a8a: 	jmp	.Ltmp3527 # Offset: 2698
    00000a8f: 	endbr64
    00000a93: 	movq	%rax, %rbp
    00000a96: 	jmp	.Ltmp3528 # Offset: 2710
.Ltmp3509:
    00000a98: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 2712
.Ltmp3528:
    00000a9d: 	movq	0x90(%rsp), %rdi
    00000aa5: 	movq	0xa0(%rsp), %rsi
    00000aad: 	subq	%rdi, %rsi
    00000ab0: 	testq	%rdi, %rdi
    00000ab3: 	je	.Ltmp3529 # Offset: 2739
    00000ab5: 	callq	_ZdlPvm@PLT # Offset: 2741
.Ltmp3529:
    00000aba: 	movq	%rbp, %rdi
    00000abd: 	callq	_Unwind_Resume@PLT # Offset: 2749
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_insert_mapId7HashMapIddELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_erase_mapId7HashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 223
  State       : disassembled
  Address     : 0x243d0
  Size        : 0xa9f
  MaxSize     : 0xaa0
  Offset      : 0x243d0
  Section     : .text
  Orc Section : .local.text._Z14test_erase_mapId7HashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0222:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movq	%rdx, 0x48(%rsp)
    0000001a: 	xorl	%edx, %edx
    0000001c: 	movq	%rcx, 0x68(%rsp)
    00000021: 	movq	%rsi, %rcx
    00000024: 	movq	%rdi, 0x40(%rsp)
    00000029: 	subq	%rdi, %rcx
    0000002c: 	movq	%rsi, 0x20(%rsp)
    00000031: 	movq	%r8, 0x78(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0xa8(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movabsq	$0x500000000, %rax
    00000053: 	divq	%rcx
    00000056: 	movq	%rax, 0x50(%rsp)
    0000005b: 	cmpq	$0x3e8, %rax
    00000061: 	ja	.Ltmp3530 # Offset: 97
    00000067: 	cmpq	$0x3, %rax
    0000006b: 	ja	.Ltmp3531 # Offset: 107
    00000071: 	movq	$0x0, 0xa0(%rsp)
    0000007d: 	pxor	%xmm0, %xmm0
    00000081: 	movq	$0x4, 0x50(%rsp)
    0000008a: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp3550:
    00000092: 	movq	0x50(%rsp), %rbx
    00000097: 	leaq	0x90(%rsp), %rdi
    0000009f: 	movq	%rbx, %rsi
    000000a2: 	callq	_ZNSt6vectorIP7HashMapIddESaIS2_EE17_M_default_appendEm # Offset: 162
    000000a7: 	movl	iterations(%rip), %eax
    000000ad: 	testl	%eax, %eax
    000000af: 	jle	.Ltmp3532 # Offset: 175
    000000b5: 	movl	%ebx, 0x74(%rsp)
    000000b9: 	movq	$0x0, 0x58(%rsp)
    000000c2: 	movl	$0x0, 0x70(%rsp)
.Ltmp3572:
    000000ca: 	movslq	0x70(%rsp), %rdx
    000000cf: 	movslq	%eax, %rcx
    000000d2: 	movq	$0x0, 0x30(%rsp)
    000000db: 	movq	%rdx, %rsi
    000000de: 	addq	0x50(%rsp), %rdx
    000000e3: 	subl	%esi, %eax
    000000e5: 	cmpq	%rcx, %rdx
    000000e8: 	cmovbl	0x74(%rsp), %eax
    000000ed: 	leal	-0x1(%rax), %ecx
    000000f0: 	movl	%eax, %eax
    000000f2: 	shlq	$0x3, %rax
    000000f6: 	movq	%rcx, 0x60(%rsp)
    000000fb: 	movq	%rax, 0x38(%rsp)
.Ltmp3555:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	pxor	%xmm0, %xmm0
    0000010e: 	movq	$0x0, 0x18(%rax)
    00000116: 	movq	%rax, %rbp
    00000119: 	movq	$0x0, 0x20(%rax)
    00000121: 	movl	$0x3f800000, 0x28(%rax)
    00000128: 	movups	%xmm0, 0x8(%rax)
    0000012c: 	movq	0x40(%rsp), %rax
    00000131: 	cmpq	%rax, 0x20(%rsp)
    00000136: 	je	.Ltmp3533 # Offset: 310
    0000013c: 	xorl	%ebx, %ebx
    0000013e: 	movq	%rax, 0x8(%rsp)
    00000143: 	testq	%rbx, %rbx
    00000146: 	je	.Ltmp3534 # Offset: 326
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp3539:
    00000150: 	movq	0x8(%rsp), %rax
    00000155: 	pxor	%xmm7, %xmm7
    00000159: 	movsd	(%rax), %xmm0
    0000015d: 	movsd	%xmm0, 0x88(%rsp)
    00000166: 	ucomisd	%xmm7, %xmm0
    0000016a: 	jp	.Ltmp3535 # Offset: 362
    00000170: 	movl	$0x0, %eax
    00000175: 	jne	.Ltmp3535 # Offset: 373
.Ltmp3551:
    0000017b: 	xorl	%edx, %edx
    0000017d: 	divq	0x18(%rbp)
    00000181: 	movq	0x20(%rbp), %rax
    00000185: 	movq	(%rax,%rdx,8), %rbx
    00000189: 	leaq	(,%rdx,8), %r12
    00000191: 	testq	%rbx, %rbx
    00000194: 	je	.Ltmp3536 # Offset: 404
    0000019a: 	movq	0x8(%rsp), %rax
    0000019f: 	movsd	(%rax), %xmm0
    000001a3: 	jmp	.Ltmp3537 # Offset: 419
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp3538:
    000001a8: 	movq	0x10(%rbx), %rbx
    000001ac: 	testq	%rbx, %rbx
    000001af: 	je	.Ltmp3536 # Offset: 431
.Ltmp3537:
    000001b5: 	ucomisd	(%rbx), %xmm0
    000001b9: 	jp	.Ltmp3538 # Offset: 441
    000001bb: 	jne	.Ltmp3538 # Offset: 443
.Ltmp3553:
    000001bd: 	addq	$0x8, 0x8(%rsp)
    000001c3: 	addq	$0x8, %rbx
    000001c7: 	movq	0x8(%rsp), %rax
    000001cc: 	movsd	%xmm0, (%rbx)
    000001d0: 	cmpq	%rax, 0x20(%rsp)
    000001d5: 	je	.Ltmp3533 # Offset: 469
    000001db: 	movq	0x10(%rbp), %rbx
    000001df: 	testq	%rbx, %rbx
    000001e2: 	jne	.Ltmp3539 # Offset: 482
.Ltmp3534:
    000001e8: 	movss	DATAat0x537b0(%rip), %xmm2
    000001f0: 	movss	DATAat0x537a4(%rip), %xmm0
    000001f8: 	divss	0x28(%rbp), %xmm0
    000001fd: 	movaps	%xmm0, %xmm1
    00000200: 	movss	DATAat0x5379c(%rip), %xmm3
    00000208: 	movq	0x18(%rbp), %rax
    0000020c: 	andps	%xmm2, %xmm1
    0000020f: 	ucomiss	%xmm1, %xmm3
    00000212: 	movq	%rax, 0x18(%rsp)
    00000217: 	jbe	.Ltmp3540 # Offset: 535
    00000219: 	cvttss2si	%xmm0, %eax
    0000021d: 	pxor	%xmm1, %xmm1
    00000221: 	movaps	%xmm0, %xmm3
    00000224: 	movss	DATAat0x53798(%rip), %xmm4
    0000022c: 	andnps	%xmm0, %xmm2
    0000022f: 	cvtsi2ss	%eax, %xmm1
    00000233: 	cmpnless	%xmm1, %xmm3
    00000238: 	andps	%xmm4, %xmm3
    0000023b: 	addss	%xmm3, %xmm1
    0000023f: 	orps	%xmm2, %xmm1
    00000242: 	movaps	%xmm1, %xmm0
.Ltmp3540:
    00000245: 	comiss	DATAat0x537a0(%rip), %xmm0
    0000024c: 	jae	.Ltmp3541 # Offset: 588
    00000252: 	cvttss2si	%xmm0, %rax
.Ltmp3554:
    00000257: 	movl	$0x8, %edx
    0000025c: 	movq	0x18(%rsp), %r15
    00000261: 	movq	$0x8, 0x18(%rbp)
    00000269: 	cmpq	%rdx, %rax
    0000026c: 	cmovbq	%rdx, %rax
    00000270: 	movq	%rax, %rdx
    00000273: 	shrq	%rdx
    00000276: 	addq	%rdx, %rax
    00000279: 	movq	%rax, 0x10(%rbp)
    0000027d: 	cmpq	$0x8, %r15
    00000281: 	je	.Ltmp3539 # Offset: 641
    00000287: 	movl	$0x40, %edi
    0000028c: 	callq	_Znam@PLT # Offset: 652
    00000291: 	pxor	%xmm0, %xmm0
    00000295: 	movq	%rax, %r14
    00000298: 	movups	%xmm0, (%rax)
    0000029b: 	movups	%xmm0, 0x10(%rax)
    0000029f: 	movups	%xmm0, 0x20(%rax)
    000002a3: 	movups	%xmm0, 0x30(%rax)
    000002a7: 	movq	0x20(%rbp), %rax
    000002ab: 	movq	%rax, 0x10(%rsp)
    000002b0: 	testq	%r15, %r15
    000002b3: 	je	.Ltmp3542 # Offset: 691
    000002b9: 	movl	$0xc70f6907, %r12d
    000002bf: 	movq	%r14, %r15
    000002c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3548:
    000002c8: 	movq	0x10(%rsp), %rax
    000002cd: 	movq	(%rax,%rbx,8), %r13
    000002d1: 	testq	%r13, %r13
    000002d4: 	jne	.Ltmp3543 # Offset: 724
    000002d6: 	jmp	.Ltmp3544 # Offset: 726
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3546:
    000002e0: 	movq	(%r15), %rax
    000002e3: 	movq	%rax, 0x10(%r13)
    000002e7: 	movq	%r13, (%r15)
    000002ea: 	testq	%r14, %r14
    000002ed: 	je	.Ltmp3544 # Offset: 749
.Ltmp3547:
    000002ef: 	movq	%r14, %r13
.Ltmp3543:
    000002f2: 	movsd	(%r13), %xmm0
    000002f8: 	pxor	%xmm5, %xmm5
    000002fc: 	movq	0x10(%r13), %r14
    00000300: 	movsd	%xmm0, 0x88(%rsp)
    00000309: 	ucomisd	%xmm5, %xmm0
    0000030d: 	jp	.Ltmp3545 # Offset: 781
    0000030f: 	je	.Ltmp3546 # Offset: 783
.Ltmp3545:
    00000311: 	movq	%r12, %rdx
    00000314: 	leaq	0x88(%rsp), %rdi
    0000031c: 	movl	$0x8, %esi
    00000321: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 801
    00000326: 	xorl	%edx, %edx
    00000328: 	divq	0x18(%rbp)
    0000032c: 	leaq	(%r15,%rdx,8), %rax
    00000330: 	movq	(%rax), %rdx
    00000333: 	movq	%rdx, 0x10(%r13)
    00000337: 	movq	%r13, (%rax)
    0000033a: 	testq	%r14, %r14
    0000033d: 	jne	.Ltmp3547 # Offset: 829
.Ltmp3544:
    0000033f: 	addq	$0x1, %rbx
    00000343: 	cmpq	%rbx, 0x18(%rsp)
    00000348: 	jne	.Ltmp3548 # Offset: 840
    0000034e: 	movq	0x20(%rbp), %rax
    00000352: 	movq	%r15, %r14
    00000355: 	movq	%rax, 0x10(%rsp)
.Ltmp3542:
    0000035a: 	movq	0x10(%rsp), %rax
    0000035f: 	testq	%rax, %rax
    00000362: 	je	.Ltmp3549 # Offset: 866
    00000364: 	movq	%rax, %rdi
    00000367: 	callq	_ZdaPv@PLT # Offset: 871
.Ltmp3549:
    0000036c: 	movq	%r14, 0x20(%rbp)
    00000370: 	jmp	.Ltmp3539 # Offset: 880
.Ltmp3530:
    00000375: 	movq	$0x3e8, 0x50(%rsp)
.Ltmp3531:
    0000037e: 	movq	$0x0, 0xa0(%rsp)
    0000038a: 	pxor	%xmm0, %xmm0
    0000038e: 	movaps	%xmm0, 0x90(%rsp)
    00000396: 	jmp	.Ltmp3550 # Offset: 918
    0000039b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3535:
    000003a0: 	leaq	0x88(%rsp), %rdi
    000003a8: 	movl	$0xc70f6907, %edx
    000003ad: 	movl	$0x8, %esi
    000003b2: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 946
    000003b7: 	jmp	.Ltmp3551 # Offset: 951
    000003bc: 	nopl	(%rax) # Size: 4
.Ltmp3536:
    000003c0: 	movl	$0x18, %edi
    000003c5: 	callq	_Znwm@PLT # Offset: 965
    000003ca: 	movq	0x8(%rsp), %rcx
    000003cf: 	addq	0x20(%rbp), %r12
    000003d3: 	movq	%rax, 0x28(%rsp)
    000003d8: 	movq	$0x0, 0x8(%rax)
    000003e0: 	movsd	(%rcx), %xmm0
    000003e4: 	movq	%rax, %rcx
    000003e7: 	movsd	%xmm0, (%rax)
    000003eb: 	movq	(%r12), %rax
    000003ef: 	movq	%rax, 0x10(%rcx)
    000003f3: 	movq	0x8(%rbp), %rax
    000003f7: 	movq	%rcx, (%r12)
    000003fb: 	movq	0x10(%rbp), %r12
    000003ff: 	addq	$0x1, %rax
    00000403: 	movq	%rax, 0x8(%rbp)
    00000407: 	cmpq	%r12, %rax
    0000040a: 	ja	.Ltmp3552 # Offset: 1034
.Ltmp3593:
    00000410: 	movq	0x28(%rsp), %rbx
    00000415: 	jmp	.Ltmp3553 # Offset: 1045
.Ltmp3541:
    0000041a: 	subss	DATAat0x537a0(%rip), %xmm0
    00000422: 	cvttss2si	%xmm0, %rax
    00000427: 	btcq	$0x3f, %rax
    0000042c: 	jmp	.Ltmp3554 # Offset: 1068
.Ltmp3533:
    00000431: 	movq	0x30(%rsp), %rax
    00000436: 	movq	0x90(%rsp), %r14
    0000043e: 	movq	%rbp, (%r14,%rax)
    00000442: 	addq	$0x8, %rax
    00000446: 	movq	%rax, 0x30(%rsp)
    0000044b: 	cmpq	%rax, 0x38(%rsp)
    00000450: 	jne	.Ltmp3555 # Offset: 1104
    00000456: 	callq	clock@PLT # Offset: 1110
    0000045b: 	movq	0x68(%rsp), %rcx
    00000460: 	movq	%rax, start_time(%rip)
    00000467: 	cmpq	%rcx, 0x48(%rsp)
    0000046c: 	je	.Ltmp3556 # Offset: 1132
    00000472: 	leaq	0x8(%r14), %rax
    00000476: 	movq	%rcx, %r13
    00000479: 	movq	%r14, 0x10(%rsp)
    0000047e: 	movq	%r14, %rbx
    00000481: 	movq	0x60(%rsp), %rcx
    00000486: 	movq	%rax, 0x8(%rsp)
    0000048b: 	movl	$0xc70f6907, %ebp
    00000490: 	leaq	(%rax,%rcx,8), %r12
.Ltmp3564:
    00000494: 	movq	(%rbx), %r15
    00000497: 	movq	0x48(%rsp), %r14
    0000049c: 	nopl	(%rax) # Size: 4
.Ltmp3563:
    000004a0: 	addq	$0x8, %r14
    000004a4: 	cmpq	$0x0, 0x18(%r15)
    000004a9: 	jne	.Ltmp3557 # Offset: 1193
    000004af: 	movq	0x20(%r15), %rcx
    000004b3: 	xorl	%edi, %edi
    000004b5: 	movq	(%rcx), %rsi
.Ltmp3579:
    000004b8: 	movq	%rsi, %rax
    000004bb: 	jmp	.Ltmp3558 # Offset: 1211
    000004bd: 	nopl	(%rax) # Size: 3
.Ltmp3560:
    000004c0: 	movq	0x10(%rax), %rdx
    000004c4: 	cmpq	%rdi, %rdx
    000004c7: 	je	.Ltmp3559 # Offset: 1223
    000004cd: 	movq	%rdx, %rax
.Ltmp3558:
    000004d0: 	testq	%rax, %rax
    000004d3: 	jne	.Ltmp3560 # Offset: 1235
    000004d5: 	testq	%rdi, %rdi
    000004d8: 	je	.Ltmp3561 # Offset: 1240
    000004de: 	movq	0x10(%rdi), %rdx
.Ltmp3582:
    000004e2: 	cmpq	%rdi, %rsi
    000004e5: 	je	.Ltmp3562 # Offset: 1253
.Ltmp3583:
    000004eb: 	movl	$0x18, %esi
    000004f0: 	callq	_ZdlPvm@PLT # Offset: 1264
    000004f5: 	subq	$0x1, 0x8(%r15)
    000004fa: 	cmpq	%r14, %r13
    000004fd: 	jne	.Ltmp3563 # Offset: 1277
    000004ff: 	addq	$0x8, %rbx
    00000503: 	cmpq	%r12, %rbx
    00000506: 	jne	.Ltmp3564 # Offset: 1286
.Ltmp3584:
    00000508: 	movq	0x10(%rsp), %r14
.Ltmp3609:
    0000050d: 	callq	clock@PLT # Offset: 1293
    00000512: 	pxor	%xmm0, %xmm0
    00000516: 	movq	0x60(%rsp), %rcx
    0000051b: 	movq	%r14, %r12
    0000051e: 	movq	%rax, end_time(%rip)
    00000525: 	subq	start_time(%rip), %rax
    0000052c: 	cvtsi2sd	%rax, %xmm0
    00000531: 	divsd	DATAat0x53788(%rip), %xmm0
    00000539: 	addsd	0x58(%rsp), %xmm0
    0000053f: 	movq	0x8(%rsp), %rax
    00000544: 	leaq	(%rax,%rcx,8), %r13
    00000548: 	movsd	%xmm0, 0x58(%rsp)
.Ltmp3571:
    0000054e: 	movq	(%r12), %r15
    00000552: 	testq	%r15, %r15
    00000555: 	je	.Ltmp3565 # Offset: 1365
    00000557: 	movq	0x18(%r15), %rdx
    0000055b: 	movq	0x20(%r15), %rdi
    0000055f: 	testq	%rdx, %rdx
    00000562: 	je	.Ltmp3566 # Offset: 1378
    00000564: 	xorl	%ebp, %ebp
    00000566: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3569:
    00000570: 	leaq	(%rdi,%rbp,8), %rax
    00000574: 	movq	(%rax), %rbx
    00000577: 	movq	$0x0, (%rax)
    0000057e: 	testq	%rbx, %rbx
    00000581: 	je	.Ltmp3567 # Offset: 1409
    00000583: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3568:
    00000588: 	movq	%rbx, %rdi
    0000058b: 	movq	0x10(%rbx), %rbx
    0000058f: 	movl	$0x18, %esi
    00000594: 	callq	_ZdlPvm@PLT # Offset: 1428
    00000599: 	testq	%rbx, %rbx
    0000059c: 	jne	.Ltmp3568 # Offset: 1436
    0000059e: 	movq	0x18(%r15), %rdx
    000005a2: 	movq	0x20(%r15), %rdi
.Ltmp3567:
    000005a6: 	addq	$0x1, %rbp
    000005aa: 	cmpq	%rdx, %rbp
    000005ad: 	jb	.Ltmp3569 # Offset: 1453
.Ltmp3566:
    000005af: 	movq	$0x0, 0x8(%r15)
    000005b7: 	testq	%rdi, %rdi
    000005ba: 	je	.Ltmp3570 # Offset: 1466
    000005bc: 	callq	_ZdaPv@PLT # Offset: 1468
.Ltmp3570:
    000005c1: 	movl	$0x30, %esi
    000005c6: 	movq	%r15, %rdi
    000005c9: 	callq	_ZdlPvm@PLT # Offset: 1481
.Ltmp3565:
    000005ce: 	movq	$0x0, (%r12)
    000005d6: 	addq	$0x8, %r12
    000005da: 	cmpq	%r13, %r12
    000005dd: 	jne	.Ltmp3571 # Offset: 1501
    000005e3: 	movl	0x50(%rsp), %ecx
    000005e7: 	movl	iterations(%rip), %eax
    000005ed: 	addl	%ecx, 0x70(%rsp)
    000005f1: 	movl	0x70(%rsp), %ecx
    000005f5: 	cmpl	%ecx, %eax
    000005f7: 	jg	.Ltmp3572 # Offset: 1527
.Ltmp3611:
    000005fd: 	movq	0x78(%rsp), %rdi
    00000602: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1538
    00000607: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000060e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000615: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000061c: 	je	.Ltmp3573 # Offset: 1564
.Ltmp3610:
    00000622: 	movq	-0x20(%rax), %rdi
    00000626: 	movsd	0x58(%rsp), %xmm0
    0000062c: 	callq	_Z13record_resultdPKc # Offset: 1580
    00000631: 	testq	%r14, %r14
    00000634: 	je	.Ltmp3574 # Offset: 1588
    0000063a: 	movq	0xa8(%rsp), %rax
    00000642: 	subq	%fs:0x28, %rax
    0000064b: 	jne	.Ltmp3575 # Offset: 1611
    00000651: 	movq	0xa0(%rsp), %rsi
    00000659: 	addq	$0xb8, %rsp
    00000660: 	movq	%r14, %rdi
    00000663: 	popq	%rbx
    00000664: 	popq	%rbp
    00000665: 	subq	%r14, %rsi
    00000668: 	popq	%r12
    0000066a: 	popq	%r13
    0000066c: 	popq	%r14
    0000066e: 	popq	%r15
    00000670: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1648
    00000675: 	nopl	(%rax) # Size: 3
.Ltmp3557:
    00000678: 	movsd	-0x8(%r14), %xmm0
    0000067e: 	pxor	%xmm4, %xmm4
    00000682: 	movsd	%xmm0, 0x88(%rsp)
    0000068b: 	ucomisd	%xmm4, %xmm0
    0000068f: 	jp	.Ltmp3576 # Offset: 1679
    00000695: 	movl	$0x0, %ecx
    0000069a: 	jne	.Ltmp3576 # Offset: 1690
    000006a0: 	addq	0x20(%r15), %rcx
    000006a4: 	movq	(%rcx), %rsi
    000006a7: 	testq	%rsi, %rsi
    000006aa: 	je	.Ltmp3577 # Offset: 1706
.Ltmp3587:
    000006b0: 	movsd	-0x8(%r14), %xmm0
    000006b6: 	movq	%rsi, %rdi
    000006b9: 	jmp	.Ltmp3578 # Offset: 1721
    000006bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3580:
    000006c0: 	movq	0x10(%rdi), %rdi
    000006c4: 	testq	%rdi, %rdi
    000006c7: 	je	.Ltmp3579 # Offset: 1735
.Ltmp3578:
    000006cd: 	ucomisd	(%rdi), %xmm0
    000006d1: 	jp	.Ltmp3580 # Offset: 1745
    000006d3: 	jne	.Ltmp3580 # Offset: 1747
    000006d5: 	jmp	.Ltmp3579 # Offset: 1749
    000006da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3559:
    000006e0: 	testq	%rdi, %rdi
    000006e3: 	je	.Ltmp3581 # Offset: 1763
    000006e9: 	movq	0x10(%rdi), %rdx
    000006ed: 	cmpq	%rdi, %rax
    000006f0: 	je	.Ltmp3582 # Offset: 1776
.Ltmp3588:
    000006f6: 	movq	%rdx, 0x10(%rax)
    000006fa: 	cmpq	%rdi, (%rcx)
    000006fd: 	je	.Ltmp3562 # Offset: 1789
.Ltmp3586:
    000006ff: 	testq	%rdi, %rdi
    00000702: 	jne	.Ltmp3583 # Offset: 1794
.Ltmp3585:
    00000708: 	subq	$0x1, 0x8(%r15)
    0000070d: 	cmpq	%r14, %r13
    00000710: 	jne	.Ltmp3563 # Offset: 1808
    00000716: 	addq	$0x8, %rbx
    0000071a: 	cmpq	%r12, %rbx
    0000071d: 	jne	.Ltmp3564 # Offset: 1821
    00000723: 	jmp	.Ltmp3584 # Offset: 1827
.Ltmp3561:
    00000728: 	testq	%rsi, %rsi
    0000072b: 	jne	.Ltmp3585 # Offset: 1835
    0000072d: 	xorl	%edx, %edx
    0000072f: 	nop # Size: 1
.Ltmp3562:
    00000730: 	movq	%rdx, (%rcx)
    00000733: 	jmp	.Ltmp3586 # Offset: 1843
.Ltmp3576:
    00000735: 	movq	%rbp, %rdx
    00000738: 	movl	$0x8, %esi
    0000073d: 	leaq	0x88(%rsp), %rdi
    00000745: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1861
    0000074a: 	xorl	%edx, %edx
    0000074c: 	divq	0x18(%r15)
    00000750: 	leaq	(,%rdx,8), %rcx
    00000758: 	addq	0x20(%r15), %rcx
    0000075c: 	movq	(%rcx), %rsi
    0000075f: 	testq	%rsi, %rsi
    00000762: 	jne	.Ltmp3587 # Offset: 1890
.Ltmp3577:
    00000768: 	xorl	%edi, %edi
    0000076a: 	jmp	.Ltmp3579 # Offset: 1898
.Ltmp3581:
    0000076f: 	xorl	%edx, %edx
    00000771: 	jmp	.Ltmp3588 # Offset: 1905
.Ltmp3552:
    00000776: 	movq	0x18(%rbp), %rax
    0000077a: 	movss	0x28(%rbp), %xmm2
    0000077f: 	movq	%rax, 0x10(%rsp)
    00000784: 	testq	%r12, %r12
    00000787: 	je	.Ltmp3589 # Offset: 1927
    0000078d: 	js	.Ltmp3590 # Offset: 1933
    00000793: 	pxor	%xmm1, %xmm1
    00000797: 	cvtsi2ss	%r12, %xmm1
.Ltmp3608:
    0000079c: 	divss	%xmm2, %xmm1
    000007a0: 	movss	DATAat0x537b0(%rip), %xmm3
    000007a8: 	movss	DATAat0x5379c(%rip), %xmm4
    000007b0: 	movaps	%xmm1, %xmm2
    000007b3: 	andps	%xmm3, %xmm2
    000007b6: 	ucomiss	%xmm2, %xmm4
    000007b9: 	jbe	.Ltmp3591 # Offset: 1977
    000007bb: 	cvttss2si	%xmm1, %eax
    000007bf: 	pxor	%xmm2, %xmm2
    000007c3: 	movaps	%xmm1, %xmm4
    000007c6: 	movss	DATAat0x53798(%rip), %xmm7
    000007ce: 	andnps	%xmm1, %xmm3
    000007d1: 	cvtsi2ss	%eax, %xmm2
    000007d5: 	cmpnless	%xmm2, %xmm4
    000007da: 	andps	%xmm7, %xmm4
    000007dd: 	addss	%xmm4, %xmm2
    000007e1: 	orps	%xmm3, %xmm2
    000007e4: 	movaps	%xmm2, %xmm1
.Ltmp3591:
    000007e7: 	comiss	DATAat0x537a0(%rip), %xmm1
    000007ee: 	jae	.Ltmp3592 # Offset: 2030
    000007f4: 	cvttss2si	%xmm1, %rax
.Ltmp3606:
    000007f9: 	movl	$0x8, %edx
    000007fe: 	movq	%r12, %xmm4
    00000803: 	cmpq	%rdx, %rax
    00000806: 	cmovbq	%rdx, %rax
    0000080a: 	movq	%rax, %rdx
    0000080d: 	shrq	%rdx
    00000810: 	addq	%rax, %rdx
    00000813: 	movq	%rdx, %xmm1
    00000818: 	punpcklqdq	%xmm4, %xmm1
    0000081c: 	movups	%xmm1, 0x10(%rbp)
    00000820: 	cmpq	0x10(%rsp), %r12
    00000825: 	je	.Ltmp3593 # Offset: 2085
    0000082b: 	movq	%r12, %rax
    0000082e: 	shrq	$0x3c, %rax
    00000832: 	jne	.Ltmp3594 # Offset: 2098
    00000838: 	leaq	(,%r12,8), %rdi
.Ltmp3605:
    00000840: 	callq	_Znam@PLT # Offset: 2112
    00000845: 	xorl	%esi, %esi
    00000847: 	leaq	(,%r12,8), %rdx
    0000084f: 	movq	%rax, %rdi
    00000852: 	movq	%rax, %r15
    00000855: 	callq	memset@PLT # Offset: 2133
    0000085a: 	cmpq	$0x0, 0x10(%rsp)
    00000860: 	movq	0x20(%rbp), %r13
    00000864: 	je	.Ltmp3595 # Offset: 2148
    0000086a: 	movq	%r13, 0x18(%rsp)
    0000086f: 	xorl	%r12d, %r12d
    00000872: 	movl	$0xc70f6907, %r14d
    00000878: 	movq	%r15, %r13
    0000087b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3601:
    00000880: 	movq	0x18(%rsp), %rax
    00000885: 	movq	(%rax,%r12,8), %rbx
    00000889: 	testq	%rbx, %rbx
    0000088c: 	jne	.Ltmp3596 # Offset: 2188
    0000088e: 	jmp	.Ltmp3597 # Offset: 2190
.Ltmp3599:
    00000890: 	movq	(%r13), %rax
    00000894: 	movq	%rax, 0x10(%rbx)
    00000898: 	movq	%rbx, (%r13)
    0000089c: 	testq	%r15, %r15
    0000089f: 	je	.Ltmp3597 # Offset: 2207
.Ltmp3600:
    000008a1: 	movq	%r15, %rbx
.Ltmp3596:
    000008a4: 	movsd	(%rbx), %xmm0
    000008a8: 	pxor	%xmm6, %xmm6
    000008ac: 	movq	0x10(%rbx), %r15
    000008b0: 	movsd	%xmm0, 0x88(%rsp)
    000008b9: 	ucomisd	%xmm6, %xmm0
    000008bd: 	jp	.Ltmp3598 # Offset: 2237
    000008bf: 	je	.Ltmp3599 # Offset: 2239
.Ltmp3598:
    000008c1: 	movq	%r14, %rdx
    000008c4: 	leaq	0x88(%rsp), %rdi
    000008cc: 	movl	$0x8, %esi
    000008d1: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 2257
    000008d6: 	xorl	%edx, %edx
    000008d8: 	divq	0x18(%rbp)
    000008dc: 	leaq	(%r13,%rdx,8), %rax
    000008e1: 	movq	(%rax), %rdx
    000008e4: 	movq	%rdx, 0x10(%rbx)
    000008e8: 	movq	%rbx, (%rax)
    000008eb: 	testq	%r15, %r15
    000008ee: 	jne	.Ltmp3600 # Offset: 2286
.Ltmp3597:
    000008f0: 	addq	$0x1, %r12
    000008f4: 	cmpq	%r12, 0x10(%rsp)
    000008f9: 	jne	.Ltmp3601 # Offset: 2297
    000008fb: 	movq	%r13, %r15
    000008fe: 	movq	0x20(%rbp), %r13
.Ltmp3595:
    00000902: 	testq	%r13, %r13
    00000905: 	je	.Ltmp3602 # Offset: 2309
    00000907: 	movq	%r13, %rdi
    0000090a: 	callq	_ZdaPv@PLT # Offset: 2314
.Ltmp3602:
    0000090f: 	movq	0x8(%rsp), %rax
    00000914: 	movq	%r15, 0x20(%rbp)
    00000918: 	movsd	(%rax), %xmm0
    0000091c: 	jmp	.Ltmp3593 # Offset: 2332
.Ltmp3589:
    00000921: 	movss	DATAat0x537a4(%rip), %xmm1
    00000929: 	movss	DATAat0x5379c(%rip), %xmm3
    00000931: 	divss	%xmm2, %xmm1
    00000935: 	movss	DATAat0x537b0(%rip), %xmm2
    0000093d: 	andps	%xmm1, %xmm2
    00000940: 	ucomiss	%xmm2, %xmm3
    00000943: 	jbe	.Ltmp3603 # Offset: 2371
    00000945: 	cvttss2si	%xmm1, %eax
    00000949: 	pxor	%xmm2, %xmm2
    0000094d: 	movaps	%xmm1, %xmm3
    00000950: 	movss	DATAat0x53798(%rip), %xmm4
    00000958: 	cvtsi2ss	%eax, %xmm2
    0000095c: 	cmpnless	%xmm2, %xmm3
    00000961: 	andps	%xmm4, %xmm3
    00000964: 	addss	%xmm3, %xmm2
    00000968: 	movss	DATAat0x537b0(%rip), %xmm3
    00000970: 	andnps	%xmm1, %xmm3
    00000973: 	orps	%xmm3, %xmm2
    00000976: 	movaps	%xmm2, %xmm1
.Ltmp3603:
    00000979: 	comiss	DATAat0x537a0(%rip), %xmm1
    00000980: 	jae	.Ltmp3604 # Offset: 2432
    00000982: 	cvttss2si	%xmm1, %rax
.Ltmp3607:
    00000987: 	movl	$0x8, %edx
    0000098c: 	movq	$0x8, 0x18(%rbp)
    00000994: 	cmpq	%rdx, %rax
    00000997: 	cmovbq	%rdx, %rax
    0000099b: 	movq	%rax, %rdx
    0000099e: 	shrq	%rdx
    000009a1: 	addq	%rdx, %rax
    000009a4: 	cmpq	$0x8, 0x10(%rsp)
    000009aa: 	movq	%rax, 0x10(%rbp)
    000009ae: 	je	.Ltmp3593 # Offset: 2478
    000009b4: 	movl	$0x40, %edi
    000009b9: 	movl	$0x8, %r12d
    000009bf: 	jmp	.Ltmp3605 # Offset: 2495
.Ltmp3592:
    000009c4: 	subss	DATAat0x537a0(%rip), %xmm1
    000009cc: 	cvttss2si	%xmm1, %rax
    000009d1: 	btcq	$0x3f, %rax
    000009d6: 	jmp	.Ltmp3606 # Offset: 2518
.Ltmp3604:
    000009db: 	subss	DATAat0x537a0(%rip), %xmm1
    000009e3: 	cvttss2si	%xmm1, %rax
    000009e8: 	btcq	$0x3f, %rax
    000009ed: 	jmp	.Ltmp3607 # Offset: 2541
.Ltmp3590:
    000009ef: 	movq	%r12, %rax
    000009f2: 	movq	%r12, %rdx
    000009f5: 	pxor	%xmm1, %xmm1
    000009f9: 	shrq	%rax
    000009fc: 	andl	$0x1, %edx
    000009ff: 	orq	%rdx, %rax
    00000a02: 	cvtsi2ss	%rax, %xmm1
    00000a07: 	addss	%xmm1, %xmm1
    00000a0b: 	jmp	.Ltmp3608 # Offset: 2571
.Ltmp3556:
    00000a10: 	leaq	0x8(%r14), %rax
    00000a14: 	movq	%rax, 0x8(%rsp)
    00000a19: 	jmp	.Ltmp3609 # Offset: 2585
.Ltmp3574:
    00000a1e: 	movq	0xa8(%rsp), %rax
    00000a26: 	subq	%fs:0x28, %rax
    00000a2f: 	jne	.Ltmp3575 # Offset: 2607
    00000a31: 	addq	$0xb8, %rsp
    00000a38: 	popq	%rbx
    00000a39: 	popq	%rbp
    00000a3a: 	popq	%r12
    00000a3c: 	popq	%r13
    00000a3e: 	popq	%r14
    00000a40: 	popq	%r15
    00000a42: 	retq # Offset: 2626
.Ltmp3573:
    00000a43: 	movq	-0x8(%rdx), %rax
    00000a47: 	addq	$0x200, %rax
    00000a4d: 	jmp	.Ltmp3610 # Offset: 2637
.Ltmp3532:
    00000a52: 	pxor	%xmm4, %xmm4
    00000a56: 	movq	0x90(%rsp), %r14
    00000a5e: 	movsd	%xmm4, 0x58(%rsp)
    00000a64: 	jmp	.Ltmp3611 # Offset: 2660
.Ltmp3575:
    00000a69: 	callq	__stack_chk_fail@PLT # Offset: 2665
.Ltmp3594:
    00000a6e: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 2670
    00000a73: 	endbr64
    00000a77: 	movq	%rax, %rbp
    00000a7a: 	movq	0x90(%rsp), %rdi
    00000a82: 	movq	0xa0(%rsp), %rsi
    00000a8a: 	subq	%rdi, %rsi
    00000a8d: 	testq	%rdi, %rdi
    00000a90: 	je	.Ltmp3612 # Offset: 2704
    00000a92: 	callq	_ZdlPvm@PLT # Offset: 2706
.Ltmp3612:
    00000a97: 	movq	%rbp, %rdi
    00000a9a: 	callq	_Unwind_Resume@PLT # Offset: 2714
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_erase_mapId7HashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt6vectorIP13PooledHashMapIddESaIS2_EE17_M_default_appendEm" after disassembly {
  Number      : 224
  State       : disassembled
  Address     : 0x24e70
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x24e70
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIP13PooledHashMapIddESaIS2_EE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0223:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp3613 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp3614 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp3615 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp3616 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp3617 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp3624:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp3618 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp3618:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp3619 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp3620 # Offset: 200
.Ltmp3622:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp3614:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp3621 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp3621:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3613:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp3619:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp3623:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp3622 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3620:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp3623 # Offset: 392
.Ltmp3617:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp3625:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp3624 # Offset: 445
.Ltmp3616:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp3625 # Offset: 460
.Ltmp3615:
    000001ce: 	leaq	DATAat0x5230f(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIP13PooledHashMapIddESaIS2_EE17_M_default_appendEm"

Binary Function "_ZNSt11_Deque_baseImSaImEED1Ev(*2)" after disassembly {
  All names   : _ZNSt11_Deque_baseImSaImEED1Ev
                _ZNSt11_Deque_baseImSaImEED2Ev
  Number      : 225
  State       : disassembled
  Address     : 0x25050
  Size        : 0x65
  MaxSize     : 0x70
  Offset      : 0x25050
  Section     : .text
  Orc Section : .local.text._ZNSt11_Deque_baseImSaImEED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0224:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	(%rdi), %rdi
    0000000e: 	testq	%rdi, %rdi
    00000011: 	je	.Ltmp3626 # Offset: 17
    00000013: 	movq	0x48(%r12), %rax
    00000018: 	movq	0x28(%r12), %rbx
    0000001d: 	leaq	0x8(%rax), %rbp
    00000021: 	cmpq	%rbx, %rbp
    00000024: 	jbe	.Ltmp3627 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3628:
    00000030: 	movq	(%rbx), %rdi
    00000033: 	movl	$0x200, %esi
    00000038: 	addq	$0x8, %rbx
    0000003c: 	callq	_ZdlPvm@PLT # Offset: 60
    00000041: 	cmpq	%rbx, %rbp
    00000044: 	ja	.Ltmp3628 # Offset: 68
    00000046: 	movq	(%r12), %rdi
.Ltmp3627:
    0000004a: 	movq	0x8(%r12), %rsi
    0000004f: 	popq	%rbx
    00000050: 	popq	%rbp
    00000051: 	popq	%r12
    00000053: 	shlq	$0x3, %rsi
    00000057: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 87
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp3626:
    00000060: 	popq	%rbx
    00000061: 	popq	%rbp
    00000062: 	popq	%r12
    00000064: 	retq # Offset: 100
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt11_Deque_baseImSaImEED1Ev(*2)"

Binary Function "_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED2Ev(*2)" after disassembly {
  All names   : _ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED2Ev
                _ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED1Ev
  Number      : 226
  State       : disassembled
  Address     : 0x250c0
  Size        : 0x77
  MaxSize     : 0x80
  Offset      : 0x250c0
  Section     : .text
  Orc Section : .local.text._ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED2Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0225:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pushq	%rbp
    00000007: 	movq	%rdi, %rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	0xb8(%rdi), %rdi
    00000012: 	testq	%rdi, %rdi
    00000015: 	je	.Ltmp3629 # Offset: 21
    00000017: 	callq	_ZdaPv@PLT # Offset: 23
.Ltmp3629:
    0000001c: 	movq	0x50(%rbp), %rdi
    00000020: 	testq	%rdi, %rdi
    00000023: 	je	.Ltmp3630 # Offset: 35
    00000025: 	movq	0x98(%rbp), %rax
    0000002c: 	movq	0x78(%rbp), %rbx
    00000030: 	leaq	0x8(%rax), %r12
    00000034: 	cmpq	%rbx, %r12
    00000037: 	jbe	.Ltmp3631 # Offset: 55
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp3632:
    00000040: 	movq	(%rbx), %rdi
    00000043: 	movl	$0x200, %esi
    00000048: 	addq	$0x8, %rbx
    0000004c: 	callq	_ZdlPvm@PLT # Offset: 76
    00000051: 	cmpq	%rbx, %r12
    00000054: 	ja	.Ltmp3632 # Offset: 84
    00000056: 	movq	0x50(%rbp), %rdi
.Ltmp3631:
    0000005a: 	movq	0x58(%rbp), %rax
    0000005e: 	leaq	(,%rax,8), %rsi
    00000066: 	callq	_ZdlPvm@PLT # Offset: 102
.Ltmp3630:
    0000006b: 	popq	%rbx
    0000006c: 	movq	%rbp, %rdi
    0000006f: 	popq	%rbp
    00000070: 	popq	%r12
    00000072: 	jmp	_ZNSt11_Deque_baseImSaImEED1Ev # TAILCALL  # Offset: 114
DWARF CFI Instructions:
    <empty>
End of Function "_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED2Ev(*2)"

Binary Function "_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev
                _ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED2Ev
  Number      : 227
  State       : disassembled
  Address     : 0x25140
  Size        : 0x65
  MaxSize     : 0x70
  Offset      : 0x25140
  Section     : .text
  Orc Section : .local.text._ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0226:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	(%rdi), %rdi
    0000000e: 	testq	%rdi, %rdi
    00000011: 	je	.Ltmp3633 # Offset: 17
    00000013: 	movq	0x48(%r12), %rax
    00000018: 	movq	0x28(%r12), %rbx
    0000001d: 	leaq	0x8(%rax), %rbp
    00000021: 	cmpq	%rbx, %rbp
    00000024: 	jbe	.Ltmp3634 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3635:
    00000030: 	movq	(%rbx), %rdi
    00000033: 	movl	$0x1f8, %esi
    00000038: 	addq	$0x8, %rbx
    0000003c: 	callq	_ZdlPvm@PLT # Offset: 60
    00000041: 	cmpq	%rbx, %rbp
    00000044: 	ja	.Ltmp3635 # Offset: 68
    00000046: 	movq	(%r12), %rdi
.Ltmp3634:
    0000004a: 	movq	0x8(%r12), %rsi
    0000004f: 	popq	%rbx
    00000050: 	popq	%rbp
    00000051: 	popq	%r12
    00000053: 	shlq	$0x3, %rsi
    00000057: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 87
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp3633:
    00000060: 	popq	%rbx
    00000061: 	popq	%rbp
    00000062: 	popq	%r12
    00000064: 	retq # Offset: 100
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev(*2)"

Binary Function "_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev
                _ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED2Ev
  Number      : 228
  State       : disassembled
  Address     : 0x251b0
  Size        : 0x65
  MaxSize     : 0x70
  Offset      : 0x251b0
  Section     : .text
  Orc Section : .local.text._ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0227:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	(%rdi), %rdi
    0000000e: 	testq	%rdi, %rdi
    00000011: 	je	.Ltmp3636 # Offset: 17
    00000013: 	movq	0x48(%r12), %rax
    00000018: 	movq	0x28(%r12), %rbx
    0000001d: 	leaq	0x8(%rax), %rbp
    00000021: 	cmpq	%rbx, %rbp
    00000024: 	jbe	.Ltmp3637 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3638:
    00000030: 	movq	(%rbx), %rdi
    00000033: 	movl	$0x200, %esi
    00000038: 	addq	$0x8, %rbx
    0000003c: 	callq	_ZdlPvm@PLT # Offset: 60
    00000041: 	cmpq	%rbx, %rbp
    00000044: 	ja	.Ltmp3638 # Offset: 68
    00000046: 	movq	(%r12), %rdi
.Ltmp3637:
    0000004a: 	movq	0x8(%r12), %rsi
    0000004f: 	popq	%rbx
    00000050: 	popq	%rbp
    00000051: 	popq	%r12
    00000053: 	shlq	$0x3, %rsi
    00000057: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 87
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp3636:
    00000060: 	popq	%rbx
    00000061: 	popq	%rbp
    00000062: 	popq	%r12
    00000064: 	retq # Offset: 100
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev(*2)"

Binary Function "_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEmb" after disassembly {
  Number      : 229
  State       : disassembled
  Address     : 0x25220
  Size        : 0x1a5
  MaxSize     : 0x1b0
  Offset      : 0x25220
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEE17_M_reallocate_mapEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0228:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	0x48(%rdi), %rax
    0000001f: 	movq	0x28(%rdi), %rsi
    00000023: 	movq	0x8(%rdi), %rbx
    00000027: 	movq	%rax, %rbp
    0000002a: 	subq	%rsi, %rbp
    0000002d: 	movq	%rbp, %rdx
    00000030: 	sarq	$0x3, %rdx
    00000034: 	leaq	0x1(%r14,%rdx), %rdx
    00000039: 	leaq	(%rdx,%rdx), %rcx
    0000003d: 	cmpq	%rcx, %rbx
    00000040: 	jbe	.Ltmp3639 # Offset: 64
    00000042: 	subq	%rdx, %rbx
    00000045: 	shrq	%rbx
    00000048: 	shlq	$0x3, %rbx
    0000004c: 	testb	%r15b, %r15b
    0000004f: 	leaq	(%rbx,%r14,8), %rdx
    00000053: 	cmovneq	%rdx, %rbx
    00000057: 	addq	$0x8, %rax
    0000005b: 	addq	(%rdi), %rbx
    0000005e: 	movq	%rax, %rdx
    00000061: 	subq	%rsi, %rdx
    00000064: 	cmpq	%rbx, %rsi
    00000067: 	jbe	.Ltmp3640 # Offset: 103
    0000006d: 	cmpq	%rax, %rsi
    00000070: 	je	.Ltmp3641 # Offset: 112
    00000076: 	movq	%rbx, %rdi
    00000079: 	callq	memmove@PLT # Offset: 121
    0000007e: 	jmp	.Ltmp3641 # Offset: 126
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3639:
    00000088: 	cmpq	%r14, %rbx
    0000008b: 	movq	%r14, %rax
    0000008e: 	cmovaeq	%rbx, %rax
    00000092: 	leaq	0x2(%rbx,%rax), %r13
    00000097: 	movq	%r13, %rax
    0000009a: 	shrq	$0x3c, %rax
    0000009e: 	jne	.Ltmp3642 # Offset: 158
    000000a4: 	leaq	(,%r13,8), %rdi
    000000ac: 	movq	%rdx, 0x8(%rsp)
    000000b1: 	movq	%r13, %rbx
    000000b4: 	callq	_Znwm@PLT # Offset: 180
    000000b9: 	movq	0x8(%rsp), %rdx
    000000be: 	movq	0x28(%r12), %rsi
    000000c3: 	movq	%rax, %rcx
    000000c6: 	movq	%rax, (%rsp)
    000000ca: 	subq	%rdx, %rbx
    000000cd: 	shrq	%rbx
    000000d0: 	shlq	$0x3, %rbx
    000000d4: 	testb	%r15b, %r15b
    000000d7: 	leaq	(%rbx,%r14,8), %rax
    000000db: 	cmovneq	%rax, %rbx
    000000df: 	movq	0x48(%r12), %rax
    000000e4: 	leaq	0x8(%rax), %rdx
    000000e8: 	addq	%rcx, %rbx
    000000eb: 	cmpq	%rsi, %rdx
    000000ee: 	je	.Ltmp3643 # Offset: 238
    000000f0: 	subq	%rsi, %rdx
    000000f3: 	movq	%rbx, %rdi
    000000f6: 	callq	memmove@PLT # Offset: 246
.Ltmp3643:
    000000fb: 	movq	0x8(%r12), %rax
    00000100: 	movq	(%r12), %rdi
    00000104: 	leaq	(,%rax,8), %rsi
    0000010c: 	callq	_ZdlPvm@PLT # Offset: 268
    00000111: 	movq	(%rsp), %rax
    00000115: 	movq	%r13, 0x8(%r12)
    0000011a: 	movq	%rax, (%r12)
.Ltmp3641:
    0000011e: 	movq	(%rbx), %rax
    00000121: 	movq	(%rbx), %xmm0
    00000125: 	movq	%rbx, 0x28(%r12)
    0000012a: 	addq	%rbp, %rbx
    0000012d: 	movq	%rbx, 0x48(%r12)
    00000132: 	addq	$0x200, %rax
    00000138: 	movq	%rax, %xmm1
    0000013d: 	punpcklqdq	%xmm1, %xmm0
    00000141: 	movups	%xmm0, 0x18(%r12)
    00000147: 	movq	(%rbx), %rax
    0000014a: 	leaq	0x200(%rax), %rdx
    00000151: 	movq	%rax, %xmm0
    00000156: 	movq	%rdx, %xmm2
    0000015b: 	punpcklqdq	%xmm2, %xmm0
    0000015f: 	movups	%xmm0, 0x38(%r12)
    00000165: 	addq	$0x18, %rsp
    00000169: 	popq	%rbx
    0000016a: 	popq	%rbp
    0000016b: 	popq	%r12
    0000016d: 	popq	%r13
    0000016f: 	popq	%r14
    00000171: 	popq	%r15
    00000173: 	retq # Offset: 371
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp3640:
    00000178: 	cmpq	%rax, %rsi
    0000017b: 	je	.Ltmp3641 # Offset: 379
    0000017d: 	leaq	0x8(%rbp), %rdi
    00000181: 	subq	%rdx, %rdi
    00000184: 	addq	%rbx, %rdi
    00000187: 	callq	memmove@PLT # Offset: 391
    0000018c: 	jmp	.Ltmp3641 # Offset: 396
    0000018e: 	nop # Size: 2
.Ltmp3642:
    00000190: 	shrq	$0x3d, %r13
    00000194: 	je	.Ltmp3644 # Offset: 404
    00000196: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 406
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3644:
    000001a0: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 416
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEmb"

Binary Function "_ZNSt5dequeIdSaIdEE17_M_push_front_auxIJRKdEEEvDpOT_" after disassembly {
  Number      : 230
  State       : disassembled
  Address     : 0x253d0
  Size        : 0xe9
  MaxSize     : 0xf0
  Offset      : 0x253d0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEE17_M_push_front_auxIJRKdEEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0229:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pushq	%rbp
    00000007: 	pushq	%rbx
    00000008: 	movq	0x48(%rdi), %rdx
    0000000c: 	movq	0x28(%rdi), %r12
    00000010: 	movq	%rdx, %rax
    00000013: 	subq	%r12, %rax
    00000016: 	sarq	$0x3, %rax
    0000001a: 	cmpq	$0x1, %rdx
    0000001e: 	movq	0x30(%rdi), %rdx
    00000022: 	adcq	$-0x1, %rax
    00000026: 	subq	0x38(%rdi), %rdx
    0000002a: 	sarq	$0x3, %rdx
    0000002e: 	shlq	$0x6, %rax
    00000032: 	addq	%rdx, %rax
    00000035: 	movq	0x20(%rdi), %rdx
    00000039: 	subq	0x10(%rdi), %rdx
    0000003d: 	sarq	$0x3, %rdx
    00000041: 	addq	%rdx, %rax
    00000044: 	movabsq	$0xfffffffffffffff, %rdx
    0000004e: 	cmpq	%rdx, %rax
    00000051: 	je	.Ltmp3645 # Offset: 81
    00000057: 	movq	%rdi, %rbx
    0000005a: 	movq	%rsi, %rbp
    0000005d: 	cmpq	(%rdi), %r12
    00000060: 	je	.Ltmp3646 # Offset: 96
.Ltmp3647:
    00000062: 	movl	$0x200, %edi
    00000067: 	callq	_Znwm@PLT # Offset: 103
    0000006c: 	movq	0x28(%rbx), %rdx
    00000070: 	movq	%rax, -0x8(%r12)
    00000075: 	movq	-0x8(%rdx), %rax
    00000079: 	subq	$0x8, %rdx
    0000007d: 	movq	%rdx, %xmm2
    00000082: 	leaq	0x1f8(%rax), %rcx
    00000089: 	movq	%rax, %xmm1
    0000008e: 	movq	%rcx, %xmm0
    00000093: 	leaq	0x200(%rax), %rcx
    0000009a: 	punpcklqdq	%xmm1, %xmm0
    0000009e: 	movups	%xmm0, 0x10(%rbx)
    000000a2: 	movq	%rcx, %xmm0
    000000a7: 	punpcklqdq	%xmm2, %xmm0
    000000ab: 	movups	%xmm0, 0x20(%rbx)
    000000af: 	movsd	(%rbp), %xmm0
    000000b4: 	movsd	%xmm0, 0x1f8(%rax)
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	popq	%r12
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp3646:
    000000c8: 	movl	$0x1, %edx
    000000cd: 	movl	$0x1, %esi
    000000d2: 	callq	_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEmb # Offset: 210
    000000d7: 	movq	0x28(%rbx), %r12
    000000db: 	jmp	.Ltmp3647 # Offset: 219
.Ltmp3645:
    000000dd: 	leaq	DATAat0x52330(%rip), %rdi
    000000e4: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 228
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEE17_M_push_front_auxIJRKdEEEvDpOT_"

Binary Function "_Z14test_pushfrontIdSt5dequeIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 231
  State       : disassembled
  Address     : 0x254c0
  Size        : 0x455
  MaxSize     : 0x460
  Offset      : 0x254c0
  Section     : .text
  Orc Section : .local.text._Z14test_pushfrontIdSt5dequeIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0230:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	xorl	%ebx, %ebx
    00000016: 	subq	$0x68, %rsp
    0000001a: 	movq	%rdx, 0x38(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x58(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jg	.Ltmp3648 # Offset: 67
    00000045: 	jmp	.Ltmp3649 # Offset: 69
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3650:
    00000050: 	movsd	(%r15), %xmm0
    00000055: 	subq	$0x8, %rax
    00000059: 	movsd	%xmm0, (%rax)
    0000005d: 	movq	%rax, 0x10(%rbp)
.Ltmp3651:
    00000061: 	movq	%rbp, %rdi
    00000064: 	addl	$0x1, %ebx
    00000067: 	callq	_ZNSt11_Deque_baseIdSaIdEED2Ev # Offset: 103
    0000006c: 	movl	$0x50, %esi
    00000071: 	movq	%rbp, %rdi
    00000074: 	callq	_ZdlPvm@PLT # Offset: 116
    00000079: 	cmpl	%ebx, iterations(%rip)
    0000007f: 	jle	.Ltmp3649 # Offset: 127
.Ltmp3648:
    00000081: 	movl	$0x50, %edi
    00000086: 	callq	_Znwm@PLT # Offset: 134
    0000008b: 	pxor	%xmm2, %xmm2
    0000008f: 	movq	$0x0, (%rax)
    00000096: 	movq	%rax, %rdi
    00000099: 	movq	%rax, %rbp
    0000009c: 	movq	$0x0, 0x8(%rax)
    000000a4: 	movups	%xmm2, 0x10(%rax)
    000000a8: 	movups	%xmm2, 0x20(%rax)
    000000ac: 	movups	%xmm2, 0x30(%rax)
    000000b0: 	movups	%xmm2, 0x40(%rax)
    000000b4: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 180
    000000b9: 	movq	0x10(%rbp), %rax
    000000bd: 	cmpq	%rax, 0x18(%rbp)
    000000c1: 	jne	.Ltmp3650 # Offset: 193
    000000c3: 	movq	%r15, %rsi
    000000c6: 	movq	%rbp, %rdi
    000000c9: 	callq	_ZNSt5dequeIdSaIdEE17_M_push_front_auxIJRKdEEEvDpOT_ # Offset: 201
    000000ce: 	jmp	.Ltmp3651 # Offset: 206
.Ltmp3649:
    000000d0: 	callq	clock@PLT # Offset: 208
    000000d5: 	pxor	%xmm0, %xmm0
    000000d9: 	movq	%r12, %rcx
    000000dc: 	xorl	%edx, %edx
    000000de: 	movq	%rax, end_time(%rip)
    000000e5: 	subq	start_time(%rip), %rax
    000000ec: 	subq	%r15, %rcx
    000000ef: 	cvtsi2sd	%rax, %xmm0
    000000f4: 	divsd	DATAat0x53788(%rip), %xmm0
    000000fc: 	movabsq	$0x500000000, %rax
    00000106: 	movsd	%xmm0, 0x30(%rsp)
    0000010c: 	divq	%rcx
    0000010f: 	movq	%rax, 0x8(%rsp)
    00000114: 	cmpq	$0x3e8, %rax
    0000011a: 	ja	.Ltmp3652 # Offset: 282
    00000120: 	cmpq	$0x3, 0x8(%rsp)
    00000126: 	ja	.Ltmp3653 # Offset: 294
    0000012c: 	movq	$0x0, 0x50(%rsp)
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	movq	$0x4, 0x8(%rsp)
    00000142: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp3668:
    00000147: 	movq	0x8(%rsp), %rbx
    0000014c: 	leaq	0x40(%rsp), %rdi
    00000151: 	movq	%rbx, %rsi
    00000154: 	callq	_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 340
    00000159: 	movq	0x40(%rsp), %rdx
    0000015e: 	movl	iterations(%rip), %eax
    00000164: 	movq	%rdx, 0x18(%rsp)
    00000169: 	testl	%eax, %eax
    0000016b: 	jle	.Ltmp3654 # Offset: 363
    00000171: 	addq	$0x8, %rdx
    00000175: 	movl	%ebx, 0x24(%rsp)
    00000179: 	pxor	%xmm4, %xmm4
    0000017d: 	movl	$0x0, 0x20(%rsp)
    00000185: 	movq	%rdx, 0x28(%rsp)
    0000018a: 	movsd	%xmm4, 0x10(%rsp)
.Ltmp3664:
    00000190: 	movslq	0x20(%rsp), %rdx
    00000195: 	movslq	%eax, %rcx
    00000198: 	movq	%rdx, %rdi
    0000019b: 	addq	0x8(%rsp), %rdx
    000001a0: 	subl	%edi, %eax
    000001a2: 	cmpq	%rcx, %rdx
    000001a5: 	cmovbl	0x24(%rsp), %eax
    000001aa: 	movl	%eax, %ebx
    000001ac: 	callq	clock@PLT # Offset: 428
    000001b1: 	movq	0x28(%rsp), %rcx
    000001b6: 	movq	0x18(%rsp), %r14
    000001bb: 	movq	%rax, start_time(%rip)
    000001c2: 	leal	-0x1(%rbx), %eax
    000001c5: 	leaq	(%rcx,%rax,8), %rax
    000001c9: 	movq	%r14, %r13
    000001cc: 	movq	%rax, (%rsp)
.Ltmp3658:
    000001d0: 	movl	$0x50, %edi
    000001d5: 	callq	_Znwm@PLT # Offset: 469
    000001da: 	movq	$0x0, (%rax)
    000001e1: 	pxor	%xmm1, %xmm1
    000001e5: 	movq	%rax, %rdi
    000001e8: 	movq	%rax, %rbp
    000001eb: 	movq	$0x0, 0x8(%rax)
    000001f3: 	movups	%xmm1, 0x10(%rax)
    000001f7: 	movups	%xmm1, 0x20(%rax)
    000001fb: 	movups	%xmm1, 0x30(%rax)
    000001ff: 	movups	%xmm1, 0x40(%rax)
    00000203: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 515
    00000208: 	movq	%r15, %rbx
    0000020b: 	cmpq	%r15, %r12
    0000020e: 	jne	.Ltmp3655 # Offset: 526
    00000210: 	jmp	.Ltmp3656 # Offset: 528
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3657:
    00000218: 	movsd	-0x8(%rbx), %xmm0
    0000021d: 	subq	$0x8, %rax
    00000221: 	movsd	%xmm0, (%rax)
    00000225: 	movq	%rax, 0x10(%rbp)
    00000229: 	cmpq	%rbx, %r12
    0000022c: 	je	.Ltmp3656 # Offset: 556
.Ltmp3655:
    0000022e: 	movq	%rbx, %rsi
    00000231: 	movq	0x10(%rbp), %rax
    00000235: 	addq	$0x8, %rbx
    00000239: 	cmpq	0x18(%rbp), %rax
    0000023d: 	jne	.Ltmp3657 # Offset: 573
    0000023f: 	movq	%rbp, %rdi
    00000242: 	callq	_ZNSt5dequeIdSaIdEE17_M_push_front_auxIJRKdEEEvDpOT_ # Offset: 578
    00000247: 	cmpq	%rbx, %r12
    0000024a: 	jne	.Ltmp3655 # Offset: 586
    0000024c: 	nopl	(%rax) # Size: 4
.Ltmp3656:
    00000250: 	movq	%rbp, (%r14)
    00000253: 	addq	$0x8, %r14
    00000257: 	cmpq	%r14, (%rsp)
    0000025b: 	jne	.Ltmp3658 # Offset: 603
    00000261: 	callq	clock@PLT # Offset: 609
    00000266: 	pxor	%xmm0, %xmm0
    0000026a: 	movq	%rax, end_time(%rip)
    00000271: 	subq	start_time(%rip), %rax
    00000278: 	cvtsi2sd	%rax, %xmm0
    0000027d: 	divsd	DATAat0x53788(%rip), %xmm0
    00000285: 	addsd	0x10(%rsp), %xmm0
    0000028b: 	movsd	%xmm0, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp3663:
    00000298: 	movq	(%r13), %rbp
    0000029c: 	testq	%rbp, %rbp
    0000029f: 	je	.Ltmp3659 # Offset: 671
    000002a1: 	movq	(%rbp), %rdi
    000002a5: 	testq	%rdi, %rdi
    000002a8: 	je	.Ltmp3660 # Offset: 680
    000002aa: 	movq	0x48(%rbp), %rax
    000002ae: 	movq	0x28(%rbp), %r14
    000002b2: 	leaq	0x8(%rax), %rbx
    000002b6: 	cmpq	%r14, %rbx
    000002b9: 	jbe	.Ltmp3661 # Offset: 697
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3662:
    000002c0: 	movq	(%r14), %rdi
    000002c3: 	movl	$0x200, %esi
    000002c8: 	addq	$0x8, %r14
    000002cc: 	callq	_ZdlPvm@PLT # Offset: 716
    000002d1: 	cmpq	%r14, %rbx
    000002d4: 	ja	.Ltmp3662 # Offset: 724
    000002d6: 	movq	(%rbp), %rdi
.Ltmp3661:
    000002da: 	movq	0x8(%rbp), %rax
    000002de: 	leaq	(,%rax,8), %rsi
    000002e6: 	callq	_ZdlPvm@PLT # Offset: 742
.Ltmp3660:
    000002eb: 	movl	$0x50, %esi
    000002f0: 	movq	%rbp, %rdi
    000002f3: 	callq	_ZdlPvm@PLT # Offset: 755
.Ltmp3659:
    000002f8: 	movq	$0x0, (%r13)
    00000300: 	addq	$0x8, %r13
    00000304: 	cmpq	%r13, (%rsp)
    00000308: 	jne	.Ltmp3663 # Offset: 776
    0000030a: 	movl	0x8(%rsp), %edx
    0000030e: 	movl	iterations(%rip), %eax
    00000314: 	addl	%edx, 0x20(%rsp)
    00000318: 	movl	0x20(%rsp), %ecx
    0000031c: 	cmpl	%ecx, %eax
    0000031e: 	jg	.Ltmp3664 # Offset: 798
.Ltmp3670:
    00000324: 	movq	0x38(%rsp), %rdi
    00000329: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 809
    0000032e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000335: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000033c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000343: 	je	.Ltmp3665 # Offset: 835
.Ltmp3669:
    00000349: 	movsd	0x10(%rsp), %xmm0
    0000034f: 	subsd	0x30(%rsp), %xmm0
    00000355: 	movq	-0x20(%rax), %rdi
    00000359: 	callq	_Z13record_resultdPKc # Offset: 857
    0000035e: 	cmpq	$0x0, 0x18(%rsp)
    00000364: 	je	.Ltmp3666 # Offset: 868
    00000366: 	movq	0x58(%rsp), %rax
    0000036b: 	subq	%fs:0x28, %rax
    00000374: 	jne	.Ltmp3667 # Offset: 884
    00000376: 	movq	0x50(%rsp), %rsi
    0000037b: 	movq	0x18(%rsp), %rdi
    00000380: 	addq	$0x68, %rsp
    00000384: 	popq	%rbx
    00000385: 	popq	%rbp
    00000386: 	subq	%rdi, %rsi
    00000389: 	popq	%r12
    0000038b: 	popq	%r13
    0000038d: 	popq	%r14
    0000038f: 	popq	%r15
    00000391: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 913
.Ltmp3666:
    00000396: 	movq	0x58(%rsp), %rax
    0000039b: 	subq	%fs:0x28, %rax
    000003a4: 	jne	.Ltmp3667 # Offset: 932
    000003a6: 	addq	$0x68, %rsp
    000003aa: 	popq	%rbx
    000003ab: 	popq	%rbp
    000003ac: 	popq	%r12
    000003ae: 	popq	%r13
    000003b0: 	popq	%r14
    000003b2: 	popq	%r15
    000003b4: 	retq # Offset: 948
.Ltmp3652:
    000003b5: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp3653:
    000003be: 	movq	$0x0, 0x50(%rsp)
    000003c7: 	pxor	%xmm0, %xmm0
    000003cb: 	movaps	%xmm0, 0x40(%rsp)
    000003d0: 	jmp	.Ltmp3668 # Offset: 976
.Ltmp3665:
    000003d5: 	movq	-0x8(%rdx), %rax
    000003d9: 	addq	$0x200, %rax
    000003df: 	jmp	.Ltmp3669 # Offset: 991
.Ltmp3654:
    000003e4: 	pxor	%xmm5, %xmm5
    000003e8: 	movsd	%xmm5, 0x10(%rsp)
    000003ee: 	jmp	.Ltmp3670 # Offset: 1006
.Ltmp3667:
    000003f3: 	callq	__stack_chk_fail@PLT # Offset: 1011
    000003f8: 	endbr64
    000003fc: 	movq	%rax, %rbp
    000003ff: 	jmp	.Ltmp3671 # Offset: 1023
    00000401: 	endbr64
    00000405: 	movq	%rax, %r12
    00000408: 	jmp	.Ltmp3672 # Offset: 1032
    0000040a: 	endbr64
    0000040e: 	movq	%rax, %rbx
    00000411: 	movq	%rbp, %rdi
    00000414: 	movl	$0x50, %esi
    00000419: 	movq	%rbx, %rbp
    0000041c: 	callq	_ZdlPvm@PLT # Offset: 1052
.Ltmp3671:
    00000421: 	movq	0x40(%rsp), %rdi
    00000426: 	movq	0x50(%rsp), %rsi
    0000042b: 	subq	%rdi, %rsi
    0000042e: 	testq	%rdi, %rdi
    00000431: 	je	.Ltmp3673 # Offset: 1073
    00000433: 	callq	_ZdlPvm@PLT # Offset: 1075
.Ltmp3673:
    00000438: 	movq	%rbp, %rdi
    0000043b: 	callq	_Unwind_Resume@PLT # Offset: 1083
.Ltmp3672:
    00000440: 	movq	%rbp, %rdi
    00000443: 	movl	$0x50, %esi
    00000448: 	callq	_ZdlPvm@PLT # Offset: 1096
    0000044d: 	movq	%r12, %rdi
    00000450: 	callq	_Unwind_Resume@PLT # Offset: 1104
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_pushfrontIdSt5dequeIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_" after disassembly {
  Number      : 232
  State       : disassembled
  Address     : 0x25920
  Size        : 0xe6
  MaxSize     : 0xf0
  Offset      : 0x25920
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0231:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pushq	%rbp
    00000007: 	pushq	%rbx
    00000008: 	movq	0x48(%rdi), %r12
    0000000c: 	movq	0x30(%rdi), %rdx
    00000010: 	movq	%r12, %rax
    00000013: 	subq	0x28(%rdi), %rax
    00000017: 	sarq	$0x3, %rax
    0000001b: 	cmpq	$0x1, %r12
    0000001f: 	adcq	$-0x1, %rax
    00000023: 	subq	0x38(%rdi), %rdx
    00000027: 	sarq	$0x3, %rdx
    0000002b: 	shlq	$0x6, %rax
    0000002f: 	addq	%rdx, %rax
    00000032: 	movq	0x20(%rdi), %rdx
    00000036: 	subq	0x10(%rdi), %rdx
    0000003a: 	sarq	$0x3, %rdx
    0000003e: 	addq	%rdx, %rax
    00000041: 	movabsq	$0xfffffffffffffff, %rdx
    0000004b: 	cmpq	%rdx, %rax
    0000004e: 	je	.Ltmp3674 # Offset: 78
    00000054: 	movq	0x8(%rdi), %rax
    00000058: 	movq	%r12, %rdx
    0000005b: 	subq	(%rdi), %rdx
    0000005e: 	movq	%rdi, %rbx
    00000061: 	sarq	$0x3, %rdx
    00000065: 	movq	%rsi, %rbp
    00000068: 	subq	%rdx, %rax
    0000006b: 	cmpq	$0x1, %rax
    0000006f: 	jbe	.Ltmp3675 # Offset: 111
.Ltmp3676:
    00000071: 	movl	$0x200, %edi
    00000076: 	callq	_Znwm@PLT # Offset: 118
    0000007b: 	movsd	(%rbp), %xmm0
    00000080: 	movq	0x48(%rbx), %rdx
    00000084: 	movq	%rax, 0x8(%r12)
    00000089: 	movq	0x30(%rbx), %rax
    0000008d: 	addq	$0x8, %rdx
    00000091: 	movsd	%xmm0, (%rax)
    00000095: 	movq	(%rdx), %rax
    00000098: 	movq	%rdx, %xmm1
    0000009d: 	movq	%rax, %xmm0
    000000a2: 	addq	$0x200, %rax
    000000a8: 	punpcklqdq	%xmm0, %xmm0
    000000ac: 	movups	%xmm0, 0x30(%rbx)
    000000b0: 	movq	%rax, %xmm0
    000000b5: 	punpcklqdq	%xmm1, %xmm0
    000000b9: 	movups	%xmm0, 0x40(%rbx)
    000000bd: 	popq	%rbx
    000000be: 	popq	%rbp
    000000bf: 	popq	%r12
    000000c1: 	retq # Offset: 193
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3675:
    000000c8: 	xorl	%edx, %edx
    000000ca: 	movl	$0x1, %esi
    000000cf: 	callq	_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEmb # Offset: 207
    000000d4: 	movq	0x48(%rbx), %r12
    000000d8: 	jmp	.Ltmp3676 # Offset: 216
.Ltmp3674:
    000000da: 	leaq	DATAat0x52330(%rip), %rdi
    000000e1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 225
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_"

Binary Function "_Z13test_pushbackIdSt5dequeIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 233
  State       : disassembled
  Address     : 0x25a10
  Size        : 0x479
  MaxSize     : 0x480
  Offset      : 0x25a10
  Section     : .text
  Orc Section : .local.text._Z13test_pushbackIdSt5dequeIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0232:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	xorl	%ebx, %ebx
    00000016: 	subq	$0x68, %rsp
    0000001a: 	movq	%rdx, 0x38(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x58(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jg	.Ltmp3677 # Offset: 67
    00000045: 	jmp	.Ltmp3678 # Offset: 69
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3679:
    00000050: 	movsd	(%r15), %xmm0
    00000055: 	addq	$0x8, %rax
    00000059: 	movsd	%xmm0, -0x8(%rax)
    0000005e: 	movq	%rax, 0x30(%rbp)
.Ltmp3680:
    00000062: 	movq	%rbp, %rdi
    00000065: 	addl	$0x1, %ebx
    00000068: 	callq	_ZNSt11_Deque_baseIdSaIdEED2Ev # Offset: 104
    0000006d: 	movl	$0x50, %esi
    00000072: 	movq	%rbp, %rdi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
    0000007a: 	cmpl	%ebx, iterations(%rip)
    00000080: 	jle	.Ltmp3678 # Offset: 128
.Ltmp3677:
    00000082: 	movl	$0x50, %edi
    00000087: 	callq	_Znwm@PLT # Offset: 135
    0000008c: 	pxor	%xmm2, %xmm2
    00000090: 	movq	$0x0, (%rax)
    00000097: 	movq	%rax, %rdi
    0000009a: 	movq	%rax, %rbp
    0000009d: 	movq	$0x0, 0x8(%rax)
    000000a5: 	movups	%xmm2, 0x10(%rax)
    000000a9: 	movups	%xmm2, 0x20(%rax)
    000000ad: 	movups	%xmm2, 0x30(%rax)
    000000b1: 	movups	%xmm2, 0x40(%rax)
    000000b5: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 181
    000000ba: 	movq	0x40(%rbp), %rdi
    000000be: 	movq	0x30(%rbp), %rax
    000000c2: 	leaq	-0x8(%rdi), %rdx
    000000c6: 	cmpq	%rdx, %rax
    000000c9: 	jne	.Ltmp3679 # Offset: 201
    000000cb: 	movq	%r15, %rsi
    000000ce: 	movq	%rbp, %rdi
    000000d1: 	callq	_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_ # Offset: 209
    000000d6: 	jmp	.Ltmp3680 # Offset: 214
.Ltmp3678:
    000000d8: 	callq	clock@PLT # Offset: 216
    000000dd: 	pxor	%xmm0, %xmm0
    000000e1: 	movq	%r12, %rcx
    000000e4: 	xorl	%edx, %edx
    000000e6: 	movq	%rax, end_time(%rip)
    000000ed: 	subq	start_time(%rip), %rax
    000000f4: 	subq	%r15, %rcx
    000000f7: 	cvtsi2sd	%rax, %xmm0
    000000fc: 	divsd	DATAat0x53788(%rip), %xmm0
    00000104: 	movabsq	$0x500000000, %rax
    0000010e: 	movsd	%xmm0, 0x30(%rsp)
    00000114: 	divq	%rcx
    00000117: 	movq	%rax, 0x8(%rsp)
    0000011c: 	cmpq	$0x3e8, %rax
    00000122: 	ja	.Ltmp3681 # Offset: 290
    00000128: 	cmpq	$0x3, 0x8(%rsp)
    0000012e: 	ja	.Ltmp3682 # Offset: 302
    00000134: 	movq	$0x0, 0x50(%rsp)
    0000013d: 	pxor	%xmm0, %xmm0
    00000141: 	movq	$0x4, 0x8(%rsp)
    0000014a: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp3697:
    0000014f: 	movq	0x8(%rsp), %rbx
    00000154: 	leaq	0x40(%rsp), %rdi
    00000159: 	movq	%rbx, %rsi
    0000015c: 	callq	_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 348
    00000161: 	movq	0x40(%rsp), %rdi
    00000166: 	movl	iterations(%rip), %eax
    0000016c: 	movq	%rdi, 0x18(%rsp)
    00000171: 	testl	%eax, %eax
    00000173: 	jle	.Ltmp3683 # Offset: 371
    00000179: 	addq	$0x8, %rdi
    0000017d: 	movl	%ebx, 0x24(%rsp)
    00000181: 	pxor	%xmm4, %xmm4
    00000185: 	movl	$0x0, 0x20(%rsp)
    0000018d: 	movq	%rdi, 0x28(%rsp)
    00000192: 	movsd	%xmm4, 0x10(%rsp)
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3693:
    000001a0: 	movslq	0x20(%rsp), %rdx
    000001a5: 	movslq	%eax, %rcx
    000001a8: 	movq	%rdx, %rdi
    000001ab: 	addq	0x8(%rsp), %rdx
    000001b0: 	subl	%edi, %eax
    000001b2: 	cmpq	%rcx, %rdx
    000001b5: 	cmovbl	0x24(%rsp), %eax
    000001ba: 	movl	%eax, %ebx
    000001bc: 	callq	clock@PLT # Offset: 444
    000001c1: 	movq	0x28(%rsp), %rdi
    000001c6: 	movq	0x18(%rsp), %r14
    000001cb: 	movq	%rax, start_time(%rip)
    000001d2: 	leal	-0x1(%rbx), %eax
    000001d5: 	leaq	(%rdi,%rax,8), %rax
    000001d9: 	movq	%r14, %r13
    000001dc: 	movq	%rax, (%rsp)
.Ltmp3687:
    000001e0: 	movl	$0x50, %edi
    000001e5: 	callq	_Znwm@PLT # Offset: 485
    000001ea: 	movq	$0x0, (%rax)
    000001f1: 	pxor	%xmm1, %xmm1
    000001f5: 	movq	%rax, %rdi
    000001f8: 	movq	%rax, %rbp
    000001fb: 	movq	$0x0, 0x8(%rax)
    00000203: 	movups	%xmm1, 0x10(%rax)
    00000207: 	movups	%xmm1, 0x20(%rax)
    0000020b: 	movups	%xmm1, 0x30(%rax)
    0000020f: 	movups	%xmm1, 0x40(%rax)
    00000213: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 531
    00000218: 	movq	%r15, %rbx
    0000021b: 	cmpq	%r15, %r12
    0000021e: 	jne	.Ltmp3684 # Offset: 542
    00000220: 	jmp	.Ltmp3685 # Offset: 544
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3686:
    00000228: 	movsd	-0x8(%rbx), %xmm0
    0000022d: 	addq	$0x8, %rax
    00000231: 	movsd	%xmm0, -0x8(%rax)
    00000236: 	movq	%rax, 0x30(%rbp)
    0000023a: 	cmpq	%rbx, %r12
    0000023d: 	je	.Ltmp3685 # Offset: 573
.Ltmp3684:
    0000023f: 	movq	0x40(%rbp), %rcx
    00000243: 	movq	0x30(%rbp), %rax
    00000247: 	movq	%rbx, %rsi
    0000024a: 	addq	$0x8, %rbx
    0000024e: 	leaq	-0x8(%rcx), %rdx
    00000252: 	cmpq	%rdx, %rax
    00000255: 	jne	.Ltmp3686 # Offset: 597
    00000257: 	movq	%rbp, %rdi
    0000025a: 	callq	_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_ # Offset: 602
    0000025f: 	cmpq	%rbx, %r12
    00000262: 	jne	.Ltmp3684 # Offset: 610
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp3685:
    00000268: 	movq	%rbp, (%r14)
    0000026b: 	addq	$0x8, %r14
    0000026f: 	cmpq	%r14, (%rsp)
    00000273: 	jne	.Ltmp3687 # Offset: 627
    00000279: 	callq	clock@PLT # Offset: 633
    0000027e: 	pxor	%xmm0, %xmm0
    00000282: 	movq	(%rsp), %r14
    00000286: 	movq	%r12, (%rsp)
    0000028a: 	movq	%rax, end_time(%rip)
    00000291: 	subq	start_time(%rip), %rax
    00000298: 	cvtsi2sd	%rax, %xmm0
    0000029d: 	divsd	DATAat0x53788(%rip), %xmm0
    000002a5: 	addsd	0x10(%rsp), %xmm0
    000002ab: 	movsd	%xmm0, 0x10(%rsp)
    000002b1: 	nopl	(%rax) # Size: 7
.Ltmp3692:
    000002b8: 	movq	(%r13), %rbp
    000002bc: 	testq	%rbp, %rbp
    000002bf: 	je	.Ltmp3688 # Offset: 703
    000002c1: 	movq	(%rbp), %rdi
    000002c5: 	testq	%rdi, %rdi
    000002c8: 	je	.Ltmp3689 # Offset: 712
    000002ca: 	movq	0x48(%rbp), %rax
    000002ce: 	movq	0x28(%rbp), %r12
    000002d2: 	leaq	0x8(%rax), %rbx
    000002d6: 	cmpq	%r12, %rbx
    000002d9: 	jbe	.Ltmp3690 # Offset: 729
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3691:
    000002e0: 	movq	(%r12), %rdi
    000002e4: 	movl	$0x200, %esi
    000002e9: 	addq	$0x8, %r12
    000002ed: 	callq	_ZdlPvm@PLT # Offset: 749
    000002f2: 	cmpq	%r12, %rbx
    000002f5: 	ja	.Ltmp3691 # Offset: 757
    000002f7: 	movq	(%rbp), %rdi
.Ltmp3690:
    000002fb: 	movq	0x8(%rbp), %rax
    000002ff: 	leaq	(,%rax,8), %rsi
    00000307: 	callq	_ZdlPvm@PLT # Offset: 775
.Ltmp3689:
    0000030c: 	movl	$0x50, %esi
    00000311: 	movq	%rbp, %rdi
    00000314: 	callq	_ZdlPvm@PLT # Offset: 788
.Ltmp3688:
    00000319: 	movq	$0x0, (%r13)
    00000321: 	addq	$0x8, %r13
    00000325: 	cmpq	%r13, %r14
    00000328: 	jne	.Ltmp3692 # Offset: 808
    0000032a: 	movl	0x8(%rsp), %edi
    0000032e: 	movl	iterations(%rip), %eax
    00000334: 	addl	%edi, 0x20(%rsp)
    00000338: 	movl	0x20(%rsp), %edi
    0000033c: 	movq	(%rsp), %r12
    00000340: 	cmpl	%edi, %eax
    00000342: 	jg	.Ltmp3693 # Offset: 834
.Ltmp3699:
    00000348: 	movq	0x38(%rsp), %rdi
    0000034d: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 845
    00000352: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000359: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000360: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000367: 	je	.Ltmp3694 # Offset: 871
.Ltmp3698:
    0000036d: 	movsd	0x10(%rsp), %xmm0
    00000373: 	subsd	0x30(%rsp), %xmm0
    00000379: 	movq	-0x20(%rax), %rdi
    0000037d: 	callq	_Z13record_resultdPKc # Offset: 893
    00000382: 	cmpq	$0x0, 0x18(%rsp)
    00000388: 	je	.Ltmp3695 # Offset: 904
    0000038a: 	movq	0x58(%rsp), %rax
    0000038f: 	subq	%fs:0x28, %rax
    00000398: 	jne	.Ltmp3696 # Offset: 920
    0000039a: 	movq	0x50(%rsp), %rsi
    0000039f: 	movq	0x18(%rsp), %rdi
    000003a4: 	addq	$0x68, %rsp
    000003a8: 	popq	%rbx
    000003a9: 	popq	%rbp
    000003aa: 	subq	%rdi, %rsi
    000003ad: 	popq	%r12
    000003af: 	popq	%r13
    000003b1: 	popq	%r14
    000003b3: 	popq	%r15
    000003b5: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 949
.Ltmp3695:
    000003ba: 	movq	0x58(%rsp), %rax
    000003bf: 	subq	%fs:0x28, %rax
    000003c8: 	jne	.Ltmp3696 # Offset: 968
    000003ca: 	addq	$0x68, %rsp
    000003ce: 	popq	%rbx
    000003cf: 	popq	%rbp
    000003d0: 	popq	%r12
    000003d2: 	popq	%r13
    000003d4: 	popq	%r14
    000003d6: 	popq	%r15
    000003d8: 	retq # Offset: 984
.Ltmp3681:
    000003d9: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp3682:
    000003e2: 	movq	$0x0, 0x50(%rsp)
    000003eb: 	pxor	%xmm0, %xmm0
    000003ef: 	movaps	%xmm0, 0x40(%rsp)
    000003f4: 	jmp	.Ltmp3697 # Offset: 1012
.Ltmp3694:
    000003f9: 	movq	-0x8(%rdx), %rax
    000003fd: 	addq	$0x200, %rax
    00000403: 	jmp	.Ltmp3698 # Offset: 1027
.Ltmp3683:
    00000408: 	pxor	%xmm5, %xmm5
    0000040c: 	movsd	%xmm5, 0x10(%rsp)
    00000412: 	jmp	.Ltmp3699 # Offset: 1042
.Ltmp3696:
    00000417: 	callq	__stack_chk_fail@PLT # Offset: 1047
    0000041c: 	endbr64
    00000420: 	movq	%rax, %rbp
    00000423: 	jmp	.Ltmp3700 # Offset: 1059
    00000425: 	endbr64
    00000429: 	movq	%rax, %r12
    0000042c: 	jmp	.Ltmp3701 # Offset: 1068
    0000042e: 	endbr64
    00000432: 	movq	%rax, %rbx
    00000435: 	movq	%rbp, %rdi
    00000438: 	movl	$0x50, %esi
    0000043d: 	movq	%rbx, %rbp
    00000440: 	callq	_ZdlPvm@PLT # Offset: 1088
.Ltmp3700:
    00000445: 	movq	0x40(%rsp), %rdi
    0000044a: 	movq	0x50(%rsp), %rsi
    0000044f: 	subq	%rdi, %rsi
    00000452: 	testq	%rdi, %rdi
    00000455: 	je	.Ltmp3702 # Offset: 1109
    00000457: 	callq	_ZdlPvm@PLT # Offset: 1111
.Ltmp3702:
    0000045c: 	movq	%rbp, %rdi
    0000045f: 	callq	_Unwind_Resume@PLT # Offset: 1119
.Ltmp3701:
    00000464: 	movq	%rbp, %rdi
    00000467: 	movl	$0x50, %esi
    0000046c: 	callq	_ZdlPvm@PLT # Offset: 1132
    00000471: 	movq	%r12, %rdi
    00000474: 	callq	_Unwind_Resume@PLT # Offset: 1140
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_pushbackIdSt5dequeIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_delete_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 234
  State       : disassembled
  Address     : 0x25e90
  Size        : 0x377
  MaxSize     : 0x380
  Offset      : 0x25e90
  Section     : .text
  Orc Section : .local.text._Z20test_delete_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0233:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp3703 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp3704 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp3719:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rdi
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rdi, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp3705 # Offset: 158
    000000a4: 	addq	$0x8, %rdi
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm3, %xmm3
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rdi, 0x30(%rsp)
    000000bd: 	movsd	%xmm3, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3715:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rdi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%edi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rdi
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rdi,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3709:
    00000100: 	movl	$0x50, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	$0x0, (%rax)
    00000111: 	pxor	%xmm1, %xmm1
    00000115: 	movq	%rax, %rdi
    00000118: 	movq	%rax, %rbp
    0000011b: 	movq	$0x0, 0x8(%rax)
    00000123: 	movups	%xmm1, 0x10(%rax)
    00000127: 	movups	%xmm1, 0x20(%rax)
    0000012b: 	movups	%xmm1, 0x30(%rax)
    0000012f: 	movups	%xmm1, 0x40(%rax)
    00000133: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 307
    00000138: 	movq	0x8(%rsp), %rax
    0000013d: 	movq	%rax, %rbx
    00000140: 	cmpq	%rax, %r12
    00000143: 	jne	.Ltmp3706 # Offset: 323
    00000145: 	jmp	.Ltmp3707 # Offset: 325
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3708:
    00000150: 	movsd	-0x8(%rbx), %xmm0
    00000155: 	addq	$0x8, %rax
    00000159: 	movsd	%xmm0, -0x8(%rax)
    0000015e: 	movq	%rax, 0x30(%rbp)
    00000162: 	cmpq	%rbx, %r12
    00000165: 	je	.Ltmp3707 # Offset: 357
.Ltmp3706:
    00000167: 	movq	0x40(%rbp), %rcx
    0000016b: 	movq	0x30(%rbp), %rax
    0000016f: 	movq	%rbx, %rsi
    00000172: 	addq	$0x8, %rbx
    00000176: 	leaq	-0x8(%rcx), %rdx
    0000017a: 	cmpq	%rdx, %rax
    0000017d: 	jne	.Ltmp3708 # Offset: 381
    0000017f: 	movq	%rbp, %rdi
    00000182: 	callq	_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_ # Offset: 386
    00000187: 	cmpq	%rbx, %r12
    0000018a: 	jne	.Ltmp3706 # Offset: 394
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp3707:
    00000190: 	movq	%rbp, (%r14)
    00000193: 	addq	$0x8, %r14
    00000197: 	cmpq	%r14, %r15
    0000019a: 	jne	.Ltmp3709 # Offset: 410
    000001a0: 	callq	clock@PLT # Offset: 416
    000001a5: 	movq	%rax, start_time(%rip)
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp3714:
    000001b0: 	movq	(%r13), %r14
    000001b4: 	testq	%r14, %r14
    000001b7: 	je	.Ltmp3710 # Offset: 439
    000001b9: 	movq	(%r14), %rdi
    000001bc: 	testq	%rdi, %rdi
    000001bf: 	je	.Ltmp3711 # Offset: 447
    000001c1: 	movq	0x48(%r14), %rax
    000001c5: 	movq	0x28(%r14), %rbx
    000001c9: 	leaq	0x8(%rax), %rbp
    000001cd: 	cmpq	%rbx, %rbp
    000001d0: 	jbe	.Ltmp3712 # Offset: 464
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3713:
    000001d8: 	movq	(%rbx), %rdi
    000001db: 	movl	$0x200, %esi
    000001e0: 	addq	$0x8, %rbx
    000001e4: 	callq	_ZdlPvm@PLT # Offset: 484
    000001e9: 	cmpq	%rbx, %rbp
    000001ec: 	ja	.Ltmp3713 # Offset: 492
    000001ee: 	movq	(%r14), %rdi
.Ltmp3712:
    000001f1: 	movq	0x8(%r14), %rax
    000001f5: 	leaq	(,%rax,8), %rsi
    000001fd: 	callq	_ZdlPvm@PLT # Offset: 509
.Ltmp3711:
    00000202: 	movl	$0x50, %esi
    00000207: 	movq	%r14, %rdi
    0000020a: 	callq	_ZdlPvm@PLT # Offset: 522
.Ltmp3710:
    0000020f: 	movq	$0x0, (%r13)
    00000217: 	addq	$0x8, %r13
    0000021b: 	cmpq	%r13, %r15
    0000021e: 	jne	.Ltmp3714 # Offset: 542
    00000220: 	callq	clock@PLT # Offset: 544
    00000225: 	pxor	%xmm0, %xmm0
    00000229: 	movl	0x10(%rsp), %edi
    0000022d: 	addl	%edi, 0x28(%rsp)
    00000231: 	movq	%rax, end_time(%rip)
    00000238: 	subq	start_time(%rip), %rax
    0000023f: 	cvtsi2sd	%rax, %xmm0
    00000244: 	movl	0x28(%rsp), %edi
    00000248: 	divsd	DATAat0x53788(%rip), %xmm0
    00000250: 	addsd	0x18(%rsp), %xmm0
    00000256: 	movl	iterations(%rip), %eax
    0000025c: 	movsd	%xmm0, 0x18(%rsp)
    00000262: 	cmpl	%edi, %eax
    00000264: 	jg	.Ltmp3715 # Offset: 612
.Ltmp3721:
    0000026a: 	movq	0x38(%rsp), %rdi
    0000026f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 623
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000282: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000289: 	je	.Ltmp3716 # Offset: 649
.Ltmp3720:
    0000028f: 	movq	-0x20(%rax), %rdi
    00000293: 	movsd	0x18(%rsp), %xmm0
    00000299: 	callq	_Z13record_resultdPKc # Offset: 665
    0000029e: 	cmpq	$0x0, 0x20(%rsp)
    000002a4: 	je	.Ltmp3717 # Offset: 676
    000002a6: 	movq	0x58(%rsp), %rax
    000002ab: 	subq	%fs:0x28, %rax
    000002b4: 	jne	.Ltmp3718 # Offset: 692
    000002b6: 	movq	0x50(%rsp), %rsi
    000002bb: 	movq	0x20(%rsp), %rdi
    000002c0: 	addq	$0x68, %rsp
    000002c4: 	popq	%rbx
    000002c5: 	popq	%rbp
    000002c6: 	subq	%rdi, %rsi
    000002c9: 	popq	%r12
    000002cb: 	popq	%r13
    000002cd: 	popq	%r14
    000002cf: 	popq	%r15
    000002d1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 721
.Ltmp3717:
    000002d6: 	movq	0x58(%rsp), %rax
    000002db: 	subq	%fs:0x28, %rax
    000002e4: 	jne	.Ltmp3718 # Offset: 740
    000002e6: 	addq	$0x68, %rsp
    000002ea: 	popq	%rbx
    000002eb: 	popq	%rbp
    000002ec: 	popq	%r12
    000002ee: 	popq	%r13
    000002f0: 	popq	%r14
    000002f2: 	popq	%r15
    000002f4: 	retq # Offset: 756
.Ltmp3703:
    000002f5: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp3704:
    000002fe: 	movq	$0x0, 0x50(%rsp)
    00000307: 	pxor	%xmm0, %xmm0
    0000030b: 	movaps	%xmm0, 0x40(%rsp)
    00000310: 	jmp	.Ltmp3719 # Offset: 784
.Ltmp3716:
    00000315: 	movq	-0x8(%rdx), %rax
    00000319: 	addq	$0x200, %rax
    0000031f: 	jmp	.Ltmp3720 # Offset: 799
.Ltmp3705:
    00000324: 	pxor	%xmm4, %xmm4
    00000328: 	movsd	%xmm4, 0x18(%rsp)
    0000032e: 	jmp	.Ltmp3721 # Offset: 814
.Ltmp3718:
    00000333: 	callq	__stack_chk_fail@PLT # Offset: 819
    00000338: 	endbr64
    0000033c: 	movq	%rax, %rbp
    0000033f: 	jmp	.Ltmp3722 # Offset: 831
    00000341: 	endbr64
    00000345: 	movq	%rax, %rbx
    00000348: 	movq	%rbp, %rdi
    0000034b: 	movl	$0x50, %esi
    00000350: 	movq	%rbx, %rbp
    00000353: 	callq	_ZdlPvm@PLT # Offset: 851
.Ltmp3722:
    00000358: 	movq	0x40(%rsp), %rdi
    0000035d: 	movq	0x50(%rsp), %rsi
    00000362: 	subq	%rdi, %rsi
    00000365: 	testq	%rdi, %rdi
    00000368: 	je	.Ltmp3723 # Offset: 872
    0000036a: 	callq	_ZdlPvm@PLT # Offset: 874
.Ltmp3723:
    0000036f: 	movq	%rbp, %rdi
    00000372: 	callq	_Unwind_Resume@PLT # Offset: 882
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_delete_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_clearall_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 235
  State       : disassembled
  Address     : 0x26210
  Size        : 0x410
  MaxSize     : 0x410
  Offset      : 0x26210
  Section     : .text
  Orc Section : .local.text._Z22test_clearall_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0234:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	%rdx, 0x68(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x30(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x88(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	movabsq	$0x500000000, %rax
    00000047: 	divq	%rcx
    0000004a: 	movq	%rax, 0x38(%rsp)
    0000004f: 	cmpq	$0x3e8, %rax
    00000055: 	ja	.Ltmp3724 # Offset: 85
    0000005b: 	cmpq	$0x3, %rax
    0000005f: 	ja	.Ltmp3725 # Offset: 95
    00000065: 	movq	$0x0, 0x80(%rsp)
    00000071: 	pxor	%xmm0, %xmm0
    00000075: 	movq	$0x4, 0x38(%rsp)
    0000007e: 	movaps	%xmm0, 0x70(%rsp)
.Ltmp3743:
    00000083: 	movq	0x38(%rsp), %rbx
    00000088: 	leaq	0x70(%rsp), %rdi
    0000008d: 	movq	%rbx, %rsi
    00000090: 	callq	_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 144
    00000095: 	movq	0x70(%rsp), %rdx
    0000009a: 	movl	iterations(%rip), %eax
    000000a0: 	movq	%rdx, 0x48(%rsp)
    000000a5: 	testl	%eax, %eax
    000000a7: 	jle	.Ltmp3726 # Offset: 167
    000000ad: 	addq	$0x8, %rdx
    000000b1: 	movl	%ebx, 0x5c(%rsp)
    000000b5: 	pxor	%xmm7, %xmm7
    000000b9: 	movl	$0x0, 0x58(%rsp)
    000000c1: 	movq	%rdx, 0x60(%rsp)
    000000c6: 	movsd	%xmm7, 0x40(%rsp)
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp3739:
    000000d0: 	movslq	0x58(%rsp), %rdx
    000000d5: 	movslq	%eax, %rcx
    000000d8: 	movq	0x48(%rsp), %r15
    000000dd: 	movq	%rdx, %rdi
    000000e0: 	addq	0x38(%rsp), %rdx
    000000e5: 	movq	%r15, %r13
    000000e8: 	subl	%edi, %eax
    000000ea: 	cmpq	%rcx, %rdx
    000000ed: 	cmovbl	0x5c(%rsp), %eax
    000000f2: 	movq	0x60(%rsp), %rcx
    000000f7: 	subl	$0x1, %eax
    000000fa: 	leaq	(%rcx,%rax,8), %rax
    000000fe: 	movq	%rax, 0x28(%rsp)
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3730:
    00000108: 	movl	$0x50, %edi
    0000010d: 	callq	_Znwm@PLT # Offset: 269
    00000112: 	movq	$0x0, (%rax)
    00000119: 	pxor	%xmm1, %xmm1
    0000011d: 	movq	%rax, %rdi
    00000120: 	movq	%rax, %rbp
    00000123: 	movq	$0x0, 0x8(%rax)
    0000012b: 	movups	%xmm1, 0x10(%rax)
    0000012f: 	movups	%xmm1, 0x20(%rax)
    00000133: 	movups	%xmm1, 0x30(%rax)
    00000137: 	movups	%xmm1, 0x40(%rax)
    0000013b: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 315
    00000140: 	movq	0x30(%rsp), %rax
    00000145: 	movq	%rax, %rbx
    00000148: 	cmpq	%rax, %r12
    0000014b: 	jne	.Ltmp3727 # Offset: 331
    0000014d: 	jmp	.Ltmp3728 # Offset: 333
    0000014f: 	nop # Size: 1
.Ltmp3729:
    00000150: 	movsd	-0x8(%rbx), %xmm0
    00000155: 	addq	$0x8, %rax
    00000159: 	movsd	%xmm0, -0x8(%rax)
    0000015e: 	movq	%rax, 0x30(%rbp)
    00000162: 	cmpq	%rbx, %r12
    00000165: 	je	.Ltmp3728 # Offset: 357
.Ltmp3727:
    00000167: 	movq	0x40(%rbp), %rcx
    0000016b: 	movq	0x30(%rbp), %rax
    0000016f: 	movq	%rbx, %rsi
    00000172: 	addq	$0x8, %rbx
    00000176: 	leaq	-0x8(%rcx), %rdx
    0000017a: 	cmpq	%rdx, %rax
    0000017d: 	jne	.Ltmp3729 # Offset: 381
    0000017f: 	movq	%rbp, %rdi
    00000182: 	callq	_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_ # Offset: 386
    00000187: 	cmpq	%rbx, %r12
    0000018a: 	jne	.Ltmp3727 # Offset: 394
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp3728:
    00000190: 	movq	%rbp, (%r15)
    00000193: 	addq	$0x8, %r15
    00000197: 	cmpq	0x28(%rsp), %r15
    0000019c: 	jne	.Ltmp3730 # Offset: 412
    000001a2: 	callq	clock@PLT # Offset: 418
    000001a7: 	movq	%r12, 0x50(%rsp)
    000001ac: 	movq	0x48(%rsp), %r15
    000001b1: 	movq	%rax, start_time(%rip)
    000001b8: 	movq	0x28(%rsp), %r14
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp3733:
    000001c0: 	movq	(%r15), %rbp
    000001c3: 	movdqu	0x20(%rbp), %xmm2
    000001c8: 	movq	0x48(%rbp), %rax
    000001cc: 	movdqu	0x10(%rbp), %xmm3
    000001d1: 	movhlps	%xmm2, %xmm6
    000001d4: 	leaq	0x8(%rax), %rbx
    000001d8: 	movaps	%xmm2, (%rsp)
    000001dc: 	movq	%xmm6, %rax
    000001e1: 	movaps	%xmm3, 0x10(%rsp)
    000001e6: 	leaq	0x8(%rax), %r12
    000001ea: 	cmpq	%r12, %rbx
    000001ed: 	jbe	.Ltmp3731 # Offset: 493
    000001ef: 	nop # Size: 1
.Ltmp3732:
    000001f0: 	movq	(%r12), %rdi
    000001f4: 	movl	$0x200, %esi
    000001f9: 	addq	$0x8, %r12
    000001fd: 	callq	_ZdlPvm@PLT # Offset: 509
    00000202: 	cmpq	%r12, %rbx
    00000205: 	ja	.Ltmp3732 # Offset: 517
.Ltmp3731:
    00000207: 	movdqa	0x10(%rsp), %xmm4
    0000020d: 	movdqa	(%rsp), %xmm5
    00000212: 	addq	$0x8, %r15
    00000216: 	movups	%xmm4, 0x30(%rbp)
    0000021a: 	movups	%xmm5, 0x40(%rbp)
    0000021e: 	cmpq	%r15, %r14
    00000221: 	jne	.Ltmp3733 # Offset: 545
    00000223: 	movq	0x50(%rsp), %r12
    00000228: 	callq	clock@PLT # Offset: 552
    0000022d: 	pxor	%xmm0, %xmm0
    00000231: 	movq	0x28(%rsp), %r15
    00000236: 	movq	%rax, end_time(%rip)
    0000023d: 	subq	start_time(%rip), %rax
    00000244: 	cvtsi2sd	%rax, %xmm0
    00000249: 	divsd	DATAat0x53788(%rip), %xmm0
    00000251: 	addsd	0x40(%rsp), %xmm0
    00000257: 	movsd	%xmm0, 0x40(%rsp)
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp3738:
    00000260: 	movq	(%r13), %r14
    00000264: 	testq	%r14, %r14
    00000267: 	je	.Ltmp3734 # Offset: 615
    00000269: 	movq	(%r14), %rdi
    0000026c: 	testq	%rdi, %rdi
    0000026f: 	je	.Ltmp3735 # Offset: 623
    00000271: 	movq	0x48(%r14), %rax
    00000275: 	movq	0x28(%r14), %rbx
    00000279: 	leaq	0x8(%rax), %rbp
    0000027d: 	cmpq	%rbx, %rbp
    00000280: 	jbe	.Ltmp3736 # Offset: 640
    00000282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3737:
    00000288: 	movq	(%rbx), %rdi
    0000028b: 	movl	$0x200, %esi
    00000290: 	addq	$0x8, %rbx
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
    00000299: 	cmpq	%rbx, %rbp
    0000029c: 	ja	.Ltmp3737 # Offset: 668
    0000029e: 	movq	(%r14), %rdi
.Ltmp3736:
    000002a1: 	movq	0x8(%r14), %rax
    000002a5: 	leaq	(,%rax,8), %rsi
    000002ad: 	callq	_ZdlPvm@PLT # Offset: 685
.Ltmp3735:
    000002b2: 	movl	$0x50, %esi
    000002b7: 	movq	%r14, %rdi
    000002ba: 	callq	_ZdlPvm@PLT # Offset: 698
.Ltmp3734:
    000002bf: 	movq	$0x0, (%r13)
    000002c7: 	addq	$0x8, %r13
    000002cb: 	cmpq	%r13, %r15
    000002ce: 	jne	.Ltmp3738 # Offset: 718
    000002d0: 	movl	0x38(%rsp), %edx
    000002d4: 	movl	iterations(%rip), %eax
    000002da: 	addl	%edx, 0x58(%rsp)
    000002de: 	movl	0x58(%rsp), %ecx
    000002e2: 	cmpl	%ecx, %eax
    000002e4: 	jg	.Ltmp3739 # Offset: 740
.Ltmp3745:
    000002ea: 	movq	0x68(%rsp), %rdi
    000002ef: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 751
    000002f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002fb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000302: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000309: 	je	.Ltmp3740 # Offset: 777
.Ltmp3744:
    0000030f: 	movq	-0x20(%rax), %rdi
    00000313: 	movsd	0x40(%rsp), %xmm0
    00000319: 	callq	_Z13record_resultdPKc # Offset: 793
    0000031e: 	cmpq	$0x0, 0x48(%rsp)
    00000324: 	je	.Ltmp3741 # Offset: 804
    00000326: 	movq	0x88(%rsp), %rax
    0000032e: 	subq	%fs:0x28, %rax
    00000337: 	jne	.Ltmp3742 # Offset: 823
    0000033d: 	movq	0x80(%rsp), %rsi
    00000345: 	movq	0x48(%rsp), %rdi
    0000034a: 	addq	$0x98, %rsp
    00000351: 	popq	%rbx
    00000352: 	popq	%rbp
    00000353: 	subq	%rdi, %rsi
    00000356: 	popq	%r12
    00000358: 	popq	%r13
    0000035a: 	popq	%r14
    0000035c: 	popq	%r15
    0000035e: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 862
.Ltmp3741:
    00000363: 	movq	0x88(%rsp), %rax
    0000036b: 	subq	%fs:0x28, %rax
    00000374: 	jne	.Ltmp3742 # Offset: 884
    00000376: 	addq	$0x98, %rsp
    0000037d: 	popq	%rbx
    0000037e: 	popq	%rbp
    0000037f: 	popq	%r12
    00000381: 	popq	%r13
    00000383: 	popq	%r14
    00000385: 	popq	%r15
    00000387: 	retq # Offset: 903
.Ltmp3724:
    00000388: 	movq	$0x3e8, 0x38(%rsp)
.Ltmp3725:
    00000391: 	movq	$0x0, 0x80(%rsp)
    0000039d: 	pxor	%xmm0, %xmm0
    000003a1: 	movaps	%xmm0, 0x70(%rsp)
    000003a6: 	jmp	.Ltmp3743 # Offset: 934
.Ltmp3740:
    000003ab: 	movq	-0x8(%rdx), %rax
    000003af: 	addq	$0x200, %rax
    000003b5: 	jmp	.Ltmp3744 # Offset: 949
.Ltmp3726:
    000003ba: 	pxor	%xmm7, %xmm7
    000003be: 	movsd	%xmm7, 0x40(%rsp)
    000003c4: 	jmp	.Ltmp3745 # Offset: 964
.Ltmp3742:
    000003c9: 	callq	__stack_chk_fail@PLT # Offset: 969
    000003ce: 	endbr64
    000003d2: 	movq	%rax, %rbp
    000003d5: 	jmp	.Ltmp3746 # Offset: 981
    000003d7: 	endbr64
    000003db: 	movq	%rax, %rbx
    000003de: 	movq	%rbp, %rdi
    000003e1: 	movl	$0x50, %esi
    000003e6: 	movq	%rbx, %rbp
    000003e9: 	callq	_ZdlPvm@PLT # Offset: 1001
.Ltmp3746:
    000003ee: 	movq	0x70(%rsp), %rdi
    000003f3: 	movq	0x80(%rsp), %rsi
    000003fb: 	subq	%rdi, %rsi
    000003fe: 	testq	%rdi, %rdi
    00000401: 	je	.Ltmp3747 # Offset: 1025
    00000403: 	callq	_ZdlPvm@PLT # Offset: 1027
.Ltmp3747:
    00000408: 	movq	%rbp, %rdi
    0000040b: 	callq	_Unwind_Resume@PLT # Offset: 1035
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_clearall_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_popfrontIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 236
  State       : disassembled
  Address     : 0x26620
  Size        : 0x435
  MaxSize     : 0x440
  Offset      : 0x26620
  Section     : .text
  Orc Section : .local.text._Z13test_popfrontIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0235:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, (%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	movabsq	$0x500000000, %rax
    00000040: 	divq	%rcx
    00000043: 	movq	%rax, 0x8(%rsp)
    00000048: 	cmpq	$0x3e8, %rax
    0000004e: 	ja	.Ltmp3748 # Offset: 78
    00000054: 	cmpq	$0x3, %rax
    00000058: 	ja	.Ltmp3749 # Offset: 88
    0000005e: 	movq	$0x0, 0x50(%rsp)
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	movq	$0x4, 0x8(%rsp)
    00000074: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp3769:
    00000079: 	movq	0x8(%rsp), %rbx
    0000007e: 	leaq	0x40(%rsp), %rdi
    00000083: 	movq	%rbx, %rsi
    00000086: 	callq	_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 134
    0000008b: 	movq	0x40(%rsp), %rdi
    00000090: 	movl	iterations(%rip), %eax
    00000096: 	movq	%rdi, 0x18(%rsp)
    0000009b: 	testl	%eax, %eax
    0000009d: 	jle	.Ltmp3750 # Offset: 157
    000000a3: 	addq	$0x8, %rdi
    000000a7: 	movl	%ebx, 0x2c(%rsp)
    000000ab: 	pxor	%xmm4, %xmm4
    000000af: 	movl	$0x0, 0x28(%rsp)
    000000b7: 	movq	%rdi, 0x30(%rsp)
    000000bc: 	movsd	%xmm4, 0x10(%rsp)
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3764:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x18(%rsp), %r14
    000000d5: 	movq	%rdx, %rdi
    000000d8: 	addq	0x8(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%edi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rdi
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rdi,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3754:
    00000100: 	movl	$0x50, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	$0x0, (%rax)
    00000111: 	pxor	%xmm1, %xmm1
    00000115: 	movq	%rax, %rdi
    00000118: 	movq	%rax, %rbp
    0000011b: 	movq	$0x0, 0x8(%rax)
    00000123: 	movups	%xmm1, 0x10(%rax)
    00000127: 	movups	%xmm1, 0x20(%rax)
    0000012b: 	movups	%xmm1, 0x30(%rax)
    0000012f: 	movups	%xmm1, 0x40(%rax)
    00000133: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 307
    00000138: 	movq	(%rsp), %rax
    0000013c: 	movq	%rax, %rbx
    0000013f: 	cmpq	%rax, %r12
    00000142: 	jne	.Ltmp3751 # Offset: 322
    00000144: 	jmp	.Ltmp3752 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3753:
    00000150: 	movsd	-0x8(%rbx), %xmm0
    00000155: 	addq	$0x8, %rax
    00000159: 	movsd	%xmm0, -0x8(%rax)
    0000015e: 	movq	%rax, 0x30(%rbp)
    00000162: 	cmpq	%rbx, %r12
    00000165: 	je	.Ltmp3752 # Offset: 357
.Ltmp3751:
    00000167: 	movq	0x40(%rbp), %rcx
    0000016b: 	movq	0x30(%rbp), %rax
    0000016f: 	movq	%rbx, %rsi
    00000172: 	addq	$0x8, %rbx
    00000176: 	leaq	-0x8(%rcx), %rdx
    0000017a: 	cmpq	%rdx, %rax
    0000017d: 	jne	.Ltmp3753 # Offset: 381
    0000017f: 	movq	%rbp, %rdi
    00000182: 	callq	_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_ # Offset: 386
    00000187: 	cmpq	%rbx, %r12
    0000018a: 	jne	.Ltmp3751 # Offset: 394
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp3752:
    00000190: 	movq	%rbp, (%r14)
    00000193: 	addq	$0x8, %r14
    00000197: 	cmpq	%r15, %r14
    0000019a: 	jne	.Ltmp3754 # Offset: 410
    000001a0: 	callq	clock@PLT # Offset: 416
    000001a5: 	movq	%rax, start_time(%rip)
    000001ac: 	movq	(%rsp), %rax
    000001b0: 	cmpq	%rax, %r12
    000001b3: 	je	.Ltmp3755 # Offset: 435
    000001b5: 	movq	0x18(%rsp), %r14
    000001ba: 	movq	%r13, 0x20(%rsp)
    000001bf: 	movq	%r14, %r13
    000001c2: 	movq	%rax, %r14
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp3758:
    000001c8: 	movq	(%r13), %rbp
    000001cc: 	movq	%r14, %rbx
    000001cf: 	movq	0x20(%rbp), %rdx
    000001d3: 	movq	0x10(%rbp), %rax
    000001d7: 	subq	$0x8, %rdx
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3757:
    000001e0: 	cmpq	%rdx, %rax
    000001e3: 	je	.Ltmp3756 # Offset: 483
    000001e9: 	addq	$0x8, %rax
    000001ed: 	addq	$0x8, %rbx
    000001f1: 	movq	%rax, 0x10(%rbp)
    000001f5: 	cmpq	%r12, %rbx
    000001f8: 	jne	.Ltmp3757 # Offset: 504
.Ltmp3768:
    000001fa: 	addq	$0x8, %r13
    000001fe: 	cmpq	%r13, %r15
    00000201: 	jne	.Ltmp3758 # Offset: 513
    00000203: 	movq	0x20(%rsp), %r13
.Ltmp3755:
    00000208: 	callq	clock@PLT # Offset: 520
    0000020d: 	pxor	%xmm0, %xmm0
    00000211: 	movq	%rax, end_time(%rip)
    00000218: 	subq	start_time(%rip), %rax
    0000021f: 	cvtsi2sd	%rax, %xmm0
    00000224: 	divsd	DATAat0x53788(%rip), %xmm0
    0000022c: 	addsd	0x10(%rsp), %xmm0
    00000232: 	movsd	%xmm0, 0x10(%rsp)
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3763:
    00000240: 	movq	(%r13), %r14
    00000244: 	testq	%r14, %r14
    00000247: 	je	.Ltmp3759 # Offset: 583
    00000249: 	movq	(%r14), %rdi
    0000024c: 	testq	%rdi, %rdi
    0000024f: 	je	.Ltmp3760 # Offset: 591
    00000251: 	movq	0x48(%r14), %rax
    00000255: 	movq	0x28(%r14), %rbx
    00000259: 	leaq	0x8(%rax), %rbp
    0000025d: 	cmpq	%rbx, %rbp
    00000260: 	jbe	.Ltmp3761 # Offset: 608
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3762:
    00000268: 	movq	(%rbx), %rdi
    0000026b: 	movl	$0x200, %esi
    00000270: 	addq	$0x8, %rbx
    00000274: 	callq	_ZdlPvm@PLT # Offset: 628
    00000279: 	cmpq	%rbx, %rbp
    0000027c: 	ja	.Ltmp3762 # Offset: 636
    0000027e: 	movq	(%r14), %rdi
.Ltmp3761:
    00000281: 	movq	0x8(%r14), %rax
    00000285: 	leaq	(,%rax,8), %rsi
    0000028d: 	callq	_ZdlPvm@PLT # Offset: 653
.Ltmp3760:
    00000292: 	movl	$0x50, %esi
    00000297: 	movq	%r14, %rdi
    0000029a: 	callq	_ZdlPvm@PLT # Offset: 666
.Ltmp3759:
    0000029f: 	movq	$0x0, (%r13)
    000002a7: 	addq	$0x8, %r13
    000002ab: 	cmpq	%r13, %r15
    000002ae: 	jne	.Ltmp3763 # Offset: 686
    000002b0: 	movl	0x8(%rsp), %edi
    000002b4: 	movl	iterations(%rip), %eax
    000002ba: 	addl	%edi, 0x28(%rsp)
    000002be: 	movl	0x28(%rsp), %edi
    000002c2: 	cmpl	%edi, %eax
    000002c4: 	jg	.Ltmp3764 # Offset: 708
.Ltmp3771:
    000002ca: 	movq	0x38(%rsp), %rdi
    000002cf: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 719
    000002d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002db: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e9: 	je	.Ltmp3765 # Offset: 745
.Ltmp3770:
    000002ef: 	movq	-0x20(%rax), %rdi
    000002f3: 	movsd	0x10(%rsp), %xmm0
    000002f9: 	callq	_Z13record_resultdPKc # Offset: 761
    000002fe: 	cmpq	$0x0, 0x18(%rsp)
    00000304: 	je	.Ltmp3766 # Offset: 772
    0000030a: 	movq	0x58(%rsp), %rax
    0000030f: 	subq	%fs:0x28, %rax
    00000318: 	jne	.Ltmp3767 # Offset: 792
    0000031e: 	movq	0x50(%rsp), %rsi
    00000323: 	movq	0x18(%rsp), %rdi
    00000328: 	addq	$0x68, %rsp
    0000032c: 	popq	%rbx
    0000032d: 	popq	%rbp
    0000032e: 	subq	%rdi, %rsi
    00000331: 	popq	%r12
    00000333: 	popq	%r13
    00000335: 	popq	%r14
    00000337: 	popq	%r15
    00000339: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 825
    0000033e: 	nop # Size: 2
.Ltmp3756:
    00000340: 	movq	0x18(%rbp), %rdi
    00000344: 	movl	$0x200, %esi
    00000349: 	addq	$0x8, %rbx
    0000034d: 	callq	_ZdlPvm@PLT # Offset: 845
    00000352: 	movq	0x28(%rbp), %rax
    00000356: 	leaq	0x8(%rax), %rdx
    0000035a: 	movq	0x8(%rax), %rax
    0000035e: 	movq	%rdx, 0x28(%rbp)
    00000362: 	leaq	0x200(%rax), %rdx
    00000369: 	movq	%rax, %xmm0
    0000036e: 	movq	%rax, 0x10(%rbp)
    00000372: 	movq	%rdx, %xmm2
    00000377: 	punpcklqdq	%xmm2, %xmm0
    0000037b: 	movups	%xmm0, 0x18(%rbp)
    0000037f: 	cmpq	%rbx, %r12
    00000382: 	je	.Ltmp3768 # Offset: 898
    00000388: 	leaq	0x1f8(%rax), %rdx
    0000038f: 	jmp	.Ltmp3757 # Offset: 911
.Ltmp3766:
    00000394: 	movq	0x58(%rsp), %rax
    00000399: 	subq	%fs:0x28, %rax
    000003a2: 	jne	.Ltmp3767 # Offset: 930
    000003a4: 	addq	$0x68, %rsp
    000003a8: 	popq	%rbx
    000003a9: 	popq	%rbp
    000003aa: 	popq	%r12
    000003ac: 	popq	%r13
    000003ae: 	popq	%r14
    000003b0: 	popq	%r15
    000003b2: 	retq # Offset: 946
.Ltmp3748:
    000003b3: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp3749:
    000003bc: 	movq	$0x0, 0x50(%rsp)
    000003c5: 	pxor	%xmm0, %xmm0
    000003c9: 	movaps	%xmm0, 0x40(%rsp)
    000003ce: 	jmp	.Ltmp3769 # Offset: 974
.Ltmp3765:
    000003d3: 	movq	-0x8(%rdx), %rax
    000003d7: 	addq	$0x200, %rax
    000003dd: 	jmp	.Ltmp3770 # Offset: 989
.Ltmp3750:
    000003e2: 	pxor	%xmm5, %xmm5
    000003e6: 	movsd	%xmm5, 0x10(%rsp)
    000003ec: 	jmp	.Ltmp3771 # Offset: 1004
.Ltmp3767:
    000003f1: 	callq	__stack_chk_fail@PLT # Offset: 1009
    000003f6: 	endbr64
    000003fa: 	movq	%rax, %rbp
    000003fd: 	jmp	.Ltmp3772 # Offset: 1021
    000003ff: 	endbr64
    00000403: 	movq	%rax, %rbx
    00000406: 	movq	%rbp, %rdi
    00000409: 	movl	$0x50, %esi
    0000040e: 	movq	%rbx, %rbp
    00000411: 	callq	_ZdlPvm@PLT # Offset: 1041
.Ltmp3772:
    00000416: 	movq	0x40(%rsp), %rdi
    0000041b: 	movq	0x50(%rsp), %rsi
    00000420: 	subq	%rdi, %rsi
    00000423: 	testq	%rdi, %rdi
    00000426: 	je	.Ltmp3773 # Offset: 1062
    00000428: 	callq	_ZdlPvm@PLT # Offset: 1064
.Ltmp3773:
    0000042d: 	movq	%rbp, %rdi
    00000430: 	callq	_Unwind_Resume@PLT # Offset: 1072
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_popfrontIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_popbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 237
  State       : disassembled
  Address     : 0x26a60
  Size        : 0x44a
  MaxSize     : 0x450
  Offset      : 0x26a60
  Section     : .text
  Orc Section : .local.text._Z12test_popbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0236:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, (%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	movabsq	$0x500000000, %rax
    00000040: 	divq	%rcx
    00000043: 	movq	%rax, 0x8(%rsp)
    00000048: 	cmpq	$0x3e8, %rax
    0000004e: 	ja	.Ltmp3774 # Offset: 78
    00000054: 	cmpq	$0x3, %rax
    00000058: 	ja	.Ltmp3775 # Offset: 88
    0000005e: 	movq	$0x0, 0x50(%rsp)
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	movq	$0x4, 0x8(%rsp)
    00000074: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp3795:
    00000079: 	movq	0x8(%rsp), %rbx
    0000007e: 	leaq	0x40(%rsp), %rdi
    00000083: 	movq	%rbx, %rsi
    00000086: 	callq	_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 134
    0000008b: 	movq	0x40(%rsp), %rcx
    00000090: 	movl	iterations(%rip), %eax
    00000096: 	movq	%rcx, 0x18(%rsp)
    0000009b: 	testl	%eax, %eax
    0000009d: 	jle	.Ltmp3776 # Offset: 157
    000000a3: 	leaq	0x8(%rcx), %rsi
    000000a7: 	movl	%ebx, 0x2c(%rsp)
    000000ab: 	pxor	%xmm5, %xmm5
    000000af: 	movl	$0x0, 0x28(%rsp)
    000000b7: 	movq	%rsi, 0x30(%rsp)
    000000bc: 	movsd	%xmm5, 0x10(%rsp)
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3790:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x18(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x8(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rsi
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rsi,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3780:
    00000100: 	movl	$0x50, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	$0x0, (%rax)
    00000111: 	pxor	%xmm1, %xmm1
    00000115: 	movq	%rax, %rdi
    00000118: 	movq	%rax, %rbp
    0000011b: 	movq	$0x0, 0x8(%rax)
    00000123: 	movups	%xmm1, 0x10(%rax)
    00000127: 	movups	%xmm1, 0x20(%rax)
    0000012b: 	movups	%xmm1, 0x30(%rax)
    0000012f: 	movups	%xmm1, 0x40(%rax)
    00000133: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 307
    00000138: 	movq	(%rsp), %rax
    0000013c: 	movq	%rax, %rbx
    0000013f: 	cmpq	%rax, %r12
    00000142: 	jne	.Ltmp3777 # Offset: 322
    00000144: 	jmp	.Ltmp3778 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3779:
    00000150: 	movsd	-0x8(%rbx), %xmm0
    00000155: 	addq	$0x8, %rax
    00000159: 	movsd	%xmm0, -0x8(%rax)
    0000015e: 	movq	%rax, 0x30(%rbp)
    00000162: 	cmpq	%rbx, %r12
    00000165: 	je	.Ltmp3778 # Offset: 357
.Ltmp3777:
    00000167: 	movq	0x40(%rbp), %rcx
    0000016b: 	movq	0x30(%rbp), %rax
    0000016f: 	movq	%rbx, %rsi
    00000172: 	addq	$0x8, %rbx
    00000176: 	leaq	-0x8(%rcx), %rdx
    0000017a: 	cmpq	%rdx, %rax
    0000017d: 	jne	.Ltmp3779 # Offset: 381
    0000017f: 	movq	%rbp, %rdi
    00000182: 	callq	_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_ # Offset: 386
    00000187: 	cmpq	%rbx, %r12
    0000018a: 	jne	.Ltmp3777 # Offset: 394
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp3778:
    00000190: 	movq	%rbp, (%r14)
    00000193: 	addq	$0x8, %r14
    00000197: 	cmpq	%r14, %r15
    0000019a: 	jne	.Ltmp3780 # Offset: 410
    000001a0: 	callq	clock@PLT # Offset: 416
    000001a5: 	movq	(%rsp), %rbp
    000001a9: 	movq	%rax, start_time(%rip)
    000001b0: 	cmpq	%rbp, %r12
    000001b3: 	je	.Ltmp3781 # Offset: 435
    000001b5: 	movq	0x18(%rsp), %r14
    000001ba: 	movq	%r13, 0x20(%rsp)
    000001bf: 	movq	%r14, %r13
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3784:
    000001c8: 	movq	(%r13), %r14
    000001cc: 	movq	%rbp, %rbx
    000001cf: 	movq	0x30(%r14), %rax
    000001d3: 	movq	0x38(%r14), %rdi
    000001d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3783:
    000001e0: 	cmpq	%rax, %rdi
    000001e3: 	je	.Ltmp3782 # Offset: 483
    000001e9: 	subq	$0x8, %rax
    000001ed: 	addq	$0x8, %rbx
    000001f1: 	movq	%rax, 0x30(%r14)
    000001f5: 	cmpq	%rbx, %r12
    000001f8: 	jne	.Ltmp3783 # Offset: 504
    000001fa: 	addq	$0x8, %r13
    000001fe: 	cmpq	%r13, %r15
    00000201: 	jne	.Ltmp3784 # Offset: 513
.Ltmp3794:
    00000203: 	movq	0x20(%rsp), %r13
.Ltmp3781:
    00000208: 	callq	clock@PLT # Offset: 520
    0000020d: 	pxor	%xmm0, %xmm0
    00000211: 	movq	%rax, end_time(%rip)
    00000218: 	subq	start_time(%rip), %rax
    0000021f: 	cvtsi2sd	%rax, %xmm0
    00000224: 	divsd	DATAat0x53788(%rip), %xmm0
    0000022c: 	addsd	0x10(%rsp), %xmm0
    00000232: 	movsd	%xmm0, 0x10(%rsp)
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3789:
    00000240: 	movq	(%r13), %r14
    00000244: 	testq	%r14, %r14
    00000247: 	je	.Ltmp3785 # Offset: 583
    00000249: 	movq	(%r14), %rdi
    0000024c: 	testq	%rdi, %rdi
    0000024f: 	je	.Ltmp3786 # Offset: 591
    00000251: 	movq	0x48(%r14), %rax
    00000255: 	movq	0x28(%r14), %rbx
    00000259: 	leaq	0x8(%rax), %rbp
    0000025d: 	cmpq	%rbx, %rbp
    00000260: 	jbe	.Ltmp3787 # Offset: 608
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3788:
    00000268: 	movq	(%rbx), %rdi
    0000026b: 	movl	$0x200, %esi
    00000270: 	addq	$0x8, %rbx
    00000274: 	callq	_ZdlPvm@PLT # Offset: 628
    00000279: 	cmpq	%rbx, %rbp
    0000027c: 	ja	.Ltmp3788 # Offset: 636
    0000027e: 	movq	(%r14), %rdi
.Ltmp3787:
    00000281: 	movq	0x8(%r14), %rax
    00000285: 	leaq	(,%rax,8), %rsi
    0000028d: 	callq	_ZdlPvm@PLT # Offset: 653
.Ltmp3786:
    00000292: 	movl	$0x50, %esi
    00000297: 	movq	%r14, %rdi
    0000029a: 	callq	_ZdlPvm@PLT # Offset: 666
.Ltmp3785:
    0000029f: 	movq	$0x0, (%r13)
    000002a7: 	addq	$0x8, %r13
    000002ab: 	cmpq	%r13, %r15
    000002ae: 	jne	.Ltmp3789 # Offset: 686
    000002b0: 	movl	0x8(%rsp), %esi
    000002b4: 	movl	iterations(%rip), %eax
    000002ba: 	addl	%esi, 0x28(%rsp)
    000002be: 	movl	0x28(%rsp), %esi
    000002c2: 	cmpl	%esi, %eax
    000002c4: 	jg	.Ltmp3790 # Offset: 708
.Ltmp3797:
    000002ca: 	movq	0x38(%rsp), %rdi
    000002cf: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 719
    000002d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002db: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e9: 	je	.Ltmp3791 # Offset: 745
.Ltmp3796:
    000002ef: 	movq	-0x20(%rax), %rdi
    000002f3: 	movsd	0x10(%rsp), %xmm0
    000002f9: 	callq	_Z13record_resultdPKc # Offset: 761
    000002fe: 	cmpq	$0x0, 0x18(%rsp)
    00000304: 	je	.Ltmp3792 # Offset: 772
    0000030a: 	movq	0x58(%rsp), %rax
    0000030f: 	subq	%fs:0x28, %rax
    00000318: 	jne	.Ltmp3793 # Offset: 792
    0000031e: 	movq	0x50(%rsp), %rsi
    00000323: 	movq	0x18(%rsp), %rdi
    00000328: 	addq	$0x68, %rsp
    0000032c: 	popq	%rbx
    0000032d: 	popq	%rbp
    0000032e: 	subq	%rdi, %rsi
    00000331: 	popq	%r12
    00000333: 	popq	%r13
    00000335: 	popq	%r14
    00000337: 	popq	%r15
    00000339: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 825
    0000033e: 	nop # Size: 2
.Ltmp3782:
    00000340: 	movl	$0x200, %esi
    00000345: 	addq	$0x8, %rbx
    00000349: 	callq	_ZdlPvm@PLT # Offset: 841
    0000034e: 	movq	0x48(%r14), %rdx
    00000352: 	movq	-0x8(%rdx), %rdi
    00000356: 	subq	$0x8, %rdx
    0000035a: 	movq	%rdx, %xmm3
    0000035f: 	leaq	0x1f8(%rdi), %rax
    00000366: 	movq	%rdi, %xmm2
    0000036b: 	leaq	0x200(%rdi), %rcx
    00000372: 	movq	%rax, %xmm0
    00000377: 	punpcklqdq	%xmm2, %xmm0
    0000037b: 	movups	%xmm0, 0x30(%r14)
    00000380: 	movq	%rcx, %xmm0
    00000385: 	punpcklqdq	%xmm3, %xmm0
    00000389: 	movups	%xmm0, 0x40(%r14)
    0000038e: 	cmpq	%rbx, %r12
    00000391: 	jne	.Ltmp3783 # Offset: 913
    00000397: 	addq	$0x8, %r13
    0000039b: 	cmpq	%r13, %r15
    0000039e: 	jne	.Ltmp3784 # Offset: 926
    000003a4: 	jmp	.Ltmp3794 # Offset: 932
.Ltmp3792:
    000003a9: 	movq	0x58(%rsp), %rax
    000003ae: 	subq	%fs:0x28, %rax
    000003b7: 	jne	.Ltmp3793 # Offset: 951
    000003b9: 	addq	$0x68, %rsp
    000003bd: 	popq	%rbx
    000003be: 	popq	%rbp
    000003bf: 	popq	%r12
    000003c1: 	popq	%r13
    000003c3: 	popq	%r14
    000003c5: 	popq	%r15
    000003c7: 	retq # Offset: 967
.Ltmp3774:
    000003c8: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp3775:
    000003d1: 	movq	$0x0, 0x50(%rsp)
    000003da: 	pxor	%xmm0, %xmm0
    000003de: 	movaps	%xmm0, 0x40(%rsp)
    000003e3: 	jmp	.Ltmp3795 # Offset: 995
.Ltmp3791:
    000003e8: 	movq	-0x8(%rdx), %rax
    000003ec: 	addq	$0x200, %rax
    000003f2: 	jmp	.Ltmp3796 # Offset: 1010
.Ltmp3776:
    000003f7: 	pxor	%xmm6, %xmm6
    000003fb: 	movsd	%xmm6, 0x10(%rsp)
    00000401: 	jmp	.Ltmp3797 # Offset: 1025
.Ltmp3793:
    00000406: 	callq	__stack_chk_fail@PLT # Offset: 1030
    0000040b: 	endbr64
    0000040f: 	movq	%rax, %rbp
    00000412: 	jmp	.Ltmp3798 # Offset: 1042
    00000414: 	endbr64
    00000418: 	movq	%rax, %rbx
    0000041b: 	movq	%rbp, %rdi
    0000041e: 	movl	$0x50, %esi
    00000423: 	movq	%rbx, %rbp
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp3798:
    0000042b: 	movq	0x40(%rsp), %rdi
    00000430: 	movq	0x50(%rsp), %rsi
    00000435: 	subq	%rdi, %rsi
    00000438: 	testq	%rdi, %rdi
    0000043b: 	je	.Ltmp3799 # Offset: 1083
    0000043d: 	callq	_ZdlPvm@PLT # Offset: 1085
.Ltmp3799:
    00000442: 	movq	%rbp, %rdi
    00000445: 	callq	_Unwind_Resume@PLT # Offset: 1093
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_popbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm" after disassembly {
  Number      : 238
  State       : disassembled
  Address     : 0x26eb0
  Size        : 0x17a
  MaxSize     : 0x180
  Offset      : 0x26eb0
  Section     : .text
  Orc Section : .local.text._ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0237:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	pushq	%r14
    00000009: 	shrq	$0x6, %rax
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rsi, %r13
    00000012: 	pushq	%r12
    00000014: 	movq	%rdi, %r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	leaq	0x1(%rax), %rbx
    0000001d: 	addq	$0x3, %rax
    00000021: 	cmpq	$0x8, %rax
    00000025: 	ja	.Ltmp3800 # Offset: 37
    0000002b: 	movl	$0x8, %eax
    00000030: 	movl	$0x40, %edi
.Ltmp3803:
    00000035: 	movq	%rax, 0x8(%r12)
    0000003a: 	callq	_Znwm@PLT # Offset: 58
    0000003f: 	movq	0x8(%r12), %rdx
    00000044: 	movq	%rax, (%r12)
    00000048: 	subq	%rbx, %rdx
    0000004b: 	shrq	%rdx
    0000004e: 	leaq	(%rax,%rdx,8), %r14
    00000052: 	leaq	(%r14,%rbx,8), %rbp
    00000056: 	cmpq	%rbp, %r14
    00000059: 	jae	.Ltmp3801 # Offset: 89
    0000005b: 	movq	%r14, %rbx
    0000005e: 	nop # Size: 2
.Ltmp3802:
    00000060: 	movl	$0x200, %edi
    00000065: 	callq	_Znwm@PLT # Offset: 101
    0000006a: 	movq	%rax, (%rbx)
    0000006d: 	addq	$0x8, %rbx
    00000071: 	cmpq	%rbx, %rbp
    00000074: 	ja	.Ltmp3802 # Offset: 116
.Ltmp3801:
    00000076: 	movq	(%r14), %xmm0
    0000007b: 	movq	(%r14), %rcx
    0000007e: 	andl	$0x3f, %r13d
    00000082: 	subq	$0x8, %rbp
    00000086: 	movq	(%rbp), %rax
    0000008a: 	movq	%r14, %xmm1
    0000008f: 	movq	%rbp, %xmm3
    00000094: 	popq	%rbx
    00000095: 	punpcklqdq	%xmm0, %xmm0
    00000099: 	addq	$0x200, %rcx
    000000a0: 	popq	%rbp
    000000a1: 	movups	%xmm0, 0x10(%r12)
    000000a7: 	movq	%rcx, %xmm0
    000000ac: 	leaq	(%rax,%r13,8), %rcx
    000000b0: 	movq	%rax, %xmm2
    000000b5: 	punpcklqdq	%xmm1, %xmm0
    000000b9: 	addq	$0x200, %rax
    000000bf: 	movups	%xmm0, 0x20(%r12)
    000000c5: 	movq	%rcx, %xmm0
    000000ca: 	punpcklqdq	%xmm2, %xmm0
    000000ce: 	movups	%xmm0, 0x30(%r12)
    000000d4: 	movq	%rax, %xmm0
    000000d9: 	punpcklqdq	%xmm3, %xmm0
    000000dd: 	movups	%xmm0, 0x40(%r12)
    000000e3: 	popq	%r12
    000000e5: 	popq	%r13
    000000e7: 	popq	%r14
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3800:
    000000f0: 	leaq	(,%rax,8), %rdi
    000000f8: 	jmp	.Ltmp3803 # Offset: 248
    000000fd: 	endbr64
    00000101: 	movq	%rax, %rdi
    00000104: 	callq	__cxa_begin_catch@PLT # Offset: 260
.Ltmp3805:
    00000109: 	cmpq	%r14, %rbx
    0000010c: 	jbe	.Ltmp3804 # Offset: 268
    0000010e: 	movq	(%r14), %rdi
    00000111: 	movl	$0x200, %esi
    00000116: 	addq	$0x8, %r14
    0000011a: 	callq	_ZdlPvm@PLT # Offset: 282
    0000011f: 	jmp	.Ltmp3805 # Offset: 287
.Ltmp3804:
    00000121: 	callq	__cxa_rethrow@PLT # Offset: 289
    00000126: 	endbr64
    0000012a: 	movq	%rax, %rbp
    0000012d: 	callq	__cxa_end_catch@PLT # Offset: 301
    00000132: 	movq	%rbp, %rdi
    00000135: 	callq	__cxa_begin_catch@PLT # Offset: 309
    0000013a: 	movq	0x8(%r12), %rax
    0000013f: 	movq	(%r12), %rdi
    00000143: 	leaq	(,%rax,8), %rsi
    0000014b: 	callq	_ZdlPvm@PLT # Offset: 331
    00000150: 	movq	$0x0, (%r12)
    00000158: 	movq	$0x0, 0x8(%r12)
    00000161: 	callq	__cxa_rethrow@PLT # Offset: 353
    00000166: 	endbr64
    0000016a: 	movq	%rax, %rbp
    0000016d: 	callq	__cxa_end_catch@PLT # Offset: 365
    00000172: 	movq	%rbp, %rdi
    00000175: 	callq	_Unwind_Resume@PLT # Offset: 373
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm"

Binary Function "_ZN27SingleLinkListPoolAllocatorIdEC2Ev(*2)" after disassembly {
  All names   : _ZN27SingleLinkListPoolAllocatorIdEC2Ev
                _ZN27SingleLinkListPoolAllocatorIdEC1Ev
  Number      : 239
  State       : disassembled
  Address     : 0x27030
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x27030
  Section     : .text
  Orc Section : .local.text._ZN27SingleLinkListPoolAllocatorIdEC2Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0238:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	xorl	%esi, %esi
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	$0x0, (%rdi)
    00000018: 	movq	$0x0, 0x8(%rdi)
    00000020: 	movups	%xmm0, 0x10(%rdi)
    00000024: 	movups	%xmm0, 0x20(%rdi)
    00000028: 	movups	%xmm0, 0x30(%rdi)
    0000002c: 	movups	%xmm0, 0x40(%rdi)
    00000030: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 48
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	movl	$0x40, %edi
    0000003e: 	movq	$0x0, 0x50(%rbp)
    00000046: 	movq	$0x8, 0x58(%rbp)
    0000004e: 	movups	%xmm0, 0x60(%rbp)
    00000052: 	movups	%xmm0, 0x70(%rbp)
    00000056: 	movups	%xmm0, 0x80(%rbp)
    0000005d: 	movups	%xmm0, 0x90(%rbp)
    00000064: 	callq	_Znwm@PLT # Offset: 100
    00000069: 	movq	0x58(%rbp), %rdx
    0000006d: 	movq	%rax, 0x50(%rbp)
    00000071: 	movl	$0x1f8, %edi
    00000076: 	leaq	-0x4(,%rdx,4), %rdx
    0000007e: 	andq	$-0x8, %rdx
    00000082: 	leaq	(%rax,%rdx), %rbx
    00000086: 	callq	_Znwm@PLT # Offset: 134
    0000008b: 	movq	%rax, (%rbx)
    0000008e: 	movq	%rax, %xmm1
    00000093: 	addq	$0x1f8, %rax
    00000099: 	movq	%rbx, %xmm2
    0000009e: 	movq	%rax, %xmm0
    000000a3: 	punpcklqdq	%xmm1, %xmm1
    000000a7: 	popq	%rbx
    000000a8: 	punpcklqdq	%xmm2, %xmm0
    000000ac: 	movups	%xmm1, 0x60(%rbp)
    000000b0: 	movups	%xmm0, 0x70(%rbp)
    000000b4: 	movups	%xmm1, 0x80(%rbp)
    000000bb: 	movups	%xmm0, 0x90(%rbp)
    000000c2: 	popq	%rbp
    000000c3: 	popq	%r12
    000000c5: 	retq # Offset: 197
    000000c6: 	endbr64
    000000ca: 	movq	%rax, %rbx
    000000cd: 	jmp	.Ltmp3806 # Offset: 205
    000000cf: 	endbr64
    000000d3: 	movq	%rax, %rdi
    000000d6: 	jmp	.Ltmp3807 # Offset: 214
.Ltmp3808:
    000000d8: 	callq	__cxa_end_catch@PLT # Offset: 216
.Ltmp3806:
    000000dd: 	movq	%rbp, %rdi
    000000e0: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 224
    000000e5: 	movq	%rbx, %rdi
    000000e8: 	callq	_Unwind_Resume@PLT # Offset: 232
.Ltmp3807:
    000000ed: 	callq	__cxa_begin_catch@PLT # Offset: 237
    000000f2: 	callq	__cxa_rethrow@PLT # Offset: 242
    000000f7: 	endbr64
    000000fb: 	movq	%rax, %r12
    000000fe: 	callq	__cxa_end_catch@PLT # Offset: 254
    00000103: 	movq	%r12, %rdi
    00000106: 	callq	__cxa_begin_catch@PLT # Offset: 262
    0000010b: 	movq	0x58(%rbp), %rax
    0000010f: 	movq	0x50(%rbp), %rdi
    00000113: 	leaq	(,%rax,8), %rsi
    0000011b: 	callq	_ZdlPvm@PLT # Offset: 283
    00000120: 	movq	$0x0, 0x50(%rbp)
    00000128: 	movq	$0x0, 0x58(%rbp)
    00000130: 	callq	__cxa_rethrow@PLT # Offset: 304
    00000135: 	endbr64
    00000139: 	movq	%rax, %rbx
    0000013c: 	jmp	.Ltmp3808 # Offset: 316
DWARF CFI Instructions:
    <empty>
End of Function "_ZN27SingleLinkListPoolAllocatorIdEC2Ev(*2)"

Binary Function "_ZN27DoubleLinkListPoolAllocatorIdEC2Ev(*2)" after disassembly {
  All names   : _ZN27DoubleLinkListPoolAllocatorIdEC2Ev
                _ZN27DoubleLinkListPoolAllocatorIdEC1Ev
  Number      : 240
  State       : disassembled
  Address     : 0x27170
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x27170
  Section     : .text
  Orc Section : .local.text._ZN27DoubleLinkListPoolAllocatorIdEC2Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0239:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	xorl	%esi, %esi
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	$0x0, (%rdi)
    00000018: 	movq	$0x0, 0x8(%rdi)
    00000020: 	movups	%xmm0, 0x10(%rdi)
    00000024: 	movups	%xmm0, 0x20(%rdi)
    00000028: 	movups	%xmm0, 0x30(%rdi)
    0000002c: 	movups	%xmm0, 0x40(%rdi)
    00000030: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 48
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	movl	$0x40, %edi
    0000003e: 	movq	$0x0, 0x50(%rbp)
    00000046: 	movq	$0x8, 0x58(%rbp)
    0000004e: 	movups	%xmm0, 0x60(%rbp)
    00000052: 	movups	%xmm0, 0x70(%rbp)
    00000056: 	movups	%xmm0, 0x80(%rbp)
    0000005d: 	movups	%xmm0, 0x90(%rbp)
    00000064: 	callq	_Znwm@PLT # Offset: 100
    00000069: 	movq	0x58(%rbp), %rdx
    0000006d: 	movq	%rax, 0x50(%rbp)
    00000071: 	movl	$0x200, %edi
    00000076: 	leaq	-0x4(,%rdx,4), %rdx
    0000007e: 	andq	$-0x8, %rdx
    00000082: 	leaq	(%rax,%rdx), %rbx
    00000086: 	callq	_Znwm@PLT # Offset: 134
    0000008b: 	movq	%rax, (%rbx)
    0000008e: 	movq	%rax, %xmm1
    00000093: 	addq	$0x200, %rax
    00000099: 	movq	%rbx, %xmm2
    0000009e: 	movq	%rax, %xmm0
    000000a3: 	punpcklqdq	%xmm1, %xmm1
    000000a7: 	popq	%rbx
    000000a8: 	punpcklqdq	%xmm2, %xmm0
    000000ac: 	movups	%xmm1, 0x60(%rbp)
    000000b0: 	movups	%xmm0, 0x70(%rbp)
    000000b4: 	movups	%xmm1, 0x80(%rbp)
    000000bb: 	movups	%xmm0, 0x90(%rbp)
    000000c2: 	popq	%rbp
    000000c3: 	popq	%r12
    000000c5: 	retq # Offset: 197
    000000c6: 	endbr64
    000000ca: 	movq	%rax, %rbx
    000000cd: 	jmp	.Ltmp3809 # Offset: 205
    000000cf: 	endbr64
    000000d3: 	movq	%rax, %rdi
    000000d6: 	jmp	.Ltmp3810 # Offset: 214
.Ltmp3811:
    000000d8: 	callq	__cxa_end_catch@PLT # Offset: 216
.Ltmp3809:
    000000dd: 	movq	%rbp, %rdi
    000000e0: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 224
    000000e5: 	movq	%rbx, %rdi
    000000e8: 	callq	_Unwind_Resume@PLT # Offset: 232
.Ltmp3810:
    000000ed: 	callq	__cxa_begin_catch@PLT # Offset: 237
    000000f2: 	callq	__cxa_rethrow@PLT # Offset: 242
    000000f7: 	endbr64
    000000fb: 	movq	%rax, %r12
    000000fe: 	callq	__cxa_end_catch@PLT # Offset: 254
    00000103: 	movq	%r12, %rdi
    00000106: 	callq	__cxa_begin_catch@PLT # Offset: 262
    0000010b: 	movq	0x58(%rbp), %rax
    0000010f: 	movq	0x50(%rbp), %rdi
    00000113: 	leaq	(,%rax,8), %rsi
    0000011b: 	callq	_ZdlPvm@PLT # Offset: 283
    00000120: 	movq	$0x0, 0x50(%rbp)
    00000128: 	movq	$0x0, 0x58(%rbp)
    00000130: 	callq	__cxa_rethrow@PLT # Offset: 304
    00000135: 	endbr64
    00000139: 	movq	%rax, %rbx
    0000013c: 	jmp	.Ltmp3811 # Offset: 316
DWARF CFI Instructions:
    <empty>
End of Function "_ZN27DoubleLinkListPoolAllocatorIdEC2Ev(*2)"

Binary Function "_ZN20HashMapPoolAllocatorIddEC2Ev(*2)" after disassembly {
  All names   : _ZN20HashMapPoolAllocatorIddEC2Ev
                _ZN20HashMapPoolAllocatorIddEC1Ev
  Number      : 241
  State       : disassembled
  Address     : 0x272b0
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x272b0
  Section     : .text
  Orc Section : .local.text._ZN20HashMapPoolAllocatorIddEC2Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0240:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	xorl	%esi, %esi
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	$0x0, (%rdi)
    00000018: 	movq	$0x0, 0x8(%rdi)
    00000020: 	movups	%xmm0, 0x10(%rdi)
    00000024: 	movups	%xmm0, 0x20(%rdi)
    00000028: 	movups	%xmm0, 0x30(%rdi)
    0000002c: 	movups	%xmm0, 0x40(%rdi)
    00000030: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 48
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	movl	$0x40, %edi
    0000003e: 	movq	$0x0, 0x50(%rbp)
    00000046: 	movq	$0x8, 0x58(%rbp)
    0000004e: 	movups	%xmm0, 0x60(%rbp)
    00000052: 	movups	%xmm0, 0x70(%rbp)
    00000056: 	movups	%xmm0, 0x80(%rbp)
    0000005d: 	movups	%xmm0, 0x90(%rbp)
    00000064: 	callq	_Znwm@PLT # Offset: 100
    00000069: 	movq	0x58(%rbp), %rdx
    0000006d: 	movq	%rax, 0x50(%rbp)
    00000071: 	movl	$0x200, %edi
    00000076: 	leaq	-0x4(,%rdx,4), %rdx
    0000007e: 	andq	$-0x8, %rdx
    00000082: 	leaq	(%rax,%rdx), %rbx
    00000086: 	callq	_Znwm@PLT # Offset: 134
    0000008b: 	movq	%rax, (%rbx)
    0000008e: 	movq	%rax, %xmm1
    00000093: 	addq	$0x200, %rax
    00000099: 	movq	%rbx, %xmm2
    0000009e: 	movq	%rax, %xmm0
    000000a3: 	punpcklqdq	%xmm1, %xmm1
    000000a7: 	popq	%rbx
    000000a8: 	punpcklqdq	%xmm2, %xmm0
    000000ac: 	movups	%xmm1, 0x60(%rbp)
    000000b0: 	movups	%xmm0, 0x70(%rbp)
    000000b4: 	movups	%xmm1, 0x80(%rbp)
    000000bb: 	movups	%xmm0, 0x90(%rbp)
    000000c2: 	popq	%rbp
    000000c3: 	popq	%r12
    000000c5: 	retq # Offset: 197
    000000c6: 	endbr64
    000000ca: 	movq	%rax, %rbx
    000000cd: 	jmp	.Ltmp3812 # Offset: 205
    000000cf: 	endbr64
    000000d3: 	movq	%rax, %rdi
    000000d6: 	jmp	.Ltmp3813 # Offset: 214
.Ltmp3814:
    000000d8: 	callq	__cxa_end_catch@PLT # Offset: 216
.Ltmp3812:
    000000dd: 	movq	%rbp, %rdi
    000000e0: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 224
    000000e5: 	movq	%rbx, %rdi
    000000e8: 	callq	_Unwind_Resume@PLT # Offset: 232
.Ltmp3813:
    000000ed: 	callq	__cxa_begin_catch@PLT # Offset: 237
    000000f2: 	callq	__cxa_rethrow@PLT # Offset: 242
    000000f7: 	endbr64
    000000fb: 	movq	%rax, %r12
    000000fe: 	callq	__cxa_end_catch@PLT # Offset: 254
    00000103: 	movq	%r12, %rdi
    00000106: 	callq	__cxa_begin_catch@PLT # Offset: 262
    0000010b: 	movq	0x58(%rbp), %rax
    0000010f: 	movq	0x50(%rbp), %rdi
    00000113: 	leaq	(,%rax,8), %rsi
    0000011b: 	callq	_ZdlPvm@PLT # Offset: 283
    00000120: 	movq	$0x0, 0x50(%rbp)
    00000128: 	movq	$0x0, 0x58(%rbp)
    00000130: 	callq	__cxa_rethrow@PLT # Offset: 304
    00000135: 	endbr64
    00000139: 	movq	%rax, %rbx
    0000013c: 	jmp	.Ltmp3814 # Offset: 316
DWARF CFI Instructions:
    <empty>
End of Function "_ZN20HashMapPoolAllocatorIddEC2Ev(*2)"

Binary Function "_ZNSt5dequeIdSaIdEE23_M_new_elements_at_backEm" after disassembly {
  Number      : 242
  State       : disassembled
  Address     : 0x273f0
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0x273f0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEE23_M_new_elements_at_backEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0241:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x8, %rsp
    0000000e: 	movq	0x48(%rdi), %rdx
    00000012: 	movq	0x30(%rdi), %rcx
    00000016: 	movq	%rdx, %rax
    00000019: 	subq	0x28(%rdi), %rax
    0000001d: 	sarq	$0x3, %rax
    00000021: 	cmpq	$0x1, %rdx
    00000025: 	adcq	$-0x1, %rax
    00000029: 	subq	0x38(%rdi), %rcx
    0000002d: 	sarq	$0x3, %rcx
    00000031: 	shlq	$0x6, %rax
    00000035: 	addq	%rcx, %rax
    00000038: 	movq	0x20(%rdi), %rcx
    0000003c: 	subq	0x10(%rdi), %rcx
    00000040: 	sarq	$0x3, %rcx
    00000044: 	addq	%rcx, %rax
    00000047: 	movabsq	$0xfffffffffffffff, %rcx
    00000051: 	subq	%rax, %rcx
    00000054: 	cmpq	%rsi, %rcx
    00000057: 	jb	.Ltmp3815 # Offset: 87
    00000059: 	movq	%rsi, %r12
    0000005c: 	movq	0x8(%rdi), %rax
    00000060: 	subq	(%rdi), %rdx
    00000063: 	movq	%rdi, %rbp
    00000066: 	addq	$0x3f, %r12
    0000006a: 	sarq	$0x3, %rdx
    0000006e: 	shrq	$0x6, %r12
    00000072: 	subq	%rdx, %rax
    00000075: 	leaq	0x1(%r12), %rcx
    0000007a: 	cmpq	%rax, %rcx
    0000007d: 	ja	.Ltmp3816 # Offset: 125
.Ltmp3820:
    0000007f: 	testq	%r12, %r12
    00000082: 	je	.Ltmp3817 # Offset: 130
    00000084: 	movl	$0x1, %ebx
    00000089: 	jmp	.Ltmp3818 # Offset: 137
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3819:
    00000090: 	movq	%rax, %rbx
.Ltmp3818:
    00000093: 	movq	0x48(%rbp), %rax
    00000097: 	movl	$0x200, %edi
    0000009c: 	leaq	(%rax,%rbx,8), %r13
    000000a0: 	callq	_Znwm@PLT # Offset: 160
    000000a5: 	movq	%rax, (%r13)
    000000a9: 	leaq	0x1(%rbx), %rax
    000000ad: 	cmpq	%rbx, %r12
    000000b0: 	jne	.Ltmp3819 # Offset: 176
.Ltmp3817:
    000000b2: 	addq	$0x8, %rsp
    000000b6: 	popq	%rbx
    000000b7: 	popq	%rbp
    000000b8: 	popq	%r12
    000000ba: 	popq	%r13
    000000bc: 	retq # Offset: 188
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp3816:
    000000c0: 	xorl	%edx, %edx
    000000c2: 	movq	%r12, %rsi
    000000c5: 	callq	_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEmb # Offset: 197
    000000ca: 	jmp	.Ltmp3820 # Offset: 202
.Ltmp3815:
    000000cc: 	leaq	DATAat0x52370(%rip), %rdi
    000000d3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 211
    000000d8: 	endbr64
    000000dc: 	movq	%rax, %rdi
    000000df: 	callq	__cxa_begin_catch@PLT # Offset: 223
    000000e4: 	movl	$0x1, %r12d
.Ltmp3822:
    000000ea: 	cmpq	%rbx, %r12
    000000ed: 	je	.Ltmp3821 # Offset: 237
    000000ef: 	movq	0x48(%rbp), %rax
    000000f3: 	movl	$0x200, %esi
    000000f8: 	movq	(%rax,%r12,8), %rdi
    000000fc: 	addq	$0x1, %r12
    00000100: 	callq	_ZdlPvm@PLT # Offset: 256
    00000105: 	jmp	.Ltmp3822 # Offset: 261
.Ltmp3821:
    00000107: 	callq	__cxa_rethrow@PLT # Offset: 263
    0000010c: 	endbr64
    00000110: 	movq	%rax, %rbp
    00000113: 	callq	__cxa_end_catch@PLT # Offset: 275
    00000118: 	movq	%rbp, %rdi
    0000011b: 	callq	_Unwind_Resume@PLT # Offset: 283
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEE23_M_new_elements_at_backEm"

Binary Function "_Z9test_copyIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 243
  State       : disassembled
  Address     : 0x27510
  Size        : 0x3c7
  MaxSize     : 0x3d0
  Offset      : 0x27510
  Section     : .text
  Orc Section : .local.text._Z9test_copyIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0242:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0x50, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x48, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x38(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	_Znwm@PLT # Offset: 48
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	movq	$0x0, (%rax)
    00000040: 	movq	%rax, %rdi
    00000043: 	movq	%rax, %rbp
    00000046: 	movq	$0x0, 0x8(%rax)
    0000004e: 	movups	%xmm0, 0x10(%rax)
    00000052: 	movups	%xmm0, 0x20(%rax)
    00000056: 	movups	%xmm0, 0x30(%rax)
    0000005a: 	movups	%xmm0, 0x40(%rax)
    0000005e: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 94
    00000063: 	movq	0x48(%rbp), %r15
    00000067: 	movq	%rbx, %rsi
    0000006a: 	movq	0x30(%rbp), %rdx
    0000006e: 	subq	%r12, %rsi
    00000071: 	movq	0x10(%rbp), %rcx
    00000075: 	movq	0x20(%rbp), %xmm1
    0000007a: 	movq	%r15, %rax
    0000007d: 	subq	0x28(%rbp), %rax
    00000081: 	sarq	$0x3, %rsi
    00000085: 	sarq	$0x3, %rax
    00000089: 	cmpq	$0x1, %r15
    0000008d: 	movhps	0x28(%rbp), %xmm1
    00000091: 	adcq	$-0x1, %rax
    00000095: 	subq	0x38(%rbp), %rdx
    00000099: 	sarq	$0x3, %rdx
    0000009d: 	shlq	$0x6, %rax
    000000a1: 	addq	%rdx, %rax
    000000a4: 	movq	0x20(%rbp), %rdx
    000000a8: 	subq	%rcx, %rdx
    000000ab: 	sarq	$0x3, %rdx
    000000af: 	addq	%rdx, %rax
    000000b2: 	cmpq	%rax, %rsi
    000000b5: 	ja	.Ltmp3823 # Offset: 181
    000000bb: 	jb	.Ltmp3824 # Offset: 187
.Ltmp3845:
    000000c1: 	cmpq	%r12, %rbx
    000000c4: 	je	.Ltmp3825 # Offset: 196
.Ltmp3844:
    000000ca: 	movq	%rbx, %rdx
    000000cd: 	movq	%r12, %rax
    000000d0: 	subq	%r12, %rdx
    000000d3: 	leaq	-0x8(%rdx), %rcx
    000000d7: 	shrq	$0x3, %rcx
    000000db: 	addq	$0x1, %rcx
    000000df: 	cmpq	$0x8, %rdx
    000000e3: 	je	.Ltmp3826 # Offset: 227
    000000e9: 	movq	%rcx, %rdx
    000000ec: 	pxor	%xmm2, %xmm2
    000000f0: 	shrq	%rdx
    000000f3: 	movsd	%xmm2, 0x8(%rsp)
    000000f9: 	movapd	%xmm2, %xmm1
    000000fd: 	shlq	$0x4, %rdx
    00000101: 	addq	%r12, %rdx
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp3827:
    00000108: 	movsd	(%rax), %xmm0
    0000010c: 	addq	$0x10, %rax
    00000110: 	addsd	%xmm0, %xmm1
    00000114: 	movsd	-0x8(%rax), %xmm0
    00000119: 	addsd	%xmm0, %xmm1
    0000011d: 	cmpq	%rdx, %rax
    00000120: 	jne	.Ltmp3827 # Offset: 288
    00000122: 	movq	%rcx, %rdx
    00000125: 	andq	$-0x2, %rdx
    00000129: 	leaq	(%r12,%rdx,8), %rax
    0000012d: 	cmpq	%rcx, %rdx
    00000130: 	je	.Ltmp3828 # Offset: 304
.Ltmp3848:
    00000132: 	addsd	(%rax), %xmm1
.Ltmp3828:
    00000136: 	movsd	%xmm1, (%rsp)
    0000013b: 	callq	clock@PLT # Offset: 315
    00000140: 	movl	iterations(%rip), %r10d
    00000147: 	movsd	(%rsp), %xmm1
    0000014c: 	movq	%rax, start_time(%rip)
    00000153: 	testl	%r10d, %r10d
    00000156: 	jle	.Ltmp3829 # Offset: 342
    0000015c: 	movq	0x10(%rbp), %r15
    00000160: 	movq	0x20(%rbp), %r14
    00000164: 	xorl	%r9d, %r9d
    00000167: 	movq	0x28(%rbp), %r11
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3834:
    00000170: 	cmpq	%r12, %rbx
    00000173: 	je	.Ltmp3830 # Offset: 371
    00000175: 	movq	%r11, %rdi
    00000178: 	movq	%r14, %rsi
    0000017b: 	movq	%r15, %rcx
    0000017e: 	movq	%r12, %rax
    00000181: 	jmp	.Ltmp3831 # Offset: 385
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3832:
    00000188: 	movsd	-0x8(%rax), %xmm0
    0000018d: 	movsd	%xmm0, (%rcx)
    00000191: 	cmpq	%rax, %rbx
    00000194: 	je	.Ltmp3830 # Offset: 404
.Ltmp3833:
    00000196: 	movq	%rdx, %rcx
.Ltmp3831:
    00000199: 	leaq	0x8(%rcx), %rdx
    0000019d: 	addq	$0x8, %rax
    000001a1: 	cmpq	%rdx, %rsi
    000001a4: 	jne	.Ltmp3832 # Offset: 420
    000001a6: 	movq	0x8(%rdi), %rdx
    000001aa: 	movsd	-0x8(%rax), %xmm0
    000001af: 	leaq	0x8(%rdi), %r8
    000001b3: 	leaq	0x200(%rdx), %rsi
    000001ba: 	movsd	%xmm0, (%rcx)
    000001be: 	cmpq	%rax, %rbx
    000001c1: 	je	.Ltmp3830 # Offset: 449
    000001c3: 	movq	%r8, %rdi
    000001c6: 	jmp	.Ltmp3833 # Offset: 454
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3830:
    000001d0: 	addl	$0x1, %r9d
    000001d4: 	cmpl	%r10d, %r9d
    000001d7: 	jne	.Ltmp3834 # Offset: 471
.Ltmp3829:
    000001d9: 	movq	%r13, %rdi
    000001dc: 	movsd	%xmm1, (%rsp)
    000001e1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 481
    000001e6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ed: 	movsd	(%rsp), %xmm1
    000001f2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001f9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000200: 	je	.Ltmp3835 # Offset: 512
.Ltmp3847:
    00000206: 	movq	-0x20(%rax), %r12
    0000020a: 	movsd	%xmm1, (%rsp)
    0000020f: 	callq	clock@PLT # Offset: 527
    00000214: 	pxor	%xmm0, %xmm0
    00000218: 	movq	%rax, end_time(%rip)
    0000021f: 	movq	%r12, %rdi
    00000222: 	subq	start_time(%rip), %rax
    00000229: 	cvtsi2sd	%rax, %xmm0
    0000022e: 	divsd	DATAat0x53788(%rip), %xmm0
    00000236: 	callq	_Z13record_resultdPKc # Offset: 566
    0000023b: 	movq	0x30(%rbp), %rsi
    0000023f: 	movq	0x10(%rbp), %rdx
    00000243: 	pxor	%xmm0, %xmm0
    00000247: 	movq	0x20(%rbp), %rcx
    0000024b: 	movq	0x28(%rbp), %rdi
    0000024f: 	cmpq	%rsi, %rdx
    00000252: 	movsd	(%rsp), %xmm1
    00000257: 	jne	.Ltmp3836 # Offset: 599
    00000259: 	jmp	.Ltmp3837 # Offset: 601
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3838:
    00000260: 	addsd	(%rdx), %xmm0
    00000264: 	cmpq	%rsi, %rax
    00000267: 	je	.Ltmp3837 # Offset: 615
.Ltmp3839:
    00000269: 	movq	%rax, %rdx
.Ltmp3836:
    0000026c: 	leaq	0x8(%rdx), %rax
    00000270: 	cmpq	%rcx, %rax
    00000273: 	jne	.Ltmp3838 # Offset: 627
    00000275: 	movq	0x8(%rdi), %rax
    00000279: 	addsd	(%rdx), %xmm0
    0000027d: 	leaq	0x8(%rdi), %r8
    00000281: 	leaq	0x200(%rax), %rcx
    00000288: 	cmpq	%rax, %rsi
    0000028b: 	je	.Ltmp3837 # Offset: 651
    0000028d: 	movq	%r8, %rdi
    00000290: 	jmp	.Ltmp3839 # Offset: 656
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3837:
    00000298: 	ucomisd	%xmm1, %xmm0
    0000029c: 	jp	.Ltmp3840 # Offset: 668
    000002a2: 	jne	.Ltmp3840 # Offset: 674
.Ltmp3846:
    000002a8: 	movq	%rbp, %rdi
    000002ab: 	callq	_ZNSt11_Deque_baseIdSaIdEED2Ev # Offset: 683
    000002b0: 	movq	0x38(%rsp), %rax
    000002b5: 	subq	%fs:0x28, %rax
    000002be: 	jne	.Ltmp3841 # Offset: 702
    000002c4: 	addq	$0x48, %rsp
    000002c8: 	movq	%rbp, %rdi
    000002cb: 	movl	$0x50, %esi
    000002d0: 	popq	%rbx
    000002d1: 	popq	%rbp
    000002d2: 	popq	%r12
    000002d4: 	popq	%r13
    000002d6: 	popq	%r14
    000002d8: 	popq	%r15
    000002da: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 730
.Ltmp3824:
    000002df: 	movq	%rcx, %xmm0
    000002e4: 	leaq	0x10(%rsp), %rdi
    000002e9: 	movaps	%xmm1, 0x20(%rsp)
    000002ee: 	addq	$0x8, %r15
    000002f2: 	movhps	0x18(%rbp), %xmm0
    000002f6: 	movaps	%xmm0, 0x10(%rsp)
    000002fb: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 763
    00000300: 	movq	0x28(%rsp), %rax
    00000305: 	leaq	0x8(%rax), %r14
    00000309: 	cmpq	%r14, %r15
    0000030c: 	jbe	.Ltmp3842 # Offset: 780
    0000030e: 	nop # Size: 2
.Ltmp3843:
    00000310: 	movq	(%r14), %rdi
    00000313: 	movl	$0x200, %esi
    00000318: 	addq	$0x8, %r14
    0000031c: 	callq	_ZdlPvm@PLT # Offset: 796
    00000321: 	cmpq	%r14, %r15
    00000324: 	ja	.Ltmp3843 # Offset: 804
.Ltmp3842:
    00000326: 	movdqa	0x10(%rsp), %xmm3
    0000032c: 	movdqa	0x20(%rsp), %xmm4
    00000332: 	movups	%xmm3, 0x30(%rbp)
    00000336: 	movups	%xmm4, 0x40(%rbp)
    0000033a: 	cmpq	%r12, %rbx
    0000033d: 	jne	.Ltmp3844 # Offset: 829
.Ltmp3825:
    00000343: 	pxor	%xmm6, %xmm6
    00000347: 	movsd	%xmm6, 0x8(%rsp)
    0000034d: 	movapd	%xmm6, %xmm1
    00000351: 	jmp	.Ltmp3828 # Offset: 849
.Ltmp3823:
    00000356: 	subq	%rax, %rsi
    00000359: 	movq	%rbp, %rdi
    0000035c: 	callq	"_ZNSt5dequeIdSaIdEE17_M_default_appendEm.part.0/1" # Offset: 860
    00000361: 	jmp	.Ltmp3845 # Offset: 865
.Ltmp3840:
    00000366: 	movl	current_test(%rip), %edx
    0000036c: 	leaq	DATAat0x52360(%rip), %rsi
    00000373: 	movl	$0x1, %edi
    00000378: 	xorl	%eax, %eax
    0000037a: 	callq	__printf_chk@PLT # Offset: 890
    0000037f: 	jmp	.Ltmp3846 # Offset: 895
.Ltmp3835:
    00000384: 	movq	-0x8(%rdx), %rax
    00000388: 	addq	$0x200, %rax
    0000038e: 	jmp	.Ltmp3847 # Offset: 910
.Ltmp3826:
    00000393: 	pxor	%xmm5, %xmm5
    00000397: 	movsd	%xmm5, 0x8(%rsp)
    0000039d: 	movapd	%xmm5, %xmm1
    000003a1: 	jmp	.Ltmp3848 # Offset: 929
.Ltmp3841:
    000003a6: 	callq	__stack_chk_fail@PLT # Offset: 934
    000003ab: 	endbr64
    000003af: 	movq	%rax, %r12
    000003b2: 	movq	%rbp, %rdi
    000003b5: 	movl	$0x50, %esi
    000003ba: 	callq	_ZdlPvm@PLT # Offset: 954
    000003bf: 	movq	%r12, %rdi
    000003c2: 	callq	_Unwind_Resume@PLT # Offset: 962
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_copyIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_accum_reverseIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 244
  State       : disassembled
  Address     : 0x278e0
  Size        : 0x39d
  MaxSize     : 0x3a0
  Offset      : 0x278e0
  Section     : .text
  Orc Section : .local.text._Z18test_accum_reverseIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0243:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rsi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	movl	$0x50, %edi
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x18(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x48(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	_Znwm@PLT # Offset: 50
    00000037: 	pxor	%xmm0, %xmm0
    0000003b: 	movq	$0x0, (%rax)
    00000042: 	movq	%rax, %rdi
    00000045: 	movq	%rax, %rbp
    00000048: 	movq	$0x0, 0x8(%rax)
    00000050: 	movups	%xmm0, 0x10(%rax)
    00000054: 	movups	%xmm0, 0x20(%rax)
    00000058: 	movups	%xmm0, 0x30(%rax)
    0000005c: 	movups	%xmm0, 0x40(%rax)
    00000060: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 96
    00000065: 	movq	0x48(%rbp), %r15
    00000069: 	movq	0x28(%rbp), %r8
    0000006d: 	movq	%r14, %rsi
    00000070: 	subq	%r13, %rsi
    00000073: 	movq	0x20(%rbp), %r12
    00000077: 	movq	0x30(%rbp), %rdx
    0000007b: 	movq	%r15, %rax
    0000007e: 	sarq	$0x3, %rsi
    00000082: 	movq	0x10(%rbp), %rbx
    00000086: 	movq	%r8, %xmm3
    0000008b: 	subq	%r8, %rax
    0000008e: 	movq	%r12, %xmm0
    00000093: 	sarq	$0x3, %rax
    00000097: 	cmpq	$0x1, %r15
    0000009b: 	punpcklqdq	%xmm3, %xmm0
    0000009f: 	adcq	$-0x1, %rax
    000000a3: 	subq	0x38(%rbp), %rdx
    000000a7: 	sarq	$0x3, %rdx
    000000ab: 	shlq	$0x6, %rax
    000000af: 	addq	%rdx, %rax
    000000b2: 	movq	%r12, %rdx
    000000b5: 	subq	%rbx, %rdx
    000000b8: 	sarq	$0x3, %rdx
    000000bc: 	addq	%rdx, %rax
    000000bf: 	cmpq	%rax, %rsi
    000000c2: 	ja	.Ltmp3849 # Offset: 194
    000000c8: 	jb	.Ltmp3850 # Offset: 200
.Ltmp3868:
    000000ce: 	cmpq	%r13, %r14
    000000d1: 	je	.Ltmp3851 # Offset: 209
    000000d3: 	pxor	%xmm2, %xmm2
    000000d7: 	movq	%rbx, %rdx
    000000da: 	movapd	%xmm2, %xmm1
    000000de: 	jmp	.Ltmp3852 # Offset: 222
.Ltmp3854:
    000000e0: 	movsd	(%r13), %xmm0
    000000e6: 	addq	$0x8, %r13
    000000ea: 	addsd	%xmm0, %xmm1
    000000ee: 	movsd	%xmm0, (%rdx)
    000000f2: 	cmpq	%r13, %r14
    000000f5: 	je	.Ltmp3853 # Offset: 245
.Ltmp3855:
    000000f7: 	movq	%rax, %rdx
.Ltmp3852:
    000000fa: 	leaq	0x8(%rdx), %rax
    000000fe: 	cmpq	%rax, %r12
    00000101: 	jne	.Ltmp3854 # Offset: 257
    00000103: 	movsd	(%r13), %xmm0
    00000109: 	movq	0x8(%r8), %rax
    0000010d: 	addq	$0x8, %r13
    00000111: 	leaq	0x8(%r8), %rsi
    00000115: 	addsd	%xmm0, %xmm1
    00000119: 	leaq	0x200(%rax), %r12
    00000120: 	movsd	%xmm0, (%rdx)
    00000124: 	cmpq	%r13, %r14
    00000127: 	je	.Ltmp3853 # Offset: 295
    00000129: 	movq	%rsi, %r8
    0000012c: 	jmp	.Ltmp3855 # Offset: 300
.Ltmp3851:
    0000012e: 	pxor	%xmm2, %xmm2
    00000132: 	movapd	%xmm2, %xmm1
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3853:
    00000140: 	movsd	%xmm2, 0x8(%rsp)
    00000146: 	movsd	%xmm1, (%rsp)
    0000014b: 	callq	clock@PLT # Offset: 331
    00000150: 	movl	iterations(%rip), %edi
    00000156: 	movsd	(%rsp), %xmm1
    0000015b: 	movq	%rax, start_time(%rip)
    00000162: 	movsd	0x8(%rsp), %xmm2
    00000168: 	testl	%edi, %edi
    0000016a: 	jle	.Ltmp3856 # Offset: 362
    00000170: 	movq	0x30(%rbp), %r14
    00000174: 	movq	0x38(%rbp), %r8
    00000178: 	xorl	%r13d, %r13d
    0000017b: 	leaq	DATAat0x52360(%rip), %r12
    00000182: 	movq	0x48(%rbp), %r15
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3863:
    00000190: 	cmpq	%rbx, %r14
    00000193: 	je	.Ltmp3857 # Offset: 403
    00000195: 	movq	%r14, %rax
    00000198: 	movq	%r8, %rcx
    0000019b: 	movapd	%xmm2, %xmm0
    0000019f: 	movq	%r15, %rsi
    000001a2: 	jmp	.Ltmp3858 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp3860:
    000001a8: 	leaq	-0x8(%rax), %rdx
    000001ac: 	addsd	-0x8(%rax), %xmm0
    000001b1: 	cmpq	%rbx, %rdx
    000001b4: 	je	.Ltmp3859 # Offset: 436
.Ltmp3861:
    000001b6: 	movq	%rdx, %rax
.Ltmp3858:
    000001b9: 	cmpq	%rax, %rcx
    000001bc: 	jne	.Ltmp3860 # Offset: 444
    000001be: 	movq	-0x8(%rsi), %rcx
    000001c2: 	leaq	-0x8(%rsi), %rax
    000001c6: 	leaq	0x1f8(%rcx), %rdx
    000001cd: 	addsd	0x1f8(%rcx), %xmm0
    000001d5: 	cmpq	%rbx, %rdx
    000001d8: 	je	.Ltmp3859 # Offset: 472
    000001da: 	movq	%rax, %rsi
    000001dd: 	jmp	.Ltmp3861 # Offset: 477
    000001df: 	nop # Size: 1
.Ltmp3857:
    000001e0: 	movapd	%xmm2, %xmm0
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp3859:
    000001e8: 	ucomisd	%xmm0, %xmm1
    000001ec: 	jp	.Ltmp3862 # Offset: 492
    000001f2: 	jne	.Ltmp3862 # Offset: 498
    000001f8: 	addl	$0x1, %r13d
    000001fc: 	cmpl	%edi, %r13d
    000001ff: 	jl	.Ltmp3863 # Offset: 511
.Ltmp3856:
    00000201: 	movq	0x18(%rsp), %rdi
    00000206: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 518
    0000020b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000212: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000219: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000220: 	je	.Ltmp3864 # Offset: 544
.Ltmp3869:
    00000226: 	movq	-0x20(%rax), %r12
    0000022a: 	callq	clock@PLT # Offset: 554
    0000022f: 	pxor	%xmm0, %xmm0
    00000233: 	movq	%rax, end_time(%rip)
    0000023a: 	movq	%r12, %rdi
    0000023d: 	subq	start_time(%rip), %rax
    00000244: 	cvtsi2sd	%rax, %xmm0
    00000249: 	divsd	DATAat0x53788(%rip), %xmm0
    00000251: 	callq	_Z13record_resultdPKc # Offset: 593
    00000256: 	movq	%rbp, %rdi
    00000259: 	callq	_ZNSt11_Deque_baseIdSaIdEED2Ev # Offset: 601
    0000025e: 	movq	0x48(%rsp), %rax
    00000263: 	subq	%fs:0x28, %rax
    0000026c: 	jne	.Ltmp3865 # Offset: 620
    00000272: 	addq	$0x58, %rsp
    00000276: 	movq	%rbp, %rdi
    00000279: 	movl	$0x50, %esi
    0000027e: 	popq	%rbx
    0000027f: 	popq	%rbp
    00000280: 	popq	%r12
    00000282: 	popq	%r13
    00000284: 	popq	%r14
    00000286: 	popq	%r15
    00000288: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 648
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp3862:
    00000290: 	movl	current_test(%rip), %edx
    00000296: 	movl	$0x1, %edi
    0000029b: 	xorl	%eax, %eax
    0000029d: 	movq	%r12, %rsi
    000002a0: 	movq	%r8, (%rsp)
    000002a4: 	addl	$0x1, %r13d
    000002a8: 	movsd	%xmm2, 0x10(%rsp)
    000002ae: 	movsd	%xmm1, 0x8(%rsp)
    000002b4: 	callq	__printf_chk@PLT # Offset: 692
    000002b9: 	movl	iterations(%rip), %edi
    000002bf: 	movq	(%rsp), %r8
    000002c3: 	movsd	0x8(%rsp), %xmm1
    000002c9: 	movsd	0x10(%rsp), %xmm2
    000002cf: 	cmpl	%edi, %r13d
    000002d2: 	jl	.Ltmp3863 # Offset: 722
    000002d8: 	jmp	.Ltmp3856 # Offset: 728
.Ltmp3850:
    000002dd: 	movq	%rbx, %xmm1
    000002e2: 	leaq	0x20(%rsp), %rdi
    000002e7: 	movaps	%xmm0, 0x30(%rsp)
    000002ec: 	movhps	0x18(%rbp), %xmm1
    000002f0: 	movaps	%xmm1, 0x20(%rsp)
    000002f5: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 757
    000002fa: 	movq	0x38(%rsp), %rdi
    000002ff: 	leaq	0x8(%r15), %rax
    00000303: 	movq	%rax, 0x8(%rsp)
    00000308: 	leaq	0x8(%rdi), %r15
    0000030c: 	cmpq	%r15, %rax
    0000030f: 	jbe	.Ltmp3866 # Offset: 783
    00000311: 	nopl	(%rax) # Size: 7
.Ltmp3867:
    00000318: 	movq	(%r15), %rdi
    0000031b: 	movl	$0x200, %esi
    00000320: 	movq	%r8, (%rsp)
    00000324: 	addq	$0x8, %r15
    00000328: 	callq	_ZdlPvm@PLT # Offset: 808
    0000032d: 	cmpq	%r15, 0x8(%rsp)
    00000332: 	movq	(%rsp), %r8
    00000336: 	ja	.Ltmp3867 # Offset: 822
.Ltmp3866:
    00000338: 	movdqa	0x20(%rsp), %xmm4
    0000033e: 	movdqa	0x30(%rsp), %xmm5
    00000344: 	movups	%xmm4, 0x30(%rbp)
    00000348: 	movups	%xmm5, 0x40(%rbp)
    0000034c: 	jmp	.Ltmp3868 # Offset: 844
.Ltmp3849:
    00000351: 	subq	%rax, %rsi
    00000354: 	movq	%rbp, %rdi
    00000357: 	callq	"_ZNSt5dequeIdSaIdEE17_M_default_appendEm.part.0/1" # Offset: 855
    0000035c: 	movq	0x10(%rbp), %rbx
    00000360: 	movq	0x20(%rbp), %r12
    00000364: 	movq	0x28(%rbp), %r8
    00000368: 	jmp	.Ltmp3868 # Offset: 872
.Ltmp3864:
    0000036d: 	movq	-0x8(%rdx), %rax
    00000371: 	addq	$0x200, %rax
    00000377: 	jmp	.Ltmp3869 # Offset: 887
.Ltmp3865:
    0000037c: 	callq	__stack_chk_fail@PLT # Offset: 892
    00000381: 	endbr64
    00000385: 	movq	%rax, %r12
    00000388: 	movq	%rbp, %rdi
    0000038b: 	movl	$0x50, %esi
    00000390: 	callq	_ZdlPvm@PLT # Offset: 912
    00000395: 	movq	%r12, %rdi
    00000398: 	callq	_Unwind_Resume@PLT # Offset: 920
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_accum_reverseIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_accumIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 245
  State       : disassembled
  Address     : 0x27c80
  Size        : 0x39f
  MaxSize     : 0x3a0
  Offset      : 0x27c80
  Section     : .text
  Orc Section : .local.text._Z10test_accumIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0244:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	movl	$0x50, %edi
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x18(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x48(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	_Znwm@PLT # Offset: 50
    00000037: 	pxor	%xmm0, %xmm0
    0000003b: 	movq	$0x0, (%rax)
    00000042: 	movq	%rax, %rdi
    00000045: 	movq	%rax, %rbp
    00000048: 	movq	$0x0, 0x8(%rax)
    00000050: 	movups	%xmm0, 0x10(%rax)
    00000054: 	movups	%xmm0, 0x20(%rax)
    00000058: 	movups	%xmm0, 0x30(%rax)
    0000005c: 	movups	%xmm0, 0x40(%rax)
    00000060: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 96
    00000065: 	movq	0x48(%rbp), %r9
    00000069: 	movq	0x28(%rbp), %r13
    0000006d: 	movq	%r12, %rsi
    00000070: 	subq	%rbx, %rsi
    00000073: 	movq	0x20(%rbp), %r14
    00000077: 	movq	0x30(%rbp), %rdx
    0000007b: 	movq	%r9, %rax
    0000007e: 	sarq	$0x3, %rsi
    00000082: 	movq	0x10(%rbp), %r15
    00000086: 	movq	%r13, %xmm3
    0000008b: 	subq	%r13, %rax
    0000008e: 	movq	%r14, %xmm0
    00000093: 	sarq	$0x3, %rax
    00000097: 	cmpq	$0x1, %r9
    0000009b: 	punpcklqdq	%xmm3, %xmm0
    0000009f: 	adcq	$-0x1, %rax
    000000a3: 	subq	0x38(%rbp), %rdx
    000000a7: 	sarq	$0x3, %rdx
    000000ab: 	shlq	$0x6, %rax
    000000af: 	addq	%rdx, %rax
    000000b2: 	movq	%r14, %rdx
    000000b5: 	subq	%r15, %rdx
    000000b8: 	sarq	$0x3, %rdx
    000000bc: 	addq	%rdx, %rax
    000000bf: 	cmpq	%rax, %rsi
    000000c2: 	ja	.Ltmp3870 # Offset: 194
    000000c8: 	jb	.Ltmp3871 # Offset: 200
.Ltmp3889:
    000000ce: 	cmpq	%rbx, %r12
    000000d1: 	je	.Ltmp3872 # Offset: 209
    000000d3: 	pxor	%xmm2, %xmm2
    000000d7: 	movq	%r13, %rsi
    000000da: 	movq	%r14, %rcx
    000000dd: 	movq	%r15, %rdx
    000000e0: 	movapd	%xmm2, %xmm1
    000000e4: 	jmp	.Ltmp3873 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3875:
    000000f0: 	movsd	(%rbx), %xmm0
    000000f4: 	addq	$0x8, %rbx
    000000f8: 	addsd	%xmm0, %xmm1
    000000fc: 	movsd	%xmm0, (%rdx)
    00000100: 	cmpq	%rbx, %r12
    00000103: 	je	.Ltmp3874 # Offset: 259
.Ltmp3876:
    00000105: 	movq	%rax, %rdx
.Ltmp3873:
    00000108: 	leaq	0x8(%rdx), %rax
    0000010c: 	cmpq	%rcx, %rax
    0000010f: 	jne	.Ltmp3875 # Offset: 271
    00000111: 	movsd	(%rbx), %xmm0
    00000115: 	movq	0x8(%rsi), %rax
    00000119: 	addq	$0x8, %rbx
    0000011d: 	leaq	0x8(%rsi), %rdi
    00000121: 	addsd	%xmm0, %xmm1
    00000125: 	leaq	0x200(%rax), %rcx
    0000012c: 	movsd	%xmm0, (%rdx)
    00000130: 	cmpq	%rbx, %r12
    00000133: 	je	.Ltmp3874 # Offset: 307
    00000135: 	movq	%rdi, %rsi
    00000138: 	jmp	.Ltmp3876 # Offset: 312
.Ltmp3872:
    0000013a: 	pxor	%xmm2, %xmm2
    0000013e: 	movapd	%xmm2, %xmm1
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3874:
    00000148: 	movsd	%xmm2, 0x10(%rsp)
    0000014e: 	movsd	%xmm1, 0x8(%rsp)
    00000154: 	callq	clock@PLT # Offset: 340
    00000159: 	movl	iterations(%rip), %r10d
    00000160: 	movsd	0x8(%rsp), %xmm1
    00000166: 	movq	%rax, start_time(%rip)
    0000016d: 	movsd	0x10(%rsp), %xmm2
    00000173: 	testl	%r10d, %r10d
    00000176: 	jle	.Ltmp3877 # Offset: 374
    0000017c: 	movq	0x30(%rbp), %rbx
    00000180: 	xorl	%r12d, %r12d
    00000183: 	leaq	DATAat0x52360(%rip), %r8
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3884:
    00000190: 	cmpq	%rbx, %r15
    00000193: 	je	.Ltmp3878 # Offset: 403
    00000195: 	movq	%r13, %rsi
    00000198: 	movq	%r14, %rcx
    0000019b: 	movapd	%xmm2, %xmm0
    0000019f: 	movq	%r15, %rdx
    000001a2: 	jmp	.Ltmp3879 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp3881:
    000001a8: 	addsd	(%rdx), %xmm0
    000001ac: 	cmpq	%rbx, %rax
    000001af: 	je	.Ltmp3880 # Offset: 431
.Ltmp3882:
    000001b1: 	movq	%rax, %rdx
.Ltmp3879:
    000001b4: 	leaq	0x8(%rdx), %rax
    000001b8: 	cmpq	%rax, %rcx
    000001bb: 	jne	.Ltmp3881 # Offset: 443
    000001bd: 	movq	0x8(%rsi), %rax
    000001c1: 	addsd	(%rdx), %xmm0
    000001c5: 	leaq	0x8(%rsi), %rdi
    000001c9: 	leaq	0x200(%rax), %rcx
    000001d0: 	cmpq	%rbx, %rax
    000001d3: 	je	.Ltmp3880 # Offset: 467
    000001d5: 	movq	%rdi, %rsi
    000001d8: 	jmp	.Ltmp3882 # Offset: 472
    000001da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3878:
    000001e0: 	movapd	%xmm2, %xmm0
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp3880:
    000001e8: 	ucomisd	%xmm0, %xmm1
    000001ec: 	jp	.Ltmp3883 # Offset: 492
    000001f2: 	jne	.Ltmp3883 # Offset: 498
    000001f8: 	addl	$0x1, %r12d
    000001fc: 	cmpl	%r10d, %r12d
    000001ff: 	jl	.Ltmp3884 # Offset: 511
.Ltmp3877:
    00000201: 	movq	0x18(%rsp), %rdi
    00000206: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 518
    0000020b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000212: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000219: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000220: 	je	.Ltmp3885 # Offset: 544
.Ltmp3890:
    00000226: 	movq	-0x20(%rax), %r12
    0000022a: 	callq	clock@PLT # Offset: 554
    0000022f: 	pxor	%xmm0, %xmm0
    00000233: 	movq	%rax, end_time(%rip)
    0000023a: 	movq	%r12, %rdi
    0000023d: 	subq	start_time(%rip), %rax
    00000244: 	cvtsi2sd	%rax, %xmm0
    00000249: 	divsd	DATAat0x53788(%rip), %xmm0
    00000251: 	callq	_Z13record_resultdPKc # Offset: 593
    00000256: 	movq	%rbp, %rdi
    00000259: 	callq	_ZNSt11_Deque_baseIdSaIdEED2Ev # Offset: 601
    0000025e: 	movq	0x48(%rsp), %rax
    00000263: 	subq	%fs:0x28, %rax
    0000026c: 	jne	.Ltmp3886 # Offset: 620
    00000272: 	addq	$0x58, %rsp
    00000276: 	movq	%rbp, %rdi
    00000279: 	movl	$0x50, %esi
    0000027e: 	popq	%rbx
    0000027f: 	popq	%rbp
    00000280: 	popq	%r12
    00000282: 	popq	%r13
    00000284: 	popq	%r14
    00000286: 	popq	%r15
    00000288: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 648
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp3883:
    00000290: 	movl	current_test(%rip), %edx
    00000296: 	movq	%r8, %rsi
    00000299: 	xorl	%eax, %eax
    0000029b: 	movl	$0x1, %edi
    000002a0: 	movsd	%xmm2, 0x10(%rsp)
    000002a6: 	addl	$0x1, %r12d
    000002aa: 	movsd	%xmm1, 0x8(%rsp)
    000002b0: 	callq	__printf_chk@PLT # Offset: 688
    000002b5: 	movl	iterations(%rip), %r10d
    000002bc: 	movsd	0x8(%rsp), %xmm1
    000002c2: 	leaq	DATAat0x52360(%rip), %r8
    000002c9: 	movsd	0x10(%rsp), %xmm2
    000002cf: 	cmpl	%r10d, %r12d
    000002d2: 	jl	.Ltmp3884 # Offset: 722
    000002d8: 	jmp	.Ltmp3877 # Offset: 728
.Ltmp3871:
    000002dd: 	movq	%r15, %xmm1
    000002e2: 	leaq	0x20(%rsp), %rdi
    000002e7: 	movaps	%xmm0, 0x30(%rsp)
    000002ec: 	movhps	0x18(%rbp), %xmm1
    000002f0: 	movaps	%xmm1, 0x20(%rsp)
    000002f5: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 757
    000002fa: 	movq	0x38(%rsp), %rax
    000002ff: 	leaq	0x8(%r9), %rdi
    00000303: 	movq	%rdi, 0x10(%rsp)
    00000308: 	addq	$0x8, %rax
    0000030c: 	cmpq	%rax, %rdi
    0000030f: 	jbe	.Ltmp3887 # Offset: 783
    00000311: 	nopl	(%rax) # Size: 7
.Ltmp3888:
    00000318: 	movq	(%rax), %rdi
    0000031b: 	movl	$0x200, %esi
    00000320: 	movq	%rax, 0x8(%rsp)
    00000325: 	callq	_ZdlPvm@PLT # Offset: 805
    0000032a: 	movq	0x8(%rsp), %rax
    0000032f: 	addq	$0x8, %rax
    00000333: 	cmpq	%rax, 0x10(%rsp)
    00000338: 	ja	.Ltmp3888 # Offset: 824
.Ltmp3887:
    0000033a: 	movdqa	0x20(%rsp), %xmm4
    00000340: 	movdqa	0x30(%rsp), %xmm5
    00000346: 	movups	%xmm4, 0x30(%rbp)
    0000034a: 	movups	%xmm5, 0x40(%rbp)
    0000034e: 	jmp	.Ltmp3889 # Offset: 846
.Ltmp3870:
    00000353: 	subq	%rax, %rsi
    00000356: 	movq	%rbp, %rdi
    00000359: 	callq	"_ZNSt5dequeIdSaIdEE17_M_default_appendEm.part.0/1" # Offset: 857
    0000035e: 	movq	0x10(%rbp), %r15
    00000362: 	movq	0x20(%rbp), %r14
    00000366: 	movq	0x28(%rbp), %r13
    0000036a: 	jmp	.Ltmp3889 # Offset: 874
.Ltmp3885:
    0000036f: 	movq	-0x8(%rdx), %rax
    00000373: 	addq	$0x200, %rax
    00000379: 	jmp	.Ltmp3890 # Offset: 889
.Ltmp3886:
    0000037e: 	callq	__stack_chk_fail@PLT # Offset: 894
    00000383: 	endbr64
    00000387: 	movq	%rax, %r12
    0000038a: 	movq	%rbp, %rdi
    0000038d: 	movl	$0x50, %esi
    00000392: 	callq	_ZdlPvm@PLT # Offset: 914
    00000397: 	movq	%r12, %rdi
    0000039a: 	callq	_Unwind_Resume@PLT # Offset: 922
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_accumIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE24_M_get_insert_unique_posERS1_" after disassembly {
  Number      : 246
  State       : disassembled
  Address     : 0x28020
  Size        : 0xac
  MaxSize     : 0xb0
  Offset      : 0x28020
  Section     : .text
  Orc Section : .local.text._ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE24_M_get_insert_unique_posERS1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0245:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pushq	%rbx
    00000007: 	movq	%rsi, %rbx
    0000000a: 	subq	$0x8, %rsp
    0000000e: 	movq	0x10(%rdi), %r12
    00000012: 	testq	%r12, %r12
    00000015: 	je	.Ltmp3891 # Offset: 21
    00000017: 	movsd	(%rsi), %xmm1
    0000001b: 	jmp	.Ltmp3892 # Offset: 27
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp3894:
    00000020: 	movq	0x10(%r12), %rax
    00000025: 	movl	$0x1, %edx
    0000002a: 	testq	%rax, %rax
    0000002d: 	je	.Ltmp3893 # Offset: 45
.Ltmp3895:
    0000002f: 	movq	%rax, %r12
.Ltmp3892:
    00000032: 	movsd	0x20(%r12), %xmm0
    00000039: 	comisd	%xmm1, %xmm0
    0000003d: 	ja	.Ltmp3894 # Offset: 61
    0000003f: 	movq	0x18(%r12), %rax
    00000044: 	xorl	%edx, %edx
    00000046: 	testq	%rax, %rax
    00000049: 	jne	.Ltmp3895 # Offset: 73
.Ltmp3893:
    0000004b: 	movq	%r12, %r8
    0000004e: 	testb	%dl, %dl
    00000050: 	jne	.Ltmp3896 # Offset: 80
.Ltmp3898:
    00000052: 	xorl	%eax, %eax
    00000054: 	comisd	%xmm0, %xmm1
    00000058: 	cmovbeq	%rax, %r8
    0000005c: 	cmovaq	%rax, %r12
    00000060: 	addq	$0x8, %rsp
    00000064: 	popq	%rbx
    00000065: 	movq	%r12, %rax
    00000068: 	movq	%r8, %rdx
    0000006b: 	popq	%r12
    0000006d: 	retq # Offset: 109
    0000006e: 	nop # Size: 2
.Ltmp3891:
    00000070: 	leaq	0x8(%rdi), %r12
.Ltmp3896:
    00000074: 	cmpq	%r12, 0x18(%rdi)
    00000078: 	je	.Ltmp3897 # Offset: 120
    0000007a: 	movq	%r12, %rdi
    0000007d: 	callq	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT # Offset: 125
    00000082: 	movq	%r12, %r8
    00000085: 	movsd	(%rbx), %xmm1
    00000089: 	movsd	0x20(%rax), %xmm0
    0000008e: 	movq	%rax, %r12
    00000091: 	jmp	.Ltmp3898 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3897:
    00000098: 	movq	%r12, %r8
    0000009b: 	addq	$0x8, %rsp
    0000009f: 	xorl	%r12d, %r12d
    000000a2: 	movq	%r12, %rax
    000000a5: 	movq	%r8, %rdx
    000000a8: 	popq	%rbx
    000000a9: 	popq	%r12
    000000ab: 	retq # Offset: 171
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE24_M_get_insert_unique_posERS1_"

Binary Function "_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_" after disassembly {
  Number      : 247
  State       : disassembled
  Address     : 0x280d0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x280d0
  Section     : .text
  Orc Section : .local.text._ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0246:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	leaq	0x8(%rdi), %rax
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	cmpq	%rax, %rsi
    0000001b: 	je	.Ltmp3899 # Offset: 27
    00000021: 	movsd	(%rdx), %xmm0
    00000025: 	movsd	0x20(%rsi), %xmm1
    0000002a: 	movq	%rsi, %rbp
    0000002d: 	comisd	%xmm0, %xmm1
    00000031: 	jbe	.Ltmp3900 # Offset: 49
    00000033: 	movq	0x18(%rdi), %rax
    00000037: 	movq	%rax, %rdx
    0000003a: 	cmpq	%rsi, %rax
    0000003d: 	je	.Ltmp3901 # Offset: 61
    0000003f: 	movq	%rsi, %rdi
    00000042: 	movsd	%xmm0, 0x8(%rsp)
    00000048: 	callq	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT # Offset: 72
    0000004d: 	movsd	0x8(%rsp), %xmm0
    00000053: 	comisd	0x20(%rax), %xmm0
    00000058: 	movq	%rax, %rdx
    0000005b: 	jbe	.Ltmp3902 # Offset: 91
    00000061: 	xorl	%ebx, %ebx
    00000063: 	cmpq	$0x0, 0x18(%rax)
    00000068: 	movq	%rbx, %rax
    0000006b: 	cmovneq	%rbp, %rdx
    0000006f: 	cmovneq	%rbp, %rax
.Ltmp3901:
    00000073: 	addq	$0x18, %rsp
    00000077: 	popq	%rbx
    00000078: 	popq	%rbp
    00000079: 	popq	%r12
    0000007b: 	popq	%r13
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp3900:
    00000080: 	comisd	%xmm1, %xmm0
    00000084: 	jbe	.Ltmp3903 # Offset: 132
    0000008a: 	movq	0x20(%rdi), %rdx
    0000008e: 	cmpq	%rsi, %rdx
    00000091: 	je	.Ltmp3904 # Offset: 145
    00000097: 	movq	%rsi, %rdi
    0000009a: 	movsd	%xmm0, 0x8(%rsp)
    000000a0: 	callq	_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@PLT # Offset: 160
    000000a5: 	movsd	0x8(%rsp), %xmm0
    000000ab: 	movsd	0x20(%rax), %xmm1
    000000b0: 	movq	%rax, %rdx
    000000b3: 	comisd	%xmm0, %xmm1
    000000b7: 	jbe	.Ltmp3902 # Offset: 183
    000000bd: 	xorl	%ebx, %ebx
    000000bf: 	cmpq	$0x0, 0x18(%rbp)
    000000c4: 	movq	%rbx, %rax
    000000c7: 	cmovneq	%rdx, %rax
    000000cb: 	cmoveq	%rbp, %rdx
    000000cf: 	jmp	.Ltmp3901 # Offset: 207
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp3899:
    000000d8: 	cmpq	$0x0, 0x28(%rdi)
    000000dd: 	jne	.Ltmp3905 # Offset: 221
.Ltmp3912:
    000000e3: 	movq	0x10(%r12), %rbx
    000000e8: 	testq	%rbx, %rbx
    000000eb: 	je	.Ltmp3906 # Offset: 235
    000000f1: 	movsd	(%r13), %xmm1
    000000f7: 	jmp	.Ltmp3907 # Offset: 247
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp3909:
    00000100: 	movq	0x10(%rbx), %rax
    00000104: 	movl	$0x1, %ecx
    00000109: 	testq	%rax, %rax
    0000010c: 	je	.Ltmp3908 # Offset: 268
.Ltmp3910:
    0000010e: 	movq	%rax, %rbx
.Ltmp3907:
    00000111: 	movsd	0x20(%rbx), %xmm0
    00000116: 	comisd	%xmm1, %xmm0
    0000011a: 	ja	.Ltmp3909 # Offset: 282
    0000011c: 	movq	0x18(%rbx), %rax
    00000120: 	xorl	%ecx, %ecx
    00000122: 	testq	%rax, %rax
    00000125: 	jne	.Ltmp3910 # Offset: 293
.Ltmp3908:
    00000127: 	movq	%rbx, %rdx
    0000012a: 	testb	%cl, %cl
    0000012c: 	jne	.Ltmp3911 # Offset: 300
.Ltmp3914:
    0000012e: 	xorl	%eax, %eax
    00000130: 	comisd	%xmm0, %xmm1
    00000134: 	cmovbeq	%rax, %rdx
    00000138: 	cmovaq	%rax, %rbx
.Ltmp3915:
    0000013c: 	addq	$0x18, %rsp
    00000140: 	movq	%rbx, %rax
    00000143: 	popq	%rbx
    00000144: 	popq	%rbp
    00000145: 	popq	%r12
    00000147: 	popq	%r13
    00000149: 	retq # Offset: 329
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3903:
    00000150: 	addq	$0x18, %rsp
    00000154: 	movq	%rsi, %rax
    00000157: 	xorl	%edx, %edx
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	popq	%r12
    0000015d: 	popq	%r13
    0000015f: 	retq # Offset: 351
.Ltmp3905:
    00000160: 	movq	0x20(%rdi), %rdx
    00000164: 	movsd	(%r13), %xmm0
    0000016a: 	comisd	0x20(%rdx), %xmm0
    0000016f: 	jbe	.Ltmp3912 # Offset: 367
.Ltmp3904:
    00000175: 	addq	$0x18, %rsp
    00000179: 	xorl	%eax, %eax
    0000017b: 	popq	%rbx
    0000017c: 	popq	%rbp
    0000017d: 	popq	%r12
    0000017f: 	popq	%r13
    00000181: 	retq # Offset: 385
    00000182: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3902:
    00000188: 	addq	$0x18, %rsp
    0000018c: 	movq	%r13, %rsi
    0000018f: 	movq	%r12, %rdi
    00000192: 	popq	%rbx
    00000193: 	popq	%rbp
    00000194: 	popq	%r12
    00000196: 	popq	%r13
    00000198: 	jmp	_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE24_M_get_insert_unique_posERS1_ # TAILCALL  # Offset: 408
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp3906:
    000001a0: 	movq	%rax, %rbx
.Ltmp3911:
    000001a3: 	cmpq	%rbx, 0x18(%r12)
    000001a8: 	je	.Ltmp3913 # Offset: 424
    000001aa: 	movq	%rbx, %rdi
    000001ad: 	callq	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT # Offset: 429
    000001b2: 	movq	%rbx, %rdx
    000001b5: 	movsd	(%r13), %xmm1
    000001bb: 	movsd	0x20(%rax), %xmm0
    000001c0: 	movq	%rax, %rbx
    000001c3: 	jmp	.Ltmp3914 # Offset: 451
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3913:
    000001d0: 	movq	%rbx, %rdx
    000001d3: 	xorl	%ebx, %ebx
    000001d5: 	jmp	.Ltmp3915 # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_"

Binary Function "_Z15test_delete_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 248
  State       : disassembled
  Address     : 0x282b0
  Size        : 0x41f
  MaxSize     : 0x420
  Offset      : 0x282b0
  Section     : .text
  Orc Section : .local.text._Z15test_delete_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0247:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x88, %rsp
    0000001e: 	movq	%rdx, 0x58(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x20(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x78(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	movabsq	$0x500000000, %rax
    00000044: 	divq	%rcx
    00000047: 	movq	%rax, 0x18(%rsp)
    0000004c: 	cmpq	$0x3e8, %rax
    00000052: 	ja	.Ltmp3916 # Offset: 82
    00000058: 	cmpq	$0x3, %rax
    0000005c: 	ja	.Ltmp3917 # Offset: 92
    00000062: 	movq	$0x0, 0x70(%rsp)
    0000006b: 	pxor	%xmm0, %xmm0
    0000006f: 	movq	$0x4, 0x18(%rsp)
    00000078: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp3941:
    0000007d: 	movq	0x18(%rsp), %rbx
    00000082: 	leaq	0x60(%rsp), %rdi
    00000087: 	movq	%rbx, %rsi
    0000008a: 	callq	_ZNSt6vectorIPSt3mapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 138
    0000008f: 	movq	0x60(%rsp), %rcx
    00000094: 	movl	iterations(%rip), %eax
    0000009a: 	movq	%rcx, 0x38(%rsp)
    0000009f: 	testl	%eax, %eax
    000000a1: 	jle	.Ltmp3918 # Offset: 161
    000000a7: 	addq	$0x8, %rcx
    000000ab: 	movl	%ebx, 0x44(%rsp)
    000000af: 	pxor	%xmm3, %xmm3
    000000b3: 	movl	$0x0, 0x40(%rsp)
    000000bb: 	movq	%rcx, 0x50(%rsp)
    000000c0: 	movsd	%xmm3, 0x30(%rsp)
.Ltmp3936:
    000000c6: 	movslq	0x40(%rsp), %rdx
    000000cb: 	movslq	%eax, %rcx
    000000ce: 	movq	%rdx, %rsi
    000000d1: 	addq	0x18(%rsp), %rdx
    000000d6: 	subl	%esi, %eax
    000000d8: 	cmpq	%rcx, %rdx
    000000db: 	cmovbl	0x44(%rsp), %eax
    000000e0: 	movq	0x50(%rsp), %rsi
    000000e5: 	movq	0x38(%rsp), %rcx
    000000ea: 	subl	$0x1, %eax
    000000ed: 	leaq	(%rsi,%rax,8), %rax
    000000f1: 	movq	%rcx, 0x48(%rsp)
    000000f6: 	movq	%rax, 0x28(%rsp)
    000000fb: 	movq	%rcx, 0x10(%rsp)
.Ltmp3931:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	leaq	0x8(%rax), %r12
    0000010e: 	movl	$0x0, 0x8(%rax)
    00000115: 	movq	%rax, %rbp
    00000118: 	movq	$0x0, 0x10(%rax)
    00000120: 	movq	%r12, 0x18(%rax)
    00000124: 	movq	%r12, 0x20(%rax)
    00000128: 	movq	$0x0, 0x28(%rax)
    00000130: 	movq	0x20(%rsp), %rax
    00000135: 	cmpq	%rax, %r13
    00000138: 	je	.Ltmp3919 # Offset: 312
    0000013e: 	movq	%rax, %rbx
    00000141: 	xorl	%eax, %eax
    00000143: 	testq	%rax, %rax
    00000146: 	je	.Ltmp3920 # Offset: 326
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp3929:
    00000150: 	movsd	(%rbx), %xmm0
    00000154: 	movq	%r12, %r15
    00000157: 	jmp	.Ltmp3921 # Offset: 343
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp3923:
    00000160: 	movq	%rax, %r15
    00000163: 	movq	0x10(%rax), %rax
    00000167: 	testq	%rax, %rax
    0000016a: 	je	.Ltmp3922 # Offset: 362
.Ltmp3921:
    0000016c: 	comisd	0x20(%rax), %xmm0
    00000171: 	jbe	.Ltmp3923 # Offset: 369
    00000173: 	movq	0x18(%rax), %rax
    00000177: 	testq	%rax, %rax
    0000017a: 	jne	.Ltmp3921 # Offset: 378
.Ltmp3922:
    0000017c: 	cmpq	%r15, %r12
    0000017f: 	je	.Ltmp3924 # Offset: 383
    00000181: 	movsd	0x20(%r15), %xmm1
    00000187: 	comisd	%xmm0, %xmm1
    0000018b: 	jbe	.Ltmp3925 # Offset: 395
.Ltmp3924:
    0000018d: 	movl	$0x30, %edi
    00000192: 	movq	%r15, %r14
    00000195: 	callq	_Znwm@PLT # Offset: 405
    0000019a: 	movsd	(%rbx), %xmm0
    0000019e: 	movq	%r14, %rsi
    000001a1: 	leaq	0x20(%rax), %rdx
    000001a5: 	movq	%rbp, %rdi
    000001a8: 	movq	$0x0, 0x28(%rax)
    000001b0: 	movq	%rax, %r15
    000001b3: 	movsd	%xmm0, 0x20(%rax)
    000001b8: 	movsd	%xmm0, 0x8(%rsp)
    000001be: 	callq	_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_ # Offset: 446
    000001c3: 	movq	%rax, %r14
    000001c6: 	testq	%rdx, %rdx
    000001c9: 	je	.Ltmp3926 # Offset: 457
    000001cb: 	cmpq	%rdx, %r12
    000001ce: 	je	.Ltmp3927 # Offset: 462
    000001d0: 	testq	%rax, %rax
    000001d3: 	movsd	0x8(%rsp), %xmm0
    000001d9: 	je	.Ltmp3928 # Offset: 473
.Ltmp3927:
    000001df: 	movl	$0x1, %edi
.Ltmp3940:
    000001e4: 	movq	%r12, %rcx
    000001e7: 	movq	%r15, %rsi
    000001ea: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 490
    000001ef: 	addq	$0x1, 0x28(%rbp)
.Ltmp3930:
    000001f4: 	movsd	(%rbx), %xmm0
.Ltmp3925:
    000001f8: 	addq	$0x8, %rbx
    000001fc: 	movsd	%xmm0, 0x28(%r15)
    00000202: 	cmpq	%rbx, %r13
    00000205: 	je	.Ltmp3919 # Offset: 517
    00000207: 	movq	0x10(%rbp), %rax
    0000020b: 	testq	%rax, %rax
    0000020e: 	jne	.Ltmp3929 # Offset: 526
.Ltmp3920:
    00000214: 	movq	%r12, %r15
    00000217: 	jmp	.Ltmp3924 # Offset: 535
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp3926:
    00000220: 	movq	%r15, %rdi
    00000223: 	movl	$0x30, %esi
    00000228: 	movq	%r14, %r15
    0000022b: 	callq	_ZdlPvm@PLT # Offset: 555
    00000230: 	jmp	.Ltmp3930 # Offset: 560
    00000232: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3919:
    00000238: 	movq	0x10(%rsp), %rax
    0000023d: 	movq	%rbp, (%rax)
    00000240: 	addq	$0x8, %rax
    00000244: 	movq	%rax, 0x10(%rsp)
    00000249: 	cmpq	0x28(%rsp), %rax
    0000024e: 	jne	.Ltmp3931 # Offset: 590
    00000254: 	callq	clock@PLT # Offset: 596
    00000259: 	movq	0x28(%rsp), %r14
    0000025e: 	movq	0x48(%rsp), %rbp
    00000263: 	movq	%rax, start_time(%rip)
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3935:
    00000270: 	movq	(%rbp), %r12
    00000274: 	testq	%r12, %r12
    00000277: 	je	.Ltmp3932 # Offset: 631
    00000279: 	movq	0x10(%r12), %rbx
    0000027e: 	testq	%rbx, %rbx
    00000281: 	je	.Ltmp3933 # Offset: 641
.Ltmp3934:
    00000283: 	movq	0x18(%rbx), %rdi
    00000287: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 647
    0000028c: 	movq	%rbx, %rdi
    0000028f: 	movq	0x10(%rbx), %rbx
    00000293: 	movl	$0x30, %esi
    00000298: 	callq	_ZdlPvm@PLT # Offset: 664
    0000029d: 	testq	%rbx, %rbx
    000002a0: 	jne	.Ltmp3934 # Offset: 672
.Ltmp3933:
    000002a2: 	movl	$0x30, %esi
    000002a7: 	movq	%r12, %rdi
    000002aa: 	callq	_ZdlPvm@PLT # Offset: 682
.Ltmp3932:
    000002af: 	movq	$0x0, (%rbp)
    000002b7: 	addq	$0x8, %rbp
    000002bb: 	cmpq	%rbp, %r14
    000002be: 	jne	.Ltmp3935 # Offset: 702
    000002c0: 	callq	clock@PLT # Offset: 704
    000002c5: 	pxor	%xmm0, %xmm0
    000002c9: 	movl	0x18(%rsp), %ecx
    000002cd: 	addl	%ecx, 0x40(%rsp)
    000002d1: 	movq	%rax, end_time(%rip)
    000002d8: 	subq	start_time(%rip), %rax
    000002df: 	cvtsi2sd	%rax, %xmm0
    000002e4: 	movl	0x40(%rsp), %ecx
    000002e8: 	divsd	DATAat0x53788(%rip), %xmm0
    000002f0: 	addsd	0x30(%rsp), %xmm0
    000002f6: 	movl	iterations(%rip), %eax
    000002fc: 	movsd	%xmm0, 0x30(%rsp)
    00000302: 	cmpl	%ecx, %eax
    00000304: 	jg	.Ltmp3936 # Offset: 772
.Ltmp3943:
    0000030a: 	movq	0x58(%rsp), %rdi
    0000030f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 783
    00000314: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000031b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000322: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000329: 	je	.Ltmp3937 # Offset: 809
.Ltmp3942:
    0000032f: 	movq	-0x20(%rax), %rdi
    00000333: 	movsd	0x30(%rsp), %xmm0
    00000339: 	callq	_Z13record_resultdPKc # Offset: 825
    0000033e: 	cmpq	$0x0, 0x38(%rsp)
    00000344: 	je	.Ltmp3938 # Offset: 836
    00000346: 	movq	0x78(%rsp), %rax
    0000034b: 	subq	%fs:0x28, %rax
    00000354: 	jne	.Ltmp3939 # Offset: 852
    0000035a: 	movq	0x70(%rsp), %rsi
    0000035f: 	movq	0x38(%rsp), %rdi
    00000364: 	addq	$0x88, %rsp
    0000036b: 	popq	%rbx
    0000036c: 	popq	%rbp
    0000036d: 	subq	%rdi, %rsi
    00000370: 	popq	%r12
    00000372: 	popq	%r13
    00000374: 	popq	%r14
    00000376: 	popq	%r15
    00000378: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 888
    0000037d: 	nopl	(%rax) # Size: 3
.Ltmp3928:
    00000380: 	movsd	0x20(%rdx), %xmm1
    00000385: 	xorl	%edi, %edi
    00000387: 	comisd	%xmm0, %xmm1
    0000038b: 	seta	%dil
    0000038f: 	jmp	.Ltmp3940 # Offset: 911
.Ltmp3916:
    00000394: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp3917:
    0000039d: 	movq	$0x0, 0x70(%rsp)
    000003a6: 	pxor	%xmm0, %xmm0
    000003aa: 	movaps	%xmm0, 0x60(%rsp)
    000003af: 	jmp	.Ltmp3941 # Offset: 943
.Ltmp3938:
    000003b4: 	movq	0x78(%rsp), %rax
    000003b9: 	subq	%fs:0x28, %rax
    000003c2: 	jne	.Ltmp3939 # Offset: 962
    000003c4: 	addq	$0x88, %rsp
    000003cb: 	popq	%rbx
    000003cc: 	popq	%rbp
    000003cd: 	popq	%r12
    000003cf: 	popq	%r13
    000003d1: 	popq	%r14
    000003d3: 	popq	%r15
    000003d5: 	retq # Offset: 981
.Ltmp3937:
    000003d6: 	movq	-0x8(%rdx), %rax
    000003da: 	addq	$0x200, %rax
    000003e0: 	jmp	.Ltmp3942 # Offset: 992
.Ltmp3918:
    000003e5: 	pxor	%xmm4, %xmm4
    000003e9: 	movsd	%xmm4, 0x30(%rsp)
    000003ef: 	jmp	.Ltmp3943 # Offset: 1007
.Ltmp3939:
    000003f4: 	callq	__stack_chk_fail@PLT # Offset: 1012
    000003f9: 	endbr64
    000003fd: 	movq	%rax, %rbp
    00000400: 	movq	0x60(%rsp), %rdi
    00000405: 	movq	0x70(%rsp), %rsi
    0000040a: 	subq	%rdi, %rsi
    0000040d: 	testq	%rdi, %rdi
    00000410: 	je	.Ltmp3944 # Offset: 1040
    00000412: 	callq	_ZdlPvm@PLT # Offset: 1042
.Ltmp3944:
    00000417: 	movq	%rbp, %rdi
    0000041a: 	callq	_Unwind_Resume@PLT # Offset: 1050
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_delete_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_clearall_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 249
  State       : disassembled
  Address     : 0x286d0
  Size        : 0x487
  MaxSize     : 0x490
  Offset      : 0x286d0
  Section     : .text
  Orc Section : .local.text._Z17test_clearall_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0248:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x88, %rsp
    0000001e: 	movq	%rdx, 0x58(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x20(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x78(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	movabsq	$0x500000000, %rax
    00000044: 	divq	%rcx
    00000047: 	movq	%rax, 0x18(%rsp)
    0000004c: 	cmpq	$0x3e8, %rax
    00000052: 	ja	.Ltmp3945 # Offset: 82
    00000058: 	cmpq	$0x3, %rax
    0000005c: 	ja	.Ltmp3946 # Offset: 92
    00000062: 	movq	$0x0, 0x70(%rsp)
    0000006b: 	pxor	%xmm0, %xmm0
    0000006f: 	movq	$0x4, 0x18(%rsp)
    00000078: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp3973:
    0000007d: 	movq	0x18(%rsp), %rbx
    00000082: 	leaq	0x60(%rsp), %rdi
    00000087: 	movq	%rbx, %rsi
    0000008a: 	callq	_ZNSt6vectorIPSt3mapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 138
    0000008f: 	movq	0x60(%rsp), %rcx
    00000094: 	movl	iterations(%rip), %eax
    0000009a: 	movq	%rcx, 0x30(%rsp)
    0000009f: 	testl	%eax, %eax
    000000a1: 	jle	.Ltmp3947 # Offset: 161
    000000a7: 	addq	$0x8, %rcx
    000000ab: 	movl	%ebx, 0x44(%rsp)
    000000af: 	pxor	%xmm2, %xmm2
    000000b3: 	movl	$0x0, 0x40(%rsp)
    000000bb: 	movq	%rcx, 0x48(%rsp)
    000000c0: 	movsd	%xmm2, 0x50(%rsp)
.Ltmp3968:
    000000c6: 	movslq	0x40(%rsp), %rdx
    000000cb: 	movslq	%eax, %rcx
    000000ce: 	movq	%rdx, %rsi
    000000d1: 	addq	0x18(%rsp), %rdx
    000000d6: 	subl	%esi, %eax
    000000d8: 	cmpq	%rcx, %rdx
    000000db: 	cmovbl	0x44(%rsp), %eax
    000000e0: 	movq	0x48(%rsp), %rsi
    000000e5: 	movq	0x30(%rsp), %rcx
    000000ea: 	subl	$0x1, %eax
    000000ed: 	leaq	(%rsi,%rax,8), %rax
    000000f1: 	movq	%rcx, 0x38(%rsp)
    000000f6: 	movq	%rax, 0x28(%rsp)
    000000fb: 	movq	%rcx, 0x10(%rsp)
.Ltmp3960:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	leaq	0x8(%rax), %r12
    0000010e: 	movl	$0x0, 0x8(%rax)
    00000115: 	movq	%rax, %rbp
    00000118: 	movq	$0x0, 0x10(%rax)
    00000120: 	movq	%r12, 0x18(%rax)
    00000124: 	movq	%r12, 0x20(%rax)
    00000128: 	movq	$0x0, 0x28(%rax)
    00000130: 	movq	0x20(%rsp), %rax
    00000135: 	cmpq	%rax, %r13
    00000138: 	je	.Ltmp3948 # Offset: 312
    0000013e: 	movq	%rax, %rbx
    00000141: 	xorl	%eax, %eax
    00000143: 	testq	%rax, %rax
    00000146: 	je	.Ltmp3949 # Offset: 326
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp3958:
    00000150: 	movsd	(%rbx), %xmm0
    00000154: 	movq	%r12, %r15
    00000157: 	jmp	.Ltmp3950 # Offset: 343
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp3952:
    00000160: 	movq	%rax, %r15
    00000163: 	movq	0x10(%rax), %rax
    00000167: 	testq	%rax, %rax
    0000016a: 	je	.Ltmp3951 # Offset: 362
.Ltmp3950:
    0000016c: 	comisd	0x20(%rax), %xmm0
    00000171: 	jbe	.Ltmp3952 # Offset: 369
    00000173: 	movq	0x18(%rax), %rax
    00000177: 	testq	%rax, %rax
    0000017a: 	jne	.Ltmp3950 # Offset: 378
.Ltmp3951:
    0000017c: 	cmpq	%r15, %r12
    0000017f: 	je	.Ltmp3953 # Offset: 383
    00000181: 	movsd	0x20(%r15), %xmm1
    00000187: 	comisd	%xmm0, %xmm1
    0000018b: 	jbe	.Ltmp3954 # Offset: 395
.Ltmp3953:
    0000018d: 	movl	$0x30, %edi
    00000192: 	movq	%r15, %r14
    00000195: 	callq	_Znwm@PLT # Offset: 405
    0000019a: 	movsd	(%rbx), %xmm0
    0000019e: 	movq	%r14, %rsi
    000001a1: 	leaq	0x20(%rax), %rdx
    000001a5: 	movq	%rbp, %rdi
    000001a8: 	movq	$0x0, 0x28(%rax)
    000001b0: 	movq	%rax, %r15
    000001b3: 	movsd	%xmm0, 0x20(%rax)
    000001b8: 	movsd	%xmm0, 0x8(%rsp)
    000001be: 	callq	_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_ # Offset: 446
    000001c3: 	movq	%rax, %r14
    000001c6: 	testq	%rdx, %rdx
    000001c9: 	je	.Ltmp3955 # Offset: 457
    000001cb: 	cmpq	%rdx, %r12
    000001ce: 	je	.Ltmp3956 # Offset: 462
    000001d0: 	testq	%rax, %rax
    000001d3: 	movsd	0x8(%rsp), %xmm0
    000001d9: 	je	.Ltmp3957 # Offset: 473
.Ltmp3956:
    000001df: 	movl	$0x1, %edi
.Ltmp3972:
    000001e4: 	movq	%r12, %rcx
    000001e7: 	movq	%r15, %rsi
    000001ea: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 490
    000001ef: 	addq	$0x1, 0x28(%rbp)
.Ltmp3959:
    000001f4: 	movsd	(%rbx), %xmm0
.Ltmp3954:
    000001f8: 	addq	$0x8, %rbx
    000001fc: 	movsd	%xmm0, 0x28(%r15)
    00000202: 	cmpq	%rbx, %r13
    00000205: 	je	.Ltmp3948 # Offset: 517
    00000207: 	movq	0x10(%rbp), %rax
    0000020b: 	testq	%rax, %rax
    0000020e: 	jne	.Ltmp3958 # Offset: 526
.Ltmp3949:
    00000214: 	movq	%r12, %r15
    00000217: 	jmp	.Ltmp3953 # Offset: 535
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp3955:
    00000220: 	movq	%r15, %rdi
    00000223: 	movl	$0x30, %esi
    00000228: 	movq	%r14, %r15
    0000022b: 	callq	_ZdlPvm@PLT # Offset: 555
    00000230: 	jmp	.Ltmp3959 # Offset: 560
    00000232: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3948:
    00000238: 	movq	0x10(%rsp), %rax
    0000023d: 	movq	%rbp, (%rax)
    00000240: 	addq	$0x8, %rax
    00000244: 	movq	%rax, 0x10(%rsp)
    00000249: 	cmpq	%rax, 0x28(%rsp)
    0000024e: 	jne	.Ltmp3960 # Offset: 590
    00000254: 	callq	clock@PLT # Offset: 596
    00000259: 	movq	0x30(%rsp), %rbp
    0000025e: 	movq	0x28(%rsp), %r14
    00000263: 	movq	%rax, start_time(%rip)
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3963:
    00000270: 	movq	(%rbp), %r12
    00000274: 	movq	0x10(%r12), %rbx
    00000279: 	testq	%rbx, %rbx
    0000027c: 	je	.Ltmp3961 # Offset: 636
.Ltmp3962:
    0000027e: 	movq	0x18(%rbx), %rdi
    00000282: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 642
    00000287: 	movq	%rbx, %rdi
    0000028a: 	movq	0x10(%rbx), %rbx
    0000028e: 	movl	$0x30, %esi
    00000293: 	callq	_ZdlPvm@PLT # Offset: 659
    00000298: 	testq	%rbx, %rbx
    0000029b: 	jne	.Ltmp3962 # Offset: 667
.Ltmp3961:
    0000029d: 	leaq	0x8(%r12), %rax
    000002a2: 	addq	$0x8, %rbp
    000002a6: 	movq	$0x0, 0x10(%r12)
    000002af: 	movq	%rax, 0x18(%r12)
    000002b4: 	movq	%rax, 0x20(%r12)
    000002b9: 	movq	$0x0, 0x28(%r12)
    000002c2: 	cmpq	%rbp, %r14
    000002c5: 	jne	.Ltmp3963 # Offset: 709
    000002c7: 	callq	clock@PLT # Offset: 711
    000002cc: 	pxor	%xmm0, %xmm0
    000002d0: 	movq	0x28(%rsp), %r14
    000002d5: 	movq	0x38(%rsp), %rbp
    000002da: 	movq	%rax, end_time(%rip)
    000002e1: 	subq	start_time(%rip), %rax
    000002e8: 	cvtsi2sd	%rax, %xmm0
    000002ed: 	divsd	DATAat0x53788(%rip), %xmm0
    000002f5: 	addsd	0x50(%rsp), %xmm0
    000002fb: 	movsd	%xmm0, 0x50(%rsp)
    00000301: 	nopl	(%rax) # Size: 7
.Ltmp3967:
    00000308: 	movq	(%rbp), %r12
    0000030c: 	testq	%r12, %r12
    0000030f: 	je	.Ltmp3964 # Offset: 783
    00000311: 	movq	0x10(%r12), %rbx
    00000316: 	testq	%rbx, %rbx
    00000319: 	je	.Ltmp3965 # Offset: 793
.Ltmp3966:
    0000031b: 	movq	0x18(%rbx), %rdi
    0000031f: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 799
    00000324: 	movq	%rbx, %rdi
    00000327: 	movq	0x10(%rbx), %rbx
    0000032b: 	movl	$0x30, %esi
    00000330: 	callq	_ZdlPvm@PLT # Offset: 816
    00000335: 	testq	%rbx, %rbx
    00000338: 	jne	.Ltmp3966 # Offset: 824
.Ltmp3965:
    0000033a: 	movl	$0x30, %esi
    0000033f: 	movq	%r12, %rdi
    00000342: 	callq	_ZdlPvm@PLT # Offset: 834
.Ltmp3964:
    00000347: 	movq	$0x0, (%rbp)
    0000034f: 	addq	$0x8, %rbp
    00000353: 	cmpq	%rbp, %r14
    00000356: 	jne	.Ltmp3967 # Offset: 854
    00000358: 	movl	0x18(%rsp), %ecx
    0000035c: 	movl	iterations(%rip), %eax
    00000362: 	addl	%ecx, 0x40(%rsp)
    00000366: 	movl	0x40(%rsp), %ecx
    0000036a: 	cmpl	%ecx, %eax
    0000036c: 	jg	.Ltmp3968 # Offset: 876
.Ltmp3975:
    00000372: 	movq	0x58(%rsp), %rdi
    00000377: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 887
    0000037c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000383: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000038a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000391: 	je	.Ltmp3969 # Offset: 913
.Ltmp3974:
    00000397: 	movq	-0x20(%rax), %rdi
    0000039b: 	movsd	0x50(%rsp), %xmm0
    000003a1: 	callq	_Z13record_resultdPKc # Offset: 929
    000003a6: 	cmpq	$0x0, 0x30(%rsp)
    000003ac: 	je	.Ltmp3970 # Offset: 940
    000003ae: 	movq	0x78(%rsp), %rax
    000003b3: 	subq	%fs:0x28, %rax
    000003bc: 	jne	.Ltmp3971 # Offset: 956
    000003c2: 	movq	0x70(%rsp), %rsi
    000003c7: 	movq	0x30(%rsp), %rdi
    000003cc: 	addq	$0x88, %rsp
    000003d3: 	popq	%rbx
    000003d4: 	popq	%rbp
    000003d5: 	subq	%rdi, %rsi
    000003d8: 	popq	%r12
    000003da: 	popq	%r13
    000003dc: 	popq	%r14
    000003de: 	popq	%r15
    000003e0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 992
    000003e5: 	nopl	(%rax) # Size: 3
.Ltmp3957:
    000003e8: 	movsd	0x20(%rdx), %xmm1
    000003ed: 	xorl	%edi, %edi
    000003ef: 	comisd	%xmm0, %xmm1
    000003f3: 	seta	%dil
    000003f7: 	jmp	.Ltmp3972 # Offset: 1015
.Ltmp3945:
    000003fc: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp3946:
    00000405: 	movq	$0x0, 0x70(%rsp)
    0000040e: 	pxor	%xmm0, %xmm0
    00000412: 	movaps	%xmm0, 0x60(%rsp)
    00000417: 	jmp	.Ltmp3973 # Offset: 1047
.Ltmp3970:
    0000041c: 	movq	0x78(%rsp), %rax
    00000421: 	subq	%fs:0x28, %rax
    0000042a: 	jne	.Ltmp3971 # Offset: 1066
    0000042c: 	addq	$0x88, %rsp
    00000433: 	popq	%rbx
    00000434: 	popq	%rbp
    00000435: 	popq	%r12
    00000437: 	popq	%r13
    00000439: 	popq	%r14
    0000043b: 	popq	%r15
    0000043d: 	retq # Offset: 1085
.Ltmp3969:
    0000043e: 	movq	-0x8(%rdx), %rax
    00000442: 	addq	$0x200, %rax
    00000448: 	jmp	.Ltmp3974 # Offset: 1096
.Ltmp3947:
    0000044d: 	pxor	%xmm4, %xmm4
    00000451: 	movsd	%xmm4, 0x50(%rsp)
    00000457: 	jmp	.Ltmp3975 # Offset: 1111
.Ltmp3971:
    0000045c: 	callq	__stack_chk_fail@PLT # Offset: 1116
    00000461: 	endbr64
    00000465: 	movq	%rax, %rbp
    00000468: 	movq	0x60(%rsp), %rdi
    0000046d: 	movq	0x70(%rsp), %rsi
    00000472: 	subq	%rdi, %rsi
    00000475: 	testq	%rdi, %rdi
    00000478: 	je	.Ltmp3976 # Offset: 1144
    0000047a: 	callq	_ZdlPvm@PLT # Offset: 1146
.Ltmp3976:
    0000047f: 	movq	%rbp, %rdi
    00000482: 	callq	_Unwind_Resume@PLT # Offset: 1154
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_clearall_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_eraseall_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 250
  State       : disassembled
  Address     : 0x28b60
  Size        : 0x45f
  MaxSize     : 0x460
  Offset      : 0x28b60
  Section     : .text
  Orc Section : .local.text._Z17test_eraseall_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0249:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x88, %rsp
    0000001e: 	movq	%rdx, 0x58(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x20(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x78(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	movabsq	$0x500000000, %rax
    00000044: 	divq	%rcx
    00000047: 	movq	%rax, 0x18(%rsp)
    0000004c: 	cmpq	$0x3e8, %rax
    00000052: 	ja	.Ltmp3977 # Offset: 82
    00000058: 	cmpq	$0x3, %rax
    0000005c: 	ja	.Ltmp3978 # Offset: 92
    00000062: 	movq	$0x0, 0x70(%rsp)
    0000006b: 	pxor	%xmm0, %xmm0
    0000006f: 	movq	$0x4, 0x18(%rsp)
    00000078: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp4003:
    0000007d: 	movq	0x18(%rsp), %rbx
    00000082: 	leaq	0x60(%rsp), %rdi
    00000087: 	movq	%rbx, %rsi
    0000008a: 	callq	_ZNSt6vectorIPSt3mapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 138
    0000008f: 	movq	0x60(%rsp), %rcx
    00000094: 	movl	iterations(%rip), %eax
    0000009a: 	movq	%rcx, 0x30(%rsp)
    0000009f: 	testl	%eax, %eax
    000000a1: 	jle	.Ltmp3979 # Offset: 161
    000000a7: 	addq	$0x8, %rcx
    000000ab: 	movl	%ebx, 0x44(%rsp)
    000000af: 	pxor	%xmm2, %xmm2
    000000b3: 	movl	$0x0, 0x40(%rsp)
    000000bb: 	movq	%rcx, 0x48(%rsp)
    000000c0: 	movsd	%xmm2, 0x50(%rsp)
.Ltmp3998:
    000000c6: 	movslq	0x40(%rsp), %rdx
    000000cb: 	movslq	%eax, %rcx
    000000ce: 	movq	%rdx, %rsi
    000000d1: 	addq	0x18(%rsp), %rdx
    000000d6: 	subl	%esi, %eax
    000000d8: 	cmpq	%rcx, %rdx
    000000db: 	cmovbl	0x44(%rsp), %eax
    000000e0: 	movq	0x48(%rsp), %rsi
    000000e5: 	movq	0x30(%rsp), %rcx
    000000ea: 	subl	$0x1, %eax
    000000ed: 	leaq	(%rsi,%rax,8), %rax
    000000f1: 	movq	%rcx, 0x38(%rsp)
    000000f6: 	movq	%rax, 0x28(%rsp)
    000000fb: 	movq	%rcx, 0x10(%rsp)
.Ltmp3992:
    00000100: 	movl	$0x30, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	leaq	0x8(%rax), %r12
    0000010e: 	movl	$0x0, 0x8(%rax)
    00000115: 	movq	%rax, %rbp
    00000118: 	movq	$0x0, 0x10(%rax)
    00000120: 	movq	%r12, 0x18(%rax)
    00000124: 	movq	%r12, 0x20(%rax)
    00000128: 	movq	$0x0, 0x28(%rax)
    00000130: 	movq	0x20(%rsp), %rax
    00000135: 	cmpq	%rax, %r13
    00000138: 	je	.Ltmp3980 # Offset: 312
    0000013e: 	movq	%rax, %rbx
    00000141: 	xorl	%eax, %eax
    00000143: 	testq	%rax, %rax
    00000146: 	je	.Ltmp3981 # Offset: 326
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp3990:
    00000150: 	movsd	(%rbx), %xmm0
    00000154: 	movq	%r12, %r15
    00000157: 	jmp	.Ltmp3982 # Offset: 343
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp3984:
    00000160: 	movq	%rax, %r15
    00000163: 	movq	0x10(%rax), %rax
    00000167: 	testq	%rax, %rax
    0000016a: 	je	.Ltmp3983 # Offset: 362
.Ltmp3982:
    0000016c: 	comisd	0x20(%rax), %xmm0
    00000171: 	jbe	.Ltmp3984 # Offset: 369
    00000173: 	movq	0x18(%rax), %rax
    00000177: 	testq	%rax, %rax
    0000017a: 	jne	.Ltmp3982 # Offset: 378
.Ltmp3983:
    0000017c: 	cmpq	%r15, %r12
    0000017f: 	je	.Ltmp3985 # Offset: 383
    00000181: 	movsd	0x20(%r15), %xmm1
    00000187: 	comisd	%xmm0, %xmm1
    0000018b: 	jbe	.Ltmp3986 # Offset: 395
.Ltmp3985:
    0000018d: 	movl	$0x30, %edi
    00000192: 	movq	%r15, %r14
    00000195: 	callq	_Znwm@PLT # Offset: 405
    0000019a: 	movsd	(%rbx), %xmm0
    0000019e: 	movq	%r14, %rsi
    000001a1: 	leaq	0x20(%rax), %rdx
    000001a5: 	movq	%rbp, %rdi
    000001a8: 	movq	$0x0, 0x28(%rax)
    000001b0: 	movq	%rax, %r15
    000001b3: 	movsd	%xmm0, 0x20(%rax)
    000001b8: 	movsd	%xmm0, 0x8(%rsp)
    000001be: 	callq	_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_ # Offset: 446
    000001c3: 	movq	%rax, %r14
    000001c6: 	testq	%rdx, %rdx
    000001c9: 	je	.Ltmp3987 # Offset: 457
    000001cb: 	cmpq	%rdx, %r12
    000001ce: 	je	.Ltmp3988 # Offset: 462
    000001d0: 	testq	%rax, %rax
    000001d3: 	movsd	0x8(%rsp), %xmm0
    000001d9: 	je	.Ltmp3989 # Offset: 473
.Ltmp3988:
    000001df: 	movl	$0x1, %edi
.Ltmp4002:
    000001e4: 	movq	%r12, %rcx
    000001e7: 	movq	%r15, %rsi
    000001ea: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 490
    000001ef: 	addq	$0x1, 0x28(%rbp)
.Ltmp3991:
    000001f4: 	movsd	(%rbx), %xmm0
.Ltmp3986:
    000001f8: 	addq	$0x8, %rbx
    000001fc: 	movsd	%xmm0, 0x28(%r15)
    00000202: 	cmpq	%rbx, %r13
    00000205: 	je	.Ltmp3980 # Offset: 517
    00000207: 	movq	0x10(%rbp), %rax
    0000020b: 	testq	%rax, %rax
    0000020e: 	jne	.Ltmp3990 # Offset: 526
.Ltmp3981:
    00000214: 	movq	%r12, %r15
    00000217: 	jmp	.Ltmp3985 # Offset: 535
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp3987:
    00000220: 	movq	%r15, %rdi
    00000223: 	movl	$0x30, %esi
    00000228: 	movq	%r14, %r15
    0000022b: 	callq	_ZdlPvm@PLT # Offset: 555
    00000230: 	jmp	.Ltmp3991 # Offset: 560
    00000232: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3980:
    00000238: 	movq	0x10(%rsp), %rax
    0000023d: 	movq	%rbp, (%rax)
    00000240: 	addq	$0x8, %rax
    00000244: 	movq	%rax, 0x10(%rsp)
    00000249: 	cmpq	%rax, 0x28(%rsp)
    0000024e: 	jne	.Ltmp3992 # Offset: 590
    00000254: 	callq	clock@PLT # Offset: 596
    00000259: 	movq	0x30(%rsp), %rbp
    0000025e: 	movq	0x28(%rsp), %r14
    00000263: 	movq	%rax, start_time(%rip)
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3993:
    00000270: 	movq	(%rbp), %rbx
    00000274: 	addq	$0x8, %rbp
    00000278: 	movq	0x10(%rbx), %rdi
    0000027c: 	leaq	0x8(%rbx), %r12
    00000280: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 640
    00000285: 	movq	$0x0, 0x10(%rbx)
    0000028d: 	movq	%r12, 0x18(%rbx)
    00000291: 	movq	%r12, 0x20(%rbx)
    00000295: 	movq	$0x0, 0x28(%rbx)
    0000029d: 	cmpq	%rbp, %r14
    000002a0: 	jne	.Ltmp3993 # Offset: 672
    000002a2: 	callq	clock@PLT # Offset: 674
    000002a7: 	pxor	%xmm0, %xmm0
    000002ab: 	movq	0x28(%rsp), %r14
    000002b0: 	movq	0x38(%rsp), %rbp
    000002b5: 	movq	%rax, end_time(%rip)
    000002bc: 	subq	start_time(%rip), %rax
    000002c3: 	cvtsi2sd	%rax, %xmm0
    000002c8: 	divsd	DATAat0x53788(%rip), %xmm0
    000002d0: 	addsd	0x50(%rsp), %xmm0
    000002d6: 	movsd	%xmm0, 0x50(%rsp)
    000002dc: 	nopl	(%rax) # Size: 4
.Ltmp3997:
    000002e0: 	movq	(%rbp), %r12
    000002e4: 	testq	%r12, %r12
    000002e7: 	je	.Ltmp3994 # Offset: 743
    000002e9: 	movq	0x10(%r12), %rbx
    000002ee: 	testq	%rbx, %rbx
    000002f1: 	je	.Ltmp3995 # Offset: 753
.Ltmp3996:
    000002f3: 	movq	0x18(%rbx), %rdi
    000002f7: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 759
    000002fc: 	movq	%rbx, %rdi
    000002ff: 	movq	0x10(%rbx), %rbx
    00000303: 	movl	$0x30, %esi
    00000308: 	callq	_ZdlPvm@PLT # Offset: 776
    0000030d: 	testq	%rbx, %rbx
    00000310: 	jne	.Ltmp3996 # Offset: 784
.Ltmp3995:
    00000312: 	movl	$0x30, %esi
    00000317: 	movq	%r12, %rdi
    0000031a: 	callq	_ZdlPvm@PLT # Offset: 794
.Ltmp3994:
    0000031f: 	movq	$0x0, (%rbp)
    00000327: 	addq	$0x8, %rbp
    0000032b: 	cmpq	%rbp, %r14
    0000032e: 	jne	.Ltmp3997 # Offset: 814
    00000330: 	movl	0x18(%rsp), %ecx
    00000334: 	movl	iterations(%rip), %eax
    0000033a: 	addl	%ecx, 0x40(%rsp)
    0000033e: 	movl	0x40(%rsp), %ecx
    00000342: 	cmpl	%ecx, %eax
    00000344: 	jg	.Ltmp3998 # Offset: 836
.Ltmp4005:
    0000034a: 	movq	0x58(%rsp), %rdi
    0000034f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 847
    00000354: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000035b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000362: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000369: 	je	.Ltmp3999 # Offset: 873
.Ltmp4004:
    0000036f: 	movq	-0x20(%rax), %rdi
    00000373: 	movsd	0x50(%rsp), %xmm0
    00000379: 	callq	_Z13record_resultdPKc # Offset: 889
    0000037e: 	cmpq	$0x0, 0x30(%rsp)
    00000384: 	je	.Ltmp4000 # Offset: 900
    00000386: 	movq	0x78(%rsp), %rax
    0000038b: 	subq	%fs:0x28, %rax
    00000394: 	jne	.Ltmp4001 # Offset: 916
    0000039a: 	movq	0x70(%rsp), %rsi
    0000039f: 	movq	0x30(%rsp), %rdi
    000003a4: 	addq	$0x88, %rsp
    000003ab: 	popq	%rbx
    000003ac: 	popq	%rbp
    000003ad: 	subq	%rdi, %rsi
    000003b0: 	popq	%r12
    000003b2: 	popq	%r13
    000003b4: 	popq	%r14
    000003b6: 	popq	%r15
    000003b8: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 952
    000003bd: 	nopl	(%rax) # Size: 3
.Ltmp3989:
    000003c0: 	movsd	0x20(%rdx), %xmm1
    000003c5: 	xorl	%edi, %edi
    000003c7: 	comisd	%xmm0, %xmm1
    000003cb: 	seta	%dil
    000003cf: 	jmp	.Ltmp4002 # Offset: 975
.Ltmp3977:
    000003d4: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp3978:
    000003dd: 	movq	$0x0, 0x70(%rsp)
    000003e6: 	pxor	%xmm0, %xmm0
    000003ea: 	movaps	%xmm0, 0x60(%rsp)
    000003ef: 	jmp	.Ltmp4003 # Offset: 1007
.Ltmp4000:
    000003f4: 	movq	0x78(%rsp), %rax
    000003f9: 	subq	%fs:0x28, %rax
    00000402: 	jne	.Ltmp4001 # Offset: 1026
    00000404: 	addq	$0x88, %rsp
    0000040b: 	popq	%rbx
    0000040c: 	popq	%rbp
    0000040d: 	popq	%r12
    0000040f: 	popq	%r13
    00000411: 	popq	%r14
    00000413: 	popq	%r15
    00000415: 	retq # Offset: 1045
.Ltmp3999:
    00000416: 	movq	-0x8(%rdx), %rax
    0000041a: 	addq	$0x200, %rax
    00000420: 	jmp	.Ltmp4004 # Offset: 1056
.Ltmp3979:
    00000425: 	pxor	%xmm4, %xmm4
    00000429: 	movsd	%xmm4, 0x50(%rsp)
    0000042f: 	jmp	.Ltmp4005 # Offset: 1071
.Ltmp4001:
    00000434: 	callq	__stack_chk_fail@PLT # Offset: 1076
    00000439: 	endbr64
    0000043d: 	movq	%rax, %rbp
    00000440: 	movq	0x60(%rsp), %rdi
    00000445: 	movq	0x70(%rsp), %rsi
    0000044a: 	subq	%rdi, %rsi
    0000044d: 	testq	%rdi, %rdi
    00000450: 	je	.Ltmp4006 # Offset: 1104
    00000452: 	callq	_ZdlPvm@PLT # Offset: 1106
.Ltmp4006:
    00000457: 	movq	%rbp, %rdi
    0000045a: 	callq	_Unwind_Resume@PLT # Offset: 1114
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_eraseall_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_erase_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 251
  State       : disassembled
  Address     : 0x28fc0
  Size        : 0x575
  MaxSize     : 0x580
  Offset      : 0x28fc0
  Section     : .text
  Orc Section : .local.text._Z14test_erase_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0250:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xa8, %rsp
    00000015: 	movq	%rdx, 0x38(%rsp)
    0000001a: 	xorl	%edx, %edx
    0000001c: 	movq	%rcx, 0x10(%rsp)
    00000021: 	movq	%rsi, %rcx
    00000024: 	movq	%rdi, 0x30(%rsp)
    00000029: 	subq	%rdi, %rcx
    0000002c: 	movq	%rsi, 0x8(%rsp)
    00000031: 	movq	%r8, 0x60(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x98(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movabsq	$0x500000000, %rax
    00000053: 	divq	%rcx
    00000056: 	movq	%rax, 0x40(%rsp)
    0000005b: 	cmpq	$0x3e8, %rax
    00000061: 	ja	.Ltmp4007 # Offset: 97
    00000067: 	cmpq	$0x3, %rax
    0000006b: 	ja	.Ltmp4008 # Offset: 107
    00000071: 	movq	$0x0, 0x90(%rsp)
    0000007d: 	pxor	%xmm0, %xmm0
    00000081: 	movq	$0x4, 0x40(%rsp)
    0000008a: 	movaps	%xmm0, 0x80(%rsp)
.Ltmp4048:
    00000092: 	movq	0x40(%rsp), %rbx
    00000097: 	leaq	0x80(%rsp), %rdi
    0000009f: 	movq	%rbx, %rsi
    000000a2: 	callq	_ZNSt6vectorIPSt3mapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 162
    000000a7: 	movl	iterations(%rip), %eax
    000000ad: 	testl	%eax, %eax
    000000af: 	jle	.Ltmp4009 # Offset: 175
    000000b5: 	leaq	0x78(%rsp), %rcx
    000000ba: 	movl	%ebx, 0x5c(%rsp)
    000000be: 	pxor	%xmm2, %xmm2
    000000c2: 	movl	$0x0, 0x58(%rsp)
    000000ca: 	movq	%rcx, 0x18(%rsp)
    000000cf: 	movsd	%xmm2, 0x48(%rsp)
.Ltmp4044:
    000000d5: 	movslq	0x58(%rsp), %rdx
    000000da: 	movslq	%eax, %rcx
    000000dd: 	movq	0x80(%rsp), %r15
    000000e5: 	movq	%rdx, %rbx
    000000e8: 	addq	0x40(%rsp), %rdx
    000000ed: 	movq	%r15, 0x50(%rsp)
    000000f2: 	subl	%ebx, %eax
    000000f4: 	cmpq	%rcx, %rdx
    000000f7: 	leaq	0x8(%r15), %rcx
    000000fb: 	cmovbl	0x5c(%rsp), %eax
    00000100: 	movq	%rcx, 0x68(%rsp)
    00000105: 	subl	$0x1, %eax
    00000108: 	leaq	(%rcx,%rax,8), %rax
    0000010c: 	movq	%rax, 0x28(%rsp)
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp4018:
    00000118: 	movl	$0x30, %edi
    0000011d: 	callq	_Znwm@PLT # Offset: 285
    00000122: 	leaq	0x8(%rax), %r12
    00000126: 	movl	$0x0, 0x8(%rax)
    0000012d: 	movq	%rax, %rbp
    00000130: 	movq	$0x0, 0x10(%rax)
    00000138: 	movq	%r12, 0x18(%rax)
    0000013c: 	movq	%r12, 0x20(%rax)
    00000140: 	movq	$0x0, 0x28(%rax)
    00000148: 	movq	0x30(%rsp), %rax
    0000014d: 	cmpq	%rax, 0x8(%rsp)
    00000152: 	je	.Ltmp4010 # Offset: 338
    00000158: 	xorl	%edx, %edx
    0000015a: 	movq	%rax, %rbx
    0000015d: 	testq	%rdx, %rdx
    00000160: 	je	.Ltmp4011 # Offset: 352
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4017:
    00000168: 	movsd	(%rbx), %xmm0
    0000016c: 	movq	%r12, %rsi
    0000016f: 	jmp	.Ltmp4012 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp4014:
    00000178: 	movq	%rdx, %rsi
    0000017b: 	movq	0x10(%rdx), %rdx
    0000017f: 	testq	%rdx, %rdx
    00000182: 	je	.Ltmp4013 # Offset: 386
.Ltmp4012:
    00000184: 	comisd	0x20(%rdx), %xmm0
    00000189: 	jbe	.Ltmp4014 # Offset: 393
    0000018b: 	movq	0x18(%rdx), %rdx
    0000018f: 	testq	%rdx, %rdx
    00000192: 	jne	.Ltmp4012 # Offset: 402
.Ltmp4013:
    00000194: 	cmpq	%rsi, %r12
    00000197: 	je	.Ltmp4015 # Offset: 407
    00000199: 	movsd	0x20(%rsi), %xmm1
    0000019e: 	comisd	%xmm0, %xmm1
    000001a2: 	jbe	.Ltmp4016 # Offset: 418
.Ltmp4015:
    000001a4: 	movq	0x18(%rsp), %rdx
    000001a9: 	movq	%rbp, %rdi
    000001ac: 	movq	%rbx, 0x78(%rsp)
    000001b1: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1" # Offset: 433
    000001b6: 	movsd	(%rbx), %xmm0
    000001ba: 	movq	%rax, %rsi
.Ltmp4016:
    000001bd: 	movsd	%xmm0, 0x28(%rsi)
    000001c2: 	addq	$0x8, %rbx
    000001c6: 	cmpq	%rbx, 0x8(%rsp)
    000001cb: 	je	.Ltmp4010 # Offset: 459
    000001cd: 	movq	0x10(%rbp), %rdx
    000001d1: 	testq	%rdx, %rdx
    000001d4: 	jne	.Ltmp4017 # Offset: 468
.Ltmp4011:
    000001d6: 	movq	%r12, %rsi
    000001d9: 	jmp	.Ltmp4015 # Offset: 473
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4010:
    000001e0: 	movq	%rbp, (%r15)
    000001e3: 	addq	$0x8, %r15
    000001e7: 	cmpq	%r15, 0x28(%rsp)
    000001ec: 	jne	.Ltmp4018 # Offset: 492
    000001f2: 	callq	clock@PLT # Offset: 498
    000001f7: 	movq	0x10(%rsp), %rcx
    000001fc: 	movq	%rax, start_time(%rip)
    00000203: 	cmpq	%rcx, 0x38(%rsp)
    00000208: 	je	.Ltmp4019 # Offset: 520
    0000020e: 	movq	0x50(%rsp), %rax
    00000213: 	movq	%rax, 0x20(%rsp)
.Ltmp4028:
    00000218: 	movq	0x20(%rsp), %rax
    0000021d: 	movq	0x38(%rsp), %rbp
    00000222: 	movq	(%rax), %r14
    00000225: 	leaq	0x8(%r14), %rbx
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp4027:
    00000230: 	movq	0x10(%r14), %r15
    00000234: 	addq	$0x8, %rbp
    00000238: 	testq	%r15, %r15
    0000023b: 	je	.Ltmp4020 # Offset: 571
    00000241: 	movsd	-0x8(%rbp), %xmm1
    00000246: 	movq	%rbx, %r13
    00000249: 	movq	%r15, %r12
    0000024c: 	jmp	.Ltmp4021 # Offset: 588
    0000024e: 	nop # Size: 2
.Ltmp4023:
    00000250: 	movq	0x18(%r12), %r12
    00000255: 	testq	%r12, %r12
    00000258: 	je	.Ltmp4022 # Offset: 600
.Ltmp4021:
    0000025a: 	movsd	0x20(%r12), %xmm0
    00000261: 	comisd	%xmm0, %xmm1
    00000265: 	ja	.Ltmp4023 # Offset: 613
    00000267: 	comisd	%xmm1, %xmm0
    0000026b: 	movq	0x10(%r12), %rax
    00000270: 	jbe	.Ltmp4024 # Offset: 624
    00000276: 	movq	%r12, %r13
    00000279: 	movq	%rax, %r12
    0000027c: 	testq	%r12, %r12
    0000027f: 	jne	.Ltmp4021 # Offset: 639
.Ltmp4022:
    00000281: 	cmpq	%r13, 0x18(%r14)
    00000285: 	jne	.Ltmp4025 # Offset: 645
    00000287: 	cmpq	%r13, %rbx
    0000028a: 	je	.Ltmp4026 # Offset: 650
.Ltmp4025:
    00000290: 	cmpq	%rbp, 0x10(%rsp)
    00000295: 	jne	.Ltmp4027 # Offset: 661
    00000297: 	addq	$0x8, 0x20(%rsp)
    0000029d: 	movq	0x20(%rsp), %rax
    000002a2: 	cmpq	%rax, 0x28(%rsp)
    000002a7: 	jne	.Ltmp4028 # Offset: 679
.Ltmp4019:
    000002ad: 	callq	clock@PLT # Offset: 685
    000002b2: 	pxor	%xmm0, %xmm0
    000002b6: 	movq	0x28(%rsp), %r14
    000002bb: 	movq	0x50(%rsp), %r12
    000002c0: 	movq	%rax, end_time(%rip)
    000002c7: 	subq	start_time(%rip), %rax
    000002ce: 	cvtsi2sd	%rax, %xmm0
    000002d3: 	divsd	DATAat0x53788(%rip), %xmm0
    000002db: 	addsd	0x48(%rsp), %xmm0
    000002e1: 	movq	0x68(%rsp), %rbp
    000002e6: 	movsd	%xmm0, 0x48(%rsp)
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp4033:
    000002f0: 	movq	(%r12), %r13
    000002f4: 	testq	%r13, %r13
    000002f7: 	je	.Ltmp4029 # Offset: 759
    000002f9: 	movq	0x10(%r13), %rbx
    000002fd: 	testq	%rbx, %rbx
    00000300: 	je	.Ltmp4030 # Offset: 768
.Ltmp4031:
    00000302: 	movq	0x18(%rbx), %rdi
    00000306: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 774
    0000030b: 	movq	%rbx, %rdi
    0000030e: 	movq	0x10(%rbx), %rbx
    00000312: 	movl	$0x30, %esi
    00000317: 	callq	_ZdlPvm@PLT # Offset: 791
    0000031c: 	testq	%rbx, %rbx
    0000031f: 	jne	.Ltmp4031 # Offset: 799
.Ltmp4030:
    00000321: 	movl	$0x30, %esi
    00000326: 	movq	%r13, %rdi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp4029:
    0000032e: 	movq	$0x0, (%r12)
    00000336: 	movq	%rbp, %r12
    00000339: 	cmpq	%rbp, %r14
    0000033c: 	je	.Ltmp4032 # Offset: 828
    00000342: 	addq	$0x8, %rbp
    00000346: 	jmp	.Ltmp4033 # Offset: 838
    00000348: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4026:
    00000350: 	movq	0x18(%r15), %rdi
    00000354: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 852
    00000359: 	movq	%r15, %rdi
    0000035c: 	movq	0x10(%r15), %r15
    00000360: 	movl	$0x30, %esi
    00000365: 	callq	_ZdlPvm@PLT # Offset: 869
    0000036a: 	testq	%r15, %r15
    0000036d: 	jne	.Ltmp4026 # Offset: 877
.Ltmp4043:
    0000036f: 	movq	$0x0, 0x10(%r14)
    00000377: 	movq	%rbx, 0x18(%r14)
    0000037b: 	movq	%rbx, 0x20(%r14)
    0000037f: 	movq	$0x0, 0x28(%r14)
    00000387: 	jmp	.Ltmp4025 # Offset: 903
    0000038c: 	nopl	(%rax) # Size: 4
.Ltmp4024:
    00000390: 	movq	0x18(%r12), %rcx
    00000395: 	nopl	(%rax) # Size: 3
.Ltmp4042:
    00000398: 	testq	%rcx, %rcx
    0000039b: 	je	.Ltmp4034 # Offset: 923
.Ltmp4036:
    0000039d: 	movsd	0x20(%rcx), %xmm0
    000003a2: 	comisd	%xmm1, %xmm0
    000003a6: 	jbe	.Ltmp4035 # Offset: 934
    000003ac: 	movq	%rcx, %r13
    000003af: 	movq	0x10(%rcx), %rcx
    000003b3: 	testq	%rcx, %rcx
    000003b6: 	jne	.Ltmp4036 # Offset: 950
    000003b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4034:
    000003c0: 	testq	%rax, %rax
    000003c3: 	je	.Ltmp4037 # Offset: 963
.Ltmp4039:
    000003c5: 	comisd	0x20(%rax), %xmm1
    000003ca: 	ja	.Ltmp4038 # Offset: 970
    000003cc: 	movq	%rax, %r12
    000003cf: 	movq	0x10(%rax), %rax
    000003d3: 	testq	%rax, %rax
    000003d6: 	jne	.Ltmp4039 # Offset: 982
.Ltmp4037:
    000003d8: 	cmpq	%r12, 0x18(%r14)
    000003dc: 	jne	.Ltmp4040 # Offset: 988
    000003de: 	cmpq	%r13, %rbx
    000003e1: 	je	.Ltmp4026 # Offset: 993
.Ltmp4040:
    000003e7: 	cmpq	%r12, %r13
    000003ea: 	je	.Ltmp4025 # Offset: 1002
.Ltmp4041:
    000003f0: 	movq	%r12, %rdi
    000003f3: 	movq	%r12, %r15
    000003f6: 	callq	_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@PLT # Offset: 1014
    000003fb: 	movq	%rbx, %rsi
    000003fe: 	movq	%r15, %rdi
    00000401: 	movq	%rax, %r12
    00000404: 	callq	_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_@PLT # Offset: 1028
    00000409: 	movl	$0x30, %esi
    0000040e: 	movq	%rax, %rdi
    00000411: 	callq	_ZdlPvm@PLT # Offset: 1041
    00000416: 	subq	$0x1, 0x28(%r14)
    0000041b: 	cmpq	%r13, %r12
    0000041e: 	jne	.Ltmp4041 # Offset: 1054
    00000420: 	jmp	.Ltmp4025 # Offset: 1056
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp4038:
    00000428: 	movq	0x18(%rax), %rax
    0000042c: 	jmp	.Ltmp4034 # Offset: 1068
    0000042e: 	nop # Size: 2
.Ltmp4035:
    00000430: 	movq	0x18(%rcx), %rcx
    00000434: 	jmp	.Ltmp4042 # Offset: 1076
.Ltmp4020:
    00000439: 	cmpq	0x18(%r14), %rbx
    0000043d: 	jne	.Ltmp4025 # Offset: 1085
    00000443: 	jmp	.Ltmp4043 # Offset: 1091
.Ltmp4032:
    00000448: 	movl	0x40(%rsp), %ecx
    0000044c: 	movl	iterations(%rip), %eax
    00000452: 	addl	%ecx, 0x58(%rsp)
    00000456: 	movl	0x58(%rsp), %ecx
    0000045a: 	cmpl	%ecx, %eax
    0000045c: 	jg	.Ltmp4044 # Offset: 1116
.Ltmp4050:
    00000462: 	movq	0x60(%rsp), %rdi
    00000467: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1127
    0000046c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000473: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000047a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000481: 	je	.Ltmp4045 # Offset: 1153
.Ltmp4049:
    00000487: 	movq	-0x20(%rax), %rdi
    0000048b: 	movsd	0x48(%rsp), %xmm0
    00000491: 	callq	_Z13record_resultdPKc # Offset: 1169
    00000496: 	movq	0x80(%rsp), %rdi
    0000049e: 	testq	%rdi, %rdi
    000004a1: 	je	.Ltmp4046 # Offset: 1185
    000004a3: 	movq	0x98(%rsp), %rax
    000004ab: 	subq	%fs:0x28, %rax
    000004b4: 	jne	.Ltmp4047 # Offset: 1204
    000004ba: 	movq	0x90(%rsp), %rsi
    000004c2: 	addq	$0xa8, %rsp
    000004c9: 	popq	%rbx
    000004ca: 	popq	%rbp
    000004cb: 	subq	%rdi, %rsi
    000004ce: 	popq	%r12
    000004d0: 	popq	%r13
    000004d2: 	popq	%r14
    000004d4: 	popq	%r15
    000004d6: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1238
.Ltmp4007:
    000004db: 	movq	$0x3e8, 0x40(%rsp)
.Ltmp4008:
    000004e4: 	movq	$0x0, 0x90(%rsp)
    000004f0: 	pxor	%xmm0, %xmm0
    000004f4: 	movaps	%xmm0, 0x80(%rsp)
    000004fc: 	jmp	.Ltmp4048 # Offset: 1276
.Ltmp4046:
    00000501: 	movq	0x98(%rsp), %rax
    00000509: 	subq	%fs:0x28, %rax
    00000512: 	jne	.Ltmp4047 # Offset: 1298
    00000514: 	addq	$0xa8, %rsp
    0000051b: 	popq	%rbx
    0000051c: 	popq	%rbp
    0000051d: 	popq	%r12
    0000051f: 	popq	%r13
    00000521: 	popq	%r14
    00000523: 	popq	%r15
    00000525: 	retq # Offset: 1317
.Ltmp4045:
    00000526: 	movq	-0x8(%rdx), %rax
    0000052a: 	addq	$0x200, %rax
    00000530: 	jmp	.Ltmp4049 # Offset: 1328
.Ltmp4009:
    00000535: 	pxor	%xmm4, %xmm4
    00000539: 	movsd	%xmm4, 0x48(%rsp)
    0000053f: 	jmp	.Ltmp4050 # Offset: 1343
.Ltmp4047:
    00000544: 	callq	__stack_chk_fail@PLT # Offset: 1348
    00000549: 	endbr64
    0000054d: 	movq	%rax, %rbp
    00000550: 	movq	0x80(%rsp), %rdi
    00000558: 	movq	0x90(%rsp), %rsi
    00000560: 	subq	%rdi, %rsi
    00000563: 	testq	%rdi, %rdi
    00000566: 	je	.Ltmp4051 # Offset: 1382
    00000568: 	callq	_ZdlPvm@PLT # Offset: 1384
.Ltmp4051:
    0000056d: 	movq	%rbp, %rdi
    00000570: 	callq	_Unwind_Resume@PLT # Offset: 1392
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_erase_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_accum_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 252
  State       : disassembled
  Address     : 0x29540
  Size        : 0x25e
  MaxSize     : 0x260
  Offset      : 0x29540
  Section     : .text
  Orc Section : .local.text._Z14test_accum_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0251:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x78, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x68(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x38(%rsp), %rbx
    0000002a: 	movl	$0x0, 0x38(%rsp)
    00000032: 	movq	$0x0, 0x40(%rsp)
    0000003b: 	movq	%rbx, 0x48(%rsp)
    00000040: 	movq	%rbx, 0x50(%rsp)
    00000045: 	movq	$0x0, 0x58(%rsp)
    0000004e: 	cmpq	%rsi, %rdi
    00000051: 	je	.Ltmp4052 # Offset: 81
    00000057: 	pxor	%xmm4, %xmm4
    0000005b: 	xorl	%edx, %edx
    0000005d: 	movq	%rdi, %rbp
    00000060: 	movq	%rsi, %r12
    00000063: 	movsd	%xmm4, 0x18(%rsp)
    00000069: 	leaq	0x28(%rsp), %r14
    0000006e: 	movsd	%xmm4, 0x10(%rsp)
    00000074: 	testq	%rdx, %rdx
    00000077: 	je	.Ltmp4053 # Offset: 119
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp4060:
    00000080: 	movsd	(%rbp), %xmm0
    00000085: 	movq	%rbx, %rsi
    00000088: 	jmp	.Ltmp4054 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4056:
    00000090: 	movq	%rdx, %rsi
    00000093: 	movq	0x10(%rdx), %rdx
    00000097: 	testq	%rdx, %rdx
    0000009a: 	je	.Ltmp4055 # Offset: 154
.Ltmp4054:
    0000009c: 	comisd	0x20(%rdx), %xmm0
    000000a1: 	jbe	.Ltmp4056 # Offset: 161
    000000a3: 	movq	0x18(%rdx), %rdx
    000000a7: 	testq	%rdx, %rdx
    000000aa: 	jne	.Ltmp4054 # Offset: 170
.Ltmp4055:
    000000ac: 	cmpq	%rbx, %rsi
    000000af: 	je	.Ltmp4057 # Offset: 175
    000000b1: 	movsd	0x20(%rsi), %xmm1
    000000b6: 	comisd	%xmm0, %xmm1
    000000ba: 	jbe	.Ltmp4058 # Offset: 186
.Ltmp4057:
    000000bc: 	leaq	0x30(%rsp), %rdi
    000000c1: 	movq	%r14, %rdx
    000000c4: 	movq	%rbp, 0x28(%rsp)
    000000c9: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1" # Offset: 201
    000000ce: 	movsd	(%rbp), %xmm0
    000000d3: 	movq	%rax, %rsi
.Ltmp4058:
    000000d6: 	movsd	%xmm0, 0x28(%rsi)
    000000db: 	addsd	0x10(%rsp), %xmm0
    000000e1: 	addq	$0x8, %rbp
    000000e5: 	movsd	%xmm0, 0x10(%rsp)
    000000eb: 	cmpq	%rbp, %r12
    000000ee: 	je	.Ltmp4059 # Offset: 238
    000000f0: 	movq	0x40(%rsp), %rdx
    000000f5: 	testq	%rdx, %rdx
    000000f8: 	jne	.Ltmp4060 # Offset: 248
.Ltmp4053:
    000000fa: 	movq	%rbx, %rsi
    000000fd: 	jmp	.Ltmp4057 # Offset: 253
.Ltmp4052:
    000000ff: 	pxor	%xmm5, %xmm5
    00000103: 	movsd	%xmm5, 0x18(%rsp)
    00000109: 	movsd	%xmm5, 0x10(%rsp)
    0000010f: 	nop # Size: 1
.Ltmp4059:
    00000110: 	callq	clock@PLT # Offset: 272
    00000115: 	movl	iterations(%rip), %r12d
    0000011c: 	xorl	%ebp, %ebp
    0000011e: 	leaq	DATAat0x52360(%rip), %r14
    00000125: 	movq	%rax, start_time(%rip)
    0000012c: 	testl	%r12d, %r12d
    0000012f: 	jle	.Ltmp4061 # Offset: 303
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp4065:
    00000138: 	movq	0x48(%rsp), %rax
    0000013d: 	pxor	%xmm0, %xmm0
    00000141: 	cmpq	%rbx, %rax
    00000144: 	je	.Ltmp4062 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4063:
    00000150: 	movq	%rax, %rdi
    00000153: 	movsd	%xmm0, 0x8(%rsp)
    00000159: 	movq	%rax, %r15
    0000015c: 	callq	_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@PLT # Offset: 348
    00000161: 	movsd	0x8(%rsp), %xmm0
    00000167: 	addsd	0x28(%r15), %xmm0
    0000016d: 	cmpq	%rbx, %rax
    00000170: 	jne	.Ltmp4063 # Offset: 368
.Ltmp4062:
    00000172: 	movsd	0x10(%rsp), %xmm3
    00000178: 	ucomisd	%xmm0, %xmm3
    0000017c: 	jp	.Ltmp4064 # Offset: 380
    00000182: 	jne	.Ltmp4064 # Offset: 386
.Ltmp4068:
    00000188: 	addl	$0x1, %ebp
    0000018b: 	cmpl	%r12d, %ebp
    0000018e: 	jl	.Ltmp4065 # Offset: 398
.Ltmp4061:
    00000190: 	movq	%r13, %rdi
    00000193: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 403
    00000198: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000019f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001a6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ad: 	je	.Ltmp4066 # Offset: 429
.Ltmp4069:
    000001b3: 	movq	-0x20(%rax), %rbp
    000001b7: 	callq	clock@PLT # Offset: 439
    000001bc: 	pxor	%xmm0, %xmm0
    000001c0: 	movq	%rax, end_time(%rip)
    000001c7: 	movq	%rbp, %rdi
    000001ca: 	subq	start_time(%rip), %rax
    000001d1: 	cvtsi2sd	%rax, %xmm0
    000001d6: 	divsd	DATAat0x53788(%rip), %xmm0
    000001de: 	callq	_Z13record_resultdPKc # Offset: 478
    000001e3: 	movq	0x40(%rsp), %rdi
    000001e8: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 488
    000001ed: 	movq	0x68(%rsp), %rax
    000001f2: 	subq	%fs:0x28, %rax
    000001fb: 	jne	.Ltmp4067 # Offset: 507
    000001fd: 	addq	$0x78, %rsp
    00000201: 	popq	%rbx
    00000202: 	popq	%rbp
    00000203: 	popq	%r12
    00000205: 	popq	%r13
    00000207: 	popq	%r14
    00000209: 	popq	%r15
    0000020b: 	retq # Offset: 523
    0000020c: 	nopl	(%rax) # Size: 4
.Ltmp4064:
    00000210: 	movl	current_test(%rip), %edx
    00000216: 	movq	%r14, %rsi
    00000219: 	movl	$0x1, %edi
    0000021e: 	xorl	%eax, %eax
    00000220: 	callq	__printf_chk@PLT # Offset: 544
    00000225: 	movl	iterations(%rip), %r12d
    0000022c: 	jmp	.Ltmp4068 # Offset: 556
.Ltmp4066:
    00000231: 	movq	-0x8(%rdx), %rax
    00000235: 	addq	$0x200, %rax
    0000023b: 	jmp	.Ltmp4069 # Offset: 571
.Ltmp4067:
    00000240: 	callq	__stack_chk_fail@PLT # Offset: 576
    00000245: 	endbr64
    00000249: 	movq	%rax, %rbp
    0000024c: 	movq	0x40(%rsp), %rdi
    00000251: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 593
    00000256: 	movq	%rbp, %rdi
    00000259: 	callq	_Unwind_Resume@PLT # Offset: 601
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_accum_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_accum_map_reverseIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 253
  State       : disassembled
  Address     : 0x297a0
  Size        : 0x256
  MaxSize     : 0x260
  Offset      : 0x297a0
  Section     : .text
  Orc Section : .local.text._Z22test_accum_map_reverseIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0252:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x78, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x68(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x38(%rsp), %rbp
    0000002a: 	movl	$0x0, 0x38(%rsp)
    00000032: 	movq	$0x0, 0x40(%rsp)
    0000003b: 	movq	%rbp, 0x48(%rsp)
    00000040: 	movq	%rbp, 0x50(%rsp)
    00000045: 	movq	$0x0, 0x58(%rsp)
    0000004e: 	cmpq	%rsi, %rdi
    00000051: 	je	.Ltmp4070 # Offset: 81
    00000057: 	pxor	%xmm4, %xmm4
    0000005b: 	xorl	%edx, %edx
    0000005d: 	movq	%rdi, %rbx
    00000060: 	movq	%rsi, %r12
    00000063: 	movsd	%xmm4, 0x18(%rsp)
    00000069: 	leaq	0x28(%rsp), %r13
    0000006e: 	movsd	%xmm4, 0x10(%rsp)
    00000074: 	testq	%rdx, %rdx
    00000077: 	je	.Ltmp4071 # Offset: 119
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp4078:
    00000080: 	movsd	(%rbx), %xmm0
    00000084: 	movq	%rbp, %rsi
    00000087: 	jmp	.Ltmp4072 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp4074:
    00000090: 	movq	%rdx, %rsi
    00000093: 	movq	0x10(%rdx), %rdx
    00000097: 	testq	%rdx, %rdx
    0000009a: 	je	.Ltmp4073 # Offset: 154
.Ltmp4072:
    0000009c: 	comisd	0x20(%rdx), %xmm0
    000000a1: 	jbe	.Ltmp4074 # Offset: 161
    000000a3: 	movq	0x18(%rdx), %rdx
    000000a7: 	testq	%rdx, %rdx
    000000aa: 	jne	.Ltmp4072 # Offset: 170
.Ltmp4073:
    000000ac: 	cmpq	%rbp, %rsi
    000000af: 	je	.Ltmp4075 # Offset: 175
    000000b1: 	movsd	0x20(%rsi), %xmm1
    000000b6: 	comisd	%xmm0, %xmm1
    000000ba: 	jbe	.Ltmp4076 # Offset: 186
.Ltmp4075:
    000000bc: 	leaq	0x30(%rsp), %rdi
    000000c1: 	movq	%r13, %rdx
    000000c4: 	movq	%rbx, 0x28(%rsp)
    000000c9: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1" # Offset: 201
    000000ce: 	movsd	(%rbx), %xmm0
    000000d2: 	movq	%rax, %rsi
.Ltmp4076:
    000000d5: 	movsd	%xmm0, 0x28(%rsi)
    000000da: 	addsd	0x10(%rsp), %xmm0
    000000e0: 	addq	$0x8, %rbx
    000000e4: 	movsd	%xmm0, 0x10(%rsp)
    000000ea: 	cmpq	%rbx, %r12
    000000ed: 	je	.Ltmp4077 # Offset: 237
    000000ef: 	movq	0x40(%rsp), %rdx
    000000f4: 	testq	%rdx, %rdx
    000000f7: 	jne	.Ltmp4078 # Offset: 247
.Ltmp4071:
    000000f9: 	movq	%rbp, %rsi
    000000fc: 	jmp	.Ltmp4075 # Offset: 252
.Ltmp4070:
    000000fe: 	pxor	%xmm5, %xmm5
    00000102: 	movsd	%xmm5, 0x18(%rsp)
    00000108: 	movsd	%xmm5, 0x10(%rsp)
    0000010e: 	nop # Size: 2
.Ltmp4077:
    00000110: 	callq	clock@PLT # Offset: 272
    00000115: 	movl	iterations(%rip), %r13d
    0000011c: 	xorl	%r12d, %r12d
    0000011f: 	leaq	DATAat0x52360(%rip), %r15
    00000126: 	movq	%rax, start_time(%rip)
    0000012d: 	testl	%r13d, %r13d
    00000130: 	jle	.Ltmp4079 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4083:
    00000138: 	movq	0x48(%rsp), %rbx
    0000013d: 	pxor	%xmm0, %xmm0
    00000141: 	cmpq	%rbp, %rbx
    00000144: 	je	.Ltmp4080 # Offset: 324
    00000146: 	movq	%rbp, %rdi
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp4081:
    00000150: 	movsd	%xmm0, 0x8(%rsp)
    00000156: 	callq	_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base@PLT # Offset: 342
    0000015b: 	movsd	0x8(%rsp), %xmm0
    00000161: 	movq	%rax, %rdi
    00000164: 	addsd	0x28(%rax), %xmm0
    00000169: 	cmpq	%rax, %rbx
    0000016c: 	jne	.Ltmp4081 # Offset: 364
.Ltmp4080:
    0000016e: 	movsd	0x10(%rsp), %xmm3
    00000174: 	ucomisd	%xmm0, %xmm3
    00000178: 	jp	.Ltmp4082 # Offset: 376
    0000017e: 	jne	.Ltmp4082 # Offset: 382
.Ltmp4086:
    00000184: 	addl	$0x1, %r12d
    00000188: 	cmpl	%r13d, %r12d
    0000018b: 	jl	.Ltmp4083 # Offset: 395
.Ltmp4079:
    0000018d: 	movq	%r14, %rdi
    00000190: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 400
    00000195: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000019c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001a3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001aa: 	je	.Ltmp4084 # Offset: 426
.Ltmp4087:
    000001ac: 	movq	-0x20(%rax), %rbp
    000001b0: 	callq	clock@PLT # Offset: 432
    000001b5: 	pxor	%xmm0, %xmm0
    000001b9: 	movq	%rax, end_time(%rip)
    000001c0: 	movq	%rbp, %rdi
    000001c3: 	subq	start_time(%rip), %rax
    000001ca: 	cvtsi2sd	%rax, %xmm0
    000001cf: 	divsd	DATAat0x53788(%rip), %xmm0
    000001d7: 	callq	_Z13record_resultdPKc # Offset: 471
    000001dc: 	movq	0x40(%rsp), %rdi
    000001e1: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 481
    000001e6: 	movq	0x68(%rsp), %rax
    000001eb: 	subq	%fs:0x28, %rax
    000001f4: 	jne	.Ltmp4085 # Offset: 500
    000001f6: 	addq	$0x78, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	retq # Offset: 516
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp4082:
    00000208: 	movl	current_test(%rip), %edx
    0000020e: 	movq	%r15, %rsi
    00000211: 	movl	$0x1, %edi
    00000216: 	xorl	%eax, %eax
    00000218: 	callq	__printf_chk@PLT # Offset: 536
    0000021d: 	movl	iterations(%rip), %r13d
    00000224: 	jmp	.Ltmp4086 # Offset: 548
.Ltmp4084:
    00000229: 	movq	-0x8(%rdx), %rax
    0000022d: 	addq	$0x200, %rax
    00000233: 	jmp	.Ltmp4087 # Offset: 563
.Ltmp4085:
    00000238: 	callq	__stack_chk_fail@PLT # Offset: 568
    0000023d: 	endbr64
    00000241: 	movq	%rax, %rbp
    00000244: 	movq	0x40(%rsp), %rdi
    00000249: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 585
    0000024e: 	movq	%rbp, %rdi
    00000251: 	callq	_Unwind_Resume@PLT # Offset: 593
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_accum_map_reverseIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_find_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 254
  State       : disassembled
  Address     : 0x29a00
  Size        : 0x2ad
  MaxSize     : 0x2b0
  Offset      : 0x29a00
  Section     : .text
  Orc Section : .local.text._Z13test_find_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0253:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rcx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x78, %rsp
    00000018: 	movq	%r8, 0x18(%rsp)
    0000001d: 	leaq	0x38(%rsp), %rbx
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x68(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	movl	$0x0, 0x38(%rsp)
    0000003a: 	movq	$0x0, 0x40(%rsp)
    00000043: 	movq	%rbx, 0x48(%rsp)
    00000048: 	movq	%rbx, 0x50(%rsp)
    0000004d: 	movq	$0x0, 0x58(%rsp)
    00000056: 	cmpq	%rsi, %rdi
    00000059: 	je	.Ltmp4088 # Offset: 89
    0000005f: 	pxor	%xmm5, %xmm5
    00000063: 	xorl	%edx, %edx
    00000065: 	movq	%rdi, %r12
    00000068: 	movq	%rsi, %r14
    0000006b: 	movsd	%xmm5, 0x10(%rsp)
    00000071: 	leaq	0x28(%rsp), %r15
    00000076: 	movsd	%xmm5, 0x8(%rsp)
    0000007c: 	testq	%rdx, %rdx
    0000007f: 	je	.Ltmp4089 # Offset: 127
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp4096:
    00000088: 	movsd	(%r12), %xmm0
    0000008e: 	movq	%rbx, %rsi
    00000091: 	jmp	.Ltmp4090 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4092:
    00000098: 	movq	%rdx, %rsi
    0000009b: 	movq	0x10(%rdx), %rdx
    0000009f: 	testq	%rdx, %rdx
    000000a2: 	je	.Ltmp4091 # Offset: 162
.Ltmp4090:
    000000a4: 	comisd	0x20(%rdx), %xmm0
    000000a9: 	jbe	.Ltmp4092 # Offset: 169
    000000ab: 	movq	0x18(%rdx), %rdx
    000000af: 	testq	%rdx, %rdx
    000000b2: 	jne	.Ltmp4090 # Offset: 178
.Ltmp4091:
    000000b4: 	cmpq	%rbx, %rsi
    000000b7: 	je	.Ltmp4093 # Offset: 183
    000000b9: 	movsd	0x20(%rsi), %xmm1
    000000be: 	comisd	%xmm0, %xmm1
    000000c2: 	jbe	.Ltmp4094 # Offset: 194
.Ltmp4093:
    000000c4: 	leaq	0x30(%rsp), %rdi
    000000c9: 	movq	%r15, %rdx
    000000cc: 	movq	%r12, 0x28(%rsp)
    000000d1: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1" # Offset: 209
    000000d6: 	movsd	(%r12), %xmm0
    000000dc: 	movq	%rax, %rsi
.Ltmp4094:
    000000df: 	movsd	%xmm0, 0x28(%rsi)
    000000e4: 	addsd	0x8(%rsp), %xmm0
    000000ea: 	addq	$0x8, %r12
    000000ee: 	movsd	%xmm0, 0x8(%rsp)
    000000f4: 	cmpq	%r12, %r14
    000000f7: 	je	.Ltmp4095 # Offset: 247
    000000f9: 	movq	0x40(%rsp), %rdx
    000000fe: 	testq	%rdx, %rdx
    00000101: 	jne	.Ltmp4096 # Offset: 257
.Ltmp4089:
    00000103: 	movq	%rbx, %rsi
    00000106: 	jmp	.Ltmp4093 # Offset: 262
.Ltmp4088:
    00000108: 	pxor	%xmm6, %xmm6
    0000010c: 	movsd	%xmm6, 0x10(%rsp)
    00000112: 	movsd	%xmm6, 0x8(%rsp)
.Ltmp4095:
    00000118: 	callq	clock@PLT # Offset: 280
    0000011d: 	movl	iterations(%rip), %edi
    00000123: 	xorl	%r12d, %r12d
    00000126: 	leaq	DATAat0x52360(%rip), %r14
    0000012d: 	movq	%rax, start_time(%rip)
    00000134: 	testl	%edi, %edi
    00000136: 	jle	.Ltmp4097 # Offset: 310
    0000013c: 	nopl	(%rax) # Size: 4
.Ltmp4106:
    00000140: 	pxor	%xmm1, %xmm1
    00000144: 	cmpq	%rbp, %r13
    00000147: 	je	.Ltmp4098 # Offset: 327
    00000149: 	movq	0x40(%rsp), %rsi
    0000014e: 	movq	%r13, %rcx
    00000151: 	pxor	%xmm1, %xmm1
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp4104:
    00000158: 	addq	$0x8, %rcx
    0000015c: 	testq	%rsi, %rsi
    0000015f: 	je	.Ltmp4099 # Offset: 351
    00000165: 	movsd	-0x8(%rcx), %xmm0
    0000016a: 	movq	%rsi, %rax
    0000016d: 	movq	%rbx, %rdx
    00000170: 	jmp	.Ltmp4100 # Offset: 368
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4102:
    00000178: 	movq	%rax, %rdx
    0000017b: 	movq	0x10(%rax), %rax
    0000017f: 	testq	%rax, %rax
    00000182: 	je	.Ltmp4101 # Offset: 386
.Ltmp4100:
    00000184: 	comisd	0x20(%rax), %xmm0
    00000189: 	jbe	.Ltmp4102 # Offset: 393
    0000018b: 	movq	0x18(%rax), %rax
    0000018f: 	testq	%rax, %rax
    00000192: 	jne	.Ltmp4100 # Offset: 402
.Ltmp4101:
    00000194: 	cmpq	%rbx, %rdx
    00000197: 	je	.Ltmp4103 # Offset: 407
    00000199: 	movsd	0x20(%rdx), %xmm2
    0000019e: 	ucomisd	%xmm0, %xmm2
    000001a2: 	cmovaq	%rbx, %rdx
.Ltmp4103:
    000001a6: 	addsd	0x28(%rdx), %xmm1
    000001ab: 	cmpq	%rcx, %rbp
    000001ae: 	jne	.Ltmp4104 # Offset: 430
.Ltmp4098:
    000001b0: 	movsd	0x8(%rsp), %xmm4
    000001b6: 	ucomisd	%xmm1, %xmm4
    000001ba: 	jp	.Ltmp4105 # Offset: 442
    000001c0: 	jne	.Ltmp4105 # Offset: 448
.Ltmp4109:
    000001c6: 	addl	$0x1, %r12d
    000001ca: 	cmpl	%edi, %r12d
    000001cd: 	jl	.Ltmp4106 # Offset: 461
.Ltmp4097:
    000001d3: 	movq	0x18(%rsp), %rdi
    000001d8: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 472
    000001dd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f2: 	je	.Ltmp4107 # Offset: 498
.Ltmp4110:
    000001f8: 	movq	-0x20(%rax), %rbp
    000001fc: 	callq	clock@PLT # Offset: 508
    00000201: 	pxor	%xmm0, %xmm0
    00000205: 	movq	%rax, end_time(%rip)
    0000020c: 	movq	%rbp, %rdi
    0000020f: 	subq	start_time(%rip), %rax
    00000216: 	cvtsi2sd	%rax, %xmm0
    0000021b: 	divsd	DATAat0x53788(%rip), %xmm0
    00000223: 	callq	_Z13record_resultdPKc # Offset: 547
    00000228: 	movq	0x40(%rsp), %rdi
    0000022d: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 557
    00000232: 	movq	0x68(%rsp), %rax
    00000237: 	subq	%fs:0x28, %rax
    00000240: 	jne	.Ltmp4108 # Offset: 576
    00000242: 	addq	$0x78, %rsp
    00000246: 	popq	%rbx
    00000247: 	popq	%rbp
    00000248: 	popq	%r12
    0000024a: 	popq	%r13
    0000024c: 	popq	%r14
    0000024e: 	popq	%r15
    00000250: 	retq # Offset: 592
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp4099:
    00000258: 	movq	%rbx, %rdx
    0000025b: 	jmp	.Ltmp4103 # Offset: 603
.Ltmp4105:
    00000260: 	movl	current_test(%rip), %edx
    00000266: 	movq	%r14, %rsi
    00000269: 	movl	$0x1, %edi
    0000026e: 	xorl	%eax, %eax
    00000270: 	callq	__printf_chk@PLT # Offset: 624
    00000275: 	movl	iterations(%rip), %edi
    0000027b: 	jmp	.Ltmp4109 # Offset: 635
.Ltmp4107:
    00000280: 	movq	-0x8(%rdx), %rax
    00000284: 	addq	$0x200, %rax
    0000028a: 	jmp	.Ltmp4110 # Offset: 650
.Ltmp4108:
    0000028f: 	callq	__stack_chk_fail@PLT # Offset: 655
    00000294: 	endbr64
    00000298: 	movq	%rax, %rbp
    0000029b: 	movq	0x40(%rsp), %rdi
    000002a0: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 672
    000002a5: 	movq	%rbp, %rdi
    000002a8: 	callq	_Unwind_Resume@PLT # Offset: 680
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_find_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_insert_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEELb1EEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 255
  State       : disassembled
  Address     : 0x29cb0
  Size        : 0x530
  MaxSize     : 0x530
  Offset      : 0x29cb0
  Section     : .text
  Orc Section : .local.text._Z15test_insert_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEELb1EEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0254:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	xorl	%r12d, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x98, %rsp
    0000001b: 	movq	%rsi, 0x8(%rsp)
    00000020: 	leaq	0x70(%rsp), %rbp
    00000025: 	movq	%rdx, 0x68(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x88(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp4111 # Offset: 81
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4114:
    00000060: 	movl	$0x30, %edi
    00000065: 	callq	_Znwm@PLT # Offset: 101
    0000006a: 	movq	%rbp, %rdx
    0000006d: 	movq	%r13, 0x70(%rsp)
    00000072: 	leaq	0x8(%rax), %rsi
    00000076: 	movq	%rax, %r14
    00000079: 	movq	%rax, %rdi
    0000007c: 	movl	$0x0, 0x8(%rax)
    00000083: 	movq	$0x0, 0x10(%rax)
    0000008b: 	movq	%rsi, 0x18(%rax)
    0000008f: 	movq	%rsi, 0x20(%rax)
    00000093: 	movq	$0x0, 0x28(%rax)
    0000009b: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1" # Offset: 155
    000000a0: 	movsd	(%r13), %xmm0
    000000a6: 	movq	0x10(%r14), %rbx
    000000aa: 	movsd	%xmm0, 0x28(%rax)
    000000af: 	testq	%rbx, %rbx
    000000b2: 	je	.Ltmp4112 # Offset: 178
.Ltmp4113:
    000000b4: 	movq	0x18(%rbx), %rdi
    000000b8: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 184
    000000bd: 	movq	%rbx, %rdi
    000000c0: 	movq	0x10(%rbx), %rbx
    000000c4: 	movl	$0x30, %esi
    000000c9: 	callq	_ZdlPvm@PLT # Offset: 201
    000000ce: 	testq	%rbx, %rbx
    000000d1: 	jne	.Ltmp4113 # Offset: 209
.Ltmp4112:
    000000d3: 	movl	$0x30, %esi
    000000d8: 	movq	%r14, %rdi
    000000db: 	addl	$0x1, %r12d
    000000df: 	callq	_ZdlPvm@PLT # Offset: 223
    000000e4: 	cmpl	%r12d, iterations(%rip)
    000000eb: 	jg	.Ltmp4114 # Offset: 235
.Ltmp4111:
    000000f1: 	callq	clock@PLT # Offset: 241
    000000f6: 	movq	0x8(%rsp), %rcx
    000000fb: 	xorl	%edx, %edx
    000000fd: 	movq	%rax, 0x58(%rsp)
    00000102: 	movq	%rax, end_time(%rip)
    00000109: 	movq	start_time(%rip), %rax
    00000110: 	subq	%r13, %rcx
    00000113: 	movq	%rax, 0x60(%rsp)
    00000118: 	movabsq	$0x500000000, %rax
    00000122: 	divq	%rcx
    00000125: 	movq	%rax, 0x18(%rsp)
    0000012a: 	cmpq	$0x3e8, %rax
    00000130: 	ja	.Ltmp4115 # Offset: 304
    00000136: 	cmpq	$0x3, 0x18(%rsp)
    0000013c: 	ja	.Ltmp4116 # Offset: 316
    00000142: 	movq	$0x0, 0x80(%rsp)
    0000014e: 	pxor	%xmm0, %xmm0
    00000152: 	movq	$0x4, 0x18(%rsp)
    0000015b: 	movaps	%xmm0, 0x70(%rsp)
.Ltmp4140:
    00000160: 	movq	0x18(%rsp), %rbx
    00000165: 	movq	%rbp, %rdi
    00000168: 	movq	%rbx, %rsi
    0000016b: 	callq	_ZNSt6vectorIPSt3mapIddSt4lessIdESaISt4pairIKddEEESaIS8_EE17_M_default_appendEm # Offset: 363
    00000170: 	movq	0x70(%rsp), %rcx
    00000175: 	movl	iterations(%rip), %eax
    0000017b: 	movq	%rcx, 0x30(%rsp)
    00000180: 	testl	%eax, %eax
    00000182: 	jle	.Ltmp4117 # Offset: 386
    00000188: 	addq	$0x8, %rcx
    0000018c: 	movl	%ebx, 0x44(%rsp)
    00000190: 	pxor	%xmm2, %xmm2
    00000194: 	movl	$0x0, 0x40(%rsp)
    0000019c: 	movq	%rcx, 0x48(%rsp)
    000001a1: 	movsd	%xmm2, 0x50(%rsp)
.Ltmp4135:
    000001a7: 	movslq	0x40(%rsp), %rdx
    000001ac: 	movslq	%eax, %rcx
    000001af: 	movq	%rdx, %rsi
    000001b2: 	addq	0x18(%rsp), %rdx
    000001b7: 	subl	%esi, %eax
    000001b9: 	cmpq	%rcx, %rdx
    000001bc: 	cmovbl	0x44(%rsp), %eax
    000001c1: 	movl	%eax, %ebx
    000001c3: 	callq	clock@PLT # Offset: 451
    000001c8: 	movq	0x48(%rsp), %rdx
    000001cd: 	movq	0x30(%rsp), %rcx
    000001d2: 	movq	%rax, start_time(%rip)
    000001d9: 	leal	-0x1(%rbx), %eax
    000001dc: 	leaq	(%rdx,%rax,8), %rax
    000001e0: 	movq	%rcx, 0x38(%rsp)
    000001e5: 	movq	%rax, 0x28(%rsp)
    000001ea: 	movq	%rcx, 0x20(%rsp)
.Ltmp4130:
    000001ef: 	movl	$0x30, %edi
    000001f4: 	callq	_Znwm@PLT # Offset: 500
    000001f9: 	leaq	0x8(%rax), %r12
    000001fd: 	movl	$0x0, 0x8(%rax)
    00000204: 	movq	%rax, %rbp
    00000207: 	movq	$0x0, 0x10(%rax)
    0000020f: 	movq	%r12, 0x18(%rax)
    00000213: 	movq	%r12, 0x20(%rax)
    00000217: 	movq	$0x0, 0x28(%rax)
    0000021f: 	cmpq	%r13, 0x8(%rsp)
    00000224: 	je	.Ltmp4118 # Offset: 548
    0000022a: 	xorl	%eax, %eax
    0000022c: 	movq	%r13, %rbx
    0000022f: 	testq	%rax, %rax
    00000232: 	je	.Ltmp4119 # Offset: 562
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4128:
    00000240: 	movsd	(%rbx), %xmm0
    00000244: 	movq	%r12, %r14
    00000247: 	jmp	.Ltmp4120 # Offset: 583
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp4122:
    00000250: 	movq	%rax, %r14
    00000253: 	movq	0x10(%rax), %rax
    00000257: 	testq	%rax, %rax
    0000025a: 	je	.Ltmp4121 # Offset: 602
.Ltmp4120:
    0000025c: 	comisd	0x20(%rax), %xmm0
    00000261: 	jbe	.Ltmp4122 # Offset: 609
    00000263: 	movq	0x18(%rax), %rax
    00000267: 	testq	%rax, %rax
    0000026a: 	jne	.Ltmp4120 # Offset: 618
.Ltmp4121:
    0000026c: 	cmpq	%r14, %r12
    0000026f: 	je	.Ltmp4123 # Offset: 623
    00000271: 	movsd	0x20(%r14), %xmm1
    00000277: 	comisd	%xmm0, %xmm1
    0000027b: 	jbe	.Ltmp4124 # Offset: 635
.Ltmp4123:
    0000027d: 	movl	$0x30, %edi
    00000282: 	movq	%r14, %r15
    00000285: 	callq	_Znwm@PLT # Offset: 645
    0000028a: 	movsd	(%rbx), %xmm0
    0000028e: 	movq	%r15, %rsi
    00000291: 	leaq	0x20(%rax), %rdx
    00000295: 	movq	%rbp, %rdi
    00000298: 	movq	$0x0, 0x28(%rax)
    000002a0: 	movq	%rax, %r14
    000002a3: 	movsd	%xmm0, 0x20(%rax)
    000002a8: 	movsd	%xmm0, 0x10(%rsp)
    000002ae: 	callq	_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_ # Offset: 686
    000002b3: 	movq	%rax, %r15
    000002b6: 	testq	%rdx, %rdx
    000002b9: 	je	.Ltmp4125 # Offset: 697
    000002bb: 	cmpq	%rdx, %r12
    000002be: 	je	.Ltmp4126 # Offset: 702
    000002c0: 	testq	%rax, %rax
    000002c3: 	movsd	0x10(%rsp), %xmm0
    000002c9: 	je	.Ltmp4127 # Offset: 713
.Ltmp4126:
    000002cf: 	movl	$0x1, %edi
.Ltmp4139:
    000002d4: 	movq	%r12, %rcx
    000002d7: 	movq	%r14, %rsi
    000002da: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 730
    000002df: 	addq	$0x1, 0x28(%rbp)
.Ltmp4129:
    000002e4: 	movsd	(%rbx), %xmm0
.Ltmp4124:
    000002e8: 	movsd	%xmm0, 0x28(%r14)
    000002ee: 	addq	$0x8, %rbx
    000002f2: 	cmpq	%rbx, 0x8(%rsp)
    000002f7: 	je	.Ltmp4118 # Offset: 759
    000002f9: 	movq	0x10(%rbp), %rax
    000002fd: 	testq	%rax, %rax
    00000300: 	jne	.Ltmp4128 # Offset: 768
.Ltmp4119:
    00000306: 	movq	%r12, %r14
    00000309: 	jmp	.Ltmp4123 # Offset: 777
    0000030e: 	nop # Size: 2
.Ltmp4125:
    00000310: 	movq	%r14, %rdi
    00000313: 	movl	$0x30, %esi
    00000318: 	movq	%r15, %r14
    0000031b: 	callq	_ZdlPvm@PLT # Offset: 795
    00000320: 	jmp	.Ltmp4129 # Offset: 800
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4118:
    00000328: 	movq	0x20(%rsp), %rax
    0000032d: 	movq	%rbp, (%rax)
    00000330: 	addq	$0x8, %rax
    00000334: 	movq	%rax, 0x20(%rsp)
    00000339: 	cmpq	0x28(%rsp), %rax
    0000033e: 	jne	.Ltmp4130 # Offset: 830
    00000344: 	callq	clock@PLT # Offset: 836
    00000349: 	pxor	%xmm0, %xmm0
    0000034d: 	movq	0x38(%rsp), %rbp
    00000352: 	movq	0x28(%rsp), %r14
    00000357: 	movq	%rax, end_time(%rip)
    0000035e: 	subq	start_time(%rip), %rax
    00000365: 	cvtsi2sd	%rax, %xmm0
    0000036a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000372: 	addsd	0x50(%rsp), %xmm0
    00000378: 	movsd	%xmm0, 0x50(%rsp)
    0000037e: 	nop # Size: 2
.Ltmp4134:
    00000380: 	movq	(%rbp), %r12
    00000384: 	testq	%r12, %r12
    00000387: 	je	.Ltmp4131 # Offset: 903
    00000389: 	movq	0x10(%r12), %rbx
    0000038e: 	testq	%rbx, %rbx
    00000391: 	je	.Ltmp4132 # Offset: 913
.Ltmp4133:
    00000393: 	movq	0x18(%rbx), %rdi
    00000397: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 919
    0000039c: 	movq	%rbx, %rdi
    0000039f: 	movq	0x10(%rbx), %rbx
    000003a3: 	movl	$0x30, %esi
    000003a8: 	callq	_ZdlPvm@PLT # Offset: 936
    000003ad: 	testq	%rbx, %rbx
    000003b0: 	jne	.Ltmp4133 # Offset: 944
.Ltmp4132:
    000003b2: 	movl	$0x30, %esi
    000003b7: 	movq	%r12, %rdi
    000003ba: 	callq	_ZdlPvm@PLT # Offset: 954
.Ltmp4131:
    000003bf: 	movq	$0x0, (%rbp)
    000003c7: 	addq	$0x8, %rbp
    000003cb: 	cmpq	%r14, %rbp
    000003ce: 	jne	.Ltmp4134 # Offset: 974
    000003d0: 	movl	0x18(%rsp), %ecx
    000003d4: 	movl	iterations(%rip), %eax
    000003da: 	addl	%ecx, 0x40(%rsp)
    000003de: 	movl	0x40(%rsp), %ecx
    000003e2: 	cmpl	%ecx, %eax
    000003e4: 	jg	.Ltmp4135 # Offset: 996
.Ltmp4142:
    000003ea: 	movq	0x68(%rsp), %rdi
    000003ef: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1007
    000003f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003fb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000402: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000409: 	je	.Ltmp4136 # Offset: 1033
.Ltmp4141:
    0000040f: 	movsd	0x50(%rsp), %xmm0
    00000415: 	movq	-0x20(%rax), %rdi
    00000419: 	pxor	%xmm1, %xmm1
    0000041d: 	movq	0x58(%rsp), %rax
    00000422: 	subq	0x60(%rsp), %rax
    00000427: 	cvtsi2sd	%rax, %xmm1
    0000042c: 	divsd	DATAat0x53788(%rip), %xmm1
    00000434: 	subsd	%xmm1, %xmm0
    00000438: 	callq	_Z13record_resultdPKc # Offset: 1080
    0000043d: 	cmpq	$0x0, 0x30(%rsp)
    00000443: 	je	.Ltmp4137 # Offset: 1091
    00000445: 	movq	0x88(%rsp), %rax
    0000044d: 	subq	%fs:0x28, %rax
    00000456: 	jne	.Ltmp4138 # Offset: 1110
    0000045c: 	movq	0x80(%rsp), %rsi
    00000464: 	movq	0x30(%rsp), %rdi
    00000469: 	addq	$0x98, %rsp
    00000470: 	popq	%rbx
    00000471: 	popq	%rbp
    00000472: 	subq	%rdi, %rsi
    00000475: 	popq	%r12
    00000477: 	popq	%r13
    00000479: 	popq	%r14
    0000047b: 	popq	%r15
    0000047d: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1149
    00000482: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4127:
    00000488: 	movsd	0x20(%rdx), %xmm1
    0000048d: 	xorl	%edi, %edi
    0000048f: 	comisd	%xmm0, %xmm1
    00000493: 	seta	%dil
    00000497: 	jmp	.Ltmp4139 # Offset: 1175
.Ltmp4115:
    0000049c: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp4116:
    000004a5: 	movq	$0x0, 0x80(%rsp)
    000004b1: 	pxor	%xmm0, %xmm0
    000004b5: 	movaps	%xmm0, 0x70(%rsp)
    000004ba: 	jmp	.Ltmp4140 # Offset: 1210
.Ltmp4137:
    000004bf: 	movq	0x88(%rsp), %rax
    000004c7: 	subq	%fs:0x28, %rax
    000004d0: 	jne	.Ltmp4138 # Offset: 1232
    000004d2: 	addq	$0x98, %rsp
    000004d9: 	popq	%rbx
    000004da: 	popq	%rbp
    000004db: 	popq	%r12
    000004dd: 	popq	%r13
    000004df: 	popq	%r14
    000004e1: 	popq	%r15
    000004e3: 	retq # Offset: 1251
.Ltmp4136:
    000004e4: 	movq	-0x8(%rdx), %rax
    000004e8: 	addq	$0x200, %rax
    000004ee: 	jmp	.Ltmp4141 # Offset: 1262
.Ltmp4117:
    000004f3: 	pxor	%xmm4, %xmm4
    000004f7: 	movsd	%xmm4, 0x50(%rsp)
    000004fd: 	jmp	.Ltmp4142 # Offset: 1277
.Ltmp4138:
    00000502: 	callq	__stack_chk_fail@PLT # Offset: 1282
    00000507: 	endbr64
    0000050b: 	movq	%rax, %rbp
    0000050e: 	movq	0x70(%rsp), %rdi
    00000513: 	movq	0x80(%rsp), %rsi
    0000051b: 	subq	%rdi, %rsi
    0000051e: 	testq	%rdi, %rdi
    00000521: 	je	.Ltmp4143 # Offset: 1313
    00000523: 	callq	_ZdlPvm@PLT # Offset: 1315
.Ltmp4143:
    00000528: 	movq	%rbp, %rdi
    0000052b: 	callq	_Unwind_Resume@PLT # Offset: 1323
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_insert_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEELb1EEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEmRKm" after disassembly {
  Number      : 256
  State       : disassembled
  Address     : 0x2a1e0
  Size        : 0x1e2
  MaxSize     : 0x1f0
  Offset      : 0x2a1e0
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEmRKm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0255:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x18(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	cmpq	$0x1, %rsi
    0000002c: 	je	.Ltmp4144 # Offset: 44
    00000032: 	movq	%rsi, %rax
    00000035: 	movq	%rdx, %rbx
    00000038: 	shrq	$0x3c, %rax
    0000003c: 	jne	.Ltmp4145 # Offset: 60
    00000042: 	leaq	(,%rsi,8), %r14
    0000004a: 	movq	%r14, %rdi
    0000004d: 	callq	_Znwm@PLT # Offset: 77
    00000052: 	movq	%r14, %rdx
    00000055: 	xorl	%esi, %esi
    00000057: 	movq	%rax, %rdi
    0000005a: 	movq	%rax, %r15
    0000005d: 	callq	memset@PLT # Offset: 93
    00000062: 	leaq	0x30(%r12), %rax
    00000067: 	movq	%rax, 0x8(%rsp)
.Ltmp4155:
    0000006c: 	movq	0x10(%r12), %rbp
    00000071: 	pxor	%xmm1, %xmm1
    00000075: 	movq	$0x0, 0x10(%r12)
    0000007e: 	movl	$0xc70f6907, %r14d
    00000084: 	movq	$0x0, (%rsp)
.Ltmp4154:
    0000008c: 	testq	%rbp, %rbp
    0000008f: 	je	.Ltmp4146 # Offset: 143
.Ltmp4149:
    00000091: 	movq	%rbp, %rbx
    00000094: 	movq	(%rbp), %rbp
    00000098: 	movsd	0x8(%rbx), %xmm0
    0000009d: 	ucomisd	%xmm1, %xmm0
    000000a1: 	movsd	%xmm0, 0x10(%rsp)
    000000a7: 	jp	.Ltmp4147 # Offset: 167
    000000a9: 	movq	%r15, %rax
    000000ac: 	movl	$0x0, %edx
    000000b1: 	jne	.Ltmp4147 # Offset: 177
    000000b3: 	movq	(%rax), %rcx
    000000b6: 	testq	%rcx, %rcx
    000000b9: 	je	.Ltmp4148 # Offset: 185
.Ltmp4152:
    000000bf: 	movq	(%rcx), %rdx
    000000c2: 	movq	%rdx, (%rbx)
    000000c5: 	movq	(%rax), %rax
    000000c8: 	movq	%rbx, (%rax)
    000000cb: 	testq	%rbp, %rbp
    000000ce: 	jne	.Ltmp4149 # Offset: 206
.Ltmp4146:
    000000d0: 	movq	0x8(%r12), %rsi
    000000d5: 	movq	(%r12), %rdi
    000000d9: 	cmpq	0x8(%rsp), %rdi
    000000de: 	je	.Ltmp4150 # Offset: 222
    000000e0: 	shlq	$0x3, %rsi
    000000e4: 	callq	_ZdlPvm@PLT # Offset: 228
.Ltmp4150:
    000000e9: 	movq	%r13, 0x8(%r12)
    000000ee: 	movq	%r15, (%r12)
    000000f2: 	movq	0x18(%rsp), %rax
    000000f7: 	subq	%fs:0x28, %rax
    00000100: 	jne	.Ltmp4151 # Offset: 256
    00000106: 	addq	$0x28, %rsp
    0000010a: 	popq	%rbx
    0000010b: 	popq	%rbp
    0000010c: 	popq	%r12
    0000010e: 	popq	%r13
    00000110: 	popq	%r14
    00000112: 	popq	%r15
    00000114: 	retq # Offset: 276
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp4147:
    00000118: 	movq	%r14, %rdx
    0000011b: 	leaq	0x10(%rsp), %rdi
    00000120: 	movl	$0x8, %esi
    00000125: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 293
    0000012a: 	xorl	%edx, %edx
    0000012c: 	pxor	%xmm1, %xmm1
    00000130: 	divq	%r13
    00000133: 	leaq	(%r15,%rdx,8), %rax
    00000137: 	movq	(%rax), %rcx
    0000013a: 	testq	%rcx, %rcx
    0000013d: 	jne	.Ltmp4152 # Offset: 317
.Ltmp4148:
    00000143: 	movq	0x10(%r12), %rcx
    00000148: 	movq	%rcx, (%rbx)
    0000014b: 	leaq	0x10(%r12), %rcx
    00000150: 	movq	%rbx, 0x10(%r12)
    00000155: 	movq	%rcx, (%rax)
    00000158: 	cmpq	$0x0, (%rbx)
    0000015c: 	je	.Ltmp4153 # Offset: 348
    0000015e: 	movq	(%rsp), %rax
    00000162: 	movq	%rdx, (%rsp)
    00000166: 	movq	%rbx, (%r15,%rax,8)
    0000016a: 	jmp	.Ltmp4154 # Offset: 362
    0000016f: 	nop # Size: 1
.Ltmp4153:
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	jmp	.Ltmp4154 # Offset: 372
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp4144:
    00000180: 	leaq	0x30(%rdi), %r15
    00000184: 	movq	$0x0, 0x30(%rdi)
    0000018c: 	movq	%r15, 0x8(%rsp)
    00000191: 	jmp	.Ltmp4155 # Offset: 401
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4145:
    000001a0: 	shrq	$0x3d, %r13
    000001a4: 	je	.Ltmp4156 # Offset: 420
    000001a6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 422
.Ltmp4156:
    000001ab: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 427
.Ltmp4151:
    000001b0: 	callq	__stack_chk_fail@PLT # Offset: 432
    000001b5: 	endbr64
    000001b9: 	movq	%rax, %rdi
    000001bc: 	callq	__cxa_begin_catch@PLT # Offset: 444
    000001c1: 	movq	(%rbx), %rax
    000001c4: 	movq	%rax, 0x28(%r12)
    000001c9: 	callq	__cxa_rethrow@PLT # Offset: 457
    000001ce: 	endbr64
    000001d2: 	movq	%rax, %rbp
    000001d5: 	callq	__cxa_end_catch@PLT # Offset: 469
    000001da: 	movq	%rbp, %rdi
    000001dd: 	callq	_Unwind_Resume@PLT # Offset: 477
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEmRKm"

Binary Function "_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_" after disassembly {
  Number      : 257
  State       : disassembled
  Address     : 0x2a3d0
  Size        : 0x287
  MaxSize     : 0x290
  Offset      : 0x2a3d0
  Section     : .text
  Orc Section : .local.text._ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0256:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pxor	%xmm1, %xmm1
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rsi, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rdi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	subq	$0x38, %rsp
    0000001c: 	movsd	(%rsi), %xmm0
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x28(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	ucomisd	%xmm1, %xmm0
    00000034: 	movsd	%xmm0, 0x20(%rsp)
    0000003a: 	jp	.Ltmp4157 # Offset: 58
    00000040: 	movl	$0x0, %r13d
    00000046: 	jne	.Ltmp4157 # Offset: 70
.Ltmp4167:
    0000004c: 	movq	%r13, %rax
    0000004f: 	xorl	%edx, %edx
    00000051: 	divq	0x8(%rbp)
    00000055: 	movq	(%rbp), %rax
    00000059: 	movq	(%rax,%rdx,8), %rax
    0000005d: 	movq	%rdx, %r15
    00000060: 	leaq	(,%rdx,8), %r14
    00000068: 	testq	%rax, %rax
    0000006b: 	je	.Ltmp4158 # Offset: 107
    00000071: 	movq	(%rax), %rbx
    00000074: 	movsd	0x8(%rbx), %xmm0
    00000079: 	ucomisd	(%r12), %xmm0
    0000007f: 	jp	.Ltmp4159 # Offset: 127
    00000081: 	jne	.Ltmp4159 # Offset: 129
.Ltmp4163:
    00000083: 	leaq	0x10(%rbx), %rax
.Ltmp4166:
    00000087: 	movq	0x28(%rsp), %rdx
    0000008c: 	subq	%fs:0x28, %rdx
    00000095: 	jne	.Ltmp4160 # Offset: 149
    0000009b: 	addq	$0x38, %rsp
    0000009f: 	popq	%rbx
    000000a0: 	popq	%rbp
    000000a1: 	popq	%r12
    000000a3: 	popq	%r13
    000000a5: 	popq	%r14
    000000a7: 	popq	%r15
    000000a9: 	retq # Offset: 169
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4159:
    000000b0: 	movl	$0xc70f6907, %r8d
.Ltmp4162:
    000000b6: 	movq	(%rbx), %rax
    000000b9: 	testq	%rax, %rax
    000000bc: 	je	.Ltmp4158 # Offset: 188
    000000be: 	movsd	0x8(%rax), %xmm0
    000000c3: 	pxor	%xmm2, %xmm2
    000000c7: 	movq	0x8(%rbp), %rcx
    000000cb: 	ucomisd	%xmm2, %xmm0
    000000cf: 	movsd	%xmm0, 0x20(%rsp)
    000000d5: 	jp	.Ltmp4161 # Offset: 213
    000000db: 	movl	$0x0, %edx
    000000e0: 	jne	.Ltmp4161 # Offset: 224
.Ltmp4168:
    000000e6: 	cmpq	%rdx, %r15
    000000e9: 	jne	.Ltmp4158 # Offset: 233
    000000eb: 	movq	(%rbx), %rbx
    000000ee: 	movsd	(%r12), %xmm0
    000000f4: 	ucomisd	0x8(%rbx), %xmm0
    000000f9: 	jp	.Ltmp4162 # Offset: 249
    000000fb: 	je	.Ltmp4163 # Offset: 251
    000000fd: 	jmp	.Ltmp4162 # Offset: 253
    000000ff: 	nop # Size: 1
.Ltmp4158:
    00000100: 	movl	$0x18, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movsd	(%r12), %xmm0
    00000110: 	movq	0x18(%rbp), %rdx
    00000114: 	leaq	0x20(%rbp), %rdi
    00000118: 	movq	$0x0, (%rax)
    0000011f: 	movq	%rax, %r15
    00000122: 	movq	0x8(%rbp), %rsi
    00000126: 	movl	$0x1, %ecx
    0000012b: 	movq	$0x0, 0x10(%rax)
    00000133: 	movsd	%xmm0, 0x8(%rax)
    00000138: 	movq	0x28(%rbp), %rax
    0000013c: 	movq	%rax, 0x18(%rsp)
    00000141: 	callq	_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm@PLT # Offset: 321
    00000146: 	movq	%rdx, %rsi
    00000149: 	testb	%al, %al
    0000014b: 	jne	.Ltmp4164 # Offset: 331
    00000151: 	movq	(%rbp), %r12
    00000155: 	leaq	(%r12,%r14), %rax
    00000159: 	movq	(%rax), %rdx
    0000015c: 	testq	%rdx, %rdx
    0000015f: 	je	.Ltmp4165 # Offset: 351
.Ltmp4169:
    00000165: 	movq	(%rdx), %rdx
    00000168: 	movq	%rdx, (%r15)
    0000016b: 	movq	(%rax), %rax
    0000016e: 	movq	%r15, (%rax)
.Ltmp4172:
    00000171: 	addq	$0x1, 0x18(%rbp)
    00000176: 	leaq	0x10(%r15), %rax
    0000017a: 	jmp	.Ltmp4166 # Offset: 378
    0000017f: 	nop # Size: 1
.Ltmp4157:
    00000180: 	leaq	0x20(%rsp), %rdi
    00000185: 	movl	$0xc70f6907, %edx
    0000018a: 	movl	$0x8, %esi
    0000018f: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 399
    00000194: 	movq	%rax, %r13
    00000197: 	jmp	.Ltmp4167 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp4161:
    000001a0: 	movq	%r8, %rdx
    000001a3: 	leaq	0x20(%rsp), %rdi
    000001a8: 	movl	$0x8, %esi
    000001ad: 	movq	%rcx, 0x8(%rsp)
    000001b2: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 434
    000001b7: 	movq	0x8(%rsp), %rcx
    000001bc: 	xorl	%edx, %edx
    000001be: 	movl	$0xc70f6907, %r8d
    000001c4: 	divq	%rcx
    000001c7: 	jmp	.Ltmp4168 # Offset: 455
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp4164:
    000001d0: 	leaq	0x18(%rsp), %rdx
    000001d5: 	movq	%rbp, %rdi
    000001d8: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEmRKm # Offset: 472
    000001dd: 	movq	%r13, %rax
    000001e0: 	xorl	%edx, %edx
    000001e2: 	movq	(%rbp), %r12
    000001e6: 	divq	0x8(%rbp)
    000001ea: 	leaq	(,%rdx,8), %r14
    000001f2: 	leaq	(%r12,%r14), %rax
    000001f6: 	movq	(%rax), %rdx
    000001f9: 	testq	%rdx, %rdx
    000001fc: 	jne	.Ltmp4169 # Offset: 508
.Ltmp4165:
    00000202: 	movq	0x10(%rbp), %rdx
    00000206: 	movq	%r15, 0x10(%rbp)
    0000020a: 	movq	%rdx, (%r15)
    0000020d: 	testq	%rdx, %rdx
    00000210: 	je	.Ltmp4170 # Offset: 528
    00000212: 	movsd	0x8(%rdx), %xmm0
    00000217: 	pxor	%xmm3, %xmm3
    0000021b: 	movq	0x8(%rbp), %r13
    0000021f: 	ucomisd	%xmm3, %xmm0
    00000223: 	movsd	%xmm0, 0x20(%rsp)
    00000229: 	jp	.Ltmp4171 # Offset: 553
    0000022b: 	jne	.Ltmp4171 # Offset: 555
.Ltmp4173:
    0000022d: 	movq	%r15, (%r12)
.Ltmp4170:
    00000231: 	leaq	0x10(%rbp), %rdx
    00000235: 	movq	%rdx, (%rax)
    00000238: 	jmp	.Ltmp4172 # Offset: 568
    0000023d: 	nopl	(%rax) # Size: 3
.Ltmp4171:
    00000240: 	movl	$0xc70f6907, %edx
    00000245: 	leaq	0x20(%rsp), %rdi
    0000024a: 	movl	$0x8, %esi
    0000024f: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 591
    00000254: 	xorl	%edx, %edx
    00000256: 	divq	%r13
    00000259: 	movq	(%rbp), %rax
    0000025d: 	addq	%r14, %rax
    00000260: 	leaq	(%r12,%rdx,8), %r12
    00000264: 	jmp	.Ltmp4173 # Offset: 612
.Ltmp4160:
    00000266: 	callq	__stack_chk_fail@PLT # Offset: 614
    0000026b: 	endbr64
    0000026f: 	movq	%rax, %rbp
    00000272: 	movq	%r15, %rdi
    00000275: 	movl	$0x18, %esi
    0000027a: 	callq	_ZdlPvm@PLT # Offset: 634
    0000027f: 	movq	%rbp, %rdi
    00000282: 	callq	_Unwind_Resume@PLT # Offset: 642
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_"

Binary Function "_Z13test_find_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 258
  State       : disassembled
  Address     : 0x2a660
  Size        : 0x3bd
  MaxSize     : 0x3c0
  Offset      : 0x2a660
  Section     : .text
  Orc Section : .local.text._Z13test_find_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0257:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rcx, %rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	%rdx, 0x28(%rsp)
    0000001d: 	movq	%r8, 0x30(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x88(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	leaq	0x80(%rsp), %rax
    0000003d: 	movq	$0x1, 0x58(%rsp)
    00000046: 	movq	%rax, 0x38(%rsp)
    0000004b: 	movq	%rax, 0x50(%rsp)
    00000050: 	movq	$0x0, 0x60(%rsp)
    00000059: 	movq	$0x0, 0x68(%rsp)
    00000062: 	movl	$0x3f800000, 0x70(%rsp)
    0000006a: 	movq	$0x0, 0x78(%rsp)
    00000073: 	movq	$0x0, 0x80(%rsp)
    0000007f: 	cmpq	%rsi, %rdi
    00000082: 	je	.Ltmp4174 # Offset: 130
    00000088: 	pxor	%xmm6, %xmm6
    0000008c: 	movq	%rdi, %rbp
    0000008f: 	leaq	0x50(%rsp), %r15
    00000094: 	movq	%rsi, %r12
    00000097: 	movsd	%xmm6, (%rsp)
    0000009c: 	movsd	%xmm6, 0x20(%rsp)
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4175:
    000000a8: 	movq	%rbp, %rsi
    000000ab: 	movq	%r15, %rdi
    000000ae: 	callq	_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ # Offset: 174
    000000b3: 	movsd	(%rbp), %xmm0
    000000b8: 	addq	$0x8, %rbp
    000000bc: 	movsd	%xmm0, (%rax)
    000000c0: 	addsd	0x20(%rsp), %xmm0
    000000c6: 	movsd	%xmm0, 0x20(%rsp)
    000000cc: 	cmpq	%rbp, %r12
    000000cf: 	jne	.Ltmp4175 # Offset: 207
.Ltmp4196:
    000000d1: 	callq	clock@PLT # Offset: 209
    000000d6: 	movl	$0xc70f6907, %ebp
    000000db: 	movl	$0x0, 0x1c(%rsp)
    000000e3: 	leaq	0x48(%rsp), %r12
    000000e8: 	movq	%rax, start_time(%rip)
    000000ef: 	movl	iterations(%rip), %eax
    000000f5: 	testl	%eax, %eax
    000000f7: 	jle	.Ltmp4176 # Offset: 247
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp4186:
    00000100: 	movq	0x28(%rsp), %rax
    00000105: 	pxor	%xmm1, %xmm1
    00000109: 	movq	%rax, %r14
    0000010c: 	cmpq	%rbx, %rax
    0000010f: 	je	.Ltmp4177 # Offset: 271
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp4184:
    00000118: 	addq	$0x8, %r14
    0000011c: 	movsd	-0x8(%r14), %xmm0
    00000122: 	ucomisd	(%rsp), %xmm0
    00000127: 	movsd	%xmm0, 0x48(%rsp)
    0000012d: 	jp	.Ltmp4178 # Offset: 301
    00000133: 	movl	$0x0, %eax
    00000138: 	jne	.Ltmp4178 # Offset: 312
.Ltmp4192:
    0000013e: 	xorl	%edx, %edx
    00000140: 	divq	0x58(%rsp)
    00000145: 	movq	0x50(%rsp), %rax
    0000014a: 	movq	(%rax,%rdx,8), %rax
    0000014e: 	movq	%rdx, %r15
    00000151: 	testq	%rax, %rax
    00000154: 	je	.Ltmp4179 # Offset: 340
    0000015a: 	movq	(%rax), %r13
    0000015d: 	movsd	0x8(%r13), %xmm0
    00000163: 	ucomisd	-0x8(%r14), %xmm0
    00000169: 	jp	.Ltmp4180 # Offset: 361
    0000016b: 	je	.Ltmp4181 # Offset: 363
.Ltmp4180:
    0000016d: 	movq	%r12, %rcx
    00000170: 	movq	%rbx, %r12
    00000173: 	movq	%r15, %rbx
.Ltmp4183:
    00000176: 	movq	(%r13), %rax
    0000017a: 	testq	%rax, %rax
    0000017d: 	je	.Ltmp4179 # Offset: 381
    00000183: 	movsd	0x8(%rax), %xmm0
    00000188: 	ucomisd	(%rsp), %xmm0
    0000018d: 	movq	0x58(%rsp), %r15
    00000192: 	movsd	%xmm0, 0x48(%rsp)
    00000198: 	jp	.Ltmp4182 # Offset: 408
    0000019e: 	movl	$0x0, %edx
    000001a3: 	jne	.Ltmp4182 # Offset: 419
.Ltmp4193:
    000001a9: 	cmpq	%rbx, %rdx
    000001ac: 	jne	.Ltmp4179 # Offset: 428
    000001b2: 	movq	(%r13), %r13
    000001b6: 	movsd	-0x8(%r14), %xmm0
    000001bc: 	ucomisd	0x8(%r13), %xmm0
    000001c2: 	jp	.Ltmp4183 # Offset: 450
    000001c4: 	jne	.Ltmp4183 # Offset: 452
    000001c6: 	movq	%r12, %rbx
    000001c9: 	movq	%rcx, %r12
.Ltmp4181:
    000001cc: 	addsd	0x10(%r13), %xmm1
    000001d2: 	cmpq	%r14, %rbx
    000001d5: 	jne	.Ltmp4184 # Offset: 469
.Ltmp4177:
    000001db: 	ucomisd	0x20(%rsp), %xmm1
    000001e1: 	jp	.Ltmp4185 # Offset: 481
    000001e7: 	jne	.Ltmp4185 # Offset: 487
.Ltmp4194:
    000001ed: 	addl	$0x1, 0x1c(%rsp)
    000001f2: 	movl	0x1c(%rsp), %eax
    000001f6: 	cmpl	%eax, iterations(%rip)
    000001fc: 	jg	.Ltmp4186 # Offset: 508
.Ltmp4176:
    00000202: 	movq	0x30(%rsp), %rdi
    00000207: 	leaq	0x50(%rsp), %r15
    0000020c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 524
    00000211: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000218: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000021f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000226: 	je	.Ltmp4187 # Offset: 550
.Ltmp4195:
    0000022c: 	movq	-0x20(%rax), %rbp
    00000230: 	leaq	0x50(%rsp), %r15
    00000235: 	callq	clock@PLT # Offset: 565
    0000023a: 	pxor	%xmm0, %xmm0
    0000023e: 	movq	%rax, end_time(%rip)
    00000245: 	movq	%rbp, %rdi
    00000248: 	subq	start_time(%rip), %rax
    0000024f: 	cvtsi2sd	%rax, %xmm0
    00000254: 	divsd	DATAat0x53788(%rip), %xmm0
    0000025c: 	callq	_Z13record_resultdPKc # Offset: 604
    00000261: 	movq	0x60(%rsp), %rbx
    00000266: 	testq	%rbx, %rbx
    00000269: 	je	.Ltmp4188 # Offset: 617
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4189:
    00000270: 	movq	%rbx, %rdi
    00000273: 	movq	(%rbx), %rbx
    00000276: 	movl	$0x18, %esi
    0000027b: 	callq	_ZdlPvm@PLT # Offset: 635
    00000280: 	testq	%rbx, %rbx
    00000283: 	jne	.Ltmp4189 # Offset: 643
.Ltmp4188:
    00000285: 	movq	0x58(%rsp), %rax
    0000028a: 	movq	0x50(%rsp), %rdi
    0000028f: 	xorl	%esi, %esi
    00000291: 	leaq	(,%rax,8), %rdx
    00000299: 	callq	memset@PLT # Offset: 665
    0000029e: 	movq	0x58(%rsp), %rsi
    000002a3: 	movq	0x50(%rsp), %rdi
    000002a8: 	movq	$0x0, 0x68(%rsp)
    000002b1: 	movq	$0x0, 0x60(%rsp)
    000002ba: 	cmpq	0x38(%rsp), %rdi
    000002bf: 	je	.Ltmp4190 # Offset: 703
    000002c1: 	shlq	$0x3, %rsi
    000002c5: 	callq	_ZdlPvm@PLT # Offset: 709
.Ltmp4190:
    000002ca: 	movq	0x88(%rsp), %rax
    000002d2: 	subq	%fs:0x28, %rax
    000002db: 	jne	.Ltmp4191 # Offset: 731
    000002e1: 	addq	$0x98, %rsp
    000002e8: 	popq	%rbx
    000002e9: 	popq	%rbp
    000002ea: 	popq	%r12
    000002ec: 	popq	%r13
    000002ee: 	popq	%r14
    000002f0: 	popq	%r15
    000002f2: 	retq # Offset: 754
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4178:
    000002f8: 	movq	%rbp, %rdx
    000002fb: 	movl	$0x8, %esi
    00000300: 	movq	%r12, %rdi
    00000303: 	movsd	%xmm1, 0x8(%rsp)
    00000309: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 777
    0000030e: 	movsd	0x8(%rsp), %xmm1
    00000314: 	jmp	.Ltmp4192 # Offset: 788
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp4182:
    00000320: 	movq	%rbp, %rdx
    00000323: 	movq	%rcx, %rdi
    00000326: 	movl	$0x8, %esi
    0000032b: 	movq	%rcx, 0x8(%rsp)
    00000330: 	movsd	%xmm1, 0x10(%rsp)
    00000336: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 822
    0000033b: 	xorl	%edx, %edx
    0000033d: 	movsd	0x10(%rsp), %xmm1
    00000343: 	movq	0x8(%rsp), %rcx
    00000348: 	divq	%r15
    0000034b: 	jmp	.Ltmp4193 # Offset: 843
.Ltmp4185:
    00000350: 	movl	current_test(%rip), %edx
    00000356: 	leaq	DATAat0x52360(%rip), %rsi
    0000035d: 	movl	$0x1, %edi
    00000362: 	xorl	%eax, %eax
    00000364: 	leaq	0x50(%rsp), %r15
    00000369: 	callq	__printf_chk@PLT # Offset: 873
    0000036e: 	jmp	.Ltmp4194 # Offset: 878
.Ltmp4187:
    00000373: 	movq	-0x8(%rdx), %rax
    00000377: 	addq	$0x200, %rax
    0000037d: 	jmp	.Ltmp4195 # Offset: 893
.Ltmp4174:
    00000382: 	pxor	%xmm7, %xmm7
    00000386: 	movsd	%xmm7, (%rsp)
    0000038b: 	movsd	%xmm7, 0x20(%rsp)
    00000391: 	jmp	.Ltmp4196 # Offset: 913
.Ltmp4191:
    00000396: 	callq	__stack_chk_fail@PLT # Offset: 918
.Ltmp4179:
    0000039b: 	movsd	0x10, %xmm0
    000003a4: 	ud2
    000003a6: 	endbr64
    000003aa: 	movq	%rax, %rbp
    000003ad: 	movq	%r15, %rdi
    000003b0: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev # Offset: 944
    000003b5: 	movq	%rbp, %rdi
    000003b8: 	callq	_Unwind_Resume@PLT # Offset: 952
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_find_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_accum_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 259
  State       : disassembled
  Address     : 0x2aa20
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x2aa20
  Section     : .text
  Orc Section : .local.text._Z14test_accum_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0258:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdx, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x58, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x48(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x40(%rsp), %r13
    0000002a: 	movl	$0x3f800000, 0x30(%rsp)
    00000032: 	movq	%r13, 0x10(%rsp)
    00000037: 	movq	$0x1, 0x18(%rsp)
    00000040: 	movq	$0x0, 0x20(%rsp)
    00000049: 	movq	$0x0, 0x28(%rsp)
    00000052: 	movq	$0x0, 0x38(%rsp)
    0000005b: 	movq	$0x0, 0x40(%rsp)
    00000064: 	cmpq	%rsi, %rdi
    00000067: 	je	.Ltmp4197 # Offset: 103
    0000006d: 	pxor	%xmm3, %xmm3
    00000071: 	movq	%rdi, %rbx
    00000074: 	leaq	0x10(%rsp), %r14
    00000079: 	movq	%rsi, %r12
    0000007c: 	movq	%xmm3, %r15
    00000081: 	movsd	%xmm3, 0x8(%rsp)
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4198:
    00000090: 	movq	%rbx, %rsi
    00000093: 	movq	%r14, %rdi
    00000096: 	callq	_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ # Offset: 150
    0000009b: 	movsd	(%rbx), %xmm0
    0000009f: 	addq	$0x8, %rbx
    000000a3: 	movsd	%xmm0, (%rax)
    000000a7: 	addsd	0x8(%rsp), %xmm0
    000000ad: 	movsd	%xmm0, 0x8(%rsp)
    000000b3: 	cmpq	%rbx, %r12
    000000b6: 	jne	.Ltmp4198 # Offset: 182
.Ltmp4211:
    000000b8: 	callq	clock@PLT # Offset: 184
    000000bd: 	movl	iterations(%rip), %ecx
    000000c3: 	xorl	%ebx, %ebx
    000000c5: 	leaq	DATAat0x52360(%rip), %r12
    000000cc: 	movq	%rax, start_time(%rip)
    000000d3: 	testl	%ecx, %ecx
    000000d5: 	jle	.Ltmp4199 # Offset: 213
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4203:
    000000e0: 	movq	0x20(%rsp), %rax
    000000e5: 	movq	%r15, %xmm0
    000000ea: 	testq	%rax, %rax
    000000ed: 	je	.Ltmp4200 # Offset: 237
    000000ef: 	nop # Size: 1
.Ltmp4201:
    000000f0: 	movq	%rax, %rdx
    000000f3: 	movq	(%rax), %rax
    000000f6: 	addsd	0x10(%rdx), %xmm0
    000000fb: 	testq	%rax, %rax
    000000fe: 	jne	.Ltmp4201 # Offset: 254
.Ltmp4200:
    00000100: 	movsd	0x8(%rsp), %xmm2
    00000106: 	ucomisd	%xmm0, %xmm2
    0000010a: 	jp	.Ltmp4202 # Offset: 266
    00000110: 	jne	.Ltmp4202 # Offset: 272
.Ltmp4209:
    00000116: 	addl	$0x1, %ebx
    00000119: 	cmpl	%ebx, %ecx
    0000011b: 	jg	.Ltmp4203 # Offset: 283
.Ltmp4199:
    0000011d: 	movq	%rbp, %rdi
    00000120: 	leaq	0x10(%rsp), %r14
    00000125: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 293
    0000012a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000131: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000138: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000013f: 	je	.Ltmp4204 # Offset: 319
.Ltmp4210:
    00000145: 	movq	-0x20(%rax), %rbp
    00000149: 	leaq	0x10(%rsp), %r14
    0000014e: 	callq	clock@PLT # Offset: 334
    00000153: 	pxor	%xmm0, %xmm0
    00000157: 	movq	%rax, end_time(%rip)
    0000015e: 	movq	%rbp, %rdi
    00000161: 	subq	start_time(%rip), %rax
    00000168: 	cvtsi2sd	%rax, %xmm0
    0000016d: 	divsd	DATAat0x53788(%rip), %xmm0
    00000175: 	callq	_Z13record_resultdPKc # Offset: 373
    0000017a: 	movq	0x20(%rsp), %rbx
    0000017f: 	testq	%rbx, %rbx
    00000182: 	je	.Ltmp4205 # Offset: 386
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp4206:
    00000188: 	movq	%rbx, %rdi
    0000018b: 	movq	(%rbx), %rbx
    0000018e: 	movl	$0x18, %esi
    00000193: 	callq	_ZdlPvm@PLT # Offset: 403
    00000198: 	testq	%rbx, %rbx
    0000019b: 	jne	.Ltmp4206 # Offset: 411
.Ltmp4205:
    0000019d: 	movq	0x18(%rsp), %rax
    000001a2: 	movq	0x10(%rsp), %rdi
    000001a7: 	xorl	%esi, %esi
    000001a9: 	leaq	(,%rax,8), %rdx
    000001b1: 	callq	memset@PLT # Offset: 433
    000001b6: 	movq	0x10(%rsp), %rdi
    000001bb: 	movq	0x18(%rsp), %rax
    000001c0: 	movq	$0x0, 0x28(%rsp)
    000001c9: 	movq	$0x0, 0x20(%rsp)
    000001d2: 	cmpq	%r13, %rdi
    000001d5: 	je	.Ltmp4207 # Offset: 469
    000001d7: 	leaq	(,%rax,8), %rsi
    000001df: 	callq	_ZdlPvm@PLT # Offset: 479
.Ltmp4207:
    000001e4: 	movq	0x48(%rsp), %rax
    000001e9: 	subq	%fs:0x28, %rax
    000001f2: 	jne	.Ltmp4208 # Offset: 498
    000001f4: 	addq	$0x58, %rsp
    000001f8: 	popq	%rbx
    000001f9: 	popq	%rbp
    000001fa: 	popq	%r12
    000001fc: 	popq	%r13
    000001fe: 	popq	%r14
    00000200: 	popq	%r15
    00000202: 	retq # Offset: 514
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4202:
    00000208: 	movl	current_test(%rip), %edx
    0000020e: 	movq	%r12, %rsi
    00000211: 	movl	$0x1, %edi
    00000216: 	xorl	%eax, %eax
    00000218: 	leaq	0x10(%rsp), %r14
    0000021d: 	callq	__printf_chk@PLT # Offset: 541
    00000222: 	movl	iterations(%rip), %ecx
    00000228: 	jmp	.Ltmp4209 # Offset: 552
.Ltmp4204:
    0000022d: 	movq	-0x8(%rdx), %rax
    00000231: 	addq	$0x200, %rax
    00000237: 	jmp	.Ltmp4210 # Offset: 567
.Ltmp4197:
    0000023c: 	pxor	%xmm4, %xmm4
    00000240: 	movq	%xmm4, %r15
    00000245: 	movsd	%xmm4, 0x8(%rsp)
    0000024b: 	jmp	.Ltmp4211 # Offset: 587
.Ltmp4208:
    00000250: 	callq	__stack_chk_fail@PLT # Offset: 592
    00000255: 	endbr64
    00000259: 	movq	%rax, %rbp
    0000025c: 	movq	%r14, %rdi
    0000025f: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev # Offset: 607
    00000264: 	movq	%rbp, %rdi
    00000267: 	callq	_Unwind_Resume@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_accum_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_insert_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEELb1EEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 260
  State       : disassembled
  Address     : 0x2ac90
  Size        : 0x4aa
  MaxSize     : 0x4b0
  Offset      : 0x2ac90
  Section     : .text
  Orc Section : .local.text._Z15test_insert_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEELb1EEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0259:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	xorl	%ebx, %ebx
    00000016: 	subq	$0x68, %rsp
    0000001a: 	movq	%rdx, 0x38(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x58(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp4212 # Offset: 67
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp4216:
    00000050: 	movl	$0x38, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movq	%r15, %rsi
    0000005d: 	leaq	0x30(%rax), %r13
    00000061: 	movq	$0x1, 0x8(%rax)
    00000069: 	movq	%rax, %rbp
    0000006c: 	movq	%rax, %rdi
    0000006f: 	movq	%r13, (%rax)
    00000072: 	movq	$0x0, 0x10(%rax)
    0000007a: 	movq	$0x0, 0x18(%rax)
    00000082: 	movl	$0x3f800000, 0x20(%rax)
    00000089: 	movq	$0x0, 0x28(%rax)
    00000091: 	movq	$0x0, 0x30(%rax)
    00000099: 	callq	_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ # Offset: 153
    0000009e: 	movsd	(%r15), %xmm0
    000000a3: 	movq	0x10(%rbp), %r14
    000000a7: 	movsd	%xmm0, (%rax)
    000000ab: 	testq	%r14, %r14
    000000ae: 	je	.Ltmp4213 # Offset: 174
.Ltmp4214:
    000000b0: 	movq	%r14, %rdi
    000000b3: 	movq	(%r14), %r14
    000000b6: 	movl	$0x18, %esi
    000000bb: 	callq	_ZdlPvm@PLT # Offset: 187
    000000c0: 	testq	%r14, %r14
    000000c3: 	jne	.Ltmp4214 # Offset: 195
.Ltmp4213:
    000000c5: 	movq	0x8(%rbp), %rax
    000000c9: 	movq	(%rbp), %rdi
    000000cd: 	xorl	%esi, %esi
    000000cf: 	leaq	(,%rax,8), %rdx
    000000d7: 	callq	memset@PLT # Offset: 215
    000000dc: 	movq	(%rbp), %rdi
    000000e0: 	movq	0x8(%rbp), %rax
    000000e4: 	movq	$0x0, 0x18(%rbp)
    000000ec: 	movq	$0x0, 0x10(%rbp)
    000000f4: 	cmpq	%rdi, %r13
    000000f7: 	je	.Ltmp4215 # Offset: 247
    000000fd: 	leaq	(,%rax,8), %rsi
    00000105: 	addl	$0x1, %ebx
    00000108: 	callq	_ZdlPvm@PLT # Offset: 264
    0000010d: 	movl	$0x38, %esi
    00000112: 	movq	%rbp, %rdi
    00000115: 	callq	_ZdlPvm@PLT # Offset: 277
    0000011a: 	cmpl	iterations(%rip), %ebx
    00000120: 	jl	.Ltmp4216 # Offset: 288
.Ltmp4212:
    00000126: 	callq	clock@PLT # Offset: 294
    0000012b: 	pxor	%xmm0, %xmm0
    0000012f: 	movq	%r12, %rcx
    00000132: 	xorl	%edx, %edx
    00000134: 	movq	%rax, end_time(%rip)
    0000013b: 	subq	start_time(%rip), %rax
    00000142: 	subq	%r15, %rcx
    00000145: 	cvtsi2sd	%rax, %xmm0
    0000014a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000152: 	movabsq	$0x500000000, %rax
    0000015c: 	movsd	%xmm0, 0x30(%rsp)
    00000162: 	divq	%rcx
    00000165: 	movq	%rax, 0x8(%rsp)
    0000016a: 	cmpq	$0x3e8, %rax
    00000170: 	ja	.Ltmp4217 # Offset: 368
    00000176: 	cmpq	$0x3, 0x8(%rsp)
    0000017c: 	ja	.Ltmp4218 # Offset: 380
    00000182: 	movq	$0x0, 0x50(%rsp)
    0000018b: 	pxor	%xmm0, %xmm0
    0000018f: 	movq	$0x4, 0x8(%rsp)
    00000198: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp4232:
    0000019d: 	movq	0x8(%rsp), %rbx
    000001a2: 	leaq	0x40(%rsp), %rdi
    000001a7: 	movq	%rbx, %rsi
    000001aa: 	callq	_ZNSt6vectorIPSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 426
    000001af: 	movq	0x40(%rsp), %rcx
    000001b4: 	movl	iterations(%rip), %eax
    000001ba: 	movq	%rcx, 0x18(%rsp)
    000001bf: 	testl	%eax, %eax
    000001c1: 	jle	.Ltmp4219 # Offset: 449
    000001c7: 	addq	$0x8, %rcx
    000001cb: 	movl	%ebx, 0x24(%rsp)
    000001cf: 	pxor	%xmm2, %xmm2
    000001d3: 	movl	$0x0, 0x20(%rsp)
    000001db: 	movq	%rcx, 0x28(%rsp)
    000001e0: 	movsd	%xmm2, 0x10(%rsp)
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4228:
    000001f0: 	movslq	0x20(%rsp), %rdx
    000001f5: 	movslq	%eax, %rcx
    000001f8: 	movq	%rdx, %rsi
    000001fb: 	addq	0x8(%rsp), %rdx
    00000200: 	subl	%esi, %eax
    00000202: 	cmpq	%rcx, %rdx
    00000205: 	cmovbl	0x24(%rsp), %eax
    0000020a: 	movl	%eax, %ebx
    0000020c: 	callq	clock@PLT # Offset: 524
    00000211: 	movq	0x28(%rsp), %rcx
    00000216: 	movq	0x18(%rsp), %r14
    0000021b: 	movq	%rax, start_time(%rip)
    00000222: 	leal	-0x1(%rbx), %eax
    00000225: 	leaq	(%rcx,%rax,8), %rax
    00000229: 	movq	%r14, %r13
    0000022c: 	movq	%rax, (%rsp)
.Ltmp4222:
    00000230: 	movl	$0x38, %edi
    00000235: 	callq	_Znwm@PLT # Offset: 565
    0000023a: 	movq	%rax, %rbp
    0000023d: 	leaq	0x30(%rax), %rax
    00000241: 	movq	%r15, %rbx
    00000244: 	movq	%rax, (%rbp)
    00000248: 	movq	$0x1, 0x8(%rbp)
    00000250: 	movq	$0x0, 0x10(%rbp)
    00000258: 	movq	$0x0, 0x18(%rbp)
    00000260: 	movl	$0x3f800000, 0x20(%rbp)
    00000267: 	movq	$0x0, 0x28(%rbp)
    0000026f: 	movq	$0x0, 0x30(%rbp)
    00000277: 	cmpq	%r15, %r12
    0000027a: 	je	.Ltmp4220 # Offset: 634
    0000027c: 	nopl	(%rax) # Size: 4
.Ltmp4221:
    00000280: 	movq	%rbx, %rsi
    00000283: 	movq	%rbp, %rdi
    00000286: 	callq	_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ # Offset: 646
    0000028b: 	movsd	(%rbx), %xmm0
    0000028f: 	addq	$0x8, %rbx
    00000293: 	movsd	%xmm0, (%rax)
    00000297: 	cmpq	%rbx, %r12
    0000029a: 	jne	.Ltmp4221 # Offset: 666
.Ltmp4220:
    0000029c: 	movq	%rbp, (%r14)
    0000029f: 	addq	$0x8, %r14
    000002a3: 	cmpq	%r14, (%rsp)
    000002a7: 	jne	.Ltmp4222 # Offset: 679
    000002a9: 	callq	clock@PLT # Offset: 681
    000002ae: 	pxor	%xmm0, %xmm0
    000002b2: 	movq	%rax, end_time(%rip)
    000002b9: 	subq	start_time(%rip), %rax
    000002c0: 	cvtsi2sd	%rax, %xmm0
    000002c5: 	divsd	DATAat0x53788(%rip), %xmm0
    000002cd: 	addsd	0x10(%rsp), %xmm0
    000002d3: 	movsd	%xmm0, 0x10(%rsp)
    000002d9: 	nopl	(%rax) # Size: 7
.Ltmp4227:
    000002e0: 	movq	(%r13), %rbp
    000002e4: 	testq	%rbp, %rbp
    000002e7: 	je	.Ltmp4223 # Offset: 743
    000002e9: 	movq	0x10(%rbp), %rbx
    000002ed: 	testq	%rbx, %rbx
    000002f0: 	je	.Ltmp4224 # Offset: 752
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4225:
    000002f8: 	movq	%rbx, %rdi
    000002fb: 	movq	(%rbx), %rbx
    000002fe: 	movl	$0x18, %esi
    00000303: 	callq	_ZdlPvm@PLT # Offset: 771
    00000308: 	testq	%rbx, %rbx
    0000030b: 	jne	.Ltmp4225 # Offset: 779
.Ltmp4224:
    0000030d: 	movq	0x8(%rbp), %rax
    00000311: 	movq	(%rbp), %rdi
    00000315: 	xorl	%esi, %esi
    00000317: 	leaq	(,%rax,8), %rdx
    0000031f: 	callq	memset@PLT # Offset: 799
    00000324: 	movq	(%rbp), %rdi
    00000328: 	leaq	0x30(%rbp), %rax
    0000032c: 	movq	$0x0, 0x18(%rbp)
    00000334: 	movq	$0x0, 0x10(%rbp)
    0000033c: 	movq	0x8(%rbp), %rsi
    00000340: 	cmpq	%rax, %rdi
    00000343: 	je	.Ltmp4226 # Offset: 835
    00000345: 	shlq	$0x3, %rsi
    00000349: 	callq	_ZdlPvm@PLT # Offset: 841
.Ltmp4226:
    0000034e: 	movl	$0x38, %esi
    00000353: 	movq	%rbp, %rdi
    00000356: 	callq	_ZdlPvm@PLT # Offset: 854
.Ltmp4223:
    0000035b: 	movq	$0x0, (%r13)
    00000363: 	addq	$0x8, %r13
    00000367: 	cmpq	%r13, (%rsp)
    0000036b: 	jne	.Ltmp4227 # Offset: 875
    00000371: 	movl	0x8(%rsp), %ecx
    00000375: 	movl	iterations(%rip), %eax
    0000037b: 	addl	%ecx, 0x20(%rsp)
    0000037f: 	movl	0x20(%rsp), %ecx
    00000383: 	cmpl	%ecx, %eax
    00000385: 	jg	.Ltmp4228 # Offset: 901
.Ltmp4234:
    0000038b: 	movq	0x38(%rsp), %rdi
    00000390: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 912
    00000395: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000039c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003a3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003aa: 	je	.Ltmp4229 # Offset: 938
.Ltmp4233:
    000003b0: 	movsd	0x10(%rsp), %xmm0
    000003b6: 	subsd	0x30(%rsp), %xmm0
    000003bc: 	movq	-0x20(%rax), %rdi
    000003c0: 	callq	_Z13record_resultdPKc # Offset: 960
    000003c5: 	cmpq	$0x0, 0x18(%rsp)
    000003cb: 	je	.Ltmp4230 # Offset: 971
    000003cd: 	movq	0x58(%rsp), %rax
    000003d2: 	subq	%fs:0x28, %rax
    000003db: 	jne	.Ltmp4231 # Offset: 987
    000003e1: 	movq	0x50(%rsp), %rsi
    000003e6: 	movq	0x18(%rsp), %rdi
    000003eb: 	addq	$0x68, %rsp
    000003ef: 	popq	%rbx
    000003f0: 	popq	%rbp
    000003f1: 	subq	%rdi, %rsi
    000003f4: 	popq	%r12
    000003f6: 	popq	%r13
    000003f8: 	popq	%r14
    000003fa: 	popq	%r15
    000003fc: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1020
.Ltmp4215:
    00000401: 	movl	$0x38, %esi
    00000406: 	movq	%rbp, %rdi
    00000409: 	addl	$0x1, %ebx
    0000040c: 	callq	_ZdlPvm@PLT # Offset: 1036
    00000411: 	cmpl	%ebx, iterations(%rip)
    00000417: 	jg	.Ltmp4216 # Offset: 1047
    0000041d: 	jmp	.Ltmp4212 # Offset: 1053
.Ltmp4230:
    00000422: 	movq	0x58(%rsp), %rax
    00000427: 	subq	%fs:0x28, %rax
    00000430: 	jne	.Ltmp4231 # Offset: 1072
    00000432: 	addq	$0x68, %rsp
    00000436: 	popq	%rbx
    00000437: 	popq	%rbp
    00000438: 	popq	%r12
    0000043a: 	popq	%r13
    0000043c: 	popq	%r14
    0000043e: 	popq	%r15
    00000440: 	retq # Offset: 1088
.Ltmp4217:
    00000441: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp4218:
    0000044a: 	movq	$0x0, 0x50(%rsp)
    00000453: 	pxor	%xmm0, %xmm0
    00000457: 	movaps	%xmm0, 0x40(%rsp)
    0000045c: 	jmp	.Ltmp4232 # Offset: 1116
.Ltmp4229:
    00000461: 	movq	-0x8(%rdx), %rax
    00000465: 	addq	$0x200, %rax
    0000046b: 	jmp	.Ltmp4233 # Offset: 1131
.Ltmp4219:
    00000470: 	pxor	%xmm3, %xmm3
    00000474: 	movsd	%xmm3, 0x10(%rsp)
    0000047a: 	jmp	.Ltmp4234 # Offset: 1146
.Ltmp4231:
    0000047f: 	callq	__stack_chk_fail@PLT # Offset: 1151
    00000484: 	endbr64
    00000488: 	movq	%rax, %rbp
    0000048b: 	movq	0x40(%rsp), %rdi
    00000490: 	movq	0x50(%rsp), %rsi
    00000495: 	subq	%rdi, %rsi
    00000498: 	testq	%rdi, %rdi
    0000049b: 	je	.Ltmp4235 # Offset: 1179
    0000049d: 	callq	_ZdlPvm@PLT # Offset: 1181
.Ltmp4235:
    000004a2: 	movq	%rbp, %rdi
    000004a5: 	callq	_Unwind_Resume@PLT # Offset: 1189
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_insert_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEELb1EEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_delete_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 261
  State       : disassembled
  Address     : 0x2b140
  Size        : 0x35e
  MaxSize     : 0x360
  Offset      : 0x2b140
  Section     : .text
  Orc Section : .local.text._Z15test_delete_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0260:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp4236 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp4237 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp4251:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp4238 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4247:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4241:
    00000100: 	movl	$0x38, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbp
    0000010d: 	leaq	0x30(%rax), %rax
    00000111: 	movq	%rax, (%rbp)
    00000115: 	movq	0x8(%rsp), %rax
    0000011a: 	movq	$0x1, 0x8(%rbp)
    00000122: 	movq	$0x0, 0x10(%rbp)
    0000012a: 	movq	%rax, %rbx
    0000012d: 	movq	$0x0, 0x18(%rbp)
    00000135: 	movl	$0x3f800000, 0x20(%rbp)
    0000013c: 	movq	$0x0, 0x28(%rbp)
    00000144: 	movq	$0x0, 0x30(%rbp)
    0000014c: 	cmpq	%rax, %r12
    0000014f: 	je	.Ltmp4239 # Offset: 335
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp4240:
    00000158: 	movq	%rbx, %rsi
    0000015b: 	movq	%rbp, %rdi
    0000015e: 	callq	_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ # Offset: 350
    00000163: 	movsd	(%rbx), %xmm0
    00000167: 	addq	$0x8, %rbx
    0000016b: 	movsd	%xmm0, (%rax)
    0000016f: 	cmpq	%rbx, %r12
    00000172: 	jne	.Ltmp4240 # Offset: 370
.Ltmp4239:
    00000174: 	movq	%rbp, (%r14)
    00000177: 	addq	$0x8, %r14
    0000017b: 	cmpq	%r15, %r14
    0000017e: 	jne	.Ltmp4241 # Offset: 382
    00000180: 	callq	clock@PLT # Offset: 384
    00000185: 	movq	%rax, start_time(%rip)
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp4246:
    00000190: 	movq	(%r13), %rbp
    00000194: 	testq	%rbp, %rbp
    00000197: 	je	.Ltmp4242 # Offset: 407
    00000199: 	movq	0x10(%rbp), %rbx
    0000019d: 	testq	%rbx, %rbx
    000001a0: 	je	.Ltmp4243 # Offset: 416
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4244:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	movq	(%rbx), %rbx
    000001ae: 	movl	$0x18, %esi
    000001b3: 	callq	_ZdlPvm@PLT # Offset: 435
    000001b8: 	testq	%rbx, %rbx
    000001bb: 	jne	.Ltmp4244 # Offset: 443
.Ltmp4243:
    000001bd: 	movq	0x8(%rbp), %rax
    000001c1: 	movq	(%rbp), %rdi
    000001c5: 	xorl	%esi, %esi
    000001c7: 	leaq	(,%rax,8), %rdx
    000001cf: 	callq	memset@PLT # Offset: 463
    000001d4: 	movq	(%rbp), %rdi
    000001d8: 	leaq	0x30(%rbp), %rax
    000001dc: 	movq	$0x0, 0x18(%rbp)
    000001e4: 	movq	$0x0, 0x10(%rbp)
    000001ec: 	movq	0x8(%rbp), %rsi
    000001f0: 	cmpq	%rax, %rdi
    000001f3: 	je	.Ltmp4245 # Offset: 499
    000001f5: 	shlq	$0x3, %rsi
    000001f9: 	callq	_ZdlPvm@PLT # Offset: 505
.Ltmp4245:
    000001fe: 	movl	$0x38, %esi
    00000203: 	movq	%rbp, %rdi
    00000206: 	callq	_ZdlPvm@PLT # Offset: 518
.Ltmp4242:
    0000020b: 	movq	$0x0, (%r13)
    00000213: 	addq	$0x8, %r13
    00000217: 	cmpq	%r13, %r15
    0000021a: 	jne	.Ltmp4246 # Offset: 538
    00000220: 	callq	clock@PLT # Offset: 544
    00000225: 	pxor	%xmm0, %xmm0
    00000229: 	movl	0x10(%rsp), %ecx
    0000022d: 	addl	%ecx, 0x28(%rsp)
    00000231: 	movq	%rax, end_time(%rip)
    00000238: 	subq	start_time(%rip), %rax
    0000023f: 	cvtsi2sd	%rax, %xmm0
    00000244: 	movl	0x28(%rsp), %ecx
    00000248: 	divsd	DATAat0x53788(%rip), %xmm0
    00000250: 	addsd	0x18(%rsp), %xmm0
    00000256: 	movl	iterations(%rip), %eax
    0000025c: 	movsd	%xmm0, 0x18(%rsp)
    00000262: 	cmpl	%ecx, %eax
    00000264: 	jg	.Ltmp4247 # Offset: 612
.Ltmp4253:
    0000026a: 	movq	0x38(%rsp), %rdi
    0000026f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 623
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000282: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000289: 	je	.Ltmp4248 # Offset: 649
.Ltmp4252:
    0000028f: 	movq	-0x20(%rax), %rdi
    00000293: 	movsd	0x18(%rsp), %xmm0
    00000299: 	callq	_Z13record_resultdPKc # Offset: 665
    0000029e: 	cmpq	$0x0, 0x20(%rsp)
    000002a4: 	je	.Ltmp4249 # Offset: 676
    000002a6: 	movq	0x58(%rsp), %rax
    000002ab: 	subq	%fs:0x28, %rax
    000002b4: 	jne	.Ltmp4250 # Offset: 692
    000002b6: 	movq	0x50(%rsp), %rsi
    000002bb: 	movq	0x20(%rsp), %rdi
    000002c0: 	addq	$0x68, %rsp
    000002c4: 	popq	%rbx
    000002c5: 	popq	%rbp
    000002c6: 	subq	%rdi, %rsi
    000002c9: 	popq	%r12
    000002cb: 	popq	%r13
    000002cd: 	popq	%r14
    000002cf: 	popq	%r15
    000002d1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 721
.Ltmp4249:
    000002d6: 	movq	0x58(%rsp), %rax
    000002db: 	subq	%fs:0x28, %rax
    000002e4: 	jne	.Ltmp4250 # Offset: 740
    000002e6: 	addq	$0x68, %rsp
    000002ea: 	popq	%rbx
    000002eb: 	popq	%rbp
    000002ec: 	popq	%r12
    000002ee: 	popq	%r13
    000002f0: 	popq	%r14
    000002f2: 	popq	%r15
    000002f4: 	retq # Offset: 756
.Ltmp4236:
    000002f5: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp4237:
    000002fe: 	movq	$0x0, 0x50(%rsp)
    00000307: 	pxor	%xmm0, %xmm0
    0000030b: 	movaps	%xmm0, 0x40(%rsp)
    00000310: 	jmp	.Ltmp4251 # Offset: 784
.Ltmp4248:
    00000315: 	movq	-0x8(%rdx), %rax
    00000319: 	addq	$0x200, %rax
    0000031f: 	jmp	.Ltmp4252 # Offset: 799
.Ltmp4238:
    00000324: 	pxor	%xmm3, %xmm3
    00000328: 	movsd	%xmm3, 0x18(%rsp)
    0000032e: 	jmp	.Ltmp4253 # Offset: 814
.Ltmp4250:
    00000333: 	callq	__stack_chk_fail@PLT # Offset: 819
    00000338: 	endbr64
    0000033c: 	movq	%rax, %rbp
    0000033f: 	movq	0x40(%rsp), %rdi
    00000344: 	movq	0x50(%rsp), %rsi
    00000349: 	subq	%rdi, %rsi
    0000034c: 	testq	%rdi, %rdi
    0000034f: 	je	.Ltmp4254 # Offset: 847
    00000351: 	callq	_ZdlPvm@PLT # Offset: 849
.Ltmp4254:
    00000356: 	movq	%rbp, %rdi
    00000359: 	callq	_Unwind_Resume@PLT # Offset: 857
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_delete_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_eraseall_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 262
  State       : disassembled
  Address     : 0x2b4a0
  Size        : 0x560
  MaxSize     : 0x560
  Offset      : 0x2b4a0
  Section     : .text
  Orc Section : .local.text._Z17test_eraseall_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0261:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x88, %rsp
    0000001e: 	movq	%rdx, 0x48(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x18(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x78(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	movabsq	$0x500000000, %rax
    00000044: 	divq	%rcx
    00000047: 	movq	%rax, 0x28(%rsp)
    0000004c: 	cmpq	$0x3e8, %rax
    00000052: 	ja	.Ltmp4255 # Offset: 82
    00000058: 	cmpq	$0x3, %rax
    0000005c: 	ja	.Ltmp4256 # Offset: 92
    00000062: 	movq	$0x0, 0x70(%rsp)
    0000006b: 	pxor	%xmm0, %xmm0
    0000006f: 	movq	$0x4, 0x28(%rsp)
    00000078: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp4286:
    0000007d: 	movq	0x28(%rsp), %rbx
    00000082: 	leaq	0x60(%rsp), %rdi
    00000087: 	movq	%rbx, %rsi
    0000008a: 	callq	_ZNSt6vectorIPSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 138
    0000008f: 	movq	0x60(%rsp), %rax
    00000094: 	movl	iterations(%rip), %r14d
    0000009b: 	movq	%rax, 0x8(%rsp)
    000000a0: 	testl	%r14d, %r14d
    000000a3: 	jle	.Ltmp4257 # Offset: 163
    000000a9: 	movl	%ebx, 0x44(%rsp)
    000000ad: 	movq	$0x0, 0x30(%rsp)
    000000b6: 	movl	$0x0, 0x40(%rsp)
    000000be: 	nop # Size: 2
.Ltmp4277:
    000000c0: 	movslq	0x40(%rsp), %rax
    000000c5: 	movslq	%r14d, %rdx
    000000c8: 	movq	%rax, %rcx
    000000cb: 	addq	0x28(%rsp), %rax
    000000d0: 	subl	%ecx, %r14d
    000000d3: 	cmpq	%rdx, %rax
    000000d6: 	movq	0x8(%rsp), %rcx
    000000db: 	movl	%r14d, %r15d
    000000de: 	cmovbl	0x44(%rsp), %r15d
    000000e4: 	movq	%rcx, %r13
    000000e7: 	leal	-0x1(%r15), %eax
    000000eb: 	leaq	0x8(%rcx,%rax,8), %r14
.Ltmp4260:
    000000f0: 	movl	$0x38, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	movq	%rax, %rbp
    000000fd: 	leaq	0x30(%rax), %rax
    00000101: 	movq	%rax, (%rbp)
    00000105: 	movq	0x18(%rsp), %rax
    0000010a: 	movq	$0x1, 0x8(%rbp)
    00000112: 	movq	$0x0, 0x10(%rbp)
    0000011a: 	movq	%rax, %rbx
    0000011d: 	movq	$0x0, 0x18(%rbp)
    00000125: 	movl	$0x3f800000, 0x20(%rbp)
    0000012c: 	movq	$0x0, 0x28(%rbp)
    00000134: 	movq	$0x0, 0x30(%rbp)
    0000013c: 	cmpq	%rax, %r12
    0000013f: 	je	.Ltmp4258 # Offset: 319
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp4259:
    00000148: 	movq	%rbx, %rsi
    0000014b: 	movq	%rbp, %rdi
    0000014e: 	callq	_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ # Offset: 334
    00000153: 	movsd	(%rbx), %xmm0
    00000157: 	addq	$0x8, %rbx
    0000015b: 	movsd	%xmm0, (%rax)
    0000015f: 	cmpq	%rbx, %r12
    00000162: 	jne	.Ltmp4259 # Offset: 354
.Ltmp4258:
    00000164: 	movq	%rbp, (%r13)
    00000168: 	addq	$0x8, %r13
    0000016c: 	cmpq	%r13, %r14
    0000016f: 	jne	.Ltmp4260 # Offset: 367
    00000175: 	callq	clock@PLT # Offset: 373
    0000017a: 	movl	%r15d, %r14d
    0000017d: 	movq	%r12, 0x38(%rsp)
    00000182: 	movq	%rax, start_time(%rip)
    00000189: 	leaq	(,%r14,8), %rax
    00000191: 	movq	%rax, 0x10(%rsp)
    00000196: 	movq	$0x0, (%rsp)
    0000019e: 	nop # Size: 2
.Ltmp4271:
    000001a0: 	movq	0x8(%rsp), %rax
    000001a5: 	movq	(%rsp), %rcx
    000001a9: 	movq	(%rax,%rcx), %r12
    000001ad: 	movq	0x10(%r12), %r8
    000001b2: 	testq	%r8, %r8
    000001b5: 	je	.Ltmp4261 # Offset: 437
    000001bb: 	movsd	0x8(%r8), %xmm0
    000001c1: 	pxor	%xmm2, %xmm2
    000001c5: 	movq	0x8(%r12), %rbp
    000001ca: 	ucomisd	%xmm2, %xmm0
    000001ce: 	movsd	%xmm0, 0x58(%rsp)
    000001d4: 	jp	.Ltmp4262 # Offset: 468
    000001da: 	movl	$0x0, %eax
    000001df: 	movl	$0x0, %ebx
    000001e4: 	jne	.Ltmp4262 # Offset: 484
.Ltmp4285:
    000001ea: 	movq	(%r12), %rdx
    000001ee: 	movq	(%rdx,%rax), %rdx
    000001f2: 	movq	%rdx, %rax
    000001f5: 	nopl	(%rax) # Size: 3
.Ltmp4263:
    000001f8: 	movq	%rax, %r13
    000001fb: 	movq	(%rax), %rax
    000001fe: 	cmpq	%rax, %r8
    00000201: 	jne	.Ltmp4263 # Offset: 513
    00000203: 	testq	%rdx, %rdx
    00000206: 	je	.Ltmp4264 # Offset: 518
    00000208: 	movq	(%rdx), %rdx
.Ltmp4264:
    0000020b: 	cmpq	%rdx, %r8
    0000020e: 	movq	%r8, %rdi
    00000211: 	sete	%bpl
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp4269:
    00000218: 	movq	(%rdi), %r14
    0000021b: 	movl	$0x18, %esi
    00000220: 	callq	_ZdlPvm@PLT # Offset: 544
    00000225: 	subq	$0x1, 0x18(%r12)
    0000022b: 	testq	%r14, %r14
    0000022e: 	je	.Ltmp4265 # Offset: 558
    00000230: 	movsd	0x8(%r14), %xmm0
    00000236: 	pxor	%xmm1, %xmm1
    0000023a: 	movq	0x8(%r12), %r15
    0000023f: 	ucomisd	%xmm1, %xmm0
    00000243: 	movsd	%xmm0, 0x58(%rsp)
    00000249: 	jp	.Ltmp4266 # Offset: 585
    0000024f: 	movl	$0x0, %edx
    00000254: 	jne	.Ltmp4266 # Offset: 596
.Ltmp4281:
    0000025a: 	cmpq	%rdx, %rbx
    0000025d: 	je	.Ltmp4267 # Offset: 605
    0000025f: 	testb	%bpl, %bpl
    00000262: 	jne	.Ltmp4268 # Offset: 610
    00000268: 	movl	$0x1, %ebp
.Ltmp4267:
    0000026d: 	movq	%rdx, %rbx
    00000270: 	movq	%r14, %rdi
    00000273: 	jmp	.Ltmp4269 # Offset: 627
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp4265:
    00000278: 	testb	%bpl, %bpl
    0000027b: 	jne	.Ltmp4270 # Offset: 635
.Ltmp4284:
    00000281: 	movq	$0x0, (%r13)
.Ltmp4261:
    00000289: 	addq	$0x8, (%rsp)
    0000028e: 	movq	(%rsp), %rax
    00000292: 	cmpq	%rax, 0x10(%rsp)
    00000297: 	jne	.Ltmp4271 # Offset: 663
    0000029d: 	movq	0x38(%rsp), %r12
    000002a2: 	callq	clock@PLT # Offset: 674
    000002a7: 	pxor	%xmm0, %xmm0
    000002ab: 	movq	0x10(%rsp), %r13
    000002b0: 	movq	%rax, end_time(%rip)
    000002b7: 	subq	start_time(%rip), %rax
    000002be: 	cvtsi2sd	%rax, %xmm0
    000002c3: 	divsd	DATAat0x53788(%rip), %xmm0
    000002cb: 	addsd	0x30(%rsp), %xmm0
    000002d1: 	movq	0x8(%rsp), %rax
    000002d6: 	movq	%rax, %rbx
    000002d9: 	addq	%rax, %r13
    000002dc: 	movsd	%xmm0, 0x30(%rsp)
    000002e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4276:
    000002e8: 	movq	(%rbx), %r14
    000002eb: 	testq	%r14, %r14
    000002ee: 	je	.Ltmp4272 # Offset: 750
    000002f0: 	movq	0x10(%r14), %rbp
    000002f4: 	testq	%rbp, %rbp
    000002f7: 	je	.Ltmp4273 # Offset: 759
    000002f9: 	nopl	(%rax) # Size: 7
.Ltmp4274:
    00000300: 	movq	%rbp, %rdi
    00000303: 	movq	(%rbp), %rbp
    00000307: 	movl	$0x18, %esi
    0000030c: 	callq	_ZdlPvm@PLT # Offset: 780
    00000311: 	testq	%rbp, %rbp
    00000314: 	jne	.Ltmp4274 # Offset: 788
.Ltmp4273:
    00000316: 	movq	0x8(%r14), %rax
    0000031a: 	movq	(%r14), %rdi
    0000031d: 	xorl	%esi, %esi
    0000031f: 	leaq	(,%rax,8), %rdx
    00000327: 	callq	memset@PLT # Offset: 807
    0000032c: 	movq	(%r14), %rdi
    0000032f: 	leaq	0x30(%r14), %rax
    00000333: 	movq	0x8(%r14), %rsi
    00000337: 	movq	$0x0, 0x18(%r14)
    0000033f: 	movq	$0x0, 0x10(%r14)
    00000347: 	cmpq	%rax, %rdi
    0000034a: 	je	.Ltmp4275 # Offset: 842
    0000034c: 	shlq	$0x3, %rsi
    00000350: 	callq	_ZdlPvm@PLT # Offset: 848
.Ltmp4275:
    00000355: 	movl	$0x38, %esi
    0000035a: 	movq	%r14, %rdi
    0000035d: 	callq	_ZdlPvm@PLT # Offset: 861
.Ltmp4272:
    00000362: 	movq	$0x0, (%rbx)
    00000369: 	addq	$0x8, %rbx
    0000036d: 	cmpq	%rbx, %r13
    00000370: 	jne	.Ltmp4276 # Offset: 880
    00000376: 	movl	0x28(%rsp), %ecx
    0000037a: 	movl	iterations(%rip), %r14d
    00000381: 	addl	%ecx, 0x40(%rsp)
    00000385: 	movl	0x40(%rsp), %eax
    00000389: 	cmpl	%eax, %r14d
    0000038c: 	jg	.Ltmp4277 # Offset: 908
.Ltmp4288:
    00000392: 	movq	0x48(%rsp), %rdi
    00000397: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 919
    0000039c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003a3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003aa: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003b1: 	je	.Ltmp4278 # Offset: 945
.Ltmp4287:
    000003b7: 	movq	-0x20(%rax), %rdi
    000003bb: 	movsd	0x30(%rsp), %xmm0
    000003c1: 	callq	_Z13record_resultdPKc # Offset: 961
    000003c6: 	cmpq	$0x0, 0x8(%rsp)
    000003cc: 	je	.Ltmp4279 # Offset: 972
    000003d2: 	movq	0x78(%rsp), %rax
    000003d7: 	subq	%fs:0x28, %rax
    000003e0: 	jne	.Ltmp4280 # Offset: 992
    000003e6: 	movq	0x70(%rsp), %rsi
    000003eb: 	movq	0x8(%rsp), %rdi
    000003f0: 	addq	$0x88, %rsp
    000003f7: 	popq	%rbx
    000003f8: 	popq	%rbp
    000003f9: 	subq	%rdi, %rsi
    000003fc: 	popq	%r12
    000003fe: 	popq	%r13
    00000400: 	popq	%r14
    00000402: 	popq	%r15
    00000404: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1028
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp4266:
    00000410: 	movl	$0xc70f6907, %edx
    00000415: 	leaq	0x58(%rsp), %rdi
    0000041a: 	movl	$0x8, %esi
    0000041f: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1055
    00000424: 	xorl	%edx, %edx
    00000426: 	divq	%r15
    00000429: 	jmp	.Ltmp4281 # Offset: 1065
    0000042e: 	nop # Size: 2
.Ltmp4268:
    00000430: 	movq	(%r12), %rcx
    00000434: 	leaq	(%rcx,%rbx,8), %rax
    00000438: 	movq	(%rax), %rsi
    0000043b: 	movq	%rsi, (%rcx,%rdx,8)
    0000043f: 	leaq	0x10(%r12), %rcx
    00000444: 	cmpq	%rcx, (%rax)
    00000447: 	je	.Ltmp4282 # Offset: 1095
.Ltmp4289:
    0000044d: 	movq	$0x0, (%rax)
    00000454: 	jmp	.Ltmp4267 # Offset: 1108
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp4270:
    00000460: 	movq	(%r12), %rax
    00000464: 	leaq	0x10(%r12), %rdx
    00000469: 	leaq	(%rax,%rbx,8), %rax
    0000046d: 	cmpq	%rdx, (%rax)
    00000470: 	jne	.Ltmp4283 # Offset: 1136
    00000472: 	movq	$0x0, 0x10(%r12)
.Ltmp4283:
    0000047b: 	movq	$0x0, (%rax)
    00000482: 	movq	0x60(%rsp), %rax
    00000487: 	movq	%rax, 0x8(%rsp)
    0000048c: 	jmp	.Ltmp4284 # Offset: 1164
    00000491: 	nopl	(%rax) # Size: 7
.Ltmp4262:
    00000498: 	movl	$0xc70f6907, %edx
    0000049d: 	leaq	0x58(%rsp), %rdi
    000004a2: 	movl	$0x8, %esi
    000004a7: 	movq	%r8, 0x20(%rsp)
    000004ac: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1196
    000004b1: 	xorl	%edx, %edx
    000004b3: 	movq	0x20(%rsp), %r8
    000004b8: 	divq	%rbp
    000004bb: 	movq	%rdx, %rbx
    000004be: 	leaq	(,%rdx,8), %rax
    000004c6: 	jmp	.Ltmp4285 # Offset: 1222
.Ltmp4279:
    000004cb: 	movq	0x78(%rsp), %rax
    000004d0: 	subq	%fs:0x28, %rax
    000004d9: 	jne	.Ltmp4280 # Offset: 1241
    000004db: 	addq	$0x88, %rsp
    000004e2: 	popq	%rbx
    000004e3: 	popq	%rbp
    000004e4: 	popq	%r12
    000004e6: 	popq	%r13
    000004e8: 	popq	%r14
    000004ea: 	popq	%r15
    000004ec: 	retq # Offset: 1260
.Ltmp4255:
    000004ed: 	movq	$0x3e8, 0x28(%rsp)
.Ltmp4256:
    000004f6: 	movq	$0x0, 0x70(%rsp)
    000004ff: 	pxor	%xmm0, %xmm0
    00000503: 	movaps	%xmm0, 0x60(%rsp)
    00000508: 	jmp	.Ltmp4286 # Offset: 1288
.Ltmp4278:
    0000050d: 	movq	-0x8(%rdx), %rax
    00000511: 	addq	$0x200, %rax
    00000517: 	jmp	.Ltmp4287 # Offset: 1303
.Ltmp4257:
    0000051c: 	pxor	%xmm4, %xmm4
    00000520: 	movsd	%xmm4, 0x30(%rsp)
    00000526: 	jmp	.Ltmp4288 # Offset: 1318
.Ltmp4280:
    0000052b: 	callq	__stack_chk_fail@PLT # Offset: 1323
.Ltmp4282:
    00000530: 	movq	%r14, 0x10(%r12)
    00000535: 	jmp	.Ltmp4289 # Offset: 1333
    0000053a: 	endbr64
    0000053e: 	movq	%rax, %rbp
    00000541: 	movq	0x60(%rsp), %rdi
    00000546: 	movq	0x70(%rsp), %rsi
    0000054b: 	subq	%rdi, %rsi
    0000054e: 	testq	%rdi, %rdi
    00000551: 	je	.Ltmp4290 # Offset: 1361
    00000553: 	callq	_ZdlPvm@PLT # Offset: 1363
.Ltmp4290:
    00000558: 	movq	%rbp, %rdi
    0000055b: 	callq	_Unwind_Resume@PLT # Offset: 1371
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_eraseall_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_clearall_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 263
  State       : disassembled
  Address     : 0x2ba00
  Size        : 0x3be
  MaxSize     : 0x3c0
  Offset      : 0x2ba00
  Section     : .text
  Orc Section : .local.text._Z17test_clearall_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0262:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp4291 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp4292 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp4309:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp4293 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4305:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4296:
    00000100: 	movl	$0x38, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbp
    0000010d: 	leaq	0x30(%rax), %rax
    00000111: 	movq	%rax, (%rbp)
    00000115: 	movq	0x8(%rsp), %rax
    0000011a: 	movq	$0x1, 0x8(%rbp)
    00000122: 	movq	$0x0, 0x10(%rbp)
    0000012a: 	movq	%rax, %rbx
    0000012d: 	movq	$0x0, 0x18(%rbp)
    00000135: 	movl	$0x3f800000, 0x20(%rbp)
    0000013c: 	movq	$0x0, 0x28(%rbp)
    00000144: 	movq	$0x0, 0x30(%rbp)
    0000014c: 	cmpq	%rax, %r12
    0000014f: 	je	.Ltmp4294 # Offset: 335
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp4295:
    00000158: 	movq	%rbx, %rsi
    0000015b: 	movq	%rbp, %rdi
    0000015e: 	callq	_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ # Offset: 350
    00000163: 	movsd	(%rbx), %xmm0
    00000167: 	addq	$0x8, %rbx
    0000016b: 	movsd	%xmm0, (%rax)
    0000016f: 	cmpq	%rbx, %r12
    00000172: 	jne	.Ltmp4295 # Offset: 370
.Ltmp4294:
    00000174: 	movq	%rbp, (%r14)
    00000177: 	addq	$0x8, %r14
    0000017b: 	cmpq	%r15, %r14
    0000017e: 	jne	.Ltmp4296 # Offset: 382
    00000180: 	callq	clock@PLT # Offset: 384
    00000185: 	movq	0x20(%rsp), %rbp
    0000018a: 	movq	%rax, start_time(%rip)
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp4299:
    00000198: 	movq	(%rbp), %rbx
    0000019c: 	movq	0x10(%rbx), %r14
    000001a0: 	testq	%r14, %r14
    000001a3: 	je	.Ltmp4297 # Offset: 419
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp4298:
    000001a8: 	movq	%r14, %rdi
    000001ab: 	movq	(%r14), %r14
    000001ae: 	movl	$0x18, %esi
    000001b3: 	callq	_ZdlPvm@PLT # Offset: 435
    000001b8: 	testq	%r14, %r14
    000001bb: 	jne	.Ltmp4298 # Offset: 443
.Ltmp4297:
    000001bd: 	movq	0x8(%rbx), %rax
    000001c1: 	movq	(%rbx), %rdi
    000001c4: 	xorl	%esi, %esi
    000001c6: 	addq	$0x8, %rbp
    000001ca: 	leaq	(,%rax,8), %rdx
    000001d2: 	callq	memset@PLT # Offset: 466
    000001d7: 	movq	$0x0, 0x18(%rbx)
    000001df: 	movq	$0x0, 0x10(%rbx)
    000001e7: 	cmpq	%rbp, %r15
    000001ea: 	jne	.Ltmp4299 # Offset: 490
    000001ec: 	callq	clock@PLT # Offset: 492
    000001f1: 	pxor	%xmm0, %xmm0
    000001f5: 	movq	%rax, end_time(%rip)
    000001fc: 	subq	start_time(%rip), %rax
    00000203: 	cvtsi2sd	%rax, %xmm0
    00000208: 	divsd	DATAat0x53788(%rip), %xmm0
    00000210: 	addsd	0x18(%rsp), %xmm0
    00000216: 	movsd	%xmm0, 0x18(%rsp)
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp4304:
    00000220: 	movq	(%r13), %rbp
    00000224: 	testq	%rbp, %rbp
    00000227: 	je	.Ltmp4300 # Offset: 551
    00000229: 	movq	0x10(%rbp), %rbx
    0000022d: 	testq	%rbx, %rbx
    00000230: 	je	.Ltmp4301 # Offset: 560
    00000232: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4302:
    00000238: 	movq	%rbx, %rdi
    0000023b: 	movq	(%rbx), %rbx
    0000023e: 	movl	$0x18, %esi
    00000243: 	callq	_ZdlPvm@PLT # Offset: 579
    00000248: 	testq	%rbx, %rbx
    0000024b: 	jne	.Ltmp4302 # Offset: 587
.Ltmp4301:
    0000024d: 	movq	0x8(%rbp), %rax
    00000251: 	movq	(%rbp), %rdi
    00000255: 	xorl	%esi, %esi
    00000257: 	leaq	(,%rax,8), %rdx
    0000025f: 	callq	memset@PLT # Offset: 607
    00000264: 	movq	(%rbp), %rdi
    00000268: 	leaq	0x30(%rbp), %rax
    0000026c: 	movq	$0x0, 0x18(%rbp)
    00000274: 	movq	$0x0, 0x10(%rbp)
    0000027c: 	movq	0x8(%rbp), %rsi
    00000280: 	cmpq	%rax, %rdi
    00000283: 	je	.Ltmp4303 # Offset: 643
    00000285: 	shlq	$0x3, %rsi
    00000289: 	callq	_ZdlPvm@PLT # Offset: 649
.Ltmp4303:
    0000028e: 	movl	$0x38, %esi
    00000293: 	movq	%rbp, %rdi
    00000296: 	callq	_ZdlPvm@PLT # Offset: 662
.Ltmp4300:
    0000029b: 	movq	$0x0, (%r13)
    000002a3: 	addq	$0x8, %r13
    000002a7: 	cmpq	%r13, %r15
    000002aa: 	jne	.Ltmp4304 # Offset: 682
    000002b0: 	movl	0x10(%rsp), %ecx
    000002b4: 	movl	iterations(%rip), %eax
    000002ba: 	addl	%ecx, 0x28(%rsp)
    000002be: 	movl	0x28(%rsp), %ecx
    000002c2: 	cmpl	%ecx, %eax
    000002c4: 	jg	.Ltmp4305 # Offset: 708
.Ltmp4311:
    000002ca: 	movq	0x38(%rsp), %rdi
    000002cf: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 719
    000002d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002db: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e9: 	je	.Ltmp4306 # Offset: 745
.Ltmp4310:
    000002ef: 	movq	-0x20(%rax), %rdi
    000002f3: 	movsd	0x18(%rsp), %xmm0
    000002f9: 	callq	_Z13record_resultdPKc # Offset: 761
    000002fe: 	cmpq	$0x0, 0x20(%rsp)
    00000304: 	je	.Ltmp4307 # Offset: 772
    00000306: 	movq	0x58(%rsp), %rax
    0000030b: 	subq	%fs:0x28, %rax
    00000314: 	jne	.Ltmp4308 # Offset: 788
    00000316: 	movq	0x50(%rsp), %rsi
    0000031b: 	movq	0x20(%rsp), %rdi
    00000320: 	addq	$0x68, %rsp
    00000324: 	popq	%rbx
    00000325: 	popq	%rbp
    00000326: 	subq	%rdi, %rsi
    00000329: 	popq	%r12
    0000032b: 	popq	%r13
    0000032d: 	popq	%r14
    0000032f: 	popq	%r15
    00000331: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 817
.Ltmp4307:
    00000336: 	movq	0x58(%rsp), %rax
    0000033b: 	subq	%fs:0x28, %rax
    00000344: 	jne	.Ltmp4308 # Offset: 836
    00000346: 	addq	$0x68, %rsp
    0000034a: 	popq	%rbx
    0000034b: 	popq	%rbp
    0000034c: 	popq	%r12
    0000034e: 	popq	%r13
    00000350: 	popq	%r14
    00000352: 	popq	%r15
    00000354: 	retq # Offset: 852
.Ltmp4291:
    00000355: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp4292:
    0000035e: 	movq	$0x0, 0x50(%rsp)
    00000367: 	pxor	%xmm0, %xmm0
    0000036b: 	movaps	%xmm0, 0x40(%rsp)
    00000370: 	jmp	.Ltmp4309 # Offset: 880
.Ltmp4306:
    00000375: 	movq	-0x8(%rdx), %rax
    00000379: 	addq	$0x200, %rax
    0000037f: 	jmp	.Ltmp4310 # Offset: 895
.Ltmp4293:
    00000384: 	pxor	%xmm3, %xmm3
    00000388: 	movsd	%xmm3, 0x18(%rsp)
    0000038e: 	jmp	.Ltmp4311 # Offset: 910
.Ltmp4308:
    00000393: 	callq	__stack_chk_fail@PLT # Offset: 915
    00000398: 	endbr64
    0000039c: 	movq	%rax, %rbp
    0000039f: 	movq	0x40(%rsp), %rdi
    000003a4: 	movq	0x50(%rsp), %rsi
    000003a9: 	subq	%rdi, %rsi
    000003ac: 	testq	%rdi, %rdi
    000003af: 	je	.Ltmp4312 # Offset: 943
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp4312:
    000003b6: 	movq	%rbp, %rdi
    000003b9: 	callq	_Unwind_Resume@PLT # Offset: 953
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_clearall_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_erase_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 264
  State       : disassembled
  Address     : 0x2bdc0
  Size        : 0x6d8
  MaxSize     : 0x6e0
  Offset      : 0x2bdc0
  Section     : .text
  Orc Section : .local.text._Z14test_erase_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0263:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0xb8, %rsp
    00000018: 	movq	%rdx, 0x30(%rsp)
    0000001d: 	xorl	%edx, %edx
    0000001f: 	movq	%rcx, 0x68(%rsp)
    00000024: 	movq	%rsi, %rcx
    00000027: 	movq	%rdi, 0x28(%rsp)
    0000002c: 	subq	%rdi, %rcx
    0000002f: 	movq	%r8, 0x78(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0xa8(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	movabsq	$0x500000000, %rax
    00000051: 	divq	%rcx
    00000054: 	movq	%rax, 0x38(%rsp)
    00000059: 	cmpq	$0x3e8, %rax
    0000005f: 	ja	.Ltmp4313 # Offset: 95
    00000065: 	cmpq	$0x3, %rax
    00000069: 	ja	.Ltmp4314 # Offset: 105
    0000006f: 	movq	$0x0, 0xa0(%rsp)
    0000007b: 	pxor	%xmm0, %xmm0
    0000007f: 	movq	$0x4, 0x38(%rsp)
    00000088: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp4356:
    00000090: 	movq	0x38(%rsp), %rbx
    00000095: 	leaq	0x90(%rsp), %rdi
    0000009d: 	movq	%rbx, %rsi
    000000a0: 	callq	_ZNSt6vectorIPSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 160
    000000a5: 	movq	0x90(%rsp), %rcx
    000000ad: 	movl	iterations(%rip), %eax
    000000b3: 	movq	%rcx, 0x48(%rsp)
    000000b8: 	testl	%eax, %eax
    000000ba: 	jle	.Ltmp4315 # Offset: 186
    000000c0: 	addq	$0x8, %rcx
    000000c4: 	movl	%ebx, 0x64(%rsp)
    000000c8: 	movl	$0xc70f6907, %r14d
    000000ce: 	movq	$0x0, 0x40(%rsp)
    000000d7: 	movl	$0x0, 0x60(%rsp)
    000000df: 	movq	%rcx, 0x70(%rsp)
.Ltmp4346:
    000000e4: 	movslq	0x60(%rsp), %rdx
    000000e9: 	movslq	%eax, %rcx
    000000ec: 	movq	0x48(%rsp), %r15
    000000f1: 	movq	%rdx, %rsi
    000000f4: 	addq	0x38(%rsp), %rdx
    000000f9: 	movq	%r15, 0x50(%rsp)
    000000fe: 	subl	%esi, %eax
    00000100: 	cmpq	%rcx, %rdx
    00000103: 	cmovbl	0x64(%rsp), %eax
    00000108: 	movq	0x70(%rsp), %rcx
    0000010d: 	subl	$0x1, %eax
    00000110: 	leaq	(%rcx,%rax,8), %rax
    00000114: 	movq	%rax, 0x18(%rsp)
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp4318:
    00000120: 	movl	$0x38, %edi
    00000125: 	callq	_Znwm@PLT # Offset: 293
    0000012a: 	movq	%rax, %rbp
    0000012d: 	leaq	0x30(%rax), %rax
    00000131: 	movq	%rax, (%rbp)
    00000135: 	movq	0x28(%rsp), %rax
    0000013a: 	movq	$0x1, 0x8(%rbp)
    00000142: 	movq	$0x0, 0x10(%rbp)
    0000014a: 	movq	%rax, %rbx
    0000014d: 	movq	$0x0, 0x18(%rbp)
    00000155: 	movl	$0x3f800000, 0x20(%rbp)
    0000015c: 	movq	$0x0, 0x28(%rbp)
    00000164: 	movq	$0x0, 0x30(%rbp)
    0000016c: 	cmpq	%rax, %r12
    0000016f: 	je	.Ltmp4316 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp4317:
    00000178: 	movq	%rbx, %rsi
    0000017b: 	movq	%rbp, %rdi
    0000017e: 	callq	_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ # Offset: 382
    00000183: 	movsd	(%rbx), %xmm0
    00000187: 	addq	$0x8, %rbx
    0000018b: 	movsd	%xmm0, (%rax)
    0000018f: 	cmpq	%rbx, %r12
    00000192: 	jne	.Ltmp4317 # Offset: 402
.Ltmp4316:
    00000194: 	movq	%rbp, (%r15)
    00000197: 	addq	$0x8, %r15
    0000019b: 	cmpq	%r15, 0x18(%rsp)
    000001a0: 	jne	.Ltmp4318 # Offset: 416
    000001a6: 	callq	clock@PLT # Offset: 422
    000001ab: 	movq	0x68(%rsp), %r13
    000001b0: 	movq	%rax, start_time(%rip)
    000001b7: 	cmpq	%r13, 0x30(%rsp)
    000001bc: 	je	.Ltmp4319 # Offset: 444
    000001c2: 	movq	0x48(%rsp), %rax
    000001c7: 	movq	%r12, 0x58(%rsp)
    000001cc: 	movq	%rax, 0x10(%rsp)
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp4340:
    000001d8: 	movq	0x10(%rsp), %rax
    000001dd: 	movq	0x30(%rsp), %r12
    000001e2: 	movq	(%rax), %rbx
    000001e5: 	jmp	.Ltmp4320 # Offset: 485
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4328:
    000001f0: 	movq	(%rbp), %rsi
    000001f4: 	testq	%rsi, %rsi
    000001f7: 	je	.Ltmp4321 # Offset: 503
    000001fd: 	movsd	0x8(%rsi), %xmm0
    00000202: 	pxor	%xmm4, %xmm4
    00000206: 	movq	0x8(%rbx), %r15
    0000020a: 	movsd	%xmm0, 0x88(%rsp)
    00000213: 	ucomisd	%xmm4, %xmm0
    00000217: 	jp	.Ltmp4322 # Offset: 535
    0000021d: 	jne	.Ltmp4322 # Offset: 541
    00000223: 	testq	%rcx, %rcx
    00000226: 	jne	.Ltmp4323 # Offset: 550
.Ltmp4351:
    0000022c: 	movq	%rbp, %r15
    0000022f: 	movq	%r8, %rbp
    00000232: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4334:
    00000238: 	movq	%rsi, (%rbp)
    0000023c: 	movq	%r15, %rdi
    0000023f: 	movl	$0x18, %esi
    00000244: 	callq	_ZdlPvm@PLT # Offset: 580
    00000249: 	subq	$0x1, 0x18(%rbx)
.Ltmp4326:
    0000024e: 	cmpq	%r12, %r13
    00000251: 	je	.Ltmp4324 # Offset: 593
.Ltmp4320:
    00000257: 	movsd	(%r12), %xmm0
    0000025d: 	pxor	%xmm1, %xmm1
    00000261: 	addq	$0x8, %r12
    00000265: 	movsd	%xmm0, 0x88(%rsp)
    0000026e: 	ucomisd	%xmm1, %xmm0
    00000272: 	jp	.Ltmp4325 # Offset: 626
    00000278: 	movl	$0x0, %eax
    0000027d: 	jne	.Ltmp4325 # Offset: 637
.Ltmp4337:
    00000283: 	xorl	%edx, %edx
    00000285: 	divq	0x8(%rbx)
    00000289: 	leaq	(,%rdx,8), %r9
    00000291: 	movq	%rdx, %rcx
    00000294: 	movq	(%rbx), %rdx
    00000297: 	leaq	(%rdx,%r9), %rax
    0000029b: 	movq	(%rax), %r8
    0000029e: 	testq	%r8, %r8
    000002a1: 	je	.Ltmp4326 # Offset: 673
    000002a3: 	movq	(%r8), %rbp
    000002a6: 	movsd	-0x8(%r12), %xmm0
    000002ad: 	ucomisd	0x8(%rbp), %xmm0
    000002b2: 	jp	.Ltmp4327 # Offset: 690
    000002b4: 	je	.Ltmp4328 # Offset: 692
.Ltmp4327:
    000002ba: 	movq	(%rbp), %rax
    000002be: 	testq	%rax, %rax
    000002c1: 	je	.Ltmp4326 # Offset: 705
.Ltmp4332:
    000002c3: 	movsd	0x8(%rax), %xmm0
    000002c8: 	pxor	%xmm2, %xmm2
    000002cc: 	movq	0x8(%rbx), %r15
    000002d0: 	movsd	%xmm0, 0x88(%rsp)
    000002d9: 	ucomisd	%xmm2, %xmm0
    000002dd: 	jp	.Ltmp4329 # Offset: 733
    000002e3: 	movl	$0x0, %edx
    000002e8: 	jne	.Ltmp4329 # Offset: 744
.Ltmp4338:
    000002ee: 	cmpq	%rdx, %rcx
    000002f1: 	jne	.Ltmp4326 # Offset: 753
    000002f7: 	movq	(%rbp), %r15
    000002fb: 	movsd	-0x8(%r12), %xmm0
    00000302: 	ucomisd	0x8(%r15), %xmm0
    00000308: 	jp	.Ltmp4330 # Offset: 776
    0000030a: 	je	.Ltmp4331 # Offset: 778
.Ltmp4330:
    0000030c: 	movq	%r15, %rbp
    0000030f: 	movq	(%rbp), %rax
    00000313: 	testq	%rax, %rax
    00000316: 	jne	.Ltmp4332 # Offset: 790
    00000318: 	jmp	.Ltmp4326 # Offset: 792
    0000031d: 	nopl	(%rax) # Size: 3
.Ltmp4331:
    00000320: 	movq	(%rbx), %rdx
    00000323: 	movq	(%r15), %rsi
    00000326: 	leaq	(%rdx,%r9), %rax
    0000032a: 	cmpq	%rbp, (%rax)
    0000032d: 	je	.Ltmp4333 # Offset: 813
    00000333: 	testq	%rsi, %rsi
    00000336: 	je	.Ltmp4334 # Offset: 822
    0000033c: 	movsd	0x8(%rsi), %xmm0
    00000341: 	pxor	%xmm3, %xmm3
    00000345: 	movq	0x8(%rbx), %r8
    00000349: 	movsd	%xmm0, 0x88(%rsp)
    00000352: 	ucomisd	%xmm3, %xmm0
    00000356: 	jp	.Ltmp4335 # Offset: 854
    00000358: 	movl	$0x0, %edx
    0000035d: 	jne	.Ltmp4335 # Offset: 861
.Ltmp4339:
    0000035f: 	cmpq	%rdx, %rcx
    00000362: 	je	.Ltmp4336 # Offset: 866
    00000364: 	movq	(%rbx), %rax
    00000367: 	movq	%rbp, (%rax,%rdx,8)
.Ltmp4336:
    0000036b: 	movq	(%r15), %rsi
    0000036e: 	jmp	.Ltmp4334 # Offset: 878
    00000373: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4325:
    00000378: 	leaq	0x88(%rsp), %rdi
    00000380: 	movq	%r14, %rdx
    00000383: 	movl	$0x8, %esi
    00000388: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 904
    0000038d: 	jmp	.Ltmp4337 # Offset: 909
    00000392: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4329:
    00000398: 	movq	%r14, %rdx
    0000039b: 	movl	$0x8, %esi
    000003a0: 	movq	%rcx, 0x8(%rsp)
    000003a5: 	leaq	0x88(%rsp), %rdi
    000003ad: 	movq	%r9, (%rsp)
    000003b1: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 945
    000003b6: 	xorl	%edx, %edx
    000003b8: 	movq	0x8(%rsp), %rcx
    000003bd: 	movq	(%rsp), %r9
    000003c1: 	divq	%r15
    000003c4: 	jmp	.Ltmp4338 # Offset: 964
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp4335:
    000003d0: 	movq	%r14, %rdx
    000003d3: 	movl	$0x8, %esi
    000003d8: 	movq	%rcx, 0x8(%rsp)
    000003dd: 	leaq	0x88(%rsp), %rdi
    000003e5: 	movq	%r8, (%rsp)
    000003e9: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1001
    000003ee: 	movq	(%rsp), %r8
    000003f2: 	xorl	%edx, %edx
    000003f4: 	movq	0x8(%rsp), %rcx
    000003f9: 	divq	%r8
    000003fc: 	jmp	.Ltmp4339 # Offset: 1020
    00000401: 	nopl	(%rax) # Size: 7
.Ltmp4324:
    00000408: 	addq	$0x8, 0x10(%rsp)
    0000040e: 	movq	0x10(%rsp), %rax
    00000413: 	cmpq	%rax, 0x18(%rsp)
    00000418: 	jne	.Ltmp4340 # Offset: 1048
    0000041e: 	movq	0x58(%rsp), %r12
.Ltmp4319:
    00000423: 	callq	clock@PLT # Offset: 1059
    00000428: 	pxor	%xmm0, %xmm0
    0000042c: 	movq	0x18(%rsp), %r15
    00000431: 	movq	0x50(%rsp), %r13
    00000436: 	movq	%rax, end_time(%rip)
    0000043d: 	subq	start_time(%rip), %rax
    00000444: 	cvtsi2sd	%rax, %xmm0
    00000449: 	divsd	DATAat0x53788(%rip), %xmm0
    00000451: 	addsd	0x40(%rsp), %xmm0
    00000457: 	movsd	%xmm0, 0x40(%rsp)
    0000045d: 	nopl	(%rax) # Size: 3
.Ltmp4345:
    00000460: 	movq	(%r13), %rbp
    00000464: 	testq	%rbp, %rbp
    00000467: 	je	.Ltmp4341 # Offset: 1127
    00000469: 	movq	0x10(%rbp), %rbx
    0000046d: 	testq	%rbx, %rbx
    00000470: 	je	.Ltmp4342 # Offset: 1136
    00000472: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4343:
    00000478: 	movq	%rbx, %rdi
    0000047b: 	movq	(%rbx), %rbx
    0000047e: 	movl	$0x18, %esi
    00000483: 	callq	_ZdlPvm@PLT # Offset: 1155
    00000488: 	testq	%rbx, %rbx
    0000048b: 	jne	.Ltmp4343 # Offset: 1163
.Ltmp4342:
    0000048d: 	movq	0x8(%rbp), %rax
    00000491: 	movq	(%rbp), %rdi
    00000495: 	xorl	%esi, %esi
    00000497: 	leaq	(,%rax,8), %rdx
    0000049f: 	callq	memset@PLT # Offset: 1183
    000004a4: 	movq	(%rbp), %rdi
    000004a8: 	leaq	0x30(%rbp), %rax
    000004ac: 	movq	$0x0, 0x18(%rbp)
    000004b4: 	movq	$0x0, 0x10(%rbp)
    000004bc: 	movq	0x8(%rbp), %rsi
    000004c0: 	cmpq	%rax, %rdi
    000004c3: 	je	.Ltmp4344 # Offset: 1219
    000004c5: 	shlq	$0x3, %rsi
    000004c9: 	callq	_ZdlPvm@PLT # Offset: 1225
.Ltmp4344:
    000004ce: 	movl	$0x38, %esi
    000004d3: 	movq	%rbp, %rdi
    000004d6: 	callq	_ZdlPvm@PLT # Offset: 1238
.Ltmp4341:
    000004db: 	movq	$0x0, (%r13)
    000004e3: 	addq	$0x8, %r13
    000004e7: 	cmpq	%r13, %r15
    000004ea: 	jne	.Ltmp4345 # Offset: 1258
    000004f0: 	movl	0x38(%rsp), %ecx
    000004f4: 	movl	iterations(%rip), %eax
    000004fa: 	addl	%ecx, 0x60(%rsp)
    000004fe: 	movl	0x60(%rsp), %ecx
    00000502: 	cmpl	%ecx, %eax
    00000504: 	jg	.Ltmp4346 # Offset: 1284
.Ltmp4358:
    0000050a: 	movq	0x78(%rsp), %rdi
    0000050f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1295
    00000514: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000051b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000522: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000529: 	je	.Ltmp4347 # Offset: 1321
.Ltmp4357:
    0000052f: 	movq	-0x20(%rax), %rdi
    00000533: 	movsd	0x40(%rsp), %xmm0
    00000539: 	callq	_Z13record_resultdPKc # Offset: 1337
    0000053e: 	cmpq	$0x0, 0x48(%rsp)
    00000544: 	je	.Ltmp4348 # Offset: 1348
    0000054a: 	movq	0xa8(%rsp), %rax
    00000552: 	subq	%fs:0x28, %rax
    0000055b: 	jne	.Ltmp4349 # Offset: 1371
    00000561: 	movq	0xa0(%rsp), %rsi
    00000569: 	movq	0x48(%rsp), %rdi
    0000056e: 	addq	$0xb8, %rsp
    00000575: 	popq	%rbx
    00000576: 	popq	%rbp
    00000577: 	subq	%rdi, %rsi
    0000057a: 	popq	%r12
    0000057c: 	popq	%r13
    0000057e: 	popq	%r14
    00000580: 	popq	%r15
    00000582: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1410
    00000587: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4322:
    00000590: 	leaq	0x88(%rsp), %rdi
    00000598: 	movq	%r14, %rdx
    0000059b: 	movl	$0x8, %esi
    000005a0: 	movq	%r9, 0x8(%rsp)
    000005a5: 	movq	%r8, (%rsp)
    000005a9: 	movq	%rcx, 0x20(%rsp)
    000005ae: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1454
    000005b3: 	xorl	%edx, %edx
    000005b5: 	movq	(%rbp), %rsi
    000005b9: 	movq	(%rsp), %r8
    000005bd: 	divq	%r15
    000005c0: 	movq	0x8(%rsp), %r9
    000005c5: 	testq	%rsi, %rsi
    000005c8: 	movq	%rdx, %rdi
    000005cb: 	je	.Ltmp4350 # Offset: 1483
    000005cd: 	movq	0x20(%rsp), %rcx
    000005d2: 	cmpq	%rdx, %rcx
    000005d5: 	je	.Ltmp4351 # Offset: 1493
.Ltmp4350:
    000005db: 	movq	(%rbx), %rdx
    000005de: 	leaq	(%rdx,%r9), %rax
    000005e2: 	movq	(%rax), %rcx
    000005e5: 	testq	%rsi, %rsi
    000005e8: 	je	.Ltmp4352 # Offset: 1512
.Ltmp4355:
    000005ea: 	movq	%rcx, (%rdx,%rdi,8)
    000005ee: 	movq	(%rax), %rcx
.Ltmp4352:
    000005f1: 	leaq	0x10(%rbx), %rdx
    000005f5: 	cmpq	%rdx, %rcx
    000005f8: 	je	.Ltmp4353 # Offset: 1528
.Ltmp4354:
    000005fa: 	movq	$0x0, (%rax)
    00000601: 	movq	%rbp, %r15
    00000604: 	movq	(%rbp), %rsi
    00000608: 	movq	%r8, %rbp
    0000060b: 	jmp	.Ltmp4334 # Offset: 1547
.Ltmp4321:
    00000610: 	movq	%r8, %rcx
    00000613: 	leaq	0x10(%rbx), %rdx
    00000617: 	cmpq	%rdx, %rcx
    0000061a: 	jne	.Ltmp4354 # Offset: 1562
.Ltmp4353:
    0000061c: 	movq	%rsi, 0x10(%rbx)
    00000620: 	jmp	.Ltmp4354 # Offset: 1568
    00000622: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4323:
    00000628: 	leaq	(%rdx,%r9), %rax
    0000062c: 	xorl	%edi, %edi
    0000062e: 	movq	(%rax), %rcx
    00000631: 	jmp	.Ltmp4355 # Offset: 1585
.Ltmp4348:
    00000633: 	movq	0xa8(%rsp), %rax
    0000063b: 	subq	%fs:0x28, %rax
    00000644: 	jne	.Ltmp4349 # Offset: 1604
    00000646: 	addq	$0xb8, %rsp
    0000064d: 	popq	%rbx
    0000064e: 	popq	%rbp
    0000064f: 	popq	%r12
    00000651: 	popq	%r13
    00000653: 	popq	%r14
    00000655: 	popq	%r15
    00000657: 	retq # Offset: 1623
.Ltmp4313:
    00000658: 	movq	$0x3e8, 0x38(%rsp)
.Ltmp4314:
    00000661: 	movq	$0x0, 0xa0(%rsp)
    0000066d: 	pxor	%xmm0, %xmm0
    00000671: 	movaps	%xmm0, 0x90(%rsp)
    00000679: 	jmp	.Ltmp4356 # Offset: 1657
.Ltmp4347:
    0000067e: 	movq	-0x8(%rdx), %rax
    00000682: 	addq	$0x200, %rax
    00000688: 	jmp	.Ltmp4357 # Offset: 1672
.Ltmp4315:
    0000068d: 	pxor	%xmm6, %xmm6
    00000691: 	movsd	%xmm6, 0x40(%rsp)
    00000697: 	jmp	.Ltmp4358 # Offset: 1687
.Ltmp4333:
    0000069c: 	movq	%rbp, %r8
    0000069f: 	movq	%r15, %rbp
    000006a2: 	jmp	.Ltmp4328 # Offset: 1698
.Ltmp4349:
    000006a7: 	callq	__stack_chk_fail@PLT # Offset: 1703
    000006ac: 	endbr64
    000006b0: 	movq	%rax, %rbp
    000006b3: 	movq	0x90(%rsp), %rdi
    000006bb: 	movq	0xa0(%rsp), %rsi
    000006c3: 	subq	%rdi, %rsi
    000006c6: 	testq	%rdi, %rdi
    000006c9: 	je	.Ltmp4359 # Offset: 1737
    000006cb: 	callq	_ZdlPvm@PLT # Offset: 1739
.Ltmp4359:
    000006d0: 	movq	%rbp, %rdi
    000006d3: 	callq	_Unwind_Resume@PLT # Offset: 1747
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_erase_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_assignIRKSC_NS1_17_ReuseOrAllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEEvOT_RKT0_" after disassembly {
  Number      : 265
  State       : disassembled
  Address     : 0x2c4a0
  Size        : 0x2fd
  MaxSize     : 0x300
  Offset      : 0x2c4a0
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_assignIRKSC_NS1_17_ReuseOrAllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEEvOT_RKT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0264:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rsi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cmpq	$0x0, (%rdi)
    0000002f: 	movq	$0x0, 0x8(%rsp)
    00000038: 	je	.Ltmp4360 # Offset: 56
.Ltmp4375:
    0000003e: 	movq	0x10(%rbx), %rbx
    00000042: 	testq	%rbx, %rbx
    00000045: 	je	.Ltmp4361 # Offset: 69
    0000004b: 	movq	(%r13), %r12
    0000004f: 	testq	%r12, %r12
    00000052: 	je	.Ltmp4362 # Offset: 82
    00000058: 	movq	(%r12), %rax
    0000005c: 	movsd	0x8(%rbx), %xmm0
    00000061: 	movq	%rax, (%r13)
    00000065: 	movq	$0x0, (%r12)
    0000006d: 	movsd	%xmm0, 0x8(%r12)
.Ltmp4376:
    00000074: 	pxor	%xmm2, %xmm2
    00000078: 	movq	(%rbp), %r14
    0000007c: 	movq	0x8(%rbp), %rcx
    00000080: 	movq	%r12, 0x10(%rbp)
    00000084: 	ucomisd	%xmm2, %xmm0
    00000088: 	movsd	%xmm0, 0x10(%rsp)
    0000008e: 	jp	.Ltmp4363 # Offset: 142
    00000094: 	jne	.Ltmp4363 # Offset: 148
.Ltmp4377:
    0000009a: 	leaq	0x10(%rbp), %rax
    0000009e: 	movq	%rax, (%r14)
    000000a1: 	movq	(%rbx), %rbx
    000000a4: 	testq	%rbx, %rbx
    000000a7: 	je	.Ltmp4361 # Offset: 167
    000000ad: 	movl	$0xc70f6907, %r14d
    000000b3: 	jmp	.Ltmp4364 # Offset: 179
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp4368:
    000000b8: 	addq	(%rbp), %rdx
    000000bc: 	cmpq	$0x0, (%rdx)
    000000c0: 	je	.Ltmp4365 # Offset: 192
.Ltmp4369:
    000000c6: 	movq	(%rbx), %rbx
    000000c9: 	testq	%rbx, %rbx
    000000cc: 	je	.Ltmp4361 # Offset: 204
.Ltmp4370:
    000000d2: 	movq	%r15, %r12
.Ltmp4364:
    000000d5: 	movq	(%r13), %r15
    000000d9: 	testq	%r15, %r15
    000000dc: 	je	.Ltmp4366 # Offset: 220
    000000e2: 	movq	(%r15), %rax
    000000e5: 	movsd	0x8(%rbx), %xmm0
    000000ea: 	movq	%rax, (%r13)
    000000ee: 	movq	$0x0, (%r15)
    000000f5: 	movsd	%xmm0, 0x8(%r15)
.Ltmp4372:
    000000fb: 	pxor	%xmm1, %xmm1
    000000ff: 	movq	%r15, (%r12)
    00000103: 	movq	0x8(%rbp), %r8
    00000107: 	ucomisd	%xmm1, %xmm0
    0000010b: 	movsd	%xmm0, 0x10(%rsp)
    00000111: 	jp	.Ltmp4367 # Offset: 273
    00000113: 	movl	$0x0, %edx
    00000118: 	je	.Ltmp4368 # Offset: 280
.Ltmp4367:
    0000011a: 	movq	%r14, %rdx
    0000011d: 	leaq	0x10(%rsp), %rdi
    00000122: 	movl	$0x8, %esi
    00000127: 	movq	%r8, (%rsp)
    0000012b: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 299
    00000130: 	movq	(%rsp), %r8
    00000134: 	xorl	%edx, %edx
    00000136: 	divq	%r8
    00000139: 	shlq	$0x3, %rdx
    0000013d: 	addq	(%rbp), %rdx
    00000141: 	cmpq	$0x0, (%rdx)
    00000145: 	jne	.Ltmp4369 # Offset: 325
.Ltmp4365:
    0000014b: 	movq	%r12, (%rdx)
    0000014e: 	movq	(%rbx), %rbx
    00000151: 	testq	%rbx, %rbx
    00000154: 	jne	.Ltmp4370 # Offset: 340
.Ltmp4361:
    0000015a: 	movq	0x18(%rsp), %rax
    0000015f: 	subq	%fs:0x28, %rax
    00000168: 	jne	.Ltmp4371 # Offset: 360
    0000016e: 	addq	$0x28, %rsp
    00000172: 	popq	%rbx
    00000173: 	popq	%rbp
    00000174: 	popq	%r12
    00000176: 	popq	%r13
    00000178: 	popq	%r14
    0000017a: 	popq	%r15
    0000017c: 	retq # Offset: 380
    0000017d: 	nopl	(%rax) # Size: 3
.Ltmp4366:
    00000180: 	movl	$0x10, %edi
    00000185: 	callq	_Znwm@PLT # Offset: 389
    0000018a: 	movsd	0x8(%rbx), %xmm0
    0000018f: 	movq	$0x0, (%rax)
    00000196: 	movq	%rax, %r15
    00000199: 	movsd	%xmm0, 0x8(%rax)
    0000019e: 	jmp	.Ltmp4372 # Offset: 414
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4360:
    000001a8: 	movq	0x8(%rdi), %rdx
    000001ac: 	cmpq	$0x1, %rdx
    000001b0: 	je	.Ltmp4373 # Offset: 432
    000001b6: 	movq	%rdx, %rax
    000001b9: 	shrq	$0x3c, %rax
    000001bd: 	jne	.Ltmp4374 # Offset: 445
    000001c3: 	leaq	(,%rdx,8), %r12
    000001cb: 	movq	%r12, %rdi
    000001ce: 	callq	_Znwm@PLT # Offset: 462
    000001d3: 	movq	%r12, %rdx
    000001d6: 	xorl	%esi, %esi
    000001d8: 	movq	%rax, %rdi
    000001db: 	movq	%rax, 0x8(%rsp)
    000001e0: 	callq	memset@PLT # Offset: 480
.Ltmp4378:
    000001e5: 	movq	0x8(%rsp), %rax
    000001ea: 	movq	%rax, (%rbp)
    000001ee: 	jmp	.Ltmp4375 # Offset: 494
    000001f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4362:
    000001f8: 	movl	$0x10, %edi
    000001fd: 	callq	_Znwm@PLT # Offset: 509
    00000202: 	movsd	0x8(%rbx), %xmm0
    00000207: 	movq	$0x0, (%rax)
    0000020e: 	movq	%rax, %r12
    00000211: 	movsd	%xmm0, 0x8(%rax)
    00000216: 	jmp	.Ltmp4376 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4363:
    00000220: 	movl	$0xc70f6907, %edx
    00000225: 	leaq	0x10(%rsp), %rdi
    0000022a: 	movl	$0x8, %esi
    0000022f: 	movq	%rcx, (%rsp)
    00000233: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 563
    00000238: 	movq	(%rsp), %rcx
    0000023c: 	xorl	%edx, %edx
    0000023e: 	divq	%rcx
    00000241: 	leaq	(%r14,%rdx,8), %r14
    00000245: 	jmp	.Ltmp4377 # Offset: 581
.Ltmp4373:
    0000024a: 	leaq	0x30(%rdi), %rax
    0000024e: 	movq	$0x0, 0x30(%rdi)
    00000256: 	movq	%rax, 0x8(%rsp)
    0000025b: 	jmp	.Ltmp4378 # Offset: 603
.Ltmp4374:
    0000025d: 	shrq	$0x3d, %rdx
    00000261: 	je	.Ltmp4379 # Offset: 609
    00000263: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 611
.Ltmp4379:
    00000268: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 616
.Ltmp4371:
    0000026d: 	callq	__stack_chk_fail@PLT # Offset: 621
    00000272: 	endbr64
    00000276: 	movq	%rax, %rdi
    00000279: 	callq	__cxa_begin_catch@PLT # Offset: 633
    0000027e: 	movq	0x10(%rbp), %rdi
.Ltmp4381:
    00000282: 	testq	%rdi, %rdi
    00000285: 	je	.Ltmp4380 # Offset: 645
    00000287: 	movq	(%rdi), %rbx
    0000028a: 	movl	$0x10, %esi
    0000028f: 	callq	_ZdlPvm@PLT # Offset: 655
    00000294: 	movq	%rbx, %rdi
    00000297: 	jmp	.Ltmp4381 # Offset: 663
.Ltmp4380:
    00000299: 	movq	0x8(%rbp), %rax
    0000029d: 	movq	(%rbp), %rdi
    000002a1: 	xorl	%esi, %esi
    000002a3: 	leaq	(,%rax,8), %rdx
    000002ab: 	callq	memset@PLT # Offset: 683
    000002b0: 	cmpq	$0x0, 0x8(%rsp)
    000002b6: 	movq	$0x0, 0x18(%rbp)
    000002be: 	movq	$0x0, 0x10(%rbp)
    000002c6: 	je	.Ltmp4382 # Offset: 710
    000002c8: 	movq	(%rbp), %rdi
    000002cc: 	movq	0x8(%rbp), %rsi
    000002d0: 	addq	$0x30, %rbp
    000002d4: 	cmpq	%rbp, %rdi
    000002d7: 	jne	.Ltmp4383 # Offset: 727
.Ltmp4382:
    000002d9: 	callq	__cxa_rethrow@PLT # Offset: 729
.Ltmp4383:
    000002de: 	shlq	$0x3, %rsi
    000002e2: 	callq	_ZdlPvm@PLT # Offset: 738
    000002e7: 	jmp	.Ltmp4382 # Offset: 743
    000002e9: 	endbr64
    000002ed: 	movq	%rax, %rbp
    000002f0: 	callq	__cxa_end_catch@PLT # Offset: 752
    000002f5: 	movq	%rbp, %rdi
    000002f8: 	callq	_Unwind_Resume@PLT # Offset: 760
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_assignIRKSC_NS1_17_ReuseOrAllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEEvOT_RKT0_"

Binary Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE18_M_assign_elementsIRKSC_EEvOT_" after disassembly {
  Number      : 266
  State       : disassembled
  Address     : 0x2c7a0
  Size        : 0x1e2
  MaxSize     : 0x1f0
  Offset      : 0x2c7a0
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE18_M_assign_elementsIRKSC_EEvOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0265:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	0x8(%rdi), %rbp
    0000001c: 	movq	0x8(%rsi), %rdx
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x18(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movq	0x28(%rdi), %r14
    00000034: 	movq	(%rdi), %r13
    00000037: 	cmpq	%rbp, %rdx
    0000003a: 	je	.Ltmp4384 # Offset: 58
    00000040: 	cmpq	$0x1, %rdx
    00000044: 	je	.Ltmp4385 # Offset: 68
    0000004a: 	movq	%rdx, %rax
    0000004d: 	shrq	$0x3c, %rax
    00000051: 	jne	.Ltmp4386 # Offset: 81
    00000057: 	leaq	(,%rdx,8), %r12
    0000005f: 	movq	%r12, %rdi
    00000062: 	callq	_Znwm@PLT # Offset: 98
    00000067: 	movq	%r12, %rdx
    0000006a: 	xorl	%esi, %esi
    0000006c: 	movq	%rax, %rdi
    0000006f: 	callq	memset@PLT # Offset: 111
    00000074: 	movq	0x8(%r15), %rdx
    00000078: 	movq	%rax, %rcx
.Ltmp4392:
    0000007b: 	movq	%rcx, (%rbx)
    0000007e: 	movq	%rdx, 0x8(%rbx)
.Ltmp4391:
    00000082: 	movq	0x18(%r15), %rax
    00000086: 	movdqu	0x20(%r15), %xmm1
    0000008c: 	movq	%rsp, %rdx
    0000008f: 	movq	%r15, %rsi
    00000092: 	movq	0x10(%rbx), %xmm0
    00000097: 	movq	%rbx, %xmm2
    0000009c: 	movq	%rbx, %rdi
    0000009f: 	movq	$0x0, 0x10(%rbx)
    000000a7: 	movq	%rax, 0x18(%rbx)
    000000ab: 	punpcklqdq	%xmm2, %xmm0
    000000af: 	movups	%xmm1, 0x20(%rbx)
    000000b3: 	movaps	%xmm0, (%rsp)
    000000b7: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_assignIRKSC_NS1_17_ReuseOrAllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEEvOT_RKT0_ # Offset: 183
    000000bc: 	testq	%r13, %r13
    000000bf: 	je	.Ltmp4387 # Offset: 191
    000000c1: 	addq	$0x30, %rbx
    000000c5: 	cmpq	%rbx, %r13
    000000c8: 	je	.Ltmp4387 # Offset: 200
    000000ca: 	leaq	(,%rbp,8), %rsi
    000000d2: 	movq	%r13, %rdi
    000000d5: 	callq	_ZdlPvm@PLT # Offset: 213
.Ltmp4387:
    000000da: 	movq	(%rsp), %rbx
    000000de: 	testq	%rbx, %rbx
    000000e1: 	je	.Ltmp4388 # Offset: 225
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4389:
    000000e8: 	movq	%rbx, %rdi
    000000eb: 	movq	(%rbx), %rbx
    000000ee: 	movl	$0x10, %esi
    000000f3: 	callq	_ZdlPvm@PLT # Offset: 243
    000000f8: 	testq	%rbx, %rbx
    000000fb: 	jne	.Ltmp4389 # Offset: 251
.Ltmp4388:
    000000fd: 	movq	0x18(%rsp), %rax
    00000102: 	subq	%fs:0x28, %rax
    0000010b: 	jne	.Ltmp4390 # Offset: 267
    0000010d: 	addq	$0x28, %rsp
    00000111: 	popq	%rbx
    00000112: 	popq	%rbp
    00000113: 	popq	%r12
    00000115: 	popq	%r13
    00000117: 	popq	%r14
    00000119: 	popq	%r15
    0000011b: 	retq # Offset: 283
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp4384:
    00000120: 	movq	%r13, %rdi
    00000123: 	leaq	(,%rbp,8), %rdx
    0000012b: 	xorl	%esi, %esi
    0000012d: 	xorl	%r13d, %r13d
    00000130: 	callq	memset@PLT # Offset: 304
    00000135: 	jmp	.Ltmp4391 # Offset: 309
.Ltmp4385:
    0000013a: 	movq	$0x0, 0x30(%rdi)
    00000142: 	leaq	0x30(%rdi), %rcx
    00000146: 	jmp	.Ltmp4392 # Offset: 326
.Ltmp4386:
    0000014b: 	shrq	$0x3d, %rdx
    0000014f: 	je	.Ltmp4393 # Offset: 335
    00000151: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 337
.Ltmp4393:
    00000156: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 342
.Ltmp4390:
    0000015b: 	callq	__stack_chk_fail@PLT # Offset: 347
    00000160: 	endbr64
    00000164: 	movq	%rax, %r15
    00000167: 	movq	(%rsp), %rdi
.Ltmp4395:
    0000016b: 	testq	%rdi, %rdi
    0000016e: 	je	.Ltmp4394 # Offset: 366
    00000170: 	movq	(%rdi), %r12
    00000173: 	movl	$0x10, %esi
    00000178: 	callq	_ZdlPvm@PLT # Offset: 376
    0000017d: 	movq	%r12, %rdi
    00000180: 	jmp	.Ltmp4395 # Offset: 384
.Ltmp4394:
    00000182: 	movq	%r15, %rdi
    00000185: 	callq	__cxa_begin_catch@PLT # Offset: 389
    0000018a: 	testq	%r13, %r13
    0000018d: 	je	.Ltmp4396 # Offset: 397
    0000018f: 	movq	(%rbx), %rdi
    00000192: 	leaq	0x30(%rbx), %rax
    00000196: 	movq	0x8(%rbx), %rsi
    0000019a: 	cmpq	%rax, %rdi
    0000019d: 	je	.Ltmp4397 # Offset: 413
    0000019f: 	shlq	$0x3, %rsi
    000001a3: 	callq	_ZdlPvm@PLT # Offset: 419
.Ltmp4397:
    000001a8: 	movq	%r14, 0x28(%rbx)
    000001ac: 	movq	%r13, (%rbx)
    000001af: 	movq	%rbp, 0x8(%rbx)
.Ltmp4396:
    000001b3: 	movq	0x8(%rbx), %rax
    000001b7: 	movq	(%rbx), %rdi
    000001ba: 	xorl	%esi, %esi
    000001bc: 	leaq	(,%rax,8), %rdx
    000001c4: 	callq	memset@PLT # Offset: 452
    000001c9: 	callq	__cxa_rethrow@PLT # Offset: 457
    000001ce: 	endbr64
    000001d2: 	movq	%rax, %rbp
    000001d5: 	callq	__cxa_end_catch@PLT # Offset: 469
    000001da: 	movq	%rbp, %rdi
    000001dd: 	callq	_Unwind_Resume@PLT # Offset: 477
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE18_M_assign_elementsIRKSC_EEvOT_"

Binary Function "_Z19test_duplicate_coreISt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 267
  State       : disassembled
  Address     : 0x2c990
  Size        : 0x32b
  MaxSize     : 0x330
  Offset      : 0x2c990
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0266:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	(,%rsi,8), %rcx
    0000000e: 	pushq	%r14
    00000010: 	movq	%rdi, %r14
    00000013: 	pushq	%r13
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x28(%rsp)
    00000022: 	xorl	%edx, %edx
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x48(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	movabsq	$0x500000000, %rax
    0000003e: 	divq	%rcx
    00000041: 	movq	%rax, (%rsp)
    00000045: 	cmpq	$0x3e8, %rax
    0000004b: 	ja	.Ltmp4398 # Offset: 75
    00000051: 	cmpq	$0x3, %rax
    00000055: 	ja	.Ltmp4399 # Offset: 85
    0000005b: 	movq	$0x0, 0x40(%rsp)
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	movq	$0x4, (%rsp)
    00000070: 	movaps	%xmm0, 0x30(%rsp)
.Ltmp4412:
    00000075: 	movq	(%rsp), %rbx
    00000079: 	leaq	0x30(%rsp), %rdi
    0000007e: 	movq	%rbx, %rsi
    00000081: 	callq	_ZNSt6vectorIPSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 129
    00000086: 	movq	0x30(%rsp), %rcx
    0000008b: 	movl	iterations(%rip), %eax
    00000091: 	movq	%rcx, 0x10(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp4400 # Offset: 152
    0000009e: 	addq	$0x8, %rcx
    000000a2: 	movl	%ebx, 0x1c(%rsp)
    000000a6: 	pxor	%xmm2, %xmm2
    000000aa: 	xorl	%r15d, %r15d
    000000ad: 	movq	%rcx, 0x20(%rsp)
    000000b2: 	movsd	%xmm2, 0x8(%rsp)
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4408:
    000000c0: 	movslq	%eax, %rcx
    000000c3: 	movslq	%r15d, %rdx
    000000c6: 	addq	(%rsp), %rdx
    000000ca: 	subl	%r15d, %eax
    000000cd: 	cmpq	%rcx, %rdx
    000000d0: 	cmovbl	0x1c(%rsp), %eax
    000000d5: 	movl	%eax, %ebx
    000000d7: 	callq	clock@PLT # Offset: 215
    000000dc: 	movq	0x10(%rsp), %r12
    000000e1: 	movq	0x20(%rsp), %rcx
    000000e6: 	movq	%rax, start_time(%rip)
    000000ed: 	leal	-0x1(%rbx), %eax
    000000f0: 	movq	%r12, %rbp
    000000f3: 	leaq	(%rcx,%rax,8), %r13
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4402:
    00000100: 	movl	$0x38, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbx
    0000010d: 	leaq	0x30(%rax), %rax
    00000111: 	movq	%rax, (%rbx)
    00000114: 	movq	$0x1, 0x8(%rbx)
    0000011c: 	movq	$0x0, 0x10(%rbx)
    00000124: 	movq	$0x0, 0x18(%rbx)
    0000012c: 	movl	$0x3f800000, 0x20(%rbx)
    00000133: 	movq	$0x0, 0x28(%rbx)
    0000013b: 	movq	$0x0, 0x30(%rbx)
    00000143: 	cmpq	%rbx, %r14
    00000146: 	je	.Ltmp4401 # Offset: 326
    00000148: 	movq	%r14, %rsi
    0000014b: 	movq	%rbx, %rdi
    0000014e: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE18_M_assign_elementsIRKSC_EEvOT_ # Offset: 334
.Ltmp4401:
    00000153: 	movq	%rbx, (%r12)
    00000157: 	addq	$0x8, %r12
    0000015b: 	cmpq	%r13, %r12
    0000015e: 	jne	.Ltmp4402 # Offset: 350
    00000160: 	callq	clock@PLT # Offset: 352
    00000165: 	pxor	%xmm0, %xmm0
    00000169: 	movq	%rax, end_time(%rip)
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000184: 	addsd	0x8(%rsp), %xmm0
    0000018a: 	movsd	%xmm0, 0x8(%rsp)
.Ltmp4407:
    00000190: 	movq	(%rbp), %r12
    00000194: 	testq	%r12, %r12
    00000197: 	je	.Ltmp4403 # Offset: 407
    00000199: 	movq	0x10(%r12), %rbx
    0000019e: 	testq	%rbx, %rbx
    000001a1: 	je	.Ltmp4404 # Offset: 417
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4405:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	movq	(%rbx), %rbx
    000001ae: 	movl	$0x10, %esi
    000001b3: 	callq	_ZdlPvm@PLT # Offset: 435
    000001b8: 	testq	%rbx, %rbx
    000001bb: 	jne	.Ltmp4405 # Offset: 443
.Ltmp4404:
    000001bd: 	movq	0x8(%r12), %rax
    000001c2: 	movq	(%r12), %rdi
    000001c6: 	xorl	%esi, %esi
    000001c8: 	leaq	(,%rax,8), %rdx
    000001d0: 	callq	memset@PLT # Offset: 464
    000001d5: 	movq	(%r12), %rdi
    000001d9: 	leaq	0x30(%r12), %rax
    000001de: 	movq	$0x0, 0x18(%r12)
    000001e7: 	movq	$0x0, 0x10(%r12)
    000001f0: 	movq	0x8(%r12), %rsi
    000001f5: 	cmpq	%rax, %rdi
    000001f8: 	je	.Ltmp4406 # Offset: 504
    000001fa: 	shlq	$0x3, %rsi
    000001fe: 	callq	_ZdlPvm@PLT # Offset: 510
.Ltmp4406:
    00000203: 	movl	$0x38, %esi
    00000208: 	movq	%r12, %rdi
    0000020b: 	callq	_ZdlPvm@PLT # Offset: 523
.Ltmp4403:
    00000210: 	movq	$0x0, (%rbp)
    00000218: 	addq	$0x8, %rbp
    0000021c: 	cmpq	%rbp, %r13
    0000021f: 	jne	.Ltmp4407 # Offset: 543
    00000225: 	movl	iterations(%rip), %eax
    0000022b: 	addl	(%rsp), %r15d
    0000022f: 	cmpl	%r15d, %eax
    00000232: 	jg	.Ltmp4408 # Offset: 562
.Ltmp4414:
    00000238: 	movq	0x28(%rsp), %rdi
    0000023d: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 573
    00000242: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000249: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000250: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000257: 	je	.Ltmp4409 # Offset: 599
.Ltmp4413:
    0000025d: 	movq	-0x20(%rax), %rdi
    00000261: 	movsd	0x8(%rsp), %xmm0
    00000267: 	callq	_Z13record_resultdPKc # Offset: 615
    0000026c: 	cmpq	$0x0, 0x10(%rsp)
    00000272: 	je	.Ltmp4410 # Offset: 626
    00000274: 	movq	0x48(%rsp), %rax
    00000279: 	subq	%fs:0x28, %rax
    00000282: 	jne	.Ltmp4411 # Offset: 642
    00000284: 	movq	0x40(%rsp), %rsi
    00000289: 	movq	0x10(%rsp), %rdi
    0000028e: 	addq	$0x58, %rsp
    00000292: 	popq	%rbx
    00000293: 	popq	%rbp
    00000294: 	subq	%rdi, %rsi
    00000297: 	popq	%r12
    00000299: 	popq	%r13
    0000029b: 	popq	%r14
    0000029d: 	popq	%r15
    0000029f: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 671
.Ltmp4410:
    000002a4: 	movq	0x48(%rsp), %rax
    000002a9: 	subq	%fs:0x28, %rax
    000002b2: 	jne	.Ltmp4411 # Offset: 690
    000002b4: 	addq	$0x58, %rsp
    000002b8: 	popq	%rbx
    000002b9: 	popq	%rbp
    000002ba: 	popq	%r12
    000002bc: 	popq	%r13
    000002be: 	popq	%r14
    000002c0: 	popq	%r15
    000002c2: 	retq # Offset: 706
.Ltmp4398:
    000002c3: 	movq	$0x3e8, (%rsp)
.Ltmp4399:
    000002cb: 	movq	$0x0, 0x40(%rsp)
    000002d4: 	pxor	%xmm0, %xmm0
    000002d8: 	movaps	%xmm0, 0x30(%rsp)
    000002dd: 	jmp	.Ltmp4412 # Offset: 733
.Ltmp4409:
    000002e2: 	movq	-0x8(%rdx), %rax
    000002e6: 	addq	$0x200, %rax
    000002ec: 	jmp	.Ltmp4413 # Offset: 748
.Ltmp4400:
    000002f1: 	pxor	%xmm3, %xmm3
    000002f5: 	movsd	%xmm3, 0x8(%rsp)
    000002fb: 	jmp	.Ltmp4414 # Offset: 763
.Ltmp4411:
    00000300: 	callq	__stack_chk_fail@PLT # Offset: 768
    00000305: 	endbr64
    00000309: 	movq	%rax, %rbp
    0000030c: 	movq	0x30(%rsp), %rdi
    00000311: 	movq	0x40(%rsp), %rsi
    00000316: 	subq	%rdi, %rsi
    00000319: 	testq	%rdi, %rdi
    0000031c: 	je	.Ltmp4415 # Offset: 796
    0000031e: 	callq	_ZdlPvm@PLT # Offset: 798
.Ltmp4415:
    00000323: 	movq	%rbp, %rdi
    00000326: 	callq	_Unwind_Resume@PLT # Offset: 806
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_assignIRKSC_NS1_17_ReuseOrAllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEEvOT_RKT0_" after disassembly {
  Number      : 268
  State       : disassembled
  Address     : 0x2ccc0
  Size        : 0x2fd
  MaxSize     : 0x300
  Offset      : 0x2ccc0
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_assignIRKSC_NS1_17_ReuseOrAllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEEvOT_RKT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0267:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rsi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cmpq	$0x0, (%rdi)
    0000002f: 	movq	$0x0, 0x8(%rsp)
    00000038: 	je	.Ltmp4416 # Offset: 56
.Ltmp4431:
    0000003e: 	movq	0x10(%rbx), %rbx
    00000042: 	testq	%rbx, %rbx
    00000045: 	je	.Ltmp4417 # Offset: 69
    0000004b: 	movq	(%r13), %r12
    0000004f: 	testq	%r12, %r12
    00000052: 	je	.Ltmp4418 # Offset: 82
    00000058: 	movq	(%r12), %rax
    0000005c: 	movsd	0x8(%rbx), %xmm0
    00000061: 	movq	%rax, (%r13)
    00000065: 	movq	$0x0, (%r12)
    0000006d: 	movsd	%xmm0, 0x8(%r12)
.Ltmp4432:
    00000074: 	pxor	%xmm2, %xmm2
    00000078: 	movq	(%rbp), %r14
    0000007c: 	movq	0x8(%rbp), %rcx
    00000080: 	movq	%r12, 0x10(%rbp)
    00000084: 	ucomisd	%xmm2, %xmm0
    00000088: 	movsd	%xmm0, 0x10(%rsp)
    0000008e: 	jp	.Ltmp4419 # Offset: 142
    00000094: 	jne	.Ltmp4419 # Offset: 148
.Ltmp4433:
    0000009a: 	leaq	0x10(%rbp), %rax
    0000009e: 	movq	%rax, (%r14)
    000000a1: 	movq	(%rbx), %rbx
    000000a4: 	testq	%rbx, %rbx
    000000a7: 	je	.Ltmp4417 # Offset: 167
    000000ad: 	movl	$0xc70f6907, %r14d
    000000b3: 	jmp	.Ltmp4420 # Offset: 179
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp4424:
    000000b8: 	addq	(%rbp), %rdx
    000000bc: 	cmpq	$0x0, (%rdx)
    000000c0: 	je	.Ltmp4421 # Offset: 192
.Ltmp4425:
    000000c6: 	movq	(%rbx), %rbx
    000000c9: 	testq	%rbx, %rbx
    000000cc: 	je	.Ltmp4417 # Offset: 204
.Ltmp4426:
    000000d2: 	movq	%r15, %r12
.Ltmp4420:
    000000d5: 	movq	(%r13), %r15
    000000d9: 	testq	%r15, %r15
    000000dc: 	je	.Ltmp4422 # Offset: 220
    000000e2: 	movq	(%r15), %rax
    000000e5: 	movsd	0x8(%rbx), %xmm0
    000000ea: 	movq	%rax, (%r13)
    000000ee: 	movq	$0x0, (%r15)
    000000f5: 	movsd	%xmm0, 0x8(%r15)
.Ltmp4428:
    000000fb: 	pxor	%xmm1, %xmm1
    000000ff: 	movq	%r15, (%r12)
    00000103: 	movq	0x8(%rbp), %r8
    00000107: 	ucomisd	%xmm1, %xmm0
    0000010b: 	movsd	%xmm0, 0x10(%rsp)
    00000111: 	jp	.Ltmp4423 # Offset: 273
    00000113: 	movl	$0x0, %edx
    00000118: 	je	.Ltmp4424 # Offset: 280
.Ltmp4423:
    0000011a: 	movq	%r14, %rdx
    0000011d: 	leaq	0x10(%rsp), %rdi
    00000122: 	movl	$0x8, %esi
    00000127: 	movq	%r8, (%rsp)
    0000012b: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 299
    00000130: 	movq	(%rsp), %r8
    00000134: 	xorl	%edx, %edx
    00000136: 	divq	%r8
    00000139: 	shlq	$0x3, %rdx
    0000013d: 	addq	(%rbp), %rdx
    00000141: 	cmpq	$0x0, (%rdx)
    00000145: 	jne	.Ltmp4425 # Offset: 325
.Ltmp4421:
    0000014b: 	movq	%r12, (%rdx)
    0000014e: 	movq	(%rbx), %rbx
    00000151: 	testq	%rbx, %rbx
    00000154: 	jne	.Ltmp4426 # Offset: 340
.Ltmp4417:
    0000015a: 	movq	0x18(%rsp), %rax
    0000015f: 	subq	%fs:0x28, %rax
    00000168: 	jne	.Ltmp4427 # Offset: 360
    0000016e: 	addq	$0x28, %rsp
    00000172: 	popq	%rbx
    00000173: 	popq	%rbp
    00000174: 	popq	%r12
    00000176: 	popq	%r13
    00000178: 	popq	%r14
    0000017a: 	popq	%r15
    0000017c: 	retq # Offset: 380
    0000017d: 	nopl	(%rax) # Size: 3
.Ltmp4422:
    00000180: 	movl	$0x10, %edi
    00000185: 	callq	_Znwm@PLT # Offset: 389
    0000018a: 	movsd	0x8(%rbx), %xmm0
    0000018f: 	movq	$0x0, (%rax)
    00000196: 	movq	%rax, %r15
    00000199: 	movsd	%xmm0, 0x8(%rax)
    0000019e: 	jmp	.Ltmp4428 # Offset: 414
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4416:
    000001a8: 	movq	0x8(%rdi), %rdx
    000001ac: 	cmpq	$0x1, %rdx
    000001b0: 	je	.Ltmp4429 # Offset: 432
    000001b6: 	movq	%rdx, %rax
    000001b9: 	shrq	$0x3c, %rax
    000001bd: 	jne	.Ltmp4430 # Offset: 445
    000001c3: 	leaq	(,%rdx,8), %r12
    000001cb: 	movq	%r12, %rdi
    000001ce: 	callq	_Znwm@PLT # Offset: 462
    000001d3: 	movq	%r12, %rdx
    000001d6: 	xorl	%esi, %esi
    000001d8: 	movq	%rax, %rdi
    000001db: 	movq	%rax, 0x8(%rsp)
    000001e0: 	callq	memset@PLT # Offset: 480
.Ltmp4434:
    000001e5: 	movq	0x8(%rsp), %rax
    000001ea: 	movq	%rax, (%rbp)
    000001ee: 	jmp	.Ltmp4431 # Offset: 494
    000001f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4418:
    000001f8: 	movl	$0x10, %edi
    000001fd: 	callq	_Znwm@PLT # Offset: 509
    00000202: 	movsd	0x8(%rbx), %xmm0
    00000207: 	movq	$0x0, (%rax)
    0000020e: 	movq	%rax, %r12
    00000211: 	movsd	%xmm0, 0x8(%rax)
    00000216: 	jmp	.Ltmp4432 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4419:
    00000220: 	movl	$0xc70f6907, %edx
    00000225: 	leaq	0x10(%rsp), %rdi
    0000022a: 	movl	$0x8, %esi
    0000022f: 	movq	%rcx, (%rsp)
    00000233: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 563
    00000238: 	movq	(%rsp), %rcx
    0000023c: 	xorl	%edx, %edx
    0000023e: 	divq	%rcx
    00000241: 	leaq	(%r14,%rdx,8), %r14
    00000245: 	jmp	.Ltmp4433 # Offset: 581
.Ltmp4429:
    0000024a: 	leaq	0x30(%rdi), %rax
    0000024e: 	movq	$0x0, 0x30(%rdi)
    00000256: 	movq	%rax, 0x8(%rsp)
    0000025b: 	jmp	.Ltmp4434 # Offset: 603
.Ltmp4430:
    0000025d: 	shrq	$0x3d, %rdx
    00000261: 	je	.Ltmp4435 # Offset: 609
    00000263: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 611
.Ltmp4435:
    00000268: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 616
.Ltmp4427:
    0000026d: 	callq	__stack_chk_fail@PLT # Offset: 621
    00000272: 	endbr64
    00000276: 	movq	%rax, %rdi
    00000279: 	callq	__cxa_begin_catch@PLT # Offset: 633
    0000027e: 	movq	0x10(%rbp), %rdi
.Ltmp4437:
    00000282: 	testq	%rdi, %rdi
    00000285: 	je	.Ltmp4436 # Offset: 645
    00000287: 	movq	(%rdi), %rbx
    0000028a: 	movl	$0x10, %esi
    0000028f: 	callq	_ZdlPvm@PLT # Offset: 655
    00000294: 	movq	%rbx, %rdi
    00000297: 	jmp	.Ltmp4437 # Offset: 663
.Ltmp4436:
    00000299: 	movq	0x8(%rbp), %rax
    0000029d: 	movq	(%rbp), %rdi
    000002a1: 	xorl	%esi, %esi
    000002a3: 	leaq	(,%rax,8), %rdx
    000002ab: 	callq	memset@PLT # Offset: 683
    000002b0: 	cmpq	$0x0, 0x8(%rsp)
    000002b6: 	movq	$0x0, 0x18(%rbp)
    000002be: 	movq	$0x0, 0x10(%rbp)
    000002c6: 	je	.Ltmp4438 # Offset: 710
    000002c8: 	movq	(%rbp), %rdi
    000002cc: 	movq	0x8(%rbp), %rsi
    000002d0: 	addq	$0x30, %rbp
    000002d4: 	cmpq	%rbp, %rdi
    000002d7: 	jne	.Ltmp4439 # Offset: 727
.Ltmp4438:
    000002d9: 	callq	__cxa_rethrow@PLT # Offset: 729
.Ltmp4439:
    000002de: 	shlq	$0x3, %rsi
    000002e2: 	callq	_ZdlPvm@PLT # Offset: 738
    000002e7: 	jmp	.Ltmp4438 # Offset: 743
    000002e9: 	endbr64
    000002ed: 	movq	%rax, %rbp
    000002f0: 	callq	__cxa_end_catch@PLT # Offset: 752
    000002f5: 	movq	%rbp, %rdi
    000002f8: 	callq	_Unwind_Resume@PLT # Offset: 760
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_assignIRKSC_NS1_17_ReuseOrAllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEEvOT_RKT0_"

Binary Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE18_M_assign_elementsIRKSC_EEvOT_" after disassembly {
  Number      : 269
  State       : disassembled
  Address     : 0x2cfc0
  Size        : 0x1e2
  MaxSize     : 0x1f0
  Offset      : 0x2cfc0
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE18_M_assign_elementsIRKSC_EEvOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0268:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	0x8(%rdi), %rbp
    0000001c: 	movq	0x8(%rsi), %rdx
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x18(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movq	0x28(%rdi), %r14
    00000034: 	movq	(%rdi), %r13
    00000037: 	cmpq	%rbp, %rdx
    0000003a: 	je	.Ltmp4440 # Offset: 58
    00000040: 	cmpq	$0x1, %rdx
    00000044: 	je	.Ltmp4441 # Offset: 68
    0000004a: 	movq	%rdx, %rax
    0000004d: 	shrq	$0x3c, %rax
    00000051: 	jne	.Ltmp4442 # Offset: 81
    00000057: 	leaq	(,%rdx,8), %r12
    0000005f: 	movq	%r12, %rdi
    00000062: 	callq	_Znwm@PLT # Offset: 98
    00000067: 	movq	%r12, %rdx
    0000006a: 	xorl	%esi, %esi
    0000006c: 	movq	%rax, %rdi
    0000006f: 	callq	memset@PLT # Offset: 111
    00000074: 	movq	0x8(%r15), %rdx
    00000078: 	movq	%rax, %rcx
.Ltmp4448:
    0000007b: 	movq	%rcx, (%rbx)
    0000007e: 	movq	%rdx, 0x8(%rbx)
.Ltmp4447:
    00000082: 	movq	0x18(%r15), %rax
    00000086: 	movdqu	0x20(%r15), %xmm1
    0000008c: 	movq	%rsp, %rdx
    0000008f: 	movq	%r15, %rsi
    00000092: 	movq	0x10(%rbx), %xmm0
    00000097: 	movq	%rbx, %xmm2
    0000009c: 	movq	%rbx, %rdi
    0000009f: 	movq	$0x0, 0x10(%rbx)
    000000a7: 	movq	%rax, 0x18(%rbx)
    000000ab: 	punpcklqdq	%xmm2, %xmm0
    000000af: 	movups	%xmm1, 0x20(%rbx)
    000000b3: 	movaps	%xmm0, (%rsp)
    000000b7: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_assignIRKSC_NS1_17_ReuseOrAllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEEvOT_RKT0_ # Offset: 183
    000000bc: 	testq	%r13, %r13
    000000bf: 	je	.Ltmp4443 # Offset: 191
    000000c1: 	addq	$0x30, %rbx
    000000c5: 	cmpq	%rbx, %r13
    000000c8: 	je	.Ltmp4443 # Offset: 200
    000000ca: 	leaq	(,%rbp,8), %rsi
    000000d2: 	movq	%r13, %rdi
    000000d5: 	callq	_ZdlPvm@PLT # Offset: 213
.Ltmp4443:
    000000da: 	movq	(%rsp), %rbx
    000000de: 	testq	%rbx, %rbx
    000000e1: 	je	.Ltmp4444 # Offset: 225
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4445:
    000000e8: 	movq	%rbx, %rdi
    000000eb: 	movq	(%rbx), %rbx
    000000ee: 	movl	$0x10, %esi
    000000f3: 	callq	_ZdlPvm@PLT # Offset: 243
    000000f8: 	testq	%rbx, %rbx
    000000fb: 	jne	.Ltmp4445 # Offset: 251
.Ltmp4444:
    000000fd: 	movq	0x18(%rsp), %rax
    00000102: 	subq	%fs:0x28, %rax
    0000010b: 	jne	.Ltmp4446 # Offset: 267
    0000010d: 	addq	$0x28, %rsp
    00000111: 	popq	%rbx
    00000112: 	popq	%rbp
    00000113: 	popq	%r12
    00000115: 	popq	%r13
    00000117: 	popq	%r14
    00000119: 	popq	%r15
    0000011b: 	retq # Offset: 283
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp4440:
    00000120: 	movq	%r13, %rdi
    00000123: 	leaq	(,%rbp,8), %rdx
    0000012b: 	xorl	%esi, %esi
    0000012d: 	xorl	%r13d, %r13d
    00000130: 	callq	memset@PLT # Offset: 304
    00000135: 	jmp	.Ltmp4447 # Offset: 309
.Ltmp4441:
    0000013a: 	movq	$0x0, 0x30(%rdi)
    00000142: 	leaq	0x30(%rdi), %rcx
    00000146: 	jmp	.Ltmp4448 # Offset: 326
.Ltmp4442:
    0000014b: 	shrq	$0x3d, %rdx
    0000014f: 	je	.Ltmp4449 # Offset: 335
    00000151: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 337
.Ltmp4449:
    00000156: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 342
.Ltmp4446:
    0000015b: 	callq	__stack_chk_fail@PLT # Offset: 347
    00000160: 	endbr64
    00000164: 	movq	%rax, %r15
    00000167: 	movq	(%rsp), %rdi
.Ltmp4451:
    0000016b: 	testq	%rdi, %rdi
    0000016e: 	je	.Ltmp4450 # Offset: 366
    00000170: 	movq	(%rdi), %r12
    00000173: 	movl	$0x10, %esi
    00000178: 	callq	_ZdlPvm@PLT # Offset: 376
    0000017d: 	movq	%r12, %rdi
    00000180: 	jmp	.Ltmp4451 # Offset: 384
.Ltmp4450:
    00000182: 	movq	%r15, %rdi
    00000185: 	callq	__cxa_begin_catch@PLT # Offset: 389
    0000018a: 	testq	%r13, %r13
    0000018d: 	je	.Ltmp4452 # Offset: 397
    0000018f: 	movq	(%rbx), %rdi
    00000192: 	leaq	0x30(%rbx), %rax
    00000196: 	movq	0x8(%rbx), %rsi
    0000019a: 	cmpq	%rax, %rdi
    0000019d: 	je	.Ltmp4453 # Offset: 413
    0000019f: 	shlq	$0x3, %rsi
    000001a3: 	callq	_ZdlPvm@PLT # Offset: 419
.Ltmp4453:
    000001a8: 	movq	%r14, 0x28(%rbx)
    000001ac: 	movq	%r13, (%rbx)
    000001af: 	movq	%rbp, 0x8(%rbx)
.Ltmp4452:
    000001b3: 	movq	0x8(%rbx), %rax
    000001b7: 	movq	(%rbx), %rdi
    000001ba: 	xorl	%esi, %esi
    000001bc: 	leaq	(,%rax,8), %rdx
    000001c4: 	callq	memset@PLT # Offset: 452
    000001c9: 	callq	__cxa_rethrow@PLT # Offset: 457
    000001ce: 	endbr64
    000001d2: 	movq	%rax, %rbp
    000001d5: 	callq	__cxa_end_catch@PLT # Offset: 469
    000001da: 	movq	%rbp, %rdi
    000001dd: 	callq	_Unwind_Resume@PLT # Offset: 477
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE18_M_assign_elementsIRKSC_EEvOT_"

Binary Function "_Z19test_duplicate_coreISt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 270
  State       : disassembled
  Address     : 0x2d1b0
  Size        : 0x32b
  MaxSize     : 0x330
  Offset      : 0x2d1b0
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0269:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	(,%rsi,8), %rcx
    0000000e: 	pushq	%r14
    00000010: 	movq	%rdi, %r14
    00000013: 	pushq	%r13
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x28(%rsp)
    00000022: 	xorl	%edx, %edx
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x48(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	movabsq	$0x500000000, %rax
    0000003e: 	divq	%rcx
    00000041: 	movq	%rax, (%rsp)
    00000045: 	cmpq	$0x3e8, %rax
    0000004b: 	ja	.Ltmp4454 # Offset: 75
    00000051: 	cmpq	$0x3, %rax
    00000055: 	ja	.Ltmp4455 # Offset: 85
    0000005b: 	movq	$0x0, 0x40(%rsp)
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	movq	$0x4, (%rsp)
    00000070: 	movaps	%xmm0, 0x30(%rsp)
.Ltmp4468:
    00000075: 	movq	(%rsp), %rbx
    00000079: 	leaq	0x30(%rsp), %rdi
    0000007e: 	movq	%rbx, %rsi
    00000081: 	callq	_ZNSt6vectorIPSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 129
    00000086: 	movq	0x30(%rsp), %rcx
    0000008b: 	movl	iterations(%rip), %eax
    00000091: 	movq	%rcx, 0x10(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp4456 # Offset: 152
    0000009e: 	addq	$0x8, %rcx
    000000a2: 	movl	%ebx, 0x1c(%rsp)
    000000a6: 	pxor	%xmm2, %xmm2
    000000aa: 	xorl	%r15d, %r15d
    000000ad: 	movq	%rcx, 0x20(%rsp)
    000000b2: 	movsd	%xmm2, 0x8(%rsp)
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4464:
    000000c0: 	movslq	%eax, %rcx
    000000c3: 	movslq	%r15d, %rdx
    000000c6: 	addq	(%rsp), %rdx
    000000ca: 	subl	%r15d, %eax
    000000cd: 	cmpq	%rcx, %rdx
    000000d0: 	cmovbl	0x1c(%rsp), %eax
    000000d5: 	movl	%eax, %ebx
    000000d7: 	callq	clock@PLT # Offset: 215
    000000dc: 	movq	0x10(%rsp), %r12
    000000e1: 	movq	0x20(%rsp), %rcx
    000000e6: 	movq	%rax, start_time(%rip)
    000000ed: 	leal	-0x1(%rbx), %eax
    000000f0: 	movq	%r12, %rbp
    000000f3: 	leaq	(%rcx,%rax,8), %r13
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4458:
    00000100: 	movl	$0x38, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbx
    0000010d: 	leaq	0x30(%rax), %rax
    00000111: 	movq	%rax, (%rbx)
    00000114: 	movq	$0x1, 0x8(%rbx)
    0000011c: 	movq	$0x0, 0x10(%rbx)
    00000124: 	movq	$0x0, 0x18(%rbx)
    0000012c: 	movl	$0x3f800000, 0x20(%rbx)
    00000133: 	movq	$0x0, 0x28(%rbx)
    0000013b: 	movq	$0x0, 0x30(%rbx)
    00000143: 	cmpq	%rbx, %r14
    00000146: 	je	.Ltmp4457 # Offset: 326
    00000148: 	movq	%r14, %rsi
    0000014b: 	movq	%rbx, %rdi
    0000014e: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE18_M_assign_elementsIRKSC_EEvOT_ # Offset: 334
.Ltmp4457:
    00000153: 	movq	%rbx, (%r12)
    00000157: 	addq	$0x8, %r12
    0000015b: 	cmpq	%r13, %r12
    0000015e: 	jne	.Ltmp4458 # Offset: 350
    00000160: 	callq	clock@PLT # Offset: 352
    00000165: 	pxor	%xmm0, %xmm0
    00000169: 	movq	%rax, end_time(%rip)
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000184: 	addsd	0x8(%rsp), %xmm0
    0000018a: 	movsd	%xmm0, 0x8(%rsp)
.Ltmp4463:
    00000190: 	movq	(%rbp), %r12
    00000194: 	testq	%r12, %r12
    00000197: 	je	.Ltmp4459 # Offset: 407
    00000199: 	movq	0x10(%r12), %rbx
    0000019e: 	testq	%rbx, %rbx
    000001a1: 	je	.Ltmp4460 # Offset: 417
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4461:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	movq	(%rbx), %rbx
    000001ae: 	movl	$0x10, %esi
    000001b3: 	callq	_ZdlPvm@PLT # Offset: 435
    000001b8: 	testq	%rbx, %rbx
    000001bb: 	jne	.Ltmp4461 # Offset: 443
.Ltmp4460:
    000001bd: 	movq	0x8(%r12), %rax
    000001c2: 	movq	(%r12), %rdi
    000001c6: 	xorl	%esi, %esi
    000001c8: 	leaq	(,%rax,8), %rdx
    000001d0: 	callq	memset@PLT # Offset: 464
    000001d5: 	movq	(%r12), %rdi
    000001d9: 	leaq	0x30(%r12), %rax
    000001de: 	movq	$0x0, 0x18(%r12)
    000001e7: 	movq	$0x0, 0x10(%r12)
    000001f0: 	movq	0x8(%r12), %rsi
    000001f5: 	cmpq	%rax, %rdi
    000001f8: 	je	.Ltmp4462 # Offset: 504
    000001fa: 	shlq	$0x3, %rsi
    000001fe: 	callq	_ZdlPvm@PLT # Offset: 510
.Ltmp4462:
    00000203: 	movl	$0x38, %esi
    00000208: 	movq	%r12, %rdi
    0000020b: 	callq	_ZdlPvm@PLT # Offset: 523
.Ltmp4459:
    00000210: 	movq	$0x0, (%rbp)
    00000218: 	addq	$0x8, %rbp
    0000021c: 	cmpq	%rbp, %r13
    0000021f: 	jne	.Ltmp4463 # Offset: 543
    00000225: 	movl	iterations(%rip), %eax
    0000022b: 	addl	(%rsp), %r15d
    0000022f: 	cmpl	%r15d, %eax
    00000232: 	jg	.Ltmp4464 # Offset: 562
.Ltmp4470:
    00000238: 	movq	0x28(%rsp), %rdi
    0000023d: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 573
    00000242: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000249: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000250: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000257: 	je	.Ltmp4465 # Offset: 599
.Ltmp4469:
    0000025d: 	movq	-0x20(%rax), %rdi
    00000261: 	movsd	0x8(%rsp), %xmm0
    00000267: 	callq	_Z13record_resultdPKc # Offset: 615
    0000026c: 	cmpq	$0x0, 0x10(%rsp)
    00000272: 	je	.Ltmp4466 # Offset: 626
    00000274: 	movq	0x48(%rsp), %rax
    00000279: 	subq	%fs:0x28, %rax
    00000282: 	jne	.Ltmp4467 # Offset: 642
    00000284: 	movq	0x40(%rsp), %rsi
    00000289: 	movq	0x10(%rsp), %rdi
    0000028e: 	addq	$0x58, %rsp
    00000292: 	popq	%rbx
    00000293: 	popq	%rbp
    00000294: 	subq	%rdi, %rsi
    00000297: 	popq	%r12
    00000299: 	popq	%r13
    0000029b: 	popq	%r14
    0000029d: 	popq	%r15
    0000029f: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 671
.Ltmp4466:
    000002a4: 	movq	0x48(%rsp), %rax
    000002a9: 	subq	%fs:0x28, %rax
    000002b2: 	jne	.Ltmp4467 # Offset: 690
    000002b4: 	addq	$0x58, %rsp
    000002b8: 	popq	%rbx
    000002b9: 	popq	%rbp
    000002ba: 	popq	%r12
    000002bc: 	popq	%r13
    000002be: 	popq	%r14
    000002c0: 	popq	%r15
    000002c2: 	retq # Offset: 706
.Ltmp4454:
    000002c3: 	movq	$0x3e8, (%rsp)
.Ltmp4455:
    000002cb: 	movq	$0x0, 0x40(%rsp)
    000002d4: 	pxor	%xmm0, %xmm0
    000002d8: 	movaps	%xmm0, 0x30(%rsp)
    000002dd: 	jmp	.Ltmp4468 # Offset: 733
.Ltmp4465:
    000002e2: 	movq	-0x8(%rdx), %rax
    000002e6: 	addq	$0x200, %rax
    000002ec: 	jmp	.Ltmp4469 # Offset: 748
.Ltmp4456:
    000002f1: 	pxor	%xmm3, %xmm3
    000002f5: 	movsd	%xmm3, 0x8(%rsp)
    000002fb: 	jmp	.Ltmp4470 # Offset: 763
.Ltmp4467:
    00000300: 	callq	__stack_chk_fail@PLT # Offset: 768
    00000305: 	endbr64
    00000309: 	movq	%rax, %rbp
    0000030c: 	movq	0x30(%rsp), %rdi
    00000311: 	movq	0x40(%rsp), %rsi
    00000316: 	subq	%rdi, %rsi
    00000319: 	testq	%rdi, %rdi
    0000031c: 	je	.Ltmp4471 # Offset: 796
    0000031e: 	callq	_ZdlPvm@PLT # Offset: 798
.Ltmp4471:
    00000323: 	movq	%rbp, %rdi
    00000326: 	callq	_Unwind_Resume@PLT # Offset: 806
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_17_ReuseOrAllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_" after disassembly {
  Number      : 271
  State       : disassembled
  Address     : 0x2d4e0
  Size        : 0x30d
  MaxSize     : 0x310
  Offset      : 0x2d4e0
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_17_ReuseOrAllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0270:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rsi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cmpq	$0x0, (%rdi)
    0000002f: 	movq	$0x0, 0x8(%rsp)
    00000038: 	je	.Ltmp4472 # Offset: 56
.Ltmp4487:
    0000003e: 	movq	0x10(%rbx), %rbx
    00000042: 	testq	%rbx, %rbx
    00000045: 	je	.Ltmp4473 # Offset: 69
    0000004b: 	movq	(%r13), %r12
    0000004f: 	testq	%r12, %r12
    00000052: 	je	.Ltmp4474 # Offset: 82
    00000058: 	movq	(%r12), %rax
    0000005c: 	movdqu	0x8(%rbx), %xmm4
    00000061: 	movq	%rax, (%r13)
    00000065: 	movq	$0x0, (%r12)
    0000006d: 	movups	%xmm4, 0x8(%r12)
.Ltmp4488:
    00000073: 	pxor	%xmm5, %xmm5
    00000077: 	movq	(%rbp), %r14
    0000007b: 	movq	0x8(%rbp), %rcx
    0000007f: 	movq	%r12, 0x10(%rbp)
    00000083: 	movsd	0x8(%r12), %xmm0
    0000008a: 	ucomisd	%xmm5, %xmm0
    0000008e: 	movsd	%xmm0, 0x10(%rsp)
    00000094: 	jp	.Ltmp4475 # Offset: 148
    0000009a: 	jne	.Ltmp4475 # Offset: 154
.Ltmp4489:
    000000a0: 	leaq	0x10(%rbp), %rax
    000000a4: 	movq	%rax, (%r14)
    000000a7: 	movq	(%rbx), %rbx
    000000aa: 	testq	%rbx, %rbx
    000000ad: 	je	.Ltmp4473 # Offset: 173
    000000b3: 	movl	$0xc70f6907, %r14d
    000000b9: 	jmp	.Ltmp4476 # Offset: 185
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4480:
    000000c0: 	addq	(%rbp), %rdx
    000000c4: 	cmpq	$0x0, (%rdx)
    000000c8: 	je	.Ltmp4477 # Offset: 200
.Ltmp4481:
    000000ce: 	movq	(%rbx), %rbx
    000000d1: 	testq	%rbx, %rbx
    000000d4: 	je	.Ltmp4473 # Offset: 212
.Ltmp4482:
    000000da: 	movq	%r15, %r12
.Ltmp4476:
    000000dd: 	movq	(%r13), %r15
    000000e1: 	testq	%r15, %r15
    000000e4: 	je	.Ltmp4478 # Offset: 228
    000000ea: 	movq	(%r15), %rax
    000000ed: 	movdqu	0x8(%rbx), %xmm2
    000000f2: 	movq	%rax, (%r13)
    000000f6: 	movq	$0x0, (%r15)
    000000fd: 	movups	%xmm2, 0x8(%r15)
.Ltmp4484:
    00000102: 	movsd	0x8(%r15), %xmm0
    00000108: 	pxor	%xmm1, %xmm1
    0000010c: 	movq	0x8(%rbp), %r8
    00000110: 	movq	%r15, (%r12)
    00000114: 	ucomisd	%xmm1, %xmm0
    00000118: 	movsd	%xmm0, 0x10(%rsp)
    0000011e: 	jp	.Ltmp4479 # Offset: 286
    00000120: 	movl	$0x0, %edx
    00000125: 	je	.Ltmp4480 # Offset: 293
.Ltmp4479:
    00000127: 	movq	%r14, %rdx
    0000012a: 	leaq	0x10(%rsp), %rdi
    0000012f: 	movl	$0x8, %esi
    00000134: 	movq	%r8, (%rsp)
    00000138: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 312
    0000013d: 	movq	(%rsp), %r8
    00000141: 	xorl	%edx, %edx
    00000143: 	divq	%r8
    00000146: 	shlq	$0x3, %rdx
    0000014a: 	addq	(%rbp), %rdx
    0000014e: 	cmpq	$0x0, (%rdx)
    00000152: 	jne	.Ltmp4481 # Offset: 338
.Ltmp4477:
    00000158: 	movq	%r12, (%rdx)
    0000015b: 	movq	(%rbx), %rbx
    0000015e: 	testq	%rbx, %rbx
    00000161: 	jne	.Ltmp4482 # Offset: 353
.Ltmp4473:
    00000167: 	movq	0x18(%rsp), %rax
    0000016c: 	subq	%fs:0x28, %rax
    00000175: 	jne	.Ltmp4483 # Offset: 373
    0000017b: 	addq	$0x28, %rsp
    0000017f: 	popq	%rbx
    00000180: 	popq	%rbp
    00000181: 	popq	%r12
    00000183: 	popq	%r13
    00000185: 	popq	%r14
    00000187: 	popq	%r15
    00000189: 	retq # Offset: 393
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4478:
    00000190: 	movl	$0x18, %edi
    00000195: 	callq	_Znwm@PLT # Offset: 405
    0000019a: 	movdqu	0x8(%rbx), %xmm3
    0000019f: 	movq	$0x0, (%rax)
    000001a6: 	movq	%rax, %r15
    000001a9: 	movups	%xmm3, 0x8(%rax)
    000001ad: 	jmp	.Ltmp4484 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4472:
    000001b8: 	movq	0x8(%rdi), %rdx
    000001bc: 	cmpq	$0x1, %rdx
    000001c0: 	je	.Ltmp4485 # Offset: 448
    000001c6: 	movq	%rdx, %rax
    000001c9: 	shrq	$0x3c, %rax
    000001cd: 	jne	.Ltmp4486 # Offset: 461
    000001d3: 	leaq	(,%rdx,8), %r12
    000001db: 	movq	%r12, %rdi
    000001de: 	callq	_Znwm@PLT # Offset: 478
    000001e3: 	movq	%r12, %rdx
    000001e6: 	xorl	%esi, %esi
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	%rax, 0x8(%rsp)
    000001f0: 	callq	memset@PLT # Offset: 496
.Ltmp4490:
    000001f5: 	movq	0x8(%rsp), %rax
    000001fa: 	movq	%rax, (%rbp)
    000001fe: 	jmp	.Ltmp4487 # Offset: 510
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4474:
    00000208: 	movl	$0x18, %edi
    0000020d: 	callq	_Znwm@PLT # Offset: 525
    00000212: 	movdqu	0x8(%rbx), %xmm6
    00000217: 	movq	$0x0, (%rax)
    0000021e: 	movq	%rax, %r12
    00000221: 	movups	%xmm6, 0x8(%rax)
    00000225: 	jmp	.Ltmp4488 # Offset: 549
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4475:
    00000230: 	movl	$0xc70f6907, %edx
    00000235: 	leaq	0x10(%rsp), %rdi
    0000023a: 	movl	$0x8, %esi
    0000023f: 	movq	%rcx, (%rsp)
    00000243: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 579
    00000248: 	movq	(%rsp), %rcx
    0000024c: 	xorl	%edx, %edx
    0000024e: 	divq	%rcx
    00000251: 	leaq	(%r14,%rdx,8), %r14
    00000255: 	jmp	.Ltmp4489 # Offset: 597
.Ltmp4485:
    0000025a: 	leaq	0x30(%rdi), %rax
    0000025e: 	movq	$0x0, 0x30(%rdi)
    00000266: 	movq	%rax, 0x8(%rsp)
    0000026b: 	jmp	.Ltmp4490 # Offset: 619
.Ltmp4486:
    0000026d: 	shrq	$0x3d, %rdx
    00000271: 	je	.Ltmp4491 # Offset: 625
    00000273: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 627
.Ltmp4491:
    00000278: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 632
.Ltmp4483:
    0000027d: 	callq	__stack_chk_fail@PLT # Offset: 637
    00000282: 	endbr64
    00000286: 	movq	%rax, %rdi
    00000289: 	callq	__cxa_begin_catch@PLT # Offset: 649
    0000028e: 	movq	0x10(%rbp), %rdi
.Ltmp4493:
    00000292: 	testq	%rdi, %rdi
    00000295: 	je	.Ltmp4492 # Offset: 661
    00000297: 	movq	(%rdi), %rbx
    0000029a: 	movl	$0x18, %esi
    0000029f: 	callq	_ZdlPvm@PLT # Offset: 671
    000002a4: 	movq	%rbx, %rdi
    000002a7: 	jmp	.Ltmp4493 # Offset: 679
.Ltmp4492:
    000002a9: 	movq	0x8(%rbp), %rax
    000002ad: 	movq	(%rbp), %rdi
    000002b1: 	xorl	%esi, %esi
    000002b3: 	leaq	(,%rax,8), %rdx
    000002bb: 	callq	memset@PLT # Offset: 699
    000002c0: 	cmpq	$0x0, 0x8(%rsp)
    000002c6: 	movq	$0x0, 0x18(%rbp)
    000002ce: 	movq	$0x0, 0x10(%rbp)
    000002d6: 	je	.Ltmp4494 # Offset: 726
    000002d8: 	movq	(%rbp), %rdi
    000002dc: 	movq	0x8(%rbp), %rsi
    000002e0: 	addq	$0x30, %rbp
    000002e4: 	cmpq	%rbp, %rdi
    000002e7: 	jne	.Ltmp4495 # Offset: 743
.Ltmp4494:
    000002e9: 	callq	__cxa_rethrow@PLT # Offset: 745
.Ltmp4495:
    000002ee: 	shlq	$0x3, %rsi
    000002f2: 	callq	_ZdlPvm@PLT # Offset: 754
    000002f7: 	jmp	.Ltmp4494 # Offset: 759
    000002f9: 	endbr64
    000002fd: 	movq	%rax, %rbp
    00000300: 	callq	__cxa_end_catch@PLT # Offset: 768
    00000305: 	movq	%rbp, %rdi
    00000308: 	callq	_Unwind_Resume@PLT # Offset: 776
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_17_ReuseOrAllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_"

Binary Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE18_M_assign_elementsIRKSF_EEvOT_" after disassembly {
  Number      : 272
  State       : disassembled
  Address     : 0x2d7f0
  Size        : 0x1e2
  MaxSize     : 0x1f0
  Offset      : 0x2d7f0
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE18_M_assign_elementsIRKSF_EEvOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0271:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	0x8(%rdi), %rbp
    0000001c: 	movq	0x8(%rsi), %rdx
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x18(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movq	0x28(%rdi), %r14
    00000034: 	movq	(%rdi), %r13
    00000037: 	cmpq	%rbp, %rdx
    0000003a: 	je	.Ltmp4496 # Offset: 58
    00000040: 	cmpq	$0x1, %rdx
    00000044: 	je	.Ltmp4497 # Offset: 68
    0000004a: 	movq	%rdx, %rax
    0000004d: 	shrq	$0x3c, %rax
    00000051: 	jne	.Ltmp4498 # Offset: 81
    00000057: 	leaq	(,%rdx,8), %r12
    0000005f: 	movq	%r12, %rdi
    00000062: 	callq	_Znwm@PLT # Offset: 98
    00000067: 	movq	%r12, %rdx
    0000006a: 	xorl	%esi, %esi
    0000006c: 	movq	%rax, %rdi
    0000006f: 	callq	memset@PLT # Offset: 111
    00000074: 	movq	0x8(%r15), %rdx
    00000078: 	movq	%rax, %rcx
.Ltmp4504:
    0000007b: 	movq	%rcx, (%rbx)
    0000007e: 	movq	%rdx, 0x8(%rbx)
.Ltmp4503:
    00000082: 	movq	0x18(%r15), %rax
    00000086: 	movdqu	0x20(%r15), %xmm1
    0000008c: 	movq	%rsp, %rdx
    0000008f: 	movq	%r15, %rsi
    00000092: 	movq	0x10(%rbx), %xmm0
    00000097: 	movq	%rbx, %xmm2
    0000009c: 	movq	%rbx, %rdi
    0000009f: 	movq	$0x0, 0x10(%rbx)
    000000a7: 	movq	%rax, 0x18(%rbx)
    000000ab: 	punpcklqdq	%xmm2, %xmm0
    000000af: 	movups	%xmm1, 0x20(%rbx)
    000000b3: 	movaps	%xmm0, (%rsp)
    000000b7: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_assignIRKSF_NS4_17_ReuseOrAllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_ # Offset: 183
    000000bc: 	testq	%r13, %r13
    000000bf: 	je	.Ltmp4499 # Offset: 191
    000000c1: 	addq	$0x30, %rbx
    000000c5: 	cmpq	%rbx, %r13
    000000c8: 	je	.Ltmp4499 # Offset: 200
    000000ca: 	leaq	(,%rbp,8), %rsi
    000000d2: 	movq	%r13, %rdi
    000000d5: 	callq	_ZdlPvm@PLT # Offset: 213
.Ltmp4499:
    000000da: 	movq	(%rsp), %rbx
    000000de: 	testq	%rbx, %rbx
    000000e1: 	je	.Ltmp4500 # Offset: 225
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4501:
    000000e8: 	movq	%rbx, %rdi
    000000eb: 	movq	(%rbx), %rbx
    000000ee: 	movl	$0x18, %esi
    000000f3: 	callq	_ZdlPvm@PLT # Offset: 243
    000000f8: 	testq	%rbx, %rbx
    000000fb: 	jne	.Ltmp4501 # Offset: 251
.Ltmp4500:
    000000fd: 	movq	0x18(%rsp), %rax
    00000102: 	subq	%fs:0x28, %rax
    0000010b: 	jne	.Ltmp4502 # Offset: 267
    0000010d: 	addq	$0x28, %rsp
    00000111: 	popq	%rbx
    00000112: 	popq	%rbp
    00000113: 	popq	%r12
    00000115: 	popq	%r13
    00000117: 	popq	%r14
    00000119: 	popq	%r15
    0000011b: 	retq # Offset: 283
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp4496:
    00000120: 	movq	%r13, %rdi
    00000123: 	leaq	(,%rbp,8), %rdx
    0000012b: 	xorl	%esi, %esi
    0000012d: 	xorl	%r13d, %r13d
    00000130: 	callq	memset@PLT # Offset: 304
    00000135: 	jmp	.Ltmp4503 # Offset: 309
.Ltmp4497:
    0000013a: 	movq	$0x0, 0x30(%rdi)
    00000142: 	leaq	0x30(%rdi), %rcx
    00000146: 	jmp	.Ltmp4504 # Offset: 326
.Ltmp4498:
    0000014b: 	shrq	$0x3d, %rdx
    0000014f: 	je	.Ltmp4505 # Offset: 335
    00000151: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 337
.Ltmp4505:
    00000156: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 342
.Ltmp4502:
    0000015b: 	callq	__stack_chk_fail@PLT # Offset: 347
    00000160: 	endbr64
    00000164: 	movq	%rax, %r15
    00000167: 	movq	(%rsp), %rdi
.Ltmp4507:
    0000016b: 	testq	%rdi, %rdi
    0000016e: 	je	.Ltmp4506 # Offset: 366
    00000170: 	movq	(%rdi), %r12
    00000173: 	movl	$0x18, %esi
    00000178: 	callq	_ZdlPvm@PLT # Offset: 376
    0000017d: 	movq	%r12, %rdi
    00000180: 	jmp	.Ltmp4507 # Offset: 384
.Ltmp4506:
    00000182: 	movq	%r15, %rdi
    00000185: 	callq	__cxa_begin_catch@PLT # Offset: 389
    0000018a: 	testq	%r13, %r13
    0000018d: 	je	.Ltmp4508 # Offset: 397
    0000018f: 	movq	(%rbx), %rdi
    00000192: 	leaq	0x30(%rbx), %rax
    00000196: 	movq	0x8(%rbx), %rsi
    0000019a: 	cmpq	%rax, %rdi
    0000019d: 	je	.Ltmp4509 # Offset: 413
    0000019f: 	shlq	$0x3, %rsi
    000001a3: 	callq	_ZdlPvm@PLT # Offset: 419
.Ltmp4509:
    000001a8: 	movq	%r14, 0x28(%rbx)
    000001ac: 	movq	%r13, (%rbx)
    000001af: 	movq	%rbp, 0x8(%rbx)
.Ltmp4508:
    000001b3: 	movq	0x8(%rbx), %rax
    000001b7: 	movq	(%rbx), %rdi
    000001ba: 	xorl	%esi, %esi
    000001bc: 	leaq	(,%rax,8), %rdx
    000001c4: 	callq	memset@PLT # Offset: 452
    000001c9: 	callq	__cxa_rethrow@PLT # Offset: 457
    000001ce: 	endbr64
    000001d2: 	movq	%rax, %rbp
    000001d5: 	callq	__cxa_end_catch@PLT # Offset: 469
    000001da: 	movq	%rbp, %rdi
    000001dd: 	callq	_Unwind_Resume@PLT # Offset: 477
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE18_M_assign_elementsIRKSF_EEvOT_"

Binary Function "_Z19test_duplicate_coreISt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 273
  State       : disassembled
  Address     : 0x2d9e0
  Size        : 0x31b
  MaxSize     : 0x320
  Offset      : 0x2d9e0
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0272:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x4, %rsi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rdi, %r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x58, %rsp
    00000019: 	movq	%rdx, 0x28(%rsp)
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x48(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movabsq	$0x500000000, %rax
    0000003a: 	divq	%rsi
    0000003d: 	movq	%rax, (%rsp)
    00000041: 	cmpq	$0x3e8, %rax
    00000047: 	ja	.Ltmp4510 # Offset: 71
    0000004d: 	cmpq	$0x3, %rax
    00000051: 	ja	.Ltmp4511 # Offset: 81
    00000057: 	movq	$0x0, 0x40(%rsp)
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	movq	$0x4, (%rsp)
    0000006c: 	movaps	%xmm0, 0x30(%rsp)
.Ltmp4524:
    00000071: 	movq	(%rsp), %rbx
    00000075: 	leaq	0x30(%rsp), %rdi
    0000007a: 	movq	%rbx, %rsi
    0000007d: 	callq	_ZNSt6vectorIPSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 125
    00000082: 	movq	0x30(%rsp), %rcx
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movq	%rcx, 0x10(%rsp)
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp4512 # Offset: 148
    0000009a: 	addq	$0x8, %rcx
    0000009e: 	movl	%ebx, 0x1c(%rsp)
    000000a2: 	pxor	%xmm2, %xmm2
    000000a6: 	xorl	%r15d, %r15d
    000000a9: 	movq	%rcx, 0x20(%rsp)
    000000ae: 	movsd	%xmm2, 0x8(%rsp)
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp4520:
    000000b8: 	movslq	%eax, %rcx
    000000bb: 	movslq	%r15d, %rdx
    000000be: 	addq	(%rsp), %rdx
    000000c2: 	subl	%r15d, %eax
    000000c5: 	cmpq	%rcx, %rdx
    000000c8: 	cmovbl	0x1c(%rsp), %eax
    000000cd: 	movl	%eax, %ebx
    000000cf: 	callq	clock@PLT # Offset: 207
    000000d4: 	movq	0x10(%rsp), %r12
    000000d9: 	movq	0x20(%rsp), %rcx
    000000de: 	movq	%rax, start_time(%rip)
    000000e5: 	leal	-0x1(%rbx), %eax
    000000e8: 	movq	%r12, %rbp
    000000eb: 	leaq	(%rcx,%rax,8), %r13
    000000ef: 	nop # Size: 1
.Ltmp4514:
    000000f0: 	movl	$0x38, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	movq	%rax, %rbx
    000000fd: 	leaq	0x30(%rax), %rax
    00000101: 	movq	%rax, (%rbx)
    00000104: 	movq	$0x1, 0x8(%rbx)
    0000010c: 	movq	$0x0, 0x10(%rbx)
    00000114: 	movq	$0x0, 0x18(%rbx)
    0000011c: 	movl	$0x3f800000, 0x20(%rbx)
    00000123: 	movq	$0x0, 0x28(%rbx)
    0000012b: 	movq	$0x0, 0x30(%rbx)
    00000133: 	cmpq	%rbx, %r14
    00000136: 	je	.Ltmp4513 # Offset: 310
    00000138: 	movq	%r14, %rsi
    0000013b: 	movq	%rbx, %rdi
    0000013e: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEE18_M_assign_elementsIRKSF_EEvOT_ # Offset: 318
.Ltmp4513:
    00000143: 	movq	%rbx, (%r12)
    00000147: 	addq	$0x8, %r12
    0000014b: 	cmpq	%r13, %r12
    0000014e: 	jne	.Ltmp4514 # Offset: 334
    00000150: 	callq	clock@PLT # Offset: 336
    00000155: 	pxor	%xmm0, %xmm0
    00000159: 	movq	%rax, end_time(%rip)
    00000160: 	subq	start_time(%rip), %rax
    00000167: 	cvtsi2sd	%rax, %xmm0
    0000016c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000174: 	addsd	0x8(%rsp), %xmm0
    0000017a: 	movsd	%xmm0, 0x8(%rsp)
.Ltmp4519:
    00000180: 	movq	(%rbp), %r12
    00000184: 	testq	%r12, %r12
    00000187: 	je	.Ltmp4515 # Offset: 391
    00000189: 	movq	0x10(%r12), %rbx
    0000018e: 	testq	%rbx, %rbx
    00000191: 	je	.Ltmp4516 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4517:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	movq	(%rbx), %rbx
    0000019e: 	movl	$0x18, %esi
    000001a3: 	callq	_ZdlPvm@PLT # Offset: 419
    000001a8: 	testq	%rbx, %rbx
    000001ab: 	jne	.Ltmp4517 # Offset: 427
.Ltmp4516:
    000001ad: 	movq	0x8(%r12), %rax
    000001b2: 	movq	(%r12), %rdi
    000001b6: 	xorl	%esi, %esi
    000001b8: 	leaq	(,%rax,8), %rdx
    000001c0: 	callq	memset@PLT # Offset: 448
    000001c5: 	movq	(%r12), %rdi
    000001c9: 	leaq	0x30(%r12), %rax
    000001ce: 	movq	$0x0, 0x18(%r12)
    000001d7: 	movq	$0x0, 0x10(%r12)
    000001e0: 	movq	0x8(%r12), %rsi
    000001e5: 	cmpq	%rax, %rdi
    000001e8: 	je	.Ltmp4518 # Offset: 488
    000001ea: 	shlq	$0x3, %rsi
    000001ee: 	callq	_ZdlPvm@PLT # Offset: 494
.Ltmp4518:
    000001f3: 	movl	$0x38, %esi
    000001f8: 	movq	%r12, %rdi
    000001fb: 	callq	_ZdlPvm@PLT # Offset: 507
.Ltmp4515:
    00000200: 	movq	$0x0, (%rbp)
    00000208: 	addq	$0x8, %rbp
    0000020c: 	cmpq	%rbp, %r13
    0000020f: 	jne	.Ltmp4519 # Offset: 527
    00000215: 	movl	iterations(%rip), %eax
    0000021b: 	addl	(%rsp), %r15d
    0000021f: 	cmpl	%r15d, %eax
    00000222: 	jg	.Ltmp4520 # Offset: 546
.Ltmp4526:
    00000228: 	movq	0x28(%rsp), %rdi
    0000022d: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 557
    00000232: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000239: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000240: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000247: 	je	.Ltmp4521 # Offset: 583
.Ltmp4525:
    0000024d: 	movq	-0x20(%rax), %rdi
    00000251: 	movsd	0x8(%rsp), %xmm0
    00000257: 	callq	_Z13record_resultdPKc # Offset: 599
    0000025c: 	cmpq	$0x0, 0x10(%rsp)
    00000262: 	je	.Ltmp4522 # Offset: 610
    00000264: 	movq	0x48(%rsp), %rax
    00000269: 	subq	%fs:0x28, %rax
    00000272: 	jne	.Ltmp4523 # Offset: 626
    00000274: 	movq	0x40(%rsp), %rsi
    00000279: 	movq	0x10(%rsp), %rdi
    0000027e: 	addq	$0x58, %rsp
    00000282: 	popq	%rbx
    00000283: 	popq	%rbp
    00000284: 	subq	%rdi, %rsi
    00000287: 	popq	%r12
    00000289: 	popq	%r13
    0000028b: 	popq	%r14
    0000028d: 	popq	%r15
    0000028f: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 655
.Ltmp4522:
    00000294: 	movq	0x48(%rsp), %rax
    00000299: 	subq	%fs:0x28, %rax
    000002a2: 	jne	.Ltmp4523 # Offset: 674
    000002a4: 	addq	$0x58, %rsp
    000002a8: 	popq	%rbx
    000002a9: 	popq	%rbp
    000002aa: 	popq	%r12
    000002ac: 	popq	%r13
    000002ae: 	popq	%r14
    000002b0: 	popq	%r15
    000002b2: 	retq # Offset: 690
.Ltmp4510:
    000002b3: 	movq	$0x3e8, (%rsp)
.Ltmp4511:
    000002bb: 	movq	$0x0, 0x40(%rsp)
    000002c4: 	pxor	%xmm0, %xmm0
    000002c8: 	movaps	%xmm0, 0x30(%rsp)
    000002cd: 	jmp	.Ltmp4524 # Offset: 717
.Ltmp4521:
    000002d2: 	movq	-0x8(%rdx), %rax
    000002d6: 	addq	$0x200, %rax
    000002dc: 	jmp	.Ltmp4525 # Offset: 732
.Ltmp4512:
    000002e1: 	pxor	%xmm3, %xmm3
    000002e5: 	movsd	%xmm3, 0x8(%rsp)
    000002eb: 	jmp	.Ltmp4526 # Offset: 747
.Ltmp4523:
    000002f0: 	callq	__stack_chk_fail@PLT # Offset: 752
    000002f5: 	endbr64
    000002f9: 	movq	%rax, %rbp
    000002fc: 	movq	0x30(%rsp), %rdi
    00000301: 	movq	0x40(%rsp), %rsi
    00000306: 	subq	%rdi, %rsi
    00000309: 	testq	%rdi, %rdi
    0000030c: 	je	.Ltmp4527 # Offset: 780
    0000030e: 	callq	_ZdlPvm@PLT # Offset: 782
.Ltmp4527:
    00000313: 	movq	%rbp, %rdi
    00000316: 	callq	_Unwind_Resume@PLT # Offset: 790
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE9_M_assignIRKSF_NS4_17_ReuseOrAllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_" after disassembly {
  Number      : 274
  State       : disassembled
  Address     : 0x2dd00
  Size        : 0x30d
  MaxSize     : 0x310
  Offset      : 0x2dd00
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE9_M_assignIRKSF_NS4_17_ReuseOrAllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0273:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rsi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cmpq	$0x0, (%rdi)
    0000002f: 	movq	$0x0, 0x8(%rsp)
    00000038: 	je	.Ltmp4528 # Offset: 56
.Ltmp4543:
    0000003e: 	movq	0x10(%rbx), %rbx
    00000042: 	testq	%rbx, %rbx
    00000045: 	je	.Ltmp4529 # Offset: 69
    0000004b: 	movq	(%r13), %r12
    0000004f: 	testq	%r12, %r12
    00000052: 	je	.Ltmp4530 # Offset: 82
    00000058: 	movq	(%r12), %rax
    0000005c: 	movdqu	0x8(%rbx), %xmm4
    00000061: 	movq	%rax, (%r13)
    00000065: 	movq	$0x0, (%r12)
    0000006d: 	movups	%xmm4, 0x8(%r12)
.Ltmp4544:
    00000073: 	pxor	%xmm5, %xmm5
    00000077: 	movq	(%rbp), %r14
    0000007b: 	movq	0x8(%rbp), %rcx
    0000007f: 	movq	%r12, 0x10(%rbp)
    00000083: 	movsd	0x8(%r12), %xmm0
    0000008a: 	ucomisd	%xmm5, %xmm0
    0000008e: 	movsd	%xmm0, 0x10(%rsp)
    00000094: 	jp	.Ltmp4531 # Offset: 148
    0000009a: 	jne	.Ltmp4531 # Offset: 154
.Ltmp4545:
    000000a0: 	leaq	0x10(%rbp), %rax
    000000a4: 	movq	%rax, (%r14)
    000000a7: 	movq	(%rbx), %rbx
    000000aa: 	testq	%rbx, %rbx
    000000ad: 	je	.Ltmp4529 # Offset: 173
    000000b3: 	movl	$0xc70f6907, %r14d
    000000b9: 	jmp	.Ltmp4532 # Offset: 185
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4536:
    000000c0: 	addq	(%rbp), %rdx
    000000c4: 	cmpq	$0x0, (%rdx)
    000000c8: 	je	.Ltmp4533 # Offset: 200
.Ltmp4537:
    000000ce: 	movq	(%rbx), %rbx
    000000d1: 	testq	%rbx, %rbx
    000000d4: 	je	.Ltmp4529 # Offset: 212
.Ltmp4538:
    000000da: 	movq	%r15, %r12
.Ltmp4532:
    000000dd: 	movq	(%r13), %r15
    000000e1: 	testq	%r15, %r15
    000000e4: 	je	.Ltmp4534 # Offset: 228
    000000ea: 	movq	(%r15), %rax
    000000ed: 	movdqu	0x8(%rbx), %xmm2
    000000f2: 	movq	%rax, (%r13)
    000000f6: 	movq	$0x0, (%r15)
    000000fd: 	movups	%xmm2, 0x8(%r15)
.Ltmp4540:
    00000102: 	movsd	0x8(%r15), %xmm0
    00000108: 	pxor	%xmm1, %xmm1
    0000010c: 	movq	0x8(%rbp), %r8
    00000110: 	movq	%r15, (%r12)
    00000114: 	ucomisd	%xmm1, %xmm0
    00000118: 	movsd	%xmm0, 0x10(%rsp)
    0000011e: 	jp	.Ltmp4535 # Offset: 286
    00000120: 	movl	$0x0, %edx
    00000125: 	je	.Ltmp4536 # Offset: 293
.Ltmp4535:
    00000127: 	movq	%r14, %rdx
    0000012a: 	leaq	0x10(%rsp), %rdi
    0000012f: 	movl	$0x8, %esi
    00000134: 	movq	%r8, (%rsp)
    00000138: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 312
    0000013d: 	movq	(%rsp), %r8
    00000141: 	xorl	%edx, %edx
    00000143: 	divq	%r8
    00000146: 	shlq	$0x3, %rdx
    0000014a: 	addq	(%rbp), %rdx
    0000014e: 	cmpq	$0x0, (%rdx)
    00000152: 	jne	.Ltmp4537 # Offset: 338
.Ltmp4533:
    00000158: 	movq	%r12, (%rdx)
    0000015b: 	movq	(%rbx), %rbx
    0000015e: 	testq	%rbx, %rbx
    00000161: 	jne	.Ltmp4538 # Offset: 353
.Ltmp4529:
    00000167: 	movq	0x18(%rsp), %rax
    0000016c: 	subq	%fs:0x28, %rax
    00000175: 	jne	.Ltmp4539 # Offset: 373
    0000017b: 	addq	$0x28, %rsp
    0000017f: 	popq	%rbx
    00000180: 	popq	%rbp
    00000181: 	popq	%r12
    00000183: 	popq	%r13
    00000185: 	popq	%r14
    00000187: 	popq	%r15
    00000189: 	retq # Offset: 393
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4534:
    00000190: 	movl	$0x18, %edi
    00000195: 	callq	_Znwm@PLT # Offset: 405
    0000019a: 	movdqu	0x8(%rbx), %xmm3
    0000019f: 	movq	$0x0, (%rax)
    000001a6: 	movq	%rax, %r15
    000001a9: 	movups	%xmm3, 0x8(%rax)
    000001ad: 	jmp	.Ltmp4540 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4528:
    000001b8: 	movq	0x8(%rdi), %rdx
    000001bc: 	cmpq	$0x1, %rdx
    000001c0: 	je	.Ltmp4541 # Offset: 448
    000001c6: 	movq	%rdx, %rax
    000001c9: 	shrq	$0x3c, %rax
    000001cd: 	jne	.Ltmp4542 # Offset: 461
    000001d3: 	leaq	(,%rdx,8), %r12
    000001db: 	movq	%r12, %rdi
    000001de: 	callq	_Znwm@PLT # Offset: 478
    000001e3: 	movq	%r12, %rdx
    000001e6: 	xorl	%esi, %esi
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	%rax, 0x8(%rsp)
    000001f0: 	callq	memset@PLT # Offset: 496
.Ltmp4546:
    000001f5: 	movq	0x8(%rsp), %rax
    000001fa: 	movq	%rax, (%rbp)
    000001fe: 	jmp	.Ltmp4543 # Offset: 510
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4530:
    00000208: 	movl	$0x18, %edi
    0000020d: 	callq	_Znwm@PLT # Offset: 525
    00000212: 	movdqu	0x8(%rbx), %xmm6
    00000217: 	movq	$0x0, (%rax)
    0000021e: 	movq	%rax, %r12
    00000221: 	movups	%xmm6, 0x8(%rax)
    00000225: 	jmp	.Ltmp4544 # Offset: 549
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4531:
    00000230: 	movl	$0xc70f6907, %edx
    00000235: 	leaq	0x10(%rsp), %rdi
    0000023a: 	movl	$0x8, %esi
    0000023f: 	movq	%rcx, (%rsp)
    00000243: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 579
    00000248: 	movq	(%rsp), %rcx
    0000024c: 	xorl	%edx, %edx
    0000024e: 	divq	%rcx
    00000251: 	leaq	(%r14,%rdx,8), %r14
    00000255: 	jmp	.Ltmp4545 # Offset: 597
.Ltmp4541:
    0000025a: 	leaq	0x30(%rdi), %rax
    0000025e: 	movq	$0x0, 0x30(%rdi)
    00000266: 	movq	%rax, 0x8(%rsp)
    0000026b: 	jmp	.Ltmp4546 # Offset: 619
.Ltmp4542:
    0000026d: 	shrq	$0x3d, %rdx
    00000271: 	je	.Ltmp4547 # Offset: 625
    00000273: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 627
.Ltmp4547:
    00000278: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 632
.Ltmp4539:
    0000027d: 	callq	__stack_chk_fail@PLT # Offset: 637
    00000282: 	endbr64
    00000286: 	movq	%rax, %rdi
    00000289: 	callq	__cxa_begin_catch@PLT # Offset: 649
    0000028e: 	movq	0x10(%rbp), %rdi
.Ltmp4549:
    00000292: 	testq	%rdi, %rdi
    00000295: 	je	.Ltmp4548 # Offset: 661
    00000297: 	movq	(%rdi), %rbx
    0000029a: 	movl	$0x18, %esi
    0000029f: 	callq	_ZdlPvm@PLT # Offset: 671
    000002a4: 	movq	%rbx, %rdi
    000002a7: 	jmp	.Ltmp4549 # Offset: 679
.Ltmp4548:
    000002a9: 	movq	0x8(%rbp), %rax
    000002ad: 	movq	(%rbp), %rdi
    000002b1: 	xorl	%esi, %esi
    000002b3: 	leaq	(,%rax,8), %rdx
    000002bb: 	callq	memset@PLT # Offset: 699
    000002c0: 	cmpq	$0x0, 0x8(%rsp)
    000002c6: 	movq	$0x0, 0x18(%rbp)
    000002ce: 	movq	$0x0, 0x10(%rbp)
    000002d6: 	je	.Ltmp4550 # Offset: 726
    000002d8: 	movq	(%rbp), %rdi
    000002dc: 	movq	0x8(%rbp), %rsi
    000002e0: 	addq	$0x30, %rbp
    000002e4: 	cmpq	%rbp, %rdi
    000002e7: 	jne	.Ltmp4551 # Offset: 743
.Ltmp4550:
    000002e9: 	callq	__cxa_rethrow@PLT # Offset: 745
.Ltmp4551:
    000002ee: 	shlq	$0x3, %rsi
    000002f2: 	callq	_ZdlPvm@PLT # Offset: 754
    000002f7: 	jmp	.Ltmp4550 # Offset: 759
    000002f9: 	endbr64
    000002fd: 	movq	%rax, %rbp
    00000300: 	callq	__cxa_end_catch@PLT # Offset: 768
    00000305: 	movq	%rbp, %rdi
    00000308: 	callq	_Unwind_Resume@PLT # Offset: 776
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE9_M_assignIRKSF_NS4_17_ReuseOrAllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_"

Binary Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE18_M_assign_elementsIRKSF_EEvOT_" after disassembly {
  Number      : 275
  State       : disassembled
  Address     : 0x2e010
  Size        : 0x1e2
  MaxSize     : 0x1f0
  Offset      : 0x2e010
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE18_M_assign_elementsIRKSF_EEvOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0274:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	0x8(%rdi), %rbp
    0000001c: 	movq	0x8(%rsi), %rdx
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x18(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movq	0x28(%rdi), %r14
    00000034: 	movq	(%rdi), %r13
    00000037: 	cmpq	%rbp, %rdx
    0000003a: 	je	.Ltmp4552 # Offset: 58
    00000040: 	cmpq	$0x1, %rdx
    00000044: 	je	.Ltmp4553 # Offset: 68
    0000004a: 	movq	%rdx, %rax
    0000004d: 	shrq	$0x3c, %rax
    00000051: 	jne	.Ltmp4554 # Offset: 81
    00000057: 	leaq	(,%rdx,8), %r12
    0000005f: 	movq	%r12, %rdi
    00000062: 	callq	_Znwm@PLT # Offset: 98
    00000067: 	movq	%r12, %rdx
    0000006a: 	xorl	%esi, %esi
    0000006c: 	movq	%rax, %rdi
    0000006f: 	callq	memset@PLT # Offset: 111
    00000074: 	movq	0x8(%r15), %rdx
    00000078: 	movq	%rax, %rcx
.Ltmp4560:
    0000007b: 	movq	%rcx, (%rbx)
    0000007e: 	movq	%rdx, 0x8(%rbx)
.Ltmp4559:
    00000082: 	movq	0x18(%r15), %rax
    00000086: 	movdqu	0x20(%r15), %xmm1
    0000008c: 	movq	%rsp, %rdx
    0000008f: 	movq	%r15, %rsi
    00000092: 	movq	0x10(%rbx), %xmm0
    00000097: 	movq	%rbx, %xmm2
    0000009c: 	movq	%rbx, %rdi
    0000009f: 	movq	$0x0, 0x10(%rbx)
    000000a7: 	movq	%rax, 0x18(%rbx)
    000000ab: 	punpcklqdq	%xmm2, %xmm0
    000000af: 	movups	%xmm1, 0x20(%rbx)
    000000b3: 	movaps	%xmm0, (%rsp)
    000000b7: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE9_M_assignIRKSF_NS4_17_ReuseOrAllocNodeISaINS4_10_Hash_nodeIS2_Lb0EEEEEEEEvOT_RKT0_ # Offset: 183
    000000bc: 	testq	%r13, %r13
    000000bf: 	je	.Ltmp4555 # Offset: 191
    000000c1: 	addq	$0x30, %rbx
    000000c5: 	cmpq	%rbx, %r13
    000000c8: 	je	.Ltmp4555 # Offset: 200
    000000ca: 	leaq	(,%rbp,8), %rsi
    000000d2: 	movq	%r13, %rdi
    000000d5: 	callq	_ZdlPvm@PLT # Offset: 213
.Ltmp4555:
    000000da: 	movq	(%rsp), %rbx
    000000de: 	testq	%rbx, %rbx
    000000e1: 	je	.Ltmp4556 # Offset: 225
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4557:
    000000e8: 	movq	%rbx, %rdi
    000000eb: 	movq	(%rbx), %rbx
    000000ee: 	movl	$0x18, %esi
    000000f3: 	callq	_ZdlPvm@PLT # Offset: 243
    000000f8: 	testq	%rbx, %rbx
    000000fb: 	jne	.Ltmp4557 # Offset: 251
.Ltmp4556:
    000000fd: 	movq	0x18(%rsp), %rax
    00000102: 	subq	%fs:0x28, %rax
    0000010b: 	jne	.Ltmp4558 # Offset: 267
    0000010d: 	addq	$0x28, %rsp
    00000111: 	popq	%rbx
    00000112: 	popq	%rbp
    00000113: 	popq	%r12
    00000115: 	popq	%r13
    00000117: 	popq	%r14
    00000119: 	popq	%r15
    0000011b: 	retq # Offset: 283
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp4552:
    00000120: 	movq	%r13, %rdi
    00000123: 	leaq	(,%rbp,8), %rdx
    0000012b: 	xorl	%esi, %esi
    0000012d: 	xorl	%r13d, %r13d
    00000130: 	callq	memset@PLT # Offset: 304
    00000135: 	jmp	.Ltmp4559 # Offset: 309
.Ltmp4553:
    0000013a: 	movq	$0x0, 0x30(%rdi)
    00000142: 	leaq	0x30(%rdi), %rcx
    00000146: 	jmp	.Ltmp4560 # Offset: 326
.Ltmp4554:
    0000014b: 	shrq	$0x3d, %rdx
    0000014f: 	je	.Ltmp4561 # Offset: 335
    00000151: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 337
.Ltmp4561:
    00000156: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 342
.Ltmp4558:
    0000015b: 	callq	__stack_chk_fail@PLT # Offset: 347
    00000160: 	endbr64
    00000164: 	movq	%rax, %r15
    00000167: 	movq	(%rsp), %rdi
.Ltmp4563:
    0000016b: 	testq	%rdi, %rdi
    0000016e: 	je	.Ltmp4562 # Offset: 366
    00000170: 	movq	(%rdi), %r12
    00000173: 	movl	$0x18, %esi
    00000178: 	callq	_ZdlPvm@PLT # Offset: 376
    0000017d: 	movq	%r12, %rdi
    00000180: 	jmp	.Ltmp4563 # Offset: 384
.Ltmp4562:
    00000182: 	movq	%r15, %rdi
    00000185: 	callq	__cxa_begin_catch@PLT # Offset: 389
    0000018a: 	testq	%r13, %r13
    0000018d: 	je	.Ltmp4564 # Offset: 397
    0000018f: 	movq	(%rbx), %rdi
    00000192: 	leaq	0x30(%rbx), %rax
    00000196: 	movq	0x8(%rbx), %rsi
    0000019a: 	cmpq	%rax, %rdi
    0000019d: 	je	.Ltmp4565 # Offset: 413
    0000019f: 	shlq	$0x3, %rsi
    000001a3: 	callq	_ZdlPvm@PLT # Offset: 419
.Ltmp4565:
    000001a8: 	movq	%r14, 0x28(%rbx)
    000001ac: 	movq	%r13, (%rbx)
    000001af: 	movq	%rbp, 0x8(%rbx)
.Ltmp4564:
    000001b3: 	movq	0x8(%rbx), %rax
    000001b7: 	movq	(%rbx), %rdi
    000001ba: 	xorl	%esi, %esi
    000001bc: 	leaq	(,%rax,8), %rdx
    000001c4: 	callq	memset@PLT # Offset: 452
    000001c9: 	callq	__cxa_rethrow@PLT # Offset: 457
    000001ce: 	endbr64
    000001d2: 	movq	%rax, %rbp
    000001d5: 	callq	__cxa_end_catch@PLT # Offset: 469
    000001da: 	movq	%rbp, %rdi
    000001dd: 	callq	_Unwind_Resume@PLT # Offset: 477
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE18_M_assign_elementsIRKSF_EEvOT_"

Binary Function "_Z19test_duplicate_coreISt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 276
  State       : disassembled
  Address     : 0x2e200
  Size        : 0x31b
  MaxSize     : 0x320
  Offset      : 0x2e200
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0275:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x4, %rsi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rdi, %r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x58, %rsp
    00000019: 	movq	%rdx, 0x28(%rsp)
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x48(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movabsq	$0x500000000, %rax
    0000003a: 	divq	%rsi
    0000003d: 	movq	%rax, (%rsp)
    00000041: 	cmpq	$0x3e8, %rax
    00000047: 	ja	.Ltmp4566 # Offset: 71
    0000004d: 	cmpq	$0x3, %rax
    00000051: 	ja	.Ltmp4567 # Offset: 81
    00000057: 	movq	$0x0, 0x40(%rsp)
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	movq	$0x4, (%rsp)
    0000006c: 	movaps	%xmm0, 0x30(%rsp)
.Ltmp4580:
    00000071: 	movq	(%rsp), %rbx
    00000075: 	leaq	0x30(%rsp), %rdi
    0000007a: 	movq	%rbx, %rsi
    0000007d: 	callq	_ZNSt6vectorIPSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEESaISA_EE17_M_default_appendEm # Offset: 125
    00000082: 	movq	0x30(%rsp), %rcx
    00000087: 	movl	iterations(%rip), %eax
    0000008d: 	movq	%rcx, 0x10(%rsp)
    00000092: 	testl	%eax, %eax
    00000094: 	jle	.Ltmp4568 # Offset: 148
    0000009a: 	addq	$0x8, %rcx
    0000009e: 	movl	%ebx, 0x1c(%rsp)
    000000a2: 	pxor	%xmm2, %xmm2
    000000a6: 	xorl	%r15d, %r15d
    000000a9: 	movq	%rcx, 0x20(%rsp)
    000000ae: 	movsd	%xmm2, 0x8(%rsp)
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp4576:
    000000b8: 	movslq	%eax, %rcx
    000000bb: 	movslq	%r15d, %rdx
    000000be: 	addq	(%rsp), %rdx
    000000c2: 	subl	%r15d, %eax
    000000c5: 	cmpq	%rcx, %rdx
    000000c8: 	cmovbl	0x1c(%rsp), %eax
    000000cd: 	movl	%eax, %ebx
    000000cf: 	callq	clock@PLT # Offset: 207
    000000d4: 	movq	0x10(%rsp), %r12
    000000d9: 	movq	0x20(%rsp), %rcx
    000000de: 	movq	%rax, start_time(%rip)
    000000e5: 	leal	-0x1(%rbx), %eax
    000000e8: 	movq	%r12, %rbp
    000000eb: 	leaq	(%rcx,%rax,8), %r13
    000000ef: 	nop # Size: 1
.Ltmp4570:
    000000f0: 	movl	$0x38, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	movq	%rax, %rbx
    000000fd: 	leaq	0x30(%rax), %rax
    00000101: 	movq	%rax, (%rbx)
    00000104: 	movq	$0x1, 0x8(%rbx)
    0000010c: 	movq	$0x0, 0x10(%rbx)
    00000114: 	movq	$0x0, 0x18(%rbx)
    0000011c: 	movl	$0x3f800000, 0x20(%rbx)
    00000123: 	movq	$0x0, 0x28(%rbx)
    0000012b: 	movq	$0x0, 0x30(%rbx)
    00000133: 	cmpq	%rbx, %r14
    00000136: 	je	.Ltmp4569 # Offset: 310
    00000138: 	movq	%r14, %rsi
    0000013b: 	movq	%rbx, %rdi
    0000013e: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE18_M_assign_elementsIRKSF_EEvOT_ # Offset: 318
.Ltmp4569:
    00000143: 	movq	%rbx, (%r12)
    00000147: 	addq	$0x8, %r12
    0000014b: 	cmpq	%r13, %r12
    0000014e: 	jne	.Ltmp4570 # Offset: 334
    00000150: 	callq	clock@PLT # Offset: 336
    00000155: 	pxor	%xmm0, %xmm0
    00000159: 	movq	%rax, end_time(%rip)
    00000160: 	subq	start_time(%rip), %rax
    00000167: 	cvtsi2sd	%rax, %xmm0
    0000016c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000174: 	addsd	0x8(%rsp), %xmm0
    0000017a: 	movsd	%xmm0, 0x8(%rsp)
.Ltmp4575:
    00000180: 	movq	(%rbp), %r12
    00000184: 	testq	%r12, %r12
    00000187: 	je	.Ltmp4571 # Offset: 391
    00000189: 	movq	0x10(%r12), %rbx
    0000018e: 	testq	%rbx, %rbx
    00000191: 	je	.Ltmp4572 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4573:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	movq	(%rbx), %rbx
    0000019e: 	movl	$0x18, %esi
    000001a3: 	callq	_ZdlPvm@PLT # Offset: 419
    000001a8: 	testq	%rbx, %rbx
    000001ab: 	jne	.Ltmp4573 # Offset: 427
.Ltmp4572:
    000001ad: 	movq	0x8(%r12), %rax
    000001b2: 	movq	(%r12), %rdi
    000001b6: 	xorl	%esi, %esi
    000001b8: 	leaq	(,%rax,8), %rdx
    000001c0: 	callq	memset@PLT # Offset: 448
    000001c5: 	movq	(%r12), %rdi
    000001c9: 	leaq	0x30(%r12), %rax
    000001ce: 	movq	$0x0, 0x18(%r12)
    000001d7: 	movq	$0x0, 0x10(%r12)
    000001e0: 	movq	0x8(%r12), %rsi
    000001e5: 	cmpq	%rax, %rdi
    000001e8: 	je	.Ltmp4574 # Offset: 488
    000001ea: 	shlq	$0x3, %rsi
    000001ee: 	callq	_ZdlPvm@PLT # Offset: 494
.Ltmp4574:
    000001f3: 	movl	$0x38, %esi
    000001f8: 	movq	%r12, %rdi
    000001fb: 	callq	_ZdlPvm@PLT # Offset: 507
.Ltmp4571:
    00000200: 	movq	$0x0, (%rbp)
    00000208: 	addq	$0x8, %rbp
    0000020c: 	cmpq	%rbp, %r13
    0000020f: 	jne	.Ltmp4575 # Offset: 527
    00000215: 	movl	iterations(%rip), %eax
    0000021b: 	addl	(%rsp), %r15d
    0000021f: 	cmpl	%r15d, %eax
    00000222: 	jg	.Ltmp4576 # Offset: 546
.Ltmp4582:
    00000228: 	movq	0x28(%rsp), %rdi
    0000022d: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 557
    00000232: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000239: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000240: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000247: 	je	.Ltmp4577 # Offset: 583
.Ltmp4581:
    0000024d: 	movq	-0x20(%rax), %rdi
    00000251: 	movsd	0x8(%rsp), %xmm0
    00000257: 	callq	_Z13record_resultdPKc # Offset: 599
    0000025c: 	cmpq	$0x0, 0x10(%rsp)
    00000262: 	je	.Ltmp4578 # Offset: 610
    00000264: 	movq	0x48(%rsp), %rax
    00000269: 	subq	%fs:0x28, %rax
    00000272: 	jne	.Ltmp4579 # Offset: 626
    00000274: 	movq	0x40(%rsp), %rsi
    00000279: 	movq	0x10(%rsp), %rdi
    0000027e: 	addq	$0x58, %rsp
    00000282: 	popq	%rbx
    00000283: 	popq	%rbp
    00000284: 	subq	%rdi, %rsi
    00000287: 	popq	%r12
    00000289: 	popq	%r13
    0000028b: 	popq	%r14
    0000028d: 	popq	%r15
    0000028f: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 655
.Ltmp4578:
    00000294: 	movq	0x48(%rsp), %rax
    00000299: 	subq	%fs:0x28, %rax
    000002a2: 	jne	.Ltmp4579 # Offset: 674
    000002a4: 	addq	$0x58, %rsp
    000002a8: 	popq	%rbx
    000002a9: 	popq	%rbp
    000002aa: 	popq	%r12
    000002ac: 	popq	%r13
    000002ae: 	popq	%r14
    000002b0: 	popq	%r15
    000002b2: 	retq # Offset: 690
.Ltmp4566:
    000002b3: 	movq	$0x3e8, (%rsp)
.Ltmp4567:
    000002bb: 	movq	$0x0, 0x40(%rsp)
    000002c4: 	pxor	%xmm0, %xmm0
    000002c8: 	movaps	%xmm0, 0x30(%rsp)
    000002cd: 	jmp	.Ltmp4580 # Offset: 717
.Ltmp4577:
    000002d2: 	movq	-0x8(%rdx), %rax
    000002d6: 	addq	$0x200, %rax
    000002dc: 	jmp	.Ltmp4581 # Offset: 732
.Ltmp4568:
    000002e1: 	pxor	%xmm3, %xmm3
    000002e5: 	movsd	%xmm3, 0x8(%rsp)
    000002eb: 	jmp	.Ltmp4582 # Offset: 747
.Ltmp4579:
    000002f0: 	callq	__stack_chk_fail@PLT # Offset: 752
    000002f5: 	endbr64
    000002f9: 	movq	%rax, %rbp
    000002fc: 	movq	0x30(%rsp), %rdi
    00000301: 	movq	0x40(%rsp), %rsi
    00000306: 	subq	%rdi, %rsi
    00000309: 	testq	%rdi, %rdi
    0000030c: 	je	.Ltmp4583 # Offset: 780
    0000030e: 	callq	_ZdlPvm@PLT # Offset: 782
.Ltmp4583:
    00000313: 	movq	%rbp, %rdi
    00000316: 	callq	_Unwind_Resume@PLT # Offset: 790
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_rehashEmRKm" after disassembly {
  Number      : 277
  State       : disassembled
  Address     : 0x2e520
  Size        : 0x1e2
  MaxSize     : 0x1f0
  Offset      : 0x2e520
  Section     : .text
  Orc Section : .local.text._ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_rehashEmRKm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0276:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x18(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	cmpq	$0x1, %rsi
    0000002c: 	je	.Ltmp4584 # Offset: 44
    00000032: 	movq	%rsi, %rax
    00000035: 	movq	%rdx, %rbx
    00000038: 	shrq	$0x3c, %rax
    0000003c: 	jne	.Ltmp4585 # Offset: 60
    00000042: 	leaq	(,%rsi,8), %r14
    0000004a: 	movq	%r14, %rdi
    0000004d: 	callq	_Znwm@PLT # Offset: 77
    00000052: 	movq	%r14, %rdx
    00000055: 	xorl	%esi, %esi
    00000057: 	movq	%rax, %rdi
    0000005a: 	movq	%rax, %r15
    0000005d: 	callq	memset@PLT # Offset: 93
    00000062: 	leaq	0x30(%r12), %rax
    00000067: 	movq	%rax, 0x8(%rsp)
.Ltmp4595:
    0000006c: 	movq	0x10(%r12), %rbp
    00000071: 	pxor	%xmm1, %xmm1
    00000075: 	movq	$0x0, 0x10(%r12)
    0000007e: 	movl	$0xc70f6907, %r14d
    00000084: 	movq	$0x0, (%rsp)
.Ltmp4594:
    0000008c: 	testq	%rbp, %rbp
    0000008f: 	je	.Ltmp4586 # Offset: 143
.Ltmp4589:
    00000091: 	movq	%rbp, %rbx
    00000094: 	movq	(%rbp), %rbp
    00000098: 	movsd	0x8(%rbx), %xmm0
    0000009d: 	ucomisd	%xmm1, %xmm0
    000000a1: 	movsd	%xmm0, 0x10(%rsp)
    000000a7: 	jp	.Ltmp4587 # Offset: 167
    000000a9: 	movq	%r15, %rax
    000000ac: 	movl	$0x0, %edx
    000000b1: 	jne	.Ltmp4587 # Offset: 177
    000000b3: 	movq	(%rax), %rcx
    000000b6: 	testq	%rcx, %rcx
    000000b9: 	je	.Ltmp4588 # Offset: 185
.Ltmp4592:
    000000bf: 	movq	(%rcx), %rdx
    000000c2: 	movq	%rdx, (%rbx)
    000000c5: 	movq	(%rax), %rax
    000000c8: 	movq	%rbx, (%rax)
    000000cb: 	testq	%rbp, %rbp
    000000ce: 	jne	.Ltmp4589 # Offset: 206
.Ltmp4586:
    000000d0: 	movq	0x8(%r12), %rsi
    000000d5: 	movq	(%r12), %rdi
    000000d9: 	cmpq	0x8(%rsp), %rdi
    000000de: 	je	.Ltmp4590 # Offset: 222
    000000e0: 	shlq	$0x3, %rsi
    000000e4: 	callq	_ZdlPvm@PLT # Offset: 228
.Ltmp4590:
    000000e9: 	movq	%r13, 0x8(%r12)
    000000ee: 	movq	%r15, (%r12)
    000000f2: 	movq	0x18(%rsp), %rax
    000000f7: 	subq	%fs:0x28, %rax
    00000100: 	jne	.Ltmp4591 # Offset: 256
    00000106: 	addq	$0x28, %rsp
    0000010a: 	popq	%rbx
    0000010b: 	popq	%rbp
    0000010c: 	popq	%r12
    0000010e: 	popq	%r13
    00000110: 	popq	%r14
    00000112: 	popq	%r15
    00000114: 	retq # Offset: 276
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp4587:
    00000118: 	movq	%r14, %rdx
    0000011b: 	leaq	0x10(%rsp), %rdi
    00000120: 	movl	$0x8, %esi
    00000125: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 293
    0000012a: 	xorl	%edx, %edx
    0000012c: 	pxor	%xmm1, %xmm1
    00000130: 	divq	%r13
    00000133: 	leaq	(%r15,%rdx,8), %rax
    00000137: 	movq	(%rax), %rcx
    0000013a: 	testq	%rcx, %rcx
    0000013d: 	jne	.Ltmp4592 # Offset: 317
.Ltmp4588:
    00000143: 	movq	0x10(%r12), %rcx
    00000148: 	movq	%rcx, (%rbx)
    0000014b: 	leaq	0x10(%r12), %rcx
    00000150: 	movq	%rbx, 0x10(%r12)
    00000155: 	movq	%rcx, (%rax)
    00000158: 	cmpq	$0x0, (%rbx)
    0000015c: 	je	.Ltmp4593 # Offset: 348
    0000015e: 	movq	(%rsp), %rax
    00000162: 	movq	%rdx, (%rsp)
    00000166: 	movq	%rbx, (%r15,%rax,8)
    0000016a: 	jmp	.Ltmp4594 # Offset: 362
    0000016f: 	nop # Size: 1
.Ltmp4593:
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	jmp	.Ltmp4594 # Offset: 372
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp4584:
    00000180: 	leaq	0x30(%rdi), %r15
    00000184: 	movq	$0x0, 0x30(%rdi)
    0000018c: 	movq	%r15, 0x8(%rsp)
    00000191: 	jmp	.Ltmp4595 # Offset: 401
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4585:
    000001a0: 	shrq	$0x3d, %r13
    000001a4: 	je	.Ltmp4596 # Offset: 420
    000001a6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 422
.Ltmp4596:
    000001ab: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 427
.Ltmp4591:
    000001b0: 	callq	__stack_chk_fail@PLT # Offset: 432
    000001b5: 	endbr64
    000001b9: 	movq	%rax, %rdi
    000001bc: 	callq	__cxa_begin_catch@PLT # Offset: 444
    000001c1: 	movq	(%rbx), %rax
    000001c4: 	movq	%rax, 0x28(%r12)
    000001c9: 	callq	__cxa_rethrow@PLT # Offset: 457
    000001ce: 	endbr64
    000001d2: 	movq	%rax, %rbp
    000001d5: 	callq	__cxa_end_catch@PLT # Offset: 469
    000001da: 	movq	%rbp, %rdi
    000001dd: 	callq	_Unwind_Resume@PLT # Offset: 477
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_rehashEmRKm"

Binary Function "_Z14test_find_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 278
  State       : disassembled
  Address     : 0x2e710
  Size        : 0x3bd
  MaxSize     : 0x3c0
  Offset      : 0x2e710
  Section     : .text
  Orc Section : .local.text._Z14test_find_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0277:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rcx, %rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	%rdx, 0x28(%rsp)
    0000001d: 	movq	%r8, 0x30(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x88(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	leaq	0x80(%rsp), %rax
    0000003d: 	movq	$0x1, 0x58(%rsp)
    00000046: 	movq	%rax, 0x38(%rsp)
    0000004b: 	movq	%rax, 0x50(%rsp)
    00000050: 	movq	$0x0, 0x60(%rsp)
    00000059: 	movq	$0x0, 0x68(%rsp)
    00000062: 	movl	$0x3f800000, 0x70(%rsp)
    0000006a: 	movq	$0x0, 0x78(%rsp)
    00000073: 	movq	$0x0, 0x80(%rsp)
    0000007f: 	cmpq	%rsi, %rdi
    00000082: 	je	.Ltmp4597 # Offset: 130
    00000088: 	pxor	%xmm6, %xmm6
    0000008c: 	movq	%rdi, %rbp
    0000008f: 	leaq	0x50(%rsp), %r15
    00000094: 	movq	%rsi, %r12
    00000097: 	movsd	%xmm6, (%rsp)
    0000009c: 	movsd	%xmm6, 0x20(%rsp)
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4598:
    000000a8: 	movq	%rbp, %rsi
    000000ab: 	movq	%r15, %rdi
    000000ae: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEESt4pairINS1_14_Node_iteratorIdLb1ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE.constprop.0.isra.0/1" # Offset: 174
    000000b3: 	movsd	0x20(%rsp), %xmm4
    000000b9: 	addsd	(%rbp), %xmm4
    000000be: 	addq	$0x8, %rbp
    000000c2: 	movsd	%xmm4, 0x20(%rsp)
    000000c8: 	cmpq	%rbp, %r12
    000000cb: 	jne	.Ltmp4598 # Offset: 203
.Ltmp4619:
    000000cd: 	callq	clock@PLT # Offset: 205
    000000d2: 	movl	$0xc70f6907, %ebp
    000000d7: 	movl	$0x0, 0x1c(%rsp)
    000000df: 	leaq	0x48(%rsp), %r12
    000000e4: 	movq	%rax, start_time(%rip)
    000000eb: 	movl	iterations(%rip), %eax
    000000f1: 	testl	%eax, %eax
    000000f3: 	jle	.Ltmp4599 # Offset: 243
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp4609:
    00000100: 	movq	0x28(%rsp), %rax
    00000105: 	pxor	%xmm1, %xmm1
    00000109: 	movq	%rax, %r15
    0000010c: 	cmpq	%rbx, %rax
    0000010f: 	je	.Ltmp4600 # Offset: 271
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp4607:
    00000118: 	addq	$0x8, %r15
    0000011c: 	movsd	-0x8(%r15), %xmm0
    00000122: 	ucomisd	(%rsp), %xmm0
    00000127: 	movsd	%xmm0, 0x48(%rsp)
    0000012d: 	jp	.Ltmp4601 # Offset: 301
    00000133: 	movl	$0x0, %eax
    00000138: 	jne	.Ltmp4601 # Offset: 312
.Ltmp4615:
    0000013e: 	xorl	%edx, %edx
    00000140: 	divq	0x58(%rsp)
    00000145: 	movq	0x50(%rsp), %rax
    0000014a: 	movq	(%rax,%rdx,8), %rax
    0000014e: 	movq	%rdx, %r14
    00000151: 	testq	%rax, %rax
    00000154: 	je	.Ltmp4602 # Offset: 340
    0000015a: 	movq	(%rax), %r13
    0000015d: 	movsd	0x8(%r13), %xmm0
    00000163: 	ucomisd	-0x8(%r15), %xmm0
    00000169: 	jp	.Ltmp4603 # Offset: 361
    0000016b: 	je	.Ltmp4604 # Offset: 363
.Ltmp4603:
    0000016d: 	movq	%r12, %rcx
    00000170: 	movq	%rbx, %r12
    00000173: 	movq	%r14, %rbx
.Ltmp4606:
    00000176: 	movq	(%r13), %rax
    0000017a: 	testq	%rax, %rax
    0000017d: 	je	.Ltmp4602 # Offset: 381
    00000183: 	movsd	0x8(%rax), %xmm0
    00000188: 	ucomisd	(%rsp), %xmm0
    0000018d: 	movq	0x58(%rsp), %r14
    00000192: 	movsd	%xmm0, 0x48(%rsp)
    00000198: 	jp	.Ltmp4605 # Offset: 408
    0000019e: 	movl	$0x0, %edx
    000001a3: 	jne	.Ltmp4605 # Offset: 419
.Ltmp4616:
    000001a9: 	cmpq	%rdx, %rbx
    000001ac: 	jne	.Ltmp4602 # Offset: 428
    000001b2: 	movq	(%r13), %r13
    000001b6: 	movsd	0x8(%r13), %xmm0
    000001bc: 	ucomisd	-0x8(%r15), %xmm0
    000001c2: 	jp	.Ltmp4606 # Offset: 450
    000001c4: 	jne	.Ltmp4606 # Offset: 452
    000001c6: 	movq	%r12, %rbx
    000001c9: 	movq	%rcx, %r12
.Ltmp4604:
    000001cc: 	addsd	%xmm0, %xmm1
    000001d0: 	cmpq	%r15, %rbx
    000001d3: 	jne	.Ltmp4607 # Offset: 467
.Ltmp4600:
    000001d9: 	movsd	0x20(%rsp), %xmm5
    000001df: 	ucomisd	%xmm1, %xmm5
    000001e3: 	jp	.Ltmp4608 # Offset: 483
    000001e9: 	jne	.Ltmp4608 # Offset: 489
.Ltmp4617:
    000001ef: 	addl	$0x1, 0x1c(%rsp)
    000001f4: 	movl	0x1c(%rsp), %eax
    000001f8: 	cmpl	%eax, iterations(%rip)
    000001fe: 	jg	.Ltmp4609 # Offset: 510
.Ltmp4599:
    00000204: 	movq	0x30(%rsp), %rdi
    00000209: 	leaq	0x50(%rsp), %r15
    0000020e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 526
    00000213: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000221: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000228: 	je	.Ltmp4610 # Offset: 552
.Ltmp4618:
    0000022e: 	movq	-0x20(%rax), %rbp
    00000232: 	leaq	0x50(%rsp), %r15
    00000237: 	callq	clock@PLT # Offset: 567
    0000023c: 	pxor	%xmm0, %xmm0
    00000240: 	movq	%rax, end_time(%rip)
    00000247: 	movq	%rbp, %rdi
    0000024a: 	subq	start_time(%rip), %rax
    00000251: 	cvtsi2sd	%rax, %xmm0
    00000256: 	divsd	DATAat0x53788(%rip), %xmm0
    0000025e: 	callq	_Z13record_resultdPKc # Offset: 606
    00000263: 	movq	0x60(%rsp), %rbx
    00000268: 	testq	%rbx, %rbx
    0000026b: 	je	.Ltmp4611 # Offset: 619
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp4612:
    00000270: 	movq	%rbx, %rdi
    00000273: 	movq	(%rbx), %rbx
    00000276: 	movl	$0x10, %esi
    0000027b: 	callq	_ZdlPvm@PLT # Offset: 635
    00000280: 	testq	%rbx, %rbx
    00000283: 	jne	.Ltmp4612 # Offset: 643
.Ltmp4611:
    00000285: 	movq	0x58(%rsp), %rax
    0000028a: 	movq	0x50(%rsp), %rdi
    0000028f: 	xorl	%esi, %esi
    00000291: 	leaq	(,%rax,8), %rdx
    00000299: 	callq	memset@PLT # Offset: 665
    0000029e: 	movq	0x58(%rsp), %rsi
    000002a3: 	movq	0x50(%rsp), %rdi
    000002a8: 	movq	$0x0, 0x68(%rsp)
    000002b1: 	movq	$0x0, 0x60(%rsp)
    000002ba: 	cmpq	0x38(%rsp), %rdi
    000002bf: 	je	.Ltmp4613 # Offset: 703
    000002c1: 	shlq	$0x3, %rsi
    000002c5: 	callq	_ZdlPvm@PLT # Offset: 709
.Ltmp4613:
    000002ca: 	movq	0x88(%rsp), %rax
    000002d2: 	subq	%fs:0x28, %rax
    000002db: 	jne	.Ltmp4614 # Offset: 731
    000002e1: 	addq	$0x98, %rsp
    000002e8: 	popq	%rbx
    000002e9: 	popq	%rbp
    000002ea: 	popq	%r12
    000002ec: 	popq	%r13
    000002ee: 	popq	%r14
    000002f0: 	popq	%r15
    000002f2: 	retq # Offset: 754
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4601:
    000002f8: 	movq	%rbp, %rdx
    000002fb: 	movl	$0x8, %esi
    00000300: 	movq	%r12, %rdi
    00000303: 	movsd	%xmm1, 0x8(%rsp)
    00000309: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 777
    0000030e: 	movsd	0x8(%rsp), %xmm1
    00000314: 	jmp	.Ltmp4615 # Offset: 788
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp4605:
    00000320: 	movq	%rbp, %rdx
    00000323: 	movq	%rcx, %rdi
    00000326: 	movl	$0x8, %esi
    0000032b: 	movq	%rcx, 0x8(%rsp)
    00000330: 	movsd	%xmm1, 0x10(%rsp)
    00000336: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 822
    0000033b: 	xorl	%edx, %edx
    0000033d: 	movsd	0x10(%rsp), %xmm1
    00000343: 	movq	0x8(%rsp), %rcx
    00000348: 	divq	%r14
    0000034b: 	jmp	.Ltmp4616 # Offset: 843
.Ltmp4608:
    00000350: 	movl	current_test(%rip), %edx
    00000356: 	leaq	DATAat0x52360(%rip), %rsi
    0000035d: 	movl	$0x1, %edi
    00000362: 	xorl	%eax, %eax
    00000364: 	leaq	0x50(%rsp), %r15
    00000369: 	callq	__printf_chk@PLT # Offset: 873
    0000036e: 	jmp	.Ltmp4617 # Offset: 878
.Ltmp4610:
    00000373: 	movq	-0x8(%rdx), %rax
    00000377: 	addq	$0x200, %rax
    0000037d: 	jmp	.Ltmp4618 # Offset: 893
.Ltmp4597:
    00000382: 	pxor	%xmm7, %xmm7
    00000386: 	movsd	%xmm7, (%rsp)
    0000038b: 	movsd	%xmm7, 0x20(%rsp)
    00000391: 	jmp	.Ltmp4619 # Offset: 913
.Ltmp4614:
    00000396: 	callq	__stack_chk_fail@PLT # Offset: 918
.Ltmp4602:
    0000039b: 	movsd	0x8, %xmm0
    000003a4: 	ud2
    000003a6: 	endbr64
    000003aa: 	movq	%rax, %rbp
    000003ad: 	movq	%r15, %rdi
    000003b0: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEED2Ev # Offset: 944
    000003b5: 	movq	%rbp, %rdi
    000003b8: 	callq	_Unwind_Resume@PLT # Offset: 952
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_find_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_accum_setIdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 279
  State       : disassembled
  Address     : 0x2ead0
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x2ead0
  Section     : .text
  Orc Section : .local.text._Z14test_accum_setIdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0278:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x58, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x48(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	leaq	0x40(%rsp), %r13
    0000002a: 	movl	$0x3f800000, 0x30(%rsp)
    00000032: 	movq	%r13, 0x10(%rsp)
    00000037: 	movq	$0x1, 0x18(%rsp)
    00000040: 	movq	$0x0, 0x20(%rsp)
    00000049: 	movq	$0x0, 0x28(%rsp)
    00000052: 	movq	$0x0, 0x38(%rsp)
    0000005b: 	movq	$0x0, 0x40(%rsp)
    00000064: 	cmpq	%rsi, %rdi
    00000067: 	je	.Ltmp4620 # Offset: 103
    0000006d: 	pxor	%xmm3, %xmm3
    00000071: 	movq	%rdi, %rbx
    00000074: 	leaq	0x10(%rsp), %rbp
    00000079: 	movq	%rsi, %r14
    0000007c: 	movsd	%xmm3, 0x8(%rsp)
    00000082: 	movq	%xmm3, %r15
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4621:
    00000090: 	movq	%rbx, %rsi
    00000093: 	movq	%rbp, %rdi
    00000096: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEESt4pairINS1_14_Node_iteratorIdLb1ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE.constprop.0.isra.0/1" # Offset: 150
    0000009b: 	movq	%r15, %xmm1
    000000a0: 	addsd	(%rbx), %xmm1
    000000a4: 	addq	$0x8, %rbx
    000000a8: 	movq	%xmm1, %r15
    000000ad: 	cmpq	%rbx, %r14
    000000b0: 	jne	.Ltmp4621 # Offset: 176
.Ltmp4634:
    000000b2: 	callq	clock@PLT # Offset: 178
    000000b7: 	movl	iterations(%rip), %ecx
    000000bd: 	xorl	%ebx, %ebx
    000000bf: 	leaq	DATAat0x52360(%rip), %r14
    000000c6: 	movq	%rax, start_time(%rip)
    000000cd: 	testl	%ecx, %ecx
    000000cf: 	jle	.Ltmp4622 # Offset: 207
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp4626:
    000000d8: 	movq	0x20(%rsp), %rax
    000000dd: 	pxor	%xmm0, %xmm0
    000000e1: 	testq	%rax, %rax
    000000e4: 	je	.Ltmp4623 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4624:
    000000f0: 	movq	%rax, %rdx
    000000f3: 	movq	(%rax), %rax
    000000f6: 	addsd	0x8(%rdx), %xmm0
    000000fb: 	testq	%rax, %rax
    000000fe: 	jne	.Ltmp4624 # Offset: 254
.Ltmp4623:
    00000100: 	movq	%r15, %xmm2
    00000105: 	ucomisd	%xmm0, %xmm2
    00000109: 	jp	.Ltmp4625 # Offset: 265
    0000010f: 	jne	.Ltmp4625 # Offset: 271
.Ltmp4632:
    00000115: 	addl	$0x1, %ebx
    00000118: 	cmpl	%ecx, %ebx
    0000011a: 	jl	.Ltmp4626 # Offset: 282
.Ltmp4622:
    0000011c: 	movq	%r12, %rdi
    0000011f: 	leaq	0x10(%rsp), %rbp
    00000124: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 292
    00000129: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000130: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000137: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000013e: 	je	.Ltmp4627 # Offset: 318
.Ltmp4633:
    00000144: 	movq	-0x20(%rax), %r12
    00000148: 	leaq	0x10(%rsp), %rbp
    0000014d: 	callq	clock@PLT # Offset: 333
    00000152: 	pxor	%xmm0, %xmm0
    00000156: 	movq	%rax, end_time(%rip)
    0000015d: 	movq	%r12, %rdi
    00000160: 	subq	start_time(%rip), %rax
    00000167: 	cvtsi2sd	%rax, %xmm0
    0000016c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000174: 	callq	_Z13record_resultdPKc # Offset: 372
    00000179: 	movq	0x20(%rsp), %rbx
    0000017e: 	testq	%rbx, %rbx
    00000181: 	je	.Ltmp4628 # Offset: 385
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4629:
    00000188: 	movq	%rbx, %rdi
    0000018b: 	movq	(%rbx), %rbx
    0000018e: 	movl	$0x10, %esi
    00000193: 	callq	_ZdlPvm@PLT # Offset: 403
    00000198: 	testq	%rbx, %rbx
    0000019b: 	jne	.Ltmp4629 # Offset: 411
.Ltmp4628:
    0000019d: 	movq	0x18(%rsp), %rax
    000001a2: 	movq	0x10(%rsp), %rdi
    000001a7: 	xorl	%esi, %esi
    000001a9: 	leaq	(,%rax,8), %rdx
    000001b1: 	callq	memset@PLT # Offset: 433
    000001b6: 	movq	0x10(%rsp), %rdi
    000001bb: 	movq	0x18(%rsp), %rax
    000001c0: 	movq	$0x0, 0x28(%rsp)
    000001c9: 	movq	$0x0, 0x20(%rsp)
    000001d2: 	cmpq	%r13, %rdi
    000001d5: 	je	.Ltmp4630 # Offset: 469
    000001d7: 	leaq	(,%rax,8), %rsi
    000001df: 	callq	_ZdlPvm@PLT # Offset: 479
.Ltmp4630:
    000001e4: 	movq	0x48(%rsp), %rax
    000001e9: 	subq	%fs:0x28, %rax
    000001f2: 	jne	.Ltmp4631 # Offset: 498
    000001f4: 	addq	$0x58, %rsp
    000001f8: 	popq	%rbx
    000001f9: 	popq	%rbp
    000001fa: 	popq	%r12
    000001fc: 	popq	%r13
    000001fe: 	popq	%r14
    00000200: 	popq	%r15
    00000202: 	retq # Offset: 514
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4625:
    00000208: 	movl	current_test(%rip), %edx
    0000020e: 	movq	%r14, %rsi
    00000211: 	movl	$0x1, %edi
    00000216: 	xorl	%eax, %eax
    00000218: 	leaq	0x10(%rsp), %rbp
    0000021d: 	callq	__printf_chk@PLT # Offset: 541
    00000222: 	movl	iterations(%rip), %ecx
    00000228: 	jmp	.Ltmp4632 # Offset: 552
.Ltmp4627:
    0000022d: 	movq	-0x8(%rdx), %rax
    00000231: 	addq	$0x200, %rax
    00000237: 	jmp	.Ltmp4633 # Offset: 567
.Ltmp4620:
    0000023c: 	pxor	%xmm4, %xmm4
    00000240: 	movsd	%xmm4, 0x8(%rsp)
    00000246: 	movq	%xmm4, %r15
    0000024b: 	jmp	.Ltmp4634 # Offset: 587
.Ltmp4631:
    00000250: 	callq	__stack_chk_fail@PLT # Offset: 592
    00000255: 	endbr64
    00000259: 	movq	%rax, %r12
    0000025c: 	movq	%rbp, %rdi
    0000025f: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEED2Ev # Offset: 607
    00000264: 	movq	%r12, %rdi
    00000267: 	callq	_Unwind_Resume@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_accum_setIdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_insert_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEELb1EEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 280
  State       : disassembled
  Address     : 0x2ed40
  Size        : 0x4a2
  MaxSize     : 0x4b0
  Offset      : 0x2ed40
  Section     : .text
  Orc Section : .local.text._Z16test_insert_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEELb1EEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0279:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	xorl	%ebx, %ebx
    00000016: 	subq	$0x68, %rsp
    0000001a: 	movq	%rdx, 0x38(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x58(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp4635 # Offset: 67
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp4639:
    00000050: 	movl	$0x38, %edi
    00000055: 	callq	_Znwm@PLT # Offset: 85
    0000005a: 	movq	%r15, %rsi
    0000005d: 	leaq	0x30(%rax), %r13
    00000061: 	movq	$0x1, 0x8(%rax)
    00000069: 	movq	%rax, %rbp
    0000006c: 	movq	%rax, %rdi
    0000006f: 	movq	%r13, (%rax)
    00000072: 	movq	$0x0, 0x10(%rax)
    0000007a: 	movq	$0x0, 0x18(%rax)
    00000082: 	movl	$0x3f800000, 0x20(%rax)
    00000089: 	movq	$0x0, 0x28(%rax)
    00000091: 	movq	$0x0, 0x30(%rax)
    00000099: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEESt4pairINS1_14_Node_iteratorIdLb1ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE.constprop.0.isra.0/1" # Offset: 153
    0000009e: 	movq	0x10(%rbp), %r14
    000000a2: 	testq	%r14, %r14
    000000a5: 	je	.Ltmp4636 # Offset: 165
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4637:
    000000b0: 	movq	%r14, %rdi
    000000b3: 	movq	(%r14), %r14
    000000b6: 	movl	$0x10, %esi
    000000bb: 	callq	_ZdlPvm@PLT # Offset: 187
    000000c0: 	testq	%r14, %r14
    000000c3: 	jne	.Ltmp4637 # Offset: 195
.Ltmp4636:
    000000c5: 	movq	0x8(%rbp), %rax
    000000c9: 	movq	(%rbp), %rdi
    000000cd: 	xorl	%esi, %esi
    000000cf: 	leaq	(,%rax,8), %rdx
    000000d7: 	callq	memset@PLT # Offset: 215
    000000dc: 	movq	(%rbp), %rdi
    000000e0: 	movq	0x8(%rbp), %rax
    000000e4: 	movq	$0x0, 0x18(%rbp)
    000000ec: 	movq	$0x0, 0x10(%rbp)
    000000f4: 	cmpq	%rdi, %r13
    000000f7: 	je	.Ltmp4638 # Offset: 247
    000000fd: 	leaq	(,%rax,8), %rsi
    00000105: 	addl	$0x1, %ebx
    00000108: 	callq	_ZdlPvm@PLT # Offset: 264
    0000010d: 	movl	$0x38, %esi
    00000112: 	movq	%rbp, %rdi
    00000115: 	callq	_ZdlPvm@PLT # Offset: 277
    0000011a: 	cmpl	iterations(%rip), %ebx
    00000120: 	jl	.Ltmp4639 # Offset: 288
.Ltmp4635:
    00000126: 	callq	clock@PLT # Offset: 294
    0000012b: 	pxor	%xmm0, %xmm0
    0000012f: 	movq	%r12, %rcx
    00000132: 	xorl	%edx, %edx
    00000134: 	movq	%rax, end_time(%rip)
    0000013b: 	subq	start_time(%rip), %rax
    00000142: 	subq	%r15, %rcx
    00000145: 	cvtsi2sd	%rax, %xmm0
    0000014a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000152: 	movabsq	$0x500000000, %rax
    0000015c: 	movsd	%xmm0, 0x30(%rsp)
    00000162: 	divq	%rcx
    00000165: 	movq	%rax, 0x8(%rsp)
    0000016a: 	cmpq	$0x3e8, %rax
    00000170: 	ja	.Ltmp4640 # Offset: 368
    00000176: 	cmpq	$0x3, 0x8(%rsp)
    0000017c: 	ja	.Ltmp4641 # Offset: 380
    00000182: 	movq	$0x0, 0x50(%rsp)
    0000018b: 	pxor	%xmm0, %xmm0
    0000018f: 	movq	$0x4, 0x8(%rsp)
    00000198: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp4655:
    0000019d: 	movq	0x8(%rsp), %rbx
    000001a2: 	leaq	0x40(%rsp), %rdi
    000001a7: 	movq	%rbx, %rsi
    000001aa: 	callq	_ZNSt6vectorIPSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 426
    000001af: 	movq	0x40(%rsp), %rcx
    000001b4: 	movl	iterations(%rip), %eax
    000001ba: 	movq	%rcx, 0x18(%rsp)
    000001bf: 	testl	%eax, %eax
    000001c1: 	jle	.Ltmp4642 # Offset: 449
    000001c7: 	addq	$0x8, %rcx
    000001cb: 	movl	%ebx, 0x24(%rsp)
    000001cf: 	pxor	%xmm2, %xmm2
    000001d3: 	movl	$0x0, 0x20(%rsp)
    000001db: 	movq	%rcx, 0x28(%rsp)
    000001e0: 	movsd	%xmm2, 0x10(%rsp)
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4651:
    000001f0: 	movslq	0x20(%rsp), %rdx
    000001f5: 	movslq	%eax, %rcx
    000001f8: 	movq	%rdx, %rdi
    000001fb: 	addq	0x8(%rsp), %rdx
    00000200: 	subl	%edi, %eax
    00000202: 	cmpq	%rcx, %rdx
    00000205: 	cmovbl	0x24(%rsp), %eax
    0000020a: 	movl	%eax, %ebx
    0000020c: 	callq	clock@PLT # Offset: 524
    00000211: 	movq	0x28(%rsp), %rcx
    00000216: 	movq	0x18(%rsp), %r14
    0000021b: 	movq	%rax, start_time(%rip)
    00000222: 	leal	-0x1(%rbx), %eax
    00000225: 	leaq	(%rcx,%rax,8), %rax
    00000229: 	movq	%r14, %r13
    0000022c: 	movq	%rax, (%rsp)
.Ltmp4645:
    00000230: 	movl	$0x38, %edi
    00000235: 	callq	_Znwm@PLT # Offset: 565
    0000023a: 	movq	%rax, %rbp
    0000023d: 	leaq	0x30(%rax), %rax
    00000241: 	movq	%r15, %rbx
    00000244: 	movq	%rax, (%rbp)
    00000248: 	movq	$0x1, 0x8(%rbp)
    00000250: 	movq	$0x0, 0x10(%rbp)
    00000258: 	movq	$0x0, 0x18(%rbp)
    00000260: 	movl	$0x3f800000, 0x20(%rbp)
    00000267: 	movq	$0x0, 0x28(%rbp)
    0000026f: 	movq	$0x0, 0x30(%rbp)
    00000277: 	cmpq	%r15, %r12
    0000027a: 	je	.Ltmp4643 # Offset: 634
    0000027c: 	nopl	(%rax) # Size: 4
.Ltmp4644:
    00000280: 	movq	%rbx, %rsi
    00000283: 	movq	%rbp, %rdi
    00000286: 	addq	$0x8, %rbx
    0000028a: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEESt4pairINS1_14_Node_iteratorIdLb1ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE.constprop.0.isra.0/1" # Offset: 650
    0000028f: 	cmpq	%rbx, %r12
    00000292: 	jne	.Ltmp4644 # Offset: 658
.Ltmp4643:
    00000294: 	movq	%rbp, (%r14)
    00000297: 	addq	$0x8, %r14
    0000029b: 	cmpq	%r14, (%rsp)
    0000029f: 	jne	.Ltmp4645 # Offset: 671
    000002a1: 	callq	clock@PLT # Offset: 673
    000002a6: 	pxor	%xmm0, %xmm0
    000002aa: 	movq	%rax, end_time(%rip)
    000002b1: 	subq	start_time(%rip), %rax
    000002b8: 	cvtsi2sd	%rax, %xmm0
    000002bd: 	divsd	DATAat0x53788(%rip), %xmm0
    000002c5: 	addsd	0x10(%rsp), %xmm0
    000002cb: 	movsd	%xmm0, 0x10(%rsp)
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp4650:
    000002d8: 	movq	(%r13), %rbp
    000002dc: 	testq	%rbp, %rbp
    000002df: 	je	.Ltmp4646 # Offset: 735
    000002e1: 	movq	0x10(%rbp), %rbx
    000002e5: 	testq	%rbx, %rbx
    000002e8: 	je	.Ltmp4647 # Offset: 744
    000002ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4648:
    000002f0: 	movq	%rbx, %rdi
    000002f3: 	movq	(%rbx), %rbx
    000002f6: 	movl	$0x10, %esi
    000002fb: 	callq	_ZdlPvm@PLT # Offset: 763
    00000300: 	testq	%rbx, %rbx
    00000303: 	jne	.Ltmp4648 # Offset: 771
.Ltmp4647:
    00000305: 	movq	0x8(%rbp), %rax
    00000309: 	movq	(%rbp), %rdi
    0000030d: 	xorl	%esi, %esi
    0000030f: 	leaq	(,%rax,8), %rdx
    00000317: 	callq	memset@PLT # Offset: 791
    0000031c: 	movq	(%rbp), %rdi
    00000320: 	leaq	0x30(%rbp), %rax
    00000324: 	movq	$0x0, 0x18(%rbp)
    0000032c: 	movq	$0x0, 0x10(%rbp)
    00000334: 	movq	0x8(%rbp), %rsi
    00000338: 	cmpq	%rax, %rdi
    0000033b: 	je	.Ltmp4649 # Offset: 827
    0000033d: 	shlq	$0x3, %rsi
    00000341: 	callq	_ZdlPvm@PLT # Offset: 833
.Ltmp4649:
    00000346: 	movl	$0x38, %esi
    0000034b: 	movq	%rbp, %rdi
    0000034e: 	callq	_ZdlPvm@PLT # Offset: 846
.Ltmp4646:
    00000353: 	movq	$0x0, (%r13)
    0000035b: 	addq	$0x8, %r13
    0000035f: 	cmpq	%r13, (%rsp)
    00000363: 	jne	.Ltmp4650 # Offset: 867
    00000369: 	movl	0x8(%rsp), %ecx
    0000036d: 	movl	iterations(%rip), %eax
    00000373: 	addl	%ecx, 0x20(%rsp)
    00000377: 	movl	0x20(%rsp), %ecx
    0000037b: 	cmpl	%ecx, %eax
    0000037d: 	jg	.Ltmp4651 # Offset: 893
.Ltmp4657:
    00000383: 	movq	0x38(%rsp), %rdi
    00000388: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 904
    0000038d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000394: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000039b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a2: 	je	.Ltmp4652 # Offset: 930
.Ltmp4656:
    000003a8: 	movsd	0x10(%rsp), %xmm0
    000003ae: 	subsd	0x30(%rsp), %xmm0
    000003b4: 	movq	-0x20(%rax), %rdi
    000003b8: 	callq	_Z13record_resultdPKc # Offset: 952
    000003bd: 	cmpq	$0x0, 0x18(%rsp)
    000003c3: 	je	.Ltmp4653 # Offset: 963
    000003c5: 	movq	0x58(%rsp), %rax
    000003ca: 	subq	%fs:0x28, %rax
    000003d3: 	jne	.Ltmp4654 # Offset: 979
    000003d9: 	movq	0x50(%rsp), %rsi
    000003de: 	movq	0x18(%rsp), %rdi
    000003e3: 	addq	$0x68, %rsp
    000003e7: 	popq	%rbx
    000003e8: 	popq	%rbp
    000003e9: 	subq	%rdi, %rsi
    000003ec: 	popq	%r12
    000003ee: 	popq	%r13
    000003f0: 	popq	%r14
    000003f2: 	popq	%r15
    000003f4: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1012
.Ltmp4638:
    000003f9: 	movl	$0x38, %esi
    000003fe: 	movq	%rbp, %rdi
    00000401: 	addl	$0x1, %ebx
    00000404: 	callq	_ZdlPvm@PLT # Offset: 1028
    00000409: 	cmpl	%ebx, iterations(%rip)
    0000040f: 	jg	.Ltmp4639 # Offset: 1039
    00000415: 	jmp	.Ltmp4635 # Offset: 1045
.Ltmp4653:
    0000041a: 	movq	0x58(%rsp), %rax
    0000041f: 	subq	%fs:0x28, %rax
    00000428: 	jne	.Ltmp4654 # Offset: 1064
    0000042a: 	addq	$0x68, %rsp
    0000042e: 	popq	%rbx
    0000042f: 	popq	%rbp
    00000430: 	popq	%r12
    00000432: 	popq	%r13
    00000434: 	popq	%r14
    00000436: 	popq	%r15
    00000438: 	retq # Offset: 1080
.Ltmp4640:
    00000439: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp4641:
    00000442: 	movq	$0x0, 0x50(%rsp)
    0000044b: 	pxor	%xmm0, %xmm0
    0000044f: 	movaps	%xmm0, 0x40(%rsp)
    00000454: 	jmp	.Ltmp4655 # Offset: 1108
.Ltmp4652:
    00000459: 	movq	-0x8(%rdx), %rax
    0000045d: 	addq	$0x200, %rax
    00000463: 	jmp	.Ltmp4656 # Offset: 1123
.Ltmp4642:
    00000468: 	pxor	%xmm3, %xmm3
    0000046c: 	movsd	%xmm3, 0x10(%rsp)
    00000472: 	jmp	.Ltmp4657 # Offset: 1138
.Ltmp4654:
    00000477: 	callq	__stack_chk_fail@PLT # Offset: 1143
    0000047c: 	endbr64
    00000480: 	movq	%rax, %rbp
    00000483: 	movq	0x40(%rsp), %rdi
    00000488: 	movq	0x50(%rsp), %rsi
    0000048d: 	subq	%rdi, %rsi
    00000490: 	testq	%rdi, %rdi
    00000493: 	je	.Ltmp4658 # Offset: 1171
    00000495: 	callq	_ZdlPvm@PLT # Offset: 1173
.Ltmp4658:
    0000049a: 	movq	%rbp, %rdi
    0000049d: 	callq	_Unwind_Resume@PLT # Offset: 1181
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_insert_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEELb1EEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_eraseall_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 281
  State       : disassembled
  Address     : 0x2f1f0
  Size        : 0x560
  MaxSize     : 0x560
  Offset      : 0x2f1f0
  Section     : .text
  Orc Section : .local.text._Z18test_eraseall_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0280:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x88, %rsp
    0000001e: 	movq	%rdx, 0x48(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x18(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x78(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	movabsq	$0x500000000, %rax
    00000044: 	divq	%rcx
    00000047: 	movq	%rax, 0x28(%rsp)
    0000004c: 	cmpq	$0x3e8, %rax
    00000052: 	ja	.Ltmp4659 # Offset: 82
    00000058: 	cmpq	$0x3, %rax
    0000005c: 	ja	.Ltmp4660 # Offset: 92
    00000062: 	movq	$0x0, 0x70(%rsp)
    0000006b: 	pxor	%xmm0, %xmm0
    0000006f: 	movq	$0x4, 0x28(%rsp)
    00000078: 	movaps	%xmm0, 0x60(%rsp)
.Ltmp4690:
    0000007d: 	movq	0x28(%rsp), %rbx
    00000082: 	leaq	0x60(%rsp), %rdi
    00000087: 	movq	%rbx, %rsi
    0000008a: 	callq	_ZNSt6vectorIPSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 138
    0000008f: 	movq	0x60(%rsp), %rax
    00000094: 	movl	iterations(%rip), %r14d
    0000009b: 	movq	%rax, 0x8(%rsp)
    000000a0: 	testl	%r14d, %r14d
    000000a3: 	jle	.Ltmp4661 # Offset: 163
    000000a9: 	movl	%ebx, 0x44(%rsp)
    000000ad: 	movq	$0x0, 0x30(%rsp)
    000000b6: 	movl	$0x0, 0x40(%rsp)
    000000be: 	nop # Size: 2
.Ltmp4681:
    000000c0: 	movslq	0x40(%rsp), %rax
    000000c5: 	movslq	%r14d, %rdx
    000000c8: 	movq	%rax, %rcx
    000000cb: 	addq	0x28(%rsp), %rax
    000000d0: 	subl	%ecx, %r14d
    000000d3: 	cmpq	%rdx, %rax
    000000d6: 	movq	0x8(%rsp), %rcx
    000000db: 	movl	%r14d, %r15d
    000000de: 	cmovbl	0x44(%rsp), %r15d
    000000e4: 	movq	%rcx, %r13
    000000e7: 	leal	-0x1(%r15), %eax
    000000eb: 	leaq	0x8(%rcx,%rax,8), %r14
.Ltmp4664:
    000000f0: 	movl	$0x38, %edi
    000000f5: 	callq	_Znwm@PLT # Offset: 245
    000000fa: 	movq	%rax, %rbp
    000000fd: 	leaq	0x30(%rax), %rax
    00000101: 	movq	%rax, (%rbp)
    00000105: 	movq	0x18(%rsp), %rax
    0000010a: 	movq	$0x1, 0x8(%rbp)
    00000112: 	movq	$0x0, 0x10(%rbp)
    0000011a: 	movq	%rax, %rbx
    0000011d: 	movq	$0x0, 0x18(%rbp)
    00000125: 	movl	$0x3f800000, 0x20(%rbp)
    0000012c: 	movq	$0x0, 0x28(%rbp)
    00000134: 	movq	$0x0, 0x30(%rbp)
    0000013c: 	cmpq	%rax, %r12
    0000013f: 	je	.Ltmp4662 # Offset: 319
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp4663:
    00000148: 	movq	%rbx, %rsi
    0000014b: 	movq	%rbp, %rdi
    0000014e: 	addq	$0x8, %rbx
    00000152: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEESt4pairINS1_14_Node_iteratorIdLb1ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE.constprop.0.isra.0/1" # Offset: 338
    00000157: 	cmpq	%rbx, %r12
    0000015a: 	jne	.Ltmp4663 # Offset: 346
.Ltmp4662:
    0000015c: 	movq	%rbp, (%r13)
    00000160: 	addq	$0x8, %r13
    00000164: 	cmpq	%r13, %r14
    00000167: 	jne	.Ltmp4664 # Offset: 359
    00000169: 	callq	clock@PLT # Offset: 361
    0000016e: 	movl	%r15d, %r14d
    00000171: 	movq	%r12, 0x38(%rsp)
    00000176: 	movq	%rax, start_time(%rip)
    0000017d: 	leaq	(,%r14,8), %rax
    00000185: 	movq	%rax, 0x10(%rsp)
    0000018a: 	movq	$0x0, (%rsp)
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4675:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	movq	(%rsp), %rcx
    000001a1: 	movq	(%rax,%rcx), %r12
    000001a5: 	movq	0x10(%r12), %r8
    000001aa: 	testq	%r8, %r8
    000001ad: 	je	.Ltmp4665 # Offset: 429
    000001b3: 	movsd	0x8(%r8), %xmm0
    000001b9: 	pxor	%xmm2, %xmm2
    000001bd: 	movq	0x8(%r12), %rbp
    000001c2: 	ucomisd	%xmm2, %xmm0
    000001c6: 	movsd	%xmm0, 0x58(%rsp)
    000001cc: 	jp	.Ltmp4666 # Offset: 460
    000001d2: 	movl	$0x0, %eax
    000001d7: 	movl	$0x0, %ebx
    000001dc: 	jne	.Ltmp4666 # Offset: 476
.Ltmp4689:
    000001e2: 	movq	(%r12), %rdx
    000001e6: 	movq	(%rdx,%rax), %rdx
    000001ea: 	movq	%rdx, %rax
    000001ed: 	nopl	(%rax) # Size: 3
.Ltmp4667:
    000001f0: 	movq	%rax, %r13
    000001f3: 	movq	(%rax), %rax
    000001f6: 	cmpq	%rax, %r8
    000001f9: 	jne	.Ltmp4667 # Offset: 505
    000001fb: 	testq	%rdx, %rdx
    000001fe: 	je	.Ltmp4668 # Offset: 510
    00000200: 	movq	(%rdx), %rdx
.Ltmp4668:
    00000203: 	cmpq	%rdx, %r8
    00000206: 	movq	%r8, %rdi
    00000209: 	sete	%bpl
    0000020d: 	nopl	(%rax) # Size: 3
.Ltmp4673:
    00000210: 	movq	(%rdi), %r14
    00000213: 	movl	$0x10, %esi
    00000218: 	callq	_ZdlPvm@PLT # Offset: 536
    0000021d: 	subq	$0x1, 0x18(%r12)
    00000223: 	testq	%r14, %r14
    00000226: 	je	.Ltmp4669 # Offset: 550
    00000228: 	movsd	0x8(%r14), %xmm0
    0000022e: 	pxor	%xmm1, %xmm1
    00000232: 	movq	0x8(%r12), %r15
    00000237: 	ucomisd	%xmm1, %xmm0
    0000023b: 	movsd	%xmm0, 0x58(%rsp)
    00000241: 	jp	.Ltmp4670 # Offset: 577
    00000247: 	movl	$0x0, %edx
    0000024c: 	jne	.Ltmp4670 # Offset: 588
.Ltmp4685:
    00000252: 	cmpq	%rdx, %rbx
    00000255: 	je	.Ltmp4671 # Offset: 597
    00000257: 	testb	%bpl, %bpl
    0000025a: 	jne	.Ltmp4672 # Offset: 602
    00000260: 	movl	$0x1, %ebp
.Ltmp4671:
    00000265: 	movq	%rdx, %rbx
    00000268: 	movq	%r14, %rdi
    0000026b: 	jmp	.Ltmp4673 # Offset: 619
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp4669:
    00000270: 	testb	%bpl, %bpl
    00000273: 	jne	.Ltmp4674 # Offset: 627
.Ltmp4688:
    00000279: 	movq	$0x0, (%r13)
.Ltmp4665:
    00000281: 	addq	$0x8, (%rsp)
    00000286: 	movq	(%rsp), %rax
    0000028a: 	cmpq	%rax, 0x10(%rsp)
    0000028f: 	jne	.Ltmp4675 # Offset: 655
    00000295: 	movq	0x38(%rsp), %r12
    0000029a: 	callq	clock@PLT # Offset: 666
    0000029f: 	pxor	%xmm0, %xmm0
    000002a3: 	movq	0x10(%rsp), %r13
    000002a8: 	movq	%rax, end_time(%rip)
    000002af: 	subq	start_time(%rip), %rax
    000002b6: 	cvtsi2sd	%rax, %xmm0
    000002bb: 	divsd	DATAat0x53788(%rip), %xmm0
    000002c3: 	addsd	0x30(%rsp), %xmm0
    000002c9: 	movq	0x8(%rsp), %rax
    000002ce: 	movq	%rax, %rbx
    000002d1: 	addq	%rax, %r13
    000002d4: 	movsd	%xmm0, 0x30(%rsp)
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4680:
    000002e0: 	movq	(%rbx), %r14
    000002e3: 	testq	%r14, %r14
    000002e6: 	je	.Ltmp4676 # Offset: 742
    000002e8: 	movq	0x10(%r14), %rbp
    000002ec: 	testq	%rbp, %rbp
    000002ef: 	je	.Ltmp4677 # Offset: 751
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp4678:
    000002f8: 	movq	%rbp, %rdi
    000002fb: 	movq	(%rbp), %rbp
    000002ff: 	movl	$0x10, %esi
    00000304: 	callq	_ZdlPvm@PLT # Offset: 772
    00000309: 	testq	%rbp, %rbp
    0000030c: 	jne	.Ltmp4678 # Offset: 780
.Ltmp4677:
    0000030e: 	movq	0x8(%r14), %rax
    00000312: 	movq	(%r14), %rdi
    00000315: 	xorl	%esi, %esi
    00000317: 	leaq	(,%rax,8), %rdx
    0000031f: 	callq	memset@PLT # Offset: 799
    00000324: 	movq	(%r14), %rdi
    00000327: 	leaq	0x30(%r14), %rax
    0000032b: 	movq	0x8(%r14), %rsi
    0000032f: 	movq	$0x0, 0x18(%r14)
    00000337: 	movq	$0x0, 0x10(%r14)
    0000033f: 	cmpq	%rax, %rdi
    00000342: 	je	.Ltmp4679 # Offset: 834
    00000344: 	shlq	$0x3, %rsi
    00000348: 	callq	_ZdlPvm@PLT # Offset: 840
.Ltmp4679:
    0000034d: 	movl	$0x38, %esi
    00000352: 	movq	%r14, %rdi
    00000355: 	callq	_ZdlPvm@PLT # Offset: 853
.Ltmp4676:
    0000035a: 	movq	$0x0, (%rbx)
    00000361: 	addq	$0x8, %rbx
    00000365: 	cmpq	%rbx, %r13
    00000368: 	jne	.Ltmp4680 # Offset: 872
    0000036e: 	movl	0x28(%rsp), %ecx
    00000372: 	movl	iterations(%rip), %r14d
    00000379: 	addl	%ecx, 0x40(%rsp)
    0000037d: 	movl	0x40(%rsp), %eax
    00000381: 	cmpl	%eax, %r14d
    00000384: 	jg	.Ltmp4681 # Offset: 900
.Ltmp4692:
    0000038a: 	movq	0x48(%rsp), %rdi
    0000038f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 911
    00000394: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000039b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003a2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a9: 	je	.Ltmp4682 # Offset: 937
.Ltmp4691:
    000003af: 	movq	-0x20(%rax), %rdi
    000003b3: 	movsd	0x30(%rsp), %xmm0
    000003b9: 	callq	_Z13record_resultdPKc # Offset: 953
    000003be: 	cmpq	$0x0, 0x8(%rsp)
    000003c4: 	je	.Ltmp4683 # Offset: 964
    000003ca: 	movq	0x78(%rsp), %rax
    000003cf: 	subq	%fs:0x28, %rax
    000003d8: 	jne	.Ltmp4684 # Offset: 984
    000003de: 	movq	0x70(%rsp), %rsi
    000003e3: 	movq	0x8(%rsp), %rdi
    000003e8: 	addq	$0x88, %rsp
    000003ef: 	popq	%rbx
    000003f0: 	popq	%rbp
    000003f1: 	subq	%rdi, %rsi
    000003f4: 	popq	%r12
    000003f6: 	popq	%r13
    000003f8: 	popq	%r14
    000003fa: 	popq	%r15
    000003fc: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1020
    00000401: 	nopl	(%rax) # Size: 7
.Ltmp4670:
    00000408: 	movl	$0xc70f6907, %edx
    0000040d: 	leaq	0x58(%rsp), %rdi
    00000412: 	movl	$0x8, %esi
    00000417: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1047
    0000041c: 	xorl	%edx, %edx
    0000041e: 	divq	%r15
    00000421: 	jmp	.Ltmp4685 # Offset: 1057
    00000426: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4672:
    00000430: 	movq	(%r12), %rcx
    00000434: 	leaq	(%rcx,%rbx,8), %rax
    00000438: 	movq	(%rax), %rsi
    0000043b: 	movq	%rsi, (%rcx,%rdx,8)
    0000043f: 	leaq	0x10(%r12), %rcx
    00000444: 	cmpq	%rcx, (%rax)
    00000447: 	je	.Ltmp4686 # Offset: 1095
.Ltmp4693:
    0000044d: 	movq	$0x0, (%rax)
    00000454: 	jmp	.Ltmp4671 # Offset: 1108
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp4674:
    00000460: 	movq	(%r12), %rax
    00000464: 	leaq	0x10(%r12), %rdx
    00000469: 	leaq	(%rax,%rbx,8), %rax
    0000046d: 	cmpq	%rdx, (%rax)
    00000470: 	jne	.Ltmp4687 # Offset: 1136
    00000472: 	movq	$0x0, 0x10(%r12)
.Ltmp4687:
    0000047b: 	movq	$0x0, (%rax)
    00000482: 	movq	0x60(%rsp), %rax
    00000487: 	movq	%rax, 0x8(%rsp)
    0000048c: 	jmp	.Ltmp4688 # Offset: 1164
    00000491: 	nopl	(%rax) # Size: 7
.Ltmp4666:
    00000498: 	movl	$0xc70f6907, %edx
    0000049d: 	leaq	0x58(%rsp), %rdi
    000004a2: 	movl	$0x8, %esi
    000004a7: 	movq	%r8, 0x20(%rsp)
    000004ac: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1196
    000004b1: 	xorl	%edx, %edx
    000004b3: 	movq	0x20(%rsp), %r8
    000004b8: 	divq	%rbp
    000004bb: 	movq	%rdx, %rbx
    000004be: 	leaq	(,%rdx,8), %rax
    000004c6: 	jmp	.Ltmp4689 # Offset: 1222
.Ltmp4683:
    000004cb: 	movq	0x78(%rsp), %rax
    000004d0: 	subq	%fs:0x28, %rax
    000004d9: 	jne	.Ltmp4684 # Offset: 1241
    000004db: 	addq	$0x88, %rsp
    000004e2: 	popq	%rbx
    000004e3: 	popq	%rbp
    000004e4: 	popq	%r12
    000004e6: 	popq	%r13
    000004e8: 	popq	%r14
    000004ea: 	popq	%r15
    000004ec: 	retq # Offset: 1260
.Ltmp4659:
    000004ed: 	movq	$0x3e8, 0x28(%rsp)
.Ltmp4660:
    000004f6: 	movq	$0x0, 0x70(%rsp)
    000004ff: 	pxor	%xmm0, %xmm0
    00000503: 	movaps	%xmm0, 0x60(%rsp)
    00000508: 	jmp	.Ltmp4690 # Offset: 1288
.Ltmp4682:
    0000050d: 	movq	-0x8(%rdx), %rax
    00000511: 	addq	$0x200, %rax
    00000517: 	jmp	.Ltmp4691 # Offset: 1303
.Ltmp4661:
    0000051c: 	pxor	%xmm4, %xmm4
    00000520: 	movsd	%xmm4, 0x30(%rsp)
    00000526: 	jmp	.Ltmp4692 # Offset: 1318
.Ltmp4684:
    0000052b: 	callq	__stack_chk_fail@PLT # Offset: 1323
.Ltmp4686:
    00000530: 	movq	%r14, 0x10(%r12)
    00000535: 	jmp	.Ltmp4693 # Offset: 1333
    0000053a: 	endbr64
    0000053e: 	movq	%rax, %rbp
    00000541: 	movq	0x60(%rsp), %rdi
    00000546: 	movq	0x70(%rsp), %rsi
    0000054b: 	subq	%rdi, %rsi
    0000054e: 	testq	%rdi, %rdi
    00000551: 	je	.Ltmp4694 # Offset: 1361
    00000553: 	callq	_ZdlPvm@PLT # Offset: 1363
.Ltmp4694:
    00000558: 	movq	%rbp, %rdi
    0000055b: 	callq	_Unwind_Resume@PLT # Offset: 1371
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_eraseall_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_clearall_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 282
  State       : disassembled
  Address     : 0x2f750
  Size        : 0x3b6
  MaxSize     : 0x3c0
  Offset      : 0x2f750
  Section     : .text
  Orc Section : .local.text._Z18test_clearall_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0281:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rdx, 0x38(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x8(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movabsq	$0x500000000, %rax
    00000041: 	divq	%rcx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	cmpq	$0x3e8, %rax
    0000004f: 	ja	.Ltmp4695 # Offset: 79
    00000055: 	cmpq	$0x3, %rax
    00000059: 	ja	.Ltmp4696 # Offset: 89
    0000005f: 	movq	$0x0, 0x50(%rsp)
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	$0x4, 0x10(%rsp)
    00000075: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp4713:
    0000007a: 	movq	0x10(%rsp), %rbx
    0000007f: 	leaq	0x40(%rsp), %rdi
    00000084: 	movq	%rbx, %rsi
    00000087: 	callq	_ZNSt6vectorIPSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 135
    0000008c: 	movq	0x40(%rsp), %rcx
    00000091: 	movl	iterations(%rip), %eax
    00000097: 	movq	%rcx, 0x20(%rsp)
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp4697 # Offset: 158
    000000a4: 	addq	$0x8, %rcx
    000000a8: 	movl	%ebx, 0x2c(%rsp)
    000000ac: 	pxor	%xmm2, %xmm2
    000000b0: 	movl	$0x0, 0x28(%rsp)
    000000b8: 	movq	%rcx, 0x30(%rsp)
    000000bd: 	movsd	%xmm2, 0x18(%rsp)
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4709:
    000000c8: 	movslq	0x28(%rsp), %rdx
    000000cd: 	movslq	%eax, %rcx
    000000d0: 	movq	0x20(%rsp), %r14
    000000d5: 	movq	%rdx, %rsi
    000000d8: 	addq	0x10(%rsp), %rdx
    000000dd: 	movq	%r14, %r13
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x2c(%rsp), %eax
    000000ea: 	movq	0x30(%rsp), %rcx
    000000ef: 	subl	$0x1, %eax
    000000f2: 	leaq	(%rcx,%rax,8), %r15
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4700:
    00000100: 	movl	$0x38, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	%rax, %rbp
    0000010d: 	leaq	0x30(%rax), %rax
    00000111: 	movq	%rax, (%rbp)
    00000115: 	movq	0x8(%rsp), %rax
    0000011a: 	movq	$0x1, 0x8(%rbp)
    00000122: 	movq	$0x0, 0x10(%rbp)
    0000012a: 	movq	%rax, %rbx
    0000012d: 	movq	$0x0, 0x18(%rbp)
    00000135: 	movl	$0x3f800000, 0x20(%rbp)
    0000013c: 	movq	$0x0, 0x28(%rbp)
    00000144: 	movq	$0x0, 0x30(%rbp)
    0000014c: 	cmpq	%rax, %r12
    0000014f: 	je	.Ltmp4698 # Offset: 335
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp4699:
    00000158: 	movq	%rbx, %rsi
    0000015b: 	movq	%rbp, %rdi
    0000015e: 	addq	$0x8, %rbx
    00000162: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEESt4pairINS1_14_Node_iteratorIdLb1ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE.constprop.0.isra.0/1" # Offset: 354
    00000167: 	cmpq	%rbx, %r12
    0000016a: 	jne	.Ltmp4699 # Offset: 362
.Ltmp4698:
    0000016c: 	movq	%rbp, (%r14)
    0000016f: 	addq	$0x8, %r14
    00000173: 	cmpq	%r15, %r14
    00000176: 	jne	.Ltmp4700 # Offset: 374
    00000178: 	callq	clock@PLT # Offset: 376
    0000017d: 	movq	0x20(%rsp), %rbp
    00000182: 	movq	%rax, start_time(%rip)
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp4703:
    00000190: 	movq	(%rbp), %rbx
    00000194: 	movq	0x10(%rbx), %r14
    00000198: 	testq	%r14, %r14
    0000019b: 	je	.Ltmp4701 # Offset: 411
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp4702:
    000001a0: 	movq	%r14, %rdi
    000001a3: 	movq	(%r14), %r14
    000001a6: 	movl	$0x10, %esi
    000001ab: 	callq	_ZdlPvm@PLT # Offset: 427
    000001b0: 	testq	%r14, %r14
    000001b3: 	jne	.Ltmp4702 # Offset: 435
.Ltmp4701:
    000001b5: 	movq	0x8(%rbx), %rax
    000001b9: 	movq	(%rbx), %rdi
    000001bc: 	xorl	%esi, %esi
    000001be: 	addq	$0x8, %rbp
    000001c2: 	leaq	(,%rax,8), %rdx
    000001ca: 	callq	memset@PLT # Offset: 458
    000001cf: 	movq	$0x0, 0x18(%rbx)
    000001d7: 	movq	$0x0, 0x10(%rbx)
    000001df: 	cmpq	%rbp, %r15
    000001e2: 	jne	.Ltmp4703 # Offset: 482
    000001e4: 	callq	clock@PLT # Offset: 484
    000001e9: 	pxor	%xmm0, %xmm0
    000001ed: 	movq	%rax, end_time(%rip)
    000001f4: 	subq	start_time(%rip), %rax
    000001fb: 	cvtsi2sd	%rax, %xmm0
    00000200: 	divsd	DATAat0x53788(%rip), %xmm0
    00000208: 	addsd	0x18(%rsp), %xmm0
    0000020e: 	movsd	%xmm0, 0x18(%rsp)
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp4708:
    00000218: 	movq	(%r13), %rbp
    0000021c: 	testq	%rbp, %rbp
    0000021f: 	je	.Ltmp4704 # Offset: 543
    00000221: 	movq	0x10(%rbp), %rbx
    00000225: 	testq	%rbx, %rbx
    00000228: 	je	.Ltmp4705 # Offset: 552
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4706:
    00000230: 	movq	%rbx, %rdi
    00000233: 	movq	(%rbx), %rbx
    00000236: 	movl	$0x10, %esi
    0000023b: 	callq	_ZdlPvm@PLT # Offset: 571
    00000240: 	testq	%rbx, %rbx
    00000243: 	jne	.Ltmp4706 # Offset: 579
.Ltmp4705:
    00000245: 	movq	0x8(%rbp), %rax
    00000249: 	movq	(%rbp), %rdi
    0000024d: 	xorl	%esi, %esi
    0000024f: 	leaq	(,%rax,8), %rdx
    00000257: 	callq	memset@PLT # Offset: 599
    0000025c: 	movq	(%rbp), %rdi
    00000260: 	leaq	0x30(%rbp), %rax
    00000264: 	movq	$0x0, 0x18(%rbp)
    0000026c: 	movq	$0x0, 0x10(%rbp)
    00000274: 	movq	0x8(%rbp), %rsi
    00000278: 	cmpq	%rax, %rdi
    0000027b: 	je	.Ltmp4707 # Offset: 635
    0000027d: 	shlq	$0x3, %rsi
    00000281: 	callq	_ZdlPvm@PLT # Offset: 641
.Ltmp4707:
    00000286: 	movl	$0x38, %esi
    0000028b: 	movq	%rbp, %rdi
    0000028e: 	callq	_ZdlPvm@PLT # Offset: 654
.Ltmp4704:
    00000293: 	movq	$0x0, (%r13)
    0000029b: 	addq	$0x8, %r13
    0000029f: 	cmpq	%r13, %r15
    000002a2: 	jne	.Ltmp4708 # Offset: 674
    000002a8: 	movl	0x10(%rsp), %ecx
    000002ac: 	movl	iterations(%rip), %eax
    000002b2: 	addl	%ecx, 0x28(%rsp)
    000002b6: 	movl	0x28(%rsp), %ecx
    000002ba: 	cmpl	%ecx, %eax
    000002bc: 	jg	.Ltmp4709 # Offset: 700
.Ltmp4715:
    000002c2: 	movq	0x38(%rsp), %rdi
    000002c7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 711
    000002cc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002d3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002da: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e1: 	je	.Ltmp4710 # Offset: 737
.Ltmp4714:
    000002e7: 	movq	-0x20(%rax), %rdi
    000002eb: 	movsd	0x18(%rsp), %xmm0
    000002f1: 	callq	_Z13record_resultdPKc # Offset: 753
    000002f6: 	cmpq	$0x0, 0x20(%rsp)
    000002fc: 	je	.Ltmp4711 # Offset: 764
    000002fe: 	movq	0x58(%rsp), %rax
    00000303: 	subq	%fs:0x28, %rax
    0000030c: 	jne	.Ltmp4712 # Offset: 780
    0000030e: 	movq	0x50(%rsp), %rsi
    00000313: 	movq	0x20(%rsp), %rdi
    00000318: 	addq	$0x68, %rsp
    0000031c: 	popq	%rbx
    0000031d: 	popq	%rbp
    0000031e: 	subq	%rdi, %rsi
    00000321: 	popq	%r12
    00000323: 	popq	%r13
    00000325: 	popq	%r14
    00000327: 	popq	%r15
    00000329: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 809
.Ltmp4711:
    0000032e: 	movq	0x58(%rsp), %rax
    00000333: 	subq	%fs:0x28, %rax
    0000033c: 	jne	.Ltmp4712 # Offset: 828
    0000033e: 	addq	$0x68, %rsp
    00000342: 	popq	%rbx
    00000343: 	popq	%rbp
    00000344: 	popq	%r12
    00000346: 	popq	%r13
    00000348: 	popq	%r14
    0000034a: 	popq	%r15
    0000034c: 	retq # Offset: 844
.Ltmp4695:
    0000034d: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp4696:
    00000356: 	movq	$0x0, 0x50(%rsp)
    0000035f: 	pxor	%xmm0, %xmm0
    00000363: 	movaps	%xmm0, 0x40(%rsp)
    00000368: 	jmp	.Ltmp4713 # Offset: 872
.Ltmp4710:
    0000036d: 	movq	-0x8(%rdx), %rax
    00000371: 	addq	$0x200, %rax
    00000377: 	jmp	.Ltmp4714 # Offset: 887
.Ltmp4697:
    0000037c: 	pxor	%xmm3, %xmm3
    00000380: 	movsd	%xmm3, 0x18(%rsp)
    00000386: 	jmp	.Ltmp4715 # Offset: 902
.Ltmp4712:
    0000038b: 	callq	__stack_chk_fail@PLT # Offset: 907
    00000390: 	endbr64
    00000394: 	movq	%rax, %rbp
    00000397: 	movq	0x40(%rsp), %rdi
    0000039c: 	movq	0x50(%rsp), %rsi
    000003a1: 	subq	%rdi, %rsi
    000003a4: 	testq	%rdi, %rdi
    000003a7: 	je	.Ltmp4716 # Offset: 935
    000003a9: 	callq	_ZdlPvm@PLT # Offset: 937
.Ltmp4716:
    000003ae: 	movq	%rbp, %rdi
    000003b1: 	callq	_Unwind_Resume@PLT # Offset: 945
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_clearall_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_erase_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 283
  State       : disassembled
  Address     : 0x2fb10
  Size        : 0x6c8
  MaxSize     : 0x6d0
  Offset      : 0x2fb10
  Section     : .text
  Orc Section : .local.text._Z15test_erase_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0282:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0xb8, %rsp
    00000018: 	movq	%rdx, 0x30(%rsp)
    0000001d: 	xorl	%edx, %edx
    0000001f: 	movq	%rcx, 0x68(%rsp)
    00000024: 	movq	%rsi, %rcx
    00000027: 	movq	%rdi, 0x28(%rsp)
    0000002c: 	subq	%rdi, %rcx
    0000002f: 	movq	%r8, 0x78(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0xa8(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	movabsq	$0x500000000, %rax
    00000051: 	divq	%rcx
    00000054: 	movq	%rax, 0x38(%rsp)
    00000059: 	cmpq	$0x3e8, %rax
    0000005f: 	ja	.Ltmp4717 # Offset: 95
    00000065: 	cmpq	$0x3, %rax
    00000069: 	ja	.Ltmp4718 # Offset: 105
    0000006f: 	movq	$0x0, 0xa0(%rsp)
    0000007b: 	pxor	%xmm0, %xmm0
    0000007f: 	movq	$0x4, 0x38(%rsp)
    00000088: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp4760:
    00000090: 	movq	0x38(%rsp), %rbx
    00000095: 	leaq	0x90(%rsp), %rdi
    0000009d: 	movq	%rbx, %rsi
    000000a0: 	callq	_ZNSt6vectorIPSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 160
    000000a5: 	movq	0x90(%rsp), %rcx
    000000ad: 	movl	iterations(%rip), %eax
    000000b3: 	movq	%rcx, 0x48(%rsp)
    000000b8: 	testl	%eax, %eax
    000000ba: 	jle	.Ltmp4719 # Offset: 186
    000000c0: 	addq	$0x8, %rcx
    000000c4: 	movl	%ebx, 0x64(%rsp)
    000000c8: 	movl	$0xc70f6907, %r14d
    000000ce: 	movq	$0x0, 0x40(%rsp)
    000000d7: 	movl	$0x0, 0x60(%rsp)
    000000df: 	movq	%rcx, 0x70(%rsp)
.Ltmp4750:
    000000e4: 	movslq	0x60(%rsp), %rdx
    000000e9: 	movslq	%eax, %rcx
    000000ec: 	movq	0x48(%rsp), %r15
    000000f1: 	movq	%rdx, %rdi
    000000f4: 	addq	0x38(%rsp), %rdx
    000000f9: 	movq	%r15, 0x50(%rsp)
    000000fe: 	subl	%edi, %eax
    00000100: 	cmpq	%rcx, %rdx
    00000103: 	cmovbl	0x64(%rsp), %eax
    00000108: 	movq	0x70(%rsp), %rcx
    0000010d: 	subl	$0x1, %eax
    00000110: 	leaq	(%rcx,%rax,8), %rax
    00000114: 	movq	%rax, 0x18(%rsp)
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp4722:
    00000120: 	movl	$0x38, %edi
    00000125: 	callq	_Znwm@PLT # Offset: 293
    0000012a: 	movq	%rax, %rbp
    0000012d: 	leaq	0x30(%rax), %rax
    00000131: 	movq	%rax, (%rbp)
    00000135: 	movq	0x28(%rsp), %rax
    0000013a: 	movq	$0x1, 0x8(%rbp)
    00000142: 	movq	$0x0, 0x10(%rbp)
    0000014a: 	movq	%rax, %rbx
    0000014d: 	movq	$0x0, 0x18(%rbp)
    00000155: 	movl	$0x3f800000, 0x20(%rbp)
    0000015c: 	movq	$0x0, 0x28(%rbp)
    00000164: 	movq	$0x0, 0x30(%rbp)
    0000016c: 	cmpq	%rax, %r12
    0000016f: 	je	.Ltmp4720 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp4721:
    00000178: 	movq	%rbx, %rsi
    0000017b: 	movq	%rbp, %rdi
    0000017e: 	addq	$0x8, %rbx
    00000182: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEESt4pairINS1_14_Node_iteratorIdLb1ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE.constprop.0.isra.0/1" # Offset: 386
    00000187: 	cmpq	%rbx, %r12
    0000018a: 	jne	.Ltmp4721 # Offset: 394
.Ltmp4720:
    0000018c: 	movq	%rbp, (%r15)
    0000018f: 	addq	$0x8, %r15
    00000193: 	cmpq	%r15, 0x18(%rsp)
    00000198: 	jne	.Ltmp4722 # Offset: 408
    0000019a: 	callq	clock@PLT # Offset: 410
    0000019f: 	movq	0x68(%rsp), %r13
    000001a4: 	movq	%rax, start_time(%rip)
    000001ab: 	cmpq	%r13, 0x30(%rsp)
    000001b0: 	je	.Ltmp4723 # Offset: 432
    000001b6: 	movq	0x48(%rsp), %rax
    000001bb: 	movq	%r12, 0x58(%rsp)
    000001c0: 	movq	%rax, 0x10(%rsp)
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp4744:
    000001c8: 	movq	0x10(%rsp), %rax
    000001cd: 	movq	0x30(%rsp), %r12
    000001d2: 	movq	(%rax), %rbx
    000001d5: 	jmp	.Ltmp4724 # Offset: 469
    000001d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4732:
    000001e0: 	movq	(%rbp), %rsi
    000001e4: 	testq	%rsi, %rsi
    000001e7: 	je	.Ltmp4725 # Offset: 487
    000001ed: 	movsd	0x8(%rsi), %xmm0
    000001f2: 	pxor	%xmm4, %xmm4
    000001f6: 	movq	0x8(%rbx), %r15
    000001fa: 	movsd	%xmm0, 0x88(%rsp)
    00000203: 	ucomisd	%xmm4, %xmm0
    00000207: 	jp	.Ltmp4726 # Offset: 519
    0000020d: 	jne	.Ltmp4726 # Offset: 525
    00000213: 	testq	%rcx, %rcx
    00000216: 	jne	.Ltmp4727 # Offset: 534
.Ltmp4755:
    0000021c: 	movq	%rbp, %r15
    0000021f: 	movq	%r8, %rbp
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4738:
    00000228: 	movq	%rsi, (%rbp)
    0000022c: 	movq	%r15, %rdi
    0000022f: 	movl	$0x10, %esi
    00000234: 	callq	_ZdlPvm@PLT # Offset: 564
    00000239: 	subq	$0x1, 0x18(%rbx)
.Ltmp4730:
    0000023e: 	cmpq	%r12, %r13
    00000241: 	je	.Ltmp4728 # Offset: 577
.Ltmp4724:
    00000247: 	movsd	(%r12), %xmm0
    0000024d: 	pxor	%xmm1, %xmm1
    00000251: 	addq	$0x8, %r12
    00000255: 	movsd	%xmm0, 0x88(%rsp)
    0000025e: 	ucomisd	%xmm1, %xmm0
    00000262: 	jp	.Ltmp4729 # Offset: 610
    00000268: 	movl	$0x0, %eax
    0000026d: 	jne	.Ltmp4729 # Offset: 621
.Ltmp4741:
    00000273: 	xorl	%edx, %edx
    00000275: 	divq	0x8(%rbx)
    00000279: 	leaq	(,%rdx,8), %r9
    00000281: 	movq	%rdx, %rcx
    00000284: 	movq	(%rbx), %rdx
    00000287: 	leaq	(%rdx,%r9), %rax
    0000028b: 	movq	(%rax), %r8
    0000028e: 	testq	%r8, %r8
    00000291: 	je	.Ltmp4730 # Offset: 657
    00000293: 	movq	(%r8), %rbp
    00000296: 	movsd	0x8(%rbp), %xmm0
    0000029b: 	ucomisd	-0x8(%r12), %xmm0
    000002a2: 	jp	.Ltmp4731 # Offset: 674
    000002a4: 	je	.Ltmp4732 # Offset: 676
.Ltmp4731:
    000002aa: 	movq	(%rbp), %rax
    000002ae: 	testq	%rax, %rax
    000002b1: 	je	.Ltmp4730 # Offset: 689
.Ltmp4736:
    000002b3: 	movsd	0x8(%rax), %xmm0
    000002b8: 	pxor	%xmm2, %xmm2
    000002bc: 	movq	0x8(%rbx), %r15
    000002c0: 	movsd	%xmm0, 0x88(%rsp)
    000002c9: 	ucomisd	%xmm2, %xmm0
    000002cd: 	jp	.Ltmp4733 # Offset: 717
    000002d3: 	movl	$0x0, %edx
    000002d8: 	jne	.Ltmp4733 # Offset: 728
.Ltmp4742:
    000002de: 	cmpq	%rdx, %rcx
    000002e1: 	jne	.Ltmp4730 # Offset: 737
    000002e7: 	movq	(%rbp), %r15
    000002eb: 	movsd	-0x8(%r12), %xmm0
    000002f2: 	ucomisd	0x8(%r15), %xmm0
    000002f8: 	jp	.Ltmp4734 # Offset: 760
    000002fa: 	je	.Ltmp4735 # Offset: 762
.Ltmp4734:
    000002fc: 	movq	%r15, %rbp
    000002ff: 	movq	(%rbp), %rax
    00000303: 	testq	%rax, %rax
    00000306: 	jne	.Ltmp4736 # Offset: 774
    00000308: 	jmp	.Ltmp4730 # Offset: 776
    0000030d: 	nopl	(%rax) # Size: 3
.Ltmp4735:
    00000310: 	movq	(%rbx), %rdx
    00000313: 	movq	(%r15), %rsi
    00000316: 	leaq	(%rdx,%r9), %rax
    0000031a: 	cmpq	%rbp, (%rax)
    0000031d: 	je	.Ltmp4737 # Offset: 797
    00000323: 	testq	%rsi, %rsi
    00000326: 	je	.Ltmp4738 # Offset: 806
    0000032c: 	movsd	0x8(%rsi), %xmm0
    00000331: 	pxor	%xmm3, %xmm3
    00000335: 	movq	0x8(%rbx), %r8
    00000339: 	movsd	%xmm0, 0x88(%rsp)
    00000342: 	ucomisd	%xmm3, %xmm0
    00000346: 	jp	.Ltmp4739 # Offset: 838
    00000348: 	movl	$0x0, %edx
    0000034d: 	jne	.Ltmp4739 # Offset: 845
.Ltmp4743:
    0000034f: 	cmpq	%rdx, %rcx
    00000352: 	je	.Ltmp4740 # Offset: 850
    00000354: 	movq	(%rbx), %rax
    00000357: 	movq	%rbp, (%rax,%rdx,8)
.Ltmp4740:
    0000035b: 	movq	(%r15), %rsi
    0000035e: 	jmp	.Ltmp4738 # Offset: 862
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4729:
    00000368: 	leaq	0x88(%rsp), %rdi
    00000370: 	movq	%r14, %rdx
    00000373: 	movl	$0x8, %esi
    00000378: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 888
    0000037d: 	jmp	.Ltmp4741 # Offset: 893
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4733:
    00000388: 	movq	%r14, %rdx
    0000038b: 	movl	$0x8, %esi
    00000390: 	movq	%rcx, 0x8(%rsp)
    00000395: 	leaq	0x88(%rsp), %rdi
    0000039d: 	movq	%r9, (%rsp)
    000003a1: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 929
    000003a6: 	xorl	%edx, %edx
    000003a8: 	movq	0x8(%rsp), %rcx
    000003ad: 	movq	(%rsp), %r9
    000003b1: 	divq	%r15
    000003b4: 	jmp	.Ltmp4742 # Offset: 948
    000003b9: 	nopl	(%rax) # Size: 7
.Ltmp4739:
    000003c0: 	movq	%r14, %rdx
    000003c3: 	movl	$0x8, %esi
    000003c8: 	movq	%rcx, 0x8(%rsp)
    000003cd: 	leaq	0x88(%rsp), %rdi
    000003d5: 	movq	%r8, (%rsp)
    000003d9: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 985
    000003de: 	movq	(%rsp), %r8
    000003e2: 	xorl	%edx, %edx
    000003e4: 	movq	0x8(%rsp), %rcx
    000003e9: 	divq	%r8
    000003ec: 	jmp	.Ltmp4743 # Offset: 1004
    000003f1: 	nopl	(%rax) # Size: 7
.Ltmp4728:
    000003f8: 	addq	$0x8, 0x10(%rsp)
    000003fe: 	movq	0x10(%rsp), %rax
    00000403: 	cmpq	%rax, 0x18(%rsp)
    00000408: 	jne	.Ltmp4744 # Offset: 1032
    0000040e: 	movq	0x58(%rsp), %r12
.Ltmp4723:
    00000413: 	callq	clock@PLT # Offset: 1043
    00000418: 	pxor	%xmm0, %xmm0
    0000041c: 	movq	0x18(%rsp), %r15
    00000421: 	movq	0x50(%rsp), %r13
    00000426: 	movq	%rax, end_time(%rip)
    0000042d: 	subq	start_time(%rip), %rax
    00000434: 	cvtsi2sd	%rax, %xmm0
    00000439: 	divsd	DATAat0x53788(%rip), %xmm0
    00000441: 	addsd	0x40(%rsp), %xmm0
    00000447: 	movsd	%xmm0, 0x40(%rsp)
    0000044d: 	nopl	(%rax) # Size: 3
.Ltmp4749:
    00000450: 	movq	(%r13), %rbp
    00000454: 	testq	%rbp, %rbp
    00000457: 	je	.Ltmp4745 # Offset: 1111
    00000459: 	movq	0x10(%rbp), %rbx
    0000045d: 	testq	%rbx, %rbx
    00000460: 	je	.Ltmp4746 # Offset: 1120
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4747:
    00000468: 	movq	%rbx, %rdi
    0000046b: 	movq	(%rbx), %rbx
    0000046e: 	movl	$0x10, %esi
    00000473: 	callq	_ZdlPvm@PLT # Offset: 1139
    00000478: 	testq	%rbx, %rbx
    0000047b: 	jne	.Ltmp4747 # Offset: 1147
.Ltmp4746:
    0000047d: 	movq	0x8(%rbp), %rax
    00000481: 	movq	(%rbp), %rdi
    00000485: 	xorl	%esi, %esi
    00000487: 	leaq	(,%rax,8), %rdx
    0000048f: 	callq	memset@PLT # Offset: 1167
    00000494: 	movq	(%rbp), %rdi
    00000498: 	leaq	0x30(%rbp), %rax
    0000049c: 	movq	$0x0, 0x18(%rbp)
    000004a4: 	movq	$0x0, 0x10(%rbp)
    000004ac: 	movq	0x8(%rbp), %rsi
    000004b0: 	cmpq	%rax, %rdi
    000004b3: 	je	.Ltmp4748 # Offset: 1203
    000004b5: 	shlq	$0x3, %rsi
    000004b9: 	callq	_ZdlPvm@PLT # Offset: 1209
.Ltmp4748:
    000004be: 	movl	$0x38, %esi
    000004c3: 	movq	%rbp, %rdi
    000004c6: 	callq	_ZdlPvm@PLT # Offset: 1222
.Ltmp4745:
    000004cb: 	movq	$0x0, (%r13)
    000004d3: 	addq	$0x8, %r13
    000004d7: 	cmpq	%r13, %r15
    000004da: 	jne	.Ltmp4749 # Offset: 1242
    000004e0: 	movl	0x38(%rsp), %ecx
    000004e4: 	movl	iterations(%rip), %eax
    000004ea: 	addl	%ecx, 0x60(%rsp)
    000004ee: 	movl	0x60(%rsp), %ecx
    000004f2: 	cmpl	%ecx, %eax
    000004f4: 	jg	.Ltmp4750 # Offset: 1268
.Ltmp4762:
    000004fa: 	movq	0x78(%rsp), %rdi
    000004ff: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1279
    00000504: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000050b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000512: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000519: 	je	.Ltmp4751 # Offset: 1305
.Ltmp4761:
    0000051f: 	movq	-0x20(%rax), %rdi
    00000523: 	movsd	0x40(%rsp), %xmm0
    00000529: 	callq	_Z13record_resultdPKc # Offset: 1321
    0000052e: 	cmpq	$0x0, 0x48(%rsp)
    00000534: 	je	.Ltmp4752 # Offset: 1332
    0000053a: 	movq	0xa8(%rsp), %rax
    00000542: 	subq	%fs:0x28, %rax
    0000054b: 	jne	.Ltmp4753 # Offset: 1355
    00000551: 	movq	0xa0(%rsp), %rsi
    00000559: 	movq	0x48(%rsp), %rdi
    0000055e: 	addq	$0xb8, %rsp
    00000565: 	popq	%rbx
    00000566: 	popq	%rbp
    00000567: 	subq	%rdi, %rsi
    0000056a: 	popq	%r12
    0000056c: 	popq	%r13
    0000056e: 	popq	%r14
    00000570: 	popq	%r15
    00000572: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1394
    00000577: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4726:
    00000580: 	leaq	0x88(%rsp), %rdi
    00000588: 	movq	%r14, %rdx
    0000058b: 	movl	$0x8, %esi
    00000590: 	movq	%r9, 0x8(%rsp)
    00000595: 	movq	%r8, (%rsp)
    00000599: 	movq	%rcx, 0x20(%rsp)
    0000059e: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1438
    000005a3: 	xorl	%edx, %edx
    000005a5: 	movq	(%rbp), %rsi
    000005a9: 	movq	(%rsp), %r8
    000005ad: 	divq	%r15
    000005b0: 	movq	0x8(%rsp), %r9
    000005b5: 	testq	%rsi, %rsi
    000005b8: 	movq	%rdx, %rdi
    000005bb: 	je	.Ltmp4754 # Offset: 1467
    000005bd: 	movq	0x20(%rsp), %rcx
    000005c2: 	cmpq	%rdx, %rcx
    000005c5: 	je	.Ltmp4755 # Offset: 1477
.Ltmp4754:
    000005cb: 	movq	(%rbx), %rdx
    000005ce: 	leaq	(%rdx,%r9), %rax
    000005d2: 	movq	(%rax), %rcx
    000005d5: 	testq	%rsi, %rsi
    000005d8: 	je	.Ltmp4756 # Offset: 1496
.Ltmp4759:
    000005da: 	movq	%rcx, (%rdx,%rdi,8)
    000005de: 	movq	(%rax), %rcx
.Ltmp4756:
    000005e1: 	leaq	0x10(%rbx), %rdx
    000005e5: 	cmpq	%rdx, %rcx
    000005e8: 	je	.Ltmp4757 # Offset: 1512
.Ltmp4758:
    000005ea: 	movq	$0x0, (%rax)
    000005f1: 	movq	%rbp, %r15
    000005f4: 	movq	(%rbp), %rsi
    000005f8: 	movq	%r8, %rbp
    000005fb: 	jmp	.Ltmp4738 # Offset: 1531
.Ltmp4725:
    00000600: 	movq	%r8, %rcx
    00000603: 	leaq	0x10(%rbx), %rdx
    00000607: 	cmpq	%rdx, %rcx
    0000060a: 	jne	.Ltmp4758 # Offset: 1546
.Ltmp4757:
    0000060c: 	movq	%rsi, 0x10(%rbx)
    00000610: 	jmp	.Ltmp4758 # Offset: 1552
    00000612: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4727:
    00000618: 	leaq	(%rdx,%r9), %rax
    0000061c: 	xorl	%edi, %edi
    0000061e: 	movq	(%rax), %rcx
    00000621: 	jmp	.Ltmp4759 # Offset: 1569
.Ltmp4752:
    00000623: 	movq	0xa8(%rsp), %rax
    0000062b: 	subq	%fs:0x28, %rax
    00000634: 	jne	.Ltmp4753 # Offset: 1588
    00000636: 	addq	$0xb8, %rsp
    0000063d: 	popq	%rbx
    0000063e: 	popq	%rbp
    0000063f: 	popq	%r12
    00000641: 	popq	%r13
    00000643: 	popq	%r14
    00000645: 	popq	%r15
    00000647: 	retq # Offset: 1607
.Ltmp4717:
    00000648: 	movq	$0x3e8, 0x38(%rsp)
.Ltmp4718:
    00000651: 	movq	$0x0, 0xa0(%rsp)
    0000065d: 	pxor	%xmm0, %xmm0
    00000661: 	movaps	%xmm0, 0x90(%rsp)
    00000669: 	jmp	.Ltmp4760 # Offset: 1641
.Ltmp4751:
    0000066e: 	movq	-0x8(%rdx), %rax
    00000672: 	addq	$0x200, %rax
    00000678: 	jmp	.Ltmp4761 # Offset: 1656
.Ltmp4719:
    0000067d: 	pxor	%xmm6, %xmm6
    00000681: 	movsd	%xmm6, 0x40(%rsp)
    00000687: 	jmp	.Ltmp4762 # Offset: 1671
.Ltmp4737:
    0000068c: 	movq	%rbp, %r8
    0000068f: 	movq	%r15, %rbp
    00000692: 	jmp	.Ltmp4732 # Offset: 1682
.Ltmp4753:
    00000697: 	callq	__stack_chk_fail@PLT # Offset: 1687
    0000069c: 	endbr64
    000006a0: 	movq	%rax, %rbp
    000006a3: 	movq	0x90(%rsp), %rdi
    000006ab: 	movq	0xa0(%rsp), %rsi
    000006b3: 	subq	%rdi, %rsi
    000006b6: 	testq	%rdi, %rdi
    000006b9: 	je	.Ltmp4763 # Offset: 1721
    000006bb: 	callq	_ZdlPvm@PLT # Offset: 1723
.Ltmp4763:
    000006c0: 	movq	%rbp, %rdi
    000006c3: 	callq	_Unwind_Resume@PLT # Offset: 1731
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_erase_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_delete_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 284
  State       : disassembled
  Address     : 0x301e0
  Size        : 0x5da
  MaxSize     : 0x5e0
  Offset      : 0x301e0
  Section     : .text
  Orc Section : .local.text._Z16test_delete_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0283:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xa8, %rsp
    00000015: 	movq	%rsi, 0x8(%rsp)
    0000001a: 	subq	%rdi, %rsi
    0000001d: 	movq	%rdx, 0x68(%rsp)
    00000022: 	xorl	%edx, %edx
    00000024: 	movq	%rdi, 0x30(%rsp)
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x98(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	movabsq	$0x500000000, %rax
    00000046: 	divq	%rsi
    00000049: 	movq	%rax, 0x28(%rsp)
    0000004e: 	cmpq	$0x3e8, %rax
    00000054: 	ja	.Ltmp4764 # Offset: 84
    0000005a: 	cmpq	$0x3, %rax
    0000005e: 	ja	.Ltmp4765 # Offset: 94
    00000064: 	movq	$0x0, 0x90(%rsp)
    00000070: 	pxor	%xmm0, %xmm0
    00000074: 	movq	$0x4, 0x28(%rsp)
    0000007d: 	movaps	%xmm0, 0x80(%rsp)
.Ltmp4795:
    00000085: 	movq	0x28(%rsp), %rbx
    0000008a: 	leaq	0x80(%rsp), %rdi
    00000092: 	movq	%rbx, %rsi
    00000095: 	callq	_ZNSt6vectorIPSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEESaIS7_EE17_M_default_appendEm # Offset: 149
    0000009a: 	movq	0x80(%rsp), %rcx
    000000a2: 	movl	iterations(%rip), %eax
    000000a8: 	movq	%rcx, 0x48(%rsp)
    000000ad: 	testl	%eax, %eax
    000000af: 	jle	.Ltmp4766 # Offset: 175
    000000b5: 	leaq	0x8(%rcx), %rsi
    000000b9: 	movl	%ebx, 0x5c(%rsp)
    000000bd: 	movq	$0x0, 0x40(%rsp)
    000000c6: 	movl	$0x0, 0x58(%rsp)
    000000ce: 	movq	%rsi, 0x60(%rsp)
.Ltmp4782:
    000000d3: 	movslq	0x58(%rsp), %rdx
    000000d8: 	movslq	%eax, %rcx
    000000db: 	leaq	0x78(%rsp), %r15
    000000e0: 	movq	%rdx, %rsi
    000000e3: 	addq	0x28(%rsp), %rdx
    000000e8: 	subl	%esi, %eax
    000000ea: 	cmpq	%rcx, %rdx
    000000ed: 	cmovbl	0x5c(%rsp), %eax
    000000f2: 	movq	0x60(%rsp), %rcx
    000000f7: 	movq	0x48(%rsp), %rsi
    000000fc: 	subl	$0x1, %eax
    000000ff: 	leaq	(%rcx,%rax,8), %rax
    00000103: 	movq	%rsi, 0x50(%rsp)
    00000108: 	movq	%rax, 0x38(%rsp)
    0000010d: 	movq	%rsi, 0x20(%rsp)
.Ltmp4776:
    00000112: 	movl	$0x38, %edi
    00000117: 	callq	_Znwm@PLT # Offset: 279
    0000011c: 	movq	%rax, %rbx
    0000011f: 	leaq	0x30(%rax), %rax
    00000123: 	movq	0x30(%rsp), %rbp
    00000128: 	movq	%rax, (%rbx)
    0000012b: 	movq	$0x1, 0x8(%rbx)
    00000133: 	movq	$0x0, 0x10(%rbx)
    0000013b: 	movq	$0x0, 0x18(%rbx)
    00000143: 	movl	$0x3f800000, 0x20(%rbx)
    0000014a: 	movq	$0x0, 0x28(%rbx)
    00000152: 	movq	$0x0, 0x30(%rbx)
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4771:
    00000160: 	cmpq	%rbp, 0x8(%rsp)
    00000165: 	je	.Ltmp4767 # Offset: 357
.Ltmp4775:
    0000016b: 	movsd	(%rbp), %xmm0
    00000170: 	pxor	%xmm1, %xmm1
    00000174: 	addq	$0x8, %rbp
    00000178: 	ucomisd	%xmm1, %xmm0
    0000017c: 	movsd	%xmm0, 0x78(%rsp)
    00000182: 	jp	.Ltmp4768 # Offset: 386
    00000188: 	movl	$0x0, %r12d
    0000018e: 	jne	.Ltmp4768 # Offset: 398
.Ltmp4788:
    00000194: 	movq	%r12, %rax
    00000197: 	xorl	%edx, %edx
    00000199: 	divq	0x8(%rbx)
    0000019d: 	movq	(%rbx), %rax
    000001a0: 	movq	(%rax,%rdx,8), %rax
    000001a4: 	movq	%rdx, %rcx
    000001a7: 	leaq	(,%rdx,8), %r14
    000001af: 	testq	%rax, %rax
    000001b2: 	je	.Ltmp4769 # Offset: 434
    000001b8: 	movq	(%rax), %r13
    000001bb: 	movsd	0x8(%r13), %xmm0
    000001c1: 	ucomisd	-0x8(%rbp), %xmm0
    000001c6: 	jp	.Ltmp4770 # Offset: 454
    000001c8: 	je	.Ltmp4771 # Offset: 456
.Ltmp4770:
    000001ca: 	movq	%r15, %rdi
    000001cd: 	movq	%r12, %r15
.Ltmp4774:
    000001d0: 	movq	(%r13), %rax
    000001d4: 	testq	%rax, %rax
    000001d7: 	je	.Ltmp4772 # Offset: 471
    000001dd: 	movsd	0x8(%rax), %xmm0
    000001e2: 	pxor	%xmm2, %xmm2
    000001e6: 	movq	0x8(%rbx), %r12
    000001ea: 	ucomisd	%xmm2, %xmm0
    000001ee: 	movsd	%xmm0, 0x78(%rsp)
    000001f4: 	jp	.Ltmp4773 # Offset: 500
    000001fa: 	movl	$0x0, %edx
    000001ff: 	jne	.Ltmp4773 # Offset: 511
.Ltmp4789:
    00000205: 	cmpq	%rcx, %rdx
    00000208: 	jne	.Ltmp4772 # Offset: 520
    0000020e: 	movq	(%r13), %r13
    00000212: 	movsd	-0x8(%rbp), %xmm0
    00000217: 	ucomisd	0x8(%r13), %xmm0
    0000021d: 	jp	.Ltmp4774 # Offset: 541
    0000021f: 	jne	.Ltmp4774 # Offset: 543
    00000221: 	movq	%rdi, %r15
    00000224: 	cmpq	%rbp, 0x8(%rsp)
    00000229: 	jne	.Ltmp4775 # Offset: 553
.Ltmp4767:
    0000022f: 	movq	0x20(%rsp), %rax
    00000234: 	movq	%rbx, (%rax)
    00000237: 	addq	$0x8, %rax
    0000023b: 	movq	%rax, 0x20(%rsp)
    00000240: 	cmpq	%rax, 0x38(%rsp)
    00000245: 	jne	.Ltmp4776 # Offset: 581
    0000024b: 	callq	clock@PLT # Offset: 587
    00000250: 	movq	0x38(%rsp), %r13
    00000255: 	movq	0x50(%rsp), %r12
    0000025a: 	movq	%rax, start_time(%rip)
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp4781:
    00000268: 	movq	(%r12), %rbp
    0000026c: 	testq	%rbp, %rbp
    0000026f: 	je	.Ltmp4777 # Offset: 623
    00000271: 	movq	0x10(%rbp), %rbx
    00000275: 	testq	%rbx, %rbx
    00000278: 	je	.Ltmp4778 # Offset: 632
    0000027a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4779:
    00000280: 	movq	%rbx, %rdi
    00000283: 	movq	(%rbx), %rbx
    00000286: 	movl	$0x10, %esi
    0000028b: 	callq	_ZdlPvm@PLT # Offset: 651
    00000290: 	testq	%rbx, %rbx
    00000293: 	jne	.Ltmp4779 # Offset: 659
.Ltmp4778:
    00000295: 	movq	0x8(%rbp), %rax
    00000299: 	movq	(%rbp), %rdi
    0000029d: 	xorl	%esi, %esi
    0000029f: 	leaq	(,%rax,8), %rdx
    000002a7: 	callq	memset@PLT # Offset: 679
    000002ac: 	movq	(%rbp), %rdi
    000002b0: 	leaq	0x30(%rbp), %rax
    000002b4: 	movq	$0x0, 0x18(%rbp)
    000002bc: 	movq	$0x0, 0x10(%rbp)
    000002c4: 	movq	0x8(%rbp), %rsi
    000002c8: 	cmpq	%rax, %rdi
    000002cb: 	je	.Ltmp4780 # Offset: 715
    000002cd: 	shlq	$0x3, %rsi
    000002d1: 	callq	_ZdlPvm@PLT # Offset: 721
.Ltmp4780:
    000002d6: 	movl	$0x38, %esi
    000002db: 	movq	%rbp, %rdi
    000002de: 	callq	_ZdlPvm@PLT # Offset: 734
.Ltmp4777:
    000002e3: 	movq	$0x0, (%r12)
    000002eb: 	addq	$0x8, %r12
    000002ef: 	cmpq	%r12, %r13
    000002f2: 	jne	.Ltmp4781 # Offset: 754
    000002f8: 	callq	clock@PLT # Offset: 760
    000002fd: 	pxor	%xmm0, %xmm0
    00000301: 	movl	0x28(%rsp), %esi
    00000305: 	addl	%esi, 0x58(%rsp)
    00000309: 	movq	%rax, end_time(%rip)
    00000310: 	subq	start_time(%rip), %rax
    00000317: 	cvtsi2sd	%rax, %xmm0
    0000031c: 	movl	0x58(%rsp), %esi
    00000320: 	divsd	DATAat0x53788(%rip), %xmm0
    00000328: 	addsd	0x40(%rsp), %xmm0
    0000032e: 	movl	iterations(%rip), %eax
    00000334: 	movsd	%xmm0, 0x40(%rsp)
    0000033a: 	cmpl	%esi, %eax
    0000033c: 	jg	.Ltmp4782 # Offset: 828
.Ltmp4797:
    00000342: 	movq	0x68(%rsp), %rdi
    00000347: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 839
    0000034c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000353: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000035a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000361: 	je	.Ltmp4783 # Offset: 865
.Ltmp4796:
    00000367: 	movq	-0x20(%rax), %rdi
    0000036b: 	movsd	0x40(%rsp), %xmm0
    00000371: 	callq	_Z13record_resultdPKc # Offset: 881
    00000376: 	cmpq	$0x0, 0x48(%rsp)
    0000037c: 	je	.Ltmp4784 # Offset: 892
    00000382: 	movq	0x98(%rsp), %rax
    0000038a: 	subq	%fs:0x28, %rax
    00000393: 	jne	.Ltmp4785 # Offset: 915
    00000399: 	movq	0x90(%rsp), %rsi
    000003a1: 	movq	0x48(%rsp), %rdi
    000003a6: 	addq	$0xa8, %rsp
    000003ad: 	popq	%rbx
    000003ae: 	popq	%rbp
    000003af: 	subq	%rdi, %rsi
    000003b2: 	popq	%r12
    000003b4: 	popq	%r13
    000003b6: 	popq	%r14
    000003b8: 	popq	%r15
    000003ba: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 954
    000003bf: 	nop # Size: 1
.Ltmp4772:
    000003c0: 	movq	%r15, %r12
    000003c3: 	movq	%rdi, %r15
.Ltmp4769:
    000003c6: 	movl	$0x10, %edi
    000003cb: 	callq	_Znwm@PLT # Offset: 971
    000003d0: 	movsd	-0x8(%rbp), %xmm0
    000003d5: 	movq	%rax, %r13
    000003d8: 	movq	0x18(%rbx), %rdx
    000003dc: 	leaq	0x20(%rbx), %rdi
    000003e0: 	movq	$0x0, (%rax)
    000003e7: 	movq	0x8(%rbx), %rsi
    000003eb: 	movl	$0x1, %ecx
    000003f0: 	movsd	%xmm0, 0x8(%rax)
    000003f5: 	movq	0x28(%rbx), %rax
    000003f9: 	movq	%rax, 0x70(%rsp)
    000003fe: 	callq	_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm@PLT # Offset: 1022
    00000403: 	movq	%rdx, %rsi
    00000406: 	testb	%al, %al
    00000408: 	jne	.Ltmp4786 # Offset: 1032
    0000040a: 	movq	(%rbx), %r12
    0000040d: 	leaq	(%r12,%r14), %rax
    00000411: 	movq	(%rax), %rdx
    00000414: 	testq	%rdx, %rdx
    00000417: 	je	.Ltmp4787 # Offset: 1047
.Ltmp4790:
    0000041d: 	movq	(%rdx), %rdx
    00000420: 	movq	%rdx, (%r13)
    00000424: 	movq	(%rax), %rax
    00000427: 	movq	%r13, (%rax)
.Ltmp4793:
    0000042a: 	addq	$0x1, 0x18(%rbx)
    0000042f: 	jmp	.Ltmp4771 # Offset: 1071
    00000434: 	nopl	(%rax) # Size: 4
.Ltmp4768:
    00000438: 	movl	$0xc70f6907, %edx
    0000043d: 	movl	$0x8, %esi
    00000442: 	movq	%r15, %rdi
    00000445: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1093
    0000044a: 	movq	%rax, %r12
    0000044d: 	jmp	.Ltmp4788 # Offset: 1101
    00000452: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4773:
    00000458: 	movl	$0xc70f6907, %edx
    0000045d: 	movl	$0x8, %esi
    00000462: 	movq	%rcx, 0x18(%rsp)
    00000467: 	movq	%rdi, 0x10(%rsp)
    0000046c: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1132
    00000471: 	xorl	%edx, %edx
    00000473: 	movq	0x18(%rsp), %rcx
    00000478: 	movq	0x10(%rsp), %rdi
    0000047d: 	divq	%r12
    00000480: 	jmp	.Ltmp4789 # Offset: 1152
    00000485: 	nopl	(%rax) # Size: 3
.Ltmp4786:
    00000488: 	leaq	0x70(%rsp), %rdx
    0000048d: 	movq	%rbx, %rdi
    00000490: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_rehashEmRKm # Offset: 1168
    00000495: 	movq	%r12, %rax
    00000498: 	xorl	%edx, %edx
    0000049a: 	movq	(%rbx), %r12
    0000049d: 	divq	0x8(%rbx)
    000004a1: 	leaq	(,%rdx,8), %r14
    000004a9: 	leaq	(%r12,%r14), %rax
    000004ad: 	movq	(%rax), %rdx
    000004b0: 	testq	%rdx, %rdx
    000004b3: 	jne	.Ltmp4790 # Offset: 1203
.Ltmp4787:
    000004b9: 	movq	0x10(%rbx), %rdx
    000004bd: 	movq	%r13, 0x10(%rbx)
    000004c1: 	movq	%rdx, (%r13)
    000004c5: 	testq	%rdx, %rdx
    000004c8: 	je	.Ltmp4791 # Offset: 1224
    000004ca: 	movsd	0x8(%rdx), %xmm0
    000004cf: 	pxor	%xmm3, %xmm3
    000004d3: 	movq	0x8(%rbx), %rcx
    000004d7: 	ucomisd	%xmm3, %xmm0
    000004db: 	movsd	%xmm0, 0x78(%rsp)
    000004e1: 	jp	.Ltmp4792 # Offset: 1249
    000004e3: 	jne	.Ltmp4792 # Offset: 1251
.Ltmp4794:
    000004e5: 	movq	%r13, (%r12)
.Ltmp4791:
    000004e9: 	leaq	0x10(%rbx), %rdx
    000004ed: 	movq	%rdx, (%rax)
    000004f0: 	jmp	.Ltmp4793 # Offset: 1264
    000004f5: 	nopl	(%rax) # Size: 3
.Ltmp4792:
    000004f8: 	movl	$0xc70f6907, %edx
    000004fd: 	movl	$0x8, %esi
    00000502: 	movq	%r15, %rdi
    00000505: 	movq	%rcx, 0x10(%rsp)
    0000050a: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1290
    0000050f: 	movq	0x10(%rsp), %rcx
    00000514: 	xorl	%edx, %edx
    00000516: 	divq	%rcx
    00000519: 	movq	(%rbx), %rax
    0000051c: 	addq	%r14, %rax
    0000051f: 	leaq	(%r12,%rdx,8), %r12
    00000523: 	jmp	.Ltmp4794 # Offset: 1315
    00000525: 	nopl	(%rax) # Size: 3
.Ltmp4764:
    00000528: 	movq	$0x3e8, 0x28(%rsp)
.Ltmp4765:
    00000531: 	movq	$0x0, 0x90(%rsp)
    0000053d: 	pxor	%xmm0, %xmm0
    00000541: 	movaps	%xmm0, 0x80(%rsp)
    00000549: 	jmp	.Ltmp4795 # Offset: 1353
.Ltmp4784:
    0000054e: 	movq	0x98(%rsp), %rax
    00000556: 	subq	%fs:0x28, %rax
    0000055f: 	jne	.Ltmp4785 # Offset: 1375
    00000561: 	addq	$0xa8, %rsp
    00000568: 	popq	%rbx
    00000569: 	popq	%rbp
    0000056a: 	popq	%r12
    0000056c: 	popq	%r13
    0000056e: 	popq	%r14
    00000570: 	popq	%r15
    00000572: 	retq # Offset: 1394
.Ltmp4783:
    00000573: 	movq	-0x8(%rdx), %rax
    00000577: 	addq	$0x200, %rax
    0000057d: 	jmp	.Ltmp4796 # Offset: 1405
.Ltmp4766:
    00000582: 	pxor	%xmm5, %xmm5
    00000586: 	movsd	%xmm5, 0x40(%rsp)
    0000058c: 	jmp	.Ltmp4797 # Offset: 1420
.Ltmp4785:
    00000591: 	callq	__stack_chk_fail@PLT # Offset: 1425
    00000596: 	endbr64
    0000059a: 	movq	%rax, %rbp
    0000059d: 	jmp	.Ltmp4798 # Offset: 1437
    0000059f: 	endbr64
    000005a3: 	movq	%rax, %rbp
    000005a6: 	jmp	.Ltmp4799 # Offset: 1446
.Ltmp4798:
    000005a8: 	movl	$0x10, %esi
    000005ad: 	movq	%r13, %rdi
    000005b0: 	callq	_ZdlPvm@PLT # Offset: 1456
.Ltmp4799:
    000005b5: 	movq	0x80(%rsp), %rdi
    000005bd: 	movq	0x90(%rsp), %rsi
    000005c5: 	subq	%rdi, %rsi
    000005c8: 	testq	%rdi, %rdi
    000005cb: 	je	.Ltmp4800 # Offset: 1483
    000005cd: 	callq	_ZdlPvm@PLT # Offset: 1485
.Ltmp4800:
    000005d2: 	movq	%rbp, %rdi
    000005d5: 	callq	_Unwind_Resume@PLT # Offset: 1493
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_delete_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeIdSaIdEE24_M_new_elements_at_frontEm" after disassembly {
  Number      : 285
  State       : disassembled
  Address     : 0x307c0
  Size        : 0x127
  MaxSize     : 0x130
  Offset      : 0x307c0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEE24_M_new_elements_at_frontEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0284:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x8, %rsp
    0000000e: 	movq	0x48(%rdi), %rcx
    00000012: 	movq	0x28(%rdi), %rdx
    00000016: 	movq	%rcx, %rax
    00000019: 	subq	%rdx, %rax
    0000001c: 	sarq	$0x3, %rax
    00000020: 	cmpq	$0x1, %rcx
    00000024: 	movq	0x30(%rdi), %rcx
    00000028: 	adcq	$-0x1, %rax
    0000002c: 	subq	0x38(%rdi), %rcx
    00000030: 	sarq	$0x3, %rcx
    00000034: 	shlq	$0x6, %rax
    00000038: 	addq	%rcx, %rax
    0000003b: 	movq	0x20(%rdi), %rcx
    0000003f: 	subq	0x10(%rdi), %rcx
    00000043: 	sarq	$0x3, %rcx
    00000047: 	addq	%rcx, %rax
    0000004a: 	movabsq	$0xfffffffffffffff, %rcx
    00000054: 	subq	%rax, %rcx
    00000057: 	cmpq	%rsi, %rcx
    0000005a: 	jb	.Ltmp4801 # Offset: 90
    0000005c: 	movq	%rsi, %r12
    0000005f: 	subq	(%rdi), %rdx
    00000062: 	movq	%rdi, %rbp
    00000065: 	addq	$0x3f, %r12
    00000069: 	sarq	$0x3, %rdx
    0000006d: 	shrq	$0x6, %r12
    00000071: 	cmpq	%rdx, %r12
    00000074: 	ja	.Ltmp4802 # Offset: 116
.Ltmp4806:
    00000076: 	testq	%r12, %r12
    00000079: 	je	.Ltmp4803 # Offset: 121
    0000007b: 	movl	$0x1, %ebx
    00000080: 	jmp	.Ltmp4804 # Offset: 128
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4805:
    00000088: 	movq	%rax, %rbx
.Ltmp4804:
    0000008b: 	movq	0x28(%rbp), %rax
    0000008f: 	movq	%rbx, %rdx
    00000092: 	movl	$0x200, %edi
    00000097: 	negq	%rdx
    0000009a: 	leaq	(%rax,%rdx,8), %r13
    0000009e: 	callq	_Znwm@PLT # Offset: 158
    000000a3: 	movq	%rax, (%r13)
    000000a7: 	leaq	0x1(%rbx), %rax
    000000ab: 	cmpq	%rbx, %r12
    000000ae: 	jne	.Ltmp4805 # Offset: 174
.Ltmp4803:
    000000b0: 	addq	$0x8, %rsp
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	popq	%r12
    000000b8: 	popq	%r13
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4802:
    000000c0: 	movl	$0x1, %edx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	callq	_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEmb # Offset: 200
    000000cd: 	jmp	.Ltmp4806 # Offset: 205
.Ltmp4801:
    000000cf: 	leaq	DATAat0x52390(%rip), %rdi
    000000d6: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 214
    000000db: 	endbr64
    000000df: 	movq	%rax, %rdi
    000000e2: 	callq	__cxa_begin_catch@PLT # Offset: 226
    000000e7: 	movl	$0x1, %r12d
.Ltmp4808:
    000000ed: 	cmpq	%rbx, %r12
    000000f0: 	je	.Ltmp4807 # Offset: 240
    000000f2: 	imulq	$-0x8, %r12, %rax
    000000f6: 	movq	0x28(%rbp), %rdx
    000000fa: 	movl	$0x200, %esi
    000000ff: 	addq	$0x1, %r12
    00000103: 	movq	(%rdx,%rax), %rdi
    00000107: 	callq	_ZdlPvm@PLT # Offset: 263
    0000010c: 	jmp	.Ltmp4808 # Offset: 268
.Ltmp4807:
    0000010e: 	callq	__cxa_rethrow@PLT # Offset: 270
    00000113: 	endbr64
    00000117: 	movq	%rax, %rbp
    0000011a: 	callq	__cxa_end_catch@PLT # Offset: 282
    0000011f: 	movq	%rbp, %rdi
    00000122: 	callq	_Unwind_Resume@PLT # Offset: 290
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEE24_M_new_elements_at_frontEm"

Binary Function "_ZSt13__heap_selectISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_S7_T0_" after disassembly {
  Number      : 286
  State       : disassembled
  Address     : 0x308f0
  Size        : 0x269
  MaxSize     : 0x270
  Offset      : 0x308f0
  Section     : .text
  Orc Section : .local.text._ZSt13__heap_selectISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0285:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x88, %rsp
    00000015: 	movdqu	(%rdi), %xmm6
    00000019: 	movq	0x18(%rsi), %rbx
    0000001d: 	movq	(%rsi), %r14
    00000020: 	movq	0x10(%rsi), %r12
    00000024: 	movq	%rdx, 0x38(%rsp)
    00000029: 	movhlps	%xmm6, %xmm7
    0000002c: 	movq	%xmm6, %r13
    00000031: 	movq	%rbx, %rbp
    00000034: 	movq	%xmm7, %rdx
    00000039: 	movdqu	0x10(%rdi), %xmm7
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x78(%rsp)
    0000004c: 	xorl	%eax, %eax
    0000004e: 	movaps	%xmm6, 0x10(%rsp)
    00000053: 	movhlps	%xmm7, %xmm6
    00000056: 	movaps	%xmm7, (%rsp)
    0000005a: 	movq	%xmm6, %rax
    0000005f: 	movq	%xmm6, 0x48(%rsp)
    00000065: 	subq	%rax, %rbp
    00000068: 	movq	%r14, %rax
    0000006b: 	sarq	$0x3, %rbp
    0000006f: 	cmpq	$0x1, %rbx
    00000073: 	adcq	$-0x1, %rbp
    00000077: 	subq	0x8(%rsi), %rax
    0000007b: 	movq	%rax, %rcx
    0000007e: 	shlq	$0x6, %rbp
    00000082: 	sarq	$0x3, %rcx
    00000086: 	addq	%rcx, %rbp
    00000089: 	movq	%xmm7, %rcx
    0000008e: 	subq	%r13, %rcx
    00000091: 	sarq	$0x3, %rcx
    00000095: 	addq	%rcx, %rbp
    00000098: 	cmpq	$0x1, %rbp
    0000009c: 	jle	.Ltmp4809 # Offset: 156
    000000a2: 	movq	%r13, %rcx
    000000a5: 	leaq	-0x2(%rbp), %rsi
    000000a9: 	leaq	0x50(%rsp), %rax
    000000ae: 	subq	%rdx, %rcx
    000000b1: 	sarq	%rsi
    000000b4: 	movq	%rax, 0x40(%rsp)
    000000b9: 	sarq	$0x3, %rcx
    000000bd: 	leaq	(%r13,%rsi,8), %r15
    000000c2: 	addq	%rsi, %rcx
    000000c5: 	jmp	.Ltmp4810 # Offset: 197
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4812:
    000000d0: 	movq	%r15, %rdx
    000000d3: 	cmpq	$0x3f, %rcx
    000000d7: 	jle	.Ltmp4811 # Offset: 215
    000000d9: 	movq	%rcx, %rdx
    000000dc: 	sarq	$0x6, %rdx
.Ltmp4813:
    000000e0: 	movq	0x48(%rsp), %rax
    000000e5: 	movq	%rdx, %r9
    000000e8: 	movq	%rcx, %rdi
    000000eb: 	shlq	$0x6, %r9
    000000ef: 	movq	(%rax,%rdx,8), %rdx
    000000f3: 	subq	%r9, %rdi
    000000f6: 	leaq	(%rdx,%rdi,8), %rdx
.Ltmp4811:
    000000fa: 	movsd	(%rdx), %xmm0
    000000fe: 	movdqa	0x10(%rsp), %xmm2
    00000104: 	movq	%rbp, %rdx
    00000107: 	movq	%rcx, 0x30(%rsp)
    0000010c: 	movdqa	(%rsp), %xmm3
    00000111: 	movq	0x40(%rsp), %rdi
    00000116: 	movq	%rsi, 0x28(%rsp)
    0000011b: 	subq	$0x8, %r15
    0000011f: 	movaps	%xmm2, 0x50(%rsp)
    00000124: 	movaps	%xmm3, 0x60(%rsp)
    00000129: 	callq	"_ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_.isra.0/1" # Offset: 297
    0000012e: 	movq	0x30(%rsp), %rcx
    00000133: 	movq	0x28(%rsp), %rsi
    00000138: 	subq	$0x1, %rcx
    0000013c: 	testq	%rsi, %rsi
    0000013f: 	je	.Ltmp4809 # Offset: 319
    00000141: 	subq	$0x1, %rsi
.Ltmp4810:
    00000145: 	testq	%rcx, %rcx
    00000148: 	jns	.Ltmp4812 # Offset: 328
    0000014a: 	movq	%rcx, %rdx
    0000014d: 	notq	%rdx
    00000150: 	shrq	$0x6, %rdx
    00000154: 	notq	%rdx
    00000157: 	jmp	.Ltmp4813 # Offset: 343
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp4809:
    00000160: 	movq	0x38(%rsp), %rax
    00000165: 	leaq	0x50(%rsp), %r15
    0000016a: 	movq	0x18(%rax), %rax
    0000016e: 	movq	%rax, 0x28(%rsp)
    00000173: 	cmpq	0x28(%rsp), %rbx
    00000178: 	je	.Ltmp4814 # Offset: 376
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4818:
    00000180: 	jae	.Ltmp4815 # Offset: 384
.Ltmp4817:
    00000182: 	movsd	(%r14), %xmm0
    00000187: 	movsd	(%r13), %xmm1
    0000018d: 	comisd	%xmm0, %xmm1
    00000191: 	ja	.Ltmp4816 # Offset: 401
.Ltmp4823:
    00000193: 	addq	$0x8, %r14
    00000197: 	cmpq	%r14, %r12
    0000019a: 	jne	.Ltmp4817 # Offset: 410
.Ltmp4820:
    0000019c: 	movq	0x8(%rbx), %r14
    000001a0: 	addq	$0x8, %rbx
    000001a4: 	leaq	0x200(%r14), %r12
    000001ab: 	cmpq	0x28(%rsp), %rbx
    000001b0: 	jne	.Ltmp4818 # Offset: 432
.Ltmp4814:
    000001b2: 	movq	0x38(%rsp), %rax
    000001b7: 	cmpq	%r14, (%rax)
    000001ba: 	jbe	.Ltmp4815 # Offset: 442
.Ltmp4821:
    000001bc: 	movsd	(%r14), %xmm0
    000001c1: 	movsd	(%r13), %xmm1
    000001c7: 	comisd	%xmm0, %xmm1
    000001cb: 	ja	.Ltmp4819 # Offset: 459
.Ltmp4824:
    000001cd: 	addq	$0x8, %r14
    000001d1: 	cmpq	%r14, %r12
    000001d4: 	je	.Ltmp4820 # Offset: 468
    000001d6: 	movq	0x38(%rsp), %rax
    000001db: 	cmpq	%r14, (%rax)
    000001de: 	ja	.Ltmp4821 # Offset: 478
.Ltmp4815:
    000001e0: 	movq	0x78(%rsp), %rax
    000001e5: 	subq	%fs:0x28, %rax
    000001ee: 	jne	.Ltmp4822 # Offset: 494
    000001f0: 	addq	$0x88, %rsp
    000001f7: 	popq	%rbx
    000001f8: 	popq	%rbp
    000001f9: 	popq	%r12
    000001fb: 	popq	%r13
    000001fd: 	popq	%r14
    000001ff: 	popq	%r15
    00000201: 	retq # Offset: 513
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4816:
    00000208: 	movdqa	0x10(%rsp), %xmm4
    0000020e: 	movdqa	(%rsp), %xmm5
    00000213: 	movq	%rbp, %rdx
    00000216: 	xorl	%esi, %esi
    00000218: 	movsd	%xmm1, (%r14)
    0000021d: 	movq	%r15, %rdi
    00000220: 	movaps	%xmm4, 0x50(%rsp)
    00000225: 	movaps	%xmm5, 0x60(%rsp)
    0000022a: 	callq	"_ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_.isra.0/1" # Offset: 554
    0000022f: 	jmp	.Ltmp4823 # Offset: 559
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp4819:
    00000238: 	movdqa	0x10(%rsp), %xmm4
    0000023e: 	movdqa	(%rsp), %xmm5
    00000243: 	movq	%rbp, %rdx
    00000246: 	xorl	%esi, %esi
    00000248: 	movsd	%xmm1, (%r14)
    0000024d: 	movq	%r15, %rdi
    00000250: 	movaps	%xmm4, 0x50(%rsp)
    00000255: 	movaps	%xmm5, 0x60(%rsp)
    0000025a: 	callq	"_ZSt13__adjust_heapISt15_Deque_iteratorIdRdPdEldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S8_T1_T2_.isra.0/1" # Offset: 602
    0000025f: 	jmp	.Ltmp4824 # Offset: 607
.Ltmp4822:
    00000264: 	callq	__stack_chk_fail@PLT # Offset: 612
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__heap_selectISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_S7_T0_"

Binary Function "_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_" after disassembly {
  Number      : 287
  State       : disassembled
  Address     : 0x30b60
  Size        : 0x14e
  MaxSize     : 0x150
  Offset      : 0x30b60
  Section     : .text
  Orc Section : .local.text._ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0286:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	subq	%rsi, %rdx
    00000009: 	pushq	%r14
    0000000b: 	movq	%rcx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdx, %rbx
    0000001a: 	sarq	$0x3, %rbx
    0000001e: 	subq	$0x8, %rsp
    00000022: 	movq	(%rcx), %rdi
    00000025: 	movq	0x10(%rcx), %rax
    00000029: 	testq	%rdx, %rdx
    0000002c: 	jle	.Ltmp4825 # Offset: 44
    00000032: 	movq	%rsi, %r13
    00000035: 	jmp	.Ltmp4826 # Offset: 53
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4830:
    00000040: 	cmpq	$0x3f, %rax
    00000044: 	jg	.Ltmp4827 # Offset: 68
    0000004a: 	addq	%r15, %rdi
    0000004d: 	subq	%rbp, %rbx
    00000050: 	movq	0x10(%r14), %rax
    00000054: 	movq	%rdi, (%r14)
    00000057: 	testq	%rbx, %rbx
    0000005a: 	jle	.Ltmp4828 # Offset: 90
.Ltmp4826:
    00000060: 	subq	%rdi, %rax
    00000063: 	movq	%r13, %rsi
    00000066: 	sarq	$0x3, %rax
    0000006a: 	cmpq	%rbx, %rax
    0000006d: 	cmovgq	%rbx, %rax
    00000071: 	leaq	(,%rax,8), %r15
    00000079: 	movq	%rax, %rbp
    0000007c: 	addq	%r15, %r13
    0000007f: 	testq	%r15, %r15
    00000082: 	je	.Ltmp4829 # Offset: 130
    00000084: 	movq	%r15, %rdx
    00000087: 	callq	memmove@PLT # Offset: 135
    0000008c: 	movq	(%r14), %rdi
.Ltmp4829:
    0000008f: 	movq	0x8(%r14), %rsi
    00000093: 	movq	%rdi, %rax
    00000096: 	subq	%rsi, %rax
    00000099: 	sarq	$0x3, %rax
    0000009d: 	addq	%rbp, %rax
    000000a0: 	movq	%rax, %rdx
    000000a3: 	jns	.Ltmp4830 # Offset: 163
    000000a5: 	movq	%rax, %rcx
    000000a8: 	notq	%rcx
    000000ab: 	shrq	$0x6, %rcx
    000000af: 	notq	%rcx
.Ltmp4831:
    000000b2: 	movq	0x18(%r14), %rax
    000000b6: 	subq	%rbp, %rbx
    000000b9: 	leaq	(%rax,%rcx,8), %r8
    000000bd: 	shlq	$0x6, %rcx
    000000c1: 	movq	(%r8), %rsi
    000000c4: 	subq	%rcx, %rdx
    000000c7: 	movq	%r8, %xmm2
    000000cc: 	leaq	(%rsi,%rdx,8), %rdi
    000000d0: 	movq	%rsi, %xmm1
    000000d5: 	leaq	0x200(%rsi), %rax
    000000dc: 	movq	%rdi, %xmm0
    000000e1: 	punpcklqdq	%xmm1, %xmm0
    000000e5: 	movups	%xmm0, (%r14)
    000000e9: 	movq	%rax, %xmm0
    000000ee: 	punpcklqdq	%xmm2, %xmm0
    000000f2: 	movups	%xmm0, 0x10(%r14)
    000000f7: 	testq	%rbx, %rbx
    000000fa: 	jg	.Ltmp4826 # Offset: 250
.Ltmp4828:
    00000100: 	movq	%rax, 0x10(%r12)
    00000105: 	movq	%rdi, %xmm0
    0000010a: 	movq	0x18(%r14), %rax
    0000010e: 	movq	%rsi, %xmm3
    00000113: 	punpcklqdq	%xmm3, %xmm0
    00000117: 	movq	%rax, 0x18(%r12)
    0000011c: 	movq	%r12, %rax
    0000011f: 	movups	%xmm0, (%r12)
    00000124: 	addq	$0x8, %rsp
    00000128: 	popq	%rbx
    00000129: 	popq	%rbp
    0000012a: 	popq	%r12
    0000012c: 	popq	%r13
    0000012e: 	popq	%r14
    00000130: 	popq	%r15
    00000132: 	retq # Offset: 306
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4827:
    00000138: 	movq	%rax, %rcx
    0000013b: 	sarq	$0x6, %rcx
    0000013f: 	jmp	.Ltmp4831 # Offset: 319
    00000144: 	nopl	(%rax) # Size: 4
.Ltmp4825:
    00000148: 	movq	0x8(%rcx), %rsi
    0000014c: 	jmp	.Ltmp4828 # Offset: 332
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_"

Binary Function "_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_" after disassembly {
  Number      : 288
  State       : disassembled
  Address     : 0x30cb0
  Size        : 0x126
  MaxSize     : 0x130
  Offset      : 0x30cb0
  Section     : .text
  Orc Section : .local.text._ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0287:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	0x18(%rdx), %rbp
    00000019: 	movq	0x18(%rsi), %rbx
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x58(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x8(%rdx), %rax
    00000031: 	movq	(%rdx), %r13
    00000034: 	movdqu	(%rcx), %xmm1
    00000038: 	movdqu	0x10(%rcx), %xmm0
    0000003d: 	movq	(%rsi), %r9
    00000040: 	movq	0x10(%rsi), %rdx
    00000044: 	movq	%rax, 0x8(%rsp)
    00000049: 	cmpq	%rbp, %rbx
    0000004c: 	je	.Ltmp4832 # Offset: 76
    00000052: 	leaq	0x10(%rsp), %r15
    00000057: 	movaps	%xmm1, 0x10(%rsp)
    0000005c: 	leaq	0x30(%rsp), %r14
    00000061: 	movq	%r9, %rsi
    00000064: 	movaps	%xmm0, 0x20(%rsp)
    00000069: 	movq	%r15, %rcx
    0000006c: 	jmp	.Ltmp4833 # Offset: 108
    0000006e: 	nop # Size: 2
.Ltmp4834:
    00000070: 	movaps	%xmm1, 0x10(%rsp)
    00000075: 	movq	%r15, %rcx
    00000078: 	movaps	%xmm0, 0x20(%rsp)
    0000007d: 	movq	(%rbx), %rsi
    00000080: 	leaq	0x200(%rsi), %rdx
.Ltmp4833:
    00000087: 	movq	%r14, %rdi
    0000008a: 	addq	$0x8, %rbx
    0000008e: 	callq	_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 142
    00000093: 	movdqa	0x30(%rsp), %xmm1
    00000099: 	movdqa	0x40(%rsp), %xmm0
    0000009f: 	cmpq	%rbx, %rbp
    000000a2: 	jne	.Ltmp4834 # Offset: 162
    000000a4: 	movq	0x8(%rsp), %rsi
    000000a9: 	movq	%r14, %rcx
    000000ac: 	movq	%r13, %rdx
    000000af: 	movq	%r15, %rdi
    000000b2: 	movaps	%xmm1, 0x30(%rsp)
    000000b7: 	movaps	%xmm0, 0x40(%rsp)
    000000bc: 	callq	_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 188
.Ltmp4836:
    000000c1: 	movdqa	0x10(%rsp), %xmm2
    000000c7: 	movdqa	0x20(%rsp), %xmm3
    000000cd: 	movups	%xmm2, (%r12)
    000000d2: 	movups	%xmm3, 0x10(%r12)
    000000d8: 	movq	0x58(%rsp), %rax
    000000dd: 	subq	%fs:0x28, %rax
    000000e6: 	jne	.Ltmp4835 # Offset: 230
    000000e8: 	addq	$0x68, %rsp
    000000ec: 	movq	%r12, %rax
    000000ef: 	popq	%rbx
    000000f0: 	popq	%rbp
    000000f1: 	popq	%r12
    000000f3: 	popq	%r13
    000000f5: 	popq	%r14
    000000f7: 	popq	%r15
    000000f9: 	retq # Offset: 249
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4832:
    00000100: 	leaq	0x10(%rsp), %rdi
    00000105: 	leaq	0x30(%rsp), %rcx
    0000010a: 	movq	%r13, %rdx
    0000010d: 	movq	%r9, %rsi
    00000110: 	movaps	%xmm1, 0x30(%rsp)
    00000115: 	movaps	%xmm0, 0x40(%rsp)
    0000011a: 	callq	_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 282
    0000011f: 	jmp	.Ltmp4836 # Offset: 287
.Ltmp4835:
    00000121: 	callq	__stack_chk_fail@PLT # Offset: 289
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_"

Binary Function "_ZSt23__copy_move_backward_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_" after disassembly {
  Number      : 289
  State       : disassembled
  Address     : 0x30de0
  Size        : 0x16a
  MaxSize     : 0x170
  Offset      : 0x30de0
  Section     : .text
  Orc Section : .local.text._ZSt23__copy_move_backward_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0288:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rsi, %rax
    0000000e: 	movq	%rdx, %rsi
    00000011: 	pushq	%r13
    00000013: 	movq	%rax, %r13
    00000016: 	pushq	%r12
    00000018: 	sarq	$0x3, %r13
    0000001c: 	movq	%rdi, %r12
    0000001f: 	pushq	%rbp
    00000020: 	movq	%rcx, %rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x8, %rsp
    00000028: 	movdqu	(%rcx), %xmm0
    0000002c: 	movhlps	%xmm0, %xmm3
    0000002f: 	movq	%xmm0, %rdx
    00000034: 	movq	%xmm3, %rcx
    00000039: 	testq	%rax, %rax
    0000003c: 	jg	.Ltmp4837 # Offset: 60
    00000042: 	jmp	.Ltmp4838 # Offset: 66
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4842:
    00000050: 	movq	0x18(%rbp), %rdi
    00000054: 	movl	$0x40, %ebx
    00000059: 	movq	-0x8(%rdi), %rdi
    0000005d: 	addq	$0x200, %rdi
.Ltmp4843:
    00000064: 	cmpq	%r13, %rbx
    00000067: 	movq	%rsi, %r14
    0000006a: 	cmovgq	%r13, %rbx
    0000006e: 	leaq	(,%rbx,8), %r8
    00000076: 	movq	%r8, %r15
    00000079: 	subq	%r8, %r14
    0000007c: 	negq	%r15
    0000007f: 	cmpq	%rsi, %r14
    00000082: 	je	.Ltmp4839 # Offset: 130
    00000084: 	movq	%r8, %rdx
    00000087: 	addq	%r15, %rdi
    0000008a: 	movq	%r14, %rsi
    0000008d: 	callq	memmove@PLT # Offset: 141
    00000092: 	movq	(%rbp), %rdx
    00000096: 	movq	0x8(%rbp), %rcx
    0000009a: 	movq	%rdx, %rax
    0000009d: 	subq	%rcx, %rax
    000000a0: 	sarq	$0x3, %rax
.Ltmp4839:
    000000a4: 	subq	%rbx, %rax
    000000a7: 	js	.Ltmp4840 # Offset: 167
    000000ad: 	addq	%r15, %rdx
    000000b0: 	cmpq	$0x3f, %rax
    000000b4: 	jle	.Ltmp4841 # Offset: 180
    000000b6: 	movq	%rax, %rdx
    000000b9: 	sarq	$0x6, %rdx
.Ltmp4844:
    000000bd: 	movq	0x18(%rbp), %rcx
    000000c1: 	leaq	(%rcx,%rdx,8), %rcx
    000000c5: 	shlq	$0x6, %rdx
    000000c9: 	movq	%rcx, 0x18(%rbp)
    000000cd: 	movq	(%rcx), %rcx
    000000d0: 	subq	%rdx, %rax
    000000d3: 	leaq	0x200(%rcx), %rsi
    000000da: 	movq	%rcx, %xmm0
    000000df: 	leaq	(%rcx,%rax,8), %rdx
    000000e3: 	movq	%rsi, %xmm2
    000000e8: 	punpcklqdq	%xmm2, %xmm0
    000000ec: 	movups	%xmm0, 0x8(%rbp)
.Ltmp4841:
    000000f0: 	movq	%rdx, %xmm0
    000000f5: 	movq	%rcx, %xmm1
    000000fa: 	subq	%rbx, %r13
    000000fd: 	movq	%rdx, (%rbp)
    00000101: 	punpcklqdq	%xmm1, %xmm0
    00000105: 	testq	%r13, %r13
    00000108: 	jle	.Ltmp4838 # Offset: 264
    0000010a: 	movq	%r14, %rsi
.Ltmp4837:
    0000010d: 	movq	%rdx, %rax
    00000110: 	subq	%rcx, %rax
    00000113: 	sarq	$0x3, %rax
    00000117: 	cmpq	%rcx, %rdx
    0000011a: 	je	.Ltmp4842 # Offset: 282
    00000120: 	movq	%rax, %rbx
    00000123: 	movq	%rdx, %rdi
    00000126: 	jmp	.Ltmp4843 # Offset: 294
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4840:
    00000130: 	movq	%rax, %rdx
    00000133: 	notq	%rdx
    00000136: 	shrq	$0x6, %rdx
    0000013a: 	notq	%rdx
    0000013d: 	jmp	.Ltmp4844 # Offset: 317
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4838:
    00000148: 	movdqu	0x10(%rbp), %xmm4
    0000014d: 	movups	%xmm0, (%r12)
    00000152: 	movq	%r12, %rax
    00000155: 	movups	%xmm4, 0x10(%r12)
    0000015b: 	addq	$0x8, %rsp
    0000015f: 	popq	%rbx
    00000160: 	popq	%rbp
    00000161: 	popq	%r12
    00000163: 	popq	%r13
    00000165: 	popq	%r14
    00000167: 	popq	%r15
    00000169: 	retq # Offset: 361
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt23__copy_move_backward_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_"

Binary Function "_ZSt13move_backwardISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_" after disassembly {
  Number      : 290
  State       : disassembled
  Address     : 0x30f50
  Size        : 0x12e
  MaxSize     : 0x130
  Offset      : 0x30f50
  Section     : .text
  Orc Section : .local.text._ZSt13move_backwardISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0289:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	0x18(%rdx), %rbx
    00000019: 	movq	0x18(%rsi), %rbp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x58(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x10(%rsi), %rax
    00000031: 	movdqu	(%rcx), %xmm1
    00000035: 	movdqu	0x10(%rcx), %xmm0
    0000003a: 	movq	(%rdx), %r9
    0000003d: 	movq	0x8(%rdx), %r10
    00000041: 	movq	(%rsi), %r13
    00000044: 	movq	%rax, 0x8(%rsp)
    00000049: 	cmpq	%rbx, %rbp
    0000004c: 	je	.Ltmp4845 # Offset: 76
    00000052: 	leaq	0x10(%rsp), %r15
    00000057: 	movaps	%xmm1, 0x10(%rsp)
    0000005c: 	movq	%r9, %rdx
    0000005f: 	movq	%r10, %rsi
    00000062: 	movaps	%xmm0, 0x20(%rsp)
    00000067: 	leaq	0x30(%rsp), %r14
    0000006c: 	movq	%r15, %rcx
    0000006f: 	jmp	.Ltmp4846 # Offset: 111
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp4847:
    00000078: 	movaps	%xmm1, 0x10(%rsp)
    0000007d: 	movq	%r15, %rcx
    00000080: 	movaps	%xmm0, 0x20(%rsp)
    00000085: 	movq	(%rbx), %rsi
    00000088: 	leaq	0x200(%rsi), %rdx
.Ltmp4846:
    0000008f: 	movq	%r14, %rdi
    00000092: 	subq	$0x8, %rbx
    00000096: 	callq	_ZSt23__copy_move_backward_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 150
    0000009b: 	movdqa	0x30(%rsp), %xmm1
    000000a1: 	movdqa	0x40(%rsp), %xmm0
    000000a7: 	cmpq	%rbx, %rbp
    000000aa: 	jne	.Ltmp4847 # Offset: 170
    000000ac: 	movq	0x8(%rsp), %rdx
    000000b1: 	movq	%r14, %rcx
    000000b4: 	movq	%r13, %rsi
    000000b7: 	movq	%r15, %rdi
    000000ba: 	movaps	%xmm1, 0x30(%rsp)
    000000bf: 	movaps	%xmm0, 0x40(%rsp)
    000000c4: 	callq	_ZSt23__copy_move_backward_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 196
.Ltmp4849:
    000000c9: 	movdqa	0x10(%rsp), %xmm2
    000000cf: 	movdqa	0x20(%rsp), %xmm3
    000000d5: 	movups	%xmm2, (%r12)
    000000da: 	movups	%xmm3, 0x10(%r12)
    000000e0: 	movq	0x58(%rsp), %rax
    000000e5: 	subq	%fs:0x28, %rax
    000000ee: 	jne	.Ltmp4848 # Offset: 238
    000000f0: 	addq	$0x68, %rsp
    000000f4: 	movq	%r12, %rax
    000000f7: 	popq	%rbx
    000000f8: 	popq	%rbp
    000000f9: 	popq	%r12
    000000fb: 	popq	%r13
    000000fd: 	popq	%r14
    000000ff: 	popq	%r15
    00000101: 	retq # Offset: 257
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4845:
    00000108: 	leaq	0x10(%rsp), %rdi
    0000010d: 	leaq	0x30(%rsp), %rcx
    00000112: 	movq	%r9, %rdx
    00000115: 	movq	%r13, %rsi
    00000118: 	movaps	%xmm1, 0x30(%rsp)
    0000011d: 	movaps	%xmm0, 0x40(%rsp)
    00000122: 	callq	_ZSt23__copy_move_backward_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 290
    00000127: 	jmp	.Ltmp4849 # Offset: 295
.Ltmp4848:
    00000129: 	callq	__stack_chk_fail@PLT # Offset: 297
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13move_backwardISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_"

Binary Function "_Z25test_find_pushback_sortedIdSt5dequeIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 291
  State       : disassembled
  Address     : 0x31080
  Size        : 0x678
  MaxSize     : 0x680
  Offset      : 0x31080
  Section     : .text
  Orc Section : .local.text._Z25test_find_pushback_sortedIdSt5dequeIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0290:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rsi, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rcx, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdi, %rbx
    0000001b: 	subq	$0x128, %rsp
    00000022: 	movq	%rdx, 0x40(%rsp)
    00000027: 	movq	%r8, 0x70(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x118(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	leaq	0xc0(%rsp), %rax
    00000047: 	movq	$0x0, 0xc0(%rsp)
    00000053: 	movq	%rax, %rdi
    00000056: 	movq	%rax, 0x48(%rsp)
    0000005b: 	movq	$0x0, 0xc8(%rsp)
    00000067: 	movaps	%xmm0, 0xd0(%rsp)
    0000006f: 	movaps	%xmm0, 0xe0(%rsp)
    00000077: 	movaps	%xmm0, 0xf0(%rsp)
    0000007f: 	movaps	%xmm0, 0x100(%rsp)
    00000087: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 135
    0000008c: 	cmpq	%r12, %rbx
    0000008f: 	je	.Ltmp4850 # Offset: 143
    00000091: 	pxor	%xmm6, %xmm6
    00000095: 	movq	0x100(%rsp), %rcx
    0000009d: 	movq	0xf0(%rsp), %r13
    000000a5: 	movsd	%xmm6, 0x38(%rsp)
    000000ab: 	movsd	%xmm6, 0x18(%rsp)
    000000b1: 	jmp	.Ltmp4851 # Offset: 177
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4853:
    000000b8: 	movsd	(%rbx), %xmm0
    000000bc: 	addq	$0x8, %r13
    000000c0: 	movsd	%xmm0, -0x8(%r13)
    000000c6: 	movq	%r13, 0xf0(%rsp)
.Ltmp4854:
    000000ce: 	movsd	0x18(%rsp), %xmm4
    000000d4: 	addsd	(%rbx), %xmm4
    000000d8: 	addq	$0x8, %rbx
    000000dc: 	movsd	%xmm4, 0x18(%rsp)
    000000e2: 	cmpq	%rbx, %r12
    000000e5: 	je	.Ltmp4852 # Offset: 229
.Ltmp4851:
    000000e7: 	leaq	-0x8(%rcx), %rax
    000000eb: 	cmpq	%rax, %r13
    000000ee: 	jne	.Ltmp4853 # Offset: 238
    000000f0: 	movq	0x48(%rsp), %rdi
    000000f5: 	movq	%rbx, %rsi
    000000f8: 	callq	_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_ # Offset: 248
    000000fd: 	movq	0xf0(%rsp), %r13
    00000105: 	movq	0x100(%rsp), %rcx
    0000010d: 	jmp	.Ltmp4854 # Offset: 269
.Ltmp4850:
    0000010f: 	pxor	%xmm7, %xmm7
    00000113: 	movq	0xf0(%rsp), %r13
    0000011b: 	movq	0x100(%rsp), %rcx
    00000123: 	movsd	%xmm7, 0x38(%rsp)
    00000129: 	movsd	%xmm7, 0x18(%rsp)
.Ltmp4852:
    0000012f: 	movq	0xf8(%rsp), %rdi
    00000137: 	movq	0x108(%rsp), %r14
    0000013f: 	movq	%r13, %xmm3
    00000144: 	movq	%rcx, 0x78(%rsp)
    00000149: 	movdqa	0xd0(%rsp), %xmm1
    00000152: 	movdqa	0xe0(%rsp), %xmm0
    0000015b: 	movq	%rdi, %xmm2
    00000160: 	movq	%r14, %xmm6
    00000165: 	movq	%rdi, 0x30(%rsp)
    0000016a: 	movhlps	%xmm0, %xmm7
    0000016d: 	punpcklqdq	%xmm2, %xmm3
    00000171: 	movq	%xmm1, %r12
    00000176: 	movhps	%xmm1, 0x10(%rsp)
    0000017b: 	movq	%rcx, %xmm2
    00000180: 	movq	%xmm7, %rax
    00000185: 	movq	%xmm7, (%rsp)
    0000018a: 	punpcklqdq	%xmm6, %xmm2
    0000018e: 	movq	%xmm0, 0x8(%rsp)
    00000194: 	cmpq	%r13, %r12
    00000197: 	je	.Ltmp4855 # Offset: 407
    0000019d: 	movq	%r14, %rbx
    000001a0: 	movl	$0x3f, %edx
    000001a5: 	leaq	0x80(%rsp), %r9
    000001ad: 	movaps	%xmm1, 0xa0(%rsp)
    000001b5: 	subq	%rax, %rbx
    000001b8: 	movq	%r13, %rax
    000001bb: 	movq	%r9, %rsi
    000001be: 	movq	%r9, 0x20(%rsp)
    000001c3: 	sarq	$0x3, %rbx
    000001c7: 	cmpq	$0x1, %r14
    000001cb: 	leaq	0xa0(%rsp), %r15
    000001d3: 	movaps	%xmm1, 0x60(%rsp)
    000001d8: 	adcq	$-0x1, %rbx
    000001dc: 	subq	%rdi, %rax
    000001df: 	movq	%r15, %rdi
    000001e2: 	movaps	%xmm0, 0xb0(%rsp)
    000001ea: 	sarq	$0x3, %rax
    000001ee: 	shlq	$0x6, %rbx
    000001f2: 	movaps	%xmm0, 0x50(%rsp)
    000001f7: 	addq	%rax, %rbx
    000001fa: 	movq	%xmm0, %rax
    000001ff: 	movaps	%xmm3, 0x80(%rsp)
    00000207: 	subq	%r12, %rax
    0000020a: 	movaps	%xmm2, 0x90(%rsp)
    00000212: 	sarq	$0x3, %rax
    00000216: 	addq	%rax, %rbx
    00000219: 	bsrq	%rbx, %rax
    0000021d: 	xorq	$0x3f, %rax
    00000221: 	subl	%eax, %edx
    00000223: 	movslq	%edx, %rdx
    00000226: 	addq	%rdx, %rdx
    00000229: 	callq	"_ZSt16__introsort_loopISt15_Deque_iteratorIdRdPdElN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_T1_.isra.0/1" # Offset: 553
    0000022e: 	cmpq	$0x10, %rbx
    00000232: 	movq	0x20(%rsp), %r9
    00000237: 	movdqa	0x50(%rsp), %xmm0
    0000023d: 	movdqa	0x60(%rsp), %xmm1
    00000243: 	movq	0x78(%rsp), %rcx
    00000248: 	jle	.Ltmp4856 # Offset: 584
    0000024e: 	movq	%r9, %rdi
    00000251: 	movl	$0x10, %esi
    00000256: 	movaps	%xmm1, 0x80(%rsp)
    0000025e: 	movaps	%xmm1, 0x50(%rsp)
    00000263: 	movaps	%xmm0, 0x90(%rsp)
    0000026b: 	movaps	%xmm0, 0x20(%rsp)
    00000270: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 624
    00000275: 	movdqa	0x50(%rsp), %xmm1
    0000027b: 	movq	%r9, %rsi
    0000027e: 	movq	%r15, %rdi
    00000281: 	movdqa	0x20(%rsp), %xmm0
    00000287: 	movaps	%xmm1, 0xa0(%rsp)
    0000028f: 	movaps	%xmm0, 0xb0(%rsp)
    00000297: 	callq	"_ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_.isra.0/1" # Offset: 663
    0000029c: 	movdqa	0x50(%rsp), %xmm1
    000002a2: 	movdqa	0x20(%rsp), %xmm0
    000002a8: 	movq	%r15, %rdi
    000002ab: 	movl	$0x10, %esi
    000002b0: 	movaps	%xmm1, 0xa0(%rsp)
    000002b8: 	movaps	%xmm0, 0xb0(%rsp)
    000002c0: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 704
    000002c5: 	movq	0xa0(%rsp), %rdi
    000002cd: 	movq	0xa8(%rsp), %r11
    000002d5: 	movq	0xb0(%rsp), %rbx
    000002dd: 	movq	0xb8(%rsp), %r9
.Ltmp4882:
    000002e5: 	leaq	-0x8(%r9), %r10
.Ltmp4881:
    000002e9: 	movq	%rdi, %rdx
    000002ec: 	cmpq	%r13, %rdi
    000002ef: 	je	.Ltmp4855 # Offset: 751
    000002f5: 	movsd	(%rdi), %xmm1
    000002f9: 	cmpq	%rdi, %r11
    000002fc: 	je	.Ltmp4857 # Offset: 764
    00000302: 	movq	%r9, %r8
    00000305: 	movq	%r11, %rcx
    00000308: 	movq	%rdi, %rsi
.Ltmp4883:
    0000030b: 	movsd	-0x8(%rsi), %xmm0
    00000310: 	leaq	-0x8(%rsi), %rax
    00000314: 	comisd	%xmm1, %xmm0
    00000318: 	ja	.Ltmp4858 # Offset: 792
    0000031a: 	jmp	.Ltmp4859 # Offset: 794
    0000031f: 	nop # Size: 1
.Ltmp4861:
    00000320: 	movsd	-0x8(%rax), %xmm0
    00000325: 	leaq	-0x8(%rax), %rsi
    00000329: 	comisd	%xmm1, %xmm0
    0000032d: 	jbe	.Ltmp4860 # Offset: 813
.Ltmp4862:
    00000333: 	movq	%rax, %rdx
    00000336: 	movq	%rsi, %rax
.Ltmp4858:
    00000339: 	movsd	%xmm0, (%rdx)
    0000033d: 	cmpq	%rax, %rcx
    00000340: 	jne	.Ltmp4861 # Offset: 832
    00000342: 	movq	-0x8(%r8), %rcx
    00000346: 	leaq	-0x8(%r8), %rdx
    0000034a: 	movsd	0x1f8(%rcx), %xmm0
    00000352: 	leaq	0x1f8(%rcx), %rsi
    00000359: 	comisd	%xmm1, %xmm0
    0000035d: 	jbe	.Ltmp4860 # Offset: 861
    00000363: 	movq	%rdx, %r8
    00000366: 	jmp	.Ltmp4862 # Offset: 870
.Ltmp4856:
    00000368: 	movq	0x30(%rsp), %rax
    0000036d: 	movq	%r9, %rsi
    00000370: 	movq	%r15, %rdi
    00000373: 	movq	%r13, 0x80(%rsp)
    0000037b: 	movq	%rcx, 0x90(%rsp)
    00000383: 	movq	%rax, 0x88(%rsp)
    0000038b: 	movq	%r14, 0x98(%rsp)
    00000393: 	movaps	%xmm1, 0xa0(%rsp)
    0000039b: 	movaps	%xmm0, 0xb0(%rsp)
    000003a3: 	callq	"_ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_.isra.0/1" # Offset: 931
.Ltmp4855:
    000003a8: 	callq	clock@PLT # Offset: 936
    000003ad: 	movq	%rax, start_time(%rip)
    000003b4: 	movl	iterations(%rip), %eax
    000003ba: 	movl	%eax, 0x20(%rsp)
    000003be: 	testl	%eax, %eax
    000003c0: 	jle	.Ltmp4863 # Offset: 960
    000003c6: 	movq	0x8(%rsp), %rax
    000003cb: 	movq	%r14, %rbx
    000003ce: 	subq	(%rsp), %rbx
    000003d2: 	sarq	$0x3, %rbx
    000003d6: 	cmpq	$0x1, %r14
    000003da: 	adcq	$-0x1, %rbx
    000003de: 	subq	%r12, %rax
    000003e1: 	sarq	$0x3, %rax
    000003e5: 	shlq	$0x6, %rbx
    000003e9: 	addq	%rax, %rbx
    000003ec: 	movq	%r13, %rax
    000003ef: 	subq	0x30(%rsp), %rax
    000003f4: 	movl	$0x0, 0x30(%rsp)
    000003fc: 	sarq	$0x3, %rax
    00000400: 	addq	%rax, %rbx
    00000403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4874:
    00000408: 	movq	0x40(%rsp), %rax
    0000040d: 	pxor	%xmm1, %xmm1
    00000411: 	movq	%rax, %r15
    00000414: 	cmpq	%rbp, %rax
    00000417: 	je	.Ltmp4864 # Offset: 1047
    0000041d: 	nopl	(%rax) # Size: 3
.Ltmp4872:
    00000420: 	addq	$0x8, %r15
    00000424: 	testq	%rbx, %rbx
    00000427: 	jle	.Ltmp4865 # Offset: 1063
    0000042d: 	movsd	-0x8(%r15), %xmm0
    00000433: 	movq	(%rsp), %r13
    00000437: 	movq	%r12, %rdi
    0000043a: 	movq	%rbx, %rdx
    0000043d: 	movq	0x8(%rsp), %r14
    00000442: 	movq	0x10(%rsp), %r11
    00000447: 	jmp	.Ltmp4866 # Offset: 1095
    00000449: 	nopl	(%rax) # Size: 7
.Ltmp4871:
    00000450: 	leaq	0x8(%rax), %rdi
    00000454: 	cmpq	%r10, %rdi
    00000457: 	je	.Ltmp4867 # Offset: 1111
.Ltmp4879:
    0000045d: 	subq	%rcx, %rdx
    00000460: 	movq	%r9, %r13
    00000463: 	movq	%r10, %r14
    00000466: 	movq	%r8, %r11
    00000469: 	subq	$0x1, %rdx
    0000046d: 	testq	%rdx, %rdx
    00000470: 	jle	.Ltmp4868 # Offset: 1136
.Ltmp4866:
    00000472: 	movq	%rdi, %rax
    00000475: 	movq	%rdx, %rcx
    00000478: 	subq	%r11, %rax
    0000047b: 	sarq	%rcx
    0000047e: 	sarq	$0x3, %rax
    00000482: 	addq	%rcx, %rax
    00000485: 	js	.Ltmp4869 # Offset: 1157
    0000048b: 	cmpq	$0x3f, %rax
    0000048f: 	jg	.Ltmp4870 # Offset: 1167
    00000495: 	leaq	(%rdi,%rcx,8), %rax
    00000499: 	movq	%r13, %r9
    0000049c: 	movq	%r14, %r10
    0000049f: 	movq	%r11, %r8
.Ltmp4877:
    000004a2: 	comisd	(%rax), %xmm0
    000004a6: 	ja	.Ltmp4871 # Offset: 1190
    000004a8: 	movq	%rcx, %rdx
    000004ab: 	testq	%rdx, %rdx
    000004ae: 	jg	.Ltmp4866 # Offset: 1198
.Ltmp4868:
    000004b0: 	addsd	(%rdi), %xmm1
    000004b4: 	cmpq	%r15, %rbp
    000004b7: 	jne	.Ltmp4872 # Offset: 1207
.Ltmp4864:
    000004bd: 	movsd	0x18(%rsp), %xmm5
    000004c3: 	ucomisd	%xmm1, %xmm5
    000004c7: 	jp	.Ltmp4873 # Offset: 1223
    000004cd: 	jne	.Ltmp4873 # Offset: 1229
.Ltmp4880:
    000004d3: 	addl	$0x1, 0x30(%rsp)
    000004d8: 	movl	0x30(%rsp), %eax
    000004dc: 	cmpl	0x20(%rsp), %eax
    000004e0: 	jl	.Ltmp4874 # Offset: 1248
.Ltmp4863:
    000004e6: 	movq	0x70(%rsp), %rdi
    000004eb: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1259
    000004f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004f7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004fe: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000505: 	je	.Ltmp4875 # Offset: 1285
.Ltmp4884:
    0000050b: 	movq	-0x20(%rax), %rbp
    0000050f: 	callq	clock@PLT # Offset: 1295
    00000514: 	pxor	%xmm0, %xmm0
    00000518: 	movq	%rax, end_time(%rip)
    0000051f: 	movq	%rbp, %rdi
    00000522: 	subq	start_time(%rip), %rax
    00000529: 	cvtsi2sd	%rax, %xmm0
    0000052e: 	divsd	DATAat0x53788(%rip), %xmm0
    00000536: 	callq	_Z13record_resultdPKc # Offset: 1334
    0000053b: 	movq	0x48(%rsp), %rdi
    00000540: 	callq	_ZNSt11_Deque_baseIdSaIdEED2Ev # Offset: 1344
    00000545: 	movq	0x118(%rsp), %rax
    0000054d: 	subq	%fs:0x28, %rax
    00000556: 	jne	.Ltmp4876 # Offset: 1366
    0000055c: 	addq	$0x128, %rsp
    00000563: 	popq	%rbx
    00000564: 	popq	%rbp
    00000565: 	popq	%r12
    00000567: 	popq	%r13
    00000569: 	popq	%r14
    0000056b: 	popq	%r15
    0000056d: 	retq # Offset: 1389
    0000056e: 	nop # Size: 2
.Ltmp4870:
    00000570: 	movq	%rax, %rsi
    00000573: 	sarq	$0x6, %rsi
.Ltmp4878:
    00000577: 	leaq	(%r13,%rsi,8), %r9
    0000057c: 	shlq	$0x6, %rsi
    00000580: 	movq	(%r9), %r8
    00000583: 	subq	%rsi, %rax
    00000586: 	leaq	0x200(%r8), %r10
    0000058d: 	leaq	(%r8,%rax,8), %rax
    00000591: 	jmp	.Ltmp4877 # Offset: 1425
    00000596: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4869:
    000005a0: 	movq	%rax, %rsi
    000005a3: 	notq	%rsi
    000005a6: 	shrq	$0x6, %rsi
    000005aa: 	notq	%rsi
    000005ad: 	jmp	.Ltmp4878 # Offset: 1453
    000005af: 	nop # Size: 1
.Ltmp4867:
    000005b0: 	movq	0x8(%r9), %rdi
    000005b4: 	addq	$0x8, %r9
    000005b8: 	leaq	0x200(%rdi), %r10
    000005bf: 	movq	%rdi, %r8
    000005c2: 	jmp	.Ltmp4879 # Offset: 1474
    000005c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4865:
    000005d0: 	movq	%r12, %rdi
    000005d3: 	addsd	(%rdi), %xmm1
    000005d7: 	cmpq	%r15, %rbp
    000005da: 	jne	.Ltmp4872 # Offset: 1498
    000005e0: 	jmp	.Ltmp4864 # Offset: 1504
.Ltmp4873:
    000005e5: 	movl	current_test(%rip), %edx
    000005eb: 	leaq	DATAat0x52360(%rip), %rsi
    000005f2: 	movl	$0x1, %edi
    000005f7: 	xorl	%eax, %eax
    000005f9: 	callq	__printf_chk@PLT # Offset: 1529
    000005fe: 	movl	iterations(%rip), %eax
    00000604: 	movl	%eax, 0x20(%rsp)
    00000608: 	jmp	.Ltmp4880 # Offset: 1544
.Ltmp4859:
    0000060d: 	movq	%rdi, %rax
.Ltmp4860:
    00000610: 	addq	$0x8, %rdi
    00000614: 	movsd	%xmm1, (%rax)
    00000618: 	cmpq	%rdi, %rbx
    0000061b: 	jne	.Ltmp4881 # Offset: 1563
    00000621: 	movq	0x8(%r9), %rdi
    00000625: 	addq	$0x8, %r9
    00000629: 	leaq	0x200(%rdi), %rbx
    00000630: 	movq	%rdi, %r11
    00000633: 	jmp	.Ltmp4882 # Offset: 1587
.Ltmp4857:
    00000638: 	movq	-0x8(%r9), %rcx
    0000063c: 	movq	%r10, %r8
    0000063f: 	leaq	0x200(%rcx), %rsi
    00000646: 	jmp	.Ltmp4883 # Offset: 1606
.Ltmp4875:
    0000064b: 	movq	-0x8(%rdx), %rax
    0000064f: 	addq	$0x200, %rax
    00000655: 	jmp	.Ltmp4884 # Offset: 1621
.Ltmp4876:
    0000065a: 	callq	__stack_chk_fail@PLT # Offset: 1626
    0000065f: 	endbr64
    00000663: 	movq	%rax, %rbp
    00000666: 	movq	0x48(%rsp), %rdi
    0000066b: 	callq	_ZNSt11_Deque_baseIdSaIdEED2Ev # Offset: 1643
    00000670: 	movq	%rbp, %rdi
    00000673: 	callq	_Unwind_Resume@PLT # Offset: 1651
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_find_pushback_sortedIdSt5dequeIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_" after disassembly {
  Number      : 292
  State       : disassembled
  Address     : 0x31700
  Size        : 0x14e
  MaxSize     : 0x150
  Offset      : 0x31700
  Section     : .text
  Orc Section : .local.text._ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0291:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	subq	%rsi, %rdx
    00000009: 	pushq	%r14
    0000000b: 	movq	%rcx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdx, %rbx
    0000001a: 	sarq	$0x3, %rbx
    0000001e: 	subq	$0x8, %rsp
    00000022: 	movq	(%rcx), %rdi
    00000025: 	movq	0x10(%rcx), %rax
    00000029: 	testq	%rdx, %rdx
    0000002c: 	jle	.Ltmp4885 # Offset: 44
    00000032: 	movq	%rsi, %r13
    00000035: 	jmp	.Ltmp4886 # Offset: 53
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4890:
    00000040: 	cmpq	$0x3f, %rax
    00000044: 	jg	.Ltmp4887 # Offset: 68
    0000004a: 	addq	%r15, %rdi
    0000004d: 	subq	%rbp, %rbx
    00000050: 	movq	0x10(%r14), %rax
    00000054: 	movq	%rdi, (%r14)
    00000057: 	testq	%rbx, %rbx
    0000005a: 	jle	.Ltmp4888 # Offset: 90
.Ltmp4886:
    00000060: 	subq	%rdi, %rax
    00000063: 	movq	%r13, %rsi
    00000066: 	sarq	$0x3, %rax
    0000006a: 	cmpq	%rbx, %rax
    0000006d: 	cmovgq	%rbx, %rax
    00000071: 	leaq	(,%rax,8), %r15
    00000079: 	movq	%rax, %rbp
    0000007c: 	addq	%r15, %r13
    0000007f: 	testq	%r15, %r15
    00000082: 	je	.Ltmp4889 # Offset: 130
    00000084: 	movq	%r15, %rdx
    00000087: 	callq	memmove@PLT # Offset: 135
    0000008c: 	movq	(%r14), %rdi
.Ltmp4889:
    0000008f: 	movq	0x8(%r14), %rsi
    00000093: 	movq	%rdi, %rax
    00000096: 	subq	%rsi, %rax
    00000099: 	sarq	$0x3, %rax
    0000009d: 	addq	%rbp, %rax
    000000a0: 	movq	%rax, %rdx
    000000a3: 	jns	.Ltmp4890 # Offset: 163
    000000a5: 	movq	%rax, %rcx
    000000a8: 	notq	%rcx
    000000ab: 	shrq	$0x6, %rcx
    000000af: 	notq	%rcx
.Ltmp4891:
    000000b2: 	movq	0x18(%r14), %rax
    000000b6: 	subq	%rbp, %rbx
    000000b9: 	leaq	(%rax,%rcx,8), %r8
    000000bd: 	shlq	$0x6, %rcx
    000000c1: 	movq	(%r8), %rsi
    000000c4: 	subq	%rcx, %rdx
    000000c7: 	movq	%r8, %xmm2
    000000cc: 	leaq	(%rsi,%rdx,8), %rdi
    000000d0: 	movq	%rsi, %xmm1
    000000d5: 	leaq	0x200(%rsi), %rax
    000000dc: 	movq	%rdi, %xmm0
    000000e1: 	punpcklqdq	%xmm1, %xmm0
    000000e5: 	movups	%xmm0, (%r14)
    000000e9: 	movq	%rax, %xmm0
    000000ee: 	punpcklqdq	%xmm2, %xmm0
    000000f2: 	movups	%xmm0, 0x10(%r14)
    000000f7: 	testq	%rbx, %rbx
    000000fa: 	jg	.Ltmp4886 # Offset: 250
.Ltmp4888:
    00000100: 	movq	%rax, 0x10(%r12)
    00000105: 	movq	%rdi, %xmm0
    0000010a: 	movq	0x18(%r14), %rax
    0000010e: 	movq	%rsi, %xmm3
    00000113: 	punpcklqdq	%xmm3, %xmm0
    00000117: 	movq	%rax, 0x18(%r12)
    0000011c: 	movq	%r12, %rax
    0000011f: 	movups	%xmm0, (%r12)
    00000124: 	addq	$0x8, %rsp
    00000128: 	popq	%rbx
    00000129: 	popq	%rbp
    0000012a: 	popq	%r12
    0000012c: 	popq	%r13
    0000012e: 	popq	%r14
    00000130: 	popq	%r15
    00000132: 	retq # Offset: 306
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4887:
    00000138: 	movq	%rax, %rcx
    0000013b: 	sarq	$0x6, %rcx
    0000013f: 	jmp	.Ltmp4891 # Offset: 319
    00000144: 	nopl	(%rax) # Size: 4
.Ltmp4885:
    00000148: 	movq	0x8(%rcx), %rsi
    0000014c: 	jmp	.Ltmp4888 # Offset: 332
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_"

Binary Function "_ZSt22__uninitialized_move_aISt15_Deque_iteratorIdRdPdES3_SaIdEET0_T_S6_S5_RT1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt22__uninitialized_move_aISt15_Deque_iteratorIdRdPdES3_SaIdEET0_T_S6_S5_RT1_.isra.0/1
                _ZSt22__uninitialized_move_aISt15_Deque_iteratorIdRdPdES3_SaIdEET0_T_S6_S5_RT1_.isra.0/containers.cpp/1
  Number      : 293
  State       : disassembled
  Address     : 0x31850
  Size        : 0x126
  MaxSize     : 0x130
  Offset      : 0x31850
  Section     : .text
  Orc Section : .local.text._ZSt22__uninitialized_move_aISt15_Deque_iteratorIdRdPdES3_SaIdEET0_T_S6_S5_RT1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0292:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x68, %rsp
    00000011: 	movq	0x18(%rdx), %rbp
    00000015: 	movq	0x18(%rsi), %rbx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x58(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movq	0x8(%rdx), %rax
    0000002d: 	movq	(%rdx), %r13
    00000030: 	movdqu	(%rcx), %xmm1
    00000034: 	movdqu	0x10(%rcx), %xmm0
    00000039: 	movq	(%rsi), %r9
    0000003c: 	movq	0x10(%rsi), %rdx
    00000040: 	movq	%rax, 0x8(%rsp)
    00000045: 	cmpq	%rbx, %rbp
    00000048: 	je	.Ltmp4892 # Offset: 72
    0000004e: 	leaq	0x10(%rsp), %r15
    00000053: 	movaps	%xmm1, 0x10(%rsp)
    00000058: 	leaq	0x30(%rsp), %r14
    0000005d: 	movq	%r9, %rsi
    00000060: 	movaps	%xmm0, 0x20(%rsp)
    00000065: 	movq	%r15, %rcx
    00000068: 	jmp	.Ltmp4893 # Offset: 104
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4894:
    00000070: 	movaps	%xmm1, 0x10(%rsp)
    00000075: 	movq	%r15, %rcx
    00000078: 	movaps	%xmm0, 0x20(%rsp)
    0000007d: 	movq	(%rbx), %rsi
    00000080: 	leaq	0x200(%rsi), %rdx
.Ltmp4893:
    00000087: 	movq	%r14, %rdi
    0000008a: 	addq	$0x8, %rbx
    0000008e: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 142
    00000093: 	movdqa	0x30(%rsp), %xmm1
    00000099: 	movdqa	0x40(%rsp), %xmm0
    0000009f: 	cmpq	%rbx, %rbp
    000000a2: 	jne	.Ltmp4894 # Offset: 162
    000000a4: 	movq	0x8(%rsp), %rsi
    000000a9: 	movq	%r14, %rcx
    000000ac: 	movq	%r13, %rdx
    000000af: 	movq	%r15, %rdi
    000000b2: 	movaps	%xmm1, 0x30(%rsp)
    000000b7: 	movaps	%xmm0, 0x40(%rsp)
    000000bc: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 188
.Ltmp4896:
    000000c1: 	movdqa	0x10(%rsp), %xmm2
    000000c7: 	movdqa	0x20(%rsp), %xmm3
    000000cd: 	movups	%xmm2, (%r12)
    000000d2: 	movups	%xmm3, 0x10(%r12)
    000000d8: 	movq	0x58(%rsp), %rax
    000000dd: 	subq	%fs:0x28, %rax
    000000e6: 	jne	.Ltmp4895 # Offset: 230
    000000e8: 	addq	$0x68, %rsp
    000000ec: 	movq	%r12, %rax
    000000ef: 	popq	%rbx
    000000f0: 	popq	%rbp
    000000f1: 	popq	%r12
    000000f3: 	popq	%r13
    000000f5: 	popq	%r14
    000000f7: 	popq	%r15
    000000f9: 	retq # Offset: 249
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4892:
    00000100: 	leaq	0x10(%rsp), %rdi
    00000105: 	leaq	0x30(%rsp), %rcx
    0000010a: 	movq	%r13, %rdx
    0000010d: 	movq	%r9, %rsi
    00000110: 	movaps	%xmm1, 0x30(%rsp)
    00000115: 	movaps	%xmm0, 0x40(%rsp)
    0000011a: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 282
    0000011f: 	jmp	.Ltmp4896 # Offset: 287
.Ltmp4895:
    00000121: 	callq	__stack_chk_fail@PLT # Offset: 289
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt22__uninitialized_move_aISt15_Deque_iteratorIdRdPdES3_SaIdEET0_T_S6_S5_RT1_.isra.0/1(*2)"

Binary Function "_ZSt4moveISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_" after disassembly {
  Number      : 294
  State       : disassembled
  Address     : 0x31980
  Size        : 0x126
  MaxSize     : 0x130
  Offset      : 0x31980
  Section     : .text
  Orc Section : .local.text._ZSt4moveISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0293:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	0x18(%rdx), %rbp
    00000019: 	movq	0x18(%rsi), %rbx
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x58(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x8(%rdx), %rax
    00000031: 	movq	(%rdx), %r13
    00000034: 	movdqu	(%rcx), %xmm1
    00000038: 	movdqu	0x10(%rcx), %xmm0
    0000003d: 	movq	(%rsi), %r9
    00000040: 	movq	0x10(%rsi), %rdx
    00000044: 	movq	%rax, 0x8(%rsp)
    00000049: 	cmpq	%rbp, %rbx
    0000004c: 	je	.Ltmp4897 # Offset: 76
    00000052: 	leaq	0x10(%rsp), %r15
    00000057: 	movaps	%xmm1, 0x10(%rsp)
    0000005c: 	leaq	0x30(%rsp), %r14
    00000061: 	movq	%r9, %rsi
    00000064: 	movaps	%xmm0, 0x20(%rsp)
    00000069: 	movq	%r15, %rcx
    0000006c: 	jmp	.Ltmp4898 # Offset: 108
    0000006e: 	nop # Size: 2
.Ltmp4899:
    00000070: 	movaps	%xmm1, 0x10(%rsp)
    00000075: 	movq	%r15, %rcx
    00000078: 	movaps	%xmm0, 0x20(%rsp)
    0000007d: 	movq	(%rbx), %rsi
    00000080: 	leaq	0x200(%rsi), %rdx
.Ltmp4898:
    00000087: 	movq	%r14, %rdi
    0000008a: 	addq	$0x8, %rbx
    0000008e: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 142
    00000093: 	movdqa	0x30(%rsp), %xmm1
    00000099: 	movdqa	0x40(%rsp), %xmm0
    0000009f: 	cmpq	%rbx, %rbp
    000000a2: 	jne	.Ltmp4899 # Offset: 162
    000000a4: 	movq	0x8(%rsp), %rsi
    000000a9: 	movq	%r14, %rcx
    000000ac: 	movq	%r13, %rdx
    000000af: 	movq	%r15, %rdi
    000000b2: 	movaps	%xmm1, 0x30(%rsp)
    000000b7: 	movaps	%xmm0, 0x40(%rsp)
    000000bc: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 188
.Ltmp4901:
    000000c1: 	movdqa	0x10(%rsp), %xmm2
    000000c7: 	movdqa	0x20(%rsp), %xmm3
    000000cd: 	movups	%xmm2, (%r12)
    000000d2: 	movups	%xmm3, 0x10(%r12)
    000000d8: 	movq	0x58(%rsp), %rax
    000000dd: 	subq	%fs:0x28, %rax
    000000e6: 	jne	.Ltmp4900 # Offset: 230
    000000e8: 	addq	$0x68, %rsp
    000000ec: 	movq	%r12, %rax
    000000ef: 	popq	%rbx
    000000f0: 	popq	%rbp
    000000f1: 	popq	%r12
    000000f3: 	popq	%r13
    000000f5: 	popq	%r14
    000000f7: 	popq	%r15
    000000f9: 	retq # Offset: 249
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4897:
    00000100: 	leaq	0x10(%rsp), %rdi
    00000105: 	leaq	0x30(%rsp), %rcx
    0000010a: 	movq	%r13, %rdx
    0000010d: 	movq	%r9, %rsi
    00000110: 	movaps	%xmm1, 0x30(%rsp)
    00000115: 	movaps	%xmm0, 0x40(%rsp)
    0000011a: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 282
    0000011f: 	jmp	.Ltmp4901 # Offset: 287
.Ltmp4900:
    00000121: 	callq	__stack_chk_fail@PLT # Offset: 289
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt4moveISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_"

Binary Function "_ZNSt5dequeIdSaIdEE13_M_insert_auxISt15_Deque_iteratorIdRKdPS4_EEEvS3_IdRdPdET_SB_m" after disassembly {
  Number      : 295
  State       : disassembled
  Address     : 0x31ab0
  Size        : 0xb3b
  MaxSize     : 0xb40
  Offset      : 0x31ab0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEE13_M_insert_auxISt15_Deque_iteratorIdRKdPS4_EEEvS3_IdRdPdET_SB_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0294:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	movq	%rdx, %r10
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rcx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x178, %rsp
    00000021: 	movq	0x10(%rdi), %rcx
    00000025: 	movdqu	0x30(%rdi), %xmm0
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x168(%rsp)
    0000003b: 	movq	0x18(%rsi), %rax
    0000003f: 	movq	0x20(%rdi), %xmm6
    00000044: 	movhlps	%xmm0, %xmm2
    00000047: 	movhps	0x28(%rdi), %xmm6
    0000004b: 	movq	%xmm2, %r11
    00000050: 	movq	%xmm2, 0x10(%rsp)
    00000056: 	movaps	%xmm6, (%rsp)
    0000005a: 	movq	%rax, %rbp
    0000005d: 	subq	0x28(%rdi), %rbp
    00000061: 	sarq	$0x3, %rbp
    00000065: 	cmpq	$0x1, %rax
    00000069: 	movq	(%rsi), %rax
    0000006c: 	adcq	$-0x1, %rbp
    00000070: 	subq	0x8(%rsi), %rax
    00000074: 	movq	0x48(%rdi), %rsi
    00000078: 	sarq	$0x3, %rax
    0000007c: 	shlq	$0x6, %rbp
    00000080: 	addq	%rax, %rbp
    00000083: 	movq	0x20(%rdi), %rax
    00000087: 	movq	%rsi, %rdx
    0000008a: 	subq	0x28(%rdi), %rdx
    0000008e: 	sarq	$0x3, %rdx
    00000092: 	movq	%xmm0, %rdi
    00000097: 	subq	%rcx, %rax
    0000009a: 	sarq	$0x3, %rax
    0000009e: 	cmpq	$0x1, %rsi
    000000a2: 	adcq	$-0x1, %rdx
    000000a6: 	subq	%r11, %rdi
    000000a9: 	leaq	(%rbp,%rax), %r14
    000000ae: 	shlq	$0x6, %rdx
    000000b2: 	sarq	$0x3, %rdi
    000000b6: 	addq	%rdi, %rdx
    000000b9: 	addq	%rdx, %rax
    000000bc: 	shrq	%rax
    000000bf: 	cmpq	%r14, %rax
    000000c2: 	jbe	.Ltmp4902 # Offset: 194
    000000c8: 	movq	%rcx, %xmm7
    000000cd: 	subq	0x18(%rbx), %rcx
    000000d1: 	movhps	0x18(%rbx), %xmm7
    000000d5: 	sarq	$0x3, %rcx
    000000d9: 	movaps	%xmm7, 0x10(%rsp)
    000000de: 	cmpq	%rcx, %r8
    000000e1: 	ja	.Ltmp4903 # Offset: 225
.Ltmp4913:
    000000e7: 	movq	%r8, %r9
    000000ea: 	movdqa	0x10(%rsp), %xmm4
    000000f0: 	movdqa	(%rsp), %xmm5
    000000f5: 	leaq	0xa0(%rsp), %rdi
    000000fd: 	negq	%r9
    00000100: 	leaq	0x140(%rsp), %rbp
    00000108: 	movq	%r9, %rsi
    0000010b: 	movq	%r9, 0x20(%rsp)
    00000110: 	movaps	%xmm4, 0xa0(%rsp)
    00000118: 	movaps	%xmm5, 0xb0(%rsp)
    00000120: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 288
    00000125: 	movq	%r14, %rsi
    00000128: 	movq	%rbp, %rdi
    0000012b: 	movaps	%xmm4, 0x10(%rsp)
    00000130: 	movaps	%xmm4, 0x140(%rsp)
    00000138: 	movaps	%xmm5, (%rsp)
    0000013c: 	movaps	%xmm5, 0x150(%rsp)
    00000144: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 324
    00000149: 	movdqa	0x140(%rsp), %xmm7
    00000152: 	movdqa	0x150(%rsp), %xmm3
    0000015b: 	movups	%xmm7, (%r15)
    0000015f: 	movups	%xmm3, 0x10(%r15)
    00000164: 	cmpq	%r8, %r14
    00000167: 	jl	.Ltmp4904 # Offset: 359
    0000016d: 	movdqu	0x10(%rbx), %xmm3
    00000172: 	movdqu	0x20(%rbx), %xmm2
    00000177: 	movq	%r8, %rsi
    0000017a: 	leaq	0xc0(%rsp), %rdi
    00000182: 	movq	%r10, 0x60(%rsp)
    00000187: 	leaq	0x120(%rsp), %r8
    0000018f: 	leaq	0xe0(%rsp), %r13
    00000197: 	movaps	%xmm3, 0xc0(%rsp)
    0000019f: 	leaq	0x100(%rsp), %r14
    000001a7: 	movaps	%xmm2, 0xd0(%rsp)
    000001af: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 431
    000001b4: 	movq	%r8, %rcx
    000001b7: 	movq	%r14, %rdx
    000001ba: 	movq	%r13, %rsi
    000001bd: 	movdqa	0xb0(%rsp), %xmm6
    000001c6: 	movq	%rbp, %rdi
    000001c9: 	movdqa	0xc0(%rsp), %xmm1
    000001d2: 	movq	%r8, 0x38(%rsp)
    000001d7: 	movdqa	0xd0(%rsp), %xmm0
    000001e0: 	movaps	%xmm3, 0xe0(%rsp)
    000001e8: 	movdqa	0xa0(%rsp), %xmm7
    000001f1: 	movaps	%xmm6, 0x130(%rsp)
    000001f9: 	movaps	%xmm7, 0x120(%rsp)
    00000201: 	movaps	%xmm1, 0x100(%rsp)
    00000209: 	movaps	%xmm1, 0x50(%rsp)
    0000020e: 	movaps	%xmm0, 0x110(%rsp)
    00000216: 	movaps	%xmm0, 0x40(%rsp)
    0000021b: 	movaps	%xmm2, 0xf0(%rsp)
    00000223: 	callq	"_ZSt22__uninitialized_move_aISt15_Deque_iteratorIdRdPdES3_SaIdEET0_T_S6_S5_RT1_.isra.0/1" # Offset: 547
    00000228: 	movq	0x38(%rsp), %r8
    0000022d: 	movdqa	(%rsp), %xmm5
    00000232: 	movq	%r14, %rdx
    00000235: 	movdqa	0xa0(%rsp), %xmm2
    0000023e: 	movdqa	0x50(%rsp), %xmm1
    00000244: 	movq	%r13, %rsi
    00000247: 	movq	%rbp, %rdi
    0000024a: 	movdqa	0xb0(%rsp), %xmm7
    00000253: 	movdqa	0x40(%rsp), %xmm0
    00000259: 	movq	%r8, %rcx
    0000025c: 	movq	%r8, (%rsp)
    00000260: 	movups	%xmm2, 0x10(%rbx)
    00000264: 	movdqa	0x10(%rsp), %xmm4
    0000026a: 	movups	%xmm7, 0x20(%rbx)
    0000026e: 	movdqu	(%r15), %xmm2
    00000273: 	movdqu	0x10(%r15), %xmm3
    00000279: 	movaps	%xmm1, 0xe0(%rsp)
    00000281: 	movaps	%xmm2, 0x100(%rsp)
    00000289: 	movaps	%xmm0, 0xf0(%rsp)
    00000291: 	movaps	%xmm4, 0x120(%rsp)
    00000299: 	movaps	%xmm5, 0x130(%rsp)
    000002a1: 	movaps	%xmm3, 0x110(%rsp)
    000002a9: 	callq	_ZSt4moveISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_ # Offset: 681
    000002ae: 	movdqu	0x10(%r15), %xmm0
    000002b4: 	movdqu	(%r15), %xmm6
    000002b9: 	movq	%r13, %rdi
    000002bc: 	movq	0x20(%rsp), %rsi
    000002c1: 	movaps	%xmm0, 0xf0(%rsp)
    000002c9: 	movaps	%xmm6, 0xe0(%rsp)
    000002d1: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 721
    000002d6: 	movq	0x60(%rsp), %r10
    000002db: 	movq	%r13, %rcx
    000002de: 	movq	%r14, %rsi
    000002e1: 	movdqu	0x10(%r12), %xmm0
    000002e8: 	movdqu	(%r12), %xmm7
    000002ee: 	movq	%rbp, %rdi
    000002f1: 	movdqu	(%r10), %xmm2
    000002f6: 	movq	(%rsp), %rdx
    000002fa: 	movaps	%xmm0, 0x130(%rsp)
    00000302: 	movdqu	0x10(%r10), %xmm0
    00000308: 	movaps	%xmm7, 0x120(%rsp)
    00000310: 	movaps	%xmm2, 0x100(%rsp)
    00000318: 	movaps	%xmm0, 0x110(%rsp)
    00000320: 	callq	_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_ # Offset: 800
.Ltmp4908:
    00000325: 	movq	0x168(%rsp), %rax
    0000032d: 	subq	%fs:0x28, %rax
    00000336: 	jne	.Ltmp4905 # Offset: 822
    0000033c: 	addq	$0x178, %rsp
    00000343: 	popq	%rbx
    00000344: 	popq	%rbp
    00000345: 	popq	%r12
    00000347: 	popq	%r13
    00000349: 	popq	%r14
    0000034b: 	popq	%r15
    0000034d: 	retq # Offset: 845
    0000034e: 	nop # Size: 2
.Ltmp4902:
    00000350: 	movq	0x40(%rbx), %rax
    00000354: 	movq	%xmm0, %r13
    00000359: 	movq	0x40(%rbx), %xmm1
    0000035e: 	movq	%rsi, %xmm7
    00000363: 	subq	%r13, %rax
    00000366: 	punpcklqdq	%xmm7, %xmm1
    0000036a: 	sarq	$0x3, %rax
    0000036e: 	subq	$0x1, %rax
    00000372: 	cmpq	%rax, %r8
    00000375: 	ja	.Ltmp4906 # Offset: 885
.Ltmp4915:
    0000037b: 	leaq	0xa0(%rsp), %rdi
    00000383: 	movq	%r8, %rsi
    00000386: 	movq	%rdx, 0x38(%rsp)
    0000038b: 	movhps	%xmm1, (%rsp)
    0000038f: 	movq	%xmm1, 0x20(%rsp)
    00000395: 	movaps	%xmm0, 0xa0(%rsp)
    0000039d: 	movaps	%xmm1, 0xb0(%rsp)
    000003a5: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 933
    000003aa: 	movq	0x38(%rsp), %rdx
    000003af: 	movq	(%rsp), %rsi
    000003b3: 	movq	%r13, 0x140(%rsp)
    000003bb: 	movq	0x10(%rsp), %rax
    000003c0: 	movq	0x20(%rsp), %rcx
    000003c5: 	movq	%rdx, %r9
    000003c8: 	movq	%rsi, 0x158(%rsp)
    000003d0: 	movq	%rbp, %rsi
    000003d3: 	subq	%rbp, %r9
    000003d6: 	leaq	0x140(%rsp), %rbp
    000003de: 	subq	%rdx, %rsi
    000003e1: 	movq	%rax, 0x148(%rsp)
    000003e9: 	movq	%rbp, %rdi
    000003ec: 	movq	%rcx, 0x150(%rsp)
    000003f4: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 1012
    000003f9: 	movdqa	0x140(%rsp), %xmm2
    00000402: 	movdqa	0x150(%rsp), %xmm3
    0000040b: 	movups	%xmm2, (%r15)
    0000040f: 	movups	%xmm3, 0x10(%r15)
    00000414: 	cmpq	%r8, %r9
    00000417: 	jle	.Ltmp4907 # Offset: 1047
    0000041d: 	movdqu	0x30(%rbx), %xmm3
    00000422: 	movdqu	0x40(%rbx), %xmm2
    00000427: 	negq	%r8
    0000042a: 	leaq	0xc0(%rsp), %rdi
    00000432: 	movq	%r8, %rsi
    00000435: 	movq	%r10, 0x70(%rsp)
    0000043a: 	leaq	0xe0(%rsp), %r14
    00000442: 	movaps	%xmm3, 0xc0(%rsp)
    0000044a: 	movaps	%xmm2, 0xd0(%rsp)
    00000452: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 1106
    00000457: 	leaq	0x120(%rsp), %rcx
    0000045f: 	movq	%r14, %rsi
    00000462: 	movq	%rbp, %rdi
    00000465: 	movdqa	0xc0(%rsp), %xmm1
    0000046e: 	leaq	0x100(%rsp), %rdx
    00000476: 	movdqa	0xd0(%rsp), %xmm0
    0000047f: 	movaps	%xmm3, 0x120(%rsp)
    00000487: 	movaps	%xmm3, 0x100(%rsp)
    0000048f: 	movq	%rcx, 0x40(%rsp)
    00000494: 	movq	%rdx, 0x38(%rsp)
    00000499: 	movaps	%xmm2, 0x130(%rsp)
    000004a1: 	movaps	%xmm2, 0x110(%rsp)
    000004a9: 	movaps	%xmm1, 0xe0(%rsp)
    000004b1: 	movaps	%xmm1, 0x60(%rsp)
    000004b6: 	movaps	%xmm0, 0xf0(%rsp)
    000004be: 	movaps	%xmm0, 0x50(%rsp)
    000004c3: 	callq	"_ZSt22__uninitialized_move_aISt15_Deque_iteratorIdRdPdES3_SaIdEET0_T_S6_S5_RT1_.isra.0/1" # Offset: 1219
    000004c8: 	movq	0x20(%rsp), %rcx
    000004cd: 	movq	(%rsp), %rsi
    000004d1: 	movq	%rbp, %rdi
    000004d4: 	movdqa	0xa0(%rsp), %xmm6
    000004dd: 	movq	0x10(%rsp), %rax
    000004e2: 	movq	%r13, 0x120(%rsp)
    000004ea: 	movdqa	0xb0(%rsp), %xmm7
    000004f3: 	movdqa	0x50(%rsp), %xmm0
    000004f9: 	movq	%rcx, 0x130(%rsp)
    00000501: 	movups	%xmm6, 0x30(%rbx)
    00000505: 	movq	0x40(%rsp), %rcx
    0000050a: 	movq	0x38(%rsp), %rdx
    0000050f: 	movups	%xmm7, 0x40(%rbx)
    00000513: 	movdqa	0x60(%rsp), %xmm1
    00000519: 	movdqu	(%r15), %xmm4
    0000051e: 	movdqu	0x10(%r15), %xmm2
    00000524: 	movq	%rsi, 0x138(%rsp)
    0000052c: 	movq	%r14, %rsi
    0000052f: 	movq	%rcx, 0x10(%rsp)
    00000534: 	movq	%rdx, (%rsp)
    00000538: 	movaps	%xmm0, 0x110(%rsp)
    00000540: 	movq	%rax, 0x128(%rsp)
    00000548: 	movaps	%xmm1, 0x100(%rsp)
    00000550: 	movaps	%xmm4, 0xe0(%rsp)
    00000558: 	movaps	%xmm2, 0xf0(%rsp)
    00000560: 	callq	_ZSt13move_backwardISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_ # Offset: 1376
    00000565: 	movdqu	0x10(%r15), %xmm0
    0000056b: 	movq	0x70(%rsp), %r10
    00000570: 	movq	%r14, %rsi
    00000573: 	movdqu	(%r15), %xmm3
    00000578: 	movdqu	(%r12), %xmm6
    0000057e: 	movq	%rbp, %rdi
    00000581: 	movaps	%xmm0, 0x130(%rsp)
    00000589: 	movdqu	0x10(%r12), %xmm0
    00000590: 	movdqu	(%r10), %xmm7
    00000595: 	movq	0x10(%rsp), %rcx
    0000059a: 	movq	(%rsp), %rdx
    0000059e: 	movaps	%xmm3, 0x120(%rsp)
    000005a6: 	movaps	%xmm0, 0x110(%rsp)
    000005ae: 	movdqu	0x10(%r10), %xmm0
    000005b4: 	movaps	%xmm6, 0x100(%rsp)
    000005bc: 	movaps	%xmm7, 0xe0(%rsp)
    000005c4: 	movaps	%xmm0, 0xf0(%rsp)
    000005cc: 	callq	_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_ # Offset: 1484
    000005d1: 	jmp	.Ltmp4908 # Offset: 1489
    000005d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4904:
    000005e0: 	movdqu	(%r10), %xmm1
    000005e5: 	movdqu	0x10(%r10), %xmm0
    000005eb: 	subq	%r14, %r8
    000005ee: 	movhlps	%xmm1, %xmm3
    000005f1: 	movq	%xmm1, %rax
    000005f6: 	movhlps	%xmm0, %xmm6
    000005f9: 	movq	%xmm3, %r11
    000005fe: 	movq	%xmm1, %rdx
    00000603: 	movq	%xmm6, %r9
    00000608: 	subq	%r11, %rax
    0000060b: 	movdqa	%xmm0, %xmm2
    0000060f: 	sarq	$0x3, %rax
    00000613: 	addq	%r8, %rax
    00000616: 	js	.Ltmp4909 # Offset: 1558
    0000061c: 	cmpq	$0x3f, %rax
    00000620: 	jg	.Ltmp4910 # Offset: 1568
    00000626: 	leaq	(%rdx,%r8,8), %rax
    0000062a: 	movq	%rax, %xmm3
.Ltmp4914:
    0000062f: 	movq	%r11, %xmm7
    00000634: 	movdqa	%xmm3, %xmm5
    00000638: 	movdqa	%xmm2, %xmm4
    0000063c: 	movq	%rbp, %rsi
    0000063f: 	movdqu	0x10(%r15), %xmm6
    00000645: 	punpcklqdq	%xmm7, %xmm5
    00000649: 	movq	%xmm2, 0x40(%rsp)
    0000064f: 	movdqu	(%r15), %xmm7
    00000654: 	movq	%r9, %xmm2
    00000659: 	leaq	0x100(%rsp), %r14
    00000661: 	leaq	0x120(%rsp), %r13
    00000669: 	movq	%xmm3, 0x70(%rsp)
    0000066f: 	punpcklqdq	%xmm2, %xmm4
    00000673: 	movq	%r14, %rcx
    00000676: 	movq	%r13, %rdx
    00000679: 	movq	%r11, 0x60(%rsp)
    0000067e: 	movdqa	0xa0(%rsp), %xmm3
    00000687: 	movaps	%xmm4, 0x20(%rsp)
    0000068c: 	leaq	0xe0(%rsp), %r15
    00000694: 	movdqa	0xb0(%rsp), %xmm4
    0000069d: 	movaps	%xmm7, 0x120(%rsp)
    000006a5: 	movdqu	0x20(%rbx), %xmm7
    000006aa: 	movq	%r15, %rdi
    000006ad: 	movaps	%xmm6, 0x130(%rsp)
    000006b5: 	movdqu	0x10(%rbx), %xmm6
    000006ba: 	movq	%r9, 0x38(%rsp)
    000006bf: 	movaps	%xmm6, 0x140(%rsp)
    000006c7: 	movaps	%xmm7, 0x150(%rsp)
    000006cf: 	movaps	%xmm0, 0x90(%rsp)
    000006d7: 	movaps	%xmm1, 0x80(%rsp)
    000006df: 	movaps	%xmm5, 0x50(%rsp)
    000006e4: 	movaps	%xmm3, 0x100(%rsp)
    000006ec: 	movaps	%xmm4, 0x110(%rsp)
    000006f4: 	callq	"_ZSt22__uninitialized_move_aISt15_Deque_iteratorIdRdPdES3_SaIdEET0_T_S6_S5_RT1_.isra.0/1" # Offset: 1780
    000006f9: 	movq	%rbp, %rcx
    000006fc: 	movq	%r13, %rdx
    000006ff: 	movq	%r14, %rsi
    00000702: 	movdqa	0xe0(%rsp), %xmm2
    0000070b: 	movdqa	0x20(%rsp), %xmm4
    00000711: 	leaq	0xc0(%rsp), %rdi
    00000719: 	movdqa	0xf0(%rsp), %xmm3
    00000722: 	movdqa	0x50(%rsp), %xmm5
    00000728: 	movdqa	0x90(%rsp), %xmm0
    00000731: 	movaps	%xmm2, 0x140(%rsp)
    00000739: 	movdqa	0x80(%rsp), %xmm1
    00000742: 	movaps	%xmm3, 0x150(%rsp)
    0000074a: 	movaps	%xmm4, 0x130(%rsp)
    00000752: 	movaps	%xmm0, 0x110(%rsp)
    0000075a: 	movaps	%xmm5, 0x120(%rsp)
    00000762: 	movaps	%xmm1, 0x100(%rsp)
    0000076a: 	callq	_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_ # Offset: 1898
    0000076f: 	movdqa	(%rsp), %xmm2
    00000774: 	movq	%r13, %rcx
    00000777: 	movq	%r14, %rdx
    0000077a: 	movq	0x60(%rsp), %r11
    0000077f: 	movq	0x38(%rsp), %r9
    00000784: 	movq	%r15, %rsi
    00000787: 	movq	%rbp, %rdi
    0000078a: 	movdqa	0xa0(%rsp), %xmm6
    00000793: 	movdqa	0x10(%rsp), %xmm4
    00000799: 	movaps	%xmm2, 0x130(%rsp)
    000007a1: 	movdqa	0xb0(%rsp), %xmm7
    000007aa: 	movq	0x40(%rsp), %xmm2
    000007b0: 	movq	%r11, 0xe8(%rsp)
    000007b8: 	movups	%xmm6, 0x10(%rbx)
    000007bc: 	movups	%xmm7, 0x20(%rbx)
    000007c0: 	movdqu	(%r12), %xmm3
    000007c6: 	movdqu	0x10(%r12), %xmm0
    000007cd: 	movq	%r9, 0xf8(%rsp)
    000007d5: 	movaps	%xmm3, 0x100(%rsp)
    000007dd: 	movq	0x70(%rsp), %xmm3
    000007e3: 	movaps	%xmm4, 0x120(%rsp)
    000007eb: 	movaps	%xmm0, 0x110(%rsp)
    000007f3: 	movq	%xmm3, 0xe0(%rsp)
    000007fc: 	movq	%xmm2, 0xf0(%rsp)
    00000805: 	callq	_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_ # Offset: 2053
    0000080a: 	jmp	.Ltmp4908 # Offset: 2058
    0000080f: 	nop # Size: 1
.Ltmp4907:
    00000810: 	movq	(%r10), %rcx
    00000813: 	movq	0x8(%r10), %r13
    00000817: 	movq	0x10(%r10), %r8
    0000081b: 	movq	0x18(%r10), %r14
    0000081f: 	movq	%rcx, %rdx
    00000822: 	subq	%r13, %rdx
    00000825: 	sarq	$0x3, %rdx
    00000829: 	addq	%r9, %rdx
    0000082c: 	js	.Ltmp4911 # Offset: 2092
    00000832: 	cmpq	$0x3f, %rdx
    00000836: 	jle	.Ltmp4912 # Offset: 2102
    0000083c: 	movq	%rdx, %rax
    0000083f: 	sarq	$0x6, %rax
.Ltmp4917:
    00000843: 	leaq	(%r14,%rax,8), %r14
    00000847: 	shlq	$0x6, %rax
    0000084b: 	movq	(%r14), %r13
    0000084e: 	subq	%rax, %rdx
    00000851: 	leaq	(%r13,%rdx,8), %rax
    00000856: 	leaq	0x200(%r13), %r8
    0000085d: 	movq	%rax, %xmm2
.Ltmp4918:
    00000862: 	movdqu	(%r12), %xmm5
    00000868: 	movdqu	(%r15), %xmm4
    0000086d: 	movq	%rbp, %rcx
    00000870: 	movq	%xmm2, 0x38(%rsp)
    00000876: 	movdqu	0x10(%r15), %xmm3
    0000087c: 	movdqu	0x30(%rbx), %xmm1
    00000881: 	leaq	0xe0(%rsp), %r11
    00000889: 	leaq	0x120(%rsp), %r9
    00000891: 	movdqu	0x40(%rbx), %xmm0
    00000896: 	movaps	%xmm4, 0x70(%rsp)
    0000089b: 	movq	%r9, %rdx
    0000089e: 	movq	%r11, %rdi
    000008a1: 	movaps	%xmm5, 0x120(%rsp)
    000008a9: 	movdqa	%xmm2, %xmm5
    000008ad: 	movq	%r13, %xmm2
    000008b2: 	movdqu	0x10(%r12), %xmm4
    000008b9: 	punpcklqdq	%xmm2, %xmm5
    000008bd: 	leaq	0x100(%rsp), %r12
    000008c5: 	movaps	%xmm3, 0x60(%rsp)
    000008ca: 	movq	%r14, %xmm3
    000008cf: 	movaps	%xmm5, 0x100(%rsp)
    000008d7: 	movq	%r8, %xmm5
    000008dc: 	movq	%r12, %rsi
    000008df: 	punpcklqdq	%xmm3, %xmm5
    000008e3: 	movq	%r10, 0x80(%rsp)
    000008eb: 	movq	%r8, 0x20(%rsp)
    000008f0: 	movq	%r9, (%rsp)
    000008f4: 	movq	%r11, 0x10(%rsp)
    000008f9: 	movaps	%xmm4, 0x130(%rsp)
    00000901: 	movaps	%xmm1, 0x140(%rsp)
    00000909: 	movaps	%xmm1, 0x50(%rsp)
    0000090e: 	movaps	%xmm0, 0x150(%rsp)
    00000916: 	movaps	%xmm0, 0x40(%rsp)
    0000091b: 	movaps	%xmm5, 0x110(%rsp)
    00000923: 	callq	_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_ # Offset: 2339
    00000928: 	movdqa	0x40(%rsp), %xmm0
    0000092e: 	movq	(%rsp), %rdx
    00000932: 	leaq	0xc0(%rsp), %rdi
    0000093a: 	movdqa	0xe0(%rsp), %xmm6
    00000943: 	movq	%r12, %rcx
    00000946: 	movq	%rbp, %rsi
    00000949: 	movdqa	0x70(%rsp), %xmm4
    0000094f: 	movdqa	0x60(%rsp), %xmm3
    00000955: 	movdqa	0x50(%rsp), %xmm1
    0000095b: 	movaps	%xmm0, 0x130(%rsp)
    00000963: 	movdqa	0xf0(%rsp), %xmm7
    0000096c: 	movaps	%xmm6, 0x100(%rsp)
    00000974: 	movaps	%xmm4, 0x140(%rsp)
    0000097c: 	movaps	%xmm3, 0x150(%rsp)
    00000984: 	movaps	%xmm7, 0x110(%rsp)
    0000098c: 	movaps	%xmm1, 0x120(%rsp)
    00000994: 	callq	"_ZSt22__uninitialized_move_aISt15_Deque_iteratorIdRdPdES3_SaIdEET0_T_S6_S5_RT1_.isra.0/1" # Offset: 2452
    00000999: 	movq	0x20(%rsp), %r8
    0000099e: 	movq	%r12, %rdx
    000009a1: 	movq	%rbp, %rdi
    000009a4: 	movdqa	0xb0(%rsp), %xmm2
    000009ad: 	movq	(%rsp), %rcx
    000009b1: 	movq	%r13, 0x108(%rsp)
    000009b9: 	movdqa	0xa0(%rsp), %xmm4
    000009c2: 	movq	0x80(%rsp), %r10
    000009ca: 	movq	%r8, 0x110(%rsp)
    000009d2: 	movups	%xmm2, 0x40(%rbx)
    000009d6: 	movq	0x10(%rsp), %rsi
    000009db: 	movq	0x38(%rsp), %xmm2
    000009e1: 	movups	%xmm4, 0x30(%rbx)
    000009e5: 	movdqu	0x10(%r15), %xmm0
    000009eb: 	movdqu	(%r15), %xmm3
    000009f0: 	movdqu	(%r10), %xmm6
    000009f5: 	movq	%r14, 0x118(%rsp)
    000009fd: 	movaps	%xmm0, 0x130(%rsp)
    00000a05: 	movdqu	0x10(%r10), %xmm0
    00000a0b: 	movaps	%xmm3, 0x120(%rsp)
    00000a13: 	movq	%xmm2, 0x100(%rsp)
    00000a1c: 	movaps	%xmm6, 0xe0(%rsp)
    00000a24: 	movaps	%xmm0, 0xf0(%rsp)
    00000a2c: 	callq	_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_ # Offset: 2604
    00000a31: 	jmp	.Ltmp4908 # Offset: 2609
    00000a36: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4903:
    00000a40: 	movq	%r8, %rsi
    00000a43: 	movq	%rbx, %rdi
    00000a46: 	movq	%r10, 0x38(%rsp)
    00000a4b: 	subq	%rcx, %rsi
    00000a4e: 	movq	%r8, 0x20(%rsp)
    00000a53: 	callq	_ZNSt5dequeIdSaIdEE24_M_new_elements_at_frontEm # Offset: 2643
    00000a58: 	movdqu	0x10(%rbx), %xmm7
    00000a5d: 	movdqu	0x20(%rbx), %xmm4
    00000a62: 	movq	0x38(%rsp), %r10
    00000a67: 	movq	0x20(%rsp), %r8
    00000a6c: 	movaps	%xmm7, 0x10(%rsp)
    00000a71: 	movaps	%xmm4, (%rsp)
    00000a75: 	jmp	.Ltmp4913 # Offset: 2677
    00000a7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4909:
    00000a80: 	movq	%rax, %rdx
    00000a83: 	notq	%rdx
    00000a86: 	shrq	$0x6, %rdx
    00000a8a: 	notq	%rdx
.Ltmp4916:
    00000a8d: 	leaq	(%r9,%rdx,8), %r9
    00000a91: 	shlq	$0x6, %rdx
    00000a95: 	movq	(%r9), %r11
    00000a98: 	subq	%rdx, %rax
    00000a9b: 	leaq	0x200(%r11), %rcx
    00000aa2: 	leaq	(%r11,%rax,8), %rax
    00000aa6: 	movq	%rcx, %xmm2
    00000aab: 	movq	%rax, %xmm3
    00000ab0: 	jmp	.Ltmp4914 # Offset: 2736
    00000ab5: 	nopl	(%rax) # Size: 3
.Ltmp4906:
    00000ab8: 	movq	%r8, %rsi
    00000abb: 	movq	%rbx, %rdi
    00000abe: 	movq	%r10, 0x38(%rsp)
    00000ac3: 	subq	%rax, %rsi
    00000ac6: 	movq	%rdx, 0x20(%rsp)
    00000acb: 	movq	%r8, (%rsp)
    00000acf: 	callq	_ZNSt5dequeIdSaIdEE23_M_new_elements_at_backEm # Offset: 2767
    00000ad4: 	movdqu	0x30(%rbx), %xmm0
    00000ad9: 	movdqu	0x40(%rbx), %xmm1
    00000ade: 	movq	0x38(%rsp), %r10
    00000ae3: 	movq	0x20(%rsp), %rdx
    00000ae8: 	movq	(%rsp), %r8
    00000aec: 	movq	%xmm0, %r13
    00000af1: 	movhps	%xmm0, 0x10(%rsp)
    00000af6: 	jmp	.Ltmp4915 # Offset: 2806
    00000afb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4910:
    00000b00: 	movq	%rax, %rdx
    00000b03: 	sarq	$0x6, %rdx
    00000b07: 	jmp	.Ltmp4916 # Offset: 2823
    00000b09: 	nopl	(%rax) # Size: 7
.Ltmp4911:
    00000b10: 	movq	%rdx, %rax
    00000b13: 	notq	%rax
    00000b16: 	shrq	$0x6, %rax
    00000b1a: 	notq	%rax
    00000b1d: 	jmp	.Ltmp4917 # Offset: 2845
    00000b22: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4912:
    00000b28: 	leaq	(%rcx,%r9,8), %rax
    00000b2c: 	movq	%rax, %xmm2
    00000b31: 	jmp	.Ltmp4918 # Offset: 2865
.Ltmp4905:
    00000b36: 	callq	__stack_chk_fail@PLT # Offset: 2870
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEE13_M_insert_auxISt15_Deque_iteratorIdRKdPS4_EEEvS3_IdRdPdET_SB_m"

Binary Function "_Z19test_duplicate_coreISt5dequeIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 296
  State       : disassembled
  Address     : 0x325f0
  Size        : 0x316
  MaxSize     : 0x320
  Offset      : 0x325f0
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreISt5dequeIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0295:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	(,%rsi,8), %rcx
    0000000e: 	pushq	%r14
    00000010: 	pushq	%r13
    00000012: 	movq	%rdi, %r13
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x28(%rsp)
    00000022: 	xorl	%edx, %edx
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x48(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	movabsq	$0x500000000, %rax
    0000003e: 	divq	%rcx
    00000041: 	movq	%rax, (%rsp)
    00000045: 	cmpq	$0x3e8, %rax
    0000004b: 	ja	.Ltmp4919 # Offset: 75
    00000051: 	cmpq	$0x3, %rax
    00000055: 	ja	.Ltmp4920 # Offset: 85
    0000005b: 	movq	$0x0, 0x40(%rsp)
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	movq	$0x4, (%rsp)
    00000070: 	movaps	%xmm0, 0x30(%rsp)
.Ltmp4932:
    00000075: 	movq	(%rsp), %rbx
    00000079: 	leaq	0x30(%rsp), %rdi
    0000007e: 	movq	%rbx, %rsi
    00000081: 	callq	_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 129
    00000086: 	movq	0x30(%rsp), %rdx
    0000008b: 	movl	iterations(%rip), %eax
    00000091: 	movq	%rdx, 0x10(%rsp)
    00000096: 	testl	%eax, %eax
    00000098: 	jle	.Ltmp4921 # Offset: 152
    0000009e: 	addq	$0x8, %rdx
    000000a2: 	movl	%ebx, 0x1c(%rsp)
    000000a6: 	pxor	%xmm3, %xmm3
    000000aa: 	movl	$0x0, 0x18(%rsp)
    000000b2: 	movq	%rdx, 0x20(%rsp)
    000000b7: 	movsd	%xmm3, 0x8(%rsp)
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp4928:
    000000c0: 	movslq	0x18(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	%rdx, %rbx
    000000cb: 	addq	(%rsp), %rdx
    000000cf: 	subl	%ebx, %eax
    000000d1: 	cmpq	%rcx, %rdx
    000000d4: 	cmovbl	0x1c(%rsp), %eax
    000000d9: 	movl	%eax, %ebp
    000000db: 	callq	clock@PLT # Offset: 219
    000000e0: 	movq	0x10(%rsp), %r15
    000000e5: 	movq	0x20(%rsp), %rcx
    000000ea: 	movq	%rax, start_time(%rip)
    000000f1: 	leal	-0x1(%rbp), %eax
    000000f4: 	movq	%r15, %rbx
    000000f7: 	leaq	(%rcx,%rax,8), %r12
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4922:
    00000100: 	movl	$0x50, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	$0x0, (%rax)
    00000111: 	pxor	%xmm1, %xmm1
    00000115: 	movq	%rax, %rdi
    00000118: 	movq	%rax, %rbp
    0000011b: 	movq	$0x0, 0x8(%rax)
    00000123: 	movups	%xmm1, 0x10(%rax)
    00000127: 	movups	%xmm1, 0x20(%rax)
    0000012b: 	movups	%xmm1, 0x30(%rax)
    0000012f: 	movups	%xmm1, 0x40(%rax)
    00000133: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 307
    00000138: 	movq	%r13, %rsi
    0000013b: 	movq	%rbp, %rdi
    0000013e: 	callq	"_ZNSt5dequeIdSaIdEEaSERKS1_.isra.0/1" # Offset: 318
    00000143: 	movq	%rbp, (%r15)
    00000146: 	addq	$0x8, %r15
    0000014a: 	cmpq	%r15, %r12
    0000014d: 	jne	.Ltmp4922 # Offset: 333
    0000014f: 	callq	clock@PLT # Offset: 335
    00000154: 	pxor	%xmm0, %xmm0
    00000158: 	movq	%rax, end_time(%rip)
    0000015f: 	subq	start_time(%rip), %rax
    00000166: 	cvtsi2sd	%rax, %xmm0
    0000016b: 	divsd	DATAat0x53788(%rip), %xmm0
    00000173: 	addsd	0x8(%rsp), %xmm0
    00000179: 	movsd	%xmm0, 0x8(%rsp)
    0000017f: 	nop # Size: 1
.Ltmp4927:
    00000180: 	movq	(%rbx), %r15
    00000183: 	testq	%r15, %r15
    00000186: 	je	.Ltmp4923 # Offset: 390
    00000188: 	movq	(%r15), %rdi
    0000018b: 	testq	%rdi, %rdi
    0000018e: 	je	.Ltmp4924 # Offset: 398
    00000190: 	movq	0x48(%r15), %rax
    00000194: 	movq	0x28(%r15), %r14
    00000198: 	leaq	0x8(%rax), %rbp
    0000019c: 	cmpq	%r14, %rbp
    0000019f: 	jbe	.Ltmp4925 # Offset: 415
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp4926:
    000001a8: 	movq	(%r14), %rdi
    000001ab: 	movl	$0x200, %esi
    000001b0: 	addq	$0x8, %r14
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%r14, %rbp
    000001bc: 	ja	.Ltmp4926 # Offset: 444
    000001be: 	movq	(%r15), %rdi
.Ltmp4925:
    000001c1: 	movq	0x8(%r15), %rax
    000001c5: 	leaq	(,%rax,8), %rsi
    000001cd: 	callq	_ZdlPvm@PLT # Offset: 461
.Ltmp4924:
    000001d2: 	movl	$0x50, %esi
    000001d7: 	movq	%r15, %rdi
    000001da: 	callq	_ZdlPvm@PLT # Offset: 474
.Ltmp4923:
    000001df: 	movq	$0x0, (%rbx)
    000001e6: 	addq	$0x8, %rbx
    000001ea: 	cmpq	%rbx, %r12
    000001ed: 	jne	.Ltmp4927 # Offset: 493
    000001ef: 	movl	(%rsp), %edx
    000001f2: 	movl	iterations(%rip), %eax
    000001f8: 	addl	%edx, 0x18(%rsp)
    000001fc: 	movl	0x18(%rsp), %ecx
    00000200: 	cmpl	%ecx, %eax
    00000202: 	jg	.Ltmp4928 # Offset: 514
.Ltmp4934:
    00000208: 	movq	0x28(%rsp), %rdi
    0000020d: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 525
    00000212: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000219: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000220: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000227: 	je	.Ltmp4929 # Offset: 551
.Ltmp4933:
    0000022d: 	movq	-0x20(%rax), %rdi
    00000231: 	movsd	0x8(%rsp), %xmm0
    00000237: 	callq	_Z13record_resultdPKc # Offset: 567
    0000023c: 	cmpq	$0x0, 0x10(%rsp)
    00000242: 	je	.Ltmp4930 # Offset: 578
    00000244: 	movq	0x48(%rsp), %rax
    00000249: 	subq	%fs:0x28, %rax
    00000252: 	jne	.Ltmp4931 # Offset: 594
    00000254: 	movq	0x40(%rsp), %rsi
    00000259: 	movq	0x10(%rsp), %rdi
    0000025e: 	addq	$0x58, %rsp
    00000262: 	popq	%rbx
    00000263: 	popq	%rbp
    00000264: 	subq	%rdi, %rsi
    00000267: 	popq	%r12
    00000269: 	popq	%r13
    0000026b: 	popq	%r14
    0000026d: 	popq	%r15
    0000026f: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 623
.Ltmp4930:
    00000274: 	movq	0x48(%rsp), %rax
    00000279: 	subq	%fs:0x28, %rax
    00000282: 	jne	.Ltmp4931 # Offset: 642
    00000284: 	addq	$0x58, %rsp
    00000288: 	popq	%rbx
    00000289: 	popq	%rbp
    0000028a: 	popq	%r12
    0000028c: 	popq	%r13
    0000028e: 	popq	%r14
    00000290: 	popq	%r15
    00000292: 	retq # Offset: 658
.Ltmp4919:
    00000293: 	movq	$0x3e8, (%rsp)
.Ltmp4920:
    0000029b: 	movq	$0x0, 0x40(%rsp)
    000002a4: 	pxor	%xmm0, %xmm0
    000002a8: 	movaps	%xmm0, 0x30(%rsp)
    000002ad: 	jmp	.Ltmp4932 # Offset: 685
.Ltmp4929:
    000002b2: 	movq	-0x8(%rdx), %rax
    000002b6: 	addq	$0x200, %rax
    000002bc: 	jmp	.Ltmp4933 # Offset: 700
.Ltmp4921:
    000002c1: 	pxor	%xmm4, %xmm4
    000002c5: 	movsd	%xmm4, 0x8(%rsp)
    000002cb: 	jmp	.Ltmp4934 # Offset: 715
.Ltmp4931:
    000002d0: 	callq	__stack_chk_fail@PLT # Offset: 720
    000002d5: 	endbr64
    000002d9: 	movq	%rax, %rbx
    000002dc: 	jmp	.Ltmp4935 # Offset: 732
    000002de: 	endbr64
    000002e2: 	movq	%rax, %rbp
    000002e5: 	jmp	.Ltmp4936 # Offset: 741
.Ltmp4935:
    000002e7: 	movq	%rbp, %rdi
    000002ea: 	movl	$0x50, %esi
    000002ef: 	movq	%rbx, %rbp
    000002f2: 	callq	_ZdlPvm@PLT # Offset: 754
.Ltmp4936:
    000002f7: 	movq	0x30(%rsp), %rdi
    000002fc: 	movq	0x40(%rsp), %rsi
    00000301: 	subq	%rdi, %rsi
    00000304: 	testq	%rdi, %rdi
    00000307: 	je	.Ltmp4937 # Offset: 775
    00000309: 	callq	_ZdlPvm@PLT # Offset: 777
.Ltmp4937:
    0000030e: 	movq	%rbp, %rdi
    00000311: 	callq	_Unwind_Resume@PLT # Offset: 785
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreISt5dequeIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_duplicate1IdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 297
  State       : disassembled
  Address     : 0x32910
  Size        : 0x2bf
  MaxSize     : 0x2c0
  Offset      : 0x32910
  Section     : .text
  Orc Section : .local.text._Z15test_duplicate1IdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0296:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rsi, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rdi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	subq	%rbp, %r12
    0000001b: 	subq	$0xb8, %rsp
    00000022: 	movq	%rdx, 0x28(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0xa8(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	leaq	0x50(%rsp), %rax
    0000003f: 	movaps	%xmm0, 0x60(%rsp)
    00000044: 	movq	%rax, %rdi
    00000047: 	movq	%rax, 0x10(%rsp)
    0000004c: 	movaps	%xmm0, 0x70(%rsp)
    00000051: 	movaps	%xmm0, 0x80(%rsp)
    00000059: 	movaps	%xmm0, 0x90(%rsp)
    00000061: 	movq	$0x0, 0x50(%rsp)
    0000006a: 	movq	$0x0, 0x58(%rsp)
    00000073: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 115
    00000078: 	movq	0x98(%rsp), %r11
    00000080: 	movq	0x78(%rsp), %r15
    00000085: 	movq	%r12, %rcx
    00000088: 	sarq	$0x3, %rcx
    0000008c: 	movq	0x70(%rsp), %r13
    00000091: 	movq	0x60(%rsp), %r14
    00000096: 	movq	%r12, 0x8(%rsp)
    0000009b: 	movq	%r11, %rax
    0000009e: 	movq	%r15, %xmm2
    000000a3: 	movq	%rcx, 0x18(%rsp)
    000000a8: 	movq	%rcx, %rbx
    000000ab: 	subq	%r15, %rax
    000000ae: 	movq	0x80(%rsp), %rdx
    000000b6: 	movq	%r13, %xmm0
    000000bb: 	sarq	$0x3, %rax
    000000bf: 	cmpq	$0x1, %r11
    000000c3: 	punpcklqdq	%xmm2, %xmm0
    000000c7: 	adcq	$-0x1, %rax
    000000cb: 	subq	0x88(%rsp), %rdx
    000000d3: 	sarq	$0x3, %rdx
    000000d7: 	shlq	$0x6, %rax
    000000db: 	addq	%rdx, %rax
    000000de: 	movq	%r13, %rdx
    000000e1: 	subq	%r14, %rdx
    000000e4: 	sarq	$0x3, %rdx
    000000e8: 	addq	%rdx, %rax
    000000eb: 	cmpq	%rax, %rcx
    000000ee: 	ja	.Ltmp4938 # Offset: 238
    000000f4: 	movq	0x68(%rsp), %r8
    000000f9: 	movq	%r14, %xmm1
    000000fe: 	movq	%r8, %xmm3
    00000103: 	punpcklqdq	%xmm3, %xmm1
    00000107: 	jb	.Ltmp4939 # Offset: 263
.Ltmp4949:
    0000010d: 	cmpq	$0x0, 0x8(%rsp)
    00000113: 	jg	.Ltmp4940 # Offset: 275
    00000115: 	jmp	.Ltmp4941 # Offset: 277
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4944:
    00000120: 	addq	%rdx, %r14
    00000123: 	cmpq	$0x3f, %rax
    00000127: 	jle	.Ltmp4942 # Offset: 295
    00000129: 	movq	%rax, %rdx
    0000012c: 	sarq	$0x6, %rdx
.Ltmp4945:
    00000130: 	leaq	(%r15,%rdx,8), %r15
    00000134: 	shlq	$0x6, %rdx
    00000138: 	movq	(%r15), %r8
    0000013b: 	subq	%rdx, %rax
    0000013e: 	leaq	0x200(%r8), %r13
    00000145: 	leaq	(%r8,%rax,8), %r14
.Ltmp4942:
    00000149: 	subq	%r12, %rbx
    0000014c: 	testq	%rbx, %rbx
    0000014f: 	jle	.Ltmp4941 # Offset: 335
.Ltmp4940:
    00000151: 	movq	%r13, %r12
    00000154: 	movq	%rbp, %rsi
    00000157: 	subq	%r14, %r12
    0000015a: 	sarq	$0x3, %r12
    0000015e: 	cmpq	%rbx, %r12
    00000161: 	cmovgq	%rbx, %r12
    00000165: 	leaq	(,%r12,8), %rdx
    0000016d: 	addq	%rdx, %rbp
    00000170: 	testq	%rdx, %rdx
    00000173: 	je	.Ltmp4943 # Offset: 371
    00000175: 	movq	%r14, %rdi
    00000178: 	movq	%r8, 0x8(%rsp)
    0000017d: 	movq	%rdx, (%rsp)
    00000181: 	callq	memmove@PLT # Offset: 385
    00000186: 	movq	0x8(%rsp), %r8
    0000018b: 	movq	(%rsp), %rdx
.Ltmp4943:
    0000018f: 	movq	%r14, %rax
    00000192: 	subq	%r8, %rax
    00000195: 	sarq	$0x3, %rax
    00000199: 	addq	%r12, %rax
    0000019c: 	jns	.Ltmp4944 # Offset: 412
    0000019e: 	movq	%rax, %rdx
    000001a1: 	notq	%rdx
    000001a4: 	shrq	$0x6, %rdx
    000001a8: 	notq	%rdx
    000001ab: 	jmp	.Ltmp4945 # Offset: 427
    000001ad: 	nopl	(%rax) # Size: 3
.Ltmp4941:
    000001b0: 	movq	0x28(%rsp), %rdx
    000001b5: 	movq	0x18(%rsp), %rsi
    000001ba: 	movq	0x10(%rsp), %rdi
    000001bf: 	callq	_Z19test_duplicate_coreISt5dequeIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 447
    000001c4: 	movq	0x10(%rsp), %rdi
    000001c9: 	callq	_ZNSt11_Deque_baseIdSaIdEED2Ev # Offset: 457
    000001ce: 	movq	0xa8(%rsp), %rax
    000001d6: 	subq	%fs:0x28, %rax
    000001df: 	jne	.Ltmp4946 # Offset: 479
    000001e5: 	addq	$0xb8, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4939:
    00000200: 	leaq	0x30(%rsp), %rdi
    00000205: 	movq	%rcx, %rsi
    00000208: 	movaps	%xmm1, 0x30(%rsp)
    0000020d: 	movaps	%xmm0, 0x40(%rsp)
    00000212: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 530
    00000217: 	movq	0x48(%rsp), %rdi
    0000021c: 	leaq	0x8(%r11), %rax
    00000220: 	movq	%rax, 0x20(%rsp)
    00000225: 	leaq	0x8(%rdi), %r12
    00000229: 	cmpq	%r12, %rax
    0000022c: 	jbe	.Ltmp4947 # Offset: 556
    0000022e: 	nop # Size: 2
.Ltmp4948:
    00000230: 	movq	(%r12), %rdi
    00000234: 	movl	$0x200, %esi
    00000239: 	movq	%r8, (%rsp)
    0000023d: 	addq	$0x8, %r12
    00000241: 	callq	_ZdlPvm@PLT # Offset: 577
    00000246: 	cmpq	%r12, 0x20(%rsp)
    0000024b: 	movq	(%rsp), %r8
    0000024f: 	ja	.Ltmp4948 # Offset: 591
.Ltmp4947:
    00000251: 	movdqa	0x30(%rsp), %xmm4
    00000257: 	movdqa	0x40(%rsp), %xmm5
    0000025d: 	movaps	%xmm4, 0x80(%rsp)
    00000265: 	movaps	%xmm5, 0x90(%rsp)
    0000026d: 	jmp	.Ltmp4949 # Offset: 621
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4938:
    00000278: 	movq	%rcx, %rsi
    0000027b: 	movq	0x10(%rsp), %rdi
    00000280: 	subq	%rax, %rsi
    00000283: 	callq	"_ZNSt5dequeIdSaIdEE17_M_default_appendEm.part.0/1" # Offset: 643
    00000288: 	movq	0x60(%rsp), %r14
    0000028d: 	movq	0x68(%rsp), %r8
    00000292: 	movq	0x70(%rsp), %r13
    00000297: 	movq	0x78(%rsp), %r15
    0000029c: 	jmp	.Ltmp4949 # Offset: 668
.Ltmp4946:
    000002a1: 	callq	__stack_chk_fail@PLT # Offset: 673
    000002a6: 	endbr64
    000002aa: 	movq	%rax, %rbp
    000002ad: 	movq	0x10(%rsp), %rdi
    000002b2: 	callq	_ZNSt11_Deque_baseIdSaIdEED2Ev # Offset: 690
    000002b7: 	movq	%rbp, %rdi
    000002ba: 	callq	_Unwind_Resume@PLT # Offset: 698
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_duplicate1IdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeIdSaIdEE8_M_eraseESt15_Deque_iteratorIdRdPdE" after disassembly {
  Number      : 298
  State       : disassembled
  Address     : 0x32bd0
  Size        : 0x3d9
  MaxSize     : 0x3e0
  Offset      : 0x32bd0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEE8_M_eraseESt15_Deque_iteratorIdRdPdE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0297:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, %rbx
    00000014: 	subq	$0xb8, %rsp
    0000001b: 	movdqu	(%rdx), %xmm1
    0000001f: 	movdqu	0x10(%rdx), %xmm0
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0xa8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movq	%xmm1, %rcx
    0000003c: 	movhlps	%xmm1, %xmm6
    0000003f: 	movhlps	%xmm0, %xmm7
    00000042: 	movq	%xmm0, %r9
    00000047: 	leaq	0x8(%rcx), %r8
    0000004b: 	movq	%xmm6, %rax
    00000050: 	movq	%xmm7, 0x8(%rsp)
    00000056: 	movq	%xmm7, %r12
    0000005b: 	movq	%xmm6, 0x10(%rsp)
    00000061: 	cmpq	%r9, %r8
    00000064: 	je	.Ltmp4950 # Offset: 100
.Ltmp4961:
    0000006a: 	movq	%r12, %rbp
    0000006d: 	movq	0x48(%rbx), %r15
    00000071: 	movq	0x30(%rbx), %r13
    00000075: 	movq	%r8, %xmm5
    0000007a: 	movdqu	0x20(%rbx), %xmm2
    0000007f: 	movdqu	0x10(%rbx), %xmm3
    00000084: 	movq	%r9, %xmm4
    00000089: 	movhps	0x10(%rsp), %xmm5
    0000008e: 	movq	%r13, 0x18(%rsp)
    00000093: 	movhps	0x8(%rsp), %xmm4
    00000098: 	movhlps	%xmm2, %xmm7
    0000009b: 	movq	%xmm3, %r10
    000000a0: 	movq	%xmm2, %rdx
    000000a5: 	movq	%xmm7, %r11
    000000aa: 	movhlps	%xmm3, %xmm6
    000000ad: 	movq	%xmm2, %rsi
    000000b2: 	subq	%r10, %rdx
    000000b5: 	subq	%r11, %rbp
    000000b8: 	sarq	$0x3, %rdx
    000000bc: 	movq	%xmm6, %rdi
    000000c1: 	sarq	$0x3, %rbp
    000000c5: 	cmpq	$0x1, %r12
    000000c9: 	movq	%rcx, %r12
    000000cc: 	adcq	$-0x1, %rbp
    000000d0: 	subq	%rax, %r12
    000000d3: 	movq	%r12, %rax
    000000d6: 	shlq	$0x6, %rbp
    000000da: 	movq	0x38(%rbx), %r12
    000000de: 	sarq	$0x3, %rax
    000000e2: 	addq	%rax, %rbp
    000000e5: 	movq	%r15, %rax
    000000e8: 	movq	%r12, 0x10(%rsp)
    000000ed: 	subq	%r11, %rax
    000000f0: 	addq	%rdx, %rbp
    000000f3: 	movq	%r13, %r11
    000000f6: 	sarq	$0x3, %rax
    000000fa: 	cmpq	$0x1, %r15
    000000fe: 	adcq	$-0x1, %rax
    00000102: 	subq	%r12, %r11
    00000105: 	shlq	$0x6, %rax
    00000109: 	sarq	$0x3, %r11
    0000010d: 	addq	%r11, %rax
    00000110: 	addq	%rdx, %rax
    00000113: 	shrq	%rax
    00000116: 	cmpq	%rbp, %rax
    00000119: 	jbe	.Ltmp4951 # Offset: 281
    0000011f: 	cmpq	%rcx, %r10
    00000122: 	je	.Ltmp4952 # Offset: 290
    00000124: 	leaq	0x60(%rsp), %rcx
    00000129: 	leaq	0x20(%rsp), %rsi
    0000012e: 	movaps	%xmm5, 0x60(%rsp)
    00000133: 	leaq	0x80(%rsp), %rdi
    0000013b: 	leaq	0x40(%rsp), %rdx
    00000140: 	movaps	%xmm4, 0x70(%rsp)
    00000145: 	movaps	%xmm1, 0x40(%rsp)
    0000014a: 	movaps	%xmm0, 0x50(%rsp)
    0000014f: 	movaps	%xmm3, 0x20(%rsp)
    00000154: 	movaps	%xmm2, 0x30(%rsp)
    00000159: 	callq	_ZSt13move_backwardISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_ # Offset: 345
    0000015e: 	movq	0x10(%rbx), %rcx
    00000162: 	movq	0x20(%rbx), %rsi
    00000166: 	movq	0x18(%rbx), %rdi
.Ltmp4952:
    0000016a: 	leaq	-0x8(%rsi), %rax
    0000016e: 	cmpq	%rax, %rcx
    00000171: 	je	.Ltmp4953 # Offset: 369
    00000177: 	addq	$0x8, %rcx
    0000017b: 	movq	0x28(%rbx), %rax
    0000017f: 	movq	%rcx, 0x10(%rbx)
.Ltmp4960:
    00000183: 	movq	%rdi, 0x8(%r14)
    00000187: 	movq	%r14, %rdi
    0000018a: 	movq	%rsi, 0x10(%r14)
    0000018e: 	movq	%rbp, %rsi
    00000191: 	movq	%rax, 0x18(%r14)
    00000195: 	movq	%rcx, (%r14)
    00000198: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 408
    0000019d: 	movq	0xa8(%rsp), %rax
    000001a5: 	subq	%fs:0x28, %rax
    000001ae: 	jne	.Ltmp4954 # Offset: 430
    000001b4: 	addq	$0xb8, %rsp
    000001bb: 	movq	%r14, %rax
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	popq	%r14
    000001c6: 	popq	%r15
    000001c8: 	retq # Offset: 456
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp4951:
    000001d0: 	cmpq	%r8, 0x18(%rsp)
    000001d5: 	je	.Ltmp4955 # Offset: 469
    000001db: 	cmpq	0x8(%rsp), %r15
    000001e0: 	je	.Ltmp4956 # Offset: 480
    000001e6: 	leaq	0x60(%rsp), %r13
    000001eb: 	movq	%r9, %rdx
    000001ee: 	movq	%r8, %rsi
    000001f1: 	movaps	%xmm1, 0x60(%rsp)
    000001f6: 	leaq	0x80(%rsp), %r12
    000001fe: 	movq	%r13, %rcx
    00000201: 	movaps	%xmm0, 0x70(%rsp)
    00000206: 	movq	%r12, %rdi
    00000209: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 521
    0000020e: 	movq	0x8(%rsp), %rax
    00000213: 	movdqa	0x80(%rsp), %xmm1
    0000021c: 	movdqa	0x90(%rsp), %xmm0
    00000225: 	addq	$0x8, %rax
    00000229: 	cmpq	%rax, %r15
    0000022c: 	je	.Ltmp4957 # Offset: 556
    0000022e: 	movq	%rbx, 0x8(%rsp)
    00000233: 	movq	%rax, %rbx
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4958:
    00000240: 	movaps	%xmm1, 0x60(%rsp)
    00000245: 	movq	%r13, %rcx
    00000248: 	movq	%r12, %rdi
    0000024b: 	addq	$0x8, %rbx
    0000024f: 	movaps	%xmm0, 0x70(%rsp)
    00000254: 	movq	-0x8(%rbx), %rsi
    00000258: 	leaq	0x200(%rsi), %rdx
    0000025f: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 607
    00000264: 	movdqa	0x80(%rsp), %xmm1
    0000026d: 	movdqa	0x90(%rsp), %xmm0
    00000276: 	cmpq	%rbx, %r15
    00000279: 	jne	.Ltmp4958 # Offset: 633
    0000027b: 	movq	0x8(%rsp), %rbx
.Ltmp4957:
    00000280: 	movq	0x18(%rsp), %rdx
    00000285: 	movq	0x10(%rsp), %rsi
    0000028a: 	movq	%r12, %rcx
    0000028d: 	movq	%r13, %rdi
    00000290: 	movaps	%xmm1, 0x80(%rsp)
    00000298: 	movaps	%xmm0, 0x90(%rsp)
    000002a0: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 672
.Ltmp4962:
    000002a5: 	movq	0x38(%rbx), %rax
    000002a9: 	movq	0x30(%rbx), %r8
    000002ad: 	movq	%rax, 0x10(%rsp)
.Ltmp4955:
    000002b2: 	cmpq	0x10(%rsp), %r8
    000002b7: 	je	.Ltmp4959 # Offset: 695
    000002b9: 	subq	$0x8, %r8
    000002bd: 	movq	0x10(%rbx), %rcx
    000002c1: 	movq	0x18(%rbx), %rdi
    000002c5: 	movq	0x20(%rbx), %rsi
    000002c9: 	movq	0x28(%rbx), %rax
    000002cd: 	movq	%r8, 0x30(%rbx)
    000002d1: 	jmp	.Ltmp4960 # Offset: 721
    000002d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4950:
    000002e0: 	movq	0x8(%r12), %r8
    000002e5: 	leaq	0x8(%r12), %rdi
    000002ea: 	movq	%rdi, 0x8(%rsp)
    000002ef: 	movq	%r8, 0x10(%rsp)
    000002f4: 	leaq	0x200(%r8), %r9
    000002fb: 	jmp	.Ltmp4961 # Offset: 763
.Ltmp4956:
    00000300: 	movq	%r13, %rdx
    00000303: 	leaq	0x60(%rsp), %rdi
    00000308: 	movq	%r8, %rsi
    0000030b: 	movaps	%xmm1, 0x80(%rsp)
    00000313: 	leaq	0x80(%rsp), %rcx
    0000031b: 	movaps	%xmm0, 0x90(%rsp)
    00000323: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 803
    00000328: 	jmp	.Ltmp4962 # Offset: 808
    0000032d: 	nopl	(%rax) # Size: 3
.Ltmp4959:
    00000330: 	movl	$0x200, %esi
    00000335: 	movq	%r8, %rdi
    00000338: 	callq	_ZdlPvm@PLT # Offset: 824
    0000033d: 	movq	0x48(%rbx), %rdx
    00000341: 	movq	0x18(%rbx), %rdi
    00000345: 	movq	0x20(%rbx), %rsi
    00000349: 	movq	-0x8(%rdx), %rax
    0000034d: 	subq	$0x8, %rdx
    00000351: 	movq	%rdx, %xmm2
    00000356: 	leaq	0x1f8(%rax), %rcx
    0000035d: 	movq	%rax, %xmm3
    00000362: 	addq	$0x200, %rax
    00000368: 	movq	%rcx, %xmm0
    0000036d: 	movq	0x10(%rbx), %rcx
    00000371: 	punpcklqdq	%xmm3, %xmm0
    00000375: 	movups	%xmm0, 0x30(%rbx)
    00000379: 	movq	%rax, %xmm0
    0000037e: 	movq	0x28(%rbx), %rax
    00000382: 	punpcklqdq	%xmm2, %xmm0
    00000386: 	movups	%xmm0, 0x40(%rbx)
    0000038a: 	jmp	.Ltmp4960 # Offset: 906
    0000038f: 	nop # Size: 1
.Ltmp4953:
    00000390: 	movl	$0x200, %esi
    00000395: 	callq	_ZdlPvm@PLT # Offset: 917
    0000039a: 	movq	0x28(%rbx), %rdx
    0000039e: 	movq	0x8(%rdx), %rcx
    000003a2: 	leaq	0x8(%rdx), %rax
    000003a6: 	movq	%rax, %xmm2
    000003ab: 	movq	%rcx, %xmm0
    000003b0: 	leaq	0x200(%rcx), %rsi
    000003b7: 	movq	%rcx, %rdi
    000003ba: 	punpcklqdq	%xmm0, %xmm0
    000003be: 	movups	%xmm0, 0x10(%rbx)
    000003c2: 	movq	%rsi, %xmm0
    000003c7: 	punpcklqdq	%xmm2, %xmm0
    000003cb: 	movups	%xmm0, 0x20(%rbx)
    000003cf: 	jmp	.Ltmp4960 # Offset: 975
.Ltmp4954:
    000003d4: 	callq	__stack_chk_fail@PLT # Offset: 980
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEE8_M_eraseESt15_Deque_iteratorIdRdPdE"

Binary Function "_Z26test_erase_pushback_sortedIdSt5dequeIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 299
  State       : disassembled
  Address     : 0x32fb0
  Size        : 0x8a9
  MaxSize     : 0x8b0
  Offset      : 0x32fb0
  Section     : .text
  Orc Section : .local.text._Z26test_erase_pushback_sortedIdSt5dequeIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0298:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x108, %rsp
    00000015: 	movq	%rsi, 0x28(%rsp)
    0000001a: 	subq	%rdi, %rsi
    0000001d: 	movq	%rdx, 0x40(%rsp)
    00000022: 	xorl	%edx, %edx
    00000024: 	movq	%rdi, 0x80(%rsp)
    0000002c: 	movq	%rcx, 0x8(%rsp)
    00000031: 	movq	%r8, 0x88(%rsp)
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0xf8(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	movabsq	$0x500000000, %rax
    00000056: 	divq	%rsi
    00000059: 	movq	%rax, 0x48(%rsp)
    0000005e: 	cmpq	$0x3e8, %rax
    00000064: 	ja	.Ltmp4963 # Offset: 100
    0000006a: 	cmpq	$0x3, %rax
    0000006e: 	ja	.Ltmp4964 # Offset: 110
    00000074: 	movq	$0x0, 0xa0(%rsp)
    00000080: 	pxor	%xmm0, %xmm0
    00000084: 	movq	$0x4, 0x48(%rsp)
    0000008d: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5005:
    00000095: 	movq	0x48(%rsp), %rbx
    0000009a: 	leaq	0x90(%rsp), %rdi
    000000a2: 	movq	%rbx, %rsi
    000000a5: 	callq	_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 165
    000000aa: 	movq	0x90(%rsp), %rdi
    000000b2: 	movl	iterations(%rip), %eax
    000000b8: 	movq	%rdi, 0x20(%rsp)
    000000bd: 	testl	%eax, %eax
    000000bf: 	jle	.Ltmp4965 # Offset: 191
    000000c5: 	movl	%ebx, 0x7c(%rsp)
    000000c9: 	pxor	%xmm6, %xmm6
    000000cd: 	movl	$0x0, 0x78(%rsp)
    000000d5: 	movsd	%xmm6, 0x70(%rsp)
.Ltmp4996:
    000000db: 	movslq	0x78(%rsp), %rdx
    000000e0: 	movslq	%eax, %rcx
    000000e3: 	movl	$0x50, %edi
    000000e8: 	movq	%rdx, %rbx
    000000eb: 	addq	0x48(%rsp), %rdx
    000000f0: 	subl	%ebx, %eax
    000000f2: 	cmpq	%rcx, %rdx
    000000f5: 	cmovbl	0x7c(%rsp), %eax
    000000fa: 	movl	%eax, %r15d
    000000fd: 	callq	_Znwm@PLT # Offset: 253
    00000102: 	movq	$0x0, (%rax)
    00000109: 	pxor	%xmm5, %xmm5
    0000010d: 	movq	%rax, %rdi
    00000110: 	movq	%rax, %r13
    00000113: 	movq	$0x0, 0x8(%rax)
    0000011b: 	movups	%xmm5, 0x10(%rax)
    0000011f: 	movups	%xmm5, 0x20(%rax)
    00000123: 	movups	%xmm5, 0x30(%rax)
    00000127: 	movups	%xmm5, 0x40(%rax)
    0000012b: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 299
    00000130: 	movq	0x30(%r13), %r14
    00000134: 	movq	0x40(%r13), %rdx
    00000138: 	movq	0x80(%rsp), %rax
    00000140: 	cmpq	%rax, 0x28(%rsp)
    00000145: 	je	.Ltmp4966 # Offset: 325
    00000147: 	movq	%rax, %rbx
    0000014a: 	jmp	.Ltmp4967 # Offset: 330
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp4968:
    00000150: 	movsd	-0x8(%rbx), %xmm0
    00000155: 	addq	$0x8, %r14
    00000159: 	movsd	%xmm0, -0x8(%r14)
    0000015f: 	movq	%r14, 0x30(%r13)
    00000163: 	cmpq	%rbx, 0x28(%rsp)
    00000168: 	je	.Ltmp4966 # Offset: 360
.Ltmp4967:
    0000016a: 	leaq	-0x8(%rdx), %rax
    0000016e: 	movq	%rbx, %rsi
    00000171: 	addq	$0x8, %rbx
    00000175: 	cmpq	%rax, %r14
    00000178: 	jne	.Ltmp4968 # Offset: 376
    0000017a: 	movq	%r13, %rdi
    0000017d: 	callq	_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_ # Offset: 381
    00000182: 	movq	0x30(%r13), %r14
    00000186: 	movq	0x40(%r13), %rdx
    0000018a: 	cmpq	%rbx, 0x28(%rsp)
    0000018f: 	jne	.Ltmp4967 # Offset: 399
.Ltmp4966:
    00000191: 	movq	0x38(%r13), %rsi
    00000195: 	movq	0x48(%r13), %rcx
    00000199: 	movq	%r14, %xmm3
    0000019e: 	movq	%rdx, %xmm0
    000001a3: 	movdqu	0x20(%r13), %xmm1
    000001a9: 	movdqu	0x10(%r13), %xmm2
    000001af: 	movq	%rsi, %xmm7
    000001b4: 	movq	%rcx, %xmm6
    000001b9: 	punpcklqdq	%xmm7, %xmm3
    000001bd: 	movq	%xmm2, %rdx
    000001c2: 	movhlps	%xmm1, %xmm7
    000001c5: 	punpcklqdq	%xmm6, %xmm0
    000001c9: 	movq	%xmm7, %rdi
    000001ce: 	movq	%xmm1, %rax
    000001d3: 	cmpq	%r14, %rdx
    000001d6: 	je	.Ltmp4969 # Offset: 470
    000001dc: 	movq	%rcx, %rbx
    000001df: 	leaq	0xb0(%rsp), %r12
    000001e7: 	leaq	0xd0(%rsp), %rbp
    000001ef: 	movaps	%xmm3, 0xb0(%rsp)
    000001f7: 	subq	%rdi, %rbx
    000001fa: 	movq	%rbp, %rdi
    000001fd: 	movaps	%xmm3, 0x60(%rsp)
    00000202: 	sarq	$0x3, %rbx
    00000206: 	cmpq	$0x1, %rcx
    0000020a: 	movq	%r14, %rcx
    0000020d: 	movaps	%xmm0, 0xc0(%rsp)
    00000215: 	adcq	$-0x1, %rbx
    00000219: 	subq	%rsi, %rcx
    0000021c: 	subq	%rdx, %rax
    0000021f: 	movl	$0x3f, %edx
    00000224: 	sarq	$0x3, %rcx
    00000228: 	shlq	$0x6, %rbx
    0000022c: 	movq	%r12, %rsi
    0000022f: 	movaps	%xmm0, 0x50(%rsp)
    00000234: 	addq	%rcx, %rbx
    00000237: 	sarq	$0x3, %rax
    0000023b: 	movaps	%xmm2, 0xd0(%rsp)
    00000243: 	addq	%rax, %rbx
    00000246: 	movaps	%xmm2, 0x30(%rsp)
    0000024b: 	bsrq	%rbx, %rax
    0000024f: 	movaps	%xmm1, 0xe0(%rsp)
    00000257: 	xorq	$0x3f, %rax
    0000025b: 	movaps	%xmm1, 0x10(%rsp)
    00000260: 	subl	%eax, %edx
    00000262: 	movslq	%edx, %rdx
    00000265: 	addq	%rdx, %rdx
    00000268: 	callq	"_ZSt16__introsort_loopISt15_Deque_iteratorIdRdPdElN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_T1_.isra.0/1" # Offset: 616
    0000026d: 	cmpq	$0x10, %rbx
    00000271: 	movdqa	0x10(%rsp), %xmm1
    00000277: 	movdqa	0x30(%rsp), %xmm2
    0000027d: 	movdqa	0x50(%rsp), %xmm0
    00000283: 	movdqa	0x60(%rsp), %xmm3
    00000289: 	jle	.Ltmp4970 # Offset: 649
    0000028f: 	movl	$0x10, %esi
    00000294: 	movq	%r12, %rdi
    00000297: 	movaps	%xmm2, 0xb0(%rsp)
    0000029f: 	movaps	%xmm1, 0xc0(%rsp)
    000002a7: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 679
    000002ac: 	movq	%r12, %rsi
    000002af: 	movq	%rbp, %rdi
    000002b2: 	movaps	%xmm2, 0x30(%rsp)
    000002b7: 	movdqa	0x10(%rsp), %xmm1
    000002bd: 	movaps	%xmm2, 0xd0(%rsp)
    000002c5: 	movaps	%xmm1, 0xe0(%rsp)
    000002cd: 	callq	"_ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_.isra.0/1" # Offset: 717
    000002d2: 	movdqa	0x30(%rsp), %xmm2
    000002d8: 	movdqa	0x10(%rsp), %xmm1
    000002de: 	movq	%rbp, %rdi
    000002e1: 	movl	$0x10, %esi
    000002e6: 	movaps	%xmm2, 0xd0(%rsp)
    000002ee: 	movaps	%xmm1, 0xe0(%rsp)
    000002f6: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 758
    000002fb: 	movq	0xd0(%rsp), %rdi
    00000303: 	movq	0xd8(%rsp), %r10
    0000030b: 	movq	0xe0(%rsp), %rbx
    00000313: 	movq	0xe8(%rsp), %r9
.Ltmp4978:
    0000031b: 	leaq	-0x8(%r9), %r11
.Ltmp4977:
    0000031f: 	movq	%rdi, %rdx
    00000322: 	cmpq	%r14, %rdi
    00000325: 	je	.Ltmp4969 # Offset: 805
    0000032b: 	movsd	(%rdi), %xmm1
    0000032f: 	cmpq	%rdi, %r10
    00000332: 	je	.Ltmp4971 # Offset: 818
    00000338: 	movq	%r9, %r8
    0000033b: 	movq	%r10, %rcx
    0000033e: 	movq	%rdi, %rsi
.Ltmp4979:
    00000341: 	movsd	-0x8(%rsi), %xmm0
    00000346: 	leaq	-0x8(%rsi), %rax
    0000034a: 	comisd	%xmm1, %xmm0
    0000034e: 	ja	.Ltmp4972 # Offset: 846
    00000350: 	jmp	.Ltmp4973 # Offset: 848
    00000352: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4975:
    00000358: 	movsd	-0x8(%rax), %xmm0
    0000035d: 	leaq	-0x8(%rax), %rsi
    00000361: 	comisd	%xmm1, %xmm0
    00000365: 	jbe	.Ltmp4974 # Offset: 869
.Ltmp4976:
    00000367: 	movq	%rax, %rdx
    0000036a: 	movq	%rsi, %rax
.Ltmp4972:
    0000036d: 	movsd	%xmm0, (%rdx)
    00000371: 	cmpq	%rcx, %rax
    00000374: 	jne	.Ltmp4975 # Offset: 884
    00000376: 	movq	-0x8(%r8), %rcx
    0000037a: 	leaq	-0x8(%r8), %rdx
    0000037e: 	movsd	0x1f8(%rcx), %xmm0
    00000386: 	leaq	0x1f8(%rcx), %rsi
    0000038d: 	comisd	%xmm1, %xmm0
    00000391: 	jbe	.Ltmp4974 # Offset: 913
    00000393: 	movq	%rdx, %r8
    00000396: 	jmp	.Ltmp4976 # Offset: 918
.Ltmp4973:
    00000398: 	movq	%rdi, %rax
.Ltmp4974:
    0000039b: 	addq	$0x8, %rdi
    0000039f: 	movsd	%xmm1, (%rax)
    000003a3: 	cmpq	%rdi, %rbx
    000003a6: 	jne	.Ltmp4977 # Offset: 934
    000003ac: 	movq	0x8(%r9), %rdi
    000003b0: 	addq	$0x8, %r9
    000003b4: 	leaq	0x200(%rdi), %rbx
    000003bb: 	movq	%rdi, %r10
    000003be: 	jmp	.Ltmp4978 # Offset: 958
.Ltmp4971:
    000003c3: 	movq	-0x8(%r9), %rcx
    000003c7: 	movq	%r11, %r8
    000003ca: 	leaq	0x200(%rcx), %rsi
    000003d1: 	jmp	.Ltmp4979 # Offset: 977
.Ltmp4970:
    000003d6: 	movq	%r12, %rsi
    000003d9: 	movq	%rbp, %rdi
    000003dc: 	movaps	%xmm3, 0xb0(%rsp)
    000003e4: 	movaps	%xmm0, 0xc0(%rsp)
    000003ec: 	movaps	%xmm2, 0xd0(%rsp)
    000003f4: 	movaps	%xmm1, 0xe0(%rsp)
    000003fc: 	callq	"_ZSt16__insertion_sortISt15_Deque_iteratorIdRdPdEN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S7_T0_.isra.0/1" # Offset: 1020
.Ltmp4969:
    00000401: 	movq	0x20(%rsp), %rax
    00000406: 	movq	%r13, (%rax)
    00000409: 	cmpl	$0x1, %r15d
    0000040d: 	je	.Ltmp4980 # Offset: 1037
    00000413: 	movq	%rax, %rdi
    00000416: 	leaq	0x8(%rax), %rax
    0000041a: 	movq	%rax, 0x50(%rsp)
    0000041f: 	movq	%rax, %rbx
    00000422: 	leal	-0x2(%r15), %eax
    00000426: 	leaq	0x10(%rdi,%rax,8), %r12
    0000042b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4981:
    00000430: 	movl	$0x50, %edi
    00000435: 	callq	_Znwm@PLT # Offset: 1077
    0000043a: 	movq	$0x0, (%rax)
    00000441: 	pxor	%xmm4, %xmm4
    00000445: 	movq	%rax, %rdi
    00000448: 	movq	%rax, %rbp
    0000044b: 	movq	$0x0, 0x8(%rax)
    00000453: 	movups	%xmm4, 0x10(%rax)
    00000457: 	movups	%xmm4, 0x20(%rax)
    0000045b: 	movups	%xmm4, 0x30(%rax)
    0000045f: 	movups	%xmm4, 0x40(%rax)
    00000463: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 1123
    00000468: 	movq	0x20(%rsp), %rax
    0000046d: 	movq	%rbp, %rdi
    00000470: 	movq	(%rax), %rsi
    00000473: 	callq	"_ZNSt5dequeIdSaIdEEaSERKS1_.isra.0/1" # Offset: 1139
    00000478: 	movq	%rbp, (%rbx)
    0000047b: 	addq	$0x8, %rbx
    0000047f: 	cmpq	%rbx, %r12
    00000482: 	jne	.Ltmp4981 # Offset: 1154
.Ltmp5003:
    00000484: 	callq	clock@PLT # Offset: 1156
    00000489: 	movq	0x8(%rsp), %rbx
    0000048e: 	movq	%rax, start_time(%rip)
    00000495: 	cmpq	%rbx, 0x40(%rsp)
    0000049a: 	je	.Ltmp4982 # Offset: 1178
    000004a0: 	movq	0x20(%rsp), %rax
    000004a5: 	movq	0x50(%rsp), %rbx
    000004aa: 	leaq	0xb0(%rsp), %r12
    000004b2: 	leaq	0xd0(%rsp), %rbp
    000004ba: 	movq	%rax, 0x10(%rsp)
    000004bf: 	leal	-0x1(%r15), %eax
    000004c3: 	movl	%eax, 0x60(%rsp)
    000004c7: 	leaq	(%rbx,%rax,8), %rax
    000004cb: 	movq	%rax, 0x30(%rsp)
.Ltmp4990:
    000004d0: 	movq	0x10(%rsp), %rax
    000004d5: 	movq	0x40(%rsp), %rbx
    000004da: 	movq	(%rax), %r13
    000004dd: 	nopl	(%rax) # Size: 3
.Ltmp4989:
    000004e0: 	movq	0x48(%r13), %rax
    000004e4: 	movq	0x28(%r13), %r14
    000004e8: 	addq	$0x8, %rbx
    000004ec: 	movq	0x20(%r13), %r15
    000004f0: 	movq	0x10(%r13), %rdi
    000004f4: 	movq	%rax, %rdx
    000004f7: 	movq	0x18(%r13), %r11
    000004fb: 	subq	%r14, %rdx
    000004fe: 	sarq	$0x3, %rdx
    00000502: 	cmpq	$0x1, %rax
    00000506: 	movq	0x30(%r13), %rax
    0000050a: 	adcq	$-0x1, %rdx
    0000050e: 	subq	0x38(%r13), %rax
    00000512: 	sarq	$0x3, %rax
    00000516: 	shlq	$0x6, %rdx
    0000051a: 	addq	%rax, %rdx
    0000051d: 	movq	%r15, %rax
    00000520: 	subq	%rdi, %rax
    00000523: 	sarq	$0x3, %rax
    00000527: 	addq	%rax, %rdx
    0000052a: 	testq	%rdx, %rdx
    0000052d: 	jle	.Ltmp4983 # Offset: 1325
    0000052f: 	movsd	-0x8(%rbx), %xmm0
    00000534: 	jmp	.Ltmp4984 # Offset: 1332
    00000536: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4988:
    00000540: 	leaq	0x8(%rax), %rdi
    00000544: 	cmpq	%rdi, %r10
    00000547: 	je	.Ltmp4985 # Offset: 1351
.Ltmp5002:
    0000054d: 	subq	%rcx, %rdx
    00000550: 	movq	%r9, %r14
    00000553: 	movq	%r10, %r15
    00000556: 	movq	%r8, %r11
    00000559: 	subq	$0x1, %rdx
    0000055d: 	testq	%rdx, %rdx
    00000560: 	jle	.Ltmp4983 # Offset: 1376
.Ltmp4984:
    00000562: 	movq	%rdi, %rax
    00000565: 	movq	%rdx, %rcx
    00000568: 	subq	%r11, %rax
    0000056b: 	sarq	%rcx
    0000056e: 	sarq	$0x3, %rax
    00000572: 	addq	%rcx, %rax
    00000575: 	js	.Ltmp4986 # Offset: 1397
    0000057b: 	cmpq	$0x3f, %rax
    0000057f: 	jg	.Ltmp4987 # Offset: 1407
    00000585: 	leaq	(%rdi,%rcx,8), %rax
    00000589: 	movq	%r14, %r9
    0000058c: 	movq	%r15, %r10
    0000058f: 	movq	%r11, %r8
.Ltmp5000:
    00000592: 	comisd	(%rax), %xmm0
    00000596: 	ja	.Ltmp4988 # Offset: 1430
    00000598: 	movq	%rcx, %rdx
    0000059b: 	testq	%rdx, %rdx
    0000059e: 	jg	.Ltmp4984 # Offset: 1438
.Ltmp4983:
    000005a0: 	movq	%rdi, 0xd0(%rsp)
    000005a8: 	movq	(%r14), %rax
    000005ab: 	movq	%rbp, %rdx
    000005ae: 	movq	%r13, %rsi
    000005b1: 	movq	%r12, %rdi
    000005b4: 	movq	%r14, 0xe8(%rsp)
    000005bc: 	movq	%rax, 0xd8(%rsp)
    000005c4: 	addq	$0x200, %rax
    000005ca: 	movq	%rax, 0xe0(%rsp)
    000005d2: 	callq	_ZNSt5dequeIdSaIdEE8_M_eraseESt15_Deque_iteratorIdRdPdE # Offset: 1490
    000005d7: 	cmpq	%rbx, 0x8(%rsp)
    000005dc: 	jne	.Ltmp4989 # Offset: 1500
    000005e2: 	addq	$0x8, 0x10(%rsp)
    000005e8: 	movq	0x10(%rsp), %rax
    000005ed: 	cmpq	0x30(%rsp), %rax
    000005f2: 	jne	.Ltmp4990 # Offset: 1522
.Ltmp5004:
    000005f8: 	callq	clock@PLT # Offset: 1528
    000005fd: 	pxor	%xmm0, %xmm0
    00000601: 	movq	0x50(%rsp), %rdi
    00000606: 	movq	0x20(%rsp), %rbx
    0000060b: 	movq	%rax, end_time(%rip)
    00000612: 	subq	start_time(%rip), %rax
    00000619: 	cvtsi2sd	%rax, %xmm0
    0000061e: 	divsd	DATAat0x53788(%rip), %xmm0
    00000626: 	addsd	0x70(%rsp), %xmm0
    0000062c: 	movl	0x60(%rsp), %eax
    00000630: 	leaq	(%rdi,%rax,8), %r13
    00000634: 	movsd	%xmm0, 0x70(%rsp)
    0000063a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4995:
    00000640: 	movq	(%rbx), %r14
    00000643: 	testq	%r14, %r14
    00000646: 	je	.Ltmp4991 # Offset: 1606
    00000648: 	movq	(%r14), %rdi
    0000064b: 	testq	%rdi, %rdi
    0000064e: 	je	.Ltmp4992 # Offset: 1614
    00000650: 	movq	0x48(%r14), %rax
    00000654: 	movq	0x28(%r14), %rbp
    00000658: 	leaq	0x8(%rax), %r12
    0000065c: 	cmpq	%rbp, %r12
    0000065f: 	jbe	.Ltmp4993 # Offset: 1631
    00000661: 	nopl	(%rax) # Size: 7
.Ltmp4994:
    00000668: 	movq	(%rbp), %rdi
    0000066c: 	movl	$0x200, %esi
    00000671: 	addq	$0x8, %rbp
    00000675: 	callq	_ZdlPvm@PLT # Offset: 1653
    0000067a: 	cmpq	%rbp, %r12
    0000067d: 	ja	.Ltmp4994 # Offset: 1661
    0000067f: 	movq	(%r14), %rdi
.Ltmp4993:
    00000682: 	movq	0x8(%r14), %rax
    00000686: 	leaq	(,%rax,8), %rsi
    0000068e: 	callq	_ZdlPvm@PLT # Offset: 1678
.Ltmp4992:
    00000693: 	movl	$0x50, %esi
    00000698: 	movq	%r14, %rdi
    0000069b: 	callq	_ZdlPvm@PLT # Offset: 1691
.Ltmp4991:
    000006a0: 	movq	$0x0, (%rbx)
    000006a7: 	addq	$0x8, %rbx
    000006ab: 	cmpq	%r13, %rbx
    000006ae: 	jne	.Ltmp4995 # Offset: 1710
    000006b0: 	movl	0x48(%rsp), %ebx
    000006b4: 	movl	iterations(%rip), %eax
    000006ba: 	addl	%ebx, 0x78(%rsp)
    000006be: 	movl	0x78(%rsp), %ebx
    000006c2: 	cmpl	%ebx, %eax
    000006c4: 	jg	.Ltmp4996 # Offset: 1732
.Ltmp5007:
    000006ca: 	movq	0x88(%rsp), %rdi
    000006d2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1746
    000006d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000006e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000006ec: 	je	.Ltmp4997 # Offset: 1772
.Ltmp5006:
    000006f2: 	movq	-0x20(%rax), %rdi
    000006f6: 	movsd	0x70(%rsp), %xmm0
    000006fc: 	callq	_Z13record_resultdPKc # Offset: 1788
    00000701: 	cmpq	$0x0, 0x20(%rsp)
    00000707: 	je	.Ltmp4998 # Offset: 1799
    0000070d: 	movq	0xf8(%rsp), %rax
    00000715: 	subq	%fs:0x28, %rax
    0000071e: 	jne	.Ltmp4999 # Offset: 1822
    00000724: 	movq	0xa0(%rsp), %rsi
    0000072c: 	movq	0x20(%rsp), %rdi
    00000731: 	addq	$0x108, %rsp
    00000738: 	popq	%rbx
    00000739: 	popq	%rbp
    0000073a: 	subq	%rdi, %rsi
    0000073d: 	popq	%r12
    0000073f: 	popq	%r13
    00000741: 	popq	%r14
    00000743: 	popq	%r15
    00000745: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1861
    0000074a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4987:
    00000750: 	movq	%rax, %rsi
    00000753: 	sarq	$0x6, %rsi
.Ltmp5001:
    00000757: 	leaq	(%r14,%rsi,8), %r9
    0000075b: 	shlq	$0x6, %rsi
    0000075f: 	movq	(%r9), %r8
    00000762: 	subq	%rsi, %rax
    00000765: 	leaq	0x200(%r8), %r10
    0000076c: 	leaq	(%r8,%rax,8), %rax
    00000770: 	jmp	.Ltmp5000 # Offset: 1904
    00000775: 	nopl	(%rax) # Size: 3
.Ltmp4986:
    00000778: 	movq	%rax, %rsi
    0000077b: 	notq	%rsi
    0000077e: 	shrq	$0x6, %rsi
    00000782: 	notq	%rsi
    00000785: 	jmp	.Ltmp5001 # Offset: 1925
    00000787: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4985:
    00000790: 	movq	0x8(%r9), %rdi
    00000794: 	addq	$0x8, %r9
    00000798: 	leaq	0x200(%rdi), %r10
    0000079f: 	movq	%rdi, %r8
    000007a2: 	jmp	.Ltmp5002 # Offset: 1954
.Ltmp4980:
    000007a7: 	addq	$0x8, %rax
    000007ab: 	movq	%rax, 0x50(%rsp)
    000007b0: 	jmp	.Ltmp5003 # Offset: 1968
.Ltmp4982:
    000007b5: 	leal	-0x1(%r15), %eax
    000007b9: 	movl	%eax, 0x60(%rsp)
    000007bd: 	jmp	.Ltmp5004 # Offset: 1981
.Ltmp4963:
    000007c2: 	movq	$0x3e8, 0x48(%rsp)
.Ltmp4964:
    000007cb: 	movq	$0x0, 0xa0(%rsp)
    000007d7: 	pxor	%xmm0, %xmm0
    000007db: 	movaps	%xmm0, 0x90(%rsp)
    000007e3: 	jmp	.Ltmp5005 # Offset: 2019
.Ltmp4998:
    000007e8: 	movq	0xf8(%rsp), %rax
    000007f0: 	subq	%fs:0x28, %rax
    000007f9: 	jne	.Ltmp4999 # Offset: 2041
    000007fb: 	addq	$0x108, %rsp
    00000802: 	popq	%rbx
    00000803: 	popq	%rbp
    00000804: 	popq	%r12
    00000806: 	popq	%r13
    00000808: 	popq	%r14
    0000080a: 	popq	%r15
    0000080c: 	retq # Offset: 2060
.Ltmp4997:
    0000080d: 	movq	-0x8(%rdx), %rax
    00000811: 	addq	$0x200, %rax
    00000817: 	jmp	.Ltmp5006 # Offset: 2071
.Ltmp4965:
    0000081c: 	pxor	%xmm7, %xmm7
    00000820: 	movsd	%xmm7, 0x70(%rsp)
    00000826: 	jmp	.Ltmp5007 # Offset: 2086
.Ltmp4999:
    0000082b: 	callq	__stack_chk_fail@PLT # Offset: 2091
    00000830: 	endbr64
    00000834: 	movq	%rax, %rbp
    00000837: 	jmp	.Ltmp5008 # Offset: 2103
    00000839: 	endbr64
    0000083d: 	movq	%rax, %rbp
    00000840: 	jmp	.Ltmp5009 # Offset: 2112
.Ltmp5008:
    00000842: 	movl	$0x50, %esi
    00000847: 	movq	%r13, %rdi
    0000084a: 	callq	_ZdlPvm@PLT # Offset: 2122
.Ltmp5009:
    0000084f: 	movq	0x90(%rsp), %rdi
    00000857: 	movq	0xa0(%rsp), %rsi
    0000085f: 	subq	%rdi, %rsi
    00000862: 	testq	%rdi, %rdi
    00000865: 	je	.Ltmp5010 # Offset: 2149
.Ltmp5012:
    00000867: 	callq	_ZdlPvm@PLT # Offset: 2151
.Ltmp5010:
    0000086c: 	movq	%rbp, %rdi
    0000086f: 	callq	_Unwind_Resume@PLT # Offset: 2159
    00000874: 	endbr64
    00000878: 	movq	%rax, %rbp
    0000087b: 	jmp	.Ltmp5011 # Offset: 2171
    0000087d: 	endbr64
    00000881: 	movq	%rax, %rbx
    00000884: 	movq	%rbp, %rdi
    00000887: 	movl	$0x50, %esi
    0000088c: 	movq	%rbx, %rbp
    0000088f: 	callq	_ZdlPvm@PLT # Offset: 2191
.Ltmp5011:
    00000894: 	movq	0x90(%rsp), %rdi
    0000089c: 	movq	0xa0(%rsp), %rsi
    000008a4: 	subq	%rdi, %rsi
    000008a7: 	jmp	.Ltmp5012 # Offset: 2215
DWARF CFI Instructions:
    <empty>
End of Function "_Z26test_erase_pushback_sortedIdSt5dequeIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeIdSaIdEE8_M_eraseESt15_Deque_iteratorIdRdPdES5_" after disassembly {
  Number      : 300
  State       : disassembled
  Address     : 0x33860
  Size        : 0x4c1
  MaxSize     : 0x4d0
  Offset      : 0x33860
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeIdSaIdEE8_M_eraseESt15_Deque_iteratorIdRdPdES5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0299:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %rax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xd8, %rsp
    0000001b: 	movq	(%rcx), %r9
    0000001e: 	movq	%fs:0x28, %rdx
    00000027: 	movq	%rdx, 0xc8(%rsp)
    0000002f: 	movq	(%rax), %rdx
    00000032: 	cmpq	%r9, %rdx
    00000035: 	je	.Ltmp5013 # Offset: 53
    0000003b: 	movq	%rsi, %rbx
    0000003e: 	movdqu	0x10(%rsi), %xmm1
    00000043: 	movdqu	0x20(%rsi), %xmm0
    00000048: 	movq	0x30(%rbx), %rdi
    0000004c: 	movq	0x48(%rbx), %r15
    00000050: 	movhlps	%xmm0, %xmm6
    00000053: 	movq	%xmm1, %r11
    00000058: 	movq	%xmm0, %rsi
    0000005d: 	movq	%rdi, (%rsp)
    00000061: 	movq	%xmm6, %r14
    00000066: 	cmpq	%r11, %rdx
    00000069: 	je	.Ltmp5014 # Offset: 105
.Ltmp5027:
    0000006f: 	movq	0x18(%rcx), %r8
    00000073: 	movq	0x18(%rax), %rdi
    00000077: 	movq	%r9, %r10
    0000007a: 	movq	%r9, %xmm3
    0000007f: 	movq	0x10(%rax), %r12
    00000083: 	movq	%rdx, %xmm5
    00000088: 	movhps	0x8(%rcx), %xmm3
    0000008c: 	movq	%r8, %rbp
    0000008f: 	movq	%rdi, %xmm7
    00000094: 	subq	%rdi, %rbp
    00000097: 	movq	%r12, %xmm4
    0000009c: 	movq	%r12, 0x28(%rsp)
    000000a1: 	sarq	$0x3, %rbp
    000000a5: 	cmpq	$0x1, %r8
    000000a9: 	punpcklqdq	%xmm7, %xmm4
    000000ad: 	adcq	$-0x1, %rbp
    000000b1: 	subq	0x8(%rcx), %r10
    000000b5: 	subq	%r11, %rsi
    000000b8: 	sarq	$0x3, %r10
    000000bc: 	shlq	$0x6, %rbp
    000000c0: 	addq	%r10, %rbp
    000000c3: 	movq	%r12, %r10
    000000c6: 	sarq	$0x3, %rsi
    000000ca: 	subq	%rdx, %r10
    000000cd: 	sarq	$0x3, %r10
    000000d1: 	addq	%r10, %rbp
    000000d4: 	movq	(%rsp), %r10
    000000d8: 	movq	%rbp, 0x10(%rsp)
    000000dd: 	movq	0x8(%rax), %rbp
    000000e1: 	movq	%rdi, %rax
    000000e4: 	subq	%r14, %rax
    000000e7: 	movq	%r10, %xmm2
    000000ec: 	movq	%rax, %r12
    000000ef: 	movq	%rdx, %rax
    000000f2: 	movq	%rbp, %xmm6
    000000f7: 	movq	%rbp, 0x20(%rsp)
    000000fc: 	sarq	$0x3, %r12
    00000100: 	cmpq	$0x1, %rdi
    00000104: 	punpcklqdq	%xmm6, %xmm5
    00000108: 	adcq	$-0x1, %r12
    0000010c: 	subq	%rbp, %rax
    0000010f: 	movq	0x38(%rbx), %rbp
    00000113: 	sarq	$0x3, %rax
    00000117: 	shlq	$0x6, %r12
    0000011b: 	addq	%rax, %r12
    0000011e: 	movq	%r15, %rax
    00000121: 	movq	%rbp, %xmm7
    00000126: 	movq	%rbp, 0x30(%rsp)
    0000012b: 	subq	%r14, %rax
    0000012e: 	addq	%rsi, %r12
    00000131: 	punpcklqdq	%xmm7, %xmm2
    00000135: 	sarq	$0x3, %rax
    00000139: 	cmpq	$0x1, %r15
    0000013d: 	adcq	$-0x1, %rax
    00000141: 	subq	%rbp, %r10
    00000144: 	leaq	0xa0(%rsp), %rbp
    0000014c: 	shlq	$0x6, %rax
    00000150: 	sarq	$0x3, %r10
    00000154: 	addq	%r10, %rax
    00000157: 	addq	%rsi, %rax
    0000015a: 	subq	0x10(%rsp), %rax
    0000015f: 	shrq	%rax
    00000162: 	cmpq	%r12, %rax
    00000165: 	jb	.Ltmp5015 # Offset: 357
    0000016b: 	cmpq	%r11, %rdx
    0000016e: 	je	.Ltmp5016 # Offset: 366
    00000170: 	movq	0x10(%rcx), %xmm2
    00000175: 	movq	%r8, %xmm6
    0000017a: 	movq	0x20(%rsp), %rax
    0000017f: 	movq	%rdx, 0x60(%rsp)
    00000184: 	movq	0x28(%rsp), %r10
    00000189: 	movq	%rdi, 0x78(%rsp)
    0000018e: 	leaq	0x60(%rsp), %rdx
    00000193: 	movq	%rbp, %rdi
    00000196: 	punpcklqdq	%xmm6, %xmm2
    0000019a: 	leaq	0x40(%rsp), %rsi
    0000019f: 	movaps	%xmm1, 0x40(%rsp)
    000001a4: 	leaq	0x80(%rsp), %rcx
    000001ac: 	movaps	%xmm0, 0x50(%rsp)
    000001b1: 	movq	%rax, 0x68(%rsp)
    000001b6: 	movq	%r10, 0x70(%rsp)
    000001bb: 	movaps	%xmm3, 0x80(%rsp)
    000001c3: 	movaps	%xmm2, 0x90(%rsp)
    000001cb: 	callq	_ZSt13move_backwardISt15_Deque_iteratorIdRdPdES3_ET0_T_S5_S4_ # Offset: 459
    000001d0: 	movdqu	0x20(%rbx), %xmm0
    000001d5: 	movdqu	0x10(%rbx), %xmm1
    000001da: 	movhlps	%xmm0, %xmm6
    000001dd: 	movq	%xmm6, %r14
.Ltmp5016:
    000001e2: 	movq	0x10(%rsp), %rsi
    000001e7: 	movq	%rbp, %rdi
    000001ea: 	movaps	%xmm1, 0xa0(%rsp)
    000001f2: 	movaps	%xmm0, 0xb0(%rsp)
    000001fa: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 506
    000001ff: 	movq	0xb8(%rsp), %rbp
    00000207: 	cmpq	%r14, %rbp
    0000020a: 	jbe	.Ltmp5017 # Offset: 522
    0000020c: 	nopl	(%rax) # Size: 4
.Ltmp5018:
    00000210: 	movq	(%r14), %rdi
    00000213: 	movl	$0x200, %esi
    00000218: 	addq	$0x8, %r14
    0000021c: 	callq	_ZdlPvm@PLT # Offset: 540
    00000221: 	cmpq	%r14, %rbp
    00000224: 	ja	.Ltmp5018 # Offset: 548
.Ltmp5017:
    00000226: 	movdqa	0xa0(%rsp), %xmm6
    0000022f: 	movups	%xmm6, 0x10(%rbx)
    00000233: 	movdqa	0xb0(%rsp), %xmm6
    0000023c: 	movups	%xmm6, 0x20(%rbx)
    00000240: 	jmp	.Ltmp5019 # Offset: 576
    00000245: 	nopl	(%rax) # Size: 3
.Ltmp5015:
    00000248: 	cmpq	(%rsp), %r9
    0000024c: 	je	.Ltmp5020 # Offset: 588
    00000252: 	cmpq	%r15, %r8
    00000255: 	movq	%r8, 0x38(%rsp)
    0000025a: 	movq	0x10(%rcx), %r10
    0000025e: 	je	.Ltmp5021 # Offset: 606
    00000264: 	movq	0x20(%rsp), %rax
    00000269: 	leaq	0x80(%rsp), %r14
    00000271: 	movq	%r9, %rsi
    00000274: 	movq	%rdx, 0x80(%rsp)
    0000027c: 	movq	%rdi, 0x98(%rsp)
    00000284: 	movq	%r14, %rcx
    00000287: 	movq	%r10, %rdx
    0000028a: 	movq	%rbp, %rdi
    0000028d: 	movq	%rax, 0x88(%rsp)
    00000295: 	movq	0x28(%rsp), %rax
    0000029a: 	movq	%rax, 0x90(%rsp)
    000002a2: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 674
    000002a7: 	movq	0x38(%rsp), %r8
    000002ac: 	movdqa	0xa0(%rsp), %xmm1
    000002b5: 	movdqa	0xb0(%rsp), %xmm0
    000002be: 	addq	$0x8, %r8
    000002c2: 	cmpq	%r15, %r8
    000002c5: 	je	.Ltmp5022 # Offset: 709
    000002c7: 	movq	%rbx, 0x20(%rsp)
    000002cc: 	movq	%r8, %rbx
    000002cf: 	nop # Size: 1
.Ltmp5023:
    000002d0: 	movaps	%xmm1, 0x80(%rsp)
    000002d8: 	movq	%r14, %rcx
    000002db: 	movq	%rbp, %rdi
    000002de: 	addq	$0x8, %rbx
    000002e2: 	movaps	%xmm0, 0x90(%rsp)
    000002ea: 	movq	-0x8(%rbx), %rsi
    000002ee: 	leaq	0x200(%rsi), %rdx
    000002f5: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 757
    000002fa: 	movdqa	0xa0(%rsp), %xmm1
    00000303: 	movdqa	0xb0(%rsp), %xmm0
    0000030c: 	cmpq	%r15, %rbx
    0000030f: 	jne	.Ltmp5023 # Offset: 783
    00000311: 	movq	0x20(%rsp), %rbx
.Ltmp5022:
    00000316: 	movq	(%rsp), %rdx
    0000031a: 	movq	0x30(%rsp), %rsi
    0000031f: 	movq	%rbp, %rcx
    00000322: 	movq	%r14, %rdi
    00000325: 	movaps	%xmm1, 0xa0(%rsp)
    0000032d: 	movaps	%xmm0, 0xb0(%rsp)
    00000335: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 821
.Ltmp5031:
    0000033a: 	movdqu	0x30(%rbx), %xmm2
    0000033f: 	movq	0x48(%rbx), %r15
.Ltmp5020:
    00000343: 	movq	0x40(%rbx), %xmm0
    00000348: 	movq	0x10(%rsp), %rsi
    0000034d: 	movq	%r15, %xmm7
    00000352: 	movq	%rbp, %rdi
    00000355: 	movaps	%xmm2, 0xa0(%rsp)
    0000035d: 	addq	$0x8, %r15
    00000361: 	punpcklqdq	%xmm7, %xmm0
    00000365: 	negq	%rsi
    00000368: 	movaps	%xmm0, 0xb0(%rsp)
    00000370: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 880
    00000375: 	movq	0xb8(%rsp), %rax
    0000037d: 	leaq	0x8(%rax), %rbp
    00000381: 	cmpq	%rbp, %r15
    00000384: 	jbe	.Ltmp5024 # Offset: 900
    00000386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5025:
    00000390: 	movq	(%rbp), %rdi
    00000394: 	movl	$0x200, %esi
    00000399: 	addq	$0x8, %rbp
    0000039d: 	callq	_ZdlPvm@PLT # Offset: 925
    000003a2: 	cmpq	%rbp, %r15
    000003a5: 	ja	.Ltmp5025 # Offset: 933
.Ltmp5024:
    000003a7: 	movdqa	0xa0(%rsp), %xmm6
    000003b0: 	movdqa	0xb0(%rsp), %xmm7
    000003b9: 	movups	%xmm6, 0x30(%rbx)
    000003bd: 	movups	%xmm7, 0x40(%rbx)
.Ltmp5019:
    000003c1: 	movdqu	0x10(%rbx), %xmm0
    000003c6: 	movdqu	0x20(%rbx), %xmm7
    000003cb: 	movq	%r12, %rsi
    000003ce: 	movq	%r13, %rdi
    000003d1: 	movups	%xmm7, 0x10(%r13)
    000003d6: 	movups	%xmm0, (%r13)
    000003db: 	callq	"_ZNSt15_Deque_iteratorIdRdPdEpLEl.isra.0/1" # Offset: 987
.Ltmp5030:
    000003e0: 	movq	0xc8(%rsp), %rax
    000003e8: 	subq	%fs:0x28, %rax
    000003f1: 	jne	.Ltmp5026 # Offset: 1009
    000003f7: 	addq	$0xd8, %rsp
    000003fe: 	movq	%r13, %rax
    00000401: 	popq	%rbx
    00000402: 	popq	%rbp
    00000403: 	popq	%r12
    00000405: 	popq	%r13
    00000407: 	popq	%r14
    00000409: 	popq	%r15
    0000040b: 	retq # Offset: 1035
    0000040c: 	nopl	(%rax) # Size: 4
.Ltmp5014:
    00000410: 	cmpq	%rdi, %r9
    00000413: 	jne	.Ltmp5027 # Offset: 1043
    00000419: 	addq	$0x8, %r15
    0000041d: 	addq	$0x8, %r14
    00000421: 	cmpq	%r14, %r15
    00000424: 	jbe	.Ltmp5028 # Offset: 1060
    00000426: 	movaps	%xmm0, (%rsp)
    0000042a: 	movaps	%xmm1, 0x10(%rsp)
    0000042f: 	nop # Size: 1
.Ltmp5029:
    00000430: 	movq	(%r14), %rdi
    00000433: 	movl	$0x200, %esi
    00000438: 	addq	$0x8, %r14
    0000043c: 	callq	_ZdlPvm@PLT # Offset: 1084
    00000441: 	cmpq	%r14, %r15
    00000444: 	ja	.Ltmp5029 # Offset: 1092
    00000446: 	movdqa	(%rsp), %xmm0
    0000044b: 	movdqa	0x10(%rsp), %xmm1
.Ltmp5028:
    00000451: 	movups	%xmm1, 0x30(%rbx)
    00000455: 	movups	%xmm0, 0x40(%rbx)
    00000459: 	movups	%xmm1, (%r13)
    0000045e: 	movups	%xmm0, 0x10(%r13)
    00000463: 	jmp	.Ltmp5030 # Offset: 1123
    00000468: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5013:
    00000470: 	movq	0x10(%rax), %xmm0
    00000475: 	movq	%rdx, %xmm1
    0000047a: 	movhps	0x8(%rax), %xmm1
    0000047e: 	movhps	0x18(%rax), %xmm0
    00000482: 	movups	%xmm1, (%rdi)
    00000485: 	movups	%xmm0, 0x10(%rdi)
    00000489: 	jmp	.Ltmp5030 # Offset: 1161
    0000048e: 	nop # Size: 2
.Ltmp5021:
    00000490: 	movq	(%rsp), %rdx
    00000494: 	leaq	0x80(%rsp), %rdi
    0000049c: 	movq	%rbp, %rcx
    0000049f: 	movq	%r9, %rsi
    000004a2: 	movaps	%xmm5, 0xa0(%rsp)
    000004aa: 	movaps	%xmm4, 0xb0(%rsp)
    000004b2: 	callq	_ZSt14__copy_move_a1ILb1EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_ # Offset: 1202
    000004b7: 	jmp	.Ltmp5031 # Offset: 1207
.Ltmp5026:
    000004bc: 	callq	__stack_chk_fail@PLT # Offset: 1212
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeIdSaIdEE8_M_eraseESt15_Deque_iteratorIdRdPdES5_"

Binary Function "_Z22test_eraseall_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 301
  State       : disassembled
  Address     : 0x33d30
  Size        : 0x437
  MaxSize     : 0x440
  Offset      : 0x33d30
  Section     : .text
  Orc Section : .local.text._Z22test_eraseall_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0300:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0xd8, %rsp
    0000001e: 	movq	%rdx, 0x38(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, (%rsp)
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0xc8(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	movabsq	$0x500000000, %rax
    00000046: 	divq	%rcx
    00000049: 	movq	%rax, 0x8(%rsp)
    0000004e: 	cmpq	$0x3e8, %rax
    00000054: 	ja	.Ltmp5032 # Offset: 84
    0000005a: 	cmpq	$0x3, %rax
    0000005e: 	ja	.Ltmp5033 # Offset: 94
    00000064: 	movq	$0x0, 0x50(%rsp)
    0000006d: 	pxor	%xmm0, %xmm0
    00000071: 	movq	$0x4, 0x8(%rsp)
    0000007a: 	movaps	%xmm0, 0x40(%rsp)
.Ltmp5049:
    0000007f: 	movq	0x8(%rsp), %rbx
    00000084: 	leaq	0x40(%rsp), %rdi
    00000089: 	movq	%rbx, %rsi
    0000008c: 	callq	_ZNSt6vectorIPSt5dequeIdSaIdEESaIS3_EE17_M_default_appendEm # Offset: 140
    00000091: 	movq	0x40(%rsp), %rdi
    00000096: 	movl	iterations(%rip), %eax
    0000009c: 	movq	%rdi, 0x10(%rsp)
    000000a1: 	testl	%eax, %eax
    000000a3: 	jle	.Ltmp5034 # Offset: 163
    000000a9: 	addq	$0x8, %rdi
    000000ad: 	movl	%ebx, 0x2c(%rsp)
    000000b1: 	pxor	%xmm3, %xmm3
    000000b5: 	movl	$0x0, 0x28(%rsp)
    000000bd: 	movq	%rdi, 0x30(%rsp)
    000000c2: 	movsd	%xmm3, 0x18(%rsp)
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5045:
    000000d0: 	movslq	0x28(%rsp), %rdx
    000000d5: 	movslq	%eax, %rcx
    000000d8: 	movq	0x10(%rsp), %r14
    000000dd: 	movq	%rdx, %rdi
    000000e0: 	addq	0x8(%rsp), %rdx
    000000e5: 	movq	%r14, %r13
    000000e8: 	subl	%edi, %eax
    000000ea: 	cmpq	%rcx, %rdx
    000000ed: 	cmovbl	0x2c(%rsp), %eax
    000000f2: 	movq	0x30(%rsp), %rdi
    000000f7: 	subl	$0x1, %eax
    000000fa: 	leaq	(%rdi,%rax,8), %r15
    000000fe: 	nop # Size: 2
.Ltmp5038:
    00000100: 	movl	$0x50, %edi
    00000105: 	callq	_Znwm@PLT # Offset: 261
    0000010a: 	movq	$0x0, (%rax)
    00000111: 	pxor	%xmm1, %xmm1
    00000115: 	movq	%rax, %rdi
    00000118: 	movq	%rax, %rbp
    0000011b: 	movq	$0x0, 0x8(%rax)
    00000123: 	movups	%xmm1, 0x10(%rax)
    00000127: 	movups	%xmm1, 0x20(%rax)
    0000012b: 	movups	%xmm1, 0x30(%rax)
    0000012f: 	movups	%xmm1, 0x40(%rax)
    00000133: 	callq	"_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEm.constprop.0/1" # Offset: 307
    00000138: 	movq	(%rsp), %rax
    0000013c: 	movq	%rax, %rbx
    0000013f: 	cmpq	%rax, %r12
    00000142: 	jne	.Ltmp5035 # Offset: 322
    00000144: 	jmp	.Ltmp5036 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5037:
    00000150: 	movsd	-0x8(%rbx), %xmm0
    00000155: 	addq	$0x8, %rax
    00000159: 	movsd	%xmm0, -0x8(%rax)
    0000015e: 	movq	%rax, 0x30(%rbp)
    00000162: 	cmpq	%rbx, %r12
    00000165: 	je	.Ltmp5036 # Offset: 357
.Ltmp5035:
    00000167: 	movq	0x40(%rbp), %rcx
    0000016b: 	movq	0x30(%rbp), %rax
    0000016f: 	movq	%rbx, %rsi
    00000172: 	addq	$0x8, %rbx
    00000176: 	leaq	-0x8(%rcx), %rdx
    0000017a: 	cmpq	%rdx, %rax
    0000017d: 	jne	.Ltmp5037 # Offset: 381
    0000017f: 	movq	%rbp, %rdi
    00000182: 	callq	_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_ # Offset: 386
    00000187: 	cmpq	%rbx, %r12
    0000018a: 	jne	.Ltmp5035 # Offset: 394
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp5036:
    00000190: 	movq	%rbp, (%r14)
    00000193: 	addq	$0x8, %r14
    00000197: 	cmpq	%r15, %r14
    0000019a: 	jne	.Ltmp5038 # Offset: 410
    000001a0: 	callq	clock@PLT # Offset: 416
    000001a5: 	movq	0x10(%rsp), %rbx
    000001aa: 	movq	%r12, 0x20(%rsp)
    000001af: 	leaq	0x60(%rsp), %r14
    000001b4: 	movq	%rax, start_time(%rip)
    000001bb: 	leaq	0xa0(%rsp), %rax
    000001c3: 	leaq	0x80(%rsp), %rbp
    000001cb: 	movq	%rbx, %r12
    000001ce: 	movq	%rax, %rbx
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp5039:
    000001d8: 	movq	(%r12), %rsi
    000001dc: 	addq	$0x8, %r12
    000001e0: 	movq	0x48(%rsi), %rcx
    000001e4: 	movq	0x30(%rsi), %rax
    000001e8: 	movq	0x10(%rsi), %rdi
    000001ec: 	movq	0x28(%rsi), %rdx
    000001f0: 	movq	%rax, 0x80(%rsp)
    000001f8: 	movq	(%rcx), %rax
    000001fb: 	movq	%rdi, 0xa0(%rsp)
    00000203: 	movq	%r14, %rdi
    00000206: 	movq	%rax, 0x88(%rsp)
    0000020e: 	addq	$0x200, %rax
    00000214: 	movq	%rax, 0x90(%rsp)
    0000021c: 	movq	(%rdx), %rax
    0000021f: 	movq	%rcx, 0x98(%rsp)
    00000227: 	movq	%rbp, %rcx
    0000022a: 	movq	%rax, 0xa8(%rsp)
    00000232: 	addq	$0x200, %rax
    00000238: 	movq	%rdx, 0xb8(%rsp)
    00000240: 	movq	%rbx, %rdx
    00000243: 	movq	%rax, 0xb0(%rsp)
    0000024b: 	callq	_ZNSt5dequeIdSaIdEE8_M_eraseESt15_Deque_iteratorIdRdPdES5_ # Offset: 587
    00000250: 	cmpq	%r12, %r15
    00000253: 	jne	.Ltmp5039 # Offset: 595
    00000255: 	movq	0x20(%rsp), %r12
    0000025a: 	callq	clock@PLT # Offset: 602
    0000025f: 	pxor	%xmm0, %xmm0
    00000263: 	movq	%rax, end_time(%rip)
    0000026a: 	subq	start_time(%rip), %rax
    00000271: 	cvtsi2sd	%rax, %xmm0
    00000276: 	divsd	DATAat0x53788(%rip), %xmm0
    0000027e: 	addsd	0x18(%rsp), %xmm0
    00000284: 	movsd	%xmm0, 0x18(%rsp)
    0000028a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5044:
    00000290: 	movq	(%r13), %r14
    00000294: 	testq	%r14, %r14
    00000297: 	je	.Ltmp5040 # Offset: 663
    00000299: 	movq	(%r14), %rdi
    0000029c: 	testq	%rdi, %rdi
    0000029f: 	je	.Ltmp5041 # Offset: 671
    000002a1: 	movq	0x48(%r14), %rax
    000002a5: 	movq	0x28(%r14), %rbx
    000002a9: 	leaq	0x8(%rax), %rbp
    000002ad: 	cmpq	%rbx, %rbp
    000002b0: 	jbe	.Ltmp5042 # Offset: 688
    000002b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5043:
    000002b8: 	movq	(%rbx), %rdi
    000002bb: 	movl	$0x200, %esi
    000002c0: 	addq	$0x8, %rbx
    000002c4: 	callq	_ZdlPvm@PLT # Offset: 708
    000002c9: 	cmpq	%rbx, %rbp
    000002cc: 	ja	.Ltmp5043 # Offset: 716
    000002ce: 	movq	(%r14), %rdi
.Ltmp5042:
    000002d1: 	movq	0x8(%r14), %rax
    000002d5: 	leaq	(,%rax,8), %rsi
    000002dd: 	callq	_ZdlPvm@PLT # Offset: 733
.Ltmp5041:
    000002e2: 	movl	$0x50, %esi
    000002e7: 	movq	%r14, %rdi
    000002ea: 	callq	_ZdlPvm@PLT # Offset: 746
.Ltmp5040:
    000002ef: 	movq	$0x0, (%r13)
    000002f7: 	addq	$0x8, %r13
    000002fb: 	cmpq	%r15, %r13
    000002fe: 	jne	.Ltmp5044 # Offset: 766
    00000300: 	movl	0x8(%rsp), %edi
    00000304: 	movl	iterations(%rip), %eax
    0000030a: 	addl	%edi, 0x28(%rsp)
    0000030e: 	movl	0x28(%rsp), %edi
    00000312: 	cmpl	%edi, %eax
    00000314: 	jg	.Ltmp5045 # Offset: 788
.Ltmp5051:
    0000031a: 	movq	0x38(%rsp), %rdi
    0000031f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 799
    00000324: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000332: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000339: 	je	.Ltmp5046 # Offset: 825
.Ltmp5050:
    0000033f: 	movq	-0x20(%rax), %rdi
    00000343: 	movsd	0x18(%rsp), %xmm0
    00000349: 	callq	_Z13record_resultdPKc # Offset: 841
    0000034e: 	cmpq	$0x0, 0x10(%rsp)
    00000354: 	je	.Ltmp5047 # Offset: 852
    00000356: 	movq	0xc8(%rsp), %rax
    0000035e: 	subq	%fs:0x28, %rax
    00000367: 	jne	.Ltmp5048 # Offset: 871
    0000036d: 	movq	0x50(%rsp), %rsi
    00000372: 	movq	0x10(%rsp), %rdi
    00000377: 	addq	$0xd8, %rsp
    0000037e: 	popq	%rbx
    0000037f: 	popq	%rbp
    00000380: 	subq	%rdi, %rsi
    00000383: 	popq	%r12
    00000385: 	popq	%r13
    00000387: 	popq	%r14
    00000389: 	popq	%r15
    0000038b: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 907
.Ltmp5047:
    00000390: 	movq	0xc8(%rsp), %rax
    00000398: 	subq	%fs:0x28, %rax
    000003a1: 	jne	.Ltmp5048 # Offset: 929
    000003a3: 	addq	$0xd8, %rsp
    000003aa: 	popq	%rbx
    000003ab: 	popq	%rbp
    000003ac: 	popq	%r12
    000003ae: 	popq	%r13
    000003b0: 	popq	%r14
    000003b2: 	popq	%r15
    000003b4: 	retq # Offset: 948
.Ltmp5032:
    000003b5: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp5033:
    000003be: 	movq	$0x0, 0x50(%rsp)
    000003c7: 	pxor	%xmm0, %xmm0
    000003cb: 	movaps	%xmm0, 0x40(%rsp)
    000003d0: 	jmp	.Ltmp5049 # Offset: 976
.Ltmp5046:
    000003d5: 	movq	-0x8(%rdx), %rax
    000003d9: 	addq	$0x200, %rax
    000003df: 	jmp	.Ltmp5050 # Offset: 991
.Ltmp5034:
    000003e4: 	pxor	%xmm4, %xmm4
    000003e8: 	movsd	%xmm4, 0x18(%rsp)
    000003ee: 	jmp	.Ltmp5051 # Offset: 1006
.Ltmp5048:
    000003f3: 	callq	__stack_chk_fail@PLT # Offset: 1011
    000003f8: 	endbr64
    000003fc: 	movq	%rax, %rbp
    000003ff: 	jmp	.Ltmp5052 # Offset: 1023
    00000401: 	endbr64
    00000405: 	movq	%rax, %rbx
    00000408: 	movq	%rbp, %rdi
    0000040b: 	movl	$0x50, %esi
    00000410: 	movq	%rbx, %rbp
    00000413: 	callq	_ZdlPvm@PLT # Offset: 1043
.Ltmp5052:
    00000418: 	movq	0x40(%rsp), %rdi
    0000041d: 	movq	0x50(%rsp), %rsi
    00000422: 	subq	%rdi, %rsi
    00000425: 	testq	%rdi, %rdi
    00000428: 	je	.Ltmp5053 # Offset: 1064
    0000042a: 	callq	_ZdlPvm@PLT # Offset: 1066
.Ltmp5053:
    0000042f: 	movq	%rbp, %rdi
    00000432: 	callq	_Unwind_Resume@PLT # Offset: 1074
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_eraseall_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb" after disassembly {
  Number      : 302
  State       : disassembled
  Address     : 0x34170
  Size        : 0x1a5
  MaxSize     : 0x1b0
  Offset      : 0x34170
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeImSaImEE17_M_reallocate_mapEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0301:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	0x48(%rdi), %rax
    0000001f: 	movq	0x28(%rdi), %rsi
    00000023: 	movq	0x8(%rdi), %rbx
    00000027: 	movq	%rax, %rbp
    0000002a: 	subq	%rsi, %rbp
    0000002d: 	movq	%rbp, %rdx
    00000030: 	sarq	$0x3, %rdx
    00000034: 	leaq	0x1(%r14,%rdx), %rdx
    00000039: 	leaq	(%rdx,%rdx), %rcx
    0000003d: 	cmpq	%rcx, %rbx
    00000040: 	jbe	.Ltmp5054 # Offset: 64
    00000042: 	subq	%rdx, %rbx
    00000045: 	shrq	%rbx
    00000048: 	shlq	$0x3, %rbx
    0000004c: 	testb	%r15b, %r15b
    0000004f: 	leaq	(%rbx,%r14,8), %rdx
    00000053: 	cmovneq	%rdx, %rbx
    00000057: 	addq	$0x8, %rax
    0000005b: 	addq	(%rdi), %rbx
    0000005e: 	movq	%rax, %rdx
    00000061: 	subq	%rsi, %rdx
    00000064: 	cmpq	%rbx, %rsi
    00000067: 	jbe	.Ltmp5055 # Offset: 103
    0000006d: 	cmpq	%rax, %rsi
    00000070: 	je	.Ltmp5056 # Offset: 112
    00000076: 	movq	%rbx, %rdi
    00000079: 	callq	memmove@PLT # Offset: 121
    0000007e: 	jmp	.Ltmp5056 # Offset: 126
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5054:
    00000088: 	cmpq	%r14, %rbx
    0000008b: 	movq	%r14, %rax
    0000008e: 	cmovaeq	%rbx, %rax
    00000092: 	leaq	0x2(%rbx,%rax), %r13
    00000097: 	movq	%r13, %rax
    0000009a: 	shrq	$0x3c, %rax
    0000009e: 	jne	.Ltmp5057 # Offset: 158
    000000a4: 	leaq	(,%r13,8), %rdi
    000000ac: 	movq	%rdx, 0x8(%rsp)
    000000b1: 	movq	%r13, %rbx
    000000b4: 	callq	_Znwm@PLT # Offset: 180
    000000b9: 	movq	0x8(%rsp), %rdx
    000000be: 	movq	0x28(%r12), %rsi
    000000c3: 	movq	%rax, %rcx
    000000c6: 	movq	%rax, (%rsp)
    000000ca: 	subq	%rdx, %rbx
    000000cd: 	shrq	%rbx
    000000d0: 	shlq	$0x3, %rbx
    000000d4: 	testb	%r15b, %r15b
    000000d7: 	leaq	(%rbx,%r14,8), %rax
    000000db: 	cmovneq	%rax, %rbx
    000000df: 	movq	0x48(%r12), %rax
    000000e4: 	leaq	0x8(%rax), %rdx
    000000e8: 	addq	%rcx, %rbx
    000000eb: 	cmpq	%rsi, %rdx
    000000ee: 	je	.Ltmp5058 # Offset: 238
    000000f0: 	subq	%rsi, %rdx
    000000f3: 	movq	%rbx, %rdi
    000000f6: 	callq	memmove@PLT # Offset: 246
.Ltmp5058:
    000000fb: 	movq	0x8(%r12), %rax
    00000100: 	movq	(%r12), %rdi
    00000104: 	leaq	(,%rax,8), %rsi
    0000010c: 	callq	_ZdlPvm@PLT # Offset: 268
    00000111: 	movq	(%rsp), %rax
    00000115: 	movq	%r13, 0x8(%r12)
    0000011a: 	movq	%rax, (%r12)
.Ltmp5056:
    0000011e: 	movq	(%rbx), %rax
    00000121: 	movq	(%rbx), %xmm0
    00000125: 	movq	%rbx, 0x28(%r12)
    0000012a: 	addq	%rbp, %rbx
    0000012d: 	movq	%rbx, 0x48(%r12)
    00000132: 	addq	$0x200, %rax
    00000138: 	movq	%rax, %xmm1
    0000013d: 	punpcklqdq	%xmm1, %xmm0
    00000141: 	movups	%xmm0, 0x18(%r12)
    00000147: 	movq	(%rbx), %rax
    0000014a: 	leaq	0x200(%rax), %rdx
    00000151: 	movq	%rax, %xmm0
    00000156: 	movq	%rdx, %xmm2
    0000015b: 	punpcklqdq	%xmm2, %xmm0
    0000015f: 	movups	%xmm0, 0x38(%r12)
    00000165: 	addq	$0x18, %rsp
    00000169: 	popq	%rbx
    0000016a: 	popq	%rbp
    0000016b: 	popq	%r12
    0000016d: 	popq	%r13
    0000016f: 	popq	%r14
    00000171: 	popq	%r15
    00000173: 	retq # Offset: 371
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp5055:
    00000178: 	cmpq	%rax, %rsi
    0000017b: 	je	.Ltmp5056 # Offset: 379
    0000017d: 	leaq	0x8(%rbp), %rdi
    00000181: 	subq	%rdx, %rdi
    00000184: 	addq	%rbx, %rdi
    00000187: 	callq	memmove@PLT # Offset: 391
    0000018c: 	jmp	.Ltmp5056 # Offset: 396
    0000018e: 	nop # Size: 2
.Ltmp5057:
    00000190: 	shrq	$0x3d, %r13
    00000194: 	je	.Ltmp5059 # Offset: 404
    00000196: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 406
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5059:
    000001a0: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 416
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb"

Binary Function "_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_" after disassembly {
  Number      : 303
  State       : disassembled
  Address     : 0x34320
  Size        : 0xe6
  MaxSize     : 0xf0
  Offset      : 0x34320
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0302:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pushq	%rbp
    00000007: 	pushq	%rbx
    00000008: 	movq	0x48(%rdi), %r12
    0000000c: 	movq	0x30(%rdi), %rdx
    00000010: 	movq	%r12, %rax
    00000013: 	subq	0x28(%rdi), %rax
    00000017: 	sarq	$0x3, %rax
    0000001b: 	cmpq	$0x1, %r12
    0000001f: 	adcq	$-0x1, %rax
    00000023: 	subq	0x38(%rdi), %rdx
    00000027: 	sarq	$0x3, %rdx
    0000002b: 	shlq	$0x6, %rax
    0000002f: 	addq	%rdx, %rax
    00000032: 	movq	0x20(%rdi), %rdx
    00000036: 	subq	0x10(%rdi), %rdx
    0000003a: 	sarq	$0x3, %rdx
    0000003e: 	addq	%rdx, %rax
    00000041: 	movabsq	$0xfffffffffffffff, %rdx
    0000004b: 	cmpq	%rdx, %rax
    0000004e: 	je	.Ltmp5060 # Offset: 78
    00000054: 	movq	0x8(%rdi), %rax
    00000058: 	movq	%r12, %rdx
    0000005b: 	subq	(%rdi), %rdx
    0000005e: 	movq	%rdi, %rbx
    00000061: 	sarq	$0x3, %rdx
    00000065: 	movq	%rsi, %rbp
    00000068: 	subq	%rdx, %rax
    0000006b: 	cmpq	$0x1, %rax
    0000006f: 	jbe	.Ltmp5061 # Offset: 111
.Ltmp5062:
    00000071: 	movl	$0x200, %edi
    00000076: 	callq	_Znwm@PLT # Offset: 118
    0000007b: 	movq	(%rbp), %rdx
    0000007f: 	movq	%rax, 0x8(%r12)
    00000084: 	movq	0x30(%rbx), %rax
    00000088: 	movq	%rdx, (%rax)
    0000008b: 	movq	0x48(%rbx), %rdx
    0000008f: 	movq	0x8(%rdx), %rax
    00000093: 	addq	$0x8, %rdx
    00000097: 	movq	%rdx, %xmm1
    0000009c: 	movq	%rax, %xmm0
    000000a1: 	addq	$0x200, %rax
    000000a7: 	punpcklqdq	%xmm0, %xmm0
    000000ab: 	movups	%xmm0, 0x30(%rbx)
    000000af: 	movq	%rax, %xmm0
    000000b4: 	punpcklqdq	%xmm1, %xmm0
    000000b8: 	movups	%xmm0, 0x40(%rbx)
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	popq	%r12
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp5061:
    000000c8: 	xorl	%edx, %edx
    000000ca: 	movl	$0x1, %esi
    000000cf: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 207
    000000d4: 	movq	0x48(%rbx), %r12
    000000d8: 	jmp	.Ltmp5062 # Offset: 216
.Ltmp5060:
    000000da: 	leaq	DATAat0x52330(%rip), %rdi
    000000e1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 225
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_"

Binary Function "_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_" after disassembly {
  Number      : 304
  State       : disassembled
  Address     : 0x34410
  Size        : 0xe6
  MaxSize     : 0xf0
  Offset      : 0x34410
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0303:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pushq	%rbp
    00000007: 	pushq	%rbx
    00000008: 	movq	0x48(%rdi), %r12
    0000000c: 	movq	0x30(%rdi), %rdx
    00000010: 	movq	%r12, %rax
    00000013: 	subq	0x28(%rdi), %rax
    00000017: 	sarq	$0x3, %rax
    0000001b: 	cmpq	$0x1, %r12
    0000001f: 	adcq	$-0x1, %rax
    00000023: 	subq	0x38(%rdi), %rdx
    00000027: 	sarq	$0x3, %rdx
    0000002b: 	shlq	$0x6, %rax
    0000002f: 	addq	%rdx, %rax
    00000032: 	movq	0x20(%rdi), %rdx
    00000036: 	subq	0x10(%rdi), %rdx
    0000003a: 	sarq	$0x3, %rdx
    0000003e: 	addq	%rdx, %rax
    00000041: 	movabsq	$0xfffffffffffffff, %rdx
    0000004b: 	cmpq	%rdx, %rax
    0000004e: 	je	.Ltmp5063 # Offset: 78
    00000054: 	movq	0x8(%rdi), %rax
    00000058: 	movq	%r12, %rdx
    0000005b: 	subq	(%rdi), %rdx
    0000005e: 	movq	%rdi, %rbx
    00000061: 	sarq	$0x3, %rdx
    00000065: 	movq	%rsi, %rbp
    00000068: 	subq	%rdx, %rax
    0000006b: 	cmpq	$0x1, %rax
    0000006f: 	jbe	.Ltmp5064 # Offset: 111
.Ltmp5065:
    00000071: 	movl	$0x200, %edi
    00000076: 	callq	_Znwm@PLT # Offset: 118
    0000007b: 	movq	(%rbp), %rdx
    0000007f: 	movq	%rax, 0x8(%r12)
    00000084: 	movq	0x30(%rbx), %rax
    00000088: 	movq	%rdx, (%rax)
    0000008b: 	movq	0x48(%rbx), %rdx
    0000008f: 	movq	0x8(%rdx), %rax
    00000093: 	addq	$0x8, %rdx
    00000097: 	movq	%rdx, %xmm1
    0000009c: 	movq	%rax, %xmm0
    000000a1: 	addq	$0x200, %rax
    000000a7: 	punpcklqdq	%xmm0, %xmm0
    000000ab: 	movups	%xmm0, 0x30(%rbx)
    000000af: 	movq	%rax, %xmm0
    000000b4: 	punpcklqdq	%xmm1, %xmm0
    000000b8: 	movups	%xmm0, 0x40(%rbx)
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	popq	%r12
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp5064:
    000000c8: 	xorl	%edx, %edx
    000000ca: 	movl	$0x1, %esi
    000000cf: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 207
    000000d4: 	movq	0x48(%rbx), %r12
    000000d8: 	jmp	.Ltmp5065 # Offset: 216
.Ltmp5063:
    000000da: 	leaq	DATAat0x52330(%rip), %rdi
    000000e1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 225
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_"

Binary Function "_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE23_M_new_elements_at_backEm" after disassembly {
  Number      : 305
  State       : disassembled
  Address     : 0x34500
  Size        : 0x28d
  MaxSize     : 0x290
  Offset      : 0x34500
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE23_M_new_elements_at_backEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0304:
    00000000: 	endbr64
    00000004: 	movabsq	$-0x5555555555555555, %r9
    0000000e: 	pushq	%r15
    00000010: 	movq	%rsi, %rax
    00000013: 	pushq	%r14
    00000015: 	pushq	%r13
    00000017: 	pushq	%r12
    00000019: 	pushq	%rbp
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	pushq	%rbx
    0000001e: 	subq	$0x18, %rsp
    00000022: 	movq	0x48(%rdi), %rcx
    00000026: 	movq	0x28(%rdi), %rsi
    0000002a: 	movq	0x30(%rbp), %rdx
    0000002e: 	subq	0x38(%rbp), %rdx
    00000032: 	movq	%rcx, %rbx
    00000035: 	sarq	$0x3, %rdx
    00000039: 	subq	%rsi, %rbx
    0000003c: 	imulq	%r9, %rdx
    00000040: 	movq	%rbx, %rdi
    00000043: 	sarq	$0x3, %rdi
    00000047: 	cmpq	$0x1, %rcx
    0000004b: 	movq	%rdi, %r8
    0000004e: 	adcq	$-0x1, %r8
    00000052: 	leaq	(%r8,%r8,4), %r10
    00000056: 	leaq	(%r8,%r10,4), %r8
    0000005a: 	addq	%r8, %rdx
    0000005d: 	movq	0x20(%rbp), %r8
    00000061: 	subq	0x10(%rbp), %r8
    00000065: 	sarq	$0x3, %r8
    00000069: 	imulq	%r9, %r8
    0000006d: 	addq	%r8, %rdx
    00000070: 	movabsq	$0x555555555555555, %r8
    0000007a: 	subq	%rdx, %r8
    0000007d: 	cmpq	%rax, %r8
    00000080: 	jb	.Ltmp5066 # Offset: 128
    00000086: 	leaq	0x14(%rax), %r13
    0000008a: 	movq	(%rbp), %r10
    0000008e: 	movabsq	$-0x79e79e79e79e79e7, %rdx
    00000098: 	movq	%r13, %rax
    0000009b: 	mulq	%rdx
    0000009e: 	movq	%r13, %rax
    000000a1: 	subq	%rdx, %rax
    000000a4: 	shrq	%rax
    000000a7: 	leaq	(%rdx,%rax), %r12
    000000ab: 	movq	0x8(%rbp), %rdx
    000000af: 	movq	%rcx, %rax
    000000b2: 	subq	%r10, %rax
    000000b5: 	shrq	$0x4, %r12
    000000b9: 	sarq	$0x3, %rax
    000000bd: 	movq	%rdx, %r8
    000000c0: 	leaq	0x1(%r12), %r9
    000000c5: 	subq	%rax, %r8
    000000c8: 	cmpq	%r8, %r9
    000000cb: 	ja	.Ltmp5067 # Offset: 203
.Ltmp5074:
    000000cd: 	movl	$0x1, %ebx
    000000d2: 	cmpq	$0x14, %r13
    000000d6: 	ja	.Ltmp5068 # Offset: 214
    000000d8: 	jmp	.Ltmp5069 # Offset: 216
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5070:
    000000e0: 	movq	0x48(%rbp), %rcx
.Ltmp5068:
    000000e4: 	movl	$0x1f8, %edi
    000000e9: 	leaq	(%rcx,%rbx,8), %r13
    000000ed: 	callq	_Znwm@PLT # Offset: 237
    000000f2: 	addq	$0x1, %rbx
    000000f6: 	movq	%rax, (%r13)
    000000fa: 	cmpq	%rbx, %r12
    000000fd: 	jae	.Ltmp5070 # Offset: 253
.Ltmp5069:
    000000ff: 	addq	$0x18, %rsp
    00000103: 	popq	%rbx
    00000104: 	popq	%rbp
    00000105: 	popq	%r12
    00000107: 	popq	%r13
    00000109: 	popq	%r14
    0000010b: 	popq	%r15
    0000010d: 	retq # Offset: 269
    0000010e: 	nop # Size: 2
.Ltmp5067:
    00000110: 	leaq	0x1(%r12,%rdi), %r15
    00000115: 	leaq	(%r15,%r15), %rax
    00000119: 	cmpq	%rax, %rdx
    0000011c: 	ja	.Ltmp5071 # Offset: 284
    00000122: 	cmpq	%rdx, %r12
    00000125: 	movq	%rdx, %rax
    00000128: 	cmovaeq	%r12, %rax
    0000012c: 	leaq	0x2(%rdx,%rax), %r14
    00000131: 	movq	%r14, %rax
    00000134: 	shrq	$0x3c, %rax
    00000138: 	jne	.Ltmp5072 # Offset: 312
    0000013e: 	leaq	(,%r14,8), %rdi
    00000146: 	callq	_Znwm@PLT # Offset: 326
    0000014b: 	movq	%rax, %rsi
    0000014e: 	movq	%rax, 0x8(%rsp)
    00000153: 	movq	%r14, %rax
    00000156: 	subq	%r15, %rax
    00000159: 	shrq	%rax
    0000015c: 	leaq	(%rsi,%rax,8), %r15
    00000160: 	movq	0x48(%rbp), %rax
    00000164: 	movq	0x28(%rbp), %rsi
    00000168: 	leaq	0x8(%rax), %rdx
    0000016c: 	cmpq	%rsi, %rdx
    0000016f: 	je	.Ltmp5073 # Offset: 367
    00000171: 	subq	%rsi, %rdx
    00000174: 	movq	%r15, %rdi
    00000177: 	callq	memmove@PLT # Offset: 375
.Ltmp5073:
    0000017c: 	movq	0x8(%rbp), %rax
    00000180: 	movq	(%rbp), %rdi
    00000184: 	leaq	(,%rax,8), %rsi
    0000018c: 	callq	_ZdlPvm@PLT # Offset: 396
    00000191: 	movq	0x8(%rsp), %rax
    00000196: 	movq	%r14, 0x8(%rbp)
    0000019a: 	movq	%rax, (%rbp)
.Ltmp5076:
    0000019e: 	movq	(%r15), %rax
    000001a1: 	movq	(%r15), %xmm0
    000001a6: 	leaq	(%r15,%rbx), %rcx
    000001aa: 	movq	%r15, 0x28(%rbp)
    000001ae: 	movq	%rcx, 0x48(%rbp)
    000001b2: 	addq	$0x1f8, %rax
    000001b8: 	movq	%rax, %xmm1
    000001bd: 	punpcklqdq	%xmm1, %xmm0
    000001c1: 	movups	%xmm0, 0x18(%rbp)
    000001c5: 	movq	(%rcx), %rax
    000001c8: 	movq	(%rcx), %xmm0
    000001cc: 	addq	$0x1f8, %rax
    000001d2: 	movq	%rax, %xmm2
    000001d7: 	punpcklqdq	%xmm2, %xmm0
    000001db: 	movups	%xmm0, 0x38(%rbp)
    000001df: 	jmp	.Ltmp5074 # Offset: 479
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp5071:
    000001e8: 	subq	%r15, %rdx
    000001eb: 	addq	$0x8, %rcx
    000001ef: 	shrq	%rdx
    000001f2: 	leaq	(%r10,%rdx,8), %r15
    000001f6: 	movq	%rcx, %rdx
    000001f9: 	subq	%rsi, %rdx
    000001fc: 	cmpq	%r15, %rsi
    000001ff: 	jbe	.Ltmp5075 # Offset: 511
    00000201: 	cmpq	%rcx, %rsi
    00000204: 	je	.Ltmp5076 # Offset: 516
    00000206: 	movq	%r15, %rdi
    00000209: 	callq	memmove@PLT # Offset: 521
    0000020e: 	jmp	.Ltmp5076 # Offset: 526
.Ltmp5075:
    00000210: 	cmpq	%rcx, %rsi
    00000213: 	je	.Ltmp5076 # Offset: 531
    00000215: 	leaq	0x8(%rbx), %rdi
    00000219: 	subq	%rdx, %rdi
    0000021c: 	addq	%r15, %rdi
    0000021f: 	callq	memmove@PLT # Offset: 543
    00000224: 	jmp	.Ltmp5076 # Offset: 548
.Ltmp5072:
    00000229: 	shrq	$0x3d, %r14
    0000022d: 	je	.Ltmp5077 # Offset: 557
    0000022f: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 559
.Ltmp5077:
    00000234: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 564
.Ltmp5066:
    00000239: 	leaq	DATAat0x52370(%rip), %rdi
    00000240: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 576
    00000245: 	endbr64
    00000249: 	movq	%rax, %rdi
    0000024c: 	callq	__cxa_begin_catch@PLT # Offset: 588
    00000251: 	movl	$0x1, %r12d
.Ltmp5079:
    00000257: 	cmpq	%rbx, %r12
    0000025a: 	je	.Ltmp5078 # Offset: 602
    0000025c: 	movq	0x48(%rbp), %rax
    00000260: 	movl	$0x1f8, %esi
    00000265: 	movq	(%rax,%r12,8), %rdi
    00000269: 	addq	$0x1, %r12
    0000026d: 	callq	_ZdlPvm@PLT # Offset: 621
    00000272: 	jmp	.Ltmp5079 # Offset: 626
.Ltmp5078:
    00000274: 	callq	__cxa_rethrow@PLT # Offset: 628
    00000279: 	endbr64
    0000027d: 	movq	%rax, %rbp
    00000280: 	callq	__cxa_end_catch@PLT # Offset: 640
    00000285: 	movq	%rbp, %rdi
    00000288: 	callq	_Unwind_Resume@PLT # Offset: 648
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE23_M_new_elements_at_backEm"

Binary Function "_Z20test_delete_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 306
  State       : disassembled
  Address     : 0x34790
  Size        : 0x8bc
  MaxSize     : 0x8c0
  Offset      : 0x34790
  Section     : .text
  Orc Section : .local.text._Z20test_delete_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0305:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movq	%rsi, (%rsp)
    00000019: 	subq	%rdi, %rsi
    0000001c: 	movq	%rdx, 0x50(%rsp)
    00000021: 	xorl	%edx, %edx
    00000023: 	movq	%rdi, 0x18(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0xa8(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	movabsq	$0x500000000, %rax
    00000045: 	divq	%rsi
    00000048: 	movq	%rax, 0x8(%rsp)
    0000004d: 	cmpq	$0x3e8, %rax
    00000053: 	ja	.Ltmp5080 # Offset: 83
    00000059: 	cmpq	$0x3, %rax
    0000005d: 	ja	.Ltmp5081 # Offset: 93
    00000063: 	movq	$0x0, 0xa0(%rsp)
    0000006f: 	pxor	%xmm0, %xmm0
    00000073: 	movq	$0x4, 0x8(%rsp)
    0000007c: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5117:
    00000084: 	movq	0x8(%rsp), %rbx
    00000089: 	leaq	0x90(%rsp), %rdi
    00000091: 	movq	%rbx, %rsi
    00000094: 	callq	_ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 148
    00000099: 	movq	0x90(%rsp), %rdi
    000000a1: 	movl	iterations(%rip), %eax
    000000a7: 	movq	%rdi, 0x38(%rsp)
    000000ac: 	testl	%eax, %eax
    000000ae: 	jle	.Ltmp5082 # Offset: 174
    000000b4: 	leaq	0x8(%rdi), %rsi
    000000b8: 	movl	%ebx, 0x44(%rsp)
    000000bc: 	pxor	%xmm4, %xmm4
    000000c0: 	leaq	0x88(%rsp), %r14
    000000c8: 	movl	$0x0, 0x40(%rsp)
    000000d0: 	movq	%rsi, 0x58(%rsp)
    000000d5: 	movsd	%xmm4, 0x20(%rsp)
.Ltmp5100:
    000000db: 	movslq	0x40(%rsp), %rdx
    000000e0: 	movslq	%eax, %rcx
    000000e3: 	movq	0x58(%rsp), %rdi
    000000e8: 	movq	%rdx, %rsi
    000000eb: 	addq	0x8(%rsp), %rdx
    000000f0: 	subl	%esi, %eax
    000000f2: 	cmpq	%rcx, %rdx
    000000f5: 	cmovbl	0x44(%rsp), %eax
    000000fa: 	movq	0x38(%rsp), %rsi
    000000ff: 	subl	$0x1, %eax
    00000102: 	movq	%rsi, 0x48(%rsp)
    00000107: 	leaq	(%rdi,%rax,8), %rax
    0000010b: 	movq	%rsi, 0x10(%rsp)
    00000110: 	movq	%rax, 0x30(%rsp)
.Ltmp5091:
    00000115: 	movl	$0xb8, %edi
    0000011a: 	callq	_Znwm@PLT # Offset: 282
    0000011f: 	movq	$0x0, (%rax)
    00000126: 	pxor	%xmm0, %xmm0
    0000012a: 	xorl	%esi, %esi
    0000012c: 	movq	%rax, %rdi
    0000012f: 	movq	$0x0, 0x8(%rax)
    00000137: 	movq	%rax, %rbp
    0000013a: 	movups	%xmm0, 0x10(%rax)
    0000013e: 	movups	%xmm0, 0x20(%rax)
    00000142: 	movups	%xmm0, 0x30(%rax)
    00000146: 	movups	%xmm0, 0x40(%rax)
    0000014a: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 330
    0000014f: 	movq	$0x0, 0x50(%rbp)
    00000157: 	pxor	%xmm0, %xmm0
    0000015b: 	movl	$0x40, %edi
    00000160: 	movq	$0x8, 0x58(%rbp)
    00000168: 	movups	%xmm0, 0x60(%rbp)
    0000016c: 	movups	%xmm0, 0x70(%rbp)
    00000170: 	movups	%xmm0, 0x80(%rbp)
    00000177: 	movups	%xmm0, 0x90(%rbp)
    0000017e: 	callq	_Znwm@PLT # Offset: 382
    00000183: 	movq	0x58(%rbp), %rdx
    00000187: 	movq	%rax, 0x50(%rbp)
    0000018b: 	movl	$0x1f8, %edi
    00000190: 	leaq	-0x4(,%rdx,4), %rdx
    00000198: 	andq	$-0x8, %rdx
    0000019c: 	leaq	(%rax,%rdx), %r13
    000001a0: 	callq	_Znwm@PLT # Offset: 416
    000001a5: 	movq	%rax, %rsi
    000001a8: 	movq	%rax, %xmm1
    000001ad: 	movq	%rax, (%r13)
    000001b1: 	leaq	0x1f8(%rax), %rax
    000001b8: 	movq	%rax, %xmm0
    000001bd: 	movq	%r13, %xmm4
    000001c2: 	movq	%rsi, %r8
    000001c5: 	movl	$0x0, 0xa0(%rbp)
    000001cf: 	leaq	0x50(%rbp), %rax
    000001d3: 	punpcklqdq	%xmm4, %xmm0
    000001d7: 	punpcklqdq	%xmm1, %xmm1
    000001db: 	movq	%rax, 0x28(%rsp)
    000001e0: 	movq	0x18(%rsp), %rax
    000001e5: 	movups	%xmm0, 0x70(%rbp)
    000001e9: 	movups	%xmm0, 0x90(%rbp)
    000001f0: 	pxor	%xmm0, %xmm0
    000001f4: 	movq	%rax, %r15
    000001f7: 	movups	%xmm1, 0x60(%rbp)
    000001fb: 	movups	%xmm1, 0x80(%rbp)
    00000202: 	movups	%xmm0, 0xa8(%rbp)
    00000209: 	cmpq	%rax, (%rsp)
    0000020d: 	je	.Ltmp5083 # Offset: 525
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5090:
    00000218: 	movq	0x48(%rbp), %r9
    0000021c: 	movq	0x30(%rbp), %rcx
    00000220: 	addq	$0x8, %r15
    00000224: 	movq	0x38(%rbp), %rdi
    00000228: 	movq	%r9, %rax
    0000022b: 	subq	0x28(%rbp), %rax
    0000022f: 	movq	%rcx, %rdx
    00000232: 	sarq	$0x3, %rax
    00000236: 	cmpq	$0x1, %r9
    0000023a: 	adcq	$-0x1, %rax
    0000023e: 	subq	%rdi, %rdx
    00000241: 	sarq	$0x3, %rdx
    00000245: 	shlq	$0x6, %rax
    00000249: 	addq	%rdx, %rax
    0000024c: 	movq	0x20(%rbp), %rdx
    00000250: 	subq	0x10(%rbp), %rdx
    00000254: 	sarq	$0x3, %rdx
    00000258: 	addq	%rdx, %rax
    0000025b: 	je	.Ltmp5084 # Offset: 603
.Ltmp5116:
    00000261: 	cmpq	%rcx, %rdi
    00000264: 	je	.Ltmp5085 # Offset: 612
.Ltmp5110:
    0000026a: 	movq	-0x8(%rcx), %rbx
    0000026e: 	subq	$0x8, %rcx
    00000272: 	movq	%rcx, 0x30(%rbp)
.Ltmp5111:
    00000276: 	movq	0x60(%rbp), %rsi
    0000027a: 	movq	0x68(%rbp), %r8
    0000027e: 	movabsq	$-0x5555555555555555, %rax
    00000288: 	movq	0x78(%rbp), %r13
    0000028c: 	movq	%rsi, %rcx
    0000028f: 	subq	%r8, %rcx
    00000292: 	sarq	$0x3, %rcx
    00000296: 	imulq	%rax, %rcx
    0000029a: 	addq	%rbx, %rcx
    0000029d: 	js	.Ltmp5086 # Offset: 669
    000002a3: 	cmpq	$0x14, %rcx
    000002a7: 	jg	.Ltmp5087 # Offset: 679
    000002ad: 	leaq	(%rbx,%rbx,2), %rax
    000002b1: 	leaq	(%rsi,%rax,8), %rax
    000002b5: 	movq	%rbx, 0x10(%rax)
.Ltmp5104:
    000002b9: 	movsd	-0x8(%r15), %xmm0
    000002bf: 	movq	0xb0(%rbp), %rdx
    000002c6: 	movq	$0x0, 0x8(%rax)
    000002ce: 	movsd	%xmm0, (%rax)
    000002d2: 	testq	%rdx, %rdx
    000002d5: 	je	.Ltmp5088 # Offset: 725
    000002d7: 	movq	%rax, 0x8(%rdx)
.Ltmp5088:
    000002db: 	cmpq	$0x0, 0xa8(%rbp)
    000002e3: 	movq	%rax, 0xb0(%rbp)
    000002ea: 	je	.Ltmp5089 # Offset: 746
    000002f0: 	addl	$0x1, 0xa0(%rbp)
    000002f7: 	cmpq	%r15, (%rsp)
    000002fb: 	jne	.Ltmp5090 # Offset: 763
.Ltmp5083:
    00000301: 	movq	0x10(%rsp), %rax
    00000306: 	movq	%rbp, (%rax)
    00000309: 	addq	$0x8, %rax
    0000030d: 	movq	%rax, 0x10(%rsp)
    00000312: 	cmpq	%rax, 0x30(%rsp)
    00000317: 	jne	.Ltmp5091 # Offset: 791
    0000031d: 	callq	clock@PLT # Offset: 797
    00000322: 	movq	0x30(%rsp), %r13
    00000327: 	movq	0x48(%rsp), %r12
    0000032c: 	movq	%rax, start_time(%rip)
.Ltmp5099:
    00000333: 	movq	(%r12), %rbp
    00000337: 	testq	%rbp, %rbp
    0000033a: 	je	.Ltmp5092 # Offset: 826
    00000340: 	movq	0x50(%rbp), %rdi
    00000344: 	testq	%rdi, %rdi
    00000347: 	je	.Ltmp5093 # Offset: 839
    00000349: 	movq	0x98(%rbp), %rax
    00000350: 	movq	0x78(%rbp), %rbx
    00000354: 	leaq	0x8(%rax), %r15
    00000358: 	cmpq	%rbx, %r15
    0000035b: 	jbe	.Ltmp5094 # Offset: 859
    0000035d: 	nopl	(%rax) # Size: 3
.Ltmp5095:
    00000360: 	movq	(%rbx), %rdi
    00000363: 	movl	$0x1f8, %esi
    00000368: 	addq	$0x8, %rbx
    0000036c: 	callq	_ZdlPvm@PLT # Offset: 876
    00000371: 	cmpq	%rbx, %r15
    00000374: 	ja	.Ltmp5095 # Offset: 884
    00000376: 	movq	0x50(%rbp), %rdi
.Ltmp5094:
    0000037a: 	movq	0x58(%rbp), %rax
    0000037e: 	leaq	(,%rax,8), %rsi
    00000386: 	callq	_ZdlPvm@PLT # Offset: 902
.Ltmp5093:
    0000038b: 	movq	(%rbp), %rdi
    0000038f: 	testq	%rdi, %rdi
    00000392: 	je	.Ltmp5096 # Offset: 914
    00000394: 	movq	0x48(%rbp), %rax
    00000398: 	movq	0x28(%rbp), %rbx
    0000039c: 	leaq	0x8(%rax), %r15
    000003a0: 	cmpq	%rbx, %r15
    000003a3: 	jbe	.Ltmp5097 # Offset: 931
    000003a5: 	nopl	(%rax) # Size: 3
.Ltmp5098:
    000003a8: 	movq	(%rbx), %rdi
    000003ab: 	movl	$0x200, %esi
    000003b0: 	addq	$0x8, %rbx
    000003b4: 	callq	_ZdlPvm@PLT # Offset: 948
    000003b9: 	cmpq	%rbx, %r15
    000003bc: 	ja	.Ltmp5098 # Offset: 956
    000003be: 	movq	(%rbp), %rdi
.Ltmp5097:
    000003c2: 	movq	0x8(%rbp), %rax
    000003c6: 	leaq	(,%rax,8), %rsi
    000003ce: 	callq	_ZdlPvm@PLT # Offset: 974
.Ltmp5096:
    000003d3: 	movl	$0xb8, %esi
    000003d8: 	movq	%rbp, %rdi
    000003db: 	callq	_ZdlPvm@PLT # Offset: 987
.Ltmp5092:
    000003e0: 	movq	$0x0, (%r12)
    000003e8: 	addq	$0x8, %r12
    000003ec: 	cmpq	%r12, %r13
    000003ef: 	jne	.Ltmp5099 # Offset: 1007
    000003f5: 	callq	clock@PLT # Offset: 1013
    000003fa: 	pxor	%xmm0, %xmm0
    000003fe: 	movl	0x8(%rsp), %esi
    00000402: 	addl	%esi, 0x40(%rsp)
    00000406: 	movq	%rax, end_time(%rip)
    0000040d: 	subq	start_time(%rip), %rax
    00000414: 	cvtsi2sd	%rax, %xmm0
    00000419: 	movl	0x40(%rsp), %esi
    0000041d: 	divsd	DATAat0x53788(%rip), %xmm0
    00000425: 	addsd	0x20(%rsp), %xmm0
    0000042b: 	movl	iterations(%rip), %eax
    00000431: 	movsd	%xmm0, 0x20(%rsp)
    00000437: 	cmpl	%esi, %eax
    00000439: 	jg	.Ltmp5100 # Offset: 1081
.Ltmp5121:
    0000043f: 	movq	0x50(%rsp), %rdi
    00000444: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1092
    00000449: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000450: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000457: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000045e: 	je	.Ltmp5101 # Offset: 1118
.Ltmp5120:
    00000464: 	movq	-0x20(%rax), %rdi
    00000468: 	movsd	0x20(%rsp), %xmm0
    0000046e: 	callq	_Z13record_resultdPKc # Offset: 1134
    00000473: 	cmpq	$0x0, 0x38(%rsp)
    00000479: 	je	.Ltmp5102 # Offset: 1145
    0000047f: 	movq	0xa8(%rsp), %rax
    00000487: 	subq	%fs:0x28, %rax
    00000490: 	jne	.Ltmp5103 # Offset: 1168
    00000496: 	movq	0xa0(%rsp), %rsi
    0000049e: 	movq	0x38(%rsp), %rdi
    000004a3: 	addq	$0xb8, %rsp
    000004aa: 	popq	%rbx
    000004ab: 	popq	%rbp
    000004ac: 	subq	%rdi, %rsi
    000004af: 	popq	%r12
    000004b1: 	popq	%r13
    000004b3: 	popq	%r14
    000004b5: 	popq	%r15
    000004b7: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1207
    000004bc: 	nopl	(%rax) # Size: 4
.Ltmp5087:
    000004c0: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    000004ca: 	movq	%rcx, %rax
    000004cd: 	imulq	%rdx
    000004d0: 	leaq	(%rdx,%rcx), %rax
    000004d4: 	movq	%rcx, %rdx
    000004d7: 	sarq	$0x4, %rax
    000004db: 	sarq	$0x3f, %rdx
    000004df: 	subq	%rdx, %rax
.Ltmp5112:
    000004e2: 	leaq	(%rax,%rax,4), %rdx
    000004e6: 	leaq	(%rax,%rdx,4), %rdx
    000004ea: 	movq	(%r13,%rax,8), %rax
    000004ef: 	subq	%rdx, %rcx
    000004f2: 	leaq	(%rcx,%rcx,2), %rdx
    000004f6: 	leaq	(%rax,%rdx,8), %rax
    000004fa: 	movq	%rbx, 0x10(%rax)
    000004fe: 	jmp	.Ltmp5104 # Offset: 1278
.Ltmp5084:
    00000503: 	movq	0x98(%rbp), %r10
    0000050a: 	movq	0x80(%rbp), %r12
    00000511: 	movabsq	$-0x5555555555555555, %rbx
    0000051b: 	movq	0x70(%rbp), %rax
    0000051f: 	movq	%r10, %rdx
    00000522: 	subq	%r13, %rdx
    00000525: 	sarq	$0x3, %rdx
    00000529: 	cmpq	$0x1, %r10
    0000052d: 	adcq	$-0x1, %rdx
    00000531: 	subq	0x88(%rbp), %r12
    00000538: 	sarq	$0x3, %r12
    0000053c: 	leaq	(%rdx,%rdx,4), %r11
    00000540: 	imulq	%rbx, %r12
    00000544: 	leaq	(%rdx,%r11,4), %rdx
    00000548: 	addq	%rdx, %r12
    0000054b: 	movq	%rax, %rdx
    0000054e: 	subq	%rsi, %rdx
    00000551: 	sarq	$0x3, %rdx
    00000555: 	imulq	%rbx, %rdx
    00000559: 	addq	%rdx, %r12
    0000055c: 	leaq	0xaa(%r12), %rbx
    00000564: 	cmpq	%rbx, %r12
    00000567: 	jb	.Ltmp5105 # Offset: 1383
    0000056d: 	movabsq	$-0x5555555555555555, %rdx
    00000577: 	movq	%rsi, %r11
    0000057a: 	subq	%r8, %r11
    0000057d: 	sarq	$0x3, %r11
    00000581: 	imulq	%rdx, %r11
    00000585: 	addq	%rbx, %r11
    00000588: 	js	.Ltmp5106 # Offset: 1416
    0000058e: 	cmpq	$0x14, %r11
    00000592: 	jle	.Ltmp5107 # Offset: 1426
    00000598: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    000005a2: 	movq	%r11, %rax
    000005a5: 	imulq	%rdx
    000005a8: 	movq	%r11, %rax
    000005ab: 	sarq	$0x3f, %rax
    000005af: 	addq	%r11, %rdx
    000005b2: 	sarq	$0x4, %rdx
    000005b6: 	subq	%rax, %rdx
.Ltmp5119:
    000005b9: 	leaq	(%rdx,%rdx,4), %rsi
    000005bd: 	leaq	(%r13,%rdx,8), %r13
    000005c2: 	leaq	(%rdx,%rsi,4), %rdx
    000005c6: 	movq	(%r13), %r8
    000005ca: 	subq	%rdx, %r11
    000005cd: 	leaq	(%r11,%r11,2), %rdx
    000005d1: 	leaq	0x1f8(%r8), %rax
    000005d8: 	leaq	(%r8,%rdx,8), %rdx
.Ltmp5118:
    000005dc: 	movq	%rdx, %xmm5
    000005e1: 	movq	%r8, %xmm7
    000005e6: 	movq	%rax, %xmm6
    000005eb: 	punpcklqdq	%xmm7, %xmm5
    000005ef: 	leaq	0x8(%r10), %rbx
    000005f3: 	movaps	%xmm5, 0x60(%rsp)
    000005f8: 	movq	%r13, %xmm5
    000005fd: 	addq	$0x8, %r13
    00000601: 	punpcklqdq	%xmm5, %xmm6
    00000605: 	movaps	%xmm6, 0x70(%rsp)
    0000060a: 	cmpq	%r13, %rbx
    0000060d: 	jbe	.Ltmp5108 # Offset: 1549
    0000060f: 	nop # Size: 1
.Ltmp5109:
    00000610: 	movq	(%r13), %rdi
    00000614: 	movl	$0x1f8, %esi
    00000619: 	addq	$0x8, %r13
    0000061d: 	callq	_ZdlPvm@PLT # Offset: 1565
    00000622: 	cmpq	%r13, %rbx
    00000625: 	ja	.Ltmp5109 # Offset: 1573
    00000627: 	movq	0x30(%rbp), %rcx
    0000062b: 	movq	0x38(%rbp), %rdi
    0000062f: 	movq	0x48(%rbp), %r9
.Ltmp5108:
    00000633: 	movdqa	0x60(%rsp), %xmm6
    00000639: 	movdqa	0x70(%rsp), %xmm7
    0000063f: 	movups	%xmm6, 0x80(%rbp)
    00000646: 	movups	%xmm7, 0x90(%rbp)
    0000064d: 	cmpq	%rcx, %rdi
    00000650: 	jne	.Ltmp5110 # Offset: 1616
.Ltmp5085:
    00000656: 	movq	-0x8(%r9), %rax
    0000065a: 	movl	$0x200, %esi
    0000065f: 	movq	0x1f8(%rax), %rbx
    00000666: 	callq	_ZdlPvm@PLT # Offset: 1638
    0000066b: 	movq	0x48(%rbp), %rdx
    0000066f: 	movq	-0x8(%rdx), %rax
    00000673: 	subq	$0x8, %rdx
    00000677: 	movq	%rdx, %xmm3
    0000067c: 	leaq	0x1f8(%rax), %rsi
    00000683: 	movq	%rax, %xmm2
    00000688: 	addq	$0x200, %rax
    0000068e: 	movq	%rsi, %xmm0
    00000693: 	punpcklqdq	%xmm2, %xmm0
    00000697: 	movups	%xmm0, 0x30(%rbp)
    0000069b: 	movq	%rax, %xmm0
    000006a0: 	punpcklqdq	%xmm3, %xmm0
    000006a4: 	movups	%xmm0, 0x40(%rbp)
    000006a8: 	jmp	.Ltmp5111 # Offset: 1704
.Ltmp5089:
    000006ad: 	addl	$0x1, 0xa0(%rbp)
    000006b4: 	movq	%rax, 0xa8(%rbp)
    000006bb: 	cmpq	%r15, (%rsp)
    000006bf: 	jne	.Ltmp5090 # Offset: 1727
    000006c5: 	jmp	.Ltmp5083 # Offset: 1733
    000006ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5086:
    000006d0: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000006da: 	movq	%rcx, %rdi
    000006dd: 	notq	%rdi
    000006e0: 	mulq	%rdi
    000006e3: 	subq	%rdx, %rdi
    000006e6: 	shrq	%rdi
    000006e9: 	leaq	(%rdx,%rdi), %rax
    000006ed: 	shrq	$0x4, %rax
    000006f1: 	notq	%rax
    000006f4: 	jmp	.Ltmp5112 # Offset: 1780
.Ltmp5105:
    000006f9: 	movq	0x28(%rsp), %rdi
    000006fe: 	movl	$0xaa, %esi
    00000703: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1795
    00000708: 	movq	0x30(%rbp), %rcx
    0000070c: 	jmp	.Ltmp5113 # Offset: 1804
    0000070e: 	nop # Size: 2
.Ltmp5115:
    00000710: 	movq	%rbx, (%rcx)
    00000713: 	addq	$0x8, %rcx
    00000717: 	movq	%rcx, 0x30(%rbp)
    0000071b: 	cmpq	%rbx, %r12
    0000071e: 	je	.Ltmp5114 # Offset: 1822
.Ltmp5113:
    00000720: 	movq	0x40(%rbp), %rax
    00000724: 	subq	$0x1, %rbx
    00000728: 	movq	%rbx, 0x88(%rsp)
    00000730: 	subq	$0x8, %rax
    00000734: 	cmpq	%rax, %rcx
    00000737: 	jne	.Ltmp5115 # Offset: 1847
    00000739: 	movq	%r14, %rsi
    0000073c: 	movq	%rbp, %rdi
    0000073f: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 1855
    00000744: 	movq	0x30(%rbp), %rcx
    00000748: 	cmpq	%rbx, %r12
    0000074b: 	jne	.Ltmp5113 # Offset: 1867
.Ltmp5114:
    0000074d: 	movq	0x38(%rbp), %rdi
    00000751: 	movq	0x48(%rbp), %r9
    00000755: 	jmp	.Ltmp5116 # Offset: 1877
.Ltmp5080:
    0000075a: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp5081:
    00000763: 	movq	$0x0, 0xa0(%rsp)
    0000076f: 	pxor	%xmm0, %xmm0
    00000773: 	movaps	%xmm0, 0x90(%rsp)
    0000077b: 	jmp	.Ltmp5117 # Offset: 1915
.Ltmp5107:
    00000780: 	leaq	(%rbx,%rbx,2), %rdx
    00000784: 	leaq	(%rsi,%rdx,8), %rdx
    00000788: 	jmp	.Ltmp5118 # Offset: 1928
.Ltmp5106:
    0000078d: 	movabsq	$-0x79e79e79e79e79e7, %rax
    00000797: 	movq	%r11, %rsi
    0000079a: 	notq	%rsi
    0000079d: 	mulq	%rsi
    000007a0: 	movq	%rsi, %rax
    000007a3: 	subq	%rdx, %rax
    000007a6: 	shrq	%rax
    000007a9: 	addq	%rax, %rdx
    000007ac: 	shrq	$0x4, %rdx
    000007b0: 	notq	%rdx
    000007b3: 	jmp	.Ltmp5119 # Offset: 1971
.Ltmp5102:
    000007b8: 	movq	0xa8(%rsp), %rax
    000007c0: 	subq	%fs:0x28, %rax
    000007c9: 	jne	.Ltmp5103 # Offset: 1993
    000007cb: 	addq	$0xb8, %rsp
    000007d2: 	popq	%rbx
    000007d3: 	popq	%rbp
    000007d4: 	popq	%r12
    000007d6: 	popq	%r13
    000007d8: 	popq	%r14
    000007da: 	popq	%r15
    000007dc: 	retq # Offset: 2012
.Ltmp5101:
    000007dd: 	movq	-0x8(%rdx), %rax
    000007e1: 	addq	$0x200, %rax
    000007e7: 	jmp	.Ltmp5120 # Offset: 2023
.Ltmp5082:
    000007ec: 	pxor	%xmm4, %xmm4
    000007f0: 	movsd	%xmm4, 0x20(%rsp)
    000007f6: 	jmp	.Ltmp5121 # Offset: 2038
.Ltmp5103:
    000007fb: 	callq	__stack_chk_fail@PLT # Offset: 2043
    00000800: 	endbr64
    00000804: 	movq	%rax, %rbx
    00000807: 	jmp	.Ltmp5122 # Offset: 2055
    00000809: 	endbr64
    0000080d: 	movq	%rax, %rdi
    00000810: 	jmp	.Ltmp5123 # Offset: 2064
.Ltmp5128:
    00000812: 	callq	__cxa_end_catch@PLT # Offset: 2066
.Ltmp5122:
    00000817: 	movq	%rbp, %rdi
    0000081a: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2074
.Ltmp5126:
    0000081f: 	movq	%rbp, %rdi
    00000822: 	movl	$0xb8, %esi
    00000827: 	movq	%rbx, %rbp
    0000082a: 	callq	_ZdlPvm@PLT # Offset: 2090
.Ltmp5127:
    0000082f: 	movq	0x90(%rsp), %rdi
    00000837: 	movq	0xa0(%rsp), %rsi
    0000083f: 	subq	%rdi, %rsi
    00000842: 	testq	%rdi, %rdi
    00000845: 	je	.Ltmp5124 # Offset: 2117
    00000847: 	callq	_ZdlPvm@PLT # Offset: 2119
.Ltmp5124:
    0000084c: 	movq	%rbp, %rdi
    0000084f: 	callq	_Unwind_Resume@PLT # Offset: 2127
.Ltmp5123:
    00000854: 	callq	__cxa_begin_catch@PLT # Offset: 2132
    00000859: 	callq	__cxa_rethrow@PLT # Offset: 2137
    0000085e: 	endbr64
    00000862: 	movq	%rax, %r12
    00000865: 	jmp	.Ltmp5125 # Offset: 2149
    00000867: 	endbr64
    0000086b: 	movq	%rax, %rbx
    0000086e: 	jmp	.Ltmp5126 # Offset: 2158
    00000870: 	endbr64
    00000874: 	movq	%rax, %rbp
    00000877: 	jmp	.Ltmp5127 # Offset: 2167
.Ltmp5125:
    00000879: 	callq	__cxa_end_catch@PLT # Offset: 2169
    0000087e: 	movq	%r12, %rdi
    00000881: 	callq	__cxa_begin_catch@PLT # Offset: 2177
    00000886: 	movq	0x58(%rbp), %rax
    0000088a: 	movq	0x50(%rbp), %rdi
    0000088e: 	leaq	(,%rax,8), %rsi
    00000896: 	callq	_ZdlPvm@PLT # Offset: 2198
    0000089b: 	movq	$0x0, 0x50(%rbp)
    000008a3: 	movq	$0x0, 0x58(%rbp)
    000008ab: 	callq	__cxa_rethrow@PLT # Offset: 2219
    000008b0: 	endbr64
    000008b4: 	movq	%rax, %rbx
    000008b7: 	jmp	.Ltmp5128 # Offset: 2231
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_delete_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_duplicate_coreI20PooledSingleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 307
  State       : disassembled
  Address     : 0x35050
  Size        : 0x9a6
  MaxSize     : 0x9b0
  Offset      : 0x35050
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreI20PooledSingleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0306:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x3, %rsi
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	subq	$0xa8, %rsp
    00000019: 	movq	%rdx, 0x60(%rsp)
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%rdi, 0x28(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x98(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movabsq	$0x500000000, %rax
    00000042: 	divq	%rsi
    00000045: 	movq	%rax, 0x20(%rsp)
    0000004a: 	cmpq	$0x3e8, %rax
    00000050: 	ja	.Ltmp5129 # Offset: 80
    00000056: 	cmpq	$0x3, %rax
    0000005a: 	ja	.Ltmp5130 # Offset: 90
    00000060: 	movq	$0x0, 0x90(%rsp)
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	movq	$0x4, 0x20(%rsp)
    00000079: 	movaps	%xmm0, 0x80(%rsp)
.Ltmp5161:
    00000081: 	movq	0x20(%rsp), %rbx
    00000086: 	leaq	0x80(%rsp), %rdi
    0000008e: 	movq	%rbx, %rsi
    00000091: 	callq	_ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 145
    00000096: 	movq	0x80(%rsp), %rcx
    0000009e: 	movl	iterations(%rip), %eax
    000000a4: 	movq	%rcx, 0x30(%rsp)
    000000a9: 	testl	%eax, %eax
    000000ab: 	jle	.Ltmp5131 # Offset: 171
    000000b1: 	leaq	0x8(%rcx), %rsi
    000000b5: 	movl	%ebx, 0x4c(%rsp)
    000000b9: 	pxor	%xmm5, %xmm5
    000000bd: 	movl	$0x0, 0x48(%rsp)
    000000c5: 	movq	%rsi, 0x50(%rsp)
    000000ca: 	movsd	%xmm5, 0x68(%rsp)
.Ltmp5156:
    000000d0: 	movslq	0x48(%rsp), %rdx
    000000d5: 	movslq	%eax, %rcx
    000000d8: 	movq	%rdx, %rsi
    000000db: 	addq	0x20(%rsp), %rdx
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x4c(%rsp), %eax
    000000ea: 	movl	%eax, %ebx
    000000ec: 	callq	clock@PLT # Offset: 236
    000000f1: 	movq	0x50(%rsp), %rsi
    000000f6: 	movq	0x30(%rsp), %rcx
    000000fb: 	movq	%rax, start_time(%rip)
    00000102: 	leal	-0x1(%rbx), %eax
    00000105: 	leaq	(%rsi,%rax,8), %rax
    00000109: 	movq	%rcx, 0x38(%rsp)
    0000010e: 	movq	%rcx, %r14
    00000111: 	movq	%rax, 0x40(%rsp)
.Ltmp5147:
    00000116: 	movl	$0xb8, %edi
    0000011b: 	callq	_Znwm@PLT # Offset: 283
    00000120: 	movq	$0x0, (%rax)
    00000127: 	pxor	%xmm0, %xmm0
    0000012b: 	xorl	%esi, %esi
    0000012d: 	movq	%rax, %rdi
    00000130: 	movq	$0x0, 0x8(%rax)
    00000138: 	movq	%rax, %rbp
    0000013b: 	movups	%xmm0, 0x10(%rax)
    0000013f: 	movups	%xmm0, 0x20(%rax)
    00000143: 	movups	%xmm0, 0x30(%rax)
    00000147: 	movups	%xmm0, 0x40(%rax)
    0000014b: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 331
    00000150: 	movq	$0x0, 0x50(%rbp)
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	movl	$0x40, %edi
    00000161: 	movq	$0x8, 0x58(%rbp)
    00000169: 	movups	%xmm0, 0x60(%rbp)
    0000016d: 	movups	%xmm0, 0x70(%rbp)
    00000171: 	movups	%xmm0, 0x80(%rbp)
    00000178: 	movups	%xmm0, 0x90(%rbp)
    0000017f: 	callq	_Znwm@PLT # Offset: 383
    00000184: 	movq	0x58(%rbp), %rdx
    00000188: 	movq	%rax, 0x50(%rbp)
    0000018c: 	movl	$0x1f8, %edi
    00000191: 	leaq	-0x4(,%rdx,4), %rdx
    00000199: 	andq	$-0x8, %rdx
    0000019d: 	leaq	(%rax,%rdx), %rbx
    000001a1: 	movq	%rbx, (%rsp)
    000001a5: 	callq	_Znwm@PLT # Offset: 421
    000001aa: 	movq	%rax, %rsi
    000001ad: 	movq	%rax, %xmm1
    000001b2: 	movq	%rax, (%rbx)
    000001b5: 	leaq	0x1f8(%rax), %rax
    000001bc: 	movq	%rax, %xmm0
    000001c1: 	movq	0x28(%rsp), %rax
    000001c6: 	punpcklqdq	%xmm1, %xmm1
    000001ca: 	movq	%rsi, %r8
    000001cd: 	movhps	(%rsp), %xmm0
    000001d1: 	movups	%xmm1, 0x60(%rbp)
    000001d5: 	movq	0xa8(%rax), %r15
    000001dc: 	movups	%xmm0, 0x70(%rbp)
    000001e0: 	leaq	0x50(%rbp), %rax
    000001e4: 	movups	%xmm0, 0x90(%rbp)
    000001eb: 	pxor	%xmm0, %xmm0
    000001ef: 	movl	$0x0, 0xa0(%rbp)
    000001f9: 	movq	%rax, 0x58(%rsp)
    000001fe: 	movups	%xmm1, 0x80(%rbp)
    00000205: 	movups	%xmm0, 0xa8(%rbp)
    0000020c: 	testq	%r15, %r15
    0000020f: 	je	.Ltmp5132 # Offset: 527
.Ltmp5139:
    00000215: 	movq	0x8(%r15), %rax
    00000219: 	movq	0x48(%rbp), %r12
    0000021d: 	movq	0x30(%rbp), %rdi
    00000221: 	movq	0x38(%rbp), %rcx
    00000225: 	movq	%rax, 0x18(%rsp)
    0000022a: 	movq	%r12, %rax
    0000022d: 	subq	0x28(%rbp), %rax
    00000231: 	sarq	$0x3, %rax
    00000235: 	movq	%rdi, %rdx
    00000238: 	cmpq	$0x1, %r12
    0000023c: 	adcq	$-0x1, %rax
    00000240: 	subq	%rcx, %rdx
    00000243: 	sarq	$0x3, %rdx
    00000247: 	shlq	$0x6, %rax
    0000024b: 	addq	%rdx, %rax
    0000024e: 	movq	0x20(%rbp), %rdx
    00000252: 	subq	0x10(%rbp), %rdx
    00000256: 	sarq	$0x3, %rdx
    0000025a: 	addq	%rdx, %rax
    0000025d: 	je	.Ltmp5133 # Offset: 605
.Ltmp5163:
    00000263: 	cmpq	%rcx, %rdi
    00000266: 	je	.Ltmp5134 # Offset: 614
    0000026c: 	movq	-0x8(%rdi), %rbx
    00000270: 	subq	$0x8, %rdi
    00000274: 	movq	%rdi, 0x30(%rbp)
.Ltmp5145:
    00000278: 	movq	0x60(%rbp), %rsi
    0000027c: 	movq	0x68(%rbp), %r8
    00000280: 	movq	0x78(%rbp), %rax
    00000284: 	movq	%rsi, %rcx
    00000287: 	subq	%r8, %rcx
    0000028a: 	movq	%rax, (%rsp)
    0000028e: 	movabsq	$-0x5555555555555555, %rax
    00000298: 	sarq	$0x3, %rcx
    0000029c: 	imulq	%rax, %rcx
    000002a0: 	addq	%rbx, %rcx
    000002a3: 	js	.Ltmp5135 # Offset: 675
    000002a9: 	cmpq	$0x14, %rcx
    000002ad: 	jg	.Ltmp5136 # Offset: 685
    000002b3: 	leaq	(%rbx,%rbx,2), %rax
    000002b7: 	leaq	(%rsi,%rax,8), %rax
    000002bb: 	movq	%rbx, 0x10(%rax)
.Ltmp5144:
    000002bf: 	movsd	(%r15), %xmm0
    000002c4: 	movq	0xb0(%rbp), %rdx
    000002cb: 	movq	$0x0, 0x8(%rax)
    000002d3: 	movsd	%xmm0, (%rax)
    000002d7: 	testq	%rdx, %rdx
    000002da: 	je	.Ltmp5137 # Offset: 730
    000002dc: 	movq	%rax, 0x8(%rdx)
.Ltmp5137:
    000002e0: 	cmpq	$0x0, 0xa8(%rbp)
    000002e8: 	movq	%rax, 0xb0(%rbp)
    000002ef: 	je	.Ltmp5138 # Offset: 751
    000002f5: 	addl	$0x1, 0xa0(%rbp)
    000002fc: 	cmpq	$0x0, 0x18(%rsp)
    00000302: 	je	.Ltmp5132 # Offset: 770
.Ltmp5146:
    00000308: 	movq	0x18(%rsp), %r15
    0000030d: 	jmp	.Ltmp5139 # Offset: 781
    00000312: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5133:
    00000318: 	movq	0x98(%rbp), %r9
    0000031f: 	movq	0x80(%rbp), %r13
    00000326: 	movabsq	$-0x5555555555555555, %rbx
    00000330: 	movq	0x70(%rbp), %rax
    00000334: 	movq	%r9, %rdx
    00000337: 	subq	(%rsp), %rdx
    0000033b: 	sarq	$0x3, %rdx
    0000033f: 	cmpq	$0x1, %r9
    00000343: 	adcq	$-0x1, %rdx
    00000347: 	subq	0x88(%rbp), %r13
    0000034e: 	sarq	$0x3, %r13
    00000352: 	leaq	(%rdx,%rdx,4), %r10
    00000356: 	imulq	%rbx, %r13
    0000035a: 	leaq	(%rdx,%r10,4), %rdx
    0000035e: 	addq	%rdx, %r13
    00000361: 	movq	%rax, %rdx
    00000364: 	subq	%rsi, %rdx
    00000367: 	sarq	$0x3, %rdx
    0000036b: 	imulq	%rbx, %rdx
    0000036f: 	addq	%rdx, %r13
    00000372: 	leaq	0xaa(%r13), %rbx
    00000379: 	cmpq	%rbx, %r13
    0000037c: 	jb	.Ltmp5140 # Offset: 892
    00000382: 	movabsq	$-0x5555555555555555, %rdx
    0000038c: 	movq	%rsi, %r10
    0000038f: 	subq	%r8, %r10
    00000392: 	sarq	$0x3, %r10
    00000396: 	imulq	%rdx, %r10
    0000039a: 	addq	%rbx, %r10
    0000039d: 	js	.Ltmp5141 # Offset: 925
    000003a3: 	cmpq	$0x14, %r10
    000003a7: 	jg	.Ltmp5142 # Offset: 935
    000003ad: 	leaq	(%rbx,%rbx,2), %rdx
    000003b1: 	leaq	(%rsi,%rdx,8), %rsi
    000003b5: 	movq	%rsi, %xmm0
    000003ba: 	jmp	.Ltmp5143 # Offset: 954
    000003bf: 	nop # Size: 1
.Ltmp5136:
    000003c0: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    000003ca: 	movq	%rcx, %rax
    000003cd: 	imulq	%rdx
    000003d0: 	leaq	(%rdx,%rcx), %rax
    000003d4: 	movq	%rcx, %rdx
    000003d7: 	sarq	$0x4, %rax
    000003db: 	sarq	$0x3f, %rdx
    000003df: 	subq	%rdx, %rax
.Ltmp5160:
    000003e2: 	leaq	(%rax,%rax,4), %rdx
    000003e6: 	leaq	(%rax,%rdx,4), %rdx
    000003ea: 	subq	%rdx, %rcx
    000003ed: 	leaq	(%rcx,%rcx,2), %rdx
    000003f1: 	movq	(%rsp), %rcx
    000003f5: 	movq	(%rcx,%rax,8), %rax
    000003f9: 	leaq	(%rax,%rdx,8), %rax
    000003fd: 	movq	%rbx, 0x10(%rax)
    00000401: 	jmp	.Ltmp5144 # Offset: 1025
    00000406: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5134:
    00000410: 	movq	-0x8(%r12), %rax
    00000415: 	movl	$0x200, %esi
    0000041a: 	movq	0x1f8(%rax), %rbx
    00000421: 	callq	_ZdlPvm@PLT # Offset: 1057
    00000426: 	movq	0x48(%rbp), %rdx
    0000042a: 	movq	-0x8(%rdx), %rax
    0000042e: 	subq	$0x8, %rdx
    00000432: 	movq	%rdx, %xmm4
    00000437: 	leaq	0x1f8(%rax), %rsi
    0000043e: 	movq	%rax, %xmm3
    00000443: 	addq	$0x200, %rax
    00000449: 	movq	%rsi, %xmm0
    0000044e: 	punpcklqdq	%xmm3, %xmm0
    00000452: 	movups	%xmm0, 0x30(%rbp)
    00000456: 	movq	%rax, %xmm0
    0000045b: 	punpcklqdq	%xmm4, %xmm0
    0000045f: 	movups	%xmm0, 0x40(%rbp)
    00000463: 	jmp	.Ltmp5145 # Offset: 1123
    00000468: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5138:
    00000470: 	addl	$0x1, 0xa0(%rbp)
    00000477: 	cmpq	$0x0, 0x18(%rsp)
    0000047d: 	movq	%rax, 0xa8(%rbp)
    00000484: 	jne	.Ltmp5146 # Offset: 1156
    0000048a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5132:
    00000490: 	movq	0x38(%rsp), %rax
    00000495: 	movq	%rbp, (%rax)
    00000498: 	addq	$0x8, %rax
    0000049c: 	movq	%rax, 0x38(%rsp)
    000004a1: 	cmpq	%rax, 0x40(%rsp)
    000004a6: 	jne	.Ltmp5147 # Offset: 1190
    000004ac: 	callq	clock@PLT # Offset: 1196
    000004b1: 	pxor	%xmm0, %xmm0
    000004b5: 	movq	0x40(%rsp), %r13
    000004ba: 	movq	%rax, end_time(%rip)
    000004c1: 	subq	start_time(%rip), %rax
    000004c8: 	cvtsi2sd	%rax, %xmm0
    000004cd: 	divsd	DATAat0x53788(%rip), %xmm0
    000004d5: 	addsd	0x68(%rsp), %xmm0
    000004db: 	movsd	%xmm0, 0x68(%rsp)
    000004e1: 	nopl	(%rax) # Size: 7
.Ltmp5155:
    000004e8: 	movq	(%r14), %rbp
    000004eb: 	testq	%rbp, %rbp
    000004ee: 	je	.Ltmp5148 # Offset: 1262
    000004f4: 	movq	0x50(%rbp), %rdi
    000004f8: 	testq	%rdi, %rdi
    000004fb: 	je	.Ltmp5149 # Offset: 1275
    000004fd: 	movq	0x98(%rbp), %rax
    00000504: 	movq	0x78(%rbp), %rbx
    00000508: 	leaq	0x8(%rax), %r12
    0000050c: 	cmpq	%rbx, %r12
    0000050f: 	jbe	.Ltmp5150 # Offset: 1295
    00000511: 	nopl	(%rax) # Size: 7
.Ltmp5151:
    00000518: 	movq	(%rbx), %rdi
    0000051b: 	movl	$0x1f8, %esi
    00000520: 	addq	$0x8, %rbx
    00000524: 	callq	_ZdlPvm@PLT # Offset: 1316
    00000529: 	cmpq	%rbx, %r12
    0000052c: 	ja	.Ltmp5151 # Offset: 1324
    0000052e: 	movq	0x50(%rbp), %rdi
.Ltmp5150:
    00000532: 	movq	0x58(%rbp), %rax
    00000536: 	leaq	(,%rax,8), %rsi
    0000053e: 	callq	_ZdlPvm@PLT # Offset: 1342
.Ltmp5149:
    00000543: 	movq	(%rbp), %rdi
    00000547: 	testq	%rdi, %rdi
    0000054a: 	je	.Ltmp5152 # Offset: 1354
    0000054c: 	movq	0x48(%rbp), %rax
    00000550: 	movq	0x28(%rbp), %rbx
    00000554: 	leaq	0x8(%rax), %r12
    00000558: 	cmpq	%rbx, %r12
    0000055b: 	jbe	.Ltmp5153 # Offset: 1371
    0000055d: 	nopl	(%rax) # Size: 3
.Ltmp5154:
    00000560: 	movq	(%rbx), %rdi
    00000563: 	movl	$0x200, %esi
    00000568: 	addq	$0x8, %rbx
    0000056c: 	callq	_ZdlPvm@PLT # Offset: 1388
    00000571: 	cmpq	%rbx, %r12
    00000574: 	ja	.Ltmp5154 # Offset: 1396
    00000576: 	movq	(%rbp), %rdi
.Ltmp5153:
    0000057a: 	movq	0x8(%rbp), %rax
    0000057e: 	leaq	(,%rax,8), %rsi
    00000586: 	callq	_ZdlPvm@PLT # Offset: 1414
.Ltmp5152:
    0000058b: 	movl	$0xb8, %esi
    00000590: 	movq	%rbp, %rdi
    00000593: 	callq	_ZdlPvm@PLT # Offset: 1427
.Ltmp5148:
    00000598: 	movq	$0x0, (%r14)
    0000059f: 	addq	$0x8, %r14
    000005a3: 	cmpq	%r14, %r13
    000005a6: 	jne	.Ltmp5155 # Offset: 1446
    000005ac: 	movl	0x20(%rsp), %ecx
    000005b0: 	movl	iterations(%rip), %eax
    000005b6: 	addl	%ecx, 0x48(%rsp)
    000005ba: 	movl	0x48(%rsp), %ecx
    000005be: 	cmpl	%ecx, %eax
    000005c0: 	jg	.Ltmp5156 # Offset: 1472
.Ltmp5173:
    000005c6: 	movq	0x60(%rsp), %rdi
    000005cb: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1483
    000005d0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005d7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000005de: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005e5: 	je	.Ltmp5157 # Offset: 1509
.Ltmp5172:
    000005eb: 	movq	-0x20(%rax), %rdi
    000005ef: 	movsd	0x68(%rsp), %xmm0
    000005f5: 	callq	_Z13record_resultdPKc # Offset: 1525
    000005fa: 	cmpq	$0x0, 0x30(%rsp)
    00000600: 	je	.Ltmp5158 # Offset: 1536
    00000606: 	movq	0x98(%rsp), %rax
    0000060e: 	subq	%fs:0x28, %rax
    00000617: 	jne	.Ltmp5159 # Offset: 1559
    0000061d: 	movq	0x90(%rsp), %rsi
    00000625: 	movq	0x30(%rsp), %rdi
    0000062a: 	addq	$0xa8, %rsp
    00000631: 	popq	%rbx
    00000632: 	popq	%rbp
    00000633: 	subq	%rdi, %rsi
    00000636: 	popq	%r12
    00000638: 	popq	%r13
    0000063a: 	popq	%r14
    0000063c: 	popq	%r15
    0000063e: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1598
    00000643: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5135:
    00000648: 	movabsq	$-0x79e79e79e79e79e7, %rax
    00000652: 	movq	%rcx, %rdi
    00000655: 	notq	%rdi
    00000658: 	mulq	%rdi
    0000065b: 	subq	%rdx, %rdi
    0000065e: 	shrq	%rdi
    00000661: 	leaq	(%rdx,%rdi), %rax
    00000665: 	shrq	$0x4, %rax
    00000669: 	notq	%rax
    0000066c: 	jmp	.Ltmp5160 # Offset: 1644
    00000671: 	nopl	(%rax) # Size: 7
.Ltmp5129:
    00000678: 	movq	$0x3e8, 0x20(%rsp)
.Ltmp5130:
    00000681: 	movq	$0x0, 0x90(%rsp)
    0000068d: 	pxor	%xmm0, %xmm0
    00000691: 	movaps	%xmm0, 0x80(%rsp)
    00000699: 	jmp	.Ltmp5161 # Offset: 1689
.Ltmp5140:
    0000069e: 	movq	0x58(%rsp), %rdi
    000006a3: 	movl	$0xaa, %esi
    000006a8: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1704
    000006ad: 	movq	0x30(%rbp), %rdi
    000006b1: 	movq	0x38(%rbp), %rcx
    000006b5: 	movq	0x48(%rbp), %r12
    000006b9: 	movq	0x40(%rbp), %rdx
    000006bd: 	jmp	.Ltmp5162 # Offset: 1725
    000006bf: 	nop # Size: 1
.Ltmp5164:
    000006c0: 	movq	%rbx, (%rdi)
    000006c3: 	addq	$0x8, %rdi
.Ltmp5167:
    000006c7: 	movq	%rdi, 0x30(%rbp)
    000006cb: 	cmpq	%rbx, %r13
    000006ce: 	je	.Ltmp5163 # Offset: 1742
.Ltmp5162:
    000006d4: 	leaq	-0x8(%rdx), %rax
    000006d8: 	subq	$0x1, %rbx
    000006dc: 	cmpq	%rax, %rdi
    000006df: 	jne	.Ltmp5164 # Offset: 1759
    000006e1: 	movq	%r12, %rax
    000006e4: 	subq	0x28(%rbp), %rax
    000006e8: 	movq	0x20(%rbp), %rdx
    000006ec: 	movabsq	$0xfffffffffffffff, %rsi
    000006f6: 	sarq	$0x3, %rax
    000006fa: 	cmpq	$0x1, %r12
    000006fe: 	adcq	$-0x1, %rax
    00000702: 	subq	%rcx, %rdi
    00000705: 	subq	0x10(%rbp), %rdx
    00000709: 	shlq	$0x6, %rax
    0000070d: 	sarq	$0x3, %rdi
    00000711: 	addq	%rdi, %rax
    00000714: 	sarq	$0x3, %rdx
    00000718: 	addq	%rdx, %rax
    0000071b: 	cmpq	%rsi, %rax
    0000071e: 	je	.Ltmp5165 # Offset: 1822
    00000724: 	movq	0x8(%rbp), %rax
    00000728: 	movq	%r12, %rdx
    0000072b: 	subq	(%rbp), %rdx
    0000072f: 	sarq	$0x3, %rdx
    00000733: 	subq	%rdx, %rax
    00000736: 	cmpq	$0x1, %rax
    0000073a: 	jbe	.Ltmp5166 # Offset: 1850
.Ltmp5168:
    0000073c: 	movl	$0x200, %edi
    00000741: 	callq	_Znwm@PLT # Offset: 1857
    00000746: 	movq	%rax, 0x8(%r12)
    0000074b: 	movq	0x30(%rbp), %rax
    0000074f: 	movq	%rbx, (%rax)
    00000752: 	movq	0x48(%rbp), %rax
    00000756: 	movq	0x8(%rax), %rdi
    0000075a: 	leaq	0x8(%rax), %r12
    0000075e: 	movq	%r12, 0x48(%rbp)
    00000762: 	leaq	0x200(%rdi), %rdx
    00000769: 	movq	%rdi, %xmm0
    0000076e: 	movq	%rdi, %rcx
    00000771: 	movq	%rdx, %xmm2
    00000776: 	punpcklqdq	%xmm2, %xmm0
    0000077a: 	movups	%xmm0, 0x38(%rbp)
    0000077e: 	jmp	.Ltmp5167 # Offset: 1918
    00000783: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5166:
    00000788: 	xorl	%edx, %edx
    0000078a: 	movl	$0x1, %esi
    0000078f: 	movq	%rbp, %rdi
    00000792: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 1938
    00000797: 	movq	0x48(%rbp), %r12
    0000079b: 	jmp	.Ltmp5168 # Offset: 1947
.Ltmp5158:
    0000079d: 	movq	0x98(%rsp), %rax
    000007a5: 	subq	%fs:0x28, %rax
    000007ae: 	jne	.Ltmp5159 # Offset: 1966
    000007b4: 	addq	$0xa8, %rsp
    000007bb: 	popq	%rbx
    000007bc: 	popq	%rbp
    000007bd: 	popq	%r12
    000007bf: 	popq	%r13
    000007c1: 	popq	%r14
    000007c3: 	popq	%r15
    000007c5: 	retq # Offset: 1989
.Ltmp5141:
    000007c6: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000007d0: 	movq	%r10, %rsi
    000007d3: 	notq	%rsi
    000007d6: 	mulq	%rsi
    000007d9: 	movq	%rsi, %rax
    000007dc: 	subq	%rdx, %rax
    000007df: 	shrq	%rax
    000007e2: 	addq	%rax, %rdx
    000007e5: 	shrq	$0x4, %rdx
    000007e9: 	notq	%rdx
.Ltmp5171:
    000007ec: 	movq	(%rsp), %rax
    000007f0: 	leaq	(%rdx,%rdx,4), %rsi
    000007f4: 	leaq	(%rax,%rdx,8), %rax
    000007f8: 	leaq	(%rdx,%rsi,4), %rdx
    000007fc: 	movq	(%rax), %r8
    000007ff: 	subq	%rdx, %r10
    00000802: 	movq	%rax, (%rsp)
    00000806: 	leaq	(%r10,%r10,2), %rdx
    0000080a: 	leaq	(%r8,%rdx,8), %rsi
    0000080e: 	leaq	0x1f8(%r8), %rax
    00000815: 	movq	%rsi, %xmm0
.Ltmp5143:
    0000081a: 	movq	%rax, %xmm7
    0000081f: 	movq	(%rsp), %rax
    00000823: 	movdqa	%xmm0, %xmm6
    00000827: 	leaq	0x8(%r9), %rbx
    0000082b: 	movq	%r8, %xmm5
    00000830: 	movq	%rax, %xmm4
    00000835: 	punpcklqdq	%xmm5, %xmm6
    00000839: 	addq	$0x8, %rax
    0000083d: 	punpcklqdq	%xmm4, %xmm7
    00000841: 	movaps	%xmm6, 0x70(%rsp)
    00000846: 	movq	%rax, %r13
    00000849: 	movaps	%xmm7, (%rsp)
    0000084d: 	cmpq	%rax, %rbx
    00000850: 	jbe	.Ltmp5169 # Offset: 2128
    00000852: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5170:
    00000858: 	movq	(%r13), %rdi
    0000085c: 	movl	$0x1f8, %esi
    00000861: 	addq	$0x8, %r13
    00000865: 	callq	_ZdlPvm@PLT # Offset: 2149
    0000086a: 	cmpq	%r13, %rbx
    0000086d: 	ja	.Ltmp5170 # Offset: 2157
    0000086f: 	movq	0x30(%rbp), %rdi
    00000873: 	movq	0x38(%rbp), %rcx
    00000877: 	movq	0x48(%rbp), %r12
.Ltmp5169:
    0000087b: 	movdqa	0x70(%rsp), %xmm6
    00000881: 	movdqa	(%rsp), %xmm7
    00000886: 	movups	%xmm6, 0x80(%rbp)
    0000088d: 	movups	%xmm7, 0x90(%rbp)
    00000894: 	jmp	.Ltmp5163 # Offset: 2196
.Ltmp5142:
    00000899: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    000008a3: 	movq	%r10, %rax
    000008a6: 	imulq	%rdx
    000008a9: 	movq	%r10, %rax
    000008ac: 	sarq	$0x3f, %rax
    000008b0: 	addq	%r10, %rdx
    000008b3: 	sarq	$0x4, %rdx
    000008b7: 	subq	%rax, %rdx
    000008ba: 	jmp	.Ltmp5171 # Offset: 2234
.Ltmp5157:
    000008bf: 	movq	-0x8(%rdx), %rax
    000008c3: 	addq	$0x200, %rax
    000008c9: 	jmp	.Ltmp5172 # Offset: 2249
.Ltmp5131:
    000008ce: 	pxor	%xmm4, %xmm4
    000008d2: 	movsd	%xmm4, 0x68(%rsp)
    000008d8: 	jmp	.Ltmp5173 # Offset: 2264
.Ltmp5165:
    000008dd: 	leaq	DATAat0x52330(%rip), %rdi
    000008e4: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2276
.Ltmp5159:
    000008e9: 	callq	__stack_chk_fail@PLT # Offset: 2281
    000008ee: 	endbr64
    000008f2: 	movq	%rax, %rbx
    000008f5: 	jmp	.Ltmp5174 # Offset: 2293
    000008f7: 	endbr64
    000008fb: 	movq	%rax, %rbx
    000008fe: 	jmp	.Ltmp5175 # Offset: 2302
.Ltmp5178:
    00000900: 	callq	__cxa_end_catch@PLT # Offset: 2304
.Ltmp5175:
    00000905: 	movq	%rbp, %rdi
    00000908: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2312
.Ltmp5174:
    0000090d: 	movq	%rbp, %rdi
    00000910: 	movl	$0xb8, %esi
    00000915: 	movq	%rbx, %rbp
    00000918: 	callq	_ZdlPvm@PLT # Offset: 2328
.Ltmp5177:
    0000091d: 	movq	0x80(%rsp), %rdi
    00000925: 	movq	0x90(%rsp), %rsi
    0000092d: 	subq	%rdi, %rsi
    00000930: 	testq	%rdi, %rdi
    00000933: 	je	.Ltmp5176 # Offset: 2355
    00000935: 	callq	_ZdlPvm@PLT # Offset: 2357
.Ltmp5176:
    0000093a: 	movq	%rbp, %rdi
    0000093d: 	callq	_Unwind_Resume@PLT # Offset: 2365
    00000942: 	endbr64
    00000946: 	movq	%rax, %rbp
    00000949: 	jmp	.Ltmp5177 # Offset: 2377
    0000094b: 	endbr64
    0000094f: 	movq	%rax, %rdi
    00000952: 	callq	__cxa_begin_catch@PLT # Offset: 2386
    00000957: 	callq	__cxa_rethrow@PLT # Offset: 2391
    0000095c: 	endbr64
    00000960: 	movq	%rax, %r12
    00000963: 	callq	__cxa_end_catch@PLT # Offset: 2403
    00000968: 	movq	%r12, %rdi
    0000096b: 	callq	__cxa_begin_catch@PLT # Offset: 2411
    00000970: 	movq	0x58(%rbp), %rax
    00000974: 	movq	0x50(%rbp), %rdi
    00000978: 	leaq	(,%rax,8), %rsi
    00000980: 	callq	_ZdlPvm@PLT # Offset: 2432
    00000985: 	movq	$0x0, 0x50(%rbp)
    0000098d: 	movq	$0x0, 0x58(%rbp)
    00000995: 	callq	__cxa_rethrow@PLT # Offset: 2453
    0000099a: 	endbr64
    0000099e: 	movq	%rax, %rbx
    000009a1: 	jmp	.Ltmp5178 # Offset: 2465
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreI20PooledSingleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_clearall_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 308
  State       : disassembled
  Address     : 0x35a00
  Size        : 0x9f8
  MaxSize     : 0xa00
  Offset      : 0x35a00
  Section     : .text
  Orc Section : .local.text._Z22test_clearall_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0307:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movq	%rsi, (%rsp)
    00000019: 	subq	%rdi, %rsi
    0000001c: 	movq	%rdx, 0x50(%rsp)
    00000021: 	xorl	%edx, %edx
    00000023: 	movq	%rdi, 0x20(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0xa8(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	movabsq	$0x500000000, %rax
    00000045: 	divq	%rsi
    00000048: 	movq	%rax, 0x10(%rsp)
    0000004d: 	cmpq	$0x3e8, %rax
    00000053: 	ja	.Ltmp5179 # Offset: 83
    00000059: 	cmpq	$0x3, %rax
    0000005d: 	ja	.Ltmp5180 # Offset: 93
    00000063: 	movq	$0x0, 0xa0(%rsp)
    0000006f: 	pxor	%xmm0, %xmm0
    00000073: 	movq	$0x4, 0x10(%rsp)
    0000007c: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5224:
    00000084: 	movq	0x10(%rsp), %rbx
    00000089: 	leaq	0x90(%rsp), %rdi
    00000091: 	movq	%rbx, %rsi
    00000094: 	callq	_ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 148
    00000099: 	movq	0x90(%rsp), %rcx
    000000a1: 	movl	iterations(%rip), %eax
    000000a7: 	movq	%rcx, 0x30(%rsp)
    000000ac: 	testl	%eax, %eax
    000000ae: 	jle	.Ltmp5181 # Offset: 174
    000000b4: 	leaq	0x8(%rcx), %rsi
    000000b8: 	movl	%ebx, 0x4c(%rsp)
    000000bc: 	pxor	%xmm6, %xmm6
    000000c0: 	leaq	0x88(%rsp), %r14
    000000c8: 	movl	$0x0, 0x48(%rsp)
    000000d0: 	movq	%rsi, 0x58(%rsp)
    000000d5: 	movsd	%xmm6, 0x38(%rsp)
.Ltmp5205:
    000000db: 	movslq	0x48(%rsp), %rdx
    000000e0: 	movslq	%eax, %rcx
    000000e3: 	movq	%rdx, %rsi
    000000e6: 	addq	0x10(%rsp), %rdx
    000000eb: 	subl	%esi, %eax
    000000ed: 	cmpq	%rcx, %rdx
    000000f0: 	cmovbl	0x4c(%rsp), %eax
    000000f5: 	movq	0x58(%rsp), %rcx
    000000fa: 	movq	0x30(%rsp), %rsi
    000000ff: 	subl	$0x1, %eax
    00000102: 	leaq	(%rcx,%rax,8), %rax
    00000106: 	movq	%rsi, 0x40(%rsp)
    0000010b: 	movq	%rax, 0x8(%rsp)
    00000110: 	movq	%rsi, 0x18(%rsp)
.Ltmp5190:
    00000115: 	movl	$0xb8, %edi
    0000011a: 	callq	_Znwm@PLT # Offset: 282
    0000011f: 	movq	$0x0, (%rax)
    00000126: 	pxor	%xmm0, %xmm0
    0000012a: 	xorl	%esi, %esi
    0000012c: 	movq	%rax, %rdi
    0000012f: 	movq	$0x0, 0x8(%rax)
    00000137: 	movq	%rax, %rbp
    0000013a: 	movups	%xmm0, 0x10(%rax)
    0000013e: 	movups	%xmm0, 0x20(%rax)
    00000142: 	movups	%xmm0, 0x30(%rax)
    00000146: 	movups	%xmm0, 0x40(%rax)
    0000014a: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 330
    0000014f: 	movq	$0x0, 0x50(%rbp)
    00000157: 	pxor	%xmm0, %xmm0
    0000015b: 	movl	$0x40, %edi
    00000160: 	movq	$0x8, 0x58(%rbp)
    00000168: 	movups	%xmm0, 0x60(%rbp)
    0000016c: 	movups	%xmm0, 0x70(%rbp)
    00000170: 	movups	%xmm0, 0x80(%rbp)
    00000177: 	movups	%xmm0, 0x90(%rbp)
    0000017e: 	callq	_Znwm@PLT # Offset: 382
    00000183: 	movq	0x58(%rbp), %rdx
    00000187: 	movq	%rax, 0x50(%rbp)
    0000018b: 	movl	$0x1f8, %edi
    00000190: 	leaq	-0x4(,%rdx,4), %rdx
    00000198: 	andq	$-0x8, %rdx
    0000019c: 	leaq	(%rax,%rdx), %r13
    000001a0: 	callq	_Znwm@PLT # Offset: 416
    000001a5: 	movq	%rax, %rsi
    000001a8: 	movq	%rax, %xmm1
    000001ad: 	movq	%rax, (%r13)
    000001b1: 	leaq	0x1f8(%rax), %rax
    000001b8: 	movq	%rax, %xmm0
    000001bd: 	movq	%r13, %xmm4
    000001c2: 	movq	%rsi, %r8
    000001c5: 	movl	$0x0, 0xa0(%rbp)
    000001cf: 	leaq	0x50(%rbp), %rax
    000001d3: 	punpcklqdq	%xmm4, %xmm0
    000001d7: 	punpcklqdq	%xmm1, %xmm1
    000001db: 	movq	%rax, 0x28(%rsp)
    000001e0: 	movq	0x20(%rsp), %rax
    000001e5: 	movups	%xmm0, 0x70(%rbp)
    000001e9: 	movups	%xmm0, 0x90(%rbp)
    000001f0: 	pxor	%xmm0, %xmm0
    000001f4: 	movq	%rax, %r15
    000001f7: 	movups	%xmm1, 0x60(%rbp)
    000001fb: 	movups	%xmm1, 0x80(%rbp)
    00000202: 	movups	%xmm0, 0xa8(%rbp)
    00000209: 	cmpq	%rax, (%rsp)
    0000020d: 	je	.Ltmp5182 # Offset: 525
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5189:
    00000218: 	movq	0x48(%rbp), %rcx
    0000021c: 	movq	0x30(%rbp), %rdi
    00000220: 	addq	$0x8, %r15
    00000224: 	movq	0x38(%rbp), %r9
    00000228: 	movq	%rcx, %rax
    0000022b: 	subq	0x28(%rbp), %rax
    0000022f: 	movq	%rdi, %rdx
    00000232: 	sarq	$0x3, %rax
    00000236: 	cmpq	$0x1, %rcx
    0000023a: 	adcq	$-0x1, %rax
    0000023e: 	subq	%r9, %rdx
    00000241: 	sarq	$0x3, %rdx
    00000245: 	shlq	$0x6, %rax
    00000249: 	addq	%rdx, %rax
    0000024c: 	movq	0x20(%rbp), %rdx
    00000250: 	subq	0x10(%rbp), %rdx
    00000254: 	sarq	$0x3, %rdx
    00000258: 	addq	%rdx, %rax
    0000025b: 	je	.Ltmp5183 # Offset: 603
.Ltmp5223:
    00000261: 	cmpq	%r9, %rdi
    00000264: 	je	.Ltmp5184 # Offset: 612
.Ltmp5217:
    0000026a: 	movq	-0x8(%rdi), %rbx
    0000026e: 	subq	$0x8, %rdi
    00000272: 	movq	%rdi, 0x30(%rbp)
.Ltmp5218:
    00000276: 	movq	0x60(%rbp), %rsi
    0000027a: 	movq	0x68(%rbp), %r8
    0000027e: 	movabsq	$-0x5555555555555555, %rax
    00000288: 	movq	0x78(%rbp), %r13
    0000028c: 	movq	%rsi, %rcx
    0000028f: 	subq	%r8, %rcx
    00000292: 	sarq	$0x3, %rcx
    00000296: 	imulq	%rax, %rcx
    0000029a: 	addq	%rbx, %rcx
    0000029d: 	js	.Ltmp5185 # Offset: 669
    000002a3: 	cmpq	$0x14, %rcx
    000002a7: 	jg	.Ltmp5186 # Offset: 679
    000002ad: 	leaq	(%rbx,%rbx,2), %rax
    000002b1: 	leaq	(%rsi,%rax,8), %rax
    000002b5: 	movq	%rbx, 0x10(%rax)
.Ltmp5210:
    000002b9: 	movsd	-0x8(%r15), %xmm0
    000002bf: 	movq	0xb0(%rbp), %rdx
    000002c6: 	movq	$0x0, 0x8(%rax)
    000002ce: 	movsd	%xmm0, (%rax)
    000002d2: 	testq	%rdx, %rdx
    000002d5: 	je	.Ltmp5187 # Offset: 725
    000002d7: 	movq	%rax, 0x8(%rdx)
.Ltmp5187:
    000002db: 	cmpq	$0x0, 0xa8(%rbp)
    000002e3: 	movq	%rax, 0xb0(%rbp)
    000002ea: 	je	.Ltmp5188 # Offset: 746
    000002f0: 	addl	$0x1, 0xa0(%rbp)
    000002f7: 	cmpq	%r15, (%rsp)
    000002fb: 	jne	.Ltmp5189 # Offset: 763
.Ltmp5182:
    00000301: 	movq	0x18(%rsp), %rax
    00000306: 	movq	%rbp, (%rax)
    00000309: 	addq	$0x8, %rax
    0000030d: 	movq	%rax, 0x18(%rsp)
    00000312: 	cmpq	%rax, 0x8(%rsp)
    00000317: 	jne	.Ltmp5190 # Offset: 791
    0000031d: 	callq	clock@PLT # Offset: 797
    00000322: 	movq	0x30(%rsp), %r15
    00000327: 	movabsq	$-0x5555555555555555, %r13
    00000331: 	movq	%rax, start_time(%rip)
.Ltmp5196:
    00000338: 	movq	(%r15), %rbx
    0000033b: 	movq	0xa8(%rbx), %rbp
    00000342: 	testq	%rbp, %rbp
    00000345: 	jne	.Ltmp5191 # Offset: 837
    00000347: 	jmp	.Ltmp5192 # Offset: 839
    0000034c: 	nopl	(%rax) # Size: 4
.Ltmp5195:
    00000350: 	cmpq	$0x14, %rcx
    00000354: 	jg	.Ltmp5193 # Offset: 852
    0000035a: 	leaq	(%rax,%rax,2), %rax
    0000035e: 	leaq	(%rdx,%rax,8), %rax
    00000362: 	movq	$-0x1, 0x10(%rax)
    0000036a: 	testq	%rbp, %rbp
    0000036d: 	je	.Ltmp5192 # Offset: 877
.Ltmp5191:
    00000373: 	movq	0x40(%rbx), %rsi
    00000377: 	movq	0x30(%rbx), %rax
    0000037b: 	movq	%rbp, %r12
    0000037e: 	movq	0x8(%rbp), %rbp
    00000382: 	leaq	-0x8(%rsi), %rdx
    00000386: 	cmpq	%rdx, %rax
    00000389: 	je	.Ltmp5194 # Offset: 905
    0000038f: 	movq	0x10(%r12), %rdx
    00000394: 	addq	$0x8, %rax
    00000398: 	movq	%rdx, -0x8(%rax)
    0000039c: 	movq	%rax, 0x30(%rbx)
.Ltmp5211:
    000003a0: 	movq	0x60(%rbx), %rdx
    000003a4: 	movq	0x10(%r12), %rax
    000003a9: 	movq	0x78(%rbx), %rsi
    000003ad: 	movq	%rdx, %rcx
    000003b0: 	subq	0x68(%rbx), %rcx
    000003b4: 	sarq	$0x3, %rcx
    000003b8: 	imulq	%r13, %rcx
    000003bc: 	addq	%rax, %rcx
    000003bf: 	jns	.Ltmp5195 # Offset: 959
    000003c1: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000003cb: 	movq	%rcx, %rdi
    000003ce: 	notq	%rdi
    000003d1: 	mulq	%rdi
    000003d4: 	subq	%rdx, %rdi
    000003d7: 	shrq	%rdi
    000003da: 	leaq	(%rdx,%rdi), %rax
    000003de: 	shrq	$0x4, %rax
    000003e2: 	notq	%rax
.Ltmp5209:
    000003e5: 	leaq	(%rax,%rax,4), %rdx
    000003e9: 	leaq	(%rax,%rdx,4), %rdx
    000003ed: 	movq	(%rsi,%rax,8), %rax
    000003f1: 	subq	%rdx, %rcx
    000003f4: 	leaq	(%rcx,%rcx,2), %rdx
    000003f8: 	leaq	(%rax,%rdx,8), %rax
    000003fc: 	movq	$-0x1, 0x10(%rax)
    00000404: 	testq	%rbp, %rbp
    00000407: 	jne	.Ltmp5191 # Offset: 1031
.Ltmp5192:
    0000040d: 	pxor	%xmm0, %xmm0
    00000411: 	addq	$0x8, %r15
    00000415: 	movl	$0x0, 0xa0(%rbx)
    0000041f: 	movups	%xmm0, 0xa8(%rbx)
    00000426: 	cmpq	%r15, 0x8(%rsp)
    0000042b: 	jne	.Ltmp5196 # Offset: 1067
    00000431: 	callq	clock@PLT # Offset: 1073
    00000436: 	pxor	%xmm0, %xmm0
    0000043a: 	movq	0x40(%rsp), %r12
    0000043f: 	movq	0x8(%rsp), %r13
    00000444: 	movq	%rax, end_time(%rip)
    0000044b: 	subq	start_time(%rip), %rax
    00000452: 	cvtsi2sd	%rax, %xmm0
    00000457: 	divsd	DATAat0x53788(%rip), %xmm0
    0000045f: 	addsd	0x38(%rsp), %xmm0
    00000465: 	movsd	%xmm0, 0x38(%rsp)
.Ltmp5204:
    0000046b: 	movq	(%r12), %rbp
    0000046f: 	testq	%rbp, %rbp
    00000472: 	je	.Ltmp5197 # Offset: 1138
    00000478: 	movq	0x50(%rbp), %rdi
    0000047c: 	testq	%rdi, %rdi
    0000047f: 	je	.Ltmp5198 # Offset: 1151
    00000481: 	movq	0x98(%rbp), %rax
    00000488: 	movq	0x78(%rbp), %rbx
    0000048c: 	leaq	0x8(%rax), %r15
    00000490: 	cmpq	%rbx, %r15
    00000493: 	jbe	.Ltmp5199 # Offset: 1171
    00000495: 	nopl	(%rax) # Size: 3
.Ltmp5200:
    00000498: 	movq	(%rbx), %rdi
    0000049b: 	movl	$0x1f8, %esi
    000004a0: 	addq	$0x8, %rbx
    000004a4: 	callq	_ZdlPvm@PLT # Offset: 1188
    000004a9: 	cmpq	%rbx, %r15
    000004ac: 	ja	.Ltmp5200 # Offset: 1196
    000004ae: 	movq	0x50(%rbp), %rdi
.Ltmp5199:
    000004b2: 	movq	0x58(%rbp), %rax
    000004b6: 	leaq	(,%rax,8), %rsi
    000004be: 	callq	_ZdlPvm@PLT # Offset: 1214
.Ltmp5198:
    000004c3: 	movq	(%rbp), %rdi
    000004c7: 	testq	%rdi, %rdi
    000004ca: 	je	.Ltmp5201 # Offset: 1226
    000004cc: 	movq	0x48(%rbp), %rax
    000004d0: 	movq	0x28(%rbp), %rbx
    000004d4: 	leaq	0x8(%rax), %r15
    000004d8: 	cmpq	%rbx, %r15
    000004db: 	jbe	.Ltmp5202 # Offset: 1243
    000004dd: 	nopl	(%rax) # Size: 3
.Ltmp5203:
    000004e0: 	movq	(%rbx), %rdi
    000004e3: 	movl	$0x200, %esi
    000004e8: 	addq	$0x8, %rbx
    000004ec: 	callq	_ZdlPvm@PLT # Offset: 1260
    000004f1: 	cmpq	%rbx, %r15
    000004f4: 	ja	.Ltmp5203 # Offset: 1268
    000004f6: 	movq	(%rbp), %rdi
.Ltmp5202:
    000004fa: 	movq	0x8(%rbp), %rax
    000004fe: 	leaq	(,%rax,8), %rsi
    00000506: 	callq	_ZdlPvm@PLT # Offset: 1286
.Ltmp5201:
    0000050b: 	movl	$0xb8, %esi
    00000510: 	movq	%rbp, %rdi
    00000513: 	callq	_ZdlPvm@PLT # Offset: 1299
.Ltmp5197:
    00000518: 	movq	$0x0, (%r12)
    00000520: 	addq	$0x8, %r12
    00000524: 	cmpq	%r13, %r12
    00000527: 	jne	.Ltmp5204 # Offset: 1319
    0000052d: 	movl	0x10(%rsp), %esi
    00000531: 	movl	iterations(%rip), %eax
    00000537: 	addl	%esi, 0x48(%rsp)
    0000053b: 	movl	0x48(%rsp), %esi
    0000053f: 	cmpl	%esi, %eax
    00000541: 	jg	.Ltmp5205 # Offset: 1345
.Ltmp5228:
    00000547: 	movq	0x50(%rsp), %rdi
    0000054c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1356
    00000551: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000558: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000055f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000566: 	je	.Ltmp5206 # Offset: 1382
.Ltmp5227:
    0000056c: 	movq	-0x20(%rax), %rdi
    00000570: 	movsd	0x38(%rsp), %xmm0
    00000576: 	callq	_Z13record_resultdPKc # Offset: 1398
    0000057b: 	cmpq	$0x0, 0x30(%rsp)
    00000581: 	je	.Ltmp5207 # Offset: 1409
    00000587: 	movq	0xa8(%rsp), %rax
    0000058f: 	subq	%fs:0x28, %rax
    00000598: 	jne	.Ltmp5208 # Offset: 1432
    0000059e: 	movq	0xa0(%rsp), %rsi
    000005a6: 	movq	0x30(%rsp), %rdi
    000005ab: 	addq	$0xb8, %rsp
    000005b2: 	popq	%rbx
    000005b3: 	popq	%rbp
    000005b4: 	subq	%rdi, %rsi
    000005b7: 	popq	%r12
    000005b9: 	popq	%r13
    000005bb: 	popq	%r14
    000005bd: 	popq	%r15
    000005bf: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1471
    000005c4: 	nopl	(%rax) # Size: 4
.Ltmp5193:
    000005c8: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rax
    000005d2: 	imulq	%rcx
    000005d5: 	leaq	(%rdx,%rcx), %rax
    000005d9: 	movq	%rcx, %rdx
    000005dc: 	sarq	$0x4, %rax
    000005e0: 	sarq	$0x3f, %rdx
    000005e4: 	subq	%rdx, %rax
    000005e7: 	jmp	.Ltmp5209 # Offset: 1511
.Ltmp5186:
    000005ec: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    000005f6: 	movq	%rcx, %rax
    000005f9: 	imulq	%rdx
    000005fc: 	leaq	(%rdx,%rcx), %rax
    00000600: 	movq	%rcx, %rdx
    00000603: 	sarq	$0x4, %rax
    00000607: 	sarq	$0x3f, %rdx
    0000060b: 	subq	%rdx, %rax
.Ltmp5219:
    0000060e: 	leaq	(%rax,%rax,4), %rdx
    00000612: 	leaq	(%rax,%rdx,4), %rdx
    00000616: 	movq	(%r13,%rax,8), %rax
    0000061b: 	subq	%rdx, %rcx
    0000061e: 	leaq	(%rcx,%rcx,2), %rdx
    00000622: 	leaq	(%rax,%rdx,8), %rax
    00000626: 	movq	%rbx, 0x10(%rax)
    0000062a: 	jmp	.Ltmp5210 # Offset: 1578
    0000062f: 	nop # Size: 1
.Ltmp5194:
    00000630: 	leaq	0x10(%r12), %rsi
    00000635: 	movq	%rbx, %rdi
    00000638: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 1592
    0000063d: 	jmp	.Ltmp5211 # Offset: 1597
.Ltmp5183:
    00000642: 	movq	0x98(%rbp), %r10
    00000649: 	movq	0x80(%rbp), %r12
    00000650: 	movabsq	$-0x5555555555555555, %rbx
    0000065a: 	movq	0x70(%rbp), %rax
    0000065e: 	movq	%r10, %rdx
    00000661: 	subq	%r13, %rdx
    00000664: 	sarq	$0x3, %rdx
    00000668: 	cmpq	$0x1, %r10
    0000066c: 	adcq	$-0x1, %rdx
    00000670: 	subq	0x88(%rbp), %r12
    00000677: 	sarq	$0x3, %r12
    0000067b: 	leaq	(%rdx,%rdx,4), %r11
    0000067f: 	imulq	%rbx, %r12
    00000683: 	leaq	(%rdx,%r11,4), %rdx
    00000687: 	addq	%rdx, %r12
    0000068a: 	movq	%rax, %rdx
    0000068d: 	subq	%rsi, %rdx
    00000690: 	sarq	$0x3, %rdx
    00000694: 	imulq	%rbx, %rdx
    00000698: 	addq	%rdx, %r12
    0000069b: 	leaq	0xaa(%r12), %rbx
    000006a3: 	cmpq	%rbx, %r12
    000006a6: 	jb	.Ltmp5212 # Offset: 1702
    000006ac: 	movabsq	$-0x5555555555555555, %rdx
    000006b6: 	movq	%rsi, %r11
    000006b9: 	subq	%r8, %r11
    000006bc: 	sarq	$0x3, %r11
    000006c0: 	imulq	%rdx, %r11
    000006c4: 	addq	%rbx, %r11
    000006c7: 	js	.Ltmp5213 # Offset: 1735
    000006cd: 	cmpq	$0x14, %r11
    000006d1: 	jle	.Ltmp5214 # Offset: 1745
    000006d7: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    000006e1: 	movq	%r11, %rax
    000006e4: 	imulq	%rdx
    000006e7: 	movq	%r11, %rax
    000006ea: 	sarq	$0x3f, %rax
    000006ee: 	addq	%r11, %rdx
    000006f1: 	sarq	$0x4, %rdx
    000006f5: 	subq	%rax, %rdx
.Ltmp5226:
    000006f8: 	leaq	(%rdx,%rdx,4), %rsi
    000006fc: 	leaq	(%r13,%rdx,8), %r13
    00000701: 	leaq	(%rdx,%rsi,4), %rdx
    00000705: 	movq	(%r13), %r8
    00000709: 	subq	%rdx, %r11
    0000070c: 	leaq	(%r11,%r11,2), %rdx
    00000710: 	leaq	0x1f8(%r8), %rax
    00000717: 	leaq	(%r8,%rdx,8), %rdx
.Ltmp5225:
    0000071b: 	movq	%r8, %xmm7
    00000720: 	movq	%rdx, %xmm5
    00000725: 	movq	%rax, %xmm6
    0000072a: 	punpcklqdq	%xmm7, %xmm5
    0000072e: 	movq	%r13, %xmm7
    00000733: 	leaq	0x8(%r10), %rbx
    00000737: 	addq	$0x8, %r13
    0000073b: 	punpcklqdq	%xmm7, %xmm6
    0000073f: 	movaps	%xmm5, 0x60(%rsp)
    00000744: 	movaps	%xmm6, 0x70(%rsp)
    00000749: 	cmpq	%r13, %rbx
    0000074c: 	jbe	.Ltmp5215 # Offset: 1868
    0000074e: 	nop # Size: 2
.Ltmp5216:
    00000750: 	movq	(%r13), %rdi
    00000754: 	movl	$0x1f8, %esi
    00000759: 	addq	$0x8, %r13
    0000075d: 	callq	_ZdlPvm@PLT # Offset: 1885
    00000762: 	cmpq	%r13, %rbx
    00000765: 	ja	.Ltmp5216 # Offset: 1893
    00000767: 	movq	0x30(%rbp), %rdi
    0000076b: 	movq	0x38(%rbp), %r9
    0000076f: 	movq	0x48(%rbp), %rcx
.Ltmp5215:
    00000773: 	movdqa	0x60(%rsp), %xmm7
    00000779: 	movdqa	0x70(%rsp), %xmm5
    0000077f: 	movups	%xmm7, 0x80(%rbp)
    00000786: 	movups	%xmm5, 0x90(%rbp)
    0000078d: 	cmpq	%r9, %rdi
    00000790: 	jne	.Ltmp5217 # Offset: 1936
.Ltmp5184:
    00000796: 	movq	-0x8(%rcx), %rax
    0000079a: 	movl	$0x200, %esi
    0000079f: 	movq	0x1f8(%rax), %rbx
    000007a6: 	callq	_ZdlPvm@PLT # Offset: 1958
    000007ab: 	movq	0x48(%rbp), %rdx
    000007af: 	movq	-0x8(%rdx), %rax
    000007b3: 	subq	$0x8, %rdx
    000007b7: 	movq	%rdx, %xmm3
    000007bc: 	leaq	0x1f8(%rax), %rsi
    000007c3: 	movq	%rax, %xmm2
    000007c8: 	addq	$0x200, %rax
    000007ce: 	movq	%rsi, %xmm0
    000007d3: 	punpcklqdq	%xmm2, %xmm0
    000007d7: 	movups	%xmm0, 0x30(%rbp)
    000007db: 	movq	%rax, %xmm0
    000007e0: 	punpcklqdq	%xmm3, %xmm0
    000007e4: 	movups	%xmm0, 0x40(%rbp)
    000007e8: 	jmp	.Ltmp5218 # Offset: 2024
.Ltmp5188:
    000007ed: 	addl	$0x1, 0xa0(%rbp)
    000007f4: 	movq	%rax, 0xa8(%rbp)
    000007fb: 	cmpq	%r15, (%rsp)
    000007ff: 	jne	.Ltmp5189 # Offset: 2047
    00000805: 	jmp	.Ltmp5182 # Offset: 2053
    0000080a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5185:
    00000810: 	movabsq	$-0x79e79e79e79e79e7, %rax
    0000081a: 	movq	%rcx, %rdi
    0000081d: 	notq	%rdi
    00000820: 	mulq	%rdi
    00000823: 	subq	%rdx, %rdi
    00000826: 	shrq	%rdi
    00000829: 	leaq	(%rdx,%rdi), %rax
    0000082d: 	shrq	$0x4, %rax
    00000831: 	notq	%rax
    00000834: 	jmp	.Ltmp5219 # Offset: 2100
.Ltmp5212:
    00000839: 	movq	0x28(%rsp), %rdi
    0000083e: 	movl	$0xaa, %esi
    00000843: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2115
    00000848: 	movq	0x30(%rbp), %rdi
    0000084c: 	jmp	.Ltmp5220 # Offset: 2124
    0000084e: 	nop # Size: 2
.Ltmp5222:
    00000850: 	movq	%rbx, (%rdi)
    00000853: 	addq	$0x8, %rdi
    00000857: 	movq	%rdi, 0x30(%rbp)
    0000085b: 	cmpq	%rbx, %r12
    0000085e: 	je	.Ltmp5221 # Offset: 2142
.Ltmp5220:
    00000860: 	movq	0x40(%rbp), %rax
    00000864: 	subq	$0x1, %rbx
    00000868: 	movq	%rbx, 0x88(%rsp)
    00000870: 	subq	$0x8, %rax
    00000874: 	cmpq	%rax, %rdi
    00000877: 	jne	.Ltmp5222 # Offset: 2167
    00000879: 	movq	%r14, %rsi
    0000087c: 	movq	%rbp, %rdi
    0000087f: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2175
    00000884: 	movq	0x30(%rbp), %rdi
    00000888: 	cmpq	%rbx, %r12
    0000088b: 	jne	.Ltmp5220 # Offset: 2187
.Ltmp5221:
    0000088d: 	movq	0x38(%rbp), %r9
    00000891: 	movq	0x48(%rbp), %rcx
    00000895: 	jmp	.Ltmp5223 # Offset: 2197
.Ltmp5179:
    0000089a: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp5180:
    000008a3: 	movq	$0x0, 0xa0(%rsp)
    000008af: 	pxor	%xmm0, %xmm0
    000008b3: 	movaps	%xmm0, 0x90(%rsp)
    000008bb: 	jmp	.Ltmp5224 # Offset: 2235
.Ltmp5214:
    000008c0: 	leaq	(%rbx,%rbx,2), %rdx
    000008c4: 	leaq	(%rsi,%rdx,8), %rdx
    000008c8: 	jmp	.Ltmp5225 # Offset: 2248
.Ltmp5213:
    000008cd: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000008d7: 	movq	%r11, %rsi
    000008da: 	notq	%rsi
    000008dd: 	mulq	%rsi
    000008e0: 	movq	%rsi, %rax
    000008e3: 	subq	%rdx, %rax
    000008e6: 	shrq	%rax
    000008e9: 	addq	%rax, %rdx
    000008ec: 	shrq	$0x4, %rdx
    000008f0: 	notq	%rdx
    000008f3: 	jmp	.Ltmp5226 # Offset: 2291
.Ltmp5207:
    000008f8: 	movq	0xa8(%rsp), %rax
    00000900: 	subq	%fs:0x28, %rax
    00000909: 	jne	.Ltmp5208 # Offset: 2313
    0000090b: 	addq	$0xb8, %rsp
    00000912: 	popq	%rbx
    00000913: 	popq	%rbp
    00000914: 	popq	%r12
    00000916: 	popq	%r13
    00000918: 	popq	%r14
    0000091a: 	popq	%r15
    0000091c: 	retq # Offset: 2332
.Ltmp5206:
    0000091d: 	movq	-0x8(%rdx), %rax
    00000921: 	addq	$0x200, %rax
    00000927: 	jmp	.Ltmp5227 # Offset: 2343
.Ltmp5181:
    0000092c: 	pxor	%xmm6, %xmm6
    00000930: 	movsd	%xmm6, 0x38(%rsp)
    00000936: 	jmp	.Ltmp5228 # Offset: 2358
.Ltmp5208:
    0000093b: 	callq	__stack_chk_fail@PLT # Offset: 2363
    00000940: 	endbr64
    00000944: 	movq	%rax, %rbx
    00000947: 	jmp	.Ltmp5229 # Offset: 2375
    00000949: 	endbr64
    0000094d: 	movq	%rax, %rbx
    00000950: 	jmp	.Ltmp5230 # Offset: 2384
.Ltmp5233:
    00000952: 	callq	__cxa_end_catch@PLT # Offset: 2386
.Ltmp5230:
    00000957: 	movq	%rbp, %rdi
    0000095a: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2394
.Ltmp5229:
    0000095f: 	movq	%rbp, %rdi
    00000962: 	movl	$0xb8, %esi
    00000967: 	movq	%rbx, %rbp
    0000096a: 	callq	_ZdlPvm@PLT # Offset: 2410
.Ltmp5232:
    0000096f: 	movq	0x90(%rsp), %rdi
    00000977: 	movq	0xa0(%rsp), %rsi
    0000097f: 	subq	%rdi, %rsi
    00000982: 	testq	%rdi, %rdi
    00000985: 	je	.Ltmp5231 # Offset: 2437
    00000987: 	callq	_ZdlPvm@PLT # Offset: 2439
.Ltmp5231:
    0000098c: 	movq	%rbp, %rdi
    0000098f: 	callq	_Unwind_Resume@PLT # Offset: 2447
    00000994: 	endbr64
    00000998: 	movq	%rax, %rbp
    0000099b: 	jmp	.Ltmp5232 # Offset: 2459
    0000099d: 	endbr64
    000009a1: 	movq	%rax, %rdi
    000009a4: 	callq	__cxa_begin_catch@PLT # Offset: 2468
    000009a9: 	callq	__cxa_rethrow@PLT # Offset: 2473
    000009ae: 	endbr64
    000009b2: 	movq	%rax, %r12
    000009b5: 	callq	__cxa_end_catch@PLT # Offset: 2485
    000009ba: 	movq	%r12, %rdi
    000009bd: 	callq	__cxa_begin_catch@PLT # Offset: 2493
    000009c2: 	movq	0x58(%rbp), %rax
    000009c6: 	movq	0x50(%rbp), %rdi
    000009ca: 	leaq	(,%rax,8), %rsi
    000009d2: 	callq	_ZdlPvm@PLT # Offset: 2514
    000009d7: 	movq	$0x0, 0x50(%rbp)
    000009df: 	movq	$0x0, 0x58(%rbp)
    000009e7: 	callq	__cxa_rethrow@PLT # Offset: 2535
    000009ec: 	endbr64
    000009f0: 	movq	%rax, %rbx
    000009f3: 	jmp	.Ltmp5233 # Offset: 2547
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_clearall_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_popfrontId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 309
  State       : disassembled
  Address     : 0x36400
  Size        : 0xa20
  MaxSize     : 0xa20
  Offset      : 0x36400
  Section     : .text
  Orc Section : .local.text._Z13test_popfrontId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0308:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movq	%rsi, (%rsp)
    00000019: 	subq	%rdi, %rsi
    0000001c: 	movq	%rdx, 0x50(%rsp)
    00000021: 	xorl	%edx, %edx
    00000023: 	movq	%rdi, 0x8(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0xa8(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	movabsq	$0x500000000, %rax
    00000045: 	divq	%rsi
    00000048: 	movq	%rax, 0x18(%rsp)
    0000004d: 	cmpq	$0x3e8, %rax
    00000053: 	ja	.Ltmp5234 # Offset: 83
    00000059: 	cmpq	$0x3, %rax
    0000005d: 	ja	.Ltmp5235 # Offset: 93
    00000063: 	movq	$0x0, 0xa0(%rsp)
    0000006f: 	pxor	%xmm0, %xmm0
    00000073: 	movq	$0x4, 0x18(%rsp)
    0000007c: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5283:
    00000084: 	movq	0x18(%rsp), %rbx
    00000089: 	leaq	0x90(%rsp), %rdi
    00000091: 	movq	%rbx, %rsi
    00000094: 	callq	_ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 148
    00000099: 	movq	0x90(%rsp), %rcx
    000000a1: 	movl	iterations(%rip), %eax
    000000a7: 	movq	%rcx, 0x30(%rsp)
    000000ac: 	testl	%eax, %eax
    000000ae: 	jle	.Ltmp5236 # Offset: 174
    000000b4: 	leaq	0x8(%rcx), %rsi
    000000b8: 	movl	%ebx, 0x44(%rsp)
    000000bc: 	pxor	%xmm6, %xmm6
    000000c0: 	leaq	0x88(%rsp), %r13
    000000c8: 	movl	$0x0, 0x40(%rsp)
    000000d0: 	movq	%rsi, 0x58(%rsp)
    000000d5: 	movsd	%xmm6, 0x38(%rsp)
.Ltmp5275:
    000000db: 	movslq	0x40(%rsp), %rdx
    000000e0: 	movslq	%eax, %rcx
    000000e3: 	movq	%rdx, %rsi
    000000e6: 	addq	0x18(%rsp), %rdx
    000000eb: 	subl	%esi, %eax
    000000ed: 	cmpq	%rcx, %rdx
    000000f0: 	cmovbl	0x44(%rsp), %eax
    000000f5: 	movq	0x58(%rsp), %rcx
    000000fa: 	movq	0x30(%rsp), %rsi
    000000ff: 	subl	$0x1, %eax
    00000102: 	leaq	(%rcx,%rax,8), %rax
    00000106: 	movq	%rsi, 0x48(%rsp)
    0000010b: 	movq	%rax, 0x10(%rsp)
    00000110: 	movq	%rsi, 0x20(%rsp)
.Ltmp5245:
    00000115: 	movl	$0xb8, %edi
    0000011a: 	callq	_Znwm@PLT # Offset: 282
    0000011f: 	movq	$0x0, (%rax)
    00000126: 	pxor	%xmm0, %xmm0
    0000012a: 	xorl	%esi, %esi
    0000012c: 	movq	%rax, %rdi
    0000012f: 	movq	$0x0, 0x8(%rax)
    00000137: 	movq	%rax, %rbp
    0000013a: 	movups	%xmm0, 0x10(%rax)
    0000013e: 	movups	%xmm0, 0x20(%rax)
    00000142: 	movups	%xmm0, 0x30(%rax)
    00000146: 	movups	%xmm0, 0x40(%rax)
    0000014a: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 330
    0000014f: 	movq	$0x0, 0x50(%rbp)
    00000157: 	pxor	%xmm0, %xmm0
    0000015b: 	movl	$0x40, %edi
    00000160: 	movq	$0x8, 0x58(%rbp)
    00000168: 	movups	%xmm0, 0x60(%rbp)
    0000016c: 	movups	%xmm0, 0x70(%rbp)
    00000170: 	movups	%xmm0, 0x80(%rbp)
    00000177: 	movups	%xmm0, 0x90(%rbp)
    0000017e: 	callq	_Znwm@PLT # Offset: 382
    00000183: 	movq	0x58(%rbp), %rdx
    00000187: 	movq	%rax, 0x50(%rbp)
    0000018b: 	movl	$0x1f8, %edi
    00000190: 	leaq	-0x4(,%rdx,4), %rdx
    00000198: 	andq	$-0x8, %rdx
    0000019c: 	leaq	(%rax,%rdx), %r14
    000001a0: 	callq	_Znwm@PLT # Offset: 416
    000001a5: 	movq	%rax, %rsi
    000001a8: 	movq	%rax, %xmm1
    000001ad: 	movq	%rax, (%r14)
    000001b0: 	movq	%r14, %xmm4
    000001b5: 	leaq	0x1f8(%rax), %rax
    000001bc: 	punpcklqdq	%xmm1, %xmm1
    000001c0: 	movq	%rsi, %r8
    000001c3: 	movl	$0x0, 0xa0(%rbp)
    000001cd: 	movq	%rax, %xmm0
    000001d2: 	leaq	0x50(%rbp), %rax
    000001d6: 	movups	%xmm1, 0x60(%rbp)
    000001da: 	punpcklqdq	%xmm4, %xmm0
    000001de: 	movq	%rax, 0x28(%rsp)
    000001e3: 	movq	0x8(%rsp), %rax
    000001e8: 	movups	%xmm0, 0x70(%rbp)
    000001ec: 	movups	%xmm0, 0x90(%rbp)
    000001f3: 	pxor	%xmm0, %xmm0
    000001f7: 	movq	%rax, %r15
    000001fa: 	movups	%xmm1, 0x80(%rbp)
    00000201: 	movups	%xmm0, 0xa8(%rbp)
    00000208: 	cmpq	%rax, (%rsp)
    0000020c: 	je	.Ltmp5237 # Offset: 524
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5244:
    00000218: 	movq	0x48(%rbp), %rcx
    0000021c: 	movq	0x30(%rbp), %rdi
    00000220: 	addq	$0x8, %r15
    00000224: 	movq	0x38(%rbp), %r9
    00000228: 	movq	%rcx, %rax
    0000022b: 	subq	0x28(%rbp), %rax
    0000022f: 	movq	%rdi, %rdx
    00000232: 	sarq	$0x3, %rax
    00000236: 	cmpq	$0x1, %rcx
    0000023a: 	adcq	$-0x1, %rax
    0000023e: 	subq	%r9, %rdx
    00000241: 	sarq	$0x3, %rdx
    00000245: 	shlq	$0x6, %rax
    00000249: 	addq	%rdx, %rax
    0000024c: 	movq	0x20(%rbp), %rdx
    00000250: 	subq	0x10(%rbp), %rdx
    00000254: 	sarq	$0x3, %rdx
    00000258: 	addq	%rdx, %rax
    0000025b: 	je	.Ltmp5238 # Offset: 603
.Ltmp5282:
    00000261: 	cmpq	%r9, %rdi
    00000264: 	je	.Ltmp5239 # Offset: 612
.Ltmp5263:
    0000026a: 	movq	-0x8(%rdi), %rbx
    0000026e: 	subq	$0x8, %rdi
    00000272: 	movq	%rdi, 0x30(%rbp)
.Ltmp5264:
    00000276: 	movq	0x60(%rbp), %rsi
    0000027a: 	movq	0x68(%rbp), %r8
    0000027e: 	movabsq	$-0x5555555555555555, %rax
    00000288: 	movq	0x78(%rbp), %r14
    0000028c: 	movq	%rsi, %rcx
    0000028f: 	subq	%r8, %rcx
    00000292: 	sarq	$0x3, %rcx
    00000296: 	imulq	%rax, %rcx
    0000029a: 	addq	%rbx, %rcx
    0000029d: 	js	.Ltmp5240 # Offset: 669
    000002a3: 	cmpq	$0x14, %rcx
    000002a7: 	jg	.Ltmp5241 # Offset: 679
    000002ad: 	leaq	(%rbx,%rbx,2), %rax
    000002b1: 	leaq	(%rsi,%rax,8), %rax
    000002b5: 	movq	%rbx, 0x10(%rax)
.Ltmp5256:
    000002b9: 	movsd	-0x8(%r15), %xmm0
    000002bf: 	movq	0xb0(%rbp), %rdx
    000002c6: 	movq	$0x0, 0x8(%rax)
    000002ce: 	movsd	%xmm0, (%rax)
    000002d2: 	testq	%rdx, %rdx
    000002d5: 	je	.Ltmp5242 # Offset: 725
    000002d7: 	movq	%rax, 0x8(%rdx)
.Ltmp5242:
    000002db: 	cmpq	$0x0, 0xa8(%rbp)
    000002e3: 	movq	%rax, 0xb0(%rbp)
    000002ea: 	je	.Ltmp5243 # Offset: 746
    000002f0: 	addl	$0x1, 0xa0(%rbp)
    000002f7: 	cmpq	%r15, (%rsp)
    000002fb: 	jne	.Ltmp5244 # Offset: 763
.Ltmp5237:
    00000301: 	movq	0x20(%rsp), %rax
    00000306: 	movq	%rbp, (%rax)
    00000309: 	addq	$0x8, %rax
    0000030d: 	movq	%rax, 0x20(%rsp)
    00000312: 	cmpq	%rax, 0x10(%rsp)
    00000317: 	jne	.Ltmp5245 # Offset: 791
    0000031d: 	callq	clock@PLT # Offset: 797
    00000322: 	movq	0x30(%rsp), %r15
    00000327: 	movabsq	$-0x5555555555555555, %r14
    00000331: 	movq	%rax, start_time(%rip)
.Ltmp5266:
    00000338: 	movq	0x8(%rsp), %rax
    0000033d: 	movq	(%r15), %rbx
    00000340: 	movq	%rax, %r12
    00000343: 	cmpq	%rax, (%rsp)
    00000347: 	jne	.Ltmp5246 # Offset: 839
    00000349: 	jmp	.Ltmp5247 # Offset: 841
    0000034e: 	nop # Size: 2
.Ltmp5252:
    00000350: 	cmpq	$0x14, %rcx
    00000354: 	jg	.Ltmp5248 # Offset: 852
    0000035a: 	leaq	(%rax,%rax,2), %rax
    0000035e: 	leaq	(%rdx,%rax,8), %rax
.Ltmp5253:
    00000362: 	movq	$-0x1, 0x10(%rax)
    0000036a: 	addq	$0x8, %r12
    0000036e: 	subl	$0x1, 0xa0(%rbx)
    00000375: 	cmpq	%r12, (%rsp)
    00000379: 	je	.Ltmp5247 # Offset: 889
.Ltmp5246:
    0000037f: 	movq	0xa8(%rbx), %rbp
    00000386: 	xorl	%eax, %eax
    00000388: 	testq	%rbp, %rbp
    0000038b: 	je	.Ltmp5249 # Offset: 907
    0000038d: 	movq	0x8(%rbp), %rax
.Ltmp5249:
    00000391: 	cmpq	0xb0(%rbx), %rbp
    00000398: 	je	.Ltmp5250 # Offset: 920
.Ltmp5255:
    0000039e: 	movq	0x40(%rbx), %rsi
    000003a2: 	movq	%rax, 0xa8(%rbx)
    000003a9: 	movq	0x30(%rbx), %rax
    000003ad: 	leaq	-0x8(%rsi), %rdx
    000003b1: 	cmpq	%rdx, %rax
    000003b4: 	je	.Ltmp5251 # Offset: 948
    000003ba: 	movq	0x10(%rbp), %rdx
    000003be: 	addq	$0x8, %rax
    000003c2: 	movq	%rdx, -0x8(%rax)
    000003c6: 	movq	%rax, 0x30(%rbx)
.Ltmp5257:
    000003ca: 	movq	0x60(%rbx), %rdx
    000003ce: 	movq	0x10(%rbp), %rax
    000003d2: 	movq	0x78(%rbx), %rsi
    000003d6: 	movq	%rdx, %rcx
    000003d9: 	subq	0x68(%rbx), %rcx
    000003dd: 	sarq	$0x3, %rcx
    000003e1: 	imulq	%r14, %rcx
    000003e5: 	addq	%rax, %rcx
    000003e8: 	jns	.Ltmp5252 # Offset: 1000
    000003ee: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000003f8: 	movq	%rcx, %rdi
    000003fb: 	notq	%rdi
    000003fe: 	mulq	%rdi
    00000401: 	subq	%rdx, %rdi
    00000404: 	shrq	%rdi
    00000407: 	leaq	(%rdx,%rdi), %rax
    0000040b: 	shrq	$0x4, %rax
    0000040f: 	notq	%rax
.Ltmp5254:
    00000412: 	leaq	(%rax,%rax,4), %rdx
    00000416: 	leaq	(%rax,%rdx,4), %rdx
    0000041a: 	movq	(%rsi,%rax,8), %rax
    0000041e: 	subq	%rdx, %rcx
    00000421: 	leaq	(%rcx,%rcx,2), %rdx
    00000425: 	leaq	(%rax,%rdx,8), %rax
    00000429: 	jmp	.Ltmp5253 # Offset: 1065
    0000042e: 	nop # Size: 2
.Ltmp5248:
    00000430: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rax
    0000043a: 	imulq	%rcx
    0000043d: 	leaq	(%rdx,%rcx), %rax
    00000441: 	movq	%rcx, %rdx
    00000444: 	sarq	$0x4, %rax
    00000448: 	sarq	$0x3f, %rdx
    0000044c: 	subq	%rdx, %rax
    0000044f: 	jmp	.Ltmp5254 # Offset: 1103
    00000451: 	nopl	(%rax) # Size: 7
.Ltmp5250:
    00000458: 	movq	$0x0, 0xb0(%rbx)
    00000463: 	jmp	.Ltmp5255 # Offset: 1123
.Ltmp5241:
    00000468: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000472: 	movq	%rcx, %rax
    00000475: 	imulq	%rdx
    00000478: 	leaq	(%rdx,%rcx), %rax
    0000047c: 	movq	%rcx, %rdx
    0000047f: 	sarq	$0x4, %rax
    00000483: 	sarq	$0x3f, %rdx
    00000487: 	subq	%rdx, %rax
.Ltmp5265:
    0000048a: 	leaq	(%rax,%rax,4), %rdx
    0000048e: 	leaq	(%rax,%rdx,4), %rdx
    00000492: 	movq	(%r14,%rax,8), %rax
    00000496: 	subq	%rdx, %rcx
    00000499: 	leaq	(%rcx,%rcx,2), %rdx
    0000049d: 	leaq	(%rax,%rdx,8), %rax
    000004a1: 	movq	%rbx, 0x10(%rax)
    000004a5: 	jmp	.Ltmp5256 # Offset: 1189
    000004aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5251:
    000004b0: 	leaq	0x10(%rbp), %rsi
    000004b4: 	movq	%rbx, %rdi
    000004b7: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 1207
    000004bc: 	jmp	.Ltmp5257 # Offset: 1212
.Ltmp5238:
    000004c1: 	movq	0x98(%rbp), %r10
    000004c8: 	movq	0x80(%rbp), %r12
    000004cf: 	movabsq	$-0x5555555555555555, %rbx
    000004d9: 	movq	0x70(%rbp), %rax
    000004dd: 	movq	%r10, %rdx
    000004e0: 	subq	%r14, %rdx
    000004e3: 	sarq	$0x3, %rdx
    000004e7: 	cmpq	$0x1, %r10
    000004eb: 	adcq	$-0x1, %rdx
    000004ef: 	subq	0x88(%rbp), %r12
    000004f6: 	sarq	$0x3, %r12
    000004fa: 	leaq	(%rdx,%rdx,4), %r11
    000004fe: 	imulq	%rbx, %r12
    00000502: 	leaq	(%rdx,%r11,4), %rdx
    00000506: 	addq	%rdx, %r12
    00000509: 	movq	%rax, %rdx
    0000050c: 	subq	%rsi, %rdx
    0000050f: 	sarq	$0x3, %rdx
    00000513: 	imulq	%rbx, %rdx
    00000517: 	addq	%rdx, %r12
    0000051a: 	leaq	0xaa(%r12), %rbx
    00000522: 	cmpq	%rbx, %r12
    00000525: 	jb	.Ltmp5258 # Offset: 1317
    0000052b: 	movabsq	$-0x5555555555555555, %rdx
    00000535: 	movq	%rsi, %r11
    00000538: 	subq	%r8, %r11
    0000053b: 	sarq	$0x3, %r11
    0000053f: 	imulq	%rdx, %r11
    00000543: 	addq	%rbx, %r11
    00000546: 	js	.Ltmp5259 # Offset: 1350
    0000054c: 	cmpq	$0x14, %r11
    00000550: 	jle	.Ltmp5260 # Offset: 1360
    00000556: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000560: 	movq	%r11, %rax
    00000563: 	imulq	%rdx
    00000566: 	movq	%r11, %rax
    00000569: 	sarq	$0x3f, %rax
    0000056d: 	addq	%r11, %rdx
    00000570: 	sarq	$0x4, %rdx
    00000574: 	subq	%rax, %rdx
.Ltmp5285:
    00000577: 	leaq	(%rdx,%rdx,4), %rsi
    0000057b: 	leaq	(%r14,%rdx,8), %r14
    0000057f: 	leaq	(%rdx,%rsi,4), %rdx
    00000583: 	movq	(%r14), %r8
    00000586: 	subq	%rdx, %r11
    00000589: 	leaq	(%r11,%r11,2), %rdx
    0000058d: 	leaq	0x1f8(%r8), %rax
    00000594: 	leaq	(%r8,%rdx,8), %rdx
.Ltmp5284:
    00000598: 	movq	%r8, %xmm7
    0000059d: 	movq	%rdx, %xmm5
    000005a2: 	movq	%rax, %xmm6
    000005a7: 	punpcklqdq	%xmm7, %xmm5
    000005ab: 	movq	%r14, %xmm7
    000005b0: 	leaq	0x8(%r10), %rbx
    000005b4: 	addq	$0x8, %r14
    000005b8: 	punpcklqdq	%xmm7, %xmm6
    000005bc: 	movaps	%xmm5, 0x60(%rsp)
    000005c1: 	movaps	%xmm6, 0x70(%rsp)
    000005c6: 	cmpq	%r14, %rbx
    000005c9: 	jbe	.Ltmp5261 # Offset: 1481
    000005cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5262:
    000005d0: 	movq	(%r14), %rdi
    000005d3: 	movl	$0x1f8, %esi
    000005d8: 	addq	$0x8, %r14
    000005dc: 	callq	_ZdlPvm@PLT # Offset: 1500
    000005e1: 	cmpq	%r14, %rbx
    000005e4: 	ja	.Ltmp5262 # Offset: 1508
    000005e6: 	movq	0x30(%rbp), %rdi
    000005ea: 	movq	0x38(%rbp), %r9
    000005ee: 	movq	0x48(%rbp), %rcx
.Ltmp5261:
    000005f2: 	movdqa	0x60(%rsp), %xmm7
    000005f8: 	movdqa	0x70(%rsp), %xmm5
    000005fe: 	movups	%xmm7, 0x80(%rbp)
    00000605: 	movups	%xmm5, 0x90(%rbp)
    0000060c: 	cmpq	%r9, %rdi
    0000060f: 	jne	.Ltmp5263 # Offset: 1551
.Ltmp5239:
    00000615: 	movq	-0x8(%rcx), %rax
    00000619: 	movl	$0x200, %esi
    0000061e: 	movq	0x1f8(%rax), %rbx
    00000625: 	callq	_ZdlPvm@PLT # Offset: 1573
    0000062a: 	movq	0x48(%rbp), %rdx
    0000062e: 	movq	-0x8(%rdx), %rax
    00000632: 	subq	$0x8, %rdx
    00000636: 	movq	%rdx, %xmm3
    0000063b: 	leaq	0x1f8(%rax), %rsi
    00000642: 	movq	%rax, %xmm2
    00000647: 	addq	$0x200, %rax
    0000064d: 	movq	%rsi, %xmm0
    00000652: 	punpcklqdq	%xmm2, %xmm0
    00000656: 	movups	%xmm0, 0x30(%rbp)
    0000065a: 	movq	%rax, %xmm0
    0000065f: 	punpcklqdq	%xmm3, %xmm0
    00000663: 	movups	%xmm0, 0x40(%rbp)
    00000667: 	jmp	.Ltmp5264 # Offset: 1639
.Ltmp5243:
    0000066c: 	addl	$0x1, 0xa0(%rbp)
    00000673: 	movq	%rax, 0xa8(%rbp)
    0000067a: 	cmpq	%r15, (%rsp)
    0000067e: 	jne	.Ltmp5244 # Offset: 1662
    00000684: 	jmp	.Ltmp5237 # Offset: 1668
    00000689: 	nopl	(%rax) # Size: 7
.Ltmp5240:
    00000690: 	movabsq	$-0x79e79e79e79e79e7, %rax
    0000069a: 	movq	%rcx, %rdi
    0000069d: 	notq	%rdi
    000006a0: 	mulq	%rdi
    000006a3: 	subq	%rdx, %rdi
    000006a6: 	shrq	%rdi
    000006a9: 	leaq	(%rdx,%rdi), %rax
    000006ad: 	shrq	$0x4, %rax
    000006b1: 	notq	%rax
    000006b4: 	jmp	.Ltmp5265 # Offset: 1716
.Ltmp5247:
    000006b9: 	addq	$0x8, %r15
    000006bd: 	cmpq	%r15, 0x10(%rsp)
    000006c2: 	jne	.Ltmp5266 # Offset: 1730
    000006c8: 	callq	clock@PLT # Offset: 1736
    000006cd: 	pxor	%xmm0, %xmm0
    000006d1: 	movq	0x10(%rsp), %r14
    000006d6: 	movq	0x48(%rsp), %r12
    000006db: 	movq	%rax, end_time(%rip)
    000006e2: 	subq	start_time(%rip), %rax
    000006e9: 	cvtsi2sd	%rax, %xmm0
    000006ee: 	divsd	DATAat0x53788(%rip), %xmm0
    000006f6: 	addsd	0x38(%rsp), %xmm0
    000006fc: 	movsd	%xmm0, 0x38(%rsp)
.Ltmp5274:
    00000702: 	movq	(%r12), %rbp
    00000706: 	testq	%rbp, %rbp
    00000709: 	je	.Ltmp5267 # Offset: 1801
    0000070f: 	movq	0x50(%rbp), %rdi
    00000713: 	testq	%rdi, %rdi
    00000716: 	je	.Ltmp5268 # Offset: 1814
    00000718: 	movq	0x98(%rbp), %rax
    0000071f: 	movq	0x78(%rbp), %rbx
    00000723: 	leaq	0x8(%rax), %r15
    00000727: 	cmpq	%rbx, %r15
    0000072a: 	jbe	.Ltmp5269 # Offset: 1834
    0000072c: 	nopl	(%rax) # Size: 4
.Ltmp5270:
    00000730: 	movq	(%rbx), %rdi
    00000733: 	movl	$0x1f8, %esi
    00000738: 	addq	$0x8, %rbx
    0000073c: 	callq	_ZdlPvm@PLT # Offset: 1852
    00000741: 	cmpq	%rbx, %r15
    00000744: 	ja	.Ltmp5270 # Offset: 1860
    00000746: 	movq	0x50(%rbp), %rdi
.Ltmp5269:
    0000074a: 	movq	0x58(%rbp), %rax
    0000074e: 	leaq	(,%rax,8), %rsi
    00000756: 	callq	_ZdlPvm@PLT # Offset: 1878
.Ltmp5268:
    0000075b: 	movq	(%rbp), %rdi
    0000075f: 	testq	%rdi, %rdi
    00000762: 	je	.Ltmp5271 # Offset: 1890
    00000764: 	movq	0x48(%rbp), %rax
    00000768: 	movq	0x28(%rbp), %rbx
    0000076c: 	leaq	0x8(%rax), %r15
    00000770: 	cmpq	%rbx, %r15
    00000773: 	jbe	.Ltmp5272 # Offset: 1907
    00000775: 	nopl	(%rax) # Size: 3
.Ltmp5273:
    00000778: 	movq	(%rbx), %rdi
    0000077b: 	movl	$0x200, %esi
    00000780: 	addq	$0x8, %rbx
    00000784: 	callq	_ZdlPvm@PLT # Offset: 1924
    00000789: 	cmpq	%rbx, %r15
    0000078c: 	ja	.Ltmp5273 # Offset: 1932
    0000078e: 	movq	(%rbp), %rdi
.Ltmp5272:
    00000792: 	movq	0x8(%rbp), %rax
    00000796: 	leaq	(,%rax,8), %rsi
    0000079e: 	callq	_ZdlPvm@PLT # Offset: 1950
.Ltmp5271:
    000007a3: 	movl	$0xb8, %esi
    000007a8: 	movq	%rbp, %rdi
    000007ab: 	callq	_ZdlPvm@PLT # Offset: 1963
.Ltmp5267:
    000007b0: 	movq	$0x0, (%r12)
    000007b8: 	addq	$0x8, %r12
    000007bc: 	cmpq	%r12, %r14
    000007bf: 	jne	.Ltmp5274 # Offset: 1983
    000007c5: 	movl	0x18(%rsp), %esi
    000007c9: 	movl	iterations(%rip), %eax
    000007cf: 	addl	%esi, 0x40(%rsp)
    000007d3: 	movl	0x40(%rsp), %esi
    000007d7: 	cmpl	%esi, %eax
    000007d9: 	jg	.Ltmp5275 # Offset: 2009
.Ltmp5287:
    000007df: 	movq	0x50(%rsp), %rdi
    000007e4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2020
    000007e9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007f0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007fe: 	je	.Ltmp5276 # Offset: 2046
.Ltmp5286:
    00000804: 	movq	-0x20(%rax), %rdi
    00000808: 	movsd	0x38(%rsp), %xmm0
    0000080e: 	callq	_Z13record_resultdPKc # Offset: 2062
    00000813: 	cmpq	$0x0, 0x30(%rsp)
    00000819: 	je	.Ltmp5277 # Offset: 2073
    0000081f: 	movq	0xa8(%rsp), %rax
    00000827: 	subq	%fs:0x28, %rax
    00000830: 	jne	.Ltmp5278 # Offset: 2096
    00000836: 	movq	0xa0(%rsp), %rsi
    0000083e: 	movq	0x30(%rsp), %rdi
    00000843: 	addq	$0xb8, %rsp
    0000084a: 	popq	%rbx
    0000084b: 	popq	%rbp
    0000084c: 	subq	%rdi, %rsi
    0000084f: 	popq	%r12
    00000851: 	popq	%r13
    00000853: 	popq	%r14
    00000855: 	popq	%r15
    00000857: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 2135
    0000085c: 	nopl	(%rax) # Size: 4
.Ltmp5258:
    00000860: 	movq	0x28(%rsp), %rdi
    00000865: 	movl	$0xaa, %esi
    0000086a: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2154
    0000086f: 	movq	0x30(%rbp), %rdi
    00000873: 	jmp	.Ltmp5279 # Offset: 2163
    00000875: 	nopl	(%rax) # Size: 3
.Ltmp5281:
    00000878: 	movq	%rbx, (%rdi)
    0000087b: 	addq	$0x8, %rdi
    0000087f: 	movq	%rdi, 0x30(%rbp)
    00000883: 	cmpq	%rbx, %r12
    00000886: 	je	.Ltmp5280 # Offset: 2182
.Ltmp5279:
    00000888: 	movq	0x40(%rbp), %rax
    0000088c: 	subq	$0x1, %rbx
    00000890: 	movq	%rbx, 0x88(%rsp)
    00000898: 	subq	$0x8, %rax
    0000089c: 	cmpq	%rax, %rdi
    0000089f: 	jne	.Ltmp5281 # Offset: 2207
    000008a1: 	movq	%r13, %rsi
    000008a4: 	movq	%rbp, %rdi
    000008a7: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2215
    000008ac: 	movq	0x30(%rbp), %rdi
    000008b0: 	cmpq	%rbx, %r12
    000008b3: 	jne	.Ltmp5279 # Offset: 2227
.Ltmp5280:
    000008b5: 	movq	0x38(%rbp), %r9
    000008b9: 	movq	0x48(%rbp), %rcx
    000008bd: 	jmp	.Ltmp5282 # Offset: 2237
.Ltmp5234:
    000008c2: 	movq	$0x3e8, 0x18(%rsp)
.Ltmp5235:
    000008cb: 	movq	$0x0, 0xa0(%rsp)
    000008d7: 	pxor	%xmm0, %xmm0
    000008db: 	movaps	%xmm0, 0x90(%rsp)
    000008e3: 	jmp	.Ltmp5283 # Offset: 2275
.Ltmp5260:
    000008e8: 	leaq	(%rbx,%rbx,2), %rdx
    000008ec: 	leaq	(%rsi,%rdx,8), %rdx
    000008f0: 	jmp	.Ltmp5284 # Offset: 2288
.Ltmp5259:
    000008f5: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000008ff: 	movq	%r11, %rsi
    00000902: 	notq	%rsi
    00000905: 	mulq	%rsi
    00000908: 	movq	%rsi, %rax
    0000090b: 	subq	%rdx, %rax
    0000090e: 	shrq	%rax
    00000911: 	addq	%rax, %rdx
    00000914: 	shrq	$0x4, %rdx
    00000918: 	notq	%rdx
    0000091b: 	jmp	.Ltmp5285 # Offset: 2331
.Ltmp5277:
    00000920: 	movq	0xa8(%rsp), %rax
    00000928: 	subq	%fs:0x28, %rax
    00000931: 	jne	.Ltmp5278 # Offset: 2353
    00000933: 	addq	$0xb8, %rsp
    0000093a: 	popq	%rbx
    0000093b: 	popq	%rbp
    0000093c: 	popq	%r12
    0000093e: 	popq	%r13
    00000940: 	popq	%r14
    00000942: 	popq	%r15
    00000944: 	retq # Offset: 2372
.Ltmp5276:
    00000945: 	movq	-0x8(%rdx), %rax
    00000949: 	addq	$0x200, %rax
    0000094f: 	jmp	.Ltmp5286 # Offset: 2383
.Ltmp5236:
    00000954: 	pxor	%xmm6, %xmm6
    00000958: 	movsd	%xmm6, 0x38(%rsp)
    0000095e: 	jmp	.Ltmp5287 # Offset: 2398
.Ltmp5278:
    00000963: 	callq	__stack_chk_fail@PLT # Offset: 2403
    00000968: 	endbr64
    0000096c: 	movq	%rax, %rbx
    0000096f: 	jmp	.Ltmp5288 # Offset: 2415
    00000971: 	endbr64
    00000975: 	movq	%rax, %rbx
    00000978: 	jmp	.Ltmp5289 # Offset: 2424
.Ltmp5292:
    0000097a: 	callq	__cxa_end_catch@PLT # Offset: 2426
.Ltmp5289:
    0000097f: 	movq	%rbp, %rdi
    00000982: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2434
.Ltmp5288:
    00000987: 	movq	%rbp, %rdi
    0000098a: 	movl	$0xb8, %esi
    0000098f: 	movq	%rbx, %rbp
    00000992: 	callq	_ZdlPvm@PLT # Offset: 2450
.Ltmp5291:
    00000997: 	movq	0x90(%rsp), %rdi
    0000099f: 	movq	0xa0(%rsp), %rsi
    000009a7: 	subq	%rdi, %rsi
    000009aa: 	testq	%rdi, %rdi
    000009ad: 	je	.Ltmp5290 # Offset: 2477
    000009af: 	callq	_ZdlPvm@PLT # Offset: 2479
.Ltmp5290:
    000009b4: 	movq	%rbp, %rdi
    000009b7: 	callq	_Unwind_Resume@PLT # Offset: 2487
    000009bc: 	endbr64
    000009c0: 	movq	%rax, %rbp
    000009c3: 	jmp	.Ltmp5291 # Offset: 2499
    000009c5: 	endbr64
    000009c9: 	movq	%rax, %rdi
    000009cc: 	callq	__cxa_begin_catch@PLT # Offset: 2508
    000009d1: 	callq	__cxa_rethrow@PLT # Offset: 2513
    000009d6: 	endbr64
    000009da: 	movq	%rax, %r12
    000009dd: 	callq	__cxa_end_catch@PLT # Offset: 2525
    000009e2: 	movq	%r12, %rdi
    000009e5: 	callq	__cxa_begin_catch@PLT # Offset: 2533
    000009ea: 	movq	0x58(%rbp), %rax
    000009ee: 	movq	0x50(%rbp), %rdi
    000009f2: 	leaq	(,%rax,8), %rsi
    000009fa: 	callq	_ZdlPvm@PLT # Offset: 2554
    000009ff: 	movq	$0x0, 0x50(%rbp)
    00000a07: 	movq	$0x0, 0x58(%rbp)
    00000a0f: 	callq	__cxa_rethrow@PLT # Offset: 2575
    00000a14: 	endbr64
    00000a18: 	movq	%rax, %rbx
    00000a1b: 	jmp	.Ltmp5292 # Offset: 2587
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_popfrontId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_eraseall_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 310
  State       : disassembled
  Address     : 0x36e20
  Size        : 0xa10
  MaxSize     : 0xa10
  Offset      : 0x36e20
  Section     : .text
  Orc Section : .local.text._Z22test_eraseall_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0309:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movq	%rsi, (%rsp)
    00000019: 	subq	%rdi, %rsi
    0000001c: 	movq	%rdx, 0x50(%rsp)
    00000021: 	xorl	%edx, %edx
    00000023: 	movq	%rdi, 0x20(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0xa8(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	movabsq	$0x500000000, %rax
    00000045: 	divq	%rsi
    00000048: 	movq	%rax, 0x10(%rsp)
    0000004d: 	cmpq	$0x3e8, %rax
    00000053: 	ja	.Ltmp5293 # Offset: 83
    00000059: 	cmpq	$0x3, %rax
    0000005d: 	ja	.Ltmp5294 # Offset: 93
    00000063: 	movq	$0x0, 0xa0(%rsp)
    0000006f: 	pxor	%xmm0, %xmm0
    00000073: 	movq	$0x4, 0x10(%rsp)
    0000007c: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5340:
    00000084: 	movq	0x10(%rsp), %rbx
    00000089: 	leaq	0x90(%rsp), %rdi
    00000091: 	movq	%rbx, %rsi
    00000094: 	callq	_ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 148
    00000099: 	movq	0x90(%rsp), %rcx
    000000a1: 	movl	iterations(%rip), %eax
    000000a7: 	movq	%rcx, 0x30(%rsp)
    000000ac: 	testl	%eax, %eax
    000000ae: 	jle	.Ltmp5295 # Offset: 174
    000000b4: 	leaq	0x8(%rcx), %rsi
    000000b8: 	movl	%ebx, 0x44(%rsp)
    000000bc: 	pxor	%xmm6, %xmm6
    000000c0: 	leaq	0x88(%rsp), %r14
    000000c8: 	movl	$0x0, 0x40(%rsp)
    000000d0: 	movq	%rsi, 0x58(%rsp)
    000000d5: 	movsd	%xmm6, 0x38(%rsp)
.Ltmp5332:
    000000db: 	movslq	0x40(%rsp), %rdx
    000000e0: 	movslq	%eax, %rcx
    000000e3: 	movq	%rdx, %rsi
    000000e6: 	addq	0x10(%rsp), %rdx
    000000eb: 	subl	%esi, %eax
    000000ed: 	cmpq	%rcx, %rdx
    000000f0: 	cmovbl	0x44(%rsp), %eax
    000000f5: 	movq	0x58(%rsp), %rcx
    000000fa: 	movq	0x30(%rsp), %rsi
    000000ff: 	subl	$0x1, %eax
    00000102: 	leaq	(%rcx,%rax,8), %rax
    00000106: 	movq	%rsi, 0x48(%rsp)
    0000010b: 	movq	%rax, 0x8(%rsp)
    00000110: 	movq	%rsi, 0x18(%rsp)
.Ltmp5304:
    00000115: 	movl	$0xb8, %edi
    0000011a: 	callq	_Znwm@PLT # Offset: 282
    0000011f: 	movq	$0x0, (%rax)
    00000126: 	pxor	%xmm0, %xmm0
    0000012a: 	xorl	%esi, %esi
    0000012c: 	movq	%rax, %rdi
    0000012f: 	movq	$0x0, 0x8(%rax)
    00000137: 	movq	%rax, %rbp
    0000013a: 	movups	%xmm0, 0x10(%rax)
    0000013e: 	movups	%xmm0, 0x20(%rax)
    00000142: 	movups	%xmm0, 0x30(%rax)
    00000146: 	movups	%xmm0, 0x40(%rax)
    0000014a: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 330
    0000014f: 	movq	$0x0, 0x50(%rbp)
    00000157: 	pxor	%xmm0, %xmm0
    0000015b: 	movl	$0x40, %edi
    00000160: 	movq	$0x8, 0x58(%rbp)
    00000168: 	movups	%xmm0, 0x60(%rbp)
    0000016c: 	movups	%xmm0, 0x70(%rbp)
    00000170: 	movups	%xmm0, 0x80(%rbp)
    00000177: 	movups	%xmm0, 0x90(%rbp)
    0000017e: 	callq	_Znwm@PLT # Offset: 382
    00000183: 	movq	0x58(%rbp), %rdx
    00000187: 	movq	%rax, 0x50(%rbp)
    0000018b: 	movl	$0x1f8, %edi
    00000190: 	leaq	-0x4(,%rdx,4), %rdx
    00000198: 	andq	$-0x8, %rdx
    0000019c: 	leaq	(%rax,%rdx), %r13
    000001a0: 	callq	_Znwm@PLT # Offset: 416
    000001a5: 	movq	%rax, %rsi
    000001a8: 	movq	%rax, %xmm1
    000001ad: 	movq	%rax, (%r13)
    000001b1: 	leaq	0x1f8(%rax), %rax
    000001b8: 	movq	%rax, %xmm0
    000001bd: 	movq	%r13, %xmm4
    000001c2: 	movq	%rsi, %r8
    000001c5: 	movl	$0x0, 0xa0(%rbp)
    000001cf: 	leaq	0x50(%rbp), %rax
    000001d3: 	punpcklqdq	%xmm4, %xmm0
    000001d7: 	punpcklqdq	%xmm1, %xmm1
    000001db: 	movq	%rax, 0x28(%rsp)
    000001e0: 	movq	0x20(%rsp), %rax
    000001e5: 	movups	%xmm0, 0x70(%rbp)
    000001e9: 	movups	%xmm0, 0x90(%rbp)
    000001f0: 	pxor	%xmm0, %xmm0
    000001f4: 	movq	%rax, %r15
    000001f7: 	movups	%xmm1, 0x60(%rbp)
    000001fb: 	movups	%xmm1, 0x80(%rbp)
    00000202: 	movups	%xmm0, 0xa8(%rbp)
    00000209: 	cmpq	%rax, (%rsp)
    0000020d: 	je	.Ltmp5296 # Offset: 525
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5303:
    00000218: 	movq	0x48(%rbp), %rcx
    0000021c: 	movq	0x30(%rbp), %rdi
    00000220: 	addq	$0x8, %r15
    00000224: 	movq	0x38(%rbp), %r9
    00000228: 	movq	%rcx, %rax
    0000022b: 	subq	0x28(%rbp), %rax
    0000022f: 	movq	%rdi, %rdx
    00000232: 	sarq	$0x3, %rax
    00000236: 	cmpq	$0x1, %rcx
    0000023a: 	adcq	$-0x1, %rax
    0000023e: 	subq	%r9, %rdx
    00000241: 	sarq	$0x3, %rdx
    00000245: 	shlq	$0x6, %rax
    00000249: 	addq	%rdx, %rax
    0000024c: 	movq	0x20(%rbp), %rdx
    00000250: 	subq	0x10(%rbp), %rdx
    00000254: 	sarq	$0x3, %rdx
    00000258: 	addq	%rdx, %rax
    0000025b: 	je	.Ltmp5297 # Offset: 603
.Ltmp5339:
    00000261: 	cmpq	%r9, %rdi
    00000264: 	je	.Ltmp5298 # Offset: 612
.Ltmp5320:
    0000026a: 	movq	-0x8(%rdi), %rbx
    0000026e: 	subq	$0x8, %rdi
    00000272: 	movq	%rdi, 0x30(%rbp)
.Ltmp5321:
    00000276: 	movq	0x60(%rbp), %rsi
    0000027a: 	movq	0x68(%rbp), %r8
    0000027e: 	movabsq	$-0x5555555555555555, %rax
    00000288: 	movq	0x78(%rbp), %r13
    0000028c: 	movq	%rsi, %rcx
    0000028f: 	subq	%r8, %rcx
    00000292: 	sarq	$0x3, %rcx
    00000296: 	imulq	%rax, %rcx
    0000029a: 	addq	%rbx, %rcx
    0000029d: 	js	.Ltmp5299 # Offset: 669
    000002a3: 	cmpq	$0x14, %rcx
    000002a7: 	jg	.Ltmp5300 # Offset: 679
    000002ad: 	leaq	(%rbx,%rbx,2), %rax
    000002b1: 	leaq	(%rsi,%rax,8), %rax
    000002b5: 	movq	%rbx, 0x10(%rax)
.Ltmp5313:
    000002b9: 	movsd	-0x8(%r15), %xmm0
    000002bf: 	movq	0xb0(%rbp), %rdx
    000002c6: 	movq	$0x0, 0x8(%rax)
    000002ce: 	movsd	%xmm0, (%rax)
    000002d2: 	testq	%rdx, %rdx
    000002d5: 	je	.Ltmp5301 # Offset: 725
    000002d7: 	movq	%rax, 0x8(%rdx)
.Ltmp5301:
    000002db: 	cmpq	$0x0, 0xa8(%rbp)
    000002e3: 	movq	%rax, 0xb0(%rbp)
    000002ea: 	je	.Ltmp5302 # Offset: 746
    000002f0: 	addl	$0x1, 0xa0(%rbp)
    000002f7: 	cmpq	%r15, (%rsp)
    000002fb: 	jne	.Ltmp5303 # Offset: 763
.Ltmp5296:
    00000301: 	movq	0x18(%rsp), %rax
    00000306: 	movq	%rbp, (%rax)
    00000309: 	addq	$0x8, %rax
    0000030d: 	movq	%rax, 0x18(%rsp)
    00000312: 	cmpq	%rax, 0x8(%rsp)
    00000317: 	jne	.Ltmp5304 # Offset: 791
    0000031d: 	callq	clock@PLT # Offset: 797
    00000322: 	movq	0x30(%rsp), %r15
    00000327: 	movabsq	$-0x5555555555555555, %r13
    00000331: 	movq	%rax, start_time(%rip)
.Ltmp5323:
    00000338: 	movq	(%r15), %rbx
    0000033b: 	movq	0xa8(%rbx), %rbp
    00000342: 	movq	$0x0, 0xa8(%rbx)
    0000034d: 	cmpq	0xb0(%rbx), %rbp
    00000354: 	jne	.Ltmp5305 # Offset: 852
    00000356: 	jmp	.Ltmp5306 # Offset: 854
    0000035b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5310:
    00000360: 	cmpq	$0x14, %rcx
    00000364: 	jg	.Ltmp5307 # Offset: 868
    0000036a: 	leaq	(%rax,%rax,2), %rax
    0000036e: 	leaq	(%rdx,%rax,8), %rax
.Ltmp5311:
    00000372: 	movq	$-0x1, 0x10(%rax)
    0000037a: 	subl	$0x1, 0xa0(%rbx)
.Ltmp5305:
    00000381: 	testq	%rbp, %rbp
    00000384: 	je	.Ltmp5308 # Offset: 900
    0000038a: 	movq	0x40(%rbx), %rsi
    0000038e: 	movq	0x30(%rbx), %rax
    00000392: 	movq	%rbp, %r12
    00000395: 	movq	0x8(%rbp), %rbp
    00000399: 	leaq	-0x8(%rsi), %rdx
    0000039d: 	cmpq	%rdx, %rax
    000003a0: 	je	.Ltmp5309 # Offset: 928
    000003a6: 	movq	0x10(%r12), %rdx
    000003ab: 	addq	$0x8, %rax
    000003af: 	movq	%rdx, -0x8(%rax)
    000003b3: 	movq	%rax, 0x30(%rbx)
.Ltmp5314:
    000003b7: 	movq	0x60(%rbx), %rdx
    000003bb: 	movq	0x10(%r12), %rax
    000003c0: 	movq	0x78(%rbx), %rsi
    000003c4: 	movq	%rdx, %rcx
    000003c7: 	subq	0x68(%rbx), %rcx
    000003cb: 	sarq	$0x3, %rcx
    000003cf: 	imulq	%r13, %rcx
    000003d3: 	addq	%rax, %rcx
    000003d6: 	jns	.Ltmp5310 # Offset: 982
    000003d8: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000003e2: 	movq	%rcx, %rdi
    000003e5: 	notq	%rdi
    000003e8: 	mulq	%rdi
    000003eb: 	subq	%rdx, %rdi
    000003ee: 	shrq	%rdi
    000003f1: 	leaq	(%rdx,%rdi), %rax
    000003f5: 	shrq	$0x4, %rax
    000003f9: 	notq	%rax
.Ltmp5312:
    000003fc: 	leaq	(%rax,%rax,4), %rdx
    00000400: 	leaq	(%rax,%rdx,4), %rdx
    00000404: 	movq	(%rsi,%rax,8), %rax
    00000408: 	subq	%rdx, %rcx
    0000040b: 	leaq	(%rcx,%rcx,2), %rdx
    0000040f: 	leaq	(%rax,%rdx,8), %rax
    00000413: 	jmp	.Ltmp5311 # Offset: 1043
    00000418: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5307:
    00000420: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rax
    0000042a: 	imulq	%rcx
    0000042d: 	leaq	(%rdx,%rcx), %rax
    00000431: 	movq	%rcx, %rdx
    00000434: 	sarq	$0x4, %rax
    00000438: 	sarq	$0x3f, %rdx
    0000043c: 	subq	%rdx, %rax
    0000043f: 	jmp	.Ltmp5312 # Offset: 1087
.Ltmp5300:
    00000441: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    0000044b: 	movq	%rcx, %rax
    0000044e: 	imulq	%rdx
    00000451: 	leaq	(%rdx,%rcx), %rax
    00000455: 	movq	%rcx, %rdx
    00000458: 	sarq	$0x4, %rax
    0000045c: 	sarq	$0x3f, %rdx
    00000460: 	subq	%rdx, %rax
.Ltmp5322:
    00000463: 	leaq	(%rax,%rax,4), %rdx
    00000467: 	leaq	(%rax,%rdx,4), %rdx
    0000046b: 	movq	(%r13,%rax,8), %rax
    00000470: 	subq	%rdx, %rcx
    00000473: 	leaq	(%rcx,%rcx,2), %rdx
    00000477: 	leaq	(%rax,%rdx,8), %rax
    0000047b: 	movq	%rbx, 0x10(%rax)
    0000047f: 	jmp	.Ltmp5313 # Offset: 1151
    00000484: 	nopl	(%rax) # Size: 4
.Ltmp5309:
    00000488: 	leaq	0x10(%r12), %rsi
    0000048d: 	movq	%rbx, %rdi
    00000490: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 1168
    00000495: 	jmp	.Ltmp5314 # Offset: 1173
.Ltmp5297:
    0000049a: 	movq	0x98(%rbp), %r10
    000004a1: 	movq	0x80(%rbp), %r12
    000004a8: 	movabsq	$-0x5555555555555555, %rbx
    000004b2: 	movq	0x70(%rbp), %rax
    000004b6: 	movq	%r10, %rdx
    000004b9: 	subq	%r13, %rdx
    000004bc: 	sarq	$0x3, %rdx
    000004c0: 	cmpq	$0x1, %r10
    000004c4: 	adcq	$-0x1, %rdx
    000004c8: 	subq	0x88(%rbp), %r12
    000004cf: 	sarq	$0x3, %r12
    000004d3: 	leaq	(%rdx,%rdx,4), %r11
    000004d7: 	imulq	%rbx, %r12
    000004db: 	leaq	(%rdx,%r11,4), %rdx
    000004df: 	addq	%rdx, %r12
    000004e2: 	movq	%rax, %rdx
    000004e5: 	subq	%rsi, %rdx
    000004e8: 	sarq	$0x3, %rdx
    000004ec: 	imulq	%rbx, %rdx
    000004f0: 	addq	%rdx, %r12
    000004f3: 	leaq	0xaa(%r12), %rbx
    000004fb: 	cmpq	%rbx, %r12
    000004fe: 	jb	.Ltmp5315 # Offset: 1278
    00000504: 	movabsq	$-0x5555555555555555, %rdx
    0000050e: 	movq	%rsi, %r11
    00000511: 	subq	%r8, %r11
    00000514: 	sarq	$0x3, %r11
    00000518: 	imulq	%rdx, %r11
    0000051c: 	addq	%rbx, %r11
    0000051f: 	js	.Ltmp5316 # Offset: 1311
    00000525: 	cmpq	$0x14, %r11
    00000529: 	jle	.Ltmp5317 # Offset: 1321
    0000052f: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000539: 	movq	%r11, %rax
    0000053c: 	imulq	%rdx
    0000053f: 	movq	%r11, %rax
    00000542: 	sarq	$0x3f, %rax
    00000546: 	addq	%r11, %rdx
    00000549: 	sarq	$0x4, %rdx
    0000054d: 	subq	%rax, %rdx
.Ltmp5342:
    00000550: 	leaq	(%rdx,%rdx,4), %rsi
    00000554: 	leaq	(%r13,%rdx,8), %r13
    00000559: 	leaq	(%rdx,%rsi,4), %rdx
    0000055d: 	movq	(%r13), %r8
    00000561: 	subq	%rdx, %r11
    00000564: 	leaq	(%r11,%r11,2), %rdx
    00000568: 	leaq	0x1f8(%r8), %rax
    0000056f: 	leaq	(%r8,%rdx,8), %rdx
.Ltmp5341:
    00000573: 	movq	%r8, %xmm7
    00000578: 	movq	%rdx, %xmm5
    0000057d: 	movq	%rax, %xmm6
    00000582: 	punpcklqdq	%xmm7, %xmm5
    00000586: 	movq	%r13, %xmm7
    0000058b: 	leaq	0x8(%r10), %rbx
    0000058f: 	addq	$0x8, %r13
    00000593: 	punpcklqdq	%xmm7, %xmm6
    00000597: 	movaps	%xmm5, 0x60(%rsp)
    0000059c: 	movaps	%xmm6, 0x70(%rsp)
    000005a1: 	cmpq	%r13, %rbx
    000005a4: 	jbe	.Ltmp5318 # Offset: 1444
    000005a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5319:
    000005b0: 	movq	(%r13), %rdi
    000005b4: 	movl	$0x1f8, %esi
    000005b9: 	addq	$0x8, %r13
    000005bd: 	callq	_ZdlPvm@PLT # Offset: 1469
    000005c2: 	cmpq	%r13, %rbx
    000005c5: 	ja	.Ltmp5319 # Offset: 1477
    000005c7: 	movq	0x30(%rbp), %rdi
    000005cb: 	movq	0x38(%rbp), %r9
    000005cf: 	movq	0x48(%rbp), %rcx
.Ltmp5318:
    000005d3: 	movdqa	0x60(%rsp), %xmm7
    000005d9: 	movdqa	0x70(%rsp), %xmm5
    000005df: 	movups	%xmm7, 0x80(%rbp)
    000005e6: 	movups	%xmm5, 0x90(%rbp)
    000005ed: 	cmpq	%r9, %rdi
    000005f0: 	jne	.Ltmp5320 # Offset: 1520
.Ltmp5298:
    000005f6: 	movq	-0x8(%rcx), %rax
    000005fa: 	movl	$0x200, %esi
    000005ff: 	movq	0x1f8(%rax), %rbx
    00000606: 	callq	_ZdlPvm@PLT # Offset: 1542
    0000060b: 	movq	0x48(%rbp), %rdx
    0000060f: 	movq	-0x8(%rdx), %rax
    00000613: 	subq	$0x8, %rdx
    00000617: 	movq	%rdx, %xmm3
    0000061c: 	leaq	0x1f8(%rax), %rsi
    00000623: 	movq	%rax, %xmm2
    00000628: 	addq	$0x200, %rax
    0000062e: 	movq	%rsi, %xmm0
    00000633: 	punpcklqdq	%xmm2, %xmm0
    00000637: 	movups	%xmm0, 0x30(%rbp)
    0000063b: 	movq	%rax, %xmm0
    00000640: 	punpcklqdq	%xmm3, %xmm0
    00000644: 	movups	%xmm0, 0x40(%rbp)
    00000648: 	jmp	.Ltmp5321 # Offset: 1608
.Ltmp5302:
    0000064d: 	addl	$0x1, 0xa0(%rbp)
    00000654: 	movq	%rax, 0xa8(%rbp)
    0000065b: 	cmpq	%r15, (%rsp)
    0000065f: 	jne	.Ltmp5303 # Offset: 1631
    00000665: 	jmp	.Ltmp5296 # Offset: 1637
    0000066a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5299:
    00000670: 	movabsq	$-0x79e79e79e79e79e7, %rax
    0000067a: 	movq	%rcx, %rdi
    0000067d: 	notq	%rdi
    00000680: 	mulq	%rdi
    00000683: 	subq	%rdx, %rdi
    00000686: 	shrq	%rdi
    00000689: 	leaq	(%rdx,%rdi), %rax
    0000068d: 	shrq	$0x4, %rax
    00000691: 	notq	%rax
    00000694: 	jmp	.Ltmp5322 # Offset: 1684
.Ltmp5308:
    00000699: 	addq	$0x8, %r15
    0000069d: 	cmpq	%r15, 0x8(%rsp)
    000006a2: 	jne	.Ltmp5323 # Offset: 1698
    000006a8: 	callq	clock@PLT # Offset: 1704
    000006ad: 	pxor	%xmm0, %xmm0
    000006b1: 	movq	0x8(%rsp), %r13
    000006b6: 	movq	0x48(%rsp), %r12
    000006bb: 	movq	%rax, end_time(%rip)
    000006c2: 	subq	start_time(%rip), %rax
    000006c9: 	cvtsi2sd	%rax, %xmm0
    000006ce: 	divsd	DATAat0x53788(%rip), %xmm0
    000006d6: 	addsd	0x38(%rsp), %xmm0
    000006dc: 	movsd	%xmm0, 0x38(%rsp)
.Ltmp5331:
    000006e2: 	movq	(%r12), %rbp
    000006e6: 	testq	%rbp, %rbp
    000006e9: 	je	.Ltmp5324 # Offset: 1769
    000006ef: 	movq	0x50(%rbp), %rdi
    000006f3: 	testq	%rdi, %rdi
    000006f6: 	je	.Ltmp5325 # Offset: 1782
    000006f8: 	movq	0x98(%rbp), %rax
    000006ff: 	movq	0x78(%rbp), %rbx
    00000703: 	leaq	0x8(%rax), %r15
    00000707: 	cmpq	%rbx, %r15
    0000070a: 	jbe	.Ltmp5326 # Offset: 1802
    0000070c: 	nopl	(%rax) # Size: 4
.Ltmp5327:
    00000710: 	movq	(%rbx), %rdi
    00000713: 	movl	$0x1f8, %esi
    00000718: 	addq	$0x8, %rbx
    0000071c: 	callq	_ZdlPvm@PLT # Offset: 1820
    00000721: 	cmpq	%rbx, %r15
    00000724: 	ja	.Ltmp5327 # Offset: 1828
    00000726: 	movq	0x50(%rbp), %rdi
.Ltmp5326:
    0000072a: 	movq	0x58(%rbp), %rax
    0000072e: 	leaq	(,%rax,8), %rsi
    00000736: 	callq	_ZdlPvm@PLT # Offset: 1846
.Ltmp5325:
    0000073b: 	movq	(%rbp), %rdi
    0000073f: 	testq	%rdi, %rdi
    00000742: 	je	.Ltmp5328 # Offset: 1858
    00000744: 	movq	0x48(%rbp), %rax
    00000748: 	movq	0x28(%rbp), %rbx
    0000074c: 	leaq	0x8(%rax), %r15
    00000750: 	cmpq	%rbx, %r15
    00000753: 	jbe	.Ltmp5329 # Offset: 1875
    00000755: 	nopl	(%rax) # Size: 3
.Ltmp5330:
    00000758: 	movq	(%rbx), %rdi
    0000075b: 	movl	$0x200, %esi
    00000760: 	addq	$0x8, %rbx
    00000764: 	callq	_ZdlPvm@PLT # Offset: 1892
    00000769: 	cmpq	%rbx, %r15
    0000076c: 	ja	.Ltmp5330 # Offset: 1900
    0000076e: 	movq	(%rbp), %rdi
.Ltmp5329:
    00000772: 	movq	0x8(%rbp), %rax
    00000776: 	leaq	(,%rax,8), %rsi
    0000077e: 	callq	_ZdlPvm@PLT # Offset: 1918
.Ltmp5328:
    00000783: 	movl	$0xb8, %esi
    00000788: 	movq	%rbp, %rdi
    0000078b: 	callq	_ZdlPvm@PLT # Offset: 1931
.Ltmp5324:
    00000790: 	movq	$0x0, (%r12)
    00000798: 	addq	$0x8, %r12
    0000079c: 	cmpq	%r12, %r13
    0000079f: 	jne	.Ltmp5331 # Offset: 1951
    000007a5: 	movl	0x10(%rsp), %esi
    000007a9: 	movl	iterations(%rip), %eax
    000007af: 	addl	%esi, 0x40(%rsp)
    000007b3: 	movl	0x40(%rsp), %esi
    000007b7: 	cmpl	%esi, %eax
    000007b9: 	jg	.Ltmp5332 # Offset: 1977
.Ltmp5344:
    000007bf: 	movq	0x50(%rsp), %rdi
    000007c4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1988
    000007c9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007d0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007d7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007de: 	je	.Ltmp5333 # Offset: 2014
.Ltmp5343:
    000007e4: 	movq	-0x20(%rax), %rdi
    000007e8: 	movsd	0x38(%rsp), %xmm0
    000007ee: 	callq	_Z13record_resultdPKc # Offset: 2030
    000007f3: 	cmpq	$0x0, 0x30(%rsp)
    000007f9: 	je	.Ltmp5334 # Offset: 2041
    000007ff: 	movq	0xa8(%rsp), %rax
    00000807: 	subq	%fs:0x28, %rax
    00000810: 	jne	.Ltmp5335 # Offset: 2064
    00000816: 	movq	0xa0(%rsp), %rsi
    0000081e: 	movq	0x30(%rsp), %rdi
    00000823: 	addq	$0xb8, %rsp
    0000082a: 	popq	%rbx
    0000082b: 	popq	%rbp
    0000082c: 	subq	%rdi, %rsi
    0000082f: 	popq	%r12
    00000831: 	popq	%r13
    00000833: 	popq	%r14
    00000835: 	popq	%r15
    00000837: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 2103
    0000083c: 	nopl	(%rax) # Size: 4
.Ltmp5315:
    00000840: 	movq	0x28(%rsp), %rdi
    00000845: 	movl	$0xaa, %esi
    0000084a: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2122
    0000084f: 	movq	0x30(%rbp), %rdi
    00000853: 	jmp	.Ltmp5336 # Offset: 2131
    00000855: 	nopl	(%rax) # Size: 3
.Ltmp5338:
    00000858: 	movq	%rbx, (%rdi)
    0000085b: 	addq	$0x8, %rdi
    0000085f: 	movq	%rdi, 0x30(%rbp)
    00000863: 	cmpq	%rbx, %r12
    00000866: 	je	.Ltmp5337 # Offset: 2150
.Ltmp5336:
    00000868: 	movq	0x40(%rbp), %rax
    0000086c: 	subq	$0x1, %rbx
    00000870: 	movq	%rbx, 0x88(%rsp)
    00000878: 	subq	$0x8, %rax
    0000087c: 	cmpq	%rax, %rdi
    0000087f: 	jne	.Ltmp5338 # Offset: 2175
    00000881: 	movq	%r14, %rsi
    00000884: 	movq	%rbp, %rdi
    00000887: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2183
    0000088c: 	movq	0x30(%rbp), %rdi
    00000890: 	cmpq	%rbx, %r12
    00000893: 	jne	.Ltmp5336 # Offset: 2195
.Ltmp5337:
    00000895: 	movq	0x38(%rbp), %r9
    00000899: 	movq	0x48(%rbp), %rcx
    0000089d: 	jmp	.Ltmp5339 # Offset: 2205
.Ltmp5306:
    000008a2: 	movq	$0x0, 0xb0(%rbx)
    000008ad: 	jmp	.Ltmp5305 # Offset: 2221
.Ltmp5293:
    000008b2: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp5294:
    000008bb: 	movq	$0x0, 0xa0(%rsp)
    000008c7: 	pxor	%xmm0, %xmm0
    000008cb: 	movaps	%xmm0, 0x90(%rsp)
    000008d3: 	jmp	.Ltmp5340 # Offset: 2259
.Ltmp5317:
    000008d8: 	leaq	(%rbx,%rbx,2), %rdx
    000008dc: 	leaq	(%rsi,%rdx,8), %rdx
    000008e0: 	jmp	.Ltmp5341 # Offset: 2272
.Ltmp5316:
    000008e5: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000008ef: 	movq	%r11, %rsi
    000008f2: 	notq	%rsi
    000008f5: 	mulq	%rsi
    000008f8: 	movq	%rsi, %rax
    000008fb: 	subq	%rdx, %rax
    000008fe: 	shrq	%rax
    00000901: 	addq	%rax, %rdx
    00000904: 	shrq	$0x4, %rdx
    00000908: 	notq	%rdx
    0000090b: 	jmp	.Ltmp5342 # Offset: 2315
.Ltmp5334:
    00000910: 	movq	0xa8(%rsp), %rax
    00000918: 	subq	%fs:0x28, %rax
    00000921: 	jne	.Ltmp5335 # Offset: 2337
    00000923: 	addq	$0xb8, %rsp
    0000092a: 	popq	%rbx
    0000092b: 	popq	%rbp
    0000092c: 	popq	%r12
    0000092e: 	popq	%r13
    00000930: 	popq	%r14
    00000932: 	popq	%r15
    00000934: 	retq # Offset: 2356
.Ltmp5333:
    00000935: 	movq	-0x8(%rdx), %rax
    00000939: 	addq	$0x200, %rax
    0000093f: 	jmp	.Ltmp5343 # Offset: 2367
.Ltmp5295:
    00000944: 	pxor	%xmm6, %xmm6
    00000948: 	movsd	%xmm6, 0x38(%rsp)
    0000094e: 	jmp	.Ltmp5344 # Offset: 2382
.Ltmp5335:
    00000953: 	callq	__stack_chk_fail@PLT # Offset: 2387
    00000958: 	endbr64
    0000095c: 	movq	%rax, %rbx
    0000095f: 	jmp	.Ltmp5345 # Offset: 2399
    00000961: 	endbr64
    00000965: 	movq	%rax, %rbx
    00000968: 	jmp	.Ltmp5346 # Offset: 2408
.Ltmp5349:
    0000096a: 	callq	__cxa_end_catch@PLT # Offset: 2410
.Ltmp5346:
    0000096f: 	movq	%rbp, %rdi
    00000972: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2418
.Ltmp5345:
    00000977: 	movq	%rbp, %rdi
    0000097a: 	movl	$0xb8, %esi
    0000097f: 	movq	%rbx, %rbp
    00000982: 	callq	_ZdlPvm@PLT # Offset: 2434
.Ltmp5348:
    00000987: 	movq	0x90(%rsp), %rdi
    0000098f: 	movq	0xa0(%rsp), %rsi
    00000997: 	subq	%rdi, %rsi
    0000099a: 	testq	%rdi, %rdi
    0000099d: 	je	.Ltmp5347 # Offset: 2461
    0000099f: 	callq	_ZdlPvm@PLT # Offset: 2463
.Ltmp5347:
    000009a4: 	movq	%rbp, %rdi
    000009a7: 	callq	_Unwind_Resume@PLT # Offset: 2471
    000009ac: 	endbr64
    000009b0: 	movq	%rax, %rbp
    000009b3: 	jmp	.Ltmp5348 # Offset: 2483
    000009b5: 	endbr64
    000009b9: 	movq	%rax, %rdi
    000009bc: 	callq	__cxa_begin_catch@PLT # Offset: 2492
    000009c1: 	callq	__cxa_rethrow@PLT # Offset: 2497
    000009c6: 	endbr64
    000009ca: 	movq	%rax, %r12
    000009cd: 	callq	__cxa_end_catch@PLT # Offset: 2509
    000009d2: 	movq	%r12, %rdi
    000009d5: 	callq	__cxa_begin_catch@PLT # Offset: 2517
    000009da: 	movq	0x58(%rbp), %rax
    000009de: 	movq	0x50(%rbp), %rdi
    000009e2: 	leaq	(,%rax,8), %rsi
    000009ea: 	callq	_ZdlPvm@PLT # Offset: 2538
    000009ef: 	movq	$0x0, 0x50(%rbp)
    000009f7: 	movq	$0x0, 0x58(%rbp)
    000009ff: 	callq	__cxa_rethrow@PLT # Offset: 2559
    00000a04: 	endbr64
    00000a08: 	movq	%rax, %rbx
    00000a0b: 	jmp	.Ltmp5349 # Offset: 2571
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_eraseall_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_accumId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 311
  State       : disassembled
  Address     : 0x37830
  Size        : 0x6b5
  MaxSize     : 0x6c0
  Offset      : 0x37830
  Section     : .text
  Orc Section : .local.text._Z10test_accumId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0310:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	movl	$0xb8, %edi
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x20(%rsp)
    00000022: 	callq	_Znwm@PLT # Offset: 34
    00000027: 	movq	%rax, %rdi
    0000002a: 	movq	%rax, %rbp
    0000002d: 	callq	_ZN27SingleLinkListPoolAllocatorIdEC2Ev # Offset: 45
    00000032: 	movq	%r12, %r13
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	leaq	0x50(%rbp), %rax
    0000003d: 	movl	$0x0, 0xa0(%rbp)
    00000047: 	subq	%rbx, %r13
    0000004a: 	movq	%rax, 0x18(%rsp)
    0000004f: 	movups	%xmm0, 0xa8(%rbp)
    00000056: 	testq	%r13, %r13
    00000059: 	jle	.Ltmp5350 # Offset: 89
    0000005f: 	sarq	$0x3, %r13
    00000063: 	movq	%rbx, 0x10(%rsp)
    00000068: 	movq	%r13, 0x8(%rsp)
    0000006d: 	movq	%r12, 0x28(%rsp)
.Ltmp5357:
    00000072: 	movq	0x48(%rbp), %r15
    00000076: 	movq	0x30(%rbp), %r13
    0000007a: 	movq	0x38(%rbp), %rbx
    0000007e: 	movq	%r15, %rax
    00000081: 	subq	0x28(%rbp), %rax
    00000085: 	movq	%r13, %rdx
    00000088: 	sarq	$0x3, %rax
    0000008c: 	cmpq	$0x1, %r15
    00000090: 	adcq	$-0x1, %rax
    00000094: 	subq	%rbx, %rdx
    00000097: 	sarq	$0x3, %rdx
    0000009b: 	shlq	$0x6, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	movq	0x20(%rbp), %rdx
    000000a6: 	subq	0x10(%rbp), %rdx
    000000aa: 	sarq	$0x3, %rdx
    000000ae: 	addq	%rdx, %rax
    000000b1: 	je	.Ltmp5351 # Offset: 177
.Ltmp5372:
    000000b7: 	cmpq	%rbx, %r13
    000000ba: 	je	.Ltmp5352 # Offset: 186
.Ltmp5364:
    000000c0: 	movq	-0x8(%r13), %r14
    000000c4: 	subq	$0x8, %r13
    000000c8: 	movq	%r13, 0x30(%rbp)
.Ltmp5365:
    000000cc: 	movq	0x60(%rbp), %rax
    000000d0: 	movq	0x78(%rbp), %rsi
    000000d4: 	movabsq	$-0x5555555555555555, %rdi
    000000de: 	movq	%rax, %rcx
    000000e1: 	subq	0x68(%rbp), %rcx
    000000e5: 	sarq	$0x3, %rcx
    000000e9: 	imulq	%rdi, %rcx
    000000ed: 	addq	%r14, %rcx
    000000f0: 	js	.Ltmp5353 # Offset: 240
    000000f6: 	cmpq	$0x14, %rcx
    000000fa: 	jle	.Ltmp5354 # Offset: 250
    00000100: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    0000010a: 	movq	%rcx, %rax
    0000010d: 	imulq	%rdx
    00000110: 	leaq	(%rdx,%rcx), %rax
    00000114: 	movq	%rcx, %rdx
    00000117: 	sarq	$0x4, %rax
    0000011b: 	sarq	$0x3f, %rdx
    0000011f: 	subq	%rdx, %rax
.Ltmp5382:
    00000122: 	leaq	(%rax,%rax,4), %rdx
    00000126: 	leaq	(%rax,%rdx,4), %rdx
    0000012a: 	movq	(%rsi,%rax,8), %rax
    0000012e: 	subq	%rdx, %rcx
    00000131: 	leaq	(%rcx,%rcx,2), %rdx
    00000135: 	leaq	(%rax,%rdx,8), %rax
    00000139: 	movq	%r14, 0x10(%rax)
.Ltmp5366:
    0000013d: 	movq	0xb0(%rbp), %rdx
    00000144: 	movq	$0x0, (%rax)
    0000014b: 	movq	$0x0, 0x8(%rax)
    00000153: 	testq	%rdx, %rdx
    00000156: 	je	.Ltmp5355 # Offset: 342
    00000158: 	movq	%rax, 0x8(%rdx)
.Ltmp5355:
    0000015c: 	movq	0xa8(%rbp), %rdx
    00000163: 	movq	%rax, 0xb0(%rbp)
    0000016a: 	testq	%rdx, %rdx
    0000016d: 	je	.Ltmp5356 # Offset: 365
    00000173: 	addl	$0x1, 0xa0(%rbp)
    0000017a: 	subq	$0x1, 0x8(%rsp)
    00000180: 	jne	.Ltmp5357 # Offset: 384
    00000186: 	movq	0x10(%rsp), %rbx
    0000018b: 	movq	0x28(%rsp), %r12
    00000190: 	movq	%rdx, %r15
    00000193: 	jmp	.Ltmp5358 # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5351:
    000001a0: 	movq	0x98(%rbp), %rdi
    000001a7: 	movq	0x78(%rbp), %rsi
    000001ab: 	movabsq	$-0x5555555555555555, %rcx
    000001b5: 	movq	0x70(%rbp), %rdx
    000001b9: 	movq	0x60(%rbp), %r10
    000001bd: 	movq	%rdi, %rax
    000001c0: 	subq	%rsi, %rax
    000001c3: 	sarq	$0x3, %rax
    000001c7: 	cmpq	$0x1, %rdi
    000001cb: 	adcq	$-0x1, %rax
    000001cf: 	leaq	(%rax,%rax,4), %r8
    000001d3: 	leaq	(%rax,%r8,4), %r8
    000001d7: 	movq	0x80(%rbp), %rax
    000001de: 	subq	0x88(%rbp), %rax
    000001e5: 	sarq	$0x3, %rax
    000001e9: 	imulq	%rcx, %rax
    000001ed: 	addq	%rax, %r8
    000001f0: 	movq	%rdx, %rax
    000001f3: 	subq	%r10, %rax
    000001f6: 	sarq	$0x3, %rax
    000001fa: 	imulq	%rcx, %rax
    000001fe: 	leaq	(%r8,%rax), %r12
    00000202: 	leaq	0xaa(%r12), %r14
    0000020a: 	cmpq	%r14, %r12
    0000020d: 	jb	.Ltmp5359 # Offset: 525
    00000213: 	movq	0x68(%rbp), %r11
    00000217: 	movq	%r10, %r8
    0000021a: 	movabsq	$-0x5555555555555555, %rax
    00000224: 	subq	%r11, %r8
    00000227: 	sarq	$0x3, %r8
    0000022b: 	imulq	%rax, %r8
    0000022f: 	addq	%r14, %r8
    00000232: 	js	.Ltmp5360 # Offset: 562
    00000238: 	cmpq	$0x14, %r8
    0000023c: 	jle	.Ltmp5361 # Offset: 572
    00000242: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    0000024c: 	movq	%r8, %rax
    0000024f: 	imulq	%rdx
    00000252: 	leaq	(%rdx,%r8), %rax
    00000256: 	movq	%r8, %rdx
    00000259: 	sarq	$0x4, %rax
    0000025d: 	sarq	$0x3f, %rdx
    00000261: 	subq	%rdx, %rax
.Ltmp5386:
    00000264: 	leaq	(%rax,%rax,4), %r10
    00000268: 	leaq	(%rsi,%rax,8), %rsi
    0000026c: 	leaq	(%rax,%r10,4), %rax
    00000270: 	movq	(%rsi), %r11
    00000273: 	subq	%rax, %r8
    00000276: 	leaq	(%r8,%r8,2), %rax
    0000027a: 	leaq	0x1f8(%r11), %rdx
    00000281: 	leaq	(%r11,%rax,8), %rax
.Ltmp5385:
    00000285: 	movq	%r11, %xmm7
    0000028a: 	movq	%rax, %xmm5
    0000028f: 	movq	%rdx, %xmm6
    00000294: 	punpcklqdq	%xmm7, %xmm5
    00000298: 	movq	%rsi, %xmm7
    0000029d: 	leaq	0x8(%rdi), %r12
    000002a1: 	punpcklqdq	%xmm7, %xmm6
    000002a5: 	leaq	0x8(%rsi), %r14
    000002a9: 	movaps	%xmm5, 0x30(%rsp)
    000002ae: 	movaps	%xmm6, 0x40(%rsp)
    000002b3: 	cmpq	%r14, %r12
    000002b6: 	jbe	.Ltmp5362 # Offset: 694
    000002b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5363:
    000002c0: 	movq	(%r14), %rdi
    000002c3: 	movl	$0x1f8, %esi
    000002c8: 	addq	$0x8, %r14
    000002cc: 	callq	_ZdlPvm@PLT # Offset: 716
    000002d1: 	cmpq	%r14, %r12
    000002d4: 	ja	.Ltmp5363 # Offset: 724
.Ltmp5362:
    000002d6: 	movdqa	0x30(%rsp), %xmm7
    000002dc: 	movdqa	0x40(%rsp), %xmm5
    000002e2: 	movups	%xmm7, 0x80(%rbp)
    000002e9: 	movups	%xmm5, 0x90(%rbp)
    000002f0: 	cmpq	%rbx, %r13
    000002f3: 	jne	.Ltmp5364 # Offset: 755
.Ltmp5352:
    000002f9: 	movq	-0x8(%r15), %rax
    000002fd: 	movl	$0x200, %esi
    00000302: 	movq	%r13, %rdi
    00000305: 	movq	0x1f8(%rax), %r14
    0000030c: 	callq	_ZdlPvm@PLT # Offset: 780
    00000311: 	movq	-0x8(%r15), %rax
    00000315: 	leaq	-0x8(%r15), %rcx
    00000319: 	movq	%rcx, %xmm4
    0000031e: 	addq	$0x1f8, %rax
    00000324: 	movq	%rax, %xmm0
    00000329: 	movq	-0x8(%r15), %rax
    0000032d: 	movhps	-0x8(%r15), %xmm0
    00000332: 	addq	$0x200, %rax
    00000338: 	movups	%xmm0, 0x30(%rbp)
    0000033c: 	movq	%rax, %xmm0
    00000341: 	punpcklqdq	%xmm4, %xmm0
    00000345: 	movups	%xmm0, 0x40(%rbp)
    00000349: 	jmp	.Ltmp5365 # Offset: 841
.Ltmp5354:
    0000034e: 	leaq	(%r14,%r14,2), %rdx
    00000352: 	leaq	(%rax,%rdx,8), %rax
    00000356: 	movq	%r14, 0x10(%rax)
    0000035a: 	jmp	.Ltmp5366 # Offset: 858
.Ltmp5359:
    0000035f: 	movq	0x18(%rsp), %rdi
    00000364: 	movl	$0xaa, %esi
    00000369: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 873
    0000036e: 	movq	0x30(%rbp), %r13
    00000372: 	movq	0x40(%rbp), %rdx
    00000376: 	movq	0x48(%rbp), %r15
    0000037a: 	movq	0x38(%rbp), %rbx
    0000037e: 	movq	%r13, %rax
    00000381: 	jmp	.Ltmp5367 # Offset: 897
    00000383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5369:
    00000388: 	movq	%r14, (%rax)
    0000038b: 	addq	$0x8, %rax
    0000038f: 	movq	%rax, 0x30(%rbp)
    00000393: 	cmpq	%r14, %r12
    00000396: 	je	.Ltmp5368 # Offset: 918
.Ltmp5367:
    0000039c: 	leaq	-0x8(%rdx), %rcx
    000003a0: 	subq	$0x1, %r14
    000003a4: 	cmpq	%rcx, %rax
    000003a7: 	jne	.Ltmp5369 # Offset: 935
    000003a9: 	movabsq	$0xfffffffffffffff, %rsi
    000003b3: 	movq	%r15, %rdx
    000003b6: 	subq	0x28(%rbp), %rdx
    000003ba: 	sarq	$0x3, %rdx
    000003be: 	cmpq	$0x1, %r15
    000003c2: 	adcq	$-0x1, %rdx
    000003c6: 	subq	%rbx, %rax
    000003c9: 	shlq	$0x6, %rdx
    000003cd: 	sarq	$0x3, %rax
    000003d1: 	addq	%rdx, %rax
    000003d4: 	movq	0x20(%rbp), %rdx
    000003d8: 	subq	0x10(%rbp), %rdx
    000003dc: 	sarq	$0x3, %rdx
    000003e0: 	addq	%rdx, %rax
    000003e3: 	cmpq	%rsi, %rax
    000003e6: 	je	.Ltmp5370 # Offset: 998
    000003ec: 	movq	0x8(%rbp), %rax
    000003f0: 	movq	%r15, %rdx
    000003f3: 	subq	(%rbp), %rdx
    000003f7: 	sarq	$0x3, %rdx
    000003fb: 	subq	%rdx, %rax
    000003fe: 	cmpq	$0x1, %rax
    00000402: 	jbe	.Ltmp5371 # Offset: 1026
.Ltmp5373:
    00000404: 	movl	$0x200, %edi
    00000409: 	addq	$0x8, %r15
    0000040d: 	callq	_Znwm@PLT # Offset: 1037
    00000412: 	movq	0x30(%rbp), %rdx
    00000416: 	movq	%rax, (%r15)
    00000419: 	movq	%rax, %xmm0
    0000041e: 	movq	%rax, %rbx
    00000421: 	movq	%r14, (%rdx)
    00000424: 	leaq	0x200(%rax), %rdx
    0000042b: 	movq	%rdx, %xmm3
    00000430: 	movq	%r15, 0x48(%rbp)
    00000434: 	punpcklqdq	%xmm3, %xmm0
    00000438: 	movq	%rax, 0x30(%rbp)
    0000043c: 	movups	%xmm0, 0x38(%rbp)
    00000440: 	cmpq	%r14, %r12
    00000443: 	jne	.Ltmp5367 # Offset: 1091
.Ltmp5368:
    00000449: 	movq	%rax, %r13
    0000044c: 	jmp	.Ltmp5372 # Offset: 1100
    00000451: 	nopl	(%rax) # Size: 7
.Ltmp5371:
    00000458: 	xorl	%edx, %edx
    0000045a: 	movl	$0x1, %esi
    0000045f: 	movq	%rbp, %rdi
    00000462: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 1122
    00000467: 	movq	0x48(%rbp), %r15
    0000046b: 	jmp	.Ltmp5373 # Offset: 1131
.Ltmp5356:
    0000046d: 	addl	$0x1, 0xa0(%rbp)
    00000474: 	subq	$0x1, 0x8(%rsp)
    0000047a: 	movq	%rax, 0xa8(%rbp)
    00000481: 	jne	.Ltmp5357 # Offset: 1153
    00000487: 	movq	0x10(%rsp), %rbx
    0000048c: 	movq	0x28(%rsp), %r12
    00000491: 	movq	%rax, %r15
    00000494: 	jmp	.Ltmp5358 # Offset: 1172
.Ltmp5350:
    00000496: 	xorl	%r15d, %r15d
.Ltmp5358:
    00000499: 	cmpq	%rbx, %r12
    0000049c: 	je	.Ltmp5374 # Offset: 1180
    000004a2: 	pxor	%xmm2, %xmm2
    000004a6: 	movq	%r15, %rax
    000004a9: 	movapd	%xmm2, %xmm1
    000004ad: 	nopl	(%rax) # Size: 3
.Ltmp5375:
    000004b0: 	movsd	(%rbx), %xmm0
    000004b4: 	movq	%rax, %rdx
    000004b7: 	addq	$0x8, %rbx
    000004bb: 	movq	0x8(%rax), %rax
    000004bf: 	addsd	%xmm0, %xmm1
    000004c3: 	movsd	%xmm0, (%rdx)
    000004c7: 	cmpq	%rbx, %r12
    000004ca: 	jne	.Ltmp5375 # Offset: 1226
.Ltmp5384:
    000004cc: 	movsd	%xmm2, 0x10(%rsp)
    000004d2: 	xorl	%ebx, %ebx
    000004d4: 	leaq	DATAat0x52360(%rip), %r12
    000004db: 	movsd	%xmm1, 0x8(%rsp)
    000004e1: 	callq	clock@PLT # Offset: 1249
    000004e6: 	movl	iterations(%rip), %ecx
    000004ec: 	movsd	0x8(%rsp), %xmm1
    000004f2: 	movq	%rax, start_time(%rip)
    000004f9: 	movsd	0x10(%rsp), %xmm2
    000004ff: 	testl	%ecx, %ecx
    00000501: 	jle	.Ltmp5376 # Offset: 1281
    00000503: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5380:
    00000508: 	movq	%r15, %rax
    0000050b: 	movapd	%xmm2, %xmm0
    0000050f: 	testq	%r15, %r15
    00000512: 	je	.Ltmp5377 # Offset: 1298
    00000514: 	nopl	(%rax) # Size: 4
.Ltmp5378:
    00000518: 	movq	%rax, %rdx
    0000051b: 	movq	0x8(%rax), %rax
    0000051f: 	addsd	(%rdx), %xmm0
    00000523: 	testq	%rax, %rax
    00000526: 	jne	.Ltmp5378 # Offset: 1318
.Ltmp5377:
    00000528: 	ucomisd	%xmm0, %xmm1
    0000052c: 	jp	.Ltmp5379 # Offset: 1324
    00000532: 	jne	.Ltmp5379 # Offset: 1330
    00000538: 	addl	$0x1, %ebx
    0000053b: 	cmpl	%ecx, %ebx
    0000053d: 	jl	.Ltmp5380 # Offset: 1341
.Ltmp5376:
    0000053f: 	movq	0x20(%rsp), %rdi
    00000544: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1348
    00000549: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000550: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000557: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000055e: 	je	.Ltmp5381 # Offset: 1374
.Ltmp5383:
    00000564: 	movq	-0x20(%rax), %r12
    00000568: 	callq	clock@PLT # Offset: 1384
    0000056d: 	pxor	%xmm0, %xmm0
    00000571: 	movq	%r12, %rdi
    00000574: 	movq	%rax, end_time(%rip)
    0000057b: 	subq	start_time(%rip), %rax
    00000582: 	cvtsi2sd	%rax, %xmm0
    00000587: 	divsd	DATAat0x53788(%rip), %xmm0
    0000058f: 	callq	_Z13record_resultdPKc # Offset: 1423
    00000594: 	movq	0x18(%rsp), %rdi
    00000599: 	callq	_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev # Offset: 1433
    0000059e: 	movq	%rbp, %rdi
    000005a1: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 1441
    000005a6: 	addq	$0x58, %rsp
    000005aa: 	movq	%rbp, %rdi
    000005ad: 	movl	$0xb8, %esi
    000005b2: 	popq	%rbx
    000005b3: 	popq	%rbp
    000005b4: 	popq	%r12
    000005b6: 	popq	%r13
    000005b8: 	popq	%r14
    000005ba: 	popq	%r15
    000005bc: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1468
    000005c1: 	nopl	(%rax) # Size: 7
.Ltmp5379:
    000005c8: 	movl	current_test(%rip), %edx
    000005ce: 	xorl	%eax, %eax
    000005d0: 	movq	%r12, %rsi
    000005d3: 	movl	$0x1, %edi
    000005d8: 	movsd	%xmm2, 0x10(%rsp)
    000005de: 	addl	$0x1, %ebx
    000005e1: 	movsd	%xmm1, 0x8(%rsp)
    000005e7: 	callq	__printf_chk@PLT # Offset: 1511
    000005ec: 	movl	iterations(%rip), %ecx
    000005f2: 	movsd	0x8(%rsp), %xmm1
    000005f8: 	movsd	0x10(%rsp), %xmm2
    000005fe: 	cmpl	%ecx, %ebx
    00000600: 	jl	.Ltmp5380 # Offset: 1536
    00000606: 	jmp	.Ltmp5376 # Offset: 1542
    0000060b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5353:
    00000610: 	movabsq	$-0x79e79e79e79e79e7, %rax
    0000061a: 	movq	%rcx, %rdi
    0000061d: 	notq	%rdi
    00000620: 	mulq	%rdi
    00000623: 	subq	%rdx, %rdi
    00000626: 	shrq	%rdi
    00000629: 	leaq	(%rdx,%rdi), %rax
    0000062d: 	shrq	$0x4, %rax
    00000631: 	notq	%rax
    00000634: 	jmp	.Ltmp5382 # Offset: 1588
.Ltmp5381:
    00000639: 	movq	-0x8(%rdx), %rax
    0000063d: 	addq	$0x200, %rax
    00000643: 	jmp	.Ltmp5383 # Offset: 1603
.Ltmp5374:
    00000648: 	pxor	%xmm2, %xmm2
    0000064c: 	movapd	%xmm2, %xmm1
    00000650: 	jmp	.Ltmp5384 # Offset: 1616
.Ltmp5361:
    00000655: 	leaq	(%r14,%r14,2), %rax
    00000659: 	leaq	(%r10,%rax,8), %rax
    0000065d: 	jmp	.Ltmp5385 # Offset: 1629
.Ltmp5360:
    00000662: 	movabsq	$-0x79e79e79e79e79e7, %rax
    0000066c: 	movq	%r8, %r10
    0000066f: 	notq	%r10
    00000672: 	mulq	%r10
    00000675: 	movq	%r10, %rax
    00000678: 	subq	%rdx, %rax
    0000067b: 	shrq	%rax
    0000067e: 	addq	%rdx, %rax
    00000681: 	shrq	$0x4, %rax
    00000685: 	notq	%rax
    00000688: 	jmp	.Ltmp5386 # Offset: 1672
.Ltmp5370:
    0000068d: 	leaq	DATAat0x52330(%rip), %rdi
    00000694: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1684
    00000699: 	endbr64
    0000069d: 	movq	%rax, %r12
    000006a0: 	movq	%rbp, %rdi
    000006a3: 	movl	$0xb8, %esi
    000006a8: 	callq	_ZdlPvm@PLT # Offset: 1704
    000006ad: 	movq	%r12, %rdi
    000006b0: 	callq	_Unwind_Resume@PLT # Offset: 1712
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_accumId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_copyId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 312
  State       : disassembled
  Address     : 0x37ef0
  Size        : 0x706
  MaxSize     : 0x710
  Offset      : 0x37ef0
  Section     : .text
  Orc Section : .local.text._Z9test_copyId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0311:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	movl	$0xb8, %edi
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rsi, %rbx
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x18(%rsp)
    00000022: 	callq	_Znwm@PLT # Offset: 34
    00000027: 	movq	%rax, %rdi
    0000002a: 	movq	%rax, %rbp
    0000002d: 	callq	_ZN27SingleLinkListPoolAllocatorIdEC2Ev # Offset: 45
    00000032: 	movq	%rbx, %rax
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	leaq	0x50(%rbp), %rsi
    0000003d: 	movl	$0x0, 0xa0(%rbp)
    00000047: 	subq	%r12, %rax
    0000004a: 	movq	%rsi, 0x10(%rsp)
    0000004f: 	movq	%rax, %rdi
    00000052: 	movups	%xmm0, 0xa8(%rbp)
    00000059: 	sarq	$0x3, %rdi
    0000005d: 	movq	%rdi, 0x8(%rsp)
    00000062: 	testq	%rax, %rax
    00000065: 	jle	.Ltmp5387 # Offset: 101
    0000006b: 	movq	%r12, 0x20(%rsp)
    00000070: 	movq	%rbx, 0x28(%rsp)
.Ltmp5394:
    00000075: 	movq	0x48(%rbp), %r15
    00000079: 	movq	0x30(%rbp), %r13
    0000007d: 	movq	0x38(%rbp), %rbx
    00000081: 	movq	%r15, %rax
    00000084: 	subq	0x28(%rbp), %rax
    00000088: 	movq	%r13, %rdx
    0000008b: 	sarq	$0x3, %rax
    0000008f: 	cmpq	$0x1, %r15
    00000093: 	adcq	$-0x1, %rax
    00000097: 	subq	%rbx, %rdx
    0000009a: 	sarq	$0x3, %rdx
    0000009e: 	shlq	$0x6, %rax
    000000a2: 	addq	%rdx, %rax
    000000a5: 	movq	0x20(%rbp), %rdx
    000000a9: 	subq	0x10(%rbp), %rdx
    000000ad: 	sarq	$0x3, %rdx
    000000b1: 	addq	%rdx, %rax
    000000b4: 	je	.Ltmp5388 # Offset: 180
.Ltmp5420:
    000000ba: 	cmpq	%rbx, %r13
    000000bd: 	je	.Ltmp5389 # Offset: 189
.Ltmp5411:
    000000c3: 	movq	-0x8(%r13), %r14
    000000c7: 	subq	$0x8, %r13
    000000cb: 	movq	%r13, 0x30(%rbp)
.Ltmp5412:
    000000cf: 	movq	0x60(%rbp), %rax
    000000d3: 	movq	0x78(%rbp), %rsi
    000000d7: 	movabsq	$-0x5555555555555555, %rdi
    000000e1: 	movq	%rax, %rcx
    000000e4: 	subq	0x68(%rbp), %rcx
    000000e8: 	sarq	$0x3, %rcx
    000000ec: 	imulq	%rdi, %rcx
    000000f0: 	addq	%r14, %rcx
    000000f3: 	js	.Ltmp5390 # Offset: 243
    000000f9: 	cmpq	$0x14, %rcx
    000000fd: 	jle	.Ltmp5391 # Offset: 253
    00000103: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    0000010d: 	movq	%rcx, %rax
    00000110: 	imulq	%rdx
    00000113: 	leaq	(%rdx,%rcx), %rax
    00000117: 	movq	%rcx, %rdx
    0000011a: 	sarq	$0x4, %rax
    0000011e: 	sarq	$0x3f, %rdx
    00000122: 	subq	%rdx, %rax
.Ltmp5423:
    00000125: 	leaq	(%rax,%rax,4), %rdx
    00000129: 	leaq	(%rax,%rdx,4), %rdx
    0000012d: 	movq	(%rsi,%rax,8), %rax
    00000131: 	subq	%rdx, %rcx
    00000134: 	leaq	(%rcx,%rcx,2), %rdx
    00000138: 	leaq	(%rax,%rdx,8), %rax
    0000013c: 	movq	%r14, 0x10(%rax)
.Ltmp5413:
    00000140: 	movq	0xb0(%rbp), %rdx
    00000147: 	movq	$0x0, (%rax)
    0000014e: 	movq	$0x0, 0x8(%rax)
    00000156: 	testq	%rdx, %rdx
    00000159: 	je	.Ltmp5392 # Offset: 345
    0000015b: 	movq	%rax, 0x8(%rdx)
.Ltmp5392:
    0000015f: 	cmpq	$0x0, 0xa8(%rbp)
    00000167: 	movq	%rax, 0xb0(%rbp)
    0000016e: 	je	.Ltmp5393 # Offset: 366
    00000174: 	addl	$0x1, 0xa0(%rbp)
    0000017b: 	subq	$0x1, 0x8(%rsp)
    00000181: 	jne	.Ltmp5394 # Offset: 385
.Ltmp5422:
    00000187: 	movq	0x20(%rsp), %r12
    0000018c: 	movq	0x28(%rsp), %rbx
.Ltmp5387:
    00000191: 	cmpq	%r12, %rbx
    00000194: 	je	.Ltmp5395 # Offset: 404
    0000019a: 	movq	%rbx, %rdx
    0000019d: 	movq	%r12, %rax
    000001a0: 	subq	%r12, %rdx
    000001a3: 	leaq	-0x8(%rdx), %rcx
    000001a7: 	shrq	$0x3, %rcx
    000001ab: 	addq	$0x1, %rcx
    000001af: 	cmpq	$0x8, %rdx
    000001b3: 	je	.Ltmp5396 # Offset: 435
    000001b9: 	movq	%rcx, %rdx
    000001bc: 	movq	DATAat0x537b8(%rip), %r13
    000001c3: 	shrq	%rdx
    000001c6: 	shlq	$0x4, %rdx
    000001ca: 	movq	%r13, %xmm1
    000001cf: 	addq	%r12, %rdx
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5397:
    000001d8: 	movsd	(%rax), %xmm0
    000001dc: 	addq	$0x10, %rax
    000001e0: 	addsd	%xmm0, %xmm1
    000001e4: 	movsd	-0x8(%rax), %xmm0
    000001e9: 	addsd	%xmm0, %xmm1
    000001ed: 	cmpq	%rdx, %rax
    000001f0: 	jne	.Ltmp5397 # Offset: 496
    000001f2: 	movq	%rcx, %rdx
    000001f5: 	andq	$-0x2, %rdx
    000001f9: 	leaq	(%r12,%rdx,8), %rax
    000001fd: 	cmpq	%rdx, %rcx
    00000200: 	je	.Ltmp5398 # Offset: 512
.Ltmp5425:
    00000202: 	addsd	(%rax), %xmm1
.Ltmp5398:
    00000206: 	movsd	%xmm1, 0x8(%rsp)
    0000020c: 	callq	clock@PLT # Offset: 524
    00000211: 	movl	iterations(%rip), %edi
    00000217: 	movsd	0x8(%rsp), %xmm1
    0000021d: 	movq	%rax, start_time(%rip)
    00000224: 	testl	%edi, %edi
    00000226: 	jle	.Ltmp5399 # Offset: 550
    00000228: 	movq	0xa8(%rbp), %r8
    0000022f: 	xorl	%esi, %esi
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp5401:
    00000238: 	movq	%r8, %rdx
    0000023b: 	movq	%r12, %rax
    0000023e: 	nop # Size: 2
.Ltmp5400:
    00000240: 	movsd	(%rax), %xmm0
    00000244: 	movq	%rdx, %rcx
    00000247: 	addq	$0x8, %rax
    0000024b: 	movq	0x8(%rdx), %rdx
    0000024f: 	movsd	%xmm0, (%rcx)
    00000253: 	cmpq	%rax, %rbx
    00000256: 	jne	.Ltmp5400 # Offset: 598
    00000258: 	addl	$0x1, %esi
    0000025b: 	cmpl	%edi, %esi
    0000025d: 	jne	.Ltmp5401 # Offset: 605
.Ltmp5399:
    0000025f: 	movq	0x18(%rsp), %rdi
    00000264: 	movsd	%xmm1, 0x8(%rsp)
    0000026a: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 618
    0000026f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000276: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000027d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000284: 	movsd	0x8(%rsp), %xmm1
    0000028a: 	je	.Ltmp5402 # Offset: 650
.Ltmp5424:
    00000290: 	movq	-0x20(%rax), %r12
    00000294: 	movsd	%xmm1, 0x8(%rsp)
    0000029a: 	callq	clock@PLT # Offset: 666
    0000029f: 	pxor	%xmm0, %xmm0
    000002a3: 	movq	%rax, end_time(%rip)
    000002aa: 	movq	%r12, %rdi
    000002ad: 	subq	start_time(%rip), %rax
    000002b4: 	cvtsi2sd	%rax, %xmm0
    000002b9: 	divsd	DATAat0x53788(%rip), %xmm0
    000002c1: 	callq	_Z13record_resultdPKc # Offset: 705
    000002c6: 	movsd	0x8(%rsp), %xmm1
    000002cc: 	movq	%r13, %xmm0
    000002d1: 	movq	0xa8(%rbp), %rax
    000002d8: 	testq	%rax, %rax
    000002db: 	je	.Ltmp5403 # Offset: 731
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp5404:
    000002e0: 	movq	%rax, %rdx
    000002e3: 	movq	0x8(%rax), %rax
    000002e7: 	addsd	(%rdx), %xmm0
    000002eb: 	testq	%rax, %rax
    000002ee: 	jne	.Ltmp5404 # Offset: 750
.Ltmp5403:
    000002f0: 	ucomisd	%xmm1, %xmm0
    000002f4: 	jp	.Ltmp5405 # Offset: 756
    000002fa: 	jne	.Ltmp5405 # Offset: 762
.Ltmp5414:
    00000300: 	movq	0x10(%rsp), %rdi
    00000305: 	callq	_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev # Offset: 773
    0000030a: 	movq	%rbp, %rdi
    0000030d: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 781
    00000312: 	addq	$0x58, %rsp
    00000316: 	movq	%rbp, %rdi
    00000319: 	movl	$0xb8, %esi
    0000031e: 	popq	%rbx
    0000031f: 	popq	%rbp
    00000320: 	popq	%r12
    00000322: 	popq	%r13
    00000324: 	popq	%r14
    00000326: 	popq	%r15
    00000328: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 808
    0000032d: 	nopl	(%rax) # Size: 3
.Ltmp5388:
    00000330: 	movq	0x98(%rbp), %rdi
    00000337: 	movq	0x78(%rbp), %rsi
    0000033b: 	movabsq	$-0x5555555555555555, %rcx
    00000345: 	movq	0x70(%rbp), %rdx
    00000349: 	movq	0x60(%rbp), %r10
    0000034d: 	movq	%rdi, %rax
    00000350: 	subq	%rsi, %rax
    00000353: 	sarq	$0x3, %rax
    00000357: 	cmpq	$0x1, %rdi
    0000035b: 	adcq	$-0x1, %rax
    0000035f: 	leaq	(%rax,%rax,4), %r8
    00000363: 	leaq	(%rax,%r8,4), %r8
    00000367: 	movq	0x80(%rbp), %rax
    0000036e: 	subq	0x88(%rbp), %rax
    00000375: 	sarq	$0x3, %rax
    00000379: 	imulq	%rcx, %rax
    0000037d: 	addq	%rax, %r8
    00000380: 	movq	%rdx, %rax
    00000383: 	subq	%r10, %rax
    00000386: 	sarq	$0x3, %rax
    0000038a: 	imulq	%rcx, %rax
    0000038e: 	leaq	(%r8,%rax), %r12
    00000392: 	leaq	0xaa(%r12), %r14
    0000039a: 	cmpq	%r14, %r12
    0000039d: 	jb	.Ltmp5406 # Offset: 925
    000003a3: 	movq	0x68(%rbp), %r11
    000003a7: 	movq	%r10, %r8
    000003aa: 	movabsq	$-0x5555555555555555, %rax
    000003b4: 	subq	%r11, %r8
    000003b7: 	sarq	$0x3, %r8
    000003bb: 	imulq	%rax, %r8
    000003bf: 	addq	%r14, %r8
    000003c2: 	js	.Ltmp5407 # Offset: 962
    000003c8: 	cmpq	$0x14, %r8
    000003cc: 	jle	.Ltmp5408 # Offset: 972
    000003d2: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    000003dc: 	movq	%r8, %rax
    000003df: 	imulq	%rdx
    000003e2: 	leaq	(%rdx,%r8), %rax
    000003e6: 	movq	%r8, %rdx
    000003e9: 	sarq	$0x4, %rax
    000003ed: 	sarq	$0x3f, %rdx
    000003f1: 	subq	%rdx, %rax
.Ltmp5427:
    000003f4: 	leaq	(%rax,%rax,4), %r10
    000003f8: 	leaq	(%rsi,%rax,8), %rsi
    000003fc: 	leaq	(%rax,%r10,4), %rax
    00000400: 	movq	(%rsi), %r11
    00000403: 	subq	%rax, %r8
    00000406: 	leaq	(%r8,%r8,2), %rax
    0000040a: 	leaq	0x1f8(%r11), %rdx
    00000411: 	leaq	(%r11,%rax,8), %rax
.Ltmp5426:
    00000415: 	movq	%rax, %xmm4
    0000041a: 	movq	%r11, %xmm6
    0000041f: 	movq	%rdx, %xmm5
    00000424: 	movq	%rsi, %xmm7
    00000429: 	punpcklqdq	%xmm6, %xmm4
    0000042d: 	leaq	0x8(%rdi), %r12
    00000431: 	punpcklqdq	%xmm7, %xmm5
    00000435: 	leaq	0x8(%rsi), %r14
    00000439: 	movaps	%xmm4, 0x30(%rsp)
    0000043e: 	movaps	%xmm5, 0x40(%rsp)
    00000443: 	cmpq	%r14, %r12
    00000446: 	jbe	.Ltmp5409 # Offset: 1094
    00000448: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5410:
    00000450: 	movq	(%r14), %rdi
    00000453: 	movl	$0x1f8, %esi
    00000458: 	addq	$0x8, %r14
    0000045c: 	callq	_ZdlPvm@PLT # Offset: 1116
    00000461: 	cmpq	%r14, %r12
    00000464: 	ja	.Ltmp5410 # Offset: 1124
.Ltmp5409:
    00000466: 	movdqa	0x30(%rsp), %xmm6
    0000046c: 	movdqa	0x40(%rsp), %xmm7
    00000472: 	movups	%xmm6, 0x80(%rbp)
    00000479: 	movups	%xmm7, 0x90(%rbp)
    00000480: 	cmpq	%rbx, %r13
    00000483: 	jne	.Ltmp5411 # Offset: 1155
.Ltmp5389:
    00000489: 	movq	-0x8(%r15), %rax
    0000048d: 	movl	$0x200, %esi
    00000492: 	movq	%r13, %rdi
    00000495: 	movq	0x1f8(%rax), %r14
    0000049c: 	callq	_ZdlPvm@PLT # Offset: 1180
    000004a1: 	movq	-0x8(%r15), %rax
    000004a5: 	leaq	-0x8(%r15), %rcx
    000004a9: 	movq	%rcx, %xmm3
    000004ae: 	addq	$0x1f8, %rax
    000004b4: 	movq	%rax, %xmm0
    000004b9: 	movq	-0x8(%r15), %rax
    000004bd: 	movhps	-0x8(%r15), %xmm0
    000004c2: 	addq	$0x200, %rax
    000004c8: 	movups	%xmm0, 0x30(%rbp)
    000004cc: 	movq	%rax, %xmm0
    000004d1: 	punpcklqdq	%xmm3, %xmm0
    000004d5: 	movups	%xmm0, 0x40(%rbp)
    000004d9: 	jmp	.Ltmp5412 # Offset: 1241
.Ltmp5391:
    000004de: 	leaq	(%r14,%r14,2), %rdx
    000004e2: 	leaq	(%rax,%rdx,8), %rax
    000004e6: 	movq	%r14, 0x10(%rax)
    000004ea: 	jmp	.Ltmp5413 # Offset: 1258
.Ltmp5405:
    000004ef: 	movl	current_test(%rip), %edx
    000004f5: 	leaq	DATAat0x52360(%rip), %rsi
    000004fc: 	movl	$0x1, %edi
    00000501: 	xorl	%eax, %eax
    00000503: 	callq	__printf_chk@PLT # Offset: 1283
    00000508: 	jmp	.Ltmp5414 # Offset: 1288
.Ltmp5406:
    0000050d: 	movq	0x10(%rsp), %rdi
    00000512: 	movl	$0xaa, %esi
    00000517: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1303
    0000051c: 	movq	0x30(%rbp), %r13
    00000520: 	movq	0x40(%rbp), %rdx
    00000524: 	movq	0x48(%rbp), %r15
    00000528: 	movq	0x38(%rbp), %rbx
    0000052c: 	movq	%r13, %rax
    0000052f: 	jmp	.Ltmp5415 # Offset: 1327
    00000531: 	nopl	(%rax) # Size: 7
.Ltmp5417:
    00000538: 	movq	%r14, (%rax)
    0000053b: 	addq	$0x8, %rax
    0000053f: 	movq	%rax, 0x30(%rbp)
    00000543: 	cmpq	%r14, %r12
    00000546: 	je	.Ltmp5416 # Offset: 1350
.Ltmp5415:
    0000054c: 	leaq	-0x8(%rdx), %rcx
    00000550: 	subq	$0x1, %r14
    00000554: 	cmpq	%rcx, %rax
    00000557: 	jne	.Ltmp5417 # Offset: 1367
    00000559: 	movabsq	$0xfffffffffffffff, %rsi
    00000563: 	movq	%r15, %rdx
    00000566: 	subq	0x28(%rbp), %rdx
    0000056a: 	sarq	$0x3, %rdx
    0000056e: 	cmpq	$0x1, %r15
    00000572: 	adcq	$-0x1, %rdx
    00000576: 	subq	%rbx, %rax
    00000579: 	shlq	$0x6, %rdx
    0000057d: 	sarq	$0x3, %rax
    00000581: 	addq	%rdx, %rax
    00000584: 	movq	0x20(%rbp), %rdx
    00000588: 	subq	0x10(%rbp), %rdx
    0000058c: 	sarq	$0x3, %rdx
    00000590: 	addq	%rdx, %rax
    00000593: 	cmpq	%rsi, %rax
    00000596: 	je	.Ltmp5418 # Offset: 1430
    0000059c: 	movq	0x8(%rbp), %rax
    000005a0: 	movq	%r15, %rdx
    000005a3: 	subq	(%rbp), %rdx
    000005a7: 	sarq	$0x3, %rdx
    000005ab: 	subq	%rdx, %rax
    000005ae: 	cmpq	$0x1, %rax
    000005b2: 	jbe	.Ltmp5419 # Offset: 1458
.Ltmp5421:
    000005b4: 	movl	$0x200, %edi
    000005b9: 	addq	$0x8, %r15
    000005bd: 	callq	_Znwm@PLT # Offset: 1469
    000005c2: 	movq	0x30(%rbp), %rdx
    000005c6: 	movq	%rax, (%r15)
    000005c9: 	movq	%rax, %xmm0
    000005ce: 	movq	%rax, %rbx
    000005d1: 	movq	%r14, (%rdx)
    000005d4: 	leaq	0x200(%rax), %rdx
    000005db: 	movq	%rdx, %xmm2
    000005e0: 	movq	%r15, 0x48(%rbp)
    000005e4: 	punpcklqdq	%xmm2, %xmm0
    000005e8: 	movq	%rax, 0x30(%rbp)
    000005ec: 	movups	%xmm0, 0x38(%rbp)
    000005f0: 	cmpq	%r14, %r12
    000005f3: 	jne	.Ltmp5415 # Offset: 1523
.Ltmp5416:
    000005f9: 	movq	%rax, %r13
    000005fc: 	jmp	.Ltmp5420 # Offset: 1532
    00000601: 	nopl	(%rax) # Size: 7
.Ltmp5419:
    00000608: 	xorl	%edx, %edx
    0000060a: 	movl	$0x1, %esi
    0000060f: 	movq	%rbp, %rdi
    00000612: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 1554
    00000617: 	movq	0x48(%rbp), %r15
    0000061b: 	jmp	.Ltmp5421 # Offset: 1563
.Ltmp5393:
    0000061d: 	addl	$0x1, 0xa0(%rbp)
    00000624: 	subq	$0x1, 0x8(%rsp)
    0000062a: 	movq	%rax, 0xa8(%rbp)
    00000631: 	jne	.Ltmp5394 # Offset: 1585
    00000637: 	jmp	.Ltmp5422 # Offset: 1591
    0000063c: 	nopl	(%rax) # Size: 4
.Ltmp5390:
    00000640: 	movabsq	$-0x79e79e79e79e79e7, %rax
    0000064a: 	movq	%rcx, %rdi
    0000064d: 	notq	%rdi
    00000650: 	mulq	%rdi
    00000653: 	subq	%rdx, %rdi
    00000656: 	shrq	%rdi
    00000659: 	leaq	(%rdx,%rdi), %rax
    0000065d: 	shrq	$0x4, %rax
    00000661: 	notq	%rax
    00000664: 	jmp	.Ltmp5423 # Offset: 1636
.Ltmp5402:
    00000669: 	movq	-0x8(%rdx), %rax
    0000066d: 	addq	$0x200, %rax
    00000673: 	jmp	.Ltmp5424 # Offset: 1651
.Ltmp5395:
    00000678: 	callq	clock@PLT # Offset: 1656
    0000067d: 	movq	DATAat0x537b8(%rip), %r13
    00000684: 	movq	%rax, start_time(%rip)
    0000068b: 	movq	%r13, %xmm1
    00000690: 	jmp	.Ltmp5399 # Offset: 1680
.Ltmp5396:
    00000695: 	movq	DATAat0x537b8(%rip), %r13
    0000069c: 	movq	%r13, %xmm1
    000006a1: 	jmp	.Ltmp5425 # Offset: 1697
.Ltmp5408:
    000006a6: 	leaq	(%r14,%r14,2), %rax
    000006aa: 	leaq	(%r10,%rax,8), %rax
    000006ae: 	jmp	.Ltmp5426 # Offset: 1710
.Ltmp5407:
    000006b3: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000006bd: 	movq	%r8, %r10
    000006c0: 	notq	%r10
    000006c3: 	mulq	%r10
    000006c6: 	movq	%r10, %rax
    000006c9: 	subq	%rdx, %rax
    000006cc: 	shrq	%rax
    000006cf: 	addq	%rdx, %rax
    000006d2: 	shrq	$0x4, %rax
    000006d6: 	notq	%rax
    000006d9: 	jmp	.Ltmp5427 # Offset: 1753
.Ltmp5418:
    000006de: 	leaq	DATAat0x52330(%rip), %rdi
    000006e5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1765
    000006ea: 	endbr64
    000006ee: 	movq	%rax, %r12
    000006f1: 	movq	%rbp, %rdi
    000006f4: 	movl	$0xb8, %esi
    000006f9: 	callq	_ZdlPvm@PLT # Offset: 1785
    000006fe: 	movq	%r12, %rdi
    00000701: 	callq	_Unwind_Resume@PLT # Offset: 1793
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_copyId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_accum_unorderedId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 313
  State       : disassembled
  Address     : 0x38600
  Size        : 0x698
  MaxSize     : 0x6a0
  Offset      : 0x38600
  Section     : .text
  Orc Section : .local.text._Z20test_accum_unorderedId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0312:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rsi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0xb8, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x68, %rsp
    0000001d: 	movq	%rdx, 0x40(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x58(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	_Znwm@PLT # Offset: 50
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, %rbp
    0000003d: 	callq	_ZN27SingleLinkListPoolAllocatorIdEC2Ev # Offset: 61
    00000042: 	movq	%r14, %rdx
    00000045: 	leaq	0x50(%rbp), %rax
    00000049: 	pxor	%xmm0, %xmm0
    0000004d: 	movl	$0x0, 0xa0(%rbp)
    00000057: 	subq	%r12, %rdx
    0000005a: 	movq	%rax, 0x10(%rsp)
    0000005f: 	xorl	%eax, %eax
    00000061: 	movups	%xmm0, 0xa8(%rbp)
    00000068: 	testq	%rdx, %rdx
    0000006b: 	jle	.Ltmp5428 # Offset: 107
    00000071: 	sarq	$0x3, %rdx
    00000075: 	movq	%r12, 0x8(%rsp)
    0000007a: 	leaq	0x50(%rsp), %r13
    0000007f: 	movq	%rdx, (%rsp)
    00000083: 	movq	%r14, 0x18(%rsp)
.Ltmp5435:
    00000088: 	movq	0x48(%rbp), %r12
    0000008c: 	movq	0x30(%rbp), %r15
    00000090: 	movq	0x38(%rbp), %r9
    00000094: 	movq	%r12, %rax
    00000097: 	subq	0x28(%rbp), %rax
    0000009b: 	movq	%r15, %rdx
    0000009e: 	sarq	$0x3, %rax
    000000a2: 	cmpq	$0x1, %r12
    000000a6: 	adcq	$-0x1, %rax
    000000aa: 	subq	%r9, %rdx
    000000ad: 	sarq	$0x3, %rdx
    000000b1: 	shlq	$0x6, %rax
    000000b5: 	addq	%rdx, %rax
    000000b8: 	movq	0x20(%rbp), %rdx
    000000bc: 	subq	0x10(%rbp), %rdx
    000000c0: 	sarq	$0x3, %rdx
    000000c4: 	addq	%rdx, %rax
    000000c7: 	je	.Ltmp5429 # Offset: 199
.Ltmp5461:
    000000cd: 	cmpq	%r9, %r15
    000000d0: 	je	.Ltmp5430 # Offset: 208
    000000d6: 	movq	-0x8(%r15), %rbx
    000000da: 	subq	$0x8, %r15
    000000de: 	movq	%r15, 0x30(%rbp)
.Ltmp5454:
    000000e2: 	movq	0x60(%rbp), %rax
    000000e6: 	movq	0x78(%rbp), %rsi
    000000ea: 	movabsq	$-0x5555555555555555, %rdi
    000000f4: 	movq	%rax, %rcx
    000000f7: 	subq	0x68(%rbp), %rcx
    000000fb: 	sarq	$0x3, %rcx
    000000ff: 	imulq	%rdi, %rcx
    00000103: 	addq	%rbx, %rcx
    00000106: 	js	.Ltmp5431 # Offset: 262
    0000010c: 	cmpq	$0x14, %rcx
    00000110: 	jg	.Ltmp5432 # Offset: 272
    00000116: 	leaq	(%rbx,%rbx,2), %rdx
    0000011a: 	leaq	(%rax,%rdx,8), %rdx
    0000011e: 	movq	%rbx, 0x10(%rdx)
.Ltmp5449:
    00000122: 	movq	0xb0(%rbp), %rax
    00000129: 	movq	$0x0, (%rdx)
    00000130: 	movq	$0x0, 0x8(%rdx)
    00000138: 	testq	%rax, %rax
    0000013b: 	je	.Ltmp5433 # Offset: 315
    0000013d: 	movq	%rdx, 0x8(%rax)
.Ltmp5433:
    00000141: 	movq	0xa8(%rbp), %rax
    00000148: 	movq	%rdx, 0xb0(%rbp)
    0000014f: 	testq	%rax, %rax
    00000152: 	je	.Ltmp5434 # Offset: 338
    00000158: 	addl	$0x1, 0xa0(%rbp)
    0000015f: 	subq	$0x1, (%rsp)
    00000164: 	jne	.Ltmp5435 # Offset: 356
    0000016a: 	movq	0x8(%rsp), %r12
    0000016f: 	movq	0x18(%rsp), %r14
.Ltmp5428:
    00000174: 	pxor	%xmm2, %xmm2
    00000178: 	movapd	%xmm2, %xmm1
    0000017c: 	cmpq	%r12, %r14
    0000017f: 	je	.Ltmp5436 # Offset: 383
.Ltmp5437:
    00000181: 	movsd	(%r12), %xmm0
    00000187: 	movq	%rax, %rdx
    0000018a: 	addq	$0x8, %r12
    0000018e: 	movq	0x8(%rax), %rax
    00000192: 	addsd	%xmm0, %xmm1
    00000196: 	movsd	%xmm0, (%rdx)
    0000019a: 	cmpq	%r12, %r14
    0000019d: 	jne	.Ltmp5437 # Offset: 413
.Ltmp5436:
    0000019f: 	movsd	%xmm2, 0x8(%rsp)
    000001a5: 	movsd	%xmm1, (%rsp)
    000001aa: 	callq	clock@PLT # Offset: 426
    000001af: 	movsd	(%rsp), %xmm1
    000001b4: 	movl	iterations(%rip), %r8d
    000001bb: 	movq	%rax, start_time(%rip)
    000001c2: 	movsd	0x8(%rsp), %xmm2
    000001c8: 	testl	%r8d, %r8d
    000001cb: 	jle	.Ltmp5438 # Offset: 459
    000001d1: 	movq	0x80(%rbp), %rbx
    000001d8: 	movq	0x60(%rbp), %r13
    000001dc: 	xorl	%r12d, %r12d
    000001df: 	leaq	DATAat0x52360(%rip), %rcx
    000001e6: 	movq	0x70(%rbp), %r15
    000001ea: 	movq	0x78(%rbp), %r14
.Ltmp5446:
    000001ee: 	cmpq	%r13, %rbx
    000001f1: 	je	.Ltmp5439 # Offset: 497
.Ltmp5456:
    000001f7: 	movq	%r13, %rdi
    000001fa: 	movq	%r15, %rdx
    000001fd: 	movapd	%xmm2, %xmm0
    00000201: 	movq	%r14, %rsi
    00000204: 	leaq	0x18(%rdi), %rax
    00000208: 	cmpq	%rax, %rdx
    0000020b: 	je	.Ltmp5440 # Offset: 523
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp5443:
    00000218: 	cmpq	%rbx, %rax
    0000021b: 	je	.Ltmp5441 # Offset: 539
.Ltmp5444:
    0000021d: 	cmpq	$-0x1, 0x10(%rax)
    00000222: 	jne	.Ltmp5442 # Offset: 546
    00000228: 	addq	$0x18, %rax
    0000022c: 	cmpq	%rax, %rdx
    0000022f: 	jne	.Ltmp5443 # Offset: 559
    00000231: 	movq	0x8(%rsi), %rax
    00000235: 	addq	$0x8, %rsi
    00000239: 	leaq	0x1f8(%rax), %rdx
    00000240: 	cmpq	%rbx, %rax
    00000243: 	jne	.Ltmp5444 # Offset: 579
.Ltmp5441:
    00000245: 	addsd	(%rdi), %xmm0
.Ltmp5457:
    00000249: 	ucomisd	%xmm0, %xmm1
    0000024d: 	jp	.Ltmp5445 # Offset: 589
    00000253: 	jne	.Ltmp5445 # Offset: 595
    00000259: 	addl	$0x1, %r12d
    0000025d: 	cmpl	%r8d, %r12d
    00000260: 	jl	.Ltmp5446 # Offset: 608
.Ltmp5438:
    00000262: 	movq	0x40(%rsp), %rdi
    00000267: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 615
    0000026c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000273: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000027a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000281: 	je	.Ltmp5447 # Offset: 641
.Ltmp5462:
    00000287: 	movq	-0x20(%rax), %r12
    0000028b: 	callq	clock@PLT # Offset: 651
    00000290: 	pxor	%xmm0, %xmm0
    00000294: 	movq	%rax, end_time(%rip)
    0000029b: 	movq	%r12, %rdi
    0000029e: 	subq	start_time(%rip), %rax
    000002a5: 	cvtsi2sd	%rax, %xmm0
    000002aa: 	divsd	DATAat0x53788(%rip), %xmm0
    000002b2: 	callq	_Z13record_resultdPKc # Offset: 690
    000002b7: 	movq	0x10(%rsp), %rdi
    000002bc: 	callq	_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev # Offset: 700
    000002c1: 	movq	%rbp, %rdi
    000002c4: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 708
    000002c9: 	movq	0x58(%rsp), %rax
    000002ce: 	subq	%fs:0x28, %rax
    000002d7: 	jne	.Ltmp5448 # Offset: 727
    000002dd: 	addq	$0x68, %rsp
    000002e1: 	movq	%rbp, %rdi
    000002e4: 	movl	$0xb8, %esi
    000002e9: 	popq	%rbx
    000002ea: 	popq	%rbp
    000002eb: 	popq	%r12
    000002ed: 	popq	%r13
    000002ef: 	popq	%r14
    000002f1: 	popq	%r15
    000002f3: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 755
.Ltmp5432:
    000002f8: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000302: 	movq	%rcx, %rax
    00000305: 	imulq	%rdx
    00000308: 	leaq	(%rdx,%rcx), %rax
    0000030c: 	movq	%rcx, %rdx
    0000030f: 	sarq	$0x4, %rax
    00000313: 	sarq	$0x3f, %rdx
    00000317: 	subq	%rdx, %rax
.Ltmp5455:
    0000031a: 	leaq	(%rax,%rax,4), %rdx
    0000031e: 	leaq	(%rax,%rdx,4), %rdx
    00000322: 	movq	(%rsi,%rax,8), %rax
    00000326: 	subq	%rdx, %rcx
    00000329: 	leaq	(%rcx,%rcx,2), %rdx
    0000032d: 	leaq	(%rax,%rdx,8), %rdx
    00000331: 	movq	%rbx, 0x10(%rdx)
    00000335: 	jmp	.Ltmp5449 # Offset: 821
.Ltmp5429:
    0000033a: 	movq	0x98(%rbp), %rdi
    00000341: 	movq	0x78(%rbp), %rsi
    00000345: 	movabsq	$-0x5555555555555555, %rbx
    0000034f: 	movq	0x70(%rbp), %rax
    00000353: 	movq	0x60(%rbp), %rdx
    00000357: 	movq	%rdi, %rcx
    0000035a: 	subq	%rsi, %rcx
    0000035d: 	sarq	$0x3, %rcx
    00000361: 	cmpq	$0x1, %rdi
    00000365: 	adcq	$-0x1, %rcx
    00000369: 	leaq	(%rcx,%rcx,4), %r10
    0000036d: 	leaq	(%rcx,%r10,4), %r10
    00000371: 	movq	0x80(%rbp), %rcx
    00000378: 	subq	0x88(%rbp), %rcx
    0000037f: 	sarq	$0x3, %rcx
    00000383: 	imulq	%rbx, %rcx
    00000387: 	addq	%r10, %rcx
    0000038a: 	movq	%rax, %r10
    0000038d: 	subq	%rdx, %r10
    00000390: 	sarq	$0x3, %r10
    00000394: 	imulq	%rbx, %r10
    00000398: 	leaq	(%rcx,%r10), %r14
    0000039c: 	leaq	0xaa(%r14), %rbx
    000003a3: 	cmpq	%rbx, %r14
    000003a6: 	jb	.Ltmp5450 # Offset: 934
    000003ac: 	movq	0x68(%rbp), %r10
    000003b0: 	movq	%rdx, %rcx
    000003b3: 	movabsq	$-0x5555555555555555, %r11
    000003bd: 	subq	%r10, %rcx
    000003c0: 	sarq	$0x3, %rcx
    000003c4: 	imulq	%r11, %rcx
    000003c8: 	addq	%rbx, %rcx
    000003cb: 	js	.Ltmp5451 # Offset: 971
    000003d1: 	cmpq	$0x14, %rcx
    000003d5: 	jg	.Ltmp5452 # Offset: 981
    000003db: 	leaq	(%rbx,%rbx,2), %rcx
    000003df: 	leaq	(%rdx,%rcx,8), %rdx
    000003e3: 	jmp	.Ltmp5453 # Offset: 995
    000003e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5434:
    000003f0: 	addl	$0x1, 0xa0(%rbp)
    000003f7: 	subq	$0x1, (%rsp)
    000003fc: 	movq	%rdx, 0xa8(%rbp)
    00000403: 	jne	.Ltmp5435 # Offset: 1027
    00000409: 	movq	0x8(%rsp), %r12
    0000040e: 	movq	0x18(%rsp), %r14
    00000413: 	movq	%rdx, %rax
    00000416: 	jmp	.Ltmp5428 # Offset: 1046
.Ltmp5430:
    0000041b: 	movq	-0x8(%r12), %rax
    00000420: 	movl	$0x200, %esi
    00000425: 	movq	%r15, %rdi
    00000428: 	movq	0x1f8(%rax), %rbx
    0000042f: 	callq	_ZdlPvm@PLT # Offset: 1071
    00000434: 	movq	-0x8(%r12), %rax
    00000439: 	leaq	-0x8(%r12), %r8
    0000043e: 	movq	%r8, %xmm6
    00000443: 	addq	$0x1f8, %rax
    00000449: 	movq	%rax, %xmm0
    0000044e: 	movq	-0x8(%r12), %rax
    00000453: 	movhps	-0x8(%r12), %xmm0
    00000459: 	addq	$0x200, %rax
    0000045f: 	movups	%xmm0, 0x30(%rbp)
    00000463: 	movq	%rax, %xmm0
    00000468: 	punpcklqdq	%xmm6, %xmm0
    0000046c: 	movups	%xmm0, 0x40(%rbp)
    00000470: 	jmp	.Ltmp5454 # Offset: 1136
.Ltmp5431:
    00000475: 	movabsq	$-0x79e79e79e79e79e7, %rax
    0000047f: 	movq	%rcx, %rdi
    00000482: 	notq	%rdi
    00000485: 	mulq	%rdi
    00000488: 	movq	%rdi, %rax
    0000048b: 	subq	%rdx, %rax
    0000048e: 	shrq	%rax
    00000491: 	addq	%rdx, %rax
    00000494: 	shrq	$0x4, %rax
    00000498: 	notq	%rax
    0000049b: 	jmp	.Ltmp5455 # Offset: 1179
.Ltmp5442:
    000004a0: 	addsd	(%rdi), %xmm0
    000004a4: 	movq	%rax, %rdi
    000004a7: 	leaq	0x18(%rdi), %rax
    000004ab: 	cmpq	%rax, %rdx
    000004ae: 	jne	.Ltmp5443 # Offset: 1198
.Ltmp5440:
    000004b4: 	movq	0x8(%rsi), %rax
    000004b8: 	addq	$0x8, %rsi
    000004bc: 	leaq	0x1f8(%rax), %rdx
    000004c3: 	jmp	.Ltmp5443 # Offset: 1219
.Ltmp5445:
    000004c8: 	movl	current_test(%rip), %edx
    000004ce: 	movq	%rcx, %rsi
    000004d1: 	xorl	%eax, %eax
    000004d3: 	movl	$0x1, %edi
    000004d8: 	movsd	%xmm2, 0x8(%rsp)
    000004de: 	addl	$0x1, %r12d
    000004e2: 	movsd	%xmm1, (%rsp)
    000004e7: 	callq	__printf_chk@PLT # Offset: 1255
    000004ec: 	movsd	(%rsp), %xmm1
    000004f1: 	movl	iterations(%rip), %r8d
    000004f8: 	leaq	DATAat0x52360(%rip), %rcx
    000004ff: 	movsd	0x8(%rsp), %xmm2
    00000505: 	cmpl	%r8d, %r12d
    00000508: 	jge	.Ltmp5438 # Offset: 1288
    0000050e: 	cmpq	%r13, %rbx
    00000511: 	jne	.Ltmp5456 # Offset: 1297
.Ltmp5439:
    00000517: 	movapd	%xmm2, %xmm0
    0000051b: 	jmp	.Ltmp5457 # Offset: 1307
.Ltmp5450:
    00000520: 	movq	0x10(%rsp), %rdi
    00000525: 	movl	$0xaa, %esi
    0000052a: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1322
    0000052f: 	movq	0x30(%rbp), %r15
    00000533: 	movq	0x40(%rbp), %rdx
    00000537: 	jmp	.Ltmp5458 # Offset: 1335
    00000539: 	nopl	(%rax) # Size: 7
.Ltmp5460:
    00000540: 	movq	%rbx, (%r15)
    00000543: 	addq	$0x8, %r15
    00000547: 	movq	%r15, 0x30(%rbp)
    0000054b: 	cmpq	%rbx, %r14
    0000054e: 	je	.Ltmp5459 # Offset: 1358
.Ltmp5458:
    00000550: 	subq	$0x1, %rbx
    00000554: 	leaq	-0x8(%rdx), %rax
    00000558: 	movq	%rbx, 0x50(%rsp)
    0000055d: 	cmpq	%rax, %r15
    00000560: 	jne	.Ltmp5460 # Offset: 1376
    00000562: 	movq	%r13, %rsi
    00000565: 	movq	%rbp, %rdi
    00000568: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 1384
    0000056d: 	movq	0x30(%rbp), %r15
    00000571: 	cmpq	%rbx, %r14
    00000574: 	je	.Ltmp5459 # Offset: 1396
    00000576: 	movq	0x40(%rbp), %rdx
    0000057a: 	jmp	.Ltmp5458 # Offset: 1402
.Ltmp5459:
    0000057c: 	movq	0x38(%rbp), %r9
    00000580: 	movq	0x48(%rbp), %r12
    00000584: 	jmp	.Ltmp5461 # Offset: 1412
.Ltmp5447:
    00000589: 	movq	-0x8(%rdx), %rax
    0000058d: 	addq	$0x200, %rax
    00000593: 	jmp	.Ltmp5462 # Offset: 1427
.Ltmp5451:
    00000598: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000005a2: 	movq	%rcx, %r10
    000005a5: 	notq	%r10
    000005a8: 	mulq	%r10
    000005ab: 	movq	%r10, %rax
    000005ae: 	subq	%rdx, %rax
    000005b1: 	shrq	%rax
    000005b4: 	addq	%rax, %rdx
    000005b7: 	shrq	$0x4, %rdx
    000005bb: 	notq	%rdx
.Ltmp5465:
    000005be: 	leaq	(%rdx,%rdx,4), %r11
    000005c2: 	leaq	(%rsi,%rdx,8), %rsi
    000005c6: 	leaq	(%rdx,%r11,4), %rdx
    000005ca: 	movq	(%rsi), %r10
    000005cd: 	subq	%rdx, %rcx
    000005d0: 	leaq	(%rcx,%rcx,2), %rdx
    000005d4: 	leaq	0x1f8(%r10), %rax
    000005db: 	leaq	(%r10,%rdx,8), %rdx
.Ltmp5453:
    000005df: 	movq	%rdx, %xmm3
    000005e4: 	movq	%r10, %xmm5
    000005e9: 	movq	%rax, %xmm4
    000005ee: 	movq	%rsi, %xmm6
    000005f3: 	punpcklqdq	%xmm5, %xmm3
    000005f7: 	leaq	0x8(%rdi), %r14
    000005fb: 	punpcklqdq	%xmm6, %xmm4
    000005ff: 	leaq	0x8(%rsi), %rbx
    00000603: 	movaps	%xmm3, 0x20(%rsp)
    00000608: 	movaps	%xmm4, 0x30(%rsp)
    0000060d: 	cmpq	%rbx, %r14
    00000610: 	jbe	.Ltmp5463 # Offset: 1552
    00000612: 	movq	%r9, 0x48(%rsp)
.Ltmp5464:
    00000617: 	movq	(%rbx), %rdi
    0000061a: 	movl	$0x1f8, %esi
    0000061f: 	addq	$0x8, %rbx
    00000623: 	callq	_ZdlPvm@PLT # Offset: 1571
    00000628: 	cmpq	%rbx, %r14
    0000062b: 	ja	.Ltmp5464 # Offset: 1579
    0000062d: 	movq	0x48(%rsp), %r9
.Ltmp5463:
    00000632: 	movdqa	0x20(%rsp), %xmm7
    00000638: 	movdqa	0x30(%rsp), %xmm5
    0000063e: 	movups	%xmm7, 0x80(%rbp)
    00000645: 	movups	%xmm5, 0x90(%rbp)
    0000064c: 	jmp	.Ltmp5461 # Offset: 1612
.Ltmp5452:
    00000651: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    0000065b: 	movq	%rcx, %rax
    0000065e: 	imulq	%rdx
    00000661: 	movq	%rcx, %rax
    00000664: 	sarq	$0x3f, %rax
    00000668: 	addq	%rcx, %rdx
    0000066b: 	sarq	$0x4, %rdx
    0000066f: 	subq	%rax, %rdx
    00000672: 	jmp	.Ltmp5465 # Offset: 1650
.Ltmp5448:
    00000677: 	callq	__stack_chk_fail@PLT # Offset: 1655
    0000067c: 	endbr64
    00000680: 	movq	%rax, %r12
    00000683: 	movq	%rbp, %rdi
    00000686: 	movl	$0xb8, %esi
    0000068b: 	callq	_ZdlPvm@PLT # Offset: 1675
    00000690: 	movq	%r12, %rdi
    00000693: 	callq	_Unwind_Resume@PLT # Offset: 1683
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_accum_unorderedId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_pushfrontId20PooledSingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 314
  State       : disassembled
  Address     : 0x38ca0
  Size        : 0xda0
  MaxSize     : 0xda0
  Offset      : 0x38ca0
  Section     : .text
  Orc Section : .local.text._Z14test_pushfrontId20PooledSingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0313:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xe8, %rsp
    00000015: 	movq	%rdi, 0x10(%rsp)
    0000001a: 	leaq	0xc0(%rsp), %rbx
    00000022: 	movq	%rsi, 0x18(%rsp)
    00000027: 	movq	%rdx, 0x88(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0xd8(%rsp)
    00000040: 	xorl	%eax, %eax
    00000042: 	callq	clock@PLT # Offset: 66
    00000047: 	movl	$0x0, 0x8(%rsp)
    0000004f: 	movq	%rax, start_time(%rip)
    00000056: 	movl	iterations(%rip), %eax
    0000005c: 	testl	%eax, %eax
    0000005e: 	jle	.Ltmp5466 # Offset: 94
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp5472:
    00000068: 	movl	$0xb8, %edi
    0000006d: 	callq	_Znwm@PLT # Offset: 109
    00000072: 	movq	%rax, %rdi
    00000075: 	movq	%rax, %rbp
    00000078: 	callq	_ZN27SingleLinkListPoolAllocatorIdEC2Ev # Offset: 120
    0000007d: 	movq	0x48(%rbp), %r14
    00000081: 	movq	0x30(%rbp), %rcx
    00000085: 	pxor	%xmm0, %xmm0
    00000089: 	leaq	0x50(%rbp), %r13
    0000008d: 	movq	0x38(%rbp), %r9
    00000091: 	movups	%xmm0, 0xa8(%rbp)
    00000098: 	movl	$0x0, 0xa0(%rbp)
    000000a2: 	movq	%r14, %rax
    000000a5: 	movq	%rcx, %rdx
    000000a8: 	subq	0x28(%rbp), %rax
    000000ac: 	sarq	$0x3, %rax
    000000b0: 	cmpq	$0x1, %r14
    000000b4: 	adcq	$-0x1, %rax
    000000b8: 	subq	%r9, %rdx
    000000bb: 	sarq	$0x3, %rdx
    000000bf: 	shlq	$0x6, %rax
    000000c3: 	addq	%rdx, %rax
    000000c6: 	movq	0x20(%rbp), %rdx
    000000ca: 	subq	0x10(%rbp), %rdx
    000000ce: 	sarq	$0x3, %rdx
    000000d2: 	addq	%rdx, %rax
    000000d5: 	je	.Ltmp5467 # Offset: 213
.Ltmp5508:
    000000db: 	cmpq	%rcx, %r9
    000000de: 	je	.Ltmp5468 # Offset: 222
.Ltmp5502:
    000000e4: 	movq	-0x8(%rcx), %r15
    000000e8: 	subq	$0x8, %rcx
    000000ec: 	movq	%rcx, 0x30(%rbp)
.Ltmp5503:
    000000f0: 	movq	0x60(%rbp), %rax
    000000f4: 	movq	0x78(%rbp), %rsi
    000000f8: 	movabsq	$-0x5555555555555555, %rdx
    00000102: 	movq	%rax, %rcx
    00000105: 	subq	0x68(%rbp), %rcx
    00000109: 	sarq	$0x3, %rcx
    0000010d: 	imulq	%rdx, %rcx
    00000111: 	addq	%r15, %rcx
    00000114: 	js	.Ltmp5469 # Offset: 276
    0000011a: 	cmpq	$0x14, %rcx
    0000011e: 	jg	.Ltmp5470 # Offset: 286
    00000124: 	leaq	(%r15,%r15,2), %rdx
    00000128: 	leaq	(%rax,%rdx,8), %rax
    0000012c: 	movq	%r15, 0x10(%rax)
.Ltmp5496:
    00000130: 	movq	0x10(%rsp), %rdx
    00000135: 	cmpq	$0x0, 0xb0(%rbp)
    0000013d: 	movsd	(%rdx), %xmm0
    00000141: 	movq	0xa8(%rbp), %rdx
    00000148: 	movq	%rax, 0xa8(%rbp)
    0000014f: 	movq	%rdx, 0x8(%rax)
    00000153: 	movsd	%xmm0, (%rax)
    00000157: 	je	.Ltmp5471 # Offset: 343
    0000015d: 	addl	$0x1, 0xa0(%rbp)
    00000164: 	movq	%r13, %rdi
    00000167: 	callq	_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev # Offset: 359
    0000016c: 	movq	%rbp, %rdi
    0000016f: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 367
    00000174: 	movl	$0xb8, %esi
    00000179: 	movq	%rbp, %rdi
    0000017c: 	callq	_ZdlPvm@PLT # Offset: 380
    00000181: 	addl	$0x1, 0x8(%rsp)
    00000186: 	movl	0x8(%rsp), %eax
    0000018a: 	cmpl	%eax, iterations(%rip)
    00000190: 	jg	.Ltmp5472 # Offset: 400
.Ltmp5466:
    00000196: 	callq	clock@PLT # Offset: 406
    0000019b: 	movq	0x18(%rsp), %rcx
    000001a0: 	xorl	%edx, %edx
    000001a2: 	subq	0x10(%rsp), %rcx
    000001a7: 	movq	%rax, 0x78(%rsp)
    000001ac: 	movq	%rax, end_time(%rip)
    000001b3: 	movq	start_time(%rip), %rax
    000001ba: 	movq	%rax, 0x80(%rsp)
    000001c2: 	movabsq	$0x500000000, %rax
    000001cc: 	divq	%rcx
    000001cf: 	movq	%rax, 0x8(%rsp)
    000001d4: 	cmpq	$0x3e8, %rax
    000001da: 	ja	.Ltmp5473 # Offset: 474
    000001e0: 	cmpq	$0x3, 0x8(%rsp)
    000001e6: 	ja	.Ltmp5474 # Offset: 486
    000001ec: 	movq	$0x0, 0xd0(%rsp)
    000001f8: 	pxor	%xmm0, %xmm0
    000001fc: 	movq	$0x4, 0x8(%rsp)
    00000205: 	movaps	%xmm0, 0xc0(%rsp)
.Ltmp5522:
    0000020d: 	movq	0x8(%rsp), %rbx
    00000212: 	leaq	0xc0(%rsp), %rdi
    0000021a: 	movq	%rbx, %rsi
    0000021d: 	callq	_ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 541
    00000222: 	movq	0xc0(%rsp), %rdx
    0000022a: 	movl	iterations(%rip), %eax
    00000230: 	movq	%rdx, 0x50(%rsp)
    00000235: 	testl	%eax, %eax
    00000237: 	jle	.Ltmp5475 # Offset: 567
    0000023d: 	addq	$0x8, %rdx
    00000241: 	movl	%ebx, 0x64(%rsp)
    00000245: 	pxor	%xmm5, %xmm5
    00000249: 	leaq	0xb8(%rsp), %r13
    00000251: 	movl	$0x0, 0x20(%rsp)
    00000259: 	movq	%rdx, 0x70(%rsp)
    0000025e: 	movsd	%xmm5, 0x58(%rsp)
.Ltmp5492:
    00000264: 	movslq	0x20(%rsp), %rdx
    00000269: 	movslq	%eax, %rcx
    0000026c: 	movq	%rdx, %rsi
    0000026f: 	addq	0x8(%rsp), %rdx
    00000274: 	subl	%esi, %eax
    00000276: 	cmpq	%rcx, %rdx
    00000279: 	cmovbl	0x64(%rsp), %eax
    0000027e: 	movl	%eax, %ebx
    00000280: 	callq	clock@PLT # Offset: 640
    00000285: 	movq	0x70(%rsp), %rsi
    0000028a: 	movq	0x50(%rsp), %rdx
    0000028f: 	movq	%rax, start_time(%rip)
    00000296: 	leal	-0x1(%rbx), %eax
    00000299: 	leaq	(%rsi,%rax,8), %rax
    0000029d: 	movq	%rdx, 0x68(%rsp)
    000002a2: 	movq	%rax, 0x40(%rsp)
    000002a7: 	movq	%rdx, 0x30(%rsp)
.Ltmp5483:
    000002ac: 	movl	$0xb8, %edi
    000002b1: 	callq	_Znwm@PLT # Offset: 689
    000002b6: 	movq	$0x0, (%rax)
    000002bd: 	pxor	%xmm0, %xmm0
    000002c1: 	xorl	%esi, %esi
    000002c3: 	movq	%rax, %rdi
    000002c6: 	movq	$0x0, 0x8(%rax)
    000002ce: 	movq	%rax, %rbp
    000002d1: 	movups	%xmm0, 0x10(%rax)
    000002d5: 	movups	%xmm0, 0x20(%rax)
    000002d9: 	movups	%xmm0, 0x30(%rax)
    000002dd: 	movups	%xmm0, 0x40(%rax)
    000002e1: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 737
    000002e6: 	movq	$0x0, 0x50(%rbp)
    000002ee: 	pxor	%xmm0, %xmm0
    000002f2: 	movl	$0x40, %edi
    000002f7: 	movq	$0x8, 0x58(%rbp)
    000002ff: 	movups	%xmm0, 0x60(%rbp)
    00000303: 	movups	%xmm0, 0x70(%rbp)
    00000307: 	movups	%xmm0, 0x80(%rbp)
    0000030e: 	movups	%xmm0, 0x90(%rbp)
    00000315: 	callq	_Znwm@PLT # Offset: 789
    0000031a: 	movq	0x58(%rbp), %rdx
    0000031e: 	movq	%rax, 0x50(%rbp)
    00000322: 	movl	$0x1f8, %edi
    00000327: 	leaq	-0x4(,%rdx,4), %rdx
    0000032f: 	andq	$-0x8, %rdx
    00000333: 	leaq	(%rax,%rdx), %r15
    00000337: 	callq	_Znwm@PLT # Offset: 823
    0000033c: 	movq	%rax, %rsi
    0000033f: 	movq	%rax, %xmm1
    00000344: 	movq	%rax, (%r15)
    00000347: 	movq	%r15, %xmm7
    0000034c: 	leaq	0x1f8(%rax), %rax
    00000353: 	punpcklqdq	%xmm1, %xmm1
    00000357: 	movq	%rsi, %r8
    0000035a: 	movl	$0x0, 0xa0(%rbp)
    00000364: 	movq	%rax, %xmm0
    00000369: 	leaq	0x50(%rbp), %rax
    0000036d: 	movups	%xmm1, 0x60(%rbp)
    00000371: 	punpcklqdq	%xmm7, %xmm0
    00000375: 	movq	%rax, 0x48(%rsp)
    0000037a: 	movq	0x10(%rsp), %rax
    0000037f: 	movups	%xmm0, 0x70(%rbp)
    00000383: 	movups	%xmm0, 0x90(%rbp)
    0000038a: 	pxor	%xmm0, %xmm0
    0000038e: 	movq	%rax, %r14
    00000391: 	movups	%xmm1, 0x80(%rbp)
    00000398: 	movups	%xmm0, 0xa8(%rbp)
    0000039f: 	cmpq	%rax, 0x18(%rsp)
    000003a4: 	je	.Ltmp5476 # Offset: 932
    000003aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5482:
    000003b0: 	movq	0x48(%rbp), %rcx
    000003b4: 	movq	0x30(%rbp), %rdi
    000003b8: 	addq	$0x8, %r14
    000003bc: 	movq	0x38(%rbp), %r9
    000003c0: 	movq	%rcx, %rax
    000003c3: 	subq	0x28(%rbp), %rax
    000003c7: 	movq	%rdi, %rdx
    000003ca: 	sarq	$0x3, %rax
    000003ce: 	cmpq	$0x1, %rcx
    000003d2: 	adcq	$-0x1, %rax
    000003d6: 	subq	%r9, %rdx
    000003d9: 	sarq	$0x3, %rdx
    000003dd: 	shlq	$0x6, %rax
    000003e1: 	addq	%rdx, %rax
    000003e4: 	movq	0x20(%rbp), %rdx
    000003e8: 	subq	0x10(%rbp), %rdx
    000003ec: 	sarq	$0x3, %rdx
    000003f0: 	addq	%rdx, %rax
    000003f3: 	je	.Ltmp5477 # Offset: 1011
.Ltmp5521:
    000003f9: 	cmpq	%r9, %rdi
    000003fc: 	je	.Ltmp5478 # Offset: 1020
.Ltmp5515:
    00000402: 	movq	-0x8(%rdi), %rbx
    00000406: 	subq	$0x8, %rdi
    0000040a: 	movq	%rdi, 0x30(%rbp)
.Ltmp5516:
    0000040e: 	movq	0x60(%rbp), %rsi
    00000412: 	movq	0x68(%rbp), %r8
    00000416: 	movabsq	$-0x5555555555555555, %rax
    00000420: 	movq	0x78(%rbp), %r15
    00000424: 	movq	%rsi, %rcx
    00000427: 	subq	%r8, %rcx
    0000042a: 	sarq	$0x3, %rcx
    0000042e: 	imulq	%rax, %rcx
    00000432: 	addq	%rbx, %rcx
    00000435: 	js	.Ltmp5479 # Offset: 1077
    0000043b: 	cmpq	$0x14, %rcx
    0000043f: 	jg	.Ltmp5480 # Offset: 1087
    00000445: 	leaq	(%rbx,%rbx,2), %rax
    00000449: 	leaq	(%rsi,%rax,8), %rax
    0000044d: 	movq	%rbx, 0x10(%rax)
.Ltmp5509:
    00000451: 	movsd	-0x8(%r14), %xmm0
    00000457: 	movq	0xa8(%rbp), %rdx
    0000045e: 	cmpq	$0x0, 0xb0(%rbp)
    00000466: 	movq	%rdx, 0x8(%rax)
    0000046a: 	movsd	%xmm0, (%rax)
    0000046e: 	movq	%rax, 0xa8(%rbp)
    00000475: 	je	.Ltmp5481 # Offset: 1141
    0000047b: 	addl	$0x1, 0xa0(%rbp)
    00000482: 	cmpq	%r14, 0x18(%rsp)
    00000487: 	jne	.Ltmp5482 # Offset: 1159
.Ltmp5476:
    0000048d: 	movq	0x30(%rsp), %rax
    00000492: 	movq	%rbp, (%rax)
    00000495: 	addq	$0x8, %rax
    00000499: 	movq	%rax, 0x30(%rsp)
    0000049e: 	cmpq	%rax, 0x40(%rsp)
    000004a3: 	jne	.Ltmp5483 # Offset: 1187
    000004a9: 	callq	clock@PLT # Offset: 1193
    000004ae: 	pxor	%xmm0, %xmm0
    000004b2: 	movq	0x40(%rsp), %r14
    000004b7: 	movq	0x68(%rsp), %r12
    000004bc: 	movq	%rax, end_time(%rip)
    000004c3: 	subq	start_time(%rip), %rax
    000004ca: 	cvtsi2sd	%rax, %xmm0
    000004cf: 	divsd	DATAat0x53788(%rip), %xmm0
    000004d7: 	addsd	0x58(%rsp), %xmm0
    000004dd: 	movsd	%xmm0, 0x58(%rsp)
.Ltmp5491:
    000004e3: 	movq	(%r12), %rbp
    000004e7: 	testq	%rbp, %rbp
    000004ea: 	je	.Ltmp5484 # Offset: 1258
    000004f0: 	movq	0x50(%rbp), %rdi
    000004f4: 	testq	%rdi, %rdi
    000004f7: 	je	.Ltmp5485 # Offset: 1271
    000004f9: 	movq	0x98(%rbp), %rax
    00000500: 	movq	0x78(%rbp), %rbx
    00000504: 	leaq	0x8(%rax), %r15
    00000508: 	cmpq	%rbx, %r15
    0000050b: 	jbe	.Ltmp5486 # Offset: 1291
    0000050d: 	nopl	(%rax) # Size: 3
.Ltmp5487:
    00000510: 	movq	(%rbx), %rdi
    00000513: 	movl	$0x1f8, %esi
    00000518: 	addq	$0x8, %rbx
    0000051c: 	callq	_ZdlPvm@PLT # Offset: 1308
    00000521: 	cmpq	%rbx, %r15
    00000524: 	ja	.Ltmp5487 # Offset: 1316
    00000526: 	movq	0x50(%rbp), %rdi
.Ltmp5486:
    0000052a: 	movq	0x58(%rbp), %rax
    0000052e: 	leaq	(,%rax,8), %rsi
    00000536: 	callq	_ZdlPvm@PLT # Offset: 1334
.Ltmp5485:
    0000053b: 	movq	(%rbp), %rdi
    0000053f: 	testq	%rdi, %rdi
    00000542: 	je	.Ltmp5488 # Offset: 1346
    00000544: 	movq	0x48(%rbp), %rax
    00000548: 	movq	0x28(%rbp), %rbx
    0000054c: 	leaq	0x8(%rax), %r15
    00000550: 	cmpq	%rbx, %r15
    00000553: 	jbe	.Ltmp5489 # Offset: 1363
    00000555: 	nopl	(%rax) # Size: 3
.Ltmp5490:
    00000558: 	movq	(%rbx), %rdi
    0000055b: 	movl	$0x200, %esi
    00000560: 	addq	$0x8, %rbx
    00000564: 	callq	_ZdlPvm@PLT # Offset: 1380
    00000569: 	cmpq	%rbx, %r15
    0000056c: 	ja	.Ltmp5490 # Offset: 1388
    0000056e: 	movq	(%rbp), %rdi
.Ltmp5489:
    00000572: 	movq	0x8(%rbp), %rax
    00000576: 	leaq	(,%rax,8), %rsi
    0000057e: 	callq	_ZdlPvm@PLT # Offset: 1406
.Ltmp5488:
    00000583: 	movl	$0xb8, %esi
    00000588: 	movq	%rbp, %rdi
    0000058b: 	callq	_ZdlPvm@PLT # Offset: 1419
.Ltmp5484:
    00000590: 	movq	$0x0, (%r12)
    00000598: 	addq	$0x8, %r12
    0000059c: 	cmpq	%r12, %r14
    0000059f: 	jne	.Ltmp5491 # Offset: 1439
    000005a5: 	movl	0x8(%rsp), %edx
    000005a9: 	movl	iterations(%rip), %eax
    000005af: 	addl	%edx, 0x20(%rsp)
    000005b3: 	movl	0x20(%rsp), %edx
    000005b7: 	cmpl	%edx, %eax
    000005b9: 	jg	.Ltmp5492 # Offset: 1465
.Ltmp5528:
    000005bf: 	movq	0x88(%rsp), %rdi
    000005c7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1479
    000005cc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005d3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000005da: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005e1: 	je	.Ltmp5493 # Offset: 1505
.Ltmp5527:
    000005e7: 	movsd	0x58(%rsp), %xmm1
    000005ed: 	movq	-0x20(%rax), %rdi
    000005f1: 	pxor	%xmm0, %xmm0
    000005f5: 	movq	0x78(%rsp), %rax
    000005fa: 	subq	0x80(%rsp), %rax
    00000602: 	cvtsi2sd	%rax, %xmm0
    00000607: 	divsd	DATAat0x53788(%rip), %xmm0
    0000060f: 	subsd	%xmm0, %xmm1
    00000613: 	movapd	%xmm1, %xmm0
    00000617: 	callq	_Z13record_resultdPKc # Offset: 1559
    0000061c: 	cmpq	$0x0, 0x50(%rsp)
    00000622: 	je	.Ltmp5494 # Offset: 1570
    00000628: 	movq	0xd8(%rsp), %rax
    00000630: 	subq	%fs:0x28, %rax
    00000639: 	jne	.Ltmp5495 # Offset: 1593
    0000063f: 	movq	0xd0(%rsp), %rsi
    00000647: 	movq	0x50(%rsp), %rdi
    0000064c: 	addq	$0xe8, %rsp
    00000653: 	popq	%rbx
    00000654: 	popq	%rbp
    00000655: 	subq	%rdi, %rsi
    00000658: 	popq	%r12
    0000065a: 	popq	%r13
    0000065c: 	popq	%r14
    0000065e: 	popq	%r15
    00000660: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1632
    00000665: 	nopl	(%rax) # Size: 3
.Ltmp5470:
    00000668: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000672: 	movq	%rcx, %rax
    00000675: 	imulq	%rdx
    00000678: 	leaq	(%rdx,%rcx), %rax
    0000067c: 	movq	%rcx, %rdx
    0000067f: 	sarq	$0x4, %rax
    00000683: 	sarq	$0x3f, %rdx
    00000687: 	subq	%rdx, %rax
.Ltmp5504:
    0000068a: 	leaq	(%rax,%rax,4), %rdx
    0000068e: 	leaq	(%rax,%rdx,4), %rdx
    00000692: 	movq	(%rsi,%rax,8), %rax
    00000696: 	subq	%rdx, %rcx
    00000699: 	leaq	(%rcx,%rcx,2), %rdx
    0000069d: 	leaq	(%rax,%rdx,8), %rax
    000006a1: 	movq	%r15, 0x10(%rax)
    000006a5: 	jmp	.Ltmp5496 # Offset: 1701
.Ltmp5467:
    000006aa: 	movq	0x98(%rbp), %rdi
    000006b1: 	movq	0x78(%rbp), %rsi
    000006b5: 	movabsq	$-0x5555555555555555, %r8
    000006bf: 	movq	0x70(%rbp), %rdx
    000006c3: 	movq	0x60(%rbp), %r10
    000006c7: 	movq	%rdi, %rax
    000006ca: 	subq	%rsi, %rax
    000006cd: 	sarq	$0x3, %rax
    000006d1: 	cmpq	$0x1, %rdi
    000006d5: 	adcq	$-0x1, %rax
    000006d9: 	leaq	(%rax,%rax,4), %r11
    000006dd: 	leaq	(%rax,%r11,4), %r11
    000006e1: 	movq	0x80(%rbp), %rax
    000006e8: 	subq	0x88(%rbp), %rax
    000006ef: 	sarq	$0x3, %rax
    000006f3: 	imulq	%r8, %rax
    000006f7: 	addq	%r11, %rax
    000006fa: 	movq	%rdx, %r11
    000006fd: 	subq	%r10, %r11
    00000700: 	sarq	$0x3, %r11
    00000704: 	imulq	%r8, %r11
    00000708: 	leaq	(%rax,%r11), %r12
    0000070c: 	leaq	0xaa(%r12), %r15
    00000714: 	cmpq	%r15, %r12
    00000717: 	jb	.Ltmp5497 # Offset: 1815
    0000071d: 	movq	0x68(%rbp), %r8
    00000721: 	movq	%r10, %rax
    00000724: 	movabsq	$-0x5555555555555555, %r11
    0000072e: 	subq	%r8, %rax
    00000731: 	sarq	$0x3, %rax
    00000735: 	imulq	%r11, %rax
    00000739: 	addq	%r15, %rax
    0000073c: 	movq	%rax, %r11
    0000073f: 	js	.Ltmp5498 # Offset: 1855
    00000745: 	cmpq	$0x14, %rax
    00000749: 	jle	.Ltmp5499 # Offset: 1865
    0000074f: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000759: 	imulq	%rdx
    0000075c: 	leaq	(%rdx,%r11), %rax
    00000760: 	movq	%r11, %rdx
    00000763: 	sarq	$0x4, %rax
    00000767: 	sarq	$0x3f, %rdx
    0000076b: 	subq	%rdx, %rax
.Ltmp5523:
    0000076e: 	leaq	(%rax,%rax,4), %r10
    00000772: 	leaq	(%rsi,%rax,8), %rsi
    00000776: 	leaq	(%rax,%r10,4), %rax
    0000077a: 	movq	(%rsi), %r8
    0000077d: 	subq	%rax, %r11
    00000780: 	leaq	(%r11,%r11,2), %rax
    00000784: 	leaq	0x1f8(%r8), %rdx
    0000078b: 	leaq	(%r8,%rax,8), %rax
.Ltmp5524:
    0000078f: 	movq	%rax, %xmm5
    00000794: 	movq	%r8, %xmm7
    00000799: 	movq	%rdx, %xmm6
    0000079e: 	movq	%rsi, %xmm3
    000007a3: 	punpcklqdq	%xmm7, %xmm5
    000007a7: 	leaq	0x8(%rdi), %r12
    000007ab: 	punpcklqdq	%xmm3, %xmm6
    000007af: 	leaq	0x8(%rsi), %r15
    000007b3: 	movaps	%xmm5, 0x20(%rsp)
    000007b8: 	movaps	%xmm6, 0x30(%rsp)
    000007bd: 	cmpq	%r15, %r12
    000007c0: 	jbe	.Ltmp5500 # Offset: 1984
    000007c2: 	movq	%rcx, 0x40(%rsp)
    000007c7: 	movq	%rbx, 0x48(%rsp)
    000007cc: 	movq	%r15, %rbx
    000007cf: 	movq	%r9, %r15
    000007d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5501:
    000007d8: 	movq	(%rbx), %rdi
    000007db: 	movl	$0x1f8, %esi
    000007e0: 	addq	$0x8, %rbx
    000007e4: 	callq	_ZdlPvm@PLT # Offset: 2020
    000007e9: 	cmpq	%rbx, %r12
    000007ec: 	ja	.Ltmp5501 # Offset: 2028
    000007ee: 	movq	0x40(%rsp), %rcx
    000007f3: 	movq	0x48(%rsp), %rbx
    000007f8: 	movq	%r15, %r9
.Ltmp5500:
    000007fb: 	movdqa	0x20(%rsp), %xmm4
    00000801: 	movdqa	0x30(%rsp), %xmm7
    00000807: 	movups	%xmm4, 0x80(%rbp)
    0000080e: 	movups	%xmm7, 0x90(%rbp)
    00000815: 	cmpq	%rcx, %r9
    00000818: 	jne	.Ltmp5502 # Offset: 2072
.Ltmp5468:
    0000081e: 	movq	-0x8(%r14), %rax
    00000822: 	movl	$0x200, %esi
    00000827: 	movq	%r9, %rdi
    0000082a: 	movq	0x1f8(%rax), %r15
    00000831: 	callq	_ZdlPvm@PLT # Offset: 2097
    00000836: 	movq	-0x8(%r14), %rax
    0000083a: 	leaq	-0x8(%r14), %r8
    0000083e: 	movq	%r8, %xmm2
    00000843: 	addq	$0x1f8, %rax
    00000849: 	movq	%rax, %xmm0
    0000084e: 	movq	-0x8(%r14), %rax
    00000852: 	movhps	-0x8(%r14), %xmm0
    00000857: 	addq	$0x200, %rax
    0000085d: 	movups	%xmm0, 0x30(%rbp)
    00000861: 	movq	%rax, %xmm0
    00000866: 	punpcklqdq	%xmm2, %xmm0
    0000086a: 	movups	%xmm0, 0x40(%rbp)
    0000086e: 	jmp	.Ltmp5503 # Offset: 2158
.Ltmp5471:
    00000873: 	addl	$0x1, 0xa0(%rbp)
    0000087a: 	movq	%r13, %rdi
    0000087d: 	movq	%rax, 0xb0(%rbp)
    00000884: 	callq	_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev # Offset: 2180
    00000889: 	movq	%rbp, %rdi
    0000088c: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2188
    00000891: 	movl	$0xb8, %esi
    00000896: 	movq	%rbp, %rdi
    00000899: 	callq	_ZdlPvm@PLT # Offset: 2201
    0000089e: 	addl	$0x1, 0x8(%rsp)
    000008a3: 	movl	0x8(%rsp), %eax
    000008a7: 	cmpl	iterations(%rip), %eax
    000008ad: 	jl	.Ltmp5472 # Offset: 2221
    000008b3: 	jmp	.Ltmp5466 # Offset: 2227
    000008b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5469:
    000008c0: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000008ca: 	movq	%rcx, %rdi
    000008cd: 	notq	%rdi
    000008d0: 	mulq	%rdi
    000008d3: 	subq	%rdx, %rdi
    000008d6: 	shrq	%rdi
    000008d9: 	leaq	(%rdx,%rdi), %rax
    000008dd: 	shrq	$0x4, %rax
    000008e1: 	notq	%rax
    000008e4: 	jmp	.Ltmp5504 # Offset: 2276
.Ltmp5497:
    000008e9: 	movl	$0xaa, %esi
    000008ee: 	movq	%r13, %rdi
    000008f1: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2289
    000008f6: 	movq	0x30(%rbp), %rcx
    000008fa: 	movq	0x40(%rbp), %rsi
    000008fe: 	jmp	.Ltmp5505 # Offset: 2302
.Ltmp5507:
    00000900: 	movq	%r15, (%rcx)
    00000903: 	addq	$0x8, %rcx
    00000907: 	movq	%rcx, 0x30(%rbp)
    0000090b: 	cmpq	%r15, %r12
    0000090e: 	je	.Ltmp5506 # Offset: 2318
.Ltmp5505:
    00000910: 	subq	$0x1, %r15
    00000914: 	leaq	-0x8(%rsi), %rax
    00000918: 	movq	%r15, 0xc0(%rsp)
    00000920: 	cmpq	%rax, %rcx
    00000923: 	jne	.Ltmp5507 # Offset: 2339
    00000925: 	movq	%rbx, %rsi
    00000928: 	movq	%rbp, %rdi
    0000092b: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2347
    00000930: 	movq	0x30(%rbp), %rcx
    00000934: 	cmpq	%r15, %r12
    00000937: 	je	.Ltmp5506 # Offset: 2359
    00000939: 	movq	0x40(%rbp), %rsi
    0000093d: 	jmp	.Ltmp5505 # Offset: 2365
.Ltmp5506:
    0000093f: 	movq	0x38(%rbp), %r9
    00000943: 	movq	0x48(%rbp), %r14
    00000947: 	jmp	.Ltmp5508 # Offset: 2375
.Ltmp5480:
    0000094c: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000956: 	movq	%rcx, %rax
    00000959: 	imulq	%rdx
    0000095c: 	leaq	(%rdx,%rcx), %rax
    00000960: 	movq	%rcx, %rdx
    00000963: 	sarq	$0x4, %rax
    00000967: 	sarq	$0x3f, %rdx
    0000096b: 	subq	%rdx, %rax
.Ltmp5517:
    0000096e: 	leaq	(%rax,%rax,4), %rdx
    00000972: 	leaq	(%rax,%rdx,4), %rdx
    00000976: 	movq	(%r15,%rax,8), %rax
    0000097a: 	subq	%rdx, %rcx
    0000097d: 	leaq	(%rcx,%rcx,2), %rdx
    00000981: 	leaq	(%rax,%rdx,8), %rax
    00000985: 	movq	%rbx, 0x10(%rax)
    00000989: 	jmp	.Ltmp5509 # Offset: 2441
.Ltmp5477:
    0000098e: 	movq	0x98(%rbp), %r10
    00000995: 	movq	0x80(%rbp), %r12
    0000099c: 	movabsq	$-0x5555555555555555, %rbx
    000009a6: 	movq	0x70(%rbp), %rax
    000009aa: 	movq	%r10, %rdx
    000009ad: 	subq	%r15, %rdx
    000009b0: 	sarq	$0x3, %rdx
    000009b4: 	cmpq	$0x1, %r10
    000009b8: 	adcq	$-0x1, %rdx
    000009bc: 	subq	0x88(%rbp), %r12
    000009c3: 	sarq	$0x3, %r12
    000009c7: 	leaq	(%rdx,%rdx,4), %r11
    000009cb: 	imulq	%rbx, %r12
    000009cf: 	leaq	(%rdx,%r11,4), %rdx
    000009d3: 	addq	%rdx, %r12
    000009d6: 	movq	%rax, %rdx
    000009d9: 	subq	%rsi, %rdx
    000009dc: 	sarq	$0x3, %rdx
    000009e0: 	imulq	%rbx, %rdx
    000009e4: 	addq	%rdx, %r12
    000009e7: 	leaq	0xaa(%r12), %rbx
    000009ef: 	cmpq	%rbx, %r12
    000009f2: 	jb	.Ltmp5510 # Offset: 2546
    000009f8: 	movabsq	$-0x5555555555555555, %rdx
    00000a02: 	movq	%rsi, %r11
    00000a05: 	subq	%r8, %r11
    00000a08: 	sarq	$0x3, %r11
    00000a0c: 	imulq	%rdx, %r11
    00000a10: 	addq	%rbx, %r11
    00000a13: 	js	.Ltmp5511 # Offset: 2579
    00000a19: 	cmpq	$0x14, %r11
    00000a1d: 	jle	.Ltmp5512 # Offset: 2589
    00000a23: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000a2d: 	movq	%r11, %rax
    00000a30: 	imulq	%rdx
    00000a33: 	movq	%r11, %rax
    00000a36: 	sarq	$0x3f, %rax
    00000a3a: 	addq	%r11, %rdx
    00000a3d: 	sarq	$0x4, %rdx
    00000a41: 	subq	%rax, %rdx
.Ltmp5526:
    00000a44: 	leaq	(%rdx,%rdx,4), %rsi
    00000a48: 	leaq	(%r15,%rdx,8), %r15
    00000a4c: 	leaq	(%rdx,%rsi,4), %rdx
    00000a50: 	movq	(%r15), %r8
    00000a53: 	subq	%rdx, %r11
    00000a56: 	leaq	(%r11,%r11,2), %rdx
    00000a5a: 	leaq	0x1f8(%r8), %rax
    00000a61: 	leaq	(%r8,%rdx,8), %rdx
.Ltmp5525:
    00000a65: 	movq	%r8, %xmm6
    00000a6a: 	movq	%rdx, %xmm5
    00000a6f: 	leaq	0x8(%r10), %rbx
    00000a73: 	punpcklqdq	%xmm6, %xmm5
    00000a77: 	movq	%rax, %xmm6
    00000a7c: 	movaps	%xmm5, 0x90(%rsp)
    00000a84: 	movq	%r15, %xmm5
    00000a89: 	addq	$0x8, %r15
    00000a8d: 	punpcklqdq	%xmm5, %xmm6
    00000a91: 	movaps	%xmm6, 0xa0(%rsp)
    00000a99: 	cmpq	%r15, %rbx
    00000a9c: 	jbe	.Ltmp5513 # Offset: 2716
    00000a9e: 	nop # Size: 2
.Ltmp5514:
    00000aa0: 	movq	(%r15), %rdi
    00000aa3: 	movl	$0x1f8, %esi
    00000aa8: 	addq	$0x8, %r15
    00000aac: 	callq	_ZdlPvm@PLT # Offset: 2732
    00000ab1: 	cmpq	%r15, %rbx
    00000ab4: 	ja	.Ltmp5514 # Offset: 2740
    00000ab6: 	movq	0x30(%rbp), %rdi
    00000aba: 	movq	0x38(%rbp), %r9
    00000abe: 	movq	0x48(%rbp), %rcx
.Ltmp5513:
    00000ac2: 	movdqa	0x90(%rsp), %xmm6
    00000acb: 	movdqa	0xa0(%rsp), %xmm2
    00000ad4: 	movups	%xmm6, 0x80(%rbp)
    00000adb: 	movups	%xmm2, 0x90(%rbp)
    00000ae2: 	cmpq	%r9, %rdi
    00000ae5: 	jne	.Ltmp5515 # Offset: 2789
.Ltmp5478:
    00000aeb: 	movq	-0x8(%rcx), %rax
    00000aef: 	movl	$0x200, %esi
    00000af4: 	movq	0x1f8(%rax), %rbx
    00000afb: 	callq	_ZdlPvm@PLT # Offset: 2811
    00000b00: 	movq	0x48(%rbp), %rdx
    00000b04: 	movq	-0x8(%rdx), %rax
    00000b08: 	subq	$0x8, %rdx
    00000b0c: 	movq	%rdx, %xmm4
    00000b11: 	leaq	0x1f8(%rax), %rsi
    00000b18: 	movq	%rax, %xmm3
    00000b1d: 	addq	$0x200, %rax
    00000b23: 	movq	%rsi, %xmm0
    00000b28: 	punpcklqdq	%xmm3, %xmm0
    00000b2c: 	movups	%xmm0, 0x30(%rbp)
    00000b30: 	movq	%rax, %xmm0
    00000b35: 	punpcklqdq	%xmm4, %xmm0
    00000b39: 	movups	%xmm0, 0x40(%rbp)
    00000b3d: 	jmp	.Ltmp5516 # Offset: 2877
.Ltmp5481:
    00000b42: 	addl	$0x1, 0xa0(%rbp)
    00000b49: 	movq	%rax, 0xb0(%rbp)
    00000b50: 	cmpq	%r14, 0x18(%rsp)
    00000b55: 	jne	.Ltmp5482 # Offset: 2901
    00000b5b: 	jmp	.Ltmp5476 # Offset: 2907
.Ltmp5479:
    00000b60: 	movabsq	$-0x79e79e79e79e79e7, %rax
    00000b6a: 	movq	%rcx, %rdi
    00000b6d: 	notq	%rdi
    00000b70: 	mulq	%rdi
    00000b73: 	subq	%rdx, %rdi
    00000b76: 	shrq	%rdi
    00000b79: 	leaq	(%rdx,%rdi), %rax
    00000b7d: 	shrq	$0x4, %rax
    00000b81: 	notq	%rax
    00000b84: 	jmp	.Ltmp5517 # Offset: 2948
.Ltmp5510:
    00000b89: 	movq	0x48(%rsp), %rdi
    00000b8e: 	movl	$0xaa, %esi
    00000b93: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2963
    00000b98: 	movq	0x30(%rbp), %rdi
    00000b9c: 	jmp	.Ltmp5518 # Offset: 2972
    00000b9e: 	nop # Size: 2
.Ltmp5520:
    00000ba0: 	movq	%rbx, (%rdi)
    00000ba3: 	addq	$0x8, %rdi
    00000ba7: 	movq	%rdi, 0x30(%rbp)
    00000bab: 	cmpq	%rbx, %r12
    00000bae: 	je	.Ltmp5519 # Offset: 2990
.Ltmp5518:
    00000bb0: 	movq	0x40(%rbp), %rax
    00000bb4: 	subq	$0x1, %rbx
    00000bb8: 	movq	%rbx, 0xb8(%rsp)
    00000bc0: 	subq	$0x8, %rax
    00000bc4: 	cmpq	%rax, %rdi
    00000bc7: 	jne	.Ltmp5520 # Offset: 3015
    00000bc9: 	movq	%r13, %rsi
    00000bcc: 	movq	%rbp, %rdi
    00000bcf: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 3023
    00000bd4: 	movq	0x30(%rbp), %rdi
    00000bd8: 	cmpq	%rbx, %r12
    00000bdb: 	jne	.Ltmp5518 # Offset: 3035
.Ltmp5519:
    00000bdd: 	movq	0x38(%rbp), %r9
    00000be1: 	movq	0x48(%rbp), %rcx
    00000be5: 	jmp	.Ltmp5521 # Offset: 3045
.Ltmp5473:
    00000bea: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp5474:
    00000bf3: 	movq	$0x0, 0xd0(%rsp)
    00000bff: 	pxor	%xmm0, %xmm0
    00000c03: 	movaps	%xmm0, 0xc0(%rsp)
    00000c0b: 	jmp	.Ltmp5522 # Offset: 3083
.Ltmp5498:
    00000c10: 	movq	%rax, %r10
    00000c13: 	movabsq	$-0x79e79e79e79e79e7, %rax
    00000c1d: 	notq	%r10
    00000c20: 	mulq	%r10
    00000c23: 	movq	%r10, %rax
    00000c26: 	subq	%rdx, %rax
    00000c29: 	shrq	%rax
    00000c2c: 	addq	%rdx, %rax
    00000c2f: 	shrq	$0x4, %rax
    00000c33: 	notq	%rax
    00000c36: 	jmp	.Ltmp5523 # Offset: 3126
.Ltmp5499:
    00000c3b: 	leaq	(%r15,%r15,2), %rax
    00000c3f: 	leaq	(%r10,%rax,8), %rax
    00000c43: 	jmp	.Ltmp5524 # Offset: 3139
.Ltmp5512:
    00000c48: 	leaq	(%rbx,%rbx,2), %rdx
    00000c4c: 	leaq	(%rsi,%rdx,8), %rdx
    00000c50: 	jmp	.Ltmp5525 # Offset: 3152
.Ltmp5511:
    00000c55: 	movabsq	$-0x79e79e79e79e79e7, %rax
    00000c5f: 	movq	%r11, %rsi
    00000c62: 	notq	%rsi
    00000c65: 	mulq	%rsi
    00000c68: 	movq	%rsi, %rax
    00000c6b: 	subq	%rdx, %rax
    00000c6e: 	shrq	%rax
    00000c71: 	addq	%rax, %rdx
    00000c74: 	shrq	$0x4, %rdx
    00000c78: 	notq	%rdx
    00000c7b: 	jmp	.Ltmp5526 # Offset: 3195
.Ltmp5494:
    00000c80: 	movq	0xd8(%rsp), %rax
    00000c88: 	subq	%fs:0x28, %rax
    00000c91: 	jne	.Ltmp5495 # Offset: 3217
    00000c93: 	addq	$0xe8, %rsp
    00000c9a: 	popq	%rbx
    00000c9b: 	popq	%rbp
    00000c9c: 	popq	%r12
    00000c9e: 	popq	%r13
    00000ca0: 	popq	%r14
    00000ca2: 	popq	%r15
    00000ca4: 	retq # Offset: 3236
.Ltmp5493:
    00000ca5: 	movq	-0x8(%rdx), %rax
    00000ca9: 	addq	$0x200, %rax
    00000caf: 	jmp	.Ltmp5527 # Offset: 3247
.Ltmp5475:
    00000cb4: 	pxor	%xmm4, %xmm4
    00000cb8: 	movsd	%xmm4, 0x58(%rsp)
    00000cbe: 	jmp	.Ltmp5528 # Offset: 3262
.Ltmp5495:
    00000cc3: 	callq	__stack_chk_fail@PLT # Offset: 3267
    00000cc8: 	endbr64
    00000ccc: 	movq	%rax, %rbx
    00000ccf: 	jmp	.Ltmp5529 # Offset: 3279
    00000cd1: 	endbr64
    00000cd5: 	movq	%rax, %rdi
    00000cd8: 	jmp	.Ltmp5530 # Offset: 3288
    00000cda: 	endbr64
    00000cde: 	movq	%rax, %rbp
    00000ce1: 	jmp	.Ltmp5531 # Offset: 3297
    00000ce3: 	endbr64
    00000ce7: 	movq	%rax, %r12
    00000cea: 	jmp	.Ltmp5532 # Offset: 3306
    00000cec: 	endbr64
    00000cf0: 	movq	%rax, %rbx
    00000cf3: 	jmp	.Ltmp5533 # Offset: 3315
.Ltmp5535:
    00000cf5: 	callq	__cxa_end_catch@PLT # Offset: 3317
.Ltmp5529:
    00000cfa: 	movq	%rbp, %rdi
    00000cfd: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 3325
.Ltmp5533:
    00000d02: 	movq	%rbp, %rdi
    00000d05: 	movl	$0xb8, %esi
    00000d0a: 	movq	%rbx, %rbp
    00000d0d: 	callq	_ZdlPvm@PLT # Offset: 3341
.Ltmp5531:
    00000d12: 	movq	0xc0(%rsp), %rdi
    00000d1a: 	movq	0xd0(%rsp), %rsi
    00000d22: 	subq	%rdi, %rsi
    00000d25: 	testq	%rdi, %rdi
    00000d28: 	je	.Ltmp5534 # Offset: 3368
    00000d2a: 	callq	_ZdlPvm@PLT # Offset: 3370
.Ltmp5534:
    00000d2f: 	movq	%rbp, %rdi
    00000d32: 	callq	_Unwind_Resume@PLT # Offset: 3378
.Ltmp5530:
    00000d37: 	callq	__cxa_begin_catch@PLT # Offset: 3383
    00000d3c: 	callq	__cxa_rethrow@PLT # Offset: 3388
.Ltmp5532:
    00000d41: 	movq	%rbp, %rdi
    00000d44: 	movl	$0xb8, %esi
    00000d49: 	callq	_ZdlPvm@PLT # Offset: 3401
    00000d4e: 	movq	%r12, %rdi
    00000d51: 	callq	_Unwind_Resume@PLT # Offset: 3409
    00000d56: 	endbr64
    00000d5a: 	movq	%rax, %r12
    00000d5d: 	callq	__cxa_end_catch@PLT # Offset: 3421
    00000d62: 	movq	%r12, %rdi
    00000d65: 	callq	__cxa_begin_catch@PLT # Offset: 3429
    00000d6a: 	movq	0x58(%rbp), %rax
    00000d6e: 	movq	0x50(%rbp), %rdi
    00000d72: 	leaq	(,%rax,8), %rsi
    00000d7a: 	callq	_ZdlPvm@PLT # Offset: 3450
    00000d7f: 	movq	$0x0, 0x50(%rbp)
    00000d87: 	movq	$0x0, 0x58(%rbp)
    00000d8f: 	callq	__cxa_rethrow@PLT # Offset: 3471
    00000d94: 	endbr64
    00000d98: 	movq	%rax, %rbx
    00000d9b: 	jmp	.Ltmp5535 # Offset: 3483
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_pushfrontId20PooledSingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_pushbackId20PooledSingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 315
  State       : disassembled
  Address     : 0x39a40
  Size        : 0xdc0
  MaxSize     : 0xdc0
  Offset      : 0x39a40
  Section     : .text
  Orc Section : .local.text._Z13test_pushbackId20PooledSingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0314:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xe8, %rsp
    00000015: 	movq	%rdi, 0x10(%rsp)
    0000001a: 	leaq	0xc0(%rsp), %rbx
    00000022: 	movq	%rsi, 0x18(%rsp)
    00000027: 	movq	%rdx, 0x88(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0xd8(%rsp)
    00000040: 	xorl	%eax, %eax
    00000042: 	callq	clock@PLT # Offset: 66
    00000047: 	movl	$0x0, 0x8(%rsp)
    0000004f: 	movq	%rax, start_time(%rip)
    00000056: 	movl	iterations(%rip), %eax
    0000005c: 	testl	%eax, %eax
    0000005e: 	jle	.Ltmp5536 # Offset: 94
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp5543:
    00000068: 	movl	$0xb8, %edi
    0000006d: 	callq	_Znwm@PLT # Offset: 109
    00000072: 	movq	%rax, %rdi
    00000075: 	movq	%rax, %rbp
    00000078: 	callq	_ZN27SingleLinkListPoolAllocatorIdEC2Ev # Offset: 120
    0000007d: 	movq	0x48(%rbp), %r14
    00000081: 	movq	0x30(%rbp), %rcx
    00000085: 	pxor	%xmm0, %xmm0
    00000089: 	leaq	0x50(%rbp), %r13
    0000008d: 	movq	0x38(%rbp), %r9
    00000091: 	movups	%xmm0, 0xa8(%rbp)
    00000098: 	movl	$0x0, 0xa0(%rbp)
    000000a2: 	movq	%r14, %rax
    000000a5: 	movq	%rcx, %rdx
    000000a8: 	subq	0x28(%rbp), %rax
    000000ac: 	sarq	$0x3, %rax
    000000b0: 	cmpq	$0x1, %r14
    000000b4: 	adcq	$-0x1, %rax
    000000b8: 	subq	%r9, %rdx
    000000bb: 	sarq	$0x3, %rdx
    000000bf: 	shlq	$0x6, %rax
    000000c3: 	addq	%rdx, %rax
    000000c6: 	movq	0x20(%rbp), %rdx
    000000ca: 	subq	0x10(%rbp), %rdx
    000000ce: 	sarq	$0x3, %rdx
    000000d2: 	addq	%rdx, %rax
    000000d5: 	je	.Ltmp5537 # Offset: 213
.Ltmp5580:
    000000db: 	cmpq	%rcx, %r9
    000000de: 	je	.Ltmp5538 # Offset: 222
.Ltmp5574:
    000000e4: 	movq	-0x8(%rcx), %r15
    000000e8: 	subq	$0x8, %rcx
    000000ec: 	movq	%rcx, 0x30(%rbp)
.Ltmp5575:
    000000f0: 	movq	0x60(%rbp), %rax
    000000f4: 	movq	0x78(%rbp), %rsi
    000000f8: 	movabsq	$-0x5555555555555555, %rdx
    00000102: 	movq	%rax, %rcx
    00000105: 	subq	0x68(%rbp), %rcx
    00000109: 	sarq	$0x3, %rcx
    0000010d: 	imulq	%rdx, %rcx
    00000111: 	addq	%r15, %rcx
    00000114: 	js	.Ltmp5539 # Offset: 276
    0000011a: 	cmpq	$0x14, %rcx
    0000011e: 	jg	.Ltmp5540 # Offset: 286
    00000124: 	leaq	(%r15,%r15,2), %rdx
    00000128: 	leaq	(%rax,%rdx,8), %rax
    0000012c: 	movq	%r15, 0x10(%rax)
.Ltmp5568:
    00000130: 	movq	0x10(%rsp), %rdx
    00000135: 	movsd	(%rdx), %xmm0
    00000139: 	movq	0xb0(%rbp), %rdx
    00000140: 	movq	$0x0, 0x8(%rax)
    00000148: 	movsd	%xmm0, (%rax)
    0000014c: 	testq	%rdx, %rdx
    0000014f: 	je	.Ltmp5541 # Offset: 335
    00000151: 	movq	%rax, 0x8(%rdx)
.Ltmp5541:
    00000155: 	cmpq	$0x0, 0xa8(%rbp)
    0000015d: 	movq	%rax, 0xb0(%rbp)
    00000164: 	je	.Ltmp5542 # Offset: 356
    0000016a: 	addl	$0x1, 0xa0(%rbp)
    00000171: 	movq	%r13, %rdi
    00000174: 	callq	_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev # Offset: 372
    00000179: 	movq	%rbp, %rdi
    0000017c: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 380
    00000181: 	movl	$0xb8, %esi
    00000186: 	movq	%rbp, %rdi
    00000189: 	callq	_ZdlPvm@PLT # Offset: 393
    0000018e: 	addl	$0x1, 0x8(%rsp)
    00000193: 	movl	0x8(%rsp), %eax
    00000197: 	cmpl	%eax, iterations(%rip)
    0000019d: 	jg	.Ltmp5543 # Offset: 413
.Ltmp5536:
    000001a3: 	callq	clock@PLT # Offset: 419
    000001a8: 	movq	0x18(%rsp), %rcx
    000001ad: 	xorl	%edx, %edx
    000001af: 	subq	0x10(%rsp), %rcx
    000001b4: 	movq	%rax, 0x78(%rsp)
    000001b9: 	movq	%rax, end_time(%rip)
    000001c0: 	movq	start_time(%rip), %rax
    000001c7: 	movq	%rax, 0x80(%rsp)
    000001cf: 	movabsq	$0x500000000, %rax
    000001d9: 	divq	%rcx
    000001dc: 	movq	%rax, 0x8(%rsp)
    000001e1: 	cmpq	$0x3e8, %rax
    000001e7: 	ja	.Ltmp5544 # Offset: 487
    000001ed: 	cmpq	$0x3, 0x8(%rsp)
    000001f3: 	ja	.Ltmp5545 # Offset: 499
    000001f9: 	movq	$0x0, 0xd0(%rsp)
    00000205: 	pxor	%xmm0, %xmm0
    00000209: 	movq	$0x4, 0x8(%rsp)
    00000212: 	movaps	%xmm0, 0xc0(%rsp)
.Ltmp5594:
    0000021a: 	movq	0x8(%rsp), %rbx
    0000021f: 	leaq	0xc0(%rsp), %rdi
    00000227: 	movq	%rbx, %rsi
    0000022a: 	callq	_ZNSt6vectorIP20PooledSingleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 554
    0000022f: 	movq	0xc0(%rsp), %rdx
    00000237: 	movl	iterations(%rip), %eax
    0000023d: 	movq	%rdx, 0x50(%rsp)
    00000242: 	testl	%eax, %eax
    00000244: 	jle	.Ltmp5546 # Offset: 580
    0000024a: 	addq	$0x8, %rdx
    0000024e: 	movl	%ebx, 0x64(%rsp)
    00000252: 	pxor	%xmm5, %xmm5
    00000256: 	leaq	0xb8(%rsp), %r13
    0000025e: 	movl	$0x0, 0x20(%rsp)
    00000266: 	movq	%rdx, 0x70(%rsp)
    0000026b: 	movsd	%xmm5, 0x58(%rsp)
.Ltmp5564:
    00000271: 	movslq	0x20(%rsp), %rdx
    00000276: 	movslq	%eax, %rcx
    00000279: 	movq	%rdx, %rsi
    0000027c: 	addq	0x8(%rsp), %rdx
    00000281: 	subl	%esi, %eax
    00000283: 	cmpq	%rcx, %rdx
    00000286: 	cmovbl	0x64(%rsp), %eax
    0000028b: 	movl	%eax, %ebx
    0000028d: 	callq	clock@PLT # Offset: 653
    00000292: 	movq	0x70(%rsp), %rsi
    00000297: 	movq	0x50(%rsp), %rdx
    0000029c: 	movq	%rax, start_time(%rip)
    000002a3: 	leal	-0x1(%rbx), %eax
    000002a6: 	leaq	(%rsi,%rax,8), %rax
    000002aa: 	movq	%rdx, 0x68(%rsp)
    000002af: 	movq	%rax, 0x40(%rsp)
    000002b4: 	movq	%rdx, 0x30(%rsp)
.Ltmp5555:
    000002b9: 	movl	$0xb8, %edi
    000002be: 	callq	_Znwm@PLT # Offset: 702
    000002c3: 	movq	$0x0, (%rax)
    000002ca: 	pxor	%xmm0, %xmm0
    000002ce: 	xorl	%esi, %esi
    000002d0: 	movq	%rax, %rdi
    000002d3: 	movq	$0x0, 0x8(%rax)
    000002db: 	movq	%rax, %rbp
    000002de: 	movups	%xmm0, 0x10(%rax)
    000002e2: 	movups	%xmm0, 0x20(%rax)
    000002e6: 	movups	%xmm0, 0x30(%rax)
    000002ea: 	movups	%xmm0, 0x40(%rax)
    000002ee: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 750
    000002f3: 	movq	$0x0, 0x50(%rbp)
    000002fb: 	pxor	%xmm0, %xmm0
    000002ff: 	movl	$0x40, %edi
    00000304: 	movq	$0x8, 0x58(%rbp)
    0000030c: 	movups	%xmm0, 0x60(%rbp)
    00000310: 	movups	%xmm0, 0x70(%rbp)
    00000314: 	movups	%xmm0, 0x80(%rbp)
    0000031b: 	movups	%xmm0, 0x90(%rbp)
    00000322: 	callq	_Znwm@PLT # Offset: 802
    00000327: 	movq	0x58(%rbp), %rdx
    0000032b: 	movq	%rax, 0x50(%rbp)
    0000032f: 	movl	$0x1f8, %edi
    00000334: 	leaq	-0x4(,%rdx,4), %rdx
    0000033c: 	andq	$-0x8, %rdx
    00000340: 	leaq	(%rax,%rdx), %r15
    00000344: 	callq	_Znwm@PLT # Offset: 836
    00000349: 	movq	%rax, %rsi
    0000034c: 	movq	%rax, %xmm1
    00000351: 	movq	%rax, (%r15)
    00000354: 	movq	%r15, %xmm7
    00000359: 	leaq	0x1f8(%rax), %rax
    00000360: 	punpcklqdq	%xmm1, %xmm1
    00000364: 	movq	%rsi, %r8
    00000367: 	movl	$0x0, 0xa0(%rbp)
    00000371: 	movq	%rax, %xmm0
    00000376: 	leaq	0x50(%rbp), %rax
    0000037a: 	movups	%xmm1, 0x60(%rbp)
    0000037e: 	punpcklqdq	%xmm7, %xmm0
    00000382: 	movq	%rax, 0x48(%rsp)
    00000387: 	movq	0x10(%rsp), %rax
    0000038c: 	movups	%xmm0, 0x70(%rbp)
    00000390: 	movups	%xmm0, 0x90(%rbp)
    00000397: 	pxor	%xmm0, %xmm0
    0000039b: 	movq	%rax, %r14
    0000039e: 	movups	%xmm1, 0x80(%rbp)
    000003a5: 	movups	%xmm0, 0xa8(%rbp)
    000003ac: 	cmpq	%rax, 0x18(%rsp)
    000003b1: 	je	.Ltmp5547 # Offset: 945
    000003b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5554:
    000003c0: 	movq	0x48(%rbp), %rcx
    000003c4: 	movq	0x30(%rbp), %rdi
    000003c8: 	addq	$0x8, %r14
    000003cc: 	movq	0x38(%rbp), %r9
    000003d0: 	movq	%rcx, %rax
    000003d3: 	subq	0x28(%rbp), %rax
    000003d7: 	movq	%rdi, %rdx
    000003da: 	sarq	$0x3, %rax
    000003de: 	cmpq	$0x1, %rcx
    000003e2: 	adcq	$-0x1, %rax
    000003e6: 	subq	%r9, %rdx
    000003e9: 	sarq	$0x3, %rdx
    000003ed: 	shlq	$0x6, %rax
    000003f1: 	addq	%rdx, %rax
    000003f4: 	movq	0x20(%rbp), %rdx
    000003f8: 	subq	0x10(%rbp), %rdx
    000003fc: 	sarq	$0x3, %rdx
    00000400: 	addq	%rdx, %rax
    00000403: 	je	.Ltmp5548 # Offset: 1027
.Ltmp5593:
    00000409: 	cmpq	%r9, %rdi
    0000040c: 	je	.Ltmp5549 # Offset: 1036
.Ltmp5587:
    00000412: 	movq	-0x8(%rdi), %rbx
    00000416: 	subq	$0x8, %rdi
    0000041a: 	movq	%rdi, 0x30(%rbp)
.Ltmp5588:
    0000041e: 	movq	0x60(%rbp), %rsi
    00000422: 	movq	0x68(%rbp), %r8
    00000426: 	movabsq	$-0x5555555555555555, %rax
    00000430: 	movq	0x78(%rbp), %r15
    00000434: 	movq	%rsi, %rcx
    00000437: 	subq	%r8, %rcx
    0000043a: 	sarq	$0x3, %rcx
    0000043e: 	imulq	%rax, %rcx
    00000442: 	addq	%rbx, %rcx
    00000445: 	js	.Ltmp5550 # Offset: 1093
    0000044b: 	cmpq	$0x14, %rcx
    0000044f: 	jg	.Ltmp5551 # Offset: 1103
    00000455: 	leaq	(%rbx,%rbx,2), %rax
    00000459: 	leaq	(%rsi,%rax,8), %rax
    0000045d: 	movq	%rbx, 0x10(%rax)
.Ltmp5581:
    00000461: 	movsd	-0x8(%r14), %xmm0
    00000467: 	movq	0xb0(%rbp), %rdx
    0000046e: 	movq	$0x0, 0x8(%rax)
    00000476: 	movsd	%xmm0, (%rax)
    0000047a: 	testq	%rdx, %rdx
    0000047d: 	je	.Ltmp5552 # Offset: 1149
    0000047f: 	movq	%rax, 0x8(%rdx)
.Ltmp5552:
    00000483: 	cmpq	$0x0, 0xa8(%rbp)
    0000048b: 	movq	%rax, 0xb0(%rbp)
    00000492: 	je	.Ltmp5553 # Offset: 1170
    00000498: 	addl	$0x1, 0xa0(%rbp)
    0000049f: 	cmpq	%r14, 0x18(%rsp)
    000004a4: 	jne	.Ltmp5554 # Offset: 1188
.Ltmp5547:
    000004aa: 	movq	0x30(%rsp), %rax
    000004af: 	movq	%rbp, (%rax)
    000004b2: 	addq	$0x8, %rax
    000004b6: 	movq	%rax, 0x30(%rsp)
    000004bb: 	cmpq	%rax, 0x40(%rsp)
    000004c0: 	jne	.Ltmp5555 # Offset: 1216
    000004c6: 	callq	clock@PLT # Offset: 1222
    000004cb: 	pxor	%xmm0, %xmm0
    000004cf: 	movq	0x40(%rsp), %r14
    000004d4: 	movq	0x68(%rsp), %r12
    000004d9: 	movq	%rax, end_time(%rip)
    000004e0: 	subq	start_time(%rip), %rax
    000004e7: 	cvtsi2sd	%rax, %xmm0
    000004ec: 	divsd	DATAat0x53788(%rip), %xmm0
    000004f4: 	addsd	0x58(%rsp), %xmm0
    000004fa: 	movsd	%xmm0, 0x58(%rsp)
.Ltmp5563:
    00000500: 	movq	(%r12), %rbp
    00000504: 	testq	%rbp, %rbp
    00000507: 	je	.Ltmp5556 # Offset: 1287
    0000050d: 	movq	0x50(%rbp), %rdi
    00000511: 	testq	%rdi, %rdi
    00000514: 	je	.Ltmp5557 # Offset: 1300
    00000516: 	movq	0x98(%rbp), %rax
    0000051d: 	movq	0x78(%rbp), %rbx
    00000521: 	leaq	0x8(%rax), %r15
    00000525: 	cmpq	%rbx, %r15
    00000528: 	jbe	.Ltmp5558 # Offset: 1320
    0000052a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5559:
    00000530: 	movq	(%rbx), %rdi
    00000533: 	movl	$0x1f8, %esi
    00000538: 	addq	$0x8, %rbx
    0000053c: 	callq	_ZdlPvm@PLT # Offset: 1340
    00000541: 	cmpq	%rbx, %r15
    00000544: 	ja	.Ltmp5559 # Offset: 1348
    00000546: 	movq	0x50(%rbp), %rdi
.Ltmp5558:
    0000054a: 	movq	0x58(%rbp), %rax
    0000054e: 	leaq	(,%rax,8), %rsi
    00000556: 	callq	_ZdlPvm@PLT # Offset: 1366
.Ltmp5557:
    0000055b: 	movq	(%rbp), %rdi
    0000055f: 	testq	%rdi, %rdi
    00000562: 	je	.Ltmp5560 # Offset: 1378
    00000564: 	movq	0x48(%rbp), %rax
    00000568: 	movq	0x28(%rbp), %rbx
    0000056c: 	leaq	0x8(%rax), %r15
    00000570: 	cmpq	%rbx, %r15
    00000573: 	jbe	.Ltmp5561 # Offset: 1395
    00000575: 	nopl	(%rax) # Size: 3
.Ltmp5562:
    00000578: 	movq	(%rbx), %rdi
    0000057b: 	movl	$0x200, %esi
    00000580: 	addq	$0x8, %rbx
    00000584: 	callq	_ZdlPvm@PLT # Offset: 1412
    00000589: 	cmpq	%rbx, %r15
    0000058c: 	ja	.Ltmp5562 # Offset: 1420
    0000058e: 	movq	(%rbp), %rdi
.Ltmp5561:
    00000592: 	movq	0x8(%rbp), %rax
    00000596: 	leaq	(,%rax,8), %rsi
    0000059e: 	callq	_ZdlPvm@PLT # Offset: 1438
.Ltmp5560:
    000005a3: 	movl	$0xb8, %esi
    000005a8: 	movq	%rbp, %rdi
    000005ab: 	callq	_ZdlPvm@PLT # Offset: 1451
.Ltmp5556:
    000005b0: 	movq	$0x0, (%r12)
    000005b8: 	addq	$0x8, %r12
    000005bc: 	cmpq	%r12, %r14
    000005bf: 	jne	.Ltmp5563 # Offset: 1471
    000005c5: 	movl	0x8(%rsp), %edx
    000005c9: 	movl	iterations(%rip), %eax
    000005cf: 	addl	%edx, 0x20(%rsp)
    000005d3: 	movl	0x20(%rsp), %edx
    000005d7: 	cmpl	%edx, %eax
    000005d9: 	jg	.Ltmp5564 # Offset: 1497
.Ltmp5600:
    000005df: 	movq	0x88(%rsp), %rdi
    000005e7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1511
    000005ec: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005f3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000005fa: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000601: 	je	.Ltmp5565 # Offset: 1537
.Ltmp5599:
    00000607: 	movsd	0x58(%rsp), %xmm1
    0000060d: 	movq	-0x20(%rax), %rdi
    00000611: 	pxor	%xmm0, %xmm0
    00000615: 	movq	0x78(%rsp), %rax
    0000061a: 	subq	0x80(%rsp), %rax
    00000622: 	cvtsi2sd	%rax, %xmm0
    00000627: 	divsd	DATAat0x53788(%rip), %xmm0
    0000062f: 	subsd	%xmm0, %xmm1
    00000633: 	movapd	%xmm1, %xmm0
    00000637: 	callq	_Z13record_resultdPKc # Offset: 1591
    0000063c: 	cmpq	$0x0, 0x50(%rsp)
    00000642: 	je	.Ltmp5566 # Offset: 1602
    00000648: 	movq	0xd8(%rsp), %rax
    00000650: 	subq	%fs:0x28, %rax
    00000659: 	jne	.Ltmp5567 # Offset: 1625
    0000065f: 	movq	0xd0(%rsp), %rsi
    00000667: 	movq	0x50(%rsp), %rdi
    0000066c: 	addq	$0xe8, %rsp
    00000673: 	popq	%rbx
    00000674: 	popq	%rbp
    00000675: 	subq	%rdi, %rsi
    00000678: 	popq	%r12
    0000067a: 	popq	%r13
    0000067c: 	popq	%r14
    0000067e: 	popq	%r15
    00000680: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1664
    00000685: 	nopl	(%rax) # Size: 3
.Ltmp5540:
    00000688: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000692: 	movq	%rcx, %rax
    00000695: 	imulq	%rdx
    00000698: 	leaq	(%rdx,%rcx), %rax
    0000069c: 	movq	%rcx, %rdx
    0000069f: 	sarq	$0x4, %rax
    000006a3: 	sarq	$0x3f, %rdx
    000006a7: 	subq	%rdx, %rax
.Ltmp5576:
    000006aa: 	leaq	(%rax,%rax,4), %rdx
    000006ae: 	leaq	(%rax,%rdx,4), %rdx
    000006b2: 	movq	(%rsi,%rax,8), %rax
    000006b6: 	subq	%rdx, %rcx
    000006b9: 	leaq	(%rcx,%rcx,2), %rdx
    000006bd: 	leaq	(%rax,%rdx,8), %rax
    000006c1: 	movq	%r15, 0x10(%rax)
    000006c5: 	jmp	.Ltmp5568 # Offset: 1733
.Ltmp5537:
    000006ca: 	movq	0x98(%rbp), %rdi
    000006d1: 	movq	0x78(%rbp), %rsi
    000006d5: 	movabsq	$-0x5555555555555555, %r8
    000006df: 	movq	0x70(%rbp), %rdx
    000006e3: 	movq	0x60(%rbp), %r10
    000006e7: 	movq	%rdi, %rax
    000006ea: 	subq	%rsi, %rax
    000006ed: 	sarq	$0x3, %rax
    000006f1: 	cmpq	$0x1, %rdi
    000006f5: 	adcq	$-0x1, %rax
    000006f9: 	leaq	(%rax,%rax,4), %r11
    000006fd: 	leaq	(%rax,%r11,4), %r11
    00000701: 	movq	0x80(%rbp), %rax
    00000708: 	subq	0x88(%rbp), %rax
    0000070f: 	sarq	$0x3, %rax
    00000713: 	imulq	%r8, %rax
    00000717: 	addq	%r11, %rax
    0000071a: 	movq	%rdx, %r11
    0000071d: 	subq	%r10, %r11
    00000720: 	sarq	$0x3, %r11
    00000724: 	imulq	%r8, %r11
    00000728: 	leaq	(%rax,%r11), %r12
    0000072c: 	leaq	0xaa(%r12), %r15
    00000734: 	cmpq	%r15, %r12
    00000737: 	jb	.Ltmp5569 # Offset: 1847
    0000073d: 	movq	0x68(%rbp), %r8
    00000741: 	movq	%r10, %rax
    00000744: 	movabsq	$-0x5555555555555555, %r11
    0000074e: 	subq	%r8, %rax
    00000751: 	sarq	$0x3, %rax
    00000755: 	imulq	%r11, %rax
    00000759: 	addq	%r15, %rax
    0000075c: 	movq	%rax, %r11
    0000075f: 	js	.Ltmp5570 # Offset: 1887
    00000765: 	cmpq	$0x14, %rax
    00000769: 	jle	.Ltmp5571 # Offset: 1897
    0000076f: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000779: 	imulq	%rdx
    0000077c: 	leaq	(%rdx,%r11), %rax
    00000780: 	movq	%r11, %rdx
    00000783: 	sarq	$0x4, %rax
    00000787: 	sarq	$0x3f, %rdx
    0000078b: 	subq	%rdx, %rax
.Ltmp5595:
    0000078e: 	leaq	(%rax,%rax,4), %r10
    00000792: 	leaq	(%rsi,%rax,8), %rsi
    00000796: 	leaq	(%rax,%r10,4), %rax
    0000079a: 	movq	(%rsi), %r8
    0000079d: 	subq	%rax, %r11
    000007a0: 	leaq	(%r11,%r11,2), %rax
    000007a4: 	leaq	0x1f8(%r8), %rdx
    000007ab: 	leaq	(%r8,%rax,8), %rax
.Ltmp5596:
    000007af: 	movq	%rax, %xmm5
    000007b4: 	movq	%r8, %xmm7
    000007b9: 	movq	%rdx, %xmm6
    000007be: 	movq	%rsi, %xmm3
    000007c3: 	punpcklqdq	%xmm7, %xmm5
    000007c7: 	leaq	0x8(%rdi), %r12
    000007cb: 	punpcklqdq	%xmm3, %xmm6
    000007cf: 	leaq	0x8(%rsi), %r15
    000007d3: 	movaps	%xmm5, 0x20(%rsp)
    000007d8: 	movaps	%xmm6, 0x30(%rsp)
    000007dd: 	cmpq	%r15, %r12
    000007e0: 	jbe	.Ltmp5572 # Offset: 2016
    000007e2: 	movq	%rcx, 0x40(%rsp)
    000007e7: 	movq	%rbx, 0x48(%rsp)
    000007ec: 	movq	%r15, %rbx
    000007ef: 	movq	%r9, %r15
    000007f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5573:
    000007f8: 	movq	(%rbx), %rdi
    000007fb: 	movl	$0x1f8, %esi
    00000800: 	addq	$0x8, %rbx
    00000804: 	callq	_ZdlPvm@PLT # Offset: 2052
    00000809: 	cmpq	%rbx, %r12
    0000080c: 	ja	.Ltmp5573 # Offset: 2060
    0000080e: 	movq	0x40(%rsp), %rcx
    00000813: 	movq	0x48(%rsp), %rbx
    00000818: 	movq	%r15, %r9
.Ltmp5572:
    0000081b: 	movdqa	0x20(%rsp), %xmm4
    00000821: 	movdqa	0x30(%rsp), %xmm7
    00000827: 	movups	%xmm4, 0x80(%rbp)
    0000082e: 	movups	%xmm7, 0x90(%rbp)
    00000835: 	cmpq	%rcx, %r9
    00000838: 	jne	.Ltmp5574 # Offset: 2104
.Ltmp5538:
    0000083e: 	movq	-0x8(%r14), %rax
    00000842: 	movl	$0x200, %esi
    00000847: 	movq	%r9, %rdi
    0000084a: 	movq	0x1f8(%rax), %r15
    00000851: 	callq	_ZdlPvm@PLT # Offset: 2129
    00000856: 	movq	-0x8(%r14), %rax
    0000085a: 	leaq	-0x8(%r14), %r8
    0000085e: 	movq	%r8, %xmm2
    00000863: 	addq	$0x1f8, %rax
    00000869: 	movq	%rax, %xmm0
    0000086e: 	movq	-0x8(%r14), %rax
    00000872: 	movhps	-0x8(%r14), %xmm0
    00000877: 	addq	$0x200, %rax
    0000087d: 	movups	%xmm0, 0x30(%rbp)
    00000881: 	movq	%rax, %xmm0
    00000886: 	punpcklqdq	%xmm2, %xmm0
    0000088a: 	movups	%xmm0, 0x40(%rbp)
    0000088e: 	jmp	.Ltmp5575 # Offset: 2190
.Ltmp5542:
    00000893: 	addl	$0x1, 0xa0(%rbp)
    0000089a: 	movq	%r13, %rdi
    0000089d: 	movq	%rax, 0xa8(%rbp)
    000008a4: 	callq	_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev # Offset: 2212
    000008a9: 	movq	%rbp, %rdi
    000008ac: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2220
    000008b1: 	movl	$0xb8, %esi
    000008b6: 	movq	%rbp, %rdi
    000008b9: 	callq	_ZdlPvm@PLT # Offset: 2233
    000008be: 	addl	$0x1, 0x8(%rsp)
    000008c3: 	movl	0x8(%rsp), %eax
    000008c7: 	cmpl	iterations(%rip), %eax
    000008cd: 	jl	.Ltmp5543 # Offset: 2253
    000008d3: 	jmp	.Ltmp5536 # Offset: 2259
    000008d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5539:
    000008e0: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000008ea: 	movq	%rcx, %rdi
    000008ed: 	notq	%rdi
    000008f0: 	mulq	%rdi
    000008f3: 	subq	%rdx, %rdi
    000008f6: 	shrq	%rdi
    000008f9: 	leaq	(%rdx,%rdi), %rax
    000008fd: 	shrq	$0x4, %rax
    00000901: 	notq	%rax
    00000904: 	jmp	.Ltmp5576 # Offset: 2308
.Ltmp5569:
    00000909: 	movl	$0xaa, %esi
    0000090e: 	movq	%r13, %rdi
    00000911: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2321
    00000916: 	movq	0x30(%rbp), %rcx
    0000091a: 	movq	0x40(%rbp), %rsi
    0000091e: 	jmp	.Ltmp5577 # Offset: 2334
.Ltmp5579:
    00000920: 	movq	%r15, (%rcx)
    00000923: 	addq	$0x8, %rcx
    00000927: 	movq	%rcx, 0x30(%rbp)
    0000092b: 	cmpq	%r15, %r12
    0000092e: 	je	.Ltmp5578 # Offset: 2350
.Ltmp5577:
    00000930: 	subq	$0x1, %r15
    00000934: 	leaq	-0x8(%rsi), %rax
    00000938: 	movq	%r15, 0xc0(%rsp)
    00000940: 	cmpq	%rax, %rcx
    00000943: 	jne	.Ltmp5579 # Offset: 2371
    00000945: 	movq	%rbx, %rsi
    00000948: 	movq	%rbp, %rdi
    0000094b: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2379
    00000950: 	movq	0x30(%rbp), %rcx
    00000954: 	cmpq	%r15, %r12
    00000957: 	je	.Ltmp5578 # Offset: 2391
    00000959: 	movq	0x40(%rbp), %rsi
    0000095d: 	jmp	.Ltmp5577 # Offset: 2397
.Ltmp5578:
    0000095f: 	movq	0x38(%rbp), %r9
    00000963: 	movq	0x48(%rbp), %r14
    00000967: 	jmp	.Ltmp5580 # Offset: 2407
.Ltmp5551:
    0000096c: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000976: 	movq	%rcx, %rax
    00000979: 	imulq	%rdx
    0000097c: 	leaq	(%rdx,%rcx), %rax
    00000980: 	movq	%rcx, %rdx
    00000983: 	sarq	$0x4, %rax
    00000987: 	sarq	$0x3f, %rdx
    0000098b: 	subq	%rdx, %rax
.Ltmp5589:
    0000098e: 	leaq	(%rax,%rax,4), %rdx
    00000992: 	leaq	(%rax,%rdx,4), %rdx
    00000996: 	movq	(%r15,%rax,8), %rax
    0000099a: 	subq	%rdx, %rcx
    0000099d: 	leaq	(%rcx,%rcx,2), %rdx
    000009a1: 	leaq	(%rax,%rdx,8), %rax
    000009a5: 	movq	%rbx, 0x10(%rax)
    000009a9: 	jmp	.Ltmp5581 # Offset: 2473
.Ltmp5548:
    000009ae: 	movq	0x98(%rbp), %r10
    000009b5: 	movq	0x80(%rbp), %r12
    000009bc: 	movabsq	$-0x5555555555555555, %rbx
    000009c6: 	movq	0x70(%rbp), %rax
    000009ca: 	movq	%r10, %rdx
    000009cd: 	subq	%r15, %rdx
    000009d0: 	sarq	$0x3, %rdx
    000009d4: 	cmpq	$0x1, %r10
    000009d8: 	adcq	$-0x1, %rdx
    000009dc: 	subq	0x88(%rbp), %r12
    000009e3: 	sarq	$0x3, %r12
    000009e7: 	leaq	(%rdx,%rdx,4), %r11
    000009eb: 	imulq	%rbx, %r12
    000009ef: 	leaq	(%rdx,%r11,4), %rdx
    000009f3: 	addq	%rdx, %r12
    000009f6: 	movq	%rax, %rdx
    000009f9: 	subq	%rsi, %rdx
    000009fc: 	sarq	$0x3, %rdx
    00000a00: 	imulq	%rbx, %rdx
    00000a04: 	addq	%rdx, %r12
    00000a07: 	leaq	0xaa(%r12), %rbx
    00000a0f: 	cmpq	%rbx, %r12
    00000a12: 	jb	.Ltmp5582 # Offset: 2578
    00000a18: 	movabsq	$-0x5555555555555555, %rdx
    00000a22: 	movq	%rsi, %r11
    00000a25: 	subq	%r8, %r11
    00000a28: 	sarq	$0x3, %r11
    00000a2c: 	imulq	%rdx, %r11
    00000a30: 	addq	%rbx, %r11
    00000a33: 	js	.Ltmp5583 # Offset: 2611
    00000a39: 	cmpq	$0x14, %r11
    00000a3d: 	jle	.Ltmp5584 # Offset: 2621
    00000a43: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000a4d: 	movq	%r11, %rax
    00000a50: 	imulq	%rdx
    00000a53: 	movq	%r11, %rax
    00000a56: 	sarq	$0x3f, %rax
    00000a5a: 	addq	%r11, %rdx
    00000a5d: 	sarq	$0x4, %rdx
    00000a61: 	subq	%rax, %rdx
.Ltmp5598:
    00000a64: 	leaq	(%rdx,%rdx,4), %rsi
    00000a68: 	leaq	(%r15,%rdx,8), %r15
    00000a6c: 	leaq	(%rdx,%rsi,4), %rdx
    00000a70: 	movq	(%r15), %r8
    00000a73: 	subq	%rdx, %r11
    00000a76: 	leaq	(%r11,%r11,2), %rdx
    00000a7a: 	leaq	0x1f8(%r8), %rax
    00000a81: 	leaq	(%r8,%rdx,8), %rdx
.Ltmp5597:
    00000a85: 	movq	%r8, %xmm6
    00000a8a: 	movq	%rdx, %xmm5
    00000a8f: 	leaq	0x8(%r10), %rbx
    00000a93: 	punpcklqdq	%xmm6, %xmm5
    00000a97: 	movq	%rax, %xmm6
    00000a9c: 	movaps	%xmm5, 0x90(%rsp)
    00000aa4: 	movq	%r15, %xmm5
    00000aa9: 	addq	$0x8, %r15
    00000aad: 	punpcklqdq	%xmm5, %xmm6
    00000ab1: 	movaps	%xmm6, 0xa0(%rsp)
    00000ab9: 	cmpq	%r15, %rbx
    00000abc: 	jbe	.Ltmp5585 # Offset: 2748
    00000abe: 	nop # Size: 2
.Ltmp5586:
    00000ac0: 	movq	(%r15), %rdi
    00000ac3: 	movl	$0x1f8, %esi
    00000ac8: 	addq	$0x8, %r15
    00000acc: 	callq	_ZdlPvm@PLT # Offset: 2764
    00000ad1: 	cmpq	%r15, %rbx
    00000ad4: 	ja	.Ltmp5586 # Offset: 2772
    00000ad6: 	movq	0x30(%rbp), %rdi
    00000ada: 	movq	0x38(%rbp), %r9
    00000ade: 	movq	0x48(%rbp), %rcx
.Ltmp5585:
    00000ae2: 	movdqa	0x90(%rsp), %xmm6
    00000aeb: 	movdqa	0xa0(%rsp), %xmm2
    00000af4: 	movups	%xmm6, 0x80(%rbp)
    00000afb: 	movups	%xmm2, 0x90(%rbp)
    00000b02: 	cmpq	%r9, %rdi
    00000b05: 	jne	.Ltmp5587 # Offset: 2821
.Ltmp5549:
    00000b0b: 	movq	-0x8(%rcx), %rax
    00000b0f: 	movl	$0x200, %esi
    00000b14: 	movq	0x1f8(%rax), %rbx
    00000b1b: 	callq	_ZdlPvm@PLT # Offset: 2843
    00000b20: 	movq	0x48(%rbp), %rdx
    00000b24: 	movq	-0x8(%rdx), %rax
    00000b28: 	subq	$0x8, %rdx
    00000b2c: 	movq	%rdx, %xmm4
    00000b31: 	leaq	0x1f8(%rax), %rsi
    00000b38: 	movq	%rax, %xmm3
    00000b3d: 	addq	$0x200, %rax
    00000b43: 	movq	%rsi, %xmm0
    00000b48: 	punpcklqdq	%xmm3, %xmm0
    00000b4c: 	movups	%xmm0, 0x30(%rbp)
    00000b50: 	movq	%rax, %xmm0
    00000b55: 	punpcklqdq	%xmm4, %xmm0
    00000b59: 	movups	%xmm0, 0x40(%rbp)
    00000b5d: 	jmp	.Ltmp5588 # Offset: 2909
.Ltmp5553:
    00000b62: 	addl	$0x1, 0xa0(%rbp)
    00000b69: 	movq	%rax, 0xa8(%rbp)
    00000b70: 	cmpq	%r14, 0x18(%rsp)
    00000b75: 	jne	.Ltmp5554 # Offset: 2933
    00000b7b: 	jmp	.Ltmp5547 # Offset: 2939
.Ltmp5550:
    00000b80: 	movabsq	$-0x79e79e79e79e79e7, %rax
    00000b8a: 	movq	%rcx, %rdi
    00000b8d: 	notq	%rdi
    00000b90: 	mulq	%rdi
    00000b93: 	subq	%rdx, %rdi
    00000b96: 	shrq	%rdi
    00000b99: 	leaq	(%rdx,%rdi), %rax
    00000b9d: 	shrq	$0x4, %rax
    00000ba1: 	notq	%rax
    00000ba4: 	jmp	.Ltmp5589 # Offset: 2980
.Ltmp5582:
    00000ba9: 	movq	0x48(%rsp), %rdi
    00000bae: 	movl	$0xaa, %esi
    00000bb3: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2995
    00000bb8: 	movq	0x30(%rbp), %rdi
    00000bbc: 	jmp	.Ltmp5590 # Offset: 3004
    00000bbe: 	nop # Size: 2
.Ltmp5592:
    00000bc0: 	movq	%rbx, (%rdi)
    00000bc3: 	addq	$0x8, %rdi
    00000bc7: 	movq	%rdi, 0x30(%rbp)
    00000bcb: 	cmpq	%rbx, %r12
    00000bce: 	je	.Ltmp5591 # Offset: 3022
.Ltmp5590:
    00000bd0: 	movq	0x40(%rbp), %rax
    00000bd4: 	subq	$0x1, %rbx
    00000bd8: 	movq	%rbx, 0xb8(%rsp)
    00000be0: 	subq	$0x8, %rax
    00000be4: 	cmpq	%rax, %rdi
    00000be7: 	jne	.Ltmp5592 # Offset: 3047
    00000be9: 	movq	%r13, %rsi
    00000bec: 	movq	%rbp, %rdi
    00000bef: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 3055
    00000bf4: 	movq	0x30(%rbp), %rdi
    00000bf8: 	cmpq	%rbx, %r12
    00000bfb: 	jne	.Ltmp5590 # Offset: 3067
.Ltmp5591:
    00000bfd: 	movq	0x38(%rbp), %r9
    00000c01: 	movq	0x48(%rbp), %rcx
    00000c05: 	jmp	.Ltmp5593 # Offset: 3077
.Ltmp5544:
    00000c0a: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp5545:
    00000c13: 	movq	$0x0, 0xd0(%rsp)
    00000c1f: 	pxor	%xmm0, %xmm0
    00000c23: 	movaps	%xmm0, 0xc0(%rsp)
    00000c2b: 	jmp	.Ltmp5594 # Offset: 3115
.Ltmp5570:
    00000c30: 	movq	%rax, %r10
    00000c33: 	movabsq	$-0x79e79e79e79e79e7, %rax
    00000c3d: 	notq	%r10
    00000c40: 	mulq	%r10
    00000c43: 	movq	%r10, %rax
    00000c46: 	subq	%rdx, %rax
    00000c49: 	shrq	%rax
    00000c4c: 	addq	%rdx, %rax
    00000c4f: 	shrq	$0x4, %rax
    00000c53: 	notq	%rax
    00000c56: 	jmp	.Ltmp5595 # Offset: 3158
.Ltmp5571:
    00000c5b: 	leaq	(%r15,%r15,2), %rax
    00000c5f: 	leaq	(%r10,%rax,8), %rax
    00000c63: 	jmp	.Ltmp5596 # Offset: 3171
.Ltmp5584:
    00000c68: 	leaq	(%rbx,%rbx,2), %rdx
    00000c6c: 	leaq	(%rsi,%rdx,8), %rdx
    00000c70: 	jmp	.Ltmp5597 # Offset: 3184
.Ltmp5583:
    00000c75: 	movabsq	$-0x79e79e79e79e79e7, %rax
    00000c7f: 	movq	%r11, %rsi
    00000c82: 	notq	%rsi
    00000c85: 	mulq	%rsi
    00000c88: 	movq	%rsi, %rax
    00000c8b: 	subq	%rdx, %rax
    00000c8e: 	shrq	%rax
    00000c91: 	addq	%rax, %rdx
    00000c94: 	shrq	$0x4, %rdx
    00000c98: 	notq	%rdx
    00000c9b: 	jmp	.Ltmp5598 # Offset: 3227
.Ltmp5566:
    00000ca0: 	movq	0xd8(%rsp), %rax
    00000ca8: 	subq	%fs:0x28, %rax
    00000cb1: 	jne	.Ltmp5567 # Offset: 3249
    00000cb3: 	addq	$0xe8, %rsp
    00000cba: 	popq	%rbx
    00000cbb: 	popq	%rbp
    00000cbc: 	popq	%r12
    00000cbe: 	popq	%r13
    00000cc0: 	popq	%r14
    00000cc2: 	popq	%r15
    00000cc4: 	retq # Offset: 3268
.Ltmp5565:
    00000cc5: 	movq	-0x8(%rdx), %rax
    00000cc9: 	addq	$0x200, %rax
    00000ccf: 	jmp	.Ltmp5599 # Offset: 3279
.Ltmp5546:
    00000cd4: 	pxor	%xmm4, %xmm4
    00000cd8: 	movsd	%xmm4, 0x58(%rsp)
    00000cde: 	jmp	.Ltmp5600 # Offset: 3294
.Ltmp5567:
    00000ce3: 	callq	__stack_chk_fail@PLT # Offset: 3299
    00000ce8: 	endbr64
    00000cec: 	movq	%rax, %rbx
    00000cef: 	jmp	.Ltmp5601 # Offset: 3311
    00000cf1: 	endbr64
    00000cf5: 	movq	%rax, %rdi
    00000cf8: 	jmp	.Ltmp5602 # Offset: 3320
    00000cfa: 	endbr64
    00000cfe: 	movq	%rax, %rbp
    00000d01: 	jmp	.Ltmp5603 # Offset: 3329
    00000d03: 	endbr64
    00000d07: 	movq	%rax, %r12
    00000d0a: 	jmp	.Ltmp5604 # Offset: 3338
    00000d0c: 	endbr64
    00000d10: 	movq	%rax, %rbx
    00000d13: 	jmp	.Ltmp5605 # Offset: 3347
.Ltmp5607:
    00000d15: 	callq	__cxa_end_catch@PLT # Offset: 3349
.Ltmp5601:
    00000d1a: 	movq	%rbp, %rdi
    00000d1d: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 3357
.Ltmp5605:
    00000d22: 	movq	%rbp, %rdi
    00000d25: 	movl	$0xb8, %esi
    00000d2a: 	movq	%rbx, %rbp
    00000d2d: 	callq	_ZdlPvm@PLT # Offset: 3373
.Ltmp5603:
    00000d32: 	movq	0xc0(%rsp), %rdi
    00000d3a: 	movq	0xd0(%rsp), %rsi
    00000d42: 	subq	%rdi, %rsi
    00000d45: 	testq	%rdi, %rdi
    00000d48: 	je	.Ltmp5606 # Offset: 3400
    00000d4a: 	callq	_ZdlPvm@PLT # Offset: 3402
.Ltmp5606:
    00000d4f: 	movq	%rbp, %rdi
    00000d52: 	callq	_Unwind_Resume@PLT # Offset: 3410
.Ltmp5602:
    00000d57: 	callq	__cxa_begin_catch@PLT # Offset: 3415
    00000d5c: 	callq	__cxa_rethrow@PLT # Offset: 3420
.Ltmp5604:
    00000d61: 	movq	%rbp, %rdi
    00000d64: 	movl	$0xb8, %esi
    00000d69: 	callq	_ZdlPvm@PLT # Offset: 3433
    00000d6e: 	movq	%r12, %rdi
    00000d71: 	callq	_Unwind_Resume@PLT # Offset: 3441
    00000d76: 	endbr64
    00000d7a: 	movq	%rax, %r12
    00000d7d: 	callq	__cxa_end_catch@PLT # Offset: 3453
    00000d82: 	movq	%r12, %rdi
    00000d85: 	callq	__cxa_begin_catch@PLT # Offset: 3461
    00000d8a: 	movq	0x58(%rbp), %rax
    00000d8e: 	movq	0x50(%rbp), %rdi
    00000d92: 	leaq	(,%rax,8), %rsi
    00000d9a: 	callq	_ZdlPvm@PLT # Offset: 3482
    00000d9f: 	movq	$0x0, 0x50(%rbp)
    00000da7: 	movq	$0x0, 0x58(%rbp)
    00000daf: 	callq	__cxa_rethrow@PLT # Offset: 3503
    00000db4: 	endbr64
    00000db8: 	movq	%rax, %rbx
    00000dbb: 	jmp	.Ltmp5607 # Offset: 3515
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_pushbackId20PooledSingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE23_M_new_elements_at_backEm" after disassembly {
  Number      : 316
  State       : disassembled
  Address     : 0x3a800
  Size        : 0x271
  MaxSize     : 0x280
  Offset      : 0x3a800
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE23_M_new_elements_at_backEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0315:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x8, %rsp
    00000018: 	movq	0x48(%rdi), %rax
    0000001c: 	movq	0x28(%rdi), %rsi
    00000020: 	movq	0x30(%rbp), %rdx
    00000024: 	subq	0x38(%rbp), %rdx
    00000028: 	movq	%rax, %rbx
    0000002b: 	sarq	$0x5, %rdx
    0000002f: 	subq	%rsi, %rbx
    00000032: 	movq	%rbx, %rdi
    00000035: 	sarq	$0x3, %rdi
    00000039: 	cmpq	$0x1, %rax
    0000003d: 	movq	%rdi, %rcx
    00000040: 	adcq	$-0x1, %rcx
    00000044: 	shlq	$0x4, %rcx
    00000048: 	addq	%rcx, %rdx
    0000004b: 	movq	0x20(%rbp), %rcx
    0000004f: 	subq	0x10(%rbp), %rcx
    00000053: 	sarq	$0x5, %rcx
    00000057: 	addq	%rcx, %rdx
    0000005a: 	movabsq	$0x3ffffffffffffff, %rcx
    00000064: 	subq	%rdx, %rcx
    00000067: 	cmpq	%r12, %rcx
    0000006a: 	jb	.Ltmp5608 # Offset: 106
    00000070: 	movq	(%rbp), %r8
    00000074: 	movq	0x8(%rbp), %rcx
    00000078: 	movq	%rax, %rdx
    0000007b: 	addq	$0xf, %r12
    0000007f: 	shrq	$0x4, %r12
    00000083: 	subq	%r8, %rdx
    00000086: 	movq	%rcx, %r9
    00000089: 	leaq	0x1(%r12), %r10
    0000008e: 	sarq	$0x3, %rdx
    00000092: 	subq	%rdx, %r9
    00000095: 	cmpq	%r9, %r10
    00000098: 	ja	.Ltmp5609 # Offset: 152
.Ltmp5616:
    0000009a: 	movl	$0x1, %ebx
    0000009f: 	testq	%r12, %r12
    000000a2: 	jne	.Ltmp5610 # Offset: 162
    000000a4: 	jmp	.Ltmp5611 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5612:
    000000b0: 	movq	0x48(%rbp), %rax
    000000b4: 	movq	%rdx, %rbx
.Ltmp5610:
    000000b7: 	movl	$0x200, %edi
    000000bc: 	leaq	(%rax,%rbx,8), %r13
    000000c0: 	callq	_Znwm@PLT # Offset: 192
    000000c5: 	movq	%rax, (%r13)
    000000c9: 	leaq	0x1(%rbx), %rdx
    000000cd: 	cmpq	%rbx, %r12
    000000d0: 	jne	.Ltmp5612 # Offset: 208
.Ltmp5611:
    000000d2: 	addq	$0x8, %rsp
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	popq	%r12
    000000da: 	popq	%r13
    000000dc: 	popq	%r14
    000000de: 	popq	%r15
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp5609:
    000000e8: 	leaq	0x1(%r12,%rdi), %r13
    000000ed: 	leaq	(%r13,%r13), %rdx
    000000f2: 	cmpq	%rdx, %rcx
    000000f5: 	ja	.Ltmp5613 # Offset: 245
    000000fb: 	cmpq	%rcx, %r12
    000000fe: 	movq	%rcx, %rax
    00000101: 	cmovaeq	%r12, %rax
    00000105: 	leaq	0x2(%rcx,%rax), %r15
    0000010a: 	movq	%r15, %rax
    0000010d: 	shrq	$0x3c, %rax
    00000111: 	jne	.Ltmp5614 # Offset: 273
    00000117: 	leaq	(,%r15,8), %rdi
    0000011f: 	callq	_Znwm@PLT # Offset: 287
    00000124: 	movq	0x28(%rbp), %rsi
    00000128: 	movq	%rax, %r14
    0000012b: 	movq	%r15, %rax
    0000012e: 	subq	%r13, %rax
    00000131: 	shrq	%rax
    00000134: 	leaq	(%r14,%rax,8), %r13
    00000138: 	movq	0x48(%rbp), %rax
    0000013c: 	leaq	0x8(%rax), %rdx
    00000140: 	cmpq	%rsi, %rdx
    00000143: 	je	.Ltmp5615 # Offset: 323
    00000145: 	subq	%rsi, %rdx
    00000148: 	movq	%r13, %rdi
    0000014b: 	callq	memmove@PLT # Offset: 331
.Ltmp5615:
    00000150: 	movq	0x8(%rbp), %rax
    00000154: 	movq	(%rbp), %rdi
    00000158: 	leaq	(,%rax,8), %rsi
    00000160: 	callq	_ZdlPvm@PLT # Offset: 352
    00000165: 	movq	%r14, (%rbp)
    00000169: 	movq	%r15, 0x8(%rbp)
.Ltmp5618:
    0000016d: 	movq	(%r13), %rax
    00000171: 	movq	(%r13), %xmm0
    00000177: 	movq	%r13, 0x28(%rbp)
    0000017b: 	addq	$0x200, %rax
    00000181: 	movq	%rax, %xmm1
    00000186: 	leaq	(%r13,%rbx), %rax
    0000018b: 	punpcklqdq	%xmm1, %xmm0
    0000018f: 	movq	%rax, 0x48(%rbp)
    00000193: 	movups	%xmm0, 0x18(%rbp)
    00000197: 	movq	(%rax), %rsi
    0000019a: 	leaq	0x200(%rsi), %rdx
    000001a1: 	movq	%rsi, %xmm0
    000001a6: 	movq	%rdx, %xmm2
    000001ab: 	punpcklqdq	%xmm2, %xmm0
    000001af: 	movups	%xmm0, 0x38(%rbp)
    000001b3: 	jmp	.Ltmp5616 # Offset: 435
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5613:
    000001c0: 	subq	%r13, %rcx
    000001c3: 	addq	$0x8, %rax
    000001c7: 	shrq	%rcx
    000001ca: 	movq	%rax, %rdx
    000001cd: 	leaq	(%r8,%rcx,8), %r13
    000001d1: 	subq	%rsi, %rdx
    000001d4: 	cmpq	%r13, %rsi
    000001d7: 	jbe	.Ltmp5617 # Offset: 471
    000001d9: 	cmpq	%rax, %rsi
    000001dc: 	je	.Ltmp5618 # Offset: 476
    000001de: 	movq	%r13, %rdi
    000001e1: 	callq	memmove@PLT # Offset: 481
    000001e6: 	jmp	.Ltmp5618 # Offset: 486
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5617:
    000001f0: 	cmpq	%rax, %rsi
    000001f3: 	je	.Ltmp5618 # Offset: 499
    000001f9: 	leaq	0x8(%rbx), %rdi
    000001fd: 	subq	%rdx, %rdi
    00000200: 	addq	%r13, %rdi
    00000203: 	callq	memmove@PLT # Offset: 515
    00000208: 	jmp	.Ltmp5618 # Offset: 520
.Ltmp5614:
    0000020d: 	shrq	$0x3d, %r15
    00000211: 	je	.Ltmp5619 # Offset: 529
    00000213: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 531
.Ltmp5619:
    00000218: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 536
.Ltmp5608:
    0000021d: 	leaq	DATAat0x52370(%rip), %rdi
    00000224: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 548
    00000229: 	endbr64
    0000022d: 	movq	%rax, %rdi
    00000230: 	callq	__cxa_begin_catch@PLT # Offset: 560
    00000235: 	movl	$0x1, %r12d
.Ltmp5621:
    0000023b: 	cmpq	%rbx, %r12
    0000023e: 	je	.Ltmp5620 # Offset: 574
    00000240: 	movq	0x48(%rbp), %rax
    00000244: 	movl	$0x200, %esi
    00000249: 	movq	(%rax,%r12,8), %rdi
    0000024d: 	addq	$0x1, %r12
    00000251: 	callq	_ZdlPvm@PLT # Offset: 593
    00000256: 	jmp	.Ltmp5621 # Offset: 598
.Ltmp5620:
    00000258: 	callq	__cxa_rethrow@PLT # Offset: 600
    0000025d: 	endbr64
    00000261: 	movq	%rax, %rbp
    00000264: 	callq	__cxa_end_catch@PLT # Offset: 612
    00000269: 	movq	%rbp, %rdi
    0000026c: 	callq	_Unwind_Resume@PLT # Offset: 620
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE23_M_new_elements_at_backEm"

Binary Function "_Z20test_delete_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 317
  State       : disassembled
  Address     : 0x3aa80
  Size        : 0x842
  MaxSize     : 0x850
  Offset      : 0x3aa80
  Section     : .text
  Orc Section : .local.text._Z20test_delete_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0316:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movq	%rsi, (%rsp)
    00000019: 	subq	%rdi, %rsi
    0000001c: 	movq	%rdx, 0x50(%rsp)
    00000021: 	xorl	%edx, %edx
    00000023: 	movq	%rdi, 0x18(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0xa8(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	movabsq	$0x500000000, %rax
    00000045: 	divq	%rsi
    00000048: 	movq	%rax, 0x8(%rsp)
    0000004d: 	cmpq	$0x3e8, %rax
    00000053: 	ja	.Ltmp5622 # Offset: 83
    00000059: 	cmpq	$0x3, %rax
    0000005d: 	ja	.Ltmp5623 # Offset: 93
    00000063: 	movq	$0x0, 0xa0(%rsp)
    0000006f: 	pxor	%xmm0, %xmm0
    00000073: 	movq	$0x4, 0x8(%rsp)
    0000007c: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5658:
    00000084: 	movq	0x8(%rsp), %rbx
    00000089: 	leaq	0x90(%rsp), %rdi
    00000091: 	movq	%rbx, %rsi
    00000094: 	callq	_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 148
    00000099: 	movq	0x90(%rsp), %rdi
    000000a1: 	movl	iterations(%rip), %eax
    000000a7: 	movq	%rdi, 0x38(%rsp)
    000000ac: 	testl	%eax, %eax
    000000ae: 	jle	.Ltmp5624 # Offset: 174
    000000b4: 	addq	$0x8, %rdi
    000000b8: 	movl	%ebx, 0x44(%rsp)
    000000bc: 	pxor	%xmm6, %xmm6
    000000c0: 	leaq	0x88(%rsp), %r14
    000000c8: 	movl	$0x0, 0x40(%rsp)
    000000d0: 	movq	%rdi, 0x58(%rsp)
    000000d5: 	movsd	%xmm6, 0x20(%rsp)
.Ltmp5642:
    000000db: 	movslq	0x40(%rsp), %rdx
    000000e0: 	movslq	%eax, %rcx
    000000e3: 	movq	0x58(%rsp), %rsi
    000000e8: 	movq	%rdx, %rdi
    000000eb: 	addq	0x8(%rsp), %rdx
    000000f0: 	subl	%edi, %eax
    000000f2: 	cmpq	%rcx, %rdx
    000000f5: 	cmovbl	0x44(%rsp), %eax
    000000fa: 	movq	0x38(%rsp), %rdi
    000000ff: 	subl	$0x1, %eax
    00000102: 	movq	%rdi, 0x48(%rsp)
    00000107: 	leaq	(%rsi,%rax,8), %rax
    0000010b: 	movq	%rdi, 0x10(%rsp)
    00000110: 	movq	%rax, 0x30(%rsp)
.Ltmp5633:
    00000115: 	movl	$0xb8, %edi
    0000011a: 	callq	_Znwm@PLT # Offset: 282
    0000011f: 	movq	$0x0, (%rax)
    00000126: 	pxor	%xmm2, %xmm2
    0000012a: 	xorl	%esi, %esi
    0000012c: 	movq	%rax, %rdi
    0000012f: 	movq	$0x0, 0x8(%rax)
    00000137: 	movq	%rax, %rbp
    0000013a: 	movups	%xmm2, 0x10(%rax)
    0000013e: 	movups	%xmm2, 0x20(%rax)
    00000142: 	movups	%xmm2, 0x30(%rax)
    00000146: 	movups	%xmm2, 0x40(%rax)
    0000014a: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 330
    0000014f: 	movq	$0x0, 0x50(%rbp)
    00000157: 	pxor	%xmm2, %xmm2
    0000015b: 	movl	$0x40, %edi
    00000160: 	movq	$0x8, 0x58(%rbp)
    00000168: 	movups	%xmm2, 0x60(%rbp)
    0000016c: 	movups	%xmm2, 0x70(%rbp)
    00000170: 	movups	%xmm2, 0x80(%rbp)
    00000177: 	movups	%xmm2, 0x90(%rbp)
    0000017e: 	callq	_Znwm@PLT # Offset: 382
    00000183: 	movq	0x58(%rbp), %rdx
    00000187: 	movq	%rax, 0x50(%rbp)
    0000018b: 	movl	$0x200, %edi
    00000190: 	leaq	-0x4(,%rdx,4), %rdx
    00000198: 	andq	$-0x8, %rdx
    0000019c: 	leaq	(%rax,%rdx), %r13
    000001a0: 	callq	_Znwm@PLT # Offset: 416
    000001a5: 	movq	%rax, %rdx
    000001a8: 	movq	%rax, %xmm1
    000001ad: 	movq	%rax, (%r13)
    000001b1: 	pxor	%xmm2, %xmm2
    000001b5: 	leaq	0x200(%rax), %rax
    000001bc: 	movq	%r13, %xmm5
    000001c1: 	punpcklqdq	%xmm1, %xmm1
    000001c5: 	movq	$0x0, 0xa0(%rbp)
    000001d0: 	movq	%rax, %xmm0
    000001d5: 	leaq	0x50(%rbp), %rax
    000001d9: 	movups	%xmm1, 0x60(%rbp)
    000001dd: 	movq	%rdx, %rcx
    000001e0: 	movq	%rax, 0x28(%rsp)
    000001e5: 	movq	0x18(%rsp), %rax
    000001ea: 	punpcklqdq	%xmm5, %xmm0
    000001ee: 	movups	%xmm0, 0x70(%rbp)
    000001f2: 	movups	%xmm1, 0x80(%rbp)
    000001f9: 	movq	%rax, %r15
    000001fc: 	movups	%xmm0, 0x90(%rbp)
    00000203: 	movups	%xmm2, 0xa8(%rbp)
    0000020a: 	cmpq	%rax, (%rsp)
    0000020e: 	je	.Ltmp5625 # Offset: 526
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp5632:
    00000218: 	movq	0x48(%rbp), %r8
    0000021c: 	movq	0x30(%rbp), %rax
    00000220: 	addq	$0x8, %r15
    00000224: 	movq	0x38(%rbp), %rdi
    00000228: 	movq	%r8, %rsi
    0000022b: 	subq	0x28(%rbp), %rsi
    0000022f: 	movq	%rax, %r9
    00000232: 	sarq	$0x3, %rsi
    00000236: 	cmpq	$0x1, %r8
    0000023a: 	adcq	$-0x1, %rsi
    0000023e: 	subq	%rdi, %r9
    00000241: 	sarq	$0x3, %r9
    00000245: 	shlq	$0x6, %rsi
    00000249: 	addq	%r9, %rsi
    0000024c: 	movq	0x20(%rbp), %r9
    00000250: 	subq	0x10(%rbp), %r9
    00000254: 	sarq	$0x3, %r9
    00000258: 	addq	%r9, %rsi
    0000025b: 	je	.Ltmp5626 # Offset: 603
.Ltmp5657:
    00000261: 	cmpq	%rax, %rdi
    00000264: 	je	.Ltmp5627 # Offset: 612
.Ltmp5652:
    0000026a: 	movq	-0x8(%rax), %rbx
    0000026e: 	subq	$0x8, %rax
    00000272: 	movq	%rax, 0x30(%rbp)
.Ltmp5653:
    00000276: 	movq	0x60(%rbp), %rdx
    0000027a: 	movq	0x68(%rbp), %rcx
    0000027e: 	movq	0x78(%rbp), %r13
    00000282: 	movq	%rdx, %rax
    00000285: 	subq	%rcx, %rax
    00000288: 	sarq	$0x5, %rax
    0000028c: 	addq	%rbx, %rax
    0000028f: 	js	.Ltmp5628 # Offset: 655
    00000295: 	cmpq	$0xf, %rax
    00000299: 	jg	.Ltmp5629 # Offset: 665
    0000029f: 	movq	%rbx, %rax
    000002a2: 	shlq	$0x5, %rax
    000002a6: 	addq	%rdx, %rax
    000002a9: 	movq	%rbx, 0x18(%rax)
.Ltmp5646:
    000002ad: 	movsd	-0x8(%r15), %xmm0
    000002b3: 	movq	0xb0(%rbp), %rsi
    000002ba: 	movq	$0x0, 0x8(%rax)
    000002c2: 	movq	%rsi, 0x10(%rax)
    000002c6: 	movsd	%xmm0, (%rax)
    000002ca: 	testq	%rsi, %rsi
    000002cd: 	je	.Ltmp5630 # Offset: 717
    000002cf: 	movq	%rax, 0x8(%rsi)
.Ltmp5630:
    000002d3: 	cmpq	$0x0, 0xa8(%rbp)
    000002db: 	movq	%rax, 0xb0(%rbp)
    000002e2: 	je	.Ltmp5631 # Offset: 738
    000002e8: 	addq	$0x1, 0xa0(%rbp)
    000002f0: 	cmpq	%r15, (%rsp)
    000002f4: 	jne	.Ltmp5632 # Offset: 756
.Ltmp5625:
    000002fa: 	movq	0x10(%rsp), %rax
    000002ff: 	movq	%rbp, (%rax)
    00000302: 	addq	$0x8, %rax
    00000306: 	movq	%rax, 0x10(%rsp)
    0000030b: 	cmpq	0x30(%rsp), %rax
    00000310: 	jne	.Ltmp5633 # Offset: 784
    00000316: 	callq	clock@PLT # Offset: 790
    0000031b: 	movq	0x48(%rsp), %r12
    00000320: 	movq	0x30(%rsp), %r13
    00000325: 	movq	%rax, start_time(%rip)
.Ltmp5641:
    0000032c: 	movq	(%r12), %rbp
    00000330: 	testq	%rbp, %rbp
    00000333: 	je	.Ltmp5634 # Offset: 819
    00000339: 	movq	0x50(%rbp), %rdi
    0000033d: 	testq	%rdi, %rdi
    00000340: 	je	.Ltmp5635 # Offset: 832
    00000342: 	movq	0x98(%rbp), %rax
    00000349: 	movq	0x78(%rbp), %rbx
    0000034d: 	leaq	0x8(%rax), %r15
    00000351: 	cmpq	%rbx, %r15
    00000354: 	jbe	.Ltmp5636 # Offset: 852
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5637:
    00000360: 	movq	(%rbx), %rdi
    00000363: 	movl	$0x200, %esi
    00000368: 	addq	$0x8, %rbx
    0000036c: 	callq	_ZdlPvm@PLT # Offset: 876
    00000371: 	cmpq	%rbx, %r15
    00000374: 	ja	.Ltmp5637 # Offset: 884
    00000376: 	movq	0x50(%rbp), %rdi
.Ltmp5636:
    0000037a: 	movq	0x58(%rbp), %rax
    0000037e: 	leaq	(,%rax,8), %rsi
    00000386: 	callq	_ZdlPvm@PLT # Offset: 902
.Ltmp5635:
    0000038b: 	movq	(%rbp), %rdi
    0000038f: 	testq	%rdi, %rdi
    00000392: 	je	.Ltmp5638 # Offset: 914
    00000394: 	movq	0x48(%rbp), %rax
    00000398: 	movq	0x28(%rbp), %rbx
    0000039c: 	leaq	0x8(%rax), %r15
    000003a0: 	cmpq	%rbx, %r15
    000003a3: 	jbe	.Ltmp5639 # Offset: 931
    000003a5: 	nopl	(%rax) # Size: 3
.Ltmp5640:
    000003a8: 	movq	(%rbx), %rdi
    000003ab: 	movl	$0x200, %esi
    000003b0: 	addq	$0x8, %rbx
    000003b4: 	callq	_ZdlPvm@PLT # Offset: 948
    000003b9: 	cmpq	%rbx, %r15
    000003bc: 	ja	.Ltmp5640 # Offset: 956
    000003be: 	movq	(%rbp), %rdi
.Ltmp5639:
    000003c2: 	movq	0x8(%rbp), %rax
    000003c6: 	leaq	(,%rax,8), %rsi
    000003ce: 	callq	_ZdlPvm@PLT # Offset: 974
.Ltmp5638:
    000003d3: 	movl	$0xb8, %esi
    000003d8: 	movq	%rbp, %rdi
    000003db: 	callq	_ZdlPvm@PLT # Offset: 987
.Ltmp5634:
    000003e0: 	movq	$0x0, (%r12)
    000003e8: 	addq	$0x8, %r12
    000003ec: 	cmpq	%r13, %r12
    000003ef: 	jne	.Ltmp5641 # Offset: 1007
    000003f5: 	callq	clock@PLT # Offset: 1013
    000003fa: 	pxor	%xmm0, %xmm0
    000003fe: 	movl	0x8(%rsp), %edi
    00000402: 	addl	%edi, 0x40(%rsp)
    00000406: 	movq	%rax, end_time(%rip)
    0000040d: 	subq	start_time(%rip), %rax
    00000414: 	cvtsi2sd	%rax, %xmm0
    00000419: 	movl	0x40(%rsp), %edi
    0000041d: 	divsd	DATAat0x53788(%rip), %xmm0
    00000425: 	addsd	0x20(%rsp), %xmm0
    0000042b: 	movl	iterations(%rip), %eax
    00000431: 	movsd	%xmm0, 0x20(%rsp)
    00000437: 	cmpl	%edi, %eax
    00000439: 	jg	.Ltmp5642 # Offset: 1081
.Ltmp5662:
    0000043f: 	movq	0x50(%rsp), %rdi
    00000444: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1092
    00000449: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000450: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000457: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000045e: 	je	.Ltmp5643 # Offset: 1118
.Ltmp5661:
    00000464: 	movq	-0x20(%rax), %rdi
    00000468: 	movsd	0x20(%rsp), %xmm0
    0000046e: 	callq	_Z13record_resultdPKc # Offset: 1134
    00000473: 	cmpq	$0x0, 0x38(%rsp)
    00000479: 	je	.Ltmp5644 # Offset: 1145
    0000047f: 	movq	0xa8(%rsp), %rax
    00000487: 	subq	%fs:0x28, %rax
    00000490: 	jne	.Ltmp5645 # Offset: 1168
    00000496: 	movq	0xa0(%rsp), %rsi
    0000049e: 	movq	0x38(%rsp), %rdi
    000004a3: 	addq	$0xb8, %rsp
    000004aa: 	popq	%rbx
    000004ab: 	popq	%rbp
    000004ac: 	subq	%rdi, %rsi
    000004af: 	popq	%r12
    000004b1: 	popq	%r13
    000004b3: 	popq	%r14
    000004b5: 	popq	%r15
    000004b7: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1207
    000004bc: 	nopl	(%rax) # Size: 4
.Ltmp5629:
    000004c0: 	movq	%rax, %rsi
    000004c3: 	andl	$0xf, %eax
    000004c6: 	sarq	$0x4, %rsi
    000004ca: 	shlq	$0x5, %rax
    000004ce: 	addq	(%r13,%rsi,8), %rax
    000004d3: 	movq	%rbx, 0x18(%rax)
    000004d7: 	jmp	.Ltmp5646 # Offset: 1239
.Ltmp5626:
    000004dc: 	movq	0x98(%rbp), %rsi
    000004e3: 	movq	0x70(%rbp), %r9
    000004e7: 	movq	0x80(%rbp), %r12
    000004ee: 	movq	%rsi, %r10
    000004f1: 	subq	%r13, %r10
    000004f4: 	sarq	$0x3, %r10
    000004f8: 	cmpq	$0x1, %rsi
    000004fc: 	adcq	$-0x1, %r10
    00000500: 	subq	0x88(%rbp), %r12
    00000507: 	shlq	$0x4, %r10
    0000050b: 	sarq	$0x5, %r12
    0000050f: 	addq	%r10, %r12
    00000512: 	movq	%r9, %r10
    00000515: 	subq	%rdx, %r10
    00000518: 	sarq	$0x5, %r10
    0000051c: 	addq	%r10, %r12
    0000051f: 	leaq	0x80(%r12), %rbx
    00000527: 	cmpq	%rbx, %r12
    0000052a: 	jb	.Ltmp5647 # Offset: 1322
    00000530: 	movq	%rdx, %r10
    00000533: 	subq	%rcx, %r10
    00000536: 	sarq	$0x5, %r10
    0000053a: 	addq	%rbx, %r10
    0000053d: 	js	.Ltmp5648 # Offset: 1341
    00000543: 	cmpq	$0xf, %r10
    00000547: 	jle	.Ltmp5649 # Offset: 1351
    0000054d: 	movq	%r10, %rdx
    00000550: 	sarq	$0x4, %rdx
.Ltmp5660:
    00000554: 	leaq	(%r13,%rdx,8), %r13
    00000559: 	shlq	$0x4, %rdx
    0000055d: 	movq	%rdx, %r11
    00000560: 	movq	%r10, %rdx
    00000563: 	movq	(%r13), %rcx
    00000567: 	subq	%r11, %rdx
    0000056a: 	shlq	$0x5, %rdx
    0000056e: 	leaq	0x200(%rcx), %r9
    00000575: 	addq	%rcx, %rdx
.Ltmp5659:
    00000578: 	movq	%rcx, %xmm7
    0000057d: 	movq	%rdx, %xmm6
    00000582: 	movq	%r13, %xmm5
    00000587: 	addq	$0x8, %r13
    0000058b: 	punpcklqdq	%xmm7, %xmm6
    0000058f: 	movq	%r9, %xmm7
    00000594: 	leaq	0x8(%rsi), %rbx
    00000598: 	punpcklqdq	%xmm5, %xmm7
    0000059c: 	movaps	%xmm6, 0x60(%rsp)
    000005a1: 	movaps	%xmm7, 0x70(%rsp)
    000005a6: 	cmpq	%r13, %rbx
    000005a9: 	jbe	.Ltmp5650 # Offset: 1449
    000005ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5651:
    000005b0: 	movq	(%r13), %rdi
    000005b4: 	movl	$0x200, %esi
    000005b9: 	addq	$0x8, %r13
    000005bd: 	callq	_ZdlPvm@PLT # Offset: 1469
    000005c2: 	cmpq	%r13, %rbx
    000005c5: 	ja	.Ltmp5651 # Offset: 1477
    000005c7: 	movq	0x30(%rbp), %rax
    000005cb: 	movq	0x38(%rbp), %rdi
    000005cf: 	movq	0x48(%rbp), %r8
.Ltmp5650:
    000005d3: 	movdqa	0x60(%rsp), %xmm7
    000005d9: 	movdqa	0x70(%rsp), %xmm5
    000005df: 	movups	%xmm7, 0x80(%rbp)
    000005e6: 	movups	%xmm5, 0x90(%rbp)
    000005ed: 	cmpq	%rax, %rdi
    000005f0: 	jne	.Ltmp5652 # Offset: 1520
.Ltmp5627:
    000005f6: 	movq	-0x8(%r8), %rax
    000005fa: 	movl	$0x200, %esi
    000005ff: 	movq	0x1f8(%rax), %rbx
    00000606: 	callq	_ZdlPvm@PLT # Offset: 1542
    0000060b: 	movq	0x48(%rbp), %rdx
    0000060f: 	movq	-0x8(%rdx), %rax
    00000613: 	subq	$0x8, %rdx
    00000617: 	movq	%rdx, %xmm4
    0000061c: 	leaq	0x1f8(%rax), %rdi
    00000623: 	movq	%rax, %xmm3
    00000628: 	addq	$0x200, %rax
    0000062e: 	movq	%rdi, %xmm0
    00000633: 	punpcklqdq	%xmm3, %xmm0
    00000637: 	movups	%xmm0, 0x30(%rbp)
    0000063b: 	movq	%rax, %xmm0
    00000640: 	punpcklqdq	%xmm4, %xmm0
    00000644: 	movups	%xmm0, 0x40(%rbp)
    00000648: 	jmp	.Ltmp5653 # Offset: 1608
.Ltmp5631:
    0000064d: 	addq	$0x1, 0xa0(%rbp)
    00000655: 	movq	%rax, 0xa8(%rbp)
    0000065c: 	cmpq	%r15, (%rsp)
    00000660: 	jne	.Ltmp5632 # Offset: 1632
    00000666: 	jmp	.Ltmp5625 # Offset: 1638
    0000066b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5628:
    00000670: 	movq	%rax, %rsi
    00000673: 	notq	%rsi
    00000676: 	shrq	$0x4, %rsi
    0000067a: 	notq	%rsi
    0000067d: 	movq	%rsi, %rdi
    00000680: 	shlq	$0x4, %rdi
    00000684: 	subq	%rdi, %rax
    00000687: 	shlq	$0x5, %rax
    0000068b: 	addq	(%r13,%rsi,8), %rax
    00000690: 	movq	%rbx, 0x18(%rax)
    00000694: 	jmp	.Ltmp5646 # Offset: 1684
.Ltmp5647:
    00000699: 	movq	0x28(%rsp), %rdi
    0000069e: 	movl	$0x80, %esi
    000006a3: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1699
    000006a8: 	movq	0x30(%rbp), %rax
    000006ac: 	jmp	.Ltmp5654 # Offset: 1708
    000006ae: 	nop # Size: 2
.Ltmp5656:
    000006b0: 	movq	%rbx, (%rax)
    000006b3: 	addq	$0x8, %rax
    000006b7: 	movq	%rax, 0x30(%rbp)
    000006bb: 	cmpq	%rbx, %r12
    000006be: 	je	.Ltmp5655 # Offset: 1726
.Ltmp5654:
    000006c0: 	movq	0x40(%rbp), %rcx
    000006c4: 	subq	$0x1, %rbx
    000006c8: 	movq	%rbx, 0x88(%rsp)
    000006d0: 	leaq	-0x8(%rcx), %rdx
    000006d4: 	cmpq	%rdx, %rax
    000006d7: 	jne	.Ltmp5656 # Offset: 1751
    000006d9: 	movq	%r14, %rsi
    000006dc: 	movq	%rbp, %rdi
    000006df: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 1759
    000006e4: 	movq	0x30(%rbp), %rax
    000006e8: 	cmpq	%rbx, %r12
    000006eb: 	jne	.Ltmp5654 # Offset: 1771
.Ltmp5655:
    000006ed: 	movq	0x38(%rbp), %rdi
    000006f1: 	movq	0x48(%rbp), %r8
    000006f5: 	jmp	.Ltmp5657 # Offset: 1781
.Ltmp5622:
    000006fa: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp5623:
    00000703: 	movq	$0x0, 0xa0(%rsp)
    0000070f: 	pxor	%xmm0, %xmm0
    00000713: 	movaps	%xmm0, 0x90(%rsp)
    0000071b: 	jmp	.Ltmp5658 # Offset: 1819
.Ltmp5649:
    00000720: 	shlq	$0x5, %rbx
    00000724: 	addq	%rbx, %rdx
    00000727: 	jmp	.Ltmp5659 # Offset: 1831
.Ltmp5648:
    0000072c: 	movq	%r10, %rdx
    0000072f: 	notq	%rdx
    00000732: 	shrq	$0x4, %rdx
    00000736: 	notq	%rdx
    00000739: 	jmp	.Ltmp5660 # Offset: 1849
.Ltmp5644:
    0000073e: 	movq	0xa8(%rsp), %rax
    00000746: 	subq	%fs:0x28, %rax
    0000074f: 	jne	.Ltmp5645 # Offset: 1871
    00000751: 	addq	$0xb8, %rsp
    00000758: 	popq	%rbx
    00000759: 	popq	%rbp
    0000075a: 	popq	%r12
    0000075c: 	popq	%r13
    0000075e: 	popq	%r14
    00000760: 	popq	%r15
    00000762: 	retq # Offset: 1890
.Ltmp5643:
    00000763: 	movq	-0x8(%rdx), %rax
    00000767: 	addq	$0x200, %rax
    0000076d: 	jmp	.Ltmp5661 # Offset: 1901
.Ltmp5624:
    00000772: 	pxor	%xmm3, %xmm3
    00000776: 	movsd	%xmm3, 0x20(%rsp)
    0000077c: 	jmp	.Ltmp5662 # Offset: 1916
.Ltmp5645:
    00000781: 	callq	__stack_chk_fail@PLT # Offset: 1921
    00000786: 	endbr64
    0000078a: 	movq	%rax, %rbx
    0000078d: 	jmp	.Ltmp5663 # Offset: 1933
    0000078f: 	endbr64
    00000793: 	movq	%rax, %rdi
    00000796: 	jmp	.Ltmp5664 # Offset: 1942
.Ltmp5669:
    00000798: 	callq	__cxa_end_catch@PLT # Offset: 1944
.Ltmp5663:
    0000079d: 	movq	%rbp, %rdi
    000007a0: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 1952
.Ltmp5667:
    000007a5: 	movq	%rbp, %rdi
    000007a8: 	movl	$0xb8, %esi
    000007ad: 	movq	%rbx, %rbp
    000007b0: 	callq	_ZdlPvm@PLT # Offset: 1968
.Ltmp5668:
    000007b5: 	movq	0x90(%rsp), %rdi
    000007bd: 	movq	0xa0(%rsp), %rsi
    000007c5: 	subq	%rdi, %rsi
    000007c8: 	testq	%rdi, %rdi
    000007cb: 	je	.Ltmp5665 # Offset: 1995
    000007cd: 	callq	_ZdlPvm@PLT # Offset: 1997
.Ltmp5665:
    000007d2: 	movq	%rbp, %rdi
    000007d5: 	callq	_Unwind_Resume@PLT # Offset: 2005
.Ltmp5664:
    000007da: 	callq	__cxa_begin_catch@PLT # Offset: 2010
    000007df: 	callq	__cxa_rethrow@PLT # Offset: 2015
    000007e4: 	endbr64
    000007e8: 	movq	%rax, %r12
    000007eb: 	jmp	.Ltmp5666 # Offset: 2027
    000007ed: 	endbr64
    000007f1: 	movq	%rax, %rbx
    000007f4: 	jmp	.Ltmp5667 # Offset: 2036
    000007f6: 	endbr64
    000007fa: 	movq	%rax, %rbp
    000007fd: 	jmp	.Ltmp5668 # Offset: 2045
.Ltmp5666:
    000007ff: 	callq	__cxa_end_catch@PLT # Offset: 2047
    00000804: 	movq	%r12, %rdi
    00000807: 	callq	__cxa_begin_catch@PLT # Offset: 2055
    0000080c: 	movq	0x58(%rbp), %rax
    00000810: 	movq	0x50(%rbp), %rdi
    00000814: 	leaq	(,%rax,8), %rsi
    0000081c: 	callq	_ZdlPvm@PLT # Offset: 2076
    00000821: 	movq	$0x0, 0x50(%rbp)
    00000829: 	movq	$0x0, 0x58(%rbp)
    00000831: 	callq	__cxa_rethrow@PLT # Offset: 2097
    00000836: 	endbr64
    0000083a: 	movq	%rax, %rbx
    0000083d: 	jmp	.Ltmp5669 # Offset: 2109
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_delete_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_popbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 318
  State       : disassembled
  Address     : 0x3b2d0
  Size        : 0x9a5
  MaxSize     : 0x9b0
  Offset      : 0x3b2d0
  Section     : .text
  Orc Section : .local.text._Z12test_popbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0317:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rsi, %r15
    0000000c: 	pushq	%r14
    0000000e: 	subq	%rdi, %rcx
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0xb8, %rsp
    0000001e: 	movq	%rdx, 0x60(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x18(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0xa8(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	movabsq	$0x500000000, %rax
    00000047: 	divq	%rcx
    0000004a: 	movq	%rax, 0x28(%rsp)
    0000004f: 	cmpq	$0x3e8, %rax
    00000055: 	ja	.Ltmp5670 # Offset: 85
    0000005b: 	cmpq	$0x3, %rax
    0000005f: 	ja	.Ltmp5671 # Offset: 95
    00000065: 	movq	$0x0, 0xa0(%rsp)
    00000071: 	pxor	%xmm0, %xmm0
    00000075: 	movq	$0x4, 0x28(%rsp)
    0000007e: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5719:
    00000086: 	movq	0x28(%rsp), %rbx
    0000008b: 	leaq	0x90(%rsp), %rdi
    00000093: 	movq	%rbx, %rsi
    00000096: 	callq	_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 150
    0000009b: 	movq	0x90(%rsp), %rdi
    000000a3: 	movl	iterations(%rip), %eax
    000000a9: 	movq	%rdi, 0x40(%rsp)
    000000ae: 	testl	%eax, %eax
    000000b0: 	jle	.Ltmp5672 # Offset: 176
    000000b6: 	addq	$0x8, %rdi
    000000ba: 	movl	%ebx, 0x4c(%rsp)
    000000be: 	pxor	%xmm5, %xmm5
    000000c2: 	leaq	0x88(%rsp), %r13
    000000ca: 	movl	$0x0, 0x48(%rsp)
    000000d2: 	movq	%rdi, 0x68(%rsp)
    000000d7: 	movsd	%xmm5, 0x50(%rsp)
.Ltmp5710:
    000000dd: 	movslq	0x48(%rsp), %rdx
    000000e2: 	movslq	%eax, %rcx
    000000e5: 	movq	0x68(%rsp), %rsi
    000000ea: 	movq	%rdx, %rdi
    000000ed: 	addq	0x28(%rsp), %rdx
    000000f2: 	subl	%edi, %eax
    000000f4: 	cmpq	%rcx, %rdx
    000000f7: 	cmovbl	0x4c(%rsp), %eax
    000000fc: 	movq	0x40(%rsp), %rdi
    00000101: 	subl	$0x1, %eax
    00000104: 	movq	%rdi, 0x58(%rsp)
    00000109: 	leaq	(%rsi,%rax,8), %rax
    0000010d: 	movq	%rdi, 0x30(%rsp)
    00000112: 	movq	%rax, 0x20(%rsp)
.Ltmp5681:
    00000117: 	movl	$0xb8, %edi
    0000011c: 	callq	_Znwm@PLT # Offset: 284
    00000121: 	movq	$0x0, (%rax)
    00000128: 	pxor	%xmm2, %xmm2
    0000012c: 	xorl	%esi, %esi
    0000012e: 	movq	%rax, %rdi
    00000131: 	movq	$0x0, 0x8(%rax)
    00000139: 	movq	%rax, %rbp
    0000013c: 	movups	%xmm2, 0x10(%rax)
    00000140: 	movups	%xmm2, 0x20(%rax)
    00000144: 	movups	%xmm2, 0x30(%rax)
    00000148: 	movups	%xmm2, 0x40(%rax)
    0000014c: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 332
    00000151: 	movq	$0x0, 0x50(%rbp)
    00000159: 	pxor	%xmm2, %xmm2
    0000015d: 	movl	$0x40, %edi
    00000162: 	movq	$0x8, 0x58(%rbp)
    0000016a: 	movups	%xmm2, 0x60(%rbp)
    0000016e: 	movups	%xmm2, 0x70(%rbp)
    00000172: 	movups	%xmm2, 0x80(%rbp)
    00000179: 	movups	%xmm2, 0x90(%rbp)
    00000180: 	callq	_Znwm@PLT # Offset: 384
    00000185: 	movq	0x58(%rbp), %rdx
    00000189: 	movq	%rax, 0x50(%rbp)
    0000018d: 	movl	$0x200, %edi
    00000192: 	leaq	-0x4(,%rdx,4), %rdx
    0000019a: 	andq	$-0x8, %rdx
    0000019e: 	leaq	(%rax,%rdx), %rbx
    000001a2: 	movq	%rbx, (%rsp)
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	%rax, %rdx
    000001ae: 	movq	%rax, %xmm1
    000001b3: 	movq	%rax, (%rbx)
    000001b6: 	pxor	%xmm2, %xmm2
    000001ba: 	leaq	0x200(%rax), %rax
    000001c1: 	punpcklqdq	%xmm1, %xmm1
    000001c5: 	movq	%rdx, %rcx
    000001c8: 	movq	$0x0, 0xa0(%rbp)
    000001d3: 	movq	%rax, %xmm0
    000001d8: 	leaq	0x50(%rbp), %rax
    000001dc: 	movups	%xmm1, 0x60(%rbp)
    000001e0: 	movq	%rax, 0x38(%rsp)
    000001e5: 	movq	0x18(%rsp), %rax
    000001ea: 	movhps	(%rsp), %xmm0
    000001ee: 	movups	%xmm0, 0x70(%rbp)
    000001f2: 	movups	%xmm1, 0x80(%rbp)
    000001f9: 	movq	%rax, %r14
    000001fc: 	movups	%xmm0, 0x90(%rbp)
    00000203: 	movups	%xmm2, 0xa8(%rbp)
    0000020a: 	cmpq	%rax, %r15
    0000020d: 	je	.Ltmp5673 # Offset: 525
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5680:
    00000218: 	movq	0x48(%rbp), %r8
    0000021c: 	movq	0x30(%rbp), %rax
    00000220: 	addq	$0x8, %r14
    00000224: 	movq	0x38(%rbp), %rdi
    00000228: 	movq	%r8, %rsi
    0000022b: 	subq	0x28(%rbp), %rsi
    0000022f: 	movq	%rax, %r9
    00000232: 	sarq	$0x3, %rsi
    00000236: 	cmpq	$0x1, %r8
    0000023a: 	adcq	$-0x1, %rsi
    0000023e: 	subq	%rdi, %r9
    00000241: 	sarq	$0x3, %r9
    00000245: 	shlq	$0x6, %rsi
    00000249: 	addq	%r9, %rsi
    0000024c: 	movq	0x20(%rbp), %r9
    00000250: 	subq	0x10(%rbp), %r9
    00000254: 	sarq	$0x3, %r9
    00000258: 	addq	%r9, %rsi
    0000025b: 	je	.Ltmp5674 # Offset: 603
.Ltmp5718:
    00000261: 	cmpq	%rax, %rdi
    00000264: 	je	.Ltmp5675 # Offset: 612
.Ltmp5698:
    0000026a: 	movq	-0x8(%rax), %rbx
    0000026e: 	subq	$0x8, %rax
    00000272: 	movq	%rax, 0x30(%rbp)
.Ltmp5699:
    00000276: 	movq	0x78(%rbp), %rax
    0000027a: 	movq	0x60(%rbp), %rdx
    0000027e: 	movq	0x68(%rbp), %rcx
    00000282: 	movq	%rax, (%rsp)
    00000286: 	movq	%rdx, %rax
    00000289: 	subq	%rcx, %rax
    0000028c: 	sarq	$0x5, %rax
    00000290: 	addq	%rbx, %rax
    00000293: 	js	.Ltmp5676 # Offset: 659
    00000299: 	cmpq	$0xf, %rax
    0000029d: 	jg	.Ltmp5677 # Offset: 669
    000002a3: 	movq	%rbx, %rax
    000002a6: 	shlq	$0x5, %rax
    000002aa: 	addq	%rdx, %rax
    000002ad: 	movq	%rbx, 0x18(%rax)
.Ltmp5692:
    000002b1: 	movsd	-0x8(%r14), %xmm0
    000002b7: 	movq	0xb0(%rbp), %rsi
    000002be: 	movq	$0x0, 0x8(%rax)
    000002c6: 	movq	%rsi, 0x10(%rax)
    000002ca: 	movsd	%xmm0, (%rax)
    000002ce: 	testq	%rsi, %rsi
    000002d1: 	je	.Ltmp5678 # Offset: 721
    000002d3: 	movq	%rax, 0x8(%rsi)
.Ltmp5678:
    000002d7: 	cmpq	$0x0, 0xa8(%rbp)
    000002df: 	movq	%rax, 0xb0(%rbp)
    000002e6: 	je	.Ltmp5679 # Offset: 742
    000002ec: 	addq	$0x1, 0xa0(%rbp)
    000002f4: 	cmpq	%r14, %r15
    000002f7: 	jne	.Ltmp5680 # Offset: 759
.Ltmp5673:
    000002fd: 	movq	0x30(%rsp), %rax
    00000302: 	movq	%rbp, (%rax)
    00000305: 	addq	$0x8, %rax
    00000309: 	movq	%rax, 0x30(%rsp)
    0000030e: 	cmpq	%rax, 0x20(%rsp)
    00000313: 	jne	.Ltmp5681 # Offset: 787
    00000319: 	callq	clock@PLT # Offset: 793
    0000031e: 	movq	%rax, start_time(%rip)
    00000325: 	movq	0x40(%rsp), %rax
    0000032a: 	movq	%rax, (%rsp)
.Ltmp5701:
    0000032e: 	movq	(%rsp), %rax
    00000332: 	movq	(%rax), %rbx
    00000335: 	cmpq	0x18(%rsp), %r15
    0000033a: 	je	.Ltmp5682 # Offset: 826
    00000340: 	movq	0xb0(%rbx), %rbp
    00000347: 	movq	0x18(%rsp), %r12
    0000034c: 	jmp	.Ltmp5683 # Offset: 844
    0000034e: 	nop # Size: 2
.Ltmp5689:
    00000350: 	cmpq	$0xf, %rax
    00000354: 	jg	.Ltmp5684 # Offset: 852
    0000035a: 	shlq	$0x5, %rdx
    0000035e: 	leaq	(%rdi,%rdx), %rax
.Ltmp5690:
    00000362: 	movq	$-0x1, 0x18(%rax)
    0000036a: 	cmpq	%rcx, 0xa8(%rbx)
    00000371: 	je	.Ltmp5685 # Offset: 881
.Ltmp5700:
    00000377: 	testq	%r14, %r14
    0000037a: 	je	.Ltmp5686 # Offset: 890
    00000380: 	movq	$0x0, 0x8(%r14)
    00000388: 	movq	%r14, %rbp
.Ltmp5687:
    0000038b: 	addq	$0x8, %r12
    0000038f: 	subq	$0x1, 0xa0(%rbx)
    00000397: 	movq	%rbp, 0xb0(%rbx)
    0000039e: 	cmpq	%r12, %r15
    000003a1: 	je	.Ltmp5682 # Offset: 929
.Ltmp5683:
    000003a7: 	testq	%rbp, %rbp
    000003aa: 	je	.Ltmp5687 # Offset: 938
    000003ac: 	movq	0x40(%rbx), %rdi
    000003b0: 	movq	0x30(%rbx), %rax
    000003b4: 	movq	0x10(%rbp), %r14
    000003b8: 	leaq	-0x8(%rdi), %rdx
    000003bc: 	cmpq	%rdx, %rax
    000003bf: 	je	.Ltmp5688 # Offset: 959
    000003c5: 	movq	0x18(%rbp), %rdx
    000003c9: 	addq	$0x8, %rax
    000003cd: 	movq	%rbp, %rcx
    000003d0: 	movq	%rdx, -0x8(%rax)
    000003d4: 	movq	%rax, 0x30(%rbx)
.Ltmp5714:
    000003d8: 	movq	0x60(%rbx), %rdi
    000003dc: 	movq	0x18(%rbp), %rdx
    000003e0: 	movq	0x78(%rbx), %rsi
    000003e4: 	movq	%rdi, %rax
    000003e7: 	subq	0x68(%rbx), %rax
    000003eb: 	sarq	$0x5, %rax
    000003ef: 	addq	%rdx, %rax
    000003f2: 	jns	.Ltmp5689 # Offset: 1010
    000003f8: 	movq	%rax, %rdx
    000003fb: 	notq	%rdx
    000003fe: 	shrq	$0x4, %rdx
    00000402: 	notq	%rdx
.Ltmp5691:
    00000405: 	movq	%rdx, %rdi
    00000408: 	shlq	$0x4, %rdi
    0000040c: 	subq	%rdi, %rax
    0000040f: 	shlq	$0x5, %rax
    00000413: 	addq	(%rsi,%rdx,8), %rax
    00000417: 	jmp	.Ltmp5690 # Offset: 1047
.Ltmp5684:
    0000041c: 	movq	%rax, %rdx
    0000041f: 	sarq	$0x4, %rdx
    00000423: 	jmp	.Ltmp5691 # Offset: 1059
.Ltmp5677:
    00000425: 	movq	(%rsp), %rdi
    00000429: 	movq	%rax, %rsi
    0000042c: 	andl	$0xf, %eax
    0000042f: 	sarq	$0x4, %rsi
    00000433: 	shlq	$0x5, %rax
    00000437: 	addq	(%rdi,%rsi,8), %rax
    0000043b: 	movq	%rbx, 0x18(%rax)
    0000043f: 	jmp	.Ltmp5692 # Offset: 1087
.Ltmp5674:
    00000444: 	movq	0x98(%rbp), %rsi
    0000044b: 	movq	0x70(%rbp), %r9
    0000044f: 	movq	0x80(%rbp), %r12
    00000456: 	movq	%rsi, %r10
    00000459: 	subq	(%rsp), %r10
    0000045d: 	sarq	$0x3, %r10
    00000461: 	cmpq	$0x1, %rsi
    00000465: 	adcq	$-0x1, %r10
    00000469: 	subq	0x88(%rbp), %r12
    00000470: 	shlq	$0x4, %r10
    00000474: 	sarq	$0x5, %r12
    00000478: 	addq	%r10, %r12
    0000047b: 	movq	%r9, %r10
    0000047e: 	subq	%rdx, %r10
    00000481: 	sarq	$0x5, %r10
    00000485: 	addq	%r10, %r12
    00000488: 	leaq	0x80(%r12), %rbx
    00000490: 	cmpq	%rbx, %r12
    00000493: 	jb	.Ltmp5693 # Offset: 1171
    00000499: 	movq	%rdx, %r10
    0000049c: 	subq	%rcx, %r10
    0000049f: 	sarq	$0x5, %r10
    000004a3: 	addq	%rbx, %r10
    000004a6: 	js	.Ltmp5694 # Offset: 1190
    000004ac: 	cmpq	$0xf, %r10
    000004b0: 	jle	.Ltmp5695 # Offset: 1200
    000004b6: 	movq	%r10, %rdx
    000004b9: 	sarq	$0x4, %rdx
.Ltmp5721:
    000004bd: 	movq	(%rsp), %rcx
    000004c1: 	leaq	(%rcx,%rdx,8), %rcx
    000004c5: 	shlq	$0x4, %rdx
    000004c9: 	movq	%rdx, %r11
    000004cc: 	movq	%r10, %rdx
    000004cf: 	movq	%rcx, (%rsp)
    000004d3: 	movq	(%rcx), %rcx
    000004d6: 	subq	%r11, %rdx
    000004d9: 	shlq	$0x5, %rdx
    000004dd: 	leaq	0x200(%rcx), %r9
    000004e4: 	addq	%rcx, %rdx
.Ltmp5720:
    000004e7: 	movq	%rcx, %xmm7
    000004ec: 	movq	(%rsp), %rcx
    000004f0: 	movq	%rdx, %xmm5
    000004f5: 	leaq	0x8(%rsi), %rbx
    000004f9: 	punpcklqdq	%xmm7, %xmm5
    000004fd: 	movq	%r9, %xmm6
    00000502: 	movq	%rcx, %xmm7
    00000507: 	addq	$0x8, %rcx
    0000050b: 	movaps	%xmm5, 0x70(%rsp)
    00000510: 	punpcklqdq	%xmm7, %xmm6
    00000514: 	movq	%rcx, %r12
    00000517: 	movaps	%xmm6, (%rsp)
    0000051b: 	cmpq	%rcx, %rbx
    0000051e: 	jbe	.Ltmp5696 # Offset: 1310
.Ltmp5697:
    00000520: 	movq	(%r12), %rdi
    00000524: 	movl	$0x200, %esi
    00000529: 	addq	$0x8, %r12
    0000052d: 	callq	_ZdlPvm@PLT # Offset: 1325
    00000532: 	cmpq	%r12, %rbx
    00000535: 	ja	.Ltmp5697 # Offset: 1333
    00000537: 	movq	0x30(%rbp), %rax
    0000053b: 	movq	0x38(%rbp), %rdi
    0000053f: 	movq	0x48(%rbp), %r8
.Ltmp5696:
    00000543: 	movdqa	0x70(%rsp), %xmm7
    00000549: 	movups	%xmm7, 0x80(%rbp)
    00000550: 	movdqa	(%rsp), %xmm7
    00000555: 	movups	%xmm7, 0x90(%rbp)
    0000055c: 	cmpq	%rax, %rdi
    0000055f: 	jne	.Ltmp5698 # Offset: 1375
.Ltmp5675:
    00000565: 	movq	-0x8(%r8), %rax
    00000569: 	movl	$0x200, %esi
    0000056e: 	movq	0x1f8(%rax), %rbx
    00000575: 	callq	_ZdlPvm@PLT # Offset: 1397
    0000057a: 	movq	0x48(%rbp), %rdx
    0000057e: 	movq	-0x8(%rdx), %rax
    00000582: 	subq	$0x8, %rdx
    00000586: 	movq	%rdx, %xmm4
    0000058b: 	leaq	0x1f8(%rax), %rdi
    00000592: 	movq	%rax, %xmm3
    00000597: 	addq	$0x200, %rax
    0000059d: 	movq	%rdi, %xmm0
    000005a2: 	punpcklqdq	%xmm3, %xmm0
    000005a6: 	movups	%xmm0, 0x30(%rbp)
    000005aa: 	movq	%rax, %xmm0
    000005af: 	punpcklqdq	%xmm4, %xmm0
    000005b3: 	movups	%xmm0, 0x40(%rbp)
    000005b7: 	jmp	.Ltmp5699 # Offset: 1463
.Ltmp5679:
    000005bc: 	addq	$0x1, 0xa0(%rbp)
    000005c4: 	movq	%rax, 0xa8(%rbp)
    000005cb: 	cmpq	%r14, %r15
    000005ce: 	jne	.Ltmp5680 # Offset: 1486
    000005d4: 	jmp	.Ltmp5673 # Offset: 1492
    000005d9: 	nopl	(%rax) # Size: 7
.Ltmp5676:
    000005e0: 	movq	%rax, %rsi
    000005e3: 	notq	%rsi
    000005e6: 	shrq	$0x4, %rsi
    000005ea: 	notq	%rsi
    000005ed: 	movq	%rsi, %rdi
    000005f0: 	shlq	$0x4, %rdi
    000005f4: 	subq	%rdi, %rax
    000005f7: 	movq	(%rsp), %rdi
    000005fb: 	shlq	$0x5, %rax
    000005ff: 	addq	(%rdi,%rsi,8), %rax
    00000603: 	movq	%rbx, 0x18(%rax)
    00000607: 	jmp	.Ltmp5692 # Offset: 1543
.Ltmp5685:
    0000060c: 	movq	$0x0, 0xa8(%rbx)
    00000617: 	jmp	.Ltmp5700 # Offset: 1559
.Ltmp5682:
    0000061c: 	addq	$0x8, (%rsp)
    00000621: 	movq	(%rsp), %rax
    00000625: 	cmpq	%rax, 0x20(%rsp)
    0000062a: 	jne	.Ltmp5701 # Offset: 1578
    00000630: 	callq	clock@PLT # Offset: 1584
    00000635: 	pxor	%xmm0, %xmm0
    00000639: 	movq	%r13, (%rsp)
    0000063d: 	movq	0x20(%rsp), %r14
    00000642: 	movq	%rax, end_time(%rip)
    00000649: 	subq	start_time(%rip), %rax
    00000650: 	cvtsi2sd	%rax, %xmm0
    00000655: 	divsd	DATAat0x53788(%rip), %xmm0
    0000065d: 	addsd	0x50(%rsp), %xmm0
    00000663: 	movq	0x58(%rsp), %rbx
    00000668: 	movsd	%xmm0, 0x50(%rsp)
.Ltmp5709:
    0000066e: 	movq	(%rbx), %rbp
    00000671: 	testq	%rbp, %rbp
    00000674: 	je	.Ltmp5702 # Offset: 1652
    0000067a: 	movq	0x50(%rbp), %rdi
    0000067e: 	testq	%rdi, %rdi
    00000681: 	je	.Ltmp5703 # Offset: 1665
    00000683: 	movq	0x98(%rbp), %rax
    0000068a: 	movq	0x78(%rbp), %r13
    0000068e: 	leaq	0x8(%rax), %r12
    00000692: 	cmpq	%r13, %r12
    00000695: 	jbe	.Ltmp5704 # Offset: 1685
    00000697: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5705:
    000006a0: 	movq	(%r13), %rdi
    000006a4: 	movl	$0x200, %esi
    000006a9: 	addq	$0x8, %r13
    000006ad: 	callq	_ZdlPvm@PLT # Offset: 1709
    000006b2: 	cmpq	%r13, %r12
    000006b5: 	ja	.Ltmp5705 # Offset: 1717
    000006b7: 	movq	0x50(%rbp), %rdi
.Ltmp5704:
    000006bb: 	movq	0x58(%rbp), %rax
    000006bf: 	leaq	(,%rax,8), %rsi
    000006c7: 	callq	_ZdlPvm@PLT # Offset: 1735
.Ltmp5703:
    000006cc: 	movq	(%rbp), %rdi
    000006d0: 	testq	%rdi, %rdi
    000006d3: 	je	.Ltmp5706 # Offset: 1747
    000006d5: 	movq	0x48(%rbp), %rax
    000006d9: 	movq	0x28(%rbp), %r13
    000006dd: 	leaq	0x8(%rax), %r12
    000006e1: 	cmpq	%r13, %r12
    000006e4: 	jbe	.Ltmp5707 # Offset: 1764
    000006e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5708:
    000006f0: 	movq	(%r13), %rdi
    000006f4: 	movl	$0x200, %esi
    000006f9: 	addq	$0x8, %r13
    000006fd: 	callq	_ZdlPvm@PLT # Offset: 1789
    00000702: 	cmpq	%r13, %r12
    00000705: 	ja	.Ltmp5708 # Offset: 1797
    00000707: 	movq	(%rbp), %rdi
.Ltmp5707:
    0000070b: 	movq	0x8(%rbp), %rax
    0000070f: 	leaq	(,%rax,8), %rsi
    00000717: 	callq	_ZdlPvm@PLT # Offset: 1815
.Ltmp5706:
    0000071c: 	movl	$0xb8, %esi
    00000721: 	movq	%rbp, %rdi
    00000724: 	callq	_ZdlPvm@PLT # Offset: 1828
.Ltmp5702:
    00000729: 	movq	$0x0, (%rbx)
    00000730: 	addq	$0x8, %rbx
    00000734: 	cmpq	%rbx, %r14
    00000737: 	jne	.Ltmp5709 # Offset: 1847
    0000073d: 	movl	0x28(%rsp), %edi
    00000741: 	movl	iterations(%rip), %eax
    00000747: 	addl	%edi, 0x48(%rsp)
    0000074b: 	movl	0x48(%rsp), %edi
    0000074f: 	movq	(%rsp), %r13
    00000753: 	cmpl	%edi, %eax
    00000755: 	jg	.Ltmp5710 # Offset: 1877
.Ltmp5723:
    0000075b: 	movq	0x60(%rsp), %rdi
    00000760: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1888
    00000765: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000076c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000773: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000077a: 	je	.Ltmp5711 # Offset: 1914
.Ltmp5722:
    00000780: 	movq	-0x20(%rax), %rdi
    00000784: 	movsd	0x50(%rsp), %xmm0
    0000078a: 	callq	_Z13record_resultdPKc # Offset: 1930
    0000078f: 	cmpq	$0x0, 0x40(%rsp)
    00000795: 	je	.Ltmp5712 # Offset: 1941
    0000079b: 	movq	0xa8(%rsp), %rax
    000007a3: 	subq	%fs:0x28, %rax
    000007ac: 	jne	.Ltmp5713 # Offset: 1964
    000007b2: 	movq	0xa0(%rsp), %rsi
    000007ba: 	movq	0x40(%rsp), %rdi
    000007bf: 	addq	$0xb8, %rsp
    000007c6: 	popq	%rbx
    000007c7: 	popq	%rbp
    000007c8: 	subq	%rdi, %rsi
    000007cb: 	popq	%r12
    000007cd: 	popq	%r13
    000007cf: 	popq	%r14
    000007d1: 	popq	%r15
    000007d3: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 2003
    000007d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5688:
    000007e0: 	leaq	0x18(%rbp), %rsi
    000007e4: 	movq	%rbx, %rdi
    000007e7: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 2023
    000007ec: 	movq	0xb0(%rbx), %rcx
    000007f3: 	jmp	.Ltmp5714 # Offset: 2035
.Ltmp5693:
    000007f8: 	movq	0x38(%rsp), %rdi
    000007fd: 	movl	$0x80, %esi
    00000802: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2050
    00000807: 	movq	0x30(%rbp), %rax
    0000080b: 	jmp	.Ltmp5715 # Offset: 2059
    0000080d: 	nopl	(%rax) # Size: 3
.Ltmp5717:
    00000810: 	movq	%rbx, (%rax)
    00000813: 	addq	$0x8, %rax
    00000817: 	movq	%rax, 0x30(%rbp)
    0000081b: 	cmpq	%rbx, %r12
    0000081e: 	je	.Ltmp5716 # Offset: 2078
.Ltmp5715:
    00000820: 	movq	0x40(%rbp), %rcx
    00000824: 	subq	$0x1, %rbx
    00000828: 	movq	%rbx, 0x88(%rsp)
    00000830: 	leaq	-0x8(%rcx), %rdx
    00000834: 	cmpq	%rdx, %rax
    00000837: 	jne	.Ltmp5717 # Offset: 2103
    00000839: 	movq	%r13, %rsi
    0000083c: 	movq	%rbp, %rdi
    0000083f: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2111
    00000844: 	movq	0x30(%rbp), %rax
    00000848: 	cmpq	%rbx, %r12
    0000084b: 	jne	.Ltmp5715 # Offset: 2123
.Ltmp5716:
    0000084d: 	movq	0x38(%rbp), %rdi
    00000851: 	movq	0x48(%rbp), %r8
    00000855: 	jmp	.Ltmp5718 # Offset: 2133
.Ltmp5670:
    0000085a: 	movq	$0x3e8, 0x28(%rsp)
.Ltmp5671:
    00000863: 	movq	$0x0, 0xa0(%rsp)
    0000086f: 	pxor	%xmm0, %xmm0
    00000873: 	movaps	%xmm0, 0x90(%rsp)
    0000087b: 	jmp	.Ltmp5719 # Offset: 2171
.Ltmp5695:
    00000880: 	shlq	$0x5, %rbx
    00000884: 	addq	%rbx, %rdx
    00000887: 	jmp	.Ltmp5720 # Offset: 2183
.Ltmp5694:
    0000088c: 	movq	%r10, %rdx
    0000088f: 	notq	%rdx
    00000892: 	shrq	$0x4, %rdx
    00000896: 	notq	%rdx
    00000899: 	jmp	.Ltmp5721 # Offset: 2201
.Ltmp5712:
    0000089e: 	movq	0xa8(%rsp), %rax
    000008a6: 	subq	%fs:0x28, %rax
    000008af: 	jne	.Ltmp5713 # Offset: 2223
    000008b1: 	addq	$0xb8, %rsp
    000008b8: 	popq	%rbx
    000008b9: 	popq	%rbp
    000008ba: 	popq	%r12
    000008bc: 	popq	%r13
    000008be: 	popq	%r14
    000008c0: 	popq	%r15
    000008c2: 	retq # Offset: 2242
.Ltmp5711:
    000008c3: 	movq	-0x8(%rdx), %rax
    000008c7: 	addq	$0x200, %rax
    000008cd: 	jmp	.Ltmp5722 # Offset: 2253
.Ltmp5672:
    000008d2: 	pxor	%xmm5, %xmm5
    000008d6: 	movsd	%xmm5, 0x50(%rsp)
    000008dc: 	jmp	.Ltmp5723 # Offset: 2268
.Ltmp5713:
    000008e1: 	callq	__stack_chk_fail@PLT # Offset: 2273
.Ltmp5686:
    000008e6: 	xorl	%ebp, %ebp
    000008e8: 	jmp	.Ltmp5687 # Offset: 2280
    000008ed: 	endbr64
    000008f1: 	movq	%rax, %rbx
    000008f4: 	jmp	.Ltmp5724 # Offset: 2292
    000008f6: 	endbr64
    000008fa: 	movq	%rax, %rbp
    000008fd: 	jmp	.Ltmp5725 # Offset: 2301
.Ltmp5728:
    000008ff: 	callq	__cxa_end_catch@PLT # Offset: 2303
.Ltmp5727:
    00000904: 	movq	%rbp, %rdi
    00000907: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2311
.Ltmp5724:
    0000090c: 	movq	%rbp, %rdi
    0000090f: 	movl	$0xb8, %esi
    00000914: 	movq	%rbx, %rbp
    00000917: 	callq	_ZdlPvm@PLT # Offset: 2327
.Ltmp5725:
    0000091c: 	movq	0x90(%rsp), %rdi
    00000924: 	movq	0xa0(%rsp), %rsi
    0000092c: 	subq	%rdi, %rsi
    0000092f: 	testq	%rdi, %rdi
    00000932: 	je	.Ltmp5726 # Offset: 2354
    00000934: 	callq	_ZdlPvm@PLT # Offset: 2356
.Ltmp5726:
    00000939: 	movq	%rbp, %rdi
    0000093c: 	callq	_Unwind_Resume@PLT # Offset: 2364
    00000941: 	endbr64
    00000945: 	movq	%rax, %rbx
    00000948: 	jmp	.Ltmp5727 # Offset: 2376
    0000094a: 	endbr64
    0000094e: 	movq	%rax, %rdi
    00000951: 	callq	__cxa_begin_catch@PLT # Offset: 2385
    00000956: 	callq	__cxa_rethrow@PLT # Offset: 2390
    0000095b: 	endbr64
    0000095f: 	movq	%rax, %r12
    00000962: 	callq	__cxa_end_catch@PLT # Offset: 2402
    00000967: 	movq	%r12, %rdi
    0000096a: 	callq	__cxa_begin_catch@PLT # Offset: 2410
    0000096f: 	movq	0x58(%rbp), %rax
    00000973: 	movq	0x50(%rbp), %rdi
    00000977: 	leaq	(,%rax,8), %rsi
    0000097f: 	callq	_ZdlPvm@PLT # Offset: 2431
    00000984: 	movq	$0x0, 0x50(%rbp)
    0000098c: 	movq	$0x0, 0x58(%rbp)
    00000994: 	callq	__cxa_rethrow@PLT # Offset: 2452
    00000999: 	endbr64
    0000099d: 	movq	%rax, %rbx
    000009a0: 	jmp	.Ltmp5728 # Offset: 2464
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_popbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_popfrontId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 319
  State       : disassembled
  Address     : 0x3bc80
  Size        : 0x9a5
  MaxSize     : 0x9b0
  Offset      : 0x3bc80
  Section     : .text
  Orc Section : .local.text._Z13test_popfrontId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0318:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	movq	%rsi, %r15
    0000000c: 	pushq	%r14
    0000000e: 	subq	%rdi, %rcx
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0xb8, %rsp
    0000001e: 	movq	%rdx, 0x60(%rsp)
    00000023: 	xorl	%edx, %edx
    00000025: 	movq	%rdi, 0x18(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0xa8(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	movabsq	$0x500000000, %rax
    00000047: 	divq	%rcx
    0000004a: 	movq	%rax, 0x28(%rsp)
    0000004f: 	cmpq	$0x3e8, %rax
    00000055: 	ja	.Ltmp5729 # Offset: 85
    0000005b: 	cmpq	$0x3, %rax
    0000005f: 	ja	.Ltmp5730 # Offset: 95
    00000065: 	movq	$0x0, 0xa0(%rsp)
    00000071: 	pxor	%xmm0, %xmm0
    00000075: 	movq	$0x4, 0x28(%rsp)
    0000007e: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5778:
    00000086: 	movq	0x28(%rsp), %rbx
    0000008b: 	leaq	0x90(%rsp), %rdi
    00000093: 	movq	%rbx, %rsi
    00000096: 	callq	_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 150
    0000009b: 	movq	0x90(%rsp), %rdi
    000000a3: 	movl	iterations(%rip), %eax
    000000a9: 	movq	%rdi, 0x40(%rsp)
    000000ae: 	testl	%eax, %eax
    000000b0: 	jle	.Ltmp5731 # Offset: 176
    000000b6: 	addq	$0x8, %rdi
    000000ba: 	movl	%ebx, 0x4c(%rsp)
    000000be: 	pxor	%xmm5, %xmm5
    000000c2: 	leaq	0x88(%rsp), %r13
    000000ca: 	movl	$0x0, 0x48(%rsp)
    000000d2: 	movq	%rdi, 0x68(%rsp)
    000000d7: 	movsd	%xmm5, 0x50(%rsp)
.Ltmp5769:
    000000dd: 	movslq	0x48(%rsp), %rdx
    000000e2: 	movslq	%eax, %rcx
    000000e5: 	movq	0x68(%rsp), %rsi
    000000ea: 	movq	%rdx, %rdi
    000000ed: 	addq	0x28(%rsp), %rdx
    000000f2: 	subl	%edi, %eax
    000000f4: 	cmpq	%rcx, %rdx
    000000f7: 	cmovbl	0x4c(%rsp), %eax
    000000fc: 	movq	0x40(%rsp), %rdi
    00000101: 	subl	$0x1, %eax
    00000104: 	movq	%rdi, 0x58(%rsp)
    00000109: 	leaq	(%rsi,%rax,8), %rax
    0000010d: 	movq	%rdi, 0x30(%rsp)
    00000112: 	movq	%rax, 0x20(%rsp)
.Ltmp5740:
    00000117: 	movl	$0xb8, %edi
    0000011c: 	callq	_Znwm@PLT # Offset: 284
    00000121: 	movq	$0x0, (%rax)
    00000128: 	pxor	%xmm2, %xmm2
    0000012c: 	xorl	%esi, %esi
    0000012e: 	movq	%rax, %rdi
    00000131: 	movq	$0x0, 0x8(%rax)
    00000139: 	movq	%rax, %rbp
    0000013c: 	movups	%xmm2, 0x10(%rax)
    00000140: 	movups	%xmm2, 0x20(%rax)
    00000144: 	movups	%xmm2, 0x30(%rax)
    00000148: 	movups	%xmm2, 0x40(%rax)
    0000014c: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 332
    00000151: 	movq	$0x0, 0x50(%rbp)
    00000159: 	pxor	%xmm2, %xmm2
    0000015d: 	movl	$0x40, %edi
    00000162: 	movq	$0x8, 0x58(%rbp)
    0000016a: 	movups	%xmm2, 0x60(%rbp)
    0000016e: 	movups	%xmm2, 0x70(%rbp)
    00000172: 	movups	%xmm2, 0x80(%rbp)
    00000179: 	movups	%xmm2, 0x90(%rbp)
    00000180: 	callq	_Znwm@PLT # Offset: 384
    00000185: 	movq	0x58(%rbp), %rdx
    00000189: 	movq	%rax, 0x50(%rbp)
    0000018d: 	movl	$0x200, %edi
    00000192: 	leaq	-0x4(,%rdx,4), %rdx
    0000019a: 	andq	$-0x8, %rdx
    0000019e: 	leaq	(%rax,%rdx), %rbx
    000001a2: 	movq	%rbx, (%rsp)
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	%rax, %rdx
    000001ae: 	movq	%rax, %xmm1
    000001b3: 	movq	%rax, (%rbx)
    000001b6: 	pxor	%xmm2, %xmm2
    000001ba: 	leaq	0x200(%rax), %rax
    000001c1: 	punpcklqdq	%xmm1, %xmm1
    000001c5: 	movq	%rdx, %rcx
    000001c8: 	movq	$0x0, 0xa0(%rbp)
    000001d3: 	movq	%rax, %xmm0
    000001d8: 	leaq	0x50(%rbp), %rax
    000001dc: 	movups	%xmm1, 0x60(%rbp)
    000001e0: 	movq	%rax, 0x38(%rsp)
    000001e5: 	movq	0x18(%rsp), %rax
    000001ea: 	movhps	(%rsp), %xmm0
    000001ee: 	movups	%xmm0, 0x70(%rbp)
    000001f2: 	movups	%xmm1, 0x80(%rbp)
    000001f9: 	movq	%rax, %r14
    000001fc: 	movups	%xmm0, 0x90(%rbp)
    00000203: 	movups	%xmm2, 0xa8(%rbp)
    0000020a: 	cmpq	%rax, %r15
    0000020d: 	je	.Ltmp5732 # Offset: 525
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5739:
    00000218: 	movq	0x48(%rbp), %r8
    0000021c: 	movq	0x30(%rbp), %rax
    00000220: 	addq	$0x8, %r14
    00000224: 	movq	0x38(%rbp), %rdi
    00000228: 	movq	%r8, %rsi
    0000022b: 	subq	0x28(%rbp), %rsi
    0000022f: 	movq	%rax, %r9
    00000232: 	sarq	$0x3, %rsi
    00000236: 	cmpq	$0x1, %r8
    0000023a: 	adcq	$-0x1, %rsi
    0000023e: 	subq	%rdi, %r9
    00000241: 	sarq	$0x3, %r9
    00000245: 	shlq	$0x6, %rsi
    00000249: 	addq	%r9, %rsi
    0000024c: 	movq	0x20(%rbp), %r9
    00000250: 	subq	0x10(%rbp), %r9
    00000254: 	sarq	$0x3, %r9
    00000258: 	addq	%r9, %rsi
    0000025b: 	je	.Ltmp5733 # Offset: 603
.Ltmp5777:
    00000261: 	cmpq	%rax, %rdi
    00000264: 	je	.Ltmp5734 # Offset: 612
.Ltmp5757:
    0000026a: 	movq	-0x8(%rax), %rbx
    0000026e: 	subq	$0x8, %rax
    00000272: 	movq	%rax, 0x30(%rbp)
.Ltmp5758:
    00000276: 	movq	0x78(%rbp), %rax
    0000027a: 	movq	0x60(%rbp), %rdx
    0000027e: 	movq	0x68(%rbp), %rcx
    00000282: 	movq	%rax, (%rsp)
    00000286: 	movq	%rdx, %rax
    00000289: 	subq	%rcx, %rax
    0000028c: 	sarq	$0x5, %rax
    00000290: 	addq	%rbx, %rax
    00000293: 	js	.Ltmp5735 # Offset: 659
    00000299: 	cmpq	$0xf, %rax
    0000029d: 	jg	.Ltmp5736 # Offset: 669
    000002a3: 	movq	%rbx, %rax
    000002a6: 	shlq	$0x5, %rax
    000002aa: 	addq	%rdx, %rax
    000002ad: 	movq	%rbx, 0x18(%rax)
.Ltmp5751:
    000002b1: 	movsd	-0x8(%r14), %xmm0
    000002b7: 	movq	0xb0(%rbp), %rsi
    000002be: 	movq	$0x0, 0x8(%rax)
    000002c6: 	movq	%rsi, 0x10(%rax)
    000002ca: 	movsd	%xmm0, (%rax)
    000002ce: 	testq	%rsi, %rsi
    000002d1: 	je	.Ltmp5737 # Offset: 721
    000002d3: 	movq	%rax, 0x8(%rsi)
.Ltmp5737:
    000002d7: 	cmpq	$0x0, 0xa8(%rbp)
    000002df: 	movq	%rax, 0xb0(%rbp)
    000002e6: 	je	.Ltmp5738 # Offset: 742
    000002ec: 	addq	$0x1, 0xa0(%rbp)
    000002f4: 	cmpq	%r14, %r15
    000002f7: 	jne	.Ltmp5739 # Offset: 759
.Ltmp5732:
    000002fd: 	movq	0x30(%rsp), %rax
    00000302: 	movq	%rbp, (%rax)
    00000305: 	addq	$0x8, %rax
    00000309: 	movq	%rax, 0x30(%rsp)
    0000030e: 	cmpq	%rax, 0x20(%rsp)
    00000313: 	jne	.Ltmp5740 # Offset: 787
    00000319: 	callq	clock@PLT # Offset: 793
    0000031e: 	movq	%rax, start_time(%rip)
    00000325: 	movq	0x40(%rsp), %rax
    0000032a: 	movq	%rax, (%rsp)
.Ltmp5760:
    0000032e: 	movq	(%rsp), %rax
    00000332: 	movq	(%rax), %rbx
    00000335: 	cmpq	0x18(%rsp), %r15
    0000033a: 	je	.Ltmp5741 # Offset: 826
    00000340: 	movq	0xa8(%rbx), %rbp
    00000347: 	movq	0x18(%rsp), %r12
    0000034c: 	jmp	.Ltmp5742 # Offset: 844
    0000034e: 	nop # Size: 2
.Ltmp5748:
    00000350: 	cmpq	$0xf, %rax
    00000354: 	jg	.Ltmp5743 # Offset: 852
    0000035a: 	shlq	$0x5, %rdx
    0000035e: 	leaq	(%rdi,%rdx), %rax
.Ltmp5749:
    00000362: 	movq	$-0x1, 0x18(%rax)
    0000036a: 	cmpq	%rcx, 0xb0(%rbx)
    00000371: 	je	.Ltmp5744 # Offset: 881
.Ltmp5759:
    00000377: 	testq	%r14, %r14
    0000037a: 	je	.Ltmp5745 # Offset: 890
    00000380: 	movq	$0x0, 0x10(%r14)
    00000388: 	movq	%r14, %rbp
.Ltmp5746:
    0000038b: 	addq	$0x8, %r12
    0000038f: 	subq	$0x1, 0xa0(%rbx)
    00000397: 	movq	%rbp, 0xa8(%rbx)
    0000039e: 	cmpq	%r12, %r15
    000003a1: 	je	.Ltmp5741 # Offset: 929
.Ltmp5742:
    000003a7: 	testq	%rbp, %rbp
    000003aa: 	je	.Ltmp5746 # Offset: 938
    000003ac: 	movq	0x40(%rbx), %rdi
    000003b0: 	movq	0x30(%rbx), %rax
    000003b4: 	movq	0x8(%rbp), %r14
    000003b8: 	leaq	-0x8(%rdi), %rdx
    000003bc: 	cmpq	%rdx, %rax
    000003bf: 	je	.Ltmp5747 # Offset: 959
    000003c5: 	movq	0x18(%rbp), %rdx
    000003c9: 	addq	$0x8, %rax
    000003cd: 	movq	%rbp, %rcx
    000003d0: 	movq	%rdx, -0x8(%rax)
    000003d4: 	movq	%rax, 0x30(%rbx)
.Ltmp5773:
    000003d8: 	movq	0x60(%rbx), %rdi
    000003dc: 	movq	0x18(%rbp), %rdx
    000003e0: 	movq	0x78(%rbx), %rsi
    000003e4: 	movq	%rdi, %rax
    000003e7: 	subq	0x68(%rbx), %rax
    000003eb: 	sarq	$0x5, %rax
    000003ef: 	addq	%rdx, %rax
    000003f2: 	jns	.Ltmp5748 # Offset: 1010
    000003f8: 	movq	%rax, %rdx
    000003fb: 	notq	%rdx
    000003fe: 	shrq	$0x4, %rdx
    00000402: 	notq	%rdx
.Ltmp5750:
    00000405: 	movq	%rdx, %rdi
    00000408: 	shlq	$0x4, %rdi
    0000040c: 	subq	%rdi, %rax
    0000040f: 	shlq	$0x5, %rax
    00000413: 	addq	(%rsi,%rdx,8), %rax
    00000417: 	jmp	.Ltmp5749 # Offset: 1047
.Ltmp5743:
    0000041c: 	movq	%rax, %rdx
    0000041f: 	sarq	$0x4, %rdx
    00000423: 	jmp	.Ltmp5750 # Offset: 1059
.Ltmp5736:
    00000425: 	movq	(%rsp), %rdi
    00000429: 	movq	%rax, %rsi
    0000042c: 	andl	$0xf, %eax
    0000042f: 	sarq	$0x4, %rsi
    00000433: 	shlq	$0x5, %rax
    00000437: 	addq	(%rdi,%rsi,8), %rax
    0000043b: 	movq	%rbx, 0x18(%rax)
    0000043f: 	jmp	.Ltmp5751 # Offset: 1087
.Ltmp5733:
    00000444: 	movq	0x98(%rbp), %rsi
    0000044b: 	movq	0x70(%rbp), %r9
    0000044f: 	movq	0x80(%rbp), %r12
    00000456: 	movq	%rsi, %r10
    00000459: 	subq	(%rsp), %r10
    0000045d: 	sarq	$0x3, %r10
    00000461: 	cmpq	$0x1, %rsi
    00000465: 	adcq	$-0x1, %r10
    00000469: 	subq	0x88(%rbp), %r12
    00000470: 	shlq	$0x4, %r10
    00000474: 	sarq	$0x5, %r12
    00000478: 	addq	%r10, %r12
    0000047b: 	movq	%r9, %r10
    0000047e: 	subq	%rdx, %r10
    00000481: 	sarq	$0x5, %r10
    00000485: 	addq	%r10, %r12
    00000488: 	leaq	0x80(%r12), %rbx
    00000490: 	cmpq	%rbx, %r12
    00000493: 	jb	.Ltmp5752 # Offset: 1171
    00000499: 	movq	%rdx, %r10
    0000049c: 	subq	%rcx, %r10
    0000049f: 	sarq	$0x5, %r10
    000004a3: 	addq	%rbx, %r10
    000004a6: 	js	.Ltmp5753 # Offset: 1190
    000004ac: 	cmpq	$0xf, %r10
    000004b0: 	jle	.Ltmp5754 # Offset: 1200
    000004b6: 	movq	%r10, %rdx
    000004b9: 	sarq	$0x4, %rdx
.Ltmp5780:
    000004bd: 	movq	(%rsp), %rcx
    000004c1: 	leaq	(%rcx,%rdx,8), %rcx
    000004c5: 	shlq	$0x4, %rdx
    000004c9: 	movq	%rdx, %r11
    000004cc: 	movq	%r10, %rdx
    000004cf: 	movq	%rcx, (%rsp)
    000004d3: 	movq	(%rcx), %rcx
    000004d6: 	subq	%r11, %rdx
    000004d9: 	shlq	$0x5, %rdx
    000004dd: 	leaq	0x200(%rcx), %r9
    000004e4: 	addq	%rcx, %rdx
.Ltmp5779:
    000004e7: 	movq	%rcx, %xmm7
    000004ec: 	movq	(%rsp), %rcx
    000004f0: 	movq	%rdx, %xmm5
    000004f5: 	leaq	0x8(%rsi), %rbx
    000004f9: 	punpcklqdq	%xmm7, %xmm5
    000004fd: 	movq	%r9, %xmm6
    00000502: 	movq	%rcx, %xmm7
    00000507: 	addq	$0x8, %rcx
    0000050b: 	movaps	%xmm5, 0x70(%rsp)
    00000510: 	punpcklqdq	%xmm7, %xmm6
    00000514: 	movq	%rcx, %r12
    00000517: 	movaps	%xmm6, (%rsp)
    0000051b: 	cmpq	%rcx, %rbx
    0000051e: 	jbe	.Ltmp5755 # Offset: 1310
.Ltmp5756:
    00000520: 	movq	(%r12), %rdi
    00000524: 	movl	$0x200, %esi
    00000529: 	addq	$0x8, %r12
    0000052d: 	callq	_ZdlPvm@PLT # Offset: 1325
    00000532: 	cmpq	%r12, %rbx
    00000535: 	ja	.Ltmp5756 # Offset: 1333
    00000537: 	movq	0x30(%rbp), %rax
    0000053b: 	movq	0x38(%rbp), %rdi
    0000053f: 	movq	0x48(%rbp), %r8
.Ltmp5755:
    00000543: 	movdqa	0x70(%rsp), %xmm7
    00000549: 	movups	%xmm7, 0x80(%rbp)
    00000550: 	movdqa	(%rsp), %xmm7
    00000555: 	movups	%xmm7, 0x90(%rbp)
    0000055c: 	cmpq	%rax, %rdi
    0000055f: 	jne	.Ltmp5757 # Offset: 1375
.Ltmp5734:
    00000565: 	movq	-0x8(%r8), %rax
    00000569: 	movl	$0x200, %esi
    0000056e: 	movq	0x1f8(%rax), %rbx
    00000575: 	callq	_ZdlPvm@PLT # Offset: 1397
    0000057a: 	movq	0x48(%rbp), %rdx
    0000057e: 	movq	-0x8(%rdx), %rax
    00000582: 	subq	$0x8, %rdx
    00000586: 	movq	%rdx, %xmm4
    0000058b: 	leaq	0x1f8(%rax), %rdi
    00000592: 	movq	%rax, %xmm3
    00000597: 	addq	$0x200, %rax
    0000059d: 	movq	%rdi, %xmm0
    000005a2: 	punpcklqdq	%xmm3, %xmm0
    000005a6: 	movups	%xmm0, 0x30(%rbp)
    000005aa: 	movq	%rax, %xmm0
    000005af: 	punpcklqdq	%xmm4, %xmm0
    000005b3: 	movups	%xmm0, 0x40(%rbp)
    000005b7: 	jmp	.Ltmp5758 # Offset: 1463
.Ltmp5738:
    000005bc: 	addq	$0x1, 0xa0(%rbp)
    000005c4: 	movq	%rax, 0xa8(%rbp)
    000005cb: 	cmpq	%r14, %r15
    000005ce: 	jne	.Ltmp5739 # Offset: 1486
    000005d4: 	jmp	.Ltmp5732 # Offset: 1492
    000005d9: 	nopl	(%rax) # Size: 7
.Ltmp5735:
    000005e0: 	movq	%rax, %rsi
    000005e3: 	notq	%rsi
    000005e6: 	shrq	$0x4, %rsi
    000005ea: 	notq	%rsi
    000005ed: 	movq	%rsi, %rdi
    000005f0: 	shlq	$0x4, %rdi
    000005f4: 	subq	%rdi, %rax
    000005f7: 	movq	(%rsp), %rdi
    000005fb: 	shlq	$0x5, %rax
    000005ff: 	addq	(%rdi,%rsi,8), %rax
    00000603: 	movq	%rbx, 0x18(%rax)
    00000607: 	jmp	.Ltmp5751 # Offset: 1543
.Ltmp5744:
    0000060c: 	movq	$0x0, 0xb0(%rbx)
    00000617: 	jmp	.Ltmp5759 # Offset: 1559
.Ltmp5741:
    0000061c: 	addq	$0x8, (%rsp)
    00000621: 	movq	(%rsp), %rax
    00000625: 	cmpq	%rax, 0x20(%rsp)
    0000062a: 	jne	.Ltmp5760 # Offset: 1578
    00000630: 	callq	clock@PLT # Offset: 1584
    00000635: 	pxor	%xmm0, %xmm0
    00000639: 	movq	%r13, (%rsp)
    0000063d: 	movq	0x20(%rsp), %r14
    00000642: 	movq	%rax, end_time(%rip)
    00000649: 	subq	start_time(%rip), %rax
    00000650: 	cvtsi2sd	%rax, %xmm0
    00000655: 	divsd	DATAat0x53788(%rip), %xmm0
    0000065d: 	addsd	0x50(%rsp), %xmm0
    00000663: 	movq	0x58(%rsp), %rbx
    00000668: 	movsd	%xmm0, 0x50(%rsp)
.Ltmp5768:
    0000066e: 	movq	(%rbx), %rbp
    00000671: 	testq	%rbp, %rbp
    00000674: 	je	.Ltmp5761 # Offset: 1652
    0000067a: 	movq	0x50(%rbp), %rdi
    0000067e: 	testq	%rdi, %rdi
    00000681: 	je	.Ltmp5762 # Offset: 1665
    00000683: 	movq	0x98(%rbp), %rax
    0000068a: 	movq	0x78(%rbp), %r13
    0000068e: 	leaq	0x8(%rax), %r12
    00000692: 	cmpq	%r13, %r12
    00000695: 	jbe	.Ltmp5763 # Offset: 1685
    00000697: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5764:
    000006a0: 	movq	(%r13), %rdi
    000006a4: 	movl	$0x200, %esi
    000006a9: 	addq	$0x8, %r13
    000006ad: 	callq	_ZdlPvm@PLT # Offset: 1709
    000006b2: 	cmpq	%r13, %r12
    000006b5: 	ja	.Ltmp5764 # Offset: 1717
    000006b7: 	movq	0x50(%rbp), %rdi
.Ltmp5763:
    000006bb: 	movq	0x58(%rbp), %rax
    000006bf: 	leaq	(,%rax,8), %rsi
    000006c7: 	callq	_ZdlPvm@PLT # Offset: 1735
.Ltmp5762:
    000006cc: 	movq	(%rbp), %rdi
    000006d0: 	testq	%rdi, %rdi
    000006d3: 	je	.Ltmp5765 # Offset: 1747
    000006d5: 	movq	0x48(%rbp), %rax
    000006d9: 	movq	0x28(%rbp), %r13
    000006dd: 	leaq	0x8(%rax), %r12
    000006e1: 	cmpq	%r13, %r12
    000006e4: 	jbe	.Ltmp5766 # Offset: 1764
    000006e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5767:
    000006f0: 	movq	(%r13), %rdi
    000006f4: 	movl	$0x200, %esi
    000006f9: 	addq	$0x8, %r13
    000006fd: 	callq	_ZdlPvm@PLT # Offset: 1789
    00000702: 	cmpq	%r13, %r12
    00000705: 	ja	.Ltmp5767 # Offset: 1797
    00000707: 	movq	(%rbp), %rdi
.Ltmp5766:
    0000070b: 	movq	0x8(%rbp), %rax
    0000070f: 	leaq	(,%rax,8), %rsi
    00000717: 	callq	_ZdlPvm@PLT # Offset: 1815
.Ltmp5765:
    0000071c: 	movl	$0xb8, %esi
    00000721: 	movq	%rbp, %rdi
    00000724: 	callq	_ZdlPvm@PLT # Offset: 1828
.Ltmp5761:
    00000729: 	movq	$0x0, (%rbx)
    00000730: 	addq	$0x8, %rbx
    00000734: 	cmpq	%rbx, %r14
    00000737: 	jne	.Ltmp5768 # Offset: 1847
    0000073d: 	movl	0x28(%rsp), %edi
    00000741: 	movl	iterations(%rip), %eax
    00000747: 	addl	%edi, 0x48(%rsp)
    0000074b: 	movl	0x48(%rsp), %edi
    0000074f: 	movq	(%rsp), %r13
    00000753: 	cmpl	%edi, %eax
    00000755: 	jg	.Ltmp5769 # Offset: 1877
.Ltmp5782:
    0000075b: 	movq	0x60(%rsp), %rdi
    00000760: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1888
    00000765: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000076c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000773: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000077a: 	je	.Ltmp5770 # Offset: 1914
.Ltmp5781:
    00000780: 	movq	-0x20(%rax), %rdi
    00000784: 	movsd	0x50(%rsp), %xmm0
    0000078a: 	callq	_Z13record_resultdPKc # Offset: 1930
    0000078f: 	cmpq	$0x0, 0x40(%rsp)
    00000795: 	je	.Ltmp5771 # Offset: 1941
    0000079b: 	movq	0xa8(%rsp), %rax
    000007a3: 	subq	%fs:0x28, %rax
    000007ac: 	jne	.Ltmp5772 # Offset: 1964
    000007b2: 	movq	0xa0(%rsp), %rsi
    000007ba: 	movq	0x40(%rsp), %rdi
    000007bf: 	addq	$0xb8, %rsp
    000007c6: 	popq	%rbx
    000007c7: 	popq	%rbp
    000007c8: 	subq	%rdi, %rsi
    000007cb: 	popq	%r12
    000007cd: 	popq	%r13
    000007cf: 	popq	%r14
    000007d1: 	popq	%r15
    000007d3: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 2003
    000007d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5747:
    000007e0: 	leaq	0x18(%rbp), %rsi
    000007e4: 	movq	%rbx, %rdi
    000007e7: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 2023
    000007ec: 	movq	0xa8(%rbx), %rcx
    000007f3: 	jmp	.Ltmp5773 # Offset: 2035
.Ltmp5752:
    000007f8: 	movq	0x38(%rsp), %rdi
    000007fd: 	movl	$0x80, %esi
    00000802: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2050
    00000807: 	movq	0x30(%rbp), %rax
    0000080b: 	jmp	.Ltmp5774 # Offset: 2059
    0000080d: 	nopl	(%rax) # Size: 3
.Ltmp5776:
    00000810: 	movq	%rbx, (%rax)
    00000813: 	addq	$0x8, %rax
    00000817: 	movq	%rax, 0x30(%rbp)
    0000081b: 	cmpq	%rbx, %r12
    0000081e: 	je	.Ltmp5775 # Offset: 2078
.Ltmp5774:
    00000820: 	movq	0x40(%rbp), %rcx
    00000824: 	subq	$0x1, %rbx
    00000828: 	movq	%rbx, 0x88(%rsp)
    00000830: 	leaq	-0x8(%rcx), %rdx
    00000834: 	cmpq	%rdx, %rax
    00000837: 	jne	.Ltmp5776 # Offset: 2103
    00000839: 	movq	%r13, %rsi
    0000083c: 	movq	%rbp, %rdi
    0000083f: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2111
    00000844: 	movq	0x30(%rbp), %rax
    00000848: 	cmpq	%rbx, %r12
    0000084b: 	jne	.Ltmp5774 # Offset: 2123
.Ltmp5775:
    0000084d: 	movq	0x38(%rbp), %rdi
    00000851: 	movq	0x48(%rbp), %r8
    00000855: 	jmp	.Ltmp5777 # Offset: 2133
.Ltmp5729:
    0000085a: 	movq	$0x3e8, 0x28(%rsp)
.Ltmp5730:
    00000863: 	movq	$0x0, 0xa0(%rsp)
    0000086f: 	pxor	%xmm0, %xmm0
    00000873: 	movaps	%xmm0, 0x90(%rsp)
    0000087b: 	jmp	.Ltmp5778 # Offset: 2171
.Ltmp5754:
    00000880: 	shlq	$0x5, %rbx
    00000884: 	addq	%rbx, %rdx
    00000887: 	jmp	.Ltmp5779 # Offset: 2183
.Ltmp5753:
    0000088c: 	movq	%r10, %rdx
    0000088f: 	notq	%rdx
    00000892: 	shrq	$0x4, %rdx
    00000896: 	notq	%rdx
    00000899: 	jmp	.Ltmp5780 # Offset: 2201
.Ltmp5771:
    0000089e: 	movq	0xa8(%rsp), %rax
    000008a6: 	subq	%fs:0x28, %rax
    000008af: 	jne	.Ltmp5772 # Offset: 2223
    000008b1: 	addq	$0xb8, %rsp
    000008b8: 	popq	%rbx
    000008b9: 	popq	%rbp
    000008ba: 	popq	%r12
    000008bc: 	popq	%r13
    000008be: 	popq	%r14
    000008c0: 	popq	%r15
    000008c2: 	retq # Offset: 2242
.Ltmp5770:
    000008c3: 	movq	-0x8(%rdx), %rax
    000008c7: 	addq	$0x200, %rax
    000008cd: 	jmp	.Ltmp5781 # Offset: 2253
.Ltmp5731:
    000008d2: 	pxor	%xmm5, %xmm5
    000008d6: 	movsd	%xmm5, 0x50(%rsp)
    000008dc: 	jmp	.Ltmp5782 # Offset: 2268
.Ltmp5772:
    000008e1: 	callq	__stack_chk_fail@PLT # Offset: 2273
.Ltmp5745:
    000008e6: 	xorl	%ebp, %ebp
    000008e8: 	jmp	.Ltmp5746 # Offset: 2280
    000008ed: 	endbr64
    000008f1: 	movq	%rax, %rbx
    000008f4: 	jmp	.Ltmp5783 # Offset: 2292
    000008f6: 	endbr64
    000008fa: 	movq	%rax, %rbp
    000008fd: 	jmp	.Ltmp5784 # Offset: 2301
.Ltmp5787:
    000008ff: 	callq	__cxa_end_catch@PLT # Offset: 2303
.Ltmp5786:
    00000904: 	movq	%rbp, %rdi
    00000907: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2311
.Ltmp5783:
    0000090c: 	movq	%rbp, %rdi
    0000090f: 	movl	$0xb8, %esi
    00000914: 	movq	%rbx, %rbp
    00000917: 	callq	_ZdlPvm@PLT # Offset: 2327
.Ltmp5784:
    0000091c: 	movq	0x90(%rsp), %rdi
    00000924: 	movq	0xa0(%rsp), %rsi
    0000092c: 	subq	%rdi, %rsi
    0000092f: 	testq	%rdi, %rdi
    00000932: 	je	.Ltmp5785 # Offset: 2354
    00000934: 	callq	_ZdlPvm@PLT # Offset: 2356
.Ltmp5785:
    00000939: 	movq	%rbp, %rdi
    0000093c: 	callq	_Unwind_Resume@PLT # Offset: 2364
    00000941: 	endbr64
    00000945: 	movq	%rax, %rbx
    00000948: 	jmp	.Ltmp5786 # Offset: 2376
    0000094a: 	endbr64
    0000094e: 	movq	%rax, %rdi
    00000951: 	callq	__cxa_begin_catch@PLT # Offset: 2385
    00000956: 	callq	__cxa_rethrow@PLT # Offset: 2390
    0000095b: 	endbr64
    0000095f: 	movq	%rax, %r12
    00000962: 	callq	__cxa_end_catch@PLT # Offset: 2402
    00000967: 	movq	%r12, %rdi
    0000096a: 	callq	__cxa_begin_catch@PLT # Offset: 2410
    0000096f: 	movq	0x58(%rbp), %rax
    00000973: 	movq	0x50(%rbp), %rdi
    00000977: 	leaq	(,%rax,8), %rsi
    0000097f: 	callq	_ZdlPvm@PLT # Offset: 2431
    00000984: 	movq	$0x0, 0x50(%rbp)
    0000098c: 	movq	$0x0, 0x58(%rbp)
    00000994: 	callq	__cxa_rethrow@PLT # Offset: 2452
    00000999: 	endbr64
    0000099d: 	movq	%rax, %rbx
    000009a0: 	jmp	.Ltmp5787 # Offset: 2464
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_popfrontId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z7testPopIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 320
  State       : disassembled
  Address     : 0x3c630
  Size        : 0x4d5
  MaxSize     : 0x4e0
  Offset      : 0x3c630
  Section     : .text
  Orc Section : .local.text._Z7testPopIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0319:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x48, %rsp
    0000001b: 	movl	%r8d, 0xc(%rsp)
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x38(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	movl	%ecx, iterations(%rip)
    00000036: 	testq	%rsi, %rsi
    00000039: 	je	.Ltmp5788 # Offset: 57
    0000003f: 	leaq	-0x1(%rsi), %rax
    00000043: 	cmpq	$0x2, %rax
    00000047: 	jbe	.Ltmp5789 # Offset: 71
    0000004d: 	movq	%rsi, %rdx
    00000050: 	movdqa	DATAat0x537d0(%rip), %xmm1
    00000058: 	movdqa	DATAat0x537e0(%rip), %xmm3
    00000060: 	movq	%rdi, %rax
    00000063: 	shrq	$0x2, %rdx
    00000067: 	shlq	$0x5, %rdx
    0000006b: 	addq	%rdi, %rdx
    0000006e: 	nop # Size: 2
.Ltmp5790:
    00000070: 	movdqa	%xmm1, %xmm2
    00000074: 	addq	$0x20, %rax
    00000078: 	paddd	%xmm3, %xmm1
    0000007c: 	movdqa	%xmm2, %xmm0
    00000080: 	pslld	$0x1, %xmm0
    00000085: 	paddd	%xmm2, %xmm0
    00000089: 	cvtdq2pd	%xmm0, %xmm2
    0000008d: 	pshufd	$0xee, %xmm0, %xmm0
    00000092: 	movups	%xmm2, -0x20(%rax)
    00000096: 	cvtdq2pd	%xmm0, %xmm0
    0000009a: 	movups	%xmm0, -0x10(%rax)
    0000009e: 	cmpq	%rdx, %rax
    000000a1: 	jne	.Ltmp5790 # Offset: 161
    000000a3: 	movq	%r15, %rdx
    000000a6: 	andq	$-0x4, %rdx
    000000aa: 	movl	%edx, %eax
    000000ac: 	cmpq	%rdx, %r15
    000000af: 	je	.Ltmp5788 # Offset: 175
.Ltmp5807:
    000000b1: 	leal	(%rax,%rax,2), %ecx
    000000b4: 	pxor	%xmm0, %xmm0
    000000b8: 	cvtsi2sd	%ecx, %xmm0
    000000bc: 	movsd	%xmm0, (%rbp,%rdx,8)
    000000c2: 	leal	0x1(%rax), %edx
    000000c5: 	movslq	%edx, %rdx
    000000c8: 	cmpq	%rdx, %r15
    000000cb: 	jbe	.Ltmp5788 # Offset: 203
    000000cd: 	leal	0x3(%rcx), %esi
    000000d0: 	pxor	%xmm0, %xmm0
    000000d4: 	addl	$0x2, %eax
    000000d7: 	cvtsi2sd	%esi, %xmm0
    000000db: 	cltq
    000000dd: 	leaq	(,%rdx,8), %rdi
    000000e5: 	movsd	%xmm0, (%rbp,%rdx,8)
    000000eb: 	cmpq	%rax, %r15
    000000ee: 	jbe	.Ltmp5788 # Offset: 238
    000000f0: 	addl	$0x6, %ecx
    000000f3: 	pxor	%xmm0, %xmm0
    000000f7: 	cvtsi2sd	%ecx, %xmm0
    000000fb: 	movsd	%xmm0, 0x8(%rbp,%rdi)
.Ltmp5788:
    00000101: 	leaq	(%rbp,%r15,8), %r14
    00000106: 	movq	%rbp, %rdi
    00000109: 	leaq	0x10(%rsp), %r12
    0000010e: 	movq	%r14, %rsi
    00000111: 	callq	_ZN9benchmark14random_shuffleIPdEEvT_S2_ # Offset: 273
    00000116: 	leaq	DATAat0x523b0(%rip), %rdx
    0000011d: 	movq	%r13, %rsi
    00000120: 	movq	%r12, %rdi
    00000123: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 291
    00000128: 	movq	%r12, %rdx
    0000012b: 	movq	%r14, %rsi
    0000012e: 	movq	%rbp, %rdi
    00000131: 	callq	_Z13test_popfrontIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 305
    00000136: 	movq	0x10(%rsp), %rdi
    0000013b: 	leaq	0x20(%rsp), %rbx
    00000140: 	cmpq	%rbx, %rdi
    00000143: 	je	.Ltmp5791 # Offset: 323
    00000145: 	movq	0x20(%rsp), %rax
    0000014a: 	leaq	0x1(%rax), %rsi
    0000014e: 	callq	_ZdlPvm@PLT # Offset: 334
.Ltmp5791:
    00000153: 	leaq	DATAat0x523c6(%rip), %rdx
    0000015a: 	movq	%r13, %rsi
    0000015d: 	movq	%r12, %rdi
    00000160: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 352
    00000165: 	movq	%r12, %rdx
    00000168: 	movq	%r14, %rsi
    0000016b: 	movq	%rbp, %rdi
    0000016e: 	callq	_Z21test_popfront_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 366
    00000173: 	movq	0x10(%rsp), %rdi
    00000178: 	cmpq	%rbx, %rdi
    0000017b: 	je	.Ltmp5792 # Offset: 379
    0000017d: 	movq	0x20(%rsp), %rax
    00000182: 	leaq	0x1(%rax), %rsi
    00000186: 	callq	_ZdlPvm@PLT # Offset: 390
.Ltmp5792:
    0000018b: 	leaq	DATAat0x523e3(%rip), %rdx
    00000192: 	movq	%r13, %rsi
    00000195: 	movq	%r12, %rdi
    00000198: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 408
    0000019d: 	movq	%r12, %rdx
    000001a0: 	movq	%r14, %rsi
    000001a3: 	movq	%rbp, %rdi
    000001a6: 	callq	_Z13test_popfrontIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 422
    000001ab: 	movq	0x10(%rsp), %rdi
    000001b0: 	cmpq	%rbx, %rdi
    000001b3: 	je	.Ltmp5793 # Offset: 435
    000001b5: 	movq	0x20(%rsp), %rax
    000001ba: 	leaq	0x1(%rax), %rsi
    000001be: 	callq	_ZdlPvm@PLT # Offset: 446
.Ltmp5793:
    000001c3: 	leaq	DATAat0x523f8(%rip), %rdx
    000001ca: 	movq	%r13, %rsi
    000001cd: 	movq	%r12, %rdi
    000001d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 464
    000001d5: 	movq	%r12, %rdx
    000001d8: 	movq	%r14, %rsi
    000001db: 	movq	%rbp, %rdi
    000001de: 	callq	_Z13test_popfrontId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 478
    000001e3: 	movq	0x10(%rsp), %rdi
    000001e8: 	cmpq	%rbx, %rdi
    000001eb: 	je	.Ltmp5794 # Offset: 491
    000001ed: 	movq	0x20(%rsp), %rax
    000001f2: 	leaq	0x1(%rax), %rsi
    000001f6: 	callq	_ZdlPvm@PLT # Offset: 502
.Ltmp5794:
    000001fb: 	leaq	DATAat0x524b0(%rip), %rdx
    00000202: 	movq	%r13, %rsi
    00000205: 	movq	%r12, %rdi
    00000208: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 520
    0000020d: 	movq	%r12, %rdx
    00000210: 	movq	%r14, %rsi
    00000213: 	movq	%rbp, %rdi
    00000216: 	callq	_Z13test_popfrontId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 534
    0000021b: 	movq	0x10(%rsp), %rdi
    00000220: 	cmpq	%rbx, %rdi
    00000223: 	je	.Ltmp5795 # Offset: 547
    00000225: 	movq	0x20(%rsp), %rax
    0000022a: 	leaq	0x1(%rax), %rsi
    0000022e: 	callq	_ZdlPvm@PLT # Offset: 558
.Ltmp5795:
    00000233: 	leaq	DATAat0x52412(%rip), %rdx
    0000023a: 	movq	%r13, %rsi
    0000023d: 	movq	%r12, %rdi
    00000240: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 576
    00000245: 	movq	%r12, %rdx
    00000248: 	movq	%r14, %rsi
    0000024b: 	movq	%rbp, %rdi
    0000024e: 	callq	_Z13test_popfrontId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 590
    00000253: 	movq	0x10(%rsp), %rdi
    00000258: 	cmpq	%rbx, %rdi
    0000025b: 	je	.Ltmp5796 # Offset: 603
    0000025d: 	movq	0x20(%rsp), %rax
    00000262: 	leaq	0x1(%rax), %rsi
    00000266: 	callq	_ZdlPvm@PLT # Offset: 614
.Ltmp5796:
    0000026b: 	leaq	DATAat0x524d0(%rip), %rdx
    00000272: 	movq	%r13, %rsi
    00000275: 	movq	%r12, %rdi
    00000278: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 632
    0000027d: 	movq	%r12, %rdx
    00000280: 	movq	%r14, %rsi
    00000283: 	movq	%rbp, %rdi
    00000286: 	callq	_Z13test_popfrontId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 646
    0000028b: 	movq	0x10(%rsp), %rdi
    00000290: 	cmpq	%rbx, %rdi
    00000293: 	je	.Ltmp5797 # Offset: 659
    00000295: 	movq	0x20(%rsp), %rax
    0000029a: 	leaq	0x1(%rax), %rsi
    0000029e: 	callq	_ZdlPvm@PLT # Offset: 670
.Ltmp5797:
    000002a3: 	cmpb	$0x0, 0xc(%rsp)
    000002a8: 	jne	.Ltmp5798 # Offset: 680
.Ltmp5806:
    000002ae: 	leaq	DATAat0x52440(%rip), %rdx
    000002b5: 	movq	%r13, %rsi
    000002b8: 	movq	%r12, %rdi
    000002bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 699
    000002c0: 	movq	%r12, %rdx
    000002c3: 	movq	%r14, %rsi
    000002c6: 	movq	%rbp, %rdi
    000002c9: 	callq	_Z12test_popbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 713
    000002ce: 	movq	0x10(%rsp), %rdi
    000002d3: 	cmpq	%rbx, %rdi
    000002d6: 	je	.Ltmp5799 # Offset: 726
    000002d8: 	movq	0x20(%rsp), %rax
    000002dd: 	leaq	0x1(%rax), %rsi
    000002e1: 	callq	_ZdlPvm@PLT # Offset: 737
.Ltmp5799:
    000002e6: 	leaq	DATAat0x52456(%rip), %rdx
    000002ed: 	movq	%r13, %rsi
    000002f0: 	movq	%r12, %rdi
    000002f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 755
    000002f8: 	movq	%r12, %rdx
    000002fb: 	movq	%r14, %rsi
    000002fe: 	movq	%rbp, %rdi
    00000301: 	callq	_Z12test_popbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 769
    00000306: 	movq	0x10(%rsp), %rdi
    0000030b: 	cmpq	%rbx, %rdi
    0000030e: 	je	.Ltmp5800 # Offset: 782
    00000310: 	movq	0x20(%rsp), %rax
    00000315: 	leaq	0x1(%rax), %rsi
    00000319: 	callq	_ZdlPvm@PLT # Offset: 793
.Ltmp5800:
    0000031e: 	leaq	DATAat0x5246b(%rip), %rdx
    00000325: 	movq	%r13, %rsi
    00000328: 	movq	%r12, %rdi
    0000032b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 811
    00000330: 	movq	%r12, %rdx
    00000333: 	movq	%r14, %rsi
    00000336: 	movq	%rbp, %rdi
    00000339: 	callq	_Z12test_popbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 825
    0000033e: 	movq	0x10(%rsp), %rdi
    00000343: 	cmpq	%rbx, %rdi
    00000346: 	je	.Ltmp5801 # Offset: 838
    00000348: 	movq	0x20(%rsp), %rax
    0000034d: 	leaq	0x1(%rax), %rsi
    00000351: 	callq	_ZdlPvm@PLT # Offset: 849
.Ltmp5801:
    00000356: 	leaq	DATAat0x5247f(%rip), %rdx
    0000035d: 	movq	%r13, %rsi
    00000360: 	movq	%r12, %rdi
    00000363: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 867
    00000368: 	movq	%r12, %rdx
    0000036b: 	movq	%r14, %rsi
    0000036e: 	movq	%rbp, %rdi
    00000371: 	callq	_Z12test_popbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 881
    00000376: 	movq	0x10(%rsp), %rdi
    0000037b: 	cmpq	%rbx, %rdi
    0000037e: 	je	.Ltmp5802 # Offset: 894
    00000380: 	movq	0x20(%rsp), %rax
    00000385: 	leaq	0x1(%rax), %rsi
    00000389: 	callq	_ZdlPvm@PLT # Offset: 905
.Ltmp5802:
    0000038e: 	leaq	DATAat0x524f0(%rip), %rdx
    00000395: 	movq	%r13, %rsi
    00000398: 	movq	%r12, %rdi
    0000039b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 923
    000003a0: 	movq	%r12, %rdx
    000003a3: 	movq	%r14, %rsi
    000003a6: 	movq	%rbp, %rdi
    000003a9: 	callq	_Z12test_popbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 937
    000003ae: 	movq	0x10(%rsp), %rdi
    000003b3: 	cmpq	%rbx, %rdi
    000003b6: 	je	.Ltmp5803 # Offset: 950
    000003b8: 	movq	0x20(%rsp), %rax
    000003bd: 	leaq	0x1(%rax), %rsi
    000003c1: 	callq	_ZdlPvm@PLT # Offset: 961
.Ltmp5803:
    000003c6: 	cmpb	$0x0, 0xc(%rsp)
    000003cb: 	jne	.Ltmp5804 # Offset: 971
    000003cd: 	movq	0x38(%rsp), %rax
    000003d2: 	subq	%fs:0x28, %rax
    000003db: 	jne	.Ltmp5805 # Offset: 987
    000003dd: 	addq	$0x48, %rsp
    000003e1: 	popq	%rbx
    000003e2: 	popq	%rbp
    000003e3: 	popq	%r12
    000003e5: 	popq	%r13
    000003e7: 	popq	%r14
    000003e9: 	popq	%r15
    000003eb: 	retq # Offset: 1003
    000003ec: 	nopl	(%rax) # Size: 4
.Ltmp5798:
    000003f0: 	movl	iterations(%rip), %edx
    000003f6: 	xorl	%r8d, %r8d
    000003f9: 	xorl	%ecx, %ecx
    000003fb: 	movl	%r15d, %esi
    000003fe: 	leaq	DATAat0x5242c(%rip), %rdi
    00000405: 	callq	_Z9summarizePKciiii # Offset: 1029
    0000040a: 	jmp	.Ltmp5806 # Offset: 1034
    0000040f: 	nop # Size: 1
.Ltmp5804:
    00000410: 	movq	0x38(%rsp), %rax
    00000415: 	subq	%fs:0x28, %rax
    0000041e: 	jne	.Ltmp5805 # Offset: 1054
    00000420: 	movl	iterations(%rip), %edx
    00000426: 	addq	$0x48, %rsp
    0000042a: 	movl	%r15d, %esi
    0000042d: 	xorl	%r8d, %r8d
    00000430: 	popq	%rbx
    00000431: 	xorl	%ecx, %ecx
    00000433: 	leaq	DATAat0x52498(%rip), %rdi
    0000043a: 	popq	%rbp
    0000043b: 	popq	%r12
    0000043d: 	popq	%r13
    0000043f: 	popq	%r14
    00000441: 	popq	%r15
    00000443: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 1091
.Ltmp5789:
    00000448: 	xorl	%eax, %eax
    0000044a: 	xorl	%edx, %edx
    0000044c: 	jmp	.Ltmp5807 # Offset: 1100
.Ltmp5805:
    00000451: 	callq	__stack_chk_fail@PLT # Offset: 1105
    00000456: 	endbr64
    0000045a: 	movq	%rax, %rbp
    0000045d: 	jmp	.Ltmp5808 # Offset: 1117
    0000045f: 	endbr64
.Ltmp5811:
    00000463: 	movq	%rax, %rbp
    00000466: 	jmp	.Ltmp5809 # Offset: 1126
.Ltmp5808:
    00000468: 	movq	0x10(%rsp), %rdi
    0000046d: 	leaq	0x20(%rsp), %rax
    00000472: 	cmpq	%rax, %rdi
    00000475: 	je	.Ltmp5810 # Offset: 1141
.Ltmp5812:
    00000477: 	movq	0x20(%rsp), %rax
    0000047c: 	leaq	0x1(%rax), %rsi
    00000480: 	callq	_ZdlPvm@PLT # Offset: 1152
.Ltmp5810:
    00000485: 	movq	%rbp, %rdi
    00000488: 	callq	_Unwind_Resume@PLT # Offset: 1160
    0000048d: 	endbr64
    00000491: 	jmp	.Ltmp5811 # Offset: 1169
    00000493: 	endbr64
    00000497: 	jmp	.Ltmp5811 # Offset: 1175
.Ltmp5809:
    00000499: 	movq	0x10(%rsp), %rdi
    0000049e: 	cmpq	%rbx, %rdi
    000004a1: 	jne	.Ltmp5812 # Offset: 1185
    000004a3: 	jmp	.Ltmp5810 # Offset: 1187
    000004a5: 	endbr64
    000004a9: 	jmp	.Ltmp5811 # Offset: 1193
    000004ab: 	endbr64
    000004af: 	jmp	.Ltmp5811 # Offset: 1199
    000004b1: 	endbr64
    000004b5: 	jmp	.Ltmp5811 # Offset: 1205
    000004b7: 	endbr64
    000004bb: 	jmp	.Ltmp5811 # Offset: 1211
    000004bd: 	endbr64
    000004c1: 	jmp	.Ltmp5811 # Offset: 1217
    000004c3: 	endbr64
    000004c7: 	jmp	.Ltmp5811 # Offset: 1223
    000004c9: 	endbr64
    000004cd: 	jmp	.Ltmp5811 # Offset: 1229
    000004cf: 	endbr64
    000004d3: 	jmp	.Ltmp5811 # Offset: 1235
DWARF CFI Instructions:
    <empty>
End of Function "_Z7testPopIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z19test_duplicate_coreI20PooledDoubleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 321
  State       : disassembled
  Address     : 0x3cb10
  Size        : 0x91c
  MaxSize     : 0x920
  Offset      : 0x3cb10
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreI20PooledDoubleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0320:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x3, %rsi
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	subq	$0xa8, %rsp
    00000019: 	movq	%rdx, 0x60(%rsp)
    0000001e: 	xorl	%edx, %edx
    00000020: 	movq	%rdi, 0x28(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x98(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movabsq	$0x500000000, %rax
    00000042: 	divq	%rsi
    00000045: 	movq	%rax, 0x20(%rsp)
    0000004a: 	cmpq	$0x3e8, %rax
    00000050: 	ja	.Ltmp5813 # Offset: 80
    00000056: 	cmpq	$0x3, %rax
    0000005a: 	ja	.Ltmp5814 # Offset: 90
    00000060: 	movq	$0x0, 0x90(%rsp)
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	movq	$0x4, 0x20(%rsp)
    00000079: 	movaps	%xmm0, 0x80(%rsp)
.Ltmp5844:
    00000081: 	movq	0x20(%rsp), %rbx
    00000086: 	leaq	0x80(%rsp), %rdi
    0000008e: 	movq	%rbx, %rsi
    00000091: 	callq	_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 145
    00000096: 	movq	0x80(%rsp), %rcx
    0000009e: 	movl	iterations(%rip), %eax
    000000a4: 	movq	%rcx, 0x30(%rsp)
    000000a9: 	testl	%eax, %eax
    000000ab: 	jle	.Ltmp5815 # Offset: 171
    000000b1: 	leaq	0x8(%rcx), %rsi
    000000b5: 	movl	%ebx, 0x4c(%rsp)
    000000b9: 	pxor	%xmm6, %xmm6
    000000bd: 	movl	$0x0, 0x48(%rsp)
    000000c5: 	movq	%rsi, 0x50(%rsp)
    000000ca: 	movsd	%xmm6, 0x68(%rsp)
.Ltmp5840:
    000000d0: 	movslq	0x48(%rsp), %rdx
    000000d5: 	movslq	%eax, %rcx
    000000d8: 	movq	%rdx, %rsi
    000000db: 	addq	0x20(%rsp), %rdx
    000000e0: 	subl	%esi, %eax
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	cmovbl	0x4c(%rsp), %eax
    000000ea: 	movl	%eax, %ebx
    000000ec: 	callq	clock@PLT # Offset: 236
    000000f1: 	movq	0x50(%rsp), %rsi
    000000f6: 	movq	0x30(%rsp), %rcx
    000000fb: 	movq	%rax, start_time(%rip)
    00000102: 	leal	-0x1(%rbx), %eax
    00000105: 	leaq	(%rsi,%rax,8), %rax
    00000109: 	movq	%rcx, 0x38(%rsp)
    0000010e: 	movq	%rcx, %r14
    00000111: 	movq	%rax, 0x40(%rsp)
.Ltmp5831:
    00000116: 	movl	$0xb8, %edi
    0000011b: 	callq	_Znwm@PLT # Offset: 283
    00000120: 	movq	$0x0, (%rax)
    00000127: 	pxor	%xmm2, %xmm2
    0000012b: 	xorl	%esi, %esi
    0000012d: 	movq	%rax, %rdi
    00000130: 	movq	$0x0, 0x8(%rax)
    00000138: 	movq	%rax, %rbp
    0000013b: 	movups	%xmm2, 0x10(%rax)
    0000013f: 	movups	%xmm2, 0x20(%rax)
    00000143: 	movups	%xmm2, 0x30(%rax)
    00000147: 	movups	%xmm2, 0x40(%rax)
    0000014b: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 331
    00000150: 	movq	$0x0, 0x50(%rbp)
    00000158: 	pxor	%xmm2, %xmm2
    0000015c: 	movl	$0x40, %edi
    00000161: 	movq	$0x8, 0x58(%rbp)
    00000169: 	movups	%xmm2, 0x60(%rbp)
    0000016d: 	movups	%xmm2, 0x70(%rbp)
    00000171: 	movups	%xmm2, 0x80(%rbp)
    00000178: 	movups	%xmm2, 0x90(%rbp)
    0000017f: 	callq	_Znwm@PLT # Offset: 383
    00000184: 	movq	0x58(%rbp), %rdx
    00000188: 	movq	%rax, 0x50(%rbp)
    0000018c: 	movl	$0x200, %edi
    00000191: 	leaq	-0x4(,%rdx,4), %rdx
    00000199: 	andq	$-0x8, %rdx
    0000019d: 	leaq	(%rax,%rdx), %rbx
    000001a1: 	movq	%rbx, (%rsp)
    000001a5: 	callq	_Znwm@PLT # Offset: 421
    000001aa: 	movq	%rax, %rdx
    000001ad: 	movq	%rax, %xmm1
    000001b2: 	movq	%rax, (%rbx)
    000001b5: 	pxor	%xmm2, %xmm2
    000001b9: 	leaq	0x200(%rax), %rax
    000001c0: 	punpcklqdq	%xmm1, %xmm1
    000001c4: 	movq	%rdx, %rsi
    000001c7: 	movq	$0x0, 0xa0(%rbp)
    000001d2: 	movq	%rax, %xmm0
    000001d7: 	movq	0x28(%rsp), %rax
    000001dc: 	movups	%xmm1, 0x60(%rbp)
    000001e0: 	movhps	(%rsp), %xmm0
    000001e4: 	movups	%xmm1, 0x80(%rbp)
    000001eb: 	movq	0xa8(%rax), %r15
    000001f2: 	leaq	0x50(%rbp), %rax
    000001f6: 	movups	%xmm0, 0x70(%rbp)
    000001fa: 	movq	%rax, 0x58(%rsp)
    000001ff: 	movups	%xmm0, 0x90(%rbp)
    00000206: 	movups	%xmm2, 0xa8(%rbp)
    0000020d: 	testq	%r15, %r15
    00000210: 	je	.Ltmp5816 # Offset: 528
.Ltmp5823:
    00000216: 	movq	0x8(%r15), %rax
    0000021a: 	movq	0x48(%rbp), %r12
    0000021e: 	movq	0x30(%rbp), %rdi
    00000222: 	movq	0x38(%rbp), %rcx
    00000226: 	movq	%rax, 0x18(%rsp)
    0000022b: 	movq	%r12, %rax
    0000022e: 	subq	0x28(%rbp), %rax
    00000232: 	sarq	$0x3, %rax
    00000236: 	movq	%rdi, %r8
    00000239: 	cmpq	$0x1, %r12
    0000023d: 	adcq	$-0x1, %rax
    00000241: 	subq	%rcx, %r8
    00000244: 	sarq	$0x3, %r8
    00000248: 	shlq	$0x6, %rax
    0000024c: 	addq	%r8, %rax
    0000024f: 	movq	0x20(%rbp), %r8
    00000253: 	subq	0x10(%rbp), %r8
    00000257: 	sarq	$0x3, %r8
    0000025b: 	addq	%r8, %rax
    0000025e: 	je	.Ltmp5817 # Offset: 606
.Ltmp5846:
    00000264: 	cmpq	%rcx, %rdi
    00000267: 	je	.Ltmp5818 # Offset: 615
    0000026d: 	movq	-0x8(%rdi), %rbx
    00000271: 	subq	$0x8, %rdi
    00000275: 	movq	%rdi, 0x30(%rbp)
.Ltmp5829:
    00000279: 	movq	0x78(%rbp), %rax
    0000027d: 	movq	0x60(%rbp), %rdx
    00000281: 	movq	0x68(%rbp), %rsi
    00000285: 	movq	%rax, (%rsp)
    00000289: 	movq	%rdx, %rax
    0000028c: 	subq	%rsi, %rax
    0000028f: 	sarq	$0x5, %rax
    00000293: 	addq	%rbx, %rax
    00000296: 	js	.Ltmp5819 # Offset: 662
    0000029c: 	cmpq	$0xf, %rax
    000002a0: 	jg	.Ltmp5820 # Offset: 672
    000002a6: 	movq	%rbx, %rax
    000002a9: 	shlq	$0x5, %rax
    000002ad: 	addq	%rdx, %rax
    000002b0: 	movq	%rbx, 0x18(%rax)
.Ltmp5828:
    000002b4: 	movsd	(%r15), %xmm0
    000002b9: 	movq	0xb0(%rbp), %rcx
    000002c0: 	movq	$0x0, 0x8(%rax)
    000002c8: 	movq	%rcx, 0x10(%rax)
    000002cc: 	movsd	%xmm0, (%rax)
    000002d0: 	testq	%rcx, %rcx
    000002d3: 	je	.Ltmp5821 # Offset: 723
    000002d5: 	movq	%rax, 0x8(%rcx)
.Ltmp5821:
    000002d9: 	cmpq	$0x0, 0xa8(%rbp)
    000002e1: 	movq	%rax, 0xb0(%rbp)
    000002e8: 	je	.Ltmp5822 # Offset: 744
    000002ee: 	addq	$0x1, 0xa0(%rbp)
    000002f6: 	cmpq	$0x0, 0x18(%rsp)
    000002fc: 	je	.Ltmp5816 # Offset: 764
.Ltmp5830:
    00000302: 	movq	0x18(%rsp), %r15
    00000307: 	jmp	.Ltmp5823 # Offset: 775
    0000030c: 	nopl	(%rax) # Size: 4
.Ltmp5817:
    00000310: 	movq	0x98(%rbp), %r8
    00000317: 	movq	0x70(%rbp), %r9
    0000031b: 	movq	0x80(%rbp), %rax
    00000322: 	movq	%r8, %r13
    00000325: 	subq	(%rsp), %r13
    00000329: 	sarq	$0x3, %r13
    0000032d: 	cmpq	$0x1, %r8
    00000331: 	adcq	$-0x1, %r13
    00000335: 	subq	0x88(%rbp), %rax
    0000033c: 	sarq	$0x5, %rax
    00000340: 	shlq	$0x4, %r13
    00000344: 	addq	%rax, %r13
    00000347: 	movq	%r9, %rax
    0000034a: 	subq	%rdx, %rax
    0000034d: 	sarq	$0x5, %rax
    00000351: 	addq	%rax, %r13
    00000354: 	leaq	0x80(%r13), %rbx
    0000035b: 	cmpq	%rbx, %r13
    0000035e: 	jb	.Ltmp5824 # Offset: 862
    00000364: 	movq	%rdx, %rax
    00000367: 	subq	%rsi, %rax
    0000036a: 	sarq	$0x5, %rax
    0000036e: 	addq	%rbx, %rax
    00000371: 	js	.Ltmp5825 # Offset: 881
    00000377: 	cmpq	$0xf, %rax
    0000037b: 	jg	.Ltmp5826 # Offset: 891
    00000381: 	movq	%rbx, %rax
    00000384: 	shlq	$0x5, %rax
    00000388: 	addq	%rdx, %rax
    0000038b: 	movq	%rax, %xmm0
    00000390: 	jmp	.Ltmp5827 # Offset: 912
    00000395: 	nopl	(%rax) # Size: 3
.Ltmp5820:
    00000398: 	movq	(%rsp), %rdi
    0000039c: 	movq	%rax, %rcx
    0000039f: 	andl	$0xf, %eax
    000003a2: 	sarq	$0x4, %rcx
    000003a6: 	shlq	$0x5, %rax
    000003aa: 	addq	(%rdi,%rcx,8), %rax
    000003ae: 	movq	%rbx, 0x18(%rax)
    000003b2: 	jmp	.Ltmp5828 # Offset: 946
    000003b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5818:
    000003c0: 	movq	-0x8(%r12), %rax
    000003c5: 	movl	$0x200, %esi
    000003ca: 	movq	0x1f8(%rax), %rbx
    000003d1: 	callq	_ZdlPvm@PLT # Offset: 977
    000003d6: 	movq	0x48(%rbp), %rdx
    000003da: 	movq	-0x8(%rdx), %rax
    000003de: 	subq	$0x8, %rdx
    000003e2: 	movq	%rdx, %xmm5
    000003e7: 	leaq	0x1f8(%rax), %rsi
    000003ee: 	movq	%rax, %xmm4
    000003f3: 	addq	$0x200, %rax
    000003f9: 	movq	%rsi, %xmm0
    000003fe: 	punpcklqdq	%xmm4, %xmm0
    00000402: 	movups	%xmm0, 0x30(%rbp)
    00000406: 	movq	%rax, %xmm0
    0000040b: 	punpcklqdq	%xmm5, %xmm0
    0000040f: 	movups	%xmm0, 0x40(%rbp)
    00000413: 	jmp	.Ltmp5829 # Offset: 1043
    00000418: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5822:
    00000420: 	addq	$0x1, 0xa0(%rbp)
    00000428: 	cmpq	$0x0, 0x18(%rsp)
    0000042e: 	movq	%rax, 0xa8(%rbp)
    00000435: 	jne	.Ltmp5830 # Offset: 1077
    0000043b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5816:
    00000440: 	movq	0x38(%rsp), %rax
    00000445: 	movq	%rbp, (%rax)
    00000448: 	addq	$0x8, %rax
    0000044c: 	movq	%rax, 0x38(%rsp)
    00000451: 	cmpq	0x40(%rsp), %rax
    00000456: 	jne	.Ltmp5831 # Offset: 1110
    0000045c: 	callq	clock@PLT # Offset: 1116
    00000461: 	pxor	%xmm0, %xmm0
    00000465: 	movq	0x40(%rsp), %r13
    0000046a: 	movq	%rax, end_time(%rip)
    00000471: 	subq	start_time(%rip), %rax
    00000478: 	cvtsi2sd	%rax, %xmm0
    0000047d: 	divsd	DATAat0x53788(%rip), %xmm0
    00000485: 	addsd	0x68(%rsp), %xmm0
    0000048b: 	movsd	%xmm0, 0x68(%rsp)
    00000491: 	nopl	(%rax) # Size: 7
.Ltmp5839:
    00000498: 	movq	(%r14), %rbp
    0000049b: 	testq	%rbp, %rbp
    0000049e: 	je	.Ltmp5832 # Offset: 1182
    000004a4: 	movq	0x50(%rbp), %rdi
    000004a8: 	testq	%rdi, %rdi
    000004ab: 	je	.Ltmp5833 # Offset: 1195
    000004ad: 	movq	0x98(%rbp), %rax
    000004b4: 	movq	0x78(%rbp), %rbx
    000004b8: 	leaq	0x8(%rax), %r12
    000004bc: 	cmpq	%rbx, %r12
    000004bf: 	jbe	.Ltmp5834 # Offset: 1215
    000004c1: 	nopl	(%rax) # Size: 7
.Ltmp5835:
    000004c8: 	movq	(%rbx), %rdi
    000004cb: 	movl	$0x200, %esi
    000004d0: 	addq	$0x8, %rbx
    000004d4: 	callq	_ZdlPvm@PLT # Offset: 1236
    000004d9: 	cmpq	%rbx, %r12
    000004dc: 	ja	.Ltmp5835 # Offset: 1244
    000004de: 	movq	0x50(%rbp), %rdi
.Ltmp5834:
    000004e2: 	movq	0x58(%rbp), %rax
    000004e6: 	leaq	(,%rax,8), %rsi
    000004ee: 	callq	_ZdlPvm@PLT # Offset: 1262
.Ltmp5833:
    000004f3: 	movq	(%rbp), %rdi
    000004f7: 	testq	%rdi, %rdi
    000004fa: 	je	.Ltmp5836 # Offset: 1274
    000004fc: 	movq	0x48(%rbp), %rax
    00000500: 	movq	0x28(%rbp), %rbx
    00000504: 	leaq	0x8(%rax), %r12
    00000508: 	cmpq	%rbx, %r12
    0000050b: 	jbe	.Ltmp5837 # Offset: 1291
    0000050d: 	nopl	(%rax) # Size: 3
.Ltmp5838:
    00000510: 	movq	(%rbx), %rdi
    00000513: 	movl	$0x200, %esi
    00000518: 	addq	$0x8, %rbx
    0000051c: 	callq	_ZdlPvm@PLT # Offset: 1308
    00000521: 	cmpq	%rbx, %r12
    00000524: 	ja	.Ltmp5838 # Offset: 1316
    00000526: 	movq	(%rbp), %rdi
.Ltmp5837:
    0000052a: 	movq	0x8(%rbp), %rax
    0000052e: 	leaq	(,%rax,8), %rsi
    00000536: 	callq	_ZdlPvm@PLT # Offset: 1334
.Ltmp5836:
    0000053b: 	movl	$0xb8, %esi
    00000540: 	movq	%rbp, %rdi
    00000543: 	callq	_ZdlPvm@PLT # Offset: 1347
.Ltmp5832:
    00000548: 	movq	$0x0, (%r14)
    0000054f: 	addq	$0x8, %r14
    00000553: 	cmpq	%r13, %r14
    00000556: 	jne	.Ltmp5839 # Offset: 1366
    0000055c: 	movl	0x20(%rsp), %ecx
    00000560: 	movl	iterations(%rip), %eax
    00000566: 	addl	%ecx, 0x48(%rsp)
    0000056a: 	movl	0x48(%rsp), %esi
    0000056e: 	cmpl	%esi, %eax
    00000570: 	jg	.Ltmp5840 # Offset: 1392
.Ltmp5856:
    00000576: 	movq	0x60(%rsp), %rdi
    0000057b: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1403
    00000580: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000587: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000058e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000595: 	je	.Ltmp5841 # Offset: 1429
.Ltmp5855:
    0000059b: 	movq	-0x20(%rax), %rdi
    0000059f: 	movsd	0x68(%rsp), %xmm0
    000005a5: 	callq	_Z13record_resultdPKc # Offset: 1445
    000005aa: 	cmpq	$0x0, 0x30(%rsp)
    000005b0: 	je	.Ltmp5842 # Offset: 1456
    000005b6: 	movq	0x98(%rsp), %rax
    000005be: 	subq	%fs:0x28, %rax
    000005c7: 	jne	.Ltmp5843 # Offset: 1479
    000005cd: 	movq	0x90(%rsp), %rsi
    000005d5: 	movq	0x30(%rsp), %rdi
    000005da: 	addq	$0xa8, %rsp
    000005e1: 	popq	%rbx
    000005e2: 	popq	%rbp
    000005e3: 	subq	%rdi, %rsi
    000005e6: 	popq	%r12
    000005e8: 	popq	%r13
    000005ea: 	popq	%r14
    000005ec: 	popq	%r15
    000005ee: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1518
    000005f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5819:
    000005f8: 	movq	%rax, %rcx
    000005fb: 	notq	%rcx
    000005fe: 	shrq	$0x4, %rcx
    00000602: 	notq	%rcx
    00000605: 	movq	%rcx, %rdi
    00000608: 	shlq	$0x4, %rdi
    0000060c: 	subq	%rdi, %rax
    0000060f: 	movq	(%rsp), %rdi
    00000613: 	shlq	$0x5, %rax
    00000617: 	addq	(%rdi,%rcx,8), %rax
    0000061b: 	movq	%rbx, 0x18(%rax)
    0000061f: 	jmp	.Ltmp5828 # Offset: 1567
    00000624: 	nopl	(%rax) # Size: 4
.Ltmp5813:
    00000628: 	movq	$0x3e8, 0x20(%rsp)
.Ltmp5814:
    00000631: 	movq	$0x0, 0x90(%rsp)
    0000063d: 	pxor	%xmm0, %xmm0
    00000641: 	movaps	%xmm0, 0x80(%rsp)
    00000649: 	jmp	.Ltmp5844 # Offset: 1609
.Ltmp5824:
    0000064e: 	movq	0x58(%rsp), %rdi
    00000653: 	movl	$0x80, %esi
    00000658: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1624
    0000065d: 	movq	0x30(%rbp), %rdi
    00000661: 	movq	0x38(%rbp), %rcx
    00000665: 	movq	0x48(%rbp), %r12
    00000669: 	movq	0x40(%rbp), %rdx
    0000066d: 	jmp	.Ltmp5845 # Offset: 1645
    0000066f: 	nop # Size: 1
.Ltmp5847:
    00000670: 	movq	%rbx, (%rdi)
    00000673: 	addq	$0x8, %rdi
.Ltmp5850:
    00000677: 	movq	%rdi, 0x30(%rbp)
    0000067b: 	cmpq	%rbx, %r13
    0000067e: 	je	.Ltmp5846 # Offset: 1662
.Ltmp5845:
    00000684: 	leaq	-0x8(%rdx), %rax
    00000688: 	subq	$0x1, %rbx
    0000068c: 	cmpq	%rax, %rdi
    0000068f: 	jne	.Ltmp5847 # Offset: 1679
    00000691: 	movq	%r12, %rax
    00000694: 	subq	0x28(%rbp), %rax
    00000698: 	movq	0x20(%rbp), %rdx
    0000069c: 	sarq	$0x3, %rax
    000006a0: 	cmpq	$0x1, %r12
    000006a4: 	adcq	$-0x1, %rax
    000006a8: 	subq	%rcx, %rdi
    000006ab: 	subq	0x10(%rbp), %rdx
    000006af: 	movabsq	$0xfffffffffffffff, %rcx
    000006b9: 	shlq	$0x6, %rax
    000006bd: 	sarq	$0x3, %rdi
    000006c1: 	addq	%rdi, %rax
    000006c4: 	sarq	$0x3, %rdx
    000006c8: 	addq	%rdx, %rax
    000006cb: 	cmpq	%rcx, %rax
    000006ce: 	je	.Ltmp5848 # Offset: 1742
    000006d4: 	movq	0x8(%rbp), %rax
    000006d8: 	movq	%r12, %rdx
    000006db: 	subq	(%rbp), %rdx
    000006df: 	sarq	$0x3, %rdx
    000006e3: 	subq	%rdx, %rax
    000006e6: 	cmpq	$0x1, %rax
    000006ea: 	jbe	.Ltmp5849 # Offset: 1770
.Ltmp5851:
    000006ec: 	movl	$0x200, %edi
    000006f1: 	callq	_Znwm@PLT # Offset: 1777
    000006f6: 	movq	%rax, 0x8(%r12)
    000006fb: 	movq	0x30(%rbp), %rax
    000006ff: 	movq	%rbx, (%rax)
    00000702: 	movq	0x48(%rbp), %rax
    00000706: 	movq	0x8(%rax), %rdi
    0000070a: 	leaq	0x8(%rax), %r12
    0000070e: 	movq	%r12, 0x48(%rbp)
    00000712: 	leaq	0x200(%rdi), %rdx
    00000719: 	movq	%rdi, %xmm0
    0000071e: 	movq	%rdi, %rcx
    00000721: 	movq	%rdx, %xmm3
    00000726: 	punpcklqdq	%xmm3, %xmm0
    0000072a: 	movups	%xmm0, 0x38(%rbp)
    0000072e: 	jmp	.Ltmp5850 # Offset: 1838
    00000733: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5849:
    00000738: 	xorl	%edx, %edx
    0000073a: 	movl	$0x1, %esi
    0000073f: 	movq	%rbp, %rdi
    00000742: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 1858
    00000747: 	movq	0x48(%rbp), %r12
    0000074b: 	jmp	.Ltmp5851 # Offset: 1867
.Ltmp5842:
    0000074d: 	movq	0x98(%rsp), %rax
    00000755: 	subq	%fs:0x28, %rax
    0000075e: 	jne	.Ltmp5843 # Offset: 1886
    00000764: 	addq	$0xa8, %rsp
    0000076b: 	popq	%rbx
    0000076c: 	popq	%rbp
    0000076d: 	popq	%r12
    0000076f: 	popq	%r13
    00000771: 	popq	%r14
    00000773: 	popq	%r15
    00000775: 	retq # Offset: 1909
.Ltmp5825:
    00000776: 	movq	%rax, %rdx
    00000779: 	notq	%rdx
    0000077c: 	shrq	$0x4, %rdx
    00000780: 	notq	%rdx
.Ltmp5854:
    00000783: 	movq	(%rsp), %rsi
    00000787: 	leaq	(%rsi,%rdx,8), %rsi
    0000078b: 	shlq	$0x4, %rdx
    0000078f: 	movq	%rsi, (%rsp)
    00000793: 	subq	%rdx, %rax
    00000796: 	movq	(%rsi), %rsi
    00000799: 	shlq	$0x5, %rax
    0000079d: 	addq	%rsi, %rax
    000007a0: 	leaq	0x200(%rsi), %r9
    000007a7: 	movq	%rax, %xmm0
.Ltmp5827:
    000007ac: 	movq	(%rsp), %rax
    000007b0: 	movdqa	%xmm0, %xmm7
    000007b4: 	movq	%rsi, %xmm4
    000007b9: 	movq	%r9, %xmm6
    000007be: 	punpcklqdq	%xmm4, %xmm7
    000007c2: 	leaq	0x8(%r8), %rbx
    000007c6: 	movq	%rax, %xmm5
    000007cb: 	addq	$0x8, %rax
    000007cf: 	movaps	%xmm7, 0x70(%rsp)
    000007d4: 	punpcklqdq	%xmm5, %xmm6
    000007d8: 	movq	%rax, %r13
    000007db: 	movaps	%xmm6, (%rsp)
    000007df: 	cmpq	%rax, %rbx
    000007e2: 	jbe	.Ltmp5852 # Offset: 2018
    000007e4: 	nopl	(%rax) # Size: 4
.Ltmp5853:
    000007e8: 	movq	(%r13), %rdi
    000007ec: 	movl	$0x200, %esi
    000007f1: 	addq	$0x8, %r13
    000007f5: 	callq	_ZdlPvm@PLT # Offset: 2037
    000007fa: 	cmpq	%r13, %rbx
    000007fd: 	ja	.Ltmp5853 # Offset: 2045
    000007ff: 	movq	0x30(%rbp), %rdi
    00000803: 	movq	0x38(%rbp), %rcx
    00000807: 	movq	0x48(%rbp), %r12
.Ltmp5852:
    0000080b: 	movdqa	0x70(%rsp), %xmm7
    00000811: 	movdqa	(%rsp), %xmm5
    00000816: 	movups	%xmm7, 0x80(%rbp)
    0000081d: 	movups	%xmm5, 0x90(%rbp)
    00000824: 	jmp	.Ltmp5846 # Offset: 2084
.Ltmp5826:
    00000829: 	movq	%rax, %rdx
    0000082c: 	sarq	$0x4, %rdx
    00000830: 	jmp	.Ltmp5854 # Offset: 2096
.Ltmp5841:
    00000835: 	movq	-0x8(%rdx), %rax
    00000839: 	addq	$0x200, %rax
    0000083f: 	jmp	.Ltmp5855 # Offset: 2111
.Ltmp5815:
    00000844: 	pxor	%xmm4, %xmm4
    00000848: 	movsd	%xmm4, 0x68(%rsp)
    0000084e: 	jmp	.Ltmp5856 # Offset: 2126
.Ltmp5848:
    00000853: 	leaq	DATAat0x52330(%rip), %rdi
    0000085a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2138
.Ltmp5843:
    0000085f: 	callq	__stack_chk_fail@PLT # Offset: 2143
    00000864: 	endbr64
    00000868: 	movq	%rax, %rbx
    0000086b: 	jmp	.Ltmp5857 # Offset: 2155
    0000086d: 	endbr64
    00000871: 	movq	%rax, %rbx
    00000874: 	jmp	.Ltmp5858 # Offset: 2164
.Ltmp5861:
    00000876: 	callq	__cxa_end_catch@PLT # Offset: 2166
.Ltmp5858:
    0000087b: 	movq	%rbp, %rdi
    0000087e: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2174
.Ltmp5857:
    00000883: 	movq	%rbp, %rdi
    00000886: 	movl	$0xb8, %esi
    0000088b: 	movq	%rbx, %rbp
    0000088e: 	callq	_ZdlPvm@PLT # Offset: 2190
.Ltmp5860:
    00000893: 	movq	0x80(%rsp), %rdi
    0000089b: 	movq	0x90(%rsp), %rsi
    000008a3: 	subq	%rdi, %rsi
    000008a6: 	testq	%rdi, %rdi
    000008a9: 	je	.Ltmp5859 # Offset: 2217
    000008ab: 	callq	_ZdlPvm@PLT # Offset: 2219
.Ltmp5859:
    000008b0: 	movq	%rbp, %rdi
    000008b3: 	callq	_Unwind_Resume@PLT # Offset: 2227
    000008b8: 	endbr64
    000008bc: 	movq	%rax, %rbp
    000008bf: 	jmp	.Ltmp5860 # Offset: 2239
    000008c1: 	endbr64
    000008c5: 	movq	%rax, %rdi
    000008c8: 	callq	__cxa_begin_catch@PLT # Offset: 2248
    000008cd: 	callq	__cxa_rethrow@PLT # Offset: 2253
    000008d2: 	endbr64
    000008d6: 	movq	%rax, %r12
    000008d9: 	callq	__cxa_end_catch@PLT # Offset: 2265
    000008de: 	movq	%r12, %rdi
    000008e1: 	callq	__cxa_begin_catch@PLT # Offset: 2273
    000008e6: 	movq	0x58(%rbp), %rax
    000008ea: 	movq	0x50(%rbp), %rdi
    000008ee: 	leaq	(,%rax,8), %rsi
    000008f6: 	callq	_ZdlPvm@PLT # Offset: 2294
    000008fb: 	movq	$0x0, 0x50(%rbp)
    00000903: 	movq	$0x0, 0x58(%rbp)
    0000090b: 	callq	__cxa_rethrow@PLT # Offset: 2315
    00000910: 	endbr64
    00000914: 	movq	%rax, %rbx
    00000917: 	jmp	.Ltmp5861 # Offset: 2327
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreI20PooledDoubleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_clearall_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 322
  State       : disassembled
  Address     : 0x3d430
  Size        : 0x94e
  MaxSize     : 0x950
  Offset      : 0x3d430
  Section     : .text
  Orc Section : .local.text._Z22test_clearall_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0321:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xb8, %rsp
    0000001b: 	movq	%rdx, 0x50(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x20(%rsp)
    00000027: 	movq	%rsi, (%rsp)
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0xa8(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	movabsq	$0x500000000, %rax
    00000048: 	divq	%rcx
    0000004b: 	movq	%rax, 0x10(%rsp)
    00000050: 	cmpq	$0x3e8, %rax
    00000056: 	ja	.Ltmp5862 # Offset: 86
    0000005c: 	cmpq	$0x3, %rax
    00000060: 	ja	.Ltmp5863 # Offset: 96
    00000066: 	movq	$0x0, 0xa0(%rsp)
    00000072: 	pxor	%xmm0, %xmm0
    00000076: 	movq	$0x4, 0x10(%rsp)
    0000007f: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5906:
    00000087: 	movq	0x10(%rsp), %rbx
    0000008c: 	leaq	0x90(%rsp), %rdi
    00000094: 	movq	%rbx, %rsi
    00000097: 	callq	_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 151
    0000009c: 	movq	0x90(%rsp), %rcx
    000000a4: 	movl	iterations(%rip), %eax
    000000aa: 	movq	%rcx, 0x30(%rsp)
    000000af: 	testl	%eax, %eax
    000000b1: 	jle	.Ltmp5864 # Offset: 177
    000000b7: 	addq	$0x8, %rcx
    000000bb: 	movl	%ebx, 0x4c(%rsp)
    000000bf: 	pxor	%xmm4, %xmm4
    000000c3: 	leaq	0x88(%rsp), %r14
    000000cb: 	movl	$0x0, 0x48(%rsp)
    000000d3: 	movq	%rcx, 0x58(%rsp)
    000000d8: 	movsd	%xmm4, 0x38(%rsp)
.Ltmp5888:
    000000de: 	movslq	0x48(%rsp), %rdx
    000000e3: 	movslq	%eax, %rcx
    000000e6: 	movq	%rdx, %rsi
    000000e9: 	addq	0x10(%rsp), %rdx
    000000ee: 	subl	%esi, %eax
    000000f0: 	cmpq	%rcx, %rdx
    000000f3: 	cmovbl	0x4c(%rsp), %eax
    000000f8: 	movq	0x58(%rsp), %rdx
    000000fd: 	movq	0x30(%rsp), %rcx
    00000102: 	subl	$0x1, %eax
    00000105: 	leaq	(%rdx,%rax,8), %rax
    00000109: 	movq	%rcx, 0x40(%rsp)
    0000010e: 	movq	%rax, 0x8(%rsp)
    00000113: 	movq	%rcx, 0x18(%rsp)
.Ltmp5873:
    00000118: 	movl	$0xb8, %edi
    0000011d: 	callq	_Znwm@PLT # Offset: 285
    00000122: 	movq	$0x0, (%rax)
    00000129: 	pxor	%xmm2, %xmm2
    0000012d: 	xorl	%esi, %esi
    0000012f: 	movq	%rax, %rdi
    00000132: 	movq	$0x0, 0x8(%rax)
    0000013a: 	movq	%rax, %rbp
    0000013d: 	movups	%xmm2, 0x10(%rax)
    00000141: 	movups	%xmm2, 0x20(%rax)
    00000145: 	movups	%xmm2, 0x30(%rax)
    00000149: 	movups	%xmm2, 0x40(%rax)
    0000014d: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 333
    00000152: 	movq	$0x0, 0x50(%rbp)
    0000015a: 	pxor	%xmm2, %xmm2
    0000015e: 	movl	$0x40, %edi
    00000163: 	movq	$0x8, 0x58(%rbp)
    0000016b: 	movups	%xmm2, 0x60(%rbp)
    0000016f: 	movups	%xmm2, 0x70(%rbp)
    00000173: 	movups	%xmm2, 0x80(%rbp)
    0000017a: 	movups	%xmm2, 0x90(%rbp)
    00000181: 	callq	_Znwm@PLT # Offset: 385
    00000186: 	movq	0x58(%rbp), %rdx
    0000018a: 	movq	%rax, 0x50(%rbp)
    0000018e: 	movl	$0x200, %edi
    00000193: 	leaq	-0x4(,%rdx,4), %rdx
    0000019b: 	andq	$-0x8, %rdx
    0000019f: 	leaq	(%rax,%rdx), %r13
    000001a3: 	callq	_Znwm@PLT # Offset: 419
    000001a8: 	movq	%rax, %rdx
    000001ab: 	movq	%rax, %xmm1
    000001b0: 	movq	%rax, (%r13)
    000001b4: 	pxor	%xmm2, %xmm2
    000001b8: 	leaq	0x200(%rax), %rax
    000001bf: 	movq	%r13, %xmm6
    000001c4: 	punpcklqdq	%xmm1, %xmm1
    000001c8: 	movq	$0x0, 0xa0(%rbp)
    000001d3: 	movq	%rax, %xmm0
    000001d8: 	leaq	0x50(%rbp), %rax
    000001dc: 	movups	%xmm1, 0x60(%rbp)
    000001e0: 	movq	%rdx, %rcx
    000001e3: 	movq	%rax, 0x28(%rsp)
    000001e8: 	movq	0x20(%rsp), %rax
    000001ed: 	punpcklqdq	%xmm6, %xmm0
    000001f1: 	movups	%xmm0, 0x70(%rbp)
    000001f5: 	movups	%xmm1, 0x80(%rbp)
    000001fc: 	movq	%rax, %r15
    000001ff: 	movups	%xmm0, 0x90(%rbp)
    00000206: 	movups	%xmm2, 0xa8(%rbp)
    0000020d: 	cmpq	%rax, (%rsp)
    00000211: 	je	.Ltmp5865 # Offset: 529
    00000217: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5872:
    00000220: 	movq	0x48(%rbp), %rsi
    00000224: 	movq	0x30(%rbp), %rdi
    00000228: 	addq	$0x8, %r15
    0000022c: 	movq	0x38(%rbp), %r8
    00000230: 	movq	%rsi, %rax
    00000233: 	subq	0x28(%rbp), %rax
    00000237: 	movq	%rdi, %r9
    0000023a: 	sarq	$0x3, %rax
    0000023e: 	cmpq	$0x1, %rsi
    00000242: 	adcq	$-0x1, %rax
    00000246: 	subq	%r8, %r9
    00000249: 	sarq	$0x3, %r9
    0000024d: 	shlq	$0x6, %rax
    00000251: 	addq	%r9, %rax
    00000254: 	movq	0x20(%rbp), %r9
    00000258: 	subq	0x10(%rbp), %r9
    0000025c: 	sarq	$0x3, %r9
    00000260: 	addq	%r9, %rax
    00000263: 	je	.Ltmp5866 # Offset: 611
.Ltmp5905:
    00000269: 	cmpq	%r8, %rdi
    0000026c: 	je	.Ltmp5867 # Offset: 620
.Ltmp5900:
    00000272: 	movq	-0x8(%rdi), %rbx
    00000276: 	subq	$0x8, %rdi
    0000027a: 	movq	%rdi, 0x30(%rbp)
.Ltmp5901:
    0000027e: 	movq	0x60(%rbp), %rdx
    00000282: 	movq	0x68(%rbp), %rcx
    00000286: 	movq	0x78(%rbp), %r13
    0000028a: 	movq	%rdx, %rax
    0000028d: 	subq	%rcx, %rax
    00000290: 	sarq	$0x5, %rax
    00000294: 	addq	%rbx, %rax
    00000297: 	js	.Ltmp5868 # Offset: 663
    0000029d: 	cmpq	$0xf, %rax
    000002a1: 	jg	.Ltmp5869 # Offset: 673
    000002a7: 	movq	%rbx, %rax
    000002aa: 	shlq	$0x5, %rax
    000002ae: 	addq	%rdx, %rax
    000002b1: 	movq	%rbx, 0x18(%rax)
.Ltmp5893:
    000002b5: 	movsd	-0x8(%r15), %xmm0
    000002bb: 	movq	0xb0(%rbp), %rsi
    000002c2: 	movq	$0x0, 0x8(%rax)
    000002ca: 	movq	%rsi, 0x10(%rax)
    000002ce: 	movsd	%xmm0, (%rax)
    000002d2: 	testq	%rsi, %rsi
    000002d5: 	je	.Ltmp5870 # Offset: 725
    000002d7: 	movq	%rax, 0x8(%rsi)
.Ltmp5870:
    000002db: 	cmpq	$0x0, 0xa8(%rbp)
    000002e3: 	movq	%rax, 0xb0(%rbp)
    000002ea: 	je	.Ltmp5871 # Offset: 746
    000002f0: 	addq	$0x1, 0xa0(%rbp)
    000002f8: 	cmpq	%r15, (%rsp)
    000002fc: 	jne	.Ltmp5872 # Offset: 764
.Ltmp5865:
    00000302: 	movq	0x18(%rsp), %rax
    00000307: 	movq	%rbp, (%rax)
    0000030a: 	addq	$0x8, %rax
    0000030e: 	movq	%rax, 0x18(%rsp)
    00000313: 	cmpq	%rax, 0x8(%rsp)
    00000318: 	jne	.Ltmp5873 # Offset: 792
    0000031e: 	callq	clock@PLT # Offset: 798
    00000323: 	movq	0x30(%rsp), %r13
    00000328: 	movq	%rax, start_time(%rip)
.Ltmp5879:
    0000032f: 	movq	(%r13), %rbx
    00000333: 	movq	0xa8(%rbx), %rbp
    0000033a: 	testq	%rbp, %rbp
    0000033d: 	jne	.Ltmp5874 # Offset: 829
    0000033f: 	jmp	.Ltmp5875 # Offset: 831
    00000344: 	nopl	(%rax) # Size: 4
.Ltmp5878:
    00000348: 	cmpq	$0xf, %rax
    0000034c: 	jg	.Ltmp5876 # Offset: 844
    00000352: 	shlq	$0x5, %rdx
    00000356: 	leaq	(%rsi,%rdx), %rax
    0000035a: 	movq	$-0x1, 0x18(%rax)
    00000362: 	testq	%rbp, %rbp
    00000365: 	je	.Ltmp5875 # Offset: 869
.Ltmp5874:
    00000367: 	movq	0x40(%rbx), %rcx
    0000036b: 	movq	0x30(%rbx), %rax
    0000036f: 	movq	%rbp, %r12
    00000372: 	movq	0x8(%rbp), %rbp
    00000376: 	leaq	-0x8(%rcx), %rdx
    0000037a: 	cmpq	%rdx, %rax
    0000037d: 	je	.Ltmp5877 # Offset: 893
    00000383: 	movq	0x18(%r12), %rdx
    00000388: 	addq	$0x8, %rax
    0000038c: 	movq	%rdx, -0x8(%rax)
    00000390: 	movq	%rax, 0x30(%rbx)
.Ltmp5894:
    00000394: 	movq	0x60(%rbx), %rsi
    00000398: 	movq	0x18(%r12), %rdx
    0000039d: 	movq	0x78(%rbx), %rcx
    000003a1: 	movq	%rsi, %rax
    000003a4: 	subq	0x68(%rbx), %rax
    000003a8: 	sarq	$0x5, %rax
    000003ac: 	addq	%rdx, %rax
    000003af: 	jns	.Ltmp5878 # Offset: 943
    000003b1: 	movq	%rax, %rdx
    000003b4: 	notq	%rdx
    000003b7: 	shrq	$0x4, %rdx
    000003bb: 	notq	%rdx
.Ltmp5892:
    000003be: 	movq	%rdx, %rsi
    000003c1: 	shlq	$0x4, %rsi
    000003c5: 	subq	%rsi, %rax
    000003c8: 	shlq	$0x5, %rax
    000003cc: 	addq	(%rcx,%rdx,8), %rax
    000003d0: 	movq	$-0x1, 0x18(%rax)
    000003d8: 	testq	%rbp, %rbp
    000003db: 	jne	.Ltmp5874 # Offset: 987
.Ltmp5875:
    000003dd: 	pxor	%xmm5, %xmm5
    000003e1: 	addq	$0x8, %r13
    000003e5: 	movq	$0x0, 0xa0(%rbx)
    000003f0: 	movups	%xmm5, 0xa8(%rbx)
    000003f7: 	cmpq	%r13, 0x8(%rsp)
    000003fc: 	jne	.Ltmp5879 # Offset: 1020
    00000402: 	callq	clock@PLT # Offset: 1026
    00000407: 	pxor	%xmm0, %xmm0
    0000040b: 	movq	0x40(%rsp), %r12
    00000410: 	movq	0x8(%rsp), %r13
    00000415: 	movq	%rax, end_time(%rip)
    0000041c: 	subq	start_time(%rip), %rax
    00000423: 	cvtsi2sd	%rax, %xmm0
    00000428: 	divsd	DATAat0x53788(%rip), %xmm0
    00000430: 	addsd	0x38(%rsp), %xmm0
    00000436: 	movsd	%xmm0, 0x38(%rsp)
.Ltmp5887:
    0000043c: 	movq	(%r12), %rbp
    00000440: 	testq	%rbp, %rbp
    00000443: 	je	.Ltmp5880 # Offset: 1091
    00000449: 	movq	0x50(%rbp), %rdi
    0000044d: 	testq	%rdi, %rdi
    00000450: 	je	.Ltmp5881 # Offset: 1104
    00000452: 	movq	0x98(%rbp), %rax
    00000459: 	movq	0x78(%rbp), %rbx
    0000045d: 	leaq	0x8(%rax), %r15
    00000461: 	cmpq	%rbx, %r15
    00000464: 	jbe	.Ltmp5882 # Offset: 1124
    00000466: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5883:
    00000470: 	movq	(%rbx), %rdi
    00000473: 	movl	$0x200, %esi
    00000478: 	addq	$0x8, %rbx
    0000047c: 	callq	_ZdlPvm@PLT # Offset: 1148
    00000481: 	cmpq	%rbx, %r15
    00000484: 	ja	.Ltmp5883 # Offset: 1156
    00000486: 	movq	0x50(%rbp), %rdi
.Ltmp5882:
    0000048a: 	movq	0x58(%rbp), %rax
    0000048e: 	leaq	(,%rax,8), %rsi
    00000496: 	callq	_ZdlPvm@PLT # Offset: 1174
.Ltmp5881:
    0000049b: 	movq	(%rbp), %rdi
    0000049f: 	testq	%rdi, %rdi
    000004a2: 	je	.Ltmp5884 # Offset: 1186
    000004a4: 	movq	0x48(%rbp), %rax
    000004a8: 	movq	0x28(%rbp), %rbx
    000004ac: 	leaq	0x8(%rax), %r15
    000004b0: 	cmpq	%rbx, %r15
    000004b3: 	jbe	.Ltmp5885 # Offset: 1203
    000004b5: 	nopl	(%rax) # Size: 3
.Ltmp5886:
    000004b8: 	movq	(%rbx), %rdi
    000004bb: 	movl	$0x200, %esi
    000004c0: 	addq	$0x8, %rbx
    000004c4: 	callq	_ZdlPvm@PLT # Offset: 1220
    000004c9: 	cmpq	%rbx, %r15
    000004cc: 	ja	.Ltmp5886 # Offset: 1228
    000004ce: 	movq	(%rbp), %rdi
.Ltmp5885:
    000004d2: 	movq	0x8(%rbp), %rax
    000004d6: 	leaq	(,%rax,8), %rsi
    000004de: 	callq	_ZdlPvm@PLT # Offset: 1246
.Ltmp5884:
    000004e3: 	movl	$0xb8, %esi
    000004e8: 	movq	%rbp, %rdi
    000004eb: 	callq	_ZdlPvm@PLT # Offset: 1259
.Ltmp5880:
    000004f0: 	movq	$0x0, (%r12)
    000004f8: 	addq	$0x8, %r12
    000004fc: 	cmpq	%r13, %r12
    000004ff: 	jne	.Ltmp5887 # Offset: 1279
    00000505: 	movl	0x10(%rsp), %ecx
    00000509: 	movl	iterations(%rip), %eax
    0000050f: 	addl	%ecx, 0x48(%rsp)
    00000513: 	movl	0x48(%rsp), %ecx
    00000517: 	cmpl	%ecx, %eax
    00000519: 	jg	.Ltmp5888 # Offset: 1305
.Ltmp5910:
    0000051f: 	movq	0x50(%rsp), %rdi
    00000524: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1316
    00000529: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000530: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000537: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000053e: 	je	.Ltmp5889 # Offset: 1342
.Ltmp5909:
    00000544: 	movq	-0x20(%rax), %rdi
    00000548: 	movsd	0x38(%rsp), %xmm0
    0000054e: 	callq	_Z13record_resultdPKc # Offset: 1358
    00000553: 	cmpq	$0x0, 0x30(%rsp)
    00000559: 	je	.Ltmp5890 # Offset: 1369
    0000055f: 	movq	0xa8(%rsp), %rax
    00000567: 	subq	%fs:0x28, %rax
    00000570: 	jne	.Ltmp5891 # Offset: 1392
    00000576: 	movq	0xa0(%rsp), %rsi
    0000057e: 	movq	0x30(%rsp), %rdi
    00000583: 	addq	$0xb8, %rsp
    0000058a: 	popq	%rbx
    0000058b: 	popq	%rbp
    0000058c: 	subq	%rdi, %rsi
    0000058f: 	popq	%r12
    00000591: 	popq	%r13
    00000593: 	popq	%r14
    00000595: 	popq	%r15
    00000597: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1431
    0000059c: 	nopl	(%rax) # Size: 4
.Ltmp5876:
    000005a0: 	movq	%rax, %rdx
    000005a3: 	sarq	$0x4, %rdx
    000005a7: 	jmp	.Ltmp5892 # Offset: 1447
.Ltmp5869:
    000005ac: 	movq	%rax, %rsi
    000005af: 	andl	$0xf, %eax
    000005b2: 	sarq	$0x4, %rsi
    000005b6: 	shlq	$0x5, %rax
    000005ba: 	addq	(%r13,%rsi,8), %rax
    000005bf: 	movq	%rbx, 0x18(%rax)
    000005c3: 	jmp	.Ltmp5893 # Offset: 1475
    000005c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5877:
    000005d0: 	leaq	0x18(%r12), %rsi
    000005d5: 	movq	%rbx, %rdi
    000005d8: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 1496
    000005dd: 	jmp	.Ltmp5894 # Offset: 1501
.Ltmp5866:
    000005e2: 	movq	0x98(%rbp), %rax
    000005e9: 	movq	0x70(%rbp), %r9
    000005ed: 	movq	0x80(%rbp), %r12
    000005f4: 	movq	%rax, %r10
    000005f7: 	subq	%r13, %r10
    000005fa: 	sarq	$0x3, %r10
    000005fe: 	cmpq	$0x1, %rax
    00000602: 	adcq	$-0x1, %r10
    00000606: 	subq	0x88(%rbp), %r12
    0000060d: 	shlq	$0x4, %r10
    00000611: 	sarq	$0x5, %r12
    00000615: 	addq	%r10, %r12
    00000618: 	movq	%r9, %r10
    0000061b: 	subq	%rdx, %r10
    0000061e: 	sarq	$0x5, %r10
    00000622: 	addq	%r10, %r12
    00000625: 	leaq	0x80(%r12), %rbx
    0000062d: 	cmpq	%rbx, %r12
    00000630: 	jb	.Ltmp5895 # Offset: 1584
    00000636: 	movq	%rdx, %r10
    00000639: 	subq	%rcx, %r10
    0000063c: 	sarq	$0x5, %r10
    00000640: 	addq	%rbx, %r10
    00000643: 	js	.Ltmp5896 # Offset: 1603
    00000649: 	cmpq	$0xf, %r10
    0000064d: 	jle	.Ltmp5897 # Offset: 1613
    00000653: 	movq	%r10, %rdx
    00000656: 	sarq	$0x4, %rdx
.Ltmp5908:
    0000065a: 	leaq	(%r13,%rdx,8), %r13
    0000065f: 	shlq	$0x4, %rdx
    00000663: 	movq	%rdx, %r11
    00000666: 	movq	%r10, %rdx
    00000669: 	movq	(%r13), %rcx
    0000066d: 	subq	%r11, %rdx
    00000670: 	shlq	$0x5, %rdx
    00000674: 	leaq	0x200(%rcx), %r9
    0000067b: 	addq	%rcx, %rdx
.Ltmp5907:
    0000067e: 	movq	%rdx, %xmm7
    00000683: 	movq	%rcx, %xmm6
    00000688: 	movq	%r13, %xmm5
    0000068d: 	addq	$0x8, %r13
    00000691: 	punpcklqdq	%xmm6, %xmm7
    00000695: 	leaq	0x8(%rax), %rbx
    00000699: 	movaps	%xmm7, 0x60(%rsp)
    0000069e: 	movq	%r9, %xmm7
    000006a3: 	punpcklqdq	%xmm5, %xmm7
    000006a7: 	movaps	%xmm7, 0x70(%rsp)
    000006ac: 	cmpq	%r13, %rbx
    000006af: 	jbe	.Ltmp5898 # Offset: 1711
    000006b1: 	nopl	(%rax) # Size: 7
.Ltmp5899:
    000006b8: 	movq	(%r13), %rdi
    000006bc: 	movl	$0x200, %esi
    000006c1: 	addq	$0x8, %r13
    000006c5: 	callq	_ZdlPvm@PLT # Offset: 1733
    000006ca: 	cmpq	%r13, %rbx
    000006cd: 	ja	.Ltmp5899 # Offset: 1741
    000006cf: 	movq	0x30(%rbp), %rdi
    000006d3: 	movq	0x38(%rbp), %r8
    000006d7: 	movq	0x48(%rbp), %rsi
.Ltmp5898:
    000006db: 	movdqa	0x60(%rsp), %xmm6
    000006e1: 	movdqa	0x70(%rsp), %xmm3
    000006e7: 	movups	%xmm6, 0x80(%rbp)
    000006ee: 	movups	%xmm3, 0x90(%rbp)
    000006f5: 	cmpq	%r8, %rdi
    000006f8: 	jne	.Ltmp5900 # Offset: 1784
.Ltmp5867:
    000006fe: 	movq	-0x8(%rsi), %rax
    00000702: 	movl	$0x200, %esi
    00000707: 	movq	0x1f8(%rax), %rbx
    0000070e: 	callq	_ZdlPvm@PLT # Offset: 1806
    00000713: 	movq	0x48(%rbp), %rdx
    00000717: 	movq	-0x8(%rdx), %rax
    0000071b: 	subq	$0x8, %rdx
    0000071f: 	movq	%rdx, %xmm4
    00000724: 	leaq	0x1f8(%rax), %rcx
    0000072b: 	movq	%rax, %xmm3
    00000730: 	addq	$0x200, %rax
    00000736: 	movq	%rcx, %xmm0
    0000073b: 	punpcklqdq	%xmm3, %xmm0
    0000073f: 	movups	%xmm0, 0x30(%rbp)
    00000743: 	movq	%rax, %xmm0
    00000748: 	punpcklqdq	%xmm4, %xmm0
    0000074c: 	movups	%xmm0, 0x40(%rbp)
    00000750: 	jmp	.Ltmp5901 # Offset: 1872
.Ltmp5871:
    00000755: 	addq	$0x1, 0xa0(%rbp)
    0000075d: 	movq	%rax, 0xa8(%rbp)
    00000764: 	cmpq	%r15, (%rsp)
    00000768: 	jne	.Ltmp5872 # Offset: 1896
    0000076e: 	jmp	.Ltmp5865 # Offset: 1902
    00000773: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5868:
    00000778: 	movq	%rax, %rsi
    0000077b: 	notq	%rsi
    0000077e: 	shrq	$0x4, %rsi
    00000782: 	notq	%rsi
    00000785: 	movq	%rsi, %rdi
    00000788: 	shlq	$0x4, %rdi
    0000078c: 	subq	%rdi, %rax
    0000078f: 	shlq	$0x5, %rax
    00000793: 	addq	(%r13,%rsi,8), %rax
    00000798: 	movq	%rbx, 0x18(%rax)
    0000079c: 	jmp	.Ltmp5893 # Offset: 1948
.Ltmp5895:
    000007a1: 	movq	0x28(%rsp), %rdi
    000007a6: 	movl	$0x80, %esi
    000007ab: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1963
    000007b0: 	movq	0x30(%rbp), %rdi
    000007b4: 	jmp	.Ltmp5902 # Offset: 1972
    000007b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5904:
    000007c0: 	movq	%rbx, (%rdi)
    000007c3: 	addq	$0x8, %rdi
    000007c7: 	movq	%rdi, 0x30(%rbp)
    000007cb: 	cmpq	%rbx, %r12
    000007ce: 	je	.Ltmp5903 # Offset: 1998
.Ltmp5902:
    000007d0: 	movq	0x40(%rbp), %rax
    000007d4: 	subq	$0x1, %rbx
    000007d8: 	movq	%rbx, 0x88(%rsp)
    000007e0: 	subq	$0x8, %rax
    000007e4: 	cmpq	%rax, %rdi
    000007e7: 	jne	.Ltmp5904 # Offset: 2023
    000007e9: 	movq	%r14, %rsi
    000007ec: 	movq	%rbp, %rdi
    000007ef: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2031
    000007f4: 	movq	0x30(%rbp), %rdi
    000007f8: 	cmpq	%rbx, %r12
    000007fb: 	jne	.Ltmp5902 # Offset: 2043
.Ltmp5903:
    000007fd: 	movq	0x38(%rbp), %r8
    00000801: 	movq	0x48(%rbp), %rsi
    00000805: 	jmp	.Ltmp5905 # Offset: 2053
.Ltmp5862:
    0000080a: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp5863:
    00000813: 	movq	$0x0, 0xa0(%rsp)
    0000081f: 	pxor	%xmm0, %xmm0
    00000823: 	movaps	%xmm0, 0x90(%rsp)
    0000082b: 	jmp	.Ltmp5906 # Offset: 2091
.Ltmp5897:
    00000830: 	shlq	$0x5, %rbx
    00000834: 	addq	%rbx, %rdx
    00000837: 	jmp	.Ltmp5907 # Offset: 2103
.Ltmp5896:
    0000083c: 	movq	%r10, %rdx
    0000083f: 	notq	%rdx
    00000842: 	shrq	$0x4, %rdx
    00000846: 	notq	%rdx
    00000849: 	jmp	.Ltmp5908 # Offset: 2121
.Ltmp5890:
    0000084e: 	movq	0xa8(%rsp), %rax
    00000856: 	subq	%fs:0x28, %rax
    0000085f: 	jne	.Ltmp5891 # Offset: 2143
    00000861: 	addq	$0xb8, %rsp
    00000868: 	popq	%rbx
    00000869: 	popq	%rbp
    0000086a: 	popq	%r12
    0000086c: 	popq	%r13
    0000086e: 	popq	%r14
    00000870: 	popq	%r15
    00000872: 	retq # Offset: 2162
.Ltmp5889:
    00000873: 	movq	-0x8(%rdx), %rax
    00000877: 	addq	$0x200, %rax
    0000087d: 	jmp	.Ltmp5909 # Offset: 2173
.Ltmp5864:
    00000882: 	pxor	%xmm4, %xmm4
    00000886: 	movsd	%xmm4, 0x38(%rsp)
    0000088c: 	jmp	.Ltmp5910 # Offset: 2188
.Ltmp5891:
    00000891: 	callq	__stack_chk_fail@PLT # Offset: 2193
    00000896: 	endbr64
    0000089a: 	movq	%rax, %rbx
    0000089d: 	jmp	.Ltmp5911 # Offset: 2205
    0000089f: 	endbr64
    000008a3: 	movq	%rax, %rbx
    000008a6: 	jmp	.Ltmp5912 # Offset: 2214
.Ltmp5915:
    000008a8: 	callq	__cxa_end_catch@PLT # Offset: 2216
.Ltmp5912:
    000008ad: 	movq	%rbp, %rdi
    000008b0: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2224
.Ltmp5911:
    000008b5: 	movq	%rbp, %rdi
    000008b8: 	movl	$0xb8, %esi
    000008bd: 	movq	%rbx, %rbp
    000008c0: 	callq	_ZdlPvm@PLT # Offset: 2240
.Ltmp5914:
    000008c5: 	movq	0x90(%rsp), %rdi
    000008cd: 	movq	0xa0(%rsp), %rsi
    000008d5: 	subq	%rdi, %rsi
    000008d8: 	testq	%rdi, %rdi
    000008db: 	je	.Ltmp5913 # Offset: 2267
    000008dd: 	callq	_ZdlPvm@PLT # Offset: 2269
.Ltmp5913:
    000008e2: 	movq	%rbp, %rdi
    000008e5: 	callq	_Unwind_Resume@PLT # Offset: 2277
    000008ea: 	endbr64
    000008ee: 	movq	%rax, %rbp
    000008f1: 	jmp	.Ltmp5914 # Offset: 2289
    000008f3: 	endbr64
    000008f7: 	movq	%rax, %rdi
    000008fa: 	callq	__cxa_begin_catch@PLT # Offset: 2298
    000008ff: 	callq	__cxa_rethrow@PLT # Offset: 2303
    00000904: 	endbr64
    00000908: 	movq	%rax, %r12
    0000090b: 	callq	__cxa_end_catch@PLT # Offset: 2315
    00000910: 	movq	%r12, %rdi
    00000913: 	callq	__cxa_begin_catch@PLT # Offset: 2323
    00000918: 	movq	0x58(%rbp), %rax
    0000091c: 	movq	0x50(%rbp), %rdi
    00000920: 	leaq	(,%rax,8), %rsi
    00000928: 	callq	_ZdlPvm@PLT # Offset: 2344
    0000092d: 	movq	$0x0, 0x50(%rbp)
    00000935: 	movq	$0x0, 0x58(%rbp)
    0000093d: 	callq	__cxa_rethrow@PLT # Offset: 2365
    00000942: 	endbr64
    00000946: 	movq	%rax, %rbx
    00000949: 	jmp	.Ltmp5915 # Offset: 2377
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_clearall_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z22test_eraseall_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 323
  State       : disassembled
  Address     : 0x3dd80
  Size        : 0x966
  MaxSize     : 0x970
  Offset      : 0x3dd80
  Section     : .text
  Orc Section : .local.text._Z22test_eraseall_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0322:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xb8, %rsp
    0000001b: 	movq	%rdx, 0x50(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x20(%rsp)
    00000027: 	movq	%rsi, (%rsp)
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0xa8(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	movabsq	$0x500000000, %rax
    00000048: 	divq	%rcx
    0000004b: 	movq	%rax, 0x10(%rsp)
    00000050: 	cmpq	$0x3e8, %rax
    00000056: 	ja	.Ltmp5916 # Offset: 86
    0000005c: 	cmpq	$0x3, %rax
    00000060: 	ja	.Ltmp5917 # Offset: 96
    00000066: 	movq	$0x0, 0xa0(%rsp)
    00000072: 	pxor	%xmm0, %xmm0
    00000076: 	movq	$0x4, 0x10(%rsp)
    0000007f: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp5963:
    00000087: 	movq	0x10(%rsp), %rbx
    0000008c: 	leaq	0x90(%rsp), %rdi
    00000094: 	movq	%rbx, %rsi
    00000097: 	callq	_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 151
    0000009c: 	movq	0x90(%rsp), %rcx
    000000a4: 	movl	iterations(%rip), %eax
    000000aa: 	movq	%rcx, 0x30(%rsp)
    000000af: 	testl	%eax, %eax
    000000b1: 	jle	.Ltmp5918 # Offset: 177
    000000b7: 	addq	$0x8, %rcx
    000000bb: 	movl	%ebx, 0x44(%rsp)
    000000bf: 	pxor	%xmm7, %xmm7
    000000c3: 	leaq	0x88(%rsp), %r14
    000000cb: 	movl	$0x0, 0x40(%rsp)
    000000d3: 	movq	%rcx, 0x58(%rsp)
    000000d8: 	movsd	%xmm7, 0x38(%rsp)
.Ltmp5955:
    000000de: 	movslq	0x40(%rsp), %rdx
    000000e3: 	movslq	%eax, %rcx
    000000e6: 	movq	%rdx, %rsi
    000000e9: 	addq	0x10(%rsp), %rdx
    000000ee: 	subl	%esi, %eax
    000000f0: 	cmpq	%rcx, %rdx
    000000f3: 	cmovbl	0x44(%rsp), %eax
    000000f8: 	movq	0x58(%rsp), %rdx
    000000fd: 	movq	0x30(%rsp), %rcx
    00000102: 	subl	$0x1, %eax
    00000105: 	leaq	(%rdx,%rax,8), %rax
    00000109: 	movq	%rcx, 0x48(%rsp)
    0000010e: 	movq	%rax, 0x8(%rsp)
    00000113: 	movq	%rcx, 0x18(%rsp)
.Ltmp5927:
    00000118: 	movl	$0xb8, %edi
    0000011d: 	callq	_Znwm@PLT # Offset: 285
    00000122: 	movq	$0x0, (%rax)
    00000129: 	pxor	%xmm2, %xmm2
    0000012d: 	xorl	%esi, %esi
    0000012f: 	movq	%rax, %rdi
    00000132: 	movq	$0x0, 0x8(%rax)
    0000013a: 	movq	%rax, %rbp
    0000013d: 	movups	%xmm2, 0x10(%rax)
    00000141: 	movups	%xmm2, 0x20(%rax)
    00000145: 	movups	%xmm2, 0x30(%rax)
    00000149: 	movups	%xmm2, 0x40(%rax)
    0000014d: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 333
    00000152: 	movq	$0x0, 0x50(%rbp)
    0000015a: 	pxor	%xmm2, %xmm2
    0000015e: 	movl	$0x40, %edi
    00000163: 	movq	$0x8, 0x58(%rbp)
    0000016b: 	movups	%xmm2, 0x60(%rbp)
    0000016f: 	movups	%xmm2, 0x70(%rbp)
    00000173: 	movups	%xmm2, 0x80(%rbp)
    0000017a: 	movups	%xmm2, 0x90(%rbp)
    00000181: 	callq	_Znwm@PLT # Offset: 385
    00000186: 	movq	0x58(%rbp), %rdx
    0000018a: 	movq	%rax, 0x50(%rbp)
    0000018e: 	movl	$0x200, %edi
    00000193: 	leaq	-0x4(,%rdx,4), %rdx
    0000019b: 	andq	$-0x8, %rdx
    0000019f: 	leaq	(%rax,%rdx), %r13
    000001a3: 	callq	_Znwm@PLT # Offset: 419
    000001a8: 	movq	%rax, %rdx
    000001ab: 	movq	%rax, %xmm1
    000001b0: 	movq	%rax, (%r13)
    000001b4: 	pxor	%xmm2, %xmm2
    000001b8: 	leaq	0x200(%rax), %rax
    000001bf: 	movq	%r13, %xmm5
    000001c4: 	punpcklqdq	%xmm1, %xmm1
    000001c8: 	movq	$0x0, 0xa0(%rbp)
    000001d3: 	movq	%rax, %xmm0
    000001d8: 	leaq	0x50(%rbp), %rax
    000001dc: 	movups	%xmm1, 0x60(%rbp)
    000001e0: 	movq	%rdx, %rcx
    000001e3: 	movq	%rax, 0x28(%rsp)
    000001e8: 	movq	0x20(%rsp), %rax
    000001ed: 	punpcklqdq	%xmm5, %xmm0
    000001f1: 	movups	%xmm0, 0x70(%rbp)
    000001f5: 	movups	%xmm1, 0x80(%rbp)
    000001fc: 	movq	%rax, %r15
    000001ff: 	movups	%xmm0, 0x90(%rbp)
    00000206: 	movups	%xmm2, 0xa8(%rbp)
    0000020d: 	cmpq	%rax, (%rsp)
    00000211: 	je	.Ltmp5919 # Offset: 529
    00000217: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5926:
    00000220: 	movq	0x48(%rbp), %rsi
    00000224: 	movq	0x30(%rbp), %rdi
    00000228: 	addq	$0x8, %r15
    0000022c: 	movq	0x38(%rbp), %r8
    00000230: 	movq	%rsi, %rax
    00000233: 	subq	0x28(%rbp), %rax
    00000237: 	movq	%rdi, %r9
    0000023a: 	sarq	$0x3, %rax
    0000023e: 	cmpq	$0x1, %rsi
    00000242: 	adcq	$-0x1, %rax
    00000246: 	subq	%r8, %r9
    00000249: 	sarq	$0x3, %r9
    0000024d: 	shlq	$0x6, %rax
    00000251: 	addq	%r9, %rax
    00000254: 	movq	0x20(%rbp), %r9
    00000258: 	subq	0x10(%rbp), %r9
    0000025c: 	sarq	$0x3, %r9
    00000260: 	addq	%r9, %rax
    00000263: 	je	.Ltmp5920 # Offset: 611
.Ltmp5962:
    00000269: 	cmpq	%r8, %rdi
    0000026c: 	je	.Ltmp5921 # Offset: 620
.Ltmp5944:
    00000272: 	movq	-0x8(%rdi), %rbx
    00000276: 	subq	$0x8, %rdi
    0000027a: 	movq	%rdi, 0x30(%rbp)
.Ltmp5945:
    0000027e: 	movq	0x60(%rbp), %rdx
    00000282: 	movq	0x68(%rbp), %rcx
    00000286: 	movq	0x78(%rbp), %r13
    0000028a: 	movq	%rdx, %rax
    0000028d: 	subq	%rcx, %rax
    00000290: 	sarq	$0x5, %rax
    00000294: 	addq	%rbx, %rax
    00000297: 	js	.Ltmp5922 # Offset: 663
    0000029d: 	cmpq	$0xf, %rax
    000002a1: 	jg	.Ltmp5923 # Offset: 673
    000002a7: 	movq	%rbx, %rax
    000002aa: 	shlq	$0x5, %rax
    000002ae: 	addq	%rdx, %rax
    000002b1: 	movq	%rbx, 0x18(%rax)
.Ltmp5937:
    000002b5: 	movsd	-0x8(%r15), %xmm0
    000002bb: 	movq	0xb0(%rbp), %rsi
    000002c2: 	movq	$0x0, 0x8(%rax)
    000002ca: 	movq	%rsi, 0x10(%rax)
    000002ce: 	movsd	%xmm0, (%rax)
    000002d2: 	testq	%rsi, %rsi
    000002d5: 	je	.Ltmp5924 # Offset: 725
    000002d7: 	movq	%rax, 0x8(%rsi)
.Ltmp5924:
    000002db: 	cmpq	$0x0, 0xa8(%rbp)
    000002e3: 	movq	%rax, 0xb0(%rbp)
    000002ea: 	je	.Ltmp5925 # Offset: 746
    000002f0: 	addq	$0x1, 0xa0(%rbp)
    000002f8: 	cmpq	%r15, (%rsp)
    000002fc: 	jne	.Ltmp5926 # Offset: 764
.Ltmp5919:
    00000302: 	movq	0x18(%rsp), %rax
    00000307: 	movq	%rbp, (%rax)
    0000030a: 	addq	$0x8, %rax
    0000030e: 	movq	%rax, 0x18(%rsp)
    00000313: 	cmpq	%rax, 0x8(%rsp)
    00000318: 	jne	.Ltmp5927 # Offset: 792
    0000031e: 	callq	clock@PLT # Offset: 798
    00000323: 	movq	0x30(%rsp), %r13
    00000328: 	movq	%rax, start_time(%rip)
.Ltmp5946:
    0000032f: 	movq	(%r13), %rbx
    00000333: 	movq	0xa8(%rbx), %rbp
    0000033a: 	movq	0xb0(%rbx), %rdx
    00000341: 	testq	%rbp, %rbp
    00000344: 	je	.Ltmp5928 # Offset: 836
    0000034a: 	movq	0x10(%rbp), %rax
    0000034e: 	testq	%rax, %rax
    00000351: 	je	.Ltmp5929 # Offset: 849
    00000353: 	cmpq	%rax, %rbp
    00000356: 	je	.Ltmp5929 # Offset: 854
    00000358: 	movq	$0x0, 0x8(%rax)
.Ltmp5929:
    00000360: 	movq	$0x0, 0xa8(%rbx)
    0000036b: 	cmpq	%rdx, %rax
    0000036e: 	jne	.Ltmp5930 # Offset: 878
    00000370: 	jmp	.Ltmp5931 # Offset: 880
    00000375: 	nopl	(%rax) # Size: 3
.Ltmp5934:
    00000378: 	cmpq	$0xf, %rax
    0000037c: 	jg	.Ltmp5932 # Offset: 892
    00000382: 	shlq	$0x5, %rdx
    00000386: 	leaq	(%rsi,%rdx), %rax
.Ltmp5935:
    0000038a: 	movq	$-0x1, 0x18(%rax)
    00000392: 	subq	$0x1, 0xa0(%rbx)
    0000039a: 	testq	%rbp, %rbp
    0000039d: 	je	.Ltmp5928 # Offset: 925
.Ltmp5930:
    000003a3: 	movq	0x40(%rbx), %rcx
    000003a7: 	movq	0x30(%rbx), %rax
    000003ab: 	movq	%rbp, %r12
    000003ae: 	movq	0x8(%rbp), %rbp
    000003b2: 	leaq	-0x8(%rcx), %rdx
    000003b6: 	cmpq	%rdx, %rax
    000003b9: 	je	.Ltmp5933 # Offset: 953
    000003bb: 	movq	0x18(%r12), %rdx
    000003c0: 	addq	$0x8, %rax
    000003c4: 	movq	%rdx, -0x8(%rax)
    000003c8: 	movq	%rax, 0x30(%rbx)
.Ltmp5938:
    000003cc: 	movq	0x60(%rbx), %rsi
    000003d0: 	movq	0x18(%r12), %rdx
    000003d5: 	movq	0x78(%rbx), %rcx
    000003d9: 	movq	%rsi, %rax
    000003dc: 	subq	0x68(%rbx), %rax
    000003e0: 	sarq	$0x5, %rax
    000003e4: 	addq	%rdx, %rax
    000003e7: 	jns	.Ltmp5934 # Offset: 999
    000003e9: 	movq	%rax, %rdx
    000003ec: 	notq	%rdx
    000003ef: 	shrq	$0x4, %rdx
    000003f3: 	notq	%rdx
.Ltmp5936:
    000003f6: 	movq	%rdx, %rsi
    000003f9: 	shlq	$0x4, %rsi
    000003fd: 	subq	%rsi, %rax
    00000400: 	shlq	$0x5, %rax
    00000404: 	addq	(%rcx,%rdx,8), %rax
    00000408: 	jmp	.Ltmp5935 # Offset: 1032
    0000040a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5932:
    00000410: 	movq	%rax, %rdx
    00000413: 	sarq	$0x4, %rdx
    00000417: 	jmp	.Ltmp5936 # Offset: 1047
.Ltmp5923:
    00000419: 	movq	%rax, %rsi
    0000041c: 	andl	$0xf, %eax
    0000041f: 	sarq	$0x4, %rsi
    00000423: 	shlq	$0x5, %rax
    00000427: 	addq	(%r13,%rsi,8), %rax
    0000042c: 	movq	%rbx, 0x18(%rax)
    00000430: 	jmp	.Ltmp5937 # Offset: 1072
    00000435: 	nopl	(%rax) # Size: 3
.Ltmp5933:
    00000438: 	leaq	0x18(%r12), %rsi
    0000043d: 	movq	%rbx, %rdi
    00000440: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 1088
    00000445: 	jmp	.Ltmp5938 # Offset: 1093
.Ltmp5920:
    00000447: 	movq	0x98(%rbp), %rax
    0000044e: 	movq	0x70(%rbp), %r9
    00000452: 	movq	0x80(%rbp), %r12
    00000459: 	movq	%rax, %r10
    0000045c: 	subq	%r13, %r10
    0000045f: 	sarq	$0x3, %r10
    00000463: 	cmpq	$0x1, %rax
    00000467: 	adcq	$-0x1, %r10
    0000046b: 	subq	0x88(%rbp), %r12
    00000472: 	shlq	$0x4, %r10
    00000476: 	sarq	$0x5, %r12
    0000047a: 	addq	%r10, %r12
    0000047d: 	movq	%r9, %r10
    00000480: 	subq	%rdx, %r10
    00000483: 	sarq	$0x5, %r10
    00000487: 	addq	%r10, %r12
    0000048a: 	leaq	0x80(%r12), %rbx
    00000492: 	cmpq	%rbx, %r12
    00000495: 	jb	.Ltmp5939 # Offset: 1173
    0000049b: 	movq	%rdx, %r10
    0000049e: 	subq	%rcx, %r10
    000004a1: 	sarq	$0x5, %r10
    000004a5: 	addq	%rbx, %r10
    000004a8: 	js	.Ltmp5940 # Offset: 1192
    000004ae: 	cmpq	$0xf, %r10
    000004b2: 	jle	.Ltmp5941 # Offset: 1202
    000004b8: 	movq	%r10, %rdx
    000004bb: 	sarq	$0x4, %rdx
.Ltmp5965:
    000004bf: 	leaq	(%r13,%rdx,8), %r13
    000004c4: 	shlq	$0x4, %rdx
    000004c8: 	movq	%rdx, %r11
    000004cb: 	movq	%r10, %rdx
    000004ce: 	movq	(%r13), %rcx
    000004d2: 	subq	%r11, %rdx
    000004d5: 	shlq	$0x5, %rdx
    000004d9: 	leaq	0x200(%rcx), %r9
    000004e0: 	addq	%rcx, %rdx
.Ltmp5964:
    000004e3: 	movq	%rcx, %xmm7
    000004e8: 	movq	%rdx, %xmm6
    000004ed: 	leaq	0x8(%rax), %rbx
    000004f1: 	punpcklqdq	%xmm7, %xmm6
    000004f5: 	movq	%r9, %xmm7
    000004fa: 	movaps	%xmm6, 0x60(%rsp)
    000004ff: 	movq	%r13, %xmm6
    00000504: 	addq	$0x8, %r13
    00000508: 	punpcklqdq	%xmm6, %xmm7
    0000050c: 	movaps	%xmm7, 0x70(%rsp)
    00000511: 	cmpq	%r13, %rbx
    00000514: 	jbe	.Ltmp5942 # Offset: 1300
    00000516: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5943:
    00000520: 	movq	(%r13), %rdi
    00000524: 	movl	$0x200, %esi
    00000529: 	addq	$0x8, %r13
    0000052d: 	callq	_ZdlPvm@PLT # Offset: 1325
    00000532: 	cmpq	%r13, %rbx
    00000535: 	ja	.Ltmp5943 # Offset: 1333
    00000537: 	movq	0x30(%rbp), %rdi
    0000053b: 	movq	0x38(%rbp), %r8
    0000053f: 	movq	0x48(%rbp), %rsi
.Ltmp5942:
    00000543: 	movdqa	0x60(%rsp), %xmm5
    00000549: 	movdqa	0x70(%rsp), %xmm6
    0000054f: 	movups	%xmm5, 0x80(%rbp)
    00000556: 	movups	%xmm6, 0x90(%rbp)
    0000055d: 	cmpq	%r8, %rdi
    00000560: 	jne	.Ltmp5944 # Offset: 1376
.Ltmp5921:
    00000566: 	movq	-0x8(%rsi), %rax
    0000056a: 	movl	$0x200, %esi
    0000056f: 	movq	0x1f8(%rax), %rbx
    00000576: 	callq	_ZdlPvm@PLT # Offset: 1398
    0000057b: 	movq	0x48(%rbp), %rdx
    0000057f: 	movq	-0x8(%rdx), %rax
    00000583: 	subq	$0x8, %rdx
    00000587: 	movq	%rdx, %xmm4
    0000058c: 	leaq	0x1f8(%rax), %rcx
    00000593: 	movq	%rax, %xmm3
    00000598: 	addq	$0x200, %rax
    0000059e: 	movq	%rcx, %xmm0
    000005a3: 	punpcklqdq	%xmm3, %xmm0
    000005a7: 	movups	%xmm0, 0x30(%rbp)
    000005ab: 	movq	%rax, %xmm0
    000005b0: 	punpcklqdq	%xmm4, %xmm0
    000005b4: 	movups	%xmm0, 0x40(%rbp)
    000005b8: 	jmp	.Ltmp5945 # Offset: 1464
.Ltmp5925:
    000005bd: 	addq	$0x1, 0xa0(%rbp)
    000005c5: 	movq	%rax, 0xa8(%rbp)
    000005cc: 	cmpq	%r15, (%rsp)
    000005d0: 	jne	.Ltmp5926 # Offset: 1488
    000005d6: 	jmp	.Ltmp5919 # Offset: 1494
    000005db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5922:
    000005e0: 	movq	%rax, %rsi
    000005e3: 	notq	%rsi
    000005e6: 	shrq	$0x4, %rsi
    000005ea: 	notq	%rsi
    000005ed: 	movq	%rsi, %rdi
    000005f0: 	shlq	$0x4, %rdi
    000005f4: 	subq	%rdi, %rax
    000005f7: 	shlq	$0x5, %rax
    000005fb: 	addq	(%r13,%rsi,8), %rax
    00000600: 	movq	%rbx, 0x18(%rax)
    00000604: 	jmp	.Ltmp5937 # Offset: 1540
.Ltmp5928:
    00000609: 	addq	$0x8, %r13
    0000060d: 	cmpq	%r13, 0x8(%rsp)
    00000612: 	jne	.Ltmp5946 # Offset: 1554
    00000618: 	callq	clock@PLT # Offset: 1560
    0000061d: 	pxor	%xmm0, %xmm0
    00000621: 	movq	0x8(%rsp), %r13
    00000626: 	movq	0x48(%rsp), %r12
    0000062b: 	movq	%rax, end_time(%rip)
    00000632: 	subq	start_time(%rip), %rax
    00000639: 	cvtsi2sd	%rax, %xmm0
    0000063e: 	divsd	DATAat0x53788(%rip), %xmm0
    00000646: 	addsd	0x38(%rsp), %xmm0
    0000064c: 	movsd	%xmm0, 0x38(%rsp)
.Ltmp5954:
    00000652: 	movq	(%r12), %rbp
    00000656: 	testq	%rbp, %rbp
    00000659: 	je	.Ltmp5947 # Offset: 1625
    0000065f: 	movq	0x50(%rbp), %rdi
    00000663: 	testq	%rdi, %rdi
    00000666: 	je	.Ltmp5948 # Offset: 1638
    00000668: 	movq	0x98(%rbp), %rax
    0000066f: 	movq	0x78(%rbp), %rbx
    00000673: 	leaq	0x8(%rax), %r15
    00000677: 	cmpq	%rbx, %r15
    0000067a: 	jbe	.Ltmp5949 # Offset: 1658
    0000067c: 	nopl	(%rax) # Size: 4
.Ltmp5950:
    00000680: 	movq	(%rbx), %rdi
    00000683: 	movl	$0x200, %esi
    00000688: 	addq	$0x8, %rbx
    0000068c: 	callq	_ZdlPvm@PLT # Offset: 1676
    00000691: 	cmpq	%rbx, %r15
    00000694: 	ja	.Ltmp5950 # Offset: 1684
    00000696: 	movq	0x50(%rbp), %rdi
.Ltmp5949:
    0000069a: 	movq	0x58(%rbp), %rax
    0000069e: 	leaq	(,%rax,8), %rsi
    000006a6: 	callq	_ZdlPvm@PLT # Offset: 1702
.Ltmp5948:
    000006ab: 	movq	(%rbp), %rdi
    000006af: 	testq	%rdi, %rdi
    000006b2: 	je	.Ltmp5951 # Offset: 1714
    000006b4: 	movq	0x48(%rbp), %rax
    000006b8: 	movq	0x28(%rbp), %rbx
    000006bc: 	leaq	0x8(%rax), %r15
    000006c0: 	cmpq	%rbx, %r15
    000006c3: 	jbe	.Ltmp5952 # Offset: 1731
    000006c5: 	nopl	(%rax) # Size: 3
.Ltmp5953:
    000006c8: 	movq	(%rbx), %rdi
    000006cb: 	movl	$0x200, %esi
    000006d0: 	addq	$0x8, %rbx
    000006d4: 	callq	_ZdlPvm@PLT # Offset: 1748
    000006d9: 	cmpq	%rbx, %r15
    000006dc: 	ja	.Ltmp5953 # Offset: 1756
    000006de: 	movq	(%rbp), %rdi
.Ltmp5952:
    000006e2: 	movq	0x8(%rbp), %rax
    000006e6: 	leaq	(,%rax,8), %rsi
    000006ee: 	callq	_ZdlPvm@PLT # Offset: 1774
.Ltmp5951:
    000006f3: 	movl	$0xb8, %esi
    000006f8: 	movq	%rbp, %rdi
    000006fb: 	callq	_ZdlPvm@PLT # Offset: 1787
.Ltmp5947:
    00000700: 	movq	$0x0, (%r12)
    00000708: 	addq	$0x8, %r12
    0000070c: 	cmpq	%r12, %r13
    0000070f: 	jne	.Ltmp5954 # Offset: 1807
    00000715: 	movl	0x10(%rsp), %ecx
    00000719: 	movl	iterations(%rip), %eax
    0000071f: 	addl	%ecx, 0x40(%rsp)
    00000723: 	movl	0x40(%rsp), %ecx
    00000727: 	cmpl	%ecx, %eax
    00000729: 	jg	.Ltmp5955 # Offset: 1833
.Ltmp5967:
    0000072f: 	movq	0x50(%rsp), %rdi
    00000734: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1844
    00000739: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000740: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000747: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000074e: 	je	.Ltmp5956 # Offset: 1870
.Ltmp5966:
    00000754: 	movq	-0x20(%rax), %rdi
    00000758: 	movsd	0x38(%rsp), %xmm0
    0000075e: 	callq	_Z13record_resultdPKc # Offset: 1886
    00000763: 	cmpq	$0x0, 0x30(%rsp)
    00000769: 	je	.Ltmp5957 # Offset: 1897
    0000076f: 	movq	0xa8(%rsp), %rax
    00000777: 	subq	%fs:0x28, %rax
    00000780: 	jne	.Ltmp5958 # Offset: 1920
    00000786: 	movq	0xa0(%rsp), %rsi
    0000078e: 	movq	0x30(%rsp), %rdi
    00000793: 	addq	$0xb8, %rsp
    0000079a: 	popq	%rbx
    0000079b: 	popq	%rbp
    0000079c: 	subq	%rdi, %rsi
    0000079f: 	popq	%r12
    000007a1: 	popq	%r13
    000007a3: 	popq	%r14
    000007a5: 	popq	%r15
    000007a7: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1959
    000007ac: 	nopl	(%rax) # Size: 4
.Ltmp5939:
    000007b0: 	movq	0x28(%rsp), %rdi
    000007b5: 	movl	$0x80, %esi
    000007ba: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1978
    000007bf: 	movq	0x30(%rbp), %rdi
    000007c3: 	jmp	.Ltmp5959 # Offset: 1987
    000007c5: 	nopl	(%rax) # Size: 3
.Ltmp5961:
    000007c8: 	movq	%rbx, (%rdi)
    000007cb: 	addq	$0x8, %rdi
    000007cf: 	movq	%rdi, 0x30(%rbp)
    000007d3: 	cmpq	%rbx, %r12
    000007d6: 	je	.Ltmp5960 # Offset: 2006
.Ltmp5959:
    000007d8: 	movq	0x40(%rbp), %rax
    000007dc: 	subq	$0x1, %rbx
    000007e0: 	movq	%rbx, 0x88(%rsp)
    000007e8: 	subq	$0x8, %rax
    000007ec: 	cmpq	%rax, %rdi
    000007ef: 	jne	.Ltmp5961 # Offset: 2031
    000007f1: 	movq	%r14, %rsi
    000007f4: 	movq	%rbp, %rdi
    000007f7: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2039
    000007fc: 	movq	0x30(%rbp), %rdi
    00000800: 	cmpq	%rbx, %r12
    00000803: 	jne	.Ltmp5959 # Offset: 2051
.Ltmp5960:
    00000805: 	movq	0x38(%rbp), %r8
    00000809: 	movq	0x48(%rbp), %rsi
    0000080d: 	jmp	.Ltmp5962 # Offset: 2061
.Ltmp5916:
    00000812: 	movq	$0x3e8, 0x10(%rsp)
.Ltmp5917:
    0000081b: 	movq	$0x0, 0xa0(%rsp)
    00000827: 	pxor	%xmm0, %xmm0
    0000082b: 	movaps	%xmm0, 0x90(%rsp)
    00000833: 	jmp	.Ltmp5963 # Offset: 2099
.Ltmp5931:
    00000838: 	movq	$0x0, 0xb0(%rbx)
    00000843: 	jmp	.Ltmp5930 # Offset: 2115
.Ltmp5941:
    00000848: 	shlq	$0x5, %rbx
    0000084c: 	addq	%rbx, %rdx
    0000084f: 	jmp	.Ltmp5964 # Offset: 2127
.Ltmp5940:
    00000854: 	movq	%r10, %rdx
    00000857: 	notq	%rdx
    0000085a: 	shrq	$0x4, %rdx
    0000085e: 	notq	%rdx
    00000861: 	jmp	.Ltmp5965 # Offset: 2145
.Ltmp5957:
    00000866: 	movq	0xa8(%rsp), %rax
    0000086e: 	subq	%fs:0x28, %rax
    00000877: 	jne	.Ltmp5958 # Offset: 2167
    00000879: 	addq	$0xb8, %rsp
    00000880: 	popq	%rbx
    00000881: 	popq	%rbp
    00000882: 	popq	%r12
    00000884: 	popq	%r13
    00000886: 	popq	%r14
    00000888: 	popq	%r15
    0000088a: 	retq # Offset: 2186
.Ltmp5956:
    0000088b: 	movq	-0x8(%rdx), %rax
    0000088f: 	addq	$0x200, %rax
    00000895: 	jmp	.Ltmp5966 # Offset: 2197
.Ltmp5918:
    0000089a: 	pxor	%xmm7, %xmm7
    0000089e: 	movsd	%xmm7, 0x38(%rsp)
    000008a4: 	jmp	.Ltmp5967 # Offset: 2212
.Ltmp5958:
    000008a9: 	callq	__stack_chk_fail@PLT # Offset: 2217
    000008ae: 	endbr64
    000008b2: 	movq	%rax, %rbx
    000008b5: 	jmp	.Ltmp5968 # Offset: 2229
    000008b7: 	endbr64
    000008bb: 	movq	%rax, %rbx
    000008be: 	jmp	.Ltmp5969 # Offset: 2238
.Ltmp5972:
    000008c0: 	callq	__cxa_end_catch@PLT # Offset: 2240
.Ltmp5969:
    000008c5: 	movq	%rbp, %rdi
    000008c8: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2248
.Ltmp5968:
    000008cd: 	movq	%rbp, %rdi
    000008d0: 	movl	$0xb8, %esi
    000008d5: 	movq	%rbx, %rbp
    000008d8: 	callq	_ZdlPvm@PLT # Offset: 2264
.Ltmp5971:
    000008dd: 	movq	0x90(%rsp), %rdi
    000008e5: 	movq	0xa0(%rsp), %rsi
    000008ed: 	subq	%rdi, %rsi
    000008f0: 	testq	%rdi, %rdi
    000008f3: 	je	.Ltmp5970 # Offset: 2291
    000008f5: 	callq	_ZdlPvm@PLT # Offset: 2293
.Ltmp5970:
    000008fa: 	movq	%rbp, %rdi
    000008fd: 	callq	_Unwind_Resume@PLT # Offset: 2301
    00000902: 	endbr64
    00000906: 	movq	%rax, %rbp
    00000909: 	jmp	.Ltmp5971 # Offset: 2313
    0000090b: 	endbr64
    0000090f: 	movq	%rax, %rdi
    00000912: 	callq	__cxa_begin_catch@PLT # Offset: 2322
    00000917: 	callq	__cxa_rethrow@PLT # Offset: 2327
    0000091c: 	endbr64
    00000920: 	movq	%rax, %r12
    00000923: 	callq	__cxa_end_catch@PLT # Offset: 2339
    00000928: 	movq	%r12, %rdi
    0000092b: 	callq	__cxa_begin_catch@PLT # Offset: 2347
    00000930: 	movq	0x58(%rbp), %rax
    00000934: 	movq	0x50(%rbp), %rdi
    00000938: 	leaq	(,%rax,8), %rsi
    00000940: 	callq	_ZdlPvm@PLT # Offset: 2368
    00000945: 	movq	$0x0, 0x50(%rbp)
    0000094d: 	movq	$0x0, 0x58(%rbp)
    00000955: 	callq	__cxa_rethrow@PLT # Offset: 2389
    0000095a: 	endbr64
    0000095e: 	movq	%rax, %rbx
    00000961: 	jmp	.Ltmp5972 # Offset: 2401
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_eraseall_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_accumId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 324
  State       : disassembled
  Address     : 0x3e6f0
  Size        : 0x62b
  MaxSize     : 0x630
  Offset      : 0x3e6f0
  Section     : .text
  Orc Section : .local.text._Z10test_accumId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0323:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	movl	$0xb8, %edi
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x20(%rsp)
    00000022: 	callq	_Znwm@PLT # Offset: 34
    00000027: 	movq	%rax, %rdi
    0000002a: 	movq	%rax, %rbp
    0000002d: 	callq	_ZN27DoubleLinkListPoolAllocatorIdEC2Ev # Offset: 45
    00000032: 	movq	%r12, %r13
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	leaq	0x50(%rbp), %rax
    0000003d: 	movq	$0x0, 0xa0(%rbp)
    00000048: 	subq	%rbx, %r13
    0000004b: 	movq	%rax, 0x18(%rsp)
    00000050: 	movups	%xmm0, 0xa8(%rbp)
    00000057: 	testq	%r13, %r13
    0000005a: 	jle	.Ltmp5973 # Offset: 90
    00000060: 	sarq	$0x3, %r13
    00000064: 	movq	%rbx, 0x10(%rsp)
    00000069: 	movq	%r13, 0x8(%rsp)
    0000006e: 	movq	%r12, 0x28(%rsp)
.Ltmp5980:
    00000073: 	movq	0x48(%rbp), %r15
    00000077: 	movq	0x30(%rbp), %r13
    0000007b: 	movq	0x38(%rbp), %rbx
    0000007f: 	movq	%r15, %rax
    00000082: 	subq	0x28(%rbp), %rax
    00000086: 	movq	%r13, %rcx
    00000089: 	sarq	$0x3, %rax
    0000008d: 	cmpq	$0x1, %r15
    00000091: 	adcq	$-0x1, %rax
    00000095: 	subq	%rbx, %rcx
    00000098: 	sarq	$0x3, %rcx
    0000009c: 	shlq	$0x6, %rax
    000000a0: 	addq	%rcx, %rax
    000000a3: 	movq	0x20(%rbp), %rcx
    000000a7: 	subq	0x10(%rbp), %rcx
    000000ab: 	sarq	$0x3, %rcx
    000000af: 	addq	%rcx, %rax
    000000b2: 	je	.Ltmp5974 # Offset: 178
.Ltmp5995:
    000000b8: 	cmpq	%rbx, %r13
    000000bb: 	je	.Ltmp5975 # Offset: 187
.Ltmp5987:
    000000c1: 	movq	-0x8(%r13), %r14
    000000c5: 	subq	$0x8, %r13
    000000c9: 	movq	%r13, 0x30(%rbp)
.Ltmp5988:
    000000cd: 	movq	0x60(%rbp), %rdx
    000000d1: 	movq	0x78(%rbp), %rcx
    000000d5: 	movq	%rdx, %rax
    000000d8: 	subq	0x68(%rbp), %rax
    000000dc: 	sarq	$0x5, %rax
    000000e0: 	addq	%r14, %rax
    000000e3: 	js	.Ltmp5976 # Offset: 227
    000000e9: 	cmpq	$0xf, %rax
    000000ed: 	jle	.Ltmp5977 # Offset: 237
    000000f3: 	movq	%rax, %rdx
    000000f6: 	andl	$0xf, %eax
    000000f9: 	sarq	$0x4, %rdx
    000000fd: 	shlq	$0x5, %rax
    00000101: 	addq	(%rcx,%rdx,8), %rax
    00000105: 	movq	%r14, 0x18(%rax)
.Ltmp5989:
    00000109: 	movq	0xb0(%rbp), %rdx
    00000110: 	movq	$0x0, (%rax)
    00000117: 	movq	$0x0, 0x8(%rax)
    0000011f: 	movq	%rdx, 0x10(%rax)
    00000123: 	testq	%rdx, %rdx
    00000126: 	je	.Ltmp5978 # Offset: 294
    00000128: 	movq	%rax, 0x8(%rdx)
.Ltmp5978:
    0000012c: 	movq	0xa8(%rbp), %rdx
    00000133: 	movq	%rax, 0xb0(%rbp)
    0000013a: 	testq	%rdx, %rdx
    0000013d: 	je	.Ltmp5979 # Offset: 317
    00000143: 	addq	$0x1, 0xa0(%rbp)
    0000014b: 	subq	$0x1, 0x8(%rsp)
    00000151: 	jne	.Ltmp5980 # Offset: 337
    00000157: 	movq	0x10(%rsp), %rbx
    0000015c: 	movq	0x28(%rsp), %r12
    00000161: 	movq	%rdx, %r15
    00000164: 	jmp	.Ltmp5981 # Offset: 356
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp5974:
    00000170: 	movq	0x98(%rbp), %rsi
    00000177: 	movq	0x78(%rbp), %rax
    0000017b: 	movq	0x70(%rbp), %rdi
    0000017f: 	movq	0x80(%rbp), %r10
    00000186: 	movq	%rsi, %rcx
    00000189: 	movq	0x60(%rbp), %r9
    0000018d: 	subq	%rax, %rcx
    00000190: 	sarq	$0x3, %rcx
    00000194: 	cmpq	$0x1, %rsi
    00000198: 	adcq	$-0x1, %rcx
    0000019c: 	subq	0x88(%rbp), %r10
    000001a3: 	sarq	$0x5, %r10
    000001a7: 	shlq	$0x4, %rcx
    000001ab: 	addq	%r10, %rcx
    000001ae: 	movq	%rdi, %r10
    000001b1: 	subq	%r9, %r10
    000001b4: 	sarq	$0x5, %r10
    000001b8: 	leaq	(%rcx,%r10), %r12
    000001bc: 	leaq	0x80(%r12), %r14
    000001c4: 	cmpq	%r14, %r12
    000001c7: 	jb	.Ltmp5982 # Offset: 455
    000001cd: 	movq	0x68(%rbp), %r10
    000001d1: 	movq	%r9, %rcx
    000001d4: 	subq	%r10, %rcx
    000001d7: 	sarq	$0x5, %rcx
    000001db: 	addq	%r14, %rcx
    000001de: 	js	.Ltmp5983 # Offset: 478
    000001e4: 	cmpq	$0xf, %rcx
    000001e8: 	jle	.Ltmp5984 # Offset: 488
    000001ee: 	movq	%rcx, %r9
    000001f1: 	sarq	$0x4, %r9
.Ltmp6008:
    000001f5: 	leaq	(%rax,%r9,8), %rax
    000001f9: 	shlq	$0x4, %r9
    000001fd: 	movq	(%rax), %r10
    00000200: 	subq	%r9, %rcx
    00000203: 	shlq	$0x5, %rcx
    00000207: 	leaq	0x200(%r10), %rdi
    0000020e: 	addq	%r10, %rcx
.Ltmp6007:
    00000211: 	movq	%r10, %xmm7
    00000216: 	movq	%rcx, %xmm5
    0000021b: 	movq	%rdi, %xmm6
    00000220: 	punpcklqdq	%xmm7, %xmm5
    00000224: 	movq	%rax, %xmm7
    00000229: 	leaq	0x8(%rsi), %r12
    0000022d: 	punpcklqdq	%xmm7, %xmm6
    00000231: 	leaq	0x8(%rax), %r14
    00000235: 	movaps	%xmm5, 0x30(%rsp)
    0000023a: 	movaps	%xmm6, 0x40(%rsp)
    0000023f: 	cmpq	%r14, %r12
    00000242: 	jbe	.Ltmp5985 # Offset: 578
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp5986:
    00000248: 	movq	(%r14), %rdi
    0000024b: 	movl	$0x200, %esi
    00000250: 	addq	$0x8, %r14
    00000254: 	callq	_ZdlPvm@PLT # Offset: 596
    00000259: 	cmpq	%r14, %r12
    0000025c: 	ja	.Ltmp5986 # Offset: 604
.Ltmp5985:
    0000025e: 	movdqa	0x30(%rsp), %xmm7
    00000264: 	movdqa	0x40(%rsp), %xmm5
    0000026a: 	movups	%xmm7, 0x80(%rbp)
    00000271: 	movups	%xmm5, 0x90(%rbp)
    00000278: 	cmpq	%rbx, %r13
    0000027b: 	jne	.Ltmp5987 # Offset: 635
.Ltmp5975:
    00000281: 	movq	-0x8(%r15), %rax
    00000285: 	movl	$0x200, %esi
    0000028a: 	movq	%r13, %rdi
    0000028d: 	movq	0x1f8(%rax), %r14
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
    00000299: 	movq	-0x8(%r15), %rax
    0000029d: 	leaq	-0x8(%r15), %rdx
    000002a1: 	movq	%rdx, %xmm4
    000002a6: 	addq	$0x1f8, %rax
    000002ac: 	movq	%rax, %xmm0
    000002b1: 	movq	-0x8(%r15), %rax
    000002b5: 	movhps	-0x8(%r15), %xmm0
    000002ba: 	addq	$0x200, %rax
    000002c0: 	movups	%xmm0, 0x30(%rbp)
    000002c4: 	movq	%rax, %xmm0
    000002c9: 	punpcklqdq	%xmm4, %xmm0
    000002cd: 	movups	%xmm0, 0x40(%rbp)
    000002d1: 	jmp	.Ltmp5988 # Offset: 721
.Ltmp5977:
    000002d6: 	movq	%r14, %rax
    000002d9: 	shlq	$0x5, %rax
    000002dd: 	addq	%rdx, %rax
    000002e0: 	movq	%r14, 0x18(%rax)
    000002e4: 	jmp	.Ltmp5989 # Offset: 740
.Ltmp5982:
    000002e9: 	movq	0x18(%rsp), %rdi
    000002ee: 	movl	$0x80, %esi
    000002f3: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 755
    000002f8: 	movq	0x30(%rbp), %r13
    000002fc: 	movq	0x40(%rbp), %rsi
    00000300: 	movq	0x48(%rbp), %r15
    00000304: 	movq	0x38(%rbp), %rbx
    00000308: 	movq	%r13, %rax
    0000030b: 	jmp	.Ltmp5990 # Offset: 779
    0000030d: 	nopl	(%rax) # Size: 3
.Ltmp5992:
    00000310: 	movq	%r14, (%rax)
    00000313: 	addq	$0x8, %rax
    00000317: 	movq	%rax, 0x30(%rbp)
    0000031b: 	cmpq	%r14, %r12
    0000031e: 	je	.Ltmp5991 # Offset: 798
.Ltmp5990:
    00000324: 	leaq	-0x8(%rsi), %rdx
    00000328: 	subq	$0x1, %r14
    0000032c: 	cmpq	%rdx, %rax
    0000032f: 	jne	.Ltmp5992 # Offset: 815
    00000331: 	movabsq	$0xfffffffffffffff, %rdi
    0000033b: 	movq	%r15, %rdx
    0000033e: 	subq	0x28(%rbp), %rdx
    00000342: 	sarq	$0x3, %rdx
    00000346: 	cmpq	$0x1, %r15
    0000034a: 	adcq	$-0x1, %rdx
    0000034e: 	subq	%rbx, %rax
    00000351: 	shlq	$0x6, %rdx
    00000355: 	sarq	$0x3, %rax
    00000359: 	addq	%rdx, %rax
    0000035c: 	movq	0x20(%rbp), %rdx
    00000360: 	subq	0x10(%rbp), %rdx
    00000364: 	sarq	$0x3, %rdx
    00000368: 	addq	%rdx, %rax
    0000036b: 	cmpq	%rdi, %rax
    0000036e: 	je	.Ltmp5993 # Offset: 878
    00000374: 	movq	0x8(%rbp), %rax
    00000378: 	movq	%r15, %rdx
    0000037b: 	subq	(%rbp), %rdx
    0000037f: 	sarq	$0x3, %rdx
    00000383: 	subq	%rdx, %rax
    00000386: 	cmpq	$0x1, %rax
    0000038a: 	jbe	.Ltmp5994 # Offset: 906
.Ltmp5996:
    0000038c: 	movl	$0x200, %edi
    00000391: 	addq	$0x8, %r15
    00000395: 	callq	_Znwm@PLT # Offset: 917
    0000039a: 	movq	0x30(%rbp), %rdx
    0000039e: 	leaq	0x200(%rax), %rsi
    000003a5: 	movq	%rax, %xmm0
    000003aa: 	movq	%rax, (%r15)
    000003ad: 	movq	%rax, %rbx
    000003b0: 	movq	%rsi, %xmm3
    000003b5: 	movq	%r14, (%rdx)
    000003b8: 	punpcklqdq	%xmm3, %xmm0
    000003bc: 	movq	%r15, 0x48(%rbp)
    000003c0: 	movq	%rax, 0x30(%rbp)
    000003c4: 	movups	%xmm0, 0x38(%rbp)
    000003c8: 	cmpq	%r14, %r12
    000003cb: 	jne	.Ltmp5990 # Offset: 971
.Ltmp5991:
    000003d1: 	movq	%rax, %r13
    000003d4: 	jmp	.Ltmp5995 # Offset: 980
    000003d9: 	nopl	(%rax) # Size: 7
.Ltmp5994:
    000003e0: 	xorl	%edx, %edx
    000003e2: 	movl	$0x1, %esi
    000003e7: 	movq	%rbp, %rdi
    000003ea: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 1002
    000003ef: 	movq	0x48(%rbp), %r15
    000003f3: 	jmp	.Ltmp5996 # Offset: 1011
.Ltmp5979:
    000003f5: 	addq	$0x1, 0xa0(%rbp)
    000003fd: 	subq	$0x1, 0x8(%rsp)
    00000403: 	movq	%rax, 0xa8(%rbp)
    0000040a: 	jne	.Ltmp5980 # Offset: 1034
    00000410: 	movq	0x10(%rsp), %rbx
    00000415: 	movq	0x28(%rsp), %r12
    0000041a: 	movq	%rax, %r15
    0000041d: 	jmp	.Ltmp5981 # Offset: 1053
.Ltmp5973:
    0000041f: 	xorl	%r15d, %r15d
.Ltmp5981:
    00000422: 	cmpq	%rbx, %r12
    00000425: 	je	.Ltmp5997 # Offset: 1061
    0000042b: 	pxor	%xmm2, %xmm2
    0000042f: 	movq	%r15, %rax
    00000432: 	movapd	%xmm2, %xmm1
    00000436: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5998:
    00000440: 	movsd	(%rbx), %xmm0
    00000444: 	movq	%rax, %rdx
    00000447: 	addq	$0x8, %rbx
    0000044b: 	movq	0x8(%rax), %rax
    0000044f: 	addsd	%xmm0, %xmm1
    00000453: 	movsd	%xmm0, (%rdx)
    00000457: 	cmpq	%rbx, %r12
    0000045a: 	jne	.Ltmp5998 # Offset: 1114
.Ltmp6006:
    0000045c: 	movsd	%xmm2, 0x10(%rsp)
    00000462: 	xorl	%ebx, %ebx
    00000464: 	leaq	DATAat0x52360(%rip), %r12
    0000046b: 	movsd	%xmm1, 0x8(%rsp)
    00000471: 	callq	clock@PLT # Offset: 1137
    00000476: 	movl	iterations(%rip), %ecx
    0000047c: 	movsd	0x8(%rsp), %xmm1
    00000482: 	movq	%rax, start_time(%rip)
    00000489: 	movsd	0x10(%rsp), %xmm2
    0000048f: 	testl	%ecx, %ecx
    00000491: 	jle	.Ltmp5999 # Offset: 1169
    00000493: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6003:
    00000498: 	movq	%r15, %rax
    0000049b: 	movapd	%xmm2, %xmm0
    0000049f: 	testq	%r15, %r15
    000004a2: 	je	.Ltmp6000 # Offset: 1186
    000004a4: 	nopl	(%rax) # Size: 4
.Ltmp6001:
    000004a8: 	movq	%rax, %rdx
    000004ab: 	movq	0x8(%rax), %rax
    000004af: 	addsd	(%rdx), %xmm0
    000004b3: 	testq	%rax, %rax
    000004b6: 	jne	.Ltmp6001 # Offset: 1206
.Ltmp6000:
    000004b8: 	ucomisd	%xmm1, %xmm0
    000004bc: 	jp	.Ltmp6002 # Offset: 1212
    000004c2: 	jne	.Ltmp6002 # Offset: 1218
    000004c8: 	addl	$0x1, %ebx
    000004cb: 	cmpl	%ecx, %ebx
    000004cd: 	jl	.Ltmp6003 # Offset: 1229
.Ltmp5999:
    000004cf: 	movq	0x20(%rsp), %rdi
    000004d4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1236
    000004d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004e0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004e7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004ee: 	je	.Ltmp6004 # Offset: 1262
.Ltmp6005:
    000004f4: 	movq	-0x20(%rax), %r12
    000004f8: 	callq	clock@PLT # Offset: 1272
    000004fd: 	pxor	%xmm0, %xmm0
    00000501: 	movq	%r12, %rdi
    00000504: 	movq	%rax, end_time(%rip)
    0000050b: 	subq	start_time(%rip), %rax
    00000512: 	cvtsi2sd	%rax, %xmm0
    00000517: 	divsd	DATAat0x53788(%rip), %xmm0
    0000051f: 	callq	_Z13record_resultdPKc # Offset: 1311
    00000524: 	movq	0x18(%rsp), %rdi
    00000529: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 1321
    0000052e: 	movq	%rbp, %rdi
    00000531: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 1329
    00000536: 	addq	$0x58, %rsp
    0000053a: 	movq	%rbp, %rdi
    0000053d: 	movl	$0xb8, %esi
    00000542: 	popq	%rbx
    00000543: 	popq	%rbp
    00000544: 	popq	%r12
    00000546: 	popq	%r13
    00000548: 	popq	%r14
    0000054a: 	popq	%r15
    0000054c: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1356
    00000551: 	nopl	(%rax) # Size: 7
.Ltmp6002:
    00000558: 	movl	current_test(%rip), %edx
    0000055e: 	xorl	%eax, %eax
    00000560: 	movq	%r12, %rsi
    00000563: 	movl	$0x1, %edi
    00000568: 	movsd	%xmm2, 0x10(%rsp)
    0000056e: 	addl	$0x1, %ebx
    00000571: 	movsd	%xmm1, 0x8(%rsp)
    00000577: 	callq	__printf_chk@PLT # Offset: 1399
    0000057c: 	movl	iterations(%rip), %ecx
    00000582: 	movsd	0x8(%rsp), %xmm1
    00000588: 	movsd	0x10(%rsp), %xmm2
    0000058e: 	cmpl	%ecx, %ebx
    00000590: 	jl	.Ltmp6003 # Offset: 1424
    00000596: 	jmp	.Ltmp5999 # Offset: 1430
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5976:
    000005a0: 	movq	%rax, %rdx
    000005a3: 	notq	%rdx
    000005a6: 	shrq	$0x4, %rdx
    000005aa: 	notq	%rdx
    000005ad: 	movq	%rdx, %rsi
    000005b0: 	shlq	$0x4, %rsi
    000005b4: 	subq	%rsi, %rax
    000005b7: 	shlq	$0x5, %rax
    000005bb: 	addq	(%rcx,%rdx,8), %rax
    000005bf: 	movq	%r14, 0x18(%rax)
    000005c3: 	jmp	.Ltmp5989 # Offset: 1475
.Ltmp6004:
    000005c8: 	movq	-0x8(%rdx), %rax
    000005cc: 	addq	$0x200, %rax
    000005d2: 	jmp	.Ltmp6005 # Offset: 1490
.Ltmp5997:
    000005d7: 	pxor	%xmm2, %xmm2
    000005db: 	movapd	%xmm2, %xmm1
    000005df: 	jmp	.Ltmp6006 # Offset: 1503
.Ltmp5984:
    000005e4: 	shlq	$0x5, %r14
    000005e8: 	leaq	(%r9,%r14), %rcx
    000005ec: 	jmp	.Ltmp6007 # Offset: 1516
.Ltmp5983:
    000005f1: 	movq	%rcx, %r9
    000005f4: 	notq	%r9
    000005f7: 	shrq	$0x4, %r9
    000005fb: 	notq	%r9
    000005fe: 	jmp	.Ltmp6008 # Offset: 1534
.Ltmp5993:
    00000603: 	leaq	DATAat0x52330(%rip), %rdi
    0000060a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1546
    0000060f: 	endbr64
    00000613: 	movq	%rax, %r12
    00000616: 	movq	%rbp, %rdi
    00000619: 	movl	$0xb8, %esi
    0000061e: 	callq	_ZdlPvm@PLT # Offset: 1566
    00000623: 	movq	%r12, %rdi
    00000626: 	callq	_Unwind_Resume@PLT # Offset: 1574
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_accumId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_accum_reverseId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 325
  State       : disassembled
  Address     : 0x3ed20
  Size        : 0x61e
  MaxSize     : 0x620
  Offset      : 0x3ed20
  Section     : .text
  Orc Section : .local.text._Z18test_accum_reverseId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0324:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	movl	$0xb8, %edi
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x20(%rsp)
    00000022: 	callq	_Znwm@PLT # Offset: 34
    00000027: 	movq	%rax, %rdi
    0000002a: 	movq	%rax, %rbp
    0000002d: 	callq	_ZN27DoubleLinkListPoolAllocatorIdEC2Ev # Offset: 45
    00000032: 	movq	%r12, %r13
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	leaq	0x50(%rbp), %rax
    0000003d: 	movq	$0x0, 0xa0(%rbp)
    00000048: 	subq	%rbx, %r13
    0000004b: 	movq	%rax, 0x18(%rsp)
    00000050: 	movups	%xmm0, 0xa8(%rbp)
    00000057: 	testq	%r13, %r13
    0000005a: 	jle	.Ltmp6009 # Offset: 90
    00000060: 	sarq	$0x3, %r13
    00000064: 	movq	%rbx, 0x10(%rsp)
    00000069: 	movq	%r13, 0x8(%rsp)
    0000006e: 	movq	%r12, 0x28(%rsp)
.Ltmp6016:
    00000073: 	movq	0x48(%rbp), %r15
    00000077: 	movq	0x30(%rbp), %r13
    0000007b: 	movq	0x38(%rbp), %rbx
    0000007f: 	movq	%r15, %rax
    00000082: 	subq	0x28(%rbp), %rax
    00000086: 	movq	%r13, %rcx
    00000089: 	sarq	$0x3, %rax
    0000008d: 	cmpq	$0x1, %r15
    00000091: 	adcq	$-0x1, %rax
    00000095: 	subq	%rbx, %rcx
    00000098: 	sarq	$0x3, %rcx
    0000009c: 	shlq	$0x6, %rax
    000000a0: 	addq	%rcx, %rax
    000000a3: 	movq	0x20(%rbp), %rcx
    000000a7: 	subq	0x10(%rbp), %rcx
    000000ab: 	sarq	$0x3, %rcx
    000000af: 	addq	%rcx, %rax
    000000b2: 	je	.Ltmp6010 # Offset: 178
.Ltmp6031:
    000000b8: 	cmpq	%rbx, %r13
    000000bb: 	je	.Ltmp6011 # Offset: 187
.Ltmp6023:
    000000c1: 	movq	-0x8(%r13), %r14
    000000c5: 	subq	$0x8, %r13
    000000c9: 	movq	%r13, 0x30(%rbp)
.Ltmp6024:
    000000cd: 	movq	0x60(%rbp), %rdx
    000000d1: 	movq	0x78(%rbp), %rcx
    000000d5: 	movq	%rdx, %rax
    000000d8: 	subq	0x68(%rbp), %rax
    000000dc: 	sarq	$0x5, %rax
    000000e0: 	addq	%r14, %rax
    000000e3: 	js	.Ltmp6012 # Offset: 227
    000000e9: 	cmpq	$0xf, %rax
    000000ed: 	jle	.Ltmp6013 # Offset: 237
    000000f3: 	movq	%rax, %rdx
    000000f6: 	andl	$0xf, %eax
    000000f9: 	sarq	$0x4, %rdx
    000000fd: 	shlq	$0x5, %rax
    00000101: 	addq	(%rcx,%rdx,8), %rax
    00000105: 	movq	%r14, 0x18(%rax)
.Ltmp6025:
    00000109: 	movq	0xb0(%rbp), %rdx
    00000110: 	movq	$0x0, (%rax)
    00000117: 	movq	$0x0, 0x8(%rax)
    0000011f: 	movq	%rdx, 0x10(%rax)
    00000123: 	testq	%rdx, %rdx
    00000126: 	je	.Ltmp6014 # Offset: 294
    00000128: 	movq	%rax, 0x8(%rdx)
.Ltmp6014:
    0000012c: 	movq	0xa8(%rbp), %rdx
    00000133: 	movq	%rax, 0xb0(%rbp)
    0000013a: 	testq	%rdx, %rdx
    0000013d: 	je	.Ltmp6015 # Offset: 317
    00000143: 	addq	$0x1, 0xa0(%rbp)
    0000014b: 	subq	$0x1, 0x8(%rsp)
    00000151: 	jne	.Ltmp6016 # Offset: 337
    00000157: 	movq	0x10(%rsp), %rbx
    0000015c: 	movq	0x28(%rsp), %r12
    00000161: 	jmp	.Ltmp6017 # Offset: 353
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp6010:
    00000170: 	movq	0x98(%rbp), %rsi
    00000177: 	movq	0x78(%rbp), %rax
    0000017b: 	movq	0x70(%rbp), %rdi
    0000017f: 	movq	0x80(%rbp), %r10
    00000186: 	movq	%rsi, %rcx
    00000189: 	movq	0x60(%rbp), %r9
    0000018d: 	subq	%rax, %rcx
    00000190: 	sarq	$0x3, %rcx
    00000194: 	cmpq	$0x1, %rsi
    00000198: 	adcq	$-0x1, %rcx
    0000019c: 	subq	0x88(%rbp), %r10
    000001a3: 	sarq	$0x5, %r10
    000001a7: 	shlq	$0x4, %rcx
    000001ab: 	addq	%r10, %rcx
    000001ae: 	movq	%rdi, %r10
    000001b1: 	subq	%r9, %r10
    000001b4: 	sarq	$0x5, %r10
    000001b8: 	leaq	(%rcx,%r10), %r12
    000001bc: 	leaq	0x80(%r12), %r14
    000001c4: 	cmpq	%r14, %r12
    000001c7: 	jb	.Ltmp6018 # Offset: 455
    000001cd: 	movq	0x68(%rbp), %r10
    000001d1: 	movq	%r9, %rcx
    000001d4: 	subq	%r10, %rcx
    000001d7: 	sarq	$0x5, %rcx
    000001db: 	addq	%r14, %rcx
    000001de: 	js	.Ltmp6019 # Offset: 478
    000001e4: 	cmpq	$0xf, %rcx
    000001e8: 	jle	.Ltmp6020 # Offset: 488
    000001ee: 	movq	%rcx, %r9
    000001f1: 	sarq	$0x4, %r9
.Ltmp6045:
    000001f5: 	leaq	(%rax,%r9,8), %rax
    000001f9: 	shlq	$0x4, %r9
    000001fd: 	movq	(%rax), %r10
    00000200: 	subq	%r9, %rcx
    00000203: 	shlq	$0x5, %rcx
    00000207: 	leaq	0x200(%r10), %rdi
    0000020e: 	addq	%r10, %rcx
.Ltmp6044:
    00000211: 	movq	%r10, %xmm7
    00000216: 	movq	%rcx, %xmm5
    0000021b: 	movq	%rdi, %xmm6
    00000220: 	punpcklqdq	%xmm7, %xmm5
    00000224: 	movq	%rax, %xmm7
    00000229: 	leaq	0x8(%rsi), %r12
    0000022d: 	punpcklqdq	%xmm7, %xmm6
    00000231: 	leaq	0x8(%rax), %r14
    00000235: 	movaps	%xmm5, 0x30(%rsp)
    0000023a: 	movaps	%xmm6, 0x40(%rsp)
    0000023f: 	cmpq	%r14, %r12
    00000242: 	jbe	.Ltmp6021 # Offset: 578
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp6022:
    00000248: 	movq	(%r14), %rdi
    0000024b: 	movl	$0x200, %esi
    00000250: 	addq	$0x8, %r14
    00000254: 	callq	_ZdlPvm@PLT # Offset: 596
    00000259: 	cmpq	%r14, %r12
    0000025c: 	ja	.Ltmp6022 # Offset: 604
.Ltmp6021:
    0000025e: 	movdqa	0x30(%rsp), %xmm7
    00000264: 	movdqa	0x40(%rsp), %xmm5
    0000026a: 	movups	%xmm7, 0x80(%rbp)
    00000271: 	movups	%xmm5, 0x90(%rbp)
    00000278: 	cmpq	%rbx, %r13
    0000027b: 	jne	.Ltmp6023 # Offset: 635
.Ltmp6011:
    00000281: 	movq	-0x8(%r15), %rax
    00000285: 	movl	$0x200, %esi
    0000028a: 	movq	%r13, %rdi
    0000028d: 	movq	0x1f8(%rax), %r14
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
    00000299: 	movq	-0x8(%r15), %rax
    0000029d: 	leaq	-0x8(%r15), %rdx
    000002a1: 	movq	%rdx, %xmm4
    000002a6: 	addq	$0x1f8, %rax
    000002ac: 	movq	%rax, %xmm0
    000002b1: 	movq	-0x8(%r15), %rax
    000002b5: 	movhps	-0x8(%r15), %xmm0
    000002ba: 	addq	$0x200, %rax
    000002c0: 	movups	%xmm0, 0x30(%rbp)
    000002c4: 	movq	%rax, %xmm0
    000002c9: 	punpcklqdq	%xmm4, %xmm0
    000002cd: 	movups	%xmm0, 0x40(%rbp)
    000002d1: 	jmp	.Ltmp6024 # Offset: 721
.Ltmp6013:
    000002d6: 	movq	%r14, %rax
    000002d9: 	shlq	$0x5, %rax
    000002dd: 	addq	%rdx, %rax
    000002e0: 	movq	%r14, 0x18(%rax)
    000002e4: 	jmp	.Ltmp6025 # Offset: 740
.Ltmp6018:
    000002e9: 	movq	0x18(%rsp), %rdi
    000002ee: 	movl	$0x80, %esi
    000002f3: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 755
    000002f8: 	movq	0x30(%rbp), %r13
    000002fc: 	movq	0x40(%rbp), %rsi
    00000300: 	movq	0x48(%rbp), %r15
    00000304: 	movq	0x38(%rbp), %rbx
    00000308: 	movq	%r13, %rax
    0000030b: 	jmp	.Ltmp6026 # Offset: 779
    0000030d: 	nopl	(%rax) # Size: 3
.Ltmp6028:
    00000310: 	movq	%r14, (%rax)
    00000313: 	addq	$0x8, %rax
    00000317: 	movq	%rax, 0x30(%rbp)
    0000031b: 	cmpq	%r14, %r12
    0000031e: 	je	.Ltmp6027 # Offset: 798
.Ltmp6026:
    00000324: 	leaq	-0x8(%rsi), %rdx
    00000328: 	subq	$0x1, %r14
    0000032c: 	cmpq	%rdx, %rax
    0000032f: 	jne	.Ltmp6028 # Offset: 815
    00000331: 	movabsq	$0xfffffffffffffff, %rdi
    0000033b: 	movq	%r15, %rdx
    0000033e: 	subq	0x28(%rbp), %rdx
    00000342: 	sarq	$0x3, %rdx
    00000346: 	cmpq	$0x1, %r15
    0000034a: 	adcq	$-0x1, %rdx
    0000034e: 	subq	%rbx, %rax
    00000351: 	shlq	$0x6, %rdx
    00000355: 	sarq	$0x3, %rax
    00000359: 	addq	%rdx, %rax
    0000035c: 	movq	0x20(%rbp), %rdx
    00000360: 	subq	0x10(%rbp), %rdx
    00000364: 	sarq	$0x3, %rdx
    00000368: 	addq	%rdx, %rax
    0000036b: 	cmpq	%rdi, %rax
    0000036e: 	je	.Ltmp6029 # Offset: 878
    00000374: 	movq	0x8(%rbp), %rax
    00000378: 	movq	%r15, %rdx
    0000037b: 	subq	(%rbp), %rdx
    0000037f: 	sarq	$0x3, %rdx
    00000383: 	subq	%rdx, %rax
    00000386: 	cmpq	$0x1, %rax
    0000038a: 	jbe	.Ltmp6030 # Offset: 906
.Ltmp6032:
    0000038c: 	movl	$0x200, %edi
    00000391: 	addq	$0x8, %r15
    00000395: 	callq	_Znwm@PLT # Offset: 917
    0000039a: 	movq	0x30(%rbp), %rdx
    0000039e: 	leaq	0x200(%rax), %rsi
    000003a5: 	movq	%rax, %xmm0
    000003aa: 	movq	%rax, (%r15)
    000003ad: 	movq	%rax, %rbx
    000003b0: 	movq	%rsi, %xmm3
    000003b5: 	movq	%r14, (%rdx)
    000003b8: 	punpcklqdq	%xmm3, %xmm0
    000003bc: 	movq	%r15, 0x48(%rbp)
    000003c0: 	movq	%rax, 0x30(%rbp)
    000003c4: 	movups	%xmm0, 0x38(%rbp)
    000003c8: 	cmpq	%r14, %r12
    000003cb: 	jne	.Ltmp6026 # Offset: 971
.Ltmp6027:
    000003d1: 	movq	%rax, %r13
    000003d4: 	jmp	.Ltmp6031 # Offset: 980
    000003d9: 	nopl	(%rax) # Size: 7
.Ltmp6030:
    000003e0: 	xorl	%edx, %edx
    000003e2: 	movl	$0x1, %esi
    000003e7: 	movq	%rbp, %rdi
    000003ea: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 1002
    000003ef: 	movq	0x48(%rbp), %r15
    000003f3: 	jmp	.Ltmp6032 # Offset: 1011
.Ltmp6015:
    000003f5: 	addq	$0x1, 0xa0(%rbp)
    000003fd: 	subq	$0x1, 0x8(%rsp)
    00000403: 	movq	%rax, 0xa8(%rbp)
    0000040a: 	jne	.Ltmp6016 # Offset: 1034
    00000410: 	movq	0x10(%rsp), %rbx
    00000415: 	movq	0x28(%rsp), %r12
    0000041a: 	movq	%rax, %rdx
    0000041d: 	jmp	.Ltmp6017 # Offset: 1053
.Ltmp6009:
    0000041f: 	xorl	%edx, %edx
.Ltmp6017:
    00000421: 	pxor	%xmm2, %xmm2
    00000425: 	movapd	%xmm2, %xmm1
    00000429: 	cmpq	%rbx, %r12
    0000042c: 	je	.Ltmp6033 # Offset: 1068
    0000042e: 	nop # Size: 2
.Ltmp6034:
    00000430: 	movsd	(%rbx), %xmm0
    00000434: 	movq	%rdx, %rax
    00000437: 	addq	$0x8, %rbx
    0000043b: 	movq	0x8(%rdx), %rdx
    0000043f: 	addsd	%xmm0, %xmm1
    00000443: 	movsd	%xmm0, (%rax)
    00000447: 	cmpq	%rbx, %r12
    0000044a: 	jne	.Ltmp6034 # Offset: 1098
.Ltmp6033:
    0000044c: 	movsd	%xmm2, 0x10(%rsp)
    00000452: 	movsd	%xmm1, 0x8(%rsp)
    00000458: 	callq	clock@PLT # Offset: 1112
    0000045d: 	movl	iterations(%rip), %ecx
    00000463: 	movsd	0x8(%rsp), %xmm1
    00000469: 	movq	%rax, start_time(%rip)
    00000470: 	movsd	0x10(%rsp), %xmm2
    00000476: 	testl	%ecx, %ecx
    00000478: 	jle	.Ltmp6035 # Offset: 1144
    0000047a: 	movq	0xb0(%rbp), %r12
    00000481: 	xorl	%ebx, %ebx
    00000483: 	leaq	DATAat0x52360(%rip), %r13
    0000048a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6039:
    00000490: 	testq	%r12, %r12
    00000493: 	je	.Ltmp6036 # Offset: 1171
.Ltmp6041:
    00000499: 	movq	%r12, %rax
    0000049c: 	movapd	%xmm2, %xmm0
.Ltmp6037:
    000004a0: 	movq	%rax, %rdx
    000004a3: 	movq	0x10(%rax), %rax
    000004a7: 	addsd	(%rdx), %xmm0
    000004ab: 	testq	%rax, %rax
    000004ae: 	jne	.Ltmp6037 # Offset: 1198
.Ltmp6042:
    000004b0: 	ucomisd	%xmm1, %xmm0
    000004b4: 	jp	.Ltmp6038 # Offset: 1204
    000004ba: 	jne	.Ltmp6038 # Offset: 1210
    000004c0: 	addl	$0x1, %ebx
    000004c3: 	cmpl	%ecx, %ebx
    000004c5: 	jl	.Ltmp6039 # Offset: 1221
.Ltmp6035:
    000004c7: 	movq	0x20(%rsp), %rdi
    000004cc: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1228
    000004d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004d8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004df: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004e6: 	je	.Ltmp6040 # Offset: 1254
.Ltmp6043:
    000004ec: 	movq	-0x20(%rax), %r12
    000004f0: 	callq	clock@PLT # Offset: 1264
    000004f5: 	pxor	%xmm0, %xmm0
    000004f9: 	movq	%r12, %rdi
    000004fc: 	movq	%rax, end_time(%rip)
    00000503: 	subq	start_time(%rip), %rax
    0000050a: 	cvtsi2sd	%rax, %xmm0
    0000050f: 	divsd	DATAat0x53788(%rip), %xmm0
    00000517: 	callq	_Z13record_resultdPKc # Offset: 1303
    0000051c: 	movq	0x18(%rsp), %rdi
    00000521: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 1313
    00000526: 	movq	%rbp, %rdi
    00000529: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 1321
    0000052e: 	addq	$0x58, %rsp
    00000532: 	movq	%rbp, %rdi
    00000535: 	movl	$0xb8, %esi
    0000053a: 	popq	%rbx
    0000053b: 	popq	%rbp
    0000053c: 	popq	%r12
    0000053e: 	popq	%r13
    00000540: 	popq	%r14
    00000542: 	popq	%r15
    00000544: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1348
    00000549: 	nopl	(%rax) # Size: 7
.Ltmp6038:
    00000550: 	movl	current_test(%rip), %edx
    00000556: 	xorl	%eax, %eax
    00000558: 	movq	%r13, %rsi
    0000055b: 	movl	$0x1, %edi
    00000560: 	movsd	%xmm2, 0x10(%rsp)
    00000566: 	addl	$0x1, %ebx
    00000569: 	movsd	%xmm1, 0x8(%rsp)
    0000056f: 	callq	__printf_chk@PLT # Offset: 1391
    00000574: 	movl	iterations(%rip), %ecx
    0000057a: 	movsd	0x8(%rsp), %xmm1
    00000580: 	movsd	0x10(%rsp), %xmm2
    00000586: 	cmpl	%ecx, %ebx
    00000588: 	jge	.Ltmp6035 # Offset: 1416
    0000058e: 	testq	%r12, %r12
    00000591: 	jne	.Ltmp6041 # Offset: 1425
.Ltmp6036:
    00000597: 	movapd	%xmm2, %xmm0
    0000059b: 	jmp	.Ltmp6042 # Offset: 1435
.Ltmp6012:
    000005a0: 	movq	%rax, %rdx
    000005a3: 	notq	%rdx
    000005a6: 	shrq	$0x4, %rdx
    000005aa: 	notq	%rdx
    000005ad: 	movq	%rdx, %rsi
    000005b0: 	shlq	$0x4, %rsi
    000005b4: 	subq	%rsi, %rax
    000005b7: 	shlq	$0x5, %rax
    000005bb: 	addq	(%rcx,%rdx,8), %rax
    000005bf: 	movq	%r14, 0x18(%rax)
    000005c3: 	jmp	.Ltmp6025 # Offset: 1475
.Ltmp6040:
    000005c8: 	movq	-0x8(%rdx), %rax
    000005cc: 	addq	$0x200, %rax
    000005d2: 	jmp	.Ltmp6043 # Offset: 1490
.Ltmp6020:
    000005d7: 	shlq	$0x5, %r14
    000005db: 	leaq	(%r9,%r14), %rcx
    000005df: 	jmp	.Ltmp6044 # Offset: 1503
.Ltmp6019:
    000005e4: 	movq	%rcx, %r9
    000005e7: 	notq	%r9
    000005ea: 	shrq	$0x4, %r9
    000005ee: 	notq	%r9
    000005f1: 	jmp	.Ltmp6045 # Offset: 1521
.Ltmp6029:
    000005f6: 	leaq	DATAat0x52330(%rip), %rdi
    000005fd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1533
    00000602: 	endbr64
    00000606: 	movq	%rax, %r12
    00000609: 	movq	%rbp, %rdi
    0000060c: 	movl	$0xb8, %esi
    00000611: 	callq	_ZdlPvm@PLT # Offset: 1553
    00000616: 	movq	%r12, %rdi
    00000619: 	callq	_Unwind_Resume@PLT # Offset: 1561
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_accum_reverseId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z21testAccumulateReverseIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 326
  State       : disassembled
  Address     : 0x3f340
  Size        : 0x577
  MaxSize     : 0x580
  Offset      : 0x3f340
  Section     : .text
  Orc Section : .local.text._Z21testAccumulateReverseIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0325:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdx, %rbx
    00000017: 	leaq	(%rbp,%r15,8), %r14
    0000001c: 	leaq	DATAat0x5250f(%rip), %rdx
    00000023: 	subq	$0xa8, %rsp
    0000002a: 	movq	%rsi, 0x28(%rsp)
    0000002f: 	leaq	0x70(%rsp), %r12
    00000034: 	movq	%rbx, %rsi
    00000037: 	movl	%r8d, 0x24(%rsp)
    0000003c: 	movq	%r12, %rdi
    0000003f: 	movq	%fs:0x28, %rax
    00000048: 	movq	%rax, 0x98(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	movl	%ecx, iterations(%rip)
    00000058: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 88
    0000005d: 	movq	%r12, %rdx
    00000060: 	movq	%r14, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	callq	_Z24test_accum_array_reverseIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 102
    0000006b: 	movq	0x70(%rsp), %rdi
    00000070: 	leaq	0x80(%rsp), %r13
    00000078: 	cmpq	%r13, %rdi
    0000007b: 	je	.Ltmp6046 # Offset: 123
    0000007d: 	movq	0x80(%rsp), %rax
    00000085: 	leaq	0x1(%rax), %rsi
    00000089: 	callq	_ZdlPvm@PLT # Offset: 137
.Ltmp6046:
    0000008e: 	leaq	DATAat0x525a0(%rip), %rdx
    00000095: 	movq	%rbx, %rsi
    00000098: 	movq	%r12, %rdi
    0000009b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 155
    000000a0: 	movq	%r12, %rdx
    000000a3: 	movq	%r14, %rsi
    000000a6: 	movq	%rbp, %rdi
    000000a9: 	callq	_Z27test_accum_stdarray_reverseIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 169
    000000ae: 	movq	0x70(%rsp), %rdi
    000000b3: 	cmpq	%r13, %rdi
    000000b6: 	je	.Ltmp6047 # Offset: 182
    000000b8: 	movq	0x80(%rsp), %rax
    000000c0: 	leaq	0x1(%rax), %rsi
    000000c4: 	callq	_ZdlPvm@PLT # Offset: 196
.Ltmp6047:
    000000c9: 	leaq	DATAat0x525c0(%rip), %rdx
    000000d0: 	movq	%rbx, %rsi
    000000d3: 	movq	%r12, %rdi
    000000d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 214
    000000db: 	movq	%r12, %rdx
    000000de: 	movq	%r14, %rsi
    000000e1: 	movq	%rbp, %rdi
    000000e4: 	callq	_Z18test_accum_reverseIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 228
    000000e9: 	movq	0x70(%rsp), %rdi
    000000ee: 	cmpq	%r13, %rdi
    000000f1: 	je	.Ltmp6048 # Offset: 241
    000000f3: 	movq	0x80(%rsp), %rax
    000000fb: 	leaq	0x1(%rax), %rsi
    000000ff: 	callq	_ZdlPvm@PLT # Offset: 255
.Ltmp6048:
    00000104: 	leaq	DATAat0x525e0(%rip), %rdx
    0000010b: 	movq	%rbx, %rsi
    0000010e: 	movq	%r12, %rdi
    00000111: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 273
    00000116: 	movq	%r12, %rdx
    00000119: 	movq	%r14, %rsi
    0000011c: 	movq	%rbp, %rdi
    0000011f: 	callq	_Z18test_accum_reverseIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 287
    00000124: 	movq	0x70(%rsp), %rdi
    00000129: 	cmpq	%r13, %rdi
    0000012c: 	je	.Ltmp6049 # Offset: 300
    0000012e: 	movq	0x80(%rsp), %rax
    00000136: 	leaq	0x1(%rax), %rsi
    0000013a: 	callq	_ZdlPvm@PLT # Offset: 314
.Ltmp6049:
    0000013f: 	leaq	DATAat0x52529(%rip), %rdx
    00000146: 	movq	%rbx, %rsi
    00000149: 	movq	%r12, %rdi
    0000014c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 332
    00000151: 	movq	%r12, %rdx
    00000154: 	movq	%r14, %rsi
    00000157: 	movq	%rbp, %rdi
    0000015a: 	callq	_Z18test_accum_reverseIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 346
    0000015f: 	movq	0x70(%rsp), %rdi
    00000164: 	cmpq	%r13, %rdi
    00000167: 	je	.Ltmp6050 # Offset: 359
    00000169: 	movq	0x80(%rsp), %rax
    00000171: 	leaq	0x1(%rax), %rsi
    00000175: 	callq	_ZdlPvm@PLT # Offset: 373
.Ltmp6050:
    0000017a: 	leaq	DATAat0x52600(%rip), %rdx
    00000181: 	movq	%rbx, %rsi
    00000184: 	movq	%r12, %rdi
    00000187: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 391
    0000018c: 	movq	%r12, %rdx
    0000018f: 	movq	%r14, %rsi
    00000192: 	movq	%rbp, %rdi
    00000195: 	callq	_Z18test_accum_reverseId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 405
    0000019a: 	movq	0x70(%rsp), %rdi
    0000019f: 	cmpq	%r13, %rdi
    000001a2: 	je	.Ltmp6051 # Offset: 418
    000001a4: 	movq	0x80(%rsp), %rax
    000001ac: 	leaq	0x1(%rax), %rsi
    000001b0: 	callq	_ZdlPvm@PLT # Offset: 432
.Ltmp6051:
    000001b5: 	leaq	DATAat0x52628(%rip), %rdx
    000001bc: 	movq	%rbx, %rsi
    000001bf: 	movq	%r12, %rdi
    000001c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 450
    000001c7: 	movq	%r12, %rdx
    000001ca: 	movq	%r14, %rsi
    000001cd: 	movq	%rbp, %rdi
    000001d0: 	callq	_Z18test_accum_reverseId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 464
    000001d5: 	movq	0x70(%rsp), %rdi
    000001da: 	cmpq	%r13, %rdi
    000001dd: 	je	.Ltmp6052 # Offset: 477
    000001df: 	movq	0x80(%rsp), %rax
    000001e7: 	leaq	0x1(%rax), %rsi
    000001eb: 	callq	_ZdlPvm@PLT # Offset: 491
.Ltmp6052:
    000001f0: 	leaq	DATAat0x52547(%rip), %rdx
    000001f7: 	movq	%rbx, %rsi
    000001fa: 	movq	%r12, %rdi
    000001fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 509
    00000202: 	movq	%r12, %rdx
    00000205: 	movq	%r14, %rsi
    00000208: 	movq	%rbp, %rdi
    0000020b: 	callq	_Z22test_accum_set_reverseIdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 523
    00000210: 	movq	0x70(%rsp), %rdi
    00000215: 	cmpq	%r13, %rdi
    00000218: 	je	.Ltmp6053 # Offset: 536
    0000021a: 	movq	0x80(%rsp), %rax
    00000222: 	leaq	0x1(%rax), %rsi
    00000226: 	callq	_ZdlPvm@PLT # Offset: 550
.Ltmp6053:
    0000022b: 	leaq	DATAat0x52658(%rip), %rdx
    00000232: 	movq	%rbx, %rsi
    00000235: 	movq	%r12, %rdi
    00000238: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 568
    0000023d: 	movq	%r12, %rdx
    00000240: 	movq	%r14, %rsi
    00000243: 	movq	%rbp, %rdi
    00000246: 	callq	_Z22test_accum_set_reverseIdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 582
    0000024b: 	movq	0x70(%rsp), %rdi
    00000250: 	cmpq	%r13, %rdi
    00000253: 	je	.Ltmp6054 # Offset: 595
    00000255: 	movq	0x80(%rsp), %rax
    0000025d: 	leaq	0x1(%rax), %rsi
    00000261: 	callq	_ZdlPvm@PLT # Offset: 609
.Ltmp6054:
    00000266: 	leaq	0x30(%rsp), %r15
    0000026b: 	leaq	DATAat0x52564(%rip), %rdx
    00000272: 	movq	%rbx, %rsi
    00000275: 	movq	%r15, %rdi
    00000278: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 632
    0000027d: 	leaq	0x50(%rsp), %rax
    00000282: 	movq	(%rbx), %rdx
    00000285: 	movq	%r15, %rsi
    00000288: 	movq	0x8(%rbx), %rcx
    0000028c: 	movq	%rax, %rdi
    0000028f: 	movq	%rax, 0x8(%rsp)
    00000294: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 660
    00000299: 	movq	0x8(%rsp), %rsi
    0000029e: 	leaq	DATAat0x52566(%rip), %rdx
    000002a5: 	movq	%r12, %rdi
    000002a8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 680
    000002ad: 	movq	%r12, %rdx
    000002b0: 	movq	%r14, %rsi
    000002b3: 	movq	%rbp, %rdi
    000002b6: 	callq	_Z22test_accum_map_reverseIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 694
    000002bb: 	movq	0x70(%rsp), %rdi
    000002c0: 	cmpq	%r13, %rdi
    000002c3: 	je	.Ltmp6055 # Offset: 707
    000002c5: 	movq	0x80(%rsp), %rax
    000002cd: 	leaq	0x1(%rax), %rsi
    000002d1: 	callq	_ZdlPvm@PLT # Offset: 721
.Ltmp6055:
    000002d6: 	movq	0x50(%rsp), %rdi
    000002db: 	leaq	0x60(%rsp), %rax
    000002e0: 	movq	%rax, 0x18(%rsp)
    000002e5: 	cmpq	%rax, %rdi
    000002e8: 	je	.Ltmp6056 # Offset: 744
    000002ea: 	movq	0x60(%rsp), %rax
    000002ef: 	leaq	0x1(%rax), %rsi
    000002f3: 	callq	_ZdlPvm@PLT # Offset: 755
.Ltmp6056:
    000002f8: 	movq	0x30(%rsp), %rdi
    000002fd: 	leaq	0x40(%rsp), %rax
    00000302: 	movq	%rax, 0x10(%rsp)
    00000307: 	cmpq	%rax, %rdi
    0000030a: 	je	.Ltmp6057 # Offset: 778
    0000030c: 	movq	0x40(%rsp), %rax
    00000311: 	leaq	0x1(%rax), %rsi
    00000315: 	callq	_ZdlPvm@PLT # Offset: 789
.Ltmp6057:
    0000031a: 	movq	%rbx, %rsi
    0000031d: 	leaq	DATAat0x52564(%rip), %rdx
    00000324: 	movq	%r15, %rdi
    00000327: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 807
    0000032c: 	movq	0x8(%rbx), %rcx
    00000330: 	movq	(%rbx), %rdx
    00000333: 	movq	%r15, %rsi
    00000336: 	movq	0x8(%rsp), %rbx
    0000033b: 	movq	%rbx, %rdi
    0000033e: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 830
    00000343: 	leaq	DATAat0x52680(%rip), %rdx
    0000034a: 	movq	%rbx, %rsi
    0000034d: 	movq	%r12, %rdi
    00000350: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 848
    00000355: 	movq	%r12, %rdx
    00000358: 	movq	%r14, %rsi
    0000035b: 	movq	%rbp, %rdi
    0000035e: 	callq	_Z27test_accum_multimap_reverseIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 862
    00000363: 	movq	0x70(%rsp), %rdi
    00000368: 	cmpq	%r13, %rdi
    0000036b: 	je	.Ltmp6058 # Offset: 875
    0000036d: 	movq	0x80(%rsp), %rax
    00000375: 	leaq	0x1(%rax), %rsi
    00000379: 	callq	_ZdlPvm@PLT # Offset: 889
.Ltmp6058:
    0000037e: 	movq	0x50(%rsp), %rdi
    00000383: 	cmpq	0x18(%rsp), %rdi
    00000388: 	je	.Ltmp6059 # Offset: 904
    0000038a: 	movq	0x60(%rsp), %rax
    0000038f: 	leaq	0x1(%rax), %rsi
    00000393: 	callq	_ZdlPvm@PLT # Offset: 915
.Ltmp6059:
    00000398: 	movq	0x30(%rsp), %rdi
    0000039d: 	cmpq	0x10(%rsp), %rdi
    000003a2: 	je	.Ltmp6060 # Offset: 930
    000003a4: 	movq	0x40(%rsp), %rax
    000003a9: 	leaq	0x1(%rax), %rsi
    000003ad: 	callq	_ZdlPvm@PLT # Offset: 941
.Ltmp6060:
    000003b2: 	cmpb	$0x0, 0x24(%rsp)
    000003b7: 	jne	.Ltmp6061 # Offset: 951
    000003b9: 	movq	0x98(%rsp), %rax
    000003c1: 	subq	%fs:0x28, %rax
    000003ca: 	jne	.Ltmp6062 # Offset: 970
    000003cc: 	addq	$0xa8, %rsp
    000003d3: 	popq	%rbx
    000003d4: 	popq	%rbp
    000003d5: 	popq	%r12
    000003d7: 	popq	%r13
    000003d9: 	popq	%r14
    000003db: 	popq	%r15
    000003dd: 	retq # Offset: 989
    000003de: 	nop # Size: 2
.Ltmp6061:
    000003e0: 	movq	0x98(%rsp), %rax
    000003e8: 	subq	%fs:0x28, %rax
    000003f1: 	jne	.Ltmp6062 # Offset: 1009
    000003f3: 	movl	iterations(%rip), %edx
    000003f9: 	movl	0x28(%rsp), %esi
    000003fd: 	xorl	%r8d, %r8d
    00000400: 	xorl	%ecx, %ecx
    00000402: 	addq	$0xa8, %rsp
    00000409: 	leaq	DATAat0x52583(%rip), %rdi
    00000410: 	popq	%rbx
    00000411: 	popq	%rbp
    00000412: 	popq	%r12
    00000414: 	popq	%r13
    00000416: 	popq	%r14
    00000418: 	popq	%r15
    0000041a: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 1050
.Ltmp6062:
    0000041f: 	callq	__stack_chk_fail@PLT # Offset: 1055
    00000424: 	endbr64
    00000428: 	movq	%rax, %rbp
    0000042b: 	jmp	.Ltmp6063 # Offset: 1067
    0000042d: 	endbr64
.Ltmp6065:
    00000431: 	movq	%rax, %rbp
    00000434: 	jmp	.Ltmp6064 # Offset: 1076
    00000436: 	endbr64
    0000043a: 	jmp	.Ltmp6065 # Offset: 1082
.Ltmp6063:
    0000043c: 	movq	0x70(%rsp), %rdi
    00000441: 	leaq	0x80(%rsp), %rax
    00000449: 	cmpq	%rax, %rdi
    0000044c: 	je	.Ltmp6066 # Offset: 1100
.Ltmp6067:
    0000044e: 	movq	0x80(%rsp), %rax
    00000456: 	leaq	0x1(%rax), %rsi
    0000045a: 	callq	_ZdlPvm@PLT # Offset: 1114
.Ltmp6066:
    0000045f: 	movq	%rbp, %rdi
    00000462: 	callq	_Unwind_Resume@PLT # Offset: 1122
.Ltmp6064:
    00000467: 	movq	0x70(%rsp), %rdi
    0000046c: 	cmpq	%r13, %rdi
    0000046f: 	jne	.Ltmp6067 # Offset: 1135
    00000471: 	jmp	.Ltmp6066 # Offset: 1137
    00000473: 	endbr64
    00000477: 	jmp	.Ltmp6065 # Offset: 1143
    00000479: 	endbr64
    0000047d: 	jmp	.Ltmp6065 # Offset: 1149
    0000047f: 	endbr64
    00000483: 	jmp	.Ltmp6065 # Offset: 1155
    00000485: 	endbr64
    00000489: 	jmp	.Ltmp6065 # Offset: 1161
    0000048b: 	endbr64
    0000048f: 	movq	%rax, %rbp
    00000492: 	jmp	.Ltmp6068 # Offset: 1170
    00000494: 	endbr64
    00000498: 	movq	%rax, %rbp
    0000049b: 	jmp	.Ltmp6069 # Offset: 1179
.Ltmp6068:
    0000049d: 	movq	0x70(%rsp), %rdi
    000004a2: 	cmpq	%r13, %rdi
    000004a5: 	je	.Ltmp6069 # Offset: 1189
    000004a7: 	movq	0x80(%rsp), %rax
    000004af: 	leaq	0x1(%rax), %rsi
    000004b3: 	callq	_ZdlPvm@PLT # Offset: 1203
.Ltmp6069:
    000004b8: 	movq	0x50(%rsp), %rdi
    000004bd: 	cmpq	0x18(%rsp), %rdi
    000004c2: 	je	.Ltmp6070 # Offset: 1218
    000004c4: 	movq	0x60(%rsp), %rax
    000004c9: 	leaq	0x1(%rax), %rsi
    000004cd: 	callq	_ZdlPvm@PLT # Offset: 1229
.Ltmp6070:
    000004d2: 	movq	0x30(%rsp), %rdi
    000004d7: 	cmpq	0x10(%rsp), %rdi
    000004dc: 	je	.Ltmp6066 # Offset: 1244
.Ltmp6074:
    000004de: 	movq	0x40(%rsp), %rax
    000004e3: 	leaq	0x1(%rax), %rsi
    000004e7: 	callq	_ZdlPvm@PLT # Offset: 1255
    000004ec: 	jmp	.Ltmp6066 # Offset: 1260
    000004f1: 	endbr64
    000004f5: 	movq	%rax, %rbp
    000004f8: 	jmp	.Ltmp6070 # Offset: 1272
    000004fa: 	endbr64
    000004fe: 	movq	%rax, %rbp
    00000501: 	jmp	.Ltmp6071 # Offset: 1281
    00000503: 	endbr64
    00000507: 	movq	%rax, %rbp
    0000050a: 	jmp	.Ltmp6072 # Offset: 1290
    0000050c: 	endbr64
    00000510: 	jmp	.Ltmp6065 # Offset: 1296
    00000515: 	endbr64
    00000519: 	movq	%rax, %rbp
    0000051c: 	jmp	.Ltmp6073 # Offset: 1308
.Ltmp6071:
    0000051e: 	movq	0x70(%rsp), %rdi
    00000523: 	cmpq	%r13, %rdi
    00000526: 	je	.Ltmp6072 # Offset: 1318
    00000528: 	movq	0x80(%rsp), %rax
    00000530: 	leaq	0x1(%rax), %rsi
    00000534: 	callq	_ZdlPvm@PLT # Offset: 1332
.Ltmp6072:
    00000539: 	movq	0x50(%rsp), %rdi
    0000053e: 	leaq	0x60(%rsp), %rax
    00000543: 	cmpq	%rax, %rdi
    00000546: 	je	.Ltmp6073 # Offset: 1350
    00000548: 	movq	0x60(%rsp), %rax
    0000054d: 	leaq	0x1(%rax), %rsi
    00000551: 	callq	_ZdlPvm@PLT # Offset: 1361
.Ltmp6073:
    00000556: 	movq	0x30(%rsp), %rdi
    0000055b: 	leaq	0x40(%rsp), %rax
    00000560: 	cmpq	%rax, %rdi
    00000563: 	jne	.Ltmp6074 # Offset: 1379
    00000569: 	jmp	.Ltmp6066 # Offset: 1385
    0000056e: 	endbr64
    00000572: 	jmp	.Ltmp6065 # Offset: 1394
DWARF CFI Instructions:
    <empty>
End of Function "_Z21testAccumulateReverseIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z9test_copyId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 327
  State       : disassembled
  Address     : 0x3f8c0
  Size        : 0x674
  MaxSize     : 0x680
  Offset      : 0x3f8c0
  Section     : .text
  Orc Section : .local.text._Z9test_copyId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0326:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	movl	$0xb8, %edi
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rsi, %rbx
    00000019: 	subq	$0x58, %rsp
    0000001d: 	movq	%rdx, 0x18(%rsp)
    00000022: 	callq	_Znwm@PLT # Offset: 34
    00000027: 	movq	%rax, %rdi
    0000002a: 	movq	%rax, %rbp
    0000002d: 	callq	_ZN27DoubleLinkListPoolAllocatorIdEC2Ev # Offset: 45
    00000032: 	movq	%rbx, %rax
    00000035: 	leaq	0x50(%rbp), %rdi
    00000039: 	pxor	%xmm0, %xmm0
    0000003d: 	movq	$0x0, 0xa0(%rbp)
    00000048: 	subq	%r12, %rax
    0000004b: 	movq	%rdi, 0x10(%rsp)
    00000050: 	movq	%rax, %rdi
    00000053: 	movups	%xmm0, 0xa8(%rbp)
    0000005a: 	sarq	$0x3, %rdi
    0000005e: 	movq	%rdi, 0x8(%rsp)
    00000063: 	testq	%rax, %rax
    00000066: 	jle	.Ltmp6075 # Offset: 102
    0000006c: 	movq	%r12, 0x20(%rsp)
    00000071: 	movq	%rbx, 0x28(%rsp)
.Ltmp6082:
    00000076: 	movq	0x48(%rbp), %r15
    0000007a: 	movq	0x30(%rbp), %r13
    0000007e: 	movq	0x38(%rbp), %rbx
    00000082: 	movq	%r15, %rax
    00000085: 	subq	0x28(%rbp), %rax
    00000089: 	movq	%r13, %rcx
    0000008c: 	sarq	$0x3, %rax
    00000090: 	cmpq	$0x1, %r15
    00000094: 	adcq	$-0x1, %rax
    00000098: 	subq	%rbx, %rcx
    0000009b: 	sarq	$0x3, %rcx
    0000009f: 	shlq	$0x6, %rax
    000000a3: 	addq	%rcx, %rax
    000000a6: 	movq	0x20(%rbp), %rcx
    000000aa: 	subq	0x10(%rbp), %rcx
    000000ae: 	sarq	$0x3, %rcx
    000000b2: 	addq	%rcx, %rax
    000000b5: 	je	.Ltmp6076 # Offset: 181
.Ltmp6108:
    000000bb: 	cmpq	%rbx, %r13
    000000be: 	je	.Ltmp6077 # Offset: 190
.Ltmp6099:
    000000c4: 	movq	-0x8(%r13), %r14
    000000c8: 	subq	$0x8, %r13
    000000cc: 	movq	%r13, 0x30(%rbp)
.Ltmp6100:
    000000d0: 	movq	0x60(%rbp), %rdx
    000000d4: 	movq	0x78(%rbp), %rcx
    000000d8: 	movq	%rdx, %rax
    000000db: 	subq	0x68(%rbp), %rax
    000000df: 	sarq	$0x5, %rax
    000000e3: 	addq	%r14, %rax
    000000e6: 	js	.Ltmp6078 # Offset: 230
    000000ec: 	cmpq	$0xf, %rax
    000000f0: 	jle	.Ltmp6079 # Offset: 240
    000000f6: 	movq	%rax, %rdx
    000000f9: 	andl	$0xf, %eax
    000000fc: 	sarq	$0x4, %rdx
    00000100: 	shlq	$0x5, %rax
    00000104: 	addq	(%rcx,%rdx,8), %rax
    00000108: 	movq	%r14, 0x18(%rax)
.Ltmp6101:
    0000010c: 	movq	0xb0(%rbp), %rdx
    00000113: 	movq	$0x0, (%rax)
    0000011a: 	movq	$0x0, 0x8(%rax)
    00000122: 	movq	%rdx, 0x10(%rax)
    00000126: 	testq	%rdx, %rdx
    00000129: 	je	.Ltmp6080 # Offset: 297
    0000012b: 	movq	%rax, 0x8(%rdx)
.Ltmp6080:
    0000012f: 	cmpq	$0x0, 0xa8(%rbp)
    00000137: 	movq	%rax, 0xb0(%rbp)
    0000013e: 	je	.Ltmp6081 # Offset: 318
    00000144: 	addq	$0x1, 0xa0(%rbp)
    0000014c: 	subq	$0x1, 0x8(%rsp)
    00000152: 	jne	.Ltmp6082 # Offset: 338
.Ltmp6110:
    00000158: 	movq	0x20(%rsp), %r12
    0000015d: 	movq	0x28(%rsp), %rbx
.Ltmp6075:
    00000162: 	cmpq	%r12, %rbx
    00000165: 	je	.Ltmp6083 # Offset: 357
    0000016b: 	movq	%rbx, %rdx
    0000016e: 	movq	%r12, %rax
    00000171: 	subq	%r12, %rdx
    00000174: 	leaq	-0x8(%rdx), %rcx
    00000178: 	shrq	$0x3, %rcx
    0000017c: 	addq	$0x1, %rcx
    00000180: 	cmpq	$0x8, %rdx
    00000184: 	je	.Ltmp6084 # Offset: 388
    0000018a: 	movq	%rcx, %rdx
    0000018d: 	movq	DATAat0x537b8(%rip), %r13
    00000194: 	shrq	%rdx
    00000197: 	shlq	$0x4, %rdx
    0000019b: 	movq	%r13, %xmm1
    000001a0: 	addq	%r12, %rdx
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6085:
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	addq	$0x10, %rax
    000001b0: 	addsd	%xmm0, %xmm1
    000001b4: 	movsd	-0x8(%rax), %xmm0
    000001b9: 	addsd	%xmm0, %xmm1
    000001bd: 	cmpq	%rdx, %rax
    000001c0: 	jne	.Ltmp6085 # Offset: 448
    000001c2: 	movq	%rcx, %rdx
    000001c5: 	andq	$-0x2, %rdx
    000001c9: 	leaq	(%r12,%rdx,8), %rax
    000001cd: 	cmpq	%rdx, %rcx
    000001d0: 	je	.Ltmp6086 # Offset: 464
.Ltmp6112:
    000001d2: 	addsd	(%rax), %xmm1
.Ltmp6086:
    000001d6: 	movsd	%xmm1, 0x8(%rsp)
    000001dc: 	callq	clock@PLT # Offset: 476
    000001e1: 	movl	iterations(%rip), %edi
    000001e7: 	movsd	0x8(%rsp), %xmm1
    000001ed: 	movq	%rax, start_time(%rip)
    000001f4: 	testl	%edi, %edi
    000001f6: 	jle	.Ltmp6087 # Offset: 502
    000001f8: 	movq	0xa8(%rbp), %r8
    000001ff: 	xorl	%esi, %esi
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp6089:
    00000208: 	movq	%r8, %rdx
    0000020b: 	movq	%r12, %rax
    0000020e: 	nop # Size: 2
.Ltmp6088:
    00000210: 	movsd	(%rax), %xmm0
    00000214: 	movq	%rdx, %rcx
    00000217: 	addq	$0x8, %rax
    0000021b: 	movq	0x8(%rdx), %rdx
    0000021f: 	movsd	%xmm0, (%rcx)
    00000223: 	cmpq	%rax, %rbx
    00000226: 	jne	.Ltmp6088 # Offset: 550
    00000228: 	addl	$0x1, %esi
    0000022b: 	cmpl	%edi, %esi
    0000022d: 	jne	.Ltmp6089 # Offset: 557
.Ltmp6087:
    0000022f: 	movq	0x18(%rsp), %rdi
    00000234: 	movsd	%xmm1, 0x8(%rsp)
    0000023a: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 570
    0000023f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000246: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000024d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000254: 	movsd	0x8(%rsp), %xmm1
    0000025a: 	je	.Ltmp6090 # Offset: 602
.Ltmp6111:
    00000260: 	movq	-0x20(%rax), %r12
    00000264: 	movsd	%xmm1, 0x8(%rsp)
    0000026a: 	callq	clock@PLT # Offset: 618
    0000026f: 	pxor	%xmm0, %xmm0
    00000273: 	movq	%rax, end_time(%rip)
    0000027a: 	movq	%r12, %rdi
    0000027d: 	subq	start_time(%rip), %rax
    00000284: 	cvtsi2sd	%rax, %xmm0
    00000289: 	divsd	DATAat0x53788(%rip), %xmm0
    00000291: 	callq	_Z13record_resultdPKc # Offset: 657
    00000296: 	movsd	0x8(%rsp), %xmm1
    0000029c: 	movq	%r13, %xmm0
    000002a1: 	movq	0xa8(%rbp), %rax
    000002a8: 	testq	%rax, %rax
    000002ab: 	je	.Ltmp6091 # Offset: 683
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp6092:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movq	0x8(%rax), %rax
    000002b7: 	addsd	(%rdx), %xmm0
    000002bb: 	testq	%rax, %rax
    000002be: 	jne	.Ltmp6092 # Offset: 702
.Ltmp6091:
    000002c0: 	ucomisd	%xmm1, %xmm0
    000002c4: 	jp	.Ltmp6093 # Offset: 708
    000002ca: 	jne	.Ltmp6093 # Offset: 714
.Ltmp6102:
    000002d0: 	movq	0x10(%rsp), %rdi
    000002d5: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 725
    000002da: 	movq	%rbp, %rdi
    000002dd: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 733
    000002e2: 	addq	$0x58, %rsp
    000002e6: 	movq	%rbp, %rdi
    000002e9: 	movl	$0xb8, %esi
    000002ee: 	popq	%rbx
    000002ef: 	popq	%rbp
    000002f0: 	popq	%r12
    000002f2: 	popq	%r13
    000002f4: 	popq	%r14
    000002f6: 	popq	%r15
    000002f8: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 760
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp6076:
    00000300: 	movq	0x98(%rbp), %rsi
    00000307: 	movq	0x78(%rbp), %rax
    0000030b: 	movq	0x70(%rbp), %rdi
    0000030f: 	movq	0x80(%rbp), %r10
    00000316: 	movq	%rsi, %rcx
    00000319: 	movq	0x60(%rbp), %r9
    0000031d: 	subq	%rax, %rcx
    00000320: 	sarq	$0x3, %rcx
    00000324: 	cmpq	$0x1, %rsi
    00000328: 	adcq	$-0x1, %rcx
    0000032c: 	subq	0x88(%rbp), %r10
    00000333: 	sarq	$0x5, %r10
    00000337: 	shlq	$0x4, %rcx
    0000033b: 	addq	%r10, %rcx
    0000033e: 	movq	%rdi, %r10
    00000341: 	subq	%r9, %r10
    00000344: 	sarq	$0x5, %r10
    00000348: 	leaq	(%rcx,%r10), %r12
    0000034c: 	leaq	0x80(%r12), %r14
    00000354: 	cmpq	%r14, %r12
    00000357: 	jb	.Ltmp6094 # Offset: 855
    0000035d: 	movq	0x68(%rbp), %r10
    00000361: 	movq	%r9, %rcx
    00000364: 	subq	%r10, %rcx
    00000367: 	sarq	$0x5, %rcx
    0000036b: 	addq	%r14, %rcx
    0000036e: 	js	.Ltmp6095 # Offset: 878
    00000374: 	cmpq	$0xf, %rcx
    00000378: 	jle	.Ltmp6096 # Offset: 888
    0000037e: 	movq	%rcx, %r9
    00000381: 	sarq	$0x4, %r9
.Ltmp6114:
    00000385: 	leaq	(%rax,%r9,8), %rax
    00000389: 	shlq	$0x4, %r9
    0000038d: 	movq	(%rax), %r10
    00000390: 	subq	%r9, %rcx
    00000393: 	shlq	$0x5, %rcx
    00000397: 	leaq	0x200(%r10), %rdi
    0000039e: 	addq	%r10, %rcx
.Ltmp6113:
    000003a1: 	movq	%rcx, %xmm4
    000003a6: 	movq	%r10, %xmm6
    000003ab: 	movq	%rdi, %xmm5
    000003b0: 	movq	%rax, %xmm7
    000003b5: 	punpcklqdq	%xmm6, %xmm4
    000003b9: 	leaq	0x8(%rsi), %r12
    000003bd: 	punpcklqdq	%xmm7, %xmm5
    000003c1: 	leaq	0x8(%rax), %r14
    000003c5: 	movaps	%xmm4, 0x30(%rsp)
    000003ca: 	movaps	%xmm5, 0x40(%rsp)
    000003cf: 	cmpq	%r14, %r12
    000003d2: 	jbe	.Ltmp6097 # Offset: 978
    000003d4: 	nopl	(%rax) # Size: 4
.Ltmp6098:
    000003d8: 	movq	(%r14), %rdi
    000003db: 	movl	$0x200, %esi
    000003e0: 	addq	$0x8, %r14
    000003e4: 	callq	_ZdlPvm@PLT # Offset: 996
    000003e9: 	cmpq	%r14, %r12
    000003ec: 	ja	.Ltmp6098 # Offset: 1004
.Ltmp6097:
    000003ee: 	movdqa	0x30(%rsp), %xmm6
    000003f4: 	movdqa	0x40(%rsp), %xmm7
    000003fa: 	movups	%xmm6, 0x80(%rbp)
    00000401: 	movups	%xmm7, 0x90(%rbp)
    00000408: 	cmpq	%rbx, %r13
    0000040b: 	jne	.Ltmp6099 # Offset: 1035
.Ltmp6077:
    00000411: 	movq	-0x8(%r15), %rax
    00000415: 	movl	$0x200, %esi
    0000041a: 	movq	%r13, %rdi
    0000041d: 	movq	0x1f8(%rax), %r14
    00000424: 	callq	_ZdlPvm@PLT # Offset: 1060
    00000429: 	movq	-0x8(%r15), %rax
    0000042d: 	leaq	-0x8(%r15), %rdx
    00000431: 	movq	%rdx, %xmm3
    00000436: 	addq	$0x1f8, %rax
    0000043c: 	movq	%rax, %xmm0
    00000441: 	movq	-0x8(%r15), %rax
    00000445: 	movhps	-0x8(%r15), %xmm0
    0000044a: 	addq	$0x200, %rax
    00000450: 	movups	%xmm0, 0x30(%rbp)
    00000454: 	movq	%rax, %xmm0
    00000459: 	punpcklqdq	%xmm3, %xmm0
    0000045d: 	movups	%xmm0, 0x40(%rbp)
    00000461: 	jmp	.Ltmp6100 # Offset: 1121
.Ltmp6079:
    00000466: 	movq	%r14, %rax
    00000469: 	shlq	$0x5, %rax
    0000046d: 	addq	%rdx, %rax
    00000470: 	movq	%r14, 0x18(%rax)
    00000474: 	jmp	.Ltmp6101 # Offset: 1140
.Ltmp6093:
    00000479: 	movl	current_test(%rip), %edx
    0000047f: 	leaq	DATAat0x52360(%rip), %rsi
    00000486: 	movl	$0x1, %edi
    0000048b: 	xorl	%eax, %eax
    0000048d: 	callq	__printf_chk@PLT # Offset: 1165
    00000492: 	jmp	.Ltmp6102 # Offset: 1170
.Ltmp6094:
    00000497: 	movq	0x10(%rsp), %rdi
    0000049c: 	movl	$0x80, %esi
    000004a1: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1185
    000004a6: 	movq	0x30(%rbp), %r13
    000004aa: 	movq	0x40(%rbp), %rsi
    000004ae: 	movq	0x48(%rbp), %r15
    000004b2: 	movq	0x38(%rbp), %rbx
    000004b6: 	movq	%r13, %rax
    000004b9: 	jmp	.Ltmp6103 # Offset: 1209
    000004bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6105:
    000004c0: 	movq	%r14, (%rax)
    000004c3: 	addq	$0x8, %rax
    000004c7: 	movq	%rax, 0x30(%rbp)
    000004cb: 	cmpq	%r14, %r12
    000004ce: 	je	.Ltmp6104 # Offset: 1230
.Ltmp6103:
    000004d4: 	leaq	-0x8(%rsi), %rdx
    000004d8: 	subq	$0x1, %r14
    000004dc: 	cmpq	%rdx, %rax
    000004df: 	jne	.Ltmp6105 # Offset: 1247
    000004e1: 	movabsq	$0xfffffffffffffff, %rdi
    000004eb: 	movq	%r15, %rdx
    000004ee: 	subq	0x28(%rbp), %rdx
    000004f2: 	sarq	$0x3, %rdx
    000004f6: 	cmpq	$0x1, %r15
    000004fa: 	adcq	$-0x1, %rdx
    000004fe: 	subq	%rbx, %rax
    00000501: 	shlq	$0x6, %rdx
    00000505: 	sarq	$0x3, %rax
    00000509: 	addq	%rdx, %rax
    0000050c: 	movq	0x20(%rbp), %rdx
    00000510: 	subq	0x10(%rbp), %rdx
    00000514: 	sarq	$0x3, %rdx
    00000518: 	addq	%rdx, %rax
    0000051b: 	cmpq	%rdi, %rax
    0000051e: 	je	.Ltmp6106 # Offset: 1310
    00000524: 	movq	0x8(%rbp), %rax
    00000528: 	movq	%r15, %rdx
    0000052b: 	subq	(%rbp), %rdx
    0000052f: 	sarq	$0x3, %rdx
    00000533: 	subq	%rdx, %rax
    00000536: 	cmpq	$0x1, %rax
    0000053a: 	jbe	.Ltmp6107 # Offset: 1338
.Ltmp6109:
    0000053c: 	movl	$0x200, %edi
    00000541: 	addq	$0x8, %r15
    00000545: 	callq	_Znwm@PLT # Offset: 1349
    0000054a: 	movq	0x30(%rbp), %rdx
    0000054e: 	leaq	0x200(%rax), %rsi
    00000555: 	movq	%rax, %xmm0
    0000055a: 	movq	%rax, (%r15)
    0000055d: 	movq	%rax, %rbx
    00000560: 	movq	%rsi, %xmm2
    00000565: 	movq	%r14, (%rdx)
    00000568: 	punpcklqdq	%xmm2, %xmm0
    0000056c: 	movq	%r15, 0x48(%rbp)
    00000570: 	movq	%rax, 0x30(%rbp)
    00000574: 	movups	%xmm0, 0x38(%rbp)
    00000578: 	cmpq	%r14, %r12
    0000057b: 	jne	.Ltmp6103 # Offset: 1403
.Ltmp6104:
    00000581: 	movq	%rax, %r13
    00000584: 	jmp	.Ltmp6108 # Offset: 1412
    00000589: 	nopl	(%rax) # Size: 7
.Ltmp6107:
    00000590: 	xorl	%edx, %edx
    00000592: 	movl	$0x1, %esi
    00000597: 	movq	%rbp, %rdi
    0000059a: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 1434
    0000059f: 	movq	0x48(%rbp), %r15
    000005a3: 	jmp	.Ltmp6109 # Offset: 1443
.Ltmp6081:
    000005a5: 	addq	$0x1, 0xa0(%rbp)
    000005ad: 	subq	$0x1, 0x8(%rsp)
    000005b3: 	movq	%rax, 0xa8(%rbp)
    000005ba: 	jne	.Ltmp6082 # Offset: 1466
    000005c0: 	jmp	.Ltmp6110 # Offset: 1472
    000005c5: 	nopl	(%rax) # Size: 3
.Ltmp6078:
    000005c8: 	movq	%rax, %rdx
    000005cb: 	notq	%rdx
    000005ce: 	shrq	$0x4, %rdx
    000005d2: 	notq	%rdx
    000005d5: 	movq	%rdx, %rsi
    000005d8: 	shlq	$0x4, %rsi
    000005dc: 	subq	%rsi, %rax
    000005df: 	shlq	$0x5, %rax
    000005e3: 	addq	(%rcx,%rdx,8), %rax
    000005e7: 	movq	%r14, 0x18(%rax)
    000005eb: 	jmp	.Ltmp6101 # Offset: 1515
.Ltmp6090:
    000005f0: 	movq	-0x8(%rdx), %rax
    000005f4: 	addq	$0x200, %rax
    000005fa: 	jmp	.Ltmp6111 # Offset: 1530
.Ltmp6083:
    000005ff: 	callq	clock@PLT # Offset: 1535
    00000604: 	movq	DATAat0x537b8(%rip), %r13
    0000060b: 	movq	%rax, start_time(%rip)
    00000612: 	movq	%r13, %xmm1
    00000617: 	jmp	.Ltmp6087 # Offset: 1559
.Ltmp6084:
    0000061c: 	movq	DATAat0x537b8(%rip), %r13
    00000623: 	movq	%r13, %xmm1
    00000628: 	jmp	.Ltmp6112 # Offset: 1576
.Ltmp6096:
    0000062d: 	shlq	$0x5, %r14
    00000631: 	leaq	(%r9,%r14), %rcx
    00000635: 	jmp	.Ltmp6113 # Offset: 1589
.Ltmp6095:
    0000063a: 	movq	%rcx, %r9
    0000063d: 	notq	%r9
    00000640: 	shrq	$0x4, %r9
    00000644: 	notq	%r9
    00000647: 	jmp	.Ltmp6114 # Offset: 1607
.Ltmp6106:
    0000064c: 	leaq	DATAat0x52330(%rip), %rdi
    00000653: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1619
    00000658: 	endbr64
    0000065c: 	movq	%rax, %r12
    0000065f: 	movq	%rbp, %rdi
    00000662: 	movl	$0xb8, %esi
    00000667: 	callq	_ZdlPvm@PLT # Offset: 1639
    0000066c: 	movq	%r12, %rdi
    0000066f: 	callq	_Unwind_Resume@PLT # Offset: 1647
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_copyId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15testCopyEntriesIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 328
  State       : disassembled
  Address     : 0x3ff40
  Size        : 0x350
  MaxSize     : 0x350
  Offset      : 0x3ff40
  Section     : .text
  Orc Section : .local.text._Z15testCopyEntriesIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0327:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	leaq	DATAat0x526a2(%rip), %rdx
    00000017: 	pushq	%r12
    00000019: 	movq	%r13, %rsi
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rdi, %rbp
    00000020: 	pushq	%rbx
    00000021: 	leaq	(%rbp,%r15,8), %r14
    00000026: 	subq	$0x48, %rsp
    0000002a: 	movl	%r8d, 0xc(%rsp)
    0000002f: 	leaq	0x10(%rsp), %r12
    00000034: 	movq	%r12, %rdi
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x38(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	movl	%ecx, iterations(%rip)
    0000004d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 77
    00000052: 	movq	%r12, %rdx
    00000055: 	movq	%r14, %rsi
    00000058: 	movq	%rbp, %rdi
    0000005b: 	callq	_Z15test_copy_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 91
    00000060: 	movq	0x10(%rsp), %rdi
    00000065: 	leaq	0x20(%rsp), %rbx
    0000006a: 	cmpq	%rbx, %rdi
    0000006d: 	je	.Ltmp6115 # Offset: 109
    0000006f: 	movq	0x20(%rsp), %rax
    00000074: 	leaq	0x1(%rax), %rsi
    00000078: 	callq	_ZdlPvm@PLT # Offset: 120
.Ltmp6115:
    0000007d: 	leaq	DATAat0x526b6(%rip), %rdx
    00000084: 	movq	%r13, %rsi
    00000087: 	movq	%r12, %rdi
    0000008a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 138
    0000008f: 	movq	%r12, %rdx
    00000092: 	movq	%r14, %rsi
    00000095: 	movq	%rbp, %rdi
    00000098: 	callq	_Z18test_copy_stdarrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 152
    0000009d: 	movq	0x10(%rsp), %rdi
    000000a2: 	cmpq	%rbx, %rdi
    000000a5: 	je	.Ltmp6116 # Offset: 165
    000000a7: 	movq	0x20(%rsp), %rax
    000000ac: 	leaq	0x1(%rax), %rsi
    000000b0: 	callq	_ZdlPvm@PLT # Offset: 176
.Ltmp6116:
    000000b5: 	leaq	DATAat0x526cf(%rip), %rdx
    000000bc: 	movq	%r13, %rsi
    000000bf: 	movq	%r12, %rdi
    000000c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 194
    000000c7: 	movq	%r12, %rdx
    000000ca: 	movq	%r14, %rsi
    000000cd: 	movq	%rbp, %rdi
    000000d0: 	callq	_Z9test_copyIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x10(%rsp), %rdi
    000000da: 	cmpq	%rbx, %rdi
    000000dd: 	je	.Ltmp6117 # Offset: 221
    000000df: 	movq	0x20(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp6117:
    000000ed: 	leaq	DATAat0x526e9(%rip), %rdx
    000000f4: 	movq	%r13, %rsi
    000000f7: 	movq	%r12, %rdi
    000000fa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 250
    000000ff: 	movq	%r12, %rdx
    00000102: 	movq	%r14, %rsi
    00000105: 	movq	%rbp, %rdi
    00000108: 	callq	_Z9test_copyIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 264
    0000010d: 	movq	0x10(%rsp), %rdi
    00000112: 	cmpq	%rbx, %rdi
    00000115: 	je	.Ltmp6118 # Offset: 277
    00000117: 	movq	0x20(%rsp), %rax
    0000011c: 	leaq	0x1(%rax), %rsi
    00000120: 	callq	_ZdlPvm@PLT # Offset: 288
.Ltmp6118:
    00000125: 	leaq	DATAat0x52770(%rip), %rdx
    0000012c: 	movq	%r13, %rsi
    0000012f: 	movq	%r12, %rdi
    00000132: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 306
    00000137: 	movq	%r12, %rdx
    0000013a: 	movq	%r14, %rsi
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Z9test_copyIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 320
    00000145: 	movq	0x10(%rsp), %rdi
    0000014a: 	cmpq	%rbx, %rdi
    0000014d: 	je	.Ltmp6119 # Offset: 333
    0000014f: 	movq	0x20(%rsp), %rax
    00000154: 	leaq	0x1(%rax), %rsi
    00000158: 	callq	_ZdlPvm@PLT # Offset: 344
.Ltmp6119:
    0000015d: 	leaq	DATAat0x52702(%rip), %rdx
    00000164: 	movq	%r13, %rsi
    00000167: 	movq	%r12, %rdi
    0000016a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 362
    0000016f: 	movq	%r12, %rdx
    00000172: 	movq	%r14, %rsi
    00000175: 	movq	%rbp, %rdi
    00000178: 	callq	_Z9test_copyIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 376
    0000017d: 	movq	0x10(%rsp), %rdi
    00000182: 	cmpq	%rbx, %rdi
    00000185: 	je	.Ltmp6120 # Offset: 389
    00000187: 	movq	0x20(%rsp), %rax
    0000018c: 	leaq	0x1(%rax), %rsi
    00000190: 	callq	_ZdlPvm@PLT # Offset: 400
.Ltmp6120:
    00000195: 	leaq	DATAat0x5271a(%rip), %rdx
    0000019c: 	movq	%r13, %rsi
    0000019f: 	movq	%r12, %rdi
    000001a2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 418
    000001a7: 	movq	%r12, %rdx
    000001aa: 	movq	%r14, %rsi
    000001ad: 	movq	%rbp, %rdi
    000001b0: 	callq	_Z9test_copyId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 432
    000001b5: 	movq	0x10(%rsp), %rdi
    000001ba: 	cmpq	%rbx, %rdi
    000001bd: 	je	.Ltmp6121 # Offset: 445
    000001bf: 	movq	0x20(%rsp), %rax
    000001c4: 	leaq	0x1(%rax), %rsi
    000001c8: 	callq	_ZdlPvm@PLT # Offset: 456
.Ltmp6121:
    000001cd: 	leaq	DATAat0x52790(%rip), %rdx
    000001d4: 	movq	%r13, %rsi
    000001d7: 	movq	%r12, %rdi
    000001da: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 474
    000001df: 	movq	%r12, %rdx
    000001e2: 	movq	%r14, %rsi
    000001e5: 	movq	%rbp, %rdi
    000001e8: 	callq	_Z9test_copyId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 488
    000001ed: 	movq	0x10(%rsp), %rdi
    000001f2: 	cmpq	%rbx, %rdi
    000001f5: 	je	.Ltmp6122 # Offset: 501
    000001f7: 	movq	0x20(%rsp), %rax
    000001fc: 	leaq	0x1(%rax), %rsi
    00000200: 	callq	_ZdlPvm@PLT # Offset: 512
.Ltmp6122:
    00000205: 	leaq	DATAat0x52737(%rip), %rdx
    0000020c: 	movq	%r13, %rsi
    0000020f: 	movq	%r12, %rdi
    00000212: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 530
    00000217: 	movq	%r12, %rdx
    0000021a: 	movq	%r14, %rsi
    0000021d: 	movq	%rbp, %rdi
    00000220: 	callq	_Z9test_copyId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 544
    00000225: 	movq	0x10(%rsp), %rdi
    0000022a: 	cmpq	%rbx, %rdi
    0000022d: 	je	.Ltmp6123 # Offset: 557
    0000022f: 	movq	0x20(%rsp), %rax
    00000234: 	leaq	0x1(%rax), %rsi
    00000238: 	callq	_ZdlPvm@PLT # Offset: 568
.Ltmp6123:
    0000023d: 	leaq	DATAat0x527b8(%rip), %rdx
    00000244: 	movq	%r13, %rsi
    00000247: 	movq	%r12, %rdi
    0000024a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 586
    0000024f: 	movq	%r12, %rdx
    00000252: 	movq	%r14, %rsi
    00000255: 	movq	%rbp, %rdi
    00000258: 	callq	_Z9test_copyId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 600
    0000025d: 	movq	0x10(%rsp), %rdi
    00000262: 	cmpq	%rbx, %rdi
    00000265: 	je	.Ltmp6124 # Offset: 613
    00000267: 	movq	0x20(%rsp), %rax
    0000026c: 	leaq	0x1(%rax), %rsi
    00000270: 	callq	_ZdlPvm@PLT # Offset: 624
.Ltmp6124:
    00000275: 	cmpb	$0x0, 0xc(%rsp)
    0000027a: 	jne	.Ltmp6125 # Offset: 634
    0000027c: 	movq	0x38(%rsp), %rax
    00000281: 	subq	%fs:0x28, %rax
    0000028a: 	jne	.Ltmp6126 # Offset: 650
    0000028c: 	addq	$0x48, %rsp
    00000290: 	popq	%rbx
    00000291: 	popq	%rbp
    00000292: 	popq	%r12
    00000294: 	popq	%r13
    00000296: 	popq	%r14
    00000298: 	popq	%r15
    0000029a: 	retq # Offset: 666
    0000029b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6125:
    000002a0: 	movq	0x38(%rsp), %rax
    000002a5: 	subq	%fs:0x28, %rax
    000002ae: 	jne	.Ltmp6126 # Offset: 686
    000002b0: 	movl	iterations(%rip), %edx
    000002b6: 	addq	$0x48, %rsp
    000002ba: 	movl	%r15d, %esi
    000002bd: 	xorl	%r8d, %r8d
    000002c0: 	popq	%rbx
    000002c1: 	xorl	%ecx, %ecx
    000002c3: 	leaq	DATAat0x52754(%rip), %rdi
    000002ca: 	popq	%rbp
    000002cb: 	popq	%r12
    000002cd: 	popq	%r13
    000002cf: 	popq	%r14
    000002d1: 	popq	%r15
    000002d3: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 723
.Ltmp6126:
    000002d8: 	callq	__stack_chk_fail@PLT # Offset: 728
    000002dd: 	endbr64
.Ltmp6128:
    000002e1: 	movq	%rax, %rbp
    000002e4: 	jmp	.Ltmp6127 # Offset: 740
    000002e6: 	endbr64
    000002ea: 	jmp	.Ltmp6128 # Offset: 746
    000002ec: 	endbr64
    000002f0: 	jmp	.Ltmp6128 # Offset: 752
    000002f2: 	endbr64
    000002f6: 	jmp	.Ltmp6128 # Offset: 758
    000002f8: 	endbr64
    000002fc: 	jmp	.Ltmp6128 # Offset: 764
    000002fe: 	endbr64
    00000302: 	jmp	.Ltmp6128 # Offset: 770
    00000304: 	endbr64
    00000308: 	jmp	.Ltmp6128 # Offset: 776
    0000030a: 	endbr64
    0000030e: 	jmp	.Ltmp6128 # Offset: 782
    00000310: 	endbr64
    00000314: 	jmp	.Ltmp6128 # Offset: 788
    00000316: 	endbr64
    0000031a: 	movq	%rax, %rbp
    0000031d: 	jmp	.Ltmp6129 # Offset: 797
.Ltmp6127:
    0000031f: 	movq	0x10(%rsp), %rdi
    00000324: 	cmpq	%rbx, %rdi
    00000327: 	je	.Ltmp6130 # Offset: 807
.Ltmp6131:
    00000329: 	movq	0x20(%rsp), %rax
    0000032e: 	leaq	0x1(%rax), %rsi
    00000332: 	callq	_ZdlPvm@PLT # Offset: 818
.Ltmp6130:
    00000337: 	movq	%rbp, %rdi
    0000033a: 	callq	_Unwind_Resume@PLT # Offset: 826
.Ltmp6129:
    0000033f: 	movq	0x10(%rsp), %rdi
    00000344: 	leaq	0x20(%rsp), %rax
    00000349: 	cmpq	%rax, %rdi
    0000034c: 	jne	.Ltmp6131 # Offset: 844
    0000034e: 	jmp	.Ltmp6130 # Offset: 846
DWARF CFI Instructions:
    <empty>
End of Function "_Z15testCopyEntriesIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z20test_accum_unorderedId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 329
  State       : disassembled
  Address     : 0x40290
  Size        : 0x621
  MaxSize     : 0x630
  Offset      : 0x40290
  Section     : .text
  Orc Section : .local.text._Z20test_accum_unorderedId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0328:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0xb8, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x68, %rsp
    0000001d: 	movq	%rdx, 0x40(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x58(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	_Znwm@PLT # Offset: 50
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, %rbp
    0000003d: 	callq	_ZN27DoubleLinkListPoolAllocatorIdEC2Ev # Offset: 61
    00000042: 	movq	%r15, %r14
    00000045: 	pxor	%xmm0, %xmm0
    00000049: 	leaq	0x50(%rbp), %rax
    0000004d: 	xorl	%edx, %edx
    0000004f: 	subq	%r12, %r14
    00000052: 	movq	%rax, 0x10(%rsp)
    00000057: 	movq	$0x0, 0xa0(%rbp)
    00000062: 	movups	%xmm0, 0xa8(%rbp)
    00000069: 	testq	%r14, %r14
    0000006c: 	jle	.Ltmp6132 # Offset: 108
    00000072: 	movq	%r12, 0x8(%rsp)
    00000077: 	sarq	$0x3, %r14
    0000007b: 	leaq	0x50(%rsp), %r13
    00000080: 	movq	%r15, 0x18(%rsp)
    00000085: 	movq	%r14, (%rsp)
    00000089: 	movq	%rbp, %r14
.Ltmp6139:
    0000008c: 	movq	0x48(%r14), %r12
    00000090: 	movq	0x30(%r14), %rbp
    00000094: 	movq	0x38(%r14), %r9
    00000098: 	movq	%r12, %rax
    0000009b: 	subq	0x28(%r14), %rax
    0000009f: 	movq	%rbp, %rsi
    000000a2: 	sarq	$0x3, %rax
    000000a6: 	cmpq	$0x1, %r12
    000000aa: 	adcq	$-0x1, %rax
    000000ae: 	subq	%r9, %rsi
    000000b1: 	sarq	$0x3, %rsi
    000000b5: 	shlq	$0x6, %rax
    000000b9: 	addq	%rsi, %rax
    000000bc: 	movq	0x20(%r14), %rsi
    000000c0: 	subq	0x10(%r14), %rsi
    000000c4: 	sarq	$0x3, %rsi
    000000c8: 	addq	%rsi, %rax
    000000cb: 	je	.Ltmp6133 # Offset: 203
.Ltmp6164:
    000000d1: 	cmpq	%r9, %rbp
    000000d4: 	je	.Ltmp6134 # Offset: 212
    000000da: 	leaq	-0x8(%rbp), %rax
    000000de: 	movq	-0x8(%rbp), %rbx
    000000e2: 	movq	%rax, 0x30(%r14)
.Ltmp6158:
    000000e6: 	movq	0x60(%r14), %rdx
    000000ea: 	movq	0x78(%r14), %rsi
    000000ee: 	movq	%rdx, %rax
    000000f1: 	subq	0x68(%r14), %rax
    000000f5: 	sarq	$0x5, %rax
    000000f9: 	addq	%rbx, %rax
    000000fc: 	js	.Ltmp6135 # Offset: 252
    00000102: 	cmpq	$0xf, %rax
    00000106: 	jg	.Ltmp6136 # Offset: 262
    0000010c: 	movq	%rbx, %rax
    0000010f: 	shlq	$0x5, %rax
    00000113: 	addq	%rdx, %rax
    00000116: 	movq	%rbx, 0x18(%rax)
.Ltmp6153:
    0000011a: 	movq	0xb0(%r14), %rdx
    00000121: 	movq	$0x0, (%rax)
    00000128: 	movq	$0x0, 0x8(%rax)
    00000130: 	movq	%rdx, 0x10(%rax)
    00000134: 	testq	%rdx, %rdx
    00000137: 	je	.Ltmp6137 # Offset: 311
    00000139: 	movq	%rax, 0x8(%rdx)
.Ltmp6137:
    0000013d: 	movq	0xa8(%r14), %rdx
    00000144: 	movq	%rax, 0xb0(%r14)
    0000014b: 	testq	%rdx, %rdx
    0000014e: 	je	.Ltmp6138 # Offset: 334
    00000154: 	addq	$0x1, 0xa0(%r14)
    0000015c: 	subq	$0x1, (%rsp)
    00000161: 	jne	.Ltmp6139 # Offset: 353
    00000167: 	movq	0x8(%rsp), %r12
    0000016c: 	movq	0x18(%rsp), %r15
    00000171: 	movq	%r14, %rbp
.Ltmp6132:
    00000174: 	pxor	%xmm2, %xmm2
    00000178: 	movapd	%xmm2, %xmm1
    0000017c: 	cmpq	%r12, %r15
    0000017f: 	je	.Ltmp6140 # Offset: 383
.Ltmp6141:
    00000181: 	movsd	(%r12), %xmm0
    00000187: 	movq	%rdx, %rax
    0000018a: 	addq	$0x8, %r12
    0000018e: 	movq	0x8(%rdx), %rdx
    00000192: 	addsd	%xmm0, %xmm1
    00000196: 	movsd	%xmm0, (%rax)
    0000019a: 	cmpq	%r12, %r15
    0000019d: 	jne	.Ltmp6141 # Offset: 413
.Ltmp6140:
    0000019f: 	movsd	%xmm2, 0x8(%rsp)
    000001a5: 	movsd	%xmm1, (%rsp)
    000001aa: 	callq	clock@PLT # Offset: 426
    000001af: 	movsd	(%rsp), %xmm1
    000001b4: 	movl	iterations(%rip), %r8d
    000001bb: 	movq	%rax, start_time(%rip)
    000001c2: 	movsd	0x8(%rsp), %xmm2
    000001c8: 	testl	%r8d, %r8d
    000001cb: 	jle	.Ltmp6142 # Offset: 459
    000001d1: 	movq	0x80(%rbp), %rbx
    000001d8: 	movq	0x60(%rbp), %r13
    000001dc: 	xorl	%r12d, %r12d
    000001df: 	leaq	DATAat0x52360(%rip), %rcx
    000001e6: 	movq	0x70(%rbp), %r15
    000001ea: 	movq	0x78(%rbp), %r14
.Ltmp6150:
    000001ee: 	cmpq	%r13, %rbx
    000001f1: 	je	.Ltmp6143 # Offset: 497
.Ltmp6159:
    000001f7: 	movq	%r13, %rdi
    000001fa: 	movq	%r15, %rdx
    000001fd: 	movapd	%xmm2, %xmm0
    00000201: 	movq	%r14, %rsi
    00000204: 	leaq	0x20(%rdi), %rax
    00000208: 	cmpq	%rax, %rdx
    0000020b: 	je	.Ltmp6144 # Offset: 523
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp6147:
    00000218: 	cmpq	%rbx, %rax
    0000021b: 	je	.Ltmp6145 # Offset: 539
.Ltmp6148:
    0000021d: 	cmpq	$-0x1, 0x18(%rax)
    00000222: 	jne	.Ltmp6146 # Offset: 546
    00000228: 	addq	$0x20, %rax
    0000022c: 	cmpq	%rax, %rdx
    0000022f: 	jne	.Ltmp6147 # Offset: 559
    00000231: 	movq	0x8(%rsi), %rax
    00000235: 	addq	$0x8, %rsi
    00000239: 	leaq	0x200(%rax), %rdx
    00000240: 	cmpq	%rbx, %rax
    00000243: 	jne	.Ltmp6148 # Offset: 579
.Ltmp6145:
    00000245: 	addsd	(%rdi), %xmm0
.Ltmp6160:
    00000249: 	ucomisd	%xmm0, %xmm1
    0000024d: 	jp	.Ltmp6149 # Offset: 589
    00000253: 	jne	.Ltmp6149 # Offset: 595
    00000259: 	addl	$0x1, %r12d
    0000025d: 	cmpl	%r8d, %r12d
    00000260: 	jl	.Ltmp6150 # Offset: 608
.Ltmp6142:
    00000262: 	movq	0x40(%rsp), %rdi
    00000267: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 615
    0000026c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000273: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000027a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000281: 	je	.Ltmp6151 # Offset: 641
.Ltmp6165:
    00000287: 	movq	-0x20(%rax), %r12
    0000028b: 	callq	clock@PLT # Offset: 651
    00000290: 	pxor	%xmm0, %xmm0
    00000294: 	movq	%rax, end_time(%rip)
    0000029b: 	movq	%r12, %rdi
    0000029e: 	subq	start_time(%rip), %rax
    000002a5: 	cvtsi2sd	%rax, %xmm0
    000002aa: 	divsd	DATAat0x53788(%rip), %xmm0
    000002b2: 	callq	_Z13record_resultdPKc # Offset: 690
    000002b7: 	movq	0x10(%rsp), %rdi
    000002bc: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 700
    000002c1: 	movq	%rbp, %rdi
    000002c4: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 708
    000002c9: 	movq	0x58(%rsp), %rax
    000002ce: 	subq	%fs:0x28, %rax
    000002d7: 	jne	.Ltmp6152 # Offset: 727
    000002dd: 	addq	$0x68, %rsp
    000002e1: 	movq	%rbp, %rdi
    000002e4: 	movl	$0xb8, %esi
    000002e9: 	popq	%rbx
    000002ea: 	popq	%rbp
    000002eb: 	popq	%r12
    000002ed: 	popq	%r13
    000002ef: 	popq	%r14
    000002f1: 	popq	%r15
    000002f3: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 755
.Ltmp6136:
    000002f8: 	movq	%rax, %rdx
    000002fb: 	andl	$0xf, %eax
    000002fe: 	sarq	$0x4, %rdx
    00000302: 	shlq	$0x5, %rax
    00000306: 	addq	(%rsi,%rdx,8), %rax
    0000030a: 	movq	%rbx, 0x18(%rax)
    0000030e: 	jmp	.Ltmp6153 # Offset: 782
.Ltmp6133:
    00000313: 	movq	0x98(%r14), %rdi
    0000031a: 	movq	0x78(%r14), %rax
    0000031e: 	movq	0x70(%r14), %rsi
    00000322: 	movq	0x80(%r14), %r11
    00000329: 	movq	%rdi, %r8
    0000032c: 	movq	0x60(%r14), %r10
    00000330: 	subq	%rax, %r8
    00000333: 	sarq	$0x3, %r8
    00000337: 	cmpq	$0x1, %rdi
    0000033b: 	adcq	$-0x1, %r8
    0000033f: 	subq	0x88(%r14), %r11
    00000346: 	sarq	$0x5, %r11
    0000034a: 	shlq	$0x4, %r8
    0000034e: 	addq	%r11, %r8
    00000351: 	movq	%rsi, %r11
    00000354: 	subq	%r10, %r11
    00000357: 	sarq	$0x5, %r11
    0000035b: 	leaq	(%r8,%r11), %r15
    0000035f: 	leaq	0x80(%r15), %rbx
    00000366: 	cmpq	%rbx, %r15
    00000369: 	jb	.Ltmp6154 # Offset: 873
    0000036f: 	movq	0x68(%r14), %r8
    00000373: 	movq	%r10, %r11
    00000376: 	subq	%r8, %r11
    00000379: 	sarq	$0x5, %r11
    0000037d: 	addq	%rbx, %r11
    00000380: 	js	.Ltmp6155 # Offset: 896
    00000386: 	cmpq	$0xf, %r11
    0000038a: 	jg	.Ltmp6156 # Offset: 906
    00000390: 	shlq	$0x5, %rbx
    00000394: 	addq	%rbx, %r10
    00000397: 	jmp	.Ltmp6157 # Offset: 919
    0000039c: 	nopl	(%rax) # Size: 4
.Ltmp6138:
    000003a0: 	addq	$0x1, 0xa0(%r14)
    000003a8: 	subq	$0x1, (%rsp)
    000003ad: 	movq	%rax, 0xa8(%r14)
    000003b4: 	jne	.Ltmp6139 # Offset: 948
    000003ba: 	movq	0x8(%rsp), %r12
    000003bf: 	movq	0x18(%rsp), %r15
    000003c4: 	movq	%r14, %rbp
    000003c7: 	movq	%rax, %rdx
    000003ca: 	jmp	.Ltmp6132 # Offset: 970
.Ltmp6134:
    000003cf: 	movq	-0x8(%r12), %rax
    000003d4: 	movl	$0x200, %esi
    000003d9: 	movq	%rbp, %rdi
    000003dc: 	movq	0x1f8(%rax), %rbx
    000003e3: 	callq	_ZdlPvm@PLT # Offset: 995
    000003e8: 	movq	-0x8(%r12), %rax
    000003ed: 	leaq	-0x8(%r12), %rdx
    000003f2: 	movq	%rdx, %xmm6
    000003f7: 	addq	$0x1f8, %rax
    000003fd: 	movq	%rax, %xmm0
    00000402: 	movq	-0x8(%r12), %rax
    00000407: 	movhps	-0x8(%r12), %xmm0
    0000040d: 	addq	$0x200, %rax
    00000413: 	movups	%xmm0, 0x30(%r14)
    00000418: 	movq	%rax, %xmm0
    0000041d: 	punpcklqdq	%xmm6, %xmm0
    00000421: 	movups	%xmm0, 0x40(%r14)
    00000426: 	jmp	.Ltmp6158 # Offset: 1062
.Ltmp6135:
    0000042b: 	movq	%rax, %rdx
    0000042e: 	notq	%rdx
    00000431: 	shrq	$0x4, %rdx
    00000435: 	notq	%rdx
    00000438: 	movq	%rdx, %rdi
    0000043b: 	shlq	$0x4, %rdi
    0000043f: 	subq	%rdi, %rax
    00000442: 	shlq	$0x5, %rax
    00000446: 	addq	(%rsi,%rdx,8), %rax
    0000044a: 	movq	%rbx, 0x18(%rax)
    0000044e: 	jmp	.Ltmp6153 # Offset: 1102
    00000453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6146:
    00000458: 	addsd	(%rdi), %xmm0
    0000045c: 	movq	%rax, %rdi
    0000045f: 	leaq	0x20(%rdi), %rax
    00000463: 	cmpq	%rax, %rdx
    00000466: 	jne	.Ltmp6147 # Offset: 1126
.Ltmp6144:
    0000046c: 	movq	0x8(%rsi), %rax
    00000470: 	addq	$0x8, %rsi
    00000474: 	leaq	0x200(%rax), %rdx
    0000047b: 	jmp	.Ltmp6147 # Offset: 1147
.Ltmp6149:
    00000480: 	movl	current_test(%rip), %edx
    00000486: 	movq	%rcx, %rsi
    00000489: 	xorl	%eax, %eax
    0000048b: 	movl	$0x1, %edi
    00000490: 	movsd	%xmm2, 0x8(%rsp)
    00000496: 	addl	$0x1, %r12d
    0000049a: 	movsd	%xmm1, (%rsp)
    0000049f: 	callq	__printf_chk@PLT # Offset: 1183
    000004a4: 	movsd	(%rsp), %xmm1
    000004a9: 	movl	iterations(%rip), %r8d
    000004b0: 	leaq	DATAat0x52360(%rip), %rcx
    000004b7: 	movsd	0x8(%rsp), %xmm2
    000004bd: 	cmpl	%r8d, %r12d
    000004c0: 	jge	.Ltmp6142 # Offset: 1216
    000004c6: 	cmpq	%r13, %rbx
    000004c9: 	jne	.Ltmp6159 # Offset: 1225
.Ltmp6143:
    000004cf: 	movapd	%xmm2, %xmm0
    000004d3: 	jmp	.Ltmp6160 # Offset: 1235
.Ltmp6154:
    000004d8: 	movq	0x10(%rsp), %rdi
    000004dd: 	movl	$0x80, %esi
    000004e2: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 1250
    000004e7: 	movq	0x30(%r14), %rbp
    000004eb: 	movq	0x40(%r14), %rdx
    000004ef: 	jmp	.Ltmp6161 # Offset: 1263
    000004f1: 	nopl	(%rax) # Size: 7
.Ltmp6163:
    000004f8: 	movq	%rbx, (%rbp)
    000004fc: 	addq	$0x8, %rbp
    00000500: 	movq	%rbp, 0x30(%r14)
    00000504: 	cmpq	%rbx, %r15
    00000507: 	je	.Ltmp6162 # Offset: 1287
.Ltmp6161:
    00000509: 	subq	$0x1, %rbx
    0000050d: 	leaq	-0x8(%rdx), %rax
    00000511: 	movq	%rbx, 0x50(%rsp)
    00000516: 	cmpq	%rax, %rbp
    00000519: 	jne	.Ltmp6163 # Offset: 1305
    0000051b: 	movq	%r13, %rsi
    0000051e: 	movq	%r14, %rdi
    00000521: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 1313
    00000526: 	movq	0x30(%r14), %rbp
    0000052a: 	cmpq	%rbx, %r15
    0000052d: 	je	.Ltmp6162 # Offset: 1325
    0000052f: 	movq	0x40(%r14), %rdx
    00000533: 	jmp	.Ltmp6161 # Offset: 1331
.Ltmp6162:
    00000535: 	movq	0x38(%r14), %r9
    00000539: 	movq	0x48(%r14), %r12
    0000053d: 	jmp	.Ltmp6164 # Offset: 1341
.Ltmp6151:
    00000542: 	movq	-0x8(%rdx), %rax
    00000546: 	addq	$0x200, %rax
    0000054c: 	jmp	.Ltmp6165 # Offset: 1356
.Ltmp6155:
    00000551: 	movq	%r11, %r10
    00000554: 	notq	%r10
    00000557: 	shrq	$0x4, %r10
    0000055b: 	notq	%r10
.Ltmp6168:
    0000055e: 	movq	%r10, %rbx
    00000561: 	leaq	(%rax,%r10,8), %rax
    00000565: 	movq	%r11, %r10
    00000568: 	shlq	$0x4, %rbx
    0000056c: 	movq	(%rax), %r8
    0000056f: 	subq	%rbx, %r10
    00000572: 	shlq	$0x5, %r10
    00000576: 	leaq	0x200(%r8), %rsi
    0000057d: 	addq	%r8, %r10
.Ltmp6157:
    00000580: 	movq	%r10, %xmm3
    00000585: 	movq	%r8, %xmm5
    0000058a: 	movq	%rsi, %xmm4
    0000058f: 	movq	%rax, %xmm6
    00000594: 	punpcklqdq	%xmm5, %xmm3
    00000598: 	leaq	0x8(%rdi), %r15
    0000059c: 	punpcklqdq	%xmm6, %xmm4
    000005a0: 	leaq	0x8(%rax), %rbx
    000005a4: 	movaps	%xmm3, 0x20(%rsp)
    000005a9: 	movaps	%xmm4, 0x30(%rsp)
    000005ae: 	cmpq	%rbx, %r15
    000005b1: 	jbe	.Ltmp6166 # Offset: 1457
    000005b3: 	movq	%r9, 0x48(%rsp)
.Ltmp6167:
    000005b8: 	movq	(%rbx), %rdi
    000005bb: 	movl	$0x200, %esi
    000005c0: 	addq	$0x8, %rbx
    000005c4: 	callq	_ZdlPvm@PLT # Offset: 1476
    000005c9: 	cmpq	%rbx, %r15
    000005cc: 	ja	.Ltmp6167 # Offset: 1484
    000005ce: 	movq	0x48(%rsp), %r9
.Ltmp6166:
    000005d3: 	movdqa	0x20(%rsp), %xmm7
    000005d9: 	movdqa	0x30(%rsp), %xmm5
    000005df: 	movups	%xmm7, 0x80(%r14)
    000005e7: 	movups	%xmm5, 0x90(%r14)
    000005ef: 	jmp	.Ltmp6164 # Offset: 1519
.Ltmp6156:
    000005f4: 	movq	%r11, %r10
    000005f7: 	sarq	$0x4, %r10
    000005fb: 	jmp	.Ltmp6168 # Offset: 1531
.Ltmp6152:
    00000600: 	callq	__stack_chk_fail@PLT # Offset: 1536
    00000605: 	endbr64
    00000609: 	movq	%rax, %r12
    0000060c: 	movq	%rbp, %rdi
    0000060f: 	movl	$0xb8, %esi
    00000614: 	callq	_ZdlPvm@PLT # Offset: 1556
    00000619: 	movq	%r12, %rdi
    0000061c: 	callq	_Unwind_Resume@PLT # Offset: 1564
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_accum_unorderedId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_pushbackId20PooledDoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 330
  State       : disassembled
  Address     : 0x408c0
  Size        : 0xcbd
  MaxSize     : 0xcc0
  Offset      : 0x408c0
  Section     : .text
  Orc Section : .local.text._Z13test_pushbackId20PooledDoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0329:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xe8, %rsp
    00000015: 	movq	%rdi, 0x10(%rsp)
    0000001a: 	leaq	0xc0(%rsp), %r12
    00000022: 	movq	%rsi, 0x18(%rsp)
    00000027: 	movq	%rdx, 0x88(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0xd8(%rsp)
    00000040: 	xorl	%eax, %eax
    00000042: 	callq	clock@PLT # Offset: 66
    00000047: 	movl	$0x0, 0x8(%rsp)
    0000004f: 	movq	%rax, start_time(%rip)
    00000056: 	movl	iterations(%rip), %eax
    0000005c: 	testl	%eax, %eax
    0000005e: 	jle	.Ltmp6169 # Offset: 94
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp6176:
    00000068: 	movl	$0xb8, %edi
    0000006d: 	callq	_Znwm@PLT # Offset: 109
    00000072: 	movq	%rax, %rdi
    00000075: 	movq	%rax, %rbp
    00000078: 	callq	_ZN27DoubleLinkListPoolAllocatorIdEC2Ev # Offset: 120
    0000007d: 	movq	0x48(%rbp), %rdx
    00000081: 	movq	0x30(%rbp), %r15
    00000085: 	pxor	%xmm2, %xmm2
    00000089: 	leaq	0x50(%rbp), %r14
    0000008d: 	movq	0x38(%rbp), %r8
    00000091: 	movups	%xmm2, 0xa8(%rbp)
    00000098: 	movq	%rdx, %rax
    0000009b: 	subq	0x28(%rbp), %rax
    0000009f: 	movq	%r15, %rcx
    000000a2: 	movq	$0x0, 0xa0(%rbp)
    000000ad: 	sarq	$0x3, %rax
    000000b1: 	cmpq	$0x1, %rdx
    000000b5: 	adcq	$-0x1, %rax
    000000b9: 	subq	%r8, %rcx
    000000bc: 	sarq	$0x3, %rcx
    000000c0: 	shlq	$0x6, %rax
    000000c4: 	addq	%rcx, %rax
    000000c7: 	movq	0x20(%rbp), %rcx
    000000cb: 	subq	0x10(%rbp), %rcx
    000000cf: 	sarq	$0x3, %rcx
    000000d3: 	addq	%rcx, %rax
    000000d6: 	je	.Ltmp6170 # Offset: 214
.Ltmp6212:
    000000dc: 	cmpq	%r15, %r8
    000000df: 	je	.Ltmp6171 # Offset: 223
.Ltmp6207:
    000000e5: 	movq	-0x8(%r15), %rbx
    000000e9: 	subq	$0x8, %r15
    000000ed: 	movq	%r15, 0x30(%rbp)
.Ltmp6208:
    000000f1: 	movq	0x60(%rbp), %rcx
    000000f5: 	movq	0x78(%rbp), %rdx
    000000f9: 	movq	%rcx, %rax
    000000fc: 	subq	0x68(%rbp), %rax
    00000100: 	sarq	$0x5, %rax
    00000104: 	addq	%rbx, %rax
    00000107: 	js	.Ltmp6172 # Offset: 263
    0000010d: 	cmpq	$0xf, %rax
    00000111: 	jg	.Ltmp6173 # Offset: 273
    00000117: 	movq	%rbx, %rax
    0000011a: 	shlq	$0x5, %rax
    0000011e: 	addq	%rcx, %rax
    00000121: 	movq	%rbx, 0x18(%rax)
.Ltmp6201:
    00000125: 	movq	0x10(%rsp), %rdx
    0000012a: 	movsd	(%rdx), %xmm0
    0000012e: 	movq	0xb0(%rbp), %rdx
    00000135: 	movq	$0x0, 0x8(%rax)
    0000013d: 	movq	%rdx, 0x10(%rax)
    00000141: 	movsd	%xmm0, (%rax)
    00000145: 	testq	%rdx, %rdx
    00000148: 	je	.Ltmp6174 # Offset: 328
    0000014a: 	movq	%rax, 0x8(%rdx)
.Ltmp6174:
    0000014e: 	cmpq	$0x0, 0xa8(%rbp)
    00000156: 	movq	%rax, 0xb0(%rbp)
    0000015d: 	je	.Ltmp6175 # Offset: 349
    00000163: 	addq	$0x1, 0xa0(%rbp)
    0000016b: 	movq	%r14, %rdi
    0000016e: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 366
    00000173: 	movq	%rbp, %rdi
    00000176: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 374
    0000017b: 	movl	$0xb8, %esi
    00000180: 	movq	%rbp, %rdi
    00000183: 	callq	_ZdlPvm@PLT # Offset: 387
    00000188: 	addl	$0x1, 0x8(%rsp)
    0000018d: 	movl	0x8(%rsp), %eax
    00000191: 	cmpl	%eax, iterations(%rip)
    00000197: 	jg	.Ltmp6176 # Offset: 407
.Ltmp6169:
    0000019d: 	callq	clock@PLT # Offset: 413
    000001a2: 	movq	0x18(%rsp), %rcx
    000001a7: 	xorl	%edx, %edx
    000001a9: 	subq	0x10(%rsp), %rcx
    000001ae: 	movq	%rax, 0x78(%rsp)
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	movq	start_time(%rip), %rax
    000001c1: 	movq	%rax, 0x80(%rsp)
    000001c9: 	movabsq	$0x500000000, %rax
    000001d3: 	divq	%rcx
    000001d6: 	movq	%rax, 0x8(%rsp)
    000001db: 	cmpq	$0x3e8, %rax
    000001e1: 	ja	.Ltmp6177 # Offset: 481
    000001e7: 	cmpq	$0x3, 0x8(%rsp)
    000001ed: 	ja	.Ltmp6178 # Offset: 493
    000001f3: 	movq	$0x0, 0xd0(%rsp)
    000001ff: 	pxor	%xmm0, %xmm0
    00000203: 	movq	$0x4, 0x8(%rsp)
    0000020c: 	movaps	%xmm0, 0xc0(%rsp)
.Ltmp6225:
    00000214: 	movq	0x8(%rsp), %rbx
    00000219: 	leaq	0xc0(%rsp), %rdi
    00000221: 	movq	%rbx, %rsi
    00000224: 	callq	_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 548
    00000229: 	movq	0xc0(%rsp), %rdx
    00000231: 	movl	iterations(%rip), %eax
    00000237: 	movq	%rdx, 0x50(%rsp)
    0000023c: 	testl	%eax, %eax
    0000023e: 	jle	.Ltmp6179 # Offset: 574
    00000244: 	addq	$0x8, %rdx
    00000248: 	movl	%ebx, 0x64(%rsp)
    0000024c: 	pxor	%xmm5, %xmm5
    00000250: 	leaq	0xb8(%rsp), %r14
    00000258: 	movl	$0x0, 0x20(%rsp)
    00000260: 	movq	%rdx, 0x70(%rsp)
    00000265: 	movsd	%xmm5, 0x58(%rsp)
.Ltmp6197:
    0000026b: 	movslq	0x20(%rsp), %rdx
    00000270: 	movslq	%eax, %rcx
    00000273: 	movq	%rdx, %rsi
    00000276: 	addq	0x8(%rsp), %rdx
    0000027b: 	subl	%esi, %eax
    0000027d: 	cmpq	%rcx, %rdx
    00000280: 	cmovbl	0x64(%rsp), %eax
    00000285: 	movl	%eax, %ebx
    00000287: 	callq	clock@PLT # Offset: 647
    0000028c: 	movq	0x70(%rsp), %rsi
    00000291: 	movq	0x50(%rsp), %rdx
    00000296: 	movq	%rax, start_time(%rip)
    0000029d: 	leal	-0x1(%rbx), %eax
    000002a0: 	leaq	(%rsi,%rax,8), %rax
    000002a4: 	movq	%rdx, 0x68(%rsp)
    000002a9: 	movq	%rax, 0x40(%rsp)
    000002ae: 	movq	%rdx, 0x30(%rsp)
.Ltmp6188:
    000002b3: 	movl	$0xb8, %edi
    000002b8: 	callq	_Znwm@PLT # Offset: 696
    000002bd: 	movq	$0x0, (%rax)
    000002c4: 	pxor	%xmm3, %xmm3
    000002c8: 	xorl	%esi, %esi
    000002ca: 	movq	%rax, %rdi
    000002cd: 	movq	$0x0, 0x8(%rax)
    000002d5: 	movq	%rax, %rbp
    000002d8: 	movups	%xmm3, 0x10(%rax)
    000002dc: 	movups	%xmm3, 0x20(%rax)
    000002e0: 	movups	%xmm3, 0x30(%rax)
    000002e4: 	movups	%xmm3, 0x40(%rax)
    000002e8: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 744
    000002ed: 	movq	$0x0, 0x50(%rbp)
    000002f5: 	pxor	%xmm3, %xmm3
    000002f9: 	movl	$0x40, %edi
    000002fe: 	movq	$0x8, 0x58(%rbp)
    00000306: 	movups	%xmm3, 0x60(%rbp)
    0000030a: 	movups	%xmm3, 0x70(%rbp)
    0000030e: 	movups	%xmm3, 0x80(%rbp)
    00000315: 	movups	%xmm3, 0x90(%rbp)
    0000031c: 	callq	_Znwm@PLT # Offset: 796
    00000321: 	movq	0x58(%rbp), %rdx
    00000325: 	movq	%rax, 0x50(%rbp)
    00000329: 	movl	$0x200, %edi
    0000032e: 	leaq	-0x4(,%rdx,4), %rdx
    00000336: 	andq	$-0x8, %rdx
    0000033a: 	leaq	(%rax,%rdx), %r13
    0000033e: 	callq	_Znwm@PLT # Offset: 830
    00000343: 	movq	%rax, %rdx
    00000346: 	movq	%rax, %xmm1
    0000034b: 	movq	%rax, (%r13)
    0000034f: 	pxor	%xmm3, %xmm3
    00000353: 	leaq	0x200(%rax), %rax
    0000035a: 	movq	%r13, %xmm5
    0000035f: 	punpcklqdq	%xmm1, %xmm1
    00000363: 	movq	$0x0, 0xa0(%rbp)
    0000036e: 	movq	%rax, %xmm0
    00000373: 	leaq	0x50(%rbp), %rax
    00000377: 	movups	%xmm1, 0x60(%rbp)
    0000037b: 	movq	%rdx, %rcx
    0000037e: 	movq	%rax, 0x48(%rsp)
    00000383: 	movq	0x10(%rsp), %rax
    00000388: 	punpcklqdq	%xmm5, %xmm0
    0000038c: 	movups	%xmm0, 0x70(%rbp)
    00000390: 	movups	%xmm1, 0x80(%rbp)
    00000397: 	movq	%rax, %r15
    0000039a: 	movups	%xmm0, 0x90(%rbp)
    000003a1: 	movups	%xmm3, 0xa8(%rbp)
    000003a8: 	cmpq	%rax, 0x18(%rsp)
    000003ad: 	je	.Ltmp6180 # Offset: 941
    000003b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6187:
    000003b8: 	movq	0x48(%rbp), %rsi
    000003bc: 	movq	0x30(%rbp), %rdi
    000003c0: 	addq	$0x8, %r15
    000003c4: 	movq	0x38(%rbp), %r8
    000003c8: 	movq	%rsi, %rax
    000003cb: 	subq	0x28(%rbp), %rax
    000003cf: 	movq	%rdi, %r9
    000003d2: 	sarq	$0x3, %rax
    000003d6: 	cmpq	$0x1, %rsi
    000003da: 	adcq	$-0x1, %rax
    000003de: 	subq	%r8, %r9
    000003e1: 	sarq	$0x3, %r9
    000003e5: 	shlq	$0x6, %rax
    000003e9: 	addq	%r9, %rax
    000003ec: 	movq	0x20(%rbp), %r9
    000003f0: 	subq	0x10(%rbp), %r9
    000003f4: 	sarq	$0x3, %r9
    000003f8: 	addq	%r9, %rax
    000003fb: 	je	.Ltmp6181 # Offset: 1019
.Ltmp6224:
    00000401: 	cmpq	%r8, %rdi
    00000404: 	je	.Ltmp6182 # Offset: 1028
.Ltmp6219:
    0000040a: 	movq	-0x8(%rdi), %rbx
    0000040e: 	subq	$0x8, %rdi
    00000412: 	movq	%rdi, 0x30(%rbp)
.Ltmp6220:
    00000416: 	movq	0x60(%rbp), %rdx
    0000041a: 	movq	0x68(%rbp), %rcx
    0000041e: 	movq	0x78(%rbp), %r13
    00000422: 	movq	%rdx, %rax
    00000425: 	subq	%rcx, %rax
    00000428: 	sarq	$0x5, %rax
    0000042c: 	addq	%rbx, %rax
    0000042f: 	js	.Ltmp6183 # Offset: 1071
    00000435: 	cmpq	$0xf, %rax
    00000439: 	jg	.Ltmp6184 # Offset: 1081
    0000043f: 	movq	%rbx, %rax
    00000442: 	shlq	$0x5, %rax
    00000446: 	addq	%rdx, %rax
    00000449: 	movq	%rbx, 0x18(%rax)
.Ltmp6213:
    0000044d: 	movsd	-0x8(%r15), %xmm0
    00000453: 	movq	0xb0(%rbp), %rsi
    0000045a: 	movq	$0x0, 0x8(%rax)
    00000462: 	movq	%rsi, 0x10(%rax)
    00000466: 	movsd	%xmm0, (%rax)
    0000046a: 	testq	%rsi, %rsi
    0000046d: 	je	.Ltmp6185 # Offset: 1133
    0000046f: 	movq	%rax, 0x8(%rsi)
.Ltmp6185:
    00000473: 	cmpq	$0x0, 0xa8(%rbp)
    0000047b: 	movq	%rax, 0xb0(%rbp)
    00000482: 	je	.Ltmp6186 # Offset: 1154
    00000488: 	addq	$0x1, 0xa0(%rbp)
    00000490: 	cmpq	%r15, 0x18(%rsp)
    00000495: 	jne	.Ltmp6187 # Offset: 1173
.Ltmp6180:
    0000049b: 	movq	0x30(%rsp), %rax
    000004a0: 	movq	%rbp, (%rax)
    000004a3: 	addq	$0x8, %rax
    000004a7: 	movq	%rax, 0x30(%rsp)
    000004ac: 	cmpq	0x40(%rsp), %rax
    000004b1: 	jne	.Ltmp6188 # Offset: 1201
    000004b7: 	callq	clock@PLT # Offset: 1207
    000004bc: 	pxor	%xmm0, %xmm0
    000004c0: 	movq	0x68(%rsp), %r12
    000004c5: 	movq	0x40(%rsp), %r13
    000004ca: 	movq	%rax, end_time(%rip)
    000004d1: 	subq	start_time(%rip), %rax
    000004d8: 	cvtsi2sd	%rax, %xmm0
    000004dd: 	divsd	DATAat0x53788(%rip), %xmm0
    000004e5: 	addsd	0x58(%rsp), %xmm0
    000004eb: 	movsd	%xmm0, 0x58(%rsp)
.Ltmp6196:
    000004f1: 	movq	(%r12), %rbp
    000004f5: 	testq	%rbp, %rbp
    000004f8: 	je	.Ltmp6189 # Offset: 1272
    000004fe: 	movq	0x50(%rbp), %rdi
    00000502: 	testq	%rdi, %rdi
    00000505: 	je	.Ltmp6190 # Offset: 1285
    00000507: 	movq	0x98(%rbp), %rax
    0000050e: 	movq	0x78(%rbp), %rbx
    00000512: 	leaq	0x8(%rax), %r15
    00000516: 	cmpq	%rbx, %r15
    00000519: 	jbe	.Ltmp6191 # Offset: 1305
    0000051b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6192:
    00000520: 	movq	(%rbx), %rdi
    00000523: 	movl	$0x200, %esi
    00000528: 	addq	$0x8, %rbx
    0000052c: 	callq	_ZdlPvm@PLT # Offset: 1324
    00000531: 	cmpq	%rbx, %r15
    00000534: 	ja	.Ltmp6192 # Offset: 1332
    00000536: 	movq	0x50(%rbp), %rdi
.Ltmp6191:
    0000053a: 	movq	0x58(%rbp), %rax
    0000053e: 	leaq	(,%rax,8), %rsi
    00000546: 	callq	_ZdlPvm@PLT # Offset: 1350
.Ltmp6190:
    0000054b: 	movq	(%rbp), %rdi
    0000054f: 	testq	%rdi, %rdi
    00000552: 	je	.Ltmp6193 # Offset: 1362
    00000554: 	movq	0x48(%rbp), %rax
    00000558: 	movq	0x28(%rbp), %rbx
    0000055c: 	leaq	0x8(%rax), %r15
    00000560: 	cmpq	%rbx, %r15
    00000563: 	jbe	.Ltmp6194 # Offset: 1379
    00000565: 	nopl	(%rax) # Size: 3
.Ltmp6195:
    00000568: 	movq	(%rbx), %rdi
    0000056b: 	movl	$0x200, %esi
    00000570: 	addq	$0x8, %rbx
    00000574: 	callq	_ZdlPvm@PLT # Offset: 1396
    00000579: 	cmpq	%rbx, %r15
    0000057c: 	ja	.Ltmp6195 # Offset: 1404
    0000057e: 	movq	(%rbp), %rdi
.Ltmp6194:
    00000582: 	movq	0x8(%rbp), %rax
    00000586: 	leaq	(,%rax,8), %rsi
    0000058e: 	callq	_ZdlPvm@PLT # Offset: 1422
.Ltmp6193:
    00000593: 	movl	$0xb8, %esi
    00000598: 	movq	%rbp, %rdi
    0000059b: 	callq	_ZdlPvm@PLT # Offset: 1435
.Ltmp6189:
    000005a0: 	movq	$0x0, (%r12)
    000005a8: 	addq	$0x8, %r12
    000005ac: 	cmpq	%r13, %r12
    000005af: 	jne	.Ltmp6196 # Offset: 1455
    000005b5: 	movl	0x8(%rsp), %edx
    000005b9: 	movl	iterations(%rip), %eax
    000005bf: 	addl	%edx, 0x20(%rsp)
    000005c3: 	movl	0x20(%rsp), %edx
    000005c7: 	cmpl	%edx, %eax
    000005c9: 	jg	.Ltmp6197 # Offset: 1481
.Ltmp6231:
    000005cf: 	movq	0x88(%rsp), %rdi
    000005d7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1495
    000005dc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005e3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000005ea: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005f1: 	je	.Ltmp6198 # Offset: 1521
.Ltmp6230:
    000005f7: 	movsd	0x58(%rsp), %xmm1
    000005fd: 	movq	-0x20(%rax), %rdi
    00000601: 	pxor	%xmm0, %xmm0
    00000605: 	movq	0x78(%rsp), %rax
    0000060a: 	subq	0x80(%rsp), %rax
    00000612: 	cvtsi2sd	%rax, %xmm0
    00000617: 	divsd	DATAat0x53788(%rip), %xmm0
    0000061f: 	subsd	%xmm0, %xmm1
    00000623: 	movapd	%xmm1, %xmm0
    00000627: 	callq	_Z13record_resultdPKc # Offset: 1575
    0000062c: 	cmpq	$0x0, 0x50(%rsp)
    00000632: 	je	.Ltmp6199 # Offset: 1586
    00000638: 	movq	0xd8(%rsp), %rax
    00000640: 	subq	%fs:0x28, %rax
    00000649: 	jne	.Ltmp6200 # Offset: 1609
    0000064f: 	movq	0xd0(%rsp), %rsi
    00000657: 	movq	0x50(%rsp), %rdi
    0000065c: 	addq	$0xe8, %rsp
    00000663: 	popq	%rbx
    00000664: 	popq	%rbp
    00000665: 	subq	%rdi, %rsi
    00000668: 	popq	%r12
    0000066a: 	popq	%r13
    0000066c: 	popq	%r14
    0000066e: 	popq	%r15
    00000670: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1648
    00000675: 	nopl	(%rax) # Size: 3
.Ltmp6173:
    00000678: 	movq	%rax, %rcx
    0000067b: 	andl	$0xf, %eax
    0000067e: 	sarq	$0x4, %rcx
    00000682: 	shlq	$0x5, %rax
    00000686: 	addq	(%rdx,%rcx,8), %rax
    0000068a: 	movq	%rbx, 0x18(%rax)
    0000068e: 	jmp	.Ltmp6201 # Offset: 1678
.Ltmp6170:
    00000693: 	movq	0x98(%rbp), %rsi
    0000069a: 	movq	0x78(%rbp), %rcx
    0000069e: 	movq	0x70(%rbp), %rdi
    000006a2: 	movq	0x80(%rbp), %rax
    000006a9: 	movq	%rsi, %r10
    000006ac: 	movq	0x60(%rbp), %r9
    000006b0: 	subq	%rcx, %r10
    000006b3: 	sarq	$0x3, %r10
    000006b7: 	cmpq	$0x1, %rsi
    000006bb: 	adcq	$-0x1, %r10
    000006bf: 	subq	0x88(%rbp), %rax
    000006c6: 	shlq	$0x4, %r10
    000006ca: 	sarq	$0x5, %rax
    000006ce: 	addq	%r10, %rax
    000006d1: 	movq	%rdi, %r10
    000006d4: 	subq	%r9, %r10
    000006d7: 	sarq	$0x5, %r10
    000006db: 	leaq	(%rax,%r10), %r13
    000006df: 	leaq	0x80(%r13), %rbx
    000006e6: 	cmpq	%rbx, %r13
    000006e9: 	jb	.Ltmp6202 # Offset: 1769
    000006ef: 	movq	0x68(%rbp), %r10
    000006f3: 	movq	%r9, %rax
    000006f6: 	subq	%r10, %rax
    000006f9: 	sarq	$0x5, %rax
    000006fd: 	addq	%rbx, %rax
    00000700: 	js	.Ltmp6203 # Offset: 1792
    00000706: 	cmpq	$0xf, %rax
    0000070a: 	jle	.Ltmp6204 # Offset: 1802
    00000710: 	movq	%rax, %r9
    00000713: 	sarq	$0x4, %r9
.Ltmp6226:
    00000717: 	leaq	(%rcx,%r9,8), %rcx
    0000071b: 	shlq	$0x4, %r9
    0000071f: 	movq	(%rcx), %r10
    00000722: 	subq	%r9, %rax
    00000725: 	shlq	$0x5, %rax
    00000729: 	leaq	0x200(%r10), %rdi
    00000730: 	addq	%r10, %rax
.Ltmp6227:
    00000733: 	movq	%rax, %xmm7
    00000738: 	movq	%r10, %xmm6
    0000073d: 	movq	%rcx, %xmm4
    00000742: 	punpcklqdq	%xmm6, %xmm7
    00000746: 	leaq	0x8(%rsi), %r13
    0000074a: 	leaq	0x8(%rcx), %rbx
    0000074e: 	movaps	%xmm7, 0x20(%rsp)
    00000753: 	movq	%rdi, %xmm7
    00000758: 	punpcklqdq	%xmm4, %xmm7
    0000075c: 	movaps	%xmm7, 0x30(%rsp)
    00000761: 	cmpq	%rbx, %r13
    00000764: 	jbe	.Ltmp6205 # Offset: 1892
    00000766: 	movq	%rdx, 0x40(%rsp)
    0000076b: 	movq	%r8, 0x48(%rsp)
.Ltmp6206:
    00000770: 	movq	(%rbx), %rdi
    00000773: 	movl	$0x200, %esi
    00000778: 	addq	$0x8, %rbx
    0000077c: 	callq	_ZdlPvm@PLT # Offset: 1916
    00000781: 	cmpq	%rbx, %r13
    00000784: 	ja	.Ltmp6206 # Offset: 1924
    00000786: 	movq	0x40(%rsp), %rdx
    0000078b: 	movq	0x48(%rsp), %r8
.Ltmp6205:
    00000790: 	movdqa	0x20(%rsp), %xmm7
    00000796: 	movdqa	0x30(%rsp), %xmm6
    0000079c: 	movups	%xmm7, 0x80(%rbp)
    000007a3: 	movups	%xmm6, 0x90(%rbp)
    000007aa: 	cmpq	%r15, %r8
    000007ad: 	jne	.Ltmp6207 # Offset: 1965
.Ltmp6171:
    000007b3: 	movq	-0x8(%rdx), %rax
    000007b7: 	movl	$0x200, %esi
    000007bc: 	movq	%r8, %rdi
    000007bf: 	movq	%rdx, 0x20(%rsp)
    000007c4: 	movq	0x1f8(%rax), %rbx
    000007cb: 	callq	_ZdlPvm@PLT # Offset: 1995
    000007d0: 	movq	0x20(%rsp), %rdx
    000007d5: 	movq	-0x8(%rdx), %rax
    000007d9: 	subq	$0x8, %rdx
    000007dd: 	addq	$0x1f8, %rax
    000007e3: 	movq	%rax, %xmm0
    000007e8: 	movq	(%rdx), %rax
    000007eb: 	movhps	(%rdx), %xmm0
    000007ee: 	movq	%rdx, %xmm4
    000007f3: 	addq	$0x200, %rax
    000007f9: 	movups	%xmm0, 0x30(%rbp)
    000007fd: 	movq	%rax, %xmm0
    00000802: 	punpcklqdq	%xmm4, %xmm0
    00000806: 	movups	%xmm0, 0x40(%rbp)
    0000080a: 	jmp	.Ltmp6208 # Offset: 2058
.Ltmp6175:
    0000080f: 	addq	$0x1, 0xa0(%rbp)
    00000817: 	movq	%r14, %rdi
    0000081a: 	movq	%rax, 0xa8(%rbp)
    00000821: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 2081
    00000826: 	movq	%rbp, %rdi
    00000829: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2089
    0000082e: 	movl	$0xb8, %esi
    00000833: 	movq	%rbp, %rdi
    00000836: 	callq	_ZdlPvm@PLT # Offset: 2102
    0000083b: 	addl	$0x1, 0x8(%rsp)
    00000840: 	movl	0x8(%rsp), %eax
    00000844: 	cmpl	iterations(%rip), %eax
    0000084a: 	jl	.Ltmp6176 # Offset: 2122
    00000850: 	jmp	.Ltmp6169 # Offset: 2128
    00000855: 	nopl	(%rax) # Size: 3
.Ltmp6172:
    00000858: 	movq	%rax, %rcx
    0000085b: 	notq	%rcx
    0000085e: 	shrq	$0x4, %rcx
    00000862: 	notq	%rcx
    00000865: 	movq	%rcx, %rsi
    00000868: 	shlq	$0x4, %rsi
    0000086c: 	subq	%rsi, %rax
    0000086f: 	shlq	$0x5, %rax
    00000873: 	addq	(%rdx,%rcx,8), %rax
    00000877: 	movq	%rbx, 0x18(%rax)
    0000087b: 	jmp	.Ltmp6201 # Offset: 2171
.Ltmp6202:
    00000880: 	movl	$0x80, %esi
    00000885: 	movq	%r14, %rdi
    00000888: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2184
    0000088d: 	movq	0x30(%rbp), %r15
    00000891: 	movq	0x40(%rbp), %rcx
    00000895: 	jmp	.Ltmp6209 # Offset: 2197
    00000897: 	nopw	(%rax,%rax) # Size: 9
.Ltmp6211:
    000008a0: 	movq	%rbx, (%r15)
    000008a3: 	addq	$0x8, %r15
    000008a7: 	movq	%r15, 0x30(%rbp)
    000008ab: 	cmpq	%rbx, %r13
    000008ae: 	je	.Ltmp6210 # Offset: 2222
.Ltmp6209:
    000008b0: 	subq	$0x1, %rbx
    000008b4: 	leaq	-0x8(%rcx), %rax
    000008b8: 	movq	%rbx, 0xc0(%rsp)
    000008c0: 	cmpq	%rax, %r15
    000008c3: 	jne	.Ltmp6211 # Offset: 2243
    000008c5: 	movq	%r12, %rsi
    000008c8: 	movq	%rbp, %rdi
    000008cb: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2251
    000008d0: 	movq	0x30(%rbp), %r15
    000008d4: 	cmpq	%rbx, %r13
    000008d7: 	je	.Ltmp6210 # Offset: 2263
    000008d9: 	movq	0x40(%rbp), %rcx
    000008dd: 	jmp	.Ltmp6209 # Offset: 2269
.Ltmp6210:
    000008df: 	movq	0x38(%rbp), %r8
    000008e3: 	movq	0x48(%rbp), %rdx
    000008e7: 	jmp	.Ltmp6212 # Offset: 2279
.Ltmp6184:
    000008ec: 	movq	%rax, %rsi
    000008ef: 	andl	$0xf, %eax
    000008f2: 	sarq	$0x4, %rsi
    000008f6: 	shlq	$0x5, %rax
    000008fa: 	addq	(%r13,%rsi,8), %rax
    000008ff: 	movq	%rbx, 0x18(%rax)
    00000903: 	jmp	.Ltmp6213 # Offset: 2307
.Ltmp6181:
    00000908: 	movq	0x98(%rbp), %rax
    0000090f: 	movq	0x70(%rbp), %r9
    00000913: 	movq	0x80(%rbp), %r12
    0000091a: 	movq	%rax, %r10
    0000091d: 	subq	%r13, %r10
    00000920: 	sarq	$0x3, %r10
    00000924: 	cmpq	$0x1, %rax
    00000928: 	adcq	$-0x1, %r10
    0000092c: 	subq	0x88(%rbp), %r12
    00000933: 	shlq	$0x4, %r10
    00000937: 	sarq	$0x5, %r12
    0000093b: 	addq	%r10, %r12
    0000093e: 	movq	%r9, %r10
    00000941: 	subq	%rdx, %r10
    00000944: 	sarq	$0x5, %r10
    00000948: 	addq	%r10, %r12
    0000094b: 	leaq	0x80(%r12), %rbx
    00000953: 	cmpq	%rbx, %r12
    00000956: 	jb	.Ltmp6214 # Offset: 2390
    0000095c: 	movq	%rdx, %r10
    0000095f: 	subq	%rcx, %r10
    00000962: 	sarq	$0x5, %r10
    00000966: 	addq	%rbx, %r10
    00000969: 	js	.Ltmp6215 # Offset: 2409
    0000096f: 	cmpq	$0xf, %r10
    00000973: 	jle	.Ltmp6216 # Offset: 2419
    00000979: 	movq	%r10, %rdx
    0000097c: 	sarq	$0x4, %rdx
.Ltmp6229:
    00000980: 	leaq	(%r13,%rdx,8), %r13
    00000985: 	shlq	$0x4, %rdx
    00000989: 	movq	%rdx, %r11
    0000098c: 	movq	%r10, %rdx
    0000098f: 	movq	(%r13), %rcx
    00000993: 	subq	%r11, %rdx
    00000996: 	shlq	$0x5, %rdx
    0000099a: 	leaq	0x200(%rcx), %r9
    000009a1: 	addq	%rcx, %rdx
.Ltmp6228:
    000009a4: 	movq	%r13, %xmm5
    000009a9: 	movq	%rdx, %xmm6
    000009ae: 	movq	%rcx, %xmm7
    000009b3: 	addq	$0x8, %r13
    000009b7: 	movq	%r9, %xmm4
    000009bc: 	punpcklqdq	%xmm7, %xmm6
    000009c0: 	leaq	0x8(%rax), %rbx
    000009c4: 	punpcklqdq	%xmm5, %xmm4
    000009c8: 	movaps	%xmm6, 0x90(%rsp)
    000009d0: 	movaps	%xmm4, 0xa0(%rsp)
    000009d8: 	cmpq	%r13, %rbx
    000009db: 	jbe	.Ltmp6217 # Offset: 2523
    000009dd: 	nopl	(%rax) # Size: 3
.Ltmp6218:
    000009e0: 	movq	(%r13), %rdi
    000009e4: 	movl	$0x200, %esi
    000009e9: 	addq	$0x8, %r13
    000009ed: 	callq	_ZdlPvm@PLT # Offset: 2541
    000009f2: 	cmpq	%r13, %rbx
    000009f5: 	ja	.Ltmp6218 # Offset: 2549
    000009f7: 	movq	0x30(%rbp), %rdi
    000009fb: 	movq	0x38(%rbp), %r8
    000009ff: 	movq	0x48(%rbp), %rsi
.Ltmp6217:
    00000a03: 	movdqa	0x90(%rsp), %xmm7
    00000a0c: 	movdqa	0xa0(%rsp), %xmm4
    00000a15: 	movups	%xmm7, 0x80(%rbp)
    00000a1c: 	movups	%xmm4, 0x90(%rbp)
    00000a23: 	cmpq	%r8, %rdi
    00000a26: 	jne	.Ltmp6219 # Offset: 2598
.Ltmp6182:
    00000a2c: 	movq	-0x8(%rsi), %rax
    00000a30: 	movl	$0x200, %esi
    00000a35: 	movq	0x1f8(%rax), %rbx
    00000a3c: 	callq	_ZdlPvm@PLT # Offset: 2620
    00000a41: 	movq	0x48(%rbp), %rdx
    00000a45: 	movq	-0x8(%rdx), %rax
    00000a49: 	subq	$0x8, %rdx
    00000a4d: 	movq	%rdx, %xmm6
    00000a52: 	leaq	0x1f8(%rax), %rsi
    00000a59: 	movq	%rax, %xmm5
    00000a5e: 	addq	$0x200, %rax
    00000a64: 	movq	%rsi, %xmm0
    00000a69: 	punpcklqdq	%xmm5, %xmm0
    00000a6d: 	movups	%xmm0, 0x30(%rbp)
    00000a71: 	movq	%rax, %xmm0
    00000a76: 	punpcklqdq	%xmm6, %xmm0
    00000a7a: 	movups	%xmm0, 0x40(%rbp)
    00000a7e: 	jmp	.Ltmp6220 # Offset: 2686
.Ltmp6186:
    00000a83: 	addq	$0x1, 0xa0(%rbp)
    00000a8b: 	movq	%rax, 0xa8(%rbp)
    00000a92: 	cmpq	%r15, 0x18(%rsp)
    00000a97: 	jne	.Ltmp6187 # Offset: 2711
    00000a9d: 	jmp	.Ltmp6180 # Offset: 2717
    00000aa2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6183:
    00000aa8: 	movq	%rax, %rsi
    00000aab: 	notq	%rsi
    00000aae: 	shrq	$0x4, %rsi
    00000ab2: 	notq	%rsi
    00000ab5: 	movq	%rsi, %rdi
    00000ab8: 	shlq	$0x4, %rdi
    00000abc: 	subq	%rdi, %rax
    00000abf: 	shlq	$0x5, %rax
    00000ac3: 	addq	(%r13,%rsi,8), %rax
    00000ac8: 	movq	%rbx, 0x18(%rax)
    00000acc: 	jmp	.Ltmp6213 # Offset: 2764
.Ltmp6214:
    00000ad1: 	movq	0x48(%rsp), %rdi
    00000ad6: 	movl	$0x80, %esi
    00000adb: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2779
    00000ae0: 	movq	0x30(%rbp), %rdi
    00000ae4: 	jmp	.Ltmp6221 # Offset: 2788
    00000ae6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp6223:
    00000af0: 	movq	%rbx, (%rdi)
    00000af3: 	addq	$0x8, %rdi
    00000af7: 	movq	%rdi, 0x30(%rbp)
    00000afb: 	cmpq	%rbx, %r12
    00000afe: 	je	.Ltmp6222 # Offset: 2814
.Ltmp6221:
    00000b00: 	movq	0x40(%rbp), %rax
    00000b04: 	subq	$0x1, %rbx
    00000b08: 	movq	%rbx, 0xb8(%rsp)
    00000b10: 	subq	$0x8, %rax
    00000b14: 	cmpq	%rax, %rdi
    00000b17: 	jne	.Ltmp6223 # Offset: 2839
    00000b19: 	movq	%r14, %rsi
    00000b1c: 	movq	%rbp, %rdi
    00000b1f: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2847
    00000b24: 	movq	0x30(%rbp), %rdi
    00000b28: 	cmpq	%rbx, %r12
    00000b2b: 	jne	.Ltmp6221 # Offset: 2859
.Ltmp6222:
    00000b2d: 	movq	0x38(%rbp), %r8
    00000b31: 	movq	0x48(%rbp), %rsi
    00000b35: 	jmp	.Ltmp6224 # Offset: 2869
.Ltmp6177:
    00000b3a: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp6178:
    00000b43: 	movq	$0x0, 0xd0(%rsp)
    00000b4f: 	pxor	%xmm0, %xmm0
    00000b53: 	movaps	%xmm0, 0xc0(%rsp)
    00000b5b: 	jmp	.Ltmp6225 # Offset: 2907
.Ltmp6203:
    00000b60: 	movq	%rax, %r9
    00000b63: 	notq	%r9
    00000b66: 	shrq	$0x4, %r9
    00000b6a: 	notq	%r9
    00000b6d: 	jmp	.Ltmp6226 # Offset: 2925
.Ltmp6204:
    00000b72: 	shlq	$0x5, %rbx
    00000b76: 	leaq	(%r9,%rbx), %rax
    00000b7a: 	jmp	.Ltmp6227 # Offset: 2938
.Ltmp6216:
    00000b7f: 	shlq	$0x5, %rbx
    00000b83: 	addq	%rbx, %rdx
    00000b86: 	jmp	.Ltmp6228 # Offset: 2950
.Ltmp6215:
    00000b8b: 	movq	%r10, %rdx
    00000b8e: 	notq	%rdx
    00000b91: 	shrq	$0x4, %rdx
    00000b95: 	notq	%rdx
    00000b98: 	jmp	.Ltmp6229 # Offset: 2968
.Ltmp6199:
    00000b9d: 	movq	0xd8(%rsp), %rax
    00000ba5: 	subq	%fs:0x28, %rax
    00000bae: 	jne	.Ltmp6200 # Offset: 2990
    00000bb0: 	addq	$0xe8, %rsp
    00000bb7: 	popq	%rbx
    00000bb8: 	popq	%rbp
    00000bb9: 	popq	%r12
    00000bbb: 	popq	%r13
    00000bbd: 	popq	%r14
    00000bbf: 	popq	%r15
    00000bc1: 	retq # Offset: 3009
.Ltmp6198:
    00000bc2: 	movq	-0x8(%rdx), %rax
    00000bc6: 	addq	$0x200, %rax
    00000bcc: 	jmp	.Ltmp6230 # Offset: 3020
.Ltmp6179:
    00000bd1: 	pxor	%xmm5, %xmm5
    00000bd5: 	movsd	%xmm5, 0x58(%rsp)
    00000bdb: 	jmp	.Ltmp6231 # Offset: 3035
.Ltmp6200:
    00000be0: 	callq	__stack_chk_fail@PLT # Offset: 3040
    00000be5: 	endbr64
    00000be9: 	movq	%rax, %rbx
    00000bec: 	jmp	.Ltmp6232 # Offset: 3052
    00000bee: 	endbr64
    00000bf2: 	movq	%rax, %rdi
    00000bf5: 	jmp	.Ltmp6233 # Offset: 3061
    00000bf7: 	endbr64
    00000bfb: 	movq	%rax, %rbp
    00000bfe: 	jmp	.Ltmp6234 # Offset: 3070
    00000c00: 	endbr64
    00000c04: 	movq	%rax, %r12
    00000c07: 	jmp	.Ltmp6235 # Offset: 3079
    00000c09: 	endbr64
    00000c0d: 	movq	%rax, %rbx
    00000c10: 	jmp	.Ltmp6236 # Offset: 3088
.Ltmp6238:
    00000c12: 	callq	__cxa_end_catch@PLT # Offset: 3090
.Ltmp6232:
    00000c17: 	movq	%rbp, %rdi
    00000c1a: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 3098
.Ltmp6236:
    00000c1f: 	movq	%rbp, %rdi
    00000c22: 	movl	$0xb8, %esi
    00000c27: 	movq	%rbx, %rbp
    00000c2a: 	callq	_ZdlPvm@PLT # Offset: 3114
.Ltmp6234:
    00000c2f: 	movq	0xc0(%rsp), %rdi
    00000c37: 	movq	0xd0(%rsp), %rsi
    00000c3f: 	subq	%rdi, %rsi
    00000c42: 	testq	%rdi, %rdi
    00000c45: 	je	.Ltmp6237 # Offset: 3141
    00000c47: 	callq	_ZdlPvm@PLT # Offset: 3143
.Ltmp6237:
    00000c4c: 	movq	%rbp, %rdi
    00000c4f: 	callq	_Unwind_Resume@PLT # Offset: 3151
.Ltmp6233:
    00000c54: 	callq	__cxa_begin_catch@PLT # Offset: 3156
    00000c59: 	callq	__cxa_rethrow@PLT # Offset: 3161
.Ltmp6235:
    00000c5e: 	movq	%rbp, %rdi
    00000c61: 	movl	$0xb8, %esi
    00000c66: 	callq	_ZdlPvm@PLT # Offset: 3174
    00000c6b: 	movq	%r12, %rdi
    00000c6e: 	callq	_Unwind_Resume@PLT # Offset: 3182
    00000c73: 	endbr64
    00000c77: 	movq	%rax, %r12
    00000c7a: 	callq	__cxa_end_catch@PLT # Offset: 3194
    00000c7f: 	movq	%r12, %rdi
    00000c82: 	callq	__cxa_begin_catch@PLT # Offset: 3202
    00000c87: 	movq	0x58(%rbp), %rax
    00000c8b: 	movq	0x50(%rbp), %rdi
    00000c8f: 	leaq	(,%rax,8), %rsi
    00000c97: 	callq	_ZdlPvm@PLT # Offset: 3223
    00000c9c: 	movq	$0x0, 0x50(%rbp)
    00000ca4: 	movq	$0x0, 0x58(%rbp)
    00000cac: 	callq	__cxa_rethrow@PLT # Offset: 3244
    00000cb1: 	endbr64
    00000cb5: 	movq	%rax, %rbx
    00000cb8: 	jmp	.Ltmp6238 # Offset: 3256
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_pushbackId20PooledDoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_pushfrontId20PooledDoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 331
  State       : disassembled
  Address     : 0x41580
  Size        : 0xcbd
  MaxSize     : 0xcc0
  Offset      : 0x41580
  Section     : .text
  Orc Section : .local.text._Z14test_pushfrontId20PooledDoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0330:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xe8, %rsp
    00000015: 	movq	%rdi, 0x10(%rsp)
    0000001a: 	leaq	0xc0(%rsp), %r12
    00000022: 	movq	%rsi, 0x18(%rsp)
    00000027: 	movq	%rdx, 0x88(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0xd8(%rsp)
    00000040: 	xorl	%eax, %eax
    00000042: 	callq	clock@PLT # Offset: 66
    00000047: 	movl	$0x0, 0x8(%rsp)
    0000004f: 	movq	%rax, start_time(%rip)
    00000056: 	movl	iterations(%rip), %eax
    0000005c: 	testl	%eax, %eax
    0000005e: 	jle	.Ltmp6239 # Offset: 94
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp6246:
    00000068: 	movl	$0xb8, %edi
    0000006d: 	callq	_Znwm@PLT # Offset: 109
    00000072: 	movq	%rax, %rdi
    00000075: 	movq	%rax, %rbp
    00000078: 	callq	_ZN27DoubleLinkListPoolAllocatorIdEC2Ev # Offset: 120
    0000007d: 	movq	0x48(%rbp), %rdx
    00000081: 	movq	0x30(%rbp), %r15
    00000085: 	pxor	%xmm2, %xmm2
    00000089: 	leaq	0x50(%rbp), %r14
    0000008d: 	movq	0x38(%rbp), %r8
    00000091: 	movups	%xmm2, 0xa8(%rbp)
    00000098: 	movq	%rdx, %rax
    0000009b: 	subq	0x28(%rbp), %rax
    0000009f: 	movq	%r15, %rcx
    000000a2: 	movq	$0x0, 0xa0(%rbp)
    000000ad: 	sarq	$0x3, %rax
    000000b1: 	cmpq	$0x1, %rdx
    000000b5: 	adcq	$-0x1, %rax
    000000b9: 	subq	%r8, %rcx
    000000bc: 	sarq	$0x3, %rcx
    000000c0: 	shlq	$0x6, %rax
    000000c4: 	addq	%rcx, %rax
    000000c7: 	movq	0x20(%rbp), %rcx
    000000cb: 	subq	0x10(%rbp), %rcx
    000000cf: 	sarq	$0x3, %rcx
    000000d3: 	addq	%rcx, %rax
    000000d6: 	je	.Ltmp6240 # Offset: 214
.Ltmp6282:
    000000dc: 	cmpq	%r15, %r8
    000000df: 	je	.Ltmp6241 # Offset: 223
.Ltmp6277:
    000000e5: 	movq	-0x8(%r15), %rbx
    000000e9: 	subq	$0x8, %r15
    000000ed: 	movq	%r15, 0x30(%rbp)
.Ltmp6278:
    000000f1: 	movq	0x60(%rbp), %rcx
    000000f5: 	movq	0x78(%rbp), %rdx
    000000f9: 	movq	%rcx, %rax
    000000fc: 	subq	0x68(%rbp), %rax
    00000100: 	sarq	$0x5, %rax
    00000104: 	addq	%rbx, %rax
    00000107: 	js	.Ltmp6242 # Offset: 263
    0000010d: 	cmpq	$0xf, %rax
    00000111: 	jg	.Ltmp6243 # Offset: 273
    00000117: 	movq	%rbx, %rax
    0000011a: 	shlq	$0x5, %rax
    0000011e: 	addq	%rcx, %rax
    00000121: 	movq	%rbx, 0x18(%rax)
.Ltmp6271:
    00000125: 	movq	0x10(%rsp), %rdx
    0000012a: 	movsd	(%rdx), %xmm0
    0000012e: 	movq	0xa8(%rbp), %rdx
    00000135: 	movq	$0x0, 0x10(%rax)
    0000013d: 	movq	%rdx, 0x8(%rax)
    00000141: 	movsd	%xmm0, (%rax)
    00000145: 	testq	%rdx, %rdx
    00000148: 	je	.Ltmp6244 # Offset: 328
    0000014a: 	movq	%rax, 0x10(%rdx)
.Ltmp6244:
    0000014e: 	cmpq	$0x0, 0xb0(%rbp)
    00000156: 	movq	%rax, 0xa8(%rbp)
    0000015d: 	je	.Ltmp6245 # Offset: 349
    00000163: 	addq	$0x1, 0xa0(%rbp)
    0000016b: 	movq	%r14, %rdi
    0000016e: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 366
    00000173: 	movq	%rbp, %rdi
    00000176: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 374
    0000017b: 	movl	$0xb8, %esi
    00000180: 	movq	%rbp, %rdi
    00000183: 	callq	_ZdlPvm@PLT # Offset: 387
    00000188: 	addl	$0x1, 0x8(%rsp)
    0000018d: 	movl	0x8(%rsp), %eax
    00000191: 	cmpl	%eax, iterations(%rip)
    00000197: 	jg	.Ltmp6246 # Offset: 407
.Ltmp6239:
    0000019d: 	callq	clock@PLT # Offset: 413
    000001a2: 	movq	0x18(%rsp), %rcx
    000001a7: 	xorl	%edx, %edx
    000001a9: 	subq	0x10(%rsp), %rcx
    000001ae: 	movq	%rax, 0x78(%rsp)
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	movq	start_time(%rip), %rax
    000001c1: 	movq	%rax, 0x80(%rsp)
    000001c9: 	movabsq	$0x500000000, %rax
    000001d3: 	divq	%rcx
    000001d6: 	movq	%rax, 0x8(%rsp)
    000001db: 	cmpq	$0x3e8, %rax
    000001e1: 	ja	.Ltmp6247 # Offset: 481
    000001e7: 	cmpq	$0x3, 0x8(%rsp)
    000001ed: 	ja	.Ltmp6248 # Offset: 493
    000001f3: 	movq	$0x0, 0xd0(%rsp)
    000001ff: 	pxor	%xmm0, %xmm0
    00000203: 	movq	$0x4, 0x8(%rsp)
    0000020c: 	movaps	%xmm0, 0xc0(%rsp)
.Ltmp6295:
    00000214: 	movq	0x8(%rsp), %rbx
    00000219: 	leaq	0xc0(%rsp), %rdi
    00000221: 	movq	%rbx, %rsi
    00000224: 	callq	_ZNSt6vectorIP20PooledDoubleLinkListIdESaIS2_EE17_M_default_appendEm # Offset: 548
    00000229: 	movq	0xc0(%rsp), %rdx
    00000231: 	movl	iterations(%rip), %eax
    00000237: 	movq	%rdx, 0x50(%rsp)
    0000023c: 	testl	%eax, %eax
    0000023e: 	jle	.Ltmp6249 # Offset: 574
    00000244: 	addq	$0x8, %rdx
    00000248: 	movl	%ebx, 0x64(%rsp)
    0000024c: 	pxor	%xmm5, %xmm5
    00000250: 	leaq	0xb8(%rsp), %r14
    00000258: 	movl	$0x0, 0x20(%rsp)
    00000260: 	movq	%rdx, 0x70(%rsp)
    00000265: 	movsd	%xmm5, 0x58(%rsp)
.Ltmp6267:
    0000026b: 	movslq	0x20(%rsp), %rdx
    00000270: 	movslq	%eax, %rcx
    00000273: 	movq	%rdx, %rsi
    00000276: 	addq	0x8(%rsp), %rdx
    0000027b: 	subl	%esi, %eax
    0000027d: 	cmpq	%rcx, %rdx
    00000280: 	cmovbl	0x64(%rsp), %eax
    00000285: 	movl	%eax, %ebx
    00000287: 	callq	clock@PLT # Offset: 647
    0000028c: 	movq	0x70(%rsp), %rsi
    00000291: 	movq	0x50(%rsp), %rdx
    00000296: 	movq	%rax, start_time(%rip)
    0000029d: 	leal	-0x1(%rbx), %eax
    000002a0: 	leaq	(%rsi,%rax,8), %rax
    000002a4: 	movq	%rdx, 0x68(%rsp)
    000002a9: 	movq	%rax, 0x40(%rsp)
    000002ae: 	movq	%rdx, 0x30(%rsp)
.Ltmp6258:
    000002b3: 	movl	$0xb8, %edi
    000002b8: 	callq	_Znwm@PLT # Offset: 696
    000002bd: 	movq	$0x0, (%rax)
    000002c4: 	pxor	%xmm3, %xmm3
    000002c8: 	xorl	%esi, %esi
    000002ca: 	movq	%rax, %rdi
    000002cd: 	movq	$0x0, 0x8(%rax)
    000002d5: 	movq	%rax, %rbp
    000002d8: 	movups	%xmm3, 0x10(%rax)
    000002dc: 	movups	%xmm3, 0x20(%rax)
    000002e0: 	movups	%xmm3, 0x30(%rax)
    000002e4: 	movups	%xmm3, 0x40(%rax)
    000002e8: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 744
    000002ed: 	movq	$0x0, 0x50(%rbp)
    000002f5: 	pxor	%xmm3, %xmm3
    000002f9: 	movl	$0x40, %edi
    000002fe: 	movq	$0x8, 0x58(%rbp)
    00000306: 	movups	%xmm3, 0x60(%rbp)
    0000030a: 	movups	%xmm3, 0x70(%rbp)
    0000030e: 	movups	%xmm3, 0x80(%rbp)
    00000315: 	movups	%xmm3, 0x90(%rbp)
    0000031c: 	callq	_Znwm@PLT # Offset: 796
    00000321: 	movq	0x58(%rbp), %rdx
    00000325: 	movq	%rax, 0x50(%rbp)
    00000329: 	movl	$0x200, %edi
    0000032e: 	leaq	-0x4(,%rdx,4), %rdx
    00000336: 	andq	$-0x8, %rdx
    0000033a: 	leaq	(%rax,%rdx), %r13
    0000033e: 	callq	_Znwm@PLT # Offset: 830
    00000343: 	movq	%rax, %rdx
    00000346: 	movq	%rax, %xmm1
    0000034b: 	movq	%rax, (%r13)
    0000034f: 	pxor	%xmm3, %xmm3
    00000353: 	leaq	0x200(%rax), %rax
    0000035a: 	movq	%r13, %xmm5
    0000035f: 	punpcklqdq	%xmm1, %xmm1
    00000363: 	movq	$0x0, 0xa0(%rbp)
    0000036e: 	movq	%rax, %xmm0
    00000373: 	leaq	0x50(%rbp), %rax
    00000377: 	movups	%xmm1, 0x60(%rbp)
    0000037b: 	movq	%rdx, %rcx
    0000037e: 	movq	%rax, 0x48(%rsp)
    00000383: 	movq	0x10(%rsp), %rax
    00000388: 	punpcklqdq	%xmm5, %xmm0
    0000038c: 	movups	%xmm0, 0x70(%rbp)
    00000390: 	movups	%xmm1, 0x80(%rbp)
    00000397: 	movq	%rax, %r15
    0000039a: 	movups	%xmm0, 0x90(%rbp)
    000003a1: 	movups	%xmm3, 0xa8(%rbp)
    000003a8: 	cmpq	%rax, 0x18(%rsp)
    000003ad: 	je	.Ltmp6250 # Offset: 941
    000003b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6257:
    000003b8: 	movq	0x48(%rbp), %rsi
    000003bc: 	movq	0x30(%rbp), %rdi
    000003c0: 	addq	$0x8, %r15
    000003c4: 	movq	0x38(%rbp), %r8
    000003c8: 	movq	%rsi, %rax
    000003cb: 	subq	0x28(%rbp), %rax
    000003cf: 	movq	%rdi, %r9
    000003d2: 	sarq	$0x3, %rax
    000003d6: 	cmpq	$0x1, %rsi
    000003da: 	adcq	$-0x1, %rax
    000003de: 	subq	%r8, %r9
    000003e1: 	sarq	$0x3, %r9
    000003e5: 	shlq	$0x6, %rax
    000003e9: 	addq	%r9, %rax
    000003ec: 	movq	0x20(%rbp), %r9
    000003f0: 	subq	0x10(%rbp), %r9
    000003f4: 	sarq	$0x3, %r9
    000003f8: 	addq	%r9, %rax
    000003fb: 	je	.Ltmp6251 # Offset: 1019
.Ltmp6294:
    00000401: 	cmpq	%r8, %rdi
    00000404: 	je	.Ltmp6252 # Offset: 1028
.Ltmp6289:
    0000040a: 	movq	-0x8(%rdi), %rbx
    0000040e: 	subq	$0x8, %rdi
    00000412: 	movq	%rdi, 0x30(%rbp)
.Ltmp6290:
    00000416: 	movq	0x60(%rbp), %rdx
    0000041a: 	movq	0x68(%rbp), %rcx
    0000041e: 	movq	0x78(%rbp), %r13
    00000422: 	movq	%rdx, %rax
    00000425: 	subq	%rcx, %rax
    00000428: 	sarq	$0x5, %rax
    0000042c: 	addq	%rbx, %rax
    0000042f: 	js	.Ltmp6253 # Offset: 1071
    00000435: 	cmpq	$0xf, %rax
    00000439: 	jg	.Ltmp6254 # Offset: 1081
    0000043f: 	movq	%rbx, %rax
    00000442: 	shlq	$0x5, %rax
    00000446: 	addq	%rdx, %rax
    00000449: 	movq	%rbx, 0x18(%rax)
.Ltmp6283:
    0000044d: 	movsd	-0x8(%r15), %xmm0
    00000453: 	movq	0xa8(%rbp), %rsi
    0000045a: 	movq	$0x0, 0x10(%rax)
    00000462: 	movq	%rsi, 0x8(%rax)
    00000466: 	movsd	%xmm0, (%rax)
    0000046a: 	testq	%rsi, %rsi
    0000046d: 	je	.Ltmp6255 # Offset: 1133
    0000046f: 	movq	%rax, 0x10(%rsi)
.Ltmp6255:
    00000473: 	cmpq	$0x0, 0xb0(%rbp)
    0000047b: 	movq	%rax, 0xa8(%rbp)
    00000482: 	je	.Ltmp6256 # Offset: 1154
    00000488: 	addq	$0x1, 0xa0(%rbp)
    00000490: 	cmpq	%r15, 0x18(%rsp)
    00000495: 	jne	.Ltmp6257 # Offset: 1173
.Ltmp6250:
    0000049b: 	movq	0x30(%rsp), %rax
    000004a0: 	movq	%rbp, (%rax)
    000004a3: 	addq	$0x8, %rax
    000004a7: 	movq	%rax, 0x30(%rsp)
    000004ac: 	cmpq	0x40(%rsp), %rax
    000004b1: 	jne	.Ltmp6258 # Offset: 1201
    000004b7: 	callq	clock@PLT # Offset: 1207
    000004bc: 	pxor	%xmm0, %xmm0
    000004c0: 	movq	0x68(%rsp), %r12
    000004c5: 	movq	0x40(%rsp), %r13
    000004ca: 	movq	%rax, end_time(%rip)
    000004d1: 	subq	start_time(%rip), %rax
    000004d8: 	cvtsi2sd	%rax, %xmm0
    000004dd: 	divsd	DATAat0x53788(%rip), %xmm0
    000004e5: 	addsd	0x58(%rsp), %xmm0
    000004eb: 	movsd	%xmm0, 0x58(%rsp)
.Ltmp6266:
    000004f1: 	movq	(%r12), %rbp
    000004f5: 	testq	%rbp, %rbp
    000004f8: 	je	.Ltmp6259 # Offset: 1272
    000004fe: 	movq	0x50(%rbp), %rdi
    00000502: 	testq	%rdi, %rdi
    00000505: 	je	.Ltmp6260 # Offset: 1285
    00000507: 	movq	0x98(%rbp), %rax
    0000050e: 	movq	0x78(%rbp), %rbx
    00000512: 	leaq	0x8(%rax), %r15
    00000516: 	cmpq	%rbx, %r15
    00000519: 	jbe	.Ltmp6261 # Offset: 1305
    0000051b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6262:
    00000520: 	movq	(%rbx), %rdi
    00000523: 	movl	$0x200, %esi
    00000528: 	addq	$0x8, %rbx
    0000052c: 	callq	_ZdlPvm@PLT # Offset: 1324
    00000531: 	cmpq	%rbx, %r15
    00000534: 	ja	.Ltmp6262 # Offset: 1332
    00000536: 	movq	0x50(%rbp), %rdi
.Ltmp6261:
    0000053a: 	movq	0x58(%rbp), %rax
    0000053e: 	leaq	(,%rax,8), %rsi
    00000546: 	callq	_ZdlPvm@PLT # Offset: 1350
.Ltmp6260:
    0000054b: 	movq	(%rbp), %rdi
    0000054f: 	testq	%rdi, %rdi
    00000552: 	je	.Ltmp6263 # Offset: 1362
    00000554: 	movq	0x48(%rbp), %rax
    00000558: 	movq	0x28(%rbp), %rbx
    0000055c: 	leaq	0x8(%rax), %r15
    00000560: 	cmpq	%rbx, %r15
    00000563: 	jbe	.Ltmp6264 # Offset: 1379
    00000565: 	nopl	(%rax) # Size: 3
.Ltmp6265:
    00000568: 	movq	(%rbx), %rdi
    0000056b: 	movl	$0x200, %esi
    00000570: 	addq	$0x8, %rbx
    00000574: 	callq	_ZdlPvm@PLT # Offset: 1396
    00000579: 	cmpq	%rbx, %r15
    0000057c: 	ja	.Ltmp6265 # Offset: 1404
    0000057e: 	movq	(%rbp), %rdi
.Ltmp6264:
    00000582: 	movq	0x8(%rbp), %rax
    00000586: 	leaq	(,%rax,8), %rsi
    0000058e: 	callq	_ZdlPvm@PLT # Offset: 1422
.Ltmp6263:
    00000593: 	movl	$0xb8, %esi
    00000598: 	movq	%rbp, %rdi
    0000059b: 	callq	_ZdlPvm@PLT # Offset: 1435
.Ltmp6259:
    000005a0: 	movq	$0x0, (%r12)
    000005a8: 	addq	$0x8, %r12
    000005ac: 	cmpq	%r13, %r12
    000005af: 	jne	.Ltmp6266 # Offset: 1455
    000005b5: 	movl	0x8(%rsp), %edx
    000005b9: 	movl	iterations(%rip), %eax
    000005bf: 	addl	%edx, 0x20(%rsp)
    000005c3: 	movl	0x20(%rsp), %edx
    000005c7: 	cmpl	%edx, %eax
    000005c9: 	jg	.Ltmp6267 # Offset: 1481
.Ltmp6301:
    000005cf: 	movq	0x88(%rsp), %rdi
    000005d7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1495
    000005dc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005e3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000005ea: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005f1: 	je	.Ltmp6268 # Offset: 1521
.Ltmp6300:
    000005f7: 	movsd	0x58(%rsp), %xmm1
    000005fd: 	movq	-0x20(%rax), %rdi
    00000601: 	pxor	%xmm0, %xmm0
    00000605: 	movq	0x78(%rsp), %rax
    0000060a: 	subq	0x80(%rsp), %rax
    00000612: 	cvtsi2sd	%rax, %xmm0
    00000617: 	divsd	DATAat0x53788(%rip), %xmm0
    0000061f: 	subsd	%xmm0, %xmm1
    00000623: 	movapd	%xmm1, %xmm0
    00000627: 	callq	_Z13record_resultdPKc # Offset: 1575
    0000062c: 	cmpq	$0x0, 0x50(%rsp)
    00000632: 	je	.Ltmp6269 # Offset: 1586
    00000638: 	movq	0xd8(%rsp), %rax
    00000640: 	subq	%fs:0x28, %rax
    00000649: 	jne	.Ltmp6270 # Offset: 1609
    0000064f: 	movq	0xd0(%rsp), %rsi
    00000657: 	movq	0x50(%rsp), %rdi
    0000065c: 	addq	$0xe8, %rsp
    00000663: 	popq	%rbx
    00000664: 	popq	%rbp
    00000665: 	subq	%rdi, %rsi
    00000668: 	popq	%r12
    0000066a: 	popq	%r13
    0000066c: 	popq	%r14
    0000066e: 	popq	%r15
    00000670: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1648
    00000675: 	nopl	(%rax) # Size: 3
.Ltmp6243:
    00000678: 	movq	%rax, %rcx
    0000067b: 	andl	$0xf, %eax
    0000067e: 	sarq	$0x4, %rcx
    00000682: 	shlq	$0x5, %rax
    00000686: 	addq	(%rdx,%rcx,8), %rax
    0000068a: 	movq	%rbx, 0x18(%rax)
    0000068e: 	jmp	.Ltmp6271 # Offset: 1678
.Ltmp6240:
    00000693: 	movq	0x98(%rbp), %rsi
    0000069a: 	movq	0x78(%rbp), %rcx
    0000069e: 	movq	0x70(%rbp), %rdi
    000006a2: 	movq	0x80(%rbp), %rax
    000006a9: 	movq	%rsi, %r10
    000006ac: 	movq	0x60(%rbp), %r9
    000006b0: 	subq	%rcx, %r10
    000006b3: 	sarq	$0x3, %r10
    000006b7: 	cmpq	$0x1, %rsi
    000006bb: 	adcq	$-0x1, %r10
    000006bf: 	subq	0x88(%rbp), %rax
    000006c6: 	shlq	$0x4, %r10
    000006ca: 	sarq	$0x5, %rax
    000006ce: 	addq	%r10, %rax
    000006d1: 	movq	%rdi, %r10
    000006d4: 	subq	%r9, %r10
    000006d7: 	sarq	$0x5, %r10
    000006db: 	leaq	(%rax,%r10), %r13
    000006df: 	leaq	0x80(%r13), %rbx
    000006e6: 	cmpq	%rbx, %r13
    000006e9: 	jb	.Ltmp6272 # Offset: 1769
    000006ef: 	movq	0x68(%rbp), %r10
    000006f3: 	movq	%r9, %rax
    000006f6: 	subq	%r10, %rax
    000006f9: 	sarq	$0x5, %rax
    000006fd: 	addq	%rbx, %rax
    00000700: 	js	.Ltmp6273 # Offset: 1792
    00000706: 	cmpq	$0xf, %rax
    0000070a: 	jle	.Ltmp6274 # Offset: 1802
    00000710: 	movq	%rax, %r9
    00000713: 	sarq	$0x4, %r9
.Ltmp6296:
    00000717: 	leaq	(%rcx,%r9,8), %rcx
    0000071b: 	shlq	$0x4, %r9
    0000071f: 	movq	(%rcx), %r10
    00000722: 	subq	%r9, %rax
    00000725: 	shlq	$0x5, %rax
    00000729: 	leaq	0x200(%r10), %rdi
    00000730: 	addq	%r10, %rax
.Ltmp6297:
    00000733: 	movq	%rax, %xmm7
    00000738: 	movq	%r10, %xmm6
    0000073d: 	movq	%rcx, %xmm4
    00000742: 	punpcklqdq	%xmm6, %xmm7
    00000746: 	leaq	0x8(%rsi), %r13
    0000074a: 	leaq	0x8(%rcx), %rbx
    0000074e: 	movaps	%xmm7, 0x20(%rsp)
    00000753: 	movq	%rdi, %xmm7
    00000758: 	punpcklqdq	%xmm4, %xmm7
    0000075c: 	movaps	%xmm7, 0x30(%rsp)
    00000761: 	cmpq	%rbx, %r13
    00000764: 	jbe	.Ltmp6275 # Offset: 1892
    00000766: 	movq	%rdx, 0x40(%rsp)
    0000076b: 	movq	%r8, 0x48(%rsp)
.Ltmp6276:
    00000770: 	movq	(%rbx), %rdi
    00000773: 	movl	$0x200, %esi
    00000778: 	addq	$0x8, %rbx
    0000077c: 	callq	_ZdlPvm@PLT # Offset: 1916
    00000781: 	cmpq	%rbx, %r13
    00000784: 	ja	.Ltmp6276 # Offset: 1924
    00000786: 	movq	0x40(%rsp), %rdx
    0000078b: 	movq	0x48(%rsp), %r8
.Ltmp6275:
    00000790: 	movdqa	0x20(%rsp), %xmm7
    00000796: 	movdqa	0x30(%rsp), %xmm6
    0000079c: 	movups	%xmm7, 0x80(%rbp)
    000007a3: 	movups	%xmm6, 0x90(%rbp)
    000007aa: 	cmpq	%r15, %r8
    000007ad: 	jne	.Ltmp6277 # Offset: 1965
.Ltmp6241:
    000007b3: 	movq	-0x8(%rdx), %rax
    000007b7: 	movl	$0x200, %esi
    000007bc: 	movq	%r8, %rdi
    000007bf: 	movq	%rdx, 0x20(%rsp)
    000007c4: 	movq	0x1f8(%rax), %rbx
    000007cb: 	callq	_ZdlPvm@PLT # Offset: 1995
    000007d0: 	movq	0x20(%rsp), %rdx
    000007d5: 	movq	-0x8(%rdx), %rax
    000007d9: 	subq	$0x8, %rdx
    000007dd: 	addq	$0x1f8, %rax
    000007e3: 	movq	%rax, %xmm0
    000007e8: 	movq	(%rdx), %rax
    000007eb: 	movhps	(%rdx), %xmm0
    000007ee: 	movq	%rdx, %xmm4
    000007f3: 	addq	$0x200, %rax
    000007f9: 	movups	%xmm0, 0x30(%rbp)
    000007fd: 	movq	%rax, %xmm0
    00000802: 	punpcklqdq	%xmm4, %xmm0
    00000806: 	movups	%xmm0, 0x40(%rbp)
    0000080a: 	jmp	.Ltmp6278 # Offset: 2058
.Ltmp6245:
    0000080f: 	addq	$0x1, 0xa0(%rbp)
    00000817: 	movq	%r14, %rdi
    0000081a: 	movq	%rax, 0xb0(%rbp)
    00000821: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 2081
    00000826: 	movq	%rbp, %rdi
    00000829: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2089
    0000082e: 	movl	$0xb8, %esi
    00000833: 	movq	%rbp, %rdi
    00000836: 	callq	_ZdlPvm@PLT # Offset: 2102
    0000083b: 	addl	$0x1, 0x8(%rsp)
    00000840: 	movl	0x8(%rsp), %eax
    00000844: 	cmpl	iterations(%rip), %eax
    0000084a: 	jl	.Ltmp6246 # Offset: 2122
    00000850: 	jmp	.Ltmp6239 # Offset: 2128
    00000855: 	nopl	(%rax) # Size: 3
.Ltmp6242:
    00000858: 	movq	%rax, %rcx
    0000085b: 	notq	%rcx
    0000085e: 	shrq	$0x4, %rcx
    00000862: 	notq	%rcx
    00000865: 	movq	%rcx, %rsi
    00000868: 	shlq	$0x4, %rsi
    0000086c: 	subq	%rsi, %rax
    0000086f: 	shlq	$0x5, %rax
    00000873: 	addq	(%rdx,%rcx,8), %rax
    00000877: 	movq	%rbx, 0x18(%rax)
    0000087b: 	jmp	.Ltmp6271 # Offset: 2171
.Ltmp6272:
    00000880: 	movl	$0x80, %esi
    00000885: 	movq	%r14, %rdi
    00000888: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2184
    0000088d: 	movq	0x30(%rbp), %r15
    00000891: 	movq	0x40(%rbp), %rcx
    00000895: 	jmp	.Ltmp6279 # Offset: 2197
    00000897: 	nopw	(%rax,%rax) # Size: 9
.Ltmp6281:
    000008a0: 	movq	%rbx, (%r15)
    000008a3: 	addq	$0x8, %r15
    000008a7: 	movq	%r15, 0x30(%rbp)
    000008ab: 	cmpq	%rbx, %r13
    000008ae: 	je	.Ltmp6280 # Offset: 2222
.Ltmp6279:
    000008b0: 	subq	$0x1, %rbx
    000008b4: 	leaq	-0x8(%rcx), %rax
    000008b8: 	movq	%rbx, 0xc0(%rsp)
    000008c0: 	cmpq	%rax, %r15
    000008c3: 	jne	.Ltmp6281 # Offset: 2243
    000008c5: 	movq	%r12, %rsi
    000008c8: 	movq	%rbp, %rdi
    000008cb: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2251
    000008d0: 	movq	0x30(%rbp), %r15
    000008d4: 	cmpq	%rbx, %r13
    000008d7: 	je	.Ltmp6280 # Offset: 2263
    000008d9: 	movq	0x40(%rbp), %rcx
    000008dd: 	jmp	.Ltmp6279 # Offset: 2269
.Ltmp6280:
    000008df: 	movq	0x38(%rbp), %r8
    000008e3: 	movq	0x48(%rbp), %rdx
    000008e7: 	jmp	.Ltmp6282 # Offset: 2279
.Ltmp6254:
    000008ec: 	movq	%rax, %rsi
    000008ef: 	andl	$0xf, %eax
    000008f2: 	sarq	$0x4, %rsi
    000008f6: 	shlq	$0x5, %rax
    000008fa: 	addq	(%r13,%rsi,8), %rax
    000008ff: 	movq	%rbx, 0x18(%rax)
    00000903: 	jmp	.Ltmp6283 # Offset: 2307
.Ltmp6251:
    00000908: 	movq	0x98(%rbp), %rax
    0000090f: 	movq	0x70(%rbp), %r9
    00000913: 	movq	0x80(%rbp), %r12
    0000091a: 	movq	%rax, %r10
    0000091d: 	subq	%r13, %r10
    00000920: 	sarq	$0x3, %r10
    00000924: 	cmpq	$0x1, %rax
    00000928: 	adcq	$-0x1, %r10
    0000092c: 	subq	0x88(%rbp), %r12
    00000933: 	shlq	$0x4, %r10
    00000937: 	sarq	$0x5, %r12
    0000093b: 	addq	%r10, %r12
    0000093e: 	movq	%r9, %r10
    00000941: 	subq	%rdx, %r10
    00000944: 	sarq	$0x5, %r10
    00000948: 	addq	%r10, %r12
    0000094b: 	leaq	0x80(%r12), %rbx
    00000953: 	cmpq	%rbx, %r12
    00000956: 	jb	.Ltmp6284 # Offset: 2390
    0000095c: 	movq	%rdx, %r10
    0000095f: 	subq	%rcx, %r10
    00000962: 	sarq	$0x5, %r10
    00000966: 	addq	%rbx, %r10
    00000969: 	js	.Ltmp6285 # Offset: 2409
    0000096f: 	cmpq	$0xf, %r10
    00000973: 	jle	.Ltmp6286 # Offset: 2419
    00000979: 	movq	%r10, %rdx
    0000097c: 	sarq	$0x4, %rdx
.Ltmp6299:
    00000980: 	leaq	(%r13,%rdx,8), %r13
    00000985: 	shlq	$0x4, %rdx
    00000989: 	movq	%rdx, %r11
    0000098c: 	movq	%r10, %rdx
    0000098f: 	movq	(%r13), %rcx
    00000993: 	subq	%r11, %rdx
    00000996: 	shlq	$0x5, %rdx
    0000099a: 	leaq	0x200(%rcx), %r9
    000009a1: 	addq	%rcx, %rdx
.Ltmp6298:
    000009a4: 	movq	%r13, %xmm5
    000009a9: 	movq	%rdx, %xmm6
    000009ae: 	movq	%rcx, %xmm7
    000009b3: 	addq	$0x8, %r13
    000009b7: 	movq	%r9, %xmm4
    000009bc: 	punpcklqdq	%xmm7, %xmm6
    000009c0: 	leaq	0x8(%rax), %rbx
    000009c4: 	punpcklqdq	%xmm5, %xmm4
    000009c8: 	movaps	%xmm6, 0x90(%rsp)
    000009d0: 	movaps	%xmm4, 0xa0(%rsp)
    000009d8: 	cmpq	%r13, %rbx
    000009db: 	jbe	.Ltmp6287 # Offset: 2523
    000009dd: 	nopl	(%rax) # Size: 3
.Ltmp6288:
    000009e0: 	movq	(%r13), %rdi
    000009e4: 	movl	$0x200, %esi
    000009e9: 	addq	$0x8, %r13
    000009ed: 	callq	_ZdlPvm@PLT # Offset: 2541
    000009f2: 	cmpq	%r13, %rbx
    000009f5: 	ja	.Ltmp6288 # Offset: 2549
    000009f7: 	movq	0x30(%rbp), %rdi
    000009fb: 	movq	0x38(%rbp), %r8
    000009ff: 	movq	0x48(%rbp), %rsi
.Ltmp6287:
    00000a03: 	movdqa	0x90(%rsp), %xmm7
    00000a0c: 	movdqa	0xa0(%rsp), %xmm4
    00000a15: 	movups	%xmm7, 0x80(%rbp)
    00000a1c: 	movups	%xmm4, 0x90(%rbp)
    00000a23: 	cmpq	%r8, %rdi
    00000a26: 	jne	.Ltmp6289 # Offset: 2598
.Ltmp6252:
    00000a2c: 	movq	-0x8(%rsi), %rax
    00000a30: 	movl	$0x200, %esi
    00000a35: 	movq	0x1f8(%rax), %rbx
    00000a3c: 	callq	_ZdlPvm@PLT # Offset: 2620
    00000a41: 	movq	0x48(%rbp), %rdx
    00000a45: 	movq	-0x8(%rdx), %rax
    00000a49: 	subq	$0x8, %rdx
    00000a4d: 	movq	%rdx, %xmm6
    00000a52: 	leaq	0x1f8(%rax), %rsi
    00000a59: 	movq	%rax, %xmm5
    00000a5e: 	addq	$0x200, %rax
    00000a64: 	movq	%rsi, %xmm0
    00000a69: 	punpcklqdq	%xmm5, %xmm0
    00000a6d: 	movups	%xmm0, 0x30(%rbp)
    00000a71: 	movq	%rax, %xmm0
    00000a76: 	punpcklqdq	%xmm6, %xmm0
    00000a7a: 	movups	%xmm0, 0x40(%rbp)
    00000a7e: 	jmp	.Ltmp6290 # Offset: 2686
.Ltmp6256:
    00000a83: 	addq	$0x1, 0xa0(%rbp)
    00000a8b: 	movq	%rax, 0xb0(%rbp)
    00000a92: 	cmpq	%r15, 0x18(%rsp)
    00000a97: 	jne	.Ltmp6257 # Offset: 2711
    00000a9d: 	jmp	.Ltmp6250 # Offset: 2717
    00000aa2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6253:
    00000aa8: 	movq	%rax, %rsi
    00000aab: 	notq	%rsi
    00000aae: 	shrq	$0x4, %rsi
    00000ab2: 	notq	%rsi
    00000ab5: 	movq	%rsi, %rdi
    00000ab8: 	shlq	$0x4, %rdi
    00000abc: 	subq	%rdi, %rax
    00000abf: 	shlq	$0x5, %rax
    00000ac3: 	addq	(%r13,%rsi,8), %rax
    00000ac8: 	movq	%rbx, 0x18(%rax)
    00000acc: 	jmp	.Ltmp6283 # Offset: 2764
.Ltmp6284:
    00000ad1: 	movq	0x48(%rsp), %rdi
    00000ad6: 	movl	$0x80, %esi
    00000adb: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2779
    00000ae0: 	movq	0x30(%rbp), %rdi
    00000ae4: 	jmp	.Ltmp6291 # Offset: 2788
    00000ae6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp6293:
    00000af0: 	movq	%rbx, (%rdi)
    00000af3: 	addq	$0x8, %rdi
    00000af7: 	movq	%rdi, 0x30(%rbp)
    00000afb: 	cmpq	%rbx, %r12
    00000afe: 	je	.Ltmp6292 # Offset: 2814
.Ltmp6291:
    00000b00: 	movq	0x40(%rbp), %rax
    00000b04: 	subq	$0x1, %rbx
    00000b08: 	movq	%rbx, 0xb8(%rsp)
    00000b10: 	subq	$0x8, %rax
    00000b14: 	cmpq	%rax, %rdi
    00000b17: 	jne	.Ltmp6293 # Offset: 2839
    00000b19: 	movq	%r14, %rsi
    00000b1c: 	movq	%rbp, %rdi
    00000b1f: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2847
    00000b24: 	movq	0x30(%rbp), %rdi
    00000b28: 	cmpq	%rbx, %r12
    00000b2b: 	jne	.Ltmp6291 # Offset: 2859
.Ltmp6292:
    00000b2d: 	movq	0x38(%rbp), %r8
    00000b31: 	movq	0x48(%rbp), %rsi
    00000b35: 	jmp	.Ltmp6294 # Offset: 2869
.Ltmp6247:
    00000b3a: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp6248:
    00000b43: 	movq	$0x0, 0xd0(%rsp)
    00000b4f: 	pxor	%xmm0, %xmm0
    00000b53: 	movaps	%xmm0, 0xc0(%rsp)
    00000b5b: 	jmp	.Ltmp6295 # Offset: 2907
.Ltmp6273:
    00000b60: 	movq	%rax, %r9
    00000b63: 	notq	%r9
    00000b66: 	shrq	$0x4, %r9
    00000b6a: 	notq	%r9
    00000b6d: 	jmp	.Ltmp6296 # Offset: 2925
.Ltmp6274:
    00000b72: 	shlq	$0x5, %rbx
    00000b76: 	leaq	(%r9,%rbx), %rax
    00000b7a: 	jmp	.Ltmp6297 # Offset: 2938
.Ltmp6286:
    00000b7f: 	shlq	$0x5, %rbx
    00000b83: 	addq	%rbx, %rdx
    00000b86: 	jmp	.Ltmp6298 # Offset: 2950
.Ltmp6285:
    00000b8b: 	movq	%r10, %rdx
    00000b8e: 	notq	%rdx
    00000b91: 	shrq	$0x4, %rdx
    00000b95: 	notq	%rdx
    00000b98: 	jmp	.Ltmp6299 # Offset: 2968
.Ltmp6269:
    00000b9d: 	movq	0xd8(%rsp), %rax
    00000ba5: 	subq	%fs:0x28, %rax
    00000bae: 	jne	.Ltmp6270 # Offset: 2990
    00000bb0: 	addq	$0xe8, %rsp
    00000bb7: 	popq	%rbx
    00000bb8: 	popq	%rbp
    00000bb9: 	popq	%r12
    00000bbb: 	popq	%r13
    00000bbd: 	popq	%r14
    00000bbf: 	popq	%r15
    00000bc1: 	retq # Offset: 3009
.Ltmp6268:
    00000bc2: 	movq	-0x8(%rdx), %rax
    00000bc6: 	addq	$0x200, %rax
    00000bcc: 	jmp	.Ltmp6300 # Offset: 3020
.Ltmp6249:
    00000bd1: 	pxor	%xmm5, %xmm5
    00000bd5: 	movsd	%xmm5, 0x58(%rsp)
    00000bdb: 	jmp	.Ltmp6301 # Offset: 3035
.Ltmp6270:
    00000be0: 	callq	__stack_chk_fail@PLT # Offset: 3040
    00000be5: 	endbr64
    00000be9: 	movq	%rax, %rbx
    00000bec: 	jmp	.Ltmp6302 # Offset: 3052
    00000bee: 	endbr64
    00000bf2: 	movq	%rax, %rdi
    00000bf5: 	jmp	.Ltmp6303 # Offset: 3061
    00000bf7: 	endbr64
    00000bfb: 	movq	%rax, %rbp
    00000bfe: 	jmp	.Ltmp6304 # Offset: 3070
    00000c00: 	endbr64
    00000c04: 	movq	%rax, %r12
    00000c07: 	jmp	.Ltmp6305 # Offset: 3079
    00000c09: 	endbr64
    00000c0d: 	movq	%rax, %rbx
    00000c10: 	jmp	.Ltmp6306 # Offset: 3088
.Ltmp6308:
    00000c12: 	callq	__cxa_end_catch@PLT # Offset: 3090
.Ltmp6302:
    00000c17: 	movq	%rbp, %rdi
    00000c1a: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 3098
.Ltmp6306:
    00000c1f: 	movq	%rbp, %rdi
    00000c22: 	movl	$0xb8, %esi
    00000c27: 	movq	%rbx, %rbp
    00000c2a: 	callq	_ZdlPvm@PLT # Offset: 3114
.Ltmp6304:
    00000c2f: 	movq	0xc0(%rsp), %rdi
    00000c37: 	movq	0xd0(%rsp), %rsi
    00000c3f: 	subq	%rdi, %rsi
    00000c42: 	testq	%rdi, %rdi
    00000c45: 	je	.Ltmp6307 # Offset: 3141
    00000c47: 	callq	_ZdlPvm@PLT # Offset: 3143
.Ltmp6307:
    00000c4c: 	movq	%rbp, %rdi
    00000c4f: 	callq	_Unwind_Resume@PLT # Offset: 3151
.Ltmp6303:
    00000c54: 	callq	__cxa_begin_catch@PLT # Offset: 3156
    00000c59: 	callq	__cxa_rethrow@PLT # Offset: 3161
.Ltmp6305:
    00000c5e: 	movq	%rbp, %rdi
    00000c61: 	movl	$0xb8, %esi
    00000c66: 	callq	_ZdlPvm@PLT # Offset: 3174
    00000c6b: 	movq	%r12, %rdi
    00000c6e: 	callq	_Unwind_Resume@PLT # Offset: 3182
    00000c73: 	endbr64
    00000c77: 	movq	%rax, %r12
    00000c7a: 	callq	__cxa_end_catch@PLT # Offset: 3194
    00000c7f: 	movq	%r12, %rdi
    00000c82: 	callq	__cxa_begin_catch@PLT # Offset: 3202
    00000c87: 	movq	0x58(%rbp), %rax
    00000c8b: 	movq	0x50(%rbp), %rdi
    00000c8f: 	leaq	(,%rax,8), %rsi
    00000c97: 	callq	_ZdlPvm@PLT # Offset: 3223
    00000c9c: 	movq	$0x0, 0x50(%rbp)
    00000ca4: 	movq	$0x0, 0x58(%rbp)
    00000cac: 	callq	__cxa_rethrow@PLT # Offset: 3244
    00000cb1: 	endbr64
    00000cb5: 	movq	%rax, %rbx
    00000cb8: 	jmp	.Ltmp6308 # Offset: 3256
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_pushfrontId20PooledDoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14testPushInsertIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 332
  State       : disassembled
  Address     : 0x42240
  Size        : 0x479
  MaxSize     : 0x480
  Offset      : 0x42240
  Section     : .text
  Orc Section : .local.text._Z14testPushInsertIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0331:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%r8d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	leaq	DATAat0x527db(%rip), %rdx
    00000017: 	pushq	%r12
    00000019: 	pushq	%rbp
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rsi, %rbx
    00000021: 	leaq	(%rbp,%rbx,8), %r14
    00000026: 	subq	$0x48, %rsp
    0000002a: 	movq	%rsi, 0x8(%rsp)
    0000002f: 	leaq	0x10(%rsp), %r12
    00000034: 	movq	%r13, %rsi
    00000037: 	movq	%r12, %rdi
    0000003a: 	movq	%fs:0x28, %rax
    00000043: 	movq	%rax, 0x38(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	movl	%ecx, iterations(%rip)
    00000050: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 80
    00000055: 	movq	%r12, %rdx
    00000058: 	movq	%r14, %rsi
    0000005b: 	movq	%rbp, %rdi
    0000005e: 	callq	_Z13test_pushbackIdSt6vectorIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 94
    00000063: 	movq	0x10(%rsp), %rdi
    00000068: 	leaq	0x20(%rsp), %rbx
    0000006d: 	cmpq	%rbx, %rdi
    00000070: 	je	.Ltmp6309 # Offset: 112
    00000072: 	movq	0x20(%rsp), %rax
    00000077: 	leaq	0x1(%rax), %rsi
    0000007b: 	callq	_ZdlPvm@PLT # Offset: 123
.Ltmp6309:
    00000080: 	leaq	DATAat0x527f2(%rip), %rdx
    00000087: 	movq	%r13, %rsi
    0000008a: 	movq	%r12, %rdi
    0000008d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 141
    00000092: 	movq	%r12, %rdx
    00000095: 	movq	%r14, %rsi
    00000098: 	movq	%rbp, %rdi
    0000009b: 	callq	_Z13test_pushbackIdSt5dequeIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 155
    000000a0: 	movq	0x10(%rsp), %rdi
    000000a5: 	cmpq	%rbx, %rdi
    000000a8: 	je	.Ltmp6310 # Offset: 168
    000000aa: 	movq	0x20(%rsp), %rax
    000000af: 	leaq	0x1(%rax), %rsi
    000000b3: 	callq	_ZdlPvm@PLT # Offset: 179
.Ltmp6310:
    000000b8: 	leaq	DATAat0x52808(%rip), %rdx
    000000bf: 	movq	%r13, %rsi
    000000c2: 	movq	%r12, %rdi
    000000c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 197
    000000ca: 	movq	%r12, %rdx
    000000cd: 	movq	%r14, %rsi
    000000d0: 	movq	%rbp, %rdi
    000000d3: 	callq	_Z13test_pushbackIdNSt7__cxx114listIdSaIdEEELb1EEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 211
    000000d8: 	movq	0x10(%rsp), %rdi
    000000dd: 	cmpq	%rbx, %rdi
    000000e0: 	je	.Ltmp6311 # Offset: 224
    000000e2: 	movq	0x20(%rsp), %rax
    000000e7: 	leaq	0x1(%rax), %rsi
    000000eb: 	callq	_ZdlPvm@PLT # Offset: 235
.Ltmp6311:
    000000f0: 	leaq	DATAat0x5281d(%rip), %rdx
    000000f7: 	movq	%r13, %rsi
    000000fa: 	movq	%r12, %rdi
    000000fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 253
    00000102: 	movq	%r12, %rdx
    00000105: 	movq	%r14, %rsi
    00000108: 	movq	%rbp, %rdi
    0000010b: 	callq	_Z13test_pushbackId14SingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 267
    00000110: 	movq	0x10(%rsp), %rdi
    00000115: 	cmpq	%rbx, %rdi
    00000118: 	je	.Ltmp6312 # Offset: 280
    0000011a: 	movq	0x20(%rsp), %rax
    0000011f: 	leaq	0x1(%rax), %rsi
    00000123: 	callq	_ZdlPvm@PLT # Offset: 291
.Ltmp6312:
    00000128: 	leaq	DATAat0x52900(%rip), %rdx
    0000012f: 	movq	%r13, %rsi
    00000132: 	movq	%r12, %rdi
    00000135: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 309
    0000013a: 	movq	%r12, %rdx
    0000013d: 	movq	%r14, %rsi
    00000140: 	movq	%rbp, %rdi
    00000143: 	callq	_Z13test_pushbackId20PooledSingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 323
    00000148: 	movq	0x10(%rsp), %rdi
    0000014d: 	cmpq	%rbx, %rdi
    00000150: 	je	.Ltmp6313 # Offset: 336
    00000152: 	movq	0x20(%rsp), %rax
    00000157: 	leaq	0x1(%rax), %rsi
    0000015b: 	callq	_ZdlPvm@PLT # Offset: 347
.Ltmp6313:
    00000160: 	leaq	DATAat0x52837(%rip), %rdx
    00000167: 	movq	%r13, %rsi
    0000016a: 	movq	%r12, %rdi
    0000016d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 365
    00000172: 	movq	%r12, %rdx
    00000175: 	movq	%r14, %rsi
    00000178: 	movq	%rbp, %rdi
    0000017b: 	callq	_Z13test_pushbackId14DoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 379
    00000180: 	movq	0x10(%rsp), %rdi
    00000185: 	cmpq	%rbx, %rdi
    00000188: 	je	.Ltmp6314 # Offset: 392
    0000018a: 	movq	0x20(%rsp), %rax
    0000018f: 	leaq	0x1(%rax), %rsi
    00000193: 	callq	_ZdlPvm@PLT # Offset: 403
.Ltmp6314:
    00000198: 	leaq	DATAat0x52920(%rip), %rdx
    0000019f: 	movq	%r13, %rsi
    000001a2: 	movq	%r12, %rdi
    000001a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 421
    000001aa: 	movq	%r12, %rdx
    000001ad: 	movq	%r14, %rsi
    000001b0: 	movq	%rbp, %rdi
    000001b3: 	callq	_Z13test_pushbackId20PooledDoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 435
    000001b8: 	movq	0x10(%rsp), %rdi
    000001bd: 	cmpq	%rbx, %rdi
    000001c0: 	je	.Ltmp6315 # Offset: 448
    000001c2: 	movq	0x20(%rsp), %rax
    000001c7: 	leaq	0x1(%rax), %rsi
    000001cb: 	callq	_ZdlPvm@PLT # Offset: 459
.Ltmp6315:
    000001d0: 	testb	%r15b, %r15b
    000001d3: 	jne	.Ltmp6316 # Offset: 467
.Ltmp6326:
    000001d9: 	leaq	DATAat0x52865(%rip), %rdx
    000001e0: 	movq	%r13, %rsi
    000001e3: 	movq	%r12, %rdi
    000001e6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 486
    000001eb: 	movq	%r12, %rdx
    000001ee: 	movq	%r14, %rsi
    000001f1: 	movq	%rbp, %rdi
    000001f4: 	callq	_Z14test_pushfrontIdSt5dequeIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 500
    000001f9: 	movq	0x10(%rsp), %rdi
    000001fe: 	cmpq	%rbx, %rdi
    00000201: 	je	.Ltmp6317 # Offset: 513
    00000203: 	movq	0x20(%rsp), %rax
    00000208: 	leaq	0x1(%rax), %rsi
    0000020c: 	callq	_ZdlPvm@PLT # Offset: 524
.Ltmp6317:
    00000211: 	leaq	DATAat0x5287c(%rip), %rdx
    00000218: 	movq	%r13, %rsi
    0000021b: 	movq	%r12, %rdi
    0000021e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 542
    00000223: 	movq	%r12, %rdx
    00000226: 	movq	%r14, %rsi
    00000229: 	movq	%rbp, %rdi
    0000022c: 	callq	_Z14test_pushfrontIdSt12forward_listIdSaIdEELb1EEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 556
    00000231: 	movq	0x10(%rsp), %rdi
    00000236: 	cmpq	%rbx, %rdi
    00000239: 	je	.Ltmp6318 # Offset: 569
    0000023b: 	movq	0x20(%rsp), %rax
    00000240: 	leaq	0x1(%rax), %rsi
    00000244: 	callq	_ZdlPvm@PLT # Offset: 580
.Ltmp6318:
    00000249: 	leaq	DATAat0x5289a(%rip), %rdx
    00000250: 	movq	%r13, %rsi
    00000253: 	movq	%r12, %rdi
    00000256: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 598
    0000025b: 	movq	%r12, %rdx
    0000025e: 	movq	%r14, %rsi
    00000261: 	movq	%rbp, %rdi
    00000264: 	callq	_Z14test_pushfrontIdNSt7__cxx114listIdSaIdEEELb1EEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 612
    00000269: 	movq	0x10(%rsp), %rdi
    0000026e: 	cmpq	%rbx, %rdi
    00000271: 	je	.Ltmp6319 # Offset: 625
    00000273: 	movq	0x20(%rsp), %rax
    00000278: 	leaq	0x1(%rax), %rsi
    0000027c: 	callq	_ZdlPvm@PLT # Offset: 636
.Ltmp6319:
    00000281: 	leaq	DATAat0x528b0(%rip), %rdx
    00000288: 	movq	%r13, %rsi
    0000028b: 	movq	%r12, %rdi
    0000028e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 654
    00000293: 	movq	%r12, %rdx
    00000296: 	movq	%r14, %rsi
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Z14test_pushfrontId14SingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 668
    000002a1: 	movq	0x10(%rsp), %rdi
    000002a6: 	cmpq	%rbx, %rdi
    000002a9: 	je	.Ltmp6320 # Offset: 681
    000002ab: 	movq	0x20(%rsp), %rax
    000002b0: 	leaq	0x1(%rax), %rsi
    000002b4: 	callq	_ZdlPvm@PLT # Offset: 692
.Ltmp6320:
    000002b9: 	leaq	DATAat0x52940(%rip), %rdx
    000002c0: 	movq	%r13, %rsi
    000002c3: 	movq	%r12, %rdi
    000002c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 710
    000002cb: 	movq	%r12, %rdx
    000002ce: 	movq	%r14, %rsi
    000002d1: 	movq	%rbp, %rdi
    000002d4: 	callq	_Z14test_pushfrontId20PooledSingleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 724
    000002d9: 	movq	0x10(%rsp), %rdi
    000002de: 	cmpq	%rbx, %rdi
    000002e1: 	je	.Ltmp6321 # Offset: 737
    000002e3: 	movq	0x20(%rsp), %rax
    000002e8: 	leaq	0x1(%rax), %rsi
    000002ec: 	callq	_ZdlPvm@PLT # Offset: 748
.Ltmp6321:
    000002f1: 	leaq	DATAat0x528cb(%rip), %rdx
    000002f8: 	movq	%r13, %rsi
    000002fb: 	movq	%r12, %rdi
    000002fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 766
    00000303: 	movq	%r12, %rdx
    00000306: 	movq	%r14, %rsi
    00000309: 	movq	%rbp, %rdi
    0000030c: 	callq	_Z14test_pushfrontId14DoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 780
    00000311: 	movq	0x10(%rsp), %rdi
    00000316: 	cmpq	%rbx, %rdi
    00000319: 	je	.Ltmp6322 # Offset: 793
    0000031b: 	movq	0x20(%rsp), %rax
    00000320: 	leaq	0x1(%rax), %rsi
    00000324: 	callq	_ZdlPvm@PLT # Offset: 804
.Ltmp6322:
    00000329: 	leaq	DATAat0x52968(%rip), %rdx
    00000330: 	movq	%r13, %rsi
    00000333: 	movq	%r12, %rdi
    00000336: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 822
    0000033b: 	movq	%r12, %rdx
    0000033e: 	movq	%r14, %rsi
    00000341: 	movq	%rbp, %rdi
    00000344: 	callq	_Z14test_pushfrontId20PooledDoubleLinkListIdELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 836
    00000349: 	movq	0x10(%rsp), %rdi
    0000034e: 	cmpq	%rbx, %rdi
    00000351: 	je	.Ltmp6323 # Offset: 849
    00000353: 	movq	0x20(%rsp), %rax
    00000358: 	leaq	0x1(%rax), %rsi
    0000035c: 	callq	_ZdlPvm@PLT # Offset: 860
.Ltmp6323:
    00000361: 	testb	%r15b, %r15b
    00000364: 	jne	.Ltmp6324 # Offset: 868
    00000366: 	movq	0x38(%rsp), %rax
    0000036b: 	subq	%fs:0x28, %rax
    00000374: 	jne	.Ltmp6325 # Offset: 884
    00000376: 	addq	$0x48, %rsp
    0000037a: 	popq	%rbx
    0000037b: 	popq	%rbp
    0000037c: 	popq	%r12
    0000037e: 	popq	%r13
    00000380: 	popq	%r14
    00000382: 	popq	%r15
    00000384: 	retq # Offset: 900
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp6316:
    00000388: 	movl	iterations(%rip), %edx
    0000038e: 	movl	0x8(%rsp), %esi
    00000392: 	xorl	%r8d, %r8d
    00000395: 	xorl	%ecx, %ecx
    00000397: 	leaq	DATAat0x52851(%rip), %rdi
    0000039e: 	callq	_Z9summarizePKciiii # Offset: 926
    000003a3: 	jmp	.Ltmp6326 # Offset: 931
    000003a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp6324:
    000003b0: 	movq	0x38(%rsp), %rax
    000003b5: 	subq	%fs:0x28, %rax
    000003be: 	jne	.Ltmp6325 # Offset: 958
    000003c0: 	movl	iterations(%rip), %edx
    000003c6: 	movl	0x8(%rsp), %esi
    000003ca: 	addq	$0x48, %rsp
    000003ce: 	xorl	%ecx, %ecx
    000003d0: 	popq	%rbx
    000003d1: 	xorl	%r8d, %r8d
    000003d4: 	leaq	DATAat0x528e6(%rip), %rdi
    000003db: 	popq	%rbp
    000003dc: 	popq	%r12
    000003de: 	popq	%r13
    000003e0: 	popq	%r14
    000003e2: 	popq	%r15
    000003e4: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 996
.Ltmp6325:
    000003e9: 	callq	__stack_chk_fail@PLT # Offset: 1001
    000003ee: 	endbr64
.Ltmp6328:
    000003f2: 	movq	%rax, %rbp
    000003f5: 	jmp	.Ltmp6327 # Offset: 1013
    000003f7: 	endbr64
    000003fb: 	jmp	.Ltmp6328 # Offset: 1019
    000003fd: 	endbr64
    00000401: 	jmp	.Ltmp6328 # Offset: 1025
    00000403: 	endbr64
    00000407: 	jmp	.Ltmp6328 # Offset: 1031
    00000409: 	endbr64
    0000040d: 	jmp	.Ltmp6328 # Offset: 1037
    0000040f: 	endbr64
    00000413: 	jmp	.Ltmp6328 # Offset: 1043
.Ltmp6327:
    00000415: 	movq	0x10(%rsp), %rdi
    0000041a: 	cmpq	%rbx, %rdi
    0000041d: 	je	.Ltmp6329 # Offset: 1053
.Ltmp6331:
    0000041f: 	movq	0x20(%rsp), %rax
    00000424: 	leaq	0x1(%rax), %rsi
    00000428: 	callq	_ZdlPvm@PLT # Offset: 1064
.Ltmp6329:
    0000042d: 	movq	%rbp, %rdi
    00000430: 	callq	_Unwind_Resume@PLT # Offset: 1072
    00000435: 	endbr64
    00000439: 	jmp	.Ltmp6328 # Offset: 1081
    0000043b: 	endbr64
    0000043f: 	movq	%rax, %rbp
    00000442: 	jmp	.Ltmp6330 # Offset: 1090
    00000444: 	endbr64
    00000448: 	jmp	.Ltmp6328 # Offset: 1096
    0000044a: 	endbr64
    0000044e: 	jmp	.Ltmp6328 # Offset: 1102
    00000450: 	endbr64
    00000454: 	jmp	.Ltmp6328 # Offset: 1108
    00000456: 	endbr64
    0000045a: 	jmp	.Ltmp6328 # Offset: 1114
    0000045c: 	endbr64
    00000460: 	jmp	.Ltmp6328 # Offset: 1120
    00000462: 	endbr64
    00000466: 	jmp	.Ltmp6328 # Offset: 1126
.Ltmp6330:
    00000468: 	movq	0x10(%rsp), %rdi
    0000046d: 	leaq	0x20(%rsp), %rax
    00000472: 	cmpq	%rax, %rdi
    00000475: 	jne	.Ltmp6331 # Offset: 1141
    00000477: 	jmp	.Ltmp6329 # Offset: 1143
DWARF CFI Instructions:
    <empty>
End of Function "_Z14testPushInsertIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE23_M_new_elements_at_backEm" after disassembly {
  Number      : 333
  State       : disassembled
  Address     : 0x426c0
  Size        : 0x271
  MaxSize     : 0x280
  Offset      : 0x426c0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeI14PooledHashNodeIddESaIS1_EE23_M_new_elements_at_backEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0332:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x8, %rsp
    00000018: 	movq	0x48(%rdi), %rax
    0000001c: 	movq	0x28(%rdi), %rsi
    00000020: 	movq	0x30(%rbp), %rdx
    00000024: 	subq	0x38(%rbp), %rdx
    00000028: 	movq	%rax, %rbx
    0000002b: 	sarq	$0x5, %rdx
    0000002f: 	subq	%rsi, %rbx
    00000032: 	movq	%rbx, %rdi
    00000035: 	sarq	$0x3, %rdi
    00000039: 	cmpq	$0x1, %rax
    0000003d: 	movq	%rdi, %rcx
    00000040: 	adcq	$-0x1, %rcx
    00000044: 	shlq	$0x4, %rcx
    00000048: 	addq	%rcx, %rdx
    0000004b: 	movq	0x20(%rbp), %rcx
    0000004f: 	subq	0x10(%rbp), %rcx
    00000053: 	sarq	$0x5, %rcx
    00000057: 	addq	%rcx, %rdx
    0000005a: 	movabsq	$0x3ffffffffffffff, %rcx
    00000064: 	subq	%rdx, %rcx
    00000067: 	cmpq	%r12, %rcx
    0000006a: 	jb	.Ltmp6332 # Offset: 106
    00000070: 	movq	(%rbp), %r8
    00000074: 	movq	0x8(%rbp), %rcx
    00000078: 	movq	%rax, %rdx
    0000007b: 	addq	$0xf, %r12
    0000007f: 	shrq	$0x4, %r12
    00000083: 	subq	%r8, %rdx
    00000086: 	movq	%rcx, %r9
    00000089: 	leaq	0x1(%r12), %r10
    0000008e: 	sarq	$0x3, %rdx
    00000092: 	subq	%rdx, %r9
    00000095: 	cmpq	%r9, %r10
    00000098: 	ja	.Ltmp6333 # Offset: 152
.Ltmp6340:
    0000009a: 	movl	$0x1, %ebx
    0000009f: 	testq	%r12, %r12
    000000a2: 	jne	.Ltmp6334 # Offset: 162
    000000a4: 	jmp	.Ltmp6335 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp6336:
    000000b0: 	movq	0x48(%rbp), %rax
    000000b4: 	movq	%rdx, %rbx
.Ltmp6334:
    000000b7: 	movl	$0x200, %edi
    000000bc: 	leaq	(%rax,%rbx,8), %r13
    000000c0: 	callq	_Znwm@PLT # Offset: 192
    000000c5: 	movq	%rax, (%r13)
    000000c9: 	leaq	0x1(%rbx), %rdx
    000000cd: 	cmpq	%rbx, %r12
    000000d0: 	jne	.Ltmp6336 # Offset: 208
.Ltmp6335:
    000000d2: 	addq	$0x8, %rsp
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	popq	%r12
    000000da: 	popq	%r13
    000000dc: 	popq	%r14
    000000de: 	popq	%r15
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp6333:
    000000e8: 	leaq	0x1(%r12,%rdi), %r13
    000000ed: 	leaq	(%r13,%r13), %rdx
    000000f2: 	cmpq	%rdx, %rcx
    000000f5: 	ja	.Ltmp6337 # Offset: 245
    000000fb: 	cmpq	%rcx, %r12
    000000fe: 	movq	%rcx, %rax
    00000101: 	cmovaeq	%r12, %rax
    00000105: 	leaq	0x2(%rcx,%rax), %r15
    0000010a: 	movq	%r15, %rax
    0000010d: 	shrq	$0x3c, %rax
    00000111: 	jne	.Ltmp6338 # Offset: 273
    00000117: 	leaq	(,%r15,8), %rdi
    0000011f: 	callq	_Znwm@PLT # Offset: 287
    00000124: 	movq	0x28(%rbp), %rsi
    00000128: 	movq	%rax, %r14
    0000012b: 	movq	%r15, %rax
    0000012e: 	subq	%r13, %rax
    00000131: 	shrq	%rax
    00000134: 	leaq	(%r14,%rax,8), %r13
    00000138: 	movq	0x48(%rbp), %rax
    0000013c: 	leaq	0x8(%rax), %rdx
    00000140: 	cmpq	%rsi, %rdx
    00000143: 	je	.Ltmp6339 # Offset: 323
    00000145: 	subq	%rsi, %rdx
    00000148: 	movq	%r13, %rdi
    0000014b: 	callq	memmove@PLT # Offset: 331
.Ltmp6339:
    00000150: 	movq	0x8(%rbp), %rax
    00000154: 	movq	(%rbp), %rdi
    00000158: 	leaq	(,%rax,8), %rsi
    00000160: 	callq	_ZdlPvm@PLT # Offset: 352
    00000165: 	movq	%r14, (%rbp)
    00000169: 	movq	%r15, 0x8(%rbp)
.Ltmp6342:
    0000016d: 	movq	(%r13), %rax
    00000171: 	movq	(%r13), %xmm0
    00000177: 	movq	%r13, 0x28(%rbp)
    0000017b: 	addq	$0x200, %rax
    00000181: 	movq	%rax, %xmm1
    00000186: 	leaq	(%r13,%rbx), %rax
    0000018b: 	punpcklqdq	%xmm1, %xmm0
    0000018f: 	movq	%rax, 0x48(%rbp)
    00000193: 	movups	%xmm0, 0x18(%rbp)
    00000197: 	movq	(%rax), %rsi
    0000019a: 	leaq	0x200(%rsi), %rdx
    000001a1: 	movq	%rsi, %xmm0
    000001a6: 	movq	%rdx, %xmm2
    000001ab: 	punpcklqdq	%xmm2, %xmm0
    000001af: 	movups	%xmm0, 0x38(%rbp)
    000001b3: 	jmp	.Ltmp6340 # Offset: 435
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp6337:
    000001c0: 	subq	%r13, %rcx
    000001c3: 	addq	$0x8, %rax
    000001c7: 	shrq	%rcx
    000001ca: 	movq	%rax, %rdx
    000001cd: 	leaq	(%r8,%rcx,8), %r13
    000001d1: 	subq	%rsi, %rdx
    000001d4: 	cmpq	%r13, %rsi
    000001d7: 	jbe	.Ltmp6341 # Offset: 471
    000001d9: 	cmpq	%rax, %rsi
    000001dc: 	je	.Ltmp6342 # Offset: 476
    000001de: 	movq	%r13, %rdi
    000001e1: 	callq	memmove@PLT # Offset: 481
    000001e6: 	jmp	.Ltmp6342 # Offset: 486
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp6341:
    000001f0: 	cmpq	%rax, %rsi
    000001f3: 	je	.Ltmp6342 # Offset: 499
    000001f9: 	leaq	0x8(%rbx), %rdi
    000001fd: 	subq	%rdx, %rdi
    00000200: 	addq	%r13, %rdi
    00000203: 	callq	memmove@PLT # Offset: 515
    00000208: 	jmp	.Ltmp6342 # Offset: 520
.Ltmp6338:
    0000020d: 	shrq	$0x3d, %r15
    00000211: 	je	.Ltmp6343 # Offset: 529
    00000213: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 531
.Ltmp6343:
    00000218: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 536
.Ltmp6332:
    0000021d: 	leaq	DATAat0x52370(%rip), %rdi
    00000224: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 548
    00000229: 	endbr64
    0000022d: 	movq	%rax, %rdi
    00000230: 	callq	__cxa_begin_catch@PLT # Offset: 560
    00000235: 	movl	$0x1, %r12d
.Ltmp6345:
    0000023b: 	cmpq	%rbx, %r12
    0000023e: 	je	.Ltmp6344 # Offset: 574
    00000240: 	movq	0x48(%rbp), %rax
    00000244: 	movl	$0x200, %esi
    00000249: 	movq	(%rax,%r12,8), %rdi
    0000024d: 	addq	$0x1, %r12
    00000251: 	callq	_ZdlPvm@PLT # Offset: 593
    00000256: 	jmp	.Ltmp6345 # Offset: 598
.Ltmp6344:
    00000258: 	callq	__cxa_rethrow@PLT # Offset: 600
    0000025d: 	endbr64
    00000261: 	movq	%rax, %rbp
    00000264: 	callq	__cxa_end_catch@PLT # Offset: 612
    00000269: 	movq	%rbp, %rdi
    0000026c: 	callq	_Unwind_Resume@PLT # Offset: 620
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE23_M_new_elements_at_backEm"

Binary Function "_ZN20HashMapPoolAllocatorIddE13allocate_nodeEv" after disassembly {
  Number      : 334
  State       : disassembled
  Address     : 0x42940
  Size        : 0x303
  MaxSize     : 0x310
  Offset      : 0x42940
  Section     : .text
  Orc Section : .local.text._ZN20HashMapPoolAllocatorIddE13allocate_nodeEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0333:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x38, %rsp
    00000011: 	movq	0x48(%rdi), %rsi
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x28(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	movq	0x30(%rdi), %rax
    00000029: 	movq	0x38(%rdi), %rdi
    0000002d: 	movq	%rsi, %rdx
    00000030: 	subq	0x28(%rbp), %rdx
    00000034: 	sarq	$0x3, %rdx
    00000038: 	movq	%rax, %rcx
    0000003b: 	cmpq	$0x1, %rsi
    0000003f: 	adcq	$-0x1, %rdx
    00000043: 	subq	%rdi, %rcx
    00000046: 	sarq	$0x3, %rcx
    0000004a: 	shlq	$0x6, %rdx
    0000004e: 	addq	%rcx, %rdx
    00000051: 	movq	0x20(%rbp), %rcx
    00000055: 	subq	0x10(%rbp), %rcx
    00000059: 	sarq	$0x3, %rcx
    0000005d: 	addq	%rcx, %rdx
    00000060: 	je	.Ltmp6346 # Offset: 96
.Ltmp6357:
    00000062: 	cmpq	%rax, %rdi
    00000065: 	je	.Ltmp6347 # Offset: 101
    0000006b: 	movq	-0x8(%rax), %rbx
    0000006f: 	subq	$0x8, %rax
    00000073: 	movq	%rax, 0x30(%rbp)
.Ltmp6358:
    00000077: 	movq	0x60(%rbp), %rdx
    0000007b: 	movq	0x78(%rbp), %rcx
    0000007f: 	movq	%rdx, %rax
    00000082: 	subq	0x68(%rbp), %rax
    00000086: 	sarq	$0x5, %rax
    0000008a: 	addq	%rbx, %rax
    0000008d: 	js	.Ltmp6348 # Offset: 141
    00000093: 	cmpq	$0xf, %rax
    00000097: 	jle	.Ltmp6349 # Offset: 151
    00000099: 	movq	%rax, %rdx
    0000009c: 	andl	$0xf, %eax
    0000009f: 	sarq	$0x4, %rdx
    000000a3: 	shlq	$0x5, %rax
    000000a7: 	addq	(%rcx,%rdx,8), %rax
    000000ab: 	movq	%rbx, 0x18(%rax)
.Ltmp6351:
    000000af: 	movq	0x28(%rsp), %rdx
    000000b4: 	subq	%fs:0x28, %rdx
    000000bd: 	jne	.Ltmp6350 # Offset: 189
    000000c3: 	addq	$0x38, %rsp
    000000c7: 	popq	%rbx
    000000c8: 	popq	%rbp
    000000c9: 	popq	%r12
    000000cb: 	popq	%r13
    000000cd: 	retq # Offset: 205
.Ltmp6349:
    000000ce: 	movq	%rbx, %rax
    000000d1: 	shlq	$0x5, %rax
    000000d5: 	addq	%rdx, %rax
    000000d8: 	movq	%rbx, 0x18(%rax)
    000000dc: 	jmp	.Ltmp6351 # Offset: 220
.Ltmp6346:
    000000de: 	movq	0x98(%rbp), %rcx
    000000e5: 	movq	0x78(%rbp), %rdx
    000000e9: 	movq	0x70(%rbp), %r8
    000000ed: 	movq	0x80(%rbp), %r10
    000000f4: 	movq	%rcx, %r13
    000000f7: 	movq	0x60(%rbp), %r9
    000000fb: 	subq	%rdx, %r13
    000000fe: 	sarq	$0x3, %r13
    00000102: 	cmpq	$0x1, %rcx
    00000106: 	adcq	$-0x1, %r13
    0000010a: 	subq	0x88(%rbp), %r10
    00000111: 	sarq	$0x5, %r10
    00000115: 	shlq	$0x4, %r13
    00000119: 	addq	%r10, %r13
    0000011c: 	movq	%r8, %r10
    0000011f: 	subq	%r9, %r10
    00000122: 	sarq	$0x5, %r10
    00000126: 	addq	%r10, %r13
    00000129: 	leaq	0x80(%r13), %rbx
    00000130: 	cmpq	%rbx, %r13
    00000133: 	jb	.Ltmp6352 # Offset: 307
    00000139: 	movq	0x68(%rbp), %r11
    0000013d: 	movq	%r9, %r10
    00000140: 	subq	%r11, %r10
    00000143: 	sarq	$0x5, %r10
    00000147: 	addq	%rbx, %r10
    0000014a: 	js	.Ltmp6353 # Offset: 330
    00000150: 	cmpq	$0xf, %r10
    00000154: 	jg	.Ltmp6354 # Offset: 340
    0000015a: 	shlq	$0x5, %rbx
    0000015e: 	addq	%rbx, %r9
.Ltmp6362:
    00000161: 	movq	%r9, %xmm3
    00000166: 	movq	%r11, %xmm5
    0000016b: 	movq	%r8, %xmm4
    00000170: 	movq	%rdx, %xmm6
    00000175: 	punpcklqdq	%xmm5, %xmm3
    00000179: 	leaq	0x8(%rcx), %rbx
    0000017d: 	punpcklqdq	%xmm6, %xmm4
    00000181: 	leaq	0x8(%rdx), %r12
    00000185: 	movaps	%xmm3, (%rsp)
    00000189: 	movaps	%xmm4, 0x10(%rsp)
    0000018e: 	cmpq	%r12, %rbx
    00000191: 	jbe	.Ltmp6355 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6356:
    00000198: 	movq	(%r12), %rdi
    0000019c: 	movl	$0x200, %esi
    000001a1: 	addq	$0x8, %r12
    000001a5: 	callq	_ZdlPvm@PLT # Offset: 421
    000001aa: 	cmpq	%r12, %rbx
    000001ad: 	ja	.Ltmp6356 # Offset: 429
    000001af: 	movq	0x30(%rbp), %rax
    000001b3: 	movq	0x38(%rbp), %rdi
    000001b7: 	movq	0x48(%rbp), %rsi
.Ltmp6355:
    000001bb: 	movdqa	(%rsp), %xmm7
    000001c0: 	movdqa	0x10(%rsp), %xmm5
    000001c6: 	movups	%xmm7, 0x80(%rbp)
    000001cd: 	movups	%xmm5, 0x90(%rbp)
    000001d4: 	jmp	.Ltmp6357 # Offset: 468
.Ltmp6347:
    000001d9: 	movq	-0x8(%rsi), %rax
    000001dd: 	movl	$0x200, %esi
    000001e2: 	movq	0x1f8(%rax), %rbx
    000001e9: 	callq	_ZdlPvm@PLT # Offset: 489
    000001ee: 	movq	0x48(%rbp), %rdx
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	subq	$0x8, %rdx
    000001fa: 	movq	%rdx, %xmm2
    000001ff: 	leaq	0x1f8(%rax), %rsi
    00000206: 	movq	%rax, %xmm1
    0000020b: 	addq	$0x200, %rax
    00000211: 	movq	%rsi, %xmm0
    00000216: 	punpcklqdq	%xmm1, %xmm0
    0000021a: 	movups	%xmm0, 0x30(%rbp)
    0000021e: 	movq	%rax, %xmm0
    00000223: 	punpcklqdq	%xmm2, %xmm0
    00000227: 	movups	%xmm0, 0x40(%rbp)
    0000022b: 	jmp	.Ltmp6358 # Offset: 555
.Ltmp6348:
    00000230: 	movq	%rax, %rdx
    00000233: 	notq	%rdx
    00000236: 	shrq	$0x4, %rdx
    0000023a: 	notq	%rdx
    0000023d: 	movq	%rdx, %rsi
    00000240: 	shlq	$0x4, %rsi
    00000244: 	subq	%rsi, %rax
    00000247: 	shlq	$0x5, %rax
    0000024b: 	addq	(%rcx,%rdx,8), %rax
    0000024f: 	movq	%rbx, 0x18(%rax)
    00000253: 	jmp	.Ltmp6351 # Offset: 595
.Ltmp6352:
    00000258: 	leaq	0x50(%rbp), %rdi
    0000025c: 	movl	$0x80, %esi
    00000261: 	leaq	0x20(%rsp), %r12
    00000266: 	callq	"_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 614
    0000026b: 	movq	0x30(%rbp), %rax
    0000026f: 	movq	0x40(%rbp), %rcx
    00000273: 	jmp	.Ltmp6359 # Offset: 627
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp6361:
    00000278: 	movq	%rbx, (%rax)
    0000027b: 	addq	$0x8, %rax
    0000027f: 	movq	%rax, 0x30(%rbp)
    00000283: 	cmpq	%rbx, %r13
    00000286: 	je	.Ltmp6360 # Offset: 646
.Ltmp6359:
    00000288: 	subq	$0x1, %rbx
    0000028c: 	leaq	-0x8(%rcx), %rdx
    00000290: 	movq	%rbx, 0x20(%rsp)
    00000295: 	cmpq	%rdx, %rax
    00000298: 	jne	.Ltmp6361 # Offset: 664
    0000029a: 	movq	%r12, %rsi
    0000029d: 	movq	%rbp, %rdi
    000002a0: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 672
    000002a5: 	movq	0x30(%rbp), %rax
    000002a9: 	cmpq	%rbx, %r13
    000002ac: 	je	.Ltmp6360 # Offset: 684
    000002ae: 	movq	0x40(%rbp), %rcx
    000002b2: 	jmp	.Ltmp6359 # Offset: 690
.Ltmp6360:
    000002b4: 	movq	0x38(%rbp), %rdi
    000002b8: 	movq	0x48(%rbp), %rsi
    000002bc: 	jmp	.Ltmp6357 # Offset: 700
.Ltmp6353:
    000002c1: 	movq	%r10, %r9
    000002c4: 	notq	%r9
    000002c7: 	shrq	$0x4, %r9
    000002cb: 	notq	%r9
.Ltmp6363:
    000002ce: 	movq	%r9, %rbx
    000002d1: 	leaq	(%rdx,%r9,8), %rdx
    000002d5: 	movq	%r10, %r9
    000002d8: 	shlq	$0x4, %rbx
    000002dc: 	movq	(%rdx), %r11
    000002df: 	subq	%rbx, %r9
    000002e2: 	shlq	$0x5, %r9
    000002e6: 	leaq	0x200(%r11), %r8
    000002ed: 	addq	%r11, %r9
    000002f0: 	jmp	.Ltmp6362 # Offset: 752
.Ltmp6354:
    000002f5: 	movq	%r10, %r9
    000002f8: 	sarq	$0x4, %r9
    000002fc: 	jmp	.Ltmp6363 # Offset: 764
.Ltmp6350:
    000002fe: 	callq	__stack_chk_fail@PLT # Offset: 766
DWARF CFI Instructions:
    <empty>
End of Function "_ZN20HashMapPoolAllocatorIddE13allocate_nodeEv"

Binary Function "_Z23test_find_simplehashmapId13PooledHashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 335
  State       : disassembled
  Address     : 0x42c50
  Size        : 0x5e6
  MaxSize     : 0x5f0
  Offset      : 0x42c50
  Section     : .text
  Orc Section : .local.text._Z23test_find_simplehashmapId13PooledHashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0334:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, %rbx
    00000014: 	subq	$0x138, %rsp
    0000001b: 	movq	%rsi, 0x30(%rsp)
    00000020: 	movq	%rdx, 0x20(%rsp)
    00000025: 	movq	%rcx, 0x28(%rsp)
    0000002a: 	movq	%r8, 0x48(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x128(%rsp)
    00000040: 	xorl	%eax, %eax
    00000042: 	leaq	0x60(%rsp), %rax
    00000047: 	movq	%rax, %rdi
    0000004a: 	movq	%rax, 0x38(%rsp)
    0000004f: 	callq	_ZN20HashMapPoolAllocatorIddEC2Ev # Offset: 79
    00000054: 	pxor	%xmm0, %xmm0
    00000058: 	movq	$0x0, 0x110(%rsp)
    00000064: 	movq	$0x0, 0x118(%rsp)
    00000070: 	movl	$0x3f800000, 0x120(%rsp)
    0000007b: 	movaps	%xmm0, 0x100(%rsp)
    00000083: 	cmpq	%rbx, %rbp
    00000086: 	je	.Ltmp6364 # Offset: 134
    0000008c: 	pxor	%xmm3, %xmm3
    00000090: 	xorl	%ebx, %ebx
    00000092: 	movl	$0xc70f6907, %r12d
    00000098: 	movsd	%xmm3, 0x8(%rsp)
    0000009e: 	movsd	%xmm3, 0x10(%rsp)
    000000a4: 	testq	%rbx, %rbx
    000000a7: 	je	.Ltmp6365 # Offset: 167
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp6371:
    000000b0: 	movsd	(%rbp), %xmm0
    000000b5: 	ucomisd	0x8(%rsp), %xmm0
    000000bb: 	movsd	%xmm0, 0x58(%rsp)
    000000c1: 	jp	.Ltmp6366 # Offset: 193
    000000c7: 	movl	$0x0, %eax
    000000cc: 	jne	.Ltmp6366 # Offset: 204
.Ltmp6382:
    000000d2: 	xorl	%edx, %edx
    000000d4: 	divq	0x110(%rsp)
    000000dc: 	movq	0x118(%rsp), %rax
    000000e4: 	movq	(%rax,%rdx,8), %rax
    000000e8: 	leaq	(,%rdx,8), %rbx
    000000f0: 	testq	%rax, %rax
    000000f3: 	je	.Ltmp6367 # Offset: 243
    000000f9: 	movsd	(%rbp), %xmm0
    000000fe: 	jmp	.Ltmp6368 # Offset: 254
.Ltmp6369:
    00000100: 	movq	0x10(%rax), %rax
    00000104: 	testq	%rax, %rax
    00000107: 	je	.Ltmp6367 # Offset: 263
.Ltmp6368:
    0000010d: 	ucomisd	(%rax), %xmm0
    00000111: 	jp	.Ltmp6369 # Offset: 273
    00000113: 	jne	.Ltmp6369 # Offset: 275
    00000115: 	movsd	%xmm0, 0x8(%rax)
.Ltmp6383:
    0000011a: 	movsd	0x10(%rsp), %xmm6
    00000120: 	addsd	(%rbp), %xmm6
    00000125: 	addq	$0x8, %rbp
    00000129: 	movsd	%xmm6, 0x10(%rsp)
    0000012f: 	cmpq	%rbp, 0x30(%rsp)
    00000134: 	je	.Ltmp6370 # Offset: 308
    0000013a: 	movq	0x108(%rsp), %rbx
    00000142: 	testq	%rbx, %rbx
    00000145: 	jne	.Ltmp6371 # Offset: 325
.Ltmp6365:
    0000014b: 	movss	DATAat0x537b0(%rip), %xmm2
    00000153: 	movss	DATAat0x537a4(%rip), %xmm0
    0000015b: 	divss	0x120(%rsp), %xmm0
    00000164: 	movaps	%xmm0, %xmm1
    00000167: 	movss	DATAat0x5379c(%rip), %xmm3
    0000016f: 	movq	0x110(%rsp), %rax
    00000177: 	andps	%xmm2, %xmm1
    0000017a: 	ucomiss	%xmm1, %xmm3
    0000017d: 	movq	%rax, 0x18(%rsp)
    00000182: 	jbe	.Ltmp6372 # Offset: 386
    00000184: 	cvttss2si	%xmm0, %eax
    00000188: 	pxor	%xmm1, %xmm1
    0000018c: 	movaps	%xmm0, %xmm3
    0000018f: 	movss	DATAat0x53798(%rip), %xmm7
    00000197: 	andnps	%xmm0, %xmm2
    0000019a: 	cvtsi2ss	%eax, %xmm1
    0000019e: 	cmpnless	%xmm1, %xmm3
    000001a3: 	andps	%xmm7, %xmm3
    000001a6: 	addss	%xmm3, %xmm1
    000001aa: 	orps	%xmm2, %xmm1
    000001ad: 	movaps	%xmm1, %xmm0
.Ltmp6372:
    000001b0: 	comiss	DATAat0x537a0(%rip), %xmm0
    000001b7: 	jae	.Ltmp6373 # Offset: 439
    000001bd: 	cvttss2si	%xmm0, %rax
.Ltmp6384:
    000001c2: 	movl	$0x8, %edx
    000001c7: 	movq	0x18(%rsp), %r15
    000001cc: 	movq	$0x8, 0x110(%rsp)
    000001d8: 	cmpq	%rdx, %rax
    000001db: 	cmovbq	%rdx, %rax
    000001df: 	movq	%rax, %rdx
    000001e2: 	shrq	%rdx
    000001e5: 	addq	%rdx, %rax
    000001e8: 	movq	%rax, 0x108(%rsp)
    000001f0: 	cmpq	$0x8, %r15
    000001f4: 	je	.Ltmp6371 # Offset: 500
    000001fa: 	movl	$0x40, %edi
    000001ff: 	callq	_Znam@PLT # Offset: 511
    00000204: 	pxor	%xmm0, %xmm0
    00000208: 	movq	%rax, %r14
    0000020b: 	movups	%xmm0, (%rax)
    0000020e: 	movups	%xmm0, 0x10(%rax)
    00000212: 	movups	%xmm0, 0x20(%rax)
    00000216: 	movups	%xmm0, 0x30(%rax)
    0000021a: 	movq	0x118(%rsp), %rax
    00000222: 	movq	%rax, %rdi
    00000225: 	testq	%r15, %r15
    00000228: 	je	.Ltmp6374 # Offset: 552
    0000022e: 	movq	%rbp, 0x40(%rsp)
    00000233: 	movq	%rax, %rbp
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp6380:
    00000240: 	movq	(%rbp,%rbx,8), %r13
    00000245: 	testq	%r13, %r13
    00000248: 	jne	.Ltmp6375 # Offset: 584
    0000024a: 	jmp	.Ltmp6376 # Offset: 586
    0000024c: 	nopl	(%rax) # Size: 4
.Ltmp6378:
    00000250: 	movq	(%r14), %rax
    00000253: 	movq	%rax, 0x10(%r13)
    00000257: 	movq	%r13, (%r14)
    0000025a: 	testq	%r15, %r15
    0000025d: 	je	.Ltmp6376 # Offset: 605
.Ltmp6379:
    0000025f: 	movq	%r15, %r13
.Ltmp6375:
    00000262: 	movsd	(%r13), %xmm0
    00000268: 	ucomisd	0x8(%rsp), %xmm0
    0000026e: 	movq	0x10(%r13), %r15
    00000272: 	movsd	%xmm0, 0x58(%rsp)
    00000278: 	jp	.Ltmp6377 # Offset: 632
    0000027a: 	je	.Ltmp6378 # Offset: 634
.Ltmp6377:
    0000027c: 	movq	%r12, %rdx
    0000027f: 	leaq	0x58(%rsp), %rdi
    00000284: 	movl	$0x8, %esi
    00000289: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 649
    0000028e: 	xorl	%edx, %edx
    00000290: 	divq	0x110(%rsp)
    00000298: 	leaq	(%r14,%rdx,8), %rax
    0000029c: 	movq	(%rax), %rdx
    0000029f: 	movq	%rdx, 0x10(%r13)
    000002a3: 	movq	%r13, (%rax)
    000002a6: 	testq	%r15, %r15
    000002a9: 	jne	.Ltmp6379 # Offset: 681
.Ltmp6376:
    000002ab: 	addq	$0x1, %rbx
    000002af: 	cmpq	%rbx, 0x18(%rsp)
    000002b4: 	jne	.Ltmp6380 # Offset: 692
    000002b6: 	movq	0x40(%rsp), %rbp
    000002bb: 	movq	0x118(%rsp), %rdi
.Ltmp6374:
    000002c3: 	testq	%rdi, %rdi
    000002c6: 	je	.Ltmp6381 # Offset: 710
    000002c8: 	callq	_ZdaPv@PLT # Offset: 712
.Ltmp6381:
    000002cd: 	movq	%r14, 0x118(%rsp)
    000002d5: 	jmp	.Ltmp6371 # Offset: 725
.Ltmp6366:
    000002da: 	leaq	0x58(%rsp), %rdi
    000002df: 	movq	%r12, %rdx
    000002e2: 	movl	$0x8, %esi
    000002e7: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 743
    000002ec: 	jmp	.Ltmp6382 # Offset: 748
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp6367:
    000002f8: 	movq	0x38(%rsp), %rdi
    000002fd: 	callq	_ZN20HashMapPoolAllocatorIddE13allocate_nodeEv # Offset: 765
    00000302: 	movsd	(%rbp), %xmm0
    00000307: 	addq	0x118(%rsp), %rbx
    0000030f: 	movq	(%rbx), %rdx
    00000312: 	unpcklpd	%xmm0, %xmm0
    00000316: 	movq	%rdx, 0x10(%rax)
    0000031a: 	movups	%xmm0, (%rax)
    0000031d: 	movq	%rax, (%rbx)
    00000320: 	movq	0x100(%rsp), %rax
    00000328: 	addq	$0x1, %rax
    0000032c: 	movq	%rax, 0x100(%rsp)
    00000334: 	cmpq	0x108(%rsp), %rax
    0000033c: 	jbe	.Ltmp6383 # Offset: 828
    00000342: 	movq	0x38(%rsp), %rdi
    00000347: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv # Offset: 839
    0000034c: 	jmp	.Ltmp6383 # Offset: 844
.Ltmp6373:
    00000351: 	subss	DATAat0x537a0(%rip), %xmm0
    00000359: 	cvttss2si	%xmm0, %rax
    0000035e: 	btcq	$0x3f, %rax
    00000363: 	jmp	.Ltmp6384 # Offset: 867
.Ltmp6364:
    00000368: 	pxor	%xmm3, %xmm3
    0000036c: 	movsd	%xmm3, 0x8(%rsp)
    00000372: 	movsd	%xmm3, 0x10(%rsp)
.Ltmp6370:
    00000378: 	callq	clock@PLT # Offset: 888
    0000037d: 	xorl	%ebx, %ebx
    0000037f: 	movl	$0xc70f6907, %ebp
    00000384: 	leaq	0x58(%rsp), %r12
    00000389: 	movq	%rax, start_time(%rip)
    00000390: 	movl	iterations(%rip), %eax
    00000396: 	leaq	DATAat0x52360(%rip), %r14
    0000039d: 	testl	%eax, %eax
    0000039f: 	jle	.Ltmp6385 # Offset: 927
    000003a5: 	nopl	(%rax) # Size: 3
.Ltmp6393:
    000003a8: 	movq	0x28(%rsp), %rsi
    000003ad: 	pxor	%xmm1, %xmm1
    000003b1: 	cmpq	%rsi, 0x20(%rsp)
    000003b6: 	je	.Ltmp6386 # Offset: 950
    000003bc: 	movq	0x110(%rsp), %rcx
    000003c4: 	movq	0x20(%rsp), %r15
    000003c9: 	movq	%rsi, %r13
    000003cc: 	pxor	%xmm1, %xmm1
.Ltmp6391:
    000003d0: 	testq	%rcx, %rcx
    000003d3: 	je	.Ltmp6387 # Offset: 979
    000003d9: 	movsd	(%r15), %xmm0
    000003de: 	ucomisd	0x8(%rsp), %xmm0
    000003e4: 	movsd	%xmm0, 0x58(%rsp)
    000003ea: 	jp	.Ltmp6388 # Offset: 1002
    000003f0: 	movl	$0x0, %edx
    000003f5: 	jne	.Ltmp6388 # Offset: 1013
.Ltmp6400:
    000003fb: 	movq	0x118(%rsp), %rax
    00000403: 	movq	(%rax,%rdx), %rax
    00000407: 	testq	%rax, %rax
    0000040a: 	je	.Ltmp6387 # Offset: 1034
    00000410: 	movsd	(%r15), %xmm0
    00000415: 	jmp	.Ltmp6389 # Offset: 1045
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp6390:
    00000420: 	movq	0x10(%rax), %rax
    00000424: 	testq	%rax, %rax
    00000427: 	je	.Ltmp6387 # Offset: 1063
.Ltmp6389:
    0000042d: 	ucomisd	(%rax), %xmm0
    00000431: 	jp	.Ltmp6390 # Offset: 1073
    00000433: 	jne	.Ltmp6390 # Offset: 1075
    00000435: 	addq	$0x8, %r15
    00000439: 	addsd	0x8(%rax), %xmm1
    0000043e: 	cmpq	%r15, %r13
    00000441: 	jne	.Ltmp6391 # Offset: 1089
.Ltmp6386:
    00000443: 	ucomisd	0x10(%rsp), %xmm1
    00000449: 	jp	.Ltmp6392 # Offset: 1097
    0000044f: 	jne	.Ltmp6392 # Offset: 1103
.Ltmp6401:
    00000455: 	addl	$0x1, %ebx
    00000458: 	cmpl	%ebx, iterations(%rip)
    0000045e: 	jg	.Ltmp6393 # Offset: 1118
.Ltmp6385:
    00000464: 	movq	0x48(%rsp), %rdi
    00000469: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1129
    0000046e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000475: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000047c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000483: 	je	.Ltmp6394 # Offset: 1155
.Ltmp6402:
    00000489: 	movq	-0x20(%rax), %rbp
    0000048d: 	callq	clock@PLT # Offset: 1165
    00000492: 	pxor	%xmm0, %xmm0
    00000496: 	movq	%rax, end_time(%rip)
    0000049d: 	movq	%rbp, %rdi
    000004a0: 	subq	start_time(%rip), %rax
    000004a7: 	cvtsi2sd	%rax, %xmm0
    000004ac: 	divsd	DATAat0x53788(%rip), %xmm0
    000004b4: 	callq	_Z13record_resultdPKc # Offset: 1204
    000004b9: 	movq	0x118(%rsp), %rdi
    000004c1: 	testq	%rdi, %rdi
    000004c4: 	je	.Ltmp6395 # Offset: 1220
    000004c6: 	callq	_ZdaPv@PLT # Offset: 1222
.Ltmp6395:
    000004cb: 	movq	0xb0(%rsp), %rdi
    000004d3: 	testq	%rdi, %rdi
    000004d6: 	je	.Ltmp6396 # Offset: 1238
    000004d8: 	movq	0xf8(%rsp), %rax
    000004e0: 	movq	0xd8(%rsp), %rbx
    000004e8: 	leaq	0x8(%rax), %rbp
    000004ec: 	cmpq	%rbx, %rbp
    000004ef: 	jbe	.Ltmp6397 # Offset: 1263
    000004f1: 	nopl	(%rax) # Size: 7
.Ltmp6398:
    000004f8: 	movq	(%rbx), %rdi
    000004fb: 	movl	$0x200, %esi
    00000500: 	addq	$0x8, %rbx
    00000504: 	callq	_ZdlPvm@PLT # Offset: 1284
    00000509: 	cmpq	%rbx, %rbp
    0000050c: 	ja	.Ltmp6398 # Offset: 1292
    0000050e: 	movq	0xb0(%rsp), %rdi
.Ltmp6397:
    00000516: 	movq	0xb8(%rsp), %rax
    0000051e: 	leaq	(,%rax,8), %rsi
    00000526: 	callq	_ZdlPvm@PLT # Offset: 1318
.Ltmp6396:
    0000052b: 	movq	0x38(%rsp), %rdi
    00000530: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 1328
    00000535: 	movq	0x128(%rsp), %rax
    0000053d: 	subq	%fs:0x28, %rax
    00000546: 	jne	.Ltmp6399 # Offset: 1350
    00000548: 	addq	$0x138, %rsp
    0000054f: 	popq	%rbx
    00000550: 	popq	%rbp
    00000551: 	popq	%r12
    00000553: 	popq	%r13
    00000555: 	popq	%r14
    00000557: 	popq	%r15
    00000559: 	retq # Offset: 1369
    0000055a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6388:
    00000560: 	movq	%rbp, %rdx
    00000563: 	movl	$0x8, %esi
    00000568: 	movq	%r12, %rdi
    0000056b: 	movsd	%xmm1, 0x18(%rsp)
    00000571: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1393
    00000576: 	movq	0x110(%rsp), %rcx
    0000057e: 	xorl	%edx, %edx
    00000580: 	movsd	0x18(%rsp), %xmm1
    00000586: 	divq	%rcx
    00000589: 	shlq	$0x3, %rdx
    0000058d: 	jmp	.Ltmp6400 # Offset: 1421
.Ltmp6392:
    00000592: 	movl	current_test(%rip), %edx
    00000598: 	movq	%r14, %rsi
    0000059b: 	movl	$0x1, %edi
    000005a0: 	xorl	%eax, %eax
    000005a2: 	callq	__printf_chk@PLT # Offset: 1442
    000005a7: 	jmp	.Ltmp6401 # Offset: 1447
.Ltmp6394:
    000005ac: 	movq	-0x8(%rdx), %rax
    000005b0: 	addq	$0x200, %rax
    000005b6: 	jmp	.Ltmp6402 # Offset: 1462
.Ltmp6399:
    000005bb: 	callq	__stack_chk_fail@PLT # Offset: 1467
    000005c0: 	endbr64
    000005c4: 	movq	%rax, %rbp
    000005c7: 	jmp	.Ltmp6403 # Offset: 1479
.Ltmp6387:
    000005c9: 	movsd	0x8, %xmm0
    000005d2: 	ud2
.Ltmp6403:
    000005d4: 	movq	0x38(%rsp), %rdi
    000005d9: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED2Ev # Offset: 1497
    000005de: 	movq	%rbp, %rdi
    000005e1: 	callq	_Unwind_Resume@PLT # Offset: 1505
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_find_simplehashmapId13PooledHashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15testFind_commonIdEvPT_S1_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_" after disassembly {
  Number      : 336
  State       : disassembled
  Address     : 0x43240
  Size        : 0xefe
  MaxSize     : 0xf00
  Offset      : 0x43240
  Section     : .text
  Orc Section : .local.text._Z15testFind_commonIdEvPT_S1_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0335:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x52989(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	pushq	%r13
    00000014: 	pushq	%r12
    00000016: 	pushq	%rbp
    00000017: 	movq	%rcx, %rbp
    0000001a: 	pushq	%rbx
    0000001b: 	movq	%r9, %rbx
    0000001e: 	subq	$0x108, %rsp
    00000025: 	movq	%rdi, (%rsp)
    00000029: 	leaq	0x90(%rsp), %r14
    00000031: 	leaq	0xb0(%rsp), %r13
    00000039: 	movq	%rsi, 0x8(%rsp)
    0000003e: 	movq	%r14, %rdi
    00000041: 	movq	%rcx, %rsi
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0xf8(%rsp)
    00000055: 	xorl	%eax, %eax
    00000057: 	movl	%r8d, iterations(%rip)
    0000005e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 94
    00000063: 	movq	0x8(%rbx), %rcx
    00000067: 	movq	(%rbx), %rdx
    0000006a: 	movq	%r14, %rsi
    0000006d: 	movq	%r13, %rdi
    00000070: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 112
    00000075: 	leaq	0xd0(%rsp), %r12
    0000007d: 	leaq	DATAat0x52994(%rip), %rdx
    00000084: 	movq	%r13, %rsi
    00000087: 	movq	%r12, %rdi
    0000008a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 138
    0000008f: 	movq	0x8(%rsp), %rdx
    00000094: 	movq	(%rsp), %rdi
    00000098: 	shlq	$0x3, %r15
    0000009c: 	movq	%r12, %r8
    0000009f: 	leaq	(%rdx,%r15), %rcx
    000000a3: 	addq	%rdi, %r15
    000000a6: 	movq	%r15, %rsi
    000000a9: 	movq	%rcx, 0x28(%rsp)
    000000ae: 	movq	%r15, 0x30(%rsp)
    000000b3: 	callq	_Z14test_find_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 179
    000000b8: 	movq	0xd0(%rsp), %rdi
    000000c0: 	leaq	0xe0(%rsp), %rax
    000000c8: 	movq	%rax, 0x20(%rsp)
    000000cd: 	cmpq	%rax, %rdi
    000000d0: 	je	.Ltmp6404 # Offset: 208
    000000d2: 	movq	0xe0(%rsp), %rax
    000000da: 	leaq	0x1(%rax), %rsi
    000000de: 	callq	_ZdlPvm@PLT # Offset: 222
.Ltmp6404:
    000000e3: 	movq	0xb0(%rsp), %rdi
    000000eb: 	leaq	0xc0(%rsp), %rax
    000000f3: 	movq	%rax, 0x18(%rsp)
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp6405 # Offset: 251
    000000fd: 	movq	0xc0(%rsp), %rax
    00000105: 	leaq	0x1(%rax), %rsi
    00000109: 	callq	_ZdlPvm@PLT # Offset: 265
.Ltmp6405:
    0000010e: 	movq	0x90(%rsp), %rdi
    00000116: 	leaq	0xa0(%rsp), %rax
    0000011e: 	movq	%rax, 0x10(%rsp)
    00000123: 	cmpq	%rax, %rdi
    00000126: 	je	.Ltmp6406 # Offset: 294
    00000128: 	movq	0xa0(%rsp), %rax
    00000130: 	leaq	0x1(%rax), %rsi
    00000134: 	callq	_ZdlPvm@PLT # Offset: 308
.Ltmp6406:
    00000139: 	leaq	DATAat0x5299a(%rip), %rdx
    00000140: 	movq	%rbp, %rsi
    00000143: 	movq	%r14, %rdi
    00000146: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 326
    0000014b: 	movq	0x8(%rbx), %rcx
    0000014f: 	movq	(%rbx), %rdx
    00000152: 	movq	%r14, %rsi
    00000155: 	movq	%r13, %rdi
    00000158: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 344
    0000015d: 	leaq	DATAat0x52994(%rip), %rdx
    00000164: 	movq	%r13, %rsi
    00000167: 	movq	%r12, %rdi
    0000016a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 362
    0000016f: 	movq	0x28(%rsp), %rcx
    00000174: 	movq	0x8(%rsp), %rdx
    00000179: 	movq	%r12, %r8
    0000017c: 	movq	0x30(%rsp), %rsi
    00000181: 	movq	(%rsp), %rdi
    00000185: 	callq	_Z14test_find_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 389
    0000018a: 	movq	0xd0(%rsp), %rdi
    00000192: 	cmpq	0x20(%rsp), %rdi
    00000197: 	je	.Ltmp6407 # Offset: 407
    00000199: 	movq	0xe0(%rsp), %rax
    000001a1: 	leaq	0x1(%rax), %rsi
    000001a5: 	callq	_ZdlPvm@PLT # Offset: 421
.Ltmp6407:
    000001aa: 	movq	0xb0(%rsp), %rdi
    000001b2: 	cmpq	0x18(%rsp), %rdi
    000001b7: 	je	.Ltmp6408 # Offset: 439
    000001b9: 	movq	0xc0(%rsp), %rax
    000001c1: 	leaq	0x1(%rax), %rsi
    000001c5: 	callq	_ZdlPvm@PLT # Offset: 453
.Ltmp6408:
    000001ca: 	movq	0x90(%rsp), %rdi
    000001d2: 	cmpq	0x10(%rsp), %rdi
    000001d7: 	je	.Ltmp6409 # Offset: 471
    000001d9: 	movq	0xa0(%rsp), %rax
    000001e1: 	leaq	0x1(%rax), %rsi
    000001e5: 	callq	_ZdlPvm@PLT # Offset: 485
.Ltmp6409:
    000001ea: 	leaq	0x50(%rsp), %r15
    000001ef: 	leaq	DATAat0x52564(%rip), %rdx
    000001f6: 	movq	%rbp, %rsi
    000001f9: 	movq	%r15, %rdi
    000001fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 508
    00000201: 	movq	0x8(%rbp), %rcx
    00000205: 	movq	(%rbp), %rdx
    00000209: 	movq	%r15, %rsi
    0000020c: 	leaq	0x70(%rsp), %rax
    00000211: 	movq	%rax, %rdi
    00000214: 	movq	%rax, 0x38(%rsp)
    00000219: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 537
    0000021e: 	movq	0x38(%rsp), %rsi
    00000223: 	leaq	DATAat0x529aa(%rip), %rdx
    0000022a: 	movq	%r14, %rdi
    0000022d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 557
    00000232: 	movq	0x8(%rbx), %rcx
    00000236: 	movq	(%rbx), %rdx
    00000239: 	movq	%r14, %rsi
    0000023c: 	movq	%r13, %rdi
    0000023f: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 575
    00000244: 	leaq	DATAat0x52994(%rip), %rdx
    0000024b: 	movq	%r13, %rsi
    0000024e: 	movq	%r12, %rdi
    00000251: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 593
    00000256: 	movq	0x28(%rsp), %rcx
    0000025b: 	movq	0x8(%rsp), %rdx
    00000260: 	movq	%r12, %r8
    00000263: 	movq	0x30(%rsp), %rsi
    00000268: 	movq	(%rsp), %rdi
    0000026c: 	callq	_Z13test_find_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 620
    00000271: 	movq	0xd0(%rsp), %rdi
    00000279: 	cmpq	0x20(%rsp), %rdi
    0000027e: 	je	.Ltmp6410 # Offset: 638
    00000280: 	movq	0xe0(%rsp), %rax
    00000288: 	leaq	0x1(%rax), %rsi
    0000028c: 	callq	_ZdlPvm@PLT # Offset: 652
.Ltmp6410:
    00000291: 	movq	0xb0(%rsp), %rdi
    00000299: 	cmpq	0x18(%rsp), %rdi
    0000029e: 	je	.Ltmp6411 # Offset: 670
    000002a0: 	movq	0xc0(%rsp), %rax
    000002a8: 	leaq	0x1(%rax), %rsi
    000002ac: 	callq	_ZdlPvm@PLT # Offset: 684
.Ltmp6411:
    000002b1: 	movq	0x90(%rsp), %rdi
    000002b9: 	cmpq	0x10(%rsp), %rdi
    000002be: 	je	.Ltmp6412 # Offset: 702
    000002c0: 	movq	0xa0(%rsp), %rax
    000002c8: 	leaq	0x1(%rax), %rsi
    000002cc: 	callq	_ZdlPvm@PLT # Offset: 716
.Ltmp6412:
    000002d1: 	movq	0x70(%rsp), %rdi
    000002d6: 	leaq	0x80(%rsp), %rax
    000002de: 	movq	%rax, 0x48(%rsp)
    000002e3: 	cmpq	%rax, %rdi
    000002e6: 	je	.Ltmp6413 # Offset: 742
    000002e8: 	movq	0x80(%rsp), %rax
    000002f0: 	leaq	0x1(%rax), %rsi
    000002f4: 	callq	_ZdlPvm@PLT # Offset: 756
.Ltmp6413:
    000002f9: 	movq	0x50(%rsp), %rdi
    000002fe: 	leaq	0x60(%rsp), %rax
    00000303: 	movq	%rax, 0x40(%rsp)
    00000308: 	cmpq	%rax, %rdi
    0000030b: 	je	.Ltmp6414 # Offset: 779
    0000030d: 	movq	0x60(%rsp), %rax
    00000312: 	leaq	0x1(%rax), %rsi
    00000316: 	callq	_ZdlPvm@PLT # Offset: 790
.Ltmp6414:
    0000031b: 	leaq	DATAat0x52564(%rip), %rdx
    00000322: 	movq	%rbp, %rsi
    00000325: 	movq	%r15, %rdi
    00000328: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 808
    0000032d: 	movq	0x8(%rbp), %rcx
    00000331: 	movq	(%rbp), %rdx
    00000335: 	movq	%r15, %rsi
    00000338: 	movq	0x38(%rsp), %rdi
    0000033d: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 829
    00000342: 	movq	0x38(%rsp), %rsi
    00000347: 	leaq	DATAat0x529b5(%rip), %rdx
    0000034e: 	movq	%r14, %rdi
    00000351: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 849
    00000356: 	movq	0x8(%rbx), %rcx
    0000035a: 	movq	(%rbx), %rdx
    0000035d: 	movq	%r14, %rsi
    00000360: 	movq	%r13, %rdi
    00000363: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 867
    00000368: 	leaq	DATAat0x52994(%rip), %rdx
    0000036f: 	movq	%r13, %rsi
    00000372: 	movq	%r12, %rdi
    00000375: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 885
    0000037a: 	movq	0x28(%rsp), %rcx
    0000037f: 	movq	0x8(%rsp), %rdx
    00000384: 	movq	%r12, %r8
    00000387: 	movq	0x30(%rsp), %rsi
    0000038c: 	movq	(%rsp), %rdi
    00000390: 	callq	_Z18test_find_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 912
    00000395: 	movq	0xd0(%rsp), %rdi
    0000039d: 	cmpq	0x20(%rsp), %rdi
    000003a2: 	je	.Ltmp6415 # Offset: 930
    000003a4: 	movq	0xe0(%rsp), %rax
    000003ac: 	leaq	0x1(%rax), %rsi
    000003b0: 	callq	_ZdlPvm@PLT # Offset: 944
.Ltmp6415:
    000003b5: 	movq	0xb0(%rsp), %rdi
    000003bd: 	cmpq	0x18(%rsp), %rdi
    000003c2: 	je	.Ltmp6416 # Offset: 962
    000003c4: 	movq	0xc0(%rsp), %rax
    000003cc: 	leaq	0x1(%rax), %rsi
    000003d0: 	callq	_ZdlPvm@PLT # Offset: 976
.Ltmp6416:
    000003d5: 	movq	0x90(%rsp), %rdi
    000003dd: 	cmpq	0x10(%rsp), %rdi
    000003e2: 	je	.Ltmp6417 # Offset: 994
    000003e4: 	movq	0xa0(%rsp), %rax
    000003ec: 	leaq	0x1(%rax), %rsi
    000003f0: 	callq	_ZdlPvm@PLT # Offset: 1008
.Ltmp6417:
    000003f5: 	movq	0x70(%rsp), %rdi
    000003fa: 	cmpq	0x48(%rsp), %rdi
    000003ff: 	je	.Ltmp6418 # Offset: 1023
    00000401: 	movq	0x80(%rsp), %rax
    00000409: 	leaq	0x1(%rax), %rsi
    0000040d: 	callq	_ZdlPvm@PLT # Offset: 1037
.Ltmp6418:
    00000412: 	movq	0x50(%rsp), %rdi
    00000417: 	cmpq	0x40(%rsp), %rdi
    0000041c: 	je	.Ltmp6419 # Offset: 1052
    0000041e: 	movq	0x60(%rsp), %rax
    00000423: 	leaq	0x1(%rax), %rsi
    00000427: 	callq	_ZdlPvm@PLT # Offset: 1063
.Ltmp6419:
    0000042c: 	leaq	DATAat0x529c5(%rip), %rdx
    00000433: 	movq	%rbp, %rsi
    00000436: 	movq	%r14, %rdi
    00000439: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1081
    0000043e: 	movq	0x8(%rbx), %rcx
    00000442: 	movq	(%rbx), %rdx
    00000445: 	movq	%r14, %rsi
    00000448: 	movq	%r13, %rdi
    0000044b: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1099
    00000450: 	leaq	DATAat0x52994(%rip), %rdx
    00000457: 	movq	%r13, %rsi
    0000045a: 	movq	%r12, %rdi
    0000045d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1117
    00000462: 	movq	0x28(%rsp), %rcx
    00000467: 	movq	0x8(%rsp), %rdx
    0000046c: 	movq	%r12, %r8
    0000046f: 	movq	0x30(%rsp), %rsi
    00000474: 	movq	(%rsp), %rdi
    00000478: 	callq	_Z14test_find_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1144
    0000047d: 	movq	0xd0(%rsp), %rdi
    00000485: 	cmpq	0x20(%rsp), %rdi
    0000048a: 	je	.Ltmp6420 # Offset: 1162
    0000048c: 	movq	0xe0(%rsp), %rax
    00000494: 	leaq	0x1(%rax), %rsi
    00000498: 	callq	_ZdlPvm@PLT # Offset: 1176
.Ltmp6420:
    0000049d: 	movq	0xb0(%rsp), %rdi
    000004a5: 	cmpq	0x18(%rsp), %rdi
    000004aa: 	je	.Ltmp6421 # Offset: 1194
    000004ac: 	movq	0xc0(%rsp), %rax
    000004b4: 	leaq	0x1(%rax), %rsi
    000004b8: 	callq	_ZdlPvm@PLT # Offset: 1208
.Ltmp6421:
    000004bd: 	movq	0x90(%rsp), %rdi
    000004c5: 	cmpq	0x10(%rsp), %rdi
    000004ca: 	je	.Ltmp6422 # Offset: 1226
    000004cc: 	movq	0xa0(%rsp), %rax
    000004d4: 	leaq	0x1(%rax), %rsi
    000004d8: 	callq	_ZdlPvm@PLT # Offset: 1240
.Ltmp6422:
    000004dd: 	leaq	DATAat0x529da(%rip), %rdx
    000004e4: 	movq	%rbp, %rsi
    000004e7: 	movq	%r14, %rdi
    000004ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1258
    000004ef: 	movq	0x8(%rbx), %rcx
    000004f3: 	movq	(%rbx), %rdx
    000004f6: 	movq	%r14, %rsi
    000004f9: 	movq	%r13, %rdi
    000004fc: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1276
    00000501: 	leaq	DATAat0x52994(%rip), %rdx
    00000508: 	movq	%r13, %rsi
    0000050b: 	movq	%r12, %rdi
    0000050e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1294
    00000513: 	movq	0x28(%rsp), %rcx
    00000518: 	movq	0x8(%rsp), %rdx
    0000051d: 	movq	%r12, %r8
    00000520: 	movq	0x30(%rsp), %rsi
    00000525: 	movq	(%rsp), %rdi
    00000529: 	callq	_Z14test_find_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1321
    0000052e: 	movq	0xd0(%rsp), %rdi
    00000536: 	cmpq	0x20(%rsp), %rdi
    0000053b: 	je	.Ltmp6423 # Offset: 1339
    0000053d: 	movq	0xe0(%rsp), %rax
    00000545: 	leaq	0x1(%rax), %rsi
    00000549: 	callq	_ZdlPvm@PLT # Offset: 1353
.Ltmp6423:
    0000054e: 	movq	0xb0(%rsp), %rdi
    00000556: 	cmpq	0x18(%rsp), %rdi
    0000055b: 	je	.Ltmp6424 # Offset: 1371
    0000055d: 	movq	0xc0(%rsp), %rax
    00000565: 	leaq	0x1(%rax), %rsi
    00000569: 	callq	_ZdlPvm@PLT # Offset: 1385
.Ltmp6424:
    0000056e: 	movq	0x90(%rsp), %rdi
    00000576: 	cmpq	0x10(%rsp), %rdi
    0000057b: 	je	.Ltmp6425 # Offset: 1403
    0000057d: 	movq	0xa0(%rsp), %rax
    00000585: 	leaq	0x1(%rax), %rsi
    00000589: 	callq	_ZdlPvm@PLT # Offset: 1417
.Ltmp6425:
    0000058e: 	leaq	DATAat0x52564(%rip), %rdx
    00000595: 	movq	%rbp, %rsi
    00000598: 	movq	%r15, %rdi
    0000059b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1435
    000005a0: 	movq	0x8(%rbp), %rcx
    000005a4: 	movq	(%rbp), %rdx
    000005a8: 	movq	%r15, %rsi
    000005ab: 	movq	0x38(%rsp), %rdi
    000005b0: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1456
    000005b5: 	movq	0x38(%rsp), %rsi
    000005ba: 	leaq	DATAat0x529f4(%rip), %rdx
    000005c1: 	movq	%r14, %rdi
    000005c4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1476
    000005c9: 	movq	0x8(%rbx), %rcx
    000005cd: 	movq	(%rbx), %rdx
    000005d0: 	movq	%r14, %rsi
    000005d3: 	movq	%r13, %rdi
    000005d6: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1494
    000005db: 	leaq	DATAat0x52994(%rip), %rdx
    000005e2: 	movq	%r13, %rsi
    000005e5: 	movq	%r12, %rdi
    000005e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1512
    000005ed: 	movq	0x28(%rsp), %rcx
    000005f2: 	movq	0x8(%rsp), %rdx
    000005f7: 	movq	%r12, %r8
    000005fa: 	movq	0x30(%rsp), %rsi
    000005ff: 	movq	(%rsp), %rdi
    00000603: 	callq	_Z13test_find_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1539
    00000608: 	movq	0xd0(%rsp), %rdi
    00000610: 	cmpq	0x20(%rsp), %rdi
    00000615: 	je	.Ltmp6426 # Offset: 1557
    00000617: 	movq	0xe0(%rsp), %rax
    0000061f: 	leaq	0x1(%rax), %rsi
    00000623: 	callq	_ZdlPvm@PLT # Offset: 1571
.Ltmp6426:
    00000628: 	movq	0xb0(%rsp), %rdi
    00000630: 	cmpq	0x18(%rsp), %rdi
    00000635: 	je	.Ltmp6427 # Offset: 1589
    00000637: 	movq	0xc0(%rsp), %rax
    0000063f: 	leaq	0x1(%rax), %rsi
    00000643: 	callq	_ZdlPvm@PLT # Offset: 1603
.Ltmp6427:
    00000648: 	movq	0x90(%rsp), %rdi
    00000650: 	cmpq	0x10(%rsp), %rdi
    00000655: 	je	.Ltmp6428 # Offset: 1621
    00000657: 	movq	0xa0(%rsp), %rax
    0000065f: 	leaq	0x1(%rax), %rsi
    00000663: 	callq	_ZdlPvm@PLT # Offset: 1635
.Ltmp6428:
    00000668: 	movq	0x70(%rsp), %rdi
    0000066d: 	cmpq	0x48(%rsp), %rdi
    00000672: 	je	.Ltmp6429 # Offset: 1650
    00000674: 	movq	0x80(%rsp), %rax
    0000067c: 	leaq	0x1(%rax), %rsi
    00000680: 	callq	_ZdlPvm@PLT # Offset: 1664
.Ltmp6429:
    00000685: 	movq	0x50(%rsp), %rdi
    0000068a: 	cmpq	0x40(%rsp), %rdi
    0000068f: 	je	.Ltmp6430 # Offset: 1679
    00000691: 	movq	0x60(%rsp), %rax
    00000696: 	leaq	0x1(%rax), %rsi
    0000069a: 	callq	_ZdlPvm@PLT # Offset: 1690
.Ltmp6430:
    0000069f: 	leaq	DATAat0x52564(%rip), %rdx
    000006a6: 	movq	%rbp, %rsi
    000006a9: 	movq	%r15, %rdi
    000006ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1708
    000006b1: 	movq	0x8(%rbp), %rcx
    000006b5: 	movq	(%rbp), %rdx
    000006b9: 	movq	%r15, %rsi
    000006bc: 	movq	0x38(%rsp), %rdi
    000006c1: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1729
    000006c6: 	movq	0x38(%rsp), %rsi
    000006cb: 	leaq	DATAat0x52a09(%rip), %rdx
    000006d2: 	movq	%r14, %rdi
    000006d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1749
    000006da: 	movq	0x8(%rbx), %rcx
    000006de: 	movq	(%rbx), %rdx
    000006e1: 	movq	%r14, %rsi
    000006e4: 	movq	%r13, %rdi
    000006e7: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1767
    000006ec: 	leaq	DATAat0x52994(%rip), %rdx
    000006f3: 	movq	%r13, %rsi
    000006f6: 	movq	%r12, %rdi
    000006f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1785
    000006fe: 	movq	0x28(%rsp), %rcx
    00000703: 	movq	0x8(%rsp), %rdx
    00000708: 	movq	%r12, %r8
    0000070b: 	movq	0x30(%rsp), %rsi
    00000710: 	movq	(%rsp), %rdi
    00000714: 	callq	_Z18test_find_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1812
    00000719: 	movq	0xd0(%rsp), %rdi
    00000721: 	cmpq	0x20(%rsp), %rdi
    00000726: 	je	.Ltmp6431 # Offset: 1830
    00000728: 	movq	0xe0(%rsp), %rax
    00000730: 	leaq	0x1(%rax), %rsi
    00000734: 	callq	_ZdlPvm@PLT # Offset: 1844
.Ltmp6431:
    00000739: 	movq	0xb0(%rsp), %rdi
    00000741: 	cmpq	0x18(%rsp), %rdi
    00000746: 	je	.Ltmp6432 # Offset: 1862
    00000748: 	movq	0xc0(%rsp), %rax
    00000750: 	leaq	0x1(%rax), %rsi
    00000754: 	callq	_ZdlPvm@PLT # Offset: 1876
.Ltmp6432:
    00000759: 	movq	0x90(%rsp), %rdi
    00000761: 	cmpq	0x10(%rsp), %rdi
    00000766: 	je	.Ltmp6433 # Offset: 1894
    00000768: 	movq	0xa0(%rsp), %rax
    00000770: 	leaq	0x1(%rax), %rsi
    00000774: 	callq	_ZdlPvm@PLT # Offset: 1908
.Ltmp6433:
    00000779: 	movq	0x70(%rsp), %rdi
    0000077e: 	cmpq	0x48(%rsp), %rdi
    00000783: 	je	.Ltmp6434 # Offset: 1923
    00000785: 	movq	0x80(%rsp), %rax
    0000078d: 	leaq	0x1(%rax), %rsi
    00000791: 	callq	_ZdlPvm@PLT # Offset: 1937
.Ltmp6434:
    00000796: 	movq	0x50(%rsp), %rdi
    0000079b: 	cmpq	0x40(%rsp), %rdi
    000007a0: 	je	.Ltmp6435 # Offset: 1952
    000007a2: 	movq	0x60(%rsp), %rax
    000007a7: 	leaq	0x1(%rax), %rsi
    000007ab: 	callq	_ZdlPvm@PLT # Offset: 1963
.Ltmp6435:
    000007b0: 	leaq	DATAat0x52564(%rip), %rdx
    000007b7: 	movq	%rbp, %rsi
    000007ba: 	movq	%r15, %rdi
    000007bd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1981
    000007c2: 	movq	0x8(%rbp), %rcx
    000007c6: 	movq	(%rbp), %rdx
    000007ca: 	movq	%r15, %rsi
    000007cd: 	movq	0x38(%rsp), %rdi
    000007d2: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2002
    000007d7: 	movq	0x38(%rsp), %rsi
    000007dc: 	leaq	DATAat0x52a23(%rip), %rdx
    000007e3: 	movq	%r14, %rdi
    000007e6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2022
    000007eb: 	movq	0x8(%rbx), %rcx
    000007ef: 	movq	(%rbx), %rdx
    000007f2: 	movq	%r14, %rsi
    000007f5: 	movq	%r13, %rdi
    000007f8: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2040
    000007fd: 	leaq	DATAat0x52994(%rip), %rdx
    00000804: 	movq	%r13, %rsi
    00000807: 	movq	%r12, %rdi
    0000080a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2058
    0000080f: 	movq	0x28(%rsp), %rcx
    00000814: 	movq	0x8(%rsp), %rdx
    00000819: 	movq	%r12, %r8
    0000081c: 	movq	0x30(%rsp), %rsi
    00000821: 	movq	(%rsp), %rdi
    00000825: 	callq	_Z23test_find_simplehashmapId7HashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2085
    0000082a: 	movq	0xd0(%rsp), %rdi
    00000832: 	cmpq	0x20(%rsp), %rdi
    00000837: 	je	.Ltmp6436 # Offset: 2103
    00000839: 	movq	0xe0(%rsp), %rax
    00000841: 	leaq	0x1(%rax), %rsi
    00000845: 	callq	_ZdlPvm@PLT # Offset: 2117
.Ltmp6436:
    0000084a: 	movq	0xb0(%rsp), %rdi
    00000852: 	cmpq	0x18(%rsp), %rdi
    00000857: 	je	.Ltmp6437 # Offset: 2135
    00000859: 	movq	0xc0(%rsp), %rax
    00000861: 	leaq	0x1(%rax), %rsi
    00000865: 	callq	_ZdlPvm@PLT # Offset: 2149
.Ltmp6437:
    0000086a: 	movq	0x90(%rsp), %rdi
    00000872: 	cmpq	0x10(%rsp), %rdi
    00000877: 	je	.Ltmp6438 # Offset: 2167
    00000879: 	movq	0xa0(%rsp), %rax
    00000881: 	leaq	0x1(%rax), %rsi
    00000885: 	callq	_ZdlPvm@PLT # Offset: 2181
.Ltmp6438:
    0000088a: 	movq	0x70(%rsp), %rdi
    0000088f: 	cmpq	0x48(%rsp), %rdi
    00000894: 	je	.Ltmp6439 # Offset: 2196
    00000896: 	movq	0x80(%rsp), %rax
    0000089e: 	leaq	0x1(%rax), %rsi
    000008a2: 	callq	_ZdlPvm@PLT # Offset: 2210
.Ltmp6439:
    000008a7: 	movq	0x50(%rsp), %rdi
    000008ac: 	cmpq	0x40(%rsp), %rdi
    000008b1: 	je	.Ltmp6440 # Offset: 2225
    000008b3: 	movq	0x60(%rsp), %rax
    000008b8: 	leaq	0x1(%rax), %rsi
    000008bc: 	callq	_ZdlPvm@PLT # Offset: 2236
.Ltmp6440:
    000008c1: 	movq	%r15, %rdi
    000008c4: 	leaq	DATAat0x52564(%rip), %rdx
    000008cb: 	movq	%rbp, %rsi
    000008ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2254
    000008d3: 	movq	%r15, %rsi
    000008d6: 	movq	0x8(%rbp), %rcx
    000008da: 	movq	(%rbp), %rdx
    000008de: 	movq	0x38(%rsp), %r15
    000008e3: 	movq	%r15, %rdi
    000008e6: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2278
    000008eb: 	leaq	DATAat0x52a2d(%rip), %rdx
    000008f2: 	movq	%r15, %rsi
    000008f5: 	movq	%r14, %rdi
    000008f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2296
    000008fd: 	movq	0x8(%rbx), %rcx
    00000901: 	movq	(%rbx), %rdx
    00000904: 	movq	%r14, %rsi
    00000907: 	movq	%r13, %rdi
    0000090a: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2314
    0000090f: 	leaq	DATAat0x52994(%rip), %rdx
    00000916: 	movq	%r13, %rsi
    00000919: 	movq	%r12, %rdi
    0000091c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2332
    00000921: 	movq	0x28(%rsp), %rcx
    00000926: 	movq	0x8(%rsp), %rdx
    0000092b: 	movq	%r12, %r8
    0000092e: 	movq	0x30(%rsp), %rsi
    00000933: 	movq	(%rsp), %rdi
    00000937: 	callq	_Z23test_find_simplehashmapId13PooledHashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2359
    0000093c: 	movq	0xd0(%rsp), %rdi
    00000944: 	cmpq	0x20(%rsp), %rdi
    00000949: 	je	.Ltmp6441 # Offset: 2377
    0000094b: 	movq	0xe0(%rsp), %rax
    00000953: 	leaq	0x1(%rax), %rsi
    00000957: 	callq	_ZdlPvm@PLT # Offset: 2391
.Ltmp6441:
    0000095c: 	movq	0xb0(%rsp), %rdi
    00000964: 	cmpq	0x18(%rsp), %rdi
    00000969: 	je	.Ltmp6442 # Offset: 2409
    0000096b: 	movq	0xc0(%rsp), %rax
    00000973: 	leaq	0x1(%rax), %rsi
    00000977: 	callq	_ZdlPvm@PLT # Offset: 2423
.Ltmp6442:
    0000097c: 	movq	0x90(%rsp), %rdi
    00000984: 	cmpq	0x10(%rsp), %rdi
    00000989: 	je	.Ltmp6443 # Offset: 2441
    0000098b: 	movq	0xa0(%rsp), %rax
    00000993: 	leaq	0x1(%rax), %rsi
    00000997: 	callq	_ZdlPvm@PLT # Offset: 2455
.Ltmp6443:
    0000099c: 	movq	0x70(%rsp), %rdi
    000009a1: 	cmpq	0x48(%rsp), %rdi
    000009a6: 	je	.Ltmp6444 # Offset: 2470
    000009a8: 	movq	0x80(%rsp), %rax
    000009b0: 	leaq	0x1(%rax), %rsi
    000009b4: 	callq	_ZdlPvm@PLT # Offset: 2484
.Ltmp6444:
    000009b9: 	movq	0x50(%rsp), %rdi
    000009be: 	cmpq	0x40(%rsp), %rdi
    000009c3: 	je	.Ltmp6445 # Offset: 2499
    000009c5: 	movq	0x60(%rsp), %rax
    000009ca: 	leaq	0x1(%rax), %rsi
    000009ce: 	callq	_ZdlPvm@PLT # Offset: 2510
.Ltmp6445:
    000009d3: 	leaq	DATAat0x52a3d(%rip), %rdx
    000009da: 	movq	%rbp, %rsi
    000009dd: 	movq	%r14, %rdi
    000009e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2528
    000009e5: 	movq	0x8(%rbx), %rcx
    000009e9: 	movq	(%rbx), %rdx
    000009ec: 	movq	%r14, %rsi
    000009ef: 	movq	%r13, %rdi
    000009f2: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2546
    000009f7: 	leaq	DATAat0x52994(%rip), %rdx
    000009fe: 	movq	%r13, %rsi
    00000a01: 	movq	%r12, %rdi
    00000a04: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2564
    00000a09: 	movq	0x28(%rsp), %rcx
    00000a0e: 	movq	0x8(%rsp), %rdx
    00000a13: 	movq	%r12, %r8
    00000a16: 	movq	0x30(%rsp), %rsi
    00000a1b: 	movq	(%rsp), %rdi
    00000a1f: 	callq	_Z25test_find_pushback_sortedIdSt6vectorIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2591
    00000a24: 	movq	0xd0(%rsp), %rdi
    00000a2c: 	cmpq	0x20(%rsp), %rdi
    00000a31: 	je	.Ltmp6446 # Offset: 2609
    00000a33: 	movq	0xe0(%rsp), %rax
    00000a3b: 	leaq	0x1(%rax), %rsi
    00000a3f: 	callq	_ZdlPvm@PLT # Offset: 2623
.Ltmp6446:
    00000a44: 	movq	0xb0(%rsp), %rdi
    00000a4c: 	cmpq	0x18(%rsp), %rdi
    00000a51: 	je	.Ltmp6447 # Offset: 2641
    00000a53: 	movq	0xc0(%rsp), %rax
    00000a5b: 	leaq	0x1(%rax), %rsi
    00000a5f: 	callq	_ZdlPvm@PLT # Offset: 2655
.Ltmp6447:
    00000a64: 	movq	0x90(%rsp), %rdi
    00000a6c: 	cmpq	0x10(%rsp), %rdi
    00000a71: 	je	.Ltmp6448 # Offset: 2673
    00000a73: 	movq	0xa0(%rsp), %rax
    00000a7b: 	leaq	0x1(%rax), %rsi
    00000a7f: 	callq	_ZdlPvm@PLT # Offset: 2687
.Ltmp6448:
    00000a84: 	leaq	DATAat0x52a52(%rip), %rdx
    00000a8b: 	movq	%rbp, %rsi
    00000a8e: 	movq	%r14, %rdi
    00000a91: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2705
    00000a96: 	movq	0x8(%rbx), %rcx
    00000a9a: 	movq	(%rbx), %rdx
    00000a9d: 	movq	%r14, %rsi
    00000aa0: 	movq	%r13, %rdi
    00000aa3: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2723
    00000aa8: 	leaq	DATAat0x52994(%rip), %rdx
    00000aaf: 	movq	%r13, %rsi
    00000ab2: 	movq	%r12, %rdi
    00000ab5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2741
    00000aba: 	movq	0x28(%rsp), %rcx
    00000abf: 	movq	0x8(%rsp), %rdx
    00000ac4: 	movq	%r12, %r8
    00000ac7: 	movq	0x30(%rsp), %rsi
    00000acc: 	movq	(%rsp), %rdi
    00000ad0: 	callq	_Z25test_find_pushback_sortedIdSt5dequeIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2768
    00000ad5: 	movq	0xd0(%rsp), %rdi
    00000add: 	cmpq	0x20(%rsp), %rdi
    00000ae2: 	je	.Ltmp6449 # Offset: 2786
    00000ae4: 	movq	0xe0(%rsp), %rax
    00000aec: 	leaq	0x1(%rax), %rsi
    00000af0: 	callq	_ZdlPvm@PLT # Offset: 2800
.Ltmp6449:
    00000af5: 	movq	0xb0(%rsp), %rdi
    00000afd: 	cmpq	0x18(%rsp), %rdi
    00000b02: 	je	.Ltmp6450 # Offset: 2818
    00000b04: 	movq	0xc0(%rsp), %rax
    00000b0c: 	leaq	0x1(%rax), %rsi
    00000b10: 	callq	_ZdlPvm@PLT # Offset: 2832
.Ltmp6450:
    00000b15: 	movq	0x90(%rsp), %rdi
    00000b1d: 	cmpq	0x10(%rsp), %rdi
    00000b22: 	je	.Ltmp6451 # Offset: 2850
    00000b24: 	movq	0xa0(%rsp), %rax
    00000b2c: 	leaq	0x1(%rax), %rsi
    00000b30: 	callq	_ZdlPvm@PLT # Offset: 2864
.Ltmp6451:
    00000b35: 	movq	0xf8(%rsp), %rax
    00000b3d: 	subq	%fs:0x28, %rax
    00000b46: 	jne	.Ltmp6452 # Offset: 2886
    00000b48: 	addq	$0x108, %rsp
    00000b4f: 	popq	%rbx
    00000b50: 	popq	%rbp
    00000b51: 	popq	%r12
    00000b53: 	popq	%r13
    00000b55: 	popq	%r14
    00000b57: 	popq	%r15
    00000b59: 	retq # Offset: 2905
.Ltmp6452:
    00000b5a: 	callq	__stack_chk_fail@PLT # Offset: 2906
    00000b5f: 	endbr64
.Ltmp6457:
    00000b63: 	movq	%rax, %rbp
    00000b66: 	jmp	.Ltmp6453 # Offset: 2918
    00000b68: 	endbr64
.Ltmp6458:
    00000b6c: 	movq	%rax, %rbp
    00000b6f: 	jmp	.Ltmp6454 # Offset: 2927
.Ltmp6453:
    00000b71: 	movq	0xd0(%rsp), %rdi
    00000b79: 	cmpq	0x20(%rsp), %rdi
    00000b7e: 	je	.Ltmp6454 # Offset: 2942
    00000b80: 	movq	0xe0(%rsp), %rax
    00000b88: 	leaq	0x1(%rax), %rsi
    00000b8c: 	callq	_ZdlPvm@PLT # Offset: 2956
.Ltmp6454:
    00000b91: 	movq	0xb0(%rsp), %rdi
    00000b99: 	cmpq	0x18(%rsp), %rdi
    00000b9e: 	je	.Ltmp6455 # Offset: 2974
    00000ba0: 	movq	0xc0(%rsp), %rax
    00000ba8: 	leaq	0x1(%rax), %rsi
    00000bac: 	callq	_ZdlPvm@PLT # Offset: 2988
.Ltmp6455:
    00000bb1: 	movq	0x90(%rsp), %rdi
    00000bb9: 	cmpq	0x10(%rsp), %rdi
    00000bbe: 	je	.Ltmp6456 # Offset: 3006
.Ltmp6479:
    00000bc0: 	movq	0xa0(%rsp), %rax
    00000bc8: 	leaq	0x1(%rax), %rsi
    00000bcc: 	callq	_ZdlPvm@PLT # Offset: 3020
.Ltmp6456:
    00000bd1: 	movq	%rbp, %rdi
    00000bd4: 	callq	_Unwind_Resume@PLT # Offset: 3028
    00000bd9: 	endbr64
.Ltmp6459:
    00000bdd: 	movq	%rax, %rbp
    00000be0: 	jmp	.Ltmp6455 # Offset: 3040
    00000be2: 	endbr64
    00000be6: 	jmp	.Ltmp6457 # Offset: 3046
    00000beb: 	endbr64
    00000bef: 	jmp	.Ltmp6458 # Offset: 3055
    00000bf4: 	endbr64
    00000bf8: 	jmp	.Ltmp6459 # Offset: 3064
    00000bfa: 	endbr64
.Ltmp6465:
    00000bfe: 	movq	%rax, %rbp
    00000c01: 	jmp	.Ltmp6460 # Offset: 3073
    00000c03: 	endbr64
.Ltmp6466:
    00000c07: 	movq	%rax, %rbp
    00000c0a: 	jmp	.Ltmp6461 # Offset: 3082
.Ltmp6460:
    00000c0c: 	movq	0xd0(%rsp), %rdi
    00000c14: 	cmpq	0x20(%rsp), %rdi
    00000c19: 	je	.Ltmp6461 # Offset: 3097
    00000c1b: 	movq	0xe0(%rsp), %rax
    00000c23: 	leaq	0x1(%rax), %rsi
    00000c27: 	callq	_ZdlPvm@PLT # Offset: 3111
.Ltmp6461:
    00000c2c: 	movq	0xb0(%rsp), %rdi
    00000c34: 	cmpq	0x18(%rsp), %rdi
    00000c39: 	je	.Ltmp6462 # Offset: 3129
    00000c3b: 	movq	0xc0(%rsp), %rax
    00000c43: 	leaq	0x1(%rax), %rsi
    00000c47: 	callq	_ZdlPvm@PLT # Offset: 3143
.Ltmp6462:
    00000c4c: 	movq	0x90(%rsp), %rdi
    00000c54: 	cmpq	0x10(%rsp), %rdi
    00000c59: 	je	.Ltmp6463 # Offset: 3161
    00000c5b: 	movq	0xa0(%rsp), %rax
    00000c63: 	leaq	0x1(%rax), %rsi
    00000c67: 	callq	_ZdlPvm@PLT # Offset: 3175
.Ltmp6463:
    00000c6c: 	movq	0x70(%rsp), %rdi
    00000c71: 	cmpq	0x48(%rsp), %rdi
    00000c76: 	je	.Ltmp6464 # Offset: 3190
    00000c78: 	movq	0x80(%rsp), %rax
    00000c80: 	leaq	0x1(%rax), %rsi
    00000c84: 	callq	_ZdlPvm@PLT # Offset: 3204
.Ltmp6464:
    00000c89: 	movq	0x50(%rsp), %rdi
    00000c8e: 	cmpq	0x40(%rsp), %rdi
    00000c93: 	je	.Ltmp6456 # Offset: 3219
.Ltmp6475:
    00000c99: 	movq	0x60(%rsp), %rax
    00000c9e: 	leaq	0x1(%rax), %rsi
    00000ca2: 	callq	_ZdlPvm@PLT # Offset: 3234
    00000ca7: 	jmp	.Ltmp6456 # Offset: 3239
    00000cac: 	endbr64
.Ltmp6467:
    00000cb0: 	movq	%rax, %rbp
    00000cb3: 	jmp	.Ltmp6462 # Offset: 3251
    00000cb5: 	endbr64
.Ltmp6468:
    00000cb9: 	movq	%rax, %rbp
    00000cbc: 	jmp	.Ltmp6463 # Offset: 3260
    00000cbe: 	endbr64
.Ltmp6469:
    00000cc2: 	movq	%rax, %rbp
    00000cc5: 	jmp	.Ltmp6464 # Offset: 3269
    00000cc7: 	endbr64
    00000ccb: 	jmp	.Ltmp6465 # Offset: 3275
    00000cd0: 	endbr64
    00000cd4: 	jmp	.Ltmp6466 # Offset: 3284
    00000cd9: 	endbr64
    00000cdd: 	jmp	.Ltmp6467 # Offset: 3293
    00000cdf: 	endbr64
    00000ce3: 	jmp	.Ltmp6468 # Offset: 3299
    00000ce5: 	endbr64
    00000ce9: 	jmp	.Ltmp6469 # Offset: 3305
    00000ceb: 	endbr64
    00000cef: 	jmp	.Ltmp6465 # Offset: 3311
    00000cf4: 	endbr64
    00000cf8: 	jmp	.Ltmp6466 # Offset: 3320
    00000cfd: 	endbr64
    00000d01: 	jmp	.Ltmp6467 # Offset: 3329
    00000d03: 	endbr64
    00000d07: 	jmp	.Ltmp6468 # Offset: 3335
    00000d09: 	endbr64
    00000d0d: 	jmp	.Ltmp6469 # Offset: 3341
    00000d0f: 	endbr64
    00000d13: 	jmp	.Ltmp6465 # Offset: 3347
    00000d18: 	endbr64
    00000d1c: 	jmp	.Ltmp6466 # Offset: 3356
    00000d21: 	endbr64
    00000d25: 	jmp	.Ltmp6467 # Offset: 3365
    00000d27: 	endbr64
    00000d2b: 	jmp	.Ltmp6468 # Offset: 3371
    00000d2d: 	endbr64
    00000d31: 	jmp	.Ltmp6469 # Offset: 3377
    00000d33: 	endbr64
    00000d37: 	jmp	.Ltmp6457 # Offset: 3383
    00000d3c: 	endbr64
    00000d40: 	jmp	.Ltmp6458 # Offset: 3392
    00000d45: 	endbr64
    00000d49: 	jmp	.Ltmp6459 # Offset: 3401
    00000d4e: 	endbr64
    00000d52: 	jmp	.Ltmp6457 # Offset: 3410
    00000d57: 	endbr64
    00000d5b: 	jmp	.Ltmp6458 # Offset: 3419
    00000d60: 	endbr64
    00000d64: 	jmp	.Ltmp6459 # Offset: 3428
    00000d69: 	endbr64
    00000d6d: 	jmp	.Ltmp6465 # Offset: 3437
    00000d72: 	endbr64
    00000d76: 	jmp	.Ltmp6466 # Offset: 3446
    00000d7b: 	endbr64
    00000d7f: 	jmp	.Ltmp6467 # Offset: 3455
    00000d84: 	endbr64
    00000d88: 	jmp	.Ltmp6468 # Offset: 3464
    00000d8d: 	endbr64
    00000d91: 	jmp	.Ltmp6469 # Offset: 3473
    00000d96: 	endbr64
    00000d9a: 	movq	%rax, %rbp
    00000d9d: 	jmp	.Ltmp6470 # Offset: 3485
    00000d9f: 	endbr64
    00000da3: 	movq	%rax, %rbp
    00000da6: 	jmp	.Ltmp6471 # Offset: 3494
    00000da8: 	endbr64
    00000dac: 	movq	%rax, %rbp
    00000daf: 	jmp	.Ltmp6472 # Offset: 3503
.Ltmp6470:
    00000db1: 	movq	0xd0(%rsp), %rdi
    00000db9: 	cmpq	0x20(%rsp), %rdi
    00000dbe: 	je	.Ltmp6471 # Offset: 3518
    00000dc0: 	movq	0xe0(%rsp), %rax
    00000dc8: 	leaq	0x1(%rax), %rsi
    00000dcc: 	callq	_ZdlPvm@PLT # Offset: 3532
.Ltmp6471:
    00000dd1: 	movq	0xb0(%rsp), %rdi
    00000dd9: 	cmpq	0x18(%rsp), %rdi
    00000dde: 	je	.Ltmp6472 # Offset: 3550
    00000de0: 	movq	0xc0(%rsp), %rax
    00000de8: 	leaq	0x1(%rax), %rsi
    00000dec: 	callq	_ZdlPvm@PLT # Offset: 3564
.Ltmp6472:
    00000df1: 	movq	0x90(%rsp), %rdi
    00000df9: 	cmpq	0x10(%rsp), %rdi
    00000dfe: 	je	.Ltmp6473 # Offset: 3582
    00000e00: 	movq	0xa0(%rsp), %rax
    00000e08: 	leaq	0x1(%rax), %rsi
    00000e0c: 	callq	_ZdlPvm@PLT # Offset: 3596
.Ltmp6473:
    00000e11: 	movq	0x70(%rsp), %rdi
    00000e16: 	leaq	0x80(%rsp), %rax
    00000e1e: 	cmpq	%rax, %rdi
    00000e21: 	je	.Ltmp6474 # Offset: 3617
    00000e23: 	movq	0x80(%rsp), %rax
    00000e2b: 	leaq	0x1(%rax), %rsi
    00000e2f: 	callq	_ZdlPvm@PLT # Offset: 3631
.Ltmp6474:
    00000e34: 	movq	0x50(%rsp), %rdi
    00000e39: 	leaq	0x60(%rsp), %rax
    00000e3e: 	cmpq	%rax, %rdi
    00000e41: 	jne	.Ltmp6475 # Offset: 3649
    00000e47: 	jmp	.Ltmp6456 # Offset: 3655
    00000e4c: 	endbr64
    00000e50: 	movq	%rax, %rbp
    00000e53: 	jmp	.Ltmp6473 # Offset: 3667
    00000e55: 	endbr64
    00000e59: 	movq	%rax, %rbp
    00000e5c: 	jmp	.Ltmp6474 # Offset: 3676
    00000e5e: 	endbr64
    00000e62: 	jmp	.Ltmp6457 # Offset: 3682
    00000e67: 	endbr64
    00000e6b: 	jmp	.Ltmp6458 # Offset: 3691
    00000e70: 	endbr64
    00000e74: 	jmp	.Ltmp6459 # Offset: 3700
    00000e79: 	endbr64
    00000e7d: 	movq	%rax, %rbp
    00000e80: 	jmp	.Ltmp6476 # Offset: 3712
    00000e82: 	endbr64
    00000e86: 	movq	%rax, %rbp
    00000e89: 	jmp	.Ltmp6477 # Offset: 3721
    00000e8b: 	endbr64
    00000e8f: 	movq	%rax, %rbp
    00000e92: 	jmp	.Ltmp6478 # Offset: 3730
.Ltmp6476:
    00000e94: 	movq	0xd0(%rsp), %rdi
    00000e9c: 	leaq	0xe0(%rsp), %rax
    00000ea4: 	cmpq	%rax, %rdi
    00000ea7: 	je	.Ltmp6477 # Offset: 3751
    00000ea9: 	movq	0xe0(%rsp), %rax
    00000eb1: 	leaq	0x1(%rax), %rsi
    00000eb5: 	callq	_ZdlPvm@PLT # Offset: 3765
.Ltmp6477:
    00000eba: 	movq	0xb0(%rsp), %rdi
    00000ec2: 	leaq	0xc0(%rsp), %rax
    00000eca: 	cmpq	%rax, %rdi
    00000ecd: 	je	.Ltmp6478 # Offset: 3789
    00000ecf: 	movq	0xc0(%rsp), %rax
    00000ed7: 	leaq	0x1(%rax), %rsi
    00000edb: 	callq	_ZdlPvm@PLT # Offset: 3803
.Ltmp6478:
    00000ee0: 	movq	0x90(%rsp), %rdi
    00000ee8: 	leaq	0xa0(%rsp), %rax
    00000ef0: 	cmpq	%rax, %rdi
    00000ef3: 	jne	.Ltmp6479 # Offset: 3827
    00000ef9: 	jmp	.Ltmp6456 # Offset: 3833
DWARF CFI Instructions:
    <empty>
End of Function "_Z15testFind_commonIdEvPT_S1_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_"

Binary Function "_Z24test_accum_simplehashmapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 337
  State       : disassembled
  Address     : 0x44140
  Size        : 0x60d
  MaxSize     : 0x610
  Offset      : 0x44140
  Section     : .text
  Orc Section : .local.text._Z24test_accum_simplehashmapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0336:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, %rbx
    00000014: 	subq	$0x168, %rsp
    0000001b: 	movq	%rsi, 0x18(%rsp)
    00000020: 	movq	%rdx, 0x28(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x158(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	leaq	0x90(%rsp), %rax
    00000040: 	movq	%rax, %rdi
    00000043: 	movq	%rax, 0x20(%rsp)
    00000048: 	callq	_ZN20HashMapPoolAllocatorIddEC2Ev # Offset: 72
    0000004d: 	pxor	%xmm0, %xmm0
    00000051: 	movq	$0x0, 0x140(%rsp)
    0000005d: 	movq	$0x0, 0x148(%rsp)
    00000069: 	movl	$0x3f800000, 0x150(%rsp)
    00000074: 	movaps	%xmm0, 0x130(%rsp)
    0000007c: 	cmpq	%rbx, %r12
    0000007f: 	je	.Ltmp6480 # Offset: 127
    00000085: 	xorl	%ebx, %ebx
    00000087: 	movq	$0x0, (%rsp)
    0000008f: 	movl	$0xc70f6907, %ebp
    00000094: 	testq	%rbx, %rbx
    00000097: 	je	.Ltmp6481 # Offset: 151
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp6487:
    000000a0: 	movsd	(%r12), %xmm0
    000000a6: 	pxor	%xmm5, %xmm5
    000000aa: 	ucomisd	%xmm5, %xmm0
    000000ae: 	movsd	%xmm0, 0x60(%rsp)
    000000b4: 	jp	.Ltmp6482 # Offset: 180
    000000ba: 	movl	$0x0, %eax
    000000bf: 	jne	.Ltmp6482 # Offset: 191
.Ltmp6498:
    000000c5: 	xorl	%edx, %edx
    000000c7: 	divq	0x140(%rsp)
    000000cf: 	movq	0x148(%rsp), %rax
    000000d7: 	movq	(%rax,%rdx,8), %rbx
    000000db: 	leaq	(,%rdx,8), %r13
    000000e3: 	testq	%rbx, %rbx
    000000e6: 	je	.Ltmp6483 # Offset: 230
    000000ec: 	movsd	(%r12), %xmm0
    000000f2: 	jmp	.Ltmp6484 # Offset: 242
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp6485:
    000000f8: 	movq	0x10(%rbx), %rbx
    000000fc: 	testq	%rbx, %rbx
    000000ff: 	je	.Ltmp6483 # Offset: 255
.Ltmp6484:
    00000105: 	ucomisd	(%rbx), %xmm0
    00000109: 	jp	.Ltmp6485 # Offset: 265
    0000010b: 	jne	.Ltmp6485 # Offset: 267
    0000010d: 	addq	$0x8, %rbx
.Ltmp6500:
    00000111: 	movsd	%xmm0, (%rbx)
    00000115: 	addsd	(%rsp), %xmm0
    0000011a: 	addq	$0x8, %r12
    0000011e: 	movsd	%xmm0, (%rsp)
    00000123: 	cmpq	%r12, 0x18(%rsp)
    00000128: 	je	.Ltmp6486 # Offset: 296
    0000012e: 	movq	0x138(%rsp), %rbx
    00000136: 	testq	%rbx, %rbx
    00000139: 	jne	.Ltmp6487 # Offset: 313
.Ltmp6481:
    0000013f: 	movss	DATAat0x537b0(%rip), %xmm2
    00000147: 	movss	DATAat0x537a4(%rip), %xmm0
    0000014f: 	divss	0x150(%rsp), %xmm0
    00000158: 	movaps	%xmm0, %xmm1
    0000015b: 	movss	DATAat0x5379c(%rip), %xmm3
    00000163: 	movq	0x140(%rsp), %rax
    0000016b: 	andps	%xmm2, %xmm1
    0000016e: 	ucomiss	%xmm1, %xmm3
    00000171: 	movq	%rax, 0x10(%rsp)
    00000176: 	jbe	.Ltmp6488 # Offset: 374
    00000178: 	cvttss2si	%xmm0, %eax
    0000017c: 	pxor	%xmm1, %xmm1
    00000180: 	movaps	%xmm0, %xmm3
    00000183: 	movss	DATAat0x53798(%rip), %xmm6
    0000018b: 	andnps	%xmm0, %xmm2
    0000018e: 	cvtsi2ss	%eax, %xmm1
    00000192: 	cmpnless	%xmm1, %xmm3
    00000197: 	andps	%xmm6, %xmm3
    0000019a: 	addss	%xmm3, %xmm1
    0000019e: 	orps	%xmm2, %xmm1
    000001a1: 	movaps	%xmm1, %xmm0
.Ltmp6488:
    000001a4: 	comiss	DATAat0x537a0(%rip), %xmm0
    000001ab: 	jae	.Ltmp6489 # Offset: 427
    000001b1: 	cvttss2si	%xmm0, %rax
.Ltmp6501:
    000001b6: 	movl	$0x8, %edx
    000001bb: 	movq	0x10(%rsp), %r14
    000001c0: 	movq	$0x8, 0x140(%rsp)
    000001cc: 	cmpq	%rdx, %rax
    000001cf: 	cmovbq	%rdx, %rax
    000001d3: 	movq	%rax, %rdx
    000001d6: 	shrq	%rdx
    000001d9: 	addq	%rdx, %rax
    000001dc: 	movq	%rax, 0x138(%rsp)
    000001e4: 	cmpq	$0x8, %r14
    000001e8: 	je	.Ltmp6487 # Offset: 488
    000001ee: 	movl	$0x40, %edi
    000001f3: 	callq	_Znam@PLT # Offset: 499
    000001f8: 	pxor	%xmm0, %xmm0
    000001fc: 	movq	%rax, %r15
    000001ff: 	movups	%xmm0, (%rax)
    00000202: 	movups	%xmm0, 0x10(%rax)
    00000206: 	movups	%xmm0, 0x20(%rax)
    0000020a: 	movups	%xmm0, 0x30(%rax)
    0000020e: 	movq	0x148(%rsp), %rax
    00000216: 	movq	%rax, 0x8(%rsp)
    0000021b: 	testq	%r14, %r14
    0000021e: 	je	.Ltmp6490 # Offset: 542
    00000224: 	nopl	(%rax) # Size: 4
.Ltmp6496:
    00000228: 	movq	0x8(%rsp), %rax
    0000022d: 	movq	(%rax,%rbx,8), %r13
    00000231: 	testq	%r13, %r13
    00000234: 	jne	.Ltmp6491 # Offset: 564
    00000236: 	jmp	.Ltmp6492 # Offset: 566
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp6494:
    00000240: 	movq	(%r15), %rax
    00000243: 	movq	%rax, 0x10(%r13)
    00000247: 	movq	%r13, (%r15)
    0000024a: 	testq	%r14, %r14
    0000024d: 	je	.Ltmp6492 # Offset: 589
.Ltmp6495:
    0000024f: 	movq	%r14, %r13
.Ltmp6491:
    00000252: 	movsd	(%r13), %xmm0
    00000258: 	pxor	%xmm4, %xmm4
    0000025c: 	movq	0x10(%r13), %r14
    00000260: 	ucomisd	%xmm4, %xmm0
    00000264: 	movsd	%xmm0, 0x60(%rsp)
    0000026a: 	jp	.Ltmp6493 # Offset: 618
    0000026c: 	je	.Ltmp6494 # Offset: 620
.Ltmp6493:
    0000026e: 	movq	%rbp, %rdx
    00000271: 	leaq	0x60(%rsp), %rdi
    00000276: 	movl	$0x8, %esi
    0000027b: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 635
    00000280: 	xorl	%edx, %edx
    00000282: 	divq	0x140(%rsp)
    0000028a: 	leaq	(%r15,%rdx,8), %rax
    0000028e: 	movq	(%rax), %rdx
    00000291: 	movq	%rdx, 0x10(%r13)
    00000295: 	movq	%r13, (%rax)
    00000298: 	testq	%r14, %r14
    0000029b: 	jne	.Ltmp6495 # Offset: 667
.Ltmp6492:
    0000029d: 	addq	$0x1, %rbx
    000002a1: 	cmpq	%rbx, 0x10(%rsp)
    000002a6: 	jne	.Ltmp6496 # Offset: 678
    000002a8: 	movq	0x148(%rsp), %rax
    000002b0: 	movq	%rax, 0x8(%rsp)
.Ltmp6490:
    000002b5: 	movq	0x8(%rsp), %rax
    000002ba: 	testq	%rax, %rax
    000002bd: 	je	.Ltmp6497 # Offset: 701
    000002bf: 	movq	%rax, %rdi
    000002c2: 	callq	_ZdaPv@PLT # Offset: 706
.Ltmp6497:
    000002c7: 	movq	%r15, 0x148(%rsp)
    000002cf: 	jmp	.Ltmp6487 # Offset: 719
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp6482:
    000002d8: 	leaq	0x60(%rsp), %rdi
    000002dd: 	movq	%rbp, %rdx
    000002e0: 	movl	$0x8, %esi
    000002e5: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 741
    000002ea: 	jmp	.Ltmp6498 # Offset: 746
    000002ef: 	nop # Size: 1
.Ltmp6483:
    000002f0: 	movq	0x20(%rsp), %rdi
    000002f5: 	callq	_ZN20HashMapPoolAllocatorIddE13allocate_nodeEv # Offset: 757
    000002fa: 	movsd	(%r12), %xmm0
    00000300: 	addq	0x148(%rsp), %r13
    00000308: 	movq	%rax, %rbx
    0000030b: 	movq	$0x0, 0x8(%rax)
    00000313: 	movsd	%xmm0, (%rax)
    00000317: 	movq	(%r13), %rax
    0000031b: 	movq	%rax, 0x10(%rbx)
    0000031f: 	movq	0x130(%rsp), %rax
    00000327: 	movq	%rbx, (%r13)
    0000032b: 	addq	$0x1, %rax
    0000032f: 	movq	%rax, 0x130(%rsp)
    00000337: 	cmpq	0x138(%rsp), %rax
    0000033f: 	ja	.Ltmp6499 # Offset: 831
.Ltmp6517:
    00000345: 	movsd	(%r12), %xmm0
    0000034b: 	addq	$0x8, %rbx
    0000034f: 	jmp	.Ltmp6500 # Offset: 847
.Ltmp6489:
    00000354: 	subss	DATAat0x537a0(%rip), %xmm0
    0000035c: 	cvttss2si	%xmm0, %rax
    00000361: 	btcq	$0x3f, %rax
    00000366: 	jmp	.Ltmp6501 # Offset: 870
.Ltmp6480:
    0000036b: 	pxor	%xmm7, %xmm7
    0000036f: 	movsd	%xmm7, (%rsp)
.Ltmp6486:
    00000374: 	callq	clock@PLT # Offset: 884
    00000379: 	movl	iterations(%rip), %r9d
    00000380: 	xorl	%ebx, %ebx
    00000382: 	movq	%rax, start_time(%rip)
    00000389: 	testl	%r9d, %r9d
    0000038c: 	jle	.Ltmp6502 # Offset: 908
    00000392: 	xorl	%ebp, %ebp
    00000394: 	leaq	DATAat0x52360(%rip), %r12
    0000039b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6506:
    000003a0: 	movq	0x148(%rsp), %rcx
    000003a8: 	movq	0x140(%rsp), %rdx
    000003b0: 	pxor	%xmm2, %xmm2
    000003b4: 	movaps	%xmm2, 0x50(%rsp)
    000003b9: 	movq	(%rcx), %rax
    000003bc: 	movq	%rcx, %xmm7
    000003c1: 	movq	%rdx, 0x48(%rsp)
    000003c6: 	movq	%rax, %xmm0
    000003cb: 	punpcklqdq	%xmm7, %xmm0
    000003cf: 	movaps	%xmm0, 0x30(%rsp)
    000003d4: 	testq	%rdx, %rdx
    000003d7: 	je	.Ltmp6503 # Offset: 983
    000003d9: 	testq	%rax, %rax
    000003dc: 	je	.Ltmp6504 # Offset: 988
.Ltmp6503:
    000003e2: 	xorl	%edx, %edx
.Ltmp6513:
    000003e4: 	pxor	%xmm3, %xmm3
    000003e8: 	pxor	%xmm1, %xmm1
    000003ec: 	movq	%rbp, 0x60(%rsp)
    000003f1: 	movq	%rcx, 0x68(%rsp)
    000003f6: 	movq	%rdx, 0x40(%rsp)
    000003fb: 	movaps	%xmm3, 0x70(%rsp)
    00000400: 	movaps	%xmm1, 0x80(%rsp)
    00000408: 	pushq	$0x0
    0000040a: 	pushq	$0x0
    0000040c: 	pushq	$0x0
    0000040e: 	pushq	$0x0
    00000410: 	pushq	0x88(%rsp)
    00000417: 	pushq	0x88(%rsp)
    0000041e: 	pushq	0x88(%rsp)
    00000425: 	pushq	0x88(%rsp)
    0000042c: 	pushq	0x88(%rsp)
    00000433: 	pushq	0x88(%rsp)
    0000043a: 	pushq	0x88(%rsp)
    00000441: 	pushq	0x88(%rsp)
    00000448: 	callq	"_Z17myaccumulate_pairI27ConstHashMapForwardIteratorIddEdET0_T_S3_S2_.constprop.0/1" # Offset: 1096
    0000044d: 	movsd	0x60(%rsp), %xmm5
    00000453: 	addq	$0x60, %rsp
    00000457: 	ucomisd	%xmm0, %xmm5
    0000045b: 	jp	.Ltmp6505 # Offset: 1115
    00000461: 	jne	.Ltmp6505 # Offset: 1121
.Ltmp6516:
    00000467: 	addl	$0x1, %ebx
    0000046a: 	cmpl	%r9d, %ebx
    0000046d: 	jl	.Ltmp6506 # Offset: 1133
.Ltmp6502:
    00000473: 	movq	0x28(%rsp), %rdi
    00000478: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1144
    0000047d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000484: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000048b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000492: 	je	.Ltmp6507 # Offset: 1170
.Ltmp6518:
    00000498: 	movq	-0x20(%rax), %rbp
    0000049c: 	callq	clock@PLT # Offset: 1180
    000004a1: 	pxor	%xmm0, %xmm0
    000004a5: 	movq	%rax, end_time(%rip)
    000004ac: 	movq	%rbp, %rdi
    000004af: 	subq	start_time(%rip), %rax
    000004b6: 	cvtsi2sd	%rax, %xmm0
    000004bb: 	divsd	DATAat0x53788(%rip), %xmm0
    000004c3: 	callq	_Z13record_resultdPKc # Offset: 1219
    000004c8: 	movq	0x148(%rsp), %rdi
    000004d0: 	testq	%rdi, %rdi
    000004d3: 	je	.Ltmp6508 # Offset: 1235
    000004d5: 	callq	_ZdaPv@PLT # Offset: 1237
.Ltmp6508:
    000004da: 	movq	0xe0(%rsp), %rdi
    000004e2: 	testq	%rdi, %rdi
    000004e5: 	je	.Ltmp6509 # Offset: 1253
    000004e7: 	movq	0x128(%rsp), %rax
    000004ef: 	movq	0x108(%rsp), %rbx
    000004f7: 	leaq	0x8(%rax), %rbp
    000004fb: 	cmpq	%rbx, %rbp
    000004fe: 	jbe	.Ltmp6510 # Offset: 1278
.Ltmp6511:
    00000500: 	movq	(%rbx), %rdi
    00000503: 	movl	$0x200, %esi
    00000508: 	addq	$0x8, %rbx
    0000050c: 	callq	_ZdlPvm@PLT # Offset: 1292
    00000511: 	cmpq	%rbx, %rbp
    00000514: 	ja	.Ltmp6511 # Offset: 1300
    00000516: 	movq	0xe0(%rsp), %rdi
.Ltmp6510:
    0000051e: 	movq	0xe8(%rsp), %rax
    00000526: 	leaq	(,%rax,8), %rsi
    0000052e: 	callq	_ZdlPvm@PLT # Offset: 1326
.Ltmp6509:
    00000533: 	movq	0x20(%rsp), %rdi
    00000538: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 1336
    0000053d: 	movq	0x158(%rsp), %rax
    00000545: 	subq	%fs:0x28, %rax
    0000054e: 	jne	.Ltmp6512 # Offset: 1358
    00000554: 	addq	$0x168, %rsp
    0000055b: 	popq	%rbx
    0000055c: 	popq	%rbp
    0000055d: 	popq	%r12
    0000055f: 	popq	%r13
    00000561: 	popq	%r14
    00000563: 	popq	%r15
    00000565: 	retq # Offset: 1381
    00000566: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp6504:
    00000570: 	cmpq	$0x1, %rdx
    00000574: 	je	.Ltmp6513 # Offset: 1396
    0000057a: 	movl	$0x1, %eax
    0000057f: 	jmp	.Ltmp6514 # Offset: 1407
    00000581: 	nopl	(%rax) # Size: 7
.Ltmp6515:
    00000588: 	addq	$0x1, %rax
    0000058c: 	cmpq	%rax, %rdx
    0000058f: 	je	.Ltmp6513 # Offset: 1423
.Ltmp6514:
    00000595: 	movq	(%rcx,%rax,8), %rsi
    00000599: 	testq	%rsi, %rsi
    0000059c: 	je	.Ltmp6515 # Offset: 1436
    0000059e: 	movq	%rsi, 0x30(%rsp)
    000005a3: 	movq	%rax, %rdx
    000005a6: 	jmp	.Ltmp6513 # Offset: 1446
    000005ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6505:
    000005b0: 	movl	current_test(%rip), %edx
    000005b6: 	movq	%r12, %rsi
    000005b9: 	movl	$0x1, %edi
    000005be: 	xorl	%eax, %eax
    000005c0: 	callq	__printf_chk@PLT # Offset: 1472
    000005c5: 	movl	iterations(%rip), %r9d
    000005cc: 	jmp	.Ltmp6516 # Offset: 1484
.Ltmp6499:
    000005d1: 	movq	0x20(%rsp), %rdi
    000005d6: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv # Offset: 1494
    000005db: 	jmp	.Ltmp6517 # Offset: 1499
.Ltmp6507:
    000005e0: 	movq	-0x8(%rdx), %rax
    000005e4: 	addq	$0x200, %rax
    000005ea: 	jmp	.Ltmp6518 # Offset: 1514
.Ltmp6512:
    000005ef: 	callq	__stack_chk_fail@PLT # Offset: 1519
    000005f4: 	endbr64
    000005f8: 	movq	%rax, %rbp
    000005fb: 	movq	0x20(%rsp), %rdi
    00000600: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED2Ev # Offset: 1536
    00000605: 	movq	%rbp, %rdi
    00000608: 	callq	_Unwind_Resume@PLT # Offset: 1544
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_accum_simplehashmapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z34test_accum_simplehashmap_unorderedId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 338
  State       : disassembled
  Address     : 0x44750
  Size        : 0x59e
  MaxSize     : 0x5a0
  Offset      : 0x44750
  Section     : .text
  Orc Section : .local.text._Z34test_accum_simplehashmap_unorderedId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0337:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, %rbx
    00000014: 	subq	$0x128, %rsp
    0000001b: 	movq	%rsi, 0x28(%rsp)
    00000020: 	movq	%rdx, 0x38(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x118(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	leaq	0x50(%rsp), %rax
    0000003d: 	movq	%rax, %rdi
    00000040: 	movq	%rax, 0x30(%rsp)
    00000045: 	callq	_ZN20HashMapPoolAllocatorIddEC2Ev # Offset: 69
    0000004a: 	pxor	%xmm0, %xmm0
    0000004e: 	movq	$0x0, 0x100(%rsp)
    0000005a: 	movq	$0x0, 0x108(%rsp)
    00000066: 	movl	$0x3f800000, 0x110(%rsp)
    00000071: 	movaps	%xmm0, 0xf0(%rsp)
    00000079: 	cmpq	%rbx, %r12
    0000007c: 	je	.Ltmp6519 # Offset: 124
    00000082: 	pxor	%xmm2, %xmm2
    00000086: 	xorl	%ebx, %ebx
    00000088: 	movl	$0xc70f6907, %ebp
    0000008d: 	movsd	%xmm2, 0x8(%rsp)
    00000093: 	movsd	%xmm2, 0x10(%rsp)
    00000099: 	testq	%rbx, %rbx
    0000009c: 	je	.Ltmp6520 # Offset: 156
.Ltmp6526:
    000000a2: 	movsd	(%r12), %xmm0
    000000a8: 	ucomisd	0x8(%rsp), %xmm0
    000000ae: 	movsd	%xmm0, 0x48(%rsp)
    000000b4: 	jp	.Ltmp6521 # Offset: 180
    000000ba: 	movl	$0x0, %eax
    000000bf: 	jne	.Ltmp6521 # Offset: 191
.Ltmp6537:
    000000c5: 	xorl	%edx, %edx
    000000c7: 	divq	0x100(%rsp)
    000000cf: 	movq	0x108(%rsp), %rax
    000000d7: 	movq	(%rax,%rdx,8), %rax
    000000db: 	leaq	(,%rdx,8), %r13
    000000e3: 	testq	%rax, %rax
    000000e6: 	je	.Ltmp6522 # Offset: 230
    000000ec: 	movsd	(%r12), %xmm0
    000000f2: 	jmp	.Ltmp6523 # Offset: 242
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp6524:
    000000f8: 	movq	0x10(%rax), %rax
    000000fc: 	testq	%rax, %rax
    000000ff: 	je	.Ltmp6522 # Offset: 255
.Ltmp6523:
    00000105: 	ucomisd	(%rax), %xmm0
    00000109: 	jp	.Ltmp6524 # Offset: 265
    0000010b: 	jne	.Ltmp6524 # Offset: 267
    0000010d: 	addq	$0x8, %rax
.Ltmp6539:
    00000111: 	movsd	%xmm0, (%rax)
    00000115: 	addsd	0x10(%rsp), %xmm0
    0000011b: 	addq	$0x8, %r12
    0000011f: 	movsd	%xmm0, 0x10(%rsp)
    00000125: 	cmpq	%r12, 0x28(%rsp)
    0000012a: 	je	.Ltmp6525 # Offset: 298
    00000130: 	movq	0xf8(%rsp), %rbx
    00000138: 	testq	%rbx, %rbx
    0000013b: 	jne	.Ltmp6526 # Offset: 315
.Ltmp6520:
    00000141: 	movss	DATAat0x537b0(%rip), %xmm2
    00000149: 	movss	DATAat0x537a4(%rip), %xmm0
    00000151: 	divss	0x110(%rsp), %xmm0
    0000015a: 	movaps	%xmm0, %xmm1
    0000015d: 	movss	DATAat0x5379c(%rip), %xmm3
    00000165: 	movq	0x100(%rsp), %rax
    0000016d: 	andps	%xmm2, %xmm1
    00000170: 	ucomiss	%xmm1, %xmm3
    00000173: 	movq	%rax, 0x20(%rsp)
    00000178: 	jbe	.Ltmp6527 # Offset: 376
    0000017a: 	cvttss2si	%xmm0, %eax
    0000017e: 	pxor	%xmm1, %xmm1
    00000182: 	movaps	%xmm0, %xmm3
    00000185: 	movss	DATAat0x53798(%rip), %xmm5
    0000018d: 	andnps	%xmm0, %xmm2
    00000190: 	cvtsi2ss	%eax, %xmm1
    00000194: 	cmpnless	%xmm1, %xmm3
    00000199: 	andps	%xmm5, %xmm3
    0000019c: 	addss	%xmm3, %xmm1
    000001a0: 	orps	%xmm2, %xmm1
    000001a3: 	movaps	%xmm1, %xmm0
.Ltmp6527:
    000001a6: 	comiss	DATAat0x537a0(%rip), %xmm0
    000001ad: 	jae	.Ltmp6528 # Offset: 429
    000001b3: 	cvttss2si	%xmm0, %rax
.Ltmp6540:
    000001b8: 	movl	$0x8, %edx
    000001bd: 	movq	0x20(%rsp), %r14
    000001c2: 	movq	$0x8, 0x100(%rsp)
    000001ce: 	cmpq	%rdx, %rax
    000001d1: 	cmovbq	%rdx, %rax
    000001d5: 	movq	%rax, %rdx
    000001d8: 	shrq	%rdx
    000001db: 	addq	%rdx, %rax
    000001de: 	movq	%rax, 0xf8(%rsp)
    000001e6: 	cmpq	$0x8, %r14
    000001ea: 	je	.Ltmp6526 # Offset: 490
    000001f0: 	movl	$0x40, %edi
    000001f5: 	callq	_Znam@PLT # Offset: 501
    000001fa: 	pxor	%xmm0, %xmm0
    000001fe: 	movq	%rax, %r15
    00000201: 	movups	%xmm0, (%rax)
    00000204: 	movups	%xmm0, 0x10(%rax)
    00000208: 	movups	%xmm0, 0x20(%rax)
    0000020c: 	movups	%xmm0, 0x30(%rax)
    00000210: 	movq	0x108(%rsp), %rax
    00000218: 	movq	%rax, 0x18(%rsp)
    0000021d: 	testq	%r14, %r14
    00000220: 	je	.Ltmp6529 # Offset: 544
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp6535:
    00000230: 	movq	0x18(%rsp), %rax
    00000235: 	movq	(%rax,%rbx,8), %r14
    00000239: 	testq	%r14, %r14
    0000023c: 	jne	.Ltmp6530 # Offset: 572
    0000023e: 	jmp	.Ltmp6531 # Offset: 574
.Ltmp6533:
    00000240: 	movq	(%r15), %rax
    00000243: 	movq	%rax, 0x10(%r14)
    00000247: 	movq	%r14, (%r15)
    0000024a: 	testq	%r13, %r13
    0000024d: 	je	.Ltmp6531 # Offset: 589
.Ltmp6534:
    0000024f: 	movq	%r13, %r14
.Ltmp6530:
    00000252: 	movsd	(%r14), %xmm0
    00000257: 	ucomisd	0x8(%rsp), %xmm0
    0000025d: 	movq	0x10(%r14), %r13
    00000261: 	movsd	%xmm0, 0x48(%rsp)
    00000267: 	jp	.Ltmp6532 # Offset: 615
    00000269: 	je	.Ltmp6533 # Offset: 617
.Ltmp6532:
    0000026b: 	movq	%rbp, %rdx
    0000026e: 	leaq	0x48(%rsp), %rdi
    00000273: 	movl	$0x8, %esi
    00000278: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 632
    0000027d: 	xorl	%edx, %edx
    0000027f: 	divq	0x100(%rsp)
    00000287: 	leaq	(%r15,%rdx,8), %rax
    0000028b: 	movq	(%rax), %rdx
    0000028e: 	movq	%rdx, 0x10(%r14)
    00000292: 	movq	%r14, (%rax)
    00000295: 	testq	%r13, %r13
    00000298: 	jne	.Ltmp6534 # Offset: 664
.Ltmp6531:
    0000029a: 	addq	$0x1, %rbx
    0000029e: 	cmpq	%rbx, 0x20(%rsp)
    000002a3: 	jne	.Ltmp6535 # Offset: 675
    000002a5: 	movq	0x108(%rsp), %rax
    000002ad: 	movq	%rax, 0x18(%rsp)
.Ltmp6529:
    000002b2: 	movq	0x18(%rsp), %rax
    000002b7: 	testq	%rax, %rax
    000002ba: 	je	.Ltmp6536 # Offset: 698
    000002bc: 	movq	%rax, %rdi
    000002bf: 	callq	_ZdaPv@PLT # Offset: 703
.Ltmp6536:
    000002c4: 	movq	%r15, 0x108(%rsp)
    000002cc: 	jmp	.Ltmp6526 # Offset: 716
.Ltmp6521:
    000002d1: 	leaq	0x48(%rsp), %rdi
    000002d6: 	movq	%rbp, %rdx
    000002d9: 	movl	$0x8, %esi
    000002de: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 734
    000002e3: 	jmp	.Ltmp6537 # Offset: 739
.Ltmp6522:
    000002e8: 	movq	0x30(%rsp), %rdi
    000002ed: 	callq	_ZN20HashMapPoolAllocatorIddE13allocate_nodeEv # Offset: 749
    000002f2: 	movsd	(%r12), %xmm0
    000002f8: 	addq	0x108(%rsp), %r13
    00000300: 	movq	%rax, %rbx
    00000303: 	movq	$0x0, 0x8(%rax)
    0000030b: 	movsd	%xmm0, (%rax)
    0000030f: 	movq	(%r13), %rax
    00000313: 	movq	%rax, 0x10(%rbx)
    00000317: 	movq	0xf0(%rsp), %rax
    0000031f: 	movq	%rbx, (%r13)
    00000323: 	addq	$0x1, %rax
    00000327: 	movq	%rax, 0xf0(%rsp)
    0000032f: 	cmpq	0xf8(%rsp), %rax
    00000337: 	ja	.Ltmp6538 # Offset: 823
.Ltmp6557:
    0000033d: 	movsd	(%r12), %xmm0
    00000343: 	leaq	0x8(%rbx), %rax
    00000347: 	jmp	.Ltmp6539 # Offset: 839
.Ltmp6528:
    0000034c: 	subss	DATAat0x537a0(%rip), %xmm0
    00000354: 	cvttss2si	%xmm0, %rax
    00000359: 	btcq	$0x3f, %rax
    0000035e: 	jmp	.Ltmp6540 # Offset: 862
.Ltmp6519:
    00000363: 	pxor	%xmm3, %xmm3
    00000367: 	movsd	%xmm3, 0x8(%rsp)
    0000036d: 	movsd	%xmm3, 0x10(%rsp)
.Ltmp6525:
    00000373: 	callq	clock@PLT # Offset: 883
    00000378: 	movl	iterations(%rip), %r8d
    0000037f: 	xorl	%ebx, %ebx
    00000381: 	leaq	DATAat0x52360(%rip), %rbp
    00000388: 	movq	%rax, start_time(%rip)
    0000038f: 	testl	%r8d, %r8d
    00000392: 	jle	.Ltmp6541 # Offset: 914
.Ltmp6549:
    00000398: 	movq	0xb0(%rsp), %rdi
    000003a0: 	movq	0xd0(%rsp), %rcx
    000003a8: 	pxor	%xmm0, %xmm0
    000003ac: 	movq	0xc0(%rsp), %rdx
    000003b4: 	movq	0xc8(%rsp), %rsi
    000003bc: 	cmpq	%rdi, %rcx
    000003bf: 	je	.Ltmp6542 # Offset: 959
    000003c1: 	leaq	0x20(%rdi), %rax
    000003c5: 	cmpq	%rdx, %rax
    000003c8: 	je	.Ltmp6543 # Offset: 968
    000003ce: 	nop # Size: 2
.Ltmp6546:
    000003d0: 	cmpq	%rax, %rcx
    000003d3: 	je	.Ltmp6544 # Offset: 979
.Ltmp6547:
    000003d5: 	cmpq	$-0x1, 0x18(%rax)
    000003da: 	jne	.Ltmp6545 # Offset: 986
    000003e0: 	addq	$0x20, %rax
    000003e4: 	cmpq	%rax, %rdx
    000003e7: 	jne	.Ltmp6546 # Offset: 999
    000003e9: 	movq	0x8(%rsi), %rax
    000003ed: 	addq	$0x8, %rsi
    000003f1: 	leaq	0x200(%rax), %rdx
    000003f8: 	cmpq	%rax, %rcx
    000003fb: 	jne	.Ltmp6547 # Offset: 1019
.Ltmp6544:
    000003fd: 	addsd	0x8(%rdi), %xmm0
.Ltmp6542:
    00000402: 	movsd	0x10(%rsp), %xmm7
    00000408: 	ucomisd	%xmm0, %xmm7
    0000040c: 	jp	.Ltmp6548 # Offset: 1036
    00000412: 	jne	.Ltmp6548 # Offset: 1042
.Ltmp6556:
    00000418: 	addl	$0x1, %ebx
    0000041b: 	cmpl	%r8d, %ebx
    0000041e: 	jl	.Ltmp6549 # Offset: 1054
.Ltmp6541:
    00000424: 	movq	0x38(%rsp), %rdi
    00000429: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1065
    0000042e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000435: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000043c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000443: 	je	.Ltmp6550 # Offset: 1091
.Ltmp6558:
    00000449: 	movq	-0x20(%rax), %rbp
    0000044d: 	callq	clock@PLT # Offset: 1101
    00000452: 	pxor	%xmm0, %xmm0
    00000456: 	movq	%rax, end_time(%rip)
    0000045d: 	movq	%rbp, %rdi
    00000460: 	subq	start_time(%rip), %rax
    00000467: 	cvtsi2sd	%rax, %xmm0
    0000046c: 	divsd	DATAat0x53788(%rip), %xmm0
    00000474: 	callq	_Z13record_resultdPKc # Offset: 1140
    00000479: 	movq	0x108(%rsp), %rdi
    00000481: 	testq	%rdi, %rdi
    00000484: 	je	.Ltmp6551 # Offset: 1156
    00000486: 	callq	_ZdaPv@PLT # Offset: 1158
.Ltmp6551:
    0000048b: 	movq	0xa0(%rsp), %rdi
    00000493: 	testq	%rdi, %rdi
    00000496: 	je	.Ltmp6552 # Offset: 1174
    00000498: 	movq	0xe8(%rsp), %rax
    000004a0: 	movq	0xc8(%rsp), %rbx
    000004a8: 	leaq	0x8(%rax), %rbp
    000004ac: 	cmpq	%rbx, %rbp
    000004af: 	jbe	.Ltmp6553 # Offset: 1199
.Ltmp6554:
    000004b1: 	movq	(%rbx), %rdi
    000004b4: 	movl	$0x200, %esi
    000004b9: 	addq	$0x8, %rbx
    000004bd: 	callq	_ZdlPvm@PLT # Offset: 1213
    000004c2: 	cmpq	%rbx, %rbp
    000004c5: 	ja	.Ltmp6554 # Offset: 1221
    000004c7: 	movq	0xa0(%rsp), %rdi
.Ltmp6553:
    000004cf: 	movq	0xa8(%rsp), %rax
    000004d7: 	leaq	(,%rax,8), %rsi
    000004df: 	callq	_ZdlPvm@PLT # Offset: 1247
.Ltmp6552:
    000004e4: 	movq	0x30(%rsp), %rdi
    000004e9: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 1257
    000004ee: 	movq	0x118(%rsp), %rax
    000004f6: 	subq	%fs:0x28, %rax
    000004ff: 	jne	.Ltmp6555 # Offset: 1279
    00000501: 	addq	$0x128, %rsp
    00000508: 	popq	%rbx
    00000509: 	popq	%rbp
    0000050a: 	popq	%r12
    0000050c: 	popq	%r13
    0000050e: 	popq	%r14
    00000510: 	popq	%r15
    00000512: 	retq # Offset: 1298
    00000513: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6545:
    00000518: 	addsd	0x8(%rdi), %xmm0
    0000051d: 	movq	%rax, %rdi
    00000520: 	leaq	0x20(%rdi), %rax
    00000524: 	cmpq	%rdx, %rax
    00000527: 	jne	.Ltmp6546 # Offset: 1319
.Ltmp6543:
    0000052d: 	movq	0x8(%rsi), %rax
    00000531: 	addq	$0x8, %rsi
    00000535: 	leaq	0x200(%rax), %rdx
    0000053c: 	jmp	.Ltmp6546 # Offset: 1340
.Ltmp6548:
    00000541: 	movl	current_test(%rip), %edx
    00000547: 	movq	%rbp, %rsi
    0000054a: 	movl	$0x1, %edi
    0000054f: 	xorl	%eax, %eax
    00000551: 	callq	__printf_chk@PLT # Offset: 1361
    00000556: 	movl	iterations(%rip), %r8d
    0000055d: 	jmp	.Ltmp6556 # Offset: 1373
.Ltmp6538:
    00000562: 	movq	0x30(%rsp), %rdi
    00000567: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv # Offset: 1383
    0000056c: 	jmp	.Ltmp6557 # Offset: 1388
.Ltmp6550:
    00000571: 	movq	-0x8(%rdx), %rax
    00000575: 	addq	$0x200, %rax
    0000057b: 	jmp	.Ltmp6558 # Offset: 1403
.Ltmp6555:
    00000580: 	callq	__stack_chk_fail@PLT # Offset: 1408
    00000585: 	endbr64
    00000589: 	movq	%rax, %rbp
    0000058c: 	movq	0x30(%rsp), %rdi
    00000591: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED2Ev # Offset: 1425
    00000596: 	movq	%rbp, %rdi
    00000599: 	callq	_Unwind_Resume@PLT # Offset: 1433
DWARF CFI Instructions:
    <empty>
End of Function "_Z34test_accum_simplehashmap_unorderedId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14testAccumulateIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 339
  State       : disassembled
  Address     : 0x44cf0
  Size        : 0x8ae
  MaxSize     : 0x8b0
  Offset      : 0x44cf0
  Section     : .text
  Orc Section : .local.text._Z14testAccumulateIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0338:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	leaq	DATAat0x52a66(%rip), %rdx
    0000001a: 	pushq	%rbx
    0000001b: 	movq	%rsi, %rbx
    0000001e: 	leaq	(%r13,%rbx,8), %r14
    00000023: 	subq	$0xa8, %rsp
    0000002a: 	movq	%rsi, 0x28(%rsp)
    0000002f: 	leaq	0x70(%rsp), %r12
    00000034: 	movq	%rbp, %rsi
    00000037: 	movl	%r8d, 0x24(%rsp)
    0000003c: 	movq	%r12, %rdi
    0000003f: 	movq	%fs:0x28, %rax
    00000048: 	movq	%rax, 0x98(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	movl	%ecx, iterations(%rip)
    00000058: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 88
    0000005d: 	movq	%r12, %rdx
    00000060: 	movq	%r14, %rsi
    00000063: 	movq	%r13, %rdi
    00000066: 	callq	_Z16test_accum_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 102
    0000006b: 	movq	0x70(%rsp), %rdi
    00000070: 	leaq	0x80(%rsp), %rbx
    00000078: 	cmpq	%rbx, %rdi
    0000007b: 	je	.Ltmp6559 # Offset: 123
    0000007d: 	movq	0x80(%rsp), %rax
    00000085: 	leaq	0x1(%rax), %rsi
    00000089: 	callq	_ZdlPvm@PLT # Offset: 137
.Ltmp6559:
    0000008e: 	leaq	DATAat0x52a78(%rip), %rdx
    00000095: 	movq	%rbp, %rsi
    00000098: 	movq	%r12, %rdi
    0000009b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 155
    000000a0: 	movq	%r12, %rdx
    000000a3: 	movq	%r14, %rsi
    000000a6: 	movq	%r13, %rdi
    000000a9: 	callq	_Z19test_accum_stdarrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 169
    000000ae: 	movq	0x70(%rsp), %rdi
    000000b3: 	cmpq	%rbx, %rdi
    000000b6: 	je	.Ltmp6560 # Offset: 182
    000000b8: 	movq	0x80(%rsp), %rax
    000000c0: 	leaq	0x1(%rax), %rsi
    000000c4: 	callq	_ZdlPvm@PLT # Offset: 196
.Ltmp6560:
    000000c9: 	leaq	DATAat0x52a8f(%rip), %rdx
    000000d0: 	movq	%rbp, %rsi
    000000d3: 	movq	%r12, %rdi
    000000d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 214
    000000db: 	movq	%r12, %rdx
    000000de: 	movq	%r14, %rsi
    000000e1: 	movq	%r13, %rdi
    000000e4: 	callq	_Z10test_accumIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 228
    000000e9: 	movq	0x70(%rsp), %rdi
    000000ee: 	cmpq	%rbx, %rdi
    000000f1: 	je	.Ltmp6561 # Offset: 241
    000000f3: 	movq	0x80(%rsp), %rax
    000000fb: 	leaq	0x1(%rax), %rsi
    000000ff: 	callq	_ZdlPvm@PLT # Offset: 255
.Ltmp6561:
    00000104: 	leaq	DATAat0x52aa7(%rip), %rdx
    0000010b: 	movq	%rbp, %rsi
    0000010e: 	movq	%r12, %rdi
    00000111: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 273
    00000116: 	movq	%r12, %rdx
    00000119: 	movq	%r14, %rsi
    0000011c: 	movq	%r13, %rdi
    0000011f: 	callq	_Z10test_accumIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 287
    00000124: 	movq	0x70(%rsp), %rdi
    00000129: 	cmpq	%rbx, %rdi
    0000012c: 	je	.Ltmp6562 # Offset: 300
    0000012e: 	movq	0x80(%rsp), %rax
    00000136: 	leaq	0x1(%rax), %rsi
    0000013a: 	callq	_ZdlPvm@PLT # Offset: 314
.Ltmp6562:
    0000013f: 	leaq	DATAat0x52abe(%rip), %rdx
    00000146: 	movq	%rbp, %rsi
    00000149: 	movq	%r12, %rdi
    0000014c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 332
    00000151: 	movq	%r12, %rdx
    00000154: 	movq	%r14, %rsi
    00000157: 	movq	%r13, %rdi
    0000015a: 	callq	_Z10test_accumIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 346
    0000015f: 	movq	0x70(%rsp), %rdi
    00000164: 	cmpq	%rbx, %rdi
    00000167: 	je	.Ltmp6563 # Offset: 359
    00000169: 	movq	0x80(%rsp), %rax
    00000171: 	leaq	0x1(%rax), %rsi
    00000175: 	callq	_ZdlPvm@PLT # Offset: 373
.Ltmp6563:
    0000017a: 	leaq	DATAat0x52adc(%rip), %rdx
    00000181: 	movq	%rbp, %rsi
    00000184: 	movq	%r12, %rdi
    00000187: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 391
    0000018c: 	movq	%r12, %rdx
    0000018f: 	movq	%r14, %rsi
    00000192: 	movq	%r13, %rdi
    00000195: 	callq	_Z10test_accumIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 405
    0000019a: 	movq	0x70(%rsp), %rdi
    0000019f: 	cmpq	%rbx, %rdi
    000001a2: 	je	.Ltmp6564 # Offset: 418
    000001a4: 	movq	0x80(%rsp), %rax
    000001ac: 	leaq	0x1(%rax), %rsi
    000001b0: 	callq	_ZdlPvm@PLT # Offset: 432
.Ltmp6564:
    000001b5: 	leaq	DATAat0x52af2(%rip), %rdx
    000001bc: 	movq	%rbp, %rsi
    000001bf: 	movq	%r12, %rdi
    000001c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 450
    000001c7: 	movq	%r12, %rdx
    000001ca: 	movq	%r14, %rsi
    000001cd: 	movq	%r13, %rdi
    000001d0: 	callq	_Z10test_accumId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 464
    000001d5: 	movq	0x70(%rsp), %rdi
    000001da: 	cmpq	%rbx, %rdi
    000001dd: 	je	.Ltmp6565 # Offset: 477
    000001df: 	movq	0x80(%rsp), %rax
    000001e7: 	leaq	0x1(%rax), %rsi
    000001eb: 	callq	_ZdlPvm@PLT # Offset: 491
.Ltmp6565:
    000001f0: 	leaq	DATAat0x52bc8(%rip), %rdx
    000001f7: 	movq	%rbp, %rsi
    000001fa: 	movq	%r12, %rdi
    000001fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 509
    00000202: 	movq	%r12, %rdx
    00000205: 	movq	%r14, %rsi
    00000208: 	movq	%r13, %rdi
    0000020b: 	callq	_Z10test_accumId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 523
    00000210: 	movq	0x70(%rsp), %rdi
    00000215: 	cmpq	%rbx, %rdi
    00000218: 	je	.Ltmp6566 # Offset: 536
    0000021a: 	movq	0x80(%rsp), %rax
    00000222: 	leaq	0x1(%rax), %rsi
    00000226: 	callq	_ZdlPvm@PLT # Offset: 550
.Ltmp6566:
    0000022b: 	leaq	DATAat0x52bf0(%rip), %rdx
    00000232: 	movq	%rbp, %rsi
    00000235: 	movq	%r12, %rdi
    00000238: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 568
    0000023d: 	movq	%r12, %rdx
    00000240: 	movq	%r14, %rsi
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z20test_accum_unorderedId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 582
    0000024b: 	movq	0x70(%rsp), %rdi
    00000250: 	cmpq	%rbx, %rdi
    00000253: 	je	.Ltmp6567 # Offset: 595
    00000255: 	movq	0x80(%rsp), %rax
    0000025d: 	leaq	0x1(%rax), %rsi
    00000261: 	callq	_ZdlPvm@PLT # Offset: 609
.Ltmp6567:
    00000266: 	leaq	DATAat0x52b0d(%rip), %rdx
    0000026d: 	movq	%rbp, %rsi
    00000270: 	movq	%r12, %rdi
    00000273: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 627
    00000278: 	movq	%r12, %rdx
    0000027b: 	movq	%r14, %rsi
    0000027e: 	movq	%r13, %rdi
    00000281: 	callq	_Z10test_accumId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 641
    00000286: 	movq	0x70(%rsp), %rdi
    0000028b: 	cmpq	%rbx, %rdi
    0000028e: 	je	.Ltmp6568 # Offset: 654
    00000290: 	movq	0x80(%rsp), %rax
    00000298: 	leaq	0x1(%rax), %rsi
    0000029c: 	callq	_ZdlPvm@PLT # Offset: 668
.Ltmp6568:
    000002a1: 	leaq	DATAat0x52c20(%rip), %rdx
    000002a8: 	movq	%rbp, %rsi
    000002ab: 	movq	%r12, %rdi
    000002ae: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 686
    000002b3: 	movq	%r12, %rdx
    000002b6: 	movq	%r14, %rsi
    000002b9: 	movq	%r13, %rdi
    000002bc: 	callq	_Z10test_accumId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 700
    000002c1: 	movq	0x70(%rsp), %rdi
    000002c6: 	cmpq	%rbx, %rdi
    000002c9: 	je	.Ltmp6569 # Offset: 713
    000002cb: 	movq	0x80(%rsp), %rax
    000002d3: 	leaq	0x1(%rax), %rsi
    000002d7: 	callq	_ZdlPvm@PLT # Offset: 727
.Ltmp6569:
    000002dc: 	leaq	DATAat0x52c48(%rip), %rdx
    000002e3: 	movq	%rbp, %rsi
    000002e6: 	movq	%r12, %rdi
    000002e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 745
    000002ee: 	movq	%r12, %rdx
    000002f1: 	movq	%r14, %rsi
    000002f4: 	movq	%r13, %rdi
    000002f7: 	callq	_Z20test_accum_unorderedId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 759
    000002fc: 	movq	0x70(%rsp), %rdi
    00000301: 	cmpq	%rbx, %rdi
    00000304: 	je	.Ltmp6570 # Offset: 772
    00000306: 	movq	0x80(%rsp), %rax
    0000030e: 	leaq	0x1(%rax), %rsi
    00000312: 	callq	_ZdlPvm@PLT # Offset: 786
.Ltmp6570:
    00000317: 	leaq	DATAat0x52b28(%rip), %rdx
    0000031e: 	movq	%rbp, %rsi
    00000321: 	movq	%r12, %rdi
    00000324: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 804
    00000329: 	movq	%r12, %rdx
    0000032c: 	movq	%r14, %rsi
    0000032f: 	movq	%r13, %rdi
    00000332: 	callq	_Z14test_accum_setIdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 818
    00000337: 	movq	0x70(%rsp), %rdi
    0000033c: 	cmpq	%rbx, %rdi
    0000033f: 	je	.Ltmp6571 # Offset: 831
    00000341: 	movq	0x80(%rsp), %rax
    00000349: 	leaq	0x1(%rax), %rsi
    0000034d: 	callq	_ZdlPvm@PLT # Offset: 845
.Ltmp6571:
    00000352: 	leaq	DATAat0x52b3d(%rip), %rsi
    00000359: 	movq	%r12, %rdi
    0000035c: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 860
    00000361: 	movq	%r12, %rdx
    00000364: 	movq	%r14, %rsi
    00000367: 	movq	%r13, %rdi
    0000036a: 	callq	_Z14test_accum_setIdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 874
    0000036f: 	movq	0x70(%rsp), %rdi
    00000374: 	cmpq	%rbx, %rdi
    00000377: 	je	.Ltmp6572 # Offset: 887
    00000379: 	movq	0x80(%rsp), %rax
    00000381: 	leaq	0x1(%rax), %rsi
    00000385: 	callq	_ZdlPvm@PLT # Offset: 901
.Ltmp6572:
    0000038a: 	leaq	0x30(%rsp), %r15
    0000038f: 	leaq	DATAat0x52564(%rip), %rdx
    00000396: 	movq	%rbp, %rsi
    00000399: 	movq	%r15, %rdi
    0000039c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 924
    000003a1: 	movq	0x8(%rbp), %rcx
    000003a5: 	movq	(%rbp), %rdx
    000003a9: 	movq	%r15, %rsi
    000003ac: 	leaq	0x50(%rsp), %rax
    000003b1: 	movq	%rax, %rdi
    000003b4: 	movq	%rax, 0x8(%rsp)
    000003b9: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 953
    000003be: 	movq	0x8(%rsp), %rsi
    000003c3: 	leaq	DATAat0x52b56(%rip), %rdx
    000003ca: 	movq	%r12, %rdi
    000003cd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 973
    000003d2: 	movq	%r12, %rdx
    000003d5: 	movq	%r14, %rsi
    000003d8: 	movq	%r13, %rdi
    000003db: 	callq	_Z14test_accum_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 987
    000003e0: 	movq	0x70(%rsp), %rdi
    000003e5: 	cmpq	%rbx, %rdi
    000003e8: 	je	.Ltmp6573 # Offset: 1000
    000003ea: 	movq	0x80(%rsp), %rax
    000003f2: 	leaq	0x1(%rax), %rsi
    000003f6: 	callq	_ZdlPvm@PLT # Offset: 1014
.Ltmp6573:
    000003fb: 	movq	0x50(%rsp), %rdi
    00000400: 	leaq	0x60(%rsp), %rax
    00000405: 	movq	%rax, 0x18(%rsp)
    0000040a: 	cmpq	%rax, %rdi
    0000040d: 	je	.Ltmp6574 # Offset: 1037
    0000040f: 	movq	0x60(%rsp), %rax
    00000414: 	leaq	0x1(%rax), %rsi
    00000418: 	callq	_ZdlPvm@PLT # Offset: 1048
.Ltmp6574:
    0000041d: 	movq	0x30(%rsp), %rdi
    00000422: 	leaq	0x40(%rsp), %rax
    00000427: 	movq	%rax, 0x10(%rsp)
    0000042c: 	cmpq	%rax, %rdi
    0000042f: 	je	.Ltmp6575 # Offset: 1071
    00000431: 	movq	0x40(%rsp), %rax
    00000436: 	leaq	0x1(%rax), %rsi
    0000043a: 	callq	_ZdlPvm@PLT # Offset: 1082
.Ltmp6575:
    0000043f: 	movq	%r15, %rdi
    00000442: 	leaq	DATAat0x52564(%rip), %rdx
    00000449: 	movq	%rbp, %rsi
    0000044c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1100
    00000451: 	movq	%r15, %rsi
    00000454: 	movq	0x8(%rbp), %rcx
    00000458: 	movq	(%rbp), %rdx
    0000045c: 	movq	0x8(%rsp), %r15
    00000461: 	movq	%r15, %rdi
    00000464: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1124
    00000469: 	leaq	DATAat0x52b6b(%rip), %rdx
    00000470: 	movq	%r15, %rsi
    00000473: 	movq	%r12, %rdi
    00000476: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1142
    0000047b: 	movq	%r12, %rdx
    0000047e: 	movq	%r14, %rsi
    00000481: 	movq	%r13, %rdi
    00000484: 	callq	_Z19test_accum_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1156
    00000489: 	movq	0x70(%rsp), %rdi
    0000048e: 	cmpq	%rbx, %rdi
    00000491: 	je	.Ltmp6576 # Offset: 1169
    00000493: 	movq	0x80(%rsp), %rax
    0000049b: 	leaq	0x1(%rax), %rsi
    0000049f: 	callq	_ZdlPvm@PLT # Offset: 1183
.Ltmp6576:
    000004a4: 	movq	0x50(%rsp), %rdi
    000004a9: 	cmpq	0x18(%rsp), %rdi
    000004ae: 	je	.Ltmp6577 # Offset: 1198
    000004b0: 	movq	0x60(%rsp), %rax
    000004b5: 	leaq	0x1(%rax), %rsi
    000004b9: 	callq	_ZdlPvm@PLT # Offset: 1209
.Ltmp6577:
    000004be: 	movq	0x30(%rsp), %rdi
    000004c3: 	cmpq	0x10(%rsp), %rdi
    000004c8: 	je	.Ltmp6578 # Offset: 1224
    000004ca: 	movq	0x40(%rsp), %rax
    000004cf: 	leaq	0x1(%rax), %rsi
    000004d3: 	callq	_ZdlPvm@PLT # Offset: 1235
.Ltmp6578:
    000004d8: 	leaq	DATAat0x52c78(%rip), %rdx
    000004df: 	movq	%rbp, %rsi
    000004e2: 	movq	%r12, %rdi
    000004e5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1253
    000004ea: 	movq	%r12, %rdx
    000004ed: 	movq	%r14, %rsi
    000004f0: 	movq	%r13, %rdi
    000004f3: 	callq	_Z14test_accum_setIdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1267
    000004f8: 	movq	0x70(%rsp), %rdi
    000004fd: 	cmpq	%rbx, %rdi
    00000500: 	je	.Ltmp6579 # Offset: 1280
    00000502: 	movq	0x80(%rsp), %rax
    0000050a: 	leaq	0x1(%rax), %rsi
    0000050e: 	callq	_ZdlPvm@PLT # Offset: 1294
.Ltmp6579:
    00000513: 	leaq	DATAat0x52c98(%rip), %rdx
    0000051a: 	movq	%rbp, %rsi
    0000051d: 	movq	%r12, %rdi
    00000520: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1312
    00000525: 	movq	%r12, %rdx
    00000528: 	movq	%r14, %rsi
    0000052b: 	movq	%r13, %rdi
    0000052e: 	callq	_Z14test_accum_setIdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1326
    00000533: 	movq	0x70(%rsp), %rdi
    00000538: 	cmpq	%rbx, %rdi
    0000053b: 	je	.Ltmp6580 # Offset: 1339
    0000053d: 	movq	0x80(%rsp), %rax
    00000545: 	leaq	0x1(%rax), %rsi
    00000549: 	callq	_ZdlPvm@PLT # Offset: 1353
.Ltmp6580:
    0000054e: 	leaq	DATAat0x52cc0(%rip), %rdx
    00000555: 	movq	%rbp, %rsi
    00000558: 	movq	%r12, %rdi
    0000055b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1371
    00000560: 	movq	%r12, %rdx
    00000563: 	movq	%r14, %rsi
    00000566: 	movq	%r13, %rdi
    00000569: 	callq	_Z14test_accum_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1385
    0000056e: 	movq	0x70(%rsp), %rdi
    00000573: 	cmpq	%rbx, %rdi
    00000576: 	je	.Ltmp6581 # Offset: 1398
    00000578: 	movq	0x80(%rsp), %rax
    00000580: 	leaq	0x1(%rax), %rsi
    00000584: 	callq	_ZdlPvm@PLT # Offset: 1412
.Ltmp6581:
    00000589: 	leaq	DATAat0x52ce0(%rip), %rdx
    00000590: 	movq	%rbp, %rsi
    00000593: 	movq	%r12, %rdi
    00000596: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1430
    0000059b: 	movq	%r12, %rdx
    0000059e: 	movq	%r14, %rsi
    000005a1: 	movq	%r13, %rdi
    000005a4: 	callq	_Z19test_accum_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1444
    000005a9: 	movq	0x70(%rsp), %rdi
    000005ae: 	cmpq	%rbx, %rdi
    000005b1: 	je	.Ltmp6582 # Offset: 1457
    000005b3: 	movq	0x80(%rsp), %rax
    000005bb: 	leaq	0x1(%rax), %rsi
    000005bf: 	callq	_ZdlPvm@PLT # Offset: 1471
.Ltmp6582:
    000005c4: 	leaq	DATAat0x52b85(%rip), %rdx
    000005cb: 	movq	%rbp, %rsi
    000005ce: 	movq	%r12, %rdi
    000005d1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1489
    000005d6: 	movq	%r12, %rdx
    000005d9: 	movq	%r14, %rsi
    000005dc: 	movq	%r13, %rdi
    000005df: 	callq	_Z24test_accum_simplehashmapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1503
    000005e4: 	movq	0x70(%rsp), %rdi
    000005e9: 	cmpq	%rbx, %rdi
    000005ec: 	je	.Ltmp6583 # Offset: 1516
    000005ee: 	movq	0x80(%rsp), %rax
    000005f6: 	leaq	0x1(%rax), %rsi
    000005fa: 	callq	_ZdlPvm@PLT # Offset: 1530
.Ltmp6583:
    000005ff: 	leaq	DATAat0x52b99(%rip), %rdx
    00000606: 	movq	%rbp, %rsi
    00000609: 	movq	%r12, %rdi
    0000060c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1548
    00000611: 	movq	%r12, %rdx
    00000614: 	movq	%r14, %rsi
    00000617: 	movq	%r13, %rdi
    0000061a: 	callq	_Z24test_accum_simplehashmapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1562
    0000061f: 	movq	0x70(%rsp), %rdi
    00000624: 	cmpq	%rbx, %rdi
    00000627: 	je	.Ltmp6584 # Offset: 1575
    00000629: 	movq	0x80(%rsp), %rax
    00000631: 	leaq	0x1(%rax), %rsi
    00000635: 	callq	_ZdlPvm@PLT # Offset: 1589
.Ltmp6584:
    0000063a: 	leaq	DATAat0x52d08(%rip), %rdx
    00000641: 	movq	%rbp, %rsi
    00000644: 	movq	%r12, %rdi
    00000647: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1607
    0000064c: 	movq	%r12, %rdx
    0000064f: 	movq	%r14, %rsi
    00000652: 	movq	%r13, %rdi
    00000655: 	callq	_Z34test_accum_simplehashmap_unorderedId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1621
    0000065a: 	movq	0x70(%rsp), %rdi
    0000065f: 	cmpq	%rbx, %rdi
    00000662: 	je	.Ltmp6585 # Offset: 1634
    00000664: 	movq	0x80(%rsp), %rax
    0000066c: 	leaq	0x1(%rax), %rsi
    00000670: 	callq	_ZdlPvm@PLT # Offset: 1648
.Ltmp6585:
    00000675: 	cmpb	$0x0, 0x24(%rsp)
    0000067a: 	jne	.Ltmp6586 # Offset: 1658
    0000067c: 	movq	0x98(%rsp), %rax
    00000684: 	subq	%fs:0x28, %rax
    0000068d: 	jne	.Ltmp6587 # Offset: 1677
    0000068f: 	addq	$0xa8, %rsp
    00000696: 	popq	%rbx
    00000697: 	popq	%rbp
    00000698: 	popq	%r12
    0000069a: 	popq	%r13
    0000069c: 	popq	%r14
    0000069e: 	popq	%r15
    000006a0: 	retq # Offset: 1696
    000006a1: 	nopl	(%rax) # Size: 7
.Ltmp6586:
    000006a8: 	movq	0x98(%rsp), %rax
    000006b0: 	subq	%fs:0x28, %rax
    000006b9: 	jne	.Ltmp6587 # Offset: 1721
    000006bb: 	movl	iterations(%rip), %edx
    000006c1: 	movl	0x28(%rsp), %esi
    000006c5: 	xorl	%r8d, %r8d
    000006c8: 	xorl	%ecx, %ecx
    000006ca: 	addq	$0xa8, %rsp
    000006d1: 	leaq	DATAat0x52bb3(%rip), %rdi
    000006d8: 	popq	%rbx
    000006d9: 	popq	%rbp
    000006da: 	popq	%r12
    000006dc: 	popq	%r13
    000006de: 	popq	%r14
    000006e0: 	popq	%r15
    000006e2: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 1762
.Ltmp6587:
    000006e7: 	callq	__stack_chk_fail@PLT # Offset: 1767
    000006ec: 	endbr64
    000006f0: 	movq	%rax, %rbp
    000006f3: 	jmp	.Ltmp6588 # Offset: 1779
    000006f5: 	endbr64
.Ltmp6590:
    000006f9: 	movq	%rax, %rbp
    000006fc: 	jmp	.Ltmp6589 # Offset: 1788
    000006fe: 	endbr64
    00000702: 	jmp	.Ltmp6590 # Offset: 1794
.Ltmp6588:
    00000704: 	movq	0x70(%rsp), %rdi
    00000709: 	leaq	0x80(%rsp), %rax
    00000711: 	cmpq	%rax, %rdi
    00000714: 	je	.Ltmp6591 # Offset: 1812
.Ltmp6592:
    00000716: 	movq	0x80(%rsp), %rax
    0000071e: 	leaq	0x1(%rax), %rsi
    00000722: 	callq	_ZdlPvm@PLT # Offset: 1826
.Ltmp6591:
    00000727: 	movq	%rbp, %rdi
    0000072a: 	callq	_Unwind_Resume@PLT # Offset: 1834
.Ltmp6589:
    0000072f: 	movq	0x70(%rsp), %rdi
    00000734: 	cmpq	%rbx, %rdi
    00000737: 	jne	.Ltmp6592 # Offset: 1847
    00000739: 	jmp	.Ltmp6591 # Offset: 1849
    0000073b: 	endbr64
    0000073f: 	jmp	.Ltmp6590 # Offset: 1855
    00000741: 	endbr64
    00000745: 	jmp	.Ltmp6590 # Offset: 1861
    00000747: 	endbr64
    0000074b: 	jmp	.Ltmp6590 # Offset: 1867
    0000074d: 	endbr64
    00000751: 	movq	%rax, %rbp
    00000754: 	jmp	.Ltmp6593 # Offset: 1876
    00000756: 	endbr64
    0000075a: 	movq	%rax, %rbp
    0000075d: 	jmp	.Ltmp6594 # Offset: 1885
    0000075f: 	endbr64
    00000763: 	movq	%rax, %rbp
    00000766: 	jmp	.Ltmp6595 # Offset: 1894
    00000768: 	endbr64
    0000076c: 	movq	%rax, %rbp
    0000076f: 	jmp	.Ltmp6596 # Offset: 1903
    00000771: 	endbr64
    00000775: 	movq	%rax, %rbp
    00000778: 	jmp	.Ltmp6597 # Offset: 1912
.Ltmp6593:
    0000077a: 	movq	0x70(%rsp), %rdi
    0000077f: 	cmpq	%rbx, %rdi
    00000782: 	je	.Ltmp6594 # Offset: 1922
    00000784: 	movq	0x80(%rsp), %rax
    0000078c: 	leaq	0x1(%rax), %rsi
    00000790: 	callq	_ZdlPvm@PLT # Offset: 1936
.Ltmp6594:
    00000795: 	movq	0x50(%rsp), %rdi
    0000079a: 	cmpq	0x18(%rsp), %rdi
    0000079f: 	je	.Ltmp6596 # Offset: 1951
    000007a1: 	movq	0x60(%rsp), %rax
    000007a6: 	leaq	0x1(%rax), %rsi
    000007aa: 	callq	_ZdlPvm@PLT # Offset: 1962
.Ltmp6596:
    000007af: 	movq	0x30(%rsp), %rdi
    000007b4: 	cmpq	0x10(%rsp), %rdi
    000007b9: 	je	.Ltmp6591 # Offset: 1977
.Ltmp6599:
    000007bf: 	movq	0x40(%rsp), %rax
    000007c4: 	leaq	0x1(%rax), %rsi
    000007c8: 	callq	_ZdlPvm@PLT # Offset: 1992
    000007cd: 	jmp	.Ltmp6591 # Offset: 1997
.Ltmp6595:
    000007d2: 	movq	0x70(%rsp), %rdi
    000007d7: 	cmpq	%rbx, %rdi
    000007da: 	je	.Ltmp6597 # Offset: 2010
    000007dc: 	movq	0x80(%rsp), %rax
    000007e4: 	leaq	0x1(%rax), %rsi
    000007e8: 	callq	_ZdlPvm@PLT # Offset: 2024
.Ltmp6597:
    000007ed: 	movq	0x50(%rsp), %rdi
    000007f2: 	leaq	0x60(%rsp), %rax
    000007f7: 	cmpq	%rax, %rdi
    000007fa: 	je	.Ltmp6598 # Offset: 2042
    000007fc: 	movq	0x60(%rsp), %rax
    00000801: 	leaq	0x1(%rax), %rsi
    00000805: 	callq	_ZdlPvm@PLT # Offset: 2053
.Ltmp6598:
    0000080a: 	movq	0x30(%rsp), %rdi
    0000080f: 	leaq	0x40(%rsp), %rax
    00000814: 	cmpq	%rax, %rdi
    00000817: 	jne	.Ltmp6599 # Offset: 2071
    00000819: 	jmp	.Ltmp6591 # Offset: 2073
    0000081e: 	endbr64
    00000822: 	jmp	.Ltmp6590 # Offset: 2082
    00000827: 	endbr64
    0000082b: 	jmp	.Ltmp6590 # Offset: 2091
    00000830: 	endbr64
    00000834: 	jmp	.Ltmp6590 # Offset: 2100
    00000839: 	endbr64
    0000083d: 	jmp	.Ltmp6590 # Offset: 2109
    00000842: 	endbr64
    00000846: 	jmp	.Ltmp6590 # Offset: 2118
    0000084b: 	endbr64
    0000084f: 	jmp	.Ltmp6590 # Offset: 2127
    00000854: 	endbr64
    00000858: 	jmp	.Ltmp6590 # Offset: 2136
    0000085d: 	endbr64
    00000861: 	jmp	.Ltmp6590 # Offset: 2145
    00000866: 	endbr64
    0000086a: 	movq	%rax, %rbp
    0000086d: 	jmp	.Ltmp6598 # Offset: 2157
    0000086f: 	endbr64
    00000873: 	jmp	.Ltmp6590 # Offset: 2163
    00000878: 	endbr64
    0000087c: 	jmp	.Ltmp6590 # Offset: 2172
    00000881: 	endbr64
    00000885: 	jmp	.Ltmp6590 # Offset: 2181
    0000088a: 	endbr64
    0000088e: 	jmp	.Ltmp6590 # Offset: 2190
    00000893: 	endbr64
    00000897: 	jmp	.Ltmp6590 # Offset: 2199
    0000089c: 	endbr64
    000008a0: 	jmp	.Ltmp6590 # Offset: 2208
    000008a5: 	endbr64
    000008a9: 	jmp	.Ltmp6590 # Offset: 2217
DWARF CFI Instructions:
    <empty>
End of Function "_Z14testAccumulateIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z19test_duplicate_coreI13PooledHashMapIddEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 340
  State       : disassembled
  Address     : 0x455a0
  Size        : 0xa49
  MaxSize     : 0xa50
  Offset      : 0x455a0
  Section     : .text
  Orc Section : .local.text._Z19test_duplicate_coreI13PooledHashMapIddEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0339:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	shlq	$0x3, %rsi
    0000000a: 	movq	%rdi, %r15
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0xc8, %rsp
    0000001c: 	movq	%rdx, 0x80(%rsp)
    00000024: 	xorl	%edx, %edx
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0xb8(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	movabsq	$0x500000000, %rax
    00000043: 	divq	%rsi
    00000046: 	movq	%rax, 0x8(%rsp)
    0000004b: 	cmpq	$0x3e8, %rax
    00000051: 	ja	.Ltmp6600 # Offset: 81
    00000057: 	cmpq	$0x3, %rax
    0000005b: 	ja	.Ltmp6601 # Offset: 91
    00000061: 	movq	$0x0, 0xb0(%rsp)
    0000006d: 	pxor	%xmm0, %xmm0
    00000071: 	movq	$0x4, 0x8(%rsp)
    0000007a: 	movaps	%xmm0, 0xa0(%rsp)
.Ltmp6638:
    00000082: 	movq	0x8(%rsp), %rbx
    00000087: 	leaq	0xa0(%rsp), %rdi
    0000008f: 	movq	%rbx, %rsi
    00000092: 	callq	_ZNSt6vectorIP13PooledHashMapIddESaIS2_EE17_M_default_appendEm # Offset: 146
    00000097: 	movq	0xa0(%rsp), %rcx
    0000009f: 	movl	iterations(%rip), %eax
    000000a5: 	movq	%rcx, 0x50(%rsp)
    000000aa: 	testl	%eax, %eax
    000000ac: 	jle	.Ltmp6602 # Offset: 172
    000000b2: 	addq	$0x8, %rcx
    000000b6: 	movl	%ebx, 0x5c(%rsp)
    000000ba: 	pxor	%xmm7, %xmm7
    000000be: 	movl	$0x0, 0x58(%rsp)
    000000c6: 	movq	%rcx, 0x60(%rsp)
    000000cb: 	movsd	%xmm7, 0x88(%rsp)
.Ltmp6626:
    000000d4: 	movslq	0x58(%rsp), %rdx
    000000d9: 	movslq	%eax, %rcx
    000000dc: 	movq	%rdx, %rsi
    000000df: 	addq	0x8(%rsp), %rdx
    000000e4: 	subl	%esi, %eax
    000000e6: 	cmpq	%rcx, %rdx
    000000e9: 	cmovbl	0x5c(%rsp), %eax
    000000ee: 	movl	%eax, %ebx
    000000f0: 	callq	clock@PLT # Offset: 240
    000000f5: 	movq	0x60(%rsp), %rsi
    000000fa: 	movq	0x50(%rsp), %rcx
    000000ff: 	movq	%rax, start_time(%rip)
    00000106: 	leal	-0x1(%rbx), %eax
    00000109: 	leaq	(%rsi,%rax,8), %rax
    0000010d: 	movq	%rcx, 0x78(%rsp)
    00000112: 	movq	%rax, 0x70(%rsp)
    00000117: 	movq	%rcx, 0x68(%rsp)
.Ltmp6616:
    0000011c: 	movl	$0xc8, %edi
    00000121: 	callq	_Znwm@PLT # Offset: 289
    00000126: 	movq	$0x0, (%rax)
    0000012d: 	pxor	%xmm1, %xmm1
    00000131: 	xorl	%esi, %esi
    00000133: 	movq	%rax, %rdi
    00000136: 	movq	$0x0, 0x8(%rax)
    0000013e: 	movq	%rax, %rbp
    00000141: 	movups	%xmm1, 0x10(%rax)
    00000145: 	movups	%xmm1, 0x20(%rax)
    00000149: 	movups	%xmm1, 0x30(%rax)
    0000014d: 	movups	%xmm1, 0x40(%rax)
    00000151: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 337
    00000156: 	movq	$0x0, 0x50(%rbp)
    0000015e: 	pxor	%xmm1, %xmm1
    00000162: 	movl	$0x40, %edi
    00000167: 	movq	$0x8, 0x58(%rbp)
    0000016f: 	movups	%xmm1, 0x60(%rbp)
    00000173: 	movups	%xmm1, 0x70(%rbp)
    00000177: 	movups	%xmm1, 0x80(%rbp)
    0000017e: 	movups	%xmm1, 0x90(%rbp)
    00000185: 	callq	_Znwm@PLT # Offset: 389
    0000018a: 	movq	0x58(%rbp), %rdx
    0000018e: 	movq	%rax, 0x50(%rbp)
    00000192: 	movl	$0x200, %edi
    00000197: 	leaq	-0x4(,%rdx,4), %rdx
    0000019f: 	andq	$-0x8, %rdx
    000001a3: 	leaq	(%rax,%rdx), %rbx
    000001a7: 	callq	_Znwm@PLT # Offset: 423
    000001ac: 	movq	%rax, %xmm3
    000001b1: 	movq	%rax, (%rbx)
    000001b4: 	addq	$0x200, %rax
    000001ba: 	movdqu	0x10(%rbp), %xmm5
    000001bf: 	movdqu	0x20(%rbp), %xmm6
    000001c4: 	movq	%rax, %xmm4
    000001c9: 	movq	0xb0(%r15), %rax
    000001d0: 	movq	%rbx, %xmm7
    000001d5: 	movaps	%xmm5, 0x40(%rsp)
    000001da: 	punpcklqdq	%xmm7, %xmm4
    000001de: 	punpcklqdq	%xmm3, %xmm3
    000001e2: 	movdqu	0xa0(%r15), %xmm7
    000001eb: 	movss	0xc0(%r15), %xmm0
    000001f4: 	movhlps	%xmm6, %xmm5
    000001f7: 	movq	%rax, 0xb0(%rbp)
    000001fe: 	movq	0x48(%rbp), %rax
    00000202: 	movq	%xmm5, %r13
    00000207: 	movaps	%xmm3, 0x20(%rsp)
    0000020c: 	addq	$0x8, %r13
    00000210: 	movaps	%xmm4, 0x10(%rsp)
    00000215: 	leaq	0x8(%rax), %r12
    00000219: 	movups	%xmm3, 0x60(%rbp)
    0000021d: 	movq	$0x0, 0xb8(%rbp)
    00000228: 	movups	%xmm4, 0x70(%rbp)
    0000022c: 	movups	%xmm3, 0x80(%rbp)
    00000233: 	movups	%xmm4, 0x90(%rbp)
    0000023a: 	movups	%xmm7, 0xa0(%rbp)
    00000241: 	movss	%xmm0, 0xc0(%rbp)
    00000249: 	movaps	%xmm6, 0x30(%rsp)
    0000024e: 	cmpq	%r13, %r12
    00000251: 	jbe	.Ltmp6603 # Offset: 593
    00000253: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6604:
    00000258: 	movq	(%r13), %rdi
    0000025c: 	movl	$0x200, %esi
    00000261: 	addq	$0x8, %r13
    00000265: 	callq	_ZdlPvm@PLT # Offset: 613
    0000026a: 	cmpq	%r13, %r12
    0000026d: 	ja	.Ltmp6604 # Offset: 621
    0000026f: 	movdqu	0x60(%rbp), %xmm5
    00000274: 	movdqu	0x70(%rbp), %xmm6
    00000279: 	movq	0x98(%rbp), %rbx
    00000280: 	movaps	%xmm5, 0x20(%rsp)
    00000285: 	movaps	%xmm6, 0x10(%rsp)
.Ltmp6603:
    0000028a: 	movq	0x18(%rsp), %r12
    0000028f: 	movdqa	0x40(%rsp), %xmm7
    00000295: 	addq	$0x8, %rbx
    00000299: 	movdqa	0x30(%rsp), %xmm6
    0000029f: 	addq	$0x8, %r12
    000002a3: 	movups	%xmm7, 0x30(%rbp)
    000002a7: 	movups	%xmm6, 0x40(%rbp)
    000002ab: 	cmpq	%r12, %rbx
    000002ae: 	jbe	.Ltmp6605 # Offset: 686
.Ltmp6606:
    000002b0: 	movq	(%r12), %rdi
    000002b4: 	movl	$0x200, %esi
    000002b9: 	addq	$0x8, %r12
    000002bd: 	callq	_ZdlPvm@PLT # Offset: 701
    000002c2: 	cmpq	%r12, %rbx
    000002c5: 	ja	.Ltmp6606 # Offset: 709
.Ltmp6605:
    000002c7: 	movdqa	0x20(%rsp), %xmm7
    000002cd: 	movdqa	0x10(%rsp), %xmm5
    000002d3: 	movabsq	$0xfffffffffffffff, %rax
    000002dd: 	movq	0xb0(%rbp), %rdi
    000002e4: 	movups	%xmm7, 0x80(%rbp)
    000002eb: 	movups	%xmm5, 0x90(%rbp)
    000002f2: 	cmpq	%rax, %rdi
    000002f5: 	ja	.Ltmp6607 # Offset: 757
    000002fb: 	shlq	$0x3, %rdi
    000002ff: 	callq	_Znam@PLT # Offset: 767
    00000304: 	movq	0xb0(%rbp), %rdx
    0000030b: 	leaq	0x50(%rbp), %rcx
    0000030f: 	movq	%rax, 0xb8(%rbp)
    00000316: 	movq	%rcx, 0x30(%rsp)
    0000031b: 	movq	$0x0, 0x20(%rsp)
    00000324: 	testq	%rdx, %rdx
    00000327: 	je	.Ltmp6608 # Offset: 807
.Ltmp6615:
    0000032d: 	movq	0x20(%rsp), %rsi
    00000332: 	leaq	(,%rsi,8), %rcx
    0000033a: 	movq	%rcx, 0x10(%rsp)
    0000033f: 	movq	0xb8(%r15), %rcx
    00000346: 	movq	(%rcx,%rsi,8), %r14
    0000034a: 	movq	$0x0, (%rax,%rsi,8)
    00000352: 	testq	%r14, %r14
    00000355: 	je	.Ltmp6609 # Offset: 853
.Ltmp6614:
    0000035b: 	movq	0x48(%rbp), %r12
    0000035f: 	movq	0x30(%rbp), %rdi
    00000363: 	movq	0x38(%rbp), %rcx
    00000367: 	movq	%r12, %rax
    0000036a: 	subq	0x28(%rbp), %rax
    0000036e: 	movq	%rdi, %rdx
    00000371: 	sarq	$0x3, %rax
    00000375: 	cmpq	$0x1, %r12
    00000379: 	adcq	$-0x1, %rax
    0000037d: 	subq	%rcx, %rdx
    00000380: 	sarq	$0x3, %rdx
    00000384: 	shlq	$0x6, %rax
    00000388: 	addq	%rdx, %rax
    0000038b: 	movq	0x20(%rbp), %rdx
    0000038f: 	subq	0x10(%rbp), %rdx
    00000393: 	sarq	$0x3, %rdx
    00000397: 	addq	%rdx, %rax
    0000039a: 	je	.Ltmp6610 # Offset: 922
.Ltmp6640:
    000003a0: 	cmpq	%rcx, %rdi
    000003a3: 	je	.Ltmp6611 # Offset: 931
.Ltmp6635:
    000003a9: 	movq	-0x8(%rdi), %rbx
    000003ad: 	subq	$0x8, %rdi
    000003b1: 	movq	%rdi, 0x30(%rbp)
.Ltmp6636:
    000003b5: 	movq	0x60(%rbp), %rsi
    000003b9: 	movq	0x78(%rbp), %rcx
    000003bd: 	movq	%rsi, %rax
    000003c0: 	subq	0x68(%rbp), %rax
    000003c4: 	sarq	$0x5, %rax
    000003c8: 	addq	%rbx, %rax
    000003cb: 	js	.Ltmp6612 # Offset: 971
    000003d1: 	cmpq	$0xf, %rax
    000003d5: 	jg	.Ltmp6613 # Offset: 981
    000003db: 	movq	%rbx, %rdx
    000003de: 	shlq	$0x5, %rdx
    000003e2: 	addq	%rsi, %rdx
    000003e5: 	movq	%rbx, 0x18(%rdx)
.Ltmp6637:
    000003e9: 	movq	0xb8(%rbp), %rax
    000003f0: 	movq	0x10(%rsp), %rcx
    000003f5: 	movupd	(%r14), %xmm5
    000003fa: 	addq	%rax, %rcx
    000003fd: 	movq	(%rcx), %rsi
    00000400: 	movups	%xmm5, (%rdx)
    00000403: 	movq	%rsi, 0x10(%rdx)
    00000407: 	movq	%rdx, (%rcx)
    0000040a: 	movq	0x10(%r14), %r14
    0000040e: 	testq	%r14, %r14
    00000411: 	jne	.Ltmp6614 # Offset: 1041
    00000417: 	movq	0xb0(%rbp), %rdx
.Ltmp6609:
    0000041e: 	addq	$0x1, 0x20(%rsp)
    00000424: 	movq	0x20(%rsp), %rcx
    00000429: 	cmpq	%rdx, %rcx
    0000042c: 	jb	.Ltmp6615 # Offset: 1068
.Ltmp6608:
    00000432: 	movq	0x68(%rsp), %rax
    00000437: 	movq	%rbp, (%rax)
    0000043a: 	addq	$0x8, %rax
    0000043e: 	movq	%rax, 0x68(%rsp)
    00000443: 	cmpq	0x70(%rsp), %rax
    00000448: 	jne	.Ltmp6616 # Offset: 1096
    0000044e: 	callq	clock@PLT # Offset: 1102
    00000453: 	pxor	%xmm0, %xmm0
    00000457: 	movq	0x78(%rsp), %r12
    0000045c: 	movq	0x70(%rsp), %r13
    00000461: 	movq	%rax, end_time(%rip)
    00000468: 	subq	start_time(%rip), %rax
    0000046f: 	cvtsi2sd	%rax, %xmm0
    00000474: 	divsd	DATAat0x53788(%rip), %xmm0
    0000047c: 	addsd	0x88(%rsp), %xmm0
    00000485: 	movsd	%xmm0, 0x88(%rsp)
    0000048e: 	nop # Size: 2
.Ltmp6625:
    00000490: 	movq	(%r12), %rbp
    00000494: 	testq	%rbp, %rbp
    00000497: 	je	.Ltmp6617 # Offset: 1175
    0000049d: 	movq	0xb8(%rbp), %rdi
    000004a4: 	testq	%rdi, %rdi
    000004a7: 	je	.Ltmp6618 # Offset: 1191
    000004a9: 	callq	_ZdaPv@PLT # Offset: 1193
.Ltmp6618:
    000004ae: 	movq	0x50(%rbp), %rdi
    000004b2: 	testq	%rdi, %rdi
    000004b5: 	je	.Ltmp6619 # Offset: 1205
    000004b7: 	movq	0x98(%rbp), %rax
    000004be: 	movq	0x78(%rbp), %rbx
    000004c2: 	leaq	0x8(%rax), %r14
    000004c6: 	cmpq	%rbx, %r14
    000004c9: 	jbe	.Ltmp6620 # Offset: 1225
    000004cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6621:
    000004d0: 	movq	(%rbx), %rdi
    000004d3: 	movl	$0x200, %esi
    000004d8: 	addq	$0x8, %rbx
    000004dc: 	callq	_ZdlPvm@PLT # Offset: 1244
    000004e1: 	cmpq	%rbx, %r14
    000004e4: 	ja	.Ltmp6621 # Offset: 1252
    000004e6: 	movq	0x50(%rbp), %rdi
.Ltmp6620:
    000004ea: 	movq	0x58(%rbp), %rax
    000004ee: 	leaq	(,%rax,8), %rsi
    000004f6: 	callq	_ZdlPvm@PLT # Offset: 1270
.Ltmp6619:
    000004fb: 	movq	(%rbp), %rdi
    000004ff: 	testq	%rdi, %rdi
    00000502: 	je	.Ltmp6622 # Offset: 1282
    00000504: 	movq	0x48(%rbp), %rax
    00000508: 	movq	0x28(%rbp), %rbx
    0000050c: 	leaq	0x8(%rax), %r14
    00000510: 	cmpq	%rbx, %r14
    00000513: 	jbe	.Ltmp6623 # Offset: 1299
    00000515: 	nopl	(%rax) # Size: 3
.Ltmp6624:
    00000518: 	movq	(%rbx), %rdi
    0000051b: 	movl	$0x200, %esi
    00000520: 	addq	$0x8, %rbx
    00000524: 	callq	_ZdlPvm@PLT # Offset: 1316
    00000529: 	cmpq	%rbx, %r14
    0000052c: 	ja	.Ltmp6624 # Offset: 1324
    0000052e: 	movq	(%rbp), %rdi
.Ltmp6623:
    00000532: 	movq	0x8(%rbp), %rax
    00000536: 	leaq	(,%rax,8), %rsi
    0000053e: 	callq	_ZdlPvm@PLT # Offset: 1342
.Ltmp6622:
    00000543: 	movl	$0xc8, %esi
    00000548: 	movq	%rbp, %rdi
    0000054b: 	callq	_ZdlPvm@PLT # Offset: 1355
.Ltmp6617:
    00000550: 	movq	$0x0, (%r12)
    00000558: 	addq	$0x8, %r12
    0000055c: 	cmpq	%r13, %r12
    0000055f: 	jne	.Ltmp6625 # Offset: 1375
    00000565: 	movl	0x8(%rsp), %ecx
    00000569: 	movl	iterations(%rip), %eax
    0000056f: 	addl	%ecx, 0x58(%rsp)
    00000573: 	movl	0x58(%rsp), %ecx
    00000577: 	cmpl	%ecx, %eax
    00000579: 	jg	.Ltmp6626 # Offset: 1401
.Ltmp6648:
    0000057f: 	movq	0x80(%rsp), %rdi
    00000587: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1415
    0000058c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000593: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000059a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005a1: 	je	.Ltmp6627 # Offset: 1441
.Ltmp6649:
    000005a7: 	movsd	0x88(%rsp), %xmm0
    000005b0: 	movq	-0x20(%rax), %rdi
    000005b4: 	callq	_Z13record_resultdPKc # Offset: 1460
    000005b9: 	cmpq	$0x0, 0x50(%rsp)
    000005bf: 	je	.Ltmp6628 # Offset: 1471
    000005c5: 	movq	0xb8(%rsp), %rax
    000005cd: 	subq	%fs:0x28, %rax
    000005d6: 	jne	.Ltmp6629 # Offset: 1494
    000005dc: 	movq	0xb0(%rsp), %rsi
    000005e4: 	movq	0x50(%rsp), %rdi
    000005e9: 	addq	$0xc8, %rsp
    000005f0: 	popq	%rbx
    000005f1: 	popq	%rbp
    000005f2: 	subq	%rdi, %rsi
    000005f5: 	popq	%r12
    000005f7: 	popq	%r13
    000005f9: 	popq	%r14
    000005fb: 	popq	%r15
    000005fd: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1533
    00000602: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6610:
    00000608: 	movq	0x98(%rbp), %rsi
    0000060f: 	movq	0x78(%rbp), %rax
    00000613: 	movq	0x70(%rbp), %r8
    00000617: 	movq	0x80(%rbp), %rdx
    0000061e: 	movq	%rsi, %r13
    00000621: 	movq	0x60(%rbp), %r9
    00000625: 	subq	%rax, %r13
    00000628: 	sarq	$0x3, %r13
    0000062c: 	cmpq	$0x1, %rsi
    00000630: 	adcq	$-0x1, %r13
    00000634: 	subq	0x88(%rbp), %rdx
    0000063b: 	sarq	$0x5, %rdx
    0000063f: 	shlq	$0x4, %r13
    00000643: 	addq	%rdx, %r13
    00000646: 	movq	%r8, %rdx
    00000649: 	subq	%r9, %rdx
    0000064c: 	sarq	$0x5, %rdx
    00000650: 	addq	%rdx, %r13
    00000653: 	leaq	0x80(%r13), %rbx
    0000065a: 	cmpq	%rbx, %r13
    0000065d: 	jb	.Ltmp6630 # Offset: 1629
    00000663: 	movq	0x68(%rbp), %r10
    00000667: 	movq	%r9, %rdx
    0000066a: 	subq	%r10, %rdx
    0000066d: 	sarq	$0x5, %rdx
    00000671: 	addq	%rbx, %rdx
    00000674: 	js	.Ltmp6631 # Offset: 1652
    0000067a: 	cmpq	$0xf, %rdx
    0000067e: 	jle	.Ltmp6632 # Offset: 1662
    00000684: 	movq	%rdx, %r9
    00000687: 	sarq	$0x4, %r9
.Ltmp6646:
    0000068b: 	leaq	(%rax,%r9,8), %rax
    0000068f: 	shlq	$0x4, %r9
    00000693: 	movq	(%rax), %r10
    00000696: 	subq	%r9, %rdx
    00000699: 	shlq	$0x5, %rdx
    0000069d: 	leaq	(%r10,%rdx), %rbx
    000006a1: 	leaq	0x200(%r10), %r8
    000006a8: 	movq	%rbx, %xmm0
.Ltmp6647:
    000006ad: 	movq	%r10, %xmm6
    000006b2: 	movdqa	%xmm0, %xmm7
    000006b6: 	movq	%r8, %xmm5
    000006bb: 	punpcklqdq	%xmm6, %xmm7
    000006bf: 	movq	%rax, %xmm6
    000006c4: 	leaq	0x8(%rsi), %rbx
    000006c8: 	punpcklqdq	%xmm6, %xmm5
    000006cc: 	leaq	0x8(%rax), %r13
    000006d0: 	movaps	%xmm7, 0x40(%rsp)
    000006d5: 	movaps	%xmm5, 0x90(%rsp)
    000006dd: 	cmpq	%r13, %rbx
    000006e0: 	jbe	.Ltmp6633 # Offset: 1760
    000006e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6634:
    000006e8: 	movq	(%r13), %rdi
    000006ec: 	movl	$0x200, %esi
    000006f1: 	addq	$0x8, %r13
    000006f5: 	callq	_ZdlPvm@PLT # Offset: 1781
    000006fa: 	cmpq	%r13, %rbx
    000006fd: 	ja	.Ltmp6634 # Offset: 1789
    000006ff: 	movq	0x30(%rbp), %rdi
    00000703: 	movq	0x38(%rbp), %rcx
    00000707: 	movq	0x48(%rbp), %r12
.Ltmp6633:
    0000070b: 	movdqa	0x90(%rsp), %xmm7
    00000714: 	movdqa	0x40(%rsp), %xmm5
    0000071a: 	movups	%xmm7, 0x90(%rbp)
    00000721: 	movups	%xmm5, 0x80(%rbp)
    00000728: 	cmpq	%rcx, %rdi
    0000072b: 	jne	.Ltmp6635 # Offset: 1835
    00000731: 	nopl	(%rax) # Size: 7
.Ltmp6611:
    00000738: 	movq	-0x8(%r12), %rax
    0000073d: 	movl	$0x200, %esi
    00000742: 	movq	0x1f8(%rax), %rbx
    00000749: 	callq	_ZdlPvm@PLT # Offset: 1865
    0000074e: 	movq	0x48(%rbp), %rdx
    00000752: 	movq	-0x8(%rdx), %rax
    00000756: 	subq	$0x8, %rdx
    0000075a: 	movq	%rdx, %xmm7
    0000075f: 	leaq	0x1f8(%rax), %rcx
    00000766: 	movq	%rax, %xmm6
    0000076b: 	addq	$0x200, %rax
    00000771: 	movq	%rcx, %xmm0
    00000776: 	punpcklqdq	%xmm6, %xmm0
    0000077a: 	movups	%xmm0, 0x30(%rbp)
    0000077e: 	movq	%rax, %xmm0
    00000783: 	punpcklqdq	%xmm7, %xmm0
    00000787: 	movups	%xmm0, 0x40(%rbp)
    0000078b: 	jmp	.Ltmp6636 # Offset: 1931
.Ltmp6613:
    00000790: 	movq	%rax, %rsi
    00000793: 	andl	$0xf, %eax
    00000796: 	sarq	$0x4, %rsi
    0000079a: 	shlq	$0x5, %rax
    0000079e: 	movq	(%rcx,%rsi,8), %rdx
    000007a2: 	addq	%rax, %rdx
    000007a5: 	movq	%rbx, 0x18(%rdx)
    000007a9: 	jmp	.Ltmp6637 # Offset: 1961
    000007ae: 	nop # Size: 2
.Ltmp6612:
    000007b0: 	movq	%rax, %rsi
    000007b3: 	notq	%rsi
    000007b6: 	shrq	$0x4, %rsi
    000007ba: 	notq	%rsi
    000007bd: 	movq	%rsi, %rdx
    000007c0: 	shlq	$0x4, %rdx
    000007c4: 	subq	%rdx, %rax
    000007c7: 	movq	(%rcx,%rsi,8), %rdx
    000007cb: 	shlq	$0x5, %rax
    000007cf: 	addq	%rax, %rdx
    000007d2: 	movq	%rbx, 0x18(%rdx)
    000007d6: 	jmp	.Ltmp6637 # Offset: 2006
    000007db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6600:
    000007e0: 	movq	$0x3e8, 0x8(%rsp)
.Ltmp6601:
    000007e9: 	movq	$0x0, 0xb0(%rsp)
    000007f5: 	pxor	%xmm0, %xmm0
    000007f9: 	movaps	%xmm0, 0xa0(%rsp)
    00000801: 	jmp	.Ltmp6638 # Offset: 2049
.Ltmp6630:
    00000806: 	movq	0x30(%rsp), %rdi
    0000080b: 	movl	$0x80, %esi
    00000810: 	callq	"_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2064
    00000815: 	movq	0x30(%rbp), %rdi
    00000819: 	movq	0x38(%rbp), %rcx
    0000081d: 	movq	0x48(%rbp), %r12
    00000821: 	movq	0x40(%rbp), %rdx
    00000825: 	jmp	.Ltmp6639 # Offset: 2085
    00000827: 	nopw	(%rax,%rax) # Size: 9
.Ltmp6641:
    00000830: 	movq	%rbx, (%rdi)
    00000833: 	addq	$0x8, %rdi
.Ltmp6644:
    00000837: 	movq	%rdi, 0x30(%rbp)
    0000083b: 	cmpq	%rbx, %r13
    0000083e: 	je	.Ltmp6640 # Offset: 2110
.Ltmp6639:
    00000844: 	leaq	-0x8(%rdx), %rax
    00000848: 	subq	$0x1, %rbx
    0000084c: 	cmpq	%rax, %rdi
    0000084f: 	jne	.Ltmp6641 # Offset: 2127
    00000851: 	movq	%r12, %rax
    00000854: 	subq	0x28(%rbp), %rax
    00000858: 	movq	0x20(%rbp), %rdx
    0000085c: 	sarq	$0x3, %rax
    00000860: 	cmpq	$0x1, %r12
    00000864: 	adcq	$-0x1, %rax
    00000868: 	subq	%rcx, %rdi
    0000086b: 	subq	0x10(%rbp), %rdx
    0000086f: 	movabsq	$0xfffffffffffffff, %rcx
    00000879: 	shlq	$0x6, %rax
    0000087d: 	sarq	$0x3, %rdi
    00000881: 	addq	%rdi, %rax
    00000884: 	sarq	$0x3, %rdx
    00000888: 	addq	%rdx, %rax
    0000088b: 	cmpq	%rcx, %rax
    0000088e: 	je	.Ltmp6642 # Offset: 2190
    00000894: 	movq	0x8(%rbp), %rax
    00000898: 	movq	%r12, %rdx
    0000089b: 	subq	(%rbp), %rdx
    0000089f: 	sarq	$0x3, %rdx
    000008a3: 	subq	%rdx, %rax
    000008a6: 	cmpq	$0x1, %rax
    000008aa: 	jbe	.Ltmp6643 # Offset: 2218
.Ltmp6645:
    000008ac: 	movl	$0x200, %edi
    000008b1: 	callq	_Znwm@PLT # Offset: 2225
    000008b6: 	movq	%rax, 0x8(%r12)
    000008bb: 	movq	0x30(%rbp), %rax
    000008bf: 	movq	%rbx, (%rax)
    000008c2: 	movq	0x48(%rbp), %rax
    000008c6: 	movq	0x8(%rax), %rdi
    000008ca: 	leaq	0x8(%rax), %r12
    000008ce: 	movq	%r12, 0x48(%rbp)
    000008d2: 	leaq	0x200(%rdi), %rdx
    000008d9: 	movq	%rdi, %xmm0
    000008de: 	movq	%rdi, %rcx
    000008e1: 	movq	%rdx, %xmm2
    000008e6: 	punpcklqdq	%xmm2, %xmm0
    000008ea: 	movups	%xmm0, 0x38(%rbp)
    000008ee: 	jmp	.Ltmp6644 # Offset: 2286
    000008f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6643:
    000008f8: 	xorl	%edx, %edx
    000008fa: 	movl	$0x1, %esi
    000008ff: 	movq	%rbp, %rdi
    00000902: 	callq	_ZNSt5dequeImSaImEE17_M_reallocate_mapEmb # Offset: 2306
    00000907: 	movq	0x48(%rbp), %r12
    0000090b: 	jmp	.Ltmp6645 # Offset: 2315
.Ltmp6628:
    0000090d: 	movq	0xb8(%rsp), %rax
    00000915: 	subq	%fs:0x28, %rax
    0000091e: 	jne	.Ltmp6629 # Offset: 2334
    00000920: 	addq	$0xc8, %rsp
    00000927: 	popq	%rbx
    00000928: 	popq	%rbp
    00000929: 	popq	%r12
    0000092b: 	popq	%r13
    0000092d: 	popq	%r14
    0000092f: 	popq	%r15
    00000931: 	retq # Offset: 2353
.Ltmp6631:
    00000932: 	movq	%rdx, %r9
    00000935: 	notq	%r9
    00000938: 	shrq	$0x4, %r9
    0000093c: 	notq	%r9
    0000093f: 	jmp	.Ltmp6646 # Offset: 2367
.Ltmp6632:
    00000944: 	shlq	$0x5, %rbx
    00000948: 	leaq	(%r9,%rbx), %rbx
    0000094c: 	movq	%rbx, %xmm0
    00000951: 	jmp	.Ltmp6647 # Offset: 2385
.Ltmp6602:
    00000956: 	pxor	%xmm6, %xmm6
    0000095a: 	movsd	%xmm6, 0x88(%rsp)
    00000963: 	jmp	.Ltmp6648 # Offset: 2403
.Ltmp6627:
    00000968: 	movq	-0x8(%rdx), %rax
    0000096c: 	addq	$0x200, %rax
    00000972: 	jmp	.Ltmp6649 # Offset: 2418
.Ltmp6642:
    00000977: 	leaq	DATAat0x52330(%rip), %rdi
    0000097e: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2430
.Ltmp6629:
    00000983: 	callq	__stack_chk_fail@PLT # Offset: 2435
    00000988: 	endbr64
    0000098c: 	movq	%rax, %rbx
    0000098f: 	jmp	.Ltmp6650 # Offset: 2447
    00000991: 	endbr64
    00000995: 	movq	%rax, %rbx
    00000998: 	jmp	.Ltmp6651 # Offset: 2456
.Ltmp6607:
    0000099a: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 2458
    0000099f: 	endbr64
    000009a3: 	movq	%rax, %rdi
    000009a6: 	jmp	.Ltmp6652 # Offset: 2470
.Ltmp6656:
    000009a8: 	callq	__cxa_end_catch@PLT # Offset: 2472
.Ltmp6651:
    000009ad: 	movq	%rbp, %rdi
    000009b0: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2480
.Ltmp6650:
    000009b5: 	movq	%rbp, %rdi
    000009b8: 	movl	$0xc8, %esi
    000009bd: 	movq	%rbx, %rbp
    000009c0: 	callq	_ZdlPvm@PLT # Offset: 2496
.Ltmp6655:
    000009c5: 	movq	0xa0(%rsp), %rdi
    000009cd: 	movq	0xb0(%rsp), %rsi
    000009d5: 	subq	%rdi, %rsi
    000009d8: 	testq	%rdi, %rdi
    000009db: 	je	.Ltmp6653 # Offset: 2523
    000009dd: 	callq	_ZdlPvm@PLT # Offset: 2525
.Ltmp6653:
    000009e2: 	movq	%rbp, %rdi
    000009e5: 	callq	_Unwind_Resume@PLT # Offset: 2533
.Ltmp6652:
    000009ea: 	callq	__cxa_begin_catch@PLT # Offset: 2538
    000009ef: 	callq	__cxa_rethrow@PLT # Offset: 2543
    000009f4: 	endbr64
    000009f8: 	movq	%rax, %r12
    000009fb: 	jmp	.Ltmp6654 # Offset: 2555
    000009fd: 	endbr64
    00000a01: 	movq	%rax, %rbp
    00000a04: 	jmp	.Ltmp6655 # Offset: 2564
.Ltmp6654:
    00000a06: 	callq	__cxa_end_catch@PLT # Offset: 2566
    00000a0b: 	movq	%r12, %rdi
    00000a0e: 	callq	__cxa_begin_catch@PLT # Offset: 2574
    00000a13: 	movq	0x58(%rbp), %rax
    00000a17: 	movq	0x50(%rbp), %rdi
    00000a1b: 	leaq	(,%rax,8), %rsi
    00000a23: 	callq	_ZdlPvm@PLT # Offset: 2595
    00000a28: 	movq	$0x0, 0x50(%rbp)
    00000a30: 	movq	$0x0, 0x58(%rbp)
    00000a38: 	callq	__cxa_rethrow@PLT # Offset: 2616
    00000a3d: 	endbr64
    00000a41: 	movq	%rax, %rbx
    00000a44: 	jmp	.Ltmp6656 # Offset: 2628
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_duplicate_coreI13PooledHashMapIddEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13testDuplicateIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 341
  State       : disassembled
  Address     : 0x45ff0
  Size        : 0x202a
  MaxSize     : 0x2030
  Offset      : 0x45ff0
  Section     : .text
  Orc Section : .local.text._Z13testDuplicateIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0340:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	leaq	(,%r15,8), %r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x208, %rsp
    00000023: 	movq	%rdi, 0x10(%rsp)
    00000028: 	leaq	0x1d0(%rsp), %rbx
    00000030: 	movq	%rsi, 0x80(%rsp)
    00000038: 	movq	%rbx, %rdi
    0000003b: 	movq	%rdx, %rsi
    0000003e: 	movq	%rdx, 0x30(%rsp)
    00000043: 	leaq	DATAat0x52d2c(%rip), %rdx
    0000004a: 	movl	%r8d, 0x8c(%rsp)
    00000052: 	movq	%fs:0x28, %rax
    0000005b: 	movq	%rax, 0x1f8(%rsp)
    00000063: 	xorl	%eax, %eax
    00000065: 	movl	%ecx, iterations(%rip)
    0000006b: 	movq	%rbx, 0x20(%rsp)
    00000070: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 112
    00000075: 	leaq	(%r14,%r12), %rax
    00000079: 	movq	%r14, %rdi
    0000007c: 	movq	%rbx, %rdx
    0000007f: 	movq	%rax, %rsi
    00000082: 	movq	%rax, 0x8(%rsp)
    00000087: 	callq	_Z20test_duplicate_arrayIdEvPKT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 135
    0000008c: 	movq	0x1d0(%rsp), %rdi
    00000094: 	leaq	0x1e0(%rsp), %rax
    0000009c: 	movq	%rax, 0x28(%rsp)
    000000a1: 	cmpq	%rax, %rdi
    000000a4: 	je	.Ltmp6657 # Offset: 164
    000000a6: 	movq	0x1e0(%rsp), %rax
    000000ae: 	leaq	0x1(%rax), %rsi
    000000b2: 	callq	_ZdlPvm@PLT # Offset: 178
.Ltmp6657:
    000000b7: 	movq	0x20(%rsp), %rbx
    000000bc: 	movq	0x30(%rsp), %rsi
    000000c1: 	leaq	DATAat0x52d3d(%rip), %rdx
    000000c8: 	movq	%rbx, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	movq	0x8(%rsp), %rsi
    000000d5: 	movq	0x10(%rsp), %rdi
    000000da: 	movq	%rbx, %rdx
    000000dd: 	callq	_Z15test_duplicate1IdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 221
    000000e2: 	movq	0x1d0(%rsp), %rdi
    000000ea: 	cmpq	0x28(%rsp), %rdi
    000000ef: 	je	.Ltmp6658 # Offset: 239
    000000f1: 	movq	0x1e0(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp6658:
    00000102: 	movq	0x20(%rsp), %rbx
    00000107: 	movq	0x30(%rsp), %rsi
    0000010c: 	leaq	DATAat0x52d54(%rip), %rdx
    00000113: 	movq	%rbx, %rdi
    00000116: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 278
    0000011b: 	movq	0x8(%rsp), %rsi
    00000120: 	movq	0x10(%rsp), %rdi
    00000125: 	movq	%rbx, %rdx
    00000128: 	callq	_Z15test_duplicate1IdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 296
    0000012d: 	movq	0x1d0(%rsp), %rdi
    00000135: 	cmpq	0x28(%rsp), %rdi
    0000013a: 	je	.Ltmp6659 # Offset: 314
    0000013c: 	movq	0x1e0(%rsp), %rax
    00000144: 	leaq	0x1(%rax), %rsi
    00000148: 	callq	_ZdlPvm@PLT # Offset: 328
.Ltmp6659:
    0000014d: 	movq	0x30(%rsp), %rsi
    00000152: 	movq	0x20(%rsp), %rdi
    00000157: 	leaq	DATAat0x52d6a(%rip), %rdx
    0000015e: 	leaq	0xc0(%rsp), %rbp
    00000166: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 358
    0000016b: 	movq	%r12, %rax
    0000016e: 	movq	%rbp, %rdi
    00000171: 	movq	$0x0, 0xc0(%rsp)
    0000017d: 	sarq	$0x3, %rax
    00000181: 	movq	%rax, %rsi
    00000184: 	movq	%rax, 0x38(%rsp)
    00000189: 	movq	%rax, %rbx
    0000018c: 	callq	_ZNSt12forward_listIdSaIdEE6resizeEm # Offset: 396
    00000191: 	movq	0xc0(%rsp), %rdx
    00000199: 	movq	0x10(%rsp), %rax
    0000019e: 	testq	%r12, %r12
    000001a1: 	jle	.Ltmp6660 # Offset: 417
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6661:
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	addq	$0x8, %rax
    000001b0: 	movsd	%xmm0, 0x8(%rdx)
    000001b5: 	movq	(%rdx), %rdx
    000001b8: 	subq	$0x1, %rbx
    000001bc: 	jne	.Ltmp6661 # Offset: 444
.Ltmp6660:
    000001be: 	movq	0x20(%rsp), %rdx
    000001c3: 	movq	0x38(%rsp), %rsi
    000001c8: 	movq	%rbp, %rdi
    000001cb: 	callq	_Z19test_duplicate_coreISt12forward_listIdSaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 459
    000001d0: 	movq	0xc0(%rsp), %rbx
    000001d8: 	testq	%rbx, %rbx
    000001db: 	je	.Ltmp6662 # Offset: 475
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp6663:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	movq	(%rbx), %rbx
    000001e6: 	movl	$0x10, %esi
    000001eb: 	callq	_ZdlPvm@PLT # Offset: 491
    000001f0: 	testq	%rbx, %rbx
    000001f3: 	jne	.Ltmp6663 # Offset: 499
.Ltmp6662:
    000001f5: 	movq	0x1d0(%rsp), %rdi
    000001fd: 	cmpq	0x28(%rsp), %rdi
    00000202: 	je	.Ltmp6664 # Offset: 514
    00000204: 	movq	0x1e0(%rsp), %rax
    0000020c: 	leaq	0x1(%rax), %rsi
    00000210: 	callq	_ZdlPvm@PLT # Offset: 528
.Ltmp6664:
    00000215: 	movq	0x20(%rsp), %rbx
    0000021a: 	movq	0x30(%rsp), %rsi
    0000021f: 	leaq	DATAat0x52d87(%rip), %rdx
    00000226: 	movq	%rbx, %rdi
    00000229: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 553
    0000022e: 	movq	0x8(%rsp), %rsi
    00000233: 	movq	0x10(%rsp), %rdi
    00000238: 	movq	%rbx, %rdx
    0000023b: 	callq	_Z15test_duplicate1IdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 571
    00000240: 	movq	0x1d0(%rsp), %rdi
    00000248: 	cmpq	0x28(%rsp), %rdi
    0000024d: 	je	.Ltmp6665 # Offset: 589
    0000024f: 	movq	0x1e0(%rsp), %rax
    00000257: 	leaq	0x1(%rax), %rsi
    0000025b: 	callq	_ZdlPvm@PLT # Offset: 603
.Ltmp6665:
    00000260: 	movq	0x30(%rsp), %rsi
    00000265: 	movq	0x20(%rsp), %rdi
    0000026a: 	leaq	DATAat0x52d9c(%rip), %rdx
    00000271: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 625
    00000276: 	pxor	%xmm0, %xmm0
    0000027a: 	movq	0x10(%rsp), %rcx
    0000027f: 	movq	$0x0, 0xc0(%rsp)
    0000028b: 	movups	%xmm0, 0xc8(%rsp)
    00000293: 	cmpq	%rcx, 0x8(%rsp)
    00000298: 	je	.Ltmp6666 # Offset: 664
    0000029e: 	movq	%rcx, %rbx
    000002a1: 	movl	$0x1, %r12d
    000002a7: 	xorl	%r13d, %r13d
    000002aa: 	xorl	%r14d, %r14d
    000002ad: 	jmp	.Ltmp6667 # Offset: 685
    000002af: 	nop # Size: 1
.Ltmp6669:
    000002b0: 	movl	%r12d, 0xc4(%rsp)
    000002b8: 	addl	$0x1, %r12d
    000002bc: 	cmpq	%rbx, 0x8(%rsp)
    000002c1: 	je	.Ltmp6666 # Offset: 705
.Ltmp6670:
    000002c3: 	movq	%rax, %r13
.Ltmp6667:
    000002c6: 	movl	$0x10, %edi
    000002cb: 	addq	$0x8, %rbx
    000002cf: 	callq	_Znwm@PLT # Offset: 719
    000002d4: 	movsd	-0x8(%rbx), %xmm0
    000002d9: 	movq	$0x0, 0x8(%rax)
    000002e1: 	movsd	%xmm0, (%rax)
    000002e5: 	testq	%r13, %r13
    000002e8: 	je	.Ltmp6668 # Offset: 744
    000002ea: 	movq	%rax, 0x8(%r13)
.Ltmp6668:
    000002ee: 	movq	%rax, 0xd0(%rsp)
    000002f6: 	testq	%r14, %r14
    000002f9: 	jne	.Ltmp6669 # Offset: 761
    000002fb: 	movl	%r12d, 0xc4(%rsp)
    00000303: 	addl	$0x1, %r12d
    00000307: 	movq	%rax, 0xc8(%rsp)
    0000030f: 	cmpq	%rbx, 0x8(%rsp)
    00000314: 	je	.Ltmp6666 # Offset: 788
    00000316: 	movq	%rax, %r14
    00000319: 	jmp	.Ltmp6670 # Offset: 793
.Ltmp6666:
    0000031b: 	movq	0x20(%rsp), %rdx
    00000320: 	movq	0x38(%rsp), %rsi
    00000325: 	movq	%rbp, %rdi
    00000328: 	callq	_Z19test_duplicate_coreI14SingleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 808
    0000032d: 	movq	0xc8(%rsp), %rbx
    00000335: 	testq	%rbx, %rbx
    00000338: 	je	.Ltmp6671 # Offset: 824
    0000033a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6672:
    00000340: 	movq	%rbx, %rdi
    00000343: 	movq	0x8(%rbx), %rbx
    00000347: 	movl	$0x10, %esi
    0000034c: 	callq	_ZdlPvm@PLT # Offset: 844
    00000351: 	testq	%rbx, %rbx
    00000354: 	jne	.Ltmp6672 # Offset: 852
.Ltmp6671:
    00000356: 	movq	0x1d0(%rsp), %rdi
    0000035e: 	cmpq	0x28(%rsp), %rdi
    00000363: 	je	.Ltmp6673 # Offset: 867
    00000365: 	movq	0x1e0(%rsp), %rax
    0000036d: 	leaq	0x1(%rax), %rsi
    00000371: 	callq	_ZdlPvm@PLT # Offset: 881
.Ltmp6673:
    00000376: 	movq	0x20(%rsp), %rdi
    0000037b: 	movq	0x30(%rsp), %rsi
    00000380: 	leaq	DATAat0x52ea8(%rip), %rdx
    00000387: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 903
    0000038c: 	movq	%rbp, %rdi
    0000038f: 	callq	_ZN27SingleLinkListPoolAllocatorIdEC2Ev # Offset: 911
    00000394: 	pxor	%xmm0, %xmm0
    00000398: 	movq	0x10(%rsp), %rcx
    0000039d: 	movl	$0x0, 0x160(%rsp)
    000003a8: 	movups	%xmm0, 0x168(%rsp)
    000003b0: 	cmpq	%rcx, 0x8(%rsp)
    000003b5: 	je	.Ltmp6674 # Offset: 949
    000003bb: 	movq	0x138(%rsp), %rax
    000003c3: 	movq	0x120(%rsp), %r11
    000003cb: 	movq	%rcx, %r14
    000003ce: 	xorl	%ecx, %ecx
    000003d0: 	xorl	%r10d, %r10d
    000003d3: 	leaq	0xb0(%rsp), %r12
    000003db: 	movq	%rax, 0x18(%rsp)
    000003e0: 	leaq	0x110(%rsp), %rax
    000003e8: 	movq	%rax, 0x70(%rsp)
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp6681:
    000003f0: 	movq	0x108(%rsp), %r8
    000003f8: 	movq	0xf0(%rsp), %r15
    00000400: 	addq	$0x8, %r14
    00000404: 	movq	0xf8(%rsp), %r9
    0000040c: 	movq	%r8, %rax
    0000040f: 	subq	0xe8(%rsp), %rax
    00000417: 	movq	%r15, %rdx
    0000041a: 	sarq	$0x3, %rax
    0000041e: 	cmpq	$0x1, %r8
    00000422: 	adcq	$-0x1, %rax
    00000426: 	subq	%r9, %rdx
    00000429: 	sarq	$0x3, %rdx
    0000042d: 	shlq	$0x6, %rax
    00000431: 	addq	%rdx, %rax
    00000434: 	movq	0xe0(%rsp), %rdx
    0000043c: 	subq	0xd0(%rsp), %rdx
    00000444: 	sarq	$0x3, %rdx
    00000448: 	addq	%rdx, %rax
    0000044b: 	je	.Ltmp6675 # Offset: 1099
    00000451: 	movabsq	$-0x5555555555555555, %rax
    0000045b: 	movq	%r11, %r13
    0000045e: 	movq	%rcx, %rbx
    00000461: 	subq	0x128(%rsp), %r13
    00000469: 	sarq	$0x3, %r13
    0000046d: 	imulq	%rax, %r13
.Ltmp6735:
    00000471: 	cmpq	%r9, %r15
    00000474: 	je	.Ltmp6676 # Offset: 1140
.Ltmp6694:
    0000047a: 	movq	-0x8(%r15), %r9
    0000047e: 	subq	$0x8, %r15
    00000482: 	movq	%r15, 0xf0(%rsp)
    0000048a: 	addq	%r9, %r13
    0000048d: 	js	.Ltmp6677 # Offset: 1165
.Ltmp6695:
    00000493: 	cmpq	$0x14, %r13
    00000497: 	jg	.Ltmp6678 # Offset: 1175
    0000049d: 	leaq	(%r9,%r9,2), %rax
    000004a1: 	leaq	(%r11,%rax,8), %rcx
    000004a5: 	movq	%r9, 0x10(%rcx)
.Ltmp6688:
    000004a9: 	movsd	-0x8(%r14), %xmm0
    000004af: 	movq	$0x0, 0x8(%rcx)
    000004b7: 	movsd	%xmm0, (%rcx)
    000004bb: 	testq	%rbx, %rbx
    000004be: 	je	.Ltmp6679 # Offset: 1214
    000004c0: 	movq	%rcx, 0x8(%rbx)
.Ltmp6679:
    000004c4: 	cmpq	$0x0, 0x168(%rsp)
    000004cd: 	movq	%rcx, 0x170(%rsp)
    000004d5: 	je	.Ltmp6680 # Offset: 1237
    000004db: 	addl	$0x1, %r10d
    000004df: 	movl	%r10d, 0x160(%rsp)
    000004e7: 	cmpq	%r14, 0x8(%rsp)
    000004ec: 	jne	.Ltmp6681 # Offset: 1260
.Ltmp6696:
    000004f2: 	movq	0x20(%rsp), %rdx
    000004f7: 	movq	0x38(%rsp), %rsi
    000004fc: 	movq	%rbp, %rdi
    000004ff: 	callq	_Z19test_duplicate_coreI20PooledSingleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1279
    00000504: 	movq	0x70(%rsp), %rdi
    00000509: 	callq	_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev # Offset: 1289
    0000050e: 	movq	%rbp, %rdi
    00000511: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 1297
    00000516: 	movq	0x1d0(%rsp), %rdi
    0000051e: 	cmpq	0x28(%rsp), %rdi
    00000523: 	je	.Ltmp6682 # Offset: 1315
    00000525: 	movq	0x1e0(%rsp), %rax
    0000052d: 	leaq	0x1(%rax), %rsi
    00000531: 	callq	_ZdlPvm@PLT # Offset: 1329
.Ltmp6682:
    00000536: 	movq	0x30(%rsp), %rsi
    0000053b: 	movq	0x20(%rsp), %rdi
    00000540: 	leaq	DATAat0x52db6(%rip), %rdx
    00000547: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1351
    0000054c: 	pxor	%xmm0, %xmm0
    00000550: 	movq	0x10(%rsp), %rcx
    00000555: 	movq	$0x0, 0xc8(%rsp)
    00000561: 	movaps	%xmm0, 0xd0(%rsp)
    00000569: 	cmpq	%rcx, 0x8(%rsp)
    0000056e: 	je	.Ltmp6683 # Offset: 1390
    00000574: 	movq	%rcx, %rbx
    00000577: 	movl	$0x1, %r13d
    0000057d: 	xorl	%r12d, %r12d
    00000580: 	xorl	%r14d, %r14d
    00000583: 	jmp	.Ltmp6684 # Offset: 1411
    00000585: 	nopl	(%rax) # Size: 3
.Ltmp6686:
    00000588: 	movq	%r13, 0xc8(%rsp)
    00000590: 	addq	$0x1, %r13
    00000594: 	cmpq	%rbx, 0x8(%rsp)
    00000599: 	je	.Ltmp6683 # Offset: 1433
.Ltmp6687:
    0000059f: 	movq	%rax, %r12
.Ltmp6684:
    000005a2: 	movl	$0x18, %edi
    000005a7: 	addq	$0x8, %rbx
    000005ab: 	callq	_Znwm@PLT # Offset: 1451
    000005b0: 	movsd	-0x8(%rbx), %xmm0
    000005b5: 	movq	$0x0, 0x8(%rax)
    000005bd: 	movq	%r12, 0x10(%rax)
    000005c1: 	movsd	%xmm0, (%rax)
    000005c5: 	testq	%r12, %r12
    000005c8: 	je	.Ltmp6685 # Offset: 1480
    000005ca: 	movq	%rax, 0x8(%r12)
.Ltmp6685:
    000005cf: 	movq	%rax, 0xd8(%rsp)
    000005d7: 	testq	%r14, %r14
    000005da: 	jne	.Ltmp6686 # Offset: 1498
    000005dc: 	movq	%r13, 0xc8(%rsp)
    000005e4: 	addq	$0x1, %r13
    000005e8: 	movq	%rax, 0xd0(%rsp)
    000005f0: 	cmpq	%rbx, 0x8(%rsp)
    000005f5: 	je	.Ltmp6683 # Offset: 1525
    000005fb: 	movq	%rax, %r14
    000005fe: 	jmp	.Ltmp6687 # Offset: 1534
.Ltmp6678:
    00000600: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    0000060a: 	movq	%r13, %rax
    0000060d: 	imulq	%rdx
    00000610: 	movq	%r13, %rax
    00000613: 	sarq	$0x3f, %rax
    00000617: 	addq	%r13, %rdx
    0000061a: 	sarq	$0x4, %rdx
    0000061e: 	subq	%rax, %rdx
    00000621: 	leaq	(%rdx,%rdx,4), %rax
    00000625: 	leaq	(%rdx,%rax,4), %rax
    00000629: 	subq	%rax, %r13
    0000062c: 	movq	0x18(%rsp), %rax
    00000631: 	leaq	(%r13,%r13,2), %rcx
    00000636: 	movq	(%rax,%rdx,8), %rax
    0000063a: 	leaq	(%rax,%rcx,8), %rcx
    0000063e: 	movq	%r9, 0x10(%rcx)
    00000642: 	jmp	.Ltmp6688 # Offset: 1602
.Ltmp6675:
    00000647: 	movq	0x158(%rsp), %rsi
    0000064f: 	movq	0x140(%rsp), %r13
    00000657: 	movq	0x130(%rsp), %rax
    0000065f: 	movq	%rsi, %rdx
    00000662: 	subq	0x18(%rsp), %rdx
    00000667: 	sarq	$0x3, %rdx
    0000066b: 	cmpq	$0x1, %rsi
    0000066f: 	adcq	$-0x1, %rdx
    00000673: 	subq	0x148(%rsp), %r13
    0000067b: 	leaq	(%rdx,%rdx,4), %rdi
    0000067f: 	sarq	$0x3, %r13
    00000683: 	leaq	(%rdx,%rdi,4), %rdx
    00000687: 	movabsq	$-0x5555555555555555, %rdi
    00000691: 	imulq	%rdi, %r13
    00000695: 	addq	%rdx, %r13
    00000698: 	movq	%rax, %rdx
    0000069b: 	subq	%r11, %rdx
    0000069e: 	sarq	$0x3, %rdx
    000006a2: 	imulq	%rdi, %rdx
    000006a6: 	addq	%rdx, %r13
    000006a9: 	leaq	0xaa(%r13), %rbx
    000006b0: 	cmpq	%rbx, %r13
    000006b3: 	jb	.Ltmp6689 # Offset: 1715
    000006b9: 	movq	0x128(%rsp), %rdi
    000006c1: 	movq	%r11, %r13
    000006c4: 	movabsq	$-0x5555555555555555, %rdx
    000006ce: 	subq	%rdi, %r13
    000006d1: 	sarq	$0x3, %r13
    000006d5: 	imulq	%rdx, %r13
    000006d9: 	movq	%rbx, %rdx
    000006dc: 	addq	%r13, %rdx
    000006df: 	movq	%rdx, 0x40(%rsp)
    000006e4: 	js	.Ltmp6690 # Offset: 1764
    000006ea: 	cmpq	$0x14, %rdx
    000006ee: 	jle	.Ltmp6691 # Offset: 1774
    000006f4: 	movq	%rdx, %rax
    000006f7: 	movabsq	$-0x3cf3cf3cf3cf3cf3, %rdx
    00000701: 	imulq	%rdx
    00000704: 	movq	0x40(%rsp), %rax
    00000709: 	addq	%rax, %rdx
    0000070c: 	sarq	$0x3f, %rax
    00000710: 	sarq	$0x4, %rdx
    00000714: 	subq	%rax, %rdx
.Ltmp6793:
    00000717: 	movq	0x18(%rsp), %rax
    0000071c: 	leaq	(%rdx,%rdx,4), %rbx
    00000720: 	leaq	(%rdx,%rbx,4), %rbx
    00000724: 	leaq	(%rax,%rdx,8), %rax
    00000728: 	movq	0x40(%rsp), %rdx
    0000072d: 	movq	(%rax), %rdi
    00000730: 	movq	%rax, 0x50(%rsp)
    00000735: 	subq	%rbx, %rdx
    00000738: 	leaq	(%rdx,%rdx,2), %rdx
    0000073c: 	leaq	0x1f8(%rdi), %rax
    00000743: 	leaq	(%rdi,%rdx,8), %rdx
.Ltmp6796:
    00000747: 	movq	%rdi, %xmm7
    0000074c: 	movq	%rdx, %xmm5
    00000751: 	movq	%rax, %xmm6
    00000756: 	punpcklqdq	%xmm7, %xmm5
    0000075a: 	movq	0x50(%rsp), %xmm7
    00000760: 	leaq	0x8(%rsi), %rax
    00000764: 	movaps	%xmm5, 0x60(%rsp)
    00000769: 	movq	%xmm7, %rbx
    0000076e: 	punpcklqdq	%xmm7, %xmm6
    00000772: 	addq	$0x8, %rbx
    00000776: 	movaps	%xmm6, 0x40(%rsp)
    0000077b: 	cmpq	%rbx, %rax
    0000077e: 	jbe	.Ltmp6692 # Offset: 1918
    00000780: 	movl	%r10d, 0x50(%rsp)
    00000785: 	movq	%r8, 0x78(%rsp)
    0000078a: 	movq	%r9, 0x90(%rsp)
    00000792: 	movq	%r11, 0x98(%rsp)
    0000079a: 	movq	%rcx, 0xa0(%rsp)
    000007a2: 	movq	%rbp, 0xa8(%rsp)
    000007aa: 	movq	%rbx, %rbp
    000007ad: 	movq	%rax, %rbx
.Ltmp6693:
    000007b0: 	movq	(%rbp), %rdi
    000007b4: 	movl	$0x1f8, %esi
    000007b9: 	addq	$0x8, %rbp
    000007bd: 	callq	_ZdlPvm@PLT # Offset: 1981
    000007c2: 	cmpq	%rbp, %rbx
    000007c5: 	ja	.Ltmp6693 # Offset: 1989
    000007c7: 	movl	0x50(%rsp), %r10d
    000007cc: 	movq	0x78(%rsp), %r8
    000007d1: 	movq	0x90(%rsp), %r9
    000007d9: 	movq	0x98(%rsp), %r11
    000007e1: 	movq	0xa0(%rsp), %rcx
    000007e9: 	movq	0xa8(%rsp), %rbp
.Ltmp6692:
    000007f1: 	movdqa	0x60(%rsp), %xmm3
    000007f7: 	movdqa	0x40(%rsp), %xmm4
    000007fd: 	movq	%rcx, %rbx
    00000800: 	movaps	%xmm3, 0x140(%rsp)
    00000808: 	movaps	%xmm4, 0x150(%rsp)
    00000810: 	cmpq	%r9, %r15
    00000813: 	jne	.Ltmp6694 # Offset: 2067
.Ltmp6676:
    00000819: 	movq	-0x8(%r8), %rax
    0000081d: 	movl	$0x200, %esi
    00000822: 	movq	%r15, %rdi
    00000825: 	movq	%r11, 0x78(%rsp)
    0000082a: 	movl	%r10d, 0x60(%rsp)
    0000082f: 	movq	0x1f8(%rax), %r9
    00000836: 	movq	%r8, 0x50(%rsp)
    0000083b: 	movq	%r9, 0x40(%rsp)
    00000840: 	callq	_ZdlPvm@PLT # Offset: 2112
    00000845: 	movq	0x50(%rsp), %r8
    0000084a: 	movq	0x40(%rsp), %r9
    0000084f: 	movq	0x78(%rsp), %r11
    00000854: 	movl	0x60(%rsp), %r10d
    00000859: 	movq	-0x8(%r8), %rax
    0000085d: 	subq	$0x8, %r8
    00000861: 	movq	%r8, %xmm5
    00000866: 	leaq	0x1f8(%rax), %rcx
    0000086d: 	movq	%rax, %xmm4
    00000872: 	addq	$0x200, %rax
    00000878: 	movq	%rcx, %xmm0
    0000087d: 	punpcklqdq	%xmm4, %xmm0
    00000881: 	movaps	%xmm0, 0xf0(%rsp)
    00000889: 	movq	%rax, %xmm0
    0000088e: 	punpcklqdq	%xmm5, %xmm0
    00000892: 	movaps	%xmm0, 0x100(%rsp)
    0000089a: 	addq	%r9, %r13
    0000089d: 	jns	.Ltmp6695 # Offset: 2205
.Ltmp6677:
    000008a3: 	movabsq	$-0x79e79e79e79e79e7, %rax
    000008ad: 	movq	%r13, %rcx
    000008b0: 	notq	%rcx
    000008b3: 	mulq	%rcx
    000008b6: 	subq	%rdx, %rcx
    000008b9: 	shrq	%rcx
    000008bc: 	leaq	(%rdx,%rcx), %rax
    000008c0: 	movq	0x18(%rsp), %rcx
    000008c5: 	shrq	$0x4, %rax
    000008c9: 	notq	%rax
    000008cc: 	leaq	(%rax,%rax,4), %rdx
    000008d0: 	leaq	(%rax,%rdx,4), %rdx
    000008d4: 	movq	(%rcx,%rax,8), %rax
    000008d8: 	subq	%rdx, %r13
    000008db: 	leaq	(%r13,%r13,2), %rdx
    000008e0: 	leaq	(%rax,%rdx,8), %rcx
    000008e4: 	movq	%r9, 0x10(%rcx)
    000008e8: 	jmp	.Ltmp6688 # Offset: 2280
.Ltmp6680:
    000008ed: 	addl	$0x1, %r10d
    000008f1: 	movq	%rcx, 0x168(%rsp)
    000008f9: 	movl	%r10d, 0x160(%rsp)
    00000901: 	cmpq	%r14, 0x8(%rsp)
    00000906: 	jne	.Ltmp6681 # Offset: 2310
    0000090c: 	jmp	.Ltmp6696 # Offset: 2316
.Ltmp6683:
    00000911: 	movq	0x20(%rsp), %rdx
    00000916: 	movq	0x38(%rsp), %rsi
    0000091b: 	movq	%rbp, %rdi
    0000091e: 	callq	_Z19test_duplicate_coreI14DoubleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2334
    00000923: 	movq	0xd0(%rsp), %rbx
    0000092b: 	testq	%rbx, %rbx
    0000092e: 	je	.Ltmp6697 # Offset: 2350
.Ltmp6698:
    00000930: 	movq	%rbx, %rdi
    00000933: 	movq	0x8(%rbx), %rbx
    00000937: 	movl	$0x18, %esi
    0000093c: 	callq	_ZdlPvm@PLT # Offset: 2364
    00000941: 	testq	%rbx, %rbx
    00000944: 	jne	.Ltmp6698 # Offset: 2372
.Ltmp6697:
    00000946: 	movq	0x1d0(%rsp), %rdi
    0000094e: 	cmpq	0x28(%rsp), %rdi
    00000953: 	je	.Ltmp6699 # Offset: 2387
    00000955: 	movq	0x1e0(%rsp), %rax
    0000095d: 	leaq	0x1(%rax), %rsi
    00000961: 	callq	_ZdlPvm@PLT # Offset: 2401
.Ltmp6699:
    00000966: 	movq	0x20(%rsp), %rdi
    0000096b: 	movq	0x30(%rsp), %rsi
    00000970: 	leaq	DATAat0x52ec8(%rip), %rdx
    00000977: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2423
    0000097c: 	movq	%rbp, %rdi
    0000097f: 	callq	_ZN27DoubleLinkListPoolAllocatorIdEC2Ev # Offset: 2431
    00000984: 	pxor	%xmm0, %xmm0
    00000988: 	movq	0x10(%rsp), %rcx
    0000098d: 	movq	$0x0, 0x160(%rsp)
    00000999: 	movups	%xmm0, 0x168(%rsp)
    000009a1: 	cmpq	%rcx, 0x8(%rsp)
    000009a6: 	je	.Ltmp6700 # Offset: 2470
    000009ac: 	movq	0x138(%rsp), %rax
    000009b4: 	movq	0x120(%rsp), %r9
    000009bc: 	movq	%rcx, %r14
    000009bf: 	leaq	0xb0(%rsp), %r12
    000009c7: 	xorl	%ecx, %ecx
    000009c9: 	movq	%rax, 0x18(%rsp)
    000009ce: 	xorl	%eax, %eax
.Ltmp6707:
    000009d0: 	movq	0x108(%rsp), %rdx
    000009d8: 	movq	0xf0(%rsp), %r15
    000009e0: 	addq	$0x8, %r14
    000009e4: 	movq	0xf8(%rsp), %r8
    000009ec: 	movq	%rdx, %rsi
    000009ef: 	subq	0xe8(%rsp), %rsi
    000009f7: 	movq	%r15, %rdi
    000009fa: 	sarq	$0x3, %rsi
    000009fe: 	cmpq	$0x1, %rdx
    00000a02: 	adcq	$-0x1, %rsi
    00000a06: 	subq	%r8, %rdi
    00000a09: 	sarq	$0x3, %rdi
    00000a0d: 	shlq	$0x6, %rsi
    00000a11: 	addq	%rdi, %rsi
    00000a14: 	movq	0xe0(%rsp), %rdi
    00000a1c: 	subq	0xd0(%rsp), %rdi
    00000a24: 	sarq	$0x3, %rdi
    00000a28: 	addq	%rsi, %rdi
    00000a2b: 	je	.Ltmp6701 # Offset: 2603
    00000a31: 	movq	%r9, %r13
    00000a34: 	subq	0x128(%rsp), %r13
    00000a3c: 	movq	%rax, %rbx
    00000a3f: 	sarq	$0x5, %r13
.Ltmp6731:
    00000a43: 	cmpq	%r8, %r15
    00000a46: 	je	.Ltmp6702 # Offset: 2630
.Ltmp6726:
    00000a4c: 	movq	-0x8(%r15), %r8
    00000a50: 	movq	%r13, %rax
    00000a53: 	subq	$0x8, %r15
    00000a57: 	movq	%r15, 0xf0(%rsp)
    00000a5f: 	addq	%r8, %rax
    00000a62: 	js	.Ltmp6703 # Offset: 2658
.Ltmp6727:
    00000a68: 	cmpq	$0xf, %rax
    00000a6c: 	jg	.Ltmp6704 # Offset: 2668
    00000a72: 	movq	%r8, %rax
    00000a75: 	shlq	$0x5, %rax
    00000a79: 	addq	%r9, %rax
    00000a7c: 	movq	%r8, 0x18(%rax)
.Ltmp6720:
    00000a80: 	movsd	-0x8(%r14), %xmm0
    00000a86: 	movq	$0x0, 0x8(%rax)
    00000a8e: 	movq	%rbx, 0x10(%rax)
    00000a92: 	movsd	%xmm0, (%rax)
    00000a96: 	testq	%rbx, %rbx
    00000a99: 	je	.Ltmp6705 # Offset: 2713
    00000a9b: 	movq	%rax, 0x8(%rbx)
.Ltmp6705:
    00000a9f: 	cmpq	$0x0, 0x168(%rsp)
    00000aa8: 	movq	%rax, 0x170(%rsp)
    00000ab0: 	je	.Ltmp6706 # Offset: 2736
    00000ab6: 	addq	$0x1, %rcx
    00000aba: 	movq	%rcx, 0x160(%rsp)
    00000ac2: 	cmpq	%r14, 0x8(%rsp)
    00000ac7: 	jne	.Ltmp6707 # Offset: 2759
.Ltmp6700:
    00000acd: 	movq	0x20(%rsp), %rdx
    00000ad2: 	movq	0x38(%rsp), %rsi
    00000ad7: 	movq	%rbp, %rdi
    00000ada: 	callq	_Z19test_duplicate_coreI20PooledDoubleLinkListIdEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2778
    00000adf: 	movq	0x70(%rsp), %rdi
    00000ae4: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 2788
    00000ae9: 	movq	%rbp, %rdi
    00000aec: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 2796
    00000af1: 	movq	0x1d0(%rsp), %rdi
    00000af9: 	cmpq	0x28(%rsp), %rdi
    00000afe: 	je	.Ltmp6708 # Offset: 2814
    00000b00: 	movq	0x1e0(%rsp), %rax
    00000b08: 	leaq	0x1(%rax), %rsi
    00000b0c: 	callq	_ZdlPvm@PLT # Offset: 2828
.Ltmp6708:
    00000b11: 	movq	0x30(%rsp), %rsi
    00000b16: 	movq	0x20(%rsp), %rdi
    00000b1b: 	leaq	DATAat0x52dd0(%rip), %rdx
    00000b22: 	leaq	0xc8(%rsp), %rbx
    00000b2a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2858
    00000b2f: 	movq	0x10(%rsp), %rax
    00000b34: 	movl	$0x0, 0xc8(%rsp)
    00000b3f: 	movq	$0x0, 0xd0(%rsp)
    00000b4b: 	movq	%rbx, 0xd8(%rsp)
    00000b53: 	movq	%rax, %r12
    00000b56: 	movq	%rbx, 0xe0(%rsp)
    00000b5e: 	movq	$0x0, 0xe8(%rsp)
    00000b6a: 	cmpq	%rax, 0x8(%rsp)
    00000b6f: 	je	.Ltmp6709 # Offset: 2927
    00000b71: 	nopl	(%rax) # Size: 7
.Ltmp6710:
    00000b78: 	movq	%r12, %rsi
    00000b7b: 	movq	%rbp, %rdi
    00000b7e: 	addq	$0x8, %r12
    00000b82: 	callq	_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE16_M_insert_uniqueIRKdEESt4pairISt17_Rb_tree_iteratorIdEbEOT_ # Offset: 2946
    00000b87: 	cmpq	%r12, 0x8(%rsp)
    00000b8c: 	jne	.Ltmp6710 # Offset: 2956
.Ltmp6709:
    00000b8e: 	movq	0x20(%rsp), %rdx
    00000b93: 	movq	0x38(%rsp), %rsi
    00000b98: 	movq	%rbp, %rdi
    00000b9b: 	callq	_Z19test_duplicate_coreISt3setIdSt4lessIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2971
    00000ba0: 	movq	0xd0(%rsp), %rdi
    00000ba8: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 2984
    00000bad: 	movq	0x1d0(%rsp), %rdi
    00000bb5: 	cmpq	0x28(%rsp), %rdi
    00000bba: 	je	.Ltmp6711 # Offset: 3002
    00000bbc: 	movq	0x1e0(%rsp), %rax
    00000bc4: 	leaq	0x1(%rax), %rsi
    00000bc8: 	callq	_ZdlPvm@PLT # Offset: 3016
.Ltmp6711:
    00000bcd: 	movq	0x30(%rsp), %rsi
    00000bd2: 	movq	0x20(%rsp), %rdi
    00000bd7: 	leaq	DATAat0x52de4(%rip), %rdx
    00000bde: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3038
    00000be3: 	movq	%rbx, 0xd8(%rsp)
    00000beb: 	movq	0x10(%rsp), %rax
    00000bf0: 	movl	$0x0, 0xc8(%rsp)
    00000bfb: 	movq	$0x0, 0xd0(%rsp)
    00000c07: 	movq	%rbx, 0xe0(%rsp)
    00000c0f: 	movq	$0x0, 0xe8(%rsp)
    00000c1b: 	cmpq	%rax, 0x8(%rsp)
    00000c20: 	je	.Ltmp6712 # Offset: 3104
    00000c26: 	movq	%rax, %r13
    00000c29: 	xorl	%r12d, %r12d
    00000c2c: 	addq	$0x8, %r13
    00000c30: 	testq	%r12, %r12
    00000c33: 	je	.Ltmp6713 # Offset: 3123
    00000c39: 	nopl	(%rax) # Size: 7
.Ltmp6719:
    00000c40: 	movsd	-0x8(%r13), %xmm1
    00000c46: 	jmp	.Ltmp6714 # Offset: 3142
    00000c48: 	nopl	(%rax,%rax) # Size: 8
.Ltmp6716:
    00000c50: 	movq	0x10(%r12), %rax
    00000c55: 	testq	%rax, %rax
    00000c58: 	je	.Ltmp6715 # Offset: 3160
.Ltmp6717:
    00000c5a: 	movq	%rax, %r12
.Ltmp6714:
    00000c5d: 	movsd	0x20(%r12), %xmm0
    00000c64: 	comisd	%xmm1, %xmm0
    00000c68: 	ja	.Ltmp6716 # Offset: 3176
    00000c6a: 	movq	0x18(%r12), %rax
    00000c6f: 	testq	%rax, %rax
    00000c72: 	jne	.Ltmp6717 # Offset: 3186
.Ltmp6715:
    00000c74: 	movl	$0x1, %r14d
    00000c7a: 	cmpq	%rbx, %r12
    00000c7d: 	je	.Ltmp6718 # Offset: 3197
    00000c7f: 	comisd	%xmm1, %xmm0
    00000c83: 	seta	%r14b
.Ltmp6718:
    00000c87: 	movl	$0x28, %edi
    00000c8c: 	callq	_Znwm@PLT # Offset: 3212
    00000c91: 	movsd	-0x8(%r13), %xmm0
    00000c97: 	movq	%rax, %rsi
    00000c9a: 	movzbl	%r14b, %edi
    00000c9e: 	movq	%rbx, %rcx
    00000ca1: 	movq	%r12, %rdx
    00000ca4: 	movsd	%xmm0, 0x20(%rax)
    00000ca9: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 3241
    00000cae: 	addq	$0x1, 0xe8(%rsp)
    00000cb7: 	cmpq	%r13, 0x8(%rsp)
    00000cbc: 	je	.Ltmp6712 # Offset: 3260
    00000cc2: 	movq	0xd0(%rsp), %r12
    00000cca: 	addq	$0x8, %r13
    00000cce: 	testq	%r12, %r12
    00000cd1: 	jne	.Ltmp6719 # Offset: 3281
.Ltmp6713:
    00000cd7: 	movq	%rbx, %r12
    00000cda: 	movl	$0x1, %r14d
    00000ce0: 	jmp	.Ltmp6718 # Offset: 3296
.Ltmp6704:
    00000ce2: 	movq	0x18(%rsp), %rsi
    00000ce7: 	movq	%rax, %rdx
    00000cea: 	andl	$0xf, %eax
    00000ced: 	sarq	$0x4, %rdx
    00000cf1: 	shlq	$0x5, %rax
    00000cf5: 	addq	(%rsi,%rdx,8), %rax
    00000cf9: 	movq	%r8, 0x18(%rax)
    00000cfd: 	jmp	.Ltmp6720 # Offset: 3325
.Ltmp6701:
    00000d02: 	movq	0x158(%rsp), %rsi
    00000d0a: 	movq	0x130(%rsp), %rdi
    00000d12: 	movq	0x140(%rsp), %r13
    00000d1a: 	movq	%rsi, %r10
    00000d1d: 	subq	0x18(%rsp), %r10
    00000d22: 	sarq	$0x3, %r10
    00000d26: 	cmpq	$0x1, %rsi
    00000d2a: 	adcq	$-0x1, %r10
    00000d2e: 	subq	0x148(%rsp), %r13
    00000d36: 	shlq	$0x4, %r10
    00000d3a: 	sarq	$0x5, %r13
    00000d3e: 	addq	%r10, %r13
    00000d41: 	movq	%rdi, %r10
    00000d44: 	subq	%r9, %r10
    00000d47: 	sarq	$0x5, %r10
    00000d4b: 	addq	%r10, %r13
    00000d4e: 	leaq	0x80(%r13), %rbx
    00000d55: 	cmpq	%rbx, %r13
    00000d58: 	jb	.Ltmp6721 # Offset: 3416
    00000d5e: 	movq	0x128(%rsp), %r11
    00000d66: 	movq	%r9, %r13
    00000d69: 	movq	%rbx, %r10
    00000d6c: 	subq	%r11, %r13
    00000d6f: 	movq	%r11, 0x40(%rsp)
    00000d74: 	sarq	$0x5, %r13
    00000d78: 	addq	%r13, %r10
    00000d7b: 	js	.Ltmp6722 # Offset: 3451
    00000d81: 	cmpq	$0xf, %r10
    00000d85: 	jle	.Ltmp6723 # Offset: 3461
    00000d8b: 	movq	%r10, %r11
    00000d8e: 	sarq	$0x4, %r11
.Ltmp6794:
    00000d92: 	movq	0x18(%rsp), %rdi
    00000d97: 	leaq	(%rdi,%r11,8), %rbx
    00000d9b: 	shlq	$0x4, %r11
    00000d9f: 	movq	(%rbx), %rdi
    00000da2: 	subq	%r11, %r10
    00000da5: 	shlq	$0x5, %r10
    00000da9: 	movq	%rdi, 0x40(%rsp)
    00000dae: 	addq	$0x200, %rdi
    00000db5: 	addq	0x40(%rsp), %r10
.Ltmp6795:
    00000dba: 	movq	%r10, %xmm7
    00000dbf: 	movq	%rdi, %xmm5
    00000dc4: 	addq	$0x8, %rsi
    00000dc8: 	movhps	0x40(%rsp), %xmm7
    00000dcd: 	movaps	%xmm7, 0x40(%rsp)
    00000dd2: 	movq	%rbx, %xmm7
    00000dd7: 	addq	$0x8, %rbx
    00000ddb: 	punpcklqdq	%xmm7, %xmm5
    00000ddf: 	movaps	%xmm5, 0x50(%rsp)
    00000de4: 	cmpq	%rbx, %rsi
    00000de7: 	jbe	.Ltmp6724 # Offset: 3559
    00000de9: 	movq	%rcx, 0x60(%rsp)
    00000dee: 	movq	%rdx, 0x78(%rsp)
    00000df3: 	movq	%r8, 0x90(%rsp)
    00000dfb: 	movq	%rax, 0x98(%rsp)
    00000e03: 	movq	%r9, 0xa0(%rsp)
    00000e0b: 	movq	%rbp, 0xa8(%rsp)
    00000e13: 	movq	%rbx, %rbp
    00000e16: 	movq	%rsi, %rbx
    00000e19: 	nopl	(%rax) # Size: 7
.Ltmp6725:
    00000e20: 	movq	(%rbp), %rdi
    00000e24: 	movl	$0x200, %esi
    00000e29: 	addq	$0x8, %rbp
    00000e2d: 	callq	_ZdlPvm@PLT # Offset: 3629
    00000e32: 	cmpq	%rbp, %rbx
    00000e35: 	ja	.Ltmp6725 # Offset: 3637
    00000e37: 	movq	0x60(%rsp), %rcx
    00000e3c: 	movq	0x78(%rsp), %rdx
    00000e41: 	movq	0x90(%rsp), %r8
    00000e49: 	movq	0x98(%rsp), %rax
    00000e51: 	movq	0xa0(%rsp), %r9
    00000e59: 	movq	0xa8(%rsp), %rbp
.Ltmp6724:
    00000e61: 	movdqa	0x40(%rsp), %xmm5
    00000e67: 	movdqa	0x50(%rsp), %xmm6
    00000e6d: 	movq	%rax, %rbx
    00000e70: 	movaps	%xmm5, 0x140(%rsp)
    00000e78: 	movaps	%xmm6, 0x150(%rsp)
    00000e80: 	cmpq	%r8, %r15
    00000e83: 	jne	.Ltmp6726 # Offset: 3715
.Ltmp6702:
    00000e89: 	movq	-0x8(%rdx), %rax
    00000e8d: 	movl	$0x200, %esi
    00000e92: 	movq	%r15, %rdi
    00000e95: 	movq	%r9, 0x78(%rsp)
    00000e9a: 	movq	%rcx, 0x60(%rsp)
    00000e9f: 	movq	0x1f8(%rax), %r8
    00000ea6: 	movq	%rdx, 0x50(%rsp)
    00000eab: 	movq	%r8, 0x40(%rsp)
    00000eb0: 	callq	_ZdlPvm@PLT # Offset: 3760
    00000eb5: 	movq	0x50(%rsp), %rdx
    00000eba: 	movq	0x40(%rsp), %r8
    00000ebf: 	movq	0x78(%rsp), %r9
    00000ec4: 	movq	-0x8(%rdx), %rax
    00000ec8: 	subq	$0x8, %rdx
    00000ecc: 	movq	%rdx, %xmm7
    00000ed1: 	leaq	0x1f8(%rax), %rcx
    00000ed8: 	movq	%rax, %xmm6
    00000edd: 	addq	$0x200, %rax
    00000ee3: 	movq	%rcx, %xmm0
    00000ee8: 	movq	0x60(%rsp), %rcx
    00000eed: 	punpcklqdq	%xmm6, %xmm0
    00000ef1: 	movaps	%xmm0, 0xf0(%rsp)
    00000ef9: 	movq	%rax, %xmm0
    00000efe: 	movq	%r13, %rax
    00000f01: 	punpcklqdq	%xmm7, %xmm0
    00000f05: 	movaps	%xmm0, 0x100(%rsp)
    00000f0d: 	addq	%r8, %rax
    00000f10: 	jns	.Ltmp6727 # Offset: 3856
.Ltmp6703:
    00000f16: 	movq	%rax, %rdx
    00000f19: 	notq	%rdx
    00000f1c: 	shrq	$0x4, %rdx
    00000f20: 	notq	%rdx
    00000f23: 	movq	%rdx, %rsi
    00000f26: 	shlq	$0x4, %rsi
    00000f2a: 	subq	%rsi, %rax
    00000f2d: 	movq	0x18(%rsp), %rsi
    00000f32: 	shlq	$0x5, %rax
    00000f36: 	addq	(%rsi,%rdx,8), %rax
    00000f3a: 	movq	%r8, 0x18(%rax)
    00000f3e: 	jmp	.Ltmp6720 # Offset: 3902
.Ltmp6706:
    00000f43: 	addq	$0x1, %rcx
    00000f47: 	movq	%rax, 0x168(%rsp)
    00000f4f: 	movq	%rcx, 0x160(%rsp)
    00000f57: 	cmpq	%r14, 0x8(%rsp)
    00000f5c: 	jne	.Ltmp6707 # Offset: 3932
    00000f62: 	jmp	.Ltmp6700 # Offset: 3938
.Ltmp6721:
    00000f67: 	movq	0x70(%rsp), %rdi
    00000f6c: 	movl	$0x80, %esi
    00000f71: 	callq	"_ZNSt5dequeI22DoubleLinkedPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 3953
    00000f76: 	movq	0xf0(%rsp), %r15
    00000f7e: 	jmp	.Ltmp6728 # Offset: 3966
.Ltmp6730:
    00000f80: 	movq	%rbx, (%r15)
    00000f83: 	addq	$0x8, %r15
    00000f87: 	movq	%r15, 0xf0(%rsp)
    00000f8f: 	cmpq	%rbx, %r13
    00000f92: 	je	.Ltmp6729 # Offset: 3986
.Ltmp6728:
    00000f94: 	movq	0x100(%rsp), %rax
    00000f9c: 	subq	$0x1, %rbx
    00000fa0: 	movq	%rbx, 0xb0(%rsp)
    00000fa8: 	subq	$0x8, %rax
    00000fac: 	cmpq	%rax, %r15
    00000faf: 	jne	.Ltmp6730 # Offset: 4015
    00000fb1: 	movq	%r12, %rsi
    00000fb4: 	movq	%rbp, %rdi
    00000fb7: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 4023
    00000fbc: 	movq	0xf0(%rsp), %r15
    00000fc4: 	cmpq	%rbx, %r13
    00000fc7: 	jne	.Ltmp6728 # Offset: 4039
.Ltmp6729:
    00000fc9: 	movq	0x120(%rsp), %r9
    00000fd1: 	movq	0x138(%rsp), %rax
    00000fd9: 	movq	0x170(%rsp), %rbx
    00000fe1: 	movq	0x160(%rsp), %rcx
    00000fe9: 	movq	%r9, %r13
    00000fec: 	subq	0x128(%rsp), %r13
    00000ff4: 	movq	%rax, 0x18(%rsp)
    00000ff9: 	movq	0xf8(%rsp), %r8
    00001001: 	movq	0x108(%rsp), %rdx
    00001009: 	sarq	$0x5, %r13
    0000100d: 	jmp	.Ltmp6731 # Offset: 4109
.Ltmp6689:
    00001012: 	movq	0x70(%rsp), %rdi
    00001017: 	movl	$0xaa, %esi
    0000101c: 	callq	"_ZNSt5dequeI20SingleLinkPooledNodeIdESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 4124
    00001021: 	movq	0xf0(%rsp), %r15
    00001029: 	jmp	.Ltmp6732 # Offset: 4137
    0000102b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6734:
    00001030: 	movq	%rbx, (%r15)
    00001033: 	addq	$0x8, %r15
    00001037: 	movq	%r15, 0xf0(%rsp)
    0000103f: 	cmpq	%rbx, %r13
    00001042: 	je	.Ltmp6733 # Offset: 4162
.Ltmp6732:
    00001044: 	movq	0x100(%rsp), %rax
    0000104c: 	subq	$0x1, %rbx
    00001050: 	movq	%rbx, 0xb0(%rsp)
    00001058: 	subq	$0x8, %rax
    0000105c: 	cmpq	%rax, %r15
    0000105f: 	jne	.Ltmp6734 # Offset: 4191
    00001061: 	movq	%r12, %rsi
    00001064: 	movq	%rbp, %rdi
    00001067: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 4199
    0000106c: 	movq	0xf0(%rsp), %r15
    00001074: 	cmpq	%rbx, %r13
    00001077: 	jne	.Ltmp6732 # Offset: 4215
.Ltmp6733:
    00001079: 	movq	0x120(%rsp), %r11
    00001081: 	movq	0x138(%rsp), %rax
    00001089: 	movq	0x170(%rsp), %rbx
    00001091: 	movl	0x160(%rsp), %r10d
    00001099: 	movq	%r11, %r13
    0000109c: 	subq	0x128(%rsp), %r13
    000010a4: 	movq	%rax, 0x18(%rsp)
    000010a9: 	movabsq	$-0x5555555555555555, %rax
    000010b3: 	sarq	$0x3, %r13
    000010b7: 	movq	0xf8(%rsp), %r9
    000010bf: 	movq	0x108(%rsp), %r8
    000010c7: 	imulq	%rax, %r13
    000010cb: 	jmp	.Ltmp6735 # Offset: 4299
.Ltmp6712:
    000010d0: 	movq	0x20(%rsp), %rdx
    000010d5: 	movq	0x38(%rsp), %rsi
    000010da: 	movq	%rbp, %rdi
    000010dd: 	callq	_Z19test_duplicate_coreISt8multisetIdSt4lessIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4317
    000010e2: 	movq	0xd0(%rsp), %rdi
    000010ea: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 4330
    000010ef: 	movq	0x1d0(%rsp), %rdi
    000010f7: 	cmpq	0x28(%rsp), %rdi
    000010fc: 	je	.Ltmp6736 # Offset: 4348
    000010fe: 	movq	0x1e0(%rsp), %rax
    00001106: 	leaq	0x1(%rax), %rsi
    0000110a: 	callq	_ZdlPvm@PLT # Offset: 4362
.Ltmp6736:
    0000110f: 	movq	0x30(%rsp), %r13
    00001114: 	leaq	0x190(%rsp), %r14
    0000111c: 	leaq	DATAat0x52564(%rip), %rdx
    00001123: 	movq	%r14, %rdi
    00001126: 	leaq	0x1b0(%rsp), %r15
    0000112e: 	movq	%r13, %rsi
    00001131: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4401
    00001136: 	movq	0x8(%r13), %rcx
    0000113a: 	movq	(%r13), %rdx
    0000113e: 	movq	%r14, %rsi
    00001141: 	movq	%r15, %rdi
    00001144: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 4420
    00001149: 	movq	0x20(%rsp), %rdi
    0000114e: 	leaq	DATAat0x52dfd(%rip), %rdx
    00001155: 	movq	%r15, %rsi
    00001158: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 4440
    0000115d: 	movl	$0x0, 0xc8(%rsp)
    00001168: 	movq	0x10(%rsp), %rax
    0000116d: 	movq	$0x0, 0xd0(%rsp)
    00001179: 	movq	%rbx, 0xd8(%rsp)
    00001181: 	movq	%rbx, 0xe0(%rsp)
    00001189: 	movq	$0x0, 0xe8(%rsp)
    00001195: 	cmpq	%rax, 0x8(%rsp)
    0000119a: 	je	.Ltmp6737 # Offset: 4506
    000011a0: 	xorl	%edx, %edx
    000011a2: 	movq	%rax, %r12
    000011a5: 	leaq	0xb0(%rsp), %r13
    000011ad: 	testq	%rdx, %rdx
    000011b0: 	je	.Ltmp6738 # Offset: 4528
    000011b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6744:
    000011b8: 	movsd	(%r12), %xmm0
    000011be: 	movq	%rbx, %rsi
    000011c1: 	jmp	.Ltmp6739 # Offset: 4545
    000011c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6741:
    000011c8: 	movq	%rdx, %rsi
    000011cb: 	movq	0x10(%rdx), %rdx
    000011cf: 	testq	%rdx, %rdx
    000011d2: 	je	.Ltmp6740 # Offset: 4562
.Ltmp6739:
    000011d4: 	comisd	0x20(%rdx), %xmm0
    000011d9: 	jbe	.Ltmp6741 # Offset: 4569
    000011db: 	movq	0x18(%rdx), %rdx
    000011df: 	testq	%rdx, %rdx
    000011e2: 	jne	.Ltmp6739 # Offset: 4578
.Ltmp6740:
    000011e4: 	cmpq	%rbx, %rsi
    000011e7: 	je	.Ltmp6742 # Offset: 4583
    000011e9: 	movsd	0x20(%rsi), %xmm1
    000011ee: 	comisd	%xmm0, %xmm1
    000011f2: 	jbe	.Ltmp6743 # Offset: 4594
.Ltmp6742:
    000011f4: 	movq	%r13, %rdx
    000011f7: 	movq	%rbp, %rdi
    000011fa: 	movq	%r12, 0xb0(%rsp)
    00001202: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_.isra.0/1" # Offset: 4610
    00001207: 	movsd	(%r12), %xmm0
    0000120d: 	movq	%rax, %rsi
.Ltmp6743:
    00001210: 	movsd	%xmm0, 0x28(%rsi)
    00001215: 	addq	$0x8, %r12
    00001219: 	cmpq	%r12, 0x8(%rsp)
    0000121e: 	je	.Ltmp6737 # Offset: 4638
    00001220: 	movq	0xd0(%rsp), %rdx
    00001228: 	testq	%rdx, %rdx
    0000122b: 	jne	.Ltmp6744 # Offset: 4651
.Ltmp6738:
    0000122d: 	movq	%rbx, %rsi
    00001230: 	jmp	.Ltmp6742 # Offset: 4656
.Ltmp6737:
    00001232: 	movq	0x20(%rsp), %rdx
    00001237: 	movq	0x38(%rsp), %rsi
    0000123c: 	movq	%rbp, %rdi
    0000123f: 	callq	_Z19test_duplicate_coreISt3mapIddSt4lessIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4671
    00001244: 	movq	0xd0(%rsp), %rdi
    0000124c: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 4684
    00001251: 	movq	0x1d0(%rsp), %rdi
    00001259: 	cmpq	0x28(%rsp), %rdi
    0000125e: 	je	.Ltmp6745 # Offset: 4702
    00001260: 	movq	0x1e0(%rsp), %rax
    00001268: 	leaq	0x1(%rax), %rsi
    0000126c: 	callq	_ZdlPvm@PLT # Offset: 4716
.Ltmp6745:
    00001271: 	movq	0x1b0(%rsp), %rdi
    00001279: 	leaq	0x1c0(%rsp), %r13
    00001281: 	cmpq	%r13, %rdi
    00001284: 	je	.Ltmp6746 # Offset: 4740
    00001286: 	movq	0x1c0(%rsp), %rax
    0000128e: 	leaq	0x1(%rax), %rsi
    00001292: 	callq	_ZdlPvm@PLT # Offset: 4754
.Ltmp6746:
    00001297: 	movq	0x190(%rsp), %rdi
    0000129f: 	leaq	0x1a0(%rsp), %rax
    000012a7: 	movq	%rax, 0x70(%rsp)
    000012ac: 	cmpq	%rax, %rdi
    000012af: 	je	.Ltmp6747 # Offset: 4783
    000012b1: 	movq	0x1a0(%rsp), %rax
    000012b9: 	leaq	0x1(%rax), %rsi
    000012bd: 	callq	_ZdlPvm@PLT # Offset: 4797
.Ltmp6747:
    000012c2: 	movq	0x30(%rsp), %r12
    000012c7: 	leaq	DATAat0x52564(%rip), %rdx
    000012ce: 	movq	%r14, %rdi
    000012d1: 	movq	%r12, %rsi
    000012d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4820
    000012d9: 	movq	0x8(%r12), %rcx
    000012de: 	movq	%r14, %rsi
    000012e1: 	movq	%r15, %rdi
    000012e4: 	movq	(%r12), %rdx
    000012e8: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 4840
    000012ed: 	movq	0x20(%rsp), %rdi
    000012f2: 	leaq	DATAat0x52e11(%rip), %rdx
    000012f9: 	movq	%r15, %rsi
    000012fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 4860
    00001301: 	movq	0x10(%rsp), %rax
    00001306: 	movq	%rbx, 0xd8(%rsp)
    0000130e: 	movl	$0x0, 0xc8(%rsp)
    00001319: 	movq	$0x0, 0xd0(%rsp)
    00001325: 	movq	%rax, %r12
    00001328: 	movq	%rbx, 0xe0(%rsp)
    00001330: 	movq	$0x0, 0xe8(%rsp)
    0000133c: 	cmpq	%rax, 0x8(%rsp)
    00001341: 	je	.Ltmp6748 # Offset: 4929
.Ltmp6755:
    00001347: 	movsd	(%r12), %xmm3
    0000134d: 	movl	$0x30, %edi
    00001352: 	movsd	%xmm3, 0x18(%rsp)
    00001358: 	callq	_Znwm@PLT # Offset: 4952
    0000135d: 	movsd	0x18(%rsp), %xmm0
    00001363: 	movq	0xd0(%rsp), %rdx
    0000136b: 	movq	%rax, %rsi
    0000136e: 	unpcklpd	%xmm0, %xmm0
    00001372: 	movups	%xmm0, 0x20(%rax)
    00001376: 	testq	%rdx, %rdx
    00001379: 	jne	.Ltmp6749 # Offset: 4985
    0000137b: 	jmp	.Ltmp6750 # Offset: 4987
.Ltmp6752:
    00001380: 	movq	0x10(%rdx), %rax
    00001384: 	testq	%rax, %rax
    00001387: 	je	.Ltmp6751 # Offset: 4999
.Ltmp6753:
    00001389: 	movq	%rax, %rdx
.Ltmp6749:
    0000138c: 	movsd	0x20(%rdx), %xmm0
    00001391: 	comisd	0x18(%rsp), %xmm0
    00001397: 	ja	.Ltmp6752 # Offset: 5015
    00001399: 	movq	0x18(%rdx), %rax
    0000139d: 	testq	%rax, %rax
    000013a0: 	jne	.Ltmp6753 # Offset: 5024
.Ltmp6751:
    000013a2: 	movl	$0x1, %edi
    000013a7: 	cmpq	%rbx, %rdx
    000013aa: 	je	.Ltmp6754 # Offset: 5034
    000013ac: 	xorl	%edi, %edi
    000013ae: 	comisd	0x18(%rsp), %xmm0
    000013b4: 	seta	%dil
.Ltmp6754:
    000013b8: 	movq	%rbx, %rcx
    000013bb: 	addq	$0x8, %r12
    000013bf: 	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT # Offset: 5055
    000013c4: 	addq	$0x1, 0xe8(%rsp)
    000013cd: 	cmpq	%r12, 0x8(%rsp)
    000013d2: 	jne	.Ltmp6755 # Offset: 5074
.Ltmp6748:
    000013d8: 	movq	0x20(%rsp), %rdx
    000013dd: 	movq	0x38(%rsp), %rsi
    000013e2: 	movq	%rbp, %rdi
    000013e5: 	callq	_Z19test_duplicate_coreISt8multimapIddSt4lessIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5093
    000013ea: 	movq	0xd0(%rsp), %rdi
    000013f2: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 5106
    000013f7: 	movq	0x1d0(%rsp), %rdi
    000013ff: 	cmpq	0x28(%rsp), %rdi
    00001404: 	je	.Ltmp6756 # Offset: 5124
    00001406: 	movq	0x1e0(%rsp), %rax
    0000140e: 	leaq	0x1(%rax), %rsi
    00001412: 	callq	_ZdlPvm@PLT # Offset: 5138
.Ltmp6756:
    00001417: 	movq	0x1b0(%rsp), %rdi
    0000141f: 	cmpq	%r13, %rdi
    00001422: 	je	.Ltmp6757 # Offset: 5154
    00001424: 	movq	0x1c0(%rsp), %rax
    0000142c: 	leaq	0x1(%rax), %rsi
    00001430: 	callq	_ZdlPvm@PLT # Offset: 5168
.Ltmp6757:
    00001435: 	movq	0x190(%rsp), %rdi
    0000143d: 	cmpq	0x70(%rsp), %rdi
    00001442: 	je	.Ltmp6758 # Offset: 5186
    00001444: 	movq	0x1a0(%rsp), %rax
    0000144c: 	leaq	0x1(%rax), %rsi
    00001450: 	callq	_ZdlPvm@PLT # Offset: 5200
.Ltmp6758:
    00001455: 	movq	0x30(%rsp), %rsi
    0000145a: 	movq	0x20(%rsp), %rdi
    0000145f: 	leaq	DATAat0x52e2a(%rip), %rdx
    00001466: 	leaq	0xf0(%rsp), %r12
    0000146e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5230
    00001473: 	movq	0x10(%rsp), %rax
    00001478: 	movq	%r12, 0xc0(%rsp)
    00001480: 	movq	$0x1, 0xc8(%rsp)
    0000148c: 	movq	$0x0, 0xd0(%rsp)
    00001498: 	movq	%rax, %rbx
    0000149b: 	movq	$0x0, 0xd8(%rsp)
    000014a7: 	movl	$0x3f800000, 0xe0(%rsp)
    000014b2: 	movq	$0x0, 0xe8(%rsp)
    000014be: 	movq	$0x0, 0xf0(%rsp)
    000014ca: 	cmpq	%rax, 0x8(%rsp)
    000014cf: 	je	.Ltmp6759 # Offset: 5327
.Ltmp6760:
    000014d1: 	movq	%rbx, %rsi
    000014d4: 	movq	%rbp, %rdi
    000014d7: 	addq	$0x8, %rbx
    000014db: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEESt4pairINS1_14_Node_iteratorIdLb1ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE.constprop.0.isra.0/1" # Offset: 5339
    000014e0: 	cmpq	%rbx, 0x8(%rsp)
    000014e5: 	jne	.Ltmp6760 # Offset: 5349
.Ltmp6759:
    000014e7: 	movq	0x20(%rsp), %rdx
    000014ec: 	movq	0x38(%rsp), %rsi
    000014f1: 	movq	%rbp, %rdi
    000014f4: 	callq	_Z19test_duplicate_coreISt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5364
    000014f9: 	movq	%rbp, %rdi
    000014fc: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEED2Ev # Offset: 5372
    00001501: 	movq	0x1d0(%rsp), %rdi
    00001509: 	cmpq	0x28(%rsp), %rdi
    0000150e: 	je	.Ltmp6761 # Offset: 5390
    00001510: 	movq	0x1e0(%rsp), %rax
    00001518: 	leaq	0x1(%rax), %rsi
    0000151c: 	callq	_ZdlPvm@PLT # Offset: 5404
.Ltmp6761:
    00001521: 	movq	0x30(%rsp), %rsi
    00001526: 	movq	0x20(%rsp), %rdi
    0000152b: 	leaq	DATAat0x52ee8(%rip), %rdx
    00001532: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5426
    00001537: 	movq	0x10(%rsp), %rax
    0000153c: 	movq	%r12, 0xc0(%rsp)
    00001544: 	movq	$0x1, 0xc8(%rsp)
    00001550: 	movq	$0x0, 0xd0(%rsp)
    0000155c: 	movq	%rax, %rbx
    0000155f: 	movq	$0x0, 0xd8(%rsp)
    0000156b: 	movl	$0x3f800000, 0xe0(%rsp)
    00001576: 	movq	$0x0, 0xe8(%rsp)
    00001582: 	movq	$0x0, 0xf0(%rsp)
    0000158e: 	cmpq	%rax, 0x8(%rsp)
    00001593: 	je	.Ltmp6762 # Offset: 5523
.Ltmp6763:
    00001595: 	movq	%rbx, %rdx
    00001598: 	xorl	%esi, %esi
    0000159a: 	movq	%rbp, %rdi
    0000159d: 	addq	$0x8, %rbx
    000015a1: 	callq	"_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEE9_M_insertIRKdNS1_10_AllocNodeISaINS1_10_Hash_nodeIdLb0EEEEEEEENS1_14_Node_iteratorIdLb1ELb0EEENS1_20_Node_const_iteratorIdLb1ELb0EEEOT_RKT0_St17integral_constantIbLb0EE.constprop.0.isra.0/1" # Offset: 5537
    000015a6: 	cmpq	%rbx, 0x8(%rsp)
    000015ab: 	jne	.Ltmp6763 # Offset: 5547
.Ltmp6762:
    000015ad: 	movq	0x20(%rsp), %rdx
    000015b2: 	movq	0x38(%rsp), %rsi
    000015b7: 	movq	%rbp, %rdi
    000015ba: 	callq	_Z19test_duplicate_coreISt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5562
    000015bf: 	movq	%rbp, %rdi
    000015c2: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEED2Ev # Offset: 5570
    000015c7: 	movq	0x1d0(%rsp), %rdi
    000015cf: 	cmpq	0x28(%rsp), %rdi
    000015d4: 	je	.Ltmp6764 # Offset: 5588
    000015d6: 	movq	0x1e0(%rsp), %rax
    000015de: 	leaq	0x1(%rax), %rsi
    000015e2: 	callq	_ZdlPvm@PLT # Offset: 5602
.Ltmp6764:
    000015e7: 	movq	0x30(%rsp), %rsi
    000015ec: 	movq	0x20(%rsp), %rdi
    000015f1: 	leaq	DATAat0x52e48(%rip), %rdx
    000015f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5624
    000015fd: 	movq	0x10(%rsp), %rax
    00001602: 	movq	%r12, 0xc0(%rsp)
    0000160a: 	movq	$0x1, 0xc8(%rsp)
    00001616: 	movq	$0x0, 0xd0(%rsp)
    00001622: 	movq	%rax, %rbx
    00001625: 	movq	$0x0, 0xd8(%rsp)
    00001631: 	movl	$0x3f800000, 0xe0(%rsp)
    0000163c: 	movq	$0x0, 0xe8(%rsp)
    00001648: 	movq	$0x0, 0xf0(%rsp)
    00001654: 	cmpq	%rax, 0x8(%rsp)
    00001659: 	je	.Ltmp6765 # Offset: 5721
.Ltmp6766:
    0000165b: 	movq	%rbx, %rsi
    0000165e: 	movq	%rbp, %rdi
    00001661: 	callq	_ZNSt8__detail9_Map_baseIdSt4pairIKddESaIS3_ENS_10_Select1stESt8equal_toIdESt4hashIdENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ # Offset: 5729
    00001666: 	movsd	(%rbx), %xmm0
    0000166a: 	addq	$0x8, %rbx
    0000166e: 	movsd	%xmm0, (%rax)
    00001672: 	cmpq	%rbx, 0x8(%rsp)
    00001677: 	jne	.Ltmp6766 # Offset: 5751
.Ltmp6765:
    00001679: 	movq	0x20(%rsp), %rdx
    0000167e: 	movq	0x38(%rsp), %rsi
    00001683: 	movq	%rbp, %rdi
    00001686: 	callq	_Z19test_duplicate_coreISt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5766
    0000168b: 	movq	%rbp, %rdi
    0000168e: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev # Offset: 5774
    00001693: 	movq	0x1d0(%rsp), %rdi
    0000169b: 	cmpq	0x28(%rsp), %rdi
    000016a0: 	je	.Ltmp6767 # Offset: 5792
    000016a2: 	movq	0x1e0(%rsp), %rax
    000016aa: 	leaq	0x1(%rax), %rsi
    000016ae: 	callq	_ZdlPvm@PLT # Offset: 5806
.Ltmp6767:
    000016b3: 	movq	0x30(%rsp), %rsi
    000016b8: 	movq	0x20(%rsp), %rdi
    000016bd: 	leaq	DATAat0x52f10(%rip), %rdx
    000016c4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5828
    000016c9: 	movq	0x10(%rsp), %rax
    000016ce: 	movq	%r12, 0xc0(%rsp)
    000016d6: 	leaq	0xb0(%rsp), %r12
    000016de: 	movq	$0x1, 0xc8(%rsp)
    000016ea: 	movq	$0x0, 0xd0(%rsp)
    000016f6: 	movq	%rax, %rbx
    000016f9: 	movq	$0x0, 0xd8(%rsp)
    00001705: 	movl	$0x3f800000, 0xe0(%rsp)
    00001710: 	movq	$0x0, 0xe8(%rsp)
    0000171c: 	movq	$0x0, 0xf0(%rsp)
    00001728: 	cmpq	%rax, 0x8(%rsp)
    0000172d: 	je	.Ltmp6768 # Offset: 5933
.Ltmp6769:
    0000172f: 	movsd	(%rbx), %xmm0
    00001733: 	movq	%r12, %rdx
    00001736: 	xorl	%esi, %esi
    00001738: 	movq	%rbp, %rdi
    0000173b: 	unpcklpd	%xmm0, %xmm0
    0000173f: 	movaps	%xmm0, 0xb0(%rsp)
    00001747: 	callq	"_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEE10_M_emplaceIJS0_IddEEEENS4_14_Node_iteratorIS2_Lb0ELb0EEENS4_20_Node_const_iteratorIS2_Lb0ELb0EEESt17integral_constantIbLb0EEDpOT_.constprop.0/1" # Offset: 5959
    0000174c: 	addq	$0x8, %rbx
    00001750: 	cmpq	%rbx, 0x8(%rsp)
    00001755: 	jne	.Ltmp6769 # Offset: 5973
.Ltmp6768:
    00001757: 	movq	0x20(%rsp), %rdx
    0000175c: 	movq	0x38(%rsp), %rsi
    00001761: 	movq	%rbp, %rdi
    00001764: 	callq	_Z19test_duplicate_coreISt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5988
    00001769: 	movq	%rbp, %rdi
    0000176c: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEED2Ev # Offset: 5996
    00001771: 	movq	0x1d0(%rsp), %rdi
    00001779: 	cmpq	0x28(%rsp), %rdi
    0000177e: 	je	.Ltmp6770 # Offset: 6014
    00001780: 	movq	0x1e0(%rsp), %rax
    00001788: 	leaq	0x1(%rax), %rsi
    0000178c: 	callq	_ZdlPvm@PLT # Offset: 6028
.Ltmp6770:
    00001791: 	movq	0x30(%rsp), %rsi
    00001796: 	movq	0x20(%rsp), %rdi
    0000179b: 	leaq	DATAat0x52e66(%rip), %rdx
    000017a2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6050
    000017a7: 	pxor	%xmm0, %xmm0
    000017ab: 	movq	0x10(%rsp), %rax
    000017b0: 	movq	$0x0, 0xd8(%rsp)
    000017bc: 	movq	$0x0, 0xe0(%rsp)
    000017c8: 	movl	$0x3f800000, 0xe8(%rsp)
    000017d3: 	movups	%xmm0, 0xc8(%rsp)
    000017db: 	cmpq	%rax, 0x8(%rsp)
    000017e0: 	je	.Ltmp6771 # Offset: 6112
    000017e6: 	movq	%rax, %r12
    000017e9: 	xorl	%eax, %eax
    000017eb: 	leaq	0xb0(%rsp), %r14
    000017f3: 	movl	$0xc70f6907, %r15d
    000017f9: 	testq	%rax, %rax
    000017fc: 	je	.Ltmp6772 # Offset: 6140
.Ltmp6777:
    000017fe: 	movsd	(%r12), %xmm0
    00001804: 	pxor	%xmm3, %xmm3
    00001808: 	movsd	%xmm0, 0xb0(%rsp)
    00001811: 	ucomisd	%xmm3, %xmm0
    00001815: 	jp	.Ltmp6773 # Offset: 6165
    00001817: 	movl	$0x0, %eax
    0000181c: 	jne	.Ltmp6773 # Offset: 6172
.Ltmp6778:
    0000181e: 	xorl	%edx, %edx
    00001820: 	divq	0xd8(%rsp)
    00001828: 	movq	0xe0(%rsp), %rax
    00001830: 	leaq	(%rax,%rdx,8), %r13
    00001834: 	movq	(%r13), %rax
    00001838: 	testq	%rax, %rax
    0000183b: 	je	.Ltmp6774 # Offset: 6203
    0000183d: 	movsd	(%r12), %xmm0
    00001843: 	jmp	.Ltmp6775 # Offset: 6211
    00001845: 	nopl	(%rax) # Size: 3
.Ltmp6776:
    00001848: 	movq	0x10(%rax), %rax
    0000184c: 	testq	%rax, %rax
    0000184f: 	je	.Ltmp6774 # Offset: 6223
.Ltmp6775:
    00001851: 	ucomisd	(%rax), %xmm0
    00001855: 	jp	.Ltmp6776 # Offset: 6229
    00001857: 	jne	.Ltmp6776 # Offset: 6231
    00001859: 	addq	$0x8, %rax
    0000185d: 	addq	$0x8, %r12
    00001861: 	movsd	%xmm0, (%rax)
    00001865: 	cmpq	%r12, 0x8(%rsp)
    0000186a: 	je	.Ltmp6771 # Offset: 6250
.Ltmp6780:
    00001870: 	movq	0xd0(%rsp), %rax
    00001878: 	testq	%rax, %rax
    0000187b: 	jne	.Ltmp6777 # Offset: 6267
.Ltmp6772:
    0000187d: 	movq	%rbp, %rdi
    00001880: 	callq	_ZN11HashMapBaseIdd20HashMapBaseAllocatorIddEE15grow_hash_tableEv # Offset: 6272
    00001885: 	jmp	.Ltmp6777 # Offset: 6277
.Ltmp6773:
    0000188a: 	movq	%r15, %rdx
    0000188d: 	movl	$0x8, %esi
    00001892: 	movq	%r14, %rdi
    00001895: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 6293
    0000189a: 	jmp	.Ltmp6778 # Offset: 6298
.Ltmp6774:
    0000189c: 	movl	$0x18, %edi
    000018a1: 	callq	_Znwm@PLT # Offset: 6305
    000018a6: 	movsd	(%r12), %xmm0
    000018ac: 	movq	$0x0, 0x8(%rax)
    000018b4: 	movq	%rax, %rbx
    000018b7: 	movsd	%xmm0, (%rax)
    000018bb: 	movq	(%r13), %rax
    000018bf: 	movq	%rax, 0x10(%rbx)
    000018c3: 	movq	0xc8(%rsp), %rax
    000018cb: 	movq	%rbx, (%r13)
    000018cf: 	addq	$0x1, %rax
    000018d3: 	movq	%rax, 0xc8(%rsp)
    000018db: 	cmpq	0xd0(%rsp), %rax
    000018e3: 	ja	.Ltmp6779 # Offset: 6371
.Ltmp6806:
    000018e9: 	leaq	0x8(%rbx), %rax
    000018ed: 	addq	$0x8, %r12
    000018f1: 	movsd	%xmm0, (%rax)
    000018f5: 	cmpq	%r12, 0x8(%rsp)
    000018fa: 	jne	.Ltmp6780 # Offset: 6394
.Ltmp6771:
    00001900: 	movq	0x20(%rsp), %rdx
    00001905: 	movq	0x38(%rsp), %rsi
    0000190a: 	movq	%rbp, %rdi
    0000190d: 	callq	_Z19test_duplicate_coreI7HashMapIddEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6413
    00001912: 	movq	0xd8(%rsp), %r13
    0000191a: 	movq	0xe0(%rsp), %r12
    00001922: 	xorl	%ebx, %ebx
    00001924: 	testq	%r13, %r13
    00001927: 	je	.Ltmp6781 # Offset: 6439
.Ltmp6784:
    0000192d: 	movq	(%r12,%rbx,8), %r14
    00001931: 	movq	$0x0, (%r12,%rbx,8)
    00001939: 	testq	%r14, %r14
    0000193c: 	je	.Ltmp6782 # Offset: 6460
    0000193e: 	nop # Size: 2
.Ltmp6783:
    00001940: 	movq	%r14, %rdi
    00001943: 	movq	0x10(%r14), %r14
    00001947: 	movl	$0x18, %esi
    0000194c: 	callq	_ZdlPvm@PLT # Offset: 6476
    00001951: 	testq	%r14, %r14
    00001954: 	jne	.Ltmp6783 # Offset: 6484
.Ltmp6782:
    00001956: 	addq	$0x1, %rbx
    0000195a: 	cmpq	%r13, %rbx
    0000195d: 	jne	.Ltmp6784 # Offset: 6493
.Ltmp6804:
    0000195f: 	movq	%r12, %rdi
    00001962: 	callq	_ZdaPv@PLT # Offset: 6498
.Ltmp6803:
    00001967: 	movq	0x1d0(%rsp), %rdi
    0000196f: 	cmpq	0x28(%rsp), %rdi
    00001974: 	je	.Ltmp6785 # Offset: 6516
    00001976: 	movq	0x1e0(%rsp), %rax
    0000197e: 	leaq	0x1(%rax), %rsi
    00001982: 	callq	_ZdlPvm@PLT # Offset: 6530
.Ltmp6785:
    00001987: 	movq	0x20(%rsp), %rdi
    0000198c: 	movq	0x30(%rsp), %rsi
    00001991: 	leaq	DATAat0x52e79(%rip), %rdx
    00001998: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6552
    0000199d: 	movq	%rbp, %rdi
    000019a0: 	callq	_ZN20HashMapPoolAllocatorIddEC2Ev # Offset: 6560
    000019a5: 	pxor	%xmm0, %xmm0
    000019a9: 	movq	0x10(%rsp), %rcx
    000019ae: 	movq	$0x0, 0x170(%rsp)
    000019ba: 	movq	$0x0, 0x178(%rsp)
    000019c6: 	movl	$0x3f800000, 0x180(%rsp)
    000019d1: 	movaps	%xmm0, 0x160(%rsp)
    000019d9: 	cmpq	%rcx, 0x8(%rsp)
    000019de: 	je	.Ltmp6786 # Offset: 6622
    000019e4: 	xorl	%eax, %eax
    000019e6: 	leaq	0xb0(%rsp), %r13
    000019ee: 	movl	$0xc70f6907, %r14d
    000019f4: 	testq	%rax, %rax
    000019f7: 	je	.Ltmp6787 # Offset: 6647
.Ltmp6792:
    000019fd: 	movq	0x10(%rsp), %rax
    00001a02: 	pxor	%xmm4, %xmm4
    00001a06: 	movsd	(%rax), %xmm0
    00001a0a: 	movsd	%xmm0, 0xb0(%rsp)
    00001a13: 	ucomisd	%xmm4, %xmm0
    00001a17: 	jp	.Ltmp6788 # Offset: 6679
    00001a1d: 	movl	$0x0, %eax
    00001a22: 	jne	.Ltmp6788 # Offset: 6690
.Ltmp6797:
    00001a28: 	xorl	%edx, %edx
    00001a2a: 	divq	0x170(%rsp)
    00001a32: 	movq	0x178(%rsp), %rax
    00001a3a: 	movq	(%rax,%rdx,8), %rax
    00001a3e: 	leaq	(,%rdx,8), %r12
    00001a46: 	testq	%rax, %rax
    00001a49: 	je	.Ltmp6789 # Offset: 6729
    00001a4f: 	movq	0x10(%rsp), %rcx
    00001a54: 	movsd	(%rcx), %xmm0
    00001a58: 	jmp	.Ltmp6790 # Offset: 6744
    00001a5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6791:
    00001a60: 	movq	0x10(%rax), %rax
    00001a64: 	testq	%rax, %rax
    00001a67: 	je	.Ltmp6789 # Offset: 6759
.Ltmp6790:
    00001a6d: 	ucomisd	(%rax), %xmm0
    00001a71: 	jp	.Ltmp6791 # Offset: 6769
    00001a73: 	jne	.Ltmp6791 # Offset: 6771
    00001a75: 	addq	$0x8, %rax
.Ltmp6799:
    00001a79: 	addq	$0x8, 0x10(%rsp)
    00001a7f: 	movsd	%xmm0, (%rax)
    00001a83: 	movq	0x10(%rsp), %rax
    00001a88: 	cmpq	%rax, 0x8(%rsp)
    00001a8d: 	je	.Ltmp6786 # Offset: 6797
    00001a93: 	movq	0x168(%rsp), %rax
    00001a9b: 	testq	%rax, %rax
    00001a9e: 	jne	.Ltmp6792 # Offset: 6814
.Ltmp6787:
    00001aa4: 	movq	%rbp, %rdi
    00001aa7: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv # Offset: 6823
    00001aac: 	jmp	.Ltmp6792 # Offset: 6828
.Ltmp6750:
    00001ab1: 	movl	$0x1, %edi
    00001ab6: 	movq	%rbx, %rdx
    00001ab9: 	jmp	.Ltmp6754 # Offset: 6841
.Ltmp6690:
    00001abe: 	movabsq	$-0x79e79e79e79e79e7, %rax
    00001ac8: 	movq	%rdx, %rdi
    00001acb: 	notq	%rdi
    00001ace: 	mulq	%rdi
    00001ad1: 	movq	%rdi, %rax
    00001ad4: 	subq	%rdx, %rax
    00001ad7: 	shrq	%rax
    00001ada: 	addq	%rax, %rdx
    00001add: 	shrq	$0x4, %rdx
    00001ae1: 	notq	%rdx
    00001ae4: 	jmp	.Ltmp6793 # Offset: 6884
.Ltmp6722:
    00001ae9: 	movq	%r10, %r11
    00001aec: 	notq	%r11
    00001aef: 	shrq	$0x4, %r11
    00001af3: 	notq	%r11
    00001af6: 	jmp	.Ltmp6794 # Offset: 6902
.Ltmp6723:
    00001afb: 	shlq	$0x5, %rbx
    00001aff: 	movq	%rbx, %r10
    00001b02: 	movq	0x18(%rsp), %rbx
    00001b07: 	addq	%r9, %r10
    00001b0a: 	jmp	.Ltmp6795 # Offset: 6922
.Ltmp6691:
    00001b0f: 	leaq	(%rbx,%rbx,2), %rdx
    00001b13: 	movq	0x18(%rsp), %rbx
    00001b18: 	leaq	(%r11,%rdx,8), %rdx
    00001b1c: 	movq	%rbx, 0x50(%rsp)
    00001b21: 	jmp	.Ltmp6796 # Offset: 6945
.Ltmp6788:
    00001b26: 	movq	%r14, %rdx
    00001b29: 	movl	$0x8, %esi
    00001b2e: 	movq	%r13, %rdi
    00001b31: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 6961
    00001b36: 	jmp	.Ltmp6797 # Offset: 6966
.Ltmp6789:
    00001b3b: 	movq	%rbp, %rdi
    00001b3e: 	callq	_ZN20HashMapPoolAllocatorIddE13allocate_nodeEv # Offset: 6974
    00001b43: 	movq	%rax, %rbx
    00001b46: 	movq	0x10(%rsp), %rax
    00001b4b: 	addq	0x178(%rsp), %r12
    00001b53: 	movsd	(%rax), %xmm0
    00001b57: 	movq	(%r12), %rax
    00001b5b: 	movq	$0x0, 0x8(%rbx)
    00001b63: 	movq	%rax, 0x10(%rbx)
    00001b67: 	movq	0x160(%rsp), %rax
    00001b6f: 	movsd	%xmm0, (%rbx)
    00001b73: 	addq	$0x1, %rax
    00001b77: 	movq	%rbx, (%r12)
    00001b7b: 	movq	%rax, 0x160(%rsp)
    00001b83: 	cmpq	0x168(%rsp), %rax
    00001b8b: 	ja	.Ltmp6798 # Offset: 7051
.Ltmp6805:
    00001b91: 	movq	0x10(%rsp), %rcx
    00001b96: 	leaq	0x8(%rbx), %rax
    00001b9a: 	movsd	(%rcx), %xmm0
    00001b9e: 	jmp	.Ltmp6799 # Offset: 7070
.Ltmp6786:
    00001ba3: 	movq	0x20(%rsp), %rdx
    00001ba8: 	movq	0x38(%rsp), %rsi
    00001bad: 	movq	%rbp, %rdi
    00001bb0: 	callq	_Z19test_duplicate_coreI13PooledHashMapIddEEvRT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7088
    00001bb5: 	movq	%rbp, %rdi
    00001bb8: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED2Ev # Offset: 7096
    00001bbd: 	movq	0x1d0(%rsp), %rdi
    00001bc5: 	cmpq	0x28(%rsp), %rdi
    00001bca: 	je	.Ltmp6800 # Offset: 7114
    00001bcc: 	movq	0x1e0(%rsp), %rax
    00001bd4: 	leaq	0x1(%rax), %rsi
    00001bd8: 	callq	_ZdlPvm@PLT # Offset: 7128
.Ltmp6800:
    00001bdd: 	cmpb	$0x0, 0x8c(%rsp)
    00001be5: 	jne	.Ltmp6801 # Offset: 7141
    00001be7: 	movq	0x1f8(%rsp), %rax
    00001bef: 	subq	%fs:0x28, %rax
    00001bf8: 	jne	.Ltmp6802 # Offset: 7160
    00001bfe: 	addq	$0x208, %rsp
    00001c05: 	popq	%rbx
    00001c06: 	popq	%rbp
    00001c07: 	popq	%r12
    00001c09: 	popq	%r13
    00001c0b: 	popq	%r14
    00001c0d: 	popq	%r15
    00001c0f: 	retq # Offset: 7183
.Ltmp6781:
    00001c10: 	testq	%r12, %r12
    00001c13: 	je	.Ltmp6803 # Offset: 7187
    00001c19: 	jmp	.Ltmp6804 # Offset: 7193
    00001c1e: 	nop # Size: 2
.Ltmp6798:
    00001c20: 	movq	%rbp, %rdi
    00001c23: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv # Offset: 7203
    00001c28: 	jmp	.Ltmp6805 # Offset: 7208
.Ltmp6779:
    00001c2d: 	movq	%rbp, %rdi
    00001c30: 	callq	_ZN11HashMapBaseIdd20HashMapBaseAllocatorIddEE15grow_hash_tableEv # Offset: 7216
    00001c35: 	movsd	(%r12), %xmm0
    00001c3b: 	jmp	.Ltmp6806 # Offset: 7227
.Ltmp6801:
    00001c40: 	movq	0x1f8(%rsp), %rax
    00001c48: 	subq	%fs:0x28, %rax
    00001c51: 	jne	.Ltmp6802 # Offset: 7249
    00001c53: 	movl	iterations(%rip), %edx
    00001c59: 	movl	0x80(%rsp), %esi
    00001c60: 	xorl	%r8d, %r8d
    00001c63: 	xorl	%ecx, %ecx
    00001c65: 	addq	$0x208, %rsp
    00001c6c: 	leaq	DATAat0x52e92(%rip), %rdi
    00001c73: 	popq	%rbx
    00001c74: 	popq	%rbp
    00001c75: 	popq	%r12
    00001c77: 	popq	%r13
    00001c79: 	popq	%r14
    00001c7b: 	popq	%r15
    00001c7d: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 7293
.Ltmp6674:
    00001c82: 	leaq	0x110(%rsp), %rax
    00001c8a: 	movq	%rax, 0x70(%rsp)
    00001c8f: 	jmp	.Ltmp6696 # Offset: 7311
.Ltmp6802:
    00001c94: 	callq	__stack_chk_fail@PLT # Offset: 7316
    00001c99: 	endbr64
    00001c9d: 	movq	%rax, %rbx
    00001ca0: 	jmp	.Ltmp6807 # Offset: 7328
    00001ca2: 	endbr64
.Ltmp6815:
    00001ca6: 	movq	%rax, %rbp
    00001ca9: 	jmp	.Ltmp6808 # Offset: 7337
.Ltmp6807:
    00001cab: 	movq	%rbp, %rdi
    00001cae: 	movq	%rbx, %rbp
    00001cb1: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEED2Ev # Offset: 7345
.Ltmp6808:
    00001cb6: 	movq	0x1d0(%rsp), %rdi
    00001cbe: 	cmpq	0x28(%rsp), %rdi
    00001cc3: 	je	.Ltmp6809 # Offset: 7363
.Ltmp6811:
    00001cc9: 	movq	0x1e0(%rsp), %rax
    00001cd1: 	leaq	0x1(%rax), %rsi
    00001cd5: 	callq	_ZdlPvm@PLT # Offset: 7381
    00001cda: 	jmp	.Ltmp6809 # Offset: 7386
    00001cdf: 	endbr64
.Ltmp6819:
    00001ce3: 	movq	%rax, %rbp
    00001ce6: 	jmp	.Ltmp6810 # Offset: 7398
    00001ce8: 	endbr64
    00001cec: 	movq	%rax, %rbx
    00001cef: 	movq	0x70(%rsp), %rdi
    00001cf4: 	callq	_ZNSt11_Deque_baseI22DoubleLinkedPooledNodeIdESaIS1_EED1Ev # Offset: 7412
    00001cf9: 	movq	%rbp, %rdi
    00001cfc: 	movq	%rbx, %rbp
    00001cff: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 7423
    00001d04: 	jmp	.Ltmp6808 # Offset: 7428
.Ltmp6810:
    00001d06: 	movq	0xd0(%rsp), %rdi
    00001d0e: 	callq	"_ZNSt8_Rb_treeIddSt9_IdentityIdESt4lessIdESaIdEE8_M_eraseEPSt13_Rb_tree_nodeIdE.isra.0/1" # Offset: 7438
    00001d13: 	movq	0x1d0(%rsp), %rdi
    00001d1b: 	cmpq	0x28(%rsp), %rdi
    00001d20: 	jne	.Ltmp6811 # Offset: 7456
    00001d22: 	jmp	.Ltmp6809 # Offset: 7458
    00001d27: 	endbr64
    00001d2b: 	movq	%rax, %rbp
    00001d2e: 	jmp	.Ltmp6812 # Offset: 7470
    00001d30: 	endbr64
    00001d34: 	movq	%rax, %rbp
    00001d37: 	jmp	.Ltmp6813 # Offset: 7479
.Ltmp6812:
    00001d39: 	movq	0xd0(%rsp), %rdi
.Ltmp6814:
    00001d41: 	testq	%rdi, %rdi
    00001d44: 	je	.Ltmp6808 # Offset: 7492
    00001d4a: 	movq	0x8(%rdi), %rbx
    00001d4e: 	movl	$0x18, %esi
    00001d53: 	callq	_ZdlPvm@PLT # Offset: 7507
    00001d58: 	movq	%rbx, %rdi
    00001d5b: 	jmp	.Ltmp6814 # Offset: 7515
.Ltmp6813:
    00001d5d: 	movq	0x1d0(%rsp), %rdi
    00001d65: 	leaq	0x1e0(%rsp), %rax
    00001d6d: 	cmpq	%rax, %rdi
    00001d70: 	jne	.Ltmp6811 # Offset: 7536
    00001d76: 	jmp	.Ltmp6809 # Offset: 7542
    00001d7b: 	endbr64
    00001d7f: 	jmp	.Ltmp6815 # Offset: 7551
    00001d84: 	endbr64
    00001d88: 	jmp	.Ltmp6815 # Offset: 7560
    00001d8d: 	endbr64
    00001d91: 	movq	%rax, %rbp
    00001d94: 	jmp	.Ltmp6816 # Offset: 7572
    00001d96: 	endbr64
    00001d9a: 	movq	%rax, %rbp
    00001d9d: 	jmp	.Ltmp6817 # Offset: 7581
.Ltmp6822:
    00001d9f: 	movq	0xd0(%rsp), %rdi
    00001da7: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 7591
    00001dac: 	movq	0x1d0(%rsp), %rdi
    00001db4: 	cmpq	0x28(%rsp), %rdi
    00001db9: 	je	.Ltmp6816 # Offset: 7609
    00001dbb: 	movq	0x1e0(%rsp), %rax
    00001dc3: 	leaq	0x1(%rax), %rsi
    00001dc7: 	callq	_ZdlPvm@PLT # Offset: 7623
.Ltmp6816:
    00001dcc: 	movq	0x1b0(%rsp), %rdi
    00001dd4: 	cmpq	%r13, %rdi
    00001dd7: 	je	.Ltmp6817 # Offset: 7639
    00001dd9: 	movq	0x1c0(%rsp), %rax
    00001de1: 	leaq	0x1(%rax), %rsi
    00001de5: 	callq	_ZdlPvm@PLT # Offset: 7653
.Ltmp6817:
    00001dea: 	movq	0x190(%rsp), %rdi
    00001df2: 	cmpq	0x70(%rsp), %rdi
    00001df7: 	je	.Ltmp6809 # Offset: 7671
.Ltmp6821:
    00001df9: 	movq	0x1a0(%rsp), %rax
    00001e01: 	leaq	0x1(%rax), %rsi
    00001e05: 	callq	_ZdlPvm@PLT # Offset: 7685
.Ltmp6809:
    00001e0a: 	movq	%rbp, %rdi
    00001e0d: 	callq	_Unwind_Resume@PLT # Offset: 7693
    00001e12: 	endbr64
    00001e16: 	movq	%rax, %rbp
    00001e19: 	jmp	.Ltmp6818 # Offset: 7705
    00001e1b: 	endbr64
    00001e1f: 	jmp	.Ltmp6819 # Offset: 7711
.Ltmp6823:
    00001e24: 	movq	0xd0(%rsp), %rdi
    00001e2c: 	callq	"_ZNSt8_Rb_treeIdSt4pairIKddESt10_Select1stIS2_ESt4lessIdESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E.isra.0/1" # Offset: 7724
    00001e31: 	movq	0x1d0(%rsp), %rdi
    00001e39: 	cmpq	0x28(%rsp), %rdi
    00001e3e: 	je	.Ltmp6818 # Offset: 7742
    00001e40: 	movq	0x1e0(%rsp), %rax
    00001e48: 	leaq	0x1(%rax), %rsi
    00001e4c: 	callq	_ZdlPvm@PLT # Offset: 7756
.Ltmp6818:
    00001e51: 	movq	0x1b0(%rsp), %rdi
    00001e59: 	leaq	0x1c0(%rsp), %rax
    00001e61: 	cmpq	%rax, %rdi
    00001e64: 	je	.Ltmp6820 # Offset: 7780
    00001e66: 	movq	0x1c0(%rsp), %rax
    00001e6e: 	leaq	0x1(%rax), %rsi
    00001e72: 	callq	_ZdlPvm@PLT # Offset: 7794
.Ltmp6820:
    00001e77: 	movq	0x190(%rsp), %rdi
    00001e7f: 	leaq	0x1a0(%rsp), %rax
    00001e87: 	cmpq	%rax, %rdi
    00001e8a: 	jne	.Ltmp6821 # Offset: 7818
    00001e90: 	jmp	.Ltmp6809 # Offset: 7824
    00001e95: 	endbr64
    00001e99: 	movq	%rax, %rbp
    00001e9c: 	jmp	.Ltmp6822 # Offset: 7836
    00001ea1: 	endbr64
    00001ea5: 	jmp	.Ltmp6815 # Offset: 7845
    00001eaa: 	endbr64
    00001eae: 	movq	%rax, %rbp
    00001eb1: 	jmp	.Ltmp6820 # Offset: 7857
    00001eb3: 	endbr64
    00001eb7: 	movq	%rax, %rbp
    00001eba: 	jmp	.Ltmp6823 # Offset: 7866
    00001ebf: 	endbr64
    00001ec3: 	movq	%rax, %rbx
    00001ec6: 	jmp	.Ltmp6824 # Offset: 7878
    00001ec8: 	endbr64
    00001ecc: 	movq	%rax, %r12
    00001ecf: 	jmp	.Ltmp6825 # Offset: 7887
.Ltmp6824:
    00001ed1: 	movq	0x70(%rsp), %rdi
    00001ed6: 	callq	_ZNSt11_Deque_baseI20SingleLinkPooledNodeIdESaIS1_EED1Ev # Offset: 7894
    00001edb: 	movq	%rbp, %rdi
    00001ede: 	movq	%rbx, %rbp
    00001ee1: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 7905
    00001ee6: 	jmp	.Ltmp6808 # Offset: 7910
.Ltmp6825:
    00001eeb: 	movq	%rbp, %rdi
    00001eee: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb0EEEED2Ev # Offset: 7918
    00001ef3: 	movq	0x1d0(%rsp), %rdi
    00001efb: 	cmpq	0x28(%rsp), %rdi
    00001f00: 	je	.Ltmp6826 # Offset: 7936
.Ltmp6833:
    00001f02: 	movq	0x1e0(%rsp), %rax
    00001f0a: 	leaq	0x1(%rax), %rsi
    00001f0e: 	callq	_ZdlPvm@PLT # Offset: 7950
.Ltmp6826:
    00001f13: 	movq	%r12, %rdi
    00001f16: 	callq	_Unwind_Resume@PLT # Offset: 7958
    00001f1b: 	endbr64
    00001f1f: 	jmp	.Ltmp6815 # Offset: 7967
    00001f24: 	endbr64
    00001f28: 	movq	%rax, %rbp
    00001f2b: 	jmp	.Ltmp6827 # Offset: 7979
    00001f2d: 	endbr64
    00001f31: 	jmp	.Ltmp6815 # Offset: 7985
    00001f36: 	endbr64
    00001f3a: 	movq	%rax, %rbp
    00001f3d: 	jmp	.Ltmp6828 # Offset: 7997
.Ltmp6827:
    00001f3f: 	movq	0xc8(%rsp), %rdi
.Ltmp6829:
    00001f47: 	testq	%rdi, %rdi
    00001f4a: 	je	.Ltmp6808 # Offset: 8010
    00001f50: 	movq	0x8(%rdi), %rbx
    00001f54: 	movl	$0x10, %esi
    00001f59: 	callq	_ZdlPvm@PLT # Offset: 8025
    00001f5e: 	movq	%rbx, %rdi
    00001f61: 	jmp	.Ltmp6829 # Offset: 8033
.Ltmp6828:
    00001f63: 	movq	0xc0(%rsp), %rdi
.Ltmp6830:
    00001f6b: 	testq	%rdi, %rdi
    00001f6e: 	je	.Ltmp6808 # Offset: 8046
    00001f74: 	movq	(%rdi), %rbx
    00001f77: 	movl	$0x10, %esi
    00001f7c: 	callq	_ZdlPvm@PLT # Offset: 8060
    00001f81: 	movq	%rbx, %rdi
    00001f84: 	jmp	.Ltmp6830 # Offset: 8068
    00001f86: 	endbr64
    00001f8a: 	movq	%rax, %r12
    00001f8d: 	jmp	.Ltmp6831 # Offset: 8077
    00001f8f: 	endbr64
    00001f93: 	movq	%rax, %r12
    00001f96: 	jmp	.Ltmp6832 # Offset: 8086
.Ltmp6831:
    00001f98: 	movq	%rbp, %rdi
    00001f9b: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb0EEEED2Ev # Offset: 8091
    00001fa0: 	movq	0x1d0(%rsp), %rdi
    00001fa8: 	cmpq	0x28(%rsp), %rdi
    00001fad: 	jne	.Ltmp6833 # Offset: 8109
    00001fb3: 	jmp	.Ltmp6826 # Offset: 8115
.Ltmp6832:
    00001fb8: 	movq	%rbp, %rdi
    00001fbb: 	callq	_ZN7HashMapIddED2Ev # Offset: 8123
    00001fc0: 	movq	0x1d0(%rsp), %rdi
    00001fc8: 	cmpq	0x28(%rsp), %rdi
    00001fcd: 	jne	.Ltmp6833 # Offset: 8141
    00001fd3: 	jmp	.Ltmp6826 # Offset: 8147
    00001fd8: 	endbr64
    00001fdc: 	movq	%rax, %r12
    00001fdf: 	jmp	.Ltmp6834 # Offset: 8159
    00001fe1: 	endbr64
    00001fe5: 	movq	%rax, %r12
    00001fe8: 	jmp	.Ltmp6835 # Offset: 8168
.Ltmp6834:
    00001fea: 	movq	%rbp, %rdi
    00001fed: 	callq	_ZNSt10_HashtableIdSt4pairIKddESaIS2_ENSt8__detail10_Select1stESt8equal_toIdESt4hashIdENS4_18_Mod_range_hashingENS4_20_Default_ranged_hashENS4_20_Prime_rehash_policyENS4_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev # Offset: 8173
    00001ff2: 	movq	0x1d0(%rsp), %rdi
    00001ffa: 	cmpq	0x28(%rsp), %rdi
    00001fff: 	jne	.Ltmp6833 # Offset: 8191
    00002005: 	jmp	.Ltmp6826 # Offset: 8197
.Ltmp6835:
    0000200a: 	movq	%rbp, %rdi
    0000200d: 	callq	_ZNSt10_HashtableIddSaIdENSt8__detail9_IdentityESt8equal_toIdESt4hashIdENS1_18_Mod_range_hashingENS1_20_Default_ranged_hashENS1_20_Prime_rehash_policyENS1_17_Hashtable_traitsILb0ELb1ELb1EEEED2Ev # Offset: 8205
    00002012: 	movq	0x1d0(%rsp), %rdi
    0000201a: 	cmpq	0x28(%rsp), %rdi
    0000201f: 	jne	.Ltmp6833 # Offset: 8223
    00002025: 	jmp	.Ltmp6826 # Offset: 8229
DWARF CFI Instructions:
    <empty>
End of Function "_Z13testDuplicateIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z15test_delete_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 342
  State       : disassembled
  Address     : 0x48020
  Size        : 0xd8f
  MaxSize     : 0xd90
  Offset      : 0x48020
  Section     : .text
  Orc Section : .local.text._Z15test_delete_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0341:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xb8, %rsp
    0000001b: 	movq	%rdx, 0x78(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x48(%rsp)
    00000027: 	movq	%rsi, 0x28(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0xa8(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	movabsq	$0x500000000, %rax
    00000049: 	divq	%rcx
    0000004c: 	movq	%rax, 0x30(%rsp)
    00000051: 	cmpq	$0x3e8, %rax
    00000057: 	ja	.Ltmp6836 # Offset: 87
    0000005d: 	cmpq	$0x3, %rax
    00000061: 	ja	.Ltmp6837 # Offset: 97
    00000067: 	movq	$0x0, 0xa0(%rsp)
    00000073: 	pxor	%xmm0, %xmm0
    00000077: 	movq	$0x4, 0x30(%rsp)
    00000080: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp6899:
    00000088: 	movq	0x30(%rsp), %rbx
    0000008d: 	leaq	0x90(%rsp), %rdi
    00000095: 	movq	%rbx, %rsi
    00000098: 	callq	_ZNSt6vectorIP13PooledHashMapIddESaIS2_EE17_M_default_appendEm # Offset: 152
    0000009d: 	movl	iterations(%rip), %eax
    000000a3: 	testl	%eax, %eax
    000000a5: 	jle	.Ltmp6838 # Offset: 165
    000000ab: 	movl	%ebx, 0x6c(%rsp)
    000000af: 	movq	$0x0, 0x50(%rsp)
    000000b8: 	movl	$0x0, 0x68(%rsp)
.Ltmp6874:
    000000c0: 	movslq	0x68(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	$0x0, 0x40(%rsp)
    000000d1: 	movq	%rdx, %rsi
    000000d4: 	addq	0x30(%rsp), %rdx
    000000d9: 	subl	%esi, %eax
    000000db: 	cmpq	%rcx, %rdx
    000000de: 	cmovbl	0x6c(%rsp), %eax
    000000e3: 	leal	-0x1(%rax), %ecx
    000000e6: 	movl	%eax, %eax
    000000e8: 	shlq	$0x3, %rax
    000000ec: 	movq	%rcx, 0x70(%rsp)
    000000f1: 	movq	%rax, 0x58(%rsp)
.Ltmp6864:
    000000f6: 	movl	$0xc8, %edi
    000000fb: 	callq	_Znwm@PLT # Offset: 251
    00000100: 	movq	$0x0, (%rax)
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	xorl	%esi, %esi
    0000010d: 	movq	%rax, %rdi
    00000110: 	movq	$0x0, 0x8(%rax)
    00000118: 	movq	%rax, %rbp
    0000011b: 	movups	%xmm0, 0x10(%rax)
    0000011f: 	movups	%xmm0, 0x20(%rax)
    00000123: 	movups	%xmm0, 0x30(%rax)
    00000127: 	movups	%xmm0, 0x40(%rax)
    0000012b: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 299
    00000130: 	movq	$0x0, 0x50(%rbp)
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	movl	$0x40, %edi
    00000141: 	movq	$0x8, 0x58(%rbp)
    00000149: 	movups	%xmm0, 0x60(%rbp)
    0000014d: 	movups	%xmm0, 0x70(%rbp)
    00000151: 	movups	%xmm0, 0x80(%rbp)
    00000158: 	movups	%xmm0, 0x90(%rbp)
    0000015f: 	callq	_Znwm@PLT # Offset: 351
    00000164: 	movq	0x58(%rbp), %rdx
    00000168: 	movq	%rax, 0x50(%rbp)
    0000016c: 	movl	$0x200, %edi
    00000171: 	leaq	-0x4(,%rdx,4), %rdx
    00000179: 	andq	$-0x8, %rdx
    0000017d: 	leaq	(%rax,%rdx), %rbx
    00000181: 	callq	_Znwm@PLT # Offset: 385
    00000186: 	movq	%rax, %xmm1
    0000018b: 	movq	%rax, (%rbx)
    0000018e: 	addq	$0x200, %rax
    00000194: 	movq	%rbx, %xmm7
    00000199: 	movq	%rax, %xmm0
    0000019e: 	punpcklqdq	%xmm1, %xmm1
    000001a2: 	movq	$0x0, 0xb0(%rbp)
    000001ad: 	movq	0x48(%rsp), %rax
    000001b2: 	punpcklqdq	%xmm7, %xmm0
    000001b6: 	movups	%xmm1, 0x60(%rbp)
    000001ba: 	movups	%xmm0, 0x70(%rbp)
    000001be: 	movups	%xmm0, 0x90(%rbp)
    000001c5: 	pxor	%xmm0, %xmm0
    000001c9: 	movq	$0x0, 0xb8(%rbp)
    000001d4: 	movl	$0x3f800000, 0xc0(%rbp)
    000001de: 	movups	%xmm1, 0x80(%rbp)
    000001e5: 	movups	%xmm0, 0xa0(%rbp)
    000001ec: 	cmpq	%rax, 0x28(%rsp)
    000001f1: 	je	.Ltmp6839 # Offset: 497
    000001f7: 	leaq	0x50(%rbp), %rcx
    000001fb: 	xorl	%ebx, %ebx
    000001fd: 	movq	%rax, 0x20(%rsp)
    00000202: 	movq	%rcx, 0x60(%rsp)
    00000207: 	testq	%rbx, %rbx
    0000020a: 	je	.Ltmp6840 # Offset: 522
.Ltmp6845:
    00000210: 	movq	0x20(%rsp), %rax
    00000215: 	pxor	%xmm6, %xmm6
    00000219: 	movsd	(%rax), %xmm0
    0000021d: 	movsd	%xmm0, 0x88(%rsp)
    00000226: 	ucomisd	%xmm6, %xmm0
    0000022a: 	jp	.Ltmp6841 # Offset: 554
    00000230: 	movl	$0x0, %eax
    00000235: 	jne	.Ltmp6841 # Offset: 565
.Ltmp6856:
    0000023b: 	xorl	%edx, %edx
    0000023d: 	divq	0xb0(%rbp)
    00000244: 	movq	0xb8(%rbp), %rax
    0000024b: 	movq	(%rax,%rdx,8), %rbx
    0000024f: 	leaq	(,%rdx,8), %r14
    00000257: 	testq	%rbx, %rbx
    0000025a: 	je	.Ltmp6842 # Offset: 602
    00000260: 	movq	0x20(%rsp), %rax
    00000265: 	movsd	(%rax), %xmm0
    00000269: 	jmp	.Ltmp6843 # Offset: 617
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6844:
    00000270: 	movq	0x10(%rbx), %rbx
    00000274: 	testq	%rbx, %rbx
    00000277: 	je	.Ltmp6842 # Offset: 631
.Ltmp6843:
    0000027d: 	ucomisd	(%rbx), %xmm0
    00000281: 	jp	.Ltmp6844 # Offset: 641
    00000283: 	jne	.Ltmp6844 # Offset: 643
    00000285: 	addq	$0x8, %rbx
.Ltmp6862:
    00000289: 	addq	$0x8, 0x20(%rsp)
    0000028f: 	movq	0x20(%rsp), %rax
    00000294: 	movsd	%xmm0, (%rbx)
    00000298: 	cmpq	%rax, 0x28(%rsp)
    0000029d: 	je	.Ltmp6839 # Offset: 669
    000002a3: 	movq	0xa8(%rbp), %rbx
    000002aa: 	testq	%rbx, %rbx
    000002ad: 	jne	.Ltmp6845 # Offset: 685
.Ltmp6840:
    000002b3: 	movss	DATAat0x537b0(%rip), %xmm2
    000002bb: 	movss	DATAat0x537a4(%rip), %xmm0
    000002c3: 	divss	0xc0(%rbp), %xmm0
    000002cb: 	movaps	%xmm0, %xmm1
    000002ce: 	movss	DATAat0x5379c(%rip), %xmm3
    000002d6: 	movq	0xb0(%rbp), %rax
    000002dd: 	andps	%xmm2, %xmm1
    000002e0: 	ucomiss	%xmm1, %xmm3
    000002e3: 	movq	%rax, 0x10(%rsp)
    000002e8: 	jbe	.Ltmp6846 # Offset: 744
    000002ea: 	cvttss2si	%xmm0, %eax
    000002ee: 	pxor	%xmm1, %xmm1
    000002f2: 	movaps	%xmm0, %xmm3
    000002f5: 	movss	DATAat0x53798(%rip), %xmm7
    000002fd: 	andnps	%xmm0, %xmm2
    00000300: 	cvtsi2ss	%eax, %xmm1
    00000304: 	cmpnless	%xmm1, %xmm3
    00000309: 	andps	%xmm7, %xmm3
    0000030c: 	addss	%xmm3, %xmm1
    00000310: 	orps	%xmm2, %xmm1
    00000313: 	movaps	%xmm1, %xmm0
.Ltmp6846:
    00000316: 	comiss	DATAat0x537a0(%rip), %xmm0
    0000031d: 	jae	.Ltmp6847 # Offset: 797
    00000323: 	cvttss2si	%xmm0, %rax
.Ltmp6863:
    00000328: 	movl	$0x8, %edx
    0000032d: 	movq	0x10(%rsp), %r15
    00000332: 	movq	$0x8, 0xb0(%rbp)
    0000033d: 	cmpq	%rdx, %rax
    00000340: 	cmovbq	%rdx, %rax
    00000344: 	movq	%rax, %rdx
    00000347: 	shrq	%rdx
    0000034a: 	addq	%rdx, %rax
    0000034d: 	movq	%rax, 0xa8(%rbp)
    00000354: 	cmpq	$0x8, %r15
    00000358: 	je	.Ltmp6845 # Offset: 856
    0000035e: 	movl	$0x40, %edi
    00000363: 	callq	_Znam@PLT # Offset: 867
    00000368: 	pxor	%xmm0, %xmm0
    0000036c: 	movq	%rax, %r14
    0000036f: 	movups	%xmm0, (%rax)
    00000372: 	movups	%xmm0, 0x10(%rax)
    00000376: 	movups	%xmm0, 0x20(%rax)
    0000037a: 	movups	%xmm0, 0x30(%rax)
    0000037e: 	movq	0xb8(%rbp), %rax
    00000385: 	movq	%rax, (%rsp)
    00000389: 	testq	%r15, %r15
    0000038c: 	je	.Ltmp6848 # Offset: 908
    00000392: 	movl	$0xc70f6907, %r12d
    00000398: 	movq	%r14, %r15
    0000039b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6854:
    000003a0: 	movq	(%rsp), %rax
    000003a4: 	movq	(%rax,%rbx,8), %r13
    000003a8: 	testq	%r13, %r13
    000003ab: 	jne	.Ltmp6849 # Offset: 939
    000003ad: 	jmp	.Ltmp6850 # Offset: 941
    000003af: 	nop # Size: 1
.Ltmp6852:
    000003b0: 	movq	(%r15), %rax
    000003b3: 	movq	%rax, 0x10(%r13)
    000003b7: 	movq	%r13, (%r15)
    000003ba: 	testq	%r14, %r14
    000003bd: 	je	.Ltmp6850 # Offset: 957
.Ltmp6853:
    000003bf: 	movq	%r14, %r13
.Ltmp6849:
    000003c2: 	movsd	(%r13), %xmm0
    000003c8: 	pxor	%xmm4, %xmm4
    000003cc: 	movq	0x10(%r13), %r14
    000003d0: 	movsd	%xmm0, 0x88(%rsp)
    000003d9: 	ucomisd	%xmm4, %xmm0
    000003dd: 	jp	.Ltmp6851 # Offset: 989
    000003df: 	je	.Ltmp6852 # Offset: 991
.Ltmp6851:
    000003e1: 	movq	%r12, %rdx
    000003e4: 	leaq	0x88(%rsp), %rdi
    000003ec: 	movl	$0x8, %esi
    000003f1: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1009
    000003f6: 	xorl	%edx, %edx
    000003f8: 	divq	0xb0(%rbp)
    000003ff: 	leaq	(%r15,%rdx,8), %rax
    00000403: 	movq	(%rax), %rdx
    00000406: 	movq	%rdx, 0x10(%r13)
    0000040a: 	movq	%r13, (%rax)
    0000040d: 	testq	%r14, %r14
    00000410: 	jne	.Ltmp6853 # Offset: 1040
.Ltmp6850:
    00000412: 	addq	$0x1, %rbx
    00000416: 	cmpq	%rbx, 0x10(%rsp)
    0000041b: 	jne	.Ltmp6854 # Offset: 1051
    0000041d: 	movq	0xb8(%rbp), %rax
    00000424: 	movq	%r15, %r14
    00000427: 	movq	%rax, (%rsp)
.Ltmp6848:
    0000042b: 	movq	(%rsp), %rax
    0000042f: 	testq	%rax, %rax
    00000432: 	je	.Ltmp6855 # Offset: 1074
    00000434: 	movq	%rax, %rdi
    00000437: 	callq	_ZdaPv@PLT # Offset: 1079
.Ltmp6855:
    0000043c: 	movq	%r14, 0xb8(%rbp)
    00000443: 	jmp	.Ltmp6845 # Offset: 1091
    00000448: 	nopl	(%rax,%rax) # Size: 8
.Ltmp6841:
    00000450: 	leaq	0x88(%rsp), %rdi
    00000458: 	movl	$0xc70f6907, %edx
    0000045d: 	movl	$0x8, %esi
    00000462: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1122
    00000467: 	jmp	.Ltmp6856 # Offset: 1127
    0000046c: 	nopl	(%rax) # Size: 4
.Ltmp6842:
    00000470: 	movq	0x48(%rbp), %rdx
    00000474: 	movq	0x30(%rbp), %rdi
    00000478: 	movq	0x38(%rbp), %rcx
    0000047c: 	movq	%rdx, %rax
    0000047f: 	subq	0x28(%rbp), %rax
    00000483: 	movq	%rdi, %rsi
    00000486: 	sarq	$0x3, %rax
    0000048a: 	cmpq	$0x1, %rdx
    0000048e: 	adcq	$-0x1, %rax
    00000492: 	subq	%rcx, %rsi
    00000495: 	sarq	$0x3, %rsi
    00000499: 	shlq	$0x6, %rax
    0000049d: 	addq	%rsi, %rax
    000004a0: 	movq	0x20(%rbp), %rsi
    000004a4: 	subq	0x10(%rbp), %rsi
    000004a8: 	sarq	$0x3, %rsi
    000004ac: 	addq	%rsi, %rax
    000004af: 	je	.Ltmp6857 # Offset: 1199
.Ltmp6906:
    000004b5: 	cmpq	%rcx, %rdi
    000004b8: 	je	.Ltmp6858 # Offset: 1208
    000004be: 	movq	-0x8(%rdi), %r12
    000004c2: 	subq	$0x8, %rdi
    000004c6: 	movq	%rdi, 0x30(%rbp)
.Ltmp6897:
    000004ca: 	movq	0x60(%rbp), %rcx
    000004ce: 	movq	0x78(%rbp), %rdx
    000004d2: 	movq	%rcx, %rax
    000004d5: 	subq	0x68(%rbp), %rax
    000004d9: 	sarq	$0x5, %rax
    000004dd: 	addq	%r12, %rax
    000004e0: 	js	.Ltmp6859 # Offset: 1248
    000004e6: 	cmpq	$0xf, %rax
    000004ea: 	jg	.Ltmp6860 # Offset: 1258
    000004f0: 	movq	%r12, %rbx
    000004f3: 	shlq	$0x5, %rbx
    000004f7: 	leaq	(%rcx,%rbx), %rax
    000004fb: 	movq	%rax, 0x10(%rsp)
    00000500: 	movq	%rax, %rcx
    00000503: 	movq	%r12, 0x18(%rax)
.Ltmp6878:
    00000507: 	movq	0x20(%rsp), %rax
    0000050c: 	addq	0xb8(%rbp), %r14
    00000513: 	movq	0xa8(%rbp), %r12
    0000051a: 	movsd	(%rax), %xmm0
    0000051e: 	movq	(%r14), %rax
    00000521: 	movq	$0x0, 0x8(%rcx)
    00000529: 	movq	%rax, 0x10(%rcx)
    0000052d: 	movq	0xa0(%rbp), %rax
    00000534: 	movsd	%xmm0, (%rcx)
    00000538: 	addq	$0x1, %rax
    0000053c: 	movq	%rcx, (%r14)
    0000053f: 	movq	%rax, 0xa0(%rbp)
    00000546: 	cmpq	%r12, %rax
    00000549: 	ja	.Ltmp6861 # Offset: 1353
.Ltmp6883:
    0000054f: 	movq	0x10(%rsp), %rbx
    00000554: 	movq	0x20(%rsp), %rax
    00000559: 	addq	$0x8, %rbx
    0000055d: 	movsd	(%rax), %xmm0
    00000561: 	jmp	.Ltmp6862 # Offset: 1377
.Ltmp6847:
    00000566: 	subss	DATAat0x537a0(%rip), %xmm0
    0000056e: 	cvttss2si	%xmm0, %rax
    00000573: 	btcq	$0x3f, %rax
    00000578: 	jmp	.Ltmp6863 # Offset: 1400
.Ltmp6839:
    0000057d: 	movq	0x40(%rsp), %rax
    00000582: 	movq	0x90(%rsp), %r13
    0000058a: 	movq	%rbp, (%r13,%rax)
    0000058f: 	addq	$0x8, %rax
    00000593: 	movq	%rax, 0x40(%rsp)
    00000598: 	cmpq	0x58(%rsp), %rax
    0000059d: 	jne	.Ltmp6864 # Offset: 1437
    000005a3: 	callq	clock@PLT # Offset: 1443
    000005a8: 	movq	%r13, %rbx
    000005ab: 	movq	%rax, start_time(%rip)
    000005b2: 	movq	0x70(%rsp), %rax
    000005b7: 	leaq	0x8(%r13,%rax,8), %r14
    000005bc: 	nopl	(%rax) # Size: 4
.Ltmp6873:
    000005c0: 	movq	(%rbx), %r12
    000005c3: 	testq	%r12, %r12
    000005c6: 	je	.Ltmp6865 # Offset: 1478
    000005cc: 	movq	0xb8(%r12), %rdi
    000005d4: 	testq	%rdi, %rdi
    000005d7: 	je	.Ltmp6866 # Offset: 1495
    000005d9: 	callq	_ZdaPv@PLT # Offset: 1497
.Ltmp6866:
    000005de: 	movq	0x50(%r12), %rdi
    000005e3: 	testq	%rdi, %rdi
    000005e6: 	je	.Ltmp6867 # Offset: 1510
    000005e8: 	movq	0x98(%r12), %rax
    000005f0: 	movq	0x78(%r12), %rbp
    000005f5: 	leaq	0x8(%rax), %r15
    000005f9: 	cmpq	%rbp, %r15
    000005fc: 	jbe	.Ltmp6868 # Offset: 1532
    000005fe: 	nop # Size: 2
.Ltmp6869:
    00000600: 	movq	(%rbp), %rdi
    00000604: 	movl	$0x200, %esi
    00000609: 	addq	$0x8, %rbp
    0000060d: 	callq	_ZdlPvm@PLT # Offset: 1549
    00000612: 	cmpq	%rbp, %r15
    00000615: 	ja	.Ltmp6869 # Offset: 1557
    00000617: 	movq	0x50(%r12), %rdi
.Ltmp6868:
    0000061c: 	movq	0x58(%r12), %rax
    00000621: 	leaq	(,%rax,8), %rsi
    00000629: 	callq	_ZdlPvm@PLT # Offset: 1577
.Ltmp6867:
    0000062e: 	movq	(%r12), %rdi
    00000632: 	testq	%rdi, %rdi
    00000635: 	je	.Ltmp6870 # Offset: 1589
    00000637: 	movq	0x48(%r12), %rax
    0000063c: 	movq	0x28(%r12), %rbp
    00000641: 	leaq	0x8(%rax), %r15
    00000645: 	cmpq	%rbp, %r15
    00000648: 	jbe	.Ltmp6871 # Offset: 1608
    0000064a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6872:
    00000650: 	movq	(%rbp), %rdi
    00000654: 	movl	$0x200, %esi
    00000659: 	addq	$0x8, %rbp
    0000065d: 	callq	_ZdlPvm@PLT # Offset: 1629
    00000662: 	cmpq	%rbp, %r15
    00000665: 	ja	.Ltmp6872 # Offset: 1637
    00000667: 	movq	(%r12), %rdi
.Ltmp6871:
    0000066b: 	movq	0x8(%r12), %rax
    00000670: 	leaq	(,%rax,8), %rsi
    00000678: 	callq	_ZdlPvm@PLT # Offset: 1656
.Ltmp6870:
    0000067d: 	movl	$0xc8, %esi
    00000682: 	movq	%r12, %rdi
    00000685: 	callq	_ZdlPvm@PLT # Offset: 1669
.Ltmp6865:
    0000068a: 	movq	$0x0, (%rbx)
    00000691: 	addq	$0x8, %rbx
    00000695: 	cmpq	%r14, %rbx
    00000698: 	jne	.Ltmp6873 # Offset: 1688
    0000069e: 	callq	clock@PLT # Offset: 1694
    000006a3: 	pxor	%xmm0, %xmm0
    000006a7: 	movl	0x30(%rsp), %ecx
    000006ab: 	addl	%ecx, 0x68(%rsp)
    000006af: 	movq	%rax, end_time(%rip)
    000006b6: 	subq	start_time(%rip), %rax
    000006bd: 	cvtsi2sd	%rax, %xmm0
    000006c2: 	movl	0x68(%rsp), %ecx
    000006c6: 	divsd	DATAat0x53788(%rip), %xmm0
    000006ce: 	addsd	0x50(%rsp), %xmm0
    000006d4: 	movl	iterations(%rip), %eax
    000006da: 	movsd	%xmm0, 0x50(%rsp)
    000006e0: 	cmpl	%ecx, %eax
    000006e2: 	jg	.Ltmp6874 # Offset: 1762
.Ltmp6914:
    000006e8: 	movq	0x78(%rsp), %rdi
    000006ed: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1773
    000006f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006f9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000700: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000707: 	je	.Ltmp6875 # Offset: 1799
.Ltmp6913:
    0000070d: 	movq	-0x20(%rax), %rdi
    00000711: 	movsd	0x50(%rsp), %xmm0
    00000717: 	callq	_Z13record_resultdPKc # Offset: 1815
    0000071c: 	testq	%r13, %r13
    0000071f: 	je	.Ltmp6876 # Offset: 1823
    00000725: 	movq	0xa8(%rsp), %rax
    0000072d: 	subq	%fs:0x28, %rax
    00000736: 	jne	.Ltmp6877 # Offset: 1846
    0000073c: 	movq	0xa0(%rsp), %rsi
    00000744: 	addq	$0xb8, %rsp
    0000074b: 	movq	%r13, %rdi
    0000074e: 	popq	%rbx
    0000074f: 	popq	%rbp
    00000750: 	subq	%r13, %rsi
    00000753: 	popq	%r12
    00000755: 	popq	%r13
    00000757: 	popq	%r14
    00000759: 	popq	%r15
    0000075b: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 1883
.Ltmp6860:
    00000760: 	movq	%rax, %rcx
    00000763: 	andl	$0xf, %eax
    00000766: 	sarq	$0x4, %rcx
.Ltmp6898:
    0000076a: 	movq	(%rdx,%rcx,8), %rbx
    0000076e: 	shlq	$0x5, %rax
    00000772: 	addq	%rax, %rbx
    00000775: 	movq	%rbx, 0x10(%rsp)
    0000077a: 	movq	%rbx, %rcx
    0000077d: 	movq	%r12, 0x18(%rbx)
    00000781: 	jmp	.Ltmp6878 # Offset: 1921
.Ltmp6861:
    00000786: 	movq	0xb0(%rbp), %rax
    0000078d: 	movss	0xc0(%rbp), %xmm1
    00000795: 	movq	%rax, (%rsp)
    00000799: 	testq	%r12, %r12
    0000079c: 	je	.Ltmp6879 # Offset: 1948
    000007a2: 	js	.Ltmp6880 # Offset: 1954
    000007a8: 	pxor	%xmm0, %xmm0
    000007ac: 	cvtsi2ss	%r12, %xmm0
.Ltmp6909:
    000007b1: 	divss	%xmm1, %xmm0
    000007b5: 	movss	DATAat0x537b0(%rip), %xmm2
    000007bd: 	movss	DATAat0x5379c(%rip), %xmm3
    000007c5: 	movaps	%xmm0, %xmm1
    000007c8: 	andps	%xmm2, %xmm1
    000007cb: 	ucomiss	%xmm1, %xmm3
    000007ce: 	jbe	.Ltmp6881 # Offset: 1998
    000007d0: 	cvttss2si	%xmm0, %eax
    000007d4: 	pxor	%xmm1, %xmm1
    000007d8: 	movaps	%xmm0, %xmm3
    000007db: 	movss	DATAat0x53798(%rip), %xmm7
    000007e3: 	andnps	%xmm0, %xmm2
    000007e6: 	cvtsi2ss	%eax, %xmm1
    000007ea: 	cmpnless	%xmm1, %xmm3
    000007ef: 	andps	%xmm7, %xmm3
    000007f2: 	addss	%xmm3, %xmm1
    000007f6: 	orps	%xmm2, %xmm1
    000007f9: 	movaps	%xmm1, %xmm0
.Ltmp6881:
    000007fc: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000803: 	jae	.Ltmp6882 # Offset: 2051
    00000809: 	cvttss2si	%xmm0, %rax
.Ltmp6908:
    0000080e: 	movl	$0x8, %edx
    00000813: 	movq	%r12, %xmm7
    00000818: 	cmpq	%rdx, %rax
    0000081b: 	cmovbq	%rdx, %rax
    0000081f: 	movq	%rax, %rdx
    00000822: 	shrq	%rdx
    00000825: 	addq	%rax, %rdx
    00000828: 	movq	%rdx, %xmm0
    0000082d: 	punpcklqdq	%xmm7, %xmm0
    00000831: 	movups	%xmm0, 0xa8(%rbp)
    00000838: 	cmpq	(%rsp), %r12
    0000083c: 	je	.Ltmp6883 # Offset: 2108
    00000842: 	movq	%r12, %rax
    00000845: 	shrq	$0x3c, %rax
    00000849: 	jne	.Ltmp6884 # Offset: 2121
    0000084f: 	leaq	(,%r12,8), %rdi
.Ltmp6902:
    00000857: 	callq	_Znam@PLT # Offset: 2135
    0000085c: 	xorl	%esi, %esi
    0000085e: 	leaq	(,%r12,8), %rdx
    00000866: 	movq	%rax, %rdi
    00000869: 	movq	%rax, %r15
    0000086c: 	callq	memset@PLT # Offset: 2156
    00000871: 	cmpq	$0x0, (%rsp)
    00000876: 	movq	0xb8(%rbp), %r13
    0000087d: 	je	.Ltmp6885 # Offset: 2173
    00000883: 	movq	%r13, 0x38(%rsp)
    00000888: 	xorl	%r12d, %r12d
    0000088b: 	movl	$0xc70f6907, %r14d
    00000891: 	movq	%r15, %r13
    00000894: 	nopl	(%rax) # Size: 4
.Ltmp6891:
    00000898: 	movq	0x38(%rsp), %rax
    0000089d: 	movq	(%rax,%r12,8), %rbx
    000008a1: 	testq	%rbx, %rbx
    000008a4: 	jne	.Ltmp6886 # Offset: 2212
    000008a6: 	jmp	.Ltmp6887 # Offset: 2214
    000008a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp6889:
    000008b0: 	movq	(%r13), %rax
    000008b4: 	movq	%rax, 0x10(%rbx)
    000008b8: 	movq	%rbx, (%r13)
    000008bc: 	testq	%r15, %r15
    000008bf: 	je	.Ltmp6887 # Offset: 2239
.Ltmp6890:
    000008c1: 	movq	%r15, %rbx
.Ltmp6886:
    000008c4: 	movsd	(%rbx), %xmm0
    000008c8: 	pxor	%xmm5, %xmm5
    000008cc: 	movq	0x10(%rbx), %r15
    000008d0: 	movsd	%xmm0, 0x88(%rsp)
    000008d9: 	ucomisd	%xmm5, %xmm0
    000008dd: 	jp	.Ltmp6888 # Offset: 2269
    000008df: 	je	.Ltmp6889 # Offset: 2271
.Ltmp6888:
    000008e1: 	movq	%r14, %rdx
    000008e4: 	leaq	0x88(%rsp), %rdi
    000008ec: 	movl	$0x8, %esi
    000008f1: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 2289
    000008f6: 	xorl	%edx, %edx
    000008f8: 	divq	0xb0(%rbp)
    000008ff: 	leaq	(%r13,%rdx,8), %rax
    00000904: 	movq	(%rax), %rdx
    00000907: 	movq	%rdx, 0x10(%rbx)
    0000090b: 	movq	%rbx, (%rax)
    0000090e: 	testq	%r15, %r15
    00000911: 	jne	.Ltmp6890 # Offset: 2321
.Ltmp6887:
    00000913: 	addq	$0x1, %r12
    00000917: 	cmpq	%r12, (%rsp)
    0000091b: 	jne	.Ltmp6891 # Offset: 2331
    00000921: 	movq	%r13, %r15
    00000924: 	movq	0xb8(%rbp), %r13
.Ltmp6885:
    0000092b: 	testq	%r13, %r13
    0000092e: 	je	.Ltmp6892 # Offset: 2350
    00000930: 	movq	%r13, %rdi
    00000933: 	callq	_ZdaPv@PLT # Offset: 2355
.Ltmp6892:
    00000938: 	movq	%r15, 0xb8(%rbp)
    0000093f: 	jmp	.Ltmp6883 # Offset: 2367
.Ltmp6857:
    00000944: 	movq	0x98(%rbp), %r8
    0000094b: 	movq	0x78(%rbp), %rax
    0000094f: 	movq	0x70(%rbp), %rsi
    00000953: 	movq	0x80(%rbp), %r12
    0000095a: 	movq	%r8, %r10
    0000095d: 	movq	0x60(%rbp), %r9
    00000961: 	subq	%rax, %r10
    00000964: 	sarq	$0x3, %r10
    00000968: 	cmpq	$0x1, %r8
    0000096c: 	adcq	$-0x1, %r10
    00000970: 	subq	0x88(%rbp), %r12
    00000977: 	shlq	$0x4, %r10
    0000097b: 	sarq	$0x5, %r12
    0000097f: 	addq	%r10, %r12
    00000982: 	movq	%rsi, %r10
    00000985: 	subq	%r9, %r10
    00000988: 	sarq	$0x5, %r10
    0000098c: 	addq	%r10, %r12
    0000098f: 	leaq	0x80(%r12), %rbx
    00000997: 	cmpq	%rbx, %r12
    0000099a: 	jb	.Ltmp6893 # Offset: 2458
    000009a0: 	movq	0x68(%rbp), %r11
    000009a4: 	movq	%r9, %r10
    000009a7: 	subq	%r11, %r10
    000009aa: 	sarq	$0x5, %r10
    000009ae: 	addq	%rbx, %r10
    000009b1: 	js	.Ltmp6894 # Offset: 2481
    000009b7: 	cmpq	$0xf, %r10
    000009bb: 	jg	.Ltmp6895 # Offset: 2491
    000009c1: 	shlq	$0x5, %rbx
    000009c5: 	addq	%rbx, %r9
    000009c8: 	jmp	.Ltmp6896 # Offset: 2504
    000009cd: 	nopl	(%rax) # Size: 3
.Ltmp6858:
    000009d0: 	movq	-0x8(%rdx), %rax
    000009d4: 	movl	$0x200, %esi
    000009d9: 	movq	0x1f8(%rax), %r12
    000009e0: 	callq	_ZdlPvm@PLT # Offset: 2528
    000009e5: 	movq	0x48(%rbp), %rdx
    000009e9: 	movq	-0x8(%rdx), %rax
    000009ed: 	subq	$0x8, %rdx
    000009f1: 	leaq	0x1f8(%rax), %rcx
    000009f8: 	movq	%rax, %xmm7
    000009fd: 	addq	$0x200, %rax
    00000a03: 	movq	%rcx, %xmm0
    00000a08: 	punpcklqdq	%xmm7, %xmm0
    00000a0c: 	movq	%rdx, %xmm7
    00000a11: 	movups	%xmm0, 0x30(%rbp)
    00000a15: 	movq	%rax, %xmm0
    00000a1a: 	punpcklqdq	%xmm7, %xmm0
    00000a1e: 	movups	%xmm0, 0x40(%rbp)
    00000a22: 	jmp	.Ltmp6897 # Offset: 2594
.Ltmp6859:
    00000a27: 	movq	%rax, %rcx
    00000a2a: 	notq	%rcx
    00000a2d: 	shrq	$0x4, %rcx
    00000a31: 	notq	%rcx
    00000a34: 	movq	%rcx, %rsi
    00000a37: 	shlq	$0x4, %rsi
    00000a3b: 	subq	%rsi, %rax
    00000a3e: 	jmp	.Ltmp6898 # Offset: 2622
.Ltmp6836:
    00000a43: 	movq	$0x3e8, 0x30(%rsp)
.Ltmp6837:
    00000a4c: 	movq	$0x0, 0xa0(%rsp)
    00000a58: 	pxor	%xmm0, %xmm0
    00000a5c: 	movaps	%xmm0, 0x90(%rsp)
    00000a64: 	jmp	.Ltmp6899 # Offset: 2660
.Ltmp6879:
    00000a69: 	movss	DATAat0x537a4(%rip), %xmm0
    00000a71: 	movss	DATAat0x5379c(%rip), %xmm2
    00000a79: 	divss	%xmm1, %xmm0
    00000a7d: 	movss	DATAat0x537b0(%rip), %xmm1
    00000a85: 	andps	%xmm0, %xmm1
    00000a88: 	ucomiss	%xmm1, %xmm2
    00000a8b: 	jbe	.Ltmp6900 # Offset: 2699
    00000a8d: 	cvttss2si	%xmm0, %eax
    00000a91: 	pxor	%xmm1, %xmm1
    00000a95: 	movaps	%xmm0, %xmm2
    00000a98: 	movss	DATAat0x53798(%rip), %xmm7
    00000aa0: 	cvtsi2ss	%eax, %xmm1
    00000aa4: 	cmpnless	%xmm1, %xmm2
    00000aa9: 	andps	%xmm7, %xmm2
    00000aac: 	addss	%xmm2, %xmm1
    00000ab0: 	movss	DATAat0x537b0(%rip), %xmm2
    00000ab8: 	andnps	%xmm0, %xmm2
    00000abb: 	orps	%xmm2, %xmm1
    00000abe: 	movaps	%xmm1, %xmm0
.Ltmp6900:
    00000ac1: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000ac8: 	jae	.Ltmp6901 # Offset: 2760
    00000ace: 	cvttss2si	%xmm0, %rax
.Ltmp6907:
    00000ad3: 	movq	$0x8, 0xb0(%rbp)
    00000ade: 	movl	$0x8, %edx
    00000ae3: 	cmpq	%rdx, %rax
    00000ae6: 	cmovbq	%rdx, %rax
    00000aea: 	movq	%rax, %rdx
    00000aed: 	shrq	%rdx
    00000af0: 	addq	%rdx, %rax
    00000af3: 	cmpq	$0x8, (%rsp)
    00000af8: 	movq	%rax, 0xa8(%rbp)
    00000aff: 	je	.Ltmp6883 # Offset: 2815
    00000b05: 	movl	$0x40, %edi
    00000b0a: 	movl	$0x8, %r12d
    00000b10: 	jmp	.Ltmp6902 # Offset: 2832
.Ltmp6893:
    00000b15: 	movq	0x60(%rsp), %rdi
    00000b1a: 	movl	$0x80, %esi
    00000b1f: 	callq	"_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 2847
    00000b24: 	movq	0x30(%rbp), %rdi
    00000b28: 	leaq	0x88(%rsp), %r15
    00000b30: 	jmp	.Ltmp6903 # Offset: 2864
    00000b32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6905:
    00000b38: 	movq	%rbx, (%rdi)
    00000b3b: 	addq	$0x8, %rdi
    00000b3f: 	movq	%rdi, 0x30(%rbp)
    00000b43: 	cmpq	%rbx, %r12
    00000b46: 	je	.Ltmp6904 # Offset: 2886
.Ltmp6903:
    00000b48: 	movq	0x40(%rbp), %rax
    00000b4c: 	subq	$0x1, %rbx
    00000b50: 	movq	%rbx, 0x88(%rsp)
    00000b58: 	subq	$0x8, %rax
    00000b5c: 	cmpq	%rax, %rdi
    00000b5f: 	jne	.Ltmp6905 # Offset: 2911
    00000b61: 	movq	%r15, %rsi
    00000b64: 	movq	%rbp, %rdi
    00000b67: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 2919
    00000b6c: 	movq	0x30(%rbp), %rdi
    00000b70: 	cmpq	%rbx, %r12
    00000b73: 	jne	.Ltmp6903 # Offset: 2931
.Ltmp6904:
    00000b75: 	movq	0x38(%rbp), %rcx
    00000b79: 	movq	0x48(%rbp), %rdx
    00000b7d: 	jmp	.Ltmp6906 # Offset: 2941
.Ltmp6901:
    00000b82: 	subss	DATAat0x537a0(%rip), %xmm0
    00000b8a: 	cvttss2si	%xmm0, %rax
    00000b8f: 	btcq	$0x3f, %rax
    00000b94: 	jmp	.Ltmp6907 # Offset: 2964
.Ltmp6882:
    00000b99: 	subss	DATAat0x537a0(%rip), %xmm0
    00000ba1: 	cvttss2si	%xmm0, %rax
    00000ba6: 	btcq	$0x3f, %rax
    00000bab: 	jmp	.Ltmp6908 # Offset: 2987
.Ltmp6880:
    00000bb0: 	movq	%r12, %rax
    00000bb3: 	movq	%r12, %rdx
    00000bb6: 	pxor	%xmm0, %xmm0
    00000bba: 	shrq	%rax
    00000bbd: 	andl	$0x1, %edx
    00000bc0: 	orq	%rdx, %rax
    00000bc3: 	cvtsi2ss	%rax, %xmm0
    00000bc8: 	addss	%xmm0, %xmm0
    00000bcc: 	jmp	.Ltmp6909 # Offset: 3020
.Ltmp6876:
    00000bd1: 	movq	0xa8(%rsp), %rax
    00000bd9: 	subq	%fs:0x28, %rax
    00000be2: 	jne	.Ltmp6877 # Offset: 3042
    00000be8: 	addq	$0xb8, %rsp
    00000bef: 	popq	%rbx
    00000bf0: 	popq	%rbp
    00000bf1: 	popq	%r12
    00000bf3: 	popq	%r13
    00000bf5: 	popq	%r14
    00000bf7: 	popq	%r15
    00000bf9: 	retq # Offset: 3065
.Ltmp6894:
    00000bfa: 	movq	%r10, %rbx
    00000bfd: 	notq	%rbx
    00000c00: 	shrq	$0x4, %rbx
    00000c04: 	notq	%rbx
.Ltmp6912:
    00000c07: 	leaq	(%rax,%rbx,8), %rax
    00000c0b: 	movq	%r10, %r9
    00000c0e: 	shlq	$0x4, %rbx
    00000c12: 	movq	(%rax), %r11
    00000c15: 	subq	%rbx, %r9
    00000c18: 	shlq	$0x5, %r9
    00000c1c: 	leaq	0x200(%r11), %rsi
    00000c23: 	addq	%r11, %r9
.Ltmp6896:
    00000c26: 	movq	%r11, %xmm2
    00000c2b: 	movq	%r9, %xmm7
    00000c30: 	leaq	0x8(%r8), %rbx
    00000c34: 	punpcklqdq	%xmm2, %xmm7
    00000c38: 	movq	%rax, %xmm2
    00000c3d: 	leaq	0x8(%rax), %r12
    00000c41: 	movaps	%xmm7, (%rsp)
    00000c45: 	movq	%rsi, %xmm7
    00000c4a: 	punpcklqdq	%xmm2, %xmm7
    00000c4e: 	movaps	%xmm7, 0x10(%rsp)
    00000c53: 	cmpq	%r12, %rbx
    00000c56: 	jbe	.Ltmp6910 # Offset: 3158
.Ltmp6911:
    00000c58: 	movq	(%r12), %rdi
    00000c5c: 	movl	$0x200, %esi
    00000c61: 	addq	$0x8, %r12
    00000c65: 	callq	_ZdlPvm@PLT # Offset: 3173
    00000c6a: 	cmpq	%r12, %rbx
    00000c6d: 	ja	.Ltmp6911 # Offset: 3181
    00000c6f: 	movq	0x30(%rbp), %rdi
    00000c73: 	movq	0x38(%rbp), %rcx
    00000c77: 	movq	0x48(%rbp), %rdx
.Ltmp6910:
    00000c7b: 	movdqa	(%rsp), %xmm7
    00000c80: 	movups	%xmm7, 0x80(%rbp)
    00000c87: 	movdqa	0x10(%rsp), %xmm7
    00000c8d: 	movups	%xmm7, 0x90(%rbp)
    00000c94: 	jmp	.Ltmp6906 # Offset: 3220
.Ltmp6895:
    00000c99: 	movq	%r10, %rbx
    00000c9c: 	sarq	$0x4, %rbx
    00000ca0: 	jmp	.Ltmp6912 # Offset: 3232
.Ltmp6875:
    00000ca5: 	movq	-0x8(%rdx), %rax
    00000ca9: 	addq	$0x200, %rax
    00000caf: 	jmp	.Ltmp6913 # Offset: 3247
.Ltmp6838:
    00000cb4: 	pxor	%xmm7, %xmm7
    00000cb8: 	movq	0x90(%rsp), %r13
    00000cc0: 	movsd	%xmm7, 0x50(%rsp)
    00000cc6: 	jmp	.Ltmp6914 # Offset: 3270
.Ltmp6877:
    00000ccb: 	callq	__stack_chk_fail@PLT # Offset: 3275
    00000cd0: 	endbr64
    00000cd4: 	movq	%rax, %rdi
    00000cd7: 	jmp	.Ltmp6915 # Offset: 3287
.Ltmp6884:
    00000cd9: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 3289
    00000cde: 	endbr64
    00000ce2: 	movq	%rax, %rbx
    00000ce5: 	jmp	.Ltmp6916 # Offset: 3301
    00000ce7: 	endbr64
    00000ceb: 	movq	%rax, %rbp
    00000cee: 	jmp	.Ltmp6917 # Offset: 3310
.Ltmp6920:
    00000cf0: 	callq	__cxa_end_catch@PLT # Offset: 3312
.Ltmp6916:
    00000cf5: 	movq	%rbp, %rdi
    00000cf8: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 3320
.Ltmp6919:
    00000cfd: 	movq	%rbp, %rdi
    00000d00: 	movl	$0xc8, %esi
    00000d05: 	movq	%rbx, %rbp
    00000d08: 	callq	_ZdlPvm@PLT # Offset: 3336
.Ltmp6917:
    00000d0d: 	movq	0x90(%rsp), %rdi
    00000d15: 	movq	0xa0(%rsp), %rsi
    00000d1d: 	subq	%rdi, %rsi
    00000d20: 	testq	%rdi, %rdi
    00000d23: 	je	.Ltmp6918 # Offset: 3363
    00000d25: 	callq	_ZdlPvm@PLT # Offset: 3365
.Ltmp6918:
    00000d2a: 	movq	%rbp, %rdi
    00000d2d: 	callq	_Unwind_Resume@PLT # Offset: 3373
    00000d32: 	endbr64
    00000d36: 	movq	%rax, %rbx
    00000d39: 	jmp	.Ltmp6919 # Offset: 3385
.Ltmp6915:
    00000d3b: 	callq	__cxa_begin_catch@PLT # Offset: 3387
    00000d40: 	callq	__cxa_rethrow@PLT # Offset: 3392
    00000d45: 	endbr64
    00000d49: 	movq	%rax, %r12
    00000d4c: 	callq	__cxa_end_catch@PLT # Offset: 3404
    00000d51: 	movq	%r12, %rdi
    00000d54: 	callq	__cxa_begin_catch@PLT # Offset: 3412
    00000d59: 	movq	0x58(%rbp), %rax
    00000d5d: 	movq	0x50(%rbp), %rdi
    00000d61: 	leaq	(,%rax,8), %rsi
    00000d69: 	callq	_ZdlPvm@PLT # Offset: 3433
    00000d6e: 	movq	$0x0, 0x50(%rbp)
    00000d76: 	movq	$0x0, 0x58(%rbp)
    00000d7e: 	callq	__cxa_rethrow@PLT # Offset: 3454
    00000d83: 	endbr64
    00000d87: 	movq	%rax, %rbx
    00000d8a: 	jmp	.Ltmp6920 # Offset: 3466
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_delete_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10testDeleteIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 343
  State       : disassembled
  Address     : 0x48db0
  Size        : 0x9fc
  MaxSize     : 0xa00
  Offset      : 0x48db0
  Section     : .text
  Orc Section : .local.text._Z10testDeleteIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0342:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdx, %rbx
    00000014: 	subq	$0xa8, %rsp
    0000001b: 	movq	%rsi, 0x20(%rsp)
    00000020: 	movl	%r8d, 0x2c(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x98(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movl	%ecx, iterations(%rip)
    0000003e: 	testq	%rsi, %rsi
    00000041: 	je	.Ltmp6921 # Offset: 65
    00000047: 	leaq	-0x1(%rsi), %rax
    0000004b: 	movq	%rsi, %rcx
    0000004e: 	cmpq	$0x2, %rax
    00000052: 	jbe	.Ltmp6922 # Offset: 82
    00000058: 	shrq	$0x2, %rcx
    0000005c: 	movdqa	DATAat0x537d0(%rip), %xmm1
    00000064: 	movdqa	DATAat0x537e0(%rip), %xmm3
    0000006c: 	movq	%rdi, %rax
    0000006f: 	movq	%rcx, %rdx
    00000072: 	shlq	$0x5, %rdx
    00000076: 	addq	%rdi, %rdx
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp6923:
    00000080: 	movdqa	%xmm1, %xmm2
    00000084: 	addq	$0x20, %rax
    00000088: 	paddd	%xmm3, %xmm1
    0000008c: 	movdqa	%xmm2, %xmm0
    00000090: 	pslld	$0x1, %xmm0
    00000095: 	paddd	%xmm2, %xmm0
    00000099: 	cvtdq2pd	%xmm0, %xmm2
    0000009d: 	pshufd	$0xee, %xmm0, %xmm0
    000000a2: 	movups	%xmm2, -0x20(%rax)
    000000a6: 	cvtdq2pd	%xmm0, %xmm0
    000000aa: 	movups	%xmm0, -0x10(%rax)
    000000ae: 	cmpq	%rdx, %rax
    000000b1: 	jne	.Ltmp6923 # Offset: 177
    000000b3: 	movq	0x20(%rsp), %rcx
    000000b8: 	movq	%rcx, %rdx
    000000bb: 	andq	$-0x4, %rdx
    000000bf: 	movl	%edx, %eax
    000000c1: 	cmpq	%rdx, %rcx
    000000c4: 	je	.Ltmp6921 # Offset: 196
.Ltmp6956:
    000000c6: 	leal	(%rax,%rax,2), %ecx
    000000c9: 	pxor	%xmm0, %xmm0
    000000cd: 	movq	0x20(%rsp), %r9
    000000d2: 	cvtsi2sd	%ecx, %xmm0
    000000d6: 	movsd	%xmm0, (%rbp,%rdx,8)
    000000dc: 	leal	0x1(%rax), %edx
    000000df: 	movslq	%edx, %rdx
    000000e2: 	cmpq	%rdx, %r9
    000000e5: 	jbe	.Ltmp6921 # Offset: 229
    000000e7: 	leal	0x3(%rcx), %esi
    000000ea: 	pxor	%xmm0, %xmm0
    000000ee: 	addl	$0x2, %eax
    000000f1: 	cvtsi2sd	%esi, %xmm0
    000000f5: 	cltq
    000000f7: 	leaq	(,%rdx,8), %rdi
    000000ff: 	movsd	%xmm0, (%rbp,%rdx,8)
    00000105: 	cmpq	%rax, %r9
    00000108: 	jbe	.Ltmp6921 # Offset: 264
    0000010a: 	addl	$0x6, %ecx
    0000010d: 	pxor	%xmm0, %xmm0
    00000111: 	cvtsi2sd	%ecx, %xmm0
    00000115: 	movsd	%xmm0, 0x8(%rbp,%rdi)
.Ltmp6921:
    0000011b: 	movq	0x20(%rsp), %rax
    00000120: 	movq	%rbp, %rdi
    00000123: 	leaq	0x70(%rsp), %r12
    00000128: 	leaq	(%rbp,%rax,8), %r13
    0000012d: 	movq	%r13, %rsi
    00000130: 	callq	_ZN9benchmark14random_shuffleIPdEEvT_S2_ # Offset: 304
    00000135: 	leaq	DATAat0x52f33(%rip), %rdx
    0000013c: 	movq	%rbx, %rsi
    0000013f: 	movq	%r12, %rdi
    00000142: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 322
    00000147: 	movq	%r12, %rdx
    0000014a: 	movq	%r13, %rsi
    0000014d: 	movq	%rbp, %rdi
    00000150: 	callq	_Z20test_delete_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 336
    00000155: 	movq	0x70(%rsp), %rdi
    0000015a: 	leaq	0x80(%rsp), %rax
    00000162: 	movq	%rax, 0x8(%rsp)
    00000167: 	cmpq	%rax, %rdi
    0000016a: 	je	.Ltmp6924 # Offset: 362
    0000016c: 	movq	0x80(%rsp), %rax
    00000174: 	leaq	0x1(%rax), %rsi
    00000178: 	callq	_ZdlPvm@PLT # Offset: 376
.Ltmp6924:
    0000017d: 	leaq	DATAat0x52f47(%rip), %rdx
    00000184: 	movq	%rbx, %rsi
    00000187: 	movq	%r12, %rdi
    0000018a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 394
    0000018f: 	movq	%r12, %rdx
    00000192: 	movq	%r13, %rsi
    00000195: 	movq	%rbp, %rdi
    00000198: 	callq	_Z20test_delete_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 408
    0000019d: 	movq	0x70(%rsp), %rdi
    000001a2: 	cmpq	0x8(%rsp), %rdi
    000001a7: 	je	.Ltmp6925 # Offset: 423
    000001a9: 	movq	0x80(%rsp), %rax
    000001b1: 	leaq	0x1(%rax), %rsi
    000001b5: 	callq	_ZdlPvm@PLT # Offset: 437
.Ltmp6925:
    000001ba: 	leaq	DATAat0x52f5a(%rip), %rdx
    000001c1: 	movq	%rbx, %rsi
    000001c4: 	movq	%r12, %rdi
    000001c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 455
    000001cc: 	movq	%r12, %rdx
    000001cf: 	movq	%r13, %rsi
    000001d2: 	movq	%rbp, %rdi
    000001d5: 	callq	_Z19test_delete_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 469
    000001da: 	movq	0x70(%rsp), %rdi
    000001df: 	cmpq	0x8(%rsp), %rdi
    000001e4: 	je	.Ltmp6926 # Offset: 484
    000001e6: 	movq	0x80(%rsp), %rax
    000001ee: 	leaq	0x1(%rax), %rsi
    000001f2: 	callq	_ZdlPvm@PLT # Offset: 498
.Ltmp6926:
    000001f7: 	leaq	DATAat0x52f74(%rip), %rdx
    000001fe: 	movq	%rbx, %rsi
    00000201: 	movq	%r12, %rdi
    00000204: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 516
    00000209: 	movq	%r12, %rdx
    0000020c: 	movq	%r13, %rsi
    0000020f: 	movq	%rbp, %rdi
    00000212: 	callq	_Z20test_delete_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 530
    00000217: 	movq	0x70(%rsp), %rdi
    0000021c: 	cmpq	0x8(%rsp), %rdi
    00000221: 	je	.Ltmp6927 # Offset: 545
    00000223: 	movq	0x80(%rsp), %rax
    0000022b: 	leaq	0x1(%rax), %rsi
    0000022f: 	callq	_ZdlPvm@PLT # Offset: 559
.Ltmp6927:
    00000234: 	leaq	DATAat0x52f86(%rip), %rdx
    0000023b: 	movq	%rbx, %rsi
    0000023e: 	movq	%r12, %rdi
    00000241: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 577
    00000246: 	movq	%r12, %rdx
    00000249: 	movq	%r13, %rsi
    0000024c: 	movq	%rbp, %rdi
    0000024f: 	callq	_Z20test_delete_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 591
    00000254: 	movq	0x70(%rsp), %rdi
    00000259: 	cmpq	0x8(%rsp), %rdi
    0000025e: 	je	.Ltmp6928 # Offset: 606
    00000260: 	movq	0x80(%rsp), %rax
    00000268: 	leaq	0x1(%rax), %rsi
    0000026c: 	callq	_ZdlPvm@PLT # Offset: 620
.Ltmp6928:
    00000271: 	leaq	DATAat0x52f9d(%rip), %rdx
    00000278: 	movq	%rbx, %rsi
    0000027b: 	movq	%r12, %rdi
    0000027e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 638
    00000283: 	movq	%r12, %rdx
    00000286: 	movq	%r13, %rsi
    00000289: 	movq	%rbp, %rdi
    0000028c: 	callq	_Z20test_delete_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 652
    00000291: 	movq	0x70(%rsp), %rdi
    00000296: 	cmpq	0x8(%rsp), %rdi
    0000029b: 	je	.Ltmp6929 # Offset: 667
    0000029d: 	movq	0x80(%rsp), %rax
    000002a5: 	leaq	0x1(%rax), %rsi
    000002a9: 	callq	_ZdlPvm@PLT # Offset: 681
.Ltmp6929:
    000002ae: 	leaq	DATAat0x52fba(%rip), %rdx
    000002b5: 	movq	%rbx, %rsi
    000002b8: 	movq	%r12, %rdi
    000002bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 699
    000002c0: 	movq	%r12, %rdx
    000002c3: 	movq	%r13, %rsi
    000002c6: 	movq	%rbp, %rdi
    000002c9: 	callq	_Z20test_delete_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 713
    000002ce: 	movq	0x70(%rsp), %rdi
    000002d3: 	cmpq	0x8(%rsp), %rdi
    000002d8: 	je	.Ltmp6930 # Offset: 728
    000002da: 	movq	0x80(%rsp), %rax
    000002e2: 	leaq	0x1(%rax), %rsi
    000002e6: 	callq	_ZdlPvm@PLT # Offset: 742
.Ltmp6930:
    000002eb: 	leaq	DATAat0x52fd1(%rip), %rdx
    000002f2: 	movq	%rbx, %rsi
    000002f5: 	movq	%r12, %rdi
    000002f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 760
    000002fd: 	movq	%r12, %rdx
    00000300: 	movq	%r13, %rsi
    00000303: 	movq	%rbp, %rdi
    00000306: 	callq	_Z20test_delete_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 774
    0000030b: 	movq	0x70(%rsp), %rdi
    00000310: 	cmpq	0x8(%rsp), %rdi
    00000315: 	je	.Ltmp6931 # Offset: 789
    00000317: 	movq	0x80(%rsp), %rax
    0000031f: 	leaq	0x1(%rax), %rsi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
.Ltmp6931:
    00000328: 	leaq	DATAat0x52fee(%rip), %rdx
    0000032f: 	movq	%rbx, %rsi
    00000332: 	movq	%r12, %rdi
    00000335: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 821
    0000033a: 	movq	%r12, %rdx
    0000033d: 	movq	%r13, %rsi
    00000340: 	movq	%rbp, %rdi
    00000343: 	callq	_Z16test_delete_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 835
    00000348: 	movq	0x70(%rsp), %rdi
    0000034d: 	cmpq	0x8(%rsp), %rdi
    00000352: 	je	.Ltmp6932 # Offset: 850
    00000354: 	movq	0x80(%rsp), %rax
    0000035c: 	leaq	0x1(%rax), %rsi
    00000360: 	callq	_ZdlPvm@PLT # Offset: 864
.Ltmp6932:
    00000365: 	leaq	DATAat0x52fff(%rip), %rdx
    0000036c: 	movq	%rbx, %rsi
    0000036f: 	movq	%r12, %rdi
    00000372: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 882
    00000377: 	movq	%r12, %rdx
    0000037a: 	movq	%r13, %rsi
    0000037d: 	movq	%rbp, %rdi
    00000380: 	callq	_Z16test_delete_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 896
    00000385: 	movq	0x70(%rsp), %rdi
    0000038a: 	cmpq	0x8(%rsp), %rdi
    0000038f: 	je	.Ltmp6933 # Offset: 911
    00000391: 	movq	0x80(%rsp), %rax
    00000399: 	leaq	0x1(%rax), %rsi
    0000039d: 	callq	_ZdlPvm@PLT # Offset: 925
.Ltmp6933:
    000003a2: 	leaq	0x30(%rsp), %r15
    000003a7: 	leaq	DATAat0x52564(%rip), %rdx
    000003ae: 	movq	%rbx, %rsi
    000003b1: 	movq	%r15, %rdi
    000003b4: 	leaq	0x50(%rsp), %r14
    000003b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 953
    000003be: 	movq	0x8(%rbx), %rcx
    000003c2: 	movq	(%rbx), %rdx
    000003c5: 	movq	%r15, %rsi
    000003c8: 	movq	%r14, %rdi
    000003cb: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 971
    000003d0: 	leaq	DATAat0x53015(%rip), %rdx
    000003d7: 	movq	%r14, %rsi
    000003da: 	movq	%r12, %rdi
    000003dd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 989
    000003e2: 	movq	%r12, %rdx
    000003e5: 	movq	%r13, %rsi
    000003e8: 	movq	%rbp, %rdi
    000003eb: 	callq	_Z15test_delete_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1003
    000003f0: 	movq	0x70(%rsp), %rdi
    000003f5: 	cmpq	0x8(%rsp), %rdi
    000003fa: 	je	.Ltmp6934 # Offset: 1018
    000003fc: 	movq	0x80(%rsp), %rax
    00000404: 	leaq	0x1(%rax), %rsi
    00000408: 	callq	_ZdlPvm@PLT # Offset: 1032
.Ltmp6934:
    0000040d: 	movq	0x50(%rsp), %rdi
    00000412: 	leaq	0x60(%rsp), %rax
    00000417: 	movq	%rax, 0x18(%rsp)
    0000041c: 	cmpq	%rax, %rdi
    0000041f: 	je	.Ltmp6935 # Offset: 1055
    00000421: 	movq	0x60(%rsp), %rax
    00000426: 	leaq	0x1(%rax), %rsi
    0000042a: 	callq	_ZdlPvm@PLT # Offset: 1066
.Ltmp6935:
    0000042f: 	movq	0x30(%rsp), %rdi
    00000434: 	leaq	0x40(%rsp), %rax
    00000439: 	movq	%rax, 0x10(%rsp)
    0000043e: 	cmpq	%rax, %rdi
    00000441: 	je	.Ltmp6936 # Offset: 1089
    00000443: 	movq	0x40(%rsp), %rax
    00000448: 	leaq	0x1(%rax), %rsi
    0000044c: 	callq	_ZdlPvm@PLT # Offset: 1100
.Ltmp6936:
    00000451: 	leaq	DATAat0x52564(%rip), %rdx
    00000458: 	movq	%rbx, %rsi
    0000045b: 	movq	%r15, %rdi
    0000045e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1118
    00000463: 	movq	0x8(%rbx), %rcx
    00000467: 	movq	(%rbx), %rdx
    0000046a: 	movq	%r15, %rsi
    0000046d: 	movq	%r14, %rdi
    00000470: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1136
    00000475: 	leaq	DATAat0x53026(%rip), %rdx
    0000047c: 	movq	%r14, %rsi
    0000047f: 	movq	%r12, %rdi
    00000482: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1154
    00000487: 	movq	%r12, %rdx
    0000048a: 	movq	%r13, %rsi
    0000048d: 	movq	%rbp, %rdi
    00000490: 	callq	_Z20test_delete_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1168
    00000495: 	movq	0x70(%rsp), %rdi
    0000049a: 	cmpq	0x8(%rsp), %rdi
    0000049f: 	je	.Ltmp6937 # Offset: 1183
    000004a1: 	movq	0x80(%rsp), %rax
    000004a9: 	leaq	0x1(%rax), %rsi
    000004ad: 	callq	_ZdlPvm@PLT # Offset: 1197
.Ltmp6937:
    000004b2: 	movq	0x50(%rsp), %rdi
    000004b7: 	cmpq	0x18(%rsp), %rdi
    000004bc: 	je	.Ltmp6938 # Offset: 1212
    000004be: 	movq	0x60(%rsp), %rax
    000004c3: 	leaq	0x1(%rax), %rsi
    000004c7: 	callq	_ZdlPvm@PLT # Offset: 1223
.Ltmp6938:
    000004cc: 	movq	0x30(%rsp), %rdi
    000004d1: 	cmpq	0x10(%rsp), %rdi
    000004d6: 	je	.Ltmp6939 # Offset: 1238
    000004d8: 	movq	0x40(%rsp), %rax
    000004dd: 	leaq	0x1(%rax), %rsi
    000004e1: 	callq	_ZdlPvm@PLT # Offset: 1249
.Ltmp6939:
    000004e6: 	leaq	DATAat0x5303c(%rip), %rdx
    000004ed: 	movq	%rbx, %rsi
    000004f0: 	movq	%r12, %rdi
    000004f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1267
    000004f8: 	movq	%r12, %rdx
    000004fb: 	movq	%r13, %rsi
    000004fe: 	movq	%rbp, %rdi
    00000501: 	callq	_Z16test_delete_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1281
    00000506: 	movq	0x70(%rsp), %rdi
    0000050b: 	cmpq	0x8(%rsp), %rdi
    00000510: 	je	.Ltmp6940 # Offset: 1296
    00000512: 	movq	0x80(%rsp), %rax
    0000051a: 	leaq	0x1(%rax), %rsi
    0000051e: 	callq	_ZdlPvm@PLT # Offset: 1310
.Ltmp6940:
    00000523: 	leaq	DATAat0x530b0(%rip), %rdx
    0000052a: 	movq	%rbx, %rsi
    0000052d: 	movq	%r12, %rdi
    00000530: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1328
    00000535: 	movq	%r12, %rdx
    00000538: 	movq	%r13, %rsi
    0000053b: 	movq	%rbp, %rdi
    0000053e: 	callq	_Z16test_delete_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1342
    00000543: 	movq	0x70(%rsp), %rdi
    00000548: 	cmpq	0x8(%rsp), %rdi
    0000054d: 	je	.Ltmp6941 # Offset: 1357
    0000054f: 	movq	0x80(%rsp), %rax
    00000557: 	leaq	0x1(%rax), %rsi
    0000055b: 	callq	_ZdlPvm@PLT # Offset: 1371
.Ltmp6941:
    00000560: 	leaq	DATAat0x52564(%rip), %rdx
    00000567: 	movq	%rbx, %rsi
    0000056a: 	movq	%r15, %rdi
    0000056d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1389
    00000572: 	movq	0x8(%rbx), %rcx
    00000576: 	movq	(%rbx), %rdx
    00000579: 	movq	%r15, %rsi
    0000057c: 	movq	%r14, %rdi
    0000057f: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1407
    00000584: 	leaq	DATAat0x53057(%rip), %rdx
    0000058b: 	movq	%r14, %rsi
    0000058e: 	movq	%r12, %rdi
    00000591: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1425
    00000596: 	movq	%r12, %rdx
    00000599: 	movq	%r13, %rsi
    0000059c: 	movq	%rbp, %rdi
    0000059f: 	callq	_Z15test_delete_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1439
    000005a4: 	movq	0x70(%rsp), %rdi
    000005a9: 	cmpq	0x8(%rsp), %rdi
    000005ae: 	je	.Ltmp6942 # Offset: 1454
    000005b0: 	movq	0x80(%rsp), %rax
    000005b8: 	leaq	0x1(%rax), %rsi
    000005bc: 	callq	_ZdlPvm@PLT # Offset: 1468
.Ltmp6942:
    000005c1: 	movq	0x50(%rsp), %rdi
    000005c6: 	cmpq	0x18(%rsp), %rdi
    000005cb: 	je	.Ltmp6943 # Offset: 1483
    000005cd: 	movq	0x60(%rsp), %rax
    000005d2: 	leaq	0x1(%rax), %rsi
    000005d6: 	callq	_ZdlPvm@PLT # Offset: 1494
.Ltmp6943:
    000005db: 	movq	0x30(%rsp), %rdi
    000005e0: 	cmpq	0x10(%rsp), %rdi
    000005e5: 	je	.Ltmp6944 # Offset: 1509
    000005e7: 	movq	0x40(%rsp), %rax
    000005ec: 	leaq	0x1(%rax), %rsi
    000005f0: 	callq	_ZdlPvm@PLT # Offset: 1520
.Ltmp6944:
    000005f5: 	leaq	DATAat0x52564(%rip), %rdx
    000005fc: 	movq	%rbx, %rsi
    000005ff: 	movq	%r15, %rdi
    00000602: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1538
    00000607: 	movq	0x8(%rbx), %rcx
    0000060b: 	movq	(%rbx), %rdx
    0000060e: 	movq	%r15, %rsi
    00000611: 	movq	%r14, %rdi
    00000614: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1556
    00000619: 	leaq	DATAat0x530d0(%rip), %rdx
    00000620: 	movq	%r14, %rsi
    00000623: 	movq	%r12, %rdi
    00000626: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1574
    0000062b: 	movq	%r12, %rdx
    0000062e: 	movq	%r13, %rsi
    00000631: 	movq	%rbp, %rdi
    00000634: 	callq	_Z20test_delete_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1588
    00000639: 	movq	0x70(%rsp), %rdi
    0000063e: 	cmpq	0x8(%rsp), %rdi
    00000643: 	je	.Ltmp6945 # Offset: 1603
    00000645: 	movq	0x80(%rsp), %rax
    0000064d: 	leaq	0x1(%rax), %rsi
    00000651: 	callq	_ZdlPvm@PLT # Offset: 1617
.Ltmp6945:
    00000656: 	movq	0x50(%rsp), %rdi
    0000065b: 	cmpq	0x18(%rsp), %rdi
    00000660: 	je	.Ltmp6946 # Offset: 1632
    00000662: 	movq	0x60(%rsp), %rax
    00000667: 	leaq	0x1(%rax), %rsi
    0000066b: 	callq	_ZdlPvm@PLT # Offset: 1643
.Ltmp6946:
    00000670: 	movq	0x30(%rsp), %rdi
    00000675: 	cmpq	0x10(%rsp), %rdi
    0000067a: 	je	.Ltmp6947 # Offset: 1658
    0000067c: 	movq	0x40(%rsp), %rax
    00000681: 	leaq	0x1(%rax), %rsi
    00000685: 	callq	_ZdlPvm@PLT # Offset: 1669
.Ltmp6947:
    0000068a: 	leaq	DATAat0x52564(%rip), %rdx
    00000691: 	movq	%rbx, %rsi
    00000694: 	movq	%r15, %rdi
    00000697: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1687
    0000069c: 	movq	0x8(%rbx), %rcx
    000006a0: 	movq	(%rbx), %rdx
    000006a3: 	movq	%r15, %rsi
    000006a6: 	movq	%r14, %rdi
    000006a9: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1705
    000006ae: 	leaq	DATAat0x53072(%rip), %rdx
    000006b5: 	movq	%r14, %rsi
    000006b8: 	movq	%r12, %rdi
    000006bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1723
    000006c0: 	movq	%r12, %rdx
    000006c3: 	movq	%r13, %rsi
    000006c6: 	movq	%rbp, %rdi
    000006c9: 	callq	_Z15test_delete_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1737
    000006ce: 	movq	0x70(%rsp), %rdi
    000006d3: 	cmpq	0x8(%rsp), %rdi
    000006d8: 	je	.Ltmp6948 # Offset: 1752
    000006da: 	movq	0x80(%rsp), %rax
    000006e2: 	leaq	0x1(%rax), %rsi
    000006e6: 	callq	_ZdlPvm@PLT # Offset: 1766
.Ltmp6948:
    000006eb: 	movq	0x50(%rsp), %rdi
    000006f0: 	cmpq	0x18(%rsp), %rdi
    000006f5: 	je	.Ltmp6949 # Offset: 1781
    000006f7: 	movq	0x60(%rsp), %rax
    000006fc: 	leaq	0x1(%rax), %rsi
    00000700: 	callq	_ZdlPvm@PLT # Offset: 1792
.Ltmp6949:
    00000705: 	movq	0x30(%rsp), %rdi
    0000070a: 	cmpq	0x10(%rsp), %rdi
    0000070f: 	je	.Ltmp6950 # Offset: 1807
    00000711: 	movq	0x40(%rsp), %rax
    00000716: 	leaq	0x1(%rax), %rsi
    0000071a: 	callq	_ZdlPvm@PLT # Offset: 1818
.Ltmp6950:
    0000071f: 	leaq	DATAat0x52564(%rip), %rdx
    00000726: 	movq	%rbx, %rsi
    00000729: 	movq	%r15, %rdi
    0000072c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1836
    00000731: 	movq	0x8(%rbx), %rcx
    00000735: 	movq	(%rbx), %rdx
    00000738: 	movq	%r15, %rsi
    0000073b: 	movq	%r14, %rdi
    0000073e: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1854
    00000743: 	leaq	DATAat0x53082(%rip), %rdx
    0000074a: 	movq	%r14, %rsi
    0000074d: 	movq	%r12, %rdi
    00000750: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1872
    00000755: 	movq	%r12, %rdx
    00000758: 	movq	%r13, %rsi
    0000075b: 	movq	%rbp, %rdi
    0000075e: 	callq	_Z15test_delete_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1886
    00000763: 	movq	0x70(%rsp), %rdi
    00000768: 	cmpq	0x8(%rsp), %rdi
    0000076d: 	je	.Ltmp6951 # Offset: 1901
    0000076f: 	movq	0x80(%rsp), %rax
    00000777: 	leaq	0x1(%rax), %rsi
    0000077b: 	callq	_ZdlPvm@PLT # Offset: 1915
.Ltmp6951:
    00000780: 	movq	0x50(%rsp), %rdi
    00000785: 	cmpq	0x18(%rsp), %rdi
    0000078a: 	je	.Ltmp6952 # Offset: 1930
    0000078c: 	movq	0x60(%rsp), %rax
    00000791: 	leaq	0x1(%rax), %rsi
    00000795: 	callq	_ZdlPvm@PLT # Offset: 1941
.Ltmp6952:
    0000079a: 	movq	0x30(%rsp), %rdi
    0000079f: 	cmpq	0x10(%rsp), %rdi
    000007a4: 	je	.Ltmp6953 # Offset: 1956
    000007a6: 	movq	0x40(%rsp), %rax
    000007ab: 	leaq	0x1(%rax), %rsi
    000007af: 	callq	_ZdlPvm@PLT # Offset: 1967
.Ltmp6953:
    000007b4: 	cmpb	$0x0, 0x2c(%rsp)
    000007b9: 	jne	.Ltmp6954 # Offset: 1977
    000007bb: 	movq	0x98(%rsp), %rax
    000007c3: 	subq	%fs:0x28, %rax
    000007cc: 	jne	.Ltmp6955 # Offset: 1996
    000007ce: 	addq	$0xa8, %rsp
    000007d5: 	popq	%rbx
    000007d6: 	popq	%rbp
    000007d7: 	popq	%r12
    000007d9: 	popq	%r13
    000007db: 	popq	%r14
    000007dd: 	popq	%r15
    000007df: 	retq # Offset: 2015
.Ltmp6954:
    000007e0: 	movq	0x98(%rsp), %rax
    000007e8: 	subq	%fs:0x28, %rax
    000007f1: 	jne	.Ltmp6955 # Offset: 2033
    000007f3: 	movl	iterations(%rip), %edx
    000007f9: 	movl	0x20(%rsp), %esi
    000007fd: 	xorl	%r8d, %r8d
    00000800: 	xorl	%ecx, %ecx
    00000802: 	addq	$0xa8, %rsp
    00000809: 	leaq	DATAat0x53098(%rip), %rdi
    00000810: 	popq	%rbx
    00000811: 	popq	%rbp
    00000812: 	popq	%r12
    00000814: 	popq	%r13
    00000816: 	popq	%r14
    00000818: 	popq	%r15
    0000081a: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 2074
.Ltmp6922:
    0000081f: 	xorl	%eax, %eax
    00000821: 	xorl	%edx, %edx
    00000823: 	jmp	.Ltmp6956 # Offset: 2083
.Ltmp6955:
    00000828: 	callq	__stack_chk_fail@PLT # Offset: 2088
    0000082d: 	endbr64
    00000831: 	movq	%rax, %rbp
    00000834: 	jmp	.Ltmp6957 # Offset: 2100
    00000836: 	endbr64
    0000083a: 	movq	%rax, %rbp
    0000083d: 	jmp	.Ltmp6958 # Offset: 2109
.Ltmp6957:
    0000083f: 	movq	0x70(%rsp), %rdi
    00000844: 	cmpq	0x8(%rsp), %rdi
    00000849: 	je	.Ltmp6958 # Offset: 2121
    0000084b: 	movq	0x80(%rsp), %rax
    00000853: 	leaq	0x1(%rax), %rsi
    00000857: 	callq	_ZdlPvm@PLT # Offset: 2135
.Ltmp6958:
    0000085c: 	movq	0x50(%rsp), %rdi
    00000861: 	leaq	0x60(%rsp), %rax
    00000866: 	cmpq	%rax, %rdi
    00000869: 	je	.Ltmp6959 # Offset: 2153
    0000086b: 	movq	0x60(%rsp), %rax
    00000870: 	leaq	0x1(%rax), %rsi
    00000874: 	callq	_ZdlPvm@PLT # Offset: 2164
.Ltmp6959:
    00000879: 	movq	0x30(%rsp), %rdi
    0000087e: 	leaq	0x40(%rsp), %rax
    00000883: 	cmpq	%rax, %rdi
    00000886: 	je	.Ltmp6960 # Offset: 2182
.Ltmp6966:
    00000888: 	movq	0x40(%rsp), %rax
    0000088d: 	leaq	0x1(%rax), %rsi
    00000891: 	callq	_ZdlPvm@PLT # Offset: 2193
.Ltmp6960:
    00000896: 	movq	%rbp, %rdi
    00000899: 	callq	_Unwind_Resume@PLT # Offset: 2201
    0000089e: 	endbr64
    000008a2: 	movq	%rax, %rbp
    000008a5: 	jmp	.Ltmp6959 # Offset: 2213
    000008a7: 	endbr64
.Ltmp6962:
    000008ab: 	movq	%rax, %rbp
    000008ae: 	jmp	.Ltmp6961 # Offset: 2222
    000008b3: 	endbr64
    000008b7: 	jmp	.Ltmp6962 # Offset: 2231
    000008b9: 	endbr64
    000008bd: 	jmp	.Ltmp6962 # Offset: 2237
    000008bf: 	endbr64
    000008c3: 	jmp	.Ltmp6962 # Offset: 2243
    000008c5: 	endbr64
    000008c9: 	jmp	.Ltmp6962 # Offset: 2249
    000008cb: 	endbr64
.Ltmp6969:
    000008cf: 	movq	%rax, %rbp
    000008d2: 	jmp	.Ltmp6963 # Offset: 2258
    000008d4: 	endbr64
    000008d8: 	movq	%rax, %rbp
    000008db: 	jmp	.Ltmp6964 # Offset: 2267
    000008dd: 	endbr64
    000008e1: 	jmp	.Ltmp6962 # Offset: 2273
.Ltmp6964:
    000008e3: 	movq	0x70(%rsp), %rdi
    000008e8: 	leaq	0x80(%rsp), %rax
    000008f0: 	cmpq	%rax, %rdi
    000008f3: 	je	.Ltmp6960 # Offset: 2291
.Ltmp6968:
    000008f5: 	movq	0x80(%rsp), %rax
    000008fd: 	leaq	0x1(%rax), %rsi
    00000901: 	callq	_ZdlPvm@PLT # Offset: 2305
    00000906: 	jmp	.Ltmp6960 # Offset: 2310
.Ltmp6967:
    00000908: 	movq	0x70(%rsp), %rdi
    0000090d: 	cmpq	0x8(%rsp), %rdi
    00000912: 	je	.Ltmp6965 # Offset: 2322
    00000914: 	movq	0x80(%rsp), %rax
    0000091c: 	leaq	0x1(%rax), %rsi
    00000920: 	callq	_ZdlPvm@PLT # Offset: 2336
.Ltmp6965:
    00000925: 	movq	0x50(%rsp), %rdi
    0000092a: 	cmpq	0x18(%rsp), %rdi
    0000092f: 	je	.Ltmp6963 # Offset: 2351
    00000931: 	movq	0x60(%rsp), %rax
    00000936: 	leaq	0x1(%rax), %rsi
    0000093a: 	callq	_ZdlPvm@PLT # Offset: 2362
.Ltmp6963:
    0000093f: 	movq	0x30(%rsp), %rdi
    00000944: 	cmpq	0x10(%rsp), %rdi
    00000949: 	jne	.Ltmp6966 # Offset: 2377
    0000094f: 	jmp	.Ltmp6960 # Offset: 2383
    00000954: 	endbr64
    00000958: 	jmp	.Ltmp6962 # Offset: 2392
    0000095d: 	endbr64
    00000961: 	jmp	.Ltmp6962 # Offset: 2401
    00000966: 	endbr64
.Ltmp6970:
    0000096a: 	movq	%rax, %rbp
    0000096d: 	jmp	.Ltmp6967 # Offset: 2413
.Ltmp6961:
    0000096f: 	movq	0x70(%rsp), %rdi
    00000974: 	cmpq	0x8(%rsp), %rdi
    00000979: 	jne	.Ltmp6968 # Offset: 2425
    0000097f: 	jmp	.Ltmp6960 # Offset: 2431
    00000984: 	endbr64
    00000988: 	jmp	.Ltmp6962 # Offset: 2440
    0000098d: 	endbr64
.Ltmp6971:
    00000991: 	movq	%rax, %rbp
    00000994: 	jmp	.Ltmp6965 # Offset: 2452
    00000996: 	endbr64
    0000099a: 	jmp	.Ltmp6969 # Offset: 2458
    0000099f: 	endbr64
    000009a3: 	jmp	.Ltmp6970 # Offset: 2467
    000009a5: 	endbr64
    000009a9: 	jmp	.Ltmp6971 # Offset: 2473
    000009ab: 	endbr64
    000009af: 	jmp	.Ltmp6969 # Offset: 2479
    000009b4: 	endbr64
    000009b8: 	jmp	.Ltmp6962 # Offset: 2488
    000009bd: 	endbr64
    000009c1: 	jmp	.Ltmp6970 # Offset: 2497
    000009c3: 	endbr64
    000009c7: 	jmp	.Ltmp6962 # Offset: 2503
    000009cc: 	endbr64
    000009d0: 	jmp	.Ltmp6970 # Offset: 2512
    000009d2: 	endbr64
    000009d6: 	jmp	.Ltmp6971 # Offset: 2518
    000009d8: 	endbr64
    000009dc: 	jmp	.Ltmp6969 # Offset: 2524
    000009e1: 	endbr64
    000009e5: 	jmp	.Ltmp6970 # Offset: 2533
    000009e7: 	endbr64
    000009eb: 	jmp	.Ltmp6971 # Offset: 2539
    000009ed: 	endbr64
    000009f1: 	jmp	.Ltmp6969 # Offset: 2545
    000009f6: 	endbr64
    000009fa: 	jmp	.Ltmp6971 # Offset: 2554
DWARF CFI Instructions:
    <empty>
End of Function "_Z10testDeleteIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z15test_insert_mapId13PooledHashMapIddELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 344
  State       : disassembled
  Address     : 0x497b0
  Size        : 0x1002
  MaxSize     : 0x1010
  Offset      : 0x497b0
  Section     : .text
  Orc Section : .local.text._Z15test_insert_mapId13PooledHashMapIddELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0343:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xc8, %rsp
    00000015: 	movq	%rdi, 0x8(%rsp)
    0000001a: 	movq	%rsi, 0x30(%rsp)
    0000001f: 	movq	%rdx, 0x80(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0xb8(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp6972 # Offset: 78
    00000054: 	xorl	%r12d, %r12d
    00000057: 	movl	$0xc70f6907, %r13d
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp6981:
    00000060: 	movl	$0xc8, %edi
    00000065: 	callq	_Znwm@PLT # Offset: 101
    0000006a: 	movq	%rax, %rdi
    0000006d: 	movq	%rax, %rbp
    00000070: 	callq	_ZN20HashMapPoolAllocatorIddEC2Ev # Offset: 112
    00000075: 	movq	$0x0, 0xb0(%rbp)
    00000080: 	pxor	%xmm6, %xmm6
    00000084: 	movq	%rbp, %rdi
    00000087: 	movq	$0x0, 0xb8(%rbp)
    00000092: 	movl	$0x3f800000, 0xc0(%rbp)
    0000009c: 	movups	%xmm6, 0xa0(%rbp)
    000000a3: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv # Offset: 163
    000000a8: 	movq	0x8(%rsp), %rax
    000000ad: 	pxor	%xmm7, %xmm7
    000000b1: 	movsd	(%rax), %xmm0
    000000b5: 	movsd	%xmm0, 0xa0(%rsp)
    000000be: 	ucomisd	%xmm7, %xmm0
    000000c2: 	jp	.Ltmp6973 # Offset: 194
    000000c8: 	movl	$0x0, %eax
    000000cd: 	jne	.Ltmp6973 # Offset: 205
.Ltmp7002:
    000000d3: 	xorl	%edx, %edx
    000000d5: 	movq	0xb8(%rbp), %rdi
    000000dc: 	divq	0xb0(%rbp)
    000000e3: 	movq	(%rdi,%rdx,8), %rax
    000000e7: 	leaq	(,%rdx,8), %r14
    000000ef: 	testq	%rax, %rax
    000000f2: 	je	.Ltmp6974 # Offset: 242
    000000f8: 	movq	0x8(%rsp), %rcx
    000000fd: 	movsd	(%rcx), %xmm0
    00000101: 	jmp	.Ltmp6975 # Offset: 257
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6976:
    00000108: 	movq	0x10(%rax), %rax
    0000010c: 	testq	%rax, %rax
    0000010f: 	je	.Ltmp6974 # Offset: 271
.Ltmp6975:
    00000115: 	ucomisd	(%rax), %xmm0
    00000119: 	jp	.Ltmp6976 # Offset: 281
    0000011b: 	jne	.Ltmp6976 # Offset: 283
    0000011d: 	addq	$0x8, %rax
.Ltmp7004:
    00000121: 	movsd	%xmm0, (%rax)
    00000125: 	testq	%rdi, %rdi
    00000128: 	je	.Ltmp6977 # Offset: 296
    0000012a: 	callq	_ZdaPv@PLT # Offset: 298
.Ltmp6977:
    0000012f: 	movq	0x50(%rbp), %rdi
    00000133: 	testq	%rdi, %rdi
    00000136: 	je	.Ltmp6978 # Offset: 310
    00000138: 	movq	0x98(%rbp), %rax
    0000013f: 	movq	0x78(%rbp), %r14
    00000143: 	leaq	0x8(%rax), %rbx
    00000147: 	cmpq	%r14, %rbx
    0000014a: 	jbe	.Ltmp6979 # Offset: 330
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp6980:
    00000150: 	movq	(%r14), %rdi
    00000153: 	movl	$0x200, %esi
    00000158: 	addq	$0x8, %r14
    0000015c: 	callq	_ZdlPvm@PLT # Offset: 348
    00000161: 	cmpq	%r14, %rbx
    00000164: 	ja	.Ltmp6980 # Offset: 356
    00000166: 	movq	0x50(%rbp), %rdi
.Ltmp6979:
    0000016a: 	movq	0x58(%rbp), %rax
    0000016e: 	leaq	(,%rax,8), %rsi
    00000176: 	callq	_ZdlPvm@PLT # Offset: 374
.Ltmp6978:
    0000017b: 	movq	%rbp, %rdi
    0000017e: 	addl	$0x1, %r12d
    00000182: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 386
    00000187: 	movl	$0xc8, %esi
    0000018c: 	movq	%rbp, %rdi
    0000018f: 	callq	_ZdlPvm@PLT # Offset: 399
    00000194: 	cmpl	%r12d, iterations(%rip)
    0000019b: 	jg	.Ltmp6981 # Offset: 411
.Ltmp6972:
    000001a1: 	callq	clock@PLT # Offset: 417
    000001a6: 	movq	0x30(%rsp), %rcx
    000001ab: 	xorl	%edx, %edx
    000001ad: 	subq	0x8(%rsp), %rcx
    000001b2: 	movq	%rax, 0x70(%rsp)
    000001b7: 	movq	%rax, end_time(%rip)
    000001be: 	movq	start_time(%rip), %rax
    000001c5: 	movq	%rax, 0x78(%rsp)
    000001ca: 	movabsq	$0x500000000, %rax
    000001d4: 	divq	%rcx
    000001d7: 	movq	%rax, 0x38(%rsp)
    000001dc: 	cmpq	$0x3e8, %rax
    000001e2: 	ja	.Ltmp6982 # Offset: 482
    000001e8: 	cmpq	$0x3, 0x38(%rsp)
    000001ee: 	ja	.Ltmp6983 # Offset: 494
    000001f4: 	movq	$0x0, 0xb0(%rsp)
    00000200: 	pxor	%xmm0, %xmm0
    00000204: 	movq	$0x4, 0x38(%rsp)
    0000020d: 	movaps	%xmm0, 0xa0(%rsp)
.Ltmp7049:
    00000215: 	movq	0x38(%rsp), %rbx
    0000021a: 	leaq	0xa0(%rsp), %rdi
    00000222: 	movq	%rbx, %rsi
    00000225: 	callq	_ZNSt6vectorIP13PooledHashMapIddESaIS2_EE17_M_default_appendEm # Offset: 549
    0000022a: 	movl	iterations(%rip), %eax
    00000230: 	testl	%eax, %eax
    00000232: 	jle	.Ltmp6984 # Offset: 562
    00000238: 	movl	%ebx, 0x64(%rsp)
    0000023c: 	movq	$0x0, 0x88(%rsp)
    00000248: 	movl	$0x0, 0x60(%rsp)
.Ltmp7023:
    00000250: 	movslq	0x60(%rsp), %rdx
    00000255: 	movslq	%eax, %rcx
    00000258: 	movq	%rdx, %rsi
    0000025b: 	addq	0x38(%rsp), %rdx
    00000260: 	subl	%esi, %eax
    00000262: 	cmpq	%rcx, %rdx
    00000265: 	cmovbl	0x64(%rsp), %eax
    0000026a: 	movl	%eax, %ebx
    0000026c: 	callq	clock@PLT # Offset: 620
    00000271: 	movq	$0x0, 0x48(%rsp)
    0000027a: 	movq	%rax, start_time(%rip)
    00000281: 	leal	-0x1(%rbx), %eax
    00000284: 	movq	%rax, 0x68(%rsp)
    00000289: 	leaq	(,%rbx,8), %rax
    00000291: 	movq	%rax, 0x50(%rsp)
.Ltmp7013:
    00000296: 	movl	$0xc8, %edi
    0000029b: 	callq	_Znwm@PLT # Offset: 667
    000002a0: 	movq	$0x0, (%rax)
    000002a7: 	pxor	%xmm0, %xmm0
    000002ab: 	xorl	%esi, %esi
    000002ad: 	movq	%rax, %rdi
    000002b0: 	movq	$0x0, 0x8(%rax)
    000002b8: 	movq	%rax, %rbp
    000002bb: 	movups	%xmm0, 0x10(%rax)
    000002bf: 	movups	%xmm0, 0x20(%rax)
    000002c3: 	movups	%xmm0, 0x30(%rax)
    000002c7: 	movups	%xmm0, 0x40(%rax)
    000002cb: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 715
    000002d0: 	movq	$0x0, 0x50(%rbp)
    000002d8: 	pxor	%xmm0, %xmm0
    000002dc: 	movl	$0x40, %edi
    000002e1: 	movq	$0x8, 0x58(%rbp)
    000002e9: 	movups	%xmm0, 0x60(%rbp)
    000002ed: 	movups	%xmm0, 0x70(%rbp)
    000002f1: 	movups	%xmm0, 0x80(%rbp)
    000002f8: 	movups	%xmm0, 0x90(%rbp)
    000002ff: 	callq	_Znwm@PLT # Offset: 767
    00000304: 	movq	0x58(%rbp), %rdx
    00000308: 	movq	%rax, 0x50(%rbp)
    0000030c: 	movl	$0x200, %edi
    00000311: 	leaq	-0x4(,%rdx,4), %rdx
    00000319: 	andq	$-0x8, %rdx
    0000031d: 	leaq	(%rax,%rdx), %rbx
    00000321: 	callq	_Znwm@PLT # Offset: 801
    00000326: 	movq	%rax, %xmm1
    0000032b: 	movq	%rax, (%rbx)
    0000032e: 	addq	$0x200, %rax
    00000334: 	movq	%rbx, %xmm2
    00000339: 	movq	%rax, %xmm0
    0000033e: 	punpcklqdq	%xmm1, %xmm1
    00000342: 	movq	$0x0, 0xb0(%rbp)
    0000034d: 	movq	0x8(%rsp), %rax
    00000352: 	punpcklqdq	%xmm2, %xmm0
    00000356: 	movups	%xmm1, 0x60(%rbp)
    0000035a: 	movups	%xmm0, 0x70(%rbp)
    0000035e: 	movups	%xmm0, 0x90(%rbp)
    00000365: 	pxor	%xmm0, %xmm0
    00000369: 	movq	$0x0, 0xb8(%rbp)
    00000374: 	movl	$0x3f800000, 0xc0(%rbp)
    0000037e: 	movups	%xmm1, 0x80(%rbp)
    00000385: 	movups	%xmm0, 0xa0(%rbp)
    0000038c: 	cmpq	%rax, 0x30(%rsp)
    00000391: 	je	.Ltmp6985 # Offset: 913
    00000397: 	leaq	0x50(%rbp), %rcx
    0000039b: 	xorl	%ebx, %ebx
    0000039d: 	movq	%rax, (%rsp)
    000003a1: 	movq	%rcx, 0x58(%rsp)
    000003a6: 	testq	%rbx, %rbx
    000003a9: 	je	.Ltmp6986 # Offset: 937
    000003af: 	nop # Size: 1
.Ltmp6991:
    000003b0: 	movq	(%rsp), %rax
    000003b4: 	pxor	%xmm3, %xmm3
    000003b8: 	movsd	(%rax), %xmm0
    000003bc: 	movsd	%xmm0, 0x98(%rsp)
    000003c5: 	ucomisd	%xmm3, %xmm0
    000003c9: 	jp	.Ltmp6987 # Offset: 969
    000003cf: 	movl	$0x0, %eax
    000003d4: 	jne	.Ltmp6987 # Offset: 980
.Ltmp7005:
    000003da: 	xorl	%edx, %edx
    000003dc: 	divq	0xb0(%rbp)
    000003e3: 	movq	0xb8(%rbp), %rax
    000003ea: 	movq	(%rax,%rdx,8), %rax
    000003ee: 	leaq	(,%rdx,8), %r15
    000003f6: 	testq	%rax, %rax
    000003f9: 	je	.Ltmp6988 # Offset: 1017
    000003ff: 	movq	(%rsp), %rcx
    00000403: 	movsd	(%rcx), %xmm0
    00000407: 	jmp	.Ltmp6989 # Offset: 1031
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp6990:
    00000410: 	movq	0x10(%rax), %rax
    00000414: 	testq	%rax, %rax
    00000417: 	je	.Ltmp6988 # Offset: 1047
.Ltmp6989:
    0000041d: 	ucomisd	(%rax), %xmm0
    00000421: 	jp	.Ltmp6990 # Offset: 1057
    00000423: 	jne	.Ltmp6990 # Offset: 1059
    00000425: 	addq	$0x8, %rax
.Ltmp7011:
    00000429: 	addq	$0x8, (%rsp)
    0000042e: 	movsd	%xmm0, (%rax)
    00000432: 	movq	(%rsp), %rax
    00000436: 	cmpq	%rax, 0x30(%rsp)
    0000043b: 	je	.Ltmp6985 # Offset: 1083
    00000441: 	movq	0xa8(%rbp), %rbx
    00000448: 	testq	%rbx, %rbx
    0000044b: 	jne	.Ltmp6991 # Offset: 1099
.Ltmp6986:
    00000451: 	movss	DATAat0x537b0(%rip), %xmm2
    00000459: 	movss	DATAat0x537a4(%rip), %xmm0
    00000461: 	divss	0xc0(%rbp), %xmm0
    00000469: 	movaps	%xmm0, %xmm1
    0000046c: 	movss	DATAat0x5379c(%rip), %xmm3
    00000474: 	movq	0xb0(%rbp), %rax
    0000047b: 	andps	%xmm2, %xmm1
    0000047e: 	ucomiss	%xmm1, %xmm3
    00000481: 	movq	%rax, 0x20(%rsp)
    00000486: 	jbe	.Ltmp6992 # Offset: 1158
    00000488: 	cvttss2si	%xmm0, %eax
    0000048c: 	pxor	%xmm1, %xmm1
    00000490: 	movaps	%xmm0, %xmm3
    00000493: 	movss	DATAat0x53798(%rip), %xmm6
    0000049b: 	andnps	%xmm0, %xmm2
    0000049e: 	cvtsi2ss	%eax, %xmm1
    000004a2: 	cmpnless	%xmm1, %xmm3
    000004a7: 	andps	%xmm6, %xmm3
    000004aa: 	addss	%xmm3, %xmm1
    000004ae: 	orps	%xmm2, %xmm1
    000004b1: 	movaps	%xmm1, %xmm0
.Ltmp6992:
    000004b4: 	comiss	DATAat0x537a0(%rip), %xmm0
    000004bb: 	jae	.Ltmp6993 # Offset: 1211
    000004c1: 	cvttss2si	%xmm0, %rax
.Ltmp7012:
    000004c6: 	movl	$0x8, %edx
    000004cb: 	movq	0x20(%rsp), %r15
    000004d0: 	movq	$0x8, 0xb0(%rbp)
    000004db: 	cmpq	%rdx, %rax
    000004de: 	cmovbq	%rdx, %rax
    000004e2: 	movq	%rax, %rdx
    000004e5: 	shrq	%rdx
    000004e8: 	addq	%rdx, %rax
    000004eb: 	movq	%rax, 0xa8(%rbp)
    000004f2: 	cmpq	$0x8, %r15
    000004f6: 	je	.Ltmp6991 # Offset: 1270
    000004fc: 	movl	$0x40, %edi
    00000501: 	callq	_Znam@PLT # Offset: 1281
    00000506: 	pxor	%xmm0, %xmm0
    0000050a: 	movq	%rax, %r14
    0000050d: 	movups	%xmm0, (%rax)
    00000510: 	movups	%xmm0, 0x10(%rax)
    00000514: 	movups	%xmm0, 0x20(%rax)
    00000518: 	movups	%xmm0, 0x30(%rax)
    0000051c: 	movq	0xb8(%rbp), %rax
    00000523: 	movq	%rax, 0x10(%rsp)
    00000528: 	testq	%r15, %r15
    0000052b: 	je	.Ltmp6994 # Offset: 1323
    00000531: 	movl	$0xc70f6907, %r12d
    00000537: 	movq	%r14, %r15
    0000053a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7000:
    00000540: 	movq	0x10(%rsp), %rax
    00000545: 	movq	(%rax,%rbx,8), %r13
    00000549: 	testq	%r13, %r13
    0000054c: 	jne	.Ltmp6995 # Offset: 1356
    0000054e: 	jmp	.Ltmp6996 # Offset: 1358
.Ltmp6998:
    00000550: 	movq	(%r15), %rax
    00000553: 	movq	%rax, 0x10(%r13)
    00000557: 	movq	%r13, (%r15)
    0000055a: 	testq	%r14, %r14
    0000055d: 	je	.Ltmp6996 # Offset: 1373
.Ltmp6999:
    0000055f: 	movq	%r14, %r13
.Ltmp6995:
    00000562: 	movsd	(%r13), %xmm0
    00000568: 	pxor	%xmm4, %xmm4
    0000056c: 	movq	0x10(%r13), %r14
    00000570: 	movsd	%xmm0, 0x98(%rsp)
    00000579: 	ucomisd	%xmm4, %xmm0
    0000057d: 	jp	.Ltmp6997 # Offset: 1405
    0000057f: 	je	.Ltmp6998 # Offset: 1407
.Ltmp6997:
    00000581: 	movq	%r12, %rdx
    00000584: 	leaq	0x98(%rsp), %rdi
    0000058c: 	movl	$0x8, %esi
    00000591: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1425
    00000596: 	xorl	%edx, %edx
    00000598: 	divq	0xb0(%rbp)
    0000059f: 	leaq	(%r15,%rdx,8), %rax
    000005a3: 	movq	(%rax), %rdx
    000005a6: 	movq	%rdx, 0x10(%r13)
    000005aa: 	movq	%r13, (%rax)
    000005ad: 	testq	%r14, %r14
    000005b0: 	jne	.Ltmp6999 # Offset: 1456
.Ltmp6996:
    000005b2: 	addq	$0x1, %rbx
    000005b6: 	cmpq	%rbx, 0x20(%rsp)
    000005bb: 	jne	.Ltmp7000 # Offset: 1467
    000005bd: 	movq	0xb8(%rbp), %rax
    000005c4: 	movq	%r15, %r14
    000005c7: 	movq	%rax, 0x10(%rsp)
.Ltmp6994:
    000005cc: 	movq	0x10(%rsp), %rax
    000005d1: 	testq	%rax, %rax
    000005d4: 	je	.Ltmp7001 # Offset: 1492
    000005d6: 	movq	%rax, %rdi
    000005d9: 	callq	_ZdaPv@PLT # Offset: 1497
.Ltmp7001:
    000005de: 	movq	%r14, 0xb8(%rbp)
    000005e5: 	jmp	.Ltmp6991 # Offset: 1509
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6973:
    000005f0: 	leaq	0xa0(%rsp), %rdi
    000005f8: 	movq	%r13, %rdx
    000005fb: 	movl	$0x8, %esi
    00000600: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1536
    00000605: 	jmp	.Ltmp7002 # Offset: 1541
    0000060a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6974:
    00000610: 	movq	%rbp, %rdi
    00000613: 	callq	_ZN20HashMapPoolAllocatorIddE13allocate_nodeEv # Offset: 1555
    00000618: 	movq	0xb8(%rbp), %rdi
    0000061f: 	movq	%rax, %rbx
    00000622: 	movq	0x8(%rsp), %rax
    00000627: 	addq	%rdi, %r14
    0000062a: 	movsd	(%rax), %xmm0
    0000062e: 	movq	(%r14), %rax
    00000631: 	movq	$0x0, 0x8(%rbx)
    00000639: 	movq	%rax, 0x10(%rbx)
    0000063d: 	movq	0xa0(%rbp), %rax
    00000644: 	movsd	%xmm0, (%rbx)
    00000648: 	addq	$0x1, %rax
    0000064c: 	movq	%rbx, (%r14)
    0000064f: 	movq	%rax, 0xa0(%rbp)
    00000656: 	cmpq	0xa8(%rbp), %rax
    0000065d: 	ja	.Ltmp7003 # Offset: 1629
.Ltmp7028:
    00000663: 	movq	0x8(%rsp), %rcx
    00000668: 	leaq	0x8(%rbx), %rax
    0000066c: 	movsd	(%rcx), %xmm0
    00000670: 	jmp	.Ltmp7004 # Offset: 1648
    00000675: 	nopl	(%rax) # Size: 3
.Ltmp6987:
    00000678: 	leaq	0x98(%rsp), %rdi
    00000680: 	movl	$0xc70f6907, %edx
    00000685: 	movl	$0x8, %esi
    0000068a: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1674
    0000068f: 	jmp	.Ltmp7005 # Offset: 1679
    00000694: 	nopl	(%rax) # Size: 4
.Ltmp6988:
    00000698: 	movq	0x48(%rbp), %rdx
    0000069c: 	movq	0x30(%rbp), %rdi
    000006a0: 	movq	0x38(%rbp), %rcx
    000006a4: 	movq	%rdx, %rax
    000006a7: 	subq	0x28(%rbp), %rax
    000006ab: 	movq	%rdi, %rsi
    000006ae: 	sarq	$0x3, %rax
    000006b2: 	cmpq	$0x1, %rdx
    000006b6: 	adcq	$-0x1, %rax
    000006ba: 	subq	%rcx, %rsi
    000006bd: 	sarq	$0x3, %rsi
    000006c1: 	shlq	$0x6, %rax
    000006c5: 	addq	%rsi, %rax
    000006c8: 	movq	0x20(%rbp), %rsi
    000006cc: 	subq	0x10(%rbp), %rsi
    000006d0: 	sarq	$0x3, %rsi
    000006d4: 	addq	%rsi, %rax
    000006d7: 	je	.Ltmp7006 # Offset: 1751
.Ltmp7056:
    000006dd: 	cmpq	%rcx, %rdi
    000006e0: 	je	.Ltmp7007 # Offset: 1760
    000006e6: 	movq	-0x8(%rdi), %rbx
    000006ea: 	subq	$0x8, %rdi
    000006ee: 	movq	%rdi, 0x30(%rbp)
.Ltmp7047:
    000006f2: 	movq	0x60(%rbp), %rcx
    000006f6: 	movq	0x78(%rbp), %rdx
    000006fa: 	movq	%rcx, %rax
    000006fd: 	subq	0x68(%rbp), %rax
    00000701: 	sarq	$0x5, %rax
    00000705: 	addq	%rbx, %rax
    00000708: 	js	.Ltmp7008 # Offset: 1800
    0000070e: 	cmpq	$0xf, %rax
    00000712: 	jg	.Ltmp7009 # Offset: 1810
    00000718: 	movq	%rbx, %rax
    0000071b: 	shlq	$0x5, %rax
    0000071f: 	addq	%rcx, %rax
    00000722: 	movq	%rax, 0x10(%rsp)
    00000727: 	movq	%rax, %rcx
    0000072a: 	movq	%rbx, 0x18(%rax)
.Ltmp7027:
    0000072e: 	movq	(%rsp), %rax
    00000732: 	movq	0xa8(%rbp), %rbx
    00000739: 	movsd	(%rax), %xmm0
    0000073d: 	movq	0xb8(%rbp), %rax
    00000744: 	movq	$0x0, 0x8(%rcx)
    0000074c: 	addq	%r15, %rax
    0000074f: 	movsd	%xmm0, (%rcx)
    00000753: 	movq	(%rax), %rdx
    00000756: 	movq	%rdx, 0x10(%rcx)
    0000075a: 	movq	%rcx, (%rax)
    0000075d: 	movq	0xa0(%rbp), %rax
    00000764: 	addq	$0x1, %rax
    00000768: 	movq	%rax, 0xa0(%rbp)
    0000076f: 	cmpq	%rbx, %rax
    00000772: 	ja	.Ltmp7010 # Offset: 1906
.Ltmp7037:
    00000778: 	movq	0x10(%rsp), %rax
    0000077d: 	movq	(%rsp), %rcx
    00000781: 	addq	$0x8, %rax
    00000785: 	movsd	(%rcx), %xmm0
    00000789: 	jmp	.Ltmp7011 # Offset: 1929
.Ltmp6993:
    0000078e: 	subss	DATAat0x537a0(%rip), %xmm0
    00000796: 	cvttss2si	%xmm0, %rax
    0000079b: 	btcq	$0x3f, %rax
    000007a0: 	jmp	.Ltmp7012 # Offset: 1952
.Ltmp6985:
    000007a5: 	movq	0x48(%rsp), %rax
    000007aa: 	movq	0xa0(%rsp), %r13
    000007b2: 	movq	%rbp, (%r13,%rax)
    000007b7: 	addq	$0x8, %rax
    000007bb: 	movq	%rax, 0x48(%rsp)
    000007c0: 	cmpq	0x50(%rsp), %rax
    000007c5: 	jne	.Ltmp7013 # Offset: 1989
    000007cb: 	callq	clock@PLT # Offset: 1995
    000007d0: 	pxor	%xmm0, %xmm0
    000007d4: 	movq	%r13, %rbx
    000007d7: 	movq	%rax, end_time(%rip)
    000007de: 	subq	start_time(%rip), %rax
    000007e5: 	cvtsi2sd	%rax, %xmm0
    000007ea: 	divsd	DATAat0x53788(%rip), %xmm0
    000007f2: 	movq	0x68(%rsp), %rax
    000007f7: 	addsd	0x88(%rsp), %xmm0
    00000800: 	leaq	0x8(%r13,%rax,8), %r14
    00000805: 	movsd	%xmm0, 0x88(%rsp)
    0000080e: 	nop # Size: 2
.Ltmp7022:
    00000810: 	movq	(%rbx), %r12
    00000813: 	testq	%r12, %r12
    00000816: 	je	.Ltmp7014 # Offset: 2070
    0000081c: 	movq	0xb8(%r12), %rdi
    00000824: 	testq	%rdi, %rdi
    00000827: 	je	.Ltmp7015 # Offset: 2087
    00000829: 	callq	_ZdaPv@PLT # Offset: 2089
.Ltmp7015:
    0000082e: 	movq	0x50(%r12), %rdi
    00000833: 	testq	%rdi, %rdi
    00000836: 	je	.Ltmp7016 # Offset: 2102
    00000838: 	movq	0x98(%r12), %rax
    00000840: 	movq	0x78(%r12), %rbp
    00000845: 	leaq	0x8(%rax), %r15
    00000849: 	cmpq	%rbp, %r15
    0000084c: 	jbe	.Ltmp7017 # Offset: 2124
    0000084e: 	nop # Size: 2
.Ltmp7018:
    00000850: 	movq	(%rbp), %rdi
    00000854: 	movl	$0x200, %esi
    00000859: 	addq	$0x8, %rbp
    0000085d: 	callq	_ZdlPvm@PLT # Offset: 2141
    00000862: 	cmpq	%rbp, %r15
    00000865: 	ja	.Ltmp7018 # Offset: 2149
    00000867: 	movq	0x50(%r12), %rdi
.Ltmp7017:
    0000086c: 	movq	0x58(%r12), %rax
    00000871: 	leaq	(,%rax,8), %rsi
    00000879: 	callq	_ZdlPvm@PLT # Offset: 2169
.Ltmp7016:
    0000087e: 	movq	(%r12), %rdi
    00000882: 	testq	%rdi, %rdi
    00000885: 	je	.Ltmp7019 # Offset: 2181
    00000887: 	movq	0x48(%r12), %rax
    0000088c: 	movq	0x28(%r12), %rbp
    00000891: 	leaq	0x8(%rax), %r15
    00000895: 	cmpq	%rbp, %r15
    00000898: 	jbe	.Ltmp7020 # Offset: 2200
    0000089a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7021:
    000008a0: 	movq	(%rbp), %rdi
    000008a4: 	movl	$0x200, %esi
    000008a9: 	addq	$0x8, %rbp
    000008ad: 	callq	_ZdlPvm@PLT # Offset: 2221
    000008b2: 	cmpq	%rbp, %r15
    000008b5: 	ja	.Ltmp7021 # Offset: 2229
    000008b7: 	movq	(%r12), %rdi
.Ltmp7020:
    000008bb: 	movq	0x8(%r12), %rax
    000008c0: 	leaq	(,%rax,8), %rsi
    000008c8: 	callq	_ZdlPvm@PLT # Offset: 2248
.Ltmp7019:
    000008cd: 	movl	$0xc8, %esi
    000008d2: 	movq	%r12, %rdi
    000008d5: 	callq	_ZdlPvm@PLT # Offset: 2261
.Ltmp7014:
    000008da: 	movq	$0x0, (%rbx)
    000008e1: 	addq	$0x8, %rbx
    000008e5: 	cmpq	%r14, %rbx
    000008e8: 	jne	.Ltmp7022 # Offset: 2280
    000008ee: 	movl	0x38(%rsp), %ecx
    000008f2: 	movl	iterations(%rip), %eax
    000008f8: 	addl	%ecx, 0x60(%rsp)
    000008fc: 	movl	0x60(%rsp), %ecx
    00000900: 	cmpl	%ecx, %eax
    00000902: 	jg	.Ltmp7023 # Offset: 2306
.Ltmp7064:
    00000908: 	movq	0x80(%rsp), %rdi
    00000910: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2320
    00000915: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000091c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000923: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000092a: 	je	.Ltmp7024 # Offset: 2346
.Ltmp7063:
    00000930: 	movsd	0x88(%rsp), %xmm1
    00000939: 	movq	-0x20(%rax), %rdi
    0000093d: 	pxor	%xmm0, %xmm0
    00000941: 	movq	0x70(%rsp), %rax
    00000946: 	subq	0x78(%rsp), %rax
    0000094b: 	cvtsi2sd	%rax, %xmm0
    00000950: 	divsd	DATAat0x53788(%rip), %xmm0
    00000958: 	subsd	%xmm0, %xmm1
    0000095c: 	movapd	%xmm1, %xmm0
    00000960: 	callq	_Z13record_resultdPKc # Offset: 2400
    00000965: 	testq	%r13, %r13
    00000968: 	je	.Ltmp7025 # Offset: 2408
    0000096e: 	movq	0xb8(%rsp), %rax
    00000976: 	subq	%fs:0x28, %rax
    0000097f: 	jne	.Ltmp7026 # Offset: 2431
    00000985: 	movq	0xb0(%rsp), %rsi
    0000098d: 	addq	$0xc8, %rsp
    00000994: 	movq	%r13, %rdi
    00000997: 	popq	%rbx
    00000998: 	popq	%rbp
    00000999: 	subq	%r13, %rsi
    0000099c: 	popq	%r12
    0000099e: 	popq	%r13
    000009a0: 	popq	%r14
    000009a2: 	popq	%r15
    000009a4: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 2468
.Ltmp7009:
    000009a9: 	movq	%rax, %rcx
    000009ac: 	andl	$0xf, %eax
    000009af: 	sarq	$0x4, %rcx
.Ltmp7048:
    000009b3: 	shlq	$0x5, %rax
    000009b7: 	addq	(%rdx,%rcx,8), %rax
    000009bb: 	movq	%rax, 0x10(%rsp)
    000009c0: 	movq	%rax, %rcx
    000009c3: 	movq	%rbx, 0x18(%rax)
    000009c7: 	jmp	.Ltmp7027 # Offset: 2503
.Ltmp7003:
    000009cc: 	movq	%rbp, %rdi
    000009cf: 	callq	_ZN11HashMapBaseIdd20HashMapPoolAllocatorIddEE15grow_hash_tableEv # Offset: 2511
    000009d4: 	movq	0xb8(%rbp), %rdi
    000009db: 	jmp	.Ltmp7028 # Offset: 2523
.Ltmp7006:
    000009e0: 	movq	0x98(%rbp), %r8
    000009e7: 	movq	0x78(%rbp), %rax
    000009eb: 	movq	0x70(%rbp), %rsi
    000009ef: 	movq	0x80(%rbp), %r12
    000009f6: 	movq	%r8, %r10
    000009f9: 	movq	0x60(%rbp), %r9
    000009fd: 	subq	%rax, %r10
    00000a00: 	sarq	$0x3, %r10
    00000a04: 	cmpq	$0x1, %r8
    00000a08: 	adcq	$-0x1, %r10
    00000a0c: 	subq	0x88(%rbp), %r12
    00000a13: 	shlq	$0x4, %r10
    00000a17: 	sarq	$0x5, %r12
    00000a1b: 	addq	%r10, %r12
    00000a1e: 	movq	%rsi, %r10
    00000a21: 	subq	%r9, %r10
    00000a24: 	sarq	$0x5, %r10
    00000a28: 	addq	%r10, %r12
    00000a2b: 	leaq	0x80(%r12), %rbx
    00000a33: 	cmpq	%rbx, %r12
    00000a36: 	jb	.Ltmp7029 # Offset: 2614
    00000a3c: 	movq	0x68(%rbp), %r11
    00000a40: 	movq	%r9, %r10
    00000a43: 	subq	%r11, %r10
    00000a46: 	sarq	$0x5, %r10
    00000a4a: 	addq	%rbx, %r10
    00000a4d: 	js	.Ltmp7030 # Offset: 2637
    00000a53: 	cmpq	$0xf, %r10
    00000a57: 	jg	.Ltmp7031 # Offset: 2647
    00000a5d: 	shlq	$0x5, %rbx
    00000a61: 	addq	%rbx, %r9
    00000a64: 	jmp	.Ltmp7032 # Offset: 2660
    00000a69: 	nopl	(%rax) # Size: 7
.Ltmp7010:
    00000a70: 	movq	0xb0(%rbp), %r13
    00000a77: 	movss	0xc0(%rbp), %xmm1
    00000a7f: 	testq	%rbx, %rbx
    00000a82: 	je	.Ltmp7033 # Offset: 2690
    00000a88: 	js	.Ltmp7034 # Offset: 2696
    00000a8e: 	pxor	%xmm0, %xmm0
    00000a92: 	cvtsi2ss	%rbx, %xmm0
.Ltmp7059:
    00000a97: 	divss	%xmm1, %xmm0
    00000a9b: 	movss	DATAat0x537b0(%rip), %xmm2
    00000aa3: 	movss	DATAat0x5379c(%rip), %xmm3
    00000aab: 	movaps	%xmm0, %xmm1
    00000aae: 	andps	%xmm2, %xmm1
    00000ab1: 	ucomiss	%xmm1, %xmm3
    00000ab4: 	jbe	.Ltmp7035 # Offset: 2740
    00000ab6: 	cvttss2si	%xmm0, %eax
    00000aba: 	pxor	%xmm1, %xmm1
    00000abe: 	movaps	%xmm0, %xmm3
    00000ac1: 	movss	DATAat0x53798(%rip), %xmm7
    00000ac9: 	andnps	%xmm0, %xmm2
    00000acc: 	cvtsi2ss	%eax, %xmm1
    00000ad0: 	cmpnless	%xmm1, %xmm3
    00000ad5: 	andps	%xmm7, %xmm3
    00000ad8: 	addss	%xmm3, %xmm1
    00000adc: 	orps	%xmm2, %xmm1
    00000adf: 	movaps	%xmm1, %xmm0
.Ltmp7035:
    00000ae2: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000ae9: 	jae	.Ltmp7036 # Offset: 2793
    00000aef: 	cvttss2si	%xmm0, %rax
.Ltmp7058:
    00000af4: 	movl	$0x8, %edx
    00000af9: 	movq	%rbx, %xmm2
    00000afe: 	cmpq	%rdx, %rax
    00000b01: 	cmovbq	%rdx, %rax
    00000b05: 	movq	%rax, %rdx
    00000b08: 	shrq	%rdx
    00000b0b: 	addq	%rax, %rdx
    00000b0e: 	movq	%rdx, %xmm0
    00000b13: 	punpcklqdq	%xmm2, %xmm0
    00000b17: 	movups	%xmm0, 0xa8(%rbp)
    00000b1e: 	cmpq	%r13, %rbx
    00000b21: 	je	.Ltmp7037 # Offset: 2849
    00000b27: 	movq	%rbx, %rax
    00000b2a: 	shrq	$0x3c, %rax
    00000b2e: 	jne	.Ltmp7038 # Offset: 2862
    00000b34: 	leaq	(,%rbx,8), %rdi
.Ltmp7052:
    00000b3c: 	callq	_Znam@PLT # Offset: 2876
    00000b41: 	leaq	(,%rbx,8), %rdx
    00000b49: 	xorl	%esi, %esi
    00000b4b: 	movq	%rax, %rdi
    00000b4e: 	movq	%rax, %r15
    00000b51: 	callq	memset@PLT # Offset: 2897
    00000b56: 	movq	0xb8(%rbp), %rax
    00000b5d: 	movq	%rax, 0x20(%rsp)
    00000b62: 	testq	%r13, %r13
    00000b65: 	je	.Ltmp7039 # Offset: 2917
    00000b6b: 	movq	%r13, 0x40(%rsp)
    00000b70: 	xorl	%r14d, %r14d
    00000b73: 	movl	$0xc70f6907, %r12d
    00000b79: 	nopl	(%rax) # Size: 7
.Ltmp7045:
    00000b80: 	movq	0x20(%rsp), %rax
    00000b85: 	movq	(%rax,%r14,8), %rbx
    00000b89: 	testq	%rbx, %rbx
    00000b8c: 	jne	.Ltmp7040 # Offset: 2956
    00000b8e: 	jmp	.Ltmp7041 # Offset: 2958
.Ltmp7043:
    00000b90: 	movq	(%r15), %rax
    00000b93: 	movq	%rax, 0x10(%rbx)
    00000b97: 	movq	%rbx, (%r15)
    00000b9a: 	testq	%r13, %r13
    00000b9d: 	je	.Ltmp7041 # Offset: 2973
.Ltmp7044:
    00000b9f: 	movq	%r13, %rbx
.Ltmp7040:
    00000ba2: 	movsd	(%rbx), %xmm0
    00000ba6: 	pxor	%xmm5, %xmm5
    00000baa: 	movq	0x10(%rbx), %r13
    00000bae: 	movsd	%xmm0, 0x98(%rsp)
    00000bb7: 	ucomisd	%xmm5, %xmm0
    00000bbb: 	jp	.Ltmp7042 # Offset: 3003
    00000bbd: 	je	.Ltmp7043 # Offset: 3005
.Ltmp7042:
    00000bbf: 	movq	%r12, %rdx
    00000bc2: 	leaq	0x98(%rsp), %rdi
    00000bca: 	movl	$0x8, %esi
    00000bcf: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 3023
    00000bd4: 	xorl	%edx, %edx
    00000bd6: 	divq	0xb0(%rbp)
    00000bdd: 	leaq	(%r15,%rdx,8), %rax
    00000be1: 	movq	(%rax), %rdx
    00000be4: 	movq	%rdx, 0x10(%rbx)
    00000be8: 	movq	%rbx, (%rax)
    00000beb: 	testq	%r13, %r13
    00000bee: 	jne	.Ltmp7044 # Offset: 3054
.Ltmp7041:
    00000bf0: 	addq	$0x1, %r14
    00000bf4: 	cmpq	%r14, 0x40(%rsp)
    00000bf9: 	jne	.Ltmp7045 # Offset: 3065
    00000bff: 	movq	0xb8(%rbp), %rax
    00000c06: 	movq	%rax, 0x20(%rsp)
.Ltmp7039:
    00000c0b: 	testq	%rax, %rax
    00000c0e: 	je	.Ltmp7046 # Offset: 3086
    00000c10: 	movq	%rax, %rdi
    00000c13: 	callq	_ZdaPv@PLT # Offset: 3091
.Ltmp7046:
    00000c18: 	movq	%r15, 0xb8(%rbp)
    00000c1f: 	jmp	.Ltmp7037 # Offset: 3103
.Ltmp7007:
    00000c24: 	movq	-0x8(%rdx), %rax
    00000c28: 	movl	$0x200, %esi
    00000c2d: 	movq	0x1f8(%rax), %rbx
    00000c34: 	callq	_ZdlPvm@PLT # Offset: 3124
    00000c39: 	movq	0x48(%rbp), %rdx
    00000c3d: 	movq	-0x8(%rdx), %rax
    00000c41: 	subq	$0x8, %rdx
    00000c45: 	leaq	0x1f8(%rax), %rcx
    00000c4c: 	movq	%rax, %xmm2
    00000c51: 	addq	$0x200, %rax
    00000c57: 	movq	%rcx, %xmm0
    00000c5c: 	punpcklqdq	%xmm2, %xmm0
    00000c60: 	movq	%rdx, %xmm2
    00000c65: 	movups	%xmm0, 0x30(%rbp)
    00000c69: 	movq	%rax, %xmm0
    00000c6e: 	punpcklqdq	%xmm2, %xmm0
    00000c72: 	movups	%xmm0, 0x40(%rbp)
    00000c76: 	jmp	.Ltmp7047 # Offset: 3190
.Ltmp7008:
    00000c7b: 	movq	%rax, %rcx
    00000c7e: 	notq	%rcx
    00000c81: 	shrq	$0x4, %rcx
    00000c85: 	notq	%rcx
    00000c88: 	movq	%rcx, %rsi
    00000c8b: 	shlq	$0x4, %rsi
    00000c8f: 	subq	%rsi, %rax
    00000c92: 	jmp	.Ltmp7048 # Offset: 3218
.Ltmp6982:
    00000c97: 	movq	$0x3e8, 0x38(%rsp)
.Ltmp6983:
    00000ca0: 	movq	$0x0, 0xb0(%rsp)
    00000cac: 	pxor	%xmm0, %xmm0
    00000cb0: 	movaps	%xmm0, 0xa0(%rsp)
    00000cb8: 	jmp	.Ltmp7049 # Offset: 3256
.Ltmp7033:
    00000cbd: 	movss	DATAat0x537a4(%rip), %xmm0
    00000cc5: 	movss	DATAat0x5379c(%rip), %xmm2
    00000ccd: 	divss	%xmm1, %xmm0
    00000cd1: 	movss	DATAat0x537b0(%rip), %xmm1
    00000cd9: 	andps	%xmm0, %xmm1
    00000cdc: 	ucomiss	%xmm1, %xmm2
    00000cdf: 	jbe	.Ltmp7050 # Offset: 3295
    00000ce1: 	cvttss2si	%xmm0, %eax
    00000ce5: 	pxor	%xmm1, %xmm1
    00000ce9: 	movaps	%xmm0, %xmm2
    00000cec: 	movss	DATAat0x53798(%rip), %xmm7
    00000cf4: 	cvtsi2ss	%eax, %xmm1
    00000cf8: 	cmpnless	%xmm1, %xmm2
    00000cfd: 	andps	%xmm7, %xmm2
    00000d00: 	addss	%xmm2, %xmm1
    00000d04: 	movss	DATAat0x537b0(%rip), %xmm2
    00000d0c: 	andnps	%xmm0, %xmm2
    00000d0f: 	orps	%xmm2, %xmm1
    00000d12: 	movaps	%xmm1, %xmm0
.Ltmp7050:
    00000d15: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000d1c: 	jae	.Ltmp7051 # Offset: 3356
    00000d22: 	cvttss2si	%xmm0, %rax
.Ltmp7057:
    00000d27: 	movq	$0x8, 0xb0(%rbp)
    00000d32: 	movl	$0x8, %edx
    00000d37: 	cmpq	%rdx, %rax
    00000d3a: 	cmovbq	%rdx, %rax
    00000d3e: 	movq	%rax, %rdx
    00000d41: 	shrq	%rdx
    00000d44: 	addq	%rdx, %rax
    00000d47: 	movq	%rax, 0xa8(%rbp)
    00000d4e: 	cmpq	$0x8, %r13
    00000d52: 	je	.Ltmp7037 # Offset: 3410
    00000d58: 	movl	$0x40, %edi
    00000d5d: 	movl	$0x8, %ebx
    00000d62: 	jmp	.Ltmp7052 # Offset: 3426
.Ltmp7029:
    00000d67: 	movq	0x58(%rsp), %rdi
    00000d6c: 	movl	$0x80, %esi
    00000d71: 	callq	"_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 3441
    00000d76: 	movq	0x30(%rbp), %rdi
    00000d7a: 	leaq	0x98(%rsp), %r14
    00000d82: 	jmp	.Ltmp7053 # Offset: 3458
    00000d84: 	nopl	(%rax) # Size: 4
.Ltmp7055:
    00000d88: 	movq	%rbx, (%rdi)
    00000d8b: 	addq	$0x8, %rdi
    00000d8f: 	movq	%rdi, 0x30(%rbp)
    00000d93: 	cmpq	%rbx, %r12
    00000d96: 	je	.Ltmp7054 # Offset: 3478
.Ltmp7053:
    00000d98: 	movq	0x40(%rbp), %rax
    00000d9c: 	subq	$0x1, %rbx
    00000da0: 	movq	%rbx, 0x98(%rsp)
    00000da8: 	subq	$0x8, %rax
    00000dac: 	cmpq	%rax, %rdi
    00000daf: 	jne	.Ltmp7055 # Offset: 3503
    00000db1: 	movq	%r14, %rsi
    00000db4: 	movq	%rbp, %rdi
    00000db7: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 3511
    00000dbc: 	movq	0x30(%rbp), %rdi
    00000dc0: 	cmpq	%rbx, %r12
    00000dc3: 	jne	.Ltmp7053 # Offset: 3523
.Ltmp7054:
    00000dc5: 	movq	0x38(%rbp), %rcx
    00000dc9: 	movq	0x48(%rbp), %rdx
    00000dcd: 	jmp	.Ltmp7056 # Offset: 3533
.Ltmp7051:
    00000dd2: 	subss	DATAat0x537a0(%rip), %xmm0
    00000dda: 	cvttss2si	%xmm0, %rax
    00000ddf: 	btcq	$0x3f, %rax
    00000de4: 	jmp	.Ltmp7057 # Offset: 3556
.Ltmp7036:
    00000de9: 	subss	DATAat0x537a0(%rip), %xmm0
    00000df1: 	cvttss2si	%xmm0, %rax
    00000df6: 	btcq	$0x3f, %rax
    00000dfb: 	jmp	.Ltmp7058 # Offset: 3579
.Ltmp7034:
    00000e00: 	movq	%rbx, %rax
    00000e03: 	movq	%rbx, %rdx
    00000e06: 	pxor	%xmm0, %xmm0
    00000e0a: 	shrq	%rax
    00000e0d: 	andl	$0x1, %edx
    00000e10: 	orq	%rdx, %rax
    00000e13: 	cvtsi2ss	%rax, %xmm0
    00000e18: 	addss	%xmm0, %xmm0
    00000e1c: 	jmp	.Ltmp7059 # Offset: 3612
.Ltmp7025:
    00000e21: 	movq	0xb8(%rsp), %rax
    00000e29: 	subq	%fs:0x28, %rax
    00000e32: 	jne	.Ltmp7026 # Offset: 3634
    00000e38: 	addq	$0xc8, %rsp
    00000e3f: 	popq	%rbx
    00000e40: 	popq	%rbp
    00000e41: 	popq	%r12
    00000e43: 	popq	%r13
    00000e45: 	popq	%r14
    00000e47: 	popq	%r15
    00000e49: 	retq # Offset: 3657
.Ltmp7030:
    00000e4a: 	movq	%r10, %rbx
    00000e4d: 	notq	%rbx
    00000e50: 	shrq	$0x4, %rbx
    00000e54: 	notq	%rbx
.Ltmp7062:
    00000e57: 	leaq	(%rax,%rbx,8), %rax
    00000e5b: 	movq	%r10, %r9
    00000e5e: 	shlq	$0x4, %rbx
    00000e62: 	movq	(%rax), %r11
    00000e65: 	subq	%rbx, %r9
    00000e68: 	shlq	$0x5, %r9
    00000e6c: 	leaq	0x200(%r11), %rsi
    00000e73: 	addq	%r11, %r9
.Ltmp7032:
    00000e76: 	movq	%r11, %xmm7
    00000e7b: 	movq	%r9, %xmm2
    00000e80: 	leaq	0x8(%r8), %rbx
    00000e84: 	punpcklqdq	%xmm7, %xmm2
    00000e88: 	movq	%rax, %xmm7
    00000e8d: 	leaq	0x8(%rax), %r12
    00000e91: 	movaps	%xmm2, 0x10(%rsp)
    00000e96: 	movq	%rsi, %xmm2
    00000e9b: 	punpcklqdq	%xmm7, %xmm2
    00000e9f: 	movaps	%xmm2, 0x20(%rsp)
    00000ea4: 	cmpq	%r12, %rbx
    00000ea7: 	jbe	.Ltmp7060 # Offset: 3751
.Ltmp7061:
    00000ea9: 	movq	(%r12), %rdi
    00000ead: 	movl	$0x200, %esi
    00000eb2: 	addq	$0x8, %r12
    00000eb6: 	callq	_ZdlPvm@PLT # Offset: 3766
    00000ebb: 	cmpq	%r12, %rbx
    00000ebe: 	ja	.Ltmp7061 # Offset: 3774
    00000ec0: 	movq	0x30(%rbp), %rdi
    00000ec4: 	movq	0x38(%rbp), %rcx
    00000ec8: 	movq	0x48(%rbp), %rdx
.Ltmp7060:
    00000ecc: 	movdqa	0x10(%rsp), %xmm2
    00000ed2: 	movups	%xmm2, 0x80(%rbp)
    00000ed9: 	movdqa	0x20(%rsp), %xmm2
    00000edf: 	movups	%xmm2, 0x90(%rbp)
    00000ee6: 	jmp	.Ltmp7056 # Offset: 3814
.Ltmp7031:
    00000eeb: 	movq	%r10, %rbx
    00000eee: 	sarq	$0x4, %rbx
    00000ef2: 	jmp	.Ltmp7062 # Offset: 3826
.Ltmp7024:
    00000ef7: 	movq	-0x8(%rdx), %rax
    00000efb: 	addq	$0x200, %rax
    00000f01: 	jmp	.Ltmp7063 # Offset: 3841
.Ltmp6984:
    00000f06: 	pxor	%xmm2, %xmm2
    00000f0a: 	movq	0xa0(%rsp), %r13
    00000f12: 	movsd	%xmm2, 0x88(%rsp)
    00000f1b: 	jmp	.Ltmp7064 # Offset: 3867
.Ltmp7026:
    00000f20: 	callq	__stack_chk_fail@PLT # Offset: 3872
    00000f25: 	endbr64
    00000f29: 	movq	%rax, %rbx
    00000f2c: 	jmp	.Ltmp7065 # Offset: 3884
    00000f2e: 	endbr64
    00000f32: 	movq	%rax, %rbx
    00000f35: 	jmp	.Ltmp7066 # Offset: 3893
.Ltmp7071:
    00000f37: 	callq	__cxa_end_catch@PLT # Offset: 3895
.Ltmp7066:
    00000f3c: 	movq	%rbp, %rdi
    00000f3f: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 3903
.Ltmp7065:
    00000f44: 	movq	%rbp, %rdi
    00000f47: 	movl	$0xc8, %esi
    00000f4c: 	movq	%rbx, %rbp
    00000f4f: 	callq	_ZdlPvm@PLT # Offset: 3919
.Ltmp7068:
    00000f54: 	movq	0xa0(%rsp), %rdi
    00000f5c: 	movq	0xb0(%rsp), %rsi
    00000f64: 	subq	%rdi, %rsi
    00000f67: 	testq	%rdi, %rdi
    00000f6a: 	je	.Ltmp7067 # Offset: 3946
    00000f6c: 	callq	_ZdlPvm@PLT # Offset: 3948
.Ltmp7067:
    00000f71: 	movq	%rbp, %rdi
    00000f74: 	callq	_Unwind_Resume@PLT # Offset: 3956
    00000f79: 	endbr64
    00000f7d: 	movq	%rax, %rbp
    00000f80: 	jmp	.Ltmp7068 # Offset: 3968
.Ltmp7038:
    00000f82: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 3970
    00000f87: 	endbr64
    00000f8b: 	movq	%rax, %r12
    00000f8e: 	jmp	.Ltmp7069 # Offset: 3982
    00000f90: 	endbr64
    00000f94: 	movq	%rax, %rdi
    00000f97: 	jmp	.Ltmp7070 # Offset: 3991
.Ltmp7069:
    00000f99: 	movq	%rbp, %rdi
    00000f9c: 	movl	$0xc8, %esi
    00000fa1: 	callq	_ZdlPvm@PLT # Offset: 4001
    00000fa6: 	movq	%r12, %rdi
    00000fa9: 	callq	_Unwind_Resume@PLT # Offset: 4009
.Ltmp7070:
    00000fae: 	callq	__cxa_begin_catch@PLT # Offset: 4014
    00000fb3: 	callq	__cxa_rethrow@PLT # Offset: 4019
    00000fb8: 	endbr64
    00000fbc: 	movq	%rax, %r12
    00000fbf: 	callq	__cxa_end_catch@PLT # Offset: 4031
    00000fc4: 	movq	%r12, %rdi
    00000fc7: 	callq	__cxa_begin_catch@PLT # Offset: 4039
    00000fcc: 	movq	0x58(%rbp), %rax
    00000fd0: 	movq	0x50(%rbp), %rdi
    00000fd4: 	leaq	(,%rax,8), %rsi
    00000fdc: 	callq	_ZdlPvm@PLT # Offset: 4060
    00000fe1: 	movq	$0x0, 0x50(%rbp)
    00000fe9: 	movq	$0x0, 0x58(%rbp)
    00000ff1: 	callq	__cxa_rethrow@PLT # Offset: 4081
    00000ff6: 	endbr64
    00000ffa: 	movq	%rax, %rbx
    00000ffd: 	jmp	.Ltmp7071 # Offset: 4093
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_insert_mapId13PooledHashMapIddELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17testInsert_commonIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_" after disassembly {
  Number      : 345
  State       : disassembled
  Address     : 0x4a7c0
  Size        : 0xcdb
  MaxSize     : 0xce0
  Offset      : 0x4a7c0
  Section     : .text
  Orc Section : .local.text._Z17testInsert_commonIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0344:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%r8, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdx, %rbx
    00000017: 	leaq	DATAat0x52989(%rip), %rdx
    0000001e: 	movq	%rbx, %rsi
    00000021: 	subq	$0xf8, %rsp
    00000028: 	movq	%rdi, (%rsp)
    0000002c: 	leaq	0x80(%rsp), %r14
    00000034: 	leaq	0xa0(%rsp), %r13
    0000003c: 	movq	%r14, %rdi
    0000003f: 	movq	%fs:0x28, %rax
    00000048: 	movq	%rax, 0xe8(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	movl	%ecx, iterations(%rip)
    00000058: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 88
    0000005d: 	movq	0x8(%rbp), %rcx
    00000061: 	movq	(%rbp), %rdx
    00000065: 	movq	%r14, %rsi
    00000068: 	movq	%r13, %rdi
    0000006b: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 107
    00000070: 	leaq	0xc0(%rsp), %r12
    00000078: 	leaq	DATAat0x530f0(%rip), %rdx
    0000007f: 	movq	%r13, %rsi
    00000082: 	movq	%r12, %rdi
    00000085: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 133
    0000008a: 	movq	(%rsp), %rdi
    0000008e: 	movq	%r12, %rdx
    00000091: 	leaq	(%rdi,%r15,8), %rax
    00000095: 	movq	%rax, %rsi
    00000098: 	movq	%rax, 0x28(%rsp)
    0000009d: 	callq	_Z16test_insert_set1IdSt3setIdSt4lessIdESaIdEELb1EEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 157
    000000a2: 	movq	0xc0(%rsp), %rdi
    000000aa: 	leaq	0xd0(%rsp), %rax
    000000b2: 	movq	%rax, 0x20(%rsp)
    000000b7: 	cmpq	%rax, %rdi
    000000ba: 	je	.Ltmp7072 # Offset: 186
    000000bc: 	movq	0xd0(%rsp), %rax
    000000c4: 	leaq	0x1(%rax), %rsi
    000000c8: 	callq	_ZdlPvm@PLT # Offset: 200
.Ltmp7072:
    000000cd: 	movq	0xa0(%rsp), %rdi
    000000d5: 	leaq	0xb0(%rsp), %rax
    000000dd: 	movq	%rax, 0x18(%rsp)
    000000e2: 	cmpq	%rax, %rdi
    000000e5: 	je	.Ltmp7073 # Offset: 229
    000000e7: 	movq	0xb0(%rsp), %rax
    000000ef: 	leaq	0x1(%rax), %rsi
    000000f3: 	callq	_ZdlPvm@PLT # Offset: 243
.Ltmp7073:
    000000f8: 	movq	0x80(%rsp), %rdi
    00000100: 	leaq	0x90(%rsp), %rax
    00000108: 	movq	%rax, 0x10(%rsp)
    0000010d: 	cmpq	%rax, %rdi
    00000110: 	je	.Ltmp7074 # Offset: 272
    00000112: 	movq	0x90(%rsp), %rax
    0000011a: 	leaq	0x1(%rax), %rsi
    0000011e: 	callq	_ZdlPvm@PLT # Offset: 286
.Ltmp7074:
    00000123: 	leaq	DATAat0x5299a(%rip), %rdx
    0000012a: 	movq	%rbx, %rsi
    0000012d: 	movq	%r14, %rdi
    00000130: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 304
    00000135: 	movq	0x8(%rbp), %rcx
    00000139: 	movq	(%rbp), %rdx
    0000013d: 	movq	%r14, %rsi
    00000140: 	movq	%r13, %rdi
    00000143: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 323
    00000148: 	leaq	DATAat0x530f0(%rip), %rdx
    0000014f: 	movq	%r13, %rsi
    00000152: 	movq	%r12, %rdi
    00000155: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 341
    0000015a: 	movq	0x28(%rsp), %rsi
    0000015f: 	movq	(%rsp), %rdi
    00000163: 	movq	%r12, %rdx
    00000166: 	callq	_Z16test_insert_set1IdSt8multisetIdSt4lessIdESaIdEELb1EEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 358
    0000016b: 	movq	0xc0(%rsp), %rdi
    00000173: 	cmpq	0x20(%rsp), %rdi
    00000178: 	je	.Ltmp7075 # Offset: 376
    0000017a: 	movq	0xd0(%rsp), %rax
    00000182: 	leaq	0x1(%rax), %rsi
    00000186: 	callq	_ZdlPvm@PLT # Offset: 390
.Ltmp7075:
    0000018b: 	movq	0xa0(%rsp), %rdi
    00000193: 	cmpq	0x18(%rsp), %rdi
    00000198: 	je	.Ltmp7076 # Offset: 408
    0000019a: 	movq	0xb0(%rsp), %rax
    000001a2: 	leaq	0x1(%rax), %rsi
    000001a6: 	callq	_ZdlPvm@PLT # Offset: 422
.Ltmp7076:
    000001ab: 	movq	0x80(%rsp), %rdi
    000001b3: 	cmpq	0x10(%rsp), %rdi
    000001b8: 	je	.Ltmp7077 # Offset: 440
    000001ba: 	movq	0x90(%rsp), %rax
    000001c2: 	leaq	0x1(%rax), %rsi
    000001c6: 	callq	_ZdlPvm@PLT # Offset: 454
.Ltmp7077:
    000001cb: 	leaq	0x40(%rsp), %r15
    000001d0: 	leaq	DATAat0x52564(%rip), %rdx
    000001d7: 	movq	%rbx, %rsi
    000001da: 	movq	%r15, %rdi
    000001dd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 477
    000001e2: 	leaq	0x60(%rsp), %rax
    000001e7: 	movq	(%rbx), %rdx
    000001ea: 	movq	%r15, %rsi
    000001ed: 	movq	0x8(%rbx), %rcx
    000001f1: 	movq	%rax, %rdi
    000001f4: 	movq	%rax, 0x8(%rsp)
    000001f9: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 505
    000001fe: 	movq	0x8(%rsp), %rsi
    00000203: 	leaq	DATAat0x529aa(%rip), %rdx
    0000020a: 	movq	%r14, %rdi
    0000020d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 525
    00000212: 	movq	0x8(%rbp), %rcx
    00000216: 	movq	(%rbp), %rdx
    0000021a: 	movq	%r14, %rsi
    0000021d: 	movq	%r13, %rdi
    00000220: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 544
    00000225: 	leaq	DATAat0x530f0(%rip), %rdx
    0000022c: 	movq	%r13, %rsi
    0000022f: 	movq	%r12, %rdi
    00000232: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 562
    00000237: 	movq	0x28(%rsp), %rsi
    0000023c: 	movq	(%rsp), %rdi
    00000240: 	movq	%r12, %rdx
    00000243: 	callq	_Z15test_insert_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEELb1EEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 579
    00000248: 	movq	0xc0(%rsp), %rdi
    00000250: 	cmpq	0x20(%rsp), %rdi
    00000255: 	je	.Ltmp7078 # Offset: 597
    00000257: 	movq	0xd0(%rsp), %rax
    0000025f: 	leaq	0x1(%rax), %rsi
    00000263: 	callq	_ZdlPvm@PLT # Offset: 611
.Ltmp7078:
    00000268: 	movq	0xa0(%rsp), %rdi
    00000270: 	cmpq	0x18(%rsp), %rdi
    00000275: 	je	.Ltmp7079 # Offset: 629
    00000277: 	movq	0xb0(%rsp), %rax
    0000027f: 	leaq	0x1(%rax), %rsi
    00000283: 	callq	_ZdlPvm@PLT # Offset: 643
.Ltmp7079:
    00000288: 	movq	0x80(%rsp), %rdi
    00000290: 	cmpq	0x10(%rsp), %rdi
    00000295: 	je	.Ltmp7080 # Offset: 661
    00000297: 	movq	0x90(%rsp), %rax
    0000029f: 	leaq	0x1(%rax), %rsi
    000002a3: 	callq	_ZdlPvm@PLT # Offset: 675
.Ltmp7080:
    000002a8: 	movq	0x60(%rsp), %rdi
    000002ad: 	leaq	0x70(%rsp), %rax
    000002b2: 	movq	%rax, 0x38(%rsp)
    000002b7: 	cmpq	%rax, %rdi
    000002ba: 	je	.Ltmp7081 # Offset: 698
    000002bc: 	movq	0x70(%rsp), %rax
    000002c1: 	leaq	0x1(%rax), %rsi
    000002c5: 	callq	_ZdlPvm@PLT # Offset: 709
.Ltmp7081:
    000002ca: 	movq	0x40(%rsp), %rdi
    000002cf: 	leaq	0x50(%rsp), %rax
    000002d4: 	movq	%rax, 0x30(%rsp)
    000002d9: 	cmpq	%rax, %rdi
    000002dc: 	je	.Ltmp7082 # Offset: 732
    000002de: 	movq	0x50(%rsp), %rax
    000002e3: 	leaq	0x1(%rax), %rsi
    000002e7: 	callq	_ZdlPvm@PLT # Offset: 743
.Ltmp7082:
    000002ec: 	leaq	DATAat0x52564(%rip), %rdx
    000002f3: 	movq	%rbx, %rsi
    000002f6: 	movq	%r15, %rdi
    000002f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 761
    000002fe: 	movq	0x8(%rbx), %rcx
    00000302: 	movq	(%rbx), %rdx
    00000305: 	movq	%r15, %rsi
    00000308: 	movq	0x8(%rsp), %rdi
    0000030d: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 781
    00000312: 	movq	0x8(%rsp), %rsi
    00000317: 	leaq	DATAat0x529b5(%rip), %rdx
    0000031e: 	movq	%r14, %rdi
    00000321: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 801
    00000326: 	movq	0x8(%rbp), %rcx
    0000032a: 	movq	(%rbp), %rdx
    0000032e: 	movq	%r14, %rsi
    00000331: 	movq	%r13, %rdi
    00000334: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 820
    00000339: 	leaq	DATAat0x530f0(%rip), %rdx
    00000340: 	movq	%r13, %rsi
    00000343: 	movq	%r12, %rdi
    00000346: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 838
    0000034b: 	movq	0x28(%rsp), %rsi
    00000350: 	movq	(%rsp), %rdi
    00000354: 	movq	%r12, %rdx
    00000357: 	callq	_Z20test_insert_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEELb1EEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 855
    0000035c: 	movq	0xc0(%rsp), %rdi
    00000364: 	cmpq	0x20(%rsp), %rdi
    00000369: 	je	.Ltmp7083 # Offset: 873
    0000036b: 	movq	0xd0(%rsp), %rax
    00000373: 	leaq	0x1(%rax), %rsi
    00000377: 	callq	_ZdlPvm@PLT # Offset: 887
.Ltmp7083:
    0000037c: 	movq	0xa0(%rsp), %rdi
    00000384: 	cmpq	0x18(%rsp), %rdi
    00000389: 	je	.Ltmp7084 # Offset: 905
    0000038b: 	movq	0xb0(%rsp), %rax
    00000393: 	leaq	0x1(%rax), %rsi
    00000397: 	callq	_ZdlPvm@PLT # Offset: 919
.Ltmp7084:
    0000039c: 	movq	0x80(%rsp), %rdi
    000003a4: 	cmpq	0x10(%rsp), %rdi
    000003a9: 	je	.Ltmp7085 # Offset: 937
    000003ab: 	movq	0x90(%rsp), %rax
    000003b3: 	leaq	0x1(%rax), %rsi
    000003b7: 	callq	_ZdlPvm@PLT # Offset: 951
.Ltmp7085:
    000003bc: 	movq	0x60(%rsp), %rdi
    000003c1: 	cmpq	0x38(%rsp), %rdi
    000003c6: 	je	.Ltmp7086 # Offset: 966
    000003c8: 	movq	0x70(%rsp), %rax
    000003cd: 	leaq	0x1(%rax), %rsi
    000003d1: 	callq	_ZdlPvm@PLT # Offset: 977
.Ltmp7086:
    000003d6: 	movq	0x40(%rsp), %rdi
    000003db: 	cmpq	0x30(%rsp), %rdi
    000003e0: 	je	.Ltmp7087 # Offset: 992
    000003e2: 	movq	0x50(%rsp), %rax
    000003e7: 	leaq	0x1(%rax), %rsi
    000003eb: 	callq	_ZdlPvm@PLT # Offset: 1003
.Ltmp7087:
    000003f0: 	leaq	DATAat0x529c5(%rip), %rdx
    000003f7: 	movq	%rbx, %rsi
    000003fa: 	movq	%r14, %rdi
    000003fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1021
    00000402: 	movq	0x8(%rbp), %rcx
    00000406: 	movq	(%rbp), %rdx
    0000040a: 	movq	%r14, %rsi
    0000040d: 	movq	%r13, %rdi
    00000410: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1040
    00000415: 	leaq	DATAat0x530f0(%rip), %rdx
    0000041c: 	movq	%r13, %rsi
    0000041f: 	movq	%r12, %rdi
    00000422: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1058
    00000427: 	movq	0x28(%rsp), %rsi
    0000042c: 	movq	(%rsp), %rdi
    00000430: 	movq	%r12, %rdx
    00000433: 	callq	_Z16test_insert_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEELb1EEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1075
    00000438: 	movq	0xc0(%rsp), %rdi
    00000440: 	cmpq	0x20(%rsp), %rdi
    00000445: 	je	.Ltmp7088 # Offset: 1093
    00000447: 	movq	0xd0(%rsp), %rax
    0000044f: 	leaq	0x1(%rax), %rsi
    00000453: 	callq	_ZdlPvm@PLT # Offset: 1107
.Ltmp7088:
    00000458: 	movq	0xa0(%rsp), %rdi
    00000460: 	cmpq	0x18(%rsp), %rdi
    00000465: 	je	.Ltmp7089 # Offset: 1125
    00000467: 	movq	0xb0(%rsp), %rax
    0000046f: 	leaq	0x1(%rax), %rsi
    00000473: 	callq	_ZdlPvm@PLT # Offset: 1139
.Ltmp7089:
    00000478: 	movq	0x80(%rsp), %rdi
    00000480: 	cmpq	0x10(%rsp), %rdi
    00000485: 	je	.Ltmp7090 # Offset: 1157
    00000487: 	movq	0x90(%rsp), %rax
    0000048f: 	leaq	0x1(%rax), %rsi
    00000493: 	callq	_ZdlPvm@PLT # Offset: 1171
.Ltmp7090:
    00000498: 	leaq	DATAat0x529da(%rip), %rdx
    0000049f: 	movq	%rbx, %rsi
    000004a2: 	movq	%r14, %rdi
    000004a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1189
    000004aa: 	movq	0x8(%rbp), %rcx
    000004ae: 	movq	(%rbp), %rdx
    000004b2: 	movq	%r14, %rsi
    000004b5: 	movq	%r13, %rdi
    000004b8: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1208
    000004bd: 	leaq	DATAat0x530f0(%rip), %rdx
    000004c4: 	movq	%r13, %rsi
    000004c7: 	movq	%r12, %rdi
    000004ca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1226
    000004cf: 	movq	0x28(%rsp), %rsi
    000004d4: 	movq	(%rsp), %rdi
    000004d8: 	movq	%r12, %rdx
    000004db: 	callq	_Z16test_insert_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEELb1EEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1243
    000004e0: 	movq	0xc0(%rsp), %rdi
    000004e8: 	cmpq	0x20(%rsp), %rdi
    000004ed: 	je	.Ltmp7091 # Offset: 1261
    000004ef: 	movq	0xd0(%rsp), %rax
    000004f7: 	leaq	0x1(%rax), %rsi
    000004fb: 	callq	_ZdlPvm@PLT # Offset: 1275
.Ltmp7091:
    00000500: 	movq	0xa0(%rsp), %rdi
    00000508: 	cmpq	0x18(%rsp), %rdi
    0000050d: 	je	.Ltmp7092 # Offset: 1293
    0000050f: 	movq	0xb0(%rsp), %rax
    00000517: 	leaq	0x1(%rax), %rsi
    0000051b: 	callq	_ZdlPvm@PLT # Offset: 1307
.Ltmp7092:
    00000520: 	movq	0x80(%rsp), %rdi
    00000528: 	cmpq	0x10(%rsp), %rdi
    0000052d: 	je	.Ltmp7093 # Offset: 1325
    0000052f: 	movq	0x90(%rsp), %rax
    00000537: 	leaq	0x1(%rax), %rsi
    0000053b: 	callq	_ZdlPvm@PLT # Offset: 1339
.Ltmp7093:
    00000540: 	leaq	DATAat0x52564(%rip), %rdx
    00000547: 	movq	%rbx, %rsi
    0000054a: 	movq	%r15, %rdi
    0000054d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1357
    00000552: 	movq	0x8(%rbx), %rcx
    00000556: 	movq	(%rbx), %rdx
    00000559: 	movq	%r15, %rsi
    0000055c: 	movq	0x8(%rsp), %rdi
    00000561: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1377
    00000566: 	movq	0x8(%rsp), %rsi
    0000056b: 	leaq	DATAat0x529f4(%rip), %rdx
    00000572: 	movq	%r14, %rdi
    00000575: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1397
    0000057a: 	movq	0x8(%rbp), %rcx
    0000057e: 	movq	(%rbp), %rdx
    00000582: 	movq	%r14, %rsi
    00000585: 	movq	%r13, %rdi
    00000588: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1416
    0000058d: 	leaq	DATAat0x530f0(%rip), %rdx
    00000594: 	movq	%r13, %rsi
    00000597: 	movq	%r12, %rdi
    0000059a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1434
    0000059f: 	movq	0x28(%rsp), %rsi
    000005a4: 	movq	(%rsp), %rdi
    000005a8: 	movq	%r12, %rdx
    000005ab: 	callq	_Z15test_insert_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEELb1EEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1451
    000005b0: 	movq	0xc0(%rsp), %rdi
    000005b8: 	cmpq	0x20(%rsp), %rdi
    000005bd: 	je	.Ltmp7094 # Offset: 1469
    000005bf: 	movq	0xd0(%rsp), %rax
    000005c7: 	leaq	0x1(%rax), %rsi
    000005cb: 	callq	_ZdlPvm@PLT # Offset: 1483
.Ltmp7094:
    000005d0: 	movq	0xa0(%rsp), %rdi
    000005d8: 	cmpq	0x18(%rsp), %rdi
    000005dd: 	je	.Ltmp7095 # Offset: 1501
    000005df: 	movq	0xb0(%rsp), %rax
    000005e7: 	leaq	0x1(%rax), %rsi
    000005eb: 	callq	_ZdlPvm@PLT # Offset: 1515
.Ltmp7095:
    000005f0: 	movq	0x80(%rsp), %rdi
    000005f8: 	cmpq	0x10(%rsp), %rdi
    000005fd: 	je	.Ltmp7096 # Offset: 1533
    000005ff: 	movq	0x90(%rsp), %rax
    00000607: 	leaq	0x1(%rax), %rsi
    0000060b: 	callq	_ZdlPvm@PLT # Offset: 1547
.Ltmp7096:
    00000610: 	movq	0x60(%rsp), %rdi
    00000615: 	cmpq	0x38(%rsp), %rdi
    0000061a: 	je	.Ltmp7097 # Offset: 1562
    0000061c: 	movq	0x70(%rsp), %rax
    00000621: 	leaq	0x1(%rax), %rsi
    00000625: 	callq	_ZdlPvm@PLT # Offset: 1573
.Ltmp7097:
    0000062a: 	movq	0x40(%rsp), %rdi
    0000062f: 	cmpq	0x30(%rsp), %rdi
    00000634: 	je	.Ltmp7098 # Offset: 1588
    00000636: 	movq	0x50(%rsp), %rax
    0000063b: 	leaq	0x1(%rax), %rsi
    0000063f: 	callq	_ZdlPvm@PLT # Offset: 1599
.Ltmp7098:
    00000644: 	leaq	DATAat0x52564(%rip), %rdx
    0000064b: 	movq	%rbx, %rsi
    0000064e: 	movq	%r15, %rdi
    00000651: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1617
    00000656: 	movq	0x8(%rbx), %rcx
    0000065a: 	movq	(%rbx), %rdx
    0000065d: 	movq	%r15, %rsi
    00000660: 	movq	0x8(%rsp), %rdi
    00000665: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1637
    0000066a: 	movq	0x8(%rsp), %rsi
    0000066f: 	leaq	DATAat0x52a09(%rip), %rdx
    00000676: 	movq	%r14, %rdi
    00000679: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1657
    0000067e: 	movq	0x8(%rbp), %rcx
    00000682: 	movq	(%rbp), %rdx
    00000686: 	movq	%r14, %rsi
    00000689: 	movq	%r13, %rdi
    0000068c: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1676
    00000691: 	leaq	DATAat0x530f0(%rip), %rdx
    00000698: 	movq	%r13, %rsi
    0000069b: 	movq	%r12, %rdi
    0000069e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1694
    000006a3: 	movq	0x28(%rsp), %rsi
    000006a8: 	movq	(%rsp), %rdi
    000006ac: 	movq	%r12, %rdx
    000006af: 	callq	_Z20test_insert_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEELb1EEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1711
    000006b4: 	movq	0xc0(%rsp), %rdi
    000006bc: 	cmpq	0x20(%rsp), %rdi
    000006c1: 	je	.Ltmp7099 # Offset: 1729
    000006c3: 	movq	0xd0(%rsp), %rax
    000006cb: 	leaq	0x1(%rax), %rsi
    000006cf: 	callq	_ZdlPvm@PLT # Offset: 1743
.Ltmp7099:
    000006d4: 	movq	0xa0(%rsp), %rdi
    000006dc: 	cmpq	0x18(%rsp), %rdi
    000006e1: 	je	.Ltmp7100 # Offset: 1761
    000006e3: 	movq	0xb0(%rsp), %rax
    000006eb: 	leaq	0x1(%rax), %rsi
    000006ef: 	callq	_ZdlPvm@PLT # Offset: 1775
.Ltmp7100:
    000006f4: 	movq	0x80(%rsp), %rdi
    000006fc: 	cmpq	0x10(%rsp), %rdi
    00000701: 	je	.Ltmp7101 # Offset: 1793
    00000703: 	movq	0x90(%rsp), %rax
    0000070b: 	leaq	0x1(%rax), %rsi
    0000070f: 	callq	_ZdlPvm@PLT # Offset: 1807
.Ltmp7101:
    00000714: 	movq	0x60(%rsp), %rdi
    00000719: 	cmpq	0x38(%rsp), %rdi
    0000071e: 	je	.Ltmp7102 # Offset: 1822
    00000720: 	movq	0x70(%rsp), %rax
    00000725: 	leaq	0x1(%rax), %rsi
    00000729: 	callq	_ZdlPvm@PLT # Offset: 1833
.Ltmp7102:
    0000072e: 	movq	0x40(%rsp), %rdi
    00000733: 	cmpq	0x30(%rsp), %rdi
    00000738: 	je	.Ltmp7103 # Offset: 1848
    0000073a: 	movq	0x50(%rsp), %rax
    0000073f: 	leaq	0x1(%rax), %rsi
    00000743: 	callq	_ZdlPvm@PLT # Offset: 1859
.Ltmp7103:
    00000748: 	leaq	DATAat0x52564(%rip), %rdx
    0000074f: 	movq	%rbx, %rsi
    00000752: 	movq	%r15, %rdi
    00000755: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1877
    0000075a: 	movq	0x8(%rbx), %rcx
    0000075e: 	movq	(%rbx), %rdx
    00000761: 	movq	%r15, %rsi
    00000764: 	movq	0x8(%rsp), %rdi
    00000769: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1897
    0000076e: 	movq	0x8(%rsp), %rsi
    00000773: 	leaq	DATAat0x52a23(%rip), %rdx
    0000077a: 	movq	%r14, %rdi
    0000077d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1917
    00000782: 	movq	0x8(%rbp), %rcx
    00000786: 	movq	(%rbp), %rdx
    0000078a: 	movq	%r14, %rsi
    0000078d: 	movq	%r13, %rdi
    00000790: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1936
    00000795: 	leaq	DATAat0x530f0(%rip), %rdx
    0000079c: 	movq	%r13, %rsi
    0000079f: 	movq	%r12, %rdi
    000007a2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1954
    000007a7: 	movq	0x28(%rsp), %rsi
    000007ac: 	movq	(%rsp), %rdi
    000007b0: 	movq	%r12, %rdx
    000007b3: 	callq	_Z15test_insert_mapId7HashMapIddELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1971
    000007b8: 	movq	0xc0(%rsp), %rdi
    000007c0: 	cmpq	0x20(%rsp), %rdi
    000007c5: 	je	.Ltmp7104 # Offset: 1989
    000007c7: 	movq	0xd0(%rsp), %rax
    000007cf: 	leaq	0x1(%rax), %rsi
    000007d3: 	callq	_ZdlPvm@PLT # Offset: 2003
.Ltmp7104:
    000007d8: 	movq	0xa0(%rsp), %rdi
    000007e0: 	cmpq	0x18(%rsp), %rdi
    000007e5: 	je	.Ltmp7105 # Offset: 2021
    000007e7: 	movq	0xb0(%rsp), %rax
    000007ef: 	leaq	0x1(%rax), %rsi
    000007f3: 	callq	_ZdlPvm@PLT # Offset: 2035
.Ltmp7105:
    000007f8: 	movq	0x80(%rsp), %rdi
    00000800: 	cmpq	0x10(%rsp), %rdi
    00000805: 	je	.Ltmp7106 # Offset: 2053
    00000807: 	movq	0x90(%rsp), %rax
    0000080f: 	leaq	0x1(%rax), %rsi
    00000813: 	callq	_ZdlPvm@PLT # Offset: 2067
.Ltmp7106:
    00000818: 	movq	0x60(%rsp), %rdi
    0000081d: 	cmpq	0x38(%rsp), %rdi
    00000822: 	je	.Ltmp7107 # Offset: 2082
    00000824: 	movq	0x70(%rsp), %rax
    00000829: 	leaq	0x1(%rax), %rsi
    0000082d: 	callq	_ZdlPvm@PLT # Offset: 2093
.Ltmp7107:
    00000832: 	movq	0x40(%rsp), %rdi
    00000837: 	cmpq	0x30(%rsp), %rdi
    0000083c: 	je	.Ltmp7108 # Offset: 2108
    0000083e: 	movq	0x50(%rsp), %rax
    00000843: 	leaq	0x1(%rax), %rsi
    00000847: 	callq	_ZdlPvm@PLT # Offset: 2119
.Ltmp7108:
    0000084c: 	movq	%rbx, %rsi
    0000084f: 	leaq	DATAat0x52564(%rip), %rdx
    00000856: 	movq	%r15, %rdi
    00000859: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2137
    0000085e: 	movq	0x8(%rbx), %rcx
    00000862: 	movq	(%rbx), %rdx
    00000865: 	movq	%r15, %rsi
    00000868: 	movq	0x8(%rsp), %rbx
    0000086d: 	movq	%rbx, %rdi
    00000870: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2160
    00000875: 	leaq	DATAat0x52a2d(%rip), %rdx
    0000087c: 	movq	%rbx, %rsi
    0000087f: 	movq	%r14, %rdi
    00000882: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2178
    00000887: 	movq	0x8(%rbp), %rcx
    0000088b: 	movq	(%rbp), %rdx
    0000088f: 	movq	%r14, %rsi
    00000892: 	movq	%r13, %rdi
    00000895: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2197
    0000089a: 	leaq	DATAat0x530f0(%rip), %rdx
    000008a1: 	movq	%r13, %rsi
    000008a4: 	movq	%r12, %rdi
    000008a7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2215
    000008ac: 	movq	0x28(%rsp), %rsi
    000008b1: 	movq	(%rsp), %rdi
    000008b5: 	movq	%r12, %rdx
    000008b8: 	callq	_Z15test_insert_mapId13PooledHashMapIddELb1EEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2232
    000008bd: 	movq	0xc0(%rsp), %rdi
    000008c5: 	cmpq	0x20(%rsp), %rdi
    000008ca: 	je	.Ltmp7109 # Offset: 2250
    000008cc: 	movq	0xd0(%rsp), %rax
    000008d4: 	leaq	0x1(%rax), %rsi
    000008d8: 	callq	_ZdlPvm@PLT # Offset: 2264
.Ltmp7109:
    000008dd: 	movq	0xa0(%rsp), %rdi
    000008e5: 	cmpq	0x18(%rsp), %rdi
    000008ea: 	je	.Ltmp7110 # Offset: 2282
    000008ec: 	movq	0xb0(%rsp), %rax
    000008f4: 	leaq	0x1(%rax), %rsi
    000008f8: 	callq	_ZdlPvm@PLT # Offset: 2296
.Ltmp7110:
    000008fd: 	movq	0x80(%rsp), %rdi
    00000905: 	cmpq	0x10(%rsp), %rdi
    0000090a: 	je	.Ltmp7111 # Offset: 2314
    0000090c: 	movq	0x90(%rsp), %rax
    00000914: 	leaq	0x1(%rax), %rsi
    00000918: 	callq	_ZdlPvm@PLT # Offset: 2328
.Ltmp7111:
    0000091d: 	movq	0x60(%rsp), %rdi
    00000922: 	cmpq	0x38(%rsp), %rdi
    00000927: 	je	.Ltmp7112 # Offset: 2343
    00000929: 	movq	0x70(%rsp), %rax
    0000092e: 	leaq	0x1(%rax), %rsi
    00000932: 	callq	_ZdlPvm@PLT # Offset: 2354
.Ltmp7112:
    00000937: 	movq	0x40(%rsp), %rdi
    0000093c: 	cmpq	0x30(%rsp), %rdi
    00000941: 	je	.Ltmp7113 # Offset: 2369
    00000943: 	movq	0x50(%rsp), %rax
    00000948: 	leaq	0x1(%rax), %rsi
    0000094c: 	callq	_ZdlPvm@PLT # Offset: 2380
.Ltmp7113:
    00000951: 	movq	0xe8(%rsp), %rax
    00000959: 	subq	%fs:0x28, %rax
    00000962: 	jne	.Ltmp7114 # Offset: 2402
    00000964: 	addq	$0xf8, %rsp
    0000096b: 	popq	%rbx
    0000096c: 	popq	%rbp
    0000096d: 	popq	%r12
    0000096f: 	popq	%r13
    00000971: 	popq	%r14
    00000973: 	popq	%r15
    00000975: 	retq # Offset: 2421
.Ltmp7114:
    00000976: 	callq	__stack_chk_fail@PLT # Offset: 2422
    0000097b: 	endbr64
.Ltmp7121:
    0000097f: 	movq	%rax, %rbp
    00000982: 	jmp	.Ltmp7115 # Offset: 2434
    00000984: 	endbr64
.Ltmp7122:
    00000988: 	movq	%rax, %rbp
    0000098b: 	jmp	.Ltmp7116 # Offset: 2443
.Ltmp7115:
    0000098d: 	movq	0xc0(%rsp), %rdi
    00000995: 	cmpq	0x20(%rsp), %rdi
    0000099a: 	je	.Ltmp7116 # Offset: 2458
    0000099c: 	movq	0xd0(%rsp), %rax
    000009a4: 	leaq	0x1(%rax), %rsi
    000009a8: 	callq	_ZdlPvm@PLT # Offset: 2472
.Ltmp7116:
    000009ad: 	movq	0xa0(%rsp), %rdi
    000009b5: 	cmpq	0x18(%rsp), %rdi
    000009ba: 	je	.Ltmp7117 # Offset: 2490
    000009bc: 	movq	0xb0(%rsp), %rax
    000009c4: 	leaq	0x1(%rax), %rsi
    000009c8: 	callq	_ZdlPvm@PLT # Offset: 2504
.Ltmp7117:
    000009cd: 	movq	0x80(%rsp), %rdi
    000009d5: 	cmpq	0x10(%rsp), %rdi
    000009da: 	je	.Ltmp7118 # Offset: 2522
    000009dc: 	movq	0x90(%rsp), %rax
    000009e4: 	leaq	0x1(%rax), %rsi
    000009e8: 	callq	_ZdlPvm@PLT # Offset: 2536
.Ltmp7118:
    000009ed: 	movq	0x60(%rsp), %rdi
    000009f2: 	cmpq	0x38(%rsp), %rdi
    000009f7: 	je	.Ltmp7119 # Offset: 2551
    000009f9: 	movq	0x70(%rsp), %rax
    000009fe: 	leaq	0x1(%rax), %rsi
    00000a02: 	callq	_ZdlPvm@PLT # Offset: 2562
.Ltmp7119:
    00000a07: 	movq	0x40(%rsp), %rdi
    00000a0c: 	cmpq	0x30(%rsp), %rdi
    00000a11: 	je	.Ltmp7120 # Offset: 2577
.Ltmp7137:
    00000a13: 	movq	0x50(%rsp), %rax
    00000a18: 	leaq	0x1(%rax), %rsi
    00000a1c: 	callq	_ZdlPvm@PLT # Offset: 2588
.Ltmp7120:
    00000a21: 	movq	%rbp, %rdi
    00000a24: 	callq	_Unwind_Resume@PLT # Offset: 2596
    00000a29: 	endbr64
.Ltmp7123:
    00000a2d: 	movq	%rax, %rbp
    00000a30: 	jmp	.Ltmp7117 # Offset: 2608
    00000a32: 	endbr64
.Ltmp7124:
    00000a36: 	movq	%rax, %rbp
    00000a39: 	jmp	.Ltmp7118 # Offset: 2617
    00000a3b: 	endbr64
.Ltmp7125:
    00000a3f: 	movq	%rax, %rbp
    00000a42: 	jmp	.Ltmp7119 # Offset: 2626
    00000a44: 	endbr64
    00000a48: 	jmp	.Ltmp7121 # Offset: 2632
    00000a4d: 	endbr64
    00000a51: 	jmp	.Ltmp7122 # Offset: 2641
    00000a56: 	endbr64
    00000a5a: 	jmp	.Ltmp7123 # Offset: 2650
    00000a5c: 	endbr64
    00000a60: 	jmp	.Ltmp7124 # Offset: 2656
    00000a62: 	endbr64
    00000a66: 	jmp	.Ltmp7125 # Offset: 2662
    00000a68: 	endbr64
    00000a6c: 	jmp	.Ltmp7121 # Offset: 2668
    00000a71: 	endbr64
    00000a75: 	jmp	.Ltmp7122 # Offset: 2677
    00000a7a: 	endbr64
    00000a7e: 	jmp	.Ltmp7123 # Offset: 2686
    00000a80: 	endbr64
    00000a84: 	jmp	.Ltmp7124 # Offset: 2692
    00000a86: 	endbr64
    00000a8a: 	jmp	.Ltmp7125 # Offset: 2698
    00000a8c: 	endbr64
    00000a90: 	jmp	.Ltmp7121 # Offset: 2704
    00000a95: 	endbr64
    00000a99: 	jmp	.Ltmp7122 # Offset: 2713
    00000a9e: 	endbr64
    00000aa2: 	jmp	.Ltmp7123 # Offset: 2722
    00000aa4: 	endbr64
    00000aa8: 	jmp	.Ltmp7124 # Offset: 2728
    00000aaa: 	endbr64
    00000aae: 	jmp	.Ltmp7125 # Offset: 2734
    00000ab0: 	endbr64
.Ltmp7129:
    00000ab4: 	movq	%rax, %rbp
    00000ab7: 	jmp	.Ltmp7126 # Offset: 2743
    00000ab9: 	endbr64
.Ltmp7130:
    00000abd: 	movq	%rax, %rbp
    00000ac0: 	jmp	.Ltmp7127 # Offset: 2752
.Ltmp7126:
    00000ac2: 	movq	0xc0(%rsp), %rdi
    00000aca: 	cmpq	0x20(%rsp), %rdi
    00000acf: 	je	.Ltmp7127 # Offset: 2767
    00000ad1: 	movq	0xd0(%rsp), %rax
    00000ad9: 	leaq	0x1(%rax), %rsi
    00000add: 	callq	_ZdlPvm@PLT # Offset: 2781
.Ltmp7127:
    00000ae2: 	movq	0xa0(%rsp), %rdi
    00000aea: 	cmpq	0x18(%rsp), %rdi
    00000aef: 	je	.Ltmp7128 # Offset: 2799
    00000af1: 	movq	0xb0(%rsp), %rax
    00000af9: 	leaq	0x1(%rax), %rsi
    00000afd: 	callq	_ZdlPvm@PLT # Offset: 2813
.Ltmp7128:
    00000b02: 	movq	0x80(%rsp), %rdi
    00000b0a: 	cmpq	0x10(%rsp), %rdi
    00000b0f: 	je	.Ltmp7120 # Offset: 2831
.Ltmp7141:
    00000b15: 	movq	0x90(%rsp), %rax
    00000b1d: 	leaq	0x1(%rax), %rsi
    00000b21: 	callq	_ZdlPvm@PLT # Offset: 2849
    00000b26: 	jmp	.Ltmp7120 # Offset: 2854
    00000b2b: 	endbr64
.Ltmp7131:
    00000b2f: 	movq	%rax, %rbp
    00000b32: 	jmp	.Ltmp7128 # Offset: 2866
    00000b34: 	endbr64
    00000b38: 	jmp	.Ltmp7129 # Offset: 2872
    00000b3d: 	endbr64
    00000b41: 	jmp	.Ltmp7130 # Offset: 2881
    00000b46: 	endbr64
    00000b4a: 	jmp	.Ltmp7131 # Offset: 2890
    00000b4c: 	endbr64
    00000b50: 	jmp	.Ltmp7121 # Offset: 2896
    00000b55: 	endbr64
    00000b59: 	jmp	.Ltmp7122 # Offset: 2905
    00000b5e: 	endbr64
    00000b62: 	jmp	.Ltmp7123 # Offset: 2914
    00000b67: 	endbr64
    00000b6b: 	jmp	.Ltmp7124 # Offset: 2923
    00000b70: 	endbr64
    00000b74: 	jmp	.Ltmp7125 # Offset: 2932
    00000b79: 	endbr64
    00000b7d: 	movq	%rax, %rbp
    00000b80: 	jmp	.Ltmp7132 # Offset: 2944
    00000b82: 	endbr64
    00000b86: 	movq	%rax, %rbp
    00000b89: 	jmp	.Ltmp7133 # Offset: 2953
    00000b8b: 	endbr64
    00000b8f: 	movq	%rax, %rbp
    00000b92: 	jmp	.Ltmp7134 # Offset: 2962
.Ltmp7132:
    00000b94: 	movq	0xc0(%rsp), %rdi
    00000b9c: 	cmpq	0x20(%rsp), %rdi
    00000ba1: 	je	.Ltmp7133 # Offset: 2977
    00000ba3: 	movq	0xd0(%rsp), %rax
    00000bab: 	leaq	0x1(%rax), %rsi
    00000baf: 	callq	_ZdlPvm@PLT # Offset: 2991
.Ltmp7133:
    00000bb4: 	movq	0xa0(%rsp), %rdi
    00000bbc: 	cmpq	0x18(%rsp), %rdi
    00000bc1: 	je	.Ltmp7134 # Offset: 3009
    00000bc3: 	movq	0xb0(%rsp), %rax
    00000bcb: 	leaq	0x1(%rax), %rsi
    00000bcf: 	callq	_ZdlPvm@PLT # Offset: 3023
.Ltmp7134:
    00000bd4: 	movq	0x80(%rsp), %rdi
    00000bdc: 	cmpq	0x10(%rsp), %rdi
    00000be1: 	je	.Ltmp7135 # Offset: 3041
    00000be3: 	movq	0x90(%rsp), %rax
    00000beb: 	leaq	0x1(%rax), %rsi
    00000bef: 	callq	_ZdlPvm@PLT # Offset: 3055
.Ltmp7135:
    00000bf4: 	movq	0x60(%rsp), %rdi
    00000bf9: 	leaq	0x70(%rsp), %rax
    00000bfe: 	cmpq	%rax, %rdi
    00000c01: 	je	.Ltmp7136 # Offset: 3073
    00000c03: 	movq	0x70(%rsp), %rax
    00000c08: 	leaq	0x1(%rax), %rsi
    00000c0c: 	callq	_ZdlPvm@PLT # Offset: 3084
.Ltmp7136:
    00000c11: 	movq	0x40(%rsp), %rdi
    00000c16: 	leaq	0x50(%rsp), %rax
    00000c1b: 	cmpq	%rax, %rdi
    00000c1e: 	jne	.Ltmp7137 # Offset: 3102
    00000c24: 	jmp	.Ltmp7120 # Offset: 3108
    00000c29: 	endbr64
    00000c2d: 	movq	%rax, %rbp
    00000c30: 	jmp	.Ltmp7135 # Offset: 3120
    00000c32: 	endbr64
    00000c36: 	movq	%rax, %rbp
    00000c39: 	jmp	.Ltmp7136 # Offset: 3129
    00000c3b: 	endbr64
    00000c3f: 	jmp	.Ltmp7129 # Offset: 3135
    00000c44: 	endbr64
    00000c48: 	jmp	.Ltmp7130 # Offset: 3144
    00000c4d: 	endbr64
    00000c51: 	jmp	.Ltmp7131 # Offset: 3153
    00000c56: 	endbr64
    00000c5a: 	movq	%rax, %rbp
    00000c5d: 	jmp	.Ltmp7138 # Offset: 3165
    00000c5f: 	endbr64
    00000c63: 	movq	%rax, %rbp
    00000c66: 	jmp	.Ltmp7139 # Offset: 3174
    00000c68: 	endbr64
    00000c6c: 	movq	%rax, %rbp
    00000c6f: 	jmp	.Ltmp7140 # Offset: 3183
.Ltmp7138:
    00000c71: 	movq	0xc0(%rsp), %rdi
    00000c79: 	leaq	0xd0(%rsp), %rax
    00000c81: 	cmpq	%rax, %rdi
    00000c84: 	je	.Ltmp7139 # Offset: 3204
    00000c86: 	movq	0xd0(%rsp), %rax
    00000c8e: 	leaq	0x1(%rax), %rsi
    00000c92: 	callq	_ZdlPvm@PLT # Offset: 3218
.Ltmp7139:
    00000c97: 	movq	0xa0(%rsp), %rdi
    00000c9f: 	leaq	0xb0(%rsp), %rax
    00000ca7: 	cmpq	%rax, %rdi
    00000caa: 	je	.Ltmp7140 # Offset: 3242
    00000cac: 	movq	0xb0(%rsp), %rax
    00000cb4: 	leaq	0x1(%rax), %rsi
    00000cb8: 	callq	_ZdlPvm@PLT # Offset: 3256
.Ltmp7140:
    00000cbd: 	movq	0x80(%rsp), %rdi
    00000cc5: 	leaq	0x90(%rsp), %rax
    00000ccd: 	cmpq	%rax, %rdi
    00000cd0: 	jne	.Ltmp7141 # Offset: 3280
    00000cd6: 	jmp	.Ltmp7120 # Offset: 3286
DWARF CFI Instructions:
    <empty>
End of Function "_Z17testInsert_commonIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_"

Binary Function "_Z23testInsert_reverseorderIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 346
  State       : disassembled
  Address     : 0x4b4a0
  Size        : 0x1ff
  MaxSize     : 0x200
  Offset      : 0x4b4a0
  Section     : .text
  Orc Section : .local.text._Z23testInsert_reverseorderIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0345:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rcx, %r10
    00000009: 	leaq	(,%rsi,8), %rcx
    00000011: 	movq	%rdx, %r9
    00000014: 	pushq	%rbp
    00000015: 	movl	%r8d, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x30, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x28(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	leaq	(%rdi,%rcx), %rax
    00000034: 	cmpq	%rdi, %rax
    00000037: 	je	.Ltmp7142 # Offset: 55
    0000003d: 	subq	$0x8, %rax
    00000041: 	cmpq	%rax, %rdi
    00000044: 	jae	.Ltmp7142 # Offset: 68
    0000004a: 	leaq	-0x9(%rcx), %r11
    0000004e: 	movq	%rdi, %rdx
    00000051: 	movq	%r11, %rsi
    00000054: 	shrq	$0x4, %rsi
    00000058: 	leaq	0x1(%rsi), %r8
    0000005c: 	negq	%rsi
    0000005f: 	leaq	(,%r8,8), %r12
    00000067: 	leaq	-0x8(%rcx,%rsi,8), %rsi
    0000006c: 	cmpq	%rsi, %r12
    0000006f: 	setle	%sil
    00000073: 	testq	%rcx, %rcx
    00000076: 	setle	%r12b
    0000007a: 	orb	%r12b, %sil
    0000007d: 	je	.Ltmp7143 # Offset: 125
    00000083: 	cmpq	$0x1f, %r11
    00000087: 	jbe	.Ltmp7143 # Offset: 135
    0000008d: 	movq	%r8, %rsi
    00000090: 	leaq	-0x10(%rdi,%rcx), %rcx
    00000095: 	shrq	%rsi
    00000098: 	shlq	$0x4, %rsi
    0000009c: 	addq	%rdi, %rsi
    0000009f: 	nop # Size: 1
.Ltmp7144:
    000000a0: 	movupd	(%rcx), %xmm1
    000000a4: 	movupd	(%rdx), %xmm0
    000000a8: 	addq	$0x10, %rdx
    000000ac: 	subq	$0x10, %rcx
    000000b0: 	shufpd	$0x1, %xmm1, %xmm1
    000000b5: 	shufpd	$0x1, %xmm0, %xmm0
    000000ba: 	movups	%xmm1, -0x10(%rdx)
    000000be: 	movups	%xmm0, 0x10(%rcx)
    000000c2: 	cmpq	%rdx, %rsi
    000000c5: 	jne	.Ltmp7144 # Offset: 197
    000000c7: 	movq	%r8, %rcx
    000000ca: 	andq	$-0x2, %rcx
    000000ce: 	leaq	(,%rcx,8), %rsi
    000000d6: 	leaq	(%rdi,%rsi), %rdx
    000000da: 	subq	%rsi, %rax
    000000dd: 	cmpq	%rcx, %r8
    000000e0: 	je	.Ltmp7142 # Offset: 224
    000000e2: 	movsd	(%rdx), %xmm0
    000000e6: 	movsd	(%rax), %xmm1
    000000ea: 	movsd	%xmm1, (%rdx)
    000000ee: 	movsd	%xmm0, (%rax)
.Ltmp7142:
    000000f2: 	leaq	0x10(%rsp), %r12
    000000f7: 	movq	%rsp, %r8
    000000fa: 	movq	%r10, %rcx
    000000fd: 	movq	%r9, %rdx
    00000100: 	movabsq	$0x2065737265766572, %rax
    0000010a: 	movq	%rbx, %rsi
    0000010d: 	movq	%r12, (%rsp)
    00000111: 	movq	%rax, 0x10(%rsp)
    00000116: 	movl	$0x6564726f, 0x18(%rsp)
    0000011e: 	movb	$0x72, 0x1c(%rsp)
    00000123: 	movq	$0xd, 0x8(%rsp)
    0000012c: 	movb	$0x0, 0x1d(%rsp)
    00000131: 	callq	_Z17testInsert_commonIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_ # Offset: 305
    00000136: 	movq	(%rsp), %rdi
    0000013a: 	cmpq	%r12, %rdi
    0000013d: 	je	.Ltmp7145 # Offset: 317
    0000013f: 	movq	0x10(%rsp), %rax
    00000144: 	leaq	0x1(%rax), %rsi
    00000148: 	callq	_ZdlPvm@PLT # Offset: 328
.Ltmp7145:
    0000014d: 	testb	%bpl, %bpl
    00000150: 	jne	.Ltmp7146 # Offset: 336
    00000152: 	movq	0x28(%rsp), %rax
    00000157: 	subq	%fs:0x28, %rax
    00000160: 	jne	.Ltmp7147 # Offset: 352
    00000162: 	addq	$0x30, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	retq # Offset: 362
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7146:
    00000170: 	movq	0x28(%rsp), %rax
    00000175: 	subq	%fs:0x28, %rax
    0000017e: 	jne	.Ltmp7147 # Offset: 382
    00000180: 	movl	iterations(%rip), %edx
    00000186: 	addq	$0x30, %rsp
    0000018a: 	movl	%ebx, %esi
    0000018c: 	xorl	%r8d, %r8d
    0000018f: 	popq	%rbx
    00000190: 	xorl	%ecx, %ecx
    00000192: 	leaq	DATAat0x530f8(%rip), %rdi
    00000199: 	popq	%rbp
    0000019a: 	popq	%r12
    0000019c: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp7143:
    000001a8: 	movq	%rdi, %rdx
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7148:
    000001b0: 	movsd	(%rdx), %xmm0
    000001b4: 	movsd	(%rax), %xmm1
    000001b8: 	addq	$0x8, %rdx
    000001bc: 	subq	$0x8, %rax
    000001c0: 	movsd	%xmm1, -0x8(%rdx)
    000001c5: 	movsd	%xmm0, 0x8(%rax)
    000001ca: 	cmpq	%rax, %rdx
    000001cd: 	jb	.Ltmp7148 # Offset: 461
    000001cf: 	jmp	.Ltmp7142 # Offset: 463
.Ltmp7147:
    000001d4: 	callq	__stack_chk_fail@PLT # Offset: 468
    000001d9: 	endbr64
    000001dd: 	movq	%rax, %rbp
    000001e0: 	movq	(%rsp), %rdi
    000001e4: 	cmpq	%r12, %rdi
    000001e7: 	je	.Ltmp7149 # Offset: 487
    000001e9: 	movq	0x10(%rsp), %rax
    000001ee: 	leaq	0x1(%rax), %rsi
    000001f2: 	callq	_ZdlPvm@PLT # Offset: 498
.Ltmp7149:
    000001f7: 	movq	%rbp, %rdi
    000001fa: 	callq	_Unwind_Resume@PLT # Offset: 506
DWARF CFI Instructions:
    <empty>
End of Function "_Z23testInsert_reverseorderIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z10testInsertIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 347
  State       : disassembled
  Address     : 0x4b6a0
  Size        : 0x1cb
  MaxSize     : 0x1d0
  Offset      : 0x4b6a0
  Section     : .text
  Orc Section : .local.text._Z10testInsertIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0346:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	subq	$0x48, %rsp
    0000001e: 	movl	%r8d, 0x8(%rsp)
    00000023: 	leaq	0x10(%rsp), %r15
    00000028: 	leaq	0x20(%rsp), %r14
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x38(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	movzbl	%r8b, %eax
    00000041: 	movq	%r15, %r8
    00000044: 	movq	%r14, 0x10(%rsp)
    00000049: 	movl	%eax, 0xc(%rsp)
    0000004d: 	movabsq	$0x726564726f2d6e69, %rax
    00000057: 	movq	%rax, 0x20(%rsp)
    0000005c: 	movq	$0x8, 0x18(%rsp)
    00000065: 	movb	$0x0, 0x28(%rsp)
    0000006a: 	callq	_Z17testInsert_commonIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_ # Offset: 106
    0000006f: 	movq	0x10(%rsp), %rdi
    00000074: 	cmpq	%r14, %rdi
    00000077: 	je	.Ltmp7150 # Offset: 119
    00000079: 	movq	0x20(%rsp), %rax
    0000007e: 	leaq	0x1(%rax), %rsi
    00000082: 	callq	_ZdlPvm@PLT # Offset: 130
.Ltmp7150:
    00000087: 	cmpb	$0x0, 0x8(%rsp)
    0000008c: 	jne	.Ltmp7151 # Offset: 140
.Ltmp7155:
    00000092: 	movl	0xc(%rsp), %r8d
    00000097: 	movq	%r12, %rcx
    0000009a: 	movq	%r13, %rdx
    0000009d: 	movq	%rbx, %rsi
    000000a0: 	movq	%rbp, %rdi
    000000a3: 	callq	_Z23testInsert_reverseorderIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 163
    000000a8: 	leaq	(%rbp,%rbx,8), %rsi
    000000ad: 	movq	%rbp, %rdi
    000000b0: 	movl	%r12d, iterations(%rip)
    000000b7: 	callq	_ZN9benchmark14random_shuffleIPdEEvT_S2_ # Offset: 183
    000000bc: 	movq	%r15, %r8
    000000bf: 	movq	%r12, %rcx
    000000c2: 	movq	%r13, %rdx
    000000c5: 	movabsq	$0x6f206d6f646e6172, %rax
    000000cf: 	movq	%rbx, %rsi
    000000d2: 	movq	%rbp, %rdi
    000000d5: 	movq	%r14, 0x10(%rsp)
    000000da: 	movq	%rax, 0x20(%rsp)
    000000df: 	movl	$0x72656472, 0x28(%rsp)
    000000e7: 	movq	$0xc, 0x18(%rsp)
    000000f0: 	movb	$0x0, 0x2c(%rsp)
    000000f5: 	callq	_Z17testInsert_commonIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_ # Offset: 245
    000000fa: 	movq	0x10(%rsp), %rdi
    000000ff: 	cmpq	%r14, %rdi
    00000102: 	je	.Ltmp7152 # Offset: 258
    00000104: 	movq	0x20(%rsp), %rax
    00000109: 	leaq	0x1(%rax), %rsi
    0000010d: 	callq	_ZdlPvm@PLT # Offset: 269
.Ltmp7152:
    00000112: 	cmpb	$0x0, 0x8(%rsp)
    00000117: 	jne	.Ltmp7153 # Offset: 279
    00000119: 	movq	0x38(%rsp), %rax
    0000011e: 	subq	%fs:0x28, %rax
    00000127: 	jne	.Ltmp7154 # Offset: 295
    00000129: 	addq	$0x48, %rsp
    0000012d: 	popq	%rbx
    0000012e: 	popq	%rbp
    0000012f: 	popq	%r12
    00000131: 	popq	%r13
    00000133: 	popq	%r14
    00000135: 	popq	%r15
    00000137: 	retq # Offset: 311
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp7151:
    00000140: 	movl	iterations(%rip), %edx
    00000146: 	xorl	%r8d, %r8d
    00000149: 	xorl	%ecx, %ecx
    0000014b: 	movl	%ebx, %esi
    0000014d: 	leaq	DATAat0x53128(%rip), %rdi
    00000154: 	callq	_Z9summarizePKciiii # Offset: 340
    00000159: 	jmp	.Ltmp7155 # Offset: 345
    0000015e: 	nop # Size: 2
.Ltmp7153:
    00000160: 	movq	0x38(%rsp), %rax
    00000165: 	subq	%fs:0x28, %rax
    0000016e: 	jne	.Ltmp7154 # Offset: 366
    00000170: 	movl	iterations(%rip), %edx
    00000176: 	addq	$0x48, %rsp
    0000017a: 	movl	%ebx, %esi
    0000017c: 	xorl	%r8d, %r8d
    0000017f: 	popq	%rbx
    00000180: 	xorl	%ecx, %ecx
    00000182: 	leaq	DATAat0x53150(%rip), %rdi
    00000189: 	popq	%rbp
    0000018a: 	popq	%r12
    0000018c: 	popq	%r13
    0000018e: 	popq	%r14
    00000190: 	popq	%r15
    00000192: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 402
.Ltmp7154:
    00000197: 	callq	__stack_chk_fail@PLT # Offset: 407
    0000019c: 	endbr64
.Ltmp7157:
    000001a0: 	movq	%rax, %rbp
    000001a3: 	jmp	.Ltmp7156 # Offset: 419
    000001a5: 	endbr64
    000001a9: 	jmp	.Ltmp7157 # Offset: 425
.Ltmp7156:
    000001ab: 	movq	0x10(%rsp), %rdi
    000001b0: 	cmpq	%r14, %rdi
    000001b3: 	je	.Ltmp7158 # Offset: 435
    000001b5: 	movq	0x20(%rsp), %rax
    000001ba: 	leaq	0x1(%rax), %rsi
    000001be: 	callq	_ZdlPvm@PLT # Offset: 446
.Ltmp7158:
    000001c3: 	movq	%rbp, %rdi
    000001c6: 	callq	_Unwind_Resume@PLT # Offset: 454
DWARF CFI Instructions:
    <empty>
End of Function "_Z10testInsertIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z17test_clearall_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 348
  State       : disassembled
  Address     : 0x4b870
  Size        : 0xed3
  MaxSize     : 0xee0
  Offset      : 0x4b870
  Section     : .text
  Orc Section : .local.text._Z17test_clearall_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0347:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xb8, %rsp
    0000001b: 	movq	%rdx, 0x70(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x48(%rsp)
    00000027: 	movq	%rsi, 0x28(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0xa8(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	movabsq	$0x500000000, %rax
    00000049: 	divq	%rcx
    0000004c: 	movq	%rax, 0x30(%rsp)
    00000051: 	cmpq	$0x3e8, %rax
    00000057: 	ja	.Ltmp7159 # Offset: 87
    0000005d: 	cmpq	$0x3, %rax
    00000061: 	ja	.Ltmp7160 # Offset: 97
    00000067: 	movq	$0x0, 0xa0(%rsp)
    00000073: 	pxor	%xmm0, %xmm0
    00000077: 	movq	$0x4, 0x30(%rsp)
    00000080: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp7233:
    00000088: 	movq	0x30(%rsp), %rbx
    0000008d: 	leaq	0x90(%rsp), %rdi
    00000095: 	movq	%rbx, %rsi
    00000098: 	callq	_ZNSt6vectorIP13PooledHashMapIddESaIS2_EE17_M_default_appendEm # Offset: 152
    0000009d: 	movl	iterations(%rip), %eax
    000000a3: 	testl	%eax, %eax
    000000a5: 	jle	.Ltmp7161 # Offset: 165
    000000ab: 	movl	%ebx, 0x64(%rsp)
    000000af: 	movq	$0x0, 0x78(%rsp)
    000000b8: 	movl	$0x0, 0x60(%rsp)
.Ltmp7206:
    000000c0: 	movslq	0x60(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	$0x0, 0x40(%rsp)
    000000d1: 	movq	%rdx, %rdi
    000000d4: 	addq	0x30(%rsp), %rdx
    000000d9: 	subl	%edi, %eax
    000000db: 	cmpq	%rcx, %rdx
    000000de: 	cmovbl	0x64(%rsp), %eax
    000000e3: 	leal	-0x1(%rax), %edi
    000000e6: 	movl	%eax, %eax
    000000e8: 	shlq	$0x3, %rax
    000000ec: 	movq	%rdi, 0x68(%rsp)
    000000f1: 	movq	%rax, 0x50(%rsp)
.Ltmp7187:
    000000f6: 	movl	$0xc8, %edi
    000000fb: 	callq	_Znwm@PLT # Offset: 251
    00000100: 	movq	$0x0, (%rax)
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	xorl	%esi, %esi
    0000010d: 	movq	%rax, %rdi
    00000110: 	movq	$0x0, 0x8(%rax)
    00000118: 	movq	%rax, %rbp
    0000011b: 	movups	%xmm0, 0x10(%rax)
    0000011f: 	movups	%xmm0, 0x20(%rax)
    00000123: 	movups	%xmm0, 0x30(%rax)
    00000127: 	movups	%xmm0, 0x40(%rax)
    0000012b: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 299
    00000130: 	movq	$0x0, 0x50(%rbp)
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	movl	$0x40, %edi
    00000141: 	movq	$0x8, 0x58(%rbp)
    00000149: 	movups	%xmm0, 0x60(%rbp)
    0000014d: 	movups	%xmm0, 0x70(%rbp)
    00000151: 	movups	%xmm0, 0x80(%rbp)
    00000158: 	movups	%xmm0, 0x90(%rbp)
    0000015f: 	callq	_Znwm@PLT # Offset: 351
    00000164: 	movq	0x58(%rbp), %rdx
    00000168: 	movq	%rax, 0x50(%rbp)
    0000016c: 	movl	$0x200, %edi
    00000171: 	leaq	-0x4(,%rdx,4), %rdx
    00000179: 	andq	$-0x8, %rdx
    0000017d: 	leaq	(%rax,%rdx), %rbx
    00000181: 	callq	_Znwm@PLT # Offset: 385
    00000186: 	movq	%rax, %xmm1
    0000018b: 	movq	%rax, (%rbx)
    0000018e: 	addq	$0x200, %rax
    00000194: 	movq	%rbx, %xmm7
    00000199: 	movq	%rax, %xmm0
    0000019e: 	punpcklqdq	%xmm1, %xmm1
    000001a2: 	movq	$0x0, 0xb0(%rbp)
    000001ad: 	movq	0x48(%rsp), %rax
    000001b2: 	punpcklqdq	%xmm7, %xmm0
    000001b6: 	movups	%xmm1, 0x60(%rbp)
    000001ba: 	movups	%xmm0, 0x70(%rbp)
    000001be: 	movups	%xmm0, 0x90(%rbp)
    000001c5: 	pxor	%xmm0, %xmm0
    000001c9: 	movq	$0x0, 0xb8(%rbp)
    000001d4: 	movl	$0x3f800000, 0xc0(%rbp)
    000001de: 	movups	%xmm1, 0x80(%rbp)
    000001e5: 	movups	%xmm0, 0xa0(%rbp)
    000001ec: 	cmpq	%rax, 0x28(%rsp)
    000001f1: 	je	.Ltmp7162 # Offset: 497
    000001f7: 	leaq	0x50(%rbp), %rdi
    000001fb: 	xorl	%ebx, %ebx
    000001fd: 	movq	%rax, 0x20(%rsp)
    00000202: 	movq	%rdi, 0x58(%rsp)
    00000207: 	testq	%rbx, %rbx
    0000020a: 	je	.Ltmp7163 # Offset: 522
.Ltmp7168:
    00000210: 	movq	0x20(%rsp), %rax
    00000215: 	pxor	%xmm6, %xmm6
    00000219: 	movsd	(%rax), %xmm0
    0000021d: 	movsd	%xmm0, 0x88(%rsp)
    00000226: 	ucomisd	%xmm6, %xmm0
    0000022a: 	jp	.Ltmp7164 # Offset: 554
    00000230: 	movl	$0x0, %eax
    00000235: 	jne	.Ltmp7164 # Offset: 565
.Ltmp7179:
    0000023b: 	xorl	%edx, %edx
    0000023d: 	divq	0xb0(%rbp)
    00000244: 	movq	0xb8(%rbp), %rax
    0000024b: 	movq	(%rax,%rdx,8), %rbx
    0000024f: 	leaq	(,%rdx,8), %r14
    00000257: 	testq	%rbx, %rbx
    0000025a: 	je	.Ltmp7165 # Offset: 602
    00000260: 	movq	0x20(%rsp), %rax
    00000265: 	movsd	(%rax), %xmm0
    00000269: 	jmp	.Ltmp7166 # Offset: 617
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7167:
    00000270: 	movq	0x10(%rbx), %rbx
    00000274: 	testq	%rbx, %rbx
    00000277: 	je	.Ltmp7165 # Offset: 631
.Ltmp7166:
    0000027d: 	ucomisd	(%rbx), %xmm0
    00000281: 	jp	.Ltmp7167 # Offset: 641
    00000283: 	jne	.Ltmp7167 # Offset: 643
    00000285: 	addq	$0x8, %rbx
.Ltmp7185:
    00000289: 	addq	$0x8, 0x20(%rsp)
    0000028f: 	movq	0x20(%rsp), %rax
    00000294: 	movsd	%xmm0, (%rbx)
    00000298: 	cmpq	%rax, 0x28(%rsp)
    0000029d: 	je	.Ltmp7162 # Offset: 669
    000002a3: 	movq	0xa8(%rbp), %rbx
    000002aa: 	testq	%rbx, %rbx
    000002ad: 	jne	.Ltmp7168 # Offset: 685
.Ltmp7163:
    000002b3: 	movss	DATAat0x537b0(%rip), %xmm2
    000002bb: 	movss	DATAat0x537a4(%rip), %xmm0
    000002c3: 	divss	0xc0(%rbp), %xmm0
    000002cb: 	movaps	%xmm0, %xmm1
    000002ce: 	movss	DATAat0x5379c(%rip), %xmm3
    000002d6: 	movq	0xb0(%rbp), %rax
    000002dd: 	andps	%xmm2, %xmm1
    000002e0: 	ucomiss	%xmm1, %xmm3
    000002e3: 	movq	%rax, 0x10(%rsp)
    000002e8: 	jbe	.Ltmp7169 # Offset: 744
    000002ea: 	cvttss2si	%xmm0, %eax
    000002ee: 	pxor	%xmm1, %xmm1
    000002f2: 	movaps	%xmm0, %xmm3
    000002f5: 	movss	DATAat0x53798(%rip), %xmm7
    000002fd: 	andnps	%xmm0, %xmm2
    00000300: 	cvtsi2ss	%eax, %xmm1
    00000304: 	cmpnless	%xmm1, %xmm3
    00000309: 	andps	%xmm7, %xmm3
    0000030c: 	addss	%xmm3, %xmm1
    00000310: 	orps	%xmm2, %xmm1
    00000313: 	movaps	%xmm1, %xmm0
.Ltmp7169:
    00000316: 	comiss	DATAat0x537a0(%rip), %xmm0
    0000031d: 	jae	.Ltmp7170 # Offset: 797
    00000323: 	cvttss2si	%xmm0, %rax
.Ltmp7186:
    00000328: 	movl	$0x8, %edx
    0000032d: 	movq	0x10(%rsp), %r15
    00000332: 	movq	$0x8, 0xb0(%rbp)
    0000033d: 	cmpq	%rdx, %rax
    00000340: 	cmovbq	%rdx, %rax
    00000344: 	movq	%rax, %rdx
    00000347: 	shrq	%rdx
    0000034a: 	addq	%rdx, %rax
    0000034d: 	movq	%rax, 0xa8(%rbp)
    00000354: 	cmpq	$0x8, %r15
    00000358: 	je	.Ltmp7168 # Offset: 856
    0000035e: 	movl	$0x40, %edi
    00000363: 	callq	_Znam@PLT # Offset: 867
    00000368: 	pxor	%xmm0, %xmm0
    0000036c: 	movq	%rax, %r14
    0000036f: 	movups	%xmm0, (%rax)
    00000372: 	movups	%xmm0, 0x10(%rax)
    00000376: 	movups	%xmm0, 0x20(%rax)
    0000037a: 	movups	%xmm0, 0x30(%rax)
    0000037e: 	movq	0xb8(%rbp), %rax
    00000385: 	movq	%rax, (%rsp)
    00000389: 	testq	%r15, %r15
    0000038c: 	je	.Ltmp7171 # Offset: 908
    00000392: 	movl	$0xc70f6907, %r12d
    00000398: 	nopl	(%rax,%rax) # Size: 8
.Ltmp7177:
    000003a0: 	movq	(%rsp), %rax
    000003a4: 	movq	(%rax,%rbx,8), %r13
    000003a8: 	testq	%r13, %r13
    000003ab: 	jne	.Ltmp7172 # Offset: 939
    000003ad: 	jmp	.Ltmp7173 # Offset: 941
    000003af: 	nop # Size: 1
.Ltmp7175:
    000003b0: 	movq	(%r14), %rax
    000003b3: 	movq	%rax, 0x10(%r13)
    000003b7: 	movq	%r13, (%r14)
    000003ba: 	testq	%r15, %r15
    000003bd: 	je	.Ltmp7173 # Offset: 957
.Ltmp7176:
    000003bf: 	movq	%r15, %r13
.Ltmp7172:
    000003c2: 	movsd	(%r13), %xmm0
    000003c8: 	pxor	%xmm4, %xmm4
    000003cc: 	movq	0x10(%r13), %r15
    000003d0: 	movsd	%xmm0, 0x88(%rsp)
    000003d9: 	ucomisd	%xmm4, %xmm0
    000003dd: 	jp	.Ltmp7174 # Offset: 989
    000003df: 	je	.Ltmp7175 # Offset: 991
.Ltmp7174:
    000003e1: 	movq	%r12, %rdx
    000003e4: 	leaq	0x88(%rsp), %rdi
    000003ec: 	movl	$0x8, %esi
    000003f1: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1009
    000003f6: 	xorl	%edx, %edx
    000003f8: 	divq	0xb0(%rbp)
    000003ff: 	leaq	(%r14,%rdx,8), %rax
    00000403: 	movq	(%rax), %rdx
    00000406: 	movq	%rdx, 0x10(%r13)
    0000040a: 	movq	%r13, (%rax)
    0000040d: 	testq	%r15, %r15
    00000410: 	jne	.Ltmp7176 # Offset: 1040
.Ltmp7173:
    00000412: 	addq	$0x1, %rbx
    00000416: 	cmpq	%rbx, 0x10(%rsp)
    0000041b: 	jne	.Ltmp7177 # Offset: 1051
    00000421: 	movq	0xb8(%rbp), %rax
    00000428: 	movq	%rax, (%rsp)
.Ltmp7171:
    0000042c: 	movq	(%rsp), %rax
    00000430: 	testq	%rax, %rax
    00000433: 	je	.Ltmp7178 # Offset: 1075
    00000435: 	movq	%rax, %rdi
    00000438: 	callq	_ZdaPv@PLT # Offset: 1080
.Ltmp7178:
    0000043d: 	movq	%r14, 0xb8(%rbp)
    00000444: 	jmp	.Ltmp7168 # Offset: 1092
    00000449: 	nopl	(%rax) # Size: 7
.Ltmp7164:
    00000450: 	leaq	0x88(%rsp), %rdi
    00000458: 	movl	$0xc70f6907, %edx
    0000045d: 	movl	$0x8, %esi
    00000462: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1122
    00000467: 	jmp	.Ltmp7179 # Offset: 1127
    0000046c: 	nopl	(%rax) # Size: 4
.Ltmp7165:
    00000470: 	movq	0x48(%rbp), %rdx
    00000474: 	movq	0x30(%rbp), %rdi
    00000478: 	movq	0x38(%rbp), %rcx
    0000047c: 	movq	%rdx, %rax
    0000047f: 	subq	0x28(%rbp), %rax
    00000483: 	movq	%rdi, %rsi
    00000486: 	sarq	$0x3, %rax
    0000048a: 	cmpq	$0x1, %rdx
    0000048e: 	adcq	$-0x1, %rax
    00000492: 	subq	%rcx, %rsi
    00000495: 	sarq	$0x3, %rsi
    00000499: 	shlq	$0x6, %rax
    0000049d: 	addq	%rsi, %rax
    000004a0: 	movq	0x20(%rbp), %rsi
    000004a4: 	subq	0x10(%rbp), %rsi
    000004a8: 	sarq	$0x3, %rsi
    000004ac: 	addq	%rsi, %rax
    000004af: 	je	.Ltmp7180 # Offset: 1199
.Ltmp7240:
    000004b5: 	cmpq	%rcx, %rdi
    000004b8: 	je	.Ltmp7181 # Offset: 1208
    000004be: 	movq	-0x8(%rdi), %r12
    000004c2: 	subq	$0x8, %rdi
    000004c6: 	movq	%rdi, 0x30(%rbp)
.Ltmp7231:
    000004ca: 	movq	0x60(%rbp), %rcx
    000004ce: 	movq	0x78(%rbp), %rdx
    000004d2: 	movq	%rcx, %rax
    000004d5: 	subq	0x68(%rbp), %rax
    000004d9: 	sarq	$0x5, %rax
    000004dd: 	addq	%r12, %rax
    000004e0: 	js	.Ltmp7182 # Offset: 1248
    000004e6: 	cmpq	$0xf, %rax
    000004ea: 	jg	.Ltmp7183 # Offset: 1258
    000004f0: 	movq	%r12, %rbx
    000004f3: 	shlq	$0x5, %rbx
    000004f7: 	leaq	(%rcx,%rbx), %rax
    000004fb: 	movq	%rax, 0x10(%rsp)
    00000500: 	movq	%rax, %rdi
    00000503: 	movq	%r12, 0x18(%rax)
.Ltmp7212:
    00000507: 	movq	0x20(%rsp), %rax
    0000050c: 	addq	0xb8(%rbp), %r14
    00000513: 	movq	0xa8(%rbp), %r12
    0000051a: 	movsd	(%rax), %xmm0
    0000051e: 	movq	(%r14), %rax
    00000521: 	movq	$0x0, 0x8(%rdi)
    00000529: 	movq	%rax, 0x10(%rdi)
    0000052d: 	movq	0xa0(%rbp), %rax
    00000534: 	movsd	%xmm0, (%rdi)
    00000538: 	addq	$0x1, %rax
    0000053c: 	movq	%rdi, (%r14)
    0000053f: 	movq	%rax, 0xa0(%rbp)
    00000546: 	cmpq	%r12, %rax
    00000549: 	ja	.Ltmp7184 # Offset: 1353
.Ltmp7217:
    0000054f: 	movq	0x10(%rsp), %rbx
    00000554: 	movq	0x20(%rsp), %rax
    00000559: 	addq	$0x8, %rbx
    0000055d: 	movsd	(%rax), %xmm0
    00000561: 	jmp	.Ltmp7185 # Offset: 1377
.Ltmp7170:
    00000566: 	subss	DATAat0x537a0(%rip), %xmm0
    0000056e: 	cvttss2si	%xmm0, %rax
    00000573: 	btcq	$0x3f, %rax
    00000578: 	jmp	.Ltmp7186 # Offset: 1400
.Ltmp7162:
    0000057d: 	movq	0x40(%rsp), %rax
    00000582: 	movq	0x90(%rsp), %rdi
    0000058a: 	movq	%rbp, (%rdi,%rax)
    0000058e: 	addq	$0x8, %rax
    00000592: 	movq	%rdi, (%rsp)
    00000596: 	movq	%rax, 0x40(%rsp)
    0000059b: 	cmpq	%rax, 0x50(%rsp)
    000005a0: 	jne	.Ltmp7187 # Offset: 1440
    000005a6: 	callq	clock@PLT # Offset: 1446
    000005ab: 	movq	(%rsp), %r15
    000005af: 	movq	%rax, start_time(%rip)
    000005b6: 	movq	0x68(%rsp), %rax
    000005bb: 	movq	%r15, %r14
    000005be: 	leaq	0x8(%r15,%rax,8), %rax
    000005c3: 	movq	%rax, 0x20(%rsp)
    000005c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp7196:
    000005d0: 	movq	(%r15), %rbx
    000005d3: 	xorl	%r13d, %r13d
    000005d6: 	movq	0xb0(%rbx), %rdx
    000005dd: 	testq	%rdx, %rdx
    000005e0: 	je	.Ltmp7188 # Offset: 1504
    000005e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp7195:
    000005f0: 	movq	0xb8(%rbx), %rax
    000005f7: 	leaq	(%rax,%r13,8), %rax
    000005fb: 	movq	(%rax), %rbp
    000005fe: 	movq	$0x0, (%rax)
    00000605: 	testq	%rbp, %rbp
    00000608: 	jne	.Ltmp7189 # Offset: 1544
    0000060a: 	jmp	.Ltmp7190 # Offset: 1546
    0000060f: 	nop # Size: 1
.Ltmp7194:
    00000610: 	cmpq	$0xf, %rax
    00000614: 	jg	.Ltmp7191 # Offset: 1556
    0000061a: 	shlq	$0x5, %rdx
    0000061e: 	leaq	(%rsi,%rdx), %rax
    00000622: 	movq	$-0x1, 0x18(%rax)
    0000062a: 	testq	%rbp, %rbp
    0000062d: 	je	.Ltmp7192 # Offset: 1581
.Ltmp7189:
    0000062f: 	movq	0x40(%rbx), %rcx
    00000633: 	movq	0x30(%rbx), %rax
    00000637: 	movq	%rbp, %r12
    0000063a: 	movq	0x10(%rbp), %rbp
    0000063e: 	leaq	-0x8(%rcx), %rdx
    00000642: 	cmpq	%rdx, %rax
    00000645: 	je	.Ltmp7193 # Offset: 1605
    0000064b: 	movq	0x18(%r12), %rdx
    00000650: 	addq	$0x8, %rax
    00000654: 	movq	%rdx, -0x8(%rax)
    00000658: 	movq	%rax, 0x30(%rbx)
.Ltmp7211:
    0000065c: 	movq	0x60(%rbx), %rsi
    00000660: 	movq	0x18(%r12), %rdx
    00000665: 	movq	0x78(%rbx), %rcx
    00000669: 	movq	%rsi, %rax
    0000066c: 	subq	0x68(%rbx), %rax
    00000670: 	sarq	$0x5, %rax
    00000674: 	addq	%rdx, %rax
    00000677: 	jns	.Ltmp7194 # Offset: 1655
    00000679: 	movq	%rax, %rdx
    0000067c: 	notq	%rdx
    0000067f: 	shrq	$0x4, %rdx
    00000683: 	notq	%rdx
.Ltmp7210:
    00000686: 	movq	%rdx, %rsi
    00000689: 	shlq	$0x4, %rsi
    0000068d: 	subq	%rsi, %rax
    00000690: 	shlq	$0x5, %rax
    00000694: 	addq	(%rcx,%rdx,8), %rax
    00000698: 	movq	$-0x1, 0x18(%rax)
    000006a0: 	testq	%rbp, %rbp
    000006a3: 	jne	.Ltmp7189 # Offset: 1699
.Ltmp7192:
    000006a5: 	movq	0xb0(%rbx), %rdx
.Ltmp7190:
    000006ac: 	addq	$0x1, %r13
    000006b0: 	cmpq	%rdx, %r13
    000006b3: 	jb	.Ltmp7195 # Offset: 1715
.Ltmp7188:
    000006b9: 	movq	$0x0, 0xa0(%rbx)
    000006c4: 	addq	$0x8, %r15
    000006c8: 	cmpq	0x20(%rsp), %r15
    000006cd: 	jne	.Ltmp7196 # Offset: 1741
    000006d3: 	callq	clock@PLT # Offset: 1747
    000006d8: 	pxor	%xmm0, %xmm0
    000006dc: 	movq	0x20(%rsp), %r13
    000006e1: 	movq	%rax, end_time(%rip)
    000006e8: 	subq	start_time(%rip), %rax
    000006ef: 	cvtsi2sd	%rax, %xmm0
    000006f4: 	divsd	DATAat0x53788(%rip), %xmm0
    000006fc: 	addsd	0x78(%rsp), %xmm0
    00000702: 	movsd	%xmm0, 0x78(%rsp)
    00000708: 	nopl	(%rax,%rax) # Size: 8
.Ltmp7205:
    00000710: 	movq	(%r14), %rbp
    00000713: 	testq	%rbp, %rbp
    00000716: 	je	.Ltmp7197 # Offset: 1814
    0000071c: 	movq	0xb8(%rbp), %rdi
    00000723: 	testq	%rdi, %rdi
    00000726: 	je	.Ltmp7198 # Offset: 1830
    00000728: 	callq	_ZdaPv@PLT # Offset: 1832
.Ltmp7198:
    0000072d: 	movq	0x50(%rbp), %rdi
    00000731: 	testq	%rdi, %rdi
    00000734: 	je	.Ltmp7199 # Offset: 1844
    00000736: 	movq	0x98(%rbp), %rax
    0000073d: 	movq	0x78(%rbp), %rbx
    00000741: 	leaq	0x8(%rax), %r12
    00000745: 	cmpq	%rbx, %r12
    00000748: 	jbe	.Ltmp7200 # Offset: 1864
    0000074a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7201:
    00000750: 	movq	(%rbx), %rdi
    00000753: 	movl	$0x200, %esi
    00000758: 	addq	$0x8, %rbx
    0000075c: 	callq	_ZdlPvm@PLT # Offset: 1884
    00000761: 	cmpq	%rbx, %r12
    00000764: 	ja	.Ltmp7201 # Offset: 1892
    00000766: 	movq	0x50(%rbp), %rdi
.Ltmp7200:
    0000076a: 	movq	0x58(%rbp), %rax
    0000076e: 	leaq	(,%rax,8), %rsi
    00000776: 	callq	_ZdlPvm@PLT # Offset: 1910
.Ltmp7199:
    0000077b: 	movq	(%rbp), %rdi
    0000077f: 	testq	%rdi, %rdi
    00000782: 	je	.Ltmp7202 # Offset: 1922
    00000784: 	movq	0x48(%rbp), %rax
    00000788: 	movq	0x28(%rbp), %rbx
    0000078c: 	leaq	0x8(%rax), %r12
    00000790: 	cmpq	%rbx, %r12
    00000793: 	jbe	.Ltmp7203 # Offset: 1939
    00000795: 	nopl	(%rax) # Size: 3
.Ltmp7204:
    00000798: 	movq	(%rbx), %rdi
    0000079b: 	movl	$0x200, %esi
    000007a0: 	addq	$0x8, %rbx
    000007a4: 	callq	_ZdlPvm@PLT # Offset: 1956
    000007a9: 	cmpq	%rbx, %r12
    000007ac: 	ja	.Ltmp7204 # Offset: 1964
    000007ae: 	movq	(%rbp), %rdi
.Ltmp7203:
    000007b2: 	movq	0x8(%rbp), %rax
    000007b6: 	leaq	(,%rax,8), %rsi
    000007be: 	callq	_ZdlPvm@PLT # Offset: 1982
.Ltmp7202:
    000007c3: 	movl	$0xc8, %esi
    000007c8: 	movq	%rbp, %rdi
    000007cb: 	callq	_ZdlPvm@PLT # Offset: 1995
.Ltmp7197:
    000007d0: 	movq	$0x0, (%r14)
    000007d7: 	addq	$0x8, %r14
    000007db: 	cmpq	%r13, %r14
    000007de: 	jne	.Ltmp7205 # Offset: 2014
    000007e4: 	movl	0x30(%rsp), %edi
    000007e8: 	movl	iterations(%rip), %eax
    000007ee: 	addl	%edi, 0x60(%rsp)
    000007f2: 	movl	0x60(%rsp), %edi
    000007f6: 	cmpl	%edi, %eax
    000007f8: 	jg	.Ltmp7206 # Offset: 2040
.Ltmp7248:
    000007fe: 	movq	0x70(%rsp), %rdi
    00000803: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2051
    00000808: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000080f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000816: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000081d: 	je	.Ltmp7207 # Offset: 2077
.Ltmp7247:
    00000823: 	movq	-0x20(%rax), %rdi
    00000827: 	movsd	0x78(%rsp), %xmm0
    0000082d: 	callq	_Z13record_resultdPKc # Offset: 2093
    00000832: 	cmpq	$0x0, (%rsp)
    00000837: 	je	.Ltmp7208 # Offset: 2103
    0000083d: 	movq	0xa8(%rsp), %rax
    00000845: 	subq	%fs:0x28, %rax
    0000084e: 	jne	.Ltmp7209 # Offset: 2126
    00000854: 	movq	0xa0(%rsp), %rsi
    0000085c: 	movq	(%rsp), %rdi
    00000860: 	addq	$0xb8, %rsp
    00000867: 	popq	%rbx
    00000868: 	popq	%rbp
    00000869: 	subq	%rdi, %rsi
    0000086c: 	popq	%r12
    0000086e: 	popq	%r13
    00000870: 	popq	%r14
    00000872: 	popq	%r15
    00000874: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 2164
    00000879: 	nopl	(%rax) # Size: 7
.Ltmp7191:
    00000880: 	movq	%rax, %rdx
    00000883: 	sarq	$0x4, %rdx
    00000887: 	jmp	.Ltmp7210 # Offset: 2183
    0000088c: 	nopl	(%rax) # Size: 4
.Ltmp7193:
    00000890: 	leaq	0x18(%r12), %rsi
    00000895: 	movq	%rbx, %rdi
    00000898: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 2200
    0000089d: 	jmp	.Ltmp7211 # Offset: 2205
.Ltmp7183:
    000008a2: 	movq	%rax, %rcx
    000008a5: 	andl	$0xf, %eax
    000008a8: 	sarq	$0x4, %rcx
.Ltmp7232:
    000008ac: 	movq	(%rdx,%rcx,8), %rbx
    000008b0: 	shlq	$0x5, %rax
    000008b4: 	addq	%rax, %rbx
    000008b7: 	movq	%rbx, 0x10(%rsp)
    000008bc: 	movq	%rbx, %rdi
    000008bf: 	movq	%r12, 0x18(%rbx)
    000008c3: 	jmp	.Ltmp7212 # Offset: 2243
.Ltmp7184:
    000008c8: 	movq	0xb0(%rbp), %rax
    000008cf: 	movss	0xc0(%rbp), %xmm1
    000008d7: 	movq	%rax, (%rsp)
    000008db: 	testq	%r12, %r12
    000008de: 	je	.Ltmp7213 # Offset: 2270
    000008e4: 	js	.Ltmp7214 # Offset: 2276
    000008ea: 	pxor	%xmm0, %xmm0
    000008ee: 	cvtsi2ss	%r12, %xmm0
.Ltmp7243:
    000008f3: 	divss	%xmm1, %xmm0
    000008f7: 	movss	DATAat0x537b0(%rip), %xmm2
    000008ff: 	movss	DATAat0x5379c(%rip), %xmm3
    00000907: 	movaps	%xmm0, %xmm1
    0000090a: 	andps	%xmm2, %xmm1
    0000090d: 	ucomiss	%xmm1, %xmm3
    00000910: 	jbe	.Ltmp7215 # Offset: 2320
    00000912: 	cvttss2si	%xmm0, %eax
    00000916: 	pxor	%xmm1, %xmm1
    0000091a: 	movaps	%xmm0, %xmm3
    0000091d: 	movss	DATAat0x53798(%rip), %xmm7
    00000925: 	andnps	%xmm0, %xmm2
    00000928: 	cvtsi2ss	%eax, %xmm1
    0000092c: 	cmpnless	%xmm1, %xmm3
    00000931: 	andps	%xmm7, %xmm3
    00000934: 	addss	%xmm3, %xmm1
    00000938: 	orps	%xmm2, %xmm1
    0000093b: 	movaps	%xmm1, %xmm0
.Ltmp7215:
    0000093e: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000945: 	jae	.Ltmp7216 # Offset: 2373
    0000094b: 	cvttss2si	%xmm0, %rax
.Ltmp7242:
    00000950: 	movl	$0x8, %edx
    00000955: 	movq	%r12, %xmm7
    0000095a: 	cmpq	%rdx, %rax
    0000095d: 	cmovbq	%rdx, %rax
    00000961: 	movq	%rax, %rdx
    00000964: 	shrq	%rdx
    00000967: 	addq	%rax, %rdx
    0000096a: 	movq	%rdx, %xmm0
    0000096f: 	punpcklqdq	%xmm7, %xmm0
    00000973: 	movups	%xmm0, 0xa8(%rbp)
    0000097a: 	cmpq	(%rsp), %r12
    0000097e: 	je	.Ltmp7217 # Offset: 2430
    00000984: 	movq	%r12, %rax
    00000987: 	shrq	$0x3c, %rax
    0000098b: 	jne	.Ltmp7218 # Offset: 2443
    00000991: 	leaq	(,%r12,8), %rdi
.Ltmp7236:
    00000999: 	callq	_Znam@PLT # Offset: 2457
    0000099e: 	xorl	%esi, %esi
    000009a0: 	leaq	(,%r12,8), %rdx
    000009a8: 	movq	%rax, %rdi
    000009ab: 	movq	%rax, %r15
    000009ae: 	callq	memset@PLT # Offset: 2478
    000009b3: 	cmpq	$0x0, (%rsp)
    000009b8: 	movq	0xb8(%rbp), %r13
    000009bf: 	je	.Ltmp7219 # Offset: 2495
    000009c5: 	movq	%r13, 0x38(%rsp)
    000009ca: 	xorl	%r12d, %r12d
    000009cd: 	movl	$0xc70f6907, %r14d
    000009d3: 	movq	%r15, %r13
    000009d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp7225:
    000009e0: 	movq	0x38(%rsp), %rax
    000009e5: 	movq	(%rax,%r12,8), %rbx
    000009e9: 	testq	%rbx, %rbx
    000009ec: 	jne	.Ltmp7220 # Offset: 2540
    000009ee: 	jmp	.Ltmp7221 # Offset: 2542
.Ltmp7223:
    000009f0: 	movq	(%r13), %rax
    000009f4: 	movq	%rax, 0x10(%rbx)
    000009f8: 	movq	%rbx, (%r13)
    000009fc: 	testq	%r15, %r15
    000009ff: 	je	.Ltmp7221 # Offset: 2559
.Ltmp7224:
    00000a01: 	movq	%r15, %rbx
.Ltmp7220:
    00000a04: 	movsd	(%rbx), %xmm0
    00000a08: 	pxor	%xmm5, %xmm5
    00000a0c: 	movq	0x10(%rbx), %r15
    00000a10: 	movsd	%xmm0, 0x88(%rsp)
    00000a19: 	ucomisd	%xmm5, %xmm0
    00000a1d: 	jp	.Ltmp7222 # Offset: 2589
    00000a1f: 	je	.Ltmp7223 # Offset: 2591
.Ltmp7222:
    00000a21: 	movq	%r14, %rdx
    00000a24: 	leaq	0x88(%rsp), %rdi
    00000a2c: 	movl	$0x8, %esi
    00000a31: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 2609
    00000a36: 	xorl	%edx, %edx
    00000a38: 	divq	0xb0(%rbp)
    00000a3f: 	leaq	(%r13,%rdx,8), %rax
    00000a44: 	movq	(%rax), %rdx
    00000a47: 	movq	%rdx, 0x10(%rbx)
    00000a4b: 	movq	%rbx, (%rax)
    00000a4e: 	testq	%r15, %r15
    00000a51: 	jne	.Ltmp7224 # Offset: 2641
.Ltmp7221:
    00000a53: 	addq	$0x1, %r12
    00000a57: 	cmpq	%r12, (%rsp)
    00000a5b: 	jne	.Ltmp7225 # Offset: 2651
    00000a61: 	movq	%r13, %r15
    00000a64: 	movq	0xb8(%rbp), %r13
.Ltmp7219:
    00000a6b: 	testq	%r13, %r13
    00000a6e: 	je	.Ltmp7226 # Offset: 2670
    00000a70: 	movq	%r13, %rdi
    00000a73: 	callq	_ZdaPv@PLT # Offset: 2675
.Ltmp7226:
    00000a78: 	movq	%r15, 0xb8(%rbp)
    00000a7f: 	jmp	.Ltmp7217 # Offset: 2687
.Ltmp7180:
    00000a84: 	movq	0x98(%rbp), %r8
    00000a8b: 	movq	0x78(%rbp), %rax
    00000a8f: 	movq	0x70(%rbp), %rsi
    00000a93: 	movq	0x80(%rbp), %r12
    00000a9a: 	movq	%r8, %r10
    00000a9d: 	movq	0x60(%rbp), %r9
    00000aa1: 	subq	%rax, %r10
    00000aa4: 	sarq	$0x3, %r10
    00000aa8: 	cmpq	$0x1, %r8
    00000aac: 	adcq	$-0x1, %r10
    00000ab0: 	subq	0x88(%rbp), %r12
    00000ab7: 	shlq	$0x4, %r10
    00000abb: 	sarq	$0x5, %r12
    00000abf: 	addq	%r10, %r12
    00000ac2: 	movq	%rsi, %r10
    00000ac5: 	subq	%r9, %r10
    00000ac8: 	sarq	$0x5, %r10
    00000acc: 	addq	%r10, %r12
    00000acf: 	leaq	0x80(%r12), %rbx
    00000ad7: 	cmpq	%rbx, %r12
    00000ada: 	jb	.Ltmp7227 # Offset: 2778
    00000ae0: 	movq	0x68(%rbp), %r11
    00000ae4: 	movq	%r9, %r10
    00000ae7: 	subq	%r11, %r10
    00000aea: 	sarq	$0x5, %r10
    00000aee: 	addq	%rbx, %r10
    00000af1: 	js	.Ltmp7228 # Offset: 2801
    00000af7: 	cmpq	$0xf, %r10
    00000afb: 	jg	.Ltmp7229 # Offset: 2811
    00000b01: 	shlq	$0x5, %rbx
    00000b05: 	addq	%rbx, %r9
    00000b08: 	jmp	.Ltmp7230 # Offset: 2824
    00000b0d: 	nopl	(%rax) # Size: 3
.Ltmp7181:
    00000b10: 	movq	-0x8(%rdx), %rax
    00000b14: 	movl	$0x200, %esi
    00000b19: 	movq	0x1f8(%rax), %r12
    00000b20: 	callq	_ZdlPvm@PLT # Offset: 2848
    00000b25: 	movq	0x48(%rbp), %rdx
    00000b29: 	movq	-0x8(%rdx), %rax
    00000b2d: 	subq	$0x8, %rdx
    00000b31: 	leaq	0x1f8(%rax), %rdi
    00000b38: 	movq	%rax, %xmm7
    00000b3d: 	addq	$0x200, %rax
    00000b43: 	movq	%rdi, %xmm0
    00000b48: 	punpcklqdq	%xmm7, %xmm0
    00000b4c: 	movq	%rdx, %xmm7
    00000b51: 	movups	%xmm0, 0x30(%rbp)
    00000b55: 	movq	%rax, %xmm0
    00000b5a: 	punpcklqdq	%xmm7, %xmm0
    00000b5e: 	movups	%xmm0, 0x40(%rbp)
    00000b62: 	jmp	.Ltmp7231 # Offset: 2914
.Ltmp7182:
    00000b67: 	movq	%rax, %rcx
    00000b6a: 	notq	%rcx
    00000b6d: 	shrq	$0x4, %rcx
    00000b71: 	notq	%rcx
    00000b74: 	movq	%rcx, %rsi
    00000b77: 	shlq	$0x4, %rsi
    00000b7b: 	subq	%rsi, %rax
    00000b7e: 	jmp	.Ltmp7232 # Offset: 2942
.Ltmp7159:
    00000b83: 	movq	$0x3e8, 0x30(%rsp)
.Ltmp7160:
    00000b8c: 	movq	$0x0, 0xa0(%rsp)
    00000b98: 	pxor	%xmm0, %xmm0
    00000b9c: 	movaps	%xmm0, 0x90(%rsp)
    00000ba4: 	jmp	.Ltmp7233 # Offset: 2980
.Ltmp7213:
    00000ba9: 	movss	DATAat0x537a4(%rip), %xmm0
    00000bb1: 	movss	DATAat0x5379c(%rip), %xmm2
    00000bb9: 	divss	%xmm1, %xmm0
    00000bbd: 	movss	DATAat0x537b0(%rip), %xmm1
    00000bc5: 	andps	%xmm0, %xmm1
    00000bc8: 	ucomiss	%xmm1, %xmm2
    00000bcb: 	jbe	.Ltmp7234 # Offset: 3019
    00000bcd: 	cvttss2si	%xmm0, %eax
    00000bd1: 	pxor	%xmm1, %xmm1
    00000bd5: 	movaps	%xmm0, %xmm2
    00000bd8: 	movss	DATAat0x53798(%rip), %xmm7
    00000be0: 	cvtsi2ss	%eax, %xmm1
    00000be4: 	cmpnless	%xmm1, %xmm2
    00000be9: 	andps	%xmm7, %xmm2
    00000bec: 	addss	%xmm2, %xmm1
    00000bf0: 	movss	DATAat0x537b0(%rip), %xmm2
    00000bf8: 	andnps	%xmm0, %xmm2
    00000bfb: 	orps	%xmm2, %xmm1
    00000bfe: 	movaps	%xmm1, %xmm0
.Ltmp7234:
    00000c01: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000c08: 	jae	.Ltmp7235 # Offset: 3080
    00000c0e: 	cvttss2si	%xmm0, %rax
.Ltmp7241:
    00000c13: 	movq	$0x8, 0xb0(%rbp)
    00000c1e: 	movl	$0x8, %edx
    00000c23: 	cmpq	%rdx, %rax
    00000c26: 	cmovbq	%rdx, %rax
    00000c2a: 	movq	%rax, %rdx
    00000c2d: 	shrq	%rdx
    00000c30: 	addq	%rdx, %rax
    00000c33: 	cmpq	$0x8, (%rsp)
    00000c38: 	movq	%rax, 0xa8(%rbp)
    00000c3f: 	je	.Ltmp7217 # Offset: 3135
    00000c45: 	movl	$0x40, %edi
    00000c4a: 	movl	$0x8, %r12d
    00000c50: 	jmp	.Ltmp7236 # Offset: 3152
.Ltmp7227:
    00000c55: 	movq	0x58(%rsp), %rdi
    00000c5a: 	movl	$0x80, %esi
    00000c5f: 	callq	"_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 3167
    00000c64: 	movq	0x30(%rbp), %rdi
    00000c68: 	leaq	0x88(%rsp), %r15
    00000c70: 	jmp	.Ltmp7237 # Offset: 3184
    00000c72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7239:
    00000c78: 	movq	%rbx, (%rdi)
    00000c7b: 	addq	$0x8, %rdi
    00000c7f: 	movq	%rdi, 0x30(%rbp)
    00000c83: 	cmpq	%rbx, %r12
    00000c86: 	je	.Ltmp7238 # Offset: 3206
.Ltmp7237:
    00000c88: 	movq	0x40(%rbp), %rax
    00000c8c: 	subq	$0x1, %rbx
    00000c90: 	movq	%rbx, 0x88(%rsp)
    00000c98: 	subq	$0x8, %rax
    00000c9c: 	cmpq	%rax, %rdi
    00000c9f: 	jne	.Ltmp7239 # Offset: 3231
    00000ca1: 	movq	%r15, %rsi
    00000ca4: 	movq	%rbp, %rdi
    00000ca7: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 3239
    00000cac: 	movq	0x30(%rbp), %rdi
    00000cb0: 	cmpq	%rbx, %r12
    00000cb3: 	jne	.Ltmp7237 # Offset: 3251
.Ltmp7238:
    00000cb5: 	movq	0x38(%rbp), %rcx
    00000cb9: 	movq	0x48(%rbp), %rdx
    00000cbd: 	jmp	.Ltmp7240 # Offset: 3261
.Ltmp7235:
    00000cc2: 	subss	DATAat0x537a0(%rip), %xmm0
    00000cca: 	cvttss2si	%xmm0, %rax
    00000ccf: 	btcq	$0x3f, %rax
    00000cd4: 	jmp	.Ltmp7241 # Offset: 3284
.Ltmp7216:
    00000cd9: 	subss	DATAat0x537a0(%rip), %xmm0
    00000ce1: 	cvttss2si	%xmm0, %rax
    00000ce6: 	btcq	$0x3f, %rax
    00000ceb: 	jmp	.Ltmp7242 # Offset: 3307
.Ltmp7214:
    00000cf0: 	movq	%r12, %rax
    00000cf3: 	movq	%r12, %rdx
    00000cf6: 	pxor	%xmm0, %xmm0
    00000cfa: 	shrq	%rax
    00000cfd: 	andl	$0x1, %edx
    00000d00: 	orq	%rdx, %rax
    00000d03: 	cvtsi2ss	%rax, %xmm0
    00000d08: 	addss	%xmm0, %xmm0
    00000d0c: 	jmp	.Ltmp7243 # Offset: 3340
.Ltmp7208:
    00000d11: 	movq	0xa8(%rsp), %rax
    00000d19: 	subq	%fs:0x28, %rax
    00000d22: 	jne	.Ltmp7209 # Offset: 3362
    00000d28: 	addq	$0xb8, %rsp
    00000d2f: 	popq	%rbx
    00000d30: 	popq	%rbp
    00000d31: 	popq	%r12
    00000d33: 	popq	%r13
    00000d35: 	popq	%r14
    00000d37: 	popq	%r15
    00000d39: 	retq # Offset: 3385
.Ltmp7228:
    00000d3a: 	movq	%r10, %rbx
    00000d3d: 	notq	%rbx
    00000d40: 	shrq	$0x4, %rbx
    00000d44: 	notq	%rbx
.Ltmp7246:
    00000d47: 	leaq	(%rax,%rbx,8), %rax
    00000d4b: 	movq	%r10, %r9
    00000d4e: 	shlq	$0x4, %rbx
    00000d52: 	movq	(%rax), %r11
    00000d55: 	subq	%rbx, %r9
    00000d58: 	shlq	$0x5, %r9
    00000d5c: 	leaq	0x200(%r11), %rsi
    00000d63: 	addq	%r11, %r9
.Ltmp7230:
    00000d66: 	movq	%r11, %xmm2
    00000d6b: 	movq	%r9, %xmm7
    00000d70: 	leaq	0x8(%r8), %rbx
    00000d74: 	punpcklqdq	%xmm2, %xmm7
    00000d78: 	movq	%rax, %xmm2
    00000d7d: 	leaq	0x8(%rax), %r12
    00000d81: 	movaps	%xmm7, (%rsp)
    00000d85: 	movq	%rsi, %xmm7
    00000d8a: 	punpcklqdq	%xmm2, %xmm7
    00000d8e: 	movaps	%xmm7, 0x10(%rsp)
    00000d93: 	cmpq	%r12, %rbx
    00000d96: 	jbe	.Ltmp7244 # Offset: 3478
.Ltmp7245:
    00000d98: 	movq	(%r12), %rdi
    00000d9c: 	movl	$0x200, %esi
    00000da1: 	addq	$0x8, %r12
    00000da5: 	callq	_ZdlPvm@PLT # Offset: 3493
    00000daa: 	cmpq	%r12, %rbx
    00000dad: 	ja	.Ltmp7245 # Offset: 3501
    00000daf: 	movq	0x30(%rbp), %rdi
    00000db3: 	movq	0x38(%rbp), %rcx
    00000db7: 	movq	0x48(%rbp), %rdx
.Ltmp7244:
    00000dbb: 	movdqa	(%rsp), %xmm7
    00000dc0: 	movups	%xmm7, 0x80(%rbp)
    00000dc7: 	movdqa	0x10(%rsp), %xmm7
    00000dcd: 	movups	%xmm7, 0x90(%rbp)
    00000dd4: 	jmp	.Ltmp7240 # Offset: 3540
.Ltmp7229:
    00000dd9: 	movq	%r10, %rbx
    00000ddc: 	sarq	$0x4, %rbx
    00000de0: 	jmp	.Ltmp7246 # Offset: 3552
.Ltmp7207:
    00000de5: 	movq	-0x8(%rdx), %rax
    00000de9: 	addq	$0x200, %rax
    00000def: 	jmp	.Ltmp7247 # Offset: 3567
.Ltmp7161:
    00000df4: 	movq	0x90(%rsp), %rax
    00000dfc: 	pxor	%xmm7, %xmm7
    00000e00: 	movsd	%xmm7, 0x78(%rsp)
    00000e06: 	movq	%rax, (%rsp)
    00000e0a: 	jmp	.Ltmp7248 # Offset: 3594
.Ltmp7209:
    00000e0f: 	callq	__stack_chk_fail@PLT # Offset: 3599
    00000e14: 	endbr64
    00000e18: 	movq	%rax, %rdi
    00000e1b: 	jmp	.Ltmp7249 # Offset: 3611
.Ltmp7218:
    00000e1d: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 3613
    00000e22: 	endbr64
    00000e26: 	movq	%rax, %rbx
    00000e29: 	jmp	.Ltmp7250 # Offset: 3625
    00000e2b: 	endbr64
    00000e2f: 	movq	%rax, %rbp
    00000e32: 	jmp	.Ltmp7251 # Offset: 3634
.Ltmp7254:
    00000e34: 	callq	__cxa_end_catch@PLT # Offset: 3636
.Ltmp7250:
    00000e39: 	movq	%rbp, %rdi
    00000e3c: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 3644
.Ltmp7253:
    00000e41: 	movq	%rbp, %rdi
    00000e44: 	movl	$0xc8, %esi
    00000e49: 	movq	%rbx, %rbp
    00000e4c: 	callq	_ZdlPvm@PLT # Offset: 3660
.Ltmp7251:
    00000e51: 	movq	0x90(%rsp), %rdi
    00000e59: 	movq	0xa0(%rsp), %rsi
    00000e61: 	subq	%rdi, %rsi
    00000e64: 	testq	%rdi, %rdi
    00000e67: 	je	.Ltmp7252 # Offset: 3687
    00000e69: 	callq	_ZdlPvm@PLT # Offset: 3689
.Ltmp7252:
    00000e6e: 	movq	%rbp, %rdi
    00000e71: 	callq	_Unwind_Resume@PLT # Offset: 3697
    00000e76: 	endbr64
    00000e7a: 	movq	%rax, %rbx
    00000e7d: 	jmp	.Ltmp7253 # Offset: 3709
.Ltmp7249:
    00000e7f: 	callq	__cxa_begin_catch@PLT # Offset: 3711
    00000e84: 	callq	__cxa_rethrow@PLT # Offset: 3716
    00000e89: 	endbr64
    00000e8d: 	movq	%rax, %r12
    00000e90: 	callq	__cxa_end_catch@PLT # Offset: 3728
    00000e95: 	movq	%r12, %rdi
    00000e98: 	callq	__cxa_begin_catch@PLT # Offset: 3736
    00000e9d: 	movq	0x58(%rbp), %rax
    00000ea1: 	movq	0x50(%rbp), %rdi
    00000ea5: 	leaq	(,%rax,8), %rsi
    00000ead: 	callq	_ZdlPvm@PLT # Offset: 3757
    00000eb2: 	movq	$0x0, 0x50(%rbp)
    00000eba: 	movq	$0x0, 0x58(%rbp)
    00000ec2: 	callq	__cxa_rethrow@PLT # Offset: 3778
    00000ec7: 	endbr64
    00000ecb: 	movq	%rax, %rbx
    00000ece: 	jmp	.Ltmp7254 # Offset: 3790
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_clearall_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12testClearAllIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 349
  State       : disassembled
  Address     : 0x4c750
  Size        : 0x9fc
  MaxSize     : 0xa00
  Offset      : 0x4c750
  Section     : .text
  Orc Section : .local.text._Z12testClearAllIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0348:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdx, %rbx
    00000014: 	subq	$0xa8, %rsp
    0000001b: 	movq	%rsi, 0x20(%rsp)
    00000020: 	movl	%r8d, 0x2c(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x98(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movl	%ecx, iterations(%rip)
    0000003e: 	testq	%rsi, %rsi
    00000041: 	je	.Ltmp7255 # Offset: 65
    00000047: 	leaq	-0x1(%rsi), %rax
    0000004b: 	movq	%rsi, %rcx
    0000004e: 	cmpq	$0x2, %rax
    00000052: 	jbe	.Ltmp7256 # Offset: 82
    00000058: 	shrq	$0x2, %rcx
    0000005c: 	movdqa	DATAat0x537d0(%rip), %xmm1
    00000064: 	movdqa	DATAat0x537e0(%rip), %xmm3
    0000006c: 	movq	%rdi, %rax
    0000006f: 	movq	%rcx, %rdx
    00000072: 	shlq	$0x5, %rdx
    00000076: 	addq	%rdi, %rdx
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp7257:
    00000080: 	movdqa	%xmm1, %xmm2
    00000084: 	addq	$0x20, %rax
    00000088: 	paddd	%xmm3, %xmm1
    0000008c: 	movdqa	%xmm2, %xmm0
    00000090: 	pslld	$0x1, %xmm0
    00000095: 	paddd	%xmm2, %xmm0
    00000099: 	cvtdq2pd	%xmm0, %xmm2
    0000009d: 	pshufd	$0xee, %xmm0, %xmm0
    000000a2: 	movups	%xmm2, -0x20(%rax)
    000000a6: 	cvtdq2pd	%xmm0, %xmm0
    000000aa: 	movups	%xmm0, -0x10(%rax)
    000000ae: 	cmpq	%rdx, %rax
    000000b1: 	jne	.Ltmp7257 # Offset: 177
    000000b3: 	movq	0x20(%rsp), %rcx
    000000b8: 	movq	%rcx, %rdx
    000000bb: 	andq	$-0x4, %rdx
    000000bf: 	movl	%edx, %eax
    000000c1: 	cmpq	%rdx, %rcx
    000000c4: 	je	.Ltmp7255 # Offset: 196
.Ltmp7290:
    000000c6: 	leal	(%rax,%rax,2), %ecx
    000000c9: 	pxor	%xmm0, %xmm0
    000000cd: 	movq	0x20(%rsp), %r9
    000000d2: 	cvtsi2sd	%ecx, %xmm0
    000000d6: 	movsd	%xmm0, (%rbp,%rdx,8)
    000000dc: 	leal	0x1(%rax), %edx
    000000df: 	movslq	%edx, %rdx
    000000e2: 	cmpq	%rdx, %r9
    000000e5: 	jbe	.Ltmp7255 # Offset: 229
    000000e7: 	leal	0x3(%rcx), %esi
    000000ea: 	pxor	%xmm0, %xmm0
    000000ee: 	addl	$0x2, %eax
    000000f1: 	cvtsi2sd	%esi, %xmm0
    000000f5: 	cltq
    000000f7: 	leaq	(,%rdx,8), %rdi
    000000ff: 	movsd	%xmm0, (%rbp,%rdx,8)
    00000105: 	cmpq	%rax, %r9
    00000108: 	jbe	.Ltmp7255 # Offset: 264
    0000010a: 	addl	$0x6, %ecx
    0000010d: 	pxor	%xmm0, %xmm0
    00000111: 	cvtsi2sd	%ecx, %xmm0
    00000115: 	movsd	%xmm0, 0x8(%rbp,%rdi)
.Ltmp7255:
    0000011b: 	movq	0x20(%rsp), %rax
    00000120: 	movq	%rbp, %rdi
    00000123: 	leaq	0x70(%rsp), %r12
    00000128: 	leaq	(%rbp,%rax,8), %r13
    0000012d: 	movq	%r13, %rsi
    00000130: 	callq	_ZN9benchmark14random_shuffleIPdEEvT_S2_ # Offset: 304
    00000135: 	leaq	DATAat0x53180(%rip), %rdx
    0000013c: 	movq	%rbx, %rsi
    0000013f: 	movq	%r12, %rdi
    00000142: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 322
    00000147: 	movq	%r12, %rdx
    0000014a: 	movq	%r13, %rsi
    0000014d: 	movq	%rbp, %rdi
    00000150: 	callq	_Z22test_clearall_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 336
    00000155: 	movq	0x70(%rsp), %rdi
    0000015a: 	leaq	0x80(%rsp), %rax
    00000162: 	movq	%rax, 0x8(%rsp)
    00000167: 	cmpq	%rax, %rdi
    0000016a: 	je	.Ltmp7258 # Offset: 362
    0000016c: 	movq	0x80(%rsp), %rax
    00000174: 	leaq	0x1(%rax), %rsi
    00000178: 	callq	_ZdlPvm@PLT # Offset: 376
.Ltmp7258:
    0000017d: 	leaq	DATAat0x53389(%rip), %rdx
    00000184: 	movq	%rbx, %rsi
    00000187: 	movq	%r12, %rdi
    0000018a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 394
    0000018f: 	movq	%r12, %rdx
    00000192: 	movq	%r13, %rsi
    00000195: 	movq	%rbp, %rdi
    00000198: 	callq	_Z22test_clearall_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 408
    0000019d: 	movq	0x70(%rsp), %rdi
    000001a2: 	cmpq	0x8(%rsp), %rdi
    000001a7: 	je	.Ltmp7259 # Offset: 423
    000001a9: 	movq	0x80(%rsp), %rax
    000001b1: 	leaq	0x1(%rax), %rsi
    000001b5: 	callq	_ZdlPvm@PLT # Offset: 437
.Ltmp7259:
    000001ba: 	leaq	DATAat0x531a0(%rip), %rdx
    000001c1: 	movq	%rbx, %rsi
    000001c4: 	movq	%r12, %rdi
    000001c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 455
    000001cc: 	movq	%r12, %rdx
    000001cf: 	movq	%r13, %rsi
    000001d2: 	movq	%rbp, %rdi
    000001d5: 	callq	_Z21test_clearall_forwardIdSt12forward_listIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 469
    000001da: 	movq	0x70(%rsp), %rdi
    000001df: 	cmpq	0x8(%rsp), %rdi
    000001e4: 	je	.Ltmp7260 # Offset: 484
    000001e6: 	movq	0x80(%rsp), %rax
    000001ee: 	leaq	0x1(%rax), %rsi
    000001f2: 	callq	_ZdlPvm@PLT # Offset: 498
.Ltmp7260:
    000001f7: 	leaq	DATAat0x533a7(%rip), %rdx
    000001fe: 	movq	%rbx, %rsi
    00000201: 	movq	%r12, %rdi
    00000204: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 516
    00000209: 	movq	%r12, %rdx
    0000020c: 	movq	%r13, %rsi
    0000020f: 	movq	%rbp, %rdi
    00000212: 	callq	_Z22test_clearall_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 530
    00000217: 	movq	0x70(%rsp), %rdi
    0000021c: 	cmpq	0x8(%rsp), %rdi
    00000221: 	je	.Ltmp7261 # Offset: 545
    00000223: 	movq	0x80(%rsp), %rax
    0000022b: 	leaq	0x1(%rax), %rsi
    0000022f: 	callq	_ZdlPvm@PLT # Offset: 559
.Ltmp7261:
    00000234: 	leaq	DATAat0x531c8(%rip), %rdx
    0000023b: 	movq	%rbx, %rsi
    0000023e: 	movq	%r12, %rdi
    00000241: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 577
    00000246: 	movq	%r12, %rdx
    00000249: 	movq	%r13, %rsi
    0000024c: 	movq	%rbp, %rdi
    0000024f: 	callq	_Z22test_clearall_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 591
    00000254: 	movq	0x70(%rsp), %rdi
    00000259: 	cmpq	0x8(%rsp), %rdi
    0000025e: 	je	.Ltmp7262 # Offset: 606
    00000260: 	movq	0x80(%rsp), %rax
    00000268: 	leaq	0x1(%rax), %rsi
    0000026c: 	callq	_ZdlPvm@PLT # Offset: 620
.Ltmp7262:
    00000271: 	leaq	DATAat0x531f0(%rip), %rdx
    00000278: 	movq	%rbx, %rsi
    0000027b: 	movq	%r12, %rdi
    0000027e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 638
    00000283: 	movq	%r12, %rdx
    00000286: 	movq	%r13, %rsi
    00000289: 	movq	%rbp, %rdi
    0000028c: 	callq	_Z22test_clearall_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 652
    00000291: 	movq	0x70(%rsp), %rdi
    00000296: 	cmpq	0x8(%rsp), %rdi
    0000029b: 	je	.Ltmp7263 # Offset: 667
    0000029d: 	movq	0x80(%rsp), %rax
    000002a5: 	leaq	0x1(%rax), %rsi
    000002a9: 	callq	_ZdlPvm@PLT # Offset: 681
.Ltmp7263:
    000002ae: 	leaq	DATAat0x53218(%rip), %rdx
    000002b5: 	movq	%rbx, %rsi
    000002b8: 	movq	%r12, %rdi
    000002bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 699
    000002c0: 	movq	%r12, %rdx
    000002c3: 	movq	%r13, %rsi
    000002c6: 	movq	%rbp, %rdi
    000002c9: 	callq	_Z22test_clearall_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 713
    000002ce: 	movq	0x70(%rsp), %rdi
    000002d3: 	cmpq	0x8(%rsp), %rdi
    000002d8: 	je	.Ltmp7264 # Offset: 728
    000002da: 	movq	0x80(%rsp), %rax
    000002e2: 	leaq	0x1(%rax), %rsi
    000002e6: 	callq	_ZdlPvm@PLT # Offset: 742
.Ltmp7264:
    000002eb: 	leaq	DATAat0x53240(%rip), %rdx
    000002f2: 	movq	%rbx, %rsi
    000002f5: 	movq	%r12, %rdi
    000002f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 760
    000002fd: 	movq	%r12, %rdx
    00000300: 	movq	%r13, %rsi
    00000303: 	movq	%rbp, %rdi
    00000306: 	callq	_Z22test_clearall_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 774
    0000030b: 	movq	0x70(%rsp), %rdi
    00000310: 	cmpq	0x8(%rsp), %rdi
    00000315: 	je	.Ltmp7265 # Offset: 789
    00000317: 	movq	0x80(%rsp), %rax
    0000031f: 	leaq	0x1(%rax), %rsi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
.Ltmp7265:
    00000328: 	leaq	DATAat0x533c4(%rip), %rdx
    0000032f: 	movq	%rbx, %rsi
    00000332: 	movq	%r12, %rdi
    00000335: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 821
    0000033a: 	movq	%r12, %rdx
    0000033d: 	movq	%r13, %rsi
    00000340: 	movq	%rbp, %rdi
    00000343: 	callq	_Z18test_clearall_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 835
    00000348: 	movq	0x70(%rsp), %rdi
    0000034d: 	cmpq	0x8(%rsp), %rdi
    00000352: 	je	.Ltmp7266 # Offset: 850
    00000354: 	movq	0x80(%rsp), %rax
    0000035c: 	leaq	0x1(%rax), %rsi
    00000360: 	callq	_ZdlPvm@PLT # Offset: 864
.Ltmp7266:
    00000365: 	leaq	DATAat0x53268(%rip), %rdx
    0000036c: 	movq	%rbx, %rsi
    0000036f: 	movq	%r12, %rdi
    00000372: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 882
    00000377: 	movq	%r12, %rdx
    0000037a: 	movq	%r13, %rsi
    0000037d: 	movq	%rbp, %rdi
    00000380: 	callq	_Z18test_clearall_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 896
    00000385: 	movq	0x70(%rsp), %rdi
    0000038a: 	cmpq	0x8(%rsp), %rdi
    0000038f: 	je	.Ltmp7267 # Offset: 911
    00000391: 	movq	0x80(%rsp), %rax
    00000399: 	leaq	0x1(%rax), %rsi
    0000039d: 	callq	_ZdlPvm@PLT # Offset: 925
.Ltmp7267:
    000003a2: 	leaq	0x30(%rsp), %r15
    000003a7: 	leaq	DATAat0x52564(%rip), %rdx
    000003ae: 	movq	%rbx, %rsi
    000003b1: 	movq	%r15, %rdi
    000003b4: 	leaq	0x50(%rsp), %r14
    000003b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 953
    000003be: 	movq	0x8(%rbx), %rcx
    000003c2: 	movq	(%rbx), %rdx
    000003c5: 	movq	%r15, %rsi
    000003c8: 	movq	%r14, %rdi
    000003cb: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 971
    000003d0: 	leaq	DATAat0x533e0(%rip), %rdx
    000003d7: 	movq	%r14, %rsi
    000003da: 	movq	%r12, %rdi
    000003dd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 989
    000003e2: 	movq	%r12, %rdx
    000003e5: 	movq	%r13, %rsi
    000003e8: 	movq	%rbp, %rdi
    000003eb: 	callq	_Z17test_clearall_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1003
    000003f0: 	movq	0x70(%rsp), %rdi
    000003f5: 	cmpq	0x8(%rsp), %rdi
    000003fa: 	je	.Ltmp7268 # Offset: 1018
    000003fc: 	movq	0x80(%rsp), %rax
    00000404: 	leaq	0x1(%rax), %rsi
    00000408: 	callq	_ZdlPvm@PLT # Offset: 1032
.Ltmp7268:
    0000040d: 	movq	0x50(%rsp), %rdi
    00000412: 	leaq	0x60(%rsp), %rax
    00000417: 	movq	%rax, 0x18(%rsp)
    0000041c: 	cmpq	%rax, %rdi
    0000041f: 	je	.Ltmp7269 # Offset: 1055
    00000421: 	movq	0x60(%rsp), %rax
    00000426: 	leaq	0x1(%rax), %rsi
    0000042a: 	callq	_ZdlPvm@PLT # Offset: 1066
.Ltmp7269:
    0000042f: 	movq	0x30(%rsp), %rdi
    00000434: 	leaq	0x40(%rsp), %rax
    00000439: 	movq	%rax, 0x10(%rsp)
    0000043e: 	cmpq	%rax, %rdi
    00000441: 	je	.Ltmp7270 # Offset: 1089
    00000443: 	movq	0x40(%rsp), %rax
    00000448: 	leaq	0x1(%rax), %rsi
    0000044c: 	callq	_ZdlPvm@PLT # Offset: 1100
.Ltmp7270:
    00000451: 	leaq	DATAat0x52564(%rip), %rdx
    00000458: 	movq	%rbx, %rsi
    0000045b: 	movq	%r15, %rdi
    0000045e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1118
    00000463: 	movq	0x8(%rbx), %rcx
    00000467: 	movq	(%rbx), %rdx
    0000046a: 	movq	%r15, %rsi
    0000046d: 	movq	%r14, %rdi
    00000470: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1136
    00000475: 	leaq	DATAat0x53290(%rip), %rdx
    0000047c: 	movq	%r14, %rsi
    0000047f: 	movq	%r12, %rdi
    00000482: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1154
    00000487: 	movq	%r12, %rdx
    0000048a: 	movq	%r13, %rsi
    0000048d: 	movq	%rbp, %rdi
    00000490: 	callq	_Z22test_clearall_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1168
    00000495: 	movq	0x70(%rsp), %rdi
    0000049a: 	cmpq	0x8(%rsp), %rdi
    0000049f: 	je	.Ltmp7271 # Offset: 1183
    000004a1: 	movq	0x80(%rsp), %rax
    000004a9: 	leaq	0x1(%rax), %rsi
    000004ad: 	callq	_ZdlPvm@PLT # Offset: 1197
.Ltmp7271:
    000004b2: 	movq	0x50(%rsp), %rdi
    000004b7: 	cmpq	0x18(%rsp), %rdi
    000004bc: 	je	.Ltmp7272 # Offset: 1212
    000004be: 	movq	0x60(%rsp), %rax
    000004c3: 	leaq	0x1(%rax), %rsi
    000004c7: 	callq	_ZdlPvm@PLT # Offset: 1223
.Ltmp7272:
    000004cc: 	movq	0x30(%rsp), %rdi
    000004d1: 	cmpq	0x10(%rsp), %rdi
    000004d6: 	je	.Ltmp7273 # Offset: 1238
    000004d8: 	movq	0x40(%rsp), %rax
    000004dd: 	leaq	0x1(%rax), %rsi
    000004e1: 	callq	_ZdlPvm@PLT # Offset: 1249
.Ltmp7273:
    000004e6: 	leaq	DATAat0x532b8(%rip), %rdx
    000004ed: 	movq	%rbx, %rsi
    000004f0: 	movq	%r12, %rdi
    000004f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1267
    000004f8: 	movq	%r12, %rdx
    000004fb: 	movq	%r13, %rsi
    000004fe: 	movq	%rbp, %rdi
    00000501: 	callq	_Z18test_clearall_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1281
    00000506: 	movq	0x70(%rsp), %rdi
    0000050b: 	cmpq	0x8(%rsp), %rdi
    00000510: 	je	.Ltmp7274 # Offset: 1296
    00000512: 	movq	0x80(%rsp), %rax
    0000051a: 	leaq	0x1(%rax), %rsi
    0000051e: 	callq	_ZdlPvm@PLT # Offset: 1310
.Ltmp7274:
    00000523: 	leaq	DATAat0x532e0(%rip), %rdx
    0000052a: 	movq	%rbx, %rsi
    0000052d: 	movq	%r12, %rdi
    00000530: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1328
    00000535: 	movq	%r12, %rdx
    00000538: 	movq	%r13, %rsi
    0000053b: 	movq	%rbp, %rdi
    0000053e: 	callq	_Z18test_clearall_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1342
    00000543: 	movq	0x70(%rsp), %rdi
    00000548: 	cmpq	0x8(%rsp), %rdi
    0000054d: 	je	.Ltmp7275 # Offset: 1357
    0000054f: 	movq	0x80(%rsp), %rax
    00000557: 	leaq	0x1(%rax), %rsi
    0000055b: 	callq	_ZdlPvm@PLT # Offset: 1371
.Ltmp7275:
    00000560: 	leaq	DATAat0x52564(%rip), %rdx
    00000567: 	movq	%rbx, %rsi
    0000056a: 	movq	%r15, %rdi
    0000056d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1389
    00000572: 	movq	0x8(%rbx), %rcx
    00000576: 	movq	(%rbx), %rdx
    00000579: 	movq	%r15, %rsi
    0000057c: 	movq	%r14, %rdi
    0000057f: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1407
    00000584: 	leaq	DATAat0x53310(%rip), %rdx
    0000058b: 	movq	%r14, %rsi
    0000058e: 	movq	%r12, %rdi
    00000591: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1425
    00000596: 	movq	%r12, %rdx
    00000599: 	movq	%r13, %rsi
    0000059c: 	movq	%rbp, %rdi
    0000059f: 	callq	_Z17test_clearall_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1439
    000005a4: 	movq	0x70(%rsp), %rdi
    000005a9: 	cmpq	0x8(%rsp), %rdi
    000005ae: 	je	.Ltmp7276 # Offset: 1454
    000005b0: 	movq	0x80(%rsp), %rax
    000005b8: 	leaq	0x1(%rax), %rsi
    000005bc: 	callq	_ZdlPvm@PLT # Offset: 1468
.Ltmp7276:
    000005c1: 	movq	0x50(%rsp), %rdi
    000005c6: 	cmpq	0x18(%rsp), %rdi
    000005cb: 	je	.Ltmp7277 # Offset: 1483
    000005cd: 	movq	0x60(%rsp), %rax
    000005d2: 	leaq	0x1(%rax), %rsi
    000005d6: 	callq	_ZdlPvm@PLT # Offset: 1494
.Ltmp7277:
    000005db: 	movq	0x30(%rsp), %rdi
    000005e0: 	cmpq	0x10(%rsp), %rdi
    000005e5: 	je	.Ltmp7278 # Offset: 1509
    000005e7: 	movq	0x40(%rsp), %rax
    000005ec: 	leaq	0x1(%rax), %rsi
    000005f0: 	callq	_ZdlPvm@PLT # Offset: 1520
.Ltmp7278:
    000005f5: 	leaq	DATAat0x52564(%rip), %rdx
    000005fc: 	movq	%rbx, %rsi
    000005ff: 	movq	%r15, %rdi
    00000602: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1538
    00000607: 	movq	0x8(%rbx), %rcx
    0000060b: 	movq	(%rbx), %rdx
    0000060e: 	movq	%r15, %rsi
    00000611: 	movq	%r14, %rdi
    00000614: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1556
    00000619: 	leaq	DATAat0x53338(%rip), %rdx
    00000620: 	movq	%r14, %rsi
    00000623: 	movq	%r12, %rdi
    00000626: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1574
    0000062b: 	movq	%r12, %rdx
    0000062e: 	movq	%r13, %rsi
    00000631: 	movq	%rbp, %rdi
    00000634: 	callq	_Z22test_clearall_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1588
    00000639: 	movq	0x70(%rsp), %rdi
    0000063e: 	cmpq	0x8(%rsp), %rdi
    00000643: 	je	.Ltmp7279 # Offset: 1603
    00000645: 	movq	0x80(%rsp), %rax
    0000064d: 	leaq	0x1(%rax), %rsi
    00000651: 	callq	_ZdlPvm@PLT # Offset: 1617
.Ltmp7279:
    00000656: 	movq	0x50(%rsp), %rdi
    0000065b: 	cmpq	0x18(%rsp), %rdi
    00000660: 	je	.Ltmp7280 # Offset: 1632
    00000662: 	movq	0x60(%rsp), %rax
    00000667: 	leaq	0x1(%rax), %rsi
    0000066b: 	callq	_ZdlPvm@PLT # Offset: 1643
.Ltmp7280:
    00000670: 	movq	0x30(%rsp), %rdi
    00000675: 	cmpq	0x10(%rsp), %rdi
    0000067a: 	je	.Ltmp7281 # Offset: 1658
    0000067c: 	movq	0x40(%rsp), %rax
    00000681: 	leaq	0x1(%rax), %rsi
    00000685: 	callq	_ZdlPvm@PLT # Offset: 1669
.Ltmp7281:
    0000068a: 	leaq	DATAat0x52564(%rip), %rdx
    00000691: 	movq	%rbx, %rsi
    00000694: 	movq	%r15, %rdi
    00000697: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1687
    0000069c: 	movq	0x8(%rbx), %rcx
    000006a0: 	movq	(%rbx), %rdx
    000006a3: 	movq	%r15, %rsi
    000006a6: 	movq	%r14, %rdi
    000006a9: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1705
    000006ae: 	leaq	DATAat0x533fc(%rip), %rdx
    000006b5: 	movq	%r14, %rsi
    000006b8: 	movq	%r12, %rdi
    000006bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1723
    000006c0: 	movq	%r12, %rdx
    000006c3: 	movq	%r13, %rsi
    000006c6: 	movq	%rbp, %rdi
    000006c9: 	callq	_Z17test_clearall_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1737
    000006ce: 	movq	0x70(%rsp), %rdi
    000006d3: 	cmpq	0x8(%rsp), %rdi
    000006d8: 	je	.Ltmp7282 # Offset: 1752
    000006da: 	movq	0x80(%rsp), %rax
    000006e2: 	leaq	0x1(%rax), %rsi
    000006e6: 	callq	_ZdlPvm@PLT # Offset: 1766
.Ltmp7282:
    000006eb: 	movq	0x50(%rsp), %rdi
    000006f0: 	cmpq	0x18(%rsp), %rdi
    000006f5: 	je	.Ltmp7283 # Offset: 1781
    000006f7: 	movq	0x60(%rsp), %rax
    000006fc: 	leaq	0x1(%rax), %rsi
    00000700: 	callq	_ZdlPvm@PLT # Offset: 1792
.Ltmp7283:
    00000705: 	movq	0x30(%rsp), %rdi
    0000070a: 	cmpq	0x10(%rsp), %rdi
    0000070f: 	je	.Ltmp7284 # Offset: 1807
    00000711: 	movq	0x40(%rsp), %rax
    00000716: 	leaq	0x1(%rax), %rsi
    0000071a: 	callq	_ZdlPvm@PLT # Offset: 1818
.Ltmp7284:
    0000071f: 	leaq	DATAat0x52564(%rip), %rdx
    00000726: 	movq	%rbx, %rsi
    00000729: 	movq	%r15, %rdi
    0000072c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1836
    00000731: 	movq	0x8(%rbx), %rcx
    00000735: 	movq	(%rbx), %rdx
    00000738: 	movq	%r15, %rsi
    0000073b: 	movq	%r14, %rdi
    0000073e: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1854
    00000743: 	leaq	DATAat0x53368(%rip), %rdx
    0000074a: 	movq	%r14, %rsi
    0000074d: 	movq	%r12, %rdi
    00000750: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1872
    00000755: 	movq	%r12, %rdx
    00000758: 	movq	%r13, %rsi
    0000075b: 	movq	%rbp, %rdi
    0000075e: 	callq	_Z17test_clearall_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1886
    00000763: 	movq	0x70(%rsp), %rdi
    00000768: 	cmpq	0x8(%rsp), %rdi
    0000076d: 	je	.Ltmp7285 # Offset: 1901
    0000076f: 	movq	0x80(%rsp), %rax
    00000777: 	leaq	0x1(%rax), %rsi
    0000077b: 	callq	_ZdlPvm@PLT # Offset: 1915
.Ltmp7285:
    00000780: 	movq	0x50(%rsp), %rdi
    00000785: 	cmpq	0x18(%rsp), %rdi
    0000078a: 	je	.Ltmp7286 # Offset: 1930
    0000078c: 	movq	0x60(%rsp), %rax
    00000791: 	leaq	0x1(%rax), %rsi
    00000795: 	callq	_ZdlPvm@PLT # Offset: 1941
.Ltmp7286:
    0000079a: 	movq	0x30(%rsp), %rdi
    0000079f: 	cmpq	0x10(%rsp), %rdi
    000007a4: 	je	.Ltmp7287 # Offset: 1956
    000007a6: 	movq	0x40(%rsp), %rax
    000007ab: 	leaq	0x1(%rax), %rsi
    000007af: 	callq	_ZdlPvm@PLT # Offset: 1967
.Ltmp7287:
    000007b4: 	cmpb	$0x0, 0x2c(%rsp)
    000007b9: 	jne	.Ltmp7288 # Offset: 1977
    000007bb: 	movq	0x98(%rsp), %rax
    000007c3: 	subq	%fs:0x28, %rax
    000007cc: 	jne	.Ltmp7289 # Offset: 1996
    000007ce: 	addq	$0xa8, %rsp
    000007d5: 	popq	%rbx
    000007d6: 	popq	%rbp
    000007d7: 	popq	%r12
    000007d9: 	popq	%r13
    000007db: 	popq	%r14
    000007dd: 	popq	%r15
    000007df: 	retq # Offset: 2015
.Ltmp7288:
    000007e0: 	movq	0x98(%rsp), %rax
    000007e8: 	subq	%fs:0x28, %rax
    000007f1: 	jne	.Ltmp7289 # Offset: 2033
    000007f3: 	movl	iterations(%rip), %edx
    000007f9: 	movl	0x20(%rsp), %esi
    000007fd: 	xorl	%r8d, %r8d
    00000800: 	xorl	%ecx, %ecx
    00000802: 	addq	$0xa8, %rsp
    00000809: 	leaq	DATAat0x53417(%rip), %rdi
    00000810: 	popq	%rbx
    00000811: 	popq	%rbp
    00000812: 	popq	%r12
    00000814: 	popq	%r13
    00000816: 	popq	%r14
    00000818: 	popq	%r15
    0000081a: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 2074
.Ltmp7256:
    0000081f: 	xorl	%eax, %eax
    00000821: 	xorl	%edx, %edx
    00000823: 	jmp	.Ltmp7290 # Offset: 2083
.Ltmp7289:
    00000828: 	callq	__stack_chk_fail@PLT # Offset: 2088
    0000082d: 	endbr64
    00000831: 	movq	%rax, %rbp
    00000834: 	jmp	.Ltmp7291 # Offset: 2100
    00000836: 	endbr64
    0000083a: 	movq	%rax, %rbp
    0000083d: 	jmp	.Ltmp7292 # Offset: 2109
.Ltmp7291:
    0000083f: 	movq	0x70(%rsp), %rdi
    00000844: 	cmpq	0x8(%rsp), %rdi
    00000849: 	je	.Ltmp7292 # Offset: 2121
    0000084b: 	movq	0x80(%rsp), %rax
    00000853: 	leaq	0x1(%rax), %rsi
    00000857: 	callq	_ZdlPvm@PLT # Offset: 2135
.Ltmp7292:
    0000085c: 	movq	0x50(%rsp), %rdi
    00000861: 	leaq	0x60(%rsp), %rax
    00000866: 	cmpq	%rax, %rdi
    00000869: 	je	.Ltmp7293 # Offset: 2153
    0000086b: 	movq	0x60(%rsp), %rax
    00000870: 	leaq	0x1(%rax), %rsi
    00000874: 	callq	_ZdlPvm@PLT # Offset: 2164
.Ltmp7293:
    00000879: 	movq	0x30(%rsp), %rdi
    0000087e: 	leaq	0x40(%rsp), %rax
    00000883: 	cmpq	%rax, %rdi
    00000886: 	je	.Ltmp7294 # Offset: 2182
.Ltmp7300:
    00000888: 	movq	0x40(%rsp), %rax
    0000088d: 	leaq	0x1(%rax), %rsi
    00000891: 	callq	_ZdlPvm@PLT # Offset: 2193
.Ltmp7294:
    00000896: 	movq	%rbp, %rdi
    00000899: 	callq	_Unwind_Resume@PLT # Offset: 2201
    0000089e: 	endbr64
    000008a2: 	movq	%rax, %rbp
    000008a5: 	jmp	.Ltmp7293 # Offset: 2213
    000008a7: 	endbr64
.Ltmp7296:
    000008ab: 	movq	%rax, %rbp
    000008ae: 	jmp	.Ltmp7295 # Offset: 2222
    000008b3: 	endbr64
    000008b7: 	jmp	.Ltmp7296 # Offset: 2231
    000008b9: 	endbr64
    000008bd: 	jmp	.Ltmp7296 # Offset: 2237
    000008bf: 	endbr64
    000008c3: 	jmp	.Ltmp7296 # Offset: 2243
    000008c5: 	endbr64
    000008c9: 	jmp	.Ltmp7296 # Offset: 2249
    000008cb: 	endbr64
.Ltmp7303:
    000008cf: 	movq	%rax, %rbp
    000008d2: 	jmp	.Ltmp7297 # Offset: 2258
    000008d4: 	endbr64
    000008d8: 	movq	%rax, %rbp
    000008db: 	jmp	.Ltmp7298 # Offset: 2267
    000008dd: 	endbr64
    000008e1: 	jmp	.Ltmp7296 # Offset: 2273
.Ltmp7298:
    000008e3: 	movq	0x70(%rsp), %rdi
    000008e8: 	leaq	0x80(%rsp), %rax
    000008f0: 	cmpq	%rax, %rdi
    000008f3: 	je	.Ltmp7294 # Offset: 2291
.Ltmp7302:
    000008f5: 	movq	0x80(%rsp), %rax
    000008fd: 	leaq	0x1(%rax), %rsi
    00000901: 	callq	_ZdlPvm@PLT # Offset: 2305
    00000906: 	jmp	.Ltmp7294 # Offset: 2310
.Ltmp7301:
    00000908: 	movq	0x70(%rsp), %rdi
    0000090d: 	cmpq	0x8(%rsp), %rdi
    00000912: 	je	.Ltmp7299 # Offset: 2322
    00000914: 	movq	0x80(%rsp), %rax
    0000091c: 	leaq	0x1(%rax), %rsi
    00000920: 	callq	_ZdlPvm@PLT # Offset: 2336
.Ltmp7299:
    00000925: 	movq	0x50(%rsp), %rdi
    0000092a: 	cmpq	0x18(%rsp), %rdi
    0000092f: 	je	.Ltmp7297 # Offset: 2351
    00000931: 	movq	0x60(%rsp), %rax
    00000936: 	leaq	0x1(%rax), %rsi
    0000093a: 	callq	_ZdlPvm@PLT # Offset: 2362
.Ltmp7297:
    0000093f: 	movq	0x30(%rsp), %rdi
    00000944: 	cmpq	0x10(%rsp), %rdi
    00000949: 	jne	.Ltmp7300 # Offset: 2377
    0000094f: 	jmp	.Ltmp7294 # Offset: 2383
    00000954: 	endbr64
    00000958: 	jmp	.Ltmp7296 # Offset: 2392
    0000095d: 	endbr64
    00000961: 	jmp	.Ltmp7296 # Offset: 2401
    00000966: 	endbr64
.Ltmp7304:
    0000096a: 	movq	%rax, %rbp
    0000096d: 	jmp	.Ltmp7301 # Offset: 2413
.Ltmp7295:
    0000096f: 	movq	0x70(%rsp), %rdi
    00000974: 	cmpq	0x8(%rsp), %rdi
    00000979: 	jne	.Ltmp7302 # Offset: 2425
    0000097f: 	jmp	.Ltmp7294 # Offset: 2431
    00000984: 	endbr64
    00000988: 	jmp	.Ltmp7296 # Offset: 2440
    0000098d: 	endbr64
.Ltmp7305:
    00000991: 	movq	%rax, %rbp
    00000994: 	jmp	.Ltmp7299 # Offset: 2452
    00000996: 	endbr64
    0000099a: 	jmp	.Ltmp7303 # Offset: 2458
    0000099f: 	endbr64
    000009a3: 	jmp	.Ltmp7304 # Offset: 2467
    000009a5: 	endbr64
    000009a9: 	jmp	.Ltmp7305 # Offset: 2473
    000009ab: 	endbr64
    000009af: 	jmp	.Ltmp7303 # Offset: 2479
    000009b4: 	endbr64
    000009b8: 	jmp	.Ltmp7296 # Offset: 2488
    000009bd: 	endbr64
    000009c1: 	jmp	.Ltmp7304 # Offset: 2497
    000009c3: 	endbr64
    000009c7: 	jmp	.Ltmp7296 # Offset: 2503
    000009cc: 	endbr64
    000009d0: 	jmp	.Ltmp7304 # Offset: 2512
    000009d2: 	endbr64
    000009d6: 	jmp	.Ltmp7305 # Offset: 2518
    000009d8: 	endbr64
    000009dc: 	jmp	.Ltmp7303 # Offset: 2524
    000009e1: 	endbr64
    000009e5: 	jmp	.Ltmp7304 # Offset: 2533
    000009e7: 	endbr64
    000009eb: 	jmp	.Ltmp7305 # Offset: 2539
    000009ed: 	endbr64
    000009f1: 	jmp	.Ltmp7303 # Offset: 2545
    000009f6: 	endbr64
    000009fa: 	jmp	.Ltmp7305 # Offset: 2554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12testClearAllIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z14test_erase_mapId13PooledHashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 350
  State       : disassembled
  Address     : 0x4d150
  Size        : 0xfbe
  MaxSize     : 0xfc0
  Offset      : 0x4d150
  Section     : .text
  Orc Section : .local.text._Z14test_erase_mapId13PooledHashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0349:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xc8, %rsp
    00000015: 	movq	%rsi, 0x30(%rsp)
    0000001a: 	subq	%rdi, %rsi
    0000001d: 	movq	%rdx, 0x50(%rsp)
    00000022: 	xorl	%edx, %edx
    00000024: 	movq	%rdi, 0x58(%rsp)
    00000029: 	movq	%rcx, 0x28(%rsp)
    0000002e: 	movq	%r8, 0x80(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0xb8(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movabsq	$0x500000000, %rax
    00000053: 	divq	%rsi
    00000056: 	movq	%rax, 0x38(%rsp)
    0000005b: 	cmpq	$0x3e8, %rax
    00000061: 	ja	.Ltmp7306 # Offset: 97
    00000067: 	cmpq	$0x3, %rax
    0000006b: 	ja	.Ltmp7307 # Offset: 107
    00000071: 	movq	$0x0, 0xb0(%rsp)
    0000007d: 	pxor	%xmm0, %xmm0
    00000081: 	movq	$0x4, 0x38(%rsp)
    0000008a: 	movaps	%xmm0, 0xa0(%rsp)
.Ltmp7392:
    00000092: 	movq	0x38(%rsp), %rbx
    00000097: 	leaq	0xa0(%rsp), %rdi
    0000009f: 	movq	%rbx, %rsi
    000000a2: 	callq	_ZNSt6vectorIP13PooledHashMapIddESaIS2_EE17_M_default_appendEm # Offset: 162
    000000a7: 	movl	iterations(%rip), %eax
    000000ad: 	testl	%eax, %eax
    000000af: 	jle	.Ltmp7308 # Offset: 175
    000000b5: 	movl	%ebx, 0x74(%rsp)
    000000b9: 	movq	$0x0, 0x88(%rsp)
    000000c5: 	movl	$0x0, 0x70(%rsp)
.Ltmp7356:
    000000cd: 	movslq	0x70(%rsp), %rdx
    000000d2: 	movslq	%eax, %rcx
    000000d5: 	movq	$0x0, 0x48(%rsp)
    000000de: 	movq	%rdx, %rdi
    000000e1: 	addq	0x38(%rsp), %rdx
    000000e6: 	subl	%edi, %eax
    000000e8: 	cmpq	%rcx, %rdx
    000000eb: 	cmovbl	0x74(%rsp), %eax
    000000f0: 	leal	-0x1(%rax), %esi
    000000f3: 	movl	%eax, %eax
    000000f5: 	shlq	$0x3, %rax
    000000f9: 	movq	%rsi, 0x78(%rsp)
    000000fe: 	movq	%rax, 0x60(%rsp)
.Ltmp7334:
    00000103: 	movl	$0xc8, %edi
    00000108: 	callq	_Znwm@PLT # Offset: 264
    0000010d: 	movq	$0x0, (%rax)
    00000114: 	pxor	%xmm0, %xmm0
    00000118: 	xorl	%esi, %esi
    0000011a: 	movq	%rax, %rdi
    0000011d: 	movq	$0x0, 0x8(%rax)
    00000125: 	movq	%rax, %rbp
    00000128: 	movups	%xmm0, 0x10(%rax)
    0000012c: 	movups	%xmm0, 0x20(%rax)
    00000130: 	movups	%xmm0, 0x30(%rax)
    00000134: 	movups	%xmm0, 0x40(%rax)
    00000138: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 312
    0000013d: 	movq	$0x0, 0x50(%rbp)
    00000145: 	pxor	%xmm0, %xmm0
    00000149: 	movl	$0x40, %edi
    0000014e: 	movq	$0x8, 0x58(%rbp)
    00000156: 	movups	%xmm0, 0x60(%rbp)
    0000015a: 	movups	%xmm0, 0x70(%rbp)
    0000015e: 	movups	%xmm0, 0x80(%rbp)
    00000165: 	movups	%xmm0, 0x90(%rbp)
    0000016c: 	callq	_Znwm@PLT # Offset: 364
    00000171: 	movq	0x58(%rbp), %rdx
    00000175: 	movq	%rax, 0x50(%rbp)
    00000179: 	movl	$0x200, %edi
    0000017e: 	leaq	-0x4(,%rdx,4), %rdx
    00000186: 	andq	$-0x8, %rdx
    0000018a: 	leaq	(%rax,%rdx), %rbx
    0000018e: 	callq	_Znwm@PLT # Offset: 398
    00000193: 	movq	%rax, %xmm1
    00000198: 	movq	%rax, (%rbx)
    0000019b: 	addq	$0x200, %rax
    000001a1: 	movq	%rbx, %xmm2
    000001a6: 	movq	%rax, %xmm0
    000001ab: 	punpcklqdq	%xmm1, %xmm1
    000001af: 	movq	$0x0, 0xb0(%rbp)
    000001ba: 	movq	0x58(%rsp), %rax
    000001bf: 	punpcklqdq	%xmm2, %xmm0
    000001c3: 	movups	%xmm1, 0x60(%rbp)
    000001c7: 	movups	%xmm0, 0x70(%rbp)
    000001cb: 	movups	%xmm0, 0x90(%rbp)
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	$0x0, 0xb8(%rbp)
    000001e1: 	movl	$0x3f800000, 0xc0(%rbp)
    000001eb: 	movups	%xmm1, 0x80(%rbp)
    000001f2: 	movups	%xmm0, 0xa0(%rbp)
    000001f9: 	cmpq	%rax, 0x30(%rsp)
    000001fe: 	je	.Ltmp7309 # Offset: 510
    00000204: 	leaq	0x50(%rbp), %rdi
    00000208: 	xorl	%ebx, %ebx
    0000020a: 	movq	%rax, 0x20(%rsp)
    0000020f: 	movq	%rdi, 0x68(%rsp)
    00000214: 	testq	%rbx, %rbx
    00000217: 	je	.Ltmp7310 # Offset: 535
    0000021d: 	nopl	(%rax) # Size: 3
.Ltmp7315:
    00000220: 	movq	0x20(%rsp), %rax
    00000225: 	pxor	%xmm6, %xmm6
    00000229: 	movsd	(%rax), %xmm0
    0000022d: 	movsd	%xmm0, 0x98(%rsp)
    00000236: 	ucomisd	%xmm6, %xmm0
    0000023a: 	jp	.Ltmp7311 # Offset: 570
    00000240: 	movl	$0x0, %eax
    00000245: 	jne	.Ltmp7311 # Offset: 581
.Ltmp7326:
    0000024b: 	xorl	%edx, %edx
    0000024d: 	divq	0xb0(%rbp)
    00000254: 	movq	0xb8(%rbp), %rax
    0000025b: 	movq	(%rax,%rdx,8), %rax
    0000025f: 	leaq	(,%rdx,8), %r15
    00000267: 	testq	%rax, %rax
    0000026a: 	je	.Ltmp7312 # Offset: 618
    00000270: 	movq	0x20(%rsp), %rsi
    00000275: 	movsd	(%rsi), %xmm0
    00000279: 	jmp	.Ltmp7313 # Offset: 633
    0000027b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7314:
    00000280: 	movq	0x10(%rax), %rax
    00000284: 	testq	%rax, %rax
    00000287: 	je	.Ltmp7312 # Offset: 647
.Ltmp7313:
    0000028d: 	ucomisd	(%rax), %xmm0
    00000291: 	jp	.Ltmp7314 # Offset: 657
    00000293: 	jne	.Ltmp7314 # Offset: 659
    00000295: 	addq	$0x8, %rax
.Ltmp7332:
    00000299: 	addq	$0x8, 0x20(%rsp)
    0000029f: 	movsd	%xmm0, (%rax)
    000002a3: 	movq	0x20(%rsp), %rax
    000002a8: 	cmpq	%rax, 0x30(%rsp)
    000002ad: 	je	.Ltmp7309 # Offset: 685
    000002b3: 	movq	0xa8(%rbp), %rbx
    000002ba: 	testq	%rbx, %rbx
    000002bd: 	jne	.Ltmp7315 # Offset: 701
.Ltmp7310:
    000002c3: 	movss	DATAat0x537b0(%rip), %xmm2
    000002cb: 	movss	DATAat0x537a4(%rip), %xmm0
    000002d3: 	divss	0xc0(%rbp), %xmm0
    000002db: 	movaps	%xmm0, %xmm1
    000002de: 	movss	DATAat0x5379c(%rip), %xmm3
    000002e6: 	movq	0xb0(%rbp), %rax
    000002ed: 	andps	%xmm2, %xmm1
    000002f0: 	ucomiss	%xmm1, %xmm3
    000002f3: 	movq	%rax, 0x10(%rsp)
    000002f8: 	jbe	.Ltmp7316 # Offset: 760
    000002fa: 	cvttss2si	%xmm0, %eax
    000002fe: 	pxor	%xmm1, %xmm1
    00000302: 	movaps	%xmm0, %xmm3
    00000305: 	movss	DATAat0x53798(%rip), %xmm6
    0000030d: 	andnps	%xmm0, %xmm2
    00000310: 	cvtsi2ss	%eax, %xmm1
    00000314: 	cmpnless	%xmm1, %xmm3
    00000319: 	andps	%xmm6, %xmm3
    0000031c: 	addss	%xmm3, %xmm1
    00000320: 	orps	%xmm2, %xmm1
    00000323: 	movaps	%xmm1, %xmm0
.Ltmp7316:
    00000326: 	comiss	DATAat0x537a0(%rip), %xmm0
    0000032d: 	jae	.Ltmp7317 # Offset: 813
    00000333: 	cvttss2si	%xmm0, %rax
.Ltmp7333:
    00000338: 	movl	$0x8, %edx
    0000033d: 	movq	0x10(%rsp), %r15
    00000342: 	movq	$0x8, 0xb0(%rbp)
    0000034d: 	cmpq	%rdx, %rax
    00000350: 	cmovbq	%rdx, %rax
    00000354: 	movq	%rax, %rdx
    00000357: 	shrq	%rdx
    0000035a: 	addq	%rdx, %rax
    0000035d: 	movq	%rax, 0xa8(%rbp)
    00000364: 	cmpq	$0x8, %r15
    00000368: 	je	.Ltmp7315 # Offset: 872
    0000036e: 	movl	$0x40, %edi
    00000373: 	callq	_Znam@PLT # Offset: 883
    00000378: 	pxor	%xmm0, %xmm0
    0000037c: 	movq	%rax, %r14
    0000037f: 	movups	%xmm0, (%rax)
    00000382: 	movups	%xmm0, 0x10(%rax)
    00000386: 	movups	%xmm0, 0x20(%rax)
    0000038a: 	movups	%xmm0, 0x30(%rax)
    0000038e: 	movq	0xb8(%rbp), %rax
    00000395: 	movq	%rax, (%rsp)
    00000399: 	testq	%r15, %r15
    0000039c: 	je	.Ltmp7318 # Offset: 924
    000003a2: 	movl	$0xc70f6907, %r12d
    000003a8: 	movq	%r14, %r15
    000003ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7324:
    000003b0: 	movq	(%rsp), %rax
    000003b4: 	movq	(%rax,%rbx,8), %r13
    000003b8: 	testq	%r13, %r13
    000003bb: 	jne	.Ltmp7319 # Offset: 955
    000003bd: 	jmp	.Ltmp7320 # Offset: 957
    000003bf: 	nop # Size: 1
.Ltmp7322:
    000003c0: 	movq	(%r15), %rax
    000003c3: 	movq	%rax, 0x10(%r13)
    000003c7: 	movq	%r13, (%r15)
    000003ca: 	testq	%r14, %r14
    000003cd: 	je	.Ltmp7320 # Offset: 973
.Ltmp7323:
    000003cf: 	movq	%r14, %r13
.Ltmp7319:
    000003d2: 	movsd	(%r13), %xmm0
    000003d8: 	pxor	%xmm4, %xmm4
    000003dc: 	movq	0x10(%r13), %r14
    000003e0: 	movsd	%xmm0, 0x98(%rsp)
    000003e9: 	ucomisd	%xmm4, %xmm0
    000003ed: 	jp	.Ltmp7321 # Offset: 1005
    000003ef: 	je	.Ltmp7322 # Offset: 1007
.Ltmp7321:
    000003f1: 	movq	%r12, %rdx
    000003f4: 	leaq	0x98(%rsp), %rdi
    000003fc: 	movl	$0x8, %esi
    00000401: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1025
    00000406: 	xorl	%edx, %edx
    00000408: 	divq	0xb0(%rbp)
    0000040f: 	leaq	(%r15,%rdx,8), %rax
    00000413: 	movq	(%rax), %rdx
    00000416: 	movq	%rdx, 0x10(%r13)
    0000041a: 	movq	%r13, (%rax)
    0000041d: 	testq	%r14, %r14
    00000420: 	jne	.Ltmp7323 # Offset: 1056
.Ltmp7320:
    00000422: 	addq	$0x1, %rbx
    00000426: 	cmpq	%rbx, 0x10(%rsp)
    0000042b: 	jne	.Ltmp7324 # Offset: 1067
    0000042d: 	movq	0xb8(%rbp), %rax
    00000434: 	movq	%r15, %r14
    00000437: 	movq	%rax, (%rsp)
.Ltmp7318:
    0000043b: 	movq	(%rsp), %rax
    0000043f: 	testq	%rax, %rax
    00000442: 	je	.Ltmp7325 # Offset: 1090
    00000444: 	movq	%rax, %rdi
    00000447: 	callq	_ZdaPv@PLT # Offset: 1095
.Ltmp7325:
    0000044c: 	movq	%r14, 0xb8(%rbp)
    00000453: 	jmp	.Ltmp7315 # Offset: 1107
    00000458: 	nopl	(%rax,%rax) # Size: 8
.Ltmp7311:
    00000460: 	leaq	0x98(%rsp), %rdi
    00000468: 	movl	$0xc70f6907, %edx
    0000046d: 	movl	$0x8, %esi
    00000472: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1138
    00000477: 	jmp	.Ltmp7326 # Offset: 1143
    0000047c: 	nopl	(%rax) # Size: 4
.Ltmp7312:
    00000480: 	movq	0x48(%rbp), %rdx
    00000484: 	movq	0x30(%rbp), %rdi
    00000488: 	movq	0x38(%rbp), %rcx
    0000048c: 	movq	%rdx, %rax
    0000048f: 	subq	0x28(%rbp), %rax
    00000493: 	movq	%rdi, %rsi
    00000496: 	sarq	$0x3, %rax
    0000049a: 	cmpq	$0x1, %rdx
    0000049e: 	adcq	$-0x1, %rax
    000004a2: 	subq	%rcx, %rsi
    000004a5: 	sarq	$0x3, %rsi
    000004a9: 	shlq	$0x6, %rax
    000004ad: 	addq	%rsi, %rax
    000004b0: 	movq	0x20(%rbp), %rsi
    000004b4: 	subq	0x10(%rbp), %rsi
    000004b8: 	sarq	$0x3, %rsi
    000004bc: 	addq	%rsi, %rax
    000004bf: 	je	.Ltmp7327 # Offset: 1215
.Ltmp7399:
    000004c5: 	cmpq	%rcx, %rdi
    000004c8: 	je	.Ltmp7328 # Offset: 1224
    000004ce: 	movq	-0x8(%rdi), %rbx
    000004d2: 	subq	$0x8, %rdi
    000004d6: 	movq	%rdi, 0x30(%rbp)
.Ltmp7390:
    000004da: 	movq	0x60(%rbp), %rcx
    000004de: 	movq	0x78(%rbp), %rdx
    000004e2: 	movq	%rcx, %rax
    000004e5: 	subq	0x68(%rbp), %rax
    000004e9: 	sarq	$0x5, %rax
    000004ed: 	addq	%rbx, %rax
    000004f0: 	js	.Ltmp7329 # Offset: 1264
    000004f6: 	cmpq	$0xf, %rax
    000004fa: 	jg	.Ltmp7330 # Offset: 1274
    00000500: 	movq	%rbx, %rax
    00000503: 	shlq	$0x5, %rax
    00000507: 	addq	%rcx, %rax
    0000050a: 	movq	%rax, (%rsp)
    0000050e: 	movq	%rax, %rsi
    00000511: 	movq	%rbx, 0x18(%rax)
.Ltmp7371:
    00000515: 	movq	0x20(%rsp), %rax
    0000051a: 	movq	0xa8(%rbp), %rbx
    00000521: 	movsd	(%rax), %xmm0
    00000525: 	movq	0xb8(%rbp), %rax
    0000052c: 	movq	$0x0, 0x8(%rsi)
    00000534: 	addq	%r15, %rax
    00000537: 	movsd	%xmm0, (%rsi)
    0000053b: 	movq	(%rax), %rdx
    0000053e: 	movq	%rdx, 0x10(%rsi)
    00000542: 	movq	%rsi, (%rax)
    00000545: 	movq	0xa0(%rbp), %rax
    0000054c: 	addq	$0x1, %rax
    00000550: 	movq	%rax, 0xa0(%rbp)
    00000557: 	cmpq	%rbx, %rax
    0000055a: 	ja	.Ltmp7331 # Offset: 1370
.Ltmp7376:
    00000560: 	movq	(%rsp), %rax
    00000564: 	movq	0x20(%rsp), %rdi
    00000569: 	addq	$0x8, %rax
    0000056d: 	movsd	(%rdi), %xmm0
    00000571: 	jmp	.Ltmp7332 # Offset: 1393
.Ltmp7317:
    00000576: 	subss	DATAat0x537a0(%rip), %xmm0
    0000057e: 	cvttss2si	%xmm0, %rax
    00000583: 	btcq	$0x3f, %rax
    00000588: 	jmp	.Ltmp7333 # Offset: 1416
.Ltmp7309:
    0000058d: 	movq	0x48(%rsp), %rax
    00000592: 	movq	0xa0(%rsp), %rdi
    0000059a: 	movq	%rbp, (%rdi,%rax)
    0000059e: 	addq	$0x8, %rax
    000005a2: 	movq	%rdi, (%rsp)
    000005a6: 	movq	%rax, 0x48(%rsp)
    000005ab: 	cmpq	%rax, 0x60(%rsp)
    000005b0: 	jne	.Ltmp7334 # Offset: 1456
    000005b6: 	callq	clock@PLT # Offset: 1462
    000005bb: 	movq	(%rsp), %r14
    000005bf: 	movl	$0xc70f6907, %r15d
    000005c5: 	movq	%rax, start_time(%rip)
    000005cc: 	movq	0x78(%rsp), %rax
    000005d1: 	movq	%r14, %r13
    000005d4: 	leaq	0x8(%r14,%rax,8), %rax
    000005d9: 	movq	%rax, 0x20(%rsp)
    000005de: 	nop # Size: 2
.Ltmp7346:
    000005e0: 	movq	0x50(%rsp), %rax
    000005e5: 	movq	0x28(%rsp), %rdi
    000005ea: 	movq	(%r14), %rbp
    000005ed: 	movq	%rax, %r12
    000005f0: 	cmpq	%rdi, %rax
    000005f3: 	je	.Ltmp7335 # Offset: 1523
    000005f9: 	nopl	(%rax) # Size: 7
.Ltmp7345:
    00000600: 	addq	$0x8, %r12
    00000604: 	cmpq	$0x0, 0xb0(%rbp)
    0000060c: 	jne	.Ltmp7336 # Offset: 1548
    00000612: 	movq	0xb8(%rbp), %rdx
    00000619: 	xorl	%ebx, %ebx
    0000061b: 	movq	(%rdx), %rsi
.Ltmp7363:
    0000061e: 	movq	%rsi, %rax
    00000621: 	jmp	.Ltmp7337 # Offset: 1569
    00000623: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7339:
    00000628: 	movq	0x10(%rax), %rcx
    0000062c: 	cmpq	%rbx, %rcx
    0000062f: 	je	.Ltmp7338 # Offset: 1583
    00000635: 	movq	%rcx, %rax
.Ltmp7337:
    00000638: 	testq	%rax, %rax
    0000063b: 	jne	.Ltmp7339 # Offset: 1595
    0000063d: 	xorl	%ecx, %ecx
    0000063f: 	testq	%rbx, %rbx
    00000642: 	je	.Ltmp7340 # Offset: 1602
    00000644: 	movq	0x10(%rbx), %rcx
.Ltmp7340:
    00000648: 	cmpq	%rsi, %rbx
    0000064b: 	je	.Ltmp7341 # Offset: 1611
.Ltmp7366:
    00000651: 	movq	0x40(%rbp), %rsi
    00000655: 	movq	0x30(%rbp), %rax
    00000659: 	leaq	-0x8(%rsi), %rdx
    0000065d: 	cmpq	%rdx, %rax
    00000660: 	je	.Ltmp7342 # Offset: 1632
    00000666: 	movq	0x18(%rbx), %rdx
    0000066a: 	addq	$0x8, %rax
    0000066e: 	movq	%rdx, -0x8(%rax)
    00000672: 	movq	%rax, 0x30(%rbp)
.Ltmp7369:
    00000676: 	movq	0x60(%rbp), %rsi
    0000067a: 	movq	0x18(%rbx), %rdx
    0000067e: 	movq	0x78(%rbp), %rcx
    00000682: 	movq	%rsi, %rax
    00000685: 	subq	0x68(%rbp), %rax
    00000689: 	sarq	$0x5, %rax
    0000068d: 	addq	%rdx, %rax
    00000690: 	js	.Ltmp7343 # Offset: 1680
    00000696: 	cmpq	$0xf, %rax
    0000069a: 	jg	.Ltmp7344 # Offset: 1690
    000006a0: 	shlq	$0x5, %rdx
    000006a4: 	leaq	(%rsi,%rdx), %rax
.Ltmp7367:
    000006a8: 	movq	$-0x1, 0x18(%rax)
    000006b0: 	subq	$0x1, 0xa0(%rbp)
    000006b8: 	cmpq	%r12, 0x28(%rsp)
    000006bd: 	jne	.Ltmp7345 # Offset: 1725
.Ltmp7335:
    000006c3: 	addq	$0x8, %r14
    000006c7: 	cmpq	0x20(%rsp), %r14
    000006cc: 	jne	.Ltmp7346 # Offset: 1740
    000006d2: 	callq	clock@PLT # Offset: 1746
    000006d7: 	pxor	%xmm0, %xmm0
    000006db: 	movq	0x20(%rsp), %r14
    000006e0: 	movq	%rax, end_time(%rip)
    000006e7: 	subq	start_time(%rip), %rax
    000006ee: 	cvtsi2sd	%rax, %xmm0
    000006f3: 	divsd	DATAat0x53788(%rip), %xmm0
    000006fb: 	addsd	0x88(%rsp), %xmm0
    00000704: 	movsd	%xmm0, 0x88(%rsp)
    0000070d: 	nopl	(%rax) # Size: 3
.Ltmp7355:
    00000710: 	movq	(%r13), %rbp
    00000714: 	testq	%rbp, %rbp
    00000717: 	je	.Ltmp7347 # Offset: 1815
    0000071d: 	movq	0xb8(%rbp), %rdi
    00000724: 	testq	%rdi, %rdi
    00000727: 	je	.Ltmp7348 # Offset: 1831
    00000729: 	callq	_ZdaPv@PLT # Offset: 1833
.Ltmp7348:
    0000072e: 	movq	0x50(%rbp), %rdi
    00000732: 	testq	%rdi, %rdi
    00000735: 	je	.Ltmp7349 # Offset: 1845
    00000737: 	movq	0x98(%rbp), %rax
    0000073e: 	movq	0x78(%rbp), %rbx
    00000742: 	leaq	0x8(%rax), %r12
    00000746: 	cmpq	%rbx, %r12
    00000749: 	jbe	.Ltmp7350 # Offset: 1865
    0000074b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7351:
    00000750: 	movq	(%rbx), %rdi
    00000753: 	movl	$0x200, %esi
    00000758: 	addq	$0x8, %rbx
    0000075c: 	callq	_ZdlPvm@PLT # Offset: 1884
    00000761: 	cmpq	%rbx, %r12
    00000764: 	ja	.Ltmp7351 # Offset: 1892
    00000766: 	movq	0x50(%rbp), %rdi
.Ltmp7350:
    0000076a: 	movq	0x58(%rbp), %rax
    0000076e: 	leaq	(,%rax,8), %rsi
    00000776: 	callq	_ZdlPvm@PLT # Offset: 1910
.Ltmp7349:
    0000077b: 	movq	(%rbp), %rdi
    0000077f: 	testq	%rdi, %rdi
    00000782: 	je	.Ltmp7352 # Offset: 1922
    00000784: 	movq	0x48(%rbp), %rax
    00000788: 	movq	0x28(%rbp), %rbx
    0000078c: 	leaq	0x8(%rax), %r12
    00000790: 	cmpq	%rbx, %r12
    00000793: 	jbe	.Ltmp7353 # Offset: 1939
    00000795: 	nopl	(%rax) # Size: 3
.Ltmp7354:
    00000798: 	movq	(%rbx), %rdi
    0000079b: 	movl	$0x200, %esi
    000007a0: 	addq	$0x8, %rbx
    000007a4: 	callq	_ZdlPvm@PLT # Offset: 1956
    000007a9: 	cmpq	%rbx, %r12
    000007ac: 	ja	.Ltmp7354 # Offset: 1964
    000007ae: 	movq	(%rbp), %rdi
.Ltmp7353:
    000007b2: 	movq	0x8(%rbp), %rax
    000007b6: 	leaq	(,%rax,8), %rsi
    000007be: 	callq	_ZdlPvm@PLT # Offset: 1982
.Ltmp7352:
    000007c3: 	movl	$0xc8, %esi
    000007c8: 	movq	%rbp, %rdi
    000007cb: 	callq	_ZdlPvm@PLT # Offset: 1995
.Ltmp7347:
    000007d0: 	movq	$0x0, (%r13)
    000007d8: 	addq	$0x8, %r13
    000007dc: 	cmpq	%r14, %r13
    000007df: 	jne	.Ltmp7355 # Offset: 2015
    000007e5: 	movl	0x38(%rsp), %esi
    000007e9: 	movl	iterations(%rip), %eax
    000007ef: 	addl	%esi, 0x70(%rsp)
    000007f3: 	movl	0x70(%rsp), %edi
    000007f7: 	cmpl	%edi, %eax
    000007f9: 	jg	.Ltmp7356 # Offset: 2041
.Ltmp7407:
    000007ff: 	movq	0x80(%rsp), %rdi
    00000807: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2055
    0000080c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000813: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000081a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000821: 	je	.Ltmp7357 # Offset: 2081
.Ltmp7406:
    00000827: 	movsd	0x88(%rsp), %xmm0
    00000830: 	movq	-0x20(%rax), %rdi
    00000834: 	callq	_Z13record_resultdPKc # Offset: 2100
    00000839: 	cmpq	$0x0, (%rsp)
    0000083e: 	je	.Ltmp7358 # Offset: 2110
    00000844: 	movq	0xb8(%rsp), %rax
    0000084c: 	subq	%fs:0x28, %rax
    00000855: 	jne	.Ltmp7359 # Offset: 2133
    0000085b: 	movq	0xb0(%rsp), %rsi
    00000863: 	movq	(%rsp), %rdi
    00000867: 	addq	$0xc8, %rsp
    0000086e: 	popq	%rbx
    0000086f: 	popq	%rbp
    00000870: 	subq	%rdi, %rsi
    00000873: 	popq	%r12
    00000875: 	popq	%r13
    00000877: 	popq	%r14
    00000879: 	popq	%r15
    0000087b: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 2171
.Ltmp7336:
    00000880: 	movsd	-0x8(%r12), %xmm0
    00000887: 	pxor	%xmm7, %xmm7
    0000088b: 	movsd	%xmm0, 0x98(%rsp)
    00000894: 	ucomisd	%xmm7, %xmm0
    00000898: 	jp	.Ltmp7360 # Offset: 2200
    0000089e: 	movl	$0x0, %edx
    000008a3: 	jne	.Ltmp7360 # Offset: 2211
    000008a9: 	addq	0xb8(%rbp), %rdx
    000008b0: 	movq	(%rdx), %rsi
    000008b3: 	testq	%rsi, %rsi
    000008b6: 	je	.Ltmp7361 # Offset: 2230
.Ltmp7370:
    000008bc: 	movsd	-0x8(%r12), %xmm0
    000008c3: 	movq	%rsi, %rbx
    000008c6: 	jmp	.Ltmp7362 # Offset: 2246
    000008c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp7364:
    000008d0: 	movq	0x10(%rbx), %rbx
    000008d4: 	testq	%rbx, %rbx
    000008d7: 	je	.Ltmp7363 # Offset: 2263
.Ltmp7362:
    000008dd: 	ucomisd	(%rbx), %xmm0
    000008e1: 	jp	.Ltmp7364 # Offset: 2273
    000008e3: 	jne	.Ltmp7364 # Offset: 2275
    000008e5: 	jmp	.Ltmp7363 # Offset: 2277
    000008ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7338:
    000008f0: 	xorl	%ecx, %ecx
    000008f2: 	testq	%rbx, %rbx
    000008f5: 	je	.Ltmp7365 # Offset: 2293
    000008f7: 	movq	0x10(%rbx), %rcx
    000008fb: 	cmpq	%rbx, %rax
    000008fe: 	je	.Ltmp7340 # Offset: 2302
.Ltmp7365:
    00000904: 	movq	%rcx, 0x10(%rax)
    00000908: 	movq	(%rdx), %rsi
    0000090b: 	cmpq	%rsi, %rbx
    0000090e: 	jne	.Ltmp7366 # Offset: 2318
.Ltmp7341:
    00000914: 	movq	%rcx, (%rdx)
    00000917: 	jmp	.Ltmp7366 # Offset: 2327
    0000091c: 	nopl	(%rax) # Size: 4
.Ltmp7344:
    00000920: 	movq	%rax, %rdx
    00000923: 	sarq	$0x4, %rdx
.Ltmp7368:
    00000927: 	movq	%rdx, %rsi
    0000092a: 	shlq	$0x4, %rsi
    0000092e: 	subq	%rsi, %rax
    00000931: 	shlq	$0x5, %rax
    00000935: 	addq	(%rcx,%rdx,8), %rax
    00000939: 	jmp	.Ltmp7367 # Offset: 2361
    0000093e: 	nop # Size: 2
.Ltmp7343:
    00000940: 	movq	%rax, %rdx
    00000943: 	notq	%rdx
    00000946: 	shrq	$0x4, %rdx
    0000094a: 	notq	%rdx
    0000094d: 	jmp	.Ltmp7368 # Offset: 2381
    0000094f: 	nop # Size: 1
.Ltmp7342:
    00000950: 	leaq	0x18(%rbx), %rsi
    00000954: 	movq	%rbp, %rdi
    00000957: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 2391
    0000095c: 	jmp	.Ltmp7369 # Offset: 2396
    00000961: 	nopl	(%rax) # Size: 7
.Ltmp7360:
    00000968: 	movq	%r15, %rdx
    0000096b: 	movl	$0x8, %esi
    00000970: 	leaq	0x98(%rsp), %rdi
    00000978: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 2424
    0000097d: 	xorl	%edx, %edx
    0000097f: 	divq	0xb0(%rbp)
    00000986: 	shlq	$0x3, %rdx
    0000098a: 	addq	0xb8(%rbp), %rdx
    00000991: 	movq	(%rdx), %rsi
    00000994: 	testq	%rsi, %rsi
    00000997: 	jne	.Ltmp7370 # Offset: 2455
.Ltmp7361:
    0000099d: 	xorl	%ebx, %ebx
    0000099f: 	jmp	.Ltmp7363 # Offset: 2463
.Ltmp7330:
    000009a4: 	movq	%rax, %rcx
    000009a7: 	andl	$0xf, %eax
    000009aa: 	sarq	$0x4, %rcx
.Ltmp7391:
    000009ae: 	shlq	$0x5, %rax
    000009b2: 	addq	(%rdx,%rcx,8), %rax
    000009b6: 	movq	%rax, (%rsp)
    000009ba: 	movq	%rax, %rsi
    000009bd: 	movq	%rbx, 0x18(%rax)
    000009c1: 	jmp	.Ltmp7371 # Offset: 2497
.Ltmp7331:
    000009c6: 	movq	0xb0(%rbp), %r13
    000009cd: 	movss	0xc0(%rbp), %xmm1
    000009d5: 	testq	%rbx, %rbx
    000009d8: 	je	.Ltmp7372 # Offset: 2520
    000009de: 	js	.Ltmp7373 # Offset: 2526
    000009e4: 	pxor	%xmm0, %xmm0
    000009e8: 	cvtsi2ss	%rbx, %xmm0
.Ltmp7402:
    000009ed: 	divss	%xmm1, %xmm0
    000009f1: 	movss	DATAat0x537b0(%rip), %xmm2
    000009f9: 	movss	DATAat0x5379c(%rip), %xmm3
    00000a01: 	movaps	%xmm0, %xmm1
    00000a04: 	andps	%xmm2, %xmm1
    00000a07: 	ucomiss	%xmm1, %xmm3
    00000a0a: 	jbe	.Ltmp7374 # Offset: 2570
    00000a0c: 	cvttss2si	%xmm0, %eax
    00000a10: 	pxor	%xmm1, %xmm1
    00000a14: 	movaps	%xmm0, %xmm3
    00000a17: 	movss	DATAat0x53798(%rip), %xmm7
    00000a1f: 	andnps	%xmm0, %xmm2
    00000a22: 	cvtsi2ss	%eax, %xmm1
    00000a26: 	cmpnless	%xmm1, %xmm3
    00000a2b: 	andps	%xmm7, %xmm3
    00000a2e: 	addss	%xmm3, %xmm1
    00000a32: 	orps	%xmm2, %xmm1
    00000a35: 	movaps	%xmm1, %xmm0
.Ltmp7374:
    00000a38: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000a3f: 	jae	.Ltmp7375 # Offset: 2623
    00000a45: 	cvttss2si	%xmm0, %rax
.Ltmp7401:
    00000a4a: 	movl	$0x8, %edx
    00000a4f: 	movq	%rbx, %xmm3
    00000a54: 	cmpq	%rdx, %rax
    00000a57: 	cmovbq	%rdx, %rax
    00000a5b: 	movq	%rax, %rdx
    00000a5e: 	shrq	%rdx
    00000a61: 	addq	%rax, %rdx
    00000a64: 	movq	%rdx, %xmm0
    00000a69: 	punpcklqdq	%xmm3, %xmm0
    00000a6d: 	movups	%xmm0, 0xa8(%rbp)
    00000a74: 	cmpq	%r13, %rbx
    00000a77: 	je	.Ltmp7376 # Offset: 2679
    00000a7d: 	movq	%rbx, %rax
    00000a80: 	shrq	$0x3c, %rax
    00000a84: 	jne	.Ltmp7377 # Offset: 2692
    00000a8a: 	leaq	(,%rbx,8), %rdi
.Ltmp7395:
    00000a92: 	callq	_Znam@PLT # Offset: 2706
    00000a97: 	leaq	(,%rbx,8), %rdx
    00000a9f: 	xorl	%esi, %esi
    00000aa1: 	movq	%rax, %rdi
    00000aa4: 	movq	%rax, %r15
    00000aa7: 	callq	memset@PLT # Offset: 2727
    00000aac: 	movq	0xb8(%rbp), %rax
    00000ab3: 	movq	%rax, 0x10(%rsp)
    00000ab8: 	testq	%r13, %r13
    00000abb: 	je	.Ltmp7378 # Offset: 2747
    00000ac1: 	movq	%r13, 0x40(%rsp)
    00000ac6: 	xorl	%r14d, %r14d
    00000ac9: 	movl	$0xc70f6907, %r12d
    00000acf: 	nop # Size: 1
.Ltmp7384:
    00000ad0: 	movq	0x10(%rsp), %rax
    00000ad5: 	movq	(%rax,%r14,8), %rbx
    00000ad9: 	testq	%rbx, %rbx
    00000adc: 	jne	.Ltmp7379 # Offset: 2780
    00000ade: 	jmp	.Ltmp7380 # Offset: 2782
.Ltmp7382:
    00000ae0: 	movq	(%r15), %rax
    00000ae3: 	movq	%rax, 0x10(%rbx)
    00000ae7: 	movq	%rbx, (%r15)
    00000aea: 	testq	%r13, %r13
    00000aed: 	je	.Ltmp7380 # Offset: 2797
.Ltmp7383:
    00000aef: 	movq	%r13, %rbx
.Ltmp7379:
    00000af2: 	movsd	(%rbx), %xmm0
    00000af6: 	pxor	%xmm5, %xmm5
    00000afa: 	movq	0x10(%rbx), %r13
    00000afe: 	movsd	%xmm0, 0x98(%rsp)
    00000b07: 	ucomisd	%xmm5, %xmm0
    00000b0b: 	jp	.Ltmp7381 # Offset: 2827
    00000b0d: 	je	.Ltmp7382 # Offset: 2829
.Ltmp7381:
    00000b0f: 	movq	%r12, %rdx
    00000b12: 	leaq	0x98(%rsp), %rdi
    00000b1a: 	movl	$0x8, %esi
    00000b1f: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 2847
    00000b24: 	xorl	%edx, %edx
    00000b26: 	divq	0xb0(%rbp)
    00000b2d: 	leaq	(%r15,%rdx,8), %rax
    00000b31: 	movq	(%rax), %rdx
    00000b34: 	movq	%rdx, 0x10(%rbx)
    00000b38: 	movq	%rbx, (%rax)
    00000b3b: 	testq	%r13, %r13
    00000b3e: 	jne	.Ltmp7383 # Offset: 2878
.Ltmp7380:
    00000b40: 	addq	$0x1, %r14
    00000b44: 	cmpq	%r14, 0x40(%rsp)
    00000b49: 	jne	.Ltmp7384 # Offset: 2889
    00000b4b: 	movq	0xb8(%rbp), %rax
    00000b52: 	movq	%rax, 0x10(%rsp)
.Ltmp7378:
    00000b57: 	testq	%rax, %rax
    00000b5a: 	je	.Ltmp7385 # Offset: 2906
    00000b5c: 	movq	%rax, %rdi
    00000b5f: 	callq	_ZdaPv@PLT # Offset: 2911
.Ltmp7385:
    00000b64: 	movq	%r15, 0xb8(%rbp)
    00000b6b: 	jmp	.Ltmp7376 # Offset: 2923
.Ltmp7327:
    00000b70: 	movq	0x98(%rbp), %r8
    00000b77: 	movq	0x78(%rbp), %rax
    00000b7b: 	movq	0x70(%rbp), %rsi
    00000b7f: 	movq	0x80(%rbp), %r12
    00000b86: 	movq	%r8, %r10
    00000b89: 	movq	0x60(%rbp), %r9
    00000b8d: 	subq	%rax, %r10
    00000b90: 	sarq	$0x3, %r10
    00000b94: 	cmpq	$0x1, %r8
    00000b98: 	adcq	$-0x1, %r10
    00000b9c: 	subq	0x88(%rbp), %r12
    00000ba3: 	shlq	$0x4, %r10
    00000ba7: 	sarq	$0x5, %r12
    00000bab: 	addq	%r10, %r12
    00000bae: 	movq	%rsi, %r10
    00000bb1: 	subq	%r9, %r10
    00000bb4: 	sarq	$0x5, %r10
    00000bb8: 	addq	%r10, %r12
    00000bbb: 	leaq	0x80(%r12), %rbx
    00000bc3: 	cmpq	%rbx, %r12
    00000bc6: 	jb	.Ltmp7386 # Offset: 3014
    00000bcc: 	movq	0x68(%rbp), %r11
    00000bd0: 	movq	%r9, %r10
    00000bd3: 	subq	%r11, %r10
    00000bd6: 	sarq	$0x5, %r10
    00000bda: 	addq	%rbx, %r10
    00000bdd: 	js	.Ltmp7387 # Offset: 3037
    00000be3: 	cmpq	$0xf, %r10
    00000be7: 	jg	.Ltmp7388 # Offset: 3047
    00000bed: 	shlq	$0x5, %rbx
    00000bf1: 	addq	%rbx, %r9
    00000bf4: 	jmp	.Ltmp7389 # Offset: 3060
    00000bf9: 	nopl	(%rax) # Size: 7
.Ltmp7328:
    00000c00: 	movq	-0x8(%rdx), %rax
    00000c04: 	movl	$0x200, %esi
    00000c09: 	movq	0x1f8(%rax), %rbx
    00000c10: 	callq	_ZdlPvm@PLT # Offset: 3088
    00000c15: 	movq	0x48(%rbp), %rdx
    00000c19: 	movq	-0x8(%rdx), %rax
    00000c1d: 	subq	$0x8, %rdx
    00000c21: 	leaq	0x1f8(%rax), %rdi
    00000c28: 	movq	%rax, %xmm3
    00000c2d: 	addq	$0x200, %rax
    00000c33: 	movq	%rdi, %xmm0
    00000c38: 	punpcklqdq	%xmm3, %xmm0
    00000c3c: 	movq	%rdx, %xmm3
    00000c41: 	movups	%xmm0, 0x30(%rbp)
    00000c45: 	movq	%rax, %xmm0
    00000c4a: 	punpcklqdq	%xmm3, %xmm0
    00000c4e: 	movups	%xmm0, 0x40(%rbp)
    00000c52: 	jmp	.Ltmp7390 # Offset: 3154
.Ltmp7329:
    00000c57: 	movq	%rax, %rcx
    00000c5a: 	notq	%rcx
    00000c5d: 	shrq	$0x4, %rcx
    00000c61: 	notq	%rcx
    00000c64: 	movq	%rcx, %rsi
    00000c67: 	shlq	$0x4, %rsi
    00000c6b: 	subq	%rsi, %rax
    00000c6e: 	jmp	.Ltmp7391 # Offset: 3182
.Ltmp7306:
    00000c73: 	movq	$0x3e8, 0x38(%rsp)
.Ltmp7307:
    00000c7c: 	movq	$0x0, 0xb0(%rsp)
    00000c88: 	pxor	%xmm0, %xmm0
    00000c8c: 	movaps	%xmm0, 0xa0(%rsp)
    00000c94: 	jmp	.Ltmp7392 # Offset: 3220
.Ltmp7372:
    00000c99: 	movss	DATAat0x537a4(%rip), %xmm0
    00000ca1: 	movss	DATAat0x5379c(%rip), %xmm2
    00000ca9: 	divss	%xmm1, %xmm0
    00000cad: 	movss	DATAat0x537b0(%rip), %xmm1
    00000cb5: 	andps	%xmm0, %xmm1
    00000cb8: 	ucomiss	%xmm1, %xmm2
    00000cbb: 	jbe	.Ltmp7393 # Offset: 3259
    00000cbd: 	cvttss2si	%xmm0, %eax
    00000cc1: 	pxor	%xmm1, %xmm1
    00000cc5: 	movaps	%xmm0, %xmm2
    00000cc8: 	movss	DATAat0x53798(%rip), %xmm7
    00000cd0: 	cvtsi2ss	%eax, %xmm1
    00000cd4: 	cmpnless	%xmm1, %xmm2
    00000cd9: 	andps	%xmm7, %xmm2
    00000cdc: 	addss	%xmm2, %xmm1
    00000ce0: 	movss	DATAat0x537b0(%rip), %xmm2
    00000ce8: 	andnps	%xmm0, %xmm2
    00000ceb: 	orps	%xmm2, %xmm1
    00000cee: 	movaps	%xmm1, %xmm0
.Ltmp7393:
    00000cf1: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000cf8: 	jae	.Ltmp7394 # Offset: 3320
    00000cfe: 	cvttss2si	%xmm0, %rax
.Ltmp7400:
    00000d03: 	movq	$0x8, 0xb0(%rbp)
    00000d0e: 	movl	$0x8, %edx
    00000d13: 	cmpq	%rdx, %rax
    00000d16: 	cmovbq	%rdx, %rax
    00000d1a: 	movq	%rax, %rdx
    00000d1d: 	shrq	%rdx
    00000d20: 	addq	%rdx, %rax
    00000d23: 	movq	%rax, 0xa8(%rbp)
    00000d2a: 	cmpq	$0x8, %r13
    00000d2e: 	je	.Ltmp7376 # Offset: 3374
    00000d34: 	movl	$0x40, %edi
    00000d39: 	movl	$0x8, %ebx
    00000d3e: 	jmp	.Ltmp7395 # Offset: 3390
.Ltmp7386:
    00000d43: 	movq	0x68(%rsp), %rdi
    00000d48: 	movl	$0x80, %esi
    00000d4d: 	callq	"_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 3405
    00000d52: 	movq	0x30(%rbp), %rdi
    00000d56: 	leaq	0x98(%rsp), %r14
    00000d5e: 	jmp	.Ltmp7396 # Offset: 3422
.Ltmp7398:
    00000d60: 	movq	%rbx, (%rdi)
    00000d63: 	addq	$0x8, %rdi
    00000d67: 	movq	%rdi, 0x30(%rbp)
    00000d6b: 	cmpq	%rbx, %r12
    00000d6e: 	je	.Ltmp7397 # Offset: 3438
.Ltmp7396:
    00000d70: 	movq	0x40(%rbp), %rax
    00000d74: 	subq	$0x1, %rbx
    00000d78: 	movq	%rbx, 0x98(%rsp)
    00000d80: 	subq	$0x8, %rax
    00000d84: 	cmpq	%rax, %rdi
    00000d87: 	jne	.Ltmp7398 # Offset: 3463
    00000d89: 	movq	%r14, %rsi
    00000d8c: 	movq	%rbp, %rdi
    00000d8f: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 3471
    00000d94: 	movq	0x30(%rbp), %rdi
    00000d98: 	cmpq	%rbx, %r12
    00000d9b: 	jne	.Ltmp7396 # Offset: 3483
.Ltmp7397:
    00000d9d: 	movq	0x38(%rbp), %rcx
    00000da1: 	movq	0x48(%rbp), %rdx
    00000da5: 	jmp	.Ltmp7399 # Offset: 3493
.Ltmp7394:
    00000daa: 	subss	DATAat0x537a0(%rip), %xmm0
    00000db2: 	cvttss2si	%xmm0, %rax
    00000db7: 	btcq	$0x3f, %rax
    00000dbc: 	jmp	.Ltmp7400 # Offset: 3516
.Ltmp7375:
    00000dc1: 	subss	DATAat0x537a0(%rip), %xmm0
    00000dc9: 	cvttss2si	%xmm0, %rax
    00000dce: 	btcq	$0x3f, %rax
    00000dd3: 	jmp	.Ltmp7401 # Offset: 3539
.Ltmp7373:
    00000dd8: 	movq	%rbx, %rax
    00000ddb: 	movq	%rbx, %rdx
    00000dde: 	pxor	%xmm0, %xmm0
    00000de2: 	shrq	%rax
    00000de5: 	andl	$0x1, %edx
    00000de8: 	orq	%rdx, %rax
    00000deb: 	cvtsi2ss	%rax, %xmm0
    00000df0: 	addss	%xmm0, %xmm0
    00000df4: 	jmp	.Ltmp7402 # Offset: 3572
.Ltmp7358:
    00000df9: 	movq	0xb8(%rsp), %rax
    00000e01: 	subq	%fs:0x28, %rax
    00000e0a: 	jne	.Ltmp7359 # Offset: 3594
    00000e10: 	addq	$0xc8, %rsp
    00000e17: 	popq	%rbx
    00000e18: 	popq	%rbp
    00000e19: 	popq	%r12
    00000e1b: 	popq	%r13
    00000e1d: 	popq	%r14
    00000e1f: 	popq	%r15
    00000e21: 	retq # Offset: 3617
.Ltmp7387:
    00000e22: 	movq	%r10, %rbx
    00000e25: 	notq	%rbx
    00000e28: 	shrq	$0x4, %rbx
    00000e2c: 	notq	%rbx
.Ltmp7405:
    00000e2f: 	leaq	(%rax,%rbx,8), %rax
    00000e33: 	movq	%r10, %r9
    00000e36: 	shlq	$0x4, %rbx
    00000e3a: 	movq	(%rax), %r11
    00000e3d: 	subq	%rbx, %r9
    00000e40: 	shlq	$0x5, %r9
    00000e44: 	leaq	0x200(%r11), %rsi
    00000e4b: 	addq	%r11, %r9
.Ltmp7389:
    00000e4e: 	movq	%r11, %xmm2
    00000e53: 	movq	%r9, %xmm3
    00000e58: 	leaq	0x8(%r8), %rbx
    00000e5c: 	punpcklqdq	%xmm2, %xmm3
    00000e60: 	movq	%rsi, %xmm2
    00000e65: 	leaq	0x8(%rax), %r12
    00000e69: 	movaps	%xmm3, (%rsp)
    00000e6d: 	movq	%rax, %xmm3
    00000e72: 	punpcklqdq	%xmm3, %xmm2
    00000e76: 	movaps	%xmm2, 0x10(%rsp)
    00000e7b: 	cmpq	%r12, %rbx
    00000e7e: 	jbe	.Ltmp7403 # Offset: 3710
.Ltmp7404:
    00000e80: 	movq	(%r12), %rdi
    00000e84: 	movl	$0x200, %esi
    00000e89: 	addq	$0x8, %r12
    00000e8d: 	callq	_ZdlPvm@PLT # Offset: 3725
    00000e92: 	cmpq	%r12, %rbx
    00000e95: 	ja	.Ltmp7404 # Offset: 3733
    00000e97: 	movq	0x30(%rbp), %rdi
    00000e9b: 	movq	0x38(%rbp), %rcx
    00000e9f: 	movq	0x48(%rbp), %rdx
.Ltmp7403:
    00000ea3: 	movdqa	(%rsp), %xmm7
    00000ea8: 	movdqa	0x10(%rsp), %xmm2
    00000eae: 	movups	%xmm7, 0x80(%rbp)
    00000eb5: 	movups	%xmm2, 0x90(%rbp)
    00000ebc: 	jmp	.Ltmp7399 # Offset: 3772
.Ltmp7388:
    00000ec1: 	movq	%r10, %rbx
    00000ec4: 	sarq	$0x4, %rbx
    00000ec8: 	jmp	.Ltmp7405 # Offset: 3784
.Ltmp7357:
    00000ecd: 	movq	-0x8(%rdx), %rax
    00000ed1: 	addq	$0x200, %rax
    00000ed7: 	jmp	.Ltmp7406 # Offset: 3799
.Ltmp7308:
    00000edc: 	movq	0xa0(%rsp), %rax
    00000ee4: 	pxor	%xmm3, %xmm3
    00000ee8: 	movsd	%xmm3, 0x88(%rsp)
    00000ef1: 	movq	%rax, (%rsp)
    00000ef5: 	jmp	.Ltmp7407 # Offset: 3829
.Ltmp7359:
    00000efa: 	callq	__stack_chk_fail@PLT # Offset: 3834
    00000eff: 	endbr64
    00000f03: 	movq	%rax, %rdi
    00000f06: 	jmp	.Ltmp7408 # Offset: 3846
.Ltmp7377:
    00000f08: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 3848
    00000f0d: 	endbr64
    00000f11: 	movq	%rax, %rbx
    00000f14: 	jmp	.Ltmp7409 # Offset: 3860
    00000f16: 	endbr64
    00000f1a: 	movq	%rax, %rbp
    00000f1d: 	jmp	.Ltmp7410 # Offset: 3869
.Ltmp7413:
    00000f1f: 	callq	__cxa_end_catch@PLT # Offset: 3871
.Ltmp7409:
    00000f24: 	movq	%rbp, %rdi
    00000f27: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 3879
.Ltmp7412:
    00000f2c: 	movq	%rbp, %rdi
    00000f2f: 	movl	$0xc8, %esi
    00000f34: 	movq	%rbx, %rbp
    00000f37: 	callq	_ZdlPvm@PLT # Offset: 3895
.Ltmp7410:
    00000f3c: 	movq	0xa0(%rsp), %rdi
    00000f44: 	movq	0xb0(%rsp), %rsi
    00000f4c: 	subq	%rdi, %rsi
    00000f4f: 	testq	%rdi, %rdi
    00000f52: 	je	.Ltmp7411 # Offset: 3922
    00000f54: 	callq	_ZdlPvm@PLT # Offset: 3924
.Ltmp7411:
    00000f59: 	movq	%rbp, %rdi
    00000f5c: 	callq	_Unwind_Resume@PLT # Offset: 3932
    00000f61: 	endbr64
    00000f65: 	movq	%rax, %rbx
    00000f68: 	jmp	.Ltmp7412 # Offset: 3944
.Ltmp7408:
    00000f6a: 	callq	__cxa_begin_catch@PLT # Offset: 3946
    00000f6f: 	callq	__cxa_rethrow@PLT # Offset: 3951
    00000f74: 	endbr64
    00000f78: 	movq	%rax, %r12
    00000f7b: 	callq	__cxa_end_catch@PLT # Offset: 3963
    00000f80: 	movq	%r12, %rdi
    00000f83: 	callq	__cxa_begin_catch@PLT # Offset: 3971
    00000f88: 	movq	0x58(%rbp), %rax
    00000f8c: 	movq	0x50(%rbp), %rdi
    00000f90: 	leaq	(,%rax,8), %rsi
    00000f98: 	callq	_ZdlPvm@PLT # Offset: 3992
    00000f9d: 	movq	$0x0, 0x50(%rbp)
    00000fa5: 	movq	$0x0, 0x58(%rbp)
    00000fad: 	callq	__cxa_rethrow@PLT # Offset: 4013
    00000fb2: 	endbr64
    00000fb6: 	movq	%rax, %rbx
    00000fb9: 	jmp	.Ltmp7413 # Offset: 4025
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_erase_mapId13PooledHashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16testErase_commonIdEvPKT_PS0_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSB_" after disassembly {
  Number      : 351
  State       : disassembled
  Address     : 0x4e110
  Size        : 0xefe
  MaxSize     : 0xf00
  Offset      : 0x4e110
  Section     : .text
  Orc Section : .local.text._Z16testErase_commonIdEvPKT_PS0_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0350:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x52989(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	pushq	%r13
    00000014: 	pushq	%r12
    00000016: 	pushq	%rbp
    00000017: 	movq	%rcx, %rbp
    0000001a: 	pushq	%rbx
    0000001b: 	movq	%r9, %rbx
    0000001e: 	subq	$0x108, %rsp
    00000025: 	movq	%rdi, (%rsp)
    00000029: 	leaq	0x90(%rsp), %r14
    00000031: 	leaq	0xb0(%rsp), %r13
    00000039: 	movq	%rsi, 0x8(%rsp)
    0000003e: 	movq	%r14, %rdi
    00000041: 	movq	%rcx, %rsi
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0xf8(%rsp)
    00000055: 	xorl	%eax, %eax
    00000057: 	movl	%r8d, iterations(%rip)
    0000005e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 94
    00000063: 	movq	0x8(%rbx), %rcx
    00000067: 	movq	(%rbx), %rdx
    0000006a: 	movq	%r14, %rsi
    0000006d: 	movq	%r13, %rdi
    00000070: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 112
    00000075: 	leaq	0xd0(%rsp), %r12
    0000007d: 	leaq	DATAat0x53433(%rip), %rdx
    00000084: 	movq	%r13, %rsi
    00000087: 	movq	%r12, %rdi
    0000008a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 138
    0000008f: 	movq	0x8(%rsp), %rdx
    00000094: 	movq	(%rsp), %rdi
    00000098: 	shlq	$0x3, %r15
    0000009c: 	movq	%r12, %r8
    0000009f: 	leaq	(%rdx,%r15), %rcx
    000000a3: 	addq	%rdi, %r15
    000000a6: 	movq	%r15, %rsi
    000000a9: 	movq	%rcx, 0x28(%rsp)
    000000ae: 	movq	%r15, 0x30(%rsp)
    000000b3: 	callq	_Z15test_erase_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 179
    000000b8: 	movq	0xd0(%rsp), %rdi
    000000c0: 	leaq	0xe0(%rsp), %rax
    000000c8: 	movq	%rax, 0x20(%rsp)
    000000cd: 	cmpq	%rax, %rdi
    000000d0: 	je	.Ltmp7414 # Offset: 208
    000000d2: 	movq	0xe0(%rsp), %rax
    000000da: 	leaq	0x1(%rax), %rsi
    000000de: 	callq	_ZdlPvm@PLT # Offset: 222
.Ltmp7414:
    000000e3: 	movq	0xb0(%rsp), %rdi
    000000eb: 	leaq	0xc0(%rsp), %rax
    000000f3: 	movq	%rax, 0x18(%rsp)
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp7415 # Offset: 251
    000000fd: 	movq	0xc0(%rsp), %rax
    00000105: 	leaq	0x1(%rax), %rsi
    00000109: 	callq	_ZdlPvm@PLT # Offset: 265
.Ltmp7415:
    0000010e: 	movq	0x90(%rsp), %rdi
    00000116: 	leaq	0xa0(%rsp), %rax
    0000011e: 	movq	%rax, 0x10(%rsp)
    00000123: 	cmpq	%rax, %rdi
    00000126: 	je	.Ltmp7416 # Offset: 294
    00000128: 	movq	0xa0(%rsp), %rax
    00000130: 	leaq	0x1(%rax), %rsi
    00000134: 	callq	_ZdlPvm@PLT # Offset: 308
.Ltmp7416:
    00000139: 	leaq	DATAat0x5299a(%rip), %rdx
    00000140: 	movq	%rbp, %rsi
    00000143: 	movq	%r14, %rdi
    00000146: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 326
    0000014b: 	movq	0x8(%rbx), %rcx
    0000014f: 	movq	(%rbx), %rdx
    00000152: 	movq	%r14, %rsi
    00000155: 	movq	%r13, %rdi
    00000158: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 344
    0000015d: 	leaq	DATAat0x53433(%rip), %rdx
    00000164: 	movq	%r13, %rsi
    00000167: 	movq	%r12, %rdi
    0000016a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 362
    0000016f: 	movq	0x28(%rsp), %rcx
    00000174: 	movq	0x8(%rsp), %rdx
    00000179: 	movq	%r12, %r8
    0000017c: 	movq	0x30(%rsp), %rsi
    00000181: 	movq	(%rsp), %rdi
    00000185: 	callq	_Z15test_erase_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_S7_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 389
    0000018a: 	movq	0xd0(%rsp), %rdi
    00000192: 	cmpq	0x20(%rsp), %rdi
    00000197: 	je	.Ltmp7417 # Offset: 407
    00000199: 	movq	0xe0(%rsp), %rax
    000001a1: 	leaq	0x1(%rax), %rsi
    000001a5: 	callq	_ZdlPvm@PLT # Offset: 421
.Ltmp7417:
    000001aa: 	movq	0xb0(%rsp), %rdi
    000001b2: 	cmpq	0x18(%rsp), %rdi
    000001b7: 	je	.Ltmp7418 # Offset: 439
    000001b9: 	movq	0xc0(%rsp), %rax
    000001c1: 	leaq	0x1(%rax), %rsi
    000001c5: 	callq	_ZdlPvm@PLT # Offset: 453
.Ltmp7418:
    000001ca: 	movq	0x90(%rsp), %rdi
    000001d2: 	cmpq	0x10(%rsp), %rdi
    000001d7: 	je	.Ltmp7419 # Offset: 471
    000001d9: 	movq	0xa0(%rsp), %rax
    000001e1: 	leaq	0x1(%rax), %rsi
    000001e5: 	callq	_ZdlPvm@PLT # Offset: 485
.Ltmp7419:
    000001ea: 	leaq	0x50(%rsp), %r15
    000001ef: 	leaq	DATAat0x52564(%rip), %rdx
    000001f6: 	movq	%rbp, %rsi
    000001f9: 	movq	%r15, %rdi
    000001fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 508
    00000201: 	movq	0x8(%rbp), %rcx
    00000205: 	movq	(%rbp), %rdx
    00000209: 	movq	%r15, %rsi
    0000020c: 	leaq	0x70(%rsp), %rax
    00000211: 	movq	%rax, %rdi
    00000214: 	movq	%rax, 0x38(%rsp)
    00000219: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 537
    0000021e: 	movq	0x38(%rsp), %rsi
    00000223: 	leaq	DATAat0x529aa(%rip), %rdx
    0000022a: 	movq	%r14, %rdi
    0000022d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 557
    00000232: 	movq	0x8(%rbx), %rcx
    00000236: 	movq	(%rbx), %rdx
    00000239: 	movq	%r14, %rsi
    0000023c: 	movq	%r13, %rdi
    0000023f: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 575
    00000244: 	leaq	DATAat0x53433(%rip), %rdx
    0000024b: 	movq	%r13, %rsi
    0000024e: 	movq	%r12, %rdi
    00000251: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 593
    00000256: 	movq	0x28(%rsp), %rcx
    0000025b: 	movq	0x8(%rsp), %rdx
    00000260: 	movq	%r12, %r8
    00000263: 	movq	0x30(%rsp), %rsi
    00000268: 	movq	(%rsp), %rdi
    0000026c: 	callq	_Z14test_erase_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 620
    00000271: 	movq	0xd0(%rsp), %rdi
    00000279: 	cmpq	0x20(%rsp), %rdi
    0000027e: 	je	.Ltmp7420 # Offset: 638
    00000280: 	movq	0xe0(%rsp), %rax
    00000288: 	leaq	0x1(%rax), %rsi
    0000028c: 	callq	_ZdlPvm@PLT # Offset: 652
.Ltmp7420:
    00000291: 	movq	0xb0(%rsp), %rdi
    00000299: 	cmpq	0x18(%rsp), %rdi
    0000029e: 	je	.Ltmp7421 # Offset: 670
    000002a0: 	movq	0xc0(%rsp), %rax
    000002a8: 	leaq	0x1(%rax), %rsi
    000002ac: 	callq	_ZdlPvm@PLT # Offset: 684
.Ltmp7421:
    000002b1: 	movq	0x90(%rsp), %rdi
    000002b9: 	cmpq	0x10(%rsp), %rdi
    000002be: 	je	.Ltmp7422 # Offset: 702
    000002c0: 	movq	0xa0(%rsp), %rax
    000002c8: 	leaq	0x1(%rax), %rsi
    000002cc: 	callq	_ZdlPvm@PLT # Offset: 716
.Ltmp7422:
    000002d1: 	movq	0x70(%rsp), %rdi
    000002d6: 	leaq	0x80(%rsp), %rax
    000002de: 	movq	%rax, 0x48(%rsp)
    000002e3: 	cmpq	%rax, %rdi
    000002e6: 	je	.Ltmp7423 # Offset: 742
    000002e8: 	movq	0x80(%rsp), %rax
    000002f0: 	leaq	0x1(%rax), %rsi
    000002f4: 	callq	_ZdlPvm@PLT # Offset: 756
.Ltmp7423:
    000002f9: 	movq	0x50(%rsp), %rdi
    000002fe: 	leaq	0x60(%rsp), %rax
    00000303: 	movq	%rax, 0x40(%rsp)
    00000308: 	cmpq	%rax, %rdi
    0000030b: 	je	.Ltmp7424 # Offset: 779
    0000030d: 	movq	0x60(%rsp), %rax
    00000312: 	leaq	0x1(%rax), %rsi
    00000316: 	callq	_ZdlPvm@PLT # Offset: 790
.Ltmp7424:
    0000031b: 	leaq	DATAat0x52564(%rip), %rdx
    00000322: 	movq	%rbp, %rsi
    00000325: 	movq	%r15, %rdi
    00000328: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 808
    0000032d: 	movq	0x8(%rbp), %rcx
    00000331: 	movq	(%rbp), %rdx
    00000335: 	movq	%r15, %rsi
    00000338: 	movq	0x38(%rsp), %rdi
    0000033d: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 829
    00000342: 	movq	0x38(%rsp), %rsi
    00000347: 	leaq	DATAat0x529b5(%rip), %rdx
    0000034e: 	movq	%r14, %rdi
    00000351: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 849
    00000356: 	movq	0x8(%rbx), %rcx
    0000035a: 	movq	(%rbx), %rdx
    0000035d: 	movq	%r14, %rsi
    00000360: 	movq	%r13, %rdi
    00000363: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 867
    00000368: 	leaq	DATAat0x53433(%rip), %rdx
    0000036f: 	movq	%r13, %rsi
    00000372: 	movq	%r12, %rdi
    00000375: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 885
    0000037a: 	movq	0x28(%rsp), %rcx
    0000037f: 	movq	0x8(%rsp), %rdx
    00000384: 	movq	%r12, %r8
    00000387: 	movq	0x30(%rsp), %rsi
    0000038c: 	movq	(%rsp), %rdi
    00000390: 	callq	_Z19test_erase_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_SA_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 912
    00000395: 	movq	0xd0(%rsp), %rdi
    0000039d: 	cmpq	0x20(%rsp), %rdi
    000003a2: 	je	.Ltmp7425 # Offset: 930
    000003a4: 	movq	0xe0(%rsp), %rax
    000003ac: 	leaq	0x1(%rax), %rsi
    000003b0: 	callq	_ZdlPvm@PLT # Offset: 944
.Ltmp7425:
    000003b5: 	movq	0xb0(%rsp), %rdi
    000003bd: 	cmpq	0x18(%rsp), %rdi
    000003c2: 	je	.Ltmp7426 # Offset: 962
    000003c4: 	movq	0xc0(%rsp), %rax
    000003cc: 	leaq	0x1(%rax), %rsi
    000003d0: 	callq	_ZdlPvm@PLT # Offset: 976
.Ltmp7426:
    000003d5: 	movq	0x90(%rsp), %rdi
    000003dd: 	cmpq	0x10(%rsp), %rdi
    000003e2: 	je	.Ltmp7427 # Offset: 994
    000003e4: 	movq	0xa0(%rsp), %rax
    000003ec: 	leaq	0x1(%rax), %rsi
    000003f0: 	callq	_ZdlPvm@PLT # Offset: 1008
.Ltmp7427:
    000003f5: 	movq	0x70(%rsp), %rdi
    000003fa: 	cmpq	0x48(%rsp), %rdi
    000003ff: 	je	.Ltmp7428 # Offset: 1023
    00000401: 	movq	0x80(%rsp), %rax
    00000409: 	leaq	0x1(%rax), %rsi
    0000040d: 	callq	_ZdlPvm@PLT # Offset: 1037
.Ltmp7428:
    00000412: 	movq	0x50(%rsp), %rdi
    00000417: 	cmpq	0x40(%rsp), %rdi
    0000041c: 	je	.Ltmp7429 # Offset: 1052
    0000041e: 	movq	0x60(%rsp), %rax
    00000423: 	leaq	0x1(%rax), %rsi
    00000427: 	callq	_ZdlPvm@PLT # Offset: 1063
.Ltmp7429:
    0000042c: 	leaq	DATAat0x529c5(%rip), %rdx
    00000433: 	movq	%rbp, %rsi
    00000436: 	movq	%r14, %rdi
    00000439: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1081
    0000043e: 	movq	0x8(%rbx), %rcx
    00000442: 	movq	(%rbx), %rdx
    00000445: 	movq	%r14, %rsi
    00000448: 	movq	%r13, %rdi
    0000044b: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1099
    00000450: 	leaq	DATAat0x53433(%rip), %rdx
    00000457: 	movq	%r13, %rsi
    0000045a: 	movq	%r12, %rdi
    0000045d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1117
    00000462: 	movq	0x28(%rsp), %rcx
    00000467: 	movq	0x8(%rsp), %rdx
    0000046c: 	movq	%r12, %r8
    0000046f: 	movq	0x30(%rsp), %rsi
    00000474: 	movq	(%rsp), %rdi
    00000478: 	callq	_Z15test_erase_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1144
    0000047d: 	movq	0xd0(%rsp), %rdi
    00000485: 	cmpq	0x20(%rsp), %rdi
    0000048a: 	je	.Ltmp7430 # Offset: 1162
    0000048c: 	movq	0xe0(%rsp), %rax
    00000494: 	leaq	0x1(%rax), %rsi
    00000498: 	callq	_ZdlPvm@PLT # Offset: 1176
.Ltmp7430:
    0000049d: 	movq	0xb0(%rsp), %rdi
    000004a5: 	cmpq	0x18(%rsp), %rdi
    000004aa: 	je	.Ltmp7431 # Offset: 1194
    000004ac: 	movq	0xc0(%rsp), %rax
    000004b4: 	leaq	0x1(%rax), %rsi
    000004b8: 	callq	_ZdlPvm@PLT # Offset: 1208
.Ltmp7431:
    000004bd: 	movq	0x90(%rsp), %rdi
    000004c5: 	cmpq	0x10(%rsp), %rdi
    000004ca: 	je	.Ltmp7432 # Offset: 1226
    000004cc: 	movq	0xa0(%rsp), %rax
    000004d4: 	leaq	0x1(%rax), %rsi
    000004d8: 	callq	_ZdlPvm@PLT # Offset: 1240
.Ltmp7432:
    000004dd: 	leaq	DATAat0x529da(%rip), %rdx
    000004e4: 	movq	%rbp, %rsi
    000004e7: 	movq	%r14, %rdi
    000004ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1258
    000004ef: 	movq	0x8(%rbx), %rcx
    000004f3: 	movq	(%rbx), %rdx
    000004f6: 	movq	%r14, %rsi
    000004f9: 	movq	%r13, %rdi
    000004fc: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1276
    00000501: 	leaq	DATAat0x53433(%rip), %rdx
    00000508: 	movq	%r13, %rsi
    0000050b: 	movq	%r12, %rdi
    0000050e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1294
    00000513: 	movq	0x28(%rsp), %rcx
    00000518: 	movq	0x8(%rsp), %rdx
    0000051d: 	movq	%r12, %r8
    00000520: 	movq	0x30(%rsp), %rsi
    00000525: 	movq	(%rsp), %rdi
    00000529: 	callq	_Z15test_erase_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_S9_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1321
    0000052e: 	movq	0xd0(%rsp), %rdi
    00000536: 	cmpq	0x20(%rsp), %rdi
    0000053b: 	je	.Ltmp7433 # Offset: 1339
    0000053d: 	movq	0xe0(%rsp), %rax
    00000545: 	leaq	0x1(%rax), %rsi
    00000549: 	callq	_ZdlPvm@PLT # Offset: 1353
.Ltmp7433:
    0000054e: 	movq	0xb0(%rsp), %rdi
    00000556: 	cmpq	0x18(%rsp), %rdi
    0000055b: 	je	.Ltmp7434 # Offset: 1371
    0000055d: 	movq	0xc0(%rsp), %rax
    00000565: 	leaq	0x1(%rax), %rsi
    00000569: 	callq	_ZdlPvm@PLT # Offset: 1385
.Ltmp7434:
    0000056e: 	movq	0x90(%rsp), %rdi
    00000576: 	cmpq	0x10(%rsp), %rdi
    0000057b: 	je	.Ltmp7435 # Offset: 1403
    0000057d: 	movq	0xa0(%rsp), %rax
    00000585: 	leaq	0x1(%rax), %rsi
    00000589: 	callq	_ZdlPvm@PLT # Offset: 1417
.Ltmp7435:
    0000058e: 	leaq	DATAat0x52564(%rip), %rdx
    00000595: 	movq	%rbp, %rsi
    00000598: 	movq	%r15, %rdi
    0000059b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1435
    000005a0: 	movq	0x8(%rbp), %rcx
    000005a4: 	movq	(%rbp), %rdx
    000005a8: 	movq	%r15, %rsi
    000005ab: 	movq	0x38(%rsp), %rdi
    000005b0: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1456
    000005b5: 	movq	0x38(%rsp), %rsi
    000005ba: 	leaq	DATAat0x529f4(%rip), %rdx
    000005c1: 	movq	%r14, %rdi
    000005c4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1476
    000005c9: 	movq	0x8(%rbx), %rcx
    000005cd: 	movq	(%rbx), %rdx
    000005d0: 	movq	%r14, %rsi
    000005d3: 	movq	%r13, %rdi
    000005d6: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1494
    000005db: 	leaq	DATAat0x53433(%rip), %rdx
    000005e2: 	movq	%r13, %rsi
    000005e5: 	movq	%r12, %rdi
    000005e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1512
    000005ed: 	movq	0x28(%rsp), %rcx
    000005f2: 	movq	0x8(%rsp), %rdx
    000005f7: 	movq	%r12, %r8
    000005fa: 	movq	0x30(%rsp), %rsi
    000005ff: 	movq	(%rsp), %rdi
    00000603: 	callq	_Z14test_erase_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1539
    00000608: 	movq	0xd0(%rsp), %rdi
    00000610: 	cmpq	0x20(%rsp), %rdi
    00000615: 	je	.Ltmp7436 # Offset: 1557
    00000617: 	movq	0xe0(%rsp), %rax
    0000061f: 	leaq	0x1(%rax), %rsi
    00000623: 	callq	_ZdlPvm@PLT # Offset: 1571
.Ltmp7436:
    00000628: 	movq	0xb0(%rsp), %rdi
    00000630: 	cmpq	0x18(%rsp), %rdi
    00000635: 	je	.Ltmp7437 # Offset: 1589
    00000637: 	movq	0xc0(%rsp), %rax
    0000063f: 	leaq	0x1(%rax), %rsi
    00000643: 	callq	_ZdlPvm@PLT # Offset: 1603
.Ltmp7437:
    00000648: 	movq	0x90(%rsp), %rdi
    00000650: 	cmpq	0x10(%rsp), %rdi
    00000655: 	je	.Ltmp7438 # Offset: 1621
    00000657: 	movq	0xa0(%rsp), %rax
    0000065f: 	leaq	0x1(%rax), %rsi
    00000663: 	callq	_ZdlPvm@PLT # Offset: 1635
.Ltmp7438:
    00000668: 	movq	0x70(%rsp), %rdi
    0000066d: 	cmpq	0x48(%rsp), %rdi
    00000672: 	je	.Ltmp7439 # Offset: 1650
    00000674: 	movq	0x80(%rsp), %rax
    0000067c: 	leaq	0x1(%rax), %rsi
    00000680: 	callq	_ZdlPvm@PLT # Offset: 1664
.Ltmp7439:
    00000685: 	movq	0x50(%rsp), %rdi
    0000068a: 	cmpq	0x40(%rsp), %rdi
    0000068f: 	je	.Ltmp7440 # Offset: 1679
    00000691: 	movq	0x60(%rsp), %rax
    00000696: 	leaq	0x1(%rax), %rsi
    0000069a: 	callq	_ZdlPvm@PLT # Offset: 1690
.Ltmp7440:
    0000069f: 	leaq	DATAat0x52564(%rip), %rdx
    000006a6: 	movq	%rbp, %rsi
    000006a9: 	movq	%r15, %rdi
    000006ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1708
    000006b1: 	movq	0x8(%rbp), %rcx
    000006b5: 	movq	(%rbp), %rdx
    000006b9: 	movq	%r15, %rsi
    000006bc: 	movq	0x38(%rsp), %rdi
    000006c1: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1729
    000006c6: 	movq	0x38(%rsp), %rsi
    000006cb: 	leaq	DATAat0x52a09(%rip), %rdx
    000006d2: 	movq	%r14, %rdi
    000006d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1749
    000006da: 	movq	0x8(%rbx), %rcx
    000006de: 	movq	(%rbx), %rdx
    000006e1: 	movq	%r14, %rsi
    000006e4: 	movq	%r13, %rdi
    000006e7: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1767
    000006ec: 	leaq	DATAat0x53433(%rip), %rdx
    000006f3: 	movq	%r13, %rsi
    000006f6: 	movq	%r12, %rdi
    000006f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1785
    000006fe: 	movq	0x28(%rsp), %rcx
    00000703: 	movq	0x8(%rsp), %rdx
    00000708: 	movq	%r12, %r8
    0000070b: 	movq	0x30(%rsp), %rsi
    00000710: 	movq	(%rsp), %rdi
    00000714: 	callq	_Z19test_erase_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_SC_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1812
    00000719: 	movq	0xd0(%rsp), %rdi
    00000721: 	cmpq	0x20(%rsp), %rdi
    00000726: 	je	.Ltmp7441 # Offset: 1830
    00000728: 	movq	0xe0(%rsp), %rax
    00000730: 	leaq	0x1(%rax), %rsi
    00000734: 	callq	_ZdlPvm@PLT # Offset: 1844
.Ltmp7441:
    00000739: 	movq	0xb0(%rsp), %rdi
    00000741: 	cmpq	0x18(%rsp), %rdi
    00000746: 	je	.Ltmp7442 # Offset: 1862
    00000748: 	movq	0xc0(%rsp), %rax
    00000750: 	leaq	0x1(%rax), %rsi
    00000754: 	callq	_ZdlPvm@PLT # Offset: 1876
.Ltmp7442:
    00000759: 	movq	0x90(%rsp), %rdi
    00000761: 	cmpq	0x10(%rsp), %rdi
    00000766: 	je	.Ltmp7443 # Offset: 1894
    00000768: 	movq	0xa0(%rsp), %rax
    00000770: 	leaq	0x1(%rax), %rsi
    00000774: 	callq	_ZdlPvm@PLT # Offset: 1908
.Ltmp7443:
    00000779: 	movq	0x70(%rsp), %rdi
    0000077e: 	cmpq	0x48(%rsp), %rdi
    00000783: 	je	.Ltmp7444 # Offset: 1923
    00000785: 	movq	0x80(%rsp), %rax
    0000078d: 	leaq	0x1(%rax), %rsi
    00000791: 	callq	_ZdlPvm@PLT # Offset: 1937
.Ltmp7444:
    00000796: 	movq	0x50(%rsp), %rdi
    0000079b: 	cmpq	0x40(%rsp), %rdi
    000007a0: 	je	.Ltmp7445 # Offset: 1952
    000007a2: 	movq	0x60(%rsp), %rax
    000007a7: 	leaq	0x1(%rax), %rsi
    000007ab: 	callq	_ZdlPvm@PLT # Offset: 1963
.Ltmp7445:
    000007b0: 	leaq	DATAat0x52564(%rip), %rdx
    000007b7: 	movq	%rbp, %rsi
    000007ba: 	movq	%r15, %rdi
    000007bd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1981
    000007c2: 	movq	0x8(%rbp), %rcx
    000007c6: 	movq	(%rbp), %rdx
    000007ca: 	movq	%r15, %rsi
    000007cd: 	movq	0x38(%rsp), %rdi
    000007d2: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2002
    000007d7: 	movq	0x38(%rsp), %rsi
    000007dc: 	leaq	DATAat0x52a23(%rip), %rdx
    000007e3: 	movq	%r14, %rdi
    000007e6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2022
    000007eb: 	movq	0x8(%rbx), %rcx
    000007ef: 	movq	(%rbx), %rdx
    000007f2: 	movq	%r14, %rsi
    000007f5: 	movq	%r13, %rdi
    000007f8: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2040
    000007fd: 	leaq	DATAat0x53433(%rip), %rdx
    00000804: 	movq	%r13, %rsi
    00000807: 	movq	%r12, %rdi
    0000080a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2058
    0000080f: 	movq	0x28(%rsp), %rcx
    00000814: 	movq	0x8(%rsp), %rdx
    00000819: 	movq	%r12, %r8
    0000081c: 	movq	0x30(%rsp), %rsi
    00000821: 	movq	(%rsp), %rdi
    00000825: 	callq	_Z14test_erase_mapId7HashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2085
    0000082a: 	movq	0xd0(%rsp), %rdi
    00000832: 	cmpq	0x20(%rsp), %rdi
    00000837: 	je	.Ltmp7446 # Offset: 2103
    00000839: 	movq	0xe0(%rsp), %rax
    00000841: 	leaq	0x1(%rax), %rsi
    00000845: 	callq	_ZdlPvm@PLT # Offset: 2117
.Ltmp7446:
    0000084a: 	movq	0xb0(%rsp), %rdi
    00000852: 	cmpq	0x18(%rsp), %rdi
    00000857: 	je	.Ltmp7447 # Offset: 2135
    00000859: 	movq	0xc0(%rsp), %rax
    00000861: 	leaq	0x1(%rax), %rsi
    00000865: 	callq	_ZdlPvm@PLT # Offset: 2149
.Ltmp7447:
    0000086a: 	movq	0x90(%rsp), %rdi
    00000872: 	cmpq	0x10(%rsp), %rdi
    00000877: 	je	.Ltmp7448 # Offset: 2167
    00000879: 	movq	0xa0(%rsp), %rax
    00000881: 	leaq	0x1(%rax), %rsi
    00000885: 	callq	_ZdlPvm@PLT # Offset: 2181
.Ltmp7448:
    0000088a: 	movq	0x70(%rsp), %rdi
    0000088f: 	cmpq	0x48(%rsp), %rdi
    00000894: 	je	.Ltmp7449 # Offset: 2196
    00000896: 	movq	0x80(%rsp), %rax
    0000089e: 	leaq	0x1(%rax), %rsi
    000008a2: 	callq	_ZdlPvm@PLT # Offset: 2210
.Ltmp7449:
    000008a7: 	movq	0x50(%rsp), %rdi
    000008ac: 	cmpq	0x40(%rsp), %rdi
    000008b1: 	je	.Ltmp7450 # Offset: 2225
    000008b3: 	movq	0x60(%rsp), %rax
    000008b8: 	leaq	0x1(%rax), %rsi
    000008bc: 	callq	_ZdlPvm@PLT # Offset: 2236
.Ltmp7450:
    000008c1: 	movq	%r15, %rdi
    000008c4: 	leaq	DATAat0x52564(%rip), %rdx
    000008cb: 	movq	%rbp, %rsi
    000008ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2254
    000008d3: 	movq	%r15, %rsi
    000008d6: 	movq	0x8(%rbp), %rcx
    000008da: 	movq	(%rbp), %rdx
    000008de: 	movq	0x38(%rsp), %r15
    000008e3: 	movq	%r15, %rdi
    000008e6: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2278
    000008eb: 	leaq	DATAat0x52a2d(%rip), %rdx
    000008f2: 	movq	%r15, %rsi
    000008f5: 	movq	%r14, %rdi
    000008f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2296
    000008fd: 	movq	0x8(%rbx), %rcx
    00000901: 	movq	(%rbx), %rdx
    00000904: 	movq	%r14, %rsi
    00000907: 	movq	%r13, %rdi
    0000090a: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2314
    0000090f: 	leaq	DATAat0x53433(%rip), %rdx
    00000916: 	movq	%r13, %rsi
    00000919: 	movq	%r12, %rdi
    0000091c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2332
    00000921: 	movq	0x28(%rsp), %rcx
    00000926: 	movq	0x8(%rsp), %rdx
    0000092b: 	movq	%r12, %r8
    0000092e: 	movq	0x30(%rsp), %rsi
    00000933: 	movq	(%rsp), %rdi
    00000937: 	callq	_Z14test_erase_mapId13PooledHashMapIddEEvPKT_S4_S4_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2359
    0000093c: 	movq	0xd0(%rsp), %rdi
    00000944: 	cmpq	0x20(%rsp), %rdi
    00000949: 	je	.Ltmp7451 # Offset: 2377
    0000094b: 	movq	0xe0(%rsp), %rax
    00000953: 	leaq	0x1(%rax), %rsi
    00000957: 	callq	_ZdlPvm@PLT # Offset: 2391
.Ltmp7451:
    0000095c: 	movq	0xb0(%rsp), %rdi
    00000964: 	cmpq	0x18(%rsp), %rdi
    00000969: 	je	.Ltmp7452 # Offset: 2409
    0000096b: 	movq	0xc0(%rsp), %rax
    00000973: 	leaq	0x1(%rax), %rsi
    00000977: 	callq	_ZdlPvm@PLT # Offset: 2423
.Ltmp7452:
    0000097c: 	movq	0x90(%rsp), %rdi
    00000984: 	cmpq	0x10(%rsp), %rdi
    00000989: 	je	.Ltmp7453 # Offset: 2441
    0000098b: 	movq	0xa0(%rsp), %rax
    00000993: 	leaq	0x1(%rax), %rsi
    00000997: 	callq	_ZdlPvm@PLT # Offset: 2455
.Ltmp7453:
    0000099c: 	movq	0x70(%rsp), %rdi
    000009a1: 	cmpq	0x48(%rsp), %rdi
    000009a6: 	je	.Ltmp7454 # Offset: 2470
    000009a8: 	movq	0x80(%rsp), %rax
    000009b0: 	leaq	0x1(%rax), %rsi
    000009b4: 	callq	_ZdlPvm@PLT # Offset: 2484
.Ltmp7454:
    000009b9: 	movq	0x50(%rsp), %rdi
    000009be: 	cmpq	0x40(%rsp), %rdi
    000009c3: 	je	.Ltmp7455 # Offset: 2499
    000009c5: 	movq	0x60(%rsp), %rax
    000009ca: 	leaq	0x1(%rax), %rsi
    000009ce: 	callq	_ZdlPvm@PLT # Offset: 2510
.Ltmp7455:
    000009d3: 	leaq	DATAat0x52a3d(%rip), %rdx
    000009da: 	movq	%rbp, %rsi
    000009dd: 	movq	%r14, %rdi
    000009e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2528
    000009e5: 	movq	0x8(%rbx), %rcx
    000009e9: 	movq	(%rbx), %rdx
    000009ec: 	movq	%r14, %rsi
    000009ef: 	movq	%r13, %rdi
    000009f2: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2546
    000009f7: 	leaq	DATAat0x53433(%rip), %rdx
    000009fe: 	movq	%r13, %rsi
    00000a01: 	movq	%r12, %rdi
    00000a04: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2564
    00000a09: 	movq	0x28(%rsp), %rcx
    00000a0e: 	movq	0x8(%rsp), %rdx
    00000a13: 	movq	%r12, %r8
    00000a16: 	movq	0x30(%rsp), %rsi
    00000a1b: 	movq	(%rsp), %rdi
    00000a1f: 	callq	_Z26test_erase_pushback_sortedIdSt6vectorIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2591
    00000a24: 	movq	0xd0(%rsp), %rdi
    00000a2c: 	cmpq	0x20(%rsp), %rdi
    00000a31: 	je	.Ltmp7456 # Offset: 2609
    00000a33: 	movq	0xe0(%rsp), %rax
    00000a3b: 	leaq	0x1(%rax), %rsi
    00000a3f: 	callq	_ZdlPvm@PLT # Offset: 2623
.Ltmp7456:
    00000a44: 	movq	0xb0(%rsp), %rdi
    00000a4c: 	cmpq	0x18(%rsp), %rdi
    00000a51: 	je	.Ltmp7457 # Offset: 2641
    00000a53: 	movq	0xc0(%rsp), %rax
    00000a5b: 	leaq	0x1(%rax), %rsi
    00000a5f: 	callq	_ZdlPvm@PLT # Offset: 2655
.Ltmp7457:
    00000a64: 	movq	0x90(%rsp), %rdi
    00000a6c: 	cmpq	0x10(%rsp), %rdi
    00000a71: 	je	.Ltmp7458 # Offset: 2673
    00000a73: 	movq	0xa0(%rsp), %rax
    00000a7b: 	leaq	0x1(%rax), %rsi
    00000a7f: 	callq	_ZdlPvm@PLT # Offset: 2687
.Ltmp7458:
    00000a84: 	leaq	DATAat0x52a52(%rip), %rdx
    00000a8b: 	movq	%rbp, %rsi
    00000a8e: 	movq	%r14, %rdi
    00000a91: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2705
    00000a96: 	movq	0x8(%rbx), %rcx
    00000a9a: 	movq	(%rbx), %rdx
    00000a9d: 	movq	%r14, %rsi
    00000aa0: 	movq	%r13, %rdi
    00000aa3: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 2723
    00000aa8: 	leaq	DATAat0x53433(%rip), %rdx
    00000aaf: 	movq	%r13, %rsi
    00000ab2: 	movq	%r12, %rdi
    00000ab5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 2741
    00000aba: 	movq	0x28(%rsp), %rcx
    00000abf: 	movq	0x8(%rsp), %rdx
    00000ac4: 	movq	%r12, %r8
    00000ac7: 	movq	0x30(%rsp), %rsi
    00000acc: 	movq	(%rsp), %rdi
    00000ad0: 	callq	_Z26test_erase_pushback_sortedIdSt5dequeIdSaIdEEEvPKT_S5_S5_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2768
    00000ad5: 	movq	0xd0(%rsp), %rdi
    00000add: 	cmpq	0x20(%rsp), %rdi
    00000ae2: 	je	.Ltmp7459 # Offset: 2786
    00000ae4: 	movq	0xe0(%rsp), %rax
    00000aec: 	leaq	0x1(%rax), %rsi
    00000af0: 	callq	_ZdlPvm@PLT # Offset: 2800
.Ltmp7459:
    00000af5: 	movq	0xb0(%rsp), %rdi
    00000afd: 	cmpq	0x18(%rsp), %rdi
    00000b02: 	je	.Ltmp7460 # Offset: 2818
    00000b04: 	movq	0xc0(%rsp), %rax
    00000b0c: 	leaq	0x1(%rax), %rsi
    00000b10: 	callq	_ZdlPvm@PLT # Offset: 2832
.Ltmp7460:
    00000b15: 	movq	0x90(%rsp), %rdi
    00000b1d: 	cmpq	0x10(%rsp), %rdi
    00000b22: 	je	.Ltmp7461 # Offset: 2850
    00000b24: 	movq	0xa0(%rsp), %rax
    00000b2c: 	leaq	0x1(%rax), %rsi
    00000b30: 	callq	_ZdlPvm@PLT # Offset: 2864
.Ltmp7461:
    00000b35: 	movq	0xf8(%rsp), %rax
    00000b3d: 	subq	%fs:0x28, %rax
    00000b46: 	jne	.Ltmp7462 # Offset: 2886
    00000b48: 	addq	$0x108, %rsp
    00000b4f: 	popq	%rbx
    00000b50: 	popq	%rbp
    00000b51: 	popq	%r12
    00000b53: 	popq	%r13
    00000b55: 	popq	%r14
    00000b57: 	popq	%r15
    00000b59: 	retq # Offset: 2905
.Ltmp7462:
    00000b5a: 	callq	__stack_chk_fail@PLT # Offset: 2906
    00000b5f: 	endbr64
.Ltmp7467:
    00000b63: 	movq	%rax, %rbp
    00000b66: 	jmp	.Ltmp7463 # Offset: 2918
    00000b68: 	endbr64
.Ltmp7468:
    00000b6c: 	movq	%rax, %rbp
    00000b6f: 	jmp	.Ltmp7464 # Offset: 2927
.Ltmp7463:
    00000b71: 	movq	0xd0(%rsp), %rdi
    00000b79: 	cmpq	0x20(%rsp), %rdi
    00000b7e: 	je	.Ltmp7464 # Offset: 2942
    00000b80: 	movq	0xe0(%rsp), %rax
    00000b88: 	leaq	0x1(%rax), %rsi
    00000b8c: 	callq	_ZdlPvm@PLT # Offset: 2956
.Ltmp7464:
    00000b91: 	movq	0xb0(%rsp), %rdi
    00000b99: 	cmpq	0x18(%rsp), %rdi
    00000b9e: 	je	.Ltmp7465 # Offset: 2974
    00000ba0: 	movq	0xc0(%rsp), %rax
    00000ba8: 	leaq	0x1(%rax), %rsi
    00000bac: 	callq	_ZdlPvm@PLT # Offset: 2988
.Ltmp7465:
    00000bb1: 	movq	0x90(%rsp), %rdi
    00000bb9: 	cmpq	0x10(%rsp), %rdi
    00000bbe: 	je	.Ltmp7466 # Offset: 3006
.Ltmp7489:
    00000bc0: 	movq	0xa0(%rsp), %rax
    00000bc8: 	leaq	0x1(%rax), %rsi
    00000bcc: 	callq	_ZdlPvm@PLT # Offset: 3020
.Ltmp7466:
    00000bd1: 	movq	%rbp, %rdi
    00000bd4: 	callq	_Unwind_Resume@PLT # Offset: 3028
    00000bd9: 	endbr64
.Ltmp7469:
    00000bdd: 	movq	%rax, %rbp
    00000be0: 	jmp	.Ltmp7465 # Offset: 3040
    00000be2: 	endbr64
    00000be6: 	jmp	.Ltmp7467 # Offset: 3046
    00000beb: 	endbr64
    00000bef: 	jmp	.Ltmp7468 # Offset: 3055
    00000bf4: 	endbr64
    00000bf8: 	jmp	.Ltmp7469 # Offset: 3064
    00000bfa: 	endbr64
.Ltmp7475:
    00000bfe: 	movq	%rax, %rbp
    00000c01: 	jmp	.Ltmp7470 # Offset: 3073
    00000c03: 	endbr64
.Ltmp7476:
    00000c07: 	movq	%rax, %rbp
    00000c0a: 	jmp	.Ltmp7471 # Offset: 3082
.Ltmp7470:
    00000c0c: 	movq	0xd0(%rsp), %rdi
    00000c14: 	cmpq	0x20(%rsp), %rdi
    00000c19: 	je	.Ltmp7471 # Offset: 3097
    00000c1b: 	movq	0xe0(%rsp), %rax
    00000c23: 	leaq	0x1(%rax), %rsi
    00000c27: 	callq	_ZdlPvm@PLT # Offset: 3111
.Ltmp7471:
    00000c2c: 	movq	0xb0(%rsp), %rdi
    00000c34: 	cmpq	0x18(%rsp), %rdi
    00000c39: 	je	.Ltmp7472 # Offset: 3129
    00000c3b: 	movq	0xc0(%rsp), %rax
    00000c43: 	leaq	0x1(%rax), %rsi
    00000c47: 	callq	_ZdlPvm@PLT # Offset: 3143
.Ltmp7472:
    00000c4c: 	movq	0x90(%rsp), %rdi
    00000c54: 	cmpq	0x10(%rsp), %rdi
    00000c59: 	je	.Ltmp7473 # Offset: 3161
    00000c5b: 	movq	0xa0(%rsp), %rax
    00000c63: 	leaq	0x1(%rax), %rsi
    00000c67: 	callq	_ZdlPvm@PLT # Offset: 3175
.Ltmp7473:
    00000c6c: 	movq	0x70(%rsp), %rdi
    00000c71: 	cmpq	0x48(%rsp), %rdi
    00000c76: 	je	.Ltmp7474 # Offset: 3190
    00000c78: 	movq	0x80(%rsp), %rax
    00000c80: 	leaq	0x1(%rax), %rsi
    00000c84: 	callq	_ZdlPvm@PLT # Offset: 3204
.Ltmp7474:
    00000c89: 	movq	0x50(%rsp), %rdi
    00000c8e: 	cmpq	0x40(%rsp), %rdi
    00000c93: 	je	.Ltmp7466 # Offset: 3219
.Ltmp7485:
    00000c99: 	movq	0x60(%rsp), %rax
    00000c9e: 	leaq	0x1(%rax), %rsi
    00000ca2: 	callq	_ZdlPvm@PLT # Offset: 3234
    00000ca7: 	jmp	.Ltmp7466 # Offset: 3239
    00000cac: 	endbr64
.Ltmp7477:
    00000cb0: 	movq	%rax, %rbp
    00000cb3: 	jmp	.Ltmp7472 # Offset: 3251
    00000cb5: 	endbr64
.Ltmp7478:
    00000cb9: 	movq	%rax, %rbp
    00000cbc: 	jmp	.Ltmp7473 # Offset: 3260
    00000cbe: 	endbr64
.Ltmp7479:
    00000cc2: 	movq	%rax, %rbp
    00000cc5: 	jmp	.Ltmp7474 # Offset: 3269
    00000cc7: 	endbr64
    00000ccb: 	jmp	.Ltmp7475 # Offset: 3275
    00000cd0: 	endbr64
    00000cd4: 	jmp	.Ltmp7476 # Offset: 3284
    00000cd9: 	endbr64
    00000cdd: 	jmp	.Ltmp7477 # Offset: 3293
    00000cdf: 	endbr64
    00000ce3: 	jmp	.Ltmp7478 # Offset: 3299
    00000ce5: 	endbr64
    00000ce9: 	jmp	.Ltmp7479 # Offset: 3305
    00000ceb: 	endbr64
    00000cef: 	jmp	.Ltmp7475 # Offset: 3311
    00000cf4: 	endbr64
    00000cf8: 	jmp	.Ltmp7476 # Offset: 3320
    00000cfd: 	endbr64
    00000d01: 	jmp	.Ltmp7477 # Offset: 3329
    00000d03: 	endbr64
    00000d07: 	jmp	.Ltmp7478 # Offset: 3335
    00000d09: 	endbr64
    00000d0d: 	jmp	.Ltmp7479 # Offset: 3341
    00000d0f: 	endbr64
    00000d13: 	jmp	.Ltmp7475 # Offset: 3347
    00000d18: 	endbr64
    00000d1c: 	jmp	.Ltmp7476 # Offset: 3356
    00000d21: 	endbr64
    00000d25: 	jmp	.Ltmp7477 # Offset: 3365
    00000d27: 	endbr64
    00000d2b: 	jmp	.Ltmp7478 # Offset: 3371
    00000d2d: 	endbr64
    00000d31: 	jmp	.Ltmp7479 # Offset: 3377
    00000d33: 	endbr64
    00000d37: 	jmp	.Ltmp7467 # Offset: 3383
    00000d3c: 	endbr64
    00000d40: 	jmp	.Ltmp7468 # Offset: 3392
    00000d45: 	endbr64
    00000d49: 	jmp	.Ltmp7469 # Offset: 3401
    00000d4e: 	endbr64
    00000d52: 	jmp	.Ltmp7467 # Offset: 3410
    00000d57: 	endbr64
    00000d5b: 	jmp	.Ltmp7468 # Offset: 3419
    00000d60: 	endbr64
    00000d64: 	jmp	.Ltmp7469 # Offset: 3428
    00000d69: 	endbr64
    00000d6d: 	jmp	.Ltmp7475 # Offset: 3437
    00000d72: 	endbr64
    00000d76: 	jmp	.Ltmp7476 # Offset: 3446
    00000d7b: 	endbr64
    00000d7f: 	jmp	.Ltmp7477 # Offset: 3455
    00000d84: 	endbr64
    00000d88: 	jmp	.Ltmp7478 # Offset: 3464
    00000d8d: 	endbr64
    00000d91: 	jmp	.Ltmp7479 # Offset: 3473
    00000d96: 	endbr64
    00000d9a: 	movq	%rax, %rbp
    00000d9d: 	jmp	.Ltmp7480 # Offset: 3485
    00000d9f: 	endbr64
    00000da3: 	movq	%rax, %rbp
    00000da6: 	jmp	.Ltmp7481 # Offset: 3494
    00000da8: 	endbr64
    00000dac: 	movq	%rax, %rbp
    00000daf: 	jmp	.Ltmp7482 # Offset: 3503
.Ltmp7480:
    00000db1: 	movq	0xd0(%rsp), %rdi
    00000db9: 	cmpq	0x20(%rsp), %rdi
    00000dbe: 	je	.Ltmp7481 # Offset: 3518
    00000dc0: 	movq	0xe0(%rsp), %rax
    00000dc8: 	leaq	0x1(%rax), %rsi
    00000dcc: 	callq	_ZdlPvm@PLT # Offset: 3532
.Ltmp7481:
    00000dd1: 	movq	0xb0(%rsp), %rdi
    00000dd9: 	cmpq	0x18(%rsp), %rdi
    00000dde: 	je	.Ltmp7482 # Offset: 3550
    00000de0: 	movq	0xc0(%rsp), %rax
    00000de8: 	leaq	0x1(%rax), %rsi
    00000dec: 	callq	_ZdlPvm@PLT # Offset: 3564
.Ltmp7482:
    00000df1: 	movq	0x90(%rsp), %rdi
    00000df9: 	cmpq	0x10(%rsp), %rdi
    00000dfe: 	je	.Ltmp7483 # Offset: 3582
    00000e00: 	movq	0xa0(%rsp), %rax
    00000e08: 	leaq	0x1(%rax), %rsi
    00000e0c: 	callq	_ZdlPvm@PLT # Offset: 3596
.Ltmp7483:
    00000e11: 	movq	0x70(%rsp), %rdi
    00000e16: 	leaq	0x80(%rsp), %rax
    00000e1e: 	cmpq	%rax, %rdi
    00000e21: 	je	.Ltmp7484 # Offset: 3617
    00000e23: 	movq	0x80(%rsp), %rax
    00000e2b: 	leaq	0x1(%rax), %rsi
    00000e2f: 	callq	_ZdlPvm@PLT # Offset: 3631
.Ltmp7484:
    00000e34: 	movq	0x50(%rsp), %rdi
    00000e39: 	leaq	0x60(%rsp), %rax
    00000e3e: 	cmpq	%rax, %rdi
    00000e41: 	jne	.Ltmp7485 # Offset: 3649
    00000e47: 	jmp	.Ltmp7466 # Offset: 3655
    00000e4c: 	endbr64
    00000e50: 	movq	%rax, %rbp
    00000e53: 	jmp	.Ltmp7483 # Offset: 3667
    00000e55: 	endbr64
    00000e59: 	movq	%rax, %rbp
    00000e5c: 	jmp	.Ltmp7484 # Offset: 3676
    00000e5e: 	endbr64
    00000e62: 	jmp	.Ltmp7467 # Offset: 3682
    00000e67: 	endbr64
    00000e6b: 	jmp	.Ltmp7468 # Offset: 3691
    00000e70: 	endbr64
    00000e74: 	jmp	.Ltmp7469 # Offset: 3700
    00000e79: 	endbr64
    00000e7d: 	movq	%rax, %rbp
    00000e80: 	jmp	.Ltmp7486 # Offset: 3712
    00000e82: 	endbr64
    00000e86: 	movq	%rax, %rbp
    00000e89: 	jmp	.Ltmp7487 # Offset: 3721
    00000e8b: 	endbr64
    00000e8f: 	movq	%rax, %rbp
    00000e92: 	jmp	.Ltmp7488 # Offset: 3730
.Ltmp7486:
    00000e94: 	movq	0xd0(%rsp), %rdi
    00000e9c: 	leaq	0xe0(%rsp), %rax
    00000ea4: 	cmpq	%rax, %rdi
    00000ea7: 	je	.Ltmp7487 # Offset: 3751
    00000ea9: 	movq	0xe0(%rsp), %rax
    00000eb1: 	leaq	0x1(%rax), %rsi
    00000eb5: 	callq	_ZdlPvm@PLT # Offset: 3765
.Ltmp7487:
    00000eba: 	movq	0xb0(%rsp), %rdi
    00000ec2: 	leaq	0xc0(%rsp), %rax
    00000eca: 	cmpq	%rax, %rdi
    00000ecd: 	je	.Ltmp7488 # Offset: 3789
    00000ecf: 	movq	0xc0(%rsp), %rax
    00000ed7: 	leaq	0x1(%rax), %rsi
    00000edb: 	callq	_ZdlPvm@PLT # Offset: 3803
.Ltmp7488:
    00000ee0: 	movq	0x90(%rsp), %rdi
    00000ee8: 	leaq	0xa0(%rsp), %rax
    00000ef0: 	cmpq	%rax, %rdi
    00000ef3: 	jne	.Ltmp7489 # Offset: 3827
    00000ef9: 	jmp	.Ltmp7466 # Offset: 3833
DWARF CFI Instructions:
    <empty>
End of Function "_Z16testErase_commonIdEvPKT_PS0_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSB_"

Binary Function "_Z17test_eraseall_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 352
  State       : disassembled
  Address     : 0x4f010
  Size        : 0xfde
  MaxSize     : 0xfe0
  Offset      : 0x4f010
  Section     : .text
  Orc Section : .local.text._Z17test_eraseall_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0351:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rcx
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rcx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xb8, %rsp
    0000001b: 	movq	%rdx, 0x70(%rsp)
    00000020: 	xorl	%edx, %edx
    00000022: 	movq	%rdi, 0x48(%rsp)
    00000027: 	movq	%rsi, 0x28(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0xa8(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	movabsq	$0x500000000, %rax
    00000049: 	divq	%rcx
    0000004c: 	movq	%rax, 0x30(%rsp)
    00000051: 	cmpq	$0x3e8, %rax
    00000057: 	ja	.Ltmp7490 # Offset: 87
    0000005d: 	cmpq	$0x3, %rax
    00000061: 	ja	.Ltmp7491 # Offset: 97
    00000067: 	movq	$0x0, 0xa0(%rsp)
    00000073: 	pxor	%xmm0, %xmm0
    00000077: 	movq	$0x4, 0x30(%rsp)
    00000080: 	movaps	%xmm0, 0x90(%rsp)
.Ltmp7579:
    00000088: 	movq	0x30(%rsp), %rbx
    0000008d: 	leaq	0x90(%rsp), %rdi
    00000095: 	movq	%rbx, %rsi
    00000098: 	callq	_ZNSt6vectorIP13PooledHashMapIddESaIS2_EE17_M_default_appendEm # Offset: 152
    0000009d: 	movl	iterations(%rip), %eax
    000000a3: 	testl	%eax, %eax
    000000a5: 	jle	.Ltmp7492 # Offset: 165
    000000ab: 	movl	%ebx, 0x64(%rsp)
    000000af: 	movq	$0x0, 0x78(%rsp)
    000000b8: 	movl	$0x0, 0x60(%rsp)
.Ltmp7548:
    000000c0: 	movslq	0x60(%rsp), %rdx
    000000c5: 	movslq	%eax, %rcx
    000000c8: 	movq	$0x0, 0x40(%rsp)
    000000d1: 	movq	%rdx, %rsi
    000000d4: 	addq	0x30(%rsp), %rdx
    000000d9: 	subl	%esi, %eax
    000000db: 	cmpq	%rcx, %rdx
    000000de: 	cmovbl	0x64(%rsp), %eax
    000000e3: 	leal	-0x1(%rax), %ecx
    000000e6: 	movl	%eax, %eax
    000000e8: 	shlq	$0x3, %rax
    000000ec: 	movq	%rcx, 0x68(%rsp)
    000000f1: 	movq	%rax, 0x50(%rsp)
.Ltmp7518:
    000000f6: 	movl	$0xc8, %edi
    000000fb: 	callq	_Znwm@PLT # Offset: 251
    00000100: 	movq	$0x0, (%rax)
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	xorl	%esi, %esi
    0000010d: 	movq	%rax, %rdi
    00000110: 	movq	$0x0, 0x8(%rax)
    00000118: 	movq	%rax, %rbp
    0000011b: 	movups	%xmm0, 0x10(%rax)
    0000011f: 	movups	%xmm0, 0x20(%rax)
    00000123: 	movups	%xmm0, 0x30(%rax)
    00000127: 	movups	%xmm0, 0x40(%rax)
    0000012b: 	callq	_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEm # Offset: 299
    00000130: 	movq	$0x0, 0x50(%rbp)
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	movl	$0x40, %edi
    00000141: 	movq	$0x8, 0x58(%rbp)
    00000149: 	movups	%xmm0, 0x60(%rbp)
    0000014d: 	movups	%xmm0, 0x70(%rbp)
    00000151: 	movups	%xmm0, 0x80(%rbp)
    00000158: 	movups	%xmm0, 0x90(%rbp)
    0000015f: 	callq	_Znwm@PLT # Offset: 351
    00000164: 	movq	0x58(%rbp), %rdx
    00000168: 	movq	%rax, 0x50(%rbp)
    0000016c: 	movl	$0x200, %edi
    00000171: 	leaq	-0x4(,%rdx,4), %rdx
    00000179: 	andq	$-0x8, %rdx
    0000017d: 	leaq	(%rax,%rdx), %rbx
    00000181: 	callq	_Znwm@PLT # Offset: 385
    00000186: 	movq	%rax, %xmm1
    0000018b: 	movq	%rax, (%rbx)
    0000018e: 	addq	$0x200, %rax
    00000194: 	movq	%rbx, %xmm7
    00000199: 	movq	%rax, %xmm0
    0000019e: 	punpcklqdq	%xmm1, %xmm1
    000001a2: 	movq	$0x0, 0xb0(%rbp)
    000001ad: 	movq	0x48(%rsp), %rax
    000001b2: 	punpcklqdq	%xmm7, %xmm0
    000001b6: 	movups	%xmm1, 0x60(%rbp)
    000001ba: 	movups	%xmm0, 0x70(%rbp)
    000001be: 	movups	%xmm0, 0x90(%rbp)
    000001c5: 	pxor	%xmm0, %xmm0
    000001c9: 	movq	$0x0, 0xb8(%rbp)
    000001d4: 	movl	$0x3f800000, 0xc0(%rbp)
    000001de: 	movups	%xmm1, 0x80(%rbp)
    000001e5: 	movups	%xmm0, 0xa0(%rbp)
    000001ec: 	cmpq	%rax, 0x28(%rsp)
    000001f1: 	je	.Ltmp7493 # Offset: 497
    000001f7: 	leaq	0x50(%rbp), %rcx
    000001fb: 	xorl	%ebx, %ebx
    000001fd: 	movq	%rax, 0x20(%rsp)
    00000202: 	movq	%rcx, 0x58(%rsp)
    00000207: 	testq	%rbx, %rbx
    0000020a: 	je	.Ltmp7494 # Offset: 522
.Ltmp7499:
    00000210: 	movq	0x20(%rsp), %rax
    00000215: 	pxor	%xmm6, %xmm6
    00000219: 	movsd	(%rax), %xmm0
    0000021d: 	movsd	%xmm0, 0x88(%rsp)
    00000226: 	ucomisd	%xmm6, %xmm0
    0000022a: 	jp	.Ltmp7495 # Offset: 554
    00000230: 	movl	$0x0, %eax
    00000235: 	jne	.Ltmp7495 # Offset: 565
.Ltmp7510:
    0000023b: 	xorl	%edx, %edx
    0000023d: 	divq	0xb0(%rbp)
    00000244: 	movq	0xb8(%rbp), %rax
    0000024b: 	movq	(%rax,%rdx,8), %rbx
    0000024f: 	leaq	(,%rdx,8), %r14
    00000257: 	testq	%rbx, %rbx
    0000025a: 	je	.Ltmp7496 # Offset: 602
    00000260: 	movq	0x20(%rsp), %rax
    00000265: 	movsd	(%rax), %xmm0
    00000269: 	jmp	.Ltmp7497 # Offset: 617
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7498:
    00000270: 	movq	0x10(%rbx), %rbx
    00000274: 	testq	%rbx, %rbx
    00000277: 	je	.Ltmp7496 # Offset: 631
.Ltmp7497:
    0000027d: 	ucomisd	(%rbx), %xmm0
    00000281: 	jp	.Ltmp7498 # Offset: 641
    00000283: 	jne	.Ltmp7498 # Offset: 643
    00000285: 	addq	$0x8, %rbx
.Ltmp7516:
    00000289: 	addq	$0x8, 0x20(%rsp)
    0000028f: 	movq	0x20(%rsp), %rax
    00000294: 	movsd	%xmm0, (%rbx)
    00000298: 	cmpq	%rax, 0x28(%rsp)
    0000029d: 	je	.Ltmp7493 # Offset: 669
    000002a3: 	movq	0xa8(%rbp), %rbx
    000002aa: 	testq	%rbx, %rbx
    000002ad: 	jne	.Ltmp7499 # Offset: 685
.Ltmp7494:
    000002b3: 	movss	DATAat0x537b0(%rip), %xmm2
    000002bb: 	movss	DATAat0x537a4(%rip), %xmm0
    000002c3: 	divss	0xc0(%rbp), %xmm0
    000002cb: 	movaps	%xmm0, %xmm1
    000002ce: 	movss	DATAat0x5379c(%rip), %xmm3
    000002d6: 	movq	0xb0(%rbp), %rax
    000002dd: 	andps	%xmm2, %xmm1
    000002e0: 	ucomiss	%xmm1, %xmm3
    000002e3: 	movq	%rax, 0x10(%rsp)
    000002e8: 	jbe	.Ltmp7500 # Offset: 744
    000002ea: 	cvttss2si	%xmm0, %eax
    000002ee: 	pxor	%xmm1, %xmm1
    000002f2: 	movaps	%xmm0, %xmm3
    000002f5: 	movss	DATAat0x53798(%rip), %xmm7
    000002fd: 	andnps	%xmm0, %xmm2
    00000300: 	cvtsi2ss	%eax, %xmm1
    00000304: 	cmpnless	%xmm1, %xmm3
    00000309: 	andps	%xmm7, %xmm3
    0000030c: 	addss	%xmm3, %xmm1
    00000310: 	orps	%xmm2, %xmm1
    00000313: 	movaps	%xmm1, %xmm0
.Ltmp7500:
    00000316: 	comiss	DATAat0x537a0(%rip), %xmm0
    0000031d: 	jae	.Ltmp7501 # Offset: 797
    00000323: 	cvttss2si	%xmm0, %rax
.Ltmp7517:
    00000328: 	movl	$0x8, %edx
    0000032d: 	movq	0x10(%rsp), %r15
    00000332: 	movq	$0x8, 0xb0(%rbp)
    0000033d: 	cmpq	%rdx, %rax
    00000340: 	cmovbq	%rdx, %rax
    00000344: 	movq	%rax, %rdx
    00000347: 	shrq	%rdx
    0000034a: 	addq	%rdx, %rax
    0000034d: 	movq	%rax, 0xa8(%rbp)
    00000354: 	cmpq	$0x8, %r15
    00000358: 	je	.Ltmp7499 # Offset: 856
    0000035e: 	movl	$0x40, %edi
    00000363: 	callq	_Znam@PLT # Offset: 867
    00000368: 	pxor	%xmm0, %xmm0
    0000036c: 	movq	%rax, %r14
    0000036f: 	movups	%xmm0, (%rax)
    00000372: 	movups	%xmm0, 0x10(%rax)
    00000376: 	movups	%xmm0, 0x20(%rax)
    0000037a: 	movups	%xmm0, 0x30(%rax)
    0000037e: 	movq	0xb8(%rbp), %rax
    00000385: 	movq	%rax, (%rsp)
    00000389: 	testq	%r15, %r15
    0000038c: 	je	.Ltmp7502 # Offset: 908
    00000392: 	movl	$0xc70f6907, %r12d
    00000398: 	movq	%r14, %r15
    0000039b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7508:
    000003a0: 	movq	(%rsp), %rax
    000003a4: 	movq	(%rax,%rbx,8), %r13
    000003a8: 	testq	%r13, %r13
    000003ab: 	jne	.Ltmp7503 # Offset: 939
    000003ad: 	jmp	.Ltmp7504 # Offset: 941
    000003af: 	nop # Size: 1
.Ltmp7506:
    000003b0: 	movq	(%r15), %rax
    000003b3: 	movq	%rax, 0x10(%r13)
    000003b7: 	movq	%r13, (%r15)
    000003ba: 	testq	%r14, %r14
    000003bd: 	je	.Ltmp7504 # Offset: 957
.Ltmp7507:
    000003bf: 	movq	%r14, %r13
.Ltmp7503:
    000003c2: 	movsd	(%r13), %xmm0
    000003c8: 	pxor	%xmm4, %xmm4
    000003cc: 	movq	0x10(%r13), %r14
    000003d0: 	movsd	%xmm0, 0x88(%rsp)
    000003d9: 	ucomisd	%xmm4, %xmm0
    000003dd: 	jp	.Ltmp7505 # Offset: 989
    000003df: 	je	.Ltmp7506 # Offset: 991
.Ltmp7505:
    000003e1: 	movq	%r12, %rdx
    000003e4: 	leaq	0x88(%rsp), %rdi
    000003ec: 	movl	$0x8, %esi
    000003f1: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1009
    000003f6: 	xorl	%edx, %edx
    000003f8: 	divq	0xb0(%rbp)
    000003ff: 	leaq	(%r15,%rdx,8), %rax
    00000403: 	movq	(%rax), %rdx
    00000406: 	movq	%rdx, 0x10(%r13)
    0000040a: 	movq	%r13, (%rax)
    0000040d: 	testq	%r14, %r14
    00000410: 	jne	.Ltmp7507 # Offset: 1040
.Ltmp7504:
    00000412: 	addq	$0x1, %rbx
    00000416: 	cmpq	%rbx, 0x10(%rsp)
    0000041b: 	jne	.Ltmp7508 # Offset: 1051
    0000041d: 	movq	0xb8(%rbp), %rax
    00000424: 	movq	%r15, %r14
    00000427: 	movq	%rax, (%rsp)
.Ltmp7502:
    0000042b: 	movq	(%rsp), %rax
    0000042f: 	testq	%rax, %rax
    00000432: 	je	.Ltmp7509 # Offset: 1074
    00000434: 	movq	%rax, %rdi
    00000437: 	callq	_ZdaPv@PLT # Offset: 1079
.Ltmp7509:
    0000043c: 	movq	%r14, 0xb8(%rbp)
    00000443: 	jmp	.Ltmp7499 # Offset: 1091
    00000448: 	nopl	(%rax,%rax) # Size: 8
.Ltmp7495:
    00000450: 	leaq	0x88(%rsp), %rdi
    00000458: 	movl	$0xc70f6907, %edx
    0000045d: 	movl	$0x8, %esi
    00000462: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 1122
    00000467: 	jmp	.Ltmp7510 # Offset: 1127
    0000046c: 	nopl	(%rax) # Size: 4
.Ltmp7496:
    00000470: 	movq	0x48(%rbp), %rdx
    00000474: 	movq	0x30(%rbp), %rdi
    00000478: 	movq	0x38(%rbp), %rcx
    0000047c: 	movq	%rdx, %rax
    0000047f: 	subq	0x28(%rbp), %rax
    00000483: 	movq	%rdi, %rsi
    00000486: 	sarq	$0x3, %rax
    0000048a: 	cmpq	$0x1, %rdx
    0000048e: 	adcq	$-0x1, %rax
    00000492: 	subq	%rcx, %rsi
    00000495: 	sarq	$0x3, %rsi
    00000499: 	shlq	$0x6, %rax
    0000049d: 	addq	%rsi, %rax
    000004a0: 	movq	0x20(%rbp), %rsi
    000004a4: 	subq	0x10(%rbp), %rsi
    000004a8: 	sarq	$0x3, %rsi
    000004ac: 	addq	%rsi, %rax
    000004af: 	je	.Ltmp7511 # Offset: 1199
.Ltmp7586:
    000004b5: 	cmpq	%rcx, %rdi
    000004b8: 	je	.Ltmp7512 # Offset: 1208
    000004be: 	movq	-0x8(%rdi), %r12
    000004c2: 	subq	$0x8, %rdi
    000004c6: 	movq	%rdi, 0x30(%rbp)
.Ltmp7577:
    000004ca: 	movq	0x60(%rbp), %rcx
    000004ce: 	movq	0x78(%rbp), %rdx
    000004d2: 	movq	%rcx, %rax
    000004d5: 	subq	0x68(%rbp), %rax
    000004d9: 	sarq	$0x5, %rax
    000004dd: 	addq	%r12, %rax
    000004e0: 	js	.Ltmp7513 # Offset: 1248
    000004e6: 	cmpq	$0xf, %rax
    000004ea: 	jg	.Ltmp7514 # Offset: 1258
    000004f0: 	movq	%r12, %rbx
    000004f3: 	shlq	$0x5, %rbx
    000004f7: 	leaq	(%rcx,%rbx), %rax
    000004fb: 	movq	%rax, 0x10(%rsp)
    00000500: 	movq	%rax, %rcx
    00000503: 	movq	%r12, 0x18(%rax)
.Ltmp7558:
    00000507: 	movq	0x20(%rsp), %rax
    0000050c: 	addq	0xb8(%rbp), %r14
    00000513: 	movq	0xa8(%rbp), %r12
    0000051a: 	movsd	(%rax), %xmm0
    0000051e: 	movq	(%r14), %rax
    00000521: 	movq	$0x0, 0x8(%rcx)
    00000529: 	movq	%rax, 0x10(%rcx)
    0000052d: 	movq	0xa0(%rbp), %rax
    00000534: 	movsd	%xmm0, (%rcx)
    00000538: 	addq	$0x1, %rax
    0000053c: 	movq	%rcx, (%r14)
    0000053f: 	movq	%rax, 0xa0(%rbp)
    00000546: 	cmpq	%r12, %rax
    00000549: 	ja	.Ltmp7515 # Offset: 1353
.Ltmp7563:
    0000054f: 	movq	0x10(%rsp), %rbx
    00000554: 	movq	0x20(%rsp), %rax
    00000559: 	addq	$0x8, %rbx
    0000055d: 	movsd	(%rax), %xmm0
    00000561: 	jmp	.Ltmp7516 # Offset: 1377
.Ltmp7501:
    00000566: 	subss	DATAat0x537a0(%rip), %xmm0
    0000056e: 	cvttss2si	%xmm0, %rax
    00000573: 	btcq	$0x3f, %rax
    00000578: 	jmp	.Ltmp7517 # Offset: 1400
.Ltmp7493:
    0000057d: 	movq	0x40(%rsp), %rax
    00000582: 	movq	0x90(%rsp), %rcx
    0000058a: 	movq	%rbp, (%rcx,%rax)
    0000058e: 	addq	$0x8, %rax
    00000592: 	movq	%rcx, 0x10(%rsp)
    00000597: 	movq	%rax, 0x40(%rsp)
    0000059c: 	cmpq	%rax, 0x50(%rsp)
    000005a1: 	jne	.Ltmp7518 # Offset: 1441
    000005a7: 	callq	clock@PLT # Offset: 1447
    000005ac: 	movq	0x68(%rsp), %rcx
    000005b1: 	movq	%rax, start_time(%rip)
    000005b8: 	movq	0x10(%rsp), %rax
    000005bd: 	leaq	0x8(%rax,%rcx,8), %rcx
    000005c2: 	movq	%rax, 0x38(%rsp)
    000005c7: 	movq	%rcx, (%rsp)
    000005cb: 	movq	%rax, 0x20(%rsp)
.Ltmp7538:
    000005d0: 	movq	0x20(%rsp), %rax
    000005d5: 	movq	(%rax), %r12
    000005d8: 	movq	0xb8(%r12), %r15
    000005e0: 	movq	0xb0(%r12), %r14
    000005e8: 	movq	(%r15), %rcx
    000005eb: 	testq	%r14, %r14
    000005ee: 	je	.Ltmp7519 # Offset: 1518
    000005f4: 	testq	%rcx, %rcx
    000005f7: 	je	.Ltmp7520 # Offset: 1527
.Ltmp7557:
    000005fd: 	xorl	%eax, %eax
.Ltmp7536:
    000005ff: 	movq	%rcx, %rbx
    00000602: 	movq	%r15, %rdx
    00000605: 	movq	0x10(%rbx), %rsi
    00000609: 	testq	%rsi, %rsi
    0000060c: 	je	.Ltmp7521 # Offset: 1548
    00000612: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7530:
    00000618: 	movq	%rax, %rbp
    0000061b: 	movq	%rsi, %r13
.Ltmp7534:
    0000061e: 	leaq	(%rdx,%rax,8), %rdi
    00000622: 	movq	%rcx, %rax
    00000625: 	jmp	.Ltmp7522 # Offset: 1573
    00000627: 	nopw	(%rax,%rax) # Size: 9
.Ltmp7524:
    00000630: 	movq	0x10(%rax), %rdx
    00000634: 	cmpq	%rbx, %rdx
    00000637: 	je	.Ltmp7523 # Offset: 1591
    0000063d: 	movq	%rdx, %rax
.Ltmp7522:
    00000640: 	testq	%rax, %rax
    00000643: 	jne	.Ltmp7524 # Offset: 1603
.Ltmp7552:
    00000645: 	cmpq	%rcx, %rbx
    00000648: 	je	.Ltmp7525 # Offset: 1608
.Ltmp7553:
    0000064e: 	movq	0x40(%r12), %rcx
    00000653: 	movq	0x30(%r12), %rax
    00000658: 	leaq	-0x8(%rcx), %rdx
    0000065c: 	cmpq	%rdx, %rax
    0000065f: 	je	.Ltmp7526 # Offset: 1631
    00000665: 	movq	0x18(%rbx), %rdx
    00000669: 	addq	$0x8, %rax
    0000066d: 	movq	%rdx, -0x8(%rax)
    00000671: 	movq	%rax, 0x30(%r12)
.Ltmp7556:
    00000676: 	movq	0x60(%r12), %rsi
    0000067b: 	movq	0x18(%rbx), %rdx
    0000067f: 	movq	0x78(%r12), %rcx
    00000684: 	movq	%rsi, %rax
    00000687: 	subq	0x68(%r12), %rax
    0000068c: 	sarq	$0x5, %rax
    00000690: 	addq	%rdx, %rax
    00000693: 	js	.Ltmp7527 # Offset: 1683
    00000699: 	cmpq	$0xf, %rax
    0000069d: 	jg	.Ltmp7528 # Offset: 1693
    000006a3: 	shlq	$0x5, %rdx
    000006a7: 	leaq	(%rsi,%rdx), %rax
.Ltmp7554:
    000006ab: 	movq	$-0x1, 0x18(%rax)
    000006b3: 	subq	$0x1, 0xa0(%r12)
    000006bc: 	testq	%r13, %r13
    000006bf: 	je	.Ltmp7529 # Offset: 1727
    000006c5: 	movq	%r13, %rbx
    000006c8: 	movq	0xb8(%r12), %rdx
    000006d0: 	movq	%rbp, %rax
    000006d3: 	movq	0x10(%rbx), %rsi
    000006d7: 	movq	(%rdx,%rbp,8), %rcx
    000006db: 	testq	%rsi, %rsi
    000006de: 	jne	.Ltmp7530 # Offset: 1758
.Ltmp7521:
    000006e4: 	cmpq	%rax, %r14
    000006e7: 	jbe	.Ltmp7531 # Offset: 1767
    000006ed: 	leaq	0x1(%rax), %rbp
    000006f1: 	cmpq	%rbp, %r14
    000006f4: 	ja	.Ltmp7532 # Offset: 1780
    000006f6: 	jmp	.Ltmp7533 # Offset: 1782
    000006fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7535:
    00000700: 	addq	$0x1, %rbp
    00000704: 	cmpq	%rbp, %r14
    00000707: 	jbe	.Ltmp7534 # Offset: 1799
.Ltmp7532:
    0000070d: 	movq	(%r15,%rbp,8), %r13
    00000711: 	testq	%r13, %r13
    00000714: 	je	.Ltmp7535 # Offset: 1812
    00000716: 	jmp	.Ltmp7534 # Offset: 1814
.Ltmp7520:
    0000071b: 	cmpq	$0x1, %r14
    0000071f: 	je	.Ltmp7529 # Offset: 1823
    00000721: 	movl	$0x1, %eax
    00000726: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp7537:
    00000730: 	movq	(%r15,%rax,8), %rcx
    00000734: 	testq	%rcx, %rcx
    00000737: 	jne	.Ltmp7536 # Offset: 1847
    0000073d: 	addq	$0x1, %rax
    00000741: 	cmpq	%rax, %r14
    00000744: 	jne	.Ltmp7537 # Offset: 1860
    00000746: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp7529:
    00000750: 	addq	$0x8, 0x20(%rsp)
    00000756: 	movq	0x20(%rsp), %rax
    0000075b: 	cmpq	(%rsp), %rax
    0000075f: 	jne	.Ltmp7538 # Offset: 1887
    00000765: 	callq	clock@PLT # Offset: 1893
    0000076a: 	pxor	%xmm0, %xmm0
    0000076e: 	movq	0x38(%rsp), %r12
    00000773: 	movq	(%rsp), %r14
    00000777: 	movq	%rax, end_time(%rip)
    0000077e: 	subq	start_time(%rip), %rax
    00000785: 	cvtsi2sd	%rax, %xmm0
    0000078a: 	divsd	DATAat0x53788(%rip), %xmm0
    00000792: 	addsd	0x78(%rsp), %xmm0
    00000798: 	movsd	%xmm0, 0x78(%rsp)
    0000079e: 	nop # Size: 2
.Ltmp7547:
    000007a0: 	movq	(%r12), %rbp
    000007a4: 	testq	%rbp, %rbp
    000007a7: 	je	.Ltmp7539 # Offset: 1959
    000007ad: 	movq	0xb8(%rbp), %rdi
    000007b4: 	testq	%rdi, %rdi
    000007b7: 	je	.Ltmp7540 # Offset: 1975
    000007b9: 	callq	_ZdaPv@PLT # Offset: 1977
.Ltmp7540:
    000007be: 	movq	0x50(%rbp), %rdi
    000007c2: 	testq	%rdi, %rdi
    000007c5: 	je	.Ltmp7541 # Offset: 1989
    000007c7: 	movq	0x98(%rbp), %rax
    000007ce: 	movq	0x78(%rbp), %rbx
    000007d2: 	leaq	0x8(%rax), %r13
    000007d6: 	cmpq	%rbx, %r13
    000007d9: 	jbe	.Ltmp7542 # Offset: 2009
    000007db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7543:
    000007e0: 	movq	(%rbx), %rdi
    000007e3: 	movl	$0x200, %esi
    000007e8: 	addq	$0x8, %rbx
    000007ec: 	callq	_ZdlPvm@PLT # Offset: 2028
    000007f1: 	cmpq	%rbx, %r13
    000007f4: 	ja	.Ltmp7543 # Offset: 2036
    000007f6: 	movq	0x50(%rbp), %rdi
.Ltmp7542:
    000007fa: 	movq	0x58(%rbp), %rax
    000007fe: 	leaq	(,%rax,8), %rsi
    00000806: 	callq	_ZdlPvm@PLT # Offset: 2054
.Ltmp7541:
    0000080b: 	movq	(%rbp), %rdi
    0000080f: 	testq	%rdi, %rdi
    00000812: 	je	.Ltmp7544 # Offset: 2066
    00000814: 	movq	0x48(%rbp), %rax
    00000818: 	movq	0x28(%rbp), %rbx
    0000081c: 	leaq	0x8(%rax), %r13
    00000820: 	cmpq	%rbx, %r13
    00000823: 	jbe	.Ltmp7545 # Offset: 2083
    00000825: 	nopl	(%rax) # Size: 3
.Ltmp7546:
    00000828: 	movq	(%rbx), %rdi
    0000082b: 	movl	$0x200, %esi
    00000830: 	addq	$0x8, %rbx
    00000834: 	callq	_ZdlPvm@PLT # Offset: 2100
    00000839: 	cmpq	%rbx, %r13
    0000083c: 	ja	.Ltmp7546 # Offset: 2108
    0000083e: 	movq	(%rbp), %rdi
.Ltmp7545:
    00000842: 	movq	0x8(%rbp), %rax
    00000846: 	leaq	(,%rax,8), %rsi
    0000084e: 	callq	_ZdlPvm@PLT # Offset: 2126
.Ltmp7544:
    00000853: 	movl	$0xc8, %esi
    00000858: 	movq	%rbp, %rdi
    0000085b: 	callq	_ZdlPvm@PLT # Offset: 2139
.Ltmp7539:
    00000860: 	movq	$0x0, (%r12)
    00000868: 	addq	$0x8, %r12
    0000086c: 	cmpq	%r14, %r12
    0000086f: 	jne	.Ltmp7547 # Offset: 2159
    00000875: 	movl	0x30(%rsp), %ecx
    00000879: 	movl	iterations(%rip), %eax
    0000087f: 	addl	%ecx, 0x60(%rsp)
    00000883: 	movl	0x60(%rsp), %ecx
    00000887: 	cmpl	%ecx, %eax
    00000889: 	jg	.Ltmp7548 # Offset: 2185
.Ltmp7594:
    0000088f: 	movq	0x70(%rsp), %rdi
    00000894: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2196
    00000899: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000008a0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000008a7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008ae: 	je	.Ltmp7549 # Offset: 2222
.Ltmp7593:
    000008b4: 	movq	-0x20(%rax), %rdi
    000008b8: 	movsd	0x78(%rsp), %xmm0
    000008be: 	callq	_Z13record_resultdPKc # Offset: 2238
    000008c3: 	cmpq	$0x0, 0x10(%rsp)
    000008c9: 	je	.Ltmp7550 # Offset: 2249
    000008cf: 	movq	0xa8(%rsp), %rax
    000008d7: 	subq	%fs:0x28, %rax
    000008e0: 	jne	.Ltmp7551 # Offset: 2272
    000008e6: 	movq	0xa0(%rsp), %rsi
    000008ee: 	movq	0x10(%rsp), %rdi
    000008f3: 	addq	$0xb8, %rsp
    000008fa: 	popq	%rbx
    000008fb: 	popq	%rbp
    000008fc: 	subq	%rdi, %rsi
    000008ff: 	popq	%r12
    00000901: 	popq	%r13
    00000903: 	popq	%r14
    00000905: 	popq	%r15
    00000907: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 2311
    0000090c: 	nopl	(%rax) # Size: 4
.Ltmp7523:
    00000910: 	cmpq	%rbx, %rax
    00000913: 	je	.Ltmp7552 # Offset: 2323
    00000919: 	movq	%rsi, 0x10(%rax)
    0000091d: 	movq	(%rdi), %rcx
    00000920: 	cmpq	%rcx, %rbx
    00000923: 	jne	.Ltmp7553 # Offset: 2339
.Ltmp7525:
    00000929: 	movq	%rsi, (%rdi)
    0000092c: 	jmp	.Ltmp7553 # Offset: 2348
    00000931: 	nopl	(%rax) # Size: 7
.Ltmp7528:
    00000938: 	movq	%rax, %rdx
    0000093b: 	sarq	$0x4, %rdx
.Ltmp7555:
    0000093f: 	movq	%rdx, %rsi
    00000942: 	shlq	$0x4, %rsi
    00000946: 	subq	%rsi, %rax
    00000949: 	shlq	$0x5, %rax
    0000094d: 	addq	(%rcx,%rdx,8), %rax
    00000951: 	jmp	.Ltmp7554 # Offset: 2385
    00000956: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp7527:
    00000960: 	movq	%rax, %rdx
    00000963: 	notq	%rdx
    00000966: 	shrq	$0x4, %rdx
    0000096a: 	notq	%rdx
    0000096d: 	jmp	.Ltmp7555 # Offset: 2413
    0000096f: 	nop # Size: 1
.Ltmp7526:
    00000970: 	leaq	0x18(%rbx), %rsi
    00000974: 	movq	%r12, %rdi
    00000977: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJRKmEEEvDpOT_ # Offset: 2423
    0000097c: 	jmp	.Ltmp7556 # Offset: 2428
    00000981: 	nopl	(%rax) # Size: 7
.Ltmp7531:
    00000988: 	movq	%rax, %rbp
    0000098b: 	xorl	%r13d, %r13d
    0000098e: 	jmp	.Ltmp7534 # Offset: 2446
.Ltmp7519:
    00000993: 	testq	%rcx, %rcx
    00000996: 	je	.Ltmp7529 # Offset: 2454
    0000099c: 	jmp	.Ltmp7557 # Offset: 2460
.Ltmp7514:
    000009a1: 	movq	%rax, %rcx
    000009a4: 	andl	$0xf, %eax
    000009a7: 	sarq	$0x4, %rcx
.Ltmp7578:
    000009ab: 	movq	(%rdx,%rcx,8), %rbx
    000009af: 	shlq	$0x5, %rax
    000009b3: 	addq	%rax, %rbx
    000009b6: 	movq	%rbx, 0x10(%rsp)
    000009bb: 	movq	%rbx, %rcx
    000009be: 	movq	%r12, 0x18(%rbx)
    000009c2: 	jmp	.Ltmp7558 # Offset: 2498
.Ltmp7515:
    000009c7: 	movq	0xb0(%rbp), %rax
    000009ce: 	movss	0xc0(%rbp), %xmm1
    000009d6: 	movq	%rax, (%rsp)
    000009da: 	testq	%r12, %r12
    000009dd: 	je	.Ltmp7559 # Offset: 2525
    000009e3: 	js	.Ltmp7560 # Offset: 2531
    000009e9: 	pxor	%xmm0, %xmm0
    000009ed: 	cvtsi2ss	%r12, %xmm0
.Ltmp7589:
    000009f2: 	divss	%xmm1, %xmm0
    000009f6: 	movss	DATAat0x537b0(%rip), %xmm2
    000009fe: 	movss	DATAat0x5379c(%rip), %xmm3
    00000a06: 	movaps	%xmm0, %xmm1
    00000a09: 	andps	%xmm2, %xmm1
    00000a0c: 	ucomiss	%xmm1, %xmm3
    00000a0f: 	jbe	.Ltmp7561 # Offset: 2575
    00000a11: 	cvttss2si	%xmm0, %eax
    00000a15: 	pxor	%xmm1, %xmm1
    00000a19: 	movaps	%xmm0, %xmm3
    00000a1c: 	movss	DATAat0x53798(%rip), %xmm7
    00000a24: 	andnps	%xmm0, %xmm2
    00000a27: 	cvtsi2ss	%eax, %xmm1
    00000a2b: 	cmpnless	%xmm1, %xmm3
    00000a30: 	andps	%xmm7, %xmm3
    00000a33: 	addss	%xmm3, %xmm1
    00000a37: 	orps	%xmm2, %xmm1
    00000a3a: 	movaps	%xmm1, %xmm0
.Ltmp7561:
    00000a3d: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000a44: 	jae	.Ltmp7562 # Offset: 2628
    00000a4a: 	cvttss2si	%xmm0, %rax
.Ltmp7588:
    00000a4f: 	movl	$0x8, %edx
    00000a54: 	movq	%r12, %xmm7
    00000a59: 	cmpq	%rdx, %rax
    00000a5c: 	cmovbq	%rdx, %rax
    00000a60: 	movq	%rax, %rdx
    00000a63: 	shrq	%rdx
    00000a66: 	addq	%rax, %rdx
    00000a69: 	movq	%rdx, %xmm0
    00000a6e: 	punpcklqdq	%xmm7, %xmm0
    00000a72: 	movups	%xmm0, 0xa8(%rbp)
    00000a79: 	cmpq	(%rsp), %r12
    00000a7d: 	je	.Ltmp7563 # Offset: 2685
    00000a83: 	movq	%r12, %rax
    00000a86: 	shrq	$0x3c, %rax
    00000a8a: 	jne	.Ltmp7564 # Offset: 2698
    00000a90: 	leaq	(,%r12,8), %rdi
.Ltmp7582:
    00000a98: 	callq	_Znam@PLT # Offset: 2712
    00000a9d: 	xorl	%esi, %esi
    00000a9f: 	leaq	(,%r12,8), %rdx
    00000aa7: 	movq	%rax, %rdi
    00000aaa: 	movq	%rax, %r15
    00000aad: 	callq	memset@PLT # Offset: 2733
    00000ab2: 	cmpq	$0x0, (%rsp)
    00000ab7: 	movq	0xb8(%rbp), %r13
    00000abe: 	je	.Ltmp7565 # Offset: 2750
    00000ac4: 	movq	%r13, 0x38(%rsp)
    00000ac9: 	xorl	%r12d, %r12d
    00000acc: 	movl	$0xc70f6907, %r14d
    00000ad2: 	movq	%r15, %r13
    00000ad5: 	nopl	(%rax) # Size: 3
.Ltmp7571:
    00000ad8: 	movq	0x38(%rsp), %rax
    00000add: 	movq	(%rax,%r12,8), %rbx
    00000ae1: 	testq	%rbx, %rbx
    00000ae4: 	jne	.Ltmp7566 # Offset: 2788
    00000ae6: 	jmp	.Ltmp7567 # Offset: 2790
    00000ae8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp7569:
    00000af0: 	movq	(%r13), %rax
    00000af4: 	movq	%rax, 0x10(%rbx)
    00000af8: 	movq	%rbx, (%r13)
    00000afc: 	testq	%r15, %r15
    00000aff: 	je	.Ltmp7567 # Offset: 2815
.Ltmp7570:
    00000b01: 	movq	%r15, %rbx
.Ltmp7566:
    00000b04: 	movsd	(%rbx), %xmm0
    00000b08: 	pxor	%xmm5, %xmm5
    00000b0c: 	movq	0x10(%rbx), %r15
    00000b10: 	movsd	%xmm0, 0x88(%rsp)
    00000b19: 	ucomisd	%xmm5, %xmm0
    00000b1d: 	jp	.Ltmp7568 # Offset: 2845
    00000b1f: 	je	.Ltmp7569 # Offset: 2847
.Ltmp7568:
    00000b21: 	movq	%r14, %rdx
    00000b24: 	leaq	0x88(%rsp), %rdi
    00000b2c: 	movl	$0x8, %esi
    00000b31: 	callq	_ZSt11_Hash_bytesPKvmm@PLT # Offset: 2865
    00000b36: 	xorl	%edx, %edx
    00000b38: 	divq	0xb0(%rbp)
    00000b3f: 	leaq	(%r13,%rdx,8), %rax
    00000b44: 	movq	(%rax), %rdx
    00000b47: 	movq	%rdx, 0x10(%rbx)
    00000b4b: 	movq	%rbx, (%rax)
    00000b4e: 	testq	%r15, %r15
    00000b51: 	jne	.Ltmp7570 # Offset: 2897
.Ltmp7567:
    00000b53: 	addq	$0x1, %r12
    00000b57: 	cmpq	%r12, (%rsp)
    00000b5b: 	jne	.Ltmp7571 # Offset: 2907
    00000b61: 	movq	%r13, %r15
    00000b64: 	movq	0xb8(%rbp), %r13
.Ltmp7565:
    00000b6b: 	testq	%r13, %r13
    00000b6e: 	je	.Ltmp7572 # Offset: 2926
    00000b70: 	movq	%r13, %rdi
    00000b73: 	callq	_ZdaPv@PLT # Offset: 2931
.Ltmp7572:
    00000b78: 	movq	%r15, 0xb8(%rbp)
    00000b7f: 	jmp	.Ltmp7563 # Offset: 2943
.Ltmp7511:
    00000b84: 	movq	0x98(%rbp), %r8
    00000b8b: 	movq	0x78(%rbp), %rax
    00000b8f: 	movq	0x70(%rbp), %rsi
    00000b93: 	movq	0x80(%rbp), %r12
    00000b9a: 	movq	%r8, %r10
    00000b9d: 	movq	0x60(%rbp), %r9
    00000ba1: 	subq	%rax, %r10
    00000ba4: 	sarq	$0x3, %r10
    00000ba8: 	cmpq	$0x1, %r8
    00000bac: 	adcq	$-0x1, %r10
    00000bb0: 	subq	0x88(%rbp), %r12
    00000bb7: 	shlq	$0x4, %r10
    00000bbb: 	sarq	$0x5, %r12
    00000bbf: 	addq	%r10, %r12
    00000bc2: 	movq	%rsi, %r10
    00000bc5: 	subq	%r9, %r10
    00000bc8: 	sarq	$0x5, %r10
    00000bcc: 	addq	%r10, %r12
    00000bcf: 	leaq	0x80(%r12), %rbx
    00000bd7: 	cmpq	%rbx, %r12
    00000bda: 	jb	.Ltmp7573 # Offset: 3034
    00000be0: 	movq	0x68(%rbp), %r11
    00000be4: 	movq	%r9, %r10
    00000be7: 	subq	%r11, %r10
    00000bea: 	sarq	$0x5, %r10
    00000bee: 	addq	%rbx, %r10
    00000bf1: 	js	.Ltmp7574 # Offset: 3057
    00000bf7: 	cmpq	$0xf, %r10
    00000bfb: 	jg	.Ltmp7575 # Offset: 3067
    00000c01: 	shlq	$0x5, %rbx
    00000c05: 	addq	%rbx, %r9
    00000c08: 	jmp	.Ltmp7576 # Offset: 3080
    00000c0d: 	nopl	(%rax) # Size: 3
.Ltmp7512:
    00000c10: 	movq	-0x8(%rdx), %rax
    00000c14: 	movl	$0x200, %esi
    00000c19: 	movq	0x1f8(%rax), %r12
    00000c20: 	callq	_ZdlPvm@PLT # Offset: 3104
    00000c25: 	movq	0x48(%rbp), %rdx
    00000c29: 	movq	-0x8(%rdx), %rax
    00000c2d: 	subq	$0x8, %rdx
    00000c31: 	leaq	0x1f8(%rax), %rcx
    00000c38: 	movq	%rax, %xmm7
    00000c3d: 	addq	$0x200, %rax
    00000c43: 	movq	%rcx, %xmm0
    00000c48: 	punpcklqdq	%xmm7, %xmm0
    00000c4c: 	movq	%rdx, %xmm7
    00000c51: 	movups	%xmm0, 0x30(%rbp)
    00000c55: 	movq	%rax, %xmm0
    00000c5a: 	punpcklqdq	%xmm7, %xmm0
    00000c5e: 	movups	%xmm0, 0x40(%rbp)
    00000c62: 	jmp	.Ltmp7577 # Offset: 3170
.Ltmp7513:
    00000c67: 	movq	%rax, %rcx
    00000c6a: 	notq	%rcx
    00000c6d: 	shrq	$0x4, %rcx
    00000c71: 	notq	%rcx
    00000c74: 	movq	%rcx, %rsi
    00000c77: 	shlq	$0x4, %rsi
    00000c7b: 	subq	%rsi, %rax
    00000c7e: 	jmp	.Ltmp7578 # Offset: 3198
.Ltmp7490:
    00000c83: 	movq	$0x3e8, 0x30(%rsp)
.Ltmp7491:
    00000c8c: 	movq	$0x0, 0xa0(%rsp)
    00000c98: 	pxor	%xmm0, %xmm0
    00000c9c: 	movaps	%xmm0, 0x90(%rsp)
    00000ca4: 	jmp	.Ltmp7579 # Offset: 3236
.Ltmp7559:
    00000ca9: 	movss	DATAat0x537a4(%rip), %xmm0
    00000cb1: 	movss	DATAat0x5379c(%rip), %xmm2
    00000cb9: 	divss	%xmm1, %xmm0
    00000cbd: 	movss	DATAat0x537b0(%rip), %xmm1
    00000cc5: 	andps	%xmm0, %xmm1
    00000cc8: 	ucomiss	%xmm1, %xmm2
    00000ccb: 	jbe	.Ltmp7580 # Offset: 3275
    00000ccd: 	cvttss2si	%xmm0, %eax
    00000cd1: 	pxor	%xmm1, %xmm1
    00000cd5: 	movaps	%xmm0, %xmm2
    00000cd8: 	movss	DATAat0x53798(%rip), %xmm7
    00000ce0: 	cvtsi2ss	%eax, %xmm1
    00000ce4: 	cmpnless	%xmm1, %xmm2
    00000ce9: 	andps	%xmm7, %xmm2
    00000cec: 	addss	%xmm2, %xmm1
    00000cf0: 	movss	DATAat0x537b0(%rip), %xmm2
    00000cf8: 	andnps	%xmm0, %xmm2
    00000cfb: 	orps	%xmm2, %xmm1
    00000cfe: 	movaps	%xmm1, %xmm0
.Ltmp7580:
    00000d01: 	comiss	DATAat0x537a0(%rip), %xmm0
    00000d08: 	jae	.Ltmp7581 # Offset: 3336
    00000d0e: 	cvttss2si	%xmm0, %rax
.Ltmp7587:
    00000d13: 	movq	$0x8, 0xb0(%rbp)
    00000d1e: 	movl	$0x8, %edx
    00000d23: 	cmpq	%rdx, %rax
    00000d26: 	cmovbq	%rdx, %rax
    00000d2a: 	movq	%rax, %rdx
    00000d2d: 	shrq	%rdx
    00000d30: 	addq	%rdx, %rax
    00000d33: 	cmpq	$0x8, (%rsp)
    00000d38: 	movq	%rax, 0xa8(%rbp)
    00000d3f: 	je	.Ltmp7563 # Offset: 3391
    00000d45: 	movl	$0x40, %edi
    00000d4a: 	movl	$0x8, %r12d
    00000d50: 	jmp	.Ltmp7582 # Offset: 3408
.Ltmp7533:
    00000d55: 	xorl	%r13d, %r13d
    00000d58: 	jmp	.Ltmp7534 # Offset: 3416
.Ltmp7573:
    00000d5d: 	movq	0x58(%rsp), %rdi
    00000d62: 	movl	$0x80, %esi
    00000d67: 	callq	"_ZNSt5dequeI14PooledHashNodeIddESaIS1_EE17_M_default_appendEm.part.0/1" # Offset: 3431
    00000d6c: 	movq	0x30(%rbp), %rdi
    00000d70: 	leaq	0x88(%rsp), %r15
    00000d78: 	jmp	.Ltmp7583 # Offset: 3448
    00000d7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7585:
    00000d80: 	movq	%rbx, (%rdi)
    00000d83: 	addq	$0x8, %rdi
    00000d87: 	movq	%rdi, 0x30(%rbp)
    00000d8b: 	cmpq	%rbx, %r12
    00000d8e: 	je	.Ltmp7584 # Offset: 3470
.Ltmp7583:
    00000d90: 	movq	0x40(%rbp), %rax
    00000d94: 	subq	$0x1, %rbx
    00000d98: 	movq	%rbx, 0x88(%rsp)
    00000da0: 	subq	$0x8, %rax
    00000da4: 	cmpq	%rax, %rdi
    00000da7: 	jne	.Ltmp7585 # Offset: 3495
    00000da9: 	movq	%r15, %rsi
    00000dac: 	movq	%rbp, %rdi
    00000daf: 	callq	_ZNSt5dequeImSaImEE16_M_push_back_auxIJmEEEvDpOT_ # Offset: 3503
    00000db4: 	movq	0x30(%rbp), %rdi
    00000db8: 	cmpq	%rbx, %r12
    00000dbb: 	jne	.Ltmp7583 # Offset: 3515
.Ltmp7584:
    00000dbd: 	movq	0x38(%rbp), %rcx
    00000dc1: 	movq	0x48(%rbp), %rdx
    00000dc5: 	jmp	.Ltmp7586 # Offset: 3525
.Ltmp7581:
    00000dca: 	subss	DATAat0x537a0(%rip), %xmm0
    00000dd2: 	cvttss2si	%xmm0, %rax
    00000dd7: 	btcq	$0x3f, %rax
    00000ddc: 	jmp	.Ltmp7587 # Offset: 3548
.Ltmp7562:
    00000de1: 	subss	DATAat0x537a0(%rip), %xmm0
    00000de9: 	cvttss2si	%xmm0, %rax
    00000dee: 	btcq	$0x3f, %rax
    00000df3: 	jmp	.Ltmp7588 # Offset: 3571
.Ltmp7560:
    00000df8: 	movq	%r12, %rax
    00000dfb: 	movq	%r12, %rdx
    00000dfe: 	pxor	%xmm0, %xmm0
    00000e02: 	shrq	%rax
    00000e05: 	andl	$0x1, %edx
    00000e08: 	orq	%rdx, %rax
    00000e0b: 	cvtsi2ss	%rax, %xmm0
    00000e10: 	addss	%xmm0, %xmm0
    00000e14: 	jmp	.Ltmp7589 # Offset: 3604
.Ltmp7550:
    00000e19: 	movq	0xa8(%rsp), %rax
    00000e21: 	subq	%fs:0x28, %rax
    00000e2a: 	jne	.Ltmp7551 # Offset: 3626
    00000e30: 	addq	$0xb8, %rsp
    00000e37: 	popq	%rbx
    00000e38: 	popq	%rbp
    00000e39: 	popq	%r12
    00000e3b: 	popq	%r13
    00000e3d: 	popq	%r14
    00000e3f: 	popq	%r15
    00000e41: 	retq # Offset: 3649
.Ltmp7574:
    00000e42: 	movq	%r10, %rbx
    00000e45: 	notq	%rbx
    00000e48: 	shrq	$0x4, %rbx
    00000e4c: 	notq	%rbx
.Ltmp7592:
    00000e4f: 	leaq	(%rax,%rbx,8), %rax
    00000e53: 	movq	%r10, %r9
    00000e56: 	shlq	$0x4, %rbx
    00000e5a: 	movq	(%rax), %r11
    00000e5d: 	subq	%rbx, %r9
    00000e60: 	shlq	$0x5, %r9
    00000e64: 	leaq	0x200(%r11), %rsi
    00000e6b: 	addq	%r11, %r9
.Ltmp7576:
    00000e6e: 	movq	%r11, %xmm2
    00000e73: 	movq	%r9, %xmm7
    00000e78: 	leaq	0x8(%r8), %rbx
    00000e7c: 	punpcklqdq	%xmm2, %xmm7
    00000e80: 	movq	%rax, %xmm2
    00000e85: 	leaq	0x8(%rax), %r12
    00000e89: 	movaps	%xmm7, (%rsp)
    00000e8d: 	movq	%rsi, %xmm7
    00000e92: 	punpcklqdq	%xmm2, %xmm7
    00000e96: 	movaps	%xmm7, 0x10(%rsp)
    00000e9b: 	cmpq	%r12, %rbx
    00000e9e: 	jbe	.Ltmp7590 # Offset: 3742
.Ltmp7591:
    00000ea0: 	movq	(%r12), %rdi
    00000ea4: 	movl	$0x200, %esi
    00000ea9: 	addq	$0x8, %r12
    00000ead: 	callq	_ZdlPvm@PLT # Offset: 3757
    00000eb2: 	cmpq	%r12, %rbx
    00000eb5: 	ja	.Ltmp7591 # Offset: 3765
    00000eb7: 	movq	0x30(%rbp), %rdi
    00000ebb: 	movq	0x38(%rbp), %rcx
    00000ebf: 	movq	0x48(%rbp), %rdx
.Ltmp7590:
    00000ec3: 	movdqa	(%rsp), %xmm7
    00000ec8: 	movups	%xmm7, 0x80(%rbp)
    00000ecf: 	movdqa	0x10(%rsp), %xmm7
    00000ed5: 	movups	%xmm7, 0x90(%rbp)
    00000edc: 	jmp	.Ltmp7586 # Offset: 3804
.Ltmp7575:
    00000ee1: 	movq	%r10, %rbx
    00000ee4: 	sarq	$0x4, %rbx
    00000ee8: 	jmp	.Ltmp7592 # Offset: 3816
.Ltmp7549:
    00000eed: 	movq	-0x8(%rdx), %rax
    00000ef1: 	addq	$0x200, %rax
    00000ef7: 	jmp	.Ltmp7593 # Offset: 3831
.Ltmp7492:
    00000efc: 	movq	0x90(%rsp), %rax
    00000f04: 	pxor	%xmm7, %xmm7
    00000f08: 	movsd	%xmm7, 0x78(%rsp)
    00000f0e: 	movq	%rax, 0x10(%rsp)
    00000f13: 	jmp	.Ltmp7594 # Offset: 3859
.Ltmp7551:
    00000f18: 	callq	__stack_chk_fail@PLT # Offset: 3864
    00000f1d: 	endbr64
    00000f21: 	movq	%rax, %rbp
    00000f24: 	jmp	.Ltmp7595 # Offset: 3876
.Ltmp7564:
    00000f26: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 3878
    00000f2b: 	endbr64
    00000f2f: 	movq	%rax, %rdi
    00000f32: 	jmp	.Ltmp7596 # Offset: 3890
    00000f34: 	endbr64
    00000f38: 	movq	%rax, %rbx
    00000f3b: 	jmp	.Ltmp7597 # Offset: 3899
.Ltmp7596:
    00000f3d: 	callq	__cxa_begin_catch@PLT # Offset: 3901
    00000f42: 	callq	__cxa_rethrow@PLT # Offset: 3906
.Ltmp7601:
    00000f47: 	callq	__cxa_end_catch@PLT # Offset: 3911
.Ltmp7600:
    00000f4c: 	movq	%rbp, %rdi
    00000f4f: 	callq	_ZNSt11_Deque_baseImSaImEED1Ev # Offset: 3919
.Ltmp7597:
    00000f54: 	movq	%rbp, %rdi
    00000f57: 	movl	$0xc8, %esi
    00000f5c: 	movq	%rbx, %rbp
    00000f5f: 	callq	_ZdlPvm@PLT # Offset: 3935
.Ltmp7595:
    00000f64: 	movq	0x90(%rsp), %rdi
    00000f6c: 	movq	0xa0(%rsp), %rsi
    00000f74: 	subq	%rdi, %rsi
    00000f77: 	testq	%rdi, %rdi
    00000f7a: 	je	.Ltmp7598 # Offset: 3962
    00000f7c: 	callq	_ZdlPvm@PLT # Offset: 3964
.Ltmp7598:
    00000f81: 	movq	%rbp, %rdi
    00000f84: 	callq	_Unwind_Resume@PLT # Offset: 3972
    00000f89: 	endbr64
    00000f8d: 	movq	%rax, %r12
    00000f90: 	jmp	.Ltmp7599 # Offset: 3984
    00000f92: 	endbr64
    00000f96: 	movq	%rax, %rbx
    00000f99: 	jmp	.Ltmp7600 # Offset: 3993
.Ltmp7599:
    00000f9b: 	callq	__cxa_end_catch@PLT # Offset: 3995
    00000fa0: 	movq	%r12, %rdi
    00000fa3: 	callq	__cxa_begin_catch@PLT # Offset: 4003
    00000fa8: 	movq	0x58(%rbp), %rax
    00000fac: 	movq	0x50(%rbp), %rdi
    00000fb0: 	leaq	(,%rax,8), %rsi
    00000fb8: 	callq	_ZdlPvm@PLT # Offset: 4024
    00000fbd: 	movq	$0x0, 0x50(%rbp)
    00000fc5: 	movq	$0x0, 0x58(%rbp)
    00000fcd: 	callq	__cxa_rethrow@PLT # Offset: 4045
    00000fd2: 	endbr64
    00000fd6: 	movq	%rax, %rbx
    00000fd9: 	jmp	.Ltmp7601 # Offset: 4057
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_eraseall_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12testEraseAllIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb" after disassembly {
  Number      : 353
  State       : disassembled
  Address     : 0x4fff0
  Size        : 0x9dc
  MaxSize     : 0x9e0
  Offset      : 0x4fff0
  Section     : .text
  Orc Section : .local.text._Z12testEraseAllIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0352:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdx, %rbx
    00000014: 	subq	$0xa8, %rsp
    0000001b: 	movq	%rsi, 0x20(%rsp)
    00000020: 	movl	%r8d, 0x2c(%rsp)
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x98(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movl	%ecx, iterations(%rip)
    0000003e: 	testq	%rsi, %rsi
    00000041: 	je	.Ltmp7602 # Offset: 65
    00000047: 	leaq	-0x1(%rsi), %rax
    0000004b: 	movq	%rsi, %rcx
    0000004e: 	cmpq	$0x2, %rax
    00000052: 	jbe	.Ltmp7603 # Offset: 82
    00000058: 	shrq	$0x2, %rcx
    0000005c: 	movdqa	DATAat0x537d0(%rip), %xmm1
    00000064: 	movdqa	DATAat0x537e0(%rip), %xmm3
    0000006c: 	movq	%rdi, %rax
    0000006f: 	movq	%rcx, %rdx
    00000072: 	shlq	$0x5, %rdx
    00000076: 	addq	%rdi, %rdx
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp7604:
    00000080: 	movdqa	%xmm1, %xmm2
    00000084: 	addq	$0x20, %rax
    00000088: 	paddd	%xmm3, %xmm1
    0000008c: 	movdqa	%xmm2, %xmm0
    00000090: 	pslld	$0x1, %xmm0
    00000095: 	paddd	%xmm2, %xmm0
    00000099: 	cvtdq2pd	%xmm0, %xmm2
    0000009d: 	pshufd	$0xee, %xmm0, %xmm0
    000000a2: 	movups	%xmm2, -0x20(%rax)
    000000a6: 	cvtdq2pd	%xmm0, %xmm0
    000000aa: 	movups	%xmm0, -0x10(%rax)
    000000ae: 	cmpq	%rdx, %rax
    000000b1: 	jne	.Ltmp7604 # Offset: 177
    000000b3: 	movq	0x20(%rsp), %rcx
    000000b8: 	movq	%rcx, %rdx
    000000bb: 	andq	$-0x4, %rdx
    000000bf: 	movl	%edx, %eax
    000000c1: 	cmpq	%rdx, %rcx
    000000c4: 	je	.Ltmp7602 # Offset: 196
.Ltmp7636:
    000000c6: 	leal	(%rax,%rax,2), %ecx
    000000c9: 	pxor	%xmm0, %xmm0
    000000cd: 	movq	0x20(%rsp), %r9
    000000d2: 	cvtsi2sd	%ecx, %xmm0
    000000d6: 	movsd	%xmm0, (%rbp,%rdx,8)
    000000dc: 	leal	0x1(%rax), %edx
    000000df: 	movslq	%edx, %rdx
    000000e2: 	cmpq	%rdx, %r9
    000000e5: 	jbe	.Ltmp7602 # Offset: 229
    000000e7: 	leal	0x3(%rcx), %esi
    000000ea: 	pxor	%xmm0, %xmm0
    000000ee: 	addl	$0x2, %eax
    000000f1: 	cvtsi2sd	%esi, %xmm0
    000000f5: 	cltq
    000000f7: 	leaq	(,%rdx,8), %rdi
    000000ff: 	movsd	%xmm0, (%rbp,%rdx,8)
    00000105: 	cmpq	%rax, %r9
    00000108: 	jbe	.Ltmp7602 # Offset: 264
    0000010a: 	addl	$0x6, %ecx
    0000010d: 	pxor	%xmm0, %xmm0
    00000111: 	cvtsi2sd	%ecx, %xmm0
    00000115: 	movsd	%xmm0, 0x8(%rbp,%rdi)
.Ltmp7602:
    0000011b: 	movq	0x20(%rsp), %rax
    00000120: 	movq	%rbp, %rdi
    00000123: 	leaq	0x70(%rsp), %r12
    00000128: 	leaq	(%rbp,%rax,8), %r13
    0000012d: 	movq	%r13, %rsi
    00000130: 	callq	_ZN9benchmark14random_shuffleIPdEEvT_S2_ # Offset: 304
    00000135: 	leaq	DATAat0x53440(%rip), %rdx
    0000013c: 	movq	%rbx, %rsi
    0000013f: 	movq	%r12, %rdi
    00000142: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 322
    00000147: 	movq	%r12, %rdx
    0000014a: 	movq	%r13, %rsi
    0000014d: 	movq	%rbp, %rdi
    00000150: 	callq	_Z22test_eraseall_pushbackIdSt6vectorIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 336
    00000155: 	movq	0x70(%rsp), %rdi
    0000015a: 	leaq	0x80(%rsp), %rax
    00000162: 	movq	%rax, 0x8(%rsp)
    00000167: 	cmpq	%rax, %rdi
    0000016a: 	je	.Ltmp7605 # Offset: 362
    0000016c: 	movq	0x80(%rsp), %rax
    00000174: 	leaq	0x1(%rax), %rsi
    00000178: 	callq	_ZdlPvm@PLT # Offset: 376
.Ltmp7605:
    0000017d: 	leaq	DATAat0x53621(%rip), %rdx
    00000184: 	movq	%rbx, %rsi
    00000187: 	movq	%r12, %rdi
    0000018a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 394
    0000018f: 	movq	%r12, %rdx
    00000192: 	movq	%r13, %rsi
    00000195: 	movq	%rbp, %rdi
    00000198: 	callq	_Z22test_eraseall_pushbackIdSt5dequeIdSaIdEEEvPKT_S5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 408
    0000019d: 	movq	0x70(%rsp), %rdi
    000001a2: 	cmpq	0x8(%rsp), %rdi
    000001a7: 	je	.Ltmp7606 # Offset: 423
    000001a9: 	movq	0x80(%rsp), %rax
    000001b1: 	leaq	0x1(%rax), %rsi
    000001b5: 	callq	_ZdlPvm@PLT # Offset: 437
.Ltmp7606:
    000001ba: 	leaq	DATAat0x5363f(%rip), %rdx
    000001c1: 	movq	%rbx, %rsi
    000001c4: 	movq	%r12, %rdi
    000001c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 455
    000001cc: 	movq	%r12, %rdx
    000001cf: 	movq	%r13, %rsi
    000001d2: 	movq	%rbp, %rdi
    000001d5: 	callq	_Z22test_eraseall_pushbackIdNSt7__cxx114listIdSaIdEEEEvPKT_S6_RKNS0_12basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 469
    000001da: 	movq	0x70(%rsp), %rdi
    000001df: 	cmpq	0x8(%rsp), %rdi
    000001e4: 	je	.Ltmp7607 # Offset: 484
    000001e6: 	movq	0x80(%rsp), %rax
    000001ee: 	leaq	0x1(%rax), %rsi
    000001f2: 	callq	_ZdlPvm@PLT # Offset: 498
.Ltmp7607:
    000001f7: 	leaq	DATAat0x53460(%rip), %rdx
    000001fe: 	movq	%rbx, %rsi
    00000201: 	movq	%r12, %rdi
    00000204: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 516
    00000209: 	movq	%r12, %rdx
    0000020c: 	movq	%r13, %rsi
    0000020f: 	movq	%rbp, %rdi
    00000212: 	callq	_Z22test_eraseall_pushbackId14SingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 530
    00000217: 	movq	0x70(%rsp), %rdi
    0000021c: 	cmpq	0x8(%rsp), %rdi
    00000221: 	je	.Ltmp7608 # Offset: 545
    00000223: 	movq	0x80(%rsp), %rax
    0000022b: 	leaq	0x1(%rax), %rsi
    0000022f: 	callq	_ZdlPvm@PLT # Offset: 559
.Ltmp7608:
    00000234: 	leaq	DATAat0x53488(%rip), %rdx
    0000023b: 	movq	%rbx, %rsi
    0000023e: 	movq	%r12, %rdi
    00000241: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 577
    00000246: 	movq	%r12, %rdx
    00000249: 	movq	%r13, %rsi
    0000024c: 	movq	%rbp, %rdi
    0000024f: 	callq	_Z22test_eraseall_pushbackId20PooledSingleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 591
    00000254: 	movq	0x70(%rsp), %rdi
    00000259: 	cmpq	0x8(%rsp), %rdi
    0000025e: 	je	.Ltmp7609 # Offset: 606
    00000260: 	movq	0x80(%rsp), %rax
    00000268: 	leaq	0x1(%rax), %rsi
    0000026c: 	callq	_ZdlPvm@PLT # Offset: 620
.Ltmp7609:
    00000271: 	leaq	DATAat0x534b0(%rip), %rdx
    00000278: 	movq	%rbx, %rsi
    0000027b: 	movq	%r12, %rdi
    0000027e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 638
    00000283: 	movq	%r12, %rdx
    00000286: 	movq	%r13, %rsi
    00000289: 	movq	%rbp, %rdi
    0000028c: 	callq	_Z22test_eraseall_pushbackId14DoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 652
    00000291: 	movq	0x70(%rsp), %rdi
    00000296: 	cmpq	0x8(%rsp), %rdi
    0000029b: 	je	.Ltmp7610 # Offset: 667
    0000029d: 	movq	0x80(%rsp), %rax
    000002a5: 	leaq	0x1(%rax), %rsi
    000002a9: 	callq	_ZdlPvm@PLT # Offset: 681
.Ltmp7610:
    000002ae: 	leaq	DATAat0x534d8(%rip), %rdx
    000002b5: 	movq	%rbx, %rsi
    000002b8: 	movq	%r12, %rdi
    000002bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 699
    000002c0: 	movq	%r12, %rdx
    000002c3: 	movq	%r13, %rsi
    000002c6: 	movq	%rbp, %rdi
    000002c9: 	callq	_Z22test_eraseall_pushbackId20PooledDoubleLinkListIdEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 713
    000002ce: 	movq	0x70(%rsp), %rdi
    000002d3: 	cmpq	0x8(%rsp), %rdi
    000002d8: 	je	.Ltmp7611 # Offset: 728
    000002da: 	movq	0x80(%rsp), %rax
    000002e2: 	leaq	0x1(%rax), %rsi
    000002e6: 	callq	_ZdlPvm@PLT # Offset: 742
.Ltmp7611:
    000002eb: 	leaq	DATAat0x5365c(%rip), %rdx
    000002f2: 	movq	%rbx, %rsi
    000002f5: 	movq	%r12, %rdi
    000002f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 760
    000002fd: 	movq	%r12, %rdx
    00000300: 	movq	%r13, %rsi
    00000303: 	movq	%rbp, %rdi
    00000306: 	callq	_Z18test_eraseall_set1IdSt3setIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 774
    0000030b: 	movq	0x70(%rsp), %rdi
    00000310: 	cmpq	0x8(%rsp), %rdi
    00000315: 	je	.Ltmp7612 # Offset: 789
    00000317: 	movq	0x80(%rsp), %rax
    0000031f: 	leaq	0x1(%rax), %rsi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
.Ltmp7612:
    00000328: 	leaq	DATAat0x53500(%rip), %rdx
    0000032f: 	movq	%rbx, %rsi
    00000332: 	movq	%r12, %rdi
    00000335: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 821
    0000033a: 	movq	%r12, %rdx
    0000033d: 	movq	%r13, %rsi
    00000340: 	movq	%rbp, %rdi
    00000343: 	callq	_Z18test_eraseall_set1IdSt8multisetIdSt4lessIdESaIdEEEvPKT_S7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 835
    00000348: 	movq	0x70(%rsp), %rdi
    0000034d: 	cmpq	0x8(%rsp), %rdi
    00000352: 	je	.Ltmp7613 # Offset: 850
    00000354: 	movq	0x80(%rsp), %rax
    0000035c: 	leaq	0x1(%rax), %rsi
    00000360: 	callq	_ZdlPvm@PLT # Offset: 864
.Ltmp7613:
    00000365: 	leaq	0x30(%rsp), %r15
    0000036a: 	leaq	DATAat0x52564(%rip), %rdx
    00000371: 	movq	%rbx, %rsi
    00000374: 	movq	%r15, %rdi
    00000377: 	leaq	0x50(%rsp), %r14
    0000037c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 892
    00000381: 	movq	0x8(%rbx), %rcx
    00000385: 	movq	(%rbx), %rdx
    00000388: 	movq	%r15, %rsi
    0000038b: 	movq	%r14, %rdi
    0000038e: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 910
    00000393: 	leaq	DATAat0x53678(%rip), %rdx
    0000039a: 	movq	%r14, %rsi
    0000039d: 	movq	%r12, %rdi
    000003a0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 928
    000003a5: 	movq	%r12, %rdx
    000003a8: 	movq	%r13, %rsi
    000003ab: 	movq	%rbp, %rdi
    000003ae: 	callq	_Z17test_eraseall_mapIdSt3mapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 942
    000003b3: 	movq	0x70(%rsp), %rdi
    000003b8: 	cmpq	0x8(%rsp), %rdi
    000003bd: 	je	.Ltmp7614 # Offset: 957
    000003bf: 	movq	0x80(%rsp), %rax
    000003c7: 	leaq	0x1(%rax), %rsi
    000003cb: 	callq	_ZdlPvm@PLT # Offset: 971
.Ltmp7614:
    000003d0: 	movq	0x50(%rsp), %rdi
    000003d5: 	leaq	0x60(%rsp), %rax
    000003da: 	movq	%rax, 0x18(%rsp)
    000003df: 	cmpq	%rax, %rdi
    000003e2: 	je	.Ltmp7615 # Offset: 994
    000003e4: 	movq	0x60(%rsp), %rax
    000003e9: 	leaq	0x1(%rax), %rsi
    000003ed: 	callq	_ZdlPvm@PLT # Offset: 1005
.Ltmp7615:
    000003f2: 	movq	0x30(%rsp), %rdi
    000003f7: 	leaq	0x40(%rsp), %rax
    000003fc: 	movq	%rax, 0x10(%rsp)
    00000401: 	cmpq	%rax, %rdi
    00000404: 	je	.Ltmp7616 # Offset: 1028
    00000406: 	movq	0x40(%rsp), %rax
    0000040b: 	leaq	0x1(%rax), %rsi
    0000040f: 	callq	_ZdlPvm@PLT # Offset: 1039
.Ltmp7616:
    00000414: 	leaq	DATAat0x52564(%rip), %rdx
    0000041b: 	movq	%rbx, %rsi
    0000041e: 	movq	%r15, %rdi
    00000421: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1057
    00000426: 	movq	0x8(%rbx), %rcx
    0000042a: 	movq	(%rbx), %rdx
    0000042d: 	movq	%r15, %rsi
    00000430: 	movq	%r14, %rdi
    00000433: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1075
    00000438: 	leaq	DATAat0x53528(%rip), %rdx
    0000043f: 	movq	%r14, %rsi
    00000442: 	movq	%r12, %rdi
    00000445: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1093
    0000044a: 	movq	%r12, %rdx
    0000044d: 	movq	%r13, %rsi
    00000450: 	movq	%rbp, %rdi
    00000453: 	callq	_Z22test_eraseall_multimapIdSt8multimapIddSt4lessIdESaISt4pairIKddEEEEvPKT_SA_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1107
    00000458: 	movq	0x70(%rsp), %rdi
    0000045d: 	cmpq	0x8(%rsp), %rdi
    00000462: 	je	.Ltmp7617 # Offset: 1122
    00000464: 	movq	0x80(%rsp), %rax
    0000046c: 	leaq	0x1(%rax), %rsi
    00000470: 	callq	_ZdlPvm@PLT # Offset: 1136
.Ltmp7617:
    00000475: 	movq	0x50(%rsp), %rdi
    0000047a: 	cmpq	0x18(%rsp), %rdi
    0000047f: 	je	.Ltmp7618 # Offset: 1151
    00000481: 	movq	0x60(%rsp), %rax
    00000486: 	leaq	0x1(%rax), %rsi
    0000048a: 	callq	_ZdlPvm@PLT # Offset: 1162
.Ltmp7618:
    0000048f: 	movq	0x30(%rsp), %rdi
    00000494: 	cmpq	0x10(%rsp), %rdi
    00000499: 	je	.Ltmp7619 # Offset: 1177
    0000049b: 	movq	0x40(%rsp), %rax
    000004a0: 	leaq	0x1(%rax), %rsi
    000004a4: 	callq	_ZdlPvm@PLT # Offset: 1188
.Ltmp7619:
    000004a9: 	leaq	DATAat0x53550(%rip), %rdx
    000004b0: 	movq	%rbx, %rsi
    000004b3: 	movq	%r12, %rdi
    000004b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1206
    000004bb: 	movq	%r12, %rdx
    000004be: 	movq	%r13, %rsi
    000004c1: 	movq	%rbp, %rdi
    000004c4: 	callq	_Z18test_eraseall_set1IdSt13unordered_setIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1220
    000004c9: 	movq	0x70(%rsp), %rdi
    000004ce: 	cmpq	0x8(%rsp), %rdi
    000004d3: 	je	.Ltmp7620 # Offset: 1235
    000004d5: 	movq	0x80(%rsp), %rax
    000004dd: 	leaq	0x1(%rax), %rsi
    000004e1: 	callq	_ZdlPvm@PLT # Offset: 1249
.Ltmp7620:
    000004e6: 	leaq	DATAat0x53578(%rip), %rdx
    000004ed: 	movq	%rbx, %rsi
    000004f0: 	movq	%r12, %rdi
    000004f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1267
    000004f8: 	movq	%r12, %rdx
    000004fb: 	movq	%r13, %rsi
    000004fe: 	movq	%rbp, %rdi
    00000501: 	callq	_Z18test_eraseall_set1IdSt18unordered_multisetIdSt4hashIdESt8equal_toIdESaIdEEEvPKT_S9_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1281
    00000506: 	movq	0x70(%rsp), %rdi
    0000050b: 	cmpq	0x8(%rsp), %rdi
    00000510: 	je	.Ltmp7621 # Offset: 1296
    00000512: 	movq	0x80(%rsp), %rax
    0000051a: 	leaq	0x1(%rax), %rsi
    0000051e: 	callq	_ZdlPvm@PLT # Offset: 1310
.Ltmp7621:
    00000523: 	leaq	DATAat0x52564(%rip), %rdx
    0000052a: 	movq	%rbx, %rsi
    0000052d: 	movq	%r15, %rdi
    00000530: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1328
    00000535: 	movq	0x8(%rbx), %rcx
    00000539: 	movq	(%rbx), %rdx
    0000053c: 	movq	%r15, %rsi
    0000053f: 	movq	%r14, %rdi
    00000542: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1346
    00000547: 	leaq	DATAat0x535a8(%rip), %rdx
    0000054e: 	movq	%r14, %rsi
    00000551: 	movq	%r12, %rdi
    00000554: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1364
    00000559: 	movq	%r12, %rdx
    0000055c: 	movq	%r13, %rsi
    0000055f: 	movq	%rbp, %rdi
    00000562: 	callq	_Z17test_eraseall_mapIdSt13unordered_mapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1378
    00000567: 	movq	0x70(%rsp), %rdi
    0000056c: 	cmpq	0x8(%rsp), %rdi
    00000571: 	je	.Ltmp7622 # Offset: 1393
    00000573: 	movq	0x80(%rsp), %rax
    0000057b: 	leaq	0x1(%rax), %rsi
    0000057f: 	callq	_ZdlPvm@PLT # Offset: 1407
.Ltmp7622:
    00000584: 	movq	0x50(%rsp), %rdi
    00000589: 	cmpq	0x18(%rsp), %rdi
    0000058e: 	je	.Ltmp7623 # Offset: 1422
    00000590: 	movq	0x60(%rsp), %rax
    00000595: 	leaq	0x1(%rax), %rsi
    00000599: 	callq	_ZdlPvm@PLT # Offset: 1433
.Ltmp7623:
    0000059e: 	movq	0x30(%rsp), %rdi
    000005a3: 	cmpq	0x10(%rsp), %rdi
    000005a8: 	je	.Ltmp7624 # Offset: 1448
    000005aa: 	movq	0x40(%rsp), %rax
    000005af: 	leaq	0x1(%rax), %rsi
    000005b3: 	callq	_ZdlPvm@PLT # Offset: 1459
.Ltmp7624:
    000005b8: 	leaq	DATAat0x52564(%rip), %rdx
    000005bf: 	movq	%rbx, %rsi
    000005c2: 	movq	%r15, %rdi
    000005c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1477
    000005ca: 	movq	0x8(%rbx), %rcx
    000005ce: 	movq	(%rbx), %rdx
    000005d1: 	movq	%r15, %rsi
    000005d4: 	movq	%r14, %rdi
    000005d7: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1495
    000005dc: 	leaq	DATAat0x535d0(%rip), %rdx
    000005e3: 	movq	%r14, %rsi
    000005e6: 	movq	%r12, %rdi
    000005e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1513
    000005ee: 	movq	%r12, %rdx
    000005f1: 	movq	%r13, %rsi
    000005f4: 	movq	%rbp, %rdi
    000005f7: 	callq	_Z22test_eraseall_multimapIdSt18unordered_multimapIddSt4hashIdESt8equal_toIdESaISt4pairIKddEEEEvPKT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1527
    000005fc: 	movq	0x70(%rsp), %rdi
    00000601: 	cmpq	0x8(%rsp), %rdi
    00000606: 	je	.Ltmp7625 # Offset: 1542
    00000608: 	movq	0x80(%rsp), %rax
    00000610: 	leaq	0x1(%rax), %rsi
    00000614: 	callq	_ZdlPvm@PLT # Offset: 1556
.Ltmp7625:
    00000619: 	movq	0x50(%rsp), %rdi
    0000061e: 	cmpq	0x18(%rsp), %rdi
    00000623: 	je	.Ltmp7626 # Offset: 1571
    00000625: 	movq	0x60(%rsp), %rax
    0000062a: 	leaq	0x1(%rax), %rsi
    0000062e: 	callq	_ZdlPvm@PLT # Offset: 1582
.Ltmp7626:
    00000633: 	movq	0x30(%rsp), %rdi
    00000638: 	cmpq	0x10(%rsp), %rdi
    0000063d: 	je	.Ltmp7627 # Offset: 1597
    0000063f: 	movq	0x40(%rsp), %rax
    00000644: 	leaq	0x1(%rax), %rsi
    00000648: 	callq	_ZdlPvm@PLT # Offset: 1608
.Ltmp7627:
    0000064d: 	leaq	DATAat0x52564(%rip), %rdx
    00000654: 	movq	%rbx, %rsi
    00000657: 	movq	%r15, %rdi
    0000065a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1626
    0000065f: 	movq	0x8(%rbx), %rcx
    00000663: 	movq	(%rbx), %rdx
    00000666: 	movq	%r15, %rsi
    00000669: 	movq	%r14, %rdi
    0000066c: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1644
    00000671: 	leaq	DATAat0x53694(%rip), %rdx
    00000678: 	movq	%r14, %rsi
    0000067b: 	movq	%r12, %rdi
    0000067e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1662
    00000683: 	movq	%r12, %rdx
    00000686: 	movq	%r13, %rsi
    00000689: 	movq	%rbp, %rdi
    0000068c: 	callq	_Z17test_eraseall_mapId7HashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1676
    00000691: 	movq	0x70(%rsp), %rdi
    00000696: 	cmpq	0x8(%rsp), %rdi
    0000069b: 	je	.Ltmp7628 # Offset: 1691
    0000069d: 	movq	0x80(%rsp), %rax
    000006a5: 	leaq	0x1(%rax), %rsi
    000006a9: 	callq	_ZdlPvm@PLT # Offset: 1705
.Ltmp7628:
    000006ae: 	movq	0x50(%rsp), %rdi
    000006b3: 	cmpq	0x18(%rsp), %rdi
    000006b8: 	je	.Ltmp7629 # Offset: 1720
    000006ba: 	movq	0x60(%rsp), %rax
    000006bf: 	leaq	0x1(%rax), %rsi
    000006c3: 	callq	_ZdlPvm@PLT # Offset: 1731
.Ltmp7629:
    000006c8: 	movq	0x30(%rsp), %rdi
    000006cd: 	cmpq	0x10(%rsp), %rdi
    000006d2: 	je	.Ltmp7630 # Offset: 1746
    000006d4: 	movq	0x40(%rsp), %rax
    000006d9: 	leaq	0x1(%rax), %rsi
    000006dd: 	callq	_ZdlPvm@PLT # Offset: 1757
.Ltmp7630:
    000006e2: 	leaq	DATAat0x52564(%rip), %rdx
    000006e9: 	movq	%rbx, %rsi
    000006ec: 	movq	%r15, %rdi
    000006ef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1775
    000006f4: 	movq	0x8(%rbx), %rcx
    000006f8: 	movq	(%rbx), %rdx
    000006fb: 	movq	%r15, %rsi
    000006fe: 	movq	%r14, %rdi
    00000701: 	callq	"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_.isra.0/1" # Offset: 1793
    00000706: 	leaq	DATAat0x53600(%rip), %rdx
    0000070d: 	movq	%r14, %rsi
    00000710: 	movq	%r12, %rdi
    00000713: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ # Offset: 1811
    00000718: 	movq	%r12, %rdx
    0000071b: 	movq	%r13, %rsi
    0000071e: 	movq	%rbp, %rdi
    00000721: 	callq	_Z17test_eraseall_mapId13PooledHashMapIddEEvPKT_S4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1825
    00000726: 	movq	0x70(%rsp), %rdi
    0000072b: 	cmpq	0x8(%rsp), %rdi
    00000730: 	je	.Ltmp7631 # Offset: 1840
    00000732: 	movq	0x80(%rsp), %rax
    0000073a: 	leaq	0x1(%rax), %rsi
    0000073e: 	callq	_ZdlPvm@PLT # Offset: 1854
.Ltmp7631:
    00000743: 	movq	0x50(%rsp), %rdi
    00000748: 	cmpq	0x18(%rsp), %rdi
    0000074d: 	je	.Ltmp7632 # Offset: 1869
    0000074f: 	movq	0x60(%rsp), %rax
    00000754: 	leaq	0x1(%rax), %rsi
    00000758: 	callq	_ZdlPvm@PLT # Offset: 1880
.Ltmp7632:
    0000075d: 	movq	0x30(%rsp), %rdi
    00000762: 	cmpq	0x10(%rsp), %rdi
    00000767: 	je	.Ltmp7633 # Offset: 1895
    00000769: 	movq	0x40(%rsp), %rax
    0000076e: 	leaq	0x1(%rax), %rsi
    00000772: 	callq	_ZdlPvm@PLT # Offset: 1906
.Ltmp7633:
    00000777: 	cmpb	$0x0, 0x2c(%rsp)
    0000077c: 	jne	.Ltmp7634 # Offset: 1916
    0000077e: 	movq	0x98(%rsp), %rax
    00000786: 	subq	%fs:0x28, %rax
    0000078f: 	jne	.Ltmp7635 # Offset: 1935
    00000791: 	addq	$0xa8, %rsp
    00000798: 	popq	%rbx
    00000799: 	popq	%rbp
    0000079a: 	popq	%r12
    0000079c: 	popq	%r13
    0000079e: 	popq	%r14
    000007a0: 	popq	%r15
    000007a2: 	retq # Offset: 1954
    000007a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7634:
    000007a8: 	movq	0x98(%rsp), %rax
    000007b0: 	subq	%fs:0x28, %rax
    000007b9: 	jne	.Ltmp7635 # Offset: 1977
    000007bb: 	movl	iterations(%rip), %edx
    000007c1: 	movl	0x20(%rsp), %esi
    000007c5: 	xorl	%r8d, %r8d
    000007c8: 	xorl	%ecx, %ecx
    000007ca: 	addq	$0xa8, %rsp
    000007d1: 	leaq	DATAat0x536af(%rip), %rdi
    000007d8: 	popq	%rbx
    000007d9: 	popq	%rbp
    000007da: 	popq	%r12
    000007dc: 	popq	%r13
    000007de: 	popq	%r14
    000007e0: 	popq	%r15
    000007e2: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 2018
.Ltmp7603:
    000007e7: 	xorl	%eax, %eax
    000007e9: 	xorl	%edx, %edx
    000007eb: 	jmp	.Ltmp7636 # Offset: 2027
.Ltmp7635:
    000007f0: 	callq	__stack_chk_fail@PLT # Offset: 2032
    000007f5: 	endbr64
.Ltmp7643:
    000007f9: 	movq	%rax, %rbp
    000007fc: 	jmp	.Ltmp7637 # Offset: 2044
    000007fe: 	endbr64
.Ltmp7644:
    00000802: 	movq	%rax, %rbp
    00000805: 	jmp	.Ltmp7638 # Offset: 2053
    00000807: 	endbr64
.Ltmp7641:
    0000080b: 	movq	%rax, %rbp
    0000080e: 	jmp	.Ltmp7639 # Offset: 2062
    00000810: 	endbr64
.Ltmp7645:
    00000814: 	movq	%rax, %rbp
    00000817: 	jmp	.Ltmp7640 # Offset: 2071
    00000819: 	endbr64
    0000081d: 	jmp	.Ltmp7641 # Offset: 2077
.Ltmp7637:
    0000081f: 	movq	0x70(%rsp), %rdi
    00000824: 	cmpq	0x8(%rsp), %rdi
    00000829: 	je	.Ltmp7638 # Offset: 2089
    0000082b: 	movq	0x80(%rsp), %rax
    00000833: 	leaq	0x1(%rax), %rsi
    00000837: 	callq	_ZdlPvm@PLT # Offset: 2103
.Ltmp7638:
    0000083c: 	movq	0x50(%rsp), %rdi
    00000841: 	cmpq	0x18(%rsp), %rdi
    00000846: 	je	.Ltmp7640 # Offset: 2118
    00000848: 	movq	0x60(%rsp), %rax
    0000084d: 	leaq	0x1(%rax), %rsi
    00000851: 	callq	_ZdlPvm@PLT # Offset: 2129
.Ltmp7640:
    00000856: 	movq	0x30(%rsp), %rdi
    0000085b: 	cmpq	0x10(%rsp), %rdi
    00000860: 	je	.Ltmp7642 # Offset: 2144
.Ltmp7651:
    00000862: 	movq	0x40(%rsp), %rax
    00000867: 	leaq	0x1(%rax), %rsi
    0000086b: 	callq	_ZdlPvm@PLT # Offset: 2155
.Ltmp7642:
    00000870: 	movq	%rbp, %rdi
    00000873: 	callq	_Unwind_Resume@PLT # Offset: 2163
.Ltmp7639:
    00000878: 	movq	0x70(%rsp), %rdi
    0000087d: 	cmpq	0x8(%rsp), %rdi
    00000882: 	je	.Ltmp7642 # Offset: 2178
.Ltmp7647:
    00000884: 	movq	0x80(%rsp), %rax
    0000088c: 	leaq	0x1(%rax), %rsi
    00000890: 	callq	_ZdlPvm@PLT # Offset: 2192
    00000895: 	jmp	.Ltmp7642 # Offset: 2197
    00000897: 	endbr64
    0000089b: 	jmp	.Ltmp7643 # Offset: 2203
    000008a0: 	endbr64
    000008a4: 	jmp	.Ltmp7644 # Offset: 2212
    000008a9: 	endbr64
    000008ad: 	jmp	.Ltmp7645 # Offset: 2221
    000008b2: 	endbr64
    000008b6: 	jmp	.Ltmp7645 # Offset: 2230
    000008bb: 	endbr64
    000008bf: 	jmp	.Ltmp7643 # Offset: 2239
    000008c4: 	endbr64
    000008c8: 	jmp	.Ltmp7644 # Offset: 2248
    000008cd: 	endbr64
    000008d1: 	jmp	.Ltmp7645 # Offset: 2257
    000008d6: 	endbr64
    000008da: 	jmp	.Ltmp7643 # Offset: 2266
    000008df: 	endbr64
    000008e3: 	jmp	.Ltmp7644 # Offset: 2275
    000008e8: 	endbr64
    000008ec: 	jmp	.Ltmp7641 # Offset: 2284
    000008f1: 	endbr64
    000008f5: 	jmp	.Ltmp7641 # Offset: 2293
    000008fa: 	endbr64
    000008fe: 	jmp	.Ltmp7641 # Offset: 2302
    00000903: 	endbr64
    00000907: 	movq	%rax, %rbp
    0000090a: 	jmp	.Ltmp7646 # Offset: 2314
    0000090c: 	endbr64
    00000910: 	jmp	.Ltmp7641 # Offset: 2320
.Ltmp7646:
    00000915: 	movq	0x70(%rsp), %rdi
    0000091a: 	leaq	0x80(%rsp), %rax
    00000922: 	cmpq	%rax, %rdi
    00000925: 	jne	.Ltmp7647 # Offset: 2341
    0000092b: 	jmp	.Ltmp7642 # Offset: 2347
    00000930: 	endbr64
    00000934: 	jmp	.Ltmp7641 # Offset: 2356
    00000939: 	endbr64
    0000093d: 	jmp	.Ltmp7641 # Offset: 2365
    00000942: 	endbr64
    00000946: 	jmp	.Ltmp7641 # Offset: 2374
    0000094b: 	endbr64
    0000094f: 	jmp	.Ltmp7644 # Offset: 2383
    00000954: 	endbr64
    00000958: 	jmp	.Ltmp7645 # Offset: 2392
    0000095d: 	endbr64
    00000961: 	movq	%rax, %rbp
    00000964: 	jmp	.Ltmp7648 # Offset: 2404
    00000966: 	endbr64
    0000096a: 	movq	%rax, %rbp
    0000096d: 	jmp	.Ltmp7649 # Offset: 2413
    0000096f: 	endbr64
    00000973: 	jmp	.Ltmp7641 # Offset: 2419
    00000978: 	endbr64
    0000097c: 	movq	%rax, %rbp
    0000097f: 	jmp	.Ltmp7650 # Offset: 2431
.Ltmp7648:
    00000981: 	movq	0x70(%rsp), %rdi
    00000986: 	cmpq	0x8(%rsp), %rdi
    0000098b: 	je	.Ltmp7649 # Offset: 2443
    0000098d: 	movq	0x80(%rsp), %rax
    00000995: 	leaq	0x1(%rax), %rsi
    00000999: 	callq	_ZdlPvm@PLT # Offset: 2457
.Ltmp7649:
    0000099e: 	movq	0x50(%rsp), %rdi
    000009a3: 	leaq	0x60(%rsp), %rax
    000009a8: 	cmpq	%rax, %rdi
    000009ab: 	je	.Ltmp7650 # Offset: 2475
    000009ad: 	movq	0x60(%rsp), %rax
    000009b2: 	leaq	0x1(%rax), %rsi
    000009b6: 	callq	_ZdlPvm@PLT # Offset: 2486
.Ltmp7650:
    000009bb: 	movq	0x30(%rsp), %rdi
    000009c0: 	leaq	0x40(%rsp), %rax
    000009c5: 	cmpq	%rax, %rdi
    000009c8: 	jne	.Ltmp7651 # Offset: 2504
    000009ce: 	jmp	.Ltmp7642 # Offset: 2510
    000009d3: 	endbr64
    000009d7: 	jmp	.Ltmp7643 # Offset: 2519
DWARF CFI Instructions:
    <empty>
End of Function "_Z12testEraseAllIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 354
  State       : disassembled
  Address     : 0x509d0
  Size        : 0xa80
  MaxSize     : 0xa80
  Offset      : 0x509d0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0353:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x1f000(%rsp), %r11
.Ltmp7652:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp7652 # Offset: 37
    00000027: 	subq	$0x4a8, %rsp
    0000002e: 	leaq	DATAat0x536cb(%rip), %rsi
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x1f498(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	leaq	0x50(%rsp), %rdi
    0000004d: 	movq	%rdi, 0x8(%rsp)
    00000052: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 82
    00000057: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm3
    0000005f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000066: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm4
    0000006e: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r14
    00000075: 	movhlps	%xmm3, %xmm7
    00000078: 	movq	%rax, (%rsp)
    0000007c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000083: 	movq	%xmm7, %rcx
    00000088: 	movaps	%xmm4, 0x20(%rsp)
    0000008d: 	movq	%xmm4, %rbp
    00000092: 	leaq	0x8(%rcx), %r12
    00000096: 	movq	%rax, 0x18(%rsp)
    0000009b: 	movaps	%xmm3, 0x30(%rsp)
    000000a0: 	movq	%xmm7, 0x40(%rsp)
    000000a6: 	movq	%xmm3, 0x10(%rsp)
    000000ac: 	cmpq	%r12, %rax
    000000af: 	jbe	.Ltmp7653 # Offset: 175
    000000b1: 	movq	%r12, %r13
    000000b4: 	movq	%rax, %r15
    000000b7: 	movq	%xmm4, 0x48(%rsp)
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp7656:
    000000c0: 	movq	(%r13), %rbp
    000000c4: 	leaq	0x200(%rbp), %rbx
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7655:
    000000d0: 	movq	(%rbp), %rdi
    000000d4: 	leaq	0x10(%rbp), %rdx
    000000d8: 	cmpq	%rdx, %rdi
    000000db: 	je	.Ltmp7654 # Offset: 219
    000000e1: 	movq	0x10(%rbp), %rax
    000000e5: 	addq	$0x20, %rbp
    000000e9: 	leaq	0x1(%rax), %rsi
    000000ed: 	callq	_ZdlPvm@PLT # Offset: 237
    000000f2: 	cmpq	%rbx, %rbp
    000000f5: 	jne	.Ltmp7655 # Offset: 245
    000000f7: 	addq	$0x8, %r13
    000000fb: 	cmpq	%r13, %r15
    000000fe: 	ja	.Ltmp7656 # Offset: 254
.Ltmp7683:
    00000100: 	movq	0x48(%rsp), %rbp
.Ltmp7653:
    00000105: 	movq	0x40(%rsp), %rcx
    0000010a: 	cmpq	%rcx, 0x18(%rsp)
    0000010f: 	je	.Ltmp7657 # Offset: 271
.Ltmp7684:
    00000115: 	cmpq	%rbp, 0x10(%rsp)
    0000011a: 	je	.Ltmp7658 # Offset: 282
.Ltmp7660:
    0000011c: 	movq	(%rbp), %rdi
    00000120: 	leaq	0x10(%rbp), %rax
    00000124: 	cmpq	%rax, %rdi
    00000127: 	je	.Ltmp7659 # Offset: 295
    0000012d: 	movq	0x10(%rbp), %rax
    00000131: 	addq	$0x20, %rbp
    00000135: 	leaq	0x1(%rax), %rsi
    00000139: 	callq	_ZdlPvm@PLT # Offset: 313
    0000013e: 	cmpq	%rbp, 0x10(%rsp)
    00000143: 	jne	.Ltmp7660 # Offset: 323
.Ltmp7658:
    00000145: 	cmpq	%r14, (%rsp)
    00000149: 	je	.Ltmp7661 # Offset: 329
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp7663:
    00000150: 	movq	(%r14), %rdi
    00000153: 	leaq	0x10(%r14), %rax
    00000157: 	cmpq	%rax, %rdi
    0000015a: 	je	.Ltmp7662 # Offset: 346
    00000160: 	movq	0x10(%r14), %rax
    00000164: 	addq	$0x20, %r14
    00000168: 	leaq	0x1(%rax), %rsi
    0000016c: 	callq	_ZdlPvm@PLT # Offset: 364
    00000171: 	cmpq	%r14, (%rsp)
    00000175: 	jne	.Ltmp7663 # Offset: 373
.Ltmp7661:
    00000177: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000017e: 	leaq	0x8(%rax), %rbx
    00000182: 	cmpq	%r12, %rbx
    00000185: 	jbe	.Ltmp7664 # Offset: 389
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp7665:
    00000190: 	movq	(%r12), %rdi
    00000194: 	movl	$0x200, %esi
    00000199: 	addq	$0x8, %r12
    0000019d: 	callq	_ZdlPvm@PLT # Offset: 413
    000001a2: 	cmpq	%r12, %rbx
    000001a5: 	ja	.Ltmp7665 # Offset: 421
.Ltmp7664:
    000001a7: 	movl	base_iterations(%rip), %ebx
    000001ad: 	movdqa	0x20(%rsp), %xmm5
    000001b3: 	leaq	0x90(%rsp), %r13
    000001bb: 	leaq	0xfa90(%rsp), %rbp
    000001c3: 	movdqa	0x30(%rsp), %xmm6
    000001c9: 	movdqa	DATAat0x537d0(%rip), %xmm1
    000001d1: 	movq	%r13, %r12
    000001d4: 	leal	0x7b(%rbx), %eax
    000001d7: 	movaps	%xmm5, _Z7gLabelsB5cxx11+48(%rip)
    000001de: 	cltq
    000001e0: 	movaps	%xmm6, _Z7gLabelsB5cxx11+64(%rip)
    000001e7: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001ee: 	movq	%r13, %rax
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp7666:
    000001f8: 	movdqa	%xmm1, %xmm2
    000001fc: 	addq	$0x20, %rax
    00000200: 	paddd	DATAat0x537e0(%rip), %xmm1
    00000208: 	movdqa	%xmm2, %xmm0
    0000020c: 	pslld	$0x1, %xmm0
    00000211: 	paddd	%xmm2, %xmm0
    00000215: 	cvtdq2pd	%xmm0, %xmm2
    00000219: 	pshufd	$0xee, %xmm0, %xmm0
    0000021e: 	movaps	%xmm2, -0x20(%rax)
    00000222: 	cvtdq2pd	%xmm0, %xmm0
    00000226: 	movaps	%xmm0, -0x10(%rax)
    0000022a: 	cmpq	%rbp, %rax
    0000022d: 	jne	.Ltmp7666 # Offset: 557
    0000022f: 	movq	%rbp, %rsi
    00000232: 	movq	%r13, %rdi
    00000235: 	callq	_ZN9benchmark14random_shuffleIPdEEvT_S2_ # Offset: 565
    0000023a: 	movslq	%ebx, %rcx
    0000023d: 	movq	0x8(%rsp), %rbx
    00000242: 	movq	%r13, %rdi
    00000245: 	movl	$0x1, %r8d
    0000024b: 	movl	$0x1f40, %esi
    00000250: 	movq	%rbx, %rdx
    00000253: 	callq	_Z15testCopyEntriesIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 595
    00000258: 	movslq	base_iterations(%rip), %rcx
    0000025f: 	movq	%rbx, %rdx
    00000262: 	movl	$0x1f40, %esi
    00000267: 	movq	%r13, %rdi
    0000026a: 	movl	$0x1, %r8d
    00000270: 	movq	%rcx, %rax
    00000273: 	imulq	$0x66666667, %rcx, %rcx
    0000027a: 	sarl	$0x1f, %eax
    0000027d: 	sarq	$0x21, %rcx
    00000281: 	subl	%eax, %ecx
    00000283: 	movslq	%ecx, %rcx
    00000286: 	callq	_Z14testAccumulateIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 646
    0000028b: 	movslq	base_iterations(%rip), %rcx
    00000292: 	movq	%rbx, %rdx
    00000295: 	movl	$0x1f40, %esi
    0000029a: 	movq	%r13, %rdi
    0000029d: 	movl	$0x1, %r8d
    000002a3: 	movq	%rcx, %rax
    000002a6: 	imulq	$0x66666667, %rcx, %rcx
    000002ad: 	sarl	$0x1f, %eax
    000002b0: 	sarq	$0x21, %rcx
    000002b4: 	subl	%eax, %ecx
    000002b6: 	movslq	%ecx, %rcx
    000002b9: 	callq	_Z21testAccumulateReverseIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 697
    000002be: 	movslq	base_iterations(%rip), %rcx
    000002c5: 	movq	%rbx, %rdx
    000002c8: 	movl	$0x1f40, %esi
    000002cd: 	movq	%r13, %rdi
    000002d0: 	movl	$0x1, %r8d
    000002d6: 	movq	%rcx, %rax
    000002d9: 	imulq	$0x51eb851f, %rcx, %rcx
    000002e0: 	sarl	$0x1f, %eax
    000002e3: 	sarq	$0x25, %rcx
    000002e7: 	subl	%eax, %ecx
    000002e9: 	movslq	%ecx, %rcx
    000002ec: 	callq	_Z13testDuplicateIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 748
    000002f1: 	movslq	base_iterations(%rip), %rcx
    000002f8: 	movq	%rbx, %rdx
    000002fb: 	movl	$0x1f40, %esi
    00000300: 	movq	%r13, %rdi
    00000303: 	movl	$0x1, %r8d
    00000309: 	movq	%rcx, %rax
    0000030c: 	imulq	$0x66666667, %rcx, %rcx
    00000313: 	sarl	$0x1f, %eax
    00000316: 	sarq	$0x22, %rcx
    0000031a: 	subl	%eax, %ecx
    0000031c: 	movslq	%ecx, %rcx
    0000031f: 	callq	_Z14testPushInsertIdEvPKT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 799
    00000324: 	movdqa	DATAat0x537d0(%rip), %xmm1
    0000032c: 	movq	%r13, %rax
    0000032f: 	nop # Size: 1
.Ltmp7667:
    00000330: 	movdqa	%xmm1, %xmm2
    00000334: 	addq	$0x20, %rax
    00000338: 	paddd	DATAat0x537e0(%rip), %xmm1
    00000340: 	movdqa	%xmm2, %xmm0
    00000344: 	pslld	$0x1, %xmm0
    00000349: 	paddd	%xmm2, %xmm0
    0000034d: 	cvtdq2pd	%xmm0, %xmm2
    00000351: 	pshufd	$0xee, %xmm0, %xmm0
    00000356: 	movaps	%xmm2, -0x20(%rax)
    0000035a: 	cvtdq2pd	%xmm0, %xmm0
    0000035e: 	movaps	%xmm0, -0x10(%rax)
    00000362: 	cmpq	%rbp, %rax
    00000365: 	jne	.Ltmp7667 # Offset: 869
    00000367: 	movslq	base_iterations(%rip), %rcx
    0000036e: 	movq	0x8(%rsp), %rbx
    00000373: 	movl	$0x1f40, %esi
    00000378: 	movq	%r13, %rdi
    0000037b: 	movl	$0x1, %r8d
    00000381: 	movq	%rcx, %rax
    00000384: 	imulq	$0x51eb851f, %rcx, %rcx
    0000038b: 	movq	%rbx, %rdx
    0000038e: 	sarl	$0x1f, %eax
    00000391: 	sarq	$0x26, %rcx
    00000395: 	subl	%eax, %ecx
    00000397: 	movslq	%ecx, %rcx
    0000039a: 	callq	_Z10testInsertIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 922
    0000039f: 	movslq	base_iterations(%rip), %rcx
    000003a6: 	movq	%rbx, %rdx
    000003a9: 	movl	$0x1f40, %esi
    000003ae: 	movq	%r13, %rdi
    000003b1: 	movl	$0x1, %r8d
    000003b7: 	movq	%rcx, %rax
    000003ba: 	imulq	$0x51eb851f, %rcx, %rcx
    000003c1: 	sarl	$0x1f, %eax
    000003c4: 	sarq	$0x25, %rcx
    000003c8: 	subl	%eax, %ecx
    000003ca: 	movslq	%ecx, %rcx
    000003cd: 	callq	_Z10testDeleteIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 973
    000003d2: 	movslq	base_iterations(%rip), %rcx
    000003d9: 	movq	%rbx, %rdx
    000003dc: 	movl	$0x1f40, %esi
    000003e1: 	movq	%r13, %rdi
    000003e4: 	movl	$0x1, %r8d
    000003ea: 	movq	%rcx, %rax
    000003ed: 	imulq	$0x66666667, %rcx, %rcx
    000003f4: 	sarl	$0x1f, %eax
    000003f7: 	sarq	$0x22, %rcx
    000003fb: 	subl	%eax, %ecx
    000003fd: 	movslq	%ecx, %rcx
    00000400: 	callq	_Z12testEraseAllIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 1024
    00000405: 	movslq	base_iterations(%rip), %rcx
    0000040c: 	movq	%rbx, %rdx
    0000040f: 	movl	$0x1f40, %esi
    00000414: 	movq	%r13, %rdi
    00000417: 	movl	$0x1, %r8d
    0000041d: 	movq	%rcx, %rax
    00000420: 	imulq	$0x66666667, %rcx, %rcx
    00000427: 	sarl	$0x1f, %eax
    0000042a: 	sarq	$0x22, %rcx
    0000042e: 	subl	%eax, %ecx
    00000430: 	movslq	%ecx, %rcx
    00000433: 	callq	_Z12testClearAllIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 1075
    00000438: 	movslq	base_iterations(%rip), %rcx
    0000043f: 	movq	%rbx, %rdx
    00000442: 	movl	$0x1f40, %esi
    00000447: 	movq	%r13, %rdi
    0000044a: 	movl	$0x1, %r8d
    00000450: 	movq	%rcx, %rax
    00000453: 	imulq	$0x51eb851f, %rcx, %rcx
    0000045a: 	sarl	$0x1f, %eax
    0000045d: 	sarq	$0x25, %rcx
    00000461: 	subl	%eax, %ecx
    00000463: 	movslq	%ecx, %rcx
    00000466: 	callq	_Z7testPopIdEvPT_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmb # Offset: 1126
    0000046b: 	movslq	base_iterations(%rip), %rax
    00000472: 	movdqa	DATAat0x537d0(%rip), %xmm1
    0000047a: 	movq	%rax, %rdx
    0000047d: 	imulq	$-0x77777777, %rax, %rax
    00000484: 	shrq	$0x20, %rax
    00000488: 	addl	%edx, %eax
    0000048a: 	sarl	$0x1f, %edx
    0000048d: 	sarl	$0x4, %eax
    00000490: 	subl	%edx, %eax
    00000492: 	movslq	%eax, %rcx
    00000495: 	movl	%eax, 0x18(%rsp)
    00000499: 	movq	%rcx, 0x10(%rsp)
    0000049e: 	movl	%eax, iterations(%rip)
    000004a4: 	movq	%r13, %rax
    000004a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp7668:
    000004b0: 	movdqa	%xmm1, %xmm2
    000004b4: 	addq	$0x20, %rax
    000004b8: 	paddd	DATAat0x537e0(%rip), %xmm1
    000004c0: 	movdqa	%xmm2, %xmm0
    000004c4: 	pslld	$0x1, %xmm0
    000004c9: 	paddd	%xmm2, %xmm0
    000004cd: 	cvtdq2pd	%xmm0, %xmm2
    000004d1: 	pshufd	$0xee, %xmm0, %xmm0
    000004d6: 	movaps	%xmm2, -0x20(%rax)
    000004da: 	cvtdq2pd	%xmm0, %xmm0
    000004de: 	movaps	%xmm0, -0x10(%rax)
    000004e2: 	cmpq	%rbp, %rax
    000004e5: 	jne	.Ltmp7668 # Offset: 1253
    000004e7: 	movq	%r13, %rsi
    000004ea: 	movq	%rbp, %rdi
    000004ed: 	leaq	0x70(%rsp), %r15
    000004f2: 	movl	$0xfa00, %edx
    000004f7: 	callq	memcpy@PLT # Offset: 1271
    000004fc: 	leaq	DATAat0x536e1(%rip), %rsi
    00000503: 	movq	%r15, %rdi
    00000506: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 1286
    0000050b: 	movq	0x10(%rsp), %r8
    00000510: 	movq	0x8(%rsp), %rcx
    00000515: 	movq	%r15, %r9
    00000518: 	movq	%rbp, %rsi
    0000051b: 	movl	$0x1f40, %edx
    00000520: 	movq	%r13, %rdi
    00000523: 	callq	_Z15testFind_commonIdEvPT_S1_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_ # Offset: 1315
    00000528: 	movq	0x70(%rsp), %rdi
    0000052d: 	leaq	0x80(%rsp), %rax
    00000535: 	movq	%rax, (%rsp)
    00000539: 	cmpq	%rax, %rdi
    0000053c: 	je	.Ltmp7669 # Offset: 1340
    0000053e: 	movq	0x80(%rsp), %rax
    00000546: 	leaq	0x1(%rax), %rsi
    0000054a: 	callq	_ZdlPvm@PLT # Offset: 1354
.Ltmp7669:
    0000054f: 	movl	iterations(%rip), %edx
    00000555: 	xorl	%r8d, %r8d
    00000558: 	xorl	%ecx, %ecx
    0000055a: 	movl	$0x1f40, %esi
    0000055f: 	leaq	DATAat0x536d2(%rip), %rdi
    00000566: 	callq	_Z9summarizePKciiii # Offset: 1382
    0000056b: 	movl	0x18(%rsp), %eax
    0000056f: 	movdqa	DATAat0x537d0(%rip), %xmm1
    00000577: 	movl	%eax, iterations(%rip)
    0000057d: 	movq	%r13, %rax
.Ltmp7670:
    00000580: 	movdqa	%xmm1, %xmm2
    00000584: 	addq	$0x20, %rax
    00000588: 	paddd	DATAat0x537e0(%rip), %xmm1
    00000590: 	movdqa	%xmm2, %xmm0
    00000594: 	pslld	$0x1, %xmm0
    00000599: 	paddd	%xmm2, %xmm0
    0000059d: 	cvtdq2pd	%xmm0, %xmm2
    000005a1: 	pshufd	$0xee, %xmm0, %xmm0
    000005a6: 	movaps	%xmm2, -0x20(%rax)
    000005aa: 	cvtdq2pd	%xmm0, %xmm0
    000005ae: 	movaps	%xmm0, -0x10(%rax)
    000005b2: 	cmpq	%rbp, %rax
    000005b5: 	jne	.Ltmp7670 # Offset: 1461
    000005b7: 	movl	$0xfa00, %edx
    000005bc: 	movq	%r13, %rsi
    000005bf: 	movq	%rbp, %rdi
    000005c2: 	movq	%rbp, %rbx
    000005c5: 	callq	memcpy@PLT # Offset: 1477
    000005ca: 	leaq	0x17790(%rsp), %rcx
    000005d2: 	leaq	0x1f480(%rsp), %r14
    000005da: 	movq	%rcx, 0x20(%rsp)
    000005df: 	movq	%r14, %rdx
    000005e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7671:
    000005e8: 	movapd	(%rdx), %xmm1
    000005ec: 	movapd	(%rax), %xmm0
    000005f0: 	addq	$0x10, %rax
    000005f4: 	subq	$0x10, %rdx
    000005f8: 	shufpd	$0x1, %xmm1, %xmm1
    000005fd: 	shufpd	$0x1, %xmm0, %xmm0
    00000602: 	movaps	%xmm1, -0x10(%rax)
    00000606: 	movaps	%xmm0, 0x10(%rdx)
    0000060a: 	cmpq	%rcx, %rax
    0000060d: 	jne	.Ltmp7671 # Offset: 1549
    0000060f: 	leaq	DATAat0x536f9(%rip), %rsi
    00000616: 	movq	%r15, %rdi
    00000619: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 1561
    0000061e: 	movq	0x10(%rsp), %r8
    00000623: 	movq	0x8(%rsp), %rcx
    00000628: 	movq	%r15, %r9
    0000062b: 	movq	%rbp, %rsi
    0000062e: 	movl	$0x1f40, %edx
    00000633: 	movq	%r13, %rdi
    00000636: 	callq	_Z15testFind_commonIdEvPT_S1_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_ # Offset: 1590
    0000063b: 	movq	0x70(%rsp), %rdi
    00000640: 	cmpq	(%rsp), %rdi
    00000644: 	je	.Ltmp7672 # Offset: 1604
    00000646: 	movq	0x80(%rsp), %rax
    0000064e: 	leaq	0x1(%rax), %rsi
    00000652: 	callq	_ZdlPvm@PLT # Offset: 1618
.Ltmp7672:
    00000657: 	movl	iterations(%rip), %edx
    0000065d: 	xorl	%r8d, %r8d
    00000660: 	xorl	%ecx, %ecx
    00000662: 	movl	$0x1f40, %esi
    00000667: 	leaq	DATAat0x536ea(%rip), %rdi
    0000066e: 	callq	_Z9summarizePKciiii # Offset: 1646
    00000673: 	movl	0x18(%rsp), %eax
    00000677: 	movdqa	DATAat0x537d0(%rip), %xmm1
    0000067f: 	movl	%eax, iterations(%rip)
    00000685: 	nopl	(%rax) # Size: 3
.Ltmp7673:
    00000688: 	movdqa	%xmm1, %xmm2
    0000068c: 	addq	$0x20, %r12
    00000690: 	paddd	DATAat0x537e0(%rip), %xmm1
    00000698: 	movdqa	%xmm2, %xmm0
    0000069c: 	pslld	$0x1, %xmm0
    000006a1: 	paddd	%xmm2, %xmm0
    000006a5: 	cvtdq2pd	%xmm0, %xmm2
    000006a9: 	pshufd	$0xee, %xmm0, %xmm0
    000006ae: 	movaps	%xmm2, -0x20(%r12)
    000006b4: 	cvtdq2pd	%xmm0, %xmm0
    000006b8: 	movaps	%xmm0, -0x10(%r12)
    000006be: 	cmpq	%rbp, %r12
    000006c1: 	jne	.Ltmp7673 # Offset: 1729
    000006c3: 	movl	$0xfa00, %edx
    000006c8: 	movq	%r13, %rsi
    000006cb: 	movq	%rbp, %rdi
    000006ce: 	callq	memcpy@PLT # Offset: 1742
    000006d3: 	leaq	0x1f490(%rsp), %rax
    000006db: 	movq	%rbp, %rdi
    000006de: 	movq	%rax, %rsi
    000006e1: 	movq	%rax, 0x18(%rsp)
    000006e6: 	callq	_ZN9benchmark14random_shuffleIPdEEvT_S2_ # Offset: 1766
    000006eb: 	leaq	DATAat0x53716(%rip), %rsi
    000006f2: 	movq	%r15, %rdi
    000006f5: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 1781
    000006fa: 	movq	0x10(%rsp), %r8
    000006ff: 	movq	0x8(%rsp), %rcx
    00000704: 	movq	%r15, %r9
    00000707: 	movq	%rbp, %rsi
    0000070a: 	movl	$0x1f40, %edx
    0000070f: 	movq	%r13, %rdi
    00000712: 	callq	_Z15testFind_commonIdEvPT_S1_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmS9_ # Offset: 1810
    00000717: 	movq	0x70(%rsp), %rdi
    0000071c: 	cmpq	(%rsp), %rdi
    00000720: 	je	.Ltmp7674 # Offset: 1824
    00000722: 	movq	0x80(%rsp), %rax
    0000072a: 	leaq	0x1(%rax), %rsi
    0000072e: 	callq	_ZdlPvm@PLT # Offset: 1838
.Ltmp7674:
    00000733: 	movl	iterations(%rip), %edx
    00000739: 	xorl	%r8d, %r8d
    0000073c: 	xorl	%ecx, %ecx
    0000073e: 	movl	$0x1f40, %esi
    00000743: 	leaq	DATAat0x53707(%rip), %rdi
    0000074a: 	callq	_Z9summarizePKciiii # Offset: 1866
    0000074f: 	movslq	base_iterations(%rip), %rax
    00000756: 	movq	%r13, %rsi
    00000759: 	movq	%rbp, %rdi
    0000075c: 	movq	%rax, %rdx
    0000075f: 	imulq	$-0x77777777, %rax, %rax
    00000766: 	shrq	$0x20, %rax
    0000076a: 	addl	%edx, %eax
    0000076c: 	sarl	$0x1f, %edx
    0000076f: 	sarl	$0x4, %eax
    00000772: 	subl	%edx, %eax
    00000774: 	movl	$0xfa00, %edx
    00000779: 	movl	%eax, 0x10(%rsp)
    0000077d: 	movslq	%eax, %r12
    00000780: 	movl	%eax, iterations(%rip)
    00000786: 	callq	memcpy@PLT # Offset: 1926
    0000078b: 	leaq	DATAat0x536e1(%rip), %rsi
    00000792: 	movq	%r15, %rdi
    00000795: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 1941
    0000079a: 	movq	0x8(%rsp), %rcx
    0000079f: 	movq	%r15, %r9
    000007a2: 	movq	%r12, %r8
    000007a5: 	movl	$0x1f40, %edx
    000007aa: 	movq	%rbp, %rsi
    000007ad: 	movq	%r13, %rdi
    000007b0: 	callq	_Z16testErase_commonIdEvPKT_PS0_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSB_ # Offset: 1968
    000007b5: 	movq	0x70(%rsp), %rdi
    000007ba: 	cmpq	(%rsp), %rdi
    000007be: 	je	.Ltmp7675 # Offset: 1982
    000007c0: 	movq	0x80(%rsp), %rax
    000007c8: 	leaq	0x1(%rax), %rsi
    000007cc: 	callq	_ZdlPvm@PLT # Offset: 1996
.Ltmp7675:
    000007d1: 	movl	iterations(%rip), %edx
    000007d7: 	xorl	%r8d, %r8d
    000007da: 	xorl	%ecx, %ecx
    000007dc: 	movl	$0x1f40, %esi
    000007e1: 	leaq	DATAat0x53723(%rip), %rdi
    000007e8: 	callq	_Z9summarizePKciiii # Offset: 2024
    000007ed: 	movl	0x10(%rsp), %eax
    000007f1: 	movl	$0xfa00, %edx
    000007f6: 	movq	%r13, %rsi
    000007f9: 	movq	%rbp, %rdi
    000007fc: 	movl	%eax, iterations(%rip)
    00000802: 	callq	memcpy@PLT # Offset: 2050
    00000807: 	movq	0x20(%rsp), %rax
    0000080c: 	nopl	(%rax) # Size: 4
.Ltmp7676:
    00000810: 	movapd	(%r14), %xmm1
    00000815: 	movapd	(%rbx), %xmm0
    00000819: 	addq	$0x10, %rbx
    0000081d: 	subq	$0x10, %r14
    00000821: 	shufpd	$0x1, %xmm1, %xmm1
    00000826: 	shufpd	$0x1, %xmm0, %xmm0
    0000082b: 	movaps	%xmm1, -0x10(%rbx)
    0000082f: 	movaps	%xmm0, 0x10(%r14)
    00000834: 	cmpq	%rbx, %rax
    00000837: 	jne	.Ltmp7676 # Offset: 2103
    00000839: 	leaq	DATAat0x536f9(%rip), %rsi
    00000840: 	movq	%r15, %rdi
    00000843: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 2115
    00000848: 	movq	0x8(%rsp), %rcx
    0000084d: 	movq	%r15, %r9
    00000850: 	movq	%r12, %r8
    00000853: 	movl	$0x1f40, %edx
    00000858: 	movq	%rbp, %rsi
    0000085b: 	movq	%r13, %rdi
    0000085e: 	callq	_Z16testErase_commonIdEvPKT_PS0_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSB_ # Offset: 2142
    00000863: 	movq	0x70(%rsp), %rdi
    00000868: 	cmpq	(%rsp), %rdi
    0000086c: 	je	.Ltmp7677 # Offset: 2156
    0000086e: 	movq	0x80(%rsp), %rax
    00000876: 	leaq	0x1(%rax), %rsi
    0000087a: 	callq	_ZdlPvm@PLT # Offset: 2170
.Ltmp7677:
    0000087f: 	movl	iterations(%rip), %edx
    00000885: 	xorl	%r8d, %r8d
    00000888: 	xorl	%ecx, %ecx
    0000088a: 	movl	$0x1f40, %esi
    0000088f: 	leaq	DATAat0x5373c(%rip), %rdi
    00000896: 	callq	_Z9summarizePKciiii # Offset: 2198
    0000089b: 	movl	0x10(%rsp), %eax
    0000089f: 	movl	$0xfa00, %edx
    000008a4: 	movq	%r13, %rsi
    000008a7: 	movq	%rbp, %rdi
    000008aa: 	movl	%eax, iterations(%rip)
    000008b0: 	callq	memcpy@PLT # Offset: 2224
    000008b5: 	movq	0x18(%rsp), %rsi
    000008ba: 	movq	%rbp, %rdi
    000008bd: 	callq	_ZN9benchmark14random_shuffleIPdEEvT_S2_ # Offset: 2237
    000008c2: 	leaq	DATAat0x53716(%rip), %rsi
    000008c9: 	movq	%r15, %rdi
    000008cc: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 2252
    000008d1: 	movq	0x8(%rsp), %rcx
    000008d6: 	movq	%r15, %r9
    000008d9: 	movq	%r12, %r8
    000008dc: 	movl	$0x1f40, %edx
    000008e1: 	movq	%rbp, %rsi
    000008e4: 	movq	%r13, %rdi
    000008e7: 	callq	_Z16testErase_commonIdEvPKT_PS0_mRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSB_ # Offset: 2279
    000008ec: 	movq	0x70(%rsp), %rdi
    000008f1: 	cmpq	(%rsp), %rdi
    000008f5: 	je	.Ltmp7678 # Offset: 2293
    000008f7: 	movq	0x80(%rsp), %rax
    000008ff: 	leaq	0x1(%rax), %rsi
    00000903: 	callq	_ZdlPvm@PLT # Offset: 2307
.Ltmp7678:
    00000908: 	movl	iterations(%rip), %edx
    0000090e: 	xorl	%r8d, %r8d
    00000911: 	xorl	%ecx, %ecx
    00000913: 	movl	$0x1f40, %esi
    00000918: 	leaq	DATAat0x5375a(%rip), %rdi
    0000091f: 	callq	_Z9summarizePKciiii # Offset: 2335
    00000924: 	movq	0x50(%rsp), %rdi
    00000929: 	leaq	0x60(%rsp), %rax
    0000092e: 	cmpq	%rax, %rdi
    00000931: 	je	.Ltmp7679 # Offset: 2353
    00000933: 	movq	0x60(%rsp), %rax
    00000938: 	leaq	0x1(%rax), %rsi
    0000093c: 	callq	_ZdlPvm@PLT # Offset: 2364
.Ltmp7679:
    00000941: 	movq	0x1f498(%rsp), %rax
    00000949: 	subq	%fs:0x28, %rax
    00000952: 	jne	.Ltmp7680 # Offset: 2386
    00000958: 	addq	$0x1f4a8, %rsp
    0000095f: 	popq	%rbx
    00000960: 	popq	%rbp
    00000961: 	popq	%r12
    00000963: 	popq	%r13
    00000965: 	popq	%r14
    00000967: 	popq	%r15
    00000969: 	retq # Offset: 2409
    0000096a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7681:
    00000970: 	addq	$0x20, %rbp
.Ltmp7657:
    00000974: 	cmpq	%rbp, (%rsp)
    00000978: 	je	.Ltmp7661 # Offset: 2424
.Ltmp7682:
    0000097e: 	movq	(%rbp), %rdi
    00000982: 	leaq	0x10(%rbp), %rax
    00000986: 	cmpq	%rax, %rdi
    00000989: 	je	.Ltmp7681 # Offset: 2441
    0000098b: 	movq	0x10(%rbp), %rax
    0000098f: 	addq	$0x20, %rbp
    00000993: 	leaq	0x1(%rax), %rsi
    00000997: 	callq	_ZdlPvm@PLT # Offset: 2455
    0000099c: 	cmpq	%rbp, (%rsp)
    000009a0: 	jne	.Ltmp7682 # Offset: 2464
    000009a2: 	jmp	.Ltmp7661 # Offset: 2466
    000009a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp7654:
    000009b0: 	addq	$0x20, %rbp
    000009b4: 	cmpq	%rbx, %rbp
    000009b7: 	jne	.Ltmp7655 # Offset: 2487
    000009bd: 	addq	$0x8, %r13
    000009c1: 	cmpq	%r13, %r15
    000009c4: 	ja	.Ltmp7656 # Offset: 2500
    000009ca: 	jmp	.Ltmp7683 # Offset: 2506
    000009cf: 	nop # Size: 1
.Ltmp7659:
    000009d0: 	addq	$0x20, %rbp
    000009d4: 	jmp	.Ltmp7684 # Offset: 2516
    000009d9: 	nopl	(%rax) # Size: 7
.Ltmp7662:
    000009e0: 	addq	$0x20, %r14
    000009e4: 	cmpq	%r14, (%rsp)
    000009e8: 	jne	.Ltmp7663 # Offset: 2536
    000009ee: 	jmp	.Ltmp7661 # Offset: 2542
.Ltmp7680:
    000009f3: 	callq	__stack_chk_fail@PLT # Offset: 2547
    000009f8: 	endbr64
.Ltmp7686:
    000009fc: 	movq	%rax, %rbp
    000009ff: 	jmp	.Ltmp7685 # Offset: 2559
    00000a01: 	endbr64
    00000a05: 	jmp	.Ltmp7686 # Offset: 2565
    00000a07: 	endbr64
    00000a0b: 	jmp	.Ltmp7686 # Offset: 2571
    00000a0d: 	endbr64
    00000a11: 	jmp	.Ltmp7686 # Offset: 2577
    00000a13: 	endbr64
    00000a17: 	movq	%rax, %rbp
    00000a1a: 	jmp	.Ltmp7687 # Offset: 2586
    00000a1c: 	endbr64
    00000a20: 	movq	%rax, %rbp
    00000a23: 	jmp	.Ltmp7688 # Offset: 2595
.Ltmp7687:
    00000a25: 	movq	0x70(%rsp), %rdi
    00000a2a: 	leaq	0x80(%rsp), %rax
    00000a32: 	cmpq	%rax, %rdi
    00000a35: 	je	.Ltmp7688 # Offset: 2613
.Ltmp7690:
    00000a37: 	movq	0x80(%rsp), %rax
    00000a3f: 	leaq	0x1(%rax), %rsi
    00000a43: 	callq	_ZdlPvm@PLT # Offset: 2627
.Ltmp7688:
    00000a48: 	movq	0x50(%rsp), %rdi
    00000a4d: 	leaq	0x60(%rsp), %rax
    00000a52: 	cmpq	%rax, %rdi
    00000a55: 	je	.Ltmp7689 # Offset: 2645
    00000a57: 	movq	0x60(%rsp), %rax
    00000a5c: 	leaq	0x1(%rax), %rsi
    00000a60: 	callq	_ZdlPvm@PLT # Offset: 2656
.Ltmp7689:
    00000a65: 	movq	%rbp, %rdi
    00000a68: 	callq	_Unwind_Resume@PLT # Offset: 2664
    00000a6d: 	endbr64
    00000a71: 	jmp	.Ltmp7686 # Offset: 2673
.Ltmp7685:
    00000a73: 	movq	0x70(%rsp), %rdi
    00000a78: 	cmpq	(%rsp), %rdi
    00000a7c: 	jne	.Ltmp7690 # Offset: 2684
    00000a7e: 	jmp	.Ltmp7688 # Offset: 2686
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_fini" after disassembly {
  Number      : 355
  State       : disassembled
  Address     : 0x51450
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x51450
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0354:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 356 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 4472 instructions were shortened
BOLT-INFO: removed 1285 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 331 out of 402 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x210650
