BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0xd018, which lies outside .bss
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0xcfe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 2
  State       : disassembled
  Address     : 0x1160
  Size        : 0xdca
  MaxSize     : 0xdd0
  Offset      : 0x1160
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB01:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x10, %rsp
    00000010: 	testl	%edi, %edi
    00000012: 	jle	.Ltmp1 # Offset: 18
    00000018: 	leal	-0x1(%rdi), %eax
    0000001b: 	movl	%edi, %r13d
    0000001e: 	movq	%rsi, %r14
    00000021: 	movq	%rsi, %rbx
    00000024: 	leaq	0x8(%rsi,%rax,8), %r12
    00000029: 	leaq	DATAat0xa150(%rip), %rbp
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%rbx, %r12
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0xa136(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp22:
    00000068: 	leaq	DATAat0xa154(%rip), %rbp
    0000006f: 	movl	$0x1, %esi
    00000074: 	leaq	data8(%rip), %rbx
    0000007b: 	movq	%rbp, %rdi
    0000007e: 	callq	_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_ # Offset: 126
    00000083: 	movq	%rbp, %rdi
    00000086: 	movl	$0x2, %esi
    0000008b: 	callq	_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_ # Offset: 139
    00000090: 	movq	%rbp, %rdi
    00000093: 	movl	$0x4, %esi
    00000098: 	callq	_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_ # Offset: 152
    0000009d: 	movq	%rbp, %rdi
    000000a0: 	movl	$0x7, %esi
    000000a5: 	callq	_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_ # Offset: 165
    000000aa: 	movq	%rbp, %rdi
    000000ad: 	movl	$0x64, %esi
    000000b2: 	callq	_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_ # Offset: 178
    000000b7: 	movq	%rbp, %rdi
    000000ba: 	movl	$0x7d, %esi
    000000bf: 	callq	_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_ # Offset: 191
    000000c4: 	movq	%rbp, %rdi
    000000c7: 	movl	$0x7e, %esi
    000000cc: 	callq	_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_ # Offset: 204
    000000d1: 	movq	%rbp, %rdi
    000000d4: 	movl	$0x7f, %esi
    000000d9: 	leaq	DATAat0xa15e(%rip), %rbp
    000000e0: 	callq	_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_ # Offset: 224
    000000e5: 	movq	%rbp, %rdi
    000000e8: 	movl	$0x1, %esi
    000000ed: 	callq	_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_ # Offset: 237
    000000f2: 	movq	%rbp, %rdi
    000000f5: 	movl	$0x2, %esi
    000000fa: 	callq	_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_ # Offset: 250
    000000ff: 	movq	%rbp, %rdi
    00000102: 	movl	$0x4, %esi
    00000107: 	callq	_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_ # Offset: 263
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	movl	$0x7, %esi
    00000114: 	callq	_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_ # Offset: 276
    00000119: 	movq	%rbp, %rdi
    0000011c: 	movl	$0x64, %esi
    00000121: 	callq	_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_ # Offset: 289
    00000126: 	movq	%rbp, %rdi
    00000129: 	movl	$0x7d, %esi
    0000012e: 	callq	_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_ # Offset: 302
    00000133: 	movq	%rbp, %rdi
    00000136: 	movl	$0x7e, %esi
    0000013b: 	callq	_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_ # Offset: 315
    00000140: 	movq	%rbp, %rdi
    00000143: 	movl	$0x7f, %esi
    00000148: 	leaq	DATAat0xa168(%rip), %rbp
    0000014f: 	callq	_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_ # Offset: 335
    00000154: 	movq	%rbp, %rdi
    00000157: 	movl	$0x1, %esi
    0000015c: 	callq	_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_ # Offset: 348
    00000161: 	movq	%rbp, %rdi
    00000164: 	movl	$0x2, %esi
    00000169: 	callq	_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_ # Offset: 361
    0000016e: 	movq	%rbp, %rdi
    00000171: 	movl	$0x4, %esi
    00000176: 	callq	_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_ # Offset: 374
    0000017b: 	movq	%rbp, %rdi
    0000017e: 	movl	$0x7, %esi
    00000183: 	callq	_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_ # Offset: 387
    00000188: 	movq	%rbp, %rdi
    0000018b: 	movl	$0x64, %esi
    00000190: 	callq	_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_ # Offset: 400
    00000195: 	movq	%rbp, %rdi
    00000198: 	movl	$0x7d, %esi
    0000019d: 	callq	_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_ # Offset: 413
    000001a2: 	movq	%rbp, %rdi
    000001a5: 	movl	$0x7e, %esi
    000001aa: 	callq	_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_ # Offset: 426
    000001af: 	movq	%rbp, %rdi
    000001b2: 	movl	$0x7f, %esi
    000001b7: 	leaq	DATAat0xa172(%rip), %rbp
    000001be: 	callq	_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_ # Offset: 446
    000001c3: 	movq	%rbp, %rdi
    000001c6: 	movl	$0x1, %esi
    000001cb: 	callq	_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_ # Offset: 459
    000001d0: 	movq	%rbp, %rdi
    000001d3: 	movl	$0x2, %esi
    000001d8: 	callq	_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_ # Offset: 472
    000001dd: 	movq	%rbp, %rdi
    000001e0: 	movl	$0x4, %esi
    000001e5: 	callq	_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_ # Offset: 485
    000001ea: 	movq	%rbp, %rdi
    000001ed: 	movl	$0x7, %esi
    000001f2: 	callq	_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_ # Offset: 498
    000001f7: 	movq	%rbp, %rdi
    000001fa: 	movl	$0x64, %esi
    000001ff: 	callq	_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_ # Offset: 511
    00000204: 	movq	%rbp, %rdi
    00000207: 	movl	$0x7d, %esi
    0000020c: 	callq	_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_ # Offset: 524
    00000211: 	movq	%rbp, %rdi
    00000214: 	movl	$0x7e, %esi
    00000219: 	callq	_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_ # Offset: 537
    0000021e: 	movq	%rbp, %rdi
    00000221: 	movl	$0x7f, %esi
    00000226: 	leaq	DATAat0xa17d(%rip), %rbp
    0000022d: 	callq	_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_ # Offset: 557
    00000232: 	movq	%rbp, %rdi
    00000235: 	movl	$0x1, %esi
    0000023a: 	callq	_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_ # Offset: 570
    0000023f: 	movq	%rbp, %rdi
    00000242: 	movl	$0x2, %esi
    00000247: 	callq	_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_ # Offset: 583
    0000024c: 	movq	%rbp, %rdi
    0000024f: 	movl	$0x4, %esi
    00000254: 	callq	_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_ # Offset: 596
    00000259: 	movq	%rbp, %rdi
    0000025c: 	movl	$0x7, %esi
    00000261: 	callq	_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_ # Offset: 609
    00000266: 	movq	%rbp, %rdi
    00000269: 	movl	$0x64, %esi
    0000026e: 	callq	_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_ # Offset: 622
    00000273: 	movq	%rbp, %rdi
    00000276: 	movl	$0x7d, %esi
    0000027b: 	callq	_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_ # Offset: 635
    00000280: 	movq	%rbp, %rdi
    00000283: 	movl	$0x7e, %esi
    00000288: 	callq	_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_ # Offset: 648
    0000028d: 	movq	%rbp, %rdi
    00000290: 	movl	$0x7f, %esi
    00000295: 	leaq	DATAat0xa188(%rip), %rbp
    0000029c: 	callq	_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_ # Offset: 668
    000002a1: 	movq	%rbp, %rdi
    000002a4: 	movl	$0x1, %esi
    000002a9: 	callq	_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_ # Offset: 681
    000002ae: 	movq	%rbp, %rdi
    000002b1: 	movl	$0x2, %esi
    000002b6: 	callq	_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_ # Offset: 694
    000002bb: 	movq	%rbp, %rdi
    000002be: 	movl	$0x4, %esi
    000002c3: 	callq	_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_ # Offset: 707
    000002c8: 	movq	%rbp, %rdi
    000002cb: 	movl	$0x7, %esi
    000002d0: 	callq	_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_ # Offset: 720
    000002d5: 	movq	%rbp, %rdi
    000002d8: 	movl	$0x64, %esi
    000002dd: 	callq	_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_ # Offset: 733
    000002e2: 	movq	%rbp, %rdi
    000002e5: 	movl	$0x7d, %esi
    000002ea: 	callq	_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_ # Offset: 746
    000002ef: 	movq	%rbp, %rdi
    000002f2: 	movl	$0x7e, %esi
    000002f7: 	callq	_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_ # Offset: 759
    000002fc: 	movl	$0x7f, %esi
    00000301: 	movq	%rbp, %rdi
    00000304: 	leaq	DATAat0xa19e(%rip), %rbp
    0000030b: 	callq	_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_ # Offset: 779
    00000310: 	movss	DATAat0xa624(%rip), %xmm1
    00000318: 	leaq	DATAat0xa193(%rip), %rdi
    0000031f: 	movaps	%xmm1, %xmm0
    00000322: 	callq	_Z18validate_abs_valueIf12abs_functor1IfEEvPKcT_ # Offset: 802
    00000327: 	movss	DATAat0xa628(%rip), %xmm0
    0000032f: 	movq	%rbp, %rdi
    00000332: 	callq	_Z18validate_abs_valueIf12abs_functor7EvPKcT_ # Offset: 818
    00000337: 	movss	DATAat0xa544(%rip), %xmm0
    0000033f: 	movq	%rbp, %rdi
    00000342: 	callq	_Z18validate_abs_valueIf12abs_functor7EvPKcT_ # Offset: 834
    00000347: 	movss	DATAat0xa62c(%rip), %xmm0
    0000034f: 	movq	%rbp, %rdi
    00000352: 	callq	_Z18validate_abs_valueIf12abs_functor7EvPKcT_ # Offset: 850
    00000357: 	movss	DATAat0xa630(%rip), %xmm0
    0000035f: 	movq	%rbp, %rdi
    00000362: 	callq	_Z18validate_abs_valueIf12abs_functor7EvPKcT_ # Offset: 866
    00000367: 	movss	DATAat0xa634(%rip), %xmm0
    0000036f: 	movq	%rbp, %rdi
    00000372: 	callq	_Z18validate_abs_valueIf12abs_functor7EvPKcT_ # Offset: 882
    00000377: 	movss	DATAat0xa624(%rip), %xmm1
    0000037f: 	movq	%rbp, %rdi
    00000382: 	movaps	%xmm1, %xmm0
    00000385: 	callq	_Z18validate_abs_valueIf12abs_functor7EvPKcT_ # Offset: 901
    0000038a: 	movss	DATAat0xa638(%rip), %xmm0
    00000392: 	movq	%rbp, %rdi
    00000395: 	callq	_Z18validate_abs_valueIf12abs_functor7EvPKcT_ # Offset: 917
    0000039a: 	movss	DATAat0xa63c(%rip), %xmm0
    000003a2: 	movq	%rbp, %rdi
    000003a5: 	leaq	DATAat0xa1bb(%rip), %rbp
    000003ac: 	callq	_Z18validate_abs_valueIf12abs_functor7EvPKcT_ # Offset: 940
    000003b1: 	movsd	DATAat0xa500(%rip), %xmm2
    000003b9: 	leaq	DATAat0xa1a9(%rip), %rdi
    000003c0: 	movapd	%xmm2, %xmm0
    000003c4: 	callq	_Z18validate_abs_valueId12abs_functor1IdEEvPKcT_ # Offset: 964
    000003c9: 	movsd	DATAat0xa538(%rip), %xmm3
    000003d1: 	leaq	DATAat0xa1b2(%rip), %rdi
    000003d8: 	movapd	%xmm3, %xmm0
    000003dc: 	callq	_Z18validate_abs_valueId12abs_functor2IdEEvPKcT_ # Offset: 988
    000003e1: 	movq	DATAat0xa500(%rip), %rax
    000003e8: 	movq	%rbp, %rdi
    000003eb: 	movq	%rax, %xmm0
    000003f0: 	callq	_Z18validate_abs_valueId12abs_functor7EvPKcT_ # Offset: 1008
    000003f5: 	movsd	DATAat0xa540(%rip), %xmm1
    000003fd: 	movq	%rbp, %rdi
    00000400: 	movapd	%xmm1, %xmm0
    00000404: 	callq	_Z18validate_abs_valueId12abs_functor7EvPKcT_ # Offset: 1028
    00000409: 	movsd	DATAat0xa548(%rip), %xmm0
    00000411: 	movq	%rbp, %rdi
    00000414: 	callq	_Z18validate_abs_valueId12abs_functor7EvPKcT_ # Offset: 1044
    00000419: 	movsd	DATAat0xa550(%rip), %xmm0
    00000421: 	movq	%rbp, %rdi
    00000424: 	callq	_Z18validate_abs_valueId12abs_functor7EvPKcT_ # Offset: 1060
    00000429: 	movsd	DATAat0xa558(%rip), %xmm0
    00000431: 	movq	%rbp, %rdi
    00000434: 	callq	_Z18validate_abs_valueId12abs_functor7EvPKcT_ # Offset: 1076
    00000439: 	movsd	DATAat0xa560(%rip), %xmm0
    00000441: 	movq	%rbp, %rdi
    00000444: 	callq	_Z18validate_abs_valueId12abs_functor7EvPKcT_ # Offset: 1092
    00000449: 	movq	DATAat0xa538(%rip), %rax
    00000450: 	movq	%rbp, %rdi
    00000453: 	movq	%rax, %xmm0
    00000458: 	callq	_Z18validate_abs_valueId12abs_functor7EvPKcT_ # Offset: 1112
    0000045d: 	movsd	DATAat0xa568(%rip), %xmm3
    00000465: 	movq	%rbp, %rdi
    00000468: 	leaq	DATAat0xa1cd(%rip), %rbp
    0000046f: 	movapd	%xmm3, %xmm0
    00000473: 	callq	_Z18validate_abs_valueId12abs_functor7EvPKcT_ # Offset: 1139
    00000478: 	movq	DATAat0xa540(%rip), %rax
    0000047f: 	leaq	DATAat0xa1c4(%rip), %rdi
    00000486: 	movq	%rax, %xmm0
    0000048b: 	callq	_Z18validate_abs_valueId12abs_functor8IdEEvPKcT_ # Offset: 1163
    00000490: 	movq	DATAat0xa500(%rip), %rax
    00000497: 	movq	%rbp, %rdi
    0000049a: 	movq	%rax, %xmm0
    0000049f: 	callq	_Z18validate_abs_valueId12abs_functor9IdEEvPKcT_ # Offset: 1183
    000004a4: 	movq	DATAat0xa540(%rip), %rax
    000004ab: 	movq	%rbp, %rdi
    000004ae: 	movq	%rax, %xmm0
    000004b3: 	callq	_Z18validate_abs_valueId12abs_functor9IdEEvPKcT_ # Offset: 1203
    000004b8: 	movq	DATAat0xa568(%rip), %rax
    000004bf: 	movq	%rbp, %rdi
    000004c2: 	leaq	0x1f40(%rbx), %rbp
    000004c9: 	movq	%rax, %xmm0
    000004ce: 	callq	_Z18validate_abs_valueId12abs_functor9IdEEvPKcT_ # Offset: 1230
    000004d3: 	movl	init_value(%rip), %edx
    000004d9: 	movl	%edx, %ecx
    000004db: 	movzbl	%dl, %edx
    000004de: 	negl	%ecx
    000004e0: 	movzbl	%cl, %ecx
    000004e3: 	movq	%rcx, %rax
    000004e6: 	shlq	$0x8, %rax
    000004ea: 	orq	%rdx, %rax
    000004ed: 	shlq	$0x8, %rax
    000004f1: 	orq	%rcx, %rax
    000004f4: 	shlq	$0x8, %rax
    000004f8: 	orq	%rdx, %rax
    000004fb: 	shlq	$0x8, %rax
    000004ff: 	orq	%rcx, %rax
    00000502: 	shlq	$0x8, %rax
    00000506: 	orq	%rdx, %rax
    00000509: 	shlq	$0x8, %rax
    0000050d: 	orq	%rcx, %rax
    00000510: 	shlq	$0x8, %rax
    00000514: 	orq	%rdx, %rax
    00000517: 	movq	%rax, (%rsp)
    0000051b: 	movq	%rax, 0x8(%rsp)
    00000520: 	movq	%rbx, %rax
    00000523: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4:
    00000528: 	movdqa	(%rsp), %xmm4
    0000052d: 	addq	$0x10, %rax
    00000531: 	movaps	%xmm4, -0x10(%rax)
    00000535: 	cmpq	%rbp, %rax
    00000538: 	jne	.Ltmp4 # Offset: 1336
    0000053a: 	callq	clock@PLT # Offset: 1338
    0000053f: 	movl	iterations(%rip), %edi
    00000545: 	xorl	%r13d, %r13d
    00000548: 	movl	init_value(%rip), %ecx
    0000054e: 	movq	%rax, start_time(%rip)
    00000555: 	leaq	DATAat0xa4ca(%rip), %r12
    0000055c: 	testl	%edi, %edi
    0000055e: 	jle	.Ltmp5 # Offset: 1374
    00000564: 	nopl	(%rax) # Size: 4
.Ltmp8:
    00000568: 	pxor	%xmm1, %xmm1
    0000056c: 	movq	%rbx, %rax
    0000056f: 	movdqa	%xmm1, %xmm2
    00000573: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6:
    00000578: 	movdqa	%xmm2, %xmm0
    0000057c: 	psubb	(%rax), %xmm0
    00000580: 	pminub	(%rax), %xmm0
    00000584: 	addq	$0x10, %rax
    00000588: 	paddb	%xmm0, %xmm1
    0000058c: 	cmpq	%rax, %rbp
    0000058f: 	jne	.Ltmp6 # Offset: 1423
    00000591: 	movdqa	%xmm1, %xmm0
    00000595: 	movl	%ecx, %edx
    00000597: 	movl	%ecx, %esi
    00000599: 	negb	%dl
    0000059b: 	psrldq	$0x8, %xmm0
    000005a0: 	cmovsl	%esi, %edx
    000005a3: 	paddb	%xmm0, %xmm1
    000005a7: 	psadbw	%xmm2, %xmm1
    000005ab: 	movd	%xmm1, %eax
    000005af: 	shll	$0x6, %edx
    000005b2: 	cmpb	%al, %dl
    000005b4: 	je	.Ltmp7 # Offset: 1460
    000005b6: 	movl	current_test(%rip), %edx
    000005bc: 	movl	$0x1, %edi
    000005c1: 	movq	%r12, %rsi
    000005c4: 	xorl	%eax, %eax
    000005c6: 	addl	$0x1, %r13d
    000005ca: 	callq	__printf_chk@PLT # Offset: 1482
    000005cf: 	movl	iterations(%rip), %edi
    000005d5: 	cmpl	%edi, %r13d
    000005d8: 	jge	.Ltmp5 # Offset: 1496
    000005da: 	movl	init_value(%rip), %ecx
    000005e0: 	jmp	.Ltmp8 # Offset: 1504
    000005e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7:
    000005e8: 	addl	$0x1, %r13d
    000005ec: 	cmpl	%edi, %r13d
    000005ef: 	jl	.Ltmp8 # Offset: 1519
.Ltmp5:
    000005f5: 	callq	clock@PLT # Offset: 1525
    000005fa: 	leaq	DATAat0xa1d6(%rip), %rdi
    00000601: 	pxor	%xmm0, %xmm0
    00000605: 	xorl	%r13d, %r13d
    00000608: 	movq	%rax, end_time(%rip)
    0000060f: 	subq	start_time(%rip), %rax
    00000616: 	leaq	DATAat0xa4ca(%rip), %r12
    0000061d: 	cvtsi2sd	%rax, %xmm0
    00000622: 	divsd	DATAat0xa508(%rip), %xmm0
    0000062a: 	callq	_Z13record_resultdPKc # Offset: 1578
    0000062f: 	movq	%rbx, %rdi
    00000632: 	movl	$0x1f40, %esi
    00000637: 	leaq	DATAat0xa1e5(%rip), %rdx
    0000063e: 	callq	_Z13test_constantIa12abs_functor1IaEEvPT_iPKc # Offset: 1598
    00000643: 	callq	clock@PLT # Offset: 1603
    00000648: 	movl	iterations(%rip), %edi
    0000064e: 	movl	init_value(%rip), %ecx
    00000654: 	movq	%rax, start_time(%rip)
    0000065b: 	testl	%edi, %edi
    0000065d: 	jle	.Ltmp9 # Offset: 1629
    00000663: 	nopl	(%rax,%rax) # Size: 5
.Ltmp12:
    00000668: 	pxor	%xmm1, %xmm1
    0000066c: 	movq	%rbx, %rax
    0000066f: 	movdqa	%xmm1, %xmm2
    00000673: 	nopl	(%rax,%rax) # Size: 5
.Ltmp10:
    00000678: 	movdqa	%xmm2, %xmm0
    0000067c: 	psubb	(%rax), %xmm0
    00000680: 	pminub	(%rax), %xmm0
    00000684: 	addq	$0x10, %rax
    00000688: 	paddb	%xmm0, %xmm1
    0000068c: 	cmpq	%rbp, %rax
    0000068f: 	jne	.Ltmp10 # Offset: 1679
    00000691: 	movdqa	%xmm1, %xmm0
    00000695: 	movl	%ecx, %edx
    00000697: 	movl	%ecx, %esi
    00000699: 	negb	%dl
    0000069b: 	psrldq	$0x8, %xmm0
    000006a0: 	cmovsl	%esi, %edx
    000006a3: 	paddb	%xmm0, %xmm1
    000006a7: 	psadbw	%xmm2, %xmm1
    000006ab: 	movd	%xmm1, %eax
    000006af: 	shll	$0x6, %edx
    000006b2: 	cmpb	%al, %dl
    000006b4: 	je	.Ltmp11 # Offset: 1716
    000006b6: 	movl	current_test(%rip), %edx
    000006bc: 	movl	$0x1, %edi
    000006c1: 	movq	%r12, %rsi
    000006c4: 	xorl	%eax, %eax
    000006c6: 	addl	$0x1, %r13d
    000006ca: 	callq	__printf_chk@PLT # Offset: 1738
    000006cf: 	movl	iterations(%rip), %edi
    000006d5: 	cmpl	%edi, %r13d
    000006d8: 	jge	.Ltmp9 # Offset: 1752
    000006da: 	movl	init_value(%rip), %ecx
    000006e0: 	jmp	.Ltmp12 # Offset: 1760
    000006e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp11:
    000006e8: 	addl	$0x1, %r13d
    000006ec: 	cmpl	%edi, %r13d
    000006ef: 	jl	.Ltmp12 # Offset: 1775
.Ltmp9:
    000006f5: 	callq	clock@PLT # Offset: 1781
    000006fa: 	leaq	DATAat0xa1f1(%rip), %rdi
    00000701: 	pxor	%xmm0, %xmm0
    00000705: 	xorl	%r13d, %r13d
    00000708: 	movq	%rax, end_time(%rip)
    0000070f: 	subq	start_time(%rip), %rax
    00000716: 	leaq	DATAat0xa4ca(%rip), %r12
    0000071d: 	cvtsi2sd	%rax, %xmm0
    00000722: 	divsd	DATAat0xa508(%rip), %xmm0
    0000072a: 	callq	_Z13record_resultdPKc # Offset: 1834
    0000072f: 	leaq	DATAat0xa1fd(%rip), %rdx
    00000736: 	movl	$0x1f40, %esi
    0000073b: 	movq	%rbx, %rdi
    0000073e: 	callq	_Z13test_constantIa12abs_functor3IaEEvPT_iPKc # Offset: 1854
    00000743: 	leaq	DATAat0xa209(%rip), %rdx
    0000074a: 	movl	$0x1f40, %esi
    0000074f: 	movq	%rbx, %rdi
    00000752: 	callq	_Z13test_constantIa12abs_functor4IaEEvPT_iPKc # Offset: 1874
    00000757: 	leaq	DATAat0xa215(%rip), %rdx
    0000075e: 	movl	$0x1f40, %esi
    00000763: 	movq	%rbx, %rdi
    00000766: 	callq	_Z13test_constantIa12abs_functor5IaEEvPT_iPKc # Offset: 1894
    0000076b: 	movq	%rbx, %rdi
    0000076e: 	movl	$0x1f40, %esi
    00000773: 	leaq	DATAat0xa221(%rip), %rdx
    0000077a: 	callq	_Z13test_constantIa12abs_functor8IaEEvPT_iPKc # Offset: 1914
    0000077f: 	callq	clock@PLT # Offset: 1919
    00000784: 	movl	iterations(%rip), %edi
    0000078a: 	movl	init_value(%rip), %ecx
    00000790: 	movq	%rax, start_time(%rip)
    00000797: 	testl	%edi, %edi
    00000799: 	jle	.Ltmp13 # Offset: 1945
    0000079f: 	nop # Size: 1
.Ltmp16:
    000007a0: 	pxor	%xmm1, %xmm1
    000007a4: 	movq	%rbx, %rax
    000007a7: 	movdqa	%xmm1, %xmm2
    000007ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp14:
    000007b0: 	movdqa	%xmm2, %xmm0
    000007b4: 	psubb	(%rax), %xmm0
    000007b8: 	pminub	(%rax), %xmm0
    000007bc: 	addq	$0x10, %rax
    000007c0: 	paddb	%xmm0, %xmm1
    000007c4: 	cmpq	%rax, %rbp
    000007c7: 	jne	.Ltmp14 # Offset: 1991
    000007c9: 	movdqa	%xmm1, %xmm0
    000007cd: 	movl	%ecx, %edx
    000007cf: 	movl	%ecx, %esi
    000007d1: 	negb	%dl
    000007d3: 	psrldq	$0x8, %xmm0
    000007d8: 	cmovsl	%esi, %edx
    000007db: 	paddb	%xmm0, %xmm1
    000007df: 	psadbw	%xmm2, %xmm1
    000007e3: 	movd	%xmm1, %eax
    000007e7: 	shll	$0x6, %edx
    000007ea: 	cmpb	%al, %dl
    000007ec: 	je	.Ltmp15 # Offset: 2028
    000007ee: 	movl	current_test(%rip), %edx
    000007f4: 	movl	$0x1, %edi
    000007f9: 	movq	%r12, %rsi
    000007fc: 	xorl	%eax, %eax
    000007fe: 	addl	$0x1, %r13d
    00000802: 	callq	__printf_chk@PLT # Offset: 2050
    00000807: 	movl	iterations(%rip), %edi
    0000080d: 	cmpl	%r13d, %edi
    00000810: 	jle	.Ltmp13 # Offset: 2064
    00000812: 	movl	init_value(%rip), %ecx
    00000818: 	jmp	.Ltmp16 # Offset: 2072
    0000081a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp15:
    00000820: 	addl	$0x1, %r13d
    00000824: 	cmpl	%edi, %r13d
    00000827: 	jl	.Ltmp16 # Offset: 2087
.Ltmp13:
    0000082d: 	callq	clock@PLT # Offset: 2093
    00000832: 	leaq	DATAat0xa22d(%rip), %rdi
    00000839: 	pxor	%xmm0, %xmm0
    0000083d: 	leaq	data16(%rip), %rbp
    00000844: 	movq	%rax, end_time(%rip)
    0000084b: 	subq	start_time(%rip), %rax
    00000852: 	cvtsi2sd	%rax, %xmm0
    00000857: 	divsd	DATAat0xa508(%rip), %xmm0
    0000085f: 	callq	_Z13record_resultdPKc # Offset: 2143
    00000864: 	movl	iterations(%rip), %edx
    0000086a: 	xorl	%r8d, %r8d
    0000086d: 	xorl	%ecx, %ecx
    0000086f: 	movl	$0x1f40, %esi
    00000874: 	leaq	DATAat0xa239(%rip), %rdi
    0000087b: 	callq	_Z9summarizePKciiii # Offset: 2171
    00000880: 	movl	init_value(%rip), %eax
    00000886: 	movl	%eax, %edx
    00000888: 	movd	%eax, %xmm0
    0000088c: 	movq	%rbp, %rax
    0000088f: 	negl	%edx
    00000891: 	pinsrw	$0x1, %edx, %xmm0
    00000896: 	leaq	0x3e80(%rbp), %rdx
    0000089d: 	punpckldq	%xmm0, %xmm0
    000008a1: 	punpcklqdq	%xmm0, %xmm0
    000008a5: 	nopl	(%rax) # Size: 3
.Ltmp17:
    000008a8: 	movaps	%xmm0, (%rax)
    000008ab: 	addq	$0x10, %rax
    000008af: 	cmpq	%rdx, %rax
    000008b2: 	jne	.Ltmp17 # Offset: 2226
    000008b4: 	movq	%rbp, %rdi
    000008b7: 	leaq	DATAat0xa24f(%rip), %rdx
    000008be: 	movl	$0x1f40, %esi
    000008c3: 	callq	_Z13test_constantIs15abs_functor_stdIsEEvPT_iPKc # Offset: 2243
    000008c8: 	movq	%rbp, %rdi
    000008cb: 	movl	$0x1f40, %esi
    000008d0: 	leaq	DATAat0xa25f(%rip), %rdx
    000008d7: 	callq	_Z13test_constantIs12abs_functor1IsEEvPT_iPKc # Offset: 2263
    000008dc: 	movq	%rbp, %rdi
    000008df: 	movl	$0x1f40, %esi
    000008e4: 	leaq	DATAat0xa26c(%rip), %rdx
    000008eb: 	callq	_Z13test_constantIs12abs_functor2IsEEvPT_iPKc # Offset: 2283
    000008f0: 	movq	%rbp, %rdi
    000008f3: 	movl	$0x1f40, %esi
    000008f8: 	leaq	DATAat0xa279(%rip), %rdx
    000008ff: 	callq	_Z13test_constantIs12abs_functor3IsEEvPT_iPKc # Offset: 2303
    00000904: 	movq	%rbp, %rdi
    00000907: 	movl	$0x1f40, %esi
    0000090c: 	leaq	DATAat0xa286(%rip), %rdx
    00000913: 	callq	_Z13test_constantIs12abs_functor4IsEEvPT_iPKc # Offset: 2323
    00000918: 	movq	%rbp, %rdi
    0000091b: 	movl	$0x1f40, %esi
    00000920: 	leaq	DATAat0xa293(%rip), %rdx
    00000927: 	callq	_Z13test_constantIs12abs_functor5IsEEvPT_iPKc # Offset: 2343
    0000092c: 	movq	%rbp, %rdi
    0000092f: 	movl	$0x1f40, %esi
    00000934: 	leaq	DATAat0xa2a0(%rip), %rdx
    0000093b: 	callq	_Z13test_constantIs12abs_functor8IsEEvPT_iPKc # Offset: 2363
    00000940: 	movq	%rbp, %rdi
    00000943: 	movl	$0x1f40, %esi
    00000948: 	leaq	DATAat0xa2ad(%rip), %rdx
    0000094f: 	callq	_Z13test_constantIs12abs_functor9IsEEvPT_iPKc # Offset: 2383
    00000954: 	movl	iterations(%rip), %edx
    0000095a: 	xorl	%r8d, %r8d
    0000095d: 	xorl	%ecx, %ecx
    0000095f: 	movl	$0x1f40, %esi
    00000964: 	leaq	DATAat0xa2ba(%rip), %rdi
    0000096b: 	leaq	data32(%rip), %rbp
    00000972: 	callq	_Z9summarizePKciiii # Offset: 2418
    00000977: 	movl	init_value(%rip), %eax
    0000097d: 	movd	init_value(%rip), %xmm0
    00000985: 	leaq	0x7d00(%rbp), %rdx
    0000098c: 	negl	%eax
    0000098e: 	movd	%eax, %xmm5
    00000992: 	movq	%rbp, %rax
    00000995: 	punpckldq	%xmm5, %xmm0
    00000999: 	punpcklqdq	%xmm0, %xmm0
    0000099d: 	nopl	(%rax) # Size: 3
.Ltmp18:
    000009a0: 	movaps	%xmm0, (%rax)
    000009a3: 	addq	$0x10, %rax
    000009a7: 	cmpq	%rax, %rdx
    000009aa: 	jne	.Ltmp18 # Offset: 2474
    000009ac: 	movq	%rbp, %rdi
    000009af: 	leaq	DATAat0xa2d1(%rip), %rdx
    000009b6: 	movl	$0x1f40, %esi
    000009bb: 	callq	_Z13test_constantIi15abs_functor_stdIiEEvPT_iPKc # Offset: 2491
    000009c0: 	movq	%rbp, %rdi
    000009c3: 	movl	$0x1f40, %esi
    000009c8: 	leaq	DATAat0xa2e1(%rip), %rdx
    000009cf: 	callq	_Z13test_constantIi12abs_functor1IiEEvPT_iPKc # Offset: 2511
    000009d4: 	movq	%rbp, %rdi
    000009d7: 	movl	$0x1f40, %esi
    000009dc: 	leaq	DATAat0xa2ee(%rip), %rdx
    000009e3: 	callq	_Z13test_constantIi12abs_functor2IiEEvPT_iPKc # Offset: 2531
    000009e8: 	movq	%rbp, %rdi
    000009eb: 	movl	$0x1f40, %esi
    000009f0: 	leaq	DATAat0xa2fb(%rip), %rdx
    000009f7: 	callq	_Z13test_constantIi12abs_functor3IiEEvPT_iPKc # Offset: 2551
    000009fc: 	movq	%rbp, %rdi
    000009ff: 	movl	$0x1f40, %esi
    00000a04: 	leaq	DATAat0xa308(%rip), %rdx
    00000a0b: 	callq	_Z13test_constantIi12abs_functor4IiEEvPT_iPKc # Offset: 2571
    00000a10: 	movq	%rbp, %rdi
    00000a13: 	movl	$0x1f40, %esi
    00000a18: 	leaq	DATAat0xa315(%rip), %rdx
    00000a1f: 	callq	_Z13test_constantIi12abs_functor5IiEEvPT_iPKc # Offset: 2591
    00000a24: 	movq	%rbp, %rdi
    00000a27: 	movl	$0x1f40, %esi
    00000a2c: 	leaq	DATAat0xa322(%rip), %rdx
    00000a33: 	callq	_Z13test_constantIi12abs_functor8IiEEvPT_iPKc # Offset: 2611
    00000a38: 	movq	%rbp, %rdi
    00000a3b: 	movl	$0x1f40, %esi
    00000a40: 	leaq	DATAat0xa32f(%rip), %rdx
    00000a47: 	callq	_Z13test_constantIi12abs_functor9IiEEvPT_iPKc # Offset: 2631
    00000a4c: 	movl	iterations(%rip), %edx
    00000a52: 	xorl	%r8d, %r8d
    00000a55: 	xorl	%ecx, %ecx
    00000a57: 	movl	$0x1f40, %esi
    00000a5c: 	leaq	DATAat0xa33c(%rip), %rdi
    00000a63: 	leaq	data64(%rip), %rbp
    00000a6a: 	callq	_Z9summarizePKciiii # Offset: 2666
    00000a6f: 	movslq	init_value(%rip), %rax
    00000a76: 	movq	%rax, %rdx
    00000a79: 	movq	%rax, %xmm0
    00000a7e: 	movq	%rbp, %rax
    00000a81: 	negq	%rdx
    00000a84: 	movq	%rdx, %xmm6
    00000a89: 	leaq	0xfa00(%rbp), %rdx
    00000a90: 	punpcklqdq	%xmm6, %xmm0
    00000a94: 	nopl	(%rax) # Size: 4
.Ltmp19:
    00000a98: 	movaps	%xmm0, (%rax)
    00000a9b: 	addq	$0x10, %rax
    00000a9f: 	cmpq	%rax, %rdx
    00000aa2: 	jne	.Ltmp19 # Offset: 2722
    00000aa4: 	movq	%rbp, %rdi
    00000aa7: 	leaq	DATAat0xa353(%rip), %rdx
    00000aae: 	movl	$0x1f40, %esi
    00000ab3: 	callq	_Z13test_constantIl15abs_functor_stdIlEEvPT_iPKc # Offset: 2739
    00000ab8: 	movq	%rbp, %rdi
    00000abb: 	movl	$0x1f40, %esi
    00000ac0: 	leaq	DATAat0xa363(%rip), %rdx
    00000ac7: 	callq	_Z13test_constantIl12abs_functor1IlEEvPT_iPKc # Offset: 2759
    00000acc: 	movq	%rbp, %rdi
    00000acf: 	movl	$0x1f40, %esi
    00000ad4: 	leaq	DATAat0xa370(%rip), %rdx
    00000adb: 	callq	_Z13test_constantIl12abs_functor2IlEEvPT_iPKc # Offset: 2779
    00000ae0: 	movq	%rbp, %rdi
    00000ae3: 	movl	$0x1f40, %esi
    00000ae8: 	leaq	DATAat0xa37d(%rip), %rdx
    00000aef: 	callq	_Z13test_constantIl12abs_functor3IlEEvPT_iPKc # Offset: 2799
    00000af4: 	movq	%rbp, %rdi
    00000af7: 	movl	$0x1f40, %esi
    00000afc: 	leaq	DATAat0xa38a(%rip), %rdx
    00000b03: 	callq	_Z13test_constantIl12abs_functor4IlEEvPT_iPKc # Offset: 2819
    00000b08: 	movq	%rbp, %rdi
    00000b0b: 	movl	$0x1f40, %esi
    00000b10: 	leaq	DATAat0xa397(%rip), %rdx
    00000b17: 	callq	_Z13test_constantIl12abs_functor5IlEEvPT_iPKc # Offset: 2839
    00000b1c: 	movq	%rbp, %rdi
    00000b1f: 	movl	$0x1f40, %esi
    00000b24: 	leaq	DATAat0xa3a4(%rip), %rdx
    00000b2b: 	callq	_Z13test_constantIl12abs_functor8IlEEvPT_iPKc # Offset: 2859
    00000b30: 	movq	%rbp, %rdi
    00000b33: 	movl	$0x1f40, %esi
    00000b38: 	leaq	DATAat0xa3b1(%rip), %rdx
    00000b3f: 	callq	_Z13test_constantIl12abs_functor9IlEEvPT_iPKc # Offset: 2879
    00000b44: 	movl	iterations(%rip), %edx
    00000b4a: 	xorl	%r8d, %r8d
    00000b4d: 	xorl	%ecx, %ecx
    00000b4f: 	movl	$0x1f40, %esi
    00000b54: 	leaq	DATAat0xa3be(%rip), %rdi
    00000b5b: 	leaq	dataFloat(%rip), %rbp
    00000b62: 	callq	_Z9summarizePKciiii # Offset: 2914
    00000b67: 	pxor	%xmm0, %xmm0
    00000b6b: 	movq	%rbp, %rax
    00000b6e: 	leaq	0x7d00(%rbp), %rdx
    00000b75: 	cvtsi2ssl	init_value(%rip), %xmm0
    00000b7d: 	movaps	%xmm0, %xmm1
    00000b80: 	xorps	DATAat0xa5e0(%rip), %xmm1
    00000b87: 	unpcklps	%xmm1, %xmm0
    00000b8a: 	movlhps	%xmm0, %xmm0
    00000b8d: 	nopl	(%rax) # Size: 3
.Ltmp20:
    00000b90: 	movaps	%xmm0, (%rax)
    00000b93: 	addq	$0x10, %rax
    00000b97: 	cmpq	%rdx, %rax
    00000b9a: 	jne	.Ltmp20 # Offset: 2970
    00000b9c: 	movq	%rbp, %rdi
    00000b9f: 	leaq	DATAat0xa3d5(%rip), %rdx
    00000ba6: 	movl	$0x1f40, %esi
    00000bab: 	callq	_Z13test_constantIf12fabs_functorIfEEvPT_iPKc # Offset: 2987
    00000bb0: 	movq	%rbp, %rdi
    00000bb3: 	movl	$0x1f40, %esi
    00000bb8: 	leaq	DATAat0xa3e0(%rip), %rdx
    00000bbf: 	callq	_Z13test_constantIf13fabsf_functorIfEEvPT_iPKc # Offset: 3007
    00000bc4: 	movq	%rbp, %rdi
    00000bc7: 	movl	$0x1f40, %esi
    00000bcc: 	leaq	DATAat0xa3ec(%rip), %rdx
    00000bd3: 	callq	_Z13test_constantIf15abs_functor_stdIfEEvPT_iPKc # Offset: 3027
    00000bd8: 	movq	%rbp, %rdi
    00000bdb: 	movl	$0x1f40, %esi
    00000be0: 	leaq	DATAat0xa3fa(%rip), %rdx
    00000be7: 	callq	_Z13test_constantIf12abs_functor1IfEEvPT_iPKc # Offset: 3047
    00000bec: 	movq	%rbp, %rdi
    00000bef: 	movl	$0x1f40, %esi
    00000bf4: 	leaq	DATAat0xa405(%rip), %rdx
    00000bfb: 	callq	_Z13test_constantIf12abs_functor2IfEEvPT_iPKc # Offset: 3067
    00000c00: 	movq	%rbp, %rdi
    00000c03: 	movl	$0x1f40, %esi
    00000c08: 	leaq	DATAat0xa410(%rip), %rdx
    00000c0f: 	callq	_Z13test_constantIf12abs_functor6EvPT_iPKc # Offset: 3087
    00000c14: 	movq	%rbp, %rdi
    00000c17: 	movl	$0x1f40, %esi
    00000c1c: 	leaq	DATAat0xa41b(%rip), %rdx
    00000c23: 	callq	_Z13test_constantIf12abs_functor7EvPT_iPKc # Offset: 3107
    00000c28: 	movq	%rbp, %rdi
    00000c2b: 	movl	$0x1f40, %esi
    00000c30: 	leaq	DATAat0xa426(%rip), %rdx
    00000c37: 	callq	_Z13test_constantIf12abs_functor8IdEEvPT_iPKc # Offset: 3127
    00000c3c: 	movq	%rbp, %rdi
    00000c3f: 	movl	$0x1f40, %esi
    00000c44: 	leaq	DATAat0xa431(%rip), %rdx
    00000c4b: 	callq	_Z13test_constantIf12abs_functor9IdEEvPT_iPKc # Offset: 3147
    00000c50: 	movl	iterations(%rip), %edx
    00000c56: 	xorl	%r8d, %r8d
    00000c59: 	xorl	%ecx, %ecx
    00000c5b: 	movl	$0x1f40, %esi
    00000c60: 	leaq	DATAat0xa43c(%rip), %rdi
    00000c67: 	leaq	dataDouble(%rip), %rbp
    00000c6e: 	callq	_Z9summarizePKciiii # Offset: 3182
    00000c73: 	pxor	%xmm0, %xmm0
    00000c77: 	movq	%rbp, %rax
    00000c7a: 	leaq	0xfa00(%rbp), %rdx
    00000c81: 	cvtsi2sdl	init_value(%rip), %xmm0
    00000c89: 	movapd	%xmm0, %xmm1
    00000c8d: 	xorpd	DATAat0xa5f0(%rip), %xmm1
    00000c95: 	unpcklpd	%xmm1, %xmm0
    00000c99: 	nopl	(%rax) # Size: 7
.Ltmp21:
    00000ca0: 	movaps	%xmm0, (%rax)
    00000ca3: 	addq	$0x10, %rax
    00000ca7: 	cmpq	%rax, %rdx
    00000caa: 	jne	.Ltmp21 # Offset: 3242
    00000cac: 	movq	%rbp, %rdi
    00000caf: 	leaq	DATAat0xa451(%rip), %rdx
    00000cb6: 	movl	$0x1f40, %esi
    00000cbb: 	callq	_Z13test_constantId12fabs_functorIdEEvPT_iPKc # Offset: 3259
    00000cc0: 	movq	%rbp, %rdi
    00000cc3: 	movl	$0x1f40, %esi
    00000cc8: 	leaq	DATAat0xa45d(%rip), %rdx
    00000ccf: 	callq	_Z13test_constantId15abs_functor_stdIdEEvPT_iPKc # Offset: 3279
    00000cd4: 	movq	%rbp, %rdi
    00000cd7: 	movl	$0x1f40, %esi
    00000cdc: 	leaq	DATAat0xa46c(%rip), %rdx
    00000ce3: 	callq	_Z13test_constantId12abs_functor1IdEEvPT_iPKc # Offset: 3299
    00000ce8: 	movq	%rbp, %rdi
    00000ceb: 	movl	$0x1f40, %esi
    00000cf0: 	leaq	DATAat0xa478(%rip), %rdx
    00000cf7: 	callq	_Z13test_constantId12abs_functor2IdEEvPT_iPKc # Offset: 3319
    00000cfc: 	movq	%rbp, %rdi
    00000cff: 	movl	$0x1f40, %esi
    00000d04: 	leaq	DATAat0xa484(%rip), %rdx
    00000d0b: 	callq	_Z13test_constantId12abs_functor6EvPT_iPKc # Offset: 3339
    00000d10: 	movq	%rbp, %rdi
    00000d13: 	movl	$0x1f40, %esi
    00000d18: 	leaq	DATAat0xa490(%rip), %rdx
    00000d1f: 	callq	_Z13test_constantId12abs_functor7EvPT_iPKc # Offset: 3359
    00000d24: 	movq	%rbp, %rdi
    00000d27: 	movl	$0x1f40, %esi
    00000d2c: 	leaq	DATAat0xa49c(%rip), %rdx
    00000d33: 	callq	_Z13test_constantId12abs_functor8IdEEvPT_iPKc # Offset: 3379
    00000d38: 	movq	%rbp, %rdi
    00000d3b: 	movl	$0x1f40, %esi
    00000d40: 	leaq	DATAat0xa4a8(%rip), %rdx
    00000d47: 	callq	_Z13test_constantId12abs_functor9IdEEvPT_iPKc # Offset: 3399
    00000d4c: 	movl	iterations(%rip), %edx
    00000d52: 	xorl	%r8d, %r8d
    00000d55: 	xorl	%ecx, %ecx
    00000d57: 	movl	$0x1f40, %esi
    00000d5c: 	leaq	DATAat0xa4b4(%rip), %rdi
    00000d63: 	callq	_Z9summarizePKciiii # Offset: 3427
    00000d68: 	addq	$0x10, %rsp
    00000d6c: 	xorl	%eax, %eax
    00000d6e: 	popq	%rbx
    00000d6f: 	popq	%rbp
    00000d70: 	popq	%r12
    00000d72: 	popq	%r13
    00000d74: 	popq	%r14
    00000d76: 	retq # Offset: 3446
.Ltmp3:
    00000d77: 	movq	0x8(%r14), %rdi
    00000d7b: 	movl	$0xa, %edx
    00000d80: 	xorl	%esi, %esi
    00000d82: 	callq	strtol@PLT # Offset: 3458
    00000d87: 	movl	%eax, iterations(%rip)
    00000d8d: 	cmpl	$0x2, %r13d
    00000d91: 	jle	.Ltmp22 # Offset: 3473
    00000d97: 	movq	0x10(%r14), %rdi
    00000d9b: 	movl	$0xa, %edx
    00000da0: 	xorl	%esi, %esi
    00000da2: 	callq	strtol@PLT # Offset: 3490
    00000da7: 	movl	%eax, init_value(%rip)
    00000dad: 	jmp	.Ltmp22 # Offset: 3501
.Ltmp1:
    00000db2: 	leaq	DATAat0xa136(%rip), %rsi
    00000db9: 	movl	$0x1, %edi
    00000dbe: 	xorl	%eax, %eax
    00000dc0: 	callq	__printf_chk@PLT # Offset: 3520
    00000dc5: 	jmp	.Ltmp22 # Offset: 3525
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x1f30
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1f30
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0xcfd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 4
  State       : disassembled
  Address     : 0x1f60
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1f60
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp23 # Offset: 17
    00000013: 	movq	DATAat0xcfe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp23 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp23:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x1f90
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1f90
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp24 # Offset: 34
    00000024: 	movq	DATAat0xcff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp24 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp24:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1fd0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1fd0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp25 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp26 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp26:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp25:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x2010
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x2010
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 8
  State       : disassembled
  Address     : 0x2020
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x2020
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp27 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp28 # Offset: 38
.Ltmp27:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp29 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp28:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp29:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0xa008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x20c0
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x20c0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp30 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp31 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp32:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp32 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp45:
    00000069: 	leaq	DATAat0xa152(%rip), %rbp
    00000070: 	leaq	DATAat0xa028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0xa068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp33 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0xa510(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0xa098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0xa508(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp34 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp38:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp35 # Offset: 244
    000000fa: 	movq	DATAat0xa4f8(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp39:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0xa4f8(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp36 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp36:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0xa137(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0xa510(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp37 # Offset: 398
.Ltmp34:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp38 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp39 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp35:
    000001c8: 	movq	DATAat0xa500(%rip), %rsi
    000001cf: 	movq	DATAat0xa4f8(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp36 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp37:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp33 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp40 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp41:
    00000210: 	addq	$0x10, %rax
.Ltmp40:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp41 # Offset: 542
.Ltmp46:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0xa0c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp42 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp43 # Offset: 592
.Ltmp42:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp30:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp43:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp44:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp44 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0xa112(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp30 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp31:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp45 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp33:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp46 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x23f0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x23f0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp47 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp48 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp49:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp49 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp54:
    0000006a: 	leaq	DATAat0xa152(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0xa0f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0xa138(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0xa152(%rip), %r8
    000000a1: 	leaq	DATAat0xa126(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp50 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp51:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0xa137(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp51 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp50 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp52 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp53:
    00000140: 	addq	$0x10, %rax
.Ltmp52:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp53 # Offset: 334
.Ltmp55:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0xa0c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp47:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp48:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp54 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp50:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp55 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x25a0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x25a0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x25c0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x25c0
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0xa508(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_Z13test_constantIa12abs_functor1IaEEvPT_iPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x2600
  Size        : 0x362
  MaxSize     : 0x370
  Offset      : 0x2600
  Section     : .text
  Orc Section : .local.text._Z13test_constantIa12abs_functor1IaEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp56 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r13d, %eax
    0000004e: 	andl	$-0x10, %ebx
    00000051: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000058: 	shrl	$0x4, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r14,%rax), %r15
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp61:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp57 # Offset: 117
    0000007b: 	cmpl	$0xe, 0x4(%rsp)
    00000080: 	jbe	.Ltmp58 # Offset: 128
    00000086: 	pxor	%xmm3, %xmm3
    0000008a: 	movq	%r14, %rax
    0000008d: 	movdqa	%xmm3, %xmm4
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp59:
    00000098: 	movdqu	(%rax), %xmm2
    0000009c: 	movdqa	%xmm4, %xmm0
    000000a0: 	movdqa	%xmm4, %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	pcmpgtb	%xmm2, %xmm0
    000000ac: 	psubb	%xmm2, %xmm1
    000000b0: 	pand	%xmm0, %xmm1
    000000b4: 	pandn	%xmm2, %xmm0
    000000b8: 	por	%xmm1, %xmm0
    000000bc: 	paddb	%xmm0, %xmm3
    000000c0: 	cmpq	%r15, %rax
    000000c3: 	jne	.Ltmp59 # Offset: 195
    000000c5: 	movdqa	%xmm3, %xmm0
    000000c9: 	psrldq	$0x8, %xmm0
    000000ce: 	paddb	%xmm0, %xmm3
    000000d2: 	psadbw	%xmm4, %xmm3
    000000d6: 	movd	%xmm3, %eax
    000000da: 	cmpl	%ebx, %r13d
    000000dd: 	je	.Ltmp57 # Offset: 221
    000000e3: 	movl	%ebx, %edx
.Ltmp62:
    000000e5: 	movslq	%edx, %r9
    000000e8: 	movzbl	(%r14,%r9), %r10d
    000000ed: 	movl	%r10d, %r9d
    000000f0: 	negb	%r9b
    000000f3: 	cmovsl	%r10d, %r9d
    000000f7: 	addl	%r9d, %eax
    000000fa: 	leal	0x1(%rdx), %r9d
    000000fe: 	cmpl	%r9d, %r13d
    00000101: 	jle	.Ltmp57 # Offset: 257
    00000107: 	movslq	%r9d, %r9
    0000010a: 	movzbl	(%r14,%r9), %r10d
    0000010f: 	movl	%r10d, %r9d
    00000112: 	negb	%r9b
    00000115: 	cmovsl	%r10d, %r9d
    00000119: 	addl	%r9d, %eax
    0000011c: 	leal	0x2(%rdx), %r9d
    00000120: 	cmpl	%r9d, %r13d
    00000123: 	jle	.Ltmp57 # Offset: 291
    00000129: 	movslq	%r9d, %r9
    0000012c: 	movzbl	(%r14,%r9), %r10d
    00000131: 	movl	%r10d, %r9d
    00000134: 	negb	%r9b
    00000137: 	cmovsl	%r10d, %r9d
    0000013b: 	addl	%r9d, %eax
    0000013e: 	leal	0x3(%rdx), %r9d
    00000142: 	cmpl	%r9d, %r13d
    00000145: 	jle	.Ltmp57 # Offset: 325
    0000014b: 	movslq	%r9d, %r9
    0000014e: 	movzbl	(%r14,%r9), %r10d
    00000153: 	movl	%r10d, %r9d
    00000156: 	negb	%r9b
    00000159: 	cmovsl	%r10d, %r9d
    0000015d: 	addl	%r9d, %eax
    00000160: 	leal	0x4(%rdx), %r9d
    00000164: 	cmpl	%r9d, %r13d
    00000167: 	jle	.Ltmp57 # Offset: 359
    0000016d: 	movslq	%r9d, %r9
    00000170: 	movzbl	(%r14,%r9), %r10d
    00000175: 	movl	%r10d, %r9d
    00000178: 	negb	%r9b
    0000017b: 	cmovsl	%r10d, %r9d
    0000017f: 	addl	%r9d, %eax
    00000182: 	leal	0x5(%rdx), %r9d
    00000186: 	cmpl	%r9d, %r13d
    00000189: 	jle	.Ltmp57 # Offset: 393
    0000018f: 	movslq	%r9d, %r9
    00000192: 	movzbl	(%r14,%r9), %r10d
    00000197: 	movl	%r10d, %r9d
    0000019a: 	negb	%r9b
    0000019d: 	cmovsl	%r10d, %r9d
    000001a1: 	addl	%r9d, %eax
    000001a4: 	leal	0x6(%rdx), %r9d
    000001a8: 	cmpl	%r9d, %r13d
    000001ab: 	jle	.Ltmp57 # Offset: 427
    000001b1: 	movslq	%r9d, %r9
    000001b4: 	movzbl	(%r14,%r9), %r10d
    000001b9: 	movl	%r10d, %r9d
    000001bc: 	negb	%r9b
    000001bf: 	cmovsl	%r10d, %r9d
    000001c3: 	addl	%r9d, %eax
    000001c6: 	leal	0x7(%rdx), %r9d
    000001ca: 	cmpl	%r9d, %r13d
    000001cd: 	jle	.Ltmp57 # Offset: 461
    000001d3: 	movslq	%r9d, %r9
    000001d6: 	movzbl	(%r14,%r9), %r10d
    000001db: 	movl	%r10d, %r9d
    000001de: 	negb	%r9b
    000001e1: 	cmovsl	%r10d, %r9d
    000001e5: 	addl	%r9d, %eax
    000001e8: 	leal	0x8(%rdx), %r9d
    000001ec: 	cmpl	%r9d, %r13d
    000001ef: 	jle	.Ltmp57 # Offset: 495
    000001f5: 	movslq	%r9d, %r9
    000001f8: 	movzbl	(%r14,%r9), %r10d
    000001fd: 	movl	%r10d, %r9d
    00000200: 	negb	%r9b
    00000203: 	cmovsl	%r10d, %r9d
    00000207: 	addl	%r9d, %eax
    0000020a: 	leal	0x9(%rdx), %r9d
    0000020e: 	cmpl	%r9d, %r13d
    00000211: 	jle	.Ltmp57 # Offset: 529
    00000217: 	movslq	%r9d, %r9
    0000021a: 	movzbl	(%r14,%r9), %r10d
    0000021f: 	movl	%r10d, %r9d
    00000222: 	negb	%r9b
    00000225: 	cmovsl	%r10d, %r9d
    00000229: 	leal	0xa(%rdx), %r10d
    0000022d: 	addl	%eax, %r9d
    00000230: 	movl	%r9d, %eax
    00000233: 	cmpl	%r10d, %r13d
    00000236: 	jle	.Ltmp57 # Offset: 566
    0000023c: 	movslq	%r10d, %r10
    0000023f: 	movzbl	(%r14,%r10), %r10d
    00000244: 	movl	%r10d, %eax
    00000247: 	negb	%al
    00000249: 	cmovsl	%r10d, %eax
    0000024d: 	addl	%r9d, %eax
    00000250: 	leal	0xb(%rdx), %r9d
    00000254: 	cmpl	%r9d, %r13d
    00000257: 	jle	.Ltmp57 # Offset: 599
    00000259: 	movslq	%r9d, %r9
    0000025c: 	movzbl	(%r14,%r9), %r10d
    00000261: 	movl	%r10d, %r9d
    00000264: 	negb	%r9b
    00000267: 	cmovsl	%r10d, %r9d
    0000026b: 	addl	%r9d, %eax
    0000026e: 	leal	0xc(%rdx), %r9d
    00000272: 	cmpl	%r9d, %r13d
    00000275: 	jle	.Ltmp57 # Offset: 629
    00000277: 	movslq	%r9d, %r9
    0000027a: 	movzbl	(%r14,%r9), %r10d
    0000027f: 	movl	%r10d, %r9d
    00000282: 	negb	%r9b
    00000285: 	cmovsl	%r10d, %r9d
    00000289: 	addl	%r9d, %eax
    0000028c: 	leal	0xd(%rdx), %r9d
    00000290: 	cmpl	%r9d, %r13d
    00000293: 	jle	.Ltmp57 # Offset: 659
    00000295: 	movslq	%r9d, %r9
    00000298: 	movzbl	(%r14,%r9), %r10d
    0000029d: 	movl	%r10d, %r9d
    000002a0: 	negb	%r9b
    000002a3: 	cmovsl	%r10d, %r9d
    000002a7: 	addl	$0xe, %edx
    000002aa: 	addl	%r9d, %eax
    000002ad: 	cmpl	%edx, %r13d
    000002b0: 	jle	.Ltmp57 # Offset: 688
    000002b2: 	movslq	%edx, %rdx
    000002b5: 	movzbl	(%r14,%rdx), %r9d
    000002ba: 	movl	%r9d, %edx
    000002bd: 	negb	%dl
    000002bf: 	cmovsl	%r9d, %edx
    000002c3: 	addl	%edx, %eax
    000002c5: 	nopl	(%rax) # Size: 3
.Ltmp57:
    000002c8: 	movl	%edi, %edx
    000002ca: 	movl	%edi, %r9d
    000002cd: 	negb	%dl
    000002cf: 	cmovsl	%r9d, %edx
    000002d3: 	shll	$0x6, %edx
    000002d6: 	cmpb	%al, %dl
    000002d8: 	je	.Ltmp60 # Offset: 728
    000002da: 	movl	current_test(%rip), %edx
    000002e0: 	movq	%rbp, %rsi
    000002e3: 	movl	$0x1, %edi
    000002e8: 	xorl	%eax, %eax
    000002ea: 	addl	$0x1, %r12d
    000002ee: 	callq	__printf_chk@PLT # Offset: 750
    000002f3: 	movl	iterations(%rip), %esi
    000002f9: 	cmpl	%r12d, %esi
    000002fc: 	jle	.Ltmp56 # Offset: 764
    000002fe: 	movl	init_value(%rip), %edi
    00000304: 	jmp	.Ltmp61 # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp60:
    00000310: 	addl	$0x1, %r12d
    00000314: 	cmpl	%esi, %r12d
    00000317: 	jl	.Ltmp61 # Offset: 791
.Ltmp56:
    0000031d: 	callq	clock@PLT # Offset: 797
    00000322: 	pxor	%xmm0, %xmm0
    00000326: 	movq	0x8(%rsp), %rdi
    0000032b: 	movq	%rax, end_time(%rip)
    00000332: 	subq	start_time(%rip), %rax
    00000339: 	cvtsi2sd	%rax, %xmm0
    0000033e: 	divsd	DATAat0xa508(%rip), %xmm0
    00000346: 	addq	$0x18, %rsp
    0000034a: 	popq	%rbx
    0000034b: 	popq	%rbp
    0000034c: 	popq	%r12
    0000034e: 	popq	%r13
    00000350: 	popq	%r14
    00000352: 	popq	%r15
    00000354: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 852
.Ltmp58:
    00000359: 	xorl	%edx, %edx
    0000035b: 	xorl	%eax, %eax
    0000035d: 	jmp	.Ltmp62 # Offset: 861
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIa12abs_functor1IaEEvPT_iPKc"

Binary Function "_Z13test_constantIa12abs_functor3IaEEvPT_iPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x2970
  Size        : 0x392
  MaxSize     : 0x3a0
  Offset      : 0x2970
  Section     : .text
  Orc Section : .local.text._Z13test_constantIa12abs_functor3IaEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp63 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movl	init_value(%rip), %esi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r13d, %eax
    0000004e: 	movdqa	DATAat0xa570(%rip), %xmm3
    00000056: 	andl	$-0x10, %ebx
    00000059: 	shrl	$0x4, %eax
    0000005c: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000063: 	subl	$0x1, %eax
    00000066: 	shlq	$0x4, %rax
    0000006a: 	leaq	0x10(%r14,%rax), %r15
    0000006f: 	nop # Size: 1
.Ltmp68:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp64 # Offset: 117
    0000007b: 	cmpl	$0xe, 0x4(%rsp)
    00000080: 	jbe	.Ltmp65 # Offset: 128
    00000086: 	movq	%r14, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp66:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psraw	$0x7, %xmm1
    000000a1: 	pandn	%xmm3, %xmm1
    000000a5: 	psubb	%xmm3, %xmm1
    000000a9: 	paddb	%xmm1, %xmm0
    000000ad: 	pxor	%xmm1, %xmm0
    000000b1: 	paddb	%xmm0, %xmm2
    000000b5: 	cmpq	%r15, %rax
    000000b8: 	jne	.Ltmp66 # Offset: 184
    000000ba: 	movdqa	%xmm2, %xmm0
    000000be: 	psrldq	$0x8, %xmm0
    000000c3: 	paddb	%xmm0, %xmm2
    000000c7: 	pxor	%xmm0, %xmm0
    000000cb: 	psadbw	%xmm0, %xmm2
    000000cf: 	movd	%xmm2, %eax
    000000d3: 	cmpl	%r13d, %ebx
    000000d6: 	je	.Ltmp64 # Offset: 214
    000000dc: 	movl	%ebx, %edx
.Ltmp69:
    000000de: 	movslq	%edx, %r9
    000000e1: 	movzbl	(%r14,%r9), %r9d
    000000e6: 	movl	%r9d, %r10d
    000000e9: 	sarb	$0x7, %r10b
    000000ed: 	addl	%r10d, %r9d
    000000f0: 	xorl	%r10d, %r9d
    000000f3: 	addl	%r9d, %eax
    000000f6: 	leal	0x1(%rdx), %r9d
    000000fa: 	cmpl	%r9d, %r13d
    000000fd: 	jle	.Ltmp64 # Offset: 253
    00000103: 	movslq	%r9d, %r9
    00000106: 	movzbl	(%r14,%r9), %r9d
    0000010b: 	movl	%r9d, %r10d
    0000010e: 	sarb	$0x7, %r10b
    00000112: 	addl	%r10d, %r9d
    00000115: 	xorl	%r10d, %r9d
    00000118: 	addl	%r9d, %eax
    0000011b: 	leal	0x2(%rdx), %r9d
    0000011f: 	cmpl	%r9d, %r13d
    00000122: 	jle	.Ltmp64 # Offset: 290
    00000128: 	movslq	%r9d, %r9
    0000012b: 	movzbl	(%r14,%r9), %r9d
    00000130: 	movl	%r9d, %r10d
    00000133: 	sarb	$0x7, %r10b
    00000137: 	addl	%r10d, %r9d
    0000013a: 	xorl	%r10d, %r9d
    0000013d: 	addl	%r9d, %eax
    00000140: 	leal	0x3(%rdx), %r9d
    00000144: 	cmpl	%r9d, %r13d
    00000147: 	jle	.Ltmp64 # Offset: 327
    0000014d: 	movslq	%r9d, %r9
    00000150: 	movzbl	(%r14,%r9), %r9d
    00000155: 	movl	%r9d, %r10d
    00000158: 	sarb	$0x7, %r10b
    0000015c: 	addl	%r10d, %r9d
    0000015f: 	xorl	%r10d, %r9d
    00000162: 	addl	%r9d, %eax
    00000165: 	leal	0x4(%rdx), %r9d
    00000169: 	cmpl	%r9d, %r13d
    0000016c: 	jle	.Ltmp64 # Offset: 364
    00000172: 	movslq	%r9d, %r9
    00000175: 	movzbl	(%r14,%r9), %r9d
    0000017a: 	movl	%r9d, %r10d
    0000017d: 	sarb	$0x7, %r10b
    00000181: 	addl	%r10d, %r9d
    00000184: 	xorl	%r10d, %r9d
    00000187: 	addl	%r9d, %eax
    0000018a: 	leal	0x5(%rdx), %r9d
    0000018e: 	cmpl	%r9d, %r13d
    00000191: 	jle	.Ltmp64 # Offset: 401
    00000197: 	movslq	%r9d, %r9
    0000019a: 	movzbl	(%r14,%r9), %r9d
    0000019f: 	movl	%r9d, %r10d
    000001a2: 	sarb	$0x7, %r10b
    000001a6: 	addl	%r10d, %r9d
    000001a9: 	xorl	%r10d, %r9d
    000001ac: 	addl	%r9d, %eax
    000001af: 	leal	0x6(%rdx), %r9d
    000001b3: 	cmpl	%r9d, %r13d
    000001b6: 	jle	.Ltmp64 # Offset: 438
    000001bc: 	movslq	%r9d, %r9
    000001bf: 	movzbl	(%r14,%r9), %r9d
    000001c4: 	movl	%r9d, %r10d
    000001c7: 	sarb	$0x7, %r10b
    000001cb: 	addl	%r10d, %r9d
    000001ce: 	xorl	%r10d, %r9d
    000001d1: 	addl	%r9d, %eax
    000001d4: 	leal	0x7(%rdx), %r9d
    000001d8: 	cmpl	%r9d, %r13d
    000001db: 	jle	.Ltmp64 # Offset: 475
    000001e1: 	movslq	%r9d, %r9
    000001e4: 	movzbl	(%r14,%r9), %r9d
    000001e9: 	movl	%r9d, %r10d
    000001ec: 	sarb	$0x7, %r10b
    000001f0: 	addl	%r10d, %r9d
    000001f3: 	xorl	%r10d, %r9d
    000001f6: 	addl	%r9d, %eax
    000001f9: 	leal	0x8(%rdx), %r9d
    000001fd: 	cmpl	%r9d, %r13d
    00000200: 	jle	.Ltmp64 # Offset: 512
    00000206: 	movslq	%r9d, %r9
    00000209: 	movzbl	(%r14,%r9), %r9d
    0000020e: 	movl	%r9d, %r10d
    00000211: 	sarb	$0x7, %r10b
    00000215: 	addl	%r10d, %r9d
    00000218: 	xorl	%r10d, %r9d
    0000021b: 	addl	%r9d, %eax
    0000021e: 	leal	0x9(%rdx), %r9d
    00000222: 	cmpl	%r9d, %r13d
    00000225: 	jle	.Ltmp64 # Offset: 549
    0000022b: 	movslq	%r9d, %r9
    0000022e: 	movzbl	(%r14,%r9), %r9d
    00000233: 	movl	%r9d, %r10d
    00000236: 	sarb	$0x7, %r10b
    0000023a: 	addl	%r10d, %r9d
    0000023d: 	xorl	%r10d, %r9d
    00000240: 	leal	0xa(%rdx), %r10d
    00000244: 	addl	%eax, %r9d
    00000247: 	movl	%r9d, %eax
    0000024a: 	cmpl	%r10d, %r13d
    0000024d: 	jle	.Ltmp64 # Offset: 589
    00000253: 	movslq	%r10d, %r10
    00000256: 	movzbl	(%r14,%r10), %eax
    0000025b: 	movl	%eax, %r10d
    0000025e: 	sarb	$0x7, %r10b
    00000262: 	addl	%r10d, %eax
    00000265: 	xorl	%r10d, %eax
    00000268: 	addl	%r9d, %eax
    0000026b: 	leal	0xb(%rdx), %r9d
    0000026f: 	cmpl	%r9d, %r13d
    00000272: 	jle	.Ltmp64 # Offset: 626
    00000274: 	movslq	%r9d, %r9
    00000277: 	movzbl	(%r14,%r9), %r9d
    0000027c: 	movl	%r9d, %r10d
    0000027f: 	sarb	$0x7, %r10b
    00000283: 	addl	%r10d, %r9d
    00000286: 	xorl	%r10d, %r9d
    00000289: 	addl	%r9d, %eax
    0000028c: 	leal	0xc(%rdx), %r9d
    00000290: 	cmpl	%r9d, %r13d
    00000293: 	jle	.Ltmp64 # Offset: 659
    00000295: 	movslq	%r9d, %r9
    00000298: 	movzbl	(%r14,%r9), %r9d
    0000029d: 	movl	%r9d, %r10d
    000002a0: 	sarb	$0x7, %r10b
    000002a4: 	addl	%r10d, %r9d
    000002a7: 	xorl	%r10d, %r9d
    000002aa: 	addl	%r9d, %eax
    000002ad: 	leal	0xd(%rdx), %r9d
    000002b1: 	cmpl	%r9d, %r13d
    000002b4: 	jle	.Ltmp64 # Offset: 692
    000002b6: 	movslq	%r9d, %r9
    000002b9: 	addl	$0xe, %edx
    000002bc: 	movzbl	(%r14,%r9), %r9d
    000002c1: 	movl	%r9d, %r10d
    000002c4: 	sarb	$0x7, %r10b
    000002c8: 	addl	%r10d, %r9d
    000002cb: 	xorl	%r10d, %r9d
    000002ce: 	addl	%r9d, %eax
    000002d1: 	cmpl	%edx, %r13d
    000002d4: 	jle	.Ltmp64 # Offset: 724
    000002d6: 	movslq	%edx, %rdx
    000002d9: 	movzbl	(%r14,%rdx), %edx
    000002de: 	movl	%edx, %r9d
    000002e1: 	sarb	$0x7, %r9b
    000002e5: 	addl	%r9d, %edx
    000002e8: 	xorl	%r9d, %edx
    000002eb: 	addl	%edx, %eax
    000002ed: 	nopl	(%rax) # Size: 3
.Ltmp64:
    000002f0: 	movl	%esi, %r9d
    000002f3: 	sarb	$0x7, %r9b
    000002f7: 	leal	(%r9,%rsi), %edx
    000002fb: 	xorl	%r9d, %edx
    000002fe: 	shll	$0x6, %edx
    00000301: 	cmpb	%al, %dl
    00000303: 	je	.Ltmp67 # Offset: 771
    00000305: 	movl	current_test(%rip), %edx
    0000030b: 	movl	$0x1, %edi
    00000310: 	movq	%rbp, %rsi
    00000313: 	xorl	%eax, %eax
    00000315: 	addl	$0x1, %r12d
    00000319: 	callq	__printf_chk@PLT # Offset: 793
    0000031e: 	movl	iterations(%rip), %edi
    00000324: 	cmpl	%edi, %r12d
    00000327: 	jge	.Ltmp63 # Offset: 807
    00000329: 	movl	init_value(%rip), %esi
    0000032f: 	movdqa	DATAat0xa570(%rip), %xmm3
    00000337: 	jmp	.Ltmp68 # Offset: 823
    0000033c: 	nopl	(%rax) # Size: 4
.Ltmp67:
    00000340: 	addl	$0x1, %r12d
    00000344: 	cmpl	%edi, %r12d
    00000347: 	jl	.Ltmp68 # Offset: 839
.Ltmp63:
    0000034d: 	callq	clock@PLT # Offset: 845
    00000352: 	pxor	%xmm0, %xmm0
    00000356: 	movq	0x8(%rsp), %rdi
    0000035b: 	movq	%rax, end_time(%rip)
    00000362: 	subq	start_time(%rip), %rax
    00000369: 	cvtsi2sd	%rax, %xmm0
    0000036e: 	divsd	DATAat0xa508(%rip), %xmm0
    00000376: 	addq	$0x18, %rsp
    0000037a: 	popq	%rbx
    0000037b: 	popq	%rbp
    0000037c: 	popq	%r12
    0000037e: 	popq	%r13
    00000380: 	popq	%r14
    00000382: 	popq	%r15
    00000384: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 900
.Ltmp65:
    00000389: 	xorl	%edx, %edx
    0000038b: 	xorl	%eax, %eax
    0000038d: 	jmp	.Ltmp69 # Offset: 909
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIa12abs_functor3IaEEvPT_iPKc"

Binary Function "_Z13test_constantIa12abs_functor4IaEEvPT_iPKc" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x2d10
  Size        : 0x392
  MaxSize     : 0x3a0
  Offset      : 0x2d10
  Section     : .text
  Orc Section : .local.text._Z13test_constantIa12abs_functor4IaEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp70 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movl	init_value(%rip), %esi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r13d, %eax
    0000004e: 	movdqa	DATAat0xa570(%rip), %xmm3
    00000056: 	andl	$-0x10, %ebx
    00000059: 	shrl	$0x4, %eax
    0000005c: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000063: 	subl	$0x1, %eax
    00000066: 	shlq	$0x4, %rax
    0000006a: 	leaq	0x10(%r14,%rax), %r15
    0000006f: 	nop # Size: 1
.Ltmp75:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp71 # Offset: 117
    0000007b: 	cmpl	$0xe, 0x4(%rsp)
    00000080: 	jbe	.Ltmp72 # Offset: 128
    00000086: 	movq	%r14, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp73:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psraw	$0x7, %xmm1
    000000a1: 	pandn	%xmm3, %xmm1
    000000a5: 	psubb	%xmm3, %xmm1
    000000a9: 	pxor	%xmm1, %xmm0
    000000ad: 	psubb	%xmm1, %xmm0
    000000b1: 	paddb	%xmm0, %xmm2
    000000b5: 	cmpq	%r15, %rax
    000000b8: 	jne	.Ltmp73 # Offset: 184
    000000ba: 	movdqa	%xmm2, %xmm0
    000000be: 	psrldq	$0x8, %xmm0
    000000c3: 	paddb	%xmm0, %xmm2
    000000c7: 	pxor	%xmm0, %xmm0
    000000cb: 	psadbw	%xmm0, %xmm2
    000000cf: 	movd	%xmm2, %eax
    000000d3: 	cmpl	%r13d, %ebx
    000000d6: 	je	.Ltmp71 # Offset: 214
    000000dc: 	movl	%ebx, %edx
.Ltmp76:
    000000de: 	movslq	%edx, %r9
    000000e1: 	movzbl	(%r14,%r9), %r9d
    000000e6: 	movl	%r9d, %r10d
    000000e9: 	sarb	$0x7, %r10b
    000000ed: 	xorl	%r10d, %r9d
    000000f0: 	subl	%r10d, %r9d
    000000f3: 	addl	%r9d, %eax
    000000f6: 	leal	0x1(%rdx), %r9d
    000000fa: 	cmpl	%r9d, %r13d
    000000fd: 	jle	.Ltmp71 # Offset: 253
    00000103: 	movslq	%r9d, %r9
    00000106: 	movzbl	(%r14,%r9), %r9d
    0000010b: 	movl	%r9d, %r10d
    0000010e: 	sarb	$0x7, %r10b
    00000112: 	xorl	%r10d, %r9d
    00000115: 	subl	%r10d, %r9d
    00000118: 	addl	%r9d, %eax
    0000011b: 	leal	0x2(%rdx), %r9d
    0000011f: 	cmpl	%r9d, %r13d
    00000122: 	jle	.Ltmp71 # Offset: 290
    00000128: 	movslq	%r9d, %r9
    0000012b: 	movzbl	(%r14,%r9), %r9d
    00000130: 	movl	%r9d, %r10d
    00000133: 	sarb	$0x7, %r10b
    00000137: 	xorl	%r10d, %r9d
    0000013a: 	subl	%r10d, %r9d
    0000013d: 	addl	%r9d, %eax
    00000140: 	leal	0x3(%rdx), %r9d
    00000144: 	cmpl	%r9d, %r13d
    00000147: 	jle	.Ltmp71 # Offset: 327
    0000014d: 	movslq	%r9d, %r9
    00000150: 	movzbl	(%r14,%r9), %r9d
    00000155: 	movl	%r9d, %r10d
    00000158: 	sarb	$0x7, %r10b
    0000015c: 	xorl	%r10d, %r9d
    0000015f: 	subl	%r10d, %r9d
    00000162: 	addl	%r9d, %eax
    00000165: 	leal	0x4(%rdx), %r9d
    00000169: 	cmpl	%r9d, %r13d
    0000016c: 	jle	.Ltmp71 # Offset: 364
    00000172: 	movslq	%r9d, %r9
    00000175: 	movzbl	(%r14,%r9), %r9d
    0000017a: 	movl	%r9d, %r10d
    0000017d: 	sarb	$0x7, %r10b
    00000181: 	xorl	%r10d, %r9d
    00000184: 	subl	%r10d, %r9d
    00000187: 	addl	%r9d, %eax
    0000018a: 	leal	0x5(%rdx), %r9d
    0000018e: 	cmpl	%r9d, %r13d
    00000191: 	jle	.Ltmp71 # Offset: 401
    00000197: 	movslq	%r9d, %r9
    0000019a: 	movzbl	(%r14,%r9), %r9d
    0000019f: 	movl	%r9d, %r10d
    000001a2: 	sarb	$0x7, %r10b
    000001a6: 	xorl	%r10d, %r9d
    000001a9: 	subl	%r10d, %r9d
    000001ac: 	addl	%r9d, %eax
    000001af: 	leal	0x6(%rdx), %r9d
    000001b3: 	cmpl	%r9d, %r13d
    000001b6: 	jle	.Ltmp71 # Offset: 438
    000001bc: 	movslq	%r9d, %r9
    000001bf: 	movzbl	(%r14,%r9), %r9d
    000001c4: 	movl	%r9d, %r10d
    000001c7: 	sarb	$0x7, %r10b
    000001cb: 	xorl	%r10d, %r9d
    000001ce: 	subl	%r10d, %r9d
    000001d1: 	addl	%r9d, %eax
    000001d4: 	leal	0x7(%rdx), %r9d
    000001d8: 	cmpl	%r9d, %r13d
    000001db: 	jle	.Ltmp71 # Offset: 475
    000001e1: 	movslq	%r9d, %r9
    000001e4: 	movzbl	(%r14,%r9), %r9d
    000001e9: 	movl	%r9d, %r10d
    000001ec: 	sarb	$0x7, %r10b
    000001f0: 	xorl	%r10d, %r9d
    000001f3: 	subl	%r10d, %r9d
    000001f6: 	addl	%r9d, %eax
    000001f9: 	leal	0x8(%rdx), %r9d
    000001fd: 	cmpl	%r9d, %r13d
    00000200: 	jle	.Ltmp71 # Offset: 512
    00000206: 	movslq	%r9d, %r9
    00000209: 	movzbl	(%r14,%r9), %r9d
    0000020e: 	movl	%r9d, %r10d
    00000211: 	sarb	$0x7, %r10b
    00000215: 	xorl	%r10d, %r9d
    00000218: 	subl	%r10d, %r9d
    0000021b: 	addl	%r9d, %eax
    0000021e: 	leal	0x9(%rdx), %r9d
    00000222: 	cmpl	%r9d, %r13d
    00000225: 	jle	.Ltmp71 # Offset: 549
    0000022b: 	movslq	%r9d, %r9
    0000022e: 	movzbl	(%r14,%r9), %r9d
    00000233: 	movl	%r9d, %r10d
    00000236: 	sarb	$0x7, %r10b
    0000023a: 	xorl	%r10d, %r9d
    0000023d: 	subl	%r10d, %r9d
    00000240: 	leal	0xa(%rdx), %r10d
    00000244: 	addl	%eax, %r9d
    00000247: 	movl	%r9d, %eax
    0000024a: 	cmpl	%r10d, %r13d
    0000024d: 	jle	.Ltmp71 # Offset: 589
    00000253: 	movslq	%r10d, %r10
    00000256: 	movzbl	(%r14,%r10), %eax
    0000025b: 	movl	%eax, %r10d
    0000025e: 	sarb	$0x7, %r10b
    00000262: 	xorl	%r10d, %eax
    00000265: 	subl	%r10d, %eax
    00000268: 	addl	%r9d, %eax
    0000026b: 	leal	0xb(%rdx), %r9d
    0000026f: 	cmpl	%r9d, %r13d
    00000272: 	jle	.Ltmp71 # Offset: 626
    00000274: 	movslq	%r9d, %r9
    00000277: 	movzbl	(%r14,%r9), %r9d
    0000027c: 	movl	%r9d, %r10d
    0000027f: 	sarb	$0x7, %r10b
    00000283: 	xorl	%r10d, %r9d
    00000286: 	subl	%r10d, %r9d
    00000289: 	addl	%r9d, %eax
    0000028c: 	leal	0xc(%rdx), %r9d
    00000290: 	cmpl	%r9d, %r13d
    00000293: 	jle	.Ltmp71 # Offset: 659
    00000295: 	movslq	%r9d, %r9
    00000298: 	movzbl	(%r14,%r9), %r9d
    0000029d: 	movl	%r9d, %r10d
    000002a0: 	sarb	$0x7, %r10b
    000002a4: 	xorl	%r10d, %r9d
    000002a7: 	subl	%r10d, %r9d
    000002aa: 	addl	%r9d, %eax
    000002ad: 	leal	0xd(%rdx), %r9d
    000002b1: 	cmpl	%r9d, %r13d
    000002b4: 	jle	.Ltmp71 # Offset: 692
    000002b6: 	movslq	%r9d, %r9
    000002b9: 	addl	$0xe, %edx
    000002bc: 	movzbl	(%r14,%r9), %r9d
    000002c1: 	movl	%r9d, %r10d
    000002c4: 	sarb	$0x7, %r10b
    000002c8: 	xorl	%r10d, %r9d
    000002cb: 	subl	%r10d, %r9d
    000002ce: 	addl	%r9d, %eax
    000002d1: 	cmpl	%edx, %r13d
    000002d4: 	jle	.Ltmp71 # Offset: 724
    000002d6: 	movslq	%edx, %rdx
    000002d9: 	movzbl	(%r14,%rdx), %edx
    000002de: 	movl	%edx, %r9d
    000002e1: 	sarb	$0x7, %r9b
    000002e5: 	xorl	%r9d, %edx
    000002e8: 	subl	%r9d, %edx
    000002eb: 	addl	%edx, %eax
    000002ed: 	nopl	(%rax) # Size: 3
.Ltmp71:
    000002f0: 	movl	%esi, %r9d
    000002f3: 	sarb	$0x7, %r9b
    000002f7: 	movl	%r9d, %edx
    000002fa: 	xorl	%esi, %edx
    000002fc: 	subl	%r9d, %edx
    000002ff: 	shll	$0x6, %edx
    00000302: 	cmpb	%al, %dl
    00000304: 	je	.Ltmp74 # Offset: 772
    00000306: 	movl	current_test(%rip), %edx
    0000030c: 	movl	$0x1, %edi
    00000311: 	movq	%rbp, %rsi
    00000314: 	xorl	%eax, %eax
    00000316: 	addl	$0x1, %r12d
    0000031a: 	callq	__printf_chk@PLT # Offset: 794
    0000031f: 	movl	iterations(%rip), %edi
    00000325: 	cmpl	%r12d, %edi
    00000328: 	jle	.Ltmp70 # Offset: 808
    0000032a: 	movl	init_value(%rip), %esi
    00000330: 	movdqa	DATAat0xa570(%rip), %xmm3
    00000338: 	jmp	.Ltmp75 # Offset: 824
    0000033d: 	nopl	(%rax) # Size: 3
.Ltmp74:
    00000340: 	addl	$0x1, %r12d
    00000344: 	cmpl	%edi, %r12d
    00000347: 	jl	.Ltmp75 # Offset: 839
.Ltmp70:
    0000034d: 	callq	clock@PLT # Offset: 845
    00000352: 	pxor	%xmm0, %xmm0
    00000356: 	movq	0x8(%rsp), %rdi
    0000035b: 	movq	%rax, end_time(%rip)
    00000362: 	subq	start_time(%rip), %rax
    00000369: 	cvtsi2sd	%rax, %xmm0
    0000036e: 	divsd	DATAat0xa508(%rip), %xmm0
    00000376: 	addq	$0x18, %rsp
    0000037a: 	popq	%rbx
    0000037b: 	popq	%rbp
    0000037c: 	popq	%r12
    0000037e: 	popq	%r13
    00000380: 	popq	%r14
    00000382: 	popq	%r15
    00000384: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 900
.Ltmp72:
    00000389: 	xorl	%edx, %edx
    0000038b: 	xorl	%eax, %eax
    0000038d: 	jmp	.Ltmp76 # Offset: 909
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIa12abs_functor4IaEEvPT_iPKc"

Binary Function "_Z13test_constantIa12abs_functor5IaEEvPT_iPKc" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x30b0
  Size        : 0x3ea
  MaxSize     : 0x3f0
  Offset      : 0x30b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIa12abs_functor5IaEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp77 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movl	init_value(%rip), %esi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r13d, %eax
    0000004e: 	movdqa	DATAat0xa570(%rip), %xmm3
    00000056: 	andl	$-0x10, %ebx
    00000059: 	shrl	$0x4, %eax
    0000005c: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000063: 	subl	$0x1, %eax
    00000066: 	shlq	$0x4, %rax
    0000006a: 	leaq	0x10(%r14,%rax), %r15
    0000006f: 	nop # Size: 1
.Ltmp82:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp78 # Offset: 117
    0000007b: 	cmpl	$0xe, 0x4(%rsp)
    00000080: 	jbe	.Ltmp79 # Offset: 128
    00000086: 	movq	%r14, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp80:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	movdqu	(%rax), %xmm4
    00000098: 	addq	$0x10, %rax
    0000009c: 	psraw	$0x7, %xmm0
    000000a1: 	pandn	%xmm3, %xmm0
    000000a5: 	psubb	%xmm3, %xmm0
    000000a9: 	movdqa	%xmm0, %xmm1
    000000ad: 	pxor	%xmm4, %xmm0
    000000b1: 	pand	%xmm3, %xmm1
    000000b5: 	paddb	%xmm1, %xmm0
    000000b9: 	paddb	%xmm0, %xmm2
    000000bd: 	cmpq	%rax, %r15
    000000c0: 	jne	.Ltmp80 # Offset: 192
    000000c2: 	movdqa	%xmm2, %xmm0
    000000c6: 	psrldq	$0x8, %xmm0
    000000cb: 	paddb	%xmm0, %xmm2
    000000cf: 	pxor	%xmm0, %xmm0
    000000d3: 	psadbw	%xmm0, %xmm2
    000000d7: 	movd	%xmm2, %eax
    000000db: 	cmpl	%r13d, %ebx
    000000de: 	je	.Ltmp78 # Offset: 222
    000000e4: 	movl	%ebx, %edx
.Ltmp83:
    000000e6: 	movslq	%edx, %r9
    000000e9: 	movzbl	(%r14,%r9), %r9d
    000000ee: 	movl	%r9d, %r10d
    000000f1: 	sarb	$0x7, %r10b
    000000f5: 	xorl	%r10d, %r9d
    000000f8: 	andl	$0x1, %r10d
    000000fc: 	addl	%r10d, %r9d
    000000ff: 	addl	%r9d, %eax
    00000102: 	leal	0x1(%rdx), %r9d
    00000106: 	cmpl	%r9d, %r13d
    00000109: 	jle	.Ltmp78 # Offset: 265
    0000010f: 	movslq	%r9d, %r9
    00000112: 	movzbl	(%r14,%r9), %r11d
    00000117: 	movl	%r11d, %r10d
    0000011a: 	movl	%r11d, %r9d
    0000011d: 	sarb	$0x7, %r10b
    00000121: 	shrb	$0x7, %r9b
    00000125: 	xorl	%r11d, %r10d
    00000128: 	addl	%r10d, %r9d
    0000012b: 	addl	%r9d, %eax
    0000012e: 	leal	0x2(%rdx), %r9d
    00000132: 	cmpl	%r9d, %r13d
    00000135: 	jle	.Ltmp78 # Offset: 309
    0000013b: 	movslq	%r9d, %r9
    0000013e: 	movzbl	(%r14,%r9), %r11d
    00000143: 	movl	%r11d, %r10d
    00000146: 	movl	%r11d, %r9d
    00000149: 	sarb	$0x7, %r10b
    0000014d: 	shrb	$0x7, %r9b
    00000151: 	xorl	%r11d, %r10d
    00000154: 	addl	%r10d, %r9d
    00000157: 	addl	%r9d, %eax
    0000015a: 	leal	0x3(%rdx), %r9d
    0000015e: 	cmpl	%r13d, %r9d
    00000161: 	jge	.Ltmp78 # Offset: 353
    00000167: 	movslq	%r9d, %r9
    0000016a: 	movzbl	(%r14,%r9), %r9d
    0000016f: 	movl	%r9d, %r10d
    00000172: 	sarb	$0x7, %r10b
    00000176: 	xorl	%r10d, %r9d
    00000179: 	andl	$0x1, %r10d
    0000017d: 	addl	%r10d, %r9d
    00000180: 	addl	%r9d, %eax
    00000183: 	leal	0x4(%rdx), %r9d
    00000187: 	cmpl	%r9d, %r13d
    0000018a: 	jle	.Ltmp78 # Offset: 394
    00000190: 	movslq	%r9d, %r9
    00000193: 	movzbl	(%r14,%r9), %r9d
    00000198: 	movl	%r9d, %r10d
    0000019b: 	sarb	$0x7, %r10b
    0000019f: 	xorl	%r10d, %r9d
    000001a2: 	andl	$0x1, %r10d
    000001a6: 	addl	%r10d, %r9d
    000001a9: 	addl	%r9d, %eax
    000001ac: 	leal	0x5(%rdx), %r9d
    000001b0: 	cmpl	%r9d, %r13d
    000001b3: 	jle	.Ltmp78 # Offset: 435
    000001b9: 	movslq	%r9d, %r9
    000001bc: 	movzbl	(%r14,%r9), %r9d
    000001c1: 	movl	%r9d, %r10d
    000001c4: 	sarb	$0x7, %r10b
    000001c8: 	xorl	%r10d, %r9d
    000001cb: 	andl	$0x1, %r10d
    000001cf: 	addl	%r10d, %r9d
    000001d2: 	addl	%r9d, %eax
    000001d5: 	leal	0x6(%rdx), %r9d
    000001d9: 	cmpl	%r9d, %r13d
    000001dc: 	jle	.Ltmp78 # Offset: 476
    000001e2: 	movslq	%r9d, %r9
    000001e5: 	movzbl	(%r14,%r9), %r9d
    000001ea: 	movl	%r9d, %r10d
    000001ed: 	sarb	$0x7, %r10b
    000001f1: 	xorl	%r10d, %r9d
    000001f4: 	andl	$0x1, %r10d
    000001f8: 	addl	%r10d, %r9d
    000001fb: 	addl	%r9d, %eax
    000001fe: 	leal	0x7(%rdx), %r9d
    00000202: 	cmpl	%r9d, %r13d
    00000205: 	jle	.Ltmp78 # Offset: 517
    0000020b: 	movslq	%r9d, %r9
    0000020e: 	movzbl	(%r14,%r9), %r9d
    00000213: 	movl	%r9d, %r10d
    00000216: 	sarb	$0x7, %r10b
    0000021a: 	xorl	%r10d, %r9d
    0000021d: 	andl	$0x1, %r10d
    00000221: 	addl	%r10d, %r9d
    00000224: 	addl	%r9d, %eax
    00000227: 	leal	0x8(%rdx), %r9d
    0000022b: 	cmpl	%r9d, %r13d
    0000022e: 	jle	.Ltmp78 # Offset: 558
    00000234: 	movslq	%r9d, %r9
    00000237: 	movzbl	(%r14,%r9), %r9d
    0000023c: 	movl	%r9d, %r10d
    0000023f: 	sarb	$0x7, %r10b
    00000243: 	xorl	%r10d, %r9d
    00000246: 	andl	$0x1, %r10d
    0000024a: 	addl	%r10d, %r9d
    0000024d: 	addl	%r9d, %eax
    00000250: 	leal	0x9(%rdx), %r9d
    00000254: 	cmpl	%r9d, %r13d
    00000257: 	jle	.Ltmp78 # Offset: 599
    0000025d: 	movslq	%r9d, %r9
    00000260: 	movzbl	(%r14,%r9), %r9d
    00000265: 	movl	%r9d, %r10d
    00000268: 	sarb	$0x7, %r10b
    0000026c: 	xorl	%r10d, %r9d
    0000026f: 	andl	$0x1, %r10d
    00000273: 	addl	%r10d, %r9d
    00000276: 	leal	0xa(%rdx), %r10d
    0000027a: 	addl	%eax, %r9d
    0000027d: 	movl	%r9d, %eax
    00000280: 	cmpl	%r10d, %r13d
    00000283: 	jle	.Ltmp78 # Offset: 643
    00000289: 	movslq	%r10d, %r10
    0000028c: 	movzbl	(%r14,%r10), %eax
    00000291: 	movl	%eax, %r10d
    00000294: 	sarb	$0x7, %r10b
    00000298: 	xorl	%r10d, %eax
    0000029b: 	andl	$0x1, %r10d
    0000029f: 	addl	%r10d, %eax
    000002a2: 	addl	%r9d, %eax
    000002a5: 	leal	0xb(%rdx), %r9d
    000002a9: 	cmpl	%r9d, %r13d
    000002ac: 	jle	.Ltmp78 # Offset: 684
    000002b2: 	movslq	%r9d, %r9
    000002b5: 	movzbl	(%r14,%r9), %r9d
    000002ba: 	movl	%r9d, %r10d
    000002bd: 	sarb	$0x7, %r10b
    000002c1: 	xorl	%r10d, %r9d
    000002c4: 	andl	$0x1, %r10d
    000002c8: 	addl	%r10d, %r9d
    000002cb: 	addl	%r9d, %eax
    000002ce: 	leal	0xc(%rdx), %r9d
    000002d2: 	cmpl	%r9d, %r13d
    000002d5: 	jle	.Ltmp78 # Offset: 725
    000002d7: 	movslq	%r9d, %r9
    000002da: 	movzbl	(%r14,%r9), %r9d
    000002df: 	movl	%r9d, %r10d
    000002e2: 	sarb	$0x7, %r10b
    000002e6: 	xorl	%r10d, %r9d
    000002e9: 	andl	$0x1, %r10d
    000002ed: 	addl	%r10d, %r9d
    000002f0: 	addl	%r9d, %eax
    000002f3: 	leal	0xd(%rdx), %r9d
    000002f7: 	cmpl	%r9d, %r13d
    000002fa: 	jle	.Ltmp78 # Offset: 762
    000002fc: 	movslq	%r9d, %r9
    000002ff: 	addl	$0xe, %edx
    00000302: 	movzbl	(%r14,%r9), %r9d
    00000307: 	movl	%r9d, %r10d
    0000030a: 	sarb	$0x7, %r10b
    0000030e: 	xorl	%r10d, %r9d
    00000311: 	andl	$0x1, %r10d
    00000315: 	addl	%r10d, %r9d
    00000318: 	addl	%r9d, %eax
    0000031b: 	cmpl	%edx, %r13d
    0000031e: 	jle	.Ltmp78 # Offset: 798
    00000320: 	movslq	%edx, %rdx
    00000323: 	movzbl	(%r14,%rdx), %r10d
    00000328: 	movl	%r10d, %r9d
    0000032b: 	movl	%r10d, %edx
    0000032e: 	sarb	$0x7, %r9b
    00000332: 	shrb	$0x7, %dl
    00000335: 	xorl	%r10d, %r9d
    00000338: 	addl	%r9d, %edx
    0000033b: 	addl	%edx, %eax
    0000033d: 	nopl	(%rax) # Size: 3
.Ltmp78:
    00000340: 	movl	%esi, %r9d
    00000343: 	sarb	$0x7, %r9b
    00000347: 	movl	%r9d, %edx
    0000034a: 	andl	$0x1, %r9d
    0000034e: 	xorl	%esi, %edx
    00000350: 	addl	%r9d, %edx
    00000353: 	shll	$0x6, %edx
    00000356: 	cmpb	%al, %dl
    00000358: 	je	.Ltmp81 # Offset: 856
    0000035a: 	movl	current_test(%rip), %edx
    00000360: 	movl	$0x1, %edi
    00000365: 	movq	%rbp, %rsi
    00000368: 	xorl	%eax, %eax
    0000036a: 	addl	$0x1, %r12d
    0000036e: 	callq	__printf_chk@PLT # Offset: 878
    00000373: 	movl	iterations(%rip), %edi
    00000379: 	cmpl	%edi, %r12d
    0000037c: 	jge	.Ltmp77 # Offset: 892
    0000037e: 	movl	init_value(%rip), %esi
    00000384: 	movdqa	DATAat0xa570(%rip), %xmm3
    0000038c: 	jmp	.Ltmp82 # Offset: 908
    00000391: 	nopl	(%rax) # Size: 7
.Ltmp81:
    00000398: 	addl	$0x1, %r12d
    0000039c: 	cmpl	%edi, %r12d
    0000039f: 	jl	.Ltmp82 # Offset: 927
.Ltmp77:
    000003a5: 	callq	clock@PLT # Offset: 933
    000003aa: 	pxor	%xmm0, %xmm0
    000003ae: 	movq	0x8(%rsp), %rdi
    000003b3: 	movq	%rax, end_time(%rip)
    000003ba: 	subq	start_time(%rip), %rax
    000003c1: 	cvtsi2sd	%rax, %xmm0
    000003c6: 	divsd	DATAat0xa508(%rip), %xmm0
    000003ce: 	addq	$0x18, %rsp
    000003d2: 	popq	%rbx
    000003d3: 	popq	%rbp
    000003d4: 	popq	%r12
    000003d6: 	popq	%r13
    000003d8: 	popq	%r14
    000003da: 	popq	%r15
    000003dc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 988
.Ltmp79:
    000003e1: 	xorl	%edx, %edx
    000003e3: 	xorl	%eax, %eax
    000003e5: 	jmp	.Ltmp83 # Offset: 997
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIa12abs_functor5IaEEvPT_iPKc"

Binary Function "_Z13test_constantIa12abs_functor8IaEEvPT_iPKc" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x34a0
  Size        : 0x362
  MaxSize     : 0x370
  Offset      : 0x34a0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIa12abs_functor8IaEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp84 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r13d, %eax
    0000004e: 	andl	$-0x10, %ebx
    00000051: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000058: 	shrl	$0x4, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r14,%rax), %r15
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp89:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp85 # Offset: 117
    0000007b: 	cmpl	$0xe, 0x4(%rsp)
    00000080: 	jbe	.Ltmp86 # Offset: 128
    00000086: 	pxor	%xmm3, %xmm3
    0000008a: 	movq	%r14, %rax
    0000008d: 	movdqa	%xmm3, %xmm4
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp87:
    00000098: 	movdqu	(%rax), %xmm2
    0000009c: 	movdqa	%xmm4, %xmm0
    000000a0: 	movdqa	%xmm4, %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	pcmpgtb	%xmm2, %xmm0
    000000ac: 	psubb	%xmm2, %xmm1
    000000b0: 	pand	%xmm0, %xmm1
    000000b4: 	pandn	%xmm2, %xmm0
    000000b8: 	por	%xmm1, %xmm0
    000000bc: 	paddb	%xmm0, %xmm3
    000000c0: 	cmpq	%r15, %rax
    000000c3: 	jne	.Ltmp87 # Offset: 195
    000000c5: 	movdqa	%xmm3, %xmm0
    000000c9: 	psrldq	$0x8, %xmm0
    000000ce: 	paddb	%xmm0, %xmm3
    000000d2: 	psadbw	%xmm4, %xmm3
    000000d6: 	movd	%xmm3, %eax
    000000da: 	cmpl	%ebx, %r13d
    000000dd: 	je	.Ltmp85 # Offset: 221
    000000e3: 	movl	%ebx, %edx
.Ltmp90:
    000000e5: 	movslq	%edx, %r9
    000000e8: 	movzbl	(%r14,%r9), %r10d
    000000ed: 	movl	%r10d, %r9d
    000000f0: 	negb	%r9b
    000000f3: 	cmovsl	%r10d, %r9d
    000000f7: 	addl	%r9d, %eax
    000000fa: 	leal	0x1(%rdx), %r9d
    000000fe: 	cmpl	%r9d, %r13d
    00000101: 	jle	.Ltmp85 # Offset: 257
    00000107: 	movslq	%r9d, %r9
    0000010a: 	movzbl	(%r14,%r9), %r10d
    0000010f: 	movl	%r10d, %r9d
    00000112: 	negb	%r9b
    00000115: 	cmovsl	%r10d, %r9d
    00000119: 	addl	%r9d, %eax
    0000011c: 	leal	0x2(%rdx), %r9d
    00000120: 	cmpl	%r9d, %r13d
    00000123: 	jle	.Ltmp85 # Offset: 291
    00000129: 	movslq	%r9d, %r9
    0000012c: 	movzbl	(%r14,%r9), %r10d
    00000131: 	movl	%r10d, %r9d
    00000134: 	negb	%r9b
    00000137: 	cmovsl	%r10d, %r9d
    0000013b: 	addl	%r9d, %eax
    0000013e: 	leal	0x3(%rdx), %r9d
    00000142: 	cmpl	%r9d, %r13d
    00000145: 	jle	.Ltmp85 # Offset: 325
    0000014b: 	movslq	%r9d, %r9
    0000014e: 	movzbl	(%r14,%r9), %r10d
    00000153: 	movl	%r10d, %r9d
    00000156: 	negb	%r9b
    00000159: 	cmovsl	%r10d, %r9d
    0000015d: 	addl	%r9d, %eax
    00000160: 	leal	0x4(%rdx), %r9d
    00000164: 	cmpl	%r9d, %r13d
    00000167: 	jle	.Ltmp85 # Offset: 359
    0000016d: 	movslq	%r9d, %r9
    00000170: 	movzbl	(%r14,%r9), %r10d
    00000175: 	movl	%r10d, %r9d
    00000178: 	negb	%r9b
    0000017b: 	cmovsl	%r10d, %r9d
    0000017f: 	addl	%r9d, %eax
    00000182: 	leal	0x5(%rdx), %r9d
    00000186: 	cmpl	%r9d, %r13d
    00000189: 	jle	.Ltmp85 # Offset: 393
    0000018f: 	movslq	%r9d, %r9
    00000192: 	movzbl	(%r14,%r9), %r10d
    00000197: 	movl	%r10d, %r9d
    0000019a: 	negb	%r9b
    0000019d: 	cmovsl	%r10d, %r9d
    000001a1: 	addl	%r9d, %eax
    000001a4: 	leal	0x6(%rdx), %r9d
    000001a8: 	cmpl	%r9d, %r13d
    000001ab: 	jle	.Ltmp85 # Offset: 427
    000001b1: 	movslq	%r9d, %r9
    000001b4: 	movzbl	(%r14,%r9), %r10d
    000001b9: 	movl	%r10d, %r9d
    000001bc: 	negb	%r9b
    000001bf: 	cmovsl	%r10d, %r9d
    000001c3: 	addl	%r9d, %eax
    000001c6: 	leal	0x7(%rdx), %r9d
    000001ca: 	cmpl	%r9d, %r13d
    000001cd: 	jle	.Ltmp85 # Offset: 461
    000001d3: 	movslq	%r9d, %r9
    000001d6: 	movzbl	(%r14,%r9), %r10d
    000001db: 	movl	%r10d, %r9d
    000001de: 	negb	%r9b
    000001e1: 	cmovsl	%r10d, %r9d
    000001e5: 	addl	%r9d, %eax
    000001e8: 	leal	0x8(%rdx), %r9d
    000001ec: 	cmpl	%r9d, %r13d
    000001ef: 	jle	.Ltmp85 # Offset: 495
    000001f5: 	movslq	%r9d, %r9
    000001f8: 	movzbl	(%r14,%r9), %r10d
    000001fd: 	movl	%r10d, %r9d
    00000200: 	negb	%r9b
    00000203: 	cmovsl	%r10d, %r9d
    00000207: 	addl	%r9d, %eax
    0000020a: 	leal	0x9(%rdx), %r9d
    0000020e: 	cmpl	%r9d, %r13d
    00000211: 	jle	.Ltmp85 # Offset: 529
    00000217: 	movslq	%r9d, %r9
    0000021a: 	movzbl	(%r14,%r9), %r10d
    0000021f: 	movl	%r10d, %r9d
    00000222: 	negb	%r9b
    00000225: 	cmovsl	%r10d, %r9d
    00000229: 	leal	0xa(%rdx), %r10d
    0000022d: 	addl	%eax, %r9d
    00000230: 	movl	%r9d, %eax
    00000233: 	cmpl	%r10d, %r13d
    00000236: 	jle	.Ltmp85 # Offset: 566
    0000023c: 	movslq	%r10d, %r10
    0000023f: 	movzbl	(%r14,%r10), %r10d
    00000244: 	movl	%r10d, %eax
    00000247: 	negb	%al
    00000249: 	cmovsl	%r10d, %eax
    0000024d: 	addl	%r9d, %eax
    00000250: 	leal	0xb(%rdx), %r9d
    00000254: 	cmpl	%r9d, %r13d
    00000257: 	jle	.Ltmp85 # Offset: 599
    00000259: 	movslq	%r9d, %r9
    0000025c: 	movzbl	(%r14,%r9), %r10d
    00000261: 	movl	%r10d, %r9d
    00000264: 	negb	%r9b
    00000267: 	cmovsl	%r10d, %r9d
    0000026b: 	addl	%r9d, %eax
    0000026e: 	leal	0xc(%rdx), %r9d
    00000272: 	cmpl	%r9d, %r13d
    00000275: 	jle	.Ltmp85 # Offset: 629
    00000277: 	movslq	%r9d, %r9
    0000027a: 	movzbl	(%r14,%r9), %r10d
    0000027f: 	movl	%r10d, %r9d
    00000282: 	negb	%r9b
    00000285: 	cmovsl	%r10d, %r9d
    00000289: 	addl	%r9d, %eax
    0000028c: 	leal	0xd(%rdx), %r9d
    00000290: 	cmpl	%r9d, %r13d
    00000293: 	jle	.Ltmp85 # Offset: 659
    00000295: 	movslq	%r9d, %r9
    00000298: 	movzbl	(%r14,%r9), %r10d
    0000029d: 	movl	%r10d, %r9d
    000002a0: 	negb	%r9b
    000002a3: 	cmovsl	%r10d, %r9d
    000002a7: 	addl	$0xe, %edx
    000002aa: 	addl	%r9d, %eax
    000002ad: 	cmpl	%edx, %r13d
    000002b0: 	jle	.Ltmp85 # Offset: 688
    000002b2: 	movslq	%edx, %rdx
    000002b5: 	movzbl	(%r14,%rdx), %r9d
    000002ba: 	movl	%r9d, %edx
    000002bd: 	negb	%dl
    000002bf: 	cmovsl	%r9d, %edx
    000002c3: 	addl	%edx, %eax
    000002c5: 	nopl	(%rax) # Size: 3
.Ltmp85:
    000002c8: 	movl	%edi, %edx
    000002ca: 	movl	%edi, %r9d
    000002cd: 	negb	%dl
    000002cf: 	cmovsl	%r9d, %edx
    000002d3: 	shll	$0x6, %edx
    000002d6: 	cmpb	%al, %dl
    000002d8: 	je	.Ltmp88 # Offset: 728
    000002da: 	movl	current_test(%rip), %edx
    000002e0: 	movq	%rbp, %rsi
    000002e3: 	movl	$0x1, %edi
    000002e8: 	xorl	%eax, %eax
    000002ea: 	addl	$0x1, %r12d
    000002ee: 	callq	__printf_chk@PLT # Offset: 750
    000002f3: 	movl	iterations(%rip), %esi
    000002f9: 	cmpl	%r12d, %esi
    000002fc: 	jle	.Ltmp84 # Offset: 764
    000002fe: 	movl	init_value(%rip), %edi
    00000304: 	jmp	.Ltmp89 # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp88:
    00000310: 	addl	$0x1, %r12d
    00000314: 	cmpl	%esi, %r12d
    00000317: 	jl	.Ltmp89 # Offset: 791
.Ltmp84:
    0000031d: 	callq	clock@PLT # Offset: 797
    00000322: 	pxor	%xmm0, %xmm0
    00000326: 	movq	0x8(%rsp), %rdi
    0000032b: 	movq	%rax, end_time(%rip)
    00000332: 	subq	start_time(%rip), %rax
    00000339: 	cvtsi2sd	%rax, %xmm0
    0000033e: 	divsd	DATAat0xa508(%rip), %xmm0
    00000346: 	addq	$0x18, %rsp
    0000034a: 	popq	%rbx
    0000034b: 	popq	%rbp
    0000034c: 	popq	%r12
    0000034e: 	popq	%r13
    00000350: 	popq	%r14
    00000352: 	popq	%r15
    00000354: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 852
.Ltmp86:
    00000359: 	xorl	%edx, %edx
    0000035b: 	xorl	%eax, %eax
    0000035d: 	jmp	.Ltmp90 # Offset: 861
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIa12abs_functor8IaEEvPT_iPKc"

Binary Function "_Z13test_constantIs15abs_functor_stdIsEEvPT_iPKc" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x3810
  Size        : 0x24a
  MaxSize     : 0x250
  Offset      : 0x3810
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs15abs_functor_stdIsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp91 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movl	init_value(%rip), %edi
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, 0x4(%rsp)
    00000048: 	movl	%ebx, %eax
    0000004a: 	andl	$-0x8, %ebp
    0000004d: 	leaq	DATAat0xa4ca(%rip), %r12
    00000054: 	shrl	$0x3, %eax
    00000057: 	subl	$0x1, %eax
    0000005a: 	shlq	$0x4, %rax
    0000005e: 	leaq	0x10(%r14,%rax), %r15
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp96:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp92 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp93 # Offset: 119
    0000007d: 	pxor	%xmm1, %xmm1
    00000081: 	movq	%r14, %rax
    00000084: 	movdqa	%xmm1, %xmm2
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp94:
    00000090: 	movdqu	(%rax), %xmm3
    00000094: 	movdqa	%xmm2, %xmm0
    00000098: 	addq	$0x10, %rax
    0000009c: 	psubw	%xmm3, %xmm0
    000000a0: 	pmaxsw	%xmm3, %xmm0
    000000a4: 	paddw	%xmm0, %xmm1
    000000a8: 	cmpq	%r15, %rax
    000000ab: 	jne	.Ltmp94 # Offset: 171
    000000ad: 	movdqa	%xmm1, %xmm0
    000000b1: 	psrldq	$0x8, %xmm0
    000000b6: 	paddw	%xmm0, %xmm1
    000000ba: 	movdqa	%xmm1, %xmm0
    000000be: 	psrldq	$0x4, %xmm0
    000000c3: 	paddw	%xmm0, %xmm1
    000000c7: 	movdqa	%xmm1, %xmm0
    000000cb: 	psrldq	$0x2, %xmm0
    000000d0: 	paddw	%xmm0, %xmm1
    000000d4: 	pextrw	$0x0, %xmm1, %eax
    000000d9: 	cmpl	%ebx, %ebp
    000000db: 	je	.Ltmp92 # Offset: 219
    000000e1: 	movl	%ebp, %edx
.Ltmp97:
    000000e3: 	movslq	%edx, %r10
    000000e6: 	movzwl	(%r14,%r10,2), %r11d
    000000eb: 	leaq	(%r10,%r10), %r9
    000000ef: 	movl	%r11d, %r10d
    000000f2: 	negw	%r10w
    000000f6: 	cmovsl	%r11d, %r10d
    000000fa: 	addl	%r10d, %eax
    000000fd: 	leal	0x1(%rdx), %r10d
    00000101: 	cmpl	%r10d, %ebx
    00000104: 	jle	.Ltmp92 # Offset: 260
    0000010a: 	movzwl	0x2(%r14,%r9), %r11d
    00000110: 	movl	%r11d, %r10d
    00000113: 	negw	%r10w
    00000117: 	cmovsl	%r11d, %r10d
    0000011b: 	addl	%r10d, %eax
    0000011e: 	leal	0x2(%rdx), %r10d
    00000122: 	cmpl	%r10d, %ebx
    00000125: 	jle	.Ltmp92 # Offset: 293
    0000012b: 	movzwl	0x4(%r14,%r9), %r11d
    00000131: 	movl	%r11d, %r10d
    00000134: 	negw	%r10w
    00000138: 	cmovsl	%r11d, %r10d
    0000013c: 	addl	%r10d, %eax
    0000013f: 	leal	0x3(%rdx), %r10d
    00000143: 	cmpl	%r10d, %ebx
    00000146: 	jle	.Ltmp92 # Offset: 326
    00000148: 	movzwl	0x6(%r14,%r9), %r11d
    0000014e: 	movl	%r11d, %r10d
    00000151: 	negw	%r10w
    00000155: 	cmovsl	%r11d, %r10d
    00000159: 	addl	%r10d, %eax
    0000015c: 	leal	0x4(%rdx), %r10d
    00000160: 	cmpl	%r10d, %ebx
    00000163: 	jle	.Ltmp92 # Offset: 355
    00000165: 	movzwl	0x8(%r14,%r9), %r11d
    0000016b: 	movl	%r11d, %r10d
    0000016e: 	negw	%r10w
    00000172: 	cmovsl	%r11d, %r10d
    00000176: 	addl	%r10d, %eax
    00000179: 	leal	0x5(%rdx), %r10d
    0000017d: 	cmpl	%r10d, %ebx
    00000180: 	jle	.Ltmp92 # Offset: 384
    00000182: 	movzwl	0xa(%r14,%r9), %r11d
    00000188: 	movl	%r11d, %r10d
    0000018b: 	negw	%r10w
    0000018f: 	cmovsl	%r11d, %r10d
    00000193: 	addl	$0x6, %edx
    00000196: 	addl	%r10d, %eax
    00000199: 	cmpl	%edx, %ebx
    0000019b: 	jle	.Ltmp92 # Offset: 411
    0000019d: 	movzwl	0xc(%r14,%r9), %r9d
    000001a3: 	movl	%r9d, %edx
    000001a6: 	negw	%dx
    000001a9: 	cmovsl	%r9d, %edx
    000001ad: 	addl	%edx, %eax
.Ltmp92:
    000001af: 	movl	%edi, %edx
    000001b1: 	movl	%edi, %r9d
    000001b4: 	negw	%dx
    000001b7: 	cmovsl	%r9d, %edx
    000001bb: 	imulw	$0x1f40, %dx, %dx
    000001c0: 	cmpw	%ax, %dx
    000001c3: 	je	.Ltmp95 # Offset: 451
    000001c5: 	movl	current_test(%rip), %edx
    000001cb: 	movq	%r12, %rsi
    000001ce: 	movl	$0x1, %edi
    000001d3: 	xorl	%eax, %eax
    000001d5: 	addl	$0x1, %r13d
    000001d9: 	callq	__printf_chk@PLT # Offset: 473
    000001de: 	movl	iterations(%rip), %esi
    000001e4: 	cmpl	%esi, %r13d
    000001e7: 	jge	.Ltmp91 # Offset: 487
    000001e9: 	movl	init_value(%rip), %edi
    000001ef: 	jmp	.Ltmp96 # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp95:
    000001f8: 	addl	$0x1, %r13d
    000001fc: 	cmpl	%esi, %r13d
    000001ff: 	jl	.Ltmp96 # Offset: 511
.Ltmp91:
    00000205: 	callq	clock@PLT # Offset: 517
    0000020a: 	pxor	%xmm0, %xmm0
    0000020e: 	movq	0x8(%rsp), %rdi
    00000213: 	movq	%rax, end_time(%rip)
    0000021a: 	subq	start_time(%rip), %rax
    00000221: 	cvtsi2sd	%rax, %xmm0
    00000226: 	divsd	DATAat0xa508(%rip), %xmm0
    0000022e: 	addq	$0x18, %rsp
    00000232: 	popq	%rbx
    00000233: 	popq	%rbp
    00000234: 	popq	%r12
    00000236: 	popq	%r13
    00000238: 	popq	%r14
    0000023a: 	popq	%r15
    0000023c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 572
.Ltmp93:
    00000241: 	xorl	%edx, %edx
    00000243: 	xorl	%eax, %eax
    00000245: 	jmp	.Ltmp97 # Offset: 581
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs15abs_functor_stdIsEEvPT_iPKc"

Binary Function "_Z13test_constantIs12abs_functor1IsEEvPT_iPKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x3a60
  Size        : 0x25a
  MaxSize     : 0x260
  Offset      : 0x3a60
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs12abs_functor1IsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp98 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movl	init_value(%rip), %edi
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, 0x4(%rsp)
    00000048: 	movl	%ebx, %eax
    0000004a: 	andl	$-0x8, %ebp
    0000004d: 	leaq	DATAat0xa4ca(%rip), %r12
    00000054: 	shrl	$0x3, %eax
    00000057: 	subl	$0x1, %eax
    0000005a: 	shlq	$0x4, %rax
    0000005e: 	leaq	0x10(%r14,%rax), %r15
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp103:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp99 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp100 # Offset: 119
    0000007d: 	pxor	%xmm1, %xmm1
    00000081: 	movq	%r14, %rax
    00000084: 	movdqa	%xmm1, %xmm4
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp101:
    00000090: 	movdqu	(%rax), %xmm3
    00000094: 	movdqa	%xmm4, %xmm0
    00000098: 	movdqa	%xmm4, %xmm2
    0000009c: 	addq	$0x10, %rax
    000000a0: 	pcmpgtw	%xmm3, %xmm0
    000000a4: 	psubw	%xmm3, %xmm2
    000000a8: 	pand	%xmm0, %xmm2
    000000ac: 	pandn	%xmm3, %xmm0
    000000b0: 	por	%xmm2, %xmm0
    000000b4: 	paddw	%xmm0, %xmm1
    000000b8: 	cmpq	%r15, %rax
    000000bb: 	jne	.Ltmp101 # Offset: 187
    000000bd: 	movdqa	%xmm1, %xmm0
    000000c1: 	psrldq	$0x8, %xmm0
    000000c6: 	paddw	%xmm0, %xmm1
    000000ca: 	movdqa	%xmm1, %xmm0
    000000ce: 	psrldq	$0x4, %xmm0
    000000d3: 	paddw	%xmm0, %xmm1
    000000d7: 	movdqa	%xmm1, %xmm0
    000000db: 	psrldq	$0x2, %xmm0
    000000e0: 	paddw	%xmm0, %xmm1
    000000e4: 	pextrw	$0x0, %xmm1, %eax
    000000e9: 	cmpl	%ebp, %ebx
    000000eb: 	je	.Ltmp99 # Offset: 235
    000000f1: 	movl	%ebp, %edx
.Ltmp104:
    000000f3: 	movslq	%edx, %r10
    000000f6: 	movzwl	(%r14,%r10,2), %r11d
    000000fb: 	leaq	(%r10,%r10), %r9
    000000ff: 	movl	%r11d, %r10d
    00000102: 	negw	%r10w
    00000106: 	cmovsl	%r11d, %r10d
    0000010a: 	addl	%r10d, %eax
    0000010d: 	leal	0x1(%rdx), %r10d
    00000111: 	cmpl	%r10d, %ebx
    00000114: 	jle	.Ltmp99 # Offset: 276
    0000011a: 	movzwl	0x2(%r14,%r9), %r11d
    00000120: 	movl	%r11d, %r10d
    00000123: 	negw	%r10w
    00000127: 	cmovsl	%r11d, %r10d
    0000012b: 	addl	%r10d, %eax
    0000012e: 	leal	0x2(%rdx), %r10d
    00000132: 	cmpl	%r10d, %ebx
    00000135: 	jle	.Ltmp99 # Offset: 309
    0000013b: 	movzwl	0x4(%r14,%r9), %r11d
    00000141: 	movl	%r11d, %r10d
    00000144: 	negw	%r10w
    00000148: 	cmovsl	%r11d, %r10d
    0000014c: 	addl	%r10d, %eax
    0000014f: 	leal	0x3(%rdx), %r10d
    00000153: 	cmpl	%r10d, %ebx
    00000156: 	jle	.Ltmp99 # Offset: 342
    00000158: 	movzwl	0x6(%r14,%r9), %r11d
    0000015e: 	movl	%r11d, %r10d
    00000161: 	negw	%r10w
    00000165: 	cmovsl	%r11d, %r10d
    00000169: 	addl	%r10d, %eax
    0000016c: 	leal	0x4(%rdx), %r10d
    00000170: 	cmpl	%r10d, %ebx
    00000173: 	jle	.Ltmp99 # Offset: 371
    00000175: 	movzwl	0x8(%r14,%r9), %r11d
    0000017b: 	movl	%r11d, %r10d
    0000017e: 	negw	%r10w
    00000182: 	cmovsl	%r11d, %r10d
    00000186: 	addl	%r10d, %eax
    00000189: 	leal	0x5(%rdx), %r10d
    0000018d: 	cmpl	%r10d, %ebx
    00000190: 	jle	.Ltmp99 # Offset: 400
    00000192: 	movzwl	0xa(%r14,%r9), %r11d
    00000198: 	movl	%r11d, %r10d
    0000019b: 	negw	%r10w
    0000019f: 	cmovsl	%r11d, %r10d
    000001a3: 	addl	$0x6, %edx
    000001a6: 	addl	%r10d, %eax
    000001a9: 	cmpl	%edx, %ebx
    000001ab: 	jle	.Ltmp99 # Offset: 427
    000001ad: 	movzwl	0xc(%r14,%r9), %r9d
    000001b3: 	movl	%r9d, %edx
    000001b6: 	negw	%dx
    000001b9: 	cmovsl	%r9d, %edx
    000001bd: 	addl	%edx, %eax
.Ltmp99:
    000001bf: 	movl	%edi, %edx
    000001c1: 	movl	%edi, %r9d
    000001c4: 	negw	%dx
    000001c7: 	cmovsl	%r9d, %edx
    000001cb: 	imulw	$0x1f40, %dx, %dx
    000001d0: 	cmpw	%ax, %dx
    000001d3: 	je	.Ltmp102 # Offset: 467
    000001d5: 	movl	current_test(%rip), %edx
    000001db: 	movq	%r12, %rsi
    000001de: 	movl	$0x1, %edi
    000001e3: 	xorl	%eax, %eax
    000001e5: 	addl	$0x1, %r13d
    000001e9: 	callq	__printf_chk@PLT # Offset: 489
    000001ee: 	movl	iterations(%rip), %esi
    000001f4: 	cmpl	%r13d, %esi
    000001f7: 	jle	.Ltmp98 # Offset: 503
    000001f9: 	movl	init_value(%rip), %edi
    000001ff: 	jmp	.Ltmp103 # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp102:
    00000208: 	addl	$0x1, %r13d
    0000020c: 	cmpl	%esi, %r13d
    0000020f: 	jl	.Ltmp103 # Offset: 527
.Ltmp98:
    00000215: 	callq	clock@PLT # Offset: 533
    0000021a: 	pxor	%xmm0, %xmm0
    0000021e: 	movq	0x8(%rsp), %rdi
    00000223: 	movq	%rax, end_time(%rip)
    0000022a: 	subq	start_time(%rip), %rax
    00000231: 	cvtsi2sd	%rax, %xmm0
    00000236: 	divsd	DATAat0xa508(%rip), %xmm0
    0000023e: 	addq	$0x18, %rsp
    00000242: 	popq	%rbx
    00000243: 	popq	%rbp
    00000244: 	popq	%r12
    00000246: 	popq	%r13
    00000248: 	popq	%r14
    0000024a: 	popq	%r15
    0000024c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 588
.Ltmp100:
    00000251: 	xorl	%edx, %edx
    00000253: 	xorl	%eax, %eax
    00000255: 	jmp	.Ltmp104 # Offset: 597
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs12abs_functor1IsEEvPT_iPKc"

Binary Function "_Z13test_constantIs12abs_functor2IsEEvPT_iPKc" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x3cc0
  Size        : 0x24a
  MaxSize     : 0x250
  Offset      : 0x3cc0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs12abs_functor2IsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp105 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movl	init_value(%rip), %edi
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, 0x4(%rsp)
    00000048: 	movl	%ebx, %eax
    0000004a: 	andl	$-0x8, %ebp
    0000004d: 	leaq	DATAat0xa4ca(%rip), %r12
    00000054: 	shrl	$0x3, %eax
    00000057: 	subl	$0x1, %eax
    0000005a: 	shlq	$0x4, %rax
    0000005e: 	leaq	0x10(%r14,%rax), %r15
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp110:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp106 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp107 # Offset: 119
    0000007d: 	pxor	%xmm1, %xmm1
    00000081: 	movq	%r14, %rax
    00000084: 	movdqa	%xmm1, %xmm2
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp108:
    00000090: 	movdqu	(%rax), %xmm3
    00000094: 	movdqa	%xmm2, %xmm0
    00000098: 	addq	$0x10, %rax
    0000009c: 	psubw	%xmm3, %xmm0
    000000a0: 	pmaxsw	%xmm3, %xmm0
    000000a4: 	paddw	%xmm0, %xmm1
    000000a8: 	cmpq	%r15, %rax
    000000ab: 	jne	.Ltmp108 # Offset: 171
    000000ad: 	movdqa	%xmm1, %xmm0
    000000b1: 	psrldq	$0x8, %xmm0
    000000b6: 	paddw	%xmm0, %xmm1
    000000ba: 	movdqa	%xmm1, %xmm0
    000000be: 	psrldq	$0x4, %xmm0
    000000c3: 	paddw	%xmm0, %xmm1
    000000c7: 	movdqa	%xmm1, %xmm0
    000000cb: 	psrldq	$0x2, %xmm0
    000000d0: 	paddw	%xmm0, %xmm1
    000000d4: 	pextrw	$0x0, %xmm1, %eax
    000000d9: 	cmpl	%ebx, %ebp
    000000db: 	je	.Ltmp106 # Offset: 219
    000000e1: 	movl	%ebp, %edx
.Ltmp111:
    000000e3: 	movslq	%edx, %r10
    000000e6: 	movzwl	(%r14,%r10,2), %r11d
    000000eb: 	leaq	(%r10,%r10), %r9
    000000ef: 	movl	%r11d, %r10d
    000000f2: 	negw	%r10w
    000000f6: 	cmovsl	%r11d, %r10d
    000000fa: 	addl	%r10d, %eax
    000000fd: 	leal	0x1(%rdx), %r10d
    00000101: 	cmpl	%r10d, %ebx
    00000104: 	jle	.Ltmp106 # Offset: 260
    0000010a: 	movzwl	0x2(%r14,%r9), %r11d
    00000110: 	movl	%r11d, %r10d
    00000113: 	negw	%r10w
    00000117: 	cmovsl	%r11d, %r10d
    0000011b: 	addl	%r10d, %eax
    0000011e: 	leal	0x2(%rdx), %r10d
    00000122: 	cmpl	%r10d, %ebx
    00000125: 	jle	.Ltmp106 # Offset: 293
    0000012b: 	movzwl	0x4(%r14,%r9), %r11d
    00000131: 	movl	%r11d, %r10d
    00000134: 	negw	%r10w
    00000138: 	cmovsl	%r11d, %r10d
    0000013c: 	addl	%r10d, %eax
    0000013f: 	leal	0x3(%rdx), %r10d
    00000143: 	cmpl	%r10d, %ebx
    00000146: 	jle	.Ltmp106 # Offset: 326
    00000148: 	movzwl	0x6(%r14,%r9), %r11d
    0000014e: 	movl	%r11d, %r10d
    00000151: 	negw	%r10w
    00000155: 	cmovsl	%r11d, %r10d
    00000159: 	addl	%r10d, %eax
    0000015c: 	leal	0x4(%rdx), %r10d
    00000160: 	cmpl	%r10d, %ebx
    00000163: 	jle	.Ltmp106 # Offset: 355
    00000165: 	movzwl	0x8(%r14,%r9), %r11d
    0000016b: 	movl	%r11d, %r10d
    0000016e: 	negw	%r10w
    00000172: 	cmovsl	%r11d, %r10d
    00000176: 	addl	%r10d, %eax
    00000179: 	leal	0x5(%rdx), %r10d
    0000017d: 	cmpl	%r10d, %ebx
    00000180: 	jle	.Ltmp106 # Offset: 384
    00000182: 	movzwl	0xa(%r14,%r9), %r11d
    00000188: 	movl	%r11d, %r10d
    0000018b: 	negw	%r10w
    0000018f: 	cmovsl	%r11d, %r10d
    00000193: 	addl	$0x6, %edx
    00000196: 	addl	%r10d, %eax
    00000199: 	cmpl	%edx, %ebx
    0000019b: 	jle	.Ltmp106 # Offset: 411
    0000019d: 	movzwl	0xc(%r14,%r9), %r9d
    000001a3: 	movl	%r9d, %edx
    000001a6: 	negw	%dx
    000001a9: 	cmovsl	%r9d, %edx
    000001ad: 	addl	%edx, %eax
.Ltmp106:
    000001af: 	movl	%edi, %edx
    000001b1: 	movl	%edi, %r9d
    000001b4: 	negw	%dx
    000001b7: 	cmovsl	%r9d, %edx
    000001bb: 	imulw	$0x1f40, %dx, %dx
    000001c0: 	cmpw	%ax, %dx
    000001c3: 	je	.Ltmp109 # Offset: 451
    000001c5: 	movl	current_test(%rip), %edx
    000001cb: 	movq	%r12, %rsi
    000001ce: 	movl	$0x1, %edi
    000001d3: 	xorl	%eax, %eax
    000001d5: 	addl	$0x1, %r13d
    000001d9: 	callq	__printf_chk@PLT # Offset: 473
    000001de: 	movl	iterations(%rip), %esi
    000001e4: 	cmpl	%esi, %r13d
    000001e7: 	jge	.Ltmp105 # Offset: 487
    000001e9: 	movl	init_value(%rip), %edi
    000001ef: 	jmp	.Ltmp110 # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp109:
    000001f8: 	addl	$0x1, %r13d
    000001fc: 	cmpl	%esi, %r13d
    000001ff: 	jl	.Ltmp110 # Offset: 511
.Ltmp105:
    00000205: 	callq	clock@PLT # Offset: 517
    0000020a: 	pxor	%xmm0, %xmm0
    0000020e: 	movq	0x8(%rsp), %rdi
    00000213: 	movq	%rax, end_time(%rip)
    0000021a: 	subq	start_time(%rip), %rax
    00000221: 	cvtsi2sd	%rax, %xmm0
    00000226: 	divsd	DATAat0xa508(%rip), %xmm0
    0000022e: 	addq	$0x18, %rsp
    00000232: 	popq	%rbx
    00000233: 	popq	%rbp
    00000234: 	popq	%r12
    00000236: 	popq	%r13
    00000238: 	popq	%r14
    0000023a: 	popq	%r15
    0000023c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 572
.Ltmp107:
    00000241: 	xorl	%edx, %edx
    00000243: 	xorl	%eax, %eax
    00000245: 	jmp	.Ltmp111 # Offset: 581
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs12abs_functor2IsEEvPT_iPKc"

Binary Function "_Z13test_constantIs12abs_functor3IsEEvPT_iPKc" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x3f10
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x3f10
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs12abs_functor3IsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r10d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r10d, %r10d
    00000033: 	jle	.Ltmp112 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movl	init_value(%rip), %r9d
    00000047: 	xorl	%r12d, %r12d
    0000004a: 	movl	%eax, 0x4(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	andl	$-0x8, %ebx
    00000054: 	leaq	DATAat0xa4ca(%rip), %rbp
    0000005b: 	shrl	$0x3, %eax
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r15,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp118:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp113 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp114 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp115:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm2
    0000009c: 	psraw	$0xf, %xmm2
    000000a1: 	paddw	%xmm2, %xmm0
    000000a5: 	pxor	%xmm2, %xmm0
    000000a9: 	paddw	%xmm0, %xmm1
    000000ad: 	cmpq	%r13, %rax
    000000b0: 	jne	.Ltmp115 # Offset: 176
    000000b2: 	movdqa	%xmm1, %xmm0
    000000b6: 	psrldq	$0x8, %xmm0
    000000bb: 	paddw	%xmm0, %xmm1
    000000bf: 	movdqa	%xmm1, %xmm0
    000000c3: 	psrldq	$0x4, %xmm0
    000000c8: 	paddw	%xmm0, %xmm1
    000000cc: 	movdqa	%xmm1, %xmm0
    000000d0: 	psrldq	$0x2, %xmm0
    000000d5: 	paddw	%xmm0, %xmm1
    000000d9: 	pextrw	$0x0, %xmm1, %edx
    000000de: 	cmpl	%r14d, %ebx
    000000e1: 	je	.Ltmp113 # Offset: 225
    000000e7: 	movl	%ebx, %eax
    000000e9: 	movl	%ebx, %ecx
.Ltmp119:
    000000eb: 	movl	%r14d, %esi
    000000ee: 	subl	%eax, %esi
    000000f0: 	leal	-0x1(%rsi), %edi
    000000f3: 	cmpl	$0x2, %edi
    000000f6: 	jbe	.Ltmp116 # Offset: 246
    000000f8: 	movq	(%r15,%rax,2), %xmm0
    000000fe: 	movdqa	%xmm0, %xmm1
    00000102: 	psraw	$0xf, %xmm1
    00000107: 	paddw	%xmm1, %xmm0
    0000010b: 	pxor	%xmm1, %xmm0
    0000010f: 	pextrw	$0x1, %xmm0, %edi
    00000114: 	pextrw	$0x0, %xmm0, %eax
    00000119: 	addl	%edi, %eax
    0000011b: 	pextrw	$0x2, %xmm0, %edi
    00000120: 	addl	%edi, %eax
    00000122: 	pextrw	$0x3, %xmm0, %edi
    00000127: 	addl	%edi, %eax
    00000129: 	addl	%eax, %edx
    0000012b: 	movl	%esi, %eax
    0000012d: 	andl	$-0x4, %eax
    00000130: 	addl	%eax, %ecx
    00000132: 	cmpl	%eax, %esi
    00000134: 	je	.Ltmp113 # Offset: 308
.Ltmp116:
    00000136: 	movslq	%ecx, %rax
    00000139: 	leaq	(%rax,%rax), %rsi
    0000013d: 	movzwl	(%r15,%rax,2), %eax
    00000142: 	movl	%eax, %edi
    00000144: 	sarw	$0xf, %di
    00000148: 	addl	%edi, %eax
    0000014a: 	xorl	%edi, %eax
    0000014c: 	addl	%eax, %edx
    0000014e: 	leal	0x1(%rcx), %eax
    00000151: 	cmpl	%eax, %r14d
    00000154: 	jle	.Ltmp113 # Offset: 340
    00000156: 	movzwl	0x2(%r15,%rsi), %eax
    0000015c: 	addl	$0x2, %ecx
    0000015f: 	movl	%eax, %edi
    00000161: 	sarw	$0xf, %di
    00000165: 	addl	%edi, %eax
    00000167: 	xorl	%edi, %eax
    00000169: 	addl	%eax, %edx
    0000016b: 	cmpl	%ecx, %r14d
    0000016e: 	jle	.Ltmp113 # Offset: 366
    00000170: 	movzwl	0x4(%r15,%rsi), %eax
    00000176: 	movl	%eax, %ecx
    00000178: 	sarw	$0xf, %cx
    0000017c: 	addl	%ecx, %eax
    0000017e: 	xorl	%ecx, %eax
    00000180: 	addl	%eax, %edx
.Ltmp113:
    00000182: 	movl	%r9d, %ecx
    00000185: 	sarw	$0xf, %cx
    00000189: 	leal	(%rcx,%r9), %eax
    0000018d: 	xorl	%ecx, %eax
    0000018f: 	imulw	$0x1f40, %ax, %ax
    00000194: 	cmpw	%dx, %ax
    00000197: 	je	.Ltmp117 # Offset: 407
    00000199: 	movl	current_test(%rip), %edx
    0000019f: 	movq	%rbp, %rsi
    000001a2: 	movl	$0x1, %edi
    000001a7: 	xorl	%eax, %eax
    000001a9: 	addl	$0x1, %r12d
    000001ad: 	callq	__printf_chk@PLT # Offset: 429
    000001b2: 	movl	iterations(%rip), %r10d
    000001b9: 	cmpl	%r10d, %r12d
    000001bc: 	jge	.Ltmp112 # Offset: 444
    000001be: 	movl	init_value(%rip), %r9d
    000001c5: 	jmp	.Ltmp118 # Offset: 453
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp117:
    000001d0: 	addl	$0x1, %r12d
    000001d4: 	cmpl	%r10d, %r12d
    000001d7: 	jl	.Ltmp118 # Offset: 471
.Ltmp112:
    000001dd: 	callq	clock@PLT # Offset: 477
    000001e2: 	pxor	%xmm0, %xmm0
    000001e6: 	movq	0x8(%rsp), %rdi
    000001eb: 	movq	%rax, end_time(%rip)
    000001f2: 	subq	start_time(%rip), %rax
    000001f9: 	cvtsi2sd	%rax, %xmm0
    000001fe: 	divsd	DATAat0xa508(%rip), %xmm0
    00000206: 	addq	$0x18, %rsp
    0000020a: 	popq	%rbx
    0000020b: 	popq	%rbp
    0000020c: 	popq	%r12
    0000020e: 	popq	%r13
    00000210: 	popq	%r14
    00000212: 	popq	%r15
    00000214: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 532
.Ltmp114:
    00000219: 	xorl	%eax, %eax
    0000021b: 	xorl	%ecx, %ecx
    0000021d: 	xorl	%edx, %edx
    0000021f: 	jmp	.Ltmp119 # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs12abs_functor3IsEEvPT_iPKc"

Binary Function "_Z13test_constantIs12abs_functor4IsEEvPT_iPKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x4140
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x4140
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs12abs_functor4IsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r10d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r10d, %r10d
    00000033: 	jle	.Ltmp120 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movl	init_value(%rip), %r9d
    00000047: 	xorl	%r12d, %r12d
    0000004a: 	movl	%eax, 0x4(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	andl	$-0x8, %ebx
    00000054: 	leaq	DATAat0xa4ca(%rip), %rbp
    0000005b: 	shrl	$0x3, %eax
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r15,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp126:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp121 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp122 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp123:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm2
    0000009c: 	psraw	$0xf, %xmm2
    000000a1: 	pxor	%xmm2, %xmm0
    000000a5: 	psubw	%xmm2, %xmm0
    000000a9: 	paddw	%xmm0, %xmm1
    000000ad: 	cmpq	%r13, %rax
    000000b0: 	jne	.Ltmp123 # Offset: 176
    000000b2: 	movdqa	%xmm1, %xmm0
    000000b6: 	psrldq	$0x8, %xmm0
    000000bb: 	paddw	%xmm0, %xmm1
    000000bf: 	movdqa	%xmm1, %xmm0
    000000c3: 	psrldq	$0x4, %xmm0
    000000c8: 	paddw	%xmm0, %xmm1
    000000cc: 	movdqa	%xmm1, %xmm0
    000000d0: 	psrldq	$0x2, %xmm0
    000000d5: 	paddw	%xmm0, %xmm1
    000000d9: 	pextrw	$0x0, %xmm1, %edx
    000000de: 	cmpl	%r14d, %ebx
    000000e1: 	je	.Ltmp121 # Offset: 225
    000000e7: 	movl	%ebx, %eax
    000000e9: 	movl	%ebx, %ecx
.Ltmp127:
    000000eb: 	movl	%r14d, %esi
    000000ee: 	subl	%eax, %esi
    000000f0: 	leal	-0x1(%rsi), %edi
    000000f3: 	cmpl	$0x2, %edi
    000000f6: 	jbe	.Ltmp124 # Offset: 246
    000000f8: 	movq	(%r15,%rax,2), %xmm0
    000000fe: 	movdqa	%xmm0, %xmm1
    00000102: 	psraw	$0xf, %xmm1
    00000107: 	pxor	%xmm1, %xmm0
    0000010b: 	psubw	%xmm1, %xmm0
    0000010f: 	pextrw	$0x1, %xmm0, %edi
    00000114: 	pextrw	$0x0, %xmm0, %eax
    00000119: 	addl	%edi, %eax
    0000011b: 	pextrw	$0x2, %xmm0, %edi
    00000120: 	addl	%edi, %eax
    00000122: 	pextrw	$0x3, %xmm0, %edi
    00000127: 	addl	%edi, %eax
    00000129: 	addl	%eax, %edx
    0000012b: 	movl	%esi, %eax
    0000012d: 	andl	$-0x4, %eax
    00000130: 	addl	%eax, %ecx
    00000132: 	cmpl	%eax, %esi
    00000134: 	je	.Ltmp121 # Offset: 308
.Ltmp124:
    00000136: 	movslq	%ecx, %rax
    00000139: 	leaq	(%rax,%rax), %rsi
    0000013d: 	movzwl	(%r15,%rax,2), %eax
    00000142: 	movl	%eax, %edi
    00000144: 	sarw	$0xf, %di
    00000148: 	xorl	%edi, %eax
    0000014a: 	subl	%edi, %eax
    0000014c: 	addl	%eax, %edx
    0000014e: 	leal	0x1(%rcx), %eax
    00000151: 	cmpl	%eax, %r14d
    00000154: 	jle	.Ltmp121 # Offset: 340
    00000156: 	movzwl	0x2(%r15,%rsi), %eax
    0000015c: 	addl	$0x2, %ecx
    0000015f: 	movl	%eax, %edi
    00000161: 	sarw	$0xf, %di
    00000165: 	xorl	%edi, %eax
    00000167: 	subl	%edi, %eax
    00000169: 	addl	%eax, %edx
    0000016b: 	cmpl	%ecx, %r14d
    0000016e: 	jle	.Ltmp121 # Offset: 366
    00000170: 	movzwl	0x4(%r15,%rsi), %eax
    00000176: 	movl	%eax, %ecx
    00000178: 	sarw	$0xf, %cx
    0000017c: 	xorl	%ecx, %eax
    0000017e: 	subl	%ecx, %eax
    00000180: 	addl	%eax, %edx
.Ltmp121:
    00000182: 	movl	%r9d, %ecx
    00000185: 	sarw	$0xf, %cx
    00000189: 	movl	%ecx, %eax
    0000018b: 	xorl	%r9d, %eax
    0000018e: 	subl	%ecx, %eax
    00000190: 	imulw	$0x1f40, %ax, %ax
    00000195: 	cmpw	%dx, %ax
    00000198: 	je	.Ltmp125 # Offset: 408
    0000019a: 	movl	current_test(%rip), %edx
    000001a0: 	movq	%rbp, %rsi
    000001a3: 	movl	$0x1, %edi
    000001a8: 	xorl	%eax, %eax
    000001aa: 	addl	$0x1, %r12d
    000001ae: 	callq	__printf_chk@PLT # Offset: 430
    000001b3: 	movl	iterations(%rip), %r10d
    000001ba: 	cmpl	%r12d, %r10d
    000001bd: 	jle	.Ltmp120 # Offset: 445
    000001bf: 	movl	init_value(%rip), %r9d
    000001c6: 	jmp	.Ltmp126 # Offset: 454
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp125:
    000001d0: 	addl	$0x1, %r12d
    000001d4: 	cmpl	%r10d, %r12d
    000001d7: 	jl	.Ltmp126 # Offset: 471
.Ltmp120:
    000001dd: 	callq	clock@PLT # Offset: 477
    000001e2: 	pxor	%xmm0, %xmm0
    000001e6: 	movq	0x8(%rsp), %rdi
    000001eb: 	movq	%rax, end_time(%rip)
    000001f2: 	subq	start_time(%rip), %rax
    000001f9: 	cvtsi2sd	%rax, %xmm0
    000001fe: 	divsd	DATAat0xa508(%rip), %xmm0
    00000206: 	addq	$0x18, %rsp
    0000020a: 	popq	%rbx
    0000020b: 	popq	%rbp
    0000020c: 	popq	%r12
    0000020e: 	popq	%r13
    00000210: 	popq	%r14
    00000212: 	popq	%r15
    00000214: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 532
.Ltmp122:
    00000219: 	xorl	%eax, %eax
    0000021b: 	xorl	%ecx, %ecx
    0000021d: 	xorl	%edx, %edx
    0000021f: 	jmp	.Ltmp127 # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs12abs_functor4IsEEvPT_iPKc"

Binary Function "_Z13test_constantIs12abs_functor5IsEEvPT_iPKc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x4370
  Size        : 0x274
  MaxSize     : 0x280
  Offset      : 0x4370
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs12abs_functor5IsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %r9d
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%r9d, %r9d
    00000032: 	jle	.Ltmp128 # Offset: 50
    00000038: 	leal	-0x1(%rbp), %eax
    0000003b: 	movl	%ebp, %r12d
    0000003e: 	movl	init_value(%rip), %esi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%ebp, %eax
    0000004d: 	andl	$-0x8, %r12d
    00000051: 	movq	DATAat0xa580(%rip), %xmm4
    00000059: 	shrl	$0x3, %eax
    0000005c: 	movdqa	DATAat0xa580(%rip), %xmm3
    00000064: 	leaq	DATAat0xa4ca(%rip), %r13
    0000006b: 	subl	$0x1, %eax
    0000006e: 	shlq	$0x4, %rax
    00000072: 	leaq	0x10(%r14,%rax), %rbx
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp134:
    00000080: 	xorl	%edx, %edx
    00000082: 	testl	%ebp, %ebp
    00000084: 	jle	.Ltmp129 # Offset: 132
    0000008a: 	cmpl	$0x6, 0x4(%rsp)
    0000008f: 	jbe	.Ltmp130 # Offset: 143
    00000095: 	movq	%r14, %rax
    00000098: 	pxor	%xmm2, %xmm2
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp131:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	movdqu	(%rax), %xmm5
    000000a8: 	addq	$0x10, %rax
    000000ac: 	psraw	$0xf, %xmm0
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	pxor	%xmm5, %xmm0
    000000b9: 	pand	%xmm3, %xmm1
    000000bd: 	paddw	%xmm1, %xmm0
    000000c1: 	paddw	%xmm0, %xmm2
    000000c5: 	cmpq	%rbx, %rax
    000000c8: 	jne	.Ltmp131 # Offset: 200
    000000ca: 	movdqa	%xmm2, %xmm0
    000000ce: 	psrldq	$0x8, %xmm0
    000000d3: 	paddw	%xmm0, %xmm2
    000000d7: 	movdqa	%xmm2, %xmm0
    000000db: 	psrldq	$0x4, %xmm0
    000000e0: 	paddw	%xmm0, %xmm2
    000000e4: 	movdqa	%xmm2, %xmm0
    000000e8: 	psrldq	$0x2, %xmm0
    000000ed: 	paddw	%xmm0, %xmm2
    000000f1: 	pextrw	$0x0, %xmm2, %edx
    000000f6: 	cmpl	%ebp, %r12d
    000000f9: 	je	.Ltmp129 # Offset: 249
    000000ff: 	movl	%r12d, %eax
    00000102: 	movl	%r12d, %ecx
.Ltmp135:
    00000105: 	movl	%ebp, %edi
    00000107: 	subl	%eax, %edi
    00000109: 	leal	-0x1(%rdi), %r8d
    0000010d: 	cmpl	$0x2, %r8d
    00000111: 	jbe	.Ltmp132 # Offset: 273
    00000113: 	movq	(%r14,%rax,2), %xmm0
    00000119: 	movdqa	%xmm0, %xmm1
    0000011d: 	psraw	$0xf, %xmm1
    00000122: 	pxor	%xmm1, %xmm0
    00000126: 	pand	%xmm4, %xmm1
    0000012a: 	paddw	%xmm1, %xmm0
    0000012e: 	pextrw	$0x1, %xmm0, %r8d
    00000134: 	pextrw	$0x0, %xmm0, %eax
    00000139: 	addl	%r8d, %eax
    0000013c: 	pextrw	$0x2, %xmm0, %r8d
    00000142: 	addl	%r8d, %eax
    00000145: 	pextrw	$0x3, %xmm0, %r8d
    0000014b: 	addl	%r8d, %eax
    0000014e: 	addl	%eax, %edx
    00000150: 	movl	%edi, %eax
    00000152: 	andl	$-0x4, %eax
    00000155: 	addl	%eax, %ecx
    00000157: 	cmpl	%eax, %edi
    00000159: 	je	.Ltmp129 # Offset: 345
.Ltmp132:
    0000015b: 	movslq	%ecx, %rax
    0000015e: 	leaq	(%rax,%rax), %rdi
    00000162: 	movzwl	(%r14,%rax,2), %eax
    00000167: 	movl	%eax, %r8d
    0000016a: 	sarw	$0xf, %r8w
    0000016f: 	xorl	%r8d, %eax
    00000172: 	andl	$0x1, %r8d
    00000176: 	addl	%r8d, %eax
    00000179: 	addl	%eax, %edx
    0000017b: 	leal	0x1(%rcx), %eax
    0000017e: 	cmpl	%eax, %ebp
    00000180: 	jle	.Ltmp129 # Offset: 384
    00000182: 	movzwl	0x2(%r14,%rdi), %r10d
    00000188: 	addl	$0x2, %ecx
    0000018b: 	movl	%r10d, %r8d
    0000018e: 	movl	%r10d, %eax
    00000191: 	sarw	$0xf, %r8w
    00000196: 	shrw	$0xf, %ax
    0000019a: 	xorl	%r10d, %r8d
    0000019d: 	addl	%r8d, %eax
    000001a0: 	addl	%eax, %edx
    000001a2: 	cmpl	%ecx, %ebp
    000001a4: 	jle	.Ltmp129 # Offset: 420
    000001a6: 	movzwl	0x4(%r14,%rdi), %edi
    000001ac: 	movl	%edi, %ecx
    000001ae: 	movl	%edi, %eax
    000001b0: 	sarw	$0xf, %cx
    000001b4: 	shrw	$0xf, %ax
    000001b8: 	xorl	%edi, %ecx
    000001ba: 	addl	%ecx, %eax
    000001bc: 	addl	%eax, %edx
.Ltmp129:
    000001be: 	movl	%esi, %ecx
    000001c0: 	sarw	$0xf, %cx
    000001c4: 	movl	%ecx, %eax
    000001c6: 	andl	$0x1, %ecx
    000001c9: 	xorl	%esi, %eax
    000001cb: 	addl	%ecx, %eax
    000001cd: 	imulw	$0x1f40, %ax, %ax
    000001d2: 	cmpw	%dx, %ax
    000001d5: 	je	.Ltmp133 # Offset: 469
    000001d7: 	movl	current_test(%rip), %edx
    000001dd: 	movq	%r13, %rsi
    000001e0: 	movl	$0x1, %edi
    000001e5: 	xorl	%eax, %eax
    000001e7: 	addl	$0x1, %r15d
    000001eb: 	callq	__printf_chk@PLT # Offset: 491
    000001f0: 	movl	iterations(%rip), %r9d
    000001f7: 	cmpl	%r9d, %r15d
    000001fa: 	jge	.Ltmp128 # Offset: 506
    000001fc: 	movl	init_value(%rip), %esi
    00000202: 	movdqa	DATAat0xa580(%rip), %xmm3
    0000020a: 	movq	DATAat0xa580(%rip), %xmm4
    00000212: 	jmp	.Ltmp134 # Offset: 530
    00000217: 	nopw	(%rax,%rax) # Size: 9
.Ltmp133:
    00000220: 	addl	$0x1, %r15d
    00000224: 	cmpl	%r9d, %r15d
    00000227: 	jl	.Ltmp134 # Offset: 551
.Ltmp128:
    0000022d: 	callq	clock@PLT # Offset: 557
    00000232: 	pxor	%xmm0, %xmm0
    00000236: 	movq	0x8(%rsp), %rdi
    0000023b: 	movq	%rax, end_time(%rip)
    00000242: 	subq	start_time(%rip), %rax
    00000249: 	cvtsi2sd	%rax, %xmm0
    0000024e: 	divsd	DATAat0xa508(%rip), %xmm0
    00000256: 	addq	$0x18, %rsp
    0000025a: 	popq	%rbx
    0000025b: 	popq	%rbp
    0000025c: 	popq	%r12
    0000025e: 	popq	%r13
    00000260: 	popq	%r14
    00000262: 	popq	%r15
    00000264: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 612
.Ltmp130:
    00000269: 	xorl	%eax, %eax
    0000026b: 	xorl	%ecx, %ecx
    0000026d: 	xorl	%edx, %edx
    0000026f: 	jmp	.Ltmp135 # Offset: 623
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs12abs_functor5IsEEvPT_iPKc"

Binary Function "_Z13test_constantIs12abs_functor8IsEEvPT_iPKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x45f0
  Size        : 0x25a
  MaxSize     : 0x260
  Offset      : 0x45f0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs12abs_functor8IsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp136 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movl	init_value(%rip), %edi
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, 0x4(%rsp)
    00000048: 	movl	%ebx, %eax
    0000004a: 	andl	$-0x8, %ebp
    0000004d: 	leaq	DATAat0xa4ca(%rip), %r12
    00000054: 	shrl	$0x3, %eax
    00000057: 	subl	$0x1, %eax
    0000005a: 	shlq	$0x4, %rax
    0000005e: 	leaq	0x10(%r14,%rax), %r15
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp141:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp137 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp138 # Offset: 119
    0000007d: 	pxor	%xmm1, %xmm1
    00000081: 	movq	%r14, %rax
    00000084: 	movdqa	%xmm1, %xmm4
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp139:
    00000090: 	movdqu	(%rax), %xmm3
    00000094: 	movdqa	%xmm4, %xmm0
    00000098: 	movdqa	%xmm4, %xmm2
    0000009c: 	addq	$0x10, %rax
    000000a0: 	pcmpgtw	%xmm3, %xmm0
    000000a4: 	psubw	%xmm3, %xmm2
    000000a8: 	pand	%xmm0, %xmm2
    000000ac: 	pandn	%xmm3, %xmm0
    000000b0: 	por	%xmm2, %xmm0
    000000b4: 	paddw	%xmm0, %xmm1
    000000b8: 	cmpq	%r15, %rax
    000000bb: 	jne	.Ltmp139 # Offset: 187
    000000bd: 	movdqa	%xmm1, %xmm0
    000000c1: 	psrldq	$0x8, %xmm0
    000000c6: 	paddw	%xmm0, %xmm1
    000000ca: 	movdqa	%xmm1, %xmm0
    000000ce: 	psrldq	$0x4, %xmm0
    000000d3: 	paddw	%xmm0, %xmm1
    000000d7: 	movdqa	%xmm1, %xmm0
    000000db: 	psrldq	$0x2, %xmm0
    000000e0: 	paddw	%xmm0, %xmm1
    000000e4: 	pextrw	$0x0, %xmm1, %eax
    000000e9: 	cmpl	%ebp, %ebx
    000000eb: 	je	.Ltmp137 # Offset: 235
    000000f1: 	movl	%ebp, %edx
.Ltmp142:
    000000f3: 	movslq	%edx, %r10
    000000f6: 	movzwl	(%r14,%r10,2), %r11d
    000000fb: 	leaq	(%r10,%r10), %r9
    000000ff: 	movl	%r11d, %r10d
    00000102: 	negw	%r10w
    00000106: 	cmovsl	%r11d, %r10d
    0000010a: 	addl	%r10d, %eax
    0000010d: 	leal	0x1(%rdx), %r10d
    00000111: 	cmpl	%r10d, %ebx
    00000114: 	jle	.Ltmp137 # Offset: 276
    0000011a: 	movzwl	0x2(%r14,%r9), %r11d
    00000120: 	movl	%r11d, %r10d
    00000123: 	negw	%r10w
    00000127: 	cmovsl	%r11d, %r10d
    0000012b: 	addl	%r10d, %eax
    0000012e: 	leal	0x2(%rdx), %r10d
    00000132: 	cmpl	%r10d, %ebx
    00000135: 	jle	.Ltmp137 # Offset: 309
    0000013b: 	movzwl	0x4(%r14,%r9), %r11d
    00000141: 	movl	%r11d, %r10d
    00000144: 	negw	%r10w
    00000148: 	cmovsl	%r11d, %r10d
    0000014c: 	addl	%r10d, %eax
    0000014f: 	leal	0x3(%rdx), %r10d
    00000153: 	cmpl	%r10d, %ebx
    00000156: 	jle	.Ltmp137 # Offset: 342
    00000158: 	movzwl	0x6(%r14,%r9), %r11d
    0000015e: 	movl	%r11d, %r10d
    00000161: 	negw	%r10w
    00000165: 	cmovsl	%r11d, %r10d
    00000169: 	addl	%r10d, %eax
    0000016c: 	leal	0x4(%rdx), %r10d
    00000170: 	cmpl	%r10d, %ebx
    00000173: 	jle	.Ltmp137 # Offset: 371
    00000175: 	movzwl	0x8(%r14,%r9), %r11d
    0000017b: 	movl	%r11d, %r10d
    0000017e: 	negw	%r10w
    00000182: 	cmovsl	%r11d, %r10d
    00000186: 	addl	%r10d, %eax
    00000189: 	leal	0x5(%rdx), %r10d
    0000018d: 	cmpl	%r10d, %ebx
    00000190: 	jle	.Ltmp137 # Offset: 400
    00000192: 	movzwl	0xa(%r14,%r9), %r11d
    00000198: 	movl	%r11d, %r10d
    0000019b: 	negw	%r10w
    0000019f: 	cmovsl	%r11d, %r10d
    000001a3: 	addl	$0x6, %edx
    000001a6: 	addl	%r10d, %eax
    000001a9: 	cmpl	%edx, %ebx
    000001ab: 	jle	.Ltmp137 # Offset: 427
    000001ad: 	movzwl	0xc(%r14,%r9), %r9d
    000001b3: 	movl	%r9d, %edx
    000001b6: 	negw	%dx
    000001b9: 	cmovsl	%r9d, %edx
    000001bd: 	addl	%edx, %eax
.Ltmp137:
    000001bf: 	movl	%edi, %edx
    000001c1: 	movl	%edi, %r9d
    000001c4: 	negw	%dx
    000001c7: 	cmovsl	%r9d, %edx
    000001cb: 	imulw	$0x1f40, %dx, %dx
    000001d0: 	cmpw	%ax, %dx
    000001d3: 	je	.Ltmp140 # Offset: 467
    000001d5: 	movl	current_test(%rip), %edx
    000001db: 	movq	%r12, %rsi
    000001de: 	movl	$0x1, %edi
    000001e3: 	xorl	%eax, %eax
    000001e5: 	addl	$0x1, %r13d
    000001e9: 	callq	__printf_chk@PLT # Offset: 489
    000001ee: 	movl	iterations(%rip), %esi
    000001f4: 	cmpl	%r13d, %esi
    000001f7: 	jle	.Ltmp136 # Offset: 503
    000001f9: 	movl	init_value(%rip), %edi
    000001ff: 	jmp	.Ltmp141 # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp140:
    00000208: 	addl	$0x1, %r13d
    0000020c: 	cmpl	%esi, %r13d
    0000020f: 	jl	.Ltmp141 # Offset: 527
.Ltmp136:
    00000215: 	callq	clock@PLT # Offset: 533
    0000021a: 	pxor	%xmm0, %xmm0
    0000021e: 	movq	0x8(%rsp), %rdi
    00000223: 	movq	%rax, end_time(%rip)
    0000022a: 	subq	start_time(%rip), %rax
    00000231: 	cvtsi2sd	%rax, %xmm0
    00000236: 	divsd	DATAat0xa508(%rip), %xmm0
    0000023e: 	addq	$0x18, %rsp
    00000242: 	popq	%rbx
    00000243: 	popq	%rbp
    00000244: 	popq	%r12
    00000246: 	popq	%r13
    00000248: 	popq	%r14
    0000024a: 	popq	%r15
    0000024c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 588
.Ltmp138:
    00000251: 	xorl	%edx, %edx
    00000253: 	xorl	%eax, %eax
    00000255: 	jmp	.Ltmp142 # Offset: 597
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs12abs_functor8IsEEvPT_iPKc"

Binary Function "_Z13test_constantIs12abs_functor9IsEEvPT_iPKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x4850
  Size        : 0x24a
  MaxSize     : 0x250
  Offset      : 0x4850
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs12abs_functor9IsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp143 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movl	init_value(%rip), %edi
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, 0x4(%rsp)
    00000048: 	movl	%ebx, %eax
    0000004a: 	andl	$-0x8, %ebp
    0000004d: 	leaq	DATAat0xa4ca(%rip), %r12
    00000054: 	shrl	$0x3, %eax
    00000057: 	subl	$0x1, %eax
    0000005a: 	shlq	$0x4, %rax
    0000005e: 	leaq	0x10(%r14,%rax), %r15
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp148:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp144 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp145 # Offset: 119
    0000007d: 	pxor	%xmm1, %xmm1
    00000081: 	movq	%r14, %rax
    00000084: 	movdqa	%xmm1, %xmm2
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp146:
    00000090: 	movdqu	(%rax), %xmm3
    00000094: 	movdqa	%xmm2, %xmm0
    00000098: 	addq	$0x10, %rax
    0000009c: 	psubw	%xmm3, %xmm0
    000000a0: 	pmaxsw	%xmm3, %xmm0
    000000a4: 	paddw	%xmm0, %xmm1
    000000a8: 	cmpq	%r15, %rax
    000000ab: 	jne	.Ltmp146 # Offset: 171
    000000ad: 	movdqa	%xmm1, %xmm0
    000000b1: 	psrldq	$0x8, %xmm0
    000000b6: 	paddw	%xmm0, %xmm1
    000000ba: 	movdqa	%xmm1, %xmm0
    000000be: 	psrldq	$0x4, %xmm0
    000000c3: 	paddw	%xmm0, %xmm1
    000000c7: 	movdqa	%xmm1, %xmm0
    000000cb: 	psrldq	$0x2, %xmm0
    000000d0: 	paddw	%xmm0, %xmm1
    000000d4: 	pextrw	$0x0, %xmm1, %eax
    000000d9: 	cmpl	%ebx, %ebp
    000000db: 	je	.Ltmp144 # Offset: 219
    000000e1: 	movl	%ebp, %edx
.Ltmp149:
    000000e3: 	movslq	%edx, %r10
    000000e6: 	movzwl	(%r14,%r10,2), %r11d
    000000eb: 	leaq	(%r10,%r10), %r9
    000000ef: 	movl	%r11d, %r10d
    000000f2: 	negw	%r10w
    000000f6: 	cmovsl	%r11d, %r10d
    000000fa: 	addl	%r10d, %eax
    000000fd: 	leal	0x1(%rdx), %r10d
    00000101: 	cmpl	%r10d, %ebx
    00000104: 	jle	.Ltmp144 # Offset: 260
    0000010a: 	movzwl	0x2(%r14,%r9), %r11d
    00000110: 	movl	%r11d, %r10d
    00000113: 	negw	%r10w
    00000117: 	cmovsl	%r11d, %r10d
    0000011b: 	addl	%r10d, %eax
    0000011e: 	leal	0x2(%rdx), %r10d
    00000122: 	cmpl	%r10d, %ebx
    00000125: 	jle	.Ltmp144 # Offset: 293
    0000012b: 	movzwl	0x4(%r14,%r9), %r11d
    00000131: 	movl	%r11d, %r10d
    00000134: 	negw	%r10w
    00000138: 	cmovsl	%r11d, %r10d
    0000013c: 	addl	%r10d, %eax
    0000013f: 	leal	0x3(%rdx), %r10d
    00000143: 	cmpl	%r10d, %ebx
    00000146: 	jle	.Ltmp144 # Offset: 326
    00000148: 	movzwl	0x6(%r14,%r9), %r11d
    0000014e: 	movl	%r11d, %r10d
    00000151: 	negw	%r10w
    00000155: 	cmovsl	%r11d, %r10d
    00000159: 	addl	%r10d, %eax
    0000015c: 	leal	0x4(%rdx), %r10d
    00000160: 	cmpl	%r10d, %ebx
    00000163: 	jle	.Ltmp144 # Offset: 355
    00000165: 	movzwl	0x8(%r14,%r9), %r11d
    0000016b: 	movl	%r11d, %r10d
    0000016e: 	negw	%r10w
    00000172: 	cmovsl	%r11d, %r10d
    00000176: 	addl	%r10d, %eax
    00000179: 	leal	0x5(%rdx), %r10d
    0000017d: 	cmpl	%r10d, %ebx
    00000180: 	jle	.Ltmp144 # Offset: 384
    00000182: 	movzwl	0xa(%r14,%r9), %r11d
    00000188: 	movl	%r11d, %r10d
    0000018b: 	negw	%r10w
    0000018f: 	cmovsl	%r11d, %r10d
    00000193: 	addl	$0x6, %edx
    00000196: 	addl	%r10d, %eax
    00000199: 	cmpl	%edx, %ebx
    0000019b: 	jle	.Ltmp144 # Offset: 411
    0000019d: 	movzwl	0xc(%r14,%r9), %r9d
    000001a3: 	movl	%r9d, %edx
    000001a6: 	negw	%dx
    000001a9: 	cmovsl	%r9d, %edx
    000001ad: 	addl	%edx, %eax
.Ltmp144:
    000001af: 	movl	%edi, %edx
    000001b1: 	movl	%edi, %r9d
    000001b4: 	negw	%dx
    000001b7: 	cmovsl	%r9d, %edx
    000001bb: 	imulw	$0x1f40, %dx, %dx
    000001c0: 	cmpw	%ax, %dx
    000001c3: 	je	.Ltmp147 # Offset: 451
    000001c5: 	movl	current_test(%rip), %edx
    000001cb: 	movq	%r12, %rsi
    000001ce: 	movl	$0x1, %edi
    000001d3: 	xorl	%eax, %eax
    000001d5: 	addl	$0x1, %r13d
    000001d9: 	callq	__printf_chk@PLT # Offset: 473
    000001de: 	movl	iterations(%rip), %esi
    000001e4: 	cmpl	%esi, %r13d
    000001e7: 	jge	.Ltmp143 # Offset: 487
    000001e9: 	movl	init_value(%rip), %edi
    000001ef: 	jmp	.Ltmp148 # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp147:
    000001f8: 	addl	$0x1, %r13d
    000001fc: 	cmpl	%esi, %r13d
    000001ff: 	jl	.Ltmp148 # Offset: 511
.Ltmp143:
    00000205: 	callq	clock@PLT # Offset: 517
    0000020a: 	pxor	%xmm0, %xmm0
    0000020e: 	movq	0x8(%rsp), %rdi
    00000213: 	movq	%rax, end_time(%rip)
    0000021a: 	subq	start_time(%rip), %rax
    00000221: 	cvtsi2sd	%rax, %xmm0
    00000226: 	divsd	DATAat0xa508(%rip), %xmm0
    0000022e: 	addq	$0x18, %rsp
    00000232: 	popq	%rbx
    00000233: 	popq	%rbp
    00000234: 	popq	%r12
    00000236: 	popq	%r13
    00000238: 	popq	%r14
    0000023a: 	popq	%r15
    0000023c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 572
.Ltmp145:
    00000241: 	xorl	%edx, %edx
    00000243: 	xorl	%eax, %eax
    00000245: 	jmp	.Ltmp149 # Offset: 581
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs12abs_functor9IsEEvPT_iPKc"

Binary Function "_Z13test_constantIi15abs_functor_stdIiEEvPT_iPKc" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x4aa0
  Size        : 0x1b0
  MaxSize     : 0x1b0
  Offset      : 0x4aa0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi15abs_functor_stdIiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp150 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	movl	%eax, 0x4(%rsp)
    00000045: 	movl	%r14d, %eax
    00000048: 	andl	$-0x4, %ebx
    0000004b: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000052: 	shrl	$0x2, %eax
    00000055: 	subl	$0x1, %eax
    00000058: 	shlq	$0x4, %rax
    0000005c: 	leaq	0x10(%r15,%rax), %r13
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp155:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp151 # Offset: 109
    00000073: 	cmpl	$0x2, 0x4(%rsp)
    00000078: 	jbe	.Ltmp152 # Offset: 120
    0000007e: 	movq	%r15, %rax
    00000081: 	pxor	%xmm1, %xmm1
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp153:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm2
    00000094: 	psrad	$0x1f, %xmm2
    00000099: 	pxor	%xmm2, %xmm0
    0000009d: 	psubd	%xmm2, %xmm0
    000000a1: 	paddd	%xmm0, %xmm1
    000000a5: 	cmpq	%r13, %rax
    000000a8: 	jne	.Ltmp153 # Offset: 168
    000000aa: 	movdqa	%xmm1, %xmm0
    000000ae: 	movl	%ebx, %edx
    000000b0: 	psrldq	$0x8, %xmm0
    000000b5: 	paddd	%xmm0, %xmm1
    000000b9: 	movdqa	%xmm1, %xmm0
    000000bd: 	psrldq	$0x4, %xmm0
    000000c2: 	paddd	%xmm0, %xmm1
    000000c6: 	movd	%xmm1, %eax
    000000ca: 	cmpl	%r14d, %ebx
    000000cd: 	je	.Ltmp151 # Offset: 205
.Ltmp156:
    000000cf: 	movslq	%edx, %rsi
    000000d2: 	movl	(%r15,%rsi,4), %r10d
    000000d6: 	leaq	(,%rsi,4), %r9
    000000de: 	movl	%r10d, %esi
    000000e1: 	negl	%esi
    000000e3: 	cmovsl	%r10d, %esi
    000000e7: 	addl	%esi, %eax
    000000e9: 	leal	0x1(%rdx), %esi
    000000ec: 	cmpl	%esi, %r14d
    000000ef: 	jle	.Ltmp151 # Offset: 239
    000000f1: 	movl	0x4(%r15,%r9), %r10d
    000000f6: 	movl	%r10d, %esi
    000000f9: 	negl	%esi
    000000fb: 	cmovsl	%r10d, %esi
    000000ff: 	addl	$0x2, %edx
    00000102: 	addl	%esi, %eax
    00000104: 	cmpl	%edx, %r14d
    00000107: 	jle	.Ltmp151 # Offset: 263
    00000109: 	movl	0x8(%r15,%r9), %esi
    0000010e: 	movl	%esi, %edx
    00000110: 	negl	%edx
    00000112: 	cmovsl	%esi, %edx
    00000115: 	addl	%edx, %eax
.Ltmp151:
    00000117: 	movl	init_value(%rip), %esi
    0000011d: 	movl	%esi, %edx
    0000011f: 	negl	%edx
    00000121: 	cmovsl	%esi, %edx
    00000124: 	imull	$0x1f40, %edx, %edx
    0000012a: 	cmpl	%eax, %edx
    0000012c: 	je	.Ltmp154 # Offset: 300
    0000012e: 	movl	current_test(%rip), %edx
    00000134: 	movl	$0x1, %edi
    00000139: 	movq	%rbp, %rsi
    0000013c: 	xorl	%eax, %eax
    0000013e: 	addl	$0x1, %r12d
    00000142: 	callq	__printf_chk@PLT # Offset: 322
    00000147: 	movl	iterations(%rip), %edi
    0000014d: 	cmpl	%r12d, %edi
    00000150: 	jg	.Ltmp155 # Offset: 336
.Ltmp150:
    00000156: 	callq	clock@PLT # Offset: 342
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	movq	0x8(%rsp), %rdi
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	cvtsi2sd	%rax, %xmm0
    00000177: 	divsd	DATAat0xa508(%rip), %xmm0
    0000017f: 	addq	$0x18, %rsp
    00000183: 	popq	%rbx
    00000184: 	popq	%rbp
    00000185: 	popq	%r12
    00000187: 	popq	%r13
    00000189: 	popq	%r14
    0000018b: 	popq	%r15
    0000018d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp154:
    00000198: 	addl	$0x1, %r12d
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jl	.Ltmp155 # Offset: 415
    000001a5: 	jmp	.Ltmp150 # Offset: 421
.Ltmp152:
    000001a7: 	xorl	%edx, %edx
    000001a9: 	xorl	%eax, %eax
    000001ab: 	jmp	.Ltmp156 # Offset: 427
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi15abs_functor_stdIiEEvPT_iPKc"

Binary Function "_Z13test_constantIi12abs_functor1IiEEvPT_iPKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x4c50
  Size        : 0x1b0
  MaxSize     : 0x1b0
  Offset      : 0x4c50
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi12abs_functor1IiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp157 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	movl	%eax, 0x4(%rsp)
    00000045: 	movl	%r14d, %eax
    00000048: 	andl	$-0x4, %ebx
    0000004b: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000052: 	shrl	$0x2, %eax
    00000055: 	subl	$0x1, %eax
    00000058: 	shlq	$0x4, %rax
    0000005c: 	leaq	0x10(%r15,%rax), %r13
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp162:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp158 # Offset: 109
    00000073: 	cmpl	$0x2, 0x4(%rsp)
    00000078: 	jbe	.Ltmp159 # Offset: 120
    0000007e: 	movq	%r15, %rax
    00000081: 	pxor	%xmm1, %xmm1
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp160:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm2
    00000094: 	psrad	$0x1f, %xmm2
    00000099: 	pxor	%xmm2, %xmm0
    0000009d: 	psubd	%xmm2, %xmm0
    000000a1: 	paddd	%xmm0, %xmm1
    000000a5: 	cmpq	%r13, %rax
    000000a8: 	jne	.Ltmp160 # Offset: 168
    000000aa: 	movdqa	%xmm1, %xmm0
    000000ae: 	movl	%ebx, %edx
    000000b0: 	psrldq	$0x8, %xmm0
    000000b5: 	paddd	%xmm0, %xmm1
    000000b9: 	movdqa	%xmm1, %xmm0
    000000bd: 	psrldq	$0x4, %xmm0
    000000c2: 	paddd	%xmm0, %xmm1
    000000c6: 	movd	%xmm1, %eax
    000000ca: 	cmpl	%r14d, %ebx
    000000cd: 	je	.Ltmp158 # Offset: 205
.Ltmp163:
    000000cf: 	movslq	%edx, %rsi
    000000d2: 	movl	(%r15,%rsi,4), %r10d
    000000d6: 	leaq	(,%rsi,4), %r9
    000000de: 	movl	%r10d, %esi
    000000e1: 	negl	%esi
    000000e3: 	cmovsl	%r10d, %esi
    000000e7: 	addl	%esi, %eax
    000000e9: 	leal	0x1(%rdx), %esi
    000000ec: 	cmpl	%esi, %r14d
    000000ef: 	jle	.Ltmp158 # Offset: 239
    000000f1: 	movl	0x4(%r15,%r9), %r10d
    000000f6: 	movl	%r10d, %esi
    000000f9: 	negl	%esi
    000000fb: 	cmovsl	%r10d, %esi
    000000ff: 	addl	$0x2, %edx
    00000102: 	addl	%esi, %eax
    00000104: 	cmpl	%edx, %r14d
    00000107: 	jle	.Ltmp158 # Offset: 263
    00000109: 	movl	0x8(%r15,%r9), %esi
    0000010e: 	movl	%esi, %edx
    00000110: 	negl	%edx
    00000112: 	cmovsl	%esi, %edx
    00000115: 	addl	%edx, %eax
.Ltmp158:
    00000117: 	movl	init_value(%rip), %esi
    0000011d: 	movl	%esi, %edx
    0000011f: 	negl	%edx
    00000121: 	cmovsl	%esi, %edx
    00000124: 	imull	$0x1f40, %edx, %edx
    0000012a: 	cmpl	%eax, %edx
    0000012c: 	je	.Ltmp161 # Offset: 300
    0000012e: 	movl	current_test(%rip), %edx
    00000134: 	movl	$0x1, %edi
    00000139: 	movq	%rbp, %rsi
    0000013c: 	xorl	%eax, %eax
    0000013e: 	addl	$0x1, %r12d
    00000142: 	callq	__printf_chk@PLT # Offset: 322
    00000147: 	movl	iterations(%rip), %edi
    0000014d: 	cmpl	%r12d, %edi
    00000150: 	jg	.Ltmp162 # Offset: 336
.Ltmp157:
    00000156: 	callq	clock@PLT # Offset: 342
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	movq	0x8(%rsp), %rdi
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	cvtsi2sd	%rax, %xmm0
    00000177: 	divsd	DATAat0xa508(%rip), %xmm0
    0000017f: 	addq	$0x18, %rsp
    00000183: 	popq	%rbx
    00000184: 	popq	%rbp
    00000185: 	popq	%r12
    00000187: 	popq	%r13
    00000189: 	popq	%r14
    0000018b: 	popq	%r15
    0000018d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp161:
    00000198: 	addl	$0x1, %r12d
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jl	.Ltmp162 # Offset: 415
    000001a5: 	jmp	.Ltmp157 # Offset: 421
.Ltmp159:
    000001a7: 	xorl	%edx, %edx
    000001a9: 	xorl	%eax, %eax
    000001ab: 	jmp	.Ltmp163 # Offset: 427
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi12abs_functor1IiEEvPT_iPKc"

Binary Function "_Z13test_constantIi12abs_functor2IiEEvPT_iPKc" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x4e00
  Size        : 0x1b0
  MaxSize     : 0x1b0
  Offset      : 0x4e00
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi12abs_functor2IiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp164 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	movl	%eax, 0x4(%rsp)
    00000045: 	movl	%r14d, %eax
    00000048: 	andl	$-0x4, %ebx
    0000004b: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000052: 	shrl	$0x2, %eax
    00000055: 	subl	$0x1, %eax
    00000058: 	shlq	$0x4, %rax
    0000005c: 	leaq	0x10(%r15,%rax), %r13
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp169:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp165 # Offset: 109
    00000073: 	cmpl	$0x2, 0x4(%rsp)
    00000078: 	jbe	.Ltmp166 # Offset: 120
    0000007e: 	movq	%r15, %rax
    00000081: 	pxor	%xmm1, %xmm1
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp167:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm2
    00000094: 	psrad	$0x1f, %xmm2
    00000099: 	pxor	%xmm2, %xmm0
    0000009d: 	psubd	%xmm2, %xmm0
    000000a1: 	paddd	%xmm0, %xmm1
    000000a5: 	cmpq	%r13, %rax
    000000a8: 	jne	.Ltmp167 # Offset: 168
    000000aa: 	movdqa	%xmm1, %xmm0
    000000ae: 	movl	%ebx, %edx
    000000b0: 	psrldq	$0x8, %xmm0
    000000b5: 	paddd	%xmm0, %xmm1
    000000b9: 	movdqa	%xmm1, %xmm0
    000000bd: 	psrldq	$0x4, %xmm0
    000000c2: 	paddd	%xmm0, %xmm1
    000000c6: 	movd	%xmm1, %eax
    000000ca: 	cmpl	%r14d, %ebx
    000000cd: 	je	.Ltmp165 # Offset: 205
.Ltmp170:
    000000cf: 	movslq	%edx, %rsi
    000000d2: 	movl	(%r15,%rsi,4), %r10d
    000000d6: 	leaq	(,%rsi,4), %r9
    000000de: 	movl	%r10d, %esi
    000000e1: 	negl	%esi
    000000e3: 	cmovsl	%r10d, %esi
    000000e7: 	addl	%esi, %eax
    000000e9: 	leal	0x1(%rdx), %esi
    000000ec: 	cmpl	%esi, %r14d
    000000ef: 	jle	.Ltmp165 # Offset: 239
    000000f1: 	movl	0x4(%r15,%r9), %r10d
    000000f6: 	movl	%r10d, %esi
    000000f9: 	negl	%esi
    000000fb: 	cmovsl	%r10d, %esi
    000000ff: 	addl	$0x2, %edx
    00000102: 	addl	%esi, %eax
    00000104: 	cmpl	%edx, %r14d
    00000107: 	jle	.Ltmp165 # Offset: 263
    00000109: 	movl	0x8(%r15,%r9), %esi
    0000010e: 	movl	%esi, %edx
    00000110: 	negl	%edx
    00000112: 	cmovsl	%esi, %edx
    00000115: 	addl	%edx, %eax
.Ltmp165:
    00000117: 	movl	init_value(%rip), %esi
    0000011d: 	movl	%esi, %edx
    0000011f: 	negl	%edx
    00000121: 	cmovsl	%esi, %edx
    00000124: 	imull	$0x1f40, %edx, %edx
    0000012a: 	cmpl	%eax, %edx
    0000012c: 	je	.Ltmp168 # Offset: 300
    0000012e: 	movl	current_test(%rip), %edx
    00000134: 	movl	$0x1, %edi
    00000139: 	movq	%rbp, %rsi
    0000013c: 	xorl	%eax, %eax
    0000013e: 	addl	$0x1, %r12d
    00000142: 	callq	__printf_chk@PLT # Offset: 322
    00000147: 	movl	iterations(%rip), %edi
    0000014d: 	cmpl	%r12d, %edi
    00000150: 	jg	.Ltmp169 # Offset: 336
.Ltmp164:
    00000156: 	callq	clock@PLT # Offset: 342
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	movq	0x8(%rsp), %rdi
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	cvtsi2sd	%rax, %xmm0
    00000177: 	divsd	DATAat0xa508(%rip), %xmm0
    0000017f: 	addq	$0x18, %rsp
    00000183: 	popq	%rbx
    00000184: 	popq	%rbp
    00000185: 	popq	%r12
    00000187: 	popq	%r13
    00000189: 	popq	%r14
    0000018b: 	popq	%r15
    0000018d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp168:
    00000198: 	addl	$0x1, %r12d
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jl	.Ltmp169 # Offset: 415
    000001a5: 	jmp	.Ltmp164 # Offset: 421
.Ltmp166:
    000001a7: 	xorl	%edx, %edx
    000001a9: 	xorl	%eax, %eax
    000001ab: 	jmp	.Ltmp170 # Offset: 427
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi12abs_functor2IiEEvPT_iPKc"

Binary Function "_Z13test_constantIi12abs_functor3IiEEvPT_iPKc" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x4fb0
  Size        : 0x1b0
  MaxSize     : 0x1b0
  Offset      : 0x4fb0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi12abs_functor3IiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp171 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	movl	%eax, 0x4(%rsp)
    00000045: 	movl	%r14d, %eax
    00000048: 	andl	$-0x4, %ebx
    0000004b: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000052: 	shrl	$0x2, %eax
    00000055: 	subl	$0x1, %eax
    00000058: 	shlq	$0x4, %rax
    0000005c: 	leaq	0x10(%r15,%rax), %r13
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp176:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp172 # Offset: 109
    00000073: 	cmpl	$0x2, 0x4(%rsp)
    00000078: 	jbe	.Ltmp173 # Offset: 120
    0000007e: 	movq	%r15, %rax
    00000081: 	pxor	%xmm1, %xmm1
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp174:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm2
    00000094: 	psrad	$0x1f, %xmm2
    00000099: 	pxor	%xmm2, %xmm0
    0000009d: 	psubd	%xmm2, %xmm0
    000000a1: 	paddd	%xmm0, %xmm1
    000000a5: 	cmpq	%r13, %rax
    000000a8: 	jne	.Ltmp174 # Offset: 168
    000000aa: 	movdqa	%xmm1, %xmm0
    000000ae: 	movl	%ebx, %edx
    000000b0: 	psrldq	$0x8, %xmm0
    000000b5: 	paddd	%xmm0, %xmm1
    000000b9: 	movdqa	%xmm1, %xmm0
    000000bd: 	psrldq	$0x4, %xmm0
    000000c2: 	paddd	%xmm0, %xmm1
    000000c6: 	movd	%xmm1, %eax
    000000ca: 	cmpl	%r14d, %ebx
    000000cd: 	je	.Ltmp172 # Offset: 205
.Ltmp177:
    000000cf: 	movslq	%edx, %rsi
    000000d2: 	movl	(%r15,%rsi,4), %r10d
    000000d6: 	leaq	(,%rsi,4), %r9
    000000de: 	movl	%r10d, %esi
    000000e1: 	negl	%esi
    000000e3: 	cmovsl	%r10d, %esi
    000000e7: 	addl	%esi, %eax
    000000e9: 	leal	0x1(%rdx), %esi
    000000ec: 	cmpl	%esi, %r14d
    000000ef: 	jle	.Ltmp172 # Offset: 239
    000000f1: 	movl	0x4(%r15,%r9), %r10d
    000000f6: 	movl	%r10d, %esi
    000000f9: 	negl	%esi
    000000fb: 	cmovsl	%r10d, %esi
    000000ff: 	addl	$0x2, %edx
    00000102: 	addl	%esi, %eax
    00000104: 	cmpl	%edx, %r14d
    00000107: 	jle	.Ltmp172 # Offset: 263
    00000109: 	movl	0x8(%r15,%r9), %esi
    0000010e: 	movl	%esi, %edx
    00000110: 	negl	%edx
    00000112: 	cmovsl	%esi, %edx
    00000115: 	addl	%edx, %eax
.Ltmp172:
    00000117: 	movl	init_value(%rip), %esi
    0000011d: 	movl	%esi, %edx
    0000011f: 	negl	%edx
    00000121: 	cmovsl	%esi, %edx
    00000124: 	imull	$0x1f40, %edx, %edx
    0000012a: 	cmpl	%eax, %edx
    0000012c: 	je	.Ltmp175 # Offset: 300
    0000012e: 	movl	current_test(%rip), %edx
    00000134: 	movl	$0x1, %edi
    00000139: 	movq	%rbp, %rsi
    0000013c: 	xorl	%eax, %eax
    0000013e: 	addl	$0x1, %r12d
    00000142: 	callq	__printf_chk@PLT # Offset: 322
    00000147: 	movl	iterations(%rip), %edi
    0000014d: 	cmpl	%r12d, %edi
    00000150: 	jg	.Ltmp176 # Offset: 336
.Ltmp171:
    00000156: 	callq	clock@PLT # Offset: 342
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	movq	0x8(%rsp), %rdi
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	cvtsi2sd	%rax, %xmm0
    00000177: 	divsd	DATAat0xa508(%rip), %xmm0
    0000017f: 	addq	$0x18, %rsp
    00000183: 	popq	%rbx
    00000184: 	popq	%rbp
    00000185: 	popq	%r12
    00000187: 	popq	%r13
    00000189: 	popq	%r14
    0000018b: 	popq	%r15
    0000018d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp175:
    00000198: 	addl	$0x1, %r12d
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jl	.Ltmp176 # Offset: 415
    000001a5: 	jmp	.Ltmp171 # Offset: 421
.Ltmp173:
    000001a7: 	xorl	%edx, %edx
    000001a9: 	xorl	%eax, %eax
    000001ab: 	jmp	.Ltmp177 # Offset: 427
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi12abs_functor3IiEEvPT_iPKc"

Binary Function "_Z13test_constantIi12abs_functor4IiEEvPT_iPKc" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x5160
  Size        : 0x1d3
  MaxSize     : 0x1e0
  Offset      : 0x5160
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi12abs_functor4IiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp178 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movl	init_value(%rip), %esi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x4, %ebx
    00000051: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000058: 	shrl	$0x2, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp183:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp179 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp180 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp181:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm2
    0000009c: 	psrad	$0x1f, %xmm2
    000000a1: 	pxor	%xmm2, %xmm0
    000000a5: 	psubd	%xmm2, %xmm0
    000000a9: 	paddd	%xmm0, %xmm1
    000000ad: 	cmpq	%r13, %rax
    000000b0: 	jne	.Ltmp181 # Offset: 176
    000000b2: 	movdqa	%xmm1, %xmm0
    000000b6: 	movl	%ebx, %r9d
    000000b9: 	psrldq	$0x8, %xmm0
    000000be: 	paddd	%xmm0, %xmm1
    000000c2: 	movdqa	%xmm1, %xmm0
    000000c6: 	psrldq	$0x4, %xmm0
    000000cb: 	paddd	%xmm0, %xmm1
    000000cf: 	movd	%xmm1, %eax
    000000d3: 	cmpl	%r14d, %ebx
    000000d6: 	je	.Ltmp179 # Offset: 214
.Ltmp184:
    000000d8: 	movslq	%r9d, %rdx
    000000db: 	leaq	(,%rdx,4), %r11
    000000e3: 	movl	(%r15,%rdx,4), %edx
    000000e7: 	movl	%edx, %r10d
    000000ea: 	sarl	$0x1f, %r10d
    000000ee: 	xorl	%r10d, %edx
    000000f1: 	subl	%r10d, %edx
    000000f4: 	addl	%edx, %eax
    000000f6: 	leal	0x1(%r9), %edx
    000000fa: 	cmpl	%edx, %r14d
    000000fd: 	jle	.Ltmp179 # Offset: 253
    000000ff: 	movl	0x4(%r15,%r11), %edx
    00000104: 	addl	$0x2, %r9d
    00000108: 	movl	%edx, %r10d
    0000010b: 	sarl	$0x1f, %r10d
    0000010f: 	xorl	%r10d, %edx
    00000112: 	subl	%r10d, %edx
    00000115: 	addl	%edx, %eax
    00000117: 	cmpl	%r9d, %r14d
    0000011a: 	jle	.Ltmp179 # Offset: 282
    0000011c: 	movl	0x8(%r15,%r11), %edx
    00000121: 	movl	%edx, %r9d
    00000124: 	sarl	$0x1f, %r9d
    00000128: 	xorl	%r9d, %edx
    0000012b: 	subl	%r9d, %edx
    0000012e: 	addl	%edx, %eax
.Ltmp179:
    00000130: 	movl	%esi, %r9d
    00000133: 	movl	%esi, %edx
    00000135: 	sarl	$0x1f, %r9d
    00000139: 	xorl	%r9d, %edx
    0000013c: 	subl	%r9d, %edx
    0000013f: 	imull	$0x1f40, %edx, %edx
    00000145: 	cmpl	%eax, %edx
    00000147: 	je	.Ltmp182 # Offset: 327
    00000149: 	movl	current_test(%rip), %edx
    0000014f: 	movl	$0x1, %edi
    00000154: 	movq	%rbp, %rsi
    00000157: 	xorl	%eax, %eax
    00000159: 	addl	$0x1, %r12d
    0000015d: 	callq	__printf_chk@PLT # Offset: 349
    00000162: 	movl	iterations(%rip), %edi
    00000168: 	cmpl	%edi, %r12d
    0000016b: 	jge	.Ltmp178 # Offset: 363
    0000016d: 	movl	init_value(%rip), %esi
    00000173: 	jmp	.Ltmp183 # Offset: 371
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp182:
    00000180: 	addl	$0x1, %r12d
    00000184: 	cmpl	%edi, %r12d
    00000187: 	jl	.Ltmp183 # Offset: 391
.Ltmp178:
    0000018d: 	callq	clock@PLT # Offset: 397
    00000192: 	pxor	%xmm0, %xmm0
    00000196: 	movq	0x8(%rsp), %rdi
    0000019b: 	movq	%rax, end_time(%rip)
    000001a2: 	subq	start_time(%rip), %rax
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0xa508(%rip), %xmm0
    000001b6: 	addq	$0x18, %rsp
    000001ba: 	popq	%rbx
    000001bb: 	popq	%rbp
    000001bc: 	popq	%r12
    000001be: 	popq	%r13
    000001c0: 	popq	%r14
    000001c2: 	popq	%r15
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
.Ltmp180:
    000001c9: 	xorl	%r9d, %r9d
    000001cc: 	xorl	%eax, %eax
    000001ce: 	jmp	.Ltmp184 # Offset: 462
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi12abs_functor4IiEEvPT_iPKc"

Binary Function "_Z13test_constantIi12abs_functor5IiEEvPT_iPKc" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x5340
  Size        : 0x1e2
  MaxSize     : 0x1f0
  Offset      : 0x5340
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi12abs_functor5IiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %r11d
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%r11d, %r11d
    00000032: 	jle	.Ltmp185 # Offset: 50
    00000038: 	leal	-0x1(%rbp), %eax
    0000003b: 	movl	%ebp, %r12d
    0000003e: 	movl	init_value(%rip), %ecx
    00000044: 	xorl	%r15d, %r15d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%ebp, %eax
    0000004d: 	movdqa	DATAat0xa590(%rip), %xmm3
    00000055: 	andl	$-0x4, %r12d
    00000059: 	shrl	$0x2, %eax
    0000005c: 	leaq	DATAat0xa4ca(%rip), %r13
    00000063: 	subl	$0x1, %eax
    00000066: 	shlq	$0x4, %rax
    0000006a: 	leaq	0x10(%r14,%rax), %rbx
    0000006f: 	nop # Size: 1
.Ltmp190:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%ebp, %ebp
    00000074: 	jle	.Ltmp186 # Offset: 116
    0000007a: 	cmpl	$0x2, 0x4(%rsp)
    0000007f: 	jbe	.Ltmp187 # Offset: 127
    00000085: 	movq	%r14, %rax
    00000088: 	pxor	%xmm2, %xmm2
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp188:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	movdqu	(%rax), %xmm4
    00000098: 	addq	$0x10, %rax
    0000009c: 	psrad	$0x1f, %xmm0
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	pxor	%xmm4, %xmm0
    000000a9: 	pand	%xmm3, %xmm1
    000000ad: 	paddd	%xmm1, %xmm0
    000000b1: 	paddd	%xmm0, %xmm2
    000000b5: 	cmpq	%rbx, %rax
    000000b8: 	jne	.Ltmp188 # Offset: 184
    000000ba: 	movdqa	%xmm2, %xmm0
    000000be: 	movl	%r12d, %esi
    000000c1: 	psrldq	$0x8, %xmm0
    000000c6: 	paddd	%xmm0, %xmm2
    000000ca: 	movdqa	%xmm2, %xmm0
    000000ce: 	psrldq	$0x4, %xmm0
    000000d3: 	paddd	%xmm0, %xmm2
    000000d7: 	movd	%xmm2, %eax
    000000db: 	cmpl	%ebp, %r12d
    000000de: 	je	.Ltmp186 # Offset: 222
.Ltmp191:
    000000e0: 	movslq	%esi, %rdx
    000000e3: 	leaq	(,%rdx,4), %rdi
    000000eb: 	movl	(%r14,%rdx,4), %edx
    000000ef: 	movl	%edx, %r8d
    000000f2: 	sarl	$0x1f, %r8d
    000000f6: 	xorl	%r8d, %edx
    000000f9: 	andl	$0x1, %r8d
    000000fd: 	addl	%r8d, %edx
    00000100: 	addl	%edx, %eax
    00000102: 	leal	0x1(%rsi), %edx
    00000105: 	cmpl	%edx, %ebp
    00000107: 	jle	.Ltmp186 # Offset: 263
    00000109: 	movl	0x4(%r14,%rdi), %r9d
    0000010e: 	addl	$0x2, %esi
    00000111: 	movl	%r9d, %r8d
    00000114: 	movl	%r9d, %edx
    00000117: 	sarl	$0x1f, %r8d
    0000011b: 	shrl	$0x1f, %edx
    0000011e: 	xorl	%r9d, %r8d
    00000121: 	addl	%r8d, %edx
    00000124: 	addl	%edx, %eax
    00000126: 	cmpl	%esi, %ebp
    00000128: 	jle	.Ltmp186 # Offset: 296
    0000012a: 	movl	0x8(%r14,%rdi), %edi
    0000012f: 	movl	%edi, %esi
    00000131: 	movl	%edi, %edx
    00000133: 	sarl	$0x1f, %esi
    00000136: 	shrl	$0x1f, %edx
    00000139: 	xorl	%edi, %esi
    0000013b: 	addl	%esi, %edx
    0000013d: 	addl	%edx, %eax
.Ltmp186:
    0000013f: 	movl	%ecx, %esi
    00000141: 	movl	%ecx, %edx
    00000143: 	sarl	$0x1f, %esi
    00000146: 	xorl	%esi, %edx
    00000148: 	andl	$0x1, %esi
    0000014b: 	addl	%esi, %edx
    0000014d: 	imull	$0x1f40, %edx, %edx
    00000153: 	cmpl	%eax, %edx
    00000155: 	je	.Ltmp189 # Offset: 341
    00000157: 	movl	current_test(%rip), %edx
    0000015d: 	movq	%r13, %rsi
    00000160: 	movl	$0x1, %edi
    00000165: 	xorl	%eax, %eax
    00000167: 	addl	$0x1, %r15d
    0000016b: 	callq	__printf_chk@PLT # Offset: 363
    00000170: 	movl	iterations(%rip), %r11d
    00000177: 	cmpl	%r11d, %r15d
    0000017a: 	jge	.Ltmp185 # Offset: 378
    0000017c: 	movl	init_value(%rip), %ecx
    00000182: 	movdqa	DATAat0xa590(%rip), %xmm3
    0000018a: 	jmp	.Ltmp190 # Offset: 394
    0000018f: 	nop # Size: 1
.Ltmp189:
    00000190: 	addl	$0x1, %r15d
    00000194: 	cmpl	%r11d, %r15d
    00000197: 	jl	.Ltmp190 # Offset: 407
.Ltmp185:
    0000019d: 	callq	clock@PLT # Offset: 413
    000001a2: 	pxor	%xmm0, %xmm0
    000001a6: 	movq	0x8(%rsp), %rdi
    000001ab: 	movq	%rax, end_time(%rip)
    000001b2: 	subq	start_time(%rip), %rax
    000001b9: 	cvtsi2sd	%rax, %xmm0
    000001be: 	divsd	DATAat0xa508(%rip), %xmm0
    000001c6: 	addq	$0x18, %rsp
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	popq	%r14
    000001d2: 	popq	%r15
    000001d4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 468
.Ltmp187:
    000001d9: 	xorl	%esi, %esi
    000001db: 	xorl	%eax, %eax
    000001dd: 	jmp	.Ltmp191 # Offset: 477
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi12abs_functor5IiEEvPT_iPKc"

Binary Function "_Z13test_constantIi12abs_functor8IiEEvPT_iPKc" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x5530
  Size        : 0x1b0
  MaxSize     : 0x1b0
  Offset      : 0x5530
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi12abs_functor8IiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp192 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	movl	%eax, 0x4(%rsp)
    00000045: 	movl	%r14d, %eax
    00000048: 	andl	$-0x4, %ebx
    0000004b: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000052: 	shrl	$0x2, %eax
    00000055: 	subl	$0x1, %eax
    00000058: 	shlq	$0x4, %rax
    0000005c: 	leaq	0x10(%r15,%rax), %r13
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp197:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp193 # Offset: 109
    00000073: 	cmpl	$0x2, 0x4(%rsp)
    00000078: 	jbe	.Ltmp194 # Offset: 120
    0000007e: 	movq	%r15, %rax
    00000081: 	pxor	%xmm1, %xmm1
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp195:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm2
    00000094: 	psrad	$0x1f, %xmm2
    00000099: 	pxor	%xmm2, %xmm0
    0000009d: 	psubd	%xmm2, %xmm0
    000000a1: 	paddd	%xmm0, %xmm1
    000000a5: 	cmpq	%r13, %rax
    000000a8: 	jne	.Ltmp195 # Offset: 168
    000000aa: 	movdqa	%xmm1, %xmm0
    000000ae: 	movl	%ebx, %edx
    000000b0: 	psrldq	$0x8, %xmm0
    000000b5: 	paddd	%xmm0, %xmm1
    000000b9: 	movdqa	%xmm1, %xmm0
    000000bd: 	psrldq	$0x4, %xmm0
    000000c2: 	paddd	%xmm0, %xmm1
    000000c6: 	movd	%xmm1, %eax
    000000ca: 	cmpl	%r14d, %ebx
    000000cd: 	je	.Ltmp193 # Offset: 205
.Ltmp198:
    000000cf: 	movslq	%edx, %rsi
    000000d2: 	movl	(%r15,%rsi,4), %r10d
    000000d6: 	leaq	(,%rsi,4), %r9
    000000de: 	movl	%r10d, %esi
    000000e1: 	negl	%esi
    000000e3: 	cmovsl	%r10d, %esi
    000000e7: 	addl	%esi, %eax
    000000e9: 	leal	0x1(%rdx), %esi
    000000ec: 	cmpl	%esi, %r14d
    000000ef: 	jle	.Ltmp193 # Offset: 239
    000000f1: 	movl	0x4(%r15,%r9), %r10d
    000000f6: 	movl	%r10d, %esi
    000000f9: 	negl	%esi
    000000fb: 	cmovsl	%r10d, %esi
    000000ff: 	addl	$0x2, %edx
    00000102: 	addl	%esi, %eax
    00000104: 	cmpl	%edx, %r14d
    00000107: 	jle	.Ltmp193 # Offset: 263
    00000109: 	movl	0x8(%r15,%r9), %esi
    0000010e: 	movl	%esi, %edx
    00000110: 	negl	%edx
    00000112: 	cmovsl	%esi, %edx
    00000115: 	addl	%edx, %eax
.Ltmp193:
    00000117: 	movl	init_value(%rip), %esi
    0000011d: 	movl	%esi, %edx
    0000011f: 	negl	%edx
    00000121: 	cmovsl	%esi, %edx
    00000124: 	imull	$0x1f40, %edx, %edx
    0000012a: 	cmpl	%eax, %edx
    0000012c: 	je	.Ltmp196 # Offset: 300
    0000012e: 	movl	current_test(%rip), %edx
    00000134: 	movl	$0x1, %edi
    00000139: 	movq	%rbp, %rsi
    0000013c: 	xorl	%eax, %eax
    0000013e: 	addl	$0x1, %r12d
    00000142: 	callq	__printf_chk@PLT # Offset: 322
    00000147: 	movl	iterations(%rip), %edi
    0000014d: 	cmpl	%r12d, %edi
    00000150: 	jg	.Ltmp197 # Offset: 336
.Ltmp192:
    00000156: 	callq	clock@PLT # Offset: 342
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	movq	0x8(%rsp), %rdi
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	cvtsi2sd	%rax, %xmm0
    00000177: 	divsd	DATAat0xa508(%rip), %xmm0
    0000017f: 	addq	$0x18, %rsp
    00000183: 	popq	%rbx
    00000184: 	popq	%rbp
    00000185: 	popq	%r12
    00000187: 	popq	%r13
    00000189: 	popq	%r14
    0000018b: 	popq	%r15
    0000018d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp196:
    00000198: 	addl	$0x1, %r12d
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jl	.Ltmp197 # Offset: 415
    000001a5: 	jmp	.Ltmp192 # Offset: 421
.Ltmp194:
    000001a7: 	xorl	%edx, %edx
    000001a9: 	xorl	%eax, %eax
    000001ab: 	jmp	.Ltmp198 # Offset: 427
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi12abs_functor8IiEEvPT_iPKc"

Binary Function "_Z13test_constantIi12abs_functor9IiEEvPT_iPKc" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x56e0
  Size        : 0x1b0
  MaxSize     : 0x1b0
  Offset      : 0x56e0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi12abs_functor9IiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp199 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	movl	%eax, 0x4(%rsp)
    00000045: 	movl	%r14d, %eax
    00000048: 	andl	$-0x4, %ebx
    0000004b: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000052: 	shrl	$0x2, %eax
    00000055: 	subl	$0x1, %eax
    00000058: 	shlq	$0x4, %rax
    0000005c: 	leaq	0x10(%r15,%rax), %r13
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp204:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp200 # Offset: 109
    00000073: 	cmpl	$0x2, 0x4(%rsp)
    00000078: 	jbe	.Ltmp201 # Offset: 120
    0000007e: 	movq	%r15, %rax
    00000081: 	pxor	%xmm1, %xmm1
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp202:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm2
    00000094: 	psrad	$0x1f, %xmm2
    00000099: 	pxor	%xmm2, %xmm0
    0000009d: 	psubd	%xmm2, %xmm0
    000000a1: 	paddd	%xmm0, %xmm1
    000000a5: 	cmpq	%r13, %rax
    000000a8: 	jne	.Ltmp202 # Offset: 168
    000000aa: 	movdqa	%xmm1, %xmm0
    000000ae: 	movl	%ebx, %edx
    000000b0: 	psrldq	$0x8, %xmm0
    000000b5: 	paddd	%xmm0, %xmm1
    000000b9: 	movdqa	%xmm1, %xmm0
    000000bd: 	psrldq	$0x4, %xmm0
    000000c2: 	paddd	%xmm0, %xmm1
    000000c6: 	movd	%xmm1, %eax
    000000ca: 	cmpl	%r14d, %ebx
    000000cd: 	je	.Ltmp200 # Offset: 205
.Ltmp205:
    000000cf: 	movslq	%edx, %rsi
    000000d2: 	movl	(%r15,%rsi,4), %r10d
    000000d6: 	leaq	(,%rsi,4), %r9
    000000de: 	movl	%r10d, %esi
    000000e1: 	negl	%esi
    000000e3: 	cmovsl	%r10d, %esi
    000000e7: 	addl	%esi, %eax
    000000e9: 	leal	0x1(%rdx), %esi
    000000ec: 	cmpl	%esi, %r14d
    000000ef: 	jle	.Ltmp200 # Offset: 239
    000000f1: 	movl	0x4(%r15,%r9), %r10d
    000000f6: 	movl	%r10d, %esi
    000000f9: 	negl	%esi
    000000fb: 	cmovsl	%r10d, %esi
    000000ff: 	addl	$0x2, %edx
    00000102: 	addl	%esi, %eax
    00000104: 	cmpl	%edx, %r14d
    00000107: 	jle	.Ltmp200 # Offset: 263
    00000109: 	movl	0x8(%r15,%r9), %esi
    0000010e: 	movl	%esi, %edx
    00000110: 	negl	%edx
    00000112: 	cmovsl	%esi, %edx
    00000115: 	addl	%edx, %eax
.Ltmp200:
    00000117: 	movl	init_value(%rip), %esi
    0000011d: 	movl	%esi, %edx
    0000011f: 	negl	%edx
    00000121: 	cmovsl	%esi, %edx
    00000124: 	imull	$0x1f40, %edx, %edx
    0000012a: 	cmpl	%eax, %edx
    0000012c: 	je	.Ltmp203 # Offset: 300
    0000012e: 	movl	current_test(%rip), %edx
    00000134: 	movl	$0x1, %edi
    00000139: 	movq	%rbp, %rsi
    0000013c: 	xorl	%eax, %eax
    0000013e: 	addl	$0x1, %r12d
    00000142: 	callq	__printf_chk@PLT # Offset: 322
    00000147: 	movl	iterations(%rip), %edi
    0000014d: 	cmpl	%r12d, %edi
    00000150: 	jg	.Ltmp204 # Offset: 336
.Ltmp199:
    00000156: 	callq	clock@PLT # Offset: 342
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	movq	0x8(%rsp), %rdi
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	cvtsi2sd	%rax, %xmm0
    00000177: 	divsd	DATAat0xa508(%rip), %xmm0
    0000017f: 	addq	$0x18, %rsp
    00000183: 	popq	%rbx
    00000184: 	popq	%rbp
    00000185: 	popq	%r12
    00000187: 	popq	%r13
    00000189: 	popq	%r14
    0000018b: 	popq	%r15
    0000018d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp203:
    00000198: 	addl	$0x1, %r12d
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jl	.Ltmp204 # Offset: 415
    000001a5: 	jmp	.Ltmp199 # Offset: 421
.Ltmp201:
    000001a7: 	xorl	%edx, %edx
    000001a9: 	xorl	%eax, %eax
    000001ab: 	jmp	.Ltmp205 # Offset: 427
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi12abs_functor9IiEEvPT_iPKc"

Binary Function "_Z13test_constantIl15abs_functor_stdIlEEvPT_iPKc" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x5890
  Size        : 0x170
  MaxSize     : 0x170
  Offset      : 0x5890
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl15abs_functor_stdIlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp206 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leaq	DATAat0xa4ca(%rip), %rbx
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	subl	$0x1, %eax
    0000004f: 	shlq	$0x4, %rax
    00000053: 	leaq	0x10(%r12,%rax), %r13
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp211:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp207 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp208 # Offset: 107
    00000071: 	pxor	%xmm2, %xmm2
    00000075: 	movq	%r12, %rax
    00000078: 	movdqa	%xmm2, %xmm4
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp209:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	movdqa	%xmm4, %xmm1
    00000088: 	addq	$0x10, %rax
    0000008c: 	movdqa	%xmm0, %xmm3
    00000090: 	psrlq	$0x3f, %xmm3
    00000095: 	psubq	%xmm3, %xmm1
    00000099: 	pxor	%xmm1, %xmm0
    0000009d: 	psubq	%xmm1, %xmm0
    000000a1: 	paddq	%xmm0, %xmm2
    000000a5: 	cmpq	%rax, %r13
    000000a8: 	jne	.Ltmp209 # Offset: 168
    000000aa: 	movdqa	%xmm2, %xmm0
    000000ae: 	movslq	%ebp, %rdx
    000000b1: 	psrldq	$0x8, %xmm0
    000000b6: 	paddq	%xmm0, %xmm2
    000000ba: 	movq	%xmm2, %rax
    000000bf: 	cmpl	%r14d, %ebp
    000000c2: 	je	.Ltmp207 # Offset: 194
.Ltmp212:
    000000c4: 	movq	(%r12,%rdx,8), %rcx
    000000c8: 	movq	%rcx, %rdx
    000000cb: 	negq	%rdx
    000000ce: 	cmovsq	%rcx, %rdx
    000000d2: 	addq	%rdx, %rax
.Ltmp207:
    000000d5: 	movl	init_value(%rip), %ecx
    000000db: 	movl	%ecx, %edx
    000000dd: 	negl	%edx
    000000df: 	cmovsl	%ecx, %edx
    000000e2: 	movl	%edx, %edx
    000000e4: 	imulq	$0x1f40, %rdx, %rdx
    000000eb: 	cmpq	%rax, %rdx
    000000ee: 	je	.Ltmp210 # Offset: 238
    000000f0: 	movl	current_test(%rip), %edx
    000000f6: 	movq	%rbx, %rsi
    000000f9: 	movl	$0x1, %edi
    000000fe: 	xorl	%eax, %eax
    00000100: 	addl	$0x1, %r15d
    00000104: 	callq	__printf_chk@PLT # Offset: 260
    00000109: 	movl	iterations(%rip), %esi
    0000010f: 	cmpl	%esi, %r15d
    00000112: 	jl	.Ltmp211 # Offset: 274
.Ltmp206:
    00000118: 	callq	clock@PLT # Offset: 280
    0000011d: 	pxor	%xmm0, %xmm0
    00000121: 	movq	0x8(%rsp), %rdi
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	subq	start_time(%rip), %rax
    00000134: 	cvtsi2sd	%rax, %xmm0
    00000139: 	divsd	DATAat0xa508(%rip), %xmm0
    00000141: 	addq	$0x18, %rsp
    00000145: 	popq	%rbx
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	popq	%r14
    0000014d: 	popq	%r15
    0000014f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 335
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp210:
    00000158: 	addl	$0x1, %r15d
    0000015c: 	cmpl	%esi, %r15d
    0000015f: 	jl	.Ltmp211 # Offset: 351
    00000165: 	jmp	.Ltmp206 # Offset: 357
.Ltmp208:
    00000167: 	xorl	%edx, %edx
    00000169: 	xorl	%eax, %eax
    0000016b: 	jmp	.Ltmp212 # Offset: 363
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl15abs_functor_stdIlEEvPT_iPKc"

Binary Function "_Z13test_constantIl12abs_functor1IlEEvPT_iPKc" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x5a00
  Size        : 0x170
  MaxSize     : 0x170
  Offset      : 0x5a00
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl12abs_functor1IlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp213 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leaq	DATAat0xa4ca(%rip), %rbx
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	subl	$0x1, %eax
    0000004f: 	shlq	$0x4, %rax
    00000053: 	leaq	0x10(%r12,%rax), %r13
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp218:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp214 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp215 # Offset: 107
    00000071: 	pxor	%xmm2, %xmm2
    00000075: 	movq	%r12, %rax
    00000078: 	movdqa	%xmm2, %xmm4
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp216:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	movdqa	%xmm4, %xmm1
    00000088: 	addq	$0x10, %rax
    0000008c: 	movdqa	%xmm0, %xmm3
    00000090: 	psrlq	$0x3f, %xmm3
    00000095: 	psubq	%xmm3, %xmm1
    00000099: 	pxor	%xmm1, %xmm0
    0000009d: 	psubq	%xmm1, %xmm0
    000000a1: 	paddq	%xmm0, %xmm2
    000000a5: 	cmpq	%rax, %r13
    000000a8: 	jne	.Ltmp216 # Offset: 168
    000000aa: 	movdqa	%xmm2, %xmm0
    000000ae: 	movslq	%ebp, %rdx
    000000b1: 	psrldq	$0x8, %xmm0
    000000b6: 	paddq	%xmm0, %xmm2
    000000ba: 	movq	%xmm2, %rax
    000000bf: 	cmpl	%r14d, %ebp
    000000c2: 	je	.Ltmp214 # Offset: 194
.Ltmp219:
    000000c4: 	movq	(%r12,%rdx,8), %rcx
    000000c8: 	movq	%rcx, %rdx
    000000cb: 	negq	%rdx
    000000ce: 	cmovsq	%rcx, %rdx
    000000d2: 	addq	%rdx, %rax
.Ltmp214:
    000000d5: 	movl	init_value(%rip), %ecx
    000000db: 	movl	%ecx, %edx
    000000dd: 	negl	%edx
    000000df: 	cmovsl	%ecx, %edx
    000000e2: 	movl	%edx, %edx
    000000e4: 	imulq	$0x1f40, %rdx, %rdx
    000000eb: 	cmpq	%rax, %rdx
    000000ee: 	je	.Ltmp217 # Offset: 238
    000000f0: 	movl	current_test(%rip), %edx
    000000f6: 	movq	%rbx, %rsi
    000000f9: 	movl	$0x1, %edi
    000000fe: 	xorl	%eax, %eax
    00000100: 	addl	$0x1, %r15d
    00000104: 	callq	__printf_chk@PLT # Offset: 260
    00000109: 	movl	iterations(%rip), %esi
    0000010f: 	cmpl	%esi, %r15d
    00000112: 	jl	.Ltmp218 # Offset: 274
.Ltmp213:
    00000118: 	callq	clock@PLT # Offset: 280
    0000011d: 	pxor	%xmm0, %xmm0
    00000121: 	movq	0x8(%rsp), %rdi
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	subq	start_time(%rip), %rax
    00000134: 	cvtsi2sd	%rax, %xmm0
    00000139: 	divsd	DATAat0xa508(%rip), %xmm0
    00000141: 	addq	$0x18, %rsp
    00000145: 	popq	%rbx
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	popq	%r14
    0000014d: 	popq	%r15
    0000014f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 335
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp217:
    00000158: 	addl	$0x1, %r15d
    0000015c: 	cmpl	%esi, %r15d
    0000015f: 	jl	.Ltmp218 # Offset: 351
    00000165: 	jmp	.Ltmp213 # Offset: 357
.Ltmp215:
    00000167: 	xorl	%edx, %edx
    00000169: 	xorl	%eax, %eax
    0000016b: 	jmp	.Ltmp219 # Offset: 363
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl12abs_functor1IlEEvPT_iPKc"

Binary Function "_Z13test_constantIl12abs_functor2IlEEvPT_iPKc" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x5b70
  Size        : 0x170
  MaxSize     : 0x170
  Offset      : 0x5b70
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl12abs_functor2IlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp220 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leaq	DATAat0xa4ca(%rip), %rbx
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	subl	$0x1, %eax
    0000004f: 	shlq	$0x4, %rax
    00000053: 	leaq	0x10(%r12,%rax), %r13
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp225:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp221 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp222 # Offset: 107
    00000071: 	pxor	%xmm2, %xmm2
    00000075: 	movq	%r12, %rax
    00000078: 	movdqa	%xmm2, %xmm4
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp223:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	movdqa	%xmm4, %xmm1
    00000088: 	addq	$0x10, %rax
    0000008c: 	movdqa	%xmm0, %xmm3
    00000090: 	psrlq	$0x3f, %xmm3
    00000095: 	psubq	%xmm3, %xmm1
    00000099: 	pxor	%xmm1, %xmm0
    0000009d: 	psubq	%xmm1, %xmm0
    000000a1: 	paddq	%xmm0, %xmm2
    000000a5: 	cmpq	%rax, %r13
    000000a8: 	jne	.Ltmp223 # Offset: 168
    000000aa: 	movdqa	%xmm2, %xmm0
    000000ae: 	movslq	%ebp, %rdx
    000000b1: 	psrldq	$0x8, %xmm0
    000000b6: 	paddq	%xmm0, %xmm2
    000000ba: 	movq	%xmm2, %rax
    000000bf: 	cmpl	%r14d, %ebp
    000000c2: 	je	.Ltmp221 # Offset: 194
.Ltmp226:
    000000c4: 	movq	(%r12,%rdx,8), %rcx
    000000c8: 	movq	%rcx, %rdx
    000000cb: 	negq	%rdx
    000000ce: 	cmovsq	%rcx, %rdx
    000000d2: 	addq	%rdx, %rax
.Ltmp221:
    000000d5: 	movl	init_value(%rip), %ecx
    000000db: 	movl	%ecx, %edx
    000000dd: 	negl	%edx
    000000df: 	cmovsl	%ecx, %edx
    000000e2: 	movl	%edx, %edx
    000000e4: 	imulq	$0x1f40, %rdx, %rdx
    000000eb: 	cmpq	%rax, %rdx
    000000ee: 	je	.Ltmp224 # Offset: 238
    000000f0: 	movl	current_test(%rip), %edx
    000000f6: 	movq	%rbx, %rsi
    000000f9: 	movl	$0x1, %edi
    000000fe: 	xorl	%eax, %eax
    00000100: 	addl	$0x1, %r15d
    00000104: 	callq	__printf_chk@PLT # Offset: 260
    00000109: 	movl	iterations(%rip), %esi
    0000010f: 	cmpl	%esi, %r15d
    00000112: 	jl	.Ltmp225 # Offset: 274
.Ltmp220:
    00000118: 	callq	clock@PLT # Offset: 280
    0000011d: 	pxor	%xmm0, %xmm0
    00000121: 	movq	0x8(%rsp), %rdi
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	subq	start_time(%rip), %rax
    00000134: 	cvtsi2sd	%rax, %xmm0
    00000139: 	divsd	DATAat0xa508(%rip), %xmm0
    00000141: 	addq	$0x18, %rsp
    00000145: 	popq	%rbx
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	popq	%r14
    0000014d: 	popq	%r15
    0000014f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 335
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp224:
    00000158: 	addl	$0x1, %r15d
    0000015c: 	cmpl	%esi, %r15d
    0000015f: 	jl	.Ltmp225 # Offset: 351
    00000165: 	jmp	.Ltmp220 # Offset: 357
.Ltmp222:
    00000167: 	xorl	%edx, %edx
    00000169: 	xorl	%eax, %eax
    0000016b: 	jmp	.Ltmp226 # Offset: 363
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl12abs_functor2IlEEvPT_iPKc"

Binary Function "_Z13test_constantIl12abs_functor3IlEEvPT_iPKc" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x5ce0
  Size        : 0x170
  MaxSize     : 0x170
  Offset      : 0x5ce0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl12abs_functor3IlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp227 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leaq	DATAat0xa4ca(%rip), %rbx
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	subl	$0x1, %eax
    0000004f: 	shlq	$0x4, %rax
    00000053: 	leaq	0x10(%r12,%rax), %r13
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp232:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp228 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp229 # Offset: 107
    00000071: 	pxor	%xmm2, %xmm2
    00000075: 	movq	%r12, %rax
    00000078: 	movdqa	%xmm2, %xmm4
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp230:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	movdqa	%xmm4, %xmm1
    00000088: 	addq	$0x10, %rax
    0000008c: 	movdqa	%xmm0, %xmm3
    00000090: 	psrlq	$0x3f, %xmm3
    00000095: 	psubq	%xmm3, %xmm1
    00000099: 	pxor	%xmm1, %xmm0
    0000009d: 	psubq	%xmm1, %xmm0
    000000a1: 	paddq	%xmm0, %xmm2
    000000a5: 	cmpq	%rax, %r13
    000000a8: 	jne	.Ltmp230 # Offset: 168
    000000aa: 	movdqa	%xmm2, %xmm0
    000000ae: 	movslq	%ebp, %rdx
    000000b1: 	psrldq	$0x8, %xmm0
    000000b6: 	paddq	%xmm0, %xmm2
    000000ba: 	movq	%xmm2, %rax
    000000bf: 	cmpl	%r14d, %ebp
    000000c2: 	je	.Ltmp228 # Offset: 194
.Ltmp233:
    000000c4: 	movq	(%r12,%rdx,8), %rcx
    000000c8: 	movq	%rcx, %rdx
    000000cb: 	negq	%rdx
    000000ce: 	cmovsq	%rcx, %rdx
    000000d2: 	addq	%rdx, %rax
.Ltmp228:
    000000d5: 	movl	init_value(%rip), %ecx
    000000db: 	movl	%ecx, %edx
    000000dd: 	negl	%edx
    000000df: 	cmovsl	%ecx, %edx
    000000e2: 	movl	%edx, %edx
    000000e4: 	imulq	$0x1f40, %rdx, %rdx
    000000eb: 	cmpq	%rax, %rdx
    000000ee: 	je	.Ltmp231 # Offset: 238
    000000f0: 	movl	current_test(%rip), %edx
    000000f6: 	movq	%rbx, %rsi
    000000f9: 	movl	$0x1, %edi
    000000fe: 	xorl	%eax, %eax
    00000100: 	addl	$0x1, %r15d
    00000104: 	callq	__printf_chk@PLT # Offset: 260
    00000109: 	movl	iterations(%rip), %esi
    0000010f: 	cmpl	%esi, %r15d
    00000112: 	jl	.Ltmp232 # Offset: 274
.Ltmp227:
    00000118: 	callq	clock@PLT # Offset: 280
    0000011d: 	pxor	%xmm0, %xmm0
    00000121: 	movq	0x8(%rsp), %rdi
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	subq	start_time(%rip), %rax
    00000134: 	cvtsi2sd	%rax, %xmm0
    00000139: 	divsd	DATAat0xa508(%rip), %xmm0
    00000141: 	addq	$0x18, %rsp
    00000145: 	popq	%rbx
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	popq	%r14
    0000014d: 	popq	%r15
    0000014f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 335
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp231:
    00000158: 	addl	$0x1, %r15d
    0000015c: 	cmpl	%esi, %r15d
    0000015f: 	jl	.Ltmp232 # Offset: 351
    00000165: 	jmp	.Ltmp227 # Offset: 357
.Ltmp229:
    00000167: 	xorl	%edx, %edx
    00000169: 	xorl	%eax, %eax
    0000016b: 	jmp	.Ltmp233 # Offset: 363
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl12abs_functor3IlEEvPT_iPKc"

Binary Function "_Z13test_constantIl12abs_functor4IlEEvPT_iPKc" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x5e50
  Size        : 0x103
  MaxSize     : 0x110
  Offset      : 0x5e50
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl12abs_functor4IlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %edi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%edi, %edi
    0000002f: 	jle	.Ltmp234 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movl	init_value(%rip), %r8d
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0xa4ca(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp238:
    00000050: 	movq	%rbx, %rdx
    00000053: 	xorl	%esi, %esi
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp235 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp236:
    00000060: 	movq	(%rdx), %rax
    00000063: 	addq	$0x8, %rdx
    00000067: 	movq	%rax, %rcx
    0000006a: 	sarq	$0x3f, %rcx
    0000006e: 	xorq	%rcx, %rax
    00000071: 	subq	%rcx, %rax
    00000074: 	addq	%rax, %rsi
    00000077: 	cmpq	%rdx, %r13
    0000007a: 	jne	.Ltmp236 # Offset: 122
.Ltmp235:
    0000007c: 	movslq	%r8d, %rax
    0000007f: 	cqto
    00000081: 	xorq	%rdx, %rax
    00000084: 	subq	%rdx, %rax
    00000087: 	imulq	$0x1f40, %rax, %rax
    0000008e: 	cmpq	%rsi, %rax
    00000091: 	je	.Ltmp237 # Offset: 145
    00000093: 	movl	current_test(%rip), %edx
    00000099: 	movl	$0x1, %edi
    0000009e: 	movq	%rbp, %rsi
    000000a1: 	xorl	%eax, %eax
    000000a3: 	addl	$0x1, %r14d
    000000a7: 	callq	__printf_chk@PLT # Offset: 167
    000000ac: 	movl	iterations(%rip), %edi
    000000b2: 	cmpl	%edi, %r14d
    000000b5: 	jge	.Ltmp234 # Offset: 181
    000000b7: 	movl	init_value(%rip), %r8d
    000000be: 	jmp	.Ltmp238 # Offset: 190
.Ltmp237:
    000000c0: 	addl	$0x1, %r14d
    000000c4: 	cmpl	%edi, %r14d
    000000c7: 	jl	.Ltmp238 # Offset: 199
.Ltmp234:
    000000c9: 	callq	clock@PLT # Offset: 201
    000000ce: 	pxor	%xmm0, %xmm0
    000000d2: 	movq	%r12, %rdi
    000000d5: 	movq	%rax, end_time(%rip)
    000000dc: 	subq	start_time(%rip), %rax
    000000e3: 	cvtsi2sd	%rax, %xmm0
    000000e8: 	divsd	DATAat0xa508(%rip), %xmm0
    000000f0: 	addq	$0x8, %rsp
    000000f4: 	popq	%rbx
    000000f5: 	popq	%rbp
    000000f6: 	popq	%r12
    000000f8: 	popq	%r13
    000000fa: 	popq	%r14
    000000fc: 	popq	%r15
    000000fe: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl12abs_functor4IlEEvPT_iPKc"

Binary Function "_Z13test_constantIl12abs_functor5IlEEvPT_iPKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x5f60
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x5f60
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl12abs_functor5IlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %edi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%edi, %edi
    0000002f: 	jle	.Ltmp239 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movl	init_value(%rip), %r8d
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0xa4ca(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp243:
    00000050: 	movq	%rbx, %rcx
    00000053: 	xorl	%esi, %esi
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp240 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp241:
    00000060: 	movq	(%rcx), %rax
    00000063: 	addq	$0x8, %rcx
    00000067: 	cqto
    00000069: 	xorq	%rdx, %rax
    0000006c: 	andl	$0x1, %edx
    0000006f: 	addq	%rdx, %rax
    00000072: 	addq	%rax, %rsi
    00000075: 	cmpq	%rcx, %r13
    00000078: 	jne	.Ltmp241 # Offset: 120
.Ltmp240:
    0000007a: 	movslq	%r8d, %rax
    0000007d: 	cqto
    0000007f: 	xorq	%rdx, %rax
    00000082: 	andl	$0x1, %edx
    00000085: 	addq	%rdx, %rax
    00000088: 	imulq	$0x1f40, %rax, %rax
    0000008f: 	cmpq	%rsi, %rax
    00000092: 	je	.Ltmp242 # Offset: 146
    00000094: 	movl	current_test(%rip), %edx
    0000009a: 	movl	$0x1, %edi
    0000009f: 	movq	%rbp, %rsi
    000000a2: 	xorl	%eax, %eax
    000000a4: 	addl	$0x1, %r14d
    000000a8: 	callq	__printf_chk@PLT # Offset: 168
    000000ad: 	movl	iterations(%rip), %edi
    000000b3: 	cmpl	%edi, %r14d
    000000b6: 	jge	.Ltmp239 # Offset: 182
    000000b8: 	movl	init_value(%rip), %r8d
    000000bf: 	jmp	.Ltmp243 # Offset: 191
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp242:
    000000c8: 	addl	$0x1, %r14d
    000000cc: 	cmpl	%edi, %r14d
    000000cf: 	jl	.Ltmp243 # Offset: 207
.Ltmp239:
    000000d5: 	callq	clock@PLT # Offset: 213
    000000da: 	pxor	%xmm0, %xmm0
    000000de: 	movq	%r12, %rdi
    000000e1: 	movq	%rax, end_time(%rip)
    000000e8: 	subq	start_time(%rip), %rax
    000000ef: 	cvtsi2sd	%rax, %xmm0
    000000f4: 	divsd	DATAat0xa508(%rip), %xmm0
    000000fc: 	addq	$0x8, %rsp
    00000100: 	popq	%rbx
    00000101: 	popq	%rbp
    00000102: 	popq	%r12
    00000104: 	popq	%r13
    00000106: 	popq	%r14
    00000108: 	popq	%r15
    0000010a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 266
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl12abs_functor5IlEEvPT_iPKc"

Binary Function "_Z13test_constantIl12abs_functor8IlEEvPT_iPKc" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x6070
  Size        : 0x170
  MaxSize     : 0x170
  Offset      : 0x6070
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl12abs_functor8IlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp244 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leaq	DATAat0xa4ca(%rip), %rbx
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	subl	$0x1, %eax
    0000004f: 	shlq	$0x4, %rax
    00000053: 	leaq	0x10(%r12,%rax), %r13
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp249:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp245 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp246 # Offset: 107
    00000071: 	pxor	%xmm2, %xmm2
    00000075: 	movq	%r12, %rax
    00000078: 	movdqa	%xmm2, %xmm4
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp247:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	movdqa	%xmm4, %xmm1
    00000088: 	addq	$0x10, %rax
    0000008c: 	movdqa	%xmm0, %xmm3
    00000090: 	psrlq	$0x3f, %xmm3
    00000095: 	psubq	%xmm3, %xmm1
    00000099: 	pxor	%xmm1, %xmm0
    0000009d: 	psubq	%xmm1, %xmm0
    000000a1: 	paddq	%xmm0, %xmm2
    000000a5: 	cmpq	%rax, %r13
    000000a8: 	jne	.Ltmp247 # Offset: 168
    000000aa: 	movdqa	%xmm2, %xmm0
    000000ae: 	movslq	%ebp, %rdx
    000000b1: 	psrldq	$0x8, %xmm0
    000000b6: 	paddq	%xmm0, %xmm2
    000000ba: 	movq	%xmm2, %rax
    000000bf: 	cmpl	%r14d, %ebp
    000000c2: 	je	.Ltmp245 # Offset: 194
.Ltmp250:
    000000c4: 	movq	(%r12,%rdx,8), %rcx
    000000c8: 	movq	%rcx, %rdx
    000000cb: 	negq	%rdx
    000000ce: 	cmovsq	%rcx, %rdx
    000000d2: 	addq	%rdx, %rax
.Ltmp245:
    000000d5: 	movl	init_value(%rip), %ecx
    000000db: 	movl	%ecx, %edx
    000000dd: 	negl	%edx
    000000df: 	cmovsl	%ecx, %edx
    000000e2: 	movl	%edx, %edx
    000000e4: 	imulq	$0x1f40, %rdx, %rdx
    000000eb: 	cmpq	%rax, %rdx
    000000ee: 	je	.Ltmp248 # Offset: 238
    000000f0: 	movl	current_test(%rip), %edx
    000000f6: 	movq	%rbx, %rsi
    000000f9: 	movl	$0x1, %edi
    000000fe: 	xorl	%eax, %eax
    00000100: 	addl	$0x1, %r15d
    00000104: 	callq	__printf_chk@PLT # Offset: 260
    00000109: 	movl	iterations(%rip), %esi
    0000010f: 	cmpl	%esi, %r15d
    00000112: 	jl	.Ltmp249 # Offset: 274
.Ltmp244:
    00000118: 	callq	clock@PLT # Offset: 280
    0000011d: 	pxor	%xmm0, %xmm0
    00000121: 	movq	0x8(%rsp), %rdi
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	subq	start_time(%rip), %rax
    00000134: 	cvtsi2sd	%rax, %xmm0
    00000139: 	divsd	DATAat0xa508(%rip), %xmm0
    00000141: 	addq	$0x18, %rsp
    00000145: 	popq	%rbx
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	popq	%r14
    0000014d: 	popq	%r15
    0000014f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 335
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp248:
    00000158: 	addl	$0x1, %r15d
    0000015c: 	cmpl	%esi, %r15d
    0000015f: 	jl	.Ltmp249 # Offset: 351
    00000165: 	jmp	.Ltmp244 # Offset: 357
.Ltmp246:
    00000167: 	xorl	%edx, %edx
    00000169: 	xorl	%eax, %eax
    0000016b: 	jmp	.Ltmp250 # Offset: 363
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl12abs_functor8IlEEvPT_iPKc"

Binary Function "_Z13test_constantIl12abs_functor9IlEEvPT_iPKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x61e0
  Size        : 0x170
  MaxSize     : 0x170
  Offset      : 0x61e0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl12abs_functor9IlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp251 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leaq	DATAat0xa4ca(%rip), %rbx
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	subl	$0x1, %eax
    0000004f: 	shlq	$0x4, %rax
    00000053: 	leaq	0x10(%r12,%rax), %r13
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp256:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp252 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp253 # Offset: 107
    00000071: 	pxor	%xmm2, %xmm2
    00000075: 	movq	%r12, %rax
    00000078: 	movdqa	%xmm2, %xmm4
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp254:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	movdqa	%xmm4, %xmm1
    00000088: 	addq	$0x10, %rax
    0000008c: 	movdqa	%xmm0, %xmm3
    00000090: 	psrlq	$0x3f, %xmm3
    00000095: 	psubq	%xmm3, %xmm1
    00000099: 	pxor	%xmm1, %xmm0
    0000009d: 	psubq	%xmm1, %xmm0
    000000a1: 	paddq	%xmm0, %xmm2
    000000a5: 	cmpq	%rax, %r13
    000000a8: 	jne	.Ltmp254 # Offset: 168
    000000aa: 	movdqa	%xmm2, %xmm0
    000000ae: 	movslq	%ebp, %rdx
    000000b1: 	psrldq	$0x8, %xmm0
    000000b6: 	paddq	%xmm0, %xmm2
    000000ba: 	movq	%xmm2, %rax
    000000bf: 	cmpl	%r14d, %ebp
    000000c2: 	je	.Ltmp252 # Offset: 194
.Ltmp257:
    000000c4: 	movq	(%r12,%rdx,8), %rcx
    000000c8: 	movq	%rcx, %rdx
    000000cb: 	negq	%rdx
    000000ce: 	cmovsq	%rcx, %rdx
    000000d2: 	addq	%rdx, %rax
.Ltmp252:
    000000d5: 	movl	init_value(%rip), %ecx
    000000db: 	movl	%ecx, %edx
    000000dd: 	negl	%edx
    000000df: 	cmovsl	%ecx, %edx
    000000e2: 	movl	%edx, %edx
    000000e4: 	imulq	$0x1f40, %rdx, %rdx
    000000eb: 	cmpq	%rax, %rdx
    000000ee: 	je	.Ltmp255 # Offset: 238
    000000f0: 	movl	current_test(%rip), %edx
    000000f6: 	movq	%rbx, %rsi
    000000f9: 	movl	$0x1, %edi
    000000fe: 	xorl	%eax, %eax
    00000100: 	addl	$0x1, %r15d
    00000104: 	callq	__printf_chk@PLT # Offset: 260
    00000109: 	movl	iterations(%rip), %esi
    0000010f: 	cmpl	%esi, %r15d
    00000112: 	jl	.Ltmp256 # Offset: 274
.Ltmp251:
    00000118: 	callq	clock@PLT # Offset: 280
    0000011d: 	pxor	%xmm0, %xmm0
    00000121: 	movq	0x8(%rsp), %rdi
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	subq	start_time(%rip), %rax
    00000134: 	cvtsi2sd	%rax, %xmm0
    00000139: 	divsd	DATAat0xa508(%rip), %xmm0
    00000141: 	addq	$0x18, %rsp
    00000145: 	popq	%rbx
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	popq	%r14
    0000014d: 	popq	%r15
    0000014f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 335
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp255:
    00000158: 	addl	$0x1, %r15d
    0000015c: 	cmpl	%esi, %r15d
    0000015f: 	jl	.Ltmp256 # Offset: 351
    00000165: 	jmp	.Ltmp251 # Offset: 357
.Ltmp253:
    00000167: 	xorl	%edx, %edx
    00000169: 	xorl	%eax, %eax
    0000016b: 	jmp	.Ltmp257 # Offset: 363
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl12abs_functor9IlEEvPT_iPKc"

Binary Function "_Z13test_constantIf12fabs_functorIfEEvPT_iPKc" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x6350
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x6350
  Section     : .text
  Orc Section : .local.text._Z13test_constantIf12fabs_functorIfEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp258 # Offset: 49
    00000037: 	movl	%r12d, %eax
    0000003a: 	pxor	%xmm10, %xmm10
    0000003f: 	movl	%r12d, %r15d
    00000042: 	xorl	%r14d, %r14d
    00000045: 	shrl	$0x2, %eax
    00000048: 	movsd	DATAat0xa518(%rip), %xmm7
    00000050: 	cvtsi2ssl	init_value(%rip), %xmm10
    00000059: 	movq	DATAat0xa5c0(%rip), %xmm8
    00000062: 	subl	$0x1, %eax
    00000065: 	movaps	DATAat0xa5a0(%rip), %xmm3
    0000006c: 	leal	-0x1(%r12), %ecx
    00000071: 	movss	DATAat0xa620(%rip), %xmm6
    00000079: 	shlq	$0x4, %rax
    0000007d: 	andl	$-0x4, %r15d
    00000081: 	pxor	%xmm9, %xmm9
    00000086: 	leaq	0x10(%r13,%rax), %rbx
    0000008b: 	movss	DATAat0xa5b0(%rip), %xmm5
    00000093: 	leaq	DATAat0xa4ca(%rip), %rbp
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp265:
    000000a0: 	movaps	%xmm10, %xmm4
    000000a4: 	andps	%xmm5, %xmm4
    000000a7: 	mulss	%xmm6, %xmm4
    000000ab: 	testl	%r12d, %r12d
    000000ae: 	jle	.Ltmp259 # Offset: 174
.Ltmp266:
    000000b4: 	cmpl	$0x2, %ecx
    000000b7: 	jbe	.Ltmp260 # Offset: 183
    000000bd: 	movq	%r13, %rax
    000000c0: 	movaps	%xmm9, %xmm1
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp261:
    000000c8: 	movups	(%rax), %xmm0
    000000cb: 	addq	$0x10, %rax
    000000cf: 	andps	%xmm3, %xmm0
    000000d2: 	addss	%xmm0, %xmm1
    000000d6: 	movaps	%xmm0, %xmm2
    000000d9: 	shufps	$0x55, %xmm0, %xmm2
    000000dd: 	addss	%xmm1, %xmm2
    000000e1: 	movaps	%xmm0, %xmm1
    000000e4: 	unpckhps	%xmm0, %xmm1
    000000e7: 	shufps	$0xff, %xmm0, %xmm0
    000000eb: 	addss	%xmm2, %xmm1
    000000ef: 	addss	%xmm0, %xmm1
    000000f3: 	cmpq	%rax, %rbx
    000000f6: 	jne	.Ltmp261 # Offset: 246
    000000f8: 	movl	%r15d, %eax
    000000fb: 	cmpl	%r12d, %r15d
    000000fe: 	je	.Ltmp262 # Offset: 254
.Ltmp267:
    00000100: 	movslq	%eax, %rdi
    00000103: 	movss	(%r13,%rdi,4), %xmm0
    0000010a: 	leaq	(,%rdi,4), %r8
    00000112: 	leal	0x1(%rax), %edi
    00000115: 	andps	%xmm5, %xmm0
    00000118: 	addss	%xmm0, %xmm1
    0000011c: 	cmpl	%edi, %r12d
    0000011f: 	jle	.Ltmp262 # Offset: 287
    00000121: 	movss	0x4(%r13,%r8), %xmm0
    00000128: 	addl	$0x2, %eax
    0000012b: 	andps	%xmm5, %xmm0
    0000012e: 	addss	%xmm0, %xmm1
    00000132: 	cmpl	%eax, %r12d
    00000135: 	jle	.Ltmp262 # Offset: 309
    00000137: 	movss	0x8(%r13,%r8), %xmm0
    0000013e: 	andps	%xmm5, %xmm0
    00000141: 	addss	%xmm0, %xmm1
.Ltmp262:
    00000145: 	movaps	%xmm1, %xmm2
    00000148: 	movaps	%xmm1, %xmm0
    0000014b: 	andps	%xmm5, %xmm2
    0000014e: 	subss	%xmm4, %xmm0
    00000152: 	cvtss2sd	%xmm2, %xmm2
    00000156: 	comisd	DATAat0xa510(%rip), %xmm2
    0000015e: 	jbe	.Ltmp263 # Offset: 350
    00000160: 	divss	%xmm1, %xmm0
.Ltmp263:
    00000164: 	cvtss2sd	%xmm0, %xmm0
    00000168: 	andpd	%xmm8, %xmm0
    0000016d: 	comisd	%xmm0, %xmm7
    00000171: 	jbe	.Ltmp264 # Offset: 369
    00000173: 	addl	$0x1, %r14d
    00000177: 	cmpl	%edx, %r14d
    0000017a: 	jl	.Ltmp265 # Offset: 378
.Ltmp258:
    00000180: 	callq	clock@PLT # Offset: 384
    00000185: 	pxor	%xmm0, %xmm0
    00000189: 	movq	0x8(%rsp), %rdi
    0000018e: 	movq	%rax, end_time(%rip)
    00000195: 	subq	start_time(%rip), %rax
    0000019c: 	cvtsi2sd	%rax, %xmm0
    000001a1: 	divsd	DATAat0xa508(%rip), %xmm0
    000001a9: 	addq	$0x18, %rsp
    000001ad: 	popq	%rbx
    000001ae: 	popq	%rbp
    000001af: 	popq	%r12
    000001b1: 	popq	%r13
    000001b3: 	popq	%r14
    000001b5: 	popq	%r15
    000001b7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 439
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp264:
    000001c0: 	movl	current_test(%rip), %edx
    000001c6: 	movq	%rbp, %rsi
    000001c9: 	movl	$0x1, %edi
    000001ce: 	xorl	%eax, %eax
    000001d0: 	movl	%ecx, 0x4(%rsp)
    000001d4: 	addl	$0x1, %r14d
    000001d8: 	callq	__printf_chk@PLT # Offset: 472
    000001dd: 	movl	iterations(%rip), %edx
    000001e3: 	cmpl	%edx, %r14d
    000001e6: 	jge	.Ltmp258 # Offset: 486
    000001e8: 	pxor	%xmm10, %xmm10
    000001ed: 	movq	DATAat0xa518(%rip), %rax
    000001f4: 	movl	0x4(%rsp), %ecx
    000001f8: 	movss	DATAat0xa5b0(%rip), %xmm5
    00000200: 	cvtsi2ssl	init_value(%rip), %xmm10
    00000209: 	movss	DATAat0xa620(%rip), %xmm6
    00000211: 	movq	DATAat0xa5c0(%rip), %xmm8
    0000021a: 	pxor	%xmm9, %xmm9
    0000021f: 	movaps	DATAat0xa5a0(%rip), %xmm3
    00000226: 	movq	%rax, %xmm7
    0000022b: 	movaps	%xmm10, %xmm4
    0000022f: 	andps	%xmm5, %xmm4
    00000232: 	mulss	%xmm6, %xmm4
    00000236: 	testl	%r12d, %r12d
    00000239: 	jg	.Ltmp266 # Offset: 569
.Ltmp259:
    0000023f: 	movaps	%xmm9, %xmm0
    00000243: 	subss	%xmm4, %xmm0
    00000247: 	jmp	.Ltmp263 # Offset: 583
.Ltmp260:
    0000024c: 	xorl	%eax, %eax
    0000024e: 	movaps	%xmm9, %xmm1
    00000252: 	jmp	.Ltmp267 # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIf12fabs_functorIfEEvPT_iPKc"

Binary Function "_Z13test_constantIf13fabsf_functorIfEEvPT_iPKc" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x65b0
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x65b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIf13fabsf_functorIfEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp268 # Offset: 49
    00000037: 	movl	%r12d, %eax
    0000003a: 	pxor	%xmm10, %xmm10
    0000003f: 	movl	%r12d, %r15d
    00000042: 	xorl	%r14d, %r14d
    00000045: 	shrl	$0x2, %eax
    00000048: 	movsd	DATAat0xa518(%rip), %xmm7
    00000050: 	cvtsi2ssl	init_value(%rip), %xmm10
    00000059: 	movq	DATAat0xa5c0(%rip), %xmm8
    00000062: 	subl	$0x1, %eax
    00000065: 	movaps	DATAat0xa5a0(%rip), %xmm3
    0000006c: 	leal	-0x1(%r12), %ecx
    00000071: 	movss	DATAat0xa620(%rip), %xmm6
    00000079: 	shlq	$0x4, %rax
    0000007d: 	andl	$-0x4, %r15d
    00000081: 	pxor	%xmm9, %xmm9
    00000086: 	leaq	0x10(%r13,%rax), %rbx
    0000008b: 	movss	DATAat0xa5b0(%rip), %xmm5
    00000093: 	leaq	DATAat0xa4ca(%rip), %rbp
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp275:
    000000a0: 	movaps	%xmm10, %xmm4
    000000a4: 	andps	%xmm5, %xmm4
    000000a7: 	mulss	%xmm6, %xmm4
    000000ab: 	testl	%r12d, %r12d
    000000ae: 	jle	.Ltmp269 # Offset: 174
.Ltmp276:
    000000b4: 	cmpl	$0x2, %ecx
    000000b7: 	jbe	.Ltmp270 # Offset: 183
    000000bd: 	movq	%r13, %rax
    000000c0: 	movaps	%xmm9, %xmm1
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp271:
    000000c8: 	movups	(%rax), %xmm0
    000000cb: 	addq	$0x10, %rax
    000000cf: 	andps	%xmm3, %xmm0
    000000d2: 	addss	%xmm0, %xmm1
    000000d6: 	movaps	%xmm0, %xmm2
    000000d9: 	shufps	$0x55, %xmm0, %xmm2
    000000dd: 	addss	%xmm1, %xmm2
    000000e1: 	movaps	%xmm0, %xmm1
    000000e4: 	unpckhps	%xmm0, %xmm1
    000000e7: 	shufps	$0xff, %xmm0, %xmm0
    000000eb: 	addss	%xmm2, %xmm1
    000000ef: 	addss	%xmm0, %xmm1
    000000f3: 	cmpq	%rax, %rbx
    000000f6: 	jne	.Ltmp271 # Offset: 246
    000000f8: 	movl	%r15d, %eax
    000000fb: 	cmpl	%r12d, %r15d
    000000fe: 	je	.Ltmp272 # Offset: 254
.Ltmp277:
    00000100: 	movslq	%eax, %rdi
    00000103: 	movss	(%r13,%rdi,4), %xmm0
    0000010a: 	leaq	(,%rdi,4), %r8
    00000112: 	leal	0x1(%rax), %edi
    00000115: 	andps	%xmm5, %xmm0
    00000118: 	addss	%xmm0, %xmm1
    0000011c: 	cmpl	%edi, %r12d
    0000011f: 	jle	.Ltmp272 # Offset: 287
    00000121: 	movss	0x4(%r13,%r8), %xmm0
    00000128: 	addl	$0x2, %eax
    0000012b: 	andps	%xmm5, %xmm0
    0000012e: 	addss	%xmm0, %xmm1
    00000132: 	cmpl	%eax, %r12d
    00000135: 	jle	.Ltmp272 # Offset: 309
    00000137: 	movss	0x8(%r13,%r8), %xmm0
    0000013e: 	andps	%xmm5, %xmm0
    00000141: 	addss	%xmm0, %xmm1
.Ltmp272:
    00000145: 	movaps	%xmm1, %xmm2
    00000148: 	movaps	%xmm1, %xmm0
    0000014b: 	andps	%xmm5, %xmm2
    0000014e: 	subss	%xmm4, %xmm0
    00000152: 	cvtss2sd	%xmm2, %xmm2
    00000156: 	comisd	DATAat0xa510(%rip), %xmm2
    0000015e: 	jbe	.Ltmp273 # Offset: 350
    00000160: 	divss	%xmm1, %xmm0
.Ltmp273:
    00000164: 	cvtss2sd	%xmm0, %xmm0
    00000168: 	andpd	%xmm8, %xmm0
    0000016d: 	comisd	%xmm0, %xmm7
    00000171: 	jbe	.Ltmp274 # Offset: 369
    00000173: 	addl	$0x1, %r14d
    00000177: 	cmpl	%edx, %r14d
    0000017a: 	jl	.Ltmp275 # Offset: 378
.Ltmp268:
    00000180: 	callq	clock@PLT # Offset: 384
    00000185: 	pxor	%xmm0, %xmm0
    00000189: 	movq	0x8(%rsp), %rdi
    0000018e: 	movq	%rax, end_time(%rip)
    00000195: 	subq	start_time(%rip), %rax
    0000019c: 	cvtsi2sd	%rax, %xmm0
    000001a1: 	divsd	DATAat0xa508(%rip), %xmm0
    000001a9: 	addq	$0x18, %rsp
    000001ad: 	popq	%rbx
    000001ae: 	popq	%rbp
    000001af: 	popq	%r12
    000001b1: 	popq	%r13
    000001b3: 	popq	%r14
    000001b5: 	popq	%r15
    000001b7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 439
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp274:
    000001c0: 	movl	current_test(%rip), %edx
    000001c6: 	movq	%rbp, %rsi
    000001c9: 	movl	$0x1, %edi
    000001ce: 	xorl	%eax, %eax
    000001d0: 	movl	%ecx, 0x4(%rsp)
    000001d4: 	addl	$0x1, %r14d
    000001d8: 	callq	__printf_chk@PLT # Offset: 472
    000001dd: 	movl	iterations(%rip), %edx
    000001e3: 	cmpl	%edx, %r14d
    000001e6: 	jge	.Ltmp268 # Offset: 486
    000001e8: 	pxor	%xmm10, %xmm10
    000001ed: 	movq	DATAat0xa518(%rip), %rax
    000001f4: 	movl	0x4(%rsp), %ecx
    000001f8: 	movss	DATAat0xa5b0(%rip), %xmm5
    00000200: 	cvtsi2ssl	init_value(%rip), %xmm10
    00000209: 	movss	DATAat0xa620(%rip), %xmm6
    00000211: 	movq	DATAat0xa5c0(%rip), %xmm8
    0000021a: 	pxor	%xmm9, %xmm9
    0000021f: 	movaps	DATAat0xa5a0(%rip), %xmm3
    00000226: 	movq	%rax, %xmm7
    0000022b: 	movaps	%xmm10, %xmm4
    0000022f: 	andps	%xmm5, %xmm4
    00000232: 	mulss	%xmm6, %xmm4
    00000236: 	testl	%r12d, %r12d
    00000239: 	jg	.Ltmp276 # Offset: 569
.Ltmp269:
    0000023f: 	movaps	%xmm9, %xmm0
    00000243: 	subss	%xmm4, %xmm0
    00000247: 	jmp	.Ltmp273 # Offset: 583
.Ltmp270:
    0000024c: 	xorl	%eax, %eax
    0000024e: 	movaps	%xmm9, %xmm1
    00000252: 	jmp	.Ltmp277 # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIf13fabsf_functorIfEEvPT_iPKc"

Binary Function "_Z13test_constantIf15abs_functor_stdIfEEvPT_iPKc" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x6810
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x6810
  Section     : .text
  Orc Section : .local.text._Z13test_constantIf15abs_functor_stdIfEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp278 # Offset: 49
    00000037: 	movl	%r12d, %eax
    0000003a: 	pxor	%xmm10, %xmm10
    0000003f: 	movl	%r12d, %r15d
    00000042: 	xorl	%r14d, %r14d
    00000045: 	shrl	$0x2, %eax
    00000048: 	movsd	DATAat0xa518(%rip), %xmm7
    00000050: 	cvtsi2ssl	init_value(%rip), %xmm10
    00000059: 	movq	DATAat0xa5c0(%rip), %xmm8
    00000062: 	subl	$0x1, %eax
    00000065: 	movaps	DATAat0xa5a0(%rip), %xmm3
    0000006c: 	leal	-0x1(%r12), %ecx
    00000071: 	movss	DATAat0xa620(%rip), %xmm6
    00000079: 	shlq	$0x4, %rax
    0000007d: 	andl	$-0x4, %r15d
    00000081: 	pxor	%xmm9, %xmm9
    00000086: 	leaq	0x10(%r13,%rax), %rbx
    0000008b: 	movss	DATAat0xa5b0(%rip), %xmm5
    00000093: 	leaq	DATAat0xa4ca(%rip), %rbp
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp285:
    000000a0: 	movaps	%xmm10, %xmm4
    000000a4: 	andps	%xmm5, %xmm4
    000000a7: 	mulss	%xmm6, %xmm4
    000000ab: 	testl	%r12d, %r12d
    000000ae: 	jle	.Ltmp279 # Offset: 174
.Ltmp286:
    000000b4: 	cmpl	$0x2, %ecx
    000000b7: 	jbe	.Ltmp280 # Offset: 183
    000000bd: 	movq	%r13, %rax
    000000c0: 	movaps	%xmm9, %xmm1
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp281:
    000000c8: 	movups	(%rax), %xmm0
    000000cb: 	addq	$0x10, %rax
    000000cf: 	andps	%xmm3, %xmm0
    000000d2: 	addss	%xmm0, %xmm1
    000000d6: 	movaps	%xmm0, %xmm2
    000000d9: 	shufps	$0x55, %xmm0, %xmm2
    000000dd: 	addss	%xmm1, %xmm2
    000000e1: 	movaps	%xmm0, %xmm1
    000000e4: 	unpckhps	%xmm0, %xmm1
    000000e7: 	shufps	$0xff, %xmm0, %xmm0
    000000eb: 	addss	%xmm2, %xmm1
    000000ef: 	addss	%xmm0, %xmm1
    000000f3: 	cmpq	%rax, %rbx
    000000f6: 	jne	.Ltmp281 # Offset: 246
    000000f8: 	movl	%r15d, %eax
    000000fb: 	cmpl	%r12d, %r15d
    000000fe: 	je	.Ltmp282 # Offset: 254
.Ltmp287:
    00000100: 	movslq	%eax, %rdi
    00000103: 	movss	(%r13,%rdi,4), %xmm0
    0000010a: 	leaq	(,%rdi,4), %r8
    00000112: 	leal	0x1(%rax), %edi
    00000115: 	andps	%xmm5, %xmm0
    00000118: 	addss	%xmm0, %xmm1
    0000011c: 	cmpl	%edi, %r12d
    0000011f: 	jle	.Ltmp282 # Offset: 287
    00000121: 	movss	0x4(%r13,%r8), %xmm0
    00000128: 	addl	$0x2, %eax
    0000012b: 	andps	%xmm5, %xmm0
    0000012e: 	addss	%xmm0, %xmm1
    00000132: 	cmpl	%eax, %r12d
    00000135: 	jle	.Ltmp282 # Offset: 309
    00000137: 	movss	0x8(%r13,%r8), %xmm0
    0000013e: 	andps	%xmm5, %xmm0
    00000141: 	addss	%xmm0, %xmm1
.Ltmp282:
    00000145: 	movaps	%xmm1, %xmm2
    00000148: 	movaps	%xmm1, %xmm0
    0000014b: 	andps	%xmm5, %xmm2
    0000014e: 	subss	%xmm4, %xmm0
    00000152: 	cvtss2sd	%xmm2, %xmm2
    00000156: 	comisd	DATAat0xa510(%rip), %xmm2
    0000015e: 	jbe	.Ltmp283 # Offset: 350
    00000160: 	divss	%xmm1, %xmm0
.Ltmp283:
    00000164: 	cvtss2sd	%xmm0, %xmm0
    00000168: 	andpd	%xmm8, %xmm0
    0000016d: 	comisd	%xmm0, %xmm7
    00000171: 	jbe	.Ltmp284 # Offset: 369
    00000173: 	addl	$0x1, %r14d
    00000177: 	cmpl	%edx, %r14d
    0000017a: 	jl	.Ltmp285 # Offset: 378
.Ltmp278:
    00000180: 	callq	clock@PLT # Offset: 384
    00000185: 	pxor	%xmm0, %xmm0
    00000189: 	movq	0x8(%rsp), %rdi
    0000018e: 	movq	%rax, end_time(%rip)
    00000195: 	subq	start_time(%rip), %rax
    0000019c: 	cvtsi2sd	%rax, %xmm0
    000001a1: 	divsd	DATAat0xa508(%rip), %xmm0
    000001a9: 	addq	$0x18, %rsp
    000001ad: 	popq	%rbx
    000001ae: 	popq	%rbp
    000001af: 	popq	%r12
    000001b1: 	popq	%r13
    000001b3: 	popq	%r14
    000001b5: 	popq	%r15
    000001b7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 439
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp284:
    000001c0: 	movl	current_test(%rip), %edx
    000001c6: 	movq	%rbp, %rsi
    000001c9: 	movl	$0x1, %edi
    000001ce: 	xorl	%eax, %eax
    000001d0: 	movl	%ecx, 0x4(%rsp)
    000001d4: 	addl	$0x1, %r14d
    000001d8: 	callq	__printf_chk@PLT # Offset: 472
    000001dd: 	movl	iterations(%rip), %edx
    000001e3: 	cmpl	%edx, %r14d
    000001e6: 	jge	.Ltmp278 # Offset: 486
    000001e8: 	pxor	%xmm10, %xmm10
    000001ed: 	movq	DATAat0xa518(%rip), %rax
    000001f4: 	movl	0x4(%rsp), %ecx
    000001f8: 	movss	DATAat0xa5b0(%rip), %xmm5
    00000200: 	cvtsi2ssl	init_value(%rip), %xmm10
    00000209: 	movss	DATAat0xa620(%rip), %xmm6
    00000211: 	movq	DATAat0xa5c0(%rip), %xmm8
    0000021a: 	pxor	%xmm9, %xmm9
    0000021f: 	movaps	DATAat0xa5a0(%rip), %xmm3
    00000226: 	movq	%rax, %xmm7
    0000022b: 	movaps	%xmm10, %xmm4
    0000022f: 	andps	%xmm5, %xmm4
    00000232: 	mulss	%xmm6, %xmm4
    00000236: 	testl	%r12d, %r12d
    00000239: 	jg	.Ltmp286 # Offset: 569
.Ltmp279:
    0000023f: 	movaps	%xmm9, %xmm0
    00000243: 	subss	%xmm4, %xmm0
    00000247: 	jmp	.Ltmp283 # Offset: 583
.Ltmp280:
    0000024c: 	xorl	%eax, %eax
    0000024e: 	movaps	%xmm9, %xmm1
    00000252: 	jmp	.Ltmp287 # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIf15abs_functor_stdIfEEvPT_iPKc"

Binary Function "_Z13test_constantIf12abs_functor1IfEEvPT_iPKc" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x6a70
  Size        : 0x2b6
  MaxSize     : 0x2c0
  Offset      : 0x6a70
  Section     : .text
  Orc Section : .local.text._Z13test_constantIf12abs_functor1IfEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp288 # Offset: 49
    00000037: 	movl	%r12d, %eax
    0000003a: 	pxor	%xmm5, %xmm5
    0000003e: 	movl	%r12d, %r15d
    00000041: 	xorl	%r14d, %r14d
    00000044: 	shrl	$0x2, %eax
    00000047: 	leal	-0x1(%r12), %ebp
    0000004c: 	pxor	%xmm4, %xmm4
    00000050: 	andl	$-0x4, %r15d
    00000054: 	cvtsi2ssl	init_value(%rip), %xmm5
    0000005c: 	subl	$0x1, %eax
    0000005f: 	movss	DATAat0xa620(%rip), %xmm8
    00000068: 	movq	DATAat0xa5c0(%rip), %xmm7
    00000070: 	shlq	$0x4, %rax
    00000074: 	movsd	DATAat0xa518(%rip), %xmm6
    0000007c: 	movss	DATAat0xa5b0(%rip), %xmm9
    00000085: 	leaq	0x10(%r13,%rax), %rbx
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp299:
    00000090: 	movaps	%xmm5, %xmm12
    00000094: 	testl	%r12d, %r12d
    00000097: 	jle	.Ltmp289 # Offset: 151
.Ltmp301:
    0000009d: 	cmpl	$0x2, %ebp
    000000a0: 	jbe	.Ltmp290 # Offset: 160
    000000a6: 	movaps	DATAat0xa5d0(%rip), %xmm3
    000000ad: 	movq	%r13, %rax
    000000b0: 	movaps	%xmm4, %xmm1
    000000b3: 	pxor	%xmm2, %xmm2
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp291:
    000000c0: 	movups	(%rax), %xmm11
    000000c4: 	addq	$0x10, %rax
    000000c8: 	movaps	%xmm11, %xmm0
    000000cc: 	movaps	%xmm11, %xmm10
    000000d0: 	cmpltps	%xmm2, %xmm0
    000000d4: 	xorps	%xmm3, %xmm10
    000000d8: 	andps	%xmm0, %xmm10
    000000dc: 	andnps	%xmm11, %xmm0
    000000e0: 	orps	%xmm10, %xmm0
    000000e4: 	movaps	%xmm0, %xmm10
    000000e8: 	addss	%xmm1, %xmm10
    000000ed: 	movaps	%xmm0, %xmm1
    000000f0: 	shufps	$0x55, %xmm0, %xmm1
    000000f4: 	addss	%xmm10, %xmm1
    000000f9: 	movaps	%xmm0, %xmm10
    000000fd: 	unpckhps	%xmm0, %xmm10
    00000101: 	shufps	$0xff, %xmm0, %xmm0
    00000105: 	addss	%xmm10, %xmm1
    0000010a: 	addss	%xmm0, %xmm1
    0000010e: 	cmpq	%rbx, %rax
    00000111: 	jne	.Ltmp291 # Offset: 273
    00000113: 	movl	%r15d, %eax
    00000116: 	cmpl	%r12d, %r15d
    00000119: 	je	.Ltmp292 # Offset: 281
.Ltmp303:
    0000011b: 	movslq	%eax, %rsi
    0000011e: 	movss	(%r13,%rsi,4), %xmm0
    00000125: 	leaq	(,%rsi,4), %rdi
    0000012d: 	comiss	%xmm0, %xmm4
    00000130: 	jbe	.Ltmp293 # Offset: 304
    00000132: 	xorps	DATAat0xa5e0(%rip), %xmm0
.Ltmp293:
    00000139: 	leal	0x1(%rax), %esi
    0000013c: 	addss	%xmm0, %xmm1
    00000140: 	cmpl	%esi, %r12d
    00000143: 	jle	.Ltmp292 # Offset: 323
    00000145: 	movss	0x4(%r13,%rdi), %xmm0
    0000014c: 	comiss	%xmm0, %xmm4
    0000014f: 	jbe	.Ltmp294 # Offset: 335
    00000151: 	xorps	DATAat0xa5e0(%rip), %xmm0
.Ltmp294:
    00000158: 	addl	$0x2, %eax
    0000015b: 	addss	%xmm0, %xmm1
    0000015f: 	cmpl	%eax, %r12d
    00000162: 	jle	.Ltmp292 # Offset: 354
    00000164: 	movss	0x8(%r13,%rdi), %xmm0
    0000016b: 	comiss	%xmm0, %xmm4
    0000016e: 	jbe	.Ltmp295 # Offset: 366
    00000170: 	xorps	DATAat0xa5e0(%rip), %xmm0
.Ltmp295:
    00000177: 	addss	%xmm0, %xmm1
.Ltmp292:
    0000017b: 	comiss	%xmm5, %xmm4
    0000017e: 	movaps	%xmm1, %xmm2
    00000181: 	andps	%xmm9, %xmm2
    00000185: 	cvtss2sd	%xmm2, %xmm2
    00000189: 	ja	.Ltmp296 # Offset: 393
.Ltmp300:
    0000018b: 	mulss	%xmm8, %xmm12
    00000190: 	comisd	DATAat0xa510(%rip), %xmm2
    00000198: 	movaps	%xmm1, %xmm0
    0000019b: 	subss	%xmm12, %xmm0
    000001a0: 	jbe	.Ltmp297 # Offset: 416
    000001a2: 	divss	%xmm1, %xmm0
.Ltmp297:
    000001a6: 	cvtss2sd	%xmm0, %xmm0
    000001aa: 	andpd	%xmm7, %xmm0
    000001ae: 	comisd	%xmm0, %xmm6
    000001b2: 	jbe	.Ltmp298 # Offset: 434
    000001b4: 	addl	$0x1, %r14d
    000001b8: 	cmpl	%edx, %r14d
    000001bb: 	jl	.Ltmp299 # Offset: 443
.Ltmp288:
    000001c1: 	callq	clock@PLT # Offset: 449
    000001c6: 	pxor	%xmm0, %xmm0
    000001ca: 	movq	0x8(%rsp), %rdi
    000001cf: 	movq	%rax, end_time(%rip)
    000001d6: 	subq	start_time(%rip), %rax
    000001dd: 	cvtsi2sd	%rax, %xmm0
    000001e2: 	divsd	DATAat0xa508(%rip), %xmm0
    000001ea: 	addq	$0x18, %rsp
    000001ee: 	popq	%rbx
    000001ef: 	popq	%rbp
    000001f0: 	popq	%r12
    000001f2: 	popq	%r13
    000001f4: 	popq	%r14
    000001f6: 	popq	%r15
    000001f8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 504
.Ltmp302:
    000001fd: 	pxor	%xmm2, %xmm2
    00000201: 	movaps	%xmm4, %xmm1
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp296:
    00000208: 	movaps	%xmm5, %xmm12
    0000020c: 	xorps	DATAat0xa5e0(%rip), %xmm12
    00000214: 	jmp	.Ltmp300 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp298:
    00000220: 	movl	current_test(%rip), %edx
    00000226: 	leaq	DATAat0xa4ca(%rip), %rsi
    0000022d: 	movl	$0x1, %edi
    00000232: 	xorl	%eax, %eax
    00000234: 	addl	$0x1, %r14d
    00000238: 	callq	__printf_chk@PLT # Offset: 568
    0000023d: 	movl	iterations(%rip), %edx
    00000243: 	cmpl	%edx, %r14d
    00000246: 	jge	.Ltmp288 # Offset: 582
    0000024c: 	pxor	%xmm5, %xmm5
    00000250: 	movq	DATAat0xa518(%rip), %rax
    00000257: 	movq	DATAat0xa5c0(%rip), %xmm7
    0000025f: 	pxor	%xmm4, %xmm4
    00000263: 	cvtsi2ssl	init_value(%rip), %xmm5
    0000026b: 	movss	DATAat0xa620(%rip), %xmm8
    00000274: 	movss	DATAat0xa5b0(%rip), %xmm9
    0000027d: 	movq	%rax, %xmm6
    00000282: 	movaps	%xmm5, %xmm12
    00000286: 	testl	%r12d, %r12d
    00000289: 	jg	.Ltmp301 # Offset: 649
.Ltmp289:
    0000028f: 	comiss	%xmm5, %xmm4
    00000292: 	ja	.Ltmp302 # Offset: 658
    00000298: 	movaps	%xmm5, %xmm1
    0000029b: 	movaps	%xmm4, %xmm0
    0000029e: 	mulss	%xmm8, %xmm1
    000002a3: 	subss	%xmm1, %xmm0
    000002a7: 	jmp	.Ltmp297 # Offset: 679
.Ltmp290:
    000002ac: 	xorl	%eax, %eax
    000002ae: 	movaps	%xmm4, %xmm1
    000002b1: 	jmp	.Ltmp303 # Offset: 689
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIf12abs_functor1IfEEvPT_iPKc"

Binary Function "_Z13test_constantIf12abs_functor2IfEEvPT_iPKc" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x6d30
  Size        : 0x2b6
  MaxSize     : 0x2c0
  Offset      : 0x6d30
  Section     : .text
  Orc Section : .local.text._Z13test_constantIf12abs_functor2IfEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp304 # Offset: 49
    00000037: 	movl	%r12d, %eax
    0000003a: 	pxor	%xmm5, %xmm5
    0000003e: 	movl	%r12d, %r15d
    00000041: 	xorl	%r14d, %r14d
    00000044: 	shrl	$0x2, %eax
    00000047: 	leal	-0x1(%r12), %ebp
    0000004c: 	pxor	%xmm4, %xmm4
    00000050: 	andl	$-0x4, %r15d
    00000054: 	cvtsi2ssl	init_value(%rip), %xmm5
    0000005c: 	subl	$0x1, %eax
    0000005f: 	movss	DATAat0xa620(%rip), %xmm8
    00000068: 	movq	DATAat0xa5c0(%rip), %xmm7
    00000070: 	shlq	$0x4, %rax
    00000074: 	movsd	DATAat0xa518(%rip), %xmm6
    0000007c: 	movss	DATAat0xa5b0(%rip), %xmm9
    00000085: 	leaq	0x10(%r13,%rax), %rbx
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp315:
    00000090: 	movaps	%xmm5, %xmm12
    00000094: 	testl	%r12d, %r12d
    00000097: 	jle	.Ltmp305 # Offset: 151
.Ltmp317:
    0000009d: 	cmpl	$0x2, %ebp
    000000a0: 	jbe	.Ltmp306 # Offset: 160
    000000a6: 	movaps	DATAat0xa5d0(%rip), %xmm3
    000000ad: 	movq	%r13, %rax
    000000b0: 	movaps	%xmm4, %xmm1
    000000b3: 	pxor	%xmm2, %xmm2
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp307:
    000000c0: 	movups	(%rax), %xmm11
    000000c4: 	addq	$0x10, %rax
    000000c8: 	movaps	%xmm11, %xmm0
    000000cc: 	movaps	%xmm11, %xmm10
    000000d0: 	cmpltps	%xmm2, %xmm0
    000000d4: 	xorps	%xmm3, %xmm10
    000000d8: 	andps	%xmm0, %xmm10
    000000dc: 	andnps	%xmm11, %xmm0
    000000e0: 	orps	%xmm10, %xmm0
    000000e4: 	movaps	%xmm0, %xmm10
    000000e8: 	addss	%xmm1, %xmm10
    000000ed: 	movaps	%xmm0, %xmm1
    000000f0: 	shufps	$0x55, %xmm0, %xmm1
    000000f4: 	addss	%xmm10, %xmm1
    000000f9: 	movaps	%xmm0, %xmm10
    000000fd: 	unpckhps	%xmm0, %xmm10
    00000101: 	shufps	$0xff, %xmm0, %xmm0
    00000105: 	addss	%xmm10, %xmm1
    0000010a: 	addss	%xmm0, %xmm1
    0000010e: 	cmpq	%rbx, %rax
    00000111: 	jne	.Ltmp307 # Offset: 273
    00000113: 	movl	%r15d, %eax
    00000116: 	cmpl	%r12d, %r15d
    00000119: 	je	.Ltmp308 # Offset: 281
.Ltmp319:
    0000011b: 	movslq	%eax, %rsi
    0000011e: 	movss	(%r13,%rsi,4), %xmm0
    00000125: 	leaq	(,%rsi,4), %rdi
    0000012d: 	comiss	%xmm0, %xmm4
    00000130: 	jbe	.Ltmp309 # Offset: 304
    00000132: 	xorps	DATAat0xa5e0(%rip), %xmm0
.Ltmp309:
    00000139: 	leal	0x1(%rax), %esi
    0000013c: 	addss	%xmm0, %xmm1
    00000140: 	cmpl	%esi, %r12d
    00000143: 	jle	.Ltmp308 # Offset: 323
    00000145: 	movss	0x4(%r13,%rdi), %xmm0
    0000014c: 	comiss	%xmm0, %xmm4
    0000014f: 	jbe	.Ltmp310 # Offset: 335
    00000151: 	xorps	DATAat0xa5e0(%rip), %xmm0
.Ltmp310:
    00000158: 	addl	$0x2, %eax
    0000015b: 	addss	%xmm0, %xmm1
    0000015f: 	cmpl	%eax, %r12d
    00000162: 	jle	.Ltmp308 # Offset: 354
    00000164: 	movss	0x8(%r13,%rdi), %xmm0
    0000016b: 	comiss	%xmm0, %xmm4
    0000016e: 	jbe	.Ltmp311 # Offset: 366
    00000170: 	xorps	DATAat0xa5e0(%rip), %xmm0
.Ltmp311:
    00000177: 	addss	%xmm0, %xmm1
.Ltmp308:
    0000017b: 	comiss	%xmm5, %xmm4
    0000017e: 	movaps	%xmm1, %xmm2
    00000181: 	andps	%xmm9, %xmm2
    00000185: 	cvtss2sd	%xmm2, %xmm2
    00000189: 	ja	.Ltmp312 # Offset: 393
.Ltmp316:
    0000018b: 	mulss	%xmm8, %xmm12
    00000190: 	comisd	DATAat0xa510(%rip), %xmm2
    00000198: 	movaps	%xmm1, %xmm0
    0000019b: 	subss	%xmm12, %xmm0
    000001a0: 	jbe	.Ltmp313 # Offset: 416
    000001a2: 	divss	%xmm1, %xmm0
.Ltmp313:
    000001a6: 	cvtss2sd	%xmm0, %xmm0
    000001aa: 	andpd	%xmm7, %xmm0
    000001ae: 	comisd	%xmm0, %xmm6
    000001b2: 	jbe	.Ltmp314 # Offset: 434
    000001b4: 	addl	$0x1, %r14d
    000001b8: 	cmpl	%edx, %r14d
    000001bb: 	jl	.Ltmp315 # Offset: 443
.Ltmp304:
    000001c1: 	callq	clock@PLT # Offset: 449
    000001c6: 	pxor	%xmm0, %xmm0
    000001ca: 	movq	0x8(%rsp), %rdi
    000001cf: 	movq	%rax, end_time(%rip)
    000001d6: 	subq	start_time(%rip), %rax
    000001dd: 	cvtsi2sd	%rax, %xmm0
    000001e2: 	divsd	DATAat0xa508(%rip), %xmm0
    000001ea: 	addq	$0x18, %rsp
    000001ee: 	popq	%rbx
    000001ef: 	popq	%rbp
    000001f0: 	popq	%r12
    000001f2: 	popq	%r13
    000001f4: 	popq	%r14
    000001f6: 	popq	%r15
    000001f8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 504
.Ltmp318:
    000001fd: 	pxor	%xmm2, %xmm2
    00000201: 	movaps	%xmm4, %xmm1
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp312:
    00000208: 	movaps	%xmm5, %xmm12
    0000020c: 	xorps	DATAat0xa5e0(%rip), %xmm12
    00000214: 	jmp	.Ltmp316 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp314:
    00000220: 	movl	current_test(%rip), %edx
    00000226: 	leaq	DATAat0xa4ca(%rip), %rsi
    0000022d: 	movl	$0x1, %edi
    00000232: 	xorl	%eax, %eax
    00000234: 	addl	$0x1, %r14d
    00000238: 	callq	__printf_chk@PLT # Offset: 568
    0000023d: 	movl	iterations(%rip), %edx
    00000243: 	cmpl	%edx, %r14d
    00000246: 	jge	.Ltmp304 # Offset: 582
    0000024c: 	pxor	%xmm5, %xmm5
    00000250: 	movq	DATAat0xa518(%rip), %rax
    00000257: 	movq	DATAat0xa5c0(%rip), %xmm7
    0000025f: 	pxor	%xmm4, %xmm4
    00000263: 	cvtsi2ssl	init_value(%rip), %xmm5
    0000026b: 	movss	DATAat0xa620(%rip), %xmm8
    00000274: 	movss	DATAat0xa5b0(%rip), %xmm9
    0000027d: 	movq	%rax, %xmm6
    00000282: 	movaps	%xmm5, %xmm12
    00000286: 	testl	%r12d, %r12d
    00000289: 	jg	.Ltmp317 # Offset: 649
.Ltmp305:
    0000028f: 	comiss	%xmm5, %xmm4
    00000292: 	ja	.Ltmp318 # Offset: 658
    00000298: 	movaps	%xmm5, %xmm1
    0000029b: 	movaps	%xmm4, %xmm0
    0000029e: 	mulss	%xmm8, %xmm1
    000002a3: 	subss	%xmm1, %xmm0
    000002a7: 	jmp	.Ltmp313 # Offset: 679
.Ltmp306:
    000002ac: 	xorl	%eax, %eax
    000002ae: 	movaps	%xmm4, %xmm1
    000002b1: 	jmp	.Ltmp319 # Offset: 689
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIf12abs_functor2IfEEvPT_iPKc"

Binary Function "_Z13test_constantIf12abs_functor6EvPT_iPKc" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x6ff0
  Size        : 0x270
  MaxSize     : 0x270
  Offset      : 0x6ff0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIf12abs_functor6EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp320 # Offset: 49
    00000037: 	pxor	%xmm5, %xmm5
    0000003b: 	movl	%r12d, %eax
    0000003e: 	movl	%r12d, %r15d
    00000041: 	xorl	%r14d, %r14d
    00000044: 	cvtsi2ssl	init_value(%rip), %xmm5
    0000004c: 	shrl	$0x2, %eax
    0000004f: 	movq	DATAat0xa5c0(%rip), %xmm7
    00000057: 	movsd	DATAat0xa518(%rip), %xmm6
    0000005f: 	subl	$0x1, %eax
    00000062: 	movaps	DATAat0xa5a0(%rip), %xmm3
    00000069: 	leal	-0x1(%r12), %ecx
    0000006e: 	andl	$-0x4, %r15d
    00000072: 	shlq	$0x4, %rax
    00000076: 	pxor	%xmm8, %xmm8
    0000007b: 	movss	DATAat0xa5b0(%rip), %xmm9
    00000084: 	leaq	0x10(%r13,%rax), %rbx
    00000089: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000090: 	movd	%xmm5, %edi
    00000094: 	movss	DATAat0xa620(%rip), %xmm5
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp327:
    000000a0: 	movl	$0x7fffffff, %eax
    000000a5: 	andl	%edi, %eax
    000000a7: 	movd	%eax, %xmm4
    000000ab: 	mulss	%xmm5, %xmm4
    000000af: 	testl	%r12d, %r12d
    000000b2: 	jle	.Ltmp321 # Offset: 178
    000000b8: 	cmpl	$0x2, %ecx
    000000bb: 	jbe	.Ltmp322 # Offset: 187
    000000c1: 	movq	%r13, %rax
    000000c4: 	movaps	%xmm8, %xmm1
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp323:
    000000d0: 	movups	(%rax), %xmm0
    000000d3: 	addq	$0x10, %rax
    000000d7: 	andps	%xmm3, %xmm0
    000000da: 	addss	%xmm0, %xmm1
    000000de: 	movaps	%xmm0, %xmm2
    000000e1: 	shufps	$0x55, %xmm0, %xmm2
    000000e5: 	addss	%xmm1, %xmm2
    000000e9: 	movaps	%xmm0, %xmm1
    000000ec: 	unpckhps	%xmm0, %xmm1
    000000ef: 	shufps	$0xff, %xmm0, %xmm0
    000000f3: 	addss	%xmm2, %xmm1
    000000f7: 	addss	%xmm0, %xmm1
    000000fb: 	cmpq	%rax, %rbx
    000000fe: 	jne	.Ltmp323 # Offset: 254
    00000100: 	movl	%r15d, %eax
    00000103: 	cmpl	%r12d, %r15d
    00000106: 	je	.Ltmp324 # Offset: 262
.Ltmp328:
    00000108: 	movslq	%eax, %r8
    0000010b: 	leaq	(,%r8,4), %r9
    00000113: 	movl	(%r13,%r8,4), %r8d
    00000118: 	andl	$0x7fffffff, %r8d
    0000011f: 	movd	%r8d, %xmm2
    00000124: 	leal	0x1(%rax), %r8d
    00000128: 	addss	%xmm2, %xmm1
    0000012c: 	cmpl	%r8d, %r12d
    0000012f: 	jle	.Ltmp324 # Offset: 303
    00000131: 	movl	0x4(%r13,%r9), %r8d
    00000136: 	addl	$0x2, %eax
    00000139: 	andl	$0x7fffffff, %r8d
    00000140: 	movd	%r8d, %xmm2
    00000145: 	addss	%xmm2, %xmm1
    00000149: 	cmpl	%eax, %r12d
    0000014c: 	jle	.Ltmp324 # Offset: 332
    0000014e: 	movl	0x8(%r13,%r9), %eax
    00000153: 	andl	$0x7fffffff, %eax
    00000158: 	movd	%eax, %xmm2
    0000015c: 	addss	%xmm2, %xmm1
.Ltmp324:
    00000160: 	movaps	%xmm1, %xmm2
    00000163: 	movaps	%xmm1, %xmm0
    00000166: 	andps	%xmm9, %xmm2
    0000016a: 	subss	%xmm4, %xmm0
    0000016e: 	cvtss2sd	%xmm2, %xmm2
    00000172: 	comisd	DATAat0xa510(%rip), %xmm2
    0000017a: 	jbe	.Ltmp325 # Offset: 378
    0000017c: 	divss	%xmm1, %xmm0
.Ltmp325:
    00000180: 	cvtss2sd	%xmm0, %xmm0
    00000184: 	andpd	%xmm7, %xmm0
    00000188: 	comisd	%xmm0, %xmm6
    0000018c: 	jbe	.Ltmp326 # Offset: 396
    0000018e: 	addl	$0x1, %r14d
    00000192: 	cmpl	%edx, %r14d
    00000195: 	jl	.Ltmp327 # Offset: 405
.Ltmp320:
    0000019b: 	callq	clock@PLT # Offset: 411
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	movq	0x8(%rsp), %rdi
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	subq	start_time(%rip), %rax
    000001b7: 	cvtsi2sd	%rax, %xmm0
    000001bc: 	divsd	DATAat0xa508(%rip), %xmm0
    000001c4: 	addq	$0x18, %rsp
    000001c8: 	popq	%rbx
    000001c9: 	popq	%rbp
    000001ca: 	popq	%r12
    000001cc: 	popq	%r13
    000001ce: 	popq	%r14
    000001d0: 	popq	%r15
    000001d2: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 466
    000001d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp326:
    000001e0: 	movl	current_test(%rip), %edx
    000001e6: 	movq	%rbp, %rsi
    000001e9: 	movl	$0x1, %edi
    000001ee: 	xorl	%eax, %eax
    000001f0: 	movl	%ecx, 0x4(%rsp)
    000001f4: 	addl	$0x1, %r14d
    000001f8: 	callq	__printf_chk@PLT # Offset: 504
    000001fd: 	movl	iterations(%rip), %edx
    00000203: 	cmpl	%edx, %r14d
    00000206: 	jge	.Ltmp320 # Offset: 518
    00000208: 	pxor	%xmm5, %xmm5
    0000020c: 	movq	DATAat0xa518(%rip), %rax
    00000213: 	movl	0x4(%rsp), %ecx
    00000217: 	pxor	%xmm8, %xmm8
    0000021c: 	cvtsi2ssl	init_value(%rip), %xmm5
    00000224: 	movaps	DATAat0xa5a0(%rip), %xmm3
    0000022b: 	movq	DATAat0xa5c0(%rip), %xmm7
    00000233: 	movss	DATAat0xa5b0(%rip), %xmm9
    0000023c: 	movq	%rax, %xmm6
    00000241: 	movd	%xmm5, %edi
    00000245: 	movss	DATAat0xa620(%rip), %xmm5
    0000024d: 	jmp	.Ltmp327 # Offset: 589
    00000252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp321:
    00000258: 	movaps	%xmm8, %xmm0
    0000025c: 	subss	%xmm4, %xmm0
    00000260: 	jmp	.Ltmp325 # Offset: 608
.Ltmp322:
    00000265: 	xorl	%eax, %eax
    00000267: 	movaps	%xmm8, %xmm1
    0000026b: 	jmp	.Ltmp328 # Offset: 619
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIf12abs_functor6EvPT_iPKc"

Binary Function "_Z13test_constantIf12abs_functor7EvPT_iPKc" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x7260
  Size        : 0x2e1
  MaxSize     : 0x2f0
  Offset      : 0x7260
  Section     : .text
  Orc Section : .local.text._Z13test_constantIf12abs_functor7EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp329 # Offset: 49
    00000037: 	movl	%r12d, %eax
    0000003a: 	pxor	%xmm13, %xmm13
    0000003f: 	movl	%r12d, %r15d
    00000042: 	xorl	%r14d, %r14d
    00000045: 	shrl	$0x2, %eax
    00000048: 	movss	DATAat0xa620(%rip), %xmm7
    00000050: 	cvtsi2ssl	init_value(%rip), %xmm13
    00000059: 	movq	DATAat0xa5c0(%rip), %xmm6
    00000061: 	subl	$0x1, %eax
    00000064: 	leal	-0x1(%r12), %ebp
    00000069: 	pxor	%xmm4, %xmm4
    0000006d: 	andl	$-0x4, %r15d
    00000071: 	shlq	$0x4, %rax
    00000075: 	movsd	DATAat0xa518(%rip), %xmm5
    0000007d: 	movsd	DATAat0xa510(%rip), %xmm9
    00000086: 	movss	DATAat0xa5b0(%rip), %xmm8
    0000008f: 	movaps	DATAat0xa5a0(%rip), %xmm3
    00000096: 	leaq	0x10(%r13,%rax), %rbx
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp340:
    000000a0: 	movaps	%xmm13, %xmm12
    000000a4: 	testl	%r12d, %r12d
    000000a7: 	jle	.Ltmp330 # Offset: 167
.Ltmp341:
    000000ad: 	cmpl	$0x2, %ebp
    000000b0: 	jbe	.Ltmp331 # Offset: 176
    000000b6: 	movq	%r13, %rax
    000000b9: 	movaps	%xmm4, %xmm10
    000000bd: 	pxor	%xmm2, %xmm2
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp332:
    000000c8: 	movups	(%rax), %xmm1
    000000cb: 	movaps	%xmm2, %xmm0
    000000ce: 	addq	$0x10, %rax
    000000d2: 	cmpltps	%xmm1, %xmm0
    000000d6: 	movaps	%xmm1, %xmm11
    000000da: 	andps	%xmm3, %xmm11
    000000de: 	andps	%xmm0, %xmm1
    000000e1: 	andnps	%xmm11, %xmm0
    000000e5: 	orps	%xmm1, %xmm0
    000000e8: 	movaps	%xmm0, %xmm1
    000000eb: 	addss	%xmm10, %xmm1
    000000f0: 	movaps	%xmm0, %xmm10
    000000f4: 	shufps	$0x55, %xmm0, %xmm10
    000000f9: 	addss	%xmm10, %xmm1
    000000fe: 	movaps	%xmm0, %xmm10
    00000102: 	unpckhps	%xmm0, %xmm10
    00000106: 	shufps	$0xff, %xmm0, %xmm0
    0000010a: 	addss	%xmm10, %xmm1
    0000010f: 	addss	%xmm0, %xmm1
    00000113: 	movaps	%xmm1, %xmm10
    00000117: 	cmpq	%rbx, %rax
    0000011a: 	jne	.Ltmp332 # Offset: 282
    0000011c: 	movl	%r15d, %eax
    0000011f: 	cmpl	%r12d, %r15d
    00000122: 	je	.Ltmp333 # Offset: 290
.Ltmp344:
    00000124: 	movslq	%eax, %rdi
    00000127: 	movss	(%r13,%rdi,4), %xmm0
    0000012e: 	leaq	(,%rdi,4), %rsi
    00000136: 	comiss	%xmm4, %xmm0
    00000139: 	ja	.Ltmp334 # Offset: 313
    0000013b: 	movd	%xmm0, %ecx
    0000013f: 	andl	$0x7fffffff, %ecx
    00000145: 	movd	%ecx, %xmm0
.Ltmp334:
    00000149: 	leal	0x1(%rax), %edi
    0000014c: 	addss	%xmm0, %xmm10
    00000151: 	cmpl	%edi, %r12d
    00000154: 	jle	.Ltmp333 # Offset: 340
    00000156: 	movss	0x4(%r13,%rsi), %xmm0
    0000015d: 	comiss	%xmm4, %xmm0
    00000160: 	ja	.Ltmp335 # Offset: 352
    00000162: 	movd	%xmm0, %ecx
    00000166: 	andl	$0x7fffffff, %ecx
    0000016c: 	movd	%ecx, %xmm0
.Ltmp335:
    00000170: 	addl	$0x2, %eax
    00000173: 	addss	%xmm0, %xmm10
    00000178: 	cmpl	%eax, %r12d
    0000017b: 	jle	.Ltmp333 # Offset: 379
    0000017d: 	movss	0x8(%r13,%rsi), %xmm0
    00000184: 	comiss	%xmm4, %xmm0
    00000187: 	ja	.Ltmp336 # Offset: 391
    00000189: 	movd	%xmm0, %eax
    0000018d: 	andl	$0x7fffffff, %eax
    00000192: 	movd	%eax, %xmm0
.Ltmp336:
    00000196: 	addss	%xmm0, %xmm10
.Ltmp333:
    0000019b: 	comiss	%xmm4, %xmm13
    0000019f: 	movaps	%xmm10, %xmm1
    000001a3: 	andps	%xmm8, %xmm1
    000001a7: 	cvtss2sd	%xmm1, %xmm1
    000001ab: 	ja	.Ltmp337 # Offset: 427
.Ltmp343:
    000001ad: 	movd	%xmm13, %eax
    000001b2: 	andl	$0x7fffffff, %eax
    000001b7: 	movd	%eax, %xmm12
.Ltmp337:
    000001bc: 	mulss	%xmm7, %xmm12
    000001c1: 	comisd	%xmm9, %xmm1
    000001c6: 	movaps	%xmm10, %xmm0
    000001ca: 	subss	%xmm12, %xmm0
    000001cf: 	jbe	.Ltmp338 # Offset: 463
    000001d1: 	divss	%xmm10, %xmm0
.Ltmp338:
    000001d6: 	cvtss2sd	%xmm0, %xmm0
    000001da: 	andpd	%xmm6, %xmm0
    000001de: 	comisd	%xmm0, %xmm5
    000001e2: 	jbe	.Ltmp339 # Offset: 482
    000001e4: 	addl	$0x1, %r14d
    000001e8: 	cmpl	%edx, %r14d
    000001eb: 	jl	.Ltmp340 # Offset: 491
.Ltmp329:
    000001f1: 	callq	clock@PLT # Offset: 497
    000001f6: 	pxor	%xmm0, %xmm0
    000001fa: 	movq	0x8(%rsp), %rdi
    000001ff: 	movq	%rax, end_time(%rip)
    00000206: 	subq	start_time(%rip), %rax
    0000020d: 	cvtsi2sd	%rax, %xmm0
    00000212: 	divsd	DATAat0xa508(%rip), %xmm0
    0000021a: 	addq	$0x18, %rsp
    0000021e: 	popq	%rbx
    0000021f: 	popq	%rbp
    00000220: 	popq	%r12
    00000222: 	popq	%r13
    00000224: 	popq	%r14
    00000226: 	popq	%r15
    00000228: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 552
    0000022d: 	nopl	(%rax) # Size: 3
.Ltmp339:
    00000230: 	movl	current_test(%rip), %edx
    00000236: 	leaq	DATAat0xa4ca(%rip), %rsi
    0000023d: 	movl	$0x1, %edi
    00000242: 	xorl	%eax, %eax
    00000244: 	addl	$0x1, %r14d
    00000248: 	callq	__printf_chk@PLT # Offset: 584
    0000024d: 	movl	iterations(%rip), %edx
    00000253: 	cmpl	%edx, %r14d
    00000256: 	jge	.Ltmp329 # Offset: 598
    00000258: 	pxor	%xmm13, %xmm13
    0000025d: 	movq	DATAat0xa518(%rip), %rax
    00000264: 	movq	DATAat0xa5c0(%rip), %xmm6
    0000026c: 	pxor	%xmm4, %xmm4
    00000270: 	cvtsi2ssl	init_value(%rip), %xmm13
    00000279: 	movaps	DATAat0xa5a0(%rip), %xmm3
    00000280: 	movss	DATAat0xa620(%rip), %xmm7
    00000288: 	movss	DATAat0xa5b0(%rip), %xmm8
    00000291: 	movq	%rax, %xmm5
    00000296: 	movq	DATAat0xa510(%rip), %rax
    0000029d: 	movq	%rax, %xmm9
    000002a2: 	movaps	%xmm13, %xmm12
    000002a6: 	testl	%r12d, %r12d
    000002a9: 	jg	.Ltmp341 # Offset: 681
.Ltmp330:
    000002af: 	comiss	%xmm4, %xmm13
    000002b3: 	ja	.Ltmp342 # Offset: 691
    000002b5: 	pxor	%xmm1, %xmm1
    000002b9: 	movaps	%xmm4, %xmm10
    000002bd: 	jmp	.Ltmp343 # Offset: 701
.Ltmp331:
    000002c2: 	xorl	%eax, %eax
    000002c4: 	movaps	%xmm4, %xmm10
    000002c8: 	jmp	.Ltmp344 # Offset: 712
.Ltmp342:
    000002cd: 	movaps	%xmm13, %xmm1
    000002d1: 	movaps	%xmm4, %xmm0
    000002d4: 	mulss	%xmm7, %xmm1
    000002d8: 	subss	%xmm1, %xmm0
    000002dc: 	jmp	.Ltmp338 # Offset: 732
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIf12abs_functor7EvPT_iPKc"

Binary Function "_Z13test_constantIf12abs_functor8IdEEvPT_iPKc" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x7550
  Size        : 0x1ee
  MaxSize     : 0x1f0
  Offset      : 0x7550
  Section     : .text
  Orc Section : .local.text._Z13test_constantIf12abs_functor8IdEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%esi, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdi, %r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdx, %rbp
    00000014: 	pushq	%rbx
    00000015: 	callq	clock@PLT # Offset: 21
    0000001a: 	movl	iterations(%rip), %edx
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	testl	%edx, %edx
    00000029: 	jle	.Ltmp345 # Offset: 41
    0000002f: 	pxor	%xmm9, %xmm9
    00000034: 	leal	-0x1(%r14), %eax
    00000038: 	pxor	%xmm3, %xmm3
    0000003c: 	xorl	%r12d, %r12d
    0000003f: 	cvtsi2ssl	init_value(%rip), %xmm9
    00000048: 	movq	DATAat0xa5c0(%rip), %xmm7
    00000050: 	movsd	DATAat0xa518(%rip), %xmm6
    00000058: 	leaq	0x4(%r13,%rax,4), %rbx
    0000005d: 	movq	DATAat0xa5f0(%rip), %xmm5
    00000065: 	movss	DATAat0xa5b0(%rip), %xmm8
    0000006e: 	nop # Size: 2
.Ltmp352:
    00000070: 	pxor	%xmm4, %xmm4
    00000074: 	movq	%r13, %rax
    00000077: 	movaps	%xmm3, %xmm0
    0000007a: 	cvtss2sd	%xmm9, %xmm4
    0000007f: 	testl	%r14d, %r14d
    00000082: 	jle	.Ltmp346 # Offset: 130
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp348:
    00000090: 	movss	(%rax), %xmm1
    00000094: 	pxor	%xmm2, %xmm2
    00000098: 	comiss	%xmm3, %xmm1
    0000009b: 	cvtss2sd	%xmm1, %xmm2
    0000009f: 	jae	.Ltmp347 # Offset: 159
    000000a1: 	xorpd	%xmm5, %xmm2
.Ltmp347:
    000000a5: 	cvtss2sd	%xmm0, %xmm0
    000000a9: 	addsd	%xmm2, %xmm0
    000000ad: 	addq	$0x4, %rax
    000000b1: 	cvtsd2ss	%xmm0, %xmm0
    000000b5: 	cmpq	%rax, %rbx
    000000b8: 	jne	.Ltmp348 # Offset: 184
    000000ba: 	comiss	%xmm3, %xmm9
    000000be: 	movaps	%xmm0, %xmm2
    000000c1: 	andps	%xmm8, %xmm2
    000000c5: 	cvtss2sd	%xmm2, %xmm2
    000000c9: 	jb	.Ltmp349 # Offset: 201
.Ltmp353:
    000000cb: 	mulsd	DATAat0xa520(%rip), %xmm4
    000000d3: 	comisd	DATAat0xa510(%rip), %xmm2
    000000db: 	movaps	%xmm0, %xmm1
    000000de: 	cvtsd2ss	%xmm4, %xmm4
    000000e2: 	subss	%xmm4, %xmm1
    000000e6: 	jbe	.Ltmp350 # Offset: 230
    000000e8: 	divss	%xmm0, %xmm1
.Ltmp350:
    000000ec: 	cvtss2sd	%xmm1, %xmm1
    000000f0: 	andpd	%xmm7, %xmm1
    000000f4: 	comisd	%xmm1, %xmm6
    000000f8: 	jbe	.Ltmp351 # Offset: 248
    000000fa: 	addl	$0x1, %r12d
    000000fe: 	cmpl	%edx, %r12d
    00000101: 	jl	.Ltmp352 # Offset: 257
.Ltmp345:
    00000107: 	callq	clock@PLT # Offset: 263
    0000010c: 	popq	%rbx
    0000010d: 	pxor	%xmm0, %xmm0
    00000111: 	movq	%rbp, %rdi
    00000114: 	movq	%rax, end_time(%rip)
    0000011b: 	popq	%rbp
    0000011c: 	subq	start_time(%rip), %rax
    00000123: 	popq	%r12
    00000125: 	popq	%r13
    00000127: 	cvtsi2sd	%rax, %xmm0
    0000012c: 	popq	%r14
    0000012e: 	divsd	DATAat0xa508(%rip), %xmm0
    00000136: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 310
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp349:
    00000140: 	xorpd	DATAat0xa5f0(%rip), %xmm4
    00000148: 	jmp	.Ltmp353 # Offset: 328
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp351:
    00000150: 	movl	current_test(%rip), %edx
    00000156: 	leaq	DATAat0xa4ca(%rip), %rsi
    0000015d: 	movl	$0x1, %edi
    00000162: 	xorl	%eax, %eax
    00000164: 	addl	$0x1, %r12d
    00000168: 	callq	__printf_chk@PLT # Offset: 360
    0000016d: 	movl	iterations(%rip), %edx
    00000173: 	cmpl	%edx, %r12d
    00000176: 	jge	.Ltmp345 # Offset: 374
    00000178: 	pxor	%xmm9, %xmm9
    0000017d: 	movq	DATAat0xa518(%rip), %rax
    00000184: 	pxor	%xmm3, %xmm3
    00000188: 	pxor	%xmm4, %xmm4
    0000018c: 	cvtsi2ssl	init_value(%rip), %xmm9
    00000195: 	movaps	%xmm3, %xmm0
    00000198: 	movq	DATAat0xa5c0(%rip), %xmm7
    000001a0: 	movq	DATAat0xa5f0(%rip), %xmm5
    000001a8: 	movss	DATAat0xa5b0(%rip), %xmm8
    000001b1: 	movq	%rax, %xmm6
    000001b6: 	movq	%r13, %rax
    000001b9: 	cvtss2sd	%xmm9, %xmm4
    000001be: 	testl	%r14d, %r14d
    000001c1: 	jg	.Ltmp348 # Offset: 449
.Ltmp346:
    000001c7: 	comiss	%xmm3, %xmm9
    000001cb: 	pxor	%xmm2, %xmm2
    000001cf: 	jb	.Ltmp349 # Offset: 463
    000001d5: 	movss	DATAat0xa620(%rip), %xmm0
    000001dd: 	movaps	%xmm3, %xmm1
    000001e0: 	mulss	%xmm9, %xmm0
    000001e5: 	subss	%xmm0, %xmm1
    000001e9: 	jmp	.Ltmp350 # Offset: 489
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIf12abs_functor8IdEEvPT_iPKc"

Binary Function "_Z13test_constantIf12abs_functor9IdEEvPT_iPKc" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x7740
  Size        : 0x1ee
  MaxSize     : 0x1f0
  Offset      : 0x7740
  Section     : .text
  Orc Section : .local.text._Z13test_constantIf12abs_functor9IdEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%esi, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdi, %r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdx, %rbp
    00000014: 	pushq	%rbx
    00000015: 	callq	clock@PLT # Offset: 21
    0000001a: 	movl	iterations(%rip), %edx
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	testl	%edx, %edx
    00000029: 	jle	.Ltmp354 # Offset: 41
    0000002f: 	pxor	%xmm9, %xmm9
    00000034: 	leal	-0x1(%r14), %eax
    00000038: 	pxor	%xmm3, %xmm3
    0000003c: 	xorl	%r12d, %r12d
    0000003f: 	cvtsi2ssl	init_value(%rip), %xmm9
    00000048: 	movq	DATAat0xa5c0(%rip), %xmm7
    00000050: 	movsd	DATAat0xa518(%rip), %xmm6
    00000058: 	leaq	0x4(%r13,%rax,4), %rbx
    0000005d: 	movq	DATAat0xa5f0(%rip), %xmm5
    00000065: 	movss	DATAat0xa5b0(%rip), %xmm8
    0000006e: 	nop # Size: 2
.Ltmp361:
    00000070: 	pxor	%xmm4, %xmm4
    00000074: 	movq	%r13, %rax
    00000077: 	movaps	%xmm3, %xmm0
    0000007a: 	cvtss2sd	%xmm9, %xmm4
    0000007f: 	testl	%r14d, %r14d
    00000082: 	jle	.Ltmp355 # Offset: 130
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp357:
    00000090: 	movss	(%rax), %xmm1
    00000094: 	pxor	%xmm2, %xmm2
    00000098: 	comiss	%xmm3, %xmm1
    0000009b: 	cvtss2sd	%xmm1, %xmm2
    0000009f: 	jae	.Ltmp356 # Offset: 159
    000000a1: 	xorpd	%xmm5, %xmm2
.Ltmp356:
    000000a5: 	cvtss2sd	%xmm0, %xmm0
    000000a9: 	addsd	%xmm2, %xmm0
    000000ad: 	addq	$0x4, %rax
    000000b1: 	cvtsd2ss	%xmm0, %xmm0
    000000b5: 	cmpq	%rax, %rbx
    000000b8: 	jne	.Ltmp357 # Offset: 184
    000000ba: 	comiss	%xmm3, %xmm9
    000000be: 	movaps	%xmm0, %xmm2
    000000c1: 	andps	%xmm8, %xmm2
    000000c5: 	cvtss2sd	%xmm2, %xmm2
    000000c9: 	jb	.Ltmp358 # Offset: 201
.Ltmp362:
    000000cb: 	mulsd	DATAat0xa520(%rip), %xmm4
    000000d3: 	comisd	DATAat0xa510(%rip), %xmm2
    000000db: 	movaps	%xmm0, %xmm1
    000000de: 	cvtsd2ss	%xmm4, %xmm4
    000000e2: 	subss	%xmm4, %xmm1
    000000e6: 	jbe	.Ltmp359 # Offset: 230
    000000e8: 	divss	%xmm0, %xmm1
.Ltmp359:
    000000ec: 	cvtss2sd	%xmm1, %xmm1
    000000f0: 	andpd	%xmm7, %xmm1
    000000f4: 	comisd	%xmm1, %xmm6
    000000f8: 	jbe	.Ltmp360 # Offset: 248
    000000fa: 	addl	$0x1, %r12d
    000000fe: 	cmpl	%edx, %r12d
    00000101: 	jl	.Ltmp361 # Offset: 257
.Ltmp354:
    00000107: 	callq	clock@PLT # Offset: 263
    0000010c: 	popq	%rbx
    0000010d: 	pxor	%xmm0, %xmm0
    00000111: 	movq	%rbp, %rdi
    00000114: 	movq	%rax, end_time(%rip)
    0000011b: 	popq	%rbp
    0000011c: 	subq	start_time(%rip), %rax
    00000123: 	popq	%r12
    00000125: 	popq	%r13
    00000127: 	cvtsi2sd	%rax, %xmm0
    0000012c: 	popq	%r14
    0000012e: 	divsd	DATAat0xa508(%rip), %xmm0
    00000136: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 310
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp358:
    00000140: 	xorpd	DATAat0xa5f0(%rip), %xmm4
    00000148: 	jmp	.Ltmp362 # Offset: 328
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp360:
    00000150: 	movl	current_test(%rip), %edx
    00000156: 	leaq	DATAat0xa4ca(%rip), %rsi
    0000015d: 	movl	$0x1, %edi
    00000162: 	xorl	%eax, %eax
    00000164: 	addl	$0x1, %r12d
    00000168: 	callq	__printf_chk@PLT # Offset: 360
    0000016d: 	movl	iterations(%rip), %edx
    00000173: 	cmpl	%edx, %r12d
    00000176: 	jge	.Ltmp354 # Offset: 374
    00000178: 	pxor	%xmm9, %xmm9
    0000017d: 	movq	DATAat0xa518(%rip), %rax
    00000184: 	pxor	%xmm3, %xmm3
    00000188: 	pxor	%xmm4, %xmm4
    0000018c: 	cvtsi2ssl	init_value(%rip), %xmm9
    00000195: 	movaps	%xmm3, %xmm0
    00000198: 	movq	DATAat0xa5c0(%rip), %xmm7
    000001a0: 	movq	DATAat0xa5f0(%rip), %xmm5
    000001a8: 	movss	DATAat0xa5b0(%rip), %xmm8
    000001b1: 	movq	%rax, %xmm6
    000001b6: 	movq	%r13, %rax
    000001b9: 	cvtss2sd	%xmm9, %xmm4
    000001be: 	testl	%r14d, %r14d
    000001c1: 	jg	.Ltmp357 # Offset: 449
.Ltmp355:
    000001c7: 	comiss	%xmm3, %xmm9
    000001cb: 	pxor	%xmm2, %xmm2
    000001cf: 	jb	.Ltmp358 # Offset: 463
    000001d5: 	movss	DATAat0xa620(%rip), %xmm0
    000001dd: 	movaps	%xmm3, %xmm1
    000001e0: 	mulss	%xmm9, %xmm0
    000001e5: 	subss	%xmm0, %xmm1
    000001e9: 	jmp	.Ltmp359 # Offset: 489
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIf12abs_functor9IdEEvPT_iPKc"

Binary Function "_Z13test_constantId12fabs_functorIdEEvPT_iPKc" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x7930
  Size        : 0x1ea
  MaxSize     : 0x1f0
  Offset      : 0x7930
  Section     : .text
  Orc Section : .local.text._Z13test_constantId12fabs_functorIdEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp363 # Offset: 49
    00000037: 	movl	%r13d, %eax
    0000003a: 	pxor	%xmm9, %xmm9
    0000003f: 	movl	%r13d, %r15d
    00000042: 	xorl	%r14d, %r14d
    00000045: 	shrl	%eax
    00000047: 	movq	DATAat0xa5c0(%rip), %xmm3
    0000004f: 	cvtsi2sdl	init_value(%rip), %xmm9
    00000058: 	movsd	DATAat0xa530(%rip), %xmm7
    00000060: 	subl	$0x1, %eax
    00000063: 	movsd	DATAat0xa520(%rip), %xmm6
    0000006b: 	andl	$-0x2, %r15d
    0000006f: 	movapd	DATAat0xa600(%rip), %xmm4
    00000077: 	shlq	$0x4, %rax
    0000007b: 	pxor	%xmm8, %xmm8
    00000080: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000087: 	leaq	0x10(%rbx,%rax), %r12
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp370:
    00000090: 	movapd	%xmm9, %xmm5
    00000095: 	andpd	%xmm3, %xmm5
    00000099: 	mulsd	%xmm6, %xmm5
    0000009d: 	testl	%r13d, %r13d
    000000a0: 	jle	.Ltmp364 # Offset: 160
    000000a6: 	cmpl	$0x1, %r13d
    000000aa: 	je	.Ltmp365 # Offset: 170
    000000b0: 	movq	%rbx, %rax
    000000b3: 	movapd	%xmm8, %xmm0
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp366:
    000000c0: 	movupd	(%rax), %xmm1
    000000c4: 	addq	$0x10, %rax
    000000c8: 	andpd	%xmm4, %xmm1
    000000cc: 	addsd	%xmm1, %xmm0
    000000d0: 	unpckhpd	%xmm1, %xmm1
    000000d4: 	addsd	%xmm1, %xmm0
    000000d8: 	cmpq	%rax, %r12
    000000db: 	jne	.Ltmp366 # Offset: 219
    000000dd: 	movslq	%r15d, %rax
    000000e0: 	cmpl	%r13d, %r15d
    000000e3: 	je	.Ltmp367 # Offset: 227
.Ltmp371:
    000000e5: 	movsd	(%rbx,%rax,8), %xmm1
    000000ea: 	andpd	%xmm3, %xmm1
    000000ee: 	addsd	%xmm1, %xmm0
.Ltmp367:
    000000f2: 	movapd	%xmm0, %xmm2
    000000f6: 	movapd	%xmm0, %xmm1
    000000fa: 	andpd	%xmm3, %xmm2
    000000fe: 	comisd	DATAat0xa528(%rip), %xmm2
    00000106: 	subsd	%xmm5, %xmm1
    0000010a: 	jbe	.Ltmp368 # Offset: 266
    0000010c: 	divsd	%xmm0, %xmm1
.Ltmp368:
    00000110: 	andpd	%xmm3, %xmm1
    00000114: 	comisd	%xmm1, %xmm7
    00000118: 	jbe	.Ltmp369 # Offset: 280
    0000011a: 	addl	$0x1, %r14d
    0000011e: 	cmpl	%edx, %r14d
    00000121: 	jl	.Ltmp370 # Offset: 289
.Ltmp363:
    00000127: 	callq	clock@PLT # Offset: 295
    0000012c: 	pxor	%xmm0, %xmm0
    00000130: 	movq	0x8(%rsp), %rdi
    00000135: 	movq	%rax, end_time(%rip)
    0000013c: 	subq	start_time(%rip), %rax
    00000143: 	cvtsi2sd	%rax, %xmm0
    00000148: 	divsd	DATAat0xa508(%rip), %xmm0
    00000150: 	addq	$0x18, %rsp
    00000154: 	popq	%rbx
    00000155: 	popq	%rbp
    00000156: 	popq	%r12
    00000158: 	popq	%r13
    0000015a: 	popq	%r14
    0000015c: 	popq	%r15
    0000015e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 350
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp369:
    00000168: 	movl	current_test(%rip), %edx
    0000016e: 	movq	%rbp, %rsi
    00000171: 	movl	$0x1, %edi
    00000176: 	xorl	%eax, %eax
    00000178: 	addl	$0x1, %r14d
    0000017c: 	callq	__printf_chk@PLT # Offset: 380
    00000181: 	movl	iterations(%rip), %edx
    00000187: 	cmpl	%edx, %r14d
    0000018a: 	jge	.Ltmp363 # Offset: 394
    0000018c: 	movq	DATAat0xa520(%rip), %rax
    00000193: 	pxor	%xmm9, %xmm9
    00000198: 	movq	DATAat0xa5c0(%rip), %xmm3
    000001a0: 	pxor	%xmm8, %xmm8
    000001a5: 	cvtsi2sdl	init_value(%rip), %xmm9
    000001ae: 	movapd	DATAat0xa600(%rip), %xmm4
    000001b6: 	movq	%rax, %xmm6
    000001bb: 	movq	DATAat0xa530(%rip), %rax
    000001c2: 	movq	%rax, %xmm7
    000001c7: 	jmp	.Ltmp370 # Offset: 455
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp364:
    000001d0: 	movapd	%xmm8, %xmm1
    000001d5: 	subsd	%xmm5, %xmm1
    000001d9: 	jmp	.Ltmp368 # Offset: 473
.Ltmp365:
    000001de: 	xorl	%eax, %eax
    000001e0: 	movapd	%xmm8, %xmm0
    000001e5: 	jmp	.Ltmp371 # Offset: 485
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantId12fabs_functorIdEEvPT_iPKc"

Binary Function "_Z13test_constantId15abs_functor_stdIdEEvPT_iPKc" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x7b20
  Size        : 0x1ea
  MaxSize     : 0x1f0
  Offset      : 0x7b20
  Section     : .text
  Orc Section : .local.text._Z13test_constantId15abs_functor_stdIdEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp372 # Offset: 49
    00000037: 	movl	%r13d, %eax
    0000003a: 	pxor	%xmm9, %xmm9
    0000003f: 	movl	%r13d, %r15d
    00000042: 	xorl	%r14d, %r14d
    00000045: 	shrl	%eax
    00000047: 	movq	DATAat0xa5c0(%rip), %xmm3
    0000004f: 	cvtsi2sdl	init_value(%rip), %xmm9
    00000058: 	movsd	DATAat0xa530(%rip), %xmm7
    00000060: 	subl	$0x1, %eax
    00000063: 	movsd	DATAat0xa520(%rip), %xmm6
    0000006b: 	andl	$-0x2, %r15d
    0000006f: 	movapd	DATAat0xa600(%rip), %xmm4
    00000077: 	shlq	$0x4, %rax
    0000007b: 	pxor	%xmm8, %xmm8
    00000080: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000087: 	leaq	0x10(%rbx,%rax), %r12
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp379:
    00000090: 	movapd	%xmm9, %xmm5
    00000095: 	andpd	%xmm3, %xmm5
    00000099: 	mulsd	%xmm6, %xmm5
    0000009d: 	testl	%r13d, %r13d
    000000a0: 	jle	.Ltmp373 # Offset: 160
    000000a6: 	cmpl	$0x1, %r13d
    000000aa: 	je	.Ltmp374 # Offset: 170
    000000b0: 	movq	%rbx, %rax
    000000b3: 	movapd	%xmm8, %xmm0
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp375:
    000000c0: 	movupd	(%rax), %xmm1
    000000c4: 	addq	$0x10, %rax
    000000c8: 	andpd	%xmm4, %xmm1
    000000cc: 	addsd	%xmm1, %xmm0
    000000d0: 	unpckhpd	%xmm1, %xmm1
    000000d4: 	addsd	%xmm1, %xmm0
    000000d8: 	cmpq	%rax, %r12
    000000db: 	jne	.Ltmp375 # Offset: 219
    000000dd: 	movslq	%r15d, %rax
    000000e0: 	cmpl	%r13d, %r15d
    000000e3: 	je	.Ltmp376 # Offset: 227
.Ltmp380:
    000000e5: 	movsd	(%rbx,%rax,8), %xmm1
    000000ea: 	andpd	%xmm3, %xmm1
    000000ee: 	addsd	%xmm1, %xmm0
.Ltmp376:
    000000f2: 	movapd	%xmm0, %xmm2
    000000f6: 	movapd	%xmm0, %xmm1
    000000fa: 	andpd	%xmm3, %xmm2
    000000fe: 	comisd	DATAat0xa528(%rip), %xmm2
    00000106: 	subsd	%xmm5, %xmm1
    0000010a: 	jbe	.Ltmp377 # Offset: 266
    0000010c: 	divsd	%xmm0, %xmm1
.Ltmp377:
    00000110: 	andpd	%xmm3, %xmm1
    00000114: 	comisd	%xmm1, %xmm7
    00000118: 	jbe	.Ltmp378 # Offset: 280
    0000011a: 	addl	$0x1, %r14d
    0000011e: 	cmpl	%edx, %r14d
    00000121: 	jl	.Ltmp379 # Offset: 289
.Ltmp372:
    00000127: 	callq	clock@PLT # Offset: 295
    0000012c: 	pxor	%xmm0, %xmm0
    00000130: 	movq	0x8(%rsp), %rdi
    00000135: 	movq	%rax, end_time(%rip)
    0000013c: 	subq	start_time(%rip), %rax
    00000143: 	cvtsi2sd	%rax, %xmm0
    00000148: 	divsd	DATAat0xa508(%rip), %xmm0
    00000150: 	addq	$0x18, %rsp
    00000154: 	popq	%rbx
    00000155: 	popq	%rbp
    00000156: 	popq	%r12
    00000158: 	popq	%r13
    0000015a: 	popq	%r14
    0000015c: 	popq	%r15
    0000015e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 350
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp378:
    00000168: 	movl	current_test(%rip), %edx
    0000016e: 	movq	%rbp, %rsi
    00000171: 	movl	$0x1, %edi
    00000176: 	xorl	%eax, %eax
    00000178: 	addl	$0x1, %r14d
    0000017c: 	callq	__printf_chk@PLT # Offset: 380
    00000181: 	movl	iterations(%rip), %edx
    00000187: 	cmpl	%edx, %r14d
    0000018a: 	jge	.Ltmp372 # Offset: 394
    0000018c: 	movq	DATAat0xa520(%rip), %rax
    00000193: 	pxor	%xmm9, %xmm9
    00000198: 	movq	DATAat0xa5c0(%rip), %xmm3
    000001a0: 	pxor	%xmm8, %xmm8
    000001a5: 	cvtsi2sdl	init_value(%rip), %xmm9
    000001ae: 	movapd	DATAat0xa600(%rip), %xmm4
    000001b6: 	movq	%rax, %xmm6
    000001bb: 	movq	DATAat0xa530(%rip), %rax
    000001c2: 	movq	%rax, %xmm7
    000001c7: 	jmp	.Ltmp379 # Offset: 455
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp373:
    000001d0: 	movapd	%xmm8, %xmm1
    000001d5: 	subsd	%xmm5, %xmm1
    000001d9: 	jmp	.Ltmp377 # Offset: 473
.Ltmp374:
    000001de: 	xorl	%eax, %eax
    000001e0: 	movapd	%xmm8, %xmm0
    000001e5: 	jmp	.Ltmp380 # Offset: 485
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantId15abs_functor_stdIdEEvPT_iPKc"

Binary Function "_Z13test_constantId12abs_functor1IdEEvPT_iPKc" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x7d10
  Size        : 0x25b
  MaxSize     : 0x260
  Offset      : 0x7d10
  Section     : .text
  Orc Section : .local.text._Z13test_constantId12abs_functor1IdEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %ecx
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%ecx, %ecx
    0000002f: 	jle	.Ltmp381 # Offset: 47
    00000035: 	movl	%r13d, %eax
    00000038: 	movl	%r13d, %r15d
    0000003b: 	movl	init_value(%rip), %edx
    00000041: 	xorl	%r14d, %r14d
    00000044: 	shrl	%eax
    00000046: 	movq	DATAat0xa5c0(%rip), %xmm6
    0000004e: 	movsd	DATAat0xa520(%rip), %xmm8
    00000057: 	andl	$-0x2, %r15d
    0000005b: 	subl	$0x1, %eax
    0000005e: 	movsd	DATAat0xa530(%rip), %xmm7
    00000066: 	pxor	%xmm3, %xmm3
    0000006a: 	movsd	DATAat0xa528(%rip), %xmm9
    00000073: 	shlq	$0x4, %rax
    00000077: 	movq	DATAat0xa5f0(%rip), %xmm5
    0000007f: 	movapd	DATAat0xa610(%rip), %xmm4
    00000087: 	leaq	0x10(%rbx,%rax), %r12
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp390:
    00000090: 	pxor	%xmm12, %xmm12
    00000095: 	cvtsi2sd	%edx, %xmm12
    0000009a: 	testl	%r13d, %r13d
    0000009d: 	jle	.Ltmp382 # Offset: 157
.Ltmp392:
    000000a3: 	cmpl	$0x1, %r13d
    000000a7: 	je	.Ltmp383 # Offset: 167
    000000ad: 	movq	%rbx, %rax
    000000b0: 	movapd	%xmm3, %xmm1
    000000b4: 	pxor	%xmm10, %xmm10
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp384:
    000000c0: 	movupd	(%rax), %xmm11
    000000c5: 	addq	$0x10, %rax
    000000c9: 	movapd	%xmm11, %xmm0
    000000ce: 	movapd	%xmm11, %xmm2
    000000d3: 	cmpltpd	%xmm10, %xmm0
    000000d9: 	xorpd	%xmm4, %xmm2
    000000dd: 	andpd	%xmm0, %xmm2
    000000e1: 	andnpd	%xmm11, %xmm0
    000000e6: 	orpd	%xmm2, %xmm0
    000000ea: 	addsd	%xmm0, %xmm1
    000000ee: 	unpckhpd	%xmm0, %xmm0
    000000f2: 	addsd	%xmm0, %xmm1
    000000f6: 	cmpq	%rax, %r12
    000000f9: 	jne	.Ltmp384 # Offset: 249
    000000fb: 	movslq	%r15d, %rax
    000000fe: 	cmpl	%r15d, %r13d
    00000101: 	je	.Ltmp385 # Offset: 257
.Ltmp394:
    00000103: 	movsd	(%rbx,%rax,8), %xmm0
    00000108: 	comisd	%xmm0, %xmm3
    0000010c: 	jbe	.Ltmp386 # Offset: 268
    0000010e: 	xorpd	%xmm5, %xmm0
.Ltmp386:
    00000112: 	addsd	%xmm0, %xmm1
.Ltmp385:
    00000116: 	movapd	%xmm1, %xmm2
    0000011a: 	andpd	%xmm6, %xmm2
    0000011e: 	testl	%edx, %edx
    00000120: 	js	.Ltmp387 # Offset: 288
.Ltmp391:
    00000122: 	mulsd	%xmm8, %xmm12
    00000127: 	comisd	%xmm9, %xmm2
    0000012c: 	movapd	%xmm1, %xmm0
    00000130: 	subsd	%xmm12, %xmm0
    00000135: 	jbe	.Ltmp388 # Offset: 309
    00000137: 	divsd	%xmm1, %xmm0
.Ltmp388:
    0000013b: 	andpd	%xmm6, %xmm0
    0000013f: 	comisd	%xmm0, %xmm7
    00000143: 	jbe	.Ltmp389 # Offset: 323
    00000145: 	addl	$0x1, %r14d
    00000149: 	cmpl	%ecx, %r14d
    0000014c: 	jl	.Ltmp390 # Offset: 332
.Ltmp381:
    00000152: 	callq	clock@PLT # Offset: 338
    00000157: 	pxor	%xmm0, %xmm0
    0000015b: 	movq	%rbp, %rdi
    0000015e: 	movq	%rax, end_time(%rip)
    00000165: 	subq	start_time(%rip), %rax
    0000016c: 	cvtsi2sd	%rax, %xmm0
    00000171: 	divsd	DATAat0xa508(%rip), %xmm0
    00000179: 	addq	$0x8, %rsp
    0000017d: 	popq	%rbx
    0000017e: 	popq	%rbp
    0000017f: 	popq	%r12
    00000181: 	popq	%r13
    00000183: 	popq	%r14
    00000185: 	popq	%r15
    00000187: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 391
.Ltmp393:
    0000018c: 	movapd	%xmm3, %xmm2
    00000190: 	movapd	%xmm3, %xmm1
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp387:
    00000198: 	xorpd	DATAat0xa5f0(%rip), %xmm12
    000001a1: 	jmp	.Ltmp391 # Offset: 417
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp389:
    000001b0: 	movl	current_test(%rip), %edx
    000001b6: 	leaq	DATAat0xa4ca(%rip), %rsi
    000001bd: 	movl	$0x1, %edi
    000001c2: 	xorl	%eax, %eax
    000001c4: 	addl	$0x1, %r14d
    000001c8: 	callq	__printf_chk@PLT # Offset: 456
    000001cd: 	movl	iterations(%rip), %ecx
    000001d3: 	cmpl	%ecx, %r14d
    000001d6: 	jge	.Ltmp381 # Offset: 470
    000001dc: 	movq	DATAat0xa520(%rip), %rax
    000001e3: 	movl	init_value(%rip), %edx
    000001e9: 	pxor	%xmm12, %xmm12
    000001ee: 	pxor	%xmm3, %xmm3
    000001f2: 	movq	DATAat0xa5c0(%rip), %xmm6
    000001fa: 	movq	DATAat0xa5f0(%rip), %xmm5
    00000202: 	movq	%rax, %xmm8
    00000207: 	movq	DATAat0xa530(%rip), %rax
    0000020e: 	cvtsi2sd	%edx, %xmm12
    00000213: 	movapd	DATAat0xa610(%rip), %xmm4
    0000021b: 	movq	%rax, %xmm7
    00000220: 	movq	DATAat0xa528(%rip), %rax
    00000227: 	movq	%rax, %xmm9
    0000022c: 	testl	%r13d, %r13d
    0000022f: 	jg	.Ltmp392 # Offset: 559
.Ltmp382:
    00000235: 	testl	%edx, %edx
    00000237: 	js	.Ltmp393 # Offset: 567
    0000023d: 	mulsd	%xmm8, %xmm12
    00000242: 	movapd	%xmm3, %xmm0
    00000246: 	subsd	%xmm12, %xmm0
    0000024b: 	jmp	.Ltmp388 # Offset: 587
.Ltmp383:
    00000250: 	xorl	%eax, %eax
    00000252: 	movapd	%xmm3, %xmm1
    00000256: 	jmp	.Ltmp394 # Offset: 598
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantId12abs_functor1IdEEvPT_iPKc"

Binary Function "_Z13test_constantId12abs_functor2IdEEvPT_iPKc" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x7f70
  Size        : 0x25b
  MaxSize     : 0x260
  Offset      : 0x7f70
  Section     : .text
  Orc Section : .local.text._Z13test_constantId12abs_functor2IdEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %ecx
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%ecx, %ecx
    0000002f: 	jle	.Ltmp395 # Offset: 47
    00000035: 	movl	%r13d, %eax
    00000038: 	movl	%r13d, %r15d
    0000003b: 	movl	init_value(%rip), %edx
    00000041: 	xorl	%r14d, %r14d
    00000044: 	shrl	%eax
    00000046: 	movq	DATAat0xa5c0(%rip), %xmm6
    0000004e: 	movsd	DATAat0xa520(%rip), %xmm8
    00000057: 	andl	$-0x2, %r15d
    0000005b: 	subl	$0x1, %eax
    0000005e: 	movsd	DATAat0xa530(%rip), %xmm7
    00000066: 	pxor	%xmm3, %xmm3
    0000006a: 	movsd	DATAat0xa528(%rip), %xmm9
    00000073: 	shlq	$0x4, %rax
    00000077: 	movq	DATAat0xa5f0(%rip), %xmm5
    0000007f: 	movapd	DATAat0xa610(%rip), %xmm4
    00000087: 	leaq	0x10(%rbx,%rax), %r12
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp404:
    00000090: 	pxor	%xmm12, %xmm12
    00000095: 	cvtsi2sd	%edx, %xmm12
    0000009a: 	testl	%r13d, %r13d
    0000009d: 	jle	.Ltmp396 # Offset: 157
.Ltmp406:
    000000a3: 	cmpl	$0x1, %r13d
    000000a7: 	je	.Ltmp397 # Offset: 167
    000000ad: 	movq	%rbx, %rax
    000000b0: 	movapd	%xmm3, %xmm1
    000000b4: 	pxor	%xmm10, %xmm10
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp398:
    000000c0: 	movupd	(%rax), %xmm11
    000000c5: 	addq	$0x10, %rax
    000000c9: 	movapd	%xmm11, %xmm0
    000000ce: 	movapd	%xmm11, %xmm2
    000000d3: 	cmpltpd	%xmm10, %xmm0
    000000d9: 	xorpd	%xmm4, %xmm2
    000000dd: 	andpd	%xmm0, %xmm2
    000000e1: 	andnpd	%xmm11, %xmm0
    000000e6: 	orpd	%xmm2, %xmm0
    000000ea: 	addsd	%xmm0, %xmm1
    000000ee: 	unpckhpd	%xmm0, %xmm0
    000000f2: 	addsd	%xmm0, %xmm1
    000000f6: 	cmpq	%rax, %r12
    000000f9: 	jne	.Ltmp398 # Offset: 249
    000000fb: 	movslq	%r15d, %rax
    000000fe: 	cmpl	%r15d, %r13d
    00000101: 	je	.Ltmp399 # Offset: 257
.Ltmp408:
    00000103: 	movsd	(%rbx,%rax,8), %xmm0
    00000108: 	comisd	%xmm0, %xmm3
    0000010c: 	jbe	.Ltmp400 # Offset: 268
    0000010e: 	xorpd	%xmm5, %xmm0
.Ltmp400:
    00000112: 	addsd	%xmm0, %xmm1
.Ltmp399:
    00000116: 	movapd	%xmm1, %xmm2
    0000011a: 	andpd	%xmm6, %xmm2
    0000011e: 	testl	%edx, %edx
    00000120: 	js	.Ltmp401 # Offset: 288
.Ltmp405:
    00000122: 	mulsd	%xmm8, %xmm12
    00000127: 	comisd	%xmm9, %xmm2
    0000012c: 	movapd	%xmm1, %xmm0
    00000130: 	subsd	%xmm12, %xmm0
    00000135: 	jbe	.Ltmp402 # Offset: 309
    00000137: 	divsd	%xmm1, %xmm0
.Ltmp402:
    0000013b: 	andpd	%xmm6, %xmm0
    0000013f: 	comisd	%xmm0, %xmm7
    00000143: 	jbe	.Ltmp403 # Offset: 323
    00000145: 	addl	$0x1, %r14d
    00000149: 	cmpl	%ecx, %r14d
    0000014c: 	jl	.Ltmp404 # Offset: 332
.Ltmp395:
    00000152: 	callq	clock@PLT # Offset: 338
    00000157: 	pxor	%xmm0, %xmm0
    0000015b: 	movq	%rbp, %rdi
    0000015e: 	movq	%rax, end_time(%rip)
    00000165: 	subq	start_time(%rip), %rax
    0000016c: 	cvtsi2sd	%rax, %xmm0
    00000171: 	divsd	DATAat0xa508(%rip), %xmm0
    00000179: 	addq	$0x8, %rsp
    0000017d: 	popq	%rbx
    0000017e: 	popq	%rbp
    0000017f: 	popq	%r12
    00000181: 	popq	%r13
    00000183: 	popq	%r14
    00000185: 	popq	%r15
    00000187: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 391
.Ltmp407:
    0000018c: 	movapd	%xmm3, %xmm2
    00000190: 	movapd	%xmm3, %xmm1
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp401:
    00000198: 	xorpd	DATAat0xa5f0(%rip), %xmm12
    000001a1: 	jmp	.Ltmp405 # Offset: 417
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp403:
    000001b0: 	movl	current_test(%rip), %edx
    000001b6: 	leaq	DATAat0xa4ca(%rip), %rsi
    000001bd: 	movl	$0x1, %edi
    000001c2: 	xorl	%eax, %eax
    000001c4: 	addl	$0x1, %r14d
    000001c8: 	callq	__printf_chk@PLT # Offset: 456
    000001cd: 	movl	iterations(%rip), %ecx
    000001d3: 	cmpl	%ecx, %r14d
    000001d6: 	jge	.Ltmp395 # Offset: 470
    000001dc: 	movq	DATAat0xa520(%rip), %rax
    000001e3: 	movl	init_value(%rip), %edx
    000001e9: 	pxor	%xmm12, %xmm12
    000001ee: 	pxor	%xmm3, %xmm3
    000001f2: 	movq	DATAat0xa5c0(%rip), %xmm6
    000001fa: 	movq	DATAat0xa5f0(%rip), %xmm5
    00000202: 	movq	%rax, %xmm8
    00000207: 	movq	DATAat0xa530(%rip), %rax
    0000020e: 	cvtsi2sd	%edx, %xmm12
    00000213: 	movapd	DATAat0xa610(%rip), %xmm4
    0000021b: 	movq	%rax, %xmm7
    00000220: 	movq	DATAat0xa528(%rip), %rax
    00000227: 	movq	%rax, %xmm9
    0000022c: 	testl	%r13d, %r13d
    0000022f: 	jg	.Ltmp406 # Offset: 559
.Ltmp396:
    00000235: 	testl	%edx, %edx
    00000237: 	js	.Ltmp407 # Offset: 567
    0000023d: 	mulsd	%xmm8, %xmm12
    00000242: 	movapd	%xmm3, %xmm0
    00000246: 	subsd	%xmm12, %xmm0
    0000024b: 	jmp	.Ltmp402 # Offset: 587
.Ltmp397:
    00000250: 	xorl	%eax, %eax
    00000252: 	movapd	%xmm3, %xmm1
    00000256: 	jmp	.Ltmp408 # Offset: 598
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantId12abs_functor2IdEEvPT_iPKc"

Binary Function "_Z13test_constantId12abs_functor6EvPT_iPKc" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x81d0
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0x81d0
  Section     : .text
  Orc Section : .local.text._Z13test_constantId12abs_functor6EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edx, %edx
    00000031: 	jle	.Ltmp409 # Offset: 49
    00000037: 	pxor	%xmm6, %xmm6
    0000003b: 	movl	%r14d, %eax
    0000003e: 	movl	%r14d, %ecx
    00000041: 	xorl	%r15d, %r15d
    00000044: 	cvtsi2sdl	init_value(%rip), %xmm6
    0000004c: 	shrl	%eax
    0000004e: 	movq	DATAat0xa5c0(%rip), %xmm5
    00000056: 	movsd	DATAat0xa530(%rip), %xmm7
    0000005e: 	subl	$0x1, %eax
    00000061: 	movapd	DATAat0xa600(%rip), %xmm3
    00000069: 	andl	$-0x2, %ecx
    0000006c: 	pxor	%xmm8, %xmm8
    00000071: 	shlq	$0x4, %rax
    00000075: 	leaq	DATAat0xa4ca(%rip), %rbp
    0000007c: 	movabsq	$0x7fffffffffffffff, %r12
    00000086: 	leaq	0x10(%rbx,%rax), %r13
    0000008b: 	movq	%xmm6, %rdi
    00000090: 	movsd	DATAat0xa520(%rip), %xmm6
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp416:
    000000a0: 	movq	%r12, %rax
    000000a3: 	andq	%rdi, %rax
    000000a6: 	movq	%rax, %xmm4
    000000ab: 	mulsd	%xmm6, %xmm4
    000000af: 	testl	%r14d, %r14d
    000000b2: 	jle	.Ltmp410 # Offset: 178
    000000b8: 	cmpl	$0x1, %r14d
    000000bc: 	je	.Ltmp411 # Offset: 188
    000000c2: 	movq	%rbx, %rax
    000000c5: 	movapd	%xmm8, %xmm0
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp412:
    000000d0: 	movupd	(%rax), %xmm1
    000000d4: 	addq	$0x10, %rax
    000000d8: 	andpd	%xmm3, %xmm1
    000000dc: 	addsd	%xmm1, %xmm0
    000000e0: 	unpckhpd	%xmm1, %xmm1
    000000e4: 	addsd	%xmm1, %xmm0
    000000e8: 	cmpq	%rax, %r13
    000000eb: 	jne	.Ltmp412 # Offset: 235
    000000ed: 	movslq	%ecx, %rax
    000000f0: 	cmpl	%r14d, %ecx
    000000f3: 	je	.Ltmp413 # Offset: 243
.Ltmp417:
    000000f5: 	movq	(%rbx,%rax,8), %rsi
    000000f9: 	andq	%r12, %rsi
    000000fc: 	movq	%rsi, %xmm2
    00000101: 	addsd	%xmm2, %xmm0
.Ltmp413:
    00000105: 	movapd	%xmm0, %xmm2
    00000109: 	movapd	%xmm0, %xmm1
    0000010d: 	andpd	%xmm5, %xmm2
    00000111: 	comisd	DATAat0xa528(%rip), %xmm2
    00000119: 	subsd	%xmm4, %xmm1
    0000011d: 	jbe	.Ltmp414 # Offset: 285
    0000011f: 	divsd	%xmm0, %xmm1
.Ltmp414:
    00000123: 	andpd	%xmm5, %xmm1
    00000127: 	comisd	%xmm1, %xmm7
    0000012b: 	jbe	.Ltmp415 # Offset: 299
    0000012d: 	addl	$0x1, %r15d
    00000131: 	cmpl	%edx, %r15d
    00000134: 	jl	.Ltmp416 # Offset: 308
.Ltmp409:
    0000013a: 	callq	clock@PLT # Offset: 314
    0000013f: 	pxor	%xmm0, %xmm0
    00000143: 	movq	0x8(%rsp), %rdi
    00000148: 	movq	%rax, end_time(%rip)
    0000014f: 	subq	start_time(%rip), %rax
    00000156: 	cvtsi2sd	%rax, %xmm0
    0000015b: 	divsd	DATAat0xa508(%rip), %xmm0
    00000163: 	addq	$0x18, %rsp
    00000167: 	popq	%rbx
    00000168: 	popq	%rbp
    00000169: 	popq	%r12
    0000016b: 	popq	%r13
    0000016d: 	popq	%r14
    0000016f: 	popq	%r15
    00000171: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 369
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp415:
    00000180: 	movl	current_test(%rip), %edx
    00000186: 	movq	%rbp, %rsi
    00000189: 	movl	$0x1, %edi
    0000018e: 	xorl	%eax, %eax
    00000190: 	movl	%ecx, 0x4(%rsp)
    00000194: 	addl	$0x1, %r15d
    00000198: 	callq	__printf_chk@PLT # Offset: 408
    0000019d: 	movl	iterations(%rip), %edx
    000001a3: 	cmpl	%edx, %r15d
    000001a6: 	jge	.Ltmp409 # Offset: 422
    000001a8: 	pxor	%xmm6, %xmm6
    000001ac: 	movq	DATAat0xa520(%rip), %rax
    000001b3: 	movl	0x4(%rsp), %ecx
    000001b7: 	pxor	%xmm8, %xmm8
    000001bc: 	cvtsi2sdl	init_value(%rip), %xmm6
    000001c4: 	movq	DATAat0xa5c0(%rip), %xmm5
    000001cc: 	movapd	DATAat0xa600(%rip), %xmm3
    000001d4: 	movq	%xmm6, %rdi
    000001d9: 	movq	%rax, %xmm6
    000001de: 	movq	DATAat0xa530(%rip), %rax
    000001e5: 	movq	%rax, %xmm7
    000001ea: 	jmp	.Ltmp416 # Offset: 490
    000001ef: 	nop # Size: 1
.Ltmp410:
    000001f0: 	movapd	%xmm8, %xmm1
    000001f5: 	subsd	%xmm4, %xmm1
    000001f9: 	jmp	.Ltmp414 # Offset: 505
.Ltmp411:
    000001fe: 	xorl	%eax, %eax
    00000200: 	movapd	%xmm8, %xmm0
    00000205: 	jmp	.Ltmp417 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantId12abs_functor6EvPT_iPKc"

Binary Function "_Z13test_constantId12abs_functor7EvPT_iPKc" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x83e0
  Size        : 0x264
  MaxSize     : 0x270
  Offset      : 0x83e0
  Section     : .text
  Orc Section : .local.text._Z13test_constantId12abs_functor7EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp418 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ecx
    0000003d: 	movl	init_value(%rip), %edx
    00000043: 	xorl	%r15d, %r15d
    00000046: 	shrl	%eax
    00000048: 	movq	DATAat0xa5c0(%rip), %xmm5
    00000050: 	movsd	DATAat0xa520(%rip), %xmm7
    00000058: 	andl	$-0x2, %ecx
    0000005b: 	subl	$0x1, %eax
    0000005e: 	movsd	DATAat0xa530(%rip), %xmm6
    00000066: 	movsd	DATAat0xa528(%rip), %xmm8
    0000006f: 	pxor	%xmm3, %xmm3
    00000073: 	shlq	$0x4, %rax
    00000077: 	movapd	DATAat0xa600(%rip), %xmm4
    0000007f: 	movabsq	$0x7fffffffffffffff, %r13
    00000089: 	leaq	DATAat0xa4ca(%rip), %rbp
    00000090: 	leaq	0x10(%rbx,%rax), %r12
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp427:
    00000098: 	pxor	%xmm11, %xmm11
    0000009d: 	cvtsi2sd	%edx, %xmm11
    000000a2: 	testl	%r14d, %r14d
    000000a5: 	jle	.Ltmp419 # Offset: 165
.Ltmp428:
    000000ab: 	cmpl	$0x1, %r14d
    000000af: 	je	.Ltmp420 # Offset: 175
    000000b5: 	movq	%rbx, %rax
    000000b8: 	movapd	%xmm3, %xmm2
    000000bc: 	pxor	%xmm9, %xmm9
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp421:
    000000c8: 	movupd	(%rax), %xmm1
    000000cc: 	movapd	%xmm9, %xmm0
    000000d1: 	addq	$0x10, %rax
    000000d5: 	cmpltpd	%xmm1, %xmm0
    000000da: 	movapd	%xmm1, %xmm10
    000000df: 	andpd	%xmm4, %xmm10
    000000e4: 	andpd	%xmm0, %xmm1
    000000e8: 	andnpd	%xmm10, %xmm0
    000000ed: 	orpd	%xmm1, %xmm0
    000000f1: 	movapd	%xmm0, %xmm1
    000000f5: 	unpckhpd	%xmm0, %xmm0
    000000f9: 	addsd	%xmm2, %xmm1
    000000fd: 	movapd	%xmm0, %xmm2
    00000101: 	addsd	%xmm1, %xmm2
    00000105: 	cmpq	%rax, %r12
    00000108: 	jne	.Ltmp421 # Offset: 264
    0000010a: 	movslq	%ecx, %rax
    0000010d: 	cmpl	%ecx, %r14d
    00000110: 	je	.Ltmp422 # Offset: 272
.Ltmp431:
    00000112: 	movsd	(%rbx,%rax,8), %xmm0
    00000117: 	comisd	%xmm3, %xmm0
    0000011b: 	ja	.Ltmp423 # Offset: 283
    0000011d: 	movq	%xmm0, %rax
    00000122: 	andq	%r13, %rax
    00000125: 	movq	%rax, %xmm0
.Ltmp423:
    0000012a: 	addsd	%xmm0, %xmm2
.Ltmp422:
    0000012e: 	movapd	%xmm2, %xmm1
    00000132: 	andpd	%xmm5, %xmm1
    00000136: 	testl	%edx, %edx
    00000138: 	jg	.Ltmp424 # Offset: 312
.Ltmp430:
    0000013a: 	movq	%xmm11, %rax
    0000013f: 	andq	%r13, %rax
    00000142: 	movq	%rax, %xmm11
.Ltmp424:
    00000147: 	mulsd	%xmm7, %xmm11
    0000014c: 	comisd	%xmm8, %xmm1
    00000151: 	movapd	%xmm2, %xmm0
    00000155: 	subsd	%xmm11, %xmm0
    0000015a: 	jbe	.Ltmp425 # Offset: 346
    0000015c: 	divsd	%xmm2, %xmm0
.Ltmp425:
    00000160: 	andpd	%xmm5, %xmm0
    00000164: 	comisd	%xmm0, %xmm6
    00000168: 	jbe	.Ltmp426 # Offset: 360
    0000016a: 	addl	$0x1, %r15d
    0000016e: 	cmpl	%edi, %r15d
    00000171: 	jl	.Ltmp427 # Offset: 369
.Ltmp418:
    00000177: 	callq	clock@PLT # Offset: 375
    0000017c: 	pxor	%xmm0, %xmm0
    00000180: 	movq	0x8(%rsp), %rdi
    00000185: 	movq	%rax, end_time(%rip)
    0000018c: 	subq	start_time(%rip), %rax
    00000193: 	cvtsi2sd	%rax, %xmm0
    00000198: 	divsd	DATAat0xa508(%rip), %xmm0
    000001a0: 	addq	$0x18, %rsp
    000001a4: 	popq	%rbx
    000001a5: 	popq	%rbp
    000001a6: 	popq	%r12
    000001a8: 	popq	%r13
    000001aa: 	popq	%r14
    000001ac: 	popq	%r15
    000001ae: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 430
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp426:
    000001b8: 	movl	current_test(%rip), %edx
    000001be: 	movl	$0x1, %edi
    000001c3: 	movq	%rbp, %rsi
    000001c6: 	xorl	%eax, %eax
    000001c8: 	movl	%ecx, 0x4(%rsp)
    000001cc: 	addl	$0x1, %r15d
    000001d0: 	callq	__printf_chk@PLT # Offset: 464
    000001d5: 	movl	iterations(%rip), %edi
    000001db: 	cmpl	%edi, %r15d
    000001de: 	jge	.Ltmp418 # Offset: 478
    000001e0: 	movq	DATAat0xa520(%rip), %rax
    000001e7: 	movl	init_value(%rip), %edx
    000001ed: 	pxor	%xmm3, %xmm3
    000001f1: 	pxor	%xmm11, %xmm11
    000001f6: 	movl	0x4(%rsp), %ecx
    000001fa: 	movq	DATAat0xa5c0(%rip), %xmm5
    00000202: 	movq	%rax, %xmm7
    00000207: 	movq	DATAat0xa530(%rip), %rax
    0000020e: 	cvtsi2sd	%edx, %xmm11
    00000213: 	movapd	DATAat0xa600(%rip), %xmm4
    0000021b: 	movq	%rax, %xmm6
    00000220: 	movq	DATAat0xa528(%rip), %rax
    00000227: 	movq	%rax, %xmm8
    0000022c: 	testl	%r14d, %r14d
    0000022f: 	jg	.Ltmp428 # Offset: 559
.Ltmp419:
    00000235: 	testl	%edx, %edx
    00000237: 	jg	.Ltmp429 # Offset: 567
    00000239: 	movapd	%xmm3, %xmm1
    0000023d: 	movapd	%xmm3, %xmm2
    00000241: 	jmp	.Ltmp430 # Offset: 577
.Ltmp420:
    00000246: 	xorl	%eax, %eax
    00000248: 	movapd	%xmm3, %xmm2
    0000024c: 	jmp	.Ltmp431 # Offset: 588
.Ltmp429:
    00000251: 	mulsd	%xmm7, %xmm11
    00000256: 	movapd	%xmm3, %xmm0
    0000025a: 	subsd	%xmm11, %xmm0
    0000025f: 	jmp	.Ltmp425 # Offset: 607
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantId12abs_functor7EvPT_iPKc"

Binary Function "_Z13test_constantId12abs_functor8IdEEvPT_iPKc" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x8650
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x8650
  Section     : .text
  Orc Section : .local.text._Z13test_constantId12abs_functor8IdEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %ecx
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%ecx, %ecx
    0000002f: 	jle	.Ltmp432 # Offset: 47
    00000035: 	movl	%r13d, %eax
    00000038: 	movl	%r13d, %r15d
    0000003b: 	movl	init_value(%rip), %edx
    00000041: 	xorl	%r14d, %r14d
    00000044: 	shrl	%eax
    00000046: 	movq	DATAat0xa5c0(%rip), %xmm6
    0000004e: 	movsd	DATAat0xa520(%rip), %xmm8
    00000057: 	andl	$-0x2, %r15d
    0000005b: 	subl	$0x1, %eax
    0000005e: 	movsd	DATAat0xa530(%rip), %xmm7
    00000066: 	pxor	%xmm3, %xmm3
    0000006a: 	movsd	DATAat0xa528(%rip), %xmm9
    00000073: 	shlq	$0x4, %rax
    00000077: 	movq	DATAat0xa5f0(%rip), %xmm5
    0000007f: 	movapd	DATAat0xa610(%rip), %xmm4
    00000087: 	leaq	0x10(%rbx,%rax), %r12
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp441:
    00000090: 	pxor	%xmm12, %xmm12
    00000095: 	cvtsi2sd	%edx, %xmm12
    0000009a: 	testl	%r13d, %r13d
    0000009d: 	jle	.Ltmp433 # Offset: 157
.Ltmp443:
    000000a3: 	cmpl	$0x1, %r13d
    000000a7: 	je	.Ltmp434 # Offset: 167
    000000ad: 	movq	%rbx, %rax
    000000b0: 	movapd	%xmm3, %xmm2
    000000b4: 	pxor	%xmm10, %xmm10
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp435:
    000000c0: 	movupd	(%rax), %xmm1
    000000c4: 	movapd	%xmm10, %xmm0
    000000c9: 	addq	$0x10, %rax
    000000cd: 	cmplepd	%xmm1, %xmm0
    000000d2: 	movapd	%xmm1, %xmm11
    000000d7: 	xorpd	%xmm4, %xmm11
    000000dc: 	andpd	%xmm0, %xmm1
    000000e0: 	andnpd	%xmm11, %xmm0
    000000e5: 	orpd	%xmm1, %xmm0
    000000e9: 	movapd	%xmm0, %xmm1
    000000ed: 	unpckhpd	%xmm0, %xmm0
    000000f1: 	addsd	%xmm2, %xmm1
    000000f5: 	movapd	%xmm0, %xmm2
    000000f9: 	addsd	%xmm1, %xmm2
    000000fd: 	cmpq	%rax, %r12
    00000100: 	jne	.Ltmp435 # Offset: 256
    00000102: 	movslq	%r15d, %rax
    00000105: 	cmpl	%r15d, %r13d
    00000108: 	je	.Ltmp436 # Offset: 264
.Ltmp444:
    0000010a: 	movsd	(%rbx,%rax,8), %xmm0
    0000010f: 	comisd	%xmm3, %xmm0
    00000113: 	jae	.Ltmp437 # Offset: 275
    00000115: 	xorpd	%xmm5, %xmm0
.Ltmp437:
    00000119: 	addsd	%xmm0, %xmm2
.Ltmp436:
    0000011d: 	movapd	%xmm2, %xmm1
    00000121: 	andpd	%xmm6, %xmm1
    00000125: 	testl	%edx, %edx
    00000127: 	js	.Ltmp438 # Offset: 295
.Ltmp442:
    00000129: 	mulsd	%xmm8, %xmm12
    0000012e: 	comisd	%xmm9, %xmm1
    00000133: 	movapd	%xmm2, %xmm0
    00000137: 	subsd	%xmm12, %xmm0
    0000013c: 	jbe	.Ltmp439 # Offset: 316
    0000013e: 	divsd	%xmm2, %xmm0
.Ltmp439:
    00000142: 	andpd	%xmm6, %xmm0
    00000146: 	comisd	%xmm0, %xmm7
    0000014a: 	jbe	.Ltmp440 # Offset: 330
    0000014c: 	addl	$0x1, %r14d
    00000150: 	cmpl	%ecx, %r14d
    00000153: 	jl	.Ltmp441 # Offset: 339
.Ltmp432:
    00000159: 	callq	clock@PLT # Offset: 345
    0000015e: 	pxor	%xmm0, %xmm0
    00000162: 	movq	%rbp, %rdi
    00000165: 	movq	%rax, end_time(%rip)
    0000016c: 	subq	start_time(%rip), %rax
    00000173: 	cvtsi2sd	%rax, %xmm0
    00000178: 	divsd	DATAat0xa508(%rip), %xmm0
    00000180: 	addq	$0x8, %rsp
    00000184: 	popq	%rbx
    00000185: 	popq	%rbp
    00000186: 	popq	%r12
    00000188: 	popq	%r13
    0000018a: 	popq	%r14
    0000018c: 	popq	%r15
    0000018e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 398
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp438:
    00000198: 	xorpd	DATAat0xa5f0(%rip), %xmm12
    000001a1: 	jmp	.Ltmp442 # Offset: 417
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp440:
    000001a8: 	movl	current_test(%rip), %edx
    000001ae: 	leaq	DATAat0xa4ca(%rip), %rsi
    000001b5: 	movl	$0x1, %edi
    000001ba: 	xorl	%eax, %eax
    000001bc: 	addl	$0x1, %r14d
    000001c0: 	callq	__printf_chk@PLT # Offset: 448
    000001c5: 	movl	iterations(%rip), %ecx
    000001cb: 	cmpl	%ecx, %r14d
    000001ce: 	jge	.Ltmp432 # Offset: 462
    000001d0: 	movq	DATAat0xa520(%rip), %rax
    000001d7: 	movl	init_value(%rip), %edx
    000001dd: 	pxor	%xmm12, %xmm12
    000001e2: 	pxor	%xmm3, %xmm3
    000001e6: 	movq	DATAat0xa5c0(%rip), %xmm6
    000001ee: 	movq	DATAat0xa5f0(%rip), %xmm5
    000001f6: 	movq	%rax, %xmm8
    000001fb: 	movq	DATAat0xa530(%rip), %rax
    00000202: 	cvtsi2sd	%edx, %xmm12
    00000207: 	movapd	DATAat0xa610(%rip), %xmm4
    0000020f: 	movq	%rax, %xmm7
    00000214: 	movq	DATAat0xa528(%rip), %rax
    0000021b: 	movq	%rax, %xmm9
    00000220: 	testl	%r13d, %r13d
    00000223: 	jg	.Ltmp443 # Offset: 547
.Ltmp433:
    00000229: 	movapd	%xmm3, %xmm1
    0000022d: 	movapd	%xmm3, %xmm2
    00000231: 	testl	%edx, %edx
    00000233: 	js	.Ltmp438 # Offset: 563
    00000239: 	mulsd	%xmm8, %xmm12
    0000023e: 	movapd	%xmm3, %xmm0
    00000242: 	subsd	%xmm12, %xmm0
    00000247: 	jmp	.Ltmp439 # Offset: 583
.Ltmp434:
    0000024c: 	xorl	%eax, %eax
    0000024e: 	movapd	%xmm3, %xmm2
    00000252: 	jmp	.Ltmp444 # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantId12abs_functor8IdEEvPT_iPKc"

Binary Function "_Z13test_constantId12abs_functor9IdEEvPT_iPKc" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x88b0
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x88b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantId12abs_functor9IdEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %ecx
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%ecx, %ecx
    0000002f: 	jle	.Ltmp445 # Offset: 47
    00000035: 	movl	%r13d, %eax
    00000038: 	movl	%r13d, %r15d
    0000003b: 	movl	init_value(%rip), %edx
    00000041: 	xorl	%r14d, %r14d
    00000044: 	shrl	%eax
    00000046: 	movq	DATAat0xa5c0(%rip), %xmm6
    0000004e: 	movsd	DATAat0xa520(%rip), %xmm8
    00000057: 	andl	$-0x2, %r15d
    0000005b: 	subl	$0x1, %eax
    0000005e: 	movsd	DATAat0xa530(%rip), %xmm7
    00000066: 	pxor	%xmm3, %xmm3
    0000006a: 	movsd	DATAat0xa528(%rip), %xmm9
    00000073: 	shlq	$0x4, %rax
    00000077: 	movq	DATAat0xa5f0(%rip), %xmm5
    0000007f: 	movapd	DATAat0xa610(%rip), %xmm4
    00000087: 	leaq	0x10(%rbx,%rax), %r12
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp454:
    00000090: 	pxor	%xmm12, %xmm12
    00000095: 	cvtsi2sd	%edx, %xmm12
    0000009a: 	testl	%r13d, %r13d
    0000009d: 	jle	.Ltmp446 # Offset: 157
.Ltmp456:
    000000a3: 	cmpl	$0x1, %r13d
    000000a7: 	je	.Ltmp447 # Offset: 167
    000000ad: 	movq	%rbx, %rax
    000000b0: 	movapd	%xmm3, %xmm2
    000000b4: 	pxor	%xmm10, %xmm10
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp448:
    000000c0: 	movupd	(%rax), %xmm1
    000000c4: 	movapd	%xmm10, %xmm0
    000000c9: 	addq	$0x10, %rax
    000000cd: 	cmplepd	%xmm1, %xmm0
    000000d2: 	movapd	%xmm1, %xmm11
    000000d7: 	xorpd	%xmm4, %xmm11
    000000dc: 	andpd	%xmm0, %xmm1
    000000e0: 	andnpd	%xmm11, %xmm0
    000000e5: 	orpd	%xmm1, %xmm0
    000000e9: 	movapd	%xmm0, %xmm1
    000000ed: 	unpckhpd	%xmm0, %xmm0
    000000f1: 	addsd	%xmm2, %xmm1
    000000f5: 	movapd	%xmm0, %xmm2
    000000f9: 	addsd	%xmm1, %xmm2
    000000fd: 	cmpq	%rax, %r12
    00000100: 	jne	.Ltmp448 # Offset: 256
    00000102: 	movslq	%r15d, %rax
    00000105: 	cmpl	%r15d, %r13d
    00000108: 	je	.Ltmp449 # Offset: 264
.Ltmp457:
    0000010a: 	movsd	(%rbx,%rax,8), %xmm0
    0000010f: 	comisd	%xmm3, %xmm0
    00000113: 	jae	.Ltmp450 # Offset: 275
    00000115: 	xorpd	%xmm5, %xmm0
.Ltmp450:
    00000119: 	addsd	%xmm0, %xmm2
.Ltmp449:
    0000011d: 	movapd	%xmm2, %xmm1
    00000121: 	andpd	%xmm6, %xmm1
    00000125: 	testl	%edx, %edx
    00000127: 	js	.Ltmp451 # Offset: 295
.Ltmp455:
    00000129: 	mulsd	%xmm8, %xmm12
    0000012e: 	comisd	%xmm9, %xmm1
    00000133: 	movapd	%xmm2, %xmm0
    00000137: 	subsd	%xmm12, %xmm0
    0000013c: 	jbe	.Ltmp452 # Offset: 316
    0000013e: 	divsd	%xmm2, %xmm0
.Ltmp452:
    00000142: 	andpd	%xmm6, %xmm0
    00000146: 	comisd	%xmm0, %xmm7
    0000014a: 	jbe	.Ltmp453 # Offset: 330
    0000014c: 	addl	$0x1, %r14d
    00000150: 	cmpl	%ecx, %r14d
    00000153: 	jl	.Ltmp454 # Offset: 339
.Ltmp445:
    00000159: 	callq	clock@PLT # Offset: 345
    0000015e: 	pxor	%xmm0, %xmm0
    00000162: 	movq	%rbp, %rdi
    00000165: 	movq	%rax, end_time(%rip)
    0000016c: 	subq	start_time(%rip), %rax
    00000173: 	cvtsi2sd	%rax, %xmm0
    00000178: 	divsd	DATAat0xa508(%rip), %xmm0
    00000180: 	addq	$0x8, %rsp
    00000184: 	popq	%rbx
    00000185: 	popq	%rbp
    00000186: 	popq	%r12
    00000188: 	popq	%r13
    0000018a: 	popq	%r14
    0000018c: 	popq	%r15
    0000018e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 398
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp451:
    00000198: 	xorpd	DATAat0xa5f0(%rip), %xmm12
    000001a1: 	jmp	.Ltmp455 # Offset: 417
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp453:
    000001a8: 	movl	current_test(%rip), %edx
    000001ae: 	leaq	DATAat0xa4ca(%rip), %rsi
    000001b5: 	movl	$0x1, %edi
    000001ba: 	xorl	%eax, %eax
    000001bc: 	addl	$0x1, %r14d
    000001c0: 	callq	__printf_chk@PLT # Offset: 448
    000001c5: 	movl	iterations(%rip), %ecx
    000001cb: 	cmpl	%ecx, %r14d
    000001ce: 	jge	.Ltmp445 # Offset: 462
    000001d0: 	movq	DATAat0xa520(%rip), %rax
    000001d7: 	movl	init_value(%rip), %edx
    000001dd: 	pxor	%xmm12, %xmm12
    000001e2: 	pxor	%xmm3, %xmm3
    000001e6: 	movq	DATAat0xa5c0(%rip), %xmm6
    000001ee: 	movq	DATAat0xa5f0(%rip), %xmm5
    000001f6: 	movq	%rax, %xmm8
    000001fb: 	movq	DATAat0xa530(%rip), %rax
    00000202: 	cvtsi2sd	%edx, %xmm12
    00000207: 	movapd	DATAat0xa610(%rip), %xmm4
    0000020f: 	movq	%rax, %xmm7
    00000214: 	movq	DATAat0xa528(%rip), %rax
    0000021b: 	movq	%rax, %xmm9
    00000220: 	testl	%r13d, %r13d
    00000223: 	jg	.Ltmp456 # Offset: 547
.Ltmp446:
    00000229: 	movapd	%xmm3, %xmm1
    0000022d: 	movapd	%xmm3, %xmm2
    00000231: 	testl	%edx, %edx
    00000233: 	js	.Ltmp451 # Offset: 563
    00000239: 	mulsd	%xmm8, %xmm12
    0000023e: 	movapd	%xmm3, %xmm0
    00000242: 	subsd	%xmm12, %xmm0
    00000247: 	jmp	.Ltmp452 # Offset: 583
.Ltmp447:
    0000024c: 	xorl	%eax, %eax
    0000024e: 	movapd	%xmm3, %xmm2
    00000252: 	jmp	.Ltmp457 # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantId12abs_functor9IdEEvPT_iPKc"

Binary Function "_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x8b10
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x8b10
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movl	%esi, %eax
    00000006: 	movl	%esi, %ecx
    00000008: 	negl	%eax
    0000000a: 	movl	%eax, %r8d
    0000000d: 	testb	%sil, %sil
    00000010: 	js	.Ltmp458 # Offset: 16
    00000012: 	movl	%r8d, %ecx
    00000015: 	movl	%esi, %eax
    00000017: 	movl	%esi, %r8d
.Ltmp458:
    0000001a: 	sarb	$0x7, %cl
    0000001d: 	movl	%r8d, %edx
    00000020: 	movl	%ecx, %esi
    00000022: 	sarb	$0x7, %dl
    00000025: 	subl	%eax, %esi
    00000027: 	xorl	%esi, %ecx
    00000029: 	cmpb	%r8b, %cl
    0000002c: 	jne	.Ltmp459 # Offset: 44
    0000002e: 	addl	%edx, %eax
    00000030: 	xorl	%edx, %eax
    00000032: 	cmpb	%r8b, %al
    00000035: 	jne	.Ltmp459 # Offset: 53
    00000037: 	retq # Offset: 55
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp459:
    00000040: 	movq	%rdi, %rdx
    00000043: 	leaq	DATAat0xa4da(%rip), %rsi
    0000004a: 	movl	$0x1, %edi
    0000004f: 	xorl	%eax, %eax
    00000051: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 81
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueIa12abs_functor3IaEEvPKcT_"

Binary Function "_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x8b70
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x8b70
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	movl	%esi, %eax
    00000008: 	negl	%ecx
    0000000a: 	testb	%sil, %sil
    0000000d: 	js	.Ltmp460 # Offset: 13
    0000000f: 	movl	%ecx, %eax
    00000011: 	movl	%esi, %ecx
.Ltmp460:
    00000013: 	movl	%eax, %edx
    00000015: 	movl	%ecx, %esi
    00000017: 	sarb	$0x7, %dl
    0000001a: 	sarb	$0x7, %sil
    0000001e: 	xorl	%edx, %eax
    00000020: 	subl	%edx, %eax
    00000022: 	cmpb	%cl, %al
    00000024: 	jne	.Ltmp461 # Offset: 36
    00000026: 	movl	%ecx, %eax
    00000028: 	xorl	%esi, %eax
    0000002a: 	subl	%esi, %eax
    0000002c: 	cmpb	%cl, %al
    0000002e: 	jne	.Ltmp461 # Offset: 46
    00000030: 	retq # Offset: 48
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp461:
    00000038: 	movq	%rdi, %rdx
    0000003b: 	leaq	DATAat0xa4da(%rip), %rsi
    00000042: 	movl	$0x1, %edi
    00000047: 	xorl	%eax, %eax
    00000049: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 73
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueIa12abs_functor4IaEEvPKcT_"

Binary Function "_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x8bc0
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x8bc0
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	movl	%esi, %eax
    00000008: 	negl	%ecx
    0000000a: 	testb	%sil, %sil
    0000000d: 	js	.Ltmp462 # Offset: 13
    0000000f: 	movl	%ecx, %eax
    00000011: 	movl	%esi, %ecx
.Ltmp462:
    00000013: 	movl	%eax, %esi
    00000015: 	movl	%ecx, %r8d
    00000018: 	sarb	$0x7, %sil
    0000001c: 	sarb	$0x7, %r8b
    00000020: 	xorl	%esi, %eax
    00000022: 	andl	$0x1, %esi
    00000025: 	addl	%esi, %eax
    00000027: 	cmpb	%cl, %al
    00000029: 	jne	.Ltmp463 # Offset: 41
    0000002b: 	movl	%ecx, %eax
    0000002d: 	xorl	%r8d, %eax
    00000030: 	andl	$0x1, %r8d
    00000034: 	addl	%r8d, %eax
    00000037: 	cmpb	%cl, %al
    00000039: 	jne	.Ltmp463 # Offset: 57
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp463:
    00000040: 	movq	%rdi, %rdx
    00000043: 	leaq	DATAat0xa4da(%rip), %rsi
    0000004a: 	movl	$0x1, %edi
    0000004f: 	xorl	%eax, %eax
    00000051: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 81
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueIa12abs_functor5IaEEvPKcT_"

Binary Function "_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x8c20
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x8c20
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	movl	%esi, %eax
    00000006: 	movl	%esi, %ecx
    00000008: 	negl	%eax
    0000000a: 	movl	%eax, %r8d
    0000000d: 	testw	%si, %si
    00000010: 	js	.Ltmp464 # Offset: 16
    00000012: 	movl	%r8d, %ecx
    00000015: 	movl	%esi, %eax
    00000017: 	movl	%esi, %r8d
.Ltmp464:
    0000001a: 	sarw	$0xf, %cx
    0000001e: 	movl	%r8d, %edx
    00000021: 	movl	%ecx, %esi
    00000023: 	sarw	$0xf, %dx
    00000027: 	subl	%eax, %esi
    00000029: 	xorl	%esi, %ecx
    0000002b: 	cmpw	%r8w, %cx
    0000002f: 	jne	.Ltmp465 # Offset: 47
    00000031: 	addl	%edx, %eax
    00000033: 	xorl	%edx, %eax
    00000035: 	cmpw	%r8w, %ax
    00000039: 	jne	.Ltmp465 # Offset: 57
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp465:
    00000040: 	movq	%rdi, %rdx
    00000043: 	leaq	DATAat0xa4da(%rip), %rsi
    0000004a: 	movl	$0x1, %edi
    0000004f: 	xorl	%eax, %eax
    00000051: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 81
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueIs12abs_functor3IsEEvPKcT_"

Binary Function "_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x8c80
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x8c80
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	movl	%esi, %eax
    00000008: 	negl	%ecx
    0000000a: 	testw	%si, %si
    0000000d: 	js	.Ltmp466 # Offset: 13
    0000000f: 	movl	%ecx, %eax
    00000011: 	movl	%esi, %ecx
.Ltmp466:
    00000013: 	movl	%eax, %edx
    00000015: 	movl	%ecx, %esi
    00000017: 	sarw	$0xf, %dx
    0000001b: 	sarw	$0xf, %si
    0000001f: 	xorl	%edx, %eax
    00000021: 	subl	%edx, %eax
    00000023: 	cmpw	%cx, %ax
    00000026: 	jne	.Ltmp467 # Offset: 38
    00000028: 	movl	%ecx, %eax
    0000002a: 	xorl	%esi, %eax
    0000002c: 	subl	%esi, %eax
    0000002e: 	cmpw	%cx, %ax
    00000031: 	jne	.Ltmp467 # Offset: 49
    00000033: 	retq # Offset: 51
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp467:
    00000038: 	movq	%rdi, %rdx
    0000003b: 	leaq	DATAat0xa4da(%rip), %rsi
    00000042: 	movl	$0x1, %edi
    00000047: 	xorl	%eax, %eax
    00000049: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 73
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueIs12abs_functor4IsEEvPKcT_"

Binary Function "_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x8cd0
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x8cd0
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	movl	%esi, %eax
    00000008: 	negl	%ecx
    0000000a: 	testw	%si, %si
    0000000d: 	js	.Ltmp468 # Offset: 13
    0000000f: 	movl	%ecx, %eax
    00000011: 	movl	%esi, %ecx
.Ltmp468:
    00000013: 	movl	%eax, %esi
    00000015: 	movl	%ecx, %r8d
    00000018: 	sarw	$0xf, %si
    0000001c: 	sarw	$0xf, %r8w
    00000021: 	xorl	%esi, %eax
    00000023: 	andl	$0x1, %esi
    00000026: 	addl	%esi, %eax
    00000028: 	cmpw	%cx, %ax
    0000002b: 	jne	.Ltmp469 # Offset: 43
    0000002d: 	movl	%ecx, %eax
    0000002f: 	xorl	%r8d, %eax
    00000032: 	andl	$0x1, %r8d
    00000036: 	addl	%r8d, %eax
    00000039: 	cmpw	%cx, %ax
    0000003c: 	jne	.Ltmp469 # Offset: 60
    0000003e: 	retq # Offset: 62
    0000003f: 	nop # Size: 1
.Ltmp469:
    00000040: 	movq	%rdi, %rdx
    00000043: 	leaq	DATAat0xa4da(%rip), %rsi
    0000004a: 	movl	$0x1, %edi
    0000004f: 	xorl	%eax, %eax
    00000051: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 81
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueIs12abs_functor5IsEEvPKcT_"

Binary Function "_Z18validate_abs_valueIf12abs_functor1IfEEvPKcT_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x8d30
  Size        : 0x7e
  MaxSize     : 0x80
  Offset      : 0x8d30
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueIf12abs_functor1IfEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pxor	%xmm4, %xmm4
    00000008: 	movaps	%xmm0, %xmm1
    0000000b: 	xorps	DATAat0xa5e0(%rip), %xmm1
    00000012: 	comiss	%xmm0, %xmm4
    00000015: 	jbe	.Ltmp470 # Offset: 21
    00000017: 	movaps	%xmm0, %xmm2
    0000001a: 	movaps	%xmm1, %xmm0
    0000001d: 	movaps	%xmm2, %xmm1
.Ltmp470:
    00000020: 	movaps	%xmm4, %xmm2
    00000023: 	movaps	%xmm0, %xmm3
    00000026: 	movl	$0x1, %edx
    0000002b: 	cmpltss	%xmm0, %xmm2
    00000030: 	andps	%xmm2, %xmm3
    00000033: 	andnps	%xmm1, %xmm2
    00000036: 	orps	%xmm3, %xmm2
    00000039: 	movaps	%xmm0, %xmm3
    0000003c: 	ucomiss	%xmm2, %xmm0
    0000003f: 	cmpltss	%xmm4, %xmm3
    00000044: 	setp	%al
    00000047: 	andps	%xmm3, %xmm1
    0000004a: 	andnps	%xmm0, %xmm3
    0000004d: 	cmovnel	%edx, %eax
    00000050: 	orps	%xmm3, %xmm1
    00000053: 	testb	%al, %al
    00000055: 	jne	.Ltmp471 # Offset: 85
    00000057: 	ucomiss	%xmm1, %xmm0
    0000005a: 	setp	%al
    0000005d: 	cmovnel	%edx, %eax
    00000060: 	testb	%al, %al
    00000062: 	jne	.Ltmp471 # Offset: 98
    00000064: 	retq # Offset: 100
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp471:
    00000068: 	movq	%rdi, %rdx
    0000006b: 	leaq	DATAat0xa4da(%rip), %rsi
    00000072: 	movl	$0x1, %edi
    00000077: 	xorl	%eax, %eax
    00000079: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueIf12abs_functor1IfEEvPKcT_"

Binary Function "_Z18validate_abs_valueIf12abs_functor7EvPKcT_" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x8db0
  Size        : 0x86
  MaxSize     : 0x90
  Offset      : 0x8db0
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueIf12abs_functor7EvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	pxor	%xmm2, %xmm2
    00000008: 	movaps	%xmm0, %xmm1
    0000000b: 	xorps	DATAat0xa5e0(%rip), %xmm1
    00000012: 	comiss	%xmm0, %xmm2
    00000015: 	ja	.Ltmp472 # Offset: 21
.Ltmp476:
    00000017: 	movd	%xmm1, %eax
    0000001b: 	andl	$0x7fffffff, %eax
    00000020: 	movd	%eax, %xmm1
.Ltmp475:
    00000024: 	comiss	%xmm2, %xmm0
    00000027: 	movaps	%xmm0, %xmm3
    0000002a: 	ja	.Ltmp473 # Offset: 42
    0000002c: 	movd	%xmm0, %eax
    00000030: 	andl	$0x7fffffff, %eax
    00000035: 	movd	%eax, %xmm3
.Ltmp473:
    00000039: 	ucomiss	%xmm1, %xmm0
    0000003c: 	movl	$0x1, %edx
    00000041: 	setp	%al
    00000044: 	cmovnel	%edx, %eax
    00000047: 	testb	%al, %al
    00000049: 	jne	.Ltmp474 # Offset: 73
    0000004b: 	ucomiss	%xmm3, %xmm0
    0000004e: 	setp	%al
    00000051: 	cmovnel	%edx, %eax
    00000054: 	testb	%al, %al
    00000056: 	jne	.Ltmp474 # Offset: 86
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp472:
    00000060: 	movaps	%xmm0, %xmm3
    00000063: 	movaps	%xmm1, %xmm0
    00000066: 	comiss	%xmm0, %xmm2
    00000069: 	movaps	%xmm3, %xmm1
    0000006c: 	ja	.Ltmp475 # Offset: 108
    0000006e: 	jmp	.Ltmp476 # Offset: 110
.Ltmp474:
    00000070: 	movq	%rdi, %rdx
    00000073: 	leaq	DATAat0xa4da(%rip), %rsi
    0000007a: 	movl	$0x1, %edi
    0000007f: 	xorl	%eax, %eax
    00000081: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueIf12abs_functor7EvPKcT_"

Binary Function "_Z18validate_abs_valueId12abs_functor1IdEEvPKcT_" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x8e40
  Size        : 0x96
  MaxSize     : 0xa0
  Offset      : 0x8e40
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueId12abs_functor1IdEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pxor	%xmm4, %xmm4
    00000008: 	movapd	%xmm0, %xmm1
    0000000c: 	xorpd	DATAat0xa5f0(%rip), %xmm1
    00000014: 	comisd	%xmm0, %xmm4
    00000018: 	jbe	.Ltmp477 # Offset: 24
    0000001a: 	movq	%xmm0, %rax
    0000001f: 	movapd	%xmm1, %xmm0
    00000023: 	movq	%rax, %xmm1
.Ltmp477:
    00000028: 	movapd	%xmm4, %xmm2
    0000002c: 	movapd	%xmm0, %xmm3
    00000030: 	movl	$0x1, %edx
    00000035: 	cmpltsd	%xmm0, %xmm2
    0000003a: 	andpd	%xmm2, %xmm3
    0000003e: 	andnpd	%xmm1, %xmm2
    00000042: 	orpd	%xmm3, %xmm2
    00000046: 	movapd	%xmm0, %xmm3
    0000004a: 	ucomisd	%xmm2, %xmm0
    0000004e: 	cmpltsd	%xmm4, %xmm3
    00000053: 	setp	%al
    00000056: 	andpd	%xmm3, %xmm1
    0000005a: 	andnpd	%xmm0, %xmm3
    0000005e: 	cmovnel	%edx, %eax
    00000061: 	orpd	%xmm3, %xmm1
    00000065: 	testb	%al, %al
    00000067: 	jne	.Ltmp478 # Offset: 103
    00000069: 	ucomisd	%xmm1, %xmm0
    0000006d: 	setp	%al
    00000070: 	cmovnel	%edx, %eax
    00000073: 	testb	%al, %al
    00000075: 	jne	.Ltmp478 # Offset: 117
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp478:
    00000080: 	movq	%rdi, %rdx
    00000083: 	leaq	DATAat0xa4da(%rip), %rsi
    0000008a: 	movl	$0x1, %edi
    0000008f: 	xorl	%eax, %eax
    00000091: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 145
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueId12abs_functor1IdEEvPKcT_"

Binary Function "_Z18validate_abs_valueId12abs_functor2IdEEvPKcT_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x8ee0
  Size        : 0x96
  MaxSize     : 0xa0
  Offset      : 0x8ee0
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueId12abs_functor2IdEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	pxor	%xmm4, %xmm4
    00000008: 	movapd	%xmm0, %xmm1
    0000000c: 	xorpd	DATAat0xa5f0(%rip), %xmm1
    00000014: 	comisd	%xmm0, %xmm4
    00000018: 	jbe	.Ltmp479 # Offset: 24
    0000001a: 	movq	%xmm0, %rax
    0000001f: 	movapd	%xmm1, %xmm0
    00000023: 	movq	%rax, %xmm1
.Ltmp479:
    00000028: 	movapd	%xmm4, %xmm2
    0000002c: 	movapd	%xmm0, %xmm3
    00000030: 	movl	$0x1, %edx
    00000035: 	cmpltsd	%xmm0, %xmm2
    0000003a: 	andpd	%xmm2, %xmm3
    0000003e: 	andnpd	%xmm1, %xmm2
    00000042: 	orpd	%xmm3, %xmm2
    00000046: 	movapd	%xmm0, %xmm3
    0000004a: 	ucomisd	%xmm2, %xmm0
    0000004e: 	cmpltsd	%xmm4, %xmm3
    00000053: 	setp	%al
    00000056: 	andpd	%xmm3, %xmm1
    0000005a: 	andnpd	%xmm0, %xmm3
    0000005e: 	cmovnel	%edx, %eax
    00000061: 	orpd	%xmm3, %xmm1
    00000065: 	testb	%al, %al
    00000067: 	jne	.Ltmp480 # Offset: 103
    00000069: 	ucomisd	%xmm1, %xmm0
    0000006d: 	setp	%al
    00000070: 	cmovnel	%edx, %eax
    00000073: 	testb	%al, %al
    00000075: 	jne	.Ltmp480 # Offset: 117
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp480:
    00000080: 	movq	%rdi, %rdx
    00000083: 	leaq	DATAat0xa4da(%rip), %rsi
    0000008a: 	movl	$0x1, %edi
    0000008f: 	xorl	%eax, %eax
    00000091: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 145
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueId12abs_functor2IdEEvPKcT_"

Binary Function "_Z18validate_abs_valueId12abs_functor7EvPKcT_" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x8f80
  Size        : 0x96
  MaxSize     : 0xa0
  Offset      : 0x8f80
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueId12abs_functor7EvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	pxor	%xmm2, %xmm2
    00000008: 	movapd	%xmm0, %xmm1
    0000000c: 	xorpd	DATAat0xa5f0(%rip), %xmm1
    00000014: 	comisd	%xmm0, %xmm2
    00000018: 	ja	.Ltmp481 # Offset: 24
.Ltmp485:
    0000001a: 	movq	%xmm1, %rax
    0000001f: 	btrq	$0x3f, %rax
    00000024: 	movq	%rax, %xmm1
.Ltmp484:
    00000029: 	comisd	%xmm2, %xmm0
    0000002d: 	movapd	%xmm0, %xmm3
    00000031: 	ja	.Ltmp482 # Offset: 49
    00000033: 	movq	%xmm0, %rax
    00000038: 	btrq	$0x3f, %rax
    0000003d: 	movq	%rax, %xmm3
.Ltmp482:
    00000042: 	ucomisd	%xmm1, %xmm0
    00000046: 	movl	$0x1, %edx
    0000004b: 	setp	%al
    0000004e: 	cmovnel	%edx, %eax
    00000051: 	testb	%al, %al
    00000053: 	jne	.Ltmp483 # Offset: 83
    00000055: 	ucomisd	%xmm3, %xmm0
    00000059: 	setp	%al
    0000005c: 	cmovnel	%edx, %eax
    0000005f: 	testb	%al, %al
    00000061: 	jne	.Ltmp483 # Offset: 97
    00000063: 	retq # Offset: 99
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp481:
    00000068: 	movq	%xmm0, %rax
    0000006d: 	movapd	%xmm1, %xmm0
    00000071: 	comisd	%xmm0, %xmm2
    00000075: 	movq	%rax, %xmm1
    0000007a: 	ja	.Ltmp484 # Offset: 122
    0000007c: 	jmp	.Ltmp485 # Offset: 124
    0000007e: 	nop # Size: 2
.Ltmp483:
    00000080: 	movq	%rdi, %rdx
    00000083: 	leaq	DATAat0xa4da(%rip), %rsi
    0000008a: 	movl	$0x1, %edi
    0000008f: 	xorl	%eax, %eax
    00000091: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 145
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueId12abs_functor7EvPKcT_"

Binary Function "_Z18validate_abs_valueId12abs_functor8IdEEvPKcT_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x9020
  Size        : 0x8e
  MaxSize     : 0x90
  Offset      : 0x9020
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueId12abs_functor8IdEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pxor	%xmm1, %xmm1
    00000008: 	movapd	%xmm0, %xmm2
    0000000c: 	xorpd	DATAat0xa5f0(%rip), %xmm2
    00000014: 	comisd	%xmm0, %xmm1
    00000018: 	jbe	.Ltmp486 # Offset: 24
    0000001a: 	movq	%xmm0, %rax
    0000001f: 	movapd	%xmm2, %xmm0
    00000023: 	movq	%rax, %xmm2
.Ltmp486:
    00000028: 	movapd	%xmm0, %xmm3
    0000002c: 	movapd	%xmm2, %xmm4
    00000030: 	movl	$0x1, %edx
    00000035: 	cmplesd	%xmm1, %xmm3
    0000003a: 	cmpnlesd	%xmm0, %xmm1
    0000003f: 	andpd	%xmm3, %xmm4
    00000043: 	andnpd	%xmm0, %xmm3
    00000047: 	andpd	%xmm1, %xmm2
    0000004b: 	orpd	%xmm4, %xmm3
    0000004f: 	andnpd	%xmm0, %xmm1
    00000053: 	ucomisd	%xmm3, %xmm0
    00000057: 	orpd	%xmm1, %xmm2
    0000005b: 	setp	%al
    0000005e: 	cmovnel	%edx, %eax
    00000061: 	testb	%al, %al
    00000063: 	jne	.Ltmp487 # Offset: 99
    00000065: 	ucomisd	%xmm2, %xmm0
    00000069: 	setp	%al
    0000006c: 	cmovnel	%edx, %eax
    0000006f: 	testb	%al, %al
    00000071: 	jne	.Ltmp487 # Offset: 113
    00000073: 	retq # Offset: 115
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp487:
    00000078: 	movq	%rdi, %rdx
    0000007b: 	leaq	DATAat0xa4da(%rip), %rsi
    00000082: 	movl	$0x1, %edi
    00000087: 	xorl	%eax, %eax
    00000089: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 137
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueId12abs_functor8IdEEvPKcT_"

Binary Function "_Z18validate_abs_valueId12abs_functor9IdEEvPKcT_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x90b0
  Size        : 0x8e
  MaxSize     : 0x8e
  Offset      : 0x90b0
  Section     : .text
  Orc Section : .local.text._Z18validate_abs_valueId12abs_functor9IdEEvPKcT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pxor	%xmm1, %xmm1
    00000008: 	movapd	%xmm0, %xmm2
    0000000c: 	xorpd	DATAat0xa5f0(%rip), %xmm2
    00000014: 	comisd	%xmm0, %xmm1
    00000018: 	jbe	.Ltmp488 # Offset: 24
    0000001a: 	movq	%xmm0, %rax
    0000001f: 	movapd	%xmm2, %xmm0
    00000023: 	movq	%rax, %xmm2
.Ltmp488:
    00000028: 	movapd	%xmm0, %xmm3
    0000002c: 	movapd	%xmm2, %xmm4
    00000030: 	movl	$0x1, %edx
    00000035: 	cmplesd	%xmm1, %xmm3
    0000003a: 	cmpnlesd	%xmm0, %xmm1
    0000003f: 	andpd	%xmm3, %xmm4
    00000043: 	andnpd	%xmm0, %xmm3
    00000047: 	andpd	%xmm1, %xmm2
    0000004b: 	orpd	%xmm4, %xmm3
    0000004f: 	andnpd	%xmm0, %xmm1
    00000053: 	ucomisd	%xmm3, %xmm0
    00000057: 	orpd	%xmm1, %xmm2
    0000005b: 	setp	%al
    0000005e: 	cmovnel	%edx, %eax
    00000061: 	testb	%al, %al
    00000063: 	jne	.Ltmp489 # Offset: 99
    00000065: 	ucomisd	%xmm2, %xmm0
    00000069: 	setp	%al
    0000006c: 	cmovnel	%edx, %eax
    0000006f: 	testb	%al, %al
    00000071: 	jne	.Ltmp489 # Offset: 113
    00000073: 	retq # Offset: 115
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp489:
    00000078: 	movq	%rdi, %rdx
    0000007b: 	leaq	DATAat0xa4da(%rip), %rsi
    00000082: 	movl	$0x1, %edi
    00000087: 	xorl	%eax, %eax
    00000089: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 137
DWARF CFI Instructions:
    <empty>
End of Function "_Z18validate_abs_valueId12abs_functor9IdEEvPKcT_"

Binary Function "_fini" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x9140
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x9140
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 73 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 394 instructions were shortened
BOLT-INFO: removed 91 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 70 out of 83 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x20247c
