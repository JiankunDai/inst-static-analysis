BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: split function detected on input : main.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x2000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x2000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0xfff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "_start" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x3840
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3840
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0xffe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x3870
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3870
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp48 # Offset: 17
    00000013: 	movq	DATAat0xffe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp48 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp48:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x38a0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x38a0
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp49 # Offset: 34
    00000024: 	movq	DATAat0xfff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp49 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp49:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x38e0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x38e0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp50 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp51 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp51:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp50:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x3920
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x3920
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x3930
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x3930
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x3950
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x3950
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0xd2d8(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x3990
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x3990
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp52 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp53 # Offset: 38
.Ltmp52:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp54 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp53:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp54:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0xd008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x3a30
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x3a30
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp55 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp56 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp57:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp57 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp70:
    00000069: 	leaq	DATAat0xd152(%rip), %rbp
    00000070: 	leaq	DATAat0xd028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0xd068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp58 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0xd2f0(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0xd098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0xd2d8(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp59 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp63:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp60 # Offset: 244
    000000fa: 	movq	DATAat0xd2e0(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp64:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0xd2e0(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp61 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp61:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0xd137(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0xd2f0(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp62 # Offset: 398
.Ltmp59:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp63 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp64 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp60:
    000001c8: 	movq	DATAat0xd2e8(%rip), %rsi
    000001cf: 	movq	DATAat0xd2e0(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp61 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp62:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp58 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp65 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp66:
    00000210: 	addq	$0x10, %rax
.Ltmp65:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp66 # Offset: 542
.Ltmp71:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0xd0c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp67 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp68 # Offset: 592
.Ltmp67:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp55:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp68:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp69:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp69 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0xd112(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp55 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp56:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp70 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp58:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp71 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x3d60
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x3d60
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp72 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp73 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp74:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp74 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp79:
    0000006a: 	leaq	DATAat0xd152(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0xd0f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0xd138(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0xd152(%rip), %r8
    000000a1: 	leaq	DATAat0xd126(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp75 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp76:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0xd137(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp76 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp75 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp77 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp78:
    00000140: 	addq	$0x10, %rax
.Ltmp77:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp78 # Offset: 334
.Ltmp80:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0xd0c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp72:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp73:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp79 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp75:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp80 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z13srand32_localj" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x3f10
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x3f10
  Section     : .text
  Orc Section : .local.text._Z13srand32_localj
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	movl	%edi, "_ZL11gRand32Seed/1"(%rip)
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z13srand32_localj"

Binary Function "_Z12rand32_localv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x3f20
  Size        : 0x1c
  MaxSize     : 0x20
  Offset      : 0x3f20
  Section     : .text
  Orc Section : .local.text._Z12rand32_localv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	movl	"_ZL11gRand32Seed/1"(%rip), %eax
    0000000a: 	imull	$0x41c64e6d, %eax, %eax
    00000010: 	addl	$0x3039, %eax
    00000015: 	movl	%eax, "_ZL11gRand32Seed/1"(%rip)
    0000001b: 	retq # Offset: 27
DWARF CFI Instructions:
    <empty>
End of Function "_Z12rand32_localv"

Binary Function "_Z13srand64_localm" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x3f40
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x3f40
  Section     : .text
  Orc Section : .local.text._Z13srand64_localm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZL11gRand64Seed/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_Z13srand64_localm"

Binary Function "_Z12rand64_localv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x3f50
  Size        : 0x2e
  MaxSize     : 0x30
  Offset      : 0x3f50
  Section     : .text
  Orc Section : .local.text._Z12rand64_localv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	"_ZL11gRand64Seed/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, "_ZL11gRand64Seed/1"(%rip)
    0000002d: 	retq # Offset: 45
DWARF CFI Instructions:
    <empty>
End of Function "_Z12rand64_localv"

Binary Function "_Z13randr32_localPj" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x3f80
  Size        : 0x4c
  MaxSize     : 0x50
  Offset      : 0x3f80
  Section     : .text
  Orc Section : .local.text._Z13randr32_localPj
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	imull	$0x41c64e6d, (%rdi), %edx
    0000000a: 	addl	$0x3039, %edx
    00000010: 	imull	$0x41c64e6d, %edx, %eax
    00000016: 	shrl	$0x6, %edx
    00000019: 	andl	$0x1ffc00, %edx
    0000001f: 	addl	$0x3039, %eax
    00000024: 	movl	%eax, %ecx
    00000026: 	imull	$0x41c64e6d, %eax, %eax
    0000002c: 	shrl	$0x10, %ecx
    0000002f: 	andl	$0x3ff, %ecx
    00000035: 	addl	$0x3039, %eax
    0000003a: 	orl	%ecx, %edx
    0000003c: 	movl	%eax, (%rdi)
    0000003e: 	shrl	$0x10, %eax
    00000041: 	shll	$0xa, %edx
    00000044: 	andl	$0x3ff, %eax
    00000049: 	xorl	%edx, %eax
    0000004b: 	retq # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z13randr32_localPj"

Binary Function "_ZNSt24uniform_int_distributionIiEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEiRT_RKNS0_10param_typeE.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt24uniform_int_distributionIiEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEiRT_RKNS0_10param_typeE.isra.0/1
                _ZNSt24uniform_int_distributionIiEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEiRT_RKNS0_10param_typeE.isra.0/random_numbers.cpp/1
  Number      : 19
  State       : disassembled
  Address     : 0x3fd0
  Size        : 0x36e
  MaxSize     : 0x370
  Offset      : 0x3fd0
  Section     : .text
  Orc Section : .local.text._ZNSt24uniform_int_distributionIiEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEiRT_RKNS0_10param_typeE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	pushq	%r15
    00000002: 	movslq	%esi, %rax
    00000005: 	pushq	%r14
    00000007: 	movslq	%edx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	subq	%rax, %r14
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	movq	%rax, %rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdi, %rbx
    00000019: 	subq	$0x28, %rsp
    0000001d: 	cmpq	$0x7ffffffc, %r14
    00000024: 	ja	.Ltmp81 # Offset: 36
    0000002a: 	leaq	0x1(%r14), %rcx
    0000002e: 	movl	$0x7ffffffd, %eax
    00000033: 	xorl	%edx, %edx
    00000035: 	movq	0x808(%rbx), %r10
    0000003c: 	divq	%rcx
    0000003f: 	movsd	DATAat0xd2c0(%rip), %xmm3
    00000047: 	movq	(%rbx), %rdx
    0000004a: 	movsd	DATAat0xd2c8(%rip), %xmm2
    00000052: 	movsd	DATAat0xd2d0(%rip), %xmm1
    0000005a: 	movabsq	$-0x8000000000000000, %r8
    00000064: 	movabsq	$0x200000005, %rsi
    0000006e: 	imulq	%rax, %rcx
    00000072: 	movq	%rax, %rdi
    00000075: 	leaq	-0x1(%r10), %rax
    00000079: 	jmp	.Ltmp82 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp85:
    00000080: 	cvttsd2si	%xmm0, %r9
.Ltmp86:
    00000085: 	imulq	$0x41a7, %rdx, %r11
    0000008c: 	movq	0x8(%rbx,%r9,8), %r10
    00000091: 	movq	%r11, %rax
    00000094: 	mulq	%rsi
    00000097: 	movq	%r11, %rax
    0000009a: 	subq	%rdx, %rax
    0000009d: 	shrq	%rax
    000000a0: 	addq	%rax, %rdx
    000000a3: 	shrq	$0x1e, %rdx
    000000a7: 	movq	%rdx, %rax
    000000aa: 	shlq	$0x1f, %rax
    000000ae: 	subq	%rdx, %rax
    000000b1: 	movq	%r11, %rdx
    000000b4: 	subq	%rax, %rdx
    000000b7: 	leaq	-0x1(%r10), %rax
    000000bb: 	movq	%rdx, 0x8(%rbx,%r9,8)
    000000c0: 	cmpq	%rax, %rcx
    000000c3: 	ja	.Ltmp83 # Offset: 195
.Ltmp82:
    000000c9: 	testq	%rax, %rax
    000000cc: 	js	.Ltmp84 # Offset: 204
    000000ce: 	pxor	%xmm0, %xmm0
    000000d2: 	cvtsi2sd	%rax, %xmm0
.Ltmp87:
    000000d7: 	divsd	%xmm3, %xmm0
    000000db: 	mulsd	%xmm2, %xmm0
    000000df: 	comisd	%xmm1, %xmm0
    000000e3: 	jb	.Ltmp85 # Offset: 227
    000000e5: 	subsd	%xmm1, %xmm0
    000000e9: 	cvttsd2si	%xmm0, %r9
    000000ee: 	xorq	%r8, %r9
    000000f1: 	jmp	.Ltmp86 # Offset: 241
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp84:
    000000f8: 	movq	%rax, %r9
    000000fb: 	andl	$0x1, %eax
    000000fe: 	pxor	%xmm0, %xmm0
    00000102: 	shrq	%r9
    00000105: 	orq	%rax, %r9
    00000108: 	cvtsi2sd	%r9, %xmm0
    0000010d: 	addsd	%xmm0, %xmm0
    00000111: 	jmp	.Ltmp87 # Offset: 273
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp81:
    00000118: 	cmpq	$0x7ffffffd, %r14
    0000011f: 	je	.Ltmp88 # Offset: 287
    00000125: 	movq	%r14, %rdx
    00000128: 	movsd	DATAat0xd2c0(%rip), %xmm3
    00000130: 	movabsq	$-0x7ffffffdfffffff7, %rcx
    0000013a: 	movsd	DATAat0xd2c8(%rip), %xmm2
    00000142: 	shrq	%rdx
    00000145: 	movsd	DATAat0xd2d0(%rip), %xmm1
    0000014d: 	movabsq	$-0x8000000000000000, %r13
    00000157: 	movabsq	$0x200000005, %r12
    00000161: 	movq	%rdx, %rax
    00000164: 	mulq	%rcx
    00000167: 	shrq	$0x1d, %rdx
    0000016b: 	movl	%edx, %r15d
.Ltmp91:
    0000016e: 	xorl	%esi, %esi
    00000170: 	movl	%r15d, %edx
    00000173: 	movq	%rbx, %rdi
    00000176: 	movsd	%xmm1, 0x18(%rsp)
    0000017c: 	movsd	%xmm2, 0x10(%rsp)
    00000182: 	movsd	%xmm3, 0x8(%rsp)
    00000188: 	callq	"_ZNSt24uniform_int_distributionIiEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEiRT_RKNS0_10param_typeE.isra.0/1" # Offset: 392
    0000018d: 	movsd	0x8(%rsp), %xmm3
    00000193: 	movsd	0x10(%rsp), %xmm2
    00000199: 	movslq	%eax, %rsi
    0000019c: 	movq	0x808(%rbx), %rax
    000001a3: 	movsd	0x18(%rsp), %xmm1
    000001a9: 	subq	$0x1, %rax
    000001ad: 	js	.Ltmp89 # Offset: 429
    000001b3: 	pxor	%xmm0, %xmm0
    000001b7: 	cvtsi2sd	%rax, %xmm0
.Ltmp94:
    000001bc: 	divsd	%xmm3, %xmm0
    000001c0: 	mulsd	%xmm2, %xmm0
    000001c4: 	comisd	%xmm1, %xmm0
    000001c8: 	jae	.Ltmp90 # Offset: 456
    000001ce: 	cvttsd2si	%xmm0, %rdi
.Ltmp93:
    000001d3: 	imulq	$0x41a7, (%rbx), %r8
    000001da: 	movq	0x8(%rbx,%rdi,8), %rcx
    000001df: 	movq	%rcx, 0x808(%rbx)
    000001e6: 	subq	$0x1, %rcx
    000001ea: 	movq	%r8, %rax
    000001ed: 	mulq	%r12
    000001f0: 	movq	%r8, %rax
    000001f3: 	subq	%rdx, %rax
    000001f6: 	shrq	%rax
    000001f9: 	addq	%rax, %rdx
    000001fc: 	shrq	$0x1e, %rdx
    00000200: 	movq	%rdx, %rax
    00000203: 	shlq	$0x1f, %rax
    00000207: 	subq	%rdx, %rax
    0000020a: 	movq	%r8, %rdx
    0000020d: 	subq	%rax, %rdx
    00000210: 	movq	%rsi, %rax
    00000213: 	shlq	$0x1e, %rax
    00000217: 	movq	%rdx, (%rbx)
    0000021a: 	subq	%rsi, %rax
    0000021d: 	movq	%rdx, 0x8(%rbx,%rdi,8)
    00000222: 	xorl	%edx, %edx
    00000224: 	addq	%rax, %rax
    00000227: 	addq	%rcx, %rax
    0000022a: 	setb	%dl
    0000022d: 	cmpq	%rax, %r14
    00000230: 	jb	.Ltmp91 # Offset: 560
    00000236: 	testq	%rdx, %rdx
    00000239: 	jne	.Ltmp91 # Offset: 569
    0000023f: 	jmp	.Ltmp92 # Offset: 575
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp83:
    00000248: 	movq	%rdx, (%rbx)
    0000024b: 	xorl	%edx, %edx
    0000024d: 	divq	%rdi
    00000250: 	movq	%r10, 0x808(%rbx)
.Ltmp92:
    00000257: 	addq	$0x28, %rsp
    0000025b: 	addl	%ebp, %eax
    0000025d: 	popq	%rbx
    0000025e: 	popq	%rbp
    0000025f: 	popq	%r12
    00000261: 	popq	%r13
    00000263: 	popq	%r14
    00000265: 	popq	%r15
    00000267: 	retq # Offset: 615
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp90:
    00000270: 	subsd	%xmm1, %xmm0
    00000274: 	cvttsd2si	%xmm0, %rdi
    00000279: 	xorq	%r13, %rdi
    0000027c: 	jmp	.Ltmp93 # Offset: 636
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp89:
    00000288: 	movq	%rax, %rdx
    0000028b: 	andl	$0x1, %eax
    0000028e: 	pxor	%xmm0, %xmm0
    00000292: 	shrq	%rdx
    00000295: 	orq	%rax, %rdx
    00000298: 	cvtsi2sd	%rdx, %xmm0
    0000029d: 	addsd	%xmm0, %xmm0
    000002a1: 	jmp	.Ltmp94 # Offset: 673
    000002a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp88:
    000002b0: 	movq	0x808(%rdi), %rax
    000002b7: 	subq	$0x1, %rax
    000002bb: 	js	.Ltmp95 # Offset: 699
    000002c1: 	pxor	%xmm0, %xmm0
    000002c5: 	cvtsi2sd	%rax, %xmm0
.Ltmp98:
    000002ca: 	divsd	DATAat0xd2c0(%rip), %xmm0
    000002d2: 	mulsd	DATAat0xd2c8(%rip), %xmm0
    000002da: 	movsd	DATAat0xd2d0(%rip), %xmm1
    000002e2: 	comisd	%xmm1, %xmm0
    000002e6: 	jae	.Ltmp96 # Offset: 742
    000002e8: 	cvttsd2si	%xmm0, %rdi
.Ltmp97:
    000002ed: 	imulq	$0x41a7, (%rbx), %rsi
    000002f4: 	movq	0x8(%rbx,%rdi,8), %rcx
    000002f9: 	movabsq	$0x200000005, %rdx
    00000303: 	movq	%rcx, 0x808(%rbx)
    0000030a: 	movq	%rsi, %rax
    0000030d: 	mulq	%rdx
    00000310: 	movq	%rsi, %rax
    00000313: 	subq	%rdx, %rax
    00000316: 	shrq	%rax
    00000319: 	addq	%rax, %rdx
    0000031c: 	shrq	$0x1e, %rdx
    00000320: 	movq	%rdx, %rax
    00000323: 	shlq	$0x1f, %rax
    00000327: 	subq	%rdx, %rax
    0000032a: 	subq	%rax, %rsi
    0000032d: 	leaq	-0x1(%rcx), %rax
    00000331: 	movq	%rsi, (%rbx)
    00000334: 	movq	%rsi, 0x8(%rbx,%rdi,8)
    00000339: 	jmp	.Ltmp92 # Offset: 825
    0000033e: 	nop # Size: 2
.Ltmp96:
    00000340: 	subsd	%xmm1, %xmm0
    00000344: 	cvttsd2si	%xmm0, %rdi
    00000349: 	btcq	$0x3f, %rdi
    0000034e: 	jmp	.Ltmp97 # Offset: 846
.Ltmp95:
    00000350: 	movq	%rax, %rdx
    00000353: 	andl	$0x1, %eax
    00000356: 	pxor	%xmm0, %xmm0
    0000035a: 	shrq	%rdx
    0000035d: 	orq	%rax, %rdx
    00000360: 	cvtsi2sd	%rdx, %xmm0
    00000365: 	addsd	%xmm0, %xmm0
    00000369: 	jmp	.Ltmp98 # Offset: 873
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt24uniform_int_distributionIiEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEiRT_RKNS0_10param_typeE.isra.0/1(*2)"

Binary Function "_ZNSt24uniform_int_distributionIiEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEiRT_RKNS0_10param_typeE.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt24uniform_int_distributionIiEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEiRT_RKNS0_10param_typeE.isra.0/1
                _ZNSt24uniform_int_distributionIiEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEiRT_RKNS0_10param_typeE.isra.0/random_numbers.cpp/1
  Number      : 20
  State       : disassembled
  Address     : 0x4340
  Size        : 0xba6
  MaxSize     : 0xbb0
  Offset      : 0x4340
  Section     : .text
  Orc Section : .local.text._ZNSt24uniform_int_distributionIiEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEiRT_RKNS0_10param_typeE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	pushq	%r15
    00000002: 	movslq	%edx, %rax
    00000005: 	movslq	%esi, %rdx
    00000008: 	pushq	%r14
    0000000a: 	subq	%rdx, %rax
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x78, %rsp
    00000017: 	movl	%esi, 0x60(%rsp)
    0000001b: 	movq	%rax, 0x28(%rsp)
    00000020: 	cmpq	$0x7ffffffc, %rax
    00000026: 	ja	.Ltmp99 # Offset: 38
    00000028: 	movabsq	$0x200000005, %r8
    00000032: 	movq	%rax, %rsi
    00000035: 	xorl	%edx, %edx
    00000037: 	movl	$0x7ffffffd, %eax
    0000003c: 	addq	$0x1, %rsi
    00000040: 	divq	%rsi
    00000043: 	movq	(%rdi), %rdx
    00000046: 	imulq	%rax, %rsi
    0000004a: 	movq	%rax, %r9
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp100:
    00000050: 	imulq	$0xbc8f, %rdx, %rcx
    00000057: 	movq	%rcx, %rax
    0000005a: 	mulq	%r8
    0000005d: 	movq	%rcx, %rax
    00000060: 	subq	%rdx, %rax
    00000063: 	shrq	%rax
    00000066: 	addq	%rax, %rdx
    00000069: 	shrq	$0x1e, %rdx
    0000006d: 	movq	%rdx, %rax
    00000070: 	shlq	$0x1f, %rax
    00000074: 	subq	%rdx, %rax
    00000077: 	movq	%rcx, %rdx
    0000007a: 	subq	%rax, %rdx
    0000007d: 	leaq	-0x1(%rdx), %rax
    00000081: 	cmpq	%rax, %rsi
    00000084: 	jbe	.Ltmp100 # Offset: 132
    00000086: 	movq	%rdx, (%rdi)
    00000089: 	xorl	%edx, %edx
    0000008b: 	divq	%r9
.Ltmp105:
    0000008e: 	addl	0x60(%rsp), %eax
    00000092: 	addq	$0x78, %rsp
    00000096: 	popq	%rbx
    00000097: 	popq	%rbp
    00000098: 	popq	%r12
    0000009a: 	popq	%r13
    0000009c: 	popq	%r14
    0000009e: 	popq	%r15
    000000a0: 	retq # Offset: 160
.Ltmp99:
    000000a1: 	cmpq	$0x7ffffffd, %rax
    000000a7: 	je	.Ltmp101 # Offset: 167
    000000ad: 	movabsq	$-0x7ffffffdfffffff7, %rcx
    000000b7: 	shrq	%rax
    000000ba: 	mulq	%rcx
    000000bd: 	shrq	$0x1d, %rdx
    000000c1: 	movslq	%edx, %rbx
    000000c4: 	movq	%rbx, %rdx
    000000c7: 	movq	%rbx, 0x18(%rsp)
    000000cc: 	shrq	%rdx
    000000cf: 	movq	%rdx, %rax
    000000d2: 	mulq	%rcx
    000000d5: 	shrq	$0x1d, %rdx
    000000d9: 	movslq	%edx, %rsi
    000000dc: 	movq	%rsi, %rdx
    000000df: 	movq	%rsi, 0x8(%rsp)
    000000e4: 	shrq	%rdx
    000000e7: 	movq	%rdx, %rax
    000000ea: 	mulq	%rcx
    000000ed: 	shrq	$0x1d, %rdx
    000000f1: 	movslq	%edx, %r11
    000000f4: 	movq	%r11, %rdx
    000000f7: 	movq	%r11, (%rsp)
    000000fb: 	shrq	%rdx
    000000fe: 	movq	%rdx, %rax
    00000101: 	mulq	%rcx
    00000104: 	shrq	$0x1d, %rdx
    00000108: 	movslq	%edx, %r9
    0000010b: 	movq	%r9, %rdx
    0000010e: 	shrq	%rdx
    00000111: 	movq	%rdx, %rax
    00000114: 	mulq	%rcx
    00000117: 	shrq	$0x1d, %rdx
    0000011b: 	movslq	%edx, %r8
    0000011e: 	movq	%r8, %rdx
    00000121: 	shrq	%rdx
    00000124: 	movq	%rdx, %rax
    00000127: 	mulq	%rcx
    0000012a: 	shrq	$0x1d, %rdx
    0000012e: 	movslq	%edx, %r14
    00000131: 	movq	%r14, %rdx
    00000134: 	shrq	%rdx
    00000137: 	movq	%rdx, %rax
    0000013a: 	mulq	%rcx
    0000013d: 	shrq	$0x1d, %rdx
    00000141: 	movslq	%edx, %rbp
    00000144: 	movq	%rbp, %rdx
    00000147: 	leaq	0x1(%rbp), %r15
    0000014b: 	shrq	%rdx
    0000014e: 	movq	%rdx, %rax
    00000151: 	mulq	%rcx
    00000154: 	shrq	$0x1d, %rdx
    00000158: 	movslq	%edx, %r12
    0000015b: 	movq	%r12, %rdx
    0000015e: 	leaq	0x1(%r12), %r13
    00000163: 	shrq	%rdx
    00000166: 	movq	%rdx, %rax
    00000169: 	mulq	%rcx
    0000016c: 	leaq	0x1(%r14), %rax
    00000170: 	movq	%rax, 0x10(%rsp)
    00000175: 	leaq	0x1(%r8), %rax
    00000179: 	movq	%rax, 0x20(%rsp)
    0000017e: 	leaq	0x1(%r9), %rax
    00000182: 	movq	%rax, 0x30(%rsp)
    00000187: 	leaq	0x1(%r11), %rax
    0000018b: 	shrq	$0x1d, %rdx
    0000018f: 	movq	%rax, 0x38(%rsp)
    00000194: 	leaq	0x1(%rsi), %rax
    00000198: 	movq	%rax, 0x58(%rsp)
    0000019d: 	leaq	0x1(%rbx), %rax
    000001a1: 	movabsq	$0x200000005, %rbx
    000001ab: 	movl	%edx, 0x64(%rsp)
    000001af: 	movq	%rax, 0x68(%rsp)
.Ltmp104:
    000001b4: 	cmpq	$0x7ffffffc, 0x18(%rsp)
    000001bd: 	ja	.Ltmp102 # Offset: 445
    000001c3: 	movq	0x68(%rsp), %rcx
    000001c8: 	movl	$0x7ffffffd, %eax
    000001cd: 	xorl	%edx, %edx
    000001cf: 	movq	(%rdi), %rsi
    000001d2: 	divq	%rcx
    000001d5: 	imulq	%rax, %rcx
    000001d9: 	movq	%rax, %r11
    000001dc: 	movq	%rcx, %r10
    000001df: 	nop # Size: 1
.Ltmp103:
    000001e0: 	imulq	$0xbc8f, %rsi, %rcx
    000001e7: 	movq	%rcx, %rax
    000001ea: 	mulq	%rbx
    000001ed: 	movq	%rcx, %rax
    000001f0: 	subq	%rdx, %rax
    000001f3: 	shrq	%rax
    000001f6: 	leaq	(%rdx,%rax), %rsi
    000001fa: 	shrq	$0x1e, %rsi
    000001fe: 	movq	%rsi, %rax
    00000201: 	shlq	$0x1f, %rax
    00000205: 	subq	%rsi, %rax
    00000208: 	movq	%rcx, %rsi
    0000020b: 	subq	%rax, %rsi
    0000020e: 	leaq	-0x1(%rsi), %rax
    00000212: 	cmpq	%rax, %r10
    00000215: 	jbe	.Ltmp103 # Offset: 533
    00000217: 	xorl	%edx, %edx
    00000219: 	divq	%r11
    0000021c: 	movq	%rax, %rcx
.Ltmp110:
    0000021f: 	imulq	$0xbc8f, %rsi, %rsi
    00000226: 	movslq	%ecx, %rcx
    00000229: 	movq	%rsi, %rax
    0000022c: 	mulq	%rbx
    0000022f: 	movq	%rsi, %rax
    00000232: 	subq	%rdx, %rax
    00000235: 	shrq	%rax
    00000238: 	addq	%rdx, %rax
    0000023b: 	shrq	$0x1e, %rax
    0000023f: 	movq	%rax, %rdx
    00000242: 	shlq	$0x1f, %rdx
    00000246: 	subq	%rax, %rdx
    00000249: 	movq	%rsi, %rax
    0000024c: 	subq	%rdx, %rax
    0000024f: 	movq	%rcx, %rdx
    00000252: 	shlq	$0x1e, %rdx
    00000256: 	movq	%rax, (%rdi)
    00000259: 	subq	$0x1, %rax
    0000025d: 	subq	%rcx, %rdx
    00000260: 	addq	%rdx, %rdx
    00000263: 	addq	%rax, %rdx
    00000266: 	setb	%al
    00000269: 	movzbl	%al, %eax
    0000026c: 	cmpq	%rdx, 0x28(%rsp)
    00000271: 	jb	.Ltmp104 # Offset: 625
    00000277: 	testq	%rax, %rax
    0000027a: 	jne	.Ltmp104 # Offset: 634
    00000280: 	movq	%rdx, %rax
    00000283: 	jmp	.Ltmp105 # Offset: 643
.Ltmp102:
    00000288: 	cmpq	$0x7ffffffd, 0x18(%rsp)
    00000291: 	je	.Ltmp106 # Offset: 657
.Ltmp109:
    00000297: 	cmpq	$0x7ffffffc, 0x8(%rsp)
    000002a0: 	ja	.Ltmp107 # Offset: 672
    000002a6: 	movq	0x58(%rsp), %rsi
    000002ab: 	movl	$0x7ffffffd, %eax
    000002b0: 	xorl	%edx, %edx
    000002b2: 	movq	(%rdi), %rcx
    000002b5: 	divq	%rsi
    000002b8: 	imulq	%rax, %rsi
    000002bc: 	movq	%rax, %r11
    000002bf: 	movq	%rsi, %r10
    000002c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp108:
    000002c8: 	imulq	$0xbc8f, %rcx, %rsi
    000002cf: 	movq	%rsi, %rax
    000002d2: 	mulq	%rbx
    000002d5: 	movq	%rsi, %rax
    000002d8: 	subq	%rdx, %rax
    000002db: 	shrq	%rax
    000002de: 	leaq	(%rdx,%rax), %rcx
    000002e2: 	shrq	$0x1e, %rcx
    000002e6: 	movq	%rcx, %rax
    000002e9: 	shlq	$0x1f, %rax
    000002ed: 	subq	%rcx, %rax
    000002f0: 	movq	%rsi, %rcx
    000002f3: 	subq	%rax, %rcx
    000002f6: 	leaq	-0x1(%rcx), %rax
    000002fa: 	cmpq	%rax, %r10
    000002fd: 	jbe	.Ltmp108 # Offset: 765
    000002ff: 	xorl	%edx, %edx
    00000301: 	divq	%r11
    00000304: 	movq	%rax, %r10
.Ltmp115:
    00000307: 	imulq	$0xbc8f, %rcx, %rcx
    0000030e: 	movslq	%r10d, %r10
    00000311: 	movq	%rcx, %rax
    00000314: 	mulq	%rbx
    00000317: 	movq	%rcx, %rax
    0000031a: 	subq	%rdx, %rax
    0000031d: 	shrq	%rax
    00000320: 	leaq	(%rdx,%rax), %rsi
    00000324: 	shrq	$0x1e, %rsi
    00000328: 	movq	%rsi, %rax
    0000032b: 	shlq	$0x1f, %rax
    0000032f: 	subq	%rsi, %rax
    00000332: 	subq	%rax, %rcx
    00000335: 	movq	%r10, %rax
    00000338: 	shlq	$0x1e, %rax
    0000033c: 	leaq	-0x1(%rcx), %rdx
    00000340: 	movq	%rcx, (%rdi)
    00000343: 	movq	%rcx, %rsi
    00000346: 	subq	%r10, %rax
    00000349: 	addq	%rax, %rax
    0000034c: 	addq	%rdx, %rax
    0000034f: 	setb	%dl
    00000352: 	movzbl	%dl, %edx
    00000355: 	cmpq	%rax, 0x18(%rsp)
    0000035a: 	jb	.Ltmp109 # Offset: 858
    00000360: 	testq	%rdx, %rdx
    00000363: 	jne	.Ltmp109 # Offset: 867
    00000369: 	movq	%rax, %rcx
    0000036c: 	jmp	.Ltmp110 # Offset: 876
.Ltmp107:
    00000371: 	cmpq	$0x7ffffffd, 0x8(%rsp)
    0000037a: 	je	.Ltmp111 # Offset: 890
.Ltmp114:
    00000380: 	cmpq	$0x7ffffffc, (%rsp)
    00000388: 	ja	.Ltmp112 # Offset: 904
    0000038e: 	movq	0x38(%rsp), %rcx
    00000393: 	movl	$0x7ffffffd, %eax
    00000398: 	xorl	%edx, %edx
    0000039a: 	movq	(%rdi), %rsi
    0000039d: 	divq	%rcx
    000003a0: 	imulq	%rax, %rcx
    000003a4: 	movq	%rax, %r11
    000003a7: 	movq	%rcx, %r10
    000003aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp113:
    000003b0: 	imulq	$0xbc8f, %rsi, %rcx
    000003b7: 	movq	%rcx, %rax
    000003ba: 	mulq	%rbx
    000003bd: 	movq	%rcx, %rax
    000003c0: 	subq	%rdx, %rax
    000003c3: 	shrq	%rax
    000003c6: 	leaq	(%rdx,%rax), %rsi
    000003ca: 	shrq	$0x1e, %rsi
    000003ce: 	movq	%rsi, %rax
    000003d1: 	shlq	$0x1f, %rax
    000003d5: 	subq	%rsi, %rax
    000003d8: 	movq	%rcx, %rsi
    000003db: 	subq	%rax, %rsi
    000003de: 	leaq	-0x1(%rsi), %rax
    000003e2: 	cmpq	%rax, %r10
    000003e5: 	jbe	.Ltmp113 # Offset: 997
    000003e7: 	xorl	%edx, %edx
    000003e9: 	divq	%r11
    000003ec: 	movq	%rax, %r10
.Ltmp120:
    000003ef: 	imulq	$0xbc8f, %rsi, %rsi
    000003f6: 	movslq	%r10d, %r10
    000003f9: 	movq	%rsi, %rax
    000003fc: 	mulq	%rbx
    000003ff: 	movq	%rsi, %rax
    00000402: 	subq	%rdx, %rax
    00000405: 	shrq	%rax
    00000408: 	leaq	(%rdx,%rax), %rcx
    0000040c: 	movq	%r10, %rdx
    0000040f: 	shrq	$0x1e, %rcx
    00000413: 	shlq	$0x1e, %rdx
    00000417: 	movq	%rcx, %rax
    0000041a: 	subq	%r10, %rdx
    0000041d: 	shlq	$0x1f, %rax
    00000421: 	addq	%rdx, %rdx
    00000424: 	subq	%rcx, %rax
    00000427: 	subq	%rax, %rsi
    0000042a: 	leaq	-0x1(%rsi), %rax
    0000042e: 	movq	%rsi, (%rdi)
    00000431: 	movq	%rsi, %rcx
    00000434: 	addq	%rdx, %rax
    00000437: 	setb	%dl
    0000043a: 	movzbl	%dl, %edx
    0000043d: 	cmpq	%rax, 0x8(%rsp)
    00000442: 	jb	.Ltmp114 # Offset: 1090
    00000448: 	testq	%rdx, %rdx
    0000044b: 	jne	.Ltmp114 # Offset: 1099
    00000451: 	movq	%rax, %r10
    00000454: 	jmp	.Ltmp115 # Offset: 1108
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp112:
    00000460: 	cmpq	$0x7ffffffd, (%rsp)
    00000468: 	je	.Ltmp116 # Offset: 1128
.Ltmp119:
    0000046e: 	cmpq	$0x7ffffffc, %r9
    00000475: 	ja	.Ltmp117 # Offset: 1141
    0000047b: 	movq	0x30(%rsp), %rsi
    00000480: 	movl	$0x7ffffffd, %eax
    00000485: 	xorl	%edx, %edx
    00000487: 	movq	(%rdi), %rcx
    0000048a: 	divq	%rsi
    0000048d: 	imulq	%rax, %rsi
    00000491: 	movq	%rax, %r11
    00000494: 	movq	%rsi, %r10
    00000497: 	nopw	(%rax,%rax) # Size: 9
.Ltmp118:
    000004a0: 	imulq	$0xbc8f, %rcx, %rsi
    000004a7: 	movq	%rsi, %rax
    000004aa: 	mulq	%rbx
    000004ad: 	movq	%rsi, %rax
    000004b0: 	subq	%rdx, %rax
    000004b3: 	shrq	%rax
    000004b6: 	leaq	(%rdx,%rax), %rcx
    000004ba: 	shrq	$0x1e, %rcx
    000004be: 	movq	%rcx, %rax
    000004c1: 	shlq	$0x1f, %rax
    000004c5: 	subq	%rcx, %rax
    000004c8: 	movq	%rsi, %rcx
    000004cb: 	subq	%rax, %rcx
    000004ce: 	leaq	-0x1(%rcx), %rax
    000004d2: 	cmpq	%rax, %r10
    000004d5: 	jbe	.Ltmp118 # Offset: 1237
    000004d7: 	xorl	%edx, %edx
    000004d9: 	divq	%r11
    000004dc: 	movq	%rax, %r10
.Ltmp125:
    000004df: 	imulq	$0xbc8f, %rcx, %rcx
    000004e6: 	movslq	%r10d, %r10
    000004e9: 	movq	%rcx, %rax
    000004ec: 	mulq	%rbx
    000004ef: 	movq	%rcx, %rax
    000004f2: 	subq	%rdx, %rax
    000004f5: 	shrq	%rax
    000004f8: 	leaq	(%rdx,%rax), %rsi
    000004fc: 	movq	%r10, %rdx
    000004ff: 	shrq	$0x1e, %rsi
    00000503: 	shlq	$0x1e, %rdx
    00000507: 	movq	%rsi, %rax
    0000050a: 	subq	%r10, %rdx
    0000050d: 	shlq	$0x1f, %rax
    00000511: 	addq	%rdx, %rdx
    00000514: 	subq	%rsi, %rax
    00000517: 	movq	%rcx, %rsi
    0000051a: 	subq	%rax, %rsi
    0000051d: 	leaq	-0x1(%rsi), %rax
    00000521: 	movq	%rsi, (%rdi)
    00000524: 	addq	%rdx, %rax
    00000527: 	setb	%dl
    0000052a: 	movzbl	%dl, %edx
    0000052d: 	cmpq	%rax, (%rsp)
    00000531: 	jb	.Ltmp119 # Offset: 1329
    00000537: 	testq	%rdx, %rdx
    0000053a: 	jne	.Ltmp119 # Offset: 1338
    00000540: 	movq	%rax, %r10
    00000543: 	jmp	.Ltmp120 # Offset: 1347
    00000548: 	nopl	(%rax,%rax) # Size: 8
.Ltmp117:
    00000550: 	cmpq	$0x7ffffffd, %r9
    00000557: 	je	.Ltmp121 # Offset: 1367
.Ltmp124:
    0000055d: 	cmpq	$0x7ffffffc, %r8
    00000564: 	ja	.Ltmp122 # Offset: 1380
    0000056a: 	movq	0x20(%rsp), %rcx
    0000056f: 	movl	$0x7ffffffd, %eax
    00000574: 	xorl	%edx, %edx
    00000576: 	movq	(%rdi), %rsi
    00000579: 	divq	%rcx
    0000057c: 	imulq	%rax, %rcx
    00000580: 	movq	%rax, %r11
    00000583: 	movq	%rcx, %r10
    00000586: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp123:
    00000590: 	imulq	$0xbc8f, %rsi, %rcx
    00000597: 	movq	%rcx, %rax
    0000059a: 	mulq	%rbx
    0000059d: 	movq	%rcx, %rax
    000005a0: 	subq	%rdx, %rax
    000005a3: 	shrq	%rax
    000005a6: 	leaq	(%rdx,%rax), %rsi
    000005aa: 	shrq	$0x1e, %rsi
    000005ae: 	movq	%rsi, %rax
    000005b1: 	shlq	$0x1f, %rax
    000005b5: 	subq	%rsi, %rax
    000005b8: 	subq	%rax, %rcx
    000005bb: 	leaq	-0x1(%rcx), %rax
    000005bf: 	movq	%rcx, %rsi
    000005c2: 	cmpq	%rax, %r10
    000005c5: 	jbe	.Ltmp123 # Offset: 1477
    000005c7: 	xorl	%edx, %edx
    000005c9: 	divq	%r11
    000005cc: 	movq	%rax, %r10
.Ltmp130:
    000005cf: 	imulq	$0xbc8f, %rsi, %rsi
    000005d6: 	movq	%rsi, %rax
    000005d9: 	mulq	%rbx
    000005dc: 	movq	%rsi, %rax
    000005df: 	subq	%rdx, %rax
    000005e2: 	shrq	%rax
    000005e5: 	leaq	(%rdx,%rax), %rcx
    000005e9: 	shrq	$0x1e, %rcx
    000005ed: 	movq	%rcx, %rax
    000005f0: 	shlq	$0x1f, %rax
    000005f4: 	subq	%rcx, %rax
    000005f7: 	subq	%rax, %rsi
    000005fa: 	movslq	%r10d, %rax
    000005fd: 	leaq	-0x1(%rsi), %rdx
    00000601: 	movq	%rsi, (%rdi)
    00000604: 	movq	%rsi, %rcx
    00000607: 	movq	%rax, %rsi
    0000060a: 	shlq	$0x1e, %rsi
    0000060e: 	subq	%rax, %rsi
    00000611: 	leaq	(%rsi,%rsi), %rax
    00000615: 	addq	%rax, %rdx
    00000618: 	setb	%al
    0000061b: 	movzbl	%al, %eax
    0000061e: 	cmpq	%rdx, %r9
    00000621: 	jb	.Ltmp124 # Offset: 1569
    00000627: 	testq	%rax, %rax
    0000062a: 	jne	.Ltmp124 # Offset: 1578
    00000630: 	movq	%rdx, %r10
    00000633: 	jmp	.Ltmp125 # Offset: 1587
    00000638: 	nopl	(%rax,%rax) # Size: 8
.Ltmp122:
    00000640: 	cmpq	$0x7ffffffd, %r8
    00000647: 	je	.Ltmp126 # Offset: 1607
.Ltmp129:
    0000064d: 	cmpq	$0x7ffffffc, %r14
    00000654: 	ja	.Ltmp127 # Offset: 1620
.Ltmp131:
    0000065a: 	movq	0x10(%rsp), %rcx
    0000065f: 	movl	$0x7ffffffd, %eax
    00000664: 	xorl	%edx, %edx
    00000666: 	divq	%rcx
    00000669: 	imulq	%rax, %rcx
    0000066d: 	movq	%rax, %r11
    00000670: 	movq	%rcx, %r10
    00000673: 	movq	(%rdi), %rcx
    00000676: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp128:
    00000680: 	imulq	$0xbc8f, %rcx, %rsi
    00000687: 	movq	%rsi, %rax
    0000068a: 	mulq	%rbx
    0000068d: 	movq	%rsi, %rax
    00000690: 	subq	%rdx, %rax
    00000693: 	shrq	%rax
    00000696: 	leaq	(%rdx,%rax), %rcx
    0000069a: 	shrq	$0x1e, %rcx
    0000069e: 	movq	%rcx, %rax
    000006a1: 	shlq	$0x1f, %rax
    000006a5: 	subq	%rcx, %rax
    000006a8: 	subq	%rax, %rsi
    000006ab: 	leaq	-0x1(%rsi), %rax
    000006af: 	movq	%rsi, %rcx
    000006b2: 	cmpq	%rax, %r10
    000006b5: 	jbe	.Ltmp128 # Offset: 1717
    000006b7: 	xorl	%edx, %edx
    000006b9: 	divq	%r11
    000006bc: 	movq	%rax, %r11
.Ltmp136:
    000006bf: 	imulq	$0xbc8f, %rcx, %rcx
    000006c6: 	movq	%rcx, %rax
    000006c9: 	mulq	%rbx
    000006cc: 	movq	%rcx, %rax
    000006cf: 	subq	%rdx, %rax
    000006d2: 	shrq	%rax
    000006d5: 	leaq	(%rdx,%rax), %rsi
    000006d9: 	shrq	$0x1e, %rsi
    000006dd: 	movq	%rsi, %rax
    000006e0: 	shlq	$0x1f, %rax
    000006e4: 	subq	%rsi, %rax
    000006e7: 	subq	%rax, %rcx
    000006ea: 	movslq	%r11d, %rax
    000006ed: 	movq	%rax, %rdx
    000006f0: 	leaq	-0x1(%rcx), %r10
    000006f4: 	movq	%rcx, (%rdi)
    000006f7: 	movq	%rcx, %rsi
    000006fa: 	shlq	$0x1e, %rdx
    000006fe: 	subq	%rax, %rdx
    00000701: 	leaq	(%rdx,%rdx), %rax
    00000705: 	addq	%rax, %r10
    00000708: 	setb	%al
    0000070b: 	movzbl	%al, %eax
    0000070e: 	cmpq	%r10, %r8
    00000711: 	jb	.Ltmp129 # Offset: 1809
    00000717: 	testq	%rax, %rax
    0000071a: 	je	.Ltmp130 # Offset: 1818
    00000720: 	cmpq	$0x7ffffffc, %r14
    00000727: 	jbe	.Ltmp131 # Offset: 1831
.Ltmp127:
    0000072d: 	cmpq	$0x7ffffffd, %r14
    00000734: 	je	.Ltmp132 # Offset: 1844
.Ltmp135:
    0000073a: 	cmpq	$0x7ffffffc, %rbp
    00000741: 	ja	.Ltmp133 # Offset: 1857
.Ltmp137:
    00000747: 	movl	$0x7ffffffd, %eax
    0000074c: 	xorl	%edx, %edx
    0000074e: 	movq	%r15, %r10
    00000751: 	movq	(%rdi), %rsi
    00000754: 	divq	%r15
    00000757: 	imulq	%rax, %r10
    0000075b: 	movq	%rax, %r11
    0000075e: 	nop # Size: 2
.Ltmp134:
    00000760: 	imulq	$0xbc8f, %rsi, %rcx
    00000767: 	movq	%rcx, %rax
    0000076a: 	mulq	%rbx
    0000076d: 	movq	%rcx, %rax
    00000770: 	subq	%rdx, %rax
    00000773: 	shrq	%rax
    00000776: 	leaq	(%rdx,%rax), %rsi
    0000077a: 	shrq	$0x1e, %rsi
    0000077e: 	movq	%rsi, %rax
    00000781: 	shlq	$0x1f, %rax
    00000785: 	subq	%rsi, %rax
    00000788: 	subq	%rax, %rcx
    0000078b: 	leaq	-0x1(%rcx), %rax
    0000078f: 	movq	%rcx, %rsi
    00000792: 	cmpq	%rax, %r10
    00000795: 	jbe	.Ltmp134 # Offset: 1941
    00000797: 	xorl	%edx, %edx
    00000799: 	divq	%r11
    0000079c: 	movq	%rax, %r10
.Ltmp142:
    0000079f: 	imulq	$0xbc8f, %rsi, %rsi
    000007a6: 	movq	%rsi, %rax
    000007a9: 	mulq	%rbx
    000007ac: 	movq	%rsi, %rax
    000007af: 	subq	%rdx, %rax
    000007b2: 	shrq	%rax
    000007b5: 	leaq	(%rdx,%rax), %rcx
    000007b9: 	shrq	$0x1e, %rcx
    000007bd: 	movq	%rcx, %rax
    000007c0: 	shlq	$0x1f, %rax
    000007c4: 	subq	%rcx, %rax
    000007c7: 	subq	%rax, %rsi
    000007ca: 	movslq	%r10d, %rax
    000007cd: 	movq	%rax, %rdx
    000007d0: 	leaq	-0x1(%rsi), %r11
    000007d4: 	movq	%rsi, (%rdi)
    000007d7: 	movq	%rsi, %rcx
    000007da: 	shlq	$0x1e, %rdx
    000007de: 	subq	%rax, %rdx
    000007e1: 	leaq	(%rdx,%rdx), %rax
    000007e5: 	addq	%rax, %r11
    000007e8: 	setb	%al
    000007eb: 	movzbl	%al, %eax
    000007ee: 	cmpq	%r11, %r14
    000007f1: 	jb	.Ltmp135 # Offset: 2033
    000007f7: 	testq	%rax, %rax
    000007fa: 	je	.Ltmp136 # Offset: 2042
    00000800: 	cmpq	$0x7ffffffc, %rbp
    00000807: 	jbe	.Ltmp137 # Offset: 2055
.Ltmp133:
    0000080d: 	cmpq	$0x7ffffffd, %rbp
    00000814: 	je	.Ltmp138 # Offset: 2068
.Ltmp141:
    0000081a: 	cmpq	$0x7ffffffc, %r12
    00000821: 	ja	.Ltmp139 # Offset: 2081
    00000827: 	movl	$0x7ffffffd, %eax
    0000082c: 	xorl	%edx, %edx
    0000082e: 	movq	%r13, %r10
    00000831: 	movq	(%rdi), %rcx
    00000834: 	divq	%r13
    00000837: 	imulq	%rax, %r10
    0000083b: 	movq	%rax, %r11
    0000083e: 	nop # Size: 2
.Ltmp140:
    00000840: 	imulq	$0xbc8f, %rcx, %rsi
    00000847: 	movq	%rsi, %rax
    0000084a: 	mulq	%rbx
    0000084d: 	movq	%rsi, %rax
    00000850: 	subq	%rdx, %rax
    00000853: 	shrq	%rax
    00000856: 	leaq	(%rdx,%rax), %rcx
    0000085a: 	shrq	$0x1e, %rcx
    0000085e: 	movq	%rcx, %rax
    00000861: 	shlq	$0x1f, %rax
    00000865: 	subq	%rcx, %rax
    00000868: 	subq	%rax, %rsi
    0000086b: 	leaq	-0x1(%rsi), %rax
    0000086f: 	movq	%rsi, %rcx
    00000872: 	cmpq	%rax, %r10
    00000875: 	jbe	.Ltmp140 # Offset: 2165
    00000877: 	xorl	%edx, %edx
    00000879: 	divq	%r11
    0000087c: 	movq	%rax, %r11
.Ltmp145:
    0000087f: 	imulq	$0xbc8f, %rcx, %rcx
    00000886: 	movslq	%r11d, %r11
    00000889: 	movq	%rcx, %rax
    0000088c: 	mulq	%rbx
    0000088f: 	movq	%rcx, %rax
    00000892: 	subq	%rdx, %rax
    00000895: 	shrq	%rax
    00000898: 	leaq	(%rdx,%rax), %rsi
    0000089c: 	shrq	$0x1e, %rsi
    000008a0: 	movq	%rsi, %rax
    000008a3: 	shlq	$0x1f, %rax
    000008a7: 	subq	%rsi, %rax
    000008aa: 	movq	%rcx, %rsi
    000008ad: 	subq	%rax, %rsi
    000008b0: 	movq	%r11, %rax
    000008b3: 	shlq	$0x1e, %rax
    000008b7: 	leaq	-0x1(%rsi), %rdx
    000008bb: 	movq	%rsi, (%rdi)
    000008be: 	subq	%r11, %rax
    000008c1: 	addq	%rax, %rax
    000008c4: 	addq	%rax, %rdx
    000008c7: 	setb	%al
    000008ca: 	movzbl	%al, %eax
    000008cd: 	cmpq	%rdx, %rbp
    000008d0: 	jb	.Ltmp141 # Offset: 2256
    000008d6: 	testq	%rax, %rax
    000008d9: 	jne	.Ltmp141 # Offset: 2265
    000008df: 	movq	%rdx, %r10
    000008e2: 	jmp	.Ltmp142 # Offset: 2274
    000008e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp139:
    000008f0: 	cmpq	$0x7ffffffd, %r12
    000008f7: 	je	.Ltmp143 # Offset: 2295
.Ltmp144:
    000008fd: 	movl	0x64(%rsp), %edx
    00000901: 	xorl	%esi, %esi
    00000903: 	movq	%r8, 0x50(%rsp)
    00000908: 	movq	%r9, 0x48(%rsp)
    0000090d: 	movq	%rdi, 0x40(%rsp)
    00000912: 	callq	"_ZNSt24uniform_int_distributionIiEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEiRT_RKNS0_10param_typeE.isra.0/1" # Offset: 2322
    00000917: 	movq	0x40(%rsp), %rdi
    0000091c: 	movq	0x48(%rsp), %r9
    00000921: 	movl	%eax, %r10d
    00000924: 	movq	0x50(%rsp), %r8
    00000929: 	imulq	$0xbc8f, (%rdi), %rsi
    00000930: 	movq	%rsi, %rax
    00000933: 	mulq	%rbx
    00000936: 	movq	%rsi, %rax
    00000939: 	subq	%rdx, %rax
    0000093c: 	shrq	%rax
    0000093f: 	leaq	(%rdx,%rax), %rcx
    00000943: 	shrq	$0x1e, %rcx
    00000947: 	movq	%rcx, %rax
    0000094a: 	shlq	$0x1f, %rax
    0000094e: 	subq	%rcx, %rax
    00000951: 	subq	%rax, %rsi
    00000954: 	leaq	-0x1(%rsi), %rax
    00000958: 	movq	%rsi, (%rdi)
    0000095b: 	movq	%rsi, %rcx
    0000095e: 	movslq	%r10d, %rsi
    00000961: 	movq	%rsi, %rdx
    00000964: 	shlq	$0x1e, %rdx
    00000968: 	subq	%rsi, %rdx
    0000096b: 	addq	%rdx, %rdx
    0000096e: 	addq	%rdx, %rax
    00000971: 	setb	%dl
    00000974: 	cmpq	%rax, %r12
    00000977: 	movzbl	%dl, %edx
    0000097a: 	jb	.Ltmp144 # Offset: 2426
    0000097c: 	testq	%rdx, %rdx
    0000097f: 	jne	.Ltmp144 # Offset: 2431
    00000985: 	movq	%rax, %r11
    00000988: 	jmp	.Ltmp145 # Offset: 2440
    0000098d: 	nopl	(%rax) # Size: 3
.Ltmp143:
    00000990: 	imulq	$0xbc8f, (%rdi), %rsi
    00000997: 	movq	%rsi, %rax
    0000099a: 	mulq	%rbx
    0000099d: 	movq	%rsi, %rax
    000009a0: 	subq	%rdx, %rax
    000009a3: 	shrq	%rax
    000009a6: 	leaq	(%rdx,%rax), %rcx
    000009aa: 	shrq	$0x1e, %rcx
    000009ae: 	movq	%rcx, %rax
    000009b1: 	shlq	$0x1f, %rax
    000009b5: 	subq	%rcx, %rax
    000009b8: 	subq	%rax, %rsi
    000009bb: 	movq	%rsi, %rcx
    000009be: 	leaq	-0x1(%rsi), %r11
    000009c2: 	jmp	.Ltmp145 # Offset: 2498
    000009c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp138:
    000009d0: 	imulq	$0xbc8f, (%rdi), %rcx
    000009d7: 	movq	%rcx, %rax
    000009da: 	mulq	%rbx
    000009dd: 	movq	%rcx, %rax
    000009e0: 	subq	%rdx, %rax
    000009e3: 	shrq	%rax
    000009e6: 	leaq	(%rdx,%rax), %rsi
    000009ea: 	shrq	$0x1e, %rsi
    000009ee: 	movq	%rsi, %rax
    000009f1: 	shlq	$0x1f, %rax
    000009f5: 	subq	%rsi, %rax
    000009f8: 	subq	%rax, %rcx
    000009fb: 	movq	%rcx, %rsi
    000009fe: 	leaq	-0x1(%rcx), %r10
    00000a02: 	jmp	.Ltmp142 # Offset: 2562
    00000a07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp132:
    00000a10: 	imulq	$0xbc8f, (%rdi), %rsi
    00000a17: 	movq	%rsi, %rax
    00000a1a: 	mulq	%rbx
    00000a1d: 	movq	%rsi, %rax
    00000a20: 	subq	%rdx, %rax
    00000a23: 	shrq	%rax
    00000a26: 	leaq	(%rdx,%rax), %rcx
    00000a2a: 	shrq	$0x1e, %rcx
    00000a2e: 	movq	%rcx, %rax
    00000a31: 	shlq	$0x1f, %rax
    00000a35: 	subq	%rcx, %rax
    00000a38: 	subq	%rax, %rsi
    00000a3b: 	movq	%rsi, %rcx
    00000a3e: 	leaq	-0x1(%rsi), %r11
    00000a42: 	jmp	.Ltmp136 # Offset: 2626
    00000a47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp126:
    00000a50: 	imulq	$0xbc8f, (%rdi), %rcx
    00000a57: 	movq	%rcx, %rax
    00000a5a: 	mulq	%rbx
    00000a5d: 	movq	%rcx, %rax
    00000a60: 	subq	%rdx, %rax
    00000a63: 	shrq	%rax
    00000a66: 	leaq	(%rdx,%rax), %rsi
    00000a6a: 	shrq	$0x1e, %rsi
    00000a6e: 	movq	%rsi, %rax
    00000a71: 	shlq	$0x1f, %rax
    00000a75: 	subq	%rsi, %rax
    00000a78: 	movq	%rcx, %rsi
    00000a7b: 	subq	%rax, %rsi
    00000a7e: 	leaq	-0x1(%rsi), %r10
    00000a82: 	jmp	.Ltmp130 # Offset: 2690
.Ltmp121:
    00000a87: 	imulq	$0xbc8f, (%rdi), %rsi
    00000a8e: 	movq	%rsi, %rax
    00000a91: 	mulq	%rbx
    00000a94: 	movq	%rsi, %rax
    00000a97: 	subq	%rdx, %rax
    00000a9a: 	shrq	%rax
    00000a9d: 	leaq	(%rdx,%rax), %rcx
    00000aa1: 	shrq	$0x1e, %rcx
    00000aa5: 	movq	%rcx, %rax
    00000aa8: 	shlq	$0x1f, %rax
    00000aac: 	subq	%rcx, %rax
    00000aaf: 	movq	%rsi, %rcx
    00000ab2: 	subq	%rax, %rcx
    00000ab5: 	leaq	-0x1(%rcx), %r10
    00000ab9: 	jmp	.Ltmp125 # Offset: 2745
.Ltmp116:
    00000abe: 	imulq	$0xbc8f, (%rdi), %rcx
    00000ac5: 	movq	%rcx, %rax
    00000ac8: 	mulq	%rbx
    00000acb: 	movq	%rcx, %rax
    00000ace: 	subq	%rdx, %rax
    00000ad1: 	shrq	%rax
    00000ad4: 	leaq	(%rdx,%rax), %rsi
    00000ad8: 	shrq	$0x1e, %rsi
    00000adc: 	movq	%rsi, %rax
    00000adf: 	shlq	$0x1f, %rax
    00000ae3: 	subq	%rsi, %rax
    00000ae6: 	movq	%rcx, %rsi
    00000ae9: 	subq	%rax, %rsi
    00000aec: 	leaq	-0x1(%rsi), %r10
    00000af0: 	jmp	.Ltmp120 # Offset: 2800
.Ltmp111:
    00000af5: 	imulq	$0xbc8f, (%rdi), %rsi
    00000afc: 	movq	%rsi, %rax
    00000aff: 	mulq	%rbx
    00000b02: 	movq	%rsi, %rax
    00000b05: 	subq	%rdx, %rax
    00000b08: 	shrq	%rax
    00000b0b: 	leaq	(%rdx,%rax), %rcx
    00000b0f: 	shrq	$0x1e, %rcx
    00000b13: 	movq	%rcx, %rax
    00000b16: 	shlq	$0x1f, %rax
    00000b1a: 	subq	%rcx, %rax
    00000b1d: 	movq	%rsi, %rcx
    00000b20: 	subq	%rax, %rcx
    00000b23: 	leaq	-0x1(%rcx), %r10
    00000b27: 	jmp	.Ltmp115 # Offset: 2855
.Ltmp106:
    00000b2c: 	imulq	$0xbc8f, (%rdi), %rcx
    00000b33: 	movq	%rcx, %rax
    00000b36: 	mulq	%rbx
    00000b39: 	movq	%rcx, %rax
    00000b3c: 	subq	%rdx, %rax
    00000b3f: 	shrq	%rax
    00000b42: 	leaq	(%rdx,%rax), %rsi
    00000b46: 	shrq	$0x1e, %rsi
    00000b4a: 	movq	%rsi, %rax
    00000b4d: 	shlq	$0x1f, %rax
    00000b51: 	subq	%rsi, %rax
    00000b54: 	subq	%rax, %rcx
    00000b57: 	movq	%rcx, %rsi
    00000b5a: 	leaq	-0x1(%rcx), %rcx
    00000b5e: 	jmp	.Ltmp110 # Offset: 2910
.Ltmp101:
    00000b63: 	imulq	$0xbc8f, (%rdi), %rcx
    00000b6a: 	movabsq	$0x200000005, %rdx
    00000b74: 	movq	%rcx, %rax
    00000b77: 	mulq	%rdx
    00000b7a: 	movq	%rcx, %rax
    00000b7d: 	subq	%rdx, %rax
    00000b80: 	shrq	%rax
    00000b83: 	addq	%rdx, %rax
    00000b86: 	shrq	$0x1e, %rax
    00000b8a: 	movq	%rax, %rdx
    00000b8d: 	shlq	$0x1f, %rdx
    00000b91: 	subq	%rax, %rdx
    00000b94: 	movq	%rcx, %rax
    00000b97: 	subq	%rdx, %rax
    00000b9a: 	movq	%rax, (%rdi)
    00000b9d: 	subq	$0x1, %rax
    00000ba1: 	jmp	.Ltmp105 # Offset: 2977
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt24uniform_int_distributionIiEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEiRT_RKNS0_10param_typeE.isra.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 21
  State       : disassembled
  Address     : 0x4ef0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x4ef0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp146 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp149:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp148:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp147 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp148 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp149 # Offset: 142
.Ltmp146:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp150 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp151 # Offset: 164
.Ltmp154:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp152 # Offset: 177
.Ltmp153:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp151 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp153 # Offset: 214
.Ltmp152:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp154 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp155 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp157:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp156 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp156:
    0000010a: 	addq	$0x20, %r13
.Ltmp151:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp157 # Offset: 275
.Ltmp155:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp158 # Offset: 283
.Ltmp164:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp159 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp160:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp160 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp159:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp147:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp148 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp149 # Offset: 389
    0000018b: 	jmp	.Ltmp146 # Offset: 395
.Ltmp150:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp155 # Offset: 405
.Ltmp163:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp161 # Offset: 422
.Ltmp162:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp155 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp162 # Offset: 463
.Ltmp161:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp163 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp164 # Offset: 482
.Ltmp158:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x50f0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x50f0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp165 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp166 # Offset: 152
.Ltmp177:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp167 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp168 # Offset: 204
.Ltmp167:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp169 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp170 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp172:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp171 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp170:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp172 # Offset: 339
    00000155: 	jmp	.Ltmp173 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp166:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp174 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp175 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp176 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp176:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp179:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp177 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp169:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp173:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp172 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp174:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp178 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp179 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp179 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp178:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp179 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp179 # Offset: 696
.Ltmp168:
    000002bd: 	leaq	DATAat0xd280(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp175:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp180 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp180:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp165:
    000002e0: 	leaq	DATAat0xd250(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp171:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_ZNSt19normal_distributionIfEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEfRT_RKNS0_10param_typeE" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x5420
  Size        : 0x29d
  MaxSize     : 0x2a0
  Offset      : 0x5420
  Section     : .text
  Orc Section : .local.text._ZNSt19normal_distributionIfEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEfRT_RKNS0_10param_typeE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdx, %rbp
    00000008: 	pushq	%rbx
    00000009: 	movq	%rdi, %rbx
    0000000c: 	subq	$0x18, %rsp
    00000010: 	cmpb	$0x0, 0xc(%rdi)
    00000014: 	je	.Ltmp181 # Offset: 20
    00000016: 	movb	$0x0, 0xc(%rdi)
    0000001a: 	movss	0x8(%rdi), %xmm0
.Ltmp189:
    0000001f: 	mulss	0x4(%rbp), %xmm0
    00000024: 	addss	(%rbp), %xmm0
    00000029: 	addq	$0x18, %rsp
    0000002d: 	popq	%rbx
    0000002e: 	popq	%rbp
    0000002f: 	retq # Offset: 47
.Ltmp181:
    00000030: 	movq	(%rsi), %rax
    00000033: 	movss	DATAat0xd338(%rip), %xmm5
    0000003b: 	pxor	%xmm3, %xmm3
    0000003f: 	movabsq	$0x200000005, %rdi
    00000049: 	movss	DATAat0xd35c(%rip), %xmm4
.Ltmp186:
    00000051: 	imulq	$0xbc8f, %rax, %rcx
    00000058: 	movq	%rcx, %rax
    0000005b: 	mulq	%rdi
    0000005e: 	movq	%rcx, %rax
    00000061: 	subq	%rdx, %rax
    00000064: 	shrq	%rax
    00000067: 	addq	%rax, %rdx
    0000006a: 	shrq	$0x1e, %rdx
    0000006e: 	movq	%rdx, %rax
    00000071: 	shlq	$0x1f, %rax
    00000075: 	subq	%rdx, %rax
    00000078: 	subq	%rax, %rcx
    0000007b: 	movq	%rcx, %rax
    0000007e: 	movq	%rcx, %rdx
    00000081: 	subq	$0x1, %rax
    00000085: 	js	.Ltmp182 # Offset: 133
    0000008b: 	pxor	%xmm0, %xmm0
    0000008f: 	cvtsi2ss	%rax, %xmm0
.Ltmp190:
    00000094: 	addss	%xmm3, %xmm0
    00000098: 	mulss	%xmm5, %xmm0
    0000009c: 	comiss	%xmm4, %xmm0
    0000009f: 	jae	.Ltmp183 # Offset: 159
    000000a5: 	imulq	$0xbc8f, %rdx, %rcx
    000000ac: 	addss	%xmm0, %xmm0
    000000b0: 	movq	%rcx, %rax
    000000b3: 	movaps	%xmm0, %xmm2
    000000b6: 	mulq	%rdi
    000000b9: 	movq	%rcx, %rax
    000000bc: 	subss	%xmm4, %xmm2
    000000c0: 	subq	%rdx, %rax
    000000c3: 	movaps	%xmm2, %xmm6
    000000c6: 	mulss	%xmm2, %xmm6
    000000ca: 	shrq	%rax
    000000cd: 	addq	%rdx, %rax
    000000d0: 	shrq	$0x1e, %rax
    000000d4: 	movq	%rax, %rdx
    000000d7: 	shlq	$0x1f, %rdx
    000000db: 	subq	%rax, %rdx
    000000de: 	movq	%rcx, %rax
    000000e1: 	subq	%rdx, %rax
    000000e4: 	movq	%rax, %rdx
    000000e7: 	subq	$0x1, %rdx
    000000eb: 	js	.Ltmp184 # Offset: 235
    000000f1: 	pxor	%xmm0, %xmm0
    000000f5: 	cvtsi2ss	%rdx, %xmm0
.Ltmp191:
    000000fa: 	addss	%xmm3, %xmm0
    000000fe: 	mulss	%xmm5, %xmm0
    00000102: 	comiss	%xmm4, %xmm0
    00000105: 	jae	.Ltmp185 # Offset: 261
.Ltmp193:
    0000010b: 	addss	%xmm0, %xmm0
    0000010f: 	movaps	%xmm0, %xmm1
    00000112: 	subss	%xmm4, %xmm1
    00000116: 	movaps	%xmm1, %xmm0
    00000119: 	mulss	%xmm1, %xmm0
.Ltmp194:
    0000011d: 	addss	%xmm0, %xmm6
    00000121: 	comiss	%xmm4, %xmm6
    00000124: 	ja	.Ltmp186 # Offset: 292
    0000012a: 	ucomiss	%xmm3, %xmm6
    0000012d: 	jp	.Ltmp187 # Offset: 301
    0000012f: 	je	.Ltmp186 # Offset: 303
.Ltmp187:
    00000135: 	movq	%rax, (%rsi)
    00000138: 	movaps	%xmm6, %xmm0
    0000013b: 	movss	%xmm1, 0xc(%rsp)
    00000141: 	movss	%xmm2, 0x8(%rsp)
    00000147: 	movss	%xmm6, 0x4(%rsp)
    0000014d: 	callq	logf@PLT # Offset: 333
    00000152: 	movss	0x4(%rsp), %xmm6
    00000158: 	pxor	%xmm3, %xmm3
    0000015c: 	movss	0x8(%rsp), %xmm2
    00000162: 	mulss	DATAat0xd300(%rip), %xmm0
    0000016a: 	movss	0xc(%rsp), %xmm1
    00000170: 	divss	%xmm6, %xmm0
    00000174: 	ucomiss	%xmm0, %xmm3
    00000177: 	ja	.Ltmp188 # Offset: 375
    0000017d: 	sqrtss	%xmm0, %xmm0
.Ltmp196:
    00000181: 	mulss	%xmm0, %xmm2
    00000185: 	movb	$0x1, 0xc(%rbx)
    00000189: 	mulss	%xmm1, %xmm0
    0000018d: 	movss	%xmm2, 0x8(%rbx)
    00000192: 	jmp	.Ltmp189 # Offset: 402
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp182:
    000001a0: 	movq	%rax, %rcx
    000001a3: 	andl	$0x1, %eax
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	shrq	%rcx
    000001ad: 	orq	%rax, %rcx
    000001b0: 	cvtsi2ss	%rcx, %xmm0
    000001b5: 	addss	%xmm0, %xmm0
    000001b9: 	jmp	.Ltmp190 # Offset: 441
    000001be: 	nop # Size: 2
.Ltmp184:
    000001c0: 	movq	%rdx, %rcx
    000001c3: 	andl	$0x1, %edx
    000001c6: 	pxor	%xmm0, %xmm0
    000001ca: 	shrq	%rcx
    000001cd: 	orq	%rdx, %rcx
    000001d0: 	cvtsi2ss	%rcx, %xmm0
    000001d5: 	addss	%xmm0, %xmm0
    000001d9: 	jmp	.Ltmp191 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp183:
    000001e0: 	imulq	$0xbc8f, %rdx, %rcx
    000001e7: 	movq	%rcx, %rax
    000001ea: 	mulq	%rdi
    000001ed: 	movq	%rcx, %rax
    000001f0: 	subq	%rdx, %rax
    000001f3: 	shrq	%rax
    000001f6: 	addq	%rdx, %rax
    000001f9: 	shrq	$0x1e, %rax
    000001fd: 	movq	%rax, %rdx
    00000200: 	shlq	$0x1f, %rdx
    00000204: 	subq	%rax, %rdx
    00000207: 	movq	%rcx, %rax
    0000020a: 	subq	%rdx, %rax
    0000020d: 	movq	%rax, %rdx
    00000210: 	subq	$0x1, %rdx
    00000214: 	js	.Ltmp192 # Offset: 532
    00000216: 	pxor	%xmm0, %xmm0
    0000021a: 	cvtsi2ss	%rdx, %xmm0
.Ltmp195:
    0000021f: 	addss	%xmm3, %xmm0
    00000223: 	mulss	%xmm5, %xmm0
    00000227: 	comiss	%xmm4, %xmm0
    0000022a: 	jae	.Ltmp186 # Offset: 554
    00000230: 	movss	DATAat0xd330(%rip), %xmm6
    00000238: 	movss	DATAat0xd334(%rip), %xmm2
    00000240: 	jmp	.Ltmp193 # Offset: 576
    00000245: 	nopl	(%rax) # Size: 3
.Ltmp185:
    00000248: 	movss	DATAat0xd330(%rip), %xmm0
    00000250: 	movss	DATAat0xd334(%rip), %xmm1
    00000258: 	jmp	.Ltmp194 # Offset: 600
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp192:
    00000260: 	movq	%rdx, %rcx
    00000263: 	andl	$0x1, %edx
    00000266: 	pxor	%xmm0, %xmm0
    0000026a: 	shrq	%rcx
    0000026d: 	orq	%rdx, %rcx
    00000270: 	cvtsi2ss	%rcx, %xmm0
    00000275: 	addss	%xmm0, %xmm0
    00000279: 	jmp	.Ltmp195 # Offset: 633
.Ltmp188:
    0000027b: 	movss	%xmm1, 0x8(%rsp)
    00000281: 	movss	%xmm2, 0x4(%rsp)
    00000287: 	callq	sqrtf@PLT # Offset: 647
    0000028c: 	movss	0x8(%rsp), %xmm1
    00000292: 	movss	0x4(%rsp), %xmm2
    00000298: 	jmp	.Ltmp196 # Offset: 664
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt19normal_distributionIfEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEfRT_RKNS0_10param_typeE"

Binary Function "_Z18test_one_generatorISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EE" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x56c0
  Size        : 0x1117
  MaxSize     : 0x1120
  Offset      : 0x56c0
  Section     : .text
  Orc Section : .local.text._Z18test_one_generatorISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movq	%rsi, %rdi
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%r8, %rbx
    0000001d: 	subq	$0x158, %rsp
    00000024: 	movaps	DATAat0xd350(%rip), %xmm0
    0000002b: 	movq	%rsi, (%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x148(%rsp)
    00000040: 	xorl	%eax, %eax
    00000042: 	movq	DATAat0xd2f8(%rip), %rax
    00000049: 	movb	$0x0, 0x5c(%rsp)
    0000004e: 	movl	$0x0, 0x58(%rsp)
    00000056: 	movq	%rax, 0x50(%rsp)
    0000005b: 	leaq	0x90(%rsp), %rax
    00000063: 	movq	$0x0, 0x70(%rsp)
    0000006c: 	movq	%rax, 0x10(%rsp)
    00000071: 	movq	%rax, 0x80(%rsp)
    00000079: 	movl	$0x64656573, 0x90(%rsp)
    00000084: 	movb	$0x20, 0x94(%rsp)
    0000008c: 	movq	$0x5, 0x88(%rsp)
    00000098: 	movb	$0x0, 0x95(%rsp)
    000000a0: 	movaps	%xmm0, 0x60(%rsp)
    000000a5: 	callq	strlen@PLT # Offset: 165
    000000aa: 	movq	%rax, %rdx
    000000ad: 	movabsq	$0x3ffffffffffffffa, %rax
    000000b7: 	cmpq	%rax, %rdx
    000000ba: 	ja	.Ltmp197 # Offset: 186
    000000c0: 	leaq	0x80(%rsp), %r14
    000000c8: 	movq	(%rsp), %rsi
    000000cc: 	movq	%r14, %rdi
    000000cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 207
    000000d4: 	movq	0x40(%rbx), %rax
    000000d8: 	movq	0x30(%rbx), %r15
    000000dc: 	subq	$0x20, %rax
    000000e0: 	cmpq	%rax, %r15
    000000e3: 	je	.Ltmp198 # Offset: 227
    000000e9: 	leaq	0x10(%r15), %rdi
    000000ed: 	movq	0x88(%rsp), %r14
    000000f5: 	movq	%rdi, (%r15)
    000000f8: 	movq	0x80(%rsp), %rax
    00000100: 	movq	%rax, %rcx
    00000103: 	movq	%rax, 0x8(%rsp)
    00000108: 	addq	%r14, %rcx
    0000010b: 	je	.Ltmp199 # Offset: 267
    0000010d: 	testq	%rax, %rax
    00000110: 	je	.Ltmp200 # Offset: 272
.Ltmp199:
    00000116: 	movq	%r14, 0x48(%rsp)
    0000011b: 	cmpq	$0xf, %r14
    0000011f: 	ja	.Ltmp201 # Offset: 287
    00000125: 	cmpq	$0x1, %r14
    00000129: 	jne	.Ltmp202 # Offset: 297
    0000012f: 	movq	0x8(%rsp), %rax
    00000134: 	movzbl	(%rax), %eax
    00000137: 	movb	%al, 0x10(%r15)
.Ltmp255:
    0000013b: 	movq	%r14, 0x8(%r15)
    0000013f: 	movb	$0x0, (%rdi,%r14)
    00000144: 	addq	$0x20, 0x30(%rbx)
.Ltmp269:
    00000149: 	callq	clock@PLT # Offset: 329
    0000014e: 	movq	%rax, start_time(%rip)
    00000155: 	movl	iterations(%rip), %eax
    0000015b: 	testl	%eax, %eax
    0000015d: 	je	.Ltmp203 # Offset: 349
    0000015f: 	movl	init_value(%rip), %edx
    00000165: 	leal	-0x1(%rax,%rdx), %ecx
    00000169: 	movabsq	$0x200000005, %rdx
    00000173: 	movslq	%ecx, %rcx
    00000176: 	movq	%rcx, %rax
    00000179: 	mulq	%rdx
    0000017c: 	movq	%rcx, %rax
    0000017f: 	subq	%rdx, %rax
    00000182: 	shrq	%rax
    00000185: 	addq	%rax, %rdx
    00000188: 	shrq	$0x1e, %rdx
    0000018c: 	movq	%rdx, %rax
    0000018f: 	shlq	$0x1f, %rax
    00000193: 	subq	%rdx, %rax
    00000196: 	subq	%rax, %rcx
    00000199: 	movl	$0x1, %eax
    0000019e: 	cmoveq	%rax, %rcx
    000001a2: 	movq	%rcx, (%r12)
.Ltmp203:
    000001a6: 	movq	0x30(%rbx), %rax
    000001aa: 	movq	0x48(%rbx), %rdx
    000001ae: 	cmpq	%rax, 0x38(%rbx)
    000001b2: 	je	.Ltmp204 # Offset: 434
.Ltmp265:
    000001b8: 	movq	-0x20(%rax), %r14
    000001bc: 	callq	clock@PLT # Offset: 444
    000001c1: 	pxor	%xmm0, %xmm0
    000001c5: 	movq	%rax, end_time(%rip)
    000001cc: 	movq	%r14, %rdi
    000001cf: 	subq	start_time(%rip), %rax
    000001d6: 	cvtsi2sd	%rax, %xmm0
    000001db: 	divsd	DATAat0xd2d8(%rip), %xmm0
    000001e3: 	callq	_Z13record_resultdPKc # Offset: 483
    000001e8: 	leaq	0xb0(%rsp), %rax
    000001f0: 	xorl	%edx, %edx
    000001f2: 	leaq	0xa0(%rsp), %r14
    000001fa: 	movq	$0x19, 0x48(%rsp)
    00000203: 	movq	%rax, 0x18(%rsp)
    00000208: 	movq	%r14, %rdi
    0000020b: 	movq	%rax, 0xa0(%rsp)
    00000213: 	leaq	0x48(%rsp), %rax
    00000218: 	movq	%rax, %rsi
    0000021b: 	movq	%rax, 0x8(%rsp)
    00000220: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 544
    00000225: 	movq	0x48(%rsp), %rdx
    0000022a: 	movq	(%rsp), %rdi
    0000022e: 	movb	$0x20, 0x18(%rax)
    00000232: 	movabsq	$0x6e6f697475626972, %rcx
    0000023c: 	movdqa	DATAat0xd360(%rip), %xmm0
    00000244: 	movq	%rax, 0xa0(%rsp)
    0000024c: 	movq	%rdx, 0xb0(%rsp)
    00000254: 	movups	%xmm0, (%rax)
    00000257: 	movq	0xa0(%rsp), %rdx
    0000025f: 	movq	%rcx, 0x10(%rax)
    00000263: 	movq	0x48(%rsp), %rax
    00000268: 	movq	%rax, 0xa8(%rsp)
    00000270: 	movb	$0x0, (%rdx,%rax)
    00000274: 	callq	strlen@PLT # Offset: 628
    00000279: 	movq	%rax, %rdx
    0000027c: 	movabsq	$0x3fffffffffffffff, %rax
    00000286: 	subq	0xa8(%rsp), %rax
    0000028e: 	cmpq	%rax, %rdx
    00000291: 	ja	.Ltmp205 # Offset: 657
    00000297: 	movq	(%rsp), %rsi
    0000029b: 	movq	%r14, %rdi
    0000029e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 670
    000002a3: 	movq	0x40(%rbx), %rax
    000002a7: 	movq	0x30(%rbx), %r15
    000002ab: 	subq	$0x20, %rax
    000002af: 	cmpq	%rax, %r15
    000002b2: 	je	.Ltmp206 # Offset: 690
    000002b8: 	leaq	0x10(%r15), %rdi
    000002bc: 	movq	0xa8(%rsp), %r14
    000002c4: 	movq	%rdi, (%r15)
    000002c7: 	movq	0xa0(%rsp), %rax
    000002cf: 	movq	%rax, %rcx
    000002d2: 	movq	%rax, 0x20(%rsp)
    000002d7: 	addq	%r14, %rcx
    000002da: 	je	.Ltmp207 # Offset: 730
    000002dc: 	testq	%rax, %rax
    000002df: 	je	.Ltmp208 # Offset: 735
.Ltmp207:
    000002e5: 	movq	%r14, 0x48(%rsp)
    000002ea: 	cmpq	$0xf, %r14
    000002ee: 	ja	.Ltmp209 # Offset: 750
    000002f4: 	cmpq	$0x1, %r14
    000002f8: 	jne	.Ltmp210 # Offset: 760
    000002fe: 	movq	0x20(%rsp), %rax
    00000303: 	movzbl	(%rax), %eax
    00000306: 	movb	%al, 0x10(%r15)
.Ltmp274:
    0000030a: 	movq	%r14, 0x8(%r15)
    0000030e: 	movb	$0x0, (%rdi,%r14)
    00000313: 	addq	$0x20, 0x30(%rbx)
.Ltmp264:
    00000318: 	callq	clock@PLT # Offset: 792
    0000031d: 	movl	iterations(%rip), %edi
    00000323: 	xorl	%r14d, %r14d
    00000326: 	movq	%rax, start_time(%rip)
    0000032d: 	testl	%edi, %edi
    0000032f: 	je	.Ltmp211 # Offset: 815
    00000331: 	nopl	(%rax) # Size: 7
.Ltmp212:
    00000338: 	movl	$0x270f, %edx
    0000033d: 	movl	$0xffffd8f1, %esi
    00000342: 	movq	%r12, %rdi
    00000345: 	addl	$0x1, %r14d
    00000349: 	callq	"_ZNSt24uniform_int_distributionIiEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEiRT_RKNS0_10param_typeE.isra.0/1" # Offset: 841
    0000034e: 	addl	%eax, (%r13)
    00000352: 	cmpl	%r14d, iterations(%rip)
    00000359: 	jne	.Ltmp212 # Offset: 857
.Ltmp211:
    0000035b: 	movq	0x30(%rbx), %rax
    0000035f: 	movq	0x48(%rbx), %rdx
    00000363: 	cmpq	%rax, 0x38(%rbx)
    00000367: 	je	.Ltmp213 # Offset: 871
.Ltmp268:
    0000036d: 	movq	-0x20(%rax), %r13
    00000371: 	callq	clock@PLT # Offset: 881
    00000376: 	pxor	%xmm0, %xmm0
    0000037a: 	movq	%rax, end_time(%rip)
    00000381: 	movq	%r13, %rdi
    00000384: 	subq	start_time(%rip), %rax
    0000038b: 	cvtsi2sd	%rax, %xmm0
    00000390: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000398: 	callq	_Z13record_resultdPKc # Offset: 920
    0000039d: 	leaq	0xc0(%rsp), %r13
    000003a5: 	movq	0x8(%rsp), %rsi
    000003aa: 	leaq	0xd0(%rsp), %rax
    000003b2: 	xorl	%edx, %edx
    000003b4: 	movq	%r13, %rdi
    000003b7: 	movq	%rax, 0x20(%rsp)
    000003bc: 	movq	%rax, 0xc0(%rsp)
    000003c4: 	movq	$0x1a, 0x48(%rsp)
    000003cd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 973
    000003d2: 	movq	0x48(%rsp), %rdx
    000003d7: 	movl	$0x206e, %esi
    000003dc: 	movq	(%rsp), %rdi
    000003e0: 	movabsq	$0x6f69747562697274, %rcx
    000003ea: 	movdqa	DATAat0xd370(%rip), %xmm0
    000003f2: 	movq	%rax, 0xc0(%rsp)
    000003fa: 	movq	%rdx, 0xd0(%rsp)
    00000402: 	movw	%si, 0x18(%rax)
    00000406: 	movups	%xmm0, (%rax)
    00000409: 	movq	0xc0(%rsp), %rdx
    00000411: 	movq	%rcx, 0x10(%rax)
    00000415: 	movq	0x48(%rsp), %rax
    0000041a: 	movq	%rax, 0xc8(%rsp)
    00000422: 	movb	$0x0, (%rdx,%rax)
    00000426: 	callq	strlen@PLT # Offset: 1062
    0000042b: 	movq	%rax, %rdx
    0000042e: 	movabsq	$0x3fffffffffffffff, %rax
    00000438: 	subq	0xc8(%rsp), %rax
    00000440: 	cmpq	%rax, %rdx
    00000443: 	ja	.Ltmp214 # Offset: 1091
    00000449: 	movq	(%rsp), %rsi
    0000044d: 	movq	%r13, %rdi
    00000450: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1104
    00000455: 	movq	0x40(%rbx), %rax
    00000459: 	movq	0x30(%rbx), %r14
    0000045d: 	subq	$0x20, %rax
    00000461: 	cmpq	%rax, %r14
    00000464: 	je	.Ltmp215 # Offset: 1124
    0000046a: 	leaq	0x10(%r14), %rdi
    0000046e: 	movq	0xc8(%rsp), %r13
    00000476: 	movq	%rdi, (%r14)
    00000479: 	movq	0xc0(%rsp), %r15
    00000481: 	movq	%r15, %rax
    00000484: 	addq	%r13, %rax
    00000487: 	je	.Ltmp216 # Offset: 1159
    00000489: 	testq	%r15, %r15
    0000048c: 	je	.Ltmp217 # Offset: 1164
.Ltmp216:
    00000492: 	movq	%r13, 0x48(%rsp)
    00000497: 	cmpq	$0xf, %r13
    0000049b: 	ja	.Ltmp218 # Offset: 1179
    000004a1: 	cmpq	$0x1, %r13
    000004a5: 	jne	.Ltmp219 # Offset: 1189
    000004ab: 	movzbl	(%r15), %eax
    000004af: 	movb	%al, 0x10(%r14)
.Ltmp277:
    000004b3: 	movq	%r13, 0x8(%r14)
    000004b7: 	movb	$0x0, (%rdi,%r13)
    000004bc: 	addq	$0x20, 0x30(%rbx)
.Ltmp267:
    000004c1: 	callq	clock@PLT # Offset: 1217
    000004c6: 	movl	iterations(%rip), %ecx
    000004cc: 	movq	%rax, start_time(%rip)
    000004d3: 	testl	%ecx, %ecx
    000004d5: 	jne	.Ltmp220 # Offset: 1237
    000004db: 	movq	0x30(%rbx), %rax
    000004df: 	movq	0x48(%rbx), %rdx
    000004e3: 	cmpq	0x38(%rbx), %rax
    000004e7: 	je	.Ltmp221 # Offset: 1255
.Ltmp259:
    000004ed: 	movq	-0x20(%rax), %r13
    000004f1: 	callq	clock@PLT # Offset: 1265
    000004f6: 	pxor	%xmm0, %xmm0
    000004fa: 	movq	%rax, end_time(%rip)
    00000501: 	movq	%r13, %rdi
    00000504: 	subq	start_time(%rip), %rax
    0000050b: 	cvtsi2sd	%rax, %xmm0
    00000510: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000518: 	callq	_Z13record_resultdPKc # Offset: 1304
    0000051d: 	leaq	0xe0(%rsp), %r13
    00000525: 	movq	0x8(%rsp), %rsi
    0000052a: 	leaq	0xf0(%rsp), %rax
    00000532: 	xorl	%edx, %edx
    00000534: 	movq	%r13, %rdi
    00000537: 	movq	%rax, 0x28(%rsp)
    0000053c: 	movq	%rax, 0xe0(%rsp)
    00000544: 	movq	$0x1f, 0x48(%rsp)
    0000054d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1357
    00000552: 	movq	0x48(%rsp), %rdx
    00000557: 	movdqa	DATAat0xd380(%rip), %xmm0
    0000055f: 	movb	$0x20, 0x1e(%rax)
    00000563: 	movabsq	$0x6c62756f643c6c61, %rcx
    0000056d: 	movq	%rax, 0xe0(%rsp)
    00000575: 	movq	(%rsp), %rdi
    00000579: 	movq	%rdx, 0xf0(%rsp)
    00000581: 	movq	%rcx, 0x10(%rax)
    00000585: 	movl	$0x3e30, %ecx
    0000058a: 	movups	%xmm0, (%rax)
    0000058d: 	movq	0xe0(%rsp), %rdx
    00000595: 	movl	$0x32202c65, 0x18(%rax)
    0000059c: 	movw	%cx, 0x1c(%rax)
    000005a0: 	movq	0x48(%rsp), %rax
    000005a5: 	movq	%rax, 0xe8(%rsp)
    000005ad: 	movb	$0x0, (%rdx,%rax)
    000005b1: 	callq	strlen@PLT # Offset: 1457
    000005b6: 	movq	%rax, %rdx
    000005b9: 	movabsq	$0x3fffffffffffffff, %rax
    000005c3: 	subq	0xe8(%rsp), %rax
    000005cb: 	cmpq	%rax, %rdx
    000005ce: 	ja	.Ltmp222 # Offset: 1486
    000005d4: 	movq	(%rsp), %rsi
    000005d8: 	movq	%r13, %rdi
    000005db: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1499
    000005e0: 	movq	0x40(%rbx), %rax
    000005e4: 	movq	0x30(%rbx), %r14
    000005e8: 	subq	$0x20, %rax
    000005ec: 	cmpq	%rax, %r14
    000005ef: 	je	.Ltmp223 # Offset: 1519
    000005f5: 	leaq	0x10(%r14), %rdi
    000005f9: 	movq	0xe8(%rsp), %r13
    00000601: 	movq	%rdi, (%r14)
    00000604: 	movq	0xe0(%rsp), %r15
    0000060c: 	movq	%r15, %rax
    0000060f: 	addq	%r13, %rax
    00000612: 	je	.Ltmp224 # Offset: 1554
    00000614: 	testq	%r15, %r15
    00000617: 	je	.Ltmp225 # Offset: 1559
.Ltmp224:
    0000061d: 	movq	%r13, 0x48(%rsp)
    00000622: 	cmpq	$0xf, %r13
    00000626: 	ja	.Ltmp226 # Offset: 1574
    0000062c: 	cmpq	$0x1, %r13
    00000630: 	jne	.Ltmp227 # Offset: 1584
    00000636: 	movzbl	(%r15), %eax
    0000063a: 	movb	%al, 0x10(%r14)
.Ltmp283:
    0000063e: 	movq	%r13, 0x8(%r14)
    00000642: 	movb	$0x0, (%rdi,%r13)
    00000647: 	addq	$0x20, 0x30(%rbx)
.Ltmp266:
    0000064c: 	callq	clock@PLT # Offset: 1612
    00000651: 	movl	iterations(%rip), %ecx
    00000657: 	movq	%rax, start_time(%rip)
    0000065e: 	testl	%ecx, %ecx
    00000660: 	jne	.Ltmp228 # Offset: 1632
    00000666: 	movq	0x30(%rbx), %rax
    0000066a: 	movq	0x48(%rbx), %rdx
    0000066e: 	cmpq	0x38(%rbx), %rax
    00000672: 	je	.Ltmp229 # Offset: 1650
.Ltmp263:
    00000678: 	movq	-0x20(%rax), %r13
    0000067c: 	callq	clock@PLT # Offset: 1660
    00000681: 	pxor	%xmm0, %xmm0
    00000685: 	movq	%rax, end_time(%rip)
    0000068c: 	movq	%r13, %rdi
    0000068f: 	subq	start_time(%rip), %rax
    00000696: 	cvtsi2sd	%rax, %xmm0
    0000069b: 	divsd	DATAat0xd2d8(%rip), %xmm0
    000006a3: 	callq	_Z13record_resultdPKc # Offset: 1699
    000006a8: 	leaq	0x100(%rsp), %r13
    000006b0: 	movq	0x8(%rsp), %rsi
    000006b5: 	leaq	0x110(%rsp), %rax
    000006bd: 	xorl	%edx, %edx
    000006bf: 	movq	%r13, %rdi
    000006c2: 	movq	%rax, 0x30(%rsp)
    000006c7: 	movq	%rax, 0x100(%rsp)
    000006cf: 	movq	$0x14, 0x48(%rsp)
    000006d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1752
    000006dd: 	movq	0x48(%rsp), %rdx
    000006e2: 	movq	(%rsp), %rdi
    000006e6: 	movq	%rax, 0x100(%rsp)
    000006ee: 	movdqa	DATAat0xd390(%rip), %xmm0
    000006f6: 	movq	%rdx, 0x110(%rsp)
    000006fe: 	movups	%xmm0, (%rax)
    00000701: 	movq	0x100(%rsp), %rdx
    00000709: 	movl	$0x206e6f69, 0x10(%rax)
    00000710: 	movq	0x48(%rsp), %rax
    00000715: 	movq	%rax, 0x108(%rsp)
    0000071d: 	movb	$0x0, (%rdx,%rax)
    00000721: 	callq	strlen@PLT # Offset: 1825
    00000726: 	movq	%rax, %rdx
    00000729: 	movabsq	$0x3fffffffffffffff, %rax
    00000733: 	subq	0x108(%rsp), %rax
    0000073b: 	cmpq	%rax, %rdx
    0000073e: 	ja	.Ltmp230 # Offset: 1854
    00000744: 	movq	(%rsp), %rsi
    00000748: 	movq	%r13, %rdi
    0000074b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1867
    00000750: 	movq	0x40(%rbx), %rax
    00000754: 	movq	0x30(%rbx), %r14
    00000758: 	subq	$0x20, %rax
    0000075c: 	cmpq	%rax, %r14
    0000075f: 	je	.Ltmp231 # Offset: 1887
    00000765: 	leaq	0x10(%r14), %rdi
    00000769: 	movq	0x108(%rsp), %r13
    00000771: 	movq	%rdi, (%r14)
    00000774: 	movq	0x100(%rsp), %r15
    0000077c: 	movq	%r15, %rax
    0000077f: 	addq	%r13, %rax
    00000782: 	je	.Ltmp232 # Offset: 1922
    00000784: 	testq	%r15, %r15
    00000787: 	je	.Ltmp233 # Offset: 1927
.Ltmp232:
    0000078d: 	movq	%r13, 0x48(%rsp)
    00000792: 	cmpq	$0xf, %r13
    00000796: 	ja	.Ltmp234 # Offset: 1942
    0000079c: 	cmpq	$0x1, %r13
    000007a0: 	jne	.Ltmp235 # Offset: 1952
    000007a6: 	movzbl	(%r15), %eax
    000007aa: 	movb	%al, 0x10(%r14)
.Ltmp279:
    000007ae: 	movq	%r13, 0x8(%r14)
    000007b2: 	movb	$0x0, (%rdi,%r13)
    000007b7: 	addq	$0x20, 0x30(%rbx)
.Ltmp271:
    000007bc: 	callq	clock@PLT # Offset: 1980
    000007c1: 	movl	iterations(%rip), %r13d
    000007c8: 	xorl	%r14d, %r14d
    000007cb: 	leaq	0x50(%rsp), %r15
    000007d0: 	movq	%rax, start_time(%rip)
    000007d7: 	testl	%r13d, %r13d
    000007da: 	je	.Ltmp236 # Offset: 2010
    000007dc: 	nopl	(%rax) # Size: 4
.Ltmp237:
    000007e0: 	movq	%r15, %rdx
    000007e3: 	movq	%r12, %rsi
    000007e6: 	movq	%r15, %rdi
    000007e9: 	addl	$0x1, %r14d
    000007ed: 	callq	_ZNSt19normal_distributionIfEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEfRT_RKNS0_10param_typeE # Offset: 2029
    000007f2: 	cvtss2sd	%xmm0, %xmm0
    000007f6: 	addsd	(%rbp), %xmm0
    000007fb: 	movsd	%xmm0, (%rbp)
    00000800: 	cmpl	%r13d, %r14d
    00000803: 	jne	.Ltmp237 # Offset: 2051
.Ltmp236:
    00000805: 	movq	0x30(%rbx), %rax
    00000809: 	movq	0x48(%rbx), %rdx
    0000080d: 	cmpq	0x38(%rbx), %rax
    00000811: 	je	.Ltmp238 # Offset: 2065
.Ltmp273:
    00000817: 	movq	-0x20(%rax), %r13
    0000081b: 	callq	clock@PLT # Offset: 2075
    00000820: 	pxor	%xmm0, %xmm0
    00000824: 	movq	%rax, end_time(%rip)
    0000082b: 	movq	%r13, %rdi
    0000082e: 	subq	start_time(%rip), %rax
    00000835: 	cvtsi2sd	%rax, %xmm0
    0000083a: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000842: 	callq	_Z13record_resultdPKc # Offset: 2114
    00000847: 	leaq	0x120(%rsp), %r13
    0000084f: 	movq	0x8(%rsp), %rsi
    00000854: 	leaq	0x130(%rsp), %rax
    0000085c: 	xorl	%edx, %edx
    0000085e: 	movq	%r13, %rdi
    00000861: 	movq	%rax, 0x38(%rsp)
    00000866: 	movq	%rax, 0x120(%rsp)
    0000086e: 	movq	$0x17, 0x48(%rsp)
    00000877: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2167
    0000087c: 	movq	0x48(%rsp), %rdx
    00000881: 	movq	(%rsp), %rdi
    00000885: 	movq	%rax, 0x120(%rsp)
    0000088d: 	movdqa	DATAat0xd3a0(%rip), %xmm0
    00000895: 	movq	%rdx, 0x130(%rsp)
    0000089d: 	movl	$0x6e6f, %edx
    000008a2: 	movups	%xmm0, (%rax)
    000008a5: 	movw	%dx, 0x14(%rax)
    000008a9: 	movq	0x120(%rsp), %rdx
    000008b1: 	movl	$0x69747562, 0x10(%rax)
    000008b8: 	movb	$0x20, 0x16(%rax)
    000008bc: 	movq	0x48(%rsp), %rax
    000008c1: 	movq	%rax, 0x128(%rsp)
    000008c9: 	movb	$0x0, (%rdx,%rax)
    000008cd: 	callq	strlen@PLT # Offset: 2253
    000008d2: 	movq	%rax, %rdx
    000008d5: 	movabsq	$0x3fffffffffffffff, %rax
    000008df: 	subq	0x128(%rsp), %rax
    000008e7: 	cmpq	%rax, %rdx
    000008ea: 	ja	.Ltmp239 # Offset: 2282
    000008f0: 	movq	(%rsp), %rsi
    000008f4: 	movq	%r13, %rdi
    000008f7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2295
    000008fc: 	movq	0x40(%rbx), %rax
    00000900: 	movq	0x30(%rbx), %r15
    00000904: 	subq	$0x20, %rax
    00000908: 	cmpq	%rax, %r15
    0000090b: 	je	.Ltmp240 # Offset: 2315
    00000911: 	leaq	0x10(%r15), %rdi
    00000915: 	movq	0x128(%rsp), %r13
    0000091d: 	movq	%rdi, (%r15)
    00000920: 	movq	0x120(%rsp), %r14
    00000928: 	movq	%r14, %rax
    0000092b: 	addq	%r13, %rax
    0000092e: 	je	.Ltmp241 # Offset: 2350
    00000930: 	testq	%r14, %r14
    00000933: 	je	.Ltmp242 # Offset: 2355
.Ltmp241:
    00000939: 	movq	%r13, 0x48(%rsp)
    0000093e: 	cmpq	$0xf, %r13
    00000942: 	ja	.Ltmp243 # Offset: 2370
    00000948: 	cmpq	$0x1, %r13
    0000094c: 	jne	.Ltmp244 # Offset: 2380
    00000952: 	movzbl	(%r14), %eax
    00000956: 	movb	%al, 0x10(%r15)
.Ltmp281:
    0000095a: 	movq	%r13, 0x8(%r15)
    0000095e: 	movb	$0x0, (%rdi,%r13)
    00000963: 	addq	$0x20, 0x30(%rbx)
.Ltmp272:
    00000968: 	callq	clock@PLT # Offset: 2408
    0000096d: 	movl	iterations(%rip), %r13d
    00000974: 	movq	%rax, start_time(%rip)
    0000097b: 	testl	%r13d, %r13d
    0000097e: 	je	.Ltmp245 # Offset: 2430
    00000980: 	movss	0x60(%rsp), %xmm6
    00000986: 	movss	0x64(%rsp), %xmm2
    0000098c: 	xorl	%r15d, %r15d
    0000098f: 	leaq	0x68(%rsp), %r14
    00000994: 	movss	%xmm6, (%rsp)
    00000999: 	movss	%xmm2, 0x8(%rsp)
    0000099f: 	nop # Size: 1
.Ltmp246:
    000009a0: 	movq	%r14, %rdx
    000009a3: 	movq	%r12, %rsi
    000009a6: 	movq	%r14, %rdi
    000009a9: 	addl	$0x1, %r15d
    000009ad: 	callq	_ZNSt19normal_distributionIfEclISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEfRT_RKNS0_10param_typeE # Offset: 2477
    000009b2: 	mulss	0x8(%rsp), %xmm0
    000009b8: 	addss	(%rsp), %xmm0
    000009bd: 	callq	expf@PLT # Offset: 2493
    000009c2: 	cvtss2sd	%xmm0, %xmm0
    000009c6: 	addsd	(%rbp), %xmm0
    000009cb: 	movsd	%xmm0, (%rbp)
    000009d0: 	cmpl	%r13d, %r15d
    000009d3: 	jne	.Ltmp246 # Offset: 2515
.Ltmp245:
    000009d5: 	movq	0x30(%rbx), %rax
    000009d9: 	movq	0x48(%rbx), %rdx
    000009dd: 	cmpq	0x38(%rbx), %rax
    000009e1: 	je	.Ltmp247 # Offset: 2529
.Ltmp270:
    000009e7: 	movq	-0x20(%rax), %rbp
    000009eb: 	callq	clock@PLT # Offset: 2539
    000009f0: 	pxor	%xmm0, %xmm0
    000009f4: 	movq	%rax, end_time(%rip)
    000009fb: 	movq	%rbp, %rdi
    000009fe: 	subq	start_time(%rip), %rax
    00000a05: 	cvtsi2sd	%rax, %xmm0
    00000a0a: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000a12: 	callq	_Z13record_resultdPKc # Offset: 2578
    00000a17: 	movq	0x120(%rsp), %rdi
    00000a1f: 	cmpq	0x38(%rsp), %rdi
    00000a24: 	je	.Ltmp248 # Offset: 2596
    00000a26: 	movq	0x130(%rsp), %rax
    00000a2e: 	leaq	0x1(%rax), %rsi
    00000a32: 	callq	_ZdlPvm@PLT # Offset: 2610
.Ltmp248:
    00000a37: 	movq	0x100(%rsp), %rdi
    00000a3f: 	cmpq	0x30(%rsp), %rdi
    00000a44: 	je	.Ltmp249 # Offset: 2628
    00000a46: 	movq	0x110(%rsp), %rax
    00000a4e: 	leaq	0x1(%rax), %rsi
    00000a52: 	callq	_ZdlPvm@PLT # Offset: 2642
.Ltmp249:
    00000a57: 	movq	0xe0(%rsp), %rdi
    00000a5f: 	cmpq	0x28(%rsp), %rdi
    00000a64: 	je	.Ltmp250 # Offset: 2660
    00000a66: 	movq	0xf0(%rsp), %rax
    00000a6e: 	leaq	0x1(%rax), %rsi
    00000a72: 	callq	_ZdlPvm@PLT # Offset: 2674
.Ltmp250:
    00000a77: 	movq	0xc0(%rsp), %rdi
    00000a7f: 	cmpq	0x20(%rsp), %rdi
    00000a84: 	je	.Ltmp251 # Offset: 2692
    00000a86: 	movq	0xd0(%rsp), %rax
    00000a8e: 	leaq	0x1(%rax), %rsi
    00000a92: 	callq	_ZdlPvm@PLT # Offset: 2706
.Ltmp251:
    00000a97: 	movq	0xa0(%rsp), %rdi
    00000a9f: 	cmpq	0x18(%rsp), %rdi
    00000aa4: 	je	.Ltmp252 # Offset: 2724
    00000aa6: 	movq	0xb0(%rsp), %rax
    00000aae: 	leaq	0x1(%rax), %rsi
    00000ab2: 	callq	_ZdlPvm@PLT # Offset: 2738
.Ltmp252:
    00000ab7: 	movq	0x80(%rsp), %rdi
    00000abf: 	cmpq	0x10(%rsp), %rdi
    00000ac4: 	je	.Ltmp253 # Offset: 2756
    00000ac6: 	movq	0x90(%rsp), %rax
    00000ace: 	leaq	0x1(%rax), %rsi
    00000ad2: 	callq	_ZdlPvm@PLT # Offset: 2770
.Ltmp253:
    00000ad7: 	movq	0x148(%rsp), %rax
    00000adf: 	subq	%fs:0x28, %rax
    00000ae8: 	jne	.Ltmp254 # Offset: 2792
    00000aee: 	addq	$0x158, %rsp
    00000af5: 	popq	%rbx
    00000af6: 	popq	%rbp
    00000af7: 	popq	%r12
    00000af9: 	popq	%r13
    00000afb: 	popq	%r14
    00000afd: 	popq	%r15
    00000aff: 	retq # Offset: 2815
.Ltmp201:
    00000b00: 	leaq	0x48(%rsp), %rsi
    00000b05: 	xorl	%edx, %edx
    00000b07: 	movq	%r15, %rdi
    00000b0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2826
    00000b0f: 	movq	%rax, (%r15)
    00000b12: 	movq	%rax, %rdi
    00000b15: 	movq	0x48(%rsp), %rax
    00000b1a: 	movq	%rax, 0x10(%r15)
.Ltmp276:
    00000b1e: 	movq	0x8(%rsp), %rsi
    00000b23: 	movq	%r14, %rdx
    00000b26: 	callq	memcpy@PLT # Offset: 2854
    00000b2b: 	movq	0x48(%rsp), %r14
    00000b30: 	movq	(%r15), %rdi
    00000b33: 	jmp	.Ltmp255 # Offset: 2867
    00000b38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp220:
    00000b40: 	movq	(%r12), %rax
    00000b44: 	movsd	(%rbp), %xmm1
    00000b49: 	xorl	%esi, %esi
    00000b4b: 	pxor	%xmm4, %xmm4
    00000b4f: 	movss	DATAat0xd338(%rip), %xmm3
    00000b57: 	movss	DATAat0xd35c(%rip), %xmm2
    00000b5f: 	movabsq	$0x200000005, %rdi
    00000b69: 	movss	DATAat0xd33c(%rip), %xmm6
    00000b71: 	movss	DATAat0xd340(%rip), %xmm5
.Ltmp258:
    00000b79: 	imulq	$0xbc8f, %rax, %r8
    00000b80: 	movq	%r8, %rax
    00000b83: 	mulq	%rdi
    00000b86: 	movq	%r8, %rax
    00000b89: 	subq	%rdx, %rax
    00000b8c: 	shrq	%rax
    00000b8f: 	addq	%rdx, %rax
    00000b92: 	shrq	$0x1e, %rax
    00000b96: 	movq	%rax, %rdx
    00000b99: 	shlq	$0x1f, %rdx
    00000b9d: 	subq	%rax, %rdx
    00000ba0: 	movq	%r8, %rax
    00000ba3: 	subq	%rdx, %rax
    00000ba6: 	movq	%rax, %rdx
    00000ba9: 	subq	$0x1, %rdx
    00000bad: 	js	.Ltmp256 # Offset: 2989
    00000bb3: 	pxor	%xmm0, %xmm0
    00000bb7: 	cvtsi2ss	%rdx, %xmm0
.Ltmp286:
    00000bbc: 	addss	%xmm4, %xmm0
    00000bc0: 	mulss	%xmm3, %xmm0
    00000bc4: 	comiss	%xmm2, %xmm0
    00000bc7: 	jae	.Ltmp257 # Offset: 3015
    00000bcd: 	mulss	%xmm6, %xmm0
    00000bd1: 	addl	$0x1, %esi
    00000bd4: 	subss	%xmm5, %xmm0
    00000bd8: 	cvtss2sd	%xmm0, %xmm0
    00000bdc: 	addsd	%xmm0, %xmm1
    00000be0: 	cmpl	%ecx, %esi
    00000be2: 	jne	.Ltmp258 # Offset: 3042
.Ltmp287:
    00000be4: 	movq	%rax, (%r12)
    00000be8: 	movq	0x48(%rbx), %rdx
    00000bec: 	movq	0x30(%rbx), %rax
    00000bf0: 	movsd	%xmm1, (%rbp)
    00000bf5: 	cmpq	0x38(%rbx), %rax
    00000bf9: 	jne	.Ltmp259 # Offset: 3065
.Ltmp221:
    00000bff: 	movq	-0x8(%rdx), %rax
    00000c03: 	addq	$0x200, %rax
    00000c09: 	jmp	.Ltmp259 # Offset: 3081
    00000c0e: 	nop # Size: 2
.Ltmp228:
    00000c10: 	movq	(%r12), %rax
    00000c14: 	movsd	(%rbp), %xmm1
    00000c19: 	xorl	%esi, %esi
    00000c1b: 	pxor	%xmm4, %xmm4
    00000c1f: 	movsd	DATAat0xd2c0(%rip), %xmm3
    00000c27: 	movsd	DATAat0xd2e8(%rip), %xmm2
    00000c2f: 	movabsq	$0x200000005, %rdi
.Ltmp262:
    00000c39: 	imulq	$0xbc8f, %rax, %r8
    00000c40: 	movq	%r8, %rax
    00000c43: 	mulq	%rdi
    00000c46: 	movq	%r8, %rax
    00000c49: 	subq	%rdx, %rax
    00000c4c: 	shrq	%rax
    00000c4f: 	addq	%rdx, %rax
    00000c52: 	shrq	$0x1e, %rax
    00000c56: 	movq	%rax, %rdx
    00000c59: 	shlq	$0x1f, %rdx
    00000c5d: 	subq	%rax, %rdx
    00000c60: 	movq	%r8, %rax
    00000c63: 	subq	%rdx, %rax
    00000c66: 	movq	%rax, %rdx
    00000c69: 	subq	$0x1, %rdx
    00000c6d: 	js	.Ltmp260 # Offset: 3181
    00000c73: 	pxor	%xmm0, %xmm0
    00000c77: 	cvtsi2sd	%rdx, %xmm0
.Ltmp285:
    00000c7c: 	addsd	%xmm4, %xmm0
    00000c80: 	divsd	%xmm3, %xmm0
    00000c84: 	comisd	%xmm2, %xmm0
    00000c88: 	jae	.Ltmp261 # Offset: 3208
    00000c8e: 	addl	$0x1, %esi
    00000c91: 	addsd	%xmm0, %xmm1
    00000c95: 	cmpl	%esi, %ecx
    00000c97: 	jne	.Ltmp262 # Offset: 3223
.Ltmp288:
    00000c99: 	movq	%rax, (%r12)
    00000c9d: 	movq	0x48(%rbx), %rdx
    00000ca1: 	movq	0x30(%rbx), %rax
    00000ca5: 	movsd	%xmm1, (%rbp)
    00000caa: 	cmpq	0x38(%rbx), %rax
    00000cae: 	jne	.Ltmp263 # Offset: 3246
.Ltmp229:
    00000cb4: 	movq	-0x8(%rdx), %rax
    00000cb8: 	addq	$0x200, %rax
    00000cbe: 	jmp	.Ltmp263 # Offset: 3262
    00000cc3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp206:
    00000cc8: 	movq	%r14, %rsi
    00000ccb: 	movq	%rbx, %rdi
    00000cce: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3278
    00000cd3: 	jmp	.Ltmp264 # Offset: 3283
    00000cd8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp204:
    00000ce0: 	movq	-0x8(%rdx), %rax
    00000ce4: 	addq	$0x200, %rax
    00000cea: 	jmp	.Ltmp265 # Offset: 3306
    00000cef: 	nop # Size: 1
.Ltmp223:
    00000cf0: 	movq	%r13, %rsi
    00000cf3: 	movq	%rbx, %rdi
    00000cf6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3318
    00000cfb: 	jmp	.Ltmp266 # Offset: 3323
.Ltmp215:
    00000d00: 	movq	%r13, %rsi
    00000d03: 	movq	%rbx, %rdi
    00000d06: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3334
    00000d0b: 	jmp	.Ltmp267 # Offset: 3339
.Ltmp213:
    00000d10: 	movq	-0x8(%rdx), %rax
    00000d14: 	addq	$0x200, %rax
    00000d1a: 	jmp	.Ltmp268 # Offset: 3354
    00000d1f: 	nop # Size: 1
.Ltmp198:
    00000d20: 	movq	%r14, %rsi
    00000d23: 	movq	%rbx, %rdi
    00000d26: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3366
    00000d2b: 	jmp	.Ltmp269 # Offset: 3371
.Ltmp247:
    00000d30: 	movq	-0x8(%rdx), %rax
    00000d34: 	addq	$0x200, %rax
    00000d3a: 	jmp	.Ltmp270 # Offset: 3386
    00000d3f: 	nop # Size: 1
.Ltmp231:
    00000d40: 	movq	%r13, %rsi
    00000d43: 	movq	%rbx, %rdi
    00000d46: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3398
    00000d4b: 	jmp	.Ltmp271 # Offset: 3403
.Ltmp240:
    00000d50: 	movq	%r13, %rsi
    00000d53: 	movq	%rbx, %rdi
    00000d56: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3414
    00000d5b: 	jmp	.Ltmp272 # Offset: 3419
.Ltmp238:
    00000d60: 	movq	-0x8(%rdx), %rax
    00000d64: 	addq	$0x200, %rax
    00000d6a: 	jmp	.Ltmp273 # Offset: 3434
    00000d6f: 	nop # Size: 1
.Ltmp210:
    00000d70: 	testq	%r14, %r14
    00000d73: 	je	.Ltmp274 # Offset: 3443
    00000d79: 	jmp	.Ltmp275 # Offset: 3449
    00000d7e: 	nop # Size: 2
.Ltmp202:
    00000d80: 	testq	%r14, %r14
    00000d83: 	je	.Ltmp255 # Offset: 3459
    00000d89: 	jmp	.Ltmp276 # Offset: 3465
    00000d8e: 	nop # Size: 2
.Ltmp219:
    00000d90: 	testq	%r13, %r13
    00000d93: 	je	.Ltmp277 # Offset: 3475
    00000d99: 	jmp	.Ltmp278 # Offset: 3481
    00000d9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp235:
    00000da0: 	testq	%r13, %r13
    00000da3: 	je	.Ltmp279 # Offset: 3491
    00000da9: 	jmp	.Ltmp280 # Offset: 3497
    00000dae: 	nop # Size: 2
.Ltmp244:
    00000db0: 	testq	%r13, %r13
    00000db3: 	je	.Ltmp281 # Offset: 3507
    00000db9: 	jmp	.Ltmp282 # Offset: 3513
    00000dbe: 	nop # Size: 2
.Ltmp227:
    00000dc0: 	testq	%r13, %r13
    00000dc3: 	je	.Ltmp283 # Offset: 3523
    00000dc9: 	jmp	.Ltmp284 # Offset: 3529
    00000dce: 	nop # Size: 2
.Ltmp218:
    00000dd0: 	movq	0x8(%rsp), %rsi
    00000dd5: 	xorl	%edx, %edx
    00000dd7: 	movq	%r14, %rdi
    00000dda: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3546
    00000ddf: 	movq	%rax, (%r14)
    00000de2: 	movq	%rax, %rdi
    00000de5: 	movq	0x48(%rsp), %rax
    00000dea: 	movq	%rax, 0x10(%r14)
.Ltmp278:
    00000dee: 	movq	%r13, %rdx
    00000df1: 	movq	%r15, %rsi
    00000df4: 	callq	memcpy@PLT # Offset: 3572
    00000df9: 	movq	0x48(%rsp), %r13
    00000dfe: 	movq	(%r14), %rdi
    00000e01: 	jmp	.Ltmp277 # Offset: 3585
    00000e06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp234:
    00000e10: 	movq	0x8(%rsp), %rsi
    00000e15: 	xorl	%edx, %edx
    00000e17: 	movq	%r14, %rdi
    00000e1a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3610
    00000e1f: 	movq	%rax, (%r14)
    00000e22: 	movq	%rax, %rdi
    00000e25: 	movq	0x48(%rsp), %rax
    00000e2a: 	movq	%rax, 0x10(%r14)
.Ltmp280:
    00000e2e: 	movq	%r13, %rdx
    00000e31: 	movq	%r15, %rsi
    00000e34: 	callq	memcpy@PLT # Offset: 3636
    00000e39: 	movq	0x48(%rsp), %r13
    00000e3e: 	movq	(%r14), %rdi
    00000e41: 	jmp	.Ltmp279 # Offset: 3649
    00000e46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp226:
    00000e50: 	movq	0x8(%rsp), %rsi
    00000e55: 	xorl	%edx, %edx
    00000e57: 	movq	%r14, %rdi
    00000e5a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3674
    00000e5f: 	movq	%rax, (%r14)
    00000e62: 	movq	%rax, %rdi
    00000e65: 	movq	0x48(%rsp), %rax
    00000e6a: 	movq	%rax, 0x10(%r14)
.Ltmp284:
    00000e6e: 	movq	%r13, %rdx
    00000e71: 	movq	%r15, %rsi
    00000e74: 	callq	memcpy@PLT # Offset: 3700
    00000e79: 	movq	0x48(%rsp), %r13
    00000e7e: 	movq	(%r14), %rdi
    00000e81: 	jmp	.Ltmp283 # Offset: 3713
    00000e86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp209:
    00000e90: 	movq	0x8(%rsp), %rsi
    00000e95: 	xorl	%edx, %edx
    00000e97: 	movq	%r15, %rdi
    00000e9a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3738
    00000e9f: 	movq	%rax, (%r15)
    00000ea2: 	movq	%rax, %rdi
    00000ea5: 	movq	0x48(%rsp), %rax
    00000eaa: 	movq	%rax, 0x10(%r15)
.Ltmp275:
    00000eae: 	movq	0x20(%rsp), %rsi
    00000eb3: 	movq	%r14, %rdx
    00000eb6: 	callq	memcpy@PLT # Offset: 3766
    00000ebb: 	movq	0x48(%rsp), %r14
    00000ec0: 	movq	(%r15), %rdi
    00000ec3: 	jmp	.Ltmp274 # Offset: 3779
    00000ec8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp243:
    00000ed0: 	movq	0x8(%rsp), %rsi
    00000ed5: 	xorl	%edx, %edx
    00000ed7: 	movq	%r15, %rdi
    00000eda: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3802
    00000edf: 	movq	%rax, (%r15)
    00000ee2: 	movq	%rax, %rdi
    00000ee5: 	movq	0x48(%rsp), %rax
    00000eea: 	movq	%rax, 0x10(%r15)
.Ltmp282:
    00000eee: 	movq	%r13, %rdx
    00000ef1: 	movq	%r14, %rsi
    00000ef4: 	callq	memcpy@PLT # Offset: 3828
    00000ef9: 	movq	0x48(%rsp), %r13
    00000efe: 	movq	(%r15), %rdi
    00000f01: 	jmp	.Ltmp281 # Offset: 3841
    00000f06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp260:
    00000f10: 	movq	%rdx, %r8
    00000f13: 	andl	$0x1, %edx
    00000f16: 	pxor	%xmm0, %xmm0
    00000f1a: 	shrq	%r8
    00000f1d: 	orq	%rdx, %r8
    00000f20: 	cvtsi2sd	%r8, %xmm0
    00000f25: 	addsd	%xmm0, %xmm0
    00000f29: 	jmp	.Ltmp285 # Offset: 3881
    00000f2e: 	nop # Size: 2
.Ltmp256:
    00000f30: 	movq	%rdx, %r8
    00000f33: 	andl	$0x1, %edx
    00000f36: 	pxor	%xmm0, %xmm0
    00000f3a: 	shrq	%r8
    00000f3d: 	orq	%rdx, %r8
    00000f40: 	cvtsi2ss	%r8, %xmm0
    00000f45: 	addss	%xmm0, %xmm0
    00000f49: 	jmp	.Ltmp286 # Offset: 3913
.Ltmp257:
    00000f4e: 	addl	$0x1, %esi
    00000f51: 	addsd	DATAat0xd300(%rip), %xmm1
    00000f59: 	cmpl	%ecx, %esi
    00000f5b: 	je	.Ltmp287 # Offset: 3931
    00000f61: 	jmp	.Ltmp258 # Offset: 3937
.Ltmp261:
    00000f66: 	addl	$0x1, %esi
    00000f69: 	addsd	DATAat0xd308(%rip), %xmm1
    00000f71: 	cmpl	%esi, %ecx
    00000f73: 	je	.Ltmp288 # Offset: 3955
    00000f79: 	jmp	.Ltmp262 # Offset: 3961
.Ltmp197:
    00000f7e: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000f85: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3973
.Ltmp200:
    00000f8a: 	leaq	DATAat0xd280(%rip), %rdi
    00000f91: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3985
.Ltmp205:
    00000f96: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000f9d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3997
.Ltmp208:
    00000fa2: 	leaq	DATAat0xd280(%rip), %rdi
    00000fa9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4009
.Ltmp214:
    00000fae: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000fb5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4021
.Ltmp242:
    00000fba: 	leaq	DATAat0xd280(%rip), %rdi
    00000fc1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4033
.Ltmp254:
    00000fc6: 	callq	__stack_chk_fail@PLT # Offset: 4038
.Ltmp217:
    00000fcb: 	leaq	DATAat0xd280(%rip), %rdi
    00000fd2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4050
.Ltmp222:
    00000fd7: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000fde: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4062
.Ltmp225:
    00000fe3: 	leaq	DATAat0xd280(%rip), %rdi
    00000fea: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4074
.Ltmp230:
    00000fef: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000ff6: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4086
.Ltmp233:
    00000ffb: 	leaq	DATAat0xd280(%rip), %rdi
    00001002: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4098
.Ltmp239:
    00001007: 	leaq	DATAat0xd2aa(%rip), %rdi
    0000100e: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4110
    00001013: 	endbr64
    00001017: 	movq	%rax, %rbp
    0000101a: 	jmp	.Ltmp289 # Offset: 4122
    0000101c: 	endbr64
    00001020: 	movq	%rax, %rbp
    00001023: 	jmp	.Ltmp290 # Offset: 4131
.Ltmp295:
    00001025: 	movq	0x120(%rsp), %rdi
    0000102d: 	cmpq	0x38(%rsp), %rdi
    00001032: 	je	.Ltmp290 # Offset: 4146
    00001034: 	movq	0x130(%rsp), %rax
    0000103c: 	leaq	0x1(%rax), %rsi
    00001040: 	callq	_ZdlPvm@PLT # Offset: 4160
.Ltmp290:
    00001045: 	movq	0x100(%rsp), %rdi
    0000104d: 	cmpq	0x30(%rsp), %rdi
    00001052: 	je	.Ltmp289 # Offset: 4178
    00001054: 	movq	0x110(%rsp), %rax
    0000105c: 	leaq	0x1(%rax), %rsi
    00001060: 	callq	_ZdlPvm@PLT # Offset: 4192
.Ltmp289:
    00001065: 	movq	0xe0(%rsp), %rdi
    0000106d: 	cmpq	0x28(%rsp), %rdi
    00001072: 	je	.Ltmp291 # Offset: 4210
    00001074: 	movq	0xf0(%rsp), %rax
    0000107c: 	leaq	0x1(%rax), %rsi
    00001080: 	callq	_ZdlPvm@PLT # Offset: 4224
.Ltmp291:
    00001085: 	movq	0xc0(%rsp), %rdi
    0000108d: 	cmpq	0x20(%rsp), %rdi
    00001092: 	je	.Ltmp292 # Offset: 4242
    00001094: 	movq	0xd0(%rsp), %rax
    0000109c: 	leaq	0x1(%rax), %rsi
    000010a0: 	callq	_ZdlPvm@PLT # Offset: 4256
.Ltmp292:
    000010a5: 	movq	0xa0(%rsp), %rdi
    000010ad: 	cmpq	0x18(%rsp), %rdi
    000010b2: 	je	.Ltmp293 # Offset: 4274
    000010b4: 	movq	0xb0(%rsp), %rax
    000010bc: 	leaq	0x1(%rax), %rsi
    000010c0: 	callq	_ZdlPvm@PLT # Offset: 4288
.Ltmp293:
    000010c5: 	movq	0x80(%rsp), %rdi
    000010cd: 	cmpq	0x10(%rsp), %rdi
    000010d2: 	je	.Ltmp294 # Offset: 4306
    000010d4: 	movq	0x90(%rsp), %rax
    000010dc: 	leaq	0x1(%rax), %rsi
    000010e0: 	callq	_ZdlPvm@PLT # Offset: 4320
.Ltmp294:
    000010e5: 	movq	%rbp, %rdi
    000010e8: 	callq	_Unwind_Resume@PLT # Offset: 4328
    000010ed: 	endbr64
    000010f1: 	movq	%rax, %rbp
    000010f4: 	jmp	.Ltmp295 # Offset: 4340
    000010f9: 	endbr64
    000010fd: 	movq	%rax, %rbp
    00001100: 	jmp	.Ltmp293 # Offset: 4352
    00001102: 	endbr64
    00001106: 	movq	%rax, %rbp
    00001109: 	jmp	.Ltmp292 # Offset: 4361
    0000110b: 	endbr64
    0000110f: 	movq	%rax, %rbp
    00001112: 	jmp	.Ltmp291 # Offset: 4370
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_one_generatorISt26linear_congruential_engineImLm48271ELm0ELm2147483647EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EE"

Binary Function "_ZNSt19normal_distributionIfEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEfRT_RKNS0_10param_typeE" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x67e0
  Size        : 0x374
  MaxSize     : 0x380
  Offset      : 0x67e0
  Section     : .text
  Orc Section : .local.text._ZNSt19normal_distributionIfEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEfRT_RKNS0_10param_typeE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdx, %rbp
    00000008: 	pushq	%rbx
    00000009: 	movq	%rdi, %rbx
    0000000c: 	subq	$0x18, %rsp
    00000010: 	cmpb	$0x0, 0xc(%rdi)
    00000014: 	jne	.Ltmp296 # Offset: 20
    0000001a: 	movsd	DATAat0xd2c0(%rip), %xmm8
    00000023: 	movq	0x808(%rsi), %r8
    0000002a: 	movq	%rsi, %rcx
    0000002d: 	pxor	%xmm5, %xmm5
    00000031: 	movsd	DATAat0xd2c8(%rip), %xmm7
    00000039: 	movsd	DATAat0xd2d0(%rip), %xmm4
    00000041: 	movabsq	$-0x8000000000000000, %rdi
    0000004b: 	movss	DATAat0xd338(%rip), %xmm6
    00000053: 	movss	DATAat0xd35c(%rip), %xmm3
    0000005b: 	leaq	-0x1(%r8), %rax
    0000005f: 	movq	(%rsi), %rdx
    00000062: 	movabsq	$0x200000005, %rsi
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp305:
    00000070: 	testq	%rax, %rax
    00000073: 	js	.Ltmp297 # Offset: 115
    00000079: 	pxor	%xmm0, %xmm0
    0000007d: 	cvtsi2sd	%rax, %xmm0
.Ltmp314:
    00000082: 	divsd	%xmm8, %xmm0
    00000087: 	mulsd	%xmm7, %xmm0
    0000008b: 	comisd	%xmm4, %xmm0
    0000008f: 	jae	.Ltmp298 # Offset: 143
    00000095: 	cvttsd2si	%xmm0, %r9
.Ltmp310:
    0000009a: 	imulq	$0x41a7, %rdx, %r10
    000000a1: 	movq	0x8(%rcx,%r9,8), %r8
    000000a6: 	movq	%r10, %rax
    000000a9: 	mulq	%rsi
    000000ac: 	movq	%r10, %rax
    000000af: 	subq	%rdx, %rax
    000000b2: 	shrq	%rax
    000000b5: 	addq	%rax, %rdx
    000000b8: 	shrq	$0x1e, %rdx
    000000bc: 	movq	%rdx, %rax
    000000bf: 	shlq	$0x1f, %rax
    000000c3: 	subq	%rdx, %rax
    000000c6: 	movq	%r10, %rdx
    000000c9: 	subq	%rax, %rdx
    000000cc: 	movq	%r8, %rax
    000000cf: 	movq	%rdx, 0x8(%rcx,%r9,8)
    000000d4: 	subq	$0x1, %rax
    000000d8: 	js	.Ltmp299 # Offset: 216
    000000de: 	pxor	%xmm0, %xmm0
    000000e2: 	cvtsi2ss	%rax, %xmm0
    000000e7: 	addss	%xmm5, %xmm0
    000000eb: 	mulss	%xmm6, %xmm0
    000000ef: 	comiss	%xmm3, %xmm0
    000000f2: 	jae	.Ltmp300 # Offset: 242
.Ltmp311:
    000000f8: 	addss	%xmm0, %xmm0
    000000fc: 	movaps	%xmm0, %xmm2
    000000ff: 	subss	%xmm3, %xmm2
    00000103: 	movaps	%xmm2, %xmm9
    00000107: 	mulss	%xmm2, %xmm9
    0000010c: 	testq	%rax, %rax
    0000010f: 	js	.Ltmp301 # Offset: 271
.Ltmp312:
    00000115: 	pxor	%xmm0, %xmm0
    00000119: 	cvtsi2sd	%rax, %xmm0
.Ltmp313:
    0000011e: 	divsd	%xmm8, %xmm0
    00000123: 	mulsd	%xmm7, %xmm0
    00000127: 	comisd	%xmm4, %xmm0
    0000012b: 	jae	.Ltmp302 # Offset: 299
    00000131: 	cvttsd2si	%xmm0, %r9
.Ltmp309:
    00000136: 	imulq	$0x41a7, %rdx, %r10
    0000013d: 	movq	0x8(%rcx,%r9,8), %r8
    00000142: 	movq	%r10, %rax
    00000145: 	mulq	%rsi
    00000148: 	movq	%r10, %rax
    0000014b: 	subq	%rdx, %rax
    0000014e: 	shrq	%rax
    00000151: 	addq	%rax, %rdx
    00000154: 	shrq	$0x1e, %rdx
    00000158: 	movq	%rdx, %rax
    0000015b: 	shlq	$0x1f, %rax
    0000015f: 	subq	%rdx, %rax
    00000162: 	movq	%r10, %rdx
    00000165: 	subq	%rax, %rdx
    00000168: 	movq	%r8, %rax
    0000016b: 	movq	%rdx, 0x8(%rcx,%r9,8)
    00000170: 	subq	$0x1, %rax
    00000174: 	js	.Ltmp303 # Offset: 372
    0000017a: 	pxor	%xmm0, %xmm0
    0000017e: 	cvtsi2ss	%rax, %xmm0
    00000183: 	addss	%xmm5, %xmm0
    00000187: 	mulss	%xmm6, %xmm0
    0000018b: 	comiss	%xmm3, %xmm0
    0000018e: 	jae	.Ltmp304 # Offset: 398
.Ltmp315:
    00000194: 	addss	%xmm0, %xmm0
    00000198: 	movaps	%xmm0, %xmm1
    0000019b: 	subss	%xmm3, %xmm1
    0000019f: 	movaps	%xmm1, %xmm0
    000001a2: 	mulss	%xmm1, %xmm0
.Ltmp316:
    000001a6: 	addss	%xmm0, %xmm9
    000001ab: 	comiss	%xmm3, %xmm9
    000001af: 	ja	.Ltmp305 # Offset: 431
    000001b5: 	ucomiss	%xmm5, %xmm9
    000001b9: 	jp	.Ltmp306 # Offset: 441
    000001bb: 	je	.Ltmp305 # Offset: 443
.Ltmp306:
    000001c1: 	movq	%rdx, (%rcx)
    000001c4: 	movaps	%xmm9, %xmm0
    000001c8: 	movq	%r8, 0x808(%rcx)
    000001cf: 	movss	%xmm1, 0xc(%rsp)
    000001d5: 	movss	%xmm2, 0x8(%rsp)
    000001db: 	movss	%xmm9, 0x4(%rsp)
    000001e2: 	callq	logf@PLT # Offset: 482
    000001e7: 	movss	0x4(%rsp), %xmm9
    000001ee: 	pxor	%xmm5, %xmm5
    000001f2: 	movss	0x8(%rsp), %xmm2
    000001f8: 	mulss	DATAat0xd300(%rip), %xmm0
    00000200: 	movss	0xc(%rsp), %xmm1
    00000206: 	divss	%xmm9, %xmm0
    0000020b: 	ucomiss	%xmm0, %xmm5
    0000020e: 	ja	.Ltmp307 # Offset: 526
    00000214: 	sqrtss	%xmm0, %xmm0
.Ltmp317:
    00000218: 	mulss	%xmm0, %xmm2
    0000021c: 	movb	$0x1, 0xc(%rbx)
    00000220: 	mulss	%xmm1, %xmm0
    00000224: 	movss	%xmm2, 0x8(%rbx)
    00000229: 	jmp	.Ltmp308 # Offset: 553
    0000022e: 	nop # Size: 2
.Ltmp302:
    00000230: 	subsd	%xmm4, %xmm0
    00000234: 	cvttsd2si	%xmm0, %r9
    00000239: 	xorq	%rdi, %r9
    0000023c: 	jmp	.Ltmp309 # Offset: 572
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp298:
    00000248: 	subsd	%xmm4, %xmm0
    0000024c: 	cvttsd2si	%xmm0, %r9
    00000251: 	xorq	%rdi, %r9
    00000254: 	jmp	.Ltmp310 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp299:
    00000260: 	movq	%rax, %r8
    00000263: 	movq	%rax, %r9
    00000266: 	pxor	%xmm0, %xmm0
    0000026a: 	shrq	%r8
    0000026d: 	andl	$0x1, %r9d
    00000271: 	orq	%r9, %r8
    00000274: 	cvtsi2ss	%r8, %xmm0
    00000279: 	addss	%xmm0, %xmm0
    0000027d: 	addss	%xmm5, %xmm0
    00000281: 	mulss	%xmm6, %xmm0
    00000285: 	comiss	%xmm3, %xmm0
    00000288: 	jb	.Ltmp311 # Offset: 648
.Ltmp300:
    0000028e: 	movss	DATAat0xd330(%rip), %xmm9
    00000297: 	movss	DATAat0xd334(%rip), %xmm2
    0000029f: 	testq	%rax, %rax
    000002a2: 	jns	.Ltmp312 # Offset: 674
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp301:
    000002b0: 	movq	%rax, %r8
    000002b3: 	andl	$0x1, %eax
    000002b6: 	pxor	%xmm0, %xmm0
    000002ba: 	shrq	%r8
    000002bd: 	orq	%rax, %r8
    000002c0: 	cvtsi2sd	%r8, %xmm0
    000002c5: 	addsd	%xmm0, %xmm0
    000002c9: 	jmp	.Ltmp313 # Offset: 713
    000002ce: 	nop # Size: 2
.Ltmp297:
    000002d0: 	movq	%rax, %r8
    000002d3: 	andl	$0x1, %eax
    000002d6: 	pxor	%xmm0, %xmm0
    000002da: 	shrq	%r8
    000002dd: 	orq	%rax, %r8
    000002e0: 	cvtsi2sd	%r8, %xmm0
    000002e5: 	addsd	%xmm0, %xmm0
    000002e9: 	jmp	.Ltmp314 # Offset: 745
    000002ee: 	nop # Size: 2
.Ltmp303:
    000002f0: 	movq	%rax, %r9
    000002f3: 	movq	%rax, %r10
    000002f6: 	pxor	%xmm0, %xmm0
    000002fa: 	shrq	%r9
    000002fd: 	andl	$0x1, %r10d
    00000301: 	orq	%r10, %r9
    00000304: 	cvtsi2ss	%r9, %xmm0
    00000309: 	addss	%xmm0, %xmm0
    0000030d: 	addss	%xmm5, %xmm0
    00000311: 	mulss	%xmm6, %xmm0
    00000315: 	comiss	%xmm3, %xmm0
    00000318: 	jb	.Ltmp315 # Offset: 792
.Ltmp304:
    0000031e: 	movss	DATAat0xd330(%rip), %xmm0
    00000326: 	movss	DATAat0xd334(%rip), %xmm1
    0000032e: 	jmp	.Ltmp316 # Offset: 814
    00000333: 	nopl	(%rax,%rax) # Size: 5
.Ltmp296:
    00000338: 	movb	$0x0, 0xc(%rdi)
    0000033c: 	movss	0x8(%rdi), %xmm0
.Ltmp308:
    00000341: 	mulss	0x4(%rbp), %xmm0
    00000346: 	addss	(%rbp), %xmm0
    0000034b: 	addq	$0x18, %rsp
    0000034f: 	popq	%rbx
    00000350: 	popq	%rbp
    00000351: 	retq # Offset: 849
.Ltmp307:
    00000352: 	movss	%xmm1, 0x8(%rsp)
    00000358: 	movss	%xmm2, 0x4(%rsp)
    0000035e: 	callq	sqrtf@PLT # Offset: 862
    00000363: 	movss	0x8(%rsp), %xmm1
    00000369: 	movss	0x4(%rsp), %xmm2
    0000036f: 	jmp	.Ltmp317 # Offset: 879
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt19normal_distributionIfEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEfRT_RKNS0_10param_typeE"

Binary Function "_Z18test_one_generatorISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISG_EE" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x6b60
  Size        : 0x1281
  MaxSize     : 0x1290
  Offset      : 0x6b60
  Section     : .text
  Orc Section : .local.text._Z18test_one_generatorISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISG_EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rcx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	movq	%rsi, %rdi
    0000001d: 	subq	$0x158, %rsp
    00000024: 	movaps	DATAat0xd350(%rip), %xmm0
    0000002b: 	movq	%rsi, (%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x148(%rsp)
    00000040: 	xorl	%eax, %eax
    00000042: 	movq	DATAat0xd2f8(%rip), %rax
    00000049: 	movb	$0x0, 0x5c(%rsp)
    0000004e: 	movl	$0x0, 0x58(%rsp)
    00000056: 	movq	%rax, 0x50(%rsp)
    0000005b: 	leaq	0x90(%rsp), %rax
    00000063: 	movq	$0x0, 0x70(%rsp)
    0000006c: 	movq	%rax, 0x18(%rsp)
    00000071: 	movq	%rax, 0x80(%rsp)
    00000079: 	movl	$0x64656573, 0x90(%rsp)
    00000084: 	movb	$0x20, 0x94(%rsp)
    0000008c: 	movq	$0x5, 0x88(%rsp)
    00000098: 	movb	$0x0, 0x95(%rsp)
    000000a0: 	movaps	%xmm0, 0x60(%rsp)
    000000a5: 	callq	strlen@PLT # Offset: 165
    000000aa: 	movq	%rax, %rdx
    000000ad: 	movabsq	$0x3ffffffffffffffa, %rax
    000000b7: 	cmpq	%rax, %rdx
    000000ba: 	ja	.Ltmp318 # Offset: 186
    000000c0: 	leaq	0x80(%rsp), %r12
    000000c8: 	movq	(%rsp), %rsi
    000000cc: 	movq	%r12, %rdi
    000000cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 207
    000000d4: 	movq	0x40(%r15), %rax
    000000d8: 	movq	0x30(%r15), %r13
    000000dc: 	subq	$0x20, %rax
    000000e0: 	cmpq	%rax, %r13
    000000e3: 	je	.Ltmp319 # Offset: 227
    000000e9: 	leaq	0x10(%r13), %rdi
    000000ed: 	movq	0x88(%rsp), %r12
    000000f5: 	movq	%rdi, (%r13)
    000000f9: 	movq	0x80(%rsp), %rax
    00000101: 	movq	%rax, 0x8(%rsp)
    00000106: 	movq	%rax, %rcx
    00000109: 	addq	%r12, %rax
    0000010c: 	je	.Ltmp320 # Offset: 268
    0000010e: 	testq	%rcx, %rcx
    00000111: 	je	.Ltmp321 # Offset: 273
.Ltmp320:
    00000117: 	movq	%r12, 0x48(%rsp)
    0000011c: 	cmpq	$0xf, %r12
    00000120: 	ja	.Ltmp322 # Offset: 288
    00000126: 	cmpq	$0x1, %r12
    0000012a: 	jne	.Ltmp323 # Offset: 298
    00000130: 	movq	0x8(%rsp), %rax
    00000135: 	movzbl	(%rax), %eax
    00000138: 	movb	%al, 0x10(%r13)
.Ltmp328:
    0000013c: 	movq	%r12, 0x8(%r13)
    00000140: 	movb	$0x0, (%rdi,%r12)
    00000145: 	addq	$0x20, 0x30(%r15)
.Ltmp399:
    0000014a: 	callq	clock@PLT # Offset: 330
    0000014f: 	movq	%rax, start_time(%rip)
    00000156: 	movl	iterations(%rip), %eax
    0000015c: 	testl	%eax, %eax
    0000015e: 	je	.Ltmp324 # Offset: 350
    00000164: 	movslq	init_value(%rip), %rcx
    0000016b: 	leal	-0x1(%rax), %r10d
    0000016f: 	leaq	0x8(%rbx), %r11
    00000173: 	movabsq	$0x200000005, %rdi
    0000017d: 	leaq	0x808(%rbx), %r8
    00000184: 	leaq	0x1(%rcx), %r9
    00000188: 	addq	%r9, %r10
.Ltmp327:
    0000018b: 	movq	%rcx, %rax
    0000018e: 	mulq	%rdi
    00000191: 	movq	%rcx, %rax
    00000194: 	subq	%rdx, %rax
    00000197: 	shrq	%rax
    0000019a: 	addq	%rax, %rdx
    0000019d: 	shrq	$0x1e, %rdx
    000001a1: 	movq	%rdx, %rax
    000001a4: 	shlq	$0x1f, %rax
    000001a8: 	subq	%rdx, %rax
    000001ab: 	subq	%rax, %rcx
    000001ae: 	movl	$0x1, %eax
    000001b3: 	movq	%rcx, %rdx
    000001b6: 	movq	%r11, %rcx
    000001b9: 	cmoveq	%rax, %rdx
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp325:
    000001c0: 	imulq	$0x41a7, %rdx, %rsi
    000001c7: 	addq	$0x8, %rcx
    000001cb: 	movq	%rsi, %rax
    000001ce: 	mulq	%rdi
    000001d1: 	movq	%rsi, %rax
    000001d4: 	subq	%rdx, %rax
    000001d7: 	shrq	%rax
    000001da: 	addq	%rax, %rdx
    000001dd: 	shrq	$0x1e, %rdx
    000001e1: 	movq	%rdx, %rax
    000001e4: 	shlq	$0x1f, %rax
    000001e8: 	subq	%rdx, %rax
    000001eb: 	subq	%rax, %rsi
    000001ee: 	movq	%rsi, -0x8(%rcx)
    000001f2: 	movq	%rsi, %rdx
    000001f5: 	cmpq	%rcx, %r8
    000001f8: 	jne	.Ltmp325 # Offset: 504
    000001fa: 	movq	%r9, %rcx
    000001fd: 	cmpq	%r10, %r9
    00000200: 	je	.Ltmp326 # Offset: 512
    00000202: 	addq	$0x1, %r9
    00000206: 	jmp	.Ltmp327 # Offset: 518
.Ltmp322:
    00000208: 	leaq	0x48(%rsp), %rsi
    0000020d: 	xorl	%edx, %edx
    0000020f: 	movq	%r13, %rdi
    00000212: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 530
    00000217: 	movq	%rax, (%r13)
    0000021b: 	movq	%rax, %rdi
    0000021e: 	movq	0x48(%rsp), %rax
    00000223: 	movq	%rax, 0x10(%r13)
.Ltmp410:
    00000227: 	movq	0x8(%rsp), %rsi
    0000022c: 	movq	%r12, %rdx
    0000022f: 	callq	memcpy@PLT # Offset: 559
    00000234: 	movq	0x48(%rsp), %r12
    00000239: 	movq	(%r13), %rdi
    0000023d: 	jmp	.Ltmp328 # Offset: 573
.Ltmp326:
    00000242: 	imulq	$0x41a7, %rsi, %rcx
    00000249: 	movq	%rcx, %rax
    0000024c: 	mulq	%rdi
    0000024f: 	movq	%rcx, %rax
    00000252: 	subq	%rdx, %rax
    00000255: 	shrq	%rax
    00000258: 	addq	%rdx, %rax
    0000025b: 	shrq	$0x1e, %rax
    0000025f: 	movq	%rax, %rdx
    00000262: 	shlq	$0x1f, %rdx
    00000266: 	subq	%rax, %rdx
    00000269: 	movq	%rcx, %rax
    0000026c: 	subq	%rdx, %rax
    0000026f: 	movq	%rax, (%rbx)
    00000272: 	movq	%rax, 0x808(%rbx)
.Ltmp324:
    00000279: 	movq	0x30(%r15), %rax
    0000027d: 	movq	0x48(%r15), %rdx
    00000281: 	cmpq	%rax, 0x38(%r15)
    00000285: 	je	.Ltmp329 # Offset: 645
.Ltmp409:
    0000028b: 	movq	-0x20(%rax), %r12
    0000028f: 	callq	clock@PLT # Offset: 655
    00000294: 	pxor	%xmm0, %xmm0
    00000298: 	movq	%rax, end_time(%rip)
    0000029f: 	movq	%r12, %rdi
    000002a2: 	subq	start_time(%rip), %rax
    000002a9: 	cvtsi2sd	%rax, %xmm0
    000002ae: 	divsd	DATAat0xd2d8(%rip), %xmm0
    000002b6: 	callq	_Z13record_resultdPKc # Offset: 694
    000002bb: 	leaq	0xb0(%rsp), %rax
    000002c3: 	xorl	%edx, %edx
    000002c5: 	leaq	0xa0(%rsp), %r12
    000002cd: 	movq	$0x19, 0x48(%rsp)
    000002d6: 	movq	%rax, 0x20(%rsp)
    000002db: 	movq	%r12, %rdi
    000002de: 	movq	%rax, 0xa0(%rsp)
    000002e6: 	leaq	0x48(%rsp), %rax
    000002eb: 	movq	%rax, %rsi
    000002ee: 	movq	%rax, 0x8(%rsp)
    000002f3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 755
    000002f8: 	movq	0x48(%rsp), %rdx
    000002fd: 	movdqa	DATAat0xd360(%rip), %xmm0
    00000305: 	movb	$0x20, 0x18(%rax)
    00000309: 	movabsq	$0x6e6f697475626972, %rdi
    00000313: 	movq	%rax, 0xa0(%rsp)
    0000031b: 	movq	%rdx, 0xb0(%rsp)
    00000323: 	movups	%xmm0, (%rax)
    00000326: 	movq	0xa0(%rsp), %rdx
    0000032e: 	movq	%rdi, 0x10(%rax)
    00000332: 	movq	0x48(%rsp), %rax
    00000337: 	movq	(%rsp), %rdi
    0000033b: 	movq	%rax, 0xa8(%rsp)
    00000343: 	movb	$0x0, (%rdx,%rax)
    00000347: 	callq	strlen@PLT # Offset: 839
    0000034c: 	movq	%rax, %rdx
    0000034f: 	movabsq	$0x3fffffffffffffff, %rax
    00000359: 	subq	0xa8(%rsp), %rax
    00000361: 	cmpq	%rax, %rdx
    00000364: 	ja	.Ltmp330 # Offset: 868
    0000036a: 	movq	(%rsp), %rsi
    0000036e: 	movq	%r12, %rdi
    00000371: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 881
    00000376: 	movq	0x40(%r15), %rax
    0000037a: 	movq	0x30(%r15), %r13
    0000037e: 	subq	$0x20, %rax
    00000382: 	cmpq	%rax, %r13
    00000385: 	je	.Ltmp331 # Offset: 901
    0000038b: 	leaq	0x10(%r13), %rdi
    0000038f: 	movq	0xa8(%rsp), %r12
    00000397: 	movq	%rdi, (%r13)
    0000039b: 	movq	0xa0(%rsp), %rax
    000003a3: 	movq	%rax, 0x10(%rsp)
    000003a8: 	movq	%rax, %rcx
    000003ab: 	addq	%r12, %rax
    000003ae: 	je	.Ltmp332 # Offset: 942
    000003b0: 	testq	%rcx, %rcx
    000003b3: 	je	.Ltmp333 # Offset: 947
.Ltmp332:
    000003b9: 	movq	%r12, 0x48(%rsp)
    000003be: 	cmpq	$0xf, %r12
    000003c2: 	ja	.Ltmp334 # Offset: 962
    000003c8: 	cmpq	$0x1, %r12
    000003cc: 	jne	.Ltmp335 # Offset: 972
    000003d2: 	movq	0x10(%rsp), %rax
    000003d7: 	movzbl	(%rax), %eax
    000003da: 	movb	%al, 0x10(%r13)
.Ltmp411:
    000003de: 	movq	%r12, 0x8(%r13)
    000003e2: 	movb	$0x0, (%rdi,%r12)
    000003e7: 	addq	$0x20, 0x30(%r15)
.Ltmp408:
    000003ec: 	callq	clock@PLT # Offset: 1004
    000003f1: 	movl	iterations(%rip), %edi
    000003f7: 	xorl	%r12d, %r12d
    000003fa: 	movq	%rax, start_time(%rip)
    00000401: 	testl	%edi, %edi
    00000403: 	je	.Ltmp336 # Offset: 1027
.Ltmp337:
    00000405: 	movl	$0x270f, %edx
    0000040a: 	movl	$0xffffd8f1, %esi
    0000040f: 	movq	%rbx, %rdi
    00000412: 	addl	$0x1, %r12d
    00000416: 	callq	"_ZNSt24uniform_int_distributionIiEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEiRT_RKNS0_10param_typeE.isra.0/1" # Offset: 1046
    0000041b: 	addl	%eax, (%rbp)
    0000041e: 	cmpl	%r12d, iterations(%rip)
    00000425: 	jne	.Ltmp337 # Offset: 1061
.Ltmp336:
    00000427: 	movq	0x30(%r15), %rax
    0000042b: 	movq	0x48(%r15), %rdx
    0000042f: 	cmpq	0x38(%r15), %rax
    00000433: 	je	.Ltmp338 # Offset: 1075
.Ltmp405:
    00000439: 	movq	-0x20(%rax), %rbp
    0000043d: 	callq	clock@PLT # Offset: 1085
    00000442: 	pxor	%xmm0, %xmm0
    00000446: 	movq	%rax, end_time(%rip)
    0000044d: 	movq	%rbp, %rdi
    00000450: 	subq	start_time(%rip), %rax
    00000457: 	cvtsi2sd	%rax, %xmm0
    0000045c: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000464: 	callq	_Z13record_resultdPKc # Offset: 1124
    00000469: 	leaq	0xc0(%rsp), %r12
    00000471: 	movq	0x8(%rsp), %rsi
    00000476: 	leaq	0xd0(%rsp), %rax
    0000047e: 	xorl	%edx, %edx
    00000480: 	movq	%r12, %rdi
    00000483: 	movq	%rax, 0x10(%rsp)
    00000488: 	movq	%rax, 0xc0(%rsp)
    00000490: 	movq	$0x1a, 0x48(%rsp)
    00000499: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1177
    0000049e: 	movq	0x48(%rsp), %rdx
    000004a3: 	movdqa	DATAat0xd370(%rip), %xmm0
    000004ab: 	movabsq	$0x6f69747562697274, %rdi
    000004b5: 	movl	$0x206e, %esi
    000004ba: 	movq	%rax, 0xc0(%rsp)
    000004c2: 	movq	%rdx, 0xd0(%rsp)
    000004ca: 	movw	%si, 0x18(%rax)
    000004ce: 	movups	%xmm0, (%rax)
    000004d1: 	movq	0xc0(%rsp), %rdx
    000004d9: 	movq	%rdi, 0x10(%rax)
    000004dd: 	movq	0x48(%rsp), %rax
    000004e2: 	movq	(%rsp), %rdi
    000004e6: 	movq	%rax, 0xc8(%rsp)
    000004ee: 	movb	$0x0, (%rdx,%rax)
    000004f2: 	callq	strlen@PLT # Offset: 1266
    000004f7: 	movq	%rax, %rdx
    000004fa: 	movabsq	$0x3fffffffffffffff, %rax
    00000504: 	subq	0xc8(%rsp), %rax
    0000050c: 	cmpq	%rax, %rdx
    0000050f: 	ja	.Ltmp339 # Offset: 1295
    00000515: 	movq	(%rsp), %rsi
    00000519: 	movq	%r12, %rdi
    0000051c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1308
    00000521: 	movq	0x40(%r15), %rax
    00000525: 	movq	0x30(%r15), %rbp
    00000529: 	subq	$0x20, %rax
    0000052d: 	cmpq	%rax, %rbp
    00000530: 	je	.Ltmp340 # Offset: 1328
    00000536: 	leaq	0x10(%rbp), %rdi
    0000053a: 	movq	0xc8(%rsp), %r12
    00000542: 	movq	%rdi, (%rbp)
    00000546: 	movq	0xc0(%rsp), %r13
    0000054e: 	movq	%r13, %rax
    00000551: 	addq	%r12, %rax
    00000554: 	je	.Ltmp341 # Offset: 1364
    00000556: 	testq	%r13, %r13
    00000559: 	je	.Ltmp342 # Offset: 1369
.Ltmp341:
    0000055f: 	movq	%r12, 0x48(%rsp)
    00000564: 	cmpq	$0xf, %r12
    00000568: 	ja	.Ltmp343 # Offset: 1384
    0000056e: 	cmpq	$0x1, %r12
    00000572: 	jne	.Ltmp344 # Offset: 1394
    00000578: 	movzbl	(%r13), %eax
    0000057d: 	movb	%al, 0x10(%rbp)
.Ltmp415:
    00000580: 	movq	%r12, 0x8(%rbp)
    00000584: 	movb	$0x0, (%rdi,%r12)
    00000589: 	addq	$0x20, 0x30(%r15)
.Ltmp404:
    0000058e: 	callq	clock@PLT # Offset: 1422
    00000593: 	movl	iterations(%rip), %r8d
    0000059a: 	movq	%rax, start_time(%rip)
    000005a1: 	testl	%r8d, %r8d
    000005a4: 	je	.Ltmp345 # Offset: 1444
    000005aa: 	movq	0x808(%rbx), %rsi
    000005b1: 	movq	(%rbx), %rax
    000005b4: 	xorl	%edi, %edi
    000005b6: 	pxor	%xmm7, %xmm7
    000005ba: 	movsd	(%r14), %xmm4
    000005bf: 	movsd	DATAat0xd2c0(%rip), %xmm2
    000005c7: 	movabsq	$-0x8000000000000000, %r10
    000005d1: 	movabsq	$0x200000005, %r9
    000005db: 	movsd	DATAat0xd2c8(%rip), %xmm3
    000005e3: 	movsd	DATAat0xd2d0(%rip), %xmm1
    000005eb: 	leaq	-0x1(%rsi), %rdx
    000005ef: 	movss	DATAat0xd338(%rip), %xmm6
    000005f7: 	movss	DATAat0xd35c(%rip), %xmm5
    000005ff: 	movss	DATAat0xd33c(%rip), %xmm9
    00000608: 	movss	DATAat0xd340(%rip), %xmm8
    00000611: 	jmp	.Ltmp346 # Offset: 1553
.Ltmp351:
    00000616: 	cvttsd2si	%xmm0, %rcx
.Ltmp352:
    0000061b: 	imulq	$0x41a7, %rax, %r11
    00000622: 	movq	0x8(%rbx,%rcx,8), %rsi
    00000627: 	movq	%r11, %rax
    0000062a: 	mulq	%r9
    0000062d: 	movq	%r11, %rax
    00000630: 	subq	%rdx, %rax
    00000633: 	shrq	%rax
    00000636: 	addq	%rdx, %rax
    00000639: 	shrq	$0x1e, %rax
    0000063d: 	movq	%rax, %rdx
    00000640: 	shlq	$0x1f, %rdx
    00000644: 	subq	%rax, %rdx
    00000647: 	movq	%r11, %rax
    0000064a: 	subq	%rdx, %rax
    0000064d: 	movq	%rsi, %rdx
    00000650: 	movq	%rax, 0x8(%rbx,%rcx,8)
    00000655: 	subq	$0x1, %rdx
    00000659: 	js	.Ltmp347 # Offset: 1625
    0000065f: 	pxor	%xmm0, %xmm0
    00000663: 	cvtsi2ss	%rdx, %xmm0
    00000668: 	addss	%xmm7, %xmm0
    0000066c: 	mulss	%xmm6, %xmm0
    00000670: 	comiss	%xmm5, %xmm0
    00000673: 	jae	.Ltmp348 # Offset: 1651
.Ltmp354:
    00000679: 	mulss	%xmm9, %xmm0
    0000067e: 	addl	$0x1, %edi
    00000681: 	subss	%xmm8, %xmm0
    00000686: 	cvtss2sd	%xmm0, %xmm0
    0000068a: 	addsd	%xmm0, %xmm4
    0000068e: 	cmpl	%edi, %r8d
    00000691: 	je	.Ltmp349 # Offset: 1681
.Ltmp346:
    00000697: 	testq	%rdx, %rdx
    0000069a: 	js	.Ltmp350 # Offset: 1690
    0000069c: 	pxor	%xmm0, %xmm0
    000006a0: 	cvtsi2sd	%rdx, %xmm0
.Ltmp353:
    000006a5: 	divsd	%xmm2, %xmm0
    000006a9: 	mulsd	%xmm3, %xmm0
    000006ad: 	comisd	%xmm1, %xmm0
    000006b1: 	jb	.Ltmp351 # Offset: 1713
    000006b7: 	subsd	%xmm1, %xmm0
    000006bb: 	cvttsd2si	%xmm0, %rcx
    000006c0: 	xorq	%r10, %rcx
    000006c3: 	jmp	.Ltmp352 # Offset: 1731
.Ltmp350:
    000006c8: 	movq	%rdx, %rcx
    000006cb: 	andl	$0x1, %edx
    000006ce: 	pxor	%xmm0, %xmm0
    000006d2: 	shrq	%rcx
    000006d5: 	orq	%rdx, %rcx
    000006d8: 	cvtsi2sd	%rcx, %xmm0
    000006dd: 	addsd	%xmm0, %xmm0
    000006e1: 	jmp	.Ltmp353 # Offset: 1761
.Ltmp347:
    000006e3: 	movq	%rdx, %rcx
    000006e6: 	movq	%rdx, %r11
    000006e9: 	pxor	%xmm0, %xmm0
    000006ed: 	shrq	%rcx
    000006f0: 	andl	$0x1, %r11d
    000006f4: 	orq	%r11, %rcx
    000006f7: 	cvtsi2ss	%rcx, %xmm0
    000006fc: 	addss	%xmm0, %xmm0
    00000700: 	addss	%xmm7, %xmm0
    00000704: 	mulss	%xmm6, %xmm0
    00000708: 	comiss	%xmm5, %xmm0
    0000070b: 	jb	.Ltmp354 # Offset: 1803
.Ltmp348:
    00000711: 	addl	$0x1, %edi
    00000714: 	addsd	DATAat0xd300(%rip), %xmm4
    0000071c: 	cmpl	%r8d, %edi
    0000071f: 	jne	.Ltmp346 # Offset: 1823
.Ltmp349:
    00000725: 	movq	%rsi, 0x808(%rbx)
    0000072c: 	movq	%rax, (%rbx)
    0000072f: 	movsd	%xmm4, (%r14)
.Ltmp345:
    00000734: 	movq	0x30(%r15), %rax
    00000738: 	movq	0x48(%r15), %rdx
    0000073c: 	cmpq	0x38(%r15), %rax
    00000740: 	je	.Ltmp355 # Offset: 1856
.Ltmp398:
    00000746: 	movq	-0x20(%rax), %rbp
    0000074a: 	callq	clock@PLT # Offset: 1866
    0000074f: 	pxor	%xmm0, %xmm0
    00000753: 	movq	%rax, end_time(%rip)
    0000075a: 	movq	%rbp, %rdi
    0000075d: 	subq	start_time(%rip), %rax
    00000764: 	cvtsi2sd	%rax, %xmm0
    00000769: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000771: 	callq	_Z13record_resultdPKc # Offset: 1905
    00000776: 	leaq	0xe0(%rsp), %r12
    0000077e: 	movq	0x8(%rsp), %rsi
    00000783: 	leaq	0xf0(%rsp), %rax
    0000078b: 	xorl	%edx, %edx
    0000078d: 	movq	%r12, %rdi
    00000790: 	movq	%rax, 0x28(%rsp)
    00000795: 	movq	%rax, 0xe0(%rsp)
    0000079d: 	movq	$0x1f, 0x48(%rsp)
    000007a6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1958
    000007ab: 	movq	0x48(%rsp), %rdx
    000007b0: 	movl	$0x3e30, %ecx
    000007b5: 	movb	$0x20, 0x1e(%rax)
    000007b9: 	movabsq	$0x6c62756f643c6c61, %rdi
    000007c3: 	movdqa	DATAat0xd380(%rip), %xmm0
    000007cb: 	movq	%rax, 0xe0(%rsp)
    000007d3: 	movq	%rdx, 0xf0(%rsp)
    000007db: 	movl	$0x32202c65, 0x18(%rax)
    000007e2: 	movups	%xmm0, (%rax)
    000007e5: 	movq	0xe0(%rsp), %rdx
    000007ed: 	movq	%rdi, 0x10(%rax)
    000007f1: 	movq	(%rsp), %rdi
    000007f5: 	movw	%cx, 0x1c(%rax)
    000007f9: 	movq	0x48(%rsp), %rax
    000007fe: 	movq	%rax, 0xe8(%rsp)
    00000806: 	movb	$0x0, (%rdx,%rax)
    0000080a: 	callq	strlen@PLT # Offset: 2058
    0000080f: 	movq	%rax, %rdx
    00000812: 	movabsq	$0x3fffffffffffffff, %rax
    0000081c: 	subq	0xe8(%rsp), %rax
    00000824: 	cmpq	%rax, %rdx
    00000827: 	ja	.Ltmp356 # Offset: 2087
    0000082d: 	movq	(%rsp), %rsi
    00000831: 	movq	%r12, %rdi
    00000834: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2100
    00000839: 	movq	0x40(%r15), %rax
    0000083d: 	movq	0x30(%r15), %rbp
    00000841: 	subq	$0x20, %rax
    00000845: 	cmpq	%rax, %rbp
    00000848: 	je	.Ltmp357 # Offset: 2120
    0000084e: 	leaq	0x10(%rbp), %rdi
    00000852: 	movq	0xe8(%rsp), %r12
    0000085a: 	movq	%rdi, (%rbp)
    0000085e: 	movq	0xe0(%rsp), %r13
    00000866: 	movq	%r13, %rax
    00000869: 	addq	%r12, %rax
    0000086c: 	je	.Ltmp358 # Offset: 2156
    0000086e: 	testq	%r13, %r13
    00000871: 	je	.Ltmp359 # Offset: 2161
.Ltmp358:
    00000877: 	movq	%r12, 0x48(%rsp)
    0000087c: 	cmpq	$0xf, %r12
    00000880: 	ja	.Ltmp360 # Offset: 2176
    00000886: 	cmpq	$0x1, %r12
    0000088a: 	jne	.Ltmp361 # Offset: 2186
    00000890: 	movzbl	(%r13), %eax
    00000895: 	movb	%al, 0x10(%rbp)
.Ltmp419:
    00000898: 	movq	%r12, 0x8(%rbp)
    0000089c: 	movb	$0x0, (%rdi,%r12)
    000008a1: 	addq	$0x20, 0x30(%r15)
.Ltmp403:
    000008a6: 	callq	clock@PLT # Offset: 2214
    000008ab: 	movl	iterations(%rip), %r9d
    000008b2: 	movq	%rax, start_time(%rip)
    000008b9: 	testl	%r9d, %r9d
    000008bc: 	je	.Ltmp362 # Offset: 2236
    000008c2: 	movq	(%rbx), %rax
    000008c5: 	movsd	(%r14), %xmm4
    000008ca: 	xorl	%r8d, %r8d
    000008cd: 	pxor	%xmm6, %xmm6
    000008d1: 	movq	0x808(%rbx), %rdi
    000008d8: 	movsd	DATAat0xd2c0(%rip), %xmm2
    000008e0: 	movabsq	$-0x8000000000000000, %r11
    000008ea: 	movabsq	$0x200000005, %r10
    000008f4: 	movsd	DATAat0xd2c8(%rip), %xmm3
    000008fc: 	movsd	DATAat0xd2d0(%rip), %xmm1
    00000904: 	movsd	DATAat0xd2e8(%rip), %xmm5
    0000090c: 	leaq	-0x1(%rdi), %rdx
    00000910: 	jmp	.Ltmp363 # Offset: 2320
.Ltmp368:
    00000912: 	cvttsd2si	%xmm0, %rcx
.Ltmp369:
    00000917: 	imulq	$0x41a7, %rax, %rsi
    0000091e: 	movq	0x8(%rbx,%rcx,8), %rdi
    00000923: 	movq	%rsi, %rax
    00000926: 	mulq	%r10
    00000929: 	movq	%rsi, %rax
    0000092c: 	subq	%rdx, %rax
    0000092f: 	shrq	%rax
    00000932: 	addq	%rdx, %rax
    00000935: 	shrq	$0x1e, %rax
    00000939: 	movq	%rax, %rdx
    0000093c: 	shlq	$0x1f, %rdx
    00000940: 	subq	%rax, %rdx
    00000943: 	movq	%rsi, %rax
    00000946: 	subq	%rdx, %rax
    00000949: 	movq	%rdi, %rdx
    0000094c: 	movq	%rax, 0x8(%rbx,%rcx,8)
    00000951: 	subq	$0x1, %rdx
    00000955: 	js	.Ltmp364 # Offset: 2389
    00000957: 	pxor	%xmm0, %xmm0
    0000095b: 	cvtsi2sd	%rdx, %xmm0
    00000960: 	addsd	%xmm6, %xmm0
    00000964: 	divsd	%xmm2, %xmm0
    00000968: 	comisd	%xmm5, %xmm0
    0000096c: 	jae	.Ltmp365 # Offset: 2412
.Ltmp371:
    00000972: 	addl	$0x1, %r8d
    00000976: 	addsd	%xmm0, %xmm4
    0000097a: 	cmpl	%r8d, %r9d
    0000097d: 	je	.Ltmp366 # Offset: 2429
.Ltmp363:
    00000983: 	testq	%rdx, %rdx
    00000986: 	js	.Ltmp367 # Offset: 2438
    00000988: 	pxor	%xmm0, %xmm0
    0000098c: 	cvtsi2sd	%rdx, %xmm0
.Ltmp370:
    00000991: 	divsd	%xmm2, %xmm0
    00000995: 	mulsd	%xmm3, %xmm0
    00000999: 	comisd	%xmm1, %xmm0
    0000099d: 	jb	.Ltmp368 # Offset: 2461
    000009a3: 	subsd	%xmm1, %xmm0
    000009a7: 	cvttsd2si	%xmm0, %rcx
    000009ac: 	xorq	%r11, %rcx
    000009af: 	jmp	.Ltmp369 # Offset: 2479
.Ltmp367:
    000009b4: 	movq	%rdx, %rcx
    000009b7: 	andl	$0x1, %edx
    000009ba: 	pxor	%xmm0, %xmm0
    000009be: 	shrq	%rcx
    000009c1: 	orq	%rdx, %rcx
    000009c4: 	cvtsi2sd	%rcx, %xmm0
    000009c9: 	addsd	%xmm0, %xmm0
    000009cd: 	jmp	.Ltmp370 # Offset: 2509
.Ltmp364:
    000009cf: 	movq	%rdx, %rcx
    000009d2: 	movq	%rdx, %rsi
    000009d5: 	pxor	%xmm0, %xmm0
    000009d9: 	shrq	%rcx
    000009dc: 	andl	$0x1, %esi
    000009df: 	orq	%rsi, %rcx
    000009e2: 	cvtsi2sd	%rcx, %xmm0
    000009e7: 	addsd	%xmm0, %xmm0
    000009eb: 	addsd	%xmm6, %xmm0
    000009ef: 	divsd	%xmm2, %xmm0
    000009f3: 	comisd	%xmm5, %xmm0
    000009f7: 	jb	.Ltmp371 # Offset: 2551
.Ltmp365:
    000009fd: 	addl	$0x1, %r8d
    00000a01: 	addsd	DATAat0xd308(%rip), %xmm4
    00000a09: 	cmpl	%r8d, %r9d
    00000a0c: 	jne	.Ltmp363 # Offset: 2572
.Ltmp366:
    00000a12: 	movq	%rdi, 0x808(%rbx)
    00000a19: 	movq	%rax, (%rbx)
    00000a1c: 	movsd	%xmm4, (%r14)
.Ltmp362:
    00000a21: 	movq	0x30(%r15), %rax
    00000a25: 	movq	0x48(%r15), %rdx
    00000a29: 	cmpq	0x38(%r15), %rax
    00000a2d: 	je	.Ltmp372 # Offset: 2605
.Ltmp400:
    00000a33: 	movq	-0x20(%rax), %rbp
    00000a37: 	callq	clock@PLT # Offset: 2615
    00000a3c: 	pxor	%xmm0, %xmm0
    00000a40: 	movq	%rax, end_time(%rip)
    00000a47: 	movq	%rbp, %rdi
    00000a4a: 	subq	start_time(%rip), %rax
    00000a51: 	cvtsi2sd	%rax, %xmm0
    00000a56: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000a5e: 	callq	_Z13record_resultdPKc # Offset: 2654
    00000a63: 	leaq	0x100(%rsp), %r12
    00000a6b: 	movq	0x8(%rsp), %rsi
    00000a70: 	leaq	0x110(%rsp), %rax
    00000a78: 	xorl	%edx, %edx
    00000a7a: 	movq	%r12, %rdi
    00000a7d: 	movq	%rax, 0x30(%rsp)
    00000a82: 	movq	%rax, 0x100(%rsp)
    00000a8a: 	movq	$0x14, 0x48(%rsp)
    00000a93: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2707
    00000a98: 	movq	0x48(%rsp), %rdx
    00000a9d: 	movq	(%rsp), %rdi
    00000aa1: 	movq	%rax, 0x100(%rsp)
    00000aa9: 	movdqa	DATAat0xd390(%rip), %xmm0
    00000ab1: 	movq	%rdx, 0x110(%rsp)
    00000ab9: 	movups	%xmm0, (%rax)
    00000abc: 	movq	0x100(%rsp), %rdx
    00000ac4: 	movl	$0x206e6f69, 0x10(%rax)
    00000acb: 	movq	0x48(%rsp), %rax
    00000ad0: 	movq	%rax, 0x108(%rsp)
    00000ad8: 	movb	$0x0, (%rdx,%rax)
    00000adc: 	callq	strlen@PLT # Offset: 2780
    00000ae1: 	movq	%rax, %rdx
    00000ae4: 	movabsq	$0x3fffffffffffffff, %rax
    00000aee: 	subq	0x108(%rsp), %rax
    00000af6: 	cmpq	%rax, %rdx
    00000af9: 	ja	.Ltmp373 # Offset: 2809
    00000aff: 	movq	(%rsp), %rsi
    00000b03: 	movq	%r12, %rdi
    00000b06: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2822
    00000b0b: 	movq	0x40(%r15), %rax
    00000b0f: 	movq	0x30(%r15), %rbp
    00000b13: 	subq	$0x20, %rax
    00000b17: 	cmpq	%rax, %rbp
    00000b1a: 	je	.Ltmp374 # Offset: 2842
    00000b20: 	leaq	0x10(%rbp), %rdi
    00000b24: 	movq	0x108(%rsp), %r12
    00000b2c: 	movq	%rdi, (%rbp)
    00000b30: 	movq	0x100(%rsp), %r13
    00000b38: 	movq	%r13, %rax
    00000b3b: 	addq	%r12, %rax
    00000b3e: 	je	.Ltmp375 # Offset: 2878
    00000b40: 	testq	%r13, %r13
    00000b43: 	je	.Ltmp376 # Offset: 2883
.Ltmp375:
    00000b49: 	movq	%r12, 0x48(%rsp)
    00000b4e: 	cmpq	$0xf, %r12
    00000b52: 	ja	.Ltmp377 # Offset: 2898
    00000b58: 	cmpq	$0x1, %r12
    00000b5c: 	jne	.Ltmp378 # Offset: 2908
    00000b62: 	movzbl	(%r13), %eax
    00000b67: 	movb	%al, 0x10(%rbp)
.Ltmp413:
    00000b6a: 	movq	%r12, 0x8(%rbp)
    00000b6e: 	movb	$0x0, (%rdi,%r12)
    00000b73: 	addq	$0x20, 0x30(%r15)
.Ltmp401:
    00000b78: 	callq	clock@PLT # Offset: 2936
    00000b7d: 	movl	iterations(%rip), %ebp
    00000b83: 	xorl	%r12d, %r12d
    00000b86: 	leaq	0x50(%rsp), %r13
    00000b8b: 	movq	%rax, start_time(%rip)
    00000b92: 	testl	%ebp, %ebp
    00000b94: 	je	.Ltmp379 # Offset: 2964
.Ltmp380:
    00000b96: 	movq	%r13, %rdx
    00000b99: 	movq	%rbx, %rsi
    00000b9c: 	movq	%r13, %rdi
    00000b9f: 	addl	$0x1, %r12d
    00000ba3: 	callq	_ZNSt19normal_distributionIfEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEfRT_RKNS0_10param_typeE # Offset: 2979
    00000ba8: 	cvtss2sd	%xmm0, %xmm0
    00000bac: 	addsd	(%r14), %xmm0
    00000bb1: 	movsd	%xmm0, (%r14)
    00000bb6: 	cmpl	%ebp, %r12d
    00000bb9: 	jne	.Ltmp380 # Offset: 3001
.Ltmp379:
    00000bbb: 	movq	0x30(%r15), %rax
    00000bbf: 	movq	0x48(%r15), %rdx
    00000bc3: 	cmpq	0x38(%r15), %rax
    00000bc7: 	je	.Ltmp381 # Offset: 3015
.Ltmp407:
    00000bcd: 	movq	-0x20(%rax), %rbp
    00000bd1: 	callq	clock@PLT # Offset: 3025
    00000bd6: 	pxor	%xmm0, %xmm0
    00000bda: 	movq	%rax, end_time(%rip)
    00000be1: 	movq	%rbp, %rdi
    00000be4: 	subq	start_time(%rip), %rax
    00000beb: 	cvtsi2sd	%rax, %xmm0
    00000bf0: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000bf8: 	callq	_Z13record_resultdPKc # Offset: 3064
    00000bfd: 	leaq	0x120(%rsp), %r12
    00000c05: 	movq	0x8(%rsp), %rsi
    00000c0a: 	leaq	0x130(%rsp), %rax
    00000c12: 	xorl	%edx, %edx
    00000c14: 	movq	%r12, %rdi
    00000c17: 	movq	%rax, 0x38(%rsp)
    00000c1c: 	movq	%rax, 0x120(%rsp)
    00000c24: 	movq	$0x17, 0x48(%rsp)
    00000c2d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3117
    00000c32: 	movq	0x48(%rsp), %rdx
    00000c37: 	movq	(%rsp), %rdi
    00000c3b: 	movq	%rax, 0x120(%rsp)
    00000c43: 	movdqa	DATAat0xd3a0(%rip), %xmm0
    00000c4b: 	movq	%rdx, 0x130(%rsp)
    00000c53: 	movl	$0x6e6f, %edx
    00000c58: 	movups	%xmm0, (%rax)
    00000c5b: 	movw	%dx, 0x14(%rax)
    00000c5f: 	movq	0x120(%rsp), %rdx
    00000c67: 	movl	$0x69747562, 0x10(%rax)
    00000c6e: 	movb	$0x20, 0x16(%rax)
    00000c72: 	movq	0x48(%rsp), %rax
    00000c77: 	movq	%rax, 0x128(%rsp)
    00000c7f: 	movb	$0x0, (%rdx,%rax)
    00000c83: 	callq	strlen@PLT # Offset: 3203
    00000c88: 	movq	%rax, %rdx
    00000c8b: 	movabsq	$0x3fffffffffffffff, %rax
    00000c95: 	subq	0x128(%rsp), %rax
    00000c9d: 	cmpq	%rax, %rdx
    00000ca0: 	ja	.Ltmp382 # Offset: 3232
    00000ca6: 	movq	(%rsp), %rsi
    00000caa: 	movq	%r12, %rdi
    00000cad: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3245
    00000cb2: 	movq	0x40(%r15), %rax
    00000cb6: 	movq	0x30(%r15), %rbp
    00000cba: 	subq	$0x20, %rax
    00000cbe: 	cmpq	%rax, %rbp
    00000cc1: 	je	.Ltmp383 # Offset: 3265
    00000cc7: 	leaq	0x10(%rbp), %rdi
    00000ccb: 	movq	0x128(%rsp), %r12
    00000cd3: 	movq	%rdi, (%rbp)
    00000cd7: 	movq	0x120(%rsp), %r13
    00000cdf: 	movq	%r13, %rax
    00000ce2: 	addq	%r12, %rax
    00000ce5: 	je	.Ltmp384 # Offset: 3301
    00000ce7: 	testq	%r13, %r13
    00000cea: 	je	.Ltmp385 # Offset: 3306
.Ltmp384:
    00000cf0: 	movq	%r12, 0x48(%rsp)
    00000cf5: 	cmpq	$0xf, %r12
    00000cf9: 	ja	.Ltmp386 # Offset: 3321
    00000cff: 	cmpq	$0x1, %r12
    00000d03: 	jne	.Ltmp387 # Offset: 3331
    00000d09: 	movzbl	(%r13), %eax
    00000d0e: 	movb	%al, 0x10(%rbp)
.Ltmp412:
    00000d11: 	movq	%r12, 0x8(%rbp)
    00000d15: 	movb	$0x0, (%rdi,%r12)
    00000d1a: 	addq	$0x20, 0x30(%r15)
.Ltmp406:
    00000d1f: 	callq	clock@PLT # Offset: 3359
    00000d24: 	movl	iterations(%rip), %ebp
    00000d2a: 	movq	%rax, start_time(%rip)
    00000d31: 	testl	%ebp, %ebp
    00000d33: 	je	.Ltmp388 # Offset: 3379
    00000d35: 	movss	0x60(%rsp), %xmm5
    00000d3b: 	movss	0x64(%rsp), %xmm6
    00000d41: 	xorl	%r12d, %r12d
    00000d44: 	leaq	0x68(%rsp), %r13
    00000d49: 	movss	%xmm5, (%rsp)
    00000d4e: 	movss	%xmm6, 0x8(%rsp)
.Ltmp389:
    00000d54: 	movq	%r13, %rdx
    00000d57: 	movq	%rbx, %rsi
    00000d5a: 	movq	%r13, %rdi
    00000d5d: 	addl	$0x1, %r12d
    00000d61: 	callq	_ZNSt19normal_distributionIfEclISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEEfRT_RKNS0_10param_typeE # Offset: 3425
    00000d66: 	mulss	0x8(%rsp), %xmm0
    00000d6c: 	addss	(%rsp), %xmm0
    00000d71: 	callq	expf@PLT # Offset: 3441
    00000d76: 	cvtss2sd	%xmm0, %xmm0
    00000d7a: 	addsd	(%r14), %xmm0
    00000d7f: 	movsd	%xmm0, (%r14)
    00000d84: 	cmpl	%ebp, %r12d
    00000d87: 	jne	.Ltmp389 # Offset: 3463
.Ltmp388:
    00000d89: 	movq	0x30(%r15), %rax
    00000d8d: 	movq	0x48(%r15), %rdx
    00000d91: 	cmpq	0x38(%r15), %rax
    00000d95: 	je	.Ltmp390 # Offset: 3477
.Ltmp402:
    00000d9b: 	movq	-0x20(%rax), %rbp
    00000d9f: 	callq	clock@PLT # Offset: 3487
    00000da4: 	pxor	%xmm0, %xmm0
    00000da8: 	movq	%rax, end_time(%rip)
    00000daf: 	movq	%rbp, %rdi
    00000db2: 	subq	start_time(%rip), %rax
    00000db9: 	cvtsi2sd	%rax, %xmm0
    00000dbe: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000dc6: 	callq	_Z13record_resultdPKc # Offset: 3526
    00000dcb: 	movq	0x120(%rsp), %rdi
    00000dd3: 	cmpq	0x38(%rsp), %rdi
    00000dd8: 	je	.Ltmp391 # Offset: 3544
    00000dda: 	movq	0x130(%rsp), %rax
    00000de2: 	leaq	0x1(%rax), %rsi
    00000de6: 	callq	_ZdlPvm@PLT # Offset: 3558
.Ltmp391:
    00000deb: 	movq	0x100(%rsp), %rdi
    00000df3: 	cmpq	0x30(%rsp), %rdi
    00000df8: 	je	.Ltmp392 # Offset: 3576
    00000dfa: 	movq	0x110(%rsp), %rax
    00000e02: 	leaq	0x1(%rax), %rsi
    00000e06: 	callq	_ZdlPvm@PLT # Offset: 3590
.Ltmp392:
    00000e0b: 	movq	0xe0(%rsp), %rdi
    00000e13: 	cmpq	0x28(%rsp), %rdi
    00000e18: 	je	.Ltmp393 # Offset: 3608
    00000e1a: 	movq	0xf0(%rsp), %rax
    00000e22: 	leaq	0x1(%rax), %rsi
    00000e26: 	callq	_ZdlPvm@PLT # Offset: 3622
.Ltmp393:
    00000e2b: 	movq	0xc0(%rsp), %rdi
    00000e33: 	cmpq	0x10(%rsp), %rdi
    00000e38: 	je	.Ltmp394 # Offset: 3640
    00000e3a: 	movq	0xd0(%rsp), %rax
    00000e42: 	leaq	0x1(%rax), %rsi
    00000e46: 	callq	_ZdlPvm@PLT # Offset: 3654
.Ltmp394:
    00000e4b: 	movq	0xa0(%rsp), %rdi
    00000e53: 	cmpq	0x20(%rsp), %rdi
    00000e58: 	je	.Ltmp395 # Offset: 3672
    00000e5a: 	movq	0xb0(%rsp), %rax
    00000e62: 	leaq	0x1(%rax), %rsi
    00000e66: 	callq	_ZdlPvm@PLT # Offset: 3686
.Ltmp395:
    00000e6b: 	movq	0x80(%rsp), %rdi
    00000e73: 	cmpq	0x18(%rsp), %rdi
    00000e78: 	je	.Ltmp396 # Offset: 3704
    00000e7a: 	movq	0x90(%rsp), %rax
    00000e82: 	leaq	0x1(%rax), %rsi
    00000e86: 	callq	_ZdlPvm@PLT # Offset: 3718
.Ltmp396:
    00000e8b: 	movq	0x148(%rsp), %rax
    00000e93: 	subq	%fs:0x28, %rax
    00000e9c: 	jne	.Ltmp397 # Offset: 3740
    00000ea2: 	addq	$0x158, %rsp
    00000ea9: 	popq	%rbx
    00000eaa: 	popq	%rbp
    00000eab: 	popq	%r12
    00000ead: 	popq	%r13
    00000eaf: 	popq	%r14
    00000eb1: 	popq	%r15
    00000eb3: 	retq # Offset: 3763
.Ltmp355:
    00000eb4: 	movq	-0x8(%rdx), %rax
    00000eb8: 	addq	$0x200, %rax
    00000ebe: 	jmp	.Ltmp398 # Offset: 3774
.Ltmp319:
    00000ec3: 	movq	%r12, %rsi
    00000ec6: 	movq	%r15, %rdi
    00000ec9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3785
    00000ece: 	jmp	.Ltmp399 # Offset: 3790
.Ltmp372:
    00000ed3: 	movq	-0x8(%rdx), %rax
    00000ed7: 	addq	$0x200, %rax
    00000edd: 	jmp	.Ltmp400 # Offset: 3805
.Ltmp374:
    00000ee2: 	movq	%r12, %rsi
    00000ee5: 	movq	%r15, %rdi
    00000ee8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3816
    00000eed: 	jmp	.Ltmp401 # Offset: 3821
.Ltmp390:
    00000ef2: 	movq	-0x8(%rdx), %rax
    00000ef6: 	addq	$0x200, %rax
    00000efc: 	jmp	.Ltmp402 # Offset: 3836
.Ltmp357:
    00000f01: 	movq	%r12, %rsi
    00000f04: 	movq	%r15, %rdi
    00000f07: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3847
    00000f0c: 	jmp	.Ltmp403 # Offset: 3852
.Ltmp340:
    00000f11: 	movq	%r12, %rsi
    00000f14: 	movq	%r15, %rdi
    00000f17: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3863
    00000f1c: 	jmp	.Ltmp404 # Offset: 3868
.Ltmp338:
    00000f21: 	movq	-0x8(%rdx), %rax
    00000f25: 	addq	$0x200, %rax
    00000f2b: 	jmp	.Ltmp405 # Offset: 3883
.Ltmp383:
    00000f30: 	movq	%r12, %rsi
    00000f33: 	movq	%r15, %rdi
    00000f36: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3894
    00000f3b: 	jmp	.Ltmp406 # Offset: 3899
.Ltmp381:
    00000f40: 	movq	-0x8(%rdx), %rax
    00000f44: 	addq	$0x200, %rax
    00000f4a: 	jmp	.Ltmp407 # Offset: 3914
.Ltmp331:
    00000f4f: 	movq	%r12, %rsi
    00000f52: 	movq	%r15, %rdi
    00000f55: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3925
    00000f5a: 	jmp	.Ltmp408 # Offset: 3930
.Ltmp329:
    00000f5f: 	movq	-0x8(%rdx), %rax
    00000f63: 	addq	$0x200, %rax
    00000f69: 	jmp	.Ltmp409 # Offset: 3945
.Ltmp323:
    00000f6e: 	testq	%r12, %r12
    00000f71: 	je	.Ltmp328 # Offset: 3953
    00000f77: 	jmp	.Ltmp410 # Offset: 3959
    00000f7c: 	nopl	(%rax) # Size: 4
.Ltmp335:
    00000f80: 	testq	%r12, %r12
    00000f83: 	je	.Ltmp411 # Offset: 3971
.Ltmp414:
    00000f89: 	movq	0x10(%rsp), %rsi
    00000f8e: 	movq	%r12, %rdx
    00000f91: 	callq	memcpy@PLT # Offset: 3985
    00000f96: 	movq	0x48(%rsp), %r12
    00000f9b: 	movq	(%r13), %rdi
    00000f9f: 	jmp	.Ltmp411 # Offset: 3999
.Ltmp386:
    00000fa4: 	movq	0x8(%rsp), %rsi
    00000fa9: 	xorl	%edx, %edx
    00000fab: 	movq	%rbp, %rdi
    00000fae: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4014
    00000fb3: 	movq	%rax, (%rbp)
    00000fb7: 	movq	%rax, %rdi
    00000fba: 	movq	0x48(%rsp), %rax
    00000fbf: 	movq	%rax, 0x10(%rbp)
.Ltmp418:
    00000fc3: 	movq	%r12, %rdx
    00000fc6: 	movq	%r13, %rsi
    00000fc9: 	callq	memcpy@PLT # Offset: 4041
    00000fce: 	movq	0x48(%rsp), %r12
    00000fd3: 	movq	(%rbp), %rdi
    00000fd7: 	jmp	.Ltmp412 # Offset: 4055
.Ltmp378:
    00000fdc: 	testq	%r12, %r12
    00000fdf: 	je	.Ltmp413 # Offset: 4063
.Ltmp417:
    00000fe5: 	movq	%r12, %rdx
    00000fe8: 	movq	%r13, %rsi
    00000feb: 	callq	memcpy@PLT # Offset: 4075
    00000ff0: 	movq	0x48(%rsp), %r12
    00000ff5: 	movq	(%rbp), %rdi
    00000ff9: 	jmp	.Ltmp413 # Offset: 4089
.Ltmp334:
    00000ffe: 	movq	0x8(%rsp), %rsi
    00001003: 	xorl	%edx, %edx
    00001005: 	movq	%r13, %rdi
    00001008: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4104
    0000100d: 	movq	%rax, (%r13)
    00001011: 	movq	%rax, %rdi
    00001014: 	movq	0x48(%rsp), %rax
    00001019: 	movq	%rax, 0x10(%r13)
    0000101d: 	jmp	.Ltmp414 # Offset: 4125
.Ltmp344:
    00001022: 	testq	%r12, %r12
    00001025: 	je	.Ltmp415 # Offset: 4133
    0000102b: 	jmp	.Ltmp416 # Offset: 4139
    0000102d: 	nopl	(%rax) # Size: 3
.Ltmp343:
    00001030: 	movq	0x8(%rsp), %rsi
    00001035: 	xorl	%edx, %edx
    00001037: 	movq	%rbp, %rdi
    0000103a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4154
    0000103f: 	movq	%rax, (%rbp)
    00001043: 	movq	%rax, %rdi
    00001046: 	movq	0x48(%rsp), %rax
    0000104b: 	movq	%rax, 0x10(%rbp)
.Ltmp416:
    0000104f: 	movq	%r12, %rdx
    00001052: 	movq	%r13, %rsi
    00001055: 	callq	memcpy@PLT # Offset: 4181
    0000105a: 	movq	0x48(%rsp), %r12
    0000105f: 	movq	(%rbp), %rdi
    00001063: 	jmp	.Ltmp415 # Offset: 4195
.Ltmp377:
    00001068: 	movq	0x8(%rsp), %rsi
    0000106d: 	xorl	%edx, %edx
    0000106f: 	movq	%rbp, %rdi
    00001072: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4210
    00001077: 	movq	%rax, (%rbp)
    0000107b: 	movq	%rax, %rdi
    0000107e: 	movq	0x48(%rsp), %rax
    00001083: 	movq	%rax, 0x10(%rbp)
    00001087: 	jmp	.Ltmp417 # Offset: 4231
.Ltmp387:
    0000108c: 	testq	%r12, %r12
    0000108f: 	je	.Ltmp412 # Offset: 4239
    00001095: 	jmp	.Ltmp418 # Offset: 4245
    0000109a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp361:
    000010a0: 	testq	%r12, %r12
    000010a3: 	je	.Ltmp419 # Offset: 4259
    000010a9: 	jmp	.Ltmp420 # Offset: 4265
    000010ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp360:
    000010b0: 	movq	0x8(%rsp), %rsi
    000010b5: 	xorl	%edx, %edx
    000010b7: 	movq	%rbp, %rdi
    000010ba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4282
    000010bf: 	movq	%rax, (%rbp)
    000010c3: 	movq	%rax, %rdi
    000010c6: 	movq	0x48(%rsp), %rax
    000010cb: 	movq	%rax, 0x10(%rbp)
.Ltmp420:
    000010cf: 	movq	%r12, %rdx
    000010d2: 	movq	%r13, %rsi
    000010d5: 	callq	memcpy@PLT # Offset: 4309
    000010da: 	movq	0x48(%rsp), %r12
    000010df: 	movq	(%rbp), %rdi
    000010e3: 	jmp	.Ltmp419 # Offset: 4323
.Ltmp321:
    000010e8: 	leaq	DATAat0xd280(%rip), %rdi
    000010ef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4335
.Ltmp330:
    000010f4: 	leaq	DATAat0xd2aa(%rip), %rdi
    000010fb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4347
.Ltmp333:
    00001100: 	leaq	DATAat0xd280(%rip), %rdi
    00001107: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4359
.Ltmp339:
    0000110c: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001113: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4371
.Ltmp342:
    00001118: 	leaq	DATAat0xd280(%rip), %rdi
    0000111f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4383
.Ltmp356:
    00001124: 	leaq	DATAat0xd2aa(%rip), %rdi
    0000112b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4395
.Ltmp359:
    00001130: 	leaq	DATAat0xd280(%rip), %rdi
    00001137: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4407
.Ltmp373:
    0000113c: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001143: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4419
.Ltmp376:
    00001148: 	leaq	DATAat0xd280(%rip), %rdi
    0000114f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4431
.Ltmp382:
    00001154: 	leaq	DATAat0xd2aa(%rip), %rdi
    0000115b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4443
.Ltmp385:
    00001160: 	leaq	DATAat0xd280(%rip), %rdi
    00001167: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4455
.Ltmp397:
    0000116c: 	callq	__stack_chk_fail@PLT # Offset: 4460
.Ltmp318:
    00001171: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001178: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4472
    0000117d: 	endbr64
    00001181: 	movq	%rax, %rbp
    00001184: 	jmp	.Ltmp421 # Offset: 4484
    00001186: 	endbr64
    0000118a: 	movq	%rax, %rbp
    0000118d: 	jmp	.Ltmp422 # Offset: 4493
.Ltmp427:
    0000118f: 	movq	0x120(%rsp), %rdi
    00001197: 	cmpq	0x38(%rsp), %rdi
    0000119c: 	je	.Ltmp422 # Offset: 4508
    0000119e: 	movq	0x130(%rsp), %rax
    000011a6: 	leaq	0x1(%rax), %rsi
    000011aa: 	callq	_ZdlPvm@PLT # Offset: 4522
.Ltmp422:
    000011af: 	movq	0x100(%rsp), %rdi
    000011b7: 	cmpq	0x30(%rsp), %rdi
    000011bc: 	je	.Ltmp421 # Offset: 4540
    000011be: 	movq	0x110(%rsp), %rax
    000011c6: 	leaq	0x1(%rax), %rsi
    000011ca: 	callq	_ZdlPvm@PLT # Offset: 4554
.Ltmp421:
    000011cf: 	movq	0xe0(%rsp), %rdi
    000011d7: 	cmpq	0x28(%rsp), %rdi
    000011dc: 	je	.Ltmp423 # Offset: 4572
    000011de: 	movq	0xf0(%rsp), %rax
    000011e6: 	leaq	0x1(%rax), %rsi
    000011ea: 	callq	_ZdlPvm@PLT # Offset: 4586
.Ltmp423:
    000011ef: 	movq	0xc0(%rsp), %rdi
    000011f7: 	cmpq	0x10(%rsp), %rdi
    000011fc: 	je	.Ltmp424 # Offset: 4604
    000011fe: 	movq	0xd0(%rsp), %rax
    00001206: 	leaq	0x1(%rax), %rsi
    0000120a: 	callq	_ZdlPvm@PLT # Offset: 4618
.Ltmp424:
    0000120f: 	movq	0xa0(%rsp), %rdi
    00001217: 	cmpq	0x20(%rsp), %rdi
    0000121c: 	je	.Ltmp425 # Offset: 4636
    0000121e: 	movq	0xb0(%rsp), %rax
    00001226: 	leaq	0x1(%rax), %rsi
    0000122a: 	callq	_ZdlPvm@PLT # Offset: 4650
.Ltmp425:
    0000122f: 	movq	0x80(%rsp), %rdi
    00001237: 	cmpq	0x18(%rsp), %rdi
    0000123c: 	je	.Ltmp426 # Offset: 4668
    0000123e: 	movq	0x90(%rsp), %rax
    00001246: 	leaq	0x1(%rax), %rsi
    0000124a: 	callq	_ZdlPvm@PLT # Offset: 4682
.Ltmp426:
    0000124f: 	movq	%rbp, %rdi
    00001252: 	callq	_Unwind_Resume@PLT # Offset: 4690
    00001257: 	endbr64
    0000125b: 	movq	%rax, %rbp
    0000125e: 	jmp	.Ltmp427 # Offset: 4702
    00001263: 	endbr64
    00001267: 	movq	%rax, %rbp
    0000126a: 	jmp	.Ltmp425 # Offset: 4714
    0000126c: 	endbr64
    00001270: 	movq	%rax, %rbp
    00001273: 	jmp	.Ltmp424 # Offset: 4723
    00001275: 	endbr64
    00001279: 	movq	%rax, %rbp
    0000127c: 	jmp	.Ltmp423 # Offset: 4732
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_one_generatorISt20shuffle_order_engineISt26linear_congruential_engineImLm16807ELm0ELm2147483647EELm256EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISG_EE"

Binary Function "_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x7df0
  Size        : 0x13f
  MaxSize     : 0x140
  Offset      : 0x7df0
  Section     : .text
  Orc Section : .local.text._ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	movq	0xc8(%rdi), %rdx
    0000000b: 	movq	0xd0(%rdi), %r11
    00000012: 	movq	0xc0(%rdi), %rsi
    00000019: 	leaq	-0xa(%rdx), %rcx
    0000001d: 	leaq	0x1(%rdx), %r9
    00000021: 	movq	%rcx, %rax
    00000024: 	movq	%r9, %r10
    00000027: 	cmpq	$0x16, %r11
    0000002b: 	ja	.Ltmp428 # Offset: 43
    0000002d: 	addq	$0x1, %r11
.Ltmp438:
    00000031: 	testq	%rax, %rax
    00000034: 	leaq	0xe(%rdx), %rcx
    00000038: 	movq	%r11, 0xd0(%rdi)
    0000003f: 	cmovsq	%rcx, %rax
    00000043: 	addq	(%rdi,%rdx,8), %rsi
    00000047: 	movq	(%rdi,%rax,8), %rax
    0000004b: 	cmpq	%rsi, %rax
    0000004e: 	jb	.Ltmp429 # Offset: 78
    00000054: 	subq	%rsi, %rax
    00000057: 	xorl	%ecx, %ecx
.Ltmp439:
    00000059: 	movq	%rcx, 0xc0(%rdi)
    00000060: 	movq	%rax, (%rdi,%rdx,8)
    00000064: 	xorl	%edx, %edx
    00000066: 	cmpq	$0x18, %r10
    0000006a: 	cmovaeq	%rdx, %r10
    0000006e: 	movq	%r10, 0xc8(%rdi)
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp428:
    00000080: 	movl	$0xdf, %r8d
    00000086: 	subq	%r11, %r8
    00000089: 	je	.Ltmp430 # Offset: 137
    0000008b: 	movl	$0x1000000, %r11d
    00000091: 	jmp	.Ltmp431 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp434:
    00000098: 	subq	%rsi, %rax
    0000009b: 	xorl	%esi, %esi
    0000009d: 	movq	%rax, (%rdi,%rdx,8)
    000000a1: 	cmpq	$0x17, %r9
    000000a5: 	ja	.Ltmp432 # Offset: 165
.Ltmp435:
    000000a7: 	leaq	-0x9(%rdx), %rax
    000000ab: 	leaq	0x2(%rdx), %r10
    000000af: 	subq	$0x1, %r8
    000000b3: 	je	.Ltmp433 # Offset: 179
    000000b5: 	movq	%r9, %rdx
.Ltmp437:
    000000b8: 	leaq	-0xa(%rdx), %rcx
    000000bc: 	leaq	0x1(%rdx), %r9
.Ltmp431:
    000000c0: 	testq	%rcx, %rcx
    000000c3: 	leaq	0xe(%rdx), %rax
    000000c7: 	cmovnsq	%rcx, %rax
    000000cb: 	addq	(%rdi,%rdx,8), %rsi
    000000cf: 	movq	%rsi, %rcx
    000000d2: 	movq	(%rdi,%rax,8), %rax
    000000d6: 	cmpq	%rsi, %rax
    000000d9: 	jae	.Ltmp434 # Offset: 217
    000000db: 	movq	%r11, %rsi
    000000de: 	subq	%rcx, %rsi
    000000e1: 	addq	%rsi, %rax
    000000e4: 	movl	$0x1, %esi
    000000e9: 	movq	%rax, (%rdi,%rdx,8)
    000000ed: 	cmpq	$0x17, %r9
    000000f1: 	jbe	.Ltmp435 # Offset: 241
.Ltmp432:
    000000f3: 	subq	$0x1, %r8
    000000f7: 	je	.Ltmp436 # Offset: 247
    000000f9: 	xorl	%edx, %edx
    000000fb: 	jmp	.Ltmp437 # Offset: 251
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp433:
    00000100: 	movq	%r9, %r8
.Ltmp440:
    00000103: 	movq	%r8, %rdx
.Ltmp430:
    00000106: 	movl	$0x1, %r11d
    0000010c: 	jmp	.Ltmp438 # Offset: 268
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp429:
    00000118: 	subq	%rsi, %rax
    0000011b: 	movl	$0x1, %ecx
    00000120: 	addq	$0x1000000, %rax
    00000126: 	jmp	.Ltmp439 # Offset: 294
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp436:
    00000130: 	movl	$0x1, %r10d
    00000136: 	movq	$-0xa, %rax
    0000013d: 	jmp	.Ltmp440 # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv"

Binary Function "_ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEiRT_RKNS0_10param_typeE.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEiRT_RKNS0_10param_typeE.isra.0/1
                _ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEiRT_RKNS0_10param_typeE.isra.0/random_numbers.cpp/1
  Number      : 28
  State       : disassembled
  Address     : 0x7f30
  Size        : 0x228
  MaxSize     : 0x230
  Offset      : 0x7f30
  Section     : .text
  Orc Section : .local.text._ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEiRT_RKNS0_10param_typeE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	pushq	%r14
    00000002: 	movslq	%esi, %rax
    00000005: 	pushq	%r13
    00000007: 	movslq	%edx, %r13
    0000000a: 	subq	%rax, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rax, %rbx
    00000017: 	cmpq	$0xfffffe, %r13
    0000001e: 	ja	.Ltmp441 # Offset: 30
    00000024: 	leaq	0x1(%r13), %r9
    00000028: 	movl	$0xffffff, %eax
    0000002d: 	xorl	%edx, %edx
    0000002f: 	movq	0xd0(%rdi), %rcx
    00000036: 	divq	%r9
    00000039: 	movq	0xc0(%rdi), %r13
    00000040: 	movq	0xc8(%rdi), %rdx
    00000047: 	movl	$0xdf, %r12d
    0000004d: 	movl	$0x1000000, %r11d
    00000053: 	imulq	%rax, %r9
    00000057: 	movq	%rax, %r10
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp446:
    00000060: 	leaq	-0xa(%rdx), %rsi
    00000064: 	leaq	0x1(%rdx), %r8
    00000068: 	movq	%rsi, %rax
    0000006b: 	cmpq	$0x16, %rcx
    0000006f: 	ja	.Ltmp442 # Offset: 111
    00000071: 	movq	%rdx, %rdi
    00000074: 	addq	$0x1, %rcx
    00000078: 	movq	%r8, %rdx
.Ltmp456:
    0000007b: 	leaq	0xe(%rdi), %rsi
    0000007f: 	testq	%rax, %rax
    00000082: 	movq	%rcx, 0xd0(%rbp)
    00000089: 	cmovsq	%rsi, %rax
    0000008d: 	movq	(%rbp,%rdi,8), %rsi
    00000092: 	movq	(%rbp,%rax,8), %rax
    00000097: 	addq	%r13, %rsi
    0000009a: 	cmpq	%rsi, %rax
    0000009d: 	jb	.Ltmp443 # Offset: 157
    000000a3: 	subq	%rsi, %rax
    000000a6: 	xorl	%r13d, %r13d
.Ltmp455:
    000000a9: 	movq	%r13, 0xc0(%rbp)
    000000b0: 	movq	%rax, (%rbp,%rdi,8)
    000000b5: 	cmpq	$0x17, %rdx
    000000b9: 	jbe	.Ltmp444 # Offset: 185
    000000bf: 	movq	$0x0, 0xc8(%rbp)
    000000ca: 	cmpq	%rax, %r9
    000000cd: 	ja	.Ltmp445 # Offset: 205
    000000d3: 	xorl	%edx, %edx
    000000d5: 	jmp	.Ltmp446 # Offset: 213
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp442:
    000000e0: 	movq	%r12, %rdi
    000000e3: 	subq	%rcx, %rdi
    000000e6: 	jne	.Ltmp447 # Offset: 230
    000000e8: 	jmp	.Ltmp448 # Offset: 232
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp451:
    000000f0: 	subq	%rsi, %rcx
    000000f3: 	xorl	%r13d, %r13d
    000000f6: 	movq	%rcx, (%rbp,%rdx,8)
    000000fb: 	cmpq	$0x17, %r8
    000000ff: 	ja	.Ltmp449 # Offset: 255
.Ltmp452:
    00000101: 	leaq	-0x9(%rdx), %rax
    00000105: 	addq	$0x2, %rdx
    00000109: 	subq	$0x1, %rdi
    0000010d: 	je	.Ltmp450 # Offset: 269
    00000113: 	movq	%r8, %rdx
.Ltmp454:
    00000116: 	leaq	-0xa(%rdx), %rsi
    0000011a: 	leaq	0x1(%rdx), %r8
.Ltmp447:
    0000011e: 	testq	%rsi, %rsi
    00000121: 	leaq	0xe(%rdx), %rcx
    00000125: 	cmovnsq	%rsi, %rcx
    00000129: 	movq	(%rbp,%rdx,8), %rsi
    0000012e: 	movq	(%rbp,%rcx,8), %rcx
    00000133: 	addq	%r13, %rsi
    00000136: 	cmpq	%rcx, %rsi
    00000139: 	jbe	.Ltmp451 # Offset: 313
    0000013b: 	movq	%r11, %rax
    0000013e: 	movl	$0x1, %r13d
    00000144: 	subq	%rsi, %rax
    00000147: 	addq	%rax, %rcx
    0000014a: 	movq	%rcx, (%rbp,%rdx,8)
    0000014f: 	cmpq	$0x17, %r8
    00000153: 	jbe	.Ltmp452 # Offset: 339
.Ltmp449:
    00000155: 	subq	$0x1, %rdi
    00000159: 	je	.Ltmp453 # Offset: 345
    0000015b: 	xorl	%edx, %edx
    0000015d: 	jmp	.Ltmp454 # Offset: 349
    0000015f: 	nop # Size: 1
.Ltmp444:
    00000160: 	movq	%rdx, 0xc8(%rbp)
    00000167: 	cmpq	%rax, %r9
    0000016a: 	jbe	.Ltmp446 # Offset: 362
.Ltmp445:
    00000170: 	xorl	%edx, %edx
    00000172: 	divq	%r10
    00000175: 	addl	%ebx, %eax
    00000177: 	popq	%rbx
    00000178: 	popq	%rbp
    00000179: 	popq	%r12
    0000017b: 	popq	%r13
    0000017d: 	popq	%r14
    0000017f: 	retq # Offset: 383
.Ltmp443:
    00000180: 	movq	%r11, %r8
    00000183: 	movl	$0x1, %r13d
    00000189: 	subq	%rsi, %r8
    0000018c: 	addq	%r8, %rax
    0000018f: 	jmp	.Ltmp455 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp450:
    00000198: 	movq	%r8, %rdi
.Ltmp457:
    0000019b: 	movl	$0x1, %ecx
    000001a0: 	jmp	.Ltmp456 # Offset: 416
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp453:
    000001a8: 	movl	$0x1, %edx
    000001ad: 	movq	$-0xa, %rax
    000001b4: 	jmp	.Ltmp457 # Offset: 436
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp441:
    000001c0: 	cmpq	$0xffffff, %r13
    000001c7: 	je	.Ltmp458 # Offset: 455
    000001c9: 	movq	%r13, %r14
    000001cc: 	shrq	$0x18, %r14
.Ltmp459:
    000001d0: 	movl	%r14d, %edx
    000001d3: 	xorl	%esi, %esi
    000001d5: 	movq	%rbp, %rdi
    000001d8: 	callq	"_ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEiRT_RKNS0_10param_typeE.isra.0/1" # Offset: 472
    000001dd: 	movq	%rbp, %rdi
    000001e0: 	movl	%eax, %r12d
    000001e3: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv # Offset: 483
    000001e8: 	xorl	%edx, %edx
    000001ea: 	movq	%rax, %r8
    000001ed: 	movslq	%r12d, %rax
    000001f0: 	shlq	$0x18, %rax
    000001f4: 	addq	%r8, %rax
    000001f7: 	setb	%dl
    000001fa: 	cmpq	%rax, %r13
    000001fd: 	jb	.Ltmp459 # Offset: 509
    000001ff: 	testq	%rdx, %rdx
    00000202: 	jne	.Ltmp459 # Offset: 514
    00000204: 	addl	%ebx, %eax
    00000206: 	popq	%rbx
    00000207: 	popq	%rbp
    00000208: 	popq	%r12
    0000020a: 	popq	%r13
    0000020c: 	popq	%r14
    0000020e: 	retq # Offset: 526
    0000020f: 	nop # Size: 1
.Ltmp448:
    00000210: 	movq	%rdx, %rdi
    00000213: 	movq	%r8, %rdx
    00000216: 	jmp	.Ltmp457 # Offset: 534
.Ltmp458:
    00000218: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv # Offset: 536
    0000021d: 	addl	%ebx, %eax
    0000021f: 	popq	%rbx
    00000220: 	popq	%rbp
    00000221: 	popq	%r12
    00000223: 	popq	%r13
    00000225: 	popq	%r14
    00000227: 	retq # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEiRT_RKNS0_10param_typeE.isra.0/1(*2)"

Binary Function "_ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEfRT_RKNS0_10param_typeE" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x8160
  Size        : 0x275
  MaxSize     : 0x280
  Offset      : 0x8160
  Section     : .text
  Orc Section : .local.text._ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEfRT_RKNS0_10param_typeE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdx, %rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %rbx
    00000011: 	subq	$0x10, %rsp
    00000015: 	cmpb	$0x0, 0xc(%rdi)
    00000019: 	je	.Ltmp460 # Offset: 25
    0000001b: 	movb	$0x0, 0xc(%rdi)
    0000001f: 	movss	0x8(%rdi), %xmm0
.Ltmp470:
    00000024: 	mulss	0x4(%rbp), %xmm0
    00000029: 	addss	(%rbp), %xmm0
    0000002e: 	addq	$0x10, %rsp
    00000032: 	popq	%rbx
    00000033: 	popq	%rbp
    00000034: 	popq	%r12
    00000036: 	retq # Offset: 54
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp466:
    00000040: 	pxor	%xmm6, %xmm6
    00000044: 	ucomiss	%xmm6, %xmm3
    00000047: 	jp	.Ltmp461 # Offset: 71
    0000004d: 	jne	.Ltmp461 # Offset: 77
.Ltmp460:
    00000053: 	movq	%r12, %rdi
    00000056: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv # Offset: 86
    0000005b: 	testq	%rax, %rax
    0000005e: 	js	.Ltmp462 # Offset: 94
.Ltmp467:
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	cvtsi2ss	%rax, %xmm0
.Ltmp468:
    0000006d: 	pxor	%xmm4, %xmm4
    00000071: 	addss	%xmm4, %xmm0
    00000075: 	mulss	DATAat0xd344(%rip), %xmm0
    0000007d: 	comiss	DATAat0xd35c(%rip), %xmm0
    00000084: 	jae	.Ltmp463 # Offset: 132
    0000008a: 	addss	%xmm0, %xmm0
    0000008e: 	movq	%r12, %rdi
    00000091: 	movaps	%xmm0, %xmm1
    00000094: 	subss	DATAat0xd35c(%rip), %xmm1
    0000009c: 	movss	%xmm1, 0x4(%rsp)
    000000a2: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv # Offset: 162
    000000a7: 	movss	0x4(%rsp), %xmm1
    000000ad: 	testq	%rax, %rax
    000000b0: 	js	.Ltmp464 # Offset: 176
    000000b6: 	pxor	%xmm0, %xmm0
    000000ba: 	cvtsi2ss	%rax, %xmm0
.Ltmp471:
    000000bf: 	pxor	%xmm5, %xmm5
    000000c3: 	movaps	%xmm1, %xmm3
    000000c6: 	addss	%xmm5, %xmm0
    000000ca: 	mulss	DATAat0xd344(%rip), %xmm0
    000000d2: 	mulss	%xmm1, %xmm3
    000000d6: 	comiss	DATAat0xd35c(%rip), %xmm0
    000000dd: 	jae	.Ltmp465 # Offset: 221
    000000e3: 	addss	%xmm0, %xmm0
    000000e7: 	movaps	%xmm0, %xmm2
    000000ea: 	subss	DATAat0xd35c(%rip), %xmm2
    000000f2: 	movaps	%xmm2, %xmm0
    000000f5: 	mulss	%xmm2, %xmm0
.Ltmp473:
    000000f9: 	addss	%xmm0, %xmm3
    000000fd: 	comiss	DATAat0xd35c(%rip), %xmm3
    00000104: 	jbe	.Ltmp466 # Offset: 260
    0000010a: 	movq	%r12, %rdi
    0000010d: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv # Offset: 269
    00000112: 	testq	%rax, %rax
    00000115: 	jns	.Ltmp467 # Offset: 277
.Ltmp462:
    0000011b: 	movq	%rax, %rdx
    0000011e: 	andl	$0x1, %eax
    00000121: 	pxor	%xmm0, %xmm0
    00000125: 	shrq	%rdx
    00000128: 	orq	%rax, %rdx
    0000012b: 	cvtsi2ss	%rdx, %xmm0
    00000130: 	addss	%xmm0, %xmm0
    00000134: 	jmp	.Ltmp468 # Offset: 308
    00000139: 	nopl	(%rax) # Size: 7
.Ltmp461:
    00000140: 	movaps	%xmm3, %xmm0
    00000143: 	movss	%xmm2, 0xc(%rsp)
    00000149: 	movss	%xmm1, 0x8(%rsp)
    0000014f: 	movss	%xmm3, 0x4(%rsp)
    00000155: 	callq	logf@PLT # Offset: 341
    0000015a: 	movss	0x4(%rsp), %xmm3
    00000160: 	pxor	%xmm7, %xmm7
    00000164: 	movss	0x8(%rsp), %xmm1
    0000016a: 	mulss	DATAat0xd300(%rip), %xmm0
    00000172: 	movss	0xc(%rsp), %xmm2
    00000178: 	divss	%xmm3, %xmm0
    0000017c: 	ucomiss	%xmm0, %xmm7
    0000017f: 	ja	.Ltmp469 # Offset: 383
    00000185: 	sqrtss	%xmm0, %xmm0
.Ltmp475:
    00000189: 	mulss	%xmm0, %xmm1
    0000018d: 	movb	$0x1, 0xc(%rbx)
    00000191: 	mulss	%xmm2, %xmm0
    00000195: 	movss	%xmm1, 0x8(%rbx)
    0000019a: 	jmp	.Ltmp470 # Offset: 410
    0000019f: 	nop # Size: 1
.Ltmp464:
    000001a0: 	movq	%rax, %rdx
    000001a3: 	andl	$0x1, %eax
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	shrq	%rdx
    000001ad: 	orq	%rax, %rdx
    000001b0: 	cvtsi2ss	%rdx, %xmm0
    000001b5: 	addss	%xmm0, %xmm0
    000001b9: 	jmp	.Ltmp471 # Offset: 441
    000001be: 	nop # Size: 2
.Ltmp463:
    000001c0: 	movq	%r12, %rdi
    000001c3: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv # Offset: 451
    000001c8: 	testq	%rax, %rax
    000001cb: 	js	.Ltmp472 # Offset: 459
    000001cd: 	pxor	%xmm2, %xmm2
    000001d1: 	cvtsi2ss	%rax, %xmm2
.Ltmp474:
    000001d6: 	pxor	%xmm7, %xmm7
    000001da: 	addss	%xmm7, %xmm2
    000001de: 	mulss	DATAat0xd344(%rip), %xmm2
    000001e6: 	comiss	DATAat0xd35c(%rip), %xmm2
    000001ed: 	jae	.Ltmp460 # Offset: 493
    000001f3: 	addss	%xmm2, %xmm2
    000001f7: 	subss	DATAat0xd35c(%rip), %xmm2
    000001ff: 	movss	DATAat0xd330(%rip), %xmm3
    00000207: 	movss	DATAat0xd334(%rip), %xmm1
    0000020f: 	movaps	%xmm2, %xmm0
    00000212: 	mulss	%xmm2, %xmm0
    00000216: 	jmp	.Ltmp473 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp465:
    00000220: 	movss	DATAat0xd330(%rip), %xmm0
    00000228: 	movss	DATAat0xd334(%rip), %xmm2
    00000230: 	jmp	.Ltmp473 # Offset: 560
    00000235: 	nopl	(%rax) # Size: 3
.Ltmp472:
    00000238: 	movq	%rax, %rdx
    0000023b: 	andl	$0x1, %eax
    0000023e: 	pxor	%xmm2, %xmm2
    00000242: 	shrq	%rdx
    00000245: 	orq	%rax, %rdx
    00000248: 	cvtsi2ss	%rdx, %xmm2
    0000024d: 	addss	%xmm2, %xmm2
    00000251: 	jmp	.Ltmp474 # Offset: 593
.Ltmp469:
    00000253: 	movss	%xmm2, 0x8(%rsp)
    00000259: 	movss	%xmm1, 0x4(%rsp)
    0000025f: 	callq	sqrtf@PLT # Offset: 607
    00000264: 	movss	0x8(%rsp), %xmm2
    0000026a: 	movss	0x4(%rsp), %xmm1
    00000270: 	jmp	.Ltmp475 # Offset: 624
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEfRT_RKNS0_10param_typeE"

Binary Function "_Z18test_one_generatorISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISG_EE" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x83e0
  Size        : 0x1121
  MaxSize     : 0x1130
  Offset      : 0x83e0
  Section     : .text
  Orc Section : .local.text._Z18test_one_generatorISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISG_EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%r8, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	movq	%rsi, %rdi
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rcx, %rbx
    0000001d: 	subq	$0x158, %rsp
    00000024: 	movaps	DATAat0xd350(%rip), %xmm0
    0000002b: 	movq	%rsi, (%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x148(%rsp)
    00000040: 	xorl	%eax, %eax
    00000042: 	movq	DATAat0xd2f8(%rip), %rax
    00000049: 	movb	$0x0, 0x5c(%rsp)
    0000004e: 	movl	$0x0, 0x58(%rsp)
    00000056: 	movq	%rax, 0x50(%rsp)
    0000005b: 	leaq	0x90(%rsp), %rax
    00000063: 	movq	$0x0, 0x70(%rsp)
    0000006c: 	movq	%rax, 0x10(%rsp)
    00000071: 	movq	%rax, 0x80(%rsp)
    00000079: 	movl	$0x64656573, 0x90(%rsp)
    00000084: 	movb	$0x20, 0x94(%rsp)
    0000008c: 	movq	$0x5, 0x88(%rsp)
    00000098: 	movb	$0x0, 0x95(%rsp)
    000000a0: 	movaps	%xmm0, 0x60(%rsp)
    000000a5: 	callq	strlen@PLT # Offset: 165
    000000aa: 	movq	%rax, %rdx
    000000ad: 	movabsq	$0x3ffffffffffffffa, %rax
    000000b7: 	cmpq	%rax, %rdx
    000000ba: 	ja	.Ltmp476 # Offset: 186
    000000c0: 	leaq	0x80(%rsp), %r14
    000000c8: 	movq	(%rsp), %rsi
    000000cc: 	movq	%r14, %rdi
    000000cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 207
    000000d4: 	movq	0x40(%r12), %rax
    000000d9: 	movq	0x30(%r12), %r15
    000000de: 	subq	$0x20, %rax
    000000e2: 	cmpq	%rax, %r15
    000000e5: 	je	.Ltmp477 # Offset: 229
    000000eb: 	leaq	0x10(%r15), %rdi
    000000ef: 	movq	0x88(%rsp), %r14
    000000f7: 	movq	%rdi, (%r15)
    000000fa: 	movq	0x80(%rsp), %rax
    00000102: 	movq	%rax, %rcx
    00000105: 	movq	%rax, 0x8(%rsp)
    0000010a: 	addq	%r14, %rcx
    0000010d: 	je	.Ltmp478 # Offset: 269
    0000010f: 	testq	%rax, %rax
    00000112: 	je	.Ltmp479 # Offset: 274
.Ltmp478:
    00000118: 	movq	%r14, 0x48(%rsp)
    0000011d: 	cmpq	$0xf, %r14
    00000121: 	ja	.Ltmp480 # Offset: 289
    00000127: 	cmpq	$0x1, %r14
    0000012b: 	jne	.Ltmp481 # Offset: 299
    00000131: 	movq	0x8(%rsp), %rax
    00000136: 	movzbl	(%rax), %eax
    00000139: 	movb	%al, 0x10(%r15)
.Ltmp508:
    0000013d: 	movq	%r14, 0x8(%r15)
    00000141: 	movb	$0x0, (%rdi,%r14)
    00000146: 	addq	$0x20, 0x30(%r12)
.Ltmp548:
    0000014c: 	callq	clock@PLT # Offset: 332
    00000151: 	movq	%rax, start_time(%rip)
    00000158: 	movl	iterations(%rip), %eax
    0000015e: 	testl	%eax, %eax
    00000160: 	je	.Ltmp482 # Offset: 352
    00000166: 	movslq	init_value(%rip), %rcx
    0000016d: 	leal	-0x1(%rax), %r9d
    00000171: 	leaq	0xc0(%rbp), %r10
    00000178: 	movabsq	$0xaa000070e5, %r8
    00000182: 	leaq	0x1(%rcx), %rsi
    00000186: 	addq	%rsi, %r9
    00000189: 	jmp	.Ltmp483 # Offset: 393
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp486:
    00000190: 	addq	$0x1, %rsi
.Ltmp483:
    00000194: 	movl	$0x12dd397, %edx
    00000199: 	testq	%rcx, %rcx
    0000019c: 	je	.Ltmp484 # Offset: 412
    0000019e: 	movq	%rcx, %rax
    000001a1: 	mulq	%r8
    000001a4: 	movq	%rcx, %rax
    000001a7: 	subq	%rdx, %rax
    000001aa: 	shrq	%rax
    000001ad: 	addq	%rax, %rdx
    000001b0: 	shrq	$0x1e, %rdx
    000001b4: 	imulq	$0x7fffffab, %rdx, %rax
    000001bb: 	subq	%rax, %rcx
    000001be: 	movl	$0x1, %eax
    000001c3: 	movq	%rcx, %rdx
    000001c6: 	cmoveq	%rax, %rdx
.Ltmp484:
    000001ca: 	movq	%rbp, %rcx
.Ltmp485:
    000001cd: 	imulq	$0x9c4e, %rdx, %rdi
    000001d4: 	addq	$0x8, %rcx
    000001d8: 	movq	%rdi, %rax
    000001db: 	mulq	%r8
    000001de: 	movq	%rdi, %rax
    000001e1: 	subq	%rdx, %rax
    000001e4: 	shrq	%rax
    000001e7: 	addq	%rax, %rdx
    000001ea: 	shrq	$0x1e, %rdx
    000001ee: 	imulq	$0x7fffffab, %rdx, %rax
    000001f5: 	subq	%rax, %rdi
    000001f8: 	movq	%rdi, %rax
    000001fb: 	movq	%rdi, %rdx
    000001fe: 	andl	$0xffffff, %eax
    00000203: 	movq	%rax, -0x8(%rcx)
    00000207: 	cmpq	%rcx, %r10
    0000020a: 	jne	.Ltmp485 # Offset: 522
    0000020c: 	movq	0xb8(%rbp), %rax
    00000213: 	movq	%rsi, %rcx
    00000216: 	cmpq	%r9, %rsi
    00000219: 	jne	.Ltmp486 # Offset: 537
    0000021f: 	movq	$0x0, 0xc8(%rbp)
    0000022a: 	testq	%rax, %rax
    0000022d: 	movq	$0x0, 0xd0(%rbp)
    00000238: 	sete	%al
    0000023b: 	movzbl	%al, %eax
    0000023e: 	movq	%rax, 0xc0(%rbp)
.Ltmp482:
    00000245: 	movq	0x30(%r12), %rax
    0000024a: 	movq	0x48(%r12), %rdx
    0000024f: 	cmpq	%rax, 0x38(%r12)
    00000254: 	je	.Ltmp487 # Offset: 596
.Ltmp549:
    0000025a: 	movq	-0x20(%rax), %r14
    0000025e: 	callq	clock@PLT # Offset: 606
    00000263: 	pxor	%xmm0, %xmm0
    00000267: 	movq	%rax, end_time(%rip)
    0000026e: 	movq	%r14, %rdi
    00000271: 	subq	start_time(%rip), %rax
    00000278: 	cvtsi2sd	%rax, %xmm0
    0000027d: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000285: 	callq	_Z13record_resultdPKc # Offset: 645
    0000028a: 	leaq	0xb0(%rsp), %rax
    00000292: 	xorl	%edx, %edx
    00000294: 	leaq	0xa0(%rsp), %r14
    0000029c: 	movq	$0x19, 0x48(%rsp)
    000002a5: 	movq	%rax, 0x18(%rsp)
    000002aa: 	movq	%r14, %rdi
    000002ad: 	movq	%rax, 0xa0(%rsp)
    000002b5: 	leaq	0x48(%rsp), %rax
    000002ba: 	movq	%rax, %rsi
    000002bd: 	movq	%rax, 0x8(%rsp)
    000002c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 706
    000002c7: 	movq	0x48(%rsp), %rdx
    000002cc: 	movq	(%rsp), %rdi
    000002d0: 	movb	$0x20, 0x18(%rax)
    000002d4: 	movabsq	$0x6e6f697475626972, %rsi
    000002de: 	movdqa	DATAat0xd360(%rip), %xmm0
    000002e6: 	movq	%rax, 0xa0(%rsp)
    000002ee: 	movq	%rdx, 0xb0(%rsp)
    000002f6: 	movups	%xmm0, (%rax)
    000002f9: 	movq	0xa0(%rsp), %rdx
    00000301: 	movq	%rsi, 0x10(%rax)
    00000305: 	movq	0x48(%rsp), %rax
    0000030a: 	movq	%rax, 0xa8(%rsp)
    00000312: 	movb	$0x0, (%rdx,%rax)
    00000316: 	callq	strlen@PLT # Offset: 790
    0000031b: 	movq	%rax, %rdx
    0000031e: 	movabsq	$0x3fffffffffffffff, %rax
    00000328: 	subq	0xa8(%rsp), %rax
    00000330: 	cmpq	%rax, %rdx
    00000333: 	ja	.Ltmp488 # Offset: 819
    00000339: 	movq	(%rsp), %rsi
    0000033d: 	movq	%r14, %rdi
    00000340: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 832
    00000345: 	movq	0x40(%r12), %rax
    0000034a: 	movq	0x30(%r12), %r15
    0000034f: 	subq	$0x20, %rax
    00000353: 	cmpq	%rax, %r15
    00000356: 	je	.Ltmp489 # Offset: 854
    0000035c: 	leaq	0x10(%r15), %rdi
    00000360: 	movq	0xa8(%rsp), %r14
    00000368: 	movq	%rdi, (%r15)
    0000036b: 	movq	0xa0(%rsp), %rax
    00000373: 	movq	%rax, %rcx
    00000376: 	movq	%rax, 0x20(%rsp)
    0000037b: 	addq	%r14, %rcx
    0000037e: 	je	.Ltmp490 # Offset: 894
    00000380: 	testq	%rax, %rax
    00000383: 	je	.Ltmp491 # Offset: 899
.Ltmp490:
    00000389: 	movq	%r14, 0x48(%rsp)
    0000038e: 	cmpq	$0xf, %r14
    00000392: 	ja	.Ltmp492 # Offset: 914
    00000398: 	cmpq	$0x1, %r14
    0000039c: 	jne	.Ltmp493 # Offset: 924
    000003a2: 	movq	0x20(%rsp), %rax
    000003a7: 	movzbl	(%rax), %eax
    000003aa: 	movb	%al, 0x10(%r15)
.Ltmp560:
    000003ae: 	movq	%r14, 0x8(%r15)
    000003b2: 	movb	$0x0, (%rdi,%r14)
    000003b7: 	addq	$0x20, 0x30(%r12)
.Ltmp550:
    000003bd: 	callq	clock@PLT # Offset: 957
    000003c2: 	movl	iterations(%rip), %edi
    000003c8: 	xorl	%r14d, %r14d
    000003cb: 	movq	%rax, start_time(%rip)
    000003d2: 	testl	%edi, %edi
    000003d4: 	je	.Ltmp494 # Offset: 980
    000003d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp495:
    000003e0: 	movl	$0x270f, %edx
    000003e5: 	movl	$0xffffd8f1, %esi
    000003ea: 	movq	%rbp, %rdi
    000003ed: 	addl	$0x1, %r14d
    000003f1: 	callq	"_ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEiRT_RKNS0_10param_typeE.isra.0/1" # Offset: 1009
    000003f6: 	addl	%eax, (%r13)
    000003fa: 	cmpl	%r14d, iterations(%rip)
    00000401: 	jne	.Ltmp495 # Offset: 1025
.Ltmp494:
    00000403: 	movq	0x30(%r12), %rax
    00000408: 	movq	0x48(%r12), %rdx
    0000040d: 	cmpq	%rax, 0x38(%r12)
    00000412: 	je	.Ltmp496 # Offset: 1042
.Ltmp559:
    00000418: 	movq	-0x20(%rax), %r13
    0000041c: 	callq	clock@PLT # Offset: 1052
    00000421: 	pxor	%xmm0, %xmm0
    00000425: 	movq	%rax, end_time(%rip)
    0000042c: 	movq	%r13, %rdi
    0000042f: 	subq	start_time(%rip), %rax
    00000436: 	cvtsi2sd	%rax, %xmm0
    0000043b: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000443: 	callq	_Z13record_resultdPKc # Offset: 1091
    00000448: 	leaq	0xc0(%rsp), %r13
    00000450: 	movq	0x8(%rsp), %rsi
    00000455: 	leaq	0xd0(%rsp), %rax
    0000045d: 	xorl	%edx, %edx
    0000045f: 	movq	%r13, %rdi
    00000462: 	movq	%rax, 0x20(%rsp)
    00000467: 	movq	%rax, 0xc0(%rsp)
    0000046f: 	movq	$0x1a, 0x48(%rsp)
    00000478: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1144
    0000047d: 	movq	0x48(%rsp), %rdx
    00000482: 	movl	$0x206e, %esi
    00000487: 	movq	(%rsp), %rdi
    0000048b: 	movabsq	$0x6f69747562697274, %rcx
    00000495: 	movdqa	DATAat0xd370(%rip), %xmm0
    0000049d: 	movq	%rax, 0xc0(%rsp)
    000004a5: 	movq	%rdx, 0xd0(%rsp)
    000004ad: 	movw	%si, 0x18(%rax)
    000004b1: 	movups	%xmm0, (%rax)
    000004b4: 	movq	0xc0(%rsp), %rdx
    000004bc: 	movq	%rcx, 0x10(%rax)
    000004c0: 	movq	0x48(%rsp), %rax
    000004c5: 	movq	%rax, 0xc8(%rsp)
    000004cd: 	movb	$0x0, (%rdx,%rax)
    000004d1: 	callq	strlen@PLT # Offset: 1233
    000004d6: 	movq	%rax, %rdx
    000004d9: 	movabsq	$0x3fffffffffffffff, %rax
    000004e3: 	subq	0xc8(%rsp), %rax
    000004eb: 	cmpq	%rax, %rdx
    000004ee: 	ja	.Ltmp497 # Offset: 1262
    000004f4: 	movq	(%rsp), %rsi
    000004f8: 	movq	%r13, %rdi
    000004fb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1275
    00000500: 	movq	0x40(%r12), %rax
    00000505: 	movq	0x30(%r12), %r14
    0000050a: 	subq	$0x20, %rax
    0000050e: 	cmpq	%rax, %r14
    00000511: 	je	.Ltmp498 # Offset: 1297
    00000517: 	leaq	0x10(%r14), %rdi
    0000051b: 	movq	0xc8(%rsp), %r13
    00000523: 	movq	%rdi, (%r14)
    00000526: 	movq	0xc0(%rsp), %r15
    0000052e: 	movq	%r15, %rax
    00000531: 	addq	%r13, %rax
    00000534: 	je	.Ltmp499 # Offset: 1332
    00000536: 	testq	%r15, %r15
    00000539: 	je	.Ltmp500 # Offset: 1337
.Ltmp499:
    0000053f: 	movq	%r13, 0x48(%rsp)
    00000544: 	cmpq	$0xf, %r13
    00000548: 	ja	.Ltmp501 # Offset: 1352
    0000054e: 	cmpq	$0x1, %r13
    00000552: 	jne	.Ltmp502 # Offset: 1362
    00000558: 	movzbl	(%r15), %eax
    0000055c: 	movb	%al, 0x10(%r14)
.Ltmp569:
    00000560: 	movq	%r13, 0x8(%r14)
    00000564: 	movb	$0x0, (%rdi,%r13)
    00000569: 	addq	$0x20, 0x30(%r12)
.Ltmp558:
    0000056f: 	callq	clock@PLT # Offset: 1391
    00000574: 	movl	iterations(%rip), %r13d
    0000057b: 	xorl	%r14d, %r14d
    0000057e: 	movq	%rax, start_time(%rip)
    00000585: 	testl	%r13d, %r13d
    00000588: 	jne	.Ltmp503 # Offset: 1416
    0000058a: 	jmp	.Ltmp504 # Offset: 1418
    0000058f: 	nop # Size: 1
.Ltmp506:
    00000590: 	pxor	%xmm0, %xmm0
    00000594: 	cvtsi2ss	%rax, %xmm0
.Ltmp507:
    00000599: 	pxor	%xmm1, %xmm1
    0000059d: 	addss	%xmm1, %xmm0
    000005a1: 	mulss	DATAat0xd344(%rip), %xmm0
    000005a9: 	comiss	DATAat0xd35c(%rip), %xmm0
    000005b0: 	jae	.Ltmp505 # Offset: 1456
    000005b6: 	mulss	DATAat0xd33c(%rip), %xmm0
    000005be: 	addl	$0x1, %r14d
    000005c2: 	subss	DATAat0xd340(%rip), %xmm0
    000005ca: 	cvtss2sd	%xmm0, %xmm0
    000005ce: 	addsd	(%rbx), %xmm0
    000005d2: 	movsd	%xmm0, (%rbx)
    000005d6: 	cmpl	%r14d, %r13d
    000005d9: 	je	.Ltmp504 # Offset: 1497
.Ltmp503:
    000005df: 	movq	%rbp, %rdi
    000005e2: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv # Offset: 1506
    000005e7: 	testq	%rax, %rax
    000005ea: 	jns	.Ltmp506 # Offset: 1514
    000005ec: 	movq	%rax, %rdx
    000005ef: 	andl	$0x1, %eax
    000005f2: 	pxor	%xmm0, %xmm0
    000005f6: 	shrq	%rdx
    000005f9: 	orq	%rax, %rdx
    000005fc: 	cvtsi2ss	%rdx, %xmm0
    00000601: 	addss	%xmm0, %xmm0
    00000605: 	jmp	.Ltmp507 # Offset: 1541
    00000607: 	nopw	(%rax,%rax) # Size: 9
.Ltmp480:
    00000610: 	leaq	0x48(%rsp), %rsi
    00000615: 	xorl	%edx, %edx
    00000617: 	movq	%r15, %rdi
    0000061a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1562
    0000061f: 	movq	%rax, (%r15)
    00000622: 	movq	%rax, %rdi
    00000625: 	movq	0x48(%rsp), %rax
    0000062a: 	movq	%rax, 0x10(%r15)
.Ltmp564:
    0000062e: 	movq	0x8(%rsp), %rsi
    00000633: 	movq	%r14, %rdx
    00000636: 	callq	memcpy@PLT # Offset: 1590
    0000063b: 	movq	0x48(%rsp), %r14
    00000640: 	movq	(%r15), %rdi
    00000643: 	jmp	.Ltmp508 # Offset: 1603
    00000648: 	nopl	(%rax,%rax) # Size: 8
.Ltmp505:
    00000650: 	movsd	DATAat0xd300(%rip), %xmm0
    00000658: 	addsd	(%rbx), %xmm0
    0000065c: 	addl	$0x1, %r14d
    00000660: 	movsd	%xmm0, (%rbx)
    00000664: 	cmpl	%r13d, %r14d
    00000667: 	jne	.Ltmp503 # Offset: 1639
    0000066d: 	nopl	(%rax) # Size: 3
.Ltmp504:
    00000670: 	movq	0x30(%r12), %rax
    00000675: 	movq	0x48(%r12), %rdx
    0000067a: 	cmpq	0x38(%r12), %rax
    0000067f: 	je	.Ltmp509 # Offset: 1663
.Ltmp552:
    00000685: 	movq	-0x20(%rax), %r13
    00000689: 	callq	clock@PLT # Offset: 1673
    0000068e: 	pxor	%xmm0, %xmm0
    00000692: 	movq	%rax, end_time(%rip)
    00000699: 	movq	%r13, %rdi
    0000069c: 	subq	start_time(%rip), %rax
    000006a3: 	cvtsi2sd	%rax, %xmm0
    000006a8: 	divsd	DATAat0xd2d8(%rip), %xmm0
    000006b0: 	callq	_Z13record_resultdPKc # Offset: 1712
    000006b5: 	leaq	0xe0(%rsp), %r13
    000006bd: 	movq	0x8(%rsp), %rsi
    000006c2: 	leaq	0xf0(%rsp), %rax
    000006ca: 	xorl	%edx, %edx
    000006cc: 	movq	%r13, %rdi
    000006cf: 	movq	%rax, 0x28(%rsp)
    000006d4: 	movq	%rax, 0xe0(%rsp)
    000006dc: 	movq	$0x1f, 0x48(%rsp)
    000006e5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1765
    000006ea: 	movq	0x48(%rsp), %rdx
    000006ef: 	movl	$0x3e30, %ecx
    000006f4: 	movb	$0x20, 0x1e(%rax)
    000006f8: 	movabsq	$0x6c62756f643c6c61, %rsi
    00000702: 	movdqa	DATAat0xd380(%rip), %xmm0
    0000070a: 	movq	(%rsp), %rdi
    0000070e: 	movq	%rax, 0xe0(%rsp)
    00000716: 	movq	%rdx, 0xf0(%rsp)
    0000071e: 	movl	$0x32202c65, 0x18(%rax)
    00000725: 	movups	%xmm0, (%rax)
    00000728: 	movq	0xe0(%rsp), %rdx
    00000730: 	movq	%rsi, 0x10(%rax)
    00000734: 	movw	%cx, 0x1c(%rax)
    00000738: 	movq	0x48(%rsp), %rax
    0000073d: 	movq	%rax, 0xe8(%rsp)
    00000745: 	movb	$0x0, (%rdx,%rax)
    00000749: 	callq	strlen@PLT # Offset: 1865
    0000074e: 	movq	%rax, %rdx
    00000751: 	movabsq	$0x3fffffffffffffff, %rax
    0000075b: 	subq	0xe8(%rsp), %rax
    00000763: 	cmpq	%rax, %rdx
    00000766: 	ja	.Ltmp510 # Offset: 1894
    0000076c: 	movq	(%rsp), %rsi
    00000770: 	movq	%r13, %rdi
    00000773: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1907
    00000778: 	movq	0x40(%r12), %rax
    0000077d: 	movq	0x30(%r12), %r14
    00000782: 	subq	$0x20, %rax
    00000786: 	cmpq	%rax, %r14
    00000789: 	je	.Ltmp511 # Offset: 1929
    0000078f: 	leaq	0x10(%r14), %rdi
    00000793: 	movq	0xe8(%rsp), %r13
    0000079b: 	movq	%rdi, (%r14)
    0000079e: 	movq	0xe0(%rsp), %r15
    000007a6: 	movq	%r15, %rax
    000007a9: 	addq	%r13, %rax
    000007ac: 	je	.Ltmp512 # Offset: 1964
    000007ae: 	testq	%r15, %r15
    000007b1: 	je	.Ltmp513 # Offset: 1969
.Ltmp512:
    000007b7: 	movq	%r13, 0x48(%rsp)
    000007bc: 	cmpq	$0xf, %r13
    000007c0: 	ja	.Ltmp514 # Offset: 1984
    000007c6: 	cmpq	$0x1, %r13
    000007ca: 	jne	.Ltmp515 # Offset: 1994
    000007d0: 	movzbl	(%r15), %eax
    000007d4: 	movb	%al, 0x10(%r14)
.Ltmp565:
    000007d8: 	movq	%r13, 0x8(%r14)
    000007dc: 	movb	$0x0, (%rdi,%r13)
    000007e1: 	addq	$0x20, 0x30(%r12)
.Ltmp551:
    000007e7: 	callq	clock@PLT # Offset: 2023
    000007ec: 	movl	iterations(%rip), %r13d
    000007f3: 	xorl	%r14d, %r14d
    000007f6: 	movq	%rax, start_time(%rip)
    000007fd: 	testl	%r13d, %r13d
    00000800: 	jne	.Ltmp516 # Offset: 2048
    00000802: 	jmp	.Ltmp517 # Offset: 2050
    00000804: 	nopl	(%rax) # Size: 4
.Ltmp519:
    00000808: 	pxor	%xmm0, %xmm0
    0000080c: 	cvtsi2sd	%rax, %xmm0
.Ltmp520:
    00000811: 	pxor	%xmm2, %xmm2
    00000815: 	addsd	%xmm2, %xmm0
    00000819: 	mulsd	DATAat0xd310(%rip), %xmm0
    00000821: 	comisd	DATAat0xd2e8(%rip), %xmm0
    00000829: 	jae	.Ltmp518 # Offset: 2089
.Ltmp547:
    0000082f: 	addsd	(%rbx), %xmm0
    00000833: 	addl	$0x1, %r14d
    00000837: 	movsd	%xmm0, (%rbx)
    0000083b: 	cmpl	%r13d, %r14d
    0000083e: 	je	.Ltmp517 # Offset: 2110
.Ltmp516:
    00000840: 	movq	%rbp, %rdi
    00000843: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEclEv # Offset: 2115
    00000848: 	testq	%rax, %rax
    0000084b: 	jns	.Ltmp519 # Offset: 2123
    0000084d: 	movq	%rax, %rdx
    00000850: 	andl	$0x1, %eax
    00000853: 	pxor	%xmm0, %xmm0
    00000857: 	shrq	%rdx
    0000085a: 	orq	%rax, %rdx
    0000085d: 	cvtsi2sd	%rdx, %xmm0
    00000862: 	addsd	%xmm0, %xmm0
    00000866: 	jmp	.Ltmp520 # Offset: 2150
    00000868: 	nopl	(%rax,%rax) # Size: 8
.Ltmp517:
    00000870: 	movq	0x30(%r12), %rax
    00000875: 	movq	0x48(%r12), %rdx
    0000087a: 	cmpq	0x38(%r12), %rax
    0000087f: 	je	.Ltmp521 # Offset: 2175
.Ltmp556:
    00000885: 	movq	-0x20(%rax), %r13
    00000889: 	callq	clock@PLT # Offset: 2185
    0000088e: 	pxor	%xmm0, %xmm0
    00000892: 	movq	%rax, end_time(%rip)
    00000899: 	movq	%r13, %rdi
    0000089c: 	subq	start_time(%rip), %rax
    000008a3: 	cvtsi2sd	%rax, %xmm0
    000008a8: 	divsd	DATAat0xd2d8(%rip), %xmm0
    000008b0: 	callq	_Z13record_resultdPKc # Offset: 2224
    000008b5: 	leaq	0x100(%rsp), %r13
    000008bd: 	movq	0x8(%rsp), %rsi
    000008c2: 	leaq	0x110(%rsp), %rax
    000008ca: 	xorl	%edx, %edx
    000008cc: 	movq	%r13, %rdi
    000008cf: 	movq	%rax, 0x30(%rsp)
    000008d4: 	movq	%rax, 0x100(%rsp)
    000008dc: 	movq	$0x14, 0x48(%rsp)
    000008e5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2277
    000008ea: 	movq	0x48(%rsp), %rdx
    000008ef: 	movq	(%rsp), %rdi
    000008f3: 	movq	%rax, 0x100(%rsp)
    000008fb: 	movdqa	DATAat0xd390(%rip), %xmm0
    00000903: 	movq	%rdx, 0x110(%rsp)
    0000090b: 	movups	%xmm0, (%rax)
    0000090e: 	movq	0x100(%rsp), %rdx
    00000916: 	movl	$0x206e6f69, 0x10(%rax)
    0000091d: 	movq	0x48(%rsp), %rax
    00000922: 	movq	%rax, 0x108(%rsp)
    0000092a: 	movb	$0x0, (%rdx,%rax)
    0000092e: 	callq	strlen@PLT # Offset: 2350
    00000933: 	movq	%rax, %rdx
    00000936: 	movabsq	$0x3fffffffffffffff, %rax
    00000940: 	subq	0x108(%rsp), %rax
    00000948: 	cmpq	%rax, %rdx
    0000094b: 	ja	.Ltmp522 # Offset: 2379
    00000951: 	movq	(%rsp), %rsi
    00000955: 	movq	%r13, %rdi
    00000958: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2392
    0000095d: 	movq	0x40(%r12), %rax
    00000962: 	movq	0x30(%r12), %r14
    00000967: 	subq	$0x20, %rax
    0000096b: 	cmpq	%rax, %r14
    0000096e: 	je	.Ltmp523 # Offset: 2414
    00000974: 	leaq	0x10(%r14), %rdi
    00000978: 	movq	0x108(%rsp), %r13
    00000980: 	movq	%rdi, (%r14)
    00000983: 	movq	0x100(%rsp), %r15
    0000098b: 	movq	%r15, %rax
    0000098e: 	addq	%r13, %rax
    00000991: 	je	.Ltmp524 # Offset: 2449
    00000993: 	testq	%r15, %r15
    00000996: 	je	.Ltmp525 # Offset: 2454
.Ltmp524:
    0000099c: 	movq	%r13, 0x48(%rsp)
    000009a1: 	cmpq	$0xf, %r13
    000009a5: 	ja	.Ltmp526 # Offset: 2469
    000009ab: 	cmpq	$0x1, %r13
    000009af: 	jne	.Ltmp527 # Offset: 2479
    000009b5: 	movzbl	(%r15), %eax
    000009b9: 	movb	%al, 0x10(%r14)
.Ltmp562:
    000009bd: 	movq	%r13, 0x8(%r14)
    000009c1: 	movb	$0x0, (%rdi,%r13)
    000009c6: 	addq	$0x20, 0x30(%r12)
.Ltmp555:
    000009cc: 	callq	clock@PLT # Offset: 2508
    000009d1: 	movl	iterations(%rip), %r13d
    000009d8: 	xorl	%r14d, %r14d
    000009db: 	leaq	0x50(%rsp), %r15
    000009e0: 	movq	%rax, start_time(%rip)
    000009e7: 	testl	%r13d, %r13d
    000009ea: 	je	.Ltmp528 # Offset: 2538
    000009ec: 	nopl	(%rax) # Size: 4
.Ltmp529:
    000009f0: 	movq	%r15, %rdx
    000009f3: 	movq	%rbp, %rsi
    000009f6: 	movq	%r15, %rdi
    000009f9: 	addl	$0x1, %r14d
    000009fd: 	callq	_ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEfRT_RKNS0_10param_typeE # Offset: 2557
    00000a02: 	cvtss2sd	%xmm0, %xmm0
    00000a06: 	addsd	(%rbx), %xmm0
    00000a0a: 	movsd	%xmm0, (%rbx)
    00000a0e: 	cmpl	%r13d, %r14d
    00000a11: 	jne	.Ltmp529 # Offset: 2577
.Ltmp528:
    00000a13: 	movq	0x30(%r12), %rax
    00000a18: 	movq	0x48(%r12), %rdx
    00000a1d: 	cmpq	0x38(%r12), %rax
    00000a22: 	je	.Ltmp530 # Offset: 2594
.Ltmp554:
    00000a28: 	movq	-0x20(%rax), %r13
    00000a2c: 	callq	clock@PLT # Offset: 2604
    00000a31: 	pxor	%xmm0, %xmm0
    00000a35: 	movq	%rax, end_time(%rip)
    00000a3c: 	movq	%r13, %rdi
    00000a3f: 	subq	start_time(%rip), %rax
    00000a46: 	cvtsi2sd	%rax, %xmm0
    00000a4b: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000a53: 	callq	_Z13record_resultdPKc # Offset: 2643
    00000a58: 	leaq	0x120(%rsp), %r13
    00000a60: 	movq	0x8(%rsp), %rsi
    00000a65: 	leaq	0x130(%rsp), %rax
    00000a6d: 	xorl	%edx, %edx
    00000a6f: 	movq	%r13, %rdi
    00000a72: 	movq	%rax, 0x38(%rsp)
    00000a77: 	movq	%rax, 0x120(%rsp)
    00000a7f: 	movq	$0x17, 0x48(%rsp)
    00000a88: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2696
    00000a8d: 	movq	0x48(%rsp), %rdx
    00000a92: 	movq	(%rsp), %rdi
    00000a96: 	movq	%rax, 0x120(%rsp)
    00000a9e: 	movdqa	DATAat0xd3a0(%rip), %xmm0
    00000aa6: 	movq	%rdx, 0x130(%rsp)
    00000aae: 	movl	$0x6e6f, %edx
    00000ab3: 	movups	%xmm0, (%rax)
    00000ab6: 	movw	%dx, 0x14(%rax)
    00000aba: 	movq	0x120(%rsp), %rdx
    00000ac2: 	movl	$0x69747562, 0x10(%rax)
    00000ac9: 	movb	$0x20, 0x16(%rax)
    00000acd: 	movq	0x48(%rsp), %rax
    00000ad2: 	movq	%rax, 0x128(%rsp)
    00000ada: 	movb	$0x0, (%rdx,%rax)
    00000ade: 	callq	strlen@PLT # Offset: 2782
    00000ae3: 	movq	%rax, %rdx
    00000ae6: 	movabsq	$0x3fffffffffffffff, %rax
    00000af0: 	subq	0x128(%rsp), %rax
    00000af8: 	cmpq	%rax, %rdx
    00000afb: 	ja	.Ltmp531 # Offset: 2811
    00000b01: 	movq	(%rsp), %rsi
    00000b05: 	movq	%r13, %rdi
    00000b08: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2824
    00000b0d: 	movq	0x40(%r12), %rax
    00000b12: 	movq	0x30(%r12), %r15
    00000b17: 	subq	$0x20, %rax
    00000b1b: 	cmpq	%rax, %r15
    00000b1e: 	je	.Ltmp532 # Offset: 2846
    00000b24: 	leaq	0x10(%r15), %rdi
    00000b28: 	movq	0x128(%rsp), %r13
    00000b30: 	movq	%rdi, (%r15)
    00000b33: 	movq	0x120(%rsp), %r14
    00000b3b: 	movq	%r14, %rax
    00000b3e: 	addq	%r13, %rax
    00000b41: 	je	.Ltmp533 # Offset: 2881
    00000b43: 	testq	%r14, %r14
    00000b46: 	je	.Ltmp534 # Offset: 2886
.Ltmp533:
    00000b4c: 	movq	%r13, 0x48(%rsp)
    00000b51: 	cmpq	$0xf, %r13
    00000b55: 	ja	.Ltmp535 # Offset: 2901
    00000b5b: 	cmpq	$0x1, %r13
    00000b5f: 	jne	.Ltmp536 # Offset: 2911
    00000b65: 	movzbl	(%r14), %eax
    00000b69: 	movb	%al, 0x10(%r15)
.Ltmp567:
    00000b6d: 	movq	%r13, 0x8(%r15)
    00000b71: 	movb	$0x0, (%rdi,%r13)
    00000b76: 	addq	$0x20, 0x30(%r12)
.Ltmp553:
    00000b7c: 	callq	clock@PLT # Offset: 2940
    00000b81: 	movl	iterations(%rip), %r13d
    00000b88: 	movq	%rax, start_time(%rip)
    00000b8f: 	testl	%r13d, %r13d
    00000b92: 	je	.Ltmp537 # Offset: 2962
    00000b94: 	movss	0x60(%rsp), %xmm5
    00000b9a: 	movss	0x64(%rsp), %xmm6
    00000ba0: 	xorl	%r15d, %r15d
    00000ba3: 	leaq	0x68(%rsp), %r14
    00000ba8: 	movss	%xmm5, (%rsp)
    00000bad: 	movss	%xmm6, 0x8(%rsp)
    00000bb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp538:
    00000bb8: 	movq	%r14, %rdx
    00000bbb: 	movq	%rbp, %rsi
    00000bbe: 	movq	%r14, %rdi
    00000bc1: 	addl	$0x1, %r15d
    00000bc5: 	callq	_ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEEfRT_RKNS0_10param_typeE # Offset: 3013
    00000bca: 	mulss	0x8(%rsp), %xmm0
    00000bd0: 	addss	(%rsp), %xmm0
    00000bd5: 	callq	expf@PLT # Offset: 3029
    00000bda: 	cvtss2sd	%xmm0, %xmm0
    00000bde: 	addsd	(%rbx), %xmm0
    00000be2: 	movsd	%xmm0, (%rbx)
    00000be6: 	cmpl	%r13d, %r15d
    00000be9: 	jne	.Ltmp538 # Offset: 3049
.Ltmp537:
    00000beb: 	movq	0x30(%r12), %rax
    00000bf0: 	movq	0x48(%r12), %rdx
    00000bf5: 	cmpq	0x38(%r12), %rax
    00000bfa: 	je	.Ltmp539 # Offset: 3066
.Ltmp557:
    00000c00: 	movq	-0x20(%rax), %rbp
    00000c04: 	callq	clock@PLT # Offset: 3076
    00000c09: 	pxor	%xmm0, %xmm0
    00000c0d: 	movq	%rax, end_time(%rip)
    00000c14: 	movq	%rbp, %rdi
    00000c17: 	subq	start_time(%rip), %rax
    00000c1e: 	cvtsi2sd	%rax, %xmm0
    00000c23: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000c2b: 	callq	_Z13record_resultdPKc # Offset: 3115
    00000c30: 	movq	0x120(%rsp), %rdi
    00000c38: 	cmpq	0x38(%rsp), %rdi
    00000c3d: 	je	.Ltmp540 # Offset: 3133
    00000c3f: 	movq	0x130(%rsp), %rax
    00000c47: 	leaq	0x1(%rax), %rsi
    00000c4b: 	callq	_ZdlPvm@PLT # Offset: 3147
.Ltmp540:
    00000c50: 	movq	0x100(%rsp), %rdi
    00000c58: 	cmpq	0x30(%rsp), %rdi
    00000c5d: 	je	.Ltmp541 # Offset: 3165
    00000c5f: 	movq	0x110(%rsp), %rax
    00000c67: 	leaq	0x1(%rax), %rsi
    00000c6b: 	callq	_ZdlPvm@PLT # Offset: 3179
.Ltmp541:
    00000c70: 	movq	0xe0(%rsp), %rdi
    00000c78: 	cmpq	0x28(%rsp), %rdi
    00000c7d: 	je	.Ltmp542 # Offset: 3197
    00000c7f: 	movq	0xf0(%rsp), %rax
    00000c87: 	leaq	0x1(%rax), %rsi
    00000c8b: 	callq	_ZdlPvm@PLT # Offset: 3211
.Ltmp542:
    00000c90: 	movq	0xc0(%rsp), %rdi
    00000c98: 	cmpq	0x20(%rsp), %rdi
    00000c9d: 	je	.Ltmp543 # Offset: 3229
    00000c9f: 	movq	0xd0(%rsp), %rax
    00000ca7: 	leaq	0x1(%rax), %rsi
    00000cab: 	callq	_ZdlPvm@PLT # Offset: 3243
.Ltmp543:
    00000cb0: 	movq	0xa0(%rsp), %rdi
    00000cb8: 	cmpq	0x18(%rsp), %rdi
    00000cbd: 	je	.Ltmp544 # Offset: 3261
    00000cbf: 	movq	0xb0(%rsp), %rax
    00000cc7: 	leaq	0x1(%rax), %rsi
    00000ccb: 	callq	_ZdlPvm@PLT # Offset: 3275
.Ltmp544:
    00000cd0: 	movq	0x80(%rsp), %rdi
    00000cd8: 	cmpq	0x10(%rsp), %rdi
    00000cdd: 	je	.Ltmp545 # Offset: 3293
    00000cdf: 	movq	0x90(%rsp), %rax
    00000ce7: 	leaq	0x1(%rax), %rsi
    00000ceb: 	callq	_ZdlPvm@PLT # Offset: 3307
.Ltmp545:
    00000cf0: 	movq	0x148(%rsp), %rax
    00000cf8: 	subq	%fs:0x28, %rax
    00000d01: 	jne	.Ltmp546 # Offset: 3329
    00000d07: 	addq	$0x158, %rsp
    00000d0e: 	popq	%rbx
    00000d0f: 	popq	%rbp
    00000d10: 	popq	%r12
    00000d12: 	popq	%r13
    00000d14: 	popq	%r14
    00000d16: 	popq	%r15
    00000d18: 	retq # Offset: 3352
    00000d19: 	nopl	(%rax) # Size: 7
.Ltmp518:
    00000d20: 	movsd	DATAat0xd308(%rip), %xmm0
    00000d28: 	jmp	.Ltmp547 # Offset: 3368
    00000d2d: 	nopl	(%rax) # Size: 3
.Ltmp477:
    00000d30: 	movq	%r14, %rsi
    00000d33: 	movq	%r12, %rdi
    00000d36: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3382
    00000d3b: 	jmp	.Ltmp548 # Offset: 3387
.Ltmp487:
    00000d40: 	movq	-0x8(%rdx), %rax
    00000d44: 	addq	$0x200, %rax
    00000d4a: 	jmp	.Ltmp549 # Offset: 3402
    00000d4f: 	nop # Size: 1
.Ltmp489:
    00000d50: 	movq	%r14, %rsi
    00000d53: 	movq	%r12, %rdi
    00000d56: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3414
    00000d5b: 	jmp	.Ltmp550 # Offset: 3419
.Ltmp511:
    00000d60: 	movq	%r13, %rsi
    00000d63: 	movq	%r12, %rdi
    00000d66: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3430
    00000d6b: 	jmp	.Ltmp551 # Offset: 3435
.Ltmp509:
    00000d70: 	movq	-0x8(%rdx), %rax
    00000d74: 	addq	$0x200, %rax
    00000d7a: 	jmp	.Ltmp552 # Offset: 3450
    00000d7f: 	nop # Size: 1
.Ltmp532:
    00000d80: 	movq	%r13, %rsi
    00000d83: 	movq	%r12, %rdi
    00000d86: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3462
    00000d8b: 	jmp	.Ltmp553 # Offset: 3467
.Ltmp530:
    00000d90: 	movq	-0x8(%rdx), %rax
    00000d94: 	addq	$0x200, %rax
    00000d9a: 	jmp	.Ltmp554 # Offset: 3482
    00000d9f: 	nop # Size: 1
.Ltmp523:
    00000da0: 	movq	%r13, %rsi
    00000da3: 	movq	%r12, %rdi
    00000da6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3494
    00000dab: 	jmp	.Ltmp555 # Offset: 3499
.Ltmp521:
    00000db0: 	movq	-0x8(%rdx), %rax
    00000db4: 	addq	$0x200, %rax
    00000dba: 	jmp	.Ltmp556 # Offset: 3514
    00000dbf: 	nop # Size: 1
.Ltmp539:
    00000dc0: 	movq	-0x8(%rdx), %rax
    00000dc4: 	addq	$0x200, %rax
    00000dca: 	jmp	.Ltmp557 # Offset: 3530
    00000dcf: 	nop # Size: 1
.Ltmp498:
    00000dd0: 	movq	%r13, %rsi
    00000dd3: 	movq	%r12, %rdi
    00000dd6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3542
    00000ddb: 	jmp	.Ltmp558 # Offset: 3547
.Ltmp496:
    00000de0: 	movq	-0x8(%rdx), %rax
    00000de4: 	addq	$0x200, %rax
    00000dea: 	jmp	.Ltmp559 # Offset: 3562
    00000def: 	nop # Size: 1
.Ltmp493:
    00000df0: 	testq	%r14, %r14
    00000df3: 	je	.Ltmp560 # Offset: 3571
    00000df9: 	jmp	.Ltmp561 # Offset: 3577
    00000dfe: 	nop # Size: 2
.Ltmp527:
    00000e00: 	testq	%r13, %r13
    00000e03: 	je	.Ltmp562 # Offset: 3587
    00000e09: 	jmp	.Ltmp563 # Offset: 3593
    00000e0e: 	nop # Size: 2
.Ltmp481:
    00000e10: 	testq	%r14, %r14
    00000e13: 	je	.Ltmp508 # Offset: 3603
    00000e19: 	jmp	.Ltmp564 # Offset: 3609
    00000e1e: 	nop # Size: 2
.Ltmp515:
    00000e20: 	testq	%r13, %r13
    00000e23: 	je	.Ltmp565 # Offset: 3619
    00000e29: 	jmp	.Ltmp566 # Offset: 3625
    00000e2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp536:
    00000e30: 	testq	%r13, %r13
    00000e33: 	je	.Ltmp567 # Offset: 3635
    00000e39: 	jmp	.Ltmp568 # Offset: 3641
    00000e3e: 	nop # Size: 2
.Ltmp502:
    00000e40: 	testq	%r13, %r13
    00000e43: 	je	.Ltmp569 # Offset: 3651
    00000e49: 	jmp	.Ltmp570 # Offset: 3657
    00000e4e: 	nop # Size: 2
.Ltmp514:
    00000e50: 	movq	0x8(%rsp), %rsi
    00000e55: 	xorl	%edx, %edx
    00000e57: 	movq	%r14, %rdi
    00000e5a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3674
    00000e5f: 	movq	%rax, (%r14)
    00000e62: 	movq	%rax, %rdi
    00000e65: 	movq	0x48(%rsp), %rax
    00000e6a: 	movq	%rax, 0x10(%r14)
.Ltmp566:
    00000e6e: 	movq	%r13, %rdx
    00000e71: 	movq	%r15, %rsi
    00000e74: 	callq	memcpy@PLT # Offset: 3700
    00000e79: 	movq	0x48(%rsp), %r13
    00000e7e: 	movq	(%r14), %rdi
    00000e81: 	jmp	.Ltmp565 # Offset: 3713
    00000e86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp526:
    00000e90: 	movq	0x8(%rsp), %rsi
    00000e95: 	xorl	%edx, %edx
    00000e97: 	movq	%r14, %rdi
    00000e9a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3738
    00000e9f: 	movq	%rax, (%r14)
    00000ea2: 	movq	%rax, %rdi
    00000ea5: 	movq	0x48(%rsp), %rax
    00000eaa: 	movq	%rax, 0x10(%r14)
.Ltmp563:
    00000eae: 	movq	%r13, %rdx
    00000eb1: 	movq	%r15, %rsi
    00000eb4: 	callq	memcpy@PLT # Offset: 3764
    00000eb9: 	movq	0x48(%rsp), %r13
    00000ebe: 	movq	(%r14), %rdi
    00000ec1: 	jmp	.Ltmp562 # Offset: 3777
    00000ec6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp501:
    00000ed0: 	movq	0x8(%rsp), %rsi
    00000ed5: 	xorl	%edx, %edx
    00000ed7: 	movq	%r14, %rdi
    00000eda: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3802
    00000edf: 	movq	%rax, (%r14)
    00000ee2: 	movq	%rax, %rdi
    00000ee5: 	movq	0x48(%rsp), %rax
    00000eea: 	movq	%rax, 0x10(%r14)
.Ltmp570:
    00000eee: 	movq	%r13, %rdx
    00000ef1: 	movq	%r15, %rsi
    00000ef4: 	callq	memcpy@PLT # Offset: 3828
    00000ef9: 	movq	0x48(%rsp), %r13
    00000efe: 	movq	(%r14), %rdi
    00000f01: 	jmp	.Ltmp569 # Offset: 3841
    00000f06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp535:
    00000f10: 	movq	0x8(%rsp), %rsi
    00000f15: 	xorl	%edx, %edx
    00000f17: 	movq	%r15, %rdi
    00000f1a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3866
    00000f1f: 	movq	%rax, (%r15)
    00000f22: 	movq	%rax, %rdi
    00000f25: 	movq	0x48(%rsp), %rax
    00000f2a: 	movq	%rax, 0x10(%r15)
.Ltmp568:
    00000f2e: 	movq	%r13, %rdx
    00000f31: 	movq	%r14, %rsi
    00000f34: 	callq	memcpy@PLT # Offset: 3892
    00000f39: 	movq	0x48(%rsp), %r13
    00000f3e: 	movq	(%r15), %rdi
    00000f41: 	jmp	.Ltmp567 # Offset: 3905
    00000f46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp492:
    00000f50: 	movq	0x8(%rsp), %rsi
    00000f55: 	xorl	%edx, %edx
    00000f57: 	movq	%r15, %rdi
    00000f5a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3930
    00000f5f: 	movq	%rax, (%r15)
    00000f62: 	movq	%rax, %rdi
    00000f65: 	movq	0x48(%rsp), %rax
    00000f6a: 	movq	%rax, 0x10(%r15)
.Ltmp561:
    00000f6e: 	movq	0x20(%rsp), %rsi
    00000f73: 	movq	%r14, %rdx
    00000f76: 	callq	memcpy@PLT # Offset: 3958
    00000f7b: 	movq	0x48(%rsp), %r14
    00000f80: 	movq	(%r15), %rdi
    00000f83: 	jmp	.Ltmp560 # Offset: 3971
.Ltmp488:
    00000f88: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000f8f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3983
.Ltmp491:
    00000f94: 	leaq	DATAat0xd280(%rip), %rdi
    00000f9b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3995
.Ltmp497:
    00000fa0: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000fa7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4007
.Ltmp500:
    00000fac: 	leaq	DATAat0xd280(%rip), %rdi
    00000fb3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4019
.Ltmp479:
    00000fb8: 	leaq	DATAat0xd280(%rip), %rdi
    00000fbf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4031
.Ltmp510:
    00000fc4: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000fcb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4043
.Ltmp513:
    00000fd0: 	leaq	DATAat0xd280(%rip), %rdi
    00000fd7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4055
.Ltmp522:
    00000fdc: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000fe3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4067
.Ltmp525:
    00000fe8: 	leaq	DATAat0xd280(%rip), %rdi
    00000fef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4079
.Ltmp531:
    00000ff4: 	leaq	DATAat0xd2aa(%rip), %rdi
    00000ffb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4091
.Ltmp534:
    00001000: 	leaq	DATAat0xd280(%rip), %rdi
    00001007: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4103
.Ltmp546:
    0000100c: 	callq	__stack_chk_fail@PLT # Offset: 4108
.Ltmp476:
    00001011: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001018: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4120
    0000101d: 	endbr64
    00001021: 	movq	%rax, %rbp
    00001024: 	jmp	.Ltmp571 # Offset: 4132
    00001026: 	endbr64
    0000102a: 	movq	%rax, %rbp
    0000102d: 	jmp	.Ltmp572 # Offset: 4141
.Ltmp577:
    0000102f: 	movq	0x120(%rsp), %rdi
    00001037: 	cmpq	0x38(%rsp), %rdi
    0000103c: 	je	.Ltmp572 # Offset: 4156
    0000103e: 	movq	0x130(%rsp), %rax
    00001046: 	leaq	0x1(%rax), %rsi
    0000104a: 	callq	_ZdlPvm@PLT # Offset: 4170
.Ltmp572:
    0000104f: 	movq	0x100(%rsp), %rdi
    00001057: 	cmpq	0x30(%rsp), %rdi
    0000105c: 	je	.Ltmp571 # Offset: 4188
    0000105e: 	movq	0x110(%rsp), %rax
    00001066: 	leaq	0x1(%rax), %rsi
    0000106a: 	callq	_ZdlPvm@PLT # Offset: 4202
.Ltmp571:
    0000106f: 	movq	0xe0(%rsp), %rdi
    00001077: 	cmpq	0x28(%rsp), %rdi
    0000107c: 	je	.Ltmp573 # Offset: 4220
    0000107e: 	movq	0xf0(%rsp), %rax
    00001086: 	leaq	0x1(%rax), %rsi
    0000108a: 	callq	_ZdlPvm@PLT # Offset: 4234
.Ltmp573:
    0000108f: 	movq	0xc0(%rsp), %rdi
    00001097: 	cmpq	0x20(%rsp), %rdi
    0000109c: 	je	.Ltmp574 # Offset: 4252
    0000109e: 	movq	0xd0(%rsp), %rax
    000010a6: 	leaq	0x1(%rax), %rsi
    000010aa: 	callq	_ZdlPvm@PLT # Offset: 4266
.Ltmp574:
    000010af: 	movq	0xa0(%rsp), %rdi
    000010b7: 	cmpq	0x18(%rsp), %rdi
    000010bc: 	je	.Ltmp575 # Offset: 4284
    000010be: 	movq	0xb0(%rsp), %rax
    000010c6: 	leaq	0x1(%rax), %rsi
    000010ca: 	callq	_ZdlPvm@PLT # Offset: 4298
.Ltmp575:
    000010cf: 	movq	0x80(%rsp), %rdi
    000010d7: 	cmpq	0x10(%rsp), %rdi
    000010dc: 	je	.Ltmp576 # Offset: 4316
    000010de: 	movq	0x90(%rsp), %rax
    000010e6: 	leaq	0x1(%rax), %rsi
    000010ea: 	callq	_ZdlPvm@PLT # Offset: 4330
.Ltmp576:
    000010ef: 	movq	%rbp, %rdi
    000010f2: 	callq	_Unwind_Resume@PLT # Offset: 4338
    000010f7: 	endbr64
    000010fb: 	movq	%rax, %rbp
    000010fe: 	jmp	.Ltmp577 # Offset: 4350
    00001103: 	endbr64
    00001107: 	movq	%rax, %rbp
    0000110a: 	jmp	.Ltmp575 # Offset: 4362
    0000110c: 	endbr64
    00001110: 	movq	%rax, %rbp
    00001113: 	jmp	.Ltmp574 # Offset: 4371
    00001115: 	endbr64
    00001119: 	movq	%rax, %rbp
    0000111c: 	jmp	.Ltmp573 # Offset: 4380
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_one_generatorISt20discard_block_engineISt26subtract_with_carry_engineImLm24ELm10ELm24EELm223ELm23EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISG_EE"

Binary Function "_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x9510
  Size        : 0x13f
  MaxSize     : 0x140
  Offset      : 0x9510
  Section     : .text
  Orc Section : .local.text._ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	movq	0x68(%rdi), %rdx
    00000008: 	movq	0x70(%rdi), %r11
    0000000c: 	movq	0x60(%rdi), %rsi
    00000010: 	leaq	-0x5(%rdx), %rcx
    00000014: 	leaq	0x1(%rdx), %r9
    00000018: 	movq	%rcx, %rax
    0000001b: 	movq	%r9, %r10
    0000001e: 	cmpq	$0xa, %r11
    00000022: 	ja	.Ltmp578 # Offset: 34
    00000024: 	addq	$0x1, %r11
.Ltmp588:
    00000028: 	leaq	0x7(%rdx), %rcx
    0000002c: 	testq	%rax, %rax
    0000002f: 	movq	%r11, 0x70(%rdi)
    00000033: 	cmovsq	%rcx, %rax
    00000037: 	movq	(%rdi,%rdx,8), %rcx
    0000003b: 	movq	(%rdi,%rax,8), %rax
    0000003f: 	addq	%rsi, %rcx
    00000042: 	cmpq	%rcx, %rax
    00000045: 	jb	.Ltmp579 # Offset: 69
    0000004b: 	subq	%rcx, %rax
    0000004e: 	xorl	%ecx, %ecx
.Ltmp589:
    00000050: 	movq	%rcx, 0x60(%rdi)
    00000054: 	movq	%rax, (%rdi,%rdx,8)
    00000058: 	xorl	%edx, %edx
    0000005a: 	cmpq	$0xc, %r10
    0000005e: 	cmovaeq	%rdx, %r10
    00000062: 	movq	%r10, 0x68(%rdi)
    00000066: 	retq # Offset: 102
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp578:
    00000070: 	movl	$0x185, %r8d
    00000076: 	subq	%r11, %r8
    00000079: 	je	.Ltmp580 # Offset: 121
    0000007f: 	movabsq	$0x1000000000000, %r11
    00000089: 	jmp	.Ltmp581 # Offset: 137
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp584:
    00000090: 	subq	%rsi, %rax
    00000093: 	xorl	%esi, %esi
    00000095: 	movq	%rax, (%rdi,%rdx,8)
    00000099: 	cmpq	$0xb, %r9
    0000009d: 	ja	.Ltmp582 # Offset: 157
.Ltmp585:
    0000009f: 	leaq	-0x4(%rdx), %rax
    000000a3: 	leaq	0x2(%rdx), %r10
    000000a7: 	subq	$0x1, %r8
    000000ab: 	je	.Ltmp583 # Offset: 171
    000000ad: 	movq	%r9, %rdx
.Ltmp587:
    000000b0: 	leaq	-0x5(%rdx), %rcx
    000000b4: 	leaq	0x1(%rdx), %r9
.Ltmp581:
    000000b8: 	testq	%rcx, %rcx
    000000bb: 	leaq	0x7(%rdx), %rax
    000000bf: 	cmovnsq	%rcx, %rax
    000000c3: 	addq	(%rdi,%rdx,8), %rsi
    000000c7: 	movq	%rsi, %rcx
    000000ca: 	movq	(%rdi,%rax,8), %rax
    000000ce: 	cmpq	%rsi, %rax
    000000d1: 	jae	.Ltmp584 # Offset: 209
    000000d3: 	movq	%r11, %rsi
    000000d6: 	subq	%rcx, %rsi
    000000d9: 	addq	%rsi, %rax
    000000dc: 	movl	$0x1, %esi
    000000e1: 	movq	%rax, (%rdi,%rdx,8)
    000000e5: 	cmpq	$0xb, %r9
    000000e9: 	jbe	.Ltmp585 # Offset: 233
.Ltmp582:
    000000eb: 	subq	$0x1, %r8
    000000ef: 	je	.Ltmp586 # Offset: 239
    000000f1: 	xorl	%edx, %edx
    000000f3: 	jmp	.Ltmp587 # Offset: 243
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp583:
    000000f8: 	movq	%r9, %r8
.Ltmp590:
    000000fb: 	movq	%r8, %rdx
.Ltmp580:
    000000fe: 	movl	$0x1, %r11d
    00000104: 	jmp	.Ltmp588 # Offset: 260
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp579:
    00000110: 	movabsq	$0x1000000000000, %rsi
    0000011a: 	subq	%rcx, %rsi
    0000011d: 	movl	$0x1, %ecx
    00000122: 	addq	%rsi, %rax
    00000125: 	jmp	.Ltmp589 # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp586:
    00000130: 	movl	$0x1, %r10d
    00000136: 	movq	$-0x5, %rax
    0000013d: 	jmp	.Ltmp590 # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv"

Binary Function "_ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEiRT_RKNS0_10param_typeE.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEiRT_RKNS0_10param_typeE.isra.0/1
                _ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEiRT_RKNS0_10param_typeE.isra.0/random_numbers.cpp/1
  Number      : 32
  State       : disassembled
  Address     : 0x9650
  Size        : 0x1f8
  MaxSize     : 0x200
  Offset      : 0x9650
  Section     : .text
  Orc Section : .local.text._ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEiRT_RKNS0_10param_typeE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	pushq	%r13
    00000002: 	movslq	%esi, %rax
    00000005: 	movslq	%edx, %r13
    00000008: 	pushq	%r12
    0000000a: 	subq	%rax, %r13
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rax, %rbp
    00000011: 	movabsq	$0xfffffffffffe, %rax
    0000001b: 	pushq	%rbx
    0000001c: 	movq	%rdi, %rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	cmpq	%rax, %r13
    00000026: 	ja	.Ltmp591 # Offset: 38
    0000002c: 	leaq	0x1(%r13), %r9
    00000030: 	addq	$0x1, %rax
    00000034: 	xorl	%edx, %edx
    00000036: 	movq	0x70(%rdi), %rcx
    0000003a: 	divq	%r9
    0000003d: 	movq	0x60(%rdi), %r13
    00000041: 	movq	0x68(%rdi), %rdx
    00000045: 	movabsq	$0x1000000000000, %r11
    0000004f: 	movl	$0x185, %r12d
    00000055: 	imulq	%rax, %r9
    00000059: 	movq	%rax, %r10
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp596:
    00000060: 	leaq	-0x5(%rdx), %rsi
    00000064: 	leaq	0x1(%rdx), %r8
    00000068: 	movq	%rsi, %rax
    0000006b: 	cmpq	$0xa, %rcx
    0000006f: 	ja	.Ltmp592 # Offset: 111
    00000075: 	movq	%rdx, %rdi
    00000078: 	addq	$0x1, %rcx
    0000007c: 	movq	%r8, %rdx
.Ltmp606:
    0000007f: 	leaq	0x7(%rdi), %rsi
    00000083: 	testq	%rax, %rax
    00000086: 	movq	%rcx, 0x70(%rbx)
    0000008a: 	cmovsq	%rsi, %rax
    0000008e: 	movq	(%rbx,%rdi,8), %rsi
    00000092: 	movq	(%rbx,%rax,8), %rax
    00000096: 	addq	%r13, %rsi
    00000099: 	cmpq	%rsi, %rax
    0000009c: 	jb	.Ltmp593 # Offset: 156
    000000a2: 	subq	%rsi, %rax
    000000a5: 	xorl	%r13d, %r13d
.Ltmp597:
    000000a8: 	movq	%r13, 0x60(%rbx)
    000000ac: 	movq	%rax, (%rbx,%rdi,8)
    000000b0: 	cmpq	$0xb, %rdx
    000000b4: 	jbe	.Ltmp594 # Offset: 180
    000000b6: 	movq	$0x0, 0x68(%rbx)
    000000be: 	cmpq	%rax, %r9
    000000c1: 	ja	.Ltmp595 # Offset: 193
    000000c3: 	xorl	%edx, %edx
    000000c5: 	jmp	.Ltmp596 # Offset: 197
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp591:
    000000d0: 	movl	$0xffff, %edx
    000000d5: 	xorl	%esi, %esi
    000000d7: 	movq	%rbx, %rdi
    000000da: 	callq	"_ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEiRT_RKNS0_10param_typeE.isra.0/1" # Offset: 218
    000000df: 	movq	%rbx, %rdi
    000000e2: 	movl	%eax, %r12d
    000000e5: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv # Offset: 229
    000000ea: 	xorl	%edx, %edx
    000000ec: 	movq	%rax, %r8
    000000ef: 	movq	%r12, %rax
    000000f2: 	shlq	$0x30, %rax
    000000f6: 	addq	%r8, %rax
    000000f9: 	setb	%dl
    000000fc: 	cmpq	%rax, %r13
    000000ff: 	jb	.Ltmp591 # Offset: 255
    00000101: 	testq	%rdx, %rdx
    00000104: 	jne	.Ltmp591 # Offset: 260
    00000106: 	addq	$0x8, %rsp
    0000010a: 	addl	%ebp, %eax
    0000010c: 	popq	%rbx
    0000010d: 	popq	%rbp
    0000010e: 	popq	%r12
    00000110: 	popq	%r13
    00000112: 	retq # Offset: 274
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp594:
    00000118: 	movq	%rdx, 0x68(%rbx)
    0000011c: 	cmpq	%rax, %r9
    0000011f: 	jbe	.Ltmp596 # Offset: 287
.Ltmp595:
    00000125: 	xorl	%edx, %edx
    00000127: 	addq	$0x8, %rsp
    0000012b: 	divq	%r10
    0000012e: 	popq	%rbx
    0000012f: 	addl	%ebp, %eax
    00000131: 	popq	%rbp
    00000132: 	popq	%r12
    00000134: 	popq	%r13
    00000136: 	retq # Offset: 310
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp593:
    00000140: 	movq	%r11, %r8
    00000143: 	movl	$0x1, %r13d
    00000149: 	subq	%rsi, %r8
    0000014c: 	addq	%r8, %rax
    0000014f: 	jmp	.Ltmp597 # Offset: 335
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp592:
    00000158: 	movq	%r12, %rdi
    0000015b: 	subq	%rcx, %rdi
    0000015e: 	jne	.Ltmp598 # Offset: 350
    00000160: 	jmp	.Ltmp599 # Offset: 352
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp602:
    00000168: 	subq	%rsi, %rcx
    0000016b: 	xorl	%r13d, %r13d
    0000016e: 	movq	%rcx, (%rbx,%rdx,8)
    00000172: 	cmpq	$0xb, %r8
    00000176: 	ja	.Ltmp600 # Offset: 374
.Ltmp603:
    00000178: 	leaq	-0x4(%rdx), %rax
    0000017c: 	addq	$0x2, %rdx
    00000180: 	subq	$0x1, %rdi
    00000184: 	je	.Ltmp601 # Offset: 388
    00000186: 	movq	%r8, %rdx
.Ltmp605:
    00000189: 	leaq	-0x5(%rdx), %rsi
    0000018d: 	leaq	0x1(%rdx), %r8
.Ltmp598:
    00000191: 	testq	%rsi, %rsi
    00000194: 	leaq	0x7(%rdx), %rcx
    00000198: 	cmovnsq	%rsi, %rcx
    0000019c: 	movq	(%rbx,%rdx,8), %rsi
    000001a0: 	movq	(%rbx,%rcx,8), %rcx
    000001a4: 	addq	%r13, %rsi
    000001a7: 	cmpq	%rcx, %rsi
    000001aa: 	jbe	.Ltmp602 # Offset: 426
    000001ac: 	movq	%r11, %rax
    000001af: 	movl	$0x1, %r13d
    000001b5: 	subq	%rsi, %rax
    000001b8: 	addq	%rax, %rcx
    000001bb: 	movq	%rcx, (%rbx,%rdx,8)
    000001bf: 	cmpq	$0xb, %r8
    000001c3: 	jbe	.Ltmp603 # Offset: 451
.Ltmp600:
    000001c5: 	subq	$0x1, %rdi
    000001c9: 	je	.Ltmp604 # Offset: 457
    000001cb: 	xorl	%edx, %edx
    000001cd: 	jmp	.Ltmp605 # Offset: 461
    000001cf: 	nop # Size: 1
.Ltmp601:
    000001d0: 	movq	%r8, %rdi
.Ltmp607:
    000001d3: 	movl	$0x1, %ecx
    000001d8: 	jmp	.Ltmp606 # Offset: 472
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp604:
    000001e0: 	movl	$0x1, %edx
    000001e5: 	movq	$-0x5, %rax
    000001ec: 	jmp	.Ltmp607 # Offset: 492
    000001ee: 	nop # Size: 2
.Ltmp599:
    000001f0: 	movq	%rdx, %rdi
    000001f3: 	movq	%r8, %rdx
    000001f6: 	jmp	.Ltmp607 # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEiRT_RKNS0_10param_typeE.isra.0/1(*2)"

Binary Function "_ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEfRT_RKNS0_10param_typeE" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x9850
  Size        : 0x275
  MaxSize     : 0x280
  Offset      : 0x9850
  Section     : .text
  Orc Section : .local.text._ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEfRT_RKNS0_10param_typeE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdx, %rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %rbx
    00000011: 	subq	$0x10, %rsp
    00000015: 	cmpb	$0x0, 0xc(%rdi)
    00000019: 	je	.Ltmp608 # Offset: 25
    0000001b: 	movb	$0x0, 0xc(%rdi)
    0000001f: 	movss	0x8(%rdi), %xmm0
.Ltmp618:
    00000024: 	mulss	0x4(%rbp), %xmm0
    00000029: 	addss	(%rbp), %xmm0
    0000002e: 	addq	$0x10, %rsp
    00000032: 	popq	%rbx
    00000033: 	popq	%rbp
    00000034: 	popq	%r12
    00000036: 	retq # Offset: 54
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp614:
    00000040: 	pxor	%xmm6, %xmm6
    00000044: 	ucomiss	%xmm6, %xmm3
    00000047: 	jp	.Ltmp609 # Offset: 71
    0000004d: 	jne	.Ltmp609 # Offset: 77
.Ltmp608:
    00000053: 	movq	%r12, %rdi
    00000056: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv # Offset: 86
    0000005b: 	testq	%rax, %rax
    0000005e: 	js	.Ltmp610 # Offset: 94
.Ltmp615:
    00000064: 	pxor	%xmm0, %xmm0
    00000068: 	cvtsi2ss	%rax, %xmm0
.Ltmp616:
    0000006d: 	pxor	%xmm4, %xmm4
    00000071: 	addss	%xmm4, %xmm0
    00000075: 	mulss	DATAat0xd348(%rip), %xmm0
    0000007d: 	comiss	DATAat0xd35c(%rip), %xmm0
    00000084: 	jae	.Ltmp611 # Offset: 132
    0000008a: 	addss	%xmm0, %xmm0
    0000008e: 	movq	%r12, %rdi
    00000091: 	movaps	%xmm0, %xmm1
    00000094: 	subss	DATAat0xd35c(%rip), %xmm1
    0000009c: 	movss	%xmm1, 0x4(%rsp)
    000000a2: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv # Offset: 162
    000000a7: 	movss	0x4(%rsp), %xmm1
    000000ad: 	testq	%rax, %rax
    000000b0: 	js	.Ltmp612 # Offset: 176
    000000b6: 	pxor	%xmm0, %xmm0
    000000ba: 	cvtsi2ss	%rax, %xmm0
.Ltmp619:
    000000bf: 	pxor	%xmm5, %xmm5
    000000c3: 	movaps	%xmm1, %xmm3
    000000c6: 	addss	%xmm5, %xmm0
    000000ca: 	mulss	DATAat0xd348(%rip), %xmm0
    000000d2: 	mulss	%xmm1, %xmm3
    000000d6: 	comiss	DATAat0xd35c(%rip), %xmm0
    000000dd: 	jae	.Ltmp613 # Offset: 221
    000000e3: 	addss	%xmm0, %xmm0
    000000e7: 	movaps	%xmm0, %xmm2
    000000ea: 	subss	DATAat0xd35c(%rip), %xmm2
    000000f2: 	movaps	%xmm2, %xmm0
    000000f5: 	mulss	%xmm2, %xmm0
.Ltmp621:
    000000f9: 	addss	%xmm0, %xmm3
    000000fd: 	comiss	DATAat0xd35c(%rip), %xmm3
    00000104: 	jbe	.Ltmp614 # Offset: 260
    0000010a: 	movq	%r12, %rdi
    0000010d: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv # Offset: 269
    00000112: 	testq	%rax, %rax
    00000115: 	jns	.Ltmp615 # Offset: 277
.Ltmp610:
    0000011b: 	movq	%rax, %rdx
    0000011e: 	andl	$0x1, %eax
    00000121: 	pxor	%xmm0, %xmm0
    00000125: 	shrq	%rdx
    00000128: 	orq	%rax, %rdx
    0000012b: 	cvtsi2ss	%rdx, %xmm0
    00000130: 	addss	%xmm0, %xmm0
    00000134: 	jmp	.Ltmp616 # Offset: 308
    00000139: 	nopl	(%rax) # Size: 7
.Ltmp609:
    00000140: 	movaps	%xmm3, %xmm0
    00000143: 	movss	%xmm2, 0xc(%rsp)
    00000149: 	movss	%xmm1, 0x8(%rsp)
    0000014f: 	movss	%xmm3, 0x4(%rsp)
    00000155: 	callq	logf@PLT # Offset: 341
    0000015a: 	movss	0x4(%rsp), %xmm3
    00000160: 	pxor	%xmm7, %xmm7
    00000164: 	movss	0x8(%rsp), %xmm1
    0000016a: 	mulss	DATAat0xd300(%rip), %xmm0
    00000172: 	movss	0xc(%rsp), %xmm2
    00000178: 	divss	%xmm3, %xmm0
    0000017c: 	ucomiss	%xmm0, %xmm7
    0000017f: 	ja	.Ltmp617 # Offset: 383
    00000185: 	sqrtss	%xmm0, %xmm0
.Ltmp623:
    00000189: 	mulss	%xmm0, %xmm1
    0000018d: 	movb	$0x1, 0xc(%rbx)
    00000191: 	mulss	%xmm2, %xmm0
    00000195: 	movss	%xmm1, 0x8(%rbx)
    0000019a: 	jmp	.Ltmp618 # Offset: 410
    0000019f: 	nop # Size: 1
.Ltmp612:
    000001a0: 	movq	%rax, %rdx
    000001a3: 	andl	$0x1, %eax
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	shrq	%rdx
    000001ad: 	orq	%rax, %rdx
    000001b0: 	cvtsi2ss	%rdx, %xmm0
    000001b5: 	addss	%xmm0, %xmm0
    000001b9: 	jmp	.Ltmp619 # Offset: 441
    000001be: 	nop # Size: 2
.Ltmp611:
    000001c0: 	movq	%r12, %rdi
    000001c3: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv # Offset: 451
    000001c8: 	testq	%rax, %rax
    000001cb: 	js	.Ltmp620 # Offset: 459
    000001cd: 	pxor	%xmm2, %xmm2
    000001d1: 	cvtsi2ss	%rax, %xmm2
.Ltmp622:
    000001d6: 	pxor	%xmm7, %xmm7
    000001da: 	addss	%xmm7, %xmm2
    000001de: 	mulss	DATAat0xd348(%rip), %xmm2
    000001e6: 	comiss	DATAat0xd35c(%rip), %xmm2
    000001ed: 	jae	.Ltmp608 # Offset: 493
    000001f3: 	addss	%xmm2, %xmm2
    000001f7: 	subss	DATAat0xd35c(%rip), %xmm2
    000001ff: 	movss	DATAat0xd330(%rip), %xmm3
    00000207: 	movss	DATAat0xd334(%rip), %xmm1
    0000020f: 	movaps	%xmm2, %xmm0
    00000212: 	mulss	%xmm2, %xmm0
    00000216: 	jmp	.Ltmp621 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp613:
    00000220: 	movss	DATAat0xd330(%rip), %xmm0
    00000228: 	movss	DATAat0xd334(%rip), %xmm2
    00000230: 	jmp	.Ltmp621 # Offset: 560
    00000235: 	nopl	(%rax) # Size: 3
.Ltmp620:
    00000238: 	movq	%rax, %rdx
    0000023b: 	andl	$0x1, %eax
    0000023e: 	pxor	%xmm2, %xmm2
    00000242: 	shrq	%rdx
    00000245: 	orq	%rax, %rdx
    00000248: 	cvtsi2ss	%rdx, %xmm2
    0000024d: 	addss	%xmm2, %xmm2
    00000251: 	jmp	.Ltmp622 # Offset: 593
.Ltmp617:
    00000253: 	movss	%xmm2, 0x8(%rsp)
    00000259: 	movss	%xmm1, 0x4(%rsp)
    0000025f: 	callq	sqrtf@PLT # Offset: 607
    00000264: 	movss	0x8(%rsp), %xmm2
    0000026a: 	movss	0x4(%rsp), %xmm1
    00000270: 	jmp	.Ltmp623 # Offset: 624
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEfRT_RKNS0_10param_typeE"

Binary Function "_Z18test_one_generatorISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISG_EE" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x9ad0
  Size        : 0x1789
  MaxSize     : 0x1790
  Offset      : 0x9ad0
  Section     : .text
  Orc Section : .local.text._Z18test_one_generatorISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISG_EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	movq	%rsi, %rdi
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x1a8, %rsp
    0000001b: 	movaps	DATAat0xd350(%rip), %xmm0
    00000022: 	movq	%rdx, 0x80(%rsp)
    0000002a: 	movq	%rsi, 0x8(%rsp)
    0000002f: 	movq	%rcx, 0x60(%rsp)
    00000034: 	movq	%r8, (%rsp)
    00000038: 	movq	%fs:0x28, %rax
    00000041: 	movq	%rax, 0x198(%rsp)
    00000049: 	xorl	%eax, %eax
    0000004b: 	movq	DATAat0xd2f8(%rip), %rax
    00000052: 	movl	$0x0, 0xa8(%rsp)
    0000005d: 	movb	$0x0, 0xac(%rsp)
    00000065: 	movq	%rax, 0xa0(%rsp)
    0000006d: 	leaq	0xe0(%rsp), %rax
    00000075: 	movq	$0x0, 0xc0(%rsp)
    00000081: 	movq	%rax, 0x78(%rsp)
    00000086: 	movq	%rax, 0xd0(%rsp)
    0000008e: 	movl	$0x64656573, 0xe0(%rsp)
    00000099: 	movb	$0x20, 0xe4(%rsp)
    000000a1: 	movq	$0x5, 0xd8(%rsp)
    000000ad: 	movb	$0x0, 0xe5(%rsp)
    000000b5: 	movaps	%xmm0, 0xb0(%rsp)
    000000bd: 	callq	strlen@PLT # Offset: 189
    000000c2: 	movq	%rax, %rdx
    000000c5: 	movabsq	$0x3ffffffffffffffa, %rax
    000000cf: 	cmpq	%rax, %rdx
    000000d2: 	ja	.Ltmp624 # Offset: 210
    000000d8: 	leaq	0xd0(%rsp), %rbp
    000000e0: 	movq	0x8(%rsp), %rsi
    000000e5: 	movq	%rbp, %rdi
    000000e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 232
    000000ed: 	movq	(%rsp), %rax
    000000f1: 	movq	0x30(%rax), %rbx
    000000f5: 	movq	0x40(%rax), %rax
    000000f9: 	movq	%rax, 0x10(%rsp)
    000000fe: 	subq	$0x20, %rax
    00000102: 	cmpq	%rax, %rbx
    00000105: 	je	.Ltmp625 # Offset: 261
    0000010b: 	leaq	0x10(%rbx), %rdi
    0000010f: 	movq	0xd8(%rsp), %r12
    00000117: 	movq	%rdi, (%rbx)
    0000011a: 	movq	0xd0(%rsp), %rbp
    00000122: 	movq	%rbp, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp626 # Offset: 296
    0000012a: 	testq	%rbp, %rbp
    0000012d: 	je	.Ltmp627 # Offset: 301
.Ltmp626:
    00000133: 	movq	%r12, 0x98(%rsp)
    0000013b: 	cmpq	$0xf, %r12
    0000013f: 	ja	.Ltmp628 # Offset: 319
    00000145: 	cmpq	$0x1, %r12
    00000149: 	jne	.Ltmp629 # Offset: 329
    0000014f: 	movzbl	(%rbp), %eax
    00000153: 	movb	%al, 0x10(%rbx)
.Ltmp656:
    00000156: 	movq	(%rsp), %rax
    0000015a: 	movq	%r12, 0x8(%rbx)
    0000015e: 	movb	$0x0, (%rdi,%r12)
    00000163: 	addq	$0x20, 0x30(%rax)
.Ltmp705:
    00000168: 	callq	clock@PLT # Offset: 360
    0000016d: 	movq	%rax, start_time(%rip)
    00000174: 	movl	iterations(%rip), %eax
    0000017a: 	testl	%eax, %eax
    0000017c: 	je	.Ltmp630 # Offset: 380
    00000182: 	movslq	init_value(%rip), %r14
    00000189: 	subl	$0x1, %eax
    0000018c: 	movq	%r13, 0x88(%rsp)
    00000194: 	movabsq	$0xaa000070e5, %r11
    0000019e: 	movabsq	$0xffffffffffff, %rbx
    000001a8: 	leaq	0x1(%r14,%rax), %rax
    000001ad: 	movq	%rax, 0x10(%rsp)
    000001b2: 	jmp	.Ltmp631 # Offset: 434
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp634:
    000001c0: 	movl	$0x1, %r14d
.Ltmp633:
    000001c6: 	movq	%r14, %rax
    000001c9: 	mulq	%r11
    000001cc: 	movq	%r14, %rax
    000001cf: 	subq	%rdx, %rax
    000001d2: 	shrq	%rax
    000001d5: 	addq	%rdx, %rax
    000001d8: 	shrq	$0x1e, %rax
    000001dc: 	imulq	$0x7fffffab, %rax, %rdx
    000001e3: 	movq	%r14, %rax
    000001e6: 	subq	%rdx, %rax
    000001e9: 	movl	$0x1, %edx
    000001ee: 	cmoveq	%rdx, %rax
    000001f2: 	imulq	$0x9c4e, %rax, %rcx
    000001f9: 	movq	%rcx, %rax
    000001fc: 	mulq	%r11
    000001ff: 	movq	%rcx, %rax
    00000202: 	subq	%rdx, %rax
    00000205: 	shrq	%rax
    00000208: 	addq	%rax, %rdx
    0000020b: 	shrq	$0x1e, %rdx
    0000020f: 	imulq	$0x7fffffab, %rdx, %rax
    00000216: 	subq	%rax, %rcx
    00000219: 	movq	%rcx, 0x30(%rsp)
    0000021e: 	imulq	$0x9c4e, %rcx, %rcx
    00000225: 	movq	%rcx, %rax
    00000228: 	mulq	%r11
    0000022b: 	movq	%rcx, %rax
    0000022e: 	subq	%rdx, %rax
    00000231: 	shrq	%rax
    00000234: 	addq	%rax, %rdx
    00000237: 	shrq	$0x1e, %rdx
    0000023b: 	imulq	$0x7fffffab, %rdx, %rax
    00000242: 	subq	%rax, %rcx
    00000245: 	movq	%rcx, 0x28(%rsp)
    0000024a: 	imulq	$0x9c4e, %rcx, %rcx
    00000251: 	movq	%rcx, %rax
    00000254: 	mulq	%r11
    00000257: 	movq	%rcx, %rax
    0000025a: 	subq	%rdx, %rax
    0000025d: 	shrq	%rax
    00000260: 	leaq	(%rdx,%rax), %r9
    00000264: 	shrq	$0x1e, %r9
    00000268: 	imulq	$0x7fffffab, %r9, %rax
    0000026f: 	movq	%rcx, %r9
    00000272: 	subq	%rax, %r9
    00000275: 	imulq	$0x9c4e, %r9, %rsi
    0000027c: 	movq	%rsi, %rax
    0000027f: 	mulq	%r11
    00000282: 	movq	%rsi, %rax
    00000285: 	subq	%rdx, %rax
    00000288: 	shrq	%rax
    0000028b: 	leaq	(%rdx,%rax), %rcx
    0000028f: 	shrq	$0x1e, %rcx
    00000293: 	imulq	$0x7fffffab, %rcx, %rax
    0000029a: 	subq	%rax, %rsi
    0000029d: 	movq	%rsi, %rcx
    000002a0: 	imulq	$0x9c4e, %rsi, %rsi
    000002a7: 	movq	%rsi, %rax
    000002aa: 	mulq	%r11
    000002ad: 	movq	%rsi, %rax
    000002b0: 	subq	%rdx, %rax
    000002b3: 	shrq	%rax
    000002b6: 	addq	%rax, %rdx
    000002b9: 	shrq	$0x1e, %rdx
    000002bd: 	imulq	$0x7fffffab, %rdx, %rax
    000002c4: 	subq	%rax, %rsi
    000002c7: 	movq	%rsi, 0x20(%rsp)
    000002cc: 	imulq	$0x9c4e, %rsi, %rsi
    000002d3: 	movq	%rsi, %rax
    000002d6: 	mulq	%r11
    000002d9: 	movq	%rsi, %rax
    000002dc: 	subq	%rdx, %rax
    000002df: 	shrq	%rax
    000002e2: 	addq	%rax, %rdx
    000002e5: 	movq	%rdx, %rdi
    000002e8: 	shrq	$0x1e, %rdi
    000002ec: 	imulq	$0x7fffffab, %rdi, %rax
    000002f3: 	subq	%rax, %rsi
    000002f6: 	movq	%rsi, 0x18(%rsp)
    000002fb: 	imulq	$0x9c4e, %rsi, %rsi
    00000302: 	movq	%rsi, %rax
    00000305: 	movq	%rsi, %rdi
    00000308: 	mulq	%r11
    0000030b: 	subq	%rdx, %rdi
    0000030e: 	movq	%rdi, %rax
    00000311: 	shrq	%rax
    00000314: 	leaq	(%rdx,%rax), %r10
    00000318: 	shrq	$0x1e, %r10
    0000031c: 	imulq	$0x7fffffab, %r10, %rax
    00000323: 	movq	%rsi, %r10
    00000326: 	subq	%rax, %r10
    00000329: 	imulq	$0x9c4e, %r10, %rdi
    00000330: 	movq	%rdi, %rax
    00000333: 	movq	%rdi, %r15
    00000336: 	mulq	%r11
    00000339: 	subq	%rdx, %r15
    0000033c: 	movq	%r15, %rax
    0000033f: 	shrq	%rax
    00000342: 	leaq	(%rdx,%rax), %rsi
    00000346: 	shrq	$0x1e, %rsi
    0000034a: 	imulq	$0x7fffffab, %rsi, %rax
    00000351: 	subq	%rax, %rdi
    00000354: 	movq	%rdi, %rsi
    00000357: 	imulq	$0x9c4e, %rdi, %rdi
    0000035e: 	movq	%rdi, %rax
    00000361: 	movq	%rdi, %r15
    00000364: 	mulq	%r11
    00000367: 	subq	%rdx, %r15
    0000036a: 	movq	%r15, %rax
    0000036d: 	shrq	%rax
    00000370: 	leaq	(%rdx,%rax), %rbp
    00000374: 	shrq	$0x1e, %rbp
    00000378: 	imulq	$0x7fffffab, %rbp, %rax
    0000037f: 	subq	%rax, %rdi
    00000382: 	imulq	$0x9c4e, %rdi, %r8
    00000389: 	movq	%rdi, %rbp
    0000038c: 	movq	%r8, %rax
    0000038f: 	movq	%r8, %rdi
    00000392: 	mulq	%r11
    00000395: 	subq	%rdx, %rdi
    00000398: 	movq	%rdi, %rax
    0000039b: 	shrq	%rax
    0000039e: 	leaq	(%rdx,%rax), %rdi
    000003a2: 	shrq	$0x1e, %rdi
    000003a6: 	imulq	$0x7fffffab, %rdi, %rax
    000003ad: 	movq	%r8, %rdi
    000003b0: 	subq	%rax, %rdi
    000003b3: 	imulq	$0x9c4e, %rdi, %r8
    000003ba: 	movq	%r8, %rax
    000003bd: 	movq	%r8, %r15
    000003c0: 	mulq	%r11
    000003c3: 	subq	%rdx, %r15
    000003c6: 	movq	%r15, %rax
    000003c9: 	shrq	%rax
    000003cc: 	leaq	(%rdx,%rax), %r12
    000003d0: 	shrq	$0x1e, %r12
    000003d4: 	imulq	$0x7fffffab, %r12, %rax
    000003db: 	subq	%rax, %r8
    000003de: 	imulq	$0x9c4e, %r8, %r13
    000003e5: 	movq	%r8, %r12
    000003e8: 	movq	%r13, %rax
    000003eb: 	movq	%r13, %r15
    000003ee: 	mulq	%r11
    000003f1: 	subq	%rdx, %r15
    000003f4: 	movq	%r15, %rax
    000003f7: 	shrq	%rax
    000003fa: 	leaq	(%rdx,%rax), %r8
    000003fe: 	shrq	$0x1e, %r8
    00000402: 	imulq	$0x7fffffab, %r8, %rax
    00000409: 	movq	%r13, %r8
    0000040c: 	subq	%rax, %r8
    0000040f: 	imulq	$0x9c4e, %r8, %r15
    00000416: 	movq	%r15, %rax
    00000419: 	movq	%r15, %r13
    0000041c: 	mulq	%r11
    0000041f: 	subq	%rdx, %r13
    00000422: 	movq	%r13, %rax
    00000425: 	shrq	%rax
    00000428: 	leaq	(%rdx,%rax), %r13
    0000042c: 	shrq	$0x1e, %r13
    00000430: 	imulq	$0x7fffffab, %r13, %rax
    00000437: 	subq	%rax, %r15
    0000043a: 	movq	%r15, %r13
    0000043d: 	imulq	$0x9c4e, %r15, %r15
    00000444: 	movq	%r15, %rax
    00000447: 	mulq	%r11
    0000044a: 	shlq	$0x20, %r8
    0000044e: 	movq	%r15, %rax
    00000451: 	shlq	$0x20, %rdi
    00000455: 	shlq	$0x20, %rsi
    00000459: 	shlq	$0x20, %rcx
    0000045d: 	subq	%rdx, %rax
    00000460: 	shrq	%rax
    00000463: 	addq	%rdx, %rax
    00000466: 	shrq	$0x1e, %rax
    0000046a: 	imulq	$0x7fffffab, %rax, %rdx
    00000471: 	subq	%rdx, %r15
    00000474: 	movq	%r15, %rdx
    00000477: 	shlq	$0x20, %rdx
    0000047b: 	addq	%r13, %rdx
    0000047e: 	andq	%rbx, %rdx
    00000481: 	movq	%rdx, 0x58(%rsp)
    00000486: 	leaq	(%r8,%r12), %rdx
    0000048a: 	andq	%rbx, %rdx
    0000048d: 	movq	%rdx, 0x50(%rsp)
    00000492: 	leaq	(%rdi,%rbp), %rdx
    00000496: 	movq	%rdx, %rdi
    00000499: 	leaq	(%rsi,%r10), %rdx
    0000049d: 	andq	%rbx, %rdi
    000004a0: 	movq	%rdi, 0x48(%rsp)
    000004a5: 	movq	%rdx, %rdi
    000004a8: 	leaq	(%rcx,%r9), %rdx
    000004ac: 	imulq	$0x9c4e, %r15, %rcx
    000004b3: 	andq	%rbx, %rdi
    000004b6: 	movq	%rdi, 0x40(%rsp)
    000004bb: 	movq	%rdx, %rdi
    000004be: 	andq	%rbx, %rdi
    000004c1: 	movq	%rcx, %rax
    000004c4: 	movq	%rdi, 0x38(%rsp)
    000004c9: 	movq	%rcx, %rdi
    000004cc: 	mulq	%r11
    000004cf: 	subq	%rdx, %rdi
    000004d2: 	movq	%rdi, %rax
    000004d5: 	shrq	%rax
    000004d8: 	addq	%rax, %rdx
    000004db: 	movq	%rdx, %r13
    000004de: 	shrq	$0x1e, %r13
    000004e2: 	imulq	$0x7fffffab, %r13, %rax
    000004e9: 	movq	%rcx, %r13
    000004ec: 	subq	%rax, %r13
    000004ef: 	imulq	$0x9c4e, %r13, %rcx
    000004f6: 	movq	%rcx, %rax
    000004f9: 	movq	%rcx, %rdi
    000004fc: 	mulq	%r11
    000004ff: 	subq	%rdx, %rdi
    00000502: 	movq	%rdi, %rax
    00000505: 	shrq	%rax
    00000508: 	addq	%rax, %rdx
    0000050b: 	movq	%rdx, %r15
    0000050e: 	shrq	$0x1e, %r15
    00000512: 	imulq	$0x7fffffab, %r15, %rax
    00000519: 	movq	%rcx, %r15
    0000051c: 	subq	%rax, %r15
    0000051f: 	imulq	$0x9c4e, %r15, %rcx
    00000526: 	movq	%rcx, %rax
    00000529: 	movq	%rcx, %rdi
    0000052c: 	mulq	%r11
    0000052f: 	subq	%rdx, %rdi
    00000532: 	movq	%rdi, %rax
    00000535: 	shrq	%rax
    00000538: 	leaq	(%rdx,%rax), %r9
    0000053c: 	shrq	$0x1e, %r9
    00000540: 	imulq	$0x7fffffab, %r9, %rax
    00000547: 	movq	%rcx, %r9
    0000054a: 	subq	%rax, %r9
    0000054d: 	imulq	$0x9c4e, %r9, %rcx
    00000554: 	movq	%rcx, %rax
    00000557: 	movq	%rcx, %rdi
    0000055a: 	mulq	%r11
    0000055d: 	subq	%rdx, %rdi
    00000560: 	movq	%rdi, %rax
    00000563: 	shrq	%rax
    00000566: 	leaq	(%rdx,%rax), %rdi
    0000056a: 	shrq	$0x1e, %rdi
    0000056e: 	imulq	$0x7fffffab, %rdi, %rax
    00000575: 	movq	%rcx, %rdi
    00000578: 	subq	%rax, %rdi
    0000057b: 	imulq	$0x9c4e, %rdi, %rcx
    00000582: 	movq	%rcx, %rax
    00000585: 	movq	%rcx, %r10
    00000588: 	mulq	%r11
    0000058b: 	subq	%rdx, %r10
    0000058e: 	movq	%r10, %rax
    00000591: 	shrq	%rax
    00000594: 	leaq	(%rdx,%rax), %r12
    00000598: 	shrq	$0x1e, %r12
    0000059c: 	imulq	$0x7fffffab, %r12, %rax
    000005a3: 	movq	%rcx, %r12
    000005a6: 	subq	%rax, %r12
    000005a9: 	imulq	$0x9c4e, %r12, %rcx
    000005b0: 	movq	%rcx, %rax
    000005b3: 	movq	%rcx, %r10
    000005b6: 	mulq	%r11
    000005b9: 	subq	%rdx, %r10
    000005bc: 	movq	%r10, %rax
    000005bf: 	movq	%rcx, %r10
    000005c2: 	shrq	%rax
    000005c5: 	leaq	(%rdx,%rax), %rsi
    000005c9: 	shrq	$0x1e, %rsi
    000005cd: 	imulq	$0x7fffffab, %rsi, %rax
    000005d4: 	subq	%rax, %r10
    000005d7: 	imulq	$0x9c4e, %r10, %rcx
    000005de: 	movq	%r10, %rsi
    000005e1: 	movq	%rcx, %rax
    000005e4: 	movq	%rcx, %r10
    000005e7: 	mulq	%r11
    000005ea: 	subq	%rdx, %r10
    000005ed: 	movq	%r10, %rax
    000005f0: 	shrq	%rax
    000005f3: 	leaq	(%rdx,%rax), %rbp
    000005f7: 	shrq	$0x1e, %rbp
    000005fb: 	imulq	$0x7fffffab, %rbp, %rax
    00000602: 	movq	%rcx, %rbp
    00000605: 	subq	%rax, %rbp
    00000608: 	imulq	$0x9c4e, %rbp, %r8
    0000060f: 	movq	%r8, %rax
    00000612: 	movq	%r8, %r10
    00000615: 	mulq	%r11
    00000618: 	subq	%rdx, %r10
    0000061b: 	movq	%r10, %rax
    0000061e: 	shrq	%rax
    00000621: 	leaq	(%rdx,%rax), %rcx
    00000625: 	shrq	$0x1e, %rcx
    00000629: 	imulq	$0x7fffffab, %rcx, %rax
    00000630: 	subq	%rax, %r8
    00000633: 	movq	%r8, %rcx
    00000636: 	imulq	$0x9c4e, %r8, %r8
    0000063d: 	movq	%r8, %rax
    00000640: 	movq	%r8, %r10
    00000643: 	mulq	%r11
    00000646: 	subq	%rdx, %r10
    00000649: 	movq	%r10, %rax
    0000064c: 	shrq	%rax
    0000064f: 	leaq	(%rdx,%rax), %r10
    00000653: 	shrq	$0x1e, %r10
    00000657: 	imulq	$0x7fffffab, %r10, %rax
    0000065e: 	movq	%r8, %r10
    00000661: 	subq	%rax, %r10
    00000664: 	imulq	$0x9c4e, %r10, %r8
    0000066b: 	movq	%r8, %rax
    0000066e: 	mulq	%r11
    00000671: 	movq	%r8, %rax
    00000674: 	subq	%rdx, %rax
    00000677: 	shrq	%rax
    0000067a: 	addq	%rax, %rdx
    0000067d: 	shrq	$0x1e, %rdx
    00000681: 	imulq	$0x7fffffab, %rdx, %rax
    00000688: 	movq	0x20(%rsp), %rdx
    0000068d: 	subq	%rax, %r8
    00000690: 	shlq	$0x20, %r8
    00000694: 	leaq	(%r8,%r10), %rax
    00000698: 	movq	%rax, %r10
    0000069b: 	movq	0x18(%rsp), %rax
    000006a0: 	andq	%rbx, %r10
    000006a3: 	movq	%r10, 0x70(%rsp)
    000006a8: 	sete	%r10b
    000006ac: 	shlq	$0x20, %rax
    000006b0: 	addq	$0x1, %r14
    000006b4: 	shlq	$0x20, %r15
    000006b8: 	addq	%rax, %rdx
    000006bb: 	movq	0x28(%rsp), %rax
    000006c0: 	movzbl	%r10b, %r10d
    000006c4: 	shlq	$0x20, %rdi
    000006c8: 	shlq	$0x20, %rsi
    000006cc: 	movq	%r10, 0x68(%rsp)
    000006d1: 	andq	%rbx, %rdx
    000006d4: 	shlq	$0x20, %rcx
    000006d8: 	shlq	$0x20, %rax
    000006dc: 	leaq	(%r15,%r13), %r10
    000006e0: 	addq	%r9, %rdi
    000006e3: 	addq	0x30(%rsp), %rax
    000006e8: 	addq	%r12, %rsi
    000006eb: 	addq	%rbp, %rcx
    000006ee: 	andq	%rbx, %r10
    000006f1: 	andq	%rbx, %rax
    000006f4: 	andq	%rbx, %rdi
    000006f7: 	andq	%rbx, %rsi
    000006fa: 	andq	%rbx, %rcx
    000006fd: 	cmpq	%r14, 0x10(%rsp)
    00000702: 	je	.Ltmp632 # Offset: 1794
.Ltmp631:
    00000708: 	testq	%r14, %r14
    0000070b: 	jne	.Ltmp633 # Offset: 1803
    00000711: 	cmpq	$0x1, 0x10(%rsp)
    00000717: 	jne	.Ltmp634 # Offset: 1815
    0000071d: 	movabsq	$0xd8a434591dbc, %rax
    00000727: 	movq	%r14, %rbx
    0000072a: 	movq	0x88(%rsp), %r13
    00000732: 	movabsq	$0xefe778571604, %r15
    0000073c: 	movabsq	$0x1e9928ecc09a, %rdx
    00000746: 	movq	%rax, 0x58(%rsp)
    0000074b: 	movabsq	$0x580615b0b74b, %rax
    00000755: 	movabsq	$0x1f3b45cc715e, %r10
    0000075f: 	movabsq	$0x8d3e66fdbfe3, %r9
    00000769: 	movq	%rax, 0x50(%rsp)
    0000076e: 	movabsq	$0xa32e3cd32e48, %rax
    00000778: 	movabsq	$0x1a6371edca94, %r8
    00000782: 	movabsq	$0xbe536a408fec, %rdi
    0000078c: 	movq	%rax, 0x48(%rsp)
    00000791: 	movabsq	$0x473530f584e4, %rax
    0000079b: 	movq	%rax, 0x40(%rsp)
    000007a0: 	movabsq	$0x73325a23cd04, %rax
    000007aa: 	movq	%rax, 0x38(%rsp)
    000007af: 	movabsq	$0x9e548e6f632, %rax
.Ltmp696:
    000007b9: 	movq	%rax, (%r13)
    000007bd: 	movq	0x38(%rsp), %rax
    000007c2: 	pxor	%xmm0, %xmm0
    000007c6: 	movq	%rdx, 0x10(%r13)
    000007ca: 	movq	%rax, 0x8(%r13)
    000007ce: 	movq	0x40(%rsp), %rax
    000007d3: 	movq	%r10, 0x38(%r13)
    000007d7: 	movq	%rax, 0x18(%r13)
    000007db: 	movq	0x48(%rsp), %rax
    000007e0: 	movq	%r9, 0x40(%r13)
    000007e4: 	movq	%rax, 0x20(%r13)
    000007e8: 	movq	0x50(%rsp), %rax
    000007ed: 	movq	%r8, 0x48(%r13)
    000007f1: 	movq	%rax, 0x28(%r13)
    000007f5: 	movq	0x58(%rsp), %rax
    000007fa: 	movq	%rdi, 0x50(%r13)
    000007fe: 	movq	%rax, 0x30(%r13)
    00000802: 	movq	%r15, 0x58(%r13)
    00000806: 	movq	%rbx, 0x60(%r13)
    0000080a: 	movups	%xmm0, 0x68(%r13)
.Ltmp630:
    0000080f: 	movq	(%rsp), %rbx
    00000813: 	movq	0x30(%rbx), %rax
    00000817: 	movq	0x48(%rbx), %rdx
    0000081b: 	cmpq	%rax, 0x38(%rbx)
    0000081f: 	je	.Ltmp635 # Offset: 2079
.Ltmp697:
    00000825: 	movq	-0x20(%rax), %rbp
    00000829: 	callq	clock@PLT # Offset: 2089
    0000082e: 	pxor	%xmm0, %xmm0
    00000832: 	movq	%rax, end_time(%rip)
    00000839: 	movq	%rbp, %rdi
    0000083c: 	subq	start_time(%rip), %rax
    00000843: 	cvtsi2sd	%rax, %xmm0
    00000848: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000850: 	callq	_Z13record_resultdPKc # Offset: 2128
    00000855: 	leaq	0xf0(%rsp), %r12
    0000085d: 	leaq	0x98(%rsp), %rbp
    00000865: 	xorl	%edx, %edx
    00000867: 	movq	$0x19, 0x98(%rsp)
    00000873: 	leaq	0x100(%rsp), %r15
    0000087b: 	movq	%rbp, %rsi
    0000087e: 	movq	%r12, %rdi
    00000881: 	movq	%r15, 0xf0(%rsp)
    00000889: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2185
    0000088e: 	movq	0x98(%rsp), %rdx
    00000896: 	movdqa	DATAat0xd360(%rip), %xmm0
    0000089e: 	movabsq	$0x6e6f697475626972, %rbx
    000008a8: 	movq	%rax, 0xf0(%rsp)
    000008b0: 	movb	$0x20, 0x18(%rax)
    000008b4: 	movq	0x8(%rsp), %rdi
    000008b9: 	movq	%rdx, 0x100(%rsp)
    000008c1: 	movups	%xmm0, (%rax)
    000008c4: 	movq	0xf0(%rsp), %rdx
    000008cc: 	movq	%rbx, 0x10(%rax)
    000008d0: 	movq	0x98(%rsp), %rax
    000008d8: 	movq	%rax, 0xf8(%rsp)
    000008e0: 	movb	$0x0, (%rdx,%rax)
    000008e4: 	callq	strlen@PLT # Offset: 2276
    000008e9: 	movq	%rax, %rdx
    000008ec: 	movabsq	$0x3fffffffffffffff, %rax
    000008f6: 	subq	0xf8(%rsp), %rax
    000008fe: 	cmpq	%rax, %rdx
    00000901: 	ja	.Ltmp636 # Offset: 2305
    00000907: 	movq	0x8(%rsp), %rsi
    0000090c: 	movq	%r12, %rdi
    0000090f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2319
    00000914: 	movq	(%rsp), %rax
    00000918: 	movq	0x30(%rax), %rbx
    0000091c: 	movq	0x40(%rax), %rax
    00000920: 	movq	%rax, 0x10(%rsp)
    00000925: 	subq	$0x20, %rax
    00000929: 	cmpq	%rax, %rbx
    0000092c: 	je	.Ltmp637 # Offset: 2348
    00000932: 	leaq	0x10(%rbx), %rdi
    00000936: 	movq	0xf8(%rsp), %r12
    0000093e: 	movq	%rdi, (%rbx)
    00000941: 	movq	0xf0(%rsp), %r14
    00000949: 	movq	%r14, %rax
    0000094c: 	addq	%r12, %rax
    0000094f: 	je	.Ltmp638 # Offset: 2383
    00000951: 	testq	%r14, %r14
    00000954: 	je	.Ltmp639 # Offset: 2388
.Ltmp638:
    0000095a: 	movq	%r12, 0x98(%rsp)
    00000962: 	cmpq	$0xf, %r12
    00000966: 	ja	.Ltmp640 # Offset: 2406
    0000096c: 	cmpq	$0x1, %r12
    00000970: 	jne	.Ltmp641 # Offset: 2416
    00000976: 	movzbl	(%r14), %eax
    0000097a: 	movb	%al, 0x10(%rbx)
.Ltmp709:
    0000097d: 	movq	(%rsp), %rax
    00000981: 	movq	%r12, 0x8(%rbx)
    00000985: 	movb	$0x0, (%rdi,%r12)
    0000098a: 	addq	$0x20, 0x30(%rax)
.Ltmp708:
    0000098f: 	callq	clock@PLT # Offset: 2447
    00000994: 	movl	iterations(%rip), %edi
    0000099a: 	xorl	%ebx, %ebx
    0000099c: 	movq	0x80(%rsp), %r12
    000009a4: 	movq	%rax, start_time(%rip)
    000009ab: 	testl	%edi, %edi
    000009ad: 	je	.Ltmp642 # Offset: 2477
    000009af: 	nop # Size: 1
.Ltmp643:
    000009b0: 	movl	$0x270f, %edx
    000009b5: 	movl	$0xffffd8f1, %esi
    000009ba: 	movq	%r13, %rdi
    000009bd: 	addl	$0x1, %ebx
    000009c0: 	callq	"_ZNSt24uniform_int_distributionIiEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEiRT_RKNS0_10param_typeE.isra.0/1" # Offset: 2496
    000009c5: 	addl	%eax, (%r12)
    000009c9: 	cmpl	%ebx, iterations(%rip)
    000009cf: 	jne	.Ltmp643 # Offset: 2511
.Ltmp642:
    000009d1: 	movq	(%rsp), %rbx
    000009d5: 	movq	0x30(%rbx), %rax
    000009d9: 	movq	0x48(%rbx), %rdx
    000009dd: 	cmpq	%rax, 0x38(%rbx)
    000009e1: 	je	.Ltmp644 # Offset: 2529
.Ltmp707:
    000009e7: 	movq	-0x20(%rax), %r12
    000009eb: 	callq	clock@PLT # Offset: 2539
    000009f0: 	pxor	%xmm0, %xmm0
    000009f4: 	movq	%rax, end_time(%rip)
    000009fb: 	movq	%r12, %rdi
    000009fe: 	subq	start_time(%rip), %rax
    00000a05: 	cvtsi2sd	%rax, %xmm0
    00000a0a: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000a12: 	callq	_Z13record_resultdPKc # Offset: 2578
    00000a17: 	leaq	0x110(%rsp), %r12
    00000a1f: 	leaq	0x120(%rsp), %rax
    00000a27: 	xorl	%edx, %edx
    00000a29: 	movq	%rbp, %rsi
    00000a2c: 	movq	%r12, %rdi
    00000a2f: 	movq	%rax, 0x18(%rsp)
    00000a34: 	movq	%rax, 0x110(%rsp)
    00000a3c: 	movq	$0x1a, 0x98(%rsp)
    00000a48: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2632
    00000a4d: 	movq	0x98(%rsp), %rdx
    00000a55: 	movl	$0x206e, %esi
    00000a5a: 	movdqa	DATAat0xd370(%rip), %xmm0
    00000a62: 	movabsq	$0x6f69747562697274, %rbx
    00000a6c: 	movq	%rax, 0x110(%rsp)
    00000a74: 	movq	0x8(%rsp), %rdi
    00000a79: 	movq	%rdx, 0x120(%rsp)
    00000a81: 	movw	%si, 0x18(%rax)
    00000a85: 	movups	%xmm0, (%rax)
    00000a88: 	movq	0x110(%rsp), %rdx
    00000a90: 	movq	%rbx, 0x10(%rax)
    00000a94: 	movq	0x98(%rsp), %rax
    00000a9c: 	movq	%rax, 0x118(%rsp)
    00000aa4: 	movb	$0x0, (%rdx,%rax)
    00000aa8: 	callq	strlen@PLT # Offset: 2728
    00000aad: 	movq	%rax, %rdx
    00000ab0: 	movabsq	$0x3fffffffffffffff, %rax
    00000aba: 	subq	0x118(%rsp), %rax
    00000ac2: 	cmpq	%rax, %rdx
    00000ac5: 	ja	.Ltmp645 # Offset: 2757
    00000acb: 	movq	0x8(%rsp), %rsi
    00000ad0: 	movq	%r12, %rdi
    00000ad3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2771
    00000ad8: 	movq	(%rsp), %rax
    00000adc: 	movq	0x30(%rax), %rbx
    00000ae0: 	movq	0x40(%rax), %rax
    00000ae4: 	movq	%rax, 0x10(%rsp)
    00000ae9: 	subq	$0x20, %rax
    00000aed: 	cmpq	%rax, %rbx
    00000af0: 	je	.Ltmp646 # Offset: 2800
    00000af6: 	leaq	0x10(%rbx), %rdi
    00000afa: 	movq	0x118(%rsp), %r12
    00000b02: 	movq	%rdi, (%rbx)
    00000b05: 	movq	0x110(%rsp), %r14
    00000b0d: 	movq	%r14, %rax
    00000b10: 	addq	%r12, %rax
    00000b13: 	je	.Ltmp647 # Offset: 2835
    00000b15: 	testq	%r14, %r14
    00000b18: 	je	.Ltmp648 # Offset: 2840
.Ltmp647:
    00000b1e: 	movq	%r12, 0x98(%rsp)
    00000b26: 	cmpq	$0xf, %r12
    00000b2a: 	ja	.Ltmp649 # Offset: 2858
    00000b30: 	cmpq	$0x1, %r12
    00000b34: 	jne	.Ltmp650 # Offset: 2868
    00000b3a: 	movzbl	(%r14), %eax
    00000b3e: 	movb	%al, 0x10(%rbx)
.Ltmp710:
    00000b41: 	movq	(%rsp), %rax
    00000b45: 	movq	%r12, 0x8(%rbx)
    00000b49: 	movb	$0x0, (%rdi,%r12)
    00000b4e: 	addq	$0x20, 0x30(%rax)
.Ltmp706:
    00000b53: 	callq	clock@PLT # Offset: 2899
    00000b58: 	movl	iterations(%rip), %ebx
    00000b5e: 	movq	0x60(%rsp), %r14
    00000b63: 	xorl	%r12d, %r12d
    00000b66: 	movq	%rax, start_time(%rip)
    00000b6d: 	testl	%ebx, %ebx
    00000b6f: 	jne	.Ltmp651 # Offset: 2927
    00000b71: 	jmp	.Ltmp652 # Offset: 2929
    00000b76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp654:
    00000b80: 	pxor	%xmm0, %xmm0
    00000b84: 	cvtsi2ss	%rax, %xmm0
.Ltmp655:
    00000b89: 	pxor	%xmm1, %xmm1
    00000b8d: 	addss	%xmm1, %xmm0
    00000b91: 	mulss	DATAat0xd348(%rip), %xmm0
    00000b99: 	comiss	DATAat0xd35c(%rip), %xmm0
    00000ba0: 	jae	.Ltmp653 # Offset: 2976
    00000ba6: 	mulss	DATAat0xd33c(%rip), %xmm0
    00000bae: 	subss	DATAat0xd340(%rip), %xmm0
    00000bb6: 	cvtss2sd	%xmm0, %xmm0
.Ltmp695:
    00000bba: 	addsd	(%r14), %xmm0
    00000bbf: 	addl	$0x1, %r12d
    00000bc3: 	movsd	%xmm0, (%r14)
    00000bc8: 	cmpl	%ebx, %r12d
    00000bcb: 	je	.Ltmp652 # Offset: 3019
.Ltmp651:
    00000bcd: 	movq	%r13, %rdi
    00000bd0: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv # Offset: 3024
    00000bd5: 	testq	%rax, %rax
    00000bd8: 	jns	.Ltmp654 # Offset: 3032
    00000bda: 	movq	%rax, %rdx
    00000bdd: 	andl	$0x1, %eax
    00000be0: 	pxor	%xmm0, %xmm0
    00000be4: 	shrq	%rdx
    00000be7: 	orq	%rax, %rdx
    00000bea: 	cvtsi2ss	%rdx, %xmm0
    00000bef: 	addss	%xmm0, %xmm0
    00000bf3: 	jmp	.Ltmp655 # Offset: 3059
.Ltmp628:
    00000bf5: 	leaq	0x98(%rsp), %rsi
    00000bfd: 	xorl	%edx, %edx
    00000bff: 	movq	%rbx, %rdi
    00000c02: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3074
    00000c07: 	movq	%rax, (%rbx)
    00000c0a: 	movq	%rax, %rdi
    00000c0d: 	movq	0x98(%rsp), %rax
    00000c15: 	movq	%rax, 0x10(%rbx)
.Ltmp715:
    00000c19: 	movq	%r12, %rdx
    00000c1c: 	movq	%rbp, %rsi
    00000c1f: 	callq	memcpy@PLT # Offset: 3103
    00000c24: 	movq	0x98(%rsp), %r12
    00000c2c: 	movq	(%rbx), %rdi
    00000c2f: 	jmp	.Ltmp656 # Offset: 3119
.Ltmp652:
    00000c34: 	movq	(%rsp), %rbx
    00000c38: 	movq	0x30(%rbx), %rax
    00000c3c: 	movq	0x48(%rbx), %rdx
    00000c40: 	cmpq	0x38(%rbx), %rax
    00000c44: 	je	.Ltmp657 # Offset: 3140
.Ltmp704:
    00000c4a: 	movq	-0x20(%rax), %r12
    00000c4e: 	callq	clock@PLT # Offset: 3150
    00000c53: 	pxor	%xmm0, %xmm0
    00000c57: 	movq	%rax, end_time(%rip)
    00000c5e: 	movq	%r12, %rdi
    00000c61: 	subq	start_time(%rip), %rax
    00000c68: 	cvtsi2sd	%rax, %xmm0
    00000c6d: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000c75: 	callq	_Z13record_resultdPKc # Offset: 3189
    00000c7a: 	leaq	0x130(%rsp), %r12
    00000c82: 	leaq	0x140(%rsp), %rax
    00000c8a: 	xorl	%edx, %edx
    00000c8c: 	movq	%rbp, %rsi
    00000c8f: 	movq	%r12, %rdi
    00000c92: 	movq	%rax, 0x20(%rsp)
    00000c97: 	movq	%rax, 0x130(%rsp)
    00000c9f: 	movq	$0x1f, 0x98(%rsp)
    00000cab: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3243
    00000cb0: 	movq	0x98(%rsp), %rdx
    00000cb8: 	movl	$0x3e30, %ecx
    00000cbd: 	movdqa	DATAat0xd380(%rip), %xmm0
    00000cc5: 	movabsq	$0x6c62756f643c6c61, %rbx
    00000ccf: 	movq	%rax, 0x130(%rsp)
    00000cd7: 	movq	0x8(%rsp), %rdi
    00000cdc: 	movq	%rdx, 0x140(%rsp)
    00000ce4: 	movl	$0x32202c65, 0x18(%rax)
    00000ceb: 	movups	%xmm0, (%rax)
    00000cee: 	movq	0x130(%rsp), %rdx
    00000cf6: 	movq	%rbx, 0x10(%rax)
    00000cfa: 	movw	%cx, 0x1c(%rax)
    00000cfe: 	movb	$0x20, 0x1e(%rax)
    00000d02: 	movq	0x98(%rsp), %rax
    00000d0a: 	movq	%rax, 0x138(%rsp)
    00000d12: 	movb	$0x0, (%rdx,%rax)
    00000d16: 	callq	strlen@PLT # Offset: 3350
    00000d1b: 	movq	%rax, %rdx
    00000d1e: 	movabsq	$0x3fffffffffffffff, %rax
    00000d28: 	subq	0x138(%rsp), %rax
    00000d30: 	cmpq	%rax, %rdx
    00000d33: 	ja	.Ltmp658 # Offset: 3379
    00000d39: 	movq	0x8(%rsp), %rsi
    00000d3e: 	movq	%r12, %rdi
    00000d41: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3393
    00000d46: 	movq	(%rsp), %rax
    00000d4a: 	movq	0x30(%rax), %rbx
    00000d4e: 	movq	0x40(%rax), %rax
    00000d52: 	movq	%rax, 0x10(%rsp)
    00000d57: 	subq	$0x20, %rax
    00000d5b: 	cmpq	%rax, %rbx
    00000d5e: 	je	.Ltmp659 # Offset: 3422
    00000d64: 	leaq	0x10(%rbx), %rdi
    00000d68: 	movq	0x138(%rsp), %r12
    00000d70: 	movq	%rdi, (%rbx)
    00000d73: 	movq	0x130(%rsp), %r14
    00000d7b: 	movq	%r14, %rax
    00000d7e: 	addq	%r12, %rax
    00000d81: 	je	.Ltmp660 # Offset: 3457
    00000d83: 	testq	%r14, %r14
    00000d86: 	je	.Ltmp661 # Offset: 3462
.Ltmp660:
    00000d8c: 	movq	%r12, 0x98(%rsp)
    00000d94: 	cmpq	$0xf, %r12
    00000d98: 	ja	.Ltmp662 # Offset: 3480
    00000d9e: 	cmpq	$0x1, %r12
    00000da2: 	jne	.Ltmp663 # Offset: 3490
    00000da8: 	movzbl	(%r14), %eax
    00000dac: 	movb	%al, 0x10(%rbx)
.Ltmp712:
    00000daf: 	movq	(%rsp), %rax
    00000db3: 	movq	%r12, 0x8(%rbx)
    00000db7: 	movb	$0x0, (%rdi,%r12)
    00000dbc: 	addq	$0x20, 0x30(%rax)
.Ltmp703:
    00000dc1: 	callq	clock@PLT # Offset: 3521
    00000dc6: 	movl	iterations(%rip), %ebx
    00000dcc: 	movq	0x60(%rsp), %r14
    00000dd1: 	xorl	%r12d, %r12d
    00000dd4: 	movq	%rax, start_time(%rip)
    00000ddb: 	testl	%ebx, %ebx
    00000ddd: 	jne	.Ltmp664 # Offset: 3549
    00000ddf: 	jmp	.Ltmp665 # Offset: 3551
    00000de4: 	nopl	(%rax) # Size: 4
.Ltmp667:
    00000de8: 	pxor	%xmm0, %xmm0
    00000dec: 	cvtsi2sd	%rax, %xmm0
.Ltmp668:
    00000df1: 	pxor	%xmm2, %xmm2
    00000df5: 	addsd	%xmm2, %xmm0
    00000df9: 	mulsd	DATAat0xd318(%rip), %xmm0
    00000e01: 	comisd	DATAat0xd2e8(%rip), %xmm0
    00000e09: 	jae	.Ltmp666 # Offset: 3593
    00000e0b: 	addsd	(%r14), %xmm0
    00000e10: 	addl	$0x1, %r12d
    00000e14: 	movsd	%xmm0, (%r14)
    00000e19: 	cmpl	%r12d, %ebx
    00000e1c: 	je	.Ltmp665 # Offset: 3612
.Ltmp664:
    00000e1e: 	movq	%r13, %rdi
    00000e21: 	callq	_ZNSt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEclEv # Offset: 3617
    00000e26: 	testq	%rax, %rax
    00000e29: 	jns	.Ltmp667 # Offset: 3625
    00000e2b: 	movq	%rax, %rdx
    00000e2e: 	andl	$0x1, %eax
    00000e31: 	pxor	%xmm0, %xmm0
    00000e35: 	shrq	%rdx
    00000e38: 	orq	%rax, %rdx
    00000e3b: 	cvtsi2sd	%rdx, %xmm0
    00000e40: 	addsd	%xmm0, %xmm0
    00000e44: 	jmp	.Ltmp668 # Offset: 3652
.Ltmp666:
    00000e46: 	movsd	DATAat0xd308(%rip), %xmm0
    00000e4e: 	addsd	(%r14), %xmm0
    00000e53: 	addl	$0x1, %r12d
    00000e57: 	movsd	%xmm0, (%r14)
    00000e5c: 	cmpl	%ebx, %r12d
    00000e5f: 	jne	.Ltmp664 # Offset: 3679
.Ltmp665:
    00000e61: 	movq	(%rsp), %rbx
    00000e65: 	movq	0x30(%rbx), %rax
    00000e69: 	movq	0x48(%rbx), %rdx
    00000e6d: 	cmpq	0x38(%rbx), %rax
    00000e71: 	je	.Ltmp669 # Offset: 3697
.Ltmp702:
    00000e77: 	movq	-0x20(%rax), %r12
    00000e7b: 	callq	clock@PLT # Offset: 3707
    00000e80: 	pxor	%xmm0, %xmm0
    00000e84: 	movq	%rax, end_time(%rip)
    00000e8b: 	movq	%r12, %rdi
    00000e8e: 	subq	start_time(%rip), %rax
    00000e95: 	cvtsi2sd	%rax, %xmm0
    00000e9a: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000ea2: 	callq	_Z13record_resultdPKc # Offset: 3746
    00000ea7: 	leaq	0x150(%rsp), %r12
    00000eaf: 	leaq	0x160(%rsp), %rax
    00000eb7: 	xorl	%edx, %edx
    00000eb9: 	movq	%rbp, %rsi
    00000ebc: 	movq	%r12, %rdi
    00000ebf: 	movq	%rax, 0x28(%rsp)
    00000ec4: 	movq	%rax, 0x150(%rsp)
    00000ecc: 	movq	$0x14, 0x98(%rsp)
    00000ed8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3800
    00000edd: 	movq	0x98(%rsp), %rdx
    00000ee5: 	movdqa	DATAat0xd390(%rip), %xmm0
    00000eed: 	movq	%rax, 0x150(%rsp)
    00000ef5: 	movq	0x8(%rsp), %rdi
    00000efa: 	movq	%rdx, 0x160(%rsp)
    00000f02: 	movups	%xmm0, (%rax)
    00000f05: 	movq	0x150(%rsp), %rdx
    00000f0d: 	movl	$0x206e6f69, 0x10(%rax)
    00000f14: 	movq	0x98(%rsp), %rax
    00000f1c: 	movq	%rax, 0x158(%rsp)
    00000f24: 	movb	$0x0, (%rdx,%rax)
    00000f28: 	callq	strlen@PLT # Offset: 3880
    00000f2d: 	movq	%rax, %rdx
    00000f30: 	movabsq	$0x3fffffffffffffff, %rax
    00000f3a: 	subq	0x158(%rsp), %rax
    00000f42: 	cmpq	%rax, %rdx
    00000f45: 	ja	.Ltmp670 # Offset: 3909
    00000f4b: 	movq	0x8(%rsp), %rsi
    00000f50: 	movq	%r12, %rdi
    00000f53: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3923
    00000f58: 	movq	(%rsp), %rax
    00000f5c: 	movq	0x30(%rax), %rbx
    00000f60: 	movq	0x40(%rax), %rax
    00000f64: 	movq	%rax, 0x10(%rsp)
    00000f69: 	subq	$0x20, %rax
    00000f6d: 	cmpq	%rax, %rbx
    00000f70: 	je	.Ltmp671 # Offset: 3952
    00000f76: 	leaq	0x10(%rbx), %rdi
    00000f7a: 	movq	0x158(%rsp), %r12
    00000f82: 	movq	%rdi, (%rbx)
    00000f85: 	movq	0x150(%rsp), %r14
    00000f8d: 	movq	%r14, %rax
    00000f90: 	addq	%r12, %rax
    00000f93: 	je	.Ltmp672 # Offset: 3987
    00000f95: 	testq	%r14, %r14
    00000f98: 	je	.Ltmp673 # Offset: 3992
.Ltmp672:
    00000f9e: 	movq	%r12, 0x98(%rsp)
    00000fa6: 	cmpq	$0xf, %r12
    00000faa: 	ja	.Ltmp674 # Offset: 4010
    00000fb0: 	cmpq	$0x1, %r12
    00000fb4: 	jne	.Ltmp675 # Offset: 4020
    00000fba: 	movzbl	(%r14), %eax
    00000fbe: 	movb	%al, 0x10(%rbx)
.Ltmp716:
    00000fc1: 	movq	(%rsp), %rax
    00000fc5: 	movq	%r12, 0x8(%rbx)
    00000fc9: 	movb	$0x0, (%rdi,%r12)
    00000fce: 	addq	$0x20, 0x30(%rax)
.Ltmp701:
    00000fd3: 	callq	clock@PLT # Offset: 4051
    00000fd8: 	movl	iterations(%rip), %ebx
    00000fde: 	xorl	%r12d, %r12d
    00000fe1: 	leaq	0xa0(%rsp), %r14
    00000fe9: 	movq	%rax, start_time(%rip)
    00000ff0: 	testl	%ebx, %ebx
    00000ff2: 	je	.Ltmp676 # Offset: 4082
    00000ff4: 	movq	%rbp, 0x10(%rsp)
    00000ff9: 	movq	%r14, %rbp
    00000ffc: 	movl	%r12d, %r14d
    00000fff: 	movl	%ebx, %r12d
    00001002: 	movq	0x60(%rsp), %rbx
    00001007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp677:
    00001010: 	movq	%rbp, %rdx
    00001013: 	movq	%r13, %rsi
    00001016: 	movq	%rbp, %rdi
    00001019: 	addl	$0x1, %r14d
    0000101d: 	callq	_ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEfRT_RKNS0_10param_typeE # Offset: 4125
    00001022: 	cvtss2sd	%xmm0, %xmm0
    00001026: 	addsd	(%rbx), %xmm0
    0000102a: 	movsd	%xmm0, (%rbx)
    0000102e: 	cmpl	%r12d, %r14d
    00001031: 	jne	.Ltmp677 # Offset: 4145
    00001033: 	movq	0x10(%rsp), %rbp
.Ltmp676:
    00001038: 	movq	(%rsp), %rbx
    0000103c: 	movq	0x30(%rbx), %rax
    00001040: 	movq	0x48(%rbx), %rdx
    00001044: 	cmpq	0x38(%rbx), %rax
    00001048: 	je	.Ltmp678 # Offset: 4168
.Ltmp700:
    0000104e: 	movq	-0x20(%rax), %r12
    00001052: 	callq	clock@PLT # Offset: 4178
    00001057: 	pxor	%xmm0, %xmm0
    0000105b: 	movq	%rax, end_time(%rip)
    00001062: 	movq	%r12, %rdi
    00001065: 	subq	start_time(%rip), %rax
    0000106c: 	cvtsi2sd	%rax, %xmm0
    00001071: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00001079: 	callq	_Z13record_resultdPKc # Offset: 4217
    0000107e: 	leaq	0x170(%rsp), %r12
    00001086: 	leaq	0x180(%rsp), %r14
    0000108e: 	xorl	%edx, %edx
    00001090: 	movq	%rbp, %rsi
    00001093: 	movq	%r12, %rdi
    00001096: 	movq	%r14, 0x170(%rsp)
    0000109e: 	movq	$0x17, 0x98(%rsp)
    000010aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4266
    000010af: 	movq	0x98(%rsp), %rdx
    000010b7: 	movdqa	DATAat0xd3a0(%rip), %xmm0
    000010bf: 	movq	%rax, 0x170(%rsp)
    000010c7: 	movq	0x8(%rsp), %rdi
    000010cc: 	movq	%rdx, 0x180(%rsp)
    000010d4: 	movl	$0x6e6f, %edx
    000010d9: 	movups	%xmm0, (%rax)
    000010dc: 	movw	%dx, 0x14(%rax)
    000010e0: 	movq	0x170(%rsp), %rdx
    000010e8: 	movl	$0x69747562, 0x10(%rax)
    000010ef: 	movb	$0x20, 0x16(%rax)
    000010f3: 	movq	0x98(%rsp), %rax
    000010fb: 	movq	%rax, 0x178(%rsp)
    00001103: 	movb	$0x0, (%rdx,%rax)
    00001107: 	callq	strlen@PLT # Offset: 4359
    0000110c: 	movq	%rax, %rdx
    0000110f: 	movabsq	$0x3fffffffffffffff, %rax
    00001119: 	subq	0x178(%rsp), %rax
    00001121: 	cmpq	%rax, %rdx
    00001124: 	ja	.Ltmp679 # Offset: 4388
    0000112a: 	movq	0x8(%rsp), %rsi
    0000112f: 	movq	%r12, %rdi
    00001132: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4402
    00001137: 	movq	(%rsp), %rax
    0000113b: 	movq	0x30(%rax), %rbx
    0000113f: 	movq	0x40(%rax), %rax
    00001143: 	movq	%rax, 0x8(%rsp)
    00001148: 	subq	$0x20, %rax
    0000114c: 	cmpq	%rax, %rbx
    0000114f: 	je	.Ltmp680 # Offset: 4431
    00001155: 	leaq	0x10(%rbx), %rdi
    00001159: 	movq	0x178(%rsp), %r12
    00001161: 	movq	%rdi, (%rbx)
    00001164: 	movq	0x170(%rsp), %rax
    0000116c: 	movq	%rax, 0x8(%rsp)
    00001171: 	movq	%rax, %rsi
    00001174: 	addq	%r12, %rax
    00001177: 	je	.Ltmp681 # Offset: 4471
    00001179: 	testq	%rsi, %rsi
    0000117c: 	je	.Ltmp682 # Offset: 4476
.Ltmp681:
    00001182: 	movq	%r12, 0x98(%rsp)
    0000118a: 	cmpq	$0xf, %r12
    0000118e: 	ja	.Ltmp683 # Offset: 4494
    00001194: 	cmpq	$0x1, %r12
    00001198: 	jne	.Ltmp684 # Offset: 4504
    0000119e: 	movq	0x8(%rsp), %rax
    000011a3: 	movzbl	(%rax), %eax
    000011a6: 	movb	%al, 0x10(%rbx)
.Ltmp718:
    000011a9: 	movq	(%rsp), %rax
    000011ad: 	movq	%r12, 0x8(%rbx)
    000011b1: 	movb	$0x0, (%rdi,%r12)
    000011b6: 	addq	$0x20, 0x30(%rax)
.Ltmp699:
    000011bb: 	callq	clock@PLT # Offset: 4539
    000011c0: 	movl	iterations(%rip), %ebx
    000011c6: 	movq	%rax, start_time(%rip)
    000011cd: 	testl	%ebx, %ebx
    000011cf: 	je	.Ltmp685 # Offset: 4559
    000011d1: 	xorl	%ebp, %ebp
    000011d3: 	movq	%r14, 0x30(%rsp)
    000011d8: 	leaq	0xb8(%rsp), %r12
    000011e0: 	movss	0xb0(%rsp), %xmm5
    000011e9: 	movss	0xb4(%rsp), %xmm6
    000011f2: 	movq	%r12, %r14
    000011f5: 	movl	%ebp, %r12d
    000011f8: 	movl	%ebx, %ebp
    000011fa: 	movq	0x60(%rsp), %rbx
    000011ff: 	movss	%xmm5, 0x8(%rsp)
    00001205: 	movss	%xmm6, 0x10(%rsp)
    0000120b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp686:
    00001210: 	movq	%r14, %rdx
    00001213: 	movq	%r13, %rsi
    00001216: 	movq	%r14, %rdi
    00001219: 	addl	$0x1, %r12d
    0000121d: 	callq	_ZNSt19normal_distributionIfEclISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEEfRT_RKNS0_10param_typeE # Offset: 4637
    00001222: 	mulss	0x10(%rsp), %xmm0
    00001228: 	addss	0x8(%rsp), %xmm0
    0000122e: 	callq	expf@PLT # Offset: 4654
    00001233: 	cvtss2sd	%xmm0, %xmm0
    00001237: 	addsd	(%rbx), %xmm0
    0000123b: 	movsd	%xmm0, (%rbx)
    0000123f: 	cmpl	%ebp, %r12d
    00001242: 	jne	.Ltmp686 # Offset: 4674
    00001244: 	movq	0x30(%rsp), %r14
.Ltmp685:
    00001249: 	movq	(%rsp), %rbx
    0000124d: 	movq	0x30(%rbx), %rax
    00001251: 	movq	0x48(%rbx), %rdx
    00001255: 	cmpq	0x38(%rbx), %rax
    00001259: 	je	.Ltmp687 # Offset: 4697
.Ltmp698:
    0000125f: 	movq	-0x20(%rax), %rbp
    00001263: 	callq	clock@PLT # Offset: 4707
    00001268: 	pxor	%xmm0, %xmm0
    0000126c: 	movq	%rax, end_time(%rip)
    00001273: 	movq	%rbp, %rdi
    00001276: 	subq	start_time(%rip), %rax
    0000127d: 	cvtsi2sd	%rax, %xmm0
    00001282: 	divsd	DATAat0xd2d8(%rip), %xmm0
    0000128a: 	callq	_Z13record_resultdPKc # Offset: 4746
    0000128f: 	movq	0x170(%rsp), %rdi
    00001297: 	cmpq	%r14, %rdi
    0000129a: 	je	.Ltmp688 # Offset: 4762
    0000129c: 	movq	0x180(%rsp), %rax
    000012a4: 	leaq	0x1(%rax), %rsi
    000012a8: 	callq	_ZdlPvm@PLT # Offset: 4776
.Ltmp688:
    000012ad: 	movq	0x150(%rsp), %rdi
    000012b5: 	cmpq	0x28(%rsp), %rdi
    000012ba: 	je	.Ltmp689 # Offset: 4794
    000012bc: 	movq	0x160(%rsp), %rax
    000012c4: 	leaq	0x1(%rax), %rsi
    000012c8: 	callq	_ZdlPvm@PLT # Offset: 4808
.Ltmp689:
    000012cd: 	movq	0x130(%rsp), %rdi
    000012d5: 	cmpq	0x20(%rsp), %rdi
    000012da: 	je	.Ltmp690 # Offset: 4826
    000012dc: 	movq	0x140(%rsp), %rax
    000012e4: 	leaq	0x1(%rax), %rsi
    000012e8: 	callq	_ZdlPvm@PLT # Offset: 4840
.Ltmp690:
    000012ed: 	movq	0x110(%rsp), %rdi
    000012f5: 	cmpq	0x18(%rsp), %rdi
    000012fa: 	je	.Ltmp691 # Offset: 4858
    000012fc: 	movq	0x120(%rsp), %rax
    00001304: 	leaq	0x1(%rax), %rsi
    00001308: 	callq	_ZdlPvm@PLT # Offset: 4872
.Ltmp691:
    0000130d: 	movq	0xf0(%rsp), %rdi
    00001315: 	cmpq	%r15, %rdi
    00001318: 	je	.Ltmp692 # Offset: 4888
    0000131a: 	movq	0x100(%rsp), %rax
    00001322: 	leaq	0x1(%rax), %rsi
    00001326: 	callq	_ZdlPvm@PLT # Offset: 4902
.Ltmp692:
    0000132b: 	movq	0xd0(%rsp), %rdi
    00001333: 	cmpq	0x78(%rsp), %rdi
    00001338: 	je	.Ltmp693 # Offset: 4920
    0000133a: 	movq	0xe0(%rsp), %rax
    00001342: 	leaq	0x1(%rax), %rsi
    00001346: 	callq	_ZdlPvm@PLT # Offset: 4934
.Ltmp693:
    0000134b: 	movq	0x198(%rsp), %rax
    00001353: 	subq	%fs:0x28, %rax
    0000135c: 	jne	.Ltmp694 # Offset: 4956
    00001362: 	addq	$0x1a8, %rsp
    00001369: 	popq	%rbx
    0000136a: 	popq	%rbp
    0000136b: 	popq	%r12
    0000136d: 	popq	%r13
    0000136f: 	popq	%r14
    00001371: 	popq	%r15
    00001373: 	retq # Offset: 4979
.Ltmp653:
    00001374: 	movsd	DATAat0xd300(%rip), %xmm0
    0000137c: 	jmp	.Ltmp695 # Offset: 4988
.Ltmp632:
    00001381: 	movq	%rdi, %r9
    00001384: 	movq	0x70(%rsp), %r15
    00001389: 	movq	0x68(%rsp), %rbx
    0000138e: 	movq	%rsi, %r8
    00001391: 	movq	0x88(%rsp), %r13
    00001399: 	movq	%rcx, %rdi
    0000139c: 	jmp	.Ltmp696 # Offset: 5020
.Ltmp635:
    000013a1: 	movq	-0x8(%rdx), %rax
    000013a5: 	addq	$0x200, %rax
    000013ab: 	jmp	.Ltmp697 # Offset: 5035
.Ltmp687:
    000013b0: 	movq	-0x8(%rdx), %rax
    000013b4: 	addq	$0x200, %rax
    000013ba: 	jmp	.Ltmp698 # Offset: 5050
.Ltmp680:
    000013bf: 	movq	(%rsp), %rdi
    000013c3: 	movq	%r12, %rsi
    000013c6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5062
    000013cb: 	jmp	.Ltmp699 # Offset: 5067
.Ltmp678:
    000013d0: 	movq	-0x8(%rdx), %rax
    000013d4: 	addq	$0x200, %rax
    000013da: 	jmp	.Ltmp700 # Offset: 5082
.Ltmp671:
    000013df: 	movq	(%rsp), %rdi
    000013e3: 	movq	%r12, %rsi
    000013e6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5094
    000013eb: 	jmp	.Ltmp701 # Offset: 5099
.Ltmp669:
    000013f0: 	movq	-0x8(%rdx), %rax
    000013f4: 	addq	$0x200, %rax
    000013fa: 	jmp	.Ltmp702 # Offset: 5114
.Ltmp659:
    000013ff: 	movq	(%rsp), %rdi
    00001403: 	movq	%r12, %rsi
    00001406: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5126
    0000140b: 	jmp	.Ltmp703 # Offset: 5131
.Ltmp657:
    00001410: 	movq	-0x8(%rdx), %rax
    00001414: 	addq	$0x200, %rax
    0000141a: 	jmp	.Ltmp704 # Offset: 5146
.Ltmp625:
    0000141f: 	movq	(%rsp), %rdi
    00001423: 	movq	%rbp, %rsi
    00001426: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5158
    0000142b: 	jmp	.Ltmp705 # Offset: 5163
.Ltmp646:
    00001430: 	movq	(%rsp), %rdi
    00001434: 	movq	%r12, %rsi
    00001437: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5175
    0000143c: 	jmp	.Ltmp706 # Offset: 5180
.Ltmp644:
    00001441: 	movq	-0x8(%rdx), %rax
    00001445: 	addq	$0x200, %rax
    0000144b: 	jmp	.Ltmp707 # Offset: 5195
.Ltmp637:
    00001450: 	movq	(%rsp), %rdi
    00001454: 	movq	%r12, %rsi
    00001457: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5207
    0000145c: 	jmp	.Ltmp708 # Offset: 5212
.Ltmp640:
    00001461: 	xorl	%edx, %edx
    00001463: 	movq	%rbp, %rsi
    00001466: 	movq	%rbx, %rdi
    00001469: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5225
    0000146e: 	movq	%rax, (%rbx)
    00001471: 	movq	%rax, %rdi
    00001474: 	movq	0x98(%rsp), %rax
    0000147c: 	movq	%rax, 0x10(%rbx)
.Ltmp713:
    00001480: 	movq	%r12, %rdx
    00001483: 	movq	%r14, %rsi
    00001486: 	callq	memcpy@PLT # Offset: 5254
    0000148b: 	movq	0x98(%rsp), %r12
    00001493: 	movq	(%rbx), %rdi
    00001496: 	jmp	.Ltmp709 # Offset: 5270
.Ltmp650:
    0000149b: 	testq	%r12, %r12
    0000149e: 	je	.Ltmp710 # Offset: 5278
    000014a4: 	jmp	.Ltmp711 # Offset: 5284
    000014a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp649:
    000014b0: 	xorl	%edx, %edx
    000014b2: 	movq	%rbp, %rsi
    000014b5: 	movq	%rbx, %rdi
    000014b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5304
    000014bd: 	movq	%rax, (%rbx)
    000014c0: 	movq	%rax, %rdi
    000014c3: 	movq	0x98(%rsp), %rax
    000014cb: 	movq	%rax, 0x10(%rbx)
.Ltmp711:
    000014cf: 	movq	%r12, %rdx
    000014d2: 	movq	%r14, %rsi
    000014d5: 	callq	memcpy@PLT # Offset: 5333
    000014da: 	movq	0x98(%rsp), %r12
    000014e2: 	movq	(%rbx), %rdi
    000014e5: 	jmp	.Ltmp710 # Offset: 5349
.Ltmp662:
    000014ea: 	xorl	%edx, %edx
    000014ec: 	movq	%rbp, %rsi
    000014ef: 	movq	%rbx, %rdi
    000014f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5362
    000014f7: 	movq	%rax, (%rbx)
    000014fa: 	movq	%rax, %rdi
    000014fd: 	movq	0x98(%rsp), %rax
    00001505: 	movq	%rax, 0x10(%rbx)
.Ltmp714:
    00001509: 	movq	%r12, %rdx
    0000150c: 	movq	%r14, %rsi
    0000150f: 	callq	memcpy@PLT # Offset: 5391
    00001514: 	movq	0x98(%rsp), %r12
    0000151c: 	movq	(%rbx), %rdi
    0000151f: 	jmp	.Ltmp712 # Offset: 5407
.Ltmp641:
    00001524: 	testq	%r12, %r12
    00001527: 	je	.Ltmp709 # Offset: 5415
    0000152d: 	jmp	.Ltmp713 # Offset: 5421
    00001532: 	nopw	(%rax,%rax) # Size: 6
.Ltmp663:
    00001538: 	testq	%r12, %r12
    0000153b: 	je	.Ltmp712 # Offset: 5435
    00001541: 	jmp	.Ltmp714 # Offset: 5441
    00001543: 	nopl	(%rax,%rax) # Size: 5
.Ltmp629:
    00001548: 	testq	%r12, %r12
    0000154b: 	je	.Ltmp656 # Offset: 5451
    00001551: 	jmp	.Ltmp715 # Offset: 5457
    00001556: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp675:
    00001560: 	testq	%r12, %r12
    00001563: 	je	.Ltmp716 # Offset: 5475
    00001569: 	jmp	.Ltmp717 # Offset: 5481
    0000156b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp674:
    00001570: 	xorl	%edx, %edx
    00001572: 	movq	%rbp, %rsi
    00001575: 	movq	%rbx, %rdi
    00001578: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5496
    0000157d: 	movq	%rax, (%rbx)
    00001580: 	movq	%rax, %rdi
    00001583: 	movq	0x98(%rsp), %rax
    0000158b: 	movq	%rax, 0x10(%rbx)
.Ltmp717:
    0000158f: 	movq	%r12, %rdx
    00001592: 	movq	%r14, %rsi
    00001595: 	callq	memcpy@PLT # Offset: 5525
    0000159a: 	movq	0x98(%rsp), %r12
    000015a2: 	movq	(%rbx), %rdi
    000015a5: 	jmp	.Ltmp716 # Offset: 5541
.Ltmp684:
    000015aa: 	testq	%r12, %r12
    000015ad: 	je	.Ltmp718 # Offset: 5549
    000015b3: 	jmp	.Ltmp719 # Offset: 5555
    000015b5: 	nopl	(%rax) # Size: 3
.Ltmp683:
    000015b8: 	xorl	%edx, %edx
    000015ba: 	movq	%rbp, %rsi
    000015bd: 	movq	%rbx, %rdi
    000015c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5568
    000015c5: 	movq	%rax, (%rbx)
    000015c8: 	movq	%rax, %rdi
    000015cb: 	movq	0x98(%rsp), %rax
    000015d3: 	movq	%rax, 0x10(%rbx)
.Ltmp719:
    000015d7: 	movq	0x8(%rsp), %rsi
    000015dc: 	movq	%r12, %rdx
    000015df: 	callq	memcpy@PLT # Offset: 5599
    000015e4: 	movq	0x98(%rsp), %r12
    000015ec: 	movq	(%rbx), %rdi
    000015ef: 	jmp	.Ltmp718 # Offset: 5615
.Ltmp636:
    000015f4: 	leaq	DATAat0xd2aa(%rip), %rdi
    000015fb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5627
.Ltmp639:
    00001600: 	leaq	DATAat0xd280(%rip), %rdi
    00001607: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5639
.Ltmp645:
    0000160c: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001613: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5651
.Ltmp648:
    00001618: 	leaq	DATAat0xd280(%rip), %rdi
    0000161f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5663
.Ltmp627:
    00001624: 	leaq	DATAat0xd280(%rip), %rdi
    0000162b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5675
.Ltmp658:
    00001630: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001637: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5687
.Ltmp661:
    0000163c: 	leaq	DATAat0xd280(%rip), %rdi
    00001643: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5699
.Ltmp670:
    00001648: 	leaq	DATAat0xd2aa(%rip), %rdi
    0000164f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5711
.Ltmp673:
    00001654: 	leaq	DATAat0xd280(%rip), %rdi
    0000165b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5723
.Ltmp679:
    00001660: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001667: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5735
.Ltmp682:
    0000166c: 	leaq	DATAat0xd280(%rip), %rdi
    00001673: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5747
.Ltmp694:
    00001678: 	callq	__stack_chk_fail@PLT # Offset: 5752
.Ltmp624:
    0000167d: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001684: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5764
    00001689: 	endbr64
    0000168d: 	movq	%rax, %rbp
    00001690: 	jmp	.Ltmp720 # Offset: 5776
    00001692: 	endbr64
    00001696: 	movq	%rax, %rbp
    00001699: 	jmp	.Ltmp721 # Offset: 5785
.Ltmp726:
    0000169b: 	movq	0x170(%rsp), %rdi
    000016a3: 	cmpq	%r14, %rdi
    000016a6: 	je	.Ltmp721 # Offset: 5798
    000016a8: 	movq	0x180(%rsp), %rax
    000016b0: 	leaq	0x1(%rax), %rsi
    000016b4: 	callq	_ZdlPvm@PLT # Offset: 5812
.Ltmp721:
    000016b9: 	movq	0x150(%rsp), %rdi
    000016c1: 	cmpq	0x28(%rsp), %rdi
    000016c6: 	je	.Ltmp720 # Offset: 5830
    000016c8: 	movq	0x160(%rsp), %rax
    000016d0: 	leaq	0x1(%rax), %rsi
    000016d4: 	callq	_ZdlPvm@PLT # Offset: 5844
.Ltmp720:
    000016d9: 	movq	0x130(%rsp), %rdi
    000016e1: 	cmpq	0x20(%rsp), %rdi
    000016e6: 	je	.Ltmp722 # Offset: 5862
    000016e8: 	movq	0x140(%rsp), %rax
    000016f0: 	leaq	0x1(%rax), %rsi
    000016f4: 	callq	_ZdlPvm@PLT # Offset: 5876
.Ltmp722:
    000016f9: 	movq	0x110(%rsp), %rdi
    00001701: 	cmpq	0x18(%rsp), %rdi
    00001706: 	je	.Ltmp723 # Offset: 5894
    00001708: 	movq	0x120(%rsp), %rax
    00001710: 	leaq	0x1(%rax), %rsi
    00001714: 	callq	_ZdlPvm@PLT # Offset: 5908
.Ltmp723:
    00001719: 	movq	0xf0(%rsp), %rdi
    00001721: 	cmpq	%r15, %rdi
    00001724: 	je	.Ltmp724 # Offset: 5924
    00001726: 	movq	0x100(%rsp), %rax
    0000172e: 	leaq	0x1(%rax), %rsi
    00001732: 	callq	_ZdlPvm@PLT # Offset: 5938
.Ltmp724:
    00001737: 	movq	0xd0(%rsp), %rdi
    0000173f: 	cmpq	0x78(%rsp), %rdi
    00001744: 	je	.Ltmp725 # Offset: 5956
    00001746: 	movq	0xe0(%rsp), %rax
    0000174e: 	leaq	0x1(%rax), %rsi
    00001752: 	callq	_ZdlPvm@PLT # Offset: 5970
.Ltmp725:
    00001757: 	movq	%rbp, %rdi
    0000175a: 	callq	_Unwind_Resume@PLT # Offset: 5978
    0000175f: 	endbr64
    00001763: 	movq	%rax, %rbp
    00001766: 	jmp	.Ltmp726 # Offset: 5990
    0000176b: 	endbr64
    0000176f: 	movq	%rax, %rbp
    00001772: 	jmp	.Ltmp724 # Offset: 6002
    00001774: 	endbr64
    00001778: 	movq	%rax, %rbp
    0000177b: 	jmp	.Ltmp723 # Offset: 6011
    0000177d: 	endbr64
    00001781: 	movq	%rax, %rbp
    00001784: 	jmp	.Ltmp722 # Offset: 6020
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_one_generatorISt20discard_block_engineISt26subtract_with_carry_engineImLm48ELm5ELm12EELm389ELm11EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISG_EE"

Binary Function "_ZNSt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EE11_M_gen_randEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0xb260
  Size        : 0x108
  MaxSize     : 0x110
  Offset      : 0xb260
  Section     : .text
  Orc Section : .local.text._ZNSt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EE11_M_gen_randEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	movabsq	$-0x4afd90a55699e617, %r10
    0000000e: 	movq	%rdi, %r8
    00000011: 	movq	(%rdi), %rdi
    00000014: 	movq	%r8, %rax
    00000017: 	leaq	0x4e0(%r8), %r9
    0000001e: 	movq	%r8, %rdx
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp728:
    00000028: 	andq	$-0x80000000, %rdi
    0000002f: 	movq	%rdi, %rcx
    00000032: 	movq	0x8(%rdx), %rdi
    00000036: 	movq	%rdi, %rsi
    00000039: 	andl	$0x7fffffff, %esi
    0000003f: 	orq	%rcx, %rsi
    00000042: 	movq	%rsi, %rcx
    00000045: 	shrq	%rcx
    00000048: 	xorq	0x4e0(%rdx), %rcx
    0000004f: 	andl	$0x1, %esi
    00000052: 	je	.Ltmp727 # Offset: 82
    00000054: 	xorq	%r10, %rcx
.Ltmp727:
    00000057: 	movq	%rcx, (%rdx)
    0000005a: 	addq	$0x8, %rdx
    0000005e: 	cmpq	%r9, %rdx
    00000061: 	jne	.Ltmp728 # Offset: 97
    00000063: 	movq	0x4e0(%r8), %rsi
    0000006a: 	leaq	0x4d8(%r8), %rdi
    00000071: 	movabsq	$-0x4afd90a55699e617, %r9
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp730:
    00000080: 	andq	$-0x80000000, %rsi
    00000087: 	movq	%rsi, %rdx
    0000008a: 	movq	0x4e8(%rax), %rsi
    00000091: 	movq	%rsi, %rcx
    00000094: 	andl	$0x7fffffff, %ecx
    0000009a: 	orq	%rdx, %rcx
    0000009d: 	movq	%rcx, %rdx
    000000a0: 	shrq	%rdx
    000000a3: 	xorq	(%rax), %rdx
    000000a6: 	andl	$0x1, %ecx
    000000a9: 	je	.Ltmp729 # Offset: 169
    000000ab: 	xorq	%r9, %rdx
.Ltmp729:
    000000ae: 	movq	%rdx, 0x4e0(%rax)
    000000b5: 	addq	$0x8, %rax
    000000b9: 	cmpq	%rdi, %rax
    000000bc: 	jne	.Ltmp730 # Offset: 188
    000000be: 	movq	0x9b8(%r8), %rax
    000000c5: 	movq	(%r8), %rdx
    000000c8: 	andq	$-0x80000000, %rax
    000000ce: 	andl	$0x7fffffff, %edx
    000000d4: 	orq	%rdx, %rax
    000000d7: 	movq	%rax, %rdx
    000000da: 	shrq	%rdx
    000000dd: 	xorq	0x4d8(%r8), %rdx
    000000e4: 	testb	$0x1, %al
    000000e6: 	je	.Ltmp731 # Offset: 230
    000000e8: 	movabsq	$-0x4afd90a55699e617, %rax
    000000f2: 	xorq	%rax, %rdx
.Ltmp731:
    000000f5: 	movq	%rdx, 0x9b8(%r8)
    000000fc: 	movq	$0x0, 0x9c0(%r8)
    00000107: 	retq # Offset: 263
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EE11_M_gen_randEv"

Binary Function "_ZNSt19normal_distributionIfEclISt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EEEEfRT_RKNS0_10param_typeE" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0xb370
  Size        : 0x30c
  MaxSize     : 0x310
  Offset      : 0xb370
  Section     : .text
  Orc Section : .local.text._ZNSt19normal_distributionIfEclISt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EEEEfRT_RKNS0_10param_typeE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdx, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	cmpb	$0x0, 0xc(%rdi)
    0000001c: 	jne	.Ltmp732 # Offset: 28
    00000022: 	movq	0x9c0(%rsi), %rdx
    00000029: 	movss	DATAat0xd34c(%rip), %xmm6
    00000031: 	movq	%rsi, %r12
    00000034: 	pxor	%xmm5, %xmm5
    00000038: 	movss	DATAat0xd35c(%rip), %xmm3
    00000040: 	movabsq	$0x5555555555555555, %r15
    0000004a: 	movabsq	$0x71d67fffeda60000, %r14
    00000054: 	movabsq	$-0x8112000000000, %r13
    0000005e: 	nop # Size: 2
.Ltmp739:
    00000060: 	cmpq	$0x137, %rdx
    00000067: 	ja	.Ltmp733 # Offset: 103
.Ltmp747:
    0000006d: 	movq	(%r12,%rdx,8), %rax
    00000071: 	leaq	0x1(%rdx), %rcx
    00000075: 	movq	%rcx, 0x9c0(%r12)
    0000007d: 	movq	%rax, %rdx
    00000080: 	shrq	$0x1d, %rdx
    00000084: 	andq	%r15, %rdx
    00000087: 	xorq	%rdx, %rax
    0000008a: 	movq	%rax, %rdx
    0000008d: 	shlq	$0x11, %rdx
    00000091: 	andq	%r14, %rdx
    00000094: 	xorq	%rdx, %rax
    00000097: 	movq	%rax, %rdx
    0000009a: 	shlq	$0x25, %rdx
    0000009e: 	andq	%r13, %rdx
    000000a1: 	xorq	%rdx, %rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	shrq	$0x2b, %rdx
    000000ab: 	xorq	%rdx, %rax
    000000ae: 	js	.Ltmp734 # Offset: 174
    000000b4: 	pxor	%xmm0, %xmm0
    000000b8: 	cvtsi2ss	%rax, %xmm0
    000000bd: 	addss	%xmm5, %xmm0
    000000c1: 	mulss	%xmm6, %xmm0
    000000c5: 	comiss	%xmm3, %xmm0
    000000c8: 	jae	.Ltmp735 # Offset: 200
.Ltmp745:
    000000ce: 	addss	%xmm0, %xmm0
    000000d2: 	movaps	%xmm0, %xmm2
    000000d5: 	subss	%xmm3, %xmm2
    000000d9: 	cmpq	$0x137, %rcx
    000000e0: 	ja	.Ltmp736 # Offset: 224
.Ltmp746:
    000000e6: 	movq	(%r12,%rcx,8), %rax
    000000ea: 	leaq	0x1(%rcx), %rdx
    000000ee: 	movq	%rdx, 0x9c0(%r12)
    000000f6: 	movq	%rax, %rcx
    000000f9: 	shrq	$0x1d, %rcx
    000000fd: 	andq	%r15, %rcx
    00000100: 	xorq	%rcx, %rax
    00000103: 	movq	%rax, %rcx
    00000106: 	shlq	$0x11, %rcx
    0000010a: 	andq	%r14, %rcx
    0000010d: 	xorq	%rcx, %rax
    00000110: 	movq	%rax, %rcx
    00000113: 	shlq	$0x25, %rcx
    00000117: 	andq	%r13, %rcx
    0000011a: 	xorq	%rcx, %rax
    0000011d: 	movq	%rax, %rcx
    00000120: 	shrq	$0x2b, %rcx
    00000124: 	xorq	%rcx, %rax
    00000127: 	js	.Ltmp737 # Offset: 295
    0000012d: 	pxor	%xmm0, %xmm0
    00000131: 	cvtsi2ss	%rax, %xmm0
    00000136: 	addss	%xmm5, %xmm0
    0000013a: 	mulss	%xmm6, %xmm0
    0000013e: 	comiss	%xmm3, %xmm0
    00000141: 	jae	.Ltmp738 # Offset: 321
.Ltmp743:
    00000147: 	addss	%xmm0, %xmm0
    0000014b: 	movaps	%xmm0, %xmm1
    0000014e: 	subss	%xmm3, %xmm1
    00000152: 	movaps	%xmm1, %xmm0
    00000155: 	mulss	%xmm1, %xmm0
.Ltmp744:
    00000159: 	movaps	%xmm2, %xmm4
    0000015c: 	mulss	%xmm2, %xmm4
    00000160: 	addss	%xmm0, %xmm4
    00000164: 	comiss	%xmm3, %xmm4
    00000167: 	ja	.Ltmp739 # Offset: 359
    0000016d: 	ucomiss	%xmm5, %xmm4
    00000170: 	jp	.Ltmp740 # Offset: 368
    00000172: 	je	.Ltmp739 # Offset: 370
.Ltmp740:
    00000178: 	movaps	%xmm4, %xmm0
    0000017b: 	movss	%xmm2, 0xc(%rsp)
    00000181: 	movss	%xmm1, 0x8(%rsp)
    00000187: 	movss	%xmm4, 0x4(%rsp)
    0000018d: 	callq	logf@PLT # Offset: 397
    00000192: 	movss	0x4(%rsp), %xmm4
    00000198: 	pxor	%xmm5, %xmm5
    0000019c: 	movss	0x8(%rsp), %xmm1
    000001a2: 	mulss	DATAat0xd300(%rip), %xmm0
    000001aa: 	movss	0xc(%rsp), %xmm2
    000001b0: 	divss	%xmm4, %xmm0
    000001b4: 	ucomiss	%xmm0, %xmm5
    000001b7: 	ja	.Ltmp741 # Offset: 439
    000001bd: 	sqrtss	%xmm0, %xmm0
.Ltmp748:
    000001c1: 	mulss	%xmm0, %xmm2
    000001c5: 	movb	$0x1, 0xc(%rbx)
    000001c9: 	mulss	%xmm1, %xmm0
    000001cd: 	movss	%xmm2, 0x8(%rbx)
    000001d2: 	jmp	.Ltmp742 # Offset: 466
    000001d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp737:
    000001e0: 	movq	%rax, %rcx
    000001e3: 	andl	$0x1, %eax
    000001e6: 	pxor	%xmm0, %xmm0
    000001ea: 	shrq	%rcx
    000001ed: 	orq	%rax, %rcx
    000001f0: 	cvtsi2ss	%rcx, %xmm0
    000001f5: 	addss	%xmm0, %xmm0
    000001f9: 	addss	%xmm5, %xmm0
    000001fd: 	mulss	%xmm6, %xmm0
    00000201: 	comiss	%xmm3, %xmm0
    00000204: 	jb	.Ltmp743 # Offset: 516
.Ltmp738:
    0000020a: 	movss	DATAat0xd330(%rip), %xmm0
    00000212: 	movss	DATAat0xd334(%rip), %xmm1
    0000021a: 	jmp	.Ltmp744 # Offset: 538
    0000021f: 	nop # Size: 1
.Ltmp734:
    00000220: 	movq	%rax, %rdx
    00000223: 	andl	$0x1, %eax
    00000226: 	pxor	%xmm0, %xmm0
    0000022a: 	shrq	%rdx
    0000022d: 	orq	%rax, %rdx
    00000230: 	cvtsi2ss	%rdx, %xmm0
    00000235: 	addss	%xmm0, %xmm0
    00000239: 	addss	%xmm5, %xmm0
    0000023d: 	mulss	%xmm6, %xmm0
    00000241: 	comiss	%xmm3, %xmm0
    00000244: 	jb	.Ltmp745 # Offset: 580
.Ltmp735:
    0000024a: 	movss	DATAat0xd334(%rip), %xmm2
    00000252: 	cmpq	$0x137, %rcx
    00000259: 	jbe	.Ltmp746 # Offset: 601
    0000025f: 	nop # Size: 1
.Ltmp736:
    00000260: 	movq	%r12, %rdi
    00000263: 	movss	%xmm2, 0x4(%rsp)
    00000269: 	callq	_ZNSt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EE11_M_gen_randEv # Offset: 617
    0000026e: 	movss	0x4(%rsp), %xmm2
    00000274: 	pxor	%xmm5, %xmm5
    00000278: 	movq	0x9c0(%r12), %rcx
    00000280: 	movss	DATAat0xd34c(%rip), %xmm6
    00000288: 	movss	DATAat0xd35c(%rip), %xmm3
    00000290: 	jmp	.Ltmp746 # Offset: 656
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp733:
    00000298: 	movq	%r12, %rdi
    0000029b: 	callq	_ZNSt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EE11_M_gen_randEv # Offset: 667
    000002a0: 	movq	0x9c0(%r12), %rdx
    000002a8: 	pxor	%xmm5, %xmm5
    000002ac: 	movss	DATAat0xd34c(%rip), %xmm6
    000002b4: 	movss	DATAat0xd35c(%rip), %xmm3
    000002bc: 	jmp	.Ltmp747 # Offset: 700
    000002c1: 	nopl	(%rax) # Size: 7
.Ltmp732:
    000002c8: 	movb	$0x0, 0xc(%rdi)
    000002cc: 	movss	0x8(%rdi), %xmm0
.Ltmp742:
    000002d1: 	mulss	0x4(%rbp), %xmm0
    000002d6: 	addss	(%rbp), %xmm0
    000002db: 	addq	$0x18, %rsp
    000002df: 	popq	%rbx
    000002e0: 	popq	%rbp
    000002e1: 	popq	%r12
    000002e3: 	popq	%r13
    000002e5: 	popq	%r14
    000002e7: 	popq	%r15
    000002e9: 	retq # Offset: 745
.Ltmp741:
    000002ea: 	movss	%xmm2, 0x8(%rsp)
    000002f0: 	movss	%xmm1, 0x4(%rsp)
    000002f6: 	callq	sqrtf@PLT # Offset: 758
    000002fb: 	movss	0x8(%rsp), %xmm2
    00000301: 	movss	0x4(%rsp), %xmm1
    00000307: 	jmp	.Ltmp748 # Offset: 775
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt19normal_distributionIfEclISt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EEEEfRT_RKNS0_10param_typeE"

Binary Function "_Z18test_one_generatorISt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EE" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0xb680
  Size        : 0x12a7
  MaxSize     : 0x12a7
  Offset      : 0xb680
  Section     : .text
  Orc Section : .local.text._Z18test_one_generatorISt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	movq	%rsi, %rdi
    0000001a: 	subq	$0x158, %rsp
    00000021: 	movaps	DATAat0xd350(%rip), %xmm0
    00000028: 	movq	%rdx, 0x20(%rsp)
    0000002d: 	movq	%rsi, (%rsp)
    00000031: 	movq	%fs:0x28, %rax
    0000003a: 	movq	%rax, 0x148(%rsp)
    00000042: 	xorl	%eax, %eax
    00000044: 	movq	DATAat0xd2f8(%rip), %rax
    0000004b: 	movb	$0x0, 0x5c(%rsp)
    00000050: 	movl	$0x0, 0x58(%rsp)
    00000058: 	movq	%rax, 0x50(%rsp)
    0000005d: 	leaq	0x90(%rsp), %rax
    00000065: 	movq	$0x0, 0x70(%rsp)
    0000006e: 	movq	%rax, 0x10(%rsp)
    00000073: 	movq	%rax, 0x80(%rsp)
    0000007b: 	movl	$0x64656573, 0x90(%rsp)
    00000086: 	movb	$0x20, 0x94(%rsp)
    0000008e: 	movq	$0x5, 0x88(%rsp)
    0000009a: 	movb	$0x0, 0x95(%rsp)
    000000a2: 	movaps	%xmm0, 0x60(%rsp)
    000000a7: 	callq	strlen@PLT # Offset: 167
    000000ac: 	movq	%rax, %rdx
    000000af: 	movabsq	$0x3ffffffffffffffa, %rax
    000000b9: 	cmpq	%rax, %rdx
    000000bc: 	ja	.Ltmp749 # Offset: 188
    000000c2: 	leaq	0x80(%rsp), %r12
    000000ca: 	movq	(%rsp), %rsi
    000000ce: 	movq	%r12, %rdi
    000000d1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 209
    000000d6: 	movq	0x40(%r14), %rax
    000000da: 	movq	0x30(%r14), %rbp
    000000de: 	subq	$0x20, %rax
    000000e2: 	cmpq	%rax, %rbp
    000000e5: 	je	.Ltmp750 # Offset: 229
    000000eb: 	leaq	0x10(%rbp), %rdi
    000000ef: 	movq	0x88(%rsp), %r12
    000000f7: 	movq	%rdi, (%rbp)
    000000fb: 	movq	0x80(%rsp), %r13
    00000103: 	movq	%r13, %rax
    00000106: 	addq	%r12, %rax
    00000109: 	je	.Ltmp751 # Offset: 265
    0000010b: 	testq	%r13, %r13
    0000010e: 	je	.Ltmp752 # Offset: 270
.Ltmp751:
    00000114: 	movq	%r12, 0x48(%rsp)
    00000119: 	cmpq	$0xf, %r12
    0000011d: 	ja	.Ltmp753 # Offset: 285
    00000123: 	cmpq	$0x1, %r12
    00000127: 	jne	.Ltmp754 # Offset: 295
    0000012d: 	movzbl	(%r13), %eax
    00000132: 	movb	%al, 0x10(%rbp)
.Ltmp759:
    00000135: 	movq	%r12, 0x8(%rbp)
    00000139: 	movb	$0x0, (%rdi,%r12)
    0000013e: 	addq	$0x20, 0x30(%r14)
.Ltmp829:
    00000143: 	callq	clock@PLT # Offset: 323
    00000148: 	movq	%rax, start_time(%rip)
    0000014f: 	movl	iterations(%rip), %eax
    00000155: 	testl	%eax, %eax
    00000157: 	je	.Ltmp755 # Offset: 343
    0000015d: 	movslq	init_value(%rip), %rcx
    00000164: 	leal	-0x1(%rax), %r8d
    00000168: 	movabsq	$0x5851f42d4c957f2d, %rsi
    00000172: 	leaq	0x1(%rcx), %rdi
    00000176: 	addq	%rdi, %r8
.Ltmp758:
    00000179: 	movq	%rcx, (%rbx)
    0000017c: 	movl	$0x1, %edx
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp756:
    00000188: 	movq	%rcx, %rax
    0000018b: 	shrq	$0x3e, %rax
    0000018f: 	xorq	%rcx, %rax
    00000192: 	imulq	%rsi, %rax
    00000196: 	leaq	(%rax,%rdx), %rcx
    0000019a: 	movq	%rcx, (%rbx,%rdx,8)
    0000019e: 	addq	$0x1, %rdx
    000001a2: 	cmpq	$0x138, %rdx
    000001a9: 	jne	.Ltmp756 # Offset: 425
    000001ab: 	movq	%rdi, %rcx
    000001ae: 	cmpq	%r8, %rdi
    000001b1: 	je	.Ltmp757 # Offset: 433
    000001b3: 	addq	$0x1, %rdi
    000001b7: 	jmp	.Ltmp758 # Offset: 439
.Ltmp753:
    000001b9: 	leaq	0x48(%rsp), %rsi
    000001be: 	xorl	%edx, %edx
    000001c0: 	movq	%rbp, %rdi
    000001c3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 451
    000001c8: 	movq	%rax, (%rbp)
    000001cc: 	movq	%rax, %rdi
    000001cf: 	movq	0x48(%rsp), %rax
    000001d4: 	movq	%rax, 0x10(%rbp)
.Ltmp841:
    000001d8: 	movq	%r12, %rdx
    000001db: 	movq	%r13, %rsi
    000001de: 	callq	memcpy@PLT # Offset: 478
    000001e3: 	movq	0x48(%rsp), %r12
    000001e8: 	movq	(%rbp), %rdi
    000001ec: 	jmp	.Ltmp759 # Offset: 492
.Ltmp757:
    000001f1: 	movq	$0x138, 0x9c0(%rbx)
.Ltmp755:
    000001fc: 	movq	0x30(%r14), %rax
    00000200: 	movq	0x48(%r14), %rdx
    00000204: 	cmpq	%rax, 0x38(%r14)
    00000208: 	je	.Ltmp760 # Offset: 520
.Ltmp840:
    0000020e: 	movq	-0x20(%rax), %rbp
    00000212: 	callq	clock@PLT # Offset: 530
    00000217: 	pxor	%xmm0, %xmm0
    0000021b: 	movq	%rax, end_time(%rip)
    00000222: 	movq	%rbp, %rdi
    00000225: 	subq	start_time(%rip), %rax
    0000022c: 	cvtsi2sd	%rax, %xmm0
    00000231: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000239: 	callq	_Z13record_resultdPKc # Offset: 569
    0000023e: 	leaq	0xb0(%rsp), %rax
    00000246: 	xorl	%edx, %edx
    00000248: 	leaq	0xa0(%rsp), %r12
    00000250: 	movq	$0x19, 0x48(%rsp)
    00000259: 	movq	%rax, 0x18(%rsp)
    0000025e: 	movq	%r12, %rdi
    00000261: 	movq	%rax, 0xa0(%rsp)
    00000269: 	leaq	0x48(%rsp), %rax
    0000026e: 	movq	%rax, %rsi
    00000271: 	movq	%rax, 0x8(%rsp)
    00000276: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 630
    0000027b: 	movq	0x48(%rsp), %rdx
    00000280: 	movdqa	DATAat0xd360(%rip), %xmm0
    00000288: 	movb	$0x20, 0x18(%rax)
    0000028c: 	movabsq	$0x6e6f697475626972, %rdi
    00000296: 	movq	%rax, 0xa0(%rsp)
    0000029e: 	movq	%rdx, 0xb0(%rsp)
    000002a6: 	movups	%xmm0, (%rax)
    000002a9: 	movq	0xa0(%rsp), %rdx
    000002b1: 	movq	%rdi, 0x10(%rax)
    000002b5: 	movq	0x48(%rsp), %rax
    000002ba: 	movq	(%rsp), %rdi
    000002be: 	movq	%rax, 0xa8(%rsp)
    000002c6: 	movb	$0x0, (%rdx,%rax)
    000002ca: 	callq	strlen@PLT # Offset: 714
    000002cf: 	movq	%rax, %rdx
    000002d2: 	movabsq	$0x3fffffffffffffff, %rax
    000002dc: 	subq	0xa8(%rsp), %rax
    000002e4: 	cmpq	%rax, %rdx
    000002e7: 	ja	.Ltmp761 # Offset: 743
    000002ed: 	movq	(%rsp), %rsi
    000002f1: 	movq	%r12, %rdi
    000002f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 756
    000002f9: 	movq	0x40(%r14), %rax
    000002fd: 	movq	0x30(%r14), %rbp
    00000301: 	subq	$0x20, %rax
    00000305: 	cmpq	%rax, %rbp
    00000308: 	je	.Ltmp762 # Offset: 776
    0000030e: 	leaq	0x10(%rbp), %rdi
    00000312: 	movq	0xa8(%rsp), %r12
    0000031a: 	movq	%rdi, (%rbp)
    0000031e: 	movq	0xa0(%rsp), %r13
    00000326: 	movq	%r13, %rax
    00000329: 	addq	%r12, %rax
    0000032c: 	je	.Ltmp763 # Offset: 812
    0000032e: 	testq	%r13, %r13
    00000331: 	je	.Ltmp764 # Offset: 817
.Ltmp763:
    00000337: 	movq	%r12, 0x48(%rsp)
    0000033c: 	cmpq	$0xf, %r12
    00000340: 	ja	.Ltmp765 # Offset: 832
    00000346: 	cmpq	$0x1, %r12
    0000034a: 	jne	.Ltmp766 # Offset: 842
    00000350: 	movzbl	(%r13), %eax
    00000355: 	movb	%al, 0x10(%rbp)
.Ltmp845:
    00000358: 	movq	%r12, 0x8(%rbp)
    0000035c: 	movb	$0x0, (%rdi,%r12)
    00000361: 	addq	$0x20, 0x30(%r14)
.Ltmp839:
    00000366: 	callq	clock@PLT # Offset: 870
    0000036b: 	movl	iterations(%rip), %edi
    00000371: 	movq	%rax, start_time(%rip)
    00000378: 	testl	%edi, %edi
    0000037a: 	je	.Ltmp767 # Offset: 890
    00000380: 	xorl	%ecx, %ecx
    00000382: 	movq	%r15, 0x28(%rsp)
    00000387: 	movq	0x9c0(%rbx), %rdi
    0000038e: 	movq	%rbx, %r15
    00000391: 	movabsq	$0x5555555555555555, %r8
    0000039b: 	movq	0x20(%rsp), %rbx
    000003a0: 	movl	$0x4e1f, %ebp
    000003a5: 	movq	%r14, 0x20(%rsp)
    000003aa: 	movabsq	$0x71d67fffeda60000, %r13
    000003b4: 	movl	%ecx, %r14d
    000003b7: 	movabsq	$-0x8112000000000, %r12
.Ltmp772:
    000003c1: 	cmpq	$0x137, %rdi
    000003c8: 	ja	.Ltmp768 # Offset: 968
.Ltmp801:
    000003ce: 	leaq	0x1(%rdi), %rsi
    000003d2: 	movq	(%r15,%rdi,8), %rax
    000003d6: 	movq	%rsi, 0x9c0(%r15)
    000003dd: 	jmp	.Ltmp769 # Offset: 989
    000003df: 	nop # Size: 1
.Ltmp771:
    000003e0: 	leaq	0x1(%rax), %rsi
    000003e4: 	movq	(%r15,%rax,8), %rax
    000003e8: 	movq	%rsi, 0x9c0(%r15)
.Ltmp769:
    000003ef: 	movq	%rax, %rdx
    000003f2: 	shrq	$0x1d, %rdx
    000003f6: 	andq	%r8, %rdx
    000003f9: 	xorq	%rdx, %rax
    000003fc: 	movq	%rax, %rdx
    000003ff: 	shlq	$0x11, %rdx
    00000403: 	andq	%r13, %rdx
    00000406: 	xorq	%rdx, %rax
    00000409: 	movq	%rax, %rdx
    0000040c: 	shlq	$0x25, %rdx
    00000410: 	andq	%r12, %rdx
    00000413: 	xorq	%rdx, %rax
    00000416: 	movq	%rax, %rdx
    00000419: 	shrq	$0x2b, %rdx
    0000041d: 	xorq	%rdx, %rax
    00000420: 	mulq	%rbp
    00000423: 	cmpq	$0xca3, %rax
    00000429: 	ja	.Ltmp770 # Offset: 1065
    0000042b: 	movq	%rsi, %rax
    0000042e: 	cmpq	$0x137, %rsi
    00000435: 	jbe	.Ltmp771 # Offset: 1077
    00000437: 	movq	%r15, %rdi
    0000043a: 	callq	_ZNSt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EE11_M_gen_randEv # Offset: 1082
    0000043f: 	movq	0x9c0(%r15), %rax
    00000446: 	movabsq	$0x5555555555555555, %r8
    00000450: 	jmp	.Ltmp771 # Offset: 1104
.Ltmp770:
    00000452: 	movq	%rdx, %rax
    00000455: 	addl	$0x1, %r14d
    00000459: 	movq	%rsi, %rdi
    0000045c: 	subl	$0x270f, %eax
    00000461: 	addl	%eax, (%rbx)
    00000463: 	cmpl	%r14d, iterations(%rip)
    0000046a: 	jne	.Ltmp772 # Offset: 1130
    00000470: 	movq	%r15, %rbx
    00000473: 	movq	0x20(%rsp), %r14
    00000478: 	movq	0x28(%rsp), %r15
.Ltmp767:
    0000047d: 	movq	0x30(%r14), %rax
    00000481: 	movq	0x48(%r14), %rdx
    00000485: 	cmpq	0x38(%r14), %rax
    00000489: 	je	.Ltmp773 # Offset: 1161
.Ltmp836:
    0000048f: 	movq	-0x20(%rax), %rbp
    00000493: 	callq	clock@PLT # Offset: 1171
    00000498: 	pxor	%xmm0, %xmm0
    0000049c: 	movq	%rax, end_time(%rip)
    000004a3: 	movq	%rbp, %rdi
    000004a6: 	subq	start_time(%rip), %rax
    000004ad: 	cvtsi2sd	%rax, %xmm0
    000004b2: 	divsd	DATAat0xd2d8(%rip), %xmm0
    000004ba: 	callq	_Z13record_resultdPKc # Offset: 1210
    000004bf: 	leaq	0xc0(%rsp), %r12
    000004c7: 	movq	0x8(%rsp), %rsi
    000004cc: 	leaq	0xd0(%rsp), %rax
    000004d4: 	xorl	%edx, %edx
    000004d6: 	movq	%r12, %rdi
    000004d9: 	movq	%rax, 0x20(%rsp)
    000004de: 	movq	%rax, 0xc0(%rsp)
    000004e6: 	movq	$0x1a, 0x48(%rsp)
    000004ef: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1263
    000004f4: 	movq	0x48(%rsp), %rdx
    000004f9: 	movdqa	DATAat0xd370(%rip), %xmm0
    00000501: 	movabsq	$0x6f69747562697274, %rdi
    0000050b: 	movl	$0x206e, %esi
    00000510: 	movq	%rax, 0xc0(%rsp)
    00000518: 	movq	%rdx, 0xd0(%rsp)
    00000520: 	movw	%si, 0x18(%rax)
    00000524: 	movups	%xmm0, (%rax)
    00000527: 	movq	0xc0(%rsp), %rdx
    0000052f: 	movq	%rdi, 0x10(%rax)
    00000533: 	movq	0x48(%rsp), %rax
    00000538: 	movq	(%rsp), %rdi
    0000053c: 	movq	%rax, 0xc8(%rsp)
    00000544: 	movb	$0x0, (%rdx,%rax)
    00000548: 	callq	strlen@PLT # Offset: 1352
    0000054d: 	movq	%rax, %rdx
    00000550: 	movabsq	$0x3fffffffffffffff, %rax
    0000055a: 	subq	0xc8(%rsp), %rax
    00000562: 	cmpq	%rax, %rdx
    00000565: 	ja	.Ltmp774 # Offset: 1381
    0000056b: 	movq	(%rsp), %rsi
    0000056f: 	movq	%r12, %rdi
    00000572: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1394
    00000577: 	movq	0x40(%r14), %rax
    0000057b: 	movq	0x30(%r14), %rbp
    0000057f: 	subq	$0x20, %rax
    00000583: 	cmpq	%rax, %rbp
    00000586: 	je	.Ltmp775 # Offset: 1414
    0000058c: 	leaq	0x10(%rbp), %rdi
    00000590: 	movq	0xc8(%rsp), %r12
    00000598: 	movq	%rdi, (%rbp)
    0000059c: 	movq	0xc0(%rsp), %r13
    000005a4: 	movq	%r13, %rax
    000005a7: 	addq	%r12, %rax
    000005aa: 	je	.Ltmp776 # Offset: 1450
    000005ac: 	testq	%r13, %r13
    000005af: 	je	.Ltmp777 # Offset: 1455
.Ltmp776:
    000005b5: 	movq	%r12, 0x48(%rsp)
    000005ba: 	cmpq	$0xf, %r12
    000005be: 	ja	.Ltmp778 # Offset: 1470
    000005c4: 	cmpq	$0x1, %r12
    000005c8: 	jne	.Ltmp779 # Offset: 1480
    000005ce: 	movzbl	(%r13), %eax
    000005d3: 	movb	%al, 0x10(%rbp)
.Ltmp846:
    000005d6: 	movq	%r12, 0x8(%rbp)
    000005da: 	movb	$0x0, (%rdi,%r12)
    000005df: 	addq	$0x20, 0x30(%r14)
.Ltmp835:
    000005e4: 	callq	clock@PLT # Offset: 1508
    000005e9: 	movl	iterations(%rip), %r12d
    000005f0: 	movq	%rax, start_time(%rip)
    000005f7: 	testl	%r12d, %r12d
    000005fa: 	je	.Ltmp780 # Offset: 1530
    00000600: 	movq	0x9c0(%rbx), %rax
    00000607: 	movss	DATAat0xd34c(%rip), %xmm2
    0000060f: 	xorl	%ebp, %ebp
    00000611: 	pxor	%xmm3, %xmm3
    00000615: 	movss	DATAat0xd35c(%rip), %xmm1
    0000061d: 	movabsq	$0x5555555555555555, %r8
    00000627: 	movabsq	$0x71d67fffeda60000, %rsi
    00000631: 	movabsq	$-0x8112000000000, %r13
    0000063b: 	jmp	.Ltmp781 # Offset: 1595
.Ltmp784:
    0000063d: 	pxor	%xmm0, %xmm0
    00000641: 	cvtsi2ss	%rax, %xmm0
    00000646: 	addss	%xmm3, %xmm0
    0000064a: 	mulss	%xmm2, %xmm0
    0000064e: 	comiss	%xmm1, %xmm0
    00000651: 	jae	.Ltmp782 # Offset: 1617
.Ltmp785:
    00000657: 	mulss	DATAat0xd33c(%rip), %xmm0
    0000065f: 	addl	$0x1, %ebp
    00000662: 	subss	DATAat0xd340(%rip), %xmm0
    0000066a: 	cvtss2sd	%xmm0, %xmm0
    0000066e: 	addsd	(%r15), %xmm0
    00000673: 	movsd	%xmm0, (%r15)
    00000678: 	cmpl	%ebp, %r12d
    0000067b: 	je	.Ltmp780 # Offset: 1659
.Ltmp786:
    00000681: 	movq	%rdx, %rax
.Ltmp781:
    00000684: 	cmpq	$0x137, %rax
    0000068a: 	ja	.Ltmp783 # Offset: 1674
.Ltmp800:
    00000690: 	leaq	0x1(%rax), %rdx
    00000694: 	movq	(%rbx,%rax,8), %rax
    00000698: 	movq	%rdx, 0x9c0(%rbx)
    0000069f: 	movq	%rax, %rcx
    000006a2: 	shrq	$0x1d, %rcx
    000006a6: 	andq	%r8, %rcx
    000006a9: 	xorq	%rcx, %rax
    000006ac: 	movq	%rax, %rcx
    000006af: 	shlq	$0x11, %rcx
    000006b3: 	andq	%rsi, %rcx
    000006b6: 	xorq	%rcx, %rax
    000006b9: 	movq	%rax, %rcx
    000006bc: 	shlq	$0x25, %rcx
    000006c0: 	andq	%r13, %rcx
    000006c3: 	xorq	%rcx, %rax
    000006c6: 	movq	%rax, %rcx
    000006c9: 	shrq	$0x2b, %rcx
    000006cd: 	xorq	%rcx, %rax
    000006d0: 	jns	.Ltmp784 # Offset: 1744
    000006d6: 	movq	%rax, %rcx
    000006d9: 	andl	$0x1, %eax
    000006dc: 	pxor	%xmm0, %xmm0
    000006e0: 	shrq	%rcx
    000006e3: 	orq	%rax, %rcx
    000006e6: 	cvtsi2ss	%rcx, %xmm0
    000006eb: 	addss	%xmm0, %xmm0
    000006ef: 	addss	%xmm3, %xmm0
    000006f3: 	mulss	%xmm2, %xmm0
    000006f7: 	comiss	%xmm1, %xmm0
    000006fa: 	jb	.Ltmp785 # Offset: 1786
.Ltmp782:
    00000700: 	movsd	DATAat0xd300(%rip), %xmm0
    00000708: 	addsd	(%r15), %xmm0
    0000070d: 	addl	$0x1, %ebp
    00000710: 	movsd	%xmm0, (%r15)
    00000715: 	cmpl	%r12d, %ebp
    00000718: 	jne	.Ltmp786 # Offset: 1816
.Ltmp780:
    0000071e: 	movq	0x30(%r14), %rax
    00000722: 	movq	0x48(%r14), %rdx
    00000726: 	cmpq	0x38(%r14), %rax
    0000072a: 	je	.Ltmp787 # Offset: 1834
.Ltmp834:
    00000730: 	movq	-0x20(%rax), %rbp
    00000734: 	callq	clock@PLT # Offset: 1844
    00000739: 	pxor	%xmm0, %xmm0
    0000073d: 	movq	%rax, end_time(%rip)
    00000744: 	movq	%rbp, %rdi
    00000747: 	subq	start_time(%rip), %rax
    0000074e: 	cvtsi2sd	%rax, %xmm0
    00000753: 	divsd	DATAat0xd2d8(%rip), %xmm0
    0000075b: 	callq	_Z13record_resultdPKc # Offset: 1883
    00000760: 	leaq	0xe0(%rsp), %r12
    00000768: 	movq	0x8(%rsp), %rsi
    0000076d: 	leaq	0xf0(%rsp), %rax
    00000775: 	xorl	%edx, %edx
    00000777: 	movq	%r12, %rdi
    0000077a: 	movq	%rax, 0x28(%rsp)
    0000077f: 	movq	%rax, 0xe0(%rsp)
    00000787: 	movq	$0x1f, 0x48(%rsp)
    00000790: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1936
    00000795: 	movq	0x48(%rsp), %rdx
    0000079a: 	movl	$0x3e30, %ecx
    0000079f: 	movb	$0x20, 0x1e(%rax)
    000007a3: 	movabsq	$0x6c62756f643c6c61, %rdi
    000007ad: 	movdqa	DATAat0xd380(%rip), %xmm0
    000007b5: 	movq	%rax, 0xe0(%rsp)
    000007bd: 	movq	%rdx, 0xf0(%rsp)
    000007c5: 	movl	$0x32202c65, 0x18(%rax)
    000007cc: 	movups	%xmm0, (%rax)
    000007cf: 	movq	0xe0(%rsp), %rdx
    000007d7: 	movq	%rdi, 0x10(%rax)
    000007db: 	movq	(%rsp), %rdi
    000007df: 	movw	%cx, 0x1c(%rax)
    000007e3: 	movq	0x48(%rsp), %rax
    000007e8: 	movq	%rax, 0xe8(%rsp)
    000007f0: 	movb	$0x0, (%rdx,%rax)
    000007f4: 	callq	strlen@PLT # Offset: 2036
    000007f9: 	movq	%rax, %rdx
    000007fc: 	movabsq	$0x3fffffffffffffff, %rax
    00000806: 	subq	0xe8(%rsp), %rax
    0000080e: 	cmpq	%rax, %rdx
    00000811: 	ja	.Ltmp788 # Offset: 2065
    00000817: 	movq	(%rsp), %rsi
    0000081b: 	movq	%r12, %rdi
    0000081e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2078
    00000823: 	movq	0x40(%r14), %rax
    00000827: 	movq	0x30(%r14), %rbp
    0000082b: 	subq	$0x20, %rax
    0000082f: 	cmpq	%rax, %rbp
    00000832: 	je	.Ltmp789 # Offset: 2098
    00000838: 	leaq	0x10(%rbp), %rdi
    0000083c: 	movq	0xe8(%rsp), %r12
    00000844: 	movq	%rdi, (%rbp)
    00000848: 	movq	0xe0(%rsp), %r13
    00000850: 	movq	%r13, %rax
    00000853: 	addq	%r12, %rax
    00000856: 	je	.Ltmp790 # Offset: 2134
    00000858: 	testq	%r13, %r13
    0000085b: 	je	.Ltmp791 # Offset: 2139
.Ltmp790:
    00000861: 	movq	%r12, 0x48(%rsp)
    00000866: 	cmpq	$0xf, %r12
    0000086a: 	ja	.Ltmp792 # Offset: 2154
    00000870: 	cmpq	$0x1, %r12
    00000874: 	jne	.Ltmp793 # Offset: 2164
    0000087a: 	movzbl	(%r13), %eax
    0000087f: 	movb	%al, 0x10(%rbp)
.Ltmp847:
    00000882: 	movq	%r12, 0x8(%rbp)
    00000886: 	movb	$0x0, (%rdi,%r12)
    0000088b: 	addq	$0x20, 0x30(%r14)
.Ltmp833:
    00000890: 	callq	clock@PLT # Offset: 2192
    00000895: 	movl	iterations(%rip), %r12d
    0000089c: 	movq	%rax, start_time(%rip)
    000008a3: 	testl	%r12d, %r12d
    000008a6: 	je	.Ltmp794 # Offset: 2214
    000008ac: 	movq	0x9c0(%rbx), %rax
    000008b3: 	movsd	DATAat0xd320(%rip), %xmm2
    000008bb: 	xorl	%ebp, %ebp
    000008bd: 	pxor	%xmm3, %xmm3
    000008c1: 	movsd	DATAat0xd2e8(%rip), %xmm1
    000008c9: 	movabsq	$0x5555555555555555, %r8
    000008d3: 	movabsq	$0x71d67fffeda60000, %rsi
    000008dd: 	movabsq	$-0x8112000000000, %r13
    000008e7: 	jmp	.Ltmp795 # Offset: 2279
.Ltmp798:
    000008e9: 	pxor	%xmm0, %xmm0
    000008ed: 	cvtsi2sd	%rax, %xmm0
    000008f2: 	addsd	%xmm3, %xmm0
    000008f6: 	mulsd	%xmm2, %xmm0
    000008fa: 	comisd	%xmm1, %xmm0
    000008fe: 	jae	.Ltmp796 # Offset: 2302
.Ltmp799:
    00000904: 	addsd	(%r15), %xmm0
    00000909: 	addl	$0x1, %ebp
    0000090c: 	movsd	%xmm0, (%r15)
    00000911: 	cmpl	%r12d, %ebp
    00000914: 	je	.Ltmp794 # Offset: 2324
    0000091a: 	movq	%rdx, %rax
.Ltmp795:
    0000091d: 	cmpq	$0x137, %rax
    00000923: 	ja	.Ltmp797 # Offset: 2339
.Ltmp802:
    00000929: 	leaq	0x1(%rax), %rdx
    0000092d: 	movq	(%rbx,%rax,8), %rax
    00000931: 	movq	%rdx, 0x9c0(%rbx)
    00000938: 	movq	%rax, %rcx
    0000093b: 	shrq	$0x1d, %rcx
    0000093f: 	andq	%r8, %rcx
    00000942: 	xorq	%rcx, %rax
    00000945: 	movq	%rax, %rcx
    00000948: 	shlq	$0x11, %rcx
    0000094c: 	andq	%rsi, %rcx
    0000094f: 	xorq	%rcx, %rax
    00000952: 	movq	%rax, %rcx
    00000955: 	shlq	$0x25, %rcx
    00000959: 	andq	%r13, %rcx
    0000095c: 	xorq	%rcx, %rax
    0000095f: 	movq	%rax, %rcx
    00000962: 	shrq	$0x2b, %rcx
    00000966: 	xorq	%rcx, %rax
    00000969: 	jns	.Ltmp798 # Offset: 2409
    0000096f: 	movq	%rax, %rcx
    00000972: 	andl	$0x1, %eax
    00000975: 	pxor	%xmm0, %xmm0
    00000979: 	shrq	%rcx
    0000097c: 	orq	%rax, %rcx
    0000097f: 	cvtsi2sd	%rcx, %xmm0
    00000984: 	addsd	%xmm0, %xmm0
    00000988: 	addsd	%xmm3, %xmm0
    0000098c: 	mulsd	%xmm2, %xmm0
    00000990: 	comisd	%xmm1, %xmm0
    00000994: 	jb	.Ltmp799 # Offset: 2452
.Ltmp796:
    0000099a: 	movsd	DATAat0xd308(%rip), %xmm0
    000009a2: 	jmp	.Ltmp799 # Offset: 2466
.Ltmp783:
    000009a7: 	movq	%rbx, %rdi
    000009aa: 	callq	_ZNSt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EE11_M_gen_randEv # Offset: 2474
    000009af: 	movq	0x9c0(%rbx), %rax
    000009b6: 	pxor	%xmm3, %xmm3
    000009ba: 	movss	DATAat0xd35c(%rip), %xmm1
    000009c2: 	movss	DATAat0xd34c(%rip), %xmm2
    000009ca: 	movabsq	$0x71d67fffeda60000, %rsi
    000009d4: 	movabsq	$0x5555555555555555, %r8
    000009de: 	jmp	.Ltmp800 # Offset: 2526
.Ltmp768:
    000009e3: 	movq	%r15, %rdi
    000009e6: 	callq	_ZNSt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EE11_M_gen_randEv # Offset: 2534
    000009eb: 	movq	0x9c0(%r15), %rdi
    000009f2: 	movabsq	$0x5555555555555555, %r8
    000009fc: 	jmp	.Ltmp801 # Offset: 2556
.Ltmp797:
    00000a01: 	movq	%rbx, %rdi
    00000a04: 	callq	_ZNSt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EE11_M_gen_randEv # Offset: 2564
    00000a09: 	movq	DATAat0xd2e8(%rip), %rdi
    00000a10: 	movq	0x9c0(%rbx), %rax
    00000a17: 	pxor	%xmm3, %xmm3
    00000a1b: 	movabsq	$0x71d67fffeda60000, %rsi
    00000a25: 	movabsq	$0x5555555555555555, %r8
    00000a2f: 	movq	%rdi, %xmm1
    00000a34: 	movq	DATAat0xd320(%rip), %rdi
    00000a3b: 	movq	%rdi, %xmm2
    00000a40: 	jmp	.Ltmp802 # Offset: 2624
.Ltmp794:
    00000a45: 	movq	0x30(%r14), %rax
    00000a49: 	movq	0x48(%r14), %rdx
    00000a4d: 	cmpq	0x38(%r14), %rax
    00000a51: 	je	.Ltmp803 # Offset: 2641
.Ltmp830:
    00000a57: 	movq	-0x20(%rax), %rbp
    00000a5b: 	callq	clock@PLT # Offset: 2651
    00000a60: 	pxor	%xmm0, %xmm0
    00000a64: 	movq	%rax, end_time(%rip)
    00000a6b: 	movq	%rbp, %rdi
    00000a6e: 	subq	start_time(%rip), %rax
    00000a75: 	cvtsi2sd	%rax, %xmm0
    00000a7a: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000a82: 	callq	_Z13record_resultdPKc # Offset: 2690
    00000a87: 	leaq	0x100(%rsp), %r12
    00000a8f: 	movq	0x8(%rsp), %rsi
    00000a94: 	leaq	0x110(%rsp), %rax
    00000a9c: 	xorl	%edx, %edx
    00000a9e: 	movq	%r12, %rdi
    00000aa1: 	movq	%rax, 0x30(%rsp)
    00000aa6: 	movq	%rax, 0x100(%rsp)
    00000aae: 	movq	$0x14, 0x48(%rsp)
    00000ab7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2743
    00000abc: 	movq	0x48(%rsp), %rdx
    00000ac1: 	movq	(%rsp), %rdi
    00000ac5: 	movq	%rax, 0x100(%rsp)
    00000acd: 	movdqa	DATAat0xd390(%rip), %xmm0
    00000ad5: 	movq	%rdx, 0x110(%rsp)
    00000add: 	movups	%xmm0, (%rax)
    00000ae0: 	movq	0x100(%rsp), %rdx
    00000ae8: 	movl	$0x206e6f69, 0x10(%rax)
    00000aef: 	movq	0x48(%rsp), %rax
    00000af4: 	movq	%rax, 0x108(%rsp)
    00000afc: 	movb	$0x0, (%rdx,%rax)
    00000b00: 	callq	strlen@PLT # Offset: 2816
    00000b05: 	movq	%rax, %rdx
    00000b08: 	movabsq	$0x3fffffffffffffff, %rax
    00000b12: 	subq	0x108(%rsp), %rax
    00000b1a: 	cmpq	%rax, %rdx
    00000b1d: 	ja	.Ltmp804 # Offset: 2845
    00000b23: 	movq	(%rsp), %rsi
    00000b27: 	movq	%r12, %rdi
    00000b2a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2858
    00000b2f: 	movq	0x40(%r14), %rax
    00000b33: 	movq	0x30(%r14), %rbp
    00000b37: 	subq	$0x20, %rax
    00000b3b: 	cmpq	%rax, %rbp
    00000b3e: 	je	.Ltmp805 # Offset: 2878
    00000b44: 	leaq	0x10(%rbp), %rdi
    00000b48: 	movq	0x108(%rsp), %r12
    00000b50: 	movq	%rdi, (%rbp)
    00000b54: 	movq	0x100(%rsp), %r13
    00000b5c: 	movq	%r13, %rax
    00000b5f: 	addq	%r12, %rax
    00000b62: 	je	.Ltmp806 # Offset: 2914
    00000b64: 	testq	%r13, %r13
    00000b67: 	je	.Ltmp807 # Offset: 2919
.Ltmp806:
    00000b6d: 	movq	%r12, 0x48(%rsp)
    00000b72: 	cmpq	$0xf, %r12
    00000b76: 	ja	.Ltmp808 # Offset: 2934
    00000b7c: 	cmpq	$0x1, %r12
    00000b80: 	jne	.Ltmp809 # Offset: 2944
    00000b86: 	movzbl	(%r13), %eax
    00000b8b: 	movb	%al, 0x10(%rbp)
.Ltmp842:
    00000b8e: 	movq	%r12, 0x8(%rbp)
    00000b92: 	movb	$0x0, (%rdi,%r12)
    00000b97: 	addq	$0x20, 0x30(%r14)
.Ltmp832:
    00000b9c: 	callq	clock@PLT # Offset: 2972
    00000ba1: 	movl	iterations(%rip), %ebp
    00000ba7: 	xorl	%r12d, %r12d
    00000baa: 	leaq	0x50(%rsp), %r13
    00000baf: 	movq	%rax, start_time(%rip)
    00000bb6: 	testl	%ebp, %ebp
    00000bb8: 	je	.Ltmp810 # Offset: 3000
.Ltmp811:
    00000bba: 	movq	%r13, %rdx
    00000bbd: 	movq	%rbx, %rsi
    00000bc0: 	movq	%r13, %rdi
    00000bc3: 	addl	$0x1, %r12d
    00000bc7: 	callq	_ZNSt19normal_distributionIfEclISt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EEEEfRT_RKNS0_10param_typeE # Offset: 3015
    00000bcc: 	cvtss2sd	%xmm0, %xmm0
    00000bd0: 	addsd	(%r15), %xmm0
    00000bd5: 	movsd	%xmm0, (%r15)
    00000bda: 	cmpl	%ebp, %r12d
    00000bdd: 	jne	.Ltmp811 # Offset: 3037
.Ltmp810:
    00000bdf: 	movq	0x30(%r14), %rax
    00000be3: 	movq	0x48(%r14), %rdx
    00000be7: 	cmpq	0x38(%r14), %rax
    00000beb: 	je	.Ltmp812 # Offset: 3051
.Ltmp831:
    00000bf1: 	movq	-0x20(%rax), %rbp
    00000bf5: 	callq	clock@PLT # Offset: 3061
    00000bfa: 	pxor	%xmm0, %xmm0
    00000bfe: 	movq	%rax, end_time(%rip)
    00000c05: 	movq	%rbp, %rdi
    00000c08: 	subq	start_time(%rip), %rax
    00000c0f: 	cvtsi2sd	%rax, %xmm0
    00000c14: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000c1c: 	callq	_Z13record_resultdPKc # Offset: 3100
    00000c21: 	leaq	0x120(%rsp), %r12
    00000c29: 	movq	0x8(%rsp), %rsi
    00000c2e: 	leaq	0x130(%rsp), %rax
    00000c36: 	xorl	%edx, %edx
    00000c38: 	movq	%r12, %rdi
    00000c3b: 	movq	%rax, 0x38(%rsp)
    00000c40: 	movq	%rax, 0x120(%rsp)
    00000c48: 	movq	$0x17, 0x48(%rsp)
    00000c51: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3153
    00000c56: 	movq	0x48(%rsp), %rdx
    00000c5b: 	movq	(%rsp), %rdi
    00000c5f: 	movq	%rax, 0x120(%rsp)
    00000c67: 	movdqa	DATAat0xd3a0(%rip), %xmm0
    00000c6f: 	movq	%rdx, 0x130(%rsp)
    00000c77: 	movl	$0x6e6f, %edx
    00000c7c: 	movups	%xmm0, (%rax)
    00000c7f: 	movw	%dx, 0x14(%rax)
    00000c83: 	movq	0x120(%rsp), %rdx
    00000c8b: 	movl	$0x69747562, 0x10(%rax)
    00000c92: 	movb	$0x20, 0x16(%rax)
    00000c96: 	movq	0x48(%rsp), %rax
    00000c9b: 	movq	%rax, 0x128(%rsp)
    00000ca3: 	movb	$0x0, (%rdx,%rax)
    00000ca7: 	callq	strlen@PLT # Offset: 3239
    00000cac: 	movq	%rax, %rdx
    00000caf: 	movabsq	$0x3fffffffffffffff, %rax
    00000cb9: 	subq	0x128(%rsp), %rax
    00000cc1: 	cmpq	%rax, %rdx
    00000cc4: 	ja	.Ltmp813 # Offset: 3268
    00000cca: 	movq	(%rsp), %rsi
    00000cce: 	movq	%r12, %rdi
    00000cd1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3281
    00000cd6: 	movq	0x40(%r14), %rax
    00000cda: 	movq	0x30(%r14), %rbp
    00000cde: 	subq	$0x20, %rax
    00000ce2: 	cmpq	%rax, %rbp
    00000ce5: 	je	.Ltmp814 # Offset: 3301
    00000ceb: 	leaq	0x10(%rbp), %rdi
    00000cef: 	movq	0x128(%rsp), %r12
    00000cf7: 	movq	%rdi, (%rbp)
    00000cfb: 	movq	0x120(%rsp), %r13
    00000d03: 	movq	%r13, %rax
    00000d06: 	addq	%r12, %rax
    00000d09: 	je	.Ltmp815 # Offset: 3337
    00000d0b: 	testq	%r13, %r13
    00000d0e: 	je	.Ltmp816 # Offset: 3342
.Ltmp815:
    00000d14: 	movq	%r12, 0x48(%rsp)
    00000d19: 	cmpq	$0xf, %r12
    00000d1d: 	ja	.Ltmp817 # Offset: 3357
    00000d23: 	cmpq	$0x1, %r12
    00000d27: 	jne	.Ltmp818 # Offset: 3367
    00000d2d: 	movzbl	(%r13), %eax
    00000d32: 	movb	%al, 0x10(%rbp)
.Ltmp843:
    00000d35: 	movq	%r12, 0x8(%rbp)
    00000d39: 	movb	$0x0, (%rdi,%r12)
    00000d3e: 	addq	$0x20, 0x30(%r14)
.Ltmp838:
    00000d43: 	callq	clock@PLT # Offset: 3395
    00000d48: 	movl	iterations(%rip), %ebp
    00000d4e: 	movq	%rax, start_time(%rip)
    00000d55: 	testl	%ebp, %ebp
    00000d57: 	je	.Ltmp819 # Offset: 3415
    00000d59: 	movss	0x60(%rsp), %xmm6
    00000d5f: 	movss	0x64(%rsp), %xmm7
    00000d65: 	xorl	%r12d, %r12d
    00000d68: 	leaq	0x68(%rsp), %r13
    00000d6d: 	movss	%xmm6, (%rsp)
    00000d72: 	movss	%xmm7, 0x8(%rsp)
.Ltmp820:
    00000d78: 	movq	%r13, %rdx
    00000d7b: 	movq	%rbx, %rsi
    00000d7e: 	movq	%r13, %rdi
    00000d81: 	addl	$0x1, %r12d
    00000d85: 	callq	_ZNSt19normal_distributionIfEclISt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EEEEfRT_RKNS0_10param_typeE # Offset: 3461
    00000d8a: 	mulss	0x8(%rsp), %xmm0
    00000d90: 	addss	(%rsp), %xmm0
    00000d95: 	callq	expf@PLT # Offset: 3477
    00000d9a: 	cvtss2sd	%xmm0, %xmm0
    00000d9e: 	addsd	(%r15), %xmm0
    00000da3: 	movsd	%xmm0, (%r15)
    00000da8: 	cmpl	%ebp, %r12d
    00000dab: 	jne	.Ltmp820 # Offset: 3499
.Ltmp819:
    00000dad: 	movq	0x30(%r14), %rax
    00000db1: 	movq	0x48(%r14), %rdx
    00000db5: 	cmpq	0x38(%r14), %rax
    00000db9: 	je	.Ltmp821 # Offset: 3513
.Ltmp837:
    00000dbf: 	movq	-0x20(%rax), %rbp
    00000dc3: 	callq	clock@PLT # Offset: 3523
    00000dc8: 	pxor	%xmm0, %xmm0
    00000dcc: 	movq	%rax, end_time(%rip)
    00000dd3: 	movq	%rbp, %rdi
    00000dd6: 	subq	start_time(%rip), %rax
    00000ddd: 	cvtsi2sd	%rax, %xmm0
    00000de2: 	divsd	DATAat0xd2d8(%rip), %xmm0
    00000dea: 	callq	_Z13record_resultdPKc # Offset: 3562
    00000def: 	movq	0x120(%rsp), %rdi
    00000df7: 	cmpq	0x38(%rsp), %rdi
    00000dfc: 	je	.Ltmp822 # Offset: 3580
    00000dfe: 	movq	0x130(%rsp), %rax
    00000e06: 	leaq	0x1(%rax), %rsi
    00000e0a: 	callq	_ZdlPvm@PLT # Offset: 3594
.Ltmp822:
    00000e0f: 	movq	0x100(%rsp), %rdi
    00000e17: 	cmpq	0x30(%rsp), %rdi
    00000e1c: 	je	.Ltmp823 # Offset: 3612
    00000e1e: 	movq	0x110(%rsp), %rax
    00000e26: 	leaq	0x1(%rax), %rsi
    00000e2a: 	callq	_ZdlPvm@PLT # Offset: 3626
.Ltmp823:
    00000e2f: 	movq	0xe0(%rsp), %rdi
    00000e37: 	cmpq	0x28(%rsp), %rdi
    00000e3c: 	je	.Ltmp824 # Offset: 3644
    00000e3e: 	movq	0xf0(%rsp), %rax
    00000e46: 	leaq	0x1(%rax), %rsi
    00000e4a: 	callq	_ZdlPvm@PLT # Offset: 3658
.Ltmp824:
    00000e4f: 	movq	0xc0(%rsp), %rdi
    00000e57: 	cmpq	0x20(%rsp), %rdi
    00000e5c: 	je	.Ltmp825 # Offset: 3676
    00000e5e: 	movq	0xd0(%rsp), %rax
    00000e66: 	leaq	0x1(%rax), %rsi
    00000e6a: 	callq	_ZdlPvm@PLT # Offset: 3690
.Ltmp825:
    00000e6f: 	movq	0xa0(%rsp), %rdi
    00000e77: 	cmpq	0x18(%rsp), %rdi
    00000e7c: 	je	.Ltmp826 # Offset: 3708
    00000e7e: 	movq	0xb0(%rsp), %rax
    00000e86: 	leaq	0x1(%rax), %rsi
    00000e8a: 	callq	_ZdlPvm@PLT # Offset: 3722
.Ltmp826:
    00000e8f: 	movq	0x80(%rsp), %rdi
    00000e97: 	cmpq	0x10(%rsp), %rdi
    00000e9c: 	je	.Ltmp827 # Offset: 3740
    00000e9e: 	movq	0x90(%rsp), %rax
    00000ea6: 	leaq	0x1(%rax), %rsi
    00000eaa: 	callq	_ZdlPvm@PLT # Offset: 3754
.Ltmp827:
    00000eaf: 	movq	0x148(%rsp), %rax
    00000eb7: 	subq	%fs:0x28, %rax
    00000ec0: 	jne	.Ltmp828 # Offset: 3776
    00000ec6: 	addq	$0x158, %rsp
    00000ecd: 	popq	%rbx
    00000ece: 	popq	%rbp
    00000ecf: 	popq	%r12
    00000ed1: 	popq	%r13
    00000ed3: 	popq	%r14
    00000ed5: 	popq	%r15
    00000ed7: 	retq # Offset: 3799
.Ltmp750:
    00000ed8: 	movq	%r12, %rsi
    00000edb: 	movq	%r14, %rdi
    00000ede: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3806
    00000ee3: 	jmp	.Ltmp829 # Offset: 3811
.Ltmp803:
    00000ee8: 	movq	-0x8(%rdx), %rax
    00000eec: 	addq	$0x200, %rax
    00000ef2: 	jmp	.Ltmp830 # Offset: 3826
.Ltmp812:
    00000ef7: 	movq	-0x8(%rdx), %rax
    00000efb: 	addq	$0x200, %rax
    00000f01: 	jmp	.Ltmp831 # Offset: 3841
.Ltmp805:
    00000f06: 	movq	%r12, %rsi
    00000f09: 	movq	%r14, %rdi
    00000f0c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3852
    00000f11: 	jmp	.Ltmp832 # Offset: 3857
.Ltmp789:
    00000f16: 	movq	%r12, %rsi
    00000f19: 	movq	%r14, %rdi
    00000f1c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3868
    00000f21: 	jmp	.Ltmp833 # Offset: 3873
.Ltmp787:
    00000f26: 	movq	-0x8(%rdx), %rax
    00000f2a: 	addq	$0x200, %rax
    00000f30: 	jmp	.Ltmp834 # Offset: 3888
.Ltmp775:
    00000f35: 	movq	%r12, %rsi
    00000f38: 	movq	%r14, %rdi
    00000f3b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3899
    00000f40: 	jmp	.Ltmp835 # Offset: 3904
.Ltmp773:
    00000f45: 	movq	-0x8(%rdx), %rax
    00000f49: 	addq	$0x200, %rax
    00000f4f: 	jmp	.Ltmp836 # Offset: 3919
.Ltmp821:
    00000f54: 	movq	-0x8(%rdx), %rax
    00000f58: 	addq	$0x200, %rax
    00000f5e: 	jmp	.Ltmp837 # Offset: 3934
.Ltmp814:
    00000f63: 	movq	%r12, %rsi
    00000f66: 	movq	%r14, %rdi
    00000f69: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3945
    00000f6e: 	jmp	.Ltmp838 # Offset: 3950
.Ltmp762:
    00000f73: 	movq	%r12, %rsi
    00000f76: 	movq	%r14, %rdi
    00000f79: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3961
    00000f7e: 	jmp	.Ltmp839 # Offset: 3966
.Ltmp760:
    00000f83: 	movq	-0x8(%rdx), %rax
    00000f87: 	addq	$0x200, %rax
    00000f8d: 	jmp	.Ltmp840 # Offset: 3981
.Ltmp754:
    00000f92: 	testq	%r12, %r12
    00000f95: 	je	.Ltmp759 # Offset: 3989
    00000f9b: 	jmp	.Ltmp841 # Offset: 3995
.Ltmp808:
    00000fa0: 	movq	0x8(%rsp), %rsi
    00000fa5: 	xorl	%edx, %edx
    00000fa7: 	movq	%rbp, %rdi
    00000faa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4010
    00000faf: 	movq	%rax, (%rbp)
    00000fb3: 	movq	%rax, %rdi
    00000fb6: 	movq	0x48(%rsp), %rax
    00000fbb: 	movq	%rax, 0x10(%rbp)
.Ltmp849:
    00000fbf: 	movq	%r12, %rdx
    00000fc2: 	movq	%r13, %rsi
    00000fc5: 	callq	memcpy@PLT # Offset: 4037
    00000fca: 	movq	0x48(%rsp), %r12
    00000fcf: 	movq	(%rbp), %rdi
    00000fd3: 	jmp	.Ltmp842 # Offset: 4051
.Ltmp818:
    00000fd8: 	testq	%r12, %r12
    00000fdb: 	je	.Ltmp843 # Offset: 4059
    00000fe1: 	jmp	.Ltmp844 # Offset: 4065
    00000fe3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp817:
    00000fe8: 	movq	0x8(%rsp), %rsi
    00000fed: 	xorl	%edx, %edx
    00000fef: 	movq	%rbp, %rdi
    00000ff2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4082
    00000ff7: 	movq	%rax, (%rbp)
    00000ffb: 	movq	%rax, %rdi
    00000ffe: 	movq	0x48(%rsp), %rax
    00001003: 	movq	%rax, 0x10(%rbp)
.Ltmp844:
    00001007: 	movq	%r12, %rdx
    0000100a: 	movq	%r13, %rsi
    0000100d: 	callq	memcpy@PLT # Offset: 4109
    00001012: 	movq	0x48(%rsp), %r12
    00001017: 	movq	(%rbp), %rdi
    0000101b: 	jmp	.Ltmp843 # Offset: 4123
.Ltmp765:
    00001020: 	movq	0x8(%rsp), %rsi
    00001025: 	xorl	%edx, %edx
    00001027: 	movq	%rbp, %rdi
    0000102a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4138
    0000102f: 	movq	%rax, (%rbp)
    00001033: 	movq	%rax, %rdi
    00001036: 	movq	0x48(%rsp), %rax
    0000103b: 	movq	%rax, 0x10(%rbp)
.Ltmp850:
    0000103f: 	movq	%r12, %rdx
    00001042: 	movq	%r13, %rsi
    00001045: 	callq	memcpy@PLT # Offset: 4165
    0000104a: 	movq	0x48(%rsp), %r12
    0000104f: 	movq	(%rbp), %rdi
    00001053: 	jmp	.Ltmp845 # Offset: 4179
.Ltmp778:
    00001058: 	movq	0x8(%rsp), %rsi
    0000105d: 	xorl	%edx, %edx
    0000105f: 	movq	%rbp, %rdi
    00001062: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4194
    00001067: 	movq	%rax, (%rbp)
    0000106b: 	movq	%rax, %rdi
    0000106e: 	movq	0x48(%rsp), %rax
    00001073: 	movq	%rax, 0x10(%rbp)
.Ltmp851:
    00001077: 	movq	%r12, %rdx
    0000107a: 	movq	%r13, %rsi
    0000107d: 	callq	memcpy@PLT # Offset: 4221
    00001082: 	movq	0x48(%rsp), %r12
    00001087: 	movq	(%rbp), %rdi
    0000108b: 	jmp	.Ltmp846 # Offset: 4235
.Ltmp792:
    00001090: 	movq	0x8(%rsp), %rsi
    00001095: 	xorl	%edx, %edx
    00001097: 	movq	%rbp, %rdi
    0000109a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4250
    0000109f: 	movq	%rax, (%rbp)
    000010a3: 	movq	%rax, %rdi
    000010a6: 	movq	0x48(%rsp), %rax
    000010ab: 	movq	%rax, 0x10(%rbp)
.Ltmp848:
    000010af: 	movq	%r12, %rdx
    000010b2: 	movq	%r13, %rsi
    000010b5: 	callq	memcpy@PLT # Offset: 4277
    000010ba: 	movq	0x48(%rsp), %r12
    000010bf: 	movq	(%rbp), %rdi
    000010c3: 	jmp	.Ltmp847 # Offset: 4291
.Ltmp793:
    000010c8: 	testq	%r12, %r12
    000010cb: 	je	.Ltmp847 # Offset: 4299
    000010d1: 	jmp	.Ltmp848 # Offset: 4305
    000010d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp809:
    000010d8: 	testq	%r12, %r12
    000010db: 	je	.Ltmp842 # Offset: 4315
    000010e1: 	jmp	.Ltmp849 # Offset: 4321
    000010e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp766:
    000010f0: 	testq	%r12, %r12
    000010f3: 	je	.Ltmp845 # Offset: 4339
    000010f9: 	jmp	.Ltmp850 # Offset: 4345
    000010fe: 	nop # Size: 2
.Ltmp779:
    00001100: 	testq	%r12, %r12
    00001103: 	je	.Ltmp846 # Offset: 4355
    00001109: 	jmp	.Ltmp851 # Offset: 4361
.Ltmp752:
    0000110e: 	leaq	DATAat0xd280(%rip), %rdi
    00001115: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4373
.Ltmp761:
    0000111a: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001121: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4385
.Ltmp764:
    00001126: 	leaq	DATAat0xd280(%rip), %rdi
    0000112d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4397
.Ltmp774:
    00001132: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001139: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4409
.Ltmp777:
    0000113e: 	leaq	DATAat0xd280(%rip), %rdi
    00001145: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4421
.Ltmp788:
    0000114a: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001151: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4433
.Ltmp791:
    00001156: 	leaq	DATAat0xd280(%rip), %rdi
    0000115d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4445
.Ltmp804:
    00001162: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001169: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4457
.Ltmp807:
    0000116e: 	leaq	DATAat0xd280(%rip), %rdi
    00001175: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4469
.Ltmp813:
    0000117a: 	leaq	DATAat0xd2aa(%rip), %rdi
    00001181: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4481
.Ltmp816:
    00001186: 	leaq	DATAat0xd280(%rip), %rdi
    0000118d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4493
.Ltmp828:
    00001192: 	callq	__stack_chk_fail@PLT # Offset: 4498
.Ltmp749:
    00001197: 	leaq	DATAat0xd2aa(%rip), %rdi
    0000119e: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4510
    000011a3: 	endbr64
    000011a7: 	movq	%rax, %rbp
    000011aa: 	jmp	.Ltmp852 # Offset: 4522
    000011ac: 	endbr64
    000011b0: 	movq	%rax, %rbp
    000011b3: 	jmp	.Ltmp853 # Offset: 4531
.Ltmp858:
    000011b5: 	movq	0x120(%rsp), %rdi
    000011bd: 	cmpq	0x38(%rsp), %rdi
    000011c2: 	je	.Ltmp853 # Offset: 4546
    000011c4: 	movq	0x130(%rsp), %rax
    000011cc: 	leaq	0x1(%rax), %rsi
    000011d0: 	callq	_ZdlPvm@PLT # Offset: 4560
.Ltmp853:
    000011d5: 	movq	0x100(%rsp), %rdi
    000011dd: 	cmpq	0x30(%rsp), %rdi
    000011e2: 	je	.Ltmp852 # Offset: 4578
    000011e4: 	movq	0x110(%rsp), %rax
    000011ec: 	leaq	0x1(%rax), %rsi
    000011f0: 	callq	_ZdlPvm@PLT # Offset: 4592
.Ltmp852:
    000011f5: 	movq	0xe0(%rsp), %rdi
    000011fd: 	cmpq	0x28(%rsp), %rdi
    00001202: 	je	.Ltmp854 # Offset: 4610
    00001204: 	movq	0xf0(%rsp), %rax
    0000120c: 	leaq	0x1(%rax), %rsi
    00001210: 	callq	_ZdlPvm@PLT # Offset: 4624
.Ltmp854:
    00001215: 	movq	0xc0(%rsp), %rdi
    0000121d: 	cmpq	0x20(%rsp), %rdi
    00001222: 	je	.Ltmp855 # Offset: 4642
    00001224: 	movq	0xd0(%rsp), %rax
    0000122c: 	leaq	0x1(%rax), %rsi
    00001230: 	callq	_ZdlPvm@PLT # Offset: 4656
.Ltmp855:
    00001235: 	movq	0xa0(%rsp), %rdi
    0000123d: 	cmpq	0x18(%rsp), %rdi
    00001242: 	je	.Ltmp856 # Offset: 4674
    00001244: 	movq	0xb0(%rsp), %rax
    0000124c: 	leaq	0x1(%rax), %rsi
    00001250: 	callq	_ZdlPvm@PLT # Offset: 4688
.Ltmp856:
    00001255: 	movq	0x80(%rsp), %rdi
    0000125d: 	cmpq	0x10(%rsp), %rdi
    00001262: 	je	.Ltmp857 # Offset: 4706
    00001264: 	movq	0x90(%rsp), %rax
    0000126c: 	leaq	0x1(%rax), %rsi
    00001270: 	callq	_ZdlPvm@PLT # Offset: 4720
.Ltmp857:
    00001275: 	movq	%rbp, %rdi
    00001278: 	callq	_Unwind_Resume@PLT # Offset: 4728
    0000127d: 	endbr64
    00001281: 	movq	%rax, %rbp
    00001284: 	jmp	.Ltmp858 # Offset: 4740
    00001289: 	endbr64
    0000128d: 	movq	%rax, %rbp
    00001290: 	jmp	.Ltmp856 # Offset: 4752
    00001292: 	endbr64
    00001296: 	movq	%rax, %rbp
    00001299: 	jmp	.Ltmp855 # Offset: 4761
    0000129b: 	endbr64
    0000129f: 	movq	%rax, %rbp
    000012a2: 	jmp	.Ltmp854 # Offset: 4770
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_one_generatorISt23mersenne_twister_engineImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EEEvRT_PKcRiRdRSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EE"

Binary Function "_fini" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0xc928
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0xc928
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 39 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 618 instructions were shortened
BOLT-INFO: removed 161 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 34 out of 81 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x2014fc
