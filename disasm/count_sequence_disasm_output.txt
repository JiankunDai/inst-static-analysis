BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x1d028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x1cff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x13f0
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x13f0
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x19180(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x19166(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIhEvv # Offset: 100
    00000069: 	callq	_Z11TestOneTypeIaEvv # Offset: 105
    0000006e: 	callq	_Z11TestOneTypeItEvv # Offset: 110
    00000073: 	callq	_Z11TestOneTypeIsEvv # Offset: 115
    00000078: 	callq	_Z11TestOneTypeIjEvv # Offset: 120
    0000007d: 	callq	_Z11TestOneTypeIiEvv # Offset: 125
    00000082: 	callq	_Z11TestOneTypeImEvv # Offset: 130
    00000087: 	callq	_Z11TestOneTypeIlEvv # Offset: 135
    0000008c: 	callq	_Z11TestOneTypeIfEvv # Offset: 140
    00000091: 	callq	_Z11TestOneTypeIdEvv # Offset: 145
    00000096: 	popq	%rbx
    00000097: 	xorl	%eax, %eax
    00000099: 	popq	%rbp
    0000009a: 	popq	%r12
    0000009c: 	popq	%r13
    0000009e: 	popq	%r14
    000000a0: 	retq # Offset: 160
.Ltmp3:
    000000a1: 	movq	0x8(%r14), %rdi
    000000a5: 	movl	$0xa, %edx
    000000aa: 	xorl	%esi, %esi
    000000ac: 	callq	strtol@PLT # Offset: 172
    000000b1: 	movl	%eax, iterations(%rip)
    000000b7: 	cmpl	$0x2, %r13d
    000000bb: 	jle	.Ltmp4 # Offset: 187
    000000bd: 	movq	0x10(%r14), %rdi
    000000c1: 	movl	$0xa, %edx
    000000c6: 	xorl	%esi, %esi
    000000c8: 	callq	strtol@PLT # Offset: 200
    000000cd: 	movl	%eax, init_value(%rip)
    000000d3: 	jmp	.Ltmp4 # Offset: 211
.Ltmp1:
    000000d5: 	leaq	DATAat0x19166(%rip), %rsi
    000000dc: 	movl	$0x1, %edi
    000000e1: 	xorl	%eax, %eax
    000000e3: 	callq	__printf_chk@PLT # Offset: 227
    000000e8: 	jmp	.Ltmp4 # Offset: 232
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x15c0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15c0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x1cfe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x15f0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x15f0
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x1cfe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1620
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1620
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x1cff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1660
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1660
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16a0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16a0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/count_sequence.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x16b0
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x16b0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r12
    00000002: 	movq	%rdx, %r12
    00000005: 	pushq	%rbp
    00000006: 	movq	%rsi, %rbp
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdi, %rbx
    0000000d: 	subq	$0x10, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	testq	%rdx, %rdx
    00000024: 	je	.Ltmp9 # Offset: 36
    00000026: 	testq	%rsi, %rsi
    00000029: 	je	.Ltmp10 # Offset: 41
.Ltmp9:
    0000002f: 	subq	%rbp, %r12
    00000032: 	movq	%r12, (%rsp)
    00000036: 	cmpq	$0xf, %r12
    0000003a: 	ja	.Ltmp11 # Offset: 58
    0000003c: 	movq	(%rbx), %rdi
    0000003f: 	cmpq	$0x1, %r12
    00000043: 	jne	.Ltmp12 # Offset: 67
    00000045: 	movzbl	(%rbp), %eax
    00000049: 	movb	%al, (%rdi)
    0000004b: 	movq	(%rsp), %r12
    0000004f: 	movq	(%rbx), %rdi
.Ltmp14:
    00000052: 	movq	%r12, 0x8(%rbx)
    00000056: 	movb	$0x0, (%rdi,%r12)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp13 # Offset: 105
    0000006b: 	addq	$0x10, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	retq # Offset: 115
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp12:
    00000078: 	testq	%r12, %r12
    0000007b: 	je	.Ltmp14 # Offset: 123
    0000007d: 	jmp	.Ltmp15 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp11:
    00000080: 	movq	%rbx, %rdi
    00000083: 	movq	%rsp, %rsi
    00000086: 	xorl	%edx, %edx
    00000088: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 136
    0000008d: 	movq	%rax, (%rbx)
    00000090: 	movq	%rax, %rdi
    00000093: 	movq	(%rsp), %rax
    00000097: 	movq	%rax, 0x10(%rbx)
.Ltmp15:
    0000009b: 	movq	%r12, %rdx
    0000009e: 	movq	%rbp, %rsi
    000000a1: 	callq	memcpy@PLT # Offset: 161
    000000a6: 	movq	(%rsp), %r12
    000000aa: 	movq	(%rbx), %rdi
    000000ad: 	jmp	.Ltmp14 # Offset: 173
.Ltmp10:
    000000af: 	leaq	DATAat0x19008(%rip), %rdi
    000000b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 182
.Ltmp13:
    000000bb: 	callq	__stack_chk_fail@PLT # Offset: 187
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/count_sequence.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x1770
  Size        : 0x1fc
  MaxSize     : 0x200
  Offset      : 0x1770
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x28, %rsp
    00000011: 	movq	0x10(%rdi), %rcx
    00000015: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000001c: 	movq	"_ZL7gLabels/1"+56(%rip), %r13
    00000023: 	movq	(%rdi), %rbp
    00000026: 	movq	%rcx, 0x10(%rsp)
    0000002b: 	movq	0x18(%rdi), %rcx
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000003b: 	leaq	0x8(%rcx), %r12
    0000003f: 	movq	%rcx, 0x18(%rsp)
    00000044: 	movq	%rax, (%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp16 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp19:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp18:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp17 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp18 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp19 # Offset: 142
.Ltmp16:
    00000090: 	movq	0x18(%rsp), %rcx
    00000095: 	cmpq	%rcx, (%rsp)
    00000099: 	je	.Ltmp20 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp21 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp23:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp22 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x10(%rsp)
    000000d7: 	jne	.Ltmp23 # Offset: 215
.Ltmp21:
    000000d9: 	cmpq	%r13, 0x8(%rsp)
    000000de: 	je	.Ltmp24 # Offset: 222
.Ltmp26:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp25 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x8(%rsp)
    00000107: 	jne	.Ltmp26 # Offset: 263
.Ltmp24:
    00000109: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00000110: 	leaq	0x8(%rax), %rbp
    00000114: 	movq	0x18(%r15), %rax
    00000118: 	leaq	0x8(%rax), %rbx
    0000011c: 	cmpq	%rbx, %rbp
    0000011f: 	jbe	.Ltmp27 # Offset: 287
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp28:
    00000128: 	movq	(%rbx), %rdi
    0000012b: 	movl	$0x200, %esi
    00000130: 	addq	$0x8, %rbx
    00000134: 	callq	_ZdlPvm@PLT # Offset: 308
    00000139: 	cmpq	%rbx, %rbp
    0000013c: 	ja	.Ltmp28 # Offset: 316
.Ltmp27:
    0000013e: 	movdqu	(%r15), %xmm0
    00000143: 	movaps	%xmm0, "_ZL7gLabels/1"+48(%rip)
    0000014a: 	movdqu	0x10(%r15), %xmm1
    00000150: 	movaps	%xmm1, "_ZL7gLabels/1"+64(%rip)
    00000157: 	addq	$0x28, %rsp
    0000015b: 	popq	%rbx
    0000015c: 	popq	%rbp
    0000015d: 	popq	%r12
    0000015f: 	popq	%r13
    00000161: 	popq	%r14
    00000163: 	popq	%r15
    00000165: 	retq # Offset: 357
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp29:
    00000170: 	addq	$0x20, %rbp
.Ltmp20:
    00000174: 	cmpq	%rbp, 0x8(%rsp)
    00000179: 	je	.Ltmp24 # Offset: 377
.Ltmp30:
    0000017b: 	movq	(%rbp), %rdi
    0000017f: 	leaq	0x10(%rbp), %rax
    00000183: 	cmpq	%rax, %rdi
    00000186: 	je	.Ltmp29 # Offset: 390
    00000188: 	movq	0x10(%rbp), %rax
    0000018c: 	addq	$0x20, %rbp
    00000190: 	leaq	0x1(%rax), %rsi
    00000194: 	callq	_ZdlPvm@PLT # Offset: 404
    00000199: 	cmpq	%rbp, 0x8(%rsp)
    0000019e: 	jne	.Ltmp30 # Offset: 414
    000001a0: 	jmp	.Ltmp24 # Offset: 416
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp17:
    000001a8: 	addq	$0x20, %r14
    000001ac: 	cmpq	%r14, %rbx
    000001af: 	jne	.Ltmp18 # Offset: 431
    000001b5: 	addq	$0x8, %r12
    000001b9: 	cmpq	%r12, (%rsp)
    000001bd: 	ja	.Ltmp19 # Offset: 445
    000001c3: 	jmp	.Ltmp16 # Offset: 451
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp22:
    000001d0: 	addq	$0x20, %rbp
    000001d4: 	cmpq	%rbp, 0x10(%rsp)
    000001d9: 	jne	.Ltmp23 # Offset: 473
    000001df: 	jmp	.Ltmp21 # Offset: 479
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp25:
    000001e8: 	addq	$0x20, %r13
    000001ec: 	cmpq	%r13, 0x8(%rsp)
    000001f1: 	jne	.Ltmp26 # Offset: 497
    000001f7: 	jmp	.Ltmp24 # Offset: 503
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1970
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x1970
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp31 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp32 # Offset: 38
.Ltmp31:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp33 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp32:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp33:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x19038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1a10
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1a10
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp34 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp35 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp36:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp36 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp49:
    00000069: 	leaq	DATAat0x19182(%rip), %rbp
    00000070: 	leaq	DATAat0x19058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x19098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp37 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x19298(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x190c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x19290(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp38 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp42:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp39 # Offset: 244
    000000fa: 	movq	DATAat0x19280(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp43:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x19280(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp40 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp40:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x19167(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x19298(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp41 # Offset: 398
.Ltmp38:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp42 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp43 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp39:
    000001c8: 	movq	DATAat0x19288(%rip), %rsi
    000001cf: 	movq	DATAat0x19280(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp40 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp41:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp37 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp44 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp45:
    00000210: 	addq	$0x10, %rax
.Ltmp44:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp45 # Offset: 542
.Ltmp50:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x190f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp46 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp47 # Offset: 592
.Ltmp46:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp34:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp47:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp48:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp48 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x19142(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp34 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp35:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp49 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp37:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp50 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1d40
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1d40
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp51 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp52 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp53:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp53 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp58:
    0000006a: 	leaq	DATAat0x19182(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x19120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x19168(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x19182(%rip), %r8
    000000a1: 	leaq	DATAat0x19156(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp54 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp55:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x19167(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp55 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp54 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp56 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp57:
    00000140: 	addq	$0x10, %rax
.Ltmp56:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp57 # Offset: 334
.Ltmp59:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x190f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp51:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp52:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp58 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp54:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp59 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1ef0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1ef0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1f10
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1f10
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x19290(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1f50
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1f50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1f60
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1f60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1fb0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1fb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x2000
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2000
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x2030
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2030
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x2060
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2060
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x2090
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2090
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x20c0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x20c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x20f0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x20f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x2120
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2120
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x2150
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2150
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x2180
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2180
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x21b0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x21b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x21e0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x21e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2210
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x2210
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x2250
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2250
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x2280
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2280
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x22b0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x22b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x22e0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x22e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x2310
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2310
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x2340
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2340
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x2370
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2370
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x23a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x23a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x23d0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x23d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2400
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2400
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x2430
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2430
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z6count1IhEmPT_iS0_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x2460
  Size        : 0x2dd
  MaxSize     : 0x2e0
  Offset      : 0x2460
  Section     : .text
  Orc Section : .local.text._Z6count1IhEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp60 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp61 # Offset: 20
    0000001a: 	movd	%edx, %xmm5
    0000001e: 	shrl	$0x4, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm3, %xmm3
    00000028: 	punpcklbw	%xmm5, %xmm5
    0000002c: 	pxor	%xmm6, %xmm6
    00000030: 	pxor	%xmm4, %xmm4
    00000034: 	subl	$0x1, %esi
    00000037: 	punpcklwd	%xmm5, %xmm5
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	movdqa	DATAat0x19250(%rip), %xmm7
    00000047: 	pxor	%xmm2, %xmm2
    0000004b: 	pshufd	$0x0, %xmm5, %xmm5
    00000050: 	leaq	0x10(%rdi,%rsi), %rsi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp62:
    00000058: 	movdqu	(%rax), %xmm0
    0000005c: 	addq	$0x10, %rax
    00000060: 	pcmpeqb	%xmm5, %xmm0
    00000064: 	pand	%xmm7, %xmm0
    00000068: 	movdqa	%xmm0, %xmm1
    0000006c: 	punpckhbw	%xmm6, %xmm0
    00000070: 	punpcklbw	%xmm6, %xmm1
    00000074: 	movdqa	%xmm0, %xmm8
    00000079: 	punpckhwd	%xmm4, %xmm0
    0000007d: 	movdqa	%xmm1, %xmm9
    00000082: 	punpckhwd	%xmm4, %xmm1
    00000086: 	punpcklwd	%xmm4, %xmm8
    0000008b: 	movdqa	%xmm1, %xmm10
    00000090: 	punpcklwd	%xmm4, %xmm9
    00000095: 	punpckhdq	%xmm2, %xmm1
    00000099: 	punpckldq	%xmm2, %xmm10
    0000009e: 	paddq	%xmm10, %xmm1
    000000a3: 	movdqa	%xmm9, %xmm10
    000000a8: 	punpckhdq	%xmm2, %xmm9
    000000ad: 	punpckldq	%xmm2, %xmm10
    000000b2: 	paddq	%xmm10, %xmm9
    000000b7: 	paddq	%xmm9, %xmm1
    000000bc: 	movdqa	%xmm8, %xmm9
    000000c1: 	punpckhdq	%xmm2, %xmm8
    000000c6: 	punpckldq	%xmm2, %xmm9
    000000cb: 	paddq	%xmm9, %xmm8
    000000d0: 	movdqa	%xmm0, %xmm9
    000000d5: 	punpckhdq	%xmm2, %xmm0
    000000d9: 	punpckldq	%xmm2, %xmm9
    000000de: 	paddq	%xmm3, %xmm0
    000000e2: 	paddq	%xmm9, %xmm8
    000000e7: 	paddq	%xmm8, %xmm1
    000000ec: 	movdqa	%xmm1, %xmm3
    000000f0: 	paddq	%xmm0, %xmm3
    000000f4: 	cmpq	%rsi, %rax
    000000f7: 	jne	.Ltmp62 # Offset: 247
    000000fd: 	movdqa	%xmm3, %xmm0
    00000101: 	movl	%ecx, %esi
    00000103: 	psrldq	$0x8, %xmm0
    00000108: 	andl	$-0x10, %esi
    0000010b: 	paddq	%xmm0, %xmm3
    0000010f: 	movq	%xmm3, %rax
    00000114: 	testb	$0xf, %cl
    00000117: 	je	.Ltmp63 # Offset: 279
.Ltmp65:
    0000011d: 	movslq	%esi, %r8
    00000120: 	cmpb	%dl, (%rdi,%r8)
    00000124: 	sete	%r8b
    00000128: 	movzbl	%r8b, %r8d
    0000012c: 	addq	%r8, %rax
    0000012f: 	leal	0x1(%rsi), %r8d
    00000133: 	cmpl	%ecx, %r8d
    00000136: 	jge	.Ltmp64 # Offset: 310
    0000013c: 	movslq	%r8d, %r8
    0000013f: 	cmpb	%dl, (%rdi,%r8)
    00000143: 	sete	%r8b
    00000147: 	movzbl	%r8b, %r8d
    0000014b: 	addq	%r8, %rax
    0000014e: 	leal	0x2(%rsi), %r8d
    00000152: 	cmpl	%r8d, %ecx
    00000155: 	jle	.Ltmp64 # Offset: 341
    0000015b: 	movslq	%r8d, %r8
    0000015e: 	cmpb	%dl, (%rdi,%r8)
    00000162: 	sete	%r8b
    00000166: 	movzbl	%r8b, %r8d
    0000016a: 	addq	%r8, %rax
    0000016d: 	leal	0x3(%rsi), %r8d
    00000171: 	cmpl	%r8d, %ecx
    00000174: 	jle	.Ltmp64 # Offset: 372
    0000017a: 	movslq	%r8d, %r8
    0000017d: 	cmpb	%dl, (%rdi,%r8)
    00000181: 	sete	%r8b
    00000185: 	movzbl	%r8b, %r8d
    00000189: 	addq	%r8, %rax
    0000018c: 	leal	0x4(%rsi), %r8d
    00000190: 	cmpl	%r8d, %ecx
    00000193: 	jle	.Ltmp64 # Offset: 403
    00000199: 	movslq	%r8d, %r8
    0000019c: 	cmpb	%dl, (%rdi,%r8)
    000001a0: 	sete	%r8b
    000001a4: 	movzbl	%r8b, %r8d
    000001a8: 	addq	%r8, %rax
    000001ab: 	leal	0x5(%rsi), %r8d
    000001af: 	cmpl	%r8d, %ecx
    000001b2: 	jle	.Ltmp64 # Offset: 434
    000001b8: 	movslq	%r8d, %r8
    000001bb: 	cmpb	%dl, (%rdi,%r8)
    000001bf: 	sete	%r8b
    000001c3: 	movzbl	%r8b, %r8d
    000001c7: 	addq	%r8, %rax
    000001ca: 	leal	0x6(%rsi), %r8d
    000001ce: 	cmpl	%r8d, %ecx
    000001d1: 	jle	.Ltmp64 # Offset: 465
    000001d7: 	movslq	%r8d, %r8
    000001da: 	cmpb	%dl, (%rdi,%r8)
    000001de: 	sete	%r8b
    000001e2: 	movzbl	%r8b, %r8d
    000001e6: 	addq	%r8, %rax
    000001e9: 	leal	0x7(%rsi), %r8d
    000001ed: 	cmpl	%r8d, %ecx
    000001f0: 	jle	.Ltmp64 # Offset: 496
    000001f6: 	movslq	%r8d, %r8
    000001f9: 	cmpb	%dl, (%rdi,%r8)
    000001fd: 	sete	%r8b
    00000201: 	movzbl	%r8b, %r8d
    00000205: 	addq	%r8, %rax
    00000208: 	leal	0x8(%rsi), %r8d
    0000020c: 	cmpl	%r8d, %ecx
    0000020f: 	jle	.Ltmp64 # Offset: 527
    00000215: 	movslq	%r8d, %r8
    00000218: 	cmpb	%dl, (%rdi,%r8)
    0000021c: 	sete	%r8b
    00000220: 	movzbl	%r8b, %r8d
    00000224: 	addq	%r8, %rax
    00000227: 	leal	0x9(%rsi), %r8d
    0000022b: 	cmpl	%r8d, %ecx
    0000022e: 	jle	.Ltmp64 # Offset: 558
    00000234: 	movslq	%r8d, %r8
    00000237: 	cmpb	%dl, (%rdi,%r8)
    0000023b: 	sete	%r8b
    0000023f: 	movzbl	%r8b, %r8d
    00000243: 	addq	%r8, %rax
    00000246: 	leal	0xa(%rsi), %r8d
    0000024a: 	cmpl	%r8d, %ecx
    0000024d: 	jle	.Ltmp64 # Offset: 589
    00000253: 	movslq	%r8d, %r8
    00000256: 	cmpb	%dl, (%rdi,%r8)
    0000025a: 	sete	%r8b
    0000025e: 	movzbl	%r8b, %r8d
    00000262: 	addq	%r8, %rax
    00000265: 	leal	0xb(%rsi), %r8d
    00000269: 	cmpl	%r8d, %ecx
    0000026c: 	jle	.Ltmp64 # Offset: 620
    0000026e: 	movslq	%r8d, %r8
    00000271: 	cmpb	%dl, (%rdi,%r8)
    00000275: 	sete	%r8b
    00000279: 	movzbl	%r8b, %r8d
    0000027d: 	addq	%r8, %rax
    00000280: 	leal	0xc(%rsi), %r8d
    00000284: 	cmpl	%r8d, %ecx
    00000287: 	jle	.Ltmp64 # Offset: 647
    00000289: 	movslq	%r8d, %r8
    0000028c: 	cmpb	%dl, (%rdi,%r8)
    00000290: 	sete	%r8b
    00000294: 	movzbl	%r8b, %r8d
    00000298: 	addq	%r8, %rax
    0000029b: 	leal	0xd(%rsi), %r8d
    0000029f: 	cmpl	%r8d, %ecx
    000002a2: 	jle	.Ltmp64 # Offset: 674
    000002a4: 	movslq	%r8d, %r8
    000002a7: 	cmpb	%dl, (%rdi,%r8)
    000002ab: 	sete	%r8b
    000002af: 	addl	$0xe, %esi
    000002b2: 	movzbl	%r8b, %r8d
    000002b6: 	addq	%r8, %rax
    000002b9: 	cmpl	%esi, %ecx
    000002bb: 	jle	.Ltmp64 # Offset: 699
    000002bd: 	movslq	%esi, %rsi
    000002c0: 	cmpb	%dl, (%rdi,%rsi)
    000002c3: 	sete	%dl
    000002c6: 	movzbl	%dl, %edx
    000002c9: 	addq	%rdx, %rax
    000002cc: 	retq # Offset: 716
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp60:
    000002d0: 	xorl	%eax, %eax
.Ltmp64:
    000002d2: 	retq # Offset: 722
.Ltmp61:
    000002d3: 	xorl	%esi, %esi
    000002d5: 	xorl	%eax, %eax
    000002d7: 	jmp	.Ltmp65 # Offset: 727
.Ltmp63:
    000002dc: 	retq # Offset: 732
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1IhEmPT_iS0_"

Binary Function "_Z6count2IhEmPT_iS0_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x2740
  Size        : 0x8f
  MaxSize     : 0x90
  Offset      : 0x2740
  Section     : .text
  Orc Section : .local.text._Z6count2IhEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %r10d
    0000000a: 	movl	%esi, %edi
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp66 # Offset: 15
    00000011: 	leal	-0x2(%rsi), %r11d
    00000015: 	movq	%r9, %rax
    00000018: 	xorl	%r8d, %r8d
    0000001b: 	shrl	%r11d
    0000001e: 	movl	%r11d, %ecx
    00000021: 	leaq	0x2(%r9,%rcx,2), %rsi
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp67:
    00000030: 	xorl	%ecx, %ecx
    00000032: 	cmpb	(%rax), %dl
    00000034: 	sete	%cl
    00000037: 	addq	%rcx, %r8
    0000003a: 	xorl	%ecx, %ecx
    0000003c: 	cmpb	0x1(%rax), %dl
    0000003f: 	sete	%cl
    00000042: 	addq	$0x2, %rax
    00000046: 	addq	%rcx, %r8
    00000049: 	cmpq	%rsi, %rax
    0000004c: 	jne	.Ltmp67 # Offset: 76
    0000004e: 	leal	0x2(%r11,%r11), %eax
.Ltmp69:
    00000053: 	cmpl	%eax, %edi
    00000055: 	jle	.Ltmp68 # Offset: 85
    00000057: 	movslq	%eax, %rdx
    0000005a: 	cmpb	%r10b, (%r9,%rdx)
    0000005e: 	sete	%dl
    00000061: 	addl	$0x1, %eax
    00000064: 	movzbl	%dl, %edx
    00000067: 	addq	%rdx, %r8
    0000006a: 	cmpl	%eax, %edi
    0000006c: 	jle	.Ltmp68 # Offset: 108
    0000006e: 	cltq
    00000070: 	cmpb	%r10b, (%r9,%rax)
    00000074: 	sete	%al
    00000077: 	movzbl	%al, %eax
    0000007a: 	addq	%rax, %r8
.Ltmp68:
    0000007d: 	movq	%r8, %rax
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp66:
    00000088: 	xorl	%eax, %eax
    0000008a: 	xorl	%r8d, %r8d
    0000008d: 	jmp	.Ltmp69 # Offset: 141
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2IhEmPT_iS0_"

Binary Function "_Z6count3IhEmPT_iS0_" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x27d0
  Size        : 0xd6
  MaxSize     : 0xe0
  Offset      : 0x27d0
  Section     : .text
  Orc Section : .local.text._Z6count3IhEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r8d
    0000000a: 	movl	%edx, %r10d
    0000000d: 	movl	%edx, %ecx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp70 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r11d
    0000001c: 	movq	%rdi, %rdx
    0000001f: 	shrl	$0x2, %r11d
    00000023: 	movl	%r11d, %eax
    00000026: 	leaq	0x4(%rdi,%rax,4), %rdi
    0000002b: 	xorl	%eax, %eax
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp71:
    00000030: 	xorl	%esi, %esi
    00000032: 	cmpb	(%rdx), %cl
    00000034: 	sete	%sil
    00000038: 	addq	%rsi, %rax
    0000003b: 	xorl	%esi, %esi
    0000003d: 	cmpb	0x1(%rdx), %cl
    00000040: 	sete	%sil
    00000044: 	addq	%rsi, %rax
    00000047: 	xorl	%esi, %esi
    00000049: 	cmpb	0x2(%rdx), %cl
    0000004c: 	sete	%sil
    00000050: 	addq	%rsi, %rax
    00000053: 	xorl	%esi, %esi
    00000055: 	cmpb	0x3(%rdx), %cl
    00000058: 	sete	%sil
    0000005c: 	addq	$0x4, %rdx
    00000060: 	addq	%rsi, %rax
    00000063: 	cmpq	%rdx, %rdi
    00000066: 	jne	.Ltmp71 # Offset: 102
    00000068: 	leal	0x4(,%r11,4), %edx
.Ltmp73:
    00000070: 	cmpl	%edx, %r8d
    00000073: 	jle	.Ltmp72 # Offset: 115
    00000075: 	movslq	%edx, %rcx
    00000078: 	cmpb	%r10b, (%r9,%rcx)
    0000007c: 	sete	%cl
    0000007f: 	movzbl	%cl, %ecx
    00000082: 	addq	%rcx, %rax
    00000085: 	leal	0x1(%rdx), %ecx
    00000088: 	cmpl	%ecx, %r8d
    0000008b: 	jle	.Ltmp72 # Offset: 139
    0000008d: 	movslq	%ecx, %rcx
    00000090: 	cmpb	%r10b, (%r9,%rcx)
    00000094: 	sete	%cl
    00000097: 	movzbl	%cl, %ecx
    0000009a: 	addq	%rcx, %rax
    0000009d: 	leal	0x2(%rdx), %ecx
    000000a0: 	cmpl	%ecx, %r8d
    000000a3: 	jle	.Ltmp72 # Offset: 163
    000000a5: 	movslq	%ecx, %rcx
    000000a8: 	cmpb	%r10b, (%r9,%rcx)
    000000ac: 	sete	%cl
    000000af: 	addl	$0x3, %edx
    000000b2: 	movzbl	%cl, %ecx
    000000b5: 	addq	%rcx, %rax
    000000b8: 	cmpl	%r8d, %edx
    000000bb: 	jge	.Ltmp72 # Offset: 187
    000000bd: 	movslq	%edx, %rdx
    000000c0: 	cmpb	%r10b, (%r9,%rdx)
    000000c4: 	sete	%dl
    000000c7: 	movzbl	%dl, %edx
    000000ca: 	addq	%rdx, %rax
.Ltmp72:
    000000cd: 	retq # Offset: 205
    000000ce: 	nop # Size: 2
.Ltmp70:
    000000d0: 	xorl	%edx, %edx
    000000d2: 	xorl	%eax, %eax
    000000d4: 	jmp	.Ltmp73 # Offset: 212
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3IhEmPT_iS0_"

Binary Function "_Z6count4IhEmPT_iS0_" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x28b0
  Size        : 0x33b
  MaxSize     : 0x340
  Offset      : 0x28b0
  Section     : .text
  Orc Section : .local.text._Z6count4IhEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r8
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %r10d
    0000000e: 	cmpl	$0x3, %esi
    00000011: 	jle	.Ltmp74 # Offset: 17
    00000017: 	leal	-0x4(%r9), %ebx
    0000001b: 	movl	%edx, %esi
    0000001d: 	xorl	%ecx, %ecx
    0000001f: 	movq	%rdi, %rdx
    00000022: 	shrl	$0x2, %ebx
    00000025: 	movl	%ebx, %eax
    00000027: 	leaq	0x4(%rdi,%rax,4), %r11
    0000002c: 	xorl	%eax, %eax
    0000002e: 	nop # Size: 2
.Ltmp75:
    00000030: 	xorl	%edi, %edi
    00000032: 	cmpb	(%rdx), %sil
    00000035: 	sete	%dil
    00000039: 	addq	%rdi, %rcx
    0000003c: 	xorl	%edi, %edi
    0000003e: 	cmpb	0x1(%rdx), %sil
    00000042: 	sete	%dil
    00000046: 	addq	%rdi, %rax
    00000049: 	xorl	%edi, %edi
    0000004b: 	cmpb	0x2(%rdx), %sil
    0000004f: 	sete	%dil
    00000053: 	addq	%rdi, %rcx
    00000056: 	xorl	%edi, %edi
    00000058: 	cmpb	0x3(%rdx), %sil
    0000005c: 	sete	%dil
    00000060: 	addq	$0x4, %rdx
    00000064: 	addq	%rdi, %rax
    00000067: 	cmpq	%r11, %rdx
    0000006a: 	jne	.Ltmp75 # Offset: 106
    0000006c: 	leal	0x4(,%rbx,4), %esi
.Ltmp80:
    00000073: 	cmpl	%esi, %r9d
    00000076: 	jle	.Ltmp76 # Offset: 118
    0000007c: 	movl	%r9d, %ebx
    0000007f: 	subl	%esi, %ebx
    00000081: 	leal	-0x1(%rbx), %edx
    00000084: 	cmpl	$0xe, %edx
    00000087: 	jbe	.Ltmp77 # Offset: 135
    0000008d: 	movl	%ebx, %edx
    0000008f: 	movd	%r10d, %xmm6
    00000094: 	pxor	%xmm5, %xmm5
    00000098: 	movslq	%esi, %rdi
    0000009b: 	shrl	$0x4, %edx
    0000009e: 	punpcklbw	%xmm6, %xmm6
    000000a2: 	pxor	%xmm7, %xmm7
    000000a6: 	addq	%r8, %rdi
    000000a9: 	leal	-0x1(%rdx), %r11d
    000000ad: 	punpcklwd	%xmm6, %xmm6
    000000b1: 	leaq	0x10(%rdi), %rdx
    000000b5: 	movdqa	DATAat0x19250(%rip), %xmm8
    000000be: 	shlq	$0x4, %r11
    000000c2: 	pshufd	$0x0, %xmm6, %xmm6
    000000c7: 	pxor	%xmm4, %xmm4
    000000cb: 	addq	%rdx, %r11
    000000ce: 	pxor	%xmm3, %xmm3
    000000d2: 	jmp	.Ltmp78 # Offset: 210
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp79:
    000000d8: 	addq	$0x10, %rdx
.Ltmp78:
    000000dc: 	movdqu	(%rdi), %xmm0
    000000e0: 	movq	%rdx, %rdi
    000000e3: 	pcmpeqb	%xmm6, %xmm0
    000000e7: 	pand	%xmm8, %xmm0
    000000ec: 	movdqa	%xmm0, %xmm2
    000000f0: 	punpckhbw	%xmm7, %xmm0
    000000f4: 	punpcklbw	%xmm7, %xmm2
    000000f8: 	movdqa	%xmm0, %xmm9
    000000fd: 	punpckhwd	%xmm4, %xmm0
    00000101: 	movdqa	%xmm2, %xmm1
    00000105: 	punpckhwd	%xmm4, %xmm2
    00000109: 	punpcklwd	%xmm4, %xmm9
    0000010e: 	punpcklwd	%xmm4, %xmm1
    00000112: 	movdqa	%xmm1, %xmm10
    00000117: 	punpckhdq	%xmm3, %xmm1
    0000011b: 	punpckldq	%xmm3, %xmm10
    00000120: 	paddq	%xmm10, %xmm1
    00000125: 	movdqa	%xmm2, %xmm10
    0000012a: 	punpckhdq	%xmm3, %xmm2
    0000012e: 	punpckldq	%xmm3, %xmm10
    00000133: 	paddq	%xmm10, %xmm2
    00000138: 	paddq	%xmm2, %xmm1
    0000013c: 	movdqa	%xmm9, %xmm2
    00000141: 	punpckhdq	%xmm3, %xmm9
    00000146: 	punpckldq	%xmm3, %xmm2
    0000014a: 	paddq	%xmm2, %xmm9
    0000014f: 	movdqa	%xmm0, %xmm2
    00000153: 	punpckhdq	%xmm3, %xmm0
    00000157: 	punpckldq	%xmm3, %xmm2
    0000015b: 	paddq	%xmm5, %xmm0
    0000015f: 	paddq	%xmm2, %xmm9
    00000164: 	paddq	%xmm9, %xmm1
    00000169: 	movdqa	%xmm1, %xmm5
    0000016d: 	paddq	%xmm0, %xmm5
    00000171: 	cmpq	%rdx, %r11
    00000174: 	jne	.Ltmp79 # Offset: 372
    0000017a: 	movdqa	%xmm5, %xmm0
    0000017e: 	psrldq	$0x8, %xmm0
    00000183: 	paddq	%xmm0, %xmm5
    00000187: 	movq	%xmm5, %rdx
    0000018c: 	addq	%rdx, %rcx
    0000018f: 	movl	%ebx, %edx
    00000191: 	andl	$-0x10, %edx
    00000194: 	addl	%edx, %esi
    00000196: 	cmpl	%edx, %ebx
    00000198: 	je	.Ltmp76 # Offset: 408
.Ltmp77:
    0000019e: 	movslq	%esi, %rdx
    000001a1: 	cmpb	%r10b, (%r8,%rdx)
    000001a5: 	sete	%dl
    000001a8: 	movzbl	%dl, %edx
    000001ab: 	addq	%rdx, %rcx
    000001ae: 	leal	0x1(%rsi), %edx
    000001b1: 	cmpl	%edx, %r9d
    000001b4: 	jle	.Ltmp76 # Offset: 436
    000001ba: 	movslq	%edx, %rdx
    000001bd: 	cmpb	%r10b, (%r8,%rdx)
    000001c1: 	sete	%dl
    000001c4: 	movzbl	%dl, %edx
    000001c7: 	addq	%rdx, %rcx
    000001ca: 	leal	0x2(%rsi), %edx
    000001cd: 	cmpl	%edx, %r9d
    000001d0: 	jle	.Ltmp76 # Offset: 464
    000001d6: 	movslq	%edx, %rdx
    000001d9: 	cmpb	%r10b, (%r8,%rdx)
    000001dd: 	sete	%dl
    000001e0: 	movzbl	%dl, %edx
    000001e3: 	addq	%rdx, %rcx
    000001e6: 	leal	0x3(%rsi), %edx
    000001e9: 	cmpl	%edx, %r9d
    000001ec: 	jle	.Ltmp76 # Offset: 492
    000001f2: 	movslq	%edx, %rdx
    000001f5: 	cmpb	%r10b, (%r8,%rdx)
    000001f9: 	sete	%dl
    000001fc: 	movzbl	%dl, %edx
    000001ff: 	addq	%rdx, %rcx
    00000202: 	leal	0x4(%rsi), %edx
    00000205: 	cmpl	%r9d, %edx
    00000208: 	jge	.Ltmp76 # Offset: 520
    0000020e: 	movslq	%edx, %rdx
    00000211: 	cmpb	%r10b, (%r8,%rdx)
    00000215: 	sete	%dl
    00000218: 	movzbl	%dl, %edx
    0000021b: 	addq	%rdx, %rcx
    0000021e: 	leal	0x5(%rsi), %edx
    00000221: 	cmpl	%r9d, %edx
    00000224: 	jge	.Ltmp76 # Offset: 548
    0000022a: 	movslq	%edx, %rdx
    0000022d: 	cmpb	%r10b, (%r8,%rdx)
    00000231: 	sete	%dl
    00000234: 	movzbl	%dl, %edx
    00000237: 	addq	%rdx, %rcx
    0000023a: 	leal	0x6(%rsi), %edx
    0000023d: 	cmpl	%edx, %r9d
    00000240: 	jle	.Ltmp76 # Offset: 576
    00000246: 	movslq	%edx, %rdx
    00000249: 	cmpb	%r10b, (%r8,%rdx)
    0000024d: 	sete	%dl
    00000250: 	movzbl	%dl, %edx
    00000253: 	addq	%rdx, %rcx
    00000256: 	leal	0x7(%rsi), %edx
    00000259: 	cmpl	%edx, %r9d
    0000025c: 	jle	.Ltmp76 # Offset: 604
    00000262: 	movslq	%edx, %rdx
    00000265: 	cmpb	%r10b, (%r8,%rdx)
    00000269: 	sete	%dl
    0000026c: 	movzbl	%dl, %edx
    0000026f: 	addq	%rdx, %rcx
    00000272: 	leal	0x8(%rsi), %edx
    00000275: 	cmpl	%edx, %r9d
    00000278: 	jle	.Ltmp76 # Offset: 632
    0000027e: 	movslq	%edx, %rdx
    00000281: 	cmpb	%r10b, (%r8,%rdx)
    00000285: 	sete	%dl
    00000288: 	movzbl	%dl, %edx
    0000028b: 	addq	%rdx, %rcx
    0000028e: 	leal	0x9(%rsi), %edx
    00000291: 	cmpl	%edx, %r9d
    00000294: 	jle	.Ltmp76 # Offset: 660
    0000029a: 	movslq	%edx, %rdx
    0000029d: 	cmpb	%r10b, (%r8,%rdx)
    000002a1: 	sete	%dl
    000002a4: 	movzbl	%dl, %edx
    000002a7: 	addq	%rdx, %rcx
    000002aa: 	leal	0xa(%rsi), %edx
    000002ad: 	cmpl	%edx, %r9d
    000002b0: 	jle	.Ltmp76 # Offset: 688
    000002b2: 	movslq	%edx, %rdx
    000002b5: 	cmpb	%r10b, (%r8,%rdx)
    000002b9: 	sete	%dl
    000002bc: 	movzbl	%dl, %edx
    000002bf: 	addq	%rdx, %rcx
    000002c2: 	leal	0xb(%rsi), %edx
    000002c5: 	cmpl	%edx, %r9d
    000002c8: 	jle	.Ltmp76 # Offset: 712
    000002ca: 	movslq	%edx, %rdx
    000002cd: 	cmpb	%r10b, (%r8,%rdx)
    000002d1: 	sete	%dl
    000002d4: 	movzbl	%dl, %edx
    000002d7: 	addq	%rdx, %rcx
    000002da: 	leal	0xc(%rsi), %edx
    000002dd: 	cmpl	%edx, %r9d
    000002e0: 	jle	.Ltmp76 # Offset: 736
    000002e2: 	movslq	%edx, %rdx
    000002e5: 	cmpb	%r10b, (%r8,%rdx)
    000002e9: 	sete	%dl
    000002ec: 	movzbl	%dl, %edx
    000002ef: 	addq	%rdx, %rcx
    000002f2: 	leal	0xd(%rsi), %edx
    000002f5: 	cmpl	%edx, %r9d
    000002f8: 	jle	.Ltmp76 # Offset: 760
    000002fa: 	movslq	%edx, %rdx
    000002fd: 	cmpb	%r10b, (%r8,%rdx)
    00000301: 	sete	%dl
    00000304: 	addl	$0xe, %esi
    00000307: 	movzbl	%dl, %edx
    0000030a: 	addq	%rdx, %rcx
    0000030d: 	cmpl	%esi, %r9d
    00000310: 	jle	.Ltmp76 # Offset: 784
    00000312: 	movslq	%esi, %rsi
    00000315: 	xorl	%edx, %edx
    00000317: 	cmpb	%r10b, (%r8,%rsi)
    0000031b: 	sete	%dl
    0000031e: 	addq	%rdx, %rcx
.Ltmp76:
    00000321: 	addq	%rcx, %rax
    00000324: 	popq	%rbx
    00000325: 	retq # Offset: 805
    00000326: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp74:
    00000330: 	xorl	%esi, %esi
    00000332: 	xorl	%eax, %eax
    00000334: 	xorl	%ecx, %ecx
    00000336: 	jmp	.Ltmp80 # Offset: 822
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4IhEmPT_iS0_"

Binary Function "_Z6count5IhEmPT_iS0_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x2bf0
  Size        : 0x61b
  MaxSize     : 0x620
  Offset      : 0x2bf0
  Section     : .text
  Orc Section : .local.text._Z6count5IhEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r10d
    00000008: 	pushq	%r12
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %r9d
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	testl	%r10d, %r10d
    00000015: 	jle	.Ltmp81 # Offset: 21
    0000001b: 	leal	-0x4(%rsi), %eax
    0000001e: 	movl	%eax, %esi
    00000020: 	shrl	$0x2, %esi
    00000023: 	addl	$0x1, %esi
    00000026: 	cmpl	$0xb, %eax
    00000029: 	jbe	.Ltmp82 # Offset: 41
    0000002f: 	movd	%edx, %xmm0
    00000033: 	movl	%esi, %edx
    00000035: 	pxor	%xmm8, %xmm8
    0000003a: 	movq	%rdi, %rax
    0000003d: 	punpcklbw	%xmm0, %xmm0
    00000041: 	shrl	$0x2, %edx
    00000044: 	movdqa	%xmm8, %xmm11
    00000049: 	pxor	%xmm7, %xmm7
    0000004d: 	punpcklwd	%xmm0, %xmm0
    00000051: 	subl	$0x1, %edx
    00000054: 	movdqa	%xmm8, %xmm9
    00000059: 	movdqa	DATAat0x19250(%rip), %xmm14
    00000062: 	pshufd	$0x0, %xmm0, %xmm6
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movdqa	%xmm8, %xmm12
    00000070: 	movdqa	%xmm8, %xmm10
    00000075: 	movaps	%xmm6, -0x10(%rsp)
    0000007a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000007f: 	movdqa	%xmm8, %xmm13
    00000084: 	movdqa	%xmm8, %xmm6
    00000089: 	movdqa	%xmm8, %xmm3
    0000008e: 	pxor	%xmm1, %xmm1
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp83:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	pxor	%xmm4, %xmm4
    000000a0: 	addq	$0x10, %rax
    000000a4: 	pcmpeqb	-0x10(%rsp), %xmm0
    000000aa: 	pand	%xmm14, %xmm0
    000000af: 	movdqa	%xmm0, %xmm2
    000000b3: 	punpckhbw	%xmm4, %xmm0
    000000b7: 	punpcklbw	%xmm4, %xmm2
    000000bb: 	movdqa	%xmm0, %xmm4
    000000bf: 	punpckhwd	%xmm7, %xmm0
    000000c3: 	movdqa	%xmm2, %xmm5
    000000c7: 	punpckhwd	%xmm7, %xmm2
    000000cb: 	punpcklwd	%xmm7, %xmm4
    000000cf: 	punpcklwd	%xmm7, %xmm5
    000000d3: 	movdqa	%xmm5, %xmm15
    000000d8: 	punpckhdq	%xmm1, %xmm5
    000000dc: 	paddq	%xmm5, %xmm6
    000000e0: 	movdqa	%xmm2, %xmm5
    000000e4: 	punpckhdq	%xmm1, %xmm2
    000000e8: 	paddq	%xmm2, %xmm10
    000000ed: 	movdqa	%xmm4, %xmm2
    000000f1: 	punpckldq	%xmm1, %xmm15
    000000f6: 	punpckldq	%xmm1, %xmm2
    000000fa: 	punpckldq	%xmm1, %xmm5
    000000fe: 	punpckhdq	%xmm1, %xmm4
    00000102: 	paddq	%xmm2, %xmm12
    00000107: 	movdqa	%xmm0, %xmm2
    0000010b: 	punpckhdq	%xmm1, %xmm0
    0000010f: 	punpckldq	%xmm1, %xmm2
    00000113: 	paddq	%xmm15, %xmm3
    00000118: 	paddq	%xmm5, %xmm13
    0000011d: 	paddq	%xmm4, %xmm9
    00000122: 	paddq	%xmm2, %xmm11
    00000127: 	paddq	%xmm0, %xmm8
    0000012c: 	cmpq	%rax, %rdx
    0000012f: 	jne	.Ltmp83 # Offset: 303
    00000135: 	movq	%xmm3, %rax
    0000013a: 	movq	%xmm13, %rdx
    0000013f: 	psrldq	$0x8, %xmm3
    00000144: 	movl	%esi, %ebp
    00000146: 	addq	%rdx, %rax
    00000149: 	movq	%xmm12, %rdx
    0000014e: 	movq	%xmm6, %rbx
    00000153: 	andl	$-0x4, %ebp
    00000156: 	addq	%rdx, %rax
    00000159: 	movq	%xmm11, %rdx
    0000015e: 	psrldq	$0x8, %xmm6
    00000163: 	addq	%rdx, %rax
    00000166: 	movq	%xmm3, %rdx
    0000016b: 	movhlps	%xmm13, %xmm3
    0000016f: 	movq	%xmm3, %rcx
    00000174: 	movhlps	%xmm12, %xmm3
    00000178: 	addq	%rcx, %rdx
    0000017b: 	movq	%xmm3, %rcx
    00000180: 	movhlps	%xmm11, %xmm3
    00000184: 	addq	%rcx, %rdx
    00000187: 	movq	%xmm3, %rcx
    0000018c: 	addq	%rcx, %rdx
    0000018f: 	movq	%xmm10, %rcx
    00000194: 	addq	%rcx, %rbx
    00000197: 	movq	%xmm9, %rcx
    0000019c: 	addq	%rcx, %rbx
    0000019f: 	movq	%xmm8, %rcx
    000001a4: 	addq	%rcx, %rbx
    000001a7: 	movq	%xmm6, %rcx
    000001ac: 	movhlps	%xmm10, %xmm6
    000001b0: 	movq	%xmm6, %r11
    000001b5: 	movhlps	%xmm9, %xmm6
    000001b9: 	addq	%r11, %rcx
    000001bc: 	movq	%xmm6, %r11
    000001c1: 	movhlps	%xmm8, %xmm6
    000001c5: 	addq	%r11, %rcx
    000001c8: 	movq	%xmm6, %r11
    000001cd: 	addq	%r11, %rcx
    000001d0: 	leal	(,%rbp,4), %r11d
    000001d8: 	cmpl	%ebp, %esi
    000001da: 	je	.Ltmp84 # Offset: 474
.Ltmp104:
    000001e0: 	movslq	%r11d, %rbp
    000001e3: 	xorl	%r12d, %r12d
    000001e6: 	cmpb	%r9b, (%rdi,%rbp)
    000001ea: 	sete	%r12b
    000001ee: 	addq	%r12, %rax
    000001f1: 	cmpb	0x1(%rdi,%rbp), %r9b
    000001f6: 	je	.Ltmp85 # Offset: 502
    000001fc: 	cmpb	0x2(%rdi,%rbp), %r9b
    00000201: 	je	.Ltmp86 # Offset: 513
.Ltmp99:
    00000207: 	cmpb	0x3(%rdi,%rbp), %r9b
    0000020c: 	je	.Ltmp87 # Offset: 524
.Ltmp98:
    00000212: 	leal	0x4(%r11), %ebp
    00000216: 	cmpl	%ebp, %r10d
    00000219: 	jle	.Ltmp84 # Offset: 537
    0000021b: 	movslq	%ebp, %rbp
    0000021e: 	xorl	%r12d, %r12d
    00000221: 	cmpb	%r9b, (%rdi,%rbp)
    00000225: 	sete	%r12b
    00000229: 	addq	%r12, %rax
    0000022c: 	cmpb	0x1(%rdi,%rbp), %r9b
    00000231: 	je	.Ltmp88 # Offset: 561
    00000237: 	cmpb	0x2(%rdi,%rbp), %r9b
    0000023c: 	je	.Ltmp89 # Offset: 572
.Ltmp100:
    00000242: 	cmpb	0x3(%rdi,%rbp), %r9b
    00000247: 	je	.Ltmp90 # Offset: 583
.Ltmp101:
    0000024d: 	addl	$0x8, %r11d
    00000251: 	cmpl	%r11d, %r10d
    00000254: 	jle	.Ltmp84 # Offset: 596
    00000256: 	movslq	%r11d, %r11
    00000259: 	xorl	%r10d, %r10d
    0000025c: 	cmpb	%r9b, (%rdi,%r11)
    00000260: 	sete	%r10b
    00000264: 	addq	%r10, %rax
    00000267: 	cmpb	0x1(%rdi,%r11), %r9b
    0000026c: 	je	.Ltmp91 # Offset: 620
    00000272: 	cmpb	0x2(%rdi,%r11), %r9b
    00000277: 	je	.Ltmp92 # Offset: 631
.Ltmp102:
    0000027d: 	cmpb	0x3(%rdi,%r11), %r9b
    00000282: 	je	.Ltmp93 # Offset: 642
.Ltmp84:
    00000288: 	addq	%rbx, %rdx
    0000028b: 	shll	$0x2, %esi
    0000028e: 	addq	%rcx, %rdx
.Ltmp103:
    00000291: 	cmpl	%esi, %r8d
    00000294: 	jle	.Ltmp94 # Offset: 660
    0000029a: 	movl	%r8d, %ebx
    0000029d: 	subl	%esi, %ebx
    0000029f: 	leal	-0x1(%rbx), %ecx
    000002a2: 	cmpl	$0xe, %ecx
    000002a5: 	jbe	.Ltmp95 # Offset: 677
    000002ab: 	movl	%ebx, %ecx
    000002ad: 	movd	%r9d, %xmm5
    000002b2: 	pxor	%xmm2, %xmm2
    000002b6: 	movslq	%esi, %r10
    000002b9: 	shrl	$0x4, %ecx
    000002bc: 	punpcklbw	%xmm5, %xmm5
    000002c0: 	pxor	%xmm6, %xmm6
    000002c4: 	addq	%rdi, %r10
    000002c7: 	leal	-0x1(%rcx), %r11d
    000002cb: 	punpcklwd	%xmm5, %xmm5
    000002cf: 	leaq	0x10(%r10), %rcx
    000002d3: 	movdqa	DATAat0x19250(%rip), %xmm14
    000002dc: 	shlq	$0x4, %r11
    000002e0: 	pshufd	$0x0, %xmm5, %xmm5
    000002e5: 	pxor	%xmm4, %xmm4
    000002e9: 	addq	%rcx, %r11
    000002ec: 	pxor	%xmm3, %xmm3
    000002f0: 	jmp	.Ltmp96 # Offset: 752
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp97:
    000002f8: 	addq	$0x10, %rcx
.Ltmp96:
    000002fc: 	movdqu	(%r10), %xmm0
    00000301: 	movq	%rcx, %r10
    00000304: 	pcmpeqb	%xmm5, %xmm0
    00000308: 	pand	%xmm14, %xmm0
    0000030d: 	movdqa	%xmm0, %xmm1
    00000311: 	punpckhbw	%xmm6, %xmm0
    00000315: 	punpcklbw	%xmm6, %xmm1
    00000319: 	movdqa	%xmm0, %xmm7
    0000031d: 	punpckhwd	%xmm4, %xmm0
    00000321: 	movdqa	%xmm1, %xmm8
    00000326: 	punpckhwd	%xmm4, %xmm1
    0000032a: 	punpcklwd	%xmm4, %xmm7
    0000032e: 	movdqa	%xmm1, %xmm9
    00000333: 	punpcklwd	%xmm4, %xmm8
    00000338: 	punpckhdq	%xmm3, %xmm1
    0000033c: 	punpckldq	%xmm3, %xmm9
    00000341: 	paddq	%xmm9, %xmm1
    00000346: 	movdqa	%xmm8, %xmm9
    0000034b: 	punpckhdq	%xmm3, %xmm8
    00000350: 	punpckldq	%xmm3, %xmm9
    00000355: 	paddq	%xmm9, %xmm8
    0000035a: 	paddq	%xmm8, %xmm1
    0000035f: 	movdqa	%xmm7, %xmm8
    00000364: 	punpckhdq	%xmm3, %xmm7
    00000368: 	punpckldq	%xmm3, %xmm8
    0000036d: 	paddq	%xmm8, %xmm7
    00000372: 	movdqa	%xmm0, %xmm8
    00000377: 	punpckhdq	%xmm3, %xmm0
    0000037b: 	punpckldq	%xmm3, %xmm8
    00000380: 	paddq	%xmm2, %xmm0
    00000384: 	paddq	%xmm8, %xmm7
    00000389: 	paddq	%xmm7, %xmm1
    0000038d: 	movdqa	%xmm1, %xmm2
    00000391: 	paddq	%xmm0, %xmm2
    00000395: 	cmpq	%rcx, %r11
    00000398: 	jne	.Ltmp97 # Offset: 920
    0000039e: 	movdqa	%xmm2, %xmm0
    000003a2: 	psrldq	$0x8, %xmm0
    000003a7: 	paddq	%xmm0, %xmm2
    000003ab: 	movq	%xmm2, %rcx
    000003b0: 	addq	%rcx, %rax
    000003b3: 	movl	%ebx, %ecx
    000003b5: 	andl	$-0x10, %ecx
    000003b8: 	addl	%ecx, %esi
    000003ba: 	cmpl	%ecx, %ebx
    000003bc: 	je	.Ltmp94 # Offset: 956
.Ltmp95:
    000003c2: 	movslq	%esi, %rcx
    000003c5: 	cmpb	%r9b, (%rdi,%rcx)
    000003c9: 	sete	%cl
    000003cc: 	movzbl	%cl, %ecx
    000003cf: 	addq	%rcx, %rax
    000003d2: 	leal	0x1(%rsi), %ecx
    000003d5: 	cmpl	%r8d, %ecx
    000003d8: 	jge	.Ltmp94 # Offset: 984
    000003de: 	movslq	%ecx, %rcx
    000003e1: 	cmpb	%r9b, (%rdi,%rcx)
    000003e5: 	sete	%cl
    000003e8: 	movzbl	%cl, %ecx
    000003eb: 	addq	%rcx, %rax
    000003ee: 	leal	0x2(%rsi), %ecx
    000003f1: 	cmpl	%ecx, %r8d
    000003f4: 	jle	.Ltmp94 # Offset: 1012
    000003fa: 	movslq	%ecx, %rcx
    000003fd: 	cmpb	%r9b, (%rdi,%rcx)
    00000401: 	sete	%cl
    00000404: 	movzbl	%cl, %ecx
    00000407: 	addq	%rcx, %rax
    0000040a: 	leal	0x3(%rsi), %ecx
    0000040d: 	cmpl	%r8d, %ecx
    00000410: 	jge	.Ltmp94 # Offset: 1040
    00000416: 	movslq	%ecx, %rcx
    00000419: 	cmpb	%r9b, (%rdi,%rcx)
    0000041d: 	sete	%cl
    00000420: 	movzbl	%cl, %ecx
    00000423: 	addq	%rcx, %rax
    00000426: 	leal	0x4(%rsi), %ecx
    00000429: 	cmpl	%r8d, %ecx
    0000042c: 	jge	.Ltmp94 # Offset: 1068
    00000432: 	movslq	%ecx, %rcx
    00000435: 	cmpb	%r9b, (%rdi,%rcx)
    00000439: 	sete	%cl
    0000043c: 	movzbl	%cl, %ecx
    0000043f: 	addq	%rcx, %rax
    00000442: 	leal	0x5(%rsi), %ecx
    00000445: 	cmpl	%ecx, %r8d
    00000448: 	jle	.Ltmp94 # Offset: 1096
    0000044e: 	movslq	%ecx, %rcx
    00000451: 	cmpb	%r9b, (%rdi,%rcx)
    00000455: 	sete	%cl
    00000458: 	movzbl	%cl, %ecx
    0000045b: 	addq	%rcx, %rax
    0000045e: 	leal	0x6(%rsi), %ecx
    00000461: 	cmpl	%ecx, %r8d
    00000464: 	jle	.Ltmp94 # Offset: 1124
    0000046a: 	movslq	%ecx, %rcx
    0000046d: 	cmpb	%r9b, (%rdi,%rcx)
    00000471: 	sete	%cl
    00000474: 	movzbl	%cl, %ecx
    00000477: 	addq	%rcx, %rax
    0000047a: 	leal	0x7(%rsi), %ecx
    0000047d: 	cmpl	%ecx, %r8d
    00000480: 	jle	.Ltmp94 # Offset: 1152
    00000486: 	movslq	%ecx, %rcx
    00000489: 	cmpb	%r9b, (%rdi,%rcx)
    0000048d: 	sete	%cl
    00000490: 	movzbl	%cl, %ecx
    00000493: 	addq	%rcx, %rax
    00000496: 	leal	0x8(%rsi), %ecx
    00000499: 	cmpl	%ecx, %r8d
    0000049c: 	jle	.Ltmp94 # Offset: 1180
    000004a2: 	movslq	%ecx, %rcx
    000004a5: 	cmpb	%r9b, (%rdi,%rcx)
    000004a9: 	sete	%cl
    000004ac: 	movzbl	%cl, %ecx
    000004af: 	addq	%rcx, %rax
    000004b2: 	leal	0x9(%rsi), %ecx
    000004b5: 	cmpl	%ecx, %r8d
    000004b8: 	jle	.Ltmp94 # Offset: 1208
    000004be: 	movslq	%ecx, %rcx
    000004c1: 	cmpb	%r9b, (%rdi,%rcx)
    000004c5: 	sete	%cl
    000004c8: 	movzbl	%cl, %ecx
    000004cb: 	addq	%rcx, %rax
    000004ce: 	leal	0xa(%rsi), %ecx
    000004d1: 	cmpl	%ecx, %r8d
    000004d4: 	jle	.Ltmp94 # Offset: 1236
    000004d6: 	movslq	%ecx, %rcx
    000004d9: 	cmpb	%r9b, (%rdi,%rcx)
    000004dd: 	sete	%cl
    000004e0: 	movzbl	%cl, %ecx
    000004e3: 	addq	%rcx, %rax
    000004e6: 	leal	0xb(%rsi), %ecx
    000004e9: 	cmpl	%r8d, %ecx
    000004ec: 	jge	.Ltmp94 # Offset: 1260
    000004ee: 	movslq	%ecx, %rcx
    000004f1: 	cmpb	%r9b, (%rdi,%rcx)
    000004f5: 	sete	%cl
    000004f8: 	movzbl	%cl, %ecx
    000004fb: 	addq	%rcx, %rax
    000004fe: 	leal	0xc(%rsi), %ecx
    00000501: 	cmpl	%ecx, %r8d
    00000504: 	jle	.Ltmp94 # Offset: 1284
    00000506: 	movslq	%ecx, %rcx
    00000509: 	cmpb	%r9b, (%rdi,%rcx)
    0000050d: 	sete	%cl
    00000510: 	movzbl	%cl, %ecx
    00000513: 	addq	%rcx, %rax
    00000516: 	leal	0xd(%rsi), %ecx
    00000519: 	cmpl	%ecx, %r8d
    0000051c: 	jle	.Ltmp94 # Offset: 1308
    0000051e: 	movslq	%ecx, %rcx
    00000521: 	cmpb	%r9b, (%rdi,%rcx)
    00000525: 	sete	%cl
    00000528: 	addl	$0xe, %esi
    0000052b: 	movzbl	%cl, %ecx
    0000052e: 	addq	%rcx, %rax
    00000531: 	cmpl	%esi, %r8d
    00000534: 	jle	.Ltmp94 # Offset: 1332
    00000536: 	movslq	%esi, %rsi
    00000539: 	xorl	%ecx, %ecx
    0000053b: 	cmpb	%r9b, (%rdi,%rsi)
    0000053f: 	sete	%cl
    00000542: 	addq	%rcx, %rax
.Ltmp94:
    00000545: 	popq	%rbx
    00000546: 	addq	%rdx, %rax
    00000549: 	popq	%rbp
    0000054a: 	popq	%r12
    0000054c: 	retq # Offset: 1356
    0000054d: 	nopl	(%rax) # Size: 3
.Ltmp87:
    00000550: 	addq	$0x1, %rcx
    00000554: 	jmp	.Ltmp98 # Offset: 1364
    00000559: 	nopl	(%rax) # Size: 7
.Ltmp86:
    00000560: 	addq	$0x1, %rbx
    00000564: 	cmpb	0x3(%rdi,%rbp), %r9b
    00000569: 	jne	.Ltmp98 # Offset: 1385
    0000056f: 	jmp	.Ltmp87 # Offset: 1391
    00000571: 	nopl	(%rax) # Size: 7
.Ltmp85:
    00000578: 	addq	$0x1, %rdx
    0000057c: 	cmpb	0x2(%rdi,%rbp), %r9b
    00000581: 	jne	.Ltmp99 # Offset: 1409
    00000587: 	jmp	.Ltmp86 # Offset: 1415
    00000589: 	nopl	(%rax) # Size: 7
.Ltmp88:
    00000590: 	addq	$0x1, %rdx
    00000594: 	cmpb	0x2(%rdi,%rbp), %r9b
    00000599: 	jne	.Ltmp100 # Offset: 1433
    0000059f: 	jmp	.Ltmp89 # Offset: 1439
    000005a1: 	nopl	(%rax) # Size: 7
.Ltmp90:
    000005a8: 	addq	$0x1, %rcx
    000005ac: 	jmp	.Ltmp101 # Offset: 1452
    000005b1: 	nopl	(%rax) # Size: 7
.Ltmp89:
    000005b8: 	addq	$0x1, %rbx
    000005bc: 	cmpb	0x3(%rdi,%rbp), %r9b
    000005c1: 	jne	.Ltmp101 # Offset: 1473
    000005c7: 	jmp	.Ltmp90 # Offset: 1479
    000005c9: 	nopl	(%rax) # Size: 7
.Ltmp93:
    000005d0: 	addq	$0x1, %rcx
    000005d4: 	jmp	.Ltmp84 # Offset: 1492
    000005d9: 	nopl	(%rax) # Size: 7
.Ltmp91:
    000005e0: 	addq	$0x1, %rdx
    000005e4: 	cmpb	0x2(%rdi,%r11), %r9b
    000005e9: 	jne	.Ltmp102 # Offset: 1513
.Ltmp92:
    000005ef: 	addq	$0x1, %rbx
    000005f3: 	cmpb	0x3(%rdi,%r11), %r9b
    000005f8: 	jne	.Ltmp84 # Offset: 1528
    000005fe: 	jmp	.Ltmp93 # Offset: 1534
.Ltmp81:
    00000600: 	xorl	%edx, %edx
    00000602: 	xorl	%esi, %esi
    00000604: 	xorl	%eax, %eax
    00000606: 	jmp	.Ltmp103 # Offset: 1542
.Ltmp82:
    0000060b: 	xorl	%r11d, %r11d
    0000060e: 	xorl	%ecx, %ecx
    00000610: 	xorl	%ebx, %ebx
    00000612: 	xorl	%edx, %edx
    00000614: 	xorl	%eax, %eax
    00000616: 	jmp	.Ltmp104 # Offset: 1558
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5IhEmPT_iS0_"

Binary Function "_Z6count6IhEmPT_iS0_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x3210
  Size        : 0x593
  MaxSize     : 0x5a0
  Offset      : 0x3210
  Section     : .text
  Orc Section : .local.text._Z6count6IhEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r10d
    00000008: 	pushq	%r12
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %r9d
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	testl	%r10d, %r10d
    00000015: 	jle	.Ltmp105 # Offset: 21
    0000001b: 	leal	-0x4(%rsi), %eax
    0000001e: 	movl	%eax, %esi
    00000020: 	shrl	$0x2, %esi
    00000023: 	addl	$0x1, %esi
    00000026: 	cmpl	$0xb, %eax
    00000029: 	jbe	.Ltmp106 # Offset: 41
    0000002f: 	movd	%edx, %xmm0
    00000033: 	movl	%esi, %edx
    00000035: 	pxor	%xmm8, %xmm8
    0000003a: 	movq	%rdi, %rax
    0000003d: 	punpcklbw	%xmm0, %xmm0
    00000041: 	shrl	$0x2, %edx
    00000044: 	movdqa	%xmm8, %xmm11
    00000049: 	pxor	%xmm7, %xmm7
    0000004d: 	punpcklwd	%xmm0, %xmm0
    00000051: 	subl	$0x1, %edx
    00000054: 	movdqa	%xmm8, %xmm9
    00000059: 	movdqa	DATAat0x19250(%rip), %xmm14
    00000062: 	pshufd	$0x0, %xmm0, %xmm6
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movdqa	%xmm8, %xmm12
    00000070: 	movdqa	%xmm8, %xmm10
    00000075: 	movaps	%xmm6, -0x10(%rsp)
    0000007a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000007f: 	movdqa	%xmm8, %xmm13
    00000084: 	movdqa	%xmm8, %xmm6
    00000089: 	movdqa	%xmm8, %xmm3
    0000008e: 	pxor	%xmm1, %xmm1
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp107:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	pxor	%xmm4, %xmm4
    000000a0: 	addq	$0x10, %rax
    000000a4: 	pcmpeqb	-0x10(%rsp), %xmm0
    000000aa: 	pand	%xmm14, %xmm0
    000000af: 	movdqa	%xmm0, %xmm2
    000000b3: 	punpckhbw	%xmm4, %xmm0
    000000b7: 	punpcklbw	%xmm4, %xmm2
    000000bb: 	movdqa	%xmm0, %xmm4
    000000bf: 	punpckhwd	%xmm7, %xmm0
    000000c3: 	movdqa	%xmm2, %xmm5
    000000c7: 	punpckhwd	%xmm7, %xmm2
    000000cb: 	punpcklwd	%xmm7, %xmm4
    000000cf: 	punpcklwd	%xmm7, %xmm5
    000000d3: 	movdqa	%xmm5, %xmm15
    000000d8: 	punpckhdq	%xmm1, %xmm5
    000000dc: 	paddq	%xmm5, %xmm6
    000000e0: 	movdqa	%xmm2, %xmm5
    000000e4: 	punpckhdq	%xmm1, %xmm2
    000000e8: 	paddq	%xmm2, %xmm10
    000000ed: 	movdqa	%xmm4, %xmm2
    000000f1: 	punpckldq	%xmm1, %xmm15
    000000f6: 	punpckldq	%xmm1, %xmm2
    000000fa: 	punpckldq	%xmm1, %xmm5
    000000fe: 	punpckhdq	%xmm1, %xmm4
    00000102: 	paddq	%xmm2, %xmm12
    00000107: 	movdqa	%xmm0, %xmm2
    0000010b: 	punpckhdq	%xmm1, %xmm0
    0000010f: 	punpckldq	%xmm1, %xmm2
    00000113: 	paddq	%xmm15, %xmm3
    00000118: 	paddq	%xmm5, %xmm13
    0000011d: 	paddq	%xmm4, %xmm9
    00000122: 	paddq	%xmm2, %xmm11
    00000127: 	paddq	%xmm0, %xmm8
    0000012c: 	cmpq	%rax, %rdx
    0000012f: 	jne	.Ltmp107 # Offset: 303
    00000135: 	movq	%xmm3, %rax
    0000013a: 	movq	%xmm13, %rdx
    0000013f: 	psrldq	$0x8, %xmm3
    00000144: 	movl	%esi, %ebp
    00000146: 	addq	%rdx, %rax
    00000149: 	movq	%xmm12, %rdx
    0000014e: 	movq	%xmm6, %rbx
    00000153: 	andl	$-0x4, %ebp
    00000156: 	addq	%rdx, %rax
    00000159: 	movq	%xmm11, %rdx
    0000015e: 	psrldq	$0x8, %xmm6
    00000163: 	addq	%rdx, %rax
    00000166: 	movq	%xmm3, %rdx
    0000016b: 	movhlps	%xmm13, %xmm3
    0000016f: 	movq	%xmm3, %rcx
    00000174: 	movhlps	%xmm12, %xmm3
    00000178: 	addq	%rcx, %rdx
    0000017b: 	movq	%xmm3, %rcx
    00000180: 	movhlps	%xmm11, %xmm3
    00000184: 	addq	%rcx, %rdx
    00000187: 	movq	%xmm3, %rcx
    0000018c: 	addq	%rcx, %rdx
    0000018f: 	movq	%xmm10, %rcx
    00000194: 	addq	%rcx, %rbx
    00000197: 	movq	%xmm9, %rcx
    0000019c: 	addq	%rcx, %rbx
    0000019f: 	movq	%xmm8, %rcx
    000001a4: 	addq	%rcx, %rbx
    000001a7: 	movq	%xmm6, %rcx
    000001ac: 	movhlps	%xmm10, %xmm6
    000001b0: 	movq	%xmm6, %r11
    000001b5: 	movhlps	%xmm9, %xmm6
    000001b9: 	addq	%r11, %rcx
    000001bc: 	movq	%xmm6, %r11
    000001c1: 	movhlps	%xmm8, %xmm6
    000001c5: 	addq	%r11, %rcx
    000001c8: 	movq	%xmm6, %r11
    000001cd: 	addq	%r11, %rcx
    000001d0: 	leal	(,%rbp,4), %r11d
    000001d8: 	cmpl	%ebp, %esi
    000001da: 	je	.Ltmp108 # Offset: 474
.Ltmp114:
    000001e0: 	movslq	%r11d, %rbp
    000001e3: 	xorl	%r12d, %r12d
    000001e6: 	cmpb	%r9b, (%rdi,%rbp)
    000001ea: 	sete	%r12b
    000001ee: 	addq	%r12, %rax
    000001f1: 	xorl	%r12d, %r12d
    000001f4: 	cmpb	%r9b, 0x1(%rdi,%rbp)
    000001f9: 	sete	%r12b
    000001fd: 	addq	%r12, %rdx
    00000200: 	xorl	%r12d, %r12d
    00000203: 	cmpb	%r9b, 0x2(%rdi,%rbp)
    00000208: 	sete	%r12b
    0000020c: 	addq	%r12, %rbx
    0000020f: 	cmpb	%r9b, 0x3(%rdi,%rbp)
    00000214: 	sete	%bpl
    00000218: 	movzbl	%bpl, %ebp
    0000021c: 	addq	%rbp, %rcx
    0000021f: 	leal	0x4(%r11), %ebp
    00000223: 	cmpl	%ebp, %r10d
    00000226: 	jle	.Ltmp108 # Offset: 550
    0000022c: 	movslq	%ebp, %rbp
    0000022f: 	xorl	%r12d, %r12d
    00000232: 	cmpb	%r9b, (%rdi,%rbp)
    00000236: 	sete	%r12b
    0000023a: 	addq	%r12, %rax
    0000023d: 	xorl	%r12d, %r12d
    00000240: 	cmpb	%r9b, 0x1(%rdi,%rbp)
    00000245: 	sete	%r12b
    00000249: 	addq	%r12, %rdx
    0000024c: 	xorl	%r12d, %r12d
    0000024f: 	cmpb	%r9b, 0x2(%rdi,%rbp)
    00000254: 	sete	%r12b
    00000258: 	addq	%r12, %rbx
    0000025b: 	cmpb	%r9b, 0x3(%rdi,%rbp)
    00000260: 	sete	%bpl
    00000264: 	addl	$0x8, %r11d
    00000268: 	movzbl	%bpl, %ebp
    0000026c: 	addq	%rbp, %rcx
    0000026f: 	cmpl	%r11d, %r10d
    00000272: 	jle	.Ltmp108 # Offset: 626
    00000274: 	movslq	%r11d, %r11
    00000277: 	xorl	%r10d, %r10d
    0000027a: 	cmpb	%r9b, (%rdi,%r11)
    0000027e: 	sete	%r10b
    00000282: 	addq	%r10, %rax
    00000285: 	xorl	%r10d, %r10d
    00000288: 	cmpb	%r9b, 0x1(%rdi,%r11)
    0000028d: 	sete	%r10b
    00000291: 	addq	%r10, %rdx
    00000294: 	xorl	%r10d, %r10d
    00000297: 	cmpb	%r9b, 0x2(%rdi,%r11)
    0000029c: 	sete	%r10b
    000002a0: 	addq	%r10, %rbx
    000002a3: 	xorl	%r10d, %r10d
    000002a6: 	cmpb	%r9b, 0x3(%rdi,%r11)
    000002ab: 	sete	%r10b
    000002af: 	addq	%r10, %rcx
.Ltmp108:
    000002b2: 	addq	%rbx, %rdx
    000002b5: 	shll	$0x2, %esi
    000002b8: 	addq	%rcx, %rdx
.Ltmp113:
    000002bb: 	cmpl	%esi, %r8d
    000002be: 	jle	.Ltmp109 # Offset: 702
    000002c4: 	movl	%r8d, %ebx
    000002c7: 	subl	%esi, %ebx
    000002c9: 	leal	-0x1(%rbx), %ecx
    000002cc: 	cmpl	$0xe, %ecx
    000002cf: 	jbe	.Ltmp110 # Offset: 719
    000002d5: 	movl	%ebx, %ecx
    000002d7: 	movd	%r9d, %xmm5
    000002dc: 	pxor	%xmm2, %xmm2
    000002e0: 	movslq	%esi, %r10
    000002e3: 	shrl	$0x4, %ecx
    000002e6: 	punpcklbw	%xmm5, %xmm5
    000002ea: 	pxor	%xmm6, %xmm6
    000002ee: 	addq	%rdi, %r10
    000002f1: 	leal	-0x1(%rcx), %r11d
    000002f5: 	punpcklwd	%xmm5, %xmm5
    000002f9: 	leaq	0x10(%r10), %rcx
    000002fd: 	movdqa	DATAat0x19250(%rip), %xmm14
    00000306: 	shlq	$0x4, %r11
    0000030a: 	pshufd	$0x0, %xmm5, %xmm5
    0000030f: 	pxor	%xmm4, %xmm4
    00000313: 	addq	%rcx, %r11
    00000316: 	pxor	%xmm3, %xmm3
    0000031a: 	jmp	.Ltmp111 # Offset: 794
    0000031c: 	nopl	(%rax) # Size: 4
.Ltmp112:
    00000320: 	addq	$0x10, %rcx
.Ltmp111:
    00000324: 	movdqu	(%r10), %xmm0
    00000329: 	movq	%rcx, %r10
    0000032c: 	pcmpeqb	%xmm5, %xmm0
    00000330: 	pand	%xmm14, %xmm0
    00000335: 	movdqa	%xmm0, %xmm1
    00000339: 	punpckhbw	%xmm6, %xmm0
    0000033d: 	punpcklbw	%xmm6, %xmm1
    00000341: 	movdqa	%xmm0, %xmm7
    00000345: 	punpckhwd	%xmm4, %xmm0
    00000349: 	movdqa	%xmm1, %xmm8
    0000034e: 	punpckhwd	%xmm4, %xmm1
    00000352: 	punpcklwd	%xmm4, %xmm7
    00000356: 	movdqa	%xmm1, %xmm9
    0000035b: 	punpcklwd	%xmm4, %xmm8
    00000360: 	punpckldq	%xmm3, %xmm1
    00000364: 	punpckhdq	%xmm3, %xmm9
    00000369: 	paddq	%xmm9, %xmm1
    0000036e: 	movdqa	%xmm8, %xmm9
    00000373: 	punpckldq	%xmm3, %xmm8
    00000378: 	punpckhdq	%xmm3, %xmm9
    0000037d: 	paddq	%xmm9, %xmm8
    00000382: 	paddq	%xmm8, %xmm1
    00000387: 	movdqa	%xmm7, %xmm8
    0000038c: 	punpckldq	%xmm3, %xmm7
    00000390: 	punpckhdq	%xmm3, %xmm8
    00000395: 	paddq	%xmm8, %xmm7
    0000039a: 	movdqa	%xmm0, %xmm8
    0000039f: 	punpckhdq	%xmm3, %xmm0
    000003a3: 	punpckldq	%xmm3, %xmm8
    000003a8: 	paddq	%xmm2, %xmm0
    000003ac: 	paddq	%xmm8, %xmm7
    000003b1: 	paddq	%xmm7, %xmm1
    000003b5: 	movdqa	%xmm1, %xmm2
    000003b9: 	paddq	%xmm0, %xmm2
    000003bd: 	cmpq	%rcx, %r11
    000003c0: 	jne	.Ltmp112 # Offset: 960
    000003c6: 	movdqa	%xmm2, %xmm0
    000003ca: 	psrldq	$0x8, %xmm0
    000003cf: 	paddq	%xmm0, %xmm2
    000003d3: 	movq	%xmm2, %rcx
    000003d8: 	addq	%rcx, %rax
    000003db: 	movl	%ebx, %ecx
    000003dd: 	andl	$-0x10, %ecx
    000003e0: 	addl	%ecx, %esi
    000003e2: 	cmpl	%ebx, %ecx
    000003e4: 	je	.Ltmp109 # Offset: 996
.Ltmp110:
    000003ea: 	movslq	%esi, %rcx
    000003ed: 	cmpb	%r9b, (%rdi,%rcx)
    000003f1: 	sete	%cl
    000003f4: 	movzbl	%cl, %ecx
    000003f7: 	addq	%rcx, %rax
    000003fa: 	leal	0x1(%rsi), %ecx
    000003fd: 	cmpl	%r8d, %ecx
    00000400: 	jge	.Ltmp109 # Offset: 1024
    00000406: 	movslq	%ecx, %rcx
    00000409: 	cmpb	%r9b, (%rdi,%rcx)
    0000040d: 	sete	%cl
    00000410: 	movzbl	%cl, %ecx
    00000413: 	addq	%rcx, %rax
    00000416: 	leal	0x2(%rsi), %ecx
    00000419: 	cmpl	%r8d, %ecx
    0000041c: 	jge	.Ltmp109 # Offset: 1052
    00000422: 	movslq	%ecx, %rcx
    00000425: 	cmpb	%r9b, (%rdi,%rcx)
    00000429: 	sete	%cl
    0000042c: 	movzbl	%cl, %ecx
    0000042f: 	addq	%rcx, %rax
    00000432: 	leal	0x3(%rsi), %ecx
    00000435: 	cmpl	%ecx, %r8d
    00000438: 	jle	.Ltmp109 # Offset: 1080
    0000043e: 	movslq	%ecx, %rcx
    00000441: 	cmpb	%r9b, (%rdi,%rcx)
    00000445: 	sete	%cl
    00000448: 	movzbl	%cl, %ecx
    0000044b: 	addq	%rcx, %rax
    0000044e: 	leal	0x4(%rsi), %ecx
    00000451: 	cmpl	%ecx, %r8d
    00000454: 	jle	.Ltmp109 # Offset: 1108
    0000045a: 	movslq	%ecx, %rcx
    0000045d: 	cmpb	%r9b, (%rdi,%rcx)
    00000461: 	sete	%cl
    00000464: 	movzbl	%cl, %ecx
    00000467: 	addq	%rcx, %rax
    0000046a: 	leal	0x5(%rsi), %ecx
    0000046d: 	cmpl	%ecx, %r8d
    00000470: 	jle	.Ltmp109 # Offset: 1136
    00000476: 	movslq	%ecx, %rcx
    00000479: 	cmpb	%r9b, (%rdi,%rcx)
    0000047d: 	sete	%cl
    00000480: 	movzbl	%cl, %ecx
    00000483: 	addq	%rcx, %rax
    00000486: 	leal	0x6(%rsi), %ecx
    00000489: 	cmpl	%ecx, %r8d
    0000048c: 	jle	.Ltmp109 # Offset: 1164
    00000492: 	movslq	%ecx, %rcx
    00000495: 	cmpb	%r9b, (%rdi,%rcx)
    00000499: 	sete	%cl
    0000049c: 	movzbl	%cl, %ecx
    0000049f: 	addq	%rcx, %rax
    000004a2: 	leal	0x7(%rsi), %ecx
    000004a5: 	cmpl	%ecx, %r8d
    000004a8: 	jle	.Ltmp109 # Offset: 1192
    000004ae: 	movslq	%ecx, %rcx
    000004b1: 	cmpb	%r9b, (%rdi,%rcx)
    000004b5: 	sete	%cl
    000004b8: 	movzbl	%cl, %ecx
    000004bb: 	addq	%rcx, %rax
    000004be: 	leal	0x8(%rsi), %ecx
    000004c1: 	cmpl	%ecx, %r8d
    000004c4: 	jle	.Ltmp109 # Offset: 1220
    000004ca: 	movslq	%ecx, %rcx
    000004cd: 	cmpb	%r9b, (%rdi,%rcx)
    000004d1: 	sete	%cl
    000004d4: 	movzbl	%cl, %ecx
    000004d7: 	addq	%rcx, %rax
    000004da: 	leal	0x9(%rsi), %ecx
    000004dd: 	cmpl	%ecx, %r8d
    000004e0: 	jle	.Ltmp109 # Offset: 1248
    000004e6: 	movslq	%ecx, %rcx
    000004e9: 	cmpb	%r9b, (%rdi,%rcx)
    000004ed: 	sete	%cl
    000004f0: 	movzbl	%cl, %ecx
    000004f3: 	addq	%rcx, %rax
    000004f6: 	leal	0xa(%rsi), %ecx
    000004f9: 	cmpl	%ecx, %r8d
    000004fc: 	jle	.Ltmp109 # Offset: 1276
    000004fe: 	movslq	%ecx, %rcx
    00000501: 	cmpb	%r9b, (%rdi,%rcx)
    00000505: 	sete	%cl
    00000508: 	movzbl	%cl, %ecx
    0000050b: 	addq	%rcx, %rax
    0000050e: 	leal	0xb(%rsi), %ecx
    00000511: 	cmpl	%ecx, %r8d
    00000514: 	jle	.Ltmp109 # Offset: 1300
    00000516: 	movslq	%ecx, %rcx
    00000519: 	cmpb	%r9b, (%rdi,%rcx)
    0000051d: 	sete	%cl
    00000520: 	movzbl	%cl, %ecx
    00000523: 	addq	%rcx, %rax
    00000526: 	leal	0xc(%rsi), %ecx
    00000529: 	cmpl	%ecx, %r8d
    0000052c: 	jle	.Ltmp109 # Offset: 1324
    0000052e: 	movslq	%ecx, %rcx
    00000531: 	cmpb	%r9b, (%rdi,%rcx)
    00000535: 	sete	%cl
    00000538: 	movzbl	%cl, %ecx
    0000053b: 	addq	%rcx, %rax
    0000053e: 	leal	0xd(%rsi), %ecx
    00000541: 	cmpl	%ecx, %r8d
    00000544: 	jle	.Ltmp109 # Offset: 1348
    00000546: 	movslq	%ecx, %rcx
    00000549: 	cmpb	%r9b, (%rdi,%rcx)
    0000054d: 	sete	%cl
    00000550: 	addl	$0xe, %esi
    00000553: 	movzbl	%cl, %ecx
    00000556: 	addq	%rcx, %rax
    00000559: 	cmpl	%esi, %r8d
    0000055c: 	jle	.Ltmp109 # Offset: 1372
    0000055e: 	movslq	%esi, %rsi
    00000561: 	xorl	%ecx, %ecx
    00000563: 	cmpb	%r9b, (%rdi,%rsi)
    00000567: 	sete	%cl
    0000056a: 	addq	%rcx, %rax
.Ltmp109:
    0000056d: 	popq	%rbx
    0000056e: 	addq	%rdx, %rax
    00000571: 	popq	%rbp
    00000572: 	popq	%r12
    00000574: 	retq # Offset: 1396
    00000575: 	nopl	(%rax) # Size: 3
.Ltmp105:
    00000578: 	xorl	%edx, %edx
    0000057a: 	xorl	%esi, %esi
    0000057c: 	xorl	%eax, %eax
    0000057e: 	jmp	.Ltmp113 # Offset: 1406
.Ltmp106:
    00000583: 	xorl	%r11d, %r11d
    00000586: 	xorl	%ecx, %ecx
    00000588: 	xorl	%ebx, %ebx
    0000058a: 	xorl	%edx, %edx
    0000058c: 	xorl	%eax, %eax
    0000058e: 	jmp	.Ltmp114 # Offset: 1422
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6IhEmPT_iS0_"

Binary Function "_Z6count7IhEmPT_iS0_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x37b0
  Size        : 0x38b
  MaxSize     : 0x390
  Offset      : 0x37b0
  Section     : .text
  Orc Section : .local.text._Z6count7IhEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r10
    00000009: 	movl	%esi, %r11d
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%edx, %ebx
    00000010: 	cmpl	$0x7, %esi
    00000013: 	jle	.Ltmp115 # Offset: 19
    00000019: 	leal	-0x8(%rsi), %r12d
    0000001d: 	movl	%edx, %ecx
    0000001f: 	xorl	%r8d, %r8d
    00000022: 	movq	%rdi, %rdx
    00000025: 	shrl	$0x3, %r12d
    00000029: 	xorl	%esi, %esi
    0000002b: 	movl	%r12d, %eax
    0000002e: 	leaq	0x8(%rdi,%rax,8), %rbp
    00000033: 	xorl	%edi, %edi
    00000035: 	xorl	%eax, %eax
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp116:
    00000040: 	xorl	%r9d, %r9d
    00000043: 	cmpb	%cl, (%rdx)
    00000045: 	sete	%r9b
    00000049: 	addq	%r9, %rax
    0000004c: 	xorl	%r9d, %r9d
    0000004f: 	cmpb	%cl, 0x1(%rdx)
    00000052: 	sete	%r9b
    00000056: 	addq	%r9, %rsi
    00000059: 	xorl	%r9d, %r9d
    0000005c: 	cmpb	0x2(%rdx), %cl
    0000005f: 	sete	%r9b
    00000063: 	addq	%r9, %r8
    00000066: 	xorl	%r9d, %r9d
    00000069: 	cmpb	0x3(%rdx), %cl
    0000006c: 	sete	%r9b
    00000070: 	addq	%r9, %rdi
    00000073: 	xorl	%r9d, %r9d
    00000076: 	cmpb	0x4(%rdx), %cl
    00000079: 	sete	%r9b
    0000007d: 	addq	%r9, %rax
    00000080: 	xorl	%r9d, %r9d
    00000083: 	cmpb	0x5(%rdx), %cl
    00000086: 	sete	%r9b
    0000008a: 	addq	%r9, %rsi
    0000008d: 	xorl	%r9d, %r9d
    00000090: 	cmpb	0x6(%rdx), %cl
    00000093: 	sete	%r9b
    00000097: 	addq	%r9, %r8
    0000009a: 	xorl	%r9d, %r9d
    0000009d: 	cmpb	0x7(%rdx), %cl
    000000a0: 	sete	%r9b
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	addq	%r9, %rdi
    000000ab: 	cmpq	%rbp, %rdx
    000000ae: 	jne	.Ltmp116 # Offset: 174
    000000b0: 	addq	%r8, %rsi
    000000b3: 	leal	0x8(,%r12,8), %ecx
    000000bb: 	addq	%rdi, %rsi
.Ltmp121:
    000000be: 	cmpl	%ecx, %r11d
    000000c1: 	jle	.Ltmp117 # Offset: 193
    000000c7: 	movl	%r11d, %r9d
    000000ca: 	subl	%ecx, %r9d
    000000cd: 	leal	-0x1(%r9), %edx
    000000d1: 	cmpl	$0xe, %edx
    000000d4: 	jbe	.Ltmp118 # Offset: 212
    000000da: 	movl	%r9d, %edx
    000000dd: 	movd	%ebx, %xmm5
    000000e1: 	pxor	%xmm4, %xmm4
    000000e5: 	movslq	%ecx, %rdi
    000000e8: 	shrl	$0x4, %edx
    000000eb: 	punpcklbw	%xmm5, %xmm5
    000000ef: 	pxor	%xmm6, %xmm6
    000000f3: 	addq	%r10, %rdi
    000000f6: 	leal	-0x1(%rdx), %r8d
    000000fa: 	punpcklwd	%xmm5, %xmm5
    000000fe: 	leaq	0x10(%rdi), %rdx
    00000102: 	movdqa	DATAat0x19250(%rip), %xmm7
    0000010a: 	shlq	$0x4, %r8
    0000010e: 	pshufd	$0x0, %xmm5, %xmm5
    00000113: 	pxor	%xmm3, %xmm3
    00000117: 	addq	%rdx, %r8
    0000011a: 	pxor	%xmm2, %xmm2
    0000011e: 	jmp	.Ltmp119 # Offset: 286
.Ltmp120:
    00000120: 	addq	$0x10, %rdx
.Ltmp119:
    00000124: 	movdqu	(%rdi), %xmm0
    00000128: 	movq	%rdx, %rdi
    0000012b: 	pcmpeqb	%xmm5, %xmm0
    0000012f: 	pand	%xmm7, %xmm0
    00000133: 	movdqa	%xmm0, %xmm1
    00000137: 	punpckhbw	%xmm6, %xmm0
    0000013b: 	punpcklbw	%xmm6, %xmm1
    0000013f: 	movdqa	%xmm0, %xmm8
    00000144: 	punpckhwd	%xmm3, %xmm0
    00000148: 	movdqa	%xmm1, %xmm9
    0000014d: 	punpckhwd	%xmm3, %xmm1
    00000151: 	punpcklwd	%xmm3, %xmm8
    00000156: 	movdqa	%xmm1, %xmm10
    0000015b: 	punpcklwd	%xmm3, %xmm9
    00000160: 	punpckhdq	%xmm2, %xmm1
    00000164: 	punpckldq	%xmm2, %xmm10
    00000169: 	paddq	%xmm10, %xmm1
    0000016e: 	movdqa	%xmm9, %xmm10
    00000173: 	punpckhdq	%xmm2, %xmm9
    00000178: 	punpckldq	%xmm2, %xmm10
    0000017d: 	paddq	%xmm10, %xmm9
    00000182: 	paddq	%xmm9, %xmm1
    00000187: 	movdqa	%xmm8, %xmm9
    0000018c: 	punpckhdq	%xmm2, %xmm8
    00000191: 	punpckldq	%xmm2, %xmm9
    00000196: 	paddq	%xmm9, %xmm8
    0000019b: 	movdqa	%xmm0, %xmm9
    000001a0: 	punpckhdq	%xmm2, %xmm0
    000001a4: 	punpckldq	%xmm2, %xmm9
    000001a9: 	paddq	%xmm4, %xmm0
    000001ad: 	paddq	%xmm9, %xmm8
    000001b2: 	paddq	%xmm8, %xmm1
    000001b7: 	movdqa	%xmm1, %xmm4
    000001bb: 	paddq	%xmm0, %xmm4
    000001bf: 	cmpq	%rdx, %r8
    000001c2: 	jne	.Ltmp120 # Offset: 450
    000001c8: 	movdqa	%xmm4, %xmm0
    000001cc: 	psrldq	$0x8, %xmm0
    000001d1: 	paddq	%xmm0, %xmm4
    000001d5: 	movq	%xmm4, %rdx
    000001da: 	addq	%rdx, %rax
    000001dd: 	movl	%r9d, %edx
    000001e0: 	andl	$-0x10, %edx
    000001e3: 	addl	%edx, %ecx
    000001e5: 	cmpl	%edx, %r9d
    000001e8: 	je	.Ltmp117 # Offset: 488
.Ltmp118:
    000001ee: 	movslq	%ecx, %rdx
    000001f1: 	cmpb	%bl, (%r10,%rdx)
    000001f5: 	sete	%dl
    000001f8: 	movzbl	%dl, %edx
    000001fb: 	addq	%rdx, %rax
    000001fe: 	leal	0x1(%rcx), %edx
    00000201: 	cmpl	%edx, %r11d
    00000204: 	jle	.Ltmp117 # Offset: 516
    0000020a: 	movslq	%edx, %rdx
    0000020d: 	cmpb	%bl, (%r10,%rdx)
    00000211: 	sete	%dl
    00000214: 	movzbl	%dl, %edx
    00000217: 	addq	%rdx, %rax
    0000021a: 	leal	0x2(%rcx), %edx
    0000021d: 	cmpl	%edx, %r11d
    00000220: 	jle	.Ltmp117 # Offset: 544
    00000226: 	movslq	%edx, %rdx
    00000229: 	cmpb	%bl, (%r10,%rdx)
    0000022d: 	sete	%dl
    00000230: 	movzbl	%dl, %edx
    00000233: 	addq	%rdx, %rax
    00000236: 	leal	0x3(%rcx), %edx
    00000239: 	cmpl	%edx, %r11d
    0000023c: 	jle	.Ltmp117 # Offset: 572
    00000242: 	movslq	%edx, %rdx
    00000245: 	cmpb	%bl, (%r10,%rdx)
    00000249: 	sete	%dl
    0000024c: 	movzbl	%dl, %edx
    0000024f: 	addq	%rdx, %rax
    00000252: 	leal	0x4(%rcx), %edx
    00000255: 	cmpl	%r11d, %edx
    00000258: 	jge	.Ltmp117 # Offset: 600
    0000025e: 	movslq	%edx, %rdx
    00000261: 	cmpb	%bl, (%r10,%rdx)
    00000265: 	sete	%dl
    00000268: 	movzbl	%dl, %edx
    0000026b: 	addq	%rdx, %rax
    0000026e: 	leal	0x5(%rcx), %edx
    00000271: 	cmpl	%r11d, %edx
    00000274: 	jge	.Ltmp117 # Offset: 628
    0000027a: 	movslq	%edx, %rdx
    0000027d: 	cmpb	%bl, (%r10,%rdx)
    00000281: 	sete	%dl
    00000284: 	movzbl	%dl, %edx
    00000287: 	addq	%rdx, %rax
    0000028a: 	leal	0x6(%rcx), %edx
    0000028d: 	cmpl	%r11d, %edx
    00000290: 	jge	.Ltmp117 # Offset: 656
    00000296: 	movslq	%edx, %rdx
    00000299: 	cmpb	%bl, (%r10,%rdx)
    0000029d: 	sete	%dl
    000002a0: 	movzbl	%dl, %edx
    000002a3: 	addq	%rdx, %rax
    000002a6: 	leal	0x7(%rcx), %edx
    000002a9: 	cmpl	%edx, %r11d
    000002ac: 	jle	.Ltmp117 # Offset: 684
    000002b2: 	movslq	%edx, %rdx
    000002b5: 	cmpb	%bl, (%r10,%rdx)
    000002b9: 	sete	%dl
    000002bc: 	movzbl	%dl, %edx
    000002bf: 	addq	%rdx, %rax
    000002c2: 	leal	0x8(%rcx), %edx
    000002c5: 	cmpl	%r11d, %edx
    000002c8: 	jge	.Ltmp117 # Offset: 712
    000002ce: 	movslq	%edx, %rdx
    000002d1: 	cmpb	%bl, (%r10,%rdx)
    000002d5: 	sete	%dl
    000002d8: 	movzbl	%dl, %edx
    000002db: 	addq	%rdx, %rax
    000002de: 	leal	0x9(%rcx), %edx
    000002e1: 	cmpl	%edx, %r11d
    000002e4: 	jle	.Ltmp117 # Offset: 740
    000002ea: 	movslq	%edx, %rdx
    000002ed: 	cmpb	%bl, (%r10,%rdx)
    000002f1: 	sete	%dl
    000002f4: 	movzbl	%dl, %edx
    000002f7: 	addq	%rdx, %rax
    000002fa: 	leal	0xa(%rcx), %edx
    000002fd: 	cmpl	%edx, %r11d
    00000300: 	jle	.Ltmp117 # Offset: 768
    00000302: 	movslq	%edx, %rdx
    00000305: 	cmpb	%bl, (%r10,%rdx)
    00000309: 	sete	%dl
    0000030c: 	movzbl	%dl, %edx
    0000030f: 	addq	%rdx, %rax
    00000312: 	leal	0xb(%rcx), %edx
    00000315: 	cmpl	%edx, %r11d
    00000318: 	jle	.Ltmp117 # Offset: 792
    0000031a: 	movslq	%edx, %rdx
    0000031d: 	cmpb	%bl, (%r10,%rdx)
    00000321: 	sete	%dl
    00000324: 	movzbl	%dl, %edx
    00000327: 	addq	%rdx, %rax
    0000032a: 	leal	0xc(%rcx), %edx
    0000032d: 	cmpl	%edx, %r11d
    00000330: 	jle	.Ltmp117 # Offset: 816
    00000332: 	movslq	%edx, %rdx
    00000335: 	cmpb	%bl, (%r10,%rdx)
    00000339: 	sete	%dl
    0000033c: 	movzbl	%dl, %edx
    0000033f: 	addq	%rdx, %rax
    00000342: 	leal	0xd(%rcx), %edx
    00000345: 	cmpl	%edx, %r11d
    00000348: 	jle	.Ltmp117 # Offset: 840
    0000034a: 	movslq	%edx, %rdx
    0000034d: 	cmpb	%bl, (%r10,%rdx)
    00000351: 	sete	%dl
    00000354: 	addl	$0xe, %ecx
    00000357: 	movzbl	%dl, %edx
    0000035a: 	addq	%rdx, %rax
    0000035d: 	cmpl	%ecx, %r11d
    00000360: 	jle	.Ltmp117 # Offset: 864
    00000362: 	movslq	%ecx, %rcx
    00000365: 	xorl	%edx, %edx
    00000367: 	cmpb	%bl, (%r10,%rcx)
    0000036b: 	sete	%dl
    0000036e: 	addq	%rdx, %rax
.Ltmp117:
    00000371: 	popq	%rbx
    00000372: 	addq	%rsi, %rax
    00000375: 	popq	%rbp
    00000376: 	popq	%r12
    00000378: 	retq # Offset: 888
    00000379: 	nopl	(%rax) # Size: 7
.Ltmp115:
    00000380: 	xorl	%esi, %esi
    00000382: 	xorl	%ecx, %ecx
    00000384: 	xorl	%eax, %eax
    00000386: 	jmp	.Ltmp121 # Offset: 902
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7IhEmPT_iS0_"

Binary Function "_Z6count8IhEmPT_iS0_" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x3b40
  Size        : 0x68c
  MaxSize     : 0x690
  Offset      : 0x3b40
  Section     : .text
  Orc Section : .local.text._Z6count8IhEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	pushq	%r13
    00000009: 	movl	%edx, %esi
    0000000b: 	leal	-0x7(%r8), %r10d
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	testl	%r10d, %r10d
    00000016: 	jle	.Ltmp122 # Offset: 22
    0000001c: 	leal	-0x8(%r8), %eax
    00000020: 	movl	%eax, %r9d
    00000023: 	shrl	$0x3, %r9d
    00000027: 	addl	$0x1, %r9d
    0000002b: 	cmpl	$0x17, %eax
    0000002e: 	jbe	.Ltmp123 # Offset: 46
    00000034: 	movd	%edx, %xmm0
    00000038: 	movl	%r9d, %edx
    0000003b: 	pxor	%xmm8, %xmm8
    00000040: 	movq	%rdi, %rax
    00000043: 	punpcklbw	%xmm0, %xmm0
    00000047: 	shrl	$0x2, %edx
    0000004a: 	movdqa	%xmm8, %xmm11
    0000004f: 	pxor	%xmm7, %xmm7
    00000053: 	punpcklwd	%xmm0, %xmm0
    00000057: 	subl	$0x1, %edx
    0000005a: 	movdqa	%xmm8, %xmm9
    0000005f: 	movdqa	DATAat0x19250(%rip), %xmm14
    00000068: 	pshufd	$0x0, %xmm0, %xmm6
    0000006d: 	shlq	$0x5, %rdx
    00000071: 	movdqa	%xmm8, %xmm12
    00000076: 	movdqa	%xmm8, %xmm10
    0000007b: 	movdqa	%xmm6, %xmm5
    0000007f: 	movaps	%xmm14, -0x18(%rsp)
    00000085: 	leaq	0x20(%rdi,%rdx), %rdx
    0000008a: 	movdqa	%xmm8, %xmm13
    0000008f: 	movdqa	%xmm8, %xmm6
    00000094: 	movdqa	%xmm8, %xmm3
    00000099: 	pxor	%xmm1, %xmm1
    0000009d: 	movdqa	%xmm5, %xmm14
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp124:
    000000a8: 	movdqu	(%rax), %xmm0
    000000ac: 	movdqu	0x10(%rax), %xmm5
    000000b1: 	pxor	%xmm4, %xmm4
    000000b5: 	addq	$0x20, %rax
    000000b9: 	movdqa	%xmm0, %xmm2
    000000bd: 	shufps	$0xdd, %xmm5, %xmm0
    000000c1: 	pcmpeqb	%xmm14, %xmm0
    000000c6: 	pand	-0x18(%rsp), %xmm0
    000000cc: 	shufps	$0x88, %xmm5, %xmm2
    000000d0: 	pcmpeqb	%xmm14, %xmm2
    000000d5: 	psubb	%xmm2, %xmm0
    000000d9: 	movdqa	%xmm0, %xmm2
    000000dd: 	punpckhbw	%xmm4, %xmm0
    000000e1: 	punpcklbw	%xmm4, %xmm2
    000000e5: 	movdqa	%xmm0, %xmm4
    000000e9: 	punpckhwd	%xmm7, %xmm0
    000000ed: 	movdqa	%xmm2, %xmm5
    000000f1: 	punpckhwd	%xmm7, %xmm2
    000000f5: 	punpcklwd	%xmm7, %xmm4
    000000f9: 	punpcklwd	%xmm7, %xmm5
    000000fd: 	movdqa	%xmm5, %xmm15
    00000102: 	punpckhdq	%xmm1, %xmm5
    00000106: 	paddq	%xmm5, %xmm6
    0000010a: 	movdqa	%xmm2, %xmm5
    0000010e: 	punpckhdq	%xmm1, %xmm2
    00000112: 	paddq	%xmm2, %xmm10
    00000117: 	movdqa	%xmm4, %xmm2
    0000011b: 	punpckldq	%xmm1, %xmm15
    00000120: 	punpckldq	%xmm1, %xmm2
    00000124: 	punpckldq	%xmm1, %xmm5
    00000128: 	punpckhdq	%xmm1, %xmm4
    0000012c: 	paddq	%xmm2, %xmm12
    00000131: 	movdqa	%xmm0, %xmm2
    00000135: 	punpckhdq	%xmm1, %xmm0
    00000139: 	punpckldq	%xmm1, %xmm2
    0000013d: 	paddq	%xmm15, %xmm3
    00000142: 	paddq	%xmm5, %xmm13
    00000147: 	paddq	%xmm4, %xmm9
    0000014c: 	paddq	%xmm2, %xmm11
    00000151: 	paddq	%xmm0, %xmm8
    00000156: 	cmpq	%rax, %rdx
    00000159: 	jne	.Ltmp124 # Offset: 345
    0000015f: 	movq	%xmm3, %rax
    00000164: 	movq	%xmm13, %rdx
    00000169: 	psrldq	$0x8, %xmm3
    0000016e: 	movl	%r9d, %ebp
    00000171: 	addq	%rdx, %rax
    00000174: 	movq	%xmm12, %rdx
    00000179: 	movq	%xmm6, %rbx
    0000017e: 	andl	$-0x4, %ebp
    00000181: 	addq	%rdx, %rax
    00000184: 	movq	%xmm11, %rdx
    00000189: 	psrldq	$0x8, %xmm6
    0000018e: 	addq	%rdx, %rax
    00000191: 	movq	%xmm3, %rdx
    00000196: 	movhlps	%xmm13, %xmm3
    0000019a: 	movq	%xmm3, %rcx
    0000019f: 	movhlps	%xmm12, %xmm3
    000001a3: 	addq	%rcx, %rdx
    000001a6: 	movq	%xmm3, %rcx
    000001ab: 	movhlps	%xmm11, %xmm3
    000001af: 	addq	%rcx, %rdx
    000001b2: 	movq	%xmm3, %rcx
    000001b7: 	addq	%rcx, %rdx
    000001ba: 	movq	%xmm10, %rcx
    000001bf: 	addq	%rcx, %rbx
    000001c2: 	movq	%xmm9, %rcx
    000001c7: 	addq	%rcx, %rbx
    000001ca: 	movq	%xmm8, %rcx
    000001cf: 	addq	%rcx, %rbx
    000001d2: 	movq	%xmm6, %rcx
    000001d7: 	movhlps	%xmm10, %xmm6
    000001db: 	movq	%xmm6, %r11
    000001e0: 	movhlps	%xmm9, %xmm6
    000001e4: 	addq	%r11, %rcx
    000001e7: 	movq	%xmm6, %r11
    000001ec: 	movhlps	%xmm8, %xmm6
    000001f0: 	addq	%r11, %rcx
    000001f3: 	movq	%xmm6, %r11
    000001f8: 	addq	%r11, %rcx
    000001fb: 	leal	(,%rbp,8), %r11d
    00000203: 	cmpl	%ebp, %r9d
    00000206: 	je	.Ltmp125 # Offset: 518
.Ltmp131:
    0000020c: 	movslq	%r11d, %rbp
    0000020f: 	xorl	%r12d, %r12d
    00000212: 	cmpb	%sil, (%rdi,%rbp)
    00000216: 	sete	%r12b
    0000021a: 	addq	%rax, %r12
    0000021d: 	xorl	%eax, %eax
    0000021f: 	cmpb	%sil, 0x4(%rdi,%rbp)
    00000224: 	sete	%al
    00000227: 	addq	%r12, %rax
    0000022a: 	xorl	%r12d, %r12d
    0000022d: 	cmpb	%sil, 0x1(%rdi,%rbp)
    00000232: 	sete	%r12b
    00000236: 	xorl	%r13d, %r13d
    00000239: 	cmpb	%sil, 0x5(%rdi,%rbp)
    0000023e: 	sete	%r13b
    00000242: 	addq	%r13, %r12
    00000245: 	addq	%r12, %rdx
    00000248: 	xorl	%r12d, %r12d
    0000024b: 	cmpb	%sil, 0x2(%rdi,%rbp)
    00000250: 	sete	%r12b
    00000254: 	xorl	%r13d, %r13d
    00000257: 	cmpb	%sil, 0x6(%rdi,%rbp)
    0000025c: 	sete	%r13b
    00000260: 	addq	%r13, %r12
    00000263: 	addq	%r12, %rbx
    00000266: 	xorl	%r12d, %r12d
    00000269: 	cmpb	%sil, 0x3(%rdi,%rbp)
    0000026e: 	sete	%r12b
    00000272: 	cmpb	%sil, 0x7(%rdi,%rbp)
    00000277: 	sete	%bpl
    0000027b: 	movzbl	%bpl, %ebp
    0000027f: 	addq	%r12, %rbp
    00000282: 	addq	%rbp, %rcx
    00000285: 	leal	0x8(%r11), %ebp
    00000289: 	cmpl	%ebp, %r10d
    0000028c: 	jle	.Ltmp125 # Offset: 652
    00000292: 	movslq	%ebp, %rbp
    00000295: 	xorl	%r12d, %r12d
    00000298: 	cmpb	%sil, 0x4(%rdi,%rbp)
    0000029d: 	sete	%r12b
    000002a1: 	xorl	%r13d, %r13d
    000002a4: 	cmpb	%sil, (%rdi,%rbp)
    000002a8: 	sete	%r13b
    000002ac: 	addq	%r13, %r12
    000002af: 	addq	%r12, %rax
    000002b2: 	xorl	%r12d, %r12d
    000002b5: 	cmpb	%sil, 0x1(%rdi,%rbp)
    000002ba: 	sete	%r12b
    000002be: 	xorl	%r13d, %r13d
    000002c1: 	cmpb	%sil, 0x5(%rdi,%rbp)
    000002c6: 	sete	%r13b
    000002ca: 	addq	%r13, %r12
    000002cd: 	addq	%r12, %rdx
    000002d0: 	xorl	%r12d, %r12d
    000002d3: 	cmpb	%sil, 0x2(%rdi,%rbp)
    000002d8: 	sete	%r12b
    000002dc: 	xorl	%r13d, %r13d
    000002df: 	cmpb	%sil, 0x6(%rdi,%rbp)
    000002e4: 	sete	%r13b
    000002e8: 	addq	%r13, %r12
    000002eb: 	addq	%r12, %rbx
    000002ee: 	xorl	%r12d, %r12d
    000002f1: 	cmpb	%sil, 0x3(%rdi,%rbp)
    000002f6: 	sete	%r12b
    000002fa: 	cmpb	%sil, 0x7(%rdi,%rbp)
    000002ff: 	sete	%bpl
    00000303: 	addl	$0x10, %r11d
    00000307: 	movzbl	%bpl, %ebp
    0000030b: 	addq	%r12, %rbp
    0000030e: 	addq	%rbp, %rcx
    00000311: 	cmpl	%r11d, %r10d
    00000314: 	jle	.Ltmp125 # Offset: 788
    00000316: 	movslq	%r11d, %r10
    00000319: 	xorl	%r11d, %r11d
    0000031c: 	cmpb	%sil, 0x4(%rdi,%r10)
    00000321: 	sete	%r11b
    00000325: 	xorl	%ebp, %ebp
    00000327: 	cmpb	%sil, (%rdi,%r10)
    0000032b: 	sete	%bpl
    0000032f: 	addq	%rbp, %r11
    00000332: 	addq	%r11, %rax
    00000335: 	xorl	%r11d, %r11d
    00000338: 	cmpb	%sil, 0x1(%rdi,%r10)
    0000033d: 	sete	%r11b
    00000341: 	xorl	%ebp, %ebp
    00000343: 	cmpb	%sil, 0x5(%rdi,%r10)
    00000348: 	sete	%bpl
    0000034c: 	addq	%rbp, %r11
    0000034f: 	addq	%r11, %rdx
    00000352: 	xorl	%r11d, %r11d
    00000355: 	cmpb	%sil, 0x2(%rdi,%r10)
    0000035a: 	sete	%r11b
    0000035e: 	xorl	%ebp, %ebp
    00000360: 	cmpb	%sil, 0x6(%rdi,%r10)
    00000365: 	sete	%bpl
    00000369: 	addq	%rbp, %r11
    0000036c: 	addq	%r11, %rbx
    0000036f: 	xorl	%r11d, %r11d
    00000372: 	cmpb	%sil, 0x3(%rdi,%r10)
    00000377: 	sete	%r11b
    0000037b: 	cmpb	%sil, 0x7(%rdi,%r10)
    00000380: 	sete	%r10b
    00000384: 	movzbl	%r10b, %r10d
    00000388: 	addq	%r11, %r10
    0000038b: 	addq	%r10, %rcx
.Ltmp125:
    0000038e: 	addq	%rbx, %rdx
    00000391: 	shll	$0x3, %r9d
    00000395: 	addq	%rcx, %rdx
.Ltmp130:
    00000398: 	cmpl	%r9d, %r8d
    0000039b: 	jle	.Ltmp126 # Offset: 923
    000003a1: 	movl	%r8d, %ebx
    000003a4: 	subl	%r9d, %ebx
    000003a7: 	leal	-0x1(%rbx), %ecx
    000003aa: 	cmpl	$0xe, %ecx
    000003ad: 	jbe	.Ltmp127 # Offset: 941
    000003b3: 	movl	%ebx, %ecx
    000003b5: 	movd	%esi, %xmm5
    000003b9: 	pxor	%xmm2, %xmm2
    000003bd: 	movslq	%r9d, %r10
    000003c0: 	shrl	$0x4, %ecx
    000003c3: 	punpcklbw	%xmm5, %xmm5
    000003c7: 	pxor	%xmm6, %xmm6
    000003cb: 	addq	%rdi, %r10
    000003ce: 	leal	-0x1(%rcx), %r11d
    000003d2: 	punpcklwd	%xmm5, %xmm5
    000003d6: 	leaq	0x10(%r10), %rcx
    000003da: 	movdqa	DATAat0x19250(%rip), %xmm14
    000003e3: 	shlq	$0x4, %r11
    000003e7: 	pshufd	$0x0, %xmm5, %xmm5
    000003ec: 	pxor	%xmm4, %xmm4
    000003f0: 	addq	%rcx, %r11
    000003f3: 	pxor	%xmm3, %xmm3
    000003f7: 	jmp	.Ltmp128 # Offset: 1015
    000003f9: 	nopl	(%rax) # Size: 7
.Ltmp129:
    00000400: 	addq	$0x10, %rcx
.Ltmp128:
    00000404: 	movdqu	(%r10), %xmm0
    00000409: 	movq	%rcx, %r10
    0000040c: 	pcmpeqb	%xmm5, %xmm0
    00000410: 	pand	%xmm14, %xmm0
    00000415: 	movdqa	%xmm0, %xmm1
    00000419: 	punpckhbw	%xmm6, %xmm0
    0000041d: 	punpcklbw	%xmm6, %xmm1
    00000421: 	movdqa	%xmm0, %xmm7
    00000425: 	punpckhwd	%xmm4, %xmm0
    00000429: 	movdqa	%xmm1, %xmm8
    0000042e: 	punpckhwd	%xmm4, %xmm1
    00000432: 	punpcklwd	%xmm4, %xmm7
    00000436: 	movdqa	%xmm1, %xmm9
    0000043b: 	punpcklwd	%xmm4, %xmm8
    00000440: 	punpckldq	%xmm3, %xmm1
    00000444: 	punpckhdq	%xmm3, %xmm9
    00000449: 	paddq	%xmm9, %xmm1
    0000044e: 	movdqa	%xmm8, %xmm9
    00000453: 	punpckldq	%xmm3, %xmm8
    00000458: 	punpckhdq	%xmm3, %xmm9
    0000045d: 	paddq	%xmm9, %xmm8
    00000462: 	paddq	%xmm8, %xmm1
    00000467: 	movdqa	%xmm7, %xmm8
    0000046c: 	punpckldq	%xmm3, %xmm7
    00000470: 	punpckhdq	%xmm3, %xmm8
    00000475: 	paddq	%xmm8, %xmm7
    0000047a: 	movdqa	%xmm0, %xmm8
    0000047f: 	punpckhdq	%xmm3, %xmm0
    00000483: 	punpckldq	%xmm3, %xmm8
    00000488: 	paddq	%xmm2, %xmm0
    0000048c: 	paddq	%xmm8, %xmm7
    00000491: 	paddq	%xmm7, %xmm1
    00000495: 	paddq	%xmm0, %xmm1
    00000499: 	movdqa	%xmm1, %xmm2
    0000049d: 	cmpq	%r11, %rcx
    000004a0: 	jne	.Ltmp129 # Offset: 1184
    000004a6: 	movdqa	%xmm1, %xmm0
    000004aa: 	psrldq	$0x8, %xmm0
    000004af: 	paddq	%xmm0, %xmm2
    000004b3: 	movq	%xmm2, %rcx
    000004b8: 	addq	%rcx, %rax
    000004bb: 	movl	%ebx, %ecx
    000004bd: 	andl	$-0x10, %ecx
    000004c0: 	addl	%ecx, %r9d
    000004c3: 	cmpl	%ebx, %ecx
    000004c5: 	je	.Ltmp126 # Offset: 1221
.Ltmp127:
    000004cb: 	movslq	%r9d, %rcx
    000004ce: 	cmpb	%sil, (%rdi,%rcx)
    000004d2: 	sete	%cl
    000004d5: 	movzbl	%cl, %ecx
    000004d8: 	addq	%rcx, %rax
    000004db: 	leal	0x1(%r9), %ecx
    000004df: 	cmpl	%r8d, %ecx
    000004e2: 	jge	.Ltmp126 # Offset: 1250
    000004e8: 	movslq	%ecx, %rcx
    000004eb: 	cmpb	%sil, (%rdi,%rcx)
    000004ef: 	sete	%cl
    000004f2: 	movzbl	%cl, %ecx
    000004f5: 	addq	%rcx, %rax
    000004f8: 	leal	0x2(%r9), %ecx
    000004fc: 	cmpl	%r8d, %ecx
    000004ff: 	jge	.Ltmp126 # Offset: 1279
    00000505: 	movslq	%ecx, %rcx
    00000508: 	cmpb	%sil, (%rdi,%rcx)
    0000050c: 	sete	%cl
    0000050f: 	movzbl	%cl, %ecx
    00000512: 	addq	%rcx, %rax
    00000515: 	leal	0x3(%r9), %ecx
    00000519: 	cmpl	%r8d, %ecx
    0000051c: 	jge	.Ltmp126 # Offset: 1308
    00000522: 	movslq	%ecx, %rcx
    00000525: 	cmpb	%sil, (%rdi,%rcx)
    00000529: 	sete	%cl
    0000052c: 	movzbl	%cl, %ecx
    0000052f: 	addq	%rcx, %rax
    00000532: 	leal	0x4(%r9), %ecx
    00000536: 	cmpl	%r8d, %ecx
    00000539: 	jge	.Ltmp126 # Offset: 1337
    0000053f: 	movslq	%ecx, %rcx
    00000542: 	cmpb	%sil, (%rdi,%rcx)
    00000546: 	sete	%cl
    00000549: 	movzbl	%cl, %ecx
    0000054c: 	addq	%rcx, %rax
    0000054f: 	leal	0x5(%r9), %ecx
    00000553: 	cmpl	%r8d, %ecx
    00000556: 	jge	.Ltmp126 # Offset: 1366
    0000055c: 	movslq	%ecx, %rcx
    0000055f: 	cmpb	%sil, (%rdi,%rcx)
    00000563: 	sete	%cl
    00000566: 	movzbl	%cl, %ecx
    00000569: 	addq	%rcx, %rax
    0000056c: 	leal	0x6(%r9), %ecx
    00000570: 	cmpl	%r8d, %ecx
    00000573: 	jge	.Ltmp126 # Offset: 1395
    00000579: 	movslq	%ecx, %rcx
    0000057c: 	cmpb	%sil, (%rdi,%rcx)
    00000580: 	sete	%cl
    00000583: 	movzbl	%cl, %ecx
    00000586: 	addq	%rcx, %rax
    00000589: 	leal	0x7(%r9), %ecx
    0000058d: 	cmpl	%r8d, %ecx
    00000590: 	jge	.Ltmp126 # Offset: 1424
    00000596: 	movslq	%ecx, %rcx
    00000599: 	cmpb	%sil, (%rdi,%rcx)
    0000059d: 	sete	%cl
    000005a0: 	movzbl	%cl, %ecx
    000005a3: 	addq	%rcx, %rax
    000005a6: 	leal	0x8(%r9), %ecx
    000005aa: 	cmpl	%ecx, %r8d
    000005ad: 	jle	.Ltmp126 # Offset: 1453
    000005b3: 	movslq	%ecx, %rcx
    000005b6: 	cmpb	%sil, (%rdi,%rcx)
    000005ba: 	sete	%cl
    000005bd: 	movzbl	%cl, %ecx
    000005c0: 	addq	%rcx, %rax
    000005c3: 	leal	0x9(%r9), %ecx
    000005c7: 	cmpl	%ecx, %r8d
    000005ca: 	jle	.Ltmp126 # Offset: 1482
    000005d0: 	movslq	%ecx, %rcx
    000005d3: 	cmpb	%sil, (%rdi,%rcx)
    000005d7: 	sete	%cl
    000005da: 	movzbl	%cl, %ecx
    000005dd: 	addq	%rcx, %rax
    000005e0: 	leal	0xa(%r9), %ecx
    000005e4: 	cmpl	%ecx, %r8d
    000005e7: 	jle	.Ltmp126 # Offset: 1511
    000005e9: 	movslq	%ecx, %rcx
    000005ec: 	cmpb	%sil, (%rdi,%rcx)
    000005f0: 	sete	%cl
    000005f3: 	movzbl	%cl, %ecx
    000005f6: 	addq	%rcx, %rax
    000005f9: 	leal	0xb(%r9), %ecx
    000005fd: 	cmpl	%ecx, %r8d
    00000600: 	jle	.Ltmp126 # Offset: 1536
    00000602: 	movslq	%ecx, %rcx
    00000605: 	cmpb	%sil, (%rdi,%rcx)
    00000609: 	sete	%cl
    0000060c: 	movzbl	%cl, %ecx
    0000060f: 	addq	%rcx, %rax
    00000612: 	leal	0xc(%r9), %ecx
    00000616: 	cmpl	%ecx, %r8d
    00000619: 	jle	.Ltmp126 # Offset: 1561
    0000061b: 	movslq	%ecx, %rcx
    0000061e: 	cmpb	%sil, (%rdi,%rcx)
    00000622: 	sete	%cl
    00000625: 	movzbl	%cl, %ecx
    00000628: 	addq	%rcx, %rax
    0000062b: 	leal	0xd(%r9), %ecx
    0000062f: 	cmpl	%ecx, %r8d
    00000632: 	jle	.Ltmp126 # Offset: 1586
    00000634: 	movslq	%ecx, %rcx
    00000637: 	cmpb	%sil, (%rdi,%rcx)
    0000063b: 	sete	%cl
    0000063e: 	addl	$0xe, %r9d
    00000642: 	movzbl	%cl, %ecx
    00000645: 	addq	%rcx, %rax
    00000648: 	cmpl	%r8d, %r9d
    0000064b: 	jge	.Ltmp126 # Offset: 1611
    0000064d: 	movslq	%r9d, %r9
    00000650: 	xorl	%ecx, %ecx
    00000652: 	cmpb	%sil, (%rdi,%r9)
    00000656: 	sete	%cl
    00000659: 	addq	%rcx, %rax
.Ltmp126:
    0000065c: 	popq	%rbx
    0000065d: 	addq	%rdx, %rax
    00000660: 	popq	%rbp
    00000661: 	popq	%r12
    00000663: 	popq	%r13
    00000665: 	retq # Offset: 1637
    00000666: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp122:
    00000670: 	xorl	%edx, %edx
    00000672: 	xorl	%r9d, %r9d
    00000675: 	xorl	%eax, %eax
    00000677: 	jmp	.Ltmp130 # Offset: 1655
.Ltmp123:
    0000067c: 	xorl	%r11d, %r11d
    0000067f: 	xorl	%ecx, %ecx
    00000681: 	xorl	%ebx, %ebx
    00000683: 	xorl	%edx, %edx
    00000685: 	xorl	%eax, %eax
    00000687: 	jmp	.Ltmp131 # Offset: 1671
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8IhEmPT_iS0_"

Binary Function "_Z6count1IaEmPT_iS0_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x41d0
  Size        : 0x2dd
  MaxSize     : 0x2e0
  Offset      : 0x41d0
  Section     : .text
  Orc Section : .local.text._Z6count1IaEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp132 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp133 # Offset: 20
    0000001a: 	movd	%edx, %xmm5
    0000001e: 	shrl	$0x4, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm3, %xmm3
    00000028: 	punpcklbw	%xmm5, %xmm5
    0000002c: 	pxor	%xmm6, %xmm6
    00000030: 	pxor	%xmm4, %xmm4
    00000034: 	subl	$0x1, %esi
    00000037: 	punpcklwd	%xmm5, %xmm5
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	movdqa	DATAat0x19250(%rip), %xmm7
    00000047: 	pxor	%xmm2, %xmm2
    0000004b: 	pshufd	$0x0, %xmm5, %xmm5
    00000050: 	leaq	0x10(%rdi,%rsi), %rsi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp134:
    00000058: 	movdqu	(%rax), %xmm0
    0000005c: 	addq	$0x10, %rax
    00000060: 	pcmpeqb	%xmm5, %xmm0
    00000064: 	pand	%xmm7, %xmm0
    00000068: 	movdqa	%xmm0, %xmm1
    0000006c: 	punpckhbw	%xmm6, %xmm0
    00000070: 	punpcklbw	%xmm6, %xmm1
    00000074: 	movdqa	%xmm0, %xmm8
    00000079: 	punpckhwd	%xmm4, %xmm0
    0000007d: 	movdqa	%xmm1, %xmm9
    00000082: 	punpckhwd	%xmm4, %xmm1
    00000086: 	punpcklwd	%xmm4, %xmm8
    0000008b: 	movdqa	%xmm1, %xmm10
    00000090: 	punpcklwd	%xmm4, %xmm9
    00000095: 	punpckhdq	%xmm2, %xmm1
    00000099: 	punpckldq	%xmm2, %xmm10
    0000009e: 	paddq	%xmm10, %xmm1
    000000a3: 	movdqa	%xmm9, %xmm10
    000000a8: 	punpckhdq	%xmm2, %xmm9
    000000ad: 	punpckldq	%xmm2, %xmm10
    000000b2: 	paddq	%xmm10, %xmm9
    000000b7: 	paddq	%xmm9, %xmm1
    000000bc: 	movdqa	%xmm8, %xmm9
    000000c1: 	punpckhdq	%xmm2, %xmm8
    000000c6: 	punpckldq	%xmm2, %xmm9
    000000cb: 	paddq	%xmm9, %xmm8
    000000d0: 	movdqa	%xmm0, %xmm9
    000000d5: 	punpckhdq	%xmm2, %xmm0
    000000d9: 	punpckldq	%xmm2, %xmm9
    000000de: 	paddq	%xmm3, %xmm0
    000000e2: 	paddq	%xmm9, %xmm8
    000000e7: 	paddq	%xmm8, %xmm1
    000000ec: 	movdqa	%xmm1, %xmm3
    000000f0: 	paddq	%xmm0, %xmm3
    000000f4: 	cmpq	%rsi, %rax
    000000f7: 	jne	.Ltmp134 # Offset: 247
    000000fd: 	movdqa	%xmm3, %xmm0
    00000101: 	movl	%ecx, %esi
    00000103: 	psrldq	$0x8, %xmm0
    00000108: 	andl	$-0x10, %esi
    0000010b: 	paddq	%xmm0, %xmm3
    0000010f: 	movq	%xmm3, %rax
    00000114: 	testb	$0xf, %cl
    00000117: 	je	.Ltmp135 # Offset: 279
.Ltmp137:
    0000011d: 	movslq	%esi, %r8
    00000120: 	cmpb	%dl, (%rdi,%r8)
    00000124: 	sete	%r8b
    00000128: 	movzbl	%r8b, %r8d
    0000012c: 	addq	%r8, %rax
    0000012f: 	leal	0x1(%rsi), %r8d
    00000133: 	cmpl	%ecx, %r8d
    00000136: 	jge	.Ltmp136 # Offset: 310
    0000013c: 	movslq	%r8d, %r8
    0000013f: 	cmpb	%dl, (%rdi,%r8)
    00000143: 	sete	%r8b
    00000147: 	movzbl	%r8b, %r8d
    0000014b: 	addq	%r8, %rax
    0000014e: 	leal	0x2(%rsi), %r8d
    00000152: 	cmpl	%r8d, %ecx
    00000155: 	jle	.Ltmp136 # Offset: 341
    0000015b: 	movslq	%r8d, %r8
    0000015e: 	cmpb	%dl, (%rdi,%r8)
    00000162: 	sete	%r8b
    00000166: 	movzbl	%r8b, %r8d
    0000016a: 	addq	%r8, %rax
    0000016d: 	leal	0x3(%rsi), %r8d
    00000171: 	cmpl	%r8d, %ecx
    00000174: 	jle	.Ltmp136 # Offset: 372
    0000017a: 	movslq	%r8d, %r8
    0000017d: 	cmpb	%dl, (%rdi,%r8)
    00000181: 	sete	%r8b
    00000185: 	movzbl	%r8b, %r8d
    00000189: 	addq	%r8, %rax
    0000018c: 	leal	0x4(%rsi), %r8d
    00000190: 	cmpl	%r8d, %ecx
    00000193: 	jle	.Ltmp136 # Offset: 403
    00000199: 	movslq	%r8d, %r8
    0000019c: 	cmpb	%dl, (%rdi,%r8)
    000001a0: 	sete	%r8b
    000001a4: 	movzbl	%r8b, %r8d
    000001a8: 	addq	%r8, %rax
    000001ab: 	leal	0x5(%rsi), %r8d
    000001af: 	cmpl	%r8d, %ecx
    000001b2: 	jle	.Ltmp136 # Offset: 434
    000001b8: 	movslq	%r8d, %r8
    000001bb: 	cmpb	%dl, (%rdi,%r8)
    000001bf: 	sete	%r8b
    000001c3: 	movzbl	%r8b, %r8d
    000001c7: 	addq	%r8, %rax
    000001ca: 	leal	0x6(%rsi), %r8d
    000001ce: 	cmpl	%r8d, %ecx
    000001d1: 	jle	.Ltmp136 # Offset: 465
    000001d7: 	movslq	%r8d, %r8
    000001da: 	cmpb	%dl, (%rdi,%r8)
    000001de: 	sete	%r8b
    000001e2: 	movzbl	%r8b, %r8d
    000001e6: 	addq	%r8, %rax
    000001e9: 	leal	0x7(%rsi), %r8d
    000001ed: 	cmpl	%r8d, %ecx
    000001f0: 	jle	.Ltmp136 # Offset: 496
    000001f6: 	movslq	%r8d, %r8
    000001f9: 	cmpb	%dl, (%rdi,%r8)
    000001fd: 	sete	%r8b
    00000201: 	movzbl	%r8b, %r8d
    00000205: 	addq	%r8, %rax
    00000208: 	leal	0x8(%rsi), %r8d
    0000020c: 	cmpl	%r8d, %ecx
    0000020f: 	jle	.Ltmp136 # Offset: 527
    00000215: 	movslq	%r8d, %r8
    00000218: 	cmpb	%dl, (%rdi,%r8)
    0000021c: 	sete	%r8b
    00000220: 	movzbl	%r8b, %r8d
    00000224: 	addq	%r8, %rax
    00000227: 	leal	0x9(%rsi), %r8d
    0000022b: 	cmpl	%r8d, %ecx
    0000022e: 	jle	.Ltmp136 # Offset: 558
    00000234: 	movslq	%r8d, %r8
    00000237: 	cmpb	%dl, (%rdi,%r8)
    0000023b: 	sete	%r8b
    0000023f: 	movzbl	%r8b, %r8d
    00000243: 	addq	%r8, %rax
    00000246: 	leal	0xa(%rsi), %r8d
    0000024a: 	cmpl	%r8d, %ecx
    0000024d: 	jle	.Ltmp136 # Offset: 589
    00000253: 	movslq	%r8d, %r8
    00000256: 	cmpb	%dl, (%rdi,%r8)
    0000025a: 	sete	%r8b
    0000025e: 	movzbl	%r8b, %r8d
    00000262: 	addq	%r8, %rax
    00000265: 	leal	0xb(%rsi), %r8d
    00000269: 	cmpl	%r8d, %ecx
    0000026c: 	jle	.Ltmp136 # Offset: 620
    0000026e: 	movslq	%r8d, %r8
    00000271: 	cmpb	%dl, (%rdi,%r8)
    00000275: 	sete	%r8b
    00000279: 	movzbl	%r8b, %r8d
    0000027d: 	addq	%r8, %rax
    00000280: 	leal	0xc(%rsi), %r8d
    00000284: 	cmpl	%r8d, %ecx
    00000287: 	jle	.Ltmp136 # Offset: 647
    00000289: 	movslq	%r8d, %r8
    0000028c: 	cmpb	%dl, (%rdi,%r8)
    00000290: 	sete	%r8b
    00000294: 	movzbl	%r8b, %r8d
    00000298: 	addq	%r8, %rax
    0000029b: 	leal	0xd(%rsi), %r8d
    0000029f: 	cmpl	%r8d, %ecx
    000002a2: 	jle	.Ltmp136 # Offset: 674
    000002a4: 	movslq	%r8d, %r8
    000002a7: 	cmpb	%dl, (%rdi,%r8)
    000002ab: 	sete	%r8b
    000002af: 	addl	$0xe, %esi
    000002b2: 	movzbl	%r8b, %r8d
    000002b6: 	addq	%r8, %rax
    000002b9: 	cmpl	%esi, %ecx
    000002bb: 	jle	.Ltmp136 # Offset: 699
    000002bd: 	movslq	%esi, %rsi
    000002c0: 	cmpb	%dl, (%rdi,%rsi)
    000002c3: 	sete	%dl
    000002c6: 	movzbl	%dl, %edx
    000002c9: 	addq	%rdx, %rax
    000002cc: 	retq # Offset: 716
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp132:
    000002d0: 	xorl	%eax, %eax
.Ltmp136:
    000002d2: 	retq # Offset: 722
.Ltmp133:
    000002d3: 	xorl	%esi, %esi
    000002d5: 	xorl	%eax, %eax
    000002d7: 	jmp	.Ltmp137 # Offset: 727
.Ltmp135:
    000002dc: 	retq # Offset: 732
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1IaEmPT_iS0_"

Binary Function "_Z6count2IaEmPT_iS0_" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x44b0
  Size        : 0x8f
  MaxSize     : 0x90
  Offset      : 0x44b0
  Section     : .text
  Orc Section : .local.text._Z6count2IaEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %r10d
    0000000a: 	movl	%esi, %edi
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp138 # Offset: 15
    00000011: 	leal	-0x2(%rsi), %r11d
    00000015: 	movq	%r9, %rax
    00000018: 	xorl	%r8d, %r8d
    0000001b: 	shrl	%r11d
    0000001e: 	movl	%r11d, %ecx
    00000021: 	leaq	0x2(%r9,%rcx,2), %rsi
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp139:
    00000030: 	xorl	%ecx, %ecx
    00000032: 	cmpb	(%rax), %dl
    00000034: 	sete	%cl
    00000037: 	addq	%rcx, %r8
    0000003a: 	xorl	%ecx, %ecx
    0000003c: 	cmpb	0x1(%rax), %dl
    0000003f: 	sete	%cl
    00000042: 	addq	$0x2, %rax
    00000046: 	addq	%rcx, %r8
    00000049: 	cmpq	%rsi, %rax
    0000004c: 	jne	.Ltmp139 # Offset: 76
    0000004e: 	leal	0x2(%r11,%r11), %eax
.Ltmp141:
    00000053: 	cmpl	%eax, %edi
    00000055: 	jle	.Ltmp140 # Offset: 85
    00000057: 	movslq	%eax, %rdx
    0000005a: 	cmpb	%r10b, (%r9,%rdx)
    0000005e: 	sete	%dl
    00000061: 	addl	$0x1, %eax
    00000064: 	movzbl	%dl, %edx
    00000067: 	addq	%rdx, %r8
    0000006a: 	cmpl	%eax, %edi
    0000006c: 	jle	.Ltmp140 # Offset: 108
    0000006e: 	cltq
    00000070: 	cmpb	%r10b, (%r9,%rax)
    00000074: 	sete	%al
    00000077: 	movzbl	%al, %eax
    0000007a: 	addq	%rax, %r8
.Ltmp140:
    0000007d: 	movq	%r8, %rax
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp138:
    00000088: 	xorl	%eax, %eax
    0000008a: 	xorl	%r8d, %r8d
    0000008d: 	jmp	.Ltmp141 # Offset: 141
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2IaEmPT_iS0_"

Binary Function "_Z6count3IaEmPT_iS0_" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x4540
  Size        : 0xd6
  MaxSize     : 0xe0
  Offset      : 0x4540
  Section     : .text
  Orc Section : .local.text._Z6count3IaEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r8d
    0000000a: 	movl	%edx, %r10d
    0000000d: 	movl	%edx, %ecx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp142 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r11d
    0000001c: 	movq	%rdi, %rdx
    0000001f: 	shrl	$0x2, %r11d
    00000023: 	movl	%r11d, %eax
    00000026: 	leaq	0x4(%rdi,%rax,4), %rdi
    0000002b: 	xorl	%eax, %eax
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp143:
    00000030: 	xorl	%esi, %esi
    00000032: 	cmpb	(%rdx), %cl
    00000034: 	sete	%sil
    00000038: 	addq	%rsi, %rax
    0000003b: 	xorl	%esi, %esi
    0000003d: 	cmpb	0x1(%rdx), %cl
    00000040: 	sete	%sil
    00000044: 	addq	%rsi, %rax
    00000047: 	xorl	%esi, %esi
    00000049: 	cmpb	0x2(%rdx), %cl
    0000004c: 	sete	%sil
    00000050: 	addq	%rsi, %rax
    00000053: 	xorl	%esi, %esi
    00000055: 	cmpb	0x3(%rdx), %cl
    00000058: 	sete	%sil
    0000005c: 	addq	$0x4, %rdx
    00000060: 	addq	%rsi, %rax
    00000063: 	cmpq	%rdx, %rdi
    00000066: 	jne	.Ltmp143 # Offset: 102
    00000068: 	leal	0x4(,%r11,4), %edx
.Ltmp145:
    00000070: 	cmpl	%edx, %r8d
    00000073: 	jle	.Ltmp144 # Offset: 115
    00000075: 	movslq	%edx, %rcx
    00000078: 	cmpb	%r10b, (%r9,%rcx)
    0000007c: 	sete	%cl
    0000007f: 	movzbl	%cl, %ecx
    00000082: 	addq	%rcx, %rax
    00000085: 	leal	0x1(%rdx), %ecx
    00000088: 	cmpl	%ecx, %r8d
    0000008b: 	jle	.Ltmp144 # Offset: 139
    0000008d: 	movslq	%ecx, %rcx
    00000090: 	cmpb	%r10b, (%r9,%rcx)
    00000094: 	sete	%cl
    00000097: 	movzbl	%cl, %ecx
    0000009a: 	addq	%rcx, %rax
    0000009d: 	leal	0x2(%rdx), %ecx
    000000a0: 	cmpl	%ecx, %r8d
    000000a3: 	jle	.Ltmp144 # Offset: 163
    000000a5: 	movslq	%ecx, %rcx
    000000a8: 	cmpb	%r10b, (%r9,%rcx)
    000000ac: 	sete	%cl
    000000af: 	addl	$0x3, %edx
    000000b2: 	movzbl	%cl, %ecx
    000000b5: 	addq	%rcx, %rax
    000000b8: 	cmpl	%r8d, %edx
    000000bb: 	jge	.Ltmp144 # Offset: 187
    000000bd: 	movslq	%edx, %rdx
    000000c0: 	cmpb	%r10b, (%r9,%rdx)
    000000c4: 	sete	%dl
    000000c7: 	movzbl	%dl, %edx
    000000ca: 	addq	%rdx, %rax
.Ltmp144:
    000000cd: 	retq # Offset: 205
    000000ce: 	nop # Size: 2
.Ltmp142:
    000000d0: 	xorl	%edx, %edx
    000000d2: 	xorl	%eax, %eax
    000000d4: 	jmp	.Ltmp145 # Offset: 212
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3IaEmPT_iS0_"

Binary Function "_Z6count4IaEmPT_iS0_" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x4620
  Size        : 0x33b
  MaxSize     : 0x340
  Offset      : 0x4620
  Section     : .text
  Orc Section : .local.text._Z6count4IaEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r8
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %r10d
    0000000e: 	cmpl	$0x3, %esi
    00000011: 	jle	.Ltmp146 # Offset: 17
    00000017: 	leal	-0x4(%r9), %ebx
    0000001b: 	movl	%edx, %esi
    0000001d: 	xorl	%ecx, %ecx
    0000001f: 	movq	%rdi, %rdx
    00000022: 	shrl	$0x2, %ebx
    00000025: 	movl	%ebx, %eax
    00000027: 	leaq	0x4(%rdi,%rax,4), %r11
    0000002c: 	xorl	%eax, %eax
    0000002e: 	nop # Size: 2
.Ltmp147:
    00000030: 	xorl	%edi, %edi
    00000032: 	cmpb	(%rdx), %sil
    00000035: 	sete	%dil
    00000039: 	addq	%rdi, %rcx
    0000003c: 	xorl	%edi, %edi
    0000003e: 	cmpb	0x1(%rdx), %sil
    00000042: 	sete	%dil
    00000046: 	addq	%rdi, %rax
    00000049: 	xorl	%edi, %edi
    0000004b: 	cmpb	0x2(%rdx), %sil
    0000004f: 	sete	%dil
    00000053: 	addq	%rdi, %rcx
    00000056: 	xorl	%edi, %edi
    00000058: 	cmpb	0x3(%rdx), %sil
    0000005c: 	sete	%dil
    00000060: 	addq	$0x4, %rdx
    00000064: 	addq	%rdi, %rax
    00000067: 	cmpq	%r11, %rdx
    0000006a: 	jne	.Ltmp147 # Offset: 106
    0000006c: 	leal	0x4(,%rbx,4), %esi
.Ltmp152:
    00000073: 	cmpl	%esi, %r9d
    00000076: 	jle	.Ltmp148 # Offset: 118
    0000007c: 	movl	%r9d, %ebx
    0000007f: 	subl	%esi, %ebx
    00000081: 	leal	-0x1(%rbx), %edx
    00000084: 	cmpl	$0xe, %edx
    00000087: 	jbe	.Ltmp149 # Offset: 135
    0000008d: 	movl	%ebx, %edx
    0000008f: 	movd	%r10d, %xmm6
    00000094: 	pxor	%xmm5, %xmm5
    00000098: 	movslq	%esi, %rdi
    0000009b: 	shrl	$0x4, %edx
    0000009e: 	punpcklbw	%xmm6, %xmm6
    000000a2: 	pxor	%xmm7, %xmm7
    000000a6: 	addq	%r8, %rdi
    000000a9: 	leal	-0x1(%rdx), %r11d
    000000ad: 	punpcklwd	%xmm6, %xmm6
    000000b1: 	leaq	0x10(%rdi), %rdx
    000000b5: 	movdqa	DATAat0x19250(%rip), %xmm8
    000000be: 	shlq	$0x4, %r11
    000000c2: 	pshufd	$0x0, %xmm6, %xmm6
    000000c7: 	pxor	%xmm4, %xmm4
    000000cb: 	addq	%rdx, %r11
    000000ce: 	pxor	%xmm3, %xmm3
    000000d2: 	jmp	.Ltmp150 # Offset: 210
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp151:
    000000d8: 	addq	$0x10, %rdx
.Ltmp150:
    000000dc: 	movdqu	(%rdi), %xmm0
    000000e0: 	movq	%rdx, %rdi
    000000e3: 	pcmpeqb	%xmm6, %xmm0
    000000e7: 	pand	%xmm8, %xmm0
    000000ec: 	movdqa	%xmm0, %xmm2
    000000f0: 	punpckhbw	%xmm7, %xmm0
    000000f4: 	punpcklbw	%xmm7, %xmm2
    000000f8: 	movdqa	%xmm0, %xmm9
    000000fd: 	punpckhwd	%xmm4, %xmm0
    00000101: 	movdqa	%xmm2, %xmm1
    00000105: 	punpckhwd	%xmm4, %xmm2
    00000109: 	punpcklwd	%xmm4, %xmm9
    0000010e: 	punpcklwd	%xmm4, %xmm1
    00000112: 	movdqa	%xmm1, %xmm10
    00000117: 	punpckhdq	%xmm3, %xmm1
    0000011b: 	punpckldq	%xmm3, %xmm10
    00000120: 	paddq	%xmm10, %xmm1
    00000125: 	movdqa	%xmm2, %xmm10
    0000012a: 	punpckhdq	%xmm3, %xmm2
    0000012e: 	punpckldq	%xmm3, %xmm10
    00000133: 	paddq	%xmm10, %xmm2
    00000138: 	paddq	%xmm2, %xmm1
    0000013c: 	movdqa	%xmm9, %xmm2
    00000141: 	punpckhdq	%xmm3, %xmm9
    00000146: 	punpckldq	%xmm3, %xmm2
    0000014a: 	paddq	%xmm2, %xmm9
    0000014f: 	movdqa	%xmm0, %xmm2
    00000153: 	punpckhdq	%xmm3, %xmm0
    00000157: 	punpckldq	%xmm3, %xmm2
    0000015b: 	paddq	%xmm5, %xmm0
    0000015f: 	paddq	%xmm2, %xmm9
    00000164: 	paddq	%xmm9, %xmm1
    00000169: 	movdqa	%xmm1, %xmm5
    0000016d: 	paddq	%xmm0, %xmm5
    00000171: 	cmpq	%rdx, %r11
    00000174: 	jne	.Ltmp151 # Offset: 372
    0000017a: 	movdqa	%xmm5, %xmm0
    0000017e: 	psrldq	$0x8, %xmm0
    00000183: 	paddq	%xmm0, %xmm5
    00000187: 	movq	%xmm5, %rdx
    0000018c: 	addq	%rdx, %rcx
    0000018f: 	movl	%ebx, %edx
    00000191: 	andl	$-0x10, %edx
    00000194: 	addl	%edx, %esi
    00000196: 	cmpl	%edx, %ebx
    00000198: 	je	.Ltmp148 # Offset: 408
.Ltmp149:
    0000019e: 	movslq	%esi, %rdx
    000001a1: 	cmpb	%r10b, (%r8,%rdx)
    000001a5: 	sete	%dl
    000001a8: 	movzbl	%dl, %edx
    000001ab: 	addq	%rdx, %rcx
    000001ae: 	leal	0x1(%rsi), %edx
    000001b1: 	cmpl	%edx, %r9d
    000001b4: 	jle	.Ltmp148 # Offset: 436
    000001ba: 	movslq	%edx, %rdx
    000001bd: 	cmpb	%r10b, (%r8,%rdx)
    000001c1: 	sete	%dl
    000001c4: 	movzbl	%dl, %edx
    000001c7: 	addq	%rdx, %rcx
    000001ca: 	leal	0x2(%rsi), %edx
    000001cd: 	cmpl	%edx, %r9d
    000001d0: 	jle	.Ltmp148 # Offset: 464
    000001d6: 	movslq	%edx, %rdx
    000001d9: 	cmpb	%r10b, (%r8,%rdx)
    000001dd: 	sete	%dl
    000001e0: 	movzbl	%dl, %edx
    000001e3: 	addq	%rdx, %rcx
    000001e6: 	leal	0x3(%rsi), %edx
    000001e9: 	cmpl	%edx, %r9d
    000001ec: 	jle	.Ltmp148 # Offset: 492
    000001f2: 	movslq	%edx, %rdx
    000001f5: 	cmpb	%r10b, (%r8,%rdx)
    000001f9: 	sete	%dl
    000001fc: 	movzbl	%dl, %edx
    000001ff: 	addq	%rdx, %rcx
    00000202: 	leal	0x4(%rsi), %edx
    00000205: 	cmpl	%r9d, %edx
    00000208: 	jge	.Ltmp148 # Offset: 520
    0000020e: 	movslq	%edx, %rdx
    00000211: 	cmpb	%r10b, (%r8,%rdx)
    00000215: 	sete	%dl
    00000218: 	movzbl	%dl, %edx
    0000021b: 	addq	%rdx, %rcx
    0000021e: 	leal	0x5(%rsi), %edx
    00000221: 	cmpl	%r9d, %edx
    00000224: 	jge	.Ltmp148 # Offset: 548
    0000022a: 	movslq	%edx, %rdx
    0000022d: 	cmpb	%r10b, (%r8,%rdx)
    00000231: 	sete	%dl
    00000234: 	movzbl	%dl, %edx
    00000237: 	addq	%rdx, %rcx
    0000023a: 	leal	0x6(%rsi), %edx
    0000023d: 	cmpl	%edx, %r9d
    00000240: 	jle	.Ltmp148 # Offset: 576
    00000246: 	movslq	%edx, %rdx
    00000249: 	cmpb	%r10b, (%r8,%rdx)
    0000024d: 	sete	%dl
    00000250: 	movzbl	%dl, %edx
    00000253: 	addq	%rdx, %rcx
    00000256: 	leal	0x7(%rsi), %edx
    00000259: 	cmpl	%edx, %r9d
    0000025c: 	jle	.Ltmp148 # Offset: 604
    00000262: 	movslq	%edx, %rdx
    00000265: 	cmpb	%r10b, (%r8,%rdx)
    00000269: 	sete	%dl
    0000026c: 	movzbl	%dl, %edx
    0000026f: 	addq	%rdx, %rcx
    00000272: 	leal	0x8(%rsi), %edx
    00000275: 	cmpl	%edx, %r9d
    00000278: 	jle	.Ltmp148 # Offset: 632
    0000027e: 	movslq	%edx, %rdx
    00000281: 	cmpb	%r10b, (%r8,%rdx)
    00000285: 	sete	%dl
    00000288: 	movzbl	%dl, %edx
    0000028b: 	addq	%rdx, %rcx
    0000028e: 	leal	0x9(%rsi), %edx
    00000291: 	cmpl	%edx, %r9d
    00000294: 	jle	.Ltmp148 # Offset: 660
    0000029a: 	movslq	%edx, %rdx
    0000029d: 	cmpb	%r10b, (%r8,%rdx)
    000002a1: 	sete	%dl
    000002a4: 	movzbl	%dl, %edx
    000002a7: 	addq	%rdx, %rcx
    000002aa: 	leal	0xa(%rsi), %edx
    000002ad: 	cmpl	%edx, %r9d
    000002b0: 	jle	.Ltmp148 # Offset: 688
    000002b2: 	movslq	%edx, %rdx
    000002b5: 	cmpb	%r10b, (%r8,%rdx)
    000002b9: 	sete	%dl
    000002bc: 	movzbl	%dl, %edx
    000002bf: 	addq	%rdx, %rcx
    000002c2: 	leal	0xb(%rsi), %edx
    000002c5: 	cmpl	%edx, %r9d
    000002c8: 	jle	.Ltmp148 # Offset: 712
    000002ca: 	movslq	%edx, %rdx
    000002cd: 	cmpb	%r10b, (%r8,%rdx)
    000002d1: 	sete	%dl
    000002d4: 	movzbl	%dl, %edx
    000002d7: 	addq	%rdx, %rcx
    000002da: 	leal	0xc(%rsi), %edx
    000002dd: 	cmpl	%edx, %r9d
    000002e0: 	jle	.Ltmp148 # Offset: 736
    000002e2: 	movslq	%edx, %rdx
    000002e5: 	cmpb	%r10b, (%r8,%rdx)
    000002e9: 	sete	%dl
    000002ec: 	movzbl	%dl, %edx
    000002ef: 	addq	%rdx, %rcx
    000002f2: 	leal	0xd(%rsi), %edx
    000002f5: 	cmpl	%edx, %r9d
    000002f8: 	jle	.Ltmp148 # Offset: 760
    000002fa: 	movslq	%edx, %rdx
    000002fd: 	cmpb	%r10b, (%r8,%rdx)
    00000301: 	sete	%dl
    00000304: 	addl	$0xe, %esi
    00000307: 	movzbl	%dl, %edx
    0000030a: 	addq	%rdx, %rcx
    0000030d: 	cmpl	%esi, %r9d
    00000310: 	jle	.Ltmp148 # Offset: 784
    00000312: 	movslq	%esi, %rsi
    00000315: 	xorl	%edx, %edx
    00000317: 	cmpb	%r10b, (%r8,%rsi)
    0000031b: 	sete	%dl
    0000031e: 	addq	%rdx, %rcx
.Ltmp148:
    00000321: 	addq	%rcx, %rax
    00000324: 	popq	%rbx
    00000325: 	retq # Offset: 805
    00000326: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp146:
    00000330: 	xorl	%esi, %esi
    00000332: 	xorl	%eax, %eax
    00000334: 	xorl	%ecx, %ecx
    00000336: 	jmp	.Ltmp152 # Offset: 822
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4IaEmPT_iS0_"

Binary Function "_Z6count5IaEmPT_iS0_" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x4960
  Size        : 0x61b
  MaxSize     : 0x620
  Offset      : 0x4960
  Section     : .text
  Orc Section : .local.text._Z6count5IaEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r10d
    00000008: 	pushq	%r12
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %r9d
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	testl	%r10d, %r10d
    00000015: 	jle	.Ltmp153 # Offset: 21
    0000001b: 	leal	-0x4(%rsi), %eax
    0000001e: 	movl	%eax, %esi
    00000020: 	shrl	$0x2, %esi
    00000023: 	addl	$0x1, %esi
    00000026: 	cmpl	$0xb, %eax
    00000029: 	jbe	.Ltmp154 # Offset: 41
    0000002f: 	movd	%edx, %xmm0
    00000033: 	movl	%esi, %edx
    00000035: 	pxor	%xmm8, %xmm8
    0000003a: 	movq	%rdi, %rax
    0000003d: 	punpcklbw	%xmm0, %xmm0
    00000041: 	shrl	$0x2, %edx
    00000044: 	movdqa	%xmm8, %xmm11
    00000049: 	pxor	%xmm7, %xmm7
    0000004d: 	punpcklwd	%xmm0, %xmm0
    00000051: 	subl	$0x1, %edx
    00000054: 	movdqa	%xmm8, %xmm9
    00000059: 	movdqa	DATAat0x19250(%rip), %xmm14
    00000062: 	pshufd	$0x0, %xmm0, %xmm6
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movdqa	%xmm8, %xmm12
    00000070: 	movdqa	%xmm8, %xmm10
    00000075: 	movaps	%xmm6, -0x10(%rsp)
    0000007a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000007f: 	movdqa	%xmm8, %xmm13
    00000084: 	movdqa	%xmm8, %xmm6
    00000089: 	movdqa	%xmm8, %xmm3
    0000008e: 	pxor	%xmm1, %xmm1
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp155:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	pxor	%xmm4, %xmm4
    000000a0: 	addq	$0x10, %rax
    000000a4: 	pcmpeqb	-0x10(%rsp), %xmm0
    000000aa: 	pand	%xmm14, %xmm0
    000000af: 	movdqa	%xmm0, %xmm2
    000000b3: 	punpckhbw	%xmm4, %xmm0
    000000b7: 	punpcklbw	%xmm4, %xmm2
    000000bb: 	movdqa	%xmm0, %xmm4
    000000bf: 	punpckhwd	%xmm7, %xmm0
    000000c3: 	movdqa	%xmm2, %xmm5
    000000c7: 	punpckhwd	%xmm7, %xmm2
    000000cb: 	punpcklwd	%xmm7, %xmm4
    000000cf: 	punpcklwd	%xmm7, %xmm5
    000000d3: 	movdqa	%xmm5, %xmm15
    000000d8: 	punpckhdq	%xmm1, %xmm5
    000000dc: 	paddq	%xmm5, %xmm6
    000000e0: 	movdqa	%xmm2, %xmm5
    000000e4: 	punpckhdq	%xmm1, %xmm2
    000000e8: 	paddq	%xmm2, %xmm10
    000000ed: 	movdqa	%xmm4, %xmm2
    000000f1: 	punpckldq	%xmm1, %xmm15
    000000f6: 	punpckldq	%xmm1, %xmm2
    000000fa: 	punpckldq	%xmm1, %xmm5
    000000fe: 	punpckhdq	%xmm1, %xmm4
    00000102: 	paddq	%xmm2, %xmm12
    00000107: 	movdqa	%xmm0, %xmm2
    0000010b: 	punpckhdq	%xmm1, %xmm0
    0000010f: 	punpckldq	%xmm1, %xmm2
    00000113: 	paddq	%xmm15, %xmm3
    00000118: 	paddq	%xmm5, %xmm13
    0000011d: 	paddq	%xmm4, %xmm9
    00000122: 	paddq	%xmm2, %xmm11
    00000127: 	paddq	%xmm0, %xmm8
    0000012c: 	cmpq	%rax, %rdx
    0000012f: 	jne	.Ltmp155 # Offset: 303
    00000135: 	movq	%xmm3, %rax
    0000013a: 	movq	%xmm13, %rdx
    0000013f: 	psrldq	$0x8, %xmm3
    00000144: 	movl	%esi, %ebp
    00000146: 	addq	%rdx, %rax
    00000149: 	movq	%xmm12, %rdx
    0000014e: 	movq	%xmm6, %rbx
    00000153: 	andl	$-0x4, %ebp
    00000156: 	addq	%rdx, %rax
    00000159: 	movq	%xmm11, %rdx
    0000015e: 	psrldq	$0x8, %xmm6
    00000163: 	addq	%rdx, %rax
    00000166: 	movq	%xmm3, %rdx
    0000016b: 	movhlps	%xmm13, %xmm3
    0000016f: 	movq	%xmm3, %rcx
    00000174: 	movhlps	%xmm12, %xmm3
    00000178: 	addq	%rcx, %rdx
    0000017b: 	movq	%xmm3, %rcx
    00000180: 	movhlps	%xmm11, %xmm3
    00000184: 	addq	%rcx, %rdx
    00000187: 	movq	%xmm3, %rcx
    0000018c: 	addq	%rcx, %rdx
    0000018f: 	movq	%xmm10, %rcx
    00000194: 	addq	%rcx, %rbx
    00000197: 	movq	%xmm9, %rcx
    0000019c: 	addq	%rcx, %rbx
    0000019f: 	movq	%xmm8, %rcx
    000001a4: 	addq	%rcx, %rbx
    000001a7: 	movq	%xmm6, %rcx
    000001ac: 	movhlps	%xmm10, %xmm6
    000001b0: 	movq	%xmm6, %r11
    000001b5: 	movhlps	%xmm9, %xmm6
    000001b9: 	addq	%r11, %rcx
    000001bc: 	movq	%xmm6, %r11
    000001c1: 	movhlps	%xmm8, %xmm6
    000001c5: 	addq	%r11, %rcx
    000001c8: 	movq	%xmm6, %r11
    000001cd: 	addq	%r11, %rcx
    000001d0: 	leal	(,%rbp,4), %r11d
    000001d8: 	cmpl	%ebp, %esi
    000001da: 	je	.Ltmp156 # Offset: 474
.Ltmp176:
    000001e0: 	movslq	%r11d, %rbp
    000001e3: 	xorl	%r12d, %r12d
    000001e6: 	cmpb	%r9b, (%rdi,%rbp)
    000001ea: 	sete	%r12b
    000001ee: 	addq	%r12, %rax
    000001f1: 	cmpb	0x1(%rdi,%rbp), %r9b
    000001f6: 	je	.Ltmp157 # Offset: 502
    000001fc: 	cmpb	0x2(%rdi,%rbp), %r9b
    00000201: 	je	.Ltmp158 # Offset: 513
.Ltmp171:
    00000207: 	cmpb	0x3(%rdi,%rbp), %r9b
    0000020c: 	je	.Ltmp159 # Offset: 524
.Ltmp170:
    00000212: 	leal	0x4(%r11), %ebp
    00000216: 	cmpl	%ebp, %r10d
    00000219: 	jle	.Ltmp156 # Offset: 537
    0000021b: 	movslq	%ebp, %rbp
    0000021e: 	xorl	%r12d, %r12d
    00000221: 	cmpb	%r9b, (%rdi,%rbp)
    00000225: 	sete	%r12b
    00000229: 	addq	%r12, %rax
    0000022c: 	cmpb	0x1(%rdi,%rbp), %r9b
    00000231: 	je	.Ltmp160 # Offset: 561
    00000237: 	cmpb	0x2(%rdi,%rbp), %r9b
    0000023c: 	je	.Ltmp161 # Offset: 572
.Ltmp172:
    00000242: 	cmpb	0x3(%rdi,%rbp), %r9b
    00000247: 	je	.Ltmp162 # Offset: 583
.Ltmp173:
    0000024d: 	addl	$0x8, %r11d
    00000251: 	cmpl	%r11d, %r10d
    00000254: 	jle	.Ltmp156 # Offset: 596
    00000256: 	movslq	%r11d, %r11
    00000259: 	xorl	%r10d, %r10d
    0000025c: 	cmpb	%r9b, (%rdi,%r11)
    00000260: 	sete	%r10b
    00000264: 	addq	%r10, %rax
    00000267: 	cmpb	0x1(%rdi,%r11), %r9b
    0000026c: 	je	.Ltmp163 # Offset: 620
    00000272: 	cmpb	0x2(%rdi,%r11), %r9b
    00000277: 	je	.Ltmp164 # Offset: 631
.Ltmp174:
    0000027d: 	cmpb	0x3(%rdi,%r11), %r9b
    00000282: 	je	.Ltmp165 # Offset: 642
.Ltmp156:
    00000288: 	addq	%rbx, %rdx
    0000028b: 	shll	$0x2, %esi
    0000028e: 	addq	%rcx, %rdx
.Ltmp175:
    00000291: 	cmpl	%esi, %r8d
    00000294: 	jle	.Ltmp166 # Offset: 660
    0000029a: 	movl	%r8d, %ebx
    0000029d: 	subl	%esi, %ebx
    0000029f: 	leal	-0x1(%rbx), %ecx
    000002a2: 	cmpl	$0xe, %ecx
    000002a5: 	jbe	.Ltmp167 # Offset: 677
    000002ab: 	movl	%ebx, %ecx
    000002ad: 	movd	%r9d, %xmm5
    000002b2: 	pxor	%xmm2, %xmm2
    000002b6: 	movslq	%esi, %r10
    000002b9: 	shrl	$0x4, %ecx
    000002bc: 	punpcklbw	%xmm5, %xmm5
    000002c0: 	pxor	%xmm6, %xmm6
    000002c4: 	addq	%rdi, %r10
    000002c7: 	leal	-0x1(%rcx), %r11d
    000002cb: 	punpcklwd	%xmm5, %xmm5
    000002cf: 	leaq	0x10(%r10), %rcx
    000002d3: 	movdqa	DATAat0x19250(%rip), %xmm14
    000002dc: 	shlq	$0x4, %r11
    000002e0: 	pshufd	$0x0, %xmm5, %xmm5
    000002e5: 	pxor	%xmm4, %xmm4
    000002e9: 	addq	%rcx, %r11
    000002ec: 	pxor	%xmm3, %xmm3
    000002f0: 	jmp	.Ltmp168 # Offset: 752
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp169:
    000002f8: 	addq	$0x10, %rcx
.Ltmp168:
    000002fc: 	movdqu	(%r10), %xmm0
    00000301: 	movq	%rcx, %r10
    00000304: 	pcmpeqb	%xmm5, %xmm0
    00000308: 	pand	%xmm14, %xmm0
    0000030d: 	movdqa	%xmm0, %xmm1
    00000311: 	punpckhbw	%xmm6, %xmm0
    00000315: 	punpcklbw	%xmm6, %xmm1
    00000319: 	movdqa	%xmm0, %xmm7
    0000031d: 	punpckhwd	%xmm4, %xmm0
    00000321: 	movdqa	%xmm1, %xmm8
    00000326: 	punpckhwd	%xmm4, %xmm1
    0000032a: 	punpcklwd	%xmm4, %xmm7
    0000032e: 	movdqa	%xmm1, %xmm9
    00000333: 	punpcklwd	%xmm4, %xmm8
    00000338: 	punpckhdq	%xmm3, %xmm1
    0000033c: 	punpckldq	%xmm3, %xmm9
    00000341: 	paddq	%xmm9, %xmm1
    00000346: 	movdqa	%xmm8, %xmm9
    0000034b: 	punpckhdq	%xmm3, %xmm8
    00000350: 	punpckldq	%xmm3, %xmm9
    00000355: 	paddq	%xmm9, %xmm8
    0000035a: 	paddq	%xmm8, %xmm1
    0000035f: 	movdqa	%xmm7, %xmm8
    00000364: 	punpckhdq	%xmm3, %xmm7
    00000368: 	punpckldq	%xmm3, %xmm8
    0000036d: 	paddq	%xmm8, %xmm7
    00000372: 	movdqa	%xmm0, %xmm8
    00000377: 	punpckhdq	%xmm3, %xmm0
    0000037b: 	punpckldq	%xmm3, %xmm8
    00000380: 	paddq	%xmm2, %xmm0
    00000384: 	paddq	%xmm8, %xmm7
    00000389: 	paddq	%xmm7, %xmm1
    0000038d: 	movdqa	%xmm1, %xmm2
    00000391: 	paddq	%xmm0, %xmm2
    00000395: 	cmpq	%rcx, %r11
    00000398: 	jne	.Ltmp169 # Offset: 920
    0000039e: 	movdqa	%xmm2, %xmm0
    000003a2: 	psrldq	$0x8, %xmm0
    000003a7: 	paddq	%xmm0, %xmm2
    000003ab: 	movq	%xmm2, %rcx
    000003b0: 	addq	%rcx, %rax
    000003b3: 	movl	%ebx, %ecx
    000003b5: 	andl	$-0x10, %ecx
    000003b8: 	addl	%ecx, %esi
    000003ba: 	cmpl	%ecx, %ebx
    000003bc: 	je	.Ltmp166 # Offset: 956
.Ltmp167:
    000003c2: 	movslq	%esi, %rcx
    000003c5: 	cmpb	%r9b, (%rdi,%rcx)
    000003c9: 	sete	%cl
    000003cc: 	movzbl	%cl, %ecx
    000003cf: 	addq	%rcx, %rax
    000003d2: 	leal	0x1(%rsi), %ecx
    000003d5: 	cmpl	%r8d, %ecx
    000003d8: 	jge	.Ltmp166 # Offset: 984
    000003de: 	movslq	%ecx, %rcx
    000003e1: 	cmpb	%r9b, (%rdi,%rcx)
    000003e5: 	sete	%cl
    000003e8: 	movzbl	%cl, %ecx
    000003eb: 	addq	%rcx, %rax
    000003ee: 	leal	0x2(%rsi), %ecx
    000003f1: 	cmpl	%ecx, %r8d
    000003f4: 	jle	.Ltmp166 # Offset: 1012
    000003fa: 	movslq	%ecx, %rcx
    000003fd: 	cmpb	%r9b, (%rdi,%rcx)
    00000401: 	sete	%cl
    00000404: 	movzbl	%cl, %ecx
    00000407: 	addq	%rcx, %rax
    0000040a: 	leal	0x3(%rsi), %ecx
    0000040d: 	cmpl	%r8d, %ecx
    00000410: 	jge	.Ltmp166 # Offset: 1040
    00000416: 	movslq	%ecx, %rcx
    00000419: 	cmpb	%r9b, (%rdi,%rcx)
    0000041d: 	sete	%cl
    00000420: 	movzbl	%cl, %ecx
    00000423: 	addq	%rcx, %rax
    00000426: 	leal	0x4(%rsi), %ecx
    00000429: 	cmpl	%r8d, %ecx
    0000042c: 	jge	.Ltmp166 # Offset: 1068
    00000432: 	movslq	%ecx, %rcx
    00000435: 	cmpb	%r9b, (%rdi,%rcx)
    00000439: 	sete	%cl
    0000043c: 	movzbl	%cl, %ecx
    0000043f: 	addq	%rcx, %rax
    00000442: 	leal	0x5(%rsi), %ecx
    00000445: 	cmpl	%ecx, %r8d
    00000448: 	jle	.Ltmp166 # Offset: 1096
    0000044e: 	movslq	%ecx, %rcx
    00000451: 	cmpb	%r9b, (%rdi,%rcx)
    00000455: 	sete	%cl
    00000458: 	movzbl	%cl, %ecx
    0000045b: 	addq	%rcx, %rax
    0000045e: 	leal	0x6(%rsi), %ecx
    00000461: 	cmpl	%ecx, %r8d
    00000464: 	jle	.Ltmp166 # Offset: 1124
    0000046a: 	movslq	%ecx, %rcx
    0000046d: 	cmpb	%r9b, (%rdi,%rcx)
    00000471: 	sete	%cl
    00000474: 	movzbl	%cl, %ecx
    00000477: 	addq	%rcx, %rax
    0000047a: 	leal	0x7(%rsi), %ecx
    0000047d: 	cmpl	%ecx, %r8d
    00000480: 	jle	.Ltmp166 # Offset: 1152
    00000486: 	movslq	%ecx, %rcx
    00000489: 	cmpb	%r9b, (%rdi,%rcx)
    0000048d: 	sete	%cl
    00000490: 	movzbl	%cl, %ecx
    00000493: 	addq	%rcx, %rax
    00000496: 	leal	0x8(%rsi), %ecx
    00000499: 	cmpl	%ecx, %r8d
    0000049c: 	jle	.Ltmp166 # Offset: 1180
    000004a2: 	movslq	%ecx, %rcx
    000004a5: 	cmpb	%r9b, (%rdi,%rcx)
    000004a9: 	sete	%cl
    000004ac: 	movzbl	%cl, %ecx
    000004af: 	addq	%rcx, %rax
    000004b2: 	leal	0x9(%rsi), %ecx
    000004b5: 	cmpl	%ecx, %r8d
    000004b8: 	jle	.Ltmp166 # Offset: 1208
    000004be: 	movslq	%ecx, %rcx
    000004c1: 	cmpb	%r9b, (%rdi,%rcx)
    000004c5: 	sete	%cl
    000004c8: 	movzbl	%cl, %ecx
    000004cb: 	addq	%rcx, %rax
    000004ce: 	leal	0xa(%rsi), %ecx
    000004d1: 	cmpl	%ecx, %r8d
    000004d4: 	jle	.Ltmp166 # Offset: 1236
    000004d6: 	movslq	%ecx, %rcx
    000004d9: 	cmpb	%r9b, (%rdi,%rcx)
    000004dd: 	sete	%cl
    000004e0: 	movzbl	%cl, %ecx
    000004e3: 	addq	%rcx, %rax
    000004e6: 	leal	0xb(%rsi), %ecx
    000004e9: 	cmpl	%r8d, %ecx
    000004ec: 	jge	.Ltmp166 # Offset: 1260
    000004ee: 	movslq	%ecx, %rcx
    000004f1: 	cmpb	%r9b, (%rdi,%rcx)
    000004f5: 	sete	%cl
    000004f8: 	movzbl	%cl, %ecx
    000004fb: 	addq	%rcx, %rax
    000004fe: 	leal	0xc(%rsi), %ecx
    00000501: 	cmpl	%ecx, %r8d
    00000504: 	jle	.Ltmp166 # Offset: 1284
    00000506: 	movslq	%ecx, %rcx
    00000509: 	cmpb	%r9b, (%rdi,%rcx)
    0000050d: 	sete	%cl
    00000510: 	movzbl	%cl, %ecx
    00000513: 	addq	%rcx, %rax
    00000516: 	leal	0xd(%rsi), %ecx
    00000519: 	cmpl	%ecx, %r8d
    0000051c: 	jle	.Ltmp166 # Offset: 1308
    0000051e: 	movslq	%ecx, %rcx
    00000521: 	cmpb	%r9b, (%rdi,%rcx)
    00000525: 	sete	%cl
    00000528: 	addl	$0xe, %esi
    0000052b: 	movzbl	%cl, %ecx
    0000052e: 	addq	%rcx, %rax
    00000531: 	cmpl	%esi, %r8d
    00000534: 	jle	.Ltmp166 # Offset: 1332
    00000536: 	movslq	%esi, %rsi
    00000539: 	xorl	%ecx, %ecx
    0000053b: 	cmpb	%r9b, (%rdi,%rsi)
    0000053f: 	sete	%cl
    00000542: 	addq	%rcx, %rax
.Ltmp166:
    00000545: 	popq	%rbx
    00000546: 	addq	%rdx, %rax
    00000549: 	popq	%rbp
    0000054a: 	popq	%r12
    0000054c: 	retq # Offset: 1356
    0000054d: 	nopl	(%rax) # Size: 3
.Ltmp159:
    00000550: 	addq	$0x1, %rcx
    00000554: 	jmp	.Ltmp170 # Offset: 1364
    00000559: 	nopl	(%rax) # Size: 7
.Ltmp158:
    00000560: 	addq	$0x1, %rbx
    00000564: 	cmpb	0x3(%rdi,%rbp), %r9b
    00000569: 	jne	.Ltmp170 # Offset: 1385
    0000056f: 	jmp	.Ltmp159 # Offset: 1391
    00000571: 	nopl	(%rax) # Size: 7
.Ltmp157:
    00000578: 	addq	$0x1, %rdx
    0000057c: 	cmpb	0x2(%rdi,%rbp), %r9b
    00000581: 	jne	.Ltmp171 # Offset: 1409
    00000587: 	jmp	.Ltmp158 # Offset: 1415
    00000589: 	nopl	(%rax) # Size: 7
.Ltmp160:
    00000590: 	addq	$0x1, %rdx
    00000594: 	cmpb	0x2(%rdi,%rbp), %r9b
    00000599: 	jne	.Ltmp172 # Offset: 1433
    0000059f: 	jmp	.Ltmp161 # Offset: 1439
    000005a1: 	nopl	(%rax) # Size: 7
.Ltmp162:
    000005a8: 	addq	$0x1, %rcx
    000005ac: 	jmp	.Ltmp173 # Offset: 1452
    000005b1: 	nopl	(%rax) # Size: 7
.Ltmp161:
    000005b8: 	addq	$0x1, %rbx
    000005bc: 	cmpb	0x3(%rdi,%rbp), %r9b
    000005c1: 	jne	.Ltmp173 # Offset: 1473
    000005c7: 	jmp	.Ltmp162 # Offset: 1479
    000005c9: 	nopl	(%rax) # Size: 7
.Ltmp165:
    000005d0: 	addq	$0x1, %rcx
    000005d4: 	jmp	.Ltmp156 # Offset: 1492
    000005d9: 	nopl	(%rax) # Size: 7
.Ltmp163:
    000005e0: 	addq	$0x1, %rdx
    000005e4: 	cmpb	0x2(%rdi,%r11), %r9b
    000005e9: 	jne	.Ltmp174 # Offset: 1513
.Ltmp164:
    000005ef: 	addq	$0x1, %rbx
    000005f3: 	cmpb	0x3(%rdi,%r11), %r9b
    000005f8: 	jne	.Ltmp156 # Offset: 1528
    000005fe: 	jmp	.Ltmp165 # Offset: 1534
.Ltmp153:
    00000600: 	xorl	%edx, %edx
    00000602: 	xorl	%esi, %esi
    00000604: 	xorl	%eax, %eax
    00000606: 	jmp	.Ltmp175 # Offset: 1542
.Ltmp154:
    0000060b: 	xorl	%r11d, %r11d
    0000060e: 	xorl	%ecx, %ecx
    00000610: 	xorl	%ebx, %ebx
    00000612: 	xorl	%edx, %edx
    00000614: 	xorl	%eax, %eax
    00000616: 	jmp	.Ltmp176 # Offset: 1558
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5IaEmPT_iS0_"

Binary Function "_Z6count6IaEmPT_iS0_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x4f80
  Size        : 0x593
  MaxSize     : 0x5a0
  Offset      : 0x4f80
  Section     : .text
  Orc Section : .local.text._Z6count6IaEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r10d
    00000008: 	pushq	%r12
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %r9d
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	testl	%r10d, %r10d
    00000015: 	jle	.Ltmp177 # Offset: 21
    0000001b: 	leal	-0x4(%rsi), %eax
    0000001e: 	movl	%eax, %esi
    00000020: 	shrl	$0x2, %esi
    00000023: 	addl	$0x1, %esi
    00000026: 	cmpl	$0xb, %eax
    00000029: 	jbe	.Ltmp178 # Offset: 41
    0000002f: 	movd	%edx, %xmm0
    00000033: 	movl	%esi, %edx
    00000035: 	pxor	%xmm8, %xmm8
    0000003a: 	movq	%rdi, %rax
    0000003d: 	punpcklbw	%xmm0, %xmm0
    00000041: 	shrl	$0x2, %edx
    00000044: 	movdqa	%xmm8, %xmm11
    00000049: 	pxor	%xmm7, %xmm7
    0000004d: 	punpcklwd	%xmm0, %xmm0
    00000051: 	subl	$0x1, %edx
    00000054: 	movdqa	%xmm8, %xmm9
    00000059: 	movdqa	DATAat0x19250(%rip), %xmm14
    00000062: 	pshufd	$0x0, %xmm0, %xmm6
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movdqa	%xmm8, %xmm12
    00000070: 	movdqa	%xmm8, %xmm10
    00000075: 	movaps	%xmm6, -0x10(%rsp)
    0000007a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000007f: 	movdqa	%xmm8, %xmm13
    00000084: 	movdqa	%xmm8, %xmm6
    00000089: 	movdqa	%xmm8, %xmm3
    0000008e: 	pxor	%xmm1, %xmm1
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp179:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	pxor	%xmm4, %xmm4
    000000a0: 	addq	$0x10, %rax
    000000a4: 	pcmpeqb	-0x10(%rsp), %xmm0
    000000aa: 	pand	%xmm14, %xmm0
    000000af: 	movdqa	%xmm0, %xmm2
    000000b3: 	punpckhbw	%xmm4, %xmm0
    000000b7: 	punpcklbw	%xmm4, %xmm2
    000000bb: 	movdqa	%xmm0, %xmm4
    000000bf: 	punpckhwd	%xmm7, %xmm0
    000000c3: 	movdqa	%xmm2, %xmm5
    000000c7: 	punpckhwd	%xmm7, %xmm2
    000000cb: 	punpcklwd	%xmm7, %xmm4
    000000cf: 	punpcklwd	%xmm7, %xmm5
    000000d3: 	movdqa	%xmm5, %xmm15
    000000d8: 	punpckhdq	%xmm1, %xmm5
    000000dc: 	paddq	%xmm5, %xmm6
    000000e0: 	movdqa	%xmm2, %xmm5
    000000e4: 	punpckhdq	%xmm1, %xmm2
    000000e8: 	paddq	%xmm2, %xmm10
    000000ed: 	movdqa	%xmm4, %xmm2
    000000f1: 	punpckldq	%xmm1, %xmm15
    000000f6: 	punpckldq	%xmm1, %xmm2
    000000fa: 	punpckldq	%xmm1, %xmm5
    000000fe: 	punpckhdq	%xmm1, %xmm4
    00000102: 	paddq	%xmm2, %xmm12
    00000107: 	movdqa	%xmm0, %xmm2
    0000010b: 	punpckhdq	%xmm1, %xmm0
    0000010f: 	punpckldq	%xmm1, %xmm2
    00000113: 	paddq	%xmm15, %xmm3
    00000118: 	paddq	%xmm5, %xmm13
    0000011d: 	paddq	%xmm4, %xmm9
    00000122: 	paddq	%xmm2, %xmm11
    00000127: 	paddq	%xmm0, %xmm8
    0000012c: 	cmpq	%rax, %rdx
    0000012f: 	jne	.Ltmp179 # Offset: 303
    00000135: 	movq	%xmm3, %rax
    0000013a: 	movq	%xmm13, %rdx
    0000013f: 	psrldq	$0x8, %xmm3
    00000144: 	movl	%esi, %ebp
    00000146: 	addq	%rdx, %rax
    00000149: 	movq	%xmm12, %rdx
    0000014e: 	movq	%xmm6, %rbx
    00000153: 	andl	$-0x4, %ebp
    00000156: 	addq	%rdx, %rax
    00000159: 	movq	%xmm11, %rdx
    0000015e: 	psrldq	$0x8, %xmm6
    00000163: 	addq	%rdx, %rax
    00000166: 	movq	%xmm3, %rdx
    0000016b: 	movhlps	%xmm13, %xmm3
    0000016f: 	movq	%xmm3, %rcx
    00000174: 	movhlps	%xmm12, %xmm3
    00000178: 	addq	%rcx, %rdx
    0000017b: 	movq	%xmm3, %rcx
    00000180: 	movhlps	%xmm11, %xmm3
    00000184: 	addq	%rcx, %rdx
    00000187: 	movq	%xmm3, %rcx
    0000018c: 	addq	%rcx, %rdx
    0000018f: 	movq	%xmm10, %rcx
    00000194: 	addq	%rcx, %rbx
    00000197: 	movq	%xmm9, %rcx
    0000019c: 	addq	%rcx, %rbx
    0000019f: 	movq	%xmm8, %rcx
    000001a4: 	addq	%rcx, %rbx
    000001a7: 	movq	%xmm6, %rcx
    000001ac: 	movhlps	%xmm10, %xmm6
    000001b0: 	movq	%xmm6, %r11
    000001b5: 	movhlps	%xmm9, %xmm6
    000001b9: 	addq	%r11, %rcx
    000001bc: 	movq	%xmm6, %r11
    000001c1: 	movhlps	%xmm8, %xmm6
    000001c5: 	addq	%r11, %rcx
    000001c8: 	movq	%xmm6, %r11
    000001cd: 	addq	%r11, %rcx
    000001d0: 	leal	(,%rbp,4), %r11d
    000001d8: 	cmpl	%ebp, %esi
    000001da: 	je	.Ltmp180 # Offset: 474
.Ltmp186:
    000001e0: 	movslq	%r11d, %rbp
    000001e3: 	xorl	%r12d, %r12d
    000001e6: 	cmpb	%r9b, (%rdi,%rbp)
    000001ea: 	sete	%r12b
    000001ee: 	addq	%r12, %rax
    000001f1: 	xorl	%r12d, %r12d
    000001f4: 	cmpb	%r9b, 0x1(%rdi,%rbp)
    000001f9: 	sete	%r12b
    000001fd: 	addq	%r12, %rdx
    00000200: 	xorl	%r12d, %r12d
    00000203: 	cmpb	%r9b, 0x2(%rdi,%rbp)
    00000208: 	sete	%r12b
    0000020c: 	addq	%r12, %rbx
    0000020f: 	cmpb	%r9b, 0x3(%rdi,%rbp)
    00000214: 	sete	%bpl
    00000218: 	movzbl	%bpl, %ebp
    0000021c: 	addq	%rbp, %rcx
    0000021f: 	leal	0x4(%r11), %ebp
    00000223: 	cmpl	%ebp, %r10d
    00000226: 	jle	.Ltmp180 # Offset: 550
    0000022c: 	movslq	%ebp, %rbp
    0000022f: 	xorl	%r12d, %r12d
    00000232: 	cmpb	%r9b, (%rdi,%rbp)
    00000236: 	sete	%r12b
    0000023a: 	addq	%r12, %rax
    0000023d: 	xorl	%r12d, %r12d
    00000240: 	cmpb	%r9b, 0x1(%rdi,%rbp)
    00000245: 	sete	%r12b
    00000249: 	addq	%r12, %rdx
    0000024c: 	xorl	%r12d, %r12d
    0000024f: 	cmpb	%r9b, 0x2(%rdi,%rbp)
    00000254: 	sete	%r12b
    00000258: 	addq	%r12, %rbx
    0000025b: 	cmpb	%r9b, 0x3(%rdi,%rbp)
    00000260: 	sete	%bpl
    00000264: 	addl	$0x8, %r11d
    00000268: 	movzbl	%bpl, %ebp
    0000026c: 	addq	%rbp, %rcx
    0000026f: 	cmpl	%r11d, %r10d
    00000272: 	jle	.Ltmp180 # Offset: 626
    00000274: 	movslq	%r11d, %r11
    00000277: 	xorl	%r10d, %r10d
    0000027a: 	cmpb	%r9b, (%rdi,%r11)
    0000027e: 	sete	%r10b
    00000282: 	addq	%r10, %rax
    00000285: 	xorl	%r10d, %r10d
    00000288: 	cmpb	%r9b, 0x1(%rdi,%r11)
    0000028d: 	sete	%r10b
    00000291: 	addq	%r10, %rdx
    00000294: 	xorl	%r10d, %r10d
    00000297: 	cmpb	%r9b, 0x2(%rdi,%r11)
    0000029c: 	sete	%r10b
    000002a0: 	addq	%r10, %rbx
    000002a3: 	xorl	%r10d, %r10d
    000002a6: 	cmpb	%r9b, 0x3(%rdi,%r11)
    000002ab: 	sete	%r10b
    000002af: 	addq	%r10, %rcx
.Ltmp180:
    000002b2: 	addq	%rbx, %rdx
    000002b5: 	shll	$0x2, %esi
    000002b8: 	addq	%rcx, %rdx
.Ltmp185:
    000002bb: 	cmpl	%esi, %r8d
    000002be: 	jle	.Ltmp181 # Offset: 702
    000002c4: 	movl	%r8d, %ebx
    000002c7: 	subl	%esi, %ebx
    000002c9: 	leal	-0x1(%rbx), %ecx
    000002cc: 	cmpl	$0xe, %ecx
    000002cf: 	jbe	.Ltmp182 # Offset: 719
    000002d5: 	movl	%ebx, %ecx
    000002d7: 	movd	%r9d, %xmm5
    000002dc: 	pxor	%xmm2, %xmm2
    000002e0: 	movslq	%esi, %r10
    000002e3: 	shrl	$0x4, %ecx
    000002e6: 	punpcklbw	%xmm5, %xmm5
    000002ea: 	pxor	%xmm6, %xmm6
    000002ee: 	addq	%rdi, %r10
    000002f1: 	leal	-0x1(%rcx), %r11d
    000002f5: 	punpcklwd	%xmm5, %xmm5
    000002f9: 	leaq	0x10(%r10), %rcx
    000002fd: 	movdqa	DATAat0x19250(%rip), %xmm14
    00000306: 	shlq	$0x4, %r11
    0000030a: 	pshufd	$0x0, %xmm5, %xmm5
    0000030f: 	pxor	%xmm4, %xmm4
    00000313: 	addq	%rcx, %r11
    00000316: 	pxor	%xmm3, %xmm3
    0000031a: 	jmp	.Ltmp183 # Offset: 794
    0000031c: 	nopl	(%rax) # Size: 4
.Ltmp184:
    00000320: 	addq	$0x10, %rcx
.Ltmp183:
    00000324: 	movdqu	(%r10), %xmm0
    00000329: 	movq	%rcx, %r10
    0000032c: 	pcmpeqb	%xmm5, %xmm0
    00000330: 	pand	%xmm14, %xmm0
    00000335: 	movdqa	%xmm0, %xmm1
    00000339: 	punpckhbw	%xmm6, %xmm0
    0000033d: 	punpcklbw	%xmm6, %xmm1
    00000341: 	movdqa	%xmm0, %xmm7
    00000345: 	punpckhwd	%xmm4, %xmm0
    00000349: 	movdqa	%xmm1, %xmm8
    0000034e: 	punpckhwd	%xmm4, %xmm1
    00000352: 	punpcklwd	%xmm4, %xmm7
    00000356: 	movdqa	%xmm1, %xmm9
    0000035b: 	punpcklwd	%xmm4, %xmm8
    00000360: 	punpckldq	%xmm3, %xmm1
    00000364: 	punpckhdq	%xmm3, %xmm9
    00000369: 	paddq	%xmm9, %xmm1
    0000036e: 	movdqa	%xmm8, %xmm9
    00000373: 	punpckldq	%xmm3, %xmm8
    00000378: 	punpckhdq	%xmm3, %xmm9
    0000037d: 	paddq	%xmm9, %xmm8
    00000382: 	paddq	%xmm8, %xmm1
    00000387: 	movdqa	%xmm7, %xmm8
    0000038c: 	punpckldq	%xmm3, %xmm7
    00000390: 	punpckhdq	%xmm3, %xmm8
    00000395: 	paddq	%xmm8, %xmm7
    0000039a: 	movdqa	%xmm0, %xmm8
    0000039f: 	punpckhdq	%xmm3, %xmm0
    000003a3: 	punpckldq	%xmm3, %xmm8
    000003a8: 	paddq	%xmm2, %xmm0
    000003ac: 	paddq	%xmm8, %xmm7
    000003b1: 	paddq	%xmm7, %xmm1
    000003b5: 	movdqa	%xmm1, %xmm2
    000003b9: 	paddq	%xmm0, %xmm2
    000003bd: 	cmpq	%rcx, %r11
    000003c0: 	jne	.Ltmp184 # Offset: 960
    000003c6: 	movdqa	%xmm2, %xmm0
    000003ca: 	psrldq	$0x8, %xmm0
    000003cf: 	paddq	%xmm0, %xmm2
    000003d3: 	movq	%xmm2, %rcx
    000003d8: 	addq	%rcx, %rax
    000003db: 	movl	%ebx, %ecx
    000003dd: 	andl	$-0x10, %ecx
    000003e0: 	addl	%ecx, %esi
    000003e2: 	cmpl	%ebx, %ecx
    000003e4: 	je	.Ltmp181 # Offset: 996
.Ltmp182:
    000003ea: 	movslq	%esi, %rcx
    000003ed: 	cmpb	%r9b, (%rdi,%rcx)
    000003f1: 	sete	%cl
    000003f4: 	movzbl	%cl, %ecx
    000003f7: 	addq	%rcx, %rax
    000003fa: 	leal	0x1(%rsi), %ecx
    000003fd: 	cmpl	%r8d, %ecx
    00000400: 	jge	.Ltmp181 # Offset: 1024
    00000406: 	movslq	%ecx, %rcx
    00000409: 	cmpb	%r9b, (%rdi,%rcx)
    0000040d: 	sete	%cl
    00000410: 	movzbl	%cl, %ecx
    00000413: 	addq	%rcx, %rax
    00000416: 	leal	0x2(%rsi), %ecx
    00000419: 	cmpl	%r8d, %ecx
    0000041c: 	jge	.Ltmp181 # Offset: 1052
    00000422: 	movslq	%ecx, %rcx
    00000425: 	cmpb	%r9b, (%rdi,%rcx)
    00000429: 	sete	%cl
    0000042c: 	movzbl	%cl, %ecx
    0000042f: 	addq	%rcx, %rax
    00000432: 	leal	0x3(%rsi), %ecx
    00000435: 	cmpl	%ecx, %r8d
    00000438: 	jle	.Ltmp181 # Offset: 1080
    0000043e: 	movslq	%ecx, %rcx
    00000441: 	cmpb	%r9b, (%rdi,%rcx)
    00000445: 	sete	%cl
    00000448: 	movzbl	%cl, %ecx
    0000044b: 	addq	%rcx, %rax
    0000044e: 	leal	0x4(%rsi), %ecx
    00000451: 	cmpl	%ecx, %r8d
    00000454: 	jle	.Ltmp181 # Offset: 1108
    0000045a: 	movslq	%ecx, %rcx
    0000045d: 	cmpb	%r9b, (%rdi,%rcx)
    00000461: 	sete	%cl
    00000464: 	movzbl	%cl, %ecx
    00000467: 	addq	%rcx, %rax
    0000046a: 	leal	0x5(%rsi), %ecx
    0000046d: 	cmpl	%ecx, %r8d
    00000470: 	jle	.Ltmp181 # Offset: 1136
    00000476: 	movslq	%ecx, %rcx
    00000479: 	cmpb	%r9b, (%rdi,%rcx)
    0000047d: 	sete	%cl
    00000480: 	movzbl	%cl, %ecx
    00000483: 	addq	%rcx, %rax
    00000486: 	leal	0x6(%rsi), %ecx
    00000489: 	cmpl	%ecx, %r8d
    0000048c: 	jle	.Ltmp181 # Offset: 1164
    00000492: 	movslq	%ecx, %rcx
    00000495: 	cmpb	%r9b, (%rdi,%rcx)
    00000499: 	sete	%cl
    0000049c: 	movzbl	%cl, %ecx
    0000049f: 	addq	%rcx, %rax
    000004a2: 	leal	0x7(%rsi), %ecx
    000004a5: 	cmpl	%ecx, %r8d
    000004a8: 	jle	.Ltmp181 # Offset: 1192
    000004ae: 	movslq	%ecx, %rcx
    000004b1: 	cmpb	%r9b, (%rdi,%rcx)
    000004b5: 	sete	%cl
    000004b8: 	movzbl	%cl, %ecx
    000004bb: 	addq	%rcx, %rax
    000004be: 	leal	0x8(%rsi), %ecx
    000004c1: 	cmpl	%ecx, %r8d
    000004c4: 	jle	.Ltmp181 # Offset: 1220
    000004ca: 	movslq	%ecx, %rcx
    000004cd: 	cmpb	%r9b, (%rdi,%rcx)
    000004d1: 	sete	%cl
    000004d4: 	movzbl	%cl, %ecx
    000004d7: 	addq	%rcx, %rax
    000004da: 	leal	0x9(%rsi), %ecx
    000004dd: 	cmpl	%ecx, %r8d
    000004e0: 	jle	.Ltmp181 # Offset: 1248
    000004e6: 	movslq	%ecx, %rcx
    000004e9: 	cmpb	%r9b, (%rdi,%rcx)
    000004ed: 	sete	%cl
    000004f0: 	movzbl	%cl, %ecx
    000004f3: 	addq	%rcx, %rax
    000004f6: 	leal	0xa(%rsi), %ecx
    000004f9: 	cmpl	%ecx, %r8d
    000004fc: 	jle	.Ltmp181 # Offset: 1276
    000004fe: 	movslq	%ecx, %rcx
    00000501: 	cmpb	%r9b, (%rdi,%rcx)
    00000505: 	sete	%cl
    00000508: 	movzbl	%cl, %ecx
    0000050b: 	addq	%rcx, %rax
    0000050e: 	leal	0xb(%rsi), %ecx
    00000511: 	cmpl	%ecx, %r8d
    00000514: 	jle	.Ltmp181 # Offset: 1300
    00000516: 	movslq	%ecx, %rcx
    00000519: 	cmpb	%r9b, (%rdi,%rcx)
    0000051d: 	sete	%cl
    00000520: 	movzbl	%cl, %ecx
    00000523: 	addq	%rcx, %rax
    00000526: 	leal	0xc(%rsi), %ecx
    00000529: 	cmpl	%ecx, %r8d
    0000052c: 	jle	.Ltmp181 # Offset: 1324
    0000052e: 	movslq	%ecx, %rcx
    00000531: 	cmpb	%r9b, (%rdi,%rcx)
    00000535: 	sete	%cl
    00000538: 	movzbl	%cl, %ecx
    0000053b: 	addq	%rcx, %rax
    0000053e: 	leal	0xd(%rsi), %ecx
    00000541: 	cmpl	%ecx, %r8d
    00000544: 	jle	.Ltmp181 # Offset: 1348
    00000546: 	movslq	%ecx, %rcx
    00000549: 	cmpb	%r9b, (%rdi,%rcx)
    0000054d: 	sete	%cl
    00000550: 	addl	$0xe, %esi
    00000553: 	movzbl	%cl, %ecx
    00000556: 	addq	%rcx, %rax
    00000559: 	cmpl	%esi, %r8d
    0000055c: 	jle	.Ltmp181 # Offset: 1372
    0000055e: 	movslq	%esi, %rsi
    00000561: 	xorl	%ecx, %ecx
    00000563: 	cmpb	%r9b, (%rdi,%rsi)
    00000567: 	sete	%cl
    0000056a: 	addq	%rcx, %rax
.Ltmp181:
    0000056d: 	popq	%rbx
    0000056e: 	addq	%rdx, %rax
    00000571: 	popq	%rbp
    00000572: 	popq	%r12
    00000574: 	retq # Offset: 1396
    00000575: 	nopl	(%rax) # Size: 3
.Ltmp177:
    00000578: 	xorl	%edx, %edx
    0000057a: 	xorl	%esi, %esi
    0000057c: 	xorl	%eax, %eax
    0000057e: 	jmp	.Ltmp185 # Offset: 1406
.Ltmp178:
    00000583: 	xorl	%r11d, %r11d
    00000586: 	xorl	%ecx, %ecx
    00000588: 	xorl	%ebx, %ebx
    0000058a: 	xorl	%edx, %edx
    0000058c: 	xorl	%eax, %eax
    0000058e: 	jmp	.Ltmp186 # Offset: 1422
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6IaEmPT_iS0_"

Binary Function "_Z6count7IaEmPT_iS0_" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x5520
  Size        : 0x38b
  MaxSize     : 0x390
  Offset      : 0x5520
  Section     : .text
  Orc Section : .local.text._Z6count7IaEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r10
    00000009: 	movl	%esi, %r11d
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%edx, %ebx
    00000010: 	cmpl	$0x7, %esi
    00000013: 	jle	.Ltmp187 # Offset: 19
    00000019: 	leal	-0x8(%rsi), %r12d
    0000001d: 	movl	%edx, %ecx
    0000001f: 	xorl	%r8d, %r8d
    00000022: 	movq	%rdi, %rdx
    00000025: 	shrl	$0x3, %r12d
    00000029: 	xorl	%esi, %esi
    0000002b: 	movl	%r12d, %eax
    0000002e: 	leaq	0x8(%rdi,%rax,8), %rbp
    00000033: 	xorl	%edi, %edi
    00000035: 	xorl	%eax, %eax
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp188:
    00000040: 	xorl	%r9d, %r9d
    00000043: 	cmpb	%cl, (%rdx)
    00000045: 	sete	%r9b
    00000049: 	addq	%r9, %rax
    0000004c: 	xorl	%r9d, %r9d
    0000004f: 	cmpb	%cl, 0x1(%rdx)
    00000052: 	sete	%r9b
    00000056: 	addq	%r9, %rsi
    00000059: 	xorl	%r9d, %r9d
    0000005c: 	cmpb	0x2(%rdx), %cl
    0000005f: 	sete	%r9b
    00000063: 	addq	%r9, %r8
    00000066: 	xorl	%r9d, %r9d
    00000069: 	cmpb	0x3(%rdx), %cl
    0000006c: 	sete	%r9b
    00000070: 	addq	%r9, %rdi
    00000073: 	xorl	%r9d, %r9d
    00000076: 	cmpb	0x4(%rdx), %cl
    00000079: 	sete	%r9b
    0000007d: 	addq	%r9, %rax
    00000080: 	xorl	%r9d, %r9d
    00000083: 	cmpb	0x5(%rdx), %cl
    00000086: 	sete	%r9b
    0000008a: 	addq	%r9, %rsi
    0000008d: 	xorl	%r9d, %r9d
    00000090: 	cmpb	0x6(%rdx), %cl
    00000093: 	sete	%r9b
    00000097: 	addq	%r9, %r8
    0000009a: 	xorl	%r9d, %r9d
    0000009d: 	cmpb	0x7(%rdx), %cl
    000000a0: 	sete	%r9b
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	addq	%r9, %rdi
    000000ab: 	cmpq	%rbp, %rdx
    000000ae: 	jne	.Ltmp188 # Offset: 174
    000000b0: 	addq	%r8, %rsi
    000000b3: 	leal	0x8(,%r12,8), %ecx
    000000bb: 	addq	%rdi, %rsi
.Ltmp193:
    000000be: 	cmpl	%ecx, %r11d
    000000c1: 	jle	.Ltmp189 # Offset: 193
    000000c7: 	movl	%r11d, %r9d
    000000ca: 	subl	%ecx, %r9d
    000000cd: 	leal	-0x1(%r9), %edx
    000000d1: 	cmpl	$0xe, %edx
    000000d4: 	jbe	.Ltmp190 # Offset: 212
    000000da: 	movl	%r9d, %edx
    000000dd: 	movd	%ebx, %xmm5
    000000e1: 	pxor	%xmm4, %xmm4
    000000e5: 	movslq	%ecx, %rdi
    000000e8: 	shrl	$0x4, %edx
    000000eb: 	punpcklbw	%xmm5, %xmm5
    000000ef: 	pxor	%xmm6, %xmm6
    000000f3: 	addq	%r10, %rdi
    000000f6: 	leal	-0x1(%rdx), %r8d
    000000fa: 	punpcklwd	%xmm5, %xmm5
    000000fe: 	leaq	0x10(%rdi), %rdx
    00000102: 	movdqa	DATAat0x19250(%rip), %xmm7
    0000010a: 	shlq	$0x4, %r8
    0000010e: 	pshufd	$0x0, %xmm5, %xmm5
    00000113: 	pxor	%xmm3, %xmm3
    00000117: 	addq	%rdx, %r8
    0000011a: 	pxor	%xmm2, %xmm2
    0000011e: 	jmp	.Ltmp191 # Offset: 286
.Ltmp192:
    00000120: 	addq	$0x10, %rdx
.Ltmp191:
    00000124: 	movdqu	(%rdi), %xmm0
    00000128: 	movq	%rdx, %rdi
    0000012b: 	pcmpeqb	%xmm5, %xmm0
    0000012f: 	pand	%xmm7, %xmm0
    00000133: 	movdqa	%xmm0, %xmm1
    00000137: 	punpckhbw	%xmm6, %xmm0
    0000013b: 	punpcklbw	%xmm6, %xmm1
    0000013f: 	movdqa	%xmm0, %xmm8
    00000144: 	punpckhwd	%xmm3, %xmm0
    00000148: 	movdqa	%xmm1, %xmm9
    0000014d: 	punpckhwd	%xmm3, %xmm1
    00000151: 	punpcklwd	%xmm3, %xmm8
    00000156: 	movdqa	%xmm1, %xmm10
    0000015b: 	punpcklwd	%xmm3, %xmm9
    00000160: 	punpckhdq	%xmm2, %xmm1
    00000164: 	punpckldq	%xmm2, %xmm10
    00000169: 	paddq	%xmm10, %xmm1
    0000016e: 	movdqa	%xmm9, %xmm10
    00000173: 	punpckhdq	%xmm2, %xmm9
    00000178: 	punpckldq	%xmm2, %xmm10
    0000017d: 	paddq	%xmm10, %xmm9
    00000182: 	paddq	%xmm9, %xmm1
    00000187: 	movdqa	%xmm8, %xmm9
    0000018c: 	punpckhdq	%xmm2, %xmm8
    00000191: 	punpckldq	%xmm2, %xmm9
    00000196: 	paddq	%xmm9, %xmm8
    0000019b: 	movdqa	%xmm0, %xmm9
    000001a0: 	punpckhdq	%xmm2, %xmm0
    000001a4: 	punpckldq	%xmm2, %xmm9
    000001a9: 	paddq	%xmm4, %xmm0
    000001ad: 	paddq	%xmm9, %xmm8
    000001b2: 	paddq	%xmm8, %xmm1
    000001b7: 	movdqa	%xmm1, %xmm4
    000001bb: 	paddq	%xmm0, %xmm4
    000001bf: 	cmpq	%rdx, %r8
    000001c2: 	jne	.Ltmp192 # Offset: 450
    000001c8: 	movdqa	%xmm4, %xmm0
    000001cc: 	psrldq	$0x8, %xmm0
    000001d1: 	paddq	%xmm0, %xmm4
    000001d5: 	movq	%xmm4, %rdx
    000001da: 	addq	%rdx, %rax
    000001dd: 	movl	%r9d, %edx
    000001e0: 	andl	$-0x10, %edx
    000001e3: 	addl	%edx, %ecx
    000001e5: 	cmpl	%edx, %r9d
    000001e8: 	je	.Ltmp189 # Offset: 488
.Ltmp190:
    000001ee: 	movslq	%ecx, %rdx
    000001f1: 	cmpb	%bl, (%r10,%rdx)
    000001f5: 	sete	%dl
    000001f8: 	movzbl	%dl, %edx
    000001fb: 	addq	%rdx, %rax
    000001fe: 	leal	0x1(%rcx), %edx
    00000201: 	cmpl	%edx, %r11d
    00000204: 	jle	.Ltmp189 # Offset: 516
    0000020a: 	movslq	%edx, %rdx
    0000020d: 	cmpb	%bl, (%r10,%rdx)
    00000211: 	sete	%dl
    00000214: 	movzbl	%dl, %edx
    00000217: 	addq	%rdx, %rax
    0000021a: 	leal	0x2(%rcx), %edx
    0000021d: 	cmpl	%edx, %r11d
    00000220: 	jle	.Ltmp189 # Offset: 544
    00000226: 	movslq	%edx, %rdx
    00000229: 	cmpb	%bl, (%r10,%rdx)
    0000022d: 	sete	%dl
    00000230: 	movzbl	%dl, %edx
    00000233: 	addq	%rdx, %rax
    00000236: 	leal	0x3(%rcx), %edx
    00000239: 	cmpl	%edx, %r11d
    0000023c: 	jle	.Ltmp189 # Offset: 572
    00000242: 	movslq	%edx, %rdx
    00000245: 	cmpb	%bl, (%r10,%rdx)
    00000249: 	sete	%dl
    0000024c: 	movzbl	%dl, %edx
    0000024f: 	addq	%rdx, %rax
    00000252: 	leal	0x4(%rcx), %edx
    00000255: 	cmpl	%r11d, %edx
    00000258: 	jge	.Ltmp189 # Offset: 600
    0000025e: 	movslq	%edx, %rdx
    00000261: 	cmpb	%bl, (%r10,%rdx)
    00000265: 	sete	%dl
    00000268: 	movzbl	%dl, %edx
    0000026b: 	addq	%rdx, %rax
    0000026e: 	leal	0x5(%rcx), %edx
    00000271: 	cmpl	%r11d, %edx
    00000274: 	jge	.Ltmp189 # Offset: 628
    0000027a: 	movslq	%edx, %rdx
    0000027d: 	cmpb	%bl, (%r10,%rdx)
    00000281: 	sete	%dl
    00000284: 	movzbl	%dl, %edx
    00000287: 	addq	%rdx, %rax
    0000028a: 	leal	0x6(%rcx), %edx
    0000028d: 	cmpl	%r11d, %edx
    00000290: 	jge	.Ltmp189 # Offset: 656
    00000296: 	movslq	%edx, %rdx
    00000299: 	cmpb	%bl, (%r10,%rdx)
    0000029d: 	sete	%dl
    000002a0: 	movzbl	%dl, %edx
    000002a3: 	addq	%rdx, %rax
    000002a6: 	leal	0x7(%rcx), %edx
    000002a9: 	cmpl	%edx, %r11d
    000002ac: 	jle	.Ltmp189 # Offset: 684
    000002b2: 	movslq	%edx, %rdx
    000002b5: 	cmpb	%bl, (%r10,%rdx)
    000002b9: 	sete	%dl
    000002bc: 	movzbl	%dl, %edx
    000002bf: 	addq	%rdx, %rax
    000002c2: 	leal	0x8(%rcx), %edx
    000002c5: 	cmpl	%r11d, %edx
    000002c8: 	jge	.Ltmp189 # Offset: 712
    000002ce: 	movslq	%edx, %rdx
    000002d1: 	cmpb	%bl, (%r10,%rdx)
    000002d5: 	sete	%dl
    000002d8: 	movzbl	%dl, %edx
    000002db: 	addq	%rdx, %rax
    000002de: 	leal	0x9(%rcx), %edx
    000002e1: 	cmpl	%edx, %r11d
    000002e4: 	jle	.Ltmp189 # Offset: 740
    000002ea: 	movslq	%edx, %rdx
    000002ed: 	cmpb	%bl, (%r10,%rdx)
    000002f1: 	sete	%dl
    000002f4: 	movzbl	%dl, %edx
    000002f7: 	addq	%rdx, %rax
    000002fa: 	leal	0xa(%rcx), %edx
    000002fd: 	cmpl	%edx, %r11d
    00000300: 	jle	.Ltmp189 # Offset: 768
    00000302: 	movslq	%edx, %rdx
    00000305: 	cmpb	%bl, (%r10,%rdx)
    00000309: 	sete	%dl
    0000030c: 	movzbl	%dl, %edx
    0000030f: 	addq	%rdx, %rax
    00000312: 	leal	0xb(%rcx), %edx
    00000315: 	cmpl	%edx, %r11d
    00000318: 	jle	.Ltmp189 # Offset: 792
    0000031a: 	movslq	%edx, %rdx
    0000031d: 	cmpb	%bl, (%r10,%rdx)
    00000321: 	sete	%dl
    00000324: 	movzbl	%dl, %edx
    00000327: 	addq	%rdx, %rax
    0000032a: 	leal	0xc(%rcx), %edx
    0000032d: 	cmpl	%edx, %r11d
    00000330: 	jle	.Ltmp189 # Offset: 816
    00000332: 	movslq	%edx, %rdx
    00000335: 	cmpb	%bl, (%r10,%rdx)
    00000339: 	sete	%dl
    0000033c: 	movzbl	%dl, %edx
    0000033f: 	addq	%rdx, %rax
    00000342: 	leal	0xd(%rcx), %edx
    00000345: 	cmpl	%edx, %r11d
    00000348: 	jle	.Ltmp189 # Offset: 840
    0000034a: 	movslq	%edx, %rdx
    0000034d: 	cmpb	%bl, (%r10,%rdx)
    00000351: 	sete	%dl
    00000354: 	addl	$0xe, %ecx
    00000357: 	movzbl	%dl, %edx
    0000035a: 	addq	%rdx, %rax
    0000035d: 	cmpl	%ecx, %r11d
    00000360: 	jle	.Ltmp189 # Offset: 864
    00000362: 	movslq	%ecx, %rcx
    00000365: 	xorl	%edx, %edx
    00000367: 	cmpb	%bl, (%r10,%rcx)
    0000036b: 	sete	%dl
    0000036e: 	addq	%rdx, %rax
.Ltmp189:
    00000371: 	popq	%rbx
    00000372: 	addq	%rsi, %rax
    00000375: 	popq	%rbp
    00000376: 	popq	%r12
    00000378: 	retq # Offset: 888
    00000379: 	nopl	(%rax) # Size: 7
.Ltmp187:
    00000380: 	xorl	%esi, %esi
    00000382: 	xorl	%ecx, %ecx
    00000384: 	xorl	%eax, %eax
    00000386: 	jmp	.Ltmp193 # Offset: 902
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7IaEmPT_iS0_"

Binary Function "_Z6count8IaEmPT_iS0_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x58b0
  Size        : 0x68c
  MaxSize     : 0x690
  Offset      : 0x58b0
  Section     : .text
  Orc Section : .local.text._Z6count8IaEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	pushq	%r13
    00000009: 	movl	%edx, %esi
    0000000b: 	leal	-0x7(%r8), %r10d
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	testl	%r10d, %r10d
    00000016: 	jle	.Ltmp194 # Offset: 22
    0000001c: 	leal	-0x8(%r8), %eax
    00000020: 	movl	%eax, %r9d
    00000023: 	shrl	$0x3, %r9d
    00000027: 	addl	$0x1, %r9d
    0000002b: 	cmpl	$0x17, %eax
    0000002e: 	jbe	.Ltmp195 # Offset: 46
    00000034: 	movd	%edx, %xmm0
    00000038: 	movl	%r9d, %edx
    0000003b: 	pxor	%xmm8, %xmm8
    00000040: 	movq	%rdi, %rax
    00000043: 	punpcklbw	%xmm0, %xmm0
    00000047: 	shrl	$0x2, %edx
    0000004a: 	movdqa	%xmm8, %xmm11
    0000004f: 	pxor	%xmm7, %xmm7
    00000053: 	punpcklwd	%xmm0, %xmm0
    00000057: 	subl	$0x1, %edx
    0000005a: 	movdqa	%xmm8, %xmm9
    0000005f: 	movdqa	DATAat0x19250(%rip), %xmm14
    00000068: 	pshufd	$0x0, %xmm0, %xmm6
    0000006d: 	shlq	$0x5, %rdx
    00000071: 	movdqa	%xmm8, %xmm12
    00000076: 	movdqa	%xmm8, %xmm10
    0000007b: 	movdqa	%xmm6, %xmm5
    0000007f: 	movaps	%xmm14, -0x18(%rsp)
    00000085: 	leaq	0x20(%rdi,%rdx), %rdx
    0000008a: 	movdqa	%xmm8, %xmm13
    0000008f: 	movdqa	%xmm8, %xmm6
    00000094: 	movdqa	%xmm8, %xmm3
    00000099: 	pxor	%xmm1, %xmm1
    0000009d: 	movdqa	%xmm5, %xmm14
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp196:
    000000a8: 	movdqu	(%rax), %xmm0
    000000ac: 	movdqu	0x10(%rax), %xmm5
    000000b1: 	pxor	%xmm4, %xmm4
    000000b5: 	addq	$0x20, %rax
    000000b9: 	movdqa	%xmm0, %xmm2
    000000bd: 	shufps	$0xdd, %xmm5, %xmm0
    000000c1: 	pcmpeqb	%xmm14, %xmm0
    000000c6: 	pand	-0x18(%rsp), %xmm0
    000000cc: 	shufps	$0x88, %xmm5, %xmm2
    000000d0: 	pcmpeqb	%xmm14, %xmm2
    000000d5: 	psubb	%xmm2, %xmm0
    000000d9: 	movdqa	%xmm0, %xmm2
    000000dd: 	punpckhbw	%xmm4, %xmm0
    000000e1: 	punpcklbw	%xmm4, %xmm2
    000000e5: 	movdqa	%xmm0, %xmm4
    000000e9: 	punpckhwd	%xmm7, %xmm0
    000000ed: 	movdqa	%xmm2, %xmm5
    000000f1: 	punpckhwd	%xmm7, %xmm2
    000000f5: 	punpcklwd	%xmm7, %xmm4
    000000f9: 	punpcklwd	%xmm7, %xmm5
    000000fd: 	movdqa	%xmm5, %xmm15
    00000102: 	punpckhdq	%xmm1, %xmm5
    00000106: 	paddq	%xmm5, %xmm6
    0000010a: 	movdqa	%xmm2, %xmm5
    0000010e: 	punpckhdq	%xmm1, %xmm2
    00000112: 	paddq	%xmm2, %xmm10
    00000117: 	movdqa	%xmm4, %xmm2
    0000011b: 	punpckldq	%xmm1, %xmm15
    00000120: 	punpckldq	%xmm1, %xmm2
    00000124: 	punpckldq	%xmm1, %xmm5
    00000128: 	punpckhdq	%xmm1, %xmm4
    0000012c: 	paddq	%xmm2, %xmm12
    00000131: 	movdqa	%xmm0, %xmm2
    00000135: 	punpckhdq	%xmm1, %xmm0
    00000139: 	punpckldq	%xmm1, %xmm2
    0000013d: 	paddq	%xmm15, %xmm3
    00000142: 	paddq	%xmm5, %xmm13
    00000147: 	paddq	%xmm4, %xmm9
    0000014c: 	paddq	%xmm2, %xmm11
    00000151: 	paddq	%xmm0, %xmm8
    00000156: 	cmpq	%rax, %rdx
    00000159: 	jne	.Ltmp196 # Offset: 345
    0000015f: 	movq	%xmm3, %rax
    00000164: 	movq	%xmm13, %rdx
    00000169: 	psrldq	$0x8, %xmm3
    0000016e: 	movl	%r9d, %ebp
    00000171: 	addq	%rdx, %rax
    00000174: 	movq	%xmm12, %rdx
    00000179: 	movq	%xmm6, %rbx
    0000017e: 	andl	$-0x4, %ebp
    00000181: 	addq	%rdx, %rax
    00000184: 	movq	%xmm11, %rdx
    00000189: 	psrldq	$0x8, %xmm6
    0000018e: 	addq	%rdx, %rax
    00000191: 	movq	%xmm3, %rdx
    00000196: 	movhlps	%xmm13, %xmm3
    0000019a: 	movq	%xmm3, %rcx
    0000019f: 	movhlps	%xmm12, %xmm3
    000001a3: 	addq	%rcx, %rdx
    000001a6: 	movq	%xmm3, %rcx
    000001ab: 	movhlps	%xmm11, %xmm3
    000001af: 	addq	%rcx, %rdx
    000001b2: 	movq	%xmm3, %rcx
    000001b7: 	addq	%rcx, %rdx
    000001ba: 	movq	%xmm10, %rcx
    000001bf: 	addq	%rcx, %rbx
    000001c2: 	movq	%xmm9, %rcx
    000001c7: 	addq	%rcx, %rbx
    000001ca: 	movq	%xmm8, %rcx
    000001cf: 	addq	%rcx, %rbx
    000001d2: 	movq	%xmm6, %rcx
    000001d7: 	movhlps	%xmm10, %xmm6
    000001db: 	movq	%xmm6, %r11
    000001e0: 	movhlps	%xmm9, %xmm6
    000001e4: 	addq	%r11, %rcx
    000001e7: 	movq	%xmm6, %r11
    000001ec: 	movhlps	%xmm8, %xmm6
    000001f0: 	addq	%r11, %rcx
    000001f3: 	movq	%xmm6, %r11
    000001f8: 	addq	%r11, %rcx
    000001fb: 	leal	(,%rbp,8), %r11d
    00000203: 	cmpl	%ebp, %r9d
    00000206: 	je	.Ltmp197 # Offset: 518
.Ltmp203:
    0000020c: 	movslq	%r11d, %rbp
    0000020f: 	xorl	%r12d, %r12d
    00000212: 	cmpb	%sil, (%rdi,%rbp)
    00000216: 	sete	%r12b
    0000021a: 	addq	%rax, %r12
    0000021d: 	xorl	%eax, %eax
    0000021f: 	cmpb	%sil, 0x4(%rdi,%rbp)
    00000224: 	sete	%al
    00000227: 	addq	%r12, %rax
    0000022a: 	xorl	%r12d, %r12d
    0000022d: 	cmpb	%sil, 0x1(%rdi,%rbp)
    00000232: 	sete	%r12b
    00000236: 	xorl	%r13d, %r13d
    00000239: 	cmpb	%sil, 0x5(%rdi,%rbp)
    0000023e: 	sete	%r13b
    00000242: 	addq	%r13, %r12
    00000245: 	addq	%r12, %rdx
    00000248: 	xorl	%r12d, %r12d
    0000024b: 	cmpb	%sil, 0x2(%rdi,%rbp)
    00000250: 	sete	%r12b
    00000254: 	xorl	%r13d, %r13d
    00000257: 	cmpb	%sil, 0x6(%rdi,%rbp)
    0000025c: 	sete	%r13b
    00000260: 	addq	%r13, %r12
    00000263: 	addq	%r12, %rbx
    00000266: 	xorl	%r12d, %r12d
    00000269: 	cmpb	%sil, 0x3(%rdi,%rbp)
    0000026e: 	sete	%r12b
    00000272: 	cmpb	%sil, 0x7(%rdi,%rbp)
    00000277: 	sete	%bpl
    0000027b: 	movzbl	%bpl, %ebp
    0000027f: 	addq	%r12, %rbp
    00000282: 	addq	%rbp, %rcx
    00000285: 	leal	0x8(%r11), %ebp
    00000289: 	cmpl	%ebp, %r10d
    0000028c: 	jle	.Ltmp197 # Offset: 652
    00000292: 	movslq	%ebp, %rbp
    00000295: 	xorl	%r12d, %r12d
    00000298: 	cmpb	%sil, 0x4(%rdi,%rbp)
    0000029d: 	sete	%r12b
    000002a1: 	xorl	%r13d, %r13d
    000002a4: 	cmpb	%sil, (%rdi,%rbp)
    000002a8: 	sete	%r13b
    000002ac: 	addq	%r13, %r12
    000002af: 	addq	%r12, %rax
    000002b2: 	xorl	%r12d, %r12d
    000002b5: 	cmpb	%sil, 0x1(%rdi,%rbp)
    000002ba: 	sete	%r12b
    000002be: 	xorl	%r13d, %r13d
    000002c1: 	cmpb	%sil, 0x5(%rdi,%rbp)
    000002c6: 	sete	%r13b
    000002ca: 	addq	%r13, %r12
    000002cd: 	addq	%r12, %rdx
    000002d0: 	xorl	%r12d, %r12d
    000002d3: 	cmpb	%sil, 0x2(%rdi,%rbp)
    000002d8: 	sete	%r12b
    000002dc: 	xorl	%r13d, %r13d
    000002df: 	cmpb	%sil, 0x6(%rdi,%rbp)
    000002e4: 	sete	%r13b
    000002e8: 	addq	%r13, %r12
    000002eb: 	addq	%r12, %rbx
    000002ee: 	xorl	%r12d, %r12d
    000002f1: 	cmpb	%sil, 0x3(%rdi,%rbp)
    000002f6: 	sete	%r12b
    000002fa: 	cmpb	%sil, 0x7(%rdi,%rbp)
    000002ff: 	sete	%bpl
    00000303: 	addl	$0x10, %r11d
    00000307: 	movzbl	%bpl, %ebp
    0000030b: 	addq	%r12, %rbp
    0000030e: 	addq	%rbp, %rcx
    00000311: 	cmpl	%r11d, %r10d
    00000314: 	jle	.Ltmp197 # Offset: 788
    00000316: 	movslq	%r11d, %r10
    00000319: 	xorl	%r11d, %r11d
    0000031c: 	cmpb	%sil, 0x4(%rdi,%r10)
    00000321: 	sete	%r11b
    00000325: 	xorl	%ebp, %ebp
    00000327: 	cmpb	%sil, (%rdi,%r10)
    0000032b: 	sete	%bpl
    0000032f: 	addq	%rbp, %r11
    00000332: 	addq	%r11, %rax
    00000335: 	xorl	%r11d, %r11d
    00000338: 	cmpb	%sil, 0x1(%rdi,%r10)
    0000033d: 	sete	%r11b
    00000341: 	xorl	%ebp, %ebp
    00000343: 	cmpb	%sil, 0x5(%rdi,%r10)
    00000348: 	sete	%bpl
    0000034c: 	addq	%rbp, %r11
    0000034f: 	addq	%r11, %rdx
    00000352: 	xorl	%r11d, %r11d
    00000355: 	cmpb	%sil, 0x2(%rdi,%r10)
    0000035a: 	sete	%r11b
    0000035e: 	xorl	%ebp, %ebp
    00000360: 	cmpb	%sil, 0x6(%rdi,%r10)
    00000365: 	sete	%bpl
    00000369: 	addq	%rbp, %r11
    0000036c: 	addq	%r11, %rbx
    0000036f: 	xorl	%r11d, %r11d
    00000372: 	cmpb	%sil, 0x3(%rdi,%r10)
    00000377: 	sete	%r11b
    0000037b: 	cmpb	%sil, 0x7(%rdi,%r10)
    00000380: 	sete	%r10b
    00000384: 	movzbl	%r10b, %r10d
    00000388: 	addq	%r11, %r10
    0000038b: 	addq	%r10, %rcx
.Ltmp197:
    0000038e: 	addq	%rbx, %rdx
    00000391: 	shll	$0x3, %r9d
    00000395: 	addq	%rcx, %rdx
.Ltmp202:
    00000398: 	cmpl	%r9d, %r8d
    0000039b: 	jle	.Ltmp198 # Offset: 923
    000003a1: 	movl	%r8d, %ebx
    000003a4: 	subl	%r9d, %ebx
    000003a7: 	leal	-0x1(%rbx), %ecx
    000003aa: 	cmpl	$0xe, %ecx
    000003ad: 	jbe	.Ltmp199 # Offset: 941
    000003b3: 	movl	%ebx, %ecx
    000003b5: 	movd	%esi, %xmm5
    000003b9: 	pxor	%xmm2, %xmm2
    000003bd: 	movslq	%r9d, %r10
    000003c0: 	shrl	$0x4, %ecx
    000003c3: 	punpcklbw	%xmm5, %xmm5
    000003c7: 	pxor	%xmm6, %xmm6
    000003cb: 	addq	%rdi, %r10
    000003ce: 	leal	-0x1(%rcx), %r11d
    000003d2: 	punpcklwd	%xmm5, %xmm5
    000003d6: 	leaq	0x10(%r10), %rcx
    000003da: 	movdqa	DATAat0x19250(%rip), %xmm14
    000003e3: 	shlq	$0x4, %r11
    000003e7: 	pshufd	$0x0, %xmm5, %xmm5
    000003ec: 	pxor	%xmm4, %xmm4
    000003f0: 	addq	%rcx, %r11
    000003f3: 	pxor	%xmm3, %xmm3
    000003f7: 	jmp	.Ltmp200 # Offset: 1015
    000003f9: 	nopl	(%rax) # Size: 7
.Ltmp201:
    00000400: 	addq	$0x10, %rcx
.Ltmp200:
    00000404: 	movdqu	(%r10), %xmm0
    00000409: 	movq	%rcx, %r10
    0000040c: 	pcmpeqb	%xmm5, %xmm0
    00000410: 	pand	%xmm14, %xmm0
    00000415: 	movdqa	%xmm0, %xmm1
    00000419: 	punpckhbw	%xmm6, %xmm0
    0000041d: 	punpcklbw	%xmm6, %xmm1
    00000421: 	movdqa	%xmm0, %xmm7
    00000425: 	punpckhwd	%xmm4, %xmm0
    00000429: 	movdqa	%xmm1, %xmm8
    0000042e: 	punpckhwd	%xmm4, %xmm1
    00000432: 	punpcklwd	%xmm4, %xmm7
    00000436: 	movdqa	%xmm1, %xmm9
    0000043b: 	punpcklwd	%xmm4, %xmm8
    00000440: 	punpckldq	%xmm3, %xmm1
    00000444: 	punpckhdq	%xmm3, %xmm9
    00000449: 	paddq	%xmm9, %xmm1
    0000044e: 	movdqa	%xmm8, %xmm9
    00000453: 	punpckldq	%xmm3, %xmm8
    00000458: 	punpckhdq	%xmm3, %xmm9
    0000045d: 	paddq	%xmm9, %xmm8
    00000462: 	paddq	%xmm8, %xmm1
    00000467: 	movdqa	%xmm7, %xmm8
    0000046c: 	punpckldq	%xmm3, %xmm7
    00000470: 	punpckhdq	%xmm3, %xmm8
    00000475: 	paddq	%xmm8, %xmm7
    0000047a: 	movdqa	%xmm0, %xmm8
    0000047f: 	punpckhdq	%xmm3, %xmm0
    00000483: 	punpckldq	%xmm3, %xmm8
    00000488: 	paddq	%xmm2, %xmm0
    0000048c: 	paddq	%xmm8, %xmm7
    00000491: 	paddq	%xmm7, %xmm1
    00000495: 	paddq	%xmm0, %xmm1
    00000499: 	movdqa	%xmm1, %xmm2
    0000049d: 	cmpq	%r11, %rcx
    000004a0: 	jne	.Ltmp201 # Offset: 1184
    000004a6: 	movdqa	%xmm1, %xmm0
    000004aa: 	psrldq	$0x8, %xmm0
    000004af: 	paddq	%xmm0, %xmm2
    000004b3: 	movq	%xmm2, %rcx
    000004b8: 	addq	%rcx, %rax
    000004bb: 	movl	%ebx, %ecx
    000004bd: 	andl	$-0x10, %ecx
    000004c0: 	addl	%ecx, %r9d
    000004c3: 	cmpl	%ebx, %ecx
    000004c5: 	je	.Ltmp198 # Offset: 1221
.Ltmp199:
    000004cb: 	movslq	%r9d, %rcx
    000004ce: 	cmpb	%sil, (%rdi,%rcx)
    000004d2: 	sete	%cl
    000004d5: 	movzbl	%cl, %ecx
    000004d8: 	addq	%rcx, %rax
    000004db: 	leal	0x1(%r9), %ecx
    000004df: 	cmpl	%r8d, %ecx
    000004e2: 	jge	.Ltmp198 # Offset: 1250
    000004e8: 	movslq	%ecx, %rcx
    000004eb: 	cmpb	%sil, (%rdi,%rcx)
    000004ef: 	sete	%cl
    000004f2: 	movzbl	%cl, %ecx
    000004f5: 	addq	%rcx, %rax
    000004f8: 	leal	0x2(%r9), %ecx
    000004fc: 	cmpl	%r8d, %ecx
    000004ff: 	jge	.Ltmp198 # Offset: 1279
    00000505: 	movslq	%ecx, %rcx
    00000508: 	cmpb	%sil, (%rdi,%rcx)
    0000050c: 	sete	%cl
    0000050f: 	movzbl	%cl, %ecx
    00000512: 	addq	%rcx, %rax
    00000515: 	leal	0x3(%r9), %ecx
    00000519: 	cmpl	%r8d, %ecx
    0000051c: 	jge	.Ltmp198 # Offset: 1308
    00000522: 	movslq	%ecx, %rcx
    00000525: 	cmpb	%sil, (%rdi,%rcx)
    00000529: 	sete	%cl
    0000052c: 	movzbl	%cl, %ecx
    0000052f: 	addq	%rcx, %rax
    00000532: 	leal	0x4(%r9), %ecx
    00000536: 	cmpl	%r8d, %ecx
    00000539: 	jge	.Ltmp198 # Offset: 1337
    0000053f: 	movslq	%ecx, %rcx
    00000542: 	cmpb	%sil, (%rdi,%rcx)
    00000546: 	sete	%cl
    00000549: 	movzbl	%cl, %ecx
    0000054c: 	addq	%rcx, %rax
    0000054f: 	leal	0x5(%r9), %ecx
    00000553: 	cmpl	%r8d, %ecx
    00000556: 	jge	.Ltmp198 # Offset: 1366
    0000055c: 	movslq	%ecx, %rcx
    0000055f: 	cmpb	%sil, (%rdi,%rcx)
    00000563: 	sete	%cl
    00000566: 	movzbl	%cl, %ecx
    00000569: 	addq	%rcx, %rax
    0000056c: 	leal	0x6(%r9), %ecx
    00000570: 	cmpl	%r8d, %ecx
    00000573: 	jge	.Ltmp198 # Offset: 1395
    00000579: 	movslq	%ecx, %rcx
    0000057c: 	cmpb	%sil, (%rdi,%rcx)
    00000580: 	sete	%cl
    00000583: 	movzbl	%cl, %ecx
    00000586: 	addq	%rcx, %rax
    00000589: 	leal	0x7(%r9), %ecx
    0000058d: 	cmpl	%r8d, %ecx
    00000590: 	jge	.Ltmp198 # Offset: 1424
    00000596: 	movslq	%ecx, %rcx
    00000599: 	cmpb	%sil, (%rdi,%rcx)
    0000059d: 	sete	%cl
    000005a0: 	movzbl	%cl, %ecx
    000005a3: 	addq	%rcx, %rax
    000005a6: 	leal	0x8(%r9), %ecx
    000005aa: 	cmpl	%ecx, %r8d
    000005ad: 	jle	.Ltmp198 # Offset: 1453
    000005b3: 	movslq	%ecx, %rcx
    000005b6: 	cmpb	%sil, (%rdi,%rcx)
    000005ba: 	sete	%cl
    000005bd: 	movzbl	%cl, %ecx
    000005c0: 	addq	%rcx, %rax
    000005c3: 	leal	0x9(%r9), %ecx
    000005c7: 	cmpl	%ecx, %r8d
    000005ca: 	jle	.Ltmp198 # Offset: 1482
    000005d0: 	movslq	%ecx, %rcx
    000005d3: 	cmpb	%sil, (%rdi,%rcx)
    000005d7: 	sete	%cl
    000005da: 	movzbl	%cl, %ecx
    000005dd: 	addq	%rcx, %rax
    000005e0: 	leal	0xa(%r9), %ecx
    000005e4: 	cmpl	%ecx, %r8d
    000005e7: 	jle	.Ltmp198 # Offset: 1511
    000005e9: 	movslq	%ecx, %rcx
    000005ec: 	cmpb	%sil, (%rdi,%rcx)
    000005f0: 	sete	%cl
    000005f3: 	movzbl	%cl, %ecx
    000005f6: 	addq	%rcx, %rax
    000005f9: 	leal	0xb(%r9), %ecx
    000005fd: 	cmpl	%ecx, %r8d
    00000600: 	jle	.Ltmp198 # Offset: 1536
    00000602: 	movslq	%ecx, %rcx
    00000605: 	cmpb	%sil, (%rdi,%rcx)
    00000609: 	sete	%cl
    0000060c: 	movzbl	%cl, %ecx
    0000060f: 	addq	%rcx, %rax
    00000612: 	leal	0xc(%r9), %ecx
    00000616: 	cmpl	%ecx, %r8d
    00000619: 	jle	.Ltmp198 # Offset: 1561
    0000061b: 	movslq	%ecx, %rcx
    0000061e: 	cmpb	%sil, (%rdi,%rcx)
    00000622: 	sete	%cl
    00000625: 	movzbl	%cl, %ecx
    00000628: 	addq	%rcx, %rax
    0000062b: 	leal	0xd(%r9), %ecx
    0000062f: 	cmpl	%ecx, %r8d
    00000632: 	jle	.Ltmp198 # Offset: 1586
    00000634: 	movslq	%ecx, %rcx
    00000637: 	cmpb	%sil, (%rdi,%rcx)
    0000063b: 	sete	%cl
    0000063e: 	addl	$0xe, %r9d
    00000642: 	movzbl	%cl, %ecx
    00000645: 	addq	%rcx, %rax
    00000648: 	cmpl	%r8d, %r9d
    0000064b: 	jge	.Ltmp198 # Offset: 1611
    0000064d: 	movslq	%r9d, %r9
    00000650: 	xorl	%ecx, %ecx
    00000652: 	cmpb	%sil, (%rdi,%r9)
    00000656: 	sete	%cl
    00000659: 	addq	%rcx, %rax
.Ltmp198:
    0000065c: 	popq	%rbx
    0000065d: 	addq	%rdx, %rax
    00000660: 	popq	%rbp
    00000661: 	popq	%r12
    00000663: 	popq	%r13
    00000665: 	retq # Offset: 1637
    00000666: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp194:
    00000670: 	xorl	%edx, %edx
    00000672: 	xorl	%r9d, %r9d
    00000675: 	xorl	%eax, %eax
    00000677: 	jmp	.Ltmp202 # Offset: 1655
.Ltmp195:
    0000067c: 	xorl	%r11d, %r11d
    0000067f: 	xorl	%ecx, %ecx
    00000681: 	xorl	%ebx, %ebx
    00000683: 	xorl	%edx, %edx
    00000685: 	xorl	%eax, %eax
    00000687: 	jmp	.Ltmp203 # Offset: 1671
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8IaEmPT_iS0_"

Binary Function "_Z6count1ItEmPT_iS0_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x5f40
  Size        : 0x18a
  MaxSize     : 0x190
  Offset      : 0x5f40
  Section     : .text
  Orc Section : .local.text._Z6count1ItEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp204 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x6, %eax
    00000014: 	jbe	.Ltmp205 # Offset: 20
    0000001a: 	shrl	$0x3, %esi
    0000001d: 	movd	%edx, %xmm5
    00000021: 	pxor	%xmm3, %xmm3
    00000025: 	movq	%rdi, %rax
    00000028: 	punpcklwd	%xmm5, %xmm5
    0000002c: 	pxor	%xmm4, %xmm4
    00000030: 	pxor	%xmm2, %xmm2
    00000034: 	subl	$0x1, %esi
    00000037: 	shlq	$0x4, %rsi
    0000003b: 	movdqa	DATAat0x19260(%rip), %xmm7
    00000043: 	pshufd	$0x0, %xmm5, %xmm5
    00000048: 	leaq	0x10(%rdi,%rsi), %rsi
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp206:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	addq	$0x10, %rax
    00000058: 	pcmpeqw	%xmm5, %xmm0
    0000005c: 	pand	%xmm7, %xmm0
    00000060: 	movdqa	%xmm0, %xmm1
    00000064: 	punpckhwd	%xmm4, %xmm0
    00000068: 	movdqa	%xmm0, %xmm6
    0000006c: 	punpcklwd	%xmm4, %xmm1
    00000070: 	punpckhdq	%xmm2, %xmm0
    00000074: 	punpckldq	%xmm2, %xmm6
    00000078: 	paddq	%xmm6, %xmm0
    0000007c: 	movdqa	%xmm1, %xmm6
    00000080: 	punpckhdq	%xmm2, %xmm1
    00000084: 	punpckldq	%xmm2, %xmm6
    00000088: 	paddq	%xmm6, %xmm1
    0000008c: 	paddq	%xmm1, %xmm0
    00000090: 	paddq	%xmm0, %xmm3
    00000094: 	cmpq	%rsi, %rax
    00000097: 	jne	.Ltmp206 # Offset: 151
    00000099: 	movdqa	%xmm3, %xmm0
    0000009d: 	movl	%ecx, %esi
    0000009f: 	psrldq	$0x8, %xmm0
    000000a4: 	andl	$-0x8, %esi
    000000a7: 	paddq	%xmm0, %xmm3
    000000ab: 	movq	%xmm3, %rax
    000000b0: 	testb	$0x7, %cl
    000000b3: 	je	.Ltmp207 # Offset: 179
.Ltmp219:
    000000b9: 	movslq	%esi, %r9
    000000bc: 	leaq	(%r9,%r9), %r8
    000000c0: 	cmpw	%dx, (%rdi,%r9,2)
    000000c5: 	jne	.Ltmp208 # Offset: 197
    000000c7: 	addq	$0x1, %rax
.Ltmp208:
    000000cb: 	leal	0x1(%rsi), %r9d
    000000cf: 	cmpl	%ecx, %r9d
    000000d2: 	jge	.Ltmp209 # Offset: 210
    000000d4: 	cmpw	0x2(%rdi,%r8), %dx
    000000da: 	je	.Ltmp210 # Offset: 218
.Ltmp216:
    000000dc: 	leal	0x2(%rsi), %r9d
    000000e0: 	cmpl	%r9d, %ecx
    000000e3: 	jle	.Ltmp209 # Offset: 227
    000000e5: 	cmpw	0x4(%rdi,%r8), %dx
    000000eb: 	je	.Ltmp211 # Offset: 235
.Ltmp217:
    000000ed: 	leal	0x3(%rsi), %r9d
    000000f1: 	cmpl	%r9d, %ecx
    000000f4: 	jle	.Ltmp209 # Offset: 244
    000000f6: 	cmpw	0x6(%rdi,%r8), %dx
    000000fc: 	je	.Ltmp212 # Offset: 252
    000000fe: 	leal	0x4(%rsi), %r9d
    00000102: 	cmpl	%r9d, %ecx
    00000105: 	jle	.Ltmp209 # Offset: 261
.Ltmp218:
    00000107: 	cmpw	0x8(%rdi,%r8), %dx
    0000010d: 	jne	.Ltmp213 # Offset: 269
    0000010f: 	addq	$0x1, %rax
.Ltmp213:
    00000113: 	leal	0x5(%rsi), %r9d
    00000117: 	cmpl	%r9d, %ecx
    0000011a: 	jle	.Ltmp209 # Offset: 282
    0000011c: 	cmpw	0xa(%rdi,%r8), %dx
    00000122: 	jne	.Ltmp214 # Offset: 290
    00000124: 	addq	$0x1, %rax
.Ltmp214:
    00000128: 	addl	$0x6, %esi
    0000012b: 	cmpl	%esi, %ecx
    0000012d: 	jle	.Ltmp209 # Offset: 301
    0000012f: 	cmpw	0xc(%rdi,%r8), %dx
    00000135: 	je	.Ltmp215 # Offset: 309
.Ltmp209:
    00000137: 	retq # Offset: 311
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp210:
    00000140: 	addq	$0x1, %rax
    00000144: 	jmp	.Ltmp216 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp211:
    00000150: 	addq	$0x1, %rax
    00000154: 	jmp	.Ltmp217 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp212:
    00000160: 	leal	0x4(%rsi), %r9d
    00000164: 	addq	$0x1, %rax
    00000168: 	cmpl	%r9d, %ecx
    0000016b: 	jg	.Ltmp218 # Offset: 363
    0000016d: 	jmp	.Ltmp209 # Offset: 365
    0000016f: 	nop # Size: 1
.Ltmp215:
    00000170: 	addq	$0x1, %rax
    00000174: 	retq # Offset: 372
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp204:
    00000178: 	xorl	%eax, %eax
    0000017a: 	retq # Offset: 378
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp207:
    00000180: 	retq # Offset: 384
.Ltmp205:
    00000181: 	xorl	%esi, %esi
    00000183: 	xorl	%eax, %eax
    00000185: 	jmp	.Ltmp219 # Offset: 389
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1ItEmPT_iS0_"

Binary Function "_Z6count2ItEmPT_iS0_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x60d0
  Size        : 0x9f
  MaxSize     : 0xa0
  Offset      : 0x60d0
  Section     : .text
  Orc Section : .local.text._Z6count2ItEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %r10d
    0000000a: 	movl	%esi, %edi
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp220 # Offset: 15
    00000015: 	leal	-0x2(%rsi), %r11d
    00000019: 	movq	%r9, %rax
    0000001c: 	xorl	%r8d, %r8d
    0000001f: 	shrl	%r11d
    00000022: 	movl	%r11d, %ecx
    00000025: 	leaq	0x4(%r9,%rcx,4), %rsi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp221:
    00000030: 	xorl	%ecx, %ecx
    00000032: 	cmpw	(%rax), %dx
    00000035: 	sete	%cl
    00000038: 	addq	%rcx, %r8
    0000003b: 	xorl	%ecx, %ecx
    0000003d: 	cmpw	0x2(%rax), %dx
    00000041: 	sete	%cl
    00000044: 	addq	$0x4, %rax
    00000048: 	addq	%rcx, %r8
    0000004b: 	cmpq	%rax, %rsi
    0000004e: 	jne	.Ltmp221 # Offset: 78
    00000050: 	leal	0x2(%r11,%r11), %eax
.Ltmp226:
    00000055: 	cmpl	%eax, %edi
    00000057: 	jle	.Ltmp222 # Offset: 87
    00000059: 	movslq	%eax, %rdx
    0000005c: 	leaq	(%rdx,%rdx), %rcx
    00000060: 	cmpw	%r10w, (%r9,%rdx,2)
    00000065: 	je	.Ltmp223 # Offset: 101
    00000067: 	addl	$0x1, %eax
    0000006a: 	cmpl	%eax, %edi
    0000006c: 	jle	.Ltmp222 # Offset: 108
.Ltmp225:
    0000006e: 	cmpw	0x2(%r9,%rcx), %r10w
    00000074: 	je	.Ltmp224 # Offset: 116
.Ltmp222:
    00000076: 	movq	%r8, %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp223:
    00000080: 	addl	$0x1, %eax
    00000083: 	addq	$0x1, %r8
    00000087: 	cmpl	%eax, %edi
    00000089: 	jle	.Ltmp222 # Offset: 137
    0000008b: 	jmp	.Ltmp225 # Offset: 139
.Ltmp224:
    0000008d: 	addq	$0x1, %r8
    00000091: 	jmp	.Ltmp222 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp220:
    00000098: 	xorl	%eax, %eax
    0000009a: 	xorl	%r8d, %r8d
    0000009d: 	jmp	.Ltmp226 # Offset: 157
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2ItEmPT_iS0_"

Binary Function "_Z6count3ItEmPT_iS0_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x6170
  Size        : 0xee
  MaxSize     : 0xf0
  Offset      : 0x6170
  Section     : .text
  Orc Section : .local.text._Z6count3ItEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r8d
    0000000a: 	movl	%edx, %r10d
    0000000d: 	movl	%edx, %ecx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp227 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r11d
    0000001c: 	movq	%rdi, %rdx
    0000001f: 	shrl	$0x2, %r11d
    00000023: 	movl	%r11d, %eax
    00000026: 	leaq	0x8(%rdi,%rax,8), %rdi
    0000002b: 	xorl	%eax, %eax
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp228:
    00000030: 	xorl	%esi, %esi
    00000032: 	cmpw	(%rdx), %cx
    00000035: 	sete	%sil
    00000039: 	addq	%rsi, %rax
    0000003c: 	xorl	%esi, %esi
    0000003e: 	cmpw	0x2(%rdx), %cx
    00000042: 	sete	%sil
    00000046: 	addq	%rsi, %rax
    00000049: 	xorl	%esi, %esi
    0000004b: 	cmpw	0x4(%rdx), %cx
    0000004f: 	sete	%sil
    00000053: 	addq	%rsi, %rax
    00000056: 	xorl	%esi, %esi
    00000058: 	cmpw	0x6(%rdx), %cx
    0000005c: 	sete	%sil
    00000060: 	addq	$0x8, %rdx
    00000064: 	addq	%rsi, %rax
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	jne	.Ltmp228 # Offset: 106
    0000006c: 	leal	0x4(,%r11,4), %edx
.Ltmp236:
    00000074: 	cmpl	%edx, %r8d
    00000077: 	jle	.Ltmp229 # Offset: 119
    00000079: 	movslq	%edx, %rcx
    0000007c: 	leaq	(%rcx,%rcx), %rsi
    00000080: 	cmpw	%r10w, (%r9,%rcx,2)
    00000085: 	je	.Ltmp230 # Offset: 133
.Ltmp234:
    00000087: 	leal	0x1(%rdx), %ecx
    0000008a: 	cmpl	%r8d, %ecx
    0000008d: 	jge	.Ltmp229 # Offset: 141
    0000008f: 	cmpw	%r10w, 0x2(%r9,%rsi)
    00000095: 	je	.Ltmp231 # Offset: 149
    00000097: 	leal	0x2(%rdx), %ecx
    0000009a: 	cmpl	%ecx, %r8d
    0000009d: 	jle	.Ltmp229 # Offset: 157
.Ltmp235:
    0000009f: 	cmpw	0x4(%r9,%rsi), %r10w
    000000a5: 	jne	.Ltmp232 # Offset: 165
    000000a7: 	addq	$0x1, %rax
.Ltmp232:
    000000ab: 	addl	$0x3, %edx
    000000ae: 	cmpl	%r8d, %edx
    000000b1: 	jge	.Ltmp229 # Offset: 177
    000000b3: 	cmpw	0x6(%r9,%rsi), %r10w
    000000b9: 	je	.Ltmp233 # Offset: 185
.Ltmp229:
    000000bb: 	retq # Offset: 187
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp230:
    000000c0: 	addq	$0x1, %rax
    000000c4: 	jmp	.Ltmp234 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp231:
    000000d0: 	leal	0x2(%rdx), %ecx
    000000d3: 	addq	$0x1, %rax
    000000d7: 	cmpl	%ecx, %r8d
    000000da: 	jg	.Ltmp235 # Offset: 218
    000000dc: 	jmp	.Ltmp229 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp233:
    000000e0: 	addq	$0x1, %rax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp227:
    000000e8: 	xorl	%edx, %edx
    000000ea: 	xorl	%eax, %eax
    000000ec: 	jmp	.Ltmp236 # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3ItEmPT_iS0_"

Binary Function "_Z6count4ItEmPT_iS0_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x6260
  Size        : 0x20b
  MaxSize     : 0x210
  Offset      : 0x6260
  Section     : .text
  Orc Section : .local.text._Z6count4ItEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r8
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %r10d
    0000000e: 	cmpl	$0x3, %esi
    00000011: 	jle	.Ltmp237 # Offset: 17
    00000017: 	leal	-0x4(%r9), %ebx
    0000001b: 	movl	%edx, %esi
    0000001d: 	xorl	%ecx, %ecx
    0000001f: 	movq	%rdi, %rdx
    00000022: 	shrl	$0x2, %ebx
    00000025: 	movl	%ebx, %eax
    00000027: 	leaq	0x8(%rdi,%rax,8), %r11
    0000002c: 	xorl	%eax, %eax
    0000002e: 	nop # Size: 2
.Ltmp238:
    00000030: 	xorl	%edi, %edi
    00000032: 	cmpw	(%rdx), %si
    00000035: 	sete	%dil
    00000039: 	addq	%rdi, %rcx
    0000003c: 	xorl	%edi, %edi
    0000003e: 	cmpw	0x2(%rdx), %si
    00000042: 	sete	%dil
    00000046: 	addq	%rdi, %rax
    00000049: 	xorl	%edi, %edi
    0000004b: 	cmpw	0x4(%rdx), %si
    0000004f: 	sete	%dil
    00000053: 	addq	%rdi, %rcx
    00000056: 	xorl	%edi, %edi
    00000058: 	cmpw	0x6(%rdx), %si
    0000005c: 	sete	%dil
    00000060: 	addq	$0x8, %rdx
    00000064: 	addq	%rdi, %rax
    00000067: 	cmpq	%r11, %rdx
    0000006a: 	jne	.Ltmp238 # Offset: 106
    0000006c: 	leal	0x4(,%rbx,4), %edi
.Ltmp253:
    00000073: 	cmpl	%edi, %r9d
    00000076: 	jle	.Ltmp239 # Offset: 118
    0000007c: 	movl	%r9d, %ebx
    0000007f: 	subl	%edi, %ebx
    00000081: 	leal	-0x1(%rbx), %edx
    00000084: 	cmpl	$0x6, %edx
    00000087: 	jbe	.Ltmp240 # Offset: 135
    0000008d: 	movd	%r10d, %xmm5
    00000092: 	pxor	%xmm3, %xmm3
    00000096: 	pxor	%xmm4, %xmm4
    0000009a: 	movslq	%edi, %rdx
    0000009d: 	leaq	(%r8,%rdx,2), %rsi
    000000a1: 	punpcklwd	%xmm5, %xmm5
    000000a5: 	pxor	%xmm2, %xmm2
    000000a9: 	movl	%ebx, %edx
    000000ab: 	shrl	$0x3, %edx
    000000ae: 	movdqa	DATAat0x19260(%rip), %xmm7
    000000b6: 	pshufd	$0x0, %xmm5, %xmm5
    000000bb: 	leal	-0x1(%rdx), %r11d
    000000bf: 	leaq	0x10(%rsi), %rdx
    000000c3: 	shlq	$0x4, %r11
    000000c7: 	addq	%rdx, %r11
    000000ca: 	jmp	.Ltmp241 # Offset: 202
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp242:
    000000d0: 	addq	$0x10, %rdx
.Ltmp241:
    000000d4: 	movdqu	(%rsi), %xmm0
    000000d8: 	movq	%rdx, %rsi
    000000db: 	pcmpeqw	%xmm5, %xmm0
    000000df: 	pand	%xmm7, %xmm0
    000000e3: 	movdqa	%xmm0, %xmm1
    000000e7: 	punpckhwd	%xmm4, %xmm0
    000000eb: 	punpcklwd	%xmm4, %xmm1
    000000ef: 	movdqa	%xmm1, %xmm6
    000000f3: 	punpckhdq	%xmm2, %xmm1
    000000f7: 	punpckldq	%xmm2, %xmm6
    000000fb: 	paddq	%xmm6, %xmm1
    000000ff: 	movdqa	%xmm0, %xmm6
    00000103: 	punpckhdq	%xmm2, %xmm0
    00000107: 	punpckldq	%xmm2, %xmm6
    0000010b: 	paddq	%xmm6, %xmm0
    0000010f: 	paddq	%xmm0, %xmm1
    00000113: 	paddq	%xmm1, %xmm3
    00000117: 	cmpq	%rdx, %r11
    0000011a: 	jne	.Ltmp242 # Offset: 282
    0000011c: 	movdqa	%xmm3, %xmm0
    00000120: 	psrldq	$0x8, %xmm0
    00000125: 	paddq	%xmm0, %xmm3
    00000129: 	movq	%xmm3, %rdx
    0000012e: 	addq	%rdx, %rcx
    00000131: 	movl	%ebx, %edx
    00000133: 	andl	$-0x8, %edx
    00000136: 	addl	%edx, %edi
    00000138: 	cmpl	%edx, %ebx
    0000013a: 	je	.Ltmp239 # Offset: 314
.Ltmp240:
    0000013c: 	movslq	%edi, %rsi
    0000013f: 	leaq	(%rsi,%rsi), %rdx
    00000143: 	cmpw	%r10w, (%r8,%rsi,2)
    00000148: 	jne	.Ltmp243 # Offset: 328
    0000014a: 	addq	$0x1, %rcx
.Ltmp243:
    0000014e: 	leal	0x1(%rdi), %esi
    00000151: 	cmpl	%r9d, %esi
    00000154: 	jge	.Ltmp239 # Offset: 340
    00000156: 	cmpw	0x2(%r8,%rdx), %r10w
    0000015c: 	je	.Ltmp244 # Offset: 348
.Ltmp250:
    0000015e: 	leal	0x2(%rdi), %esi
    00000161: 	cmpl	%r9d, %esi
    00000164: 	jge	.Ltmp239 # Offset: 356
    00000166: 	cmpw	%r10w, 0x4(%r8,%rdx)
    0000016c: 	je	.Ltmp245 # Offset: 364
.Ltmp251:
    0000016e: 	leal	0x3(%rdi), %esi
    00000171: 	cmpl	%esi, %r9d
    00000174: 	jle	.Ltmp239 # Offset: 372
    00000176: 	cmpw	%r10w, 0x6(%r8,%rdx)
    0000017c: 	je	.Ltmp246 # Offset: 380
    0000017e: 	leal	0x4(%rdi), %esi
    00000181: 	cmpl	%r9d, %esi
    00000184: 	jge	.Ltmp239 # Offset: 388
.Ltmp252:
    00000186: 	cmpw	%r10w, 0x8(%r8,%rdx)
    0000018c: 	jne	.Ltmp247 # Offset: 396
    0000018e: 	addq	$0x1, %rcx
.Ltmp247:
    00000192: 	leal	0x5(%rdi), %esi
    00000195: 	cmpl	%r9d, %esi
    00000198: 	jge	.Ltmp239 # Offset: 408
    0000019a: 	cmpw	%r10w, 0xa(%r8,%rdx)
    000001a0: 	jne	.Ltmp248 # Offset: 416
    000001a2: 	addq	$0x1, %rcx
.Ltmp248:
    000001a6: 	addl	$0x6, %edi
    000001a9: 	cmpl	%edi, %r9d
    000001ac: 	jle	.Ltmp239 # Offset: 428
    000001ae: 	cmpw	0xc(%r8,%rdx), %r10w
    000001b4: 	je	.Ltmp249 # Offset: 436
.Ltmp239:
    000001b6: 	addq	%rcx, %rax
    000001b9: 	popq	%rbx
    000001ba: 	retq # Offset: 442
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp244:
    000001c0: 	addq	$0x1, %rcx
    000001c4: 	jmp	.Ltmp250 # Offset: 452
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp245:
    000001d0: 	addq	$0x1, %rcx
    000001d4: 	jmp	.Ltmp251 # Offset: 468
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp246:
    000001e0: 	leal	0x4(%rdi), %esi
    000001e3: 	addq	$0x1, %rcx
    000001e7: 	cmpl	%r9d, %esi
    000001ea: 	jl	.Ltmp252 # Offset: 490
    000001ec: 	jmp	.Ltmp239 # Offset: 492
    000001ee: 	nop # Size: 2
.Ltmp249:
    000001f0: 	addq	$0x1, %rcx
    000001f4: 	popq	%rbx
    000001f5: 	addq	%rcx, %rax
    000001f8: 	retq # Offset: 504
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp237:
    00000200: 	xorl	%edi, %edi
    00000202: 	xorl	%eax, %eax
    00000204: 	xorl	%ecx, %ecx
    00000206: 	jmp	.Ltmp253 # Offset: 518
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4ItEmPT_iS0_"

Binary Function "_Z6count5ItEmPT_iS0_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x6470
  Size        : 0x2fe
  MaxSize     : 0x300
  Offset      : 0x6470
  Section     : .text
  Orc Section : .local.text._Z6count5ItEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rcx
    00000008: 	movl	%esi, %r10d
    0000000b: 	cmpl	$0x3, %esi
    0000000e: 	jle	.Ltmp254 # Offset: 14
    00000014: 	leal	-0x4(%rsi), %eax
    00000017: 	movl	%eax, %r11d
    0000001a: 	shrl	$0x2, %r11d
    0000001e: 	addl	$0x1, %r11d
    00000022: 	cmpl	$0x3, %eax
    00000025: 	jbe	.Ltmp255 # Offset: 37
    0000002b: 	movl	%r11d, %esi
    0000002e: 	movd	%edx, %xmm9
    00000033: 	pxor	%xmm5, %xmm5
    00000037: 	movq	%rdi, %rax
    0000003a: 	punpcklwd	%xmm9, %xmm9
    0000003f: 	shrl	%esi
    00000041: 	movdqa	%xmm5, %xmm6
    00000045: 	movdqa	%xmm5, %xmm3
    00000049: 	movdqa	%xmm5, %xmm7
    0000004d: 	pxor	%xmm8, %xmm8
    00000052: 	pxor	%xmm4, %xmm4
    00000056: 	subl	$0x1, %esi
    00000059: 	shlq	$0x4, %rsi
    0000005d: 	movdqa	DATAat0x19260(%rip), %xmm2
    00000065: 	pshufd	$0x0, %xmm9, %xmm9
    0000006b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp256:
    00000070: 	movdqu	(%rax), %xmm0
    00000074: 	addq	$0x10, %rax
    00000078: 	pcmpeqw	%xmm9, %xmm0
    0000007d: 	pand	%xmm2, %xmm0
    00000081: 	movdqa	%xmm0, %xmm1
    00000085: 	punpckhwd	%xmm8, %xmm0
    0000008a: 	punpcklwd	%xmm8, %xmm1
    0000008f: 	movdqa	%xmm1, %xmm10
    00000094: 	punpckhdq	%xmm4, %xmm1
    00000098: 	paddq	%xmm1, %xmm3
    0000009c: 	movdqa	%xmm0, %xmm1
    000000a0: 	punpckldq	%xmm4, %xmm10
    000000a5: 	punpckldq	%xmm4, %xmm1
    000000a9: 	punpckhdq	%xmm4, %xmm0
    000000ad: 	paddq	%xmm10, %xmm7
    000000b2: 	paddq	%xmm1, %xmm6
    000000b6: 	paddq	%xmm0, %xmm5
    000000ba: 	cmpq	%rsi, %rax
    000000bd: 	jne	.Ltmp256 # Offset: 189
    000000bf: 	movhlps	%xmm7, %xmm2
    000000c2: 	movq	%xmm6, %rsi
    000000c7: 	movq	%xmm7, %rax
    000000cc: 	movl	%r11d, %edi
    000000cf: 	movq	%xmm2, %r9
    000000d4: 	movhlps	%xmm6, %xmm2
    000000d7: 	addq	%rsi, %rax
    000000da: 	andl	$-0x2, %edi
    000000dd: 	movq	%xmm2, %rsi
    000000e2: 	movq	%xmm3, %rbx
    000000e7: 	movhlps	%xmm3, %xmm2
    000000ea: 	addq	%rsi, %r9
    000000ed: 	movhlps	%xmm5, %xmm6
    000000f0: 	movq	%xmm5, %rsi
    000000f5: 	addq	%rsi, %rbx
    000000f8: 	movq	%xmm2, %r8
    000000fd: 	movq	%xmm6, %rsi
    00000102: 	addq	%rsi, %r8
    00000105: 	leal	(,%rdi,4), %esi
    0000010c: 	cmpl	%edi, %r11d
    0000010f: 	je	.Ltmp257 # Offset: 271
.Ltmp276:
    00000111: 	movslq	%esi, %rsi
    00000114: 	leaq	(%rsi,%rsi), %rdi
    00000118: 	cmpw	(%rcx,%rsi,2), %dx
    0000011c: 	jne	.Ltmp258 # Offset: 284
    0000011e: 	addq	$0x1, %rax
.Ltmp258:
    00000122: 	cmpw	0x2(%rcx,%rdi), %dx
    00000127: 	jne	.Ltmp259 # Offset: 295
    00000129: 	addq	$0x1, %r9
.Ltmp259:
    0000012d: 	cmpw	0x4(%rcx,%rdi), %dx
    00000132: 	jne	.Ltmp260 # Offset: 306
    00000134: 	addq	$0x1, %rbx
.Ltmp260:
    00000138: 	cmpw	0x6(%rcx,%rdi), %dx
    0000013d: 	jne	.Ltmp257 # Offset: 317
    0000013f: 	addq	$0x1, %r8
.Ltmp257:
    00000143: 	addq	%rbx, %r9
    00000146: 	shll	$0x2, %r11d
    0000014a: 	addq	%r8, %r9
.Ltmp275:
    0000014d: 	cmpl	%r11d, %r10d
    00000150: 	jle	.Ltmp261 # Offset: 336
    00000156: 	movl	%r10d, %ebx
    00000159: 	subl	%r11d, %ebx
    0000015c: 	leal	-0x1(%rbx), %esi
    0000015f: 	cmpl	$0x6, %esi
    00000162: 	jbe	.Ltmp262 # Offset: 354
    00000168: 	movd	%edx, %xmm6
    0000016c: 	pxor	%xmm4, %xmm4
    00000170: 	pxor	%xmm5, %xmm5
    00000174: 	movslq	%r11d, %rsi
    00000177: 	leaq	(%rcx,%rsi,2), %rdi
    0000017b: 	punpcklwd	%xmm6, %xmm6
    0000017f: 	pxor	%xmm3, %xmm3
    00000183: 	movl	%ebx, %esi
    00000185: 	shrl	$0x3, %esi
    00000188: 	movdqa	DATAat0x19260(%rip), %xmm2
    00000190: 	pshufd	$0x0, %xmm6, %xmm6
    00000195: 	leal	-0x1(%rsi), %r8d
    00000199: 	leaq	0x10(%rdi), %rsi
    0000019d: 	shlq	$0x4, %r8
    000001a1: 	addq	%rsi, %r8
    000001a4: 	jmp	.Ltmp263 # Offset: 420
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp264:
    000001b0: 	addq	$0x10, %rsi
.Ltmp263:
    000001b4: 	movdqu	(%rdi), %xmm0
    000001b8: 	movq	%rsi, %rdi
    000001bb: 	pcmpeqw	%xmm6, %xmm0
    000001bf: 	pand	%xmm2, %xmm0
    000001c3: 	movdqa	%xmm0, %xmm1
    000001c7: 	punpckhwd	%xmm5, %xmm0
    000001cb: 	movdqa	%xmm0, %xmm7
    000001cf: 	punpcklwd	%xmm5, %xmm1
    000001d3: 	punpckhdq	%xmm3, %xmm0
    000001d7: 	punpckldq	%xmm3, %xmm7
    000001db: 	paddq	%xmm7, %xmm0
    000001df: 	movdqa	%xmm1, %xmm7
    000001e3: 	punpckhdq	%xmm3, %xmm1
    000001e7: 	punpckldq	%xmm3, %xmm7
    000001eb: 	paddq	%xmm7, %xmm1
    000001ef: 	paddq	%xmm1, %xmm0
    000001f3: 	paddq	%xmm0, %xmm4
    000001f7: 	cmpq	%rsi, %r8
    000001fa: 	jne	.Ltmp264 # Offset: 506
    000001fc: 	movdqa	%xmm4, %xmm0
    00000200: 	psrldq	$0x8, %xmm0
    00000205: 	paddq	%xmm4, %xmm0
    00000209: 	movq	%xmm0, %rsi
    0000020e: 	addq	%rsi, %rax
    00000211: 	movl	%ebx, %esi
    00000213: 	andl	$-0x8, %esi
    00000216: 	addl	%esi, %r11d
    00000219: 	cmpl	%esi, %ebx
    0000021b: 	je	.Ltmp261 # Offset: 539
.Ltmp262:
    0000021d: 	movslq	%r11d, %rsi
    00000220: 	leaq	(%rsi,%rsi), %rdi
    00000224: 	cmpw	(%rcx,%rsi,2), %dx
    00000228: 	jne	.Ltmp265 # Offset: 552
    0000022a: 	addq	$0x1, %rax
.Ltmp265:
    0000022e: 	leal	0x1(%r11), %esi
    00000232: 	cmpl	%r10d, %esi
    00000235: 	jge	.Ltmp261 # Offset: 565
    00000237: 	cmpw	%dx, 0x2(%rcx,%rdi)
    0000023c: 	je	.Ltmp266 # Offset: 572
.Ltmp272:
    0000023e: 	leal	0x2(%r11), %esi
    00000242: 	cmpl	%esi, %r10d
    00000245: 	jle	.Ltmp261 # Offset: 581
    00000247: 	cmpw	0x4(%rcx,%rdi), %dx
    0000024c: 	je	.Ltmp267 # Offset: 588
.Ltmp273:
    0000024e: 	leal	0x3(%r11), %esi
    00000252: 	cmpl	%r10d, %esi
    00000255: 	jge	.Ltmp261 # Offset: 597
    00000257: 	cmpw	0x6(%rcx,%rdi), %dx
    0000025c: 	je	.Ltmp268 # Offset: 604
    0000025e: 	leal	0x4(%r11), %esi
    00000262: 	cmpl	%r10d, %esi
    00000265: 	jge	.Ltmp261 # Offset: 613
.Ltmp274:
    00000267: 	cmpw	0x8(%rcx,%rdi), %dx
    0000026c: 	jne	.Ltmp269 # Offset: 620
    0000026e: 	addq	$0x1, %rax
.Ltmp269:
    00000272: 	leal	0x5(%r11), %esi
    00000276: 	cmpl	%esi, %r10d
    00000279: 	jle	.Ltmp261 # Offset: 633
    0000027b: 	cmpw	0xa(%rcx,%rdi), %dx
    00000280: 	jne	.Ltmp270 # Offset: 640
    00000282: 	addq	$0x1, %rax
.Ltmp270:
    00000286: 	leal	0x6(%r11), %esi
    0000028a: 	cmpl	%esi, %r10d
    0000028d: 	jle	.Ltmp261 # Offset: 653
    0000028f: 	cmpw	0xc(%rcx,%rdi), %dx
    00000294: 	je	.Ltmp271 # Offset: 660
.Ltmp261:
    00000296: 	addq	%r9, %rax
    00000299: 	popq	%rbx
    0000029a: 	retq # Offset: 666
    0000029b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp266:
    000002a0: 	addq	$0x1, %rax
    000002a4: 	jmp	.Ltmp272 # Offset: 676
    000002a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp267:
    000002b0: 	addq	$0x1, %rax
    000002b4: 	jmp	.Ltmp273 # Offset: 692
    000002b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp268:
    000002c0: 	leal	0x4(%r11), %esi
    000002c4: 	addq	$0x1, %rax
    000002c8: 	cmpl	%r10d, %esi
    000002cb: 	jl	.Ltmp274 # Offset: 715
    000002cd: 	jmp	.Ltmp261 # Offset: 717
    000002cf: 	nop # Size: 1
.Ltmp271:
    000002d0: 	addq	$0x1, %rax
    000002d4: 	popq	%rbx
    000002d5: 	addq	%r9, %rax
    000002d8: 	retq # Offset: 728
    000002d9: 	nopl	(%rax) # Size: 7
.Ltmp254:
    000002e0: 	xorl	%r9d, %r9d
    000002e3: 	xorl	%r11d, %r11d
    000002e6: 	xorl	%eax, %eax
    000002e8: 	jmp	.Ltmp275 # Offset: 744
.Ltmp255:
    000002ed: 	xorl	%esi, %esi
    000002ef: 	xorl	%r8d, %r8d
    000002f2: 	xorl	%ebx, %ebx
    000002f4: 	xorl	%r9d, %r9d
    000002f7: 	xorl	%eax, %eax
    000002f9: 	jmp	.Ltmp276 # Offset: 761
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5ItEmPT_iS0_"

Binary Function "_Z6count6ItEmPT_iS0_" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x6770
  Size        : 0x2fd
  MaxSize     : 0x300
  Offset      : 0x6770
  Section     : .text
  Orc Section : .local.text._Z6count6ItEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	pushq	%rbx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %esi
    0000000d: 	cmpl	$0x3, %r9d
    00000011: 	jle	.Ltmp277 # Offset: 17
    00000017: 	leal	-0x4(%r9), %eax
    0000001b: 	movl	%eax, %r11d
    0000001e: 	shrl	$0x2, %r11d
    00000022: 	addl	$0x1, %r11d
    00000026: 	cmpl	$0x3, %eax
    00000029: 	jbe	.Ltmp278 # Offset: 41
    0000002f: 	movd	%edx, %xmm9
    00000034: 	movl	%r11d, %edx
    00000037: 	pxor	%xmm4, %xmm4
    0000003b: 	movq	%rdi, %rax
    0000003e: 	punpcklwd	%xmm9, %xmm9
    00000043: 	shrl	%edx
    00000045: 	movdqa	%xmm4, %xmm6
    00000049: 	movdqa	%xmm4, %xmm5
    0000004d: 	movdqa	%xmm4, %xmm7
    00000051: 	pxor	%xmm8, %xmm8
    00000056: 	pxor	%xmm3, %xmm3
    0000005a: 	subl	$0x1, %edx
    0000005d: 	shlq	$0x4, %rdx
    00000061: 	movdqa	DATAat0x19260(%rip), %xmm2
    00000069: 	pshufd	$0x0, %xmm9, %xmm9
    0000006f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp279:
    00000078: 	movdqu	(%rax), %xmm0
    0000007c: 	addq	$0x10, %rax
    00000080: 	pcmpeqw	%xmm9, %xmm0
    00000085: 	pand	%xmm2, %xmm0
    00000089: 	movdqa	%xmm0, %xmm1
    0000008d: 	punpckhwd	%xmm8, %xmm0
    00000092: 	punpcklwd	%xmm8, %xmm1
    00000097: 	movdqa	%xmm1, %xmm10
    0000009c: 	punpckhdq	%xmm3, %xmm1
    000000a0: 	paddq	%xmm1, %xmm5
    000000a4: 	movdqa	%xmm0, %xmm1
    000000a8: 	punpckldq	%xmm3, %xmm10
    000000ad: 	punpckldq	%xmm3, %xmm1
    000000b1: 	punpckhdq	%xmm3, %xmm0
    000000b5: 	paddq	%xmm10, %xmm7
    000000ba: 	paddq	%xmm1, %xmm6
    000000be: 	paddq	%xmm0, %xmm4
    000000c2: 	cmpq	%rdx, %rax
    000000c5: 	jne	.Ltmp279 # Offset: 197
    000000c7: 	movhlps	%xmm7, %xmm2
    000000ca: 	movq	%xmm6, %rdx
    000000cf: 	movq	%xmm7, %rax
    000000d4: 	movl	%r11d, %ebx
    000000d7: 	movq	%xmm2, %rdi
    000000dc: 	movhlps	%xmm6, %xmm2
    000000df: 	addq	%rdx, %rax
    000000e2: 	andl	$-0x2, %ebx
    000000e5: 	movq	%xmm2, %rdx
    000000ea: 	movq	%xmm5, %r10
    000000ef: 	movhlps	%xmm5, %xmm2
    000000f2: 	addq	%rdx, %rdi
    000000f5: 	movq	%xmm4, %rdx
    000000fa: 	psrldq	$0x8, %xmm4
    000000ff: 	addq	%rdx, %r10
    00000102: 	movq	%xmm2, %r8
    00000107: 	movq	%xmm4, %rdx
    0000010c: 	addq	%rdx, %r8
    0000010f: 	leal	(,%rbx,4), %edx
    00000116: 	cmpl	%ebx, %r11d
    00000119: 	je	.Ltmp280 # Offset: 281
.Ltmp296:
    0000011b: 	movslq	%edx, %rdx
    0000011e: 	xorl	%ebx, %ebx
    00000120: 	cmpw	%si, (%rcx,%rdx,2)
    00000124: 	sete	%bl
    00000127: 	addq	%rbx, %rax
    0000012a: 	xorl	%ebx, %ebx
    0000012c: 	cmpw	%si, 0x2(%rcx,%rdx,2)
    00000131: 	sete	%bl
    00000134: 	addq	%rbx, %rdi
    00000137: 	xorl	%ebx, %ebx
    00000139: 	cmpw	%si, 0x4(%rcx,%rdx,2)
    0000013e: 	sete	%bl
    00000141: 	addq	%rbx, %r10
    00000144: 	cmpw	%si, 0x6(%rcx,%rdx,2)
    00000149: 	sete	%dl
    0000014c: 	movzbl	%dl, %edx
    0000014f: 	addq	%rdx, %r8
.Ltmp280:
    00000152: 	addq	%r10, %rdi
    00000155: 	shll	$0x2, %r11d
    00000159: 	addq	%r8, %rdi
.Ltmp295:
    0000015c: 	cmpl	%r11d, %r9d
    0000015f: 	jle	.Ltmp281 # Offset: 351
    00000165: 	movl	%r9d, %ebx
    00000168: 	subl	%r11d, %ebx
    0000016b: 	leal	-0x1(%rbx), %edx
    0000016e: 	cmpl	$0x6, %edx
    00000171: 	jbe	.Ltmp282 # Offset: 369
    00000177: 	movd	%esi, %xmm6
    0000017b: 	pxor	%xmm4, %xmm4
    0000017f: 	pxor	%xmm5, %xmm5
    00000183: 	movslq	%r11d, %rdx
    00000186: 	leaq	(%rcx,%rdx,2), %r8
    0000018a: 	punpcklwd	%xmm6, %xmm6
    0000018e: 	pxor	%xmm3, %xmm3
    00000192: 	movl	%ebx, %edx
    00000194: 	shrl	$0x3, %edx
    00000197: 	movdqa	DATAat0x19260(%rip), %xmm2
    0000019f: 	pshufd	$0x0, %xmm6, %xmm6
    000001a4: 	leal	-0x1(%rdx), %r10d
    000001a8: 	leaq	0x10(%r8), %rdx
    000001ac: 	shlq	$0x4, %r10
    000001b0: 	addq	%rdx, %r10
    000001b3: 	jmp	.Ltmp283 # Offset: 435
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp284:
    000001b8: 	addq	$0x10, %rdx
.Ltmp283:
    000001bc: 	movdqu	(%r8), %xmm0
    000001c1: 	movq	%rdx, %r8
    000001c4: 	pcmpeqw	%xmm6, %xmm0
    000001c8: 	pand	%xmm2, %xmm0
    000001cc: 	movdqa	%xmm0, %xmm1
    000001d0: 	punpckhwd	%xmm5, %xmm0
    000001d4: 	movdqa	%xmm0, %xmm7
    000001d8: 	punpcklwd	%xmm5, %xmm1
    000001dc: 	punpckldq	%xmm3, %xmm0
    000001e0: 	punpckhdq	%xmm3, %xmm7
    000001e4: 	paddq	%xmm7, %xmm0
    000001e8: 	movdqa	%xmm1, %xmm7
    000001ec: 	punpckldq	%xmm3, %xmm1
    000001f0: 	punpckhdq	%xmm3, %xmm7
    000001f4: 	paddq	%xmm7, %xmm1
    000001f8: 	paddq	%xmm1, %xmm0
    000001fc: 	paddq	%xmm0, %xmm4
    00000200: 	cmpq	%rdx, %r10
    00000203: 	jne	.Ltmp284 # Offset: 515
    00000205: 	movdqa	%xmm4, %xmm0
    00000209: 	psrldq	$0x8, %xmm0
    0000020e: 	paddq	%xmm4, %xmm0
    00000212: 	movq	%xmm0, %rdx
    00000217: 	addq	%rdx, %rax
    0000021a: 	movl	%ebx, %edx
    0000021c: 	andl	$-0x8, %edx
    0000021f: 	addl	%edx, %r11d
    00000222: 	cmpl	%ebx, %edx
    00000224: 	je	.Ltmp281 # Offset: 548
.Ltmp282:
    00000226: 	movslq	%r11d, %r8
    00000229: 	leaq	(%r8,%r8), %rdx
    0000022d: 	cmpw	(%rcx,%r8,2), %si
    00000232: 	jne	.Ltmp285 # Offset: 562
    00000234: 	addq	$0x1, %rax
.Ltmp285:
    00000238: 	leal	0x1(%r11), %r8d
    0000023c: 	cmpl	%r9d, %r8d
    0000023f: 	jge	.Ltmp281 # Offset: 575
    00000241: 	cmpw	%si, 0x2(%rcx,%rdx)
    00000246: 	je	.Ltmp286 # Offset: 582
.Ltmp292:
    00000248: 	leal	0x2(%r11), %r8d
    0000024c: 	cmpl	%r9d, %r8d
    0000024f: 	jge	.Ltmp281 # Offset: 591
    00000251: 	cmpw	%si, 0x4(%rcx,%rdx)
    00000256: 	je	.Ltmp287 # Offset: 598
.Ltmp293:
    00000258: 	leal	0x3(%r11), %r8d
    0000025c: 	cmpl	%r8d, %r9d
    0000025f: 	jle	.Ltmp281 # Offset: 607
    00000261: 	cmpw	%si, 0x6(%rcx,%rdx)
    00000266: 	je	.Ltmp288 # Offset: 614
    00000268: 	leal	0x4(%r11), %r8d
    0000026c: 	cmpl	%r8d, %r9d
    0000026f: 	jle	.Ltmp281 # Offset: 623
.Ltmp294:
    00000271: 	cmpw	0x8(%rcx,%rdx), %si
    00000276: 	jne	.Ltmp289 # Offset: 630
    00000278: 	addq	$0x1, %rax
.Ltmp289:
    0000027c: 	leal	0x5(%r11), %r8d
    00000280: 	cmpl	%r8d, %r9d
    00000283: 	jle	.Ltmp281 # Offset: 643
    00000285: 	cmpw	0xa(%rcx,%rdx), %si
    0000028a: 	jne	.Ltmp290 # Offset: 650
    0000028c: 	addq	$0x1, %rax
.Ltmp290:
    00000290: 	addl	$0x6, %r11d
    00000294: 	cmpl	%r11d, %r9d
    00000297: 	jle	.Ltmp281 # Offset: 663
    00000299: 	cmpw	0xc(%rcx,%rdx), %si
    0000029e: 	je	.Ltmp291 # Offset: 670
.Ltmp281:
    000002a0: 	addq	%rdi, %rax
    000002a3: 	popq	%rbx
    000002a4: 	retq # Offset: 676
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp286:
    000002a8: 	addq	$0x1, %rax
    000002ac: 	jmp	.Ltmp292 # Offset: 684
    000002ae: 	nop # Size: 2
.Ltmp287:
    000002b0: 	addq	$0x1, %rax
    000002b4: 	jmp	.Ltmp293 # Offset: 692
    000002b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp288:
    000002c0: 	leal	0x4(%r11), %r8d
    000002c4: 	addq	$0x1, %rax
    000002c8: 	cmpl	%r8d, %r9d
    000002cb: 	jg	.Ltmp294 # Offset: 715
    000002cd: 	jmp	.Ltmp281 # Offset: 717
    000002cf: 	nop # Size: 1
.Ltmp291:
    000002d0: 	addq	$0x1, %rax
    000002d4: 	popq	%rbx
    000002d5: 	addq	%rdi, %rax
    000002d8: 	retq # Offset: 728
    000002d9: 	nopl	(%rax) # Size: 7
.Ltmp277:
    000002e0: 	xorl	%edi, %edi
    000002e2: 	xorl	%r11d, %r11d
    000002e5: 	xorl	%eax, %eax
    000002e7: 	jmp	.Ltmp295 # Offset: 743
.Ltmp278:
    000002ec: 	xorl	%edx, %edx
    000002ee: 	xorl	%r8d, %r8d
    000002f1: 	xorl	%r10d, %r10d
    000002f4: 	xorl	%edi, %edi
    000002f6: 	xorl	%eax, %eax
    000002f8: 	jmp	.Ltmp296 # Offset: 760
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6ItEmPT_iS0_"

Binary Function "_Z6count7ItEmPT_iS0_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x6a70
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x6a70
  Section     : .text
  Orc Section : .local.text._Z6count7ItEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r10
    00000009: 	movl	%esi, %r11d
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%edx, %ebx
    00000010: 	cmpl	$0x7, %esi
    00000013: 	jle	.Ltmp297 # Offset: 19
    00000019: 	leal	-0x8(%rsi), %r12d
    0000001d: 	movl	%edx, %ecx
    0000001f: 	xorl	%r8d, %r8d
    00000022: 	movq	%rdi, %rdx
    00000025: 	shrl	$0x3, %r12d
    00000029: 	xorl	%esi, %esi
    0000002b: 	movl	%r12d, %eax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	leaq	0x10(%rdi,%rax), %rbp
    00000037: 	xorl	%edi, %edi
    00000039: 	xorl	%eax, %eax
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp298:
    00000040: 	xorl	%r9d, %r9d
    00000043: 	cmpw	(%rdx), %cx
    00000046: 	sete	%r9b
    0000004a: 	addq	%r9, %rax
    0000004d: 	xorl	%r9d, %r9d
    00000050: 	cmpw	%cx, 0x2(%rdx)
    00000054: 	sete	%r9b
    00000058: 	addq	%r9, %rsi
    0000005b: 	xorl	%r9d, %r9d
    0000005e: 	cmpw	%cx, 0x4(%rdx)
    00000062: 	sete	%r9b
    00000066: 	addq	%r9, %r8
    00000069: 	xorl	%r9d, %r9d
    0000006c: 	cmpw	0x6(%rdx), %cx
    00000070: 	sete	%r9b
    00000074: 	addq	%r9, %rdi
    00000077: 	xorl	%r9d, %r9d
    0000007a: 	cmpw	0x8(%rdx), %cx
    0000007e: 	sete	%r9b
    00000082: 	addq	%r9, %rax
    00000085: 	xorl	%r9d, %r9d
    00000088: 	cmpw	0xa(%rdx), %cx
    0000008c: 	sete	%r9b
    00000090: 	addq	%r9, %rsi
    00000093: 	xorl	%r9d, %r9d
    00000096: 	cmpw	0xc(%rdx), %cx
    0000009a: 	sete	%r9b
    0000009e: 	addq	%r9, %r8
    000000a1: 	xorl	%r9d, %r9d
    000000a4: 	cmpw	0xe(%rdx), %cx
    000000a8: 	sete	%r9b
    000000ac: 	addq	$0x10, %rdx
    000000b0: 	addq	%r9, %rdi
    000000b3: 	cmpq	%rbp, %rdx
    000000b6: 	jne	.Ltmp298 # Offset: 182
    000000b8: 	addq	%r8, %rsi
    000000bb: 	leal	0x8(,%r12,8), %r9d
    000000c3: 	addq	%rdi, %rsi
.Ltmp313:
    000000c6: 	cmpl	%r9d, %r11d
    000000c9: 	jle	.Ltmp299 # Offset: 201
    000000cf: 	movl	%r11d, %r8d
    000000d2: 	subl	%r9d, %r8d
    000000d5: 	leal	-0x1(%r8), %edx
    000000d9: 	cmpl	$0x6, %edx
    000000dc: 	jbe	.Ltmp300 # Offset: 220
    000000e2: 	movd	%ebx, %xmm5
    000000e6: 	pxor	%xmm3, %xmm3
    000000ea: 	pxor	%xmm4, %xmm4
    000000ee: 	movslq	%r9d, %rdx
    000000f1: 	leaq	(%r10,%rdx,2), %rcx
    000000f5: 	punpcklwd	%xmm5, %xmm5
    000000f9: 	pxor	%xmm2, %xmm2
    000000fd: 	movl	%r8d, %edx
    00000100: 	shrl	$0x3, %edx
    00000103: 	movdqa	DATAat0x19260(%rip), %xmm7
    0000010b: 	pshufd	$0x0, %xmm5, %xmm5
    00000110: 	leal	-0x1(%rdx), %edi
    00000113: 	leaq	0x10(%rcx), %rdx
    00000117: 	shlq	$0x4, %rdi
    0000011b: 	addq	%rdx, %rdi
    0000011e: 	jmp	.Ltmp301 # Offset: 286
.Ltmp302:
    00000120: 	addq	$0x10, %rdx
.Ltmp301:
    00000124: 	movdqu	(%rcx), %xmm0
    00000128: 	movq	%rdx, %rcx
    0000012b: 	pcmpeqw	%xmm5, %xmm0
    0000012f: 	pand	%xmm7, %xmm0
    00000133: 	movdqa	%xmm0, %xmm1
    00000137: 	punpckhwd	%xmm4, %xmm0
    0000013b: 	movdqa	%xmm0, %xmm6
    0000013f: 	punpcklwd	%xmm4, %xmm1
    00000143: 	punpckhdq	%xmm2, %xmm0
    00000147: 	punpckldq	%xmm2, %xmm6
    0000014b: 	paddq	%xmm6, %xmm0
    0000014f: 	movdqa	%xmm1, %xmm6
    00000153: 	punpckhdq	%xmm2, %xmm1
    00000157: 	punpckldq	%xmm2, %xmm6
    0000015b: 	paddq	%xmm6, %xmm1
    0000015f: 	paddq	%xmm1, %xmm0
    00000163: 	paddq	%xmm0, %xmm3
    00000167: 	cmpq	%rdx, %rdi
    0000016a: 	jne	.Ltmp302 # Offset: 362
    0000016c: 	movdqa	%xmm3, %xmm0
    00000170: 	psrldq	$0x8, %xmm0
    00000175: 	paddq	%xmm0, %xmm3
    00000179: 	movq	%xmm3, %rdx
    0000017e: 	addq	%rdx, %rax
    00000181: 	movl	%r8d, %edx
    00000184: 	andl	$-0x8, %edx
    00000187: 	addl	%edx, %r9d
    0000018a: 	cmpl	%edx, %r8d
    0000018d: 	je	.Ltmp299 # Offset: 397
.Ltmp300:
    00000193: 	movslq	%r9d, %rcx
    00000196: 	leaq	(%rcx,%rcx), %rdx
    0000019a: 	cmpw	%bx, (%r10,%rcx,2)
    0000019f: 	jne	.Ltmp303 # Offset: 415
    000001a1: 	addq	$0x1, %rax
.Ltmp303:
    000001a5: 	leal	0x1(%r9), %ecx
    000001a9: 	cmpl	%ecx, %r11d
    000001ac: 	jle	.Ltmp299 # Offset: 428
    000001ae: 	cmpw	0x2(%r10,%rdx), %bx
    000001b4: 	je	.Ltmp304 # Offset: 436
.Ltmp310:
    000001b6: 	leal	0x2(%r9), %ecx
    000001ba: 	cmpl	%ecx, %r11d
    000001bd: 	jle	.Ltmp299 # Offset: 445
    000001bf: 	cmpw	0x4(%r10,%rdx), %bx
    000001c5: 	je	.Ltmp305 # Offset: 453
.Ltmp311:
    000001c7: 	leal	0x3(%r9), %ecx
    000001cb: 	cmpl	%ecx, %r11d
    000001ce: 	jle	.Ltmp299 # Offset: 462
    000001d0: 	cmpw	%bx, 0x6(%r10,%rdx)
    000001d6: 	je	.Ltmp306 # Offset: 470
    000001d8: 	leal	0x4(%r9), %ecx
    000001dc: 	cmpl	%r11d, %ecx
    000001df: 	jge	.Ltmp299 # Offset: 479
.Ltmp312:
    000001e1: 	cmpw	%bx, 0x8(%r10,%rdx)
    000001e7: 	jne	.Ltmp307 # Offset: 487
    000001e9: 	addq	$0x1, %rax
.Ltmp307:
    000001ed: 	leal	0x5(%r9), %ecx
    000001f1: 	cmpl	%r11d, %ecx
    000001f4: 	jge	.Ltmp299 # Offset: 500
    000001f6: 	cmpw	%bx, 0xa(%r10,%rdx)
    000001fc: 	jne	.Ltmp308 # Offset: 508
    000001fe: 	addq	$0x1, %rax
.Ltmp308:
    00000202: 	addl	$0x6, %r9d
    00000206: 	cmpl	%r11d, %r9d
    00000209: 	jge	.Ltmp299 # Offset: 521
    0000020b: 	cmpw	0xc(%r10,%rdx), %bx
    00000211: 	je	.Ltmp309 # Offset: 529
.Ltmp299:
    00000213: 	popq	%rbx
    00000214: 	addq	%rsi, %rax
    00000217: 	popq	%rbp
    00000218: 	popq	%r12
    0000021a: 	retq # Offset: 538
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp304:
    00000220: 	addq	$0x1, %rax
    00000224: 	jmp	.Ltmp310 # Offset: 548
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp305:
    00000230: 	addq	$0x1, %rax
    00000234: 	jmp	.Ltmp311 # Offset: 564
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp306:
    00000240: 	leal	0x4(%r9), %ecx
    00000244: 	addq	$0x1, %rax
    00000248: 	cmpl	%r11d, %ecx
    0000024b: 	jl	.Ltmp312 # Offset: 587
    0000024d: 	jmp	.Ltmp299 # Offset: 589
    0000024f: 	nop # Size: 1
.Ltmp309:
    00000250: 	addq	$0x1, %rax
    00000254: 	popq	%rbx
    00000255: 	popq	%rbp
    00000256: 	addq	%rsi, %rax
    00000259: 	popq	%r12
    0000025b: 	retq # Offset: 603
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp297:
    00000260: 	xorl	%esi, %esi
    00000262: 	xorl	%r9d, %r9d
    00000265: 	xorl	%eax, %eax
    00000267: 	jmp	.Ltmp313 # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7ItEmPT_iS0_"

Binary Function "_Z6count8ItEmPT_iS0_" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x6ce0
  Size        : 0x35c
  MaxSize     : 0x360
  Offset      : 0x6ce0
  Section     : .text
  Orc Section : .local.text._Z6count8ItEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r10d
    00000007: 	pushq	%rbp
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %esi
    0000000d: 	pushq	%rbx
    0000000e: 	cmpl	$0x7, %r10d
    00000012: 	jle	.Ltmp314 # Offset: 18
    00000018: 	leal	-0x8(%r10), %eax
    0000001c: 	movl	%eax, %r11d
    0000001f: 	shrl	$0x3, %r11d
    00000023: 	addl	$0x1, %r11d
    00000027: 	cmpl	$0x7, %eax
    0000002a: 	jbe	.Ltmp315 # Offset: 42
    00000030: 	movd	%edx, %xmm6
    00000034: 	movl	%r11d, %edx
    00000037: 	pxor	%xmm7, %xmm7
    0000003b: 	movq	%rdi, %rax
    0000003e: 	punpcklwd	%xmm6, %xmm6
    00000042: 	shrl	%edx
    00000044: 	movdqa	%xmm7, %xmm8
    00000049: 	movdqa	%xmm7, %xmm3
    0000004d: 	pshufd	$0x0, %xmm6, %xmm6
    00000052: 	movdqa	%xmm7, %xmm1
    00000056: 	pxor	%xmm5, %xmm5
    0000005a: 	subl	$0x1, %edx
    0000005d: 	shlq	$0x5, %rdx
    00000061: 	movdqa	DATAat0x19260(%rip), %xmm2
    00000069: 	pxor	%xmm9, %xmm9
    0000006e: 	leaq	0x20(%rdi,%rdx), %rdx
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp316:
    00000078: 	movdqu	(%rax), %xmm0
    0000007c: 	movdqu	0x10(%rax), %xmm11
    00000082: 	addq	$0x20, %rax
    00000086: 	movdqa	%xmm0, %xmm4
    0000008a: 	punpckhqdq	%xmm11, %xmm0
    0000008f: 	pcmpeqw	%xmm6, %xmm0
    00000093: 	punpcklqdq	%xmm11, %xmm4
    00000098: 	pcmpeqw	%xmm6, %xmm4
    0000009c: 	pand	%xmm2, %xmm0
    000000a0: 	psubw	%xmm4, %xmm0
    000000a4: 	movdqa	%xmm0, %xmm4
    000000a8: 	punpckhwd	%xmm9, %xmm0
    000000ad: 	punpcklwd	%xmm9, %xmm4
    000000b2: 	movdqa	%xmm4, %xmm10
    000000b7: 	punpckhdq	%xmm5, %xmm4
    000000bb: 	paddq	%xmm4, %xmm3
    000000bf: 	movdqa	%xmm0, %xmm4
    000000c3: 	punpckldq	%xmm5, %xmm10
    000000c8: 	punpckldq	%xmm5, %xmm4
    000000cc: 	punpckhdq	%xmm5, %xmm0
    000000d0: 	paddq	%xmm10, %xmm1
    000000d5: 	paddq	%xmm4, %xmm8
    000000da: 	paddq	%xmm0, %xmm7
    000000de: 	cmpq	%rax, %rdx
    000000e1: 	jne	.Ltmp316 # Offset: 225
    000000e3: 	movhlps	%xmm1, %xmm2
    000000e6: 	movq	%xmm8, %rdx
    000000eb: 	movq	%xmm1, %rax
    000000f0: 	movl	%r11d, %r9d
    000000f3: 	movq	%xmm2, %rdi
    000000f8: 	movhlps	%xmm8, %xmm2
    000000fc: 	addq	%rdx, %rax
    000000ff: 	andl	$-0x2, %r9d
    00000103: 	movq	%xmm2, %rdx
    00000108: 	movhlps	%xmm3, %xmm2
    0000010b: 	movq	%xmm3, %rbx
    00000110: 	movq	%xmm2, %r8
    00000115: 	addq	%rdx, %rdi
    00000118: 	movhlps	%xmm7, %xmm2
    0000011b: 	movq	%xmm7, %rdx
    00000120: 	addq	%rdx, %rbx
    00000123: 	movq	%xmm2, %rdx
    00000128: 	addq	%rdx, %r8
    0000012b: 	leal	(,%r9,8), %edx
    00000133: 	cmpl	%r9d, %r11d
    00000136: 	je	.Ltmp317 # Offset: 310
.Ltmp333:
    00000138: 	movslq	%edx, %rdx
    0000013b: 	xorl	%r9d, %r9d
    0000013e: 	cmpw	%si, (%rcx,%rdx,2)
    00000142: 	sete	%r9b
    00000146: 	addq	%rax, %r9
    00000149: 	xorl	%eax, %eax
    0000014b: 	cmpw	%si, 0x8(%rcx,%rdx,2)
    00000150: 	sete	%al
    00000153: 	addq	%r9, %rax
    00000156: 	xorl	%r9d, %r9d
    00000159: 	cmpw	%si, 0x2(%rcx,%rdx,2)
    0000015e: 	sete	%r9b
    00000162: 	xorl	%ebp, %ebp
    00000164: 	cmpw	%si, 0xa(%rcx,%rdx,2)
    00000169: 	sete	%bpl
    0000016d: 	addq	%rbp, %r9
    00000170: 	addq	%r9, %rdi
    00000173: 	xorl	%r9d, %r9d
    00000176: 	cmpw	%si, 0x4(%rcx,%rdx,2)
    0000017b: 	sete	%r9b
    0000017f: 	xorl	%ebp, %ebp
    00000181: 	cmpw	%si, 0xc(%rcx,%rdx,2)
    00000186: 	sete	%bpl
    0000018a: 	addq	%rbp, %r9
    0000018d: 	addq	%r9, %rbx
    00000190: 	xorl	%r9d, %r9d
    00000193: 	cmpw	%si, 0x6(%rcx,%rdx,2)
    00000198: 	sete	%r9b
    0000019c: 	cmpw	%si, 0xe(%rcx,%rdx,2)
    000001a1: 	sete	%dl
    000001a4: 	movzbl	%dl, %edx
    000001a7: 	addq	%r9, %rdx
    000001aa: 	addq	%rdx, %r8
.Ltmp317:
    000001ad: 	addq	%rbx, %rdi
    000001b0: 	shll	$0x3, %r11d
    000001b4: 	addq	%r8, %rdi
.Ltmp332:
    000001b7: 	cmpl	%r11d, %r10d
    000001ba: 	jle	.Ltmp318 # Offset: 442
    000001c0: 	movl	%r10d, %ebx
    000001c3: 	subl	%r11d, %ebx
    000001c6: 	leal	-0x1(%rbx), %edx
    000001c9: 	cmpl	$0x6, %edx
    000001cc: 	jbe	.Ltmp319 # Offset: 460
    000001d2: 	movd	%esi, %xmm6
    000001d6: 	pxor	%xmm4, %xmm4
    000001da: 	pxor	%xmm5, %xmm5
    000001de: 	movslq	%r11d, %rdx
    000001e1: 	leaq	(%rcx,%rdx,2), %r8
    000001e5: 	punpcklwd	%xmm6, %xmm6
    000001e9: 	pxor	%xmm3, %xmm3
    000001ed: 	movl	%ebx, %edx
    000001ef: 	shrl	$0x3, %edx
    000001f2: 	movdqa	DATAat0x19260(%rip), %xmm2
    000001fa: 	pshufd	$0x0, %xmm6, %xmm6
    000001ff: 	leal	-0x1(%rdx), %r9d
    00000203: 	leaq	0x10(%r8), %rdx
    00000207: 	shlq	$0x4, %r9
    0000020b: 	addq	%rdx, %r9
    0000020e: 	jmp	.Ltmp320 # Offset: 526
.Ltmp321:
    00000210: 	addq	$0x10, %rdx
.Ltmp320:
    00000214: 	movdqu	(%r8), %xmm0
    00000219: 	movq	%rdx, %r8
    0000021c: 	pcmpeqw	%xmm6, %xmm0
    00000220: 	pand	%xmm2, %xmm0
    00000224: 	movdqa	%xmm0, %xmm1
    00000228: 	punpckhwd	%xmm5, %xmm0
    0000022c: 	movdqa	%xmm0, %xmm7
    00000230: 	punpcklwd	%xmm5, %xmm1
    00000234: 	punpckldq	%xmm3, %xmm0
    00000238: 	punpckhdq	%xmm3, %xmm7
    0000023c: 	paddq	%xmm7, %xmm0
    00000240: 	movdqa	%xmm1, %xmm7
    00000244: 	punpckldq	%xmm3, %xmm1
    00000248: 	punpckhdq	%xmm3, %xmm7
    0000024c: 	paddq	%xmm7, %xmm1
    00000250: 	paddq	%xmm1, %xmm0
    00000254: 	paddq	%xmm0, %xmm4
    00000258: 	cmpq	%rdx, %r9
    0000025b: 	jne	.Ltmp321 # Offset: 603
    0000025d: 	movdqa	%xmm4, %xmm0
    00000261: 	psrldq	$0x8, %xmm0
    00000266: 	paddq	%xmm4, %xmm0
    0000026a: 	movq	%xmm0, %rdx
    0000026f: 	addq	%rdx, %rax
    00000272: 	movl	%ebx, %edx
    00000274: 	andl	$-0x8, %edx
    00000277: 	addl	%edx, %r11d
    0000027a: 	cmpl	%ebx, %edx
    0000027c: 	je	.Ltmp318 # Offset: 636
.Ltmp319:
    0000027e: 	movslq	%r11d, %r8
    00000281: 	leaq	(%r8,%r8), %rdx
    00000285: 	cmpw	%si, (%rcx,%r8,2)
    0000028a: 	jne	.Ltmp322 # Offset: 650
    0000028c: 	addq	$0x1, %rax
.Ltmp322:
    00000290: 	leal	0x1(%r11), %r8d
    00000294: 	cmpl	%r10d, %r8d
    00000297: 	jge	.Ltmp318 # Offset: 663
    00000299: 	cmpw	%si, 0x2(%rcx,%rdx)
    0000029e: 	je	.Ltmp323 # Offset: 670
.Ltmp329:
    000002a0: 	leal	0x2(%r11), %r8d
    000002a4: 	cmpl	%r10d, %r8d
    000002a7: 	jge	.Ltmp318 # Offset: 679
    000002a9: 	cmpw	%si, 0x4(%rcx,%rdx)
    000002ae: 	je	.Ltmp324 # Offset: 686
.Ltmp330:
    000002b0: 	leal	0x3(%r11), %r8d
    000002b4: 	cmpl	%r10d, %r8d
    000002b7: 	jge	.Ltmp318 # Offset: 695
    000002b9: 	cmpw	%si, 0x6(%rcx,%rdx)
    000002be: 	je	.Ltmp325 # Offset: 702
    000002c0: 	leal	0x4(%r11), %r8d
    000002c4: 	cmpl	%r8d, %r10d
    000002c7: 	jle	.Ltmp318 # Offset: 711
.Ltmp331:
    000002c9: 	cmpw	%si, 0x8(%rcx,%rdx)
    000002ce: 	jne	.Ltmp326 # Offset: 718
    000002d0: 	addq	$0x1, %rax
.Ltmp326:
    000002d4: 	leal	0x5(%r11), %r8d
    000002d8: 	cmpl	%r10d, %r8d
    000002db: 	jge	.Ltmp318 # Offset: 731
    000002dd: 	cmpw	%si, 0xa(%rcx,%rdx)
    000002e2: 	jne	.Ltmp327 # Offset: 738
    000002e4: 	addq	$0x1, %rax
.Ltmp327:
    000002e8: 	addl	$0x6, %r11d
    000002ec: 	cmpl	%r10d, %r11d
    000002ef: 	jge	.Ltmp318 # Offset: 751
    000002f1: 	cmpw	0xc(%rcx,%rdx), %si
    000002f6: 	je	.Ltmp328 # Offset: 758
.Ltmp318:
    000002f8: 	addq	%rdi, %rax
    000002fb: 	popq	%rbx
    000002fc: 	popq	%rbp
    000002fd: 	retq # Offset: 765
    000002fe: 	nop # Size: 2
.Ltmp323:
    00000300: 	addq	$0x1, %rax
    00000304: 	jmp	.Ltmp329 # Offset: 772
    00000306: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp324:
    00000310: 	addq	$0x1, %rax
    00000314: 	jmp	.Ltmp330 # Offset: 788
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp325:
    00000320: 	leal	0x4(%r11), %r8d
    00000324: 	addq	$0x1, %rax
    00000328: 	cmpl	%r8d, %r10d
    0000032b: 	jg	.Ltmp331 # Offset: 811
    0000032d: 	jmp	.Ltmp318 # Offset: 813
    0000032f: 	nop # Size: 1
.Ltmp328:
    00000330: 	addq	$0x1, %rax
    00000334: 	popq	%rbx
    00000335: 	popq	%rbp
    00000336: 	addq	%rdi, %rax
    00000339: 	retq # Offset: 825
    0000033a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp314:
    00000340: 	xorl	%edi, %edi
    00000342: 	xorl	%r11d, %r11d
    00000345: 	xorl	%eax, %eax
    00000347: 	jmp	.Ltmp332 # Offset: 839
.Ltmp315:
    0000034c: 	xorl	%edx, %edx
    0000034e: 	xorl	%r8d, %r8d
    00000351: 	xorl	%ebx, %ebx
    00000353: 	xorl	%edi, %edi
    00000355: 	xorl	%eax, %eax
    00000357: 	jmp	.Ltmp333 # Offset: 855
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8ItEmPT_iS0_"

Binary Function "_Z6count1IsEmPT_iS0_" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x7040
  Size        : 0x18a
  MaxSize     : 0x190
  Offset      : 0x7040
  Section     : .text
  Orc Section : .local.text._Z6count1IsEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp334 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x6, %eax
    00000014: 	jbe	.Ltmp335 # Offset: 20
    0000001a: 	shrl	$0x3, %esi
    0000001d: 	movd	%edx, %xmm5
    00000021: 	pxor	%xmm3, %xmm3
    00000025: 	movq	%rdi, %rax
    00000028: 	punpcklwd	%xmm5, %xmm5
    0000002c: 	pxor	%xmm4, %xmm4
    00000030: 	pxor	%xmm2, %xmm2
    00000034: 	subl	$0x1, %esi
    00000037: 	shlq	$0x4, %rsi
    0000003b: 	movdqa	DATAat0x19260(%rip), %xmm7
    00000043: 	pshufd	$0x0, %xmm5, %xmm5
    00000048: 	leaq	0x10(%rdi,%rsi), %rsi
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp336:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	addq	$0x10, %rax
    00000058: 	pcmpeqw	%xmm5, %xmm0
    0000005c: 	pand	%xmm7, %xmm0
    00000060: 	movdqa	%xmm0, %xmm1
    00000064: 	punpckhwd	%xmm4, %xmm0
    00000068: 	movdqa	%xmm0, %xmm6
    0000006c: 	punpcklwd	%xmm4, %xmm1
    00000070: 	punpckhdq	%xmm2, %xmm0
    00000074: 	punpckldq	%xmm2, %xmm6
    00000078: 	paddq	%xmm6, %xmm0
    0000007c: 	movdqa	%xmm1, %xmm6
    00000080: 	punpckhdq	%xmm2, %xmm1
    00000084: 	punpckldq	%xmm2, %xmm6
    00000088: 	paddq	%xmm6, %xmm1
    0000008c: 	paddq	%xmm1, %xmm0
    00000090: 	paddq	%xmm0, %xmm3
    00000094: 	cmpq	%rsi, %rax
    00000097: 	jne	.Ltmp336 # Offset: 151
    00000099: 	movdqa	%xmm3, %xmm0
    0000009d: 	movl	%ecx, %esi
    0000009f: 	psrldq	$0x8, %xmm0
    000000a4: 	andl	$-0x8, %esi
    000000a7: 	paddq	%xmm0, %xmm3
    000000ab: 	movq	%xmm3, %rax
    000000b0: 	testb	$0x7, %cl
    000000b3: 	je	.Ltmp337 # Offset: 179
.Ltmp349:
    000000b9: 	movslq	%esi, %r9
    000000bc: 	leaq	(%r9,%r9), %r8
    000000c0: 	cmpw	%dx, (%rdi,%r9,2)
    000000c5: 	jne	.Ltmp338 # Offset: 197
    000000c7: 	addq	$0x1, %rax
.Ltmp338:
    000000cb: 	leal	0x1(%rsi), %r9d
    000000cf: 	cmpl	%ecx, %r9d
    000000d2: 	jge	.Ltmp339 # Offset: 210
    000000d4: 	cmpw	0x2(%rdi,%r8), %dx
    000000da: 	je	.Ltmp340 # Offset: 218
.Ltmp346:
    000000dc: 	leal	0x2(%rsi), %r9d
    000000e0: 	cmpl	%r9d, %ecx
    000000e3: 	jle	.Ltmp339 # Offset: 227
    000000e5: 	cmpw	0x4(%rdi,%r8), %dx
    000000eb: 	je	.Ltmp341 # Offset: 235
.Ltmp347:
    000000ed: 	leal	0x3(%rsi), %r9d
    000000f1: 	cmpl	%r9d, %ecx
    000000f4: 	jle	.Ltmp339 # Offset: 244
    000000f6: 	cmpw	0x6(%rdi,%r8), %dx
    000000fc: 	je	.Ltmp342 # Offset: 252
    000000fe: 	leal	0x4(%rsi), %r9d
    00000102: 	cmpl	%r9d, %ecx
    00000105: 	jle	.Ltmp339 # Offset: 261
.Ltmp348:
    00000107: 	cmpw	0x8(%rdi,%r8), %dx
    0000010d: 	jne	.Ltmp343 # Offset: 269
    0000010f: 	addq	$0x1, %rax
.Ltmp343:
    00000113: 	leal	0x5(%rsi), %r9d
    00000117: 	cmpl	%r9d, %ecx
    0000011a: 	jle	.Ltmp339 # Offset: 282
    0000011c: 	cmpw	0xa(%rdi,%r8), %dx
    00000122: 	jne	.Ltmp344 # Offset: 290
    00000124: 	addq	$0x1, %rax
.Ltmp344:
    00000128: 	addl	$0x6, %esi
    0000012b: 	cmpl	%esi, %ecx
    0000012d: 	jle	.Ltmp339 # Offset: 301
    0000012f: 	cmpw	0xc(%rdi,%r8), %dx
    00000135: 	je	.Ltmp345 # Offset: 309
.Ltmp339:
    00000137: 	retq # Offset: 311
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp340:
    00000140: 	addq	$0x1, %rax
    00000144: 	jmp	.Ltmp346 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp341:
    00000150: 	addq	$0x1, %rax
    00000154: 	jmp	.Ltmp347 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp342:
    00000160: 	leal	0x4(%rsi), %r9d
    00000164: 	addq	$0x1, %rax
    00000168: 	cmpl	%r9d, %ecx
    0000016b: 	jg	.Ltmp348 # Offset: 363
    0000016d: 	jmp	.Ltmp339 # Offset: 365
    0000016f: 	nop # Size: 1
.Ltmp345:
    00000170: 	addq	$0x1, %rax
    00000174: 	retq # Offset: 372
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp334:
    00000178: 	xorl	%eax, %eax
    0000017a: 	retq # Offset: 378
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp337:
    00000180: 	retq # Offset: 384
.Ltmp335:
    00000181: 	xorl	%esi, %esi
    00000183: 	xorl	%eax, %eax
    00000185: 	jmp	.Ltmp349 # Offset: 389
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1IsEmPT_iS0_"

Binary Function "_Z6count2IsEmPT_iS0_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x71d0
  Size        : 0x9f
  MaxSize     : 0xa0
  Offset      : 0x71d0
  Section     : .text
  Orc Section : .local.text._Z6count2IsEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %r10d
    0000000a: 	movl	%esi, %edi
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp350 # Offset: 15
    00000015: 	leal	-0x2(%rsi), %r11d
    00000019: 	movq	%r9, %rax
    0000001c: 	xorl	%r8d, %r8d
    0000001f: 	shrl	%r11d
    00000022: 	movl	%r11d, %ecx
    00000025: 	leaq	0x4(%r9,%rcx,4), %rsi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp351:
    00000030: 	xorl	%ecx, %ecx
    00000032: 	cmpw	(%rax), %dx
    00000035: 	sete	%cl
    00000038: 	addq	%rcx, %r8
    0000003b: 	xorl	%ecx, %ecx
    0000003d: 	cmpw	0x2(%rax), %dx
    00000041: 	sete	%cl
    00000044: 	addq	$0x4, %rax
    00000048: 	addq	%rcx, %r8
    0000004b: 	cmpq	%rax, %rsi
    0000004e: 	jne	.Ltmp351 # Offset: 78
    00000050: 	leal	0x2(%r11,%r11), %eax
.Ltmp356:
    00000055: 	cmpl	%eax, %edi
    00000057: 	jle	.Ltmp352 # Offset: 87
    00000059: 	movslq	%eax, %rdx
    0000005c: 	leaq	(%rdx,%rdx), %rcx
    00000060: 	cmpw	%r10w, (%r9,%rdx,2)
    00000065: 	je	.Ltmp353 # Offset: 101
    00000067: 	addl	$0x1, %eax
    0000006a: 	cmpl	%eax, %edi
    0000006c: 	jle	.Ltmp352 # Offset: 108
.Ltmp355:
    0000006e: 	cmpw	0x2(%r9,%rcx), %r10w
    00000074: 	je	.Ltmp354 # Offset: 116
.Ltmp352:
    00000076: 	movq	%r8, %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp353:
    00000080: 	addl	$0x1, %eax
    00000083: 	addq	$0x1, %r8
    00000087: 	cmpl	%eax, %edi
    00000089: 	jle	.Ltmp352 # Offset: 137
    0000008b: 	jmp	.Ltmp355 # Offset: 139
.Ltmp354:
    0000008d: 	addq	$0x1, %r8
    00000091: 	jmp	.Ltmp352 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp350:
    00000098: 	xorl	%eax, %eax
    0000009a: 	xorl	%r8d, %r8d
    0000009d: 	jmp	.Ltmp356 # Offset: 157
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2IsEmPT_iS0_"

Binary Function "_Z6count3IsEmPT_iS0_" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x7270
  Size        : 0xee
  MaxSize     : 0xf0
  Offset      : 0x7270
  Section     : .text
  Orc Section : .local.text._Z6count3IsEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r8d
    0000000a: 	movl	%edx, %r10d
    0000000d: 	movl	%edx, %ecx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp357 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r11d
    0000001c: 	movq	%rdi, %rdx
    0000001f: 	shrl	$0x2, %r11d
    00000023: 	movl	%r11d, %eax
    00000026: 	leaq	0x8(%rdi,%rax,8), %rdi
    0000002b: 	xorl	%eax, %eax
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp358:
    00000030: 	xorl	%esi, %esi
    00000032: 	cmpw	(%rdx), %cx
    00000035: 	sete	%sil
    00000039: 	addq	%rsi, %rax
    0000003c: 	xorl	%esi, %esi
    0000003e: 	cmpw	0x2(%rdx), %cx
    00000042: 	sete	%sil
    00000046: 	addq	%rsi, %rax
    00000049: 	xorl	%esi, %esi
    0000004b: 	cmpw	0x4(%rdx), %cx
    0000004f: 	sete	%sil
    00000053: 	addq	%rsi, %rax
    00000056: 	xorl	%esi, %esi
    00000058: 	cmpw	0x6(%rdx), %cx
    0000005c: 	sete	%sil
    00000060: 	addq	$0x8, %rdx
    00000064: 	addq	%rsi, %rax
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	jne	.Ltmp358 # Offset: 106
    0000006c: 	leal	0x4(,%r11,4), %edx
.Ltmp366:
    00000074: 	cmpl	%edx, %r8d
    00000077: 	jle	.Ltmp359 # Offset: 119
    00000079: 	movslq	%edx, %rcx
    0000007c: 	leaq	(%rcx,%rcx), %rsi
    00000080: 	cmpw	%r10w, (%r9,%rcx,2)
    00000085: 	je	.Ltmp360 # Offset: 133
.Ltmp364:
    00000087: 	leal	0x1(%rdx), %ecx
    0000008a: 	cmpl	%r8d, %ecx
    0000008d: 	jge	.Ltmp359 # Offset: 141
    0000008f: 	cmpw	%r10w, 0x2(%r9,%rsi)
    00000095: 	je	.Ltmp361 # Offset: 149
    00000097: 	leal	0x2(%rdx), %ecx
    0000009a: 	cmpl	%ecx, %r8d
    0000009d: 	jle	.Ltmp359 # Offset: 157
.Ltmp365:
    0000009f: 	cmpw	0x4(%r9,%rsi), %r10w
    000000a5: 	jne	.Ltmp362 # Offset: 165
    000000a7: 	addq	$0x1, %rax
.Ltmp362:
    000000ab: 	addl	$0x3, %edx
    000000ae: 	cmpl	%r8d, %edx
    000000b1: 	jge	.Ltmp359 # Offset: 177
    000000b3: 	cmpw	0x6(%r9,%rsi), %r10w
    000000b9: 	je	.Ltmp363 # Offset: 185
.Ltmp359:
    000000bb: 	retq # Offset: 187
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp360:
    000000c0: 	addq	$0x1, %rax
    000000c4: 	jmp	.Ltmp364 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp361:
    000000d0: 	leal	0x2(%rdx), %ecx
    000000d3: 	addq	$0x1, %rax
    000000d7: 	cmpl	%ecx, %r8d
    000000da: 	jg	.Ltmp365 # Offset: 218
    000000dc: 	jmp	.Ltmp359 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp363:
    000000e0: 	addq	$0x1, %rax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp357:
    000000e8: 	xorl	%edx, %edx
    000000ea: 	xorl	%eax, %eax
    000000ec: 	jmp	.Ltmp366 # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3IsEmPT_iS0_"

Binary Function "_Z6count4IsEmPT_iS0_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x7360
  Size        : 0x20b
  MaxSize     : 0x210
  Offset      : 0x7360
  Section     : .text
  Orc Section : .local.text._Z6count4IsEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r8
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %r10d
    0000000e: 	cmpl	$0x3, %esi
    00000011: 	jle	.Ltmp367 # Offset: 17
    00000017: 	leal	-0x4(%r9), %ebx
    0000001b: 	movl	%edx, %esi
    0000001d: 	xorl	%ecx, %ecx
    0000001f: 	movq	%rdi, %rdx
    00000022: 	shrl	$0x2, %ebx
    00000025: 	movl	%ebx, %eax
    00000027: 	leaq	0x8(%rdi,%rax,8), %r11
    0000002c: 	xorl	%eax, %eax
    0000002e: 	nop # Size: 2
.Ltmp368:
    00000030: 	xorl	%edi, %edi
    00000032: 	cmpw	(%rdx), %si
    00000035: 	sete	%dil
    00000039: 	addq	%rdi, %rcx
    0000003c: 	xorl	%edi, %edi
    0000003e: 	cmpw	0x2(%rdx), %si
    00000042: 	sete	%dil
    00000046: 	addq	%rdi, %rax
    00000049: 	xorl	%edi, %edi
    0000004b: 	cmpw	0x4(%rdx), %si
    0000004f: 	sete	%dil
    00000053: 	addq	%rdi, %rcx
    00000056: 	xorl	%edi, %edi
    00000058: 	cmpw	0x6(%rdx), %si
    0000005c: 	sete	%dil
    00000060: 	addq	$0x8, %rdx
    00000064: 	addq	%rdi, %rax
    00000067: 	cmpq	%r11, %rdx
    0000006a: 	jne	.Ltmp368 # Offset: 106
    0000006c: 	leal	0x4(,%rbx,4), %edi
.Ltmp383:
    00000073: 	cmpl	%edi, %r9d
    00000076: 	jle	.Ltmp369 # Offset: 118
    0000007c: 	movl	%r9d, %ebx
    0000007f: 	subl	%edi, %ebx
    00000081: 	leal	-0x1(%rbx), %edx
    00000084: 	cmpl	$0x6, %edx
    00000087: 	jbe	.Ltmp370 # Offset: 135
    0000008d: 	movd	%r10d, %xmm5
    00000092: 	pxor	%xmm3, %xmm3
    00000096: 	pxor	%xmm4, %xmm4
    0000009a: 	movslq	%edi, %rdx
    0000009d: 	leaq	(%r8,%rdx,2), %rsi
    000000a1: 	punpcklwd	%xmm5, %xmm5
    000000a5: 	pxor	%xmm2, %xmm2
    000000a9: 	movl	%ebx, %edx
    000000ab: 	shrl	$0x3, %edx
    000000ae: 	movdqa	DATAat0x19260(%rip), %xmm7
    000000b6: 	pshufd	$0x0, %xmm5, %xmm5
    000000bb: 	leal	-0x1(%rdx), %r11d
    000000bf: 	leaq	0x10(%rsi), %rdx
    000000c3: 	shlq	$0x4, %r11
    000000c7: 	addq	%rdx, %r11
    000000ca: 	jmp	.Ltmp371 # Offset: 202
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp372:
    000000d0: 	addq	$0x10, %rdx
.Ltmp371:
    000000d4: 	movdqu	(%rsi), %xmm0
    000000d8: 	movq	%rdx, %rsi
    000000db: 	pcmpeqw	%xmm5, %xmm0
    000000df: 	pand	%xmm7, %xmm0
    000000e3: 	movdqa	%xmm0, %xmm1
    000000e7: 	punpckhwd	%xmm4, %xmm0
    000000eb: 	punpcklwd	%xmm4, %xmm1
    000000ef: 	movdqa	%xmm1, %xmm6
    000000f3: 	punpckhdq	%xmm2, %xmm1
    000000f7: 	punpckldq	%xmm2, %xmm6
    000000fb: 	paddq	%xmm6, %xmm1
    000000ff: 	movdqa	%xmm0, %xmm6
    00000103: 	punpckhdq	%xmm2, %xmm0
    00000107: 	punpckldq	%xmm2, %xmm6
    0000010b: 	paddq	%xmm6, %xmm0
    0000010f: 	paddq	%xmm0, %xmm1
    00000113: 	paddq	%xmm1, %xmm3
    00000117: 	cmpq	%rdx, %r11
    0000011a: 	jne	.Ltmp372 # Offset: 282
    0000011c: 	movdqa	%xmm3, %xmm0
    00000120: 	psrldq	$0x8, %xmm0
    00000125: 	paddq	%xmm0, %xmm3
    00000129: 	movq	%xmm3, %rdx
    0000012e: 	addq	%rdx, %rcx
    00000131: 	movl	%ebx, %edx
    00000133: 	andl	$-0x8, %edx
    00000136: 	addl	%edx, %edi
    00000138: 	cmpl	%edx, %ebx
    0000013a: 	je	.Ltmp369 # Offset: 314
.Ltmp370:
    0000013c: 	movslq	%edi, %rsi
    0000013f: 	leaq	(%rsi,%rsi), %rdx
    00000143: 	cmpw	%r10w, (%r8,%rsi,2)
    00000148: 	jne	.Ltmp373 # Offset: 328
    0000014a: 	addq	$0x1, %rcx
.Ltmp373:
    0000014e: 	leal	0x1(%rdi), %esi
    00000151: 	cmpl	%r9d, %esi
    00000154: 	jge	.Ltmp369 # Offset: 340
    00000156: 	cmpw	0x2(%r8,%rdx), %r10w
    0000015c: 	je	.Ltmp374 # Offset: 348
.Ltmp380:
    0000015e: 	leal	0x2(%rdi), %esi
    00000161: 	cmpl	%r9d, %esi
    00000164: 	jge	.Ltmp369 # Offset: 356
    00000166: 	cmpw	%r10w, 0x4(%r8,%rdx)
    0000016c: 	je	.Ltmp375 # Offset: 364
.Ltmp381:
    0000016e: 	leal	0x3(%rdi), %esi
    00000171: 	cmpl	%esi, %r9d
    00000174: 	jle	.Ltmp369 # Offset: 372
    00000176: 	cmpw	%r10w, 0x6(%r8,%rdx)
    0000017c: 	je	.Ltmp376 # Offset: 380
    0000017e: 	leal	0x4(%rdi), %esi
    00000181: 	cmpl	%r9d, %esi
    00000184: 	jge	.Ltmp369 # Offset: 388
.Ltmp382:
    00000186: 	cmpw	%r10w, 0x8(%r8,%rdx)
    0000018c: 	jne	.Ltmp377 # Offset: 396
    0000018e: 	addq	$0x1, %rcx
.Ltmp377:
    00000192: 	leal	0x5(%rdi), %esi
    00000195: 	cmpl	%r9d, %esi
    00000198: 	jge	.Ltmp369 # Offset: 408
    0000019a: 	cmpw	%r10w, 0xa(%r8,%rdx)
    000001a0: 	jne	.Ltmp378 # Offset: 416
    000001a2: 	addq	$0x1, %rcx
.Ltmp378:
    000001a6: 	addl	$0x6, %edi
    000001a9: 	cmpl	%edi, %r9d
    000001ac: 	jle	.Ltmp369 # Offset: 428
    000001ae: 	cmpw	0xc(%r8,%rdx), %r10w
    000001b4: 	je	.Ltmp379 # Offset: 436
.Ltmp369:
    000001b6: 	addq	%rcx, %rax
    000001b9: 	popq	%rbx
    000001ba: 	retq # Offset: 442
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp374:
    000001c0: 	addq	$0x1, %rcx
    000001c4: 	jmp	.Ltmp380 # Offset: 452
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp375:
    000001d0: 	addq	$0x1, %rcx
    000001d4: 	jmp	.Ltmp381 # Offset: 468
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp376:
    000001e0: 	leal	0x4(%rdi), %esi
    000001e3: 	addq	$0x1, %rcx
    000001e7: 	cmpl	%r9d, %esi
    000001ea: 	jl	.Ltmp382 # Offset: 490
    000001ec: 	jmp	.Ltmp369 # Offset: 492
    000001ee: 	nop # Size: 2
.Ltmp379:
    000001f0: 	addq	$0x1, %rcx
    000001f4: 	popq	%rbx
    000001f5: 	addq	%rcx, %rax
    000001f8: 	retq # Offset: 504
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp367:
    00000200: 	xorl	%edi, %edi
    00000202: 	xorl	%eax, %eax
    00000204: 	xorl	%ecx, %ecx
    00000206: 	jmp	.Ltmp383 # Offset: 518
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4IsEmPT_iS0_"

Binary Function "_Z6count5IsEmPT_iS0_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x7570
  Size        : 0x2fe
  MaxSize     : 0x300
  Offset      : 0x7570
  Section     : .text
  Orc Section : .local.text._Z6count5IsEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rcx
    00000008: 	movl	%esi, %r10d
    0000000b: 	cmpl	$0x3, %esi
    0000000e: 	jle	.Ltmp384 # Offset: 14
    00000014: 	leal	-0x4(%rsi), %eax
    00000017: 	movl	%eax, %r11d
    0000001a: 	shrl	$0x2, %r11d
    0000001e: 	addl	$0x1, %r11d
    00000022: 	cmpl	$0x3, %eax
    00000025: 	jbe	.Ltmp385 # Offset: 37
    0000002b: 	movl	%r11d, %esi
    0000002e: 	movd	%edx, %xmm9
    00000033: 	pxor	%xmm5, %xmm5
    00000037: 	movq	%rdi, %rax
    0000003a: 	punpcklwd	%xmm9, %xmm9
    0000003f: 	shrl	%esi
    00000041: 	movdqa	%xmm5, %xmm6
    00000045: 	movdqa	%xmm5, %xmm3
    00000049: 	movdqa	%xmm5, %xmm7
    0000004d: 	pxor	%xmm8, %xmm8
    00000052: 	pxor	%xmm4, %xmm4
    00000056: 	subl	$0x1, %esi
    00000059: 	shlq	$0x4, %rsi
    0000005d: 	movdqa	DATAat0x19260(%rip), %xmm2
    00000065: 	pshufd	$0x0, %xmm9, %xmm9
    0000006b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp386:
    00000070: 	movdqu	(%rax), %xmm0
    00000074: 	addq	$0x10, %rax
    00000078: 	pcmpeqw	%xmm9, %xmm0
    0000007d: 	pand	%xmm2, %xmm0
    00000081: 	movdqa	%xmm0, %xmm1
    00000085: 	punpckhwd	%xmm8, %xmm0
    0000008a: 	punpcklwd	%xmm8, %xmm1
    0000008f: 	movdqa	%xmm1, %xmm10
    00000094: 	punpckhdq	%xmm4, %xmm1
    00000098: 	paddq	%xmm1, %xmm3
    0000009c: 	movdqa	%xmm0, %xmm1
    000000a0: 	punpckldq	%xmm4, %xmm10
    000000a5: 	punpckldq	%xmm4, %xmm1
    000000a9: 	punpckhdq	%xmm4, %xmm0
    000000ad: 	paddq	%xmm10, %xmm7
    000000b2: 	paddq	%xmm1, %xmm6
    000000b6: 	paddq	%xmm0, %xmm5
    000000ba: 	cmpq	%rsi, %rax
    000000bd: 	jne	.Ltmp386 # Offset: 189
    000000bf: 	movhlps	%xmm7, %xmm2
    000000c2: 	movq	%xmm6, %rsi
    000000c7: 	movq	%xmm7, %rax
    000000cc: 	movl	%r11d, %edi
    000000cf: 	movq	%xmm2, %r9
    000000d4: 	movhlps	%xmm6, %xmm2
    000000d7: 	addq	%rsi, %rax
    000000da: 	andl	$-0x2, %edi
    000000dd: 	movq	%xmm2, %rsi
    000000e2: 	movq	%xmm3, %rbx
    000000e7: 	movhlps	%xmm3, %xmm2
    000000ea: 	addq	%rsi, %r9
    000000ed: 	movhlps	%xmm5, %xmm6
    000000f0: 	movq	%xmm5, %rsi
    000000f5: 	addq	%rsi, %rbx
    000000f8: 	movq	%xmm2, %r8
    000000fd: 	movq	%xmm6, %rsi
    00000102: 	addq	%rsi, %r8
    00000105: 	leal	(,%rdi,4), %esi
    0000010c: 	cmpl	%edi, %r11d
    0000010f: 	je	.Ltmp387 # Offset: 271
.Ltmp406:
    00000111: 	movslq	%esi, %rsi
    00000114: 	leaq	(%rsi,%rsi), %rdi
    00000118: 	cmpw	(%rcx,%rsi,2), %dx
    0000011c: 	jne	.Ltmp388 # Offset: 284
    0000011e: 	addq	$0x1, %rax
.Ltmp388:
    00000122: 	cmpw	0x2(%rcx,%rdi), %dx
    00000127: 	jne	.Ltmp389 # Offset: 295
    00000129: 	addq	$0x1, %r9
.Ltmp389:
    0000012d: 	cmpw	0x4(%rcx,%rdi), %dx
    00000132: 	jne	.Ltmp390 # Offset: 306
    00000134: 	addq	$0x1, %rbx
.Ltmp390:
    00000138: 	cmpw	0x6(%rcx,%rdi), %dx
    0000013d: 	jne	.Ltmp387 # Offset: 317
    0000013f: 	addq	$0x1, %r8
.Ltmp387:
    00000143: 	addq	%rbx, %r9
    00000146: 	shll	$0x2, %r11d
    0000014a: 	addq	%r8, %r9
.Ltmp405:
    0000014d: 	cmpl	%r11d, %r10d
    00000150: 	jle	.Ltmp391 # Offset: 336
    00000156: 	movl	%r10d, %ebx
    00000159: 	subl	%r11d, %ebx
    0000015c: 	leal	-0x1(%rbx), %esi
    0000015f: 	cmpl	$0x6, %esi
    00000162: 	jbe	.Ltmp392 # Offset: 354
    00000168: 	movd	%edx, %xmm6
    0000016c: 	pxor	%xmm4, %xmm4
    00000170: 	pxor	%xmm5, %xmm5
    00000174: 	movslq	%r11d, %rsi
    00000177: 	leaq	(%rcx,%rsi,2), %rdi
    0000017b: 	punpcklwd	%xmm6, %xmm6
    0000017f: 	pxor	%xmm3, %xmm3
    00000183: 	movl	%ebx, %esi
    00000185: 	shrl	$0x3, %esi
    00000188: 	movdqa	DATAat0x19260(%rip), %xmm2
    00000190: 	pshufd	$0x0, %xmm6, %xmm6
    00000195: 	leal	-0x1(%rsi), %r8d
    00000199: 	leaq	0x10(%rdi), %rsi
    0000019d: 	shlq	$0x4, %r8
    000001a1: 	addq	%rsi, %r8
    000001a4: 	jmp	.Ltmp393 # Offset: 420
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp394:
    000001b0: 	addq	$0x10, %rsi
.Ltmp393:
    000001b4: 	movdqu	(%rdi), %xmm0
    000001b8: 	movq	%rsi, %rdi
    000001bb: 	pcmpeqw	%xmm6, %xmm0
    000001bf: 	pand	%xmm2, %xmm0
    000001c3: 	movdqa	%xmm0, %xmm1
    000001c7: 	punpckhwd	%xmm5, %xmm0
    000001cb: 	movdqa	%xmm0, %xmm7
    000001cf: 	punpcklwd	%xmm5, %xmm1
    000001d3: 	punpckhdq	%xmm3, %xmm0
    000001d7: 	punpckldq	%xmm3, %xmm7
    000001db: 	paddq	%xmm7, %xmm0
    000001df: 	movdqa	%xmm1, %xmm7
    000001e3: 	punpckhdq	%xmm3, %xmm1
    000001e7: 	punpckldq	%xmm3, %xmm7
    000001eb: 	paddq	%xmm7, %xmm1
    000001ef: 	paddq	%xmm1, %xmm0
    000001f3: 	paddq	%xmm0, %xmm4
    000001f7: 	cmpq	%rsi, %r8
    000001fa: 	jne	.Ltmp394 # Offset: 506
    000001fc: 	movdqa	%xmm4, %xmm0
    00000200: 	psrldq	$0x8, %xmm0
    00000205: 	paddq	%xmm4, %xmm0
    00000209: 	movq	%xmm0, %rsi
    0000020e: 	addq	%rsi, %rax
    00000211: 	movl	%ebx, %esi
    00000213: 	andl	$-0x8, %esi
    00000216: 	addl	%esi, %r11d
    00000219: 	cmpl	%esi, %ebx
    0000021b: 	je	.Ltmp391 # Offset: 539
.Ltmp392:
    0000021d: 	movslq	%r11d, %rsi
    00000220: 	leaq	(%rsi,%rsi), %rdi
    00000224: 	cmpw	(%rcx,%rsi,2), %dx
    00000228: 	jne	.Ltmp395 # Offset: 552
    0000022a: 	addq	$0x1, %rax
.Ltmp395:
    0000022e: 	leal	0x1(%r11), %esi
    00000232: 	cmpl	%r10d, %esi
    00000235: 	jge	.Ltmp391 # Offset: 565
    00000237: 	cmpw	%dx, 0x2(%rcx,%rdi)
    0000023c: 	je	.Ltmp396 # Offset: 572
.Ltmp402:
    0000023e: 	leal	0x2(%r11), %esi
    00000242: 	cmpl	%esi, %r10d
    00000245: 	jle	.Ltmp391 # Offset: 581
    00000247: 	cmpw	0x4(%rcx,%rdi), %dx
    0000024c: 	je	.Ltmp397 # Offset: 588
.Ltmp403:
    0000024e: 	leal	0x3(%r11), %esi
    00000252: 	cmpl	%r10d, %esi
    00000255: 	jge	.Ltmp391 # Offset: 597
    00000257: 	cmpw	0x6(%rcx,%rdi), %dx
    0000025c: 	je	.Ltmp398 # Offset: 604
    0000025e: 	leal	0x4(%r11), %esi
    00000262: 	cmpl	%r10d, %esi
    00000265: 	jge	.Ltmp391 # Offset: 613
.Ltmp404:
    00000267: 	cmpw	0x8(%rcx,%rdi), %dx
    0000026c: 	jne	.Ltmp399 # Offset: 620
    0000026e: 	addq	$0x1, %rax
.Ltmp399:
    00000272: 	leal	0x5(%r11), %esi
    00000276: 	cmpl	%esi, %r10d
    00000279: 	jle	.Ltmp391 # Offset: 633
    0000027b: 	cmpw	0xa(%rcx,%rdi), %dx
    00000280: 	jne	.Ltmp400 # Offset: 640
    00000282: 	addq	$0x1, %rax
.Ltmp400:
    00000286: 	leal	0x6(%r11), %esi
    0000028a: 	cmpl	%esi, %r10d
    0000028d: 	jle	.Ltmp391 # Offset: 653
    0000028f: 	cmpw	0xc(%rcx,%rdi), %dx
    00000294: 	je	.Ltmp401 # Offset: 660
.Ltmp391:
    00000296: 	addq	%r9, %rax
    00000299: 	popq	%rbx
    0000029a: 	retq # Offset: 666
    0000029b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp396:
    000002a0: 	addq	$0x1, %rax
    000002a4: 	jmp	.Ltmp402 # Offset: 676
    000002a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp397:
    000002b0: 	addq	$0x1, %rax
    000002b4: 	jmp	.Ltmp403 # Offset: 692
    000002b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp398:
    000002c0: 	leal	0x4(%r11), %esi
    000002c4: 	addq	$0x1, %rax
    000002c8: 	cmpl	%r10d, %esi
    000002cb: 	jl	.Ltmp404 # Offset: 715
    000002cd: 	jmp	.Ltmp391 # Offset: 717
    000002cf: 	nop # Size: 1
.Ltmp401:
    000002d0: 	addq	$0x1, %rax
    000002d4: 	popq	%rbx
    000002d5: 	addq	%r9, %rax
    000002d8: 	retq # Offset: 728
    000002d9: 	nopl	(%rax) # Size: 7
.Ltmp384:
    000002e0: 	xorl	%r9d, %r9d
    000002e3: 	xorl	%r11d, %r11d
    000002e6: 	xorl	%eax, %eax
    000002e8: 	jmp	.Ltmp405 # Offset: 744
.Ltmp385:
    000002ed: 	xorl	%esi, %esi
    000002ef: 	xorl	%r8d, %r8d
    000002f2: 	xorl	%ebx, %ebx
    000002f4: 	xorl	%r9d, %r9d
    000002f7: 	xorl	%eax, %eax
    000002f9: 	jmp	.Ltmp406 # Offset: 761
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5IsEmPT_iS0_"

Binary Function "_Z6count6IsEmPT_iS0_" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x7870
  Size        : 0x2fd
  MaxSize     : 0x300
  Offset      : 0x7870
  Section     : .text
  Orc Section : .local.text._Z6count6IsEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	pushq	%rbx
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %esi
    0000000d: 	cmpl	$0x3, %r9d
    00000011: 	jle	.Ltmp407 # Offset: 17
    00000017: 	leal	-0x4(%r9), %eax
    0000001b: 	movl	%eax, %r11d
    0000001e: 	shrl	$0x2, %r11d
    00000022: 	addl	$0x1, %r11d
    00000026: 	cmpl	$0x3, %eax
    00000029: 	jbe	.Ltmp408 # Offset: 41
    0000002f: 	movd	%edx, %xmm9
    00000034: 	movl	%r11d, %edx
    00000037: 	pxor	%xmm4, %xmm4
    0000003b: 	movq	%rdi, %rax
    0000003e: 	punpcklwd	%xmm9, %xmm9
    00000043: 	shrl	%edx
    00000045: 	movdqa	%xmm4, %xmm6
    00000049: 	movdqa	%xmm4, %xmm5
    0000004d: 	movdqa	%xmm4, %xmm7
    00000051: 	pxor	%xmm8, %xmm8
    00000056: 	pxor	%xmm3, %xmm3
    0000005a: 	subl	$0x1, %edx
    0000005d: 	shlq	$0x4, %rdx
    00000061: 	movdqa	DATAat0x19260(%rip), %xmm2
    00000069: 	pshufd	$0x0, %xmm9, %xmm9
    0000006f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp409:
    00000078: 	movdqu	(%rax), %xmm0
    0000007c: 	addq	$0x10, %rax
    00000080: 	pcmpeqw	%xmm9, %xmm0
    00000085: 	pand	%xmm2, %xmm0
    00000089: 	movdqa	%xmm0, %xmm1
    0000008d: 	punpckhwd	%xmm8, %xmm0
    00000092: 	punpcklwd	%xmm8, %xmm1
    00000097: 	movdqa	%xmm1, %xmm10
    0000009c: 	punpckhdq	%xmm3, %xmm1
    000000a0: 	paddq	%xmm1, %xmm5
    000000a4: 	movdqa	%xmm0, %xmm1
    000000a8: 	punpckldq	%xmm3, %xmm10
    000000ad: 	punpckldq	%xmm3, %xmm1
    000000b1: 	punpckhdq	%xmm3, %xmm0
    000000b5: 	paddq	%xmm10, %xmm7
    000000ba: 	paddq	%xmm1, %xmm6
    000000be: 	paddq	%xmm0, %xmm4
    000000c2: 	cmpq	%rdx, %rax
    000000c5: 	jne	.Ltmp409 # Offset: 197
    000000c7: 	movhlps	%xmm7, %xmm2
    000000ca: 	movq	%xmm6, %rdx
    000000cf: 	movq	%xmm7, %rax
    000000d4: 	movl	%r11d, %ebx
    000000d7: 	movq	%xmm2, %rdi
    000000dc: 	movhlps	%xmm6, %xmm2
    000000df: 	addq	%rdx, %rax
    000000e2: 	andl	$-0x2, %ebx
    000000e5: 	movq	%xmm2, %rdx
    000000ea: 	movq	%xmm5, %r10
    000000ef: 	movhlps	%xmm5, %xmm2
    000000f2: 	addq	%rdx, %rdi
    000000f5: 	movq	%xmm4, %rdx
    000000fa: 	psrldq	$0x8, %xmm4
    000000ff: 	addq	%rdx, %r10
    00000102: 	movq	%xmm2, %r8
    00000107: 	movq	%xmm4, %rdx
    0000010c: 	addq	%rdx, %r8
    0000010f: 	leal	(,%rbx,4), %edx
    00000116: 	cmpl	%ebx, %r11d
    00000119: 	je	.Ltmp410 # Offset: 281
.Ltmp426:
    0000011b: 	movslq	%edx, %rdx
    0000011e: 	xorl	%ebx, %ebx
    00000120: 	cmpw	%si, (%rcx,%rdx,2)
    00000124: 	sete	%bl
    00000127: 	addq	%rbx, %rax
    0000012a: 	xorl	%ebx, %ebx
    0000012c: 	cmpw	%si, 0x2(%rcx,%rdx,2)
    00000131: 	sete	%bl
    00000134: 	addq	%rbx, %rdi
    00000137: 	xorl	%ebx, %ebx
    00000139: 	cmpw	%si, 0x4(%rcx,%rdx,2)
    0000013e: 	sete	%bl
    00000141: 	addq	%rbx, %r10
    00000144: 	cmpw	%si, 0x6(%rcx,%rdx,2)
    00000149: 	sete	%dl
    0000014c: 	movzbl	%dl, %edx
    0000014f: 	addq	%rdx, %r8
.Ltmp410:
    00000152: 	addq	%r10, %rdi
    00000155: 	shll	$0x2, %r11d
    00000159: 	addq	%r8, %rdi
.Ltmp425:
    0000015c: 	cmpl	%r11d, %r9d
    0000015f: 	jle	.Ltmp411 # Offset: 351
    00000165: 	movl	%r9d, %ebx
    00000168: 	subl	%r11d, %ebx
    0000016b: 	leal	-0x1(%rbx), %edx
    0000016e: 	cmpl	$0x6, %edx
    00000171: 	jbe	.Ltmp412 # Offset: 369
    00000177: 	movd	%esi, %xmm6
    0000017b: 	pxor	%xmm4, %xmm4
    0000017f: 	pxor	%xmm5, %xmm5
    00000183: 	movslq	%r11d, %rdx
    00000186: 	leaq	(%rcx,%rdx,2), %r8
    0000018a: 	punpcklwd	%xmm6, %xmm6
    0000018e: 	pxor	%xmm3, %xmm3
    00000192: 	movl	%ebx, %edx
    00000194: 	shrl	$0x3, %edx
    00000197: 	movdqa	DATAat0x19260(%rip), %xmm2
    0000019f: 	pshufd	$0x0, %xmm6, %xmm6
    000001a4: 	leal	-0x1(%rdx), %r10d
    000001a8: 	leaq	0x10(%r8), %rdx
    000001ac: 	shlq	$0x4, %r10
    000001b0: 	addq	%rdx, %r10
    000001b3: 	jmp	.Ltmp413 # Offset: 435
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp414:
    000001b8: 	addq	$0x10, %rdx
.Ltmp413:
    000001bc: 	movdqu	(%r8), %xmm0
    000001c1: 	movq	%rdx, %r8
    000001c4: 	pcmpeqw	%xmm6, %xmm0
    000001c8: 	pand	%xmm2, %xmm0
    000001cc: 	movdqa	%xmm0, %xmm1
    000001d0: 	punpckhwd	%xmm5, %xmm0
    000001d4: 	movdqa	%xmm0, %xmm7
    000001d8: 	punpcklwd	%xmm5, %xmm1
    000001dc: 	punpckldq	%xmm3, %xmm0
    000001e0: 	punpckhdq	%xmm3, %xmm7
    000001e4: 	paddq	%xmm7, %xmm0
    000001e8: 	movdqa	%xmm1, %xmm7
    000001ec: 	punpckldq	%xmm3, %xmm1
    000001f0: 	punpckhdq	%xmm3, %xmm7
    000001f4: 	paddq	%xmm7, %xmm1
    000001f8: 	paddq	%xmm1, %xmm0
    000001fc: 	paddq	%xmm0, %xmm4
    00000200: 	cmpq	%rdx, %r10
    00000203: 	jne	.Ltmp414 # Offset: 515
    00000205: 	movdqa	%xmm4, %xmm0
    00000209: 	psrldq	$0x8, %xmm0
    0000020e: 	paddq	%xmm4, %xmm0
    00000212: 	movq	%xmm0, %rdx
    00000217: 	addq	%rdx, %rax
    0000021a: 	movl	%ebx, %edx
    0000021c: 	andl	$-0x8, %edx
    0000021f: 	addl	%edx, %r11d
    00000222: 	cmpl	%ebx, %edx
    00000224: 	je	.Ltmp411 # Offset: 548
.Ltmp412:
    00000226: 	movslq	%r11d, %r8
    00000229: 	leaq	(%r8,%r8), %rdx
    0000022d: 	cmpw	(%rcx,%r8,2), %si
    00000232: 	jne	.Ltmp415 # Offset: 562
    00000234: 	addq	$0x1, %rax
.Ltmp415:
    00000238: 	leal	0x1(%r11), %r8d
    0000023c: 	cmpl	%r9d, %r8d
    0000023f: 	jge	.Ltmp411 # Offset: 575
    00000241: 	cmpw	%si, 0x2(%rcx,%rdx)
    00000246: 	je	.Ltmp416 # Offset: 582
.Ltmp422:
    00000248: 	leal	0x2(%r11), %r8d
    0000024c: 	cmpl	%r9d, %r8d
    0000024f: 	jge	.Ltmp411 # Offset: 591
    00000251: 	cmpw	%si, 0x4(%rcx,%rdx)
    00000256: 	je	.Ltmp417 # Offset: 598
.Ltmp423:
    00000258: 	leal	0x3(%r11), %r8d
    0000025c: 	cmpl	%r8d, %r9d
    0000025f: 	jle	.Ltmp411 # Offset: 607
    00000261: 	cmpw	%si, 0x6(%rcx,%rdx)
    00000266: 	je	.Ltmp418 # Offset: 614
    00000268: 	leal	0x4(%r11), %r8d
    0000026c: 	cmpl	%r8d, %r9d
    0000026f: 	jle	.Ltmp411 # Offset: 623
.Ltmp424:
    00000271: 	cmpw	0x8(%rcx,%rdx), %si
    00000276: 	jne	.Ltmp419 # Offset: 630
    00000278: 	addq	$0x1, %rax
.Ltmp419:
    0000027c: 	leal	0x5(%r11), %r8d
    00000280: 	cmpl	%r8d, %r9d
    00000283: 	jle	.Ltmp411 # Offset: 643
    00000285: 	cmpw	0xa(%rcx,%rdx), %si
    0000028a: 	jne	.Ltmp420 # Offset: 650
    0000028c: 	addq	$0x1, %rax
.Ltmp420:
    00000290: 	addl	$0x6, %r11d
    00000294: 	cmpl	%r11d, %r9d
    00000297: 	jle	.Ltmp411 # Offset: 663
    00000299: 	cmpw	0xc(%rcx,%rdx), %si
    0000029e: 	je	.Ltmp421 # Offset: 670
.Ltmp411:
    000002a0: 	addq	%rdi, %rax
    000002a3: 	popq	%rbx
    000002a4: 	retq # Offset: 676
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp416:
    000002a8: 	addq	$0x1, %rax
    000002ac: 	jmp	.Ltmp422 # Offset: 684
    000002ae: 	nop # Size: 2
.Ltmp417:
    000002b0: 	addq	$0x1, %rax
    000002b4: 	jmp	.Ltmp423 # Offset: 692
    000002b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp418:
    000002c0: 	leal	0x4(%r11), %r8d
    000002c4: 	addq	$0x1, %rax
    000002c8: 	cmpl	%r8d, %r9d
    000002cb: 	jg	.Ltmp424 # Offset: 715
    000002cd: 	jmp	.Ltmp411 # Offset: 717
    000002cf: 	nop # Size: 1
.Ltmp421:
    000002d0: 	addq	$0x1, %rax
    000002d4: 	popq	%rbx
    000002d5: 	addq	%rdi, %rax
    000002d8: 	retq # Offset: 728
    000002d9: 	nopl	(%rax) # Size: 7
.Ltmp407:
    000002e0: 	xorl	%edi, %edi
    000002e2: 	xorl	%r11d, %r11d
    000002e5: 	xorl	%eax, %eax
    000002e7: 	jmp	.Ltmp425 # Offset: 743
.Ltmp408:
    000002ec: 	xorl	%edx, %edx
    000002ee: 	xorl	%r8d, %r8d
    000002f1: 	xorl	%r10d, %r10d
    000002f4: 	xorl	%edi, %edi
    000002f6: 	xorl	%eax, %eax
    000002f8: 	jmp	.Ltmp426 # Offset: 760
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6IsEmPT_iS0_"

Binary Function "_Z6count7IsEmPT_iS0_" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x7b70
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x7b70
  Section     : .text
  Orc Section : .local.text._Z6count7IsEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r10
    00000009: 	movl	%esi, %r11d
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%edx, %ebx
    00000010: 	cmpl	$0x7, %esi
    00000013: 	jle	.Ltmp427 # Offset: 19
    00000019: 	leal	-0x8(%rsi), %r12d
    0000001d: 	movl	%edx, %ecx
    0000001f: 	xorl	%r8d, %r8d
    00000022: 	movq	%rdi, %rdx
    00000025: 	shrl	$0x3, %r12d
    00000029: 	xorl	%esi, %esi
    0000002b: 	movl	%r12d, %eax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	leaq	0x10(%rdi,%rax), %rbp
    00000037: 	xorl	%edi, %edi
    00000039: 	xorl	%eax, %eax
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp428:
    00000040: 	xorl	%r9d, %r9d
    00000043: 	cmpw	(%rdx), %cx
    00000046: 	sete	%r9b
    0000004a: 	addq	%r9, %rax
    0000004d: 	xorl	%r9d, %r9d
    00000050: 	cmpw	%cx, 0x2(%rdx)
    00000054: 	sete	%r9b
    00000058: 	addq	%r9, %rsi
    0000005b: 	xorl	%r9d, %r9d
    0000005e: 	cmpw	%cx, 0x4(%rdx)
    00000062: 	sete	%r9b
    00000066: 	addq	%r9, %r8
    00000069: 	xorl	%r9d, %r9d
    0000006c: 	cmpw	0x6(%rdx), %cx
    00000070: 	sete	%r9b
    00000074: 	addq	%r9, %rdi
    00000077: 	xorl	%r9d, %r9d
    0000007a: 	cmpw	0x8(%rdx), %cx
    0000007e: 	sete	%r9b
    00000082: 	addq	%r9, %rax
    00000085: 	xorl	%r9d, %r9d
    00000088: 	cmpw	0xa(%rdx), %cx
    0000008c: 	sete	%r9b
    00000090: 	addq	%r9, %rsi
    00000093: 	xorl	%r9d, %r9d
    00000096: 	cmpw	0xc(%rdx), %cx
    0000009a: 	sete	%r9b
    0000009e: 	addq	%r9, %r8
    000000a1: 	xorl	%r9d, %r9d
    000000a4: 	cmpw	0xe(%rdx), %cx
    000000a8: 	sete	%r9b
    000000ac: 	addq	$0x10, %rdx
    000000b0: 	addq	%r9, %rdi
    000000b3: 	cmpq	%rbp, %rdx
    000000b6: 	jne	.Ltmp428 # Offset: 182
    000000b8: 	addq	%r8, %rsi
    000000bb: 	leal	0x8(,%r12,8), %r9d
    000000c3: 	addq	%rdi, %rsi
.Ltmp443:
    000000c6: 	cmpl	%r9d, %r11d
    000000c9: 	jle	.Ltmp429 # Offset: 201
    000000cf: 	movl	%r11d, %r8d
    000000d2: 	subl	%r9d, %r8d
    000000d5: 	leal	-0x1(%r8), %edx
    000000d9: 	cmpl	$0x6, %edx
    000000dc: 	jbe	.Ltmp430 # Offset: 220
    000000e2: 	movd	%ebx, %xmm5
    000000e6: 	pxor	%xmm3, %xmm3
    000000ea: 	pxor	%xmm4, %xmm4
    000000ee: 	movslq	%r9d, %rdx
    000000f1: 	leaq	(%r10,%rdx,2), %rcx
    000000f5: 	punpcklwd	%xmm5, %xmm5
    000000f9: 	pxor	%xmm2, %xmm2
    000000fd: 	movl	%r8d, %edx
    00000100: 	shrl	$0x3, %edx
    00000103: 	movdqa	DATAat0x19260(%rip), %xmm7
    0000010b: 	pshufd	$0x0, %xmm5, %xmm5
    00000110: 	leal	-0x1(%rdx), %edi
    00000113: 	leaq	0x10(%rcx), %rdx
    00000117: 	shlq	$0x4, %rdi
    0000011b: 	addq	%rdx, %rdi
    0000011e: 	jmp	.Ltmp431 # Offset: 286
.Ltmp432:
    00000120: 	addq	$0x10, %rdx
.Ltmp431:
    00000124: 	movdqu	(%rcx), %xmm0
    00000128: 	movq	%rdx, %rcx
    0000012b: 	pcmpeqw	%xmm5, %xmm0
    0000012f: 	pand	%xmm7, %xmm0
    00000133: 	movdqa	%xmm0, %xmm1
    00000137: 	punpckhwd	%xmm4, %xmm0
    0000013b: 	movdqa	%xmm0, %xmm6
    0000013f: 	punpcklwd	%xmm4, %xmm1
    00000143: 	punpckhdq	%xmm2, %xmm0
    00000147: 	punpckldq	%xmm2, %xmm6
    0000014b: 	paddq	%xmm6, %xmm0
    0000014f: 	movdqa	%xmm1, %xmm6
    00000153: 	punpckhdq	%xmm2, %xmm1
    00000157: 	punpckldq	%xmm2, %xmm6
    0000015b: 	paddq	%xmm6, %xmm1
    0000015f: 	paddq	%xmm1, %xmm0
    00000163: 	paddq	%xmm0, %xmm3
    00000167: 	cmpq	%rdx, %rdi
    0000016a: 	jne	.Ltmp432 # Offset: 362
    0000016c: 	movdqa	%xmm3, %xmm0
    00000170: 	psrldq	$0x8, %xmm0
    00000175: 	paddq	%xmm0, %xmm3
    00000179: 	movq	%xmm3, %rdx
    0000017e: 	addq	%rdx, %rax
    00000181: 	movl	%r8d, %edx
    00000184: 	andl	$-0x8, %edx
    00000187: 	addl	%edx, %r9d
    0000018a: 	cmpl	%edx, %r8d
    0000018d: 	je	.Ltmp429 # Offset: 397
.Ltmp430:
    00000193: 	movslq	%r9d, %rcx
    00000196: 	leaq	(%rcx,%rcx), %rdx
    0000019a: 	cmpw	%bx, (%r10,%rcx,2)
    0000019f: 	jne	.Ltmp433 # Offset: 415
    000001a1: 	addq	$0x1, %rax
.Ltmp433:
    000001a5: 	leal	0x1(%r9), %ecx
    000001a9: 	cmpl	%ecx, %r11d
    000001ac: 	jle	.Ltmp429 # Offset: 428
    000001ae: 	cmpw	0x2(%r10,%rdx), %bx
    000001b4: 	je	.Ltmp434 # Offset: 436
.Ltmp440:
    000001b6: 	leal	0x2(%r9), %ecx
    000001ba: 	cmpl	%ecx, %r11d
    000001bd: 	jle	.Ltmp429 # Offset: 445
    000001bf: 	cmpw	0x4(%r10,%rdx), %bx
    000001c5: 	je	.Ltmp435 # Offset: 453
.Ltmp441:
    000001c7: 	leal	0x3(%r9), %ecx
    000001cb: 	cmpl	%ecx, %r11d
    000001ce: 	jle	.Ltmp429 # Offset: 462
    000001d0: 	cmpw	%bx, 0x6(%r10,%rdx)
    000001d6: 	je	.Ltmp436 # Offset: 470
    000001d8: 	leal	0x4(%r9), %ecx
    000001dc: 	cmpl	%r11d, %ecx
    000001df: 	jge	.Ltmp429 # Offset: 479
.Ltmp442:
    000001e1: 	cmpw	%bx, 0x8(%r10,%rdx)
    000001e7: 	jne	.Ltmp437 # Offset: 487
    000001e9: 	addq	$0x1, %rax
.Ltmp437:
    000001ed: 	leal	0x5(%r9), %ecx
    000001f1: 	cmpl	%r11d, %ecx
    000001f4: 	jge	.Ltmp429 # Offset: 500
    000001f6: 	cmpw	%bx, 0xa(%r10,%rdx)
    000001fc: 	jne	.Ltmp438 # Offset: 508
    000001fe: 	addq	$0x1, %rax
.Ltmp438:
    00000202: 	addl	$0x6, %r9d
    00000206: 	cmpl	%r11d, %r9d
    00000209: 	jge	.Ltmp429 # Offset: 521
    0000020b: 	cmpw	0xc(%r10,%rdx), %bx
    00000211: 	je	.Ltmp439 # Offset: 529
.Ltmp429:
    00000213: 	popq	%rbx
    00000214: 	addq	%rsi, %rax
    00000217: 	popq	%rbp
    00000218: 	popq	%r12
    0000021a: 	retq # Offset: 538
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp434:
    00000220: 	addq	$0x1, %rax
    00000224: 	jmp	.Ltmp440 # Offset: 548
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp435:
    00000230: 	addq	$0x1, %rax
    00000234: 	jmp	.Ltmp441 # Offset: 564
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp436:
    00000240: 	leal	0x4(%r9), %ecx
    00000244: 	addq	$0x1, %rax
    00000248: 	cmpl	%r11d, %ecx
    0000024b: 	jl	.Ltmp442 # Offset: 587
    0000024d: 	jmp	.Ltmp429 # Offset: 589
    0000024f: 	nop # Size: 1
.Ltmp439:
    00000250: 	addq	$0x1, %rax
    00000254: 	popq	%rbx
    00000255: 	popq	%rbp
    00000256: 	addq	%rsi, %rax
    00000259: 	popq	%r12
    0000025b: 	retq # Offset: 603
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp427:
    00000260: 	xorl	%esi, %esi
    00000262: 	xorl	%r9d, %r9d
    00000265: 	xorl	%eax, %eax
    00000267: 	jmp	.Ltmp443 # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7IsEmPT_iS0_"

Binary Function "_Z6count8IsEmPT_iS0_" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x7de0
  Size        : 0x35c
  MaxSize     : 0x360
  Offset      : 0x7de0
  Section     : .text
  Orc Section : .local.text._Z6count8IsEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r10d
    00000007: 	pushq	%rbp
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %esi
    0000000d: 	pushq	%rbx
    0000000e: 	cmpl	$0x7, %r10d
    00000012: 	jle	.Ltmp444 # Offset: 18
    00000018: 	leal	-0x8(%r10), %eax
    0000001c: 	movl	%eax, %r11d
    0000001f: 	shrl	$0x3, %r11d
    00000023: 	addl	$0x1, %r11d
    00000027: 	cmpl	$0x7, %eax
    0000002a: 	jbe	.Ltmp445 # Offset: 42
    00000030: 	movd	%edx, %xmm6
    00000034: 	movl	%r11d, %edx
    00000037: 	pxor	%xmm7, %xmm7
    0000003b: 	movq	%rdi, %rax
    0000003e: 	punpcklwd	%xmm6, %xmm6
    00000042: 	shrl	%edx
    00000044: 	movdqa	%xmm7, %xmm8
    00000049: 	movdqa	%xmm7, %xmm3
    0000004d: 	pshufd	$0x0, %xmm6, %xmm6
    00000052: 	movdqa	%xmm7, %xmm1
    00000056: 	pxor	%xmm5, %xmm5
    0000005a: 	subl	$0x1, %edx
    0000005d: 	shlq	$0x5, %rdx
    00000061: 	movdqa	DATAat0x19260(%rip), %xmm2
    00000069: 	pxor	%xmm9, %xmm9
    0000006e: 	leaq	0x20(%rdi,%rdx), %rdx
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp446:
    00000078: 	movdqu	(%rax), %xmm0
    0000007c: 	movdqu	0x10(%rax), %xmm11
    00000082: 	addq	$0x20, %rax
    00000086: 	movdqa	%xmm0, %xmm4
    0000008a: 	punpckhqdq	%xmm11, %xmm0
    0000008f: 	pcmpeqw	%xmm6, %xmm0
    00000093: 	punpcklqdq	%xmm11, %xmm4
    00000098: 	pcmpeqw	%xmm6, %xmm4
    0000009c: 	pand	%xmm2, %xmm0
    000000a0: 	psubw	%xmm4, %xmm0
    000000a4: 	movdqa	%xmm0, %xmm4
    000000a8: 	punpckhwd	%xmm9, %xmm0
    000000ad: 	punpcklwd	%xmm9, %xmm4
    000000b2: 	movdqa	%xmm4, %xmm10
    000000b7: 	punpckhdq	%xmm5, %xmm4
    000000bb: 	paddq	%xmm4, %xmm3
    000000bf: 	movdqa	%xmm0, %xmm4
    000000c3: 	punpckldq	%xmm5, %xmm10
    000000c8: 	punpckldq	%xmm5, %xmm4
    000000cc: 	punpckhdq	%xmm5, %xmm0
    000000d0: 	paddq	%xmm10, %xmm1
    000000d5: 	paddq	%xmm4, %xmm8
    000000da: 	paddq	%xmm0, %xmm7
    000000de: 	cmpq	%rax, %rdx
    000000e1: 	jne	.Ltmp446 # Offset: 225
    000000e3: 	movhlps	%xmm1, %xmm2
    000000e6: 	movq	%xmm8, %rdx
    000000eb: 	movq	%xmm1, %rax
    000000f0: 	movl	%r11d, %r9d
    000000f3: 	movq	%xmm2, %rdi
    000000f8: 	movhlps	%xmm8, %xmm2
    000000fc: 	addq	%rdx, %rax
    000000ff: 	andl	$-0x2, %r9d
    00000103: 	movq	%xmm2, %rdx
    00000108: 	movhlps	%xmm3, %xmm2
    0000010b: 	movq	%xmm3, %rbx
    00000110: 	movq	%xmm2, %r8
    00000115: 	addq	%rdx, %rdi
    00000118: 	movhlps	%xmm7, %xmm2
    0000011b: 	movq	%xmm7, %rdx
    00000120: 	addq	%rdx, %rbx
    00000123: 	movq	%xmm2, %rdx
    00000128: 	addq	%rdx, %r8
    0000012b: 	leal	(,%r9,8), %edx
    00000133: 	cmpl	%r9d, %r11d
    00000136: 	je	.Ltmp447 # Offset: 310
.Ltmp463:
    00000138: 	movslq	%edx, %rdx
    0000013b: 	xorl	%r9d, %r9d
    0000013e: 	cmpw	%si, (%rcx,%rdx,2)
    00000142: 	sete	%r9b
    00000146: 	addq	%rax, %r9
    00000149: 	xorl	%eax, %eax
    0000014b: 	cmpw	%si, 0x8(%rcx,%rdx,2)
    00000150: 	sete	%al
    00000153: 	addq	%r9, %rax
    00000156: 	xorl	%r9d, %r9d
    00000159: 	cmpw	%si, 0x2(%rcx,%rdx,2)
    0000015e: 	sete	%r9b
    00000162: 	xorl	%ebp, %ebp
    00000164: 	cmpw	%si, 0xa(%rcx,%rdx,2)
    00000169: 	sete	%bpl
    0000016d: 	addq	%rbp, %r9
    00000170: 	addq	%r9, %rdi
    00000173: 	xorl	%r9d, %r9d
    00000176: 	cmpw	%si, 0x4(%rcx,%rdx,2)
    0000017b: 	sete	%r9b
    0000017f: 	xorl	%ebp, %ebp
    00000181: 	cmpw	%si, 0xc(%rcx,%rdx,2)
    00000186: 	sete	%bpl
    0000018a: 	addq	%rbp, %r9
    0000018d: 	addq	%r9, %rbx
    00000190: 	xorl	%r9d, %r9d
    00000193: 	cmpw	%si, 0x6(%rcx,%rdx,2)
    00000198: 	sete	%r9b
    0000019c: 	cmpw	%si, 0xe(%rcx,%rdx,2)
    000001a1: 	sete	%dl
    000001a4: 	movzbl	%dl, %edx
    000001a7: 	addq	%r9, %rdx
    000001aa: 	addq	%rdx, %r8
.Ltmp447:
    000001ad: 	addq	%rbx, %rdi
    000001b0: 	shll	$0x3, %r11d
    000001b4: 	addq	%r8, %rdi
.Ltmp462:
    000001b7: 	cmpl	%r11d, %r10d
    000001ba: 	jle	.Ltmp448 # Offset: 442
    000001c0: 	movl	%r10d, %ebx
    000001c3: 	subl	%r11d, %ebx
    000001c6: 	leal	-0x1(%rbx), %edx
    000001c9: 	cmpl	$0x6, %edx
    000001cc: 	jbe	.Ltmp449 # Offset: 460
    000001d2: 	movd	%esi, %xmm6
    000001d6: 	pxor	%xmm4, %xmm4
    000001da: 	pxor	%xmm5, %xmm5
    000001de: 	movslq	%r11d, %rdx
    000001e1: 	leaq	(%rcx,%rdx,2), %r8
    000001e5: 	punpcklwd	%xmm6, %xmm6
    000001e9: 	pxor	%xmm3, %xmm3
    000001ed: 	movl	%ebx, %edx
    000001ef: 	shrl	$0x3, %edx
    000001f2: 	movdqa	DATAat0x19260(%rip), %xmm2
    000001fa: 	pshufd	$0x0, %xmm6, %xmm6
    000001ff: 	leal	-0x1(%rdx), %r9d
    00000203: 	leaq	0x10(%r8), %rdx
    00000207: 	shlq	$0x4, %r9
    0000020b: 	addq	%rdx, %r9
    0000020e: 	jmp	.Ltmp450 # Offset: 526
.Ltmp451:
    00000210: 	addq	$0x10, %rdx
.Ltmp450:
    00000214: 	movdqu	(%r8), %xmm0
    00000219: 	movq	%rdx, %r8
    0000021c: 	pcmpeqw	%xmm6, %xmm0
    00000220: 	pand	%xmm2, %xmm0
    00000224: 	movdqa	%xmm0, %xmm1
    00000228: 	punpckhwd	%xmm5, %xmm0
    0000022c: 	movdqa	%xmm0, %xmm7
    00000230: 	punpcklwd	%xmm5, %xmm1
    00000234: 	punpckldq	%xmm3, %xmm0
    00000238: 	punpckhdq	%xmm3, %xmm7
    0000023c: 	paddq	%xmm7, %xmm0
    00000240: 	movdqa	%xmm1, %xmm7
    00000244: 	punpckldq	%xmm3, %xmm1
    00000248: 	punpckhdq	%xmm3, %xmm7
    0000024c: 	paddq	%xmm7, %xmm1
    00000250: 	paddq	%xmm1, %xmm0
    00000254: 	paddq	%xmm0, %xmm4
    00000258: 	cmpq	%rdx, %r9
    0000025b: 	jne	.Ltmp451 # Offset: 603
    0000025d: 	movdqa	%xmm4, %xmm0
    00000261: 	psrldq	$0x8, %xmm0
    00000266: 	paddq	%xmm4, %xmm0
    0000026a: 	movq	%xmm0, %rdx
    0000026f: 	addq	%rdx, %rax
    00000272: 	movl	%ebx, %edx
    00000274: 	andl	$-0x8, %edx
    00000277: 	addl	%edx, %r11d
    0000027a: 	cmpl	%ebx, %edx
    0000027c: 	je	.Ltmp448 # Offset: 636
.Ltmp449:
    0000027e: 	movslq	%r11d, %r8
    00000281: 	leaq	(%r8,%r8), %rdx
    00000285: 	cmpw	%si, (%rcx,%r8,2)
    0000028a: 	jne	.Ltmp452 # Offset: 650
    0000028c: 	addq	$0x1, %rax
.Ltmp452:
    00000290: 	leal	0x1(%r11), %r8d
    00000294: 	cmpl	%r10d, %r8d
    00000297: 	jge	.Ltmp448 # Offset: 663
    00000299: 	cmpw	%si, 0x2(%rcx,%rdx)
    0000029e: 	je	.Ltmp453 # Offset: 670
.Ltmp459:
    000002a0: 	leal	0x2(%r11), %r8d
    000002a4: 	cmpl	%r10d, %r8d
    000002a7: 	jge	.Ltmp448 # Offset: 679
    000002a9: 	cmpw	%si, 0x4(%rcx,%rdx)
    000002ae: 	je	.Ltmp454 # Offset: 686
.Ltmp460:
    000002b0: 	leal	0x3(%r11), %r8d
    000002b4: 	cmpl	%r10d, %r8d
    000002b7: 	jge	.Ltmp448 # Offset: 695
    000002b9: 	cmpw	%si, 0x6(%rcx,%rdx)
    000002be: 	je	.Ltmp455 # Offset: 702
    000002c0: 	leal	0x4(%r11), %r8d
    000002c4: 	cmpl	%r8d, %r10d
    000002c7: 	jle	.Ltmp448 # Offset: 711
.Ltmp461:
    000002c9: 	cmpw	%si, 0x8(%rcx,%rdx)
    000002ce: 	jne	.Ltmp456 # Offset: 718
    000002d0: 	addq	$0x1, %rax
.Ltmp456:
    000002d4: 	leal	0x5(%r11), %r8d
    000002d8: 	cmpl	%r10d, %r8d
    000002db: 	jge	.Ltmp448 # Offset: 731
    000002dd: 	cmpw	%si, 0xa(%rcx,%rdx)
    000002e2: 	jne	.Ltmp457 # Offset: 738
    000002e4: 	addq	$0x1, %rax
.Ltmp457:
    000002e8: 	addl	$0x6, %r11d
    000002ec: 	cmpl	%r10d, %r11d
    000002ef: 	jge	.Ltmp448 # Offset: 751
    000002f1: 	cmpw	0xc(%rcx,%rdx), %si
    000002f6: 	je	.Ltmp458 # Offset: 758
.Ltmp448:
    000002f8: 	addq	%rdi, %rax
    000002fb: 	popq	%rbx
    000002fc: 	popq	%rbp
    000002fd: 	retq # Offset: 765
    000002fe: 	nop # Size: 2
.Ltmp453:
    00000300: 	addq	$0x1, %rax
    00000304: 	jmp	.Ltmp459 # Offset: 772
    00000306: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp454:
    00000310: 	addq	$0x1, %rax
    00000314: 	jmp	.Ltmp460 # Offset: 788
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp455:
    00000320: 	leal	0x4(%r11), %r8d
    00000324: 	addq	$0x1, %rax
    00000328: 	cmpl	%r8d, %r10d
    0000032b: 	jg	.Ltmp461 # Offset: 811
    0000032d: 	jmp	.Ltmp448 # Offset: 813
    0000032f: 	nop # Size: 1
.Ltmp458:
    00000330: 	addq	$0x1, %rax
    00000334: 	popq	%rbx
    00000335: 	popq	%rbp
    00000336: 	addq	%rdi, %rax
    00000339: 	retq # Offset: 825
    0000033a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp444:
    00000340: 	xorl	%edi, %edi
    00000342: 	xorl	%r11d, %r11d
    00000345: 	xorl	%eax, %eax
    00000347: 	jmp	.Ltmp462 # Offset: 839
.Ltmp445:
    0000034c: 	xorl	%edx, %edx
    0000034e: 	xorl	%r8d, %r8d
    00000351: 	xorl	%ebx, %ebx
    00000353: 	xorl	%edi, %edi
    00000355: 	xorl	%eax, %eax
    00000357: 	jmp	.Ltmp463 # Offset: 855
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8IsEmPT_iS0_"

Binary Function "_Z6count1IjEmPT_iS0_" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x8140
  Size        : 0xf9
  MaxSize     : 0x100
  Offset      : 0x8140
  Section     : .text
  Orc Section : .local.text._Z6count1IjEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp464 # Offset: 11
    00000011: 	leal	-0x1(%rsi), %eax
    00000014: 	cmpl	$0x2, %eax
    00000017: 	jbe	.Ltmp465 # Offset: 23
    0000001d: 	shrl	$0x2, %esi
    00000020: 	movd	%edx, %xmm6
    00000024: 	pxor	%xmm1, %xmm1
    00000028: 	movq	%rdi, %rax
    0000002b: 	subl	$0x1, %esi
    0000002e: 	movdqa	DATAat0x19270(%rip), %xmm4
    00000036: 	pshufd	$0x0, %xmm6, %xmm5
    0000003b: 	pxor	%xmm2, %xmm2
    0000003f: 	shlq	$0x4, %rsi
    00000043: 	leaq	0x10(%rdi,%rsi), %rsi
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp466:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	addq	$0x10, %rax
    00000058: 	pcmpeqd	%xmm5, %xmm0
    0000005c: 	pand	%xmm4, %xmm0
    00000060: 	movdqa	%xmm0, %xmm3
    00000064: 	punpckhdq	%xmm2, %xmm0
    00000068: 	punpckldq	%xmm2, %xmm3
    0000006c: 	paddq	%xmm3, %xmm0
    00000070: 	paddq	%xmm0, %xmm1
    00000074: 	cmpq	%rax, %rsi
    00000077: 	jne	.Ltmp466 # Offset: 119
    00000079: 	movdqa	%xmm1, %xmm0
    0000007d: 	movl	%ecx, %esi
    0000007f: 	psrldq	$0x8, %xmm0
    00000084: 	andl	$-0x4, %esi
    00000087: 	paddq	%xmm0, %xmm1
    0000008b: 	movq	%xmm1, %rax
    00000090: 	testb	$0x3, %cl
    00000093: 	je	.Ltmp467 # Offset: 147
.Ltmp474:
    00000095: 	movslq	%esi, %rdi
    00000098: 	leaq	(,%rdi,4), %r9
    000000a0: 	cmpl	%edx, (%r8,%rdi,4)
    000000a4: 	je	.Ltmp468 # Offset: 164
.Ltmp472:
    000000a6: 	leal	0x1(%rsi), %edi
    000000a9: 	cmpl	%ecx, %edi
    000000ab: 	jge	.Ltmp469 # Offset: 171
    000000ad: 	cmpl	0x4(%r8,%r9), %edx
    000000b2: 	je	.Ltmp470 # Offset: 178
.Ltmp473:
    000000b4: 	addl	$0x2, %esi
    000000b7: 	cmpl	%esi, %ecx
    000000b9: 	jle	.Ltmp469 # Offset: 185
    000000bb: 	cmpl	0x8(%r8,%r9), %edx
    000000c0: 	je	.Ltmp471 # Offset: 192
.Ltmp469:
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp468:
    000000c8: 	addq	$0x1, %rax
    000000cc: 	jmp	.Ltmp472 # Offset: 204
    000000ce: 	nop # Size: 2
.Ltmp470:
    000000d0: 	addq	$0x1, %rax
    000000d4: 	jmp	.Ltmp473 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp467:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp471:
    000000e8: 	addq	$0x1, %rax
    000000ec: 	retq # Offset: 236
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp464:
    000000f0: 	xorl	%eax, %eax
    000000f2: 	retq # Offset: 242
.Ltmp465:
    000000f3: 	xorl	%esi, %esi
    000000f5: 	xorl	%eax, %eax
    000000f7: 	jmp	.Ltmp474 # Offset: 247
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1IjEmPT_iS0_"

Binary Function "_Z6count2IjEmPT_iS0_" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x8240
  Size        : 0x9f
  MaxSize     : 0xa0
  Offset      : 0x8240
  Section     : .text
  Orc Section : .local.text._Z6count2IjEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp475 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %r10d
    00000016: 	movq	%r9, %rax
    00000019: 	xorl	%r8d, %r8d
    0000001c: 	shrl	%r10d
    0000001f: 	movl	%r10d, %ecx
    00000022: 	leaq	0x8(%r9,%rcx,8), %rsi
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp476:
    00000030: 	xorl	%ecx, %ecx
    00000032: 	cmpl	(%rax), %edx
    00000034: 	sete	%cl
    00000037: 	addq	%rcx, %r8
    0000003a: 	xorl	%ecx, %ecx
    0000003c: 	cmpl	0x4(%rax), %edx
    0000003f: 	sete	%cl
    00000042: 	addq	$0x8, %rax
    00000046: 	addq	%rcx, %r8
    00000049: 	cmpq	%rax, %rsi
    0000004c: 	jne	.Ltmp476 # Offset: 76
    0000004e: 	leal	0x2(%r10,%r10), %eax
.Ltmp481:
    00000053: 	cmpl	%eax, %edi
    00000055: 	jle	.Ltmp477 # Offset: 85
    00000057: 	movslq	%eax, %rcx
    0000005a: 	leaq	(,%rcx,4), %rsi
    00000062: 	cmpl	%edx, (%r9,%rcx,4)
    00000066: 	je	.Ltmp478 # Offset: 102
    00000068: 	addl	$0x1, %eax
    0000006b: 	cmpl	%eax, %edi
    0000006d: 	jle	.Ltmp477 # Offset: 109
.Ltmp480:
    0000006f: 	cmpl	0x4(%r9,%rsi), %edx
    00000074: 	je	.Ltmp479 # Offset: 116
.Ltmp477:
    00000076: 	movq	%r8, %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp478:
    00000080: 	addl	$0x1, %eax
    00000083: 	addq	$0x1, %r8
    00000087: 	cmpl	%eax, %edi
    00000089: 	jle	.Ltmp477 # Offset: 137
    0000008b: 	jmp	.Ltmp480 # Offset: 139
.Ltmp479:
    0000008d: 	addq	$0x1, %r8
    00000091: 	jmp	.Ltmp477 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp475:
    00000098: 	xorl	%eax, %eax
    0000009a: 	xorl	%r8d, %r8d
    0000009d: 	jmp	.Ltmp481 # Offset: 157
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2IjEmPT_iS0_"

Binary Function "_Z6count3IjEmPT_iS0_" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x82e0
  Size        : 0xee
  MaxSize     : 0xf0
  Offset      : 0x82e0
  Section     : .text
  Orc Section : .local.text._Z6count3IjEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r8d
    0000000a: 	movl	%edx, %ecx
    0000000c: 	cmpl	$0x3, %esi
    0000000f: 	jle	.Ltmp482 # Offset: 15
    00000015: 	leal	-0x4(%rsi), %r10d
    00000019: 	movq	%rdi, %rdx
    0000001c: 	shrl	$0x2, %r10d
    00000020: 	movl	%r10d, %eax
    00000023: 	shlq	$0x4, %rax
    00000027: 	leaq	0x10(%rdi,%rax), %rdi
    0000002c: 	xorl	%eax, %eax
    0000002e: 	nop # Size: 2
.Ltmp483:
    00000030: 	xorl	%esi, %esi
    00000032: 	cmpl	(%rdx), %ecx
    00000034: 	sete	%sil
    00000038: 	addq	%rsi, %rax
    0000003b: 	xorl	%esi, %esi
    0000003d: 	cmpl	0x4(%rdx), %ecx
    00000040: 	sete	%sil
    00000044: 	addq	%rsi, %rax
    00000047: 	xorl	%esi, %esi
    00000049: 	cmpl	0x8(%rdx), %ecx
    0000004c: 	sete	%sil
    00000050: 	addq	%rsi, %rax
    00000053: 	xorl	%esi, %esi
    00000055: 	cmpl	0xc(%rdx), %ecx
    00000058: 	sete	%sil
    0000005c: 	addq	$0x10, %rdx
    00000060: 	addq	%rsi, %rax
    00000063: 	cmpq	%rdx, %rdi
    00000066: 	jne	.Ltmp483 # Offset: 102
    00000068: 	leal	0x4(,%r10,4), %edx
.Ltmp491:
    00000070: 	cmpl	%edx, %r8d
    00000073: 	jle	.Ltmp484 # Offset: 115
    00000075: 	movslq	%edx, %rsi
    00000078: 	leaq	(,%rsi,4), %rdi
    00000080: 	cmpl	%ecx, (%r9,%rsi,4)
    00000084: 	je	.Ltmp485 # Offset: 132
.Ltmp489:
    00000086: 	leal	0x1(%rdx), %esi
    00000089: 	cmpl	%r8d, %esi
    0000008c: 	jge	.Ltmp484 # Offset: 140
    0000008e: 	cmpl	%ecx, 0x4(%r9,%rdi)
    00000093: 	je	.Ltmp486 # Offset: 147
    00000095: 	leal	0x2(%rdx), %esi
    00000098: 	cmpl	%esi, %r8d
    0000009b: 	jle	.Ltmp484 # Offset: 155
.Ltmp490:
    0000009d: 	cmpl	0x8(%r9,%rdi), %ecx
    000000a2: 	jne	.Ltmp487 # Offset: 162
    000000a4: 	addq	$0x1, %rax
.Ltmp487:
    000000a8: 	addl	$0x3, %edx
    000000ab: 	cmpl	%r8d, %edx
    000000ae: 	jge	.Ltmp484 # Offset: 174
    000000b0: 	cmpl	0xc(%r9,%rdi), %ecx
    000000b5: 	je	.Ltmp488 # Offset: 181
.Ltmp484:
    000000b7: 	retq # Offset: 183
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp485:
    000000c0: 	addq	$0x1, %rax
    000000c4: 	jmp	.Ltmp489 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp486:
    000000d0: 	leal	0x2(%rdx), %esi
    000000d3: 	addq	$0x1, %rax
    000000d7: 	cmpl	%esi, %r8d
    000000da: 	jg	.Ltmp490 # Offset: 218
    000000dc: 	jmp	.Ltmp484 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp488:
    000000e0: 	addq	$0x1, %rax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp482:
    000000e8: 	xorl	%edx, %edx
    000000ea: 	xorl	%eax, %eax
    000000ec: 	jmp	.Ltmp491 # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3IjEmPT_iS0_"

Binary Function "_Z6count4IjEmPT_iS0_" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x83d0
  Size        : 0x194
  MaxSize     : 0x1a0
  Offset      : 0x83d0
  Section     : .text
  Orc Section : .local.text._Z6count4IjEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r10d
    0000000a: 	movl	%edx, %ecx
    0000000c: 	cmpl	$0x3, %esi
    0000000f: 	jle	.Ltmp492 # Offset: 15
    00000015: 	leal	-0x4(%rsi), %r11d
    00000019: 	movq	%rdi, %rdx
    0000001c: 	xorl	%esi, %esi
    0000001e: 	shrl	$0x2, %r11d
    00000022: 	movl	%r11d, %eax
    00000025: 	shlq	$0x4, %rax
    00000029: 	leaq	0x10(%rdi,%rax), %r8
    0000002e: 	xorl	%eax, %eax
.Ltmp493:
    00000030: 	xorl	%edi, %edi
    00000032: 	cmpl	(%rdx), %ecx
    00000034: 	sete	%dil
    00000038: 	addq	%rdi, %rsi
    0000003b: 	xorl	%edi, %edi
    0000003d: 	cmpl	0x4(%rdx), %ecx
    00000040: 	sete	%dil
    00000044: 	addq	%rdi, %rax
    00000047: 	xorl	%edi, %edi
    00000049: 	cmpl	0x8(%rdx), %ecx
    0000004c: 	sete	%dil
    00000050: 	addq	%rdi, %rsi
    00000053: 	xorl	%edi, %edi
    00000055: 	cmpl	0xc(%rdx), %ecx
    00000058: 	sete	%dil
    0000005c: 	addq	$0x10, %rdx
    00000060: 	addq	%rdi, %rax
    00000063: 	cmpq	%rdx, %r8
    00000066: 	jne	.Ltmp493 # Offset: 102
    00000068: 	leal	0x4(,%r11,4), %r11d
    00000070: 	cmpl	%r11d, %r10d
    00000073: 	jle	.Ltmp494 # Offset: 115
.Ltmp504:
    00000079: 	pushq	%rbx
    0000007a: 	movl	%r10d, %ebx
    0000007d: 	subl	%r11d, %ebx
    00000080: 	leal	-0x1(%rbx), %edx
    00000083: 	cmpl	$0x2, %edx
    00000086: 	jbe	.Ltmp495 # Offset: 134
    0000008c: 	movd	%ecx, %xmm6
    00000090: 	pxor	%xmm1, %xmm1
    00000094: 	pxor	%xmm2, %xmm2
    00000098: 	movslq	%r11d, %rdx
    0000009b: 	leaq	(%r9,%rdx,4), %rdi
    0000009f: 	movl	%ebx, %edx
    000000a1: 	pshufd	$0x0, %xmm6, %xmm5
    000000a6: 	movdqa	DATAat0x19270(%rip), %xmm4
    000000ae: 	shrl	$0x2, %edx
    000000b1: 	leal	-0x1(%rdx), %r8d
    000000b5: 	leaq	0x10(%rdi), %rdx
    000000b9: 	shlq	$0x4, %r8
    000000bd: 	addq	%rdx, %r8
    000000c0: 	jmp	.Ltmp496 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp497:
    000000c8: 	addq	$0x10, %rdx
.Ltmp496:
    000000cc: 	movdqu	(%rdi), %xmm0
    000000d0: 	movq	%rdx, %rdi
    000000d3: 	pcmpeqd	%xmm5, %xmm0
    000000d7: 	pand	%xmm4, %xmm0
    000000db: 	movdqa	%xmm0, %xmm3
    000000df: 	punpckhdq	%xmm2, %xmm0
    000000e3: 	punpckldq	%xmm2, %xmm3
    000000e7: 	paddq	%xmm3, %xmm0
    000000eb: 	paddq	%xmm0, %xmm1
    000000ef: 	cmpq	%rdx, %r8
    000000f2: 	jne	.Ltmp497 # Offset: 242
    000000f4: 	movdqa	%xmm1, %xmm0
    000000f8: 	psrldq	$0x8, %xmm0
    000000fd: 	paddq	%xmm0, %xmm1
    00000101: 	movq	%xmm1, %rdx
    00000106: 	addq	%rdx, %rsi
    00000109: 	movl	%ebx, %edx
    0000010b: 	andl	$-0x4, %edx
    0000010e: 	addl	%edx, %r11d
    00000111: 	cmpl	%edx, %ebx
    00000113: 	je	.Ltmp498 # Offset: 275
.Ltmp495:
    00000115: 	movslq	%r11d, %rdx
    00000118: 	leaq	(,%rdx,4), %rdi
    00000120: 	cmpl	%ecx, (%r9,%rdx,4)
    00000124: 	je	.Ltmp499 # Offset: 292
.Ltmp502:
    00000126: 	leal	0x1(%r11), %edx
    0000012a: 	cmpl	%r10d, %edx
    0000012d: 	jge	.Ltmp498 # Offset: 301
    0000012f: 	cmpl	0x4(%r9,%rdi), %ecx
    00000134: 	je	.Ltmp500 # Offset: 308
.Ltmp503:
    00000136: 	addl	$0x2, %r11d
    0000013a: 	cmpl	%r10d, %r11d
    0000013d: 	jge	.Ltmp498 # Offset: 317
    0000013f: 	cmpl	0x8(%r9,%rdi), %ecx
    00000144: 	je	.Ltmp501 # Offset: 324
.Ltmp498:
    00000146: 	addq	%rsi, %rax
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp499:
    00000150: 	addq	$0x1, %rsi
    00000154: 	jmp	.Ltmp502 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp500:
    00000160: 	addq	$0x1, %rsi
    00000164: 	jmp	.Ltmp503 # Offset: 356
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp501:
    00000170: 	addq	$0x1, %rsi
    00000174: 	popq	%rbx
    00000175: 	addq	%rsi, %rax
    00000178: 	retq # Offset: 376
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp492:
    00000180: 	xorl	%r11d, %r11d
    00000183: 	xorl	%eax, %eax
    00000185: 	xorl	%esi, %esi
    00000187: 	cmpl	%r11d, %r10d
    0000018a: 	jg	.Ltmp504 # Offset: 394
.Ltmp494:
    00000190: 	addq	%rsi, %rax
    00000193: 	retq # Offset: 403
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4IjEmPT_iS0_"

Binary Function "_Z6count5IjEmPT_iS0_" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x8570
  Size        : 0x1b3
  MaxSize     : 0x1c0
  Offset      : 0x8570
  Section     : .text
  Orc Section : .local.text._Z6count5IjEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %r9d
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp505 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	movd	%edx, %xmm7
    0000001a: 	pxor	%xmm2, %xmm2
    0000001e: 	xorl	%eax, %eax
    00000020: 	pshufd	$0x0, %xmm7, %xmm6
    00000025: 	shrl	$0x2, %ecx
    00000028: 	movdqa	%xmm2, %xmm1
    0000002c: 	pxor	%xmm3, %xmm3
    00000030: 	movdqa	DATAat0x19270(%rip), %xmm5
    00000038: 	addl	$0x1, %ecx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp506:
    00000040: 	movq	%rax, %rdx
    00000043: 	addq	$0x1, %rax
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	movdqu	(%rdi,%rdx), %xmm0
    00000050: 	pcmpeqd	%xmm6, %xmm0
    00000054: 	pand	%xmm5, %xmm0
    00000058: 	movdqa	%xmm0, %xmm4
    0000005c: 	punpckhdq	%xmm3, %xmm0
    00000060: 	punpckldq	%xmm3, %xmm4
    00000064: 	paddq	%xmm0, %xmm2
    00000068: 	paddq	%xmm4, %xmm1
    0000006c: 	cmpl	%eax, %ecx
    0000006e: 	ja	.Ltmp506 # Offset: 110
    00000070: 	movhlps	%xmm1, %xmm7
    00000073: 	leal	(,%rcx,4), %esi
    0000007a: 	movq	%xmm2, %rcx
    0000007f: 	movq	%xmm7, %rdx
    00000084: 	movhlps	%xmm2, %xmm7
    00000087: 	movq	%xmm1, %rax
    0000008c: 	addq	%rcx, %rdx
    0000008f: 	movq	%xmm7, %rcx
    00000094: 	addq	%rcx, %rdx
    00000097: 	cmpl	%esi, %r8d
    0000009a: 	jle	.Ltmp507 # Offset: 154
.Ltmp517:
    000000a0: 	pushq	%rbx
    000000a1: 	movl	%r8d, %ebx
    000000a4: 	subl	%esi, %ebx
    000000a6: 	leal	-0x1(%rbx), %ecx
    000000a9: 	cmpl	$0x2, %ecx
    000000ac: 	jbe	.Ltmp508 # Offset: 172
    000000b2: 	movd	%r9d, %xmm7
    000000b7: 	pxor	%xmm1, %xmm1
    000000bb: 	pxor	%xmm2, %xmm2
    000000bf: 	movslq	%esi, %rcx
    000000c2: 	leaq	(%rdi,%rcx,4), %r10
    000000c6: 	movl	%ebx, %ecx
    000000c8: 	pshufd	$0x0, %xmm7, %xmm4
    000000cd: 	movdqa	DATAat0x19270(%rip), %xmm5
    000000d5: 	shrl	$0x2, %ecx
    000000d8: 	leal	-0x1(%rcx), %r11d
    000000dc: 	leaq	0x10(%r10), %rcx
    000000e0: 	shlq	$0x4, %r11
    000000e4: 	addq	%rcx, %r11
    000000e7: 	jmp	.Ltmp509 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp510:
    000000f0: 	addq	$0x10, %rcx
.Ltmp509:
    000000f4: 	movdqu	(%r10), %xmm0
    000000f9: 	movq	%rcx, %r10
    000000fc: 	pcmpeqd	%xmm4, %xmm0
    00000100: 	pand	%xmm5, %xmm0
    00000104: 	movdqa	%xmm0, %xmm3
    00000108: 	punpckhdq	%xmm2, %xmm0
    0000010c: 	punpckldq	%xmm2, %xmm3
    00000110: 	paddq	%xmm3, %xmm0
    00000114: 	paddq	%xmm0, %xmm1
    00000118: 	cmpq	%rcx, %r11
    0000011b: 	jne	.Ltmp510 # Offset: 283
    0000011d: 	movdqa	%xmm1, %xmm0
    00000121: 	psrldq	$0x8, %xmm0
    00000126: 	paddq	%xmm0, %xmm1
    0000012a: 	movq	%xmm1, %rcx
    0000012f: 	addq	%rcx, %rax
    00000132: 	movl	%ebx, %ecx
    00000134: 	andl	$-0x4, %ecx
    00000137: 	addl	%ecx, %esi
    00000139: 	cmpl	%ecx, %ebx
    0000013b: 	je	.Ltmp511 # Offset: 315
.Ltmp508:
    0000013d: 	movslq	%esi, %rcx
    00000140: 	leaq	(,%rcx,4), %r10
    00000148: 	cmpl	(%rdi,%rcx,4), %r9d
    0000014c: 	je	.Ltmp512 # Offset: 332
.Ltmp515:
    0000014e: 	leal	0x1(%rsi), %ecx
    00000151: 	cmpl	%ecx, %r8d
    00000154: 	jle	.Ltmp511 # Offset: 340
    00000156: 	cmpl	%r9d, 0x4(%rdi,%r10)
    0000015b: 	je	.Ltmp513 # Offset: 347
.Ltmp516:
    0000015d: 	leal	0x2(%rsi), %ecx
    00000160: 	cmpl	%r8d, %ecx
    00000163: 	jge	.Ltmp511 # Offset: 355
    00000165: 	cmpl	0x8(%rdi,%r10), %r9d
    0000016a: 	je	.Ltmp514 # Offset: 362
.Ltmp511:
    0000016c: 	addq	%rdx, %rax
    0000016f: 	popq	%rbx
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp512:
    00000178: 	addq	$0x1, %rax
    0000017c: 	jmp	.Ltmp515 # Offset: 380
    0000017e: 	nop # Size: 2
.Ltmp513:
    00000180: 	addq	$0x1, %rax
    00000184: 	jmp	.Ltmp516 # Offset: 388
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp514:
    00000190: 	addq	$0x1, %rax
    00000194: 	popq	%rbx
    00000195: 	addq	%rdx, %rax
    00000198: 	retq # Offset: 408
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp505:
    000001a0: 	xorl	%esi, %esi
    000001a2: 	xorl	%edx, %edx
    000001a4: 	xorl	%eax, %eax
    000001a6: 	cmpl	%esi, %r8d
    000001a9: 	jg	.Ltmp517 # Offset: 425
.Ltmp507:
    000001af: 	addq	%rdx, %rax
    000001b2: 	retq # Offset: 434
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5IjEmPT_iS0_"

Binary Function "_Z6count6IjEmPT_iS0_" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x8730
  Size        : 0x1b3
  MaxSize     : 0x1c0
  Offset      : 0x8730
  Section     : .text
  Orc Section : .local.text._Z6count6IjEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %r9d
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp518 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	movd	%edx, %xmm7
    0000001a: 	pxor	%xmm2, %xmm2
    0000001e: 	xorl	%eax, %eax
    00000020: 	pshufd	$0x0, %xmm7, %xmm6
    00000025: 	shrl	$0x2, %ecx
    00000028: 	movdqa	%xmm2, %xmm1
    0000002c: 	pxor	%xmm3, %xmm3
    00000030: 	movdqa	DATAat0x19270(%rip), %xmm5
    00000038: 	addl	$0x1, %ecx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp519:
    00000040: 	movq	%rax, %rdx
    00000043: 	addq	$0x1, %rax
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	movdqu	(%rdi,%rdx), %xmm0
    00000050: 	pcmpeqd	%xmm6, %xmm0
    00000054: 	pand	%xmm5, %xmm0
    00000058: 	movdqa	%xmm0, %xmm4
    0000005c: 	punpckhdq	%xmm3, %xmm0
    00000060: 	punpckldq	%xmm3, %xmm4
    00000064: 	paddq	%xmm0, %xmm2
    00000068: 	paddq	%xmm4, %xmm1
    0000006c: 	cmpl	%eax, %ecx
    0000006e: 	ja	.Ltmp519 # Offset: 110
    00000070: 	movhlps	%xmm1, %xmm7
    00000073: 	leal	(,%rcx,4), %esi
    0000007a: 	movq	%xmm2, %rcx
    0000007f: 	movq	%xmm7, %rdx
    00000084: 	movhlps	%xmm2, %xmm7
    00000087: 	movq	%xmm1, %rax
    0000008c: 	addq	%rcx, %rdx
    0000008f: 	movq	%xmm7, %rcx
    00000094: 	addq	%rcx, %rdx
    00000097: 	cmpl	%esi, %r8d
    0000009a: 	jle	.Ltmp520 # Offset: 154
.Ltmp530:
    000000a0: 	pushq	%rbx
    000000a1: 	movl	%r8d, %ebx
    000000a4: 	subl	%esi, %ebx
    000000a6: 	leal	-0x1(%rbx), %ecx
    000000a9: 	cmpl	$0x2, %ecx
    000000ac: 	jbe	.Ltmp521 # Offset: 172
    000000b2: 	movd	%r9d, %xmm7
    000000b7: 	pxor	%xmm1, %xmm1
    000000bb: 	pxor	%xmm2, %xmm2
    000000bf: 	movslq	%esi, %rcx
    000000c2: 	leaq	(%rdi,%rcx,4), %r10
    000000c6: 	movl	%ebx, %ecx
    000000c8: 	pshufd	$0x0, %xmm7, %xmm4
    000000cd: 	movdqa	DATAat0x19270(%rip), %xmm5
    000000d5: 	shrl	$0x2, %ecx
    000000d8: 	leal	-0x1(%rcx), %r11d
    000000dc: 	leaq	0x10(%r10), %rcx
    000000e0: 	shlq	$0x4, %r11
    000000e4: 	addq	%rcx, %r11
    000000e7: 	jmp	.Ltmp522 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp523:
    000000f0: 	addq	$0x10, %rcx
.Ltmp522:
    000000f4: 	movdqu	(%r10), %xmm0
    000000f9: 	movq	%rcx, %r10
    000000fc: 	pcmpeqd	%xmm4, %xmm0
    00000100: 	pand	%xmm5, %xmm0
    00000104: 	movdqa	%xmm0, %xmm3
    00000108: 	punpckldq	%xmm2, %xmm0
    0000010c: 	punpckhdq	%xmm2, %xmm3
    00000110: 	paddq	%xmm3, %xmm0
    00000114: 	paddq	%xmm0, %xmm1
    00000118: 	cmpq	%rcx, %r11
    0000011b: 	jne	.Ltmp523 # Offset: 283
    0000011d: 	movdqa	%xmm1, %xmm0
    00000121: 	psrldq	$0x8, %xmm0
    00000126: 	paddq	%xmm0, %xmm1
    0000012a: 	movq	%xmm1, %rcx
    0000012f: 	addq	%rcx, %rax
    00000132: 	movl	%ebx, %ecx
    00000134: 	andl	$-0x4, %ecx
    00000137: 	addl	%ecx, %esi
    00000139: 	cmpl	%ebx, %ecx
    0000013b: 	je	.Ltmp524 # Offset: 315
.Ltmp521:
    0000013d: 	movslq	%esi, %rcx
    00000140: 	leaq	(,%rcx,4), %r10
    00000148: 	cmpl	(%rdi,%rcx,4), %r9d
    0000014c: 	je	.Ltmp525 # Offset: 332
.Ltmp528:
    0000014e: 	leal	0x1(%rsi), %ecx
    00000151: 	cmpl	%ecx, %r8d
    00000154: 	jle	.Ltmp524 # Offset: 340
    00000156: 	cmpl	%r9d, 0x4(%rdi,%r10)
    0000015b: 	je	.Ltmp526 # Offset: 347
.Ltmp529:
    0000015d: 	leal	0x2(%rsi), %ecx
    00000160: 	cmpl	%r8d, %ecx
    00000163: 	jge	.Ltmp524 # Offset: 355
    00000165: 	cmpl	0x8(%rdi,%r10), %r9d
    0000016a: 	je	.Ltmp527 # Offset: 362
.Ltmp524:
    0000016c: 	addq	%rdx, %rax
    0000016f: 	popq	%rbx
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp525:
    00000178: 	addq	$0x1, %rax
    0000017c: 	jmp	.Ltmp528 # Offset: 380
    0000017e: 	nop # Size: 2
.Ltmp526:
    00000180: 	addq	$0x1, %rax
    00000184: 	jmp	.Ltmp529 # Offset: 388
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp527:
    00000190: 	addq	$0x1, %rax
    00000194: 	popq	%rbx
    00000195: 	addq	%rdx, %rax
    00000198: 	retq # Offset: 408
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp518:
    000001a0: 	xorl	%esi, %esi
    000001a2: 	xorl	%edx, %edx
    000001a4: 	xorl	%eax, %eax
    000001a6: 	cmpl	%esi, %r8d
    000001a9: 	jg	.Ltmp530 # Offset: 425
.Ltmp520:
    000001af: 	addq	%rdx, %rax
    000001b2: 	retq # Offset: 434
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6IjEmPT_iS0_"

Binary Function "_Z6count7IjEmPT_iS0_" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x88f0
  Size        : 0x1cc
  MaxSize     : 0x1d0
  Offset      : 0x88f0
  Section     : .text
  Orc Section : .local.text._Z6count7IjEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r11d
    0000000b: 	movl	%edx, %ecx
    0000000d: 	pushq	%rbx
    0000000e: 	cmpl	$0x7, %esi
    00000011: 	jle	.Ltmp531 # Offset: 17
    00000017: 	leal	-0x8(%rsi), %ebp
    0000001a: 	movq	%rdi, %rdx
    0000001d: 	xorl	%r8d, %r8d
    00000020: 	xorl	%esi, %esi
    00000022: 	shrl	$0x3, %ebp
    00000025: 	movl	%ebp, %eax
    00000027: 	shlq	$0x5, %rax
    0000002b: 	leaq	0x20(%rdi,%rax), %rbx
    00000030: 	xorl	%edi, %edi
    00000032: 	xorl	%eax, %eax
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp532:
    00000038: 	xorl	%r9d, %r9d
    0000003b: 	cmpl	(%rdx), %ecx
    0000003d: 	sete	%r9b
    00000041: 	addq	%r9, %rax
    00000044: 	xorl	%r9d, %r9d
    00000047: 	cmpl	%ecx, 0x4(%rdx)
    0000004a: 	sete	%r9b
    0000004e: 	addq	%r9, %rsi
    00000051: 	xorl	%r9d, %r9d
    00000054: 	cmpl	%ecx, 0x8(%rdx)
    00000057: 	sete	%r9b
    0000005b: 	addq	%r9, %r8
    0000005e: 	xorl	%r9d, %r9d
    00000061: 	cmpl	0xc(%rdx), %ecx
    00000064: 	sete	%r9b
    00000068: 	addq	%r9, %rdi
    0000006b: 	xorl	%r9d, %r9d
    0000006e: 	cmpl	0x10(%rdx), %ecx
    00000071: 	sete	%r9b
    00000075: 	addq	%r9, %rax
    00000078: 	xorl	%r9d, %r9d
    0000007b: 	cmpl	0x14(%rdx), %ecx
    0000007e: 	sete	%r9b
    00000082: 	addq	%r9, %rsi
    00000085: 	xorl	%r9d, %r9d
    00000088: 	cmpl	0x18(%rdx), %ecx
    0000008b: 	sete	%r9b
    0000008f: 	addq	%r9, %r8
    00000092: 	xorl	%r9d, %r9d
    00000095: 	cmpl	0x1c(%rdx), %ecx
    00000098: 	sete	%r9b
    0000009c: 	addq	$0x20, %rdx
    000000a0: 	addq	%r9, %rdi
    000000a3: 	cmpq	%rdx, %rbx
    000000a6: 	jne	.Ltmp532 # Offset: 166
    000000a8: 	addq	%r8, %rsi
    000000ab: 	leal	0x8(,%rbp,8), %r9d
    000000b3: 	addq	%rdi, %rsi
.Ltmp542:
    000000b6: 	cmpl	%r9d, %r11d
    000000b9: 	jle	.Ltmp533 # Offset: 185
    000000bf: 	movl	%r11d, %ebx
    000000c2: 	subl	%r9d, %ebx
    000000c5: 	leal	-0x1(%rbx), %edx
    000000c8: 	cmpl	$0x2, %edx
    000000cb: 	jbe	.Ltmp534 # Offset: 203
    000000d1: 	movd	%ecx, %xmm6
    000000d5: 	pxor	%xmm1, %xmm1
    000000d9: 	pxor	%xmm2, %xmm2
    000000dd: 	movslq	%r9d, %rdx
    000000e0: 	leaq	(%r10,%rdx,4), %rdi
    000000e4: 	movl	%ebx, %edx
    000000e6: 	pshufd	$0x0, %xmm6, %xmm5
    000000eb: 	movdqa	DATAat0x19270(%rip), %xmm4
    000000f3: 	shrl	$0x2, %edx
    000000f6: 	leal	-0x1(%rdx), %r8d
    000000fa: 	leaq	0x10(%rdi), %rdx
    000000fe: 	shlq	$0x4, %r8
    00000102: 	addq	%rdx, %r8
    00000105: 	jmp	.Ltmp535 # Offset: 261
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp536:
    00000110: 	addq	$0x10, %rdx
.Ltmp535:
    00000114: 	movdqu	(%rdi), %xmm0
    00000118: 	movq	%rdx, %rdi
    0000011b: 	pcmpeqd	%xmm5, %xmm0
    0000011f: 	pand	%xmm4, %xmm0
    00000123: 	movdqa	%xmm0, %xmm3
    00000127: 	punpckhdq	%xmm2, %xmm0
    0000012b: 	punpckldq	%xmm2, %xmm3
    0000012f: 	paddq	%xmm3, %xmm0
    00000133: 	paddq	%xmm0, %xmm1
    00000137: 	cmpq	%rdx, %r8
    0000013a: 	jne	.Ltmp536 # Offset: 314
    0000013c: 	movdqa	%xmm1, %xmm0
    00000140: 	psrldq	$0x8, %xmm0
    00000145: 	paddq	%xmm0, %xmm1
    00000149: 	movq	%xmm1, %rdx
    0000014e: 	addq	%rdx, %rax
    00000151: 	movl	%ebx, %edx
    00000153: 	andl	$-0x4, %edx
    00000156: 	addl	%edx, %r9d
    00000159: 	cmpl	%edx, %ebx
    0000015b: 	je	.Ltmp533 # Offset: 347
.Ltmp534:
    0000015d: 	movslq	%r9d, %rdx
    00000160: 	leaq	(,%rdx,4), %rdi
    00000168: 	cmpl	%ecx, (%r10,%rdx,4)
    0000016c: 	je	.Ltmp537 # Offset: 364
.Ltmp540:
    0000016e: 	leal	0x1(%r9), %edx
    00000172: 	cmpl	%edx, %r11d
    00000175: 	jle	.Ltmp533 # Offset: 373
    00000177: 	cmpl	0x4(%r10,%rdi), %ecx
    0000017c: 	je	.Ltmp538 # Offset: 380
.Ltmp541:
    0000017e: 	addl	$0x2, %r9d
    00000182: 	cmpl	%r9d, %r11d
    00000185: 	jle	.Ltmp533 # Offset: 389
    00000187: 	cmpl	0x8(%r10,%rdi), %ecx
    0000018c: 	je	.Ltmp539 # Offset: 396
.Ltmp533:
    0000018e: 	addq	%rsi, %rax
    00000191: 	popq	%rbx
    00000192: 	popq	%rbp
    00000193: 	retq # Offset: 403
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp537:
    00000198: 	addq	$0x1, %rax
    0000019c: 	jmp	.Ltmp540 # Offset: 412
    0000019e: 	nop # Size: 2
.Ltmp538:
    000001a0: 	addq	$0x1, %rax
    000001a4: 	jmp	.Ltmp541 # Offset: 420
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp539:
    000001b0: 	addq	$0x1, %rax
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	addq	%rsi, %rax
    000001b9: 	retq # Offset: 441
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp531:
    000001c0: 	xorl	%esi, %esi
    000001c2: 	xorl	%r9d, %r9d
    000001c5: 	xorl	%eax, %eax
    000001c7: 	jmp	.Ltmp542 # Offset: 455
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7IjEmPT_iS0_"

Binary Function "_Z6count8IjEmPT_iS0_" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x8ac0
  Size        : 0x1c4
  MaxSize     : 0x1d0
  Offset      : 0x8ac0
  Section     : .text
  Orc Section : .local.text._Z6count8IjEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %r10d
    0000000d: 	cmpl	$0x7, %esi
    00000010: 	jle	.Ltmp543 # Offset: 16
    00000016: 	leal	-0x8(%rsi), %ecx
    00000019: 	movd	%edx, %xmm7
    0000001d: 	pxor	%xmm2, %xmm2
    00000021: 	movq	%rdi, %rax
    00000024: 	shrl	$0x3, %ecx
    00000027: 	pshufd	$0x0, %xmm7, %xmm5
    0000002c: 	movdqa	%xmm2, %xmm3
    00000030: 	xorl	%edx, %edx
    00000032: 	movdqa	DATAat0x19270(%rip), %xmm6
    0000003a: 	addl	$0x1, %ecx
    0000003d: 	pxor	%xmm4, %xmm4
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp544:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	movdqu	0x10(%rax), %xmm1
    00000051: 	addl	$0x1, %edx
    00000054: 	addq	$0x20, %rax
    00000058: 	pcmpeqd	%xmm5, %xmm0
    0000005c: 	pcmpeqd	%xmm5, %xmm1
    00000060: 	pand	%xmm6, %xmm0
    00000064: 	psubd	%xmm1, %xmm0
    00000068: 	movdqa	%xmm0, %xmm1
    0000006c: 	punpckhdq	%xmm4, %xmm0
    00000070: 	punpckldq	%xmm4, %xmm1
    00000074: 	paddq	%xmm0, %xmm2
    00000078: 	paddq	%xmm1, %xmm3
    0000007c: 	cmpl	%edx, %ecx
    0000007e: 	ja	.Ltmp544 # Offset: 126
    00000080: 	movhlps	%xmm3, %xmm7
    00000083: 	movq	%xmm2, %r11
    00000088: 	shll	$0x3, %ecx
    0000008b: 	movq	%xmm3, %rax
    00000090: 	movq	%xmm7, %rdx
    00000095: 	movhlps	%xmm2, %xmm7
    00000098: 	addq	%rdx, %r11
    0000009b: 	movq	%xmm7, %rdx
    000000a0: 	addq	%rdx, %r11
    000000a3: 	cmpl	%ecx, %r9d
    000000a6: 	jle	.Ltmp545 # Offset: 166
.Ltmp555:
    000000ac: 	pushq	%rbx
    000000ad: 	movl	%r9d, %ebx
    000000b0: 	subl	%ecx, %ebx
    000000b2: 	leal	-0x1(%rbx), %edx
    000000b5: 	cmpl	$0x2, %edx
    000000b8: 	jbe	.Ltmp546 # Offset: 184
    000000be: 	movd	%r10d, %xmm7
    000000c3: 	pxor	%xmm1, %xmm1
    000000c7: 	pxor	%xmm2, %xmm2
    000000cb: 	movslq	%ecx, %rdx
    000000ce: 	leaq	(%r8,%rdx,4), %rsi
    000000d2: 	movl	%ebx, %edx
    000000d4: 	pshufd	$0x0, %xmm7, %xmm4
    000000d9: 	movdqa	DATAat0x19270(%rip), %xmm6
    000000e1: 	shrl	$0x2, %edx
    000000e4: 	leal	-0x1(%rdx), %edi
    000000e7: 	leaq	0x10(%rsi), %rdx
    000000eb: 	shlq	$0x4, %rdi
    000000ef: 	addq	%rdx, %rdi
    000000f2: 	jmp	.Ltmp547 # Offset: 242
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp548:
    000000f8: 	addq	$0x10, %rdx
.Ltmp547:
    000000fc: 	movdqu	(%rsi), %xmm0
    00000100: 	movq	%rdx, %rsi
    00000103: 	pcmpeqd	%xmm4, %xmm0
    00000107: 	pand	%xmm6, %xmm0
    0000010b: 	movdqa	%xmm0, %xmm3
    0000010f: 	punpckldq	%xmm2, %xmm0
    00000113: 	punpckhdq	%xmm2, %xmm3
    00000117: 	paddq	%xmm3, %xmm0
    0000011b: 	paddq	%xmm0, %xmm1
    0000011f: 	cmpq	%rdx, %rdi
    00000122: 	jne	.Ltmp548 # Offset: 290
    00000124: 	movdqa	%xmm1, %xmm0
    00000128: 	psrldq	$0x8, %xmm0
    0000012d: 	paddq	%xmm0, %xmm1
    00000131: 	movq	%xmm1, %rdx
    00000136: 	addq	%rdx, %rax
    00000139: 	movl	%ebx, %edx
    0000013b: 	andl	$-0x4, %edx
    0000013e: 	addl	%edx, %ecx
    00000140: 	cmpl	%ebx, %edx
    00000142: 	je	.Ltmp549 # Offset: 322
.Ltmp546:
    00000144: 	movslq	%ecx, %rdx
    00000147: 	leaq	(,%rdx,4), %rsi
    0000014f: 	cmpl	(%r8,%rdx,4), %r10d
    00000153: 	je	.Ltmp550 # Offset: 339
.Ltmp553:
    00000155: 	leal	0x1(%rcx), %edx
    00000158: 	cmpl	%edx, %r9d
    0000015b: 	jle	.Ltmp549 # Offset: 347
    0000015d: 	cmpl	%r10d, 0x4(%r8,%rsi)
    00000162: 	je	.Ltmp551 # Offset: 354
.Ltmp554:
    00000164: 	addl	$0x2, %ecx
    00000167: 	cmpl	%r9d, %ecx
    0000016a: 	jge	.Ltmp549 # Offset: 362
    0000016c: 	cmpl	0x8(%r8,%rsi), %r10d
    00000171: 	je	.Ltmp552 # Offset: 369
.Ltmp549:
    00000173: 	addq	%r11, %rax
    00000176: 	popq	%rbx
    00000177: 	retq # Offset: 375
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp550:
    00000180: 	addq	$0x1, %rax
    00000184: 	jmp	.Ltmp553 # Offset: 388
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp551:
    00000190: 	addq	$0x1, %rax
    00000194: 	jmp	.Ltmp554 # Offset: 404
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp552:
    000001a0: 	addq	$0x1, %rax
    000001a4: 	popq	%rbx
    000001a5: 	addq	%r11, %rax
    000001a8: 	retq # Offset: 424
    000001a9: 	nopl	(%rax) # Size: 7
.Ltmp543:
    000001b0: 	xorl	%ecx, %ecx
    000001b2: 	xorl	%r11d, %r11d
    000001b5: 	xorl	%eax, %eax
    000001b7: 	cmpl	%ecx, %r9d
    000001ba: 	jg	.Ltmp555 # Offset: 442
.Ltmp545:
    000001c0: 	addq	%r11, %rax
    000001c3: 	retq # Offset: 451
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8IjEmPT_iS0_"

Binary Function "_Z6count1IiEmPT_iS0_" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x8c90
  Size        : 0xf9
  MaxSize     : 0x100
  Offset      : 0x8c90
  Section     : .text
  Orc Section : .local.text._Z6count1IiEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp556 # Offset: 11
    00000011: 	leal	-0x1(%rsi), %eax
    00000014: 	cmpl	$0x2, %eax
    00000017: 	jbe	.Ltmp557 # Offset: 23
    0000001d: 	shrl	$0x2, %esi
    00000020: 	movd	%edx, %xmm6
    00000024: 	pxor	%xmm1, %xmm1
    00000028: 	movq	%rdi, %rax
    0000002b: 	subl	$0x1, %esi
    0000002e: 	movdqa	DATAat0x19270(%rip), %xmm4
    00000036: 	pshufd	$0x0, %xmm6, %xmm5
    0000003b: 	pxor	%xmm2, %xmm2
    0000003f: 	shlq	$0x4, %rsi
    00000043: 	leaq	0x10(%rdi,%rsi), %rsi
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp558:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	addq	$0x10, %rax
    00000058: 	pcmpeqd	%xmm5, %xmm0
    0000005c: 	pand	%xmm4, %xmm0
    00000060: 	movdqa	%xmm0, %xmm3
    00000064: 	punpckhdq	%xmm2, %xmm0
    00000068: 	punpckldq	%xmm2, %xmm3
    0000006c: 	paddq	%xmm3, %xmm0
    00000070: 	paddq	%xmm0, %xmm1
    00000074: 	cmpq	%rax, %rsi
    00000077: 	jne	.Ltmp558 # Offset: 119
    00000079: 	movdqa	%xmm1, %xmm0
    0000007d: 	movl	%ecx, %esi
    0000007f: 	psrldq	$0x8, %xmm0
    00000084: 	andl	$-0x4, %esi
    00000087: 	paddq	%xmm0, %xmm1
    0000008b: 	movq	%xmm1, %rax
    00000090: 	testb	$0x3, %cl
    00000093: 	je	.Ltmp559 # Offset: 147
.Ltmp566:
    00000095: 	movslq	%esi, %rdi
    00000098: 	leaq	(,%rdi,4), %r9
    000000a0: 	cmpl	%edx, (%r8,%rdi,4)
    000000a4: 	je	.Ltmp560 # Offset: 164
.Ltmp564:
    000000a6: 	leal	0x1(%rsi), %edi
    000000a9: 	cmpl	%ecx, %edi
    000000ab: 	jge	.Ltmp561 # Offset: 171
    000000ad: 	cmpl	0x4(%r8,%r9), %edx
    000000b2: 	je	.Ltmp562 # Offset: 178
.Ltmp565:
    000000b4: 	addl	$0x2, %esi
    000000b7: 	cmpl	%esi, %ecx
    000000b9: 	jle	.Ltmp561 # Offset: 185
    000000bb: 	cmpl	0x8(%r8,%r9), %edx
    000000c0: 	je	.Ltmp563 # Offset: 192
.Ltmp561:
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp560:
    000000c8: 	addq	$0x1, %rax
    000000cc: 	jmp	.Ltmp564 # Offset: 204
    000000ce: 	nop # Size: 2
.Ltmp562:
    000000d0: 	addq	$0x1, %rax
    000000d4: 	jmp	.Ltmp565 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp559:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp563:
    000000e8: 	addq	$0x1, %rax
    000000ec: 	retq # Offset: 236
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp556:
    000000f0: 	xorl	%eax, %eax
    000000f2: 	retq # Offset: 242
.Ltmp557:
    000000f3: 	xorl	%esi, %esi
    000000f5: 	xorl	%eax, %eax
    000000f7: 	jmp	.Ltmp566 # Offset: 247
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1IiEmPT_iS0_"

Binary Function "_Z6count2IiEmPT_iS0_" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x8d90
  Size        : 0x9f
  MaxSize     : 0xa0
  Offset      : 0x8d90
  Section     : .text
  Orc Section : .local.text._Z6count2IiEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp567 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %r10d
    00000016: 	movq	%r9, %rax
    00000019: 	xorl	%r8d, %r8d
    0000001c: 	shrl	%r10d
    0000001f: 	movl	%r10d, %ecx
    00000022: 	leaq	0x8(%r9,%rcx,8), %rsi
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp568:
    00000030: 	xorl	%ecx, %ecx
    00000032: 	cmpl	(%rax), %edx
    00000034: 	sete	%cl
    00000037: 	addq	%rcx, %r8
    0000003a: 	xorl	%ecx, %ecx
    0000003c: 	cmpl	0x4(%rax), %edx
    0000003f: 	sete	%cl
    00000042: 	addq	$0x8, %rax
    00000046: 	addq	%rcx, %r8
    00000049: 	cmpq	%rax, %rsi
    0000004c: 	jne	.Ltmp568 # Offset: 76
    0000004e: 	leal	0x2(%r10,%r10), %eax
.Ltmp573:
    00000053: 	cmpl	%eax, %edi
    00000055: 	jle	.Ltmp569 # Offset: 85
    00000057: 	movslq	%eax, %rcx
    0000005a: 	leaq	(,%rcx,4), %rsi
    00000062: 	cmpl	%edx, (%r9,%rcx,4)
    00000066: 	je	.Ltmp570 # Offset: 102
    00000068: 	addl	$0x1, %eax
    0000006b: 	cmpl	%eax, %edi
    0000006d: 	jle	.Ltmp569 # Offset: 109
.Ltmp572:
    0000006f: 	cmpl	0x4(%r9,%rsi), %edx
    00000074: 	je	.Ltmp571 # Offset: 116
.Ltmp569:
    00000076: 	movq	%r8, %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp570:
    00000080: 	addl	$0x1, %eax
    00000083: 	addq	$0x1, %r8
    00000087: 	cmpl	%eax, %edi
    00000089: 	jle	.Ltmp569 # Offset: 137
    0000008b: 	jmp	.Ltmp572 # Offset: 139
.Ltmp571:
    0000008d: 	addq	$0x1, %r8
    00000091: 	jmp	.Ltmp569 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp567:
    00000098: 	xorl	%eax, %eax
    0000009a: 	xorl	%r8d, %r8d
    0000009d: 	jmp	.Ltmp573 # Offset: 157
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2IiEmPT_iS0_"

Binary Function "_Z6count3IiEmPT_iS0_" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x8e30
  Size        : 0xee
  MaxSize     : 0xf0
  Offset      : 0x8e30
  Section     : .text
  Orc Section : .local.text._Z6count3IiEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r8d
    0000000a: 	movl	%edx, %ecx
    0000000c: 	cmpl	$0x3, %esi
    0000000f: 	jle	.Ltmp574 # Offset: 15
    00000015: 	leal	-0x4(%rsi), %r10d
    00000019: 	movq	%rdi, %rdx
    0000001c: 	shrl	$0x2, %r10d
    00000020: 	movl	%r10d, %eax
    00000023: 	shlq	$0x4, %rax
    00000027: 	leaq	0x10(%rdi,%rax), %rdi
    0000002c: 	xorl	%eax, %eax
    0000002e: 	nop # Size: 2
.Ltmp575:
    00000030: 	xorl	%esi, %esi
    00000032: 	cmpl	(%rdx), %ecx
    00000034: 	sete	%sil
    00000038: 	addq	%rsi, %rax
    0000003b: 	xorl	%esi, %esi
    0000003d: 	cmpl	0x4(%rdx), %ecx
    00000040: 	sete	%sil
    00000044: 	addq	%rsi, %rax
    00000047: 	xorl	%esi, %esi
    00000049: 	cmpl	0x8(%rdx), %ecx
    0000004c: 	sete	%sil
    00000050: 	addq	%rsi, %rax
    00000053: 	xorl	%esi, %esi
    00000055: 	cmpl	0xc(%rdx), %ecx
    00000058: 	sete	%sil
    0000005c: 	addq	$0x10, %rdx
    00000060: 	addq	%rsi, %rax
    00000063: 	cmpq	%rdx, %rdi
    00000066: 	jne	.Ltmp575 # Offset: 102
    00000068: 	leal	0x4(,%r10,4), %edx
.Ltmp583:
    00000070: 	cmpl	%edx, %r8d
    00000073: 	jle	.Ltmp576 # Offset: 115
    00000075: 	movslq	%edx, %rsi
    00000078: 	leaq	(,%rsi,4), %rdi
    00000080: 	cmpl	%ecx, (%r9,%rsi,4)
    00000084: 	je	.Ltmp577 # Offset: 132
.Ltmp581:
    00000086: 	leal	0x1(%rdx), %esi
    00000089: 	cmpl	%r8d, %esi
    0000008c: 	jge	.Ltmp576 # Offset: 140
    0000008e: 	cmpl	%ecx, 0x4(%r9,%rdi)
    00000093: 	je	.Ltmp578 # Offset: 147
    00000095: 	leal	0x2(%rdx), %esi
    00000098: 	cmpl	%esi, %r8d
    0000009b: 	jle	.Ltmp576 # Offset: 155
.Ltmp582:
    0000009d: 	cmpl	0x8(%r9,%rdi), %ecx
    000000a2: 	jne	.Ltmp579 # Offset: 162
    000000a4: 	addq	$0x1, %rax
.Ltmp579:
    000000a8: 	addl	$0x3, %edx
    000000ab: 	cmpl	%r8d, %edx
    000000ae: 	jge	.Ltmp576 # Offset: 174
    000000b0: 	cmpl	0xc(%r9,%rdi), %ecx
    000000b5: 	je	.Ltmp580 # Offset: 181
.Ltmp576:
    000000b7: 	retq # Offset: 183
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp577:
    000000c0: 	addq	$0x1, %rax
    000000c4: 	jmp	.Ltmp581 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp578:
    000000d0: 	leal	0x2(%rdx), %esi
    000000d3: 	addq	$0x1, %rax
    000000d7: 	cmpl	%esi, %r8d
    000000da: 	jg	.Ltmp582 # Offset: 218
    000000dc: 	jmp	.Ltmp576 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp580:
    000000e0: 	addq	$0x1, %rax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp574:
    000000e8: 	xorl	%edx, %edx
    000000ea: 	xorl	%eax, %eax
    000000ec: 	jmp	.Ltmp583 # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3IiEmPT_iS0_"

Binary Function "_Z6count4IiEmPT_iS0_" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x8f20
  Size        : 0x194
  MaxSize     : 0x1a0
  Offset      : 0x8f20
  Section     : .text
  Orc Section : .local.text._Z6count4IiEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r10d
    0000000a: 	movl	%edx, %ecx
    0000000c: 	cmpl	$0x3, %esi
    0000000f: 	jle	.Ltmp584 # Offset: 15
    00000015: 	leal	-0x4(%rsi), %r11d
    00000019: 	movq	%rdi, %rdx
    0000001c: 	xorl	%esi, %esi
    0000001e: 	shrl	$0x2, %r11d
    00000022: 	movl	%r11d, %eax
    00000025: 	shlq	$0x4, %rax
    00000029: 	leaq	0x10(%rdi,%rax), %r8
    0000002e: 	xorl	%eax, %eax
.Ltmp585:
    00000030: 	xorl	%edi, %edi
    00000032: 	cmpl	(%rdx), %ecx
    00000034: 	sete	%dil
    00000038: 	addq	%rdi, %rsi
    0000003b: 	xorl	%edi, %edi
    0000003d: 	cmpl	0x4(%rdx), %ecx
    00000040: 	sete	%dil
    00000044: 	addq	%rdi, %rax
    00000047: 	xorl	%edi, %edi
    00000049: 	cmpl	0x8(%rdx), %ecx
    0000004c: 	sete	%dil
    00000050: 	addq	%rdi, %rsi
    00000053: 	xorl	%edi, %edi
    00000055: 	cmpl	0xc(%rdx), %ecx
    00000058: 	sete	%dil
    0000005c: 	addq	$0x10, %rdx
    00000060: 	addq	%rdi, %rax
    00000063: 	cmpq	%rdx, %r8
    00000066: 	jne	.Ltmp585 # Offset: 102
    00000068: 	leal	0x4(,%r11,4), %r11d
    00000070: 	cmpl	%r11d, %r10d
    00000073: 	jle	.Ltmp586 # Offset: 115
.Ltmp596:
    00000079: 	pushq	%rbx
    0000007a: 	movl	%r10d, %ebx
    0000007d: 	subl	%r11d, %ebx
    00000080: 	leal	-0x1(%rbx), %edx
    00000083: 	cmpl	$0x2, %edx
    00000086: 	jbe	.Ltmp587 # Offset: 134
    0000008c: 	movd	%ecx, %xmm6
    00000090: 	pxor	%xmm1, %xmm1
    00000094: 	pxor	%xmm2, %xmm2
    00000098: 	movslq	%r11d, %rdx
    0000009b: 	leaq	(%r9,%rdx,4), %rdi
    0000009f: 	movl	%ebx, %edx
    000000a1: 	pshufd	$0x0, %xmm6, %xmm5
    000000a6: 	movdqa	DATAat0x19270(%rip), %xmm4
    000000ae: 	shrl	$0x2, %edx
    000000b1: 	leal	-0x1(%rdx), %r8d
    000000b5: 	leaq	0x10(%rdi), %rdx
    000000b9: 	shlq	$0x4, %r8
    000000bd: 	addq	%rdx, %r8
    000000c0: 	jmp	.Ltmp588 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp589:
    000000c8: 	addq	$0x10, %rdx
.Ltmp588:
    000000cc: 	movdqu	(%rdi), %xmm0
    000000d0: 	movq	%rdx, %rdi
    000000d3: 	pcmpeqd	%xmm5, %xmm0
    000000d7: 	pand	%xmm4, %xmm0
    000000db: 	movdqa	%xmm0, %xmm3
    000000df: 	punpckhdq	%xmm2, %xmm0
    000000e3: 	punpckldq	%xmm2, %xmm3
    000000e7: 	paddq	%xmm3, %xmm0
    000000eb: 	paddq	%xmm0, %xmm1
    000000ef: 	cmpq	%rdx, %r8
    000000f2: 	jne	.Ltmp589 # Offset: 242
    000000f4: 	movdqa	%xmm1, %xmm0
    000000f8: 	psrldq	$0x8, %xmm0
    000000fd: 	paddq	%xmm0, %xmm1
    00000101: 	movq	%xmm1, %rdx
    00000106: 	addq	%rdx, %rsi
    00000109: 	movl	%ebx, %edx
    0000010b: 	andl	$-0x4, %edx
    0000010e: 	addl	%edx, %r11d
    00000111: 	cmpl	%edx, %ebx
    00000113: 	je	.Ltmp590 # Offset: 275
.Ltmp587:
    00000115: 	movslq	%r11d, %rdx
    00000118: 	leaq	(,%rdx,4), %rdi
    00000120: 	cmpl	%ecx, (%r9,%rdx,4)
    00000124: 	je	.Ltmp591 # Offset: 292
.Ltmp594:
    00000126: 	leal	0x1(%r11), %edx
    0000012a: 	cmpl	%r10d, %edx
    0000012d: 	jge	.Ltmp590 # Offset: 301
    0000012f: 	cmpl	0x4(%r9,%rdi), %ecx
    00000134: 	je	.Ltmp592 # Offset: 308
.Ltmp595:
    00000136: 	addl	$0x2, %r11d
    0000013a: 	cmpl	%r10d, %r11d
    0000013d: 	jge	.Ltmp590 # Offset: 317
    0000013f: 	cmpl	0x8(%r9,%rdi), %ecx
    00000144: 	je	.Ltmp593 # Offset: 324
.Ltmp590:
    00000146: 	addq	%rsi, %rax
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp591:
    00000150: 	addq	$0x1, %rsi
    00000154: 	jmp	.Ltmp594 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp592:
    00000160: 	addq	$0x1, %rsi
    00000164: 	jmp	.Ltmp595 # Offset: 356
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp593:
    00000170: 	addq	$0x1, %rsi
    00000174: 	popq	%rbx
    00000175: 	addq	%rsi, %rax
    00000178: 	retq # Offset: 376
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp584:
    00000180: 	xorl	%r11d, %r11d
    00000183: 	xorl	%eax, %eax
    00000185: 	xorl	%esi, %esi
    00000187: 	cmpl	%r11d, %r10d
    0000018a: 	jg	.Ltmp596 # Offset: 394
.Ltmp586:
    00000190: 	addq	%rsi, %rax
    00000193: 	retq # Offset: 403
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4IiEmPT_iS0_"

Binary Function "_Z6count5IiEmPT_iS0_" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x90c0
  Size        : 0x1b3
  MaxSize     : 0x1c0
  Offset      : 0x90c0
  Section     : .text
  Orc Section : .local.text._Z6count5IiEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %r9d
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp597 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	movd	%edx, %xmm7
    0000001a: 	pxor	%xmm2, %xmm2
    0000001e: 	xorl	%eax, %eax
    00000020: 	pshufd	$0x0, %xmm7, %xmm6
    00000025: 	shrl	$0x2, %ecx
    00000028: 	movdqa	%xmm2, %xmm1
    0000002c: 	pxor	%xmm3, %xmm3
    00000030: 	movdqa	DATAat0x19270(%rip), %xmm5
    00000038: 	addl	$0x1, %ecx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp598:
    00000040: 	movq	%rax, %rdx
    00000043: 	addq	$0x1, %rax
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	movdqu	(%rdi,%rdx), %xmm0
    00000050: 	pcmpeqd	%xmm6, %xmm0
    00000054: 	pand	%xmm5, %xmm0
    00000058: 	movdqa	%xmm0, %xmm4
    0000005c: 	punpckhdq	%xmm3, %xmm0
    00000060: 	punpckldq	%xmm3, %xmm4
    00000064: 	paddq	%xmm0, %xmm2
    00000068: 	paddq	%xmm4, %xmm1
    0000006c: 	cmpl	%eax, %ecx
    0000006e: 	ja	.Ltmp598 # Offset: 110
    00000070: 	movhlps	%xmm1, %xmm7
    00000073: 	leal	(,%rcx,4), %esi
    0000007a: 	movq	%xmm2, %rcx
    0000007f: 	movq	%xmm7, %rdx
    00000084: 	movhlps	%xmm2, %xmm7
    00000087: 	movq	%xmm1, %rax
    0000008c: 	addq	%rcx, %rdx
    0000008f: 	movq	%xmm7, %rcx
    00000094: 	addq	%rcx, %rdx
    00000097: 	cmpl	%esi, %r8d
    0000009a: 	jle	.Ltmp599 # Offset: 154
.Ltmp609:
    000000a0: 	pushq	%rbx
    000000a1: 	movl	%r8d, %ebx
    000000a4: 	subl	%esi, %ebx
    000000a6: 	leal	-0x1(%rbx), %ecx
    000000a9: 	cmpl	$0x2, %ecx
    000000ac: 	jbe	.Ltmp600 # Offset: 172
    000000b2: 	movd	%r9d, %xmm7
    000000b7: 	pxor	%xmm1, %xmm1
    000000bb: 	pxor	%xmm2, %xmm2
    000000bf: 	movslq	%esi, %rcx
    000000c2: 	leaq	(%rdi,%rcx,4), %r10
    000000c6: 	movl	%ebx, %ecx
    000000c8: 	pshufd	$0x0, %xmm7, %xmm4
    000000cd: 	movdqa	DATAat0x19270(%rip), %xmm5
    000000d5: 	shrl	$0x2, %ecx
    000000d8: 	leal	-0x1(%rcx), %r11d
    000000dc: 	leaq	0x10(%r10), %rcx
    000000e0: 	shlq	$0x4, %r11
    000000e4: 	addq	%rcx, %r11
    000000e7: 	jmp	.Ltmp601 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp602:
    000000f0: 	addq	$0x10, %rcx
.Ltmp601:
    000000f4: 	movdqu	(%r10), %xmm0
    000000f9: 	movq	%rcx, %r10
    000000fc: 	pcmpeqd	%xmm4, %xmm0
    00000100: 	pand	%xmm5, %xmm0
    00000104: 	movdqa	%xmm0, %xmm3
    00000108: 	punpckhdq	%xmm2, %xmm0
    0000010c: 	punpckldq	%xmm2, %xmm3
    00000110: 	paddq	%xmm3, %xmm0
    00000114: 	paddq	%xmm0, %xmm1
    00000118: 	cmpq	%rcx, %r11
    0000011b: 	jne	.Ltmp602 # Offset: 283
    0000011d: 	movdqa	%xmm1, %xmm0
    00000121: 	psrldq	$0x8, %xmm0
    00000126: 	paddq	%xmm0, %xmm1
    0000012a: 	movq	%xmm1, %rcx
    0000012f: 	addq	%rcx, %rax
    00000132: 	movl	%ebx, %ecx
    00000134: 	andl	$-0x4, %ecx
    00000137: 	addl	%ecx, %esi
    00000139: 	cmpl	%ecx, %ebx
    0000013b: 	je	.Ltmp603 # Offset: 315
.Ltmp600:
    0000013d: 	movslq	%esi, %rcx
    00000140: 	leaq	(,%rcx,4), %r10
    00000148: 	cmpl	(%rdi,%rcx,4), %r9d
    0000014c: 	je	.Ltmp604 # Offset: 332
.Ltmp607:
    0000014e: 	leal	0x1(%rsi), %ecx
    00000151: 	cmpl	%ecx, %r8d
    00000154: 	jle	.Ltmp603 # Offset: 340
    00000156: 	cmpl	%r9d, 0x4(%rdi,%r10)
    0000015b: 	je	.Ltmp605 # Offset: 347
.Ltmp608:
    0000015d: 	leal	0x2(%rsi), %ecx
    00000160: 	cmpl	%r8d, %ecx
    00000163: 	jge	.Ltmp603 # Offset: 355
    00000165: 	cmpl	0x8(%rdi,%r10), %r9d
    0000016a: 	je	.Ltmp606 # Offset: 362
.Ltmp603:
    0000016c: 	addq	%rdx, %rax
    0000016f: 	popq	%rbx
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp604:
    00000178: 	addq	$0x1, %rax
    0000017c: 	jmp	.Ltmp607 # Offset: 380
    0000017e: 	nop # Size: 2
.Ltmp605:
    00000180: 	addq	$0x1, %rax
    00000184: 	jmp	.Ltmp608 # Offset: 388
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp606:
    00000190: 	addq	$0x1, %rax
    00000194: 	popq	%rbx
    00000195: 	addq	%rdx, %rax
    00000198: 	retq # Offset: 408
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp597:
    000001a0: 	xorl	%esi, %esi
    000001a2: 	xorl	%edx, %edx
    000001a4: 	xorl	%eax, %eax
    000001a6: 	cmpl	%esi, %r8d
    000001a9: 	jg	.Ltmp609 # Offset: 425
.Ltmp599:
    000001af: 	addq	%rdx, %rax
    000001b2: 	retq # Offset: 434
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5IiEmPT_iS0_"

Binary Function "_Z6count6IiEmPT_iS0_" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x9280
  Size        : 0x1b3
  MaxSize     : 0x1c0
  Offset      : 0x9280
  Section     : .text
  Orc Section : .local.text._Z6count6IiEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %r9d
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp610 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	movd	%edx, %xmm7
    0000001a: 	pxor	%xmm2, %xmm2
    0000001e: 	xorl	%eax, %eax
    00000020: 	pshufd	$0x0, %xmm7, %xmm6
    00000025: 	shrl	$0x2, %ecx
    00000028: 	movdqa	%xmm2, %xmm1
    0000002c: 	pxor	%xmm3, %xmm3
    00000030: 	movdqa	DATAat0x19270(%rip), %xmm5
    00000038: 	addl	$0x1, %ecx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp611:
    00000040: 	movq	%rax, %rdx
    00000043: 	addq	$0x1, %rax
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	movdqu	(%rdi,%rdx), %xmm0
    00000050: 	pcmpeqd	%xmm6, %xmm0
    00000054: 	pand	%xmm5, %xmm0
    00000058: 	movdqa	%xmm0, %xmm4
    0000005c: 	punpckhdq	%xmm3, %xmm0
    00000060: 	punpckldq	%xmm3, %xmm4
    00000064: 	paddq	%xmm0, %xmm2
    00000068: 	paddq	%xmm4, %xmm1
    0000006c: 	cmpl	%eax, %ecx
    0000006e: 	ja	.Ltmp611 # Offset: 110
    00000070: 	movhlps	%xmm1, %xmm7
    00000073: 	leal	(,%rcx,4), %esi
    0000007a: 	movq	%xmm2, %rcx
    0000007f: 	movq	%xmm7, %rdx
    00000084: 	movhlps	%xmm2, %xmm7
    00000087: 	movq	%xmm1, %rax
    0000008c: 	addq	%rcx, %rdx
    0000008f: 	movq	%xmm7, %rcx
    00000094: 	addq	%rcx, %rdx
    00000097: 	cmpl	%esi, %r8d
    0000009a: 	jle	.Ltmp612 # Offset: 154
.Ltmp622:
    000000a0: 	pushq	%rbx
    000000a1: 	movl	%r8d, %ebx
    000000a4: 	subl	%esi, %ebx
    000000a6: 	leal	-0x1(%rbx), %ecx
    000000a9: 	cmpl	$0x2, %ecx
    000000ac: 	jbe	.Ltmp613 # Offset: 172
    000000b2: 	movd	%r9d, %xmm7
    000000b7: 	pxor	%xmm1, %xmm1
    000000bb: 	pxor	%xmm2, %xmm2
    000000bf: 	movslq	%esi, %rcx
    000000c2: 	leaq	(%rdi,%rcx,4), %r10
    000000c6: 	movl	%ebx, %ecx
    000000c8: 	pshufd	$0x0, %xmm7, %xmm4
    000000cd: 	movdqa	DATAat0x19270(%rip), %xmm5
    000000d5: 	shrl	$0x2, %ecx
    000000d8: 	leal	-0x1(%rcx), %r11d
    000000dc: 	leaq	0x10(%r10), %rcx
    000000e0: 	shlq	$0x4, %r11
    000000e4: 	addq	%rcx, %r11
    000000e7: 	jmp	.Ltmp614 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp615:
    000000f0: 	addq	$0x10, %rcx
.Ltmp614:
    000000f4: 	movdqu	(%r10), %xmm0
    000000f9: 	movq	%rcx, %r10
    000000fc: 	pcmpeqd	%xmm4, %xmm0
    00000100: 	pand	%xmm5, %xmm0
    00000104: 	movdqa	%xmm0, %xmm3
    00000108: 	punpckldq	%xmm2, %xmm0
    0000010c: 	punpckhdq	%xmm2, %xmm3
    00000110: 	paddq	%xmm3, %xmm0
    00000114: 	paddq	%xmm0, %xmm1
    00000118: 	cmpq	%rcx, %r11
    0000011b: 	jne	.Ltmp615 # Offset: 283
    0000011d: 	movdqa	%xmm1, %xmm0
    00000121: 	psrldq	$0x8, %xmm0
    00000126: 	paddq	%xmm0, %xmm1
    0000012a: 	movq	%xmm1, %rcx
    0000012f: 	addq	%rcx, %rax
    00000132: 	movl	%ebx, %ecx
    00000134: 	andl	$-0x4, %ecx
    00000137: 	addl	%ecx, %esi
    00000139: 	cmpl	%ebx, %ecx
    0000013b: 	je	.Ltmp616 # Offset: 315
.Ltmp613:
    0000013d: 	movslq	%esi, %rcx
    00000140: 	leaq	(,%rcx,4), %r10
    00000148: 	cmpl	(%rdi,%rcx,4), %r9d
    0000014c: 	je	.Ltmp617 # Offset: 332
.Ltmp620:
    0000014e: 	leal	0x1(%rsi), %ecx
    00000151: 	cmpl	%ecx, %r8d
    00000154: 	jle	.Ltmp616 # Offset: 340
    00000156: 	cmpl	%r9d, 0x4(%rdi,%r10)
    0000015b: 	je	.Ltmp618 # Offset: 347
.Ltmp621:
    0000015d: 	leal	0x2(%rsi), %ecx
    00000160: 	cmpl	%r8d, %ecx
    00000163: 	jge	.Ltmp616 # Offset: 355
    00000165: 	cmpl	0x8(%rdi,%r10), %r9d
    0000016a: 	je	.Ltmp619 # Offset: 362
.Ltmp616:
    0000016c: 	addq	%rdx, %rax
    0000016f: 	popq	%rbx
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp617:
    00000178: 	addq	$0x1, %rax
    0000017c: 	jmp	.Ltmp620 # Offset: 380
    0000017e: 	nop # Size: 2
.Ltmp618:
    00000180: 	addq	$0x1, %rax
    00000184: 	jmp	.Ltmp621 # Offset: 388
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp619:
    00000190: 	addq	$0x1, %rax
    00000194: 	popq	%rbx
    00000195: 	addq	%rdx, %rax
    00000198: 	retq # Offset: 408
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp610:
    000001a0: 	xorl	%esi, %esi
    000001a2: 	xorl	%edx, %edx
    000001a4: 	xorl	%eax, %eax
    000001a6: 	cmpl	%esi, %r8d
    000001a9: 	jg	.Ltmp622 # Offset: 425
.Ltmp612:
    000001af: 	addq	%rdx, %rax
    000001b2: 	retq # Offset: 434
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6IiEmPT_iS0_"

Binary Function "_Z6count7IiEmPT_iS0_" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x9440
  Size        : 0x1cc
  MaxSize     : 0x1d0
  Offset      : 0x9440
  Section     : .text
  Orc Section : .local.text._Z6count7IiEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r11d
    0000000b: 	movl	%edx, %ecx
    0000000d: 	pushq	%rbx
    0000000e: 	cmpl	$0x7, %esi
    00000011: 	jle	.Ltmp623 # Offset: 17
    00000017: 	leal	-0x8(%rsi), %ebp
    0000001a: 	movq	%rdi, %rdx
    0000001d: 	xorl	%r8d, %r8d
    00000020: 	xorl	%esi, %esi
    00000022: 	shrl	$0x3, %ebp
    00000025: 	movl	%ebp, %eax
    00000027: 	shlq	$0x5, %rax
    0000002b: 	leaq	0x20(%rdi,%rax), %rbx
    00000030: 	xorl	%edi, %edi
    00000032: 	xorl	%eax, %eax
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp624:
    00000038: 	xorl	%r9d, %r9d
    0000003b: 	cmpl	(%rdx), %ecx
    0000003d: 	sete	%r9b
    00000041: 	addq	%r9, %rax
    00000044: 	xorl	%r9d, %r9d
    00000047: 	cmpl	%ecx, 0x4(%rdx)
    0000004a: 	sete	%r9b
    0000004e: 	addq	%r9, %rsi
    00000051: 	xorl	%r9d, %r9d
    00000054: 	cmpl	%ecx, 0x8(%rdx)
    00000057: 	sete	%r9b
    0000005b: 	addq	%r9, %r8
    0000005e: 	xorl	%r9d, %r9d
    00000061: 	cmpl	0xc(%rdx), %ecx
    00000064: 	sete	%r9b
    00000068: 	addq	%r9, %rdi
    0000006b: 	xorl	%r9d, %r9d
    0000006e: 	cmpl	0x10(%rdx), %ecx
    00000071: 	sete	%r9b
    00000075: 	addq	%r9, %rax
    00000078: 	xorl	%r9d, %r9d
    0000007b: 	cmpl	0x14(%rdx), %ecx
    0000007e: 	sete	%r9b
    00000082: 	addq	%r9, %rsi
    00000085: 	xorl	%r9d, %r9d
    00000088: 	cmpl	0x18(%rdx), %ecx
    0000008b: 	sete	%r9b
    0000008f: 	addq	%r9, %r8
    00000092: 	xorl	%r9d, %r9d
    00000095: 	cmpl	0x1c(%rdx), %ecx
    00000098: 	sete	%r9b
    0000009c: 	addq	$0x20, %rdx
    000000a0: 	addq	%r9, %rdi
    000000a3: 	cmpq	%rdx, %rbx
    000000a6: 	jne	.Ltmp624 # Offset: 166
    000000a8: 	addq	%r8, %rsi
    000000ab: 	leal	0x8(,%rbp,8), %r9d
    000000b3: 	addq	%rdi, %rsi
.Ltmp634:
    000000b6: 	cmpl	%r9d, %r11d
    000000b9: 	jle	.Ltmp625 # Offset: 185
    000000bf: 	movl	%r11d, %ebx
    000000c2: 	subl	%r9d, %ebx
    000000c5: 	leal	-0x1(%rbx), %edx
    000000c8: 	cmpl	$0x2, %edx
    000000cb: 	jbe	.Ltmp626 # Offset: 203
    000000d1: 	movd	%ecx, %xmm6
    000000d5: 	pxor	%xmm1, %xmm1
    000000d9: 	pxor	%xmm2, %xmm2
    000000dd: 	movslq	%r9d, %rdx
    000000e0: 	leaq	(%r10,%rdx,4), %rdi
    000000e4: 	movl	%ebx, %edx
    000000e6: 	pshufd	$0x0, %xmm6, %xmm5
    000000eb: 	movdqa	DATAat0x19270(%rip), %xmm4
    000000f3: 	shrl	$0x2, %edx
    000000f6: 	leal	-0x1(%rdx), %r8d
    000000fa: 	leaq	0x10(%rdi), %rdx
    000000fe: 	shlq	$0x4, %r8
    00000102: 	addq	%rdx, %r8
    00000105: 	jmp	.Ltmp627 # Offset: 261
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp628:
    00000110: 	addq	$0x10, %rdx
.Ltmp627:
    00000114: 	movdqu	(%rdi), %xmm0
    00000118: 	movq	%rdx, %rdi
    0000011b: 	pcmpeqd	%xmm5, %xmm0
    0000011f: 	pand	%xmm4, %xmm0
    00000123: 	movdqa	%xmm0, %xmm3
    00000127: 	punpckhdq	%xmm2, %xmm0
    0000012b: 	punpckldq	%xmm2, %xmm3
    0000012f: 	paddq	%xmm3, %xmm0
    00000133: 	paddq	%xmm0, %xmm1
    00000137: 	cmpq	%rdx, %r8
    0000013a: 	jne	.Ltmp628 # Offset: 314
    0000013c: 	movdqa	%xmm1, %xmm0
    00000140: 	psrldq	$0x8, %xmm0
    00000145: 	paddq	%xmm0, %xmm1
    00000149: 	movq	%xmm1, %rdx
    0000014e: 	addq	%rdx, %rax
    00000151: 	movl	%ebx, %edx
    00000153: 	andl	$-0x4, %edx
    00000156: 	addl	%edx, %r9d
    00000159: 	cmpl	%edx, %ebx
    0000015b: 	je	.Ltmp625 # Offset: 347
.Ltmp626:
    0000015d: 	movslq	%r9d, %rdx
    00000160: 	leaq	(,%rdx,4), %rdi
    00000168: 	cmpl	%ecx, (%r10,%rdx,4)
    0000016c: 	je	.Ltmp629 # Offset: 364
.Ltmp632:
    0000016e: 	leal	0x1(%r9), %edx
    00000172: 	cmpl	%edx, %r11d
    00000175: 	jle	.Ltmp625 # Offset: 373
    00000177: 	cmpl	0x4(%r10,%rdi), %ecx
    0000017c: 	je	.Ltmp630 # Offset: 380
.Ltmp633:
    0000017e: 	addl	$0x2, %r9d
    00000182: 	cmpl	%r9d, %r11d
    00000185: 	jle	.Ltmp625 # Offset: 389
    00000187: 	cmpl	0x8(%r10,%rdi), %ecx
    0000018c: 	je	.Ltmp631 # Offset: 396
.Ltmp625:
    0000018e: 	addq	%rsi, %rax
    00000191: 	popq	%rbx
    00000192: 	popq	%rbp
    00000193: 	retq # Offset: 403
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp629:
    00000198: 	addq	$0x1, %rax
    0000019c: 	jmp	.Ltmp632 # Offset: 412
    0000019e: 	nop # Size: 2
.Ltmp630:
    000001a0: 	addq	$0x1, %rax
    000001a4: 	jmp	.Ltmp633 # Offset: 420
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp631:
    000001b0: 	addq	$0x1, %rax
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	addq	%rsi, %rax
    000001b9: 	retq # Offset: 441
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp623:
    000001c0: 	xorl	%esi, %esi
    000001c2: 	xorl	%r9d, %r9d
    000001c5: 	xorl	%eax, %eax
    000001c7: 	jmp	.Ltmp634 # Offset: 455
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7IiEmPT_iS0_"

Binary Function "_Z6count8IiEmPT_iS0_" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x9610
  Size        : 0x1c4
  MaxSize     : 0x1d0
  Offset      : 0x9610
  Section     : .text
  Orc Section : .local.text._Z6count8IiEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %r10d
    0000000d: 	cmpl	$0x7, %esi
    00000010: 	jle	.Ltmp635 # Offset: 16
    00000016: 	leal	-0x8(%rsi), %ecx
    00000019: 	movd	%edx, %xmm7
    0000001d: 	pxor	%xmm2, %xmm2
    00000021: 	movq	%rdi, %rax
    00000024: 	shrl	$0x3, %ecx
    00000027: 	pshufd	$0x0, %xmm7, %xmm5
    0000002c: 	movdqa	%xmm2, %xmm3
    00000030: 	xorl	%edx, %edx
    00000032: 	movdqa	DATAat0x19270(%rip), %xmm6
    0000003a: 	addl	$0x1, %ecx
    0000003d: 	pxor	%xmm4, %xmm4
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp636:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	movdqu	0x10(%rax), %xmm1
    00000051: 	addl	$0x1, %edx
    00000054: 	addq	$0x20, %rax
    00000058: 	pcmpeqd	%xmm5, %xmm0
    0000005c: 	pcmpeqd	%xmm5, %xmm1
    00000060: 	pand	%xmm6, %xmm0
    00000064: 	psubd	%xmm1, %xmm0
    00000068: 	movdqa	%xmm0, %xmm1
    0000006c: 	punpckhdq	%xmm4, %xmm0
    00000070: 	punpckldq	%xmm4, %xmm1
    00000074: 	paddq	%xmm0, %xmm2
    00000078: 	paddq	%xmm1, %xmm3
    0000007c: 	cmpl	%edx, %ecx
    0000007e: 	ja	.Ltmp636 # Offset: 126
    00000080: 	movhlps	%xmm3, %xmm7
    00000083: 	movq	%xmm2, %r11
    00000088: 	shll	$0x3, %ecx
    0000008b: 	movq	%xmm3, %rax
    00000090: 	movq	%xmm7, %rdx
    00000095: 	movhlps	%xmm2, %xmm7
    00000098: 	addq	%rdx, %r11
    0000009b: 	movq	%xmm7, %rdx
    000000a0: 	addq	%rdx, %r11
    000000a3: 	cmpl	%ecx, %r9d
    000000a6: 	jle	.Ltmp637 # Offset: 166
.Ltmp647:
    000000ac: 	pushq	%rbx
    000000ad: 	movl	%r9d, %ebx
    000000b0: 	subl	%ecx, %ebx
    000000b2: 	leal	-0x1(%rbx), %edx
    000000b5: 	cmpl	$0x2, %edx
    000000b8: 	jbe	.Ltmp638 # Offset: 184
    000000be: 	movd	%r10d, %xmm7
    000000c3: 	pxor	%xmm1, %xmm1
    000000c7: 	pxor	%xmm2, %xmm2
    000000cb: 	movslq	%ecx, %rdx
    000000ce: 	leaq	(%r8,%rdx,4), %rsi
    000000d2: 	movl	%ebx, %edx
    000000d4: 	pshufd	$0x0, %xmm7, %xmm4
    000000d9: 	movdqa	DATAat0x19270(%rip), %xmm6
    000000e1: 	shrl	$0x2, %edx
    000000e4: 	leal	-0x1(%rdx), %edi
    000000e7: 	leaq	0x10(%rsi), %rdx
    000000eb: 	shlq	$0x4, %rdi
    000000ef: 	addq	%rdx, %rdi
    000000f2: 	jmp	.Ltmp639 # Offset: 242
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp640:
    000000f8: 	addq	$0x10, %rdx
.Ltmp639:
    000000fc: 	movdqu	(%rsi), %xmm0
    00000100: 	movq	%rdx, %rsi
    00000103: 	pcmpeqd	%xmm4, %xmm0
    00000107: 	pand	%xmm6, %xmm0
    0000010b: 	movdqa	%xmm0, %xmm3
    0000010f: 	punpckldq	%xmm2, %xmm0
    00000113: 	punpckhdq	%xmm2, %xmm3
    00000117: 	paddq	%xmm3, %xmm0
    0000011b: 	paddq	%xmm0, %xmm1
    0000011f: 	cmpq	%rdx, %rdi
    00000122: 	jne	.Ltmp640 # Offset: 290
    00000124: 	movdqa	%xmm1, %xmm0
    00000128: 	psrldq	$0x8, %xmm0
    0000012d: 	paddq	%xmm0, %xmm1
    00000131: 	movq	%xmm1, %rdx
    00000136: 	addq	%rdx, %rax
    00000139: 	movl	%ebx, %edx
    0000013b: 	andl	$-0x4, %edx
    0000013e: 	addl	%edx, %ecx
    00000140: 	cmpl	%ebx, %edx
    00000142: 	je	.Ltmp641 # Offset: 322
.Ltmp638:
    00000144: 	movslq	%ecx, %rdx
    00000147: 	leaq	(,%rdx,4), %rsi
    0000014f: 	cmpl	(%r8,%rdx,4), %r10d
    00000153: 	je	.Ltmp642 # Offset: 339
.Ltmp645:
    00000155: 	leal	0x1(%rcx), %edx
    00000158: 	cmpl	%edx, %r9d
    0000015b: 	jle	.Ltmp641 # Offset: 347
    0000015d: 	cmpl	%r10d, 0x4(%r8,%rsi)
    00000162: 	je	.Ltmp643 # Offset: 354
.Ltmp646:
    00000164: 	addl	$0x2, %ecx
    00000167: 	cmpl	%r9d, %ecx
    0000016a: 	jge	.Ltmp641 # Offset: 362
    0000016c: 	cmpl	0x8(%r8,%rsi), %r10d
    00000171: 	je	.Ltmp644 # Offset: 369
.Ltmp641:
    00000173: 	addq	%r11, %rax
    00000176: 	popq	%rbx
    00000177: 	retq # Offset: 375
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp642:
    00000180: 	addq	$0x1, %rax
    00000184: 	jmp	.Ltmp645 # Offset: 388
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp643:
    00000190: 	addq	$0x1, %rax
    00000194: 	jmp	.Ltmp646 # Offset: 404
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp644:
    000001a0: 	addq	$0x1, %rax
    000001a4: 	popq	%rbx
    000001a5: 	addq	%r11, %rax
    000001a8: 	retq # Offset: 424
    000001a9: 	nopl	(%rax) # Size: 7
.Ltmp635:
    000001b0: 	xorl	%ecx, %ecx
    000001b2: 	xorl	%r11d, %r11d
    000001b5: 	xorl	%eax, %eax
    000001b7: 	cmpl	%ecx, %r9d
    000001ba: 	jg	.Ltmp647 # Offset: 442
.Ltmp637:
    000001c0: 	addq	%r11, %rax
    000001c3: 	retq # Offset: 451
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8IiEmPT_iS0_"

Binary Function "_Z6count1ImEmPT_iS0_" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x97e0
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x97e0
  Section     : .text
  Orc Section : .local.text._Z6count1ImEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp648 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	leaq	0x8(%rdi,%rax,8), %rsi
    00000010: 	xorl	%eax, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp649:
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	cmpq	(%rdi), %rdx
    0000001d: 	sete	%cl
    00000020: 	addq	$0x8, %rdi
    00000024: 	addq	%rcx, %rax
    00000027: 	cmpq	%rsi, %rdi
    0000002a: 	jne	.Ltmp649 # Offset: 42
    0000002c: 	retq # Offset: 44
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp648:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1ImEmPT_iS0_"

Binary Function "_Z6count2ImEmPT_iS0_" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x9820
  Size        : 0x9f
  MaxSize     : 0xa0
  Offset      : 0x9820
  Section     : .text
  Orc Section : .local.text._Z6count2ImEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp650 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %r10d
    00000016: 	movq	%r9, %rax
    00000019: 	xorl	%r8d, %r8d
    0000001c: 	shrl	%r10d
    0000001f: 	movl	%r10d, %ecx
    00000022: 	shlq	$0x4, %rcx
    00000026: 	leaq	0x10(%r9,%rcx), %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp651:
    00000030: 	xorl	%ecx, %ecx
    00000032: 	cmpq	(%rax), %rdx
    00000035: 	sete	%cl
    00000038: 	addq	%rcx, %r8
    0000003b: 	xorl	%ecx, %ecx
    0000003d: 	cmpq	0x8(%rax), %rdx
    00000041: 	sete	%cl
    00000044: 	addq	$0x10, %rax
    00000048: 	addq	%rcx, %r8
    0000004b: 	cmpq	%rax, %rsi
    0000004e: 	jne	.Ltmp651 # Offset: 78
    00000050: 	leal	0x2(%r10,%r10), %eax
.Ltmp656:
    00000055: 	cmpl	%eax, %edi
    00000057: 	jle	.Ltmp652 # Offset: 87
    00000059: 	movslq	%eax, %rcx
    0000005c: 	leaq	(,%rcx,8), %rsi
    00000064: 	cmpq	%rdx, (%r9,%rcx,8)
    00000068: 	je	.Ltmp653 # Offset: 104
    0000006a: 	addl	$0x1, %eax
    0000006d: 	cmpl	%eax, %edi
    0000006f: 	jle	.Ltmp652 # Offset: 111
.Ltmp655:
    00000071: 	cmpq	0x8(%r9,%rsi), %rdx
    00000076: 	je	.Ltmp654 # Offset: 118
.Ltmp652:
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp653:
    00000080: 	addl	$0x1, %eax
    00000083: 	addq	$0x1, %r8
    00000087: 	cmpl	%eax, %edi
    00000089: 	jle	.Ltmp652 # Offset: 137
    0000008b: 	jmp	.Ltmp655 # Offset: 139
.Ltmp654:
    0000008d: 	addq	$0x1, %r8
    00000091: 	jmp	.Ltmp652 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp650:
    00000098: 	xorl	%eax, %eax
    0000009a: 	xorl	%r8d, %r8d
    0000009d: 	jmp	.Ltmp656 # Offset: 157
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2ImEmPT_iS0_"

Binary Function "_Z6count3ImEmPT_iS0_" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x98c0
  Size        : 0xee
  MaxSize     : 0xf0
  Offset      : 0x98c0
  Section     : .text
  Orc Section : .local.text._Z6count3ImEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r8d
    0000000a: 	movq	%rdx, %rcx
    0000000d: 	cmpl	$0x3, %esi
    00000010: 	jle	.Ltmp657 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %r10d
    0000001a: 	movq	%rdi, %rdx
    0000001d: 	shrl	$0x2, %r10d
    00000021: 	movl	%r10d, %eax
    00000024: 	shlq	$0x5, %rax
    00000028: 	leaq	0x20(%rdi,%rax), %rdi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	nop # Size: 1
.Ltmp658:
    00000030: 	xorl	%esi, %esi
    00000032: 	cmpq	(%rdx), %rcx
    00000035: 	sete	%sil
    00000039: 	addq	%rsi, %rax
    0000003c: 	xorl	%esi, %esi
    0000003e: 	cmpq	0x8(%rdx), %rcx
    00000042: 	sete	%sil
    00000046: 	addq	%rsi, %rax
    00000049: 	xorl	%esi, %esi
    0000004b: 	cmpq	0x10(%rdx), %rcx
    0000004f: 	sete	%sil
    00000053: 	addq	%rsi, %rax
    00000056: 	xorl	%esi, %esi
    00000058: 	cmpq	0x18(%rdx), %rcx
    0000005c: 	sete	%sil
    00000060: 	addq	$0x20, %rdx
    00000064: 	addq	%rsi, %rax
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	jne	.Ltmp658 # Offset: 106
    0000006c: 	leal	0x4(,%r10,4), %edx
.Ltmp666:
    00000074: 	cmpl	%edx, %r8d
    00000077: 	jle	.Ltmp659 # Offset: 119
    00000079: 	movslq	%edx, %rsi
    0000007c: 	leaq	(,%rsi,8), %rdi
    00000084: 	cmpq	%rcx, (%r9,%rsi,8)
    00000088: 	je	.Ltmp660 # Offset: 136
.Ltmp664:
    0000008a: 	leal	0x1(%rdx), %esi
    0000008d: 	cmpl	%r8d, %esi
    00000090: 	jge	.Ltmp659 # Offset: 144
    00000092: 	cmpq	%rcx, 0x8(%r9,%rdi)
    00000097: 	je	.Ltmp661 # Offset: 151
    00000099: 	leal	0x2(%rdx), %esi
    0000009c: 	cmpl	%esi, %r8d
    0000009f: 	jle	.Ltmp659 # Offset: 159
.Ltmp665:
    000000a1: 	cmpq	0x10(%r9,%rdi), %rcx
    000000a6: 	jne	.Ltmp662 # Offset: 166
    000000a8: 	addq	$0x1, %rax
.Ltmp662:
    000000ac: 	addl	$0x3, %edx
    000000af: 	cmpl	%r8d, %edx
    000000b2: 	jge	.Ltmp659 # Offset: 178
    000000b4: 	cmpq	0x18(%r9,%rdi), %rcx
    000000b9: 	je	.Ltmp663 # Offset: 185
.Ltmp659:
    000000bb: 	retq # Offset: 187
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp660:
    000000c0: 	addq	$0x1, %rax
    000000c4: 	jmp	.Ltmp664 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp661:
    000000d0: 	leal	0x2(%rdx), %esi
    000000d3: 	addq	$0x1, %rax
    000000d7: 	cmpl	%esi, %r8d
    000000da: 	jg	.Ltmp665 # Offset: 218
    000000dc: 	jmp	.Ltmp659 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp663:
    000000e0: 	addq	$0x1, %rax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp657:
    000000e8: 	xorl	%edx, %edx
    000000ea: 	xorl	%eax, %eax
    000000ec: 	jmp	.Ltmp666 # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3ImEmPT_iS0_"

Binary Function "_Z6count4ImEmPT_iS0_" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x99b0
  Size        : 0xc8
  MaxSize     : 0xd0
  Offset      : 0x99b0
  Section     : .text
  Orc Section : .local.text._Z6count4ImEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdi, %r9
    0000000a: 	movq	%rdx, %rsi
    0000000d: 	cmpl	$0x3, %r8d
    00000011: 	jle	.Ltmp667 # Offset: 17
    00000017: 	leal	-0x4(%r8), %r11d
    0000001b: 	movq	%rdi, %rdx
    0000001e: 	xorl	%ecx, %ecx
    00000020: 	shrl	$0x2, %r11d
    00000024: 	movl	%r11d, %eax
    00000027: 	shlq	$0x5, %rax
    0000002b: 	leaq	0x20(%rdi,%rax), %r10
    00000030: 	xorl	%eax, %eax
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp668:
    00000038: 	xorl	%edi, %edi
    0000003a: 	cmpq	(%rdx), %rsi
    0000003d: 	sete	%dil
    00000041: 	addq	%rdi, %rcx
    00000044: 	xorl	%edi, %edi
    00000046: 	cmpq	0x8(%rdx), %rsi
    0000004a: 	sete	%dil
    0000004e: 	addq	%rdi, %rax
    00000051: 	xorl	%edi, %edi
    00000053: 	cmpq	0x10(%rdx), %rsi
    00000057: 	sete	%dil
    0000005b: 	addq	%rdi, %rcx
    0000005e: 	xorl	%edi, %edi
    00000060: 	cmpq	0x18(%rdx), %rsi
    00000064: 	sete	%dil
    00000068: 	addq	$0x20, %rdx
    0000006c: 	addq	%rdi, %rax
    0000006f: 	cmpq	%rdx, %r10
    00000072: 	jne	.Ltmp668 # Offset: 114
    00000074: 	leal	0x4(,%r11,4), %edi
.Ltmp671:
    0000007c: 	cmpl	%edi, %r8d
    0000007f: 	jle	.Ltmp669 # Offset: 127
    00000081: 	subl	$0x1, %r8d
    00000085: 	movslq	%edi, %r10
    00000088: 	subl	%edi, %r8d
    0000008b: 	leaq	(%r9,%r10,8), %rdx
    0000008f: 	addq	%r10, %r8
    00000092: 	leaq	0x8(%r9,%r8,8), %r8
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp670:
    000000a0: 	xorl	%edi, %edi
    000000a2: 	cmpq	%rsi, (%rdx)
    000000a5: 	sete	%dil
    000000a9: 	addq	$0x8, %rdx
    000000ad: 	addq	%rdi, %rcx
    000000b0: 	cmpq	%rdx, %r8
    000000b3: 	jne	.Ltmp670 # Offset: 179
.Ltmp669:
    000000b5: 	addq	%rcx, %rax
    000000b8: 	retq # Offset: 184
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp667:
    000000c0: 	xorl	%edi, %edi
    000000c2: 	xorl	%eax, %eax
    000000c4: 	xorl	%ecx, %ecx
    000000c6: 	jmp	.Ltmp671 # Offset: 198
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4ImEmPT_iS0_"

Binary Function "_Z6count5ImEmPT_iS0_" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x9a80
  Size        : 0xd1
  MaxSize     : 0xe0
  Offset      : 0x9a80
  Section     : .text
  Orc Section : .local.text._Z6count5ImEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r11d
    0000000b: 	movq	%rdx, %rcx
    0000000e: 	pushq	%rbx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp672 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ebp
    0000001b: 	movq	%rdi, %rdx
    0000001e: 	xorl	%r8d, %r8d
    00000021: 	xorl	%esi, %esi
    00000023: 	shrl	$0x2, %ebp
    00000026: 	movl	%ebp, %eax
    00000028: 	shlq	$0x5, %rax
    0000002c: 	leaq	0x20(%rdi,%rax), %rbx
    00000031: 	xorl	%edi, %edi
    00000033: 	xorl	%eax, %eax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp673:
    00000038: 	xorl	%r9d, %r9d
    0000003b: 	cmpq	(%rdx), %rcx
    0000003e: 	sete	%r9b
    00000042: 	addq	%r9, %rax
    00000045: 	xorl	%r9d, %r9d
    00000048: 	cmpq	0x8(%rdx), %rcx
    0000004c: 	sete	%r9b
    00000050: 	addq	%r9, %rsi
    00000053: 	xorl	%r9d, %r9d
    00000056: 	cmpq	0x10(%rdx), %rcx
    0000005a: 	sete	%r9b
    0000005e: 	addq	%r9, %r8
    00000061: 	xorl	%r9d, %r9d
    00000064: 	cmpq	0x18(%rdx), %rcx
    00000068: 	sete	%r9b
    0000006c: 	addq	$0x20, %rdx
    00000070: 	addq	%r9, %rdi
    00000073: 	cmpq	%rbx, %rdx
    00000076: 	jne	.Ltmp673 # Offset: 118
    00000078: 	addq	%r8, %rsi
    0000007b: 	leal	0x4(,%rbp,4), %r9d
    00000083: 	addq	%rdi, %rsi
.Ltmp676:
    00000086: 	cmpl	%r9d, %r11d
    00000089: 	jle	.Ltmp674 # Offset: 137
    0000008b: 	subl	$0x1, %r11d
    0000008f: 	movslq	%r9d, %rdi
    00000092: 	subl	%r9d, %r11d
    00000095: 	leaq	(%r10,%rdi,8), %rdx
    00000099: 	addq	%rdi, %r11
    0000009c: 	leaq	0x8(%r10,%r11,8), %r8
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp675:
    000000a8: 	xorl	%edi, %edi
    000000aa: 	cmpq	%rcx, (%rdx)
    000000ad: 	sete	%dil
    000000b1: 	addq	$0x8, %rdx
    000000b5: 	addq	%rdi, %rax
    000000b8: 	cmpq	%rdx, %r8
    000000bb: 	jne	.Ltmp675 # Offset: 187
.Ltmp674:
    000000bd: 	addq	%rsi, %rax
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp672:
    000000c8: 	xorl	%esi, %esi
    000000ca: 	xorl	%r9d, %r9d
    000000cd: 	xorl	%eax, %eax
    000000cf: 	jmp	.Ltmp676 # Offset: 207
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5ImEmPT_iS0_"

Binary Function "_Z6count6ImEmPT_iS0_" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x9b60
  Size        : 0xd1
  MaxSize     : 0xe0
  Offset      : 0x9b60
  Section     : .text
  Orc Section : .local.text._Z6count6ImEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r11d
    0000000b: 	movq	%rdx, %rcx
    0000000e: 	pushq	%rbx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp677 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ebp
    0000001b: 	movq	%rdi, %rdx
    0000001e: 	xorl	%r8d, %r8d
    00000021: 	xorl	%esi, %esi
    00000023: 	shrl	$0x2, %ebp
    00000026: 	movl	%ebp, %eax
    00000028: 	shlq	$0x5, %rax
    0000002c: 	leaq	0x20(%rdi,%rax), %rbx
    00000031: 	xorl	%edi, %edi
    00000033: 	xorl	%eax, %eax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp678:
    00000038: 	xorl	%r9d, %r9d
    0000003b: 	cmpq	%rcx, (%rdx)
    0000003e: 	sete	%r9b
    00000042: 	addq	%r9, %rax
    00000045: 	xorl	%r9d, %r9d
    00000048: 	cmpq	%rcx, 0x8(%rdx)
    0000004c: 	sete	%r9b
    00000050: 	addq	%r9, %rsi
    00000053: 	xorl	%r9d, %r9d
    00000056: 	cmpq	%rcx, 0x10(%rdx)
    0000005a: 	sete	%r9b
    0000005e: 	addq	%r9, %r8
    00000061: 	xorl	%r9d, %r9d
    00000064: 	cmpq	%rcx, 0x18(%rdx)
    00000068: 	sete	%r9b
    0000006c: 	addq	$0x20, %rdx
    00000070: 	addq	%r9, %rdi
    00000073: 	cmpq	%rdx, %rbx
    00000076: 	jne	.Ltmp678 # Offset: 118
    00000078: 	addq	%r8, %rsi
    0000007b: 	leal	0x4(,%rbp,4), %r9d
    00000083: 	addq	%rdi, %rsi
.Ltmp681:
    00000086: 	cmpl	%r9d, %r11d
    00000089: 	jle	.Ltmp679 # Offset: 137
    0000008b: 	subl	$0x1, %r11d
    0000008f: 	movslq	%r9d, %rdi
    00000092: 	subl	%r9d, %r11d
    00000095: 	leaq	(%r10,%rdi,8), %rdx
    00000099: 	addq	%rdi, %r11
    0000009c: 	leaq	0x8(%r10,%r11,8), %r8
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp680:
    000000a8: 	xorl	%edi, %edi
    000000aa: 	cmpq	(%rdx), %rcx
    000000ad: 	sete	%dil
    000000b1: 	addq	$0x8, %rdx
    000000b5: 	addq	%rdi, %rax
    000000b8: 	cmpq	%r8, %rdx
    000000bb: 	jne	.Ltmp680 # Offset: 187
.Ltmp679:
    000000bd: 	addq	%rsi, %rax
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp677:
    000000c8: 	xorl	%esi, %esi
    000000ca: 	xorl	%r9d, %r9d
    000000cd: 	xorl	%eax, %eax
    000000cf: 	jmp	.Ltmp681 # Offset: 207
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6ImEmPT_iS0_"

Binary Function "_Z6count7ImEmPT_iS0_" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x9c40
  Size        : 0x109
  MaxSize     : 0x110
  Offset      : 0x9c40
  Section     : .text
  Orc Section : .local.text._Z6count7ImEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r11d
    0000000b: 	movq	%rdx, %rcx
    0000000e: 	pushq	%rbx
    0000000f: 	cmpl	$0x7, %esi
    00000012: 	jle	.Ltmp682 # Offset: 18
    00000018: 	leal	-0x8(%rsi), %ebp
    0000001b: 	movq	%rdi, %rdx
    0000001e: 	xorl	%r8d, %r8d
    00000021: 	xorl	%esi, %esi
    00000023: 	shrl	$0x3, %ebp
    00000026: 	movl	%ebp, %eax
    00000028: 	shlq	$0x6, %rax
    0000002c: 	leaq	0x40(%rdi,%rax), %rbx
    00000031: 	xorl	%edi, %edi
    00000033: 	xorl	%eax, %eax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp683:
    00000038: 	xorl	%r9d, %r9d
    0000003b: 	cmpq	(%rdx), %rcx
    0000003e: 	sete	%r9b
    00000042: 	addq	%r9, %rax
    00000045: 	xorl	%r9d, %r9d
    00000048: 	cmpq	%rcx, 0x8(%rdx)
    0000004c: 	sete	%r9b
    00000050: 	addq	%r9, %rsi
    00000053: 	xorl	%r9d, %r9d
    00000056: 	cmpq	%rcx, 0x10(%rdx)
    0000005a: 	sete	%r9b
    0000005e: 	addq	%r9, %r8
    00000061: 	xorl	%r9d, %r9d
    00000064: 	cmpq	0x18(%rdx), %rcx
    00000068: 	sete	%r9b
    0000006c: 	addq	%r9, %rdi
    0000006f: 	xorl	%r9d, %r9d
    00000072: 	cmpq	0x20(%rdx), %rcx
    00000076: 	sete	%r9b
    0000007a: 	addq	%r9, %rax
    0000007d: 	xorl	%r9d, %r9d
    00000080: 	cmpq	0x28(%rdx), %rcx
    00000084: 	sete	%r9b
    00000088: 	addq	%r9, %rsi
    0000008b: 	xorl	%r9d, %r9d
    0000008e: 	cmpq	0x30(%rdx), %rcx
    00000092: 	sete	%r9b
    00000096: 	addq	%r9, %r8
    00000099: 	xorl	%r9d, %r9d
    0000009c: 	cmpq	0x38(%rdx), %rcx
    000000a0: 	sete	%r9b
    000000a4: 	addq	$0x40, %rdx
    000000a8: 	addq	%r9, %rdi
    000000ab: 	cmpq	%rbx, %rdx
    000000ae: 	jne	.Ltmp683 # Offset: 174
    000000b0: 	addq	%r8, %rsi
    000000b3: 	leal	0x8(,%rbp,8), %r9d
    000000bb: 	addq	%rdi, %rsi
.Ltmp686:
    000000be: 	cmpl	%r9d, %r11d
    000000c1: 	jle	.Ltmp684 # Offset: 193
    000000c3: 	subl	$0x1, %r11d
    000000c7: 	movslq	%r9d, %rdi
    000000ca: 	subl	%r9d, %r11d
    000000cd: 	leaq	(%r10,%rdi,8), %rdx
    000000d1: 	addq	%rdi, %r11
    000000d4: 	leaq	0x8(%r10,%r11,8), %r8
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp685:
    000000e0: 	xorl	%edi, %edi
    000000e2: 	cmpq	(%rdx), %rcx
    000000e5: 	sete	%dil
    000000e9: 	addq	$0x8, %rdx
    000000ed: 	addq	%rdi, %rax
    000000f0: 	cmpq	%rdx, %r8
    000000f3: 	jne	.Ltmp685 # Offset: 243
.Ltmp684:
    000000f5: 	addq	%rsi, %rax
    000000f8: 	popq	%rbx
    000000f9: 	popq	%rbp
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp682:
    00000100: 	xorl	%esi, %esi
    00000102: 	xorl	%r9d, %r9d
    00000105: 	xorl	%eax, %eax
    00000107: 	jmp	.Ltmp686 # Offset: 263
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7ImEmPT_iS0_"

Binary Function "_Z6count8ImEmPT_iS0_" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x9d50
  Size        : 0x108
  MaxSize     : 0x110
  Offset      : 0x9d50
  Section     : .text
  Orc Section : .local.text._Z6count8ImEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r10
    00000009: 	movl	%esi, %r11d
    0000000c: 	movq	%rdx, %rcx
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	cmpl	$0x7, %esi
    00000014: 	jle	.Ltmp687 # Offset: 20
    0000001a: 	leal	-0x8(%rsi), %ebp
    0000001d: 	movq	%rdi, %rdx
    00000020: 	xorl	%r8d, %r8d
    00000023: 	xorl	%r9d, %r9d
    00000026: 	shrl	$0x3, %ebp
    00000029: 	movl	%ebp, %eax
    0000002b: 	shlq	$0x6, %rax
    0000002f: 	leaq	0x40(%rdi,%rax), %rbx
    00000034: 	xorl	%edi, %edi
    00000036: 	xorl	%eax, %eax
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp688:
    00000040: 	xorl	%esi, %esi
    00000042: 	cmpq	%rcx, (%rdx)
    00000045: 	sete	%sil
    00000049: 	xorl	%r12d, %r12d
    0000004c: 	cmpq	%rcx, 0x20(%rdx)
    00000050: 	sete	%r12b
    00000054: 	addq	%r12, %rsi
    00000057: 	addq	%rsi, %rax
    0000005a: 	xorl	%esi, %esi
    0000005c: 	cmpq	%rcx, 0x8(%rdx)
    00000060: 	sete	%sil
    00000064: 	xorl	%r12d, %r12d
    00000067: 	cmpq	%rcx, 0x28(%rdx)
    0000006b: 	sete	%r12b
    0000006f: 	addq	%r12, %rsi
    00000072: 	addq	%rsi, %rdi
    00000075: 	xorl	%esi, %esi
    00000077: 	cmpq	%rcx, 0x10(%rdx)
    0000007b: 	sete	%sil
    0000007f: 	xorl	%r12d, %r12d
    00000082: 	cmpq	%rcx, 0x30(%rdx)
    00000086: 	sete	%r12b
    0000008a: 	addq	%r12, %rsi
    0000008d: 	addq	%rsi, %r9
    00000090: 	xorl	%esi, %esi
    00000092: 	cmpq	%rcx, 0x18(%rdx)
    00000096: 	sete	%sil
    0000009a: 	xorl	%r12d, %r12d
    0000009d: 	cmpq	%rcx, 0x38(%rdx)
    000000a1: 	sete	%r12b
    000000a5: 	addq	$0x40, %rdx
    000000a9: 	addq	%r12, %rsi
    000000ac: 	addq	%rsi, %r8
    000000af: 	cmpq	%rbx, %rdx
    000000b2: 	jne	.Ltmp688 # Offset: 178
    000000b4: 	addq	%r9, %rdi
    000000b7: 	leal	0x8(,%rbp,8), %esi
    000000be: 	addq	%r8, %rdi
.Ltmp691:
    000000c1: 	cmpl	%esi, %r11d
    000000c4: 	jle	.Ltmp689 # Offset: 196
    000000c6: 	subl	$0x1, %r11d
    000000ca: 	movslq	%esi, %r8
    000000cd: 	subl	%esi, %r11d
    000000d0: 	leaq	(%r10,%r8,8), %rdx
    000000d4: 	addq	%r8, %r11
    000000d7: 	leaq	0x8(%r10,%r11,8), %r8
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp690:
    000000e0: 	xorl	%esi, %esi
    000000e2: 	cmpq	(%rdx), %rcx
    000000e5: 	sete	%sil
    000000e9: 	addq	$0x8, %rdx
    000000ed: 	addq	%rsi, %rax
    000000f0: 	cmpq	%r8, %rdx
    000000f3: 	jne	.Ltmp690 # Offset: 243
.Ltmp689:
    000000f5: 	popq	%rbx
    000000f6: 	addq	%rdi, %rax
    000000f9: 	popq	%rbp
    000000fa: 	popq	%r12
    000000fc: 	retq # Offset: 252
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp687:
    00000100: 	xorl	%edi, %edi
    00000102: 	xorl	%esi, %esi
    00000104: 	xorl	%eax, %eax
    00000106: 	jmp	.Ltmp691 # Offset: 262
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8ImEmPT_iS0_"

Binary Function "_Z6count1IlEmPT_iS0_" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x9e60
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x9e60
  Section     : .text
  Orc Section : .local.text._Z6count1IlEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp692 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	leaq	0x8(%rdi,%rax,8), %rsi
    00000010: 	xorl	%eax, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp693:
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	cmpq	(%rdi), %rdx
    0000001d: 	sete	%cl
    00000020: 	addq	$0x8, %rdi
    00000024: 	addq	%rcx, %rax
    00000027: 	cmpq	%rsi, %rdi
    0000002a: 	jne	.Ltmp693 # Offset: 42
    0000002c: 	retq # Offset: 44
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp692:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1IlEmPT_iS0_"

Binary Function "_Z6count2IlEmPT_iS0_" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x9ea0
  Size        : 0x9f
  MaxSize     : 0xa0
  Offset      : 0x9ea0
  Section     : .text
  Orc Section : .local.text._Z6count2IlEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp694 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %r10d
    00000016: 	movq	%r9, %rax
    00000019: 	xorl	%r8d, %r8d
    0000001c: 	shrl	%r10d
    0000001f: 	movl	%r10d, %ecx
    00000022: 	shlq	$0x4, %rcx
    00000026: 	leaq	0x10(%r9,%rcx), %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp695:
    00000030: 	xorl	%ecx, %ecx
    00000032: 	cmpq	(%rax), %rdx
    00000035: 	sete	%cl
    00000038: 	addq	%rcx, %r8
    0000003b: 	xorl	%ecx, %ecx
    0000003d: 	cmpq	0x8(%rax), %rdx
    00000041: 	sete	%cl
    00000044: 	addq	$0x10, %rax
    00000048: 	addq	%rcx, %r8
    0000004b: 	cmpq	%rax, %rsi
    0000004e: 	jne	.Ltmp695 # Offset: 78
    00000050: 	leal	0x2(%r10,%r10), %eax
.Ltmp700:
    00000055: 	cmpl	%eax, %edi
    00000057: 	jle	.Ltmp696 # Offset: 87
    00000059: 	movslq	%eax, %rcx
    0000005c: 	leaq	(,%rcx,8), %rsi
    00000064: 	cmpq	%rdx, (%r9,%rcx,8)
    00000068: 	je	.Ltmp697 # Offset: 104
    0000006a: 	addl	$0x1, %eax
    0000006d: 	cmpl	%eax, %edi
    0000006f: 	jle	.Ltmp696 # Offset: 111
.Ltmp699:
    00000071: 	cmpq	0x8(%r9,%rsi), %rdx
    00000076: 	je	.Ltmp698 # Offset: 118
.Ltmp696:
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp697:
    00000080: 	addl	$0x1, %eax
    00000083: 	addq	$0x1, %r8
    00000087: 	cmpl	%eax, %edi
    00000089: 	jle	.Ltmp696 # Offset: 137
    0000008b: 	jmp	.Ltmp699 # Offset: 139
.Ltmp698:
    0000008d: 	addq	$0x1, %r8
    00000091: 	jmp	.Ltmp696 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp694:
    00000098: 	xorl	%eax, %eax
    0000009a: 	xorl	%r8d, %r8d
    0000009d: 	jmp	.Ltmp700 # Offset: 157
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2IlEmPT_iS0_"

Binary Function "_Z6count3IlEmPT_iS0_" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x9f40
  Size        : 0xee
  MaxSize     : 0xf0
  Offset      : 0x9f40
  Section     : .text
  Orc Section : .local.text._Z6count3IlEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r8d
    0000000a: 	movq	%rdx, %rcx
    0000000d: 	cmpl	$0x3, %esi
    00000010: 	jle	.Ltmp701 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %r10d
    0000001a: 	movq	%rdi, %rdx
    0000001d: 	shrl	$0x2, %r10d
    00000021: 	movl	%r10d, %eax
    00000024: 	shlq	$0x5, %rax
    00000028: 	leaq	0x20(%rdi,%rax), %rdi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	nop # Size: 1
.Ltmp702:
    00000030: 	xorl	%esi, %esi
    00000032: 	cmpq	(%rdx), %rcx
    00000035: 	sete	%sil
    00000039: 	addq	%rsi, %rax
    0000003c: 	xorl	%esi, %esi
    0000003e: 	cmpq	0x8(%rdx), %rcx
    00000042: 	sete	%sil
    00000046: 	addq	%rsi, %rax
    00000049: 	xorl	%esi, %esi
    0000004b: 	cmpq	0x10(%rdx), %rcx
    0000004f: 	sete	%sil
    00000053: 	addq	%rsi, %rax
    00000056: 	xorl	%esi, %esi
    00000058: 	cmpq	0x18(%rdx), %rcx
    0000005c: 	sete	%sil
    00000060: 	addq	$0x20, %rdx
    00000064: 	addq	%rsi, %rax
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	jne	.Ltmp702 # Offset: 106
    0000006c: 	leal	0x4(,%r10,4), %edx
.Ltmp710:
    00000074: 	cmpl	%edx, %r8d
    00000077: 	jle	.Ltmp703 # Offset: 119
    00000079: 	movslq	%edx, %rsi
    0000007c: 	leaq	(,%rsi,8), %rdi
    00000084: 	cmpq	%rcx, (%r9,%rsi,8)
    00000088: 	je	.Ltmp704 # Offset: 136
.Ltmp708:
    0000008a: 	leal	0x1(%rdx), %esi
    0000008d: 	cmpl	%r8d, %esi
    00000090: 	jge	.Ltmp703 # Offset: 144
    00000092: 	cmpq	%rcx, 0x8(%r9,%rdi)
    00000097: 	je	.Ltmp705 # Offset: 151
    00000099: 	leal	0x2(%rdx), %esi
    0000009c: 	cmpl	%esi, %r8d
    0000009f: 	jle	.Ltmp703 # Offset: 159
.Ltmp709:
    000000a1: 	cmpq	0x10(%r9,%rdi), %rcx
    000000a6: 	jne	.Ltmp706 # Offset: 166
    000000a8: 	addq	$0x1, %rax
.Ltmp706:
    000000ac: 	addl	$0x3, %edx
    000000af: 	cmpl	%r8d, %edx
    000000b2: 	jge	.Ltmp703 # Offset: 178
    000000b4: 	cmpq	0x18(%r9,%rdi), %rcx
    000000b9: 	je	.Ltmp707 # Offset: 185
.Ltmp703:
    000000bb: 	retq # Offset: 187
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp704:
    000000c0: 	addq	$0x1, %rax
    000000c4: 	jmp	.Ltmp708 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp705:
    000000d0: 	leal	0x2(%rdx), %esi
    000000d3: 	addq	$0x1, %rax
    000000d7: 	cmpl	%esi, %r8d
    000000da: 	jg	.Ltmp709 # Offset: 218
    000000dc: 	jmp	.Ltmp703 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp707:
    000000e0: 	addq	$0x1, %rax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp701:
    000000e8: 	xorl	%edx, %edx
    000000ea: 	xorl	%eax, %eax
    000000ec: 	jmp	.Ltmp710 # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3IlEmPT_iS0_"

Binary Function "_Z6count4IlEmPT_iS0_" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0xa030
  Size        : 0xc8
  MaxSize     : 0xd0
  Offset      : 0xa030
  Section     : .text
  Orc Section : .local.text._Z6count4IlEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdi, %r9
    0000000a: 	movq	%rdx, %rsi
    0000000d: 	cmpl	$0x3, %r8d
    00000011: 	jle	.Ltmp711 # Offset: 17
    00000017: 	leal	-0x4(%r8), %r11d
    0000001b: 	movq	%rdi, %rdx
    0000001e: 	xorl	%ecx, %ecx
    00000020: 	shrl	$0x2, %r11d
    00000024: 	movl	%r11d, %eax
    00000027: 	shlq	$0x5, %rax
    0000002b: 	leaq	0x20(%rdi,%rax), %r10
    00000030: 	xorl	%eax, %eax
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp712:
    00000038: 	xorl	%edi, %edi
    0000003a: 	cmpq	(%rdx), %rsi
    0000003d: 	sete	%dil
    00000041: 	addq	%rdi, %rcx
    00000044: 	xorl	%edi, %edi
    00000046: 	cmpq	0x8(%rdx), %rsi
    0000004a: 	sete	%dil
    0000004e: 	addq	%rdi, %rax
    00000051: 	xorl	%edi, %edi
    00000053: 	cmpq	0x10(%rdx), %rsi
    00000057: 	sete	%dil
    0000005b: 	addq	%rdi, %rcx
    0000005e: 	xorl	%edi, %edi
    00000060: 	cmpq	0x18(%rdx), %rsi
    00000064: 	sete	%dil
    00000068: 	addq	$0x20, %rdx
    0000006c: 	addq	%rdi, %rax
    0000006f: 	cmpq	%rdx, %r10
    00000072: 	jne	.Ltmp712 # Offset: 114
    00000074: 	leal	0x4(,%r11,4), %edi
.Ltmp715:
    0000007c: 	cmpl	%edi, %r8d
    0000007f: 	jle	.Ltmp713 # Offset: 127
    00000081: 	subl	$0x1, %r8d
    00000085: 	movslq	%edi, %r10
    00000088: 	subl	%edi, %r8d
    0000008b: 	leaq	(%r9,%r10,8), %rdx
    0000008f: 	addq	%r10, %r8
    00000092: 	leaq	0x8(%r9,%r8,8), %r8
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp714:
    000000a0: 	xorl	%edi, %edi
    000000a2: 	cmpq	%rsi, (%rdx)
    000000a5: 	sete	%dil
    000000a9: 	addq	$0x8, %rdx
    000000ad: 	addq	%rdi, %rcx
    000000b0: 	cmpq	%rdx, %r8
    000000b3: 	jne	.Ltmp714 # Offset: 179
.Ltmp713:
    000000b5: 	addq	%rcx, %rax
    000000b8: 	retq # Offset: 184
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp711:
    000000c0: 	xorl	%edi, %edi
    000000c2: 	xorl	%eax, %eax
    000000c4: 	xorl	%ecx, %ecx
    000000c6: 	jmp	.Ltmp715 # Offset: 198
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4IlEmPT_iS0_"

Binary Function "_Z6count5IlEmPT_iS0_" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0xa100
  Size        : 0xd1
  MaxSize     : 0xe0
  Offset      : 0xa100
  Section     : .text
  Orc Section : .local.text._Z6count5IlEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r11d
    0000000b: 	movq	%rdx, %rcx
    0000000e: 	pushq	%rbx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp716 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ebp
    0000001b: 	movq	%rdi, %rdx
    0000001e: 	xorl	%r8d, %r8d
    00000021: 	xorl	%esi, %esi
    00000023: 	shrl	$0x2, %ebp
    00000026: 	movl	%ebp, %eax
    00000028: 	shlq	$0x5, %rax
    0000002c: 	leaq	0x20(%rdi,%rax), %rbx
    00000031: 	xorl	%edi, %edi
    00000033: 	xorl	%eax, %eax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp717:
    00000038: 	xorl	%r9d, %r9d
    0000003b: 	cmpq	(%rdx), %rcx
    0000003e: 	sete	%r9b
    00000042: 	addq	%r9, %rax
    00000045: 	xorl	%r9d, %r9d
    00000048: 	cmpq	0x8(%rdx), %rcx
    0000004c: 	sete	%r9b
    00000050: 	addq	%r9, %rsi
    00000053: 	xorl	%r9d, %r9d
    00000056: 	cmpq	0x10(%rdx), %rcx
    0000005a: 	sete	%r9b
    0000005e: 	addq	%r9, %r8
    00000061: 	xorl	%r9d, %r9d
    00000064: 	cmpq	0x18(%rdx), %rcx
    00000068: 	sete	%r9b
    0000006c: 	addq	$0x20, %rdx
    00000070: 	addq	%r9, %rdi
    00000073: 	cmpq	%rbx, %rdx
    00000076: 	jne	.Ltmp717 # Offset: 118
    00000078: 	addq	%r8, %rsi
    0000007b: 	leal	0x4(,%rbp,4), %r9d
    00000083: 	addq	%rdi, %rsi
.Ltmp720:
    00000086: 	cmpl	%r9d, %r11d
    00000089: 	jle	.Ltmp718 # Offset: 137
    0000008b: 	subl	$0x1, %r11d
    0000008f: 	movslq	%r9d, %rdi
    00000092: 	subl	%r9d, %r11d
    00000095: 	leaq	(%r10,%rdi,8), %rdx
    00000099: 	addq	%rdi, %r11
    0000009c: 	leaq	0x8(%r10,%r11,8), %r8
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp719:
    000000a8: 	xorl	%edi, %edi
    000000aa: 	cmpq	%rcx, (%rdx)
    000000ad: 	sete	%dil
    000000b1: 	addq	$0x8, %rdx
    000000b5: 	addq	%rdi, %rax
    000000b8: 	cmpq	%rdx, %r8
    000000bb: 	jne	.Ltmp719 # Offset: 187
.Ltmp718:
    000000bd: 	addq	%rsi, %rax
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp716:
    000000c8: 	xorl	%esi, %esi
    000000ca: 	xorl	%r9d, %r9d
    000000cd: 	xorl	%eax, %eax
    000000cf: 	jmp	.Ltmp720 # Offset: 207
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5IlEmPT_iS0_"

Binary Function "_Z6count6IlEmPT_iS0_" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0xa1e0
  Size        : 0xd1
  MaxSize     : 0xe0
  Offset      : 0xa1e0
  Section     : .text
  Orc Section : .local.text._Z6count6IlEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r11d
    0000000b: 	movq	%rdx, %rcx
    0000000e: 	pushq	%rbx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp721 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ebp
    0000001b: 	movq	%rdi, %rdx
    0000001e: 	xorl	%r8d, %r8d
    00000021: 	xorl	%esi, %esi
    00000023: 	shrl	$0x2, %ebp
    00000026: 	movl	%ebp, %eax
    00000028: 	shlq	$0x5, %rax
    0000002c: 	leaq	0x20(%rdi,%rax), %rbx
    00000031: 	xorl	%edi, %edi
    00000033: 	xorl	%eax, %eax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp722:
    00000038: 	xorl	%r9d, %r9d
    0000003b: 	cmpq	%rcx, (%rdx)
    0000003e: 	sete	%r9b
    00000042: 	addq	%r9, %rax
    00000045: 	xorl	%r9d, %r9d
    00000048: 	cmpq	%rcx, 0x8(%rdx)
    0000004c: 	sete	%r9b
    00000050: 	addq	%r9, %rsi
    00000053: 	xorl	%r9d, %r9d
    00000056: 	cmpq	%rcx, 0x10(%rdx)
    0000005a: 	sete	%r9b
    0000005e: 	addq	%r9, %r8
    00000061: 	xorl	%r9d, %r9d
    00000064: 	cmpq	%rcx, 0x18(%rdx)
    00000068: 	sete	%r9b
    0000006c: 	addq	$0x20, %rdx
    00000070: 	addq	%r9, %rdi
    00000073: 	cmpq	%rdx, %rbx
    00000076: 	jne	.Ltmp722 # Offset: 118
    00000078: 	addq	%r8, %rsi
    0000007b: 	leal	0x4(,%rbp,4), %r9d
    00000083: 	addq	%rdi, %rsi
.Ltmp725:
    00000086: 	cmpl	%r9d, %r11d
    00000089: 	jle	.Ltmp723 # Offset: 137
    0000008b: 	subl	$0x1, %r11d
    0000008f: 	movslq	%r9d, %rdi
    00000092: 	subl	%r9d, %r11d
    00000095: 	leaq	(%r10,%rdi,8), %rdx
    00000099: 	addq	%rdi, %r11
    0000009c: 	leaq	0x8(%r10,%r11,8), %r8
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp724:
    000000a8: 	xorl	%edi, %edi
    000000aa: 	cmpq	(%rdx), %rcx
    000000ad: 	sete	%dil
    000000b1: 	addq	$0x8, %rdx
    000000b5: 	addq	%rdi, %rax
    000000b8: 	cmpq	%r8, %rdx
    000000bb: 	jne	.Ltmp724 # Offset: 187
.Ltmp723:
    000000bd: 	addq	%rsi, %rax
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp721:
    000000c8: 	xorl	%esi, %esi
    000000ca: 	xorl	%r9d, %r9d
    000000cd: 	xorl	%eax, %eax
    000000cf: 	jmp	.Ltmp725 # Offset: 207
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6IlEmPT_iS0_"

Binary Function "_Z6count7IlEmPT_iS0_" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0xa2c0
  Size        : 0x109
  MaxSize     : 0x110
  Offset      : 0xa2c0
  Section     : .text
  Orc Section : .local.text._Z6count7IlEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r11d
    0000000b: 	movq	%rdx, %rcx
    0000000e: 	pushq	%rbx
    0000000f: 	cmpl	$0x7, %esi
    00000012: 	jle	.Ltmp726 # Offset: 18
    00000018: 	leal	-0x8(%rsi), %ebp
    0000001b: 	movq	%rdi, %rdx
    0000001e: 	xorl	%r8d, %r8d
    00000021: 	xorl	%esi, %esi
    00000023: 	shrl	$0x3, %ebp
    00000026: 	movl	%ebp, %eax
    00000028: 	shlq	$0x6, %rax
    0000002c: 	leaq	0x40(%rdi,%rax), %rbx
    00000031: 	xorl	%edi, %edi
    00000033: 	xorl	%eax, %eax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp727:
    00000038: 	xorl	%r9d, %r9d
    0000003b: 	cmpq	(%rdx), %rcx
    0000003e: 	sete	%r9b
    00000042: 	addq	%r9, %rax
    00000045: 	xorl	%r9d, %r9d
    00000048: 	cmpq	%rcx, 0x8(%rdx)
    0000004c: 	sete	%r9b
    00000050: 	addq	%r9, %rsi
    00000053: 	xorl	%r9d, %r9d
    00000056: 	cmpq	%rcx, 0x10(%rdx)
    0000005a: 	sete	%r9b
    0000005e: 	addq	%r9, %r8
    00000061: 	xorl	%r9d, %r9d
    00000064: 	cmpq	0x18(%rdx), %rcx
    00000068: 	sete	%r9b
    0000006c: 	addq	%r9, %rdi
    0000006f: 	xorl	%r9d, %r9d
    00000072: 	cmpq	0x20(%rdx), %rcx
    00000076: 	sete	%r9b
    0000007a: 	addq	%r9, %rax
    0000007d: 	xorl	%r9d, %r9d
    00000080: 	cmpq	0x28(%rdx), %rcx
    00000084: 	sete	%r9b
    00000088: 	addq	%r9, %rsi
    0000008b: 	xorl	%r9d, %r9d
    0000008e: 	cmpq	0x30(%rdx), %rcx
    00000092: 	sete	%r9b
    00000096: 	addq	%r9, %r8
    00000099: 	xorl	%r9d, %r9d
    0000009c: 	cmpq	0x38(%rdx), %rcx
    000000a0: 	sete	%r9b
    000000a4: 	addq	$0x40, %rdx
    000000a8: 	addq	%r9, %rdi
    000000ab: 	cmpq	%rbx, %rdx
    000000ae: 	jne	.Ltmp727 # Offset: 174
    000000b0: 	addq	%r8, %rsi
    000000b3: 	leal	0x8(,%rbp,8), %r9d
    000000bb: 	addq	%rdi, %rsi
.Ltmp730:
    000000be: 	cmpl	%r9d, %r11d
    000000c1: 	jle	.Ltmp728 # Offset: 193
    000000c3: 	subl	$0x1, %r11d
    000000c7: 	movslq	%r9d, %rdi
    000000ca: 	subl	%r9d, %r11d
    000000cd: 	leaq	(%r10,%rdi,8), %rdx
    000000d1: 	addq	%rdi, %r11
    000000d4: 	leaq	0x8(%r10,%r11,8), %r8
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp729:
    000000e0: 	xorl	%edi, %edi
    000000e2: 	cmpq	(%rdx), %rcx
    000000e5: 	sete	%dil
    000000e9: 	addq	$0x8, %rdx
    000000ed: 	addq	%rdi, %rax
    000000f0: 	cmpq	%rdx, %r8
    000000f3: 	jne	.Ltmp729 # Offset: 243
.Ltmp728:
    000000f5: 	addq	%rsi, %rax
    000000f8: 	popq	%rbx
    000000f9: 	popq	%rbp
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp726:
    00000100: 	xorl	%esi, %esi
    00000102: 	xorl	%r9d, %r9d
    00000105: 	xorl	%eax, %eax
    00000107: 	jmp	.Ltmp730 # Offset: 263
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7IlEmPT_iS0_"

Binary Function "_Z6count8IlEmPT_iS0_" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0xa3d0
  Size        : 0x108
  MaxSize     : 0x110
  Offset      : 0xa3d0
  Section     : .text
  Orc Section : .local.text._Z6count8IlEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r10
    00000009: 	movl	%esi, %r11d
    0000000c: 	movq	%rdx, %rcx
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	cmpl	$0x7, %esi
    00000014: 	jle	.Ltmp731 # Offset: 20
    0000001a: 	leal	-0x8(%rsi), %ebp
    0000001d: 	movq	%rdi, %rdx
    00000020: 	xorl	%r8d, %r8d
    00000023: 	xorl	%r9d, %r9d
    00000026: 	shrl	$0x3, %ebp
    00000029: 	movl	%ebp, %eax
    0000002b: 	shlq	$0x6, %rax
    0000002f: 	leaq	0x40(%rdi,%rax), %rbx
    00000034: 	xorl	%edi, %edi
    00000036: 	xorl	%eax, %eax
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp732:
    00000040: 	xorl	%esi, %esi
    00000042: 	cmpq	%rcx, (%rdx)
    00000045: 	sete	%sil
    00000049: 	xorl	%r12d, %r12d
    0000004c: 	cmpq	%rcx, 0x20(%rdx)
    00000050: 	sete	%r12b
    00000054: 	addq	%r12, %rsi
    00000057: 	addq	%rsi, %rax
    0000005a: 	xorl	%esi, %esi
    0000005c: 	cmpq	%rcx, 0x8(%rdx)
    00000060: 	sete	%sil
    00000064: 	xorl	%r12d, %r12d
    00000067: 	cmpq	%rcx, 0x28(%rdx)
    0000006b: 	sete	%r12b
    0000006f: 	addq	%r12, %rsi
    00000072: 	addq	%rsi, %rdi
    00000075: 	xorl	%esi, %esi
    00000077: 	cmpq	%rcx, 0x10(%rdx)
    0000007b: 	sete	%sil
    0000007f: 	xorl	%r12d, %r12d
    00000082: 	cmpq	%rcx, 0x30(%rdx)
    00000086: 	sete	%r12b
    0000008a: 	addq	%r12, %rsi
    0000008d: 	addq	%rsi, %r9
    00000090: 	xorl	%esi, %esi
    00000092: 	cmpq	%rcx, 0x18(%rdx)
    00000096: 	sete	%sil
    0000009a: 	xorl	%r12d, %r12d
    0000009d: 	cmpq	%rcx, 0x38(%rdx)
    000000a1: 	sete	%r12b
    000000a5: 	addq	$0x40, %rdx
    000000a9: 	addq	%r12, %rsi
    000000ac: 	addq	%rsi, %r8
    000000af: 	cmpq	%rbx, %rdx
    000000b2: 	jne	.Ltmp732 # Offset: 178
    000000b4: 	addq	%r9, %rdi
    000000b7: 	leal	0x8(,%rbp,8), %esi
    000000be: 	addq	%r8, %rdi
.Ltmp735:
    000000c1: 	cmpl	%esi, %r11d
    000000c4: 	jle	.Ltmp733 # Offset: 196
    000000c6: 	subl	$0x1, %r11d
    000000ca: 	movslq	%esi, %r8
    000000cd: 	subl	%esi, %r11d
    000000d0: 	leaq	(%r10,%r8,8), %rdx
    000000d4: 	addq	%r8, %r11
    000000d7: 	leaq	0x8(%r10,%r11,8), %r8
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp734:
    000000e0: 	xorl	%esi, %esi
    000000e2: 	cmpq	(%rdx), %rcx
    000000e5: 	sete	%sil
    000000e9: 	addq	$0x8, %rdx
    000000ed: 	addq	%rsi, %rax
    000000f0: 	cmpq	%r8, %rdx
    000000f3: 	jne	.Ltmp734 # Offset: 243
.Ltmp733:
    000000f5: 	popq	%rbx
    000000f6: 	addq	%rdi, %rax
    000000f9: 	popq	%rbp
    000000fa: 	popq	%r12
    000000fc: 	retq # Offset: 252
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp731:
    00000100: 	xorl	%edi, %edi
    00000102: 	xorl	%esi, %esi
    00000104: 	xorl	%eax, %eax
    00000106: 	jmp	.Ltmp735 # Offset: 262
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8IlEmPT_iS0_"

Binary Function "_Z6count1IfEmPT_iS0_" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0xa4e0
  Size        : 0xdf
  MaxSize     : 0xe0
  Offset      : 0xa4e0
  Section     : .text
  Orc Section : .local.text._Z6count1IfEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp736 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x2, %eax
    00000014: 	jbe	.Ltmp737 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movdqa	DATAat0x19270(%rip), %xmm5
    00000024: 	movaps	%xmm0, %xmm6
    00000027: 	movq	%rdi, %rax
    0000002a: 	shrl	$0x2, %ecx
    0000002d: 	pxor	%xmm2, %xmm2
    00000031: 	pxor	%xmm3, %xmm3
    00000035: 	shufps	$0x0, %xmm6, %xmm6
    00000039: 	subl	$0x1, %ecx
    0000003c: 	shlq	$0x4, %rcx
    00000040: 	leaq	0x10(%rdi,%rcx), %rcx
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp738:
    00000048: 	movups	(%rax), %xmm1
    0000004b: 	addq	$0x10, %rax
    0000004f: 	cmpeqps	%xmm6, %xmm1
    00000053: 	pand	%xmm5, %xmm1
    00000057: 	movdqa	%xmm1, %xmm4
    0000005b: 	punpckhdq	%xmm3, %xmm1
    0000005f: 	punpckldq	%xmm3, %xmm4
    00000063: 	paddq	%xmm4, %xmm1
    00000067: 	paddq	%xmm1, %xmm2
    0000006b: 	cmpq	%rax, %rcx
    0000006e: 	jne	.Ltmp738 # Offset: 110
    00000070: 	movdqa	%xmm2, %xmm1
    00000074: 	movl	%edx, %ecx
    00000076: 	psrldq	$0x8, %xmm1
    0000007b: 	andl	$-0x4, %ecx
    0000007e: 	paddq	%xmm1, %xmm2
    00000082: 	movq	%xmm2, %rax
    00000087: 	testb	$0x3, %dl
    0000008a: 	je	.Ltmp739 # Offset: 138
.Ltmp743:
    0000008c: 	movslq	%ecx, %rsi
    0000008f: 	ucomiss	(%rdi,%rsi,4), %xmm0
    00000093: 	leaq	(,%rsi,4), %r8
    0000009b: 	jp	.Ltmp740 # Offset: 155
    0000009d: 	jne	.Ltmp740 # Offset: 157
    0000009f: 	addq	$0x1, %rax
.Ltmp740:
    000000a3: 	leal	0x1(%rcx), %esi
    000000a6: 	cmpl	%edx, %esi
    000000a8: 	jge	.Ltmp741 # Offset: 168
    000000aa: 	ucomiss	0x4(%rdi,%r8), %xmm0
    000000b0: 	jp	.Ltmp742 # Offset: 176
    000000b2: 	jne	.Ltmp742 # Offset: 178
    000000b4: 	addq	$0x1, %rax
.Ltmp742:
    000000b8: 	addl	$0x2, %ecx
    000000bb: 	cmpl	%ecx, %edx
    000000bd: 	jle	.Ltmp741 # Offset: 189
    000000bf: 	ucomiss	0x8(%rdi,%r8), %xmm0
    000000c5: 	jp	.Ltmp741 # Offset: 197
    000000c7: 	jne	.Ltmp741 # Offset: 199
    000000c9: 	addq	$0x1, %rax
    000000cd: 	retq # Offset: 205
    000000ce: 	nop # Size: 2
.Ltmp736:
    000000d0: 	xorl	%eax, %eax
.Ltmp741:
    000000d2: 	retq # Offset: 210
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp739:
    000000d8: 	retq # Offset: 216
.Ltmp737:
    000000d9: 	xorl	%ecx, %ecx
    000000db: 	xorl	%eax, %eax
    000000dd: 	jmp	.Ltmp743 # Offset: 221
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1IfEmPT_iS0_"

Binary Function "_Z6count2IfEmPT_iS0_" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0xa5c0
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0xa5c0
  Section     : .text
  Orc Section : .local.text._Z6count2IfEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpl	$0x1, %esi
    0000000a: 	jle	.Ltmp744 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	leal	-0x2(%rsi), %edi
    00000012: 	xorl	%r8d, %r8d
    00000015: 	shrl	%edi
    00000017: 	movl	%edi, %edx
    00000019: 	leaq	0x8(%rcx,%rdx,8), %rdx
    0000001e: 	nop # Size: 2
.Ltmp747:
    00000020: 	ucomiss	(%rax), %xmm0
    00000023: 	jp	.Ltmp745 # Offset: 35
    00000025: 	jne	.Ltmp745 # Offset: 37
    00000027: 	addq	$0x1, %r8
.Ltmp745:
    0000002b: 	ucomiss	0x4(%rax), %xmm0
    0000002f: 	jp	.Ltmp746 # Offset: 47
    00000031: 	jne	.Ltmp746 # Offset: 49
    00000033: 	addq	$0x1, %r8
.Ltmp746:
    00000037: 	addq	$0x8, %rax
    0000003b: 	cmpq	%rax, %rdx
    0000003e: 	jne	.Ltmp747 # Offset: 62
    00000040: 	leal	0x2(%rdi,%rdi), %eax
.Ltmp750:
    00000044: 	cmpl	%eax, %esi
    00000046: 	jle	.Ltmp748 # Offset: 70
    00000048: 	movslq	%eax, %rdx
    0000004b: 	ucomiss	(%rcx,%rdx,4), %xmm0
    0000004f: 	leaq	(,%rdx,4), %rdi
    00000057: 	jp	.Ltmp749 # Offset: 87
    00000059: 	jne	.Ltmp749 # Offset: 89
    0000005b: 	addq	$0x1, %r8
.Ltmp749:
    0000005f: 	addl	$0x1, %eax
    00000062: 	cmpl	%eax, %esi
    00000064: 	jle	.Ltmp748 # Offset: 100
    00000066: 	ucomiss	0x4(%rcx,%rdi), %xmm0
    0000006b: 	jp	.Ltmp748 # Offset: 107
    0000006d: 	jne	.Ltmp748 # Offset: 109
    0000006f: 	addq	$0x1, %r8
.Ltmp748:
    00000073: 	movq	%r8, %rax
    00000076: 	retq # Offset: 118
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp744:
    00000080: 	xorl	%eax, %eax
    00000082: 	xorl	%r8d, %r8d
    00000085: 	jmp	.Ltmp750 # Offset: 133
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2IfEmPT_iS0_"

Binary Function "_Z6count3IfEmPT_iS0_" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0xa650
  Size        : 0xd7
  MaxSize     : 0xe0
  Offset      : 0xa650
  Section     : .text
  Orc Section : .local.text._Z6count3IfEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp751 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %esi
    00000012: 	movq	%rdi, %rax
    00000015: 	xorl	%r8d, %r8d
    00000018: 	shrl	$0x2, %esi
    0000001b: 	movl	%esi, %edx
    0000001d: 	shlq	$0x4, %rdx
    00000021: 	leaq	0x10(%rdi,%rdx), %rdx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp756:
    00000030: 	ucomiss	(%rax), %xmm0
    00000033: 	jp	.Ltmp752 # Offset: 51
    00000035: 	jne	.Ltmp752 # Offset: 53
    00000037: 	addq	$0x1, %r8
.Ltmp752:
    0000003b: 	ucomiss	0x4(%rax), %xmm0
    0000003f: 	jp	.Ltmp753 # Offset: 63
    00000041: 	jne	.Ltmp753 # Offset: 65
    00000043: 	addq	$0x1, %r8
.Ltmp753:
    00000047: 	ucomiss	0x8(%rax), %xmm0
    0000004b: 	jp	.Ltmp754 # Offset: 75
    0000004d: 	jne	.Ltmp754 # Offset: 77
    0000004f: 	addq	$0x1, %r8
.Ltmp754:
    00000053: 	ucomiss	0xc(%rax), %xmm0
    00000057: 	jp	.Ltmp755 # Offset: 87
    00000059: 	jne	.Ltmp755 # Offset: 89
    0000005b: 	addq	$0x1, %r8
.Ltmp755:
    0000005f: 	addq	$0x10, %rax
    00000063: 	cmpq	%rax, %rdx
    00000066: 	jne	.Ltmp756 # Offset: 102
    00000068: 	leal	0x4(,%rsi,4), %eax
.Ltmp761:
    0000006f: 	cmpl	%eax, %ecx
    00000071: 	jle	.Ltmp757 # Offset: 113
    00000073: 	movslq	%eax, %rdx
    00000076: 	ucomiss	(%rdi,%rdx,4), %xmm0
    0000007a: 	leaq	(,%rdx,4), %rsi
    00000082: 	jp	.Ltmp758 # Offset: 130
    00000084: 	jne	.Ltmp758 # Offset: 132
    00000086: 	addq	$0x1, %r8
.Ltmp758:
    0000008a: 	leal	0x1(%rax), %edx
    0000008d: 	cmpl	%ecx, %edx
    0000008f: 	jge	.Ltmp757 # Offset: 143
    00000091: 	ucomiss	0x4(%rdi,%rsi), %xmm0
    00000096: 	jp	.Ltmp759 # Offset: 150
    00000098: 	jne	.Ltmp759 # Offset: 152
    0000009a: 	addq	$0x1, %r8
.Ltmp759:
    0000009e: 	leal	0x2(%rax), %edx
    000000a1: 	cmpl	%edx, %ecx
    000000a3: 	jle	.Ltmp757 # Offset: 163
    000000a5: 	ucomiss	0x8(%rdi,%rsi), %xmm0
    000000aa: 	jp	.Ltmp760 # Offset: 170
    000000ac: 	jne	.Ltmp760 # Offset: 172
    000000ae: 	addq	$0x1, %r8
.Ltmp760:
    000000b2: 	addl	$0x3, %eax
    000000b5: 	cmpl	%ecx, %eax
    000000b7: 	jge	.Ltmp757 # Offset: 183
    000000b9: 	ucomiss	0xc(%rdi,%rsi), %xmm0
    000000be: 	jp	.Ltmp757 # Offset: 190
    000000c0: 	jne	.Ltmp757 # Offset: 192
    000000c2: 	addq	$0x1, %r8
.Ltmp757:
    000000c6: 	movq	%r8, %rax
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp751:
    000000d0: 	xorl	%eax, %eax
    000000d2: 	xorl	%r8d, %r8d
    000000d5: 	jmp	.Ltmp761 # Offset: 213
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3IfEmPT_iS0_"

Binary Function "_Z6count4IfEmPT_iS0_" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0xa730
  Size        : 0x16c
  MaxSize     : 0x170
  Offset      : 0xa730
  Section     : .text
  Orc Section : .local.text._Z6count4IfEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r10d
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp762 # Offset: 13
    00000013: 	movq	%rdi, %rdx
    00000016: 	leal	-0x4(%rsi), %edi
    00000019: 	xorl	%ecx, %ecx
    0000001b: 	shrl	$0x2, %edi
    0000001e: 	movl	%edi, %eax
    00000020: 	shlq	$0x4, %rax
    00000024: 	leaq	0x10(%r9,%rax), %rsi
    00000029: 	xorl	%eax, %eax
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp767:
    00000030: 	ucomiss	(%rdx), %xmm0
    00000033: 	jp	.Ltmp763 # Offset: 51
    00000035: 	jne	.Ltmp763 # Offset: 53
    00000037: 	addq	$0x1, %rax
.Ltmp763:
    0000003b: 	ucomiss	0x4(%rdx), %xmm0
    0000003f: 	jp	.Ltmp764 # Offset: 63
    00000041: 	jne	.Ltmp764 # Offset: 65
    00000043: 	addq	$0x1, %rcx
.Ltmp764:
    00000047: 	ucomiss	0x8(%rdx), %xmm0
    0000004b: 	jp	.Ltmp765 # Offset: 75
    0000004d: 	jne	.Ltmp765 # Offset: 77
    0000004f: 	addq	$0x1, %rax
.Ltmp765:
    00000053: 	ucomiss	0xc(%rdx), %xmm0
    00000057: 	jp	.Ltmp766 # Offset: 87
    00000059: 	jne	.Ltmp766 # Offset: 89
    0000005b: 	addq	$0x1, %rcx
.Ltmp766:
    0000005f: 	addq	$0x10, %rdx
    00000063: 	cmpq	%rdx, %rsi
    00000066: 	jne	.Ltmp767 # Offset: 102
    00000068: 	leal	0x4(,%rdi,4), %r8d
.Ltmp774:
    00000070: 	cmpl	%r8d, %r10d
    00000073: 	jle	.Ltmp768 # Offset: 115
    00000079: 	movl	%r10d, %r11d
    0000007c: 	subl	%r8d, %r11d
    0000007f: 	leal	-0x1(%r11), %edx
    00000083: 	cmpl	$0x2, %edx
    00000086: 	jbe	.Ltmp769 # Offset: 134
    0000008c: 	movaps	%xmm0, %xmm6
    0000008f: 	pxor	%xmm2, %xmm2
    00000093: 	pxor	%xmm3, %xmm3
    00000097: 	movslq	%r8d, %rdx
    0000009a: 	leaq	(%r9,%rdx,4), %rsi
    0000009e: 	movl	%r11d, %edx
    000000a1: 	movdqa	DATAat0x19270(%rip), %xmm5
    000000a9: 	shufps	$0x0, %xmm6, %xmm6
    000000ad: 	shrl	$0x2, %edx
    000000b0: 	leal	-0x1(%rdx), %edi
    000000b3: 	leaq	0x10(%rsi), %rdx
    000000b7: 	shlq	$0x4, %rdi
    000000bb: 	addq	%rdx, %rdi
    000000be: 	jmp	.Ltmp770 # Offset: 190
.Ltmp771:
    000000c0: 	addq	$0x10, %rdx
.Ltmp770:
    000000c4: 	movups	(%rsi), %xmm1
    000000c7: 	movq	%rdx, %rsi
    000000ca: 	cmpeqps	%xmm6, %xmm1
    000000ce: 	pand	%xmm5, %xmm1
    000000d2: 	movdqa	%xmm1, %xmm4
    000000d6: 	punpckhdq	%xmm3, %xmm1
    000000da: 	punpckldq	%xmm3, %xmm4
    000000de: 	paddq	%xmm4, %xmm1
    000000e2: 	paddq	%xmm1, %xmm2
    000000e6: 	cmpq	%rdx, %rdi
    000000e9: 	jne	.Ltmp771 # Offset: 233
    000000eb: 	movdqa	%xmm2, %xmm1
    000000ef: 	psrldq	$0x8, %xmm1
    000000f4: 	paddq	%xmm1, %xmm2
    000000f8: 	movq	%xmm2, %rdx
    000000fd: 	addq	%rdx, %rax
    00000100: 	movl	%r11d, %edx
    00000103: 	andl	$-0x4, %edx
    00000106: 	addl	%edx, %r8d
    00000109: 	cmpl	%edx, %r11d
    0000010c: 	je	.Ltmp768 # Offset: 268
.Ltmp769:
    0000010e: 	movslq	%r8d, %rdx
    00000111: 	ucomiss	(%r9,%rdx,4), %xmm0
    00000116: 	leaq	(,%rdx,4), %rsi
    0000011e: 	jp	.Ltmp772 # Offset: 286
    00000120: 	jne	.Ltmp772 # Offset: 288
    00000122: 	addq	$0x1, %rax
.Ltmp772:
    00000126: 	leal	0x1(%r8), %edx
    0000012a: 	cmpl	%r10d, %edx
    0000012d: 	jge	.Ltmp768 # Offset: 301
    0000012f: 	ucomiss	0x4(%r9,%rsi), %xmm0
    00000135: 	jp	.Ltmp773 # Offset: 309
    00000137: 	jne	.Ltmp773 # Offset: 311
    00000139: 	addq	$0x1, %rax
.Ltmp773:
    0000013d: 	addl	$0x2, %r8d
    00000141: 	cmpl	%r10d, %r8d
    00000144: 	jge	.Ltmp768 # Offset: 324
    00000146: 	ucomiss	0x8(%r9,%rsi), %xmm0
    0000014c: 	jp	.Ltmp768 # Offset: 332
    0000014e: 	jne	.Ltmp768 # Offset: 334
    00000150: 	addq	$0x1, %rax
.Ltmp768:
    00000154: 	addq	%rcx, %rax
    00000157: 	retq # Offset: 343
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp762:
    00000160: 	xorl	%r8d, %r8d
    00000163: 	xorl	%ecx, %ecx
    00000165: 	xorl	%eax, %eax
    00000167: 	jmp	.Ltmp774 # Offset: 359
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4IfEmPT_iS0_"

Binary Function "_Z6count5IfEmPT_iS0_" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0xa8a0
  Size        : 0x193
  MaxSize     : 0x1a0
  Offset      : 0xa8a0
  Section     : .text
  Orc Section : .local.text._Z6count5IfEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movaps	%xmm0, %xmm6
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp775 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	pxor	%xmm2, %xmm2
    0000001a: 	movaps	%xmm0, %xmm7
    0000001d: 	xorl	%eax, %eax
    0000001f: 	shrl	$0x2, %ecx
    00000022: 	movdqa	%xmm2, %xmm1
    00000026: 	pxor	%xmm3, %xmm3
    0000002a: 	shufps	$0x0, %xmm7, %xmm7
    0000002e: 	movdqa	DATAat0x19270(%rip), %xmm5
    00000036: 	addl	$0x1, %ecx
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp776:
    00000040: 	movq	%rax, %rdx
    00000043: 	addq	$0x1, %rax
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	movups	(%rdi,%rdx), %xmm0
    0000004f: 	cmpeqps	%xmm7, %xmm0
    00000053: 	pand	%xmm5, %xmm0
    00000057: 	movdqa	%xmm0, %xmm4
    0000005b: 	punpckhdq	%xmm3, %xmm0
    0000005f: 	punpckldq	%xmm3, %xmm4
    00000063: 	paddq	%xmm0, %xmm2
    00000067: 	paddq	%xmm4, %xmm1
    0000006b: 	cmpl	%eax, %ecx
    0000006d: 	ja	.Ltmp776 # Offset: 109
    0000006f: 	movhlps	%xmm1, %xmm7
    00000072: 	leal	(,%rcx,4), %esi
    00000079: 	movhlps	%xmm2, %xmm5
    0000007c: 	movq	%xmm2, %rcx
    00000081: 	movq	%xmm7, %rdx
    00000086: 	movq	%xmm1, %rax
    0000008b: 	addq	%rcx, %rdx
    0000008e: 	movq	%xmm5, %rcx
    00000093: 	addq	%rcx, %rdx
.Ltmp783:
    00000096: 	cmpl	%esi, %r8d
    00000099: 	jle	.Ltmp777 # Offset: 153
    0000009f: 	movl	%r8d, %r11d
    000000a2: 	subl	%esi, %r11d
    000000a5: 	leal	-0x1(%r11), %ecx
    000000a9: 	cmpl	$0x2, %ecx
    000000ac: 	jbe	.Ltmp778 # Offset: 172
    000000b2: 	movaps	%xmm6, %xmm4
    000000b5: 	pxor	%xmm1, %xmm1
    000000b9: 	pxor	%xmm2, %xmm2
    000000bd: 	movslq	%esi, %rcx
    000000c0: 	leaq	(%rdi,%rcx,4), %r9
    000000c4: 	movl	%r11d, %ecx
    000000c7: 	movdqa	DATAat0x19270(%rip), %xmm5
    000000cf: 	shufps	$0x0, %xmm4, %xmm4
    000000d3: 	shrl	$0x2, %ecx
    000000d6: 	leal	-0x1(%rcx), %r10d
    000000da: 	leaq	0x10(%r9), %rcx
    000000de: 	shlq	$0x4, %r10
    000000e2: 	addq	%rcx, %r10
    000000e5: 	jmp	.Ltmp779 # Offset: 229
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp780:
    000000f0: 	addq	$0x10, %rcx
.Ltmp779:
    000000f4: 	movups	(%r9), %xmm0
    000000f8: 	movq	%rcx, %r9
    000000fb: 	cmpeqps	%xmm4, %xmm0
    000000ff: 	pand	%xmm5, %xmm0
    00000103: 	movdqa	%xmm0, %xmm3
    00000107: 	punpckhdq	%xmm2, %xmm0
    0000010b: 	punpckldq	%xmm2, %xmm3
    0000010f: 	paddq	%xmm3, %xmm0
    00000113: 	paddq	%xmm0, %xmm1
    00000117: 	cmpq	%rcx, %r10
    0000011a: 	jne	.Ltmp780 # Offset: 282
    0000011c: 	movdqa	%xmm1, %xmm0
    00000120: 	psrldq	$0x8, %xmm0
    00000125: 	paddq	%xmm0, %xmm1
    00000129: 	movq	%xmm1, %rcx
    0000012e: 	addq	%rcx, %rax
    00000131: 	movl	%r11d, %ecx
    00000134: 	andl	$-0x4, %ecx
    00000137: 	addl	%ecx, %esi
    00000139: 	cmpl	%ecx, %r11d
    0000013c: 	je	.Ltmp777 # Offset: 316
.Ltmp778:
    0000013e: 	movslq	%esi, %rcx
    00000141: 	ucomiss	(%rdi,%rcx,4), %xmm6
    00000145: 	leaq	(,%rcx,4), %r9
    0000014d: 	jp	.Ltmp781 # Offset: 333
    0000014f: 	jne	.Ltmp781 # Offset: 335
    00000151: 	addq	$0x1, %rax
.Ltmp781:
    00000155: 	leal	0x1(%rsi), %ecx
    00000158: 	cmpl	%ecx, %r8d
    0000015b: 	jle	.Ltmp777 # Offset: 347
    0000015d: 	ucomiss	0x4(%rdi,%r9), %xmm6
    00000163: 	jp	.Ltmp782 # Offset: 355
    00000165: 	jne	.Ltmp782 # Offset: 357
    00000167: 	addq	$0x1, %rax
.Ltmp782:
    0000016b: 	leal	0x2(%rsi), %ecx
    0000016e: 	cmpl	%r8d, %ecx
    00000171: 	jge	.Ltmp777 # Offset: 369
    00000173: 	ucomiss	0x8(%rdi,%r9), %xmm6
    00000179: 	jp	.Ltmp777 # Offset: 377
    0000017b: 	jne	.Ltmp777 # Offset: 379
    0000017d: 	addq	$0x1, %rax
.Ltmp777:
    00000181: 	addq	%rdx, %rax
    00000184: 	retq # Offset: 388
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp775:
    00000188: 	xorl	%edx, %edx
    0000018a: 	xorl	%esi, %esi
    0000018c: 	xorl	%eax, %eax
    0000018e: 	jmp	.Ltmp783 # Offset: 398
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5IfEmPT_iS0_"

Binary Function "_Z6count6IfEmPT_iS0_" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0xaa40
  Size        : 0x193
  MaxSize     : 0x1a0
  Offset      : 0xaa40
  Section     : .text
  Orc Section : .local.text._Z6count6IfEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movaps	%xmm0, %xmm6
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp784 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	pxor	%xmm2, %xmm2
    0000001a: 	movaps	%xmm0, %xmm7
    0000001d: 	xorl	%eax, %eax
    0000001f: 	shrl	$0x2, %ecx
    00000022: 	movdqa	%xmm2, %xmm1
    00000026: 	pxor	%xmm3, %xmm3
    0000002a: 	shufps	$0x0, %xmm7, %xmm7
    0000002e: 	movdqa	DATAat0x19270(%rip), %xmm5
    00000036: 	addl	$0x1, %ecx
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp785:
    00000040: 	movq	%rax, %rdx
    00000043: 	addq	$0x1, %rax
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	movups	(%rdi,%rdx), %xmm0
    0000004f: 	cmpeqps	%xmm7, %xmm0
    00000053: 	pand	%xmm5, %xmm0
    00000057: 	movdqa	%xmm0, %xmm4
    0000005b: 	punpckhdq	%xmm3, %xmm0
    0000005f: 	punpckldq	%xmm3, %xmm4
    00000063: 	paddq	%xmm0, %xmm2
    00000067: 	paddq	%xmm4, %xmm1
    0000006b: 	cmpl	%eax, %ecx
    0000006d: 	ja	.Ltmp785 # Offset: 109
    0000006f: 	movhlps	%xmm1, %xmm7
    00000072: 	leal	(,%rcx,4), %esi
    00000079: 	movhlps	%xmm2, %xmm5
    0000007c: 	movq	%xmm2, %rcx
    00000081: 	movq	%xmm7, %rdx
    00000086: 	movq	%xmm1, %rax
    0000008b: 	addq	%rcx, %rdx
    0000008e: 	movq	%xmm5, %rcx
    00000093: 	addq	%rcx, %rdx
.Ltmp792:
    00000096: 	cmpl	%esi, %r8d
    00000099: 	jle	.Ltmp786 # Offset: 153
    0000009f: 	movl	%r8d, %r11d
    000000a2: 	subl	%esi, %r11d
    000000a5: 	leal	-0x1(%r11), %ecx
    000000a9: 	cmpl	$0x2, %ecx
    000000ac: 	jbe	.Ltmp787 # Offset: 172
    000000b2: 	movaps	%xmm6, %xmm4
    000000b5: 	pxor	%xmm1, %xmm1
    000000b9: 	pxor	%xmm2, %xmm2
    000000bd: 	movslq	%esi, %rcx
    000000c0: 	leaq	(%rdi,%rcx,4), %r9
    000000c4: 	movl	%r11d, %ecx
    000000c7: 	movdqa	DATAat0x19270(%rip), %xmm5
    000000cf: 	shufps	$0x0, %xmm4, %xmm4
    000000d3: 	shrl	$0x2, %ecx
    000000d6: 	leal	-0x1(%rcx), %r10d
    000000da: 	leaq	0x10(%r9), %rcx
    000000de: 	shlq	$0x4, %r10
    000000e2: 	addq	%rcx, %r10
    000000e5: 	jmp	.Ltmp788 # Offset: 229
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp789:
    000000f0: 	addq	$0x10, %rcx
.Ltmp788:
    000000f4: 	movups	(%r9), %xmm0
    000000f8: 	movq	%rcx, %r9
    000000fb: 	cmpeqps	%xmm4, %xmm0
    000000ff: 	pand	%xmm5, %xmm0
    00000103: 	movdqa	%xmm0, %xmm3
    00000107: 	punpckldq	%xmm2, %xmm0
    0000010b: 	punpckhdq	%xmm2, %xmm3
    0000010f: 	paddq	%xmm3, %xmm0
    00000113: 	paddq	%xmm0, %xmm1
    00000117: 	cmpq	%rcx, %r10
    0000011a: 	jne	.Ltmp789 # Offset: 282
    0000011c: 	movdqa	%xmm1, %xmm0
    00000120: 	psrldq	$0x8, %xmm0
    00000125: 	paddq	%xmm0, %xmm1
    00000129: 	movq	%xmm1, %rcx
    0000012e: 	addq	%rcx, %rax
    00000131: 	movl	%r11d, %ecx
    00000134: 	andl	$-0x4, %ecx
    00000137: 	addl	%ecx, %esi
    00000139: 	cmpl	%r11d, %ecx
    0000013c: 	je	.Ltmp786 # Offset: 316
.Ltmp787:
    0000013e: 	movslq	%esi, %rcx
    00000141: 	ucomiss	(%rdi,%rcx,4), %xmm6
    00000145: 	leaq	(,%rcx,4), %r9
    0000014d: 	jp	.Ltmp790 # Offset: 333
    0000014f: 	jne	.Ltmp790 # Offset: 335
    00000151: 	addq	$0x1, %rax
.Ltmp790:
    00000155: 	leal	0x1(%rsi), %ecx
    00000158: 	cmpl	%ecx, %r8d
    0000015b: 	jle	.Ltmp786 # Offset: 347
    0000015d: 	ucomiss	0x4(%rdi,%r9), %xmm6
    00000163: 	jp	.Ltmp791 # Offset: 355
    00000165: 	jne	.Ltmp791 # Offset: 357
    00000167: 	addq	$0x1, %rax
.Ltmp791:
    0000016b: 	leal	0x2(%rsi), %ecx
    0000016e: 	cmpl	%r8d, %ecx
    00000171: 	jge	.Ltmp786 # Offset: 369
    00000173: 	ucomiss	0x8(%rdi,%r9), %xmm6
    00000179: 	jp	.Ltmp786 # Offset: 377
    0000017b: 	jne	.Ltmp786 # Offset: 379
    0000017d: 	addq	$0x1, %rax
.Ltmp786:
    00000181: 	addq	%rdx, %rax
    00000184: 	retq # Offset: 388
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp784:
    00000188: 	xorl	%edx, %edx
    0000018a: 	xorl	%esi, %esi
    0000018c: 	xorl	%eax, %eax
    0000018e: 	jmp	.Ltmp792 # Offset: 398
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6IfEmPT_iS0_"

Binary Function "_Z6count7IfEmPT_iS0_" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0xabe0
  Size        : 0x1ac
  MaxSize     : 0x1b0
  Offset      : 0xabe0
  Section     : .text
  Orc Section : .local.text._Z6count7IfEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r10d
    0000000a: 	cmpl	$0x7, %esi
    0000000d: 	jle	.Ltmp793 # Offset: 13
    00000013: 	leal	-0x8(%rsi), %r11d
    00000017: 	movq	%rdi, %rdx
    0000001a: 	xorl	%esi, %esi
    0000001c: 	xorl	%ecx, %ecx
    0000001e: 	shrl	$0x3, %r11d
    00000022: 	movl	%r11d, %eax
    00000025: 	shlq	$0x5, %rax
    00000029: 	leaq	0x20(%rdi,%rax), %r8
    0000002e: 	xorl	%edi, %edi
    00000030: 	xorl	%eax, %eax
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp802:
    00000038: 	ucomiss	(%rdx), %xmm0
    0000003b: 	jp	.Ltmp794 # Offset: 59
    0000003d: 	jne	.Ltmp794 # Offset: 61
    0000003f: 	addq	$0x1, %rax
.Ltmp794:
    00000043: 	ucomiss	0x4(%rdx), %xmm0
    00000047: 	jp	.Ltmp795 # Offset: 71
    00000049: 	jne	.Ltmp795 # Offset: 73
    0000004b: 	addq	$0x1, %rcx
.Ltmp795:
    0000004f: 	ucomiss	0x8(%rdx), %xmm0
    00000053: 	jp	.Ltmp796 # Offset: 83
    00000055: 	jne	.Ltmp796 # Offset: 85
    00000057: 	addq	$0x1, %rdi
.Ltmp796:
    0000005b: 	ucomiss	0xc(%rdx), %xmm0
    0000005f: 	jp	.Ltmp797 # Offset: 95
    00000061: 	jne	.Ltmp797 # Offset: 97
    00000063: 	addq	$0x1, %rsi
.Ltmp797:
    00000067: 	ucomiss	0x10(%rdx), %xmm0
    0000006b: 	jp	.Ltmp798 # Offset: 107
    0000006d: 	jne	.Ltmp798 # Offset: 109
    0000006f: 	addq	$0x1, %rax
.Ltmp798:
    00000073: 	ucomiss	0x14(%rdx), %xmm0
    00000077: 	jp	.Ltmp799 # Offset: 119
    00000079: 	jne	.Ltmp799 # Offset: 121
    0000007b: 	addq	$0x1, %rcx
.Ltmp799:
    0000007f: 	ucomiss	0x18(%rdx), %xmm0
    00000083: 	jp	.Ltmp800 # Offset: 131
    00000085: 	jne	.Ltmp800 # Offset: 133
    00000087: 	addq	$0x1, %rdi
.Ltmp800:
    0000008b: 	ucomiss	0x1c(%rdx), %xmm0
    0000008f: 	jp	.Ltmp801 # Offset: 143
    00000091: 	jne	.Ltmp801 # Offset: 145
    00000093: 	addq	$0x1, %rsi
.Ltmp801:
    00000097: 	addq	$0x20, %rdx
    0000009b: 	cmpq	%rdx, %r8
    0000009e: 	jne	.Ltmp802 # Offset: 158
    000000a0: 	addq	%rdi, %rcx
    000000a3: 	leal	0x8(,%r11,8), %r8d
    000000ab: 	addq	%rsi, %rcx
.Ltmp809:
    000000ae: 	cmpl	%r8d, %r10d
    000000b1: 	jle	.Ltmp803 # Offset: 177
    000000b7: 	movl	%r10d, %r11d
    000000ba: 	subl	%r8d, %r11d
    000000bd: 	leal	-0x1(%r11), %edx
    000000c1: 	cmpl	$0x2, %edx
    000000c4: 	jbe	.Ltmp804 # Offset: 196
    000000ca: 	movaps	%xmm0, %xmm6
    000000cd: 	pxor	%xmm2, %xmm2
    000000d1: 	pxor	%xmm3, %xmm3
    000000d5: 	movslq	%r8d, %rdx
    000000d8: 	leaq	(%r9,%rdx,4), %rsi
    000000dc: 	movl	%r11d, %edx
    000000df: 	movdqa	DATAat0x19270(%rip), %xmm5
    000000e7: 	shufps	$0x0, %xmm6, %xmm6
    000000eb: 	shrl	$0x2, %edx
    000000ee: 	leal	-0x1(%rdx), %edi
    000000f1: 	leaq	0x10(%rsi), %rdx
    000000f5: 	shlq	$0x4, %rdi
    000000f9: 	addq	%rdx, %rdi
    000000fc: 	jmp	.Ltmp805 # Offset: 252
    000000fe: 	nop # Size: 2
.Ltmp806:
    00000100: 	addq	$0x10, %rdx
.Ltmp805:
    00000104: 	movups	(%rsi), %xmm1
    00000107: 	movq	%rdx, %rsi
    0000010a: 	cmpeqps	%xmm6, %xmm1
    0000010e: 	pand	%xmm5, %xmm1
    00000112: 	movdqa	%xmm1, %xmm4
    00000116: 	punpckhdq	%xmm3, %xmm1
    0000011a: 	punpckldq	%xmm3, %xmm4
    0000011e: 	paddq	%xmm4, %xmm1
    00000122: 	paddq	%xmm1, %xmm2
    00000126: 	cmpq	%rdx, %rdi
    00000129: 	jne	.Ltmp806 # Offset: 297
    0000012b: 	movdqa	%xmm2, %xmm1
    0000012f: 	psrldq	$0x8, %xmm1
    00000134: 	paddq	%xmm1, %xmm2
    00000138: 	movq	%xmm2, %rdx
    0000013d: 	addq	%rdx, %rax
    00000140: 	movl	%r11d, %edx
    00000143: 	andl	$-0x4, %edx
    00000146: 	addl	%edx, %r8d
    00000149: 	cmpl	%edx, %r11d
    0000014c: 	je	.Ltmp803 # Offset: 332
.Ltmp804:
    0000014e: 	movslq	%r8d, %rdx
    00000151: 	ucomiss	(%r9,%rdx,4), %xmm0
    00000156: 	leaq	(,%rdx,4), %rsi
    0000015e: 	jp	.Ltmp807 # Offset: 350
    00000160: 	jne	.Ltmp807 # Offset: 352
    00000162: 	addq	$0x1, %rax
.Ltmp807:
    00000166: 	leal	0x1(%r8), %edx
    0000016a: 	cmpl	%edx, %r10d
    0000016d: 	jle	.Ltmp803 # Offset: 365
    0000016f: 	ucomiss	0x4(%r9,%rsi), %xmm0
    00000175: 	jp	.Ltmp808 # Offset: 373
    00000177: 	jne	.Ltmp808 # Offset: 375
    00000179: 	addq	$0x1, %rax
.Ltmp808:
    0000017d: 	addl	$0x2, %r8d
    00000181: 	cmpl	%r8d, %r10d
    00000184: 	jle	.Ltmp803 # Offset: 388
    00000186: 	ucomiss	0x8(%r9,%rsi), %xmm0
    0000018c: 	jp	.Ltmp803 # Offset: 396
    0000018e: 	jne	.Ltmp803 # Offset: 398
    00000190: 	addq	$0x1, %rax
.Ltmp803:
    00000194: 	addq	%rcx, %rax
    00000197: 	retq # Offset: 407
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp793:
    000001a0: 	xorl	%ecx, %ecx
    000001a2: 	xorl	%r8d, %r8d
    000001a5: 	xorl	%eax, %eax
    000001a7: 	jmp	.Ltmp809 # Offset: 423
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7IfEmPT_iS0_"

Binary Function "_Z6count8IfEmPT_iS0_" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0xad90
  Size        : 0x194
  MaxSize     : 0x1a0
  Offset      : 0xad90
  Section     : .text
  Orc Section : .local.text._Z6count8IfEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r8d
    0000000a: 	movaps	%xmm0, %xmm7
    0000000d: 	cmpl	$0x7, %esi
    00000010: 	jle	.Ltmp810 # Offset: 16
    00000016: 	leal	-0x8(%rsi), %ecx
    00000019: 	pxor	%xmm2, %xmm2
    0000001d: 	movaps	%xmm0, %xmm5
    00000020: 	movq	%rdi, %rax
    00000023: 	shrl	$0x3, %ecx
    00000026: 	xorl	%edx, %edx
    00000028: 	movdqa	%xmm2, %xmm3
    0000002c: 	shufps	$0x0, %xmm5, %xmm5
    00000030: 	movdqa	DATAat0x19270(%rip), %xmm6
    00000038: 	addl	$0x1, %ecx
    0000003b: 	pxor	%xmm4, %xmm4
    0000003f: 	nop # Size: 1
.Ltmp811:
    00000040: 	movups	(%rax), %xmm0
    00000043: 	movups	0x10(%rax), %xmm1
    00000047: 	addl	$0x1, %edx
    0000004a: 	addq	$0x20, %rax
    0000004e: 	cmpeqps	%xmm5, %xmm0
    00000052: 	cmpeqps	%xmm5, %xmm1
    00000056: 	pand	%xmm6, %xmm0
    0000005a: 	psubd	%xmm1, %xmm0
    0000005e: 	movdqa	%xmm0, %xmm1
    00000062: 	punpckhdq	%xmm4, %xmm0
    00000066: 	punpckldq	%xmm4, %xmm1
    0000006a: 	paddq	%xmm0, %xmm2
    0000006e: 	paddq	%xmm1, %xmm3
    00000072: 	cmpl	%edx, %ecx
    00000074: 	ja	.Ltmp811 # Offset: 116
    00000076: 	movhlps	%xmm3, %xmm6
    00000079: 	movq	%xmm2, %r10
    0000007e: 	movq	%xmm3, %rax
    00000083: 	shll	$0x3, %ecx
    00000086: 	movq	%xmm6, %rdx
    0000008b: 	movhlps	%xmm2, %xmm6
    0000008e: 	addq	%rdx, %r10
    00000091: 	movq	%xmm6, %rdx
    00000096: 	addq	%rdx, %r10
.Ltmp818:
    00000099: 	cmpl	%ecx, %r8d
    0000009c: 	jle	.Ltmp812 # Offset: 156
    000000a2: 	movl	%r8d, %r11d
    000000a5: 	subl	%ecx, %r11d
    000000a8: 	leal	-0x1(%r11), %edx
    000000ac: 	cmpl	$0x2, %edx
    000000af: 	jbe	.Ltmp813 # Offset: 175
    000000b5: 	movaps	%xmm7, %xmm4
    000000b8: 	pxor	%xmm1, %xmm1
    000000bc: 	pxor	%xmm2, %xmm2
    000000c0: 	movslq	%ecx, %rdx
    000000c3: 	leaq	(%r9,%rdx,4), %rsi
    000000c7: 	movl	%r11d, %edx
    000000ca: 	movdqa	DATAat0x19270(%rip), %xmm6
    000000d2: 	shufps	$0x0, %xmm4, %xmm4
    000000d6: 	shrl	$0x2, %edx
    000000d9: 	leal	-0x1(%rdx), %edi
    000000dc: 	leaq	0x10(%rsi), %rdx
    000000e0: 	shlq	$0x4, %rdi
    000000e4: 	addq	%rdx, %rdi
    000000e7: 	jmp	.Ltmp814 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp815:
    000000f0: 	addq	$0x10, %rdx
.Ltmp814:
    000000f4: 	movups	(%rsi), %xmm0
    000000f7: 	movq	%rdx, %rsi
    000000fa: 	cmpeqps	%xmm4, %xmm0
    000000fe: 	pand	%xmm6, %xmm0
    00000102: 	movdqa	%xmm0, %xmm3
    00000106: 	punpckldq	%xmm2, %xmm0
    0000010a: 	punpckhdq	%xmm2, %xmm3
    0000010e: 	paddq	%xmm3, %xmm0
    00000112: 	paddq	%xmm0, %xmm1
    00000116: 	cmpq	%rdx, %rdi
    00000119: 	jne	.Ltmp815 # Offset: 281
    0000011b: 	movdqa	%xmm1, %xmm0
    0000011f: 	psrldq	$0x8, %xmm0
    00000124: 	paddq	%xmm0, %xmm1
    00000128: 	movq	%xmm1, %rdx
    0000012d: 	addq	%rdx, %rax
    00000130: 	movl	%r11d, %edx
    00000133: 	andl	$-0x4, %edx
    00000136: 	addl	%edx, %ecx
    00000138: 	cmpl	%r11d, %edx
    0000013b: 	je	.Ltmp812 # Offset: 315
.Ltmp813:
    0000013d: 	movslq	%ecx, %rdx
    00000140: 	ucomiss	(%r9,%rdx,4), %xmm7
    00000145: 	leaq	(,%rdx,4), %rsi
    0000014d: 	jp	.Ltmp816 # Offset: 333
    0000014f: 	jne	.Ltmp816 # Offset: 335
    00000151: 	addq	$0x1, %rax
.Ltmp816:
    00000155: 	leal	0x1(%rcx), %edx
    00000158: 	cmpl	%edx, %r8d
    0000015b: 	jle	.Ltmp812 # Offset: 347
    0000015d: 	ucomiss	0x4(%r9,%rsi), %xmm7
    00000163: 	jp	.Ltmp817 # Offset: 355
    00000165: 	jne	.Ltmp817 # Offset: 357
    00000167: 	addq	$0x1, %rax
.Ltmp817:
    0000016b: 	addl	$0x2, %ecx
    0000016e: 	cmpl	%r8d, %ecx
    00000171: 	jge	.Ltmp812 # Offset: 369
    00000173: 	ucomiss	0x8(%r9,%rsi), %xmm7
    00000179: 	jp	.Ltmp812 # Offset: 377
    0000017b: 	jne	.Ltmp812 # Offset: 379
    0000017d: 	addq	$0x1, %rax
.Ltmp812:
    00000181: 	addq	%r10, %rax
    00000184: 	retq # Offset: 388
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp810:
    00000188: 	xorl	%r10d, %r10d
    0000018b: 	xorl	%ecx, %ecx
    0000018d: 	xorl	%eax, %eax
    0000018f: 	jmp	.Ltmp818 # Offset: 399
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8IfEmPT_iS0_"

Binary Function "_Z6count1IdEmPT_iS0_" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0xaf30
  Size        : 0xb7
  MaxSize     : 0xc0
  Offset      : 0xaf30
  Section     : .text
  Orc Section : .local.text._Z6count1IdEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp819 # Offset: 9
    0000000f: 	leal	-0x1(%rsi), %eax
    00000012: 	cmpl	$0x1, %eax
    00000015: 	jbe	.Ltmp820 # Offset: 21
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movapd	%xmm0, %xmm3
    00000021: 	pxor	%xmm2, %xmm2
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%ecx
    0000002a: 	unpcklpd	%xmm3, %xmm3
    0000002e: 	subl	$0x1, %ecx
    00000031: 	shlq	$0x4, %rcx
    00000035: 	leaq	0x10(%rdi,%rcx), %rcx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp821:
    00000040: 	movupd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	cmpeqpd	%xmm3, %xmm1
    0000004d: 	psubq	%xmm1, %xmm2
    00000051: 	cmpq	%rax, %rcx
    00000054: 	jne	.Ltmp821 # Offset: 84
    00000056: 	movdqa	%xmm2, %xmm1
    0000005a: 	movl	%esi, %ecx
    0000005c: 	psrldq	$0x8, %xmm1
    00000061: 	andl	$-0x2, %ecx
    00000064: 	paddq	%xmm1, %xmm2
    00000068: 	movq	%xmm2, %rax
    0000006d: 	testb	$0x1, %sil
    00000071: 	je	.Ltmp822 # Offset: 113
.Ltmp825:
    00000073: 	movslq	%ecx, %rdi
    00000076: 	ucomisd	(%rdx,%rdi,8), %xmm0
    0000007b: 	leaq	(,%rdi,8), %r8
    00000083: 	jp	.Ltmp823 # Offset: 131
    00000085: 	jne	.Ltmp823 # Offset: 133
    00000087: 	addq	$0x1, %rax
.Ltmp823:
    0000008b: 	addl	$0x1, %ecx
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jge	.Ltmp824 # Offset: 144
    00000092: 	ucomisd	0x8(%rdx,%r8), %xmm0
    00000099: 	jp	.Ltmp824 # Offset: 153
    0000009b: 	jne	.Ltmp824 # Offset: 155
    0000009d: 	addq	$0x1, %rax
    000000a1: 	retq # Offset: 161
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp819:
    000000a8: 	xorl	%eax, %eax
.Ltmp824:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp822:
    000000b0: 	retq # Offset: 176
.Ltmp820:
    000000b1: 	xorl	%ecx, %ecx
    000000b3: 	xorl	%eax, %eax
    000000b5: 	jmp	.Ltmp825 # Offset: 181
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count1IdEmPT_iS0_"

Binary Function "_Z6count2IdEmPT_iS0_" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0xaff0
  Size        : 0x8f
  MaxSize     : 0x90
  Offset      : 0xaff0
  Section     : .text
  Orc Section : .local.text._Z6count2IdEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpl	$0x1, %esi
    0000000a: 	jle	.Ltmp826 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	leal	-0x2(%rsi), %edi
    00000012: 	xorl	%r8d, %r8d
    00000015: 	shrl	%edi
    00000017: 	movl	%edi, %edx
    00000019: 	shlq	$0x4, %rdx
    0000001d: 	leaq	0x10(%rcx,%rdx), %rdx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp829:
    00000028: 	ucomisd	(%rax), %xmm0
    0000002c: 	jp	.Ltmp827 # Offset: 44
    0000002e: 	jne	.Ltmp827 # Offset: 46
    00000030: 	addq	$0x1, %r8
.Ltmp827:
    00000034: 	ucomisd	0x8(%rax), %xmm0
    00000039: 	jp	.Ltmp828 # Offset: 57
    0000003b: 	jne	.Ltmp828 # Offset: 59
    0000003d: 	addq	$0x1, %r8
.Ltmp828:
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp829 # Offset: 72
    0000004a: 	leal	0x2(%rdi,%rdi), %eax
.Ltmp832:
    0000004e: 	cmpl	%eax, %esi
    00000050: 	jle	.Ltmp830 # Offset: 80
    00000052: 	movslq	%eax, %rdx
    00000055: 	ucomisd	(%rcx,%rdx,8), %xmm0
    0000005a: 	leaq	(,%rdx,8), %rdi
    00000062: 	jp	.Ltmp831 # Offset: 98
    00000064: 	jne	.Ltmp831 # Offset: 100
    00000066: 	addq	$0x1, %r8
.Ltmp831:
    0000006a: 	addl	$0x1, %eax
    0000006d: 	cmpl	%eax, %esi
    0000006f: 	jle	.Ltmp830 # Offset: 111
    00000071: 	ucomisd	0x8(%rcx,%rdi), %xmm0
    00000077: 	jp	.Ltmp830 # Offset: 119
    00000079: 	jne	.Ltmp830 # Offset: 121
    0000007b: 	addq	$0x1, %r8
.Ltmp830:
    0000007f: 	movq	%r8, %rax
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp826:
    00000088: 	xorl	%eax, %eax
    0000008a: 	xorl	%r8d, %r8d
    0000008d: 	jmp	.Ltmp832 # Offset: 141
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count2IdEmPT_iS0_"

Binary Function "_Z6count3IdEmPT_iS0_" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0xb080
  Size        : 0xdf
  MaxSize     : 0xe0
  Offset      : 0xb080
  Section     : .text
  Orc Section : .local.text._Z6count3IdEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp833 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %esi
    00000012: 	movq	%rdi, %rax
    00000015: 	xorl	%r8d, %r8d
    00000018: 	shrl	$0x2, %esi
    0000001b: 	movl	%esi, %edx
    0000001d: 	shlq	$0x5, %rdx
    00000021: 	leaq	0x20(%rdi,%rdx), %rdx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp838:
    00000030: 	ucomisd	(%rax), %xmm0
    00000034: 	jp	.Ltmp834 # Offset: 52
    00000036: 	jne	.Ltmp834 # Offset: 54
    00000038: 	addq	$0x1, %r8
.Ltmp834:
    0000003c: 	ucomisd	0x8(%rax), %xmm0
    00000041: 	jp	.Ltmp835 # Offset: 65
    00000043: 	jne	.Ltmp835 # Offset: 67
    00000045: 	addq	$0x1, %r8
.Ltmp835:
    00000049: 	ucomisd	0x10(%rax), %xmm0
    0000004e: 	jp	.Ltmp836 # Offset: 78
    00000050: 	jne	.Ltmp836 # Offset: 80
    00000052: 	addq	$0x1, %r8
.Ltmp836:
    00000056: 	ucomisd	0x18(%rax), %xmm0
    0000005b: 	jp	.Ltmp837 # Offset: 91
    0000005d: 	jne	.Ltmp837 # Offset: 93
    0000005f: 	addq	$0x1, %r8
.Ltmp837:
    00000063: 	addq	$0x20, %rax
    00000067: 	cmpq	%rax, %rdx
    0000006a: 	jne	.Ltmp838 # Offset: 106
    0000006c: 	leal	0x4(,%rsi,4), %eax
.Ltmp843:
    00000073: 	cmpl	%eax, %ecx
    00000075: 	jle	.Ltmp839 # Offset: 117
    00000077: 	movslq	%eax, %rdx
    0000007a: 	ucomisd	(%rdi,%rdx,8), %xmm0
    0000007f: 	leaq	(,%rdx,8), %rsi
    00000087: 	jp	.Ltmp840 # Offset: 135
    00000089: 	jne	.Ltmp840 # Offset: 137
    0000008b: 	addq	$0x1, %r8
.Ltmp840:
    0000008f: 	leal	0x1(%rax), %edx
    00000092: 	cmpl	%ecx, %edx
    00000094: 	jge	.Ltmp839 # Offset: 148
    00000096: 	ucomisd	0x8(%rdi,%rsi), %xmm0
    0000009c: 	jp	.Ltmp841 # Offset: 156
    0000009e: 	jne	.Ltmp841 # Offset: 158
    000000a0: 	addq	$0x1, %r8
.Ltmp841:
    000000a4: 	leal	0x2(%rax), %edx
    000000a7: 	cmpl	%edx, %ecx
    000000a9: 	jle	.Ltmp839 # Offset: 169
    000000ab: 	ucomisd	0x10(%rdi,%rsi), %xmm0
    000000b1: 	jp	.Ltmp842 # Offset: 177
    000000b3: 	jne	.Ltmp842 # Offset: 179
    000000b5: 	addq	$0x1, %r8
.Ltmp842:
    000000b9: 	addl	$0x3, %eax
    000000bc: 	cmpl	%ecx, %eax
    000000be: 	jge	.Ltmp839 # Offset: 190
    000000c0: 	ucomisd	0x18(%rdi,%rsi), %xmm0
    000000c6: 	jp	.Ltmp839 # Offset: 198
    000000c8: 	jne	.Ltmp839 # Offset: 200
    000000ca: 	addq	$0x1, %r8
.Ltmp839:
    000000ce: 	movq	%r8, %rax
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp833:
    000000d8: 	xorl	%eax, %eax
    000000da: 	xorl	%r8d, %r8d
    000000dd: 	jmp	.Ltmp843 # Offset: 221
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count3IdEmPT_iS0_"

Binary Function "_Z6count4IdEmPT_iS0_" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0xb160
  Size        : 0x13c
  MaxSize     : 0x140
  Offset      : 0xb160
  Section     : .text
  Orc Section : .local.text._Z6count4IdEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r10d
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp844 # Offset: 13
    00000013: 	movq	%rdi, %rdx
    00000016: 	leal	-0x4(%rsi), %edi
    00000019: 	xorl	%ecx, %ecx
    0000001b: 	shrl	$0x2, %edi
    0000001e: 	movl	%edi, %eax
    00000020: 	shlq	$0x5, %rax
    00000024: 	leaq	0x20(%r9,%rax), %rsi
    00000029: 	xorl	%eax, %eax
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp849:
    00000030: 	ucomisd	(%rdx), %xmm0
    00000034: 	jp	.Ltmp845 # Offset: 52
    00000036: 	jne	.Ltmp845 # Offset: 54
    00000038: 	addq	$0x1, %rax
.Ltmp845:
    0000003c: 	ucomisd	0x8(%rdx), %xmm0
    00000041: 	jp	.Ltmp846 # Offset: 65
    00000043: 	jne	.Ltmp846 # Offset: 67
    00000045: 	addq	$0x1, %rcx
.Ltmp846:
    00000049: 	ucomisd	0x10(%rdx), %xmm0
    0000004e: 	jp	.Ltmp847 # Offset: 78
    00000050: 	jne	.Ltmp847 # Offset: 80
    00000052: 	addq	$0x1, %rax
.Ltmp847:
    00000056: 	ucomisd	0x18(%rdx), %xmm0
    0000005b: 	jp	.Ltmp848 # Offset: 91
    0000005d: 	jne	.Ltmp848 # Offset: 93
    0000005f: 	addq	$0x1, %rcx
.Ltmp848:
    00000063: 	addq	$0x20, %rdx
    00000067: 	cmpq	%rdx, %rsi
    0000006a: 	jne	.Ltmp849 # Offset: 106
    0000006c: 	leal	0x4(,%rdi,4), %r8d
.Ltmp855:
    00000074: 	cmpl	%r8d, %r10d
    00000077: 	jle	.Ltmp850 # Offset: 119
    0000007d: 	movl	%r10d, %r11d
    00000080: 	subl	%r8d, %r11d
    00000083: 	leal	-0x1(%r11), %edx
    00000087: 	cmpl	$0x1, %edx
    0000008a: 	jbe	.Ltmp851 # Offset: 138
    0000008c: 	movslq	%r8d, %rdx
    0000008f: 	movapd	%xmm0, %xmm3
    00000093: 	pxor	%xmm2, %xmm2
    00000097: 	leaq	(%r9,%rdx,8), %rsi
    0000009b: 	movl	%r11d, %edx
    0000009e: 	unpcklpd	%xmm3, %xmm3
    000000a2: 	shrl	%edx
    000000a4: 	leal	-0x1(%rdx), %edi
    000000a7: 	leaq	0x10(%rsi), %rdx
    000000ab: 	shlq	$0x4, %rdi
    000000af: 	addq	%rdx, %rdi
    000000b2: 	jmp	.Ltmp852 # Offset: 178
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp853:
    000000b8: 	addq	$0x10, %rdx
.Ltmp852:
    000000bc: 	movupd	(%rsi), %xmm1
    000000c0: 	movq	%rdx, %rsi
    000000c3: 	cmpeqpd	%xmm3, %xmm1
    000000c8: 	psubq	%xmm1, %xmm2
    000000cc: 	cmpq	%rdx, %rdi
    000000cf: 	jne	.Ltmp853 # Offset: 207
    000000d1: 	movdqa	%xmm2, %xmm1
    000000d5: 	psrldq	$0x8, %xmm1
    000000da: 	paddq	%xmm1, %xmm2
    000000de: 	movq	%xmm2, %rdx
    000000e3: 	addq	%rdx, %rax
    000000e6: 	movl	%r11d, %edx
    000000e9: 	andl	$-0x2, %edx
    000000ec: 	addl	%edx, %r8d
    000000ef: 	cmpl	%edx, %r11d
    000000f2: 	je	.Ltmp850 # Offset: 242
.Ltmp851:
    000000f4: 	movslq	%r8d, %rdx
    000000f7: 	ucomisd	(%r9,%rdx,8), %xmm0
    000000fd: 	leaq	(,%rdx,8), %rsi
    00000105: 	jp	.Ltmp854 # Offset: 261
    00000107: 	jne	.Ltmp854 # Offset: 263
    00000109: 	addq	$0x1, %rax
.Ltmp854:
    0000010d: 	addl	$0x1, %r8d
    00000111: 	cmpl	%r10d, %r8d
    00000114: 	jge	.Ltmp850 # Offset: 276
    00000116: 	ucomisd	0x8(%r9,%rsi), %xmm0
    0000011d: 	jp	.Ltmp850 # Offset: 285
    0000011f: 	jne	.Ltmp850 # Offset: 287
    00000121: 	addq	$0x1, %rax
.Ltmp850:
    00000125: 	addq	%rcx, %rax
    00000128: 	retq # Offset: 296
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp844:
    00000130: 	xorl	%r8d, %r8d
    00000133: 	xorl	%ecx, %ecx
    00000135: 	xorl	%eax, %eax
    00000137: 	jmp	.Ltmp855 # Offset: 311
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count4IdEmPT_iS0_"

Binary Function "_Z6count5IdEmPT_iS0_" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0xb2a0
  Size        : 0x14b
  MaxSize     : 0x150
  Offset      : 0xb2a0
  Section     : .text
  Orc Section : .local.text._Z6count5IdEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%esi, %r9d
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp856 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	movapd	%xmm0, %xmm4
    0000001a: 	pxor	%xmm3, %xmm3
    0000001e: 	movq	%rdi, %rax
    00000021: 	shrl	$0x2, %ecx
    00000024: 	unpcklpd	%xmm4, %xmm4
    00000028: 	movdqa	%xmm3, %xmm2
    0000002c: 	xorl	%edx, %edx
    0000002e: 	addl	$0x1, %ecx
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp857:
    00000038: 	movupd	(%rax), %xmm1
    0000003c: 	addl	$0x1, %edx
    0000003f: 	addq	$0x20, %rax
    00000043: 	cmpeqpd	%xmm4, %xmm1
    00000048: 	psubq	%xmm1, %xmm2
    0000004c: 	movupd	-0x10(%rax), %xmm1
    00000051: 	cmpeqpd	%xmm4, %xmm1
    00000056: 	psubq	%xmm1, %xmm3
    0000005a: 	cmpl	%ecx, %edx
    0000005c: 	jb	.Ltmp857 # Offset: 92
    0000005e: 	movhlps	%xmm2, %xmm5
    00000061: 	leal	(,%rcx,4), %esi
    00000068: 	movhlps	%xmm3, %xmm6
    0000006b: 	movq	%xmm3, %rcx
    00000070: 	movq	%xmm5, %rdx
    00000075: 	movq	%xmm2, %rax
    0000007a: 	addq	%rcx, %rdx
    0000007d: 	movq	%xmm6, %rcx
    00000082: 	addq	%rcx, %rdx
.Ltmp863:
    00000085: 	cmpl	%esi, %r9d
    00000088: 	jle	.Ltmp858 # Offset: 136
    0000008e: 	movl	%r9d, %r11d
    00000091: 	subl	%esi, %r11d
    00000094: 	leal	-0x1(%r11), %ecx
    00000098: 	cmpl	$0x1, %ecx
    0000009b: 	jbe	.Ltmp859 # Offset: 155
    0000009d: 	movslq	%esi, %rcx
    000000a0: 	movapd	%xmm0, %xmm3
    000000a4: 	pxor	%xmm2, %xmm2
    000000a8: 	leaq	(%r8,%rcx,8), %rdi
    000000ac: 	movl	%r11d, %ecx
    000000af: 	unpcklpd	%xmm3, %xmm3
    000000b3: 	shrl	%ecx
    000000b5: 	leal	-0x1(%rcx), %r10d
    000000b9: 	leaq	0x10(%rdi), %rcx
    000000bd: 	shlq	$0x4, %r10
    000000c1: 	addq	%rcx, %r10
    000000c4: 	jmp	.Ltmp860 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp861:
    000000d0: 	addq	$0x10, %rcx
.Ltmp860:
    000000d4: 	movupd	(%rdi), %xmm1
    000000d8: 	movq	%rcx, %rdi
    000000db: 	cmpeqpd	%xmm3, %xmm1
    000000e0: 	psubq	%xmm1, %xmm2
    000000e4: 	cmpq	%r10, %rcx
    000000e7: 	jne	.Ltmp861 # Offset: 231
    000000e9: 	movdqa	%xmm2, %xmm1
    000000ed: 	psrldq	$0x8, %xmm1
    000000f2: 	paddq	%xmm1, %xmm2
    000000f6: 	movq	%xmm2, %rcx
    000000fb: 	addq	%rcx, %rax
    000000fe: 	movl	%r11d, %ecx
    00000101: 	andl	$-0x2, %ecx
    00000104: 	addl	%ecx, %esi
    00000106: 	cmpl	%ecx, %r11d
    00000109: 	je	.Ltmp858 # Offset: 265
.Ltmp859:
    0000010b: 	movslq	%esi, %rcx
    0000010e: 	ucomisd	(%r8,%rcx,8), %xmm0
    00000114: 	leaq	(,%rcx,8), %rdi
    0000011c: 	jp	.Ltmp862 # Offset: 284
    0000011e: 	jne	.Ltmp862 # Offset: 286
    00000120: 	addq	$0x1, %rax
.Ltmp862:
    00000124: 	leal	0x1(%rsi), %ecx
    00000127: 	cmpl	%ecx, %r9d
    0000012a: 	jle	.Ltmp858 # Offset: 298
    0000012c: 	ucomisd	0x8(%r8,%rdi), %xmm0
    00000133: 	jp	.Ltmp858 # Offset: 307
    00000135: 	jne	.Ltmp858 # Offset: 309
    00000137: 	addq	$0x1, %rax
.Ltmp858:
    0000013b: 	addq	%rdx, %rax
    0000013e: 	retq # Offset: 318
    0000013f: 	nop # Size: 1
.Ltmp856:
    00000140: 	xorl	%edx, %edx
    00000142: 	xorl	%esi, %esi
    00000144: 	xorl	%eax, %eax
    00000146: 	jmp	.Ltmp863 # Offset: 326
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count5IdEmPT_iS0_"

Binary Function "_Z6count6IdEmPT_iS0_" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0xb3f0
  Size        : 0x164
  MaxSize     : 0x170
  Offset      : 0xb3f0
  Section     : .text
  Orc Section : .local.text._Z6count6IdEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r11
    00000008: 	pushq	%rbx
    00000009: 	movl	%esi, %ebx
    0000000b: 	cmpl	$0x3, %esi
    0000000e: 	jle	.Ltmp864 # Offset: 14
    00000014: 	leal	-0x4(%rsi), %ebp
    00000017: 	movq	%rdi, %rdx
    0000001a: 	xorl	%r8d, %r8d
    0000001d: 	xorl	%r9d, %r9d
    00000020: 	shrl	$0x2, %ebp
    00000023: 	xorl	%ecx, %ecx
    00000025: 	movl	%ebp, %eax
    00000027: 	shlq	$0x5, %rax
    0000002b: 	leaq	0x20(%rdi,%rax), %r10
    00000030: 	xorl	%edi, %edi
    00000032: 	xorl	%eax, %eax
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp865:
    00000038: 	xorl	%esi, %esi
    0000003a: 	ucomisd	(%rdx), %xmm0
    0000003e: 	setnp	%sil
    00000042: 	cmovneq	%rcx, %rsi
    00000046: 	addq	%rsi, %rax
    00000049: 	xorl	%esi, %esi
    0000004b: 	ucomisd	0x8(%rdx), %xmm0
    00000050: 	setnp	%sil
    00000054: 	cmovneq	%rcx, %rsi
    00000058: 	addq	%rsi, %rdi
    0000005b: 	xorl	%esi, %esi
    0000005d: 	ucomisd	0x10(%rdx), %xmm0
    00000062: 	setnp	%sil
    00000066: 	cmovneq	%rcx, %rsi
    0000006a: 	addq	%rsi, %r9
    0000006d: 	xorl	%esi, %esi
    0000006f: 	ucomisd	0x18(%rdx), %xmm0
    00000074: 	setnp	%sil
    00000078: 	cmovneq	%rcx, %rsi
    0000007c: 	addq	$0x20, %rdx
    00000080: 	addq	%rsi, %r8
    00000083: 	cmpq	%rdx, %r10
    00000086: 	jne	.Ltmp865 # Offset: 134
    00000088: 	addq	%r9, %rdi
    0000008b: 	leal	0x4(,%rbp,4), %r10d
    00000093: 	addq	%r8, %rdi
.Ltmp871:
    00000096: 	cmpl	%r10d, %ebx
    00000099: 	jle	.Ltmp866 # Offset: 153
    0000009f: 	movl	%ebx, %r8d
    000000a2: 	subl	%r10d, %r8d
    000000a5: 	leal	-0x1(%r8), %edx
    000000a9: 	cmpl	$0x1, %edx
    000000ac: 	jbe	.Ltmp867 # Offset: 172
    000000ae: 	movslq	%r10d, %rdx
    000000b1: 	movapd	%xmm0, %xmm3
    000000b5: 	pxor	%xmm2, %xmm2
    000000b9: 	leaq	(%r11,%rdx,8), %rcx
    000000bd: 	movl	%r8d, %edx
    000000c0: 	unpcklpd	%xmm3, %xmm3
    000000c4: 	shrl	%edx
    000000c6: 	leal	-0x1(%rdx), %esi
    000000c9: 	leaq	0x10(%rcx), %rdx
    000000cd: 	shlq	$0x4, %rsi
    000000d1: 	addq	%rdx, %rsi
    000000d4: 	jmp	.Ltmp868 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp869:
    000000e0: 	addq	$0x10, %rdx
.Ltmp868:
    000000e4: 	movupd	(%rcx), %xmm1
    000000e8: 	movq	%rdx, %rcx
    000000eb: 	cmpeqpd	%xmm3, %xmm1
    000000f0: 	psubq	%xmm1, %xmm2
    000000f4: 	cmpq	%rdx, %rsi
    000000f7: 	jne	.Ltmp869 # Offset: 247
    000000f9: 	movdqa	%xmm2, %xmm1
    000000fd: 	psrldq	$0x8, %xmm1
    00000102: 	paddq	%xmm1, %xmm2
    00000106: 	movq	%xmm2, %rdx
    0000010b: 	addq	%rdx, %rax
    0000010e: 	movl	%r8d, %edx
    00000111: 	andl	$-0x2, %edx
    00000114: 	addl	%edx, %r10d
    00000117: 	cmpl	%r8d, %edx
    0000011a: 	je	.Ltmp866 # Offset: 282
.Ltmp867:
    0000011c: 	movslq	%r10d, %rdx
    0000011f: 	ucomisd	(%r11,%rdx,8), %xmm0
    00000125: 	leaq	(,%rdx,8), %rcx
    0000012d: 	jp	.Ltmp870 # Offset: 301
    0000012f: 	jne	.Ltmp870 # Offset: 303
    00000131: 	addq	$0x1, %rax
.Ltmp870:
    00000135: 	addl	$0x1, %r10d
    00000139: 	cmpl	%ebx, %r10d
    0000013c: 	jge	.Ltmp866 # Offset: 316
    0000013e: 	ucomisd	0x8(%r11,%rcx), %xmm0
    00000145: 	jp	.Ltmp866 # Offset: 325
    00000147: 	jne	.Ltmp866 # Offset: 327
    00000149: 	addq	$0x1, %rax
.Ltmp866:
    0000014d: 	addq	%rdi, %rax
    00000150: 	popq	%rbx
    00000151: 	popq	%rbp
    00000152: 	retq # Offset: 338
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp864:
    00000158: 	xorl	%edi, %edi
    0000015a: 	xorl	%r10d, %r10d
    0000015d: 	xorl	%eax, %eax
    0000015f: 	jmp	.Ltmp871 # Offset: 351
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count6IdEmPT_iS0_"

Binary Function "_Z6count7IdEmPT_iS0_" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0xb560
  Size        : 0x184
  MaxSize     : 0x190
  Offset      : 0xb560
  Section     : .text
  Orc Section : .local.text._Z6count7IdEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%esi, %r10d
    0000000a: 	cmpl	$0x7, %esi
    0000000d: 	jle	.Ltmp872 # Offset: 13
    00000013: 	leal	-0x8(%rsi), %r11d
    00000017: 	movq	%rdi, %rdx
    0000001a: 	xorl	%esi, %esi
    0000001c: 	xorl	%ecx, %ecx
    0000001e: 	shrl	$0x3, %r11d
    00000022: 	movl	%r11d, %eax
    00000025: 	shlq	$0x6, %rax
    00000029: 	leaq	0x40(%rdi,%rax), %r8
    0000002e: 	xorl	%edi, %edi
    00000030: 	xorl	%eax, %eax
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp881:
    00000038: 	ucomisd	(%rdx), %xmm0
    0000003c: 	jp	.Ltmp873 # Offset: 60
    0000003e: 	jne	.Ltmp873 # Offset: 62
    00000040: 	addq	$0x1, %rax
.Ltmp873:
    00000044: 	ucomisd	0x8(%rdx), %xmm0
    00000049: 	jp	.Ltmp874 # Offset: 73
    0000004b: 	jne	.Ltmp874 # Offset: 75
    0000004d: 	addq	$0x1, %rcx
.Ltmp874:
    00000051: 	ucomisd	0x10(%rdx), %xmm0
    00000056: 	jp	.Ltmp875 # Offset: 86
    00000058: 	jne	.Ltmp875 # Offset: 88
    0000005a: 	addq	$0x1, %rdi
.Ltmp875:
    0000005e: 	ucomisd	0x18(%rdx), %xmm0
    00000063: 	jp	.Ltmp876 # Offset: 99
    00000065: 	jne	.Ltmp876 # Offset: 101
    00000067: 	addq	$0x1, %rsi
.Ltmp876:
    0000006b: 	ucomisd	0x20(%rdx), %xmm0
    00000070: 	jp	.Ltmp877 # Offset: 112
    00000072: 	jne	.Ltmp877 # Offset: 114
    00000074: 	addq	$0x1, %rax
.Ltmp877:
    00000078: 	ucomisd	0x28(%rdx), %xmm0
    0000007d: 	jp	.Ltmp878 # Offset: 125
    0000007f: 	jne	.Ltmp878 # Offset: 127
    00000081: 	addq	$0x1, %rcx
.Ltmp878:
    00000085: 	ucomisd	0x30(%rdx), %xmm0
    0000008a: 	jp	.Ltmp879 # Offset: 138
    0000008c: 	jne	.Ltmp879 # Offset: 140
    0000008e: 	addq	$0x1, %rdi
.Ltmp879:
    00000092: 	ucomisd	0x38(%rdx), %xmm0
    00000097: 	jp	.Ltmp880 # Offset: 151
    00000099: 	jne	.Ltmp880 # Offset: 153
    0000009b: 	addq	$0x1, %rsi
.Ltmp880:
    0000009f: 	addq	$0x40, %rdx
    000000a3: 	cmpq	%rdx, %r8
    000000a6: 	jne	.Ltmp881 # Offset: 166
    000000a8: 	addq	%rdi, %rcx
    000000ab: 	leal	0x8(,%r11,8), %r8d
    000000b3: 	addq	%rsi, %rcx
.Ltmp887:
    000000b6: 	cmpl	%r8d, %r10d
    000000b9: 	jle	.Ltmp882 # Offset: 185
    000000bf: 	movl	%r10d, %r11d
    000000c2: 	subl	%r8d, %r11d
    000000c5: 	leal	-0x1(%r11), %edx
    000000c9: 	cmpl	$0x1, %edx
    000000cc: 	jbe	.Ltmp883 # Offset: 204
    000000ce: 	movslq	%r8d, %rdx
    000000d1: 	movapd	%xmm0, %xmm3
    000000d5: 	pxor	%xmm2, %xmm2
    000000d9: 	leaq	(%r9,%rdx,8), %rsi
    000000dd: 	movl	%r11d, %edx
    000000e0: 	unpcklpd	%xmm3, %xmm3
    000000e4: 	shrl	%edx
    000000e6: 	leal	-0x1(%rdx), %edi
    000000e9: 	leaq	0x10(%rsi), %rdx
    000000ed: 	shlq	$0x4, %rdi
    000000f1: 	addq	%rdx, %rdi
    000000f4: 	jmp	.Ltmp884 # Offset: 244
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp885:
    00000100: 	addq	$0x10, %rdx
.Ltmp884:
    00000104: 	movupd	(%rsi), %xmm1
    00000108: 	movq	%rdx, %rsi
    0000010b: 	cmpeqpd	%xmm3, %xmm1
    00000110: 	psubq	%xmm1, %xmm2
    00000114: 	cmpq	%rdx, %rdi
    00000117: 	jne	.Ltmp885 # Offset: 279
    00000119: 	movdqa	%xmm2, %xmm1
    0000011d: 	psrldq	$0x8, %xmm1
    00000122: 	paddq	%xmm1, %xmm2
    00000126: 	movq	%xmm2, %rdx
    0000012b: 	addq	%rdx, %rax
    0000012e: 	movl	%r11d, %edx
    00000131: 	andl	$-0x2, %edx
    00000134: 	addl	%edx, %r8d
    00000137: 	cmpl	%edx, %r11d
    0000013a: 	je	.Ltmp882 # Offset: 314
.Ltmp883:
    0000013c: 	movslq	%r8d, %rdx
    0000013f: 	ucomisd	(%r9,%rdx,8), %xmm0
    00000145: 	leaq	(,%rdx,8), %rsi
    0000014d: 	jp	.Ltmp886 # Offset: 333
    0000014f: 	jne	.Ltmp886 # Offset: 335
    00000151: 	addq	$0x1, %rax
.Ltmp886:
    00000155: 	addl	$0x1, %r8d
    00000159: 	cmpl	%r8d, %r10d
    0000015c: 	jle	.Ltmp882 # Offset: 348
    0000015e: 	ucomisd	0x8(%r9,%rsi), %xmm0
    00000165: 	jp	.Ltmp882 # Offset: 357
    00000167: 	jne	.Ltmp882 # Offset: 359
    00000169: 	addq	$0x1, %rax
.Ltmp882:
    0000016d: 	addq	%rcx, %rax
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp872:
    00000178: 	xorl	%ecx, %ecx
    0000017a: 	xorl	%r8d, %r8d
    0000017d: 	xorl	%eax, %eax
    0000017f: 	jmp	.Ltmp887 # Offset: 383
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count7IdEmPT_iS0_"

Binary Function "_Z6count8IdEmPT_iS0_" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0xb6f0
  Size        : 0x1b4
  MaxSize     : 0x1c0
  Offset      : 0xb6f0
  Section     : .text
  Orc Section : .local.text._Z6count8IdEmPT_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r11
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movl	%esi, %ebx
    0000000d: 	cmpl	$0x7, %esi
    00000010: 	jle	.Ltmp888 # Offset: 16
    00000016: 	leal	-0x8(%rsi), %ebp
    00000019: 	movq	%rdi, %rdx
    0000001c: 	xorl	%r8d, %r8d
    0000001f: 	xorl	%r9d, %r9d
    00000022: 	shrl	$0x3, %ebp
    00000025: 	xorl	%ecx, %ecx
    00000027: 	movl	%ebp, %eax
    00000029: 	shlq	$0x6, %rax
    0000002d: 	leaq	0x40(%rdi,%rax), %r10
    00000032: 	xorl	%edi, %edi
    00000034: 	xorl	%eax, %eax
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp889:
    00000040: 	xorl	%esi, %esi
    00000042: 	ucomisd	(%rdx), %xmm0
    00000046: 	setnp	%sil
    0000004a: 	cmovneq	%rcx, %rsi
    0000004e: 	xorl	%r12d, %r12d
    00000051: 	ucomisd	0x20(%rdx), %xmm0
    00000056: 	setnp	%r12b
    0000005a: 	cmovneq	%rcx, %r12
    0000005e: 	addq	%r12, %rsi
    00000061: 	addq	%rsi, %rax
    00000064: 	xorl	%esi, %esi
    00000066: 	ucomisd	0x8(%rdx), %xmm0
    0000006b: 	setnp	%sil
    0000006f: 	cmovneq	%rcx, %rsi
    00000073: 	xorl	%r12d, %r12d
    00000076: 	ucomisd	0x28(%rdx), %xmm0
    0000007b: 	setnp	%r12b
    0000007f: 	cmovneq	%rcx, %r12
    00000083: 	addq	%r12, %rsi
    00000086: 	addq	%rsi, %rdi
    00000089: 	xorl	%esi, %esi
    0000008b: 	ucomisd	0x10(%rdx), %xmm0
    00000090: 	setnp	%sil
    00000094: 	cmovneq	%rcx, %rsi
    00000098: 	xorl	%r12d, %r12d
    0000009b: 	ucomisd	0x30(%rdx), %xmm0
    000000a0: 	setnp	%r12b
    000000a4: 	cmovneq	%rcx, %r12
    000000a8: 	addq	%r12, %rsi
    000000ab: 	addq	%rsi, %r9
    000000ae: 	xorl	%esi, %esi
    000000b0: 	ucomisd	0x18(%rdx), %xmm0
    000000b5: 	setnp	%sil
    000000b9: 	cmovneq	%rcx, %rsi
    000000bd: 	xorl	%r12d, %r12d
    000000c0: 	ucomisd	0x38(%rdx), %xmm0
    000000c5: 	setnp	%r12b
    000000c9: 	cmovneq	%rcx, %r12
    000000cd: 	addq	$0x40, %rdx
    000000d1: 	addq	%r12, %rsi
    000000d4: 	addq	%rsi, %r8
    000000d7: 	cmpq	%rdx, %r10
    000000da: 	jne	.Ltmp889 # Offset: 218
    000000e0: 	addq	%r9, %rdi
    000000e3: 	leal	0x8(,%rbp,8), %r10d
    000000eb: 	addq	%r8, %rdi
.Ltmp895:
    000000ee: 	cmpl	%r10d, %ebx
    000000f1: 	jle	.Ltmp890 # Offset: 241
    000000f7: 	movl	%ebx, %r8d
    000000fa: 	subl	%r10d, %r8d
    000000fd: 	leal	-0x1(%r8), %edx
    00000101: 	cmpl	$0x1, %edx
    00000104: 	jbe	.Ltmp891 # Offset: 260
    00000106: 	movslq	%r10d, %rdx
    00000109: 	movapd	%xmm0, %xmm3
    0000010d: 	pxor	%xmm2, %xmm2
    00000111: 	leaq	(%r11,%rdx,8), %rcx
    00000115: 	movl	%r8d, %edx
    00000118: 	unpcklpd	%xmm3, %xmm3
    0000011c: 	shrl	%edx
    0000011e: 	leal	-0x1(%rdx), %esi
    00000121: 	leaq	0x10(%rcx), %rdx
    00000125: 	shlq	$0x4, %rsi
    00000129: 	addq	%rdx, %rsi
    0000012c: 	jmp	.Ltmp892 # Offset: 300
    0000012e: 	nop # Size: 2
.Ltmp893:
    00000130: 	addq	$0x10, %rdx
.Ltmp892:
    00000134: 	movupd	(%rcx), %xmm1
    00000138: 	movq	%rdx, %rcx
    0000013b: 	cmpeqpd	%xmm3, %xmm1
    00000140: 	psubq	%xmm1, %xmm2
    00000144: 	cmpq	%rdx, %rsi
    00000147: 	jne	.Ltmp893 # Offset: 327
    00000149: 	movdqa	%xmm2, %xmm1
    0000014d: 	psrldq	$0x8, %xmm1
    00000152: 	paddq	%xmm1, %xmm2
    00000156: 	movq	%xmm2, %rdx
    0000015b: 	addq	%rdx, %rax
    0000015e: 	movl	%r8d, %edx
    00000161: 	andl	$-0x2, %edx
    00000164: 	addl	%edx, %r10d
    00000167: 	cmpl	%r8d, %edx
    0000016a: 	je	.Ltmp890 # Offset: 362
.Ltmp891:
    0000016c: 	movslq	%r10d, %rdx
    0000016f: 	ucomisd	(%r11,%rdx,8), %xmm0
    00000175: 	leaq	(,%rdx,8), %rcx
    0000017d: 	jp	.Ltmp894 # Offset: 381
    0000017f: 	jne	.Ltmp894 # Offset: 383
    00000181: 	addq	$0x1, %rax
.Ltmp894:
    00000185: 	addl	$0x1, %r10d
    00000189: 	cmpl	%ebx, %r10d
    0000018c: 	jge	.Ltmp890 # Offset: 396
    0000018e: 	ucomisd	0x8(%r11,%rcx), %xmm0
    00000195: 	jp	.Ltmp890 # Offset: 405
    00000197: 	jne	.Ltmp890 # Offset: 407
    00000199: 	addq	$0x1, %rax
.Ltmp890:
    0000019d: 	popq	%rbx
    0000019e: 	addq	%rdi, %rax
    000001a1: 	popq	%rbp
    000001a2: 	popq	%r12
    000001a4: 	retq # Offset: 420
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp888:
    000001a8: 	xorl	%edi, %edi
    000001aa: 	xorl	%r10d, %r10d
    000001ad: 	xorl	%eax, %eax
    000001af: 	jmp	.Ltmp895 # Offset: 431
DWARF CFI Instructions:
    <empty>
End of Function "_Z6count8IdEmPT_iS0_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 123
  State       : disassembled
  Address     : 0xb8b0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0xb8b0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp896 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp899:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp898:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp897 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp898 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp899 # Offset: 142
.Ltmp896:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp900 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp901 # Offset: 164
.Ltmp904:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp902 # Offset: 177
.Ltmp903:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp901 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp903 # Offset: 214
.Ltmp902:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp904 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp905 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp907:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp906 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp906:
    0000010a: 	addq	$0x20, %r13
.Ltmp901:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp907 # Offset: 275
.Ltmp905:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp908 # Offset: 283
.Ltmp914:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp909 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp910:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp910 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp909:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp897:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp898 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp899 # Offset: 389
    0000018b: 	jmp	.Ltmp896 # Offset: 395
.Ltmp900:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp905 # Offset: 405
.Ltmp913:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp911 # Offset: 422
.Ltmp912:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp905 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp912 # Offset: 463
.Ltmp911:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp913 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp914 # Offset: 482
.Ltmp908:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0xbab0
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0xbab0
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp915 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp916 # Offset: 63
.Ltmp915:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp917 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp918 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp922:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp919 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp920 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp918:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp921 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp922 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp917:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp923:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp922 # Offset: 248
.Ltmp916:
    000000fd: 	leaq	DATAat0x19008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp919:
    00000109: 	leaq	DATAat0x19184(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp920:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp921:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp923 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp924 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp924:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0xbc00
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0xbc00
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp925 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp926 # Offset: 152
.Ltmp937:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp927 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp928 # Offset: 204
.Ltmp927:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp929 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp930 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp932:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp931 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp930:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp932 # Offset: 339
    00000155: 	jmp	.Ltmp933 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp926:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp934 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp935 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp936 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp936:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp939:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp937 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp929:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp933:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp932 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp934:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp938 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp939 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp939 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp938:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp939 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp939 # Offset: 696
.Ltmp928:
    000002bd: 	leaq	DATAat0x19008(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp935:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp940 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp940:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp925:
    000002e0: 	leaq	DATAat0x191a0(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp931:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0xbf30
  Size        : 0x340
  MaxSize     : 0x340
  Offset      : 0xbf30
  Section     : .text
  Orc Section : .local.text._Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%edx, %r13d
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	movzwl	%r13w, %r13d
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	xorl	%ebx, %ebx
    00000020: 	subq	$0x68, %rsp
    00000024: 	movq	%rcx, (%rsp)
    00000028: 	leaq	0x40(%rsp), %rbp
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x58(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp941 # Offset: 81
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp948:
    00000060: 	movq	(%rsp), %rax
    00000064: 	movl	%r13d, %edx
    00000067: 	movl	%r14d, %esi
    0000006a: 	movq	%r15, %rdi
    0000006d: 	callq	*%rax # Offset: 109
    0000006f: 	movq	(%r12), %r9
    00000073: 	movq	0x8(%r12), %r8
    00000078: 	movq	%rbp, 0x30(%rsp)
    0000007d: 	movq	%rax, %rcx
    00000080: 	movq	%r9, %rax
    00000083: 	addq	%r8, %rax
    00000086: 	je	.Ltmp942 # Offset: 134
    00000088: 	testq	%r9, %r9
    0000008b: 	je	.Ltmp943 # Offset: 139
.Ltmp942:
    00000091: 	movq	%r8, 0x28(%rsp)
    00000096: 	cmpq	$0xf, %r8
    0000009a: 	ja	.Ltmp944 # Offset: 154
    000000a0: 	cmpq	$0x1, %r8
    000000a4: 	jne	.Ltmp945 # Offset: 164
    000000aa: 	movzbl	(%r9), %eax
    000000ae: 	movb	%al, 0x40(%rsp)
    000000b2: 	movq	%rbp, %rax
.Ltmp956:
    000000b5: 	movq	%r8, 0x38(%rsp)
    000000ba: 	movb	$0x0, (%rax,%r8)
    000000bf: 	cmpq	%rcx, gCount(%rip)
    000000c6: 	je	.Ltmp946 # Offset: 198
    000000c8: 	movq	0x30(%rsp), %rdx
    000000cd: 	leaq	DATAat0x191d0(%rip), %rsi
    000000d4: 	movl	$0x1, %edi
    000000d9: 	xorl	%eax, %eax
    000000db: 	callq	__printf_chk@PLT # Offset: 219
.Ltmp946:
    000000e0: 	movq	0x30(%rsp), %rdi
    000000e5: 	cmpq	%rbp, %rdi
    000000e8: 	je	.Ltmp947 # Offset: 232
    000000ee: 	movq	0x40(%rsp), %rax
    000000f3: 	addl	$0x1, %ebx
    000000f6: 	leaq	0x1(%rax), %rsi
    000000fa: 	callq	_ZdlPvm@PLT # Offset: 250
    000000ff: 	cmpl	%ebx, iterations(%rip)
    00000105: 	jg	.Ltmp948 # Offset: 261
.Ltmp941:
    0000010b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000112: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000119: 	subq	$0x20, %rax
    0000011d: 	cmpq	%rax, %rbx
    00000120: 	je	.Ltmp949 # Offset: 288
    00000126: 	leaq	0x10(%rbx), %rdi
    0000012a: 	movq	%rdi, (%rbx)
    0000012d: 	movq	(%r12), %rbp
    00000131: 	movq	0x8(%r12), %r12
    00000136: 	movq	%rbp, %rax
    00000139: 	addq	%r12, %rax
    0000013c: 	je	.Ltmp950 # Offset: 316
    0000013e: 	testq	%rbp, %rbp
    00000141: 	je	.Ltmp943 # Offset: 321
.Ltmp950:
    00000147: 	movq	%r12, 0x28(%rsp)
    0000014c: 	cmpq	$0xf, %r12
    00000150: 	ja	.Ltmp951 # Offset: 336
    00000156: 	cmpq	$0x1, %r12
    0000015a: 	jne	.Ltmp952 # Offset: 346
    00000160: 	movzbl	(%rbp), %eax
    00000164: 	movb	%al, 0x10(%rbx)
.Ltmp957:
    00000167: 	movq	%r12, 0x8(%rbx)
    0000016b: 	movb	$0x0, (%rdi,%r12)
    00000170: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000177: 	addq	$0x20, %rax
    0000017b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp959:
    00000182: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000189: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000190: 	je	.Ltmp953 # Offset: 400
.Ltmp958:
    00000196: 	movq	-0x20(%rax), %rbp
    0000019a: 	callq	clock@PLT # Offset: 410
    0000019f: 	movq	%rax, end_time(%rip)
    000001a6: 	movq	0x58(%rsp), %rdx
    000001ab: 	subq	%fs:0x28, %rdx
    000001b4: 	jne	.Ltmp954 # Offset: 436
    000001ba: 	subq	start_time(%rip), %rax
    000001c1: 	pxor	%xmm0, %xmm0
    000001c5: 	movq	%rbp, %rdi
    000001c8: 	cvtsi2sd	%rax, %xmm0
    000001cd: 	divsd	DATAat0x19290(%rip), %xmm0
    000001d5: 	addq	$0x68, %rsp
    000001d9: 	popq	%rbx
    000001da: 	popq	%rbp
    000001db: 	popq	%r12
    000001dd: 	popq	%r13
    000001df: 	popq	%r14
    000001e1: 	popq	%r15
    000001e3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 483
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp947:
    000001f0: 	addl	$0x1, %ebx
    000001f3: 	cmpl	%ebx, iterations(%rip)
    000001f9: 	jg	.Ltmp948 # Offset: 505
    000001ff: 	jmp	.Ltmp941 # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp945:
    00000208: 	testq	%r8, %r8
    0000020b: 	jne	.Ltmp955 # Offset: 523
    00000211: 	movq	%rbp, %rax
    00000214: 	jmp	.Ltmp956 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp944:
    00000220: 	leaq	0x30(%rsp), %rdi
    00000225: 	leaq	0x28(%rsp), %rsi
    0000022a: 	xorl	%edx, %edx
    0000022c: 	movq	%r8, 0x18(%rsp)
    00000231: 	movq	%r9, 0x10(%rsp)
    00000236: 	movq	%rcx, 0x8(%rsp)
    0000023b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 571
    00000240: 	movq	0x8(%rsp), %rcx
    00000245: 	movq	0x10(%rsp), %r9
    0000024a: 	movq	%rax, 0x30(%rsp)
    0000024f: 	movq	%rax, %rdi
    00000252: 	movq	0x28(%rsp), %rax
    00000257: 	movq	0x18(%rsp), %r8
    0000025c: 	movq	%rax, 0x40(%rsp)
.Ltmp961:
    00000261: 	movq	%r8, %rdx
    00000264: 	movq	%r9, %rsi
    00000267: 	movq	%rcx, 0x8(%rsp)
    0000026c: 	callq	memcpy@PLT # Offset: 620
    00000271: 	movq	0x28(%rsp), %r8
    00000276: 	movq	0x30(%rsp), %rax
    0000027b: 	movq	0x8(%rsp), %rcx
    00000280: 	jmp	.Ltmp956 # Offset: 640
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp951:
    00000288: 	movq	%rbx, %rdi
    0000028b: 	leaq	0x28(%rsp), %rsi
    00000290: 	xorl	%edx, %edx
    00000292: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 658
    00000297: 	movq	%rax, (%rbx)
    0000029a: 	movq	%rax, %rdi
    0000029d: 	movq	0x28(%rsp), %rax
    000002a2: 	movq	%rax, 0x10(%rbx)
.Ltmp960:
    000002a6: 	movq	%r12, %rdx
    000002a9: 	movq	%rbp, %rsi
    000002ac: 	callq	memcpy@PLT # Offset: 684
    000002b1: 	movq	0x28(%rsp), %r12
    000002b6: 	movq	(%rbx), %rdi
    000002b9: 	jmp	.Ltmp957 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp953:
    000002c0: 	movq	-0x8(%rdx), %rax
    000002c4: 	addq	$0x200, %rax
    000002ca: 	jmp	.Ltmp958 # Offset: 714
    000002cf: 	nop # Size: 1
.Ltmp949:
    000002d0: 	movq	%r12, %rsi
    000002d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 730
    000002df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002e6: 	jmp	.Ltmp959 # Offset: 742
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp952:
    000002f0: 	testq	%r12, %r12
    000002f3: 	je	.Ltmp957 # Offset: 755
    000002f9: 	jmp	.Ltmp960 # Offset: 761
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp943:
    00000300: 	leaq	DATAat0x19008(%rip), %rdi
    00000307: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 775
.Ltmp955:
    0000030c: 	movq	%rbp, %rdi
    0000030f: 	jmp	.Ltmp961 # Offset: 783
.Ltmp954:
    00000314: 	callq	__stack_chk_fail@PLT # Offset: 788
    00000319: 	endbr64
    0000031d: 	movq	%rax, %r12
    00000320: 	movq	0x30(%rsp), %rdi
    00000325: 	cmpq	%rbp, %rdi
    00000328: 	je	.Ltmp962 # Offset: 808
    0000032a: 	movq	0x40(%rsp), %rax
    0000032f: 	leaq	0x1(%rax), %rsi
    00000333: 	callq	_ZdlPvm@PLT # Offset: 819
.Ltmp962:
    00000338: 	movq	%r12, %rdi
    0000033b: 	callq	_Unwind_Resume@PLT # Offset: 827
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0xc270
  Size        : 0x330
  MaxSize     : 0x330
  Offset      : 0xc270
  Section     : .text
  Orc Section : .local.text._Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rcx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	xorl	%ebx, %ebx
    00000019: 	subq	$0x68, %rsp
    0000001d: 	movq	%rdx, 0x8(%rsp)
    00000022: 	leaq	0x40(%rsp), %rbp
    00000027: 	movsd	%xmm0, (%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x58(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	callq	clock@PLT # Offset: 60
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp963 # Offset: 80
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp970:
    00000060: 	movsd	(%rsp), %xmm0
    00000065: 	movq	0x8(%rsp), %rax
    0000006a: 	movl	%r14d, %esi
    0000006d: 	movq	%r15, %rdi
    00000070: 	callq	*%rax # Offset: 112
    00000072: 	movq	(%r12), %r9
    00000076: 	movq	0x8(%r12), %r8
    0000007b: 	movq	%rbp, 0x30(%rsp)
    00000080: 	movq	%rax, %r13
    00000083: 	movq	%r9, %rax
    00000086: 	addq	%r8, %rax
    00000089: 	je	.Ltmp964 # Offset: 137
    0000008b: 	testq	%r9, %r9
    0000008e: 	je	.Ltmp965 # Offset: 142
.Ltmp964:
    00000094: 	movq	%r8, 0x28(%rsp)
    00000099: 	cmpq	$0xf, %r8
    0000009d: 	ja	.Ltmp966 # Offset: 157
    000000a3: 	cmpq	$0x1, %r8
    000000a7: 	jne	.Ltmp967 # Offset: 167
    000000ad: 	movzbl	(%r9), %eax
    000000b1: 	movb	%al, 0x40(%rsp)
    000000b5: 	movq	%rbp, %rax
.Ltmp978:
    000000b8: 	movq	%r8, 0x38(%rsp)
    000000bd: 	movb	$0x0, (%rax,%r8)
    000000c2: 	cmpq	%r13, gCount(%rip)
    000000c9: 	je	.Ltmp968 # Offset: 201
    000000cb: 	movq	0x30(%rsp), %rdx
    000000d0: 	leaq	DATAat0x191d0(%rip), %rsi
    000000d7: 	movl	$0x1, %edi
    000000dc: 	xorl	%eax, %eax
    000000de: 	callq	__printf_chk@PLT # Offset: 222
.Ltmp968:
    000000e3: 	movq	0x30(%rsp), %rdi
    000000e8: 	cmpq	%rbp, %rdi
    000000eb: 	je	.Ltmp969 # Offset: 235
    000000f1: 	movq	0x40(%rsp), %rax
    000000f6: 	addl	$0x1, %ebx
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpl	%ebx, iterations(%rip)
    00000108: 	jg	.Ltmp970 # Offset: 264
.Ltmp963:
    0000010e: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000115: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000011c: 	subq	$0x20, %rax
    00000120: 	cmpq	%rax, %rbx
    00000123: 	je	.Ltmp971 # Offset: 291
    00000129: 	leaq	0x10(%rbx), %rdi
    0000012d: 	movq	%rdi, (%rbx)
    00000130: 	movq	(%r12), %rbp
    00000134: 	movq	0x8(%r12), %r12
    00000139: 	movq	%rbp, %rax
    0000013c: 	addq	%r12, %rax
    0000013f: 	je	.Ltmp972 # Offset: 319
    00000141: 	testq	%rbp, %rbp
    00000144: 	je	.Ltmp965 # Offset: 324
.Ltmp972:
    0000014a: 	movq	%r12, 0x28(%rsp)
    0000014f: 	cmpq	$0xf, %r12
    00000153: 	ja	.Ltmp973 # Offset: 339
    00000159: 	cmpq	$0x1, %r12
    0000015d: 	jne	.Ltmp974 # Offset: 349
    00000163: 	movzbl	(%rbp), %eax
    00000167: 	movb	%al, 0x10(%rbx)
.Ltmp979:
    0000016a: 	movq	%r12, 0x8(%rbx)
    0000016e: 	movb	$0x0, (%rdi,%r12)
    00000173: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000017a: 	addq	$0x20, %rax
    0000017e: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp981:
    00000185: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000018c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000193: 	je	.Ltmp975 # Offset: 403
.Ltmp980:
    00000199: 	movq	-0x20(%rax), %rbp
    0000019d: 	callq	clock@PLT # Offset: 413
    000001a2: 	movq	%rax, end_time(%rip)
    000001a9: 	movq	0x58(%rsp), %rdx
    000001ae: 	subq	%fs:0x28, %rdx
    000001b7: 	jne	.Ltmp976 # Offset: 439
    000001bd: 	subq	start_time(%rip), %rax
    000001c4: 	pxor	%xmm0, %xmm0
    000001c8: 	movq	%rbp, %rdi
    000001cb: 	cvtsi2sd	%rax, %xmm0
    000001d0: 	divsd	DATAat0x19290(%rip), %xmm0
    000001d8: 	addq	$0x68, %rsp
    000001dc: 	popq	%rbx
    000001dd: 	popq	%rbp
    000001de: 	popq	%r12
    000001e0: 	popq	%r13
    000001e2: 	popq	%r14
    000001e4: 	popq	%r15
    000001e6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 486
    000001eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp969:
    000001f0: 	addl	$0x1, %ebx
    000001f3: 	cmpl	%ebx, iterations(%rip)
    000001f9: 	jg	.Ltmp970 # Offset: 505
    000001ff: 	jmp	.Ltmp963 # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp967:
    00000208: 	testq	%r8, %r8
    0000020b: 	jne	.Ltmp977 # Offset: 523
    00000211: 	movq	%rbp, %rax
    00000214: 	jmp	.Ltmp978 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp966:
    00000220: 	leaq	0x30(%rsp), %rdi
    00000225: 	leaq	0x28(%rsp), %rsi
    0000022a: 	xorl	%edx, %edx
    0000022c: 	movq	%r8, 0x18(%rsp)
    00000231: 	movq	%r9, 0x10(%rsp)
    00000236: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 566
    0000023b: 	movq	0x10(%rsp), %r9
    00000240: 	movq	0x18(%rsp), %r8
    00000245: 	movq	%rax, 0x30(%rsp)
    0000024a: 	movq	%rax, %rdi
    0000024d: 	movq	0x28(%rsp), %rax
    00000252: 	movq	%rax, 0x40(%rsp)
.Ltmp983:
    00000257: 	movq	%r8, %rdx
    0000025a: 	movq	%r9, %rsi
    0000025d: 	callq	memcpy@PLT # Offset: 605
    00000262: 	movq	0x28(%rsp), %r8
    00000267: 	movq	0x30(%rsp), %rax
    0000026c: 	jmp	.Ltmp978 # Offset: 620
    00000271: 	nopl	(%rax) # Size: 7
.Ltmp973:
    00000278: 	movq	%rbx, %rdi
    0000027b: 	leaq	0x28(%rsp), %rsi
    00000280: 	xorl	%edx, %edx
    00000282: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 642
    00000287: 	movq	%rax, (%rbx)
    0000028a: 	movq	%rax, %rdi
    0000028d: 	movq	0x28(%rsp), %rax
    00000292: 	movq	%rax, 0x10(%rbx)
.Ltmp982:
    00000296: 	movq	%r12, %rdx
    00000299: 	movq	%rbp, %rsi
    0000029c: 	callq	memcpy@PLT # Offset: 668
    000002a1: 	movq	0x28(%rsp), %r12
    000002a6: 	movq	(%rbx), %rdi
    000002a9: 	jmp	.Ltmp979 # Offset: 681
    000002ae: 	nop # Size: 2
.Ltmp975:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp980 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp971:
    000002c0: 	movq	%r12, %rsi
    000002c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 714
    000002cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d6: 	jmp	.Ltmp981 # Offset: 726
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp974:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp979 # Offset: 739
    000002e9: 	jmp	.Ltmp982 # Offset: 745
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp965:
    000002f0: 	leaq	DATAat0x19008(%rip), %rdi
    000002f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 759
.Ltmp977:
    000002fc: 	movq	%rbp, %rdi
    000002ff: 	jmp	.Ltmp983 # Offset: 767
.Ltmp976:
    00000304: 	callq	__stack_chk_fail@PLT # Offset: 772
    00000309: 	endbr64
    0000030d: 	movq	%rax, %r12
    00000310: 	movq	0x30(%rsp), %rdi
    00000315: 	cmpq	%rbp, %rdi
    00000318: 	je	.Ltmp984 # Offset: 792
    0000031a: 	movq	0x40(%rsp), %rax
    0000031f: 	leaq	0x1(%rax), %rsi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
.Ltmp984:
    00000328: 	movq	%r12, %rdi
    0000032b: 	callq	_Unwind_Resume@PLT # Offset: 811
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0xc5a0
  Size        : 0x340
  MaxSize     : 0x340
  Offset      : 0xc5a0
  Section     : .text
  Orc Section : .local.text._Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%edx, %r13d
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	movswl	%r13w, %r13d
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	xorl	%ebx, %ebx
    00000020: 	subq	$0x68, %rsp
    00000024: 	movq	%rcx, (%rsp)
    00000028: 	leaq	0x40(%rsp), %rbp
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x58(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp985 # Offset: 81
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp992:
    00000060: 	movq	(%rsp), %rax
    00000064: 	movl	%r13d, %edx
    00000067: 	movl	%r14d, %esi
    0000006a: 	movq	%r15, %rdi
    0000006d: 	callq	*%rax # Offset: 109
    0000006f: 	movq	(%r12), %r9
    00000073: 	movq	0x8(%r12), %r8
    00000078: 	movq	%rbp, 0x30(%rsp)
    0000007d: 	movq	%rax, %rcx
    00000080: 	movq	%r9, %rax
    00000083: 	addq	%r8, %rax
    00000086: 	je	.Ltmp986 # Offset: 134
    00000088: 	testq	%r9, %r9
    0000008b: 	je	.Ltmp987 # Offset: 139
.Ltmp986:
    00000091: 	movq	%r8, 0x28(%rsp)
    00000096: 	cmpq	$0xf, %r8
    0000009a: 	ja	.Ltmp988 # Offset: 154
    000000a0: 	cmpq	$0x1, %r8
    000000a4: 	jne	.Ltmp989 # Offset: 164
    000000aa: 	movzbl	(%r9), %eax
    000000ae: 	movb	%al, 0x40(%rsp)
    000000b2: 	movq	%rbp, %rax
.Ltmp1000:
    000000b5: 	movq	%r8, 0x38(%rsp)
    000000ba: 	movb	$0x0, (%rax,%r8)
    000000bf: 	cmpq	%rcx, gCount(%rip)
    000000c6: 	je	.Ltmp990 # Offset: 198
    000000c8: 	movq	0x30(%rsp), %rdx
    000000cd: 	leaq	DATAat0x191d0(%rip), %rsi
    000000d4: 	movl	$0x1, %edi
    000000d9: 	xorl	%eax, %eax
    000000db: 	callq	__printf_chk@PLT # Offset: 219
.Ltmp990:
    000000e0: 	movq	0x30(%rsp), %rdi
    000000e5: 	cmpq	%rbp, %rdi
    000000e8: 	je	.Ltmp991 # Offset: 232
    000000ee: 	movq	0x40(%rsp), %rax
    000000f3: 	addl	$0x1, %ebx
    000000f6: 	leaq	0x1(%rax), %rsi
    000000fa: 	callq	_ZdlPvm@PLT # Offset: 250
    000000ff: 	cmpl	%ebx, iterations(%rip)
    00000105: 	jg	.Ltmp992 # Offset: 261
.Ltmp985:
    0000010b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000112: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000119: 	subq	$0x20, %rax
    0000011d: 	cmpq	%rax, %rbx
    00000120: 	je	.Ltmp993 # Offset: 288
    00000126: 	leaq	0x10(%rbx), %rdi
    0000012a: 	movq	%rdi, (%rbx)
    0000012d: 	movq	(%r12), %rbp
    00000131: 	movq	0x8(%r12), %r12
    00000136: 	movq	%rbp, %rax
    00000139: 	addq	%r12, %rax
    0000013c: 	je	.Ltmp994 # Offset: 316
    0000013e: 	testq	%rbp, %rbp
    00000141: 	je	.Ltmp987 # Offset: 321
.Ltmp994:
    00000147: 	movq	%r12, 0x28(%rsp)
    0000014c: 	cmpq	$0xf, %r12
    00000150: 	ja	.Ltmp995 # Offset: 336
    00000156: 	cmpq	$0x1, %r12
    0000015a: 	jne	.Ltmp996 # Offset: 346
    00000160: 	movzbl	(%rbp), %eax
    00000164: 	movb	%al, 0x10(%rbx)
.Ltmp1001:
    00000167: 	movq	%r12, 0x8(%rbx)
    0000016b: 	movb	$0x0, (%rdi,%r12)
    00000170: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000177: 	addq	$0x20, %rax
    0000017b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1003:
    00000182: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000189: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000190: 	je	.Ltmp997 # Offset: 400
.Ltmp1002:
    00000196: 	movq	-0x20(%rax), %rbp
    0000019a: 	callq	clock@PLT # Offset: 410
    0000019f: 	movq	%rax, end_time(%rip)
    000001a6: 	movq	0x58(%rsp), %rdx
    000001ab: 	subq	%fs:0x28, %rdx
    000001b4: 	jne	.Ltmp998 # Offset: 436
    000001ba: 	subq	start_time(%rip), %rax
    000001c1: 	pxor	%xmm0, %xmm0
    000001c5: 	movq	%rbp, %rdi
    000001c8: 	cvtsi2sd	%rax, %xmm0
    000001cd: 	divsd	DATAat0x19290(%rip), %xmm0
    000001d5: 	addq	$0x68, %rsp
    000001d9: 	popq	%rbx
    000001da: 	popq	%rbp
    000001db: 	popq	%r12
    000001dd: 	popq	%r13
    000001df: 	popq	%r14
    000001e1: 	popq	%r15
    000001e3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 483
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp991:
    000001f0: 	addl	$0x1, %ebx
    000001f3: 	cmpl	%ebx, iterations(%rip)
    000001f9: 	jg	.Ltmp992 # Offset: 505
    000001ff: 	jmp	.Ltmp985 # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp989:
    00000208: 	testq	%r8, %r8
    0000020b: 	jne	.Ltmp999 # Offset: 523
    00000211: 	movq	%rbp, %rax
    00000214: 	jmp	.Ltmp1000 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp988:
    00000220: 	leaq	0x30(%rsp), %rdi
    00000225: 	leaq	0x28(%rsp), %rsi
    0000022a: 	xorl	%edx, %edx
    0000022c: 	movq	%r8, 0x18(%rsp)
    00000231: 	movq	%r9, 0x10(%rsp)
    00000236: 	movq	%rcx, 0x8(%rsp)
    0000023b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 571
    00000240: 	movq	0x8(%rsp), %rcx
    00000245: 	movq	0x10(%rsp), %r9
    0000024a: 	movq	%rax, 0x30(%rsp)
    0000024f: 	movq	%rax, %rdi
    00000252: 	movq	0x28(%rsp), %rax
    00000257: 	movq	0x18(%rsp), %r8
    0000025c: 	movq	%rax, 0x40(%rsp)
.Ltmp1005:
    00000261: 	movq	%r8, %rdx
    00000264: 	movq	%r9, %rsi
    00000267: 	movq	%rcx, 0x8(%rsp)
    0000026c: 	callq	memcpy@PLT # Offset: 620
    00000271: 	movq	0x28(%rsp), %r8
    00000276: 	movq	0x30(%rsp), %rax
    0000027b: 	movq	0x8(%rsp), %rcx
    00000280: 	jmp	.Ltmp1000 # Offset: 640
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp995:
    00000288: 	movq	%rbx, %rdi
    0000028b: 	leaq	0x28(%rsp), %rsi
    00000290: 	xorl	%edx, %edx
    00000292: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 658
    00000297: 	movq	%rax, (%rbx)
    0000029a: 	movq	%rax, %rdi
    0000029d: 	movq	0x28(%rsp), %rax
    000002a2: 	movq	%rax, 0x10(%rbx)
.Ltmp1004:
    000002a6: 	movq	%r12, %rdx
    000002a9: 	movq	%rbp, %rsi
    000002ac: 	callq	memcpy@PLT # Offset: 684
    000002b1: 	movq	0x28(%rsp), %r12
    000002b6: 	movq	(%rbx), %rdi
    000002b9: 	jmp	.Ltmp1001 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp997:
    000002c0: 	movq	-0x8(%rdx), %rax
    000002c4: 	addq	$0x200, %rax
    000002ca: 	jmp	.Ltmp1002 # Offset: 714
    000002cf: 	nop # Size: 1
.Ltmp993:
    000002d0: 	movq	%r12, %rsi
    000002d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 730
    000002df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002e6: 	jmp	.Ltmp1003 # Offset: 742
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp996:
    000002f0: 	testq	%r12, %r12
    000002f3: 	je	.Ltmp1001 # Offset: 755
    000002f9: 	jmp	.Ltmp1004 # Offset: 761
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp987:
    00000300: 	leaq	DATAat0x19008(%rip), %rdi
    00000307: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 775
.Ltmp999:
    0000030c: 	movq	%rbp, %rdi
    0000030f: 	jmp	.Ltmp1005 # Offset: 783
.Ltmp998:
    00000314: 	callq	__stack_chk_fail@PLT # Offset: 788
    00000319: 	endbr64
    0000031d: 	movq	%rax, %r12
    00000320: 	movq	0x30(%rsp), %rdi
    00000325: 	cmpq	%rbp, %rdi
    00000328: 	je	.Ltmp1006 # Offset: 808
    0000032a: 	movq	0x40(%rsp), %rax
    0000032f: 	leaq	0x1(%rax), %rsi
    00000333: 	callq	_ZdlPvm@PLT # Offset: 819
.Ltmp1006:
    00000338: 	movq	%r12, %rdi
    0000033b: 	callq	_Unwind_Resume@PLT # Offset: 827
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0xc8e0
  Size        : 0x330
  MaxSize     : 0x330
  Offset      : 0xc8e0
  Section     : .text
  Orc Section : .local.text._Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	xorl	%ebx, %ebx
    0000001c: 	subq	$0x68, %rsp
    00000020: 	movq	%rcx, (%rsp)
    00000024: 	leaq	0x40(%rsp), %rbp
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x58(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	callq	clock@PLT # Offset: 57
    0000003e: 	movq	%rax, start_time(%rip)
    00000045: 	movl	iterations(%rip), %eax
    0000004b: 	testl	%eax, %eax
    0000004d: 	jle	.Ltmp1007 # Offset: 77
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1014:
    00000058: 	movq	(%rsp), %rax
    0000005c: 	movq	%r13, %rdx
    0000005f: 	movl	%r14d, %esi
    00000062: 	movq	%r15, %rdi
    00000065: 	callq	*%rax # Offset: 101
    00000067: 	movq	(%r12), %r9
    0000006b: 	movq	0x8(%r12), %r8
    00000070: 	movq	%rbp, 0x30(%rsp)
    00000075: 	movq	%rax, %rcx
    00000078: 	movq	%r9, %rax
    0000007b: 	addq	%r8, %rax
    0000007e: 	je	.Ltmp1008 # Offset: 126
    00000080: 	testq	%r9, %r9
    00000083: 	je	.Ltmp1009 # Offset: 131
.Ltmp1008:
    00000089: 	movq	%r8, 0x28(%rsp)
    0000008e: 	cmpq	$0xf, %r8
    00000092: 	ja	.Ltmp1010 # Offset: 146
    00000098: 	cmpq	$0x1, %r8
    0000009c: 	jne	.Ltmp1011 # Offset: 156
    000000a2: 	movzbl	(%r9), %eax
    000000a6: 	movb	%al, 0x40(%rsp)
    000000aa: 	movq	%rbp, %rax
.Ltmp1022:
    000000ad: 	movq	%r8, 0x38(%rsp)
    000000b2: 	movb	$0x0, (%rax,%r8)
    000000b7: 	cmpq	%rcx, gCount(%rip)
    000000be: 	je	.Ltmp1012 # Offset: 190
    000000c0: 	movq	0x30(%rsp), %rdx
    000000c5: 	leaq	DATAat0x191d0(%rip), %rsi
    000000cc: 	movl	$0x1, %edi
    000000d1: 	xorl	%eax, %eax
    000000d3: 	callq	__printf_chk@PLT # Offset: 211
.Ltmp1012:
    000000d8: 	movq	0x30(%rsp), %rdi
    000000dd: 	cmpq	%rbp, %rdi
    000000e0: 	je	.Ltmp1013 # Offset: 224
    000000e6: 	movq	0x40(%rsp), %rax
    000000eb: 	addl	$0x1, %ebx
    000000ee: 	leaq	0x1(%rax), %rsi
    000000f2: 	callq	_ZdlPvm@PLT # Offset: 242
    000000f7: 	cmpl	%ebx, iterations(%rip)
    000000fd: 	jg	.Ltmp1014 # Offset: 253
.Ltmp1007:
    00000103: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000010a: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000111: 	subq	$0x20, %rax
    00000115: 	cmpq	%rax, %rbx
    00000118: 	je	.Ltmp1015 # Offset: 280
    0000011e: 	leaq	0x10(%rbx), %rdi
    00000122: 	movq	%rdi, (%rbx)
    00000125: 	movq	(%r12), %rbp
    00000129: 	movq	0x8(%r12), %r12
    0000012e: 	movq	%rbp, %rax
    00000131: 	addq	%r12, %rax
    00000134: 	je	.Ltmp1016 # Offset: 308
    00000136: 	testq	%rbp, %rbp
    00000139: 	je	.Ltmp1009 # Offset: 313
.Ltmp1016:
    0000013f: 	movq	%r12, 0x28(%rsp)
    00000144: 	cmpq	$0xf, %r12
    00000148: 	ja	.Ltmp1017 # Offset: 328
    0000014e: 	cmpq	$0x1, %r12
    00000152: 	jne	.Ltmp1018 # Offset: 338
    00000158: 	movzbl	(%rbp), %eax
    0000015c: 	movb	%al, 0x10(%rbx)
.Ltmp1023:
    0000015f: 	movq	%r12, 0x8(%rbx)
    00000163: 	movb	$0x0, (%rdi,%r12)
    00000168: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000016f: 	addq	$0x20, %rax
    00000173: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1025:
    0000017a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000181: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000188: 	je	.Ltmp1019 # Offset: 392
.Ltmp1024:
    0000018e: 	movq	-0x20(%rax), %rbp
    00000192: 	callq	clock@PLT # Offset: 402
    00000197: 	movq	%rax, end_time(%rip)
    0000019e: 	movq	0x58(%rsp), %rdx
    000001a3: 	subq	%fs:0x28, %rdx
    000001ac: 	jne	.Ltmp1020 # Offset: 428
    000001b2: 	subq	start_time(%rip), %rax
    000001b9: 	pxor	%xmm0, %xmm0
    000001bd: 	movq	%rbp, %rdi
    000001c0: 	cvtsi2sd	%rax, %xmm0
    000001c5: 	divsd	DATAat0x19290(%rip), %xmm0
    000001cd: 	addq	$0x68, %rsp
    000001d1: 	popq	%rbx
    000001d2: 	popq	%rbp
    000001d3: 	popq	%r12
    000001d5: 	popq	%r13
    000001d7: 	popq	%r14
    000001d9: 	popq	%r15
    000001db: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 475
.Ltmp1013:
    000001e0: 	addl	$0x1, %ebx
    000001e3: 	cmpl	%ebx, iterations(%rip)
    000001e9: 	jg	.Ltmp1014 # Offset: 489
    000001ef: 	jmp	.Ltmp1007 # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp1011:
    000001f8: 	testq	%r8, %r8
    000001fb: 	jne	.Ltmp1021 # Offset: 507
    00000201: 	movq	%rbp, %rax
    00000204: 	jmp	.Ltmp1022 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1010:
    00000210: 	leaq	0x30(%rsp), %rdi
    00000215: 	leaq	0x28(%rsp), %rsi
    0000021a: 	xorl	%edx, %edx
    0000021c: 	movq	%r8, 0x18(%rsp)
    00000221: 	movq	%r9, 0x10(%rsp)
    00000226: 	movq	%rcx, 0x8(%rsp)
    0000022b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 555
    00000230: 	movq	0x8(%rsp), %rcx
    00000235: 	movq	0x10(%rsp), %r9
    0000023a: 	movq	%rax, 0x30(%rsp)
    0000023f: 	movq	%rax, %rdi
    00000242: 	movq	0x28(%rsp), %rax
    00000247: 	movq	0x18(%rsp), %r8
    0000024c: 	movq	%rax, 0x40(%rsp)
.Ltmp1027:
    00000251: 	movq	%r8, %rdx
    00000254: 	movq	%r9, %rsi
    00000257: 	movq	%rcx, 0x8(%rsp)
    0000025c: 	callq	memcpy@PLT # Offset: 604
    00000261: 	movq	0x28(%rsp), %r8
    00000266: 	movq	0x30(%rsp), %rax
    0000026b: 	movq	0x8(%rsp), %rcx
    00000270: 	jmp	.Ltmp1022 # Offset: 624
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp1017:
    00000278: 	movq	%rbx, %rdi
    0000027b: 	leaq	0x28(%rsp), %rsi
    00000280: 	xorl	%edx, %edx
    00000282: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 642
    00000287: 	movq	%rax, (%rbx)
    0000028a: 	movq	%rax, %rdi
    0000028d: 	movq	0x28(%rsp), %rax
    00000292: 	movq	%rax, 0x10(%rbx)
.Ltmp1026:
    00000296: 	movq	%r12, %rdx
    00000299: 	movq	%rbp, %rsi
    0000029c: 	callq	memcpy@PLT # Offset: 668
    000002a1: 	movq	0x28(%rsp), %r12
    000002a6: 	movq	(%rbx), %rdi
    000002a9: 	jmp	.Ltmp1023 # Offset: 681
    000002ae: 	nop # Size: 2
.Ltmp1019:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp1024 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1015:
    000002c0: 	movq	%r12, %rsi
    000002c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 714
    000002cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d6: 	jmp	.Ltmp1025 # Offset: 726
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1018:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp1023 # Offset: 739
    000002e9: 	jmp	.Ltmp1026 # Offset: 745
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1009:
    000002f0: 	leaq	DATAat0x19008(%rip), %rdi
    000002f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 759
.Ltmp1021:
    000002fc: 	movq	%rbp, %rdi
    000002ff: 	jmp	.Ltmp1027 # Offset: 767
.Ltmp1020:
    00000304: 	callq	__stack_chk_fail@PLT # Offset: 772
    00000309: 	endbr64
    0000030d: 	movq	%rax, %r12
    00000310: 	movq	0x30(%rsp), %rdi
    00000315: 	cmpq	%rbp, %rdi
    00000318: 	je	.Ltmp1028 # Offset: 792
    0000031a: 	movq	0x40(%rsp), %rax
    0000031f: 	leaq	0x1(%rax), %rsi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
.Ltmp1028:
    00000328: 	movq	%r12, %rdi
    0000032b: 	callq	_Unwind_Resume@PLT # Offset: 811
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0xcc10
  Size        : 0x330
  MaxSize     : 0x330
  Offset      : 0xcc10
  Section     : .text
  Orc Section : .local.text._Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%edx, %r13d
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	xorl	%ebx, %ebx
    0000001c: 	subq	$0x68, %rsp
    00000020: 	movq	%rcx, (%rsp)
    00000024: 	leaq	0x40(%rsp), %rbp
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x58(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	callq	clock@PLT # Offset: 57
    0000003e: 	movq	%rax, start_time(%rip)
    00000045: 	movl	iterations(%rip), %eax
    0000004b: 	testl	%eax, %eax
    0000004d: 	jle	.Ltmp1029 # Offset: 77
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1036:
    00000058: 	movq	(%rsp), %rax
    0000005c: 	movl	%r13d, %edx
    0000005f: 	movl	%r14d, %esi
    00000062: 	movq	%r15, %rdi
    00000065: 	callq	*%rax # Offset: 101
    00000067: 	movq	(%r12), %r9
    0000006b: 	movq	0x8(%r12), %r8
    00000070: 	movq	%rbp, 0x30(%rsp)
    00000075: 	movq	%rax, %rcx
    00000078: 	movq	%r9, %rax
    0000007b: 	addq	%r8, %rax
    0000007e: 	je	.Ltmp1030 # Offset: 126
    00000080: 	testq	%r9, %r9
    00000083: 	je	.Ltmp1031 # Offset: 131
.Ltmp1030:
    00000089: 	movq	%r8, 0x28(%rsp)
    0000008e: 	cmpq	$0xf, %r8
    00000092: 	ja	.Ltmp1032 # Offset: 146
    00000098: 	cmpq	$0x1, %r8
    0000009c: 	jne	.Ltmp1033 # Offset: 156
    000000a2: 	movzbl	(%r9), %eax
    000000a6: 	movb	%al, 0x40(%rsp)
    000000aa: 	movq	%rbp, %rax
.Ltmp1044:
    000000ad: 	movq	%r8, 0x38(%rsp)
    000000b2: 	movb	$0x0, (%rax,%r8)
    000000b7: 	cmpq	%rcx, gCount(%rip)
    000000be: 	je	.Ltmp1034 # Offset: 190
    000000c0: 	movq	0x30(%rsp), %rdx
    000000c5: 	leaq	DATAat0x191d0(%rip), %rsi
    000000cc: 	movl	$0x1, %edi
    000000d1: 	xorl	%eax, %eax
    000000d3: 	callq	__printf_chk@PLT # Offset: 211
.Ltmp1034:
    000000d8: 	movq	0x30(%rsp), %rdi
    000000dd: 	cmpq	%rbp, %rdi
    000000e0: 	je	.Ltmp1035 # Offset: 224
    000000e6: 	movq	0x40(%rsp), %rax
    000000eb: 	addl	$0x1, %ebx
    000000ee: 	leaq	0x1(%rax), %rsi
    000000f2: 	callq	_ZdlPvm@PLT # Offset: 242
    000000f7: 	cmpl	%ebx, iterations(%rip)
    000000fd: 	jg	.Ltmp1036 # Offset: 253
.Ltmp1029:
    00000103: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000010a: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000111: 	subq	$0x20, %rax
    00000115: 	cmpq	%rax, %rbx
    00000118: 	je	.Ltmp1037 # Offset: 280
    0000011e: 	leaq	0x10(%rbx), %rdi
    00000122: 	movq	%rdi, (%rbx)
    00000125: 	movq	(%r12), %rbp
    00000129: 	movq	0x8(%r12), %r12
    0000012e: 	movq	%rbp, %rax
    00000131: 	addq	%r12, %rax
    00000134: 	je	.Ltmp1038 # Offset: 308
    00000136: 	testq	%rbp, %rbp
    00000139: 	je	.Ltmp1031 # Offset: 313
.Ltmp1038:
    0000013f: 	movq	%r12, 0x28(%rsp)
    00000144: 	cmpq	$0xf, %r12
    00000148: 	ja	.Ltmp1039 # Offset: 328
    0000014e: 	cmpq	$0x1, %r12
    00000152: 	jne	.Ltmp1040 # Offset: 338
    00000158: 	movzbl	(%rbp), %eax
    0000015c: 	movb	%al, 0x10(%rbx)
.Ltmp1045:
    0000015f: 	movq	%r12, 0x8(%rbx)
    00000163: 	movb	$0x0, (%rdi,%r12)
    00000168: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000016f: 	addq	$0x20, %rax
    00000173: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1047:
    0000017a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000181: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000188: 	je	.Ltmp1041 # Offset: 392
.Ltmp1046:
    0000018e: 	movq	-0x20(%rax), %rbp
    00000192: 	callq	clock@PLT # Offset: 402
    00000197: 	movq	%rax, end_time(%rip)
    0000019e: 	movq	0x58(%rsp), %rdx
    000001a3: 	subq	%fs:0x28, %rdx
    000001ac: 	jne	.Ltmp1042 # Offset: 428
    000001b2: 	subq	start_time(%rip), %rax
    000001b9: 	pxor	%xmm0, %xmm0
    000001bd: 	movq	%rbp, %rdi
    000001c0: 	cvtsi2sd	%rax, %xmm0
    000001c5: 	divsd	DATAat0x19290(%rip), %xmm0
    000001cd: 	addq	$0x68, %rsp
    000001d1: 	popq	%rbx
    000001d2: 	popq	%rbp
    000001d3: 	popq	%r12
    000001d5: 	popq	%r13
    000001d7: 	popq	%r14
    000001d9: 	popq	%r15
    000001db: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 475
.Ltmp1035:
    000001e0: 	addl	$0x1, %ebx
    000001e3: 	cmpl	%ebx, iterations(%rip)
    000001e9: 	jg	.Ltmp1036 # Offset: 489
    000001ef: 	jmp	.Ltmp1029 # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp1033:
    000001f8: 	testq	%r8, %r8
    000001fb: 	jne	.Ltmp1043 # Offset: 507
    00000201: 	movq	%rbp, %rax
    00000204: 	jmp	.Ltmp1044 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1032:
    00000210: 	leaq	0x30(%rsp), %rdi
    00000215: 	leaq	0x28(%rsp), %rsi
    0000021a: 	xorl	%edx, %edx
    0000021c: 	movq	%r8, 0x18(%rsp)
    00000221: 	movq	%r9, 0x10(%rsp)
    00000226: 	movq	%rcx, 0x8(%rsp)
    0000022b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 555
    00000230: 	movq	0x8(%rsp), %rcx
    00000235: 	movq	0x10(%rsp), %r9
    0000023a: 	movq	%rax, 0x30(%rsp)
    0000023f: 	movq	%rax, %rdi
    00000242: 	movq	0x28(%rsp), %rax
    00000247: 	movq	0x18(%rsp), %r8
    0000024c: 	movq	%rax, 0x40(%rsp)
.Ltmp1049:
    00000251: 	movq	%r8, %rdx
    00000254: 	movq	%r9, %rsi
    00000257: 	movq	%rcx, 0x8(%rsp)
    0000025c: 	callq	memcpy@PLT # Offset: 604
    00000261: 	movq	0x28(%rsp), %r8
    00000266: 	movq	0x30(%rsp), %rax
    0000026b: 	movq	0x8(%rsp), %rcx
    00000270: 	jmp	.Ltmp1044 # Offset: 624
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp1039:
    00000278: 	movq	%rbx, %rdi
    0000027b: 	leaq	0x28(%rsp), %rsi
    00000280: 	xorl	%edx, %edx
    00000282: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 642
    00000287: 	movq	%rax, (%rbx)
    0000028a: 	movq	%rax, %rdi
    0000028d: 	movq	0x28(%rsp), %rax
    00000292: 	movq	%rax, 0x10(%rbx)
.Ltmp1048:
    00000296: 	movq	%r12, %rdx
    00000299: 	movq	%rbp, %rsi
    0000029c: 	callq	memcpy@PLT # Offset: 668
    000002a1: 	movq	0x28(%rsp), %r12
    000002a6: 	movq	(%rbx), %rdi
    000002a9: 	jmp	.Ltmp1045 # Offset: 681
    000002ae: 	nop # Size: 2
.Ltmp1041:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp1046 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1037:
    000002c0: 	movq	%r12, %rsi
    000002c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 714
    000002cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d6: 	jmp	.Ltmp1047 # Offset: 726
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1040:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp1045 # Offset: 739
    000002e9: 	jmp	.Ltmp1048 # Offset: 745
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1031:
    000002f0: 	leaq	DATAat0x19008(%rip), %rdi
    000002f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 759
.Ltmp1043:
    000002fc: 	movq	%rbp, %rdi
    000002ff: 	jmp	.Ltmp1049 # Offset: 767
.Ltmp1042:
    00000304: 	callq	__stack_chk_fail@PLT # Offset: 772
    00000309: 	endbr64
    0000030d: 	movq	%rax, %r12
    00000310: 	movq	0x30(%rsp), %rdi
    00000315: 	cmpq	%rbp, %rdi
    00000318: 	je	.Ltmp1050 # Offset: 792
    0000031a: 	movq	0x40(%rsp), %rax
    0000031f: 	leaq	0x1(%rax), %rsi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
.Ltmp1050:
    00000328: 	movq	%r12, %rdi
    0000032b: 	callq	_Unwind_Resume@PLT # Offset: 811
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0xcf40
  Size        : 0x330
  MaxSize     : 0x330
  Offset      : 0xcf40
  Section     : .text
  Orc Section : .local.text._Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rcx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	xorl	%ebx, %ebx
    00000019: 	subq	$0x68, %rsp
    0000001d: 	movq	%rdx, 0x8(%rsp)
    00000022: 	leaq	0x40(%rsp), %rbp
    00000027: 	movss	%xmm0, 0x4(%rsp)
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x58(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp1051 # Offset: 81
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1058:
    00000060: 	movss	0x4(%rsp), %xmm0
    00000066: 	movq	0x8(%rsp), %rax
    0000006b: 	movl	%r14d, %esi
    0000006e: 	movq	%r15, %rdi
    00000071: 	callq	*%rax # Offset: 113
    00000073: 	movq	(%r12), %r9
    00000077: 	movq	0x8(%r12), %r8
    0000007c: 	movq	%rbp, 0x30(%rsp)
    00000081: 	movq	%rax, %r13
    00000084: 	movq	%r9, %rax
    00000087: 	addq	%r8, %rax
    0000008a: 	je	.Ltmp1052 # Offset: 138
    0000008c: 	testq	%r9, %r9
    0000008f: 	je	.Ltmp1053 # Offset: 143
.Ltmp1052:
    00000095: 	movq	%r8, 0x28(%rsp)
    0000009a: 	cmpq	$0xf, %r8
    0000009e: 	ja	.Ltmp1054 # Offset: 158
    000000a4: 	cmpq	$0x1, %r8
    000000a8: 	jne	.Ltmp1055 # Offset: 168
    000000ae: 	movzbl	(%r9), %eax
    000000b2: 	movb	%al, 0x40(%rsp)
    000000b6: 	movq	%rbp, %rax
.Ltmp1066:
    000000b9: 	movq	%r8, 0x38(%rsp)
    000000be: 	movb	$0x0, (%rax,%r8)
    000000c3: 	cmpq	%r13, gCount(%rip)
    000000ca: 	je	.Ltmp1056 # Offset: 202
    000000cc: 	movq	0x30(%rsp), %rdx
    000000d1: 	leaq	DATAat0x191d0(%rip), %rsi
    000000d8: 	movl	$0x1, %edi
    000000dd: 	xorl	%eax, %eax
    000000df: 	callq	__printf_chk@PLT # Offset: 223
.Ltmp1056:
    000000e4: 	movq	0x30(%rsp), %rdi
    000000e9: 	cmpq	%rbp, %rdi
    000000ec: 	je	.Ltmp1057 # Offset: 236
    000000f2: 	movq	0x40(%rsp), %rax
    000000f7: 	addl	$0x1, %ebx
    000000fa: 	leaq	0x1(%rax), %rsi
    000000fe: 	callq	_ZdlPvm@PLT # Offset: 254
    00000103: 	cmpl	%ebx, iterations(%rip)
    00000109: 	jg	.Ltmp1058 # Offset: 265
.Ltmp1051:
    0000010f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000116: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000011d: 	subq	$0x20, %rax
    00000121: 	cmpq	%rax, %rbx
    00000124: 	je	.Ltmp1059 # Offset: 292
    0000012a: 	leaq	0x10(%rbx), %rdi
    0000012e: 	movq	%rdi, (%rbx)
    00000131: 	movq	(%r12), %rbp
    00000135: 	movq	0x8(%r12), %r12
    0000013a: 	movq	%rbp, %rax
    0000013d: 	addq	%r12, %rax
    00000140: 	je	.Ltmp1060 # Offset: 320
    00000142: 	testq	%rbp, %rbp
    00000145: 	je	.Ltmp1053 # Offset: 325
.Ltmp1060:
    0000014b: 	movq	%r12, 0x28(%rsp)
    00000150: 	cmpq	$0xf, %r12
    00000154: 	ja	.Ltmp1061 # Offset: 340
    0000015a: 	cmpq	$0x1, %r12
    0000015e: 	jne	.Ltmp1062 # Offset: 350
    00000164: 	movzbl	(%rbp), %eax
    00000168: 	movb	%al, 0x10(%rbx)
.Ltmp1067:
    0000016b: 	movq	%r12, 0x8(%rbx)
    0000016f: 	movb	$0x0, (%rdi,%r12)
    00000174: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000017b: 	addq	$0x20, %rax
    0000017f: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1069:
    00000186: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000018d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000194: 	je	.Ltmp1063 # Offset: 404
.Ltmp1068:
    0000019a: 	movq	-0x20(%rax), %rbp
    0000019e: 	callq	clock@PLT # Offset: 414
    000001a3: 	movq	%rax, end_time(%rip)
    000001aa: 	movq	0x58(%rsp), %rdx
    000001af: 	subq	%fs:0x28, %rdx
    000001b8: 	jne	.Ltmp1064 # Offset: 440
    000001be: 	subq	start_time(%rip), %rax
    000001c5: 	pxor	%xmm0, %xmm0
    000001c9: 	movq	%rbp, %rdi
    000001cc: 	cvtsi2sd	%rax, %xmm0
    000001d1: 	divsd	DATAat0x19290(%rip), %xmm0
    000001d9: 	addq	$0x68, %rsp
    000001dd: 	popq	%rbx
    000001de: 	popq	%rbp
    000001df: 	popq	%r12
    000001e1: 	popq	%r13
    000001e3: 	popq	%r14
    000001e5: 	popq	%r15
    000001e7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 487
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp1057:
    000001f0: 	addl	$0x1, %ebx
    000001f3: 	cmpl	%ebx, iterations(%rip)
    000001f9: 	jg	.Ltmp1058 # Offset: 505
    000001ff: 	jmp	.Ltmp1051 # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp1055:
    00000208: 	testq	%r8, %r8
    0000020b: 	jne	.Ltmp1065 # Offset: 523
    00000211: 	movq	%rbp, %rax
    00000214: 	jmp	.Ltmp1066 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1054:
    00000220: 	leaq	0x30(%rsp), %rdi
    00000225: 	leaq	0x28(%rsp), %rsi
    0000022a: 	xorl	%edx, %edx
    0000022c: 	movq	%r8, 0x18(%rsp)
    00000231: 	movq	%r9, 0x10(%rsp)
    00000236: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 566
    0000023b: 	movq	0x10(%rsp), %r9
    00000240: 	movq	0x18(%rsp), %r8
    00000245: 	movq	%rax, 0x30(%rsp)
    0000024a: 	movq	%rax, %rdi
    0000024d: 	movq	0x28(%rsp), %rax
    00000252: 	movq	%rax, 0x40(%rsp)
.Ltmp1071:
    00000257: 	movq	%r8, %rdx
    0000025a: 	movq	%r9, %rsi
    0000025d: 	callq	memcpy@PLT # Offset: 605
    00000262: 	movq	0x28(%rsp), %r8
    00000267: 	movq	0x30(%rsp), %rax
    0000026c: 	jmp	.Ltmp1066 # Offset: 620
    00000271: 	nopl	(%rax) # Size: 7
.Ltmp1061:
    00000278: 	movq	%rbx, %rdi
    0000027b: 	leaq	0x28(%rsp), %rsi
    00000280: 	xorl	%edx, %edx
    00000282: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 642
    00000287: 	movq	%rax, (%rbx)
    0000028a: 	movq	%rax, %rdi
    0000028d: 	movq	0x28(%rsp), %rax
    00000292: 	movq	%rax, 0x10(%rbx)
.Ltmp1070:
    00000296: 	movq	%r12, %rdx
    00000299: 	movq	%rbp, %rsi
    0000029c: 	callq	memcpy@PLT # Offset: 668
    000002a1: 	movq	0x28(%rsp), %r12
    000002a6: 	movq	(%rbx), %rdi
    000002a9: 	jmp	.Ltmp1067 # Offset: 681
    000002ae: 	nop # Size: 2
.Ltmp1063:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp1068 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1059:
    000002c0: 	movq	%r12, %rsi
    000002c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 714
    000002cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d6: 	jmp	.Ltmp1069 # Offset: 726
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1062:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp1067 # Offset: 739
    000002e9: 	jmp	.Ltmp1070 # Offset: 745
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1053:
    000002f0: 	leaq	DATAat0x19008(%rip), %rdi
    000002f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 759
.Ltmp1065:
    000002fc: 	movq	%rbp, %rdi
    000002ff: 	jmp	.Ltmp1071 # Offset: 767
.Ltmp1064:
    00000304: 	callq	__stack_chk_fail@PLT # Offset: 772
    00000309: 	endbr64
    0000030d: 	movq	%rax, %r12
    00000310: 	movq	0x30(%rsp), %rdi
    00000315: 	cmpq	%rbp, %rdi
    00000318: 	je	.Ltmp1072 # Offset: 792
    0000031a: 	movq	0x40(%rsp), %rax
    0000031f: 	leaq	0x1(%rax), %rsi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
.Ltmp1072:
    00000328: 	movq	%r12, %rdi
    0000032b: 	callq	_Unwind_Resume@PLT # Offset: 811
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0xd270
  Size        : 0x330
  MaxSize     : 0x330
  Offset      : 0xd270
  Section     : .text
  Orc Section : .local.text._Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%edx, %r13d
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	xorl	%ebx, %ebx
    0000001c: 	subq	$0x68, %rsp
    00000020: 	movq	%rcx, (%rsp)
    00000024: 	leaq	0x40(%rsp), %rbp
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x58(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	callq	clock@PLT # Offset: 57
    0000003e: 	movq	%rax, start_time(%rip)
    00000045: 	movl	iterations(%rip), %eax
    0000004b: 	testl	%eax, %eax
    0000004d: 	jle	.Ltmp1073 # Offset: 77
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1080:
    00000058: 	movq	(%rsp), %rax
    0000005c: 	movl	%r13d, %edx
    0000005f: 	movl	%r14d, %esi
    00000062: 	movq	%r15, %rdi
    00000065: 	callq	*%rax # Offset: 101
    00000067: 	movq	(%r12), %r9
    0000006b: 	movq	0x8(%r12), %r8
    00000070: 	movq	%rbp, 0x30(%rsp)
    00000075: 	movq	%rax, %rcx
    00000078: 	movq	%r9, %rax
    0000007b: 	addq	%r8, %rax
    0000007e: 	je	.Ltmp1074 # Offset: 126
    00000080: 	testq	%r9, %r9
    00000083: 	je	.Ltmp1075 # Offset: 131
.Ltmp1074:
    00000089: 	movq	%r8, 0x28(%rsp)
    0000008e: 	cmpq	$0xf, %r8
    00000092: 	ja	.Ltmp1076 # Offset: 146
    00000098: 	cmpq	$0x1, %r8
    0000009c: 	jne	.Ltmp1077 # Offset: 156
    000000a2: 	movzbl	(%r9), %eax
    000000a6: 	movb	%al, 0x40(%rsp)
    000000aa: 	movq	%rbp, %rax
.Ltmp1088:
    000000ad: 	movq	%r8, 0x38(%rsp)
    000000b2: 	movb	$0x0, (%rax,%r8)
    000000b7: 	cmpq	%rcx, gCount(%rip)
    000000be: 	je	.Ltmp1078 # Offset: 190
    000000c0: 	movq	0x30(%rsp), %rdx
    000000c5: 	leaq	DATAat0x191d0(%rip), %rsi
    000000cc: 	movl	$0x1, %edi
    000000d1: 	xorl	%eax, %eax
    000000d3: 	callq	__printf_chk@PLT # Offset: 211
.Ltmp1078:
    000000d8: 	movq	0x30(%rsp), %rdi
    000000dd: 	cmpq	%rbp, %rdi
    000000e0: 	je	.Ltmp1079 # Offset: 224
    000000e6: 	movq	0x40(%rsp), %rax
    000000eb: 	addl	$0x1, %ebx
    000000ee: 	leaq	0x1(%rax), %rsi
    000000f2: 	callq	_ZdlPvm@PLT # Offset: 242
    000000f7: 	cmpl	%ebx, iterations(%rip)
    000000fd: 	jg	.Ltmp1080 # Offset: 253
.Ltmp1073:
    00000103: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000010a: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000111: 	subq	$0x20, %rax
    00000115: 	cmpq	%rax, %rbx
    00000118: 	je	.Ltmp1081 # Offset: 280
    0000011e: 	leaq	0x10(%rbx), %rdi
    00000122: 	movq	%rdi, (%rbx)
    00000125: 	movq	(%r12), %rbp
    00000129: 	movq	0x8(%r12), %r12
    0000012e: 	movq	%rbp, %rax
    00000131: 	addq	%r12, %rax
    00000134: 	je	.Ltmp1082 # Offset: 308
    00000136: 	testq	%rbp, %rbp
    00000139: 	je	.Ltmp1075 # Offset: 313
.Ltmp1082:
    0000013f: 	movq	%r12, 0x28(%rsp)
    00000144: 	cmpq	$0xf, %r12
    00000148: 	ja	.Ltmp1083 # Offset: 328
    0000014e: 	cmpq	$0x1, %r12
    00000152: 	jne	.Ltmp1084 # Offset: 338
    00000158: 	movzbl	(%rbp), %eax
    0000015c: 	movb	%al, 0x10(%rbx)
.Ltmp1089:
    0000015f: 	movq	%r12, 0x8(%rbx)
    00000163: 	movb	$0x0, (%rdi,%r12)
    00000168: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000016f: 	addq	$0x20, %rax
    00000173: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1091:
    0000017a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000181: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000188: 	je	.Ltmp1085 # Offset: 392
.Ltmp1090:
    0000018e: 	movq	-0x20(%rax), %rbp
    00000192: 	callq	clock@PLT # Offset: 402
    00000197: 	movq	%rax, end_time(%rip)
    0000019e: 	movq	0x58(%rsp), %rdx
    000001a3: 	subq	%fs:0x28, %rdx
    000001ac: 	jne	.Ltmp1086 # Offset: 428
    000001b2: 	subq	start_time(%rip), %rax
    000001b9: 	pxor	%xmm0, %xmm0
    000001bd: 	movq	%rbp, %rdi
    000001c0: 	cvtsi2sd	%rax, %xmm0
    000001c5: 	divsd	DATAat0x19290(%rip), %xmm0
    000001cd: 	addq	$0x68, %rsp
    000001d1: 	popq	%rbx
    000001d2: 	popq	%rbp
    000001d3: 	popq	%r12
    000001d5: 	popq	%r13
    000001d7: 	popq	%r14
    000001d9: 	popq	%r15
    000001db: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 475
.Ltmp1079:
    000001e0: 	addl	$0x1, %ebx
    000001e3: 	cmpl	%ebx, iterations(%rip)
    000001e9: 	jg	.Ltmp1080 # Offset: 489
    000001ef: 	jmp	.Ltmp1073 # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp1077:
    000001f8: 	testq	%r8, %r8
    000001fb: 	jne	.Ltmp1087 # Offset: 507
    00000201: 	movq	%rbp, %rax
    00000204: 	jmp	.Ltmp1088 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1076:
    00000210: 	leaq	0x30(%rsp), %rdi
    00000215: 	leaq	0x28(%rsp), %rsi
    0000021a: 	xorl	%edx, %edx
    0000021c: 	movq	%r8, 0x18(%rsp)
    00000221: 	movq	%r9, 0x10(%rsp)
    00000226: 	movq	%rcx, 0x8(%rsp)
    0000022b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 555
    00000230: 	movq	0x8(%rsp), %rcx
    00000235: 	movq	0x10(%rsp), %r9
    0000023a: 	movq	%rax, 0x30(%rsp)
    0000023f: 	movq	%rax, %rdi
    00000242: 	movq	0x28(%rsp), %rax
    00000247: 	movq	0x18(%rsp), %r8
    0000024c: 	movq	%rax, 0x40(%rsp)
.Ltmp1093:
    00000251: 	movq	%r8, %rdx
    00000254: 	movq	%r9, %rsi
    00000257: 	movq	%rcx, 0x8(%rsp)
    0000025c: 	callq	memcpy@PLT # Offset: 604
    00000261: 	movq	0x28(%rsp), %r8
    00000266: 	movq	0x30(%rsp), %rax
    0000026b: 	movq	0x8(%rsp), %rcx
    00000270: 	jmp	.Ltmp1088 # Offset: 624
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp1083:
    00000278: 	movq	%rbx, %rdi
    0000027b: 	leaq	0x28(%rsp), %rsi
    00000280: 	xorl	%edx, %edx
    00000282: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 642
    00000287: 	movq	%rax, (%rbx)
    0000028a: 	movq	%rax, %rdi
    0000028d: 	movq	0x28(%rsp), %rax
    00000292: 	movq	%rax, 0x10(%rbx)
.Ltmp1092:
    00000296: 	movq	%r12, %rdx
    00000299: 	movq	%rbp, %rsi
    0000029c: 	callq	memcpy@PLT # Offset: 668
    000002a1: 	movq	0x28(%rsp), %r12
    000002a6: 	movq	(%rbx), %rdi
    000002a9: 	jmp	.Ltmp1089 # Offset: 681
    000002ae: 	nop # Size: 2
.Ltmp1085:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp1090 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1081:
    000002c0: 	movq	%r12, %rsi
    000002c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 714
    000002cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d6: 	jmp	.Ltmp1091 # Offset: 726
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1084:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp1089 # Offset: 739
    000002e9: 	jmp	.Ltmp1092 # Offset: 745
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1075:
    000002f0: 	leaq	DATAat0x19008(%rip), %rdi
    000002f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 759
.Ltmp1087:
    000002fc: 	movq	%rbp, %rdi
    000002ff: 	jmp	.Ltmp1093 # Offset: 767
.Ltmp1086:
    00000304: 	callq	__stack_chk_fail@PLT # Offset: 772
    00000309: 	endbr64
    0000030d: 	movq	%rax, %r12
    00000310: 	movq	0x30(%rsp), %rdi
    00000315: 	cmpq	%rbp, %rdi
    00000318: 	je	.Ltmp1094 # Offset: 792
    0000031a: 	movq	0x40(%rsp), %rax
    0000031f: 	leaq	0x1(%rax), %rsi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
.Ltmp1094:
    00000328: 	movq	%r12, %rdi
    0000032b: 	callq	_Unwind_Resume@PLT # Offset: 811
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0xd5a0
  Size        : 0x330
  MaxSize     : 0x330
  Offset      : 0xd5a0
  Section     : .text
  Orc Section : .local.text._Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	xorl	%ebx, %ebx
    0000001c: 	subq	$0x68, %rsp
    00000020: 	movq	%rcx, (%rsp)
    00000024: 	leaq	0x40(%rsp), %rbp
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x58(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	callq	clock@PLT # Offset: 57
    0000003e: 	movq	%rax, start_time(%rip)
    00000045: 	movl	iterations(%rip), %eax
    0000004b: 	testl	%eax, %eax
    0000004d: 	jle	.Ltmp1095 # Offset: 77
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1102:
    00000058: 	movq	(%rsp), %rax
    0000005c: 	movq	%r13, %rdx
    0000005f: 	movl	%r14d, %esi
    00000062: 	movq	%r15, %rdi
    00000065: 	callq	*%rax # Offset: 101
    00000067: 	movq	(%r12), %r9
    0000006b: 	movq	0x8(%r12), %r8
    00000070: 	movq	%rbp, 0x30(%rsp)
    00000075: 	movq	%rax, %rcx
    00000078: 	movq	%r9, %rax
    0000007b: 	addq	%r8, %rax
    0000007e: 	je	.Ltmp1096 # Offset: 126
    00000080: 	testq	%r9, %r9
    00000083: 	je	.Ltmp1097 # Offset: 131
.Ltmp1096:
    00000089: 	movq	%r8, 0x28(%rsp)
    0000008e: 	cmpq	$0xf, %r8
    00000092: 	ja	.Ltmp1098 # Offset: 146
    00000098: 	cmpq	$0x1, %r8
    0000009c: 	jne	.Ltmp1099 # Offset: 156
    000000a2: 	movzbl	(%r9), %eax
    000000a6: 	movb	%al, 0x40(%rsp)
    000000aa: 	movq	%rbp, %rax
.Ltmp1110:
    000000ad: 	movq	%r8, 0x38(%rsp)
    000000b2: 	movb	$0x0, (%rax,%r8)
    000000b7: 	cmpq	%rcx, gCount(%rip)
    000000be: 	je	.Ltmp1100 # Offset: 190
    000000c0: 	movq	0x30(%rsp), %rdx
    000000c5: 	leaq	DATAat0x191d0(%rip), %rsi
    000000cc: 	movl	$0x1, %edi
    000000d1: 	xorl	%eax, %eax
    000000d3: 	callq	__printf_chk@PLT # Offset: 211
.Ltmp1100:
    000000d8: 	movq	0x30(%rsp), %rdi
    000000dd: 	cmpq	%rbp, %rdi
    000000e0: 	je	.Ltmp1101 # Offset: 224
    000000e6: 	movq	0x40(%rsp), %rax
    000000eb: 	addl	$0x1, %ebx
    000000ee: 	leaq	0x1(%rax), %rsi
    000000f2: 	callq	_ZdlPvm@PLT # Offset: 242
    000000f7: 	cmpl	%ebx, iterations(%rip)
    000000fd: 	jg	.Ltmp1102 # Offset: 253
.Ltmp1095:
    00000103: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000010a: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000111: 	subq	$0x20, %rax
    00000115: 	cmpq	%rax, %rbx
    00000118: 	je	.Ltmp1103 # Offset: 280
    0000011e: 	leaq	0x10(%rbx), %rdi
    00000122: 	movq	%rdi, (%rbx)
    00000125: 	movq	(%r12), %rbp
    00000129: 	movq	0x8(%r12), %r12
    0000012e: 	movq	%rbp, %rax
    00000131: 	addq	%r12, %rax
    00000134: 	je	.Ltmp1104 # Offset: 308
    00000136: 	testq	%rbp, %rbp
    00000139: 	je	.Ltmp1097 # Offset: 313
.Ltmp1104:
    0000013f: 	movq	%r12, 0x28(%rsp)
    00000144: 	cmpq	$0xf, %r12
    00000148: 	ja	.Ltmp1105 # Offset: 328
    0000014e: 	cmpq	$0x1, %r12
    00000152: 	jne	.Ltmp1106 # Offset: 338
    00000158: 	movzbl	(%rbp), %eax
    0000015c: 	movb	%al, 0x10(%rbx)
.Ltmp1111:
    0000015f: 	movq	%r12, 0x8(%rbx)
    00000163: 	movb	$0x0, (%rdi,%r12)
    00000168: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000016f: 	addq	$0x20, %rax
    00000173: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1113:
    0000017a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000181: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000188: 	je	.Ltmp1107 # Offset: 392
.Ltmp1112:
    0000018e: 	movq	-0x20(%rax), %rbp
    00000192: 	callq	clock@PLT # Offset: 402
    00000197: 	movq	%rax, end_time(%rip)
    0000019e: 	movq	0x58(%rsp), %rdx
    000001a3: 	subq	%fs:0x28, %rdx
    000001ac: 	jne	.Ltmp1108 # Offset: 428
    000001b2: 	subq	start_time(%rip), %rax
    000001b9: 	pxor	%xmm0, %xmm0
    000001bd: 	movq	%rbp, %rdi
    000001c0: 	cvtsi2sd	%rax, %xmm0
    000001c5: 	divsd	DATAat0x19290(%rip), %xmm0
    000001cd: 	addq	$0x68, %rsp
    000001d1: 	popq	%rbx
    000001d2: 	popq	%rbp
    000001d3: 	popq	%r12
    000001d5: 	popq	%r13
    000001d7: 	popq	%r14
    000001d9: 	popq	%r15
    000001db: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 475
.Ltmp1101:
    000001e0: 	addl	$0x1, %ebx
    000001e3: 	cmpl	%ebx, iterations(%rip)
    000001e9: 	jg	.Ltmp1102 # Offset: 489
    000001ef: 	jmp	.Ltmp1095 # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp1099:
    000001f8: 	testq	%r8, %r8
    000001fb: 	jne	.Ltmp1109 # Offset: 507
    00000201: 	movq	%rbp, %rax
    00000204: 	jmp	.Ltmp1110 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1098:
    00000210: 	leaq	0x30(%rsp), %rdi
    00000215: 	leaq	0x28(%rsp), %rsi
    0000021a: 	xorl	%edx, %edx
    0000021c: 	movq	%r8, 0x18(%rsp)
    00000221: 	movq	%r9, 0x10(%rsp)
    00000226: 	movq	%rcx, 0x8(%rsp)
    0000022b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 555
    00000230: 	movq	0x8(%rsp), %rcx
    00000235: 	movq	0x10(%rsp), %r9
    0000023a: 	movq	%rax, 0x30(%rsp)
    0000023f: 	movq	%rax, %rdi
    00000242: 	movq	0x28(%rsp), %rax
    00000247: 	movq	0x18(%rsp), %r8
    0000024c: 	movq	%rax, 0x40(%rsp)
.Ltmp1115:
    00000251: 	movq	%r8, %rdx
    00000254: 	movq	%r9, %rsi
    00000257: 	movq	%rcx, 0x8(%rsp)
    0000025c: 	callq	memcpy@PLT # Offset: 604
    00000261: 	movq	0x28(%rsp), %r8
    00000266: 	movq	0x30(%rsp), %rax
    0000026b: 	movq	0x8(%rsp), %rcx
    00000270: 	jmp	.Ltmp1110 # Offset: 624
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp1105:
    00000278: 	movq	%rbx, %rdi
    0000027b: 	leaq	0x28(%rsp), %rsi
    00000280: 	xorl	%edx, %edx
    00000282: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 642
    00000287: 	movq	%rax, (%rbx)
    0000028a: 	movq	%rax, %rdi
    0000028d: 	movq	0x28(%rsp), %rax
    00000292: 	movq	%rax, 0x10(%rbx)
.Ltmp1114:
    00000296: 	movq	%r12, %rdx
    00000299: 	movq	%rbp, %rsi
    0000029c: 	callq	memcpy@PLT # Offset: 668
    000002a1: 	movq	0x28(%rsp), %r12
    000002a6: 	movq	(%rbx), %rdi
    000002a9: 	jmp	.Ltmp1111 # Offset: 681
    000002ae: 	nop # Size: 2
.Ltmp1107:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp1112 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1103:
    000002c0: 	movq	%r12, %rsi
    000002c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 714
    000002cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d6: 	jmp	.Ltmp1113 # Offset: 726
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1106:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp1111 # Offset: 739
    000002e9: 	jmp	.Ltmp1114 # Offset: 745
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1097:
    000002f0: 	leaq	DATAat0x19008(%rip), %rdi
    000002f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 759
.Ltmp1109:
    000002fc: 	movq	%rbp, %rdi
    000002ff: 	jmp	.Ltmp1115 # Offset: 767
.Ltmp1108:
    00000304: 	callq	__stack_chk_fail@PLT # Offset: 772
    00000309: 	endbr64
    0000030d: 	movq	%rax, %r12
    00000310: 	movq	0x30(%rsp), %rdi
    00000315: 	cmpq	%rbp, %rdi
    00000318: 	je	.Ltmp1116 # Offset: 792
    0000031a: 	movq	0x40(%rsp), %rax
    0000031f: 	leaq	0x1(%rax), %rsi
    00000323: 	callq	_ZdlPvm@PLT # Offset: 803
.Ltmp1116:
    00000328: 	movq	%r12, %rdi
    0000032b: 	callq	_Unwind_Resume@PLT # Offset: 811
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0xd8d0
  Size        : 0x340
  MaxSize     : 0x340
  Offset      : 0xd8d0
  Section     : .text
  Orc Section : .local.text._Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%edx, %r13d
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	movsbl	%r13b, %r13d
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	xorl	%ebx, %ebx
    00000020: 	subq	$0x68, %rsp
    00000024: 	movq	%rcx, (%rsp)
    00000028: 	leaq	0x40(%rsp), %rbp
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x58(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp1117 # Offset: 81
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1124:
    00000060: 	movq	(%rsp), %rax
    00000064: 	movl	%r13d, %edx
    00000067: 	movl	%r14d, %esi
    0000006a: 	movq	%r15, %rdi
    0000006d: 	callq	*%rax # Offset: 109
    0000006f: 	movq	(%r12), %r9
    00000073: 	movq	0x8(%r12), %r8
    00000078: 	movq	%rbp, 0x30(%rsp)
    0000007d: 	movq	%rax, %rcx
    00000080: 	movq	%r9, %rax
    00000083: 	addq	%r8, %rax
    00000086: 	je	.Ltmp1118 # Offset: 134
    00000088: 	testq	%r9, %r9
    0000008b: 	je	.Ltmp1119 # Offset: 139
.Ltmp1118:
    00000091: 	movq	%r8, 0x28(%rsp)
    00000096: 	cmpq	$0xf, %r8
    0000009a: 	ja	.Ltmp1120 # Offset: 154
    000000a0: 	cmpq	$0x1, %r8
    000000a4: 	jne	.Ltmp1121 # Offset: 164
    000000aa: 	movzbl	(%r9), %eax
    000000ae: 	movb	%al, 0x40(%rsp)
    000000b2: 	movq	%rbp, %rax
.Ltmp1132:
    000000b5: 	movq	%r8, 0x38(%rsp)
    000000ba: 	movb	$0x0, (%rax,%r8)
    000000bf: 	cmpq	%rcx, gCount(%rip)
    000000c6: 	je	.Ltmp1122 # Offset: 198
    000000c8: 	movq	0x30(%rsp), %rdx
    000000cd: 	leaq	DATAat0x191d0(%rip), %rsi
    000000d4: 	movl	$0x1, %edi
    000000d9: 	xorl	%eax, %eax
    000000db: 	callq	__printf_chk@PLT # Offset: 219
.Ltmp1122:
    000000e0: 	movq	0x30(%rsp), %rdi
    000000e5: 	cmpq	%rbp, %rdi
    000000e8: 	je	.Ltmp1123 # Offset: 232
    000000ee: 	movq	0x40(%rsp), %rax
    000000f3: 	addl	$0x1, %ebx
    000000f6: 	leaq	0x1(%rax), %rsi
    000000fa: 	callq	_ZdlPvm@PLT # Offset: 250
    000000ff: 	cmpl	%ebx, iterations(%rip)
    00000105: 	jg	.Ltmp1124 # Offset: 261
.Ltmp1117:
    0000010b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000112: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000119: 	subq	$0x20, %rax
    0000011d: 	cmpq	%rax, %rbx
    00000120: 	je	.Ltmp1125 # Offset: 288
    00000126: 	leaq	0x10(%rbx), %rdi
    0000012a: 	movq	%rdi, (%rbx)
    0000012d: 	movq	(%r12), %rbp
    00000131: 	movq	0x8(%r12), %r12
    00000136: 	movq	%rbp, %rax
    00000139: 	addq	%r12, %rax
    0000013c: 	je	.Ltmp1126 # Offset: 316
    0000013e: 	testq	%rbp, %rbp
    00000141: 	je	.Ltmp1119 # Offset: 321
.Ltmp1126:
    00000147: 	movq	%r12, 0x28(%rsp)
    0000014c: 	cmpq	$0xf, %r12
    00000150: 	ja	.Ltmp1127 # Offset: 336
    00000156: 	cmpq	$0x1, %r12
    0000015a: 	jne	.Ltmp1128 # Offset: 346
    00000160: 	movzbl	(%rbp), %eax
    00000164: 	movb	%al, 0x10(%rbx)
.Ltmp1133:
    00000167: 	movq	%r12, 0x8(%rbx)
    0000016b: 	movb	$0x0, (%rdi,%r12)
    00000170: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000177: 	addq	$0x20, %rax
    0000017b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1135:
    00000182: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000189: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000190: 	je	.Ltmp1129 # Offset: 400
.Ltmp1134:
    00000196: 	movq	-0x20(%rax), %rbp
    0000019a: 	callq	clock@PLT # Offset: 410
    0000019f: 	movq	%rax, end_time(%rip)
    000001a6: 	movq	0x58(%rsp), %rdx
    000001ab: 	subq	%fs:0x28, %rdx
    000001b4: 	jne	.Ltmp1130 # Offset: 436
    000001ba: 	subq	start_time(%rip), %rax
    000001c1: 	pxor	%xmm0, %xmm0
    000001c5: 	movq	%rbp, %rdi
    000001c8: 	cvtsi2sd	%rax, %xmm0
    000001cd: 	divsd	DATAat0x19290(%rip), %xmm0
    000001d5: 	addq	$0x68, %rsp
    000001d9: 	popq	%rbx
    000001da: 	popq	%rbp
    000001db: 	popq	%r12
    000001dd: 	popq	%r13
    000001df: 	popq	%r14
    000001e1: 	popq	%r15
    000001e3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 483
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1123:
    000001f0: 	addl	$0x1, %ebx
    000001f3: 	cmpl	%ebx, iterations(%rip)
    000001f9: 	jg	.Ltmp1124 # Offset: 505
    000001ff: 	jmp	.Ltmp1117 # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp1121:
    00000208: 	testq	%r8, %r8
    0000020b: 	jne	.Ltmp1131 # Offset: 523
    00000211: 	movq	%rbp, %rax
    00000214: 	jmp	.Ltmp1132 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1120:
    00000220: 	leaq	0x30(%rsp), %rdi
    00000225: 	leaq	0x28(%rsp), %rsi
    0000022a: 	xorl	%edx, %edx
    0000022c: 	movq	%r8, 0x18(%rsp)
    00000231: 	movq	%r9, 0x10(%rsp)
    00000236: 	movq	%rcx, 0x8(%rsp)
    0000023b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 571
    00000240: 	movq	0x8(%rsp), %rcx
    00000245: 	movq	0x10(%rsp), %r9
    0000024a: 	movq	%rax, 0x30(%rsp)
    0000024f: 	movq	%rax, %rdi
    00000252: 	movq	0x28(%rsp), %rax
    00000257: 	movq	0x18(%rsp), %r8
    0000025c: 	movq	%rax, 0x40(%rsp)
.Ltmp1137:
    00000261: 	movq	%r8, %rdx
    00000264: 	movq	%r9, %rsi
    00000267: 	movq	%rcx, 0x8(%rsp)
    0000026c: 	callq	memcpy@PLT # Offset: 620
    00000271: 	movq	0x28(%rsp), %r8
    00000276: 	movq	0x30(%rsp), %rax
    0000027b: 	movq	0x8(%rsp), %rcx
    00000280: 	jmp	.Ltmp1132 # Offset: 640
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp1127:
    00000288: 	movq	%rbx, %rdi
    0000028b: 	leaq	0x28(%rsp), %rsi
    00000290: 	xorl	%edx, %edx
    00000292: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 658
    00000297: 	movq	%rax, (%rbx)
    0000029a: 	movq	%rax, %rdi
    0000029d: 	movq	0x28(%rsp), %rax
    000002a2: 	movq	%rax, 0x10(%rbx)
.Ltmp1136:
    000002a6: 	movq	%r12, %rdx
    000002a9: 	movq	%rbp, %rsi
    000002ac: 	callq	memcpy@PLT # Offset: 684
    000002b1: 	movq	0x28(%rsp), %r12
    000002b6: 	movq	(%rbx), %rdi
    000002b9: 	jmp	.Ltmp1133 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp1129:
    000002c0: 	movq	-0x8(%rdx), %rax
    000002c4: 	addq	$0x200, %rax
    000002ca: 	jmp	.Ltmp1134 # Offset: 714
    000002cf: 	nop # Size: 1
.Ltmp1125:
    000002d0: 	movq	%r12, %rsi
    000002d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 730
    000002df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002e6: 	jmp	.Ltmp1135 # Offset: 742
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1128:
    000002f0: 	testq	%r12, %r12
    000002f3: 	je	.Ltmp1133 # Offset: 755
    000002f9: 	jmp	.Ltmp1136 # Offset: 761
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1119:
    00000300: 	leaq	DATAat0x19008(%rip), %rdi
    00000307: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 775
.Ltmp1131:
    0000030c: 	movq	%rbp, %rdi
    0000030f: 	jmp	.Ltmp1137 # Offset: 783
.Ltmp1130:
    00000314: 	callq	__stack_chk_fail@PLT # Offset: 788
    00000319: 	endbr64
    0000031d: 	movq	%rax, %r12
    00000320: 	movq	0x30(%rsp), %rdi
    00000325: 	cmpq	%rbp, %rdi
    00000328: 	je	.Ltmp1138 # Offset: 808
    0000032a: 	movq	0x40(%rsp), %rax
    0000032f: 	leaq	0x1(%rax), %rsi
    00000333: 	callq	_ZdlPvm@PLT # Offset: 819
.Ltmp1138:
    00000338: 	movq	%r12, %rdi
    0000033b: 	callq	_Unwind_Resume@PLT # Offset: 827
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0xdc10
  Size        : 0x340
  MaxSize     : 0x340
  Offset      : 0xdc10
  Section     : .text
  Orc Section : .local.text._Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movl	%edx, %r13d
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	movzbl	%r13b, %r13d
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	xorl	%ebx, %ebx
    00000020: 	subq	$0x68, %rsp
    00000024: 	movq	%rcx, (%rsp)
    00000028: 	leaq	0x40(%rsp), %rbp
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x58(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp1139 # Offset: 81
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1146:
    00000060: 	movq	(%rsp), %rax
    00000064: 	movl	%r13d, %edx
    00000067: 	movl	%r14d, %esi
    0000006a: 	movq	%r15, %rdi
    0000006d: 	callq	*%rax # Offset: 109
    0000006f: 	movq	(%r12), %r9
    00000073: 	movq	0x8(%r12), %r8
    00000078: 	movq	%rbp, 0x30(%rsp)
    0000007d: 	movq	%rax, %rcx
    00000080: 	movq	%r9, %rax
    00000083: 	addq	%r8, %rax
    00000086: 	je	.Ltmp1140 # Offset: 134
    00000088: 	testq	%r9, %r9
    0000008b: 	je	.Ltmp1141 # Offset: 139
.Ltmp1140:
    00000091: 	movq	%r8, 0x28(%rsp)
    00000096: 	cmpq	$0xf, %r8
    0000009a: 	ja	.Ltmp1142 # Offset: 154
    000000a0: 	cmpq	$0x1, %r8
    000000a4: 	jne	.Ltmp1143 # Offset: 164
    000000aa: 	movzbl	(%r9), %eax
    000000ae: 	movb	%al, 0x40(%rsp)
    000000b2: 	movq	%rbp, %rax
.Ltmp1154:
    000000b5: 	movq	%r8, 0x38(%rsp)
    000000ba: 	movb	$0x0, (%rax,%r8)
    000000bf: 	cmpq	%rcx, gCount(%rip)
    000000c6: 	je	.Ltmp1144 # Offset: 198
    000000c8: 	movq	0x30(%rsp), %rdx
    000000cd: 	leaq	DATAat0x191d0(%rip), %rsi
    000000d4: 	movl	$0x1, %edi
    000000d9: 	xorl	%eax, %eax
    000000db: 	callq	__printf_chk@PLT # Offset: 219
.Ltmp1144:
    000000e0: 	movq	0x30(%rsp), %rdi
    000000e5: 	cmpq	%rbp, %rdi
    000000e8: 	je	.Ltmp1145 # Offset: 232
    000000ee: 	movq	0x40(%rsp), %rax
    000000f3: 	addl	$0x1, %ebx
    000000f6: 	leaq	0x1(%rax), %rsi
    000000fa: 	callq	_ZdlPvm@PLT # Offset: 250
    000000ff: 	cmpl	%ebx, iterations(%rip)
    00000105: 	jg	.Ltmp1146 # Offset: 261
.Ltmp1139:
    0000010b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000112: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000119: 	subq	$0x20, %rax
    0000011d: 	cmpq	%rax, %rbx
    00000120: 	je	.Ltmp1147 # Offset: 288
    00000126: 	leaq	0x10(%rbx), %rdi
    0000012a: 	movq	%rdi, (%rbx)
    0000012d: 	movq	(%r12), %rbp
    00000131: 	movq	0x8(%r12), %r12
    00000136: 	movq	%rbp, %rax
    00000139: 	addq	%r12, %rax
    0000013c: 	je	.Ltmp1148 # Offset: 316
    0000013e: 	testq	%rbp, %rbp
    00000141: 	je	.Ltmp1141 # Offset: 321
.Ltmp1148:
    00000147: 	movq	%r12, 0x28(%rsp)
    0000014c: 	cmpq	$0xf, %r12
    00000150: 	ja	.Ltmp1149 # Offset: 336
    00000156: 	cmpq	$0x1, %r12
    0000015a: 	jne	.Ltmp1150 # Offset: 346
    00000160: 	movzbl	(%rbp), %eax
    00000164: 	movb	%al, 0x10(%rbx)
.Ltmp1155:
    00000167: 	movq	%r12, 0x8(%rbx)
    0000016b: 	movb	$0x0, (%rdi,%r12)
    00000170: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000177: 	addq	$0x20, %rax
    0000017b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1157:
    00000182: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000189: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000190: 	je	.Ltmp1151 # Offset: 400
.Ltmp1156:
    00000196: 	movq	-0x20(%rax), %rbp
    0000019a: 	callq	clock@PLT # Offset: 410
    0000019f: 	movq	%rax, end_time(%rip)
    000001a6: 	movq	0x58(%rsp), %rdx
    000001ab: 	subq	%fs:0x28, %rdx
    000001b4: 	jne	.Ltmp1152 # Offset: 436
    000001ba: 	subq	start_time(%rip), %rax
    000001c1: 	pxor	%xmm0, %xmm0
    000001c5: 	movq	%rbp, %rdi
    000001c8: 	cvtsi2sd	%rax, %xmm0
    000001cd: 	divsd	DATAat0x19290(%rip), %xmm0
    000001d5: 	addq	$0x68, %rsp
    000001d9: 	popq	%rbx
    000001da: 	popq	%rbp
    000001db: 	popq	%r12
    000001dd: 	popq	%r13
    000001df: 	popq	%r14
    000001e1: 	popq	%r15
    000001e3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 483
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1145:
    000001f0: 	addl	$0x1, %ebx
    000001f3: 	cmpl	%ebx, iterations(%rip)
    000001f9: 	jg	.Ltmp1146 # Offset: 505
    000001ff: 	jmp	.Ltmp1139 # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp1143:
    00000208: 	testq	%r8, %r8
    0000020b: 	jne	.Ltmp1153 # Offset: 523
    00000211: 	movq	%rbp, %rax
    00000214: 	jmp	.Ltmp1154 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1142:
    00000220: 	leaq	0x30(%rsp), %rdi
    00000225: 	leaq	0x28(%rsp), %rsi
    0000022a: 	xorl	%edx, %edx
    0000022c: 	movq	%r8, 0x18(%rsp)
    00000231: 	movq	%r9, 0x10(%rsp)
    00000236: 	movq	%rcx, 0x8(%rsp)
    0000023b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 571
    00000240: 	movq	0x8(%rsp), %rcx
    00000245: 	movq	0x10(%rsp), %r9
    0000024a: 	movq	%rax, 0x30(%rsp)
    0000024f: 	movq	%rax, %rdi
    00000252: 	movq	0x28(%rsp), %rax
    00000257: 	movq	0x18(%rsp), %r8
    0000025c: 	movq	%rax, 0x40(%rsp)
.Ltmp1159:
    00000261: 	movq	%r8, %rdx
    00000264: 	movq	%r9, %rsi
    00000267: 	movq	%rcx, 0x8(%rsp)
    0000026c: 	callq	memcpy@PLT # Offset: 620
    00000271: 	movq	0x28(%rsp), %r8
    00000276: 	movq	0x30(%rsp), %rax
    0000027b: 	movq	0x8(%rsp), %rcx
    00000280: 	jmp	.Ltmp1154 # Offset: 640
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp1149:
    00000288: 	movq	%rbx, %rdi
    0000028b: 	leaq	0x28(%rsp), %rsi
    00000290: 	xorl	%edx, %edx
    00000292: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 658
    00000297: 	movq	%rax, (%rbx)
    0000029a: 	movq	%rax, %rdi
    0000029d: 	movq	0x28(%rsp), %rax
    000002a2: 	movq	%rax, 0x10(%rbx)
.Ltmp1158:
    000002a6: 	movq	%r12, %rdx
    000002a9: 	movq	%rbp, %rsi
    000002ac: 	callq	memcpy@PLT # Offset: 684
    000002b1: 	movq	0x28(%rsp), %r12
    000002b6: 	movq	(%rbx), %rdi
    000002b9: 	jmp	.Ltmp1155 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp1151:
    000002c0: 	movq	-0x8(%rdx), %rax
    000002c4: 	addq	$0x200, %rax
    000002ca: 	jmp	.Ltmp1156 # Offset: 714
    000002cf: 	nop # Size: 1
.Ltmp1147:
    000002d0: 	movq	%r12, %rsi
    000002d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 730
    000002df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002e6: 	jmp	.Ltmp1157 # Offset: 742
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1150:
    000002f0: 	testq	%r12, %r12
    000002f3: 	je	.Ltmp1155 # Offset: 755
    000002f9: 	jmp	.Ltmp1158 # Offset: 761
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1141:
    00000300: 	leaq	DATAat0x19008(%rip), %rdi
    00000307: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 775
.Ltmp1153:
    0000030c: 	movq	%rbp, %rdi
    0000030f: 	jmp	.Ltmp1159 # Offset: 783
.Ltmp1152:
    00000314: 	callq	__stack_chk_fail@PLT # Offset: 788
    00000319: 	endbr64
    0000031d: 	movq	%rax, %r12
    00000320: 	movq	0x30(%rsp), %rdi
    00000325: 	cmpq	%rbp, %rdi
    00000328: 	je	.Ltmp1160 # Offset: 808
    0000032a: 	movq	0x40(%rsp), %rax
    0000032f: 	leaq	0x1(%rax), %rsi
    00000333: 	callq	_ZdlPvm@PLT # Offset: 819
.Ltmp1160:
    00000338: 	movq	%r12, %rdi
    0000033b: 	callq	_Unwind_Resume@PLT # Offset: 827
DWARF CFI Instructions:
    <empty>
End of Function "_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIfEvv" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0xdf50
  Size        : 0xf5d
  MaxSize     : 0xf60
  Offset      : 0xdf50
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIfEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp1161:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1161 # Offset: 37
    00000027: 	subq	$0xdd8, %rsp
    0000002e: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x7dc8(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	movaps	%xmm7, 0x40(%rsp)
    0000004e: 	leaq	0x70(%rsp), %rax
    00000053: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    0000005b: 	leaq	0x40(%rsp), %rdi
    00000060: 	movq	%rax, 0x38(%rsp)
    00000065: 	leaq	0x7dc0(%rsp), %rbp
    0000006d: 	movq	%rax, 0x60(%rsp)
    00000072: 	movq	%rdi, 0x20(%rsp)
    00000077: 	movaps	%xmm7, 0x50(%rsp)
    0000007c: 	movl	$0x616f6c66, 0x70(%rsp)
    00000084: 	movb	$0x74, 0x74(%rsp)
    00000089: 	movq	$0x5, 0x68(%rsp)
    00000092: 	movb	$0x0, 0x75(%rsp)
    00000097: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 151
    0000009c: 	movl	init_value(%rip), %eax
    000000a2: 	leal	0x7b(%rax), %edi
    000000a5: 	callq	srand@PLT # Offset: 165
    000000aa: 	leaq	0xc0(%rsp), %rax
    000000b2: 	movabsq	$0x5851f42d4c957f2d, %rdi
    000000bc: 	movabsq	$0x14057b7ef767814f, %rsi
    000000c6: 	movq	%rax, 0x18(%rsp)
    000000cb: 	movq	%rax, %rdx
    000000ce: 	nop # Size: 2
.Ltmp1162:
    000000d0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000d7: 	pxor	%xmm0, %xmm0
    000000db: 	addq	$0x4, %rdx
    000000df: 	imulq	%rdi, %rax
    000000e3: 	addq	%rsi, %rax
    000000e6: 	movq	%rax, %rcx
    000000e9: 	movq	%rax, %r8
    000000ec: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000f3: 	shrq	$0x14, %rcx
    000000f7: 	shlq	$0x17, %r8
    000000fb: 	xorq	%r8, %rcx
    000000fe: 	xorq	%rcx, %rax
    00000101: 	sarq	$0x3, %rax
    00000105: 	cvtsi2ss	%rax, %xmm0
    0000010a: 	movss	%xmm0, -0x4(%rdx)
    0000010f: 	cmpq	%rbp, %rdx
    00000112: 	jne	.Ltmp1162 # Offset: 274
    00000114: 	pxor	%xmm0, %xmm0
    00000118: 	movq	0x18(%rsp), %r10
    0000011d: 	leaq	0xc4(%rsp), %rsi
    00000125: 	movabsq	$0x5851f42d4c957f2d, %r9
    0000012f: 	cvtsi2ssl	init_value(%rip), %xmm0
    00000137: 	movabsq	$0x14057b7ef767814f, %r8
    00000141: 	movabsq	$0x20c49ba5e353f7d, %rdi
    0000014b: 	movaps	%xmm0, %xmm3
    0000014e: 	shufps	$0xe0, %xmm0, %xmm0
    00000152: 	movlps	%xmm0, 0x160(%rsp)
    0000015a: 	shufps	$0x0, %xmm3, %xmm3
    0000015e: 	movaps	%xmm3, 0xc0(%rsp)
    00000166: 	movaps	%xmm3, 0xd0(%rsp)
    0000016e: 	movaps	%xmm3, 0xe0(%rsp)
    00000176: 	movaps	%xmm3, 0xf0(%rsp)
    0000017e: 	movaps	%xmm3, 0x100(%rsp)
    00000186: 	movaps	%xmm3, 0x110(%rsp)
    0000018e: 	movaps	%xmm3, 0x120(%rsp)
    00000196: 	movaps	%xmm3, 0x130(%rsp)
    0000019e: 	movaps	%xmm3, 0x140(%rsp)
    000001a6: 	movaps	%xmm3, 0x150(%rsp)
.Ltmp1163:
    000001ae: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000001b5: 	movss	(%rsi), %xmm0
    000001b9: 	addq	$0x4, %rsi
    000001bd: 	imulq	%r9, %rax
    000001c1: 	addq	%r8, %rax
    000001c4: 	movq	%rax, %rdx
    000001c7: 	movq	%rax, %rcx
    000001ca: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001d1: 	shlq	$0x17, %rcx
    000001d5: 	shrq	$0x14, %rdx
    000001d9: 	xorq	%rcx, %rdx
    000001dc: 	xorq	%rdx, %rax
    000001df: 	movq	%rax, %rdx
    000001e2: 	movq	%rax, %rcx
    000001e5: 	shrq	$0x6, %rdx
    000001e9: 	movq	%rdx, %rax
    000001ec: 	mulq	%rdi
    000001ef: 	movq	%rcx, %rax
    000001f2: 	imulq	$0x1f40, %rdx, %rdx
    000001f9: 	subq	%rdx, %rax
    000001fc: 	leaq	(%r10,%rax,4), %rax
    00000200: 	movss	(%rax), %xmm1
    00000204: 	movss	%xmm1, -0x4(%rsi)
    00000209: 	movss	%xmm0, (%rax)
    0000020d: 	cmpq	%rbp, %rsi
    00000210: 	jne	.Ltmp1163 # Offset: 528
    00000212: 	movq	0x18(%rsp), %rax
    00000217: 	pxor	%xmm1, %xmm1
    0000021b: 	pxor	%xmm5, %xmm5
    0000021f: 	nop # Size: 1
.Ltmp1164:
    00000220: 	movaps	%xmm3, %xmm0
    00000223: 	movdqa	%xmm5, %xmm4
    00000227: 	addq	$0x10, %rax
    0000022b: 	cmpeqps	-0x10(%rax), %xmm0
    00000230: 	pand	DATAat0x19270(%rip), %xmm0
    00000238: 	pcmpgtd	%xmm0, %xmm4
    0000023c: 	movdqa	%xmm0, %xmm2
    00000240: 	punpckldq	%xmm4, %xmm2
    00000244: 	punpckhdq	%xmm4, %xmm0
    00000248: 	paddq	%xmm2, %xmm1
    0000024c: 	paddq	%xmm0, %xmm1
    00000250: 	cmpq	%rax, %rbp
    00000253: 	jne	.Ltmp1164 # Offset: 595
    00000255: 	movq	0x60(%rsp), %r13
    0000025a: 	movdqa	%xmm1, %xmm0
    0000025e: 	movq	0x68(%rsp), %r12
    00000263: 	leaq	0x90(%rsp), %rax
    0000026b: 	movq	%rax, 0x28(%rsp)
    00000270: 	psrldq	$0x8, %xmm0
    00000275: 	movq	%rax, 0x80(%rsp)
    0000027d: 	movq	%r13, %rax
    00000280: 	paddq	%xmm0, %xmm1
    00000284: 	movq	%xmm1, gCount(%rip)
    0000028c: 	addq	%r12, %rax
    0000028f: 	je	.Ltmp1165 # Offset: 655
    00000291: 	testq	%r13, %r13
    00000294: 	je	.Ltmp1166 # Offset: 660
.Ltmp1165:
    0000029a: 	movq	%r12, 0x40(%rsp)
    0000029f: 	cmpq	$0xf, %r12
    000002a3: 	ja	.Ltmp1167 # Offset: 675
    000002a9: 	cmpq	$0x1, %r12
    000002ad: 	jne	.Ltmp1168 # Offset: 685
    000002b3: 	movzbl	(%r13), %eax
    000002b8: 	movb	%al, 0x90(%rsp)
    000002bf: 	movq	0x28(%rsp), %rax
.Ltmp1216:
    000002c4: 	movq	%r12, 0x88(%rsp)
    000002cc: 	movb	$0x0, (%rax,%r12)
    000002d1: 	movabsq	$0x3fffffffffffffff, %rax
    000002db: 	subq	0x88(%rsp), %rax
    000002e3: 	cmpq	$0xa, %rax
    000002e7: 	jbe	.Ltmp1169 # Offset: 743
    000002ed: 	leaq	0x80(%rsp), %rax
    000002f5: 	movl	$0xb, %edx
    000002fa: 	leaq	DATAat0x191e0(%rip), %rsi
    00000301: 	movq	%rax, %rdi
    00000304: 	movq	%rax, 0x30(%rsp)
    00000309: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 777
    0000030e: 	pxor	%xmm7, %xmm7
    00000312: 	xorl	%r15d, %r15d
    00000315: 	leaq	0xb0(%rsp), %r13
    0000031d: 	cvtsi2ssl	init_value(%rip), %xmm7
    00000325: 	movd	%xmm7, %ebx
    00000329: 	callq	clock@PLT # Offset: 809
    0000032e: 	movl	iterations(%rip), %edx
    00000334: 	movd	%ebx, %xmm6
    00000338: 	shufps	$0x0, %xmm6, %xmm6
    0000033c: 	movq	%rax, start_time(%rip)
    00000343: 	movaps	%xmm6, (%rsp)
    00000347: 	testl	%edx, %edx
    00000349: 	jle	.Ltmp1170 # Offset: 841
    0000034f: 	nop # Size: 1
.Ltmp1178:
    00000350: 	movq	0x18(%rsp), %rax
    00000355: 	pxor	%xmm1, %xmm1
    00000359: 	pxor	%xmm4, %xmm4
    0000035d: 	nopl	(%rax) # Size: 3
.Ltmp1171:
    00000360: 	movaps	(%rsp), %xmm0
    00000364: 	movdqa	%xmm4, %xmm3
    00000368: 	addq	$0x10, %rax
    0000036c: 	cmpeqps	-0x10(%rax), %xmm0
    00000371: 	pand	DATAat0x19270(%rip), %xmm0
    00000379: 	pcmpgtd	%xmm0, %xmm3
    0000037d: 	movdqa	%xmm0, %xmm2
    00000381: 	punpckldq	%xmm3, %xmm2
    00000385: 	punpckhdq	%xmm3, %xmm0
    00000389: 	paddq	%xmm2, %xmm1
    0000038d: 	paddq	%xmm0, %xmm1
    00000391: 	cmpq	%rax, %rbp
    00000394: 	jne	.Ltmp1171 # Offset: 916
    00000396: 	movq	0x80(%rsp), %r14
    0000039e: 	movdqa	%xmm1, %xmm0
    000003a2: 	movq	0x88(%rsp), %r12
    000003aa: 	movq	%r13, 0xa0(%rsp)
    000003b2: 	psrldq	$0x8, %xmm0
    000003b7: 	movq	%r14, %rax
    000003ba: 	paddq	%xmm0, %xmm1
    000003be: 	addq	%r12, %rax
    000003c1: 	movq	%xmm1, %rbx
    000003c6: 	je	.Ltmp1172 # Offset: 966
    000003c8: 	testq	%r14, %r14
    000003cb: 	je	.Ltmp1173 # Offset: 971
.Ltmp1172:
    000003d1: 	movq	%r12, 0x40(%rsp)
    000003d6: 	cmpq	$0xf, %r12
    000003da: 	ja	.Ltmp1174 # Offset: 986
    000003e0: 	cmpq	$0x1, %r12
    000003e4: 	jne	.Ltmp1175 # Offset: 996
    000003ea: 	movzbl	(%r14), %eax
    000003ee: 	movb	%al, 0xb0(%rsp)
    000003f5: 	movq	%r13, %rax
.Ltmp1220:
    000003f8: 	movq	%r12, 0xa8(%rsp)
    00000400: 	movb	$0x0, (%rax,%r12)
    00000405: 	cmpq	gCount(%rip), %rbx
    0000040c: 	je	.Ltmp1176 # Offset: 1036
    0000040e: 	movq	0xa0(%rsp), %rdx
    00000416: 	leaq	DATAat0x191d0(%rip), %rsi
    0000041d: 	movl	$0x1, %edi
    00000422: 	xorl	%eax, %eax
    00000424: 	callq	__printf_chk@PLT # Offset: 1060
.Ltmp1176:
    00000429: 	movq	0xa0(%rsp), %rdi
    00000431: 	cmpq	%r13, %rdi
    00000434: 	je	.Ltmp1177 # Offset: 1076
    0000043a: 	movq	0xb0(%rsp), %rax
    00000442: 	addl	$0x1, %r15d
    00000446: 	leaq	0x1(%rax), %rsi
    0000044a: 	callq	_ZdlPvm@PLT # Offset: 1098
    0000044f: 	cmpl	iterations(%rip), %r15d
    00000456: 	jl	.Ltmp1178 # Offset: 1110
.Ltmp1170:
    0000045c: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000463: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000046a: 	subq	$0x20, %rax
    0000046e: 	cmpq	%rax, %rdi
    00000471: 	je	.Ltmp1179 # Offset: 1137
    00000477: 	leaq	0x10(%rdi), %rax
    0000047b: 	movq	0x88(%rsp), %rdx
    00000483: 	movq	%rax, (%rdi)
    00000486: 	movq	0x80(%rsp), %rsi
    0000048e: 	addq	%rsi, %rdx
    00000491: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1169
    00000496: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000049d: 	addq	$0x20, %rax
    000004a1: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1228:
    000004a8: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000004af: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000004b6: 	je	.Ltmp1180 # Offset: 1206
.Ltmp1227:
    000004bc: 	movq	-0x20(%rax), %r12
    000004c0: 	callq	clock@PLT # Offset: 1216
    000004c5: 	pxor	%xmm0, %xmm0
    000004c9: 	movq	%rax, end_time(%rip)
    000004d0: 	movq	%r12, %rdi
    000004d3: 	subq	start_time(%rip), %rax
    000004da: 	cvtsi2sd	%rax, %xmm0
    000004df: 	divsd	DATAat0x19290(%rip), %xmm0
    000004e7: 	callq	_Z13record_resultdPKc # Offset: 1255
    000004ec: 	movq	0x80(%rsp), %rdi
    000004f4: 	cmpq	0x28(%rsp), %rdi
    000004f9: 	je	.Ltmp1181 # Offset: 1273
    000004fb: 	movq	0x90(%rsp), %rax
    00000503: 	leaq	0x1(%rax), %rsi
    00000507: 	callq	_ZdlPvm@PLT # Offset: 1287
.Ltmp1181:
    0000050c: 	movq	0x28(%rsp), %rax
    00000511: 	movq	0x60(%rsp), %r13
    00000516: 	movq	0x68(%rsp), %r12
    0000051b: 	movq	%rax, 0x80(%rsp)
    00000523: 	movq	%r13, %rax
    00000526: 	addq	%r12, %rax
    00000529: 	je	.Ltmp1182 # Offset: 1321
    0000052b: 	testq	%r13, %r13
    0000052e: 	je	.Ltmp1183 # Offset: 1326
.Ltmp1182:
    00000534: 	movq	%r12, 0x40(%rsp)
    00000539: 	cmpq	$0xf, %r12
    0000053d: 	ja	.Ltmp1184 # Offset: 1341
    00000543: 	cmpq	$0x1, %r12
    00000547: 	jne	.Ltmp1185 # Offset: 1351
    0000054d: 	movzbl	(%r13), %eax
    00000552: 	movb	%al, 0x90(%rsp)
    00000559: 	movq	0x28(%rsp), %rax
.Ltmp1222:
    0000055e: 	movq	%r12, 0x88(%rsp)
    00000566: 	movb	$0x0, (%rax,%r12)
    0000056b: 	movabsq	$0x3fffffffffffffff, %rax
    00000575: 	subq	0x88(%rsp), %rax
    0000057d: 	cmpq	$0xd, %rax
    00000581: 	jbe	.Ltmp1186 # Offset: 1409
    00000587: 	movq	0x30(%rsp), %rdi
    0000058c: 	movl	$0xe, %edx
    00000591: 	leaq	DATAat0x191ec(%rip), %rsi
    00000598: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1432
    0000059d: 	callq	clock@PLT # Offset: 1437
    000005a2: 	xorl	%ebx, %ebx
    000005a4: 	leaq	0xb0(%rsp), %r13
    000005ac: 	movq	%rax, start_time(%rip)
    000005b3: 	movl	iterations(%rip), %eax
    000005b9: 	testl	%eax, %eax
    000005bb: 	jle	.Ltmp1187 # Offset: 1467
    000005c1: 	nopl	(%rax) # Size: 7
.Ltmp1195:
    000005c8: 	pxor	%xmm4, %xmm4
    000005cc: 	movq	0x18(%rsp), %rax
    000005d1: 	pxor	%xmm1, %xmm1
    000005d5: 	pxor	%xmm5, %xmm5
    000005d9: 	cvtsi2ssl	init_value(%rip), %xmm4
    000005e1: 	shufps	$0x0, %xmm4, %xmm4
    000005e5: 	nopl	(%rax) # Size: 3
.Ltmp1188:
    000005e8: 	movaps	%xmm4, %xmm0
    000005eb: 	movdqa	%xmm5, %xmm3
    000005ef: 	addq	$0x10, %rax
    000005f3: 	cmpeqps	-0x10(%rax), %xmm0
    000005f8: 	pand	DATAat0x19270(%rip), %xmm0
    00000600: 	pcmpgtd	%xmm0, %xmm3
    00000604: 	movdqa	%xmm0, %xmm2
    00000608: 	punpckldq	%xmm3, %xmm2
    0000060c: 	punpckhdq	%xmm3, %xmm0
    00000610: 	paddq	%xmm2, %xmm1
    00000614: 	paddq	%xmm0, %xmm1
    00000618: 	cmpq	%rbp, %rax
    0000061b: 	jne	.Ltmp1188 # Offset: 1563
    0000061d: 	movq	0x80(%rsp), %r14
    00000625: 	movdqa	%xmm1, %xmm0
    00000629: 	movq	0x88(%rsp), %r12
    00000631: 	movq	%r13, 0xa0(%rsp)
    00000639: 	psrldq	$0x8, %xmm0
    0000063e: 	movq	%r14, %rax
    00000641: 	paddq	%xmm0, %xmm1
    00000645: 	addq	%r12, %rax
    00000648: 	movq	%xmm1, %r15
    0000064d: 	je	.Ltmp1189 # Offset: 1613
    0000064f: 	testq	%r14, %r14
    00000652: 	je	.Ltmp1190 # Offset: 1618
.Ltmp1189:
    00000658: 	movq	%r12, 0x40(%rsp)
    0000065d: 	cmpq	$0xf, %r12
    00000661: 	ja	.Ltmp1191 # Offset: 1633
    00000667: 	cmpq	$0x1, %r12
    0000066b: 	jne	.Ltmp1192 # Offset: 1643
    00000671: 	movzbl	(%r14), %eax
    00000675: 	movb	%al, 0xb0(%rsp)
    0000067c: 	movq	%r13, %rax
.Ltmp1218:
    0000067f: 	movq	%r12, 0xa8(%rsp)
    00000687: 	movb	$0x0, (%rax,%r12)
    0000068c: 	cmpq	gCount(%rip), %r15
    00000693: 	je	.Ltmp1193 # Offset: 1683
    00000695: 	movq	0xa0(%rsp), %rdx
    0000069d: 	leaq	DATAat0x191d0(%rip), %rsi
    000006a4: 	movl	$0x1, %edi
    000006a9: 	xorl	%eax, %eax
    000006ab: 	callq	__printf_chk@PLT # Offset: 1707
.Ltmp1193:
    000006b0: 	movq	0xa0(%rsp), %rdi
    000006b8: 	cmpq	%r13, %rdi
    000006bb: 	je	.Ltmp1194 # Offset: 1723
    000006c1: 	movq	0xb0(%rsp), %rax
    000006c9: 	addl	$0x1, %ebx
    000006cc: 	leaq	0x1(%rax), %rsi
    000006d0: 	callq	_ZdlPvm@PLT # Offset: 1744
    000006d5: 	cmpl	iterations(%rip), %ebx
    000006db: 	jl	.Ltmp1195 # Offset: 1755
.Ltmp1187:
    000006e1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000006e8: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000006ef: 	subq	$0x20, %rax
    000006f3: 	cmpq	%rax, %rdi
    000006f6: 	je	.Ltmp1196 # Offset: 1782
    000006fc: 	leaq	0x10(%rdi), %rax
    00000700: 	movq	0x88(%rsp), %rdx
    00000708: 	movq	%rax, (%rdi)
    0000070b: 	movq	0x80(%rsp), %rsi
    00000713: 	addq	%rsi, %rdx
    00000716: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1814
    0000071b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000722: 	addq	$0x20, %rax
    00000726: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1226:
    0000072d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000734: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000073b: 	je	.Ltmp1197 # Offset: 1851
.Ltmp1225:
    00000741: 	movq	-0x20(%rax), %rbp
    00000745: 	callq	clock@PLT # Offset: 1861
    0000074a: 	pxor	%xmm0, %xmm0
    0000074e: 	movq	%rax, end_time(%rip)
    00000755: 	movq	%rbp, %rdi
    00000758: 	subq	start_time(%rip), %rax
    0000075f: 	cvtsi2sd	%rax, %xmm0
    00000764: 	divsd	DATAat0x19290(%rip), %xmm0
    0000076c: 	callq	_Z13record_resultdPKc # Offset: 1900
    00000771: 	movq	0x80(%rsp), %rdi
    00000779: 	cmpq	0x28(%rsp), %rdi
    0000077e: 	je	.Ltmp1198 # Offset: 1918
    00000780: 	movq	0x90(%rsp), %rax
    00000788: 	leaq	0x1(%rax), %rsi
    0000078c: 	callq	_ZdlPvm@PLT # Offset: 1932
.Ltmp1198:
    00000791: 	movq	0x60(%rsp), %rbp
    00000796: 	movq	0x68(%rsp), %r12
    0000079b: 	leaq	0xb0(%rsp), %r13
    000007a3: 	movq	%r13, 0xa0(%rsp)
    000007ab: 	movq	%rbp, %rax
    000007ae: 	addq	%r12, %rax
    000007b1: 	je	.Ltmp1199 # Offset: 1969
    000007b3: 	testq	%rbp, %rbp
    000007b6: 	je	.Ltmp1200 # Offset: 1974
.Ltmp1199:
    000007bc: 	movq	%r12, 0x40(%rsp)
    000007c1: 	cmpq	$0xf, %r12
    000007c5: 	ja	.Ltmp1201 # Offset: 1989
    000007cb: 	cmpq	$0x1, %r12
    000007cf: 	jne	.Ltmp1202 # Offset: 1999
    000007d5: 	movzbl	(%rbp), %eax
    000007d9: 	movb	%al, 0xb0(%rsp)
    000007e0: 	movq	%r13, %rax
.Ltmp1224:
    000007e3: 	movq	%r12, 0xa8(%rsp)
    000007eb: 	movb	$0x0, (%rax,%r12)
    000007f0: 	movabsq	$0x3fffffffffffffff, %rax
    000007fa: 	subq	0xa8(%rsp), %rax
    00000802: 	cmpq	$0x6, %rax
    00000806: 	jbe	.Ltmp1203 # Offset: 2054
    0000080c: 	leaq	0xa0(%rsp), %rbp
    00000814: 	movl	$0x7, %edx
    00000819: 	leaq	DATAat0x191fb(%rip), %rsi
    00000820: 	movq	%rbp, %rdi
    00000823: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2083
    00000828: 	pxor	%xmm0, %xmm0
    0000082c: 	movq	0x18(%rsp), %rdi
    00000831: 	movq	%rbp, %rcx
    00000834: 	leaq	_Z6count1IfEmPT_iS0_(%rip), %rdx
    0000083b: 	cvtsi2ssl	init_value(%rip), %xmm0
    00000843: 	movl	$0x1f40, %esi
    00000848: 	callq	_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2120
    0000084d: 	movq	0xa0(%rsp), %rdi
    00000855: 	cmpq	%r13, %rdi
    00000858: 	je	.Ltmp1204 # Offset: 2136
    0000085a: 	movq	0xb0(%rsp), %rax
    00000862: 	leaq	0x1(%rax), %rsi
    00000866: 	callq	_ZdlPvm@PLT # Offset: 2150
.Ltmp1204:
    0000086b: 	leaq	0x60(%rsp), %r12
    00000870: 	leaq	DATAat0x19203(%rip), %rdx
    00000877: 	movq	%rbp, %rdi
    0000087a: 	movq	%r12, %rsi
    0000087d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2173
    00000882: 	pxor	%xmm0, %xmm0
    00000886: 	movq	0x18(%rsp), %rdi
    0000088b: 	movq	%rbp, %rcx
    0000088e: 	leaq	_Z6count2IfEmPT_iS0_(%rip), %rdx
    00000895: 	cvtsi2ssl	init_value(%rip), %xmm0
    0000089d: 	movl	$0x1f40, %esi
    000008a2: 	callq	_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2210
    000008a7: 	movq	0xa0(%rsp), %rdi
    000008af: 	cmpq	%r13, %rdi
    000008b2: 	je	.Ltmp1205 # Offset: 2226
    000008b4: 	movq	0xb0(%rsp), %rax
    000008bc: 	leaq	0x1(%rax), %rsi
    000008c0: 	callq	_ZdlPvm@PLT # Offset: 2240
.Ltmp1205:
    000008c5: 	leaq	DATAat0x1920b(%rip), %rdx
    000008cc: 	movq	%r12, %rsi
    000008cf: 	movq	%rbp, %rdi
    000008d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2258
    000008d7: 	pxor	%xmm0, %xmm0
    000008db: 	movq	0x18(%rsp), %rdi
    000008e0: 	movq	%rbp, %rcx
    000008e3: 	leaq	_Z6count3IfEmPT_iS0_(%rip), %rdx
    000008ea: 	cvtsi2ssl	init_value(%rip), %xmm0
    000008f2: 	movl	$0x1f40, %esi
    000008f7: 	callq	_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2295
    000008fc: 	movq	0xa0(%rsp), %rdi
    00000904: 	cmpq	%r13, %rdi
    00000907: 	je	.Ltmp1206 # Offset: 2311
    00000909: 	movq	0xb0(%rsp), %rax
    00000911: 	leaq	0x1(%rax), %rsi
    00000915: 	callq	_ZdlPvm@PLT # Offset: 2325
.Ltmp1206:
    0000091a: 	leaq	DATAat0x19213(%rip), %rdx
    00000921: 	movq	%r12, %rsi
    00000924: 	movq	%rbp, %rdi
    00000927: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2343
    0000092c: 	pxor	%xmm0, %xmm0
    00000930: 	movq	0x18(%rsp), %rdi
    00000935: 	movq	%rbp, %rcx
    00000938: 	leaq	_Z6count4IfEmPT_iS0_(%rip), %rdx
    0000093f: 	cvtsi2ssl	init_value(%rip), %xmm0
    00000947: 	movl	$0x1f40, %esi
    0000094c: 	callq	_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2380
    00000951: 	movq	0xa0(%rsp), %rdi
    00000959: 	cmpq	%r13, %rdi
    0000095c: 	je	.Ltmp1207 # Offset: 2396
    0000095e: 	movq	0xb0(%rsp), %rax
    00000966: 	leaq	0x1(%rax), %rsi
    0000096a: 	callq	_ZdlPvm@PLT # Offset: 2410
.Ltmp1207:
    0000096f: 	leaq	DATAat0x1921b(%rip), %rdx
    00000976: 	movq	%r12, %rsi
    00000979: 	movq	%rbp, %rdi
    0000097c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2428
    00000981: 	pxor	%xmm0, %xmm0
    00000985: 	movq	0x18(%rsp), %rdi
    0000098a: 	movq	%rbp, %rcx
    0000098d: 	leaq	_Z6count5IfEmPT_iS0_(%rip), %rdx
    00000994: 	cvtsi2ssl	init_value(%rip), %xmm0
    0000099c: 	movl	$0x1f40, %esi
    000009a1: 	callq	_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2465
    000009a6: 	movq	0xa0(%rsp), %rdi
    000009ae: 	cmpq	%r13, %rdi
    000009b1: 	je	.Ltmp1208 # Offset: 2481
    000009b3: 	movq	0xb0(%rsp), %rax
    000009bb: 	leaq	0x1(%rax), %rsi
    000009bf: 	callq	_ZdlPvm@PLT # Offset: 2495
.Ltmp1208:
    000009c4: 	leaq	DATAat0x19223(%rip), %rdx
    000009cb: 	movq	%r12, %rsi
    000009ce: 	movq	%rbp, %rdi
    000009d1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2513
    000009d6: 	pxor	%xmm0, %xmm0
    000009da: 	movq	0x18(%rsp), %rdi
    000009df: 	movq	%rbp, %rcx
    000009e2: 	leaq	_Z6count6IfEmPT_iS0_(%rip), %rdx
    000009e9: 	cvtsi2ssl	init_value(%rip), %xmm0
    000009f1: 	movl	$0x1f40, %esi
    000009f6: 	callq	_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2550
    000009fb: 	movq	0xa0(%rsp), %rdi
    00000a03: 	cmpq	%r13, %rdi
    00000a06: 	je	.Ltmp1209 # Offset: 2566
    00000a08: 	movq	0xb0(%rsp), %rax
    00000a10: 	leaq	0x1(%rax), %rsi
    00000a14: 	callq	_ZdlPvm@PLT # Offset: 2580
.Ltmp1209:
    00000a19: 	leaq	DATAat0x1922b(%rip), %rdx
    00000a20: 	movq	%r12, %rsi
    00000a23: 	movq	%rbp, %rdi
    00000a26: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2598
    00000a2b: 	pxor	%xmm0, %xmm0
    00000a2f: 	movq	0x18(%rsp), %rdi
    00000a34: 	movq	%rbp, %rcx
    00000a37: 	leaq	_Z6count7IfEmPT_iS0_(%rip), %rdx
    00000a3e: 	cvtsi2ssl	init_value(%rip), %xmm0
    00000a46: 	movl	$0x1f40, %esi
    00000a4b: 	callq	_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2635
    00000a50: 	movq	0xa0(%rsp), %rdi
    00000a58: 	cmpq	%r13, %rdi
    00000a5b: 	je	.Ltmp1210 # Offset: 2651
    00000a5d: 	movq	0xb0(%rsp), %rax
    00000a65: 	leaq	0x1(%rax), %rsi
    00000a69: 	callq	_ZdlPvm@PLT # Offset: 2665
.Ltmp1210:
    00000a6e: 	leaq	DATAat0x19233(%rip), %rdx
    00000a75: 	movq	%r12, %rsi
    00000a78: 	movq	%rbp, %rdi
    00000a7b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2683
    00000a80: 	pxor	%xmm0, %xmm0
    00000a84: 	movq	0x18(%rsp), %rdi
    00000a89: 	movq	%rbp, %rcx
    00000a8c: 	leaq	_Z6count8IfEmPT_iS0_(%rip), %rdx
    00000a93: 	cvtsi2ssl	init_value(%rip), %xmm0
    00000a9b: 	movl	$0x1f40, %esi
    00000aa0: 	callq	_Z10test_countIfPFmPfifEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2720
    00000aa5: 	movq	0xa0(%rsp), %rdi
    00000aad: 	cmpq	%r13, %rdi
    00000ab0: 	je	.Ltmp1211 # Offset: 2736
    00000ab2: 	movq	0xb0(%rsp), %rax
    00000aba: 	leaq	0x1(%rax), %rsi
    00000abe: 	callq	_ZdlPvm@PLT # Offset: 2750
.Ltmp1211:
    00000ac3: 	leaq	DATAat0x1923b(%rip), %rdx
    00000aca: 	movq	%r12, %rsi
    00000acd: 	movq	%rbp, %rdi
    00000ad0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2768
    00000ad5: 	movl	iterations(%rip), %edx
    00000adb: 	xorl	%r8d, %r8d
    00000ade: 	xorl	%ecx, %ecx
    00000ae0: 	movl	$0x1f40, %esi
    00000ae5: 	movq	0xa0(%rsp), %rdi
    00000aed: 	callq	_Z9summarizePKciiii # Offset: 2797
    00000af2: 	movq	0xa0(%rsp), %rdi
    00000afa: 	cmpq	%r13, %rdi
    00000afd: 	je	.Ltmp1212 # Offset: 2813
    00000aff: 	movq	0xb0(%rsp), %rax
    00000b07: 	leaq	0x1(%rax), %rsi
    00000b0b: 	callq	_ZdlPvm@PLT # Offset: 2827
.Ltmp1212:
    00000b10: 	movq	0x60(%rsp), %rdi
    00000b15: 	cmpq	0x38(%rsp), %rdi
    00000b1a: 	je	.Ltmp1213 # Offset: 2842
    00000b1c: 	movq	0x70(%rsp), %rax
    00000b21: 	leaq	0x1(%rax), %rsi
    00000b25: 	callq	_ZdlPvm@PLT # Offset: 2853
.Ltmp1213:
    00000b2a: 	movq	0x7dc8(%rsp), %rax
    00000b32: 	subq	%fs:0x28, %rax
    00000b3b: 	jne	.Ltmp1214 # Offset: 2875
    00000b41: 	addq	$0x7dd8, %rsp
    00000b48: 	popq	%rbx
    00000b49: 	popq	%rbp
    00000b4a: 	popq	%r12
    00000b4c: 	popq	%r13
    00000b4e: 	popq	%r14
    00000b50: 	popq	%r15
    00000b52: 	retq # Offset: 2898
.Ltmp1168:
    00000b53: 	testq	%r12, %r12
    00000b56: 	jne	.Ltmp1215 # Offset: 2902
    00000b5c: 	movq	0x28(%rsp), %rax
    00000b61: 	jmp	.Ltmp1216 # Offset: 2913
    00000b66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1177:
    00000b70: 	addl	$0x1, %r15d
    00000b74: 	cmpl	iterations(%rip), %r15d
    00000b7b: 	jl	.Ltmp1178 # Offset: 2939
    00000b81: 	jmp	.Ltmp1170 # Offset: 2945
    00000b86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1194:
    00000b90: 	addl	$0x1, %ebx
    00000b93: 	cmpl	iterations(%rip), %ebx
    00000b99: 	jl	.Ltmp1195 # Offset: 2969
    00000b9f: 	jmp	.Ltmp1187 # Offset: 2975
    00000ba4: 	nopl	(%rax) # Size: 4
.Ltmp1192:
    00000ba8: 	testq	%r12, %r12
    00000bab: 	jne	.Ltmp1217 # Offset: 2987
    00000bb1: 	movq	%r13, %rax
    00000bb4: 	jmp	.Ltmp1218 # Offset: 2996
    00000bb9: 	nopl	(%rax) # Size: 7
.Ltmp1175:
    00000bc0: 	testq	%r12, %r12
    00000bc3: 	jne	.Ltmp1219 # Offset: 3011
    00000bc9: 	movq	%r13, %rax
    00000bcc: 	jmp	.Ltmp1220 # Offset: 3020
    00000bd1: 	nopl	(%rax) # Size: 7
.Ltmp1174:
    00000bd8: 	movq	0x20(%rsp), %rsi
    00000bdd: 	leaq	0xa0(%rsp), %rdi
    00000be5: 	xorl	%edx, %edx
    00000be7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3047
    00000bec: 	movq	%rax, 0xa0(%rsp)
    00000bf4: 	movq	%rax, %rdi
    00000bf7: 	movq	0x40(%rsp), %rax
    00000bfc: 	movq	%rax, 0xb0(%rsp)
.Ltmp1231:
    00000c04: 	movq	%r12, %rdx
    00000c07: 	movq	%r14, %rsi
    00000c0a: 	callq	memcpy@PLT # Offset: 3082
    00000c0f: 	movq	0x40(%rsp), %r12
    00000c14: 	movq	0xa0(%rsp), %rax
    00000c1c: 	jmp	.Ltmp1220 # Offset: 3100
    00000c21: 	nopl	(%rax) # Size: 7
.Ltmp1191:
    00000c28: 	movq	0x20(%rsp), %rsi
    00000c2d: 	leaq	0xa0(%rsp), %rdi
    00000c35: 	xorl	%edx, %edx
    00000c37: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3127
    00000c3c: 	movq	%rax, 0xa0(%rsp)
    00000c44: 	movq	%rax, %rdi
    00000c47: 	movq	0x40(%rsp), %rax
    00000c4c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1230:
    00000c54: 	movq	%r12, %rdx
    00000c57: 	movq	%r14, %rsi
    00000c5a: 	callq	memcpy@PLT # Offset: 3162
    00000c5f: 	movq	0x40(%rsp), %r12
    00000c64: 	movq	0xa0(%rsp), %rax
    00000c6c: 	jmp	.Ltmp1218 # Offset: 3180
.Ltmp1185:
    00000c71: 	testq	%r12, %r12
    00000c74: 	jne	.Ltmp1221 # Offset: 3188
    00000c7a: 	movq	0x28(%rsp), %rax
    00000c7f: 	jmp	.Ltmp1222 # Offset: 3199
.Ltmp1202:
    00000c84: 	testq	%r12, %r12
    00000c87: 	jne	.Ltmp1223 # Offset: 3207
    00000c8d: 	movq	%r13, %rax
    00000c90: 	jmp	.Ltmp1224 # Offset: 3216
.Ltmp1184:
    00000c95: 	movq	0x20(%rsp), %rsi
    00000c9a: 	movq	0x30(%rsp), %rdi
    00000c9f: 	xorl	%edx, %edx
    00000ca1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3233
    00000ca6: 	movq	%rax, 0x80(%rsp)
    00000cae: 	movq	%rax, %rdi
    00000cb1: 	movq	0x40(%rsp), %rax
    00000cb6: 	movq	%rax, 0x90(%rsp)
.Ltmp1232:
    00000cbe: 	movq	%r12, %rdx
    00000cc1: 	movq	%r13, %rsi
    00000cc4: 	callq	memcpy@PLT # Offset: 3268
    00000cc9: 	movq	0x40(%rsp), %r12
    00000cce: 	movq	0x80(%rsp), %rax
    00000cd6: 	jmp	.Ltmp1222 # Offset: 3286
.Ltmp1201:
    00000cdb: 	movq	0x20(%rsp), %rsi
    00000ce0: 	leaq	0xa0(%rsp), %rdi
    00000ce8: 	xorl	%edx, %edx
    00000cea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3306
    00000cef: 	movq	%rax, 0xa0(%rsp)
    00000cf7: 	movq	%rax, %rdi
    00000cfa: 	movq	0x40(%rsp), %rax
    00000cff: 	movq	%rax, 0xb0(%rsp)
.Ltmp1233:
    00000d07: 	movq	%r12, %rdx
    00000d0a: 	movq	%rbp, %rsi
    00000d0d: 	callq	memcpy@PLT # Offset: 3341
    00000d12: 	movq	0x40(%rsp), %r12
    00000d17: 	movq	0xa0(%rsp), %rax
    00000d1f: 	jmp	.Ltmp1224 # Offset: 3359
.Ltmp1167:
    00000d24: 	movq	0x20(%rsp), %rsi
    00000d29: 	leaq	0x80(%rsp), %rdi
    00000d31: 	xorl	%edx, %edx
    00000d33: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3379
    00000d38: 	movq	%rax, 0x80(%rsp)
    00000d40: 	movq	%rax, %rdi
    00000d43: 	movq	0x40(%rsp), %rax
    00000d48: 	movq	%rax, 0x90(%rsp)
.Ltmp1229:
    00000d50: 	movq	%r12, %rdx
    00000d53: 	movq	%r13, %rsi
    00000d56: 	callq	memcpy@PLT # Offset: 3414
    00000d5b: 	movq	0x40(%rsp), %r12
    00000d60: 	movq	0x80(%rsp), %rax
    00000d68: 	jmp	.Ltmp1216 # Offset: 3432
.Ltmp1197:
    00000d6d: 	movq	-0x8(%rdx), %rax
    00000d71: 	addq	$0x200, %rax
    00000d77: 	jmp	.Ltmp1225 # Offset: 3447
.Ltmp1196:
    00000d7c: 	movq	0x30(%rsp), %rsi
    00000d81: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000d88: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3464
    00000d8d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000d94: 	jmp	.Ltmp1226 # Offset: 3476
.Ltmp1180:
    00000d99: 	movq	-0x8(%rdx), %rax
    00000d9d: 	addq	$0x200, %rax
    00000da3: 	jmp	.Ltmp1227 # Offset: 3491
.Ltmp1179:
    00000da8: 	movq	0x30(%rsp), %rsi
    00000dad: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000db4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3508
    00000db9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000dc0: 	jmp	.Ltmp1228 # Offset: 3520
.Ltmp1169:
    00000dc5: 	leaq	DATAat0x19184(%rip), %rdi
    00000dcc: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3532
.Ltmp1173:
    00000dd1: 	leaq	DATAat0x19008(%rip), %rdi
    00000dd8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3544
.Ltmp1183:
    00000ddd: 	leaq	DATAat0x19008(%rip), %rdi
    00000de4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3556
.Ltmp1186:
    00000de9: 	leaq	DATAat0x19184(%rip), %rdi
    00000df0: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3568
.Ltmp1190:
    00000df5: 	leaq	DATAat0x19008(%rip), %rdi
    00000dfc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3580
.Ltmp1200:
    00000e01: 	leaq	DATAat0x19008(%rip), %rdi
    00000e08: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3592
.Ltmp1203:
    00000e0d: 	leaq	DATAat0x19184(%rip), %rdi
    00000e14: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3604
.Ltmp1214:
    00000e19: 	callq	__stack_chk_fail@PLT # Offset: 3609
.Ltmp1215:
    00000e1e: 	movq	0x28(%rsp), %rdi
    00000e23: 	jmp	.Ltmp1229 # Offset: 3619
.Ltmp1217:
    00000e28: 	movq	%r13, %rdi
    00000e2b: 	jmp	.Ltmp1230 # Offset: 3627
.Ltmp1219:
    00000e30: 	movq	%r13, %rdi
    00000e33: 	jmp	.Ltmp1231 # Offset: 3635
.Ltmp1221:
    00000e38: 	movq	0x28(%rsp), %rdi
    00000e3d: 	jmp	.Ltmp1232 # Offset: 3645
.Ltmp1223:
    00000e42: 	movq	%r13, %rdi
    00000e45: 	jmp	.Ltmp1233 # Offset: 3653
.Ltmp1166:
    00000e4a: 	leaq	DATAat0x19008(%rip), %rdi
    00000e51: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3665
    00000e56: 	endbr64
.Ltmp1238:
    00000e5a: 	movq	%rax, %rbp
    00000e5d: 	jmp	.Ltmp1234 # Offset: 3677
    00000e5f: 	endbr64
.Ltmp1237:
    00000e63: 	movq	%rax, %rbp
    00000e66: 	jmp	.Ltmp1235 # Offset: 3686
    00000e68: 	endbr64
    00000e6c: 	movq	%rax, %rbp
    00000e6f: 	jmp	.Ltmp1236 # Offset: 3695
    00000e74: 	endbr64
    00000e78: 	jmp	.Ltmp1237 # Offset: 3704
    00000e7a: 	endbr64
    00000e7e: 	jmp	.Ltmp1237 # Offset: 3710
    00000e80: 	endbr64
    00000e84: 	jmp	.Ltmp1237 # Offset: 3716
    00000e86: 	endbr64
    00000e8a: 	jmp	.Ltmp1238 # Offset: 3722
    00000e8c: 	endbr64
    00000e90: 	jmp	.Ltmp1237 # Offset: 3728
    00000e92: 	endbr64
.Ltmp1241:
    00000e96: 	movq	%rax, %rbp
    00000e99: 	jmp	.Ltmp1239 # Offset: 3737
    00000e9b: 	endbr64
    00000e9f: 	jmp	.Ltmp1238 # Offset: 3743
    00000ea1: 	endbr64
    00000ea5: 	jmp	.Ltmp1237 # Offset: 3749
.Ltmp1239:
    00000ea7: 	movq	0xa0(%rsp), %rdi
    00000eaf: 	cmpq	%r13, %rdi
    00000eb2: 	je	.Ltmp1234 # Offset: 3762
    00000eb4: 	movq	0xb0(%rsp), %rax
    00000ebc: 	leaq	0x1(%rax), %rsi
    00000ec0: 	callq	_ZdlPvm@PLT # Offset: 3776
.Ltmp1234:
    00000ec5: 	movq	0x80(%rsp), %rdi
    00000ecd: 	cmpq	0x28(%rsp), %rdi
    00000ed2: 	je	.Ltmp1236 # Offset: 3794
    00000ed4: 	movq	0x90(%rsp), %rax
    00000edc: 	leaq	0x1(%rax), %rsi
    00000ee0: 	callq	_ZdlPvm@PLT # Offset: 3808
    00000ee5: 	jmp	.Ltmp1236 # Offset: 3813
.Ltmp1235:
    00000ee7: 	movq	0xa0(%rsp), %rdi
    00000eef: 	cmpq	%r13, %rdi
    00000ef2: 	je	.Ltmp1236 # Offset: 3826
    00000ef4: 	movq	0xb0(%rsp), %rax
    00000efc: 	leaq	0x1(%rax), %rsi
    00000f00: 	callq	_ZdlPvm@PLT # Offset: 3840
.Ltmp1236:
    00000f05: 	movq	0x60(%rsp), %rdi
    00000f0a: 	cmpq	0x38(%rsp), %rdi
    00000f0f: 	je	.Ltmp1240 # Offset: 3855
    00000f11: 	movq	0x70(%rsp), %rax
    00000f16: 	leaq	0x1(%rax), %rsi
    00000f1a: 	callq	_ZdlPvm@PLT # Offset: 3866
.Ltmp1240:
    00000f1f: 	movq	%rbp, %rdi
    00000f22: 	callq	_Unwind_Resume@PLT # Offset: 3874
    00000f27: 	endbr64
    00000f2b: 	jmp	.Ltmp1237 # Offset: 3883
    00000f30: 	endbr64
    00000f34: 	jmp	.Ltmp1237 # Offset: 3892
    00000f39: 	endbr64
    00000f3d: 	jmp	.Ltmp1237 # Offset: 3901
    00000f42: 	endbr64
    00000f46: 	jmp	.Ltmp1241 # Offset: 3910
    00000f4b: 	endbr64
    00000f4f: 	jmp	.Ltmp1237 # Offset: 3919
    00000f54: 	endbr64
    00000f58: 	jmp	.Ltmp1238 # Offset: 3928
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIfEvv"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0xeeb0
  Size        : 0xf07
  MaxSize     : 0xf10
  Offset      : 0xeeb0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp1242:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1242 # Offset: 37
    00000027: 	subq	$0xac8, %rsp
    0000002e: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm1
    00000036: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm2
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0xfab8(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x60(%rsp), %rax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	movaps	%xmm1, 0x30(%rsp)
    00000060: 	movq	%rax, 0x28(%rsp)
    00000065: 	leaq	0xfab0(%rsp), %rbx
    0000006d: 	movq	%rax, 0x50(%rsp)
    00000072: 	movabsq	$0x745f3436746e6975, %rax
    0000007c: 	movq	%rax, 0x60(%rsp)
    00000081: 	movq	%rdi, 0x10(%rsp)
    00000086: 	movaps	%xmm2, 0x40(%rsp)
    0000008b: 	movq	$0x8, 0x58(%rsp)
    00000094: 	movb	$0x0, 0x68(%rsp)
    00000099: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 153
    0000009e: 	movl	init_value(%rip), %eax
    000000a4: 	leal	0x7b(%rax), %edi
    000000a7: 	callq	srand@PLT # Offset: 167
    000000ac: 	leaq	0xb0(%rsp), %rax
    000000b4: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000be: 	movabsq	$0x14057b7ef767814f, %rdi
    000000c8: 	movq	%rax, (%rsp)
    000000cc: 	movq	%rax, %rdx
    000000cf: 	nop # Size: 1
.Ltmp1243:
    000000d0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000d7: 	addq	$0x8, %rdx
    000000db: 	imulq	%r8, %rax
    000000df: 	addq	%rdi, %rax
    000000e2: 	movq	%rax, %rcx
    000000e5: 	movq	%rax, %rsi
    000000e8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ef: 	shrq	$0x14, %rcx
    000000f3: 	shlq	$0x17, %rsi
    000000f7: 	xorq	%rsi, %rcx
    000000fa: 	xorq	%rcx, %rax
    000000fd: 	sarq	$0x3, %rax
    00000101: 	movq	%rax, -0x8(%rdx)
    00000105: 	cmpq	%rbx, %rdx
    00000108: 	jne	.Ltmp1243 # Offset: 264
    0000010a: 	movslq	init_value(%rip), %rdi
    00000111: 	movq	(%rsp), %rax
    00000115: 	leaq	0x200(%rsp), %rdx
    0000011d: 	movq	%rdi, %xmm0
    00000122: 	punpcklqdq	%xmm0, %xmm0
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1244:
    00000130: 	movaps	%xmm0, (%rax)
    00000133: 	addq	$0x10, %rax
    00000137: 	cmpq	%rdx, %rax
    0000013a: 	jne	.Ltmp1244 # Offset: 314
    0000013c: 	movq	(%rsp), %r11
    00000140: 	leaq	0xb8(%rsp), %rsi
    00000148: 	movabsq	$0x5851f42d4c957f2d, %r10
    00000152: 	movabsq	$0x14057b7ef767814f, %r9
    0000015c: 	movabsq	$0x20c49ba5e353f7d, %r8
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1245:
    00000170: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000177: 	movq	(%rsi), %rbp
    0000017a: 	addq	$0x8, %rsi
    0000017e: 	imulq	%r10, %rax
    00000182: 	addq	%r9, %rax
    00000185: 	movq	%rax, %rdx
    00000188: 	movq	%rax, %rcx
    0000018b: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000192: 	shlq	$0x17, %rcx
    00000196: 	shrq	$0x14, %rdx
    0000019a: 	xorq	%rcx, %rdx
    0000019d: 	xorq	%rdx, %rax
    000001a0: 	movq	%rax, %rdx
    000001a3: 	movq	%rax, %rcx
    000001a6: 	shrq	$0x6, %rdx
    000001aa: 	movq	%rdx, %rax
    000001ad: 	mulq	%r8
    000001b0: 	movq	%rcx, %rax
    000001b3: 	imulq	$0x1f40, %rdx, %rdx
    000001ba: 	subq	%rdx, %rax
    000001bd: 	leaq	(%r11,%rax,8), %rax
    000001c1: 	movq	(%rax), %rdx
    000001c4: 	movq	%rdx, -0x8(%rsi)
    000001c8: 	movq	%rbp, (%rax)
    000001cb: 	cmpq	%rbx, %rsi
    000001ce: 	jne	.Ltmp1245 # Offset: 462
    000001d0: 	movq	(%rsp), %rax
    000001d4: 	xorl	%edx, %edx
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1246:
    000001e0: 	xorl	%ecx, %ecx
    000001e2: 	cmpq	(%rax), %rdi
    000001e5: 	sete	%cl
    000001e8: 	addq	$0x8, %rax
    000001ec: 	addq	%rcx, %rdx
    000001ef: 	cmpq	%rbx, %rax
    000001f2: 	jne	.Ltmp1246 # Offset: 498
    000001f4: 	movq	0x50(%rsp), %rbp
    000001f9: 	leaq	0x80(%rsp), %rax
    00000201: 	movq	0x58(%rsp), %r12
    00000206: 	movq	%rdx, gCount(%rip)
    0000020d: 	movq	%rax, 0x18(%rsp)
    00000212: 	movq	%rax, 0x70(%rsp)
    00000217: 	movq	%rbp, %rax
    0000021a: 	addq	%r12, %rax
    0000021d: 	je	.Ltmp1247 # Offset: 541
    0000021f: 	testq	%rbp, %rbp
    00000222: 	je	.Ltmp1248 # Offset: 546
.Ltmp1247:
    00000228: 	movq	%r12, 0x30(%rsp)
    0000022d: 	cmpq	$0xf, %r12
    00000231: 	ja	.Ltmp1249 # Offset: 561
    00000237: 	cmpq	$0x1, %r12
    0000023b: 	jne	.Ltmp1250 # Offset: 571
    00000241: 	movzbl	(%rbp), %eax
    00000245: 	movb	%al, 0x80(%rsp)
    0000024c: 	movq	0x18(%rsp), %rax
.Ltmp1303:
    00000251: 	movq	%r12, 0x78(%rsp)
    00000256: 	movb	$0x0, (%rax,%r12)
    0000025b: 	movabsq	$0x3fffffffffffffff, %rax
    00000265: 	subq	0x78(%rsp), %rax
    0000026a: 	cmpq	$0xa, %rax
    0000026e: 	jbe	.Ltmp1251 # Offset: 622
    00000274: 	leaq	0x70(%rsp), %rax
    00000279: 	movl	$0xb, %edx
    0000027e: 	leaq	DATAat0x191e0(%rip), %rsi
    00000285: 	movq	%rax, %rdi
    00000288: 	movq	%rax, 0x20(%rsp)
    0000028d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 653
    00000292: 	movslq	init_value(%rip), %r12
    00000299: 	leaq	0xa0(%rsp), %r15
    000002a1: 	callq	clock@PLT # Offset: 673
    000002a6: 	movl	iterations(%rip), %edx
    000002ac: 	movl	$0x0, 0x8(%rsp)
    000002b4: 	movq	%rax, start_time(%rip)
    000002bb: 	testl	%edx, %edx
    000002bd: 	jle	.Ltmp1252 # Offset: 701
    000002c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1260:
    000002c8: 	movq	(%rsp), %rax
    000002cc: 	xorl	%ebp, %ebp
    000002ce: 	nop # Size: 2
.Ltmp1253:
    000002d0: 	xorl	%edx, %edx
    000002d2: 	cmpq	(%rax), %r12
    000002d5: 	sete	%dl
    000002d8: 	addq	$0x8, %rax
    000002dc: 	addq	%rdx, %rbp
    000002df: 	cmpq	%rbx, %rax
    000002e2: 	jne	.Ltmp1253 # Offset: 738
    000002e4: 	movq	0x70(%rsp), %r14
    000002e9: 	movq	0x78(%rsp), %r13
    000002ee: 	movq	%r15, 0x90(%rsp)
    000002f6: 	movq	%r14, %rax
    000002f9: 	addq	%r13, %rax
    000002fc: 	je	.Ltmp1254 # Offset: 764
    000002fe: 	testq	%r14, %r14
    00000301: 	je	.Ltmp1255 # Offset: 769
.Ltmp1254:
    00000307: 	movq	%r13, 0x30(%rsp)
    0000030c: 	cmpq	$0xf, %r13
    00000310: 	ja	.Ltmp1256 # Offset: 784
    00000316: 	cmpq	$0x1, %r13
    0000031a: 	jne	.Ltmp1257 # Offset: 794
    00000320: 	movzbl	(%r14), %eax
    00000324: 	movb	%al, 0xa0(%rsp)
    0000032b: 	movq	%r15, %rax
.Ltmp1307:
    0000032e: 	movq	%r13, 0x98(%rsp)
    00000336: 	movb	$0x0, (%rax,%r13)
    0000033b: 	cmpq	gCount(%rip), %rbp
    00000342: 	je	.Ltmp1258 # Offset: 834
    00000344: 	movq	0x90(%rsp), %rdx
    0000034c: 	leaq	DATAat0x191d0(%rip), %rsi
    00000353: 	movl	$0x1, %edi
    00000358: 	xorl	%eax, %eax
    0000035a: 	callq	__printf_chk@PLT # Offset: 858
.Ltmp1258:
    0000035f: 	movq	0x90(%rsp), %rdi
    00000367: 	cmpq	%r15, %rdi
    0000036a: 	je	.Ltmp1259 # Offset: 874
    00000370: 	movq	0xa0(%rsp), %rax
    00000378: 	leaq	0x1(%rax), %rsi
    0000037c: 	callq	_ZdlPvm@PLT # Offset: 892
    00000381: 	addl	$0x1, 0x8(%rsp)
    00000386: 	movl	0x8(%rsp), %eax
    0000038a: 	cmpl	%eax, iterations(%rip)
    00000390: 	jg	.Ltmp1260 # Offset: 912
.Ltmp1252:
    00000396: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000039d: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000003a4: 	subq	$0x20, %rax
    000003a8: 	cmpq	%rax, %rdi
    000003ab: 	je	.Ltmp1261 # Offset: 939
    000003b1: 	leaq	0x10(%rdi), %rax
    000003b5: 	movq	0x78(%rsp), %rdx
    000003ba: 	movq	%rax, (%rdi)
    000003bd: 	movq	0x70(%rsp), %rsi
    000003c2: 	addq	%rsi, %rdx
    000003c5: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 965
    000003ca: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d1: 	addq	$0x20, %rax
    000003d5: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1316:
    000003dc: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003e3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003ea: 	je	.Ltmp1262 # Offset: 1002
.Ltmp1315:
    000003f0: 	movq	-0x20(%rax), %rbp
    000003f4: 	callq	clock@PLT # Offset: 1012
    000003f9: 	pxor	%xmm0, %xmm0
    000003fd: 	movq	%rax, end_time(%rip)
    00000404: 	movq	%rbp, %rdi
    00000407: 	subq	start_time(%rip), %rax
    0000040e: 	cvtsi2sd	%rax, %xmm0
    00000413: 	divsd	DATAat0x19290(%rip), %xmm0
    0000041b: 	callq	_Z13record_resultdPKc # Offset: 1051
    00000420: 	movq	0x70(%rsp), %rdi
    00000425: 	cmpq	0x18(%rsp), %rdi
    0000042a: 	je	.Ltmp1263 # Offset: 1066
    0000042c: 	movq	0x80(%rsp), %rax
    00000434: 	leaq	0x1(%rax), %rsi
    00000438: 	callq	_ZdlPvm@PLT # Offset: 1080
.Ltmp1263:
    0000043d: 	leaq	0x50(%rsp), %rax
    00000442: 	movq	0x20(%rsp), %rdi
    00000447: 	leaq	DATAat0x191ec(%rip), %rdx
    0000044e: 	movq	%rax, %rsi
    00000451: 	movq	%rax, 0x8(%rsp)
    00000456: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1110
    0000045b: 	callq	clock@PLT # Offset: 1115
    00000460: 	xorl	%r14d, %r14d
    00000463: 	leaq	0xa0(%rsp), %r15
    0000046b: 	movq	%rax, start_time(%rip)
    00000472: 	movl	iterations(%rip), %eax
    00000478: 	testl	%eax, %eax
    0000047a: 	jle	.Ltmp1264 # Offset: 1146
.Ltmp1272:
    00000480: 	movslq	init_value(%rip), %rcx
    00000487: 	movq	(%rsp), %rax
    0000048b: 	xorl	%ebp, %ebp
    0000048d: 	nopl	(%rax) # Size: 3
.Ltmp1265:
    00000490: 	xorl	%edx, %edx
    00000492: 	cmpq	(%rax), %rcx
    00000495: 	sete	%dl
    00000498: 	addq	$0x8, %rax
    0000049c: 	addq	%rdx, %rbp
    0000049f: 	cmpq	%rbx, %rax
    000004a2: 	jne	.Ltmp1265 # Offset: 1186
    000004a4: 	movq	0x70(%rsp), %r13
    000004a9: 	movq	0x78(%rsp), %r12
    000004ae: 	movq	%r15, 0x90(%rsp)
    000004b6: 	movq	%r13, %rax
    000004b9: 	addq	%r12, %rax
    000004bc: 	je	.Ltmp1266 # Offset: 1212
    000004be: 	testq	%r13, %r13
    000004c1: 	je	.Ltmp1267 # Offset: 1217
.Ltmp1266:
    000004c7: 	movq	%r12, 0x30(%rsp)
    000004cc: 	cmpq	$0xf, %r12
    000004d0: 	ja	.Ltmp1268 # Offset: 1232
    000004d6: 	cmpq	$0x1, %r12
    000004da: 	jne	.Ltmp1269 # Offset: 1242
    000004e0: 	movzbl	(%r13), %eax
    000004e5: 	movb	%al, 0xa0(%rsp)
    000004ec: 	movq	%r15, %rax
.Ltmp1305:
    000004ef: 	movq	%r12, 0x98(%rsp)
    000004f7: 	movb	$0x0, (%rax,%r12)
    000004fc: 	cmpq	gCount(%rip), %rbp
    00000503: 	je	.Ltmp1270 # Offset: 1283
    00000505: 	movq	0x90(%rsp), %rdx
    0000050d: 	leaq	DATAat0x191d0(%rip), %rsi
    00000514: 	movl	$0x1, %edi
    00000519: 	xorl	%eax, %eax
    0000051b: 	callq	__printf_chk@PLT # Offset: 1307
.Ltmp1270:
    00000520: 	movq	0x90(%rsp), %rdi
    00000528: 	cmpq	%r15, %rdi
    0000052b: 	je	.Ltmp1271 # Offset: 1323
    00000531: 	movq	0xa0(%rsp), %rax
    00000539: 	addl	$0x1, %r14d
    0000053d: 	leaq	0x1(%rax), %rsi
    00000541: 	callq	_ZdlPvm@PLT # Offset: 1345
    00000546: 	cmpl	iterations(%rip), %r14d
    0000054d: 	jl	.Ltmp1272 # Offset: 1357
.Ltmp1264:
    00000553: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000055a: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000561: 	subq	$0x20, %rax
    00000565: 	cmpq	%rax, %rdi
    00000568: 	je	.Ltmp1273 # Offset: 1384
    0000056e: 	leaq	0x10(%rdi), %rax
    00000572: 	movq	0x78(%rsp), %rdx
    00000577: 	movq	%rax, (%rdi)
    0000057a: 	movq	0x70(%rsp), %rsi
    0000057f: 	addq	%rsi, %rdx
    00000582: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1410
    00000587: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000058e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000595: 	addq	$0x20, %rax
    00000599: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000005a0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000005a7: 	je	.Ltmp1274 # Offset: 1447
.Ltmp1314:
    000005ad: 	movq	-0x20(%rax), %rbp
    000005b1: 	callq	clock@PLT # Offset: 1457
    000005b6: 	pxor	%xmm0, %xmm0
    000005ba: 	movq	%rax, end_time(%rip)
    000005c1: 	movq	%rbp, %rdi
    000005c4: 	subq	start_time(%rip), %rax
    000005cb: 	cvtsi2sd	%rax, %xmm0
    000005d0: 	divsd	DATAat0x19290(%rip), %xmm0
    000005d8: 	callq	_Z13record_resultdPKc # Offset: 1496
    000005dd: 	movq	0x70(%rsp), %rdi
    000005e2: 	cmpq	0x18(%rsp), %rdi
    000005e7: 	je	.Ltmp1275 # Offset: 1511
    000005e9: 	movq	0x80(%rsp), %rax
    000005f1: 	leaq	0x1(%rax), %rsi
    000005f5: 	callq	_ZdlPvm@PLT # Offset: 1525
.Ltmp1275:
    000005fa: 	movq	0x50(%rsp), %rbp
    000005ff: 	movq	0x58(%rsp), %r12
    00000604: 	leaq	0xa0(%rsp), %r15
    0000060c: 	movq	%r15, 0x90(%rsp)
    00000614: 	movq	%rbp, %rax
    00000617: 	addq	%r12, %rax
    0000061a: 	je	.Ltmp1276 # Offset: 1562
    0000061c: 	testq	%rbp, %rbp
    0000061f: 	je	.Ltmp1277 # Offset: 1567
.Ltmp1276:
    00000625: 	movq	%r12, 0x30(%rsp)
    0000062a: 	cmpq	$0xf, %r12
    0000062e: 	ja	.Ltmp1278 # Offset: 1582
    00000634: 	cmpq	$0x1, %r12
    00000638: 	jne	.Ltmp1279 # Offset: 1592
    0000063e: 	movzbl	(%rbp), %eax
    00000642: 	movb	%al, 0xa0(%rsp)
    00000649: 	movq	%r15, %rax
.Ltmp1309:
    0000064c: 	movq	%r12, 0x98(%rsp)
    00000654: 	movb	$0x0, (%rax,%r12)
    00000659: 	movabsq	$0x3fffffffffffffff, %rax
    00000663: 	subq	0x98(%rsp), %rax
    0000066b: 	cmpq	$0x6, %rax
    0000066f: 	jbe	.Ltmp1280 # Offset: 1647
    00000675: 	leaq	0x90(%rsp), %rbp
    0000067d: 	movl	$0x7, %edx
    00000682: 	leaq	DATAat0x191fb(%rip), %rsi
    00000689: 	movq	%rbp, %rdi
    0000068c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1676
    00000691: 	movslq	init_value(%rip), %rdx
    00000698: 	movq	(%rsp), %rdi
    0000069c: 	movq	%rbp, %r8
    0000069f: 	leaq	_Z6count1ImEmPT_iS0_(%rip), %rcx
    000006a6: 	movl	$0x1f40, %esi
    000006ab: 	callq	_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1707
    000006b0: 	movq	0x90(%rsp), %rdi
    000006b8: 	cmpq	%r15, %rdi
    000006bb: 	je	.Ltmp1281 # Offset: 1723
    000006bd: 	movq	0xa0(%rsp), %rax
    000006c5: 	leaq	0x1(%rax), %rsi
    000006c9: 	callq	_ZdlPvm@PLT # Offset: 1737
.Ltmp1281:
    000006ce: 	movq	0x50(%rsp), %r13
    000006d3: 	movq	0x58(%rsp), %r12
    000006d8: 	movq	%r15, 0x90(%rsp)
    000006e0: 	movq	%r13, %rax
    000006e3: 	addq	%r12, %rax
    000006e6: 	je	.Ltmp1282 # Offset: 1766
    000006e8: 	testq	%r13, %r13
    000006eb: 	je	.Ltmp1283 # Offset: 1771
.Ltmp1282:
    000006f1: 	movq	%r12, 0x30(%rsp)
    000006f6: 	cmpq	$0xf, %r12
    000006fa: 	ja	.Ltmp1284 # Offset: 1786
    00000700: 	cmpq	$0x1, %r12
    00000704: 	jne	.Ltmp1285 # Offset: 1796
    0000070a: 	movzbl	(%r13), %eax
    0000070f: 	movb	%al, 0xa0(%rsp)
    00000716: 	movq	%r15, %rax
.Ltmp1313:
    00000719: 	movq	%r12, 0x98(%rsp)
    00000721: 	movb	$0x0, (%rax,%r12)
    00000726: 	movabsq	$0x3fffffffffffffff, %rax
    00000730: 	subq	0x98(%rsp), %rax
    00000738: 	cmpq	$0x6, %rax
    0000073c: 	jbe	.Ltmp1286 # Offset: 1852
    00000742: 	movl	$0x7, %edx
    00000747: 	leaq	DATAat0x19203(%rip), %rsi
    0000074e: 	movq	%rbp, %rdi
    00000751: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1873
    00000756: 	movslq	init_value(%rip), %rdx
    0000075d: 	movq	(%rsp), %rdi
    00000761: 	movq	%rbp, %r8
    00000764: 	leaq	_Z6count2ImEmPT_iS0_(%rip), %rcx
    0000076b: 	movl	$0x1f40, %esi
    00000770: 	callq	_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1904
    00000775: 	movq	0x90(%rsp), %rdi
    0000077d: 	cmpq	%r15, %rdi
    00000780: 	je	.Ltmp1287 # Offset: 1920
    00000782: 	movq	0xa0(%rsp), %rax
    0000078a: 	leaq	0x1(%rax), %rsi
    0000078e: 	callq	_ZdlPvm@PLT # Offset: 1934
.Ltmp1287:
    00000793: 	movq	0x50(%rsp), %r13
    00000798: 	movq	0x58(%rsp), %r12
    0000079d: 	movq	%r15, 0x90(%rsp)
    000007a5: 	movq	%r13, %rax
    000007a8: 	addq	%r12, %rax
    000007ab: 	je	.Ltmp1288 # Offset: 1963
    000007ad: 	testq	%r13, %r13
    000007b0: 	je	.Ltmp1289 # Offset: 1968
.Ltmp1288:
    000007b6: 	movq	%r12, 0x30(%rsp)
    000007bb: 	cmpq	$0xf, %r12
    000007bf: 	ja	.Ltmp1290 # Offset: 1983
    000007c5: 	cmpq	$0x1, %r12
    000007c9: 	jne	.Ltmp1291 # Offset: 1993
    000007cf: 	movzbl	(%r13), %eax
    000007d4: 	movb	%al, 0xa0(%rsp)
    000007db: 	movq	%r15, %rax
.Ltmp1311:
    000007de: 	movq	%r12, 0x98(%rsp)
    000007e6: 	movb	$0x0, (%rax,%r12)
    000007eb: 	movabsq	$0x3fffffffffffffff, %rax
    000007f5: 	subq	0x98(%rsp), %rax
    000007fd: 	cmpq	$0x6, %rax
    00000801: 	jbe	.Ltmp1292 # Offset: 2049
    00000807: 	movl	$0x7, %edx
    0000080c: 	leaq	DATAat0x1920b(%rip), %rsi
    00000813: 	movq	%rbp, %rdi
    00000816: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2070
    0000081b: 	movslq	init_value(%rip), %rdx
    00000822: 	movq	(%rsp), %rdi
    00000826: 	movq	%rbp, %r8
    00000829: 	leaq	_Z6count3ImEmPT_iS0_(%rip), %rcx
    00000830: 	movl	$0x1f40, %esi
    00000835: 	callq	_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2101
    0000083a: 	movq	0x90(%rsp), %rdi
    00000842: 	cmpq	%r15, %rdi
    00000845: 	je	.Ltmp1293 # Offset: 2117
    00000847: 	movq	0xa0(%rsp), %rax
    0000084f: 	leaq	0x1(%rax), %rsi
    00000853: 	callq	_ZdlPvm@PLT # Offset: 2131
.Ltmp1293:
    00000858: 	movq	0x8(%rsp), %rsi
    0000085d: 	leaq	DATAat0x19213(%rip), %rdx
    00000864: 	movq	%rbp, %rdi
    00000867: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2151
    0000086c: 	movslq	init_value(%rip), %rdx
    00000873: 	movq	(%rsp), %rdi
    00000877: 	movq	%rbp, %r8
    0000087a: 	leaq	_Z6count4ImEmPT_iS0_(%rip), %rcx
    00000881: 	movl	$0x1f40, %esi
    00000886: 	callq	_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2182
    0000088b: 	movq	0x90(%rsp), %rdi
    00000893: 	cmpq	%r15, %rdi
    00000896: 	je	.Ltmp1294 # Offset: 2198
    00000898: 	movq	0xa0(%rsp), %rax
    000008a0: 	leaq	0x1(%rax), %rsi
    000008a4: 	callq	_ZdlPvm@PLT # Offset: 2212
.Ltmp1294:
    000008a9: 	movq	0x8(%rsp), %rsi
    000008ae: 	leaq	DATAat0x1921b(%rip), %rdx
    000008b5: 	movq	%rbp, %rdi
    000008b8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2232
    000008bd: 	movslq	init_value(%rip), %rdx
    000008c4: 	movq	(%rsp), %rdi
    000008c8: 	movq	%rbp, %r8
    000008cb: 	leaq	_Z6count5ImEmPT_iS0_(%rip), %rcx
    000008d2: 	movl	$0x1f40, %esi
    000008d7: 	callq	_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2263
    000008dc: 	movq	0x90(%rsp), %rdi
    000008e4: 	cmpq	%r15, %rdi
    000008e7: 	je	.Ltmp1295 # Offset: 2279
    000008e9: 	movq	0xa0(%rsp), %rax
    000008f1: 	leaq	0x1(%rax), %rsi
    000008f5: 	callq	_ZdlPvm@PLT # Offset: 2293
.Ltmp1295:
    000008fa: 	movq	0x8(%rsp), %rsi
    000008ff: 	leaq	DATAat0x19223(%rip), %rdx
    00000906: 	movq	%rbp, %rdi
    00000909: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2313
    0000090e: 	movslq	init_value(%rip), %rdx
    00000915: 	movq	(%rsp), %rdi
    00000919: 	movq	%rbp, %r8
    0000091c: 	leaq	_Z6count6ImEmPT_iS0_(%rip), %rcx
    00000923: 	movl	$0x1f40, %esi
    00000928: 	callq	_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2344
    0000092d: 	movq	0x90(%rsp), %rdi
    00000935: 	cmpq	%r15, %rdi
    00000938: 	je	.Ltmp1296 # Offset: 2360
    0000093a: 	movq	0xa0(%rsp), %rax
    00000942: 	leaq	0x1(%rax), %rsi
    00000946: 	callq	_ZdlPvm@PLT # Offset: 2374
.Ltmp1296:
    0000094b: 	movq	0x8(%rsp), %rsi
    00000950: 	leaq	DATAat0x1922b(%rip), %rdx
    00000957: 	movq	%rbp, %rdi
    0000095a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2394
    0000095f: 	movslq	init_value(%rip), %rdx
    00000966: 	movq	(%rsp), %rdi
    0000096a: 	movq	%rbp, %r8
    0000096d: 	leaq	_Z6count7ImEmPT_iS0_(%rip), %rcx
    00000974: 	movl	$0x1f40, %esi
    00000979: 	callq	_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2425
    0000097e: 	movq	0x90(%rsp), %rdi
    00000986: 	cmpq	%r15, %rdi
    00000989: 	je	.Ltmp1297 # Offset: 2441
    0000098b: 	movq	0xa0(%rsp), %rax
    00000993: 	leaq	0x1(%rax), %rsi
    00000997: 	callq	_ZdlPvm@PLT # Offset: 2455
.Ltmp1297:
    0000099c: 	movq	0x8(%rsp), %rsi
    000009a1: 	leaq	DATAat0x19233(%rip), %rdx
    000009a8: 	movq	%rbp, %rdi
    000009ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2475
    000009b0: 	movslq	init_value(%rip), %rdx
    000009b7: 	movq	(%rsp), %rdi
    000009bb: 	movq	%rbp, %r8
    000009be: 	leaq	_Z6count8ImEmPT_iS0_(%rip), %rcx
    000009c5: 	movl	$0x1f40, %esi
    000009ca: 	callq	_Z10test_countImPFmPmimEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2506
    000009cf: 	movq	0x90(%rsp), %rdi
    000009d7: 	cmpq	%r15, %rdi
    000009da: 	je	.Ltmp1298 # Offset: 2522
    000009dc: 	movq	0xa0(%rsp), %rax
    000009e4: 	leaq	0x1(%rax), %rsi
    000009e8: 	callq	_ZdlPvm@PLT # Offset: 2536
.Ltmp1298:
    000009ed: 	movq	0x8(%rsp), %rsi
    000009f2: 	leaq	DATAat0x1923b(%rip), %rdx
    000009f9: 	movq	%rbp, %rdi
    000009fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2556
    00000a01: 	movl	iterations(%rip), %edx
    00000a07: 	xorl	%r8d, %r8d
    00000a0a: 	xorl	%ecx, %ecx
    00000a0c: 	movl	$0x1f40, %esi
    00000a11: 	movq	0x90(%rsp), %rdi
    00000a19: 	callq	_Z9summarizePKciiii # Offset: 2585
    00000a1e: 	movq	0x90(%rsp), %rdi
    00000a26: 	cmpq	%r15, %rdi
    00000a29: 	je	.Ltmp1299 # Offset: 2601
    00000a2b: 	movq	0xa0(%rsp), %rax
    00000a33: 	leaq	0x1(%rax), %rsi
    00000a37: 	callq	_ZdlPvm@PLT # Offset: 2615
.Ltmp1299:
    00000a3c: 	movq	0x50(%rsp), %rdi
    00000a41: 	cmpq	0x28(%rsp), %rdi
    00000a46: 	je	.Ltmp1300 # Offset: 2630
    00000a48: 	movq	0x60(%rsp), %rax
    00000a4d: 	leaq	0x1(%rax), %rsi
    00000a51: 	callq	_ZdlPvm@PLT # Offset: 2641
.Ltmp1300:
    00000a56: 	movq	0xfab8(%rsp), %rax
    00000a5e: 	subq	%fs:0x28, %rax
    00000a67: 	jne	.Ltmp1301 # Offset: 2663
    00000a6d: 	addq	$0xfac8, %rsp
    00000a74: 	popq	%rbx
    00000a75: 	popq	%rbp
    00000a76: 	popq	%r12
    00000a78: 	popq	%r13
    00000a7a: 	popq	%r14
    00000a7c: 	popq	%r15
    00000a7e: 	retq # Offset: 2686
.Ltmp1250:
    00000a7f: 	testq	%r12, %r12
    00000a82: 	jne	.Ltmp1302 # Offset: 2690
    00000a88: 	movq	0x18(%rsp), %rax
    00000a8d: 	jmp	.Ltmp1303 # Offset: 2701
    00000a92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1259:
    00000a98: 	addl	$0x1, 0x8(%rsp)
    00000a9d: 	movl	0x8(%rsp), %eax
    00000aa1: 	cmpl	iterations(%rip), %eax
    00000aa7: 	jl	.Ltmp1260 # Offset: 2727
    00000aad: 	jmp	.Ltmp1252 # Offset: 2733
    00000ab2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1271:
    00000ab8: 	addl	$0x1, %r14d
    00000abc: 	cmpl	iterations(%rip), %r14d
    00000ac3: 	jl	.Ltmp1272 # Offset: 2755
    00000ac9: 	jmp	.Ltmp1264 # Offset: 2761
    00000ace: 	nop # Size: 2
.Ltmp1269:
    00000ad0: 	testq	%r12, %r12
    00000ad3: 	jne	.Ltmp1304 # Offset: 2771
    00000ad9: 	movq	%r15, %rax
    00000adc: 	jmp	.Ltmp1305 # Offset: 2780
    00000ae1: 	nopl	(%rax) # Size: 7
.Ltmp1257:
    00000ae8: 	testq	%r13, %r13
    00000aeb: 	jne	.Ltmp1306 # Offset: 2795
    00000af1: 	movq	%r15, %rax
    00000af4: 	jmp	.Ltmp1307 # Offset: 2804
    00000af9: 	nopl	(%rax) # Size: 7
.Ltmp1268:
    00000b00: 	movq	0x10(%rsp), %rsi
    00000b05: 	leaq	0x90(%rsp), %rdi
    00000b0d: 	xorl	%edx, %edx
    00000b0f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2831
    00000b14: 	movq	%rax, 0x90(%rsp)
    00000b1c: 	movq	%rax, %rdi
    00000b1f: 	movq	0x30(%rsp), %rax
    00000b24: 	movq	%rax, 0xa0(%rsp)
.Ltmp1318:
    00000b2c: 	movq	%r12, %rdx
    00000b2f: 	movq	%r13, %rsi
    00000b32: 	callq	memcpy@PLT # Offset: 2866
    00000b37: 	movq	0x30(%rsp), %r12
    00000b3c: 	movq	0x90(%rsp), %rax
    00000b44: 	jmp	.Ltmp1305 # Offset: 2884
    00000b49: 	nopl	(%rax) # Size: 7
.Ltmp1256:
    00000b50: 	movq	0x10(%rsp), %rsi
    00000b55: 	leaq	0x90(%rsp), %rdi
    00000b5d: 	xorl	%edx, %edx
    00000b5f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2911
    00000b64: 	movq	%rax, 0x90(%rsp)
    00000b6c: 	movq	%rax, %rdi
    00000b6f: 	movq	0x30(%rsp), %rax
    00000b74: 	movq	%rax, 0xa0(%rsp)
.Ltmp1319:
    00000b7c: 	movq	%r13, %rdx
    00000b7f: 	movq	%r14, %rsi
    00000b82: 	callq	memcpy@PLT # Offset: 2946
    00000b87: 	movq	0x30(%rsp), %r13
    00000b8c: 	movq	0x90(%rsp), %rax
    00000b94: 	jmp	.Ltmp1307 # Offset: 2964
.Ltmp1279:
    00000b99: 	testq	%r12, %r12
    00000b9c: 	jne	.Ltmp1308 # Offset: 2972
    00000ba2: 	movq	%r15, %rax
    00000ba5: 	jmp	.Ltmp1309 # Offset: 2981
.Ltmp1291:
    00000baa: 	testq	%r12, %r12
    00000bad: 	jne	.Ltmp1310 # Offset: 2989
    00000bb3: 	movq	%r15, %rax
    00000bb6: 	jmp	.Ltmp1311 # Offset: 2998
.Ltmp1285:
    00000bbb: 	testq	%r12, %r12
    00000bbe: 	jne	.Ltmp1312 # Offset: 3006
    00000bc4: 	movq	%r15, %rax
    00000bc7: 	jmp	.Ltmp1313 # Offset: 3015
.Ltmp1290:
    00000bcc: 	movq	0x10(%rsp), %rsi
    00000bd1: 	xorl	%edx, %edx
    00000bd3: 	movq	%rbp, %rdi
    00000bd6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3030
    00000bdb: 	movq	%rax, 0x90(%rsp)
    00000be3: 	movq	%rax, %rdi
    00000be6: 	movq	0x30(%rsp), %rax
    00000beb: 	movq	%rax, 0xa0(%rsp)
.Ltmp1321:
    00000bf3: 	movq	%r12, %rdx
    00000bf6: 	movq	%r13, %rsi
    00000bf9: 	callq	memcpy@PLT # Offset: 3065
    00000bfe: 	movq	0x30(%rsp), %r12
    00000c03: 	movq	0x90(%rsp), %rax
    00000c0b: 	jmp	.Ltmp1311 # Offset: 3083
.Ltmp1278:
    00000c10: 	movq	0x10(%rsp), %rsi
    00000c15: 	leaq	0x90(%rsp), %rdi
    00000c1d: 	xorl	%edx, %edx
    00000c1f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3103
    00000c24: 	movq	%rax, 0x90(%rsp)
    00000c2c: 	movq	%rax, %rdi
    00000c2f: 	movq	0x30(%rsp), %rax
    00000c34: 	movq	%rax, 0xa0(%rsp)
.Ltmp1320:
    00000c3c: 	movq	%r12, %rdx
    00000c3f: 	movq	%rbp, %rsi
    00000c42: 	callq	memcpy@PLT # Offset: 3138
    00000c47: 	movq	0x30(%rsp), %r12
    00000c4c: 	movq	0x90(%rsp), %rax
    00000c54: 	jmp	.Ltmp1309 # Offset: 3156
.Ltmp1284:
    00000c59: 	movq	0x10(%rsp), %rsi
    00000c5e: 	xorl	%edx, %edx
    00000c60: 	movq	%rbp, %rdi
    00000c63: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3171
    00000c68: 	movq	%rax, 0x90(%rsp)
    00000c70: 	movq	%rax, %rdi
    00000c73: 	movq	0x30(%rsp), %rax
    00000c78: 	movq	%rax, 0xa0(%rsp)
.Ltmp1322:
    00000c80: 	movq	%r12, %rdx
    00000c83: 	movq	%r13, %rsi
    00000c86: 	callq	memcpy@PLT # Offset: 3206
    00000c8b: 	movq	0x30(%rsp), %r12
    00000c90: 	movq	0x90(%rsp), %rax
    00000c98: 	jmp	.Ltmp1313 # Offset: 3224
.Ltmp1249:
    00000c9d: 	movq	0x10(%rsp), %rsi
    00000ca2: 	leaq	0x70(%rsp), %rdi
    00000ca7: 	xorl	%edx, %edx
    00000ca9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3241
    00000cae: 	movq	%rax, 0x70(%rsp)
    00000cb3: 	movq	%rax, %rdi
    00000cb6: 	movq	0x30(%rsp), %rax
    00000cbb: 	movq	%rax, 0x80(%rsp)
.Ltmp1317:
    00000cc3: 	movq	%r12, %rdx
    00000cc6: 	movq	%rbp, %rsi
    00000cc9: 	callq	memcpy@PLT # Offset: 3273
    00000cce: 	movq	0x30(%rsp), %r12
    00000cd3: 	movq	0x70(%rsp), %rax
    00000cd8: 	jmp	.Ltmp1303 # Offset: 3288
.Ltmp1273:
    00000cdd: 	movq	0x20(%rsp), %rsi
    00000ce2: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000ce9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3305
    00000cee: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000cf5: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000cfc: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000d03: 	jne	.Ltmp1314 # Offset: 3331
.Ltmp1274:
    00000d09: 	movq	-0x8(%rdx), %rax
    00000d0d: 	addq	$0x200, %rax
    00000d13: 	jmp	.Ltmp1314 # Offset: 3347
.Ltmp1262:
    00000d18: 	movq	-0x8(%rdx), %rax
    00000d1c: 	addq	$0x200, %rax
    00000d22: 	jmp	.Ltmp1315 # Offset: 3362
.Ltmp1261:
    00000d27: 	movq	0x20(%rsp), %rsi
    00000d2c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000d33: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3379
    00000d38: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000d3f: 	jmp	.Ltmp1316 # Offset: 3391
.Ltmp1251:
    00000d44: 	leaq	DATAat0x19184(%rip), %rdi
    00000d4b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3403
.Ltmp1255:
    00000d50: 	leaq	DATAat0x19008(%rip), %rdi
    00000d57: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3415
.Ltmp1267:
    00000d5c: 	leaq	DATAat0x19008(%rip), %rdi
    00000d63: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3427
.Ltmp1277:
    00000d68: 	leaq	DATAat0x19008(%rip), %rdi
    00000d6f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3439
.Ltmp1280:
    00000d74: 	leaq	DATAat0x19184(%rip), %rdi
    00000d7b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3451
.Ltmp1283:
    00000d80: 	leaq	DATAat0x19008(%rip), %rdi
    00000d87: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3463
.Ltmp1286:
    00000d8c: 	leaq	DATAat0x19184(%rip), %rdi
    00000d93: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3475
.Ltmp1289:
    00000d98: 	leaq	DATAat0x19008(%rip), %rdi
    00000d9f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3487
.Ltmp1292:
    00000da4: 	leaq	DATAat0x19184(%rip), %rdi
    00000dab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3499
.Ltmp1301:
    00000db0: 	callq	__stack_chk_fail@PLT # Offset: 3504
.Ltmp1302:
    00000db5: 	movq	0x18(%rsp), %rdi
    00000dba: 	jmp	.Ltmp1317 # Offset: 3514
.Ltmp1304:
    00000dbf: 	movq	%r15, %rdi
    00000dc2: 	jmp	.Ltmp1318 # Offset: 3522
.Ltmp1306:
    00000dc7: 	movq	%r15, %rdi
    00000dca: 	jmp	.Ltmp1319 # Offset: 3530
.Ltmp1308:
    00000dcf: 	movq	%r15, %rdi
    00000dd2: 	jmp	.Ltmp1320 # Offset: 3538
.Ltmp1310:
    00000dd7: 	movq	%r15, %rdi
    00000dda: 	jmp	.Ltmp1321 # Offset: 3546
.Ltmp1312:
    00000ddf: 	movq	%r15, %rdi
    00000de2: 	jmp	.Ltmp1322 # Offset: 3554
.Ltmp1248:
    00000de7: 	leaq	DATAat0x19008(%rip), %rdi
    00000dee: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3566
    00000df3: 	endbr64
.Ltmp1324:
    00000df7: 	movq	%rax, %rbp
    00000dfa: 	jmp	.Ltmp1323 # Offset: 3578
    00000dff: 	endbr64
    00000e03: 	jmp	.Ltmp1324 # Offset: 3587
    00000e05: 	endbr64
    00000e09: 	jmp	.Ltmp1324 # Offset: 3593
    00000e0b: 	endbr64
    00000e0f: 	jmp	.Ltmp1324 # Offset: 3599
    00000e11: 	endbr64
    00000e15: 	jmp	.Ltmp1324 # Offset: 3605
    00000e17: 	endbr64
.Ltmp1330:
    00000e1b: 	movq	%rax, %rbp
    00000e1e: 	jmp	.Ltmp1325 # Offset: 3614
    00000e20: 	endbr64
.Ltmp1329:
    00000e24: 	movq	%rax, %rbp
    00000e27: 	jmp	.Ltmp1326 # Offset: 3623
.Ltmp1325:
    00000e29: 	movq	0x90(%rsp), %rdi
    00000e31: 	cmpq	%r15, %rdi
    00000e34: 	je	.Ltmp1326 # Offset: 3636
    00000e36: 	movq	0xa0(%rsp), %rax
    00000e3e: 	leaq	0x1(%rax), %rsi
    00000e42: 	callq	_ZdlPvm@PLT # Offset: 3650
.Ltmp1326:
    00000e47: 	movq	0x70(%rsp), %rdi
    00000e4c: 	cmpq	0x18(%rsp), %rdi
    00000e51: 	je	.Ltmp1327 # Offset: 3665
    00000e53: 	movq	0x80(%rsp), %rax
    00000e5b: 	leaq	0x1(%rax), %rsi
    00000e5f: 	callq	_ZdlPvm@PLT # Offset: 3679
.Ltmp1327:
    00000e64: 	movq	0x50(%rsp), %rdi
    00000e69: 	cmpq	0x28(%rsp), %rdi
    00000e6e: 	je	.Ltmp1328 # Offset: 3694
    00000e70: 	movq	0x60(%rsp), %rax
    00000e75: 	leaq	0x1(%rax), %rsi
    00000e79: 	callq	_ZdlPvm@PLT # Offset: 3705
.Ltmp1328:
    00000e7e: 	movq	%rbp, %rdi
    00000e81: 	callq	_Unwind_Resume@PLT # Offset: 3713
    00000e86: 	endbr64
    00000e8a: 	jmp	.Ltmp1329 # Offset: 3722
    00000e8c: 	endbr64
    00000e90: 	movq	%rax, %rbp
    00000e93: 	jmp	.Ltmp1327 # Offset: 3731
    00000e95: 	endbr64
    00000e99: 	jmp	.Ltmp1330 # Offset: 3737
    00000e9b: 	endbr64
    00000e9f: 	jmp	.Ltmp1329 # Offset: 3743
    00000ea1: 	endbr64
    00000ea5: 	jmp	.Ltmp1324 # Offset: 3749
    00000eaa: 	endbr64
    00000eae: 	jmp	.Ltmp1324 # Offset: 3758
    00000eb3: 	endbr64
    00000eb7: 	jmp	.Ltmp1324 # Offset: 3767
    00000ebc: 	endbr64
    00000ec0: 	jmp	.Ltmp1324 # Offset: 3776
    00000ec5: 	endbr64
    00000ec9: 	jmp	.Ltmp1324 # Offset: 3785
    00000ece: 	endbr64
    00000ed2: 	jmp	.Ltmp1324 # Offset: 3794
    00000ed7: 	endbr64
    00000edb: 	jmp	.Ltmp1324 # Offset: 3803
.Ltmp1323:
    00000ee0: 	movq	0x90(%rsp), %rdi
    00000ee8: 	cmpq	%r15, %rdi
    00000eeb: 	je	.Ltmp1327 # Offset: 3819
    00000ef1: 	movq	0xa0(%rsp), %rax
    00000ef9: 	leaq	0x1(%rax), %rsi
    00000efd: 	callq	_ZdlPvm@PLT # Offset: 3837
    00000f02: 	jmp	.Ltmp1327 # Offset: 3842
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_Z11TestOneTypeIaEvv" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0xfdc0
  Size        : 0x1251
  MaxSize     : 0x1260
  Offset      : 0xfdc0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIaEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x18, %rsp
    0000002a: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm6
    00000032: 	movl	$0x745f, %ecx
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x2008(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	movaps	%xmm6, 0x40(%rsp)
    0000004f: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm6
    00000057: 	leaq	0x70(%rsp), %rax
    0000005c: 	leaq	0x40(%rsp), %rdi
    00000061: 	movq	%rax, 0x38(%rsp)
    00000066: 	leaq	0xc0(%rsp), %r14
    0000006e: 	movq	%rax, 0x60(%rsp)
    00000073: 	leaq	0x2000(%rsp), %rbp
    0000007b: 	movw	%cx, 0x74(%rsp)
    00000080: 	movq	%rdi, 0x20(%rsp)
    00000085: 	movaps	%xmm6, 0x50(%rsp)
    0000008a: 	movl	$0x38746e69, 0x70(%rsp)
    00000092: 	movq	$0x6, 0x68(%rsp)
    0000009b: 	movb	$0x0, 0x76(%rsp)
    000000a0: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 160
    000000a5: 	movl	init_value(%rip), %eax
    000000ab: 	leal	0x7b(%rax), %edi
    000000ae: 	callq	srand@PLT # Offset: 174
    000000b3: 	movq	%r14, %rdx
    000000b6: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000c0: 	movabsq	$0x14057b7ef767814f, %rdi
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1331:
    000000d0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000d7: 	addq	$0x1, %rdx
    000000db: 	imulq	%r8, %rax
    000000df: 	addq	%rdi, %rax
    000000e2: 	movq	%rax, %rcx
    000000e5: 	movq	%rax, %rsi
    000000e8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ef: 	shrq	$0x14, %rcx
    000000f3: 	shlq	$0x17, %rsi
    000000f7: 	xorq	%rsi, %rcx
    000000fa: 	xorq	%rcx, %rax
    000000fd: 	sarq	$0x3, %rax
    00000101: 	movb	%al, -0x1(%rdx)
    00000104: 	cmpq	%rbp, %rdx
    00000107: 	jne	.Ltmp1331 # Offset: 263
    00000109: 	movabsq	$0x101010101010101, %rsi
    00000113: 	movl	init_value(%rip), %edi
    00000119: 	movabsq	$0x5851f42d4c957f2d, %r10
    00000123: 	movzbl	%dil, %ecx
    00000127: 	movq	%rcx, %rax
    0000012a: 	movq	%rcx, %r8
    0000012d: 	mulq	%rsi
    00000130: 	imulq	%rsi, %r8
    00000134: 	movq	%rax, (%r14)
    00000137: 	movq	%rcx, %rax
    0000013a: 	leaq	(%r8,%rdx), %r9
    0000013e: 	movq	%r8, 0x20(%r14)
    00000142: 	movabsq	$0x20c49ba5e353f7d, %r8
    0000014c: 	mulq	%rsi
    0000014f: 	movzbl	%dil, %edx
    00000153: 	movq	%r9, 0x8(%r14)
    00000157: 	leaq	0xc1(%rsp), %rsi
    0000015f: 	movq	%r9, 0x18(%r14)
    00000163: 	movabsq	$0x14057b7ef767814f, %r9
    0000016d: 	movq	%rax, 0x10(%r14)
    00000171: 	movl	%edi, %eax
    00000173: 	shll	$0x8, %eax
    00000176: 	addl	%edx, %eax
    00000178: 	movw	%ax, 0x28(%r14)
    0000017d: 	nopl	(%rax) # Size: 3
.Ltmp1332:
    00000180: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000187: 	movzbl	(%rsi), %r11d
    0000018b: 	addq	$0x1, %rsi
    0000018f: 	imulq	%r10, %rax
    00000193: 	addq	%r9, %rax
    00000196: 	movq	%rax, %rdx
    00000199: 	movq	%rax, %rcx
    0000019c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001a3: 	shlq	$0x17, %rcx
    000001a7: 	shrq	$0x14, %rdx
    000001ab: 	xorq	%rcx, %rdx
    000001ae: 	xorq	%rdx, %rax
    000001b1: 	movq	%rax, %rdx
    000001b4: 	movq	%rax, %rcx
    000001b7: 	shrq	$0x6, %rdx
    000001bb: 	movq	%rdx, %rax
    000001be: 	mulq	%r8
    000001c1: 	movq	%rcx, %rax
    000001c4: 	imulq	$0x1f40, %rdx, %rdx
    000001cb: 	subq	%rdx, %rax
    000001ce: 	addq	%r14, %rax
    000001d1: 	movzbl	(%rax), %edx
    000001d4: 	movb	%dl, -0x1(%rsi)
    000001d7: 	movb	%r11b, (%rax)
    000001da: 	cmpq	%rbp, %rsi
    000001dd: 	jne	.Ltmp1332 # Offset: 477
    000001df: 	movd	%edi, %xmm5
    000001e3: 	pxor	%xmm0, %xmm0
    000001e7: 	pxor	%xmm7, %xmm7
    000001eb: 	movq	%r14, %rax
    000001ee: 	punpcklbw	%xmm5, %xmm5
    000001f2: 	pxor	%xmm6, %xmm6
    000001f6: 	pxor	%xmm4, %xmm4
    000001fa: 	punpcklwd	%xmm5, %xmm5
    000001fe: 	pshufd	$0x0, %xmm5, %xmm5
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1333:
    00000208: 	movdqa	%xmm5, %xmm2
    0000020c: 	movdqa	%xmm7, %xmm1
    00000210: 	movdqa	%xmm4, %xmm10
    00000215: 	addq	$0x10, %rax
    00000219: 	pcmpeqb	-0x10(%rax), %xmm2
    0000021e: 	pand	DATAat0x19250(%rip), %xmm2
    00000226: 	pcmpgtb	%xmm2, %xmm1
    0000022a: 	movdqa	%xmm2, %xmm3
    0000022e: 	punpcklbw	%xmm1, %xmm3
    00000232: 	punpckhbw	%xmm1, %xmm2
    00000236: 	movdqa	%xmm6, %xmm1
    0000023a: 	pcmpgtw	%xmm3, %xmm1
    0000023e: 	movdqa	%xmm3, %xmm9
    00000243: 	movdqa	%xmm2, %xmm8
    00000248: 	punpcklwd	%xmm1, %xmm9
    0000024d: 	punpckhwd	%xmm1, %xmm3
    00000251: 	movdqa	%xmm6, %xmm1
    00000255: 	pcmpgtw	%xmm2, %xmm1
    00000259: 	pcmpgtd	%xmm9, %xmm10
    0000025e: 	punpcklwd	%xmm1, %xmm8
    00000263: 	punpckhwd	%xmm1, %xmm2
    00000267: 	movdqa	%xmm9, %xmm1
    0000026c: 	punpckldq	%xmm10, %xmm1
    00000271: 	punpckhdq	%xmm10, %xmm9
    00000276: 	paddq	%xmm1, %xmm0
    0000027a: 	movdqa	%xmm4, %xmm1
    0000027e: 	pcmpgtd	%xmm3, %xmm1
    00000282: 	paddq	%xmm9, %xmm0
    00000287: 	movdqa	%xmm3, %xmm9
    0000028c: 	punpckldq	%xmm1, %xmm9
    00000291: 	punpckhdq	%xmm1, %xmm3
    00000295: 	movdqa	%xmm8, %xmm1
    0000029a: 	paddq	%xmm9, %xmm0
    0000029f: 	paddq	%xmm3, %xmm0
    000002a3: 	movdqa	%xmm4, %xmm3
    000002a7: 	pcmpgtd	%xmm8, %xmm3
    000002ac: 	punpckldq	%xmm3, %xmm1
    000002b0: 	paddq	%xmm1, %xmm0
    000002b4: 	movdqa	%xmm8, %xmm1
    000002b9: 	punpckhdq	%xmm3, %xmm1
    000002bd: 	movdqa	%xmm2, %xmm3
    000002c1: 	paddq	%xmm1, %xmm0
    000002c5: 	movdqa	%xmm4, %xmm1
    000002c9: 	pcmpgtd	%xmm2, %xmm1
    000002cd: 	punpckldq	%xmm1, %xmm3
    000002d1: 	punpckhdq	%xmm1, %xmm2
    000002d5: 	paddq	%xmm3, %xmm0
    000002d9: 	paddq	%xmm2, %xmm0
    000002dd: 	cmpq	%rax, %rbp
    000002e0: 	jne	.Ltmp1333 # Offset: 736
    000002e6: 	movdqa	%xmm0, %xmm1
    000002ea: 	leaq	0x60(%rsp), %rax
    000002ef: 	leaq	0x80(%rsp), %rdi
    000002f7: 	psrldq	$0x8, %xmm1
    000002fc: 	leaq	DATAat0x191e0(%rip), %rdx
    00000303: 	movq	%rax, %rsi
    00000306: 	movq	%rdi, 0x30(%rsp)
    0000030b: 	paddq	%xmm1, %xmm0
    0000030f: 	movq	%rax, 0x28(%rsp)
    00000314: 	movq	%xmm0, gCount(%rip)
    0000031c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 796
    00000321: 	movzbl	init_value(%rip), %r12d
    00000329: 	xorl	%ebx, %ebx
    0000032b: 	leaq	0xb0(%rsp), %r15
    00000333: 	callq	clock@PLT # Offset: 819
    00000338: 	movl	iterations(%rip), %edx
    0000033e: 	movq	%rax, start_time(%rip)
    00000345: 	testl	%edx, %edx
    00000347: 	jle	.Ltmp1334 # Offset: 839
    0000034d: 	movd	%r12d, %xmm0
    00000352: 	punpcklbw	%xmm0, %xmm0
    00000356: 	punpcklwd	%xmm0, %xmm0
    0000035a: 	pshufd	$0x0, %xmm0, %xmm6
    0000035f: 	movaps	%xmm6, (%rsp)
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1342:
    00000368: 	pxor	%xmm0, %xmm0
    0000036c: 	pxor	%xmm6, %xmm6
    00000370: 	pxor	%xmm5, %xmm5
    00000374: 	movq	%r14, %rax
    00000377: 	pxor	%xmm4, %xmm4
    0000037b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1335:
    00000380: 	movdqa	(%rsp), %xmm2
    00000385: 	movdqa	%xmm6, %xmm1
    00000389: 	movdqa	%xmm4, %xmm9
    0000038e: 	addq	$0x10, %rax
    00000392: 	pcmpeqb	-0x10(%rax), %xmm2
    00000397: 	pand	DATAat0x19250(%rip), %xmm2
    0000039f: 	pcmpgtb	%xmm2, %xmm1
    000003a3: 	movdqa	%xmm2, %xmm3
    000003a7: 	punpcklbw	%xmm1, %xmm3
    000003ab: 	punpckhbw	%xmm1, %xmm2
    000003af: 	movdqa	%xmm5, %xmm1
    000003b3: 	pcmpgtw	%xmm3, %xmm1
    000003b7: 	movdqa	%xmm3, %xmm8
    000003bc: 	movdqa	%xmm2, %xmm7
    000003c0: 	punpcklwd	%xmm1, %xmm8
    000003c5: 	punpckhwd	%xmm1, %xmm3
    000003c9: 	movdqa	%xmm5, %xmm1
    000003cd: 	pcmpgtw	%xmm2, %xmm1
    000003d1: 	pcmpgtd	%xmm8, %xmm9
    000003d6: 	punpcklwd	%xmm1, %xmm7
    000003da: 	punpckhwd	%xmm1, %xmm2
    000003de: 	movdqa	%xmm8, %xmm1
    000003e3: 	punpckldq	%xmm9, %xmm1
    000003e8: 	punpckhdq	%xmm9, %xmm8
    000003ed: 	paddq	%xmm1, %xmm0
    000003f1: 	movdqa	%xmm4, %xmm1
    000003f5: 	pcmpgtd	%xmm3, %xmm1
    000003f9: 	paddq	%xmm8, %xmm0
    000003fe: 	movdqa	%xmm3, %xmm8
    00000403: 	punpckldq	%xmm1, %xmm8
    00000408: 	punpckhdq	%xmm1, %xmm3
    0000040c: 	movdqa	%xmm7, %xmm1
    00000410: 	paddq	%xmm8, %xmm0
    00000415: 	paddq	%xmm3, %xmm0
    00000419: 	movdqa	%xmm4, %xmm3
    0000041d: 	pcmpgtd	%xmm7, %xmm3
    00000421: 	punpckldq	%xmm3, %xmm1
    00000425: 	paddq	%xmm1, %xmm0
    00000429: 	movdqa	%xmm7, %xmm1
    0000042d: 	punpckhdq	%xmm3, %xmm1
    00000431: 	movdqa	%xmm2, %xmm3
    00000435: 	paddq	%xmm1, %xmm0
    00000439: 	movdqa	%xmm4, %xmm1
    0000043d: 	pcmpgtd	%xmm2, %xmm1
    00000441: 	punpckldq	%xmm1, %xmm3
    00000445: 	punpckhdq	%xmm1, %xmm2
    00000449: 	paddq	%xmm3, %xmm0
    0000044d: 	paddq	%xmm2, %xmm0
    00000451: 	cmpq	%rax, %rbp
    00000454: 	jne	.Ltmp1335 # Offset: 1108
    0000045a: 	movq	0x80(%rsp), %r13
    00000462: 	movdqa	%xmm0, %xmm1
    00000466: 	movq	0x88(%rsp), %r12
    0000046e: 	movq	%r15, 0xa0(%rsp)
    00000476: 	psrldq	$0x8, %xmm1
    0000047b: 	movq	%r13, %rax
    0000047e: 	paddq	%xmm1, %xmm0
    00000482: 	addq	%r12, %rax
    00000485: 	movq	%xmm0, 0x18(%rsp)
    0000048b: 	je	.Ltmp1336 # Offset: 1163
    0000048d: 	testq	%r13, %r13
    00000490: 	je	.Ltmp1337 # Offset: 1168
.Ltmp1336:
    00000496: 	movq	%r12, 0x40(%rsp)
    0000049b: 	cmpq	$0xf, %r12
    0000049f: 	ja	.Ltmp1338 # Offset: 1183
    000004a5: 	cmpq	$0x1, %r12
    000004a9: 	jne	.Ltmp1339 # Offset: 1193
    000004af: 	movzbl	(%r13), %eax
    000004b4: 	movb	%al, 0xb0(%rsp)
    000004bb: 	movq	%r15, %rax
.Ltmp1390:
    000004be: 	movq	%r12, 0xa8(%rsp)
    000004c6: 	movb	$0x0, (%rax,%r12)
    000004cb: 	movq	0x18(%rsp), %rax
    000004d0: 	cmpq	gCount(%rip), %rax
    000004d7: 	je	.Ltmp1340 # Offset: 1239
    000004d9: 	movq	0xa0(%rsp), %rdx
    000004e1: 	leaq	DATAat0x191d0(%rip), %rsi
    000004e8: 	movl	$0x1, %edi
    000004ed: 	xorl	%eax, %eax
    000004ef: 	callq	__printf_chk@PLT # Offset: 1263
.Ltmp1340:
    000004f4: 	movq	0xa0(%rsp), %rdi
    000004fc: 	cmpq	%r15, %rdi
    000004ff: 	je	.Ltmp1341 # Offset: 1279
    00000505: 	movq	0xb0(%rsp), %rax
    0000050d: 	addl	$0x1, %ebx
    00000510: 	leaq	0x1(%rax), %rsi
    00000514: 	callq	_ZdlPvm@PLT # Offset: 1300
    00000519: 	cmpl	iterations(%rip), %ebx
    0000051f: 	jl	.Ltmp1342 # Offset: 1311
.Ltmp1334:
    00000525: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000052c: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000533: 	subq	$0x20, %rax
    00000537: 	cmpq	%rax, %rdi
    0000053a: 	je	.Ltmp1343 # Offset: 1338
    00000540: 	leaq	0x10(%rdi), %rax
    00000544: 	movq	0x88(%rsp), %rdx
    0000054c: 	movq	%rax, (%rdi)
    0000054f: 	movq	0x80(%rsp), %rsi
    00000557: 	addq	%rsi, %rdx
    0000055a: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1370
    0000055f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000566: 	addq	$0x20, %rax
    0000056a: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1404:
    00000571: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000578: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000057f: 	je	.Ltmp1344 # Offset: 1407
.Ltmp1401:
    00000585: 	movq	-0x20(%rax), %r12
    00000589: 	callq	clock@PLT # Offset: 1417
    0000058e: 	pxor	%xmm0, %xmm0
    00000592: 	movq	%rax, end_time(%rip)
    00000599: 	movq	%r12, %rdi
    0000059c: 	subq	start_time(%rip), %rax
    000005a3: 	cvtsi2sd	%rax, %xmm0
    000005a8: 	divsd	DATAat0x19290(%rip), %xmm0
    000005b0: 	callq	_Z13record_resultdPKc # Offset: 1456
    000005b5: 	movq	0x80(%rsp), %rdi
    000005bd: 	leaq	0x90(%rsp), %rax
    000005c5: 	movq	%rax, 0x18(%rsp)
    000005ca: 	cmpq	%rax, %rdi
    000005cd: 	je	.Ltmp1345 # Offset: 1485
    000005cf: 	movq	0x90(%rsp), %rax
    000005d7: 	leaq	0x1(%rax), %rsi
    000005db: 	callq	_ZdlPvm@PLT # Offset: 1499
.Ltmp1345:
    000005e0: 	movq	0x18(%rsp), %rax
    000005e5: 	movq	0x60(%rsp), %r13
    000005ea: 	movq	0x68(%rsp), %r12
    000005ef: 	movq	%rax, 0x80(%rsp)
    000005f7: 	movq	%r13, %rax
    000005fa: 	addq	%r12, %rax
    000005fd: 	je	.Ltmp1346 # Offset: 1533
    000005ff: 	testq	%r13, %r13
    00000602: 	je	.Ltmp1347 # Offset: 1538
.Ltmp1346:
    00000608: 	movq	%r12, 0x40(%rsp)
    0000060d: 	cmpq	$0xf, %r12
    00000611: 	ja	.Ltmp1348 # Offset: 1553
    00000617: 	cmpq	$0x1, %r12
    0000061b: 	jne	.Ltmp1349 # Offset: 1563
    00000621: 	movzbl	(%r13), %eax
    00000626: 	movb	%al, 0x90(%rsp)
    0000062d: 	movq	0x18(%rsp), %rax
.Ltmp1392:
    00000632: 	movq	%r12, 0x88(%rsp)
    0000063a: 	movb	$0x0, (%rax,%r12)
    0000063f: 	movabsq	$0x3fffffffffffffff, %rax
    00000649: 	subq	0x88(%rsp), %rax
    00000651: 	cmpq	$0xd, %rax
    00000655: 	jbe	.Ltmp1350 # Offset: 1621
    0000065b: 	movq	0x30(%rsp), %rdi
    00000660: 	movl	$0xe, %edx
    00000665: 	leaq	DATAat0x191ec(%rip), %rsi
    0000066c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1644
    00000671: 	callq	clock@PLT # Offset: 1649
    00000676: 	xorl	%ebx, %ebx
    00000678: 	leaq	0xb0(%rsp), %r15
    00000680: 	movq	%rax, start_time(%rip)
    00000687: 	movl	iterations(%rip), %eax
    0000068d: 	testl	%eax, %eax
    0000068f: 	jle	.Ltmp1351 # Offset: 1679
    00000695: 	nopl	(%rax) # Size: 3
.Ltmp1359:
    00000698: 	pxor	%xmm0, %xmm0
    0000069c: 	pxor	%xmm7, %xmm7
    000006a0: 	pxor	%xmm6, %xmm6
    000006a4: 	movq	%r14, %rax
    000006a7: 	movd	init_value(%rip), %xmm5
    000006af: 	pxor	%xmm4, %xmm4
    000006b3: 	punpcklbw	%xmm5, %xmm5
    000006b7: 	punpcklwd	%xmm5, %xmm5
    000006bb: 	pshufd	$0x0, %xmm5, %xmm5
.Ltmp1352:
    000006c0: 	movdqa	%xmm5, %xmm2
    000006c4: 	movdqa	%xmm7, %xmm1
    000006c8: 	movdqa	%xmm4, %xmm10
    000006cd: 	addq	$0x10, %rax
    000006d1: 	pcmpeqb	-0x10(%rax), %xmm2
    000006d6: 	pand	DATAat0x19250(%rip), %xmm2
    000006de: 	pcmpgtb	%xmm2, %xmm1
    000006e2: 	movdqa	%xmm2, %xmm3
    000006e6: 	punpcklbw	%xmm1, %xmm3
    000006ea: 	punpckhbw	%xmm1, %xmm2
    000006ee: 	movdqa	%xmm6, %xmm1
    000006f2: 	pcmpgtw	%xmm3, %xmm1
    000006f6: 	movdqa	%xmm3, %xmm9
    000006fb: 	movdqa	%xmm2, %xmm8
    00000700: 	punpcklwd	%xmm1, %xmm9
    00000705: 	punpckhwd	%xmm1, %xmm3
    00000709: 	movdqa	%xmm6, %xmm1
    0000070d: 	pcmpgtw	%xmm2, %xmm1
    00000711: 	pcmpgtd	%xmm9, %xmm10
    00000716: 	punpcklwd	%xmm1, %xmm8
    0000071b: 	punpckhwd	%xmm1, %xmm2
    0000071f: 	movdqa	%xmm9, %xmm1
    00000724: 	punpckldq	%xmm10, %xmm1
    00000729: 	punpckhdq	%xmm10, %xmm9
    0000072e: 	paddq	%xmm1, %xmm0
    00000732: 	movdqa	%xmm4, %xmm1
    00000736: 	pcmpgtd	%xmm3, %xmm1
    0000073a: 	paddq	%xmm9, %xmm0
    0000073f: 	movdqa	%xmm3, %xmm9
    00000744: 	punpckldq	%xmm1, %xmm9
    00000749: 	punpckhdq	%xmm1, %xmm3
    0000074d: 	movdqa	%xmm8, %xmm1
    00000752: 	paddq	%xmm9, %xmm0
    00000757: 	paddq	%xmm3, %xmm0
    0000075b: 	movdqa	%xmm4, %xmm3
    0000075f: 	pcmpgtd	%xmm8, %xmm3
    00000764: 	punpckldq	%xmm3, %xmm1
    00000768: 	paddq	%xmm1, %xmm0
    0000076c: 	movdqa	%xmm8, %xmm1
    00000771: 	punpckhdq	%xmm3, %xmm1
    00000775: 	movdqa	%xmm2, %xmm3
    00000779: 	paddq	%xmm1, %xmm0
    0000077d: 	movdqa	%xmm4, %xmm1
    00000781: 	pcmpgtd	%xmm2, %xmm1
    00000785: 	punpckldq	%xmm1, %xmm3
    00000789: 	punpckhdq	%xmm1, %xmm2
    0000078d: 	paddq	%xmm3, %xmm0
    00000791: 	paddq	%xmm2, %xmm0
    00000795: 	cmpq	%rax, %rbp
    00000798: 	jne	.Ltmp1352 # Offset: 1944
    0000079e: 	movq	0x80(%rsp), %r13
    000007a6: 	movdqa	%xmm0, %xmm1
    000007aa: 	movq	0x88(%rsp), %r12
    000007b2: 	movq	%r15, 0xa0(%rsp)
    000007ba: 	psrldq	$0x8, %xmm1
    000007bf: 	movq	%r13, %rax
    000007c2: 	paddq	%xmm1, %xmm0
    000007c6: 	addq	%r12, %rax
    000007c9: 	movq	%xmm0, (%rsp)
    000007ce: 	je	.Ltmp1353 # Offset: 1998
    000007d0: 	testq	%r13, %r13
    000007d3: 	je	.Ltmp1354 # Offset: 2003
.Ltmp1353:
    000007d9: 	movq	%r12, 0x40(%rsp)
    000007de: 	cmpq	$0xf, %r12
    000007e2: 	ja	.Ltmp1355 # Offset: 2018
    000007e8: 	cmpq	$0x1, %r12
    000007ec: 	jne	.Ltmp1356 # Offset: 2028
    000007f2: 	movzbl	(%r13), %eax
    000007f7: 	movb	%al, 0xb0(%rsp)
    000007fe: 	movq	%r15, %rax
.Ltmp1394:
    00000801: 	movq	%r12, 0xa8(%rsp)
    00000809: 	movb	$0x0, (%rax,%r12)
    0000080e: 	movq	(%rsp), %rax
    00000812: 	cmpq	gCount(%rip), %rax
    00000819: 	je	.Ltmp1357 # Offset: 2073
    0000081b: 	movq	0xa0(%rsp), %rdx
    00000823: 	leaq	DATAat0x191d0(%rip), %rsi
    0000082a: 	movl	$0x1, %edi
    0000082f: 	xorl	%eax, %eax
    00000831: 	callq	__printf_chk@PLT # Offset: 2097
.Ltmp1357:
    00000836: 	movq	0xa0(%rsp), %rdi
    0000083e: 	cmpq	%r15, %rdi
    00000841: 	je	.Ltmp1358 # Offset: 2113
    00000847: 	movq	0xb0(%rsp), %rax
    0000084f: 	addl	$0x1, %ebx
    00000852: 	leaq	0x1(%rax), %rsi
    00000856: 	callq	_ZdlPvm@PLT # Offset: 2134
    0000085b: 	cmpl	iterations(%rip), %ebx
    00000861: 	jl	.Ltmp1359 # Offset: 2145
.Ltmp1351:
    00000867: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000086e: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000875: 	subq	$0x20, %rax
    00000879: 	cmpq	%rax, %rdi
    0000087c: 	je	.Ltmp1360 # Offset: 2172
    00000882: 	leaq	0x10(%rdi), %rax
    00000886: 	movq	0x88(%rsp), %rdx
    0000088e: 	movq	%rax, (%rdi)
    00000891: 	movq	0x80(%rsp), %rsi
    00000899: 	addq	%rsi, %rdx
    0000089c: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 2204
    000008a1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000008a8: 	addq	$0x20, %rax
    000008ac: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1403:
    000008b3: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000008ba: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000008c1: 	je	.Ltmp1361 # Offset: 2241
.Ltmp1402:
    000008c7: 	movq	-0x20(%rax), %rbp
    000008cb: 	callq	clock@PLT # Offset: 2251
    000008d0: 	pxor	%xmm0, %xmm0
    000008d4: 	movq	%rax, end_time(%rip)
    000008db: 	movq	%rbp, %rdi
    000008de: 	subq	start_time(%rip), %rax
    000008e5: 	cvtsi2sd	%rax, %xmm0
    000008ea: 	divsd	DATAat0x19290(%rip), %xmm0
    000008f2: 	callq	_Z13record_resultdPKc # Offset: 2290
    000008f7: 	movq	0x80(%rsp), %rdi
    000008ff: 	cmpq	0x18(%rsp), %rdi
    00000904: 	je	.Ltmp1362 # Offset: 2308
    00000906: 	movq	0x90(%rsp), %rax
    0000090e: 	leaq	0x1(%rax), %rsi
    00000912: 	callq	_ZdlPvm@PLT # Offset: 2322
.Ltmp1362:
    00000917: 	movq	0x60(%rsp), %rbp
    0000091c: 	movq	0x68(%rsp), %r12
    00000921: 	leaq	0xb0(%rsp), %r15
    00000929: 	movq	%r15, 0xa0(%rsp)
    00000931: 	movq	%rbp, %rax
    00000934: 	addq	%r12, %rax
    00000937: 	je	.Ltmp1363 # Offset: 2359
    00000939: 	testq	%rbp, %rbp
    0000093c: 	je	.Ltmp1364 # Offset: 2364
.Ltmp1363:
    00000942: 	movq	%r12, 0x40(%rsp)
    00000947: 	cmpq	$0xf, %r12
    0000094b: 	ja	.Ltmp1365 # Offset: 2379
    00000951: 	cmpq	$0x1, %r12
    00000955: 	jne	.Ltmp1366 # Offset: 2389
    0000095b: 	movzbl	(%rbp), %eax
    0000095f: 	movb	%al, 0xb0(%rsp)
    00000966: 	movq	%r15, %rax
.Ltmp1396:
    00000969: 	movq	%r12, 0xa8(%rsp)
    00000971: 	movb	$0x0, (%rax,%r12)
    00000976: 	movabsq	$0x3fffffffffffffff, %rax
    00000980: 	subq	0xa8(%rsp), %rax
    00000988: 	cmpq	$0x6, %rax
    0000098c: 	jbe	.Ltmp1367 # Offset: 2444
    00000992: 	leaq	0xa0(%rsp), %rbp
    0000099a: 	movl	$0x7, %edx
    0000099f: 	leaq	DATAat0x191fb(%rip), %rsi
    000009a6: 	movq	%rbp, %rdi
    000009a9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2473
    000009ae: 	movsbl	init_value(%rip), %edx
    000009b5: 	movq	%rbp, %r8
    000009b8: 	movl	$0x1f40, %esi
    000009bd: 	movq	%r14, %rdi
    000009c0: 	leaq	_Z6count1IaEmPT_iS0_(%rip), %rcx
    000009c7: 	callq	_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2503
    000009cc: 	movq	0xa0(%rsp), %rdi
    000009d4: 	cmpq	%r15, %rdi
    000009d7: 	je	.Ltmp1368 # Offset: 2519
    000009d9: 	movq	0xb0(%rsp), %rax
    000009e1: 	leaq	0x1(%rax), %rsi
    000009e5: 	callq	_ZdlPvm@PLT # Offset: 2533
.Ltmp1368:
    000009ea: 	movq	0x28(%rsp), %rsi
    000009ef: 	leaq	DATAat0x19203(%rip), %rdx
    000009f6: 	movq	%rbp, %rdi
    000009f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2553
    000009fe: 	movsbl	init_value(%rip), %edx
    00000a05: 	movq	%rbp, %r8
    00000a08: 	movl	$0x1f40, %esi
    00000a0d: 	movq	%r14, %rdi
    00000a10: 	leaq	_Z6count2IaEmPT_iS0_(%rip), %rcx
    00000a17: 	callq	_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2583
    00000a1c: 	movq	0xa0(%rsp), %rdi
    00000a24: 	cmpq	%r15, %rdi
    00000a27: 	je	.Ltmp1369 # Offset: 2599
    00000a29: 	movq	0xb0(%rsp), %rax
    00000a31: 	leaq	0x1(%rax), %rsi
    00000a35: 	callq	_ZdlPvm@PLT # Offset: 2613
.Ltmp1369:
    00000a3a: 	movq	0x60(%rsp), %r13
    00000a3f: 	movq	0x68(%rsp), %r12
    00000a44: 	movq	%r15, 0xa0(%rsp)
    00000a4c: 	movq	%r13, %rax
    00000a4f: 	addq	%r12, %rax
    00000a52: 	je	.Ltmp1370 # Offset: 2642
    00000a54: 	testq	%r13, %r13
    00000a57: 	je	.Ltmp1371 # Offset: 2647
.Ltmp1370:
    00000a5d: 	movq	%r12, 0x40(%rsp)
    00000a62: 	cmpq	$0xf, %r12
    00000a66: 	ja	.Ltmp1372 # Offset: 2662
    00000a6c: 	cmpq	$0x1, %r12
    00000a70: 	jne	.Ltmp1373 # Offset: 2672
    00000a76: 	movzbl	(%r13), %eax
    00000a7b: 	movb	%al, 0xb0(%rsp)
    00000a82: 	movq	%r15, %rax
.Ltmp1400:
    00000a85: 	movq	%r12, 0xa8(%rsp)
    00000a8d: 	movb	$0x0, (%rax,%r12)
    00000a92: 	movabsq	$0x3fffffffffffffff, %rax
    00000a9c: 	subq	0xa8(%rsp), %rax
    00000aa4: 	cmpq	$0x6, %rax
    00000aa8: 	jbe	.Ltmp1374 # Offset: 2728
    00000aae: 	movl	$0x7, %edx
    00000ab3: 	leaq	DATAat0x1920b(%rip), %rsi
    00000aba: 	movq	%rbp, %rdi
    00000abd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2749
    00000ac2: 	movsbl	init_value(%rip), %edx
    00000ac9: 	movq	%rbp, %r8
    00000acc: 	movl	$0x1f40, %esi
    00000ad1: 	movq	%r14, %rdi
    00000ad4: 	leaq	_Z6count3IaEmPT_iS0_(%rip), %rcx
    00000adb: 	callq	_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2779
    00000ae0: 	movq	0xa0(%rsp), %rdi
    00000ae8: 	cmpq	%r15, %rdi
    00000aeb: 	je	.Ltmp1375 # Offset: 2795
    00000aed: 	movq	0xb0(%rsp), %rax
    00000af5: 	leaq	0x1(%rax), %rsi
    00000af9: 	callq	_ZdlPvm@PLT # Offset: 2809
.Ltmp1375:
    00000afe: 	movq	0x28(%rsp), %rsi
    00000b03: 	leaq	DATAat0x19213(%rip), %rdx
    00000b0a: 	movq	%rbp, %rdi
    00000b0d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2829
    00000b12: 	movsbl	init_value(%rip), %edx
    00000b19: 	movq	%rbp, %r8
    00000b1c: 	movl	$0x1f40, %esi
    00000b21: 	movq	%r14, %rdi
    00000b24: 	leaq	_Z6count4IaEmPT_iS0_(%rip), %rcx
    00000b2b: 	callq	_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2859
    00000b30: 	movq	0xa0(%rsp), %rdi
    00000b38: 	cmpq	%r15, %rdi
    00000b3b: 	je	.Ltmp1376 # Offset: 2875
    00000b3d: 	movq	0xb0(%rsp), %rax
    00000b45: 	leaq	0x1(%rax), %rsi
    00000b49: 	callq	_ZdlPvm@PLT # Offset: 2889
.Ltmp1376:
    00000b4e: 	movq	0x28(%rsp), %rsi
    00000b53: 	leaq	DATAat0x1921b(%rip), %rdx
    00000b5a: 	movq	%rbp, %rdi
    00000b5d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2909
    00000b62: 	movsbl	init_value(%rip), %edx
    00000b69: 	movq	%rbp, %r8
    00000b6c: 	movl	$0x1f40, %esi
    00000b71: 	movq	%r14, %rdi
    00000b74: 	leaq	_Z6count5IaEmPT_iS0_(%rip), %rcx
    00000b7b: 	callq	_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2939
    00000b80: 	movq	0xa0(%rsp), %rdi
    00000b88: 	cmpq	%r15, %rdi
    00000b8b: 	je	.Ltmp1377 # Offset: 2955
    00000b8d: 	movq	0xb0(%rsp), %rax
    00000b95: 	leaq	0x1(%rax), %rsi
    00000b99: 	callq	_ZdlPvm@PLT # Offset: 2969
.Ltmp1377:
    00000b9e: 	movq	0x28(%rsp), %rsi
    00000ba3: 	leaq	DATAat0x19223(%rip), %rdx
    00000baa: 	movq	%rbp, %rdi
    00000bad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2989
    00000bb2: 	movsbl	init_value(%rip), %edx
    00000bb9: 	movq	%rbp, %r8
    00000bbc: 	movl	$0x1f40, %esi
    00000bc1: 	movq	%r14, %rdi
    00000bc4: 	leaq	_Z6count6IaEmPT_iS0_(%rip), %rcx
    00000bcb: 	callq	_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3019
    00000bd0: 	movq	0xa0(%rsp), %rdi
    00000bd8: 	cmpq	%r15, %rdi
    00000bdb: 	je	.Ltmp1378 # Offset: 3035
    00000bdd: 	movq	0xb0(%rsp), %rax
    00000be5: 	leaq	0x1(%rax), %rsi
    00000be9: 	callq	_ZdlPvm@PLT # Offset: 3049
.Ltmp1378:
    00000bee: 	movq	0x28(%rsp), %rsi
    00000bf3: 	leaq	DATAat0x1922b(%rip), %rdx
    00000bfa: 	movq	%rbp, %rdi
    00000bfd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3069
    00000c02: 	movsbl	init_value(%rip), %edx
    00000c09: 	movq	%rbp, %r8
    00000c0c: 	movl	$0x1f40, %esi
    00000c11: 	movq	%r14, %rdi
    00000c14: 	leaq	_Z6count7IaEmPT_iS0_(%rip), %rcx
    00000c1b: 	callq	_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3099
    00000c20: 	movq	0xa0(%rsp), %rdi
    00000c28: 	cmpq	%r15, %rdi
    00000c2b: 	je	.Ltmp1379 # Offset: 3115
    00000c2d: 	movq	0xb0(%rsp), %rax
    00000c35: 	leaq	0x1(%rax), %rsi
    00000c39: 	callq	_ZdlPvm@PLT # Offset: 3129
.Ltmp1379:
    00000c3e: 	movq	0x60(%rsp), %r13
    00000c43: 	movq	0x68(%rsp), %r12
    00000c48: 	movq	%r15, 0xa0(%rsp)
    00000c50: 	movq	%r13, %rax
    00000c53: 	addq	%r12, %rax
    00000c56: 	je	.Ltmp1380 # Offset: 3158
    00000c58: 	testq	%r13, %r13
    00000c5b: 	je	.Ltmp1381 # Offset: 3163
.Ltmp1380:
    00000c61: 	movq	%r12, 0x40(%rsp)
    00000c66: 	cmpq	$0xf, %r12
    00000c6a: 	ja	.Ltmp1382 # Offset: 3178
    00000c70: 	cmpq	$0x1, %r12
    00000c74: 	jne	.Ltmp1383 # Offset: 3188
    00000c7a: 	movzbl	(%r13), %eax
    00000c7f: 	movb	%al, 0xb0(%rsp)
    00000c86: 	movq	%r15, %rax
.Ltmp1398:
    00000c89: 	movq	%r12, 0xa8(%rsp)
    00000c91: 	movb	$0x0, (%rax,%r12)
    00000c96: 	movabsq	$0x3fffffffffffffff, %rax
    00000ca0: 	subq	0xa8(%rsp), %rax
    00000ca8: 	cmpq	$0x6, %rax
    00000cac: 	jbe	.Ltmp1384 # Offset: 3244
    00000cb2: 	movl	$0x7, %edx
    00000cb7: 	leaq	DATAat0x19233(%rip), %rsi
    00000cbe: 	movq	%rbp, %rdi
    00000cc1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3265
    00000cc6: 	movsbl	init_value(%rip), %edx
    00000ccd: 	movq	%rbp, %r8
    00000cd0: 	movl	$0x1f40, %esi
    00000cd5: 	movq	%r14, %rdi
    00000cd8: 	leaq	_Z6count8IaEmPT_iS0_(%rip), %rcx
    00000cdf: 	callq	_Z10test_countIaPFmPaiaEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3295
    00000ce4: 	movq	0xa0(%rsp), %rdi
    00000cec: 	cmpq	%r15, %rdi
    00000cef: 	je	.Ltmp1385 # Offset: 3311
    00000cf1: 	movq	0xb0(%rsp), %rax
    00000cf9: 	leaq	0x1(%rax), %rsi
    00000cfd: 	callq	_ZdlPvm@PLT # Offset: 3325
.Ltmp1385:
    00000d02: 	movq	0x28(%rsp), %rsi
    00000d07: 	leaq	DATAat0x1923b(%rip), %rdx
    00000d0e: 	movq	%rbp, %rdi
    00000d11: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3345
    00000d16: 	movl	iterations(%rip), %edx
    00000d1c: 	xorl	%r8d, %r8d
    00000d1f: 	xorl	%ecx, %ecx
    00000d21: 	movl	$0x1f40, %esi
    00000d26: 	movq	0xa0(%rsp), %rdi
    00000d2e: 	callq	_Z9summarizePKciiii # Offset: 3374
    00000d33: 	movq	0xa0(%rsp), %rdi
    00000d3b: 	cmpq	%r15, %rdi
    00000d3e: 	je	.Ltmp1386 # Offset: 3390
    00000d40: 	movq	0xb0(%rsp), %rax
    00000d48: 	leaq	0x1(%rax), %rsi
    00000d4c: 	callq	_ZdlPvm@PLT # Offset: 3404
.Ltmp1386:
    00000d51: 	movq	0x60(%rsp), %rdi
    00000d56: 	cmpq	0x38(%rsp), %rdi
    00000d5b: 	je	.Ltmp1387 # Offset: 3419
    00000d5d: 	movq	0x70(%rsp), %rax
    00000d62: 	leaq	0x1(%rax), %rsi
    00000d66: 	callq	_ZdlPvm@PLT # Offset: 3430
.Ltmp1387:
    00000d6b: 	movq	0x2008(%rsp), %rax
    00000d73: 	subq	%fs:0x28, %rax
    00000d7c: 	jne	.Ltmp1388 # Offset: 3452
    00000d82: 	addq	$0x2018, %rsp
    00000d89: 	popq	%rbx
    00000d8a: 	popq	%rbp
    00000d8b: 	popq	%r12
    00000d8d: 	popq	%r13
    00000d8f: 	popq	%r14
    00000d91: 	popq	%r15
    00000d93: 	retq # Offset: 3475
    00000d94: 	nopl	(%rax) # Size: 4
.Ltmp1341:
    00000d98: 	addl	$0x1, %ebx
    00000d9b: 	cmpl	iterations(%rip), %ebx
    00000da1: 	jl	.Ltmp1342 # Offset: 3489
    00000da7: 	jmp	.Ltmp1334 # Offset: 3495
    00000dac: 	nopl	(%rax) # Size: 4
.Ltmp1339:
    00000db0: 	testq	%r12, %r12
    00000db3: 	jne	.Ltmp1389 # Offset: 3507
    00000db9: 	movq	%r15, %rax
    00000dbc: 	jmp	.Ltmp1390 # Offset: 3516
    00000dc1: 	nopl	(%rax) # Size: 7
.Ltmp1338:
    00000dc8: 	movq	0x20(%rsp), %rsi
    00000dcd: 	leaq	0xa0(%rsp), %rdi
    00000dd5: 	xorl	%edx, %edx
    00000dd7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3543
    00000ddc: 	movq	%rax, 0xa0(%rsp)
    00000de4: 	movq	%rax, %rdi
    00000de7: 	movq	0x40(%rsp), %rax
    00000dec: 	movq	%rax, 0xb0(%rsp)
.Ltmp1410:
    00000df4: 	movq	%r12, %rdx
    00000df7: 	movq	%r13, %rsi
    00000dfa: 	callq	memcpy@PLT # Offset: 3578
    00000dff: 	movq	0x40(%rsp), %r12
    00000e04: 	movq	0xa0(%rsp), %rax
    00000e0c: 	jmp	.Ltmp1390 # Offset: 3596
.Ltmp1349:
    00000e11: 	testq	%r12, %r12
    00000e14: 	jne	.Ltmp1391 # Offset: 3604
    00000e1a: 	movq	0x18(%rsp), %rax
    00000e1f: 	jmp	.Ltmp1392 # Offset: 3615
    00000e24: 	nopl	(%rax) # Size: 4
.Ltmp1358:
    00000e28: 	addl	$0x1, %ebx
    00000e2b: 	cmpl	iterations(%rip), %ebx
    00000e31: 	jl	.Ltmp1359 # Offset: 3633
    00000e37: 	jmp	.Ltmp1351 # Offset: 3639
    00000e3c: 	nopl	(%rax) # Size: 4
.Ltmp1356:
    00000e40: 	testq	%r12, %r12
    00000e43: 	jne	.Ltmp1393 # Offset: 3651
    00000e49: 	movq	%r15, %rax
    00000e4c: 	jmp	.Ltmp1394 # Offset: 3660
    00000e51: 	nopl	(%rax) # Size: 7
.Ltmp1355:
    00000e58: 	movq	0x20(%rsp), %rsi
    00000e5d: 	leaq	0xa0(%rsp), %rdi
    00000e65: 	xorl	%edx, %edx
    00000e67: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3687
    00000e6c: 	movq	%rax, 0xa0(%rsp)
    00000e74: 	movq	%rax, %rdi
    00000e77: 	movq	0x40(%rsp), %rax
    00000e7c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1406:
    00000e84: 	movq	%r12, %rdx
    00000e87: 	movq	%r13, %rsi
    00000e8a: 	callq	memcpy@PLT # Offset: 3722
    00000e8f: 	movq	0x40(%rsp), %r12
    00000e94: 	movq	0xa0(%rsp), %rax
    00000e9c: 	jmp	.Ltmp1394 # Offset: 3740
.Ltmp1366:
    00000ea1: 	testq	%r12, %r12
    00000ea4: 	jne	.Ltmp1395 # Offset: 3748
    00000eaa: 	movq	%r15, %rax
    00000ead: 	jmp	.Ltmp1396 # Offset: 3757
.Ltmp1383:
    00000eb2: 	testq	%r12, %r12
    00000eb5: 	jne	.Ltmp1397 # Offset: 3765
    00000ebb: 	movq	%r15, %rax
    00000ebe: 	jmp	.Ltmp1398 # Offset: 3774
.Ltmp1373:
    00000ec3: 	testq	%r12, %r12
    00000ec6: 	jne	.Ltmp1399 # Offset: 3782
    00000ecc: 	movq	%r15, %rax
    00000ecf: 	jmp	.Ltmp1400 # Offset: 3791
.Ltmp1372:
    00000ed4: 	movq	0x20(%rsp), %rsi
    00000ed9: 	xorl	%edx, %edx
    00000edb: 	movq	%rbp, %rdi
    00000ede: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3806
    00000ee3: 	movq	%rax, 0xa0(%rsp)
    00000eeb: 	movq	%rax, %rdi
    00000eee: 	movq	0x40(%rsp), %rax
    00000ef3: 	movq	%rax, 0xb0(%rsp)
.Ltmp1409:
    00000efb: 	movq	%r12, %rdx
    00000efe: 	movq	%r13, %rsi
    00000f01: 	callq	memcpy@PLT # Offset: 3841
    00000f06: 	movq	0x40(%rsp), %r12
    00000f0b: 	movq	0xa0(%rsp), %rax
    00000f13: 	jmp	.Ltmp1400 # Offset: 3859
.Ltmp1348:
    00000f18: 	movq	0x20(%rsp), %rsi
    00000f1d: 	movq	0x30(%rsp), %rdi
    00000f22: 	xorl	%edx, %edx
    00000f24: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3876
    00000f29: 	movq	%rax, 0x80(%rsp)
    00000f31: 	movq	%rax, %rdi
    00000f34: 	movq	0x40(%rsp), %rax
    00000f39: 	movq	%rax, 0x90(%rsp)
.Ltmp1405:
    00000f41: 	movq	%r12, %rdx
    00000f44: 	movq	%r13, %rsi
    00000f47: 	callq	memcpy@PLT # Offset: 3911
    00000f4c: 	movq	0x40(%rsp), %r12
    00000f51: 	movq	0x80(%rsp), %rax
    00000f59: 	jmp	.Ltmp1392 # Offset: 3929
.Ltmp1365:
    00000f5e: 	movq	0x20(%rsp), %rsi
    00000f63: 	leaq	0xa0(%rsp), %rdi
    00000f6b: 	xorl	%edx, %edx
    00000f6d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3949
    00000f72: 	movq	%rax, 0xa0(%rsp)
    00000f7a: 	movq	%rax, %rdi
    00000f7d: 	movq	0x40(%rsp), %rax
    00000f82: 	movq	%rax, 0xb0(%rsp)
.Ltmp1407:
    00000f8a: 	movq	%r12, %rdx
    00000f8d: 	movq	%rbp, %rsi
    00000f90: 	callq	memcpy@PLT # Offset: 3984
    00000f95: 	movq	0x40(%rsp), %r12
    00000f9a: 	movq	0xa0(%rsp), %rax
    00000fa2: 	jmp	.Ltmp1396 # Offset: 4002
.Ltmp1382:
    00000fa7: 	movq	0x20(%rsp), %rsi
    00000fac: 	xorl	%edx, %edx
    00000fae: 	movq	%rbp, %rdi
    00000fb1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4017
    00000fb6: 	movq	%rax, 0xa0(%rsp)
    00000fbe: 	movq	%rax, %rdi
    00000fc1: 	movq	0x40(%rsp), %rax
    00000fc6: 	movq	%rax, 0xb0(%rsp)
.Ltmp1408:
    00000fce: 	movq	%r12, %rdx
    00000fd1: 	movq	%r13, %rsi
    00000fd4: 	callq	memcpy@PLT # Offset: 4052
    00000fd9: 	movq	0x40(%rsp), %r12
    00000fde: 	movq	0xa0(%rsp), %rax
    00000fe6: 	jmp	.Ltmp1398 # Offset: 4070
.Ltmp1344:
    00000feb: 	movq	-0x8(%rdx), %rax
    00000fef: 	addq	$0x200, %rax
    00000ff5: 	jmp	.Ltmp1401 # Offset: 4085
.Ltmp1361:
    00000ffa: 	movq	-0x8(%rdx), %rax
    00000ffe: 	addq	$0x200, %rax
    00001004: 	jmp	.Ltmp1402 # Offset: 4100
.Ltmp1360:
    00001009: 	movq	0x30(%rsp), %rsi
    0000100e: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001015: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4117
    0000101a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001021: 	jmp	.Ltmp1403 # Offset: 4129
.Ltmp1343:
    00001026: 	movq	0x30(%rsp), %rsi
    0000102b: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001032: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4146
    00001037: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000103e: 	jmp	.Ltmp1404 # Offset: 4158
.Ltmp1347:
    00001043: 	leaq	DATAat0x19008(%rip), %rdi
    0000104a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4170
.Ltmp1350:
    0000104f: 	leaq	DATAat0x19184(%rip), %rdi
    00001056: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4182
.Ltmp1354:
    0000105b: 	leaq	DATAat0x19008(%rip), %rdi
    00001062: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4194
.Ltmp1364:
    00001067: 	leaq	DATAat0x19008(%rip), %rdi
    0000106e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4206
.Ltmp1367:
    00001073: 	leaq	DATAat0x19184(%rip), %rdi
    0000107a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4218
.Ltmp1371:
    0000107f: 	leaq	DATAat0x19008(%rip), %rdi
    00001086: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4230
.Ltmp1374:
    0000108b: 	leaq	DATAat0x19184(%rip), %rdi
    00001092: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4242
.Ltmp1381:
    00001097: 	leaq	DATAat0x19008(%rip), %rdi
    0000109e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4254
.Ltmp1384:
    000010a3: 	leaq	DATAat0x19184(%rip), %rdi
    000010aa: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4266
.Ltmp1388:
    000010af: 	callq	__stack_chk_fail@PLT # Offset: 4271
.Ltmp1391:
    000010b4: 	movq	0x18(%rsp), %rdi
    000010b9: 	jmp	.Ltmp1405 # Offset: 4281
.Ltmp1393:
    000010be: 	movq	%r15, %rdi
    000010c1: 	jmp	.Ltmp1406 # Offset: 4289
.Ltmp1395:
    000010c6: 	movq	%r15, %rdi
    000010c9: 	jmp	.Ltmp1407 # Offset: 4297
.Ltmp1397:
    000010ce: 	movq	%r15, %rdi
    000010d1: 	jmp	.Ltmp1408 # Offset: 4305
.Ltmp1399:
    000010d6: 	movq	%r15, %rdi
    000010d9: 	jmp	.Ltmp1409 # Offset: 4313
.Ltmp1389:
    000010de: 	movq	%r15, %rdi
    000010e1: 	jmp	.Ltmp1410 # Offset: 4321
.Ltmp1337:
    000010e6: 	leaq	DATAat0x19008(%rip), %rdi
    000010ed: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4333
    000010f2: 	endbr64
.Ltmp1412:
    000010f6: 	movq	%rax, %rbp
    000010f9: 	jmp	.Ltmp1411 # Offset: 4345
    000010fe: 	endbr64
    00001102: 	jmp	.Ltmp1412 # Offset: 4354
    00001104: 	endbr64
    00001108: 	jmp	.Ltmp1412 # Offset: 4360
    0000110a: 	endbr64
.Ltmp1416:
    0000110e: 	movq	%rax, %rbp
    00001111: 	jmp	.Ltmp1413 # Offset: 4369
    00001113: 	endbr64
    00001117: 	jmp	.Ltmp1412 # Offset: 4375
    00001119: 	endbr64
    0000111d: 	jmp	.Ltmp1412 # Offset: 4381
    0000111f: 	endbr64
    00001123: 	jmp	.Ltmp1412 # Offset: 4387
.Ltmp1417:
    00001125: 	movq	0xa0(%rsp), %rdi
    0000112d: 	cmpq	%r15, %rdi
    00001130: 	je	.Ltmp1413 # Offset: 4400
    00001132: 	movq	0xb0(%rsp), %rax
    0000113a: 	leaq	0x1(%rax), %rsi
    0000113e: 	callq	_ZdlPvm@PLT # Offset: 4414
.Ltmp1413:
    00001143: 	movq	0x80(%rsp), %rdi
    0000114b: 	cmpq	0x18(%rsp), %rdi
    00001150: 	je	.Ltmp1414 # Offset: 4432
.Ltmp1420:
    00001152: 	movq	0x90(%rsp), %rax
    0000115a: 	leaq	0x1(%rax), %rsi
    0000115e: 	callq	_ZdlPvm@PLT # Offset: 4446
.Ltmp1414:
    00001163: 	movq	0x60(%rsp), %rdi
    00001168: 	cmpq	0x38(%rsp), %rdi
    0000116d: 	je	.Ltmp1415 # Offset: 4461
    0000116f: 	movq	0x70(%rsp), %rax
    00001174: 	leaq	0x1(%rax), %rsi
    00001178: 	callq	_ZdlPvm@PLT # Offset: 4472
.Ltmp1415:
    0000117d: 	movq	%rbp, %rdi
    00001180: 	callq	_Unwind_Resume@PLT # Offset: 4480
    00001185: 	endbr64
    00001189: 	jmp	.Ltmp1412 # Offset: 4489
    0000118e: 	endbr64
    00001192: 	jmp	.Ltmp1412 # Offset: 4498
    00001197: 	endbr64
    0000119b: 	jmp	.Ltmp1416 # Offset: 4507
    000011a0: 	endbr64
    000011a4: 	movq	%rax, %rbp
    000011a7: 	jmp	.Ltmp1417 # Offset: 4519
    000011ac: 	endbr64
    000011b0: 	movq	%rax, %rbp
    000011b3: 	jmp	.Ltmp1418 # Offset: 4531
    000011b5: 	endbr64
    000011b9: 	movq	%rax, %rbp
    000011bc: 	jmp	.Ltmp1419 # Offset: 4540
.Ltmp1418:
    000011be: 	movq	0xa0(%rsp), %rdi
    000011c6: 	cmpq	%r15, %rdi
    000011c9: 	je	.Ltmp1419 # Offset: 4553
    000011cb: 	movq	0xb0(%rsp), %rax
    000011d3: 	leaq	0x1(%rax), %rsi
    000011d7: 	callq	_ZdlPvm@PLT # Offset: 4567
.Ltmp1419:
    000011dc: 	movq	0x80(%rsp), %rdi
    000011e4: 	leaq	0x90(%rsp), %rax
    000011ec: 	cmpq	%rax, %rdi
    000011ef: 	jne	.Ltmp1420 # Offset: 4591
    000011f5: 	jmp	.Ltmp1414 # Offset: 4597
    000011fa: 	endbr64
    000011fe: 	jmp	.Ltmp1412 # Offset: 4606
    00001203: 	endbr64
    00001207: 	jmp	.Ltmp1412 # Offset: 4615
    0000120c: 	endbr64
    00001210: 	jmp	.Ltmp1412 # Offset: 4624
    00001215: 	endbr64
    00001219: 	jmp	.Ltmp1412 # Offset: 4633
    0000121e: 	endbr64
    00001222: 	movq	%rax, %rbp
    00001225: 	jmp	.Ltmp1414 # Offset: 4645
.Ltmp1411:
    0000122a: 	movq	0xa0(%rsp), %rdi
    00001232: 	cmpq	%r15, %rdi
    00001235: 	je	.Ltmp1414 # Offset: 4661
    0000123b: 	movq	0xb0(%rsp), %rax
    00001243: 	leaq	0x1(%rax), %rsi
    00001247: 	callq	_ZdlPvm@PLT # Offset: 4679
    0000124c: 	jmp	.Ltmp1414 # Offset: 4684
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIaEvv"

Binary Function "_Z11TestOneTypeIlEvv" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0x11020
  Size        : 0xef8
  MaxSize     : 0xf00
  Offset      : 0x11020
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIlEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp1421:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1421 # Offset: 37
    00000027: 	subq	$0xac8, %rsp
    0000002e: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm1
    00000036: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm2
    0000003e: 	movl	$0x5f34, %ecx
    00000043: 	movq	%fs:0x28, %rax
    0000004c: 	movq	%rax, 0xfab8(%rsp)
    00000054: 	xorl	%eax, %eax
    00000056: 	leaq	0x30(%rsp), %rdi
    0000005b: 	leaq	0x60(%rsp), %rax
    00000060: 	movw	%cx, 0x64(%rsp)
    00000065: 	movq	%rax, 0x28(%rsp)
    0000006a: 	leaq	0xfab0(%rsp), %rbx
    00000072: 	movq	%rax, 0x50(%rsp)
    00000077: 	movq	%rdi, 0x10(%rsp)
    0000007c: 	movaps	%xmm1, 0x30(%rsp)
    00000081: 	movaps	%xmm2, 0x40(%rsp)
    00000086: 	movl	$0x36746e69, 0x60(%rsp)
    0000008e: 	movb	$0x74, 0x66(%rsp)
    00000093: 	movq	$0x7, 0x58(%rsp)
    0000009c: 	movb	$0x0, 0x67(%rsp)
    000000a1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 161
    000000a6: 	movl	init_value(%rip), %eax
    000000ac: 	leal	0x7b(%rax), %edi
    000000af: 	callq	srand@PLT # Offset: 175
    000000b4: 	leaq	0xb0(%rsp), %rax
    000000bc: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000c6: 	movabsq	$0x14057b7ef767814f, %rdi
    000000d0: 	movq	%rax, (%rsp)
    000000d4: 	movq	%rax, %rdx
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1422:
    000000e0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000e7: 	addq	$0x8, %rdx
    000000eb: 	imulq	%r8, %rax
    000000ef: 	addq	%rdi, %rax
    000000f2: 	movq	%rax, %rcx
    000000f5: 	movq	%rax, %rsi
    000000f8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ff: 	shrq	$0x14, %rcx
    00000103: 	shlq	$0x17, %rsi
    00000107: 	xorq	%rsi, %rcx
    0000010a: 	xorq	%rcx, %rax
    0000010d: 	sarq	$0x3, %rax
    00000111: 	movq	%rax, -0x8(%rdx)
    00000115: 	cmpq	%rbx, %rdx
    00000118: 	jne	.Ltmp1422 # Offset: 280
    0000011a: 	movslq	init_value(%rip), %rdi
    00000121: 	movq	(%rsp), %rax
    00000125: 	leaq	0x200(%rsp), %rdx
    0000012d: 	movq	%rdi, %xmm0
    00000132: 	punpcklqdq	%xmm0, %xmm0
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1423:
    00000140: 	movaps	%xmm0, (%rax)
    00000143: 	addq	$0x10, %rax
    00000147: 	cmpq	%rdx, %rax
    0000014a: 	jne	.Ltmp1423 # Offset: 330
    0000014c: 	movq	(%rsp), %r11
    00000150: 	leaq	0xb8(%rsp), %rsi
    00000158: 	movabsq	$0x5851f42d4c957f2d, %r10
    00000162: 	movabsq	$0x14057b7ef767814f, %r9
    0000016c: 	movabsq	$0x20c49ba5e353f7d, %r8
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1424:
    00000180: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000187: 	movq	(%rsi), %rbp
    0000018a: 	addq	$0x8, %rsi
    0000018e: 	imulq	%r10, %rax
    00000192: 	addq	%r9, %rax
    00000195: 	movq	%rax, %rdx
    00000198: 	movq	%rax, %rcx
    0000019b: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001a2: 	shlq	$0x17, %rcx
    000001a6: 	shrq	$0x14, %rdx
    000001aa: 	xorq	%rcx, %rdx
    000001ad: 	xorq	%rdx, %rax
    000001b0: 	movq	%rax, %rdx
    000001b3: 	movq	%rax, %rcx
    000001b6: 	shrq	$0x6, %rdx
    000001ba: 	movq	%rdx, %rax
    000001bd: 	mulq	%r8
    000001c0: 	movq	%rcx, %rax
    000001c3: 	imulq	$0x1f40, %rdx, %rdx
    000001ca: 	subq	%rdx, %rax
    000001cd: 	leaq	(%r11,%rax,8), %rax
    000001d1: 	movq	(%rax), %rdx
    000001d4: 	movq	%rdx, -0x8(%rsi)
    000001d8: 	movq	%rbp, (%rax)
    000001db: 	cmpq	%rbx, %rsi
    000001de: 	jne	.Ltmp1424 # Offset: 478
    000001e0: 	movq	(%rsp), %rax
    000001e4: 	xorl	%edx, %edx
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1425:
    000001f0: 	xorl	%ecx, %ecx
    000001f2: 	cmpq	(%rax), %rdi
    000001f5: 	sete	%cl
    000001f8: 	addq	$0x8, %rax
    000001fc: 	addq	%rcx, %rdx
    000001ff: 	cmpq	%rbx, %rax
    00000202: 	jne	.Ltmp1425 # Offset: 514
    00000204: 	movq	0x50(%rsp), %rbp
    00000209: 	leaq	0x80(%rsp), %rax
    00000211: 	movq	0x58(%rsp), %r12
    00000216: 	movq	%rdx, gCount(%rip)
    0000021d: 	movq	%rax, 0x18(%rsp)
    00000222: 	movq	%rax, 0x70(%rsp)
    00000227: 	movq	%rbp, %rax
    0000022a: 	addq	%r12, %rax
    0000022d: 	je	.Ltmp1426 # Offset: 557
    0000022f: 	testq	%rbp, %rbp
    00000232: 	je	.Ltmp1427 # Offset: 562
.Ltmp1426:
    00000238: 	movq	%r12, 0x30(%rsp)
    0000023d: 	cmpq	$0xf, %r12
    00000241: 	ja	.Ltmp1428 # Offset: 577
    00000247: 	cmpq	$0x1, %r12
    0000024b: 	jne	.Ltmp1429 # Offset: 587
    00000251: 	movzbl	(%rbp), %eax
    00000255: 	movb	%al, 0x80(%rsp)
    0000025c: 	movq	0x18(%rsp), %rax
.Ltmp1482:
    00000261: 	movq	%r12, 0x78(%rsp)
    00000266: 	movb	$0x0, (%rax,%r12)
    0000026b: 	movabsq	$0x3fffffffffffffff, %rax
    00000275: 	subq	0x78(%rsp), %rax
    0000027a: 	cmpq	$0xa, %rax
    0000027e: 	jbe	.Ltmp1430 # Offset: 638
    00000284: 	leaq	0x70(%rsp), %rax
    00000289: 	movl	$0xb, %edx
    0000028e: 	leaq	DATAat0x191e0(%rip), %rsi
    00000295: 	movq	%rax, %rdi
    00000298: 	movq	%rax, 0x20(%rsp)
    0000029d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 669
    000002a2: 	movslq	init_value(%rip), %r12
    000002a9: 	leaq	0xa0(%rsp), %r14
    000002b1: 	callq	clock@PLT # Offset: 689
    000002b6: 	movl	iterations(%rip), %edx
    000002bc: 	movl	$0x0, 0xc(%rsp)
    000002c4: 	movq	%rax, start_time(%rip)
    000002cb: 	testl	%edx, %edx
    000002cd: 	jle	.Ltmp1431 # Offset: 717
    000002d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1439:
    000002d8: 	movq	(%rsp), %rax
    000002dc: 	xorl	%ebp, %ebp
    000002de: 	nop # Size: 2
.Ltmp1432:
    000002e0: 	xorl	%edx, %edx
    000002e2: 	cmpq	(%rax), %r12
    000002e5: 	sete	%dl
    000002e8: 	addq	$0x8, %rax
    000002ec: 	addq	%rdx, %rbp
    000002ef: 	cmpq	%rbx, %rax
    000002f2: 	jne	.Ltmp1432 # Offset: 754
    000002f4: 	movq	0x70(%rsp), %r15
    000002f9: 	movq	0x78(%rsp), %r13
    000002fe: 	movq	%r14, 0x90(%rsp)
    00000306: 	movq	%r15, %rax
    00000309: 	addq	%r13, %rax
    0000030c: 	je	.Ltmp1433 # Offset: 780
    0000030e: 	testq	%r15, %r15
    00000311: 	je	.Ltmp1434 # Offset: 785
.Ltmp1433:
    00000317: 	movq	%r13, 0x30(%rsp)
    0000031c: 	cmpq	$0xf, %r13
    00000320: 	ja	.Ltmp1435 # Offset: 800
    00000326: 	cmpq	$0x1, %r13
    0000032a: 	jne	.Ltmp1436 # Offset: 810
    00000330: 	movzbl	(%r15), %eax
    00000334: 	movb	%al, 0xa0(%rsp)
    0000033b: 	movq	%r14, %rax
.Ltmp1486:
    0000033e: 	movq	%r13, 0x98(%rsp)
    00000346: 	movb	$0x0, (%rax,%r13)
    0000034b: 	cmpq	gCount(%rip), %rbp
    00000352: 	je	.Ltmp1437 # Offset: 850
    00000354: 	movq	0x90(%rsp), %rdx
    0000035c: 	leaq	DATAat0x191d0(%rip), %rsi
    00000363: 	movl	$0x1, %edi
    00000368: 	xorl	%eax, %eax
    0000036a: 	callq	__printf_chk@PLT # Offset: 874
.Ltmp1437:
    0000036f: 	movq	0x90(%rsp), %rdi
    00000377: 	cmpq	%r14, %rdi
    0000037a: 	je	.Ltmp1438 # Offset: 890
    00000380: 	movq	0xa0(%rsp), %rax
    00000388: 	leaq	0x1(%rax), %rsi
    0000038c: 	callq	_ZdlPvm@PLT # Offset: 908
    00000391: 	addl	$0x1, 0xc(%rsp)
    00000396: 	movl	0xc(%rsp), %eax
    0000039a: 	cmpl	%eax, iterations(%rip)
    000003a0: 	jg	.Ltmp1439 # Offset: 928
.Ltmp1431:
    000003a6: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000003ad: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000003b4: 	subq	$0x20, %rax
    000003b8: 	cmpq	%rax, %rdi
    000003bb: 	je	.Ltmp1440 # Offset: 955
    000003c1: 	leaq	0x10(%rdi), %rax
    000003c5: 	movq	0x78(%rsp), %rdx
    000003ca: 	movq	%rax, (%rdi)
    000003cd: 	movq	0x70(%rsp), %rsi
    000003d2: 	addq	%rsi, %rdx
    000003d5: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 981
    000003da: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003e1: 	addq	$0x20, %rax
    000003e5: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1496:
    000003ec: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003f3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003fa: 	je	.Ltmp1441 # Offset: 1018
.Ltmp1495:
    00000400: 	movq	-0x20(%rax), %rbp
    00000404: 	callq	clock@PLT # Offset: 1028
    00000409: 	pxor	%xmm0, %xmm0
    0000040d: 	movq	%rax, end_time(%rip)
    00000414: 	movq	%rbp, %rdi
    00000417: 	subq	start_time(%rip), %rax
    0000041e: 	cvtsi2sd	%rax, %xmm0
    00000423: 	divsd	DATAat0x19290(%rip), %xmm0
    0000042b: 	callq	_Z13record_resultdPKc # Offset: 1067
    00000430: 	movq	0x70(%rsp), %rdi
    00000435: 	cmpq	0x18(%rsp), %rdi
    0000043a: 	je	.Ltmp1442 # Offset: 1082
    0000043c: 	movq	0x80(%rsp), %rax
    00000444: 	leaq	0x1(%rax), %rsi
    00000448: 	callq	_ZdlPvm@PLT # Offset: 1096
.Ltmp1442:
    0000044d: 	movq	0x18(%rsp), %rax
    00000452: 	movq	0x50(%rsp), %rbp
    00000457: 	movq	0x58(%rsp), %r12
    0000045c: 	movq	%rax, 0x70(%rsp)
    00000461: 	movq	%rbp, %rax
    00000464: 	addq	%r12, %rax
    00000467: 	je	.Ltmp1443 # Offset: 1127
    00000469: 	testq	%rbp, %rbp
    0000046c: 	je	.Ltmp1444 # Offset: 1132
.Ltmp1443:
    00000472: 	movq	%r12, 0x30(%rsp)
    00000477: 	cmpq	$0xf, %r12
    0000047b: 	ja	.Ltmp1445 # Offset: 1147
    00000481: 	cmpq	$0x1, %r12
    00000485: 	jne	.Ltmp1446 # Offset: 1157
    0000048b: 	movzbl	(%rbp), %eax
    0000048f: 	movb	%al, 0x80(%rsp)
    00000496: 	movq	0x18(%rsp), %rax
.Ltmp1492:
    0000049b: 	movq	%r12, 0x78(%rsp)
    000004a0: 	movb	$0x0, (%rax,%r12)
    000004a5: 	movabsq	$0x3fffffffffffffff, %rax
    000004af: 	subq	0x78(%rsp), %rax
    000004b4: 	cmpq	$0xd, %rax
    000004b8: 	jbe	.Ltmp1447 # Offset: 1208
    000004be: 	movq	0x20(%rsp), %rdi
    000004c3: 	movl	$0xe, %edx
    000004c8: 	leaq	DATAat0x191ec(%rip), %rsi
    000004cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1231
    000004d4: 	callq	clock@PLT # Offset: 1236
    000004d9: 	xorl	%r15d, %r15d
    000004dc: 	leaq	0xa0(%rsp), %r14
    000004e4: 	movq	%rax, start_time(%rip)
    000004eb: 	movl	iterations(%rip), %eax
    000004f1: 	testl	%eax, %eax
    000004f3: 	jle	.Ltmp1448 # Offset: 1267
    000004f9: 	nopl	(%rax) # Size: 7
.Ltmp1456:
    00000500: 	movslq	init_value(%rip), %rcx
    00000507: 	movq	(%rsp), %rax
    0000050b: 	xorl	%ebp, %ebp
    0000050d: 	nopl	(%rax) # Size: 3
.Ltmp1449:
    00000510: 	xorl	%edx, %edx
    00000512: 	cmpq	(%rax), %rcx
    00000515: 	sete	%dl
    00000518: 	addq	$0x8, %rax
    0000051c: 	addq	%rdx, %rbp
    0000051f: 	cmpq	%rbx, %rax
    00000522: 	jne	.Ltmp1449 # Offset: 1314
    00000524: 	movq	0x70(%rsp), %r13
    00000529: 	movq	0x78(%rsp), %r12
    0000052e: 	movq	%r14, 0x90(%rsp)
    00000536: 	movq	%r13, %rax
    00000539: 	addq	%r12, %rax
    0000053c: 	je	.Ltmp1450 # Offset: 1340
    0000053e: 	testq	%r13, %r13
    00000541: 	je	.Ltmp1451 # Offset: 1345
.Ltmp1450:
    00000547: 	movq	%r12, 0x30(%rsp)
    0000054c: 	cmpq	$0xf, %r12
    00000550: 	ja	.Ltmp1452 # Offset: 1360
    00000556: 	cmpq	$0x1, %r12
    0000055a: 	jne	.Ltmp1453 # Offset: 1370
    00000560: 	movzbl	(%r13), %eax
    00000565: 	movb	%al, 0xa0(%rsp)
    0000056c: 	movq	%r14, %rax
.Ltmp1484:
    0000056f: 	movq	%r12, 0x98(%rsp)
    00000577: 	movb	$0x0, (%rax,%r12)
    0000057c: 	cmpq	gCount(%rip), %rbp
    00000583: 	je	.Ltmp1454 # Offset: 1411
    00000585: 	movq	0x90(%rsp), %rdx
    0000058d: 	leaq	DATAat0x191d0(%rip), %rsi
    00000594: 	movl	$0x1, %edi
    00000599: 	xorl	%eax, %eax
    0000059b: 	callq	__printf_chk@PLT # Offset: 1435
.Ltmp1454:
    000005a0: 	movq	0x90(%rsp), %rdi
    000005a8: 	cmpq	%r14, %rdi
    000005ab: 	je	.Ltmp1455 # Offset: 1451
    000005b1: 	movq	0xa0(%rsp), %rax
    000005b9: 	addl	$0x1, %r15d
    000005bd: 	leaq	0x1(%rax), %rsi
    000005c1: 	callq	_ZdlPvm@PLT # Offset: 1473
    000005c6: 	cmpl	iterations(%rip), %r15d
    000005cd: 	jl	.Ltmp1456 # Offset: 1485
.Ltmp1448:
    000005d3: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000005da: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000005e1: 	subq	$0x20, %rax
    000005e5: 	cmpq	%rax, %rdi
    000005e8: 	je	.Ltmp1457 # Offset: 1512
    000005ee: 	leaq	0x10(%rdi), %rax
    000005f2: 	movq	0x78(%rsp), %rdx
    000005f7: 	movq	%rax, (%rdi)
    000005fa: 	movq	0x70(%rsp), %rsi
    000005ff: 	addq	%rsi, %rdx
    00000602: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1538
    00000607: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000060e: 	addq	$0x20, %rax
    00000612: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1494:
    00000619: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000620: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000627: 	je	.Ltmp1458 # Offset: 1575
.Ltmp1493:
    0000062d: 	movq	-0x20(%rax), %rbp
    00000631: 	callq	clock@PLT # Offset: 1585
    00000636: 	pxor	%xmm0, %xmm0
    0000063a: 	movq	%rax, end_time(%rip)
    00000641: 	movq	%rbp, %rdi
    00000644: 	subq	start_time(%rip), %rax
    0000064b: 	cvtsi2sd	%rax, %xmm0
    00000650: 	divsd	DATAat0x19290(%rip), %xmm0
    00000658: 	callq	_Z13record_resultdPKc # Offset: 1624
    0000065d: 	movq	0x70(%rsp), %rdi
    00000662: 	cmpq	0x18(%rsp), %rdi
    00000667: 	je	.Ltmp1459 # Offset: 1639
    00000669: 	movq	0x80(%rsp), %rax
    00000671: 	leaq	0x1(%rax), %rsi
    00000675: 	callq	_ZdlPvm@PLT # Offset: 1653
.Ltmp1459:
    0000067a: 	movq	0x50(%rsp), %rbp
    0000067f: 	movq	0x58(%rsp), %r12
    00000684: 	leaq	0xa0(%rsp), %r14
    0000068c: 	movq	%r14, 0x90(%rsp)
    00000694: 	movq	%rbp, %rax
    00000697: 	addq	%r12, %rax
    0000069a: 	je	.Ltmp1460 # Offset: 1690
    0000069c: 	testq	%rbp, %rbp
    0000069f: 	je	.Ltmp1461 # Offset: 1695
.Ltmp1460:
    000006a5: 	movq	%r12, 0x30(%rsp)
    000006aa: 	cmpq	$0xf, %r12
    000006ae: 	ja	.Ltmp1462 # Offset: 1710
    000006b4: 	cmpq	$0x1, %r12
    000006b8: 	jne	.Ltmp1463 # Offset: 1720
    000006be: 	movzbl	(%rbp), %eax
    000006c2: 	movb	%al, 0xa0(%rsp)
    000006c9: 	movq	%r14, %rax
.Ltmp1488:
    000006cc: 	movq	%r12, 0x98(%rsp)
    000006d4: 	movb	$0x0, (%rax,%r12)
    000006d9: 	movabsq	$0x3fffffffffffffff, %rax
    000006e3: 	subq	0x98(%rsp), %rax
    000006eb: 	cmpq	$0x6, %rax
    000006ef: 	jbe	.Ltmp1464 # Offset: 1775
    000006f5: 	leaq	0x90(%rsp), %rbp
    000006fd: 	movl	$0x7, %edx
    00000702: 	leaq	DATAat0x191fb(%rip), %rsi
    00000709: 	movq	%rbp, %rdi
    0000070c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1804
    00000711: 	movslq	init_value(%rip), %rdx
    00000718: 	movq	(%rsp), %rdi
    0000071c: 	movq	%rbp, %r8
    0000071f: 	leaq	_Z6count1IlEmPT_iS0_(%rip), %rcx
    00000726: 	movl	$0x1f40, %esi
    0000072b: 	callq	_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1835
    00000730: 	movq	0x90(%rsp), %rdi
    00000738: 	cmpq	%r14, %rdi
    0000073b: 	je	.Ltmp1465 # Offset: 1851
    0000073d: 	movq	0xa0(%rsp), %rax
    00000745: 	leaq	0x1(%rax), %rsi
    00000749: 	callq	_ZdlPvm@PLT # Offset: 1865
.Ltmp1465:
    0000074e: 	leaq	0x50(%rsp), %r12
    00000753: 	leaq	DATAat0x19203(%rip), %rdx
    0000075a: 	movq	%rbp, %rdi
    0000075d: 	movq	%r12, %rsi
    00000760: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1888
    00000765: 	movslq	init_value(%rip), %rdx
    0000076c: 	movq	(%rsp), %rdi
    00000770: 	movq	%rbp, %r8
    00000773: 	leaq	_Z6count2IlEmPT_iS0_(%rip), %rcx
    0000077a: 	movl	$0x1f40, %esi
    0000077f: 	callq	_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1919
    00000784: 	movq	0x90(%rsp), %rdi
    0000078c: 	cmpq	%r14, %rdi
    0000078f: 	je	.Ltmp1466 # Offset: 1935
    00000791: 	movq	0xa0(%rsp), %rax
    00000799: 	leaq	0x1(%rax), %rsi
    0000079d: 	callq	_ZdlPvm@PLT # Offset: 1949
.Ltmp1466:
    000007a2: 	leaq	DATAat0x1920b(%rip), %rdx
    000007a9: 	movq	%r12, %rsi
    000007ac: 	movq	%rbp, %rdi
    000007af: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1967
    000007b4: 	movslq	init_value(%rip), %rdx
    000007bb: 	movq	(%rsp), %rdi
    000007bf: 	movq	%rbp, %r8
    000007c2: 	leaq	_Z6count3IlEmPT_iS0_(%rip), %rcx
    000007c9: 	movl	$0x1f40, %esi
    000007ce: 	callq	_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1998
    000007d3: 	movq	0x90(%rsp), %rdi
    000007db: 	cmpq	%r14, %rdi
    000007de: 	je	.Ltmp1467 # Offset: 2014
    000007e0: 	movq	0xa0(%rsp), %rax
    000007e8: 	leaq	0x1(%rax), %rsi
    000007ec: 	callq	_ZdlPvm@PLT # Offset: 2028
.Ltmp1467:
    000007f1: 	leaq	DATAat0x19213(%rip), %rdx
    000007f8: 	movq	%r12, %rsi
    000007fb: 	movq	%rbp, %rdi
    000007fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2046
    00000803: 	movslq	init_value(%rip), %rdx
    0000080a: 	movq	(%rsp), %rdi
    0000080e: 	movq	%rbp, %r8
    00000811: 	leaq	_Z6count4IlEmPT_iS0_(%rip), %rcx
    00000818: 	movl	$0x1f40, %esi
    0000081d: 	callq	_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2077
    00000822: 	movq	0x90(%rsp), %rdi
    0000082a: 	cmpq	%r14, %rdi
    0000082d: 	je	.Ltmp1468 # Offset: 2093
    0000082f: 	movq	0xa0(%rsp), %rax
    00000837: 	leaq	0x1(%rax), %rsi
    0000083b: 	callq	_ZdlPvm@PLT # Offset: 2107
.Ltmp1468:
    00000840: 	leaq	DATAat0x1921b(%rip), %rdx
    00000847: 	movq	%r12, %rsi
    0000084a: 	movq	%rbp, %rdi
    0000084d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2125
    00000852: 	movslq	init_value(%rip), %rdx
    00000859: 	movq	(%rsp), %rdi
    0000085d: 	movq	%rbp, %r8
    00000860: 	leaq	_Z6count5IlEmPT_iS0_(%rip), %rcx
    00000867: 	movl	$0x1f40, %esi
    0000086c: 	callq	_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2156
    00000871: 	movq	0x90(%rsp), %rdi
    00000879: 	cmpq	%r14, %rdi
    0000087c: 	je	.Ltmp1469 # Offset: 2172
    0000087e: 	movq	0xa0(%rsp), %rax
    00000886: 	leaq	0x1(%rax), %rsi
    0000088a: 	callq	_ZdlPvm@PLT # Offset: 2186
.Ltmp1469:
    0000088f: 	leaq	DATAat0x19223(%rip), %rdx
    00000896: 	movq	%r12, %rsi
    00000899: 	movq	%rbp, %rdi
    0000089c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2204
    000008a1: 	movslq	init_value(%rip), %rdx
    000008a8: 	movq	(%rsp), %rdi
    000008ac: 	movq	%rbp, %r8
    000008af: 	leaq	_Z6count6IlEmPT_iS0_(%rip), %rcx
    000008b6: 	movl	$0x1f40, %esi
    000008bb: 	callq	_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2235
    000008c0: 	movq	0x90(%rsp), %rdi
    000008c8: 	cmpq	%r14, %rdi
    000008cb: 	je	.Ltmp1470 # Offset: 2251
    000008cd: 	movq	0xa0(%rsp), %rax
    000008d5: 	leaq	0x1(%rax), %rsi
    000008d9: 	callq	_ZdlPvm@PLT # Offset: 2265
.Ltmp1470:
    000008de: 	leaq	DATAat0x1922b(%rip), %rdx
    000008e5: 	movq	%r12, %rsi
    000008e8: 	movq	%rbp, %rdi
    000008eb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2283
    000008f0: 	movslq	init_value(%rip), %rdx
    000008f7: 	movq	(%rsp), %rdi
    000008fb: 	movq	%rbp, %r8
    000008fe: 	leaq	_Z6count7IlEmPT_iS0_(%rip), %rcx
    00000905: 	movl	$0x1f40, %esi
    0000090a: 	callq	_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2314
    0000090f: 	movq	0x90(%rsp), %rdi
    00000917: 	cmpq	%r14, %rdi
    0000091a: 	je	.Ltmp1471 # Offset: 2330
    0000091c: 	movq	0xa0(%rsp), %rax
    00000924: 	leaq	0x1(%rax), %rsi
    00000928: 	callq	_ZdlPvm@PLT # Offset: 2344
.Ltmp1471:
    0000092d: 	leaq	DATAat0x19233(%rip), %rdx
    00000934: 	movq	%r12, %rsi
    00000937: 	movq	%rbp, %rdi
    0000093a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2362
    0000093f: 	movslq	init_value(%rip), %rdx
    00000946: 	movq	(%rsp), %rdi
    0000094a: 	movq	%rbp, %r8
    0000094d: 	leaq	_Z6count8IlEmPT_iS0_(%rip), %rcx
    00000954: 	movl	$0x1f40, %esi
    00000959: 	callq	_Z10test_countIlPFmPlilEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2393
    0000095e: 	movq	0x90(%rsp), %rdi
    00000966: 	cmpq	%r14, %rdi
    00000969: 	je	.Ltmp1472 # Offset: 2409
    0000096b: 	movq	0xa0(%rsp), %rax
    00000973: 	leaq	0x1(%rax), %rsi
    00000977: 	callq	_ZdlPvm@PLT # Offset: 2423
.Ltmp1472:
    0000097c: 	movq	0x50(%rsp), %r13
    00000981: 	movq	0x58(%rsp), %r12
    00000986: 	movq	%r14, 0x90(%rsp)
    0000098e: 	movq	%r13, %rax
    00000991: 	addq	%r12, %rax
    00000994: 	je	.Ltmp1473 # Offset: 2452
    00000996: 	testq	%r13, %r13
    00000999: 	je	.Ltmp1474 # Offset: 2457
.Ltmp1473:
    0000099f: 	movq	%r12, 0x30(%rsp)
    000009a4: 	cmpq	$0xf, %r12
    000009a8: 	ja	.Ltmp1475 # Offset: 2472
    000009ae: 	cmpq	$0x1, %r12
    000009b2: 	jne	.Ltmp1476 # Offset: 2482
    000009b8: 	movzbl	(%r13), %eax
    000009bd: 	movb	%al, 0xa0(%rsp)
    000009c4: 	movq	%r14, %rax
.Ltmp1490:
    000009c7: 	movq	%r12, 0x98(%rsp)
    000009cf: 	movb	$0x0, (%rax,%r12)
    000009d4: 	movabsq	$0x3fffffffffffffff, %rax
    000009de: 	subq	0x98(%rsp), %rax
    000009e6: 	cmpq	$0xe, %rax
    000009ea: 	jbe	.Ltmp1477 # Offset: 2538
    000009f0: 	movl	$0xf, %edx
    000009f5: 	leaq	DATAat0x1923b(%rip), %rsi
    000009fc: 	movq	%rbp, %rdi
    000009ff: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2559
    00000a04: 	movl	iterations(%rip), %edx
    00000a0a: 	xorl	%r8d, %r8d
    00000a0d: 	xorl	%ecx, %ecx
    00000a0f: 	movl	$0x1f40, %esi
    00000a14: 	movq	0x90(%rsp), %rdi
    00000a1c: 	callq	_Z9summarizePKciiii # Offset: 2588
    00000a21: 	movq	0x90(%rsp), %rdi
    00000a29: 	cmpq	%r14, %rdi
    00000a2c: 	je	.Ltmp1478 # Offset: 2604
    00000a2e: 	movq	0xa0(%rsp), %rax
    00000a36: 	leaq	0x1(%rax), %rsi
    00000a3a: 	callq	_ZdlPvm@PLT # Offset: 2618
.Ltmp1478:
    00000a3f: 	movq	0x50(%rsp), %rdi
    00000a44: 	cmpq	0x28(%rsp), %rdi
    00000a49: 	je	.Ltmp1479 # Offset: 2633
    00000a4b: 	movq	0x60(%rsp), %rax
    00000a50: 	leaq	0x1(%rax), %rsi
    00000a54: 	callq	_ZdlPvm@PLT # Offset: 2644
.Ltmp1479:
    00000a59: 	movq	0xfab8(%rsp), %rax
    00000a61: 	subq	%fs:0x28, %rax
    00000a6a: 	jne	.Ltmp1480 # Offset: 2666
    00000a70: 	addq	$0xfac8, %rsp
    00000a77: 	popq	%rbx
    00000a78: 	popq	%rbp
    00000a79: 	popq	%r12
    00000a7b: 	popq	%r13
    00000a7d: 	popq	%r14
    00000a7f: 	popq	%r15
    00000a81: 	retq # Offset: 2689
.Ltmp1429:
    00000a82: 	testq	%r12, %r12
    00000a85: 	jne	.Ltmp1481 # Offset: 2693
    00000a8b: 	movq	0x18(%rsp), %rax
    00000a90: 	jmp	.Ltmp1482 # Offset: 2704
    00000a95: 	nopl	(%rax) # Size: 3
.Ltmp1438:
    00000a98: 	addl	$0x1, 0xc(%rsp)
    00000a9d: 	movl	0xc(%rsp), %eax
    00000aa1: 	cmpl	iterations(%rip), %eax
    00000aa7: 	jl	.Ltmp1439 # Offset: 2727
    00000aad: 	jmp	.Ltmp1431 # Offset: 2733
    00000ab2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1455:
    00000ab8: 	addl	$0x1, %r15d
    00000abc: 	cmpl	iterations(%rip), %r15d
    00000ac3: 	jl	.Ltmp1456 # Offset: 2755
    00000ac9: 	jmp	.Ltmp1448 # Offset: 2761
    00000ace: 	nop # Size: 2
.Ltmp1453:
    00000ad0: 	testq	%r12, %r12
    00000ad3: 	jne	.Ltmp1483 # Offset: 2771
    00000ad9: 	movq	%r14, %rax
    00000adc: 	jmp	.Ltmp1484 # Offset: 2780
    00000ae1: 	nopl	(%rax) # Size: 7
.Ltmp1436:
    00000ae8: 	testq	%r13, %r13
    00000aeb: 	jne	.Ltmp1485 # Offset: 2795
    00000af1: 	movq	%r14, %rax
    00000af4: 	jmp	.Ltmp1486 # Offset: 2804
    00000af9: 	nopl	(%rax) # Size: 7
.Ltmp1435:
    00000b00: 	movq	0x10(%rsp), %rsi
    00000b05: 	leaq	0x90(%rsp), %rdi
    00000b0d: 	xorl	%edx, %edx
    00000b0f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2831
    00000b14: 	movq	%rax, 0x90(%rsp)
    00000b1c: 	movq	%rax, %rdi
    00000b1f: 	movq	0x30(%rsp), %rax
    00000b24: 	movq	%rax, 0xa0(%rsp)
.Ltmp1499:
    00000b2c: 	movq	%r13, %rdx
    00000b2f: 	movq	%r15, %rsi
    00000b32: 	callq	memcpy@PLT # Offset: 2866
    00000b37: 	movq	0x30(%rsp), %r13
    00000b3c: 	movq	0x90(%rsp), %rax
    00000b44: 	jmp	.Ltmp1486 # Offset: 2884
    00000b49: 	nopl	(%rax) # Size: 7
.Ltmp1452:
    00000b50: 	movq	0x10(%rsp), %rsi
    00000b55: 	leaq	0x90(%rsp), %rdi
    00000b5d: 	xorl	%edx, %edx
    00000b5f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2911
    00000b64: 	movq	%rax, 0x90(%rsp)
    00000b6c: 	movq	%rax, %rdi
    00000b6f: 	movq	0x30(%rsp), %rax
    00000b74: 	movq	%rax, 0xa0(%rsp)
.Ltmp1498:
    00000b7c: 	movq	%r12, %rdx
    00000b7f: 	movq	%r13, %rsi
    00000b82: 	callq	memcpy@PLT # Offset: 2946
    00000b87: 	movq	0x30(%rsp), %r12
    00000b8c: 	movq	0x90(%rsp), %rax
    00000b94: 	jmp	.Ltmp1484 # Offset: 2964
.Ltmp1463:
    00000b99: 	testq	%r12, %r12
    00000b9c: 	jne	.Ltmp1487 # Offset: 2972
    00000ba2: 	movq	%r14, %rax
    00000ba5: 	jmp	.Ltmp1488 # Offset: 2981
.Ltmp1476:
    00000baa: 	testq	%r12, %r12
    00000bad: 	jne	.Ltmp1489 # Offset: 2989
    00000bb3: 	movq	%r14, %rax
    00000bb6: 	jmp	.Ltmp1490 # Offset: 2998
.Ltmp1446:
    00000bbb: 	testq	%r12, %r12
    00000bbe: 	jne	.Ltmp1491 # Offset: 3006
    00000bc4: 	movq	0x18(%rsp), %rax
    00000bc9: 	jmp	.Ltmp1492 # Offset: 3017
.Ltmp1445:
    00000bce: 	movq	0x10(%rsp), %rsi
    00000bd3: 	movq	0x20(%rsp), %rdi
    00000bd8: 	xorl	%edx, %edx
    00000bda: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3034
    00000bdf: 	movq	%rax, 0x70(%rsp)
    00000be4: 	movq	%rax, %rdi
    00000be7: 	movq	0x30(%rsp), %rax
    00000bec: 	movq	%rax, 0x80(%rsp)
.Ltmp1502:
    00000bf4: 	movq	%r12, %rdx
    00000bf7: 	movq	%rbp, %rsi
    00000bfa: 	callq	memcpy@PLT # Offset: 3066
    00000bff: 	movq	0x30(%rsp), %r12
    00000c04: 	movq	0x70(%rsp), %rax
    00000c09: 	jmp	.Ltmp1492 # Offset: 3081
.Ltmp1462:
    00000c0e: 	movq	0x10(%rsp), %rsi
    00000c13: 	leaq	0x90(%rsp), %rdi
    00000c1b: 	xorl	%edx, %edx
    00000c1d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3101
    00000c22: 	movq	%rax, 0x90(%rsp)
    00000c2a: 	movq	%rax, %rdi
    00000c2d: 	movq	0x30(%rsp), %rax
    00000c32: 	movq	%rax, 0xa0(%rsp)
.Ltmp1500:
    00000c3a: 	movq	%r12, %rdx
    00000c3d: 	movq	%rbp, %rsi
    00000c40: 	callq	memcpy@PLT # Offset: 3136
    00000c45: 	movq	0x30(%rsp), %r12
    00000c4a: 	movq	0x90(%rsp), %rax
    00000c52: 	jmp	.Ltmp1488 # Offset: 3154
.Ltmp1475:
    00000c57: 	movq	0x10(%rsp), %rsi
    00000c5c: 	xorl	%edx, %edx
    00000c5e: 	movq	%rbp, %rdi
    00000c61: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3169
    00000c66: 	movq	%rax, 0x90(%rsp)
    00000c6e: 	movq	%rax, %rdi
    00000c71: 	movq	0x30(%rsp), %rax
    00000c76: 	movq	%rax, 0xa0(%rsp)
.Ltmp1501:
    00000c7e: 	movq	%r12, %rdx
    00000c81: 	movq	%r13, %rsi
    00000c84: 	callq	memcpy@PLT # Offset: 3204
    00000c89: 	movq	0x30(%rsp), %r12
    00000c8e: 	movq	0x90(%rsp), %rax
    00000c96: 	jmp	.Ltmp1490 # Offset: 3222
.Ltmp1428:
    00000c9b: 	movq	0x10(%rsp), %rsi
    00000ca0: 	leaq	0x70(%rsp), %rdi
    00000ca5: 	xorl	%edx, %edx
    00000ca7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3239
    00000cac: 	movq	%rax, 0x70(%rsp)
    00000cb1: 	movq	%rax, %rdi
    00000cb4: 	movq	0x30(%rsp), %rax
    00000cb9: 	movq	%rax, 0x80(%rsp)
.Ltmp1497:
    00000cc1: 	movq	%r12, %rdx
    00000cc4: 	movq	%rbp, %rsi
    00000cc7: 	callq	memcpy@PLT # Offset: 3271
    00000ccc: 	movq	0x30(%rsp), %r12
    00000cd1: 	movq	0x70(%rsp), %rax
    00000cd6: 	jmp	.Ltmp1482 # Offset: 3286
.Ltmp1458:
    00000cdb: 	movq	-0x8(%rdx), %rax
    00000cdf: 	addq	$0x200, %rax
    00000ce5: 	jmp	.Ltmp1493 # Offset: 3301
.Ltmp1457:
    00000cea: 	movq	0x20(%rsp), %rsi
    00000cef: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000cf6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3318
    00000cfb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000d02: 	jmp	.Ltmp1494 # Offset: 3330
.Ltmp1441:
    00000d07: 	movq	-0x8(%rdx), %rax
    00000d0b: 	addq	$0x200, %rax
    00000d11: 	jmp	.Ltmp1495 # Offset: 3345
.Ltmp1440:
    00000d16: 	movq	0x20(%rsp), %rsi
    00000d1b: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000d22: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3362
    00000d27: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000d2e: 	jmp	.Ltmp1496 # Offset: 3374
.Ltmp1430:
    00000d33: 	leaq	DATAat0x19184(%rip), %rdi
    00000d3a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3386
.Ltmp1434:
    00000d3f: 	leaq	DATAat0x19008(%rip), %rdi
    00000d46: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3398
.Ltmp1444:
    00000d4b: 	leaq	DATAat0x19008(%rip), %rdi
    00000d52: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3410
.Ltmp1447:
    00000d57: 	leaq	DATAat0x19184(%rip), %rdi
    00000d5e: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3422
.Ltmp1451:
    00000d63: 	leaq	DATAat0x19008(%rip), %rdi
    00000d6a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3434
.Ltmp1461:
    00000d6f: 	leaq	DATAat0x19008(%rip), %rdi
    00000d76: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3446
.Ltmp1464:
    00000d7b: 	leaq	DATAat0x19184(%rip), %rdi
    00000d82: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3458
.Ltmp1474:
    00000d87: 	leaq	DATAat0x19008(%rip), %rdi
    00000d8e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3470
.Ltmp1477:
    00000d93: 	leaq	DATAat0x19184(%rip), %rdi
    00000d9a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3482
.Ltmp1480:
    00000d9f: 	callq	__stack_chk_fail@PLT # Offset: 3487
.Ltmp1481:
    00000da4: 	movq	0x18(%rsp), %rdi
    00000da9: 	jmp	.Ltmp1497 # Offset: 3497
.Ltmp1483:
    00000dae: 	movq	%r14, %rdi
    00000db1: 	jmp	.Ltmp1498 # Offset: 3505
.Ltmp1485:
    00000db6: 	movq	%r14, %rdi
    00000db9: 	jmp	.Ltmp1499 # Offset: 3513
.Ltmp1487:
    00000dbe: 	movq	%r14, %rdi
    00000dc1: 	jmp	.Ltmp1500 # Offset: 3521
.Ltmp1489:
    00000dc6: 	movq	%r14, %rdi
    00000dc9: 	jmp	.Ltmp1501 # Offset: 3529
.Ltmp1491:
    00000dce: 	movq	0x18(%rsp), %rdi
    00000dd3: 	jmp	.Ltmp1502 # Offset: 3539
.Ltmp1427:
    00000dd8: 	leaq	DATAat0x19008(%rip), %rdi
    00000ddf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3551
    00000de4: 	endbr64
.Ltmp1504:
    00000de8: 	movq	%rax, %rbp
    00000deb: 	jmp	.Ltmp1503 # Offset: 3563
    00000df0: 	endbr64
    00000df4: 	jmp	.Ltmp1504 # Offset: 3572
    00000df6: 	endbr64
    00000dfa: 	jmp	.Ltmp1504 # Offset: 3578
    00000dfc: 	endbr64
    00000e00: 	movq	%rax, %rbp
    00000e03: 	jmp	.Ltmp1505 # Offset: 3587
    00000e05: 	endbr64
    00000e09: 	jmp	.Ltmp1504 # Offset: 3593
.Ltmp1508:
    00000e0b: 	movq	0x90(%rsp), %rdi
    00000e13: 	cmpq	%r14, %rdi
    00000e16: 	je	.Ltmp1506 # Offset: 3606
    00000e18: 	movq	0xa0(%rsp), %rax
    00000e20: 	leaq	0x1(%rax), %rsi
    00000e24: 	callq	_ZdlPvm@PLT # Offset: 3620
.Ltmp1506:
    00000e29: 	movq	0x70(%rsp), %rdi
    00000e2e: 	cmpq	0x18(%rsp), %rdi
    00000e33: 	je	.Ltmp1505 # Offset: 3635
    00000e35: 	movq	0x80(%rsp), %rax
    00000e3d: 	leaq	0x1(%rax), %rsi
    00000e41: 	callq	_ZdlPvm@PLT # Offset: 3649
.Ltmp1505:
    00000e46: 	movq	0x50(%rsp), %rdi
    00000e4b: 	cmpq	0x28(%rsp), %rdi
    00000e50: 	je	.Ltmp1507 # Offset: 3664
    00000e52: 	movq	0x60(%rsp), %rax
    00000e57: 	leaq	0x1(%rax), %rsi
    00000e5b: 	callq	_ZdlPvm@PLT # Offset: 3675
.Ltmp1507:
    00000e60: 	movq	%rbp, %rdi
    00000e63: 	callq	_Unwind_Resume@PLT # Offset: 3683
    00000e68: 	endbr64
.Ltmp1510:
    00000e6c: 	movq	%rax, %rbp
    00000e6f: 	jmp	.Ltmp1508 # Offset: 3695
    00000e71: 	endbr64
.Ltmp1509:
    00000e75: 	movq	%rax, %rbp
    00000e78: 	jmp	.Ltmp1506 # Offset: 3704
    00000e7a: 	endbr64
    00000e7e: 	jmp	.Ltmp1509 # Offset: 3710
    00000e80: 	endbr64
    00000e84: 	jmp	.Ltmp1509 # Offset: 3716
    00000e86: 	endbr64
    00000e8a: 	jmp	.Ltmp1510 # Offset: 3722
    00000e8c: 	endbr64
    00000e90: 	jmp	.Ltmp1509 # Offset: 3728
    00000e92: 	endbr64
    00000e96: 	jmp	.Ltmp1504 # Offset: 3734
    00000e9b: 	endbr64
    00000e9f: 	jmp	.Ltmp1504 # Offset: 3743
    00000ea4: 	endbr64
    00000ea8: 	jmp	.Ltmp1504 # Offset: 3752
    00000ead: 	endbr64
    00000eb1: 	jmp	.Ltmp1504 # Offset: 3761
    00000eb6: 	endbr64
    00000eba: 	jmp	.Ltmp1504 # Offset: 3770
    00000ebf: 	endbr64
    00000ec3: 	jmp	.Ltmp1504 # Offset: 3779
    00000ec8: 	endbr64
    00000ecc: 	jmp	.Ltmp1504 # Offset: 3788
.Ltmp1503:
    00000ed1: 	movq	0x90(%rsp), %rdi
    00000ed9: 	cmpq	%r14, %rdi
    00000edc: 	je	.Ltmp1505 # Offset: 3804
    00000ee2: 	movq	0xa0(%rsp), %rax
    00000eea: 	leaq	0x1(%rax), %rsi
    00000eee: 	callq	_ZdlPvm@PLT # Offset: 3822
    00000ef3: 	jmp	.Ltmp1505 # Offset: 3827
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIlEvv"

Binary Function "_Z11TestOneTypeIsEvv" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0x11f20
  Size        : 0x10c2
  MaxSize     : 0x10d0
  Offset      : 0x11f20
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIsEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x1000, %rsp
    0000002d: 	orq	$0x0, (%rsp)
    00000032: 	subq	$0xf58, %rsp
    00000039: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    00000041: 	movl	$0x5f36, %ecx
    00000046: 	movq	%fs:0x28, %rax
    0000004f: 	movq	%rax, 0x3f48(%rsp)
    00000057: 	xorl	%eax, %eax
    00000059: 	movaps	%xmm7, 0x40(%rsp)
    0000005e: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    00000066: 	leaq	0x70(%rsp), %rax
    0000006b: 	leaq	0x40(%rsp), %rdi
    00000070: 	movq	%rax, 0x38(%rsp)
    00000075: 	leaq	0x3f40(%rsp), %rbp
    0000007d: 	movq	%rax, 0x60(%rsp)
    00000082: 	movw	%cx, 0x74(%rsp)
    00000087: 	movq	%rdi, 0x20(%rsp)
    0000008c: 	movaps	%xmm7, 0x50(%rsp)
    00000091: 	movl	$0x31746e69, 0x70(%rsp)
    00000099: 	movb	$0x74, 0x76(%rsp)
    0000009e: 	movq	$0x7, 0x68(%rsp)
    000000a7: 	movb	$0x0, 0x77(%rsp)
    000000ac: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 172
    000000b1: 	movl	init_value(%rip), %eax
    000000b7: 	leal	0x7b(%rax), %edi
    000000ba: 	callq	srand@PLT # Offset: 186
    000000bf: 	leaq	0xc0(%rsp), %rax
    000000c7: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000d1: 	movabsq	$0x14057b7ef767814f, %rdi
    000000db: 	movq	%rax, 0x18(%rsp)
    000000e0: 	movq	%rax, %rdx
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1511:
    000000e8: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000ef: 	addq	$0x2, %rdx
    000000f3: 	imulq	%r8, %rax
    000000f7: 	addq	%rdi, %rax
    000000fa: 	movq	%rax, %rcx
    000000fd: 	movq	%rax, %rsi
    00000100: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000107: 	shrq	$0x14, %rcx
    0000010b: 	shlq	$0x17, %rsi
    0000010f: 	xorq	%rsi, %rcx
    00000112: 	xorq	%rcx, %rax
    00000115: 	sarq	$0x3, %rax
    00000119: 	movw	%ax, -0x2(%rdx)
    0000011d: 	cmpq	%rbp, %rdx
    00000120: 	jne	.Ltmp1511 # Offset: 288
    00000122: 	movl	init_value(%rip), %eax
    00000128: 	movq	0x18(%rsp), %r10
    0000012d: 	leaq	0xc2(%rsp), %rsi
    00000135: 	movabsq	$0x5851f42d4c957f2d, %r9
    0000013f: 	movabsq	$0x14057b7ef767814f, %r8
    00000149: 	movabsq	$0x20c49ba5e353f7d, %rdi
    00000153: 	movl	%eax, %edx
    00000155: 	movd	%eax, %xmm0
    00000159: 	movzwl	%ax, %eax
    0000015c: 	shll	$0x10, %edx
    0000015f: 	punpcklwd	%xmm0, %xmm0
    00000163: 	orl	%edx, %eax
    00000165: 	pshufd	$0x0, %xmm0, %xmm0
    0000016a: 	movl	%eax, 0x110(%rsp)
    00000171: 	movdqa	%xmm0, %xmm7
    00000175: 	movaps	%xmm0, 0xc0(%rsp)
    0000017d: 	movaps	%xmm0, 0xd0(%rsp)
    00000185: 	movaps	%xmm0, 0xe0(%rsp)
    0000018d: 	movaps	%xmm0, 0xf0(%rsp)
    00000195: 	movaps	%xmm0, 0x100(%rsp)
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp1512:
    000001a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000001a7: 	movzwl	(%rsi), %r11d
    000001ab: 	addq	$0x2, %rsi
    000001af: 	imulq	%r9, %rax
    000001b3: 	addq	%r8, %rax
    000001b6: 	movq	%rax, %rdx
    000001b9: 	movq	%rax, %rcx
    000001bc: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001c3: 	shlq	$0x17, %rcx
    000001c7: 	shrq	$0x14, %rdx
    000001cb: 	xorq	%rcx, %rdx
    000001ce: 	xorq	%rdx, %rax
    000001d1: 	movq	%rax, %rdx
    000001d4: 	movq	%rax, %rcx
    000001d7: 	shrq	$0x6, %rdx
    000001db: 	movq	%rdx, %rax
    000001de: 	mulq	%rdi
    000001e1: 	movq	%rcx, %rax
    000001e4: 	imulq	$0x1f40, %rdx, %rdx
    000001eb: 	subq	%rdx, %rax
    000001ee: 	leaq	(%r10,%rax,2), %rax
    000001f2: 	movzwl	(%rax), %edx
    000001f5: 	movw	%dx, -0x2(%rsi)
    000001f9: 	movw	%r11w, (%rax)
    000001fd: 	cmpq	%rbp, %rsi
    00000200: 	jne	.Ltmp1512 # Offset: 512
    00000202: 	movq	0x18(%rsp), %rax
    00000207: 	pxor	%xmm1, %xmm1
    0000020b: 	pxor	%xmm6, %xmm6
    0000020f: 	pxor	%xmm5, %xmm5
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1513:
    00000218: 	movdqa	%xmm7, %xmm0
    0000021c: 	movdqa	%xmm6, %xmm2
    00000220: 	movdqa	%xmm5, %xmm4
    00000224: 	addq	$0x10, %rax
    00000228: 	pcmpeqw	-0x10(%rax), %xmm0
    0000022d: 	pand	DATAat0x19260(%rip), %xmm0
    00000235: 	pcmpgtw	%xmm0, %xmm2
    00000239: 	movdqa	%xmm0, %xmm3
    0000023d: 	punpcklwd	%xmm2, %xmm3
    00000241: 	punpckhwd	%xmm2, %xmm0
    00000245: 	pcmpgtd	%xmm3, %xmm4
    00000249: 	movdqa	%xmm3, %xmm2
    0000024d: 	punpckldq	%xmm4, %xmm2
    00000251: 	punpckhdq	%xmm4, %xmm3
    00000255: 	paddq	%xmm2, %xmm1
    00000259: 	movdqa	%xmm5, %xmm2
    0000025d: 	pcmpgtd	%xmm0, %xmm2
    00000261: 	paddq	%xmm3, %xmm1
    00000265: 	movdqa	%xmm0, %xmm3
    00000269: 	punpckldq	%xmm2, %xmm3
    0000026d: 	punpckhdq	%xmm2, %xmm0
    00000271: 	paddq	%xmm3, %xmm1
    00000275: 	paddq	%xmm0, %xmm1
    00000279: 	cmpq	%rax, %rbp
    0000027c: 	jne	.Ltmp1513 # Offset: 636
    0000027e: 	movq	0x60(%rsp), %r13
    00000283: 	movdqa	%xmm1, %xmm0
    00000287: 	movq	0x68(%rsp), %r12
    0000028c: 	leaq	0x90(%rsp), %rax
    00000294: 	movq	%rax, 0x28(%rsp)
    00000299: 	psrldq	$0x8, %xmm0
    0000029e: 	movq	%rax, 0x80(%rsp)
    000002a6: 	movq	%r13, %rax
    000002a9: 	paddq	%xmm0, %xmm1
    000002ad: 	movq	%xmm1, gCount(%rip)
    000002b5: 	addq	%r12, %rax
    000002b8: 	je	.Ltmp1514 # Offset: 696
    000002ba: 	testq	%r13, %r13
    000002bd: 	je	.Ltmp1515 # Offset: 701
.Ltmp1514:
    000002c3: 	movq	%r12, 0x40(%rsp)
    000002c8: 	cmpq	$0xf, %r12
    000002cc: 	ja	.Ltmp1516 # Offset: 716
    000002d2: 	cmpq	$0x1, %r12
    000002d6: 	jne	.Ltmp1517 # Offset: 726
    000002dc: 	movzbl	(%r13), %eax
    000002e1: 	movb	%al, 0x90(%rsp)
    000002e8: 	movq	0x28(%rsp), %rax
.Ltmp1570:
    000002ed: 	movq	%r12, 0x88(%rsp)
    000002f5: 	movb	$0x0, (%rax,%r12)
    000002fa: 	movabsq	$0x3fffffffffffffff, %rax
    00000304: 	subq	0x88(%rsp), %rax
    0000030c: 	cmpq	$0xa, %rax
    00000310: 	jbe	.Ltmp1518 # Offset: 784
    00000316: 	leaq	0x80(%rsp), %rax
    0000031e: 	movl	$0xb, %edx
    00000323: 	leaq	DATAat0x191e0(%rip), %rsi
    0000032a: 	movq	%rax, %rdi
    0000032d: 	movq	%rax, 0x30(%rsp)
    00000332: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 818
    00000337: 	movzwl	init_value(%rip), %ebx
    0000033e: 	xorl	%r15d, %r15d
    00000341: 	leaq	0xb0(%rsp), %r13
    00000349: 	callq	clock@PLT # Offset: 841
    0000034e: 	movl	iterations(%rip), %edx
    00000354: 	movq	%rax, start_time(%rip)
    0000035b: 	testl	%edx, %edx
    0000035d: 	jle	.Ltmp1519 # Offset: 861
    00000363: 	movd	%ebx, %xmm0
    00000367: 	punpcklwd	%xmm0, %xmm0
    0000036b: 	pshufd	$0x0, %xmm0, %xmm7
    00000370: 	movaps	%xmm7, (%rsp)
    00000374: 	nopl	(%rax) # Size: 4
.Ltmp1527:
    00000378: 	movq	0x18(%rsp), %rax
    0000037d: 	pxor	%xmm1, %xmm1
    00000381: 	pxor	%xmm6, %xmm6
    00000385: 	pxor	%xmm5, %xmm5
    00000389: 	nopl	(%rax) # Size: 7
.Ltmp1520:
    00000390: 	movdqa	(%rsp), %xmm0
    00000395: 	movdqa	%xmm6, %xmm2
    00000399: 	movdqa	%xmm5, %xmm4
    0000039d: 	addq	$0x10, %rax
    000003a1: 	pcmpeqw	-0x10(%rax), %xmm0
    000003a6: 	pand	DATAat0x19260(%rip), %xmm0
    000003ae: 	pcmpgtw	%xmm0, %xmm2
    000003b2: 	movdqa	%xmm0, %xmm3
    000003b6: 	punpcklwd	%xmm2, %xmm3
    000003ba: 	punpckhwd	%xmm2, %xmm0
    000003be: 	pcmpgtd	%xmm3, %xmm4
    000003c2: 	movdqa	%xmm3, %xmm2
    000003c6: 	punpckldq	%xmm4, %xmm2
    000003ca: 	punpckhdq	%xmm4, %xmm3
    000003ce: 	paddq	%xmm2, %xmm1
    000003d2: 	movdqa	%xmm5, %xmm2
    000003d6: 	pcmpgtd	%xmm0, %xmm2
    000003da: 	paddq	%xmm3, %xmm1
    000003de: 	movdqa	%xmm0, %xmm3
    000003e2: 	punpckldq	%xmm2, %xmm3
    000003e6: 	punpckhdq	%xmm2, %xmm0
    000003ea: 	paddq	%xmm3, %xmm1
    000003ee: 	paddq	%xmm0, %xmm1
    000003f2: 	cmpq	%rax, %rbp
    000003f5: 	jne	.Ltmp1520 # Offset: 1013
    000003f7: 	movq	0x80(%rsp), %r14
    000003ff: 	movdqa	%xmm1, %xmm0
    00000403: 	movq	0x88(%rsp), %r12
    0000040b: 	movq	%r13, 0xa0(%rsp)
    00000413: 	psrldq	$0x8, %xmm0
    00000418: 	movq	%r14, %rax
    0000041b: 	paddq	%xmm0, %xmm1
    0000041f: 	addq	%r12, %rax
    00000422: 	movq	%xmm1, %rbx
    00000427: 	je	.Ltmp1521 # Offset: 1063
    00000429: 	testq	%r14, %r14
    0000042c: 	je	.Ltmp1522 # Offset: 1068
.Ltmp1521:
    00000432: 	movq	%r12, 0x40(%rsp)
    00000437: 	cmpq	$0xf, %r12
    0000043b: 	ja	.Ltmp1523 # Offset: 1083
    00000441: 	cmpq	$0x1, %r12
    00000445: 	jne	.Ltmp1524 # Offset: 1093
    0000044b: 	movzbl	(%r14), %eax
    0000044f: 	movb	%al, 0xb0(%rsp)
    00000456: 	movq	%r13, %rax
.Ltmp1574:
    00000459: 	movq	%r12, 0xa8(%rsp)
    00000461: 	movb	$0x0, (%rax,%r12)
    00000466: 	cmpq	gCount(%rip), %rbx
    0000046d: 	je	.Ltmp1525 # Offset: 1133
    0000046f: 	movq	0xa0(%rsp), %rdx
    00000477: 	leaq	DATAat0x191d0(%rip), %rsi
    0000047e: 	movl	$0x1, %edi
    00000483: 	xorl	%eax, %eax
    00000485: 	callq	__printf_chk@PLT # Offset: 1157
.Ltmp1525:
    0000048a: 	movq	0xa0(%rsp), %rdi
    00000492: 	cmpq	%r13, %rdi
    00000495: 	je	.Ltmp1526 # Offset: 1173
    0000049b: 	movq	0xb0(%rsp), %rax
    000004a3: 	addl	$0x1, %r15d
    000004a7: 	leaq	0x1(%rax), %rsi
    000004ab: 	callq	_ZdlPvm@PLT # Offset: 1195
    000004b0: 	cmpl	iterations(%rip), %r15d
    000004b7: 	jl	.Ltmp1527 # Offset: 1207
.Ltmp1519:
    000004bd: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000004c4: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000004cb: 	subq	$0x20, %rax
    000004cf: 	cmpq	%rax, %rdi
    000004d2: 	je	.Ltmp1528 # Offset: 1234
    000004d8: 	leaq	0x10(%rdi), %rax
    000004dc: 	movq	0x88(%rsp), %rdx
    000004e4: 	movq	%rax, (%rdi)
    000004e7: 	movq	0x80(%rsp), %rsi
    000004ef: 	addq	%rsi, %rdx
    000004f2: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1266
    000004f7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000004fe: 	addq	$0x20, %rax
    00000502: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1584:
    00000509: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000510: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000517: 	je	.Ltmp1529 # Offset: 1303
.Ltmp1583:
    0000051d: 	movq	-0x20(%rax), %r12
    00000521: 	callq	clock@PLT # Offset: 1313
    00000526: 	pxor	%xmm0, %xmm0
    0000052a: 	movq	%rax, end_time(%rip)
    00000531: 	movq	%r12, %rdi
    00000534: 	subq	start_time(%rip), %rax
    0000053b: 	cvtsi2sd	%rax, %xmm0
    00000540: 	divsd	DATAat0x19290(%rip), %xmm0
    00000548: 	callq	_Z13record_resultdPKc # Offset: 1352
    0000054d: 	movq	0x80(%rsp), %rdi
    00000555: 	cmpq	0x28(%rsp), %rdi
    0000055a: 	je	.Ltmp1530 # Offset: 1370
    0000055c: 	movq	0x90(%rsp), %rax
    00000564: 	leaq	0x1(%rax), %rsi
    00000568: 	callq	_ZdlPvm@PLT # Offset: 1384
.Ltmp1530:
    0000056d: 	movq	0x28(%rsp), %rax
    00000572: 	movq	0x60(%rsp), %r13
    00000577: 	movq	0x68(%rsp), %r12
    0000057c: 	movq	%rax, 0x80(%rsp)
    00000584: 	movq	%r13, %rax
    00000587: 	addq	%r12, %rax
    0000058a: 	je	.Ltmp1531 # Offset: 1418
    0000058c: 	testq	%r13, %r13
    0000058f: 	je	.Ltmp1532 # Offset: 1423
.Ltmp1531:
    00000595: 	movq	%r12, 0x40(%rsp)
    0000059a: 	cmpq	$0xf, %r12
    0000059e: 	ja	.Ltmp1533 # Offset: 1438
    000005a4: 	cmpq	$0x1, %r12
    000005a8: 	jne	.Ltmp1534 # Offset: 1448
    000005ae: 	movzbl	(%r13), %eax
    000005b3: 	movb	%al, 0x90(%rsp)
    000005ba: 	movq	0x28(%rsp), %rax
.Ltmp1580:
    000005bf: 	movq	%r12, 0x88(%rsp)
    000005c7: 	movb	$0x0, (%rax,%r12)
    000005cc: 	movabsq	$0x3fffffffffffffff, %rax
    000005d6: 	subq	0x88(%rsp), %rax
    000005de: 	cmpq	$0xd, %rax
    000005e2: 	jbe	.Ltmp1535 # Offset: 1506
    000005e8: 	movq	0x30(%rsp), %rdi
    000005ed: 	movl	$0xe, %edx
    000005f2: 	leaq	DATAat0x191ec(%rip), %rsi
    000005f9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1529
    000005fe: 	callq	clock@PLT # Offset: 1534
    00000603: 	xorl	%ebx, %ebx
    00000605: 	leaq	0xb0(%rsp), %r13
    0000060d: 	movq	%rax, start_time(%rip)
    00000614: 	movl	iterations(%rip), %eax
    0000061a: 	testl	%eax, %eax
    0000061c: 	jle	.Ltmp1536 # Offset: 1564
    00000622: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1544:
    00000628: 	movd	init_value(%rip), %xmm6
    00000630: 	movq	0x18(%rsp), %rax
    00000635: 	pxor	%xmm1, %xmm1
    00000639: 	pxor	%xmm7, %xmm7
    0000063d: 	punpcklwd	%xmm6, %xmm6
    00000641: 	pxor	%xmm5, %xmm5
    00000645: 	pshufd	$0x0, %xmm6, %xmm6
    0000064a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1537:
    00000650: 	movdqa	%xmm6, %xmm0
    00000654: 	movdqa	%xmm7, %xmm2
    00000658: 	movdqa	%xmm5, %xmm4
    0000065c: 	addq	$0x10, %rax
    00000660: 	pcmpeqw	-0x10(%rax), %xmm0
    00000665: 	pand	DATAat0x19260(%rip), %xmm0
    0000066d: 	pcmpgtw	%xmm0, %xmm2
    00000671: 	movdqa	%xmm0, %xmm3
    00000675: 	punpcklwd	%xmm2, %xmm3
    00000679: 	punpckhwd	%xmm2, %xmm0
    0000067d: 	pcmpgtd	%xmm3, %xmm4
    00000681: 	movdqa	%xmm3, %xmm2
    00000685: 	punpckldq	%xmm4, %xmm2
    00000689: 	punpckhdq	%xmm4, %xmm3
    0000068d: 	paddq	%xmm2, %xmm1
    00000691: 	movdqa	%xmm5, %xmm2
    00000695: 	pcmpgtd	%xmm0, %xmm2
    00000699: 	paddq	%xmm3, %xmm1
    0000069d: 	movdqa	%xmm0, %xmm3
    000006a1: 	punpckldq	%xmm2, %xmm3
    000006a5: 	punpckhdq	%xmm2, %xmm0
    000006a9: 	paddq	%xmm3, %xmm1
    000006ad: 	paddq	%xmm0, %xmm1
    000006b1: 	cmpq	%rax, %rbp
    000006b4: 	jne	.Ltmp1537 # Offset: 1716
    000006b6: 	movq	0x80(%rsp), %r14
    000006be: 	movdqa	%xmm1, %xmm0
    000006c2: 	movq	0x88(%rsp), %r12
    000006ca: 	movq	%r13, 0xa0(%rsp)
    000006d2: 	psrldq	$0x8, %xmm0
    000006d7: 	movq	%r14, %rax
    000006da: 	paddq	%xmm0, %xmm1
    000006de: 	addq	%r12, %rax
    000006e1: 	movq	%xmm1, %r15
    000006e6: 	je	.Ltmp1538 # Offset: 1766
    000006e8: 	testq	%r14, %r14
    000006eb: 	je	.Ltmp1539 # Offset: 1771
.Ltmp1538:
    000006f1: 	movq	%r12, 0x40(%rsp)
    000006f6: 	cmpq	$0xf, %r12
    000006fa: 	ja	.Ltmp1540 # Offset: 1786
    00000700: 	cmpq	$0x1, %r12
    00000704: 	jne	.Ltmp1541 # Offset: 1796
    0000070a: 	movzbl	(%r14), %eax
    0000070e: 	movb	%al, 0xb0(%rsp)
    00000715: 	movq	%r13, %rax
.Ltmp1572:
    00000718: 	movq	%r12, 0xa8(%rsp)
    00000720: 	movb	$0x0, (%rax,%r12)
    00000725: 	cmpq	gCount(%rip), %r15
    0000072c: 	je	.Ltmp1542 # Offset: 1836
    0000072e: 	movq	0xa0(%rsp), %rdx
    00000736: 	leaq	DATAat0x191d0(%rip), %rsi
    0000073d: 	movl	$0x1, %edi
    00000742: 	xorl	%eax, %eax
    00000744: 	callq	__printf_chk@PLT # Offset: 1860
.Ltmp1542:
    00000749: 	movq	0xa0(%rsp), %rdi
    00000751: 	cmpq	%r13, %rdi
    00000754: 	je	.Ltmp1543 # Offset: 1876
    0000075a: 	movq	0xb0(%rsp), %rax
    00000762: 	addl	$0x1, %ebx
    00000765: 	leaq	0x1(%rax), %rsi
    00000769: 	callq	_ZdlPvm@PLT # Offset: 1897
    0000076e: 	cmpl	iterations(%rip), %ebx
    00000774: 	jl	.Ltmp1544 # Offset: 1908
.Ltmp1536:
    0000077a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000781: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000788: 	subq	$0x20, %rax
    0000078c: 	cmpq	%rax, %rdi
    0000078f: 	je	.Ltmp1545 # Offset: 1935
    00000795: 	leaq	0x10(%rdi), %rax
    00000799: 	movq	0x88(%rsp), %rdx
    000007a1: 	movq	%rax, (%rdi)
    000007a4: 	movq	0x80(%rsp), %rsi
    000007ac: 	addq	%rsi, %rdx
    000007af: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1967
    000007b4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000007bb: 	addq	$0x20, %rax
    000007bf: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1582:
    000007c6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000007cd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000007d4: 	je	.Ltmp1546 # Offset: 2004
.Ltmp1581:
    000007da: 	movq	-0x20(%rax), %rbp
    000007de: 	callq	clock@PLT # Offset: 2014
    000007e3: 	pxor	%xmm0, %xmm0
    000007e7: 	movq	%rax, end_time(%rip)
    000007ee: 	movq	%rbp, %rdi
    000007f1: 	subq	start_time(%rip), %rax
    000007f8: 	cvtsi2sd	%rax, %xmm0
    000007fd: 	divsd	DATAat0x19290(%rip), %xmm0
    00000805: 	callq	_Z13record_resultdPKc # Offset: 2053
    0000080a: 	movq	0x80(%rsp), %rdi
    00000812: 	cmpq	0x28(%rsp), %rdi
    00000817: 	je	.Ltmp1547 # Offset: 2071
    00000819: 	movq	0x90(%rsp), %rax
    00000821: 	leaq	0x1(%rax), %rsi
    00000825: 	callq	_ZdlPvm@PLT # Offset: 2085
.Ltmp1547:
    0000082a: 	movq	0x60(%rsp), %rbp
    0000082f: 	movq	0x68(%rsp), %r12
    00000834: 	leaq	0xb0(%rsp), %r13
    0000083c: 	movq	%r13, 0xa0(%rsp)
    00000844: 	movq	%rbp, %rax
    00000847: 	addq	%r12, %rax
    0000084a: 	je	.Ltmp1548 # Offset: 2122
    0000084c: 	testq	%rbp, %rbp
    0000084f: 	je	.Ltmp1549 # Offset: 2127
.Ltmp1548:
    00000855: 	movq	%r12, 0x40(%rsp)
    0000085a: 	cmpq	$0xf, %r12
    0000085e: 	ja	.Ltmp1550 # Offset: 2142
    00000864: 	cmpq	$0x1, %r12
    00000868: 	jne	.Ltmp1551 # Offset: 2152
    0000086e: 	movzbl	(%rbp), %eax
    00000872: 	movb	%al, 0xb0(%rsp)
    00000879: 	movq	%r13, %rax
.Ltmp1576:
    0000087c: 	movq	%r12, 0xa8(%rsp)
    00000884: 	movb	$0x0, (%rax,%r12)
    00000889: 	movabsq	$0x3fffffffffffffff, %rax
    00000893: 	subq	0xa8(%rsp), %rax
    0000089b: 	cmpq	$0x6, %rax
    0000089f: 	jbe	.Ltmp1552 # Offset: 2207
    000008a5: 	leaq	0xa0(%rsp), %rbp
    000008ad: 	movl	$0x7, %edx
    000008b2: 	leaq	DATAat0x191fb(%rip), %rsi
    000008b9: 	movq	%rbp, %rdi
    000008bc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2236
    000008c1: 	movswl	init_value(%rip), %edx
    000008c8: 	movq	0x18(%rsp), %rdi
    000008cd: 	movq	%rbp, %r8
    000008d0: 	leaq	_Z6count1IsEmPT_iS0_(%rip), %rcx
    000008d7: 	movl	$0x1f40, %esi
    000008dc: 	callq	_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2268
    000008e1: 	movq	0xa0(%rsp), %rdi
    000008e9: 	cmpq	%r13, %rdi
    000008ec: 	je	.Ltmp1553 # Offset: 2284
    000008ee: 	movq	0xb0(%rsp), %rax
    000008f6: 	leaq	0x1(%rax), %rsi
    000008fa: 	callq	_ZdlPvm@PLT # Offset: 2298
.Ltmp1553:
    000008ff: 	leaq	0x60(%rsp), %r12
    00000904: 	leaq	DATAat0x19203(%rip), %rdx
    0000090b: 	movq	%rbp, %rdi
    0000090e: 	movq	%r12, %rsi
    00000911: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2321
    00000916: 	movswl	init_value(%rip), %edx
    0000091d: 	movq	0x18(%rsp), %rdi
    00000922: 	movq	%rbp, %r8
    00000925: 	leaq	_Z6count2IsEmPT_iS0_(%rip), %rcx
    0000092c: 	movl	$0x1f40, %esi
    00000931: 	callq	_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2353
    00000936: 	movq	0xa0(%rsp), %rdi
    0000093e: 	cmpq	%r13, %rdi
    00000941: 	je	.Ltmp1554 # Offset: 2369
    00000943: 	movq	0xb0(%rsp), %rax
    0000094b: 	leaq	0x1(%rax), %rsi
    0000094f: 	callq	_ZdlPvm@PLT # Offset: 2383
.Ltmp1554:
    00000954: 	leaq	DATAat0x1920b(%rip), %rdx
    0000095b: 	movq	%r12, %rsi
    0000095e: 	movq	%rbp, %rdi
    00000961: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2401
    00000966: 	movswl	init_value(%rip), %edx
    0000096d: 	movq	0x18(%rsp), %rdi
    00000972: 	movq	%rbp, %r8
    00000975: 	leaq	_Z6count3IsEmPT_iS0_(%rip), %rcx
    0000097c: 	movl	$0x1f40, %esi
    00000981: 	callq	_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2433
    00000986: 	movq	0xa0(%rsp), %rdi
    0000098e: 	cmpq	%r13, %rdi
    00000991: 	je	.Ltmp1555 # Offset: 2449
    00000993: 	movq	0xb0(%rsp), %rax
    0000099b: 	leaq	0x1(%rax), %rsi
    0000099f: 	callq	_ZdlPvm@PLT # Offset: 2463
.Ltmp1555:
    000009a4: 	leaq	DATAat0x19213(%rip), %rdx
    000009ab: 	movq	%r12, %rsi
    000009ae: 	movq	%rbp, %rdi
    000009b1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2481
    000009b6: 	movswl	init_value(%rip), %edx
    000009bd: 	movq	0x18(%rsp), %rdi
    000009c2: 	movq	%rbp, %r8
    000009c5: 	leaq	_Z6count4IsEmPT_iS0_(%rip), %rcx
    000009cc: 	movl	$0x1f40, %esi
    000009d1: 	callq	_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2513
    000009d6: 	movq	0xa0(%rsp), %rdi
    000009de: 	cmpq	%r13, %rdi
    000009e1: 	je	.Ltmp1556 # Offset: 2529
    000009e3: 	movq	0xb0(%rsp), %rax
    000009eb: 	leaq	0x1(%rax), %rsi
    000009ef: 	callq	_ZdlPvm@PLT # Offset: 2543
.Ltmp1556:
    000009f4: 	leaq	DATAat0x1921b(%rip), %rdx
    000009fb: 	movq	%r12, %rsi
    000009fe: 	movq	%rbp, %rdi
    00000a01: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2561
    00000a06: 	movswl	init_value(%rip), %edx
    00000a0d: 	movq	0x18(%rsp), %rdi
    00000a12: 	movq	%rbp, %r8
    00000a15: 	leaq	_Z6count5IsEmPT_iS0_(%rip), %rcx
    00000a1c: 	movl	$0x1f40, %esi
    00000a21: 	callq	_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2593
    00000a26: 	movq	0xa0(%rsp), %rdi
    00000a2e: 	cmpq	%r13, %rdi
    00000a31: 	je	.Ltmp1557 # Offset: 2609
    00000a33: 	movq	0xb0(%rsp), %rax
    00000a3b: 	leaq	0x1(%rax), %rsi
    00000a3f: 	callq	_ZdlPvm@PLT # Offset: 2623
.Ltmp1557:
    00000a44: 	leaq	DATAat0x19223(%rip), %rdx
    00000a4b: 	movq	%r12, %rsi
    00000a4e: 	movq	%rbp, %rdi
    00000a51: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2641
    00000a56: 	movswl	init_value(%rip), %edx
    00000a5d: 	movq	0x18(%rsp), %rdi
    00000a62: 	movq	%rbp, %r8
    00000a65: 	leaq	_Z6count6IsEmPT_iS0_(%rip), %rcx
    00000a6c: 	movl	$0x1f40, %esi
    00000a71: 	callq	_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2673
    00000a76: 	movq	0xa0(%rsp), %rdi
    00000a7e: 	cmpq	%r13, %rdi
    00000a81: 	je	.Ltmp1558 # Offset: 2689
    00000a83: 	movq	0xb0(%rsp), %rax
    00000a8b: 	leaq	0x1(%rax), %rsi
    00000a8f: 	callq	_ZdlPvm@PLT # Offset: 2703
.Ltmp1558:
    00000a94: 	leaq	DATAat0x1922b(%rip), %rdx
    00000a9b: 	movq	%r12, %rsi
    00000a9e: 	movq	%rbp, %rdi
    00000aa1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2721
    00000aa6: 	movswl	init_value(%rip), %edx
    00000aad: 	movq	0x18(%rsp), %rdi
    00000ab2: 	movq	%rbp, %r8
    00000ab5: 	leaq	_Z6count7IsEmPT_iS0_(%rip), %rcx
    00000abc: 	movl	$0x1f40, %esi
    00000ac1: 	callq	_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2753
    00000ac6: 	movq	0xa0(%rsp), %rdi
    00000ace: 	cmpq	%r13, %rdi
    00000ad1: 	je	.Ltmp1559 # Offset: 2769
    00000ad3: 	movq	0xb0(%rsp), %rax
    00000adb: 	leaq	0x1(%rax), %rsi
    00000adf: 	callq	_ZdlPvm@PLT # Offset: 2783
.Ltmp1559:
    00000ae4: 	movq	0x60(%rsp), %r15
    00000ae9: 	movq	0x68(%rsp), %r14
    00000aee: 	movq	%r13, 0xa0(%rsp)
    00000af6: 	movq	%r15, %rax
    00000af9: 	addq	%r14, %rax
    00000afc: 	je	.Ltmp1560 # Offset: 2812
    00000afe: 	testq	%r15, %r15
    00000b01: 	je	.Ltmp1561 # Offset: 2817
.Ltmp1560:
    00000b07: 	movq	%r14, 0x40(%rsp)
    00000b0c: 	cmpq	$0xf, %r14
    00000b10: 	ja	.Ltmp1562 # Offset: 2832
    00000b16: 	cmpq	$0x1, %r14
    00000b1a: 	jne	.Ltmp1563 # Offset: 2842
    00000b20: 	movzbl	(%r15), %eax
    00000b24: 	movb	%al, 0xb0(%rsp)
    00000b2b: 	movq	%r13, %rax
.Ltmp1578:
    00000b2e: 	movq	%r14, 0xa8(%rsp)
    00000b36: 	movb	$0x0, (%rax,%r14)
    00000b3b: 	movabsq	$0x3fffffffffffffff, %rax
    00000b45: 	subq	0xa8(%rsp), %rax
    00000b4d: 	cmpq	$0x6, %rax
    00000b51: 	jbe	.Ltmp1564 # Offset: 2897
    00000b57: 	movl	$0x7, %edx
    00000b5c: 	leaq	DATAat0x19233(%rip), %rsi
    00000b63: 	movq	%rbp, %rdi
    00000b66: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2918
    00000b6b: 	movswl	init_value(%rip), %edx
    00000b72: 	movq	0x18(%rsp), %rdi
    00000b77: 	movq	%rbp, %r8
    00000b7a: 	leaq	_Z6count8IsEmPT_iS0_(%rip), %rcx
    00000b81: 	movl	$0x1f40, %esi
    00000b86: 	callq	_Z10test_countIsPFmPsisEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2950
    00000b8b: 	movq	0xa0(%rsp), %rdi
    00000b93: 	cmpq	%r13, %rdi
    00000b96: 	je	.Ltmp1565 # Offset: 2966
    00000b98: 	movq	0xb0(%rsp), %rax
    00000ba0: 	leaq	0x1(%rax), %rsi
    00000ba4: 	callq	_ZdlPvm@PLT # Offset: 2980
.Ltmp1565:
    00000ba9: 	leaq	DATAat0x1923b(%rip), %rdx
    00000bb0: 	movq	%r12, %rsi
    00000bb3: 	movq	%rbp, %rdi
    00000bb6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2998
    00000bbb: 	movl	iterations(%rip), %edx
    00000bc1: 	xorl	%r8d, %r8d
    00000bc4: 	xorl	%ecx, %ecx
    00000bc6: 	movl	$0x1f40, %esi
    00000bcb: 	movq	0xa0(%rsp), %rdi
    00000bd3: 	callq	_Z9summarizePKciiii # Offset: 3027
    00000bd8: 	movq	0xa0(%rsp), %rdi
    00000be0: 	cmpq	%r13, %rdi
    00000be3: 	je	.Ltmp1566 # Offset: 3043
    00000be5: 	movq	0xb0(%rsp), %rax
    00000bed: 	leaq	0x1(%rax), %rsi
    00000bf1: 	callq	_ZdlPvm@PLT # Offset: 3057
.Ltmp1566:
    00000bf6: 	movq	0x60(%rsp), %rdi
    00000bfb: 	cmpq	0x38(%rsp), %rdi
    00000c00: 	je	.Ltmp1567 # Offset: 3072
    00000c02: 	movq	0x70(%rsp), %rax
    00000c07: 	leaq	0x1(%rax), %rsi
    00000c0b: 	callq	_ZdlPvm@PLT # Offset: 3083
.Ltmp1567:
    00000c10: 	movq	0x3f48(%rsp), %rax
    00000c18: 	subq	%fs:0x28, %rax
    00000c21: 	jne	.Ltmp1568 # Offset: 3105
    00000c27: 	addq	$0x3f58, %rsp
    00000c2e: 	popq	%rbx
    00000c2f: 	popq	%rbp
    00000c30: 	popq	%r12
    00000c32: 	popq	%r13
    00000c34: 	popq	%r14
    00000c36: 	popq	%r15
    00000c38: 	retq # Offset: 3128
.Ltmp1517:
    00000c39: 	testq	%r12, %r12
    00000c3c: 	jne	.Ltmp1569 # Offset: 3132
    00000c42: 	movq	0x28(%rsp), %rax
    00000c47: 	jmp	.Ltmp1570 # Offset: 3143
    00000c4c: 	nopl	(%rax) # Size: 4
.Ltmp1526:
    00000c50: 	addl	$0x1, %r15d
    00000c54: 	cmpl	iterations(%rip), %r15d
    00000c5b: 	jl	.Ltmp1527 # Offset: 3163
    00000c61: 	jmp	.Ltmp1519 # Offset: 3169
    00000c66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1543:
    00000c70: 	addl	$0x1, %ebx
    00000c73: 	cmpl	iterations(%rip), %ebx
    00000c79: 	jl	.Ltmp1544 # Offset: 3193
    00000c7f: 	jmp	.Ltmp1536 # Offset: 3199
    00000c84: 	nopl	(%rax) # Size: 4
.Ltmp1541:
    00000c88: 	testq	%r12, %r12
    00000c8b: 	jne	.Ltmp1571 # Offset: 3211
    00000c91: 	movq	%r13, %rax
    00000c94: 	jmp	.Ltmp1572 # Offset: 3220
    00000c99: 	nopl	(%rax) # Size: 7
.Ltmp1524:
    00000ca0: 	testq	%r12, %r12
    00000ca3: 	jne	.Ltmp1573 # Offset: 3235
    00000ca9: 	movq	%r13, %rax
    00000cac: 	jmp	.Ltmp1574 # Offset: 3244
    00000cb1: 	nopl	(%rax) # Size: 7
.Ltmp1523:
    00000cb8: 	movq	0x20(%rsp), %rsi
    00000cbd: 	leaq	0xa0(%rsp), %rdi
    00000cc5: 	xorl	%edx, %edx
    00000cc7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3271
    00000ccc: 	movq	%rax, 0xa0(%rsp)
    00000cd4: 	movq	%rax, %rdi
    00000cd7: 	movq	0x40(%rsp), %rax
    00000cdc: 	movq	%rax, 0xb0(%rsp)
.Ltmp1587:
    00000ce4: 	movq	%r12, %rdx
    00000ce7: 	movq	%r14, %rsi
    00000cea: 	callq	memcpy@PLT # Offset: 3306
    00000cef: 	movq	0x40(%rsp), %r12
    00000cf4: 	movq	0xa0(%rsp), %rax
    00000cfc: 	jmp	.Ltmp1574 # Offset: 3324
    00000d01: 	nopl	(%rax) # Size: 7
.Ltmp1540:
    00000d08: 	movq	0x20(%rsp), %rsi
    00000d0d: 	leaq	0xa0(%rsp), %rdi
    00000d15: 	xorl	%edx, %edx
    00000d17: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3351
    00000d1c: 	movq	%rax, 0xa0(%rsp)
    00000d24: 	movq	%rax, %rdi
    00000d27: 	movq	0x40(%rsp), %rax
    00000d2c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1586:
    00000d34: 	movq	%r12, %rdx
    00000d37: 	movq	%r14, %rsi
    00000d3a: 	callq	memcpy@PLT # Offset: 3386
    00000d3f: 	movq	0x40(%rsp), %r12
    00000d44: 	movq	0xa0(%rsp), %rax
    00000d4c: 	jmp	.Ltmp1572 # Offset: 3404
.Ltmp1551:
    00000d51: 	testq	%r12, %r12
    00000d54: 	jne	.Ltmp1575 # Offset: 3412
    00000d5a: 	movq	%r13, %rax
    00000d5d: 	jmp	.Ltmp1576 # Offset: 3421
.Ltmp1563:
    00000d62: 	testq	%r14, %r14
    00000d65: 	jne	.Ltmp1577 # Offset: 3429
    00000d6b: 	movq	%r13, %rax
    00000d6e: 	jmp	.Ltmp1578 # Offset: 3438
.Ltmp1534:
    00000d73: 	testq	%r12, %r12
    00000d76: 	jne	.Ltmp1579 # Offset: 3446
    00000d7c: 	movq	0x28(%rsp), %rax
    00000d81: 	jmp	.Ltmp1580 # Offset: 3457
.Ltmp1533:
    00000d86: 	movq	0x20(%rsp), %rsi
    00000d8b: 	movq	0x30(%rsp), %rdi
    00000d90: 	xorl	%edx, %edx
    00000d92: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3474
    00000d97: 	movq	%rax, 0x80(%rsp)
    00000d9f: 	movq	%rax, %rdi
    00000da2: 	movq	0x40(%rsp), %rax
    00000da7: 	movq	%rax, 0x90(%rsp)
.Ltmp1590:
    00000daf: 	movq	%r12, %rdx
    00000db2: 	movq	%r13, %rsi
    00000db5: 	callq	memcpy@PLT # Offset: 3509
    00000dba: 	movq	0x40(%rsp), %r12
    00000dbf: 	movq	0x80(%rsp), %rax
    00000dc7: 	jmp	.Ltmp1580 # Offset: 3527
.Ltmp1550:
    00000dcc: 	movq	0x20(%rsp), %rsi
    00000dd1: 	leaq	0xa0(%rsp), %rdi
    00000dd9: 	xorl	%edx, %edx
    00000ddb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3547
    00000de0: 	movq	%rax, 0xa0(%rsp)
    00000de8: 	movq	%rax, %rdi
    00000deb: 	movq	0x40(%rsp), %rax
    00000df0: 	movq	%rax, 0xb0(%rsp)
.Ltmp1588:
    00000df8: 	movq	%r12, %rdx
    00000dfb: 	movq	%rbp, %rsi
    00000dfe: 	callq	memcpy@PLT # Offset: 3582
    00000e03: 	movq	0x40(%rsp), %r12
    00000e08: 	movq	0xa0(%rsp), %rax
    00000e10: 	jmp	.Ltmp1576 # Offset: 3600
.Ltmp1562:
    00000e15: 	movq	0x20(%rsp), %rsi
    00000e1a: 	xorl	%edx, %edx
    00000e1c: 	movq	%rbp, %rdi
    00000e1f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3615
    00000e24: 	movq	%rax, 0xa0(%rsp)
    00000e2c: 	movq	%rax, %rdi
    00000e2f: 	movq	0x40(%rsp), %rax
    00000e34: 	movq	%rax, 0xb0(%rsp)
.Ltmp1589:
    00000e3c: 	movq	%r14, %rdx
    00000e3f: 	movq	%r15, %rsi
    00000e42: 	callq	memcpy@PLT # Offset: 3650
    00000e47: 	movq	0x40(%rsp), %r14
    00000e4c: 	movq	0xa0(%rsp), %rax
    00000e54: 	jmp	.Ltmp1578 # Offset: 3668
.Ltmp1516:
    00000e59: 	movq	0x20(%rsp), %rsi
    00000e5e: 	leaq	0x80(%rsp), %rdi
    00000e66: 	xorl	%edx, %edx
    00000e68: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3688
    00000e6d: 	movq	%rax, 0x80(%rsp)
    00000e75: 	movq	%rax, %rdi
    00000e78: 	movq	0x40(%rsp), %rax
    00000e7d: 	movq	%rax, 0x90(%rsp)
.Ltmp1585:
    00000e85: 	movq	%r12, %rdx
    00000e88: 	movq	%r13, %rsi
    00000e8b: 	callq	memcpy@PLT # Offset: 3723
    00000e90: 	movq	0x40(%rsp), %r12
    00000e95: 	movq	0x80(%rsp), %rax
    00000e9d: 	jmp	.Ltmp1570 # Offset: 3741
.Ltmp1546:
    00000ea2: 	movq	-0x8(%rdx), %rax
    00000ea6: 	addq	$0x200, %rax
    00000eac: 	jmp	.Ltmp1581 # Offset: 3756
.Ltmp1545:
    00000eb1: 	movq	0x30(%rsp), %rsi
    00000eb6: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000ebd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3773
    00000ec2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000ec9: 	jmp	.Ltmp1582 # Offset: 3785
.Ltmp1529:
    00000ece: 	movq	-0x8(%rdx), %rax
    00000ed2: 	addq	$0x200, %rax
    00000ed8: 	jmp	.Ltmp1583 # Offset: 3800
.Ltmp1528:
    00000edd: 	movq	0x30(%rsp), %rsi
    00000ee2: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000ee9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3817
    00000eee: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000ef5: 	jmp	.Ltmp1584 # Offset: 3829
.Ltmp1518:
    00000efa: 	leaq	DATAat0x19184(%rip), %rdi
    00000f01: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3841
.Ltmp1522:
    00000f06: 	leaq	DATAat0x19008(%rip), %rdi
    00000f0d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3853
.Ltmp1532:
    00000f12: 	leaq	DATAat0x19008(%rip), %rdi
    00000f19: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3865
.Ltmp1535:
    00000f1e: 	leaq	DATAat0x19184(%rip), %rdi
    00000f25: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3877
.Ltmp1539:
    00000f2a: 	leaq	DATAat0x19008(%rip), %rdi
    00000f31: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3889
.Ltmp1549:
    00000f36: 	leaq	DATAat0x19008(%rip), %rdi
    00000f3d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3901
.Ltmp1552:
    00000f42: 	leaq	DATAat0x19184(%rip), %rdi
    00000f49: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3913
.Ltmp1561:
    00000f4e: 	leaq	DATAat0x19008(%rip), %rdi
    00000f55: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3925
.Ltmp1564:
    00000f5a: 	leaq	DATAat0x19184(%rip), %rdi
    00000f61: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3937
.Ltmp1568:
    00000f66: 	callq	__stack_chk_fail@PLT # Offset: 3942
.Ltmp1569:
    00000f6b: 	movq	0x28(%rsp), %rdi
    00000f70: 	jmp	.Ltmp1585 # Offset: 3952
.Ltmp1571:
    00000f75: 	movq	%r13, %rdi
    00000f78: 	jmp	.Ltmp1586 # Offset: 3960
.Ltmp1573:
    00000f7d: 	movq	%r13, %rdi
    00000f80: 	jmp	.Ltmp1587 # Offset: 3968
.Ltmp1575:
    00000f85: 	movq	%r13, %rdi
    00000f88: 	jmp	.Ltmp1588 # Offset: 3976
.Ltmp1577:
    00000f8d: 	movq	%r13, %rdi
    00000f90: 	jmp	.Ltmp1589 # Offset: 3984
.Ltmp1579:
    00000f95: 	movq	0x28(%rsp), %rdi
    00000f9a: 	jmp	.Ltmp1590 # Offset: 3994
.Ltmp1515:
    00000f9f: 	leaq	DATAat0x19008(%rip), %rdi
    00000fa6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4006
    00000fab: 	endbr64
.Ltmp1592:
    00000faf: 	movq	%rax, %rbp
    00000fb2: 	jmp	.Ltmp1591 # Offset: 4018
    00000fb7: 	endbr64
    00000fbb: 	jmp	.Ltmp1592 # Offset: 4027
    00000fbd: 	endbr64
    00000fc1: 	jmp	.Ltmp1592 # Offset: 4033
    00000fc3: 	endbr64
    00000fc7: 	movq	%rax, %rbp
    00000fca: 	jmp	.Ltmp1593 # Offset: 4042
    00000fcc: 	endbr64
    00000fd0: 	jmp	.Ltmp1592 # Offset: 4048
.Ltmp1596:
    00000fd2: 	movq	0xa0(%rsp), %rdi
    00000fda: 	cmpq	%r13, %rdi
    00000fdd: 	je	.Ltmp1594 # Offset: 4061
    00000fdf: 	movq	0xb0(%rsp), %rax
    00000fe7: 	leaq	0x1(%rax), %rsi
    00000feb: 	callq	_ZdlPvm@PLT # Offset: 4075
.Ltmp1594:
    00000ff0: 	movq	0x80(%rsp), %rdi
    00000ff8: 	cmpq	0x28(%rsp), %rdi
    00000ffd: 	je	.Ltmp1593 # Offset: 4093
    00000fff: 	movq	0x90(%rsp), %rax
    00001007: 	leaq	0x1(%rax), %rsi
    0000100b: 	callq	_ZdlPvm@PLT # Offset: 4107
.Ltmp1593:
    00001010: 	movq	0x60(%rsp), %rdi
    00001015: 	cmpq	0x38(%rsp), %rdi
    0000101a: 	je	.Ltmp1595 # Offset: 4122
    0000101c: 	movq	0x70(%rsp), %rax
    00001021: 	leaq	0x1(%rax), %rsi
    00001025: 	callq	_ZdlPvm@PLT # Offset: 4133
.Ltmp1595:
    0000102a: 	movq	%rbp, %rdi
    0000102d: 	callq	_Unwind_Resume@PLT # Offset: 4141
    00001032: 	endbr64
.Ltmp1598:
    00001036: 	movq	%rax, %rbp
    00001039: 	jmp	.Ltmp1596 # Offset: 4153
    0000103b: 	endbr64
.Ltmp1597:
    0000103f: 	movq	%rax, %rbp
    00001042: 	jmp	.Ltmp1594 # Offset: 4162
    00001044: 	endbr64
    00001048: 	jmp	.Ltmp1597 # Offset: 4168
    0000104a: 	endbr64
    0000104e: 	jmp	.Ltmp1597 # Offset: 4174
    00001050: 	endbr64
    00001054: 	jmp	.Ltmp1598 # Offset: 4180
    00001056: 	endbr64
    0000105a: 	jmp	.Ltmp1597 # Offset: 4186
    0000105c: 	endbr64
    00001060: 	jmp	.Ltmp1592 # Offset: 4192
    00001065: 	endbr64
    00001069: 	jmp	.Ltmp1592 # Offset: 4201
    0000106e: 	endbr64
    00001072: 	jmp	.Ltmp1592 # Offset: 4210
    00001077: 	endbr64
    0000107b: 	jmp	.Ltmp1592 # Offset: 4219
    00001080: 	endbr64
    00001084: 	jmp	.Ltmp1592 # Offset: 4228
    00001089: 	endbr64
    0000108d: 	jmp	.Ltmp1592 # Offset: 4237
    00001092: 	endbr64
    00001096: 	jmp	.Ltmp1592 # Offset: 4246
.Ltmp1591:
    0000109b: 	movq	0xa0(%rsp), %rdi
    000010a3: 	cmpq	%r13, %rdi
    000010a6: 	je	.Ltmp1593 # Offset: 4262
    000010ac: 	movq	0xb0(%rsp), %rax
    000010b4: 	leaq	0x1(%rax), %rsi
    000010b8: 	callq	_ZdlPvm@PLT # Offset: 4280
    000010bd: 	jmp	.Ltmp1593 # Offset: 4285
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIsEvv"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0x12ff0
  Size        : 0x1068
  MaxSize     : 0x1070
  Offset      : 0x12ff0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp1599:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1599 # Offset: 37
    00000027: 	subq	$0xdd8, %rsp
    0000002e: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    00000036: 	movl	$0x5f32, %ecx
    0000003b: 	movq	%fs:0x28, %rax
    00000044: 	movq	%rax, 0x7dc8(%rsp)
    0000004c: 	xorl	%eax, %eax
    0000004e: 	movaps	%xmm7, 0x40(%rsp)
    00000053: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    0000005b: 	leaq	0x70(%rsp), %rax
    00000060: 	leaq	0x40(%rsp), %rdi
    00000065: 	movq	%rax, 0x38(%rsp)
    0000006a: 	leaq	0x7dc0(%rsp), %rbp
    00000072: 	movq	%rax, 0x60(%rsp)
    00000077: 	movw	%cx, 0x74(%rsp)
    0000007c: 	movq	%rdi, 0x20(%rsp)
    00000081: 	movaps	%xmm7, 0x50(%rsp)
    00000086: 	movl	$0x33746e69, 0x70(%rsp)
    0000008e: 	movb	$0x74, 0x76(%rsp)
    00000093: 	movq	$0x7, 0x68(%rsp)
    0000009c: 	movb	$0x0, 0x77(%rsp)
    000000a1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 161
    000000a6: 	movl	init_value(%rip), %eax
    000000ac: 	leal	0x7b(%rax), %edi
    000000af: 	callq	srand@PLT # Offset: 175
    000000b4: 	leaq	0xc0(%rsp), %rax
    000000bc: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000c6: 	movabsq	$0x14057b7ef767814f, %rdi
    000000d0: 	movq	%rax, 0x18(%rsp)
    000000d5: 	movq	%rax, %rdx
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1600:
    000000e0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000e7: 	addq	$0x4, %rdx
    000000eb: 	imulq	%r8, %rax
    000000ef: 	addq	%rdi, %rax
    000000f2: 	movq	%rax, %rcx
    000000f5: 	movq	%rax, %rsi
    000000f8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ff: 	shrq	$0x14, %rcx
    00000103: 	shlq	$0x17, %rsi
    00000107: 	xorq	%rsi, %rcx
    0000010a: 	xorq	%rcx, %rax
    0000010d: 	sarq	$0x3, %rax
    00000111: 	movl	%eax, -0x4(%rdx)
    00000114: 	cmpq	%rbp, %rdx
    00000117: 	jne	.Ltmp1600 # Offset: 279
    00000119: 	movd	init_value(%rip), %xmm7
    00000121: 	movq	0x18(%rsp), %r10
    00000126: 	leaq	0xc4(%rsp), %rsi
    0000012e: 	movabsq	$0x5851f42d4c957f2d, %r9
    00000138: 	movabsq	$0x14057b7ef767814f, %r8
    00000142: 	movabsq	$0x20c49ba5e353f7d, %rdi
    0000014c: 	pshufd	$0x0, %xmm7, %xmm3
    00000151: 	pshufd	$0xe0, %xmm7, %xmm0
    00000156: 	movaps	%xmm3, 0xc0(%rsp)
    0000015e: 	movaps	%xmm3, 0xd0(%rsp)
    00000166: 	movaps	%xmm3, 0xe0(%rsp)
    0000016e: 	movaps	%xmm3, 0xf0(%rsp)
    00000176: 	movaps	%xmm3, 0x100(%rsp)
    0000017e: 	movaps	%xmm3, 0x110(%rsp)
    00000186: 	movaps	%xmm3, 0x120(%rsp)
    0000018e: 	movaps	%xmm3, 0x130(%rsp)
    00000196: 	movaps	%xmm3, 0x140(%rsp)
    0000019e: 	movaps	%xmm3, 0x150(%rsp)
    000001a6: 	movq	%xmm0, 0x160(%rsp)
.Ltmp1601:
    000001af: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000001b6: 	movl	(%rsi), %r11d
    000001b9: 	addq	$0x4, %rsi
    000001bd: 	imulq	%r9, %rax
    000001c1: 	addq	%r8, %rax
    000001c4: 	movq	%rax, %rdx
    000001c7: 	movq	%rax, %rcx
    000001ca: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001d1: 	shlq	$0x17, %rcx
    000001d5: 	shrq	$0x14, %rdx
    000001d9: 	xorq	%rcx, %rdx
    000001dc: 	xorq	%rdx, %rax
    000001df: 	movq	%rax, %rdx
    000001e2: 	movq	%rax, %rcx
    000001e5: 	shrq	$0x6, %rdx
    000001e9: 	movq	%rdx, %rax
    000001ec: 	mulq	%rdi
    000001ef: 	movq	%rcx, %rax
    000001f2: 	imulq	$0x1f40, %rdx, %rdx
    000001f9: 	subq	%rdx, %rax
    000001fc: 	leaq	(%r10,%rax,4), %rax
    00000200: 	movl	(%rax), %edx
    00000202: 	movl	%edx, -0x4(%rsi)
    00000205: 	movl	%r11d, (%rax)
    00000208: 	cmpq	%rbp, %rsi
    0000020b: 	jne	.Ltmp1601 # Offset: 523
    0000020d: 	movq	0x18(%rsp), %rax
    00000212: 	pxor	%xmm1, %xmm1
    00000216: 	pxor	%xmm5, %xmm5
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1602:
    00000220: 	movdqa	%xmm3, %xmm0
    00000224: 	movdqa	%xmm5, %xmm4
    00000228: 	addq	$0x10, %rax
    0000022c: 	pcmpeqd	-0x10(%rax), %xmm0
    00000231: 	pand	DATAat0x19270(%rip), %xmm0
    00000239: 	pcmpgtd	%xmm0, %xmm4
    0000023d: 	movdqa	%xmm0, %xmm2
    00000241: 	punpckldq	%xmm4, %xmm2
    00000245: 	punpckhdq	%xmm4, %xmm0
    00000249: 	paddq	%xmm2, %xmm1
    0000024d: 	paddq	%xmm0, %xmm1
    00000251: 	cmpq	%rax, %rbp
    00000254: 	jne	.Ltmp1602 # Offset: 596
    00000256: 	movdqa	%xmm1, %xmm0
    0000025a: 	leaq	0x60(%rsp), %rax
    0000025f: 	leaq	0x80(%rsp), %rdi
    00000267: 	psrldq	$0x8, %xmm0
    0000026c: 	leaq	DATAat0x191e0(%rip), %rdx
    00000273: 	movq	%rax, %rsi
    00000276: 	movq	%rdi, 0x30(%rsp)
    0000027b: 	paddq	%xmm0, %xmm1
    0000027f: 	movq	%rax, 0x28(%rsp)
    00000284: 	movq	%xmm1, gCount(%rip)
    0000028c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 652
    00000291: 	movl	init_value(%rip), %ebx
    00000297: 	xorl	%r14d, %r14d
    0000029a: 	leaq	0xb0(%rsp), %r15
    000002a2: 	callq	clock@PLT # Offset: 674
    000002a7: 	movl	iterations(%rip), %edx
    000002ad: 	movd	%ebx, %xmm7
    000002b1: 	movq	%rax, start_time(%rip)
    000002b8: 	pshufd	$0x0, %xmm7, %xmm7
    000002bd: 	movaps	%xmm7, (%rsp)
    000002c1: 	testl	%edx, %edx
    000002c3: 	jle	.Ltmp1603 # Offset: 707
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp1611:
    000002d0: 	movq	0x18(%rsp), %rax
    000002d5: 	pxor	%xmm1, %xmm1
    000002d9: 	pxor	%xmm4, %xmm4
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp1604:
    000002e0: 	movdqa	(%rsp), %xmm0
    000002e5: 	movdqa	%xmm4, %xmm3
    000002e9: 	addq	$0x10, %rax
    000002ed: 	pcmpeqd	-0x10(%rax), %xmm0
    000002f2: 	pand	DATAat0x19270(%rip), %xmm0
    000002fa: 	pcmpgtd	%xmm0, %xmm3
    000002fe: 	movdqa	%xmm0, %xmm2
    00000302: 	punpckldq	%xmm3, %xmm2
    00000306: 	punpckhdq	%xmm3, %xmm0
    0000030a: 	paddq	%xmm2, %xmm1
    0000030e: 	paddq	%xmm0, %xmm1
    00000312: 	cmpq	%rax, %rbp
    00000315: 	jne	.Ltmp1604 # Offset: 789
    00000317: 	movq	0x80(%rsp), %r13
    0000031f: 	movdqa	%xmm1, %xmm0
    00000323: 	movq	0x88(%rsp), %r12
    0000032b: 	movq	%r15, 0xa0(%rsp)
    00000333: 	psrldq	$0x8, %xmm0
    00000338: 	movq	%r13, %rax
    0000033b: 	paddq	%xmm0, %xmm1
    0000033f: 	addq	%r12, %rax
    00000342: 	movq	%xmm1, %rbx
    00000347: 	je	.Ltmp1605 # Offset: 839
    00000349: 	testq	%r13, %r13
    0000034c: 	je	.Ltmp1606 # Offset: 844
.Ltmp1605:
    00000352: 	movq	%r12, 0x40(%rsp)
    00000357: 	cmpq	$0xf, %r12
    0000035b: 	ja	.Ltmp1607 # Offset: 859
    00000361: 	cmpq	$0x1, %r12
    00000365: 	jne	.Ltmp1608 # Offset: 869
    0000036b: 	movzbl	(%r13), %eax
    00000370: 	movb	%al, 0xb0(%rsp)
    00000377: 	movq	%r15, %rax
.Ltmp1659:
    0000037a: 	movq	%r12, 0xa8(%rsp)
    00000382: 	movb	$0x0, (%rax,%r12)
    00000387: 	cmpq	gCount(%rip), %rbx
    0000038e: 	je	.Ltmp1609 # Offset: 910
    00000390: 	movq	0xa0(%rsp), %rdx
    00000398: 	leaq	DATAat0x191d0(%rip), %rsi
    0000039f: 	movl	$0x1, %edi
    000003a4: 	xorl	%eax, %eax
    000003a6: 	callq	__printf_chk@PLT # Offset: 934
.Ltmp1609:
    000003ab: 	movq	0xa0(%rsp), %rdi
    000003b3: 	cmpq	%r15, %rdi
    000003b6: 	je	.Ltmp1610 # Offset: 950
    000003bc: 	movq	0xb0(%rsp), %rax
    000003c4: 	addl	$0x1, %r14d
    000003c8: 	leaq	0x1(%rax), %rsi
    000003cc: 	callq	_ZdlPvm@PLT # Offset: 972
    000003d1: 	cmpl	iterations(%rip), %r14d
    000003d8: 	jl	.Ltmp1611 # Offset: 984
.Ltmp1603:
    000003de: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000003e5: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000003ec: 	subq	$0x20, %rax
    000003f0: 	cmpq	%rax, %rdi
    000003f3: 	je	.Ltmp1612 # Offset: 1011
    000003f9: 	leaq	0x10(%rdi), %rax
    000003fd: 	movq	0x88(%rsp), %rdx
    00000405: 	movq	%rax, (%rdi)
    00000408: 	movq	0x80(%rsp), %rsi
    00000410: 	addq	%rsi, %rdx
    00000413: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1043
    00000418: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000041f: 	addq	$0x20, %rax
    00000423: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1673:
    0000042a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000431: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000438: 	je	.Ltmp1613 # Offset: 1080
.Ltmp1670:
    0000043e: 	movq	-0x20(%rax), %r12
    00000442: 	callq	clock@PLT # Offset: 1090
    00000447: 	pxor	%xmm0, %xmm0
    0000044b: 	movq	%rax, end_time(%rip)
    00000452: 	movq	%r12, %rdi
    00000455: 	subq	start_time(%rip), %rax
    0000045c: 	cvtsi2sd	%rax, %xmm0
    00000461: 	divsd	DATAat0x19290(%rip), %xmm0
    00000469: 	callq	_Z13record_resultdPKc # Offset: 1129
    0000046e: 	movq	0x80(%rsp), %rdi
    00000476: 	leaq	0x90(%rsp), %rax
    0000047e: 	movq	%rax, (%rsp)
    00000482: 	cmpq	%rax, %rdi
    00000485: 	je	.Ltmp1614 # Offset: 1157
    00000487: 	movq	0x90(%rsp), %rax
    0000048f: 	leaq	0x1(%rax), %rsi
    00000493: 	callq	_ZdlPvm@PLT # Offset: 1171
.Ltmp1614:
    00000498: 	movq	(%rsp), %rax
    0000049c: 	movq	0x60(%rsp), %r13
    000004a1: 	movq	0x68(%rsp), %r12
    000004a6: 	movq	%rax, 0x80(%rsp)
    000004ae: 	movq	%r13, %rax
    000004b1: 	addq	%r12, %rax
    000004b4: 	je	.Ltmp1615 # Offset: 1204
    000004b6: 	testq	%r13, %r13
    000004b9: 	je	.Ltmp1616 # Offset: 1209
.Ltmp1615:
    000004bf: 	movq	%r12, 0x40(%rsp)
    000004c4: 	cmpq	$0xf, %r12
    000004c8: 	ja	.Ltmp1617 # Offset: 1224
    000004ce: 	cmpq	$0x1, %r12
    000004d2: 	jne	.Ltmp1618 # Offset: 1234
    000004d8: 	movzbl	(%r13), %eax
    000004dd: 	movb	%al, 0x90(%rsp)
    000004e4: 	movq	(%rsp), %rax
.Ltmp1661:
    000004e8: 	movq	%r12, 0x88(%rsp)
    000004f0: 	movb	$0x0, (%rax,%r12)
    000004f5: 	movabsq	$0x3fffffffffffffff, %rax
    000004ff: 	subq	0x88(%rsp), %rax
    00000507: 	cmpq	$0xd, %rax
    0000050b: 	jbe	.Ltmp1619 # Offset: 1291
    00000511: 	movq	0x30(%rsp), %rdi
    00000516: 	movl	$0xe, %edx
    0000051b: 	leaq	DATAat0x191ec(%rip), %rsi
    00000522: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1314
    00000527: 	callq	clock@PLT # Offset: 1319
    0000052c: 	xorl	%ebx, %ebx
    0000052e: 	leaq	0xb0(%rsp), %r15
    00000536: 	movq	%rax, start_time(%rip)
    0000053d: 	movl	iterations(%rip), %eax
    00000543: 	testl	%eax, %eax
    00000545: 	jle	.Ltmp1620 # Offset: 1349
    0000054b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1628:
    00000550: 	movd	init_value(%rip), %xmm6
    00000558: 	movq	0x18(%rsp), %rax
    0000055d: 	pxor	%xmm1, %xmm1
    00000561: 	pxor	%xmm4, %xmm4
    00000565: 	pshufd	$0x0, %xmm6, %xmm5
    0000056a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1621:
    00000570: 	movdqa	%xmm5, %xmm0
    00000574: 	movdqa	%xmm4, %xmm3
    00000578: 	addq	$0x10, %rax
    0000057c: 	pcmpeqd	-0x10(%rax), %xmm0
    00000581: 	pand	DATAat0x19270(%rip), %xmm0
    00000589: 	pcmpgtd	%xmm0, %xmm3
    0000058d: 	movdqa	%xmm0, %xmm2
    00000591: 	punpckldq	%xmm3, %xmm2
    00000595: 	punpckhdq	%xmm3, %xmm0
    00000599: 	paddq	%xmm2, %xmm1
    0000059d: 	paddq	%xmm0, %xmm1
    000005a1: 	cmpq	%rbp, %rax
    000005a4: 	jne	.Ltmp1621 # Offset: 1444
    000005a6: 	movq	0x80(%rsp), %r13
    000005ae: 	movdqa	%xmm1, %xmm0
    000005b2: 	movq	0x88(%rsp), %r12
    000005ba: 	movq	%r15, 0xa0(%rsp)
    000005c2: 	psrldq	$0x8, %xmm0
    000005c7: 	movq	%r13, %rax
    000005ca: 	paddq	%xmm0, %xmm1
    000005ce: 	addq	%r12, %rax
    000005d1: 	movq	%xmm1, %r14
    000005d6: 	je	.Ltmp1622 # Offset: 1494
    000005d8: 	testq	%r13, %r13
    000005db: 	je	.Ltmp1623 # Offset: 1499
.Ltmp1622:
    000005e1: 	movq	%r12, 0x40(%rsp)
    000005e6: 	cmpq	$0xf, %r12
    000005ea: 	ja	.Ltmp1624 # Offset: 1514
    000005f0: 	cmpq	$0x1, %r12
    000005f4: 	jne	.Ltmp1625 # Offset: 1524
    000005fa: 	movzbl	(%r13), %eax
    000005ff: 	movb	%al, 0xb0(%rsp)
    00000606: 	movq	%r15, %rax
.Ltmp1663:
    00000609: 	movq	%r12, 0xa8(%rsp)
    00000611: 	movb	$0x0, (%rax,%r12)
    00000616: 	cmpq	gCount(%rip), %r14
    0000061d: 	je	.Ltmp1626 # Offset: 1565
    0000061f: 	movq	0xa0(%rsp), %rdx
    00000627: 	leaq	DATAat0x191d0(%rip), %rsi
    0000062e: 	movl	$0x1, %edi
    00000633: 	xorl	%eax, %eax
    00000635: 	callq	__printf_chk@PLT # Offset: 1589
.Ltmp1626:
    0000063a: 	movq	0xa0(%rsp), %rdi
    00000642: 	cmpq	%r15, %rdi
    00000645: 	je	.Ltmp1627 # Offset: 1605
    0000064b: 	movq	0xb0(%rsp), %rax
    00000653: 	addl	$0x1, %ebx
    00000656: 	leaq	0x1(%rax), %rsi
    0000065a: 	callq	_ZdlPvm@PLT # Offset: 1626
    0000065f: 	cmpl	iterations(%rip), %ebx
    00000665: 	jl	.Ltmp1628 # Offset: 1637
.Ltmp1620:
    0000066b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000672: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000679: 	subq	$0x20, %rax
    0000067d: 	cmpq	%rax, %rdi
    00000680: 	je	.Ltmp1629 # Offset: 1664
    00000686: 	leaq	0x10(%rdi), %rax
    0000068a: 	movq	0x88(%rsp), %rdx
    00000692: 	movq	%rax, (%rdi)
    00000695: 	movq	0x80(%rsp), %rsi
    0000069d: 	addq	%rsi, %rdx
    000006a0: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1696
    000006a5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000006ac: 	addq	$0x20, %rax
    000006b0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1672:
    000006b7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000006be: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000006c5: 	je	.Ltmp1630 # Offset: 1733
.Ltmp1671:
    000006cb: 	movq	-0x20(%rax), %rbp
    000006cf: 	callq	clock@PLT # Offset: 1743
    000006d4: 	pxor	%xmm0, %xmm0
    000006d8: 	movq	%rax, end_time(%rip)
    000006df: 	movq	%rbp, %rdi
    000006e2: 	subq	start_time(%rip), %rax
    000006e9: 	cvtsi2sd	%rax, %xmm0
    000006ee: 	divsd	DATAat0x19290(%rip), %xmm0
    000006f6: 	callq	_Z13record_resultdPKc # Offset: 1782
    000006fb: 	movq	0x80(%rsp), %rdi
    00000703: 	cmpq	(%rsp), %rdi
    00000707: 	je	.Ltmp1631 # Offset: 1799
    00000709: 	movq	0x90(%rsp), %rax
    00000711: 	leaq	0x1(%rax), %rsi
    00000715: 	callq	_ZdlPvm@PLT # Offset: 1813
.Ltmp1631:
    0000071a: 	leaq	0xa0(%rsp), %rbp
    00000722: 	movq	0x28(%rsp), %rsi
    00000727: 	leaq	DATAat0x191fb(%rip), %rdx
    0000072e: 	movq	%rbp, %rdi
    00000731: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1841
    00000736: 	movl	init_value(%rip), %edx
    0000073c: 	movq	0x18(%rsp), %rdi
    00000741: 	movq	%rbp, %r8
    00000744: 	leaq	_Z6count1IiEmPT_iS0_(%rip), %rcx
    0000074b: 	movl	$0x1f40, %esi
    00000750: 	callq	_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1872
    00000755: 	movq	0xa0(%rsp), %rdi
    0000075d: 	leaq	0xb0(%rsp), %r15
    00000765: 	cmpq	%r15, %rdi
    00000768: 	je	.Ltmp1632 # Offset: 1896
    0000076a: 	movq	0xb0(%rsp), %rax
    00000772: 	leaq	0x1(%rax), %rsi
    00000776: 	callq	_ZdlPvm@PLT # Offset: 1910
.Ltmp1632:
    0000077b: 	movq	0x28(%rsp), %rsi
    00000780: 	leaq	DATAat0x19203(%rip), %rdx
    00000787: 	movq	%rbp, %rdi
    0000078a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1930
    0000078f: 	movl	init_value(%rip), %edx
    00000795: 	movq	0x18(%rsp), %rdi
    0000079a: 	movq	%rbp, %r8
    0000079d: 	leaq	_Z6count2IiEmPT_iS0_(%rip), %rcx
    000007a4: 	movl	$0x1f40, %esi
    000007a9: 	callq	_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1961
    000007ae: 	movq	0xa0(%rsp), %rdi
    000007b6: 	cmpq	%r15, %rdi
    000007b9: 	je	.Ltmp1633 # Offset: 1977
    000007bb: 	movq	0xb0(%rsp), %rax
    000007c3: 	leaq	0x1(%rax), %rsi
    000007c7: 	callq	_ZdlPvm@PLT # Offset: 1991
.Ltmp1633:
    000007cc: 	movq	0x28(%rsp), %rsi
    000007d1: 	leaq	DATAat0x1920b(%rip), %rdx
    000007d8: 	movq	%rbp, %rdi
    000007db: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2011
    000007e0: 	movl	init_value(%rip), %edx
    000007e6: 	movq	0x18(%rsp), %rdi
    000007eb: 	movq	%rbp, %r8
    000007ee: 	leaq	_Z6count3IiEmPT_iS0_(%rip), %rcx
    000007f5: 	movl	$0x1f40, %esi
    000007fa: 	callq	_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2042
    000007ff: 	movq	0xa0(%rsp), %rdi
    00000807: 	cmpq	%r15, %rdi
    0000080a: 	je	.Ltmp1634 # Offset: 2058
    0000080c: 	movq	0xb0(%rsp), %rax
    00000814: 	leaq	0x1(%rax), %rsi
    00000818: 	callq	_ZdlPvm@PLT # Offset: 2072
.Ltmp1634:
    0000081d: 	movq	0x60(%rsp), %r13
    00000822: 	movq	0x68(%rsp), %r12
    00000827: 	movq	%r15, 0xa0(%rsp)
    0000082f: 	movq	%r13, %rax
    00000832: 	addq	%r12, %rax
    00000835: 	je	.Ltmp1635 # Offset: 2101
    00000837: 	testq	%r13, %r13
    0000083a: 	je	.Ltmp1636 # Offset: 2106
.Ltmp1635:
    00000840: 	movq	%r12, 0x40(%rsp)
    00000845: 	cmpq	$0xf, %r12
    00000849: 	ja	.Ltmp1637 # Offset: 2121
    0000084f: 	cmpq	$0x1, %r12
    00000853: 	jne	.Ltmp1638 # Offset: 2131
    00000859: 	movzbl	(%r13), %eax
    0000085e: 	movb	%al, 0xb0(%rsp)
    00000865: 	movq	%r15, %rax
.Ltmp1665:
    00000868: 	movq	%r12, 0xa8(%rsp)
    00000870: 	movb	$0x0, (%rax,%r12)
    00000875: 	movabsq	$0x3fffffffffffffff, %rax
    0000087f: 	subq	0xa8(%rsp), %rax
    00000887: 	cmpq	$0x6, %rax
    0000088b: 	jbe	.Ltmp1639 # Offset: 2187
    00000891: 	movl	$0x7, %edx
    00000896: 	leaq	DATAat0x19213(%rip), %rsi
    0000089d: 	movq	%rbp, %rdi
    000008a0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2208
    000008a5: 	movl	init_value(%rip), %edx
    000008ab: 	movq	0x18(%rsp), %rdi
    000008b0: 	movq	%rbp, %r8
    000008b3: 	leaq	_Z6count4IiEmPT_iS0_(%rip), %rcx
    000008ba: 	movl	$0x1f40, %esi
    000008bf: 	callq	_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2239
    000008c4: 	movq	0xa0(%rsp), %rdi
    000008cc: 	cmpq	%r15, %rdi
    000008cf: 	je	.Ltmp1640 # Offset: 2255
    000008d1: 	movq	0xb0(%rsp), %rax
    000008d9: 	leaq	0x1(%rax), %rsi
    000008dd: 	callq	_ZdlPvm@PLT # Offset: 2269
.Ltmp1640:
    000008e2: 	movq	0x28(%rsp), %rsi
    000008e7: 	leaq	DATAat0x1921b(%rip), %rdx
    000008ee: 	movq	%rbp, %rdi
    000008f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2289
    000008f6: 	movl	init_value(%rip), %edx
    000008fc: 	movq	0x18(%rsp), %rdi
    00000901: 	movq	%rbp, %r8
    00000904: 	leaq	_Z6count5IiEmPT_iS0_(%rip), %rcx
    0000090b: 	movl	$0x1f40, %esi
    00000910: 	callq	_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2320
    00000915: 	movq	0xa0(%rsp), %rdi
    0000091d: 	cmpq	%r15, %rdi
    00000920: 	je	.Ltmp1641 # Offset: 2336
    00000922: 	movq	0xb0(%rsp), %rax
    0000092a: 	leaq	0x1(%rax), %rsi
    0000092e: 	callq	_ZdlPvm@PLT # Offset: 2350
.Ltmp1641:
    00000933: 	movq	0x28(%rsp), %rsi
    00000938: 	leaq	DATAat0x19223(%rip), %rdx
    0000093f: 	movq	%rbp, %rdi
    00000942: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2370
    00000947: 	movl	init_value(%rip), %edx
    0000094d: 	movq	0x18(%rsp), %rdi
    00000952: 	movq	%rbp, %r8
    00000955: 	leaq	_Z6count6IiEmPT_iS0_(%rip), %rcx
    0000095c: 	movl	$0x1f40, %esi
    00000961: 	callq	_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2401
    00000966: 	movq	0xa0(%rsp), %rdi
    0000096e: 	cmpq	%r15, %rdi
    00000971: 	je	.Ltmp1642 # Offset: 2417
    00000973: 	movq	0xb0(%rsp), %rax
    0000097b: 	leaq	0x1(%rax), %rsi
    0000097f: 	callq	_ZdlPvm@PLT # Offset: 2431
.Ltmp1642:
    00000984: 	movq	0x28(%rsp), %rsi
    00000989: 	leaq	DATAat0x1922b(%rip), %rdx
    00000990: 	movq	%rbp, %rdi
    00000993: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2451
    00000998: 	movl	init_value(%rip), %edx
    0000099e: 	movq	0x18(%rsp), %rdi
    000009a3: 	movq	%rbp, %r8
    000009a6: 	leaq	_Z6count7IiEmPT_iS0_(%rip), %rcx
    000009ad: 	movl	$0x1f40, %esi
    000009b2: 	callq	_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2482
    000009b7: 	movq	0xa0(%rsp), %rdi
    000009bf: 	cmpq	%r15, %rdi
    000009c2: 	je	.Ltmp1643 # Offset: 2498
    000009c4: 	movq	0xb0(%rsp), %rax
    000009cc: 	leaq	0x1(%rax), %rsi
    000009d0: 	callq	_ZdlPvm@PLT # Offset: 2512
.Ltmp1643:
    000009d5: 	movq	0x60(%rsp), %r13
    000009da: 	movq	0x68(%rsp), %r12
    000009df: 	movq	%r15, 0xa0(%rsp)
    000009e7: 	movq	%r13, %rax
    000009ea: 	addq	%r12, %rax
    000009ed: 	je	.Ltmp1644 # Offset: 2541
    000009ef: 	testq	%r13, %r13
    000009f2: 	je	.Ltmp1645 # Offset: 2546
.Ltmp1644:
    000009f8: 	movq	%r12, 0x40(%rsp)
    000009fd: 	cmpq	$0xf, %r12
    00000a01: 	ja	.Ltmp1646 # Offset: 2561
    00000a07: 	cmpq	$0x1, %r12
    00000a0b: 	jne	.Ltmp1647 # Offset: 2571
    00000a11: 	movzbl	(%r13), %eax
    00000a16: 	movb	%al, 0xb0(%rsp)
    00000a1d: 	movq	%r15, %rax
.Ltmp1669:
    00000a20: 	movq	%r12, 0xa8(%rsp)
    00000a28: 	movb	$0x0, (%rax,%r12)
    00000a2d: 	movabsq	$0x3fffffffffffffff, %rax
    00000a37: 	subq	0xa8(%rsp), %rax
    00000a3f: 	cmpq	$0x6, %rax
    00000a43: 	jbe	.Ltmp1648 # Offset: 2627
    00000a49: 	movl	$0x7, %edx
    00000a4e: 	leaq	DATAat0x19233(%rip), %rsi
    00000a55: 	movq	%rbp, %rdi
    00000a58: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2648
    00000a5d: 	movl	init_value(%rip), %edx
    00000a63: 	movq	0x18(%rsp), %rdi
    00000a68: 	movq	%rbp, %r8
    00000a6b: 	leaq	_Z6count8IiEmPT_iS0_(%rip), %rcx
    00000a72: 	movl	$0x1f40, %esi
    00000a77: 	callq	_Z10test_countIiPFmPiiiEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2679
    00000a7c: 	movq	0xa0(%rsp), %rdi
    00000a84: 	cmpq	%r15, %rdi
    00000a87: 	je	.Ltmp1649 # Offset: 2695
    00000a89: 	movq	0xb0(%rsp), %rax
    00000a91: 	leaq	0x1(%rax), %rsi
    00000a95: 	callq	_ZdlPvm@PLT # Offset: 2709
.Ltmp1649:
    00000a9a: 	movq	0x60(%rsp), %r13
    00000a9f: 	movq	0x68(%rsp), %r12
    00000aa4: 	movq	%r15, 0xa0(%rsp)
    00000aac: 	movq	%r13, %rax
    00000aaf: 	addq	%r12, %rax
    00000ab2: 	je	.Ltmp1650 # Offset: 2738
    00000ab4: 	testq	%r13, %r13
    00000ab7: 	je	.Ltmp1651 # Offset: 2743
.Ltmp1650:
    00000abd: 	movq	%r12, 0x40(%rsp)
    00000ac2: 	cmpq	$0xf, %r12
    00000ac6: 	ja	.Ltmp1652 # Offset: 2758
    00000acc: 	cmpq	$0x1, %r12
    00000ad0: 	jne	.Ltmp1653 # Offset: 2768
    00000ad6: 	movzbl	(%r13), %eax
    00000adb: 	movb	%al, 0xb0(%rsp)
    00000ae2: 	movq	%r15, %rax
.Ltmp1667:
    00000ae5: 	movq	%r12, 0xa8(%rsp)
    00000aed: 	movb	$0x0, (%rax,%r12)
    00000af2: 	movabsq	$0x3fffffffffffffff, %rax
    00000afc: 	subq	0xa8(%rsp), %rax
    00000b04: 	cmpq	$0xe, %rax
    00000b08: 	jbe	.Ltmp1654 # Offset: 2824
    00000b0e: 	movl	$0xf, %edx
    00000b13: 	leaq	DATAat0x1923b(%rip), %rsi
    00000b1a: 	movq	%rbp, %rdi
    00000b1d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2845
    00000b22: 	movl	iterations(%rip), %edx
    00000b28: 	xorl	%r8d, %r8d
    00000b2b: 	xorl	%ecx, %ecx
    00000b2d: 	movl	$0x1f40, %esi
    00000b32: 	movq	0xa0(%rsp), %rdi
    00000b3a: 	callq	_Z9summarizePKciiii # Offset: 2874
    00000b3f: 	movq	0xa0(%rsp), %rdi
    00000b47: 	cmpq	%r15, %rdi
    00000b4a: 	je	.Ltmp1655 # Offset: 2890
    00000b4c: 	movq	0xb0(%rsp), %rax
    00000b54: 	leaq	0x1(%rax), %rsi
    00000b58: 	callq	_ZdlPvm@PLT # Offset: 2904
.Ltmp1655:
    00000b5d: 	movq	0x60(%rsp), %rdi
    00000b62: 	cmpq	0x38(%rsp), %rdi
    00000b67: 	je	.Ltmp1656 # Offset: 2919
    00000b69: 	movq	0x70(%rsp), %rax
    00000b6e: 	leaq	0x1(%rax), %rsi
    00000b72: 	callq	_ZdlPvm@PLT # Offset: 2930
.Ltmp1656:
    00000b77: 	movq	0x7dc8(%rsp), %rax
    00000b7f: 	subq	%fs:0x28, %rax
    00000b88: 	jne	.Ltmp1657 # Offset: 2952
    00000b8e: 	addq	$0x7dd8, %rsp
    00000b95: 	popq	%rbx
    00000b96: 	popq	%rbp
    00000b97: 	popq	%r12
    00000b99: 	popq	%r13
    00000b9b: 	popq	%r14
    00000b9d: 	popq	%r15
    00000b9f: 	retq # Offset: 2975
.Ltmp1610:
    00000ba0: 	addl	$0x1, %r14d
    00000ba4: 	cmpl	iterations(%rip), %r14d
    00000bab: 	jl	.Ltmp1611 # Offset: 2987
    00000bb1: 	jmp	.Ltmp1603 # Offset: 2993
    00000bb6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1608:
    00000bc0: 	testq	%r12, %r12
    00000bc3: 	jne	.Ltmp1658 # Offset: 3011
    00000bc9: 	movq	%r15, %rax
    00000bcc: 	jmp	.Ltmp1659 # Offset: 3020
    00000bd1: 	nopl	(%rax) # Size: 7
.Ltmp1607:
    00000bd8: 	movq	0x20(%rsp), %rsi
    00000bdd: 	leaq	0xa0(%rsp), %rdi
    00000be5: 	xorl	%edx, %edx
    00000be7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3047
    00000bec: 	movq	%rax, 0xa0(%rsp)
    00000bf4: 	movq	%rax, %rdi
    00000bf7: 	movq	0x40(%rsp), %rax
    00000bfc: 	movq	%rax, 0xb0(%rsp)
.Ltmp1679:
    00000c04: 	movq	%r12, %rdx
    00000c07: 	movq	%r13, %rsi
    00000c0a: 	callq	memcpy@PLT # Offset: 3082
    00000c0f: 	movq	0x40(%rsp), %r12
    00000c14: 	movq	0xa0(%rsp), %rax
    00000c1c: 	jmp	.Ltmp1659 # Offset: 3100
.Ltmp1618:
    00000c21: 	testq	%r12, %r12
    00000c24: 	jne	.Ltmp1660 # Offset: 3108
    00000c2a: 	movq	(%rsp), %rax
    00000c2e: 	jmp	.Ltmp1661 # Offset: 3118
    00000c33: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1627:
    00000c38: 	addl	$0x1, %ebx
    00000c3b: 	cmpl	iterations(%rip), %ebx
    00000c41: 	jl	.Ltmp1628 # Offset: 3137
    00000c47: 	jmp	.Ltmp1620 # Offset: 3143
    00000c4c: 	nopl	(%rax) # Size: 4
.Ltmp1625:
    00000c50: 	testq	%r12, %r12
    00000c53: 	jne	.Ltmp1662 # Offset: 3155
    00000c59: 	movq	%r15, %rax
    00000c5c: 	jmp	.Ltmp1663 # Offset: 3164
    00000c61: 	nopl	(%rax) # Size: 7
.Ltmp1624:
    00000c68: 	movq	0x20(%rsp), %rsi
    00000c6d: 	leaq	0xa0(%rsp), %rdi
    00000c75: 	xorl	%edx, %edx
    00000c77: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3191
    00000c7c: 	movq	%rax, 0xa0(%rsp)
    00000c84: 	movq	%rax, %rdi
    00000c87: 	movq	0x40(%rsp), %rax
    00000c8c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1675:
    00000c94: 	movq	%r12, %rdx
    00000c97: 	movq	%r13, %rsi
    00000c9a: 	callq	memcpy@PLT # Offset: 3226
    00000c9f: 	movq	0x40(%rsp), %r12
    00000ca4: 	movq	0xa0(%rsp), %rax
    00000cac: 	jmp	.Ltmp1663 # Offset: 3244
.Ltmp1638:
    00000cb1: 	testq	%r12, %r12
    00000cb4: 	jne	.Ltmp1664 # Offset: 3252
    00000cba: 	movq	%r15, %rax
    00000cbd: 	jmp	.Ltmp1665 # Offset: 3261
.Ltmp1653:
    00000cc2: 	testq	%r12, %r12
    00000cc5: 	jne	.Ltmp1666 # Offset: 3269
    00000ccb: 	movq	%r15, %rax
    00000cce: 	jmp	.Ltmp1667 # Offset: 3278
.Ltmp1647:
    00000cd3: 	testq	%r12, %r12
    00000cd6: 	jne	.Ltmp1668 # Offset: 3286
    00000cdc: 	movq	%r15, %rax
    00000cdf: 	jmp	.Ltmp1669 # Offset: 3295
.Ltmp1646:
    00000ce4: 	movq	0x20(%rsp), %rsi
    00000ce9: 	xorl	%edx, %edx
    00000ceb: 	movq	%rbp, %rdi
    00000cee: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3310
    00000cf3: 	movq	%rax, 0xa0(%rsp)
    00000cfb: 	movq	%rax, %rdi
    00000cfe: 	movq	0x40(%rsp), %rax
    00000d03: 	movq	%rax, 0xb0(%rsp)
.Ltmp1678:
    00000d0b: 	movq	%r12, %rdx
    00000d0e: 	movq	%r13, %rsi
    00000d11: 	callq	memcpy@PLT # Offset: 3345
    00000d16: 	movq	0x40(%rsp), %r12
    00000d1b: 	movq	0xa0(%rsp), %rax
    00000d23: 	jmp	.Ltmp1669 # Offset: 3363
.Ltmp1617:
    00000d28: 	movq	0x20(%rsp), %rsi
    00000d2d: 	movq	0x30(%rsp), %rdi
    00000d32: 	xorl	%edx, %edx
    00000d34: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3380
    00000d39: 	movq	%rax, 0x80(%rsp)
    00000d41: 	movq	%rax, %rdi
    00000d44: 	movq	0x40(%rsp), %rax
    00000d49: 	movq	%rax, 0x90(%rsp)
.Ltmp1674:
    00000d51: 	movq	%r12, %rdx
    00000d54: 	movq	%r13, %rsi
    00000d57: 	callq	memcpy@PLT # Offset: 3415
    00000d5c: 	movq	0x40(%rsp), %r12
    00000d61: 	movq	0x80(%rsp), %rax
    00000d69: 	jmp	.Ltmp1661 # Offset: 3433
.Ltmp1637:
    00000d6e: 	movq	0x20(%rsp), %rsi
    00000d73: 	xorl	%edx, %edx
    00000d75: 	movq	%rbp, %rdi
    00000d78: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3448
    00000d7d: 	movq	%rax, 0xa0(%rsp)
    00000d85: 	movq	%rax, %rdi
    00000d88: 	movq	0x40(%rsp), %rax
    00000d8d: 	movq	%rax, 0xb0(%rsp)
.Ltmp1676:
    00000d95: 	movq	%r12, %rdx
    00000d98: 	movq	%r13, %rsi
    00000d9b: 	callq	memcpy@PLT # Offset: 3483
    00000da0: 	movq	0x40(%rsp), %r12
    00000da5: 	movq	0xa0(%rsp), %rax
    00000dad: 	jmp	.Ltmp1665 # Offset: 3501
.Ltmp1652:
    00000db2: 	movq	0x20(%rsp), %rsi
    00000db7: 	xorl	%edx, %edx
    00000db9: 	movq	%rbp, %rdi
    00000dbc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3516
    00000dc1: 	movq	%rax, 0xa0(%rsp)
    00000dc9: 	movq	%rax, %rdi
    00000dcc: 	movq	0x40(%rsp), %rax
    00000dd1: 	movq	%rax, 0xb0(%rsp)
.Ltmp1677:
    00000dd9: 	movq	%r12, %rdx
    00000ddc: 	movq	%r13, %rsi
    00000ddf: 	callq	memcpy@PLT # Offset: 3551
    00000de4: 	movq	0x40(%rsp), %r12
    00000de9: 	movq	0xa0(%rsp), %rax
    00000df1: 	jmp	.Ltmp1667 # Offset: 3569
.Ltmp1613:
    00000df6: 	movq	-0x8(%rdx), %rax
    00000dfa: 	addq	$0x200, %rax
    00000e00: 	jmp	.Ltmp1670 # Offset: 3584
.Ltmp1630:
    00000e05: 	movq	-0x8(%rdx), %rax
    00000e09: 	addq	$0x200, %rax
    00000e0f: 	jmp	.Ltmp1671 # Offset: 3599
.Ltmp1629:
    00000e14: 	movq	0x30(%rsp), %rsi
    00000e19: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000e20: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3616
    00000e25: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e2c: 	jmp	.Ltmp1672 # Offset: 3628
.Ltmp1612:
    00000e31: 	movq	0x30(%rsp), %rsi
    00000e36: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000e3d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3645
    00000e42: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e49: 	jmp	.Ltmp1673 # Offset: 3657
.Ltmp1616:
    00000e4e: 	leaq	DATAat0x19008(%rip), %rdi
    00000e55: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3669
.Ltmp1619:
    00000e5a: 	leaq	DATAat0x19184(%rip), %rdi
    00000e61: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3681
.Ltmp1623:
    00000e66: 	leaq	DATAat0x19008(%rip), %rdi
    00000e6d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3693
.Ltmp1636:
    00000e72: 	leaq	DATAat0x19008(%rip), %rdi
    00000e79: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3705
.Ltmp1639:
    00000e7e: 	leaq	DATAat0x19184(%rip), %rdi
    00000e85: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3717
.Ltmp1645:
    00000e8a: 	leaq	DATAat0x19008(%rip), %rdi
    00000e91: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3729
.Ltmp1648:
    00000e96: 	leaq	DATAat0x19184(%rip), %rdi
    00000e9d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3741
.Ltmp1651:
    00000ea2: 	leaq	DATAat0x19008(%rip), %rdi
    00000ea9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3753
.Ltmp1654:
    00000eae: 	leaq	DATAat0x19184(%rip), %rdi
    00000eb5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3765
.Ltmp1657:
    00000eba: 	callq	__stack_chk_fail@PLT # Offset: 3770
.Ltmp1660:
    00000ebf: 	movq	(%rsp), %rdi
    00000ec3: 	jmp	.Ltmp1674 # Offset: 3779
.Ltmp1662:
    00000ec8: 	movq	%r15, %rdi
    00000ecb: 	jmp	.Ltmp1675 # Offset: 3787
.Ltmp1664:
    00000ed0: 	movq	%r15, %rdi
    00000ed3: 	jmp	.Ltmp1676 # Offset: 3795
.Ltmp1666:
    00000ed8: 	movq	%r15, %rdi
    00000edb: 	jmp	.Ltmp1677 # Offset: 3803
.Ltmp1668:
    00000ee0: 	movq	%r15, %rdi
    00000ee3: 	jmp	.Ltmp1678 # Offset: 3811
.Ltmp1658:
    00000ee8: 	movq	%r15, %rdi
    00000eeb: 	jmp	.Ltmp1679 # Offset: 3819
.Ltmp1606:
    00000ef0: 	leaq	DATAat0x19008(%rip), %rdi
    00000ef7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3831
    00000efc: 	endbr64
.Ltmp1681:
    00000f00: 	movq	%rax, %rbp
    00000f03: 	jmp	.Ltmp1680 # Offset: 3843
    00000f08: 	endbr64
    00000f0c: 	jmp	.Ltmp1681 # Offset: 3852
    00000f0e: 	endbr64
    00000f12: 	jmp	.Ltmp1681 # Offset: 3858
    00000f14: 	endbr64
    00000f18: 	jmp	.Ltmp1681 # Offset: 3864
    00000f1a: 	endbr64
    00000f1e: 	jmp	.Ltmp1681 # Offset: 3870
    00000f20: 	endbr64
    00000f24: 	jmp	.Ltmp1681 # Offset: 3876
    00000f26: 	endbr64
    00000f2a: 	movq	%rax, %rbp
    00000f2d: 	jmp	.Ltmp1682 # Offset: 3885
    00000f2f: 	endbr64
    00000f33: 	movq	%rax, %rbp
    00000f36: 	jmp	.Ltmp1683 # Offset: 3894
    00000f38: 	endbr64
.Ltmp1688:
    00000f3c: 	movq	%rax, %rbp
    00000f3f: 	jmp	.Ltmp1684 # Offset: 3903
    00000f41: 	endbr64
    00000f45: 	movq	%rax, %rbp
    00000f48: 	jmp	.Ltmp1685 # Offset: 3912
    00000f4d: 	endbr64
    00000f51: 	movq	%rax, %rbp
    00000f54: 	movq	0xa0(%rsp), %rdi
    00000f5c: 	cmpq	%r15, %rdi
    00000f5f: 	je	.Ltmp1684 # Offset: 3935
    00000f61: 	movq	0xb0(%rsp), %rax
    00000f69: 	leaq	0x1(%rax), %rsi
    00000f6d: 	callq	_ZdlPvm@PLT # Offset: 3949
.Ltmp1684:
    00000f72: 	movq	0x80(%rsp), %rdi
    00000f7a: 	cmpq	(%rsp), %rdi
    00000f7e: 	je	.Ltmp1682 # Offset: 3966
.Ltmp1687:
    00000f80: 	movq	0x90(%rsp), %rax
    00000f88: 	leaq	0x1(%rax), %rsi
    00000f8c: 	callq	_ZdlPvm@PLT # Offset: 3980
.Ltmp1682:
    00000f91: 	movq	0x60(%rsp), %rdi
    00000f96: 	cmpq	0x38(%rsp), %rdi
    00000f9b: 	je	.Ltmp1686 # Offset: 3995
    00000f9d: 	movq	0x70(%rsp), %rax
    00000fa2: 	leaq	0x1(%rax), %rsi
    00000fa6: 	callq	_ZdlPvm@PLT # Offset: 4006
.Ltmp1686:
    00000fab: 	movq	%rbp, %rdi
    00000fae: 	callq	_Unwind_Resume@PLT # Offset: 4014
.Ltmp1683:
    00000fb3: 	movq	0xa0(%rsp), %rdi
    00000fbb: 	cmpq	%r15, %rdi
    00000fbe: 	je	.Ltmp1685 # Offset: 4030
    00000fc0: 	movq	0xb0(%rsp), %rax
    00000fc8: 	leaq	0x1(%rax), %rsi
    00000fcc: 	callq	_ZdlPvm@PLT # Offset: 4044
.Ltmp1685:
    00000fd1: 	movq	0x80(%rsp), %rdi
    00000fd9: 	leaq	0x90(%rsp), %rax
    00000fe1: 	cmpq	%rax, %rdi
    00000fe4: 	jne	.Ltmp1687 # Offset: 4068
    00000fe6: 	jmp	.Ltmp1682 # Offset: 4070
    00000fe8: 	endbr64
    00000fec: 	jmp	.Ltmp1681 # Offset: 4076
    00000ff1: 	endbr64
    00000ff5: 	jmp	.Ltmp1681 # Offset: 4085
    00000ffa: 	endbr64
    00000ffe: 	jmp	.Ltmp1688 # Offset: 4094
    00001003: 	endbr64
    00001007: 	movq	%rax, %rbp
    0000100a: 	jmp	.Ltmp1689 # Offset: 4106
    0000100c: 	endbr64
    00001010: 	jmp	.Ltmp1681 # Offset: 4112
    00001015: 	endbr64
    00001019: 	jmp	.Ltmp1681 # Offset: 4121
.Ltmp1680:
    0000101e: 	movq	0xa0(%rsp), %rdi
    00001026: 	cmpq	%r15, %rdi
    00001029: 	je	.Ltmp1682 # Offset: 4137
.Ltmp1690:
    0000102f: 	movq	0xb0(%rsp), %rax
    00001037: 	leaq	0x1(%rax), %rsi
    0000103b: 	callq	_ZdlPvm@PLT # Offset: 4155
    00001040: 	jmp	.Ltmp1682 # Offset: 4160
    00001045: 	endbr64
    00001049: 	jmp	.Ltmp1681 # Offset: 4169
.Ltmp1689:
    0000104e: 	movq	0xa0(%rsp), %rdi
    00001056: 	leaq	0xb0(%rsp), %rax
    0000105e: 	cmpq	%rax, %rdi
    00001061: 	jne	.Ltmp1690 # Offset: 4193
    00001063: 	jmp	.Ltmp1682 # Offset: 4195
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_Z11TestOneTypeIjEvv" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0x14060
  Size        : 0x104f
  MaxSize     : 0x1050
  Offset      : 0x14060
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIjEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp1691:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1691 # Offset: 37
    00000027: 	subq	$0xdd8, %rsp
    0000002e: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x7dc8(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	leaq	0x70(%rsp), %rax
    0000004e: 	movaps	%xmm7, 0x40(%rsp)
    00000053: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    0000005b: 	leaq	0x40(%rsp), %rdi
    00000060: 	movq	%rax, 0x38(%rsp)
    00000065: 	leaq	0x7dc0(%rsp), %rbp
    0000006d: 	movq	%rax, 0x60(%rsp)
    00000072: 	movabsq	$0x745f3233746e6975, %rax
    0000007c: 	movq	%rax, 0x70(%rsp)
    00000081: 	movq	%rdi, 0x20(%rsp)
    00000086: 	movaps	%xmm7, 0x50(%rsp)
    0000008b: 	movq	$0x8, 0x68(%rsp)
    00000094: 	movb	$0x0, 0x78(%rsp)
    00000099: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 153
    0000009e: 	movl	init_value(%rip), %eax
    000000a4: 	leal	0x7b(%rax), %edi
    000000a7: 	callq	srand@PLT # Offset: 167
    000000ac: 	leaq	0xc0(%rsp), %rax
    000000b4: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000be: 	movabsq	$0x14057b7ef767814f, %rdi
    000000c8: 	movq	%rax, 0x18(%rsp)
    000000cd: 	movq	%rax, %rdx
.Ltmp1692:
    000000d0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000d7: 	addq	$0x4, %rdx
    000000db: 	imulq	%r8, %rax
    000000df: 	addq	%rdi, %rax
    000000e2: 	movq	%rax, %rcx
    000000e5: 	movq	%rax, %rsi
    000000e8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ef: 	shrq	$0x14, %rcx
    000000f3: 	shlq	$0x17, %rsi
    000000f7: 	xorq	%rsi, %rcx
    000000fa: 	xorq	%rcx, %rax
    000000fd: 	sarq	$0x3, %rax
    00000101: 	movl	%eax, -0x4(%rdx)
    00000104: 	cmpq	%rbp, %rdx
    00000107: 	jne	.Ltmp1692 # Offset: 263
    00000109: 	movd	init_value(%rip), %xmm7
    00000111: 	movq	0x18(%rsp), %r10
    00000116: 	leaq	0xc4(%rsp), %rsi
    0000011e: 	movabsq	$0x5851f42d4c957f2d, %r9
    00000128: 	movabsq	$0x14057b7ef767814f, %r8
    00000132: 	movabsq	$0x20c49ba5e353f7d, %rdi
    0000013c: 	pshufd	$0x0, %xmm7, %xmm3
    00000141: 	pshufd	$0xe0, %xmm7, %xmm0
    00000146: 	movaps	%xmm3, 0xc0(%rsp)
    0000014e: 	movaps	%xmm3, 0xd0(%rsp)
    00000156: 	movaps	%xmm3, 0xe0(%rsp)
    0000015e: 	movaps	%xmm3, 0xf0(%rsp)
    00000166: 	movaps	%xmm3, 0x100(%rsp)
    0000016e: 	movaps	%xmm3, 0x110(%rsp)
    00000176: 	movaps	%xmm3, 0x120(%rsp)
    0000017e: 	movaps	%xmm3, 0x130(%rsp)
    00000186: 	movaps	%xmm3, 0x140(%rsp)
    0000018e: 	movaps	%xmm3, 0x150(%rsp)
    00000196: 	movq	%xmm0, 0x160(%rsp)
.Ltmp1693:
    0000019f: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000001a6: 	movl	(%rsi), %r11d
    000001a9: 	addq	$0x4, %rsi
    000001ad: 	imulq	%r9, %rax
    000001b1: 	addq	%r8, %rax
    000001b4: 	movq	%rax, %rdx
    000001b7: 	movq	%rax, %rcx
    000001ba: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001c1: 	shlq	$0x17, %rcx
    000001c5: 	shrq	$0x14, %rdx
    000001c9: 	xorq	%rcx, %rdx
    000001cc: 	xorq	%rdx, %rax
    000001cf: 	movq	%rax, %rdx
    000001d2: 	movq	%rax, %rcx
    000001d5: 	shrq	$0x6, %rdx
    000001d9: 	movq	%rdx, %rax
    000001dc: 	mulq	%rdi
    000001df: 	movq	%rcx, %rax
    000001e2: 	imulq	$0x1f40, %rdx, %rdx
    000001e9: 	subq	%rdx, %rax
    000001ec: 	leaq	(%r10,%rax,4), %rax
    000001f0: 	movl	(%rax), %edx
    000001f2: 	movl	%edx, -0x4(%rsi)
    000001f5: 	movl	%r11d, (%rax)
    000001f8: 	cmpq	%rbp, %rsi
    000001fb: 	jne	.Ltmp1693 # Offset: 507
    000001fd: 	movq	0x18(%rsp), %rax
    00000202: 	pxor	%xmm1, %xmm1
    00000206: 	pxor	%xmm5, %xmm5
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1694:
    00000210: 	movdqa	%xmm3, %xmm0
    00000214: 	movdqa	%xmm5, %xmm4
    00000218: 	addq	$0x10, %rax
    0000021c: 	pcmpeqd	-0x10(%rax), %xmm0
    00000221: 	pand	DATAat0x19270(%rip), %xmm0
    00000229: 	pcmpgtd	%xmm0, %xmm4
    0000022d: 	movdqa	%xmm0, %xmm2
    00000231: 	punpckldq	%xmm4, %xmm2
    00000235: 	punpckhdq	%xmm4, %xmm0
    00000239: 	paddq	%xmm2, %xmm1
    0000023d: 	paddq	%xmm0, %xmm1
    00000241: 	cmpq	%rax, %rbp
    00000244: 	jne	.Ltmp1694 # Offset: 580
    00000246: 	movdqa	%xmm1, %xmm0
    0000024a: 	leaq	0x60(%rsp), %rax
    0000024f: 	leaq	0x80(%rsp), %rdi
    00000257: 	psrldq	$0x8, %xmm0
    0000025c: 	leaq	DATAat0x191e0(%rip), %rdx
    00000263: 	movq	%rax, %rsi
    00000266: 	movq	%rdi, 0x30(%rsp)
    0000026b: 	paddq	%xmm0, %xmm1
    0000026f: 	movq	%rax, 0x28(%rsp)
    00000274: 	movq	%xmm1, gCount(%rip)
    0000027c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 636
    00000281: 	movl	init_value(%rip), %ebx
    00000287: 	xorl	%r14d, %r14d
    0000028a: 	leaq	0xb0(%rsp), %r15
    00000292: 	callq	clock@PLT # Offset: 658
    00000297: 	movl	iterations(%rip), %edx
    0000029d: 	movd	%ebx, %xmm7
    000002a1: 	movq	%rax, start_time(%rip)
    000002a8: 	pshufd	$0x0, %xmm7, %xmm7
    000002ad: 	movaps	%xmm7, (%rsp)
    000002b1: 	testl	%edx, %edx
    000002b3: 	jle	.Ltmp1695 # Offset: 691
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp1703:
    000002c0: 	movq	0x18(%rsp), %rax
    000002c5: 	pxor	%xmm1, %xmm1
    000002c9: 	pxor	%xmm4, %xmm4
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp1696:
    000002d0: 	movdqa	(%rsp), %xmm0
    000002d5: 	movdqa	%xmm4, %xmm3
    000002d9: 	addq	$0x10, %rax
    000002dd: 	pcmpeqd	-0x10(%rax), %xmm0
    000002e2: 	pand	DATAat0x19270(%rip), %xmm0
    000002ea: 	pcmpgtd	%xmm0, %xmm3
    000002ee: 	movdqa	%xmm0, %xmm2
    000002f2: 	punpckldq	%xmm3, %xmm2
    000002f6: 	punpckhdq	%xmm3, %xmm0
    000002fa: 	paddq	%xmm2, %xmm1
    000002fe: 	paddq	%xmm0, %xmm1
    00000302: 	cmpq	%rax, %rbp
    00000305: 	jne	.Ltmp1696 # Offset: 773
    00000307: 	movq	0x80(%rsp), %r13
    0000030f: 	movdqa	%xmm1, %xmm0
    00000313: 	movq	0x88(%rsp), %r12
    0000031b: 	movq	%r15, 0xa0(%rsp)
    00000323: 	psrldq	$0x8, %xmm0
    00000328: 	movq	%r13, %rax
    0000032b: 	paddq	%xmm0, %xmm1
    0000032f: 	addq	%r12, %rax
    00000332: 	movq	%xmm1, %rbx
    00000337: 	je	.Ltmp1697 # Offset: 823
    00000339: 	testq	%r13, %r13
    0000033c: 	je	.Ltmp1698 # Offset: 828
.Ltmp1697:
    00000342: 	movq	%r12, 0x40(%rsp)
    00000347: 	cmpq	$0xf, %r12
    0000034b: 	ja	.Ltmp1699 # Offset: 843
    00000351: 	cmpq	$0x1, %r12
    00000355: 	jne	.Ltmp1700 # Offset: 853
    0000035b: 	movzbl	(%r13), %eax
    00000360: 	movb	%al, 0xb0(%rsp)
    00000367: 	movq	%r15, %rax
.Ltmp1753:
    0000036a: 	movq	%r12, 0xa8(%rsp)
    00000372: 	movb	$0x0, (%rax,%r12)
    00000377: 	cmpq	gCount(%rip), %rbx
    0000037e: 	je	.Ltmp1701 # Offset: 894
    00000380: 	movq	0xa0(%rsp), %rdx
    00000388: 	leaq	DATAat0x191d0(%rip), %rsi
    0000038f: 	movl	$0x1, %edi
    00000394: 	xorl	%eax, %eax
    00000396: 	callq	__printf_chk@PLT # Offset: 918
.Ltmp1701:
    0000039b: 	movq	0xa0(%rsp), %rdi
    000003a3: 	cmpq	%r15, %rdi
    000003a6: 	je	.Ltmp1702 # Offset: 934
    000003ac: 	movq	0xb0(%rsp), %rax
    000003b4: 	addl	$0x1, %r14d
    000003b8: 	leaq	0x1(%rax), %rsi
    000003bc: 	callq	_ZdlPvm@PLT # Offset: 956
    000003c1: 	cmpl	iterations(%rip), %r14d
    000003c8: 	jl	.Ltmp1703 # Offset: 968
.Ltmp1695:
    000003ce: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000003d5: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000003dc: 	subq	$0x20, %rax
    000003e0: 	cmpq	%rax, %rdi
    000003e3: 	je	.Ltmp1704 # Offset: 995
    000003e9: 	leaq	0x10(%rdi), %rax
    000003ed: 	movq	0x88(%rsp), %rdx
    000003f5: 	movq	%rax, (%rdi)
    000003f8: 	movq	0x80(%rsp), %rsi
    00000400: 	addq	%rsi, %rdx
    00000403: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1027
    00000408: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000040f: 	addq	$0x20, %rax
    00000413: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1765:
    0000041a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000421: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000428: 	je	.Ltmp1705 # Offset: 1064
.Ltmp1764:
    0000042e: 	movq	-0x20(%rax), %r12
    00000432: 	callq	clock@PLT # Offset: 1074
    00000437: 	pxor	%xmm0, %xmm0
    0000043b: 	movq	%rax, end_time(%rip)
    00000442: 	movq	%r12, %rdi
    00000445: 	subq	start_time(%rip), %rax
    0000044c: 	cvtsi2sd	%rax, %xmm0
    00000451: 	divsd	DATAat0x19290(%rip), %xmm0
    00000459: 	callq	_Z13record_resultdPKc # Offset: 1113
    0000045e: 	movq	0x80(%rsp), %rdi
    00000466: 	leaq	0x90(%rsp), %rax
    0000046e: 	movq	%rax, (%rsp)
    00000472: 	cmpq	%rax, %rdi
    00000475: 	je	.Ltmp1706 # Offset: 1141
    00000477: 	movq	0x90(%rsp), %rax
    0000047f: 	leaq	0x1(%rax), %rsi
    00000483: 	callq	_ZdlPvm@PLT # Offset: 1155
.Ltmp1706:
    00000488: 	movq	0x28(%rsp), %rsi
    0000048d: 	movq	0x30(%rsp), %rdi
    00000492: 	leaq	DATAat0x191ec(%rip), %rdx
    00000499: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1177
    0000049e: 	callq	clock@PLT # Offset: 1182
    000004a3: 	xorl	%ebx, %ebx
    000004a5: 	leaq	0xb0(%rsp), %r15
    000004ad: 	movq	%rax, start_time(%rip)
    000004b4: 	movl	iterations(%rip), %eax
    000004ba: 	testl	%eax, %eax
    000004bc: 	jle	.Ltmp1707 # Offset: 1212
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1715:
    000004c8: 	movd	init_value(%rip), %xmm6
    000004d0: 	movq	0x18(%rsp), %rax
    000004d5: 	pxor	%xmm1, %xmm1
    000004d9: 	pxor	%xmm4, %xmm4
    000004dd: 	pshufd	$0x0, %xmm6, %xmm5
    000004e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1708:
    000004e8: 	movdqa	%xmm5, %xmm0
    000004ec: 	movdqa	%xmm4, %xmm3
    000004f0: 	addq	$0x10, %rax
    000004f4: 	pcmpeqd	-0x10(%rax), %xmm0
    000004f9: 	pand	DATAat0x19270(%rip), %xmm0
    00000501: 	pcmpgtd	%xmm0, %xmm3
    00000505: 	movdqa	%xmm0, %xmm2
    00000509: 	punpckldq	%xmm3, %xmm2
    0000050d: 	punpckhdq	%xmm3, %xmm0
    00000511: 	paddq	%xmm2, %xmm1
    00000515: 	paddq	%xmm0, %xmm1
    00000519: 	cmpq	%rbp, %rax
    0000051c: 	jne	.Ltmp1708 # Offset: 1308
    0000051e: 	movq	0x80(%rsp), %r13
    00000526: 	movdqa	%xmm1, %xmm0
    0000052a: 	movq	0x88(%rsp), %r12
    00000532: 	movq	%r15, 0xa0(%rsp)
    0000053a: 	psrldq	$0x8, %xmm0
    0000053f: 	movq	%r13, %rax
    00000542: 	paddq	%xmm0, %xmm1
    00000546: 	addq	%r12, %rax
    00000549: 	movq	%xmm1, %r14
    0000054e: 	je	.Ltmp1709 # Offset: 1358
    00000550: 	testq	%r13, %r13
    00000553: 	je	.Ltmp1710 # Offset: 1363
.Ltmp1709:
    00000559: 	movq	%r12, 0x40(%rsp)
    0000055e: 	cmpq	$0xf, %r12
    00000562: 	ja	.Ltmp1711 # Offset: 1378
    00000568: 	cmpq	$0x1, %r12
    0000056c: 	jne	.Ltmp1712 # Offset: 1388
    00000572: 	movzbl	(%r13), %eax
    00000577: 	movb	%al, 0xb0(%rsp)
    0000057e: 	movq	%r15, %rax
.Ltmp1751:
    00000581: 	movq	%r12, 0xa8(%rsp)
    00000589: 	movb	$0x0, (%rax,%r12)
    0000058e: 	cmpq	gCount(%rip), %r14
    00000595: 	je	.Ltmp1713 # Offset: 1429
    00000597: 	movq	0xa0(%rsp), %rdx
    0000059f: 	leaq	DATAat0x191d0(%rip), %rsi
    000005a6: 	movl	$0x1, %edi
    000005ab: 	xorl	%eax, %eax
    000005ad: 	callq	__printf_chk@PLT # Offset: 1453
.Ltmp1713:
    000005b2: 	movq	0xa0(%rsp), %rdi
    000005ba: 	cmpq	%r15, %rdi
    000005bd: 	je	.Ltmp1714 # Offset: 1469
    000005c3: 	movq	0xb0(%rsp), %rax
    000005cb: 	addl	$0x1, %ebx
    000005ce: 	leaq	0x1(%rax), %rsi
    000005d2: 	callq	_ZdlPvm@PLT # Offset: 1490
    000005d7: 	cmpl	iterations(%rip), %ebx
    000005dd: 	jl	.Ltmp1715 # Offset: 1501
.Ltmp1707:
    000005e3: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000005ea: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000005f1: 	subq	$0x20, %rax
    000005f5: 	cmpq	%rax, %rdi
    000005f8: 	je	.Ltmp1716 # Offset: 1528
    000005fe: 	leaq	0x10(%rdi), %rax
    00000602: 	movq	0x88(%rsp), %rdx
    0000060a: 	movq	%rax, (%rdi)
    0000060d: 	movq	0x80(%rsp), %rsi
    00000615: 	addq	%rsi, %rdx
    00000618: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1560
    0000061d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000624: 	addq	$0x20, %rax
    00000628: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1763:
    0000062f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000636: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000063d: 	je	.Ltmp1717 # Offset: 1597
.Ltmp1762:
    00000643: 	movq	-0x20(%rax), %rbp
    00000647: 	callq	clock@PLT # Offset: 1607
    0000064c: 	pxor	%xmm0, %xmm0
    00000650: 	movq	%rax, end_time(%rip)
    00000657: 	movq	%rbp, %rdi
    0000065a: 	subq	start_time(%rip), %rax
    00000661: 	cvtsi2sd	%rax, %xmm0
    00000666: 	divsd	DATAat0x19290(%rip), %xmm0
    0000066e: 	callq	_Z13record_resultdPKc # Offset: 1646
    00000673: 	movq	0x80(%rsp), %rdi
    0000067b: 	cmpq	(%rsp), %rdi
    0000067f: 	je	.Ltmp1718 # Offset: 1663
    00000681: 	movq	0x90(%rsp), %rax
    00000689: 	leaq	0x1(%rax), %rsi
    0000068d: 	callq	_ZdlPvm@PLT # Offset: 1677
.Ltmp1718:
    00000692: 	movq	0x60(%rsp), %rbp
    00000697: 	movq	0x68(%rsp), %r12
    0000069c: 	leaq	0xb0(%rsp), %r15
    000006a4: 	movq	%r15, 0xa0(%rsp)
    000006ac: 	movq	%rbp, %rax
    000006af: 	addq	%r12, %rax
    000006b2: 	je	.Ltmp1719 # Offset: 1714
    000006b4: 	testq	%rbp, %rbp
    000006b7: 	je	.Ltmp1720 # Offset: 1719
.Ltmp1719:
    000006bd: 	movq	%r12, 0x40(%rsp)
    000006c2: 	cmpq	$0xf, %r12
    000006c6: 	ja	.Ltmp1721 # Offset: 1734
    000006cc: 	cmpq	$0x1, %r12
    000006d0: 	jne	.Ltmp1722 # Offset: 1744
    000006d6: 	movzbl	(%rbp), %eax
    000006da: 	movb	%al, 0xb0(%rsp)
    000006e1: 	movq	%r15, %rax
.Ltmp1755:
    000006e4: 	movq	%r12, 0xa8(%rsp)
    000006ec: 	movb	$0x0, (%rax,%r12)
    000006f1: 	movabsq	$0x3fffffffffffffff, %rax
    000006fb: 	subq	0xa8(%rsp), %rax
    00000703: 	cmpq	$0x6, %rax
    00000707: 	jbe	.Ltmp1723 # Offset: 1799
    0000070d: 	leaq	0xa0(%rsp), %rbp
    00000715: 	movl	$0x7, %edx
    0000071a: 	leaq	DATAat0x191fb(%rip), %rsi
    00000721: 	movq	%rbp, %rdi
    00000724: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1828
    00000729: 	movl	init_value(%rip), %edx
    0000072f: 	movq	0x18(%rsp), %rdi
    00000734: 	movq	%rbp, %r8
    00000737: 	leaq	_Z6count1IjEmPT_iS0_(%rip), %rcx
    0000073e: 	movl	$0x1f40, %esi
    00000743: 	callq	_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1859
    00000748: 	movq	0xa0(%rsp), %rdi
    00000750: 	cmpq	%r15, %rdi
    00000753: 	je	.Ltmp1724 # Offset: 1875
    00000755: 	movq	0xb0(%rsp), %rax
    0000075d: 	leaq	0x1(%rax), %rsi
    00000761: 	callq	_ZdlPvm@PLT # Offset: 1889
.Ltmp1724:
    00000766: 	movq	0x28(%rsp), %rsi
    0000076b: 	leaq	DATAat0x19203(%rip), %rdx
    00000772: 	movq	%rbp, %rdi
    00000775: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1909
    0000077a: 	movl	init_value(%rip), %edx
    00000780: 	movq	0x18(%rsp), %rdi
    00000785: 	movq	%rbp, %r8
    00000788: 	leaq	_Z6count2IjEmPT_iS0_(%rip), %rcx
    0000078f: 	movl	$0x1f40, %esi
    00000794: 	callq	_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1940
    00000799: 	movq	0xa0(%rsp), %rdi
    000007a1: 	cmpq	%r15, %rdi
    000007a4: 	je	.Ltmp1725 # Offset: 1956
    000007a6: 	movq	0xb0(%rsp), %rax
    000007ae: 	leaq	0x1(%rax), %rsi
    000007b2: 	callq	_ZdlPvm@PLT # Offset: 1970
.Ltmp1725:
    000007b7: 	movq	0x60(%rsp), %r13
    000007bc: 	movq	0x68(%rsp), %r12
    000007c1: 	movq	%r15, 0xa0(%rsp)
    000007c9: 	movq	%r13, %rax
    000007cc: 	addq	%r12, %rax
    000007cf: 	je	.Ltmp1726 # Offset: 1999
    000007d1: 	testq	%r13, %r13
    000007d4: 	je	.Ltmp1727 # Offset: 2004
.Ltmp1726:
    000007da: 	movq	%r12, 0x40(%rsp)
    000007df: 	cmpq	$0xf, %r12
    000007e3: 	ja	.Ltmp1728 # Offset: 2019
    000007e9: 	cmpq	$0x1, %r12
    000007ed: 	jne	.Ltmp1729 # Offset: 2029
    000007f3: 	movzbl	(%r13), %eax
    000007f8: 	movb	%al, 0xb0(%rsp)
    000007ff: 	movq	%r15, %rax
.Ltmp1759:
    00000802: 	movq	%r12, 0xa8(%rsp)
    0000080a: 	movb	$0x0, (%rax,%r12)
    0000080f: 	movabsq	$0x3fffffffffffffff, %rax
    00000819: 	subq	0xa8(%rsp), %rax
    00000821: 	cmpq	$0x6, %rax
    00000825: 	jbe	.Ltmp1730 # Offset: 2085
    0000082b: 	movl	$0x7, %edx
    00000830: 	leaq	DATAat0x1920b(%rip), %rsi
    00000837: 	movq	%rbp, %rdi
    0000083a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2106
    0000083f: 	movl	init_value(%rip), %edx
    00000845: 	movq	0x18(%rsp), %rdi
    0000084a: 	movq	%rbp, %r8
    0000084d: 	leaq	_Z6count3IjEmPT_iS0_(%rip), %rcx
    00000854: 	movl	$0x1f40, %esi
    00000859: 	callq	_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2137
    0000085e: 	movq	0xa0(%rsp), %rdi
    00000866: 	cmpq	%r15, %rdi
    00000869: 	je	.Ltmp1731 # Offset: 2153
    0000086b: 	movq	0xb0(%rsp), %rax
    00000873: 	leaq	0x1(%rax), %rsi
    00000877: 	callq	_ZdlPvm@PLT # Offset: 2167
.Ltmp1731:
    0000087c: 	movq	0x28(%rsp), %rsi
    00000881: 	leaq	DATAat0x19213(%rip), %rdx
    00000888: 	movq	%rbp, %rdi
    0000088b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2187
    00000890: 	movl	init_value(%rip), %edx
    00000896: 	movq	0x18(%rsp), %rdi
    0000089b: 	movq	%rbp, %r8
    0000089e: 	leaq	_Z6count4IjEmPT_iS0_(%rip), %rcx
    000008a5: 	movl	$0x1f40, %esi
    000008aa: 	callq	_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2218
    000008af: 	movq	0xa0(%rsp), %rdi
    000008b7: 	cmpq	%r15, %rdi
    000008ba: 	je	.Ltmp1732 # Offset: 2234
    000008bc: 	movq	0xb0(%rsp), %rax
    000008c4: 	leaq	0x1(%rax), %rsi
    000008c8: 	callq	_ZdlPvm@PLT # Offset: 2248
.Ltmp1732:
    000008cd: 	movq	0x60(%rsp), %r13
    000008d2: 	movq	0x68(%rsp), %r12
    000008d7: 	movq	%r15, 0xa0(%rsp)
    000008df: 	movq	%r13, %rax
    000008e2: 	addq	%r12, %rax
    000008e5: 	je	.Ltmp1733 # Offset: 2277
    000008e7: 	testq	%r13, %r13
    000008ea: 	je	.Ltmp1734 # Offset: 2282
.Ltmp1733:
    000008f0: 	movq	%r12, 0x40(%rsp)
    000008f5: 	cmpq	$0xf, %r12
    000008f9: 	ja	.Ltmp1735 # Offset: 2297
    000008ff: 	cmpq	$0x1, %r12
    00000903: 	jne	.Ltmp1736 # Offset: 2307
    00000909: 	movzbl	(%r13), %eax
    0000090e: 	movb	%al, 0xb0(%rsp)
    00000915: 	movq	%r15, %rax
.Ltmp1757:
    00000918: 	movq	%r12, 0xa8(%rsp)
    00000920: 	movb	$0x0, (%rax,%r12)
    00000925: 	movabsq	$0x3fffffffffffffff, %rax
    0000092f: 	subq	0xa8(%rsp), %rax
    00000937: 	cmpq	$0x6, %rax
    0000093b: 	jbe	.Ltmp1737 # Offset: 2363
    00000941: 	movl	$0x7, %edx
    00000946: 	leaq	DATAat0x1921b(%rip), %rsi
    0000094d: 	movq	%rbp, %rdi
    00000950: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2384
    00000955: 	movl	init_value(%rip), %edx
    0000095b: 	movq	0x18(%rsp), %rdi
    00000960: 	movq	%rbp, %r8
    00000963: 	leaq	_Z6count5IjEmPT_iS0_(%rip), %rcx
    0000096a: 	movl	$0x1f40, %esi
    0000096f: 	callq	_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2415
    00000974: 	movq	0xa0(%rsp), %rdi
    0000097c: 	cmpq	%r15, %rdi
    0000097f: 	je	.Ltmp1738 # Offset: 2431
    00000981: 	movq	0xb0(%rsp), %rax
    00000989: 	leaq	0x1(%rax), %rsi
    0000098d: 	callq	_ZdlPvm@PLT # Offset: 2445
.Ltmp1738:
    00000992: 	movq	0x28(%rsp), %rsi
    00000997: 	leaq	DATAat0x19223(%rip), %rdx
    0000099e: 	movq	%rbp, %rdi
    000009a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2465
    000009a6: 	movl	init_value(%rip), %edx
    000009ac: 	movq	0x18(%rsp), %rdi
    000009b1: 	movq	%rbp, %r8
    000009b4: 	leaq	_Z6count6IjEmPT_iS0_(%rip), %rcx
    000009bb: 	movl	$0x1f40, %esi
    000009c0: 	callq	_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2496
    000009c5: 	movq	0xa0(%rsp), %rdi
    000009cd: 	cmpq	%r15, %rdi
    000009d0: 	je	.Ltmp1739 # Offset: 2512
    000009d2: 	movq	0xb0(%rsp), %rax
    000009da: 	leaq	0x1(%rax), %rsi
    000009de: 	callq	_ZdlPvm@PLT # Offset: 2526
.Ltmp1739:
    000009e3: 	movq	0x28(%rsp), %rsi
    000009e8: 	leaq	DATAat0x1922b(%rip), %rdx
    000009ef: 	movq	%rbp, %rdi
    000009f2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2546
    000009f7: 	movl	init_value(%rip), %edx
    000009fd: 	movq	0x18(%rsp), %rdi
    00000a02: 	movq	%rbp, %r8
    00000a05: 	leaq	_Z6count7IjEmPT_iS0_(%rip), %rcx
    00000a0c: 	movl	$0x1f40, %esi
    00000a11: 	callq	_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2577
    00000a16: 	movq	0xa0(%rsp), %rdi
    00000a1e: 	cmpq	%r15, %rdi
    00000a21: 	je	.Ltmp1740 # Offset: 2593
    00000a23: 	movq	0xb0(%rsp), %rax
    00000a2b: 	leaq	0x1(%rax), %rsi
    00000a2f: 	callq	_ZdlPvm@PLT # Offset: 2607
.Ltmp1740:
    00000a34: 	movq	0x28(%rsp), %rsi
    00000a39: 	leaq	DATAat0x19233(%rip), %rdx
    00000a40: 	movq	%rbp, %rdi
    00000a43: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2627
    00000a48: 	movl	init_value(%rip), %edx
    00000a4e: 	movq	0x18(%rsp), %rdi
    00000a53: 	movq	%rbp, %r8
    00000a56: 	leaq	_Z6count8IjEmPT_iS0_(%rip), %rcx
    00000a5d: 	movl	$0x1f40, %esi
    00000a62: 	callq	_Z10test_countIjPFmPjijEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2658
    00000a67: 	movq	0xa0(%rsp), %rdi
    00000a6f: 	cmpq	%r15, %rdi
    00000a72: 	je	.Ltmp1741 # Offset: 2674
    00000a74: 	movq	0xb0(%rsp), %rax
    00000a7c: 	leaq	0x1(%rax), %rsi
    00000a80: 	callq	_ZdlPvm@PLT # Offset: 2688
.Ltmp1741:
    00000a85: 	movq	0x60(%rsp), %r13
    00000a8a: 	movq	0x68(%rsp), %r12
    00000a8f: 	movq	%r15, 0xa0(%rsp)
    00000a97: 	movq	%r13, %rax
    00000a9a: 	addq	%r12, %rax
    00000a9d: 	je	.Ltmp1742 # Offset: 2717
    00000a9f: 	testq	%r13, %r13
    00000aa2: 	je	.Ltmp1743 # Offset: 2722
.Ltmp1742:
    00000aa8: 	movq	%r12, 0x40(%rsp)
    00000aad: 	cmpq	$0xf, %r12
    00000ab1: 	ja	.Ltmp1744 # Offset: 2737
    00000ab7: 	cmpq	$0x1, %r12
    00000abb: 	jne	.Ltmp1745 # Offset: 2747
    00000ac1: 	movzbl	(%r13), %eax
    00000ac6: 	movb	%al, 0xb0(%rsp)
    00000acd: 	movq	%r15, %rax
.Ltmp1761:
    00000ad0: 	movq	%r12, 0xa8(%rsp)
    00000ad8: 	movb	$0x0, (%rax,%r12)
    00000add: 	movabsq	$0x3fffffffffffffff, %rax
    00000ae7: 	subq	0xa8(%rsp), %rax
    00000aef: 	cmpq	$0xe, %rax
    00000af3: 	jbe	.Ltmp1746 # Offset: 2803
    00000af9: 	movl	$0xf, %edx
    00000afe: 	leaq	DATAat0x1923b(%rip), %rsi
    00000b05: 	movq	%rbp, %rdi
    00000b08: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2824
    00000b0d: 	movl	iterations(%rip), %edx
    00000b13: 	xorl	%r8d, %r8d
    00000b16: 	xorl	%ecx, %ecx
    00000b18: 	movl	$0x1f40, %esi
    00000b1d: 	movq	0xa0(%rsp), %rdi
    00000b25: 	callq	_Z9summarizePKciiii # Offset: 2853
    00000b2a: 	movq	0xa0(%rsp), %rdi
    00000b32: 	cmpq	%r15, %rdi
    00000b35: 	je	.Ltmp1747 # Offset: 2869
    00000b37: 	movq	0xb0(%rsp), %rax
    00000b3f: 	leaq	0x1(%rax), %rsi
    00000b43: 	callq	_ZdlPvm@PLT # Offset: 2883
.Ltmp1747:
    00000b48: 	movq	0x60(%rsp), %rdi
    00000b4d: 	cmpq	0x38(%rsp), %rdi
    00000b52: 	je	.Ltmp1748 # Offset: 2898
    00000b54: 	movq	0x70(%rsp), %rax
    00000b59: 	leaq	0x1(%rax), %rsi
    00000b5d: 	callq	_ZdlPvm@PLT # Offset: 2909
.Ltmp1748:
    00000b62: 	movq	0x7dc8(%rsp), %rax
    00000b6a: 	subq	%fs:0x28, %rax
    00000b73: 	jne	.Ltmp1749 # Offset: 2931
    00000b79: 	addq	$0x7dd8, %rsp
    00000b80: 	popq	%rbx
    00000b81: 	popq	%rbp
    00000b82: 	popq	%r12
    00000b84: 	popq	%r13
    00000b86: 	popq	%r14
    00000b88: 	popq	%r15
    00000b8a: 	retq # Offset: 2954
    00000b8b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1702:
    00000b90: 	addl	$0x1, %r14d
    00000b94: 	cmpl	iterations(%rip), %r14d
    00000b9b: 	jl	.Ltmp1703 # Offset: 2971
    00000ba1: 	jmp	.Ltmp1695 # Offset: 2977
    00000ba6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1714:
    00000bb0: 	addl	$0x1, %ebx
    00000bb3: 	cmpl	iterations(%rip), %ebx
    00000bb9: 	jl	.Ltmp1715 # Offset: 3001
    00000bbf: 	jmp	.Ltmp1707 # Offset: 3007
    00000bc4: 	nopl	(%rax) # Size: 4
.Ltmp1712:
    00000bc8: 	testq	%r12, %r12
    00000bcb: 	jne	.Ltmp1750 # Offset: 3019
    00000bd1: 	movq	%r15, %rax
    00000bd4: 	jmp	.Ltmp1751 # Offset: 3028
    00000bd9: 	nopl	(%rax) # Size: 7
.Ltmp1700:
    00000be0: 	testq	%r12, %r12
    00000be3: 	jne	.Ltmp1752 # Offset: 3043
    00000be9: 	movq	%r15, %rax
    00000bec: 	jmp	.Ltmp1753 # Offset: 3052
    00000bf1: 	nopl	(%rax) # Size: 7
.Ltmp1711:
    00000bf8: 	movq	0x20(%rsp), %rsi
    00000bfd: 	leaq	0xa0(%rsp), %rdi
    00000c05: 	xorl	%edx, %edx
    00000c07: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3079
    00000c0c: 	movq	%rax, 0xa0(%rsp)
    00000c14: 	movq	%rax, %rdi
    00000c17: 	movq	0x40(%rsp), %rax
    00000c1c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1770:
    00000c24: 	movq	%r12, %rdx
    00000c27: 	movq	%r13, %rsi
    00000c2a: 	callq	memcpy@PLT # Offset: 3114
    00000c2f: 	movq	0x40(%rsp), %r12
    00000c34: 	movq	0xa0(%rsp), %rax
    00000c3c: 	jmp	.Ltmp1751 # Offset: 3132
    00000c41: 	nopl	(%rax) # Size: 7
.Ltmp1699:
    00000c48: 	movq	0x20(%rsp), %rsi
    00000c4d: 	leaq	0xa0(%rsp), %rdi
    00000c55: 	xorl	%edx, %edx
    00000c57: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3159
    00000c5c: 	movq	%rax, 0xa0(%rsp)
    00000c64: 	movq	%rax, %rdi
    00000c67: 	movq	0x40(%rsp), %rax
    00000c6c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1771:
    00000c74: 	movq	%r12, %rdx
    00000c77: 	movq	%r13, %rsi
    00000c7a: 	callq	memcpy@PLT # Offset: 3194
    00000c7f: 	movq	0x40(%rsp), %r12
    00000c84: 	movq	0xa0(%rsp), %rax
    00000c8c: 	jmp	.Ltmp1753 # Offset: 3212
.Ltmp1722:
    00000c91: 	testq	%r12, %r12
    00000c94: 	jne	.Ltmp1754 # Offset: 3220
    00000c9a: 	movq	%r15, %rax
    00000c9d: 	jmp	.Ltmp1755 # Offset: 3229
.Ltmp1736:
    00000ca2: 	testq	%r12, %r12
    00000ca5: 	jne	.Ltmp1756 # Offset: 3237
    00000cab: 	movq	%r15, %rax
    00000cae: 	jmp	.Ltmp1757 # Offset: 3246
.Ltmp1729:
    00000cb3: 	testq	%r12, %r12
    00000cb6: 	jne	.Ltmp1758 # Offset: 3254
    00000cbc: 	movq	%r15, %rax
    00000cbf: 	jmp	.Ltmp1759 # Offset: 3263
.Ltmp1745:
    00000cc4: 	testq	%r12, %r12
    00000cc7: 	jne	.Ltmp1760 # Offset: 3271
    00000ccd: 	movq	%r15, %rax
    00000cd0: 	jmp	.Ltmp1761 # Offset: 3280
.Ltmp1744:
    00000cd5: 	movq	0x20(%rsp), %rsi
    00000cda: 	xorl	%edx, %edx
    00000cdc: 	movq	%rbp, %rdi
    00000cdf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3295
    00000ce4: 	movq	%rax, 0xa0(%rsp)
    00000cec: 	movq	%rax, %rdi
    00000cef: 	movq	0x40(%rsp), %rax
    00000cf4: 	movq	%rax, 0xb0(%rsp)
.Ltmp1769:
    00000cfc: 	movq	%r12, %rdx
    00000cff: 	movq	%r13, %rsi
    00000d02: 	callq	memcpy@PLT # Offset: 3330
    00000d07: 	movq	0x40(%rsp), %r12
    00000d0c: 	movq	0xa0(%rsp), %rax
    00000d14: 	jmp	.Ltmp1761 # Offset: 3348
.Ltmp1735:
    00000d19: 	movq	0x20(%rsp), %rsi
    00000d1e: 	xorl	%edx, %edx
    00000d20: 	movq	%rbp, %rdi
    00000d23: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3363
    00000d28: 	movq	%rax, 0xa0(%rsp)
    00000d30: 	movq	%rax, %rdi
    00000d33: 	movq	0x40(%rsp), %rax
    00000d38: 	movq	%rax, 0xb0(%rsp)
.Ltmp1767:
    00000d40: 	movq	%r12, %rdx
    00000d43: 	movq	%r13, %rsi
    00000d46: 	callq	memcpy@PLT # Offset: 3398
    00000d4b: 	movq	0x40(%rsp), %r12
    00000d50: 	movq	0xa0(%rsp), %rax
    00000d58: 	jmp	.Ltmp1757 # Offset: 3416
.Ltmp1728:
    00000d5d: 	movq	0x20(%rsp), %rsi
    00000d62: 	xorl	%edx, %edx
    00000d64: 	movq	%rbp, %rdi
    00000d67: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3431
    00000d6c: 	movq	%rax, 0xa0(%rsp)
    00000d74: 	movq	%rax, %rdi
    00000d77: 	movq	0x40(%rsp), %rax
    00000d7c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1768:
    00000d84: 	movq	%r12, %rdx
    00000d87: 	movq	%r13, %rsi
    00000d8a: 	callq	memcpy@PLT # Offset: 3466
    00000d8f: 	movq	0x40(%rsp), %r12
    00000d94: 	movq	0xa0(%rsp), %rax
    00000d9c: 	jmp	.Ltmp1759 # Offset: 3484
.Ltmp1721:
    00000da1: 	movq	0x20(%rsp), %rsi
    00000da6: 	leaq	0xa0(%rsp), %rdi
    00000dae: 	xorl	%edx, %edx
    00000db0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3504
    00000db5: 	movq	%rax, 0xa0(%rsp)
    00000dbd: 	movq	%rax, %rdi
    00000dc0: 	movq	0x40(%rsp), %rax
    00000dc5: 	movq	%rax, 0xb0(%rsp)
.Ltmp1766:
    00000dcd: 	movq	%r12, %rdx
    00000dd0: 	movq	%rbp, %rsi
    00000dd3: 	callq	memcpy@PLT # Offset: 3539
    00000dd8: 	movq	0x40(%rsp), %r12
    00000ddd: 	movq	0xa0(%rsp), %rax
    00000de5: 	jmp	.Ltmp1755 # Offset: 3557
.Ltmp1717:
    00000dea: 	movq	-0x8(%rdx), %rax
    00000dee: 	addq	$0x200, %rax
    00000df4: 	jmp	.Ltmp1762 # Offset: 3572
.Ltmp1716:
    00000df9: 	movq	0x30(%rsp), %rsi
    00000dfe: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000e05: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3589
    00000e0a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e11: 	jmp	.Ltmp1763 # Offset: 3601
.Ltmp1705:
    00000e16: 	movq	-0x8(%rdx), %rax
    00000e1a: 	addq	$0x200, %rax
    00000e20: 	jmp	.Ltmp1764 # Offset: 3616
.Ltmp1704:
    00000e25: 	movq	0x30(%rsp), %rsi
    00000e2a: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000e31: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3633
    00000e36: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e3d: 	jmp	.Ltmp1765 # Offset: 3645
.Ltmp1720:
    00000e42: 	leaq	DATAat0x19008(%rip), %rdi
    00000e49: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3657
.Ltmp1723:
    00000e4e: 	leaq	DATAat0x19184(%rip), %rdi
    00000e55: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3669
.Ltmp1727:
    00000e5a: 	leaq	DATAat0x19008(%rip), %rdi
    00000e61: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3681
.Ltmp1730:
    00000e66: 	leaq	DATAat0x19184(%rip), %rdi
    00000e6d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3693
.Ltmp1734:
    00000e72: 	leaq	DATAat0x19008(%rip), %rdi
    00000e79: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3705
.Ltmp1737:
    00000e7e: 	leaq	DATAat0x19184(%rip), %rdi
    00000e85: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3717
.Ltmp1743:
    00000e8a: 	leaq	DATAat0x19008(%rip), %rdi
    00000e91: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3729
.Ltmp1746:
    00000e96: 	leaq	DATAat0x19184(%rip), %rdi
    00000e9d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3741
.Ltmp1749:
    00000ea2: 	callq	__stack_chk_fail@PLT # Offset: 3746
.Ltmp1754:
    00000ea7: 	movq	%r15, %rdi
    00000eaa: 	jmp	.Ltmp1766 # Offset: 3754
.Ltmp1756:
    00000eaf: 	movq	%r15, %rdi
    00000eb2: 	jmp	.Ltmp1767 # Offset: 3762
.Ltmp1758:
    00000eb7: 	movq	%r15, %rdi
    00000eba: 	jmp	.Ltmp1768 # Offset: 3770
.Ltmp1760:
    00000ebf: 	movq	%r15, %rdi
    00000ec2: 	jmp	.Ltmp1769 # Offset: 3778
.Ltmp1750:
    00000ec7: 	movq	%r15, %rdi
    00000eca: 	jmp	.Ltmp1770 # Offset: 3786
.Ltmp1710:
    00000ecf: 	leaq	DATAat0x19008(%rip), %rdi
    00000ed6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3798
.Ltmp1698:
    00000edb: 	leaq	DATAat0x19008(%rip), %rdi
    00000ee2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3810
.Ltmp1752:
    00000ee7: 	movq	%r15, %rdi
    00000eea: 	jmp	.Ltmp1771 # Offset: 3818
    00000eef: 	endbr64
.Ltmp1773:
    00000ef3: 	movq	%rax, %rbp
    00000ef6: 	jmp	.Ltmp1772 # Offset: 3830
    00000efb: 	endbr64
    00000eff: 	jmp	.Ltmp1773 # Offset: 3839
    00000f01: 	endbr64
    00000f05: 	jmp	.Ltmp1773 # Offset: 3845
    00000f07: 	endbr64
    00000f0b: 	movq	%rax, %rbp
    00000f0e: 	jmp	.Ltmp1774 # Offset: 3854
    00000f10: 	endbr64
    00000f14: 	movq	%rax, %rbp
    00000f17: 	jmp	.Ltmp1775 # Offset: 3863
.Ltmp1774:
    00000f19: 	movq	0xa0(%rsp), %rdi
    00000f21: 	cmpq	%r15, %rdi
    00000f24: 	je	.Ltmp1776 # Offset: 3876
    00000f26: 	movq	0xb0(%rsp), %rax
    00000f2e: 	leaq	0x1(%rax), %rsi
    00000f32: 	callq	_ZdlPvm@PLT # Offset: 3890
.Ltmp1776:
    00000f37: 	movq	0x80(%rsp), %rdi
    00000f3f: 	cmpq	(%rsp), %rdi
    00000f43: 	je	.Ltmp1777 # Offset: 3907
.Ltmp1780:
    00000f45: 	movq	0x90(%rsp), %rax
    00000f4d: 	leaq	0x1(%rax), %rsi
    00000f51: 	callq	_ZdlPvm@PLT # Offset: 3921
.Ltmp1777:
    00000f56: 	movq	0x60(%rsp), %rdi
    00000f5b: 	cmpq	0x38(%rsp), %rdi
    00000f60: 	je	.Ltmp1778 # Offset: 3936
    00000f62: 	movq	0x70(%rsp), %rax
    00000f67: 	leaq	0x1(%rax), %rsi
    00000f6b: 	callq	_ZdlPvm@PLT # Offset: 3947
.Ltmp1778:
    00000f70: 	movq	%rbp, %rdi
    00000f73: 	callq	_Unwind_Resume@PLT # Offset: 3955
.Ltmp1775:
    00000f78: 	movq	0xa0(%rsp), %rdi
    00000f80: 	cmpq	%r15, %rdi
    00000f83: 	je	.Ltmp1779 # Offset: 3971
    00000f85: 	movq	0xb0(%rsp), %rax
    00000f8d: 	leaq	0x1(%rax), %rsi
    00000f91: 	callq	_ZdlPvm@PLT # Offset: 3985
.Ltmp1779:
    00000f96: 	movq	0x80(%rsp), %rdi
    00000f9e: 	leaq	0x90(%rsp), %rax
    00000fa6: 	cmpq	%rax, %rdi
    00000fa9: 	jne	.Ltmp1780 # Offset: 4009
    00000fab: 	jmp	.Ltmp1777 # Offset: 4011
    00000fad: 	endbr64
    00000fb1: 	jmp	.Ltmp1773 # Offset: 4017
    00000fb6: 	endbr64
    00000fba: 	jmp	.Ltmp1773 # Offset: 4026
    00000fbf: 	endbr64
    00000fc3: 	movq	%rax, %rbp
    00000fc6: 	jmp	.Ltmp1779 # Offset: 4038
    00000fc8: 	endbr64
    00000fcc: 	movq	%rax, %rbp
    00000fcf: 	jmp	.Ltmp1776 # Offset: 4047
    00000fd4: 	endbr64
    00000fd8: 	jmp	.Ltmp1773 # Offset: 4056
    00000fdd: 	endbr64
    00000fe1: 	movq	%rax, %rbp
    00000fe4: 	jmp	.Ltmp1777 # Offset: 4068
    00000fe9: 	endbr64
    00000fed: 	jmp	.Ltmp1773 # Offset: 4077
.Ltmp1772:
    00000ff2: 	movq	0xa0(%rsp), %rdi
    00000ffa: 	cmpq	%r15, %rdi
    00000ffd: 	je	.Ltmp1777 # Offset: 4093
    00001003: 	movq	0xb0(%rsp), %rax
    0000100b: 	leaq	0x1(%rax), %rsi
    0000100f: 	callq	_ZdlPvm@PLT # Offset: 4111
    00001014: 	jmp	.Ltmp1777 # Offset: 4116
    00001019: 	endbr64
    0000101d: 	jmp	.Ltmp1773 # Offset: 4125
    00001022: 	endbr64
    00001026: 	jmp	.Ltmp1773 # Offset: 4134
    0000102b: 	endbr64
    0000102f: 	jmp	.Ltmp1773 # Offset: 4143
    00001034: 	endbr64
    00001038: 	jmp	.Ltmp1773 # Offset: 4152
    0000103d: 	endbr64
    00001041: 	jmp	.Ltmp1773 # Offset: 4161
    00001046: 	endbr64
    0000104a: 	jmp	.Ltmp1773 # Offset: 4170
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIjEvv"

Binary Function "_Z11TestOneTypeIhEvv" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0x150b0
  Size        : 0x1239
  MaxSize     : 0x1240
  Offset      : 0x150b0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIhEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x18, %rsp
    0000002a: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm6
    00000032: 	movl	$0x5f38, %ecx
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x2008(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	movaps	%xmm6, 0x40(%rsp)
    0000004f: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm6
    00000057: 	leaq	0x70(%rsp), %rax
    0000005c: 	leaq	0x40(%rsp), %rdi
    00000061: 	movq	%rax, 0x38(%rsp)
    00000066: 	leaq	0x2000(%rsp), %rbp
    0000006e: 	movq	%rax, 0x60(%rsp)
    00000073: 	movw	%cx, 0x74(%rsp)
    00000078: 	movq	%rdi, 0x20(%rsp)
    0000007d: 	movaps	%xmm6, 0x50(%rsp)
    00000082: 	movl	$0x746e6975, 0x70(%rsp)
    0000008a: 	movb	$0x74, 0x76(%rsp)
    0000008f: 	movq	$0x7, 0x68(%rsp)
    00000098: 	movb	$0x0, 0x77(%rsp)
    0000009d: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 157
    000000a2: 	movl	init_value(%rip), %eax
    000000a8: 	leal	0x7b(%rax), %edi
    000000ab: 	callq	srand@PLT # Offset: 171
    000000b0: 	leaq	0xc0(%rsp), %rax
    000000b8: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000c2: 	movabsq	$0x14057b7ef767814f, %rdi
    000000cc: 	movq	%rax, 0x18(%rsp)
    000000d1: 	movq	%rax, %rdx
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1781:
    000000d8: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000df: 	addq	$0x1, %rdx
    000000e3: 	imulq	%r8, %rax
    000000e7: 	addq	%rdi, %rax
    000000ea: 	movq	%rax, %rcx
    000000ed: 	movq	%rax, %rsi
    000000f0: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000f7: 	shrq	$0x14, %rcx
    000000fb: 	shlq	$0x17, %rsi
    000000ff: 	xorq	%rsi, %rcx
    00000102: 	xorq	%rcx, %rax
    00000105: 	sarq	$0x3, %rax
    00000109: 	movb	%al, -0x1(%rdx)
    0000010c: 	cmpq	%rbp, %rdx
    0000010f: 	jne	.Ltmp1781 # Offset: 271
    00000111: 	movl	init_value(%rip), %edi
    00000117: 	movq	0x18(%rsp), %r11
    0000011c: 	movabsq	$0x101010101010101, %rsi
    00000126: 	movabsq	$0x5851f42d4c957f2d, %r10
    00000130: 	movzbl	%dil, %ecx
    00000134: 	movq	%rcx, %rax
    00000137: 	movq	%rcx, %r8
    0000013a: 	mulq	%rsi
    0000013d: 	imulq	%rsi, %r8
    00000141: 	movq	%rax, (%r11)
    00000144: 	movq	%rcx, %rax
    00000147: 	leaq	(%r8,%rdx), %r9
    0000014b: 	movq	%r8, 0x20(%r11)
    0000014f: 	movabsq	$0x20c49ba5e353f7d, %r8
    00000159: 	mulq	%rsi
    0000015c: 	movzbl	%dil, %edx
    00000160: 	movq	%r9, 0x8(%r11)
    00000164: 	leaq	0xc1(%rsp), %rsi
    0000016c: 	movq	%r9, 0x18(%r11)
    00000170: 	movabsq	$0x14057b7ef767814f, %r9
    0000017a: 	movq	%rax, 0x10(%r11)
    0000017e: 	movl	%edi, %eax
    00000180: 	shll	$0x8, %eax
    00000183: 	addl	%edx, %eax
    00000185: 	movw	%ax, 0x28(%r11)
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1782:
    00000190: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000197: 	movzbl	(%rsi), %ebx
    0000019a: 	addq	$0x1, %rsi
    0000019e: 	imulq	%r10, %rax
    000001a2: 	addq	%r9, %rax
    000001a5: 	movq	%rax, %rdx
    000001a8: 	movq	%rax, %rcx
    000001ab: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001b2: 	shlq	$0x17, %rcx
    000001b6: 	shrq	$0x14, %rdx
    000001ba: 	xorq	%rcx, %rdx
    000001bd: 	xorq	%rdx, %rax
    000001c0: 	movq	%rax, %rdx
    000001c3: 	movq	%rax, %rcx
    000001c6: 	shrq	$0x6, %rdx
    000001ca: 	movq	%rdx, %rax
    000001cd: 	mulq	%r8
    000001d0: 	movq	%rcx, %rax
    000001d3: 	imulq	$0x1f40, %rdx, %rdx
    000001da: 	subq	%rdx, %rax
    000001dd: 	addq	%r11, %rax
    000001e0: 	movzbl	(%rax), %edx
    000001e3: 	movb	%dl, -0x1(%rsi)
    000001e6: 	movb	%bl, (%rax)
    000001e8: 	cmpq	%rbp, %rsi
    000001eb: 	jne	.Ltmp1782 # Offset: 491
    000001ed: 	movd	%edi, %xmm5
    000001f1: 	movq	0x18(%rsp), %rax
    000001f6: 	pxor	%xmm0, %xmm0
    000001fa: 	pxor	%xmm7, %xmm7
    000001fe: 	punpcklbw	%xmm5, %xmm5
    00000202: 	pxor	%xmm6, %xmm6
    00000206: 	pxor	%xmm4, %xmm4
    0000020a: 	punpcklwd	%xmm5, %xmm5
    0000020e: 	pshufd	$0x0, %xmm5, %xmm5
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1783:
    00000218: 	movdqa	%xmm5, %xmm2
    0000021c: 	movdqa	%xmm7, %xmm1
    00000220: 	movdqa	%xmm4, %xmm10
    00000225: 	addq	$0x10, %rax
    00000229: 	pcmpeqb	-0x10(%rax), %xmm2
    0000022e: 	pand	DATAat0x19250(%rip), %xmm2
    00000236: 	pcmpgtb	%xmm2, %xmm1
    0000023a: 	movdqa	%xmm2, %xmm3
    0000023e: 	punpcklbw	%xmm1, %xmm3
    00000242: 	punpckhbw	%xmm1, %xmm2
    00000246: 	movdqa	%xmm6, %xmm1
    0000024a: 	pcmpgtw	%xmm3, %xmm1
    0000024e: 	movdqa	%xmm3, %xmm9
    00000253: 	movdqa	%xmm2, %xmm8
    00000258: 	punpcklwd	%xmm1, %xmm9
    0000025d: 	punpckhwd	%xmm1, %xmm3
    00000261: 	movdqa	%xmm6, %xmm1
    00000265: 	pcmpgtw	%xmm2, %xmm1
    00000269: 	pcmpgtd	%xmm9, %xmm10
    0000026e: 	punpcklwd	%xmm1, %xmm8
    00000273: 	punpckhwd	%xmm1, %xmm2
    00000277: 	movdqa	%xmm9, %xmm1
    0000027c: 	punpckldq	%xmm10, %xmm1
    00000281: 	punpckhdq	%xmm10, %xmm9
    00000286: 	paddq	%xmm1, %xmm0
    0000028a: 	movdqa	%xmm4, %xmm1
    0000028e: 	pcmpgtd	%xmm3, %xmm1
    00000292: 	paddq	%xmm9, %xmm0
    00000297: 	movdqa	%xmm3, %xmm9
    0000029c: 	punpckldq	%xmm1, %xmm9
    000002a1: 	punpckhdq	%xmm1, %xmm3
    000002a5: 	movdqa	%xmm8, %xmm1
    000002aa: 	paddq	%xmm9, %xmm0
    000002af: 	paddq	%xmm3, %xmm0
    000002b3: 	movdqa	%xmm4, %xmm3
    000002b7: 	pcmpgtd	%xmm8, %xmm3
    000002bc: 	punpckldq	%xmm3, %xmm1
    000002c0: 	paddq	%xmm1, %xmm0
    000002c4: 	movdqa	%xmm8, %xmm1
    000002c9: 	punpckhdq	%xmm3, %xmm1
    000002cd: 	movdqa	%xmm2, %xmm3
    000002d1: 	paddq	%xmm1, %xmm0
    000002d5: 	movdqa	%xmm4, %xmm1
    000002d9: 	pcmpgtd	%xmm2, %xmm1
    000002dd: 	punpckldq	%xmm1, %xmm3
    000002e1: 	punpckhdq	%xmm1, %xmm2
    000002e5: 	paddq	%xmm3, %xmm0
    000002e9: 	paddq	%xmm2, %xmm0
    000002ed: 	cmpq	%rax, %rbp
    000002f0: 	jne	.Ltmp1783 # Offset: 752
    000002f6: 	movq	0x60(%rsp), %r13
    000002fb: 	movdqa	%xmm0, %xmm1
    000002ff: 	movq	0x68(%rsp), %r12
    00000304: 	leaq	0x90(%rsp), %rax
    0000030c: 	movq	%rax, 0x28(%rsp)
    00000311: 	psrldq	$0x8, %xmm1
    00000316: 	movq	%rax, 0x80(%rsp)
    0000031e: 	movq	%r13, %rax
    00000321: 	paddq	%xmm1, %xmm0
    00000325: 	movq	%xmm0, gCount(%rip)
    0000032d: 	addq	%r12, %rax
    00000330: 	je	.Ltmp1784 # Offset: 816
    00000332: 	testq	%r13, %r13
    00000335: 	je	.Ltmp1785 # Offset: 821
.Ltmp1784:
    0000033b: 	movq	%r12, 0x40(%rsp)
    00000340: 	cmpq	$0xf, %r12
    00000344: 	ja	.Ltmp1786 # Offset: 836
    0000034a: 	cmpq	$0x1, %r12
    0000034e: 	jne	.Ltmp1787 # Offset: 846
    00000354: 	movzbl	(%r13), %eax
    00000359: 	movb	%al, 0x90(%rsp)
    00000360: 	movq	0x28(%rsp), %rax
.Ltmp1840:
    00000365: 	movq	%r12, 0x88(%rsp)
    0000036d: 	movb	$0x0, (%rax,%r12)
    00000372: 	movabsq	$0x3fffffffffffffff, %rax
    0000037c: 	subq	0x88(%rsp), %rax
    00000384: 	cmpq	$0xa, %rax
    00000388: 	jbe	.Ltmp1788 # Offset: 904
    0000038e: 	leaq	0x80(%rsp), %rax
    00000396: 	movl	$0xb, %edx
    0000039b: 	leaq	DATAat0x191e0(%rip), %rsi
    000003a2: 	movq	%rax, %rdi
    000003a5: 	movq	%rax, 0x30(%rsp)
    000003aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 938
    000003af: 	movzbl	init_value(%rip), %ebx
    000003b6: 	xorl	%r15d, %r15d
    000003b9: 	leaq	0xb0(%rsp), %r13
    000003c1: 	callq	clock@PLT # Offset: 961
    000003c6: 	movl	iterations(%rip), %edx
    000003cc: 	movq	%rax, start_time(%rip)
    000003d3: 	testl	%edx, %edx
    000003d5: 	jle	.Ltmp1789 # Offset: 981
    000003db: 	movd	%ebx, %xmm0
    000003df: 	punpcklbw	%xmm0, %xmm0
    000003e3: 	punpcklwd	%xmm0, %xmm0
    000003e7: 	pshufd	$0x0, %xmm0, %xmm6
    000003ec: 	movaps	%xmm6, (%rsp)
.Ltmp1797:
    000003f0: 	movq	0x18(%rsp), %rax
    000003f5: 	pxor	%xmm0, %xmm0
    000003f9: 	pxor	%xmm6, %xmm6
    000003fd: 	pxor	%xmm5, %xmm5
    00000401: 	pxor	%xmm4, %xmm4
    00000405: 	nopl	(%rax) # Size: 3
.Ltmp1790:
    00000408: 	movdqa	(%rsp), %xmm2
    0000040d: 	movdqa	%xmm6, %xmm1
    00000411: 	movdqa	%xmm4, %xmm9
    00000416: 	addq	$0x10, %rax
    0000041a: 	pcmpeqb	-0x10(%rax), %xmm2
    0000041f: 	pand	DATAat0x19250(%rip), %xmm2
    00000427: 	pcmpgtb	%xmm2, %xmm1
    0000042b: 	movdqa	%xmm2, %xmm3
    0000042f: 	punpcklbw	%xmm1, %xmm3
    00000433: 	punpckhbw	%xmm1, %xmm2
    00000437: 	movdqa	%xmm5, %xmm1
    0000043b: 	pcmpgtw	%xmm3, %xmm1
    0000043f: 	movdqa	%xmm3, %xmm8
    00000444: 	movdqa	%xmm2, %xmm7
    00000448: 	punpcklwd	%xmm1, %xmm8
    0000044d: 	punpckhwd	%xmm1, %xmm3
    00000451: 	movdqa	%xmm5, %xmm1
    00000455: 	pcmpgtw	%xmm2, %xmm1
    00000459: 	pcmpgtd	%xmm8, %xmm9
    0000045e: 	punpcklwd	%xmm1, %xmm7
    00000462: 	punpckhwd	%xmm1, %xmm2
    00000466: 	movdqa	%xmm8, %xmm1
    0000046b: 	punpckldq	%xmm9, %xmm1
    00000470: 	punpckhdq	%xmm9, %xmm8
    00000475: 	paddq	%xmm1, %xmm0
    00000479: 	movdqa	%xmm4, %xmm1
    0000047d: 	pcmpgtd	%xmm3, %xmm1
    00000481: 	paddq	%xmm8, %xmm0
    00000486: 	movdqa	%xmm3, %xmm8
    0000048b: 	punpckldq	%xmm1, %xmm8
    00000490: 	punpckhdq	%xmm1, %xmm3
    00000494: 	movdqa	%xmm7, %xmm1
    00000498: 	paddq	%xmm8, %xmm0
    0000049d: 	paddq	%xmm3, %xmm0
    000004a1: 	movdqa	%xmm4, %xmm3
    000004a5: 	pcmpgtd	%xmm7, %xmm3
    000004a9: 	punpckldq	%xmm3, %xmm1
    000004ad: 	paddq	%xmm1, %xmm0
    000004b1: 	movdqa	%xmm7, %xmm1
    000004b5: 	punpckhdq	%xmm3, %xmm1
    000004b9: 	movdqa	%xmm2, %xmm3
    000004bd: 	paddq	%xmm1, %xmm0
    000004c1: 	movdqa	%xmm4, %xmm1
    000004c5: 	pcmpgtd	%xmm2, %xmm1
    000004c9: 	punpckldq	%xmm1, %xmm3
    000004cd: 	punpckhdq	%xmm1, %xmm2
    000004d1: 	paddq	%xmm3, %xmm0
    000004d5: 	paddq	%xmm2, %xmm0
    000004d9: 	cmpq	%rax, %rbp
    000004dc: 	jne	.Ltmp1790 # Offset: 1244
    000004e2: 	movq	0x80(%rsp), %r14
    000004ea: 	movdqa	%xmm0, %xmm1
    000004ee: 	movq	0x88(%rsp), %r12
    000004f6: 	movq	%r13, 0xa0(%rsp)
    000004fe: 	psrldq	$0x8, %xmm1
    00000503: 	movq	%r14, %rax
    00000506: 	paddq	%xmm1, %xmm0
    0000050a: 	addq	%r12, %rax
    0000050d: 	movq	%xmm0, %rbx
    00000512: 	je	.Ltmp1791 # Offset: 1298
    00000514: 	testq	%r14, %r14
    00000517: 	je	.Ltmp1792 # Offset: 1303
.Ltmp1791:
    0000051d: 	movq	%r12, 0x40(%rsp)
    00000522: 	cmpq	$0xf, %r12
    00000526: 	ja	.Ltmp1793 # Offset: 1318
    0000052c: 	cmpq	$0x1, %r12
    00000530: 	jne	.Ltmp1794 # Offset: 1328
    00000536: 	movzbl	(%r14), %eax
    0000053a: 	movb	%al, 0xb0(%rsp)
    00000541: 	movq	%r13, %rax
.Ltmp1844:
    00000544: 	movq	%r12, 0xa8(%rsp)
    0000054c: 	movb	$0x0, (%rax,%r12)
    00000551: 	cmpq	gCount(%rip), %rbx
    00000558: 	je	.Ltmp1795 # Offset: 1368
    0000055a: 	movq	0xa0(%rsp), %rdx
    00000562: 	leaq	DATAat0x191d0(%rip), %rsi
    00000569: 	movl	$0x1, %edi
    0000056e: 	xorl	%eax, %eax
    00000570: 	callq	__printf_chk@PLT # Offset: 1392
.Ltmp1795:
    00000575: 	movq	0xa0(%rsp), %rdi
    0000057d: 	cmpq	%r13, %rdi
    00000580: 	je	.Ltmp1796 # Offset: 1408
    00000586: 	movq	0xb0(%rsp), %rax
    0000058e: 	addl	$0x1, %r15d
    00000592: 	leaq	0x1(%rax), %rsi
    00000596: 	callq	_ZdlPvm@PLT # Offset: 1430
    0000059b: 	cmpl	iterations(%rip), %r15d
    000005a2: 	jl	.Ltmp1797 # Offset: 1442
.Ltmp1789:
    000005a8: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000005af: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000005b6: 	subq	$0x20, %rax
    000005ba: 	cmpq	%rax, %rdi
    000005bd: 	je	.Ltmp1798 # Offset: 1469
    000005c3: 	leaq	0x10(%rdi), %rax
    000005c7: 	movq	0x88(%rsp), %rdx
    000005cf: 	movq	%rax, (%rdi)
    000005d2: 	movq	0x80(%rsp), %rsi
    000005da: 	addq	%rsi, %rdx
    000005dd: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1501
    000005e2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000005e9: 	addq	$0x20, %rax
    000005ed: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1854:
    000005f4: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000005fb: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000602: 	je	.Ltmp1799 # Offset: 1538
.Ltmp1853:
    00000608: 	movq	-0x20(%rax), %r12
    0000060c: 	callq	clock@PLT # Offset: 1548
    00000611: 	pxor	%xmm0, %xmm0
    00000615: 	movq	%rax, end_time(%rip)
    0000061c: 	movq	%r12, %rdi
    0000061f: 	subq	start_time(%rip), %rax
    00000626: 	cvtsi2sd	%rax, %xmm0
    0000062b: 	divsd	DATAat0x19290(%rip), %xmm0
    00000633: 	callq	_Z13record_resultdPKc # Offset: 1587
    00000638: 	movq	0x80(%rsp), %rdi
    00000640: 	cmpq	0x28(%rsp), %rdi
    00000645: 	je	.Ltmp1800 # Offset: 1605
    00000647: 	movq	0x90(%rsp), %rax
    0000064f: 	leaq	0x1(%rax), %rsi
    00000653: 	callq	_ZdlPvm@PLT # Offset: 1619
.Ltmp1800:
    00000658: 	movq	0x28(%rsp), %rax
    0000065d: 	movq	0x60(%rsp), %r13
    00000662: 	movq	0x68(%rsp), %r12
    00000667: 	movq	%rax, 0x80(%rsp)
    0000066f: 	movq	%r13, %rax
    00000672: 	addq	%r12, %rax
    00000675: 	je	.Ltmp1801 # Offset: 1653
    00000677: 	testq	%r13, %r13
    0000067a: 	je	.Ltmp1802 # Offset: 1658
.Ltmp1801:
    00000680: 	movq	%r12, 0x40(%rsp)
    00000685: 	cmpq	$0xf, %r12
    00000689: 	ja	.Ltmp1803 # Offset: 1673
    0000068f: 	cmpq	$0x1, %r12
    00000693: 	jne	.Ltmp1804 # Offset: 1683
    00000699: 	movzbl	(%r13), %eax
    0000069e: 	movb	%al, 0x90(%rsp)
    000006a5: 	movq	0x28(%rsp), %rax
.Ltmp1850:
    000006aa: 	movq	%r12, 0x88(%rsp)
    000006b2: 	movb	$0x0, (%rax,%r12)
    000006b7: 	movabsq	$0x3fffffffffffffff, %rax
    000006c1: 	subq	0x88(%rsp), %rax
    000006c9: 	cmpq	$0xd, %rax
    000006cd: 	jbe	.Ltmp1805 # Offset: 1741
    000006d3: 	movq	0x30(%rsp), %rdi
    000006d8: 	movl	$0xe, %edx
    000006dd: 	leaq	DATAat0x191ec(%rip), %rsi
    000006e4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1764
    000006e9: 	callq	clock@PLT # Offset: 1769
    000006ee: 	xorl	%ebx, %ebx
    000006f0: 	leaq	0xb0(%rsp), %r13
    000006f8: 	movq	%rax, start_time(%rip)
    000006ff: 	movl	iterations(%rip), %eax
    00000705: 	testl	%eax, %eax
    00000707: 	jle	.Ltmp1806 # Offset: 1799
    0000070d: 	nopl	(%rax) # Size: 3
.Ltmp1814:
    00000710: 	movd	init_value(%rip), %xmm5
    00000718: 	movq	0x18(%rsp), %rax
    0000071d: 	pxor	%xmm0, %xmm0
    00000721: 	pxor	%xmm7, %xmm7
    00000725: 	punpcklbw	%xmm5, %xmm5
    00000729: 	pxor	%xmm6, %xmm6
    0000072d: 	pxor	%xmm4, %xmm4
    00000731: 	punpcklwd	%xmm5, %xmm5
    00000735: 	pshufd	$0x0, %xmm5, %xmm5
    0000073a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1807:
    00000740: 	movdqa	%xmm5, %xmm2
    00000744: 	movdqa	%xmm7, %xmm1
    00000748: 	movdqa	%xmm4, %xmm10
    0000074d: 	addq	$0x10, %rax
    00000751: 	pcmpeqb	-0x10(%rax), %xmm2
    00000756: 	pand	DATAat0x19250(%rip), %xmm2
    0000075e: 	pcmpgtb	%xmm2, %xmm1
    00000762: 	movdqa	%xmm2, %xmm3
    00000766: 	punpcklbw	%xmm1, %xmm3
    0000076a: 	punpckhbw	%xmm1, %xmm2
    0000076e: 	movdqa	%xmm6, %xmm1
    00000772: 	pcmpgtw	%xmm3, %xmm1
    00000776: 	movdqa	%xmm3, %xmm9
    0000077b: 	movdqa	%xmm2, %xmm8
    00000780: 	punpcklwd	%xmm1, %xmm9
    00000785: 	punpckhwd	%xmm1, %xmm3
    00000789: 	movdqa	%xmm6, %xmm1
    0000078d: 	pcmpgtw	%xmm2, %xmm1
    00000791: 	pcmpgtd	%xmm9, %xmm10
    00000796: 	punpcklwd	%xmm1, %xmm8
    0000079b: 	punpckhwd	%xmm1, %xmm2
    0000079f: 	movdqa	%xmm9, %xmm1
    000007a4: 	punpckldq	%xmm10, %xmm1
    000007a9: 	punpckhdq	%xmm10, %xmm9
    000007ae: 	paddq	%xmm1, %xmm0
    000007b2: 	movdqa	%xmm4, %xmm1
    000007b6: 	pcmpgtd	%xmm3, %xmm1
    000007ba: 	paddq	%xmm9, %xmm0
    000007bf: 	movdqa	%xmm3, %xmm9
    000007c4: 	punpckldq	%xmm1, %xmm9
    000007c9: 	punpckhdq	%xmm1, %xmm3
    000007cd: 	movdqa	%xmm8, %xmm1
    000007d2: 	paddq	%xmm9, %xmm0
    000007d7: 	paddq	%xmm3, %xmm0
    000007db: 	movdqa	%xmm4, %xmm3
    000007df: 	pcmpgtd	%xmm8, %xmm3
    000007e4: 	punpckldq	%xmm3, %xmm1
    000007e8: 	paddq	%xmm1, %xmm0
    000007ec: 	movdqa	%xmm8, %xmm1
    000007f1: 	punpckhdq	%xmm3, %xmm1
    000007f5: 	movdqa	%xmm2, %xmm3
    000007f9: 	paddq	%xmm1, %xmm0
    000007fd: 	movdqa	%xmm4, %xmm1
    00000801: 	pcmpgtd	%xmm2, %xmm1
    00000805: 	punpckldq	%xmm1, %xmm3
    00000809: 	punpckhdq	%xmm1, %xmm2
    0000080d: 	paddq	%xmm3, %xmm0
    00000811: 	paddq	%xmm2, %xmm0
    00000815: 	cmpq	%rax, %rbp
    00000818: 	jne	.Ltmp1807 # Offset: 2072
    0000081e: 	movq	0x80(%rsp), %r14
    00000826: 	movdqa	%xmm0, %xmm1
    0000082a: 	movq	0x88(%rsp), %r12
    00000832: 	movq	%r13, 0xa0(%rsp)
    0000083a: 	psrldq	$0x8, %xmm1
    0000083f: 	movq	%r14, %rax
    00000842: 	paddq	%xmm1, %xmm0
    00000846: 	addq	%r12, %rax
    00000849: 	movq	%xmm0, %r15
    0000084e: 	je	.Ltmp1808 # Offset: 2126
    00000850: 	testq	%r14, %r14
    00000853: 	je	.Ltmp1809 # Offset: 2131
.Ltmp1808:
    00000859: 	movq	%r12, 0x40(%rsp)
    0000085e: 	cmpq	$0xf, %r12
    00000862: 	ja	.Ltmp1810 # Offset: 2146
    00000868: 	cmpq	$0x1, %r12
    0000086c: 	jne	.Ltmp1811 # Offset: 2156
    00000872: 	movzbl	(%r14), %eax
    00000876: 	movb	%al, 0xb0(%rsp)
    0000087d: 	movq	%r13, %rax
.Ltmp1842:
    00000880: 	movq	%r12, 0xa8(%rsp)
    00000888: 	movb	$0x0, (%rax,%r12)
    0000088d: 	cmpq	gCount(%rip), %r15
    00000894: 	je	.Ltmp1812 # Offset: 2196
    00000896: 	movq	0xa0(%rsp), %rdx
    0000089e: 	leaq	DATAat0x191d0(%rip), %rsi
    000008a5: 	movl	$0x1, %edi
    000008aa: 	xorl	%eax, %eax
    000008ac: 	callq	__printf_chk@PLT # Offset: 2220
.Ltmp1812:
    000008b1: 	movq	0xa0(%rsp), %rdi
    000008b9: 	cmpq	%r13, %rdi
    000008bc: 	je	.Ltmp1813 # Offset: 2236
    000008c2: 	movq	0xb0(%rsp), %rax
    000008ca: 	addl	$0x1, %ebx
    000008cd: 	leaq	0x1(%rax), %rsi
    000008d1: 	callq	_ZdlPvm@PLT # Offset: 2257
    000008d6: 	cmpl	iterations(%rip), %ebx
    000008dc: 	jl	.Ltmp1814 # Offset: 2268
.Ltmp1806:
    000008e2: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000008e9: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000008f0: 	subq	$0x20, %rax
    000008f4: 	cmpq	%rax, %rdi
    000008f7: 	je	.Ltmp1815 # Offset: 2295
    000008fd: 	leaq	0x10(%rdi), %rax
    00000901: 	movq	0x88(%rsp), %rdx
    00000909: 	movq	%rax, (%rdi)
    0000090c: 	movq	0x80(%rsp), %rsi
    00000914: 	addq	%rsi, %rdx
    00000917: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 2327
    0000091c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000923: 	addq	$0x20, %rax
    00000927: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1852:
    0000092e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000935: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000093c: 	je	.Ltmp1816 # Offset: 2364
.Ltmp1851:
    00000942: 	movq	-0x20(%rax), %rbp
    00000946: 	callq	clock@PLT # Offset: 2374
    0000094b: 	pxor	%xmm0, %xmm0
    0000094f: 	movq	%rax, end_time(%rip)
    00000956: 	movq	%rbp, %rdi
    00000959: 	subq	start_time(%rip), %rax
    00000960: 	cvtsi2sd	%rax, %xmm0
    00000965: 	divsd	DATAat0x19290(%rip), %xmm0
    0000096d: 	callq	_Z13record_resultdPKc # Offset: 2413
    00000972: 	movq	0x80(%rsp), %rdi
    0000097a: 	cmpq	0x28(%rsp), %rdi
    0000097f: 	je	.Ltmp1817 # Offset: 2431
    00000981: 	movq	0x90(%rsp), %rax
    00000989: 	leaq	0x1(%rax), %rsi
    0000098d: 	callq	_ZdlPvm@PLT # Offset: 2445
.Ltmp1817:
    00000992: 	leaq	0xa0(%rsp), %rbp
    0000099a: 	leaq	0x60(%rsp), %r12
    0000099f: 	leaq	DATAat0x191fb(%rip), %rdx
    000009a6: 	movq	%r12, %rsi
    000009a9: 	movq	%rbp, %rdi
    000009ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2476
    000009b1: 	movzbl	init_value(%rip), %edx
    000009b8: 	movq	0x18(%rsp), %rdi
    000009bd: 	movq	%rbp, %r8
    000009c0: 	leaq	_Z6count1IhEmPT_iS0_(%rip), %rcx
    000009c7: 	movl	$0x1f40, %esi
    000009cc: 	callq	_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2508
    000009d1: 	movq	0xa0(%rsp), %rdi
    000009d9: 	leaq	0xb0(%rsp), %r13
    000009e1: 	cmpq	%r13, %rdi
    000009e4: 	je	.Ltmp1818 # Offset: 2532
    000009e6: 	movq	0xb0(%rsp), %rax
    000009ee: 	leaq	0x1(%rax), %rsi
    000009f2: 	callq	_ZdlPvm@PLT # Offset: 2546
.Ltmp1818:
    000009f7: 	movq	0x60(%rsp), %r15
    000009fc: 	movq	0x68(%rsp), %r14
    00000a01: 	movq	%r13, 0xa0(%rsp)
    00000a09: 	movq	%r15, %rax
    00000a0c: 	addq	%r14, %rax
    00000a0f: 	je	.Ltmp1819 # Offset: 2575
    00000a11: 	testq	%r15, %r15
    00000a14: 	je	.Ltmp1820 # Offset: 2580
.Ltmp1819:
    00000a1a: 	movq	%r14, 0x40(%rsp)
    00000a1f: 	cmpq	$0xf, %r14
    00000a23: 	ja	.Ltmp1821 # Offset: 2595
    00000a29: 	cmpq	$0x1, %r14
    00000a2d: 	jne	.Ltmp1822 # Offset: 2605
    00000a33: 	movzbl	(%r15), %eax
    00000a37: 	movb	%al, 0xb0(%rsp)
    00000a3e: 	movq	%r13, %rax
.Ltmp1846:
    00000a41: 	movq	%r14, 0xa8(%rsp)
    00000a49: 	movb	$0x0, (%rax,%r14)
    00000a4e: 	movabsq	$0x3fffffffffffffff, %rax
    00000a58: 	subq	0xa8(%rsp), %rax
    00000a60: 	cmpq	$0x6, %rax
    00000a64: 	jbe	.Ltmp1823 # Offset: 2660
    00000a6a: 	movl	$0x7, %edx
    00000a6f: 	leaq	DATAat0x19203(%rip), %rsi
    00000a76: 	movq	%rbp, %rdi
    00000a79: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2681
    00000a7e: 	movzbl	init_value(%rip), %edx
    00000a85: 	movq	0x18(%rsp), %rdi
    00000a8a: 	movq	%rbp, %r8
    00000a8d: 	leaq	_Z6count2IhEmPT_iS0_(%rip), %rcx
    00000a94: 	movl	$0x1f40, %esi
    00000a99: 	callq	_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2713
    00000a9e: 	movq	0xa0(%rsp), %rdi
    00000aa6: 	cmpq	%r13, %rdi
    00000aa9: 	je	.Ltmp1824 # Offset: 2729
    00000aab: 	movq	0xb0(%rsp), %rax
    00000ab3: 	leaq	0x1(%rax), %rsi
    00000ab7: 	callq	_ZdlPvm@PLT # Offset: 2743
.Ltmp1824:
    00000abc: 	leaq	DATAat0x1920b(%rip), %rdx
    00000ac3: 	movq	%r12, %rsi
    00000ac6: 	movq	%rbp, %rdi
    00000ac9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2761
    00000ace: 	movzbl	init_value(%rip), %edx
    00000ad5: 	movq	0x18(%rsp), %rdi
    00000ada: 	movq	%rbp, %r8
    00000add: 	leaq	_Z6count3IhEmPT_iS0_(%rip), %rcx
    00000ae4: 	movl	$0x1f40, %esi
    00000ae9: 	callq	_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2793
    00000aee: 	movq	0xa0(%rsp), %rdi
    00000af6: 	cmpq	%r13, %rdi
    00000af9: 	je	.Ltmp1825 # Offset: 2809
    00000afb: 	movq	0xb0(%rsp), %rax
    00000b03: 	leaq	0x1(%rax), %rsi
    00000b07: 	callq	_ZdlPvm@PLT # Offset: 2823
.Ltmp1825:
    00000b0c: 	leaq	DATAat0x19213(%rip), %rdx
    00000b13: 	movq	%r12, %rsi
    00000b16: 	movq	%rbp, %rdi
    00000b19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2841
    00000b1e: 	movzbl	init_value(%rip), %edx
    00000b25: 	movq	0x18(%rsp), %rdi
    00000b2a: 	movq	%rbp, %r8
    00000b2d: 	leaq	_Z6count4IhEmPT_iS0_(%rip), %rcx
    00000b34: 	movl	$0x1f40, %esi
    00000b39: 	callq	_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2873
    00000b3e: 	movq	0xa0(%rsp), %rdi
    00000b46: 	cmpq	%r13, %rdi
    00000b49: 	je	.Ltmp1826 # Offset: 2889
    00000b4b: 	movq	0xb0(%rsp), %rax
    00000b53: 	leaq	0x1(%rax), %rsi
    00000b57: 	callq	_ZdlPvm@PLT # Offset: 2903
.Ltmp1826:
    00000b5c: 	leaq	DATAat0x1921b(%rip), %rdx
    00000b63: 	movq	%r12, %rsi
    00000b66: 	movq	%rbp, %rdi
    00000b69: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2921
    00000b6e: 	movzbl	init_value(%rip), %edx
    00000b75: 	movq	0x18(%rsp), %rdi
    00000b7a: 	movq	%rbp, %r8
    00000b7d: 	leaq	_Z6count5IhEmPT_iS0_(%rip), %rcx
    00000b84: 	movl	$0x1f40, %esi
    00000b89: 	callq	_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2953
    00000b8e: 	movq	0xa0(%rsp), %rdi
    00000b96: 	cmpq	%r13, %rdi
    00000b99: 	je	.Ltmp1827 # Offset: 2969
    00000b9b: 	movq	0xb0(%rsp), %rax
    00000ba3: 	leaq	0x1(%rax), %rsi
    00000ba7: 	callq	_ZdlPvm@PLT # Offset: 2983
.Ltmp1827:
    00000bac: 	leaq	DATAat0x19223(%rip), %rdx
    00000bb3: 	movq	%r12, %rsi
    00000bb6: 	movq	%rbp, %rdi
    00000bb9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3001
    00000bbe: 	movzbl	init_value(%rip), %edx
    00000bc5: 	movq	0x18(%rsp), %rdi
    00000bca: 	movq	%rbp, %r8
    00000bcd: 	leaq	_Z6count6IhEmPT_iS0_(%rip), %rcx
    00000bd4: 	movl	$0x1f40, %esi
    00000bd9: 	callq	_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3033
    00000bde: 	movq	0xa0(%rsp), %rdi
    00000be6: 	cmpq	%r13, %rdi
    00000be9: 	je	.Ltmp1828 # Offset: 3049
    00000beb: 	movq	0xb0(%rsp), %rax
    00000bf3: 	leaq	0x1(%rax), %rsi
    00000bf7: 	callq	_ZdlPvm@PLT # Offset: 3063
.Ltmp1828:
    00000bfc: 	leaq	DATAat0x1922b(%rip), %rdx
    00000c03: 	movq	%r12, %rsi
    00000c06: 	movq	%rbp, %rdi
    00000c09: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3081
    00000c0e: 	movzbl	init_value(%rip), %edx
    00000c15: 	movq	0x18(%rsp), %rdi
    00000c1a: 	movq	%rbp, %r8
    00000c1d: 	leaq	_Z6count7IhEmPT_iS0_(%rip), %rcx
    00000c24: 	movl	$0x1f40, %esi
    00000c29: 	callq	_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3113
    00000c2e: 	movq	0xa0(%rsp), %rdi
    00000c36: 	cmpq	%r13, %rdi
    00000c39: 	je	.Ltmp1829 # Offset: 3129
    00000c3b: 	movq	0xb0(%rsp), %rax
    00000c43: 	leaq	0x1(%rax), %rsi
    00000c47: 	callq	_ZdlPvm@PLT # Offset: 3143
.Ltmp1829:
    00000c4c: 	leaq	DATAat0x19233(%rip), %rdx
    00000c53: 	movq	%r12, %rsi
    00000c56: 	movq	%rbp, %rdi
    00000c59: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3161
    00000c5e: 	movzbl	init_value(%rip), %edx
    00000c65: 	movq	0x18(%rsp), %rdi
    00000c6a: 	movq	%rbp, %r8
    00000c6d: 	leaq	_Z6count8IhEmPT_iS0_(%rip), %rcx
    00000c74: 	movl	$0x1f40, %esi
    00000c79: 	callq	_Z10test_countIhPFmPhihEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3193
    00000c7e: 	movq	0xa0(%rsp), %rdi
    00000c86: 	cmpq	%r13, %rdi
    00000c89: 	je	.Ltmp1830 # Offset: 3209
    00000c8b: 	movq	0xb0(%rsp), %rax
    00000c93: 	leaq	0x1(%rax), %rsi
    00000c97: 	callq	_ZdlPvm@PLT # Offset: 3223
.Ltmp1830:
    00000c9c: 	movq	0x60(%rsp), %r14
    00000ca1: 	movq	0x68(%rsp), %r12
    00000ca6: 	movq	%r13, 0xa0(%rsp)
    00000cae: 	movq	%r14, %rax
    00000cb1: 	addq	%r12, %rax
    00000cb4: 	je	.Ltmp1831 # Offset: 3252
    00000cb6: 	testq	%r14, %r14
    00000cb9: 	je	.Ltmp1832 # Offset: 3257
.Ltmp1831:
    00000cbf: 	movq	%r12, 0x40(%rsp)
    00000cc4: 	cmpq	$0xf, %r12
    00000cc8: 	ja	.Ltmp1833 # Offset: 3272
    00000cce: 	cmpq	$0x1, %r12
    00000cd2: 	jne	.Ltmp1834 # Offset: 3282
    00000cd8: 	movzbl	(%r14), %eax
    00000cdc: 	movb	%al, 0xb0(%rsp)
    00000ce3: 	movq	%r13, %rax
.Ltmp1848:
    00000ce6: 	movq	%r12, 0xa8(%rsp)
    00000cee: 	movb	$0x0, (%rax,%r12)
    00000cf3: 	movabsq	$0x3fffffffffffffff, %rax
    00000cfd: 	subq	0xa8(%rsp), %rax
    00000d05: 	cmpq	$0xe, %rax
    00000d09: 	jbe	.Ltmp1835 # Offset: 3337
    00000d0f: 	movl	$0xf, %edx
    00000d14: 	leaq	DATAat0x1923b(%rip), %rsi
    00000d1b: 	movq	%rbp, %rdi
    00000d1e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3358
    00000d23: 	movl	iterations(%rip), %edx
    00000d29: 	xorl	%r8d, %r8d
    00000d2c: 	xorl	%ecx, %ecx
    00000d2e: 	movl	$0x1f40, %esi
    00000d33: 	movq	0xa0(%rsp), %rdi
    00000d3b: 	callq	_Z9summarizePKciiii # Offset: 3387
    00000d40: 	movq	0xa0(%rsp), %rdi
    00000d48: 	cmpq	%r13, %rdi
    00000d4b: 	je	.Ltmp1836 # Offset: 3403
    00000d4d: 	movq	0xb0(%rsp), %rax
    00000d55: 	leaq	0x1(%rax), %rsi
    00000d59: 	callq	_ZdlPvm@PLT # Offset: 3417
.Ltmp1836:
    00000d5e: 	movq	0x60(%rsp), %rdi
    00000d63: 	cmpq	0x38(%rsp), %rdi
    00000d68: 	je	.Ltmp1837 # Offset: 3432
    00000d6a: 	movq	0x70(%rsp), %rax
    00000d6f: 	leaq	0x1(%rax), %rsi
    00000d73: 	callq	_ZdlPvm@PLT # Offset: 3443
.Ltmp1837:
    00000d78: 	movq	0x2008(%rsp), %rax
    00000d80: 	subq	%fs:0x28, %rax
    00000d89: 	jne	.Ltmp1838 # Offset: 3465
    00000d8f: 	addq	$0x2018, %rsp
    00000d96: 	popq	%rbx
    00000d97: 	popq	%rbp
    00000d98: 	popq	%r12
    00000d9a: 	popq	%r13
    00000d9c: 	popq	%r14
    00000d9e: 	popq	%r15
    00000da0: 	retq # Offset: 3488
.Ltmp1787:
    00000da1: 	testq	%r12, %r12
    00000da4: 	jne	.Ltmp1839 # Offset: 3492
    00000daa: 	movq	0x28(%rsp), %rax
    00000daf: 	jmp	.Ltmp1840 # Offset: 3503
    00000db4: 	nopl	(%rax) # Size: 4
.Ltmp1796:
    00000db8: 	addl	$0x1, %r15d
    00000dbc: 	cmpl	iterations(%rip), %r15d
    00000dc3: 	jl	.Ltmp1797 # Offset: 3523
    00000dc9: 	jmp	.Ltmp1789 # Offset: 3529
    00000dce: 	nop # Size: 2
.Ltmp1813:
    00000dd0: 	addl	$0x1, %ebx
    00000dd3: 	cmpl	iterations(%rip), %ebx
    00000dd9: 	jl	.Ltmp1814 # Offset: 3545
    00000ddf: 	jmp	.Ltmp1806 # Offset: 3551
    00000de4: 	nopl	(%rax) # Size: 4
.Ltmp1811:
    00000de8: 	testq	%r12, %r12
    00000deb: 	jne	.Ltmp1841 # Offset: 3563
    00000df1: 	movq	%r13, %rax
    00000df4: 	jmp	.Ltmp1842 # Offset: 3572
    00000df9: 	nopl	(%rax) # Size: 7
.Ltmp1794:
    00000e00: 	testq	%r12, %r12
    00000e03: 	jne	.Ltmp1843 # Offset: 3587
    00000e09: 	movq	%r13, %rax
    00000e0c: 	jmp	.Ltmp1844 # Offset: 3596
    00000e11: 	nopl	(%rax) # Size: 7
.Ltmp1793:
    00000e18: 	movq	0x20(%rsp), %rsi
    00000e1d: 	leaq	0xa0(%rsp), %rdi
    00000e25: 	xorl	%edx, %edx
    00000e27: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3623
    00000e2c: 	movq	%rax, 0xa0(%rsp)
    00000e34: 	movq	%rax, %rdi
    00000e37: 	movq	0x40(%rsp), %rax
    00000e3c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1857:
    00000e44: 	movq	%r12, %rdx
    00000e47: 	movq	%r14, %rsi
    00000e4a: 	callq	memcpy@PLT # Offset: 3658
    00000e4f: 	movq	0x40(%rsp), %r12
    00000e54: 	movq	0xa0(%rsp), %rax
    00000e5c: 	jmp	.Ltmp1844 # Offset: 3676
    00000e61: 	nopl	(%rax) # Size: 7
.Ltmp1810:
    00000e68: 	movq	0x20(%rsp), %rsi
    00000e6d: 	leaq	0xa0(%rsp), %rdi
    00000e75: 	xorl	%edx, %edx
    00000e77: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3703
    00000e7c: 	movq	%rax, 0xa0(%rsp)
    00000e84: 	movq	%rax, %rdi
    00000e87: 	movq	0x40(%rsp), %rax
    00000e8c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1856:
    00000e94: 	movq	%r12, %rdx
    00000e97: 	movq	%r14, %rsi
    00000e9a: 	callq	memcpy@PLT # Offset: 3738
    00000e9f: 	movq	0x40(%rsp), %r12
    00000ea4: 	movq	0xa0(%rsp), %rax
    00000eac: 	jmp	.Ltmp1842 # Offset: 3756
.Ltmp1822:
    00000eb1: 	testq	%r14, %r14
    00000eb4: 	jne	.Ltmp1845 # Offset: 3764
    00000eba: 	movq	%r13, %rax
    00000ebd: 	jmp	.Ltmp1846 # Offset: 3773
.Ltmp1834:
    00000ec2: 	testq	%r12, %r12
    00000ec5: 	jne	.Ltmp1847 # Offset: 3781
    00000ecb: 	movq	%r13, %rax
    00000ece: 	jmp	.Ltmp1848 # Offset: 3790
.Ltmp1804:
    00000ed3: 	testq	%r12, %r12
    00000ed6: 	jne	.Ltmp1849 # Offset: 3798
    00000edc: 	movq	0x28(%rsp), %rax
    00000ee1: 	jmp	.Ltmp1850 # Offset: 3809
.Ltmp1803:
    00000ee6: 	movq	0x20(%rsp), %rsi
    00000eeb: 	movq	0x30(%rsp), %rdi
    00000ef0: 	xorl	%edx, %edx
    00000ef2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3826
    00000ef7: 	movq	%rax, 0x80(%rsp)
    00000eff: 	movq	%rax, %rdi
    00000f02: 	movq	0x40(%rsp), %rax
    00000f07: 	movq	%rax, 0x90(%rsp)
.Ltmp1860:
    00000f0f: 	movq	%r12, %rdx
    00000f12: 	movq	%r13, %rsi
    00000f15: 	callq	memcpy@PLT # Offset: 3861
    00000f1a: 	movq	0x40(%rsp), %r12
    00000f1f: 	movq	0x80(%rsp), %rax
    00000f27: 	jmp	.Ltmp1850 # Offset: 3879
.Ltmp1821:
    00000f2c: 	movq	0x20(%rsp), %rsi
    00000f31: 	xorl	%edx, %edx
    00000f33: 	movq	%rbp, %rdi
    00000f36: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3894
    00000f3b: 	movq	%rax, 0xa0(%rsp)
    00000f43: 	movq	%rax, %rdi
    00000f46: 	movq	0x40(%rsp), %rax
    00000f4b: 	movq	%rax, 0xb0(%rsp)
.Ltmp1858:
    00000f53: 	movq	%r14, %rdx
    00000f56: 	movq	%r15, %rsi
    00000f59: 	callq	memcpy@PLT # Offset: 3929
    00000f5e: 	movq	0x40(%rsp), %r14
    00000f63: 	movq	0xa0(%rsp), %rax
    00000f6b: 	jmp	.Ltmp1846 # Offset: 3947
.Ltmp1833:
    00000f70: 	movq	0x20(%rsp), %rsi
    00000f75: 	xorl	%edx, %edx
    00000f77: 	movq	%rbp, %rdi
    00000f7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3962
    00000f7f: 	movq	%rax, 0xa0(%rsp)
    00000f87: 	movq	%rax, %rdi
    00000f8a: 	movq	0x40(%rsp), %rax
    00000f8f: 	movq	%rax, 0xb0(%rsp)
.Ltmp1859:
    00000f97: 	movq	%r12, %rdx
    00000f9a: 	movq	%r14, %rsi
    00000f9d: 	callq	memcpy@PLT # Offset: 3997
    00000fa2: 	movq	0x40(%rsp), %r12
    00000fa7: 	movq	0xa0(%rsp), %rax
    00000faf: 	jmp	.Ltmp1848 # Offset: 4015
.Ltmp1786:
    00000fb4: 	movq	0x20(%rsp), %rsi
    00000fb9: 	leaq	0x80(%rsp), %rdi
    00000fc1: 	xorl	%edx, %edx
    00000fc3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4035
    00000fc8: 	movq	%rax, 0x80(%rsp)
    00000fd0: 	movq	%rax, %rdi
    00000fd3: 	movq	0x40(%rsp), %rax
    00000fd8: 	movq	%rax, 0x90(%rsp)
.Ltmp1855:
    00000fe0: 	movq	%r12, %rdx
    00000fe3: 	movq	%r13, %rsi
    00000fe6: 	callq	memcpy@PLT # Offset: 4070
    00000feb: 	movq	0x40(%rsp), %r12
    00000ff0: 	movq	0x80(%rsp), %rax
    00000ff8: 	jmp	.Ltmp1840 # Offset: 4088
.Ltmp1816:
    00000ffd: 	movq	-0x8(%rdx), %rax
    00001001: 	addq	$0x200, %rax
    00001007: 	jmp	.Ltmp1851 # Offset: 4103
.Ltmp1815:
    0000100c: 	movq	0x30(%rsp), %rsi
    00001011: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001018: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4120
    0000101d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001024: 	jmp	.Ltmp1852 # Offset: 4132
.Ltmp1799:
    00001029: 	movq	-0x8(%rdx), %rax
    0000102d: 	addq	$0x200, %rax
    00001033: 	jmp	.Ltmp1853 # Offset: 4147
.Ltmp1798:
    00001038: 	movq	0x30(%rsp), %rsi
    0000103d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001044: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4164
    00001049: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001050: 	jmp	.Ltmp1854 # Offset: 4176
.Ltmp1788:
    00001055: 	leaq	DATAat0x19184(%rip), %rdi
    0000105c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4188
.Ltmp1792:
    00001061: 	leaq	DATAat0x19008(%rip), %rdi
    00001068: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4200
.Ltmp1802:
    0000106d: 	leaq	DATAat0x19008(%rip), %rdi
    00001074: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4212
.Ltmp1805:
    00001079: 	leaq	DATAat0x19184(%rip), %rdi
    00001080: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4224
.Ltmp1809:
    00001085: 	leaq	DATAat0x19008(%rip), %rdi
    0000108c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4236
.Ltmp1820:
    00001091: 	leaq	DATAat0x19008(%rip), %rdi
    00001098: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4248
.Ltmp1823:
    0000109d: 	leaq	DATAat0x19184(%rip), %rdi
    000010a4: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4260
.Ltmp1832:
    000010a9: 	leaq	DATAat0x19008(%rip), %rdi
    000010b0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4272
.Ltmp1835:
    000010b5: 	leaq	DATAat0x19184(%rip), %rdi
    000010bc: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4284
.Ltmp1838:
    000010c1: 	callq	__stack_chk_fail@PLT # Offset: 4289
.Ltmp1839:
    000010c6: 	movq	0x28(%rsp), %rdi
    000010cb: 	jmp	.Ltmp1855 # Offset: 4299
.Ltmp1841:
    000010d0: 	movq	%r13, %rdi
    000010d3: 	jmp	.Ltmp1856 # Offset: 4307
.Ltmp1843:
    000010d8: 	movq	%r13, %rdi
    000010db: 	jmp	.Ltmp1857 # Offset: 4315
.Ltmp1845:
    000010e0: 	movq	%r13, %rdi
    000010e3: 	jmp	.Ltmp1858 # Offset: 4323
.Ltmp1847:
    000010e8: 	movq	%r13, %rdi
    000010eb: 	jmp	.Ltmp1859 # Offset: 4331
.Ltmp1849:
    000010f0: 	movq	0x28(%rsp), %rdi
    000010f5: 	jmp	.Ltmp1860 # Offset: 4341
.Ltmp1785:
    000010fa: 	leaq	DATAat0x19008(%rip), %rdi
    00001101: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4353
    00001106: 	endbr64
.Ltmp1862:
    0000110a: 	movq	%rax, %rbp
    0000110d: 	jmp	.Ltmp1861 # Offset: 4365
    00001112: 	endbr64
    00001116: 	jmp	.Ltmp1862 # Offset: 4374
    00001118: 	endbr64
    0000111c: 	jmp	.Ltmp1862 # Offset: 4380
    0000111e: 	endbr64
    00001122: 	movq	%rax, %rbp
    00001125: 	jmp	.Ltmp1863 # Offset: 4389
    00001127: 	endbr64
    0000112b: 	movq	%rax, %rbp
    0000112e: 	jmp	.Ltmp1864 # Offset: 4398
.Ltmp1867:
    00001130: 	movq	0xa0(%rsp), %rdi
    00001138: 	cmpq	%r13, %rdi
    0000113b: 	je	.Ltmp1865 # Offset: 4411
    0000113d: 	movq	0xb0(%rsp), %rax
    00001145: 	leaq	0x1(%rax), %rsi
    00001149: 	callq	_ZdlPvm@PLT # Offset: 4425
.Ltmp1865:
    0000114e: 	movq	0x80(%rsp), %rdi
    00001156: 	cmpq	0x28(%rsp), %rdi
    0000115b: 	je	.Ltmp1863 # Offset: 4443
    0000115d: 	movq	0x90(%rsp), %rax
    00001165: 	leaq	0x1(%rax), %rsi
    00001169: 	callq	_ZdlPvm@PLT # Offset: 4457
.Ltmp1863:
    0000116e: 	movq	0x60(%rsp), %rdi
    00001173: 	cmpq	0x38(%rsp), %rdi
    00001178: 	je	.Ltmp1866 # Offset: 4472
    0000117a: 	movq	0x70(%rsp), %rax
    0000117f: 	leaq	0x1(%rax), %rsi
    00001183: 	callq	_ZdlPvm@PLT # Offset: 4483
.Ltmp1866:
    00001188: 	movq	%rbp, %rdi
    0000118b: 	callq	_Unwind_Resume@PLT # Offset: 4491
.Ltmp1864:
    00001190: 	movq	0xa0(%rsp), %rdi
    00001198: 	leaq	0xb0(%rsp), %rax
    000011a0: 	cmpq	%rax, %rdi
    000011a3: 	je	.Ltmp1863 # Offset: 4515
.Ltmp1868:
    000011a5: 	movq	0xb0(%rsp), %rax
    000011ad: 	leaq	0x1(%rax), %rsi
    000011b1: 	callq	_ZdlPvm@PLT # Offset: 4529
    000011b6: 	jmp	.Ltmp1863 # Offset: 4534
    000011b8: 	endbr64
    000011bc: 	jmp	.Ltmp1862 # Offset: 4540
    000011c1: 	endbr64
    000011c5: 	jmp	.Ltmp1862 # Offset: 4549
    000011ca: 	endbr64
.Ltmp1870:
    000011ce: 	movq	%rax, %rbp
    000011d1: 	jmp	.Ltmp1867 # Offset: 4561
    000011d6: 	endbr64
.Ltmp1869:
    000011da: 	movq	%rax, %rbp
    000011dd: 	jmp	.Ltmp1865 # Offset: 4573
    000011e2: 	endbr64
    000011e6: 	jmp	.Ltmp1862 # Offset: 4582
    000011eb: 	endbr64
    000011ef: 	jmp	.Ltmp1862 # Offset: 4591
    000011f4: 	endbr64
    000011f8: 	jmp	.Ltmp1862 # Offset: 4600
.Ltmp1861:
    000011fd: 	movq	0xa0(%rsp), %rdi
    00001205: 	cmpq	%r13, %rdi
    00001208: 	jne	.Ltmp1868 # Offset: 4616
    0000120a: 	jmp	.Ltmp1863 # Offset: 4618
    0000120f: 	endbr64
    00001213: 	jmp	.Ltmp1869 # Offset: 4627
    00001215: 	endbr64
    00001219: 	jmp	.Ltmp1869 # Offset: 4633
    0000121b: 	endbr64
    0000121f: 	jmp	.Ltmp1862 # Offset: 4639
    00001224: 	endbr64
    00001228: 	jmp	.Ltmp1862 # Offset: 4648
    0000122d: 	endbr64
    00001231: 	jmp	.Ltmp1870 # Offset: 4657
    00001233: 	endbr64
    00001237: 	jmp	.Ltmp1869 # Offset: 4663
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIhEvv"

Binary Function "_Z11TestOneTypeItEvv" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0x162f0
  Size        : 0x10ff
  MaxSize     : 0x1100
  Offset      : 0x162f0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeItEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x1000, %rsp
    0000002d: 	orq	$0x0, (%rsp)
    00000032: 	subq	$0xf58, %rsp
    00000039: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    00000041: 	movq	%fs:0x28, %rax
    0000004a: 	movq	%rax, 0x3f48(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	leaq	0x70(%rsp), %rax
    00000059: 	movaps	%xmm7, 0x40(%rsp)
    0000005e: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    00000066: 	leaq	0x40(%rsp), %rdi
    0000006b: 	movq	%rax, 0x38(%rsp)
    00000070: 	leaq	0x3f40(%rsp), %rbp
    00000078: 	movq	%rax, 0x60(%rsp)
    0000007d: 	movabsq	$0x745f3631746e6975, %rax
    00000087: 	movq	%rax, 0x70(%rsp)
    0000008c: 	movq	%rdi, 0x20(%rsp)
    00000091: 	movaps	%xmm7, 0x50(%rsp)
    00000096: 	movq	$0x8, 0x68(%rsp)
    0000009f: 	movb	$0x0, 0x78(%rsp)
    000000a4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 164
    000000a9: 	movl	init_value(%rip), %eax
    000000af: 	leal	0x7b(%rax), %edi
    000000b2: 	callq	srand@PLT # Offset: 178
    000000b7: 	leaq	0xc0(%rsp), %rax
    000000bf: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000c9: 	movabsq	$0x14057b7ef767814f, %rdi
    000000d3: 	movq	%rax, 0x18(%rsp)
    000000d8: 	movq	%rax, %rdx
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1871:
    000000e0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000e7: 	addq	$0x2, %rdx
    000000eb: 	imulq	%r8, %rax
    000000ef: 	addq	%rdi, %rax
    000000f2: 	movq	%rax, %rcx
    000000f5: 	movq	%rax, %rsi
    000000f8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ff: 	shrq	$0x14, %rcx
    00000103: 	shlq	$0x17, %rsi
    00000107: 	xorq	%rsi, %rcx
    0000010a: 	xorq	%rcx, %rax
    0000010d: 	sarq	$0x3, %rax
    00000111: 	movw	%ax, -0x2(%rdx)
    00000115: 	cmpq	%rbp, %rdx
    00000118: 	jne	.Ltmp1871 # Offset: 280
    0000011a: 	movl	init_value(%rip), %eax
    00000120: 	movq	0x18(%rsp), %r10
    00000125: 	leaq	0xc2(%rsp), %rsi
    0000012d: 	movabsq	$0x5851f42d4c957f2d, %r9
    00000137: 	movabsq	$0x14057b7ef767814f, %r8
    00000141: 	movabsq	$0x20c49ba5e353f7d, %rdi
    0000014b: 	movl	%eax, %edx
    0000014d: 	movd	%eax, %xmm0
    00000151: 	movzwl	%ax, %eax
    00000154: 	shll	$0x10, %edx
    00000157: 	punpcklwd	%xmm0, %xmm0
    0000015b: 	orl	%edx, %eax
    0000015d: 	pshufd	$0x0, %xmm0, %xmm0
    00000162: 	movl	%eax, 0x110(%rsp)
    00000169: 	movdqa	%xmm0, %xmm7
    0000016d: 	movaps	%xmm0, 0xc0(%rsp)
    00000175: 	movaps	%xmm0, 0xd0(%rsp)
    0000017d: 	movaps	%xmm0, 0xe0(%rsp)
    00000185: 	movaps	%xmm0, 0xf0(%rsp)
    0000018d: 	movaps	%xmm0, 0x100(%rsp)
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp1872:
    00000198: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000019f: 	movzwl	(%rsi), %r11d
    000001a3: 	addq	$0x2, %rsi
    000001a7: 	imulq	%r9, %rax
    000001ab: 	addq	%r8, %rax
    000001ae: 	movq	%rax, %rdx
    000001b1: 	movq	%rax, %rcx
    000001b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001bb: 	shlq	$0x17, %rcx
    000001bf: 	shrq	$0x14, %rdx
    000001c3: 	xorq	%rcx, %rdx
    000001c6: 	xorq	%rdx, %rax
    000001c9: 	movq	%rax, %rdx
    000001cc: 	movq	%rax, %rcx
    000001cf: 	shrq	$0x6, %rdx
    000001d3: 	movq	%rdx, %rax
    000001d6: 	mulq	%rdi
    000001d9: 	movq	%rcx, %rax
    000001dc: 	imulq	$0x1f40, %rdx, %rdx
    000001e3: 	subq	%rdx, %rax
    000001e6: 	leaq	(%r10,%rax,2), %rax
    000001ea: 	movzwl	(%rax), %edx
    000001ed: 	movw	%dx, -0x2(%rsi)
    000001f1: 	movw	%r11w, (%rax)
    000001f5: 	cmpq	%rbp, %rsi
    000001f8: 	jne	.Ltmp1872 # Offset: 504
    000001fa: 	movq	0x18(%rsp), %rax
    000001ff: 	pxor	%xmm1, %xmm1
    00000203: 	pxor	%xmm6, %xmm6
    00000207: 	pxor	%xmm5, %xmm5
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1873:
    00000210: 	movdqa	%xmm7, %xmm0
    00000214: 	movdqa	%xmm6, %xmm2
    00000218: 	movdqa	%xmm5, %xmm4
    0000021c: 	addq	$0x10, %rax
    00000220: 	pcmpeqw	-0x10(%rax), %xmm0
    00000225: 	pand	DATAat0x19260(%rip), %xmm0
    0000022d: 	pcmpgtw	%xmm0, %xmm2
    00000231: 	movdqa	%xmm0, %xmm3
    00000235: 	punpcklwd	%xmm2, %xmm3
    00000239: 	punpckhwd	%xmm2, %xmm0
    0000023d: 	pcmpgtd	%xmm3, %xmm4
    00000241: 	movdqa	%xmm3, %xmm2
    00000245: 	punpckldq	%xmm4, %xmm2
    00000249: 	punpckhdq	%xmm4, %xmm3
    0000024d: 	paddq	%xmm2, %xmm1
    00000251: 	movdqa	%xmm5, %xmm2
    00000255: 	pcmpgtd	%xmm0, %xmm2
    00000259: 	paddq	%xmm3, %xmm1
    0000025d: 	movdqa	%xmm0, %xmm3
    00000261: 	punpckldq	%xmm2, %xmm3
    00000265: 	punpckhdq	%xmm2, %xmm0
    00000269: 	paddq	%xmm3, %xmm1
    0000026d: 	paddq	%xmm0, %xmm1
    00000271: 	cmpq	%rax, %rbp
    00000274: 	jne	.Ltmp1873 # Offset: 628
    00000276: 	movdqa	%xmm1, %xmm0
    0000027a: 	leaq	0x60(%rsp), %rax
    0000027f: 	leaq	0x80(%rsp), %rdi
    00000287: 	psrldq	$0x8, %xmm0
    0000028c: 	leaq	DATAat0x191e0(%rip), %rdx
    00000293: 	movq	%rax, %rsi
    00000296: 	movq	%rdi, 0x30(%rsp)
    0000029b: 	paddq	%xmm0, %xmm1
    0000029f: 	movq	%rax, 0x28(%rsp)
    000002a4: 	movq	%xmm1, gCount(%rip)
    000002ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 684
    000002b1: 	movzwl	init_value(%rip), %ebx
    000002b8: 	xorl	%r14d, %r14d
    000002bb: 	leaq	0xb0(%rsp), %r15
    000002c3: 	callq	clock@PLT # Offset: 707
    000002c8: 	movl	iterations(%rip), %edx
    000002ce: 	movq	%rax, start_time(%rip)
    000002d5: 	testl	%edx, %edx
    000002d7: 	jle	.Ltmp1874 # Offset: 727
    000002dd: 	movd	%ebx, %xmm0
    000002e1: 	punpcklwd	%xmm0, %xmm0
    000002e5: 	pshufd	$0x0, %xmm0, %xmm7
    000002ea: 	movaps	%xmm7, (%rsp)
    000002ee: 	nop # Size: 2
.Ltmp1882:
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	pxor	%xmm1, %xmm1
    000002f9: 	pxor	%xmm6, %xmm6
    000002fd: 	pxor	%xmm5, %xmm5
    00000301: 	nopl	(%rax) # Size: 7
.Ltmp1875:
    00000308: 	movdqa	(%rsp), %xmm0
    0000030d: 	movdqa	%xmm6, %xmm2
    00000311: 	movdqa	%xmm5, %xmm4
    00000315: 	addq	$0x10, %rax
    00000319: 	pcmpeqw	-0x10(%rax), %xmm0
    0000031e: 	pand	DATAat0x19260(%rip), %xmm0
    00000326: 	pcmpgtw	%xmm0, %xmm2
    0000032a: 	movdqa	%xmm0, %xmm3
    0000032e: 	punpcklwd	%xmm2, %xmm3
    00000332: 	punpckhwd	%xmm2, %xmm0
    00000336: 	pcmpgtd	%xmm3, %xmm4
    0000033a: 	movdqa	%xmm3, %xmm2
    0000033e: 	punpckldq	%xmm4, %xmm2
    00000342: 	punpckhdq	%xmm4, %xmm3
    00000346: 	paddq	%xmm2, %xmm1
    0000034a: 	movdqa	%xmm5, %xmm2
    0000034e: 	pcmpgtd	%xmm0, %xmm2
    00000352: 	paddq	%xmm3, %xmm1
    00000356: 	movdqa	%xmm0, %xmm3
    0000035a: 	punpckldq	%xmm2, %xmm3
    0000035e: 	punpckhdq	%xmm2, %xmm0
    00000362: 	paddq	%xmm3, %xmm1
    00000366: 	paddq	%xmm0, %xmm1
    0000036a: 	cmpq	%rax, %rbp
    0000036d: 	jne	.Ltmp1875 # Offset: 877
    0000036f: 	movq	0x80(%rsp), %r13
    00000377: 	movdqa	%xmm1, %xmm0
    0000037b: 	movq	0x88(%rsp), %r12
    00000383: 	movq	%r15, 0xa0(%rsp)
    0000038b: 	psrldq	$0x8, %xmm0
    00000390: 	movq	%r13, %rax
    00000393: 	paddq	%xmm0, %xmm1
    00000397: 	addq	%r12, %rax
    0000039a: 	movq	%xmm1, %rbx
    0000039f: 	je	.Ltmp1876 # Offset: 927
    000003a1: 	testq	%r13, %r13
    000003a4: 	je	.Ltmp1877 # Offset: 932
.Ltmp1876:
    000003aa: 	movq	%r12, 0x40(%rsp)
    000003af: 	cmpq	$0xf, %r12
    000003b3: 	ja	.Ltmp1878 # Offset: 947
    000003b9: 	cmpq	$0x1, %r12
    000003bd: 	jne	.Ltmp1879 # Offset: 957
    000003c3: 	movzbl	(%r13), %eax
    000003c8: 	movb	%al, 0xb0(%rsp)
    000003cf: 	movq	%r15, %rax
.Ltmp1930:
    000003d2: 	movq	%r12, 0xa8(%rsp)
    000003da: 	movb	$0x0, (%rax,%r12)
    000003df: 	cmpq	gCount(%rip), %rbx
    000003e6: 	je	.Ltmp1880 # Offset: 998
    000003e8: 	movq	0xa0(%rsp), %rdx
    000003f0: 	leaq	DATAat0x191d0(%rip), %rsi
    000003f7: 	movl	$0x1, %edi
    000003fc: 	xorl	%eax, %eax
    000003fe: 	callq	__printf_chk@PLT # Offset: 1022
.Ltmp1880:
    00000403: 	movq	0xa0(%rsp), %rdi
    0000040b: 	cmpq	%r15, %rdi
    0000040e: 	je	.Ltmp1881 # Offset: 1038
    00000414: 	movq	0xb0(%rsp), %rax
    0000041c: 	addl	$0x1, %r14d
    00000420: 	leaq	0x1(%rax), %rsi
    00000424: 	callq	_ZdlPvm@PLT # Offset: 1060
    00000429: 	cmpl	iterations(%rip), %r14d
    00000430: 	jl	.Ltmp1882 # Offset: 1072
.Ltmp1874:
    00000436: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000043d: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000444: 	subq	$0x20, %rax
    00000448: 	cmpq	%rax, %rdi
    0000044b: 	je	.Ltmp1883 # Offset: 1099
    00000451: 	leaq	0x10(%rdi), %rax
    00000455: 	movq	0x88(%rsp), %rdx
    0000045d: 	movq	%rax, (%rdi)
    00000460: 	movq	0x80(%rsp), %rsi
    00000468: 	addq	%rsi, %rdx
    0000046b: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1131
    00000470: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000477: 	addq	$0x20, %rax
    0000047b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1944:
    00000482: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000489: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000490: 	je	.Ltmp1884 # Offset: 1168
.Ltmp1941:
    00000496: 	movq	-0x20(%rax), %r12
    0000049a: 	callq	clock@PLT # Offset: 1178
    0000049f: 	pxor	%xmm0, %xmm0
    000004a3: 	movq	%rax, end_time(%rip)
    000004aa: 	movq	%r12, %rdi
    000004ad: 	subq	start_time(%rip), %rax
    000004b4: 	cvtsi2sd	%rax, %xmm0
    000004b9: 	divsd	DATAat0x19290(%rip), %xmm0
    000004c1: 	callq	_Z13record_resultdPKc # Offset: 1217
    000004c6: 	movq	0x80(%rsp), %rdi
    000004ce: 	leaq	0x90(%rsp), %rax
    000004d6: 	movq	%rax, (%rsp)
    000004da: 	cmpq	%rax, %rdi
    000004dd: 	je	.Ltmp1885 # Offset: 1245
    000004df: 	movq	0x90(%rsp), %rax
    000004e7: 	leaq	0x1(%rax), %rsi
    000004eb: 	callq	_ZdlPvm@PLT # Offset: 1259
.Ltmp1885:
    000004f0: 	movq	(%rsp), %rax
    000004f4: 	movq	0x60(%rsp), %r13
    000004f9: 	movq	0x68(%rsp), %r12
    000004fe: 	movq	%rax, 0x80(%rsp)
    00000506: 	movq	%r13, %rax
    00000509: 	addq	%r12, %rax
    0000050c: 	je	.Ltmp1886 # Offset: 1292
    0000050e: 	testq	%r13, %r13
    00000511: 	je	.Ltmp1887 # Offset: 1297
.Ltmp1886:
    00000517: 	movq	%r12, 0x40(%rsp)
    0000051c: 	cmpq	$0xf, %r12
    00000520: 	ja	.Ltmp1888 # Offset: 1312
    00000526: 	cmpq	$0x1, %r12
    0000052a: 	jne	.Ltmp1889 # Offset: 1322
    00000530: 	movzbl	(%r13), %eax
    00000535: 	movb	%al, 0x90(%rsp)
    0000053c: 	movq	(%rsp), %rax
.Ltmp1932:
    00000540: 	movq	%r12, 0x88(%rsp)
    00000548: 	movb	$0x0, (%rax,%r12)
    0000054d: 	movabsq	$0x3fffffffffffffff, %rax
    00000557: 	subq	0x88(%rsp), %rax
    0000055f: 	cmpq	$0xd, %rax
    00000563: 	jbe	.Ltmp1890 # Offset: 1379
    00000569: 	movq	0x30(%rsp), %rdi
    0000056e: 	movl	$0xe, %edx
    00000573: 	leaq	DATAat0x191ec(%rip), %rsi
    0000057a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1402
    0000057f: 	callq	clock@PLT # Offset: 1407
    00000584: 	xorl	%ebx, %ebx
    00000586: 	leaq	0xb0(%rsp), %r15
    0000058e: 	movq	%rax, start_time(%rip)
    00000595: 	movl	iterations(%rip), %eax
    0000059b: 	testl	%eax, %eax
    0000059d: 	jle	.Ltmp1891 # Offset: 1437
    000005a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1899:
    000005a8: 	movd	init_value(%rip), %xmm6
    000005b0: 	movq	0x18(%rsp), %rax
    000005b5: 	pxor	%xmm1, %xmm1
    000005b9: 	pxor	%xmm7, %xmm7
    000005bd: 	punpcklwd	%xmm6, %xmm6
    000005c1: 	pxor	%xmm5, %xmm5
    000005c5: 	pshufd	$0x0, %xmm6, %xmm6
    000005ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1892:
    000005d0: 	movdqa	%xmm6, %xmm0
    000005d4: 	movdqa	%xmm7, %xmm2
    000005d8: 	movdqa	%xmm5, %xmm4
    000005dc: 	addq	$0x10, %rax
    000005e0: 	pcmpeqw	-0x10(%rax), %xmm0
    000005e5: 	pand	DATAat0x19260(%rip), %xmm0
    000005ed: 	pcmpgtw	%xmm0, %xmm2
    000005f1: 	movdqa	%xmm0, %xmm3
    000005f5: 	punpcklwd	%xmm2, %xmm3
    000005f9: 	punpckhwd	%xmm2, %xmm0
    000005fd: 	pcmpgtd	%xmm3, %xmm4
    00000601: 	movdqa	%xmm3, %xmm2
    00000605: 	punpckldq	%xmm4, %xmm2
    00000609: 	punpckhdq	%xmm4, %xmm3
    0000060d: 	paddq	%xmm2, %xmm1
    00000611: 	movdqa	%xmm5, %xmm2
    00000615: 	pcmpgtd	%xmm0, %xmm2
    00000619: 	paddq	%xmm3, %xmm1
    0000061d: 	movdqa	%xmm0, %xmm3
    00000621: 	punpckldq	%xmm2, %xmm3
    00000625: 	punpckhdq	%xmm2, %xmm0
    00000629: 	paddq	%xmm3, %xmm1
    0000062d: 	paddq	%xmm0, %xmm1
    00000631: 	cmpq	%rax, %rbp
    00000634: 	jne	.Ltmp1892 # Offset: 1588
    00000636: 	movq	0x80(%rsp), %r13
    0000063e: 	movdqa	%xmm1, %xmm0
    00000642: 	movq	0x88(%rsp), %r12
    0000064a: 	movq	%r15, 0xa0(%rsp)
    00000652: 	psrldq	$0x8, %xmm0
    00000657: 	movq	%r13, %rax
    0000065a: 	paddq	%xmm0, %xmm1
    0000065e: 	addq	%r12, %rax
    00000661: 	movq	%xmm1, %r14
    00000666: 	je	.Ltmp1893 # Offset: 1638
    00000668: 	testq	%r13, %r13
    0000066b: 	je	.Ltmp1894 # Offset: 1643
.Ltmp1893:
    00000671: 	movq	%r12, 0x40(%rsp)
    00000676: 	cmpq	$0xf, %r12
    0000067a: 	ja	.Ltmp1895 # Offset: 1658
    00000680: 	cmpq	$0x1, %r12
    00000684: 	jne	.Ltmp1896 # Offset: 1668
    0000068a: 	movzbl	(%r13), %eax
    0000068f: 	movb	%al, 0xb0(%rsp)
    00000696: 	movq	%r15, %rax
.Ltmp1934:
    00000699: 	movq	%r12, 0xa8(%rsp)
    000006a1: 	movb	$0x0, (%rax,%r12)
    000006a6: 	cmpq	gCount(%rip), %r14
    000006ad: 	je	.Ltmp1897 # Offset: 1709
    000006af: 	movq	0xa0(%rsp), %rdx
    000006b7: 	leaq	DATAat0x191d0(%rip), %rsi
    000006be: 	movl	$0x1, %edi
    000006c3: 	xorl	%eax, %eax
    000006c5: 	callq	__printf_chk@PLT # Offset: 1733
.Ltmp1897:
    000006ca: 	movq	0xa0(%rsp), %rdi
    000006d2: 	cmpq	%r15, %rdi
    000006d5: 	je	.Ltmp1898 # Offset: 1749
    000006db: 	movq	0xb0(%rsp), %rax
    000006e3: 	addl	$0x1, %ebx
    000006e6: 	leaq	0x1(%rax), %rsi
    000006ea: 	callq	_ZdlPvm@PLT # Offset: 1770
    000006ef: 	cmpl	iterations(%rip), %ebx
    000006f5: 	jl	.Ltmp1899 # Offset: 1781
.Ltmp1891:
    000006fb: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000702: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000709: 	subq	$0x20, %rax
    0000070d: 	cmpq	%rax, %rdi
    00000710: 	je	.Ltmp1900 # Offset: 1808
    00000716: 	leaq	0x10(%rdi), %rax
    0000071a: 	movq	0x88(%rsp), %rdx
    00000722: 	movq	%rax, (%rdi)
    00000725: 	movq	0x80(%rsp), %rsi
    0000072d: 	addq	%rsi, %rdx
    00000730: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1840
    00000735: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000073c: 	addq	$0x20, %rax
    00000740: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1943:
    00000747: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000074e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000755: 	je	.Ltmp1901 # Offset: 1877
.Ltmp1942:
    0000075b: 	movq	-0x20(%rax), %rbp
    0000075f: 	callq	clock@PLT # Offset: 1887
    00000764: 	pxor	%xmm0, %xmm0
    00000768: 	movq	%rax, end_time(%rip)
    0000076f: 	movq	%rbp, %rdi
    00000772: 	subq	start_time(%rip), %rax
    00000779: 	cvtsi2sd	%rax, %xmm0
    0000077e: 	divsd	DATAat0x19290(%rip), %xmm0
    00000786: 	callq	_Z13record_resultdPKc # Offset: 1926
    0000078b: 	movq	0x80(%rsp), %rdi
    00000793: 	cmpq	(%rsp), %rdi
    00000797: 	je	.Ltmp1902 # Offset: 1943
    00000799: 	movq	0x90(%rsp), %rax
    000007a1: 	leaq	0x1(%rax), %rsi
    000007a5: 	callq	_ZdlPvm@PLT # Offset: 1957
.Ltmp1902:
    000007aa: 	leaq	0xa0(%rsp), %rbp
    000007b2: 	movq	0x28(%rsp), %rsi
    000007b7: 	leaq	DATAat0x191fb(%rip), %rdx
    000007be: 	movq	%rbp, %rdi
    000007c1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1985
    000007c6: 	movzwl	init_value(%rip), %edx
    000007cd: 	movq	0x18(%rsp), %rdi
    000007d2: 	movq	%rbp, %r8
    000007d5: 	leaq	_Z6count1ItEmPT_iS0_(%rip), %rcx
    000007dc: 	movl	$0x1f40, %esi
    000007e1: 	callq	_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2017
    000007e6: 	movq	0xa0(%rsp), %rdi
    000007ee: 	leaq	0xb0(%rsp), %r15
    000007f6: 	cmpq	%r15, %rdi
    000007f9: 	je	.Ltmp1903 # Offset: 2041
    000007fb: 	movq	0xb0(%rsp), %rax
    00000803: 	leaq	0x1(%rax), %rsi
    00000807: 	callq	_ZdlPvm@PLT # Offset: 2055
.Ltmp1903:
    0000080c: 	movq	0x60(%rsp), %r13
    00000811: 	movq	0x68(%rsp), %r12
    00000816: 	movq	%r15, 0xa0(%rsp)
    0000081e: 	movq	%r13, %rax
    00000821: 	addq	%r12, %rax
    00000824: 	je	.Ltmp1904 # Offset: 2084
    00000826: 	testq	%r13, %r13
    00000829: 	je	.Ltmp1905 # Offset: 2089
.Ltmp1904:
    0000082f: 	movq	%r12, 0x40(%rsp)
    00000834: 	cmpq	$0xf, %r12
    00000838: 	ja	.Ltmp1906 # Offset: 2104
    0000083e: 	cmpq	$0x1, %r12
    00000842: 	jne	.Ltmp1907 # Offset: 2114
    00000848: 	movzbl	(%r13), %eax
    0000084d: 	movb	%al, 0xb0(%rsp)
    00000854: 	movq	%r15, %rax
.Ltmp1936:
    00000857: 	movq	%r12, 0xa8(%rsp)
    0000085f: 	movb	$0x0, (%rax,%r12)
    00000864: 	movabsq	$0x3fffffffffffffff, %rax
    0000086e: 	subq	0xa8(%rsp), %rax
    00000876: 	cmpq	$0x6, %rax
    0000087a: 	jbe	.Ltmp1908 # Offset: 2170
    00000880: 	movl	$0x7, %edx
    00000885: 	leaq	DATAat0x19203(%rip), %rsi
    0000088c: 	movq	%rbp, %rdi
    0000088f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2191
    00000894: 	movzwl	init_value(%rip), %edx
    0000089b: 	movq	0x18(%rsp), %rdi
    000008a0: 	movq	%rbp, %r8
    000008a3: 	leaq	_Z6count2ItEmPT_iS0_(%rip), %rcx
    000008aa: 	movl	$0x1f40, %esi
    000008af: 	callq	_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2223
    000008b4: 	movq	0xa0(%rsp), %rdi
    000008bc: 	cmpq	%r15, %rdi
    000008bf: 	je	.Ltmp1909 # Offset: 2239
    000008c1: 	movq	0xb0(%rsp), %rax
    000008c9: 	leaq	0x1(%rax), %rsi
    000008cd: 	callq	_ZdlPvm@PLT # Offset: 2253
.Ltmp1909:
    000008d2: 	movq	0x28(%rsp), %rsi
    000008d7: 	leaq	DATAat0x1920b(%rip), %rdx
    000008de: 	movq	%rbp, %rdi
    000008e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2273
    000008e6: 	movzwl	init_value(%rip), %edx
    000008ed: 	movq	0x18(%rsp), %rdi
    000008f2: 	movq	%rbp, %r8
    000008f5: 	leaq	_Z6count3ItEmPT_iS0_(%rip), %rcx
    000008fc: 	movl	$0x1f40, %esi
    00000901: 	callq	_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2305
    00000906: 	movq	0xa0(%rsp), %rdi
    0000090e: 	cmpq	%r15, %rdi
    00000911: 	je	.Ltmp1910 # Offset: 2321
    00000913: 	movq	0xb0(%rsp), %rax
    0000091b: 	leaq	0x1(%rax), %rsi
    0000091f: 	callq	_ZdlPvm@PLT # Offset: 2335
.Ltmp1910:
    00000924: 	movq	0x60(%rsp), %r13
    00000929: 	movq	0x68(%rsp), %r12
    0000092e: 	movq	%r15, 0xa0(%rsp)
    00000936: 	movq	%r13, %rax
    00000939: 	addq	%r12, %rax
    0000093c: 	je	.Ltmp1911 # Offset: 2364
    0000093e: 	testq	%r13, %r13
    00000941: 	je	.Ltmp1912 # Offset: 2369
.Ltmp1911:
    00000947: 	movq	%r12, 0x40(%rsp)
    0000094c: 	cmpq	$0xf, %r12
    00000950: 	ja	.Ltmp1913 # Offset: 2384
    00000956: 	cmpq	$0x1, %r12
    0000095a: 	jne	.Ltmp1914 # Offset: 2394
    00000960: 	movzbl	(%r13), %eax
    00000965: 	movb	%al, 0xb0(%rsp)
    0000096c: 	movq	%r15, %rax
.Ltmp1940:
    0000096f: 	movq	%r12, 0xa8(%rsp)
    00000977: 	movb	$0x0, (%rax,%r12)
    0000097c: 	movabsq	$0x3fffffffffffffff, %rax
    00000986: 	subq	0xa8(%rsp), %rax
    0000098e: 	cmpq	$0x6, %rax
    00000992: 	jbe	.Ltmp1915 # Offset: 2450
    00000998: 	movl	$0x7, %edx
    0000099d: 	leaq	DATAat0x19213(%rip), %rsi
    000009a4: 	movq	%rbp, %rdi
    000009a7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2471
    000009ac: 	movzwl	init_value(%rip), %edx
    000009b3: 	movq	0x18(%rsp), %rdi
    000009b8: 	movq	%rbp, %r8
    000009bb: 	leaq	_Z6count4ItEmPT_iS0_(%rip), %rcx
    000009c2: 	movl	$0x1f40, %esi
    000009c7: 	callq	_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2503
    000009cc: 	movq	0xa0(%rsp), %rdi
    000009d4: 	cmpq	%r15, %rdi
    000009d7: 	je	.Ltmp1916 # Offset: 2519
    000009d9: 	movq	0xb0(%rsp), %rax
    000009e1: 	leaq	0x1(%rax), %rsi
    000009e5: 	callq	_ZdlPvm@PLT # Offset: 2533
.Ltmp1916:
    000009ea: 	movq	0x28(%rsp), %rsi
    000009ef: 	leaq	DATAat0x1921b(%rip), %rdx
    000009f6: 	movq	%rbp, %rdi
    000009f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2553
    000009fe: 	movzwl	init_value(%rip), %edx
    00000a05: 	movq	0x18(%rsp), %rdi
    00000a0a: 	movq	%rbp, %r8
    00000a0d: 	leaq	_Z6count5ItEmPT_iS0_(%rip), %rcx
    00000a14: 	movl	$0x1f40, %esi
    00000a19: 	callq	_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2585
    00000a1e: 	movq	0xa0(%rsp), %rdi
    00000a26: 	cmpq	%r15, %rdi
    00000a29: 	je	.Ltmp1917 # Offset: 2601
    00000a2b: 	movq	0xb0(%rsp), %rax
    00000a33: 	leaq	0x1(%rax), %rsi
    00000a37: 	callq	_ZdlPvm@PLT # Offset: 2615
.Ltmp1917:
    00000a3c: 	movq	0x28(%rsp), %rsi
    00000a41: 	leaq	DATAat0x19223(%rip), %rdx
    00000a48: 	movq	%rbp, %rdi
    00000a4b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2635
    00000a50: 	movzwl	init_value(%rip), %edx
    00000a57: 	movq	0x18(%rsp), %rdi
    00000a5c: 	movq	%rbp, %r8
    00000a5f: 	leaq	_Z6count6ItEmPT_iS0_(%rip), %rcx
    00000a66: 	movl	$0x1f40, %esi
    00000a6b: 	callq	_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2667
    00000a70: 	movq	0xa0(%rsp), %rdi
    00000a78: 	cmpq	%r15, %rdi
    00000a7b: 	je	.Ltmp1918 # Offset: 2683
    00000a7d: 	movq	0xb0(%rsp), %rax
    00000a85: 	leaq	0x1(%rax), %rsi
    00000a89: 	callq	_ZdlPvm@PLT # Offset: 2697
.Ltmp1918:
    00000a8e: 	movq	0x60(%rsp), %r13
    00000a93: 	movq	0x68(%rsp), %r12
    00000a98: 	movq	%r15, 0xa0(%rsp)
    00000aa0: 	movq	%r13, %rax
    00000aa3: 	addq	%r12, %rax
    00000aa6: 	je	.Ltmp1919 # Offset: 2726
    00000aa8: 	testq	%r13, %r13
    00000aab: 	je	.Ltmp1920 # Offset: 2731
.Ltmp1919:
    00000ab1: 	movq	%r12, 0x40(%rsp)
    00000ab6: 	cmpq	$0xf, %r12
    00000aba: 	ja	.Ltmp1921 # Offset: 2746
    00000ac0: 	cmpq	$0x1, %r12
    00000ac4: 	jne	.Ltmp1922 # Offset: 2756
    00000aca: 	movzbl	(%r13), %eax
    00000acf: 	movb	%al, 0xb0(%rsp)
    00000ad6: 	movq	%r15, %rax
.Ltmp1938:
    00000ad9: 	movq	%r12, 0xa8(%rsp)
    00000ae1: 	movb	$0x0, (%rax,%r12)
    00000ae6: 	movabsq	$0x3fffffffffffffff, %rax
    00000af0: 	subq	0xa8(%rsp), %rax
    00000af8: 	cmpq	$0x6, %rax
    00000afc: 	jbe	.Ltmp1923 # Offset: 2812
    00000b02: 	movl	$0x7, %edx
    00000b07: 	leaq	DATAat0x1922b(%rip), %rsi
    00000b0e: 	movq	%rbp, %rdi
    00000b11: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2833
    00000b16: 	movzwl	init_value(%rip), %edx
    00000b1d: 	movq	0x18(%rsp), %rdi
    00000b22: 	movq	%rbp, %r8
    00000b25: 	leaq	_Z6count7ItEmPT_iS0_(%rip), %rcx
    00000b2c: 	movl	$0x1f40, %esi
    00000b31: 	callq	_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2865
    00000b36: 	movq	0xa0(%rsp), %rdi
    00000b3e: 	cmpq	%r15, %rdi
    00000b41: 	je	.Ltmp1924 # Offset: 2881
    00000b43: 	movq	0xb0(%rsp), %rax
    00000b4b: 	leaq	0x1(%rax), %rsi
    00000b4f: 	callq	_ZdlPvm@PLT # Offset: 2895
.Ltmp1924:
    00000b54: 	movq	0x28(%rsp), %rsi
    00000b59: 	leaq	DATAat0x19233(%rip), %rdx
    00000b60: 	movq	%rbp, %rdi
    00000b63: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2915
    00000b68: 	movzwl	init_value(%rip), %edx
    00000b6f: 	movq	0x18(%rsp), %rdi
    00000b74: 	movq	%rbp, %r8
    00000b77: 	leaq	_Z6count8ItEmPT_iS0_(%rip), %rcx
    00000b7e: 	movl	$0x1f40, %esi
    00000b83: 	callq	_Z10test_countItPFmPtitEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2947
    00000b88: 	movq	0xa0(%rsp), %rdi
    00000b90: 	cmpq	%r15, %rdi
    00000b93: 	je	.Ltmp1925 # Offset: 2963
    00000b95: 	movq	0xb0(%rsp), %rax
    00000b9d: 	leaq	0x1(%rax), %rsi
    00000ba1: 	callq	_ZdlPvm@PLT # Offset: 2977
.Ltmp1925:
    00000ba6: 	movq	0x28(%rsp), %rsi
    00000bab: 	leaq	DATAat0x1923b(%rip), %rdx
    00000bb2: 	movq	%rbp, %rdi
    00000bb5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2997
    00000bba: 	movl	iterations(%rip), %edx
    00000bc0: 	xorl	%r8d, %r8d
    00000bc3: 	xorl	%ecx, %ecx
    00000bc5: 	movl	$0x1f40, %esi
    00000bca: 	movq	0xa0(%rsp), %rdi
    00000bd2: 	callq	_Z9summarizePKciiii # Offset: 3026
    00000bd7: 	movq	0xa0(%rsp), %rdi
    00000bdf: 	cmpq	%r15, %rdi
    00000be2: 	je	.Ltmp1926 # Offset: 3042
    00000be4: 	movq	0xb0(%rsp), %rax
    00000bec: 	leaq	0x1(%rax), %rsi
    00000bf0: 	callq	_ZdlPvm@PLT # Offset: 3056
.Ltmp1926:
    00000bf5: 	movq	0x60(%rsp), %rdi
    00000bfa: 	cmpq	0x38(%rsp), %rdi
    00000bff: 	je	.Ltmp1927 # Offset: 3071
    00000c01: 	movq	0x70(%rsp), %rax
    00000c06: 	leaq	0x1(%rax), %rsi
    00000c0a: 	callq	_ZdlPvm@PLT # Offset: 3082
.Ltmp1927:
    00000c0f: 	movq	0x3f48(%rsp), %rax
    00000c17: 	subq	%fs:0x28, %rax
    00000c20: 	jne	.Ltmp1928 # Offset: 3104
    00000c26: 	addq	$0x3f58, %rsp
    00000c2d: 	popq	%rbx
    00000c2e: 	popq	%rbp
    00000c2f: 	popq	%r12
    00000c31: 	popq	%r13
    00000c33: 	popq	%r14
    00000c35: 	popq	%r15
    00000c37: 	retq # Offset: 3127
    00000c38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1881:
    00000c40: 	addl	$0x1, %r14d
    00000c44: 	cmpl	iterations(%rip), %r14d
    00000c4b: 	jl	.Ltmp1882 # Offset: 3147
    00000c51: 	jmp	.Ltmp1874 # Offset: 3153
    00000c56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1879:
    00000c60: 	testq	%r12, %r12
    00000c63: 	jne	.Ltmp1929 # Offset: 3171
    00000c69: 	movq	%r15, %rax
    00000c6c: 	jmp	.Ltmp1930 # Offset: 3180
    00000c71: 	nopl	(%rax) # Size: 7
.Ltmp1878:
    00000c78: 	movq	0x20(%rsp), %rsi
    00000c7d: 	leaq	0xa0(%rsp), %rdi
    00000c85: 	xorl	%edx, %edx
    00000c87: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3207
    00000c8c: 	movq	%rax, 0xa0(%rsp)
    00000c94: 	movq	%rax, %rdi
    00000c97: 	movq	0x40(%rsp), %rax
    00000c9c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1950:
    00000ca4: 	movq	%r12, %rdx
    00000ca7: 	movq	%r13, %rsi
    00000caa: 	callq	memcpy@PLT # Offset: 3242
    00000caf: 	movq	0x40(%rsp), %r12
    00000cb4: 	movq	0xa0(%rsp), %rax
    00000cbc: 	jmp	.Ltmp1930 # Offset: 3260
.Ltmp1889:
    00000cc1: 	testq	%r12, %r12
    00000cc4: 	jne	.Ltmp1931 # Offset: 3268
    00000cca: 	movq	(%rsp), %rax
    00000cce: 	jmp	.Ltmp1932 # Offset: 3278
    00000cd3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1898:
    00000cd8: 	addl	$0x1, %ebx
    00000cdb: 	cmpl	iterations(%rip), %ebx
    00000ce1: 	jl	.Ltmp1899 # Offset: 3297
    00000ce7: 	jmp	.Ltmp1891 # Offset: 3303
    00000cec: 	nopl	(%rax) # Size: 4
.Ltmp1896:
    00000cf0: 	testq	%r12, %r12
    00000cf3: 	jne	.Ltmp1933 # Offset: 3315
    00000cf9: 	movq	%r15, %rax
    00000cfc: 	jmp	.Ltmp1934 # Offset: 3324
    00000d01: 	nopl	(%rax) # Size: 7
.Ltmp1895:
    00000d08: 	movq	0x20(%rsp), %rsi
    00000d0d: 	leaq	0xa0(%rsp), %rdi
    00000d15: 	xorl	%edx, %edx
    00000d17: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3351
    00000d1c: 	movq	%rax, 0xa0(%rsp)
    00000d24: 	movq	%rax, %rdi
    00000d27: 	movq	0x40(%rsp), %rax
    00000d2c: 	movq	%rax, 0xb0(%rsp)
.Ltmp1946:
    00000d34: 	movq	%r12, %rdx
    00000d37: 	movq	%r13, %rsi
    00000d3a: 	callq	memcpy@PLT # Offset: 3386
    00000d3f: 	movq	0x40(%rsp), %r12
    00000d44: 	movq	0xa0(%rsp), %rax
    00000d4c: 	jmp	.Ltmp1934 # Offset: 3404
.Ltmp1907:
    00000d51: 	testq	%r12, %r12
    00000d54: 	jne	.Ltmp1935 # Offset: 3412
    00000d5a: 	movq	%r15, %rax
    00000d5d: 	jmp	.Ltmp1936 # Offset: 3421
.Ltmp1922:
    00000d62: 	testq	%r12, %r12
    00000d65: 	jne	.Ltmp1937 # Offset: 3429
    00000d6b: 	movq	%r15, %rax
    00000d6e: 	jmp	.Ltmp1938 # Offset: 3438
.Ltmp1914:
    00000d73: 	testq	%r12, %r12
    00000d76: 	jne	.Ltmp1939 # Offset: 3446
    00000d7c: 	movq	%r15, %rax
    00000d7f: 	jmp	.Ltmp1940 # Offset: 3455
.Ltmp1913:
    00000d84: 	movq	0x20(%rsp), %rsi
    00000d89: 	xorl	%edx, %edx
    00000d8b: 	movq	%rbp, %rdi
    00000d8e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3470
    00000d93: 	movq	%rax, 0xa0(%rsp)
    00000d9b: 	movq	%rax, %rdi
    00000d9e: 	movq	0x40(%rsp), %rax
    00000da3: 	movq	%rax, 0xb0(%rsp)
.Ltmp1949:
    00000dab: 	movq	%r12, %rdx
    00000dae: 	movq	%r13, %rsi
    00000db1: 	callq	memcpy@PLT # Offset: 3505
    00000db6: 	movq	0x40(%rsp), %r12
    00000dbb: 	movq	0xa0(%rsp), %rax
    00000dc3: 	jmp	.Ltmp1940 # Offset: 3523
.Ltmp1888:
    00000dc8: 	movq	0x20(%rsp), %rsi
    00000dcd: 	movq	0x30(%rsp), %rdi
    00000dd2: 	xorl	%edx, %edx
    00000dd4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3540
    00000dd9: 	movq	%rax, 0x80(%rsp)
    00000de1: 	movq	%rax, %rdi
    00000de4: 	movq	0x40(%rsp), %rax
    00000de9: 	movq	%rax, 0x90(%rsp)
.Ltmp1945:
    00000df1: 	movq	%r12, %rdx
    00000df4: 	movq	%r13, %rsi
    00000df7: 	callq	memcpy@PLT # Offset: 3575
    00000dfc: 	movq	0x40(%rsp), %r12
    00000e01: 	movq	0x80(%rsp), %rax
    00000e09: 	jmp	.Ltmp1932 # Offset: 3593
.Ltmp1906:
    00000e0e: 	movq	0x20(%rsp), %rsi
    00000e13: 	xorl	%edx, %edx
    00000e15: 	movq	%rbp, %rdi
    00000e18: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3608
    00000e1d: 	movq	%rax, 0xa0(%rsp)
    00000e25: 	movq	%rax, %rdi
    00000e28: 	movq	0x40(%rsp), %rax
    00000e2d: 	movq	%rax, 0xb0(%rsp)
.Ltmp1947:
    00000e35: 	movq	%r12, %rdx
    00000e38: 	movq	%r13, %rsi
    00000e3b: 	callq	memcpy@PLT # Offset: 3643
    00000e40: 	movq	0x40(%rsp), %r12
    00000e45: 	movq	0xa0(%rsp), %rax
    00000e4d: 	jmp	.Ltmp1936 # Offset: 3661
.Ltmp1921:
    00000e52: 	movq	0x20(%rsp), %rsi
    00000e57: 	xorl	%edx, %edx
    00000e59: 	movq	%rbp, %rdi
    00000e5c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3676
    00000e61: 	movq	%rax, 0xa0(%rsp)
    00000e69: 	movq	%rax, %rdi
    00000e6c: 	movq	0x40(%rsp), %rax
    00000e71: 	movq	%rax, 0xb0(%rsp)
.Ltmp1948:
    00000e79: 	movq	%r12, %rdx
    00000e7c: 	movq	%r13, %rsi
    00000e7f: 	callq	memcpy@PLT # Offset: 3711
    00000e84: 	movq	0x40(%rsp), %r12
    00000e89: 	movq	0xa0(%rsp), %rax
    00000e91: 	jmp	.Ltmp1938 # Offset: 3729
.Ltmp1884:
    00000e96: 	movq	-0x8(%rdx), %rax
    00000e9a: 	addq	$0x200, %rax
    00000ea0: 	jmp	.Ltmp1941 # Offset: 3744
.Ltmp1901:
    00000ea5: 	movq	-0x8(%rdx), %rax
    00000ea9: 	addq	$0x200, %rax
    00000eaf: 	jmp	.Ltmp1942 # Offset: 3759
.Ltmp1900:
    00000eb4: 	movq	0x30(%rsp), %rsi
    00000eb9: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000ec0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3776
    00000ec5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000ecc: 	jmp	.Ltmp1943 # Offset: 3788
.Ltmp1883:
    00000ed1: 	movq	0x30(%rsp), %rsi
    00000ed6: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000edd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3805
    00000ee2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000ee9: 	jmp	.Ltmp1944 # Offset: 3817
.Ltmp1887:
    00000eee: 	leaq	DATAat0x19008(%rip), %rdi
    00000ef5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3829
.Ltmp1890:
    00000efa: 	leaq	DATAat0x19184(%rip), %rdi
    00000f01: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3841
.Ltmp1894:
    00000f06: 	leaq	DATAat0x19008(%rip), %rdi
    00000f0d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3853
.Ltmp1905:
    00000f12: 	leaq	DATAat0x19008(%rip), %rdi
    00000f19: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3865
.Ltmp1908:
    00000f1e: 	leaq	DATAat0x19184(%rip), %rdi
    00000f25: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3877
.Ltmp1912:
    00000f2a: 	leaq	DATAat0x19008(%rip), %rdi
    00000f31: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3889
.Ltmp1915:
    00000f36: 	leaq	DATAat0x19184(%rip), %rdi
    00000f3d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3901
.Ltmp1920:
    00000f42: 	leaq	DATAat0x19008(%rip), %rdi
    00000f49: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3913
.Ltmp1923:
    00000f4e: 	leaq	DATAat0x19184(%rip), %rdi
    00000f55: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3925
.Ltmp1928:
    00000f5a: 	callq	__stack_chk_fail@PLT # Offset: 3930
.Ltmp1931:
    00000f5f: 	movq	(%rsp), %rdi
    00000f63: 	jmp	.Ltmp1945 # Offset: 3939
.Ltmp1933:
    00000f68: 	movq	%r15, %rdi
    00000f6b: 	jmp	.Ltmp1946 # Offset: 3947
.Ltmp1935:
    00000f70: 	movq	%r15, %rdi
    00000f73: 	jmp	.Ltmp1947 # Offset: 3955
.Ltmp1937:
    00000f78: 	movq	%r15, %rdi
    00000f7b: 	jmp	.Ltmp1948 # Offset: 3963
.Ltmp1939:
    00000f80: 	movq	%r15, %rdi
    00000f83: 	jmp	.Ltmp1949 # Offset: 3971
.Ltmp1929:
    00000f88: 	movq	%r15, %rdi
    00000f8b: 	jmp	.Ltmp1950 # Offset: 3979
.Ltmp1877:
    00000f90: 	leaq	DATAat0x19008(%rip), %rdi
    00000f97: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3991
    00000f9c: 	endbr64
.Ltmp1952:
    00000fa0: 	movq	%rax, %rbp
    00000fa3: 	jmp	.Ltmp1951 # Offset: 4003
    00000fa8: 	endbr64
    00000fac: 	jmp	.Ltmp1952 # Offset: 4012
    00000fae: 	endbr64
    00000fb2: 	jmp	.Ltmp1952 # Offset: 4018
    00000fb4: 	endbr64
    00000fb8: 	jmp	.Ltmp1952 # Offset: 4024
    00000fba: 	endbr64
    00000fbe: 	jmp	.Ltmp1952 # Offset: 4030
    00000fc0: 	endbr64
    00000fc4: 	jmp	.Ltmp1952 # Offset: 4036
    00000fc6: 	endbr64
    00000fca: 	jmp	.Ltmp1952 # Offset: 4042
    00000fcc: 	endbr64
    00000fd0: 	jmp	.Ltmp1952 # Offset: 4048
    00000fd2: 	endbr64
    00000fd6: 	jmp	.Ltmp1952 # Offset: 4054
    00000fd8: 	endbr64
.Ltmp1956:
    00000fdc: 	movq	%rax, %rbp
    00000fdf: 	jmp	.Ltmp1953 # Offset: 4063
    00000fe1: 	endbr64
    00000fe5: 	movq	%rax, %rbp
    00000fe8: 	movq	0xa0(%rsp), %rdi
    00000ff0: 	cmpq	%r15, %rdi
    00000ff3: 	je	.Ltmp1953 # Offset: 4083
    00000ff5: 	movq	0xb0(%rsp), %rax
    00000ffd: 	leaq	0x1(%rax), %rsi
    00001001: 	callq	_ZdlPvm@PLT # Offset: 4097
.Ltmp1953:
    00001006: 	movq	0x80(%rsp), %rdi
    0000100e: 	cmpq	(%rsp), %rdi
    00001012: 	je	.Ltmp1954 # Offset: 4114
.Ltmp1960:
    00001014: 	movq	0x90(%rsp), %rax
    0000101c: 	leaq	0x1(%rax), %rsi
    00001020: 	callq	_ZdlPvm@PLT # Offset: 4128
.Ltmp1954:
    00001025: 	movq	0x60(%rsp), %rdi
    0000102a: 	cmpq	0x38(%rsp), %rdi
    0000102f: 	je	.Ltmp1955 # Offset: 4143
    00001031: 	movq	0x70(%rsp), %rax
    00001036: 	leaq	0x1(%rax), %rsi
    0000103a: 	callq	_ZdlPvm@PLT # Offset: 4154
.Ltmp1955:
    0000103f: 	movq	%rbp, %rdi
    00001042: 	callq	_Unwind_Resume@PLT # Offset: 4162
    00001047: 	endbr64
    0000104b: 	jmp	.Ltmp1952 # Offset: 4171
    00001050: 	endbr64
    00001054: 	jmp	.Ltmp1952 # Offset: 4180
    00001059: 	endbr64
    0000105d: 	jmp	.Ltmp1956 # Offset: 4189
    00001062: 	endbr64
    00001066: 	movq	%rax, %rbp
    00001069: 	jmp	.Ltmp1957 # Offset: 4201
    0000106b: 	endbr64
    0000106f: 	movq	%rax, %rbp
    00001072: 	jmp	.Ltmp1958 # Offset: 4210
    00001074: 	endbr64
    00001078: 	movq	%rax, %rbp
    0000107b: 	jmp	.Ltmp1954 # Offset: 4219
    0000107d: 	endbr64
    00001081: 	movq	%rax, %rbp
    00001084: 	jmp	.Ltmp1959 # Offset: 4228
.Ltmp1957:
    00001086: 	movq	0xa0(%rsp), %rdi
    0000108e: 	leaq	0xb0(%rsp), %rax
    00001096: 	cmpq	%rax, %rdi
    00001099: 	je	.Ltmp1954 # Offset: 4249
.Ltmp1961:
    0000109b: 	movq	0xb0(%rsp), %rax
    000010a3: 	leaq	0x1(%rax), %rsi
    000010a7: 	callq	_ZdlPvm@PLT # Offset: 4263
    000010ac: 	jmp	.Ltmp1954 # Offset: 4268
.Ltmp1958:
    000010b1: 	movq	0xa0(%rsp), %rdi
    000010b9: 	cmpq	%r15, %rdi
    000010bc: 	je	.Ltmp1959 # Offset: 4284
    000010be: 	movq	0xb0(%rsp), %rax
    000010c6: 	leaq	0x1(%rax), %rsi
    000010ca: 	callq	_ZdlPvm@PLT # Offset: 4298
.Ltmp1959:
    000010cf: 	movq	0x80(%rsp), %rdi
    000010d7: 	leaq	0x90(%rsp), %rax
    000010df: 	cmpq	%rax, %rdi
    000010e2: 	jne	.Ltmp1960 # Offset: 4322
    000010e8: 	jmp	.Ltmp1954 # Offset: 4328
.Ltmp1951:
    000010ed: 	movq	0xa0(%rsp), %rdi
    000010f5: 	cmpq	%r15, %rdi
    000010f8: 	jne	.Ltmp1961 # Offset: 4344
    000010fa: 	jmp	.Ltmp1954 # Offset: 4346
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeItEvv"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x173f0
  Size        : 0xed8
  MaxSize     : 0xed8
  Offset      : 0x173f0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp1962:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1962 # Offset: 37
    00000027: 	subq	$0xad8, %rsp
    0000002e: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    00000036: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    0000003e: 	movl	$0x656c, %ecx
    00000043: 	movq	%fs:0x28, %rax
    0000004c: 	movq	%rax, 0xfac8(%rsp)
    00000054: 	xorl	%eax, %eax
    00000056: 	leaq	0x40(%rsp), %rdi
    0000005b: 	leaq	0x70(%rsp), %rax
    00000060: 	movw	%cx, 0x74(%rsp)
    00000065: 	movq	%rax, 0x38(%rsp)
    0000006a: 	leaq	0xc0(%rsp), %r14
    00000072: 	movq	%rax, 0x60(%rsp)
    00000077: 	movq	%rdi, 0x20(%rsp)
    0000007c: 	movaps	%xmm4, 0x40(%rsp)
    00000081: 	movaps	%xmm5, 0x50(%rsp)
    00000086: 	movl	$0x62756f64, 0x70(%rsp)
    0000008e: 	movq	$0x6, 0x68(%rsp)
    00000097: 	movb	$0x0, 0x76(%rsp)
    0000009c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E.constprop.0/1" # Offset: 156
    000000a1: 	movl	init_value(%rip), %eax
    000000a7: 	leal	0x7b(%rax), %edi
    000000aa: 	callq	srand@PLT # Offset: 170
    000000af: 	movq	%r14, %rdx
    000000b2: 	leaq	0xfac0(%rsp), %rsi
    000000ba: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000c4: 	movabsq	$0x14057b7ef767814f, %rdi
    000000ce: 	nop # Size: 2
.Ltmp1963:
    000000d0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000d7: 	pxor	%xmm0, %xmm0
    000000db: 	addq	$0x8, %rdx
    000000df: 	imulq	%r8, %rax
    000000e3: 	addq	%rdi, %rax
    000000e6: 	movq	%rax, %rcx
    000000e9: 	movq	%rax, %r9
    000000ec: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000f3: 	shrq	$0x14, %rcx
    000000f7: 	shlq	$0x17, %r9
    000000fb: 	xorq	%r9, %rcx
    000000fe: 	xorq	%rcx, %rax
    00000101: 	sarq	$0x3, %rax
    00000105: 	cvtsi2sd	%rax, %xmm0
    0000010a: 	movsd	%xmm0, -0x8(%rdx)
    0000010f: 	cmpq	%rsi, %rdx
    00000112: 	jne	.Ltmp1963 # Offset: 274
    00000114: 	pxor	%xmm2, %xmm2
    00000118: 	leaq	0x210(%rsp), %rdx
    00000120: 	movq	%r14, %rax
    00000123: 	cvtsi2sdl	init_value(%rip), %xmm2
    0000012b: 	unpcklpd	%xmm2, %xmm2
    0000012f: 	nop # Size: 1
.Ltmp1964:
    00000130: 	movaps	%xmm2, (%rax)
    00000133: 	addq	$0x10, %rax
    00000137: 	cmpq	%rax, %rdx
    0000013a: 	jne	.Ltmp1964 # Offset: 314
    0000013c: 	leaq	0xc8(%rsp), %rdi
    00000144: 	movabsq	$0x5851f42d4c957f2d, %r10
    0000014e: 	movabsq	$0x14057b7ef767814f, %r9
    00000158: 	movabsq	$0x20c49ba5e353f7d, %r8
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1965:
    00000168: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000016f: 	movsd	(%rdi), %xmm0
    00000173: 	addq	$0x8, %rdi
    00000177: 	imulq	%r10, %rax
    0000017b: 	addq	%r9, %rax
    0000017e: 	movq	%rax, %rdx
    00000181: 	movq	%rax, %rcx
    00000184: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000018b: 	shlq	$0x17, %rcx
    0000018f: 	shrq	$0x14, %rdx
    00000193: 	xorq	%rcx, %rdx
    00000196: 	xorq	%rdx, %rax
    00000199: 	movq	%rax, %rdx
    0000019c: 	movq	%rax, %rcx
    0000019f: 	shrq	$0x6, %rdx
    000001a3: 	movq	%rdx, %rax
    000001a6: 	mulq	%r8
    000001a9: 	movq	%rcx, %rax
    000001ac: 	imulq	$0x1f40, %rdx, %rdx
    000001b3: 	subq	%rdx, %rax
    000001b6: 	leaq	(%r14,%rax,8), %rax
    000001ba: 	movsd	(%rax), %xmm1
    000001be: 	movsd	%xmm1, -0x8(%rdi)
    000001c3: 	movsd	%xmm0, (%rax)
    000001c7: 	cmpq	%rsi, %rdi
    000001ca: 	jne	.Ltmp1965 # Offset: 458
    000001cc: 	leaq	0xfa00(%r14), %rbp
    000001d3: 	movq	%r14, %rax
    000001d6: 	pxor	%xmm1, %xmm1
    000001da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1966:
    000001e0: 	movapd	%xmm2, %xmm0
    000001e4: 	addq	$0x10, %rax
    000001e8: 	cmpeqpd	-0x10(%rax), %xmm0
    000001ee: 	psubq	%xmm0, %xmm1
    000001f2: 	cmpq	%rax, %rbp
    000001f5: 	jne	.Ltmp1966 # Offset: 501
    000001f7: 	movq	0x60(%rsp), %r13
    000001fc: 	movdqa	%xmm1, %xmm0
    00000200: 	movq	0x68(%rsp), %r12
    00000205: 	leaq	0x90(%rsp), %rax
    0000020d: 	movq	%rax, 0x28(%rsp)
    00000212: 	psrldq	$0x8, %xmm0
    00000217: 	movq	%rax, 0x80(%rsp)
    0000021f: 	movq	%r13, %rax
    00000222: 	paddq	%xmm0, %xmm1
    00000226: 	movq	%xmm1, gCount(%rip)
    0000022e: 	addq	%r12, %rax
    00000231: 	je	.Ltmp1967 # Offset: 561
    00000233: 	testq	%r13, %r13
    00000236: 	je	.Ltmp1968 # Offset: 566
.Ltmp1967:
    0000023c: 	movq	%r12, 0x40(%rsp)
    00000241: 	cmpq	$0xf, %r12
    00000245: 	ja	.Ltmp1969 # Offset: 581
    0000024b: 	cmpq	$0x1, %r12
    0000024f: 	jne	.Ltmp1970 # Offset: 591
    00000255: 	movzbl	(%r13), %eax
    0000025a: 	movb	%al, 0x90(%rsp)
    00000261: 	movq	0x28(%rsp), %rax
.Ltmp2018:
    00000266: 	movq	%r12, 0x88(%rsp)
    0000026e: 	movb	$0x0, (%rax,%r12)
    00000273: 	movabsq	$0x3fffffffffffffff, %rax
    0000027d: 	subq	0x88(%rsp), %rax
    00000285: 	cmpq	$0xa, %rax
    00000289: 	jbe	.Ltmp1971 # Offset: 649
    0000028f: 	leaq	0x80(%rsp), %rax
    00000297: 	movl	$0xb, %edx
    0000029c: 	leaq	DATAat0x191e0(%rip), %rsi
    000002a3: 	movq	%rax, %rdi
    000002a6: 	movq	%rax, 0x30(%rsp)
    000002ab: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 683
    000002b0: 	pxor	%xmm6, %xmm6
    000002b4: 	xorl	%ebx, %ebx
    000002b6: 	leaq	0xb0(%rsp), %r15
    000002be: 	cvtsi2sdl	init_value(%rip), %xmm6
    000002c6: 	movq	%xmm6, %r12
    000002cb: 	callq	clock@PLT # Offset: 715
    000002d0: 	movq	%r12, %xmm3
    000002d5: 	movl	iterations(%rip), %edx
    000002db: 	unpcklpd	%xmm3, %xmm3
    000002df: 	movq	%rax, start_time(%rip)
    000002e6: 	movaps	%xmm3, (%rsp)
    000002ea: 	testl	%edx, %edx
    000002ec: 	jle	.Ltmp1972 # Offset: 748
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1980:
    000002f8: 	movq	%r14, %rax
    000002fb: 	pxor	%xmm1, %xmm1
    000002ff: 	nop # Size: 1
.Ltmp1973:
    00000300: 	movapd	(%rsp), %xmm0
    00000305: 	addq	$0x10, %rax
    00000309: 	cmpeqpd	-0x10(%rax), %xmm0
    0000030f: 	psubq	%xmm0, %xmm1
    00000313: 	cmpq	%rbp, %rax
    00000316: 	jne	.Ltmp1973 # Offset: 790
    00000318: 	movq	0x80(%rsp), %r13
    00000320: 	movdqa	%xmm1, %xmm0
    00000324: 	movq	0x88(%rsp), %r12
    0000032c: 	movq	%r15, 0xa0(%rsp)
    00000334: 	psrldq	$0x8, %xmm0
    00000339: 	movq	%r13, %rax
    0000033c: 	paddq	%xmm0, %xmm1
    00000340: 	addq	%r12, %rax
    00000343: 	movq	%xmm1, 0x18(%rsp)
    00000349: 	je	.Ltmp1974 # Offset: 841
    0000034b: 	testq	%r13, %r13
    0000034e: 	je	.Ltmp1975 # Offset: 846
.Ltmp1974:
    00000354: 	movq	%r12, 0x40(%rsp)
    00000359: 	cmpq	$0xf, %r12
    0000035d: 	ja	.Ltmp1976 # Offset: 861
    00000363: 	cmpq	$0x1, %r12
    00000367: 	jne	.Ltmp1977 # Offset: 871
    0000036d: 	movzbl	(%r13), %eax
    00000372: 	movb	%al, 0xb0(%rsp)
    00000379: 	movq	%r15, %rax
.Ltmp2020:
    0000037c: 	movq	%r12, 0xa8(%rsp)
    00000384: 	movb	$0x0, (%rax,%r12)
    00000389: 	movq	0x18(%rsp), %rax
    0000038e: 	cmpq	gCount(%rip), %rax
    00000395: 	je	.Ltmp1978 # Offset: 917
    00000397: 	movq	0xa0(%rsp), %rdx
    0000039f: 	leaq	DATAat0x191d0(%rip), %rsi
    000003a6: 	movl	$0x1, %edi
    000003ab: 	xorl	%eax, %eax
    000003ad: 	callq	__printf_chk@PLT # Offset: 941
.Ltmp1978:
    000003b2: 	movq	0xa0(%rsp), %rdi
    000003ba: 	cmpq	%r15, %rdi
    000003bd: 	je	.Ltmp1979 # Offset: 957
    000003c3: 	movq	0xb0(%rsp), %rax
    000003cb: 	addl	$0x1, %ebx
    000003ce: 	leaq	0x1(%rax), %rsi
    000003d2: 	callq	_ZdlPvm@PLT # Offset: 978
    000003d7: 	cmpl	iterations(%rip), %ebx
    000003dd: 	jl	.Ltmp1980 # Offset: 989
.Ltmp1972:
    000003e3: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000003ea: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000003f1: 	subq	$0x20, %rax
    000003f5: 	cmpq	%rax, %rdi
    000003f8: 	je	.Ltmp1981 # Offset: 1016
    000003fe: 	leaq	0x10(%rdi), %rax
    00000402: 	movq	0x88(%rsp), %rdx
    0000040a: 	movq	%rax, (%rdi)
    0000040d: 	movq	0x80(%rsp), %rsi
    00000415: 	addq	%rsi, %rdx
    00000418: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1048
    0000041d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000424: 	addq	$0x20, %rax
    00000428: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2029:
    0000042f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000436: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000043d: 	je	.Ltmp1982 # Offset: 1085
.Ltmp2028:
    00000443: 	movq	-0x20(%rax), %r12
    00000447: 	callq	clock@PLT # Offset: 1095
    0000044c: 	pxor	%xmm0, %xmm0
    00000450: 	movq	%rax, end_time(%rip)
    00000457: 	movq	%r12, %rdi
    0000045a: 	subq	start_time(%rip), %rax
    00000461: 	cvtsi2sd	%rax, %xmm0
    00000466: 	divsd	DATAat0x19290(%rip), %xmm0
    0000046e: 	callq	_Z13record_resultdPKc # Offset: 1134
    00000473: 	movq	0x80(%rsp), %rdi
    0000047b: 	cmpq	0x28(%rsp), %rdi
    00000480: 	je	.Ltmp1983 # Offset: 1152
    00000482: 	movq	0x90(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp1983:
    00000493: 	leaq	0x60(%rsp), %rax
    00000498: 	movq	0x30(%rsp), %rdi
    0000049d: 	leaq	DATAat0x191ec(%rip), %rdx
    000004a4: 	movq	%rax, %rsi
    000004a7: 	movq	%rax, 0x18(%rsp)
    000004ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1196
    000004b1: 	callq	clock@PLT # Offset: 1201
    000004b6: 	xorl	%ebx, %ebx
    000004b8: 	leaq	0xb0(%rsp), %r15
    000004c0: 	movq	%rax, start_time(%rip)
    000004c7: 	movl	iterations(%rip), %eax
    000004cd: 	testl	%eax, %eax
    000004cf: 	jle	.Ltmp1984 # Offset: 1231
    000004d5: 	nopl	(%rax) # Size: 3
.Ltmp1992:
    000004d8: 	pxor	%xmm2, %xmm2
    000004dc: 	movq	%r14, %rax
    000004df: 	pxor	%xmm1, %xmm1
    000004e3: 	cvtsi2sdl	init_value(%rip), %xmm2
    000004eb: 	unpcklpd	%xmm2, %xmm2
    000004ef: 	nop # Size: 1
.Ltmp1985:
    000004f0: 	movapd	%xmm2, %xmm0
    000004f4: 	addq	$0x10, %rax
    000004f8: 	cmpeqpd	-0x10(%rax), %xmm0
    000004fe: 	psubq	%xmm0, %xmm1
    00000502: 	cmpq	%rbp, %rax
    00000505: 	jne	.Ltmp1985 # Offset: 1285
    00000507: 	movq	0x80(%rsp), %r13
    0000050f: 	movdqa	%xmm1, %xmm0
    00000513: 	movq	0x88(%rsp), %r12
    0000051b: 	movq	%r15, 0xa0(%rsp)
    00000523: 	psrldq	$0x8, %xmm0
    00000528: 	movq	%r13, %rax
    0000052b: 	paddq	%xmm0, %xmm1
    0000052f: 	addq	%r12, %rax
    00000532: 	movq	%xmm1, (%rsp)
    00000537: 	je	.Ltmp1986 # Offset: 1335
    00000539: 	testq	%r13, %r13
    0000053c: 	je	.Ltmp1987 # Offset: 1340
.Ltmp1986:
    00000542: 	movq	%r12, 0x40(%rsp)
    00000547: 	cmpq	$0xf, %r12
    0000054b: 	ja	.Ltmp1988 # Offset: 1355
    00000551: 	cmpq	$0x1, %r12
    00000555: 	jne	.Ltmp1989 # Offset: 1365
    0000055b: 	movzbl	(%r13), %eax
    00000560: 	movb	%al, 0xb0(%rsp)
    00000567: 	movq	%r15, %rax
.Ltmp2022:
    0000056a: 	movq	%r12, 0xa8(%rsp)
    00000572: 	movb	$0x0, (%rax,%r12)
    00000577: 	movq	(%rsp), %rax
    0000057b: 	cmpq	gCount(%rip), %rax
    00000582: 	je	.Ltmp1990 # Offset: 1410
    00000584: 	movq	0xa0(%rsp), %rdx
    0000058c: 	leaq	DATAat0x191d0(%rip), %rsi
    00000593: 	movl	$0x1, %edi
    00000598: 	xorl	%eax, %eax
    0000059a: 	callq	__printf_chk@PLT # Offset: 1434
.Ltmp1990:
    0000059f: 	movq	0xa0(%rsp), %rdi
    000005a7: 	cmpq	%r15, %rdi
    000005aa: 	je	.Ltmp1991 # Offset: 1450
    000005b0: 	movq	0xb0(%rsp), %rax
    000005b8: 	addl	$0x1, %ebx
    000005bb: 	leaq	0x1(%rax), %rsi
    000005bf: 	callq	_ZdlPvm@PLT # Offset: 1471
    000005c4: 	cmpl	iterations(%rip), %ebx
    000005ca: 	jl	.Ltmp1992 # Offset: 1482
.Ltmp1984:
    000005d0: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000005d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000005de: 	subq	$0x20, %rax
    000005e2: 	cmpq	%rax, %rdi
    000005e5: 	je	.Ltmp1993 # Offset: 1509
    000005eb: 	leaq	0x10(%rdi), %rax
    000005ef: 	movq	0x88(%rsp), %rdx
    000005f7: 	movq	%rax, (%rdi)
    000005fa: 	movq	0x80(%rsp), %rsi
    00000602: 	addq	%rsi, %rdx
    00000605: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1541
    0000060a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000611: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000618: 	addq	$0x20, %rax
    0000061c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000623: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000062a: 	je	.Ltmp1994 # Offset: 1578
.Ltmp2027:
    00000630: 	movq	-0x20(%rax), %rbp
    00000634: 	callq	clock@PLT # Offset: 1588
    00000639: 	pxor	%xmm0, %xmm0
    0000063d: 	movq	%rax, end_time(%rip)
    00000644: 	movq	%rbp, %rdi
    00000647: 	subq	start_time(%rip), %rax
    0000064e: 	cvtsi2sd	%rax, %xmm0
    00000653: 	divsd	DATAat0x19290(%rip), %xmm0
    0000065b: 	callq	_Z13record_resultdPKc # Offset: 1627
    00000660: 	movq	0x80(%rsp), %rdi
    00000668: 	cmpq	0x28(%rsp), %rdi
    0000066d: 	je	.Ltmp1995 # Offset: 1645
    0000066f: 	movq	0x90(%rsp), %rax
    00000677: 	leaq	0x1(%rax), %rsi
    0000067b: 	callq	_ZdlPvm@PLT # Offset: 1659
.Ltmp1995:
    00000680: 	leaq	0xa0(%rsp), %rbp
    00000688: 	movq	0x18(%rsp), %rsi
    0000068d: 	leaq	DATAat0x191fb(%rip), %rdx
    00000694: 	movq	%rbp, %rdi
    00000697: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1687
    0000069c: 	pxor	%xmm0, %xmm0
    000006a0: 	movq	%rbp, %rcx
    000006a3: 	movl	$0x1f40, %esi
    000006a8: 	movq	%r14, %rdi
    000006ab: 	cvtsi2sdl	init_value(%rip), %xmm0
    000006b3: 	leaq	_Z6count1IdEmPT_iS0_(%rip), %rdx
    000006ba: 	callq	_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1722
    000006bf: 	movq	0xa0(%rsp), %rdi
    000006c7: 	leaq	0xb0(%rsp), %r15
    000006cf: 	cmpq	%r15, %rdi
    000006d2: 	je	.Ltmp1996 # Offset: 1746
    000006d4: 	movq	0xb0(%rsp), %rax
    000006dc: 	leaq	0x1(%rax), %rsi
    000006e0: 	callq	_ZdlPvm@PLT # Offset: 1760
.Ltmp1996:
    000006e5: 	movq	0x18(%rsp), %rsi
    000006ea: 	leaq	DATAat0x19203(%rip), %rdx
    000006f1: 	movq	%rbp, %rdi
    000006f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1780
    000006f9: 	pxor	%xmm0, %xmm0
    000006fd: 	movq	%rbp, %rcx
    00000700: 	movl	$0x1f40, %esi
    00000705: 	movq	%r14, %rdi
    00000708: 	cvtsi2sdl	init_value(%rip), %xmm0
    00000710: 	leaq	_Z6count2IdEmPT_iS0_(%rip), %rdx
    00000717: 	callq	_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1815
    0000071c: 	movq	0xa0(%rsp), %rdi
    00000724: 	cmpq	%r15, %rdi
    00000727: 	je	.Ltmp1997 # Offset: 1831
    00000729: 	movq	0xb0(%rsp), %rax
    00000731: 	leaq	0x1(%rax), %rsi
    00000735: 	callq	_ZdlPvm@PLT # Offset: 1845
.Ltmp1997:
    0000073a: 	movq	0x18(%rsp), %rsi
    0000073f: 	leaq	DATAat0x1920b(%rip), %rdx
    00000746: 	movq	%rbp, %rdi
    00000749: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1865
    0000074e: 	pxor	%xmm0, %xmm0
    00000752: 	movq	%rbp, %rcx
    00000755: 	movl	$0x1f40, %esi
    0000075a: 	movq	%r14, %rdi
    0000075d: 	cvtsi2sdl	init_value(%rip), %xmm0
    00000765: 	leaq	_Z6count3IdEmPT_iS0_(%rip), %rdx
    0000076c: 	callq	_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1900
    00000771: 	movq	0xa0(%rsp), %rdi
    00000779: 	cmpq	%r15, %rdi
    0000077c: 	je	.Ltmp1998 # Offset: 1916
    0000077e: 	movq	0xb0(%rsp), %rax
    00000786: 	leaq	0x1(%rax), %rsi
    0000078a: 	callq	_ZdlPvm@PLT # Offset: 1930
.Ltmp1998:
    0000078f: 	movq	0x18(%rsp), %rsi
    00000794: 	leaq	DATAat0x19213(%rip), %rdx
    0000079b: 	movq	%rbp, %rdi
    0000079e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1950
    000007a3: 	pxor	%xmm0, %xmm0
    000007a7: 	movq	%rbp, %rcx
    000007aa: 	movl	$0x1f40, %esi
    000007af: 	movq	%r14, %rdi
    000007b2: 	cvtsi2sdl	init_value(%rip), %xmm0
    000007ba: 	leaq	_Z6count4IdEmPT_iS0_(%rip), %rdx
    000007c1: 	callq	_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1985
    000007c6: 	movq	0xa0(%rsp), %rdi
    000007ce: 	cmpq	%r15, %rdi
    000007d1: 	je	.Ltmp1999 # Offset: 2001
    000007d3: 	movq	0xb0(%rsp), %rax
    000007db: 	leaq	0x1(%rax), %rsi
    000007df: 	callq	_ZdlPvm@PLT # Offset: 2015
.Ltmp1999:
    000007e4: 	movq	0x60(%rsp), %r13
    000007e9: 	movq	0x68(%rsp), %r12
    000007ee: 	movq	%r15, 0xa0(%rsp)
    000007f6: 	movq	%r13, %rax
    000007f9: 	addq	%r12, %rax
    000007fc: 	je	.Ltmp2000 # Offset: 2044
    000007fe: 	testq	%r13, %r13
    00000801: 	je	.Ltmp2001 # Offset: 2049
.Ltmp2000:
    00000807: 	movq	%r12, 0x40(%rsp)
    0000080c: 	cmpq	$0xf, %r12
    00000810: 	ja	.Ltmp2002 # Offset: 2064
    00000816: 	cmpq	$0x1, %r12
    0000081a: 	jne	.Ltmp2003 # Offset: 2074
    00000820: 	movzbl	(%r13), %eax
    00000825: 	movb	%al, 0xb0(%rsp)
    0000082c: 	movq	%r15, %rax
.Ltmp2026:
    0000082f: 	movq	%r12, 0xa8(%rsp)
    00000837: 	movb	$0x0, (%rax,%r12)
    0000083c: 	movabsq	$0x3fffffffffffffff, %rax
    00000846: 	subq	0xa8(%rsp), %rax
    0000084e: 	cmpq	$0x6, %rax
    00000852: 	jbe	.Ltmp2004 # Offset: 2130
    00000858: 	movl	$0x7, %edx
    0000085d: 	leaq	DATAat0x1921b(%rip), %rsi
    00000864: 	movq	%rbp, %rdi
    00000867: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2151
    0000086c: 	pxor	%xmm0, %xmm0
    00000870: 	movq	%rbp, %rcx
    00000873: 	movl	$0x1f40, %esi
    00000878: 	movq	%r14, %rdi
    0000087b: 	cvtsi2sdl	init_value(%rip), %xmm0
    00000883: 	leaq	_Z6count5IdEmPT_iS0_(%rip), %rdx
    0000088a: 	callq	_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2186
    0000088f: 	movq	0xa0(%rsp), %rdi
    00000897: 	cmpq	%r15, %rdi
    0000089a: 	je	.Ltmp2005 # Offset: 2202
    0000089c: 	movq	0xb0(%rsp), %rax
    000008a4: 	leaq	0x1(%rax), %rsi
    000008a8: 	callq	_ZdlPvm@PLT # Offset: 2216
.Ltmp2005:
    000008ad: 	movq	0x18(%rsp), %rsi
    000008b2: 	leaq	DATAat0x19223(%rip), %rdx
    000008b9: 	movq	%rbp, %rdi
    000008bc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2236
    000008c1: 	pxor	%xmm0, %xmm0
    000008c5: 	movq	%rbp, %rcx
    000008c8: 	movl	$0x1f40, %esi
    000008cd: 	movq	%r14, %rdi
    000008d0: 	cvtsi2sdl	init_value(%rip), %xmm0
    000008d8: 	leaq	_Z6count6IdEmPT_iS0_(%rip), %rdx
    000008df: 	callq	_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2271
    000008e4: 	movq	0xa0(%rsp), %rdi
    000008ec: 	cmpq	%r15, %rdi
    000008ef: 	je	.Ltmp2006 # Offset: 2287
    000008f1: 	movq	0xb0(%rsp), %rax
    000008f9: 	leaq	0x1(%rax), %rsi
    000008fd: 	callq	_ZdlPvm@PLT # Offset: 2301
.Ltmp2006:
    00000902: 	movq	0x18(%rsp), %rsi
    00000907: 	leaq	DATAat0x1922b(%rip), %rdx
    0000090e: 	movq	%rbp, %rdi
    00000911: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2321
    00000916: 	pxor	%xmm0, %xmm0
    0000091a: 	movq	%rbp, %rcx
    0000091d: 	movl	$0x1f40, %esi
    00000922: 	movq	%r14, %rdi
    00000925: 	cvtsi2sdl	init_value(%rip), %xmm0
    0000092d: 	leaq	_Z6count7IdEmPT_iS0_(%rip), %rdx
    00000934: 	callq	_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2356
    00000939: 	movq	0xa0(%rsp), %rdi
    00000941: 	cmpq	%r15, %rdi
    00000944: 	je	.Ltmp2007 # Offset: 2372
    00000946: 	movq	0xb0(%rsp), %rax
    0000094e: 	leaq	0x1(%rax), %rsi
    00000952: 	callq	_ZdlPvm@PLT # Offset: 2386
.Ltmp2007:
    00000957: 	movq	0x18(%rsp), %rsi
    0000095c: 	leaq	DATAat0x19233(%rip), %rdx
    00000963: 	movq	%rbp, %rdi
    00000966: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2406
    0000096b: 	pxor	%xmm0, %xmm0
    0000096f: 	movq	%rbp, %rcx
    00000972: 	movl	$0x1f40, %esi
    00000977: 	movq	%r14, %rdi
    0000097a: 	cvtsi2sdl	init_value(%rip), %xmm0
    00000982: 	leaq	_Z6count8IdEmPT_iS0_(%rip), %rdx
    00000989: 	callq	_Z10test_countIdPFmPdidEEvPT_iS3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2441
    0000098e: 	movq	0xa0(%rsp), %rdi
    00000996: 	cmpq	%r15, %rdi
    00000999: 	je	.Ltmp2008 # Offset: 2457
    0000099b: 	movq	0xb0(%rsp), %rax
    000009a3: 	leaq	0x1(%rax), %rsi
    000009a7: 	callq	_ZdlPvm@PLT # Offset: 2471
.Ltmp2008:
    000009ac: 	movq	0x60(%rsp), %r13
    000009b1: 	movq	0x68(%rsp), %r12
    000009b6: 	movq	%r15, 0xa0(%rsp)
    000009be: 	movq	%r13, %rax
    000009c1: 	addq	%r12, %rax
    000009c4: 	je	.Ltmp2009 # Offset: 2500
    000009c6: 	testq	%r13, %r13
    000009c9: 	je	.Ltmp2010 # Offset: 2505
.Ltmp2009:
    000009cf: 	movq	%r12, 0x40(%rsp)
    000009d4: 	cmpq	$0xf, %r12
    000009d8: 	ja	.Ltmp2011 # Offset: 2520
    000009de: 	cmpq	$0x1, %r12
    000009e2: 	jne	.Ltmp2012 # Offset: 2530
    000009e8: 	movzbl	(%r13), %eax
    000009ed: 	movb	%al, 0xb0(%rsp)
    000009f4: 	movq	%r15, %rax
.Ltmp2024:
    000009f7: 	movq	%r12, 0xa8(%rsp)
    000009ff: 	movb	$0x0, (%rax,%r12)
    00000a04: 	movabsq	$0x3fffffffffffffff, %rax
    00000a0e: 	subq	0xa8(%rsp), %rax
    00000a16: 	cmpq	$0xe, %rax
    00000a1a: 	jbe	.Ltmp2013 # Offset: 2586
    00000a20: 	movl	$0xf, %edx
    00000a25: 	leaq	DATAat0x1923b(%rip), %rsi
    00000a2c: 	movq	%rbp, %rdi
    00000a2f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2607
    00000a34: 	movl	iterations(%rip), %edx
    00000a3a: 	xorl	%r8d, %r8d
    00000a3d: 	xorl	%ecx, %ecx
    00000a3f: 	movl	$0x1f40, %esi
    00000a44: 	movq	0xa0(%rsp), %rdi
    00000a4c: 	callq	_Z9summarizePKciiii # Offset: 2636
    00000a51: 	movq	0xa0(%rsp), %rdi
    00000a59: 	cmpq	%r15, %rdi
    00000a5c: 	je	.Ltmp2014 # Offset: 2652
    00000a5e: 	movq	0xb0(%rsp), %rax
    00000a66: 	leaq	0x1(%rax), %rsi
    00000a6a: 	callq	_ZdlPvm@PLT # Offset: 2666
.Ltmp2014:
    00000a6f: 	movq	0x60(%rsp), %rdi
    00000a74: 	cmpq	0x38(%rsp), %rdi
    00000a79: 	je	.Ltmp2015 # Offset: 2681
    00000a7b: 	movq	0x70(%rsp), %rax
    00000a80: 	leaq	0x1(%rax), %rsi
    00000a84: 	callq	_ZdlPvm@PLT # Offset: 2692
.Ltmp2015:
    00000a89: 	movq	0xfac8(%rsp), %rax
    00000a91: 	subq	%fs:0x28, %rax
    00000a9a: 	jne	.Ltmp2016 # Offset: 2714
    00000aa0: 	addq	$0xfad8, %rsp
    00000aa7: 	popq	%rbx
    00000aa8: 	popq	%rbp
    00000aa9: 	popq	%r12
    00000aab: 	popq	%r13
    00000aad: 	popq	%r14
    00000aaf: 	popq	%r15
    00000ab1: 	retq # Offset: 2737
.Ltmp1970:
    00000ab2: 	testq	%r12, %r12
    00000ab5: 	jne	.Ltmp2017 # Offset: 2741
    00000abb: 	movq	0x28(%rsp), %rax
    00000ac0: 	jmp	.Ltmp2018 # Offset: 2752
    00000ac5: 	nopl	(%rax) # Size: 3
.Ltmp1979:
    00000ac8: 	addl	$0x1, %ebx
    00000acb: 	cmpl	iterations(%rip), %ebx
    00000ad1: 	jl	.Ltmp1980 # Offset: 2769
    00000ad7: 	jmp	.Ltmp1972 # Offset: 2775
    00000adc: 	nopl	(%rax) # Size: 4
.Ltmp1991:
    00000ae0: 	addl	$0x1, %ebx
    00000ae3: 	cmpl	iterations(%rip), %ebx
    00000ae9: 	jl	.Ltmp1992 # Offset: 2793
    00000aef: 	jmp	.Ltmp1984 # Offset: 2799
    00000af4: 	nopl	(%rax) # Size: 4
.Ltmp1977:
    00000af8: 	testq	%r12, %r12
    00000afb: 	jne	.Ltmp2019 # Offset: 2811
    00000b01: 	movq	%r15, %rax
    00000b04: 	jmp	.Ltmp2020 # Offset: 2820
    00000b09: 	nopl	(%rax) # Size: 7
.Ltmp1989:
    00000b10: 	testq	%r12, %r12
    00000b13: 	jne	.Ltmp2021 # Offset: 2835
    00000b19: 	movq	%r15, %rax
    00000b1c: 	jmp	.Ltmp2022 # Offset: 2844
    00000b21: 	nopl	(%rax) # Size: 7
.Ltmp1976:
    00000b28: 	movq	0x20(%rsp), %rsi
    00000b2d: 	leaq	0xa0(%rsp), %rdi
    00000b35: 	xorl	%edx, %edx
    00000b37: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2871
    00000b3c: 	movq	%rax, 0xa0(%rsp)
    00000b44: 	movq	%rax, %rdi
    00000b47: 	movq	0x40(%rsp), %rax
    00000b4c: 	movq	%rax, 0xb0(%rsp)
.Ltmp2031:
    00000b54: 	movq	%r12, %rdx
    00000b57: 	movq	%r13, %rsi
    00000b5a: 	callq	memcpy@PLT # Offset: 2906
    00000b5f: 	movq	0x40(%rsp), %r12
    00000b64: 	movq	0xa0(%rsp), %rax
    00000b6c: 	jmp	.Ltmp2020 # Offset: 2924
    00000b71: 	nopl	(%rax) # Size: 7
.Ltmp1988:
    00000b78: 	movq	0x20(%rsp), %rsi
    00000b7d: 	leaq	0xa0(%rsp), %rdi
    00000b85: 	xorl	%edx, %edx
    00000b87: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2951
    00000b8c: 	movq	%rax, 0xa0(%rsp)
    00000b94: 	movq	%rax, %rdi
    00000b97: 	movq	0x40(%rsp), %rax
    00000b9c: 	movq	%rax, 0xb0(%rsp)
.Ltmp2032:
    00000ba4: 	movq	%r12, %rdx
    00000ba7: 	movq	%r13, %rsi
    00000baa: 	callq	memcpy@PLT # Offset: 2986
    00000baf: 	movq	0x40(%rsp), %r12
    00000bb4: 	movq	0xa0(%rsp), %rax
    00000bbc: 	jmp	.Ltmp2022 # Offset: 3004
.Ltmp2012:
    00000bc1: 	testq	%r12, %r12
    00000bc4: 	jne	.Ltmp2023 # Offset: 3012
    00000bca: 	movq	%r15, %rax
    00000bcd: 	jmp	.Ltmp2024 # Offset: 3021
.Ltmp2003:
    00000bd2: 	testq	%r12, %r12
    00000bd5: 	jne	.Ltmp2025 # Offset: 3029
    00000bdb: 	movq	%r15, %rax
    00000bde: 	jmp	.Ltmp2026 # Offset: 3038
.Ltmp2011:
    00000be3: 	movq	0x20(%rsp), %rsi
    00000be8: 	xorl	%edx, %edx
    00000bea: 	movq	%rbp, %rdi
    00000bed: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3053
    00000bf2: 	movq	%rax, 0xa0(%rsp)
    00000bfa: 	movq	%rax, %rdi
    00000bfd: 	movq	0x40(%rsp), %rax
    00000c02: 	movq	%rax, 0xb0(%rsp)
.Ltmp2033:
    00000c0a: 	movq	%r12, %rdx
    00000c0d: 	movq	%r13, %rsi
    00000c10: 	callq	memcpy@PLT # Offset: 3088
    00000c15: 	movq	0x40(%rsp), %r12
    00000c1a: 	movq	0xa0(%rsp), %rax
    00000c22: 	jmp	.Ltmp2024 # Offset: 3106
.Ltmp2002:
    00000c27: 	movq	0x20(%rsp), %rsi
    00000c2c: 	xorl	%edx, %edx
    00000c2e: 	movq	%rbp, %rdi
    00000c31: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3121
    00000c36: 	movq	%rax, 0xa0(%rsp)
    00000c3e: 	movq	%rax, %rdi
    00000c41: 	movq	0x40(%rsp), %rax
    00000c46: 	movq	%rax, 0xb0(%rsp)
.Ltmp2034:
    00000c4e: 	movq	%r12, %rdx
    00000c51: 	movq	%r13, %rsi
    00000c54: 	callq	memcpy@PLT # Offset: 3156
    00000c59: 	movq	0x40(%rsp), %r12
    00000c5e: 	movq	0xa0(%rsp), %rax
    00000c66: 	jmp	.Ltmp2026 # Offset: 3174
.Ltmp1969:
    00000c6b: 	movq	0x20(%rsp), %rsi
    00000c70: 	leaq	0x80(%rsp), %rdi
    00000c78: 	xorl	%edx, %edx
    00000c7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3194
    00000c7f: 	movq	%rax, 0x80(%rsp)
    00000c87: 	movq	%rax, %rdi
    00000c8a: 	movq	0x40(%rsp), %rax
    00000c8f: 	movq	%rax, 0x90(%rsp)
.Ltmp2030:
    00000c97: 	movq	%r12, %rdx
    00000c9a: 	movq	%r13, %rsi
    00000c9d: 	callq	memcpy@PLT # Offset: 3229
    00000ca2: 	movq	0x40(%rsp), %r12
    00000ca7: 	movq	0x80(%rsp), %rax
    00000caf: 	jmp	.Ltmp2018 # Offset: 3247
.Ltmp1993:
    00000cb4: 	movq	0x30(%rsp), %rsi
    00000cb9: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000cc0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3264
    00000cc5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000ccc: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000cd3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000cda: 	jne	.Ltmp2027 # Offset: 3290
.Ltmp1994:
    00000ce0: 	movq	-0x8(%rdx), %rax
    00000ce4: 	addq	$0x200, %rax
    00000cea: 	jmp	.Ltmp2027 # Offset: 3306
.Ltmp1982:
    00000cef: 	movq	-0x8(%rdx), %rax
    00000cf3: 	addq	$0x200, %rax
    00000cf9: 	jmp	.Ltmp2028 # Offset: 3321
.Ltmp1981:
    00000cfe: 	movq	0x30(%rsp), %rsi
    00000d03: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000d0a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3338
    00000d0f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000d16: 	jmp	.Ltmp2029 # Offset: 3350
.Ltmp1971:
    00000d1b: 	leaq	DATAat0x19184(%rip), %rdi
    00000d22: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3362
.Ltmp1975:
    00000d27: 	leaq	DATAat0x19008(%rip), %rdi
    00000d2e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3374
.Ltmp1987:
    00000d33: 	leaq	DATAat0x19008(%rip), %rdi
    00000d3a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3386
.Ltmp2001:
    00000d3f: 	leaq	DATAat0x19008(%rip), %rdi
    00000d46: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3398
.Ltmp2004:
    00000d4b: 	leaq	DATAat0x19184(%rip), %rdi
    00000d52: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3410
.Ltmp2010:
    00000d57: 	leaq	DATAat0x19008(%rip), %rdi
    00000d5e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3422
.Ltmp2013:
    00000d63: 	leaq	DATAat0x19184(%rip), %rdi
    00000d6a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 3434
.Ltmp2016:
    00000d6f: 	callq	__stack_chk_fail@PLT # Offset: 3439
.Ltmp2017:
    00000d74: 	movq	0x28(%rsp), %rdi
    00000d79: 	jmp	.Ltmp2030 # Offset: 3449
.Ltmp2019:
    00000d7e: 	movq	%r15, %rdi
    00000d81: 	jmp	.Ltmp2031 # Offset: 3457
.Ltmp2021:
    00000d86: 	movq	%r15, %rdi
    00000d89: 	jmp	.Ltmp2032 # Offset: 3465
.Ltmp2023:
    00000d8e: 	movq	%r15, %rdi
    00000d91: 	jmp	.Ltmp2033 # Offset: 3473
.Ltmp2025:
    00000d96: 	movq	%r15, %rdi
    00000d99: 	jmp	.Ltmp2034 # Offset: 3481
.Ltmp1968:
    00000d9e: 	leaq	DATAat0x19008(%rip), %rdi
    00000da5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3493
    00000daa: 	endbr64
.Ltmp2041:
    00000dae: 	movq	%rax, %rbp
    00000db1: 	jmp	.Ltmp2035 # Offset: 3505
    00000db6: 	endbr64
.Ltmp2037:
    00000dba: 	movq	%rax, %rbp
    00000dbd: 	jmp	.Ltmp2036 # Offset: 3517
    00000dbf: 	endbr64
    00000dc3: 	jmp	.Ltmp2037 # Offset: 3523
    00000dc5: 	endbr64
    00000dc9: 	movq	%rax, %rbp
    00000dcc: 	jmp	.Ltmp2038 # Offset: 3532
    00000dce: 	endbr64
    00000dd2: 	jmp	.Ltmp2037 # Offset: 3538
.Ltmp2036:
    00000dd4: 	movq	0xa0(%rsp), %rdi
    00000ddc: 	cmpq	%r15, %rdi
    00000ddf: 	je	.Ltmp2038 # Offset: 3551
.Ltmp2044:
    00000de1: 	movq	0xb0(%rsp), %rax
    00000de9: 	leaq	0x1(%rax), %rsi
    00000ded: 	callq	_ZdlPvm@PLT # Offset: 3565
.Ltmp2038:
    00000df2: 	movq	0x60(%rsp), %rdi
    00000df7: 	cmpq	0x38(%rsp), %rdi
    00000dfc: 	je	.Ltmp2039 # Offset: 3580
    00000dfe: 	movq	0x70(%rsp), %rax
    00000e03: 	leaq	0x1(%rax), %rsi
    00000e07: 	callq	_ZdlPvm@PLT # Offset: 3591
.Ltmp2039:
    00000e0c: 	movq	%rbp, %rdi
    00000e0f: 	callq	_Unwind_Resume@PLT # Offset: 3599
    00000e14: 	endbr64
.Ltmp2042:
    00000e18: 	movq	%rax, %rbp
    00000e1b: 	jmp	.Ltmp2040 # Offset: 3611
    00000e1d: 	endbr64
    00000e21: 	jmp	.Ltmp2041 # Offset: 3617
.Ltmp2040:
    00000e23: 	movq	0xa0(%rsp), %rdi
    00000e2b: 	cmpq	%r15, %rdi
    00000e2e: 	je	.Ltmp2035 # Offset: 3630
    00000e30: 	movq	0xb0(%rsp), %rax
    00000e38: 	leaq	0x1(%rax), %rsi
    00000e3c: 	callq	_ZdlPvm@PLT # Offset: 3644
.Ltmp2035:
    00000e41: 	movq	0x80(%rsp), %rdi
    00000e49: 	cmpq	0x28(%rsp), %rdi
    00000e4e: 	je	.Ltmp2038 # Offset: 3662
    00000e50: 	movq	0x90(%rsp), %rax
    00000e58: 	leaq	0x1(%rax), %rsi
    00000e5c: 	callq	_ZdlPvm@PLT # Offset: 3676
    00000e61: 	jmp	.Ltmp2038 # Offset: 3681
    00000e63: 	endbr64
    00000e67: 	jmp	.Ltmp2042 # Offset: 3687
    00000e69: 	endbr64
    00000e6d: 	jmp	.Ltmp2041 # Offset: 3693
    00000e72: 	endbr64
    00000e76: 	jmp	.Ltmp2037 # Offset: 3702
    00000e7b: 	endbr64
    00000e7f: 	movq	%rax, %rbp
    00000e82: 	jmp	.Ltmp2043 # Offset: 3714
    00000e84: 	endbr64
    00000e88: 	jmp	.Ltmp2037 # Offset: 3720
.Ltmp2043:
    00000e8d: 	movq	0xa0(%rsp), %rdi
    00000e95: 	leaq	0xb0(%rsp), %rax
    00000e9d: 	cmpq	%rax, %rdi
    00000ea0: 	jne	.Ltmp2044 # Offset: 3744
    00000ea6: 	jmp	.Ltmp2038 # Offset: 3750
    00000eab: 	endbr64
    00000eaf: 	jmp	.Ltmp2037 # Offset: 3759
    00000eb4: 	endbr64
    00000eb8: 	jmp	.Ltmp2037 # Offset: 3768
    00000ebd: 	endbr64
    00000ec1: 	jmp	.Ltmp2037 # Offset: 3777
    00000ec6: 	endbr64
    00000eca: 	jmp	.Ltmp2037 # Offset: 3786
    00000ecf: 	endbr64
    00000ed3: 	jmp	.Ltmp2037 # Offset: 3795
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_fini" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x182c8
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x182c8
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 147 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 1440 instructions were shortened
BOLT-INFO: removed 435 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 142 out of 174 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x203a90
