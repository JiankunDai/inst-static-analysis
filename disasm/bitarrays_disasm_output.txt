BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x1b018, which lies outside .bss
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x1afe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 2
  State       : disassembled
  Address     : 0x11c0
  Size        : 0x1f71
  MaxSize     : 0x1f80
  Offset      : 0x11c0
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB01:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x798, %rsp
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x1788(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	testl	%edi, %edi
    00000036: 	jle	.Ltmp1 # Offset: 54
    0000003c: 	leal	-0x1(%rdi), %eax
    0000003f: 	movl	%edi, %r13d
    00000042: 	movq	%rsi, %r14
    00000045: 	movq	%rsi, %rbx
    00000048: 	leaq	0x8(%rsi,%rax,8), %r12
    0000004d: 	leaq	DATAat0x15aa0(%rip), %rbp
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000058: 	movq	(%rbx), %rdx
    0000005b: 	movq	%rbp, %rsi
    0000005e: 	movl	$0x1, %edi
    00000063: 	xorl	%eax, %eax
    00000065: 	addq	$0x8, %rbx
    00000069: 	callq	__printf_chk@PLT # Offset: 105
    0000006e: 	cmpq	%rbx, %r12
    00000071: 	jne	.Ltmp2 # Offset: 113
    00000073: 	xorl	%eax, %eax
    00000075: 	leaq	DATAat0x15a68(%rip), %rsi
    0000007c: 	movl	$0x1, %edi
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	cmpl	$0x1, %r13d
    0000008a: 	jg	.Ltmp3 # Offset: 138
.Ltmp28:
    00000090: 	movzbl	init_value(%rip), %r8d
    00000098: 	leaq	data8unsigned(%rip), %rbp
    0000009f: 	movl	$0xfa, %ecx
    000000a4: 	movabsq	$0x101010101010101, %rax
    000000ae: 	movq	%rbp, %rdi
    000000b1: 	xorl	%ebx, %ebx
    000000b3: 	movl	$0x3, %edx
    000000b8: 	imulq	%r8, %rax
    000000bc: 	rep		stosq	%rax, %es:(%rdi)
    000000bf: 	movl	$0x1, %edi
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp4:
    000000c8: 	movq	%rdx, %rsi
    000000cb: 	movl	%edx, %ecx
    000000cd: 	movl	%edi, %eax
    000000cf: 	shrq	$0x3, %rsi
    000000d3: 	andl	$0x7, %ecx
    000000d6: 	shll	%cl, %eax
    000000d8: 	andb	(%rbp,%rsi), %al
    000000dc: 	cmpb	$0x1, %al
    000000de: 	sbbq	$-0x1, %rbx
    000000e2: 	addq	$0x1, %rdx
    000000e6: 	cmpq	$0x3e7d, %rdx
    000000ed: 	jne	.Ltmp4 # Offset: 237
    000000ef: 	movq	%r8, %rax
    000000f2: 	movl	$0xfa, %edx
    000000f7: 	movl	$0x3, %esi
    000000fc: 	movabsq	$0x101010101010101, %r15
    00000106: 	imulq	%r15, %rax
    0000010a: 	movq	%rdx, %rcx
    0000010d: 	leaq	data8unsigned2(%rip), %r12
    00000114: 	movl	$0x3e7a, %r13d
    0000011a: 	movq	%r12, %rdi
    0000011d: 	leaq	data8unsigned3(%rip), %r14
    00000124: 	subq	%rbx, %r13
    00000127: 	testb	$0x1, iterations(%rip)
    0000012e: 	leaq	DATAat0x15aa4(%rip), %r9
    00000135: 	leaq	_Z16SetBitsOptimizedIhEvPT_mm(%rip), %r8
    0000013c: 	cmoveq	%rbx, %r13
    00000140: 	rep		stosq	%rax, %es:(%rdi)
    00000143: 	movq	%r14, %rdi
    00000146: 	movq	%rcx, %rdx
    00000149: 	movl	$0xfa, %ecx
    0000014e: 	movq	%rdx, %rax
    00000151: 	movl	$0x3e7d, %edx
    00000156: 	rep		stosq	%rax, %es:(%rdi)
    00000159: 	movq	%rbp, %rdi
    0000015c: 	movl	$0x3e7a, %ecx
    00000161: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 353
    00000166: 	movq	%rbp, %rdi
    00000169: 	movl	$0x3e7a, %ecx
    0000016e: 	leaq	DATAat0x15abe(%rip), %r9
    00000175: 	leaq	_Z14SetBitsHalfOptIhEvPT_mm(%rip), %r8
    0000017c: 	movl	$0x3e7d, %edx
    00000181: 	movl	$0x3, %esi
    00000186: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 390
    0000018b: 	movq	%rbp, %rdi
    0000018e: 	movl	$0x3e7a, %ecx
    00000193: 	leaq	DATAat0x15ad7(%rip), %r9
    0000019a: 	leaq	_Z12SetBitsShiftIhEvPT_mm(%rip), %r8
    000001a1: 	movl	$0x3e7d, %edx
    000001a6: 	movl	$0x3, %esi
    000001ab: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 427
    000001b0: 	movq	%rbp, %rdi
    000001b3: 	movl	$0x3e7a, %ecx
    000001b8: 	leaq	DATAat0x15aed(%rip), %r9
    000001bf: 	leaq	_Z7SetBitsIhEvPT_mm(%rip), %r8
    000001c6: 	movl	$0x3e7d, %edx
    000001cb: 	movl	$0x3, %esi
    000001d0: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 464
    000001d5: 	xorl	%ecx, %ecx
    000001d7: 	movq	%rbp, %rdi
    000001da: 	movl	$0x3e7d, %edx
    000001df: 	leaq	DATAat0x15afd(%rip), %r9
    000001e6: 	leaq	_Z16ClearBitsHalfOptIhEvPT_mm(%rip), %r8
    000001ed: 	movl	$0x3, %esi
    000001f2: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 498
    000001f7: 	xorl	%ecx, %ecx
    000001f9: 	movq	%rbp, %rdi
    000001fc: 	movl	$0x3e7d, %edx
    00000201: 	leaq	DATAat0x15b18(%rip), %r9
    00000208: 	leaq	_Z14ClearBitsShiftIhEvPT_mm(%rip), %r8
    0000020f: 	movl	$0x3, %esi
    00000214: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 532
    00000219: 	xorl	%ecx, %ecx
    0000021b: 	movq	%rbp, %rdi
    0000021e: 	movl	$0x3e7d, %edx
    00000223: 	leaq	DATAat0x15b30(%rip), %r9
    0000022a: 	leaq	_Z9ClearBitsIhEvPT_mm(%rip), %r8
    00000231: 	movl	$0x3, %esi
    00000236: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 566
    0000023b: 	movq	%r12, %rdi
    0000023e: 	movq	%r13, %rcx
    00000241: 	movl	$0x3e7d, %edx
    00000246: 	leaq	DATAat0x15b42(%rip), %r9
    0000024d: 	leaq	_Z17InvertBitsHalfOptIhEvPT_mm(%rip), %r8
    00000254: 	movl	$0x3, %esi
    00000259: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 601
    0000025e: 	movq	%r12, %rdi
    00000261: 	movq	%r13, %rcx
    00000264: 	movl	$0x3e7d, %edx
    00000269: 	leaq	DATAat0x15b5e(%rip), %r9
    00000270: 	leaq	_Z15InvertBitsShiftIhEvPT_mm(%rip), %r8
    00000277: 	movl	$0x3, %esi
    0000027c: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 636
    00000281: 	movq	%r12, %rdi
    00000284: 	movq	%r13, %rcx
    00000287: 	movl	$0x3e7d, %edx
    0000028c: 	leaq	DATAat0x15b77(%rip), %r9
    00000293: 	leaq	_Z10InvertBitsIhEvPT_mm(%rip), %r8
    0000029a: 	movl	$0x3, %esi
    0000029f: 	callq	_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc # Offset: 671
    000002a4: 	movq	%rbp, %rdi
    000002a7: 	movl	$0xfa, %ecx
    000002ac: 	movq	%rbx, %r8
    000002af: 	movzbl	init_value(%rip), %eax
    000002b6: 	subq	$0x8, %rsp
    000002ba: 	movq	%r12, %rsi
    000002bd: 	leaq	_Z21AndBitTablesOptimizedIhEvPT_PKS0_mm(%rip), %r9
    000002c4: 	movl	$0x3, %edx
    000002c9: 	imulq	%r15, %rax
    000002cd: 	rep		stosq	%rax, %es:(%rdi)
    000002d0: 	movq	%r12, %rdi
    000002d3: 	movl	$0xfa, %ecx
    000002d8: 	rep		stosq	%rax, %es:(%rdi)
    000002db: 	leaq	DATAat0x15148(%rip), %rax
    000002e2: 	movq	%rbp, %rdi
    000002e5: 	movl	$0x3e7d, %ecx
    000002ea: 	pushq	%rax
    000002eb: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 747
    000002f0: 	movq	%rbx, %r8
    000002f3: 	movq	%r12, %rsi
    000002f6: 	movq	%rbp, %rdi
    000002f9: 	leaq	DATAat0x15170(%rip), %rax
    00000300: 	movl	$0x3e7d, %ecx
    00000305: 	movl	$0x3, %edx
    0000030a: 	leaq	_Z19AndBitTablesHalfOptIhEvPT_PKS0_mm(%rip), %r9
    00000311: 	movq	%rax, (%rsp)
    00000315: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 789
    0000031a: 	movq	%rbx, %r8
    0000031d: 	movq	%r12, %rsi
    00000320: 	movq	%rbp, %rdi
    00000323: 	leaq	DATAat0x15b8a(%rip), %rax
    0000032a: 	movl	$0x3e7d, %ecx
    0000032f: 	movl	$0x3, %edx
    00000334: 	leaq	_Z17AndBitTablesShiftIhEvPT_PKS0_mm(%rip), %r9
    0000033b: 	movq	%rax, (%rsp)
    0000033f: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 831
    00000344: 	movq	%rbx, %r8
    00000347: 	movq	%r12, %rsi
    0000034a: 	movq	%rbp, %rdi
    0000034d: 	leaq	DATAat0x15ba7(%rip), %rax
    00000354: 	movl	$0x3e7d, %ecx
    00000359: 	movl	$0x3, %edx
    0000035e: 	leaq	_Z12AndBitTablesIhEvPT_PKS0_mm(%rip), %r9
    00000365: 	movq	%rax, (%rsp)
    00000369: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 873
    0000036e: 	movq	%rbx, %r8
    00000371: 	movq	%r12, %rsi
    00000374: 	movq	%rbp, %rdi
    00000377: 	leaq	DATAat0x15190(%rip), %rax
    0000037e: 	movl	$0x3e7d, %ecx
    00000383: 	movl	$0x3, %edx
    00000388: 	leaq	_Z18OrBitTablesHalfOptIhEvPT_PKS0_mm(%rip), %r9
    0000038f: 	movq	%rax, (%rsp)
    00000393: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 915
    00000398: 	movq	%rbx, %r8
    0000039b: 	movq	%r12, %rsi
    0000039e: 	movq	%rbp, %rdi
    000003a1: 	leaq	DATAat0x15bbe(%rip), %rax
    000003a8: 	movl	$0x3e7d, %ecx
    000003ad: 	movl	$0x3, %edx
    000003b2: 	leaq	_Z16OrBitTablesShiftIhEvPT_PKS0_mm(%rip), %r9
    000003b9: 	movq	%rax, (%rsp)
    000003bd: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 957
    000003c2: 	movq	%rbx, %r8
    000003c5: 	movq	%r12, %rsi
    000003c8: 	movq	%rbp, %rdi
    000003cb: 	leaq	DATAat0x15bda(%rip), %rax
    000003d2: 	movl	$0x3e7d, %ecx
    000003d7: 	movl	$0x3, %edx
    000003dc: 	leaq	_Z11OrBitTablesIhEvPT_PKS0_mm(%rip), %r9
    000003e3: 	movq	%rax, (%rsp)
    000003e7: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 999
    000003ec: 	movq	%r12, %rsi
    000003ef: 	movq	%rbp, %rdi
    000003f2: 	movq	%r13, %r8
    000003f5: 	leaq	DATAat0x151b0(%rip), %rax
    000003fc: 	movl	$0x3e7d, %ecx
    00000401: 	movl	$0x3, %edx
    00000406: 	leaq	_Z19XorBitTablesHalfOptIhEvPT_PKS0_mm(%rip), %r9
    0000040d: 	movq	%rax, (%rsp)
    00000411: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 1041
    00000416: 	movq	%r12, %rsi
    00000419: 	movq	%rbp, %rdi
    0000041c: 	movq	%r13, %r8
    0000041f: 	leaq	DATAat0x15bf0(%rip), %rax
    00000426: 	movl	$0x3e7d, %ecx
    0000042b: 	movl	$0x3, %edx
    00000430: 	leaq	_Z17XorBitTablesShiftIhEvPT_PKS0_mm(%rip), %r9
    00000437: 	movq	%rax, (%rsp)
    0000043b: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 1083
    00000440: 	movq	%r12, %rsi
    00000443: 	movq	%rbp, %rdi
    00000446: 	movq	%r13, %r8
    00000449: 	leaq	DATAat0x15c0d(%rip), %rax
    00000450: 	movl	$0x3e7d, %ecx
    00000455: 	movl	$0x3, %edx
    0000045a: 	leaq	_Z12XorBitTablesIhEvPT_PKS0_mm(%rip), %r9
    00000461: 	movq	%rax, (%rsp)
    00000465: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 1125
    0000046a: 	xorl	%r8d, %r8d
    0000046d: 	movq	%r12, %rsi
    00000470: 	movq	%rbp, %rdi
    00000473: 	leaq	DATAat0x151d0(%rip), %rax
    0000047a: 	movl	$0x3e7d, %ecx
    0000047f: 	movl	$0x3, %edx
    00000484: 	leaq	_Z29AndComplimentBitTablesHalfOptIhEvPT_PKS0_mm(%rip), %r9
    0000048b: 	movq	%rax, (%rsp)
    0000048f: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 1167
    00000494: 	xorl	%r8d, %r8d
    00000497: 	movq	%r12, %rsi
    0000049a: 	movq	%rbp, %rdi
    0000049d: 	leaq	DATAat0x15200(%rip), %rax
    000004a4: 	movl	$0x3e7d, %ecx
    000004a9: 	movl	$0x3, %edx
    000004ae: 	leaq	_Z27AndComplimentBitTablesShiftIhEvPT_PKS0_mm(%rip), %r9
    000004b5: 	movq	%rax, (%rsp)
    000004b9: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 1209
    000004be: 	xorl	%r8d, %r8d
    000004c1: 	movq	%r12, %rsi
    000004c4: 	movq	%rbp, %rdi
    000004c7: 	leaq	DATAat0x15228(%rip), %rax
    000004ce: 	movl	$0x3e7d, %ecx
    000004d3: 	movl	$0x3, %edx
    000004d8: 	leaq	_Z22AndComplimentBitTablesIhEvPT_PKS0_mm(%rip), %r9
    000004df: 	movq	%rax, (%rsp)
    000004e3: 	callq	_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc # Offset: 1251
    000004e8: 	movq	%rbp, %rdi
    000004eb: 	movl	$0xfa, %ecx
    000004f0: 	movq	%rbx, %r9
    000004f3: 	movzbl	init_value(%rip), %eax
    000004fa: 	movq	%rbp, %rdx
    000004fd: 	movl	$0x3e7d, %r8d
    00000503: 	imulq	%r15, %rax
    00000507: 	rep		stosq	%rax, %es:(%rdi)
    0000050a: 	movq	%r12, %rdi
    0000050d: 	movl	$0xfa, %ecx
    00000512: 	rep		stosq	%rax, %es:(%rdi)
    00000515: 	leaq	DATAat0x15250(%rip), %rax
    0000051c: 	movq	%r14, %rdi
    0000051f: 	popq	%rcx
    00000520: 	popq	%rsi
    00000521: 	pushq	%rax
    00000522: 	leaq	_Z23StencilBitTablesHalfOptIhEvPT_PKS0_S3_mm(%rip), %rax
    00000529: 	pushq	%rax
    0000052a: 	movq	%r12, %rsi
    0000052d: 	movl	$0x3, %ecx
    00000532: 	callq	_Z13test_blitbitsIhPFvPhPKhS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 1330
    00000537: 	leaq	DATAat0x15278(%rip), %rax
    0000053e: 	popq	%rdi
    0000053f: 	popq	%r8
    00000541: 	pushq	%rax
    00000542: 	leaq	_Z21StencilBitTablesShiftIhEvPT_PKS0_S3_mm(%rip), %rax
    00000549: 	movq	%rbx, %r9
    0000054c: 	movq	%rbp, %rdx
    0000054f: 	pushq	%rax
    00000550: 	movq	%r12, %rsi
    00000553: 	movq	%r14, %rdi
    00000556: 	movl	$0x3e7d, %r8d
    0000055c: 	movl	$0x3, %ecx
    00000561: 	callq	_Z13test_blitbitsIhPFvPhPKhS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 1377
    00000566: 	popq	%r9
    00000568: 	leaq	DATAat0x15c24(%rip), %rax
    0000056f: 	popq	%r10
    00000571: 	pushq	%rax
    00000572: 	leaq	_Z16StencilBitTablesIhEvPT_PKS0_S3_mm(%rip), %rax
    00000579: 	movq	%rbx, %r9
    0000057c: 	movl	$0x3, %ecx
    00000581: 	pushq	%rax
    00000582: 	movl	$0x3e7d, %r8d
    00000588: 	movq	%rbp, %rdx
    0000058b: 	movq	%r12, %rsi
    0000058e: 	movq	%r14, %rdi
    00000591: 	leaq	data16unsigned(%rip), %r12
    00000598: 	leaq	0x7d0(%r12), %r14
    000005a0: 	callq	_Z13test_blitbitsIhPFvPhPKhS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 1440
    000005a5: 	movq	%rbp, %rdi
    000005a8: 	movl	$0x3e7d, %edx
    000005ad: 	movl	$0x3, %esi
    000005b2: 	callq	_Z16SetBitsOptimizedIhEvPT_mm # Offset: 1458
    000005b7: 	popq	%r11
    000005b9: 	movq	%rbp, %rdi
    000005bc: 	popq	%rbx
    000005bd: 	leaq	DATAat0x15c3f(%rip), %r8
    000005c4: 	movl	$0x3e7d, %edx
    000005c9: 	movl	$0x3, %esi
    000005ce: 	leaq	_Z19CountBits32MultiplyIhEmPT_mm(%rip), %rcx
    000005d5: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1493
    000005da: 	movq	%rbp, %rdi
    000005dd: 	movl	$0x3e7d, %edx
    000005e2: 	leaq	DATAat0x15c5d(%rip), %r8
    000005e9: 	leaq	_Z19CountBits32ParallelIhEmPT_mm(%rip), %rcx
    000005f0: 	movl	$0x3, %esi
    000005f5: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1525
    000005fa: 	movq	%rbp, %rdi
    000005fd: 	movl	$0x3e7d, %edx
    00000602: 	leaq	DATAat0x152a0(%rip), %r8
    00000609: 	leaq	_Z20CountBits32Parallel2IhEmPT_mm(%rip), %rcx
    00000610: 	movl	$0x3, %esi
    00000615: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1557
    0000061a: 	movq	%rbp, %rdi
    0000061d: 	movl	$0x3e7d, %edx
    00000622: 	leaq	DATAat0x15c7b(%rip), %r8
    00000629: 	leaq	_Z18CountBitsByteTableIhEmPT_mm(%rip), %rcx
    00000630: 	movl	$0x3, %esi
    00000635: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1589
    0000063a: 	movq	%rbp, %rdi
    0000063d: 	movl	$0x3e7d, %edx
    00000642: 	leaq	DATAat0x15c98(%rip), %r8
    00000649: 	leaq	_Z19CountBitsByteDirectIhEmPT_mm(%rip), %rcx
    00000650: 	movl	$0x3, %esi
    00000655: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1621
    0000065a: 	movq	%rbp, %rdi
    0000065d: 	movl	$0x3e7d, %edx
    00000662: 	leaq	DATAat0x152c0(%rip), %r8
    00000669: 	leaq	_Z20CountBitsByteDirect2IhEmPT_mm(%rip), %rcx
    00000670: 	movl	$0x3, %esi
    00000675: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1653
    0000067a: 	movq	%rbp, %rdi
    0000067d: 	movl	$0x3e7d, %edx
    00000682: 	leaq	DATAat0x15cb6(%rip), %r8
    00000689: 	leaq	_Z17CountBitsByteLoopIhEmPT_mm(%rip), %rcx
    00000690: 	movl	$0x3, %esi
    00000695: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1685
    0000069a: 	movq	%rbp, %rdi
    0000069d: 	movl	$0x3e7d, %edx
    000006a2: 	leaq	DATAat0x15cd2(%rip), %r8
    000006a9: 	leaq	_Z18CountBitsByteLoop2IhEmPT_mm(%rip), %rcx
    000006b0: 	movl	$0x3, %esi
    000006b5: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1717
    000006ba: 	movq	%rbp, %rdi
    000006bd: 	movl	$0x3e7d, %edx
    000006c2: 	leaq	DATAat0x15cef(%rip), %r8
    000006c9: 	leaq	_Z14CountBitsShiftIhEmPT_mm(%rip), %rcx
    000006d0: 	movl	$0x3, %esi
    000006d5: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1749
    000006da: 	movq	%rbp, %rdi
    000006dd: 	movl	$0x3e7d, %edx
    000006e2: 	movq	%r12, %rbp
    000006e5: 	leaq	DATAat0x15d08(%rip), %r8
    000006ec: 	leaq	_Z9CountBitsIhEmPT_mm(%rip), %rcx
    000006f3: 	movl	$0x3, %esi
    000006f8: 	callq	_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc # Offset: 1784
    000006fd: 	movl	iterations(%rip), %edx
    00000703: 	xorl	%r8d, %r8d
    00000706: 	xorl	%ecx, %ecx
    00000708: 	movl	$0x3e80, %esi
    0000070d: 	leaq	DATAat0x15d1b(%rip), %rdi
    00000714: 	callq	_Z9summarizePKciiii # Offset: 1812
    00000719: 	movd	init_value(%rip), %xmm0
    00000721: 	movq	%r12, %rax
    00000724: 	punpcklwd	%xmm0, %xmm0
    00000728: 	pshufd	$0x0, %xmm0, %xmm0
    0000072d: 	nopl	(%rax) # Size: 3
.Ltmp5:
    00000730: 	movaps	%xmm0, (%rax)
    00000733: 	addq	$0x10, %rax
    00000737: 	cmpq	%r14, %rax
    0000073a: 	jne	.Ltmp5 # Offset: 1850
    0000073c: 	xorl	%ebx, %ebx
    0000073e: 	movl	$0x3, %eax
    00000743: 	movl	$0x1, %edi
    00000748: 	nopl	(%rax,%rax) # Size: 8
.Ltmp6:
    00000750: 	movq	%rax, %rsi
    00000753: 	movl	%eax, %ecx
    00000755: 	movl	%edi, %edx
    00000757: 	shrq	$0x4, %rsi
    0000075b: 	andl	$0xf, %ecx
    0000075e: 	shll	%cl, %edx
    00000760: 	andw	(%rbp,%rsi,2), %dx
    00000765: 	cmpw	$0x1, %dx
    00000769: 	sbbq	$-0x1, %rbx
    0000076d: 	addq	$0x1, %rax
    00000771: 	cmpq	$0x3e7d, %rax
    00000777: 	jne	.Ltmp6 # Offset: 1911
    00000779: 	leaq	data16unsigned2(%rip), %r10
    00000780: 	leaq	0x7d0(%r10), %r11
    00000787: 	movq	%r10, %r13
    0000078a: 	movq	%r10, %rax
    0000078d: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000790: 	movaps	%xmm0, (%rax)
    00000793: 	addq	$0x10, %rax
    00000797: 	cmpq	%r11, %rax
    0000079a: 	jne	.Ltmp7 # Offset: 1946
    0000079c: 	leaq	data16unsigned3(%rip), %r15
    000007a3: 	xorl	%eax, %eax
    000007a5: 	movl	$0xfa, %ecx
    000007aa: 	movl	$0x3e7d, %edx
    000007af: 	movq	%r15, %rdi
    000007b2: 	movl	$0x3, %esi
    000007b7: 	movq	%r10, 0x8(%rsp)
    000007bc: 	leaq	DATAat0x15d2d(%rip), %r9
    000007c3: 	rep		stosq	%rax, %es:(%rdi)
    000007c6: 	leaq	_Z16SetBitsOptimizedItEvPT_mm(%rip), %r8
    000007cd: 	movq	%rbp, %rdi
    000007d0: 	movl	$0x3e7a, %ecx
    000007d5: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2005
    000007da: 	movq	%rbp, %rdi
    000007dd: 	movl	$0x3e7a, %ecx
    000007e2: 	leaq	DATAat0x15d48(%rip), %r9
    000007e9: 	leaq	_Z14SetBitsHalfOptItEvPT_mm(%rip), %r8
    000007f0: 	movl	$0x3e7d, %edx
    000007f5: 	movl	$0x3, %esi
    000007fa: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2042
    000007ff: 	movq	%rbp, %rdi
    00000802: 	movl	$0x3e7a, %ecx
    00000807: 	leaq	DATAat0x15d62(%rip), %r9
    0000080e: 	leaq	_Z12SetBitsShiftItEvPT_mm(%rip), %r8
    00000815: 	movl	$0x3e7d, %edx
    0000081a: 	movl	$0x3, %esi
    0000081f: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2079
    00000824: 	movq	%rbp, %rdi
    00000827: 	movl	$0x3e7a, %ecx
    0000082c: 	leaq	DATAat0x15d79(%rip), %r9
    00000833: 	leaq	_Z7SetBitsItEvPT_mm(%rip), %r8
    0000083a: 	movl	$0x3e7d, %edx
    0000083f: 	movl	$0x3, %esi
    00000844: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2116
    00000849: 	movq	%rbp, %rdi
    0000084c: 	xorl	%ecx, %ecx
    0000084e: 	movl	$0x3e7d, %edx
    00000853: 	leaq	DATAat0x15d8a(%rip), %r9
    0000085a: 	leaq	_Z16ClearBitsHalfOptItEvPT_mm(%rip), %r8
    00000861: 	movl	$0x3, %esi
    00000866: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2150
    0000086b: 	movq	%rbp, %rdi
    0000086e: 	xorl	%ecx, %ecx
    00000870: 	movl	$0x3e7d, %edx
    00000875: 	leaq	DATAat0x15da6(%rip), %r9
    0000087c: 	leaq	_Z14ClearBitsShiftItEvPT_mm(%rip), %r8
    00000883: 	movl	$0x3, %esi
    00000888: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2184
    0000088d: 	movq	%rbp, %rdi
    00000890: 	xorl	%ecx, %ecx
    00000892: 	movl	$0x3e7d, %edx
    00000897: 	leaq	DATAat0x15dbf(%rip), %r9
    0000089e: 	leaq	_Z9ClearBitsItEvPT_mm(%rip), %r8
    000008a5: 	movl	$0x3, %esi
    000008aa: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2218
    000008af: 	movq	%rbx, %rcx
    000008b2: 	movl	$0x3e7d, %edx
    000008b7: 	movq	%r13, %rdi
    000008ba: 	leaq	DATAat0x15dd2(%rip), %r9
    000008c1: 	leaq	_Z17InvertBitsHalfOptItEvPT_mm(%rip), %r8
    000008c8: 	movl	$0x3, %esi
    000008cd: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2253
    000008d2: 	movq	%rbx, %rcx
    000008d5: 	movl	$0x3e7d, %edx
    000008da: 	movq	%r13, %rdi
    000008dd: 	leaq	DATAat0x15def(%rip), %r9
    000008e4: 	leaq	_Z15InvertBitsShiftItEvPT_mm(%rip), %r8
    000008eb: 	movl	$0x3, %esi
    000008f0: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2288
    000008f5: 	movq	%rbx, %rcx
    000008f8: 	movl	$0x3e7d, %edx
    000008fd: 	movq	%r13, %rdi
    00000900: 	leaq	DATAat0x15e09(%rip), %r9
    00000907: 	leaq	_Z10InvertBitsItEvPT_mm(%rip), %r8
    0000090e: 	movl	$0x3, %esi
    00000913: 	callq	_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc # Offset: 2323
    00000918: 	movd	init_value(%rip), %xmm0
    00000920: 	leaq	data16unsigned(%rip), %rbp
    00000927: 	movq	0x8(%rsp), %r10
    0000092c: 	punpcklwd	%xmm0, %xmm0
    00000930: 	movq	%rbp, %rax
    00000933: 	leaq	DATAat0x1d790(%rip), %r11
    0000093a: 	pshufd	$0x0, %xmm0, %xmm0
    0000093f: 	nop # Size: 1
.Ltmp8:
    00000940: 	movaps	%xmm0, (%rax)
    00000943: 	addq	$0x10, %rax
    00000947: 	cmpq	%rax, %r14
    0000094a: 	jne	.Ltmp8 # Offset: 2378
    0000094c: 	leaq	data16unsigned2(%rip), %rax
    00000953: 	nopl	(%rax,%rax) # Size: 5
.Ltmp9:
    00000958: 	movaps	%xmm0, (%rax)
    0000095b: 	addq	$0x10, %rax
    0000095f: 	cmpq	%rax, %r11
    00000962: 	jne	.Ltmp9 # Offset: 2402
    00000964: 	movq	%r10, 0x8(%rsp)
    00000969: 	subq	$0x8, %rsp
    0000096d: 	movq	%rbx, %r8
    00000970: 	movq	%r13, %rsi
    00000973: 	leaq	DATAat0x152e0(%rip), %rax
    0000097a: 	leaq	_Z21AndBitTablesOptimizedItEvPT_PKS0_mm(%rip), %r9
    00000981: 	movl	$0x3e7d, %ecx
    00000986: 	movq	%rbp, %rdi
    00000989: 	pushq	%rax
    0000098a: 	movl	$0x3, %edx
    0000098f: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2447
    00000994: 	movq	%rbx, %r8
    00000997: 	movl	$0x3e7d, %ecx
    0000099c: 	movq	%r13, %rsi
    0000099f: 	leaq	DATAat0x15308(%rip), %rax
    000009a6: 	leaq	_Z19AndBitTablesHalfOptItEvPT_PKS0_mm(%rip), %r9
    000009ad: 	movl	$0x3, %edx
    000009b2: 	movq	%rbp, %rdi
    000009b5: 	movq	%rax, (%rsp)
    000009b9: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2489
    000009be: 	movq	%rbx, %r8
    000009c1: 	movl	$0x3e7d, %ecx
    000009c6: 	movq	%r13, %rsi
    000009c9: 	leaq	DATAat0x15e1d(%rip), %rax
    000009d0: 	leaq	_Z17AndBitTablesShiftItEvPT_PKS0_mm(%rip), %r9
    000009d7: 	movl	$0x3, %edx
    000009dc: 	movq	%rbp, %rdi
    000009df: 	movq	%rax, (%rsp)
    000009e3: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2531
    000009e8: 	movq	%rbx, %r8
    000009eb: 	movl	$0x3e7d, %ecx
    000009f0: 	movq	%r13, %rsi
    000009f3: 	leaq	DATAat0x15e3b(%rip), %rax
    000009fa: 	leaq	_Z12AndBitTablesItEvPT_PKS0_mm(%rip), %r9
    00000a01: 	movl	$0x3, %edx
    00000a06: 	movq	%rbp, %rdi
    00000a09: 	movq	%rax, (%rsp)
    00000a0d: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2573
    00000a12: 	movq	%rbx, %r8
    00000a15: 	movl	$0x3e7d, %ecx
    00000a1a: 	movq	%r13, %rsi
    00000a1d: 	leaq	DATAat0x15330(%rip), %rax
    00000a24: 	leaq	_Z18OrBitTablesHalfOptItEvPT_PKS0_mm(%rip), %r9
    00000a2b: 	movl	$0x3, %edx
    00000a30: 	movq	%rbp, %rdi
    00000a33: 	movq	%rax, (%rsp)
    00000a37: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2615
    00000a3c: 	movq	%rbx, %r8
    00000a3f: 	movl	$0x3e7d, %ecx
    00000a44: 	movq	%r13, %rsi
    00000a47: 	leaq	DATAat0x15e53(%rip), %rax
    00000a4e: 	leaq	_Z16OrBitTablesShiftItEvPT_PKS0_mm(%rip), %r9
    00000a55: 	movl	$0x3, %edx
    00000a5a: 	movq	%rbp, %rdi
    00000a5d: 	movq	%rax, (%rsp)
    00000a61: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2657
    00000a66: 	movq	%rbx, %r8
    00000a69: 	movl	$0x3e7d, %ecx
    00000a6e: 	movq	%r13, %rsi
    00000a71: 	leaq	DATAat0x15e70(%rip), %rax
    00000a78: 	leaq	_Z11OrBitTablesItEvPT_PKS0_mm(%rip), %r9
    00000a7f: 	movl	$0x3, %edx
    00000a84: 	movq	%rbp, %rdi
    00000a87: 	movq	%rax, (%rsp)
    00000a8b: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2699
    00000a90: 	movq	%rbx, %r8
    00000a93: 	movl	$0x3e7d, %ecx
    00000a98: 	movq	%r13, %rsi
    00000a9b: 	leaq	DATAat0x15350(%rip), %rax
    00000aa2: 	leaq	_Z19XorBitTablesHalfOptItEvPT_PKS0_mm(%rip), %r9
    00000aa9: 	movl	$0x3, %edx
    00000aae: 	movq	%rbp, %rdi
    00000ab1: 	movq	%rax, (%rsp)
    00000ab5: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2741
    00000aba: 	movq	%rbx, %r8
    00000abd: 	movl	$0x3e7d, %ecx
    00000ac2: 	movq	%r13, %rsi
    00000ac5: 	leaq	DATAat0x15e87(%rip), %rax
    00000acc: 	leaq	_Z17XorBitTablesShiftItEvPT_PKS0_mm(%rip), %r9
    00000ad3: 	movl	$0x3, %edx
    00000ad8: 	movq	%rbp, %rdi
    00000adb: 	movq	%rax, (%rsp)
    00000adf: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2783
    00000ae4: 	movq	%rbx, %r8
    00000ae7: 	movl	$0x3e7d, %ecx
    00000aec: 	movq	%r13, %rsi
    00000aef: 	leaq	DATAat0x15ea5(%rip), %rax
    00000af6: 	leaq	_Z12XorBitTablesItEvPT_PKS0_mm(%rip), %r9
    00000afd: 	movl	$0x3, %edx
    00000b02: 	movq	%rbp, %rdi
    00000b05: 	movq	%rax, (%rsp)
    00000b09: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2825
    00000b0e: 	xorl	%r8d, %r8d
    00000b11: 	movl	$0x3e7d, %ecx
    00000b16: 	movq	%r13, %rsi
    00000b19: 	leaq	DATAat0x15378(%rip), %rax
    00000b20: 	leaq	_Z29AndComplimentBitTablesHalfOptItEvPT_PKS0_mm(%rip), %r9
    00000b27: 	movl	$0x3, %edx
    00000b2c: 	movq	%rbp, %rdi
    00000b2f: 	movq	%rax, (%rsp)
    00000b33: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2867
    00000b38: 	xorl	%r8d, %r8d
    00000b3b: 	movl	$0x3e7d, %ecx
    00000b40: 	movq	%r13, %rsi
    00000b43: 	leaq	DATAat0x153a8(%rip), %rax
    00000b4a: 	leaq	_Z27AndComplimentBitTablesShiftItEvPT_PKS0_mm(%rip), %r9
    00000b51: 	movl	$0x3, %edx
    00000b56: 	movq	%rbp, %rdi
    00000b59: 	movq	%rax, (%rsp)
    00000b5d: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2909
    00000b62: 	movl	$0x3, %edx
    00000b67: 	xorl	%r8d, %r8d
    00000b6a: 	movq	%r13, %rsi
    00000b6d: 	leaq	DATAat0x153d8(%rip), %rax
    00000b74: 	leaq	_Z22AndComplimentBitTablesItEvPT_PKS0_mm(%rip), %r9
    00000b7b: 	movl	$0x3e7d, %ecx
    00000b80: 	movq	%rbp, %rdi
    00000b83: 	movq	%rax, (%rsp)
    00000b87: 	callq	_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc # Offset: 2951
    00000b8c: 	movd	init_value(%rip), %xmm0
    00000b94: 	popq	%rax
    00000b95: 	popq	%rdx
    00000b96: 	punpcklwd	%xmm0, %xmm0
    00000b9a: 	movq	0x8(%rsp), %r10
    00000b9f: 	leaq	DATAat0x1d790(%rip), %r11
    00000ba6: 	pshufd	$0x0, %xmm0, %xmm0
    00000bab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp10:
    00000bb0: 	movaps	%xmm0, (%r12)
    00000bb5: 	addq	$0x10, %r12
    00000bb9: 	cmpq	%r12, %r14
    00000bbc: 	jne	.Ltmp10 # Offset: 3004
    00000bbe: 	nop # Size: 2
.Ltmp11:
    00000bc0: 	movaps	%xmm0, (%r10)
    00000bc4: 	addq	$0x10, %r10
    00000bc8: 	cmpq	%r10, %r11
    00000bcb: 	jne	.Ltmp11 # Offset: 3019
    00000bcd: 	leaq	DATAat0x15400(%rip), %rax
    00000bd4: 	movq	%rbx, %r9
    00000bd7: 	movq	%rbp, %rdx
    00000bda: 	movq	%r13, %rsi
    00000bdd: 	pushq	%rax
    00000bde: 	leaq	_Z23StencilBitTablesHalfOptItEvPT_PKS0_S3_mm(%rip), %rax
    00000be5: 	movl	$0x3, %ecx
    00000bea: 	movq	%r15, %rdi
    00000bed: 	pushq	%rax
    00000bee: 	movl	$0x3e7d, %r8d
    00000bf4: 	leaq	data32unsigned(%rip), %r12
    00000bfb: 	leaq	0x7d0(%r12), %r14
    00000c03: 	callq	_Z13test_blitbitsItPFvPtPKtS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 3075
    00000c08: 	leaq	DATAat0x15428(%rip), %rax
    00000c0f: 	popq	%rdi
    00000c10: 	popq	%r8
    00000c12: 	pushq	%rax
    00000c13: 	leaq	_Z21StencilBitTablesShiftItEvPT_PKS0_S3_mm(%rip), %rax
    00000c1a: 	movq	%rbx, %r9
    00000c1d: 	movq	%rbp, %rdx
    00000c20: 	pushq	%rax
    00000c21: 	movl	$0x3e7d, %r8d
    00000c27: 	movl	$0x3, %ecx
    00000c2c: 	movq	%r13, %rsi
    00000c2f: 	movq	%r15, %rdi
    00000c32: 	callq	_Z13test_blitbitsItPFvPtPKtS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 3122
    00000c37: 	popq	%r9
    00000c39: 	leaq	DATAat0x15ebd(%rip), %rax
    00000c40: 	popq	%r10
    00000c42: 	pushq	%rax
    00000c43: 	leaq	_Z16StencilBitTablesItEvPT_PKS0_S3_mm(%rip), %rax
    00000c4a: 	movq	%rbx, %r9
    00000c4d: 	movl	$0x3, %ecx
    00000c52: 	pushq	%rax
    00000c53: 	movl	$0x3e7d, %r8d
    00000c59: 	movq	%rbp, %rdx
    00000c5c: 	movq	%r13, %rsi
    00000c5f: 	movq	%r15, %rdi
    00000c62: 	callq	_Z13test_blitbitsItPFvPtPKtS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 3170
    00000c67: 	movq	%rbp, %rdi
    00000c6a: 	movl	$0x3e7d, %edx
    00000c6f: 	movl	$0x3, %esi
    00000c74: 	callq	_Z16SetBitsOptimizedItEvPT_mm # Offset: 3188
    00000c79: 	popq	%r11
    00000c7b: 	movq	%rbp, %rdi
    00000c7e: 	popq	%rbx
    00000c7f: 	leaq	DATAat0x15450(%rip), %r8
    00000c86: 	movl	$0x3e7d, %edx
    00000c8b: 	movl	$0x3, %esi
    00000c90: 	leaq	_Z19CountBits32MultiplyItEmPT_mm(%rip), %rcx
    00000c97: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3223
    00000c9c: 	movq	%rbp, %rdi
    00000c9f: 	movl	$0x3e7d, %edx
    00000ca4: 	leaq	DATAat0x15470(%rip), %r8
    00000cab: 	leaq	_Z19CountBits32ParallelItEmPT_mm(%rip), %rcx
    00000cb2: 	movl	$0x3, %esi
    00000cb7: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3255
    00000cbc: 	movq	%rbp, %rdi
    00000cbf: 	movl	$0x3e7d, %edx
    00000cc4: 	leaq	DATAat0x15490(%rip), %r8
    00000ccb: 	leaq	_Z20CountBits32Parallel2ItEmPT_mm(%rip), %rcx
    00000cd2: 	movl	$0x3, %esi
    00000cd7: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3287
    00000cdc: 	movq	%rbp, %rdi
    00000cdf: 	movl	$0x3e7d, %edx
    00000ce4: 	leaq	DATAat0x15ed9(%rip), %r8
    00000ceb: 	leaq	_Z18CountBitsByteTableItEmPT_mm(%rip), %rcx
    00000cf2: 	movl	$0x3, %esi
    00000cf7: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3319
    00000cfc: 	movq	%rbp, %rdi
    00000cff: 	movl	$0x3e7d, %edx
    00000d04: 	leaq	DATAat0x154b0(%rip), %r8
    00000d0b: 	leaq	_Z19CountBitsByteDirectItEmPT_mm(%rip), %rcx
    00000d12: 	movl	$0x3, %esi
    00000d17: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3351
    00000d1c: 	movq	%rbp, %rdi
    00000d1f: 	movl	$0x3e7d, %edx
    00000d24: 	leaq	DATAat0x154d0(%rip), %r8
    00000d2b: 	leaq	_Z20CountBitsByteDirect2ItEmPT_mm(%rip), %rcx
    00000d32: 	movl	$0x3, %esi
    00000d37: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3383
    00000d3c: 	movq	%rbp, %rdi
    00000d3f: 	movl	$0x3e7d, %edx
    00000d44: 	leaq	DATAat0x15ef7(%rip), %r8
    00000d4b: 	leaq	_Z17CountBitsByteLoopItEmPT_mm(%rip), %rcx
    00000d52: 	movl	$0x3, %esi
    00000d57: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3415
    00000d5c: 	movq	%rbp, %rdi
    00000d5f: 	movl	$0x3e7d, %edx
    00000d64: 	leaq	DATAat0x15f14(%rip), %r8
    00000d6b: 	leaq	_Z18CountBitsByteLoop2ItEmPT_mm(%rip), %rcx
    00000d72: 	movl	$0x3, %esi
    00000d77: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3447
    00000d7c: 	movq	%rbp, %rdi
    00000d7f: 	movl	$0x3e7d, %edx
    00000d84: 	leaq	DATAat0x15f32(%rip), %r8
    00000d8b: 	leaq	_Z14CountBitsShiftItEmPT_mm(%rip), %rcx
    00000d92: 	movl	$0x3, %esi
    00000d97: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3479
    00000d9c: 	movq	%rbp, %rdi
    00000d9f: 	movl	$0x3e7d, %edx
    00000da4: 	movq	%r12, %rbp
    00000da7: 	leaq	DATAat0x15f4c(%rip), %r8
    00000dae: 	leaq	_Z9CountBitsItEmPT_mm(%rip), %rcx
    00000db5: 	movl	$0x3, %esi
    00000dba: 	callq	_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc # Offset: 3514
    00000dbf: 	movl	iterations(%rip), %edx
    00000dc5: 	xorl	%r8d, %r8d
    00000dc8: 	xorl	%ecx, %ecx
    00000dca: 	movl	$0x3e80, %esi
    00000dcf: 	leaq	DATAat0x15f60(%rip), %rdi
    00000dd6: 	callq	_Z9summarizePKciiii # Offset: 3542
    00000ddb: 	movd	init_value(%rip), %xmm1
    00000de3: 	movq	%r12, %rax
    00000de6: 	pshufd	$0x0, %xmm1, %xmm0
    00000deb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp12:
    00000df0: 	movaps	%xmm0, (%rax)
    00000df3: 	addq	$0x10, %rax
    00000df7: 	cmpq	%r14, %rax
    00000dfa: 	jne	.Ltmp12 # Offset: 3578
    00000dfc: 	xorl	%ebx, %ebx
    00000dfe: 	movl	$0x3, %ecx
    00000e03: 	movl	$0x1, %esi
    00000e08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp13:
    00000e10: 	movq	%rcx, %rdx
    00000e13: 	movl	%esi, %eax
    00000e15: 	shrq	$0x5, %rdx
    00000e19: 	shll	%cl, %eax
    00000e1b: 	andl	(%rbp,%rdx,4), %eax
    00000e1f: 	cmpl	$0x1, %eax
    00000e22: 	sbbq	$-0x1, %rbx
    00000e26: 	addq	$0x1, %rcx
    00000e2a: 	cmpq	$0x3e7d, %rcx
    00000e31: 	jne	.Ltmp13 # Offset: 3633
    00000e33: 	leaq	data32unsigned2(%rip), %r10
    00000e3a: 	leaq	0x7d0(%r10), %r11
    00000e41: 	movq	%r10, %r13
    00000e44: 	movq	%r10, %rax
    00000e47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp14:
    00000e50: 	movaps	%xmm0, (%rax)
    00000e53: 	addq	$0x10, %rax
    00000e57: 	cmpq	%r11, %rax
    00000e5a: 	jne	.Ltmp14 # Offset: 3674
    00000e5c: 	leaq	data32unsigned3(%rip), %r15
    00000e63: 	xorl	%eax, %eax
    00000e65: 	movl	$0xfa, %ecx
    00000e6a: 	movl	$0x3e7d, %edx
    00000e6f: 	movq	%r15, %rdi
    00000e72: 	movl	$0x3, %esi
    00000e77: 	movq	%r10, 0x8(%rsp)
    00000e7c: 	leaq	DATAat0x15f73(%rip), %r9
    00000e83: 	rep		stosq	%rax, %es:(%rdi)
    00000e86: 	leaq	_Z16SetBitsOptimizedIjEvPT_mm(%rip), %r8
    00000e8d: 	movq	%rbp, %rdi
    00000e90: 	movl	$0x3e7a, %ecx
    00000e95: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 3733
    00000e9a: 	movq	%rbp, %rdi
    00000e9d: 	movl	$0x3e7a, %ecx
    00000ea2: 	leaq	DATAat0x15f8e(%rip), %r9
    00000ea9: 	leaq	_Z14SetBitsHalfOptIjEvPT_mm(%rip), %r8
    00000eb0: 	movl	$0x3e7d, %edx
    00000eb5: 	movl	$0x3, %esi
    00000eba: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 3770
    00000ebf: 	movq	%rbp, %rdi
    00000ec2: 	movl	$0x3e7a, %ecx
    00000ec7: 	leaq	DATAat0x15fa8(%rip), %r9
    00000ece: 	leaq	_Z12SetBitsShiftIjEvPT_mm(%rip), %r8
    00000ed5: 	movl	$0x3e7d, %edx
    00000eda: 	movl	$0x3, %esi
    00000edf: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 3807
    00000ee4: 	movq	%rbp, %rdi
    00000ee7: 	movl	$0x3e7a, %ecx
    00000eec: 	leaq	DATAat0x15fbf(%rip), %r9
    00000ef3: 	leaq	_Z7SetBitsIjEvPT_mm(%rip), %r8
    00000efa: 	movl	$0x3e7d, %edx
    00000eff: 	movl	$0x3, %esi
    00000f04: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 3844
    00000f09: 	movq	%rbp, %rdi
    00000f0c: 	xorl	%ecx, %ecx
    00000f0e: 	movl	$0x3e7d, %edx
    00000f13: 	leaq	DATAat0x15fd0(%rip), %r9
    00000f1a: 	leaq	_Z16ClearBitsHalfOptIjEvPT_mm(%rip), %r8
    00000f21: 	movl	$0x3, %esi
    00000f26: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 3878
    00000f2b: 	movq	%rbp, %rdi
    00000f2e: 	xorl	%ecx, %ecx
    00000f30: 	movl	$0x3e7d, %edx
    00000f35: 	leaq	DATAat0x15fec(%rip), %r9
    00000f3c: 	leaq	_Z14ClearBitsShiftIjEvPT_mm(%rip), %r8
    00000f43: 	movl	$0x3, %esi
    00000f48: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 3912
    00000f4d: 	movq	%rbp, %rdi
    00000f50: 	xorl	%ecx, %ecx
    00000f52: 	movl	$0x3e7d, %edx
    00000f57: 	leaq	DATAat0x16005(%rip), %r9
    00000f5e: 	leaq	_Z9ClearBitsIjEvPT_mm(%rip), %r8
    00000f65: 	movl	$0x3, %esi
    00000f6a: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 3946
    00000f6f: 	movq	%rbx, %rcx
    00000f72: 	movl	$0x3e7d, %edx
    00000f77: 	movq	%r13, %rdi
    00000f7a: 	leaq	DATAat0x16018(%rip), %r9
    00000f81: 	leaq	_Z17InvertBitsHalfOptIjEvPT_mm(%rip), %r8
    00000f88: 	movl	$0x3, %esi
    00000f8d: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 3981
    00000f92: 	movq	%rbx, %rcx
    00000f95: 	movl	$0x3e7d, %edx
    00000f9a: 	movq	%r13, %rdi
    00000f9d: 	leaq	DATAat0x16035(%rip), %r9
    00000fa4: 	leaq	_Z15InvertBitsShiftIjEvPT_mm(%rip), %r8
    00000fab: 	movl	$0x3, %esi
    00000fb0: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 4016
    00000fb5: 	movq	%rbx, %rcx
    00000fb8: 	movl	$0x3e7d, %edx
    00000fbd: 	movq	%r13, %rdi
    00000fc0: 	leaq	DATAat0x1604f(%rip), %r9
    00000fc7: 	leaq	_Z10InvertBitsIjEvPT_mm(%rip), %r8
    00000fce: 	movl	$0x3, %esi
    00000fd3: 	callq	_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc # Offset: 4051
    00000fd8: 	movd	init_value(%rip), %xmm2
    00000fe0: 	leaq	data32unsigned(%rip), %rbp
    00000fe7: 	movq	0x8(%rsp), %r10
    00000fec: 	movq	%rbp, %rax
    00000fef: 	leaq	DATAat0x1ef30(%rip), %r11
    00000ff6: 	pshufd	$0x0, %xmm2, %xmm0
    00000ffb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp15:
    00001000: 	movaps	%xmm0, (%rax)
    00001003: 	addq	$0x10, %rax
    00001007: 	cmpq	%rax, %r14
    0000100a: 	jne	.Ltmp15 # Offset: 4106
    0000100c: 	leaq	data32unsigned2(%rip), %rax
    00001013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp16:
    00001018: 	movaps	%xmm0, (%rax)
    0000101b: 	addq	$0x10, %rax
    0000101f: 	cmpq	%r11, %rax
    00001022: 	jne	.Ltmp16 # Offset: 4130
    00001024: 	movq	%r10, 0x8(%rsp)
    00001029: 	subq	$0x8, %rsp
    0000102d: 	movq	%rbx, %r8
    00001030: 	movq	%r13, %rsi
    00001033: 	leaq	DATAat0x154f0(%rip), %rax
    0000103a: 	leaq	_Z21AndBitTablesOptimizedIjEvPT_PKS0_mm(%rip), %r9
    00001041: 	movl	$0x3e7d, %ecx
    00001046: 	movq	%rbp, %rdi
    00001049: 	pushq	%rax
    0000104a: 	movl	$0x3, %edx
    0000104f: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4175
    00001054: 	movq	%rbx, %r8
    00001057: 	movl	$0x3e7d, %ecx
    0000105c: 	movq	%r13, %rsi
    0000105f: 	leaq	DATAat0x15518(%rip), %rax
    00001066: 	leaq	_Z19AndBitTablesHalfOptIjEvPT_PKS0_mm(%rip), %r9
    0000106d: 	movl	$0x3, %edx
    00001072: 	movq	%rbp, %rdi
    00001075: 	movq	%rax, (%rsp)
    00001079: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4217
    0000107e: 	movq	%rbx, %r8
    00001081: 	movl	$0x3e7d, %ecx
    00001086: 	movq	%r13, %rsi
    00001089: 	leaq	DATAat0x16063(%rip), %rax
    00001090: 	leaq	_Z17AndBitTablesShiftIjEvPT_PKS0_mm(%rip), %r9
    00001097: 	movl	$0x3, %edx
    0000109c: 	movq	%rbp, %rdi
    0000109f: 	movq	%rax, (%rsp)
    000010a3: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4259
    000010a8: 	movq	%rbx, %r8
    000010ab: 	movl	$0x3e7d, %ecx
    000010b0: 	movq	%r13, %rsi
    000010b3: 	leaq	DATAat0x16081(%rip), %rax
    000010ba: 	leaq	_Z12AndBitTablesIjEvPT_PKS0_mm(%rip), %r9
    000010c1: 	movl	$0x3, %edx
    000010c6: 	movq	%rbp, %rdi
    000010c9: 	movq	%rax, (%rsp)
    000010cd: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4301
    000010d2: 	movq	%rbx, %r8
    000010d5: 	movl	$0x3e7d, %ecx
    000010da: 	movq	%r13, %rsi
    000010dd: 	leaq	DATAat0x15540(%rip), %rax
    000010e4: 	leaq	_Z18OrBitTablesHalfOptIjEvPT_PKS0_mm(%rip), %r9
    000010eb: 	movl	$0x3, %edx
    000010f0: 	movq	%rbp, %rdi
    000010f3: 	movq	%rax, (%rsp)
    000010f7: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4343
    000010fc: 	movq	%rbx, %r8
    000010ff: 	movl	$0x3e7d, %ecx
    00001104: 	movq	%r13, %rsi
    00001107: 	leaq	DATAat0x16099(%rip), %rax
    0000110e: 	leaq	_Z16OrBitTablesShiftIjEvPT_PKS0_mm(%rip), %r9
    00001115: 	movl	$0x3, %edx
    0000111a: 	movq	%rbp, %rdi
    0000111d: 	movq	%rax, (%rsp)
    00001121: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4385
    00001126: 	movq	%rbx, %r8
    00001129: 	movl	$0x3e7d, %ecx
    0000112e: 	movq	%r13, %rsi
    00001131: 	leaq	DATAat0x160b6(%rip), %rax
    00001138: 	leaq	_Z11OrBitTablesIjEvPT_PKS0_mm(%rip), %r9
    0000113f: 	movl	$0x3, %edx
    00001144: 	movq	%rbp, %rdi
    00001147: 	movq	%rax, (%rsp)
    0000114b: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4427
    00001150: 	movq	%rbx, %r8
    00001153: 	movl	$0x3e7d, %ecx
    00001158: 	movq	%r13, %rsi
    0000115b: 	leaq	DATAat0x15560(%rip), %rax
    00001162: 	leaq	_Z19XorBitTablesHalfOptIjEvPT_PKS0_mm(%rip), %r9
    00001169: 	movl	$0x3, %edx
    0000116e: 	movq	%rbp, %rdi
    00001171: 	movq	%rax, (%rsp)
    00001175: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4469
    0000117a: 	movq	%rbx, %r8
    0000117d: 	movl	$0x3e7d, %ecx
    00001182: 	movq	%r13, %rsi
    00001185: 	leaq	DATAat0x160cd(%rip), %rax
    0000118c: 	leaq	_Z17XorBitTablesShiftIjEvPT_PKS0_mm(%rip), %r9
    00001193: 	movl	$0x3, %edx
    00001198: 	movq	%rbp, %rdi
    0000119b: 	movq	%rax, (%rsp)
    0000119f: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4511
    000011a4: 	movq	%rbx, %r8
    000011a7: 	movl	$0x3e7d, %ecx
    000011ac: 	movq	%r13, %rsi
    000011af: 	leaq	DATAat0x160eb(%rip), %rax
    000011b6: 	leaq	_Z12XorBitTablesIjEvPT_PKS0_mm(%rip), %r9
    000011bd: 	movl	$0x3, %edx
    000011c2: 	movq	%rbp, %rdi
    000011c5: 	movq	%rax, (%rsp)
    000011c9: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4553
    000011ce: 	xorl	%r8d, %r8d
    000011d1: 	movl	$0x3e7d, %ecx
    000011d6: 	movq	%r13, %rsi
    000011d9: 	leaq	DATAat0x15588(%rip), %rax
    000011e0: 	leaq	_Z29AndComplimentBitTablesHalfOptIjEvPT_PKS0_mm(%rip), %r9
    000011e7: 	movl	$0x3, %edx
    000011ec: 	movq	%rbp, %rdi
    000011ef: 	movq	%rax, (%rsp)
    000011f3: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4595
    000011f8: 	xorl	%r8d, %r8d
    000011fb: 	movl	$0x3e7d, %ecx
    00001200: 	movq	%r13, %rsi
    00001203: 	leaq	DATAat0x155b8(%rip), %rax
    0000120a: 	leaq	_Z27AndComplimentBitTablesShiftIjEvPT_PKS0_mm(%rip), %r9
    00001211: 	movl	$0x3, %edx
    00001216: 	movq	%rbp, %rdi
    00001219: 	movq	%rax, (%rsp)
    0000121d: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4637
    00001222: 	movl	$0x3e7d, %ecx
    00001227: 	movq	%r13, %rsi
    0000122a: 	xorl	%r8d, %r8d
    0000122d: 	leaq	DATAat0x155e8(%rip), %rax
    00001234: 	leaq	_Z22AndComplimentBitTablesIjEvPT_PKS0_mm(%rip), %r9
    0000123b: 	movl	$0x3, %edx
    00001240: 	movq	%rbp, %rdi
    00001243: 	movq	%rax, (%rsp)
    00001247: 	callq	_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc # Offset: 4679
    0000124c: 	movd	init_value(%rip), %xmm3
    00001254: 	popq	%rcx
    00001255: 	leaq	DATAat0x1ef30(%rip), %r11
    0000125c: 	popq	%rsi
    0000125d: 	movq	0x8(%rsp), %r10
    00001262: 	pshufd	$0x0, %xmm3, %xmm0
    00001267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp17:
    00001270: 	movaps	%xmm0, (%r12)
    00001275: 	addq	$0x10, %r12
    00001279: 	cmpq	%r12, %r14
    0000127c: 	jne	.Ltmp17 # Offset: 4732
    0000127e: 	nop # Size: 2
.Ltmp18:
    00001280: 	movaps	%xmm0, (%r10)
    00001284: 	addq	$0x10, %r10
    00001288: 	cmpq	%r11, %r10
    0000128b: 	jne	.Ltmp18 # Offset: 4747
    0000128d: 	leaq	DATAat0x15610(%rip), %rax
    00001294: 	movq	%r13, %rsi
    00001297: 	movq	%rbx, %r9
    0000129a: 	movq	%rbp, %rdx
    0000129d: 	pushq	%rax
    0000129e: 	leaq	_Z23StencilBitTablesHalfOptIjEvPT_PKS0_S3_mm(%rip), %rax
    000012a5: 	movl	$0x3, %ecx
    000012aa: 	movq	%r15, %rdi
    000012ad: 	pushq	%rax
    000012ae: 	movl	$0x3e7d, %r8d
    000012b4: 	callq	_Z13test_blitbitsIjPFvPjPKjS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 4788
    000012b9: 	popq	%r11
    000012bb: 	leaq	DATAat0x15638(%rip), %rax
    000012c2: 	popq	%r12
    000012c4: 	pushq	%rax
    000012c5: 	leaq	_Z21StencilBitTablesShiftIjEvPT_PKS0_S3_mm(%rip), %rax
    000012cc: 	movq	%r13, %rsi
    000012cf: 	movq	%rbx, %r9
    000012d2: 	pushq	%rax
    000012d3: 	movl	$0x3e7d, %r8d
    000012d9: 	movl	$0x3, %ecx
    000012de: 	movq	%rbp, %rdx
    000012e1: 	movq	%r15, %rdi
    000012e4: 	callq	_Z13test_blitbitsIjPFvPjPKjS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 4836
    000012e9: 	popq	%r14
    000012eb: 	popq	%rax
    000012ec: 	leaq	DATAat0x16103(%rip), %rax
    000012f3: 	pushq	%rax
    000012f4: 	leaq	_Z16StencilBitTablesIjEvPT_PKS0_S3_mm(%rip), %rax
    000012fb: 	movq	%rbx, %r9
    000012fe: 	movl	$0x3, %ecx
    00001303: 	pushq	%rax
    00001304: 	movl	$0x3e7d, %r8d
    0000130a: 	movq	%r13, %rsi
    0000130d: 	movq	%rbp, %rdx
    00001310: 	movq	%r15, %rdi
    00001313: 	leaq	data64unsigned(%rip), %r13
    0000131a: 	movq	%r13, %r12
    0000131d: 	callq	_Z13test_blitbitsIjPFvPjPKjS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 4893
    00001322: 	movl	$0x3e7d, %edx
    00001327: 	movl	$0x3, %esi
    0000132c: 	movq	%rbp, %rdi
    0000132f: 	callq	_Z16SetBitsOptimizedIjEvPT_mm # Offset: 4911
    00001334: 	popq	%rax
    00001335: 	leaq	DATAat0x15660(%rip), %r8
    0000133c: 	popq	%rdx
    0000133d: 	leaq	_Z19CountBits32MultiplyIjEmPT_mm(%rip), %rcx
    00001344: 	movl	$0x3e7d, %edx
    00001349: 	movl	$0x3, %esi
    0000134e: 	movq	%rbp, %rdi
    00001351: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 4945
    00001356: 	leaq	DATAat0x15680(%rip), %r8
    0000135d: 	movl	$0x3e7d, %edx
    00001362: 	movq	%rbp, %rdi
    00001365: 	leaq	_Z19CountBits32ParallelIjEmPT_mm(%rip), %rcx
    0000136c: 	movl	$0x3, %esi
    00001371: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 4977
    00001376: 	leaq	DATAat0x156a0(%rip), %r8
    0000137d: 	movl	$0x3e7d, %edx
    00001382: 	movq	%rbp, %rdi
    00001385: 	leaq	_Z20CountBits32Parallel2IjEmPT_mm(%rip), %rcx
    0000138c: 	movl	$0x3, %esi
    00001391: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 5009
    00001396: 	leaq	DATAat0x1611f(%rip), %r8
    0000139d: 	movl	$0x3e7d, %edx
    000013a2: 	movq	%rbp, %rdi
    000013a5: 	leaq	_Z18CountBitsByteTableIjEmPT_mm(%rip), %rcx
    000013ac: 	movl	$0x3, %esi
    000013b1: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 5041
    000013b6: 	leaq	DATAat0x156c0(%rip), %r8
    000013bd: 	movl	$0x3e7d, %edx
    000013c2: 	movq	%rbp, %rdi
    000013c5: 	leaq	_Z19CountBitsByteDirectIjEmPT_mm(%rip), %rcx
    000013cc: 	movl	$0x3, %esi
    000013d1: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 5073
    000013d6: 	leaq	DATAat0x156e0(%rip), %r8
    000013dd: 	movl	$0x3e7d, %edx
    000013e2: 	movq	%rbp, %rdi
    000013e5: 	leaq	_Z20CountBitsByteDirect2IjEmPT_mm(%rip), %rcx
    000013ec: 	movl	$0x3, %esi
    000013f1: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 5105
    000013f6: 	leaq	DATAat0x1613d(%rip), %r8
    000013fd: 	movl	$0x3e7d, %edx
    00001402: 	movq	%rbp, %rdi
    00001405: 	leaq	_Z17CountBitsByteLoopIjEmPT_mm(%rip), %rcx
    0000140c: 	movl	$0x3, %esi
    00001411: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 5137
    00001416: 	leaq	DATAat0x1615a(%rip), %r8
    0000141d: 	movl	$0x3e7d, %edx
    00001422: 	movq	%rbp, %rdi
    00001425: 	leaq	_Z18CountBitsByteLoop2IjEmPT_mm(%rip), %rcx
    0000142c: 	movl	$0x3, %esi
    00001431: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 5169
    00001436: 	leaq	DATAat0x16178(%rip), %r8
    0000143d: 	movl	$0x3e7d, %edx
    00001442: 	movq	%rbp, %rdi
    00001445: 	leaq	_Z14CountBitsShiftIjEmPT_mm(%rip), %rcx
    0000144c: 	movl	$0x3, %esi
    00001451: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 5201
    00001456: 	leaq	DATAat0x16192(%rip), %r8
    0000145d: 	movl	$0x3e7d, %edx
    00001462: 	movq	%rbp, %rdi
    00001465: 	leaq	_Z9CountBitsIjEmPT_mm(%rip), %rcx
    0000146c: 	movl	$0x3, %esi
    00001471: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 5233
    00001476: 	movl	iterations(%rip), %edx
    0000147c: 	xorl	%r8d, %r8d
    0000147f: 	xorl	%ecx, %ecx
    00001481: 	movl	$0x3e80, %esi
    00001486: 	leaq	DATAat0x161a6(%rip), %rdi
    0000148d: 	callq	_Z9summarizePKciiii # Offset: 5261
    00001492: 	movslq	init_value(%rip), %rax
    00001499: 	leaq	0x7d0(%r13), %r10
    000014a0: 	movq	%rax, %xmm0
    000014a5: 	movq	%r13, %rax
    000014a8: 	punpcklqdq	%xmm0, %xmm0
    000014ac: 	nopl	(%rax) # Size: 4
.Ltmp19:
    000014b0: 	movaps	%xmm0, (%rax)
    000014b3: 	addq	$0x10, %rax
    000014b7: 	cmpq	%r10, %rax
    000014ba: 	jne	.Ltmp19 # Offset: 5306
    000014bc: 	xorl	%ebx, %ebx
    000014be: 	movl	$0x3, %ecx
    000014c3: 	movl	$0x1, %esi
    000014c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp20:
    000014d0: 	movq	%rcx, %rdx
    000014d3: 	movq	%rsi, %rax
    000014d6: 	shrq	$0x6, %rdx
    000014da: 	shlq	%cl, %rax
    000014dd: 	andq	(%r12,%rdx,8), %rax
    000014e1: 	cmpq	$0x1, %rax
    000014e5: 	sbbq	$-0x1, %rbx
    000014e9: 	addq	$0x1, %rcx
    000014ed: 	cmpq	$0x3e7d, %rcx
    000014f4: 	jne	.Ltmp20 # Offset: 5364
    000014f6: 	leaq	data64unsigned2(%rip), %r14
    000014fd: 	leaq	0x7d0(%r14), %r11
    00001504: 	movq	%r14, %r15
    00001507: 	movq	%r14, %rax
    0000150a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp21:
    00001510: 	movaps	%xmm0, (%rax)
    00001513: 	addq	$0x10, %rax
    00001517: 	cmpq	%rax, %r11
    0000151a: 	jne	.Ltmp21 # Offset: 5402
    0000151c: 	xorl	%eax, %eax
    0000151e: 	movl	$0xfa, %ecx
    00001523: 	leaq	data64unsigned3(%rip), %rdi
    0000152a: 	movl	$0x3e7d, %edx
    0000152f: 	rep		stosq	%rax, %es:(%rdi)
    00001532: 	leaq	DATAat0x161b9(%rip), %r9
    00001539: 	movq	%r12, %rdi
    0000153c: 	movl	$0x3e7a, %ecx
    00001541: 	leaq	_Z16SetBitsOptimizedImEvPT_mm(%rip), %r8
    00001548: 	movl	$0x3, %esi
    0000154d: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5453
    00001552: 	movq	%r12, %rdi
    00001555: 	movl	$0x3e7a, %ecx
    0000155a: 	leaq	DATAat0x161d4(%rip), %r9
    00001561: 	leaq	_Z14SetBitsHalfOptImEvPT_mm(%rip), %r8
    00001568: 	movl	$0x3e7d, %edx
    0000156d: 	movl	$0x3, %esi
    00001572: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5490
    00001577: 	movq	%r12, %rdi
    0000157a: 	movl	$0x3e7a, %ecx
    0000157f: 	leaq	DATAat0x161ee(%rip), %r9
    00001586: 	leaq	_Z12SetBitsShiftImEvPT_mm(%rip), %r8
    0000158d: 	movl	$0x3e7d, %edx
    00001592: 	movl	$0x3, %esi
    00001597: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5527
    0000159c: 	movq	%r12, %rdi
    0000159f: 	movl	$0x3e7a, %ecx
    000015a4: 	leaq	DATAat0x16205(%rip), %r9
    000015ab: 	leaq	_Z7SetBitsImEvPT_mm(%rip), %r8
    000015b2: 	movl	$0x3e7d, %edx
    000015b7: 	movl	$0x3, %esi
    000015bc: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5564
    000015c1: 	movq	%r12, %rdi
    000015c4: 	xorl	%ecx, %ecx
    000015c6: 	movl	$0x3e7d, %edx
    000015cb: 	leaq	DATAat0x16216(%rip), %r9
    000015d2: 	leaq	_Z16ClearBitsHalfOptImEvPT_mm(%rip), %r8
    000015d9: 	movl	$0x3, %esi
    000015de: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5598
    000015e3: 	movq	%r12, %rdi
    000015e6: 	xorl	%ecx, %ecx
    000015e8: 	movl	$0x3e7d, %edx
    000015ed: 	leaq	DATAat0x16232(%rip), %r9
    000015f4: 	leaq	_Z14ClearBitsShiftImEvPT_mm(%rip), %r8
    000015fb: 	movl	$0x3, %esi
    00001600: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5632
    00001605: 	movq	%r12, %rdi
    00001608: 	xorl	%ecx, %ecx
    0000160a: 	movl	$0x3e7d, %edx
    0000160f: 	leaq	DATAat0x1624b(%rip), %r9
    00001616: 	leaq	_Z9ClearBitsImEvPT_mm(%rip), %r8
    0000161d: 	movl	$0x3, %esi
    00001622: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5666
    00001627: 	movq	%rbx, %rcx
    0000162a: 	movl	$0x3e7d, %edx
    0000162f: 	movq	%r15, %rdi
    00001632: 	leaq	DATAat0x1625e(%rip), %r9
    00001639: 	leaq	_Z17InvertBitsHalfOptImEvPT_mm(%rip), %r8
    00001640: 	movl	$0x3, %esi
    00001645: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5701
    0000164a: 	movq	%rbx, %rcx
    0000164d: 	movl	$0x3e7d, %edx
    00001652: 	movq	%r15, %rdi
    00001655: 	leaq	DATAat0x1627b(%rip), %r9
    0000165c: 	leaq	_Z15InvertBitsShiftImEvPT_mm(%rip), %r8
    00001663: 	movl	$0x3, %esi
    00001668: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5736
    0000166d: 	movq	%rbx, %rcx
    00001670: 	movl	$0x3e7d, %edx
    00001675: 	movq	%r15, %rdi
    00001678: 	leaq	DATAat0x16295(%rip), %r9
    0000167f: 	leaq	_Z10InvertBitsImEvPT_mm(%rip), %r8
    00001686: 	movl	$0x3, %esi
    0000168b: 	callq	_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc # Offset: 5771
    00001690: 	movslq	init_value(%rip), %rax
    00001697: 	leaq	data64unsigned(%rip), %r12
    0000169e: 	leaq	DATAat0x206d0(%rip), %r11
    000016a5: 	leaq	0x7d0(%r12), %r10
    000016ad: 	movq	%rax, %xmm0
    000016b2: 	movq	%r12, %rax
    000016b5: 	punpcklqdq	%xmm0, %xmm0
    000016b9: 	nopl	(%rax) # Size: 7
.Ltmp22:
    000016c0: 	movaps	%xmm0, (%rax)
    000016c3: 	addq	$0x10, %rax
    000016c7: 	cmpq	%r10, %rax
    000016ca: 	jne	.Ltmp22 # Offset: 5834
    000016cc: 	leaq	data64unsigned2(%rip), %rax
    000016d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp23:
    000016d8: 	movaps	%xmm0, (%rax)
    000016db: 	addq	$0x10, %rax
    000016df: 	cmpq	%rax, %r11
    000016e2: 	jne	.Ltmp23 # Offset: 5858
    000016e4: 	subq	$0x8, %rsp
    000016e8: 	movq	%rbx, %r8
    000016eb: 	movl	$0x3e7d, %ecx
    000016f0: 	movq	%r15, %rsi
    000016f3: 	leaq	DATAat0x15700(%rip), %rax
    000016fa: 	leaq	_Z21AndBitTablesOptimizedImEvPT_PKS0_mm(%rip), %r9
    00001701: 	movl	$0x3, %edx
    00001706: 	movq	%r12, %rdi
    00001709: 	pushq	%rax
    0000170a: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 5898
    0000170f: 	movq	%rbx, %r8
    00001712: 	movl	$0x3e7d, %ecx
    00001717: 	movq	%r15, %rsi
    0000171a: 	leaq	DATAat0x15728(%rip), %rax
    00001721: 	leaq	_Z19AndBitTablesHalfOptImEvPT_PKS0_mm(%rip), %r9
    00001728: 	movl	$0x3, %edx
    0000172d: 	movq	%r12, %rdi
    00001730: 	movq	%rax, (%rsp)
    00001734: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 5940
    00001739: 	movq	%rbx, %r8
    0000173c: 	movl	$0x3e7d, %ecx
    00001741: 	movq	%r15, %rsi
    00001744: 	leaq	DATAat0x162a9(%rip), %rax
    0000174b: 	leaq	_Z17AndBitTablesShiftImEvPT_PKS0_mm(%rip), %r9
    00001752: 	movl	$0x3, %edx
    00001757: 	movq	%r12, %rdi
    0000175a: 	movq	%rax, (%rsp)
    0000175e: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 5982
    00001763: 	movq	%rbx, %r8
    00001766: 	movl	$0x3e7d, %ecx
    0000176b: 	movq	%r15, %rsi
    0000176e: 	leaq	DATAat0x162c7(%rip), %rax
    00001775: 	leaq	_Z12AndBitTablesImEvPT_PKS0_mm(%rip), %r9
    0000177c: 	movl	$0x3, %edx
    00001781: 	movq	%r12, %rdi
    00001784: 	movq	%rax, (%rsp)
    00001788: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6024
    0000178d: 	movq	%rbx, %r8
    00001790: 	movl	$0x3e7d, %ecx
    00001795: 	movq	%r15, %rsi
    00001798: 	leaq	DATAat0x15750(%rip), %rax
    0000179f: 	leaq	_Z18OrBitTablesHalfOptImEvPT_PKS0_mm(%rip), %r9
    000017a6: 	movl	$0x3, %edx
    000017ab: 	movq	%r12, %rdi
    000017ae: 	movq	%rax, (%rsp)
    000017b2: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6066
    000017b7: 	movq	%rbx, %r8
    000017ba: 	movl	$0x3e7d, %ecx
    000017bf: 	movq	%r15, %rsi
    000017c2: 	leaq	DATAat0x162df(%rip), %rax
    000017c9: 	leaq	_Z16OrBitTablesShiftImEvPT_PKS0_mm(%rip), %r9
    000017d0: 	movl	$0x3, %edx
    000017d5: 	movq	%r12, %rdi
    000017d8: 	movq	%rax, (%rsp)
    000017dc: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6108
    000017e1: 	movq	%rbx, %r8
    000017e4: 	movl	$0x3e7d, %ecx
    000017e9: 	movq	%r15, %rsi
    000017ec: 	leaq	DATAat0x162fc(%rip), %rax
    000017f3: 	leaq	_Z11OrBitTablesImEvPT_PKS0_mm(%rip), %r9
    000017fa: 	movl	$0x3, %edx
    000017ff: 	movq	%r12, %rdi
    00001802: 	movq	%rax, (%rsp)
    00001806: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6150
    0000180b: 	movq	%rbx, %r8
    0000180e: 	movl	$0x3e7d, %ecx
    00001813: 	movq	%r15, %rsi
    00001816: 	leaq	DATAat0x15770(%rip), %rax
    0000181d: 	leaq	_Z19XorBitTablesHalfOptImEvPT_PKS0_mm(%rip), %r9
    00001824: 	movl	$0x3, %edx
    00001829: 	movq	%r12, %rdi
    0000182c: 	movq	%rax, (%rsp)
    00001830: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6192
    00001835: 	movq	%rbx, %r8
    00001838: 	movl	$0x3e7d, %ecx
    0000183d: 	movq	%r15, %rsi
    00001840: 	leaq	DATAat0x16313(%rip), %rax
    00001847: 	leaq	_Z17XorBitTablesShiftImEvPT_PKS0_mm(%rip), %r9
    0000184e: 	movl	$0x3, %edx
    00001853: 	movq	%r12, %rdi
    00001856: 	movq	%rax, (%rsp)
    0000185a: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6234
    0000185f: 	movq	%rbx, %r8
    00001862: 	movl	$0x3e7d, %ecx
    00001867: 	movq	%r15, %rsi
    0000186a: 	leaq	DATAat0x16331(%rip), %rax
    00001871: 	leaq	_Z12XorBitTablesImEvPT_PKS0_mm(%rip), %r9
    00001878: 	movl	$0x3, %edx
    0000187d: 	movq	%r12, %rdi
    00001880: 	movq	%rax, (%rsp)
    00001884: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6276
    00001889: 	xorl	%r8d, %r8d
    0000188c: 	movl	$0x3e7d, %ecx
    00001891: 	movq	%r15, %rsi
    00001894: 	leaq	DATAat0x15798(%rip), %rax
    0000189b: 	leaq	_Z29AndComplimentBitTablesHalfOptImEvPT_PKS0_mm(%rip), %r9
    000018a2: 	movl	$0x3, %edx
    000018a7: 	movq	%r12, %rdi
    000018aa: 	movq	%rax, (%rsp)
    000018ae: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6318
    000018b3: 	xorl	%r8d, %r8d
    000018b6: 	movl	$0x3e7d, %ecx
    000018bb: 	movq	%r15, %rsi
    000018be: 	leaq	DATAat0x157c8(%rip), %rax
    000018c5: 	leaq	_Z27AndComplimentBitTablesShiftImEvPT_PKS0_mm(%rip), %r9
    000018cc: 	movl	$0x3, %edx
    000018d1: 	movq	%r12, %rdi
    000018d4: 	movq	%rax, (%rsp)
    000018d8: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6360
    000018dd: 	xorl	%r8d, %r8d
    000018e0: 	movl	$0x3e7d, %ecx
    000018e5: 	movq	%r15, %rsi
    000018e8: 	leaq	DATAat0x157f8(%rip), %rax
    000018ef: 	leaq	_Z22AndComplimentBitTablesImEvPT_PKS0_mm(%rip), %r9
    000018f6: 	movl	$0x3, %edx
    000018fb: 	movq	%r12, %rdi
    000018fe: 	movq	%rax, (%rsp)
    00001902: 	callq	_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc # Offset: 6402
    00001907: 	movslq	init_value(%rip), %rax
    0000190e: 	popq	%r9
    00001910: 	leaq	DATAat0x206d0(%rip), %r11
    00001917: 	popq	%r10
    00001919: 	leaq	end_time(%rip), %r10
    00001920: 	movq	%rax, %xmm0
    00001925: 	punpcklqdq	%xmm0, %xmm0
    00001929: 	nopl	(%rax) # Size: 7
.Ltmp24:
    00001930: 	movaps	%xmm0, (%r13)
    00001935: 	addq	$0x10, %r13
    00001939: 	cmpq	%r10, %r13
    0000193c: 	jne	.Ltmp24 # Offset: 6460
    0000193e: 	nop # Size: 2
.Ltmp25:
    00001940: 	movaps	%xmm0, (%r14)
    00001944: 	addq	$0x10, %r14
    00001948: 	cmpq	%r14, %r11
    0000194b: 	jne	.Ltmp25 # Offset: 6475
    0000194d: 	leaq	DATAat0x15820(%rip), %rax
    00001954: 	movq	%rbx, %r9
    00001957: 	movq	%r12, %rdx
    0000195a: 	movq	%r15, %rsi
    0000195d: 	pushq	%rax
    0000195e: 	leaq	_Z23StencilBitTablesHalfOptImEvPT_PKS0_S3_mm(%rip), %rax
    00001965: 	movl	$0x3e7d, %r8d
    0000196b: 	movl	$0x3, %ecx
    00001970: 	pushq	%rax
    00001971: 	leaq	data64unsigned3(%rip), %rdi
    00001978: 	callq	_Z13test_blitbitsImPFvPmPKmS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 6520
    0000197d: 	popq	%rax
    0000197e: 	leaq	DATAat0x15848(%rip), %rax
    00001985: 	popq	%rdx
    00001986: 	pushq	%rax
    00001987: 	leaq	_Z21StencilBitTablesShiftImEvPT_PKS0_S3_mm(%rip), %rax
    0000198e: 	movq	%rbx, %r9
    00001991: 	movq	%r12, %rdx
    00001994: 	pushq	%rax
    00001995: 	movl	$0x3e7d, %r8d
    0000199b: 	movl	$0x3, %ecx
    000019a0: 	movq	%r15, %rsi
    000019a3: 	leaq	data64unsigned3(%rip), %rdi
    000019aa: 	callq	_Z13test_blitbitsImPFvPmPKmS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 6570
    000019af: 	leaq	DATAat0x16349(%rip), %rax
    000019b6: 	popq	%rcx
    000019b7: 	popq	%rsi
    000019b8: 	pushq	%rax
    000019b9: 	leaq	_Z16StencilBitTablesImEvPT_PKS0_S3_mm(%rip), %rax
    000019c0: 	movq	%rbx, %r9
    000019c3: 	movl	$0x3, %ecx
    000019c8: 	pushq	%rax
    000019c9: 	movl	$0x3e7d, %r8d
    000019cf: 	movq	%r12, %rdx
    000019d2: 	movq	%r15, %rsi
    000019d5: 	leaq	data64unsigned3(%rip), %rdi
    000019dc: 	callq	_Z13test_blitbitsImPFvPmPKmS2_mmEEvPT_PKS5_S8_mmmT0_PKc # Offset: 6620
    000019e1: 	movq	%r12, %rdi
    000019e4: 	movl	$0x3e7d, %edx
    000019e9: 	movl	$0x3, %esi
    000019ee: 	callq	_Z16SetBitsOptimizedImEvPT_mm # Offset: 6638
    000019f3: 	popq	%rdi
    000019f4: 	leaq	_Z19CountBits32MultiplyImEmPT_mm(%rip), %rcx
    000019fb: 	popq	%r8
    000019fd: 	movq	%r12, %rdi
    00001a00: 	leaq	DATAat0x15870(%rip), %r8
    00001a07: 	movl	$0x3e7d, %edx
    00001a0c: 	movl	$0x3, %esi
    00001a11: 	callq	_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc # Offset: 6673
    00001a16: 	movq	%r12, %rdi
    00001a19: 	leaq	DATAat0x15890(%rip), %r8
    00001a20: 	leaq	_Z19CountBits32ParallelImEmPT_mm(%rip), %rcx
    00001a27: 	movl	$0x3e7d, %edx
    00001a2c: 	movl	$0x3, %esi
    00001a31: 	leaq	0x10(%rsp), %r13
    00001a36: 	callq	_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc # Offset: 6710
    00001a3b: 	movq	%rbp, %rdi
    00001a3e: 	movl	$0x3e7d, %edx
    00001a43: 	movq	%r13, %rbx
    00001a46: 	leaq	DATAat0x156a0(%rip), %r8
    00001a4d: 	leaq	_Z20CountBits32Parallel2IjEmPT_mm(%rip), %rcx
    00001a54: 	movl	$0x3, %esi
    00001a59: 	callq	_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc # Offset: 6745
    00001a5e: 	movq	%r12, %rdi
    00001a61: 	leaq	DATAat0x16365(%rip), %r8
    00001a68: 	leaq	_Z18CountBitsByteTableImEmPT_mm(%rip), %rcx
    00001a6f: 	movl	$0x3e7d, %edx
    00001a74: 	movl	$0x3, %esi
    00001a79: 	leaq	0x7e0(%rsp), %rbp
    00001a81: 	callq	_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc # Offset: 6785
    00001a86: 	movq	%r12, %rdi
    00001a89: 	movl	$0x3e7d, %edx
    00001a8e: 	leaq	DATAat0x158b0(%rip), %r8
    00001a95: 	leaq	_Z19CountBitsByteDirectImEmPT_mm(%rip), %rcx
    00001a9c: 	movl	$0x3, %esi
    00001aa1: 	leaq	0xfb0(%rsp), %r14
    00001aa9: 	callq	_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc # Offset: 6825
    00001aae: 	movq	%r12, %rdi
    00001ab1: 	movl	$0x3e7d, %edx
    00001ab6: 	leaq	DATAat0x158d0(%rip), %r8
    00001abd: 	leaq	_Z20CountBitsByteDirect2ImEmPT_mm(%rip), %rcx
    00001ac4: 	movl	$0x3, %esi
    00001ac9: 	callq	_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc # Offset: 6857
    00001ace: 	movq	%r12, %rdi
    00001ad1: 	movl	$0x3e7d, %edx
    00001ad6: 	leaq	DATAat0x16383(%rip), %r8
    00001add: 	leaq	_Z17CountBitsByteLoopImEmPT_mm(%rip), %rcx
    00001ae4: 	movl	$0x3, %esi
    00001ae9: 	callq	_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc # Offset: 6889
    00001aee: 	movq	%r12, %rdi
    00001af1: 	movl	$0x3e7d, %edx
    00001af6: 	leaq	DATAat0x163a0(%rip), %r8
    00001afd: 	leaq	_Z18CountBitsByteLoop2ImEmPT_mm(%rip), %rcx
    00001b04: 	movl	$0x3, %esi
    00001b09: 	callq	_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc # Offset: 6921
    00001b0e: 	movq	%r12, %rdi
    00001b11: 	movl	$0x3e7d, %edx
    00001b16: 	leaq	DATAat0x163be(%rip), %r8
    00001b1d: 	leaq	_Z14CountBitsShiftImEmPT_mm(%rip), %rcx
    00001b24: 	movl	$0x3, %esi
    00001b29: 	callq	_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc # Offset: 6953
    00001b2e: 	movq	%r12, %rdi
    00001b31: 	movl	$0x3e7d, %edx
    00001b36: 	xorl	%r12d, %r12d
    00001b39: 	leaq	DATAat0x163d8(%rip), %r8
    00001b40: 	leaq	_Z9CountBitsImEmPT_mm(%rip), %rcx
    00001b47: 	movl	$0x3, %esi
    00001b4c: 	callq	_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc # Offset: 6988
    00001b51: 	movl	iterations(%rip), %edx
    00001b57: 	xorl	%ecx, %ecx
    00001b59: 	xorl	%r8d, %r8d
    00001b5c: 	movl	$0x3e80, %esi
    00001b61: 	leaq	DATAat0x163ec(%rip), %rdi
    00001b68: 	callq	_Z9summarizePKciiii # Offset: 7016
    00001b6d: 	movl	$0xfa, %edx
    00001b72: 	movq	$-0x1, %rax
    00001b79: 	movq	%r13, %rdi
    00001b7c: 	movabsq	$0x3ffffffffffffff, %rsi
    00001b86: 	movq	%rdx, %rcx
    00001b89: 	rep		stosq	%rax, %es:(%rdi)
    00001b8c: 	movq	%rbp, %rdi
    00001b8f: 	movq	%rsi, 0x7d8(%rsp)
    00001b97: 	movq	%rcx, %rdx
    00001b9a: 	movl	$0xfa, %ecx
    00001b9f: 	rep		stosq	%rax, %es:(%rdi)
    00001ba2: 	movl	$0xfa, %ecx
    00001ba7: 	movq	%r14, %rdi
    00001baa: 	movq	%rdx, %rax
    00001bad: 	rep		stosq	%rax, %es:(%rdi)
    00001bb0: 	movq	%rsi, 0xfa8(%rsp)
    00001bb8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp26:
    00001bc0: 	movq	(%rbx), %rdi
    00001bc3: 	addq	$0x8, %rbx
    00001bc7: 	callq	__popcountdi2@PLT # Offset: 7111
    00001bcc: 	cltq
    00001bce: 	addq	%rax, %r12
    00001bd1: 	cmpq	%rbx, %rbp
    00001bd4: 	jne	.Ltmp26 # Offset: 7124
    00001bd6: 	leaq	_Z14SetBitsStdLoopRSt6bitsetILm15994EE(%rip), %r15
    00001bdd: 	leaq	DATAat0x163ff(%rip), %rcx
    00001be4: 	movq	%r12, %rsi
    00001be7: 	movq	%r13, %rdi
    00001bea: 	leaq	_Z10SetBitsStdRSt6bitsetILm15994EE(%rip), %rdx
    00001bf1: 	movabsq	$0x3ffffffffffffff, %rbx
    00001bfb: 	callq	_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc # Offset: 7163
    00001c00: 	movq	%r15, %rdx
    00001c03: 	movq	%r12, %rsi
    00001c06: 	movq	%r13, %rdi
    00001c09: 	leaq	DATAat0x16412(%rip), %rcx
    00001c10: 	callq	_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc # Offset: 7184
    00001c15: 	movq	%r15, %rdx
    00001c18: 	movq	%r12, %rsi
    00001c1b: 	movq	%r13, %rdi
    00001c1e: 	leaq	DATAat0x1642a(%rip), %rcx
    00001c25: 	leaq	_Z16ClearBitsStdLoopRSt6bitsetILm15994EE(%rip), %r15
    00001c2c: 	callq	_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc # Offset: 7212
    00001c31: 	xorl	%esi, %esi
    00001c33: 	leaq	DATAat0x16443(%rip), %rcx
    00001c3a: 	movq	%r13, %rdi
    00001c3d: 	leaq	_Z12ClearBitsStdRSt6bitsetILm15994EE(%rip), %rdx
    00001c44: 	callq	_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc # Offset: 7236
    00001c49: 	movq	%r15, %rdx
    00001c4c: 	xorl	%esi, %esi
    00001c4e: 	movq	%r13, %rdi
    00001c51: 	leaq	DATAat0x16458(%rip), %rcx
    00001c58: 	callq	_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc # Offset: 7256
    00001c5d: 	movq	%r15, %rdx
    00001c60: 	xorl	%esi, %esi
    00001c62: 	movq	%r13, %rdi
    00001c65: 	leaq	DATAat0x16472(%rip), %rcx
    00001c6c: 	leaq	_Z17InvertBitsStdLoopRSt6bitsetILm15994EE(%rip), %r15
    00001c73: 	callq	_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc # Offset: 7283
    00001c78: 	leaq	DATAat0x1648d(%rip), %rcx
    00001c7f: 	movq	%r12, %rsi
    00001c82: 	movq	%rbp, %rdi
    00001c85: 	leaq	_Z13InvertBitsStdRSt6bitsetILm15994EE(%rip), %rdx
    00001c8c: 	callq	_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc # Offset: 7308
    00001c91: 	movq	%r15, %rdx
    00001c94: 	movq	%r12, %rsi
    00001c97: 	movq	%rbp, %rdi
    00001c9a: 	leaq	DATAat0x164a3(%rip), %rcx
    00001ca1: 	callq	_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc # Offset: 7329
    00001ca6: 	movq	%r15, %rdx
    00001ca9: 	movq	%r12, %rsi
    00001cac: 	movq	%rbp, %rdi
    00001caf: 	movq	$-0x1, %r15
    00001cb6: 	leaq	DATAat0x164be(%rip), %rcx
    00001cbd: 	callq	_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc # Offset: 7357
    00001cc2: 	movq	%r15, %rax
    00001cc5: 	movl	$0xfa, %ecx
    00001cca: 	movq	%r13, %rdi
    00001ccd: 	rep		stosq	%rax, %es:(%rdi)
    00001cd0: 	movl	$0xfa, %ecx
    00001cd5: 	movq	%rbp, %rdi
    00001cd8: 	movq	%r12, %rdx
    00001cdb: 	rep		stosq	%rax, %es:(%rdi)
    00001cde: 	movq	%rbp, %rsi
    00001ce1: 	movq	%r13, %rdi
    00001ce4: 	leaq	DATAat0x164da(%rip), %r8
    00001ceb: 	leaq	_Z15AndBitTablesStdRSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001cf2: 	movq	%rbx, 0x7d8(%rsp)
    00001cfa: 	movq	%rbx, 0xfa8(%rsp)
    00001d02: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7426
    00001d07: 	movq	%r12, %rdx
    00001d0a: 	movq	%rbp, %rsi
    00001d0d: 	movq	%r13, %rdi
    00001d10: 	leaq	DATAat0x158f0(%rip), %r8
    00001d17: 	leaq	_Z19AndBitTablesStdLoopRSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001d1e: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7454
    00001d23: 	movq	%r12, %rdx
    00001d26: 	movq	%rbp, %rsi
    00001d29: 	movq	%r13, %rdi
    00001d2c: 	leaq	DATAat0x15910(%rip), %r8
    00001d33: 	leaq	_Z20AndBitTablesStdLoop2RSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001d3a: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7482
    00001d3f: 	movq	%r12, %rdx
    00001d42: 	movq	%rbp, %rsi
    00001d45: 	movq	%r13, %rdi
    00001d48: 	leaq	DATAat0x164f4(%rip), %r8
    00001d4f: 	leaq	_Z14OrBitTablesStdRSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001d56: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7510
    00001d5b: 	movq	%r12, %rdx
    00001d5e: 	movq	%rbp, %rsi
    00001d61: 	movq	%r13, %rdi
    00001d64: 	leaq	DATAat0x1650d(%rip), %r8
    00001d6b: 	leaq	_Z18OrBitTablesStdLoopRSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001d72: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7538
    00001d77: 	movq	%r12, %rdx
    00001d7a: 	movq	%rbp, %rsi
    00001d7d: 	movq	%r13, %rdi
    00001d80: 	leaq	DATAat0x15930(%rip), %r8
    00001d87: 	leaq	_Z19OrBitTablesStdLoop2RSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001d8e: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7566
    00001d93: 	movq	%r12, %rdx
    00001d96: 	movq	%rbp, %rsi
    00001d99: 	movq	%r13, %rdi
    00001d9c: 	leaq	DATAat0x1652b(%rip), %r8
    00001da3: 	leaq	_Z15XorBitTablesStdRSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001daa: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7594
    00001daf: 	movq	%r12, %rdx
    00001db2: 	movq	%rbp, %rsi
    00001db5: 	movq	%r13, %rdi
    00001db8: 	leaq	DATAat0x15950(%rip), %r8
    00001dbf: 	leaq	_Z19XorBitTablesStdLoopRSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001dc6: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7622
    00001dcb: 	xorl	%edx, %edx
    00001dcd: 	movq	%rbp, %rsi
    00001dd0: 	movq	%r13, %rdi
    00001dd3: 	leaq	DATAat0x15970(%rip), %r8
    00001dda: 	leaq	_Z25AndComplimentBitTablesStdRSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001de1: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7649
    00001de6: 	xorl	%edx, %edx
    00001de8: 	movq	%rbp, %rsi
    00001deb: 	movq	%r13, %rdi
    00001dee: 	leaq	DATAat0x15998(%rip), %r8
    00001df5: 	leaq	_Z29AndComplimentBitTablesStdLoopRSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001dfc: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7676
    00001e01: 	xorl	%edx, %edx
    00001e03: 	movq	%rbp, %rsi
    00001e06: 	movq	%r13, %rdi
    00001e09: 	leaq	DATAat0x159c8(%rip), %r8
    00001e10: 	leaq	_Z30AndComplimentBitTablesStdLoop2RSt6bitsetILm15994EERKS0_(%rip), %rcx
    00001e17: 	callq	_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc # Offset: 7703
    00001e1c: 	movq	%r15, %rax
    00001e1f: 	movl	$0xfa, %ecx
    00001e24: 	movq	%r13, %rdi
    00001e27: 	rep		stosq	%rax, %es:(%rdi)
    00001e2a: 	movl	$0xfa, %ecx
    00001e2f: 	movq	%rbp, %rdi
    00001e32: 	movq	%r13, %rdx
    00001e35: 	rep		stosq	%rax, %es:(%rdi)
    00001e38: 	leaq	DATAat0x16545(%rip), %r9
    00001e3f: 	movq	%r12, %rcx
    00001e42: 	movq	%rbp, %rsi
    00001e45: 	leaq	_Z19StencilBitTablesStdRSt6bitsetILm15994EERKS0_S3_(%rip), %r8
    00001e4c: 	movq	%r14, %rdi
    00001e4f: 	movq	%rbx, 0x7d8(%rsp)
    00001e57: 	movq	%rbx, 0xfa8(%rsp)
    00001e5f: 	callq	_Z16test_blitbitsStdIPFvRSt6bitsetILm15994EERKS1_S4_EEvS2_S4_S4_mT_PKc # Offset: 7775
    00001e64: 	movq	%r12, %rcx
    00001e67: 	movq	%r13, %rdx
    00001e6a: 	movq	%rbp, %rsi
    00001e6d: 	leaq	DATAat0x159f8(%rip), %r9
    00001e74: 	leaq	_Z23StencilBitTablesStdLoopRSt6bitsetILm15994EERKS0_S3_(%rip), %r8
    00001e7b: 	movq	%r14, %rdi
    00001e7e: 	callq	_Z16test_blitbitsStdIPFvRSt6bitsetILm15994EERKS1_S4_EEvS2_S4_S4_mT_PKc # Offset: 7806
    00001e83: 	movq	%r13, %rdx
    00001e86: 	movq	%r12, %rcx
    00001e89: 	movq	%rbp, %rsi
    00001e8c: 	leaq	_Z24StencilBitTablesStdLoop2RSt6bitsetILm15994EERKS0_S3_(%rip), %r8
    00001e93: 	leaq	DATAat0x15a20(%rip), %r9
    00001e9a: 	movq	%r14, %rdi
    00001e9d: 	callq	_Z16test_blitbitsStdIPFvRSt6bitsetILm15994EERKS1_S4_EEvS2_S4_S4_mT_PKc # Offset: 7837
    00001ea2: 	movq	%r15, %rax
    00001ea5: 	movl	$0xfa, %ecx
    00001eaa: 	movq	%r13, %rdi
    00001ead: 	rep		stosq	%rax, %es:(%rdi)
    00001eb0: 	leaq	DATAat0x16563(%rip), %rsi
    00001eb7: 	movq	%r13, %rdi
    00001eba: 	movq	%rbx, 0x7d8(%rsp)
    00001ec2: 	callq	_Z17test_countbitsStdRSt6bitsetILm15994EEPKc # Offset: 7874
    00001ec7: 	leaq	DATAat0x16579(%rip), %rsi
    00001ece: 	movq	%r13, %rdi
    00001ed1: 	callq	_Z21test_countbitsStdLoopRSt6bitsetILm15994EEPKc # Offset: 7889
    00001ed6: 	movl	iterations(%rip), %edx
    00001edc: 	xorl	%r8d, %r8d
    00001edf: 	movl	$0x3e80, %esi
    00001ee4: 	xorl	%ecx, %ecx
    00001ee6: 	leaq	DATAat0x16594(%rip), %rdi
    00001eed: 	callq	_Z9summarizePKciiii # Offset: 7917
    00001ef2: 	movq	0x1788(%rsp), %rax
    00001efa: 	subq	%fs:0x28, %rax
    00001f03: 	jne	.Ltmp27 # Offset: 7939
    00001f05: 	addq	$0x1798, %rsp
    00001f0c: 	xorl	%eax, %eax
    00001f0e: 	popq	%rbx
    00001f0f: 	popq	%rbp
    00001f10: 	popq	%r12
    00001f12: 	popq	%r13
    00001f14: 	popq	%r14
    00001f16: 	popq	%r15
    00001f18: 	retq # Offset: 7960
.Ltmp3:
    00001f19: 	movq	0x8(%r14), %rdi
    00001f1d: 	movl	$0xa, %edx
    00001f22: 	xorl	%esi, %esi
    00001f24: 	callq	strtol@PLT # Offset: 7972
    00001f29: 	movl	%eax, iterations(%rip)
    00001f2f: 	cmpl	$0x2, %r13d
    00001f33: 	jle	.Ltmp28 # Offset: 7987
    00001f39: 	movq	0x10(%r14), %rdi
    00001f3d: 	movl	$0xa, %edx
    00001f42: 	xorl	%esi, %esi
    00001f44: 	callq	strtol@PLT # Offset: 8004
    00001f49: 	movl	%eax, init_value(%rip)
    00001f4f: 	jmp	.Ltmp28 # Offset: 8015
.Ltmp1:
    00001f54: 	leaq	DATAat0x15a68(%rip), %rsi
    00001f5b: 	movl	$0x1, %edi
    00001f60: 	xorl	%eax, %eax
    00001f62: 	callq	__printf_chk@PLT # Offset: 8034
    00001f67: 	jmp	.Ltmp28 # Offset: 8039
.Ltmp27:
    00001f6c: 	callq	__stack_chk_fail@PLT # Offset: 8044
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x3140
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3140
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x1afd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 4
  State       : disassembled
  Address     : 0x3170
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3170
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp29 # Offset: 17
    00000013: 	movq	DATAat0x1afe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp29 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp29:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x31a0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x31a0
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp30 # Offset: 34
    00000024: 	movq	DATAat0x1aff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp30 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp30:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x31e0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x31e0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp31 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp32 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp32:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp31:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x3220
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x3220
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z10SetBitsStdRSt6bitsetILm15994EE" after disassembly {
  Number      : 8
  State       : disassembled
  Address     : 0x3230
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x3230
  Section     : .text
  Orc Section : .local.text._Z10SetBitsStdRSt6bitsetILm15994EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	movq	$-0x1, (%rdi)
    0000000b: 	movq	%rdi, %rdx
    0000000e: 	leaq	0x8(%rdi), %rdi
    00000012: 	movq	$-0x1, %rax
    00000019: 	andq	$-0x8, %rdi
    0000001d: 	movq	%rdx, %rcx
    00000020: 	subq	%rdi, %rcx
    00000023: 	addl	$0x7d0, %ecx
    00000029: 	shrl	$0x3, %ecx
    0000002c: 	rep		stosq	%rax, %es:(%rdi)
    0000002f: 	movabsq	$0x3ffffffffffffff, %rax
    00000039: 	movq	%rax, 0x7c8(%rdx)
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_Z10SetBitsStdRSt6bitsetILm15994EE"

Binary Function "_Z13InvertBitsStdRSt6bitsetILm15994EE" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x3280
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x3280
  Section     : .text
  Orc Section : .local.text._Z13InvertBitsStdRSt6bitsetILm15994EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	leaq	0x7d0(%rdi), %rdx
    0000000e: 	pcmpeqd	%xmm1, %xmm1
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp33:
    00000018: 	movdqu	(%rax), %xmm0
    0000001c: 	addq	$0x10, %rax
    00000020: 	pxor	%xmm1, %xmm0
    00000024: 	movups	%xmm0, -0x10(%rax)
    00000028: 	cmpq	%rax, %rdx
    0000002b: 	jne	.Ltmp33 # Offset: 43
    0000002d: 	movabsq	$0x3ffffffffffffff, %rax
    00000037: 	andq	%rax, 0x7c8(%rdi)
    0000003e: 	retq # Offset: 62
DWARF CFI Instructions:
    <empty>
End of Function "_Z13InvertBitsStdRSt6bitsetILm15994EE"

Binary Function "_Z15AndBitTablesStdRSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x32c0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x32c0
  Section     : .text
  Orc Section : .local.text._Z15AndBitTablesStdRSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp34:
    00000010: 	movdqu	(%rdi,%rax), %xmm0
    00000015: 	movdqu	(%rsi,%rax), %xmm1
    0000001a: 	pand	%xmm1, %xmm0
    0000001e: 	movups	%xmm0, (%rdi,%rax)
    00000022: 	addq	$0x10, %rax
    00000026: 	cmpq	$0x7d0, %rax
    0000002c: 	jne	.Ltmp34 # Offset: 44
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z15AndBitTablesStdRSt6bitsetILm15994EERKS0_"

Binary Function "_Z14OrBitTablesStdRSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x32f0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x32f0
  Section     : .text
  Orc Section : .local.text._Z14OrBitTablesStdRSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp35:
    00000010: 	movdqu	(%rdi,%rax), %xmm0
    00000015: 	movdqu	(%rsi,%rax), %xmm1
    0000001a: 	por	%xmm1, %xmm0
    0000001e: 	movups	%xmm0, (%rdi,%rax)
    00000022: 	addq	$0x10, %rax
    00000026: 	cmpq	$0x7d0, %rax
    0000002c: 	jne	.Ltmp35 # Offset: 44
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z14OrBitTablesStdRSt6bitsetILm15994EERKS0_"

Binary Function "_Z15XorBitTablesStdRSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x3320
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3320
  Section     : .text
  Orc Section : .local.text._Z15XorBitTablesStdRSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp36:
    00000010: 	movdqu	(%rdi,%rax), %xmm0
    00000015: 	movdqu	(%rsi,%rax), %xmm1
    0000001a: 	pxor	%xmm1, %xmm0
    0000001e: 	movups	%xmm0, (%rdi,%rax)
    00000022: 	addq	$0x10, %rax
    00000026: 	cmpq	$0x7d0, %rax
    0000002c: 	jne	.Ltmp36 # Offset: 44
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z15XorBitTablesStdRSt6bitsetILm15994EERKS0_"

Binary Function "_Z19StencilBitTablesStdRSt6bitsetILm15994EERKS0_S3_" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x3350
  Size        : 0x9c
  MaxSize     : 0xa0
  Offset      : 0x3350
  Section     : .text
  Orc Section : .local.text._Z19StencilBitTablesStdRSt6bitsetILm15994EERKS0_S3_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	subq	$0x7e8, %rsp
    0000000b: 	movq	%rdi, %r8
    0000000e: 	movl	$0xfa, %ecx
    00000013: 	movq	%fs:0x28, %rax
    0000001c: 	movq	%rax, 0x7d8(%rsp)
    00000024: 	xorl	%eax, %eax
    00000026: 	movq	%rsp, %rdi
    00000029: 	rep		movsq	(%rsi), %es:(%rdi)
    0000002c: 	movq	%rsp, %rcx
    0000002f: 	leaq	0x7d0(%rsp), %rsi
    00000037: 	movq	%rcx, %rax
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp37:
    00000040: 	movdqu	(%rdx), %xmm0
    00000044: 	pand	(%rax), %xmm0
    00000048: 	addq	$0x10, %rax
    0000004c: 	addq	$0x10, %rdx
    00000050: 	movaps	%xmm0, -0x10(%rax)
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp37 # Offset: 87
    00000059: 	xorl	%eax, %eax
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp38:
    00000060: 	movdqu	(%r8,%rax), %xmm0
    00000066: 	por	(%rcx,%rax), %xmm0
    0000006b: 	movups	%xmm0, (%r8,%rax)
    00000070: 	addq	$0x10, %rax
    00000074: 	cmpq	$0x7d0, %rax
    0000007a: 	jne	.Ltmp38 # Offset: 122
    0000007c: 	movq	0x7d8(%rsp), %rax
    00000084: 	subq	%fs:0x28, %rax
    0000008d: 	jne	.Ltmp39 # Offset: 141
    0000008f: 	addq	$0x7e8, %rsp
    00000096: 	retq # Offset: 150
.Ltmp39:
    00000097: 	callq	__stack_chk_fail@PLT # Offset: 151
DWARF CFI Instructions:
    <empty>
End of Function "_Z19StencilBitTablesStdRSt6bitsetILm15994EERKS0_S3_"

Binary Function "_Z25AndComplimentBitTablesStdRSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x33f0
  Size        : 0xcb
  MaxSize     : 0xd0
  Offset      : 0x33f0
  Section     : .text
  Orc Section : .local.text._Z25AndComplimentBitTablesStdRSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0xfb8, %rsp
    0000000b: 	movq	%rdi, %rdx
    0000000e: 	pcmpeqd	%xmm1, %xmm1
    00000012: 	movl	$0xfa, %ecx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0xfa8(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	leaq	0x7d0(%rsp), %rdi
    00000032: 	rep		movsq	(%rsi), %es:(%rdi)
    00000035: 	leaq	0x7d0(%rsp), %rsi
    0000003d: 	leaq	0xfa0(%rsp), %rcx
    00000045: 	movq	%rsi, %rax
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp40:
    00000050: 	movdqa	(%rax), %xmm0
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm1, %xmm0
    0000005c: 	movaps	%xmm0, -0x10(%rax)
    00000060: 	cmpq	%rax, %rcx
    00000063: 	jne	.Ltmp40 # Offset: 99
    00000065: 	movq	%rsp, %r8
    00000068: 	movl	$0xfa, %ecx
    0000006d: 	movabsq	$0x3ffffffffffffff, %rax
    00000077: 	andq	%rax, 0xf98(%rsp)
    0000007f: 	movq	%r8, %rdi
    00000082: 	xorl	%eax, %eax
    00000084: 	rep		movsq	(%rsi), %es:(%rdi)
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp41:
    00000090: 	movdqu	(%rdx,%rax), %xmm0
    00000095: 	pand	(%r8,%rax), %xmm0
    0000009b: 	movups	%xmm0, (%rdx,%rax)
    0000009f: 	addq	$0x10, %rax
    000000a3: 	cmpq	$0x7d0, %rax
    000000a9: 	jne	.Ltmp41 # Offset: 169
    000000ab: 	movq	0xfa8(%rsp), %rax
    000000b3: 	subq	%fs:0x28, %rax
    000000bc: 	jne	.Ltmp42 # Offset: 188
    000000be: 	addq	$0xfb8, %rsp
    000000c5: 	retq # Offset: 197
.Ltmp42:
    000000c6: 	callq	__stack_chk_fail@PLT # Offset: 198
DWARF CFI Instructions:
    <empty>
End of Function "_Z25AndComplimentBitTablesStdRSt6bitsetILm15994EERKS0_"

Binary Function "_Z12ClearBitsStdRSt6bitsetILm15994EE" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x34c0
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x34c0
  Section     : .text
  Orc Section : .local.text._Z12ClearBitsStdRSt6bitsetILm15994EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	movq	$0x0, (%rdi)
    0000000b: 	movq	%rdi, %rcx
    0000000e: 	leaq	0x8(%rdi), %rdi
    00000012: 	xorl	%eax, %eax
    00000014: 	movq	$0x0, 0x7c0(%rdi)
    0000001f: 	andq	$-0x8, %rdi
    00000023: 	subq	%rdi, %rcx
    00000026: 	addl	$0x7d0, %ecx
    0000002c: 	shrl	$0x3, %ecx
    0000002f: 	rep		stosq	%rax, %es:(%rdi)
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z12ClearBitsStdRSt6bitsetILm15994EE"

Binary Function "_Z14SetBitsStdLoopRSt6bitsetILm15994EE" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x3500
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x3500
  Section     : .text
  Orc Section : .local.text._Z14SetBitsStdLoopRSt6bitsetILm15994EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	movl	$0x1, %esi
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp43:
    00000010: 	movq	%rax, %rdx
    00000013: 	movq	%rax, %rcx
    00000016: 	movq	%rsi, %r8
    00000019: 	addq	$0x1, %rax
    0000001d: 	shrq	$0x6, %rdx
    00000021: 	andl	$0x3f, %ecx
    00000024: 	shlq	%cl, %r8
    00000027: 	orq	%r8, (%rdi,%rdx,8)
    0000002b: 	cmpq	$0x3e7a, %rax
    00000031: 	jne	.Ltmp43 # Offset: 49
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z14SetBitsStdLoopRSt6bitsetILm15994EE"

Binary Function "_Z23StencilBitTablesStdLoopRSt6bitsetILm15994EERKS0_S3_" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x3540
  Size        : 0x77
  MaxSize     : 0x80
  Offset      : 0x3540
  Section     : .text
  Orc Section : .local.text._Z23StencilBitTablesStdLoopRSt6bitsetILm15994EERKS0_S3_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r11
    0000000a: 	xorl	%eax, %eax
    0000000c: 	movl	$0x1, %r9d
    00000012: 	jmp	.Ltmp44 # Offset: 18
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp48:
    00000018: 	movq	%rcx, %r10
    0000001b: 	andq	(%rdx,%rdi,8), %r10
    0000001f: 	je	.Ltmp45 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp47:
    00000028: 	orq	%rcx, %rsi
    0000002b: 	addq	$0x1, %rax
    0000002f: 	movq	%rsi, (%r8,%rdi,8)
    00000033: 	cmpq	$0x3e7a, %rax
    00000039: 	je	.Ltmp46 # Offset: 57
.Ltmp44:
    0000003b: 	movq	%rax, %rdi
    0000003e: 	movq	%rax, %rcx
    00000041: 	movq	%r9, %r10
    00000044: 	shrq	$0x6, %rdi
    00000048: 	andl	$0x3f, %ecx
    0000004b: 	movq	(%r8,%rdi,8), %rsi
    0000004f: 	shlq	%cl, %r10
    00000052: 	movq	%r10, %rcx
    00000055: 	testq	%r10, %rsi
    00000058: 	jne	.Ltmp47 # Offset: 88
    0000005a: 	andq	(%r11,%rdi,8), %r10
    0000005e: 	jne	.Ltmp48 # Offset: 94
.Ltmp45:
    00000060: 	notq	%rcx
    00000063: 	addq	$0x1, %rax
    00000067: 	andq	%rcx, %rsi
    0000006a: 	movq	%rsi, (%r8,%rdi,8)
    0000006e: 	cmpq	$0x3e7a, %rax
    00000074: 	jne	.Ltmp44 # Offset: 116
.Ltmp46:
    00000076: 	retq # Offset: 118
DWARF CFI Instructions:
    <empty>
End of Function "_Z23StencilBitTablesStdLoopRSt6bitsetILm15994EERKS0_S3_"

Binary Function "_Z17InvertBitsStdLoopRSt6bitsetILm15994EE" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x35c0
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x35c0
  Section     : .text
  Orc Section : .local.text._Z17InvertBitsStdLoopRSt6bitsetILm15994EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	movl	$0x1, %esi
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp49:
    00000010: 	movq	%rax, %rdx
    00000013: 	movq	%rax, %rcx
    00000016: 	movq	%rsi, %r8
    00000019: 	addq	$0x1, %rax
    0000001d: 	shrq	$0x6, %rdx
    00000021: 	andl	$0x3f, %ecx
    00000024: 	shlq	%cl, %r8
    00000027: 	xorq	%r8, (%rdi,%rdx,8)
    0000002b: 	cmpq	$0x3e7a, %rax
    00000031: 	jne	.Ltmp49 # Offset: 49
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z17InvertBitsStdLoopRSt6bitsetILm15994EE"

Binary Function "_Z16ClearBitsStdLoopRSt6bitsetILm15994EE" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x3600
  Size        : 0x37
  MaxSize     : 0x40
  Offset      : 0x3600
  Section     : .text
  Orc Section : .local.text._Z16ClearBitsStdLoopRSt6bitsetILm15994EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	movl	$0x1, %r8d
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp50:
    00000010: 	movq	%rax, %rcx
    00000013: 	movq	%rax, %rsi
    00000016: 	movq	%r8, %rdx
    00000019: 	addq	$0x1, %rax
    0000001d: 	andl	$0x3f, %ecx
    00000020: 	shrq	$0x6, %rsi
    00000024: 	shlq	%cl, %rdx
    00000027: 	notq	%rdx
    0000002a: 	andq	%rdx, (%rdi,%rsi,8)
    0000002e: 	cmpq	$0x3e7a, %rax
    00000034: 	jne	.Ltmp50 # Offset: 52
    00000036: 	retq # Offset: 54
DWARF CFI Instructions:
    <empty>
End of Function "_Z16ClearBitsStdLoopRSt6bitsetILm15994EE"

Binary Function "_Z19OrBitTablesStdLoop2RSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x3640
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x3640
  Section     : .text
  Orc Section : .local.text._Z19OrBitTablesStdLoop2RSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	xorl	%edx, %edx
    00000006: 	movl	$0x1, %r10d
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp52:
    00000010: 	movq	%rdx, %r8
    00000013: 	movq	%rdx, %rcx
    00000016: 	movq	%r10, %rax
    00000019: 	shrq	$0x6, %r8
    0000001d: 	andl	$0x3f, %ecx
    00000020: 	movq	(%rdi,%r8,8), %r9
    00000024: 	shlq	%cl, %rax
    00000027: 	movq	(%rsi,%r8,8), %rcx
    0000002b: 	orq	%r9, %rcx
    0000002e: 	testq	%rax, %rcx
    00000031: 	je	.Ltmp51 # Offset: 49
    00000033: 	orq	%r9, %rax
    00000036: 	addq	$0x1, %rdx
    0000003a: 	movq	%rax, (%rdi,%r8,8)
    0000003e: 	cmpq	$0x3e7a, %rdx
    00000045: 	jne	.Ltmp52 # Offset: 69
    00000047: 	retq # Offset: 71
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp51:
    00000050: 	notq	%rax
    00000053: 	addq	$0x1, %rdx
    00000057: 	andq	%r9, %rax
    0000005a: 	movq	%rax, (%rdi,%r8,8)
    0000005e: 	cmpq	$0x3e7a, %rdx
    00000065: 	jne	.Ltmp52 # Offset: 101
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z19OrBitTablesStdLoop2RSt6bitsetILm15994EERKS0_"

Binary Function "_Z19XorBitTablesStdLoopRSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x36b0
  Size        : 0x70
  MaxSize     : 0x70
  Offset      : 0x36b0
  Section     : .text
  Orc Section : .local.text._Z19XorBitTablesStdLoopRSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	xorl	%edx, %edx
    00000009: 	movl	$0x1, %r11d
    0000000f: 	nop # Size: 1
.Ltmp54:
    00000010: 	movq	%rdx, %rdi
    00000013: 	movq	%rdx, %rcx
    00000016: 	movq	%r11, %rax
    00000019: 	andl	$0x3f, %ecx
    0000001c: 	shrq	$0x6, %rdi
    00000020: 	shlq	%cl, %rax
    00000023: 	movq	(%r9,%rdi,8), %r8
    00000027: 	movq	%rax, %rcx
    0000002a: 	andq	(%rsi,%rdi,8), %rcx
    0000002e: 	setne	%r10b
    00000032: 	testq	%r8, %rax
    00000035: 	setne	%cl
    00000038: 	cmpb	%cl, %r10b
    0000003b: 	je	.Ltmp53 # Offset: 59
    0000003d: 	orq	%r8, %rax
    00000040: 	addq	$0x1, %rdx
    00000044: 	movq	%rax, (%r9,%rdi,8)
    00000048: 	cmpq	$0x3e7a, %rdx
    0000004f: 	jne	.Ltmp54 # Offset: 79
    00000051: 	retq # Offset: 81
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp53:
    00000058: 	notq	%rax
    0000005b: 	addq	$0x1, %rdx
    0000005f: 	andq	%r8, %rax
    00000062: 	movq	%rax, (%r9,%rdi,8)
    00000066: 	cmpq	$0x3e7a, %rdx
    0000006d: 	jne	.Ltmp54 # Offset: 109
    0000006f: 	retq # Offset: 111
DWARF CFI Instructions:
    <empty>
End of Function "_Z19XorBitTablesStdLoopRSt6bitsetILm15994EERKS0_"

Binary Function "_Z20AndBitTablesStdLoop2RSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x3720
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x3720
  Section     : .text
  Orc Section : .local.text._Z20AndBitTablesStdLoop2RSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	xorl	%edx, %edx
    00000006: 	movl	$0x1, %r10d
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp56:
    00000010: 	movq	%rdx, %rcx
    00000013: 	movq	%rdx, %r8
    00000016: 	movq	%r10, %rax
    00000019: 	andl	$0x3f, %ecx
    0000001c: 	shrq	$0x6, %r8
    00000020: 	shlq	%cl, %rax
    00000023: 	movq	(%rdi,%r8,8), %r9
    00000027: 	movq	%rax, %rcx
    0000002a: 	andq	(%rsi,%r8,8), %rcx
    0000002e: 	je	.Ltmp55 # Offset: 46
    00000030: 	testq	%r9, %rax
    00000033: 	je	.Ltmp55 # Offset: 51
    00000035: 	orq	%r9, %rax
    00000038: 	addq	$0x1, %rdx
    0000003c: 	movq	%rax, (%rdi,%r8,8)
    00000040: 	cmpq	$0x3e7a, %rdx
    00000047: 	jne	.Ltmp56 # Offset: 71
    00000049: 	retq # Offset: 73
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp55:
    00000050: 	notq	%rax
    00000053: 	addq	$0x1, %rdx
    00000057: 	andq	%r9, %rax
    0000005a: 	movq	%rax, (%rdi,%r8,8)
    0000005e: 	cmpq	$0x3e7a, %rdx
    00000065: 	jne	.Ltmp56 # Offset: 101
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z20AndBitTablesStdLoop2RSt6bitsetILm15994EERKS0_"

Binary Function "_Z19AndBitTablesStdLoopRSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x3790
  Size        : 0x62
  MaxSize     : 0x70
  Offset      : 0x3790
  Section     : .text
  Orc Section : .local.text._Z19AndBitTablesStdLoopRSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	movl	$0x1, %r9d
    0000000c: 	jmp	.Ltmp57 # Offset: 12
    0000000e: 	nop # Size: 2
.Ltmp60:
    00000010: 	movq	%r11, %r10
    00000013: 	andq	(%rsi,%r8,8), %r10
    00000017: 	je	.Ltmp58 # Offset: 23
    00000019: 	orq	%r11, %rdx
    0000001c: 	addq	$0x1, %rax
    00000020: 	movq	%rdx, (%rdi,%r8,8)
    00000024: 	cmpq	$0x3e7a, %rax
    0000002a: 	je	.Ltmp59 # Offset: 42
.Ltmp57:
    0000002c: 	movq	%rax, %r8
    0000002f: 	movq	%rax, %rcx
    00000032: 	movq	%r9, %r11
    00000035: 	shrq	$0x6, %r8
    00000039: 	andl	$0x3f, %ecx
    0000003c: 	movq	(%rdi,%r8,8), %rdx
    00000040: 	shlq	%cl, %r11
    00000043: 	movq	%r11, %rcx
    00000046: 	testq	%r11, %rdx
    00000049: 	jne	.Ltmp60 # Offset: 73
.Ltmp58:
    0000004b: 	notq	%rcx
    0000004e: 	addq	$0x1, %rax
    00000052: 	andq	%rcx, %rdx
    00000055: 	movq	%rdx, (%rdi,%r8,8)
    00000059: 	cmpq	$0x3e7a, %rax
    0000005f: 	jne	.Ltmp57 # Offset: 95
.Ltmp59:
    00000061: 	retq # Offset: 97
DWARF CFI Instructions:
    <empty>
End of Function "_Z19AndBitTablesStdLoopRSt6bitsetILm15994EERKS0_"

Binary Function "_Z18OrBitTablesStdLoopRSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x3800
  Size        : 0x62
  MaxSize     : 0x70
  Offset      : 0x3800
  Section     : .text
  Orc Section : .local.text._Z18OrBitTablesStdLoopRSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	movl	$0x1, %r9d
    0000000c: 	jmp	.Ltmp61 # Offset: 12
    0000000e: 	nop # Size: 2
.Ltmp64:
    00000010: 	movq	%r11, %r10
    00000013: 	andq	(%rsi,%r8,8), %r10
    00000017: 	jne	.Ltmp62 # Offset: 23
    00000019: 	notq	%rcx
    0000001c: 	addq	$0x1, %rax
    00000020: 	andq	%rcx, %rdx
    00000023: 	movq	%rdx, (%rdi,%r8,8)
    00000027: 	cmpq	$0x3e7a, %rax
    0000002d: 	je	.Ltmp63 # Offset: 45
.Ltmp61:
    0000002f: 	movq	%rax, %r8
    00000032: 	movq	%rax, %rcx
    00000035: 	movq	%r9, %r11
    00000038: 	shrq	$0x6, %r8
    0000003c: 	andl	$0x3f, %ecx
    0000003f: 	movq	(%rdi,%r8,8), %rdx
    00000043: 	shlq	%cl, %r11
    00000046: 	movq	%r11, %rcx
    00000049: 	testq	%r11, %rdx
    0000004c: 	je	.Ltmp64 # Offset: 76
.Ltmp62:
    0000004e: 	orq	%rcx, %rdx
    00000051: 	addq	$0x1, %rax
    00000055: 	movq	%rdx, (%rdi,%r8,8)
    00000059: 	cmpq	$0x3e7a, %rax
    0000005f: 	jne	.Ltmp61 # Offset: 95
.Ltmp63:
    00000061: 	retq # Offset: 97
DWARF CFI Instructions:
    <empty>
End of Function "_Z18OrBitTablesStdLoopRSt6bitsetILm15994EERKS0_"

Binary Function "_Z29AndComplimentBitTablesStdLoopRSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x3870
  Size        : 0x62
  MaxSize     : 0x70
  Offset      : 0x3870
  Section     : .text
  Orc Section : .local.text._Z29AndComplimentBitTablesStdLoopRSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	movl	$0x1, %r9d
    0000000c: 	jmp	.Ltmp65 # Offset: 12
    0000000e: 	nop # Size: 2
.Ltmp68:
    00000010: 	movq	%r11, %r10
    00000013: 	andq	(%rsi,%r8,8), %r10
    00000017: 	jne	.Ltmp66 # Offset: 23
    00000019: 	orq	%r11, %rdx
    0000001c: 	addq	$0x1, %rax
    00000020: 	movq	%rdx, (%rdi,%r8,8)
    00000024: 	cmpq	$0x3e7a, %rax
    0000002a: 	je	.Ltmp67 # Offset: 42
.Ltmp65:
    0000002c: 	movq	%rax, %r8
    0000002f: 	movq	%rax, %rcx
    00000032: 	movq	%r9, %r11
    00000035: 	shrq	$0x6, %r8
    00000039: 	andl	$0x3f, %ecx
    0000003c: 	movq	(%rdi,%r8,8), %rdx
    00000040: 	shlq	%cl, %r11
    00000043: 	movq	%r11, %rcx
    00000046: 	testq	%r11, %rdx
    00000049: 	jne	.Ltmp68 # Offset: 73
.Ltmp66:
    0000004b: 	notq	%rcx
    0000004e: 	addq	$0x1, %rax
    00000052: 	andq	%rcx, %rdx
    00000055: 	movq	%rdx, (%rdi,%r8,8)
    00000059: 	cmpq	$0x3e7a, %rax
    0000005f: 	jne	.Ltmp65 # Offset: 95
.Ltmp67:
    00000061: 	retq # Offset: 97
DWARF CFI Instructions:
    <empty>
End of Function "_Z29AndComplimentBitTablesStdLoopRSt6bitsetILm15994EERKS0_"

Binary Function "_Z30AndComplimentBitTablesStdLoop2RSt6bitsetILm15994EERKS0_" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x38e0
  Size        : 0x80
  MaxSize     : 0x80
  Offset      : 0x38e0
  Section     : .text
  Orc Section : .local.text._Z30AndComplimentBitTablesStdLoop2RSt6bitsetILm15994EERKS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r10
    0000000a: 	xorl	%edx, %edx
    0000000c: 	movl	$0x1, %r11d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp70:
    00000018: 	movq	%rdx, %rcx
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	movq	%r11, %rax
    00000021: 	andl	$0x3f, %ecx
    00000024: 	shrq	$0x6, %rsi
    00000028: 	shlq	%cl, %rax
    0000002b: 	movq	(%r8,%rsi,8), %rdi
    0000002f: 	movq	%rax, %rcx
    00000032: 	andq	(%r10,%rsi,8), %rcx
    00000036: 	setne	%cl
    00000039: 	xorl	%r9d, %r9d
    0000003c: 	testq	%rdi, %rax
    0000003f: 	movzbl	%cl, %ecx
    00000042: 	setne	%r9b
    00000046: 	notl	%ecx
    00000048: 	testl	%r9d, %ecx
    0000004b: 	je	.Ltmp69 # Offset: 75
    0000004d: 	orq	%rdi, %rax
    00000050: 	addq	$0x1, %rdx
    00000054: 	movq	%rax, (%r8,%rsi,8)
    00000058: 	cmpq	$0x3e7a, %rdx
    0000005f: 	jne	.Ltmp70 # Offset: 95
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp69:
    00000068: 	notq	%rax
    0000006b: 	addq	$0x1, %rdx
    0000006f: 	andq	%rdi, %rax
    00000072: 	movq	%rax, (%r8,%rsi,8)
    00000076: 	cmpq	$0x3e7a, %rdx
    0000007d: 	jne	.Ltmp70 # Offset: 125
    0000007f: 	retq # Offset: 127
DWARF CFI Instructions:
    <empty>
End of Function "_Z30AndComplimentBitTablesStdLoop2RSt6bitsetILm15994EERKS0_"

Binary Function "_Z24StencilBitTablesStdLoop2RSt6bitsetILm15994EERKS0_S3_" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x3960
  Size        : 0x86
  MaxSize     : 0x90
  Offset      : 0x3960
  Section     : .text
  Orc Section : .local.text._Z24StencilBitTablesStdLoop2RSt6bitsetILm15994EERKS0_S3_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdx, %r10
    00000008: 	movq	%rdi, %r8
    0000000b: 	movq	%rsi, %r11
    0000000e: 	xorl	%edx, %edx
    00000010: 	movl	$0x1, %ebx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp72:
    00000018: 	movq	%rdx, %rcx
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	movq	%rbx, %rax
    00000021: 	andl	$0x3f, %ecx
    00000024: 	shrq	$0x6, %rsi
    00000028: 	shlq	%cl, %rax
    0000002b: 	movq	(%r8,%rsi,8), %rdi
    0000002f: 	movq	%rax, %rcx
    00000032: 	andq	(%r10,%rsi,8), %rcx
    00000036: 	movq	%rax, %rcx
    00000039: 	setne	%r9b
    0000003d: 	andq	(%r11,%rsi,8), %rcx
    00000041: 	setne	%cl
    00000044: 	testb	%cl, %r9b
    00000047: 	jne	.Ltmp71 # Offset: 71
    00000049: 	testq	%rdi, %rax
    0000004c: 	jne	.Ltmp71 # Offset: 76
    0000004e: 	notq	%rax
    00000051: 	addq	$0x1, %rdx
    00000055: 	andq	%rdi, %rax
    00000058: 	movq	%rax, (%r8,%rsi,8)
    0000005c: 	cmpq	$0x3e7a, %rdx
    00000063: 	jne	.Ltmp72 # Offset: 99
    00000065: 	popq	%rbx
    00000066: 	retq # Offset: 102
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp71:
    00000070: 	orq	%rdi, %rax
    00000073: 	addq	$0x1, %rdx
    00000077: 	movq	%rax, (%r8,%rsi,8)
    0000007b: 	cmpq	$0x3e7a, %rdx
    00000082: 	jne	.Ltmp72 # Offset: 130
    00000084: 	popq	%rbx
    00000085: 	retq # Offset: 133
DWARF CFI Instructions:
    <empty>
End of Function "_Z24StencilBitTablesStdLoop2RSt6bitsetILm15994EERKS0_S3_"

Binary Function "_Z23InitializeBitCountTablev.part.0/1(*2)" after disassembly {
  All names   : _Z23InitializeBitCountTablev.part.0/1
                _Z23InitializeBitCountTablev.part.0/bitarrays.cpp/1
  Number      : 28
  State       : disassembled
  Address     : 0x39f0
  Size        : 0x82
  MaxSize     : 0x90
  Offset      : 0x39f0
  Section     : .text
  Orc Section : .local.text._Z23InitializeBitCountTablev.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	leaq	"_ZL13bitCountTable/1"(%rip), %rsi
    00000007: 	xorl	%edx, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	jmp	.Ltmp73 # Offset: 11
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp74:
    00000010: 	movl	%edx, %ecx
    00000012: 	movl	%edx, %eax
    00000014: 	andl	$0x2, %ecx
    00000017: 	andl	$0x1, %eax
    0000001a: 	cmpb	$0x1, %cl
    0000001d: 	sbbq	$-0x1, %rax
    00000021: 	addq	$0x8, %rsi
.Ltmp73:
    00000025: 	movl	%edx, %edi
    00000027: 	movl	%edx, %ecx
    00000029: 	andl	$0x4, %edi
    0000002c: 	cmpb	$0x1, %dil
    00000030: 	movl	%edx, %edi
    00000032: 	sbbq	$-0x1, %rax
    00000036: 	andl	$0x8, %edi
    00000039: 	cmpb	$0x1, %dil
    0000003d: 	movl	%edx, %edi
    0000003f: 	sbbq	$-0x1, %rax
    00000043: 	andl	$0x10, %edi
    00000046: 	cmpb	$0x1, %dil
    0000004a: 	movl	%edx, %edi
    0000004c: 	sbbq	$-0x1, %rax
    00000050: 	andl	$0x20, %edi
    00000053: 	cmpb	$0x1, %dil
    00000057: 	sbbq	$-0x1, %rax
    0000005b: 	andl	$0x40, %ecx
    0000005e: 	cmpb	$0x1, %cl
    00000061: 	sbbq	$-0x1, %rax
    00000065: 	cmpb	$-0x80, %dl
    00000068: 	sbbq	$-0x1, %rax
    0000006c: 	addl	$0x1, %edx
    0000006f: 	movq	%rax, (%rsi)
    00000072: 	cmpl	$0x100, %edx
    00000078: 	jne	.Ltmp74 # Offset: 120
    0000007a: 	movb	$0x1, "_ZL19bitCountInitialized/1"(%rip)
    00000081: 	retq # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z23InitializeBitCountTablev.part.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x3a80
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x3a80
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp75 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp76 # Offset: 38
.Ltmp75:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp77 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp76:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp77:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x15008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x3b20
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x3b20
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp78 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp79 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp80:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp80 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp93:
    00000069: 	leaq	DATAat0x15aa2(%rip), %rbp
    00000070: 	leaq	DATAat0x15028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x15068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp81 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x165c0(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x15098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x165b8(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp82 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp86:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp83 # Offset: 244
    000000fa: 	movq	DATAat0x165a8(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp87:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x165a8(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp84 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp84:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x15a69(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x165c0(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp85 # Offset: 398
.Ltmp82:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp86 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp87 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp83:
    000001c8: 	movq	DATAat0x165b0(%rip), %rsi
    000001cf: 	movq	DATAat0x165a8(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp84 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp85:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp81 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp88 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp89:
    00000210: 	addq	$0x10, %rax
.Ltmp88:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp89 # Offset: 542
.Ltmp94:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x150c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp90 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp91 # Offset: 592
.Ltmp90:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp78:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp91:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp92:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp92 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x15a44(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp78 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp79:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp93 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp81:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp94 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x3e50
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x3e50
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp95 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp96 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp97:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp97 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp102:
    0000006a: 	leaq	DATAat0x15aa2(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x150f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x15a6a(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x15aa2(%rip), %r8
    000000a1: 	leaq	DATAat0x15a58(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp98 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp99:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x15a69(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp99 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp98 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp100 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp101:
    00000140: 	addq	$0x10, %rax
.Ltmp100:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp101 # Offset: 334
.Ltmp103:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x150c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp95:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp96:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp102 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp98:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp103 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x4000
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x4000
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x4020
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4020
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x165b8(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_Z23InitializeBitCountTablev" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x4060
  Size        : 0x13
  MaxSize     : 0x20
  Offset      : 0x4060
  Section     : .text
  Orc Section : .local.text._Z23InitializeBitCountTablev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    0000000b: 	jne	.Ltmp104 # Offset: 11
    0000000d: 	jmp	"_Z23InitializeBitCountTablev.part.0/1" # TAILCALL  # Offset: 13
.Ltmp104:
    00000012: 	retq # Offset: 18
DWARF CFI Instructions:
    <empty>
End of Function "_Z23InitializeBitCountTablev"

Binary Function "_Z15check_bit_countmPKc" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x4080
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x4080
  Section     : .text
  Orc Section : .local.text._Z15check_bit_countmPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %rdx
    0000000a: 	cmpq	$0x3e7a, %rdi
    00000011: 	jne	.Ltmp105 # Offset: 17
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp105:
    00000018: 	leaq	DATAat0x15a82(%rip), %rsi
    0000001f: 	movl	$0x1, %edi
    00000024: 	xorl	%eax, %eax
    00000026: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z15check_bit_countmPKc"

Binary Function "_Z15SetBitsStdLoop2RSt6bitsetILm15994EE" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x40b0
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x40b0
  Section     : .text
  Orc Section : .local.text._Z15SetBitsStdLoop2RSt6bitsetILm15994EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	movl	$0x1, %esi
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp106:
    00000010: 	movq	%rax, %rdx
    00000013: 	movq	%rax, %rcx
    00000016: 	movq	%rsi, %r8
    00000019: 	addq	$0x1, %rax
    0000001d: 	shrq	$0x6, %rdx
    00000021: 	andl	$0x3f, %ecx
    00000024: 	shlq	%cl, %r8
    00000027: 	orq	%r8, (%rdi,%rdx,8)
    0000002b: 	cmpq	$0x3e7a, %rax
    00000031: 	jne	.Ltmp106 # Offset: 49
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z15SetBitsStdLoop2RSt6bitsetILm15994EE"

Binary Function "_Z17ClearBitsStdLoop2RSt6bitsetILm15994EE" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x40f0
  Size        : 0x37
  MaxSize     : 0x40
  Offset      : 0x40f0
  Section     : .text
  Orc Section : .local.text._Z17ClearBitsStdLoop2RSt6bitsetILm15994EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	movl	$0x1, %r8d
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp107:
    00000010: 	movq	%rax, %rcx
    00000013: 	movq	%rax, %rsi
    00000016: 	movq	%r8, %rdx
    00000019: 	addq	$0x1, %rax
    0000001d: 	andl	$0x3f, %ecx
    00000020: 	shrq	$0x6, %rsi
    00000024: 	shlq	%cl, %rdx
    00000027: 	notq	%rdx
    0000002a: 	andq	%rdx, (%rdi,%rsi,8)
    0000002e: 	cmpq	$0x3e7a, %rax
    00000034: 	jne	.Ltmp107 # Offset: 52
    00000036: 	retq # Offset: 54
DWARF CFI Instructions:
    <empty>
End of Function "_Z17ClearBitsStdLoop2RSt6bitsetILm15994EE"

Binary Function "_Z18InvertBitsStdLoop2RSt6bitsetILm15994EE" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x4130
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x4130
  Section     : .text
  Orc Section : .local.text._Z18InvertBitsStdLoop2RSt6bitsetILm15994EE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	movl	$0x1, %r9d
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp109:
    00000010: 	movq	%rax, %r8
    00000013: 	movq	%rax, %rcx
    00000016: 	movq	%r9, %rdx
    00000019: 	shrq	$0x6, %r8
    0000001d: 	andl	$0x3f, %ecx
    00000020: 	movq	(%rdi,%r8,8), %rsi
    00000024: 	shlq	%cl, %rdx
    00000027: 	testq	%rdx, %rsi
    0000002a: 	jne	.Ltmp108 # Offset: 42
    0000002c: 	orq	%rdx, %rsi
    0000002f: 	addq	$0x1, %rax
    00000033: 	movq	%rsi, (%rdi,%r8,8)
    00000037: 	cmpq	$0x3e7a, %rax
    0000003d: 	jne	.Ltmp109 # Offset: 61
    0000003f: 	retq # Offset: 63
.Ltmp108:
    00000040: 	notq	%rdx
    00000043: 	addq	$0x1, %rax
    00000047: 	andq	%rsi, %rdx
    0000004a: 	movq	%rdx, (%rdi,%r8,8)
    0000004e: 	cmpq	$0x3e7a, %rax
    00000054: 	jne	.Ltmp109 # Offset: 84
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z18InvertBitsStdLoop2RSt6bitsetILm15994EE"

Binary Function "_Z15check_bitsetStdSt6bitsetILm15994EEmPKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x4190
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x4190
  Section     : .text
  Orc Section : .local.text._Z15check_bitsetStdSt6bitsetILm15994EEmPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rsi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdi, %r13
    0000000e: 	pushq	%r12
    00000010: 	xorl	%r12d, %r12d
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	leaq	0x30(%rsp), %rbx
    0000001a: 	leaq	0x800(%rsp), %rbp
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp110:
    00000028: 	movq	(%rbx), %rdi
    0000002b: 	addq	$0x8, %rbx
    0000002f: 	callq	__popcountdi2@PLT # Offset: 47
    00000034: 	cltq
    00000036: 	addq	%rax, %r12
    00000039: 	cmpq	%rbx, %rbp
    0000003c: 	jne	.Ltmp110 # Offset: 60
    0000003e: 	cmpq	%r12, %r13
    00000041: 	je	.Ltmp111 # Offset: 65
    00000043: 	movq	%r13, %r8
    00000046: 	movq	%r12, %rcx
    00000049: 	movq	%r14, %rdx
    0000004c: 	movl	$0x1, %edi
    00000051: 	leaq	DATAat0x15118(%rip), %rsi
    00000058: 	xorl	%eax, %eax
    0000005a: 	callq	__printf_chk@PLT # Offset: 90
.Ltmp111:
    0000005f: 	popq	%rbx
    00000060: 	popq	%rbp
    00000061: 	popq	%r12
    00000063: 	popq	%r13
    00000065: 	popq	%r14
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z15check_bitsetStdSt6bitsetILm15994EEmPKc"

Binary Function "_Z18check_bit_countStdmPKc" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x4200
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x4200
  Section     : .text
  Orc Section : .local.text._Z18check_bit_countStdmPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %rdx
    0000000a: 	cmpq	$0x3e7a, %rdi
    00000011: 	jne	.Ltmp112 # Offset: 17
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp112:
    00000018: 	leaq	DATAat0x15a82(%rip), %rsi
    0000001f: 	movl	$0x1, %edi
    00000024: 	xorl	%eax, %eax
    00000026: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z18check_bit_countStdmPKc"

Binary Function "_Z17test_countbitsStdRSt6bitsetILm15994EEPKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x4230
  Size        : 0xcb
  MaxSize     : 0xd0
  Offset      : 0x4230
  Section     : .text
  Orc Section : .local.text._Z17test_countbitsStdRSt6bitsetILm15994EEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	%rsi, 0x8(%rsp)
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movl	iterations(%rip), %r14d
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%r14d, %r14d
    00000030: 	jle	.Ltmp113 # Offset: 48
    00000032: 	xorl	%ebp, %ebp
    00000034: 	leaq	0x7d0(%r13), %rbx
.Ltmp115:
    0000003b: 	movq	%r13, %r15
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp114:
    00000048: 	movq	(%r15), %rdi
    0000004b: 	addq	$0x8, %r15
    0000004f: 	callq	__popcountdi2@PLT # Offset: 79
    00000054: 	cltq
    00000056: 	addq	%rax, %r12
    00000059: 	cmpq	%r15, %rbx
    0000005c: 	jne	.Ltmp114 # Offset: 92
    0000005e: 	addl	$0x1, %ebp
    00000061: 	cmpl	%r14d, %ebp
    00000064: 	jne	.Ltmp115 # Offset: 100
    00000066: 	cmpq	$0x3e7a, %r12
    0000006d: 	jne	.Ltmp116 # Offset: 109
.Ltmp117:
    0000006f: 	callq	clock@PLT # Offset: 111
    00000074: 	pxor	%xmm0, %xmm0
    00000078: 	movq	0x8(%rsp), %rdi
    0000007d: 	movq	%rax, end_time(%rip)
    00000084: 	subq	start_time(%rip), %rax
    0000008b: 	cvtsi2sd	%rax, %xmm0
    00000090: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000098: 	addq	$0x18, %rsp
    0000009c: 	popq	%rbx
    0000009d: 	popq	%rbp
    0000009e: 	popq	%r12
    000000a0: 	popq	%r13
    000000a2: 	popq	%r14
    000000a4: 	popq	%r15
    000000a6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 166
.Ltmp113:
    000000ab: 	xorl	%r12d, %r12d
.Ltmp116:
    000000ae: 	movq	0x8(%rsp), %rdx
    000000b3: 	movq	%r12, %rcx
    000000b6: 	movl	$0x1, %edi
    000000bb: 	xorl	%eax, %eax
    000000bd: 	leaq	DATAat0x15a82(%rip), %rsi
    000000c4: 	callq	__printf_chk@PLT # Offset: 196
    000000c9: 	jmp	.Ltmp117 # Offset: 201
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_countbitsStdRSt6bitsetILm15994EEPKc"

Binary Function "_Z21test_countbitsStdLoopRSt6bitsetILm15994EEPKc" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x4300
  Size        : 0xc5
  MaxSize     : 0xd0
  Offset      : 0x4300
  Section     : .text
  Orc Section : .local.text._Z21test_countbitsStdLoopRSt6bitsetILm15994EEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	movq	%rdi, %rbx
    0000000c: 	subq	$0x8, %rsp
    00000010: 	callq	clock@PLT # Offset: 16
    00000015: 	movl	iterations(%rip), %r10d
    0000001c: 	movq	%rax, start_time(%rip)
    00000023: 	testl	%r10d, %r10d
    00000026: 	jle	.Ltmp118 # Offset: 38
    00000028: 	xorl	%r9d, %r9d
    0000002b: 	movl	$0x1, %edi
.Ltmp120:
    00000030: 	xorl	%eax, %eax
    00000032: 	xorl	%r8d, %r8d
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp119:
    00000038: 	movq	%rax, %rsi
    0000003b: 	movq	%rax, %rcx
    0000003e: 	movq	%rdi, %rdx
    00000041: 	shrq	$0x6, %rsi
    00000045: 	andl	$0x3f, %ecx
    00000048: 	shlq	%cl, %rdx
    0000004b: 	andq	(%rbx,%rsi,8), %rdx
    0000004f: 	cmpq	$0x1, %rdx
    00000053: 	sbbq	$-0x1, %r8
    00000057: 	addq	$0x1, %rax
    0000005b: 	cmpq	$0x3e7a, %rax
    00000061: 	jne	.Ltmp119 # Offset: 97
    00000063: 	addl	$0x1, %r9d
    00000067: 	cmpl	%r9d, %r10d
    0000006a: 	jne	.Ltmp120 # Offset: 106
    0000006c: 	cmpq	$0x3e7a, %r8
    00000073: 	jne	.Ltmp121 # Offset: 115
.Ltmp122:
    00000075: 	callq	clock@PLT # Offset: 117
    0000007a: 	pxor	%xmm0, %xmm0
    0000007e: 	movq	%rbp, %rdi
    00000081: 	movq	%rax, end_time(%rip)
    00000088: 	subq	start_time(%rip), %rax
    0000008f: 	cvtsi2sd	%rax, %xmm0
    00000094: 	divsd	DATAat0x165b8(%rip), %xmm0
    0000009c: 	addq	$0x8, %rsp
    000000a0: 	popq	%rbx
    000000a1: 	popq	%rbp
    000000a2: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 162
.Ltmp118:
    000000a7: 	xorl	%r8d, %r8d
.Ltmp121:
    000000aa: 	movq	%r8, %rcx
    000000ad: 	movq	%rbp, %rdx
    000000b0: 	leaq	DATAat0x15a82(%rip), %rsi
    000000b7: 	xorl	%eax, %eax
    000000b9: 	movl	$0x1, %edi
    000000be: 	callq	__printf_chk@PLT # Offset: 190
    000000c3: 	jmp	.Ltmp122 # Offset: 195
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_countbitsStdLoopRSt6bitsetILm15994EEPKc"

Binary Function "_Z14CountBitsShiftIhEmPT_mm" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x43d0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x43d0
  Section     : .text
  Orc Section : .local.text._Z14CountBitsShiftIhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp123 # Offset: 10
    0000000c: 	je	.Ltmp123 # Offset: 12
    0000000e: 	movl	$0x1, %r10d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp124:
    00000018: 	movq	%rsi, %r9
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r10d, %eax
    00000020: 	shrq	$0x3, %r9
    00000024: 	andl	$0x7, %ecx
    00000027: 	shll	%cl, %eax
    00000029: 	andb	(%rdi,%r9), %al
    0000002d: 	cmpb	$0x1, %al
    0000002f: 	sbbq	$-0x1, %r8
    00000033: 	addq	$0x1, %rsi
    00000037: 	cmpq	%rsi, %rdx
    0000003a: 	jne	.Ltmp124 # Offset: 58
.Ltmp123:
    0000003c: 	movq	%r8, %rax
    0000003f: 	retq # Offset: 63
DWARF CFI Instructions:
    <empty>
End of Function "_Z14CountBitsShiftIhEmPT_mm"

Binary Function "_Z14SetBitsHalfOptIhEvPT_mm" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x4410
  Size        : 0x19a
  MaxSize     : 0x1a0
  Offset      : 0x4410
  Section     : .text
  Orc Section : .local.text._Z14SetBitsHalfOptIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp125 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	movq	%rdx, %rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rsi, %rbx
    00000019: 	subq	$0x8, %rsp
    0000001d: 	subq	%rsi, %rbp
    00000020: 	je	.Ltmp126 # Offset: 32
    00000022: 	movq	%rdi, %r12
    00000025: 	testb	$0x7, %sil
    00000029: 	je	.Ltmp127 # Offset: 41
    0000002b: 	movl	$0x1, %esi
    00000030: 	jmp	.Ltmp128 # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp129:
    00000038: 	testb	$0x7, %bl
    0000003b: 	je	.Ltmp127 # Offset: 59
.Ltmp128:
    0000003d: 	movq	%rbx, %rax
    00000040: 	movl	%ebx, %ecx
    00000042: 	movl	%esi, %edx
    00000044: 	addq	$0x1, %rbx
    00000048: 	shrq	$0x3, %rax
    0000004c: 	andl	$0x7, %ecx
    0000004f: 	shll	%cl, %edx
    00000051: 	orb	%dl, (%r12,%rax)
    00000055: 	subq	$0x1, %rbp
    00000059: 	jne	.Ltmp129 # Offset: 89
.Ltmp126:
    0000005b: 	addq	$0x8, %rsp
    0000005f: 	popq	%rbx
    00000060: 	popq	%rbp
    00000061: 	popq	%r12
    00000063: 	popq	%r13
    00000065: 	retq # Offset: 101
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp127:
    00000070: 	movq	%rbx, %rdi
    00000073: 	shrq	$0x3, %rdi
    00000077: 	cmpq	$0x7, %rbp
    0000007b: 	jbe	.Ltmp130 # Offset: 123
    00000081: 	leaq	-0x8(%rbp), %r13
    00000085: 	addq	%r12, %rdi
    00000088: 	movl	$0xff, %esi
    0000008d: 	movq	%r13, %rdx
    00000090: 	andq	$-0x8, %r13
    00000094: 	shrq	$0x3, %rdx
    00000098: 	leaq	0x8(%rbx,%r13), %rbx
    0000009d: 	addq	$0x1, %rdx
    000000a1: 	callq	memset@PLT # Offset: 161
    000000a6: 	andl	$0x7, %ebp
    000000a9: 	leaq	-0x1(%rbp), %rdx
    000000ad: 	je	.Ltmp126 # Offset: 173
.Ltmp131:
    000000af: 	movq	%rbx, %rsi
    000000b2: 	movl	%ebx, %ecx
    000000b4: 	movl	$0x1, %eax
    000000b9: 	andl	$0x7, %ecx
    000000bc: 	shrq	$0x3, %rsi
    000000c0: 	movl	%eax, %edi
    000000c2: 	shll	%cl, %edi
    000000c4: 	leaq	0x1(%rbx), %rcx
    000000c8: 	orb	%dil, (%r12,%rsi)
    000000cc: 	testq	%rdx, %rdx
    000000cf: 	je	.Ltmp126 # Offset: 207
    000000d1: 	movq	%rcx, %rsi
    000000d4: 	movl	%eax, %edi
    000000d6: 	andl	$0x7, %ecx
    000000d9: 	shrq	$0x3, %rsi
    000000dd: 	shll	%cl, %edi
    000000df: 	leaq	0x2(%rbx), %rcx
    000000e3: 	orb	%dil, (%r12,%rsi)
    000000e7: 	cmpq	$0x1, %rdx
    000000eb: 	je	.Ltmp126 # Offset: 235
    000000f1: 	movq	%rcx, %rsi
    000000f4: 	movl	%eax, %edi
    000000f6: 	andl	$0x7, %ecx
    000000f9: 	shrq	$0x3, %rsi
    000000fd: 	shll	%cl, %edi
    000000ff: 	leaq	0x3(%rbx), %rcx
    00000103: 	orb	%dil, (%r12,%rsi)
    00000107: 	cmpq	$0x2, %rdx
    0000010b: 	je	.Ltmp126 # Offset: 267
    00000111: 	movq	%rcx, %rsi
    00000114: 	movl	%eax, %edi
    00000116: 	andl	$0x7, %ecx
    00000119: 	shrq	$0x3, %rsi
    0000011d: 	shll	%cl, %edi
    0000011f: 	leaq	0x4(%rbx), %rcx
    00000123: 	orb	%dil, (%r12,%rsi)
    00000127: 	cmpq	$0x3, %rdx
    0000012b: 	je	.Ltmp126 # Offset: 299
    00000131: 	movq	%rcx, %rsi
    00000134: 	movl	%eax, %edi
    00000136: 	andl	$0x7, %ecx
    00000139: 	shrq	$0x3, %rsi
    0000013d: 	shll	%cl, %edi
    0000013f: 	leaq	0x5(%rbx), %rcx
    00000143: 	orb	%dil, (%r12,%rsi)
    00000147: 	cmpq	$0x4, %rdx
    0000014b: 	je	.Ltmp126 # Offset: 331
    00000151: 	movq	%rcx, %rsi
    00000154: 	movl	%eax, %edi
    00000156: 	andl	$0x7, %ecx
    00000159: 	shrq	$0x3, %rsi
    0000015d: 	shll	%cl, %edi
    0000015f: 	leaq	0x6(%rbx), %rcx
    00000163: 	orb	%dil, (%r12,%rsi)
    00000167: 	cmpq	$0x5, %rdx
    0000016b: 	je	.Ltmp126 # Offset: 363
    00000171: 	movq	%rcx, %rdx
    00000174: 	andl	$0x7, %ecx
    00000177: 	shrq	$0x3, %rdx
    0000017b: 	shll	%cl, %eax
    0000017d: 	orb	%al, (%r12,%rdx)
    00000181: 	addq	$0x8, %rsp
    00000185: 	popq	%rbx
    00000186: 	popq	%rbp
    00000187: 	popq	%r12
    00000189: 	popq	%r13
    0000018b: 	retq # Offset: 395
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp125:
    00000190: 	retq # Offset: 400
.Ltmp130:
    00000191: 	leaq	-0x1(%rbp), %rdx
    00000195: 	jmp	.Ltmp131 # Offset: 405
DWARF CFI Instructions:
    <empty>
End of Function "_Z14SetBitsHalfOptIhEvPT_mm"

Binary Function "_Z12SetBitsShiftIhEvPT_mm" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x45b0
  Size        : 0x38
  MaxSize     : 0x40
  Offset      : 0x45b0
  Section     : .text
  Orc Section : .local.text._Z12SetBitsShiftIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp132 # Offset: 7
    00000009: 	je	.Ltmp132 # Offset: 9
    0000000b: 	movl	$0x1, %r8d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp133:
    00000018: 	movq	%rsi, %rax
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r8d, %r9d
    00000020: 	addq	$0x1, %rsi
    00000024: 	shrq	$0x3, %rax
    00000028: 	andl	$0x7, %ecx
    0000002b: 	shll	%cl, %r9d
    0000002e: 	orb	%r9b, (%rdi,%rax)
    00000032: 	cmpq	%rsi, %rdx
    00000035: 	jne	.Ltmp133 # Offset: 53
.Ltmp132:
    00000037: 	retq # Offset: 55
DWARF CFI Instructions:
    <empty>
End of Function "_Z12SetBitsShiftIhEvPT_mm"

Binary Function "_Z7SetBitsIhEvPT_mm" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x45f0
  Size        : 0x38
  MaxSize     : 0x40
  Offset      : 0x45f0
  Section     : .text
  Orc Section : .local.text._Z7SetBitsIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp134 # Offset: 7
    00000009: 	je	.Ltmp134 # Offset: 9
    0000000b: 	movl	$0x1, %r8d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp135:
    00000018: 	movq	%rsi, %rax
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r8d, %r9d
    00000020: 	addq	$0x1, %rsi
    00000024: 	shrq	$0x3, %rax
    00000028: 	andl	$0x7, %ecx
    0000002b: 	shll	%cl, %r9d
    0000002e: 	orb	%r9b, (%rdi,%rax)
    00000032: 	cmpq	%rsi, %rdx
    00000035: 	jne	.Ltmp135 # Offset: 53
.Ltmp134:
    00000037: 	retq # Offset: 55
DWARF CFI Instructions:
    <empty>
End of Function "_Z7SetBitsIhEvPT_mm"

Binary Function "_Z16ClearBitsHalfOptIhEvPT_mm" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x4630
  Size        : 0x1ca
  MaxSize     : 0x1d0
  Offset      : 0x4630
  Section     : .text
  Orc Section : .local.text._Z16ClearBitsHalfOptIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp136 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rsi, %rbx
    00000016: 	subq	$0x8, %rsp
    0000001a: 	subq	%rsi, %rdx
    0000001d: 	je	.Ltmp137 # Offset: 29
    0000001f: 	movq	%rdi, %r12
    00000022: 	testb	$0x7, %sil
    00000026: 	je	.Ltmp138 # Offset: 38
    00000028: 	movl	$0x1, %edi
    0000002d: 	jmp	.Ltmp139 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp140:
    00000030: 	testb	$0x7, %bl
    00000033: 	je	.Ltmp138 # Offset: 51
.Ltmp139:
    00000035: 	movl	%ebx, %ecx
    00000037: 	movq	%rbx, %rsi
    0000003a: 	movl	%edi, %eax
    0000003c: 	addq	$0x1, %rbx
    00000040: 	andl	$0x7, %ecx
    00000043: 	shrq	$0x3, %rsi
    00000047: 	shll	%cl, %eax
    00000049: 	notl	%eax
    0000004b: 	andb	%al, (%r12,%rsi)
    0000004f: 	subq	$0x1, %rdx
    00000053: 	jne	.Ltmp140 # Offset: 83
.Ltmp137:
    00000055: 	addq	$0x8, %rsp
    00000059: 	popq	%rbx
    0000005a: 	popq	%rbp
    0000005b: 	popq	%r12
    0000005d: 	popq	%r13
    0000005f: 	retq # Offset: 95
.Ltmp138:
    00000060: 	movq	%rbx, %rdi
    00000063: 	shrq	$0x3, %rdi
    00000067: 	cmpq	$0x8, %rdx
    0000006b: 	jbe	.Ltmp141 # Offset: 107
    00000071: 	leaq	-0x9(%rdx), %rbp
    00000075: 	addq	%r12, %rdi
    00000078: 	xorl	%esi, %esi
    0000007a: 	movq	%rbp, %r13
    0000007d: 	shrq	$0x3, %r13
    00000081: 	leaq	0x1(%r13), %rdx
    00000085: 	negq	%r13
    00000088: 	callq	memset@PLT # Offset: 136
    0000008d: 	movq	%rbp, %rax
    00000090: 	leaq	(%rbp,%r13,8), %rdx
    00000095: 	andq	$-0x8, %rax
    00000099: 	leaq	0x8(%rbx,%rax), %rbx
.Ltmp142:
    0000009e: 	movl	%ebx, %ecx
    000000a0: 	movl	$0x1, %eax
    000000a5: 	movq	%rbx, %rsi
    000000a8: 	andl	$0x7, %ecx
    000000ab: 	movl	%eax, %edi
    000000ad: 	shrq	$0x3, %rsi
    000000b1: 	shll	%cl, %edi
    000000b3: 	movl	%edi, %ecx
    000000b5: 	notl	%ecx
    000000b7: 	andb	%cl, (%r12,%rsi)
    000000bb: 	leaq	0x1(%rbx), %rcx
    000000bf: 	testq	%rdx, %rdx
    000000c2: 	je	.Ltmp137 # Offset: 194
    000000c4: 	movq	%rcx, %rsi
    000000c7: 	movl	%eax, %edi
    000000c9: 	andl	$0x7, %ecx
    000000cc: 	shll	%cl, %edi
    000000ce: 	shrq	$0x3, %rsi
    000000d2: 	movl	%edi, %ecx
    000000d4: 	notl	%ecx
    000000d6: 	andb	%cl, (%r12,%rsi)
    000000da: 	leaq	0x2(%rbx), %rcx
    000000de: 	cmpq	$0x1, %rdx
    000000e2: 	je	.Ltmp137 # Offset: 226
    000000e8: 	movq	%rcx, %rsi
    000000eb: 	movl	%eax, %edi
    000000ed: 	andl	$0x7, %ecx
    000000f0: 	shll	%cl, %edi
    000000f2: 	shrq	$0x3, %rsi
    000000f6: 	movl	%edi, %ecx
    000000f8: 	notl	%ecx
    000000fa: 	andb	%cl, (%r12,%rsi)
    000000fe: 	leaq	0x3(%rbx), %rcx
    00000102: 	cmpq	$0x2, %rdx
    00000106: 	je	.Ltmp137 # Offset: 262
    0000010c: 	movq	%rcx, %rsi
    0000010f: 	movl	%eax, %edi
    00000111: 	andl	$0x7, %ecx
    00000114: 	shll	%cl, %edi
    00000116: 	shrq	$0x3, %rsi
    0000011a: 	movl	%edi, %ecx
    0000011c: 	notl	%ecx
    0000011e: 	andb	%cl, (%r12,%rsi)
    00000122: 	leaq	0x4(%rbx), %rcx
    00000126: 	cmpq	$0x3, %rdx
    0000012a: 	je	.Ltmp137 # Offset: 298
    00000130: 	movq	%rcx, %rsi
    00000133: 	movl	%eax, %edi
    00000135: 	andl	$0x7, %ecx
    00000138: 	shll	%cl, %edi
    0000013a: 	shrq	$0x3, %rsi
    0000013e: 	movl	%edi, %ecx
    00000140: 	notl	%ecx
    00000142: 	andb	%cl, (%r12,%rsi)
    00000146: 	leaq	0x5(%rbx), %rcx
    0000014a: 	cmpq	$0x4, %rdx
    0000014e: 	je	.Ltmp137 # Offset: 334
    00000154: 	movq	%rcx, %rsi
    00000157: 	movl	%eax, %edi
    00000159: 	andl	$0x7, %ecx
    0000015c: 	shll	%cl, %edi
    0000015e: 	shrq	$0x3, %rsi
    00000162: 	movl	%edi, %ecx
    00000164: 	notl	%ecx
    00000166: 	andb	%cl, (%r12,%rsi)
    0000016a: 	leaq	0x6(%rbx), %rcx
    0000016e: 	cmpq	$0x5, %rdx
    00000172: 	je	.Ltmp137 # Offset: 370
    00000178: 	movq	%rcx, %rsi
    0000017b: 	movl	%eax, %edi
    0000017d: 	andl	$0x7, %ecx
    00000180: 	shll	%cl, %edi
    00000182: 	shrq	$0x3, %rsi
    00000186: 	movl	%edi, %ecx
    00000188: 	notl	%ecx
    0000018a: 	andb	%cl, (%r12,%rsi)
    0000018e: 	leaq	0x7(%rbx), %rcx
    00000192: 	cmpq	$0x6, %rdx
    00000196: 	je	.Ltmp137 # Offset: 406
    0000019c: 	movq	%rcx, %rdx
    0000019f: 	andl	$0x7, %ecx
    000001a2: 	shrq	$0x3, %rdx
    000001a6: 	shll	%cl, %eax
    000001a8: 	notl	%eax
    000001aa: 	andb	%al, (%r12,%rdx)
    000001ae: 	addq	$0x8, %rsp
    000001b2: 	popq	%rbx
    000001b3: 	popq	%rbp
    000001b4: 	popq	%r12
    000001b6: 	popq	%r13
    000001b8: 	retq # Offset: 440
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp136:
    000001c0: 	retq # Offset: 448
.Ltmp141:
    000001c1: 	subq	$0x1, %rdx
    000001c5: 	jmp	.Ltmp142 # Offset: 453
DWARF CFI Instructions:
    <empty>
End of Function "_Z16ClearBitsHalfOptIhEvPT_mm"

Binary Function "_Z14ClearBitsShiftIhEvPT_mm" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x4800
  Size        : 0x39
  MaxSize     : 0x40
  Offset      : 0x4800
  Section     : .text
  Orc Section : .local.text._Z14ClearBitsShiftIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp143 # Offset: 7
    00000009: 	je	.Ltmp143 # Offset: 9
    0000000b: 	movl	$0x1, %r9d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp144:
    00000018: 	movl	%esi, %ecx
    0000001a: 	movq	%rsi, %r8
    0000001d: 	movl	%r9d, %eax
    00000020: 	addq	$0x1, %rsi
    00000024: 	andl	$0x7, %ecx
    00000027: 	shrq	$0x3, %r8
    0000002b: 	shll	%cl, %eax
    0000002d: 	notl	%eax
    0000002f: 	andb	%al, (%rdi,%r8)
    00000033: 	cmpq	%rsi, %rdx
    00000036: 	jne	.Ltmp144 # Offset: 54
.Ltmp143:
    00000038: 	retq # Offset: 56
DWARF CFI Instructions:
    <empty>
End of Function "_Z14ClearBitsShiftIhEvPT_mm"

Binary Function "_Z9ClearBitsIhEvPT_mm" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x4840
  Size        : 0x39
  MaxSize     : 0x40
  Offset      : 0x4840
  Section     : .text
  Orc Section : .local.text._Z9ClearBitsIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp145 # Offset: 7
    00000009: 	je	.Ltmp145 # Offset: 9
    0000000b: 	movl	$0x1, %r9d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp146:
    00000018: 	movl	%esi, %ecx
    0000001a: 	movq	%rsi, %r8
    0000001d: 	movl	%r9d, %eax
    00000020: 	addq	$0x1, %rsi
    00000024: 	andl	$0x7, %ecx
    00000027: 	shrq	$0x3, %r8
    0000002b: 	shll	%cl, %eax
    0000002d: 	notl	%eax
    0000002f: 	andb	%al, (%rdi,%r8)
    00000033: 	cmpq	%rsi, %rdx
    00000036: 	jne	.Ltmp146 # Offset: 54
.Ltmp145:
    00000038: 	retq # Offset: 56
DWARF CFI Instructions:
    <empty>
End of Function "_Z9ClearBitsIhEvPT_mm"

Binary Function "_Z17InvertBitsHalfOptIhEvPT_mm" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x4880
  Size        : 0x2aa
  MaxSize     : 0x2b0
  Offset      : 0x4880
  Section     : .text
  Orc Section : .local.text._Z17InvertBitsHalfOptIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp147 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	subq	%rsi, %rdx
    00000013: 	je	.Ltmp147 # Offset: 19
    00000019: 	pushq	%rbx
    0000001a: 	testb	$0x7, %al
    0000001c: 	je	.Ltmp148 # Offset: 28
    0000001e: 	movl	$0x1, %r8d
    00000024: 	jmp	.Ltmp149 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp150:
    00000030: 	testb	$0x7, %al
    00000032: 	je	.Ltmp148 # Offset: 50
.Ltmp149:
    00000034: 	movq	%rax, %rsi
    00000037: 	movl	%eax, %ecx
    00000039: 	movl	%r8d, %ebx
    0000003c: 	addq	$0x1, %rax
    00000040: 	shrq	$0x3, %rsi
    00000044: 	andl	$0x7, %ecx
    00000047: 	shll	%cl, %ebx
    00000049: 	xorb	%bl, (%rdi,%rsi)
    0000004c: 	subq	$0x1, %rdx
    00000050: 	jne	.Ltmp150 # Offset: 80
.Ltmp156:
    00000052: 	popq	%rbx
    00000053: 	retq # Offset: 83
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp148:
    00000058: 	movq	%rax, %r11
    0000005b: 	shrq	$0x3, %r11
    0000005f: 	cmpq	$0x8, %rdx
    00000063: 	jbe	.Ltmp151 # Offset: 99
    00000069: 	leaq	-0x9(%rdx), %r9
    0000006d: 	movq	%r9, %r8
    00000070: 	shrq	$0x3, %r8
    00000074: 	leaq	0x1(%r8), %r10
    00000078: 	cmpq	$0x77, %r9
    0000007c: 	jbe	.Ltmp152 # Offset: 124
    00000082: 	movq	%r10, %rsi
    00000085: 	leaq	(%rdi,%r11), %rcx
    00000089: 	pcmpeqd	%xmm1, %xmm1
    0000008d: 	shrq	$0x4, %rsi
    00000091: 	shlq	$0x4, %rsi
    00000095: 	addq	%rcx, %rsi
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp153:
    000000a0: 	movdqu	(%rcx), %xmm0
    000000a4: 	addq	$0x10, %rcx
    000000a8: 	pxor	%xmm1, %xmm0
    000000ac: 	movups	%xmm0, -0x10(%rcx)
    000000b0: 	cmpq	%rcx, %rsi
    000000b3: 	jne	.Ltmp153 # Offset: 179
    000000b5: 	movq	%r10, %rcx
    000000b8: 	andq	$-0x10, %rcx
    000000bc: 	movq	%rcx, %rsi
    000000bf: 	negq	%rsi
    000000c2: 	leaq	(%rdx,%rsi,8), %rdx
    000000c6: 	leaq	(%rcx,%r11), %rsi
    000000ca: 	cmpq	%rcx, %r10
    000000cd: 	je	.Ltmp154 # Offset: 205
.Ltmp157:
    000000d3: 	movq	%r8, %rbx
    000000d6: 	subq	%rcx, %rbx
    000000d9: 	leaq	0x1(%rbx), %r10
    000000dd: 	cmpq	$0x6, %rbx
    000000e1: 	jbe	.Ltmp155 # Offset: 225
    000000e3: 	movq	DATAat0x165a0(%rip), %xmm1
    000000eb: 	addq	%r11, %rcx
    000000ee: 	addq	%rdi, %rcx
    000000f1: 	movq	(%rcx), %xmm0
    000000f5: 	pxor	%xmm1, %xmm0
    000000f9: 	movq	%xmm0, (%rcx)
    000000fd: 	movq	%r10, %rcx
    00000100: 	andq	$-0x8, %rcx
    00000104: 	movq	%rcx, %r11
    00000107: 	addq	%rcx, %rsi
    0000010a: 	negq	%r11
    0000010d: 	leaq	(%rdx,%r11,8), %rdx
    00000111: 	cmpq	%r10, %rcx
    00000114: 	je	.Ltmp154 # Offset: 276
.Ltmp155:
    00000116: 	leaq	-0x8(%rdx), %r10
    0000011a: 	notb	(%rdi,%rsi)
    0000011d: 	leaq	0x1(%rsi), %rcx
    00000121: 	cmpq	$0x8, %r10
    00000125: 	jbe	.Ltmp154 # Offset: 293
    00000127: 	notb	(%rdi,%rcx)
    0000012a: 	leaq	-0x10(%rdx), %rcx
    0000012e: 	leaq	0x2(%rsi), %r10
    00000132: 	cmpq	$0x8, %rcx
    00000136: 	jbe	.Ltmp154 # Offset: 310
    00000138: 	notb	(%rdi,%r10)
    0000013c: 	leaq	-0x18(%rdx), %r10
    00000140: 	leaq	0x3(%rsi), %rcx
    00000144: 	cmpq	$0x8, %r10
    00000148: 	jbe	.Ltmp154 # Offset: 328
    0000014a: 	notb	(%rdi,%rcx)
    0000014d: 	leaq	-0x20(%rdx), %rcx
    00000151: 	leaq	0x4(%rsi), %r10
    00000155: 	cmpq	$0x8, %rcx
    00000159: 	jbe	.Ltmp154 # Offset: 345
    0000015b: 	notb	(%rdi,%r10)
    0000015f: 	leaq	-0x28(%rdx), %r10
    00000163: 	leaq	0x5(%rsi), %rcx
    00000167: 	cmpq	$0x8, %r10
    0000016b: 	jbe	.Ltmp154 # Offset: 363
    0000016d: 	subq	$0x30, %rdx
    00000171: 	notb	(%rdi,%rcx)
    00000174: 	addq	$0x6, %rsi
    00000178: 	cmpq	$0x8, %rdx
    0000017c: 	jbe	.Ltmp154 # Offset: 380
    0000017e: 	notb	(%rdi,%rsi)
.Ltmp154:
    00000181: 	movq	%r9, %rdx
    00000184: 	negq	%r8
    00000187: 	andq	$-0x8, %rdx
    0000018b: 	leaq	0x8(%rax,%rdx), %rax
    00000190: 	leaq	(%r9,%r8,8), %rdx
.Ltmp158:
    00000194: 	movq	%rax, %r8
    00000197: 	movl	%eax, %ecx
    00000199: 	movl	$0x1, %esi
    0000019e: 	andl	$0x7, %ecx
    000001a1: 	shrq	$0x3, %r8
    000001a5: 	movl	%esi, %ebx
    000001a7: 	shll	%cl, %ebx
    000001a9: 	leaq	0x1(%rax), %rcx
    000001ad: 	xorb	%bl, (%rdi,%r8)
    000001b1: 	testq	%rdx, %rdx
    000001b4: 	je	.Ltmp156 # Offset: 436
    000001ba: 	movq	%rcx, %r8
    000001bd: 	movl	%esi, %ebx
    000001bf: 	andl	$0x7, %ecx
    000001c2: 	shrq	$0x3, %r8
    000001c6: 	shll	%cl, %ebx
    000001c8: 	leaq	0x2(%rax), %rcx
    000001cc: 	xorb	%bl, (%rdi,%r8)
    000001d0: 	cmpq	$0x1, %rdx
    000001d4: 	je	.Ltmp156 # Offset: 468
    000001da: 	movq	%rcx, %r8
    000001dd: 	movl	%esi, %ebx
    000001df: 	andl	$0x7, %ecx
    000001e2: 	shrq	$0x3, %r8
    000001e6: 	shll	%cl, %ebx
    000001e8: 	leaq	0x3(%rax), %rcx
    000001ec: 	xorb	%bl, (%rdi,%r8)
    000001f0: 	cmpq	$0x2, %rdx
    000001f4: 	je	.Ltmp156 # Offset: 500
    000001fa: 	movq	%rcx, %r8
    000001fd: 	movl	%esi, %ebx
    000001ff: 	andl	$0x7, %ecx
    00000202: 	shrq	$0x3, %r8
    00000206: 	shll	%cl, %ebx
    00000208: 	leaq	0x4(%rax), %rcx
    0000020c: 	xorb	%bl, (%rdi,%r8)
    00000210: 	cmpq	$0x3, %rdx
    00000214: 	je	.Ltmp156 # Offset: 532
    0000021a: 	movq	%rcx, %r8
    0000021d: 	movl	%esi, %ebx
    0000021f: 	andl	$0x7, %ecx
    00000222: 	shrq	$0x3, %r8
    00000226: 	shll	%cl, %ebx
    00000228: 	leaq	0x5(%rax), %rcx
    0000022c: 	xorb	%bl, (%rdi,%r8)
    00000230: 	cmpq	$0x4, %rdx
    00000234: 	je	.Ltmp156 # Offset: 564
    0000023a: 	movq	%rcx, %r8
    0000023d: 	movl	%esi, %ebx
    0000023f: 	andl	$0x7, %ecx
    00000242: 	shrq	$0x3, %r8
    00000246: 	shll	%cl, %ebx
    00000248: 	leaq	0x6(%rax), %rcx
    0000024c: 	xorb	%bl, (%rdi,%r8)
    00000250: 	cmpq	$0x5, %rdx
    00000254: 	je	.Ltmp156 # Offset: 596
    0000025a: 	movq	%rcx, %r8
    0000025d: 	movl	%esi, %ebx
    0000025f: 	andl	$0x7, %ecx
    00000262: 	shrq	$0x3, %r8
    00000266: 	shll	%cl, %ebx
    00000268: 	leaq	0x7(%rax), %rcx
    0000026c: 	xorb	%bl, (%rdi,%r8)
    00000270: 	cmpq	$0x6, %rdx
    00000274: 	je	.Ltmp156 # Offset: 628
    0000027a: 	movq	%rcx, %rax
    0000027d: 	andl	$0x7, %ecx
    00000280: 	popq	%rbx
    00000281: 	shrq	$0x3, %rax
    00000285: 	shll	%cl, %esi
    00000287: 	xorb	%sil, (%rdi,%rax)
    0000028b: 	retq # Offset: 651
.Ltmp152:
    0000028c: 	movq	%r11, %rsi
    0000028f: 	xorl	%ecx, %ecx
    00000291: 	jmp	.Ltmp157 # Offset: 657
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp147:
    000002a0: 	retq # Offset: 672
.Ltmp151:
    000002a1: 	subq	$0x1, %rdx
    000002a5: 	jmp	.Ltmp158 # Offset: 677
DWARF CFI Instructions:
    <empty>
End of Function "_Z17InvertBitsHalfOptIhEvPT_mm"

Binary Function "_Z15InvertBitsShiftIhEvPT_mm" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x4b30
  Size        : 0x38
  MaxSize     : 0x40
  Offset      : 0x4b30
  Section     : .text
  Orc Section : .local.text._Z15InvertBitsShiftIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp159 # Offset: 7
    00000009: 	je	.Ltmp159 # Offset: 9
    0000000b: 	movl	$0x1, %r8d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp160:
    00000018: 	movq	%rsi, %rax
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r8d, %r9d
    00000020: 	addq	$0x1, %rsi
    00000024: 	shrq	$0x3, %rax
    00000028: 	andl	$0x7, %ecx
    0000002b: 	shll	%cl, %r9d
    0000002e: 	xorb	%r9b, (%rdi,%rax)
    00000032: 	cmpq	%rsi, %rdx
    00000035: 	jne	.Ltmp160 # Offset: 53
.Ltmp159:
    00000037: 	retq # Offset: 55
DWARF CFI Instructions:
    <empty>
End of Function "_Z15InvertBitsShiftIhEvPT_mm"

Binary Function "_Z10InvertBitsIhEvPT_mm" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x4b70
  Size        : 0x38
  MaxSize     : 0x40
  Offset      : 0x4b70
  Section     : .text
  Orc Section : .local.text._Z10InvertBitsIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp161 # Offset: 7
    00000009: 	je	.Ltmp161 # Offset: 9
    0000000b: 	movl	$0x1, %r8d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp162:
    00000018: 	movq	%rsi, %rax
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r8d, %r9d
    00000020: 	addq	$0x1, %rsi
    00000024: 	shrq	$0x3, %rax
    00000028: 	andl	$0x7, %ecx
    0000002b: 	shll	%cl, %r9d
    0000002e: 	xorb	%r9b, (%rdi,%rax)
    00000032: 	cmpq	%rsi, %rdx
    00000035: 	jne	.Ltmp162 # Offset: 53
.Ltmp161:
    00000037: 	retq # Offset: 55
DWARF CFI Instructions:
    <empty>
End of Function "_Z10InvertBitsIhEvPT_mm"

Binary Function "_Z21AndBitTablesOptimizedIhEvPT_PKS0_mm" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x4bb0
  Size        : 0x294
  MaxSize     : 0x2a0
  Offset      : 0x4bb0
  Section     : .text
  Orc Section : .local.text._Z21AndBitTablesOptimizedIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp163 # Offset: 7
    0000000d: 	movq	%rcx, %r10
    00000010: 	movq	%rcx, %rax
    00000013: 	movq	%rsi, %r8
    00000016: 	movq	%rdx, %rsi
    00000019: 	subq	%rdx, %r10
    0000001c: 	shrq	$0x3, %rax
    00000020: 	pushq	%r14
    00000022: 	movq	%rcx, %r9
    00000025: 	shrq	$0x3, %rdx
    00000029: 	pushq	%r13
    0000002b: 	pushq	%r12
    0000002d: 	pushq	%rbp
    0000002e: 	pushq	%rbx
    0000002f: 	cmpq	%rdx, %rax
    00000032: 	ja	.Ltmp164 # Offset: 50
.Ltmp172:
    00000038: 	cmpq	$0x7, %r10
    0000003c: 	jbe	.Ltmp165 # Offset: 60
    00000042: 	leaq	0x1(%rdx), %rax
    00000046: 	leaq	(%rdi,%rdx), %rcx
    0000004a: 	leaq	(%r8,%rax), %rbx
    0000004e: 	movq	%rcx, %r11
    00000051: 	leaq	-0x8(%r10), %rbp
    00000055: 	movq	%rax, %r12
    00000058: 	subq	%rbx, %r11
    0000005b: 	cmpq	$0xe, %r11
    0000005f: 	jbe	.Ltmp166 # Offset: 95
    00000065: 	cmpq	$0x37, %rbp
    00000069: 	jbe	.Ltmp166 # Offset: 105
    0000006f: 	movq	%rbp, %r13
    00000072: 	shrq	$0x3, %r13
    00000076: 	leaq	0x1(%r13), %r11
    0000007a: 	cmpq	$0x77, %rbp
    0000007e: 	jbe	.Ltmp167 # Offset: 126
    00000084: 	movq	%r11, %rbx
    00000087: 	leaq	(%r8,%rdx), %r14
    0000008b: 	xorl	%eax, %eax
    0000008d: 	shrq	$0x4, %rbx
    00000091: 	shlq	$0x4, %rbx
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp168:
    00000098: 	movdqu	(%rcx,%rax), %xmm0
    0000009d: 	movdqu	(%r14,%rax), %xmm2
    000000a3: 	pand	%xmm2, %xmm0
    000000a7: 	movups	%xmm0, (%rcx,%rax)
    000000ab: 	addq	$0x10, %rax
    000000af: 	cmpq	%rbx, %rax
    000000b2: 	jne	.Ltmp168 # Offset: 178
    000000b4: 	movq	%r11, %rbx
    000000b7: 	andq	$-0x10, %rbx
    000000bb: 	movq	%rbx, %rax
    000000be: 	addq	%rbx, %rdx
    000000c1: 	negq	%rax
    000000c4: 	leaq	(%r10,%rax,8), %rcx
    000000c8: 	movq	%rdx, %rax
    000000cb: 	cmpq	%rbx, %r11
    000000ce: 	je	.Ltmp169 # Offset: 206
    000000d4: 	subq	%rbx, %r13
    000000d7: 	leaq	0x1(%r13), %r11
    000000db: 	cmpq	$0x6, %r13
    000000df: 	jbe	.Ltmp170 # Offset: 223
.Ltmp175:
    000000e1: 	leaq	(%rdi,%rdx), %rbx
    000000e5: 	movq	(%r8,%rdx), %xmm0
    000000eb: 	movq	%r11, %rdx
    000000ee: 	movq	(%rbx), %xmm1
    000000f2: 	andq	$-0x8, %rdx
    000000f6: 	addq	%rdx, %rax
    000000f9: 	pand	%xmm1, %xmm0
    000000fd: 	movq	%xmm0, (%rbx)
    00000101: 	movq	%rdx, %rbx
    00000104: 	negq	%rbx
    00000107: 	leaq	(%rcx,%rbx,8), %rcx
    0000010b: 	cmpq	%rdx, %r11
    0000010e: 	je	.Ltmp169 # Offset: 270
.Ltmp170:
    00000114: 	leaq	-0x8(%rcx), %r11
    00000118: 	movzbl	(%r8,%rax), %edx
    0000011d: 	andb	%dl, (%rdi,%rax)
    00000120: 	leaq	0x1(%rax), %rdx
    00000124: 	cmpq	$0x7, %r11
    00000128: 	jbe	.Ltmp169 # Offset: 296
    0000012e: 	movzbl	0x1(%r8,%rax), %r11d
    00000134: 	andb	%r11b, (%rdi,%rdx)
    00000138: 	leaq	-0x10(%rcx), %r11
    0000013c: 	leaq	0x2(%rax), %rdx
    00000140: 	cmpq	$0x7, %r11
    00000144: 	jbe	.Ltmp169 # Offset: 324
    00000146: 	movzbl	0x2(%r8,%rax), %r11d
    0000014c: 	andb	%r11b, (%rdi,%rdx)
    00000150: 	leaq	-0x18(%rcx), %r11
    00000154: 	leaq	0x3(%rax), %rdx
    00000158: 	cmpq	$0x7, %r11
    0000015c: 	jbe	.Ltmp169 # Offset: 348
    0000015e: 	movzbl	0x3(%r8,%rax), %r11d
    00000164: 	andb	%r11b, (%rdi,%rdx)
    00000168: 	leaq	-0x20(%rcx), %r11
    0000016c: 	leaq	0x4(%rax), %rdx
    00000170: 	cmpq	$0x7, %r11
    00000174: 	jbe	.Ltmp169 # Offset: 372
    00000176: 	movzbl	0x4(%r8,%rax), %r11d
    0000017c: 	andb	%r11b, (%rdi,%rdx)
    00000180: 	leaq	-0x28(%rcx), %r11
    00000184: 	leaq	0x5(%rax), %rdx
    00000188: 	cmpq	$0x7, %r11
    0000018c: 	jbe	.Ltmp169 # Offset: 396
    0000018e: 	subq	$0x30, %rcx
    00000192: 	movzbl	0x5(%r8,%rax), %r11d
    00000198: 	andb	%r11b, (%rdi,%rdx)
    0000019c: 	leaq	0x6(%rax), %rdx
    000001a0: 	cmpq	$0x7, %rcx
    000001a4: 	jbe	.Ltmp169 # Offset: 420
    000001a6: 	movzbl	0x6(%r8,%rax), %eax
    000001ac: 	andb	%al, (%rdi,%rdx)
.Ltmp169:
    000001af: 	movq	%rbp, %rax
    000001b2: 	movq	%rbp, %rdx
    000001b5: 	andl	$0x7, %r10d
    000001b9: 	andq	$-0x8, %rax
    000001bd: 	shrq	$0x3, %rdx
    000001c1: 	leaq	0x8(%rsi,%rax), %rsi
    000001c6: 	addq	%r12, %rdx
.Ltmp165:
    000001c9: 	testq	%r10, %r10
    000001cc: 	je	.Ltmp171 # Offset: 460
    000001ce: 	movzbl	(%r8,%rdx), %r8d
    000001d3: 	addq	%rdx, %rdi
    000001d6: 	movl	%r9d, %ecx
    000001d9: 	movl	$0xffffffff, %edx
    000001de: 	andl	$0x7, %ecx
    000001e1: 	movl	%edx, %eax
    000001e3: 	shll	%cl, %eax
    000001e5: 	movl	%esi, %ecx
    000001e7: 	andl	$0x7, %ecx
    000001ea: 	notl	%eax
    000001ec: 	shll	%cl, %edx
    000001ee: 	andl	%edx, %eax
    000001f0: 	movzbl	(%rdi), %edx
    000001f3: 	xorl	%r8d, %edx
    000001f6: 	andl	%edx, %eax
    000001f8: 	xorl	%r8d, %eax
    000001fb: 	andb	(%rdi), %al
    000001fd: 	movb	%al, (%rdi)
.Ltmp171:
    000001ff: 	popq	%rbx
    00000200: 	popq	%rbp
    00000201: 	popq	%r12
    00000203: 	popq	%r13
    00000205: 	popq	%r14
    00000207: 	retq # Offset: 519
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp164:
    00000210: 	movq	%rsi, %rcx
    00000213: 	andl	$0x7, %ecx
    00000216: 	je	.Ltmp172 # Offset: 534
    0000021c: 	movl	$0xffffffff, %r11d
    00000222: 	leaq	(%rdi,%rdx), %rbx
    00000226: 	addq	$0x8, %rsi
    0000022a: 	shll	%cl, %r11d
    0000022d: 	subq	%rcx, %rsi
    00000230: 	leaq	-0x8(%rcx,%r10), %r10
    00000235: 	movl	%r11d, %eax
    00000238: 	andb	(%rbx), %r11b
    0000023b: 	notl	%eax
    0000023d: 	andb	(%r8,%rdx), %al
    00000241: 	movq	%rsi, %rdx
    00000244: 	orl	%r11d, %eax
    00000247: 	andb	(%rbx), %al
    00000249: 	shrq	$0x3, %rdx
    0000024d: 	movb	%al, (%rbx)
    0000024f: 	jmp	.Ltmp172 # Offset: 591
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp163:
    00000258: 	retq # Offset: 600
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp166:
    00000260: 	movq	%rbp, %r11
    00000263: 	shrq	$0x3, %r11
    00000267: 	addq	%rax, %r11
    0000026a: 	jmp	.Ltmp173 # Offset: 618
    0000026c: 	nopl	(%rax) # Size: 4
.Ltmp174:
    00000270: 	addq	$0x1, %rax
.Ltmp173:
    00000274: 	movzbl	(%r8,%rdx), %ecx
    00000279: 	andb	%cl, (%rdi,%rdx)
    0000027c: 	movq	%rax, %rdx
    0000027f: 	cmpq	%r11, %rax
    00000282: 	jne	.Ltmp174 # Offset: 642
    00000284: 	jmp	.Ltmp169 # Offset: 644
.Ltmp167:
    00000289: 	movq	%rdx, %rax
    0000028c: 	movq	%r10, %rcx
    0000028f: 	jmp	.Ltmp175 # Offset: 655
DWARF CFI Instructions:
    <empty>
End of Function "_Z21AndBitTablesOptimizedIhEvPT_PKS0_mm"

Binary Function "_Z19AndBitTablesHalfOptIhEvPT_PKS0_mm" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x4e50
  Size        : 0x3e8
  MaxSize     : 0x3f0
  Offset      : 0x4e50
  Section     : .text
  Orc Section : .local.text._Z19AndBitTablesHalfOptIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp176 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r10
    00000015: 	movq	%rdx, %rax
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rsi
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp177 # Offset: 30
    00000024: 	movl	$0x1, %r11d
    0000002a: 	testb	$0x7, %al
    0000002c: 	jne	.Ltmp178 # Offset: 44
    0000002e: 	jmp	.Ltmp179 # Offset: 46
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp180:
    00000038: 	testb	$0x7, %al
    0000003a: 	je	.Ltmp179 # Offset: 58
.Ltmp178:
    00000040: 	movq	%rax, %r9
    00000043: 	movl	%eax, %ecx
    00000045: 	movl	%r11d, %edx
    00000048: 	addq	$0x1, %rax
    0000004c: 	shrq	$0x3, %r9
    00000050: 	andl	$0x7, %ecx
    00000053: 	shll	%cl, %edx
    00000055: 	movzbl	(%r10,%r9), %ecx
    0000005a: 	leaq	(%rdi,%r9), %r8
    0000005e: 	andl	%edx, %ecx
    00000060: 	notl	%edx
    00000062: 	andb	(%r8), %dl
    00000065: 	orl	%ecx, %edx
    00000067: 	andb	(%r8), %dl
    0000006a: 	movb	%dl, (%r8)
    0000006d: 	subq	$0x1, %rsi
    00000071: 	jae	.Ltmp180 # Offset: 113
    00000073: 	movq	%rax, %rcx
    00000076: 	shrq	$0x3, %rcx
.Ltmp187:
    0000007a: 	leaq	(%rdi,%rcx), %r8
    0000007e: 	leaq	0x1(%rcx), %rdx
    00000082: 	leaq	(%r10,%rdx), %rbx
    00000086: 	movq	%r8, %r11
    00000089: 	leaq	-0x8(%rsi), %r9
    0000008d: 	subq	%rbx, %r11
    00000090: 	cmpq	$0xe, %r11
    00000094: 	jbe	.Ltmp181 # Offset: 148
    0000009a: 	cmpq	$0x37, %r9
    0000009e: 	jbe	.Ltmp181 # Offset: 158
    000000a4: 	movq	%r9, %rbp
    000000a7: 	shrq	$0x3, %rbp
    000000ab: 	leaq	0x1(%rbp), %r11
    000000af: 	cmpq	$0x77, %r9
    000000b3: 	jbe	.Ltmp182 # Offset: 179
    000000b9: 	movq	%r11, %rbx
    000000bc: 	leaq	(%r10,%rcx), %r12
    000000c0: 	xorl	%edx, %edx
    000000c2: 	shrq	$0x4, %rbx
    000000c6: 	shlq	$0x4, %rbx
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp183:
    000000d0: 	movdqu	(%r12,%rdx), %xmm0
    000000d6: 	movdqu	(%r8,%rdx), %xmm2
    000000dc: 	pand	%xmm2, %xmm0
    000000e0: 	movups	%xmm0, (%r8,%rdx)
    000000e5: 	addq	$0x10, %rdx
    000000e9: 	cmpq	%rdx, %rbx
    000000ec: 	jne	.Ltmp183 # Offset: 236
    000000ee: 	movq	%r11, %rbx
    000000f1: 	andq	$-0x10, %rbx
    000000f5: 	movq	%rbx, %rdx
    000000f8: 	addq	%rbx, %rcx
    000000fb: 	negq	%rdx
    000000fe: 	leaq	(%rsi,%rdx,8), %r8
    00000102: 	movq	%rcx, %rdx
    00000105: 	cmpq	%r11, %rbx
    00000108: 	je	.Ltmp184 # Offset: 264
    0000010e: 	subq	%rbx, %rbp
    00000111: 	leaq	0x1(%rbp), %r11
    00000115: 	cmpq	$0x6, %rbp
    00000119: 	jbe	.Ltmp185 # Offset: 281
.Ltmp191:
    0000011b: 	leaq	(%rdi,%rcx), %rbx
    0000011f: 	movq	(%r10,%rcx), %xmm0
    00000125: 	movq	%r11, %rcx
    00000128: 	movq	(%rbx), %xmm1
    0000012c: 	andq	$-0x8, %rcx
    00000130: 	addq	%rcx, %rdx
    00000133: 	pand	%xmm1, %xmm0
    00000137: 	movq	%xmm0, (%rbx)
    0000013b: 	movq	%rcx, %rbx
    0000013e: 	negq	%rbx
    00000141: 	leaq	(%r8,%rbx,8), %r8
    00000145: 	cmpq	%r11, %rcx
    00000148: 	je	.Ltmp184 # Offset: 328
.Ltmp185:
    0000014e: 	leaq	-0x8(%r8), %r11
    00000152: 	movzbl	(%r10,%rdx), %ecx
    00000157: 	andb	%cl, (%rdi,%rdx)
    0000015a: 	leaq	0x1(%rdx), %rcx
    0000015e: 	cmpq	$0x7, %r11
    00000162: 	jbe	.Ltmp184 # Offset: 354
    00000168: 	movzbl	0x1(%r10,%rdx), %r11d
    0000016e: 	andb	%r11b, (%rdi,%rcx)
    00000172: 	leaq	-0x10(%r8), %r11
    00000176: 	leaq	0x2(%rdx), %rcx
    0000017a: 	cmpq	$0x7, %r11
    0000017e: 	jbe	.Ltmp184 # Offset: 382
    00000180: 	movzbl	0x2(%r10,%rdx), %r11d
    00000186: 	andb	%r11b, (%rdi,%rcx)
    0000018a: 	leaq	-0x18(%r8), %r11
    0000018e: 	leaq	0x3(%rdx), %rcx
    00000192: 	cmpq	$0x7, %r11
    00000196: 	jbe	.Ltmp184 # Offset: 406
    00000198: 	movzbl	0x3(%r10,%rdx), %r11d
    0000019e: 	andb	%r11b, (%rdi,%rcx)
    000001a2: 	leaq	-0x20(%r8), %r11
    000001a6: 	leaq	0x4(%rdx), %rcx
    000001aa: 	cmpq	$0x7, %r11
    000001ae: 	jbe	.Ltmp184 # Offset: 430
    000001b0: 	movzbl	0x4(%r10,%rdx), %r11d
    000001b6: 	andb	%r11b, (%rdi,%rcx)
    000001ba: 	leaq	-0x28(%r8), %r11
    000001be: 	leaq	0x5(%rdx), %rcx
    000001c2: 	cmpq	$0x7, %r11
    000001c6: 	jbe	.Ltmp184 # Offset: 454
    000001c8: 	subq	$0x30, %r8
    000001cc: 	movzbl	0x5(%r10,%rdx), %r11d
    000001d2: 	andb	%r11b, (%rdi,%rcx)
    000001d6: 	leaq	0x6(%rdx), %rcx
    000001da: 	cmpq	$0x7, %r8
    000001de: 	jbe	.Ltmp184 # Offset: 478
    000001e0: 	movzbl	0x6(%r10,%rdx), %edx
    000001e6: 	andb	%dl, (%rdi,%rcx)
.Ltmp184:
    000001e9: 	andq	$-0x8, %r9
    000001ed: 	andl	$0x7, %esi
    000001f0: 	leaq	0x8(%rax,%r9), %rax
.Ltmp188:
    000001f5: 	testq	%rsi, %rsi
    000001f8: 	je	.Ltmp186 # Offset: 504
    000001fe: 	movl	%eax, %ecx
    00000200: 	movl	$0x1, %edx
    00000205: 	movq	%rax, %r8
    00000208: 	andl	$0x7, %ecx
    0000020b: 	movl	%edx, %ebx
    0000020d: 	shrq	$0x3, %r8
    00000211: 	shll	%cl, %ebx
    00000213: 	leaq	(%rdi,%r8), %r9
    00000217: 	movl	%ebx, %ecx
    00000219: 	movzbl	(%r10,%r8), %ebx
    0000021e: 	andl	%ecx, %ebx
    00000220: 	notl	%ecx
    00000222: 	andb	(%r9), %cl
    00000225: 	movl	%ebx, %r8d
    00000228: 	orl	%r8d, %ecx
    0000022b: 	andb	(%r9), %cl
    0000022e: 	movb	%cl, (%r9)
    00000231: 	leaq	0x1(%rax), %rcx
    00000235: 	cmpq	$0x1, %rsi
    00000239: 	je	.Ltmp186 # Offset: 569
    0000023f: 	movq	%rcx, %r8
    00000242: 	movl	%edx, %ebx
    00000244: 	andl	$0x7, %ecx
    00000247: 	shrq	$0x3, %r8
    0000024b: 	shll	%cl, %ebx
    0000024d: 	movl	%ebx, %ecx
    0000024f: 	movzbl	(%r10,%r8), %ebx
    00000254: 	leaq	(%rdi,%r8), %r9
    00000258: 	andl	%ecx, %ebx
    0000025a: 	notl	%ecx
    0000025c: 	andb	(%r9), %cl
    0000025f: 	movl	%ebx, %r8d
    00000262: 	orl	%r8d, %ecx
    00000265: 	andb	(%r9), %cl
    00000268: 	movb	%cl, (%r9)
    0000026b: 	leaq	0x2(%rax), %rcx
    0000026f: 	cmpq	$0x2, %rsi
    00000273: 	je	.Ltmp186 # Offset: 627
    00000279: 	movq	%rcx, %r8
    0000027c: 	movl	%edx, %ebx
    0000027e: 	andl	$0x7, %ecx
    00000281: 	shrq	$0x3, %r8
    00000285: 	shll	%cl, %ebx
    00000287: 	movl	%ebx, %ecx
    00000289: 	movzbl	(%r10,%r8), %ebx
    0000028e: 	leaq	(%rdi,%r8), %r9
    00000292: 	andl	%ecx, %ebx
    00000294: 	notl	%ecx
    00000296: 	andb	(%r9), %cl
    00000299: 	movl	%ebx, %r8d
    0000029c: 	orl	%r8d, %ecx
    0000029f: 	andb	(%r9), %cl
    000002a2: 	movb	%cl, (%r9)
    000002a5: 	leaq	0x3(%rax), %rcx
    000002a9: 	cmpq	$0x3, %rsi
    000002ad: 	je	.Ltmp186 # Offset: 685
    000002b3: 	movq	%rcx, %r8
    000002b6: 	movl	%edx, %ebx
    000002b8: 	andl	$0x7, %ecx
    000002bb: 	shrq	$0x3, %r8
    000002bf: 	shll	%cl, %ebx
    000002c1: 	movl	%ebx, %ecx
    000002c3: 	movzbl	(%r10,%r8), %ebx
    000002c8: 	leaq	(%rdi,%r8), %r9
    000002cc: 	andl	%ecx, %ebx
    000002ce: 	notl	%ecx
    000002d0: 	andb	(%r9), %cl
    000002d3: 	movl	%ebx, %r8d
    000002d6: 	orl	%r8d, %ecx
    000002d9: 	andb	(%r9), %cl
    000002dc: 	movb	%cl, (%r9)
    000002df: 	leaq	0x4(%rax), %rcx
    000002e3: 	cmpq	$0x4, %rsi
    000002e7: 	je	.Ltmp186 # Offset: 743
    000002ed: 	movq	%rcx, %r8
    000002f0: 	movl	%edx, %ebx
    000002f2: 	andl	$0x7, %ecx
    000002f5: 	shrq	$0x3, %r8
    000002f9: 	shll	%cl, %ebx
    000002fb: 	movl	%ebx, %ecx
    000002fd: 	movzbl	(%r10,%r8), %ebx
    00000302: 	leaq	(%rdi,%r8), %r9
    00000306: 	andl	%ecx, %ebx
    00000308: 	notl	%ecx
    0000030a: 	andb	(%r9), %cl
    0000030d: 	movl	%ebx, %r8d
    00000310: 	orl	%r8d, %ecx
    00000313: 	andb	(%r9), %cl
    00000316: 	movb	%cl, (%r9)
    00000319: 	leaq	0x5(%rax), %rcx
    0000031d: 	cmpq	$0x5, %rsi
    00000321: 	je	.Ltmp186 # Offset: 801
    00000323: 	movq	%rcx, %r8
    00000326: 	movl	%edx, %ebx
    00000328: 	andl	$0x7, %ecx
    0000032b: 	shrq	$0x3, %r8
    0000032f: 	shll	%cl, %ebx
    00000331: 	movl	%ebx, %ecx
    00000333: 	movzbl	(%r10,%r8), %ebx
    00000338: 	leaq	(%rdi,%r8), %r9
    0000033c: 	andl	%ecx, %ebx
    0000033e: 	notl	%ecx
    00000340: 	andb	(%r9), %cl
    00000343: 	movl	%ebx, %r8d
    00000346: 	orl	%r8d, %ecx
    00000349: 	andb	(%r9), %cl
    0000034c: 	movb	%cl, (%r9)
    0000034f: 	leaq	0x6(%rax), %rcx
    00000353: 	cmpq	$0x6, %rsi
    00000357: 	je	.Ltmp186 # Offset: 855
    00000359: 	movq	%rcx, %rax
    0000035c: 	andl	$0x7, %ecx
    0000035f: 	shrq	$0x3, %rax
    00000363: 	shll	%cl, %edx
    00000365: 	movzbl	(%r10,%rax), %esi
    0000036a: 	addq	%rax, %rdi
    0000036d: 	andl	%edx, %esi
    0000036f: 	notl	%edx
    00000371: 	andb	(%rdi), %dl
    00000373: 	movl	%esi, %eax
    00000375: 	orl	%edx, %eax
    00000377: 	andb	(%rdi), %al
    00000379: 	movb	%al, (%rdi)
.Ltmp186:
    0000037b: 	popq	%rbx
    0000037c: 	popq	%rbp
    0000037d: 	popq	%r12
    0000037f: 	retq # Offset: 895
.Ltmp176:
    00000380: 	retq # Offset: 896
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp179:
    00000388: 	movq	%rax, %rcx
    0000038b: 	shrq	$0x3, %rcx
    0000038f: 	cmpq	$0x7, %rsi
    00000393: 	ja	.Ltmp187 # Offset: 915
    00000399: 	jmp	.Ltmp188 # Offset: 921
    0000039e: 	nop # Size: 2
.Ltmp181:
    000003a0: 	movq	%r9, %r11
    000003a3: 	shrq	$0x3, %r11
    000003a7: 	addq	%rdx, %r11
    000003aa: 	jmp	.Ltmp189 # Offset: 938
    000003ac: 	nopl	(%rax) # Size: 4
.Ltmp190:
    000003b0: 	addq	$0x1, %rdx
.Ltmp189:
    000003b4: 	movzbl	(%r10,%rcx), %r8d
    000003b9: 	andb	%r8b, (%rdi,%rcx)
    000003bd: 	movq	%rdx, %rcx
    000003c0: 	cmpq	%rdx, %r11
    000003c3: 	jne	.Ltmp190 # Offset: 963
    000003c5: 	jmp	.Ltmp184 # Offset: 965
.Ltmp182:
    000003ca: 	movq	%rsi, %r8
    000003cd: 	movq	%rcx, %rdx
    000003d0: 	jmp	.Ltmp191 # Offset: 976
.Ltmp177:
    000003d5: 	movq	%rdx, %rcx
    000003d8: 	movq	$-0x1, %rsi
    000003df: 	shrq	$0x3, %rcx
    000003e3: 	jmp	.Ltmp187 # Offset: 995
DWARF CFI Instructions:
    <empty>
End of Function "_Z19AndBitTablesHalfOptIhEvPT_PKS0_mm"

Binary Function "_Z17AndBitTablesShiftIhEvPT_PKS0_mm" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x5240
  Size        : 0x54
  MaxSize     : 0x60
  Offset      : 0x5240
  Section     : .text
  Orc Section : .local.text._Z17AndBitTablesShiftIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r9
    0000000a: 	movq	%rcx, %rdi
    0000000d: 	movq	%rdx, %rsi
    00000010: 	cmpq	%rdx, %rcx
    00000013: 	jb	.Ltmp192 # Offset: 19
    00000015: 	je	.Ltmp192 # Offset: 21
    00000017: 	movl	$0x1, %r10d
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp193:
    00000020: 	movq	%rsi, %rdx
    00000023: 	movl	%esi, %ecx
    00000025: 	movl	%r10d, %eax
    00000028: 	addq	$0x1, %rsi
    0000002c: 	shrq	$0x3, %rdx
    00000030: 	andl	$0x7, %ecx
    00000033: 	movzbl	(%r9,%rdx), %r11d
    00000038: 	shll	%cl, %eax
    0000003a: 	leaq	(%r8,%rdx), %rcx
    0000003e: 	andl	%eax, %r11d
    00000041: 	notl	%eax
    00000043: 	andb	(%rcx), %al
    00000045: 	movl	%r11d, %edx
    00000048: 	orl	%edx, %eax
    0000004a: 	andb	(%rcx), %al
    0000004c: 	movb	%al, (%rcx)
    0000004e: 	cmpq	%rsi, %rdi
    00000051: 	jne	.Ltmp193 # Offset: 81
.Ltmp192:
    00000053: 	retq # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z17AndBitTablesShiftIhEvPT_PKS0_mm"

Binary Function "_Z12AndBitTablesIhEvPT_PKS0_mm" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x52a0
  Size        : 0x52
  MaxSize     : 0x60
  Offset      : 0x52a0
  Section     : .text
  Orc Section : .local.text._Z12AndBitTablesIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r10
    00000007: 	movq	%rdi, %r9
    0000000a: 	movq	%rdx, %rsi
    0000000d: 	movq	%rcx, %r8
    00000010: 	cmpq	%rdx, %rcx
    00000013: 	jb	.Ltmp194 # Offset: 19
    00000015: 	je	.Ltmp194 # Offset: 21
    00000017: 	movl	$0x1, %r11d
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp195:
    00000020: 	movq	%rsi, %rdx
    00000023: 	movl	%esi, %ecx
    00000025: 	movl	%r11d, %eax
    00000028: 	addq	$0x1, %rsi
    0000002c: 	shrq	$0x3, %rdx
    00000030: 	andl	$0x7, %ecx
    00000033: 	shll	%cl, %eax
    00000035: 	movzbl	(%r10,%rdx), %ecx
    0000003a: 	leaq	(%r9,%rdx), %rdi
    0000003e: 	andl	%eax, %ecx
    00000040: 	notl	%eax
    00000042: 	andb	(%rdi), %al
    00000044: 	movl	%ecx, %edx
    00000046: 	orl	%edx, %eax
    00000048: 	andb	(%rdi), %al
    0000004a: 	movb	%al, (%rdi)
    0000004c: 	cmpq	%rsi, %r8
    0000004f: 	jne	.Ltmp195 # Offset: 79
.Ltmp194:
    00000051: 	retq # Offset: 81
DWARF CFI Instructions:
    <empty>
End of Function "_Z12AndBitTablesIhEvPT_PKS0_mm"

Binary Function "_Z18OrBitTablesHalfOptIhEvPT_PKS0_mm" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x5300
  Size        : 0x358
  MaxSize     : 0x360
  Offset      : 0x5300
  Section     : .text
  Orc Section : .local.text._Z18OrBitTablesHalfOptIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp196 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %rax
    00000015: 	movq	%rsi, %r8
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rdx
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp197 # Offset: 30
    00000024: 	movl	$0x1, %r9d
    0000002a: 	testb	$0x7, %al
    0000002c: 	jne	.Ltmp198 # Offset: 44
    0000002e: 	jmp	.Ltmp199 # Offset: 46
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp200:
    00000038: 	testb	$0x7, %al
    0000003a: 	je	.Ltmp199 # Offset: 58
.Ltmp198:
    00000040: 	movl	%eax, %ecx
    00000042: 	movq	%rax, %rsi
    00000045: 	movl	%r9d, %ebx
    00000048: 	addq	$0x1, %rax
    0000004c: 	andl	$0x7, %ecx
    0000004f: 	shrq	$0x3, %rsi
    00000053: 	shll	%cl, %ebx
    00000055: 	movl	%ebx, %ecx
    00000057: 	andb	(%r8,%rsi), %cl
    0000005b: 	orb	%cl, (%rdi,%rsi)
    0000005e: 	subq	$0x1, %rdx
    00000062: 	jae	.Ltmp200 # Offset: 98
    00000064: 	movq	%rax, %rsi
    00000067: 	shrq	$0x3, %rsi
.Ltmp207:
    0000006b: 	leaq	(%rdi,%rsi), %r9
    0000006f: 	leaq	0x1(%rsi), %rcx
    00000073: 	leaq	(%r8,%rcx), %rbx
    00000077: 	movq	%r9, %r11
    0000007a: 	leaq	-0x8(%rdx), %r10
    0000007e: 	subq	%rbx, %r11
    00000081: 	cmpq	$0xe, %r11
    00000085: 	jbe	.Ltmp201 # Offset: 133
    0000008b: 	cmpq	$0x37, %r10
    0000008f: 	jbe	.Ltmp201 # Offset: 143
    00000095: 	movq	%r10, %rbp
    00000098: 	shrq	$0x3, %rbp
    0000009c: 	leaq	0x1(%rbp), %r11
    000000a0: 	cmpq	$0x77, %r10
    000000a4: 	jbe	.Ltmp202 # Offset: 164
    000000aa: 	movq	%r11, %rbx
    000000ad: 	leaq	(%r8,%rsi), %r12
    000000b1: 	xorl	%ecx, %ecx
    000000b3: 	shrq	$0x4, %rbx
    000000b7: 	shlq	$0x4, %rbx
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp203:
    000000c0: 	movdqu	(%r12,%rcx), %xmm0
    000000c6: 	movdqu	(%r9,%rcx), %xmm2
    000000cc: 	por	%xmm2, %xmm0
    000000d0: 	movups	%xmm0, (%r9,%rcx)
    000000d5: 	addq	$0x10, %rcx
    000000d9: 	cmpq	%rcx, %rbx
    000000dc: 	jne	.Ltmp203 # Offset: 220
    000000de: 	movq	%r11, %rbx
    000000e1: 	andq	$-0x10, %rbx
    000000e5: 	movq	%rbx, %rcx
    000000e8: 	addq	%rbx, %rsi
    000000eb: 	negq	%rcx
    000000ee: 	leaq	(%rdx,%rcx,8), %r9
    000000f2: 	movq	%rsi, %rcx
    000000f5: 	cmpq	%r11, %rbx
    000000f8: 	je	.Ltmp204 # Offset: 248
    000000fe: 	subq	%rbx, %rbp
    00000101: 	leaq	0x1(%rbp), %r11
    00000105: 	cmpq	$0x6, %rbp
    00000109: 	jbe	.Ltmp205 # Offset: 265
.Ltmp211:
    0000010b: 	leaq	(%rdi,%rsi), %rbx
    0000010f: 	movq	(%r8,%rsi), %xmm0
    00000115: 	movq	%r11, %rsi
    00000118: 	movq	(%rbx), %xmm1
    0000011c: 	andq	$-0x8, %rsi
    00000120: 	addq	%rsi, %rcx
    00000123: 	por	%xmm1, %xmm0
    00000127: 	movq	%xmm0, (%rbx)
    0000012b: 	movq	%rsi, %rbx
    0000012e: 	negq	%rbx
    00000131: 	leaq	(%r9,%rbx,8), %r9
    00000135: 	cmpq	%rsi, %r11
    00000138: 	je	.Ltmp204 # Offset: 312
.Ltmp205:
    0000013e: 	leaq	-0x8(%r9), %r11
    00000142: 	movzbl	(%r8,%rcx), %esi
    00000147: 	orb	%sil, (%rdi,%rcx)
    0000014b: 	leaq	0x1(%rcx), %rsi
    0000014f: 	cmpq	$0x7, %r11
    00000153: 	jbe	.Ltmp204 # Offset: 339
    00000159: 	movzbl	0x1(%r8,%rcx), %r11d
    0000015f: 	orb	%r11b, (%rdi,%rsi)
    00000163: 	leaq	-0x10(%r9), %r11
    00000167: 	leaq	0x2(%rcx), %rsi
    0000016b: 	cmpq	$0x7, %r11
    0000016f: 	jbe	.Ltmp204 # Offset: 367
    00000171: 	movzbl	0x2(%r8,%rcx), %r11d
    00000177: 	orb	%r11b, (%rdi,%rsi)
    0000017b: 	leaq	-0x18(%r9), %r11
    0000017f: 	leaq	0x3(%rcx), %rsi
    00000183: 	cmpq	$0x7, %r11
    00000187: 	jbe	.Ltmp204 # Offset: 391
    00000189: 	movzbl	0x3(%r8,%rcx), %r11d
    0000018f: 	orb	%r11b, (%rdi,%rsi)
    00000193: 	leaq	-0x20(%r9), %r11
    00000197: 	leaq	0x4(%rcx), %rsi
    0000019b: 	cmpq	$0x7, %r11
    0000019f: 	jbe	.Ltmp204 # Offset: 415
    000001a1: 	movzbl	0x4(%r8,%rcx), %r11d
    000001a7: 	orb	%r11b, (%rdi,%rsi)
    000001ab: 	leaq	-0x28(%r9), %r11
    000001af: 	leaq	0x5(%rcx), %rsi
    000001b3: 	cmpq	$0x7, %r11
    000001b7: 	jbe	.Ltmp204 # Offset: 439
    000001b9: 	subq	$0x30, %r9
    000001bd: 	movzbl	0x5(%r8,%rcx), %r11d
    000001c3: 	orb	%r11b, (%rdi,%rsi)
    000001c7: 	leaq	0x6(%rcx), %rsi
    000001cb: 	cmpq	$0x7, %r9
    000001cf: 	jbe	.Ltmp204 # Offset: 463
    000001d1: 	movzbl	0x6(%r8,%rcx), %ecx
    000001d7: 	orb	%cl, (%rdi,%rsi)
.Ltmp204:
    000001da: 	andq	$-0x8, %r10
    000001de: 	andl	$0x7, %edx
    000001e1: 	leaq	0x8(%rax,%r10), %rax
.Ltmp208:
    000001e6: 	testq	%rdx, %rdx
    000001e9: 	je	.Ltmp206 # Offset: 489
    000001ef: 	movl	%eax, %ecx
    000001f1: 	movl	$0x1, %esi
    000001f6: 	movq	%rax, %r9
    000001f9: 	andl	$0x7, %ecx
    000001fc: 	movl	%esi, %ebx
    000001fe: 	shrq	$0x3, %r9
    00000202: 	shll	%cl, %ebx
    00000204: 	movl	%ebx, %ecx
    00000206: 	andb	(%r8,%r9), %cl
    0000020a: 	orb	%cl, (%rdi,%r9)
    0000020e: 	leaq	0x1(%rax), %rcx
    00000212: 	cmpq	$0x1, %rdx
    00000216: 	je	.Ltmp206 # Offset: 534
    0000021c: 	movq	%rcx, %r9
    0000021f: 	movl	%esi, %ebx
    00000221: 	andl	$0x7, %ecx
    00000224: 	shrq	$0x3, %r9
    00000228: 	shll	%cl, %ebx
    0000022a: 	movl	%ebx, %ecx
    0000022c: 	andb	(%r8,%r9), %cl
    00000230: 	orb	%cl, (%rdi,%r9)
    00000234: 	leaq	0x2(%rax), %rcx
    00000238: 	cmpq	$0x2, %rdx
    0000023c: 	je	.Ltmp206 # Offset: 572
    00000242: 	movq	%rcx, %r9
    00000245: 	movl	%esi, %ebx
    00000247: 	andl	$0x7, %ecx
    0000024a: 	shrq	$0x3, %r9
    0000024e: 	shll	%cl, %ebx
    00000250: 	movl	%ebx, %ecx
    00000252: 	andb	(%r8,%r9), %cl
    00000256: 	orb	%cl, (%rdi,%r9)
    0000025a: 	leaq	0x3(%rax), %rcx
    0000025e: 	cmpq	$0x3, %rdx
    00000262: 	je	.Ltmp206 # Offset: 610
    00000264: 	movq	%rcx, %r9
    00000267: 	movl	%esi, %ebx
    00000269: 	andl	$0x7, %ecx
    0000026c: 	shrq	$0x3, %r9
    00000270: 	shll	%cl, %ebx
    00000272: 	movl	%ebx, %ecx
    00000274: 	andb	(%r8,%r9), %cl
    00000278: 	orb	%cl, (%rdi,%r9)
    0000027c: 	leaq	0x4(%rax), %rcx
    00000280: 	cmpq	$0x4, %rdx
    00000284: 	je	.Ltmp206 # Offset: 644
    00000286: 	movq	%rcx, %r9
    00000289: 	movl	%esi, %ebx
    0000028b: 	andl	$0x7, %ecx
    0000028e: 	shrq	$0x3, %r9
    00000292: 	shll	%cl, %ebx
    00000294: 	movl	%ebx, %ecx
    00000296: 	andb	(%r8,%r9), %cl
    0000029a: 	orb	%cl, (%rdi,%r9)
    0000029e: 	leaq	0x5(%rax), %rcx
    000002a2: 	cmpq	$0x5, %rdx
    000002a6: 	je	.Ltmp206 # Offset: 678
    000002a8: 	movq	%rcx, %r9
    000002ab: 	movl	%esi, %ebx
    000002ad: 	andl	$0x7, %ecx
    000002b0: 	shrq	$0x3, %r9
    000002b4: 	shll	%cl, %ebx
    000002b6: 	movl	%ebx, %ecx
    000002b8: 	andb	(%r8,%r9), %cl
    000002bc: 	orb	%cl, (%rdi,%r9)
    000002c0: 	leaq	0x6(%rax), %rcx
    000002c4: 	cmpq	$0x6, %rdx
    000002c8: 	je	.Ltmp206 # Offset: 712
    000002ca: 	movq	%rcx, %rax
    000002cd: 	andl	$0x7, %ecx
    000002d0: 	shrq	$0x3, %rax
    000002d4: 	shll	%cl, %esi
    000002d6: 	andb	(%r8,%rax), %sil
    000002da: 	orb	%sil, (%rdi,%rax)
.Ltmp206:
    000002de: 	popq	%rbx
    000002df: 	popq	%rbp
    000002e0: 	popq	%r12
    000002e2: 	retq # Offset: 738
    000002e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp196:
    000002e8: 	retq # Offset: 744
    000002e9: 	nopl	(%rax) # Size: 7
.Ltmp199:
    000002f0: 	movq	%rax, %rsi
    000002f3: 	shrq	$0x3, %rsi
    000002f7: 	cmpq	$0x7, %rdx
    000002fb: 	ja	.Ltmp207 # Offset: 763
    00000301: 	jmp	.Ltmp208 # Offset: 769
    00000306: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp201:
    00000310: 	movq	%r10, %r11
    00000313: 	shrq	$0x3, %r11
    00000317: 	addq	%rcx, %r11
    0000031a: 	jmp	.Ltmp209 # Offset: 794
    0000031c: 	nopl	(%rax) # Size: 4
.Ltmp210:
    00000320: 	addq	$0x1, %rcx
.Ltmp209:
    00000324: 	movzbl	(%r8,%rsi), %r9d
    00000329: 	orb	%r9b, (%rdi,%rsi)
    0000032d: 	movq	%rcx, %rsi
    00000330: 	cmpq	%rcx, %r11
    00000333: 	jne	.Ltmp210 # Offset: 819
    00000335: 	jmp	.Ltmp204 # Offset: 821
.Ltmp202:
    0000033a: 	movq	%rdx, %r9
    0000033d: 	movq	%rsi, %rcx
    00000340: 	jmp	.Ltmp211 # Offset: 832
.Ltmp197:
    00000345: 	movq	%rax, %rsi
    00000348: 	movq	$-0x1, %rdx
    0000034f: 	shrq	$0x3, %rsi
    00000353: 	jmp	.Ltmp207 # Offset: 851
DWARF CFI Instructions:
    <empty>
End of Function "_Z18OrBitTablesHalfOptIhEvPT_PKS0_mm"

Binary Function "_Z16OrBitTablesShiftIhEvPT_PKS0_mm" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x5660
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x5660
  Section     : .text
  Orc Section : .local.text._Z16OrBitTablesShiftIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp212 # Offset: 10
    0000000c: 	je	.Ltmp212 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp213:
    00000018: 	movl	%edx, %ecx
    0000001a: 	movq	%rdx, %rax
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	andl	$0x7, %ecx
    00000027: 	shrq	$0x3, %rax
    0000002b: 	shll	%cl, %r10d
    0000002e: 	movl	%r10d, %ecx
    00000031: 	andb	(%rsi,%rax), %cl
    00000034: 	orb	%cl, (%rdi,%rax)
    00000037: 	cmpq	%rdx, %r8
    0000003a: 	jne	.Ltmp213 # Offset: 58
.Ltmp212:
    0000003c: 	retq # Offset: 60
DWARF CFI Instructions:
    <empty>
End of Function "_Z16OrBitTablesShiftIhEvPT_PKS0_mm"

Binary Function "_Z11OrBitTablesIhEvPT_PKS0_mm" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x56a0
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x56a0
  Section     : .text
  Orc Section : .local.text._Z11OrBitTablesIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp214 # Offset: 10
    0000000c: 	je	.Ltmp214 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp215:
    00000018: 	movl	%edx, %ecx
    0000001a: 	movq	%rdx, %rax
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	andl	$0x7, %ecx
    00000027: 	shrq	$0x3, %rax
    0000002b: 	shll	%cl, %r10d
    0000002e: 	movl	%r10d, %ecx
    00000031: 	andb	(%rsi,%rax), %cl
    00000034: 	orb	%cl, (%rdi,%rax)
    00000037: 	cmpq	%rdx, %r8
    0000003a: 	jne	.Ltmp215 # Offset: 58
.Ltmp214:
    0000003c: 	retq # Offset: 60
DWARF CFI Instructions:
    <empty>
End of Function "_Z11OrBitTablesIhEvPT_PKS0_mm"

Binary Function "_Z19XorBitTablesHalfOptIhEvPT_PKS0_mm" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x56e0
  Size        : 0x358
  MaxSize     : 0x360
  Offset      : 0x56e0
  Section     : .text
  Orc Section : .local.text._Z19XorBitTablesHalfOptIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp216 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %rax
    00000015: 	movq	%rsi, %r8
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rdx
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp217 # Offset: 30
    00000024: 	movl	$0x1, %r9d
    0000002a: 	testb	$0x7, %al
    0000002c: 	jne	.Ltmp218 # Offset: 44
    0000002e: 	jmp	.Ltmp219 # Offset: 46
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp220:
    00000038: 	testb	$0x7, %al
    0000003a: 	je	.Ltmp219 # Offset: 58
.Ltmp218:
    00000040: 	movl	%eax, %ecx
    00000042: 	movq	%rax, %rsi
    00000045: 	movl	%r9d, %ebx
    00000048: 	addq	$0x1, %rax
    0000004c: 	andl	$0x7, %ecx
    0000004f: 	shrq	$0x3, %rsi
    00000053: 	shll	%cl, %ebx
    00000055: 	movl	%ebx, %ecx
    00000057: 	andb	(%r8,%rsi), %cl
    0000005b: 	xorb	%cl, (%rdi,%rsi)
    0000005e: 	subq	$0x1, %rdx
    00000062: 	jae	.Ltmp220 # Offset: 98
    00000064: 	movq	%rax, %rsi
    00000067: 	shrq	$0x3, %rsi
.Ltmp227:
    0000006b: 	leaq	(%rdi,%rsi), %r9
    0000006f: 	leaq	0x1(%rsi), %rcx
    00000073: 	leaq	(%r8,%rcx), %rbx
    00000077: 	movq	%r9, %r11
    0000007a: 	leaq	-0x8(%rdx), %r10
    0000007e: 	subq	%rbx, %r11
    00000081: 	cmpq	$0xe, %r11
    00000085: 	jbe	.Ltmp221 # Offset: 133
    0000008b: 	cmpq	$0x37, %r10
    0000008f: 	jbe	.Ltmp221 # Offset: 143
    00000095: 	movq	%r10, %rbp
    00000098: 	shrq	$0x3, %rbp
    0000009c: 	leaq	0x1(%rbp), %r11
    000000a0: 	cmpq	$0x77, %r10
    000000a4: 	jbe	.Ltmp222 # Offset: 164
    000000aa: 	movq	%r11, %rbx
    000000ad: 	leaq	(%r8,%rsi), %r12
    000000b1: 	xorl	%ecx, %ecx
    000000b3: 	shrq	$0x4, %rbx
    000000b7: 	shlq	$0x4, %rbx
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp223:
    000000c0: 	movdqu	(%r12,%rcx), %xmm0
    000000c6: 	movdqu	(%r9,%rcx), %xmm2
    000000cc: 	pxor	%xmm2, %xmm0
    000000d0: 	movups	%xmm0, (%r9,%rcx)
    000000d5: 	addq	$0x10, %rcx
    000000d9: 	cmpq	%rcx, %rbx
    000000dc: 	jne	.Ltmp223 # Offset: 220
    000000de: 	movq	%r11, %rbx
    000000e1: 	andq	$-0x10, %rbx
    000000e5: 	movq	%rbx, %rcx
    000000e8: 	addq	%rbx, %rsi
    000000eb: 	negq	%rcx
    000000ee: 	leaq	(%rdx,%rcx,8), %r9
    000000f2: 	movq	%rsi, %rcx
    000000f5: 	cmpq	%r11, %rbx
    000000f8: 	je	.Ltmp224 # Offset: 248
    000000fe: 	subq	%rbx, %rbp
    00000101: 	leaq	0x1(%rbp), %r11
    00000105: 	cmpq	$0x6, %rbp
    00000109: 	jbe	.Ltmp225 # Offset: 265
.Ltmp231:
    0000010b: 	leaq	(%rdi,%rsi), %rbx
    0000010f: 	movq	(%r8,%rsi), %xmm0
    00000115: 	movq	%r11, %rsi
    00000118: 	movq	(%rbx), %xmm1
    0000011c: 	andq	$-0x8, %rsi
    00000120: 	addq	%rsi, %rcx
    00000123: 	pxor	%xmm1, %xmm0
    00000127: 	movq	%xmm0, (%rbx)
    0000012b: 	movq	%rsi, %rbx
    0000012e: 	negq	%rbx
    00000131: 	leaq	(%r9,%rbx,8), %r9
    00000135: 	cmpq	%rsi, %r11
    00000138: 	je	.Ltmp224 # Offset: 312
.Ltmp225:
    0000013e: 	leaq	-0x8(%r9), %r11
    00000142: 	movzbl	(%r8,%rcx), %esi
    00000147: 	xorb	%sil, (%rdi,%rcx)
    0000014b: 	leaq	0x1(%rcx), %rsi
    0000014f: 	cmpq	$0x7, %r11
    00000153: 	jbe	.Ltmp224 # Offset: 339
    00000159: 	movzbl	0x1(%r8,%rcx), %r11d
    0000015f: 	xorb	%r11b, (%rdi,%rsi)
    00000163: 	leaq	-0x10(%r9), %r11
    00000167: 	leaq	0x2(%rcx), %rsi
    0000016b: 	cmpq	$0x7, %r11
    0000016f: 	jbe	.Ltmp224 # Offset: 367
    00000171: 	movzbl	0x2(%r8,%rcx), %r11d
    00000177: 	xorb	%r11b, (%rdi,%rsi)
    0000017b: 	leaq	-0x18(%r9), %r11
    0000017f: 	leaq	0x3(%rcx), %rsi
    00000183: 	cmpq	$0x7, %r11
    00000187: 	jbe	.Ltmp224 # Offset: 391
    00000189: 	movzbl	0x3(%r8,%rcx), %r11d
    0000018f: 	xorb	%r11b, (%rdi,%rsi)
    00000193: 	leaq	-0x20(%r9), %r11
    00000197: 	leaq	0x4(%rcx), %rsi
    0000019b: 	cmpq	$0x7, %r11
    0000019f: 	jbe	.Ltmp224 # Offset: 415
    000001a1: 	movzbl	0x4(%r8,%rcx), %r11d
    000001a7: 	xorb	%r11b, (%rdi,%rsi)
    000001ab: 	leaq	-0x28(%r9), %r11
    000001af: 	leaq	0x5(%rcx), %rsi
    000001b3: 	cmpq	$0x7, %r11
    000001b7: 	jbe	.Ltmp224 # Offset: 439
    000001b9: 	subq	$0x30, %r9
    000001bd: 	movzbl	0x5(%r8,%rcx), %r11d
    000001c3: 	xorb	%r11b, (%rdi,%rsi)
    000001c7: 	leaq	0x6(%rcx), %rsi
    000001cb: 	cmpq	$0x7, %r9
    000001cf: 	jbe	.Ltmp224 # Offset: 463
    000001d1: 	movzbl	0x6(%r8,%rcx), %ecx
    000001d7: 	xorb	%cl, (%rdi,%rsi)
.Ltmp224:
    000001da: 	andq	$-0x8, %r10
    000001de: 	andl	$0x7, %edx
    000001e1: 	leaq	0x8(%rax,%r10), %rax
.Ltmp228:
    000001e6: 	testq	%rdx, %rdx
    000001e9: 	je	.Ltmp226 # Offset: 489
    000001ef: 	movl	%eax, %ecx
    000001f1: 	movl	$0x1, %esi
    000001f6: 	movq	%rax, %r9
    000001f9: 	andl	$0x7, %ecx
    000001fc: 	movl	%esi, %ebx
    000001fe: 	shrq	$0x3, %r9
    00000202: 	shll	%cl, %ebx
    00000204: 	movl	%ebx, %ecx
    00000206: 	andb	(%r8,%r9), %cl
    0000020a: 	xorb	%cl, (%rdi,%r9)
    0000020e: 	leaq	0x1(%rax), %rcx
    00000212: 	cmpq	$0x1, %rdx
    00000216: 	je	.Ltmp226 # Offset: 534
    0000021c: 	movq	%rcx, %r9
    0000021f: 	movl	%esi, %ebx
    00000221: 	andl	$0x7, %ecx
    00000224: 	shrq	$0x3, %r9
    00000228: 	shll	%cl, %ebx
    0000022a: 	movl	%ebx, %ecx
    0000022c: 	andb	(%r8,%r9), %cl
    00000230: 	xorb	%cl, (%rdi,%r9)
    00000234: 	leaq	0x2(%rax), %rcx
    00000238: 	cmpq	$0x2, %rdx
    0000023c: 	je	.Ltmp226 # Offset: 572
    00000242: 	movq	%rcx, %r9
    00000245: 	movl	%esi, %ebx
    00000247: 	andl	$0x7, %ecx
    0000024a: 	shrq	$0x3, %r9
    0000024e: 	shll	%cl, %ebx
    00000250: 	movl	%ebx, %ecx
    00000252: 	andb	(%r8,%r9), %cl
    00000256: 	xorb	%cl, (%rdi,%r9)
    0000025a: 	leaq	0x3(%rax), %rcx
    0000025e: 	cmpq	$0x3, %rdx
    00000262: 	je	.Ltmp226 # Offset: 610
    00000264: 	movq	%rcx, %r9
    00000267: 	movl	%esi, %ebx
    00000269: 	andl	$0x7, %ecx
    0000026c: 	shrq	$0x3, %r9
    00000270: 	shll	%cl, %ebx
    00000272: 	movl	%ebx, %ecx
    00000274: 	andb	(%r8,%r9), %cl
    00000278: 	xorb	%cl, (%rdi,%r9)
    0000027c: 	leaq	0x4(%rax), %rcx
    00000280: 	cmpq	$0x4, %rdx
    00000284: 	je	.Ltmp226 # Offset: 644
    00000286: 	movq	%rcx, %r9
    00000289: 	movl	%esi, %ebx
    0000028b: 	andl	$0x7, %ecx
    0000028e: 	shrq	$0x3, %r9
    00000292: 	shll	%cl, %ebx
    00000294: 	movl	%ebx, %ecx
    00000296: 	andb	(%r8,%r9), %cl
    0000029a: 	xorb	%cl, (%rdi,%r9)
    0000029e: 	leaq	0x5(%rax), %rcx
    000002a2: 	cmpq	$0x5, %rdx
    000002a6: 	je	.Ltmp226 # Offset: 678
    000002a8: 	movq	%rcx, %r9
    000002ab: 	movl	%esi, %ebx
    000002ad: 	andl	$0x7, %ecx
    000002b0: 	shrq	$0x3, %r9
    000002b4: 	shll	%cl, %ebx
    000002b6: 	movl	%ebx, %ecx
    000002b8: 	andb	(%r8,%r9), %cl
    000002bc: 	xorb	%cl, (%rdi,%r9)
    000002c0: 	leaq	0x6(%rax), %rcx
    000002c4: 	cmpq	$0x6, %rdx
    000002c8: 	je	.Ltmp226 # Offset: 712
    000002ca: 	movq	%rcx, %rax
    000002cd: 	andl	$0x7, %ecx
    000002d0: 	shrq	$0x3, %rax
    000002d4: 	shll	%cl, %esi
    000002d6: 	andb	(%r8,%rax), %sil
    000002da: 	xorb	%sil, (%rdi,%rax)
.Ltmp226:
    000002de: 	popq	%rbx
    000002df: 	popq	%rbp
    000002e0: 	popq	%r12
    000002e2: 	retq # Offset: 738
    000002e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp216:
    000002e8: 	retq # Offset: 744
    000002e9: 	nopl	(%rax) # Size: 7
.Ltmp219:
    000002f0: 	movq	%rax, %rsi
    000002f3: 	shrq	$0x3, %rsi
    000002f7: 	cmpq	$0x7, %rdx
    000002fb: 	ja	.Ltmp227 # Offset: 763
    00000301: 	jmp	.Ltmp228 # Offset: 769
    00000306: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp221:
    00000310: 	movq	%r10, %r11
    00000313: 	shrq	$0x3, %r11
    00000317: 	addq	%rcx, %r11
    0000031a: 	jmp	.Ltmp229 # Offset: 794
    0000031c: 	nopl	(%rax) # Size: 4
.Ltmp230:
    00000320: 	addq	$0x1, %rcx
.Ltmp229:
    00000324: 	movzbl	(%r8,%rsi), %r9d
    00000329: 	xorb	%r9b, (%rdi,%rsi)
    0000032d: 	movq	%rcx, %rsi
    00000330: 	cmpq	%rcx, %r11
    00000333: 	jne	.Ltmp230 # Offset: 819
    00000335: 	jmp	.Ltmp224 # Offset: 821
.Ltmp222:
    0000033a: 	movq	%rdx, %r9
    0000033d: 	movq	%rsi, %rcx
    00000340: 	jmp	.Ltmp231 # Offset: 832
.Ltmp217:
    00000345: 	movq	%rax, %rsi
    00000348: 	movq	$-0x1, %rdx
    0000034f: 	shrq	$0x3, %rsi
    00000353: 	jmp	.Ltmp227 # Offset: 851
DWARF CFI Instructions:
    <empty>
End of Function "_Z19XorBitTablesHalfOptIhEvPT_PKS0_mm"

Binary Function "_Z17XorBitTablesShiftIhEvPT_PKS0_mm" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x5a40
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x5a40
  Section     : .text
  Orc Section : .local.text._Z17XorBitTablesShiftIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp232 # Offset: 10
    0000000c: 	je	.Ltmp232 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp233:
    00000018: 	movl	%edx, %ecx
    0000001a: 	movq	%rdx, %rax
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	andl	$0x7, %ecx
    00000027: 	shrq	$0x3, %rax
    0000002b: 	shll	%cl, %r10d
    0000002e: 	movl	%r10d, %ecx
    00000031: 	andb	(%rsi,%rax), %cl
    00000034: 	xorb	%cl, (%rdi,%rax)
    00000037: 	cmpq	%rdx, %r8
    0000003a: 	jne	.Ltmp233 # Offset: 58
.Ltmp232:
    0000003c: 	retq # Offset: 60
DWARF CFI Instructions:
    <empty>
End of Function "_Z17XorBitTablesShiftIhEvPT_PKS0_mm"

Binary Function "_Z12XorBitTablesIhEvPT_PKS0_mm" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x5a80
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x5a80
  Section     : .text
  Orc Section : .local.text._Z12XorBitTablesIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp234 # Offset: 10
    0000000c: 	je	.Ltmp234 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp235:
    00000018: 	movl	%edx, %ecx
    0000001a: 	movq	%rdx, %rax
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	andl	$0x7, %ecx
    00000027: 	shrq	$0x3, %rax
    0000002b: 	shll	%cl, %r10d
    0000002e: 	movl	%r10d, %ecx
    00000031: 	andb	(%rsi,%rax), %cl
    00000034: 	xorb	%cl, (%rdi,%rax)
    00000037: 	cmpq	%rdx, %r8
    0000003a: 	jne	.Ltmp235 # Offset: 58
.Ltmp234:
    0000003c: 	retq # Offset: 60
DWARF CFI Instructions:
    <empty>
End of Function "_Z12XorBitTablesIhEvPT_PKS0_mm"

Binary Function "_Z29AndComplimentBitTablesHalfOptIhEvPT_PKS0_mm" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x5ac0
  Size        : 0x3fb
  MaxSize     : 0x400
  Offset      : 0x5ac0
  Section     : .text
  Orc Section : .local.text._Z29AndComplimentBitTablesHalfOptIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp236 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r9
    00000015: 	pushq	%rbp
    00000016: 	leaq	-0x1(%rcx), %rsi
    0000001a: 	pushq	%rbx
    0000001b: 	je	.Ltmp237 # Offset: 27
    00000021: 	movl	$0x1, %r10d
    00000027: 	testb	$0x7, %dl
    0000002a: 	jne	.Ltmp238 # Offset: 42
    0000002c: 	jmp	.Ltmp239 # Offset: 44
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp240:
    00000038: 	testb	$0x7, %dl
    0000003b: 	je	.Ltmp239 # Offset: 59
.Ltmp238:
    00000041: 	movq	%rdx, %rax
    00000044: 	movl	%edx, %ecx
    00000046: 	movl	%r10d, %ebx
    00000049: 	addq	$0x1, %rdx
    0000004d: 	shrq	$0x3, %rax
    00000051: 	andl	$0x7, %ecx
    00000054: 	leaq	(%rdi,%rax), %r8
    00000058: 	movzbl	(%r9,%rax), %eax
    0000005d: 	shll	%cl, %ebx
    0000005f: 	movl	%ebx, %ecx
    00000061: 	notl	%eax
    00000063: 	notl	%ecx
    00000065: 	andb	(%r8), %cl
    00000068: 	andl	%ebx, %eax
    0000006a: 	orl	%ecx, %eax
    0000006c: 	andb	(%r8), %al
    0000006f: 	movb	%al, (%r8)
    00000072: 	subq	$0x1, %rsi
    00000076: 	jae	.Ltmp240 # Offset: 118
    00000078: 	movq	%rdx, %rcx
    0000007b: 	shrq	$0x3, %rcx
.Ltmp247:
    0000007f: 	leaq	(%rdi,%rcx), %r8
    00000083: 	leaq	0x1(%rcx), %rax
    00000087: 	leaq	(%r9,%rax), %rbx
    0000008b: 	movq	%r8, %r11
    0000008e: 	leaq	-0x8(%rsi), %r10
    00000092: 	subq	%rbx, %r11
    00000095: 	cmpq	$0xe, %r11
    00000099: 	jbe	.Ltmp241 # Offset: 153
    0000009f: 	cmpq	$0x37, %r10
    000000a3: 	jbe	.Ltmp241 # Offset: 163
    000000a9: 	movq	%r10, %rbp
    000000ac: 	shrq	$0x3, %rbp
    000000b0: 	leaq	0x1(%rbp), %r11
    000000b4: 	cmpq	$0x77, %r10
    000000b8: 	jbe	.Ltmp242 # Offset: 184
    000000be: 	movq	%r11, %rbx
    000000c1: 	leaq	(%r9,%rcx), %r12
    000000c5: 	xorl	%eax, %eax
    000000c7: 	shrq	$0x4, %rbx
    000000cb: 	shlq	$0x4, %rbx
    000000cf: 	nop # Size: 1
.Ltmp243:
    000000d0: 	movdqu	(%r12,%rax), %xmm0
    000000d6: 	movdqu	(%r8,%rax), %xmm2
    000000dc: 	pandn	%xmm2, %xmm0
    000000e0: 	movups	%xmm0, (%r8,%rax)
    000000e5: 	addq	$0x10, %rax
    000000e9: 	cmpq	%rax, %rbx
    000000ec: 	jne	.Ltmp243 # Offset: 236
    000000ee: 	movq	%r11, %rbx
    000000f1: 	andq	$-0x10, %rbx
    000000f5: 	movq	%rbx, %rax
    000000f8: 	addq	%rbx, %rcx
    000000fb: 	negq	%rax
    000000fe: 	leaq	(%rsi,%rax,8), %r8
    00000102: 	movq	%rcx, %rax
    00000105: 	cmpq	%r11, %rbx
    00000108: 	je	.Ltmp244 # Offset: 264
    0000010e: 	subq	%rbx, %rbp
    00000111: 	leaq	0x1(%rbp), %r11
    00000115: 	cmpq	$0x6, %rbp
    00000119: 	jbe	.Ltmp245 # Offset: 281
.Ltmp251:
    0000011b: 	leaq	(%rdi,%rcx), %rbx
    0000011f: 	movq	(%r9,%rcx), %xmm0
    00000125: 	movq	%r11, %rcx
    00000128: 	movq	(%rbx), %xmm1
    0000012c: 	andq	$-0x8, %rcx
    00000130: 	addq	%rcx, %rax
    00000133: 	pandn	%xmm1, %xmm0
    00000137: 	movq	%xmm0, (%rbx)
    0000013b: 	movq	%rcx, %rbx
    0000013e: 	negq	%rbx
    00000141: 	leaq	(%r8,%rbx,8), %r8
    00000145: 	cmpq	%r11, %rcx
    00000148: 	je	.Ltmp244 # Offset: 328
.Ltmp245:
    0000014e: 	movzbl	(%r9,%rax), %ecx
    00000153: 	leaq	0x1(%rax), %r11
    00000157: 	notl	%ecx
    00000159: 	andb	%cl, (%rdi,%rax)
    0000015c: 	leaq	-0x8(%r8), %rcx
    00000160: 	cmpq	$0x7, %rcx
    00000164: 	jbe	.Ltmp244 # Offset: 356
    0000016a: 	movzbl	0x1(%r9,%rax), %ecx
    00000170: 	notl	%ecx
    00000172: 	andb	%cl, (%rdi,%r11)
    00000176: 	leaq	-0x10(%r8), %rcx
    0000017a: 	leaq	0x2(%rax), %r11
    0000017e: 	cmpq	$0x7, %rcx
    00000182: 	jbe	.Ltmp244 # Offset: 386
    00000184: 	movzbl	0x2(%r9,%rax), %ecx
    0000018a: 	notl	%ecx
    0000018c: 	andb	%cl, (%rdi,%r11)
    00000190: 	leaq	-0x18(%r8), %rcx
    00000194: 	leaq	0x3(%rax), %r11
    00000198: 	cmpq	$0x7, %rcx
    0000019c: 	jbe	.Ltmp244 # Offset: 412
    0000019e: 	movzbl	0x3(%r9,%rax), %ecx
    000001a4: 	notl	%ecx
    000001a6: 	andb	%cl, (%rdi,%r11)
    000001aa: 	leaq	-0x20(%r8), %rcx
    000001ae: 	leaq	0x4(%rax), %r11
    000001b2: 	cmpq	$0x7, %rcx
    000001b6: 	jbe	.Ltmp244 # Offset: 438
    000001b8: 	movzbl	0x4(%r9,%rax), %ecx
    000001be: 	notl	%ecx
    000001c0: 	andb	%cl, (%rdi,%r11)
    000001c4: 	leaq	-0x28(%r8), %rcx
    000001c8: 	leaq	0x5(%rax), %r11
    000001cc: 	cmpq	$0x7, %rcx
    000001d0: 	jbe	.Ltmp244 # Offset: 464
    000001d2: 	movzbl	0x5(%r9,%rax), %ecx
    000001d8: 	subq	$0x30, %r8
    000001dc: 	notl	%ecx
    000001de: 	andb	%cl, (%rdi,%r11)
    000001e2: 	leaq	0x6(%rax), %rcx
    000001e6: 	cmpq	$0x7, %r8
    000001ea: 	jbe	.Ltmp244 # Offset: 490
    000001ec: 	movzbl	0x6(%r9,%rax), %eax
    000001f2: 	notl	%eax
    000001f4: 	andb	%al, (%rdi,%rcx)
.Ltmp244:
    000001f7: 	andq	$-0x8, %r10
    000001fb: 	andl	$0x7, %esi
    000001fe: 	leaq	0x8(%rdx,%r10), %rdx
.Ltmp248:
    00000203: 	testq	%rsi, %rsi
    00000206: 	je	.Ltmp246 # Offset: 518
    0000020c: 	movq	%rdx, %rax
    0000020f: 	movl	%edx, %ecx
    00000211: 	movl	$0x1, %r8d
    00000217: 	shrq	$0x3, %rax
    0000021b: 	andl	$0x7, %ecx
    0000021e: 	movl	%r8d, %ebx
    00000221: 	leaq	(%rdi,%rax), %r10
    00000225: 	movzbl	(%r9,%rax), %eax
    0000022a: 	shll	%cl, %ebx
    0000022c: 	movl	%ebx, %ecx
    0000022e: 	notl	%eax
    00000230: 	notl	%ecx
    00000232: 	andb	(%r10), %cl
    00000235: 	andl	%ebx, %eax
    00000237: 	orl	%ecx, %eax
    00000239: 	andb	(%r10), %al
    0000023c: 	leaq	0x1(%rdx), %rcx
    00000240: 	movb	%al, (%r10)
    00000243: 	cmpq	$0x1, %rsi
    00000247: 	je	.Ltmp246 # Offset: 583
    0000024d: 	movq	%rcx, %rax
    00000250: 	movl	%r8d, %ebx
    00000253: 	andl	$0x7, %ecx
    00000256: 	shrq	$0x3, %rax
    0000025a: 	shll	%cl, %ebx
    0000025c: 	leaq	(%rdi,%rax), %r10
    00000260: 	movzbl	(%r9,%rax), %eax
    00000265: 	movl	%ebx, %ecx
    00000267: 	notl	%ecx
    00000269: 	andb	(%r10), %cl
    0000026c: 	notl	%eax
    0000026e: 	andl	%ebx, %eax
    00000270: 	orl	%ecx, %eax
    00000272: 	andb	(%r10), %al
    00000275: 	leaq	0x2(%rdx), %rcx
    00000279: 	movb	%al, (%r10)
    0000027c: 	cmpq	$0x2, %rsi
    00000280: 	je	.Ltmp246 # Offset: 640
    00000286: 	movq	%rcx, %rax
    00000289: 	movl	%r8d, %ebx
    0000028c: 	andl	$0x7, %ecx
    0000028f: 	shrq	$0x3, %rax
    00000293: 	shll	%cl, %ebx
    00000295: 	leaq	(%rdi,%rax), %r10
    00000299: 	movzbl	(%r9,%rax), %eax
    0000029e: 	movl	%ebx, %ecx
    000002a0: 	notl	%ecx
    000002a2: 	andb	(%r10), %cl
    000002a5: 	notl	%eax
    000002a7: 	andl	%ebx, %eax
    000002a9: 	orl	%ecx, %eax
    000002ab: 	andb	(%r10), %al
    000002ae: 	leaq	0x3(%rdx), %rcx
    000002b2: 	movb	%al, (%r10)
    000002b5: 	cmpq	$0x3, %rsi
    000002b9: 	je	.Ltmp246 # Offset: 697
    000002bf: 	movq	%rcx, %rax
    000002c2: 	movl	%r8d, %ebx
    000002c5: 	andl	$0x7, %ecx
    000002c8: 	shrq	$0x3, %rax
    000002cc: 	shll	%cl, %ebx
    000002ce: 	leaq	(%rdi,%rax), %r10
    000002d2: 	movzbl	(%r9,%rax), %eax
    000002d7: 	movl	%ebx, %ecx
    000002d9: 	notl	%ecx
    000002db: 	andb	(%r10), %cl
    000002de: 	notl	%eax
    000002e0: 	andl	%ebx, %eax
    000002e2: 	orl	%ecx, %eax
    000002e4: 	andb	(%r10), %al
    000002e7: 	leaq	0x4(%rdx), %rcx
    000002eb: 	movb	%al, (%r10)
    000002ee: 	cmpq	$0x4, %rsi
    000002f2: 	je	.Ltmp246 # Offset: 754
    000002f8: 	movq	%rcx, %rax
    000002fb: 	movl	%r8d, %ebx
    000002fe: 	andl	$0x7, %ecx
    00000301: 	shrq	$0x3, %rax
    00000305: 	shll	%cl, %ebx
    00000307: 	leaq	(%rdi,%rax), %r10
    0000030b: 	movzbl	(%r9,%rax), %eax
    00000310: 	movl	%ebx, %ecx
    00000312: 	notl	%ecx
    00000314: 	andb	(%r10), %cl
    00000317: 	notl	%eax
    00000319: 	andl	%ebx, %eax
    0000031b: 	orl	%ecx, %eax
    0000031d: 	andb	(%r10), %al
    00000320: 	leaq	0x5(%rdx), %rcx
    00000324: 	movb	%al, (%r10)
    00000327: 	cmpq	$0x5, %rsi
    0000032b: 	je	.Ltmp246 # Offset: 811
    0000032d: 	movq	%rcx, %rax
    00000330: 	movl	%r8d, %ebx
    00000333: 	andl	$0x7, %ecx
    00000336: 	shrq	$0x3, %rax
    0000033a: 	shll	%cl, %ebx
    0000033c: 	leaq	(%rdi,%rax), %r10
    00000340: 	movzbl	(%r9,%rax), %eax
    00000345: 	movl	%ebx, %ecx
    00000347: 	notl	%ecx
    00000349: 	andb	(%r10), %cl
    0000034c: 	notl	%eax
    0000034e: 	andl	%ebx, %eax
    00000350: 	orl	%ecx, %eax
    00000352: 	andb	(%r10), %al
    00000355: 	leaq	0x6(%rdx), %rcx
    00000359: 	movb	%al, (%r10)
    0000035c: 	cmpq	$0x6, %rsi
    00000360: 	je	.Ltmp246 # Offset: 864
    00000362: 	movq	%rcx, %rax
    00000365: 	andl	$0x7, %ecx
    00000368: 	shrq	$0x3, %rax
    0000036c: 	shll	%cl, %r8d
    0000036f: 	addq	%rax, %rdi
    00000372: 	movzbl	(%r9,%rax), %eax
    00000377: 	notl	%eax
    00000379: 	andl	%r8d, %eax
    0000037c: 	notl	%r8d
    0000037f: 	andb	(%rdi), %r8b
    00000382: 	orl	%r8d, %eax
    00000385: 	andb	(%rdi), %al
    00000387: 	movb	%al, (%rdi)
.Ltmp246:
    00000389: 	popq	%rbx
    0000038a: 	popq	%rbp
    0000038b: 	popq	%r12
    0000038d: 	retq # Offset: 909
    0000038e: 	nop # Size: 2
.Ltmp236:
    00000390: 	retq # Offset: 912
    00000391: 	nopl	(%rax) # Size: 7
.Ltmp239:
    00000398: 	movq	%rdx, %rcx
    0000039b: 	shrq	$0x3, %rcx
    0000039f: 	cmpq	$0x7, %rsi
    000003a3: 	ja	.Ltmp247 # Offset: 931
    000003a9: 	jmp	.Ltmp248 # Offset: 937
    000003ae: 	nop # Size: 2
.Ltmp241:
    000003b0: 	movq	%r10, %r11
    000003b3: 	shrq	$0x3, %r11
    000003b7: 	addq	%rax, %r11
    000003ba: 	jmp	.Ltmp249 # Offset: 954
    000003bc: 	nopl	(%rax) # Size: 4
.Ltmp250:
    000003c0: 	addq	$0x1, %rax
.Ltmp249:
    000003c4: 	movzbl	(%r9,%rcx), %r8d
    000003c9: 	notl	%r8d
    000003cc: 	andb	%r8b, (%rdi,%rcx)
    000003d0: 	movq	%rax, %rcx
    000003d3: 	cmpq	%rax, %r11
    000003d6: 	jne	.Ltmp250 # Offset: 982
    000003d8: 	jmp	.Ltmp244 # Offset: 984
.Ltmp242:
    000003dd: 	movq	%rsi, %r8
    000003e0: 	movq	%rcx, %rax
    000003e3: 	jmp	.Ltmp251 # Offset: 995
.Ltmp237:
    000003e8: 	movq	%rdx, %rcx
    000003eb: 	movq	$-0x1, %rsi
    000003f2: 	shrq	$0x3, %rcx
    000003f6: 	jmp	.Ltmp247 # Offset: 1014
DWARF CFI Instructions:
    <empty>
End of Function "_Z29AndComplimentBitTablesHalfOptIhEvPT_PKS0_mm"

Binary Function "_Z27AndComplimentBitTablesShiftIhEvPT_PKS0_mm" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x5ec0
  Size        : 0x52
  MaxSize     : 0x60
  Offset      : 0x5ec0
  Section     : .text
  Orc Section : .local.text._Z27AndComplimentBitTablesShiftIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r9
    0000000a: 	movq	%rcx, %rdi
    0000000d: 	movq	%rdx, %rsi
    00000010: 	cmpq	%rdx, %rcx
    00000013: 	jb	.Ltmp252 # Offset: 19
    00000015: 	je	.Ltmp252 # Offset: 21
    00000017: 	movl	$0x1, %r10d
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp253:
    00000020: 	movq	%rsi, %rax
    00000023: 	movl	%esi, %ecx
    00000025: 	movl	%r10d, %edx
    00000028: 	addq	$0x1, %rsi
    0000002c: 	shrq	$0x3, %rax
    00000030: 	andl	$0x7, %ecx
    00000033: 	shll	%cl, %edx
    00000035: 	leaq	(%r8,%rax), %rcx
    00000039: 	movzbl	(%r9,%rax), %eax
    0000003e: 	notl	%eax
    00000040: 	andl	%edx, %eax
    00000042: 	notl	%edx
    00000044: 	andb	(%rcx), %dl
    00000046: 	orl	%edx, %eax
    00000048: 	andb	(%rcx), %al
    0000004a: 	movb	%al, (%rcx)
    0000004c: 	cmpq	%rsi, %rdi
    0000004f: 	jne	.Ltmp253 # Offset: 79
.Ltmp252:
    00000051: 	retq # Offset: 81
DWARF CFI Instructions:
    <empty>
End of Function "_Z27AndComplimentBitTablesShiftIhEvPT_PKS0_mm"

Binary Function "_Z22AndComplimentBitTablesIhEvPT_PKS0_mm" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x5f20
  Size        : 0x52
  MaxSize     : 0x60
  Offset      : 0x5f20
  Section     : .text
  Orc Section : .local.text._Z22AndComplimentBitTablesIhEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r10
    00000007: 	movq	%rdi, %r9
    0000000a: 	movq	%rdx, %rsi
    0000000d: 	movq	%rcx, %r8
    00000010: 	cmpq	%rdx, %rcx
    00000013: 	jb	.Ltmp254 # Offset: 19
    00000015: 	je	.Ltmp254 # Offset: 21
    00000017: 	movl	$0x1, %r11d
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp255:
    00000020: 	movq	%rsi, %rax
    00000023: 	movl	%esi, %ecx
    00000025: 	movl	%r11d, %edx
    00000028: 	addq	$0x1, %rsi
    0000002c: 	shrq	$0x3, %rax
    00000030: 	andl	$0x7, %ecx
    00000033: 	leaq	(%r9,%rax), %rdi
    00000037: 	movzbl	(%r10,%rax), %eax
    0000003c: 	shll	%cl, %edx
    0000003e: 	notl	%eax
    00000040: 	andl	%edx, %eax
    00000042: 	notl	%edx
    00000044: 	andb	(%rdi), %dl
    00000046: 	orl	%edx, %eax
    00000048: 	andb	(%rdi), %al
    0000004a: 	movb	%al, (%rdi)
    0000004c: 	cmpq	%rsi, %r8
    0000004f: 	jne	.Ltmp255 # Offset: 79
.Ltmp254:
    00000051: 	retq # Offset: 81
DWARF CFI Instructions:
    <empty>
End of Function "_Z22AndComplimentBitTablesIhEvPT_PKS0_mm"

Binary Function "_Z23StencilBitTablesHalfOptIhEvPT_PKS0_S3_mm" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x5f80
  Size        : 0x3d9
  MaxSize     : 0x3e0
  Offset      : 0x5f80
  Section     : .text
  Orc Section : .local.text._Z23StencilBitTablesHalfOptIhEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	cmpq	%rcx, %r8
    00000007: 	jb	.Ltmp256 # Offset: 7
    0000000d: 	subq	%rcx, %r8
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r10
    00000015: 	movq	%rdx, %r11
    00000018: 	pushq	%r13
    0000001a: 	movq	%rcx, %rax
    0000001d: 	leaq	-0x1(%r8), %r9
    00000021: 	pushq	%r12
    00000023: 	pushq	%rbp
    00000024: 	pushq	%rbx
    00000025: 	je	.Ltmp257 # Offset: 37
    0000002b: 	movl	$0x1, %r8d
    00000031: 	testb	$0x7, %al
    00000033: 	jne	.Ltmp258 # Offset: 51
    00000035: 	jmp	.Ltmp259 # Offset: 53
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp260:
    00000040: 	testb	$0x7, %al
    00000042: 	je	.Ltmp259 # Offset: 66
.Ltmp258:
    00000048: 	movq	%rax, %rsi
    0000004b: 	movl	%eax, %ecx
    0000004d: 	movl	%r8d, %ebx
    00000050: 	addq	$0x1, %rax
    00000054: 	shrq	$0x3, %rsi
    00000058: 	andl	$0x7, %ecx
    0000005b: 	movzbl	(%r10,%rsi), %edx
    00000060: 	shll	%cl, %ebx
    00000062: 	andb	(%r11,%rsi), %dl
    00000066: 	andl	%ebx, %edx
    00000068: 	orb	%dl, (%rdi,%rsi)
    0000006b: 	subq	$0x1, %r9
    0000006f: 	jae	.Ltmp260 # Offset: 111
    00000071: 	movq	%rax, %rcx
    00000074: 	shrq	$0x3, %rcx
.Ltmp267:
    00000078: 	leaq	(%rdi,%rcx), %rsi
    0000007c: 	leaq	0x1(%rcx), %rdx
    00000080: 	leaq	(%r11,%rdx), %rbp
    00000084: 	movq	%rsi, %rbx
    00000087: 	leaq	(%r10,%rdx), %r12
    0000008b: 	subq	%rbp, %rbx
    0000008e: 	leaq	-0x8(%r9), %r8
    00000092: 	cmpq	$0xe, %rbx
    00000096: 	movq	%rsi, %rbx
    00000099: 	seta	%bpl
    0000009d: 	subq	%r12, %rbx
    000000a0: 	cmpq	$0xe, %rbx
    000000a4: 	seta	%bl
    000000a7: 	testb	%bl, %bpl
    000000aa: 	je	.Ltmp261 # Offset: 170
    000000b0: 	cmpq	$0x37, %r8
    000000b4: 	jbe	.Ltmp261 # Offset: 180
    000000ba: 	movq	%r8, %r12
    000000bd: 	shrq	$0x3, %r12
    000000c1: 	leaq	0x1(%r12), %rbx
    000000c6: 	cmpq	$0x77, %r8
    000000ca: 	jbe	.Ltmp262 # Offset: 202
    000000d0: 	movq	%rbx, %rbp
    000000d3: 	leaq	(%r10,%rcx), %r14
    000000d7: 	leaq	(%r11,%rcx), %r13
    000000db: 	xorl	%edx, %edx
    000000dd: 	shrq	$0x4, %rbp
    000000e1: 	shlq	$0x4, %rbp
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp263:
    000000e8: 	movdqu	(%r13,%rdx), %xmm0
    000000ef: 	movdqu	(%r14,%rdx), %xmm2
    000000f5: 	movdqu	(%rsi,%rdx), %xmm3
    000000fa: 	pand	%xmm2, %xmm0
    000000fe: 	por	%xmm3, %xmm0
    00000102: 	movups	%xmm0, (%rsi,%rdx)
    00000106: 	addq	$0x10, %rdx
    0000010a: 	cmpq	%rbp, %rdx
    0000010d: 	jne	.Ltmp263 # Offset: 269
    0000010f: 	movq	%rbx, %rbp
    00000112: 	andq	$-0x10, %rbp
    00000116: 	movq	%rbp, %rdx
    00000119: 	addq	%rbp, %rcx
    0000011c: 	negq	%rdx
    0000011f: 	leaq	(%r9,%rdx,8), %rsi
    00000123: 	movq	%rcx, %rdx
    00000126: 	cmpq	%rbx, %rbp
    00000129: 	je	.Ltmp264 # Offset: 297
    0000012f: 	subq	%rbp, %r12
    00000132: 	leaq	0x1(%r12), %rbx
    00000137: 	cmpq	$0x6, %r12
    0000013b: 	jbe	.Ltmp265 # Offset: 315
.Ltmp271:
    0000013d: 	movq	(%r11,%rcx), %xmm1
    00000143: 	movq	(%r10,%rcx), %xmm0
    00000149: 	leaq	(%rdi,%rcx), %rbp
    0000014d: 	movq	%rbx, %rcx
    00000150: 	andq	$-0x8, %rcx
    00000154: 	pand	%xmm1, %xmm0
    00000158: 	movq	(%rbp), %xmm1
    0000015d: 	addq	%rcx, %rdx
    00000160: 	por	%xmm1, %xmm0
    00000164: 	movq	%xmm0, (%rbp)
    00000169: 	movq	%rcx, %rbp
    0000016c: 	negq	%rbp
    0000016f: 	leaq	(%rsi,%rbp,8), %rsi
    00000173: 	cmpq	%rbx, %rcx
    00000176: 	je	.Ltmp264 # Offset: 374
.Ltmp265:
    0000017c: 	movzbl	(%r10,%rdx), %ecx
    00000181: 	andb	(%r11,%rdx), %cl
    00000185: 	leaq	0x1(%rdx), %rbx
    00000189: 	orb	%cl, (%rdi,%rdx)
    0000018c: 	leaq	-0x8(%rsi), %rcx
    00000190: 	cmpq	$0x7, %rcx
    00000194: 	jbe	.Ltmp264 # Offset: 404
    0000019a: 	movzbl	0x1(%r10,%rdx), %ecx
    000001a0: 	andb	0x1(%r11,%rdx), %cl
    000001a5: 	orb	%cl, (%rdi,%rbx)
    000001a8: 	leaq	-0x10(%rsi), %rcx
    000001ac: 	leaq	0x2(%rdx), %rbx
    000001b0: 	cmpq	$0x7, %rcx
    000001b4: 	jbe	.Ltmp264 # Offset: 436
    000001b6: 	movzbl	0x2(%r10,%rdx), %ecx
    000001bc: 	andb	0x2(%r11,%rdx), %cl
    000001c1: 	orb	%cl, (%rdi,%rbx)
    000001c4: 	leaq	-0x18(%rsi), %rcx
    000001c8: 	leaq	0x3(%rdx), %rbx
    000001cc: 	cmpq	$0x7, %rcx
    000001d0: 	jbe	.Ltmp264 # Offset: 464
    000001d2: 	movzbl	0x3(%r10,%rdx), %ecx
    000001d8: 	andb	0x3(%r11,%rdx), %cl
    000001dd: 	orb	%cl, (%rdi,%rbx)
    000001e0: 	leaq	-0x20(%rsi), %rcx
    000001e4: 	leaq	0x4(%rdx), %rbx
    000001e8: 	cmpq	$0x7, %rcx
    000001ec: 	jbe	.Ltmp264 # Offset: 492
    000001ee: 	movzbl	0x4(%r10,%rdx), %ecx
    000001f4: 	andb	0x4(%r11,%rdx), %cl
    000001f9: 	orb	%cl, (%rdi,%rbx)
    000001fc: 	leaq	-0x28(%rsi), %rcx
    00000200: 	leaq	0x5(%rdx), %rbx
    00000204: 	cmpq	$0x7, %rcx
    00000208: 	jbe	.Ltmp264 # Offset: 520
    0000020a: 	subq	$0x30, %rsi
    0000020e: 	movzbl	0x5(%r10,%rdx), %ecx
    00000214: 	andb	0x5(%r11,%rdx), %cl
    00000219: 	orb	%cl, (%rdi,%rbx)
    0000021c: 	leaq	0x6(%rdx), %rbx
    00000220: 	cmpq	$0x7, %rsi
    00000224: 	jbe	.Ltmp264 # Offset: 548
    00000226: 	movzbl	0x6(%r11,%rdx), %ecx
    0000022c: 	andb	0x6(%r10,%rdx), %cl
    00000231: 	orb	%cl, (%rdi,%rbx)
.Ltmp264:
    00000234: 	andq	$-0x8, %r8
    00000238: 	andl	$0x7, %r9d
    0000023c: 	leaq	0x8(%rax,%r8), %rax
.Ltmp268:
    00000241: 	testq	%r9, %r9
    00000244: 	je	.Ltmp266 # Offset: 580
    0000024a: 	movq	%rax, %r8
    0000024d: 	movl	%eax, %ecx
    0000024f: 	movl	$0x1, %edx
    00000254: 	shrq	$0x3, %r8
    00000258: 	andl	$0x7, %ecx
    0000025b: 	movl	%edx, %ebx
    0000025d: 	movzbl	(%r10,%r8), %esi
    00000262: 	shll	%cl, %ebx
    00000264: 	andb	(%r11,%r8), %sil
    00000268: 	leaq	0x1(%rax), %rcx
    0000026c: 	andl	%ebx, %esi
    0000026e: 	orb	%sil, (%rdi,%r8)
    00000272: 	cmpq	$0x1, %r9
    00000276: 	je	.Ltmp266 # Offset: 630
    0000027c: 	movq	%rcx, %r8
    0000027f: 	movl	%edx, %ebx
    00000281: 	andl	$0x7, %ecx
    00000284: 	shrq	$0x3, %r8
    00000288: 	shll	%cl, %ebx
    0000028a: 	leaq	0x2(%rax), %rcx
    0000028e: 	movzbl	(%r11,%r8), %esi
    00000293: 	andb	(%r10,%r8), %sil
    00000297: 	andl	%ebx, %esi
    00000299: 	orb	%sil, (%rdi,%r8)
    0000029d: 	cmpq	$0x2, %r9
    000002a1: 	je	.Ltmp266 # Offset: 673
    000002a7: 	movq	%rcx, %r8
    000002aa: 	movl	%edx, %ebx
    000002ac: 	andl	$0x7, %ecx
    000002af: 	shrq	$0x3, %r8
    000002b3: 	shll	%cl, %ebx
    000002b5: 	leaq	0x3(%rax), %rcx
    000002b9: 	movzbl	(%r10,%r8), %esi
    000002be: 	andb	(%r11,%r8), %sil
    000002c2: 	andl	%ebx, %esi
    000002c4: 	orb	%sil, (%rdi,%r8)
    000002c8: 	cmpq	$0x3, %r9
    000002cc: 	je	.Ltmp266 # Offset: 716
    000002d2: 	movq	%rcx, %r8
    000002d5: 	movl	%edx, %ebx
    000002d7: 	andl	$0x7, %ecx
    000002da: 	shrq	$0x3, %r8
    000002de: 	shll	%cl, %ebx
    000002e0: 	leaq	0x4(%rax), %rcx
    000002e4: 	movzbl	(%r10,%r8), %esi
    000002e9: 	andb	(%r11,%r8), %sil
    000002ed: 	andl	%ebx, %esi
    000002ef: 	orb	%sil, (%rdi,%r8)
    000002f3: 	cmpq	$0x4, %r9
    000002f7: 	je	.Ltmp266 # Offset: 759
    000002f9: 	movq	%rcx, %r8
    000002fc: 	movl	%edx, %ebx
    000002fe: 	andl	$0x7, %ecx
    00000301: 	shrq	$0x3, %r8
    00000305: 	shll	%cl, %ebx
    00000307: 	leaq	0x5(%rax), %rcx
    0000030b: 	movzbl	(%r10,%r8), %esi
    00000310: 	andb	(%r11,%r8), %sil
    00000314: 	andl	%ebx, %esi
    00000316: 	orb	%sil, (%rdi,%r8)
    0000031a: 	cmpq	$0x5, %r9
    0000031e: 	je	.Ltmp266 # Offset: 798
    00000320: 	movq	%rcx, %r8
    00000323: 	movl	%edx, %ebx
    00000325: 	andl	$0x7, %ecx
    00000328: 	shrq	$0x3, %r8
    0000032c: 	shll	%cl, %ebx
    0000032e: 	leaq	0x6(%rax), %rcx
    00000332: 	movzbl	(%r10,%r8), %esi
    00000337: 	andb	(%r11,%r8), %sil
    0000033b: 	andl	%ebx, %esi
    0000033d: 	orb	%sil, (%rdi,%r8)
    00000341: 	cmpq	$0x6, %r9
    00000345: 	je	.Ltmp266 # Offset: 837
    00000347: 	movq	%rcx, %rax
    0000034a: 	andl	$0x7, %ecx
    0000034d: 	shrq	$0x3, %rax
    00000351: 	shll	%cl, %edx
    00000353: 	movzbl	(%r10,%rax), %esi
    00000358: 	andb	(%r11,%rax), %sil
    0000035c: 	andl	%edx, %esi
    0000035e: 	orb	%sil, (%rdi,%rax)
.Ltmp266:
    00000362: 	popq	%rbx
    00000363: 	popq	%rbp
    00000364: 	popq	%r12
    00000366: 	popq	%r13
    00000368: 	popq	%r14
    0000036a: 	retq # Offset: 874
    0000036b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp256:
    00000370: 	retq # Offset: 880
    00000371: 	nopl	(%rax) # Size: 7
.Ltmp259:
    00000378: 	movq	%rax, %rcx
    0000037b: 	shrq	$0x3, %rcx
    0000037f: 	cmpq	$0x7, %r9
    00000383: 	ja	.Ltmp267 # Offset: 899
    00000389: 	jmp	.Ltmp268 # Offset: 905
    0000038e: 	nop # Size: 2
.Ltmp261:
    00000390: 	movq	%r8, %rbx
    00000393: 	shrq	$0x3, %rbx
    00000397: 	addq	%rdx, %rbx
    0000039a: 	jmp	.Ltmp269 # Offset: 922
    0000039c: 	nopl	(%rax) # Size: 4
.Ltmp270:
    000003a0: 	addq	$0x1, %rdx
.Ltmp269:
    000003a4: 	movzbl	(%r11,%rcx), %esi
    000003a9: 	andb	(%r10,%rcx), %sil
    000003ad: 	orb	%sil, (%rdi,%rcx)
    000003b1: 	movq	%rdx, %rcx
    000003b4: 	cmpq	%rdx, %rbx
    000003b7: 	jne	.Ltmp270 # Offset: 951
    000003b9: 	jmp	.Ltmp264 # Offset: 953
.Ltmp262:
    000003be: 	movq	%r9, %rsi
    000003c1: 	movq	%rcx, %rdx
    000003c4: 	jmp	.Ltmp271 # Offset: 964
.Ltmp257:
    000003c9: 	shrq	$0x3, %rcx
    000003cd: 	movq	$-0x1, %r9
    000003d4: 	jmp	.Ltmp267 # Offset: 980
DWARF CFI Instructions:
    <empty>
End of Function "_Z23StencilBitTablesHalfOptIhEvPT_PKS0_S3_mm"

Binary Function "_Z21StencilBitTablesShiftIhEvPT_PKS0_S3_mm" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x6360
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x6360
  Section     : .text
  Orc Section : .local.text._Z21StencilBitTablesShiftIhEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	cmpq	%rcx, %r8
    00000007: 	jb	.Ltmp272 # Offset: 7
    00000009: 	je	.Ltmp272 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdx, %r10
    0000000f: 	movq	%rsi, %r9
    00000012: 	movq	%rcx, %rdx
    00000015: 	movl	$0x1, %r11d
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp273:
    00000020: 	movq	%rdx, %rsi
    00000023: 	movl	%edx, %ecx
    00000025: 	movl	%r11d, %ebx
    00000028: 	addq	$0x1, %rdx
    0000002c: 	shrq	$0x3, %rsi
    00000030: 	andl	$0x7, %ecx
    00000033: 	movzbl	(%r9,%rsi), %eax
    00000038: 	shll	%cl, %ebx
    0000003a: 	andb	(%r10,%rsi), %al
    0000003e: 	andl	%ebx, %eax
    00000040: 	orb	%al, (%rdi,%rsi)
    00000043: 	cmpq	%rdx, %r8
    00000046: 	jne	.Ltmp273 # Offset: 70
    00000048: 	popq	%rbx
    00000049: 	retq # Offset: 73
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp272:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z21StencilBitTablesShiftIhEvPT_PKS0_S3_mm"

Binary Function "_Z16StencilBitTablesIhEvPT_PKS0_S3_mm" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x63c0
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x63c0
  Section     : .text
  Orc Section : .local.text._Z16StencilBitTablesIhEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	cmpq	%rcx, %r8
    00000007: 	jb	.Ltmp274 # Offset: 7
    00000009: 	je	.Ltmp274 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdx, %r10
    0000000f: 	movq	%rsi, %r9
    00000012: 	movq	%rcx, %rdx
    00000015: 	movl	$0x1, %r11d
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp275:
    00000020: 	movq	%rdx, %rsi
    00000023: 	movl	%edx, %ecx
    00000025: 	movl	%r11d, %ebx
    00000028: 	addq	$0x1, %rdx
    0000002c: 	shrq	$0x3, %rsi
    00000030: 	andl	$0x7, %ecx
    00000033: 	movzbl	(%r9,%rsi), %eax
    00000038: 	shll	%cl, %ebx
    0000003a: 	andb	(%r10,%rsi), %al
    0000003e: 	andl	%ebx, %eax
    00000040: 	orb	%al, (%rdi,%rsi)
    00000043: 	cmpq	%rdx, %r8
    00000046: 	jne	.Ltmp275 # Offset: 70
    00000048: 	popq	%rbx
    00000049: 	retq # Offset: 73
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp274:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z16StencilBitTablesIhEvPT_PKS0_S3_mm"

Binary Function "_Z17CountBitsByteLoopIhEmPT_mm" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x6420
  Size        : 0x798
  MaxSize     : 0x7a0
  Offset      : 0x6420
  Section     : .text
  Orc Section : .local.text._Z17CountBitsByteLoopIhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp276 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rdx, %rdi
    00000012: 	subq	%rsi, %rdi
    00000015: 	je	.Ltmp276 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp277 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp278 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp279:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp277 # Offset: 52
.Ltmp278:
    00000036: 	movq	%rsi, %rdx
    00000039: 	movl	%esi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x3, %rdx
    00000042: 	andl	$0x7, %ecx
    00000045: 	shll	%cl, %eax
    00000047: 	andb	(%r9,%rdx), %al
    0000004b: 	cmpb	$0x1, %al
    0000004d: 	sbbq	$-0x1, %r8
    00000051: 	addq	$0x1, %rsi
    00000055: 	subq	$0x1, %rdi
    00000059: 	jne	.Ltmp279 # Offset: 89
.Ltmp276:
    0000005b: 	movq	%r8, %rax
    0000005e: 	retq # Offset: 94
.Ltmp277:
    0000005f: 	movq	%rsi, %r10
    00000062: 	pushq	%rbx
    00000063: 	shrq	$0x3, %r10
    00000067: 	cmpq	$0x7, %rdi
    0000006b: 	jbe	.Ltmp280 # Offset: 107
    00000071: 	leaq	-0x8(%rdi), %r11
    00000075: 	movq	%r11, %rcx
    00000078: 	shrq	$0x3, %rcx
    0000007c: 	addq	$0x1, %rcx
    00000080: 	cmpq	$0x77, %r11
    00000084: 	jbe	.Ltmp281 # Offset: 132
    0000008a: 	leaq	(%r9,%r10), %rax
    0000008e: 	pxor	%xmm9, %xmm9
    00000093: 	pxor	%xmm3, %xmm3
    00000097: 	movq	%rcx, %rdx
    0000009a: 	shrq	$0x4, %rdx
    0000009e: 	pxor	%xmm1, %xmm1
    000000a2: 	movdqa	DATAat0x165d0(%rip), %xmm8
    000000ab: 	movdqa	DATAat0x165e0(%rip), %xmm11
    000000b4: 	shlq	$0x4, %rdx
    000000b8: 	pxor	%xmm0, %xmm0
    000000bc: 	movdqa	DATAat0x165f0(%rip), %xmm10
    000000c5: 	addq	%rax, %rdx
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp282:
    000000d0: 	movdqu	(%rax), %xmm4
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm4, %xmm6
    000000dc: 	pand	%xmm8, %xmm6
    000000e1: 	pcmpeqb	%xmm3, %xmm6
    000000e5: 	pandn	%xmm8, %xmm6
    000000ea: 	movdqa	%xmm6, %xmm2
    000000ee: 	punpckhbw	%xmm3, %xmm6
    000000f2: 	punpcklbw	%xmm3, %xmm2
    000000f6: 	movdqa	%xmm6, %xmm5
    000000fa: 	punpckhwd	%xmm1, %xmm6
    000000fe: 	movdqa	%xmm2, %xmm7
    00000102: 	punpckhwd	%xmm1, %xmm2
    00000106: 	punpcklwd	%xmm1, %xmm5
    0000010a: 	punpcklwd	%xmm1, %xmm7
    0000010e: 	movdqa	%xmm7, %xmm13
    00000113: 	movdqa	%xmm7, %xmm12
    00000118: 	movdqa	%xmm2, %xmm7
    0000011c: 	punpckldq	%xmm0, %xmm13
    00000121: 	punpckldq	%xmm0, %xmm7
    00000125: 	punpckhdq	%xmm0, %xmm12
    0000012a: 	punpckhdq	%xmm0, %xmm2
    0000012e: 	paddq	%xmm13, %xmm12
    00000133: 	paddq	%xmm7, %xmm2
    00000137: 	paddq	%xmm2, %xmm12
    0000013c: 	movdqa	%xmm5, %xmm2
    00000140: 	punpckhdq	%xmm0, %xmm5
    00000144: 	punpckldq	%xmm0, %xmm2
    00000148: 	paddq	%xmm2, %xmm5
    0000014c: 	movdqa	%xmm6, %xmm2
    00000150: 	punpckhdq	%xmm0, %xmm6
    00000154: 	punpckldq	%xmm0, %xmm2
    00000158: 	paddq	%xmm2, %xmm5
    0000015c: 	movdqa	%xmm4, %xmm2
    00000160: 	pand	%xmm11, %xmm2
    00000165: 	paddq	%xmm5, %xmm12
    0000016a: 	pcmpeqb	%xmm3, %xmm2
    0000016e: 	pandn	%xmm8, %xmm2
    00000173: 	movdqa	%xmm2, %xmm5
    00000177: 	punpckhbw	%xmm3, %xmm2
    0000017b: 	punpcklbw	%xmm3, %xmm5
    0000017f: 	movdqa	%xmm2, %xmm13
    00000184: 	punpckhwd	%xmm1, %xmm2
    00000188: 	movdqa	%xmm5, %xmm14
    0000018d: 	punpckhwd	%xmm1, %xmm5
    00000191: 	punpcklwd	%xmm1, %xmm13
    00000196: 	punpcklwd	%xmm1, %xmm14
    0000019b: 	movdqa	%xmm14, %xmm7
    000001a0: 	punpckhdq	%xmm0, %xmm14
    000001a5: 	punpckldq	%xmm0, %xmm7
    000001a9: 	paddq	%xmm6, %xmm7
    000001ad: 	movdqa	%xmm5, %xmm6
    000001b1: 	punpckhdq	%xmm0, %xmm5
    000001b5: 	punpckldq	%xmm0, %xmm6
    000001b9: 	paddq	%xmm14, %xmm7
    000001be: 	paddq	%xmm6, %xmm5
    000001c2: 	movdqa	%xmm13, %xmm6
    000001c7: 	paddq	%xmm12, %xmm7
    000001cc: 	punpckldq	%xmm0, %xmm6
    000001d0: 	punpckhdq	%xmm0, %xmm13
    000001d5: 	paddq	%xmm6, %xmm5
    000001d9: 	paddq	%xmm5, %xmm7
    000001dd: 	movdqa	%xmm2, %xmm5
    000001e1: 	punpckhdq	%xmm0, %xmm2
    000001e5: 	punpckldq	%xmm0, %xmm5
    000001e9: 	paddq	%xmm5, %xmm13
    000001ee: 	paddq	%xmm13, %xmm2
    000001f3: 	paddq	%xmm2, %xmm7
    000001f7: 	movdqa	%xmm4, %xmm2
    000001fb: 	pand	%xmm10, %xmm2
    00000200: 	pcmpeqb	%xmm3, %xmm2
    00000204: 	pandn	%xmm8, %xmm2
    00000209: 	movdqa	%xmm2, %xmm12
    0000020e: 	punpckhbw	%xmm3, %xmm2
    00000212: 	punpcklbw	%xmm3, %xmm12
    00000217: 	movdqa	%xmm2, %xmm13
    0000021c: 	punpckhwd	%xmm1, %xmm2
    00000220: 	movdqa	%xmm12, %xmm5
    00000225: 	punpckhwd	%xmm1, %xmm12
    0000022a: 	punpcklwd	%xmm1, %xmm13
    0000022f: 	punpcklwd	%xmm1, %xmm5
    00000233: 	movdqa	%xmm5, %xmm14
    00000238: 	movdqa	%xmm5, %xmm6
    0000023c: 	movdqa	%xmm12, %xmm5
    00000241: 	punpckldq	%xmm0, %xmm14
    00000246: 	punpckhdq	%xmm0, %xmm6
    0000024a: 	punpckldq	%xmm0, %xmm5
    0000024e: 	paddq	%xmm14, %xmm6
    00000253: 	punpckhdq	%xmm0, %xmm12
    00000258: 	paddq	%xmm5, %xmm6
    0000025c: 	movdqa	%xmm13, %xmm5
    00000261: 	punpckhdq	%xmm0, %xmm13
    00000266: 	punpckldq	%xmm0, %xmm5
    0000026a: 	paddq	%xmm7, %xmm6
    0000026e: 	paddq	%xmm5, %xmm12
    00000273: 	movdqa	%xmm2, %xmm5
    00000277: 	paddq	%xmm12, %xmm13
    0000027c: 	movdqa	%xmm2, %xmm12
    00000281: 	punpckldq	%xmm0, %xmm5
    00000285: 	punpckhdq	%xmm0, %xmm12
    0000028a: 	paddq	%xmm13, %xmm6
    0000028f: 	paddq	%xmm5, %xmm12
    00000294: 	movdqa	DATAat0x16600(%rip), %xmm5
    0000029c: 	pand	%xmm4, %xmm5
    000002a0: 	pcmpeqb	%xmm3, %xmm5
    000002a4: 	pandn	%xmm8, %xmm5
    000002a9: 	movdqa	%xmm5, %xmm14
    000002ae: 	punpckhbw	%xmm3, %xmm5
    000002b2: 	punpcklbw	%xmm3, %xmm14
    000002b7: 	movdqa	%xmm5, %xmm2
    000002bb: 	punpckhwd	%xmm1, %xmm5
    000002bf: 	movdqa	%xmm14, %xmm13
    000002c4: 	punpckhwd	%xmm1, %xmm14
    000002c9: 	punpcklwd	%xmm1, %xmm2
    000002cd: 	punpcklwd	%xmm1, %xmm13
    000002d2: 	movdqa	%xmm14, %xmm7
    000002d7: 	punpckhdq	%xmm0, %xmm14
    000002dc: 	movdqa	%xmm13, %xmm15
    000002e1: 	punpckldq	%xmm0, %xmm7
    000002e5: 	punpckldq	%xmm0, %xmm13
    000002ea: 	punpckhdq	%xmm0, %xmm15
    000002ef: 	paddq	%xmm13, %xmm12
    000002f4: 	paddq	%xmm15, %xmm7
    000002f9: 	paddq	%xmm12, %xmm6
    000002fe: 	paddq	%xmm14, %xmm7
    00000303: 	paddq	%xmm6, %xmm7
    00000307: 	movdqa	%xmm2, %xmm6
    0000030b: 	punpckhdq	%xmm0, %xmm2
    0000030f: 	punpckldq	%xmm0, %xmm6
    00000313: 	paddq	%xmm6, %xmm2
    00000317: 	movdqa	%xmm5, %xmm6
    0000031b: 	punpckhdq	%xmm0, %xmm5
    0000031f: 	punpckldq	%xmm0, %xmm6
    00000323: 	paddq	%xmm6, %xmm2
    00000327: 	paddq	%xmm2, %xmm7
    0000032b: 	movdqa	DATAat0x16610(%rip), %xmm2
    00000333: 	pand	%xmm4, %xmm2
    00000337: 	pcmpeqb	%xmm3, %xmm2
    0000033b: 	pandn	%xmm8, %xmm2
    00000340: 	movdqa	%xmm2, %xmm13
    00000345: 	punpckhbw	%xmm3, %xmm2
    00000349: 	punpcklbw	%xmm3, %xmm13
    0000034e: 	movdqa	%xmm2, %xmm12
    00000353: 	punpckhwd	%xmm1, %xmm2
    00000357: 	movdqa	%xmm13, %xmm14
    0000035c: 	punpckhwd	%xmm1, %xmm13
    00000361: 	punpcklwd	%xmm1, %xmm12
    00000366: 	punpcklwd	%xmm1, %xmm14
    0000036b: 	movdqa	%xmm14, %xmm6
    00000370: 	punpckhdq	%xmm0, %xmm14
    00000375: 	punpckldq	%xmm0, %xmm6
    00000379: 	paddq	%xmm5, %xmm6
    0000037d: 	movdqa	%xmm13, %xmm5
    00000382: 	paddq	%xmm14, %xmm6
    00000387: 	punpckhdq	%xmm0, %xmm5
    0000038b: 	paddq	%xmm7, %xmm6
    0000038f: 	movdqa	%xmm13, %xmm7
    00000394: 	punpckldq	%xmm0, %xmm7
    00000398: 	paddq	%xmm7, %xmm5
    0000039c: 	movdqa	%xmm12, %xmm7
    000003a1: 	punpckhdq	%xmm0, %xmm12
    000003a6: 	punpckldq	%xmm0, %xmm7
    000003aa: 	paddq	%xmm7, %xmm5
    000003ae: 	paddq	%xmm5, %xmm6
    000003b2: 	movdqa	%xmm2, %xmm5
    000003b6: 	punpckhdq	%xmm0, %xmm2
    000003ba: 	punpckldq	%xmm0, %xmm5
    000003be: 	paddq	%xmm5, %xmm12
    000003c3: 	paddq	%xmm12, %xmm2
    000003c8: 	paddq	%xmm2, %xmm6
    000003cc: 	movdqa	DATAat0x16620(%rip), %xmm2
    000003d4: 	pand	%xmm4, %xmm2
    000003d8: 	pcmpeqb	%xmm3, %xmm2
    000003dc: 	pandn	%xmm8, %xmm2
    000003e1: 	movdqa	%xmm2, %xmm12
    000003e6: 	punpckhbw	%xmm3, %xmm2
    000003ea: 	punpcklbw	%xmm3, %xmm12
    000003ef: 	movdqa	%xmm2, %xmm13
    000003f4: 	punpckhwd	%xmm1, %xmm2
    000003f8: 	movdqa	%xmm12, %xmm5
    000003fd: 	punpckhwd	%xmm1, %xmm12
    00000402: 	punpcklwd	%xmm1, %xmm13
    00000407: 	punpcklwd	%xmm1, %xmm5
    0000040b: 	movdqa	%xmm5, %xmm14
    00000410: 	movdqa	%xmm5, %xmm7
    00000414: 	movdqa	%xmm12, %xmm5
    00000419: 	punpckldq	%xmm0, %xmm14
    0000041e: 	punpckhdq	%xmm0, %xmm7
    00000422: 	punpckldq	%xmm0, %xmm5
    00000426: 	paddq	%xmm14, %xmm7
    0000042b: 	punpckhdq	%xmm0, %xmm12
    00000430: 	paddq	%xmm5, %xmm7
    00000434: 	movdqa	%xmm13, %xmm5
    00000439: 	punpckhdq	%xmm0, %xmm13
    0000043e: 	punpckldq	%xmm0, %xmm5
    00000442: 	paddq	%xmm6, %xmm7
    00000446: 	paddq	%xmm5, %xmm12
    0000044b: 	movdqa	%xmm2, %xmm5
    0000044f: 	paddq	%xmm12, %xmm13
    00000454: 	movdqa	%xmm2, %xmm12
    00000459: 	punpckldq	%xmm0, %xmm5
    0000045d: 	movdqa	DATAat0x16630(%rip), %xmm2
    00000465: 	paddq	%xmm13, %xmm7
    0000046a: 	punpckhdq	%xmm0, %xmm12
    0000046f: 	pand	%xmm4, %xmm2
    00000473: 	paddq	%xmm5, %xmm12
    00000478: 	pand	DATAat0x16640(%rip), %xmm4
    00000480: 	pcmpeqb	%xmm3, %xmm2
    00000484: 	pcmpeqb	%xmm3, %xmm4
    00000488: 	pandn	%xmm8, %xmm2
    0000048d: 	movdqa	%xmm2, %xmm13
    00000492: 	punpckhbw	%xmm3, %xmm2
    00000496: 	pandn	%xmm8, %xmm4
    0000049b: 	punpcklbw	%xmm3, %xmm13
    000004a0: 	movdqa	%xmm2, %xmm6
    000004a4: 	punpckhwd	%xmm1, %xmm2
    000004a8: 	movdqa	%xmm13, %xmm14
    000004ad: 	punpckhwd	%xmm1, %xmm13
    000004b2: 	punpcklwd	%xmm1, %xmm6
    000004b6: 	punpcklwd	%xmm1, %xmm14
    000004bb: 	movdqa	%xmm13, %xmm5
    000004c0: 	punpckhdq	%xmm0, %xmm13
    000004c5: 	movdqa	%xmm14, %xmm15
    000004ca: 	punpckldq	%xmm0, %xmm5
    000004ce: 	punpckldq	%xmm0, %xmm14
    000004d3: 	punpckhdq	%xmm0, %xmm15
    000004d8: 	paddq	%xmm14, %xmm12
    000004dd: 	paddq	%xmm15, %xmm5
    000004e2: 	paddq	%xmm12, %xmm7
    000004e7: 	paddq	%xmm13, %xmm5
    000004ec: 	paddq	%xmm7, %xmm5
    000004f0: 	movdqa	%xmm6, %xmm7
    000004f4: 	punpckhdq	%xmm0, %xmm6
    000004f8: 	punpckldq	%xmm0, %xmm7
    000004fc: 	paddq	%xmm7, %xmm6
    00000500: 	movdqa	%xmm2, %xmm7
    00000504: 	punpckhdq	%xmm0, %xmm2
    00000508: 	punpckldq	%xmm0, %xmm7
    0000050c: 	paddq	%xmm7, %xmm6
    00000510: 	movdqa	%xmm4, %xmm7
    00000514: 	punpckhbw	%xmm3, %xmm4
    00000518: 	punpcklbw	%xmm3, %xmm7
    0000051c: 	paddq	%xmm6, %xmm5
    00000520: 	movdqa	%xmm4, %xmm6
    00000524: 	movdqa	%xmm7, %xmm12
    00000529: 	punpckhwd	%xmm1, %xmm7
    0000052d: 	punpcklwd	%xmm1, %xmm6
    00000531: 	punpcklwd	%xmm1, %xmm12
    00000536: 	punpckhwd	%xmm1, %xmm4
    0000053a: 	movdqa	%xmm12, %xmm13
    0000053f: 	punpckhdq	%xmm0, %xmm12
    00000544: 	punpckldq	%xmm0, %xmm13
    00000549: 	paddq	%xmm13, %xmm2
    0000054e: 	paddq	%xmm12, %xmm2
    00000553: 	paddq	%xmm5, %xmm2
    00000557: 	movdqa	%xmm7, %xmm5
    0000055b: 	punpckhdq	%xmm0, %xmm7
    0000055f: 	punpckldq	%xmm0, %xmm5
    00000563: 	paddq	%xmm5, %xmm7
    00000567: 	movdqa	%xmm6, %xmm5
    0000056b: 	punpckhdq	%xmm0, %xmm6
    0000056f: 	punpckldq	%xmm0, %xmm5
    00000573: 	paddq	%xmm5, %xmm7
    00000577: 	movdqa	%xmm4, %xmm5
    0000057b: 	punpckhdq	%xmm0, %xmm4
    0000057f: 	punpckldq	%xmm0, %xmm5
    00000583: 	paddq	%xmm7, %xmm2
    00000587: 	paddq	%xmm5, %xmm6
    0000058b: 	paddq	%xmm6, %xmm4
    0000058f: 	paddq	%xmm2, %xmm4
    00000593: 	paddq	%xmm4, %xmm9
    00000598: 	cmpq	%rdx, %rax
    0000059b: 	jne	.Ltmp282 # Offset: 1435
    000005a1: 	movdqa	%xmm9, %xmm0
    000005a6: 	movq	%rcx, %rdx
    000005a9: 	psrldq	$0x8, %xmm0
    000005ae: 	andq	$-0x10, %rdx
    000005b2: 	paddq	%xmm0, %xmm9
    000005b7: 	addq	%rdx, %r10
    000005ba: 	movq	%xmm9, %rax
    000005bf: 	addq	%rax, %r8
    000005c2: 	movq	%rdx, %rax
    000005c5: 	negq	%rax
    000005c8: 	leaq	(%rdi,%rax,8), %rax
    000005cc: 	cmpq	%rdx, %rcx
    000005cf: 	je	.Ltmp283 # Offset: 1487
.Ltmp286:
    000005d5: 	subq	$0x8, %rax
    000005d9: 	leaq	0x1(%r9,%r10), %rbx
    000005de: 	leaq	(%r9,%r10), %rcx
    000005e2: 	shrq	$0x3, %rax
    000005e6: 	addq	%rax, %rbx
    000005e9: 	nopl	(%rax) # Size: 7
.Ltmp284:
    000005f0: 	movzbl	(%rcx), %edx
    000005f3: 	movl	%edx, %r10d
    000005f6: 	movq	%rdx, %rax
    000005f9: 	andl	$0x2, %r10d
    000005fd: 	andl	$0x1, %eax
    00000600: 	cmpb	$0x1, %r10b
    00000604: 	movl	%edx, %r10d
    00000607: 	sbbq	$-0x1, %rax
    0000060b: 	andl	$0x4, %r10d
    0000060f: 	cmpb	$0x1, %r10b
    00000613: 	movl	%edx, %r10d
    00000616: 	sbbq	$-0x1, %rax
    0000061a: 	andl	$0x8, %r10d
    0000061e: 	cmpb	$0x1, %r10b
    00000622: 	movl	%edx, %r10d
    00000625: 	sbbq	$-0x1, %rax
    00000629: 	andl	$0x10, %r10d
    0000062d: 	cmpb	$0x1, %r10b
    00000631: 	movl	%edx, %r10d
    00000634: 	sbbq	$-0x1, %rax
    00000638: 	andl	$0x20, %r10d
    0000063c: 	cmpb	$0x1, %r10b
    00000640: 	movl	%edx, %r10d
    00000643: 	sbbq	$-0x1, %rax
    00000647: 	andl	$0x40, %r10d
    0000064b: 	cmpb	$0x1, %r10b
    0000064f: 	sbbq	$-0x1, %rax
    00000653: 	cmpb	$-0x80, %dl
    00000656: 	sbbq	$-0x1, %rax
    0000065a: 	addq	$0x1, %rcx
    0000065e: 	addq	%rax, %r8
    00000661: 	cmpq	%rbx, %rcx
    00000664: 	jne	.Ltmp284 # Offset: 1636
.Ltmp283:
    00000666: 	andq	$-0x8, %r11
    0000066a: 	andl	$0x7, %edi
    0000066d: 	leaq	0x8(%rsi,%r11), %rsi
    00000672: 	leaq	-0x1(%rdi), %rdx
    00000676: 	je	.Ltmp285 # Offset: 1654
.Ltmp287:
    0000067c: 	movl	%esi, %ecx
    0000067e: 	movl	$0x1, %eax
    00000683: 	movq	%rsi, %rdi
    00000686: 	andl	$0x7, %ecx
    00000689: 	movl	%eax, %ebx
    0000068b: 	shrq	$0x3, %rdi
    0000068f: 	shll	%cl, %ebx
    00000691: 	movl	%ebx, %ecx
    00000693: 	andb	(%r9,%rdi), %cl
    00000697: 	cmpb	$0x1, %cl
    0000069a: 	leaq	0x1(%rsi), %rcx
    0000069e: 	sbbq	$-0x1, %r8
    000006a2: 	testq	%rdx, %rdx
    000006a5: 	je	.Ltmp285 # Offset: 1701
    000006ab: 	movq	%rcx, %rdi
    000006ae: 	movl	%eax, %ebx
    000006b0: 	andl	$0x7, %ecx
    000006b3: 	shrq	$0x3, %rdi
    000006b7: 	shll	%cl, %ebx
    000006b9: 	movl	%ebx, %ecx
    000006bb: 	andb	(%r9,%rdi), %cl
    000006bf: 	cmpb	$0x1, %cl
    000006c2: 	leaq	0x2(%rsi), %rcx
    000006c6: 	sbbq	$-0x1, %r8
    000006ca: 	cmpq	$0x1, %rdx
    000006ce: 	je	.Ltmp285 # Offset: 1742
    000006d4: 	movq	%rcx, %rdi
    000006d7: 	movl	%eax, %ebx
    000006d9: 	andl	$0x7, %ecx
    000006dc: 	shrq	$0x3, %rdi
    000006e0: 	shll	%cl, %ebx
    000006e2: 	movl	%ebx, %ecx
    000006e4: 	andb	(%r9,%rdi), %cl
    000006e8: 	cmpb	$0x1, %cl
    000006eb: 	leaq	0x3(%rsi), %rcx
    000006ef: 	sbbq	$-0x1, %r8
    000006f3: 	cmpq	$0x2, %rdx
    000006f7: 	je	.Ltmp285 # Offset: 1783
    000006fd: 	movq	%rcx, %rdi
    00000700: 	movl	%eax, %ebx
    00000702: 	andl	$0x7, %ecx
    00000705: 	shrq	$0x3, %rdi
    00000709: 	shll	%cl, %ebx
    0000070b: 	movl	%ebx, %ecx
    0000070d: 	andb	(%r9,%rdi), %cl
    00000711: 	cmpb	$0x1, %cl
    00000714: 	leaq	0x4(%rsi), %rcx
    00000718: 	sbbq	$-0x1, %r8
    0000071c: 	cmpq	$0x3, %rdx
    00000720: 	je	.Ltmp285 # Offset: 1824
    00000722: 	movq	%rcx, %rdi
    00000725: 	movl	%eax, %ebx
    00000727: 	andl	$0x7, %ecx
    0000072a: 	shrq	$0x3, %rdi
    0000072e: 	shll	%cl, %ebx
    00000730: 	movl	%ebx, %ecx
    00000732: 	andb	(%r9,%rdi), %cl
    00000736: 	cmpb	$0x1, %cl
    00000739: 	leaq	0x5(%rsi), %rcx
    0000073d: 	sbbq	$-0x1, %r8
    00000741: 	cmpq	$0x4, %rdx
    00000745: 	je	.Ltmp285 # Offset: 1861
    00000747: 	movq	%rcx, %rdi
    0000074a: 	movl	%eax, %ebx
    0000074c: 	andl	$0x7, %ecx
    0000074f: 	shrq	$0x3, %rdi
    00000753: 	shll	%cl, %ebx
    00000755: 	movl	%ebx, %ecx
    00000757: 	andb	(%r9,%rdi), %cl
    0000075b: 	cmpb	$0x1, %cl
    0000075e: 	leaq	0x6(%rsi), %rcx
    00000762: 	sbbq	$-0x1, %r8
    00000766: 	cmpq	$0x5, %rdx
    0000076a: 	je	.Ltmp285 # Offset: 1898
    0000076c: 	movq	%rcx, %rdx
    0000076f: 	andl	$0x7, %ecx
    00000772: 	shrq	$0x3, %rdx
    00000776: 	shll	%cl, %eax
    00000778: 	andb	(%r9,%rdx), %al
    0000077c: 	cmpb	$0x1, %al
    0000077e: 	sbbq	$-0x1, %r8
.Ltmp285:
    00000782: 	movq	%r8, %rax
    00000785: 	popq	%rbx
    00000786: 	retq # Offset: 1926
.Ltmp281:
    00000787: 	movq	%rdi, %rax
    0000078a: 	jmp	.Ltmp286 # Offset: 1930
.Ltmp280:
    0000078f: 	leaq	-0x1(%rdi), %rdx
    00000793: 	jmp	.Ltmp287 # Offset: 1939
DWARF CFI Instructions:
    <empty>
End of Function "_Z17CountBitsByteLoopIhEmPT_mm"

Binary Function "_Z18CountBitsByteLoop2IhEmPT_mm" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x6bc0
  Size        : 0x79d
  MaxSize     : 0x7a0
  Offset      : 0x6bc0
  Section     : .text
  Orc Section : .local.text._Z18CountBitsByteLoop2IhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp288 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rdx, %rdi
    00000012: 	subq	%rsi, %rdi
    00000015: 	je	.Ltmp288 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp289 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp290 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp291:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp289 # Offset: 52
.Ltmp290:
    00000036: 	movq	%rsi, %rdx
    00000039: 	movl	%esi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x3, %rdx
    00000042: 	andl	$0x7, %ecx
    00000045: 	shll	%cl, %eax
    00000047: 	andb	(%r9,%rdx), %al
    0000004b: 	cmpb	$0x1, %al
    0000004d: 	sbbq	$-0x1, %r8
    00000051: 	addq	$0x1, %rsi
    00000055: 	subq	$0x1, %rdi
    00000059: 	jne	.Ltmp291 # Offset: 89
.Ltmp288:
    0000005b: 	movq	%r8, %rax
    0000005e: 	retq # Offset: 94
.Ltmp289:
    0000005f: 	movq	%rsi, %r10
    00000062: 	pushq	%rbx
    00000063: 	shrq	$0x3, %r10
    00000067: 	cmpq	$0x7, %rdi
    0000006b: 	jbe	.Ltmp292 # Offset: 107
    00000071: 	leaq	-0x8(%rdi), %r11
    00000075: 	movq	%r11, %rcx
    00000078: 	shrq	$0x3, %rcx
    0000007c: 	addq	$0x1, %rcx
    00000080: 	cmpq	$0x77, %r11
    00000084: 	jbe	.Ltmp293 # Offset: 132
    0000008a: 	leaq	(%r9,%r10), %rax
    0000008e: 	pxor	%xmm9, %xmm9
    00000093: 	pxor	%xmm3, %xmm3
    00000097: 	movq	%rcx, %rdx
    0000009a: 	shrq	$0x4, %rdx
    0000009e: 	pxor	%xmm1, %xmm1
    000000a2: 	movdqa	DATAat0x16640(%rip), %xmm11
    000000ab: 	movdqa	DATAat0x165d0(%rip), %xmm8
    000000b4: 	shlq	$0x4, %rdx
    000000b8: 	pxor	%xmm0, %xmm0
    000000bc: 	movdqa	DATAat0x16630(%rip), %xmm10
    000000c5: 	addq	%rax, %rdx
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp294:
    000000d0: 	movdqu	(%rax), %xmm4
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm4, %xmm6
    000000dc: 	pand	%xmm11, %xmm6
    000000e1: 	pcmpeqb	%xmm3, %xmm6
    000000e5: 	pandn	%xmm8, %xmm6
    000000ea: 	movdqa	%xmm6, %xmm2
    000000ee: 	punpckhbw	%xmm3, %xmm6
    000000f2: 	punpcklbw	%xmm3, %xmm2
    000000f6: 	movdqa	%xmm6, %xmm5
    000000fa: 	punpckhwd	%xmm1, %xmm6
    000000fe: 	movdqa	%xmm2, %xmm7
    00000102: 	punpckhwd	%xmm1, %xmm2
    00000106: 	punpcklwd	%xmm1, %xmm5
    0000010a: 	punpcklwd	%xmm1, %xmm7
    0000010e: 	movdqa	%xmm7, %xmm13
    00000113: 	movdqa	%xmm7, %xmm12
    00000118: 	movdqa	%xmm2, %xmm7
    0000011c: 	punpckldq	%xmm0, %xmm13
    00000121: 	punpckldq	%xmm0, %xmm7
    00000125: 	punpckhdq	%xmm0, %xmm12
    0000012a: 	punpckhdq	%xmm0, %xmm2
    0000012e: 	paddq	%xmm13, %xmm12
    00000133: 	paddq	%xmm7, %xmm2
    00000137: 	paddq	%xmm2, %xmm12
    0000013c: 	movdqa	%xmm5, %xmm2
    00000140: 	punpckhdq	%xmm0, %xmm5
    00000144: 	punpckldq	%xmm0, %xmm2
    00000148: 	paddq	%xmm2, %xmm5
    0000014c: 	movdqa	%xmm6, %xmm2
    00000150: 	punpckhdq	%xmm0, %xmm6
    00000154: 	punpckldq	%xmm0, %xmm2
    00000158: 	paddq	%xmm2, %xmm5
    0000015c: 	movdqa	%xmm4, %xmm2
    00000160: 	pand	%xmm10, %xmm2
    00000165: 	paddq	%xmm5, %xmm12
    0000016a: 	pcmpeqb	%xmm3, %xmm2
    0000016e: 	pandn	%xmm8, %xmm2
    00000173: 	movdqa	%xmm2, %xmm5
    00000177: 	punpckhbw	%xmm3, %xmm2
    0000017b: 	punpcklbw	%xmm3, %xmm5
    0000017f: 	movdqa	%xmm2, %xmm13
    00000184: 	punpckhwd	%xmm1, %xmm2
    00000188: 	movdqa	%xmm5, %xmm14
    0000018d: 	punpckhwd	%xmm1, %xmm5
    00000191: 	punpcklwd	%xmm1, %xmm13
    00000196: 	punpcklwd	%xmm1, %xmm14
    0000019b: 	movdqa	%xmm14, %xmm7
    000001a0: 	punpckhdq	%xmm0, %xmm14
    000001a5: 	punpckldq	%xmm0, %xmm7
    000001a9: 	paddq	%xmm6, %xmm7
    000001ad: 	movdqa	%xmm5, %xmm6
    000001b1: 	punpckhdq	%xmm0, %xmm5
    000001b5: 	punpckldq	%xmm0, %xmm6
    000001b9: 	paddq	%xmm14, %xmm7
    000001be: 	paddq	%xmm6, %xmm5
    000001c2: 	movdqa	%xmm13, %xmm6
    000001c7: 	paddq	%xmm12, %xmm7
    000001cc: 	punpckldq	%xmm0, %xmm6
    000001d0: 	punpckhdq	%xmm0, %xmm13
    000001d5: 	paddq	%xmm6, %xmm5
    000001d9: 	paddq	%xmm5, %xmm7
    000001dd: 	movdqa	%xmm2, %xmm5
    000001e1: 	punpckhdq	%xmm0, %xmm2
    000001e5: 	punpckldq	%xmm0, %xmm5
    000001e9: 	paddq	%xmm5, %xmm13
    000001ee: 	paddq	%xmm13, %xmm2
    000001f3: 	paddq	%xmm2, %xmm7
    000001f7: 	movdqa	DATAat0x16620(%rip), %xmm2
    000001ff: 	pand	%xmm4, %xmm2
    00000203: 	pcmpeqb	%xmm3, %xmm2
    00000207: 	pandn	%xmm8, %xmm2
    0000020c: 	movdqa	%xmm2, %xmm12
    00000211: 	punpckhbw	%xmm3, %xmm2
    00000215: 	punpcklbw	%xmm3, %xmm12
    0000021a: 	movdqa	%xmm2, %xmm13
    0000021f: 	punpckhwd	%xmm1, %xmm2
    00000223: 	movdqa	%xmm12, %xmm5
    00000228: 	punpckhwd	%xmm1, %xmm12
    0000022d: 	punpcklwd	%xmm1, %xmm13
    00000232: 	punpcklwd	%xmm1, %xmm5
    00000236: 	movdqa	%xmm5, %xmm14
    0000023b: 	movdqa	%xmm5, %xmm6
    0000023f: 	movdqa	%xmm12, %xmm5
    00000244: 	punpckldq	%xmm0, %xmm14
    00000249: 	punpckhdq	%xmm0, %xmm6
    0000024d: 	punpckldq	%xmm0, %xmm5
    00000251: 	paddq	%xmm14, %xmm6
    00000256: 	punpckhdq	%xmm0, %xmm12
    0000025b: 	paddq	%xmm5, %xmm6
    0000025f: 	movdqa	%xmm13, %xmm5
    00000264: 	punpckhdq	%xmm0, %xmm13
    00000269: 	punpckldq	%xmm0, %xmm5
    0000026d: 	paddq	%xmm7, %xmm6
    00000271: 	paddq	%xmm5, %xmm12
    00000276: 	movdqa	%xmm2, %xmm5
    0000027a: 	paddq	%xmm12, %xmm13
    0000027f: 	movdqa	%xmm2, %xmm12
    00000284: 	punpckldq	%xmm0, %xmm5
    00000288: 	punpckhdq	%xmm0, %xmm12
    0000028d: 	paddq	%xmm13, %xmm6
    00000292: 	paddq	%xmm5, %xmm12
    00000297: 	movdqa	DATAat0x16610(%rip), %xmm5
    0000029f: 	pand	%xmm4, %xmm5
    000002a3: 	pcmpeqb	%xmm3, %xmm5
    000002a7: 	pandn	%xmm8, %xmm5
    000002ac: 	movdqa	%xmm5, %xmm14
    000002b1: 	punpckhbw	%xmm3, %xmm5
    000002b5: 	punpcklbw	%xmm3, %xmm14
    000002ba: 	movdqa	%xmm5, %xmm2
    000002be: 	punpckhwd	%xmm1, %xmm5
    000002c2: 	movdqa	%xmm14, %xmm13
    000002c7: 	punpckhwd	%xmm1, %xmm14
    000002cc: 	punpcklwd	%xmm1, %xmm2
    000002d0: 	punpcklwd	%xmm1, %xmm13
    000002d5: 	movdqa	%xmm14, %xmm7
    000002da: 	punpckhdq	%xmm0, %xmm14
    000002df: 	movdqa	%xmm13, %xmm15
    000002e4: 	punpckldq	%xmm0, %xmm7
    000002e8: 	punpckldq	%xmm0, %xmm13
    000002ed: 	punpckhdq	%xmm0, %xmm15
    000002f2: 	paddq	%xmm13, %xmm12
    000002f7: 	paddq	%xmm15, %xmm7
    000002fc: 	paddq	%xmm12, %xmm6
    00000301: 	paddq	%xmm14, %xmm7
    00000306: 	paddq	%xmm6, %xmm7
    0000030a: 	movdqa	%xmm2, %xmm6
    0000030e: 	punpckhdq	%xmm0, %xmm2
    00000312: 	punpckldq	%xmm0, %xmm6
    00000316: 	paddq	%xmm6, %xmm2
    0000031a: 	movdqa	%xmm5, %xmm6
    0000031e: 	punpckhdq	%xmm0, %xmm5
    00000322: 	punpckldq	%xmm0, %xmm6
    00000326: 	paddq	%xmm6, %xmm2
    0000032a: 	paddq	%xmm2, %xmm7
    0000032e: 	movdqa	DATAat0x16600(%rip), %xmm2
    00000336: 	pand	%xmm4, %xmm2
    0000033a: 	pcmpeqb	%xmm3, %xmm2
    0000033e: 	pandn	%xmm8, %xmm2
    00000343: 	movdqa	%xmm2, %xmm13
    00000348: 	punpckhbw	%xmm3, %xmm2
    0000034c: 	punpcklbw	%xmm3, %xmm13
    00000351: 	movdqa	%xmm2, %xmm12
    00000356: 	punpckhwd	%xmm1, %xmm2
    0000035a: 	movdqa	%xmm13, %xmm14
    0000035f: 	punpckhwd	%xmm1, %xmm13
    00000364: 	punpcklwd	%xmm1, %xmm12
    00000369: 	punpcklwd	%xmm1, %xmm14
    0000036e: 	movdqa	%xmm14, %xmm6
    00000373: 	punpckhdq	%xmm0, %xmm14
    00000378: 	punpckldq	%xmm0, %xmm6
    0000037c: 	paddq	%xmm5, %xmm6
    00000380: 	movdqa	%xmm13, %xmm5
    00000385: 	paddq	%xmm14, %xmm6
    0000038a: 	punpckhdq	%xmm0, %xmm5
    0000038e: 	paddq	%xmm7, %xmm6
    00000392: 	movdqa	%xmm13, %xmm7
    00000397: 	punpckldq	%xmm0, %xmm7
    0000039b: 	paddq	%xmm7, %xmm5
    0000039f: 	movdqa	%xmm12, %xmm7
    000003a4: 	punpckhdq	%xmm0, %xmm12
    000003a9: 	punpckldq	%xmm0, %xmm7
    000003ad: 	paddq	%xmm7, %xmm5
    000003b1: 	paddq	%xmm5, %xmm6
    000003b5: 	movdqa	%xmm2, %xmm5
    000003b9: 	punpckhdq	%xmm0, %xmm2
    000003bd: 	punpckldq	%xmm0, %xmm5
    000003c1: 	paddq	%xmm5, %xmm12
    000003c6: 	paddq	%xmm12, %xmm2
    000003cb: 	paddq	%xmm2, %xmm6
    000003cf: 	movdqa	DATAat0x165f0(%rip), %xmm2
    000003d7: 	pand	%xmm4, %xmm2
    000003db: 	pcmpeqb	%xmm3, %xmm2
    000003df: 	pandn	%xmm8, %xmm2
    000003e4: 	movdqa	%xmm2, %xmm12
    000003e9: 	punpckhbw	%xmm3, %xmm2
    000003ed: 	punpcklbw	%xmm3, %xmm12
    000003f2: 	movdqa	%xmm2, %xmm13
    000003f7: 	punpckhwd	%xmm1, %xmm2
    000003fb: 	movdqa	%xmm12, %xmm5
    00000400: 	punpckhwd	%xmm1, %xmm12
    00000405: 	punpcklwd	%xmm1, %xmm13
    0000040a: 	punpcklwd	%xmm1, %xmm5
    0000040e: 	movdqa	%xmm5, %xmm14
    00000413: 	movdqa	%xmm5, %xmm7
    00000417: 	movdqa	%xmm12, %xmm5
    0000041c: 	punpckldq	%xmm0, %xmm14
    00000421: 	punpckhdq	%xmm0, %xmm7
    00000425: 	punpckldq	%xmm0, %xmm5
    00000429: 	paddq	%xmm14, %xmm7
    0000042e: 	punpckhdq	%xmm0, %xmm12
    00000433: 	paddq	%xmm5, %xmm7
    00000437: 	movdqa	%xmm13, %xmm5
    0000043c: 	punpckhdq	%xmm0, %xmm13
    00000441: 	punpckldq	%xmm0, %xmm5
    00000445: 	paddq	%xmm6, %xmm7
    00000449: 	paddq	%xmm5, %xmm12
    0000044e: 	movdqa	%xmm2, %xmm5
    00000452: 	paddq	%xmm12, %xmm13
    00000457: 	movdqa	%xmm2, %xmm12
    0000045c: 	punpckldq	%xmm0, %xmm5
    00000460: 	movdqa	DATAat0x165e0(%rip), %xmm2
    00000468: 	paddq	%xmm13, %xmm7
    0000046d: 	punpckhdq	%xmm0, %xmm12
    00000472: 	pand	%xmm4, %xmm2
    00000476: 	paddq	%xmm5, %xmm12
    0000047b: 	pand	%xmm8, %xmm4
    00000480: 	pcmpeqb	%xmm3, %xmm2
    00000484: 	pcmpeqb	%xmm3, %xmm4
    00000488: 	pandn	%xmm8, %xmm2
    0000048d: 	pandn	%xmm8, %xmm4
    00000492: 	movdqa	%xmm2, %xmm13
    00000497: 	punpckhbw	%xmm3, %xmm2
    0000049b: 	punpcklbw	%xmm3, %xmm13
    000004a0: 	movdqa	%xmm2, %xmm6
    000004a4: 	punpckhwd	%xmm1, %xmm2
    000004a8: 	movdqa	%xmm13, %xmm14
    000004ad: 	punpckhwd	%xmm1, %xmm13
    000004b2: 	punpcklwd	%xmm1, %xmm6
    000004b6: 	punpcklwd	%xmm1, %xmm14
    000004bb: 	movdqa	%xmm13, %xmm5
    000004c0: 	punpckhdq	%xmm0, %xmm13
    000004c5: 	movdqa	%xmm14, %xmm15
    000004ca: 	punpckldq	%xmm0, %xmm5
    000004ce: 	punpckldq	%xmm0, %xmm14
    000004d3: 	punpckhdq	%xmm0, %xmm15
    000004d8: 	paddq	%xmm14, %xmm12
    000004dd: 	paddq	%xmm15, %xmm5
    000004e2: 	paddq	%xmm12, %xmm7
    000004e7: 	paddq	%xmm13, %xmm5
    000004ec: 	paddq	%xmm7, %xmm5
    000004f0: 	movdqa	%xmm6, %xmm7
    000004f4: 	punpckhdq	%xmm0, %xmm6
    000004f8: 	punpckldq	%xmm0, %xmm7
    000004fc: 	paddq	%xmm7, %xmm6
    00000500: 	movdqa	%xmm2, %xmm7
    00000504: 	punpckhdq	%xmm0, %xmm2
    00000508: 	punpckldq	%xmm0, %xmm7
    0000050c: 	paddq	%xmm7, %xmm6
    00000510: 	movdqa	%xmm4, %xmm7
    00000514: 	punpckhbw	%xmm3, %xmm4
    00000518: 	punpcklbw	%xmm3, %xmm7
    0000051c: 	paddq	%xmm6, %xmm5
    00000520: 	movdqa	%xmm4, %xmm6
    00000524: 	movdqa	%xmm7, %xmm12
    00000529: 	punpckhwd	%xmm1, %xmm7
    0000052d: 	punpcklwd	%xmm1, %xmm6
    00000531: 	punpcklwd	%xmm1, %xmm12
    00000536: 	punpckhwd	%xmm1, %xmm4
    0000053a: 	movdqa	%xmm12, %xmm13
    0000053f: 	punpckhdq	%xmm0, %xmm12
    00000544: 	punpckldq	%xmm0, %xmm13
    00000549: 	paddq	%xmm13, %xmm2
    0000054e: 	paddq	%xmm12, %xmm2
    00000553: 	paddq	%xmm5, %xmm2
    00000557: 	movdqa	%xmm7, %xmm5
    0000055b: 	punpckhdq	%xmm0, %xmm7
    0000055f: 	punpckldq	%xmm0, %xmm5
    00000563: 	paddq	%xmm5, %xmm7
    00000567: 	movdqa	%xmm6, %xmm5
    0000056b: 	punpckhdq	%xmm0, %xmm6
    0000056f: 	punpckldq	%xmm0, %xmm5
    00000573: 	paddq	%xmm5, %xmm7
    00000577: 	movdqa	%xmm4, %xmm5
    0000057b: 	punpckhdq	%xmm0, %xmm4
    0000057f: 	punpckldq	%xmm0, %xmm5
    00000583: 	paddq	%xmm7, %xmm2
    00000587: 	paddq	%xmm5, %xmm6
    0000058b: 	paddq	%xmm6, %xmm4
    0000058f: 	paddq	%xmm2, %xmm4
    00000593: 	paddq	%xmm4, %xmm9
    00000598: 	cmpq	%rdx, %rax
    0000059b: 	jne	.Ltmp294 # Offset: 1435
    000005a1: 	movdqa	%xmm9, %xmm0
    000005a6: 	movq	%rcx, %rdx
    000005a9: 	psrldq	$0x8, %xmm0
    000005ae: 	andq	$-0x10, %rdx
    000005b2: 	paddq	%xmm0, %xmm9
    000005b7: 	addq	%rdx, %r10
    000005ba: 	movq	%xmm9, %rax
    000005bf: 	addq	%rax, %r8
    000005c2: 	movq	%rdx, %rax
    000005c5: 	negq	%rax
    000005c8: 	leaq	(%rdi,%rax,8), %rax
    000005cc: 	cmpq	%rdx, %rcx
    000005cf: 	je	.Ltmp295 # Offset: 1487
.Ltmp298:
    000005d5: 	subq	$0x8, %rax
    000005d9: 	leaq	0x1(%r9,%r10), %rbx
    000005de: 	leaq	(%r9,%r10), %rcx
    000005e2: 	shrq	$0x3, %rax
    000005e6: 	addq	%rax, %rbx
    000005e9: 	nopl	(%rax) # Size: 7
.Ltmp296:
    000005f0: 	movsbq	(%rcx), %rax
    000005f4: 	movq	%rax, %rdx
    000005f7: 	shrq	$0x3f, %rax
    000005fb: 	movl	%edx, %r10d
    000005fe: 	andl	$0x40, %r10d
    00000602: 	cmpb	$0x1, %r10b
    00000606: 	movl	%edx, %r10d
    00000609: 	sbbq	$-0x1, %rax
    0000060d: 	andl	$0x20, %r10d
    00000611: 	cmpb	$0x1, %r10b
    00000615: 	movl	%edx, %r10d
    00000618: 	sbbq	$-0x1, %rax
    0000061c: 	andl	$0x10, %r10d
    00000620: 	cmpb	$0x1, %r10b
    00000624: 	movl	%edx, %r10d
    00000627: 	sbbq	$-0x1, %rax
    0000062b: 	andl	$0x8, %r10d
    0000062f: 	cmpb	$0x1, %r10b
    00000633: 	movl	%edx, %r10d
    00000636: 	sbbq	$-0x1, %rax
    0000063a: 	andl	$0x4, %r10d
    0000063e: 	cmpb	$0x1, %r10b
    00000642: 	movl	%edx, %r10d
    00000645: 	sbbq	$-0x1, %rax
    00000649: 	andl	$0x2, %r10d
    0000064d: 	cmpb	$0x1, %r10b
    00000651: 	sbbq	$-0x1, %rax
    00000655: 	andl	$0x1, %edx
    00000658: 	cmpb	$0x1, %dl
    0000065b: 	sbbq	$-0x1, %rax
    0000065f: 	addq	$0x1, %rcx
    00000663: 	addq	%rax, %r8
    00000666: 	cmpq	%rbx, %rcx
    00000669: 	jne	.Ltmp296 # Offset: 1641
.Ltmp295:
    0000066b: 	andq	$-0x8, %r11
    0000066f: 	andl	$0x7, %edi
    00000672: 	leaq	0x8(%rsi,%r11), %rsi
    00000677: 	leaq	-0x1(%rdi), %rdx
    0000067b: 	je	.Ltmp297 # Offset: 1659
.Ltmp299:
    00000681: 	movl	%esi, %ecx
    00000683: 	movl	$0x1, %eax
    00000688: 	movq	%rsi, %rdi
    0000068b: 	andl	$0x7, %ecx
    0000068e: 	movl	%eax, %ebx
    00000690: 	shrq	$0x3, %rdi
    00000694: 	shll	%cl, %ebx
    00000696: 	movl	%ebx, %ecx
    00000698: 	andb	(%r9,%rdi), %cl
    0000069c: 	cmpb	$0x1, %cl
    0000069f: 	leaq	0x1(%rsi), %rcx
    000006a3: 	sbbq	$-0x1, %r8
    000006a7: 	testq	%rdx, %rdx
    000006aa: 	je	.Ltmp297 # Offset: 1706
    000006b0: 	movq	%rcx, %rdi
    000006b3: 	movl	%eax, %ebx
    000006b5: 	andl	$0x7, %ecx
    000006b8: 	shrq	$0x3, %rdi
    000006bc: 	shll	%cl, %ebx
    000006be: 	movl	%ebx, %ecx
    000006c0: 	andb	(%r9,%rdi), %cl
    000006c4: 	cmpb	$0x1, %cl
    000006c7: 	leaq	0x2(%rsi), %rcx
    000006cb: 	sbbq	$-0x1, %r8
    000006cf: 	cmpq	$0x1, %rdx
    000006d3: 	je	.Ltmp297 # Offset: 1747
    000006d9: 	movq	%rcx, %rdi
    000006dc: 	movl	%eax, %ebx
    000006de: 	andl	$0x7, %ecx
    000006e1: 	shrq	$0x3, %rdi
    000006e5: 	shll	%cl, %ebx
    000006e7: 	movl	%ebx, %ecx
    000006e9: 	andb	(%r9,%rdi), %cl
    000006ed: 	cmpb	$0x1, %cl
    000006f0: 	leaq	0x3(%rsi), %rcx
    000006f4: 	sbbq	$-0x1, %r8
    000006f8: 	cmpq	$0x2, %rdx
    000006fc: 	je	.Ltmp297 # Offset: 1788
    00000702: 	movq	%rcx, %rdi
    00000705: 	movl	%eax, %ebx
    00000707: 	andl	$0x7, %ecx
    0000070a: 	shrq	$0x3, %rdi
    0000070e: 	shll	%cl, %ebx
    00000710: 	movl	%ebx, %ecx
    00000712: 	andb	(%r9,%rdi), %cl
    00000716: 	cmpb	$0x1, %cl
    00000719: 	leaq	0x4(%rsi), %rcx
    0000071d: 	sbbq	$-0x1, %r8
    00000721: 	cmpq	$0x3, %rdx
    00000725: 	je	.Ltmp297 # Offset: 1829
    00000727: 	movq	%rcx, %rdi
    0000072a: 	movl	%eax, %ebx
    0000072c: 	andl	$0x7, %ecx
    0000072f: 	shrq	$0x3, %rdi
    00000733: 	shll	%cl, %ebx
    00000735: 	movl	%ebx, %ecx
    00000737: 	andb	(%r9,%rdi), %cl
    0000073b: 	cmpb	$0x1, %cl
    0000073e: 	leaq	0x5(%rsi), %rcx
    00000742: 	sbbq	$-0x1, %r8
    00000746: 	cmpq	$0x4, %rdx
    0000074a: 	je	.Ltmp297 # Offset: 1866
    0000074c: 	movq	%rcx, %rdi
    0000074f: 	movl	%eax, %ebx
    00000751: 	andl	$0x7, %ecx
    00000754: 	shrq	$0x3, %rdi
    00000758: 	shll	%cl, %ebx
    0000075a: 	movl	%ebx, %ecx
    0000075c: 	andb	(%r9,%rdi), %cl
    00000760: 	cmpb	$0x1, %cl
    00000763: 	leaq	0x6(%rsi), %rcx
    00000767: 	sbbq	$-0x1, %r8
    0000076b: 	cmpq	$0x5, %rdx
    0000076f: 	je	.Ltmp297 # Offset: 1903
    00000771: 	movq	%rcx, %rdx
    00000774: 	andl	$0x7, %ecx
    00000777: 	shrq	$0x3, %rdx
    0000077b: 	shll	%cl, %eax
    0000077d: 	andb	(%r9,%rdx), %al
    00000781: 	cmpb	$0x1, %al
    00000783: 	sbbq	$-0x1, %r8
.Ltmp297:
    00000787: 	movq	%r8, %rax
    0000078a: 	popq	%rbx
    0000078b: 	retq # Offset: 1931
.Ltmp293:
    0000078c: 	movq	%rdi, %rax
    0000078f: 	jmp	.Ltmp298 # Offset: 1935
.Ltmp292:
    00000794: 	leaq	-0x1(%rdi), %rdx
    00000798: 	jmp	.Ltmp299 # Offset: 1944
DWARF CFI Instructions:
    <empty>
End of Function "_Z18CountBitsByteLoop2IhEmPT_mm"

Binary Function "_Z9CountBitsIhEmPT_mm" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x7360
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x7360
  Section     : .text
  Orc Section : .local.text._Z9CountBitsIhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp300 # Offset: 10
    0000000c: 	je	.Ltmp300 # Offset: 12
    0000000e: 	movl	$0x1, %r10d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp301:
    00000018: 	movq	%rsi, %r9
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r10d, %eax
    00000020: 	shrq	$0x3, %r9
    00000024: 	andl	$0x7, %ecx
    00000027: 	shll	%cl, %eax
    00000029: 	andb	(%rdi,%r9), %al
    0000002d: 	cmpb	$0x1, %al
    0000002f: 	sbbq	$-0x1, %r8
    00000033: 	addq	$0x1, %rsi
    00000037: 	cmpq	%rsi, %rdx
    0000003a: 	jne	.Ltmp301 # Offset: 58
.Ltmp300:
    0000003c: 	movq	%r8, %rax
    0000003f: 	retq # Offset: 63
DWARF CFI Instructions:
    <empty>
End of Function "_Z9CountBitsIhEmPT_mm"

Binary Function "_Z14CountBitsShiftItEmPT_mm" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x73a0
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x73a0
  Section     : .text
  Orc Section : .local.text._Z14CountBitsShiftItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp302 # Offset: 10
    0000000c: 	je	.Ltmp302 # Offset: 12
    0000000e: 	movl	$0x1, %r10d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp303:
    00000018: 	movq	%rsi, %r9
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r10d, %eax
    00000020: 	shrq	$0x4, %r9
    00000024: 	andl	$0xf, %ecx
    00000027: 	shll	%cl, %eax
    00000029: 	andw	(%rdi,%r9,2), %ax
    0000002e: 	cmpw	$0x1, %ax
    00000032: 	sbbq	$-0x1, %r8
    00000036: 	addq	$0x1, %rsi
    0000003a: 	cmpq	%rsi, %rdx
    0000003d: 	jne	.Ltmp303 # Offset: 61
.Ltmp302:
    0000003f: 	movq	%r8, %rax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z14CountBitsShiftItEmPT_mm"

Binary Function "_Z14SetBitsHalfOptItEvPT_mm" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x73f0
  Size        : 0x2aa
  MaxSize     : 0x2b0
  Offset      : 0x73f0
  Section     : .text
  Orc Section : .local.text._Z14SetBitsHalfOptItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp304 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	movq	%rdx, %rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rsi, %rbx
    00000019: 	subq	$0x8, %rsp
    0000001d: 	subq	%rsi, %rbp
    00000020: 	je	.Ltmp305 # Offset: 32
    00000022: 	movq	%rdi, %r12
    00000025: 	testb	$0xf, %sil
    00000029: 	je	.Ltmp306 # Offset: 41
    0000002b: 	movl	$0x1, %esi
    00000030: 	jmp	.Ltmp307 # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp308:
    00000038: 	testb	$0xf, %bl
    0000003b: 	je	.Ltmp306 # Offset: 59
.Ltmp307:
    0000003d: 	movq	%rbx, %rax
    00000040: 	movl	%ebx, %ecx
    00000042: 	movl	%esi, %edx
    00000044: 	addq	$0x1, %rbx
    00000048: 	shrq	$0x4, %rax
    0000004c: 	andl	$0xf, %ecx
    0000004f: 	shll	%cl, %edx
    00000051: 	orw	%dx, (%r12,%rax,2)
    00000056: 	subq	$0x1, %rbp
    0000005a: 	jne	.Ltmp308 # Offset: 90
.Ltmp305:
    0000005c: 	addq	$0x8, %rsp
    00000060: 	popq	%rbx
    00000061: 	popq	%rbp
    00000062: 	popq	%r12
    00000064: 	popq	%r13
    00000066: 	retq # Offset: 102
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp306:
    00000070: 	movq	%rbx, %rax
    00000073: 	shrq	$0x4, %rax
    00000077: 	cmpq	$0xf, %rbp
    0000007b: 	jbe	.Ltmp309 # Offset: 123
    00000081: 	leaq	-0x10(%rbp), %r13
    00000085: 	leaq	(%r12,%rax,2), %rdi
    00000089: 	movl	$0xff, %esi
    0000008e: 	movq	%r13, %rdx
    00000091: 	andq	$-0x10, %r13
    00000095: 	shrq	$0x4, %rdx
    00000099: 	leaq	0x10(%rbx,%r13), %rbx
    0000009e: 	leaq	0x2(%rdx,%rdx), %rdx
    000000a3: 	callq	memset@PLT # Offset: 163
    000000a8: 	andl	$0xf, %ebp
    000000ab: 	leaq	-0x1(%rbp), %rax
    000000af: 	je	.Ltmp305 # Offset: 175
.Ltmp310:
    000000b1: 	movq	%rbx, %rsi
    000000b4: 	movl	%ebx, %ecx
    000000b6: 	movl	$0x1, %edx
    000000bb: 	andl	$0xf, %ecx
    000000be: 	shrq	$0x4, %rsi
    000000c2: 	movl	%edx, %edi
    000000c4: 	shll	%cl, %edi
    000000c6: 	leaq	0x1(%rbx), %rcx
    000000ca: 	orw	%di, (%r12,%rsi,2)
    000000cf: 	testq	%rax, %rax
    000000d2: 	je	.Ltmp305 # Offset: 210
    000000d4: 	movq	%rcx, %rsi
    000000d7: 	movl	%edx, %edi
    000000d9: 	andl	$0xf, %ecx
    000000dc: 	shrq	$0x4, %rsi
    000000e0: 	shll	%cl, %edi
    000000e2: 	leaq	0x2(%rbx), %rcx
    000000e6: 	orw	%di, (%r12,%rsi,2)
    000000eb: 	cmpq	$0x1, %rax
    000000ef: 	je	.Ltmp305 # Offset: 239
    000000f5: 	movq	%rcx, %rsi
    000000f8: 	movl	%edx, %edi
    000000fa: 	andl	$0xf, %ecx
    000000fd: 	shrq	$0x4, %rsi
    00000101: 	shll	%cl, %edi
    00000103: 	leaq	0x3(%rbx), %rcx
    00000107: 	orw	%di, (%r12,%rsi,2)
    0000010c: 	cmpq	$0x2, %rax
    00000110: 	je	.Ltmp305 # Offset: 272
    00000116: 	movq	%rcx, %rsi
    00000119: 	movl	%edx, %edi
    0000011b: 	andl	$0xf, %ecx
    0000011e: 	shrq	$0x4, %rsi
    00000122: 	shll	%cl, %edi
    00000124: 	leaq	0x4(%rbx), %rcx
    00000128: 	orw	%di, (%r12,%rsi,2)
    0000012d: 	cmpq	$0x3, %rax
    00000131: 	je	.Ltmp305 # Offset: 305
    00000137: 	movq	%rcx, %rsi
    0000013a: 	movl	%edx, %edi
    0000013c: 	andl	$0xf, %ecx
    0000013f: 	shrq	$0x4, %rsi
    00000143: 	shll	%cl, %edi
    00000145: 	leaq	0x5(%rbx), %rcx
    00000149: 	orw	%di, (%r12,%rsi,2)
    0000014e: 	cmpq	$0x4, %rax
    00000152: 	je	.Ltmp305 # Offset: 338
    00000158: 	movq	%rcx, %rsi
    0000015b: 	movl	%edx, %edi
    0000015d: 	andl	$0xf, %ecx
    00000160: 	shrq	$0x4, %rsi
    00000164: 	shll	%cl, %edi
    00000166: 	leaq	0x6(%rbx), %rcx
    0000016a: 	orw	%di, (%r12,%rsi,2)
    0000016f: 	cmpq	$0x5, %rax
    00000173: 	je	.Ltmp305 # Offset: 371
    00000179: 	movq	%rcx, %rsi
    0000017c: 	movl	%edx, %edi
    0000017e: 	andl	$0xf, %ecx
    00000181: 	shrq	$0x4, %rsi
    00000185: 	shll	%cl, %edi
    00000187: 	leaq	0x7(%rbx), %rcx
    0000018b: 	orw	%di, (%r12,%rsi,2)
    00000190: 	cmpq	$0x6, %rax
    00000194: 	je	.Ltmp305 # Offset: 404
    0000019a: 	movq	%rcx, %rsi
    0000019d: 	movl	%edx, %edi
    0000019f: 	andl	$0xf, %ecx
    000001a2: 	shrq	$0x4, %rsi
    000001a6: 	shll	%cl, %edi
    000001a8: 	leaq	0x8(%rbx), %rcx
    000001ac: 	orw	%di, (%r12,%rsi,2)
    000001b1: 	cmpq	$0x7, %rax
    000001b5: 	je	.Ltmp305 # Offset: 437
    000001bb: 	movq	%rcx, %rsi
    000001be: 	movl	%edx, %edi
    000001c0: 	andl	$0xf, %ecx
    000001c3: 	shrq	$0x4, %rsi
    000001c7: 	shll	%cl, %edi
    000001c9: 	leaq	0x9(%rbx), %rcx
    000001cd: 	orw	%di, (%r12,%rsi,2)
    000001d2: 	cmpq	$0x8, %rax
    000001d6: 	je	.Ltmp305 # Offset: 470
    000001dc: 	movq	%rcx, %rsi
    000001df: 	andl	$0xf, %ecx
    000001e2: 	shrq	$0x4, %rsi
    000001e6: 	shll	%cl, %edx
    000001e8: 	leaq	0xa(%rbx), %rcx
    000001ec: 	orw	%dx, (%r12,%rsi,2)
    000001f1: 	cmpq	$0x9, %rax
    000001f5: 	je	.Ltmp305 # Offset: 501
    000001fb: 	movq	%rcx, %rsi
    000001fe: 	movl	$0x1, %edx
    00000203: 	andl	$0xf, %ecx
    00000206: 	shrq	$0x4, %rsi
    0000020a: 	movl	%edx, %edi
    0000020c: 	shll	%cl, %edi
    0000020e: 	leaq	0xb(%rbx), %rcx
    00000212: 	orw	%di, (%r12,%rsi,2)
    00000217: 	cmpq	$0xa, %rax
    0000021b: 	je	.Ltmp305 # Offset: 539
    00000221: 	movq	%rcx, %rsi
    00000224: 	movl	%edx, %edi
    00000226: 	andl	$0xf, %ecx
    00000229: 	shrq	$0x4, %rsi
    0000022d: 	shll	%cl, %edi
    0000022f: 	leaq	0xc(%rbx), %rcx
    00000233: 	orw	%di, (%r12,%rsi,2)
    00000238: 	cmpq	$0xb, %rax
    0000023c: 	je	.Ltmp305 # Offset: 572
    00000242: 	movq	%rcx, %rsi
    00000245: 	movl	%edx, %edi
    00000247: 	andl	$0xf, %ecx
    0000024a: 	shrq	$0x4, %rsi
    0000024e: 	shll	%cl, %edi
    00000250: 	leaq	0xd(%rbx), %rcx
    00000254: 	orw	%di, (%r12,%rsi,2)
    00000259: 	cmpq	$0xc, %rax
    0000025d: 	je	.Ltmp305 # Offset: 605
    00000263: 	movq	%rcx, %rsi
    00000266: 	movl	%edx, %edi
    00000268: 	andl	$0xf, %ecx
    0000026b: 	shrq	$0x4, %rsi
    0000026f: 	shll	%cl, %edi
    00000271: 	leaq	0xe(%rbx), %rcx
    00000275: 	orw	%di, (%r12,%rsi,2)
    0000027a: 	cmpq	$0xd, %rax
    0000027e: 	je	.Ltmp305 # Offset: 638
    00000284: 	movq	%rcx, %rax
    00000287: 	andl	$0xf, %ecx
    0000028a: 	shrq	$0x4, %rax
    0000028e: 	shll	%cl, %edx
    00000290: 	orw	%dx, (%r12,%rax,2)
    00000295: 	addq	$0x8, %rsp
    00000299: 	popq	%rbx
    0000029a: 	popq	%rbp
    0000029b: 	popq	%r12
    0000029d: 	popq	%r13
    0000029f: 	retq # Offset: 671
.Ltmp304:
    000002a0: 	retq # Offset: 672
.Ltmp309:
    000002a1: 	leaq	-0x1(%rbp), %rax
    000002a5: 	jmp	.Ltmp310 # Offset: 677
DWARF CFI Instructions:
    <empty>
End of Function "_Z14SetBitsHalfOptItEvPT_mm"

Binary Function "_Z12SetBitsShiftItEvPT_mm" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x76a0
  Size        : 0x39
  MaxSize     : 0x40
  Offset      : 0x76a0
  Section     : .text
  Orc Section : .local.text._Z12SetBitsShiftItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp311 # Offset: 7
    00000009: 	je	.Ltmp311 # Offset: 9
    0000000b: 	movl	$0x1, %r8d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp312:
    00000018: 	movq	%rsi, %rax
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r8d, %r9d
    00000020: 	addq	$0x1, %rsi
    00000024: 	shrq	$0x4, %rax
    00000028: 	andl	$0xf, %ecx
    0000002b: 	shll	%cl, %r9d
    0000002e: 	orw	%r9w, (%rdi,%rax,2)
    00000033: 	cmpq	%rsi, %rdx
    00000036: 	jne	.Ltmp312 # Offset: 54
.Ltmp311:
    00000038: 	retq # Offset: 56
DWARF CFI Instructions:
    <empty>
End of Function "_Z12SetBitsShiftItEvPT_mm"

Binary Function "_Z7SetBitsItEvPT_mm" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x76e0
  Size        : 0x39
  MaxSize     : 0x40
  Offset      : 0x76e0
  Section     : .text
  Orc Section : .local.text._Z7SetBitsItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp313 # Offset: 7
    00000009: 	je	.Ltmp313 # Offset: 9
    0000000b: 	movl	$0x1, %r8d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp314:
    00000018: 	movq	%rsi, %rax
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r8d, %r9d
    00000020: 	addq	$0x1, %rsi
    00000024: 	shrq	$0x4, %rax
    00000028: 	andl	$0xf, %ecx
    0000002b: 	shll	%cl, %r9d
    0000002e: 	orw	%r9w, (%rdi,%rax,2)
    00000033: 	cmpq	%rsi, %rdx
    00000036: 	jne	.Ltmp314 # Offset: 54
.Ltmp313:
    00000038: 	retq # Offset: 56
DWARF CFI Instructions:
    <empty>
End of Function "_Z7SetBitsItEvPT_mm"

Binary Function "_Z16ClearBitsHalfOptItEvPT_mm" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x7720
  Size        : 0x30a
  MaxSize     : 0x310
  Offset      : 0x7720
  Section     : .text
  Orc Section : .local.text._Z16ClearBitsHalfOptItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp315 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rsi, %rbx
    00000016: 	subq	$0x8, %rsp
    0000001a: 	subq	%rsi, %rdx
    0000001d: 	je	.Ltmp316 # Offset: 29
    0000001f: 	movq	%rdi, %r12
    00000022: 	testb	$0xf, %sil
    00000026: 	je	.Ltmp317 # Offset: 38
    00000028: 	movl	$0x1, %edi
    0000002d: 	jmp	.Ltmp318 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp319:
    00000030: 	testb	$0xf, %bl
    00000033: 	je	.Ltmp317 # Offset: 51
.Ltmp318:
    00000035: 	movl	%ebx, %ecx
    00000037: 	movq	%rbx, %rsi
    0000003a: 	movl	%edi, %eax
    0000003c: 	addq	$0x1, %rbx
    00000040: 	andl	$0xf, %ecx
    00000043: 	shrq	$0x4, %rsi
    00000047: 	shll	%cl, %eax
    00000049: 	notl	%eax
    0000004b: 	andw	%ax, (%r12,%rsi,2)
    00000050: 	subq	$0x1, %rdx
    00000054: 	jne	.Ltmp319 # Offset: 84
.Ltmp316:
    00000056: 	addq	$0x8, %rsp
    0000005a: 	popq	%rbx
    0000005b: 	popq	%rbp
    0000005c: 	popq	%r12
    0000005e: 	popq	%r13
    00000060: 	retq # Offset: 96
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp317:
    00000068: 	movq	%rbx, %rax
    0000006b: 	shrq	$0x4, %rax
    0000006f: 	cmpq	$0x10, %rdx
    00000073: 	jbe	.Ltmp320 # Offset: 115
    00000079: 	leaq	-0x11(%rdx), %rbp
    0000007d: 	leaq	(%r12,%rax,2), %rdi
    00000081: 	xorl	%esi, %esi
    00000083: 	movq	%rbp, %r13
    00000086: 	shrq	$0x4, %r13
    0000008a: 	leaq	0x2(%r13,%r13), %rdx
    0000008f: 	shlq	$0x4, %r13
    00000093: 	callq	memset@PLT # Offset: 147
    00000098: 	movq	%rbp, %rax
    0000009b: 	movq	%rbp, %rdx
    0000009e: 	andq	$-0x10, %rax
    000000a2: 	subq	%r13, %rdx
    000000a5: 	leaq	0x10(%rbx,%rax), %rbx
.Ltmp321:
    000000aa: 	movl	%ebx, %ecx
    000000ac: 	movl	$0x1, %eax
    000000b1: 	movq	%rbx, %rsi
    000000b4: 	andl	$0xf, %ecx
    000000b7: 	movl	%eax, %edi
    000000b9: 	shrq	$0x4, %rsi
    000000bd: 	shll	%cl, %edi
    000000bf: 	movl	%edi, %ecx
    000000c1: 	notl	%ecx
    000000c3: 	andw	%cx, (%r12,%rsi,2)
    000000c8: 	leaq	0x1(%rbx), %rcx
    000000cc: 	testq	%rdx, %rdx
    000000cf: 	je	.Ltmp316 # Offset: 207
    000000d1: 	movq	%rcx, %rsi
    000000d4: 	movl	%eax, %edi
    000000d6: 	andl	$0xf, %ecx
    000000d9: 	shll	%cl, %edi
    000000db: 	shrq	$0x4, %rsi
    000000df: 	movl	%edi, %ecx
    000000e1: 	notl	%ecx
    000000e3: 	andw	%cx, (%r12,%rsi,2)
    000000e8: 	leaq	0x2(%rbx), %rcx
    000000ec: 	cmpq	$0x1, %rdx
    000000f0: 	je	.Ltmp316 # Offset: 240
    000000f6: 	movq	%rcx, %rsi
    000000f9: 	movl	%eax, %edi
    000000fb: 	andl	$0xf, %ecx
    000000fe: 	shll	%cl, %edi
    00000100: 	shrq	$0x4, %rsi
    00000104: 	movl	%edi, %ecx
    00000106: 	notl	%ecx
    00000108: 	andw	%cx, (%r12,%rsi,2)
    0000010d: 	leaq	0x3(%rbx), %rcx
    00000111: 	cmpq	$0x2, %rdx
    00000115: 	je	.Ltmp316 # Offset: 277
    0000011b: 	movq	%rcx, %rsi
    0000011e: 	movl	%eax, %edi
    00000120: 	andl	$0xf, %ecx
    00000123: 	shll	%cl, %edi
    00000125: 	shrq	$0x4, %rsi
    00000129: 	movl	%edi, %ecx
    0000012b: 	notl	%ecx
    0000012d: 	andw	%cx, (%r12,%rsi,2)
    00000132: 	leaq	0x4(%rbx), %rcx
    00000136: 	cmpq	$0x3, %rdx
    0000013a: 	je	.Ltmp316 # Offset: 314
    00000140: 	movq	%rcx, %rsi
    00000143: 	movl	%eax, %edi
    00000145: 	andl	$0xf, %ecx
    00000148: 	shll	%cl, %edi
    0000014a: 	shrq	$0x4, %rsi
    0000014e: 	movl	%edi, %ecx
    00000150: 	notl	%ecx
    00000152: 	andw	%cx, (%r12,%rsi,2)
    00000157: 	leaq	0x5(%rbx), %rcx
    0000015b: 	cmpq	$0x4, %rdx
    0000015f: 	je	.Ltmp316 # Offset: 351
    00000165: 	movq	%rcx, %rsi
    00000168: 	movl	%eax, %edi
    0000016a: 	andl	$0xf, %ecx
    0000016d: 	shll	%cl, %edi
    0000016f: 	shrq	$0x4, %rsi
    00000173: 	movl	%edi, %ecx
    00000175: 	notl	%ecx
    00000177: 	andw	%cx, (%r12,%rsi,2)
    0000017c: 	leaq	0x6(%rbx), %rcx
    00000180: 	cmpq	$0x5, %rdx
    00000184: 	je	.Ltmp316 # Offset: 388
    0000018a: 	movq	%rcx, %rsi
    0000018d: 	movl	%eax, %edi
    0000018f: 	andl	$0xf, %ecx
    00000192: 	shll	%cl, %edi
    00000194: 	shrq	$0x4, %rsi
    00000198: 	movl	%edi, %ecx
    0000019a: 	notl	%ecx
    0000019c: 	andw	%cx, (%r12,%rsi,2)
    000001a1: 	leaq	0x7(%rbx), %rcx
    000001a5: 	cmpq	$0x6, %rdx
    000001a9: 	je	.Ltmp316 # Offset: 425
    000001af: 	movq	%rcx, %rsi
    000001b2: 	movl	%eax, %edi
    000001b4: 	andl	$0xf, %ecx
    000001b7: 	shll	%cl, %edi
    000001b9: 	shrq	$0x4, %rsi
    000001bd: 	movl	%edi, %ecx
    000001bf: 	notl	%ecx
    000001c1: 	andw	%cx, (%r12,%rsi,2)
    000001c6: 	leaq	0x8(%rbx), %rcx
    000001ca: 	cmpq	$0x7, %rdx
    000001ce: 	je	.Ltmp316 # Offset: 462
    000001d4: 	movq	%rcx, %rsi
    000001d7: 	movl	%eax, %edi
    000001d9: 	andl	$0xf, %ecx
    000001dc: 	shll	%cl, %edi
    000001de: 	shrq	$0x4, %rsi
    000001e2: 	movl	%edi, %ecx
    000001e4: 	notl	%ecx
    000001e6: 	andw	%cx, (%r12,%rsi,2)
    000001eb: 	leaq	0x9(%rbx), %rcx
    000001ef: 	cmpq	$0x8, %rdx
    000001f3: 	je	.Ltmp316 # Offset: 499
    000001f9: 	movq	%rcx, %rsi
    000001fc: 	andl	$0xf, %ecx
    000001ff: 	shll	%cl, %eax
    00000201: 	shrq	$0x4, %rsi
    00000205: 	leaq	0xa(%rbx), %rcx
    00000209: 	notl	%eax
    0000020b: 	andw	%ax, (%r12,%rsi,2)
    00000210: 	cmpq	$0x9, %rdx
    00000214: 	je	.Ltmp316 # Offset: 532
    0000021a: 	movl	$0x1, %eax
    0000021f: 	movq	%rcx, %rsi
    00000222: 	andl	$0xf, %ecx
    00000225: 	movl	%eax, %edi
    00000227: 	shrq	$0x4, %rsi
    0000022b: 	shll	%cl, %edi
    0000022d: 	movl	%edi, %ecx
    0000022f: 	notl	%ecx
    00000231: 	andw	%cx, (%r12,%rsi,2)
    00000236: 	leaq	0xb(%rbx), %rcx
    0000023a: 	cmpq	$0xa, %rdx
    0000023e: 	je	.Ltmp316 # Offset: 574
    00000244: 	movq	%rcx, %rsi
    00000247: 	movl	%eax, %edi
    00000249: 	andl	$0xf, %ecx
    0000024c: 	shll	%cl, %edi
    0000024e: 	shrq	$0x4, %rsi
    00000252: 	movl	%edi, %ecx
    00000254: 	notl	%ecx
    00000256: 	andw	%cx, (%r12,%rsi,2)
    0000025b: 	leaq	0xc(%rbx), %rcx
    0000025f: 	cmpq	$0xb, %rdx
    00000263: 	je	.Ltmp316 # Offset: 611
    00000269: 	movq	%rcx, %rsi
    0000026c: 	movl	%eax, %edi
    0000026e: 	andl	$0xf, %ecx
    00000271: 	shll	%cl, %edi
    00000273: 	shrq	$0x4, %rsi
    00000277: 	movl	%edi, %ecx
    00000279: 	notl	%ecx
    0000027b: 	andw	%cx, (%r12,%rsi,2)
    00000280: 	leaq	0xd(%rbx), %rcx
    00000284: 	cmpq	$0xc, %rdx
    00000288: 	je	.Ltmp316 # Offset: 648
    0000028e: 	movq	%rcx, %rsi
    00000291: 	movl	%eax, %edi
    00000293: 	andl	$0xf, %ecx
    00000296: 	shll	%cl, %edi
    00000298: 	shrq	$0x4, %rsi
    0000029c: 	movl	%edi, %ecx
    0000029e: 	notl	%ecx
    000002a0: 	andw	%cx, (%r12,%rsi,2)
    000002a5: 	leaq	0xe(%rbx), %rcx
    000002a9: 	cmpq	$0xd, %rdx
    000002ad: 	je	.Ltmp316 # Offset: 685
    000002b3: 	movq	%rcx, %rsi
    000002b6: 	movl	%eax, %edi
    000002b8: 	andl	$0xf, %ecx
    000002bb: 	shll	%cl, %edi
    000002bd: 	shrq	$0x4, %rsi
    000002c1: 	movl	%edi, %ecx
    000002c3: 	notl	%ecx
    000002c5: 	andw	%cx, (%r12,%rsi,2)
    000002ca: 	leaq	0xf(%rbx), %rcx
    000002ce: 	cmpq	$0xe, %rdx
    000002d2: 	je	.Ltmp316 # Offset: 722
    000002d8: 	movq	%rcx, %rdx
    000002db: 	andl	$0xf, %ecx
    000002de: 	shrq	$0x4, %rdx
    000002e2: 	shll	%cl, %eax
    000002e4: 	notl	%eax
    000002e6: 	andw	%ax, (%r12,%rdx,2)
    000002eb: 	addq	$0x8, %rsp
    000002ef: 	popq	%rbx
    000002f0: 	popq	%rbp
    000002f1: 	popq	%r12
    000002f3: 	popq	%r13
    000002f5: 	retq # Offset: 757
    000002f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp315:
    00000300: 	retq # Offset: 768
.Ltmp320:
    00000301: 	subq	$0x1, %rdx
    00000305: 	jmp	.Ltmp321 # Offset: 773
DWARF CFI Instructions:
    <empty>
End of Function "_Z16ClearBitsHalfOptItEvPT_mm"

Binary Function "_Z14ClearBitsShiftItEvPT_mm" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x7a30
  Size        : 0x3a
  MaxSize     : 0x40
  Offset      : 0x7a30
  Section     : .text
  Orc Section : .local.text._Z14ClearBitsShiftItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp322 # Offset: 7
    00000009: 	je	.Ltmp322 # Offset: 9
    0000000b: 	movl	$0x1, %r9d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp323:
    00000018: 	movl	%esi, %ecx
    0000001a: 	movq	%rsi, %r8
    0000001d: 	movl	%r9d, %eax
    00000020: 	addq	$0x1, %rsi
    00000024: 	andl	$0xf, %ecx
    00000027: 	shrq	$0x4, %r8
    0000002b: 	shll	%cl, %eax
    0000002d: 	notl	%eax
    0000002f: 	andw	%ax, (%rdi,%r8,2)
    00000034: 	cmpq	%rsi, %rdx
    00000037: 	jne	.Ltmp323 # Offset: 55
.Ltmp322:
    00000039: 	retq # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z14ClearBitsShiftItEvPT_mm"

Binary Function "_Z9ClearBitsItEvPT_mm" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x7a70
  Size        : 0x3a
  MaxSize     : 0x40
  Offset      : 0x7a70
  Section     : .text
  Orc Section : .local.text._Z9ClearBitsItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp324 # Offset: 7
    00000009: 	je	.Ltmp324 # Offset: 9
    0000000b: 	movl	$0x1, %r9d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp325:
    00000018: 	movl	%esi, %ecx
    0000001a: 	movq	%rsi, %r8
    0000001d: 	movl	%r9d, %eax
    00000020: 	addq	$0x1, %rsi
    00000024: 	andl	$0xf, %ecx
    00000027: 	shrq	$0x4, %r8
    0000002b: 	shll	%cl, %eax
    0000002d: 	notl	%eax
    0000002f: 	andw	%ax, (%rdi,%r8,2)
    00000034: 	cmpq	%rsi, %rdx
    00000037: 	jne	.Ltmp325 # Offset: 55
.Ltmp324:
    00000039: 	retq # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z9ClearBitsItEvPT_mm"

Binary Function "_Z17InvertBitsHalfOptItEvPT_mm" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x7ab0
  Size        : 0x372
  MaxSize     : 0x380
  Offset      : 0x7ab0
  Section     : .text
  Orc Section : .local.text._Z17InvertBitsHalfOptItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp326 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	subq	%rsi, %rdx
    00000013: 	je	.Ltmp326 # Offset: 19
    00000019: 	pushq	%rbx
    0000001a: 	testb	$0xf, %al
    0000001c: 	je	.Ltmp327 # Offset: 28
    0000001e: 	movl	$0x1, %r8d
    00000024: 	jmp	.Ltmp328 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp329:
    00000030: 	testb	$0xf, %al
    00000032: 	je	.Ltmp327 # Offset: 50
.Ltmp328:
    00000034: 	movq	%rax, %rsi
    00000037: 	movl	%eax, %ecx
    00000039: 	movl	%r8d, %ebx
    0000003c: 	addq	$0x1, %rax
    00000040: 	shrq	$0x4, %rsi
    00000044: 	andl	$0xf, %ecx
    00000047: 	shll	%cl, %ebx
    00000049: 	xorw	%bx, (%rdi,%rsi,2)
    0000004d: 	subq	$0x1, %rdx
    00000051: 	jne	.Ltmp329 # Offset: 81
.Ltmp335:
    00000053: 	popq	%rbx
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp327:
    00000058: 	movq	%rax, %r11
    0000005b: 	shrq	$0x4, %r11
    0000005f: 	cmpq	$0x10, %rdx
    00000063: 	jbe	.Ltmp330 # Offset: 99
    00000069: 	leaq	-0x11(%rdx), %r8
    0000006d: 	movq	%r8, %r9
    00000070: 	shrq	$0x4, %r9
    00000074: 	leaq	0x1(%r9), %r10
    00000078: 	cmpq	$0x6f, %r8
    0000007c: 	jbe	.Ltmp331 # Offset: 124
    00000082: 	movq	%r10, %rsi
    00000085: 	leaq	(%rdi,%r11,2), %rcx
    00000089: 	pcmpeqd	%xmm1, %xmm1
    0000008d: 	shrq	$0x3, %rsi
    00000091: 	shlq	$0x4, %rsi
    00000095: 	addq	%rcx, %rsi
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp332:
    000000a0: 	movdqu	(%rcx), %xmm0
    000000a4: 	addq	$0x10, %rcx
    000000a8: 	pxor	%xmm1, %xmm0
    000000ac: 	movups	%xmm0, -0x10(%rcx)
    000000b0: 	cmpq	%rcx, %rsi
    000000b3: 	jne	.Ltmp332 # Offset: 179
    000000b5: 	movq	%r10, %rcx
    000000b8: 	andq	$-0x8, %rcx
    000000bc: 	movq	%rcx, %rsi
    000000bf: 	shlq	$0x4, %rsi
    000000c3: 	subq	%rsi, %rdx
    000000c6: 	leaq	(%rcx,%r11), %rsi
    000000ca: 	cmpq	%rcx, %r10
    000000cd: 	je	.Ltmp333 # Offset: 205
.Ltmp336:
    000000cf: 	movq	%r9, %rbx
    000000d2: 	subq	%rcx, %rbx
    000000d5: 	leaq	0x1(%rbx), %r10
    000000d9: 	cmpq	$0x2, %rbx
    000000dd: 	jbe	.Ltmp334 # Offset: 221
    000000df: 	movq	DATAat0x165a0(%rip), %xmm1
    000000e7: 	addq	%r11, %rcx
    000000ea: 	leaq	(%rdi,%rcx,2), %rcx
    000000ee: 	movq	(%rcx), %xmm0
    000000f2: 	pxor	%xmm1, %xmm0
    000000f6: 	movq	%xmm0, (%rcx)
    000000fa: 	movq	%r10, %rcx
    000000fd: 	andq	$-0x4, %rcx
    00000101: 	movq	%rcx, %r11
    00000104: 	addq	%rcx, %rsi
    00000107: 	shlq	$0x4, %r11
    0000010b: 	subq	%r11, %rdx
    0000010e: 	cmpq	%r10, %rcx
    00000111: 	je	.Ltmp333 # Offset: 273
.Ltmp334:
    00000113: 	addq	%rsi, %rsi
    00000116: 	leaq	-0x10(%rdx), %rcx
    0000011a: 	notw	(%rdi,%rsi)
    0000011e: 	cmpq	$0x10, %rcx
    00000122: 	jbe	.Ltmp333 # Offset: 290
    00000124: 	subq	$0x20, %rdx
    00000128: 	notw	0x2(%rdi,%rsi)
    0000012d: 	cmpq	$0x10, %rdx
    00000131: 	jbe	.Ltmp333 # Offset: 305
    00000133: 	notw	0x4(%rdi,%rsi)
.Ltmp333:
    00000138: 	movq	%r8, %rdx
    0000013b: 	shlq	$0x4, %r9
    0000013f: 	andq	$-0x10, %rdx
    00000143: 	leaq	0x10(%rax,%rdx), %rax
    00000148: 	movq	%r8, %rdx
    0000014b: 	subq	%r9, %rdx
.Ltmp337:
    0000014e: 	movq	%rax, %r8
    00000151: 	movl	%eax, %ecx
    00000153: 	movl	$0x1, %esi
    00000158: 	andl	$0xf, %ecx
    0000015b: 	shrq	$0x4, %r8
    0000015f: 	movl	%esi, %ebx
    00000161: 	shll	%cl, %ebx
    00000163: 	leaq	0x1(%rax), %rcx
    00000167: 	xorw	%bx, (%rdi,%r8,2)
    0000016c: 	testq	%rdx, %rdx
    0000016f: 	je	.Ltmp335 # Offset: 367
    00000175: 	movq	%rcx, %r8
    00000178: 	movl	%esi, %ebx
    0000017a: 	andl	$0xf, %ecx
    0000017d: 	shrq	$0x4, %r8
    00000181: 	shll	%cl, %ebx
    00000183: 	leaq	0x2(%rax), %rcx
    00000187: 	xorw	%bx, (%rdi,%r8,2)
    0000018c: 	cmpq	$0x1, %rdx
    00000190: 	je	.Ltmp335 # Offset: 400
    00000196: 	movq	%rcx, %r8
    00000199: 	movl	%esi, %ebx
    0000019b: 	andl	$0xf, %ecx
    0000019e: 	shrq	$0x4, %r8
    000001a2: 	shll	%cl, %ebx
    000001a4: 	leaq	0x3(%rax), %rcx
    000001a8: 	xorw	%bx, (%rdi,%r8,2)
    000001ad: 	cmpq	$0x2, %rdx
    000001b1: 	je	.Ltmp335 # Offset: 433
    000001b7: 	movq	%rcx, %r8
    000001ba: 	movl	%esi, %ebx
    000001bc: 	andl	$0xf, %ecx
    000001bf: 	shrq	$0x4, %r8
    000001c3: 	shll	%cl, %ebx
    000001c5: 	leaq	0x4(%rax), %rcx
    000001c9: 	xorw	%bx, (%rdi,%r8,2)
    000001ce: 	cmpq	$0x3, %rdx
    000001d2: 	je	.Ltmp335 # Offset: 466
    000001d8: 	movq	%rcx, %r8
    000001db: 	movl	%esi, %ebx
    000001dd: 	andl	$0xf, %ecx
    000001e0: 	shrq	$0x4, %r8
    000001e4: 	shll	%cl, %ebx
    000001e6: 	leaq	0x5(%rax), %rcx
    000001ea: 	xorw	%bx, (%rdi,%r8,2)
    000001ef: 	cmpq	$0x4, %rdx
    000001f3: 	je	.Ltmp335 # Offset: 499
    000001f9: 	movq	%rcx, %r8
    000001fc: 	movl	%esi, %ebx
    000001fe: 	andl	$0xf, %ecx
    00000201: 	shrq	$0x4, %r8
    00000205: 	shll	%cl, %ebx
    00000207: 	leaq	0x6(%rax), %rcx
    0000020b: 	xorw	%bx, (%rdi,%r8,2)
    00000210: 	cmpq	$0x5, %rdx
    00000214: 	je	.Ltmp335 # Offset: 532
    0000021a: 	movq	%rcx, %r8
    0000021d: 	movl	%esi, %ebx
    0000021f: 	andl	$0xf, %ecx
    00000222: 	shrq	$0x4, %r8
    00000226: 	shll	%cl, %ebx
    00000228: 	leaq	0x7(%rax), %rcx
    0000022c: 	xorw	%bx, (%rdi,%r8,2)
    00000231: 	cmpq	$0x6, %rdx
    00000235: 	je	.Ltmp335 # Offset: 565
    0000023b: 	movq	%rcx, %r8
    0000023e: 	movl	%esi, %ebx
    00000240: 	andl	$0xf, %ecx
    00000243: 	shrq	$0x4, %r8
    00000247: 	shll	%cl, %ebx
    00000249: 	leaq	0x8(%rax), %rcx
    0000024d: 	xorw	%bx, (%rdi,%r8,2)
    00000252: 	cmpq	$0x7, %rdx
    00000256: 	je	.Ltmp335 # Offset: 598
    0000025c: 	movq	%rcx, %r8
    0000025f: 	movl	%esi, %ebx
    00000261: 	andl	$0xf, %ecx
    00000264: 	shrq	$0x4, %r8
    00000268: 	shll	%cl, %ebx
    0000026a: 	leaq	0x9(%rax), %rcx
    0000026e: 	xorw	%bx, (%rdi,%r8,2)
    00000273: 	cmpq	$0x8, %rdx
    00000277: 	je	.Ltmp335 # Offset: 631
    0000027d: 	movq	%rcx, %r8
    00000280: 	andl	$0xf, %ecx
    00000283: 	shrq	$0x4, %r8
    00000287: 	shll	%cl, %esi
    00000289: 	leaq	0xa(%rax), %rcx
    0000028d: 	xorw	%si, (%rdi,%r8,2)
    00000292: 	cmpq	$0x9, %rdx
    00000296: 	je	.Ltmp335 # Offset: 662
    0000029c: 	movq	%rcx, %r8
    0000029f: 	movl	$0x1, %esi
    000002a4: 	andl	$0xf, %ecx
    000002a7: 	shrq	$0x4, %r8
    000002ab: 	movl	%esi, %ebx
    000002ad: 	shll	%cl, %ebx
    000002af: 	leaq	0xb(%rax), %rcx
    000002b3: 	xorw	%bx, (%rdi,%r8,2)
    000002b8: 	cmpq	$0xa, %rdx
    000002bc: 	je	.Ltmp335 # Offset: 700
    000002c2: 	movq	%rcx, %r8
    000002c5: 	movl	%esi, %ebx
    000002c7: 	andl	$0xf, %ecx
    000002ca: 	shrq	$0x4, %r8
    000002ce: 	shll	%cl, %ebx
    000002d0: 	leaq	0xc(%rax), %rcx
    000002d4: 	xorw	%bx, (%rdi,%r8,2)
    000002d9: 	cmpq	$0xb, %rdx
    000002dd: 	je	.Ltmp335 # Offset: 733
    000002e3: 	movq	%rcx, %r8
    000002e6: 	movl	%esi, %ebx
    000002e8: 	andl	$0xf, %ecx
    000002eb: 	shrq	$0x4, %r8
    000002ef: 	shll	%cl, %ebx
    000002f1: 	leaq	0xd(%rax), %rcx
    000002f5: 	xorw	%bx, (%rdi,%r8,2)
    000002fa: 	cmpq	$0xc, %rdx
    000002fe: 	je	.Ltmp335 # Offset: 766
    00000304: 	movq	%rcx, %r8
    00000307: 	movl	%esi, %ebx
    00000309: 	andl	$0xf, %ecx
    0000030c: 	shrq	$0x4, %r8
    00000310: 	shll	%cl, %ebx
    00000312: 	leaq	0xe(%rax), %rcx
    00000316: 	xorw	%bx, (%rdi,%r8,2)
    0000031b: 	cmpq	$0xd, %rdx
    0000031f: 	je	.Ltmp335 # Offset: 799
    00000325: 	movq	%rcx, %r8
    00000328: 	movl	%esi, %ebx
    0000032a: 	andl	$0xf, %ecx
    0000032d: 	shrq	$0x4, %r8
    00000331: 	shll	%cl, %ebx
    00000333: 	leaq	0xf(%rax), %rcx
    00000337: 	xorw	%bx, (%rdi,%r8,2)
    0000033c: 	cmpq	$0xe, %rdx
    00000340: 	je	.Ltmp335 # Offset: 832
    00000346: 	movq	%rcx, %rax
    00000349: 	andl	$0xf, %ecx
    0000034c: 	popq	%rbx
    0000034d: 	shrq	$0x4, %rax
    00000351: 	shll	%cl, %esi
    00000353: 	xorw	%si, (%rdi,%rax,2)
    00000357: 	retq # Offset: 855
.Ltmp331:
    00000358: 	movq	%r11, %rsi
    0000035b: 	xorl	%ecx, %ecx
    0000035d: 	jmp	.Ltmp336 # Offset: 861
    00000362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp326:
    00000368: 	retq # Offset: 872
.Ltmp330:
    00000369: 	subq	$0x1, %rdx
    0000036d: 	jmp	.Ltmp337 # Offset: 877
DWARF CFI Instructions:
    <empty>
End of Function "_Z17InvertBitsHalfOptItEvPT_mm"

Binary Function "_Z15InvertBitsShiftItEvPT_mm" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x7e30
  Size        : 0x39
  MaxSize     : 0x40
  Offset      : 0x7e30
  Section     : .text
  Orc Section : .local.text._Z15InvertBitsShiftItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp338 # Offset: 7
    00000009: 	je	.Ltmp338 # Offset: 9
    0000000b: 	movl	$0x1, %r8d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp339:
    00000018: 	movq	%rsi, %rax
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r8d, %r9d
    00000020: 	addq	$0x1, %rsi
    00000024: 	shrq	$0x4, %rax
    00000028: 	andl	$0xf, %ecx
    0000002b: 	shll	%cl, %r9d
    0000002e: 	xorw	%r9w, (%rdi,%rax,2)
    00000033: 	cmpq	%rsi, %rdx
    00000036: 	jne	.Ltmp339 # Offset: 54
.Ltmp338:
    00000038: 	retq # Offset: 56
DWARF CFI Instructions:
    <empty>
End of Function "_Z15InvertBitsShiftItEvPT_mm"

Binary Function "_Z10InvertBitsItEvPT_mm" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x7e70
  Size        : 0x39
  MaxSize     : 0x40
  Offset      : 0x7e70
  Section     : .text
  Orc Section : .local.text._Z10InvertBitsItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp340 # Offset: 7
    00000009: 	je	.Ltmp340 # Offset: 9
    0000000b: 	movl	$0x1, %r8d
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp341:
    00000018: 	movq	%rsi, %rax
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r8d, %r9d
    00000020: 	addq	$0x1, %rsi
    00000024: 	shrq	$0x4, %rax
    00000028: 	andl	$0xf, %ecx
    0000002b: 	shll	%cl, %r9d
    0000002e: 	xorw	%r9w, (%rdi,%rax,2)
    00000033: 	cmpq	%rsi, %rdx
    00000036: 	jne	.Ltmp341 # Offset: 54
.Ltmp340:
    00000038: 	retq # Offset: 56
DWARF CFI Instructions:
    <empty>
End of Function "_Z10InvertBitsItEvPT_mm"

Binary Function "_Z21AndBitTablesOptimizedItEvPT_PKS0_mm" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x7eb0
  Size        : 0x23d
  MaxSize     : 0x240
  Offset      : 0x7eb0
  Section     : .text
  Orc Section : .local.text._Z21AndBitTablesOptimizedItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp342 # Offset: 7
    0000000d: 	movq	%rcx, %r11
    00000010: 	movq	%rcx, %rax
    00000013: 	movq	%rsi, %r8
    00000016: 	movq	%rdx, %rsi
    00000019: 	subq	%rdx, %r11
    0000001c: 	shrq	$0x4, %rax
    00000020: 	pushq	%r14
    00000022: 	movq	%rcx, %r9
    00000025: 	shrq	$0x4, %rdx
    00000029: 	pushq	%r13
    0000002b: 	pushq	%r12
    0000002d: 	pushq	%rbp
    0000002e: 	pushq	%rbx
    0000002f: 	cmpq	%rdx, %rax
    00000032: 	ja	.Ltmp343 # Offset: 50
.Ltmp351:
    00000038: 	cmpq	$0xf, %r11
    0000003c: 	jbe	.Ltmp344 # Offset: 60
    00000042: 	leaq	(%rdx,%rdx), %r10
    00000046: 	leaq	0x1(%rdx), %rax
    0000004a: 	leaq	(%rdi,%r10), %rcx
    0000004e: 	leaq	0x2(%r8,%r10), %r12
    00000053: 	movq	%rax, %r13
    00000056: 	movq	%rcx, %rbp
    00000059: 	leaq	-0x10(%r11), %rbx
    0000005d: 	subq	%r12, %rbp
    00000060: 	cmpq	$0xc, %rbp
    00000064: 	jbe	.Ltmp345 # Offset: 100
    0000006a: 	cmpq	$0x2f, %rbx
    0000006e: 	jbe	.Ltmp345 # Offset: 110
    00000074: 	movq	%rbx, %r14
    00000077: 	shrq	$0x4, %r14
    0000007b: 	leaq	0x1(%r14), %r12
    0000007f: 	cmpq	$0x6f, %rbx
    00000083: 	jbe	.Ltmp346 # Offset: 131
    00000089: 	movq	%r12, %rbp
    0000008c: 	addq	%r8, %r10
    0000008f: 	xorl	%eax, %eax
    00000091: 	shrq	$0x3, %rbp
    00000095: 	shlq	$0x4, %rbp
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp347:
    000000a0: 	movdqu	(%rcx,%rax), %xmm0
    000000a5: 	movdqu	(%r10,%rax), %xmm2
    000000ab: 	pand	%xmm2, %xmm0
    000000af: 	movups	%xmm0, (%rcx,%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%rax, %rbp
    000000ba: 	jne	.Ltmp347 # Offset: 186
    000000bc: 	movq	%r12, %r10
    000000bf: 	movq	%r11, %rax
    000000c2: 	andq	$-0x8, %r10
    000000c6: 	movq	%r10, %rcx
    000000c9: 	addq	%r10, %rdx
    000000cc: 	shlq	$0x4, %rcx
    000000d0: 	subq	%rcx, %rax
    000000d3: 	movq	%rdx, %rcx
    000000d6: 	cmpq	%r10, %r12
    000000d9: 	je	.Ltmp348 # Offset: 217
    000000db: 	subq	%r10, %r14
    000000de: 	leaq	0x1(%r14), %r12
    000000e2: 	cmpq	$0x2, %r14
    000000e6: 	jbe	.Ltmp349 # Offset: 230
.Ltmp354:
    000000e8: 	leaq	(%rdi,%rdx,2), %r10
    000000ec: 	movq	(%r8,%rdx,2), %xmm0
    000000f2: 	movq	%r12, %rdx
    000000f5: 	movq	(%r10), %xmm1
    000000fa: 	andq	$-0x4, %rdx
    000000fe: 	addq	%rdx, %rcx
    00000101: 	pand	%xmm1, %xmm0
    00000105: 	movq	%xmm0, (%r10)
    0000010a: 	movq	%rdx, %r10
    0000010d: 	shlq	$0x4, %r10
    00000111: 	subq	%r10, %rax
    00000114: 	cmpq	%rdx, %r12
    00000117: 	je	.Ltmp348 # Offset: 279
.Ltmp349:
    00000119: 	leaq	(%rcx,%rcx), %rdx
    0000011d: 	movzwl	(%r8,%rcx,2), %ecx
    00000122: 	andw	%cx, (%rdi,%rdx)
    00000126: 	leaq	-0x10(%rax), %rcx
    0000012a: 	cmpq	$0xf, %rcx
    0000012e: 	jbe	.Ltmp348 # Offset: 302
    00000130: 	subq	$0x20, %rax
    00000134: 	movzwl	0x2(%r8,%rdx), %ecx
    0000013a: 	andw	%cx, 0x2(%rdi,%rdx)
    0000013f: 	cmpq	$0xf, %rax
    00000143: 	jbe	.Ltmp348 # Offset: 323
    00000145: 	movzwl	0x4(%r8,%rdx), %eax
    0000014b: 	andw	%ax, 0x4(%rdi,%rdx)
.Ltmp348:
    00000150: 	movq	%rbx, %rax
    00000153: 	shrq	$0x4, %rbx
    00000157: 	andl	$0xf, %r11d
    0000015b: 	andq	$-0x10, %rax
    0000015f: 	leaq	(%rbx,%r13), %rdx
    00000163: 	leaq	0x10(%rsi,%rax), %rsi
.Ltmp344:
    00000168: 	testq	%r11, %r11
    0000016b: 	je	.Ltmp350 # Offset: 363
    0000016d: 	movzwl	(%r8,%rdx,2), %r8d
    00000172: 	leaq	(%rdi,%rdx,2), %rdi
    00000176: 	movl	%r9d, %ecx
    00000179: 	movl	$0xffffffff, %edx
    0000017e: 	andl	$0xf, %ecx
    00000181: 	movl	%edx, %eax
    00000183: 	shll	%cl, %eax
    00000185: 	movl	%esi, %ecx
    00000187: 	andl	$0xf, %ecx
    0000018a: 	notl	%eax
    0000018c: 	shll	%cl, %edx
    0000018e: 	andl	%edx, %eax
    00000190: 	movzwl	(%rdi), %edx
    00000193: 	xorl	%r8d, %edx
    00000196: 	andl	%edx, %eax
    00000198: 	xorl	%r8d, %eax
    0000019b: 	andw	(%rdi), %ax
    0000019e: 	movw	%ax, (%rdi)
.Ltmp350:
    000001a1: 	popq	%rbx
    000001a2: 	popq	%rbp
    000001a3: 	popq	%r12
    000001a5: 	popq	%r13
    000001a7: 	popq	%r14
    000001a9: 	retq # Offset: 425
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp343:
    000001b0: 	movq	%rsi, %rcx
    000001b3: 	andl	$0xf, %ecx
    000001b6: 	je	.Ltmp351 # Offset: 438
    000001bc: 	movl	$0xffffffff, %r10d
    000001c2: 	leaq	(%rdi,%rdx,2), %rbx
    000001c6: 	addq	$0x10, %rsi
    000001ca: 	shll	%cl, %r10d
    000001cd: 	subq	%rcx, %rsi
    000001d0: 	leaq	-0x10(%rcx,%r11), %r11
    000001d5: 	movl	%r10d, %eax
    000001d8: 	andw	(%rbx), %r10w
    000001dc: 	notl	%eax
    000001de: 	andw	(%r8,%rdx,2), %ax
    000001e3: 	movq	%rsi, %rdx
    000001e6: 	orl	%r10d, %eax
    000001e9: 	andw	(%rbx), %ax
    000001ec: 	shrq	$0x4, %rdx
    000001f0: 	movw	%ax, (%rbx)
    000001f3: 	jmp	.Ltmp351 # Offset: 499
    000001f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp342:
    00000200: 	retq # Offset: 512
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp345:
    00000208: 	movq	%rbx, %r10
    0000020b: 	shrq	$0x4, %r10
    0000020f: 	addq	%rax, %r10
    00000212: 	jmp	.Ltmp352 # Offset: 530
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp353:
    00000218: 	addq	$0x1, %rax
.Ltmp352:
    0000021c: 	movzwl	(%r8,%rdx,2), %ecx
    00000221: 	andw	%cx, (%rdi,%rdx,2)
    00000225: 	movq	%rax, %rdx
    00000228: 	cmpq	%r10, %rax
    0000022b: 	jne	.Ltmp353 # Offset: 555
    0000022d: 	jmp	.Ltmp348 # Offset: 557
.Ltmp346:
    00000232: 	movq	%rdx, %rcx
    00000235: 	movq	%r11, %rax
    00000238: 	jmp	.Ltmp354 # Offset: 568
DWARF CFI Instructions:
    <empty>
End of Function "_Z21AndBitTablesOptimizedItEvPT_PKS0_mm"

Binary Function "_Z19AndBitTablesHalfOptItEvPT_PKS0_mm" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x80f0
  Size        : 0x589
  MaxSize     : 0x590
  Offset      : 0x80f0
  Section     : .text
  Orc Section : .local.text._Z19AndBitTablesHalfOptItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp355 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r8
    00000015: 	movq	%rdx, %rax
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rsi
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp356 # Offset: 30
    00000024: 	movl	$0x1, %r11d
    0000002a: 	testb	$0xf, %al
    0000002c: 	jne	.Ltmp357 # Offset: 44
    0000002e: 	jmp	.Ltmp358 # Offset: 46
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp359:
    00000038: 	testb	$0xf, %al
    0000003a: 	je	.Ltmp358 # Offset: 58
.Ltmp357:
    00000040: 	movq	%rax, %r10
    00000043: 	movl	%eax, %ecx
    00000045: 	movl	%r11d, %edx
    00000048: 	addq	$0x1, %rax
    0000004c: 	shrq	$0x4, %r10
    00000050: 	andl	$0xf, %ecx
    00000053: 	shll	%cl, %edx
    00000055: 	movzwl	(%r8,%r10,2), %ecx
    0000005a: 	leaq	(%rdi,%r10,2), %r9
    0000005e: 	andl	%edx, %ecx
    00000060: 	notl	%edx
    00000062: 	andw	(%r9), %dx
    00000066: 	orl	%ecx, %edx
    00000068: 	andw	(%r9), %dx
    0000006c: 	movw	%dx, (%r9)
    00000070: 	subq	$0x1, %rsi
    00000074: 	jae	.Ltmp359 # Offset: 116
    00000076: 	movq	%rax, %rcx
    00000079: 	shrq	$0x4, %rcx
.Ltmp366:
    0000007d: 	leaq	(%rcx,%rcx), %r10
    00000081: 	leaq	-0x10(%rsi), %r11
    00000085: 	leaq	(%rdi,%r10), %r9
    00000089: 	leaq	0x2(%r8,%r10), %rbp
    0000008e: 	movq	%r9, %rbx
    00000091: 	leaq	0x1(%rcx), %rdx
    00000095: 	subq	%rbp, %rbx
    00000098: 	cmpq	$0xc, %rbx
    0000009c: 	jbe	.Ltmp360 # Offset: 156
    000000a2: 	cmpq	$0x2f, %r11
    000000a6: 	jbe	.Ltmp360 # Offset: 166
    000000ac: 	movq	%r11, %r12
    000000af: 	shrq	$0x4, %r12
    000000b3: 	leaq	0x1(%r12), %rbp
    000000b8: 	cmpq	$0x6f, %r11
    000000bc: 	jbe	.Ltmp361 # Offset: 188
    000000c2: 	movq	%rbp, %rbx
    000000c5: 	addq	%r8, %r10
    000000c8: 	xorl	%edx, %edx
    000000ca: 	shrq	$0x3, %rbx
    000000ce: 	shlq	$0x4, %rbx
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp362:
    000000d8: 	movdqu	(%r10,%rdx), %xmm0
    000000de: 	movdqu	(%r9,%rdx), %xmm2
    000000e4: 	pand	%xmm2, %xmm0
    000000e8: 	movups	%xmm0, (%r9,%rdx)
    000000ed: 	addq	$0x10, %rdx
    000000f1: 	cmpq	%rbx, %rdx
    000000f4: 	jne	.Ltmp362 # Offset: 244
    000000f6: 	movq	%rbp, %r10
    000000f9: 	movq	%rsi, %rdx
    000000fc: 	andq	$-0x8, %r10
    00000100: 	movq	%r10, %r9
    00000103: 	addq	%r10, %rcx
    00000106: 	shlq	$0x4, %r9
    0000010a: 	subq	%r9, %rdx
    0000010d: 	movq	%rcx, %r9
    00000110: 	cmpq	%rbp, %r10
    00000113: 	je	.Ltmp363 # Offset: 275
    00000115: 	subq	%r10, %r12
    00000118: 	leaq	0x1(%r12), %rbp
    0000011d: 	cmpq	$0x2, %r12
    00000121: 	jbe	.Ltmp364 # Offset: 289
.Ltmp370:
    00000123: 	leaq	(%rdi,%rcx,2), %r10
    00000127: 	movq	(%r8,%rcx,2), %xmm0
    0000012d: 	movq	%rbp, %rcx
    00000130: 	movq	(%r10), %xmm1
    00000135: 	andq	$-0x4, %rcx
    00000139: 	addq	%rcx, %r9
    0000013c: 	pand	%xmm1, %xmm0
    00000140: 	movq	%xmm0, (%r10)
    00000145: 	movq	%rcx, %r10
    00000148: 	shlq	$0x4, %r10
    0000014c: 	subq	%r10, %rdx
    0000014f: 	cmpq	%rbp, %rcx
    00000152: 	je	.Ltmp363 # Offset: 338
.Ltmp364:
    00000154: 	leaq	(%r9,%r9), %rcx
    00000158: 	movzwl	(%r8,%r9,2), %r9d
    0000015d: 	andw	%r9w, (%rdi,%rcx)
    00000162: 	leaq	-0x10(%rdx), %r9
    00000166: 	cmpq	$0xf, %r9
    0000016a: 	jbe	.Ltmp363 # Offset: 362
    0000016c: 	subq	$0x20, %rdx
    00000170: 	movzwl	0x2(%r8,%rcx), %r9d
    00000176: 	andw	%r9w, 0x2(%rdi,%rcx)
    0000017c: 	cmpq	$0xf, %rdx
    00000180: 	jbe	.Ltmp363 # Offset: 384
    00000182: 	movzwl	0x4(%r8,%rcx), %edx
    00000188: 	andw	%dx, 0x4(%rdi,%rcx)
.Ltmp363:
    0000018d: 	andq	$-0x10, %r11
    00000191: 	andl	$0xf, %esi
    00000194: 	leaq	0x10(%rax,%r11), %rax
.Ltmp367:
    00000199: 	testq	%rsi, %rsi
    0000019c: 	je	.Ltmp365 # Offset: 412
    000001a2: 	movl	%eax, %ecx
    000001a4: 	movl	$0x1, %edx
    000001a9: 	movq	%rax, %r9
    000001ac: 	andl	$0xf, %ecx
    000001af: 	movl	%edx, %ebx
    000001b1: 	shrq	$0x4, %r9
    000001b5: 	shll	%cl, %ebx
    000001b7: 	leaq	(%rdi,%r9,2), %r10
    000001bb: 	movl	%ebx, %ecx
    000001bd: 	movzwl	(%r8,%r9,2), %ebx
    000001c2: 	andl	%ecx, %ebx
    000001c4: 	notl	%ecx
    000001c6: 	andw	(%r10), %cx
    000001ca: 	movl	%ebx, %r9d
    000001cd: 	orl	%r9d, %ecx
    000001d0: 	andw	(%r10), %cx
    000001d4: 	movw	%cx, (%r10)
    000001d8: 	leaq	0x1(%rax), %rcx
    000001dc: 	cmpq	$0x1, %rsi
    000001e0: 	je	.Ltmp365 # Offset: 480
    000001e6: 	movq	%rcx, %r9
    000001e9: 	movl	%edx, %ebx
    000001eb: 	andl	$0xf, %ecx
    000001ee: 	shrq	$0x4, %r9
    000001f2: 	shll	%cl, %ebx
    000001f4: 	movl	%ebx, %ecx
    000001f6: 	movzwl	(%r8,%r9,2), %ebx
    000001fb: 	leaq	(%rdi,%r9,2), %r10
    000001ff: 	andl	%ecx, %ebx
    00000201: 	notl	%ecx
    00000203: 	andw	(%r10), %cx
    00000207: 	movl	%ebx, %r9d
    0000020a: 	orl	%r9d, %ecx
    0000020d: 	andw	(%r10), %cx
    00000211: 	movw	%cx, (%r10)
    00000215: 	leaq	0x2(%rax), %rcx
    00000219: 	cmpq	$0x2, %rsi
    0000021d: 	je	.Ltmp365 # Offset: 541
    00000223: 	movq	%rcx, %r9
    00000226: 	movl	%edx, %ebx
    00000228: 	andl	$0xf, %ecx
    0000022b: 	shrq	$0x4, %r9
    0000022f: 	shll	%cl, %ebx
    00000231: 	movl	%ebx, %ecx
    00000233: 	movzwl	(%r8,%r9,2), %ebx
    00000238: 	leaq	(%rdi,%r9,2), %r10
    0000023c: 	andl	%ecx, %ebx
    0000023e: 	notl	%ecx
    00000240: 	andw	(%r10), %cx
    00000244: 	movl	%ebx, %r9d
    00000247: 	orl	%r9d, %ecx
    0000024a: 	andw	(%r10), %cx
    0000024e: 	movw	%cx, (%r10)
    00000252: 	leaq	0x3(%rax), %rcx
    00000256: 	cmpq	$0x3, %rsi
    0000025a: 	je	.Ltmp365 # Offset: 602
    00000260: 	movq	%rcx, %r9
    00000263: 	movl	%edx, %ebx
    00000265: 	andl	$0xf, %ecx
    00000268: 	shrq	$0x4, %r9
    0000026c: 	shll	%cl, %ebx
    0000026e: 	movl	%ebx, %ecx
    00000270: 	movzwl	(%r8,%r9,2), %ebx
    00000275: 	leaq	(%rdi,%r9,2), %r10
    00000279: 	andl	%ecx, %ebx
    0000027b: 	notl	%ecx
    0000027d: 	andw	(%r10), %cx
    00000281: 	movl	%ebx, %r9d
    00000284: 	orl	%r9d, %ecx
    00000287: 	andw	(%r10), %cx
    0000028b: 	movw	%cx, (%r10)
    0000028f: 	leaq	0x4(%rax), %rcx
    00000293: 	cmpq	$0x4, %rsi
    00000297: 	je	.Ltmp365 # Offset: 663
    0000029d: 	movq	%rcx, %r9
    000002a0: 	movl	%edx, %ebx
    000002a2: 	andl	$0xf, %ecx
    000002a5: 	shrq	$0x4, %r9
    000002a9: 	shll	%cl, %ebx
    000002ab: 	movl	%ebx, %ecx
    000002ad: 	movzwl	(%r8,%r9,2), %ebx
    000002b2: 	leaq	(%rdi,%r9,2), %r10
    000002b6: 	andl	%ecx, %ebx
    000002b8: 	notl	%ecx
    000002ba: 	andw	(%r10), %cx
    000002be: 	movl	%ebx, %r9d
    000002c1: 	orl	%r9d, %ecx
    000002c4: 	andw	(%r10), %cx
    000002c8: 	movw	%cx, (%r10)
    000002cc: 	leaq	0x5(%rax), %rcx
    000002d0: 	cmpq	$0x5, %rsi
    000002d4: 	je	.Ltmp365 # Offset: 724
    000002da: 	movq	%rcx, %r9
    000002dd: 	movl	%edx, %ebx
    000002df: 	andl	$0xf, %ecx
    000002e2: 	shrq	$0x4, %r9
    000002e6: 	shll	%cl, %ebx
    000002e8: 	movl	%ebx, %ecx
    000002ea: 	movzwl	(%r8,%r9,2), %ebx
    000002ef: 	leaq	(%rdi,%r9,2), %r10
    000002f3: 	andl	%ecx, %ebx
    000002f5: 	notl	%ecx
    000002f7: 	andw	(%r10), %cx
    000002fb: 	movl	%ebx, %r9d
    000002fe: 	orl	%r9d, %ecx
    00000301: 	andw	(%r10), %cx
    00000305: 	movw	%cx, (%r10)
    00000309: 	leaq	0x6(%rax), %rcx
    0000030d: 	cmpq	$0x6, %rsi
    00000311: 	je	.Ltmp365 # Offset: 785
    00000317: 	movq	%rcx, %r9
    0000031a: 	movl	%edx, %ebx
    0000031c: 	andl	$0xf, %ecx
    0000031f: 	shrq	$0x4, %r9
    00000323: 	shll	%cl, %ebx
    00000325: 	movl	%ebx, %ecx
    00000327: 	movzwl	(%r8,%r9,2), %ebx
    0000032c: 	leaq	(%rdi,%r9,2), %r10
    00000330: 	andl	%ecx, %ebx
    00000332: 	notl	%ecx
    00000334: 	andw	(%r10), %cx
    00000338: 	movl	%ebx, %r9d
    0000033b: 	orl	%r9d, %ecx
    0000033e: 	andw	(%r10), %cx
    00000342: 	movw	%cx, (%r10)
    00000346: 	leaq	0x7(%rax), %rcx
    0000034a: 	cmpq	$0x7, %rsi
    0000034e: 	je	.Ltmp365 # Offset: 846
    00000354: 	movq	%rcx, %r9
    00000357: 	movl	%edx, %ebx
    00000359: 	andl	$0xf, %ecx
    0000035c: 	shrq	$0x4, %r9
    00000360: 	shll	%cl, %ebx
    00000362: 	movl	%ebx, %ecx
    00000364: 	movzwl	(%r8,%r9,2), %ebx
    00000369: 	leaq	(%rdi,%r9,2), %r10
    0000036d: 	andl	%ecx, %ebx
    0000036f: 	notl	%ecx
    00000371: 	andw	(%r10), %cx
    00000375: 	movl	%ebx, %r9d
    00000378: 	orl	%r9d, %ecx
    0000037b: 	andw	(%r10), %cx
    0000037f: 	movw	%cx, (%r10)
    00000383: 	leaq	0x8(%rax), %rcx
    00000387: 	cmpq	$0x8, %rsi
    0000038b: 	je	.Ltmp365 # Offset: 907
    00000391: 	movq	%rcx, %r10
    00000394: 	andl	$0xf, %ecx
    00000397: 	shrq	$0x4, %r10
    0000039b: 	shll	%cl, %edx
    0000039d: 	movzwl	(%r8,%r10,2), %ecx
    000003a2: 	leaq	(%rdi,%r10,2), %r9
    000003a6: 	andl	%edx, %ecx
    000003a8: 	notl	%edx
    000003aa: 	andw	(%r9), %dx
    000003ae: 	orl	%ecx, %edx
    000003b0: 	andw	(%r9), %dx
    000003b4: 	leaq	0x9(%rax), %rcx
    000003b8: 	movw	%dx, (%r9)
    000003bc: 	cmpq	$0x9, %rsi
    000003c0: 	je	.Ltmp365 # Offset: 960
    000003c6: 	movl	$0x1, %edx
    000003cb: 	movq	%rcx, %r9
    000003ce: 	andl	$0xf, %ecx
    000003d1: 	movl	%edx, %ebx
    000003d3: 	shrq	$0x4, %r9
    000003d7: 	shll	%cl, %ebx
    000003d9: 	leaq	(%rdi,%r9,2), %r10
    000003dd: 	movl	%ebx, %ecx
    000003df: 	movzwl	(%r8,%r9,2), %ebx
    000003e4: 	andl	%ecx, %ebx
    000003e6: 	notl	%ecx
    000003e8: 	andw	(%r10), %cx
    000003ec: 	movl	%ebx, %r9d
    000003ef: 	orl	%r9d, %ecx
    000003f2: 	andw	(%r10), %cx
    000003f6: 	movw	%cx, (%r10)
    000003fa: 	leaq	0xa(%rax), %rcx
    000003fe: 	cmpq	$0xa, %rsi
    00000402: 	je	.Ltmp365 # Offset: 1026
    00000408: 	movq	%rcx, %r9
    0000040b: 	movl	%edx, %ebx
    0000040d: 	andl	$0xf, %ecx
    00000410: 	shrq	$0x4, %r9
    00000414: 	shll	%cl, %ebx
    00000416: 	movl	%ebx, %ecx
    00000418: 	movzwl	(%r8,%r9,2), %ebx
    0000041d: 	leaq	(%rdi,%r9,2), %r10
    00000421: 	andl	%ecx, %ebx
    00000423: 	notl	%ecx
    00000425: 	andw	(%r10), %cx
    00000429: 	movl	%ebx, %r9d
    0000042c: 	orl	%r9d, %ecx
    0000042f: 	andw	(%r10), %cx
    00000433: 	movw	%cx, (%r10)
    00000437: 	leaq	0xb(%rax), %rcx
    0000043b: 	cmpq	$0xb, %rsi
    0000043f: 	je	.Ltmp365 # Offset: 1087
    00000445: 	movq	%rcx, %r9
    00000448: 	movl	%edx, %ebx
    0000044a: 	andl	$0xf, %ecx
    0000044d: 	shrq	$0x4, %r9
    00000451: 	shll	%cl, %ebx
    00000453: 	movl	%ebx, %ecx
    00000455: 	movzwl	(%r8,%r9,2), %ebx
    0000045a: 	leaq	(%rdi,%r9,2), %r10
    0000045e: 	andl	%ecx, %ebx
    00000460: 	notl	%ecx
    00000462: 	andw	(%r10), %cx
    00000466: 	movl	%ebx, %r9d
    00000469: 	orl	%r9d, %ecx
    0000046c: 	andw	(%r10), %cx
    00000470: 	movw	%cx, (%r10)
    00000474: 	leaq	0xc(%rax), %rcx
    00000478: 	cmpq	$0xc, %rsi
    0000047c: 	je	.Ltmp365 # Offset: 1148
    00000482: 	movq	%rcx, %r9
    00000485: 	movl	%edx, %ebx
    00000487: 	andl	$0xf, %ecx
    0000048a: 	shrq	$0x4, %r9
    0000048e: 	shll	%cl, %ebx
    00000490: 	movl	%ebx, %ecx
    00000492: 	movzwl	(%r8,%r9,2), %ebx
    00000497: 	leaq	(%rdi,%r9,2), %r10
    0000049b: 	andl	%ecx, %ebx
    0000049d: 	notl	%ecx
    0000049f: 	andw	(%r10), %cx
    000004a3: 	movl	%ebx, %r9d
    000004a6: 	orl	%r9d, %ecx
    000004a9: 	andw	(%r10), %cx
    000004ad: 	movw	%cx, (%r10)
    000004b1: 	leaq	0xd(%rax), %rcx
    000004b5: 	cmpq	$0xd, %rsi
    000004b9: 	je	.Ltmp365 # Offset: 1209
    000004bb: 	movq	%rcx, %r9
    000004be: 	movl	%edx, %ebx
    000004c0: 	andl	$0xf, %ecx
    000004c3: 	shrq	$0x4, %r9
    000004c7: 	shll	%cl, %ebx
    000004c9: 	movl	%ebx, %ecx
    000004cb: 	movzwl	(%r8,%r9,2), %ebx
    000004d0: 	leaq	(%rdi,%r9,2), %r10
    000004d4: 	andl	%ecx, %ebx
    000004d6: 	notl	%ecx
    000004d8: 	andw	(%r10), %cx
    000004dc: 	movl	%ebx, %r9d
    000004df: 	orl	%r9d, %ecx
    000004e2: 	andw	(%r10), %cx
    000004e6: 	movw	%cx, (%r10)
    000004ea: 	leaq	0xe(%rax), %rcx
    000004ee: 	cmpq	$0xe, %rsi
    000004f2: 	je	.Ltmp365 # Offset: 1266
    000004f4: 	movq	%rcx, %rax
    000004f7: 	andl	$0xf, %ecx
    000004fa: 	shrq	$0x4, %rax
    000004fe: 	shll	%cl, %edx
    00000500: 	leaq	(%rdi,%rax,2), %rsi
    00000504: 	movzwl	(%r8,%rax,2), %edi
    00000509: 	andl	%edx, %edi
    0000050b: 	notl	%edx
    0000050d: 	andw	(%rsi), %dx
    00000510: 	movl	%edi, %eax
    00000512: 	orl	%edx, %eax
    00000514: 	andw	(%rsi), %ax
    00000517: 	movw	%ax, (%rsi)
.Ltmp365:
    0000051a: 	popq	%rbx
    0000051b: 	popq	%rbp
    0000051c: 	popq	%r12
    0000051e: 	retq # Offset: 1310
    0000051f: 	nop # Size: 1
.Ltmp355:
    00000520: 	retq # Offset: 1312
    00000521: 	nopl	(%rax) # Size: 7
.Ltmp358:
    00000528: 	movq	%rax, %rcx
    0000052b: 	shrq	$0x4, %rcx
    0000052f: 	cmpq	$0xf, %rsi
    00000533: 	ja	.Ltmp366 # Offset: 1331
    00000539: 	jmp	.Ltmp367 # Offset: 1337
    0000053e: 	nop # Size: 2
.Ltmp360:
    00000540: 	movq	%r11, %r10
    00000543: 	shrq	$0x4, %r10
    00000547: 	addq	%rdx, %r10
    0000054a: 	jmp	.Ltmp368 # Offset: 1354
    0000054c: 	nopl	(%rax) # Size: 4
.Ltmp369:
    00000550: 	addq	$0x1, %rdx
.Ltmp368:
    00000554: 	movzwl	(%r8,%rcx,2), %r9d
    00000559: 	andw	%r9w, (%rdi,%rcx,2)
    0000055e: 	movq	%rdx, %rcx
    00000561: 	cmpq	%rdx, %r10
    00000564: 	jne	.Ltmp369 # Offset: 1380
    00000566: 	jmp	.Ltmp363 # Offset: 1382
.Ltmp361:
    0000056b: 	movq	%rsi, %rdx
    0000056e: 	movq	%rcx, %r9
    00000571: 	jmp	.Ltmp370 # Offset: 1393
.Ltmp356:
    00000576: 	movq	%rdx, %rcx
    00000579: 	movq	$-0x1, %rsi
    00000580: 	shrq	$0x4, %rcx
    00000584: 	jmp	.Ltmp366 # Offset: 1412
DWARF CFI Instructions:
    <empty>
End of Function "_Z19AndBitTablesHalfOptItEvPT_PKS0_mm"

Binary Function "_Z17AndBitTablesShiftItEvPT_PKS0_mm" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x8680
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x8680
  Section     : .text
  Orc Section : .local.text._Z17AndBitTablesShiftItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r9
    0000000a: 	movq	%rcx, %rdi
    0000000d: 	movq	%rdx, %rsi
    00000010: 	cmpq	%rdx, %rcx
    00000013: 	jb	.Ltmp371 # Offset: 19
    00000015: 	je	.Ltmp371 # Offset: 21
    00000017: 	movl	$0x1, %r10d
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp372:
    00000020: 	movq	%rsi, %rdx
    00000023: 	movl	%esi, %ecx
    00000025: 	movl	%r10d, %eax
    00000028: 	addq	$0x1, %rsi
    0000002c: 	shrq	$0x4, %rdx
    00000030: 	andl	$0xf, %ecx
    00000033: 	movzwl	(%r9,%rdx,2), %r11d
    00000038: 	shll	%cl, %eax
    0000003a: 	leaq	(%r8,%rdx,2), %rcx
    0000003e: 	andl	%eax, %r11d
    00000041: 	notl	%eax
    00000043: 	andw	(%rcx), %ax
    00000046: 	movl	%r11d, %edx
    00000049: 	orl	%edx, %eax
    0000004b: 	andw	(%rcx), %ax
    0000004e: 	movw	%ax, (%rcx)
    00000051: 	cmpq	%rsi, %rdi
    00000054: 	jne	.Ltmp372 # Offset: 84
.Ltmp371:
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z17AndBitTablesShiftItEvPT_PKS0_mm"

Binary Function "_Z12AndBitTablesItEvPT_PKS0_mm" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x86e0
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x86e0
  Section     : .text
  Orc Section : .local.text._Z12AndBitTablesItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r10
    00000007: 	movq	%rdi, %r9
    0000000a: 	movq	%rdx, %rsi
    0000000d: 	movq	%rcx, %r8
    00000010: 	cmpq	%rdx, %rcx
    00000013: 	jb	.Ltmp373 # Offset: 19
    00000015: 	je	.Ltmp373 # Offset: 21
    00000017: 	movl	$0x1, %r11d
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp374:
    00000020: 	movq	%rsi, %rdx
    00000023: 	movl	%esi, %ecx
    00000025: 	movl	%r11d, %eax
    00000028: 	addq	$0x1, %rsi
    0000002c: 	shrq	$0x4, %rdx
    00000030: 	andl	$0xf, %ecx
    00000033: 	shll	%cl, %eax
    00000035: 	movzwl	(%r10,%rdx,2), %ecx
    0000003a: 	leaq	(%r9,%rdx,2), %rdi
    0000003e: 	andl	%eax, %ecx
    00000040: 	notl	%eax
    00000042: 	andw	(%rdi), %ax
    00000045: 	movl	%ecx, %edx
    00000047: 	orl	%edx, %eax
    00000049: 	andw	(%rdi), %ax
    0000004c: 	movw	%ax, (%rdi)
    0000004f: 	cmpq	%rsi, %r8
    00000052: 	jne	.Ltmp374 # Offset: 82
.Ltmp373:
    00000054: 	retq # Offset: 84
DWARF CFI Instructions:
    <empty>
End of Function "_Z12AndBitTablesItEvPT_PKS0_mm"

Binary Function "_Z18OrBitTablesHalfOptItEvPT_PKS0_mm" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x8740
  Size        : 0x449
  MaxSize     : 0x450
  Offset      : 0x8740
  Section     : .text
  Orc Section : .local.text._Z18OrBitTablesHalfOptItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp375 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %rax
    00000015: 	movq	%rsi, %r8
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rdx
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp376 # Offset: 30
    00000024: 	movl	$0x1, %r9d
    0000002a: 	testb	$0xf, %al
    0000002c: 	jne	.Ltmp377 # Offset: 44
    0000002e: 	jmp	.Ltmp378 # Offset: 46
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp379:
    00000038: 	testb	$0xf, %al
    0000003a: 	je	.Ltmp378 # Offset: 58
.Ltmp377:
    00000040: 	movl	%eax, %ecx
    00000042: 	movq	%rax, %rsi
    00000045: 	movl	%r9d, %ebx
    00000048: 	addq	$0x1, %rax
    0000004c: 	andl	$0xf, %ecx
    0000004f: 	shrq	$0x4, %rsi
    00000053: 	shll	%cl, %ebx
    00000055: 	movl	%ebx, %ecx
    00000057: 	andw	(%r8,%rsi,2), %cx
    0000005c: 	orw	%cx, (%rdi,%rsi,2)
    00000060: 	subq	$0x1, %rdx
    00000064: 	jae	.Ltmp379 # Offset: 100
    00000066: 	movq	%rax, %rsi
    00000069: 	shrq	$0x4, %rsi
.Ltmp386:
    0000006d: 	leaq	(%rsi,%rsi), %r10
    00000071: 	leaq	-0x10(%rdx), %r11
    00000075: 	leaq	(%rdi,%r10), %r9
    00000079: 	leaq	0x2(%r8,%r10), %rbp
    0000007e: 	movq	%r9, %rbx
    00000081: 	leaq	0x1(%rsi), %rcx
    00000085: 	subq	%rbp, %rbx
    00000088: 	cmpq	$0xc, %rbx
    0000008c: 	jbe	.Ltmp380 # Offset: 140
    00000092: 	cmpq	$0x2f, %r11
    00000096: 	jbe	.Ltmp380 # Offset: 150
    0000009c: 	movq	%r11, %r12
    0000009f: 	shrq	$0x4, %r12
    000000a3: 	leaq	0x1(%r12), %rbp
    000000a8: 	cmpq	$0x6f, %r11
    000000ac: 	jbe	.Ltmp381 # Offset: 172
    000000b2: 	movq	%rbp, %rbx
    000000b5: 	addq	%r8, %r10
    000000b8: 	xorl	%ecx, %ecx
    000000ba: 	shrq	$0x3, %rbx
    000000be: 	shlq	$0x4, %rbx
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp382:
    000000c8: 	movdqu	(%r10,%rcx), %xmm0
    000000ce: 	movdqu	(%r9,%rcx), %xmm2
    000000d4: 	por	%xmm2, %xmm0
    000000d8: 	movups	%xmm0, (%r9,%rcx)
    000000dd: 	addq	$0x10, %rcx
    000000e1: 	cmpq	%rbx, %rcx
    000000e4: 	jne	.Ltmp382 # Offset: 228
    000000e6: 	movq	%rbp, %r10
    000000e9: 	movq	%rdx, %rcx
    000000ec: 	andq	$-0x8, %r10
    000000f0: 	movq	%r10, %r9
    000000f3: 	addq	%r10, %rsi
    000000f6: 	shlq	$0x4, %r9
    000000fa: 	subq	%r9, %rcx
    000000fd: 	movq	%rsi, %r9
    00000100: 	cmpq	%rbp, %r10
    00000103: 	je	.Ltmp383 # Offset: 259
    00000105: 	subq	%r10, %r12
    00000108: 	leaq	0x1(%r12), %rbp
    0000010d: 	cmpq	$0x2, %r12
    00000111: 	jbe	.Ltmp384 # Offset: 273
.Ltmp390:
    00000113: 	leaq	(%rdi,%rsi,2), %r10
    00000117: 	movq	(%r8,%rsi,2), %xmm0
    0000011d: 	movq	%rbp, %rsi
    00000120: 	movq	(%r10), %xmm1
    00000125: 	andq	$-0x4, %rsi
    00000129: 	addq	%rsi, %r9
    0000012c: 	por	%xmm1, %xmm0
    00000130: 	movq	%xmm0, (%r10)
    00000135: 	movq	%rsi, %r10
    00000138: 	shlq	$0x4, %r10
    0000013c: 	subq	%r10, %rcx
    0000013f: 	cmpq	%rbp, %rsi
    00000142: 	je	.Ltmp383 # Offset: 322
.Ltmp384:
    00000144: 	leaq	(%r9,%r9), %rsi
    00000148: 	movzwl	(%r8,%r9,2), %r9d
    0000014d: 	orw	%r9w, (%rdi,%rsi)
    00000152: 	leaq	-0x10(%rcx), %r9
    00000156: 	cmpq	$0xf, %r9
    0000015a: 	jbe	.Ltmp383 # Offset: 346
    0000015c: 	subq	$0x20, %rcx
    00000160: 	movzwl	0x2(%r8,%rsi), %r9d
    00000166: 	orw	%r9w, 0x2(%rdi,%rsi)
    0000016c: 	cmpq	$0xf, %rcx
    00000170: 	jbe	.Ltmp383 # Offset: 368
    00000172: 	movzwl	0x4(%r8,%rsi), %ecx
    00000178: 	orw	%cx, 0x4(%rdi,%rsi)
.Ltmp383:
    0000017d: 	andq	$-0x10, %r11
    00000181: 	andl	$0xf, %edx
    00000184: 	leaq	0x10(%rax,%r11), %rax
.Ltmp387:
    00000189: 	testq	%rdx, %rdx
    0000018c: 	je	.Ltmp385 # Offset: 396
    00000192: 	movl	%eax, %ecx
    00000194: 	movl	$0x1, %esi
    00000199: 	movq	%rax, %r9
    0000019c: 	andl	$0xf, %ecx
    0000019f: 	movl	%esi, %ebx
    000001a1: 	shrq	$0x4, %r9
    000001a5: 	shll	%cl, %ebx
    000001a7: 	movl	%ebx, %ecx
    000001a9: 	andw	(%r8,%r9,2), %cx
    000001ae: 	orw	%cx, (%rdi,%r9,2)
    000001b3: 	leaq	0x1(%rax), %rcx
    000001b7: 	cmpq	$0x1, %rdx
    000001bb: 	je	.Ltmp385 # Offset: 443
    000001c1: 	movq	%rcx, %r9
    000001c4: 	movl	%esi, %ebx
    000001c6: 	andl	$0xf, %ecx
    000001c9: 	shrq	$0x4, %r9
    000001cd: 	shll	%cl, %ebx
    000001cf: 	movl	%ebx, %ecx
    000001d1: 	andw	(%r8,%r9,2), %cx
    000001d6: 	orw	%cx, (%rdi,%r9,2)
    000001db: 	leaq	0x2(%rax), %rcx
    000001df: 	cmpq	$0x2, %rdx
    000001e3: 	je	.Ltmp385 # Offset: 483
    000001e9: 	movq	%rcx, %r9
    000001ec: 	movl	%esi, %ebx
    000001ee: 	andl	$0xf, %ecx
    000001f1: 	shrq	$0x4, %r9
    000001f5: 	shll	%cl, %ebx
    000001f7: 	movl	%ebx, %ecx
    000001f9: 	andw	(%r8,%r9,2), %cx
    000001fe: 	orw	%cx, (%rdi,%r9,2)
    00000203: 	leaq	0x3(%rax), %rcx
    00000207: 	cmpq	$0x3, %rdx
    0000020b: 	je	.Ltmp385 # Offset: 523
    00000211: 	movq	%rcx, %r9
    00000214: 	movl	%esi, %ebx
    00000216: 	andl	$0xf, %ecx
    00000219: 	shrq	$0x4, %r9
    0000021d: 	shll	%cl, %ebx
    0000021f: 	movl	%ebx, %ecx
    00000221: 	andw	(%r8,%r9,2), %cx
    00000226: 	orw	%cx, (%rdi,%r9,2)
    0000022b: 	leaq	0x4(%rax), %rcx
    0000022f: 	cmpq	$0x4, %rdx
    00000233: 	je	.Ltmp385 # Offset: 563
    00000239: 	movq	%rcx, %r9
    0000023c: 	movl	%esi, %ebx
    0000023e: 	andl	$0xf, %ecx
    00000241: 	shrq	$0x4, %r9
    00000245: 	shll	%cl, %ebx
    00000247: 	movl	%ebx, %ecx
    00000249: 	andw	(%r8,%r9,2), %cx
    0000024e: 	orw	%cx, (%rdi,%r9,2)
    00000253: 	leaq	0x5(%rax), %rcx
    00000257: 	cmpq	$0x5, %rdx
    0000025b: 	je	.Ltmp385 # Offset: 603
    00000261: 	movq	%rcx, %r9
    00000264: 	movl	%esi, %ebx
    00000266: 	andl	$0xf, %ecx
    00000269: 	shrq	$0x4, %r9
    0000026d: 	shll	%cl, %ebx
    0000026f: 	movl	%ebx, %ecx
    00000271: 	andw	(%r8,%r9,2), %cx
    00000276: 	orw	%cx, (%rdi,%r9,2)
    0000027b: 	leaq	0x6(%rax), %rcx
    0000027f: 	cmpq	$0x6, %rdx
    00000283: 	je	.Ltmp385 # Offset: 643
    00000289: 	movq	%rcx, %r9
    0000028c: 	movl	%esi, %ebx
    0000028e: 	andl	$0xf, %ecx
    00000291: 	shrq	$0x4, %r9
    00000295: 	shll	%cl, %ebx
    00000297: 	movl	%ebx, %ecx
    00000299: 	andw	(%r8,%r9,2), %cx
    0000029e: 	orw	%cx, (%rdi,%r9,2)
    000002a3: 	leaq	0x7(%rax), %rcx
    000002a7: 	cmpq	$0x7, %rdx
    000002ab: 	je	.Ltmp385 # Offset: 683
    000002b1: 	movq	%rcx, %r9
    000002b4: 	movl	%esi, %ebx
    000002b6: 	andl	$0xf, %ecx
    000002b9: 	shrq	$0x4, %r9
    000002bd: 	shll	%cl, %ebx
    000002bf: 	movl	%ebx, %ecx
    000002c1: 	andw	(%r8,%r9,2), %cx
    000002c6: 	orw	%cx, (%rdi,%r9,2)
    000002cb: 	leaq	0x8(%rax), %rcx
    000002cf: 	cmpq	$0x8, %rdx
    000002d3: 	je	.Ltmp385 # Offset: 723
    000002d9: 	movq	%rcx, %r9
    000002dc: 	andl	$0xf, %ecx
    000002df: 	shrq	$0x4, %r9
    000002e3: 	shll	%cl, %esi
    000002e5: 	leaq	0x9(%rax), %rcx
    000002e9: 	andw	(%r8,%r9,2), %si
    000002ee: 	orw	%si, (%rdi,%r9,2)
    000002f3: 	cmpq	$0x9, %rdx
    000002f7: 	je	.Ltmp385 # Offset: 759
    000002fd: 	movl	$0x1, %esi
    00000302: 	movq	%rcx, %r9
    00000305: 	andl	$0xf, %ecx
    00000308: 	movl	%esi, %ebx
    0000030a: 	shrq	$0x4, %r9
    0000030e: 	shll	%cl, %ebx
    00000310: 	movl	%ebx, %ecx
    00000312: 	andw	(%r8,%r9,2), %cx
    00000317: 	orw	%cx, (%rdi,%r9,2)
    0000031c: 	leaq	0xa(%rax), %rcx
    00000320: 	cmpq	$0xa, %rdx
    00000324: 	je	.Ltmp385 # Offset: 804
    0000032a: 	movq	%rcx, %r9
    0000032d: 	movl	%esi, %ebx
    0000032f: 	andl	$0xf, %ecx
    00000332: 	shrq	$0x4, %r9
    00000336: 	shll	%cl, %ebx
    00000338: 	movl	%ebx, %ecx
    0000033a: 	andw	(%r8,%r9,2), %cx
    0000033f: 	orw	%cx, (%rdi,%r9,2)
    00000344: 	leaq	0xb(%rax), %rcx
    00000348: 	cmpq	$0xb, %rdx
    0000034c: 	je	.Ltmp385 # Offset: 844
    00000352: 	movq	%rcx, %r9
    00000355: 	movl	%esi, %ebx
    00000357: 	andl	$0xf, %ecx
    0000035a: 	shrq	$0x4, %r9
    0000035e: 	shll	%cl, %ebx
    00000360: 	movl	%ebx, %ecx
    00000362: 	andw	(%r8,%r9,2), %cx
    00000367: 	orw	%cx, (%rdi,%r9,2)
    0000036c: 	leaq	0xc(%rax), %rcx
    00000370: 	cmpq	$0xc, %rdx
    00000374: 	je	.Ltmp385 # Offset: 884
    00000376: 	movq	%rcx, %r9
    00000379: 	movl	%esi, %ebx
    0000037b: 	andl	$0xf, %ecx
    0000037e: 	shrq	$0x4, %r9
    00000382: 	shll	%cl, %ebx
    00000384: 	movl	%ebx, %ecx
    00000386: 	andw	(%r8,%r9,2), %cx
    0000038b: 	orw	%cx, (%rdi,%r9,2)
    00000390: 	leaq	0xd(%rax), %rcx
    00000394: 	cmpq	$0xd, %rdx
    00000398: 	je	.Ltmp385 # Offset: 920
    0000039a: 	movq	%rcx, %r9
    0000039d: 	movl	%esi, %ebx
    0000039f: 	andl	$0xf, %ecx
    000003a2: 	shrq	$0x4, %r9
    000003a6: 	shll	%cl, %ebx
    000003a8: 	movl	%ebx, %ecx
    000003aa: 	andw	(%r8,%r9,2), %cx
    000003af: 	orw	%cx, (%rdi,%r9,2)
    000003b4: 	leaq	0xe(%rax), %rcx
    000003b8: 	cmpq	$0xe, %rdx
    000003bc: 	je	.Ltmp385 # Offset: 956
    000003be: 	movq	%rcx, %rax
    000003c1: 	andl	$0xf, %ecx
    000003c4: 	shrq	$0x4, %rax
    000003c8: 	shll	%cl, %esi
    000003ca: 	andw	(%r8,%rax,2), %si
    000003cf: 	orw	%si, (%rdi,%rax,2)
.Ltmp385:
    000003d3: 	popq	%rbx
    000003d4: 	popq	%rbp
    000003d5: 	popq	%r12
    000003d7: 	retq # Offset: 983
    000003d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp375:
    000003e0: 	retq # Offset: 992
    000003e1: 	nopl	(%rax) # Size: 7
.Ltmp378:
    000003e8: 	movq	%rax, %rsi
    000003eb: 	shrq	$0x4, %rsi
    000003ef: 	cmpq	$0xf, %rdx
    000003f3: 	ja	.Ltmp386 # Offset: 1011
    000003f9: 	jmp	.Ltmp387 # Offset: 1017
    000003fe: 	nop # Size: 2
.Ltmp380:
    00000400: 	movq	%r11, %r10
    00000403: 	shrq	$0x4, %r10
    00000407: 	addq	%rcx, %r10
    0000040a: 	jmp	.Ltmp388 # Offset: 1034
    0000040c: 	nopl	(%rax) # Size: 4
.Ltmp389:
    00000410: 	addq	$0x1, %rcx
.Ltmp388:
    00000414: 	movzwl	(%r8,%rsi,2), %r9d
    00000419: 	orw	%r9w, (%rdi,%rsi,2)
    0000041e: 	movq	%rcx, %rsi
    00000421: 	cmpq	%rcx, %r10
    00000424: 	jne	.Ltmp389 # Offset: 1060
    00000426: 	jmp	.Ltmp383 # Offset: 1062
.Ltmp381:
    0000042b: 	movq	%rdx, %rcx
    0000042e: 	movq	%rsi, %r9
    00000431: 	jmp	.Ltmp390 # Offset: 1073
.Ltmp376:
    00000436: 	movq	%rax, %rsi
    00000439: 	movq	$-0x1, %rdx
    00000440: 	shrq	$0x4, %rsi
    00000444: 	jmp	.Ltmp386 # Offset: 1092
DWARF CFI Instructions:
    <empty>
End of Function "_Z18OrBitTablesHalfOptItEvPT_PKS0_mm"

Binary Function "_Z16OrBitTablesShiftItEvPT_PKS0_mm" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x8b90
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x8b90
  Section     : .text
  Orc Section : .local.text._Z16OrBitTablesShiftItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp391 # Offset: 10
    0000000c: 	je	.Ltmp391 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp392:
    00000018: 	movl	%edx, %ecx
    0000001a: 	movq	%rdx, %rax
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	andl	$0xf, %ecx
    00000027: 	shrq	$0x4, %rax
    0000002b: 	shll	%cl, %r10d
    0000002e: 	movl	%r10d, %ecx
    00000031: 	andw	(%rsi,%rax,2), %cx
    00000035: 	orw	%cx, (%rdi,%rax,2)
    00000039: 	cmpq	%rdx, %r8
    0000003c: 	jne	.Ltmp392 # Offset: 60
.Ltmp391:
    0000003e: 	retq # Offset: 62
DWARF CFI Instructions:
    <empty>
End of Function "_Z16OrBitTablesShiftItEvPT_PKS0_mm"

Binary Function "_Z11OrBitTablesItEvPT_PKS0_mm" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x8bd0
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x8bd0
  Section     : .text
  Orc Section : .local.text._Z11OrBitTablesItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp393 # Offset: 10
    0000000c: 	je	.Ltmp393 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp394:
    00000018: 	movl	%edx, %ecx
    0000001a: 	movq	%rdx, %rax
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	andl	$0xf, %ecx
    00000027: 	shrq	$0x4, %rax
    0000002b: 	shll	%cl, %r10d
    0000002e: 	movl	%r10d, %ecx
    00000031: 	andw	(%rsi,%rax,2), %cx
    00000035: 	orw	%cx, (%rdi,%rax,2)
    00000039: 	cmpq	%rdx, %r8
    0000003c: 	jne	.Ltmp394 # Offset: 60
.Ltmp393:
    0000003e: 	retq # Offset: 62
DWARF CFI Instructions:
    <empty>
End of Function "_Z11OrBitTablesItEvPT_PKS0_mm"

Binary Function "_Z19XorBitTablesHalfOptItEvPT_PKS0_mm" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x8c10
  Size        : 0x449
  MaxSize     : 0x450
  Offset      : 0x8c10
  Section     : .text
  Orc Section : .local.text._Z19XorBitTablesHalfOptItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp395 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %rax
    00000015: 	movq	%rsi, %r8
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rdx
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp396 # Offset: 30
    00000024: 	movl	$0x1, %r9d
    0000002a: 	testb	$0xf, %al
    0000002c: 	jne	.Ltmp397 # Offset: 44
    0000002e: 	jmp	.Ltmp398 # Offset: 46
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp399:
    00000038: 	testb	$0xf, %al
    0000003a: 	je	.Ltmp398 # Offset: 58
.Ltmp397:
    00000040: 	movl	%eax, %ecx
    00000042: 	movq	%rax, %rsi
    00000045: 	movl	%r9d, %ebx
    00000048: 	addq	$0x1, %rax
    0000004c: 	andl	$0xf, %ecx
    0000004f: 	shrq	$0x4, %rsi
    00000053: 	shll	%cl, %ebx
    00000055: 	movl	%ebx, %ecx
    00000057: 	andw	(%r8,%rsi,2), %cx
    0000005c: 	xorw	%cx, (%rdi,%rsi,2)
    00000060: 	subq	$0x1, %rdx
    00000064: 	jae	.Ltmp399 # Offset: 100
    00000066: 	movq	%rax, %rsi
    00000069: 	shrq	$0x4, %rsi
.Ltmp406:
    0000006d: 	leaq	(%rsi,%rsi), %r10
    00000071: 	leaq	-0x10(%rdx), %r11
    00000075: 	leaq	(%rdi,%r10), %r9
    00000079: 	leaq	0x2(%r8,%r10), %rbp
    0000007e: 	movq	%r9, %rbx
    00000081: 	leaq	0x1(%rsi), %rcx
    00000085: 	subq	%rbp, %rbx
    00000088: 	cmpq	$0xc, %rbx
    0000008c: 	jbe	.Ltmp400 # Offset: 140
    00000092: 	cmpq	$0x2f, %r11
    00000096: 	jbe	.Ltmp400 # Offset: 150
    0000009c: 	movq	%r11, %r12
    0000009f: 	shrq	$0x4, %r12
    000000a3: 	leaq	0x1(%r12), %rbp
    000000a8: 	cmpq	$0x6f, %r11
    000000ac: 	jbe	.Ltmp401 # Offset: 172
    000000b2: 	movq	%rbp, %rbx
    000000b5: 	addq	%r8, %r10
    000000b8: 	xorl	%ecx, %ecx
    000000ba: 	shrq	$0x3, %rbx
    000000be: 	shlq	$0x4, %rbx
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp402:
    000000c8: 	movdqu	(%r10,%rcx), %xmm0
    000000ce: 	movdqu	(%r9,%rcx), %xmm2
    000000d4: 	pxor	%xmm2, %xmm0
    000000d8: 	movups	%xmm0, (%r9,%rcx)
    000000dd: 	addq	$0x10, %rcx
    000000e1: 	cmpq	%rbx, %rcx
    000000e4: 	jne	.Ltmp402 # Offset: 228
    000000e6: 	movq	%rbp, %r10
    000000e9: 	movq	%rdx, %rcx
    000000ec: 	andq	$-0x8, %r10
    000000f0: 	movq	%r10, %r9
    000000f3: 	addq	%r10, %rsi
    000000f6: 	shlq	$0x4, %r9
    000000fa: 	subq	%r9, %rcx
    000000fd: 	movq	%rsi, %r9
    00000100: 	cmpq	%rbp, %r10
    00000103: 	je	.Ltmp403 # Offset: 259
    00000105: 	subq	%r10, %r12
    00000108: 	leaq	0x1(%r12), %rbp
    0000010d: 	cmpq	$0x2, %r12
    00000111: 	jbe	.Ltmp404 # Offset: 273
.Ltmp410:
    00000113: 	leaq	(%rdi,%rsi,2), %r10
    00000117: 	movq	(%r8,%rsi,2), %xmm0
    0000011d: 	movq	%rbp, %rsi
    00000120: 	movq	(%r10), %xmm1
    00000125: 	andq	$-0x4, %rsi
    00000129: 	addq	%rsi, %r9
    0000012c: 	pxor	%xmm1, %xmm0
    00000130: 	movq	%xmm0, (%r10)
    00000135: 	movq	%rsi, %r10
    00000138: 	shlq	$0x4, %r10
    0000013c: 	subq	%r10, %rcx
    0000013f: 	cmpq	%rbp, %rsi
    00000142: 	je	.Ltmp403 # Offset: 322
.Ltmp404:
    00000144: 	leaq	(%r9,%r9), %rsi
    00000148: 	movzwl	(%r8,%r9,2), %r9d
    0000014d: 	xorw	%r9w, (%rdi,%rsi)
    00000152: 	leaq	-0x10(%rcx), %r9
    00000156: 	cmpq	$0xf, %r9
    0000015a: 	jbe	.Ltmp403 # Offset: 346
    0000015c: 	subq	$0x20, %rcx
    00000160: 	movzwl	0x2(%r8,%rsi), %r9d
    00000166: 	xorw	%r9w, 0x2(%rdi,%rsi)
    0000016c: 	cmpq	$0xf, %rcx
    00000170: 	jbe	.Ltmp403 # Offset: 368
    00000172: 	movzwl	0x4(%r8,%rsi), %ecx
    00000178: 	xorw	%cx, 0x4(%rdi,%rsi)
.Ltmp403:
    0000017d: 	andq	$-0x10, %r11
    00000181: 	andl	$0xf, %edx
    00000184: 	leaq	0x10(%rax,%r11), %rax
.Ltmp407:
    00000189: 	testq	%rdx, %rdx
    0000018c: 	je	.Ltmp405 # Offset: 396
    00000192: 	movl	%eax, %ecx
    00000194: 	movl	$0x1, %esi
    00000199: 	movq	%rax, %r9
    0000019c: 	andl	$0xf, %ecx
    0000019f: 	movl	%esi, %ebx
    000001a1: 	shrq	$0x4, %r9
    000001a5: 	shll	%cl, %ebx
    000001a7: 	movl	%ebx, %ecx
    000001a9: 	andw	(%r8,%r9,2), %cx
    000001ae: 	xorw	%cx, (%rdi,%r9,2)
    000001b3: 	leaq	0x1(%rax), %rcx
    000001b7: 	cmpq	$0x1, %rdx
    000001bb: 	je	.Ltmp405 # Offset: 443
    000001c1: 	movq	%rcx, %r9
    000001c4: 	movl	%esi, %ebx
    000001c6: 	andl	$0xf, %ecx
    000001c9: 	shrq	$0x4, %r9
    000001cd: 	shll	%cl, %ebx
    000001cf: 	movl	%ebx, %ecx
    000001d1: 	andw	(%r8,%r9,2), %cx
    000001d6: 	xorw	%cx, (%rdi,%r9,2)
    000001db: 	leaq	0x2(%rax), %rcx
    000001df: 	cmpq	$0x2, %rdx
    000001e3: 	je	.Ltmp405 # Offset: 483
    000001e9: 	movq	%rcx, %r9
    000001ec: 	movl	%esi, %ebx
    000001ee: 	andl	$0xf, %ecx
    000001f1: 	shrq	$0x4, %r9
    000001f5: 	shll	%cl, %ebx
    000001f7: 	movl	%ebx, %ecx
    000001f9: 	andw	(%r8,%r9,2), %cx
    000001fe: 	xorw	%cx, (%rdi,%r9,2)
    00000203: 	leaq	0x3(%rax), %rcx
    00000207: 	cmpq	$0x3, %rdx
    0000020b: 	je	.Ltmp405 # Offset: 523
    00000211: 	movq	%rcx, %r9
    00000214: 	movl	%esi, %ebx
    00000216: 	andl	$0xf, %ecx
    00000219: 	shrq	$0x4, %r9
    0000021d: 	shll	%cl, %ebx
    0000021f: 	movl	%ebx, %ecx
    00000221: 	andw	(%r8,%r9,2), %cx
    00000226: 	xorw	%cx, (%rdi,%r9,2)
    0000022b: 	leaq	0x4(%rax), %rcx
    0000022f: 	cmpq	$0x4, %rdx
    00000233: 	je	.Ltmp405 # Offset: 563
    00000239: 	movq	%rcx, %r9
    0000023c: 	movl	%esi, %ebx
    0000023e: 	andl	$0xf, %ecx
    00000241: 	shrq	$0x4, %r9
    00000245: 	shll	%cl, %ebx
    00000247: 	movl	%ebx, %ecx
    00000249: 	andw	(%r8,%r9,2), %cx
    0000024e: 	xorw	%cx, (%rdi,%r9,2)
    00000253: 	leaq	0x5(%rax), %rcx
    00000257: 	cmpq	$0x5, %rdx
    0000025b: 	je	.Ltmp405 # Offset: 603
    00000261: 	movq	%rcx, %r9
    00000264: 	movl	%esi, %ebx
    00000266: 	andl	$0xf, %ecx
    00000269: 	shrq	$0x4, %r9
    0000026d: 	shll	%cl, %ebx
    0000026f: 	movl	%ebx, %ecx
    00000271: 	andw	(%r8,%r9,2), %cx
    00000276: 	xorw	%cx, (%rdi,%r9,2)
    0000027b: 	leaq	0x6(%rax), %rcx
    0000027f: 	cmpq	$0x6, %rdx
    00000283: 	je	.Ltmp405 # Offset: 643
    00000289: 	movq	%rcx, %r9
    0000028c: 	movl	%esi, %ebx
    0000028e: 	andl	$0xf, %ecx
    00000291: 	shrq	$0x4, %r9
    00000295: 	shll	%cl, %ebx
    00000297: 	movl	%ebx, %ecx
    00000299: 	andw	(%r8,%r9,2), %cx
    0000029e: 	xorw	%cx, (%rdi,%r9,2)
    000002a3: 	leaq	0x7(%rax), %rcx
    000002a7: 	cmpq	$0x7, %rdx
    000002ab: 	je	.Ltmp405 # Offset: 683
    000002b1: 	movq	%rcx, %r9
    000002b4: 	movl	%esi, %ebx
    000002b6: 	andl	$0xf, %ecx
    000002b9: 	shrq	$0x4, %r9
    000002bd: 	shll	%cl, %ebx
    000002bf: 	movl	%ebx, %ecx
    000002c1: 	andw	(%r8,%r9,2), %cx
    000002c6: 	xorw	%cx, (%rdi,%r9,2)
    000002cb: 	leaq	0x8(%rax), %rcx
    000002cf: 	cmpq	$0x8, %rdx
    000002d3: 	je	.Ltmp405 # Offset: 723
    000002d9: 	movq	%rcx, %r9
    000002dc: 	andl	$0xf, %ecx
    000002df: 	shrq	$0x4, %r9
    000002e3: 	shll	%cl, %esi
    000002e5: 	leaq	0x9(%rax), %rcx
    000002e9: 	andw	(%r8,%r9,2), %si
    000002ee: 	xorw	%si, (%rdi,%r9,2)
    000002f3: 	cmpq	$0x9, %rdx
    000002f7: 	je	.Ltmp405 # Offset: 759
    000002fd: 	movl	$0x1, %esi
    00000302: 	movq	%rcx, %r9
    00000305: 	andl	$0xf, %ecx
    00000308: 	movl	%esi, %ebx
    0000030a: 	shrq	$0x4, %r9
    0000030e: 	shll	%cl, %ebx
    00000310: 	movl	%ebx, %ecx
    00000312: 	andw	(%r8,%r9,2), %cx
    00000317: 	xorw	%cx, (%rdi,%r9,2)
    0000031c: 	leaq	0xa(%rax), %rcx
    00000320: 	cmpq	$0xa, %rdx
    00000324: 	je	.Ltmp405 # Offset: 804
    0000032a: 	movq	%rcx, %r9
    0000032d: 	movl	%esi, %ebx
    0000032f: 	andl	$0xf, %ecx
    00000332: 	shrq	$0x4, %r9
    00000336: 	shll	%cl, %ebx
    00000338: 	movl	%ebx, %ecx
    0000033a: 	andw	(%r8,%r9,2), %cx
    0000033f: 	xorw	%cx, (%rdi,%r9,2)
    00000344: 	leaq	0xb(%rax), %rcx
    00000348: 	cmpq	$0xb, %rdx
    0000034c: 	je	.Ltmp405 # Offset: 844
    00000352: 	movq	%rcx, %r9
    00000355: 	movl	%esi, %ebx
    00000357: 	andl	$0xf, %ecx
    0000035a: 	shrq	$0x4, %r9
    0000035e: 	shll	%cl, %ebx
    00000360: 	movl	%ebx, %ecx
    00000362: 	andw	(%r8,%r9,2), %cx
    00000367: 	xorw	%cx, (%rdi,%r9,2)
    0000036c: 	leaq	0xc(%rax), %rcx
    00000370: 	cmpq	$0xc, %rdx
    00000374: 	je	.Ltmp405 # Offset: 884
    00000376: 	movq	%rcx, %r9
    00000379: 	movl	%esi, %ebx
    0000037b: 	andl	$0xf, %ecx
    0000037e: 	shrq	$0x4, %r9
    00000382: 	shll	%cl, %ebx
    00000384: 	movl	%ebx, %ecx
    00000386: 	andw	(%r8,%r9,2), %cx
    0000038b: 	xorw	%cx, (%rdi,%r9,2)
    00000390: 	leaq	0xd(%rax), %rcx
    00000394: 	cmpq	$0xd, %rdx
    00000398: 	je	.Ltmp405 # Offset: 920
    0000039a: 	movq	%rcx, %r9
    0000039d: 	movl	%esi, %ebx
    0000039f: 	andl	$0xf, %ecx
    000003a2: 	shrq	$0x4, %r9
    000003a6: 	shll	%cl, %ebx
    000003a8: 	movl	%ebx, %ecx
    000003aa: 	andw	(%r8,%r9,2), %cx
    000003af: 	xorw	%cx, (%rdi,%r9,2)
    000003b4: 	leaq	0xe(%rax), %rcx
    000003b8: 	cmpq	$0xe, %rdx
    000003bc: 	je	.Ltmp405 # Offset: 956
    000003be: 	movq	%rcx, %rax
    000003c1: 	andl	$0xf, %ecx
    000003c4: 	shrq	$0x4, %rax
    000003c8: 	shll	%cl, %esi
    000003ca: 	andw	(%r8,%rax,2), %si
    000003cf: 	xorw	%si, (%rdi,%rax,2)
.Ltmp405:
    000003d3: 	popq	%rbx
    000003d4: 	popq	%rbp
    000003d5: 	popq	%r12
    000003d7: 	retq # Offset: 983
    000003d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp395:
    000003e0: 	retq # Offset: 992
    000003e1: 	nopl	(%rax) # Size: 7
.Ltmp398:
    000003e8: 	movq	%rax, %rsi
    000003eb: 	shrq	$0x4, %rsi
    000003ef: 	cmpq	$0xf, %rdx
    000003f3: 	ja	.Ltmp406 # Offset: 1011
    000003f9: 	jmp	.Ltmp407 # Offset: 1017
    000003fe: 	nop # Size: 2
.Ltmp400:
    00000400: 	movq	%r11, %r10
    00000403: 	shrq	$0x4, %r10
    00000407: 	addq	%rcx, %r10
    0000040a: 	jmp	.Ltmp408 # Offset: 1034
    0000040c: 	nopl	(%rax) # Size: 4
.Ltmp409:
    00000410: 	addq	$0x1, %rcx
.Ltmp408:
    00000414: 	movzwl	(%r8,%rsi,2), %r9d
    00000419: 	xorw	%r9w, (%rdi,%rsi,2)
    0000041e: 	movq	%rcx, %rsi
    00000421: 	cmpq	%rcx, %r10
    00000424: 	jne	.Ltmp409 # Offset: 1060
    00000426: 	jmp	.Ltmp403 # Offset: 1062
.Ltmp401:
    0000042b: 	movq	%rdx, %rcx
    0000042e: 	movq	%rsi, %r9
    00000431: 	jmp	.Ltmp410 # Offset: 1073
.Ltmp396:
    00000436: 	movq	%rax, %rsi
    00000439: 	movq	$-0x1, %rdx
    00000440: 	shrq	$0x4, %rsi
    00000444: 	jmp	.Ltmp406 # Offset: 1092
DWARF CFI Instructions:
    <empty>
End of Function "_Z19XorBitTablesHalfOptItEvPT_PKS0_mm"

Binary Function "_Z17XorBitTablesShiftItEvPT_PKS0_mm" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x9060
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x9060
  Section     : .text
  Orc Section : .local.text._Z17XorBitTablesShiftItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp411 # Offset: 10
    0000000c: 	je	.Ltmp411 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp412:
    00000018: 	movl	%edx, %ecx
    0000001a: 	movq	%rdx, %rax
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	andl	$0xf, %ecx
    00000027: 	shrq	$0x4, %rax
    0000002b: 	shll	%cl, %r10d
    0000002e: 	movl	%r10d, %ecx
    00000031: 	andw	(%rsi,%rax,2), %cx
    00000035: 	xorw	%cx, (%rdi,%rax,2)
    00000039: 	cmpq	%rdx, %r8
    0000003c: 	jne	.Ltmp412 # Offset: 60
.Ltmp411:
    0000003e: 	retq # Offset: 62
DWARF CFI Instructions:
    <empty>
End of Function "_Z17XorBitTablesShiftItEvPT_PKS0_mm"

Binary Function "_Z12XorBitTablesItEvPT_PKS0_mm" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x90a0
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x90a0
  Section     : .text
  Orc Section : .local.text._Z12XorBitTablesItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp413 # Offset: 10
    0000000c: 	je	.Ltmp413 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp414:
    00000018: 	movl	%edx, %ecx
    0000001a: 	movq	%rdx, %rax
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	andl	$0xf, %ecx
    00000027: 	shrq	$0x4, %rax
    0000002b: 	shll	%cl, %r10d
    0000002e: 	movl	%r10d, %ecx
    00000031: 	andw	(%rsi,%rax,2), %cx
    00000035: 	xorw	%cx, (%rdi,%rax,2)
    00000039: 	cmpq	%rdx, %r8
    0000003c: 	jne	.Ltmp414 # Offset: 60
.Ltmp413:
    0000003e: 	retq # Offset: 62
DWARF CFI Instructions:
    <empty>
End of Function "_Z12XorBitTablesItEvPT_PKS0_mm"

Binary Function "_Z29AndComplimentBitTablesHalfOptItEvPT_PKS0_mm" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x90e0
  Size        : 0x25c
  MaxSize     : 0x260
  Offset      : 0x90e0
  Section     : .text
  Orc Section : .local.text._Z29AndComplimentBitTablesHalfOptItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp415 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %rax
    00000015: 	pushq	%rbp
    00000016: 	leaq	-0x1(%rcx), %r8
    0000001a: 	pushq	%rbx
    0000001b: 	je	.Ltmp416 # Offset: 27
    00000021: 	movl	$0x1, %r10d
    00000027: 	testb	$0xf, %al
    00000029: 	jne	.Ltmp417 # Offset: 41
    0000002b: 	jmp	.Ltmp418 # Offset: 43
.Ltmp419:
    00000030: 	testb	$0xf, %al
    00000032: 	je	.Ltmp418 # Offset: 50
.Ltmp417:
    00000038: 	movq	%rax, %rdx
    0000003b: 	movl	%eax, %ecx
    0000003d: 	movl	%r10d, %ebx
    00000040: 	addq	$0x1, %rax
    00000044: 	shrq	$0x4, %rdx
    00000048: 	andl	$0xf, %ecx
    0000004b: 	leaq	(%rdi,%rdx,2), %r9
    0000004f: 	movzwl	(%rsi,%rdx,2), %edx
    00000053: 	shll	%cl, %ebx
    00000055: 	movl	%ebx, %ecx
    00000057: 	notl	%edx
    00000059: 	notl	%ecx
    0000005b: 	andw	(%r9), %cx
    0000005f: 	andl	%ebx, %edx
    00000061: 	orl	%ecx, %edx
    00000063: 	andw	(%r9), %dx
    00000067: 	movw	%dx, (%r9)
    0000006b: 	subq	$0x1, %r8
    0000006f: 	jae	.Ltmp419 # Offset: 111
    00000071: 	movq	%rax, %rcx
    00000074: 	shrq	$0x4, %rcx
.Ltmp427:
    00000078: 	leaq	(%rcx,%rcx), %r10
    0000007c: 	leaq	-0x10(%r8), %r11
    00000080: 	leaq	(%rdi,%r10), %r9
    00000084: 	leaq	0x2(%rsi,%r10), %rbp
    00000089: 	movq	%r9, %rbx
    0000008c: 	leaq	0x1(%rcx), %rdx
    00000090: 	subq	%rbp, %rbx
    00000093: 	cmpq	$0xc, %rbx
    00000097: 	jbe	.Ltmp420 # Offset: 151
    0000009d: 	cmpq	$0x2f, %r11
    000000a1: 	jbe	.Ltmp420 # Offset: 161
    000000a7: 	movq	%r11, %r12
    000000aa: 	shrq	$0x4, %r12
    000000ae: 	leaq	0x1(%r12), %rbp
    000000b3: 	cmpq	$0x6f, %r11
    000000b7: 	jbe	.Ltmp421 # Offset: 183
    000000bd: 	movq	%rbp, %rbx
    000000c0: 	addq	%rsi, %r10
    000000c3: 	xorl	%edx, %edx
    000000c5: 	shrq	$0x3, %rbx
    000000c9: 	shlq	$0x4, %rbx
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp422:
    000000d0: 	movdqu	(%r10,%rdx), %xmm0
    000000d6: 	movdqu	(%r9,%rdx), %xmm2
    000000dc: 	pandn	%xmm2, %xmm0
    000000e0: 	movups	%xmm0, (%r9,%rdx)
    000000e5: 	addq	$0x10, %rdx
    000000e9: 	cmpq	%rdx, %rbx
    000000ec: 	jne	.Ltmp422 # Offset: 236
    000000ee: 	movq	%rbp, %r10
    000000f1: 	movq	%r8, %rdx
    000000f4: 	andq	$-0x8, %r10
    000000f8: 	movq	%r10, %r9
    000000fb: 	addq	%r10, %rcx
    000000fe: 	shlq	$0x4, %r9
    00000102: 	subq	%r9, %rdx
    00000105: 	movq	%rcx, %r9
    00000108: 	cmpq	%rbp, %r10
    0000010b: 	je	.Ltmp423 # Offset: 267
    0000010d: 	subq	%r10, %r12
    00000110: 	leaq	0x1(%r12), %rbp
    00000115: 	cmpq	$0x2, %r12
    00000119: 	jbe	.Ltmp424 # Offset: 281
.Ltmp431:
    0000011b: 	leaq	(%rdi,%rcx,2), %r10
    0000011f: 	movq	(%rsi,%rcx,2), %xmm0
    00000124: 	movq	%rbp, %rcx
    00000127: 	movq	(%r10), %xmm1
    0000012c: 	andq	$-0x4, %rcx
    00000130: 	addq	%rcx, %r9
    00000133: 	pandn	%xmm1, %xmm0
    00000137: 	movq	%xmm0, (%r10)
    0000013c: 	movq	%rcx, %r10
    0000013f: 	shlq	$0x4, %r10
    00000143: 	subq	%r10, %rdx
    00000146: 	cmpq	%rbp, %rcx
    00000149: 	je	.Ltmp423 # Offset: 329
.Ltmp424:
    0000014b: 	leaq	(%r9,%r9), %rcx
    0000014f: 	movzwl	(%rsi,%r9,2), %r9d
    00000154: 	notl	%r9d
    00000157: 	andw	%r9w, (%rdi,%rcx)
    0000015c: 	leaq	-0x10(%rdx), %r9
    00000160: 	cmpq	$0xf, %r9
    00000164: 	jbe	.Ltmp423 # Offset: 356
    00000166: 	movzwl	0x2(%rsi,%rcx), %r9d
    0000016c: 	subq	$0x20, %rdx
    00000170: 	notl	%r9d
    00000173: 	andw	%r9w, 0x2(%rdi,%rcx)
    00000179: 	cmpq	$0xf, %rdx
    0000017d: 	jbe	.Ltmp423 # Offset: 381
    0000017f: 	movzwl	0x4(%rsi,%rcx), %edx
    00000184: 	notl	%edx
    00000186: 	andw	%dx, 0x4(%rdi,%rcx)
.Ltmp423:
    0000018b: 	andq	$-0x10, %r11
    0000018f: 	andl	$0xf, %r8d
    00000193: 	leaq	0x10(%rax,%r11), %rax
.Ltmp428:
    00000198: 	testq	%r8, %r8
    0000019b: 	je	.Ltmp425 # Offset: 411
    0000019d: 	addq	%rax, %r8
    000001a0: 	movl	$0x1, %r10d
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp426:
    000001b0: 	movq	%rax, %rdx
    000001b3: 	movl	%eax, %ecx
    000001b5: 	movl	%r10d, %ebx
    000001b8: 	addq	$0x1, %rax
    000001bc: 	shrq	$0x4, %rdx
    000001c0: 	andl	$0xf, %ecx
    000001c3: 	leaq	(%rdi,%rdx,2), %r9
    000001c7: 	movzwl	(%rsi,%rdx,2), %edx
    000001cb: 	shll	%cl, %ebx
    000001cd: 	movl	%ebx, %ecx
    000001cf: 	notl	%edx
    000001d1: 	notl	%ecx
    000001d3: 	andw	(%r9), %cx
    000001d7: 	andl	%ebx, %edx
    000001d9: 	orl	%ecx, %edx
    000001db: 	andw	(%r9), %dx
    000001df: 	movw	%dx, (%r9)
    000001e3: 	cmpq	%r8, %rax
    000001e6: 	jne	.Ltmp426 # Offset: 486
.Ltmp425:
    000001e8: 	popq	%rbx
    000001e9: 	popq	%rbp
    000001ea: 	popq	%r12
    000001ec: 	retq # Offset: 492
    000001ed: 	nopl	(%rax) # Size: 3
.Ltmp415:
    000001f0: 	retq # Offset: 496
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp418:
    000001f8: 	movq	%rax, %rcx
    000001fb: 	shrq	$0x4, %rcx
    000001ff: 	cmpq	$0xf, %r8
    00000203: 	ja	.Ltmp427 # Offset: 515
    00000209: 	jmp	.Ltmp428 # Offset: 521
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp420:
    00000210: 	movq	%r11, %r10
    00000213: 	shrq	$0x4, %r10
    00000217: 	addq	%rdx, %r10
    0000021a: 	jmp	.Ltmp429 # Offset: 538
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp430:
    00000220: 	addq	$0x1, %rdx
.Ltmp429:
    00000224: 	movzwl	(%rsi,%rcx,2), %r9d
    00000229: 	notl	%r9d
    0000022c: 	andw	%r9w, (%rdi,%rcx,2)
    00000231: 	movq	%rdx, %rcx
    00000234: 	cmpq	%rdx, %r10
    00000237: 	jne	.Ltmp430 # Offset: 567
    00000239: 	jmp	.Ltmp423 # Offset: 569
.Ltmp421:
    0000023e: 	movq	%r8, %rdx
    00000241: 	movq	%rcx, %r9
    00000244: 	jmp	.Ltmp431 # Offset: 580
.Ltmp416:
    00000249: 	movq	%rdx, %rcx
    0000024c: 	movq	$-0x1, %r8
    00000253: 	shrq	$0x4, %rcx
    00000257: 	jmp	.Ltmp427 # Offset: 599
DWARF CFI Instructions:
    <empty>
End of Function "_Z29AndComplimentBitTablesHalfOptItEvPT_PKS0_mm"

Binary Function "_Z27AndComplimentBitTablesShiftItEvPT_PKS0_mm" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x9340
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x9340
  Section     : .text
  Orc Section : .local.text._Z27AndComplimentBitTablesShiftItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %r9
    0000000a: 	movq	%rcx, %rdi
    0000000d: 	movq	%rdx, %rsi
    00000010: 	cmpq	%rdx, %rcx
    00000013: 	jb	.Ltmp432 # Offset: 19
    00000015: 	je	.Ltmp432 # Offset: 21
    00000017: 	movl	$0x1, %r10d
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp433:
    00000020: 	movl	%esi, %ecx
    00000022: 	movq	%rsi, %rax
    00000025: 	movl	%r10d, %edx
    00000028: 	addq	$0x1, %rsi
    0000002c: 	andl	$0xf, %ecx
    0000002f: 	shrq	$0x4, %rax
    00000033: 	shll	%cl, %edx
    00000035: 	leaq	(%r8,%rax,2), %rcx
    00000039: 	movzwl	(%r9,%rax,2), %eax
    0000003e: 	notl	%eax
    00000040: 	andl	%edx, %eax
    00000042: 	notl	%edx
    00000044: 	andw	(%rcx), %dx
    00000047: 	orl	%edx, %eax
    00000049: 	andw	(%rcx), %ax
    0000004c: 	movw	%ax, (%rcx)
    0000004f: 	cmpq	%rsi, %rdi
    00000052: 	jne	.Ltmp433 # Offset: 82
.Ltmp432:
    00000054: 	retq # Offset: 84
DWARF CFI Instructions:
    <empty>
End of Function "_Z27AndComplimentBitTablesShiftItEvPT_PKS0_mm"

Binary Function "_Z22AndComplimentBitTablesItEvPT_PKS0_mm" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x93a0
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x93a0
  Section     : .text
  Orc Section : .local.text._Z22AndComplimentBitTablesItEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r10
    00000007: 	movq	%rdi, %r9
    0000000a: 	movq	%rdx, %rsi
    0000000d: 	movq	%rcx, %r8
    00000010: 	cmpq	%rdx, %rcx
    00000013: 	jb	.Ltmp434 # Offset: 19
    00000015: 	je	.Ltmp434 # Offset: 21
    00000017: 	movl	$0x1, %r11d
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp435:
    00000020: 	movq	%rsi, %rax
    00000023: 	movl	%esi, %ecx
    00000025: 	movl	%r11d, %edx
    00000028: 	addq	$0x1, %rsi
    0000002c: 	shrq	$0x4, %rax
    00000030: 	andl	$0xf, %ecx
    00000033: 	leaq	(%r9,%rax,2), %rdi
    00000037: 	movzwl	(%r10,%rax,2), %eax
    0000003c: 	shll	%cl, %edx
    0000003e: 	notl	%eax
    00000040: 	andl	%edx, %eax
    00000042: 	notl	%edx
    00000044: 	andw	(%rdi), %dx
    00000047: 	orl	%edx, %eax
    00000049: 	andw	(%rdi), %ax
    0000004c: 	movw	%ax, (%rdi)
    0000004f: 	cmpq	%rsi, %r8
    00000052: 	jne	.Ltmp435 # Offset: 82
.Ltmp434:
    00000054: 	retq # Offset: 84
DWARF CFI Instructions:
    <empty>
End of Function "_Z22AndComplimentBitTablesItEvPT_PKS0_mm"

Binary Function "_Z23StencilBitTablesHalfOptItEvPT_PKS0_S3_mm" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x9400
  Size        : 0x4ea
  MaxSize     : 0x4f0
  Offset      : 0x9400
  Section     : .text
  Orc Section : .local.text._Z23StencilBitTablesHalfOptItEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	cmpq	%rcx, %r8
    00000007: 	jb	.Ltmp436 # Offset: 7
    0000000d: 	subq	%rcx, %r8
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r10
    00000015: 	movq	%rdx, %r11
    00000018: 	pushq	%r13
    0000001a: 	movq	%rcx, %rax
    0000001d: 	leaq	-0x1(%r8), %r9
    00000021: 	pushq	%r12
    00000023: 	pushq	%rbp
    00000024: 	pushq	%rbx
    00000025: 	je	.Ltmp437 # Offset: 37
    0000002b: 	movl	$0x1, %r8d
    00000031: 	testb	$0xf, %al
    00000033: 	jne	.Ltmp438 # Offset: 51
    00000035: 	jmp	.Ltmp439 # Offset: 53
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp440:
    00000040: 	testb	$0xf, %al
    00000042: 	je	.Ltmp439 # Offset: 66
.Ltmp438:
    00000048: 	movq	%rax, %rsi
    0000004b: 	movl	%eax, %ecx
    0000004d: 	movl	%r8d, %ebx
    00000050: 	addq	$0x1, %rax
    00000054: 	shrq	$0x4, %rsi
    00000058: 	andl	$0xf, %ecx
    0000005b: 	movzwl	(%r10,%rsi,2), %edx
    00000060: 	shll	%cl, %ebx
    00000062: 	andw	(%r11,%rsi,2), %dx
    00000067: 	andl	%ebx, %edx
    00000069: 	orw	%dx, (%rdi,%rsi,2)
    0000006d: 	subq	$0x1, %r9
    00000071: 	jae	.Ltmp440 # Offset: 113
    00000073: 	movq	%rax, %rcx
    00000076: 	shrq	$0x4, %rcx
.Ltmp447:
    0000007a: 	leaq	(%rcx,%rcx), %r8
    0000007e: 	leaq	-0x10(%r9), %rbx
    00000082: 	leaq	(%rdi,%r8), %rsi
    00000086: 	leaq	0x2(%r8), %rbp
    0000008a: 	leaq	(%r11,%rbp), %r13
    0000008e: 	movq	%rsi, %r12
    00000091: 	leaq	0x1(%rcx), %rdx
    00000095: 	subq	%r13, %r12
    00000098: 	movq	%rsi, %r13
    0000009b: 	cmpq	$0xc, %r12
    0000009f: 	seta	%r12b
    000000a3: 	addq	%r10, %rbp
    000000a6: 	subq	%rbp, %r13
    000000a9: 	cmpq	$0xc, %r13
    000000ad: 	seta	%bpl
    000000b1: 	testb	%bpl, %r12b
    000000b4: 	je	.Ltmp441 # Offset: 180
    000000ba: 	cmpq	$0x2f, %rbx
    000000be: 	jbe	.Ltmp441 # Offset: 190
    000000c4: 	movq	%rbx, %r14
    000000c7: 	shrq	$0x4, %r14
    000000cb: 	leaq	0x1(%r14), %r12
    000000cf: 	cmpq	$0x6f, %rbx
    000000d3: 	jbe	.Ltmp442 # Offset: 211
    000000d9: 	movq	%r12, %rbp
    000000dc: 	leaq	(%r10,%r8), %r13
    000000e0: 	xorl	%edx, %edx
    000000e2: 	addq	%r11, %r8
    000000e5: 	shrq	$0x3, %rbp
    000000e9: 	shlq	$0x4, %rbp
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp443:
    000000f0: 	movdqu	(%r8,%rdx), %xmm0
    000000f6: 	movdqu	(%r13,%rdx), %xmm2
    000000fd: 	movdqu	(%rsi,%rdx), %xmm3
    00000102: 	pand	%xmm2, %xmm0
    00000106: 	por	%xmm3, %xmm0
    0000010a: 	movups	%xmm0, (%rsi,%rdx)
    0000010e: 	addq	$0x10, %rdx
    00000112: 	cmpq	%rdx, %rbp
    00000115: 	jne	.Ltmp443 # Offset: 277
    00000117: 	movq	%r12, %r8
    0000011a: 	movq	%r9, %rdx
    0000011d: 	andq	$-0x8, %r8
    00000121: 	movq	%r8, %rsi
    00000124: 	addq	%r8, %rcx
    00000127: 	shlq	$0x4, %rsi
    0000012b: 	subq	%rsi, %rdx
    0000012e: 	movq	%rcx, %rsi
    00000131: 	cmpq	%r12, %r8
    00000134: 	je	.Ltmp444 # Offset: 308
    0000013a: 	subq	%r8, %r14
    0000013d: 	leaq	0x1(%r14), %r12
    00000141: 	cmpq	$0x2, %r14
    00000145: 	jbe	.Ltmp445 # Offset: 325
.Ltmp451:
    00000147: 	movq	(%r11,%rcx,2), %xmm1
    0000014d: 	movq	(%r10,%rcx,2), %xmm0
    00000153: 	leaq	(%rdi,%rcx,2), %r8
    00000157: 	movq	%r12, %rcx
    0000015a: 	andq	$-0x4, %rcx
    0000015e: 	pand	%xmm1, %xmm0
    00000162: 	movq	(%r8), %xmm1
    00000167: 	addq	%rcx, %rsi
    0000016a: 	por	%xmm1, %xmm0
    0000016e: 	movq	%xmm0, (%r8)
    00000173: 	movq	%rcx, %r8
    00000176: 	shlq	$0x4, %r8
    0000017a: 	subq	%r8, %rdx
    0000017d: 	cmpq	%r12, %rcx
    00000180: 	je	.Ltmp444 # Offset: 384
.Ltmp445:
    00000182: 	movzwl	(%r10,%rsi,2), %r8d
    00000187: 	leaq	(%rsi,%rsi), %rcx
    0000018b: 	andw	(%r11,%rsi,2), %r8w
    00000190: 	leaq	-0x10(%rdx), %rsi
    00000194: 	orw	%r8w, (%rdi,%rcx)
    00000199: 	cmpq	$0xf, %rsi
    0000019d: 	jbe	.Ltmp444 # Offset: 413
    0000019f: 	subq	$0x20, %rdx
    000001a3: 	movzwl	0x2(%r10,%rcx), %esi
    000001a9: 	andw	0x2(%r11,%rcx), %si
    000001af: 	orw	%si, 0x2(%rdi,%rcx)
    000001b4: 	cmpq	$0xf, %rdx
    000001b8: 	jbe	.Ltmp444 # Offset: 440
    000001ba: 	movzwl	0x4(%r11,%rcx), %edx
    000001c0: 	andw	0x4(%r10,%rcx), %dx
    000001c6: 	orw	%dx, 0x4(%rdi,%rcx)
.Ltmp444:
    000001cb: 	andq	$-0x10, %rbx
    000001cf: 	andl	$0xf, %r9d
    000001d3: 	leaq	0x10(%rax,%rbx), %rax
.Ltmp448:
    000001d8: 	testq	%r9, %r9
    000001db: 	je	.Ltmp446 # Offset: 475
    000001e1: 	movq	%rax, %r8
    000001e4: 	movl	%eax, %ecx
    000001e6: 	movl	$0x1, %edx
    000001eb: 	shrq	$0x4, %r8
    000001ef: 	andl	$0xf, %ecx
    000001f2: 	movl	%edx, %ebx
    000001f4: 	movzwl	(%r10,%r8,2), %esi
    000001f9: 	shll	%cl, %ebx
    000001fb: 	andw	(%r11,%r8,2), %si
    00000200: 	leaq	0x1(%rax), %rcx
    00000204: 	andl	%ebx, %esi
    00000206: 	orw	%si, (%rdi,%r8,2)
    0000020b: 	cmpq	$0x1, %r9
    0000020f: 	je	.Ltmp446 # Offset: 527
    00000215: 	movq	%rcx, %r8
    00000218: 	movl	%edx, %ebx
    0000021a: 	andl	$0xf, %ecx
    0000021d: 	shrq	$0x4, %r8
    00000221: 	shll	%cl, %ebx
    00000223: 	leaq	0x2(%rax), %rcx
    00000227: 	movzwl	(%r11,%r8,2), %esi
    0000022c: 	andw	(%r10,%r8,2), %si
    00000231: 	andl	%ebx, %esi
    00000233: 	orw	%si, (%rdi,%r8,2)
    00000238: 	cmpq	$0x2, %r9
    0000023c: 	je	.Ltmp446 # Offset: 572
    00000242: 	movq	%rcx, %r8
    00000245: 	movl	%edx, %ebx
    00000247: 	andl	$0xf, %ecx
    0000024a: 	shrq	$0x4, %r8
    0000024e: 	shll	%cl, %ebx
    00000250: 	leaq	0x3(%rax), %rcx
    00000254: 	movzwl	(%r10,%r8,2), %esi
    00000259: 	andw	(%r11,%r8,2), %si
    0000025e: 	andl	%ebx, %esi
    00000260: 	orw	%si, (%rdi,%r8,2)
    00000265: 	cmpq	$0x3, %r9
    00000269: 	je	.Ltmp446 # Offset: 617
    0000026f: 	movq	%rcx, %r8
    00000272: 	movl	%edx, %ebx
    00000274: 	andl	$0xf, %ecx
    00000277: 	shrq	$0x4, %r8
    0000027b: 	shll	%cl, %ebx
    0000027d: 	leaq	0x4(%rax), %rcx
    00000281: 	movzwl	(%r10,%r8,2), %esi
    00000286: 	andw	(%r11,%r8,2), %si
    0000028b: 	andl	%ebx, %esi
    0000028d: 	orw	%si, (%rdi,%r8,2)
    00000292: 	cmpq	$0x4, %r9
    00000296: 	je	.Ltmp446 # Offset: 662
    0000029c: 	movq	%rcx, %r8
    0000029f: 	movl	%edx, %ebx
    000002a1: 	andl	$0xf, %ecx
    000002a4: 	shrq	$0x4, %r8
    000002a8: 	shll	%cl, %ebx
    000002aa: 	leaq	0x5(%rax), %rcx
    000002ae: 	movzwl	(%r10,%r8,2), %esi
    000002b3: 	andw	(%r11,%r8,2), %si
    000002b8: 	andl	%ebx, %esi
    000002ba: 	orw	%si, (%rdi,%r8,2)
    000002bf: 	cmpq	$0x5, %r9
    000002c3: 	je	.Ltmp446 # Offset: 707
    000002c9: 	movq	%rcx, %r8
    000002cc: 	movl	%edx, %ebx
    000002ce: 	andl	$0xf, %ecx
    000002d1: 	shrq	$0x4, %r8
    000002d5: 	shll	%cl, %ebx
    000002d7: 	leaq	0x6(%rax), %rcx
    000002db: 	movzwl	(%r10,%r8,2), %esi
    000002e0: 	andw	(%r11,%r8,2), %si
    000002e5: 	andl	%ebx, %esi
    000002e7: 	orw	%si, (%rdi,%r8,2)
    000002ec: 	cmpq	$0x6, %r9
    000002f0: 	je	.Ltmp446 # Offset: 752
    000002f6: 	movq	%rcx, %r8
    000002f9: 	movl	%edx, %ebx
    000002fb: 	andl	$0xf, %ecx
    000002fe: 	shrq	$0x4, %r8
    00000302: 	shll	%cl, %ebx
    00000304: 	leaq	0x7(%rax), %rcx
    00000308: 	movzwl	(%r10,%r8,2), %esi
    0000030d: 	andw	(%r11,%r8,2), %si
    00000312: 	andl	%ebx, %esi
    00000314: 	orw	%si, (%rdi,%r8,2)
    00000319: 	cmpq	$0x7, %r9
    0000031d: 	je	.Ltmp446 # Offset: 797
    00000323: 	movq	%rcx, %r8
    00000326: 	movl	%edx, %ebx
    00000328: 	andl	$0xf, %ecx
    0000032b: 	shrq	$0x4, %r8
    0000032f: 	shll	%cl, %ebx
    00000331: 	leaq	0x8(%rax), %rcx
    00000335: 	movzwl	(%r10,%r8,2), %esi
    0000033a: 	andw	(%r11,%r8,2), %si
    0000033f: 	andl	%ebx, %esi
    00000341: 	orw	%si, (%rdi,%r8,2)
    00000346: 	cmpq	$0x8, %r9
    0000034a: 	je	.Ltmp446 # Offset: 842
    00000350: 	movq	%rcx, %r8
    00000353: 	andl	$0xf, %ecx
    00000356: 	shrq	$0x4, %r8
    0000035a: 	shll	%cl, %edx
    0000035c: 	leaq	0x9(%rax), %rcx
    00000360: 	movzwl	(%r10,%r8,2), %esi
    00000365: 	andw	(%r11,%r8,2), %si
    0000036a: 	andl	%edx, %esi
    0000036c: 	orw	%si, (%rdi,%r8,2)
    00000371: 	cmpq	$0x9, %r9
    00000375: 	je	.Ltmp446 # Offset: 885
    0000037b: 	movq	%rcx, %r8
    0000037e: 	movl	$0x1, %edx
    00000383: 	andl	$0xf, %ecx
    00000386: 	shrq	$0x4, %r8
    0000038a: 	movl	%edx, %ebx
    0000038c: 	movzwl	(%r10,%r8,2), %esi
    00000391: 	shll	%cl, %ebx
    00000393: 	andw	(%r11,%r8,2), %si
    00000398: 	leaq	0xa(%rax), %rcx
    0000039c: 	andl	%ebx, %esi
    0000039e: 	orw	%si, (%rdi,%r8,2)
    000003a3: 	cmpq	$0xa, %r9
    000003a7: 	je	.Ltmp446 # Offset: 935
    000003ad: 	movq	%rcx, %r8
    000003b0: 	movl	%edx, %ebx
    000003b2: 	andl	$0xf, %ecx
    000003b5: 	shrq	$0x4, %r8
    000003b9: 	shll	%cl, %ebx
    000003bb: 	leaq	0xb(%rax), %rcx
    000003bf: 	movzwl	(%r10,%r8,2), %esi
    000003c4: 	andw	(%r11,%r8,2), %si
    000003c9: 	andl	%ebx, %esi
    000003cb: 	orw	%si, (%rdi,%r8,2)
    000003d0: 	cmpq	$0xb, %r9
    000003d4: 	je	.Ltmp446 # Offset: 980
    000003da: 	movq	%rcx, %r8
    000003dd: 	movl	%edx, %ebx
    000003df: 	andl	$0xf, %ecx
    000003e2: 	shrq	$0x4, %r8
    000003e6: 	shll	%cl, %ebx
    000003e8: 	leaq	0xc(%rax), %rcx
    000003ec: 	movzwl	(%r10,%r8,2), %esi
    000003f1: 	andw	(%r11,%r8,2), %si
    000003f6: 	andl	%ebx, %esi
    000003f8: 	orw	%si, (%rdi,%r8,2)
    000003fd: 	cmpq	$0xc, %r9
    00000401: 	je	.Ltmp446 # Offset: 1025
    00000403: 	movq	%rcx, %r8
    00000406: 	movl	%edx, %ebx
    00000408: 	andl	$0xf, %ecx
    0000040b: 	shrq	$0x4, %r8
    0000040f: 	shll	%cl, %ebx
    00000411: 	leaq	0xd(%rax), %rcx
    00000415: 	movzwl	(%r10,%r8,2), %esi
    0000041a: 	andw	(%r11,%r8,2), %si
    0000041f: 	andl	%ebx, %esi
    00000421: 	orw	%si, (%rdi,%r8,2)
    00000426: 	cmpq	$0xd, %r9
    0000042a: 	je	.Ltmp446 # Offset: 1066
    0000042c: 	movq	%rcx, %r8
    0000042f: 	movl	%edx, %ebx
    00000431: 	andl	$0xf, %ecx
    00000434: 	shrq	$0x4, %r8
    00000438: 	shll	%cl, %ebx
    0000043a: 	leaq	0xe(%rax), %rcx
    0000043e: 	movzwl	(%r10,%r8,2), %esi
    00000443: 	andw	(%r11,%r8,2), %si
    00000448: 	andl	%ebx, %esi
    0000044a: 	orw	%si, (%rdi,%r8,2)
    0000044f: 	cmpq	$0xe, %r9
    00000453: 	je	.Ltmp446 # Offset: 1107
    00000455: 	movq	%rcx, %rax
    00000458: 	andl	$0xf, %ecx
    0000045b: 	shrq	$0x4, %rax
    0000045f: 	shll	%cl, %edx
    00000461: 	movzwl	(%r10,%rax,2), %esi
    00000466: 	andw	(%r11,%rax,2), %si
    0000046b: 	andl	%edx, %esi
    0000046d: 	orw	%si, (%rdi,%rax,2)
.Ltmp446:
    00000471: 	popq	%rbx
    00000472: 	popq	%rbp
    00000473: 	popq	%r12
    00000475: 	popq	%r13
    00000477: 	popq	%r14
    00000479: 	retq # Offset: 1145
    0000047a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp436:
    00000480: 	retq # Offset: 1152
    00000481: 	nopl	(%rax) # Size: 7
.Ltmp439:
    00000488: 	movq	%rax, %rcx
    0000048b: 	shrq	$0x4, %rcx
    0000048f: 	cmpq	$0xf, %r9
    00000493: 	ja	.Ltmp447 # Offset: 1171
    00000499: 	jmp	.Ltmp448 # Offset: 1177
    0000049e: 	nop # Size: 2
.Ltmp441:
    000004a0: 	movq	%rbx, %r8
    000004a3: 	shrq	$0x4, %r8
    000004a7: 	addq	%rdx, %r8
    000004aa: 	jmp	.Ltmp449 # Offset: 1194
    000004ac: 	nopl	(%rax) # Size: 4
.Ltmp450:
    000004b0: 	addq	$0x1, %rdx
.Ltmp449:
    000004b4: 	movzwl	(%r11,%rcx,2), %esi
    000004b9: 	andw	(%r10,%rcx,2), %si
    000004be: 	orw	%si, (%rdi,%rcx,2)
    000004c2: 	movq	%rdx, %rcx
    000004c5: 	cmpq	%r8, %rdx
    000004c8: 	jne	.Ltmp450 # Offset: 1224
    000004ca: 	jmp	.Ltmp444 # Offset: 1226
.Ltmp442:
    000004cf: 	movq	%r9, %rdx
    000004d2: 	movq	%rcx, %rsi
    000004d5: 	jmp	.Ltmp451 # Offset: 1237
.Ltmp437:
    000004da: 	shrq	$0x4, %rcx
    000004de: 	movq	$-0x1, %r9
    000004e5: 	jmp	.Ltmp447 # Offset: 1253
DWARF CFI Instructions:
    <empty>
End of Function "_Z23StencilBitTablesHalfOptItEvPT_PKS0_S3_mm"

Binary Function "_Z21StencilBitTablesShiftItEvPT_PKS0_S3_mm" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x98f0
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x98f0
  Section     : .text
  Orc Section : .local.text._Z21StencilBitTablesShiftItEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	cmpq	%rcx, %r8
    00000007: 	jb	.Ltmp452 # Offset: 7
    00000009: 	je	.Ltmp452 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdx, %r10
    0000000f: 	movq	%rsi, %r9
    00000012: 	movq	%rcx, %rdx
    00000015: 	movl	$0x1, %r11d
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp453:
    00000020: 	movq	%rdx, %rsi
    00000023: 	movl	%edx, %ecx
    00000025: 	movl	%r11d, %ebx
    00000028: 	addq	$0x1, %rdx
    0000002c: 	shrq	$0x4, %rsi
    00000030: 	andl	$0xf, %ecx
    00000033: 	movzwl	(%r9,%rsi,2), %eax
    00000038: 	shll	%cl, %ebx
    0000003a: 	andw	(%r10,%rsi,2), %ax
    0000003f: 	andl	%ebx, %eax
    00000041: 	orw	%ax, (%rdi,%rsi,2)
    00000045: 	cmpq	%rdx, %r8
    00000048: 	jne	.Ltmp453 # Offset: 72
    0000004a: 	popq	%rbx
    0000004b: 	retq # Offset: 75
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp452:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z21StencilBitTablesShiftItEvPT_PKS0_S3_mm"

Binary Function "_Z16StencilBitTablesItEvPT_PKS0_S3_mm" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x9950
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x9950
  Section     : .text
  Orc Section : .local.text._Z16StencilBitTablesItEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	cmpq	%rcx, %r8
    00000007: 	jb	.Ltmp454 # Offset: 7
    00000009: 	je	.Ltmp454 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdx, %r10
    0000000f: 	movq	%rsi, %r9
    00000012: 	movq	%rcx, %rdx
    00000015: 	movl	$0x1, %r11d
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp455:
    00000020: 	movq	%rdx, %rsi
    00000023: 	movl	%edx, %ecx
    00000025: 	movl	%r11d, %ebx
    00000028: 	addq	$0x1, %rdx
    0000002c: 	shrq	$0x4, %rsi
    00000030: 	andl	$0xf, %ecx
    00000033: 	movzwl	(%r9,%rsi,2), %eax
    00000038: 	shll	%cl, %ebx
    0000003a: 	andw	(%r10,%rsi,2), %ax
    0000003f: 	andl	%ebx, %eax
    00000041: 	orw	%ax, (%rdi,%rsi,2)
    00000045: 	cmpq	%rdx, %r8
    00000048: 	jne	.Ltmp455 # Offset: 72
    0000004a: 	popq	%rbx
    0000004b: 	retq # Offset: 75
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp454:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z16StencilBitTablesItEvPT_PKS0_S3_mm"

Binary Function "_Z19CountBitsByteDirectItEmPT_mm" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x99b0
  Size        : 0x228
  MaxSize     : 0x230
  Offset      : 0x99b0
  Section     : .text
  Orc Section : .local.text._Z19CountBitsByteDirectItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp456 # Offset: 10
    0000000c: 	subq	%rsi, %rdx
    0000000f: 	je	.Ltmp456 # Offset: 15
    00000011: 	movq	%rsi, %r8
    00000014: 	movq	%rdi, %r9
    00000017: 	andl	$0x7, %r8d
    0000001b: 	je	.Ltmp457 # Offset: 27
    0000001d: 	xorl	%r8d, %r8d
    00000020: 	movl	$0x1, %r10d
    00000026: 	jmp	.Ltmp458 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp459:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp457 # Offset: 52
.Ltmp458:
    00000036: 	movq	%rsi, %rdi
    00000039: 	movl	%esi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x4, %rdi
    00000042: 	andl	$0xf, %ecx
    00000045: 	shll	%cl, %eax
    00000047: 	andw	(%r9,%rdi,2), %ax
    0000004c: 	cmpw	$0x1, %ax
    00000050: 	sbbq	$-0x1, %r8
    00000054: 	addq	$0x1, %rsi
    00000058: 	subq	$0x1, %rdx
    0000005c: 	jne	.Ltmp459 # Offset: 92
.Ltmp456:
    0000005e: 	movq	%r8, %rax
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp457:
    00000068: 	movq	%rsi, %rax
    0000006b: 	pushq	%rbx
    0000006c: 	shrq	$0x3, %rax
    00000070: 	cmpq	$0x7, %rdx
    00000074: 	jbe	.Ltmp460 # Offset: 116
    0000007a: 	leaq	-0x8(%rdx), %rbx
    0000007e: 	leaq	0x1(%r9,%rax), %r11
    00000083: 	leaq	(%r9,%rax), %rdi
    00000087: 	movq	%rbx, %rax
    0000008a: 	shrq	$0x3, %rax
    0000008e: 	addq	%rax, %r11
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp461:
    00000098: 	movzbl	(%rdi), %ecx
    0000009b: 	movl	%ecx, %r10d
    0000009e: 	movq	%rcx, %rax
    000000a1: 	andl	$0x2, %r10d
    000000a5: 	andl	$0x1, %eax
    000000a8: 	cmpb	$0x1, %r10b
    000000ac: 	movl	%ecx, %r10d
    000000af: 	sbbq	$-0x1, %rax
    000000b3: 	andl	$0x4, %r10d
    000000b7: 	cmpb	$0x1, %r10b
    000000bb: 	movl	%ecx, %r10d
    000000be: 	sbbq	$-0x1, %rax
    000000c2: 	andl	$0x8, %r10d
    000000c6: 	cmpb	$0x1, %r10b
    000000ca: 	movl	%ecx, %r10d
    000000cd: 	sbbq	$-0x1, %rax
    000000d1: 	andl	$0x10, %r10d
    000000d5: 	cmpb	$0x1, %r10b
    000000d9: 	movl	%ecx, %r10d
    000000dc: 	sbbq	$-0x1, %rax
    000000e0: 	andl	$0x20, %r10d
    000000e4: 	cmpb	$0x1, %r10b
    000000e8: 	movl	%ecx, %r10d
    000000eb: 	sbbq	$-0x1, %rax
    000000ef: 	andl	$0x40, %r10d
    000000f3: 	cmpb	$0x1, %r10b
    000000f7: 	sbbq	$-0x1, %rax
    000000fb: 	cmpb	$-0x80, %cl
    000000fe: 	sbbq	$-0x1, %rax
    00000102: 	addq	$0x1, %rdi
    00000106: 	addq	%rax, %r8
    00000109: 	cmpq	%rdi, %r11
    0000010c: 	jne	.Ltmp461 # Offset: 268
    0000010e: 	andq	$-0x8, %rbx
    00000112: 	andl	$0x7, %edx
    00000115: 	leaq	0x8(%rsi,%rbx), %rsi
    0000011a: 	leaq	-0x1(%rdx), %rdi
    0000011e: 	je	.Ltmp462 # Offset: 286
.Ltmp463:
    00000124: 	movq	%rsi, %r10
    00000127: 	movl	%esi, %ecx
    00000129: 	movl	$0x1, %eax
    0000012e: 	andl	$0x7, %ecx
    00000131: 	shrq	$0x3, %r10
    00000135: 	movl	%eax, %edx
    00000137: 	shll	%cl, %edx
    00000139: 	andb	(%r9,%r10), %dl
    0000013d: 	leaq	0x1(%rsi), %rcx
    00000141: 	cmpb	$0x1, %dl
    00000144: 	sbbq	$-0x1, %r8
    00000148: 	testq	%rdi, %rdi
    0000014b: 	je	.Ltmp462 # Offset: 331
    00000151: 	movq	%rcx, %r10
    00000154: 	movl	%eax, %edx
    00000156: 	andl	$0x7, %ecx
    00000159: 	shrq	$0x3, %r10
    0000015d: 	shll	%cl, %edx
    0000015f: 	leaq	0x2(%rsi), %rcx
    00000163: 	andb	(%r9,%r10), %dl
    00000167: 	cmpb	$0x1, %dl
    0000016a: 	sbbq	$-0x1, %r8
    0000016e: 	cmpq	$0x1, %rdi
    00000172: 	je	.Ltmp462 # Offset: 370
    00000178: 	movq	%rcx, %r10
    0000017b: 	movl	%eax, %edx
    0000017d: 	andl	$0x7, %ecx
    00000180: 	shrq	$0x3, %r10
    00000184: 	shll	%cl, %edx
    00000186: 	leaq	0x3(%rsi), %rcx
    0000018a: 	andb	(%r9,%r10), %dl
    0000018e: 	cmpb	$0x1, %dl
    00000191: 	sbbq	$-0x1, %r8
    00000195: 	cmpq	$0x2, %rdi
    00000199: 	je	.Ltmp462 # Offset: 409
    0000019b: 	movq	%rcx, %r10
    0000019e: 	movl	%eax, %edx
    000001a0: 	andl	$0x7, %ecx
    000001a3: 	shrq	$0x3, %r10
    000001a7: 	shll	%cl, %edx
    000001a9: 	leaq	0x4(%rsi), %rcx
    000001ad: 	andb	(%r9,%r10), %dl
    000001b1: 	cmpb	$0x1, %dl
    000001b4: 	sbbq	$-0x1, %r8
    000001b8: 	cmpq	$0x3, %rdi
    000001bc: 	je	.Ltmp462 # Offset: 444
    000001be: 	movq	%rcx, %r10
    000001c1: 	movl	%eax, %edx
    000001c3: 	andl	$0x7, %ecx
    000001c6: 	shrq	$0x3, %r10
    000001ca: 	shll	%cl, %edx
    000001cc: 	leaq	0x5(%rsi), %rcx
    000001d0: 	andb	(%r9,%r10), %dl
    000001d4: 	cmpb	$0x1, %dl
    000001d7: 	sbbq	$-0x1, %r8
    000001db: 	cmpq	$0x4, %rdi
    000001df: 	je	.Ltmp462 # Offset: 479
    000001e1: 	movq	%rcx, %r10
    000001e4: 	movl	%eax, %edx
    000001e6: 	andl	$0x7, %ecx
    000001e9: 	shrq	$0x3, %r10
    000001ed: 	shll	%cl, %edx
    000001ef: 	leaq	0x6(%rsi), %rcx
    000001f3: 	andb	(%r9,%r10), %dl
    000001f7: 	cmpb	$0x1, %dl
    000001fa: 	sbbq	$-0x1, %r8
    000001fe: 	cmpq	$0x5, %rdi
    00000202: 	je	.Ltmp462 # Offset: 514
    00000204: 	movq	%rcx, %rdx
    00000207: 	andl	$0x7, %ecx
    0000020a: 	shrq	$0x3, %rdx
    0000020e: 	shll	%cl, %eax
    00000210: 	andb	(%r9,%rdx), %al
    00000214: 	cmpb	$0x1, %al
    00000216: 	sbbq	$-0x1, %r8
.Ltmp462:
    0000021a: 	movq	%r8, %rax
    0000021d: 	popq	%rbx
    0000021e: 	retq # Offset: 542
.Ltmp460:
    0000021f: 	leaq	-0x1(%rdx), %rdi
    00000223: 	jmp	.Ltmp463 # Offset: 547
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBitsByteDirectItEmPT_mm"

Binary Function "_Z17CountBitsByteLoopItEmPT_mm" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x9be0
  Size        : 0x798
  MaxSize     : 0x7a0
  Offset      : 0x9be0
  Section     : .text
  Orc Section : .local.text._Z17CountBitsByteLoopItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp464 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rdx, %rdi
    00000012: 	subq	%rsi, %rdi
    00000015: 	je	.Ltmp464 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp465 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp466 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp467:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp465 # Offset: 52
.Ltmp466:
    00000036: 	movq	%rsi, %rdx
    00000039: 	movl	%esi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x4, %rdx
    00000042: 	andl	$0xf, %ecx
    00000045: 	shll	%cl, %eax
    00000047: 	andw	(%r9,%rdx,2), %ax
    0000004c: 	cmpw	$0x1, %ax
    00000050: 	sbbq	$-0x1, %r8
    00000054: 	addq	$0x1, %rsi
    00000058: 	subq	$0x1, %rdi
    0000005c: 	jne	.Ltmp467 # Offset: 92
.Ltmp464:
    0000005e: 	movq	%r8, %rax
    00000061: 	retq # Offset: 97
.Ltmp465:
    00000062: 	movq	%rsi, %r10
    00000065: 	pushq	%rbx
    00000066: 	shrq	$0x3, %r10
    0000006a: 	cmpq	$0x7, %rdi
    0000006e: 	jbe	.Ltmp468 # Offset: 110
    00000074: 	leaq	-0x8(%rdi), %r11
    00000078: 	movq	%r11, %rcx
    0000007b: 	shrq	$0x3, %rcx
    0000007f: 	addq	$0x1, %rcx
    00000083: 	cmpq	$0x77, %r11
    00000087: 	jbe	.Ltmp469 # Offset: 135
    0000008d: 	leaq	(%r9,%r10), %rax
    00000091: 	pxor	%xmm9, %xmm9
    00000096: 	pxor	%xmm3, %xmm3
    0000009a: 	movq	%rcx, %rdx
    0000009d: 	shrq	$0x4, %rdx
    000000a1: 	pxor	%xmm1, %xmm1
    000000a5: 	movdqa	DATAat0x165d0(%rip), %xmm8
    000000ae: 	movdqa	DATAat0x165e0(%rip), %xmm11
    000000b7: 	shlq	$0x4, %rdx
    000000bb: 	pxor	%xmm0, %xmm0
    000000bf: 	movdqa	DATAat0x165f0(%rip), %xmm10
    000000c8: 	addq	%rax, %rdx
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp470:
    000000d0: 	movdqu	(%rax), %xmm4
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm4, %xmm6
    000000dc: 	pand	%xmm8, %xmm6
    000000e1: 	pcmpeqb	%xmm3, %xmm6
    000000e5: 	pandn	%xmm8, %xmm6
    000000ea: 	movdqa	%xmm6, %xmm2
    000000ee: 	punpckhbw	%xmm3, %xmm6
    000000f2: 	punpcklbw	%xmm3, %xmm2
    000000f6: 	movdqa	%xmm6, %xmm5
    000000fa: 	punpckhwd	%xmm1, %xmm6
    000000fe: 	movdqa	%xmm2, %xmm7
    00000102: 	punpckhwd	%xmm1, %xmm2
    00000106: 	punpcklwd	%xmm1, %xmm5
    0000010a: 	punpcklwd	%xmm1, %xmm7
    0000010e: 	movdqa	%xmm7, %xmm13
    00000113: 	movdqa	%xmm7, %xmm12
    00000118: 	movdqa	%xmm2, %xmm7
    0000011c: 	punpckldq	%xmm0, %xmm13
    00000121: 	punpckldq	%xmm0, %xmm7
    00000125: 	punpckhdq	%xmm0, %xmm12
    0000012a: 	punpckhdq	%xmm0, %xmm2
    0000012e: 	paddq	%xmm13, %xmm12
    00000133: 	paddq	%xmm7, %xmm2
    00000137: 	paddq	%xmm2, %xmm12
    0000013c: 	movdqa	%xmm5, %xmm2
    00000140: 	punpckhdq	%xmm0, %xmm5
    00000144: 	punpckldq	%xmm0, %xmm2
    00000148: 	paddq	%xmm2, %xmm5
    0000014c: 	movdqa	%xmm6, %xmm2
    00000150: 	punpckhdq	%xmm0, %xmm6
    00000154: 	punpckldq	%xmm0, %xmm2
    00000158: 	paddq	%xmm2, %xmm5
    0000015c: 	movdqa	%xmm4, %xmm2
    00000160: 	pand	%xmm11, %xmm2
    00000165: 	paddq	%xmm5, %xmm12
    0000016a: 	pcmpeqb	%xmm3, %xmm2
    0000016e: 	pandn	%xmm8, %xmm2
    00000173: 	movdqa	%xmm2, %xmm5
    00000177: 	punpckhbw	%xmm3, %xmm2
    0000017b: 	punpcklbw	%xmm3, %xmm5
    0000017f: 	movdqa	%xmm2, %xmm13
    00000184: 	punpckhwd	%xmm1, %xmm2
    00000188: 	movdqa	%xmm5, %xmm14
    0000018d: 	punpckhwd	%xmm1, %xmm5
    00000191: 	punpcklwd	%xmm1, %xmm13
    00000196: 	punpcklwd	%xmm1, %xmm14
    0000019b: 	movdqa	%xmm14, %xmm7
    000001a0: 	punpckhdq	%xmm0, %xmm14
    000001a5: 	punpckldq	%xmm0, %xmm7
    000001a9: 	paddq	%xmm6, %xmm7
    000001ad: 	movdqa	%xmm5, %xmm6
    000001b1: 	punpckhdq	%xmm0, %xmm5
    000001b5: 	punpckldq	%xmm0, %xmm6
    000001b9: 	paddq	%xmm14, %xmm7
    000001be: 	paddq	%xmm6, %xmm5
    000001c2: 	movdqa	%xmm13, %xmm6
    000001c7: 	paddq	%xmm12, %xmm7
    000001cc: 	punpckldq	%xmm0, %xmm6
    000001d0: 	punpckhdq	%xmm0, %xmm13
    000001d5: 	paddq	%xmm6, %xmm5
    000001d9: 	paddq	%xmm5, %xmm7
    000001dd: 	movdqa	%xmm2, %xmm5
    000001e1: 	punpckhdq	%xmm0, %xmm2
    000001e5: 	punpckldq	%xmm0, %xmm5
    000001e9: 	paddq	%xmm5, %xmm13
    000001ee: 	paddq	%xmm13, %xmm2
    000001f3: 	paddq	%xmm2, %xmm7
    000001f7: 	movdqa	%xmm4, %xmm2
    000001fb: 	pand	%xmm10, %xmm2
    00000200: 	pcmpeqb	%xmm3, %xmm2
    00000204: 	pandn	%xmm8, %xmm2
    00000209: 	movdqa	%xmm2, %xmm12
    0000020e: 	punpckhbw	%xmm3, %xmm2
    00000212: 	punpcklbw	%xmm3, %xmm12
    00000217: 	movdqa	%xmm2, %xmm13
    0000021c: 	punpckhwd	%xmm1, %xmm2
    00000220: 	movdqa	%xmm12, %xmm5
    00000225: 	punpckhwd	%xmm1, %xmm12
    0000022a: 	punpcklwd	%xmm1, %xmm13
    0000022f: 	punpcklwd	%xmm1, %xmm5
    00000233: 	movdqa	%xmm5, %xmm14
    00000238: 	movdqa	%xmm5, %xmm6
    0000023c: 	movdqa	%xmm12, %xmm5
    00000241: 	punpckldq	%xmm0, %xmm14
    00000246: 	punpckhdq	%xmm0, %xmm6
    0000024a: 	punpckldq	%xmm0, %xmm5
    0000024e: 	paddq	%xmm14, %xmm6
    00000253: 	punpckhdq	%xmm0, %xmm12
    00000258: 	paddq	%xmm5, %xmm6
    0000025c: 	movdqa	%xmm13, %xmm5
    00000261: 	punpckhdq	%xmm0, %xmm13
    00000266: 	punpckldq	%xmm0, %xmm5
    0000026a: 	paddq	%xmm7, %xmm6
    0000026e: 	paddq	%xmm5, %xmm12
    00000273: 	movdqa	%xmm2, %xmm5
    00000277: 	paddq	%xmm12, %xmm13
    0000027c: 	movdqa	%xmm2, %xmm12
    00000281: 	punpckldq	%xmm0, %xmm5
    00000285: 	punpckhdq	%xmm0, %xmm12
    0000028a: 	paddq	%xmm13, %xmm6
    0000028f: 	paddq	%xmm5, %xmm12
    00000294: 	movdqa	DATAat0x16600(%rip), %xmm5
    0000029c: 	pand	%xmm4, %xmm5
    000002a0: 	pcmpeqb	%xmm3, %xmm5
    000002a4: 	pandn	%xmm8, %xmm5
    000002a9: 	movdqa	%xmm5, %xmm14
    000002ae: 	punpckhbw	%xmm3, %xmm5
    000002b2: 	punpcklbw	%xmm3, %xmm14
    000002b7: 	movdqa	%xmm5, %xmm2
    000002bb: 	punpckhwd	%xmm1, %xmm5
    000002bf: 	movdqa	%xmm14, %xmm13
    000002c4: 	punpckhwd	%xmm1, %xmm14
    000002c9: 	punpcklwd	%xmm1, %xmm2
    000002cd: 	punpcklwd	%xmm1, %xmm13
    000002d2: 	movdqa	%xmm14, %xmm7
    000002d7: 	punpckhdq	%xmm0, %xmm14
    000002dc: 	movdqa	%xmm13, %xmm15
    000002e1: 	punpckldq	%xmm0, %xmm7
    000002e5: 	punpckldq	%xmm0, %xmm13
    000002ea: 	punpckhdq	%xmm0, %xmm15
    000002ef: 	paddq	%xmm13, %xmm12
    000002f4: 	paddq	%xmm15, %xmm7
    000002f9: 	paddq	%xmm12, %xmm6
    000002fe: 	paddq	%xmm14, %xmm7
    00000303: 	paddq	%xmm6, %xmm7
    00000307: 	movdqa	%xmm2, %xmm6
    0000030b: 	punpckhdq	%xmm0, %xmm2
    0000030f: 	punpckldq	%xmm0, %xmm6
    00000313: 	paddq	%xmm6, %xmm2
    00000317: 	movdqa	%xmm5, %xmm6
    0000031b: 	punpckhdq	%xmm0, %xmm5
    0000031f: 	punpckldq	%xmm0, %xmm6
    00000323: 	paddq	%xmm6, %xmm2
    00000327: 	paddq	%xmm2, %xmm7
    0000032b: 	movdqa	DATAat0x16610(%rip), %xmm2
    00000333: 	pand	%xmm4, %xmm2
    00000337: 	pcmpeqb	%xmm3, %xmm2
    0000033b: 	pandn	%xmm8, %xmm2
    00000340: 	movdqa	%xmm2, %xmm13
    00000345: 	punpckhbw	%xmm3, %xmm2
    00000349: 	punpcklbw	%xmm3, %xmm13
    0000034e: 	movdqa	%xmm2, %xmm12
    00000353: 	punpckhwd	%xmm1, %xmm2
    00000357: 	movdqa	%xmm13, %xmm14
    0000035c: 	punpckhwd	%xmm1, %xmm13
    00000361: 	punpcklwd	%xmm1, %xmm12
    00000366: 	punpcklwd	%xmm1, %xmm14
    0000036b: 	movdqa	%xmm14, %xmm6
    00000370: 	punpckhdq	%xmm0, %xmm14
    00000375: 	punpckldq	%xmm0, %xmm6
    00000379: 	paddq	%xmm5, %xmm6
    0000037d: 	movdqa	%xmm13, %xmm5
    00000382: 	paddq	%xmm14, %xmm6
    00000387: 	punpckhdq	%xmm0, %xmm5
    0000038b: 	paddq	%xmm7, %xmm6
    0000038f: 	movdqa	%xmm13, %xmm7
    00000394: 	punpckldq	%xmm0, %xmm7
    00000398: 	paddq	%xmm7, %xmm5
    0000039c: 	movdqa	%xmm12, %xmm7
    000003a1: 	punpckhdq	%xmm0, %xmm12
    000003a6: 	punpckldq	%xmm0, %xmm7
    000003aa: 	paddq	%xmm7, %xmm5
    000003ae: 	paddq	%xmm5, %xmm6
    000003b2: 	movdqa	%xmm2, %xmm5
    000003b6: 	punpckhdq	%xmm0, %xmm2
    000003ba: 	punpckldq	%xmm0, %xmm5
    000003be: 	paddq	%xmm5, %xmm12
    000003c3: 	paddq	%xmm12, %xmm2
    000003c8: 	paddq	%xmm2, %xmm6
    000003cc: 	movdqa	DATAat0x16620(%rip), %xmm2
    000003d4: 	pand	%xmm4, %xmm2
    000003d8: 	pcmpeqb	%xmm3, %xmm2
    000003dc: 	pandn	%xmm8, %xmm2
    000003e1: 	movdqa	%xmm2, %xmm12
    000003e6: 	punpckhbw	%xmm3, %xmm2
    000003ea: 	punpcklbw	%xmm3, %xmm12
    000003ef: 	movdqa	%xmm2, %xmm13
    000003f4: 	punpckhwd	%xmm1, %xmm2
    000003f8: 	movdqa	%xmm12, %xmm5
    000003fd: 	punpckhwd	%xmm1, %xmm12
    00000402: 	punpcklwd	%xmm1, %xmm13
    00000407: 	punpcklwd	%xmm1, %xmm5
    0000040b: 	movdqa	%xmm5, %xmm14
    00000410: 	movdqa	%xmm5, %xmm7
    00000414: 	movdqa	%xmm12, %xmm5
    00000419: 	punpckldq	%xmm0, %xmm14
    0000041e: 	punpckhdq	%xmm0, %xmm7
    00000422: 	punpckldq	%xmm0, %xmm5
    00000426: 	paddq	%xmm14, %xmm7
    0000042b: 	punpckhdq	%xmm0, %xmm12
    00000430: 	paddq	%xmm5, %xmm7
    00000434: 	movdqa	%xmm13, %xmm5
    00000439: 	punpckhdq	%xmm0, %xmm13
    0000043e: 	punpckldq	%xmm0, %xmm5
    00000442: 	paddq	%xmm6, %xmm7
    00000446: 	paddq	%xmm5, %xmm12
    0000044b: 	movdqa	%xmm2, %xmm5
    0000044f: 	paddq	%xmm12, %xmm13
    00000454: 	movdqa	%xmm2, %xmm12
    00000459: 	punpckldq	%xmm0, %xmm5
    0000045d: 	movdqa	DATAat0x16630(%rip), %xmm2
    00000465: 	paddq	%xmm13, %xmm7
    0000046a: 	punpckhdq	%xmm0, %xmm12
    0000046f: 	pand	%xmm4, %xmm2
    00000473: 	paddq	%xmm5, %xmm12
    00000478: 	pand	DATAat0x16640(%rip), %xmm4
    00000480: 	pcmpeqb	%xmm3, %xmm2
    00000484: 	pcmpeqb	%xmm3, %xmm4
    00000488: 	pandn	%xmm8, %xmm2
    0000048d: 	movdqa	%xmm2, %xmm13
    00000492: 	punpckhbw	%xmm3, %xmm2
    00000496: 	pandn	%xmm8, %xmm4
    0000049b: 	punpcklbw	%xmm3, %xmm13
    000004a0: 	movdqa	%xmm2, %xmm6
    000004a4: 	punpckhwd	%xmm1, %xmm2
    000004a8: 	movdqa	%xmm13, %xmm14
    000004ad: 	punpckhwd	%xmm1, %xmm13
    000004b2: 	punpcklwd	%xmm1, %xmm6
    000004b6: 	punpcklwd	%xmm1, %xmm14
    000004bb: 	movdqa	%xmm13, %xmm5
    000004c0: 	punpckhdq	%xmm0, %xmm13
    000004c5: 	movdqa	%xmm14, %xmm15
    000004ca: 	punpckldq	%xmm0, %xmm5
    000004ce: 	punpckldq	%xmm0, %xmm14
    000004d3: 	punpckhdq	%xmm0, %xmm15
    000004d8: 	paddq	%xmm14, %xmm12
    000004dd: 	paddq	%xmm15, %xmm5
    000004e2: 	paddq	%xmm12, %xmm7
    000004e7: 	paddq	%xmm13, %xmm5
    000004ec: 	paddq	%xmm7, %xmm5
    000004f0: 	movdqa	%xmm6, %xmm7
    000004f4: 	punpckhdq	%xmm0, %xmm6
    000004f8: 	punpckldq	%xmm0, %xmm7
    000004fc: 	paddq	%xmm7, %xmm6
    00000500: 	movdqa	%xmm2, %xmm7
    00000504: 	punpckhdq	%xmm0, %xmm2
    00000508: 	punpckldq	%xmm0, %xmm7
    0000050c: 	paddq	%xmm7, %xmm6
    00000510: 	movdqa	%xmm4, %xmm7
    00000514: 	punpckhbw	%xmm3, %xmm4
    00000518: 	punpcklbw	%xmm3, %xmm7
    0000051c: 	paddq	%xmm6, %xmm5
    00000520: 	movdqa	%xmm4, %xmm6
    00000524: 	movdqa	%xmm7, %xmm12
    00000529: 	punpckhwd	%xmm1, %xmm7
    0000052d: 	punpcklwd	%xmm1, %xmm6
    00000531: 	punpcklwd	%xmm1, %xmm12
    00000536: 	punpckhwd	%xmm1, %xmm4
    0000053a: 	movdqa	%xmm12, %xmm13
    0000053f: 	punpckhdq	%xmm0, %xmm12
    00000544: 	punpckldq	%xmm0, %xmm13
    00000549: 	paddq	%xmm13, %xmm2
    0000054e: 	paddq	%xmm12, %xmm2
    00000553: 	paddq	%xmm5, %xmm2
    00000557: 	movdqa	%xmm7, %xmm5
    0000055b: 	punpckhdq	%xmm0, %xmm7
    0000055f: 	punpckldq	%xmm0, %xmm5
    00000563: 	paddq	%xmm5, %xmm7
    00000567: 	movdqa	%xmm6, %xmm5
    0000056b: 	punpckhdq	%xmm0, %xmm6
    0000056f: 	punpckldq	%xmm0, %xmm5
    00000573: 	paddq	%xmm5, %xmm7
    00000577: 	movdqa	%xmm4, %xmm5
    0000057b: 	punpckhdq	%xmm0, %xmm4
    0000057f: 	punpckldq	%xmm0, %xmm5
    00000583: 	paddq	%xmm7, %xmm2
    00000587: 	paddq	%xmm5, %xmm6
    0000058b: 	paddq	%xmm6, %xmm4
    0000058f: 	paddq	%xmm2, %xmm4
    00000593: 	paddq	%xmm4, %xmm9
    00000598: 	cmpq	%rdx, %rax
    0000059b: 	jne	.Ltmp470 # Offset: 1435
    000005a1: 	movdqa	%xmm9, %xmm0
    000005a6: 	movq	%rcx, %rdx
    000005a9: 	psrldq	$0x8, %xmm0
    000005ae: 	andq	$-0x10, %rdx
    000005b2: 	paddq	%xmm0, %xmm9
    000005b7: 	addq	%rdx, %r10
    000005ba: 	movq	%xmm9, %rax
    000005bf: 	addq	%rax, %r8
    000005c2: 	movq	%rdx, %rax
    000005c5: 	negq	%rax
    000005c8: 	leaq	(%rdi,%rax,8), %rax
    000005cc: 	cmpq	%rdx, %rcx
    000005cf: 	je	.Ltmp471 # Offset: 1487
.Ltmp474:
    000005d5: 	subq	$0x8, %rax
    000005d9: 	leaq	0x1(%r9,%r10), %rdx
    000005de: 	leaq	(%r9,%r10), %rcx
    000005e2: 	shrq	$0x3, %rax
    000005e6: 	leaq	(%rax,%rdx), %rbx
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp472:
    000005f0: 	movzbl	(%rcx), %edx
    000005f3: 	movl	%edx, %r10d
    000005f6: 	movq	%rdx, %rax
    000005f9: 	andl	$0x2, %r10d
    000005fd: 	andl	$0x1, %eax
    00000600: 	cmpb	$0x1, %r10b
    00000604: 	movl	%edx, %r10d
    00000607: 	sbbq	$-0x1, %rax
    0000060b: 	andl	$0x4, %r10d
    0000060f: 	cmpb	$0x1, %r10b
    00000613: 	movl	%edx, %r10d
    00000616: 	sbbq	$-0x1, %rax
    0000061a: 	andl	$0x8, %r10d
    0000061e: 	cmpb	$0x1, %r10b
    00000622: 	movl	%edx, %r10d
    00000625: 	sbbq	$-0x1, %rax
    00000629: 	andl	$0x10, %r10d
    0000062d: 	cmpb	$0x1, %r10b
    00000631: 	movl	%edx, %r10d
    00000634: 	sbbq	$-0x1, %rax
    00000638: 	andl	$0x20, %r10d
    0000063c: 	cmpb	$0x1, %r10b
    00000640: 	movl	%edx, %r10d
    00000643: 	sbbq	$-0x1, %rax
    00000647: 	andl	$0x40, %r10d
    0000064b: 	cmpb	$0x1, %r10b
    0000064f: 	sbbq	$-0x1, %rax
    00000653: 	cmpb	$-0x80, %dl
    00000656: 	sbbq	$-0x1, %rax
    0000065a: 	addq	$0x1, %rcx
    0000065e: 	addq	%rax, %r8
    00000661: 	cmpq	%rcx, %rbx
    00000664: 	jne	.Ltmp472 # Offset: 1636
.Ltmp471:
    00000666: 	andq	$-0x8, %r11
    0000066a: 	andl	$0x7, %edi
    0000066d: 	leaq	0x8(%rsi,%r11), %rsi
    00000672: 	leaq	-0x1(%rdi), %rdx
    00000676: 	je	.Ltmp473 # Offset: 1654
.Ltmp475:
    0000067c: 	movl	%esi, %ecx
    0000067e: 	movl	$0x1, %eax
    00000683: 	movq	%rsi, %rdi
    00000686: 	andl	$0x7, %ecx
    00000689: 	movl	%eax, %ebx
    0000068b: 	shrq	$0x3, %rdi
    0000068f: 	shll	%cl, %ebx
    00000691: 	movl	%ebx, %ecx
    00000693: 	andb	(%r9,%rdi), %cl
    00000697: 	cmpb	$0x1, %cl
    0000069a: 	leaq	0x1(%rsi), %rcx
    0000069e: 	sbbq	$-0x1, %r8
    000006a2: 	testq	%rdx, %rdx
    000006a5: 	je	.Ltmp473 # Offset: 1701
    000006ab: 	movq	%rcx, %rdi
    000006ae: 	movl	%eax, %ebx
    000006b0: 	andl	$0x7, %ecx
    000006b3: 	shrq	$0x3, %rdi
    000006b7: 	shll	%cl, %ebx
    000006b9: 	movl	%ebx, %ecx
    000006bb: 	andb	(%r9,%rdi), %cl
    000006bf: 	cmpb	$0x1, %cl
    000006c2: 	leaq	0x2(%rsi), %rcx
    000006c6: 	sbbq	$-0x1, %r8
    000006ca: 	cmpq	$0x1, %rdx
    000006ce: 	je	.Ltmp473 # Offset: 1742
    000006d4: 	movq	%rcx, %rdi
    000006d7: 	movl	%eax, %ebx
    000006d9: 	andl	$0x7, %ecx
    000006dc: 	shrq	$0x3, %rdi
    000006e0: 	shll	%cl, %ebx
    000006e2: 	movl	%ebx, %ecx
    000006e4: 	andb	(%r9,%rdi), %cl
    000006e8: 	cmpb	$0x1, %cl
    000006eb: 	leaq	0x3(%rsi), %rcx
    000006ef: 	sbbq	$-0x1, %r8
    000006f3: 	cmpq	$0x2, %rdx
    000006f7: 	je	.Ltmp473 # Offset: 1783
    000006fd: 	movq	%rcx, %rdi
    00000700: 	movl	%eax, %ebx
    00000702: 	andl	$0x7, %ecx
    00000705: 	shrq	$0x3, %rdi
    00000709: 	shll	%cl, %ebx
    0000070b: 	movl	%ebx, %ecx
    0000070d: 	andb	(%r9,%rdi), %cl
    00000711: 	cmpb	$0x1, %cl
    00000714: 	leaq	0x4(%rsi), %rcx
    00000718: 	sbbq	$-0x1, %r8
    0000071c: 	cmpq	$0x3, %rdx
    00000720: 	je	.Ltmp473 # Offset: 1824
    00000722: 	movq	%rcx, %rdi
    00000725: 	movl	%eax, %ebx
    00000727: 	andl	$0x7, %ecx
    0000072a: 	shrq	$0x3, %rdi
    0000072e: 	shll	%cl, %ebx
    00000730: 	movl	%ebx, %ecx
    00000732: 	andb	(%r9,%rdi), %cl
    00000736: 	cmpb	$0x1, %cl
    00000739: 	leaq	0x5(%rsi), %rcx
    0000073d: 	sbbq	$-0x1, %r8
    00000741: 	cmpq	$0x4, %rdx
    00000745: 	je	.Ltmp473 # Offset: 1861
    00000747: 	movq	%rcx, %rdi
    0000074a: 	movl	%eax, %ebx
    0000074c: 	andl	$0x7, %ecx
    0000074f: 	shrq	$0x3, %rdi
    00000753: 	shll	%cl, %ebx
    00000755: 	movl	%ebx, %ecx
    00000757: 	andb	(%r9,%rdi), %cl
    0000075b: 	cmpb	$0x1, %cl
    0000075e: 	leaq	0x6(%rsi), %rcx
    00000762: 	sbbq	$-0x1, %r8
    00000766: 	cmpq	$0x5, %rdx
    0000076a: 	je	.Ltmp473 # Offset: 1898
    0000076c: 	movq	%rcx, %rdx
    0000076f: 	andl	$0x7, %ecx
    00000772: 	shrq	$0x3, %rdx
    00000776: 	shll	%cl, %eax
    00000778: 	andb	(%r9,%rdx), %al
    0000077c: 	cmpb	$0x1, %al
    0000077e: 	sbbq	$-0x1, %r8
.Ltmp473:
    00000782: 	movq	%r8, %rax
    00000785: 	popq	%rbx
    00000786: 	retq # Offset: 1926
.Ltmp469:
    00000787: 	movq	%rdi, %rax
    0000078a: 	jmp	.Ltmp474 # Offset: 1930
.Ltmp468:
    0000078f: 	leaq	-0x1(%rdi), %rdx
    00000793: 	jmp	.Ltmp475 # Offset: 1939
DWARF CFI Instructions:
    <empty>
End of Function "_Z17CountBitsByteLoopItEmPT_mm"

Binary Function "_Z18CountBitsByteLoop2ItEmPT_mm" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0xa380
  Size        : 0x79d
  MaxSize     : 0x7a0
  Offset      : 0xa380
  Section     : .text
  Orc Section : .local.text._Z18CountBitsByteLoop2ItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp476 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rdx, %rdi
    00000012: 	subq	%rsi, %rdi
    00000015: 	je	.Ltmp476 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp477 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp478 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp479:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp477 # Offset: 52
.Ltmp478:
    00000036: 	movq	%rsi, %rdx
    00000039: 	movl	%esi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x4, %rdx
    00000042: 	andl	$0xf, %ecx
    00000045: 	shll	%cl, %eax
    00000047: 	andw	(%r9,%rdx,2), %ax
    0000004c: 	cmpw	$0x1, %ax
    00000050: 	sbbq	$-0x1, %r8
    00000054: 	addq	$0x1, %rsi
    00000058: 	subq	$0x1, %rdi
    0000005c: 	jne	.Ltmp479 # Offset: 92
.Ltmp476:
    0000005e: 	movq	%r8, %rax
    00000061: 	retq # Offset: 97
.Ltmp477:
    00000062: 	movq	%rsi, %r10
    00000065: 	pushq	%rbx
    00000066: 	shrq	$0x3, %r10
    0000006a: 	cmpq	$0x7, %rdi
    0000006e: 	jbe	.Ltmp480 # Offset: 110
    00000074: 	leaq	-0x8(%rdi), %r11
    00000078: 	movq	%r11, %rcx
    0000007b: 	shrq	$0x3, %rcx
    0000007f: 	addq	$0x1, %rcx
    00000083: 	cmpq	$0x77, %r11
    00000087: 	jbe	.Ltmp481 # Offset: 135
    0000008d: 	leaq	(%r9,%r10), %rax
    00000091: 	pxor	%xmm9, %xmm9
    00000096: 	pxor	%xmm3, %xmm3
    0000009a: 	movq	%rcx, %rdx
    0000009d: 	shrq	$0x4, %rdx
    000000a1: 	pxor	%xmm1, %xmm1
    000000a5: 	movdqa	DATAat0x16640(%rip), %xmm11
    000000ae: 	movdqa	DATAat0x165d0(%rip), %xmm8
    000000b7: 	shlq	$0x4, %rdx
    000000bb: 	pxor	%xmm0, %xmm0
    000000bf: 	movdqa	DATAat0x16630(%rip), %xmm10
    000000c8: 	addq	%rax, %rdx
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp482:
    000000d0: 	movdqu	(%rax), %xmm4
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm4, %xmm6
    000000dc: 	pand	%xmm11, %xmm6
    000000e1: 	pcmpeqb	%xmm3, %xmm6
    000000e5: 	pandn	%xmm8, %xmm6
    000000ea: 	movdqa	%xmm6, %xmm2
    000000ee: 	punpckhbw	%xmm3, %xmm6
    000000f2: 	punpcklbw	%xmm3, %xmm2
    000000f6: 	movdqa	%xmm6, %xmm5
    000000fa: 	punpckhwd	%xmm1, %xmm6
    000000fe: 	movdqa	%xmm2, %xmm7
    00000102: 	punpckhwd	%xmm1, %xmm2
    00000106: 	punpcklwd	%xmm1, %xmm5
    0000010a: 	punpcklwd	%xmm1, %xmm7
    0000010e: 	movdqa	%xmm7, %xmm13
    00000113: 	movdqa	%xmm7, %xmm12
    00000118: 	movdqa	%xmm2, %xmm7
    0000011c: 	punpckldq	%xmm0, %xmm13
    00000121: 	punpckldq	%xmm0, %xmm7
    00000125: 	punpckhdq	%xmm0, %xmm12
    0000012a: 	punpckhdq	%xmm0, %xmm2
    0000012e: 	paddq	%xmm13, %xmm12
    00000133: 	paddq	%xmm7, %xmm2
    00000137: 	paddq	%xmm2, %xmm12
    0000013c: 	movdqa	%xmm5, %xmm2
    00000140: 	punpckhdq	%xmm0, %xmm5
    00000144: 	punpckldq	%xmm0, %xmm2
    00000148: 	paddq	%xmm2, %xmm5
    0000014c: 	movdqa	%xmm6, %xmm2
    00000150: 	punpckhdq	%xmm0, %xmm6
    00000154: 	punpckldq	%xmm0, %xmm2
    00000158: 	paddq	%xmm2, %xmm5
    0000015c: 	movdqa	%xmm4, %xmm2
    00000160: 	pand	%xmm10, %xmm2
    00000165: 	paddq	%xmm5, %xmm12
    0000016a: 	pcmpeqb	%xmm3, %xmm2
    0000016e: 	pandn	%xmm8, %xmm2
    00000173: 	movdqa	%xmm2, %xmm5
    00000177: 	punpckhbw	%xmm3, %xmm2
    0000017b: 	punpcklbw	%xmm3, %xmm5
    0000017f: 	movdqa	%xmm2, %xmm13
    00000184: 	punpckhwd	%xmm1, %xmm2
    00000188: 	movdqa	%xmm5, %xmm14
    0000018d: 	punpckhwd	%xmm1, %xmm5
    00000191: 	punpcklwd	%xmm1, %xmm13
    00000196: 	punpcklwd	%xmm1, %xmm14
    0000019b: 	movdqa	%xmm14, %xmm7
    000001a0: 	punpckhdq	%xmm0, %xmm14
    000001a5: 	punpckldq	%xmm0, %xmm7
    000001a9: 	paddq	%xmm6, %xmm7
    000001ad: 	movdqa	%xmm5, %xmm6
    000001b1: 	punpckhdq	%xmm0, %xmm5
    000001b5: 	punpckldq	%xmm0, %xmm6
    000001b9: 	paddq	%xmm14, %xmm7
    000001be: 	paddq	%xmm6, %xmm5
    000001c2: 	movdqa	%xmm13, %xmm6
    000001c7: 	paddq	%xmm12, %xmm7
    000001cc: 	punpckldq	%xmm0, %xmm6
    000001d0: 	punpckhdq	%xmm0, %xmm13
    000001d5: 	paddq	%xmm6, %xmm5
    000001d9: 	paddq	%xmm5, %xmm7
    000001dd: 	movdqa	%xmm2, %xmm5
    000001e1: 	punpckhdq	%xmm0, %xmm2
    000001e5: 	punpckldq	%xmm0, %xmm5
    000001e9: 	paddq	%xmm5, %xmm13
    000001ee: 	paddq	%xmm13, %xmm2
    000001f3: 	paddq	%xmm2, %xmm7
    000001f7: 	movdqa	DATAat0x16620(%rip), %xmm2
    000001ff: 	pand	%xmm4, %xmm2
    00000203: 	pcmpeqb	%xmm3, %xmm2
    00000207: 	pandn	%xmm8, %xmm2
    0000020c: 	movdqa	%xmm2, %xmm12
    00000211: 	punpckhbw	%xmm3, %xmm2
    00000215: 	punpcklbw	%xmm3, %xmm12
    0000021a: 	movdqa	%xmm2, %xmm13
    0000021f: 	punpckhwd	%xmm1, %xmm2
    00000223: 	movdqa	%xmm12, %xmm5
    00000228: 	punpckhwd	%xmm1, %xmm12
    0000022d: 	punpcklwd	%xmm1, %xmm13
    00000232: 	punpcklwd	%xmm1, %xmm5
    00000236: 	movdqa	%xmm5, %xmm14
    0000023b: 	movdqa	%xmm5, %xmm6
    0000023f: 	movdqa	%xmm12, %xmm5
    00000244: 	punpckldq	%xmm0, %xmm14
    00000249: 	punpckhdq	%xmm0, %xmm6
    0000024d: 	punpckldq	%xmm0, %xmm5
    00000251: 	paddq	%xmm14, %xmm6
    00000256: 	punpckhdq	%xmm0, %xmm12
    0000025b: 	paddq	%xmm5, %xmm6
    0000025f: 	movdqa	%xmm13, %xmm5
    00000264: 	punpckhdq	%xmm0, %xmm13
    00000269: 	punpckldq	%xmm0, %xmm5
    0000026d: 	paddq	%xmm7, %xmm6
    00000271: 	paddq	%xmm5, %xmm12
    00000276: 	movdqa	%xmm2, %xmm5
    0000027a: 	paddq	%xmm12, %xmm13
    0000027f: 	movdqa	%xmm2, %xmm12
    00000284: 	punpckldq	%xmm0, %xmm5
    00000288: 	punpckhdq	%xmm0, %xmm12
    0000028d: 	paddq	%xmm13, %xmm6
    00000292: 	paddq	%xmm5, %xmm12
    00000297: 	movdqa	DATAat0x16610(%rip), %xmm5
    0000029f: 	pand	%xmm4, %xmm5
    000002a3: 	pcmpeqb	%xmm3, %xmm5
    000002a7: 	pandn	%xmm8, %xmm5
    000002ac: 	movdqa	%xmm5, %xmm14
    000002b1: 	punpckhbw	%xmm3, %xmm5
    000002b5: 	punpcklbw	%xmm3, %xmm14
    000002ba: 	movdqa	%xmm5, %xmm2
    000002be: 	punpckhwd	%xmm1, %xmm5
    000002c2: 	movdqa	%xmm14, %xmm13
    000002c7: 	punpckhwd	%xmm1, %xmm14
    000002cc: 	punpcklwd	%xmm1, %xmm2
    000002d0: 	punpcklwd	%xmm1, %xmm13
    000002d5: 	movdqa	%xmm14, %xmm7
    000002da: 	punpckhdq	%xmm0, %xmm14
    000002df: 	movdqa	%xmm13, %xmm15
    000002e4: 	punpckldq	%xmm0, %xmm7
    000002e8: 	punpckldq	%xmm0, %xmm13
    000002ed: 	punpckhdq	%xmm0, %xmm15
    000002f2: 	paddq	%xmm13, %xmm12
    000002f7: 	paddq	%xmm15, %xmm7
    000002fc: 	paddq	%xmm12, %xmm6
    00000301: 	paddq	%xmm14, %xmm7
    00000306: 	paddq	%xmm6, %xmm7
    0000030a: 	movdqa	%xmm2, %xmm6
    0000030e: 	punpckhdq	%xmm0, %xmm2
    00000312: 	punpckldq	%xmm0, %xmm6
    00000316: 	paddq	%xmm6, %xmm2
    0000031a: 	movdqa	%xmm5, %xmm6
    0000031e: 	punpckhdq	%xmm0, %xmm5
    00000322: 	punpckldq	%xmm0, %xmm6
    00000326: 	paddq	%xmm6, %xmm2
    0000032a: 	paddq	%xmm2, %xmm7
    0000032e: 	movdqa	DATAat0x16600(%rip), %xmm2
    00000336: 	pand	%xmm4, %xmm2
    0000033a: 	pcmpeqb	%xmm3, %xmm2
    0000033e: 	pandn	%xmm8, %xmm2
    00000343: 	movdqa	%xmm2, %xmm13
    00000348: 	punpckhbw	%xmm3, %xmm2
    0000034c: 	punpcklbw	%xmm3, %xmm13
    00000351: 	movdqa	%xmm2, %xmm12
    00000356: 	punpckhwd	%xmm1, %xmm2
    0000035a: 	movdqa	%xmm13, %xmm14
    0000035f: 	punpckhwd	%xmm1, %xmm13
    00000364: 	punpcklwd	%xmm1, %xmm12
    00000369: 	punpcklwd	%xmm1, %xmm14
    0000036e: 	movdqa	%xmm14, %xmm6
    00000373: 	punpckhdq	%xmm0, %xmm14
    00000378: 	punpckldq	%xmm0, %xmm6
    0000037c: 	paddq	%xmm5, %xmm6
    00000380: 	movdqa	%xmm13, %xmm5
    00000385: 	paddq	%xmm14, %xmm6
    0000038a: 	punpckhdq	%xmm0, %xmm5
    0000038e: 	paddq	%xmm7, %xmm6
    00000392: 	movdqa	%xmm13, %xmm7
    00000397: 	punpckldq	%xmm0, %xmm7
    0000039b: 	paddq	%xmm7, %xmm5
    0000039f: 	movdqa	%xmm12, %xmm7
    000003a4: 	punpckhdq	%xmm0, %xmm12
    000003a9: 	punpckldq	%xmm0, %xmm7
    000003ad: 	paddq	%xmm7, %xmm5
    000003b1: 	paddq	%xmm5, %xmm6
    000003b5: 	movdqa	%xmm2, %xmm5
    000003b9: 	punpckhdq	%xmm0, %xmm2
    000003bd: 	punpckldq	%xmm0, %xmm5
    000003c1: 	paddq	%xmm5, %xmm12
    000003c6: 	paddq	%xmm12, %xmm2
    000003cb: 	paddq	%xmm2, %xmm6
    000003cf: 	movdqa	DATAat0x165f0(%rip), %xmm2
    000003d7: 	pand	%xmm4, %xmm2
    000003db: 	pcmpeqb	%xmm3, %xmm2
    000003df: 	pandn	%xmm8, %xmm2
    000003e4: 	movdqa	%xmm2, %xmm12
    000003e9: 	punpckhbw	%xmm3, %xmm2
    000003ed: 	punpcklbw	%xmm3, %xmm12
    000003f2: 	movdqa	%xmm2, %xmm13
    000003f7: 	punpckhwd	%xmm1, %xmm2
    000003fb: 	movdqa	%xmm12, %xmm5
    00000400: 	punpckhwd	%xmm1, %xmm12
    00000405: 	punpcklwd	%xmm1, %xmm13
    0000040a: 	punpcklwd	%xmm1, %xmm5
    0000040e: 	movdqa	%xmm5, %xmm14
    00000413: 	movdqa	%xmm5, %xmm7
    00000417: 	movdqa	%xmm12, %xmm5
    0000041c: 	punpckldq	%xmm0, %xmm14
    00000421: 	punpckhdq	%xmm0, %xmm7
    00000425: 	punpckldq	%xmm0, %xmm5
    00000429: 	paddq	%xmm14, %xmm7
    0000042e: 	punpckhdq	%xmm0, %xmm12
    00000433: 	paddq	%xmm5, %xmm7
    00000437: 	movdqa	%xmm13, %xmm5
    0000043c: 	punpckhdq	%xmm0, %xmm13
    00000441: 	punpckldq	%xmm0, %xmm5
    00000445: 	paddq	%xmm6, %xmm7
    00000449: 	paddq	%xmm5, %xmm12
    0000044e: 	movdqa	%xmm2, %xmm5
    00000452: 	paddq	%xmm12, %xmm13
    00000457: 	movdqa	%xmm2, %xmm12
    0000045c: 	punpckldq	%xmm0, %xmm5
    00000460: 	movdqa	DATAat0x165e0(%rip), %xmm2
    00000468: 	paddq	%xmm13, %xmm7
    0000046d: 	punpckhdq	%xmm0, %xmm12
    00000472: 	pand	%xmm4, %xmm2
    00000476: 	paddq	%xmm5, %xmm12
    0000047b: 	pand	%xmm8, %xmm4
    00000480: 	pcmpeqb	%xmm3, %xmm2
    00000484: 	pcmpeqb	%xmm3, %xmm4
    00000488: 	pandn	%xmm8, %xmm2
    0000048d: 	pandn	%xmm8, %xmm4
    00000492: 	movdqa	%xmm2, %xmm13
    00000497: 	punpckhbw	%xmm3, %xmm2
    0000049b: 	punpcklbw	%xmm3, %xmm13
    000004a0: 	movdqa	%xmm2, %xmm6
    000004a4: 	punpckhwd	%xmm1, %xmm2
    000004a8: 	movdqa	%xmm13, %xmm14
    000004ad: 	punpckhwd	%xmm1, %xmm13
    000004b2: 	punpcklwd	%xmm1, %xmm6
    000004b6: 	punpcklwd	%xmm1, %xmm14
    000004bb: 	movdqa	%xmm13, %xmm5
    000004c0: 	punpckhdq	%xmm0, %xmm13
    000004c5: 	movdqa	%xmm14, %xmm15
    000004ca: 	punpckldq	%xmm0, %xmm5
    000004ce: 	punpckldq	%xmm0, %xmm14
    000004d3: 	punpckhdq	%xmm0, %xmm15
    000004d8: 	paddq	%xmm14, %xmm12
    000004dd: 	paddq	%xmm15, %xmm5
    000004e2: 	paddq	%xmm12, %xmm7
    000004e7: 	paddq	%xmm13, %xmm5
    000004ec: 	paddq	%xmm7, %xmm5
    000004f0: 	movdqa	%xmm6, %xmm7
    000004f4: 	punpckhdq	%xmm0, %xmm6
    000004f8: 	punpckldq	%xmm0, %xmm7
    000004fc: 	paddq	%xmm7, %xmm6
    00000500: 	movdqa	%xmm2, %xmm7
    00000504: 	punpckhdq	%xmm0, %xmm2
    00000508: 	punpckldq	%xmm0, %xmm7
    0000050c: 	paddq	%xmm7, %xmm6
    00000510: 	movdqa	%xmm4, %xmm7
    00000514: 	punpckhbw	%xmm3, %xmm4
    00000518: 	punpcklbw	%xmm3, %xmm7
    0000051c: 	paddq	%xmm6, %xmm5
    00000520: 	movdqa	%xmm4, %xmm6
    00000524: 	movdqa	%xmm7, %xmm12
    00000529: 	punpckhwd	%xmm1, %xmm7
    0000052d: 	punpcklwd	%xmm1, %xmm6
    00000531: 	punpcklwd	%xmm1, %xmm12
    00000536: 	punpckhwd	%xmm1, %xmm4
    0000053a: 	movdqa	%xmm12, %xmm13
    0000053f: 	punpckhdq	%xmm0, %xmm12
    00000544: 	punpckldq	%xmm0, %xmm13
    00000549: 	paddq	%xmm13, %xmm2
    0000054e: 	paddq	%xmm12, %xmm2
    00000553: 	paddq	%xmm5, %xmm2
    00000557: 	movdqa	%xmm7, %xmm5
    0000055b: 	punpckhdq	%xmm0, %xmm7
    0000055f: 	punpckldq	%xmm0, %xmm5
    00000563: 	paddq	%xmm5, %xmm7
    00000567: 	movdqa	%xmm6, %xmm5
    0000056b: 	punpckhdq	%xmm0, %xmm6
    0000056f: 	punpckldq	%xmm0, %xmm5
    00000573: 	paddq	%xmm5, %xmm7
    00000577: 	movdqa	%xmm4, %xmm5
    0000057b: 	punpckhdq	%xmm0, %xmm4
    0000057f: 	punpckldq	%xmm0, %xmm5
    00000583: 	paddq	%xmm7, %xmm2
    00000587: 	paddq	%xmm5, %xmm6
    0000058b: 	paddq	%xmm6, %xmm4
    0000058f: 	paddq	%xmm2, %xmm4
    00000593: 	paddq	%xmm4, %xmm9
    00000598: 	cmpq	%rdx, %rax
    0000059b: 	jne	.Ltmp482 # Offset: 1435
    000005a1: 	movdqa	%xmm9, %xmm0
    000005a6: 	movq	%rcx, %rdx
    000005a9: 	psrldq	$0x8, %xmm0
    000005ae: 	andq	$-0x10, %rdx
    000005b2: 	paddq	%xmm0, %xmm9
    000005b7: 	addq	%rdx, %r10
    000005ba: 	movq	%xmm9, %rax
    000005bf: 	addq	%rax, %r8
    000005c2: 	movq	%rdx, %rax
    000005c5: 	negq	%rax
    000005c8: 	leaq	(%rdi,%rax,8), %rax
    000005cc: 	cmpq	%rdx, %rcx
    000005cf: 	je	.Ltmp483 # Offset: 1487
.Ltmp486:
    000005d5: 	subq	$0x8, %rax
    000005d9: 	leaq	0x1(%r9,%r10), %rdx
    000005de: 	leaq	(%r9,%r10), %rcx
    000005e2: 	shrq	$0x3, %rax
    000005e6: 	leaq	(%rax,%rdx), %rbx
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp484:
    000005f0: 	movsbq	(%rcx), %rax
    000005f4: 	movq	%rax, %rdx
    000005f7: 	shrq	$0x3f, %rax
    000005fb: 	movl	%edx, %r10d
    000005fe: 	andl	$0x40, %r10d
    00000602: 	cmpb	$0x1, %r10b
    00000606: 	movl	%edx, %r10d
    00000609: 	sbbq	$-0x1, %rax
    0000060d: 	andl	$0x20, %r10d
    00000611: 	cmpb	$0x1, %r10b
    00000615: 	movl	%edx, %r10d
    00000618: 	sbbq	$-0x1, %rax
    0000061c: 	andl	$0x10, %r10d
    00000620: 	cmpb	$0x1, %r10b
    00000624: 	movl	%edx, %r10d
    00000627: 	sbbq	$-0x1, %rax
    0000062b: 	andl	$0x8, %r10d
    0000062f: 	cmpb	$0x1, %r10b
    00000633: 	movl	%edx, %r10d
    00000636: 	sbbq	$-0x1, %rax
    0000063a: 	andl	$0x4, %r10d
    0000063e: 	cmpb	$0x1, %r10b
    00000642: 	movl	%edx, %r10d
    00000645: 	sbbq	$-0x1, %rax
    00000649: 	andl	$0x2, %r10d
    0000064d: 	cmpb	$0x1, %r10b
    00000651: 	sbbq	$-0x1, %rax
    00000655: 	andl	$0x1, %edx
    00000658: 	cmpb	$0x1, %dl
    0000065b: 	sbbq	$-0x1, %rax
    0000065f: 	addq	$0x1, %rcx
    00000663: 	addq	%rax, %r8
    00000666: 	cmpq	%rcx, %rbx
    00000669: 	jne	.Ltmp484 # Offset: 1641
.Ltmp483:
    0000066b: 	andq	$-0x8, %r11
    0000066f: 	andl	$0x7, %edi
    00000672: 	leaq	0x8(%rsi,%r11), %rsi
    00000677: 	leaq	-0x1(%rdi), %rdx
    0000067b: 	je	.Ltmp485 # Offset: 1659
.Ltmp487:
    00000681: 	movl	%esi, %ecx
    00000683: 	movl	$0x1, %eax
    00000688: 	movq	%rsi, %rdi
    0000068b: 	andl	$0x7, %ecx
    0000068e: 	movl	%eax, %ebx
    00000690: 	shrq	$0x3, %rdi
    00000694: 	shll	%cl, %ebx
    00000696: 	movl	%ebx, %ecx
    00000698: 	andb	(%r9,%rdi), %cl
    0000069c: 	cmpb	$0x1, %cl
    0000069f: 	leaq	0x1(%rsi), %rcx
    000006a3: 	sbbq	$-0x1, %r8
    000006a7: 	testq	%rdx, %rdx
    000006aa: 	je	.Ltmp485 # Offset: 1706
    000006b0: 	movq	%rcx, %rdi
    000006b3: 	movl	%eax, %ebx
    000006b5: 	andl	$0x7, %ecx
    000006b8: 	shrq	$0x3, %rdi
    000006bc: 	shll	%cl, %ebx
    000006be: 	movl	%ebx, %ecx
    000006c0: 	andb	(%r9,%rdi), %cl
    000006c4: 	cmpb	$0x1, %cl
    000006c7: 	leaq	0x2(%rsi), %rcx
    000006cb: 	sbbq	$-0x1, %r8
    000006cf: 	cmpq	$0x1, %rdx
    000006d3: 	je	.Ltmp485 # Offset: 1747
    000006d9: 	movq	%rcx, %rdi
    000006dc: 	movl	%eax, %ebx
    000006de: 	andl	$0x7, %ecx
    000006e1: 	shrq	$0x3, %rdi
    000006e5: 	shll	%cl, %ebx
    000006e7: 	movl	%ebx, %ecx
    000006e9: 	andb	(%r9,%rdi), %cl
    000006ed: 	cmpb	$0x1, %cl
    000006f0: 	leaq	0x3(%rsi), %rcx
    000006f4: 	sbbq	$-0x1, %r8
    000006f8: 	cmpq	$0x2, %rdx
    000006fc: 	je	.Ltmp485 # Offset: 1788
    00000702: 	movq	%rcx, %rdi
    00000705: 	movl	%eax, %ebx
    00000707: 	andl	$0x7, %ecx
    0000070a: 	shrq	$0x3, %rdi
    0000070e: 	shll	%cl, %ebx
    00000710: 	movl	%ebx, %ecx
    00000712: 	andb	(%r9,%rdi), %cl
    00000716: 	cmpb	$0x1, %cl
    00000719: 	leaq	0x4(%rsi), %rcx
    0000071d: 	sbbq	$-0x1, %r8
    00000721: 	cmpq	$0x3, %rdx
    00000725: 	je	.Ltmp485 # Offset: 1829
    00000727: 	movq	%rcx, %rdi
    0000072a: 	movl	%eax, %ebx
    0000072c: 	andl	$0x7, %ecx
    0000072f: 	shrq	$0x3, %rdi
    00000733: 	shll	%cl, %ebx
    00000735: 	movl	%ebx, %ecx
    00000737: 	andb	(%r9,%rdi), %cl
    0000073b: 	cmpb	$0x1, %cl
    0000073e: 	leaq	0x5(%rsi), %rcx
    00000742: 	sbbq	$-0x1, %r8
    00000746: 	cmpq	$0x4, %rdx
    0000074a: 	je	.Ltmp485 # Offset: 1866
    0000074c: 	movq	%rcx, %rdi
    0000074f: 	movl	%eax, %ebx
    00000751: 	andl	$0x7, %ecx
    00000754: 	shrq	$0x3, %rdi
    00000758: 	shll	%cl, %ebx
    0000075a: 	movl	%ebx, %ecx
    0000075c: 	andb	(%r9,%rdi), %cl
    00000760: 	cmpb	$0x1, %cl
    00000763: 	leaq	0x6(%rsi), %rcx
    00000767: 	sbbq	$-0x1, %r8
    0000076b: 	cmpq	$0x5, %rdx
    0000076f: 	je	.Ltmp485 # Offset: 1903
    00000771: 	movq	%rcx, %rdx
    00000774: 	andl	$0x7, %ecx
    00000777: 	shrq	$0x3, %rdx
    0000077b: 	shll	%cl, %eax
    0000077d: 	andb	(%r9,%rdx), %al
    00000781: 	cmpb	$0x1, %al
    00000783: 	sbbq	$-0x1, %r8
.Ltmp485:
    00000787: 	movq	%r8, %rax
    0000078a: 	popq	%rbx
    0000078b: 	retq # Offset: 1931
.Ltmp481:
    0000078c: 	movq	%rdi, %rax
    0000078f: 	jmp	.Ltmp486 # Offset: 1935
.Ltmp480:
    00000794: 	leaq	-0x1(%rdi), %rdx
    00000798: 	jmp	.Ltmp487 # Offset: 1944
DWARF CFI Instructions:
    <empty>
End of Function "_Z18CountBitsByteLoop2ItEmPT_mm"

Binary Function "_Z9CountBitsItEmPT_mm" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0xab20
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0xab20
  Section     : .text
  Orc Section : .local.text._Z9CountBitsItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp488 # Offset: 10
    0000000c: 	je	.Ltmp488 # Offset: 12
    0000000e: 	movl	$0x1, %r10d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp489:
    00000018: 	movq	%rsi, %r9
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movl	%r10d, %eax
    00000020: 	shrq	$0x4, %r9
    00000024: 	andl	$0xf, %ecx
    00000027: 	shll	%cl, %eax
    00000029: 	andw	(%rdi,%r9,2), %ax
    0000002e: 	cmpw	$0x1, %ax
    00000032: 	sbbq	$-0x1, %r8
    00000036: 	addq	$0x1, %rsi
    0000003a: 	cmpq	%rsi, %rdx
    0000003d: 	jne	.Ltmp489 # Offset: 61
.Ltmp488:
    0000003f: 	movq	%r8, %rax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z9CountBitsItEmPT_mm"

Binary Function "_Z14CountBitsShiftIjEmPT_mm" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0xab70
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0xab70
  Section     : .text
  Orc Section : .local.text._Z14CountBitsShiftIjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	xorl	%r8d, %r8d
    0000000a: 	cmpq	%rsi, %rdx
    0000000d: 	jb	.Ltmp490 # Offset: 13
    0000000f: 	je	.Ltmp490 # Offset: 15
    00000011: 	movl	$0x1, %r9d
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp491:
    00000020: 	movq	%rcx, %rsi
    00000023: 	movl	%r9d, %eax
    00000026: 	shrq	$0x5, %rsi
    0000002a: 	shll	%cl, %eax
    0000002c: 	andl	(%rdi,%rsi,4), %eax
    0000002f: 	cmpl	$0x1, %eax
    00000032: 	sbbq	$-0x1, %r8
    00000036: 	addq	$0x1, %rcx
    0000003a: 	cmpq	%rcx, %rdx
    0000003d: 	jne	.Ltmp491 # Offset: 61
.Ltmp490:
    0000003f: 	movq	%r8, %rax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z14CountBitsShiftIjEmPT_mm"

Binary Function "_Z14SetBitsHalfOptIjEvPT_mm" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0xabc0
  Size        : 0xe7
  MaxSize     : 0xf0
  Offset      : 0xabc0
  Section     : .text
  Orc Section : .local.text._Z14SetBitsHalfOptIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp492 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %rcx
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdx, %rbx
    00000017: 	subq	$0x10, %rsp
    0000001b: 	subq	%rsi, %rbx
    0000001e: 	je	.Ltmp493 # Offset: 30
    00000020: 	movq	%rdi, %rbp
    00000023: 	testb	$0x1f, %sil
    00000027: 	je	.Ltmp494 # Offset: 39
    00000029: 	movl	$0x1, %esi
    0000002e: 	jmp	.Ltmp495 # Offset: 46
.Ltmp496:
    00000030: 	testb	$0x1f, %cl
    00000033: 	je	.Ltmp494 # Offset: 51
.Ltmp495:
    00000035: 	movq	%rcx, %rax
    00000038: 	movl	%esi, %edx
    0000003a: 	shrq	$0x5, %rax
    0000003e: 	shll	%cl, %edx
    00000040: 	addq	$0x1, %rcx
    00000044: 	orl	%edx, (%rbp,%rax,4)
    00000048: 	subq	$0x1, %rbx
    0000004c: 	jne	.Ltmp496 # Offset: 76
.Ltmp493:
    0000004e: 	addq	$0x10, %rsp
    00000052: 	popq	%rbx
    00000053: 	popq	%rbp
    00000054: 	popq	%r12
    00000056: 	retq # Offset: 86
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp494:
    00000060: 	movq	%rcx, %rax
    00000063: 	shrq	$0x5, %rax
    00000067: 	cmpq	$0x1f, %rbx
    0000006b: 	jbe	.Ltmp497 # Offset: 107
    0000006d: 	leaq	-0x20(%rbx), %r12
    00000071: 	movl	$0xff, %esi
    00000076: 	leaq	(%rbp,%rax,4), %rdi
    0000007b: 	movq	%rcx, 0x8(%rsp)
    00000080: 	movq	%r12, %rdx
    00000083: 	andq	$-0x20, %r12
    00000087: 	shrq	$0x5, %rdx
    0000008b: 	leaq	0x4(,%rdx,4), %rdx
    00000093: 	callq	memset@PLT # Offset: 147
    00000098: 	movq	0x8(%rsp), %rcx
    0000009d: 	andl	$0x1f, %ebx
    000000a0: 	leaq	-0x1(%rbx), %rsi
    000000a4: 	leaq	0x20(%rcx,%r12), %rcx
    000000a9: 	je	.Ltmp493 # Offset: 169
.Ltmp499:
    000000ab: 	addq	%rcx, %rsi
    000000ae: 	movl	$0x1, %edi
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp498:
    000000b8: 	movq	%rcx, %rax
    000000bb: 	movl	%edi, %edx
    000000bd: 	shrq	$0x5, %rax
    000000c1: 	shll	%cl, %edx
    000000c3: 	orl	%edx, (%rbp,%rax,4)
    000000c7: 	movq	%rcx, %rax
    000000ca: 	addq	$0x1, %rcx
    000000ce: 	cmpq	%rsi, %rax
    000000d1: 	jne	.Ltmp498 # Offset: 209
    000000d3: 	addq	$0x10, %rsp
    000000d7: 	popq	%rbx
    000000d8: 	popq	%rbp
    000000d9: 	popq	%r12
    000000db: 	retq # Offset: 219
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp492:
    000000e0: 	retq # Offset: 224
.Ltmp497:
    000000e1: 	leaq	-0x1(%rbx), %rsi
    000000e5: 	jmp	.Ltmp499 # Offset: 229
DWARF CFI Instructions:
    <empty>
End of Function "_Z14SetBitsHalfOptIjEvPT_mm"

Binary Function "_Z12SetBitsShiftIjEvPT_mm" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0xacb0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0xacb0
  Section     : .text
  Orc Section : .local.text._Z12SetBitsShiftIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp500 # Offset: 10
    0000000c: 	je	.Ltmp500 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp501:
    00000018: 	movq	%rcx, %rax
    0000001b: 	movl	%r8d, %esi
    0000001e: 	shll	%cl, %esi
    00000020: 	shrq	$0x5, %rax
    00000024: 	addq	$0x1, %rcx
    00000028: 	orl	%esi, (%rdi,%rax,4)
    0000002b: 	cmpq	%rcx, %rdx
    0000002e: 	jne	.Ltmp501 # Offset: 46
.Ltmp500:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z12SetBitsShiftIjEvPT_mm"

Binary Function "_Z7SetBitsIjEvPT_mm" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0xacf0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0xacf0
  Section     : .text
  Orc Section : .local.text._Z7SetBitsIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp502 # Offset: 10
    0000000c: 	je	.Ltmp502 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp503:
    00000018: 	movq	%rcx, %rax
    0000001b: 	movl	%r8d, %esi
    0000001e: 	shll	%cl, %esi
    00000020: 	shrq	$0x5, %rax
    00000024: 	addq	$0x1, %rcx
    00000028: 	orl	%esi, (%rdi,%rax,4)
    0000002b: 	cmpq	%rcx, %rdx
    0000002e: 	jne	.Ltmp503 # Offset: 46
.Ltmp502:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z7SetBitsIjEvPT_mm"

Binary Function "_Z16ClearBitsHalfOptIjEvPT_mm" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0xad30
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0xad30
  Section     : .text
  Orc Section : .local.text._Z16ClearBitsHalfOptIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp504 # Offset: 7
    0000000d: 	movq	%rsi, %rcx
    00000010: 	subq	%rsi, %rdx
    00000013: 	je	.Ltmp504 # Offset: 19
    00000019: 	pushq	%r12
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	subq	$0x10, %rsp
    00000024: 	testb	$0x1f, %sil
    00000028: 	je	.Ltmp505 # Offset: 40
    0000002a: 	movl	$0x1, %edi
    0000002f: 	jmp	.Ltmp506 # Offset: 47
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp507:
    00000038: 	testb	$0x1f, %cl
    0000003b: 	je	.Ltmp505 # Offset: 59
.Ltmp506:
    0000003d: 	movq	%rcx, %rsi
    00000040: 	movl	%edi, %eax
    00000042: 	shll	%cl, %eax
    00000044: 	shrq	$0x5, %rsi
    00000048: 	addq	$0x1, %rcx
    0000004c: 	notl	%eax
    0000004e: 	andl	%eax, (%rbp,%rsi,4)
    00000052: 	subq	$0x1, %rdx
    00000056: 	jne	.Ltmp507 # Offset: 86
    00000058: 	addq	$0x10, %rsp
    0000005c: 	popq	%rbx
    0000005d: 	popq	%rbp
    0000005e: 	popq	%r12
    00000060: 	retq # Offset: 96
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp505:
    00000068: 	movq	%rcx, %rax
    0000006b: 	shrq	$0x5, %rax
    0000006f: 	cmpq	$0x20, %rdx
    00000073: 	jbe	.Ltmp508 # Offset: 115
    00000075: 	leaq	-0x21(%rdx), %rbx
    00000079: 	leaq	(%rbp,%rax,4), %rdi
    0000007e: 	xorl	%esi, %esi
    00000080: 	movq	%rcx, 0x8(%rsp)
    00000085: 	movq	%rbx, %r12
    00000088: 	shrq	$0x5, %r12
    0000008c: 	leaq	0x4(,%r12,4), %rdx
    00000094: 	shlq	$0x5, %r12
    00000098: 	callq	memset@PLT # Offset: 152
    0000009d: 	movq	%rbx, %rax
    000000a0: 	movq	0x8(%rsp), %rcx
    000000a5: 	subq	%r12, %rbx
    000000a8: 	andq	$-0x20, %rax
    000000ac: 	movq	%rbx, %rdx
    000000af: 	leaq	0x20(%rcx,%rax), %rcx
.Ltmp510:
    000000b4: 	addq	%rcx, %rdx
    000000b7: 	movl	$0x1, %edi
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp509:
    000000c0: 	movq	%rcx, %rsi
    000000c3: 	movl	%edi, %eax
    000000c5: 	shll	%cl, %eax
    000000c7: 	shrq	$0x5, %rsi
    000000cb: 	notl	%eax
    000000cd: 	andl	%eax, (%rbp,%rsi,4)
    000000d1: 	movq	%rcx, %rax
    000000d4: 	addq	$0x1, %rcx
    000000d8: 	cmpq	%rdx, %rax
    000000db: 	jne	.Ltmp509 # Offset: 219
    000000dd: 	addq	$0x10, %rsp
    000000e1: 	popq	%rbx
    000000e2: 	popq	%rbp
    000000e3: 	popq	%r12
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp504:
    000000f0: 	retq # Offset: 240
.Ltmp508:
    000000f1: 	subq	$0x1, %rdx
    000000f5: 	jmp	.Ltmp510 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z16ClearBitsHalfOptIjEvPT_mm"

Binary Function "_Z14ClearBitsShiftIjEvPT_mm" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0xae30
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0xae30
  Section     : .text
  Orc Section : .local.text._Z14ClearBitsShiftIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp511 # Offset: 10
    0000000c: 	je	.Ltmp511 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp512:
    00000018: 	movq	%rcx, %rsi
    0000001b: 	movl	%r8d, %eax
    0000001e: 	shll	%cl, %eax
    00000020: 	shrq	$0x5, %rsi
    00000024: 	addq	$0x1, %rcx
    00000028: 	notl	%eax
    0000002a: 	andl	%eax, (%rdi,%rsi,4)
    0000002d: 	cmpq	%rcx, %rdx
    00000030: 	jne	.Ltmp512 # Offset: 48
.Ltmp511:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z14ClearBitsShiftIjEvPT_mm"

Binary Function "_Z9ClearBitsIjEvPT_mm" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0xae70
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0xae70
  Section     : .text
  Orc Section : .local.text._Z9ClearBitsIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp513 # Offset: 10
    0000000c: 	je	.Ltmp513 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp514:
    00000018: 	movq	%rcx, %rsi
    0000001b: 	movl	%r8d, %eax
    0000001e: 	shll	%cl, %eax
    00000020: 	shrq	$0x5, %rsi
    00000024: 	addq	$0x1, %rcx
    00000028: 	notl	%eax
    0000002a: 	andl	%eax, (%rdi,%rsi,4)
    0000002d: 	cmpq	%rcx, %rdx
    00000030: 	jne	.Ltmp514 # Offset: 48
.Ltmp513:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z9ClearBitsIjEvPT_mm"

Binary Function "_Z17InvertBitsHalfOptIjEvPT_mm" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0xaeb0
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0xaeb0
  Section     : .text
  Orc Section : .local.text._Z17InvertBitsHalfOptIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	movq	%rsi, %rcx
    0000000a: 	cmpq	%rsi, %rdx
    0000000d: 	jb	.Ltmp515 # Offset: 13
    0000000f: 	subq	%rsi, %rdx
    00000012: 	je	.Ltmp515 # Offset: 18
    00000014: 	testb	$0x1f, %sil
    00000018: 	je	.Ltmp516 # Offset: 24
    0000001a: 	movl	$0x1, %r8d
    00000020: 	jmp	.Ltmp517 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp518:
    00000028: 	testb	$0x1f, %cl
    0000002b: 	je	.Ltmp516 # Offset: 43
.Ltmp517:
    0000002d: 	movq	%rcx, %rsi
    00000030: 	movl	%r8d, %edi
    00000033: 	shrq	$0x5, %rsi
    00000037: 	shll	%cl, %edi
    00000039: 	addq	$0x1, %rcx
    0000003d: 	xorl	%edi, (%rax,%rsi,4)
    00000040: 	subq	$0x1, %rdx
    00000044: 	jne	.Ltmp518 # Offset: 68
.Ltmp515:
    00000046: 	retq # Offset: 70
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp516:
    00000050: 	movq	%rcx, %r9
    00000053: 	shrq	$0x5, %r9
    00000057: 	cmpq	$0x20, %rdx
    0000005b: 	jbe	.Ltmp519 # Offset: 91
    00000061: 	leaq	-0x21(%rdx), %rdi
    00000065: 	movq	%rdi, %r10
    00000068: 	shrq	$0x5, %r10
    0000006c: 	leaq	0x1(%r10), %r11
    00000070: 	cmpq	$0x5f, %rdi
    00000074: 	jbe	.Ltmp520 # Offset: 116
    00000076: 	movq	%r11, %r8
    00000079: 	leaq	(%rax,%r9,4), %rsi
    0000007d: 	pcmpeqd	%xmm1, %xmm1
    00000081: 	shrq	$0x2, %r8
    00000085: 	shlq	$0x4, %r8
    00000089: 	addq	%rsi, %r8
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp521:
    00000090: 	movdqu	(%rsi), %xmm0
    00000094: 	addq	$0x10, %rsi
    00000098: 	pxor	%xmm1, %xmm0
    0000009c: 	movups	%xmm0, -0x10(%rsi)
    000000a0: 	cmpq	%rsi, %r8
    000000a3: 	jne	.Ltmp521 # Offset: 163
    000000a5: 	movq	%r11, %rsi
    000000a8: 	andq	$-0x4, %rsi
    000000ac: 	movq	%rsi, %r8
    000000af: 	addq	%rsi, %r9
    000000b2: 	shlq	$0x5, %r8
    000000b6: 	subq	%r8, %rdx
    000000b9: 	cmpq	%rsi, %r11
    000000bc: 	je	.Ltmp522 # Offset: 188
.Ltmp520:
    000000be: 	leaq	(,%r9,4), %rsi
    000000c6: 	leaq	-0x20(%rdx), %r8
    000000ca: 	notl	(%rax,%rsi)
    000000cd: 	cmpq	$0x20, %r8
    000000d1: 	jbe	.Ltmp522 # Offset: 209
    000000d3: 	subq	$0x40, %rdx
    000000d7: 	notl	0x4(%rax,%rsi)
    000000db: 	cmpq	$0x20, %rdx
    000000df: 	jbe	.Ltmp522 # Offset: 223
    000000e1: 	notl	0x8(%rax,%rsi)
.Ltmp522:
    000000e5: 	movq	%rdi, %rdx
    000000e8: 	shlq	$0x5, %r10
    000000ec: 	andq	$-0x20, %rdx
    000000f0: 	subq	%r10, %rdi
    000000f3: 	leaq	0x20(%rcx,%rdx), %rcx
.Ltmp524:
    000000f8: 	addq	%rcx, %rdi
    000000fb: 	movl	$0x1, %r8d
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp523:
    00000108: 	movq	%rcx, %rdx
    0000010b: 	movl	%r8d, %esi
    0000010e: 	shrq	$0x5, %rdx
    00000112: 	shll	%cl, %esi
    00000114: 	xorl	%esi, (%rax,%rdx,4)
    00000117: 	movq	%rcx, %rdx
    0000011a: 	addq	$0x1, %rcx
    0000011e: 	cmpq	%rdi, %rdx
    00000121: 	jne	.Ltmp523 # Offset: 289
    00000123: 	retq # Offset: 291
.Ltmp519:
    00000124: 	leaq	-0x1(%rdx), %rdi
    00000128: 	jmp	.Ltmp524 # Offset: 296
DWARF CFI Instructions:
    <empty>
End of Function "_Z17InvertBitsHalfOptIjEvPT_mm"

Binary Function "_Z15InvertBitsShiftIjEvPT_mm" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0xafe0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0xafe0
  Section     : .text
  Orc Section : .local.text._Z15InvertBitsShiftIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp525 # Offset: 10
    0000000c: 	je	.Ltmp525 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp526:
    00000018: 	movq	%rcx, %rax
    0000001b: 	movl	%r8d, %esi
    0000001e: 	shll	%cl, %esi
    00000020: 	shrq	$0x5, %rax
    00000024: 	addq	$0x1, %rcx
    00000028: 	xorl	%esi, (%rdi,%rax,4)
    0000002b: 	cmpq	%rcx, %rdx
    0000002e: 	jne	.Ltmp526 # Offset: 46
.Ltmp525:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z15InvertBitsShiftIjEvPT_mm"

Binary Function "_Z10InvertBitsIjEvPT_mm" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0xb020
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0xb020
  Section     : .text
  Orc Section : .local.text._Z10InvertBitsIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp527 # Offset: 10
    0000000c: 	je	.Ltmp527 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp528:
    00000018: 	movq	%rcx, %rax
    0000001b: 	movl	%r8d, %esi
    0000001e: 	shll	%cl, %esi
    00000020: 	shrq	$0x5, %rax
    00000024: 	addq	$0x1, %rcx
    00000028: 	xorl	%esi, (%rdi,%rax,4)
    0000002b: 	cmpq	%rcx, %rdx
    0000002e: 	jne	.Ltmp528 # Offset: 46
.Ltmp527:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z10InvertBitsIjEvPT_mm"

Binary Function "_Z21AndBitTablesOptimizedIjEvPT_PKS0_mm" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0xb060
  Size        : 0x1d7
  MaxSize     : 0x1e0
  Offset      : 0xb060
  Section     : .text
  Orc Section : .local.text._Z21AndBitTablesOptimizedIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp529 # Offset: 7
    0000000d: 	movq	%rcx, %r11
    00000010: 	movq	%rcx, %rax
    00000013: 	movq	%rdx, %r8
    00000016: 	pushq	%r14
    00000018: 	subq	%rdx, %r11
    0000001b: 	shrq	$0x5, %rax
    0000001f: 	pushq	%r13
    00000021: 	movq	%rcx, %r10
    00000024: 	shrq	$0x5, %rdx
    00000028: 	pushq	%r12
    0000002a: 	pushq	%rbp
    0000002b: 	pushq	%rbx
    0000002c: 	cmpq	%rdx, %rax
    0000002f: 	ja	.Ltmp530 # Offset: 47
.Ltmp538:
    00000035: 	cmpq	$0x1f, %r11
    00000039: 	jbe	.Ltmp531 # Offset: 57
    0000003f: 	leaq	(,%rdx,4), %rcx
    00000047: 	leaq	0x1(%rdx), %rax
    0000004b: 	leaq	(%rdi,%rcx), %r9
    0000004f: 	leaq	0x4(%rsi,%rcx), %r13
    00000054: 	movq	%rax, %rbp
    00000057: 	movq	%r9, %r12
    0000005a: 	leaq	-0x20(%r11), %rbx
    0000005e: 	subq	%r13, %r12
    00000061: 	cmpq	$0x8, %r12
    00000065: 	jbe	.Ltmp532 # Offset: 101
    0000006b: 	cmpq	$0x1f, %rbx
    0000006f: 	jbe	.Ltmp532 # Offset: 111
    00000075: 	movq	%rbx, %r13
    00000078: 	shrq	$0x5, %r13
    0000007c: 	leaq	0x1(%r13), %r12
    00000080: 	cmpq	$0x5f, %rbx
    00000084: 	jbe	.Ltmp533 # Offset: 132
    0000008a: 	movq	%r12, %r14
    0000008d: 	addq	%rsi, %rcx
    00000090: 	xorl	%eax, %eax
    00000092: 	shrq	$0x2, %r14
    00000096: 	shlq	$0x4, %r14
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp534:
    000000a0: 	movdqu	(%r9,%rax), %xmm0
    000000a6: 	movdqu	(%rcx,%rax), %xmm2
    000000ab: 	pand	%xmm2, %xmm0
    000000af: 	movups	%xmm0, (%r9,%rax)
    000000b4: 	addq	$0x10, %rax
    000000b8: 	cmpq	%rax, %r14
    000000bb: 	jne	.Ltmp534 # Offset: 187
    000000bd: 	movq	%r12, %rcx
    000000c0: 	andq	$-0x4, %rcx
    000000c4: 	addq	%rcx, %rdx
    000000c7: 	movq	%rdx, %rax
    000000ca: 	cmpq	%rcx, %r12
    000000cd: 	je	.Ltmp535 # Offset: 205
    000000cf: 	subq	%rcx, %r12
    000000d2: 	cmpq	%rcx, %r13
    000000d5: 	je	.Ltmp536 # Offset: 213
.Ltmp541:
    000000d7: 	leaq	(%rdi,%rdx,4), %rcx
    000000db: 	movq	(%rsi,%rdx,4), %xmm0
    000000e0: 	movq	%r12, %rdx
    000000e3: 	movq	(%rcx), %xmm1
    000000e7: 	andq	$-0x2, %rdx
    000000eb: 	addq	%rdx, %rax
    000000ee: 	pand	%xmm1, %xmm0
    000000f2: 	movq	%xmm0, (%rcx)
    000000f6: 	cmpq	%rdx, %r12
    000000f9: 	je	.Ltmp535 # Offset: 249
.Ltmp536:
    000000fb: 	movl	(%rsi,%rax,4), %ecx
    000000fe: 	andl	%ecx, (%rdi,%rax,4)
.Ltmp535:
    00000101: 	movq	%rbx, %rax
    00000104: 	shrq	$0x5, %rbx
    00000108: 	andl	$0x1f, %r11d
    0000010c: 	andq	$-0x20, %rax
    00000110: 	movq	%rbx, %rdx
    00000113: 	leaq	0x20(%r8,%rax), %r8
    00000118: 	addq	%rbp, %rdx
.Ltmp531:
    0000011b: 	testq	%r11, %r11
    0000011e: 	je	.Ltmp537 # Offset: 286
    00000120: 	movl	(%rsi,%rdx,4), %esi
    00000123: 	leaq	(%rdi,%rdx,4), %rdi
    00000127: 	movl	$0xffffffff, %edx
    0000012c: 	movl	%r10d, %ecx
    0000012f: 	movl	%edx, %eax
    00000131: 	shll	%cl, %eax
    00000133: 	movl	%r8d, %ecx
    00000136: 	shll	%cl, %edx
    00000138: 	notl	%eax
    0000013a: 	andl	%edx, %eax
    0000013c: 	movl	(%rdi), %edx
    0000013e: 	xorl	%esi, %edx
    00000140: 	andl	%edx, %eax
    00000142: 	xorl	%esi, %eax
    00000144: 	andl	(%rdi), %eax
    00000146: 	movl	%eax, (%rdi)
.Ltmp537:
    00000148: 	popq	%rbx
    00000149: 	popq	%rbp
    0000014a: 	popq	%r12
    0000014c: 	popq	%r13
    0000014e: 	popq	%r14
    00000150: 	retq # Offset: 336
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp530:
    00000158: 	movq	%r8, %rcx
    0000015b: 	andl	$0x1f, %ecx
    0000015e: 	je	.Ltmp538 # Offset: 350
    00000164: 	leaq	(%rdi,%rdx,4), %r9
    00000168: 	movl	(%rsi,%rdx,4), %ebx
    0000016b: 	movl	$0xffffffff, %edx
    00000170: 	addq	$0x20, %r8
    00000174: 	movl	(%r9), %eax
    00000177: 	shll	%cl, %edx
    00000179: 	subq	%rcx, %r8
    0000017c: 	leaq	-0x20(%rcx,%r11), %r11
    00000181: 	xorl	%ebx, %eax
    00000183: 	andl	%edx, %eax
    00000185: 	movq	%r8, %rdx
    00000188: 	xorl	%ebx, %eax
    0000018a: 	andl	(%r9), %eax
    0000018d: 	shrq	$0x5, %rdx
    00000191: 	movl	%eax, (%r9)
    00000194: 	jmp	.Ltmp538 # Offset: 404
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp529:
    000001a0: 	retq # Offset: 416
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp532:
    000001a8: 	movq	%rbx, %r9
    000001ab: 	shrq	$0x5, %r9
    000001af: 	addq	%rax, %r9
    000001b2: 	jmp	.Ltmp539 # Offset: 434
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp540:
    000001b8: 	addq	$0x1, %rax
.Ltmp539:
    000001bc: 	movl	(%rsi,%rdx,4), %ecx
    000001bf: 	andl	%ecx, (%rdi,%rdx,4)
    000001c2: 	movq	%rax, %rdx
    000001c5: 	cmpq	%r9, %rax
    000001c8: 	jne	.Ltmp540 # Offset: 456
    000001ca: 	jmp	.Ltmp535 # Offset: 458
.Ltmp533:
    000001cf: 	movq	%rdx, %rax
    000001d2: 	jmp	.Ltmp541 # Offset: 466
DWARF CFI Instructions:
    <empty>
End of Function "_Z21AndBitTablesOptimizedIjEvPT_PKS0_mm"

Binary Function "_Z19AndBitTablesHalfOptIjEvPT_PKS0_mm" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0xb240
  Size        : 0x204
  MaxSize     : 0x210
  Offset      : 0xb240
  Section     : .text
  Orc Section : .local.text._Z19AndBitTablesHalfOptIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp542 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r8
    00000015: 	movq	%rdx, %rax
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rsi
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp543 # Offset: 30
    00000024: 	movl	$0x1, %r11d
    0000002a: 	testb	$0x1f, %al
    0000002c: 	jne	.Ltmp544 # Offset: 44
    0000002e: 	jmp	.Ltmp545 # Offset: 46
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp546:
    00000038: 	testb	$0x1f, %al
    0000003a: 	je	.Ltmp545 # Offset: 58
.Ltmp544:
    00000040: 	movq	%rax, %rdx
    00000043: 	movl	%eax, %ecx
    00000045: 	addq	$0x1, %rax
    00000049: 	shrq	$0x5, %rdx
    0000004d: 	leaq	(%rdi,%rdx,4), %r9
    00000051: 	movl	(%r8,%rdx,4), %ebx
    00000055: 	movl	(%r9), %r10d
    00000058: 	xorl	%r10d, %ebx
    0000005b: 	movl	%ebx, %edx
    0000005d: 	movl	%r11d, %ebx
    00000060: 	shll	%cl, %ebx
    00000062: 	andl	%ebx, %edx
    00000064: 	notl	%edx
    00000066: 	andl	%r10d, %edx
    00000069: 	movl	%edx, (%r9)
    0000006c: 	subq	$0x1, %rsi
    00000070: 	jae	.Ltmp546 # Offset: 112
    00000072: 	movq	%rax, %rcx
    00000075: 	shrq	$0x5, %rcx
.Ltmp554:
    00000079: 	leaq	(,%rcx,4), %r10
    00000081: 	leaq	-0x20(%rsi), %r11
    00000085: 	leaq	(%rdi,%r10), %r9
    00000089: 	leaq	0x4(%r8,%r10), %rbp
    0000008e: 	movq	%r9, %rbx
    00000091: 	leaq	0x1(%rcx), %rdx
    00000095: 	subq	%rbp, %rbx
    00000098: 	cmpq	$0x8, %rbx
    0000009c: 	jbe	.Ltmp547 # Offset: 156
    000000a2: 	cmpq	$0x1f, %r11
    000000a6: 	jbe	.Ltmp547 # Offset: 166
    000000ac: 	movq	%r11, %r12
    000000af: 	shrq	$0x5, %r12
    000000b3: 	leaq	0x1(%r12), %rbp
    000000b8: 	cmpq	$0x5f, %r11
    000000bc: 	jbe	.Ltmp548 # Offset: 188
    000000c2: 	movq	%rbp, %rbx
    000000c5: 	addq	%r8, %r10
    000000c8: 	xorl	%edx, %edx
    000000ca: 	shrq	$0x2, %rbx
    000000ce: 	shlq	$0x4, %rbx
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp549:
    000000d8: 	movdqu	(%r10,%rdx), %xmm0
    000000de: 	movdqu	(%r9,%rdx), %xmm2
    000000e4: 	pand	%xmm2, %xmm0
    000000e8: 	movups	%xmm0, (%r9,%rdx)
    000000ed: 	addq	$0x10, %rdx
    000000f1: 	cmpq	%rdx, %rbx
    000000f4: 	jne	.Ltmp549 # Offset: 244
    000000f6: 	movq	%rbp, %r9
    000000f9: 	andq	$-0x4, %r9
    000000fd: 	addq	%r9, %rcx
    00000100: 	movq	%rcx, %rdx
    00000103: 	cmpq	%rbp, %r9
    00000106: 	je	.Ltmp550 # Offset: 262
    00000108: 	subq	%r9, %rbp
    0000010b: 	cmpq	%r12, %r9
    0000010e: 	je	.Ltmp551 # Offset: 270
.Ltmp558:
    00000110: 	leaq	(%rdi,%rcx,4), %r9
    00000114: 	movq	(%r8,%rcx,4), %xmm0
    0000011a: 	movq	%rbp, %rcx
    0000011d: 	movq	(%r9), %xmm1
    00000122: 	andq	$-0x2, %rcx
    00000126: 	addq	%rcx, %rdx
    00000129: 	pand	%xmm1, %xmm0
    0000012d: 	movq	%xmm0, (%r9)
    00000132: 	cmpq	%rbp, %rcx
    00000135: 	je	.Ltmp550 # Offset: 309
.Ltmp551:
    00000137: 	movl	(%r8,%rdx,4), %ecx
    0000013b: 	andl	%ecx, (%rdi,%rdx,4)
.Ltmp550:
    0000013e: 	andq	$-0x20, %r11
    00000142: 	andl	$0x1f, %esi
    00000145: 	leaq	0x20(%rax,%r11), %rax
.Ltmp555:
    0000014a: 	testq	%rsi, %rsi
    0000014d: 	je	.Ltmp552 # Offset: 333
    0000014f: 	addq	%rax, %rsi
    00000152: 	movl	$0x1, %r11d
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp553:
    00000160: 	movq	%rax, %rdx
    00000163: 	movl	%eax, %ecx
    00000165: 	addq	$0x1, %rax
    00000169: 	shrq	$0x5, %rdx
    0000016d: 	leaq	(%rdi,%rdx,4), %r9
    00000171: 	movl	(%r8,%rdx,4), %ebx
    00000175: 	movl	(%r9), %r10d
    00000178: 	xorl	%r10d, %ebx
    0000017b: 	movl	%ebx, %edx
    0000017d: 	movl	%r11d, %ebx
    00000180: 	shll	%cl, %ebx
    00000182: 	andl	%ebx, %edx
    00000184: 	notl	%edx
    00000186: 	andl	%r10d, %edx
    00000189: 	movl	%edx, (%r9)
    0000018c: 	cmpq	%rsi, %rax
    0000018f: 	jne	.Ltmp553 # Offset: 399
.Ltmp552:
    00000191: 	popq	%rbx
    00000192: 	popq	%rbp
    00000193: 	popq	%r12
    00000195: 	retq # Offset: 405
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp542:
    000001a0: 	retq # Offset: 416
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp545:
    000001a8: 	movq	%rax, %rcx
    000001ab: 	shrq	$0x5, %rcx
    000001af: 	cmpq	$0x1f, %rsi
    000001b3: 	ja	.Ltmp554 # Offset: 435
    000001b9: 	jmp	.Ltmp555 # Offset: 441
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp547:
    000001c0: 	movq	%r11, %r10
    000001c3: 	shrq	$0x5, %r10
    000001c7: 	addq	%rdx, %r10
    000001ca: 	jmp	.Ltmp556 # Offset: 458
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp557:
    000001d0: 	addq	$0x1, %rdx
.Ltmp556:
    000001d4: 	movl	(%r8,%rcx,4), %r9d
    000001d8: 	andl	%r9d, (%rdi,%rcx,4)
    000001dc: 	movq	%rdx, %rcx
    000001df: 	cmpq	%rdx, %r10
    000001e2: 	jne	.Ltmp557 # Offset: 482
    000001e4: 	jmp	.Ltmp550 # Offset: 484
.Ltmp548:
    000001e9: 	movq	%rcx, %rdx
    000001ec: 	jmp	.Ltmp558 # Offset: 492
.Ltmp543:
    000001f1: 	movq	%rdx, %rcx
    000001f4: 	movq	$-0x1, %rsi
    000001fb: 	shrq	$0x5, %rcx
    000001ff: 	jmp	.Ltmp554 # Offset: 511
DWARF CFI Instructions:
    <empty>
End of Function "_Z19AndBitTablesHalfOptIjEvPT_PKS0_mm"

Binary Function "_Z17AndBitTablesShiftIjEvPT_PKS0_mm" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0xb450
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0xb450
  Section     : .text
  Orc Section : .local.text._Z17AndBitTablesShiftIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp559 # Offset: 7
    00000009: 	je	.Ltmp559 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rsi, %r10
    00000012: 	movq	%rcx, %r8
    00000015: 	movl	$0x1, %r11d
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp560:
    00000020: 	movq	%rdx, %rax
    00000023: 	movl	%r11d, %ebx
    00000026: 	shrq	$0x5, %rax
    0000002a: 	leaq	(%r9,%rax,4), %rsi
    0000002e: 	movl	(%r10,%rax,4), %ecx
    00000032: 	movl	(%rsi), %edi
    00000034: 	xorl	%edi, %ecx
    00000036: 	movl	%ecx, %eax
    00000038: 	movl	%edx, %ecx
    0000003a: 	addq	$0x1, %rdx
    0000003e: 	shll	%cl, %ebx
    00000040: 	andl	%ebx, %eax
    00000042: 	notl	%eax
    00000044: 	andl	%edi, %eax
    00000046: 	movl	%eax, (%rsi)
    00000048: 	cmpq	%rdx, %r8
    0000004b: 	jne	.Ltmp560 # Offset: 75
    0000004d: 	popq	%rbx
    0000004e: 	retq # Offset: 78
    0000004f: 	nop # Size: 1
.Ltmp559:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z17AndBitTablesShiftIjEvPT_PKS0_mm"

Binary Function "_Z12AndBitTablesIjEvPT_PKS0_mm" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0xb4b0
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0xb4b0
  Section     : .text
  Orc Section : .local.text._Z12AndBitTablesIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp561 # Offset: 7
    00000009: 	je	.Ltmp561 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rsi, %r10
    00000012: 	movq	%rcx, %r8
    00000015: 	movl	$0x1, %r11d
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp562:
    00000020: 	movq	%rdx, %rax
    00000023: 	movl	%r11d, %ebx
    00000026: 	shrq	$0x5, %rax
    0000002a: 	leaq	(%r9,%rax,4), %rsi
    0000002e: 	movl	(%r10,%rax,4), %ecx
    00000032: 	movl	(%rsi), %edi
    00000034: 	xorl	%edi, %ecx
    00000036: 	movl	%ecx, %eax
    00000038: 	movl	%edx, %ecx
    0000003a: 	addq	$0x1, %rdx
    0000003e: 	shll	%cl, %ebx
    00000040: 	andl	%ebx, %eax
    00000042: 	notl	%eax
    00000044: 	andl	%edi, %eax
    00000046: 	movl	%eax, (%rsi)
    00000048: 	cmpq	%rdx, %r8
    0000004b: 	jne	.Ltmp562 # Offset: 75
    0000004d: 	popq	%rbx
    0000004e: 	retq # Offset: 78
    0000004f: 	nop # Size: 1
.Ltmp561:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z12AndBitTablesIjEvPT_PKS0_mm"

Binary Function "_Z18OrBitTablesHalfOptIjEvPT_PKS0_mm" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0xb510
  Size        : 0x1dc
  MaxSize     : 0x1e0
  Offset      : 0xb510
  Section     : .text
  Orc Section : .local.text._Z18OrBitTablesHalfOptIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp563 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %rax
    00000015: 	movq	%rsi, %r8
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rdx
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp564 # Offset: 30
    00000024: 	movl	$0x1, %r9d
    0000002a: 	testb	$0x1f, %al
    0000002c: 	jne	.Ltmp565 # Offset: 44
    0000002e: 	jmp	.Ltmp566 # Offset: 46
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp567:
    00000038: 	testb	$0x1f, %al
    0000003a: 	je	.Ltmp566 # Offset: 58
.Ltmp565:
    00000040: 	movq	%rax, %rsi
    00000043: 	movl	%eax, %ecx
    00000045: 	movl	%r9d, %ebx
    00000048: 	addq	$0x1, %rax
    0000004c: 	shrq	$0x5, %rsi
    00000050: 	shll	%cl, %ebx
    00000052: 	movl	(%r8,%rsi,4), %ecx
    00000056: 	andl	%ebx, %ecx
    00000058: 	orl	%ecx, (%rdi,%rsi,4)
    0000005b: 	subq	$0x1, %rdx
    0000005f: 	jae	.Ltmp567 # Offset: 95
    00000061: 	movq	%rax, %rsi
    00000064: 	shrq	$0x5, %rsi
.Ltmp575:
    00000068: 	leaq	(,%rsi,4), %r10
    00000070: 	leaq	-0x20(%rdx), %r11
    00000074: 	leaq	(%rdi,%r10), %r9
    00000078: 	leaq	0x4(%r8,%r10), %rbp
    0000007d: 	movq	%r9, %rbx
    00000080: 	leaq	0x1(%rsi), %rcx
    00000084: 	subq	%rbp, %rbx
    00000087: 	cmpq	$0x8, %rbx
    0000008b: 	jbe	.Ltmp568 # Offset: 139
    00000091: 	cmpq	$0x1f, %r11
    00000095: 	jbe	.Ltmp568 # Offset: 149
    0000009b: 	movq	%r11, %r12
    0000009e: 	shrq	$0x5, %r12
    000000a2: 	leaq	0x1(%r12), %rbp
    000000a7: 	cmpq	$0x5f, %r11
    000000ab: 	jbe	.Ltmp569 # Offset: 171
    000000b1: 	movq	%rbp, %rbx
    000000b4: 	addq	%r8, %r10
    000000b7: 	xorl	%ecx, %ecx
    000000b9: 	shrq	$0x2, %rbx
    000000bd: 	shlq	$0x4, %rbx
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp570:
    000000c8: 	movdqu	(%r10,%rcx), %xmm0
    000000ce: 	movdqu	(%r9,%rcx), %xmm2
    000000d4: 	por	%xmm2, %xmm0
    000000d8: 	movups	%xmm0, (%r9,%rcx)
    000000dd: 	addq	$0x10, %rcx
    000000e1: 	cmpq	%rcx, %rbx
    000000e4: 	jne	.Ltmp570 # Offset: 228
    000000e6: 	movq	%rbp, %r9
    000000e9: 	andq	$-0x4, %r9
    000000ed: 	addq	%r9, %rsi
    000000f0: 	movq	%rsi, %rcx
    000000f3: 	cmpq	%rbp, %r9
    000000f6: 	je	.Ltmp571 # Offset: 246
    000000f8: 	subq	%r9, %rbp
    000000fb: 	cmpq	%r12, %r9
    000000fe: 	je	.Ltmp572 # Offset: 254
.Ltmp579:
    00000100: 	leaq	(%rdi,%rsi,4), %r9
    00000104: 	movq	(%r8,%rsi,4), %xmm0
    0000010a: 	movq	%rbp, %rsi
    0000010d: 	movq	(%r9), %xmm1
    00000112: 	andq	$-0x2, %rsi
    00000116: 	addq	%rsi, %rcx
    00000119: 	por	%xmm1, %xmm0
    0000011d: 	movq	%xmm0, (%r9)
    00000122: 	cmpq	%rsi, %rbp
    00000125: 	je	.Ltmp571 # Offset: 293
.Ltmp572:
    00000127: 	movl	(%r8,%rcx,4), %esi
    0000012b: 	orl	%esi, (%rdi,%rcx,4)
.Ltmp571:
    0000012e: 	andq	$-0x20, %r11
    00000132: 	andl	$0x1f, %edx
    00000135: 	leaq	0x20(%rax,%r11), %rax
.Ltmp576:
    0000013a: 	testq	%rdx, %rdx
    0000013d: 	je	.Ltmp573 # Offset: 317
    0000013f: 	addq	%rax, %rdx
    00000142: 	movl	$0x1, %r9d
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp574:
    00000150: 	movq	%rax, %rsi
    00000153: 	movl	%eax, %ecx
    00000155: 	movl	%r9d, %ebx
    00000158: 	addq	$0x1, %rax
    0000015c: 	shrq	$0x5, %rsi
    00000160: 	shll	%cl, %ebx
    00000162: 	movl	(%r8,%rsi,4), %ecx
    00000166: 	andl	%ebx, %ecx
    00000168: 	orl	%ecx, (%rdi,%rsi,4)
    0000016b: 	cmpq	%rdx, %rax
    0000016e: 	jne	.Ltmp574 # Offset: 366
.Ltmp573:
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	popq	%r12
    00000174: 	retq # Offset: 372
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp563:
    00000178: 	retq # Offset: 376
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp566:
    00000180: 	movq	%rax, %rsi
    00000183: 	shrq	$0x5, %rsi
    00000187: 	cmpq	$0x1f, %rdx
    0000018b: 	ja	.Ltmp575 # Offset: 395
    00000191: 	jmp	.Ltmp576 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp568:
    00000198: 	movq	%r11, %r10
    0000019b: 	shrq	$0x5, %r10
    0000019f: 	addq	%rcx, %r10
    000001a2: 	jmp	.Ltmp577 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp578:
    000001a8: 	addq	$0x1, %rcx
.Ltmp577:
    000001ac: 	movl	(%r8,%rsi,4), %r9d
    000001b0: 	orl	%r9d, (%rdi,%rsi,4)
    000001b4: 	movq	%rcx, %rsi
    000001b7: 	cmpq	%rcx, %r10
    000001ba: 	jne	.Ltmp578 # Offset: 442
    000001bc: 	jmp	.Ltmp571 # Offset: 444
.Ltmp569:
    000001c1: 	movq	%rsi, %rcx
    000001c4: 	jmp	.Ltmp579 # Offset: 452
.Ltmp564:
    000001c9: 	movq	%rax, %rsi
    000001cc: 	movq	$-0x1, %rdx
    000001d3: 	shrq	$0x5, %rsi
    000001d7: 	jmp	.Ltmp575 # Offset: 471
DWARF CFI Instructions:
    <empty>
End of Function "_Z18OrBitTablesHalfOptIjEvPT_PKS0_mm"

Binary Function "_Z16OrBitTablesShiftIjEvPT_PKS0_mm" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0xb6f0
  Size        : 0x3a
  MaxSize     : 0x40
  Offset      : 0xb6f0
  Section     : .text
  Orc Section : .local.text._Z16OrBitTablesShiftIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp580 # Offset: 10
    0000000c: 	je	.Ltmp580 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp581:
    00000018: 	movq	%rdx, %rax
    0000001b: 	movl	%edx, %ecx
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	shrq	$0x5, %rax
    00000028: 	shll	%cl, %r10d
    0000002b: 	movl	(%rsi,%rax,4), %ecx
    0000002e: 	andl	%r10d, %ecx
    00000031: 	orl	%ecx, (%rdi,%rax,4)
    00000034: 	cmpq	%rdx, %r8
    00000037: 	jne	.Ltmp581 # Offset: 55
.Ltmp580:
    00000039: 	retq # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z16OrBitTablesShiftIjEvPT_PKS0_mm"

Binary Function "_Z11OrBitTablesIjEvPT_PKS0_mm" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0xb730
  Size        : 0x3a
  MaxSize     : 0x40
  Offset      : 0xb730
  Section     : .text
  Orc Section : .local.text._Z11OrBitTablesIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp582 # Offset: 10
    0000000c: 	je	.Ltmp582 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp583:
    00000018: 	movq	%rdx, %rax
    0000001b: 	movl	%edx, %ecx
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	shrq	$0x5, %rax
    00000028: 	shll	%cl, %r10d
    0000002b: 	movl	(%rsi,%rax,4), %ecx
    0000002e: 	andl	%r10d, %ecx
    00000031: 	orl	%ecx, (%rdi,%rax,4)
    00000034: 	cmpq	%rdx, %r8
    00000037: 	jne	.Ltmp583 # Offset: 55
.Ltmp582:
    00000039: 	retq # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z11OrBitTablesIjEvPT_PKS0_mm"

Binary Function "_Z19XorBitTablesHalfOptIjEvPT_PKS0_mm" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0xb770
  Size        : 0x1dc
  MaxSize     : 0x1e0
  Offset      : 0xb770
  Section     : .text
  Orc Section : .local.text._Z19XorBitTablesHalfOptIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp584 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %rax
    00000015: 	movq	%rsi, %r8
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rdx
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp585 # Offset: 30
    00000024: 	movl	$0x1, %r9d
    0000002a: 	testb	$0x1f, %al
    0000002c: 	jne	.Ltmp586 # Offset: 44
    0000002e: 	jmp	.Ltmp587 # Offset: 46
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp588:
    00000038: 	testb	$0x1f, %al
    0000003a: 	je	.Ltmp587 # Offset: 58
.Ltmp586:
    00000040: 	movq	%rax, %rsi
    00000043: 	movl	%eax, %ecx
    00000045: 	movl	%r9d, %ebx
    00000048: 	addq	$0x1, %rax
    0000004c: 	shrq	$0x5, %rsi
    00000050: 	shll	%cl, %ebx
    00000052: 	movl	(%r8,%rsi,4), %ecx
    00000056: 	andl	%ebx, %ecx
    00000058: 	xorl	%ecx, (%rdi,%rsi,4)
    0000005b: 	subq	$0x1, %rdx
    0000005f: 	jae	.Ltmp588 # Offset: 95
    00000061: 	movq	%rax, %rsi
    00000064: 	shrq	$0x5, %rsi
.Ltmp596:
    00000068: 	leaq	(,%rsi,4), %r10
    00000070: 	leaq	-0x20(%rdx), %r11
    00000074: 	leaq	(%rdi,%r10), %r9
    00000078: 	leaq	0x4(%r8,%r10), %rbp
    0000007d: 	movq	%r9, %rbx
    00000080: 	leaq	0x1(%rsi), %rcx
    00000084: 	subq	%rbp, %rbx
    00000087: 	cmpq	$0x8, %rbx
    0000008b: 	jbe	.Ltmp589 # Offset: 139
    00000091: 	cmpq	$0x1f, %r11
    00000095: 	jbe	.Ltmp589 # Offset: 149
    0000009b: 	movq	%r11, %r12
    0000009e: 	shrq	$0x5, %r12
    000000a2: 	leaq	0x1(%r12), %rbp
    000000a7: 	cmpq	$0x5f, %r11
    000000ab: 	jbe	.Ltmp590 # Offset: 171
    000000b1: 	movq	%rbp, %rbx
    000000b4: 	addq	%r8, %r10
    000000b7: 	xorl	%ecx, %ecx
    000000b9: 	shrq	$0x2, %rbx
    000000bd: 	shlq	$0x4, %rbx
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp591:
    000000c8: 	movdqu	(%r10,%rcx), %xmm0
    000000ce: 	movdqu	(%r9,%rcx), %xmm2
    000000d4: 	pxor	%xmm2, %xmm0
    000000d8: 	movups	%xmm0, (%r9,%rcx)
    000000dd: 	addq	$0x10, %rcx
    000000e1: 	cmpq	%rcx, %rbx
    000000e4: 	jne	.Ltmp591 # Offset: 228
    000000e6: 	movq	%rbp, %r9
    000000e9: 	andq	$-0x4, %r9
    000000ed: 	addq	%r9, %rsi
    000000f0: 	movq	%rsi, %rcx
    000000f3: 	cmpq	%rbp, %r9
    000000f6: 	je	.Ltmp592 # Offset: 246
    000000f8: 	subq	%r9, %rbp
    000000fb: 	cmpq	%r12, %r9
    000000fe: 	je	.Ltmp593 # Offset: 254
.Ltmp600:
    00000100: 	leaq	(%rdi,%rsi,4), %r9
    00000104: 	movq	(%r8,%rsi,4), %xmm0
    0000010a: 	movq	%rbp, %rsi
    0000010d: 	movq	(%r9), %xmm1
    00000112: 	andq	$-0x2, %rsi
    00000116: 	addq	%rsi, %rcx
    00000119: 	pxor	%xmm1, %xmm0
    0000011d: 	movq	%xmm0, (%r9)
    00000122: 	cmpq	%rsi, %rbp
    00000125: 	je	.Ltmp592 # Offset: 293
.Ltmp593:
    00000127: 	movl	(%r8,%rcx,4), %esi
    0000012b: 	xorl	%esi, (%rdi,%rcx,4)
.Ltmp592:
    0000012e: 	andq	$-0x20, %r11
    00000132: 	andl	$0x1f, %edx
    00000135: 	leaq	0x20(%rax,%r11), %rax
.Ltmp597:
    0000013a: 	testq	%rdx, %rdx
    0000013d: 	je	.Ltmp594 # Offset: 317
    0000013f: 	addq	%rax, %rdx
    00000142: 	movl	$0x1, %r9d
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp595:
    00000150: 	movq	%rax, %rsi
    00000153: 	movl	%eax, %ecx
    00000155: 	movl	%r9d, %ebx
    00000158: 	addq	$0x1, %rax
    0000015c: 	shrq	$0x5, %rsi
    00000160: 	shll	%cl, %ebx
    00000162: 	movl	(%r8,%rsi,4), %ecx
    00000166: 	andl	%ebx, %ecx
    00000168: 	xorl	%ecx, (%rdi,%rsi,4)
    0000016b: 	cmpq	%rdx, %rax
    0000016e: 	jne	.Ltmp595 # Offset: 366
.Ltmp594:
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	popq	%r12
    00000174: 	retq # Offset: 372
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp584:
    00000178: 	retq # Offset: 376
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp587:
    00000180: 	movq	%rax, %rsi
    00000183: 	shrq	$0x5, %rsi
    00000187: 	cmpq	$0x1f, %rdx
    0000018b: 	ja	.Ltmp596 # Offset: 395
    00000191: 	jmp	.Ltmp597 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp589:
    00000198: 	movq	%r11, %r10
    0000019b: 	shrq	$0x5, %r10
    0000019f: 	addq	%rcx, %r10
    000001a2: 	jmp	.Ltmp598 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp599:
    000001a8: 	addq	$0x1, %rcx
.Ltmp598:
    000001ac: 	movl	(%r8,%rsi,4), %r9d
    000001b0: 	xorl	%r9d, (%rdi,%rsi,4)
    000001b4: 	movq	%rcx, %rsi
    000001b7: 	cmpq	%rcx, %r10
    000001ba: 	jne	.Ltmp599 # Offset: 442
    000001bc: 	jmp	.Ltmp592 # Offset: 444
.Ltmp590:
    000001c1: 	movq	%rsi, %rcx
    000001c4: 	jmp	.Ltmp600 # Offset: 452
.Ltmp585:
    000001c9: 	movq	%rax, %rsi
    000001cc: 	movq	$-0x1, %rdx
    000001d3: 	shrq	$0x5, %rsi
    000001d7: 	jmp	.Ltmp596 # Offset: 471
DWARF CFI Instructions:
    <empty>
End of Function "_Z19XorBitTablesHalfOptIjEvPT_PKS0_mm"

Binary Function "_Z17XorBitTablesShiftIjEvPT_PKS0_mm" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0xb950
  Size        : 0x3a
  MaxSize     : 0x40
  Offset      : 0xb950
  Section     : .text
  Orc Section : .local.text._Z17XorBitTablesShiftIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp601 # Offset: 10
    0000000c: 	je	.Ltmp601 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp602:
    00000018: 	movq	%rdx, %rax
    0000001b: 	movl	%edx, %ecx
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	shrq	$0x5, %rax
    00000028: 	shll	%cl, %r10d
    0000002b: 	movl	(%rsi,%rax,4), %ecx
    0000002e: 	andl	%r10d, %ecx
    00000031: 	xorl	%ecx, (%rdi,%rax,4)
    00000034: 	cmpq	%rdx, %r8
    00000037: 	jne	.Ltmp602 # Offset: 55
.Ltmp601:
    00000039: 	retq # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z17XorBitTablesShiftIjEvPT_PKS0_mm"

Binary Function "_Z12XorBitTablesIjEvPT_PKS0_mm" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0xb990
  Size        : 0x3a
  MaxSize     : 0x40
  Offset      : 0xb990
  Section     : .text
  Orc Section : .local.text._Z12XorBitTablesIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp603 # Offset: 10
    0000000c: 	je	.Ltmp603 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp604:
    00000018: 	movq	%rdx, %rax
    0000001b: 	movl	%edx, %ecx
    0000001d: 	movl	%r9d, %r10d
    00000020: 	addq	$0x1, %rdx
    00000024: 	shrq	$0x5, %rax
    00000028: 	shll	%cl, %r10d
    0000002b: 	movl	(%rsi,%rax,4), %ecx
    0000002e: 	andl	%r10d, %ecx
    00000031: 	xorl	%ecx, (%rdi,%rax,4)
    00000034: 	cmpq	%rdx, %r8
    00000037: 	jne	.Ltmp604 # Offset: 55
.Ltmp603:
    00000039: 	retq # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z12XorBitTablesIjEvPT_PKS0_mm"

Binary Function "_Z29AndComplimentBitTablesHalfOptIjEvPT_PKS0_mm" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0xb9d0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0xb9d0
  Section     : .text
  Orc Section : .local.text._Z29AndComplimentBitTablesHalfOptIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp605 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r8
    00000015: 	movq	%rdx, %rax
    00000018: 	pushq	%rbp
    00000019: 	leaq	-0x1(%rcx), %rsi
    0000001d: 	pushq	%rbx
    0000001e: 	je	.Ltmp606 # Offset: 30
    00000024: 	movl	$0x1, %ebx
    00000029: 	testb	$0x1f, %al
    0000002b: 	jne	.Ltmp607 # Offset: 43
    0000002d: 	jmp	.Ltmp608 # Offset: 45
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp609:
    00000038: 	testb	$0x1f, %al
    0000003a: 	je	.Ltmp608 # Offset: 58
.Ltmp607:
    00000040: 	movq	%rax, %r11
    00000043: 	movl	%eax, %ecx
    00000045: 	movl	%ebx, %edx
    00000047: 	addq	$0x1, %rax
    0000004b: 	shrq	$0x5, %r11
    0000004f: 	shll	%cl, %edx
    00000051: 	leaq	(%rdi,%r11,4), %r9
    00000055: 	movl	(%r8,%r11,4), %ecx
    00000059: 	notl	%edx
    0000005b: 	movl	(%r9), %r10d
    0000005e: 	xorl	%r10d, %ecx
    00000061: 	orl	%ecx, %edx
    00000063: 	andl	%r10d, %edx
    00000066: 	movl	%edx, (%r9)
    00000069: 	subq	$0x1, %rsi
    0000006d: 	jae	.Ltmp609 # Offset: 109
    0000006f: 	movq	%rax, %rcx
    00000072: 	shrq	$0x5, %rcx
.Ltmp617:
    00000076: 	leaq	(,%rcx,4), %r10
    0000007e: 	leaq	-0x20(%rsi), %r11
    00000082: 	leaq	(%rdi,%r10), %r9
    00000086: 	leaq	0x4(%r8,%r10), %rbp
    0000008b: 	movq	%r9, %rbx
    0000008e: 	leaq	0x1(%rcx), %rdx
    00000092: 	subq	%rbp, %rbx
    00000095: 	cmpq	$0x8, %rbx
    00000099: 	jbe	.Ltmp610 # Offset: 153
    0000009f: 	cmpq	$0x1f, %r11
    000000a3: 	jbe	.Ltmp610 # Offset: 163
    000000a9: 	movq	%r11, %r12
    000000ac: 	shrq	$0x5, %r12
    000000b0: 	leaq	0x1(%r12), %rbp
    000000b5: 	cmpq	$0x5f, %r11
    000000b9: 	jbe	.Ltmp611 # Offset: 185
    000000bf: 	movq	%rbp, %rbx
    000000c2: 	addq	%r8, %r10
    000000c5: 	xorl	%edx, %edx
    000000c7: 	shrq	$0x2, %rbx
    000000cb: 	shlq	$0x4, %rbx
    000000cf: 	nop # Size: 1
.Ltmp612:
    000000d0: 	movdqu	(%r10,%rdx), %xmm0
    000000d6: 	movdqu	(%r9,%rdx), %xmm2
    000000dc: 	pandn	%xmm2, %xmm0
    000000e0: 	movups	%xmm0, (%r9,%rdx)
    000000e5: 	addq	$0x10, %rdx
    000000e9: 	cmpq	%rdx, %rbx
    000000ec: 	jne	.Ltmp612 # Offset: 236
    000000ee: 	movq	%rbp, %r9
    000000f1: 	andq	$-0x4, %r9
    000000f5: 	leaq	(%rcx,%r9), %rdx
    000000f9: 	movq	%rdx, %rcx
    000000fc: 	cmpq	%rbp, %r9
    000000ff: 	je	.Ltmp613 # Offset: 255
    00000101: 	subq	%r9, %rbp
    00000104: 	cmpq	%r12, %r9
    00000107: 	je	.Ltmp614 # Offset: 263
.Ltmp621:
    00000109: 	leaq	(%rdi,%rdx,4), %r9
    0000010d: 	movq	(%r8,%rdx,4), %xmm0
    00000113: 	movq	%rbp, %rdx
    00000116: 	movq	(%r9), %xmm1
    0000011b: 	andq	$-0x2, %rdx
    0000011f: 	addq	%rdx, %rcx
    00000122: 	pandn	%xmm1, %xmm0
    00000126: 	movq	%xmm0, (%r9)
    0000012b: 	cmpq	%rbp, %rdx
    0000012e: 	je	.Ltmp613 # Offset: 302
.Ltmp614:
    00000130: 	movl	(%r8,%rcx,4), %edx
    00000134: 	notl	%edx
    00000136: 	andl	%edx, (%rdi,%rcx,4)
.Ltmp613:
    00000139: 	andq	$-0x20, %r11
    0000013d: 	andl	$0x1f, %esi
    00000140: 	leaq	0x20(%rax,%r11), %rax
.Ltmp618:
    00000145: 	testq	%rsi, %rsi
    00000148: 	je	.Ltmp615 # Offset: 328
    0000014a: 	addq	%rax, %rsi
    0000014d: 	movl	$0x1, %ebx
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp616:
    00000158: 	movq	%rax, %r11
    0000015b: 	movl	%eax, %ecx
    0000015d: 	movl	%ebx, %edx
    0000015f: 	addq	$0x1, %rax
    00000163: 	shrq	$0x5, %r11
    00000167: 	shll	%cl, %edx
    00000169: 	leaq	(%rdi,%r11,4), %r9
    0000016d: 	movl	(%r8,%r11,4), %ecx
    00000171: 	notl	%edx
    00000173: 	movl	(%r9), %r10d
    00000176: 	xorl	%r10d, %ecx
    00000179: 	orl	%ecx, %edx
    0000017b: 	andl	%r10d, %edx
    0000017e: 	movl	%edx, (%r9)
    00000181: 	cmpq	%rsi, %rax
    00000184: 	jne	.Ltmp616 # Offset: 388
.Ltmp615:
    00000186: 	popq	%rbx
    00000187: 	popq	%rbp
    00000188: 	popq	%r12
    0000018a: 	retq # Offset: 394
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp605:
    00000190: 	retq # Offset: 400
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp608:
    00000198: 	movq	%rax, %rcx
    0000019b: 	shrq	$0x5, %rcx
    0000019f: 	cmpq	$0x1f, %rsi
    000001a3: 	ja	.Ltmp617 # Offset: 419
    000001a9: 	jmp	.Ltmp618 # Offset: 425
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp610:
    000001b0: 	movq	%r11, %r10
    000001b3: 	shrq	$0x5, %r10
    000001b7: 	addq	%rdx, %r10
    000001ba: 	jmp	.Ltmp619 # Offset: 442
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp620:
    000001c0: 	addq	$0x1, %rdx
.Ltmp619:
    000001c4: 	movl	(%r8,%rcx,4), %r9d
    000001c8: 	notl	%r9d
    000001cb: 	andl	%r9d, (%rdi,%rcx,4)
    000001cf: 	movq	%rdx, %rcx
    000001d2: 	cmpq	%rdx, %r10
    000001d5: 	jne	.Ltmp620 # Offset: 469
    000001d7: 	jmp	.Ltmp613 # Offset: 471
.Ltmp611:
    000001dc: 	movq	%rcx, %rdx
    000001df: 	jmp	.Ltmp621 # Offset: 479
.Ltmp606:
    000001e4: 	movq	%rdx, %rcx
    000001e7: 	movq	$-0x1, %rsi
    000001ee: 	shrq	$0x5, %rcx
    000001f2: 	jmp	.Ltmp617 # Offset: 498
DWARF CFI Instructions:
    <empty>
End of Function "_Z29AndComplimentBitTablesHalfOptIjEvPT_PKS0_mm"

Binary Function "_Z27AndComplimentBitTablesShiftIjEvPT_PKS0_mm" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0xbbd0
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0xbbd0
  Section     : .text
  Orc Section : .local.text._Z27AndComplimentBitTablesShiftIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp622 # Offset: 7
    00000009: 	je	.Ltmp622 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %r11
    00000012: 	movq	%rcx, %r9
    00000015: 	movl	$0x1, %ebx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp623:
    00000020: 	movq	%rdx, %r8
    00000023: 	movl	%edx, %ecx
    00000025: 	movl	%ebx, %eax
    00000027: 	addq	$0x1, %rdx
    0000002b: 	shrq	$0x5, %r8
    0000002f: 	shll	%cl, %eax
    00000031: 	leaq	(%r10,%r8,4), %rsi
    00000035: 	movl	(%r11,%r8,4), %ecx
    00000039: 	notl	%eax
    0000003b: 	movl	(%rsi), %edi
    0000003d: 	xorl	%edi, %ecx
    0000003f: 	orl	%ecx, %eax
    00000041: 	andl	%edi, %eax
    00000043: 	movl	%eax, (%rsi)
    00000045: 	cmpq	%rdx, %r9
    00000048: 	jne	.Ltmp623 # Offset: 72
    0000004a: 	popq	%rbx
    0000004b: 	retq # Offset: 75
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp622:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z27AndComplimentBitTablesShiftIjEvPT_PKS0_mm"

Binary Function "_Z22AndComplimentBitTablesIjEvPT_PKS0_mm" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0xbc30
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0xbc30
  Section     : .text
  Orc Section : .local.text._Z22AndComplimentBitTablesIjEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp624 # Offset: 7
    00000009: 	je	.Ltmp624 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %r11
    00000012: 	movq	%rcx, %r9
    00000015: 	movl	$0x1, %ebx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp625:
    00000020: 	movq	%rdx, %r8
    00000023: 	movl	%edx, %ecx
    00000025: 	movl	%ebx, %eax
    00000027: 	addq	$0x1, %rdx
    0000002b: 	shrq	$0x5, %r8
    0000002f: 	shll	%cl, %eax
    00000031: 	leaq	(%r10,%r8,4), %rsi
    00000035: 	movl	(%r11,%r8,4), %ecx
    00000039: 	notl	%eax
    0000003b: 	movl	(%rsi), %edi
    0000003d: 	xorl	%edi, %ecx
    0000003f: 	orl	%ecx, %eax
    00000041: 	andl	%edi, %eax
    00000043: 	movl	%eax, (%rsi)
    00000045: 	cmpq	%rdx, %r9
    00000048: 	jne	.Ltmp625 # Offset: 72
    0000004a: 	popq	%rbx
    0000004b: 	retq # Offset: 75
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp624:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z22AndComplimentBitTablesIjEvPT_PKS0_mm"

Binary Function "_Z23StencilBitTablesHalfOptIjEvPT_PKS0_S3_mm" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0xbc90
  Size        : 0x228
  MaxSize     : 0x230
  Offset      : 0xbc90
  Section     : .text
  Orc Section : .local.text._Z23StencilBitTablesHalfOptIjEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	cmpq	%rcx, %r8
    00000007: 	jb	.Ltmp626 # Offset: 7
    0000000d: 	subq	%rcx, %r8
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r9
    00000015: 	movq	%rdx, %r10
    00000018: 	pushq	%r13
    0000001a: 	leaq	-0x1(%r8), %rsi
    0000001e: 	pushq	%r12
    00000020: 	pushq	%rbp
    00000021: 	pushq	%rbx
    00000022: 	je	.Ltmp627 # Offset: 34
    00000028: 	movl	$0x1, %r11d
    0000002e: 	testb	$0x1f, %cl
    00000031: 	jne	.Ltmp628 # Offset: 49
    00000033: 	jmp	.Ltmp629 # Offset: 51
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp630:
    00000040: 	testb	$0x1f, %cl
    00000043: 	je	.Ltmp629 # Offset: 67
.Ltmp628:
    00000049: 	movq	%rcx, %rdx
    0000004c: 	movl	%r11d, %r8d
    0000004f: 	shrq	$0x5, %rdx
    00000053: 	shll	%cl, %r8d
    00000056: 	addq	$0x1, %rcx
    0000005a: 	movl	(%r9,%rdx,4), %eax
    0000005e: 	andl	(%r10,%rdx,4), %eax
    00000062: 	andl	%r8d, %eax
    00000065: 	orl	%eax, (%rdi,%rdx,4)
    00000068: 	subq	$0x1, %rsi
    0000006c: 	jae	.Ltmp630 # Offset: 108
    0000006e: 	movq	%rcx, %rdx
    00000071: 	shrq	$0x5, %rdx
.Ltmp638:
    00000075: 	leaq	(,%rdx,4), %r11
    0000007d: 	leaq	-0x20(%rsi), %rbx
    00000081: 	leaq	(%rdi,%r11), %r8
    00000085: 	leaq	0x4(%r11), %rbp
    00000089: 	leaq	(%r10,%rbp), %r13
    0000008d: 	movq	%r8, %r12
    00000090: 	leaq	0x1(%rdx), %rax
    00000094: 	subq	%r13, %r12
    00000097: 	movq	%r8, %r13
    0000009a: 	cmpq	$0x8, %r12
    0000009e: 	seta	%r12b
    000000a2: 	addq	%r9, %rbp
    000000a5: 	subq	%rbp, %r13
    000000a8: 	cmpq	$0x8, %r13
    000000ac: 	seta	%bpl
    000000b0: 	testb	%bpl, %r12b
    000000b3: 	je	.Ltmp631 # Offset: 179
    000000b9: 	cmpq	$0x1f, %rbx
    000000bd: 	jbe	.Ltmp631 # Offset: 189
    000000c3: 	movq	%rbx, %r13
    000000c6: 	shrq	$0x5, %r13
    000000ca: 	leaq	0x1(%r13), %rbp
    000000ce: 	cmpq	$0x5f, %rbx
    000000d2: 	jbe	.Ltmp632 # Offset: 210
    000000d8: 	movq	%rbp, %r12
    000000db: 	leaq	(%r9,%r11), %r14
    000000df: 	xorl	%eax, %eax
    000000e1: 	addq	%r10, %r11
    000000e4: 	shrq	$0x2, %r12
    000000e8: 	shlq	$0x4, %r12
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp633:
    000000f0: 	movdqu	(%r11,%rax), %xmm0
    000000f6: 	movdqu	(%r14,%rax), %xmm2
    000000fc: 	movdqu	(%r8,%rax), %xmm3
    00000102: 	pand	%xmm2, %xmm0
    00000106: 	por	%xmm3, %xmm0
    0000010a: 	movups	%xmm0, (%r8,%rax)
    0000010f: 	addq	$0x10, %rax
    00000113: 	cmpq	%rax, %r12
    00000116: 	jne	.Ltmp633 # Offset: 278
    00000118: 	movq	%rbp, %r8
    0000011b: 	andq	$-0x4, %r8
    0000011f: 	addq	%r8, %rdx
    00000122: 	movq	%rdx, %rax
    00000125: 	cmpq	%rbp, %r8
    00000128: 	je	.Ltmp634 # Offset: 296
    0000012a: 	subq	%r8, %rbp
    0000012d: 	cmpq	%r13, %r8
    00000130: 	je	.Ltmp635 # Offset: 304
.Ltmp642:
    00000132: 	movq	(%r10,%rdx,4), %xmm1
    00000138: 	movq	(%r9,%rdx,4), %xmm0
    0000013e: 	leaq	(%rdi,%rdx,4), %r8
    00000142: 	movq	%rbp, %rdx
    00000145: 	andq	$-0x2, %rdx
    00000149: 	pand	%xmm1, %xmm0
    0000014d: 	movq	(%r8), %xmm1
    00000152: 	addq	%rdx, %rax
    00000155: 	por	%xmm1, %xmm0
    00000159: 	movq	%xmm0, (%r8)
    0000015e: 	cmpq	%rdx, %rbp
    00000161: 	je	.Ltmp634 # Offset: 353
.Ltmp635:
    00000163: 	movl	(%r10,%rax,4), %edx
    00000167: 	andl	(%r9,%rax,4), %edx
    0000016b: 	orl	%edx, (%rdi,%rax,4)
.Ltmp634:
    0000016e: 	andq	$-0x20, %rbx
    00000172: 	andl	$0x1f, %esi
    00000175: 	leaq	0x20(%rcx,%rbx), %rcx
.Ltmp639:
    0000017a: 	testq	%rsi, %rsi
    0000017d: 	je	.Ltmp636 # Offset: 381
    0000017f: 	addq	%rcx, %rsi
    00000182: 	movl	$0x1, %r11d
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp637:
    00000190: 	movq	%rcx, %rdx
    00000193: 	movl	%r11d, %r8d
    00000196: 	shrq	$0x5, %rdx
    0000019a: 	shll	%cl, %r8d
    0000019d: 	addq	$0x1, %rcx
    000001a1: 	movl	(%r9,%rdx,4), %eax
    000001a5: 	andl	(%r10,%rdx,4), %eax
    000001a9: 	andl	%r8d, %eax
    000001ac: 	orl	%eax, (%rdi,%rdx,4)
    000001af: 	cmpq	%rsi, %rcx
    000001b2: 	jne	.Ltmp637 # Offset: 434
.Ltmp636:
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	popq	%r12
    000001b8: 	popq	%r13
    000001ba: 	popq	%r14
    000001bc: 	retq # Offset: 444
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp626:
    000001c0: 	retq # Offset: 448
    000001c1: 	nopl	(%rax) # Size: 7
.Ltmp629:
    000001c8: 	movq	%rcx, %rdx
    000001cb: 	shrq	$0x5, %rdx
    000001cf: 	cmpq	$0x1f, %rsi
    000001d3: 	ja	.Ltmp638 # Offset: 467
    000001d9: 	jmp	.Ltmp639 # Offset: 473
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp631:
    000001e0: 	movq	%rbx, %r11
    000001e3: 	shrq	$0x5, %r11
    000001e7: 	addq	%rax, %r11
    000001ea: 	jmp	.Ltmp640 # Offset: 490
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp641:
    000001f0: 	addq	$0x1, %rax
.Ltmp640:
    000001f4: 	movl	(%r10,%rdx,4), %r8d
    000001f8: 	andl	(%r9,%rdx,4), %r8d
    000001fc: 	orl	%r8d, (%rdi,%rdx,4)
    00000200: 	movq	%rax, %rdx
    00000203: 	cmpq	%rax, %r11
    00000206: 	jne	.Ltmp641 # Offset: 518
    00000208: 	jmp	.Ltmp634 # Offset: 520
.Ltmp632:
    0000020d: 	movq	%rdx, %rax
    00000210: 	jmp	.Ltmp642 # Offset: 528
.Ltmp627:
    00000215: 	movq	%rcx, %rdx
    00000218: 	movq	$-0x1, %rsi
    0000021f: 	shrq	$0x5, %rdx
    00000223: 	jmp	.Ltmp638 # Offset: 547
DWARF CFI Instructions:
    <empty>
End of Function "_Z23StencilBitTablesHalfOptIjEvPT_PKS0_S3_mm"

Binary Function "_Z21StencilBitTablesShiftIjEvPT_PKS0_S3_mm" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0xbec0
  Size        : 0x38
  MaxSize     : 0x40
  Offset      : 0xbec0
  Section     : .text
  Orc Section : .local.text._Z21StencilBitTablesShiftIjEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	cmpq	%rcx, %r8
    0000000a: 	jb	.Ltmp643 # Offset: 10
    0000000c: 	je	.Ltmp643 # Offset: 12
    0000000e: 	movl	$0x1, %r10d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp644:
    00000018: 	movq	%rcx, %rsi
    0000001b: 	movl	%r10d, %eax
    0000001e: 	shrq	$0x5, %rsi
    00000022: 	shll	%cl, %eax
    00000024: 	addq	$0x1, %rcx
    00000028: 	andl	(%r9,%rsi,4), %eax
    0000002c: 	andl	(%rdx,%rsi,4), %eax
    0000002f: 	orl	%eax, (%rdi,%rsi,4)
    00000032: 	cmpq	%rcx, %r8
    00000035: 	jne	.Ltmp644 # Offset: 53
.Ltmp643:
    00000037: 	retq # Offset: 55
DWARF CFI Instructions:
    <empty>
End of Function "_Z21StencilBitTablesShiftIjEvPT_PKS0_S3_mm"

Binary Function "_Z16StencilBitTablesIjEvPT_PKS0_S3_mm" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0xbf00
  Size        : 0x3c
  MaxSize     : 0x40
  Offset      : 0xbf00
  Section     : .text
  Orc Section : .local.text._Z16StencilBitTablesIjEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r10
    00000007: 	cmpq	%rcx, %r8
    0000000a: 	jb	.Ltmp645 # Offset: 10
    0000000c: 	je	.Ltmp645 # Offset: 12
    0000000e: 	movl	$0x1, %r11d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp646:
    00000018: 	movq	%rcx, %rsi
    0000001b: 	movl	%r11d, %r9d
    0000001e: 	shrq	$0x5, %rsi
    00000022: 	shll	%cl, %r9d
    00000025: 	addq	$0x1, %rcx
    00000029: 	movl	(%r10,%rsi,4), %eax
    0000002d: 	andl	(%rdx,%rsi,4), %eax
    00000030: 	andl	%r9d, %eax
    00000033: 	orl	%eax, (%rdi,%rsi,4)
    00000036: 	cmpq	%rcx, %r8
    00000039: 	jne	.Ltmp646 # Offset: 57
.Ltmp645:
    0000003b: 	retq # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z16StencilBitTablesIjEvPT_PKS0_S3_mm"

Binary Function "_Z17CountBitsByteLoopIjEmPT_mm" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0xbf40
  Size        : 0x798
  MaxSize     : 0x7a0
  Offset      : 0xbf40
  Section     : .text
  Orc Section : .local.text._Z17CountBitsByteLoopIjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp647 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rdx, %rdi
    00000012: 	subq	%rsi, %rdi
    00000015: 	je	.Ltmp647 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp648 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp649 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp650:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp648 # Offset: 52
.Ltmp649:
    00000036: 	movq	%rsi, %rdx
    00000039: 	movl	%esi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x5, %rdx
    00000042: 	shll	%cl, %eax
    00000044: 	andl	(%r9,%rdx,4), %eax
    00000048: 	cmpl	$0x1, %eax
    0000004b: 	sbbq	$-0x1, %r8
    0000004f: 	addq	$0x1, %rsi
    00000053: 	subq	$0x1, %rdi
    00000057: 	jne	.Ltmp650 # Offset: 87
.Ltmp647:
    00000059: 	movq	%r8, %rax
    0000005c: 	retq # Offset: 92
.Ltmp648:
    0000005d: 	movq	%rsi, %r10
    00000060: 	pushq	%rbx
    00000061: 	shrq	$0x3, %r10
    00000065: 	cmpq	$0x7, %rdi
    00000069: 	jbe	.Ltmp651 # Offset: 105
    0000006f: 	leaq	-0x8(%rdi), %r11
    00000073: 	movq	%r11, %rcx
    00000076: 	shrq	$0x3, %rcx
    0000007a: 	addq	$0x1, %rcx
    0000007e: 	cmpq	$0x77, %r11
    00000082: 	jbe	.Ltmp652 # Offset: 130
    00000088: 	leaq	(%r9,%r10), %rax
    0000008c: 	pxor	%xmm9, %xmm9
    00000091: 	pxor	%xmm3, %xmm3
    00000095: 	movq	%rcx, %rdx
    00000098: 	shrq	$0x4, %rdx
    0000009c: 	pxor	%xmm1, %xmm1
    000000a0: 	movdqa	DATAat0x165d0(%rip), %xmm8
    000000a9: 	movdqa	DATAat0x165e0(%rip), %xmm11
    000000b2: 	shlq	$0x4, %rdx
    000000b6: 	pxor	%xmm0, %xmm0
    000000ba: 	movdqa	DATAat0x165f0(%rip), %xmm10
    000000c3: 	addq	%rax, %rdx
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp653:
    000000d0: 	movdqu	(%rax), %xmm4
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm4, %xmm6
    000000dc: 	pand	%xmm8, %xmm6
    000000e1: 	pcmpeqb	%xmm3, %xmm6
    000000e5: 	pandn	%xmm8, %xmm6
    000000ea: 	movdqa	%xmm6, %xmm2
    000000ee: 	punpckhbw	%xmm3, %xmm6
    000000f2: 	punpcklbw	%xmm3, %xmm2
    000000f6: 	movdqa	%xmm6, %xmm5
    000000fa: 	punpckhwd	%xmm1, %xmm6
    000000fe: 	movdqa	%xmm2, %xmm7
    00000102: 	punpckhwd	%xmm1, %xmm2
    00000106: 	punpcklwd	%xmm1, %xmm5
    0000010a: 	punpcklwd	%xmm1, %xmm7
    0000010e: 	movdqa	%xmm7, %xmm13
    00000113: 	movdqa	%xmm7, %xmm12
    00000118: 	movdqa	%xmm2, %xmm7
    0000011c: 	punpckldq	%xmm0, %xmm13
    00000121: 	punpckldq	%xmm0, %xmm7
    00000125: 	punpckhdq	%xmm0, %xmm12
    0000012a: 	punpckhdq	%xmm0, %xmm2
    0000012e: 	paddq	%xmm13, %xmm12
    00000133: 	paddq	%xmm7, %xmm2
    00000137: 	paddq	%xmm2, %xmm12
    0000013c: 	movdqa	%xmm5, %xmm2
    00000140: 	punpckhdq	%xmm0, %xmm5
    00000144: 	punpckldq	%xmm0, %xmm2
    00000148: 	paddq	%xmm2, %xmm5
    0000014c: 	movdqa	%xmm6, %xmm2
    00000150: 	punpckhdq	%xmm0, %xmm6
    00000154: 	punpckldq	%xmm0, %xmm2
    00000158: 	paddq	%xmm2, %xmm5
    0000015c: 	movdqa	%xmm4, %xmm2
    00000160: 	pand	%xmm11, %xmm2
    00000165: 	paddq	%xmm5, %xmm12
    0000016a: 	pcmpeqb	%xmm3, %xmm2
    0000016e: 	pandn	%xmm8, %xmm2
    00000173: 	movdqa	%xmm2, %xmm5
    00000177: 	punpckhbw	%xmm3, %xmm2
    0000017b: 	punpcklbw	%xmm3, %xmm5
    0000017f: 	movdqa	%xmm2, %xmm13
    00000184: 	punpckhwd	%xmm1, %xmm2
    00000188: 	movdqa	%xmm5, %xmm14
    0000018d: 	punpckhwd	%xmm1, %xmm5
    00000191: 	punpcklwd	%xmm1, %xmm13
    00000196: 	punpcklwd	%xmm1, %xmm14
    0000019b: 	movdqa	%xmm14, %xmm7
    000001a0: 	punpckhdq	%xmm0, %xmm14
    000001a5: 	punpckldq	%xmm0, %xmm7
    000001a9: 	paddq	%xmm6, %xmm7
    000001ad: 	movdqa	%xmm5, %xmm6
    000001b1: 	punpckhdq	%xmm0, %xmm5
    000001b5: 	punpckldq	%xmm0, %xmm6
    000001b9: 	paddq	%xmm14, %xmm7
    000001be: 	paddq	%xmm6, %xmm5
    000001c2: 	movdqa	%xmm13, %xmm6
    000001c7: 	paddq	%xmm12, %xmm7
    000001cc: 	punpckldq	%xmm0, %xmm6
    000001d0: 	punpckhdq	%xmm0, %xmm13
    000001d5: 	paddq	%xmm6, %xmm5
    000001d9: 	paddq	%xmm5, %xmm7
    000001dd: 	movdqa	%xmm2, %xmm5
    000001e1: 	punpckhdq	%xmm0, %xmm2
    000001e5: 	punpckldq	%xmm0, %xmm5
    000001e9: 	paddq	%xmm5, %xmm13
    000001ee: 	paddq	%xmm13, %xmm2
    000001f3: 	paddq	%xmm2, %xmm7
    000001f7: 	movdqa	%xmm4, %xmm2
    000001fb: 	pand	%xmm10, %xmm2
    00000200: 	pcmpeqb	%xmm3, %xmm2
    00000204: 	pandn	%xmm8, %xmm2
    00000209: 	movdqa	%xmm2, %xmm12
    0000020e: 	punpckhbw	%xmm3, %xmm2
    00000212: 	punpcklbw	%xmm3, %xmm12
    00000217: 	movdqa	%xmm2, %xmm13
    0000021c: 	punpckhwd	%xmm1, %xmm2
    00000220: 	movdqa	%xmm12, %xmm5
    00000225: 	punpckhwd	%xmm1, %xmm12
    0000022a: 	punpcklwd	%xmm1, %xmm13
    0000022f: 	punpcklwd	%xmm1, %xmm5
    00000233: 	movdqa	%xmm5, %xmm14
    00000238: 	movdqa	%xmm5, %xmm6
    0000023c: 	movdqa	%xmm12, %xmm5
    00000241: 	punpckldq	%xmm0, %xmm14
    00000246: 	punpckhdq	%xmm0, %xmm6
    0000024a: 	punpckldq	%xmm0, %xmm5
    0000024e: 	paddq	%xmm14, %xmm6
    00000253: 	punpckhdq	%xmm0, %xmm12
    00000258: 	paddq	%xmm5, %xmm6
    0000025c: 	movdqa	%xmm13, %xmm5
    00000261: 	punpckhdq	%xmm0, %xmm13
    00000266: 	punpckldq	%xmm0, %xmm5
    0000026a: 	paddq	%xmm7, %xmm6
    0000026e: 	paddq	%xmm5, %xmm12
    00000273: 	movdqa	%xmm2, %xmm5
    00000277: 	paddq	%xmm12, %xmm13
    0000027c: 	movdqa	%xmm2, %xmm12
    00000281: 	punpckldq	%xmm0, %xmm5
    00000285: 	punpckhdq	%xmm0, %xmm12
    0000028a: 	paddq	%xmm13, %xmm6
    0000028f: 	paddq	%xmm5, %xmm12
    00000294: 	movdqa	DATAat0x16600(%rip), %xmm5
    0000029c: 	pand	%xmm4, %xmm5
    000002a0: 	pcmpeqb	%xmm3, %xmm5
    000002a4: 	pandn	%xmm8, %xmm5
    000002a9: 	movdqa	%xmm5, %xmm14
    000002ae: 	punpckhbw	%xmm3, %xmm5
    000002b2: 	punpcklbw	%xmm3, %xmm14
    000002b7: 	movdqa	%xmm5, %xmm2
    000002bb: 	punpckhwd	%xmm1, %xmm5
    000002bf: 	movdqa	%xmm14, %xmm13
    000002c4: 	punpckhwd	%xmm1, %xmm14
    000002c9: 	punpcklwd	%xmm1, %xmm2
    000002cd: 	punpcklwd	%xmm1, %xmm13
    000002d2: 	movdqa	%xmm14, %xmm7
    000002d7: 	punpckhdq	%xmm0, %xmm14
    000002dc: 	movdqa	%xmm13, %xmm15
    000002e1: 	punpckldq	%xmm0, %xmm7
    000002e5: 	punpckldq	%xmm0, %xmm13
    000002ea: 	punpckhdq	%xmm0, %xmm15
    000002ef: 	paddq	%xmm13, %xmm12
    000002f4: 	paddq	%xmm15, %xmm7
    000002f9: 	paddq	%xmm12, %xmm6
    000002fe: 	paddq	%xmm14, %xmm7
    00000303: 	paddq	%xmm6, %xmm7
    00000307: 	movdqa	%xmm2, %xmm6
    0000030b: 	punpckhdq	%xmm0, %xmm2
    0000030f: 	punpckldq	%xmm0, %xmm6
    00000313: 	paddq	%xmm6, %xmm2
    00000317: 	movdqa	%xmm5, %xmm6
    0000031b: 	punpckhdq	%xmm0, %xmm5
    0000031f: 	punpckldq	%xmm0, %xmm6
    00000323: 	paddq	%xmm6, %xmm2
    00000327: 	paddq	%xmm2, %xmm7
    0000032b: 	movdqa	DATAat0x16610(%rip), %xmm2
    00000333: 	pand	%xmm4, %xmm2
    00000337: 	pcmpeqb	%xmm3, %xmm2
    0000033b: 	pandn	%xmm8, %xmm2
    00000340: 	movdqa	%xmm2, %xmm13
    00000345: 	punpckhbw	%xmm3, %xmm2
    00000349: 	punpcklbw	%xmm3, %xmm13
    0000034e: 	movdqa	%xmm2, %xmm12
    00000353: 	punpckhwd	%xmm1, %xmm2
    00000357: 	movdqa	%xmm13, %xmm14
    0000035c: 	punpckhwd	%xmm1, %xmm13
    00000361: 	punpcklwd	%xmm1, %xmm12
    00000366: 	punpcklwd	%xmm1, %xmm14
    0000036b: 	movdqa	%xmm14, %xmm6
    00000370: 	punpckhdq	%xmm0, %xmm14
    00000375: 	punpckldq	%xmm0, %xmm6
    00000379: 	paddq	%xmm5, %xmm6
    0000037d: 	movdqa	%xmm13, %xmm5
    00000382: 	paddq	%xmm14, %xmm6
    00000387: 	punpckhdq	%xmm0, %xmm5
    0000038b: 	paddq	%xmm7, %xmm6
    0000038f: 	movdqa	%xmm13, %xmm7
    00000394: 	punpckldq	%xmm0, %xmm7
    00000398: 	paddq	%xmm7, %xmm5
    0000039c: 	movdqa	%xmm12, %xmm7
    000003a1: 	punpckhdq	%xmm0, %xmm12
    000003a6: 	punpckldq	%xmm0, %xmm7
    000003aa: 	paddq	%xmm7, %xmm5
    000003ae: 	paddq	%xmm5, %xmm6
    000003b2: 	movdqa	%xmm2, %xmm5
    000003b6: 	punpckhdq	%xmm0, %xmm2
    000003ba: 	punpckldq	%xmm0, %xmm5
    000003be: 	paddq	%xmm5, %xmm12
    000003c3: 	paddq	%xmm12, %xmm2
    000003c8: 	paddq	%xmm2, %xmm6
    000003cc: 	movdqa	DATAat0x16620(%rip), %xmm2
    000003d4: 	pand	%xmm4, %xmm2
    000003d8: 	pcmpeqb	%xmm3, %xmm2
    000003dc: 	pandn	%xmm8, %xmm2
    000003e1: 	movdqa	%xmm2, %xmm12
    000003e6: 	punpckhbw	%xmm3, %xmm2
    000003ea: 	punpcklbw	%xmm3, %xmm12
    000003ef: 	movdqa	%xmm2, %xmm13
    000003f4: 	punpckhwd	%xmm1, %xmm2
    000003f8: 	movdqa	%xmm12, %xmm5
    000003fd: 	punpckhwd	%xmm1, %xmm12
    00000402: 	punpcklwd	%xmm1, %xmm13
    00000407: 	punpcklwd	%xmm1, %xmm5
    0000040b: 	movdqa	%xmm5, %xmm14
    00000410: 	movdqa	%xmm5, %xmm7
    00000414: 	movdqa	%xmm12, %xmm5
    00000419: 	punpckldq	%xmm0, %xmm14
    0000041e: 	punpckhdq	%xmm0, %xmm7
    00000422: 	punpckldq	%xmm0, %xmm5
    00000426: 	paddq	%xmm14, %xmm7
    0000042b: 	punpckhdq	%xmm0, %xmm12
    00000430: 	paddq	%xmm5, %xmm7
    00000434: 	movdqa	%xmm13, %xmm5
    00000439: 	punpckhdq	%xmm0, %xmm13
    0000043e: 	punpckldq	%xmm0, %xmm5
    00000442: 	paddq	%xmm6, %xmm7
    00000446: 	paddq	%xmm5, %xmm12
    0000044b: 	movdqa	%xmm2, %xmm5
    0000044f: 	paddq	%xmm12, %xmm13
    00000454: 	movdqa	%xmm2, %xmm12
    00000459: 	punpckldq	%xmm0, %xmm5
    0000045d: 	movdqa	DATAat0x16630(%rip), %xmm2
    00000465: 	paddq	%xmm13, %xmm7
    0000046a: 	punpckhdq	%xmm0, %xmm12
    0000046f: 	pand	%xmm4, %xmm2
    00000473: 	paddq	%xmm5, %xmm12
    00000478: 	pand	DATAat0x16640(%rip), %xmm4
    00000480: 	pcmpeqb	%xmm3, %xmm2
    00000484: 	pcmpeqb	%xmm3, %xmm4
    00000488: 	pandn	%xmm8, %xmm2
    0000048d: 	movdqa	%xmm2, %xmm13
    00000492: 	punpckhbw	%xmm3, %xmm2
    00000496: 	pandn	%xmm8, %xmm4
    0000049b: 	punpcklbw	%xmm3, %xmm13
    000004a0: 	movdqa	%xmm2, %xmm6
    000004a4: 	punpckhwd	%xmm1, %xmm2
    000004a8: 	movdqa	%xmm13, %xmm14
    000004ad: 	punpckhwd	%xmm1, %xmm13
    000004b2: 	punpcklwd	%xmm1, %xmm6
    000004b6: 	punpcklwd	%xmm1, %xmm14
    000004bb: 	movdqa	%xmm13, %xmm5
    000004c0: 	punpckhdq	%xmm0, %xmm13
    000004c5: 	movdqa	%xmm14, %xmm15
    000004ca: 	punpckldq	%xmm0, %xmm5
    000004ce: 	punpckldq	%xmm0, %xmm14
    000004d3: 	punpckhdq	%xmm0, %xmm15
    000004d8: 	paddq	%xmm14, %xmm12
    000004dd: 	paddq	%xmm15, %xmm5
    000004e2: 	paddq	%xmm12, %xmm7
    000004e7: 	paddq	%xmm13, %xmm5
    000004ec: 	paddq	%xmm7, %xmm5
    000004f0: 	movdqa	%xmm6, %xmm7
    000004f4: 	punpckhdq	%xmm0, %xmm6
    000004f8: 	punpckldq	%xmm0, %xmm7
    000004fc: 	paddq	%xmm7, %xmm6
    00000500: 	movdqa	%xmm2, %xmm7
    00000504: 	punpckhdq	%xmm0, %xmm2
    00000508: 	punpckldq	%xmm0, %xmm7
    0000050c: 	paddq	%xmm7, %xmm6
    00000510: 	movdqa	%xmm4, %xmm7
    00000514: 	punpckhbw	%xmm3, %xmm4
    00000518: 	punpcklbw	%xmm3, %xmm7
    0000051c: 	paddq	%xmm6, %xmm5
    00000520: 	movdqa	%xmm4, %xmm6
    00000524: 	movdqa	%xmm7, %xmm12
    00000529: 	punpckhwd	%xmm1, %xmm7
    0000052d: 	punpcklwd	%xmm1, %xmm6
    00000531: 	punpcklwd	%xmm1, %xmm12
    00000536: 	punpckhwd	%xmm1, %xmm4
    0000053a: 	movdqa	%xmm12, %xmm13
    0000053f: 	punpckhdq	%xmm0, %xmm12
    00000544: 	punpckldq	%xmm0, %xmm13
    00000549: 	paddq	%xmm13, %xmm2
    0000054e: 	paddq	%xmm12, %xmm2
    00000553: 	paddq	%xmm5, %xmm2
    00000557: 	movdqa	%xmm7, %xmm5
    0000055b: 	punpckhdq	%xmm0, %xmm7
    0000055f: 	punpckldq	%xmm0, %xmm5
    00000563: 	paddq	%xmm5, %xmm7
    00000567: 	movdqa	%xmm6, %xmm5
    0000056b: 	punpckhdq	%xmm0, %xmm6
    0000056f: 	punpckldq	%xmm0, %xmm5
    00000573: 	paddq	%xmm5, %xmm7
    00000577: 	movdqa	%xmm4, %xmm5
    0000057b: 	punpckhdq	%xmm0, %xmm4
    0000057f: 	punpckldq	%xmm0, %xmm5
    00000583: 	paddq	%xmm7, %xmm2
    00000587: 	paddq	%xmm5, %xmm6
    0000058b: 	paddq	%xmm6, %xmm4
    0000058f: 	paddq	%xmm2, %xmm4
    00000593: 	paddq	%xmm4, %xmm9
    00000598: 	cmpq	%rdx, %rax
    0000059b: 	jne	.Ltmp653 # Offset: 1435
    000005a1: 	movdqa	%xmm9, %xmm0
    000005a6: 	movq	%rcx, %rdx
    000005a9: 	psrldq	$0x8, %xmm0
    000005ae: 	andq	$-0x10, %rdx
    000005b2: 	paddq	%xmm0, %xmm9
    000005b7: 	addq	%rdx, %r10
    000005ba: 	movq	%xmm9, %rax
    000005bf: 	addq	%rax, %r8
    000005c2: 	movq	%rdx, %rax
    000005c5: 	negq	%rax
    000005c8: 	leaq	(%rdi,%rax,8), %rax
    000005cc: 	cmpq	%rdx, %rcx
    000005cf: 	je	.Ltmp654 # Offset: 1487
.Ltmp657:
    000005d5: 	subq	$0x8, %rax
    000005d9: 	leaq	0x1(%r9,%r10), %rdx
    000005de: 	leaq	(%r9,%r10), %rcx
    000005e2: 	shrq	$0x3, %rax
    000005e6: 	leaq	(%rax,%rdx), %rbx
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp655:
    000005f0: 	movzbl	(%rcx), %edx
    000005f3: 	movl	%edx, %r10d
    000005f6: 	movq	%rdx, %rax
    000005f9: 	andl	$0x2, %r10d
    000005fd: 	andl	$0x1, %eax
    00000600: 	cmpb	$0x1, %r10b
    00000604: 	movl	%edx, %r10d
    00000607: 	sbbq	$-0x1, %rax
    0000060b: 	andl	$0x4, %r10d
    0000060f: 	cmpb	$0x1, %r10b
    00000613: 	movl	%edx, %r10d
    00000616: 	sbbq	$-0x1, %rax
    0000061a: 	andl	$0x8, %r10d
    0000061e: 	cmpb	$0x1, %r10b
    00000622: 	movl	%edx, %r10d
    00000625: 	sbbq	$-0x1, %rax
    00000629: 	andl	$0x10, %r10d
    0000062d: 	cmpb	$0x1, %r10b
    00000631: 	movl	%edx, %r10d
    00000634: 	sbbq	$-0x1, %rax
    00000638: 	andl	$0x20, %r10d
    0000063c: 	cmpb	$0x1, %r10b
    00000640: 	movl	%edx, %r10d
    00000643: 	sbbq	$-0x1, %rax
    00000647: 	andl	$0x40, %r10d
    0000064b: 	cmpb	$0x1, %r10b
    0000064f: 	sbbq	$-0x1, %rax
    00000653: 	cmpb	$-0x80, %dl
    00000656: 	sbbq	$-0x1, %rax
    0000065a: 	addq	$0x1, %rcx
    0000065e: 	addq	%rax, %r8
    00000661: 	cmpq	%rcx, %rbx
    00000664: 	jne	.Ltmp655 # Offset: 1636
.Ltmp654:
    00000666: 	andq	$-0x8, %r11
    0000066a: 	andl	$0x7, %edi
    0000066d: 	leaq	0x8(%rsi,%r11), %rsi
    00000672: 	leaq	-0x1(%rdi), %rdx
    00000676: 	je	.Ltmp656 # Offset: 1654
.Ltmp658:
    0000067c: 	movl	%esi, %ecx
    0000067e: 	movl	$0x1, %eax
    00000683: 	movq	%rsi, %rdi
    00000686: 	andl	$0x7, %ecx
    00000689: 	movl	%eax, %ebx
    0000068b: 	shrq	$0x3, %rdi
    0000068f: 	shll	%cl, %ebx
    00000691: 	movl	%ebx, %ecx
    00000693: 	andb	(%r9,%rdi), %cl
    00000697: 	cmpb	$0x1, %cl
    0000069a: 	leaq	0x1(%rsi), %rcx
    0000069e: 	sbbq	$-0x1, %r8
    000006a2: 	testq	%rdx, %rdx
    000006a5: 	je	.Ltmp656 # Offset: 1701
    000006ab: 	movq	%rcx, %rdi
    000006ae: 	movl	%eax, %ebx
    000006b0: 	andl	$0x7, %ecx
    000006b3: 	shrq	$0x3, %rdi
    000006b7: 	shll	%cl, %ebx
    000006b9: 	movl	%ebx, %ecx
    000006bb: 	andb	(%r9,%rdi), %cl
    000006bf: 	cmpb	$0x1, %cl
    000006c2: 	leaq	0x2(%rsi), %rcx
    000006c6: 	sbbq	$-0x1, %r8
    000006ca: 	cmpq	$0x1, %rdx
    000006ce: 	je	.Ltmp656 # Offset: 1742
    000006d4: 	movq	%rcx, %rdi
    000006d7: 	movl	%eax, %ebx
    000006d9: 	andl	$0x7, %ecx
    000006dc: 	shrq	$0x3, %rdi
    000006e0: 	shll	%cl, %ebx
    000006e2: 	movl	%ebx, %ecx
    000006e4: 	andb	(%r9,%rdi), %cl
    000006e8: 	cmpb	$0x1, %cl
    000006eb: 	leaq	0x3(%rsi), %rcx
    000006ef: 	sbbq	$-0x1, %r8
    000006f3: 	cmpq	$0x2, %rdx
    000006f7: 	je	.Ltmp656 # Offset: 1783
    000006fd: 	movq	%rcx, %rdi
    00000700: 	movl	%eax, %ebx
    00000702: 	andl	$0x7, %ecx
    00000705: 	shrq	$0x3, %rdi
    00000709: 	shll	%cl, %ebx
    0000070b: 	movl	%ebx, %ecx
    0000070d: 	andb	(%r9,%rdi), %cl
    00000711: 	cmpb	$0x1, %cl
    00000714: 	leaq	0x4(%rsi), %rcx
    00000718: 	sbbq	$-0x1, %r8
    0000071c: 	cmpq	$0x3, %rdx
    00000720: 	je	.Ltmp656 # Offset: 1824
    00000722: 	movq	%rcx, %rdi
    00000725: 	movl	%eax, %ebx
    00000727: 	andl	$0x7, %ecx
    0000072a: 	shrq	$0x3, %rdi
    0000072e: 	shll	%cl, %ebx
    00000730: 	movl	%ebx, %ecx
    00000732: 	andb	(%r9,%rdi), %cl
    00000736: 	cmpb	$0x1, %cl
    00000739: 	leaq	0x5(%rsi), %rcx
    0000073d: 	sbbq	$-0x1, %r8
    00000741: 	cmpq	$0x4, %rdx
    00000745: 	je	.Ltmp656 # Offset: 1861
    00000747: 	movq	%rcx, %rdi
    0000074a: 	movl	%eax, %ebx
    0000074c: 	andl	$0x7, %ecx
    0000074f: 	shrq	$0x3, %rdi
    00000753: 	shll	%cl, %ebx
    00000755: 	movl	%ebx, %ecx
    00000757: 	andb	(%r9,%rdi), %cl
    0000075b: 	cmpb	$0x1, %cl
    0000075e: 	leaq	0x6(%rsi), %rcx
    00000762: 	sbbq	$-0x1, %r8
    00000766: 	cmpq	$0x5, %rdx
    0000076a: 	je	.Ltmp656 # Offset: 1898
    0000076c: 	movq	%rcx, %rdx
    0000076f: 	andl	$0x7, %ecx
    00000772: 	shrq	$0x3, %rdx
    00000776: 	shll	%cl, %eax
    00000778: 	andb	(%r9,%rdx), %al
    0000077c: 	cmpb	$0x1, %al
    0000077e: 	sbbq	$-0x1, %r8
.Ltmp656:
    00000782: 	movq	%r8, %rax
    00000785: 	popq	%rbx
    00000786: 	retq # Offset: 1926
.Ltmp652:
    00000787: 	movq	%rdi, %rax
    0000078a: 	jmp	.Ltmp657 # Offset: 1930
.Ltmp651:
    0000078f: 	leaq	-0x1(%rdi), %rdx
    00000793: 	jmp	.Ltmp658 # Offset: 1939
DWARF CFI Instructions:
    <empty>
End of Function "_Z17CountBitsByteLoopIjEmPT_mm"

Binary Function "_Z18CountBitsByteLoop2IjEmPT_mm" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0xc6e0
  Size        : 0x79d
  MaxSize     : 0x7a0
  Offset      : 0xc6e0
  Section     : .text
  Orc Section : .local.text._Z18CountBitsByteLoop2IjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp659 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rdx, %rdi
    00000012: 	subq	%rsi, %rdi
    00000015: 	je	.Ltmp659 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp660 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp661 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp662:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp660 # Offset: 52
.Ltmp661:
    00000036: 	movq	%rsi, %rdx
    00000039: 	movl	%esi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x5, %rdx
    00000042: 	shll	%cl, %eax
    00000044: 	andl	(%r9,%rdx,4), %eax
    00000048: 	cmpl	$0x1, %eax
    0000004b: 	sbbq	$-0x1, %r8
    0000004f: 	addq	$0x1, %rsi
    00000053: 	subq	$0x1, %rdi
    00000057: 	jne	.Ltmp662 # Offset: 87
.Ltmp659:
    00000059: 	movq	%r8, %rax
    0000005c: 	retq # Offset: 92
.Ltmp660:
    0000005d: 	movq	%rsi, %r10
    00000060: 	pushq	%rbx
    00000061: 	shrq	$0x3, %r10
    00000065: 	cmpq	$0x7, %rdi
    00000069: 	jbe	.Ltmp663 # Offset: 105
    0000006f: 	leaq	-0x8(%rdi), %r11
    00000073: 	movq	%r11, %rcx
    00000076: 	shrq	$0x3, %rcx
    0000007a: 	addq	$0x1, %rcx
    0000007e: 	cmpq	$0x77, %r11
    00000082: 	jbe	.Ltmp664 # Offset: 130
    00000088: 	leaq	(%r9,%r10), %rax
    0000008c: 	pxor	%xmm9, %xmm9
    00000091: 	pxor	%xmm3, %xmm3
    00000095: 	movq	%rcx, %rdx
    00000098: 	shrq	$0x4, %rdx
    0000009c: 	pxor	%xmm1, %xmm1
    000000a0: 	movdqa	DATAat0x16640(%rip), %xmm11
    000000a9: 	movdqa	DATAat0x165d0(%rip), %xmm8
    000000b2: 	shlq	$0x4, %rdx
    000000b6: 	pxor	%xmm0, %xmm0
    000000ba: 	movdqa	DATAat0x16630(%rip), %xmm10
    000000c3: 	addq	%rax, %rdx
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp665:
    000000d0: 	movdqu	(%rax), %xmm4
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm4, %xmm6
    000000dc: 	pand	%xmm11, %xmm6
    000000e1: 	pcmpeqb	%xmm3, %xmm6
    000000e5: 	pandn	%xmm8, %xmm6
    000000ea: 	movdqa	%xmm6, %xmm2
    000000ee: 	punpckhbw	%xmm3, %xmm6
    000000f2: 	punpcklbw	%xmm3, %xmm2
    000000f6: 	movdqa	%xmm6, %xmm5
    000000fa: 	punpckhwd	%xmm1, %xmm6
    000000fe: 	movdqa	%xmm2, %xmm7
    00000102: 	punpckhwd	%xmm1, %xmm2
    00000106: 	punpcklwd	%xmm1, %xmm5
    0000010a: 	punpcklwd	%xmm1, %xmm7
    0000010e: 	movdqa	%xmm7, %xmm13
    00000113: 	movdqa	%xmm7, %xmm12
    00000118: 	movdqa	%xmm2, %xmm7
    0000011c: 	punpckldq	%xmm0, %xmm13
    00000121: 	punpckldq	%xmm0, %xmm7
    00000125: 	punpckhdq	%xmm0, %xmm12
    0000012a: 	punpckhdq	%xmm0, %xmm2
    0000012e: 	paddq	%xmm13, %xmm12
    00000133: 	paddq	%xmm7, %xmm2
    00000137: 	paddq	%xmm2, %xmm12
    0000013c: 	movdqa	%xmm5, %xmm2
    00000140: 	punpckhdq	%xmm0, %xmm5
    00000144: 	punpckldq	%xmm0, %xmm2
    00000148: 	paddq	%xmm2, %xmm5
    0000014c: 	movdqa	%xmm6, %xmm2
    00000150: 	punpckhdq	%xmm0, %xmm6
    00000154: 	punpckldq	%xmm0, %xmm2
    00000158: 	paddq	%xmm2, %xmm5
    0000015c: 	movdqa	%xmm4, %xmm2
    00000160: 	pand	%xmm10, %xmm2
    00000165: 	paddq	%xmm5, %xmm12
    0000016a: 	pcmpeqb	%xmm3, %xmm2
    0000016e: 	pandn	%xmm8, %xmm2
    00000173: 	movdqa	%xmm2, %xmm5
    00000177: 	punpckhbw	%xmm3, %xmm2
    0000017b: 	punpcklbw	%xmm3, %xmm5
    0000017f: 	movdqa	%xmm2, %xmm13
    00000184: 	punpckhwd	%xmm1, %xmm2
    00000188: 	movdqa	%xmm5, %xmm14
    0000018d: 	punpckhwd	%xmm1, %xmm5
    00000191: 	punpcklwd	%xmm1, %xmm13
    00000196: 	punpcklwd	%xmm1, %xmm14
    0000019b: 	movdqa	%xmm14, %xmm7
    000001a0: 	punpckhdq	%xmm0, %xmm14
    000001a5: 	punpckldq	%xmm0, %xmm7
    000001a9: 	paddq	%xmm6, %xmm7
    000001ad: 	movdqa	%xmm5, %xmm6
    000001b1: 	punpckhdq	%xmm0, %xmm5
    000001b5: 	punpckldq	%xmm0, %xmm6
    000001b9: 	paddq	%xmm14, %xmm7
    000001be: 	paddq	%xmm6, %xmm5
    000001c2: 	movdqa	%xmm13, %xmm6
    000001c7: 	paddq	%xmm12, %xmm7
    000001cc: 	punpckldq	%xmm0, %xmm6
    000001d0: 	punpckhdq	%xmm0, %xmm13
    000001d5: 	paddq	%xmm6, %xmm5
    000001d9: 	paddq	%xmm5, %xmm7
    000001dd: 	movdqa	%xmm2, %xmm5
    000001e1: 	punpckhdq	%xmm0, %xmm2
    000001e5: 	punpckldq	%xmm0, %xmm5
    000001e9: 	paddq	%xmm5, %xmm13
    000001ee: 	paddq	%xmm13, %xmm2
    000001f3: 	paddq	%xmm2, %xmm7
    000001f7: 	movdqa	DATAat0x16620(%rip), %xmm2
    000001ff: 	pand	%xmm4, %xmm2
    00000203: 	pcmpeqb	%xmm3, %xmm2
    00000207: 	pandn	%xmm8, %xmm2
    0000020c: 	movdqa	%xmm2, %xmm12
    00000211: 	punpckhbw	%xmm3, %xmm2
    00000215: 	punpcklbw	%xmm3, %xmm12
    0000021a: 	movdqa	%xmm2, %xmm13
    0000021f: 	punpckhwd	%xmm1, %xmm2
    00000223: 	movdqa	%xmm12, %xmm5
    00000228: 	punpckhwd	%xmm1, %xmm12
    0000022d: 	punpcklwd	%xmm1, %xmm13
    00000232: 	punpcklwd	%xmm1, %xmm5
    00000236: 	movdqa	%xmm5, %xmm14
    0000023b: 	movdqa	%xmm5, %xmm6
    0000023f: 	movdqa	%xmm12, %xmm5
    00000244: 	punpckldq	%xmm0, %xmm14
    00000249: 	punpckhdq	%xmm0, %xmm6
    0000024d: 	punpckldq	%xmm0, %xmm5
    00000251: 	paddq	%xmm14, %xmm6
    00000256: 	punpckhdq	%xmm0, %xmm12
    0000025b: 	paddq	%xmm5, %xmm6
    0000025f: 	movdqa	%xmm13, %xmm5
    00000264: 	punpckhdq	%xmm0, %xmm13
    00000269: 	punpckldq	%xmm0, %xmm5
    0000026d: 	paddq	%xmm7, %xmm6
    00000271: 	paddq	%xmm5, %xmm12
    00000276: 	movdqa	%xmm2, %xmm5
    0000027a: 	paddq	%xmm12, %xmm13
    0000027f: 	movdqa	%xmm2, %xmm12
    00000284: 	punpckldq	%xmm0, %xmm5
    00000288: 	punpckhdq	%xmm0, %xmm12
    0000028d: 	paddq	%xmm13, %xmm6
    00000292: 	paddq	%xmm5, %xmm12
    00000297: 	movdqa	DATAat0x16610(%rip), %xmm5
    0000029f: 	pand	%xmm4, %xmm5
    000002a3: 	pcmpeqb	%xmm3, %xmm5
    000002a7: 	pandn	%xmm8, %xmm5
    000002ac: 	movdqa	%xmm5, %xmm14
    000002b1: 	punpckhbw	%xmm3, %xmm5
    000002b5: 	punpcklbw	%xmm3, %xmm14
    000002ba: 	movdqa	%xmm5, %xmm2
    000002be: 	punpckhwd	%xmm1, %xmm5
    000002c2: 	movdqa	%xmm14, %xmm13
    000002c7: 	punpckhwd	%xmm1, %xmm14
    000002cc: 	punpcklwd	%xmm1, %xmm2
    000002d0: 	punpcklwd	%xmm1, %xmm13
    000002d5: 	movdqa	%xmm14, %xmm7
    000002da: 	punpckhdq	%xmm0, %xmm14
    000002df: 	movdqa	%xmm13, %xmm15
    000002e4: 	punpckldq	%xmm0, %xmm7
    000002e8: 	punpckldq	%xmm0, %xmm13
    000002ed: 	punpckhdq	%xmm0, %xmm15
    000002f2: 	paddq	%xmm13, %xmm12
    000002f7: 	paddq	%xmm15, %xmm7
    000002fc: 	paddq	%xmm12, %xmm6
    00000301: 	paddq	%xmm14, %xmm7
    00000306: 	paddq	%xmm6, %xmm7
    0000030a: 	movdqa	%xmm2, %xmm6
    0000030e: 	punpckhdq	%xmm0, %xmm2
    00000312: 	punpckldq	%xmm0, %xmm6
    00000316: 	paddq	%xmm6, %xmm2
    0000031a: 	movdqa	%xmm5, %xmm6
    0000031e: 	punpckhdq	%xmm0, %xmm5
    00000322: 	punpckldq	%xmm0, %xmm6
    00000326: 	paddq	%xmm6, %xmm2
    0000032a: 	paddq	%xmm2, %xmm7
    0000032e: 	movdqa	DATAat0x16600(%rip), %xmm2
    00000336: 	pand	%xmm4, %xmm2
    0000033a: 	pcmpeqb	%xmm3, %xmm2
    0000033e: 	pandn	%xmm8, %xmm2
    00000343: 	movdqa	%xmm2, %xmm13
    00000348: 	punpckhbw	%xmm3, %xmm2
    0000034c: 	punpcklbw	%xmm3, %xmm13
    00000351: 	movdqa	%xmm2, %xmm12
    00000356: 	punpckhwd	%xmm1, %xmm2
    0000035a: 	movdqa	%xmm13, %xmm14
    0000035f: 	punpckhwd	%xmm1, %xmm13
    00000364: 	punpcklwd	%xmm1, %xmm12
    00000369: 	punpcklwd	%xmm1, %xmm14
    0000036e: 	movdqa	%xmm14, %xmm6
    00000373: 	punpckhdq	%xmm0, %xmm14
    00000378: 	punpckldq	%xmm0, %xmm6
    0000037c: 	paddq	%xmm5, %xmm6
    00000380: 	movdqa	%xmm13, %xmm5
    00000385: 	paddq	%xmm14, %xmm6
    0000038a: 	punpckhdq	%xmm0, %xmm5
    0000038e: 	paddq	%xmm7, %xmm6
    00000392: 	movdqa	%xmm13, %xmm7
    00000397: 	punpckldq	%xmm0, %xmm7
    0000039b: 	paddq	%xmm7, %xmm5
    0000039f: 	movdqa	%xmm12, %xmm7
    000003a4: 	punpckhdq	%xmm0, %xmm12
    000003a9: 	punpckldq	%xmm0, %xmm7
    000003ad: 	paddq	%xmm7, %xmm5
    000003b1: 	paddq	%xmm5, %xmm6
    000003b5: 	movdqa	%xmm2, %xmm5
    000003b9: 	punpckhdq	%xmm0, %xmm2
    000003bd: 	punpckldq	%xmm0, %xmm5
    000003c1: 	paddq	%xmm5, %xmm12
    000003c6: 	paddq	%xmm12, %xmm2
    000003cb: 	paddq	%xmm2, %xmm6
    000003cf: 	movdqa	DATAat0x165f0(%rip), %xmm2
    000003d7: 	pand	%xmm4, %xmm2
    000003db: 	pcmpeqb	%xmm3, %xmm2
    000003df: 	pandn	%xmm8, %xmm2
    000003e4: 	movdqa	%xmm2, %xmm12
    000003e9: 	punpckhbw	%xmm3, %xmm2
    000003ed: 	punpcklbw	%xmm3, %xmm12
    000003f2: 	movdqa	%xmm2, %xmm13
    000003f7: 	punpckhwd	%xmm1, %xmm2
    000003fb: 	movdqa	%xmm12, %xmm5
    00000400: 	punpckhwd	%xmm1, %xmm12
    00000405: 	punpcklwd	%xmm1, %xmm13
    0000040a: 	punpcklwd	%xmm1, %xmm5
    0000040e: 	movdqa	%xmm5, %xmm14
    00000413: 	movdqa	%xmm5, %xmm7
    00000417: 	movdqa	%xmm12, %xmm5
    0000041c: 	punpckldq	%xmm0, %xmm14
    00000421: 	punpckhdq	%xmm0, %xmm7
    00000425: 	punpckldq	%xmm0, %xmm5
    00000429: 	paddq	%xmm14, %xmm7
    0000042e: 	punpckhdq	%xmm0, %xmm12
    00000433: 	paddq	%xmm5, %xmm7
    00000437: 	movdqa	%xmm13, %xmm5
    0000043c: 	punpckhdq	%xmm0, %xmm13
    00000441: 	punpckldq	%xmm0, %xmm5
    00000445: 	paddq	%xmm6, %xmm7
    00000449: 	paddq	%xmm5, %xmm12
    0000044e: 	movdqa	%xmm2, %xmm5
    00000452: 	paddq	%xmm12, %xmm13
    00000457: 	movdqa	%xmm2, %xmm12
    0000045c: 	punpckldq	%xmm0, %xmm5
    00000460: 	movdqa	DATAat0x165e0(%rip), %xmm2
    00000468: 	paddq	%xmm13, %xmm7
    0000046d: 	punpckhdq	%xmm0, %xmm12
    00000472: 	pand	%xmm4, %xmm2
    00000476: 	paddq	%xmm5, %xmm12
    0000047b: 	pand	%xmm8, %xmm4
    00000480: 	pcmpeqb	%xmm3, %xmm2
    00000484: 	pcmpeqb	%xmm3, %xmm4
    00000488: 	pandn	%xmm8, %xmm2
    0000048d: 	pandn	%xmm8, %xmm4
    00000492: 	movdqa	%xmm2, %xmm13
    00000497: 	punpckhbw	%xmm3, %xmm2
    0000049b: 	punpcklbw	%xmm3, %xmm13
    000004a0: 	movdqa	%xmm2, %xmm6
    000004a4: 	punpckhwd	%xmm1, %xmm2
    000004a8: 	movdqa	%xmm13, %xmm14
    000004ad: 	punpckhwd	%xmm1, %xmm13
    000004b2: 	punpcklwd	%xmm1, %xmm6
    000004b6: 	punpcklwd	%xmm1, %xmm14
    000004bb: 	movdqa	%xmm13, %xmm5
    000004c0: 	punpckhdq	%xmm0, %xmm13
    000004c5: 	movdqa	%xmm14, %xmm15
    000004ca: 	punpckldq	%xmm0, %xmm5
    000004ce: 	punpckldq	%xmm0, %xmm14
    000004d3: 	punpckhdq	%xmm0, %xmm15
    000004d8: 	paddq	%xmm14, %xmm12
    000004dd: 	paddq	%xmm15, %xmm5
    000004e2: 	paddq	%xmm12, %xmm7
    000004e7: 	paddq	%xmm13, %xmm5
    000004ec: 	paddq	%xmm7, %xmm5
    000004f0: 	movdqa	%xmm6, %xmm7
    000004f4: 	punpckhdq	%xmm0, %xmm6
    000004f8: 	punpckldq	%xmm0, %xmm7
    000004fc: 	paddq	%xmm7, %xmm6
    00000500: 	movdqa	%xmm2, %xmm7
    00000504: 	punpckhdq	%xmm0, %xmm2
    00000508: 	punpckldq	%xmm0, %xmm7
    0000050c: 	paddq	%xmm7, %xmm6
    00000510: 	movdqa	%xmm4, %xmm7
    00000514: 	punpckhbw	%xmm3, %xmm4
    00000518: 	punpcklbw	%xmm3, %xmm7
    0000051c: 	paddq	%xmm6, %xmm5
    00000520: 	movdqa	%xmm4, %xmm6
    00000524: 	movdqa	%xmm7, %xmm12
    00000529: 	punpckhwd	%xmm1, %xmm7
    0000052d: 	punpcklwd	%xmm1, %xmm6
    00000531: 	punpcklwd	%xmm1, %xmm12
    00000536: 	punpckhwd	%xmm1, %xmm4
    0000053a: 	movdqa	%xmm12, %xmm13
    0000053f: 	punpckhdq	%xmm0, %xmm12
    00000544: 	punpckldq	%xmm0, %xmm13
    00000549: 	paddq	%xmm13, %xmm2
    0000054e: 	paddq	%xmm12, %xmm2
    00000553: 	paddq	%xmm5, %xmm2
    00000557: 	movdqa	%xmm7, %xmm5
    0000055b: 	punpckhdq	%xmm0, %xmm7
    0000055f: 	punpckldq	%xmm0, %xmm5
    00000563: 	paddq	%xmm5, %xmm7
    00000567: 	movdqa	%xmm6, %xmm5
    0000056b: 	punpckhdq	%xmm0, %xmm6
    0000056f: 	punpckldq	%xmm0, %xmm5
    00000573: 	paddq	%xmm5, %xmm7
    00000577: 	movdqa	%xmm4, %xmm5
    0000057b: 	punpckhdq	%xmm0, %xmm4
    0000057f: 	punpckldq	%xmm0, %xmm5
    00000583: 	paddq	%xmm7, %xmm2
    00000587: 	paddq	%xmm5, %xmm6
    0000058b: 	paddq	%xmm6, %xmm4
    0000058f: 	paddq	%xmm2, %xmm4
    00000593: 	paddq	%xmm4, %xmm9
    00000598: 	cmpq	%rdx, %rax
    0000059b: 	jne	.Ltmp665 # Offset: 1435
    000005a1: 	movdqa	%xmm9, %xmm0
    000005a6: 	movq	%rcx, %rdx
    000005a9: 	psrldq	$0x8, %xmm0
    000005ae: 	andq	$-0x10, %rdx
    000005b2: 	paddq	%xmm0, %xmm9
    000005b7: 	addq	%rdx, %r10
    000005ba: 	movq	%xmm9, %rax
    000005bf: 	addq	%rax, %r8
    000005c2: 	movq	%rdx, %rax
    000005c5: 	negq	%rax
    000005c8: 	leaq	(%rdi,%rax,8), %rax
    000005cc: 	cmpq	%rdx, %rcx
    000005cf: 	je	.Ltmp666 # Offset: 1487
.Ltmp669:
    000005d5: 	subq	$0x8, %rax
    000005d9: 	leaq	0x1(%r9,%r10), %rdx
    000005de: 	leaq	(%r9,%r10), %rcx
    000005e2: 	shrq	$0x3, %rax
    000005e6: 	leaq	(%rax,%rdx), %rbx
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp667:
    000005f0: 	movsbq	(%rcx), %rax
    000005f4: 	movq	%rax, %rdx
    000005f7: 	shrq	$0x3f, %rax
    000005fb: 	movl	%edx, %r10d
    000005fe: 	andl	$0x40, %r10d
    00000602: 	cmpb	$0x1, %r10b
    00000606: 	movl	%edx, %r10d
    00000609: 	sbbq	$-0x1, %rax
    0000060d: 	andl	$0x20, %r10d
    00000611: 	cmpb	$0x1, %r10b
    00000615: 	movl	%edx, %r10d
    00000618: 	sbbq	$-0x1, %rax
    0000061c: 	andl	$0x10, %r10d
    00000620: 	cmpb	$0x1, %r10b
    00000624: 	movl	%edx, %r10d
    00000627: 	sbbq	$-0x1, %rax
    0000062b: 	andl	$0x8, %r10d
    0000062f: 	cmpb	$0x1, %r10b
    00000633: 	movl	%edx, %r10d
    00000636: 	sbbq	$-0x1, %rax
    0000063a: 	andl	$0x4, %r10d
    0000063e: 	cmpb	$0x1, %r10b
    00000642: 	movl	%edx, %r10d
    00000645: 	sbbq	$-0x1, %rax
    00000649: 	andl	$0x2, %r10d
    0000064d: 	cmpb	$0x1, %r10b
    00000651: 	sbbq	$-0x1, %rax
    00000655: 	andl	$0x1, %edx
    00000658: 	cmpb	$0x1, %dl
    0000065b: 	sbbq	$-0x1, %rax
    0000065f: 	addq	$0x1, %rcx
    00000663: 	addq	%rax, %r8
    00000666: 	cmpq	%rcx, %rbx
    00000669: 	jne	.Ltmp667 # Offset: 1641
.Ltmp666:
    0000066b: 	andq	$-0x8, %r11
    0000066f: 	andl	$0x7, %edi
    00000672: 	leaq	0x8(%rsi,%r11), %rsi
    00000677: 	leaq	-0x1(%rdi), %rdx
    0000067b: 	je	.Ltmp668 # Offset: 1659
.Ltmp670:
    00000681: 	movl	%esi, %ecx
    00000683: 	movl	$0x1, %eax
    00000688: 	movq	%rsi, %rdi
    0000068b: 	andl	$0x7, %ecx
    0000068e: 	movl	%eax, %ebx
    00000690: 	shrq	$0x3, %rdi
    00000694: 	shll	%cl, %ebx
    00000696: 	movl	%ebx, %ecx
    00000698: 	andb	(%r9,%rdi), %cl
    0000069c: 	cmpb	$0x1, %cl
    0000069f: 	leaq	0x1(%rsi), %rcx
    000006a3: 	sbbq	$-0x1, %r8
    000006a7: 	testq	%rdx, %rdx
    000006aa: 	je	.Ltmp668 # Offset: 1706
    000006b0: 	movq	%rcx, %rdi
    000006b3: 	movl	%eax, %ebx
    000006b5: 	andl	$0x7, %ecx
    000006b8: 	shrq	$0x3, %rdi
    000006bc: 	shll	%cl, %ebx
    000006be: 	movl	%ebx, %ecx
    000006c0: 	andb	(%r9,%rdi), %cl
    000006c4: 	cmpb	$0x1, %cl
    000006c7: 	leaq	0x2(%rsi), %rcx
    000006cb: 	sbbq	$-0x1, %r8
    000006cf: 	cmpq	$0x1, %rdx
    000006d3: 	je	.Ltmp668 # Offset: 1747
    000006d9: 	movq	%rcx, %rdi
    000006dc: 	movl	%eax, %ebx
    000006de: 	andl	$0x7, %ecx
    000006e1: 	shrq	$0x3, %rdi
    000006e5: 	shll	%cl, %ebx
    000006e7: 	movl	%ebx, %ecx
    000006e9: 	andb	(%r9,%rdi), %cl
    000006ed: 	cmpb	$0x1, %cl
    000006f0: 	leaq	0x3(%rsi), %rcx
    000006f4: 	sbbq	$-0x1, %r8
    000006f8: 	cmpq	$0x2, %rdx
    000006fc: 	je	.Ltmp668 # Offset: 1788
    00000702: 	movq	%rcx, %rdi
    00000705: 	movl	%eax, %ebx
    00000707: 	andl	$0x7, %ecx
    0000070a: 	shrq	$0x3, %rdi
    0000070e: 	shll	%cl, %ebx
    00000710: 	movl	%ebx, %ecx
    00000712: 	andb	(%r9,%rdi), %cl
    00000716: 	cmpb	$0x1, %cl
    00000719: 	leaq	0x4(%rsi), %rcx
    0000071d: 	sbbq	$-0x1, %r8
    00000721: 	cmpq	$0x3, %rdx
    00000725: 	je	.Ltmp668 # Offset: 1829
    00000727: 	movq	%rcx, %rdi
    0000072a: 	movl	%eax, %ebx
    0000072c: 	andl	$0x7, %ecx
    0000072f: 	shrq	$0x3, %rdi
    00000733: 	shll	%cl, %ebx
    00000735: 	movl	%ebx, %ecx
    00000737: 	andb	(%r9,%rdi), %cl
    0000073b: 	cmpb	$0x1, %cl
    0000073e: 	leaq	0x5(%rsi), %rcx
    00000742: 	sbbq	$-0x1, %r8
    00000746: 	cmpq	$0x4, %rdx
    0000074a: 	je	.Ltmp668 # Offset: 1866
    0000074c: 	movq	%rcx, %rdi
    0000074f: 	movl	%eax, %ebx
    00000751: 	andl	$0x7, %ecx
    00000754: 	shrq	$0x3, %rdi
    00000758: 	shll	%cl, %ebx
    0000075a: 	movl	%ebx, %ecx
    0000075c: 	andb	(%r9,%rdi), %cl
    00000760: 	cmpb	$0x1, %cl
    00000763: 	leaq	0x6(%rsi), %rcx
    00000767: 	sbbq	$-0x1, %r8
    0000076b: 	cmpq	$0x5, %rdx
    0000076f: 	je	.Ltmp668 # Offset: 1903
    00000771: 	movq	%rcx, %rdx
    00000774: 	andl	$0x7, %ecx
    00000777: 	shrq	$0x3, %rdx
    0000077b: 	shll	%cl, %eax
    0000077d: 	andb	(%r9,%rdx), %al
    00000781: 	cmpb	$0x1, %al
    00000783: 	sbbq	$-0x1, %r8
.Ltmp668:
    00000787: 	movq	%r8, %rax
    0000078a: 	popq	%rbx
    0000078b: 	retq # Offset: 1931
.Ltmp664:
    0000078c: 	movq	%rdi, %rax
    0000078f: 	jmp	.Ltmp669 # Offset: 1935
.Ltmp663:
    00000794: 	leaq	-0x1(%rdi), %rdx
    00000798: 	jmp	.Ltmp670 # Offset: 1944
DWARF CFI Instructions:
    <empty>
End of Function "_Z18CountBitsByteLoop2IjEmPT_mm"

Binary Function "_Z9CountBitsIjEmPT_mm" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0xce80
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0xce80
  Section     : .text
  Orc Section : .local.text._Z9CountBitsIjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	xorl	%r8d, %r8d
    0000000a: 	cmpq	%rsi, %rdx
    0000000d: 	jb	.Ltmp671 # Offset: 13
    0000000f: 	je	.Ltmp671 # Offset: 15
    00000011: 	movl	$0x1, %r9d
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp672:
    00000020: 	movq	%rcx, %rsi
    00000023: 	movl	%r9d, %eax
    00000026: 	shrq	$0x5, %rsi
    0000002a: 	shll	%cl, %eax
    0000002c: 	andl	(%rdi,%rsi,4), %eax
    0000002f: 	cmpl	$0x1, %eax
    00000032: 	sbbq	$-0x1, %r8
    00000036: 	addq	$0x1, %rcx
    0000003a: 	cmpq	%rcx, %rdx
    0000003d: 	jne	.Ltmp672 # Offset: 61
.Ltmp671:
    0000003f: 	movq	%r8, %rax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z9CountBitsIjEmPT_mm"

Binary Function "_Z14CountBitsShiftImEmPT_mm" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0xced0
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0xced0
  Section     : .text
  Orc Section : .local.text._Z14CountBitsShiftImEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	xorl	%r8d, %r8d
    0000000a: 	cmpq	%rsi, %rdx
    0000000d: 	jb	.Ltmp673 # Offset: 13
    0000000f: 	je	.Ltmp673 # Offset: 15
    00000011: 	movl	$0x1, %r9d
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp674:
    00000020: 	movq	%rcx, %rsi
    00000023: 	movq	%r9, %rax
    00000026: 	shrq	$0x6, %rsi
    0000002a: 	shlq	%cl, %rax
    0000002d: 	andq	(%rdi,%rsi,8), %rax
    00000031: 	cmpq	$0x1, %rax
    00000035: 	sbbq	$-0x1, %r8
    00000039: 	addq	$0x1, %rcx
    0000003d: 	cmpq	%rcx, %rdx
    00000040: 	jne	.Ltmp674 # Offset: 64
.Ltmp673:
    00000042: 	movq	%r8, %rax
    00000045: 	retq # Offset: 69
DWARF CFI Instructions:
    <empty>
End of Function "_Z14CountBitsShiftImEmPT_mm"

Binary Function "_Z14SetBitsHalfOptImEvPT_mm" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0xcf20
  Size        : 0xe7
  MaxSize     : 0xf0
  Offset      : 0xcf20
  Section     : .text
  Orc Section : .local.text._Z14SetBitsHalfOptImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp675 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %rcx
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdx, %rbx
    00000017: 	subq	$0x10, %rsp
    0000001b: 	subq	%rsi, %rbx
    0000001e: 	je	.Ltmp676 # Offset: 30
    00000020: 	movq	%rdi, %rbp
    00000023: 	testb	$0x3f, %sil
    00000027: 	je	.Ltmp677 # Offset: 39
    00000029: 	movl	$0x1, %esi
    0000002e: 	jmp	.Ltmp678 # Offset: 46
.Ltmp679:
    00000030: 	testb	$0x3f, %cl
    00000033: 	je	.Ltmp677 # Offset: 51
.Ltmp678:
    00000035: 	movq	%rcx, %rax
    00000038: 	movq	%rsi, %rdx
    0000003b: 	shrq	$0x6, %rax
    0000003f: 	shlq	%cl, %rdx
    00000042: 	addq	$0x1, %rcx
    00000046: 	orq	%rdx, (%rbp,%rax,8)
    0000004b: 	subq	$0x1, %rbx
    0000004f: 	jne	.Ltmp679 # Offset: 79
.Ltmp676:
    00000051: 	addq	$0x10, %rsp
    00000055: 	popq	%rbx
    00000056: 	popq	%rbp
    00000057: 	popq	%r12
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp677:
    00000060: 	movq	%rcx, %rax
    00000063: 	shrq	$0x6, %rax
    00000067: 	cmpq	$0x3f, %rbx
    0000006b: 	jbe	.Ltmp680 # Offset: 107
    0000006d: 	leaq	-0x40(%rbx), %r12
    00000071: 	movl	$0xff, %esi
    00000076: 	leaq	(%rbp,%rax,8), %rdi
    0000007b: 	movq	%rcx, 0x8(%rsp)
    00000080: 	movq	%r12, %rdx
    00000083: 	andq	$-0x40, %r12
    00000087: 	shrq	$0x6, %rdx
    0000008b: 	leaq	0x8(,%rdx,8), %rdx
    00000093: 	callq	memset@PLT # Offset: 147
    00000098: 	movq	0x8(%rsp), %rcx
    0000009d: 	andl	$0x3f, %ebx
    000000a0: 	leaq	-0x1(%rbx), %rsi
    000000a4: 	leaq	0x40(%rcx,%r12), %rcx
    000000a9: 	je	.Ltmp676 # Offset: 169
.Ltmp682:
    000000ab: 	addq	%rcx, %rsi
    000000ae: 	movl	$0x1, %edi
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp681:
    000000b8: 	movq	%rcx, %rax
    000000bb: 	movq	%rdi, %rdx
    000000be: 	shrq	$0x6, %rax
    000000c2: 	shlq	%cl, %rdx
    000000c5: 	orq	%rdx, (%rbp,%rax,8)
    000000ca: 	movq	%rcx, %rax
    000000cd: 	addq	$0x1, %rcx
    000000d1: 	cmpq	%rsi, %rax
    000000d4: 	jne	.Ltmp681 # Offset: 212
    000000d6: 	addq	$0x10, %rsp
    000000da: 	popq	%rbx
    000000db: 	popq	%rbp
    000000dc: 	popq	%r12
    000000de: 	retq # Offset: 222
    000000df: 	nop # Size: 1
.Ltmp675:
    000000e0: 	retq # Offset: 224
.Ltmp680:
    000000e1: 	leaq	-0x1(%rbx), %rsi
    000000e5: 	jmp	.Ltmp682 # Offset: 229
DWARF CFI Instructions:
    <empty>
End of Function "_Z14SetBitsHalfOptImEvPT_mm"

Binary Function "_Z12SetBitsShiftImEvPT_mm" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0xd010
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0xd010
  Section     : .text
  Orc Section : .local.text._Z12SetBitsShiftImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp683 # Offset: 10
    0000000c: 	je	.Ltmp683 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp684:
    00000018: 	movq	%rcx, %rax
    0000001b: 	movq	%r8, %rsi
    0000001e: 	shlq	%cl, %rsi
    00000021: 	shrq	$0x6, %rax
    00000025: 	addq	$0x1, %rcx
    00000029: 	orq	%rsi, (%rdi,%rax,8)
    0000002d: 	cmpq	%rcx, %rdx
    00000030: 	jne	.Ltmp684 # Offset: 48
.Ltmp683:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z12SetBitsShiftImEvPT_mm"

Binary Function "_Z7SetBitsImEvPT_mm" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0xd050
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0xd050
  Section     : .text
  Orc Section : .local.text._Z7SetBitsImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp685 # Offset: 10
    0000000c: 	je	.Ltmp685 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp686:
    00000018: 	movq	%rcx, %rax
    0000001b: 	movq	%r8, %rsi
    0000001e: 	shlq	%cl, %rsi
    00000021: 	shrq	$0x6, %rax
    00000025: 	addq	$0x1, %rcx
    00000029: 	orq	%rsi, (%rdi,%rax,8)
    0000002d: 	cmpq	%rcx, %rdx
    00000030: 	jne	.Ltmp686 # Offset: 48
.Ltmp685:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z7SetBitsImEvPT_mm"

Binary Function "_Z16ClearBitsHalfOptImEvPT_mm" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0xd090
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0xd090
  Section     : .text
  Orc Section : .local.text._Z16ClearBitsHalfOptImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp687 # Offset: 7
    0000000d: 	movq	%rsi, %rcx
    00000010: 	subq	%rsi, %rdx
    00000013: 	je	.Ltmp687 # Offset: 19
    00000019: 	pushq	%r12
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	subq	$0x10, %rsp
    00000024: 	testb	$0x3f, %sil
    00000028: 	je	.Ltmp688 # Offset: 40
    0000002a: 	movl	$0x1, %edi
    0000002f: 	jmp	.Ltmp689 # Offset: 47
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp690:
    00000038: 	testb	$0x3f, %cl
    0000003b: 	je	.Ltmp688 # Offset: 59
.Ltmp689:
    0000003d: 	movq	%rcx, %rsi
    00000040: 	movq	%rdi, %rax
    00000043: 	shlq	%cl, %rax
    00000046: 	shrq	$0x6, %rsi
    0000004a: 	addq	$0x1, %rcx
    0000004e: 	notq	%rax
    00000051: 	andq	%rax, (%rbp,%rsi,8)
    00000056: 	subq	$0x1, %rdx
    0000005a: 	jne	.Ltmp690 # Offset: 90
    0000005c: 	addq	$0x10, %rsp
    00000060: 	popq	%rbx
    00000061: 	popq	%rbp
    00000062: 	popq	%r12
    00000064: 	retq # Offset: 100
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp688:
    00000068: 	movq	%rcx, %rax
    0000006b: 	shrq	$0x6, %rax
    0000006f: 	cmpq	$0x40, %rdx
    00000073: 	jbe	.Ltmp691 # Offset: 115
    00000075: 	leaq	-0x41(%rdx), %rbx
    00000079: 	leaq	(%rbp,%rax,8), %rdi
    0000007e: 	xorl	%esi, %esi
    00000080: 	movq	%rcx, 0x8(%rsp)
    00000085: 	movq	%rbx, %r12
    00000088: 	shrq	$0x6, %r12
    0000008c: 	leaq	0x8(,%r12,8), %rdx
    00000094: 	shlq	$0x6, %r12
    00000098: 	callq	memset@PLT # Offset: 152
    0000009d: 	movq	%rbx, %rax
    000000a0: 	movq	0x8(%rsp), %rcx
    000000a5: 	subq	%r12, %rbx
    000000a8: 	andq	$-0x40, %rax
    000000ac: 	movq	%rbx, %rdx
    000000af: 	leaq	0x40(%rcx,%rax), %rcx
.Ltmp693:
    000000b4: 	addq	%rcx, %rdx
    000000b7: 	movl	$0x1, %edi
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp692:
    000000c0: 	movq	%rcx, %rsi
    000000c3: 	movq	%rdi, %rax
    000000c6: 	shlq	%cl, %rax
    000000c9: 	shrq	$0x6, %rsi
    000000cd: 	notq	%rax
    000000d0: 	andq	%rax, (%rbp,%rsi,8)
    000000d5: 	movq	%rcx, %rax
    000000d8: 	addq	$0x1, %rcx
    000000dc: 	cmpq	%rdx, %rax
    000000df: 	jne	.Ltmp692 # Offset: 223
    000000e1: 	addq	$0x10, %rsp
    000000e5: 	popq	%rbx
    000000e6: 	popq	%rbp
    000000e7: 	popq	%r12
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp687:
    000000f0: 	retq # Offset: 240
.Ltmp691:
    000000f1: 	subq	$0x1, %rdx
    000000f5: 	jmp	.Ltmp693 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z16ClearBitsHalfOptImEvPT_mm"

Binary Function "_Z14ClearBitsShiftImEvPT_mm" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0xd190
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0xd190
  Section     : .text
  Orc Section : .local.text._Z14ClearBitsShiftImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp694 # Offset: 10
    0000000c: 	je	.Ltmp694 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp695:
    00000018: 	movq	%rcx, %rsi
    0000001b: 	movq	%r8, %rax
    0000001e: 	shlq	%cl, %rax
    00000021: 	shrq	$0x6, %rsi
    00000025: 	addq	$0x1, %rcx
    00000029: 	notq	%rax
    0000002c: 	andq	%rax, (%rdi,%rsi,8)
    00000030: 	cmpq	%rcx, %rdx
    00000033: 	jne	.Ltmp695 # Offset: 51
.Ltmp694:
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_Z14ClearBitsShiftImEvPT_mm"

Binary Function "_Z9ClearBitsImEvPT_mm" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0xd1d0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0xd1d0
  Section     : .text
  Orc Section : .local.text._Z9ClearBitsImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp696 # Offset: 10
    0000000c: 	je	.Ltmp696 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp697:
    00000018: 	movq	%rcx, %rsi
    0000001b: 	movq	%r8, %rax
    0000001e: 	shlq	%cl, %rax
    00000021: 	shrq	$0x6, %rsi
    00000025: 	addq	$0x1, %rcx
    00000029: 	notq	%rax
    0000002c: 	andq	%rax, (%rdi,%rsi,8)
    00000030: 	cmpq	%rcx, %rdx
    00000033: 	jne	.Ltmp697 # Offset: 51
.Ltmp696:
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_Z9ClearBitsImEvPT_mm"

Binary Function "_Z17InvertBitsHalfOptImEvPT_mm" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0xd210
  Size        : 0xfc
  MaxSize     : 0x100
  Offset      : 0xd210
  Section     : .text
  Orc Section : .local.text._Z17InvertBitsHalfOptImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	movq	%rsi, %rcx
    0000000a: 	cmpq	%rsi, %rdx
    0000000d: 	jb	.Ltmp698 # Offset: 13
    0000000f: 	subq	%rsi, %rdx
    00000012: 	je	.Ltmp698 # Offset: 18
    00000014: 	testb	$0x3f, %sil
    00000018: 	je	.Ltmp699 # Offset: 24
    0000001a: 	movl	$0x1, %r8d
    00000020: 	jmp	.Ltmp700 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp701:
    00000028: 	testb	$0x3f, %cl
    0000002b: 	je	.Ltmp699 # Offset: 43
.Ltmp700:
    0000002d: 	movq	%rcx, %rsi
    00000030: 	movq	%r8, %rdi
    00000033: 	shrq	$0x6, %rsi
    00000037: 	shlq	%cl, %rdi
    0000003a: 	addq	$0x1, %rcx
    0000003e: 	xorq	%rdi, (%rax,%rsi,8)
    00000042: 	subq	$0x1, %rdx
    00000046: 	jne	.Ltmp701 # Offset: 70
.Ltmp698:
    00000048: 	retq # Offset: 72
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp699:
    00000050: 	movq	%rcx, %rdi
    00000053: 	shrq	$0x6, %rdi
    00000057: 	cmpq	$0x40, %rdx
    0000005b: 	jbe	.Ltmp702 # Offset: 91
    00000061: 	subq	$0x41, %rdx
    00000065: 	movq	%rdx, %r9
    00000068: 	shrq	$0x6, %r9
    0000006c: 	leaq	0x1(%r9), %r10
    00000070: 	cmpq	$0x3f, %rdx
    00000074: 	jbe	.Ltmp703 # Offset: 116
    00000076: 	movq	%r10, %r8
    00000079: 	leaq	(%rax,%rdi,8), %rsi
    0000007d: 	pcmpeqd	%xmm1, %xmm1
    00000081: 	shrq	%r8
    00000084: 	shlq	$0x4, %r8
    00000088: 	addq	%rsi, %r8
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp704:
    00000090: 	movdqu	(%rsi), %xmm0
    00000094: 	addq	$0x10, %rsi
    00000098: 	pxor	%xmm1, %xmm0
    0000009c: 	movups	%xmm0, -0x10(%rsi)
    000000a0: 	cmpq	%rsi, %r8
    000000a3: 	jne	.Ltmp704 # Offset: 163
    000000a5: 	movq	%r10, %rsi
    000000a8: 	andq	$-0x2, %rsi
    000000ac: 	addq	%rsi, %rdi
    000000af: 	cmpq	%rsi, %r10
    000000b2: 	je	.Ltmp705 # Offset: 178
.Ltmp703:
    000000b4: 	notq	(%rax,%rdi,8)
.Ltmp705:
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	shlq	$0x6, %r9
    000000bf: 	andq	$-0x40, %rsi
    000000c3: 	subq	%r9, %rdx
    000000c6: 	leaq	0x40(%rcx,%rsi), %rcx
.Ltmp707:
    000000cb: 	addq	%rcx, %rdx
    000000ce: 	movl	$0x1, %r8d
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp706:
    000000d8: 	movq	%rcx, %rsi
    000000db: 	movq	%r8, %rdi
    000000de: 	shrq	$0x6, %rsi
    000000e2: 	shlq	%cl, %rdi
    000000e5: 	xorq	%rdi, (%rax,%rsi,8)
    000000e9: 	movq	%rcx, %rsi
    000000ec: 	addq	$0x1, %rcx
    000000f0: 	cmpq	%rdx, %rsi
    000000f3: 	jne	.Ltmp706 # Offset: 243
    000000f5: 	retq # Offset: 245
.Ltmp702:
    000000f6: 	subq	$0x1, %rdx
    000000fa: 	jmp	.Ltmp707 # Offset: 250
DWARF CFI Instructions:
    <empty>
End of Function "_Z17InvertBitsHalfOptImEvPT_mm"

Binary Function "_Z15InvertBitsShiftImEvPT_mm" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0xd310
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0xd310
  Section     : .text
  Orc Section : .local.text._Z15InvertBitsShiftImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp708 # Offset: 10
    0000000c: 	je	.Ltmp708 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp709:
    00000018: 	movq	%rcx, %rax
    0000001b: 	movq	%r8, %rsi
    0000001e: 	shlq	%cl, %rsi
    00000021: 	shrq	$0x6, %rax
    00000025: 	addq	$0x1, %rcx
    00000029: 	xorq	%rsi, (%rdi,%rax,8)
    0000002d: 	cmpq	%rcx, %rdx
    00000030: 	jne	.Ltmp709 # Offset: 48
.Ltmp708:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z15InvertBitsShiftImEvPT_mm"

Binary Function "_Z10InvertBitsImEvPT_mm" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0xd350
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0xd350
  Section     : .text
  Orc Section : .local.text._Z10InvertBitsImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp710 # Offset: 10
    0000000c: 	je	.Ltmp710 # Offset: 12
    0000000e: 	movl	$0x1, %r8d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp711:
    00000018: 	movq	%rcx, %rax
    0000001b: 	movq	%r8, %rsi
    0000001e: 	shlq	%cl, %rsi
    00000021: 	shrq	$0x6, %rax
    00000025: 	addq	$0x1, %rcx
    00000029: 	xorq	%rsi, (%rdi,%rax,8)
    0000002d: 	cmpq	%rcx, %rdx
    00000030: 	jne	.Ltmp711 # Offset: 48
.Ltmp710:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z10InvertBitsImEvPT_mm"

Binary Function "_Z21AndBitTablesOptimizedImEvPT_PKS0_mm" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0xd390
  Size        : 0x1a1
  MaxSize     : 0x1b0
  Offset      : 0xd390
  Section     : .text
  Orc Section : .local.text._Z21AndBitTablesOptimizedImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp712 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rcx, %rax
    00000012: 	movq	%rdx, %r8
    00000015: 	movq	%rcx, %r10
    00000018: 	pushq	%r12
    0000001a: 	shrq	$0x6, %rax
    0000001e: 	pushq	%rbp
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rcx, %rbx
    00000023: 	subq	%rdx, %rbx
    00000026: 	shrq	$0x6, %rdx
    0000002a: 	cmpq	%rdx, %rax
    0000002d: 	ja	.Ltmp713 # Offset: 45
.Ltmp719:
    00000033: 	cmpq	$0x3f, %rbx
    00000037: 	jbe	.Ltmp714 # Offset: 55
    0000003d: 	leaq	(,%rdx,8), %rcx
    00000045: 	leaq	0x1(%rdx), %r11
    00000049: 	leaq	(%rdi,%rcx), %r9
    0000004d: 	leaq	0x8(%rsi,%rcx), %rax
    00000052: 	movq	%r11, %r12
    00000055: 	leaq	-0x40(%rbx), %rbp
    00000059: 	cmpq	%rax, %r9
    0000005c: 	je	.Ltmp715 # Offset: 92
    00000062: 	cmpq	$0x7f, %rbp
    00000066: 	jbe	.Ltmp715 # Offset: 102
    0000006c: 	movq	%rbp, %r13
    0000006f: 	addq	%rsi, %rcx
    00000072: 	xorl	%eax, %eax
    00000074: 	shrq	$0x6, %r13
    00000078: 	addq	$0x1, %r13
    0000007c: 	movq	%r13, %r11
    0000007f: 	shrq	%r11
    00000082: 	shlq	$0x4, %r11
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp716:
    00000090: 	movdqu	(%r9,%rax), %xmm0
    00000096: 	movdqu	(%rcx,%rax), %xmm1
    0000009b: 	pand	%xmm1, %xmm0
    0000009f: 	movups	%xmm0, (%r9,%rax)
    000000a4: 	addq	$0x10, %rax
    000000a8: 	cmpq	%rax, %r11
    000000ab: 	jne	.Ltmp716 # Offset: 171
    000000ad: 	movq	%r13, %rcx
    000000b0: 	andq	$-0x2, %rcx
    000000b4: 	leaq	(%rdx,%rcx), %rax
    000000b8: 	cmpq	%rcx, %r13
    000000bb: 	je	.Ltmp717 # Offset: 187
    000000bd: 	movq	(%rsi,%rax,8), %r9
    000000c1: 	andq	%r9, (%rdi,%rax,8)
.Ltmp717:
    000000c5: 	movq	%rbp, %rax
    000000c8: 	andl	$0x3f, %ebx
    000000cb: 	andq	$-0x40, %rax
    000000cf: 	leaq	0x40(%r8,%rax), %r8
    000000d4: 	movq	%rbp, %rax
    000000d7: 	shrq	$0x6, %rax
    000000db: 	leaq	(%rax,%r12), %rdx
.Ltmp714:
    000000df: 	testq	%rbx, %rbx
    000000e2: 	je	.Ltmp718 # Offset: 226
    000000e4: 	movq	(%rsi,%rdx,8), %rsi
    000000e8: 	leaq	(%rdi,%rdx,8), %rdi
    000000ec: 	movq	$-0x1, %rdx
    000000f3: 	movl	%r10d, %ecx
    000000f6: 	movq	%rdx, %rax
    000000f9: 	shlq	%cl, %rax
    000000fc: 	movl	%r8d, %ecx
    000000ff: 	shlq	%cl, %rdx
    00000102: 	notq	%rax
    00000105: 	andq	%rdx, %rax
    00000108: 	movq	(%rdi), %rdx
    0000010b: 	xorq	%rsi, %rdx
    0000010e: 	andq	%rdx, %rax
    00000111: 	xorq	%rsi, %rax
    00000114: 	andq	(%rdi), %rax
    00000117: 	movq	%rax, (%rdi)
.Ltmp718:
    0000011a: 	popq	%rbx
    0000011b: 	popq	%rbp
    0000011c: 	popq	%r12
    0000011e: 	popq	%r13
    00000120: 	retq # Offset: 288
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp713:
    00000128: 	movq	%r8, %rcx
    0000012b: 	andl	$0x3f, %ecx
    0000012e: 	je	.Ltmp719 # Offset: 302
    00000134: 	leaq	(%rdi,%rdx,8), %r9
    00000138: 	movq	(%rsi,%rdx,8), %r11
    0000013c: 	addq	$0x40, %r8
    00000140: 	movq	$-0x1, %rdx
    00000147: 	movq	(%r9), %rax
    0000014a: 	shlq	%cl, %rdx
    0000014d: 	subq	%rcx, %r8
    00000150: 	leaq	-0x40(%rcx,%rbx), %rbx
    00000155: 	xorq	%r11, %rax
    00000158: 	andq	%rdx, %rax
    0000015b: 	movq	%r8, %rdx
    0000015e: 	xorq	%r11, %rax
    00000161: 	andq	(%r9), %rax
    00000164: 	shrq	$0x6, %rdx
    00000168: 	movq	%rax, (%r9)
    0000016b: 	jmp	.Ltmp719 # Offset: 363
.Ltmp712:
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp715:
    00000178: 	movq	%rbp, %rcx
    0000017b: 	shrq	$0x6, %rcx
    0000017f: 	addq	%r11, %rcx
    00000182: 	jmp	.Ltmp720 # Offset: 386
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp721:
    00000188: 	addq	$0x1, %r11
.Ltmp720:
    0000018c: 	movq	(%rsi,%rdx,8), %rax
    00000190: 	andq	%rax, (%rdi,%rdx,8)
    00000194: 	movq	%r11, %rdx
    00000197: 	cmpq	%rcx, %r11
    0000019a: 	jne	.Ltmp721 # Offset: 410
    0000019c: 	jmp	.Ltmp717 # Offset: 412
DWARF CFI Instructions:
    <empty>
End of Function "_Z21AndBitTablesOptimizedImEvPT_PKS0_mm"

Binary Function "_Z19AndBitTablesHalfOptImEvPT_PKS0_mm" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0xd540
  Size        : 0x1bc
  MaxSize     : 0x1c0
  Offset      : 0xd540
  Section     : .text
  Orc Section : .local.text._Z19AndBitTablesHalfOptImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp722 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%rbp
    00000011: 	movq	%rsi, %r8
    00000014: 	movq	%rdx, %rax
    00000017: 	pushq	%rbx
    00000018: 	leaq	-0x1(%rcx), %rsi
    0000001c: 	je	.Ltmp723 # Offset: 28
    00000022: 	movl	$0x1, %r11d
    00000028: 	testb	$0x3f, %al
    0000002a: 	jne	.Ltmp724 # Offset: 42
    0000002c: 	jmp	.Ltmp725 # Offset: 44
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp726:
    00000038: 	testb	$0x3f, %al
    0000003a: 	je	.Ltmp725 # Offset: 58
.Ltmp724:
    00000040: 	movq	%rax, %rdx
    00000043: 	movl	%eax, %ecx
    00000045: 	addq	$0x1, %rax
    00000049: 	shrq	$0x6, %rdx
    0000004d: 	leaq	(%rdi,%rdx,8), %r9
    00000051: 	movq	(%r8,%rdx,8), %rbx
    00000055: 	movq	(%r9), %r10
    00000058: 	xorq	%r10, %rbx
    0000005b: 	movq	%rbx, %rdx
    0000005e: 	movq	%r11, %rbx
    00000061: 	shlq	%cl, %rbx
    00000064: 	andq	%rbx, %rdx
    00000067: 	notq	%rdx
    0000006a: 	andq	%r10, %rdx
    0000006d: 	movq	%rdx, (%r9)
    00000070: 	subq	$0x1, %rsi
    00000074: 	jae	.Ltmp726 # Offset: 116
    00000076: 	movq	%rax, %rcx
    00000079: 	shrq	$0x6, %rcx
.Ltmp732:
    0000007d: 	leaq	(,%rcx,8), %r10
    00000085: 	leaq	-0x40(%rsi), %rbx
    00000089: 	leaq	(%rdi,%r10), %r9
    0000008d: 	leaq	0x8(%r8,%r10), %r11
    00000092: 	leaq	0x1(%rcx), %rdx
    00000096: 	cmpq	%r11, %r9
    00000099: 	je	.Ltmp727 # Offset: 153
    0000009f: 	cmpq	$0x7f, %rbx
    000000a3: 	jbe	.Ltmp727 # Offset: 163
    000000a9: 	movq	%rbx, %rbp
    000000ac: 	addq	%r8, %r10
    000000af: 	xorl	%edx, %edx
    000000b1: 	shrq	$0x6, %rbp
    000000b5: 	addq	$0x1, %rbp
    000000b9: 	movq	%rbp, %r11
    000000bc: 	shrq	%r11
    000000bf: 	shlq	$0x4, %r11
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp728:
    000000c8: 	movdqu	(%r10,%rdx), %xmm0
    000000ce: 	movdqu	(%r9,%rdx), %xmm1
    000000d4: 	pand	%xmm1, %xmm0
    000000d8: 	movups	%xmm0, (%r9,%rdx)
    000000dd: 	addq	$0x10, %rdx
    000000e1: 	cmpq	%r11, %rdx
    000000e4: 	jne	.Ltmp728 # Offset: 228
    000000e6: 	movq	%rbp, %r9
    000000e9: 	andq	$-0x2, %r9
    000000ed: 	leaq	(%rcx,%r9), %rdx
    000000f1: 	cmpq	%rbp, %r9
    000000f4: 	je	.Ltmp729 # Offset: 244
    000000f6: 	movq	(%r8,%rdx,8), %rcx
    000000fa: 	andq	%rcx, (%rdi,%rdx,8)
.Ltmp729:
    000000fe: 	andq	$-0x40, %rbx
    00000102: 	andl	$0x3f, %esi
    00000105: 	leaq	0x40(%rax,%rbx), %rax
.Ltmp733:
    0000010a: 	testq	%rsi, %rsi
    0000010d: 	je	.Ltmp730 # Offset: 269
    0000010f: 	addq	%rax, %rsi
    00000112: 	movl	$0x1, %r11d
    00000118: 	nopl	(%rax,%rax) # Size: 8
.Ltmp731:
    00000120: 	movq	%rax, %rdx
    00000123: 	movl	%eax, %ecx
    00000125: 	addq	$0x1, %rax
    00000129: 	shrq	$0x6, %rdx
    0000012d: 	leaq	(%rdi,%rdx,8), %r9
    00000131: 	movq	(%r8,%rdx,8), %rbx
    00000135: 	movq	(%r9), %r10
    00000138: 	xorq	%r10, %rbx
    0000013b: 	movq	%rbx, %rdx
    0000013e: 	movq	%r11, %rbx
    00000141: 	shlq	%cl, %rbx
    00000144: 	andq	%rbx, %rdx
    00000147: 	notq	%rdx
    0000014a: 	andq	%r10, %rdx
    0000014d: 	movq	%rdx, (%r9)
    00000150: 	cmpq	%rsi, %rax
    00000153: 	jne	.Ltmp731 # Offset: 339
.Ltmp730:
    00000155: 	popq	%rbx
    00000156: 	popq	%rbp
    00000157: 	retq # Offset: 343
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp722:
    00000160: 	retq # Offset: 352
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp725:
    00000168: 	movq	%rax, %rcx
    0000016b: 	shrq	$0x6, %rcx
    0000016f: 	cmpq	$0x3f, %rsi
    00000173: 	ja	.Ltmp732 # Offset: 371
    00000179: 	jmp	.Ltmp733 # Offset: 377
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp727:
    00000180: 	movq	%rbx, %r10
    00000183: 	shrq	$0x6, %r10
    00000187: 	addq	%rdx, %r10
    0000018a: 	jmp	.Ltmp734 # Offset: 394
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp735:
    00000190: 	addq	$0x1, %rdx
.Ltmp734:
    00000194: 	movq	(%r8,%rcx,8), %r9
    00000198: 	andq	%r9, (%rdi,%rcx,8)
    0000019c: 	movq	%rdx, %rcx
    0000019f: 	cmpq	%rdx, %r10
    000001a2: 	jne	.Ltmp735 # Offset: 418
    000001a4: 	jmp	.Ltmp729 # Offset: 420
.Ltmp723:
    000001a9: 	movq	%rdx, %rcx
    000001ac: 	movq	$-0x1, %rsi
    000001b3: 	shrq	$0x6, %rcx
    000001b7: 	jmp	.Ltmp732 # Offset: 439
DWARF CFI Instructions:
    <empty>
End of Function "_Z19AndBitTablesHalfOptImEvPT_PKS0_mm"

Binary Function "_Z17AndBitTablesShiftImEvPT_PKS0_mm" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0xd700
  Size        : 0x61
  MaxSize     : 0x70
  Offset      : 0xd700
  Section     : .text
  Orc Section : .local.text._Z17AndBitTablesShiftImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp736 # Offset: 7
    00000009: 	je	.Ltmp736 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rsi, %r10
    00000012: 	movq	%rcx, %r8
    00000015: 	movl	$0x1, %r11d
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp737:
    00000020: 	movq	%rdx, %rax
    00000023: 	movq	%r11, %rbx
    00000026: 	shrq	$0x6, %rax
    0000002a: 	leaq	(%r9,%rax,8), %rsi
    0000002e: 	movq	(%r10,%rax,8), %rcx
    00000032: 	movq	(%rsi), %rdi
    00000035: 	xorq	%rdi, %rcx
    00000038: 	movq	%rcx, %rax
    0000003b: 	movl	%edx, %ecx
    0000003d: 	addq	$0x1, %rdx
    00000041: 	shlq	%cl, %rbx
    00000044: 	andq	%rbx, %rax
    00000047: 	notq	%rax
    0000004a: 	andq	%rdi, %rax
    0000004d: 	movq	%rax, (%rsi)
    00000050: 	cmpq	%rdx, %r8
    00000053: 	jne	.Ltmp737 # Offset: 83
    00000055: 	popq	%rbx
    00000056: 	retq # Offset: 86
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp736:
    00000060: 	retq # Offset: 96
DWARF CFI Instructions:
    <empty>
End of Function "_Z17AndBitTablesShiftImEvPT_PKS0_mm"

Binary Function "_Z12AndBitTablesImEvPT_PKS0_mm" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0xd770
  Size        : 0x61
  MaxSize     : 0x70
  Offset      : 0xd770
  Section     : .text
  Orc Section : .local.text._Z12AndBitTablesImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp738 # Offset: 7
    00000009: 	je	.Ltmp738 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rsi, %r10
    00000012: 	movq	%rcx, %r8
    00000015: 	movl	$0x1, %r11d
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp739:
    00000020: 	movq	%rdx, %rax
    00000023: 	movq	%r11, %rbx
    00000026: 	shrq	$0x6, %rax
    0000002a: 	leaq	(%r9,%rax,8), %rsi
    0000002e: 	movq	(%r10,%rax,8), %rcx
    00000032: 	movq	(%rsi), %rdi
    00000035: 	xorq	%rdi, %rcx
    00000038: 	movq	%rcx, %rax
    0000003b: 	movl	%edx, %ecx
    0000003d: 	addq	$0x1, %rdx
    00000041: 	shlq	%cl, %rbx
    00000044: 	andq	%rbx, %rax
    00000047: 	notq	%rax
    0000004a: 	andq	%rdi, %rax
    0000004d: 	movq	%rax, (%rsi)
    00000050: 	cmpq	%rdx, %r8
    00000053: 	jne	.Ltmp739 # Offset: 83
    00000055: 	popq	%rbx
    00000056: 	retq # Offset: 86
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp738:
    00000060: 	retq # Offset: 96
DWARF CFI Instructions:
    <empty>
End of Function "_Z12AndBitTablesImEvPT_PKS0_mm"

Binary Function "_Z18OrBitTablesHalfOptImEvPT_PKS0_mm" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0xd7e0
  Size        : 0x19c
  MaxSize     : 0x1a0
  Offset      : 0xd7e0
  Section     : .text
  Orc Section : .local.text._Z18OrBitTablesHalfOptImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp740 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdx, %rax
    00000014: 	movq	%rsi, %r8
    00000017: 	pushq	%rbx
    00000018: 	leaq	-0x1(%rcx), %rdx
    0000001c: 	je	.Ltmp741 # Offset: 28
    00000022: 	movl	$0x1, %r9d
    00000028: 	testb	$0x3f, %al
    0000002a: 	jne	.Ltmp742 # Offset: 42
    0000002c: 	jmp	.Ltmp743 # Offset: 44
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp744:
    00000038: 	testb	$0x3f, %al
    0000003a: 	je	.Ltmp743 # Offset: 58
.Ltmp742:
    00000040: 	movq	%rax, %rsi
    00000043: 	movl	%eax, %ecx
    00000045: 	movq	%r9, %rbx
    00000048: 	addq	$0x1, %rax
    0000004c: 	shrq	$0x6, %rsi
    00000050: 	shlq	%cl, %rbx
    00000053: 	movq	(%r8,%rsi,8), %rcx
    00000057: 	andq	%rbx, %rcx
    0000005a: 	orq	%rcx, (%rdi,%rsi,8)
    0000005e: 	subq	$0x1, %rdx
    00000062: 	jae	.Ltmp744 # Offset: 98
    00000064: 	movq	%rax, %rsi
    00000067: 	shrq	$0x6, %rsi
.Ltmp750:
    0000006b: 	leaq	(,%rsi,8), %r10
    00000073: 	leaq	-0x40(%rdx), %rbx
    00000077: 	leaq	(%rdi,%r10), %r9
    0000007b: 	leaq	0x8(%r8,%r10), %r11
    00000080: 	leaq	0x1(%rsi), %rcx
    00000084: 	cmpq	%r11, %r9
    00000087: 	je	.Ltmp745 # Offset: 135
    0000008d: 	cmpq	$0x7f, %rbx
    00000091: 	jbe	.Ltmp745 # Offset: 145
    00000097: 	movq	%rbx, %rbp
    0000009a: 	addq	%r8, %r10
    0000009d: 	xorl	%ecx, %ecx
    0000009f: 	shrq	$0x6, %rbp
    000000a3: 	addq	$0x1, %rbp
    000000a7: 	movq	%rbp, %r11
    000000aa: 	shrq	%r11
    000000ad: 	shlq	$0x4, %r11
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp746:
    000000b8: 	movdqu	(%r10,%rcx), %xmm0
    000000be: 	movdqu	(%r9,%rcx), %xmm1
    000000c4: 	por	%xmm1, %xmm0
    000000c8: 	movups	%xmm0, (%r9,%rcx)
    000000cd: 	addq	$0x10, %rcx
    000000d1: 	cmpq	%r11, %rcx
    000000d4: 	jne	.Ltmp746 # Offset: 212
    000000d6: 	movq	%rbp, %r9
    000000d9: 	andq	$-0x2, %r9
    000000dd: 	leaq	(%rsi,%r9), %rcx
    000000e1: 	cmpq	%rbp, %r9
    000000e4: 	je	.Ltmp747 # Offset: 228
    000000e6: 	movq	(%r8,%rcx,8), %rsi
    000000ea: 	orq	%rsi, (%rdi,%rcx,8)
.Ltmp747:
    000000ee: 	andq	$-0x40, %rbx
    000000f2: 	andl	$0x3f, %edx
    000000f5: 	leaq	0x40(%rax,%rbx), %rax
.Ltmp751:
    000000fa: 	testq	%rdx, %rdx
    000000fd: 	je	.Ltmp748 # Offset: 253
    000000ff: 	addq	%rax, %rdx
    00000102: 	movl	$0x1, %r9d
    00000108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp749:
    00000110: 	movq	%rax, %rsi
    00000113: 	movl	%eax, %ecx
    00000115: 	movq	%r9, %rbx
    00000118: 	addq	$0x1, %rax
    0000011c: 	shrq	$0x6, %rsi
    00000120: 	shlq	%cl, %rbx
    00000123: 	movq	(%r8,%rsi,8), %rcx
    00000127: 	andq	%rbx, %rcx
    0000012a: 	orq	%rcx, (%rdi,%rsi,8)
    0000012e: 	cmpq	%rdx, %rax
    00000131: 	jne	.Ltmp749 # Offset: 305
.Ltmp748:
    00000133: 	popq	%rbx
    00000134: 	popq	%rbp
    00000135: 	retq # Offset: 309
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp740:
    00000140: 	retq # Offset: 320
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp743:
    00000148: 	movq	%rax, %rsi
    0000014b: 	shrq	$0x6, %rsi
    0000014f: 	cmpq	$0x3f, %rdx
    00000153: 	ja	.Ltmp750 # Offset: 339
    00000159: 	jmp	.Ltmp751 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp745:
    00000160: 	movq	%rbx, %r10
    00000163: 	shrq	$0x6, %r10
    00000167: 	addq	%rcx, %r10
    0000016a: 	jmp	.Ltmp752 # Offset: 362
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp753:
    00000170: 	addq	$0x1, %rcx
.Ltmp752:
    00000174: 	movq	(%r8,%rsi,8), %r9
    00000178: 	orq	%r9, (%rdi,%rsi,8)
    0000017c: 	movq	%rcx, %rsi
    0000017f: 	cmpq	%rcx, %r10
    00000182: 	jne	.Ltmp753 # Offset: 386
    00000184: 	jmp	.Ltmp747 # Offset: 388
.Ltmp741:
    00000189: 	movq	%rax, %rsi
    0000018c: 	movq	$-0x1, %rdx
    00000193: 	shrq	$0x6, %rsi
    00000197: 	jmp	.Ltmp750 # Offset: 407
DWARF CFI Instructions:
    <empty>
End of Function "_Z18OrBitTablesHalfOptImEvPT_PKS0_mm"

Binary Function "_Z16OrBitTablesShiftImEvPT_PKS0_mm" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0xd980
  Size        : 0x3c
  MaxSize     : 0x40
  Offset      : 0xd980
  Section     : .text
  Orc Section : .local.text._Z16OrBitTablesShiftImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp754 # Offset: 10
    0000000c: 	je	.Ltmp754 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp755:
    00000018: 	movq	%rdx, %rax
    0000001b: 	movl	%edx, %ecx
    0000001d: 	movq	%r9, %r10
    00000020: 	addq	$0x1, %rdx
    00000024: 	shrq	$0x6, %rax
    00000028: 	shlq	%cl, %r10
    0000002b: 	movq	(%rsi,%rax,8), %rcx
    0000002f: 	andq	%r10, %rcx
    00000032: 	orq	%rcx, (%rdi,%rax,8)
    00000036: 	cmpq	%rdx, %r8
    00000039: 	jne	.Ltmp755 # Offset: 57
.Ltmp754:
    0000003b: 	retq # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z16OrBitTablesShiftImEvPT_PKS0_mm"

Binary Function "_Z11OrBitTablesImEvPT_PKS0_mm" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0xd9c0
  Size        : 0x3c
  MaxSize     : 0x40
  Offset      : 0xd9c0
  Section     : .text
  Orc Section : .local.text._Z11OrBitTablesImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp756 # Offset: 10
    0000000c: 	je	.Ltmp756 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp757:
    00000018: 	movq	%rdx, %rax
    0000001b: 	movl	%edx, %ecx
    0000001d: 	movq	%r9, %r10
    00000020: 	addq	$0x1, %rdx
    00000024: 	shrq	$0x6, %rax
    00000028: 	shlq	%cl, %r10
    0000002b: 	movq	(%rsi,%rax,8), %rcx
    0000002f: 	andq	%r10, %rcx
    00000032: 	orq	%rcx, (%rdi,%rax,8)
    00000036: 	cmpq	%rdx, %r8
    00000039: 	jne	.Ltmp757 # Offset: 57
.Ltmp756:
    0000003b: 	retq # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z11OrBitTablesImEvPT_PKS0_mm"

Binary Function "_Z19XorBitTablesHalfOptImEvPT_PKS0_mm" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0xda00
  Size        : 0x19c
  MaxSize     : 0x1a0
  Offset      : 0xda00
  Section     : .text
  Orc Section : .local.text._Z19XorBitTablesHalfOptImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp758 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdx, %rax
    00000014: 	movq	%rsi, %r8
    00000017: 	pushq	%rbx
    00000018: 	leaq	-0x1(%rcx), %rdx
    0000001c: 	je	.Ltmp759 # Offset: 28
    00000022: 	movl	$0x1, %r9d
    00000028: 	testb	$0x3f, %al
    0000002a: 	jne	.Ltmp760 # Offset: 42
    0000002c: 	jmp	.Ltmp761 # Offset: 44
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp762:
    00000038: 	testb	$0x3f, %al
    0000003a: 	je	.Ltmp761 # Offset: 58
.Ltmp760:
    00000040: 	movq	%rax, %rsi
    00000043: 	movl	%eax, %ecx
    00000045: 	movq	%r9, %rbx
    00000048: 	addq	$0x1, %rax
    0000004c: 	shrq	$0x6, %rsi
    00000050: 	shlq	%cl, %rbx
    00000053: 	movq	(%r8,%rsi,8), %rcx
    00000057: 	andq	%rbx, %rcx
    0000005a: 	xorq	%rcx, (%rdi,%rsi,8)
    0000005e: 	subq	$0x1, %rdx
    00000062: 	jae	.Ltmp762 # Offset: 98
    00000064: 	movq	%rax, %rsi
    00000067: 	shrq	$0x6, %rsi
.Ltmp768:
    0000006b: 	leaq	(,%rsi,8), %r10
    00000073: 	leaq	-0x40(%rdx), %rbx
    00000077: 	leaq	(%rdi,%r10), %r9
    0000007b: 	leaq	0x8(%r8,%r10), %r11
    00000080: 	leaq	0x1(%rsi), %rcx
    00000084: 	cmpq	%r11, %r9
    00000087: 	je	.Ltmp763 # Offset: 135
    0000008d: 	cmpq	$0x7f, %rbx
    00000091: 	jbe	.Ltmp763 # Offset: 145
    00000097: 	movq	%rbx, %rbp
    0000009a: 	addq	%r8, %r10
    0000009d: 	xorl	%ecx, %ecx
    0000009f: 	shrq	$0x6, %rbp
    000000a3: 	addq	$0x1, %rbp
    000000a7: 	movq	%rbp, %r11
    000000aa: 	shrq	%r11
    000000ad: 	shlq	$0x4, %r11
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp764:
    000000b8: 	movdqu	(%r10,%rcx), %xmm0
    000000be: 	movdqu	(%r9,%rcx), %xmm1
    000000c4: 	pxor	%xmm1, %xmm0
    000000c8: 	movups	%xmm0, (%r9,%rcx)
    000000cd: 	addq	$0x10, %rcx
    000000d1: 	cmpq	%r11, %rcx
    000000d4: 	jne	.Ltmp764 # Offset: 212
    000000d6: 	movq	%rbp, %r9
    000000d9: 	andq	$-0x2, %r9
    000000dd: 	leaq	(%rsi,%r9), %rcx
    000000e1: 	cmpq	%rbp, %r9
    000000e4: 	je	.Ltmp765 # Offset: 228
    000000e6: 	movq	(%r8,%rcx,8), %rsi
    000000ea: 	xorq	%rsi, (%rdi,%rcx,8)
.Ltmp765:
    000000ee: 	andq	$-0x40, %rbx
    000000f2: 	andl	$0x3f, %edx
    000000f5: 	leaq	0x40(%rax,%rbx), %rax
.Ltmp769:
    000000fa: 	testq	%rdx, %rdx
    000000fd: 	je	.Ltmp766 # Offset: 253
    000000ff: 	addq	%rax, %rdx
    00000102: 	movl	$0x1, %r9d
    00000108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp767:
    00000110: 	movq	%rax, %rsi
    00000113: 	movl	%eax, %ecx
    00000115: 	movq	%r9, %rbx
    00000118: 	addq	$0x1, %rax
    0000011c: 	shrq	$0x6, %rsi
    00000120: 	shlq	%cl, %rbx
    00000123: 	movq	(%r8,%rsi,8), %rcx
    00000127: 	andq	%rbx, %rcx
    0000012a: 	xorq	%rcx, (%rdi,%rsi,8)
    0000012e: 	cmpq	%rdx, %rax
    00000131: 	jne	.Ltmp767 # Offset: 305
.Ltmp766:
    00000133: 	popq	%rbx
    00000134: 	popq	%rbp
    00000135: 	retq # Offset: 309
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp758:
    00000140: 	retq # Offset: 320
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp761:
    00000148: 	movq	%rax, %rsi
    0000014b: 	shrq	$0x6, %rsi
    0000014f: 	cmpq	$0x3f, %rdx
    00000153: 	ja	.Ltmp768 # Offset: 339
    00000159: 	jmp	.Ltmp769 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp763:
    00000160: 	movq	%rbx, %r10
    00000163: 	shrq	$0x6, %r10
    00000167: 	addq	%rcx, %r10
    0000016a: 	jmp	.Ltmp770 # Offset: 362
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp771:
    00000170: 	addq	$0x1, %rcx
.Ltmp770:
    00000174: 	movq	(%r8,%rsi,8), %r9
    00000178: 	xorq	%r9, (%rdi,%rsi,8)
    0000017c: 	movq	%rcx, %rsi
    0000017f: 	cmpq	%rcx, %r10
    00000182: 	jne	.Ltmp771 # Offset: 386
    00000184: 	jmp	.Ltmp765 # Offset: 388
.Ltmp759:
    00000189: 	movq	%rax, %rsi
    0000018c: 	movq	$-0x1, %rdx
    00000193: 	shrq	$0x6, %rsi
    00000197: 	jmp	.Ltmp768 # Offset: 407
DWARF CFI Instructions:
    <empty>
End of Function "_Z19XorBitTablesHalfOptImEvPT_PKS0_mm"

Binary Function "_Z17XorBitTablesShiftImEvPT_PKS0_mm" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0xdba0
  Size        : 0x3c
  MaxSize     : 0x40
  Offset      : 0xdba0
  Section     : .text
  Orc Section : .local.text._Z17XorBitTablesShiftImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp772 # Offset: 10
    0000000c: 	je	.Ltmp772 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp773:
    00000018: 	movq	%rdx, %rax
    0000001b: 	movl	%edx, %ecx
    0000001d: 	movq	%r9, %r10
    00000020: 	addq	$0x1, %rdx
    00000024: 	shrq	$0x6, %rax
    00000028: 	shlq	%cl, %r10
    0000002b: 	movq	(%rsi,%rax,8), %rcx
    0000002f: 	andq	%r10, %rcx
    00000032: 	xorq	%rcx, (%rdi,%rax,8)
    00000036: 	cmpq	%rdx, %r8
    00000039: 	jne	.Ltmp773 # Offset: 57
.Ltmp772:
    0000003b: 	retq # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z17XorBitTablesShiftImEvPT_PKS0_mm"

Binary Function "_Z12XorBitTablesImEvPT_PKS0_mm" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0xdbe0
  Size        : 0x3c
  MaxSize     : 0x40
  Offset      : 0xdbe0
  Section     : .text
  Orc Section : .local.text._Z12XorBitTablesImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	movq	%rcx, %r8
    00000007: 	cmpq	%rdx, %rcx
    0000000a: 	jb	.Ltmp774 # Offset: 10
    0000000c: 	je	.Ltmp774 # Offset: 12
    0000000e: 	movl	$0x1, %r9d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp775:
    00000018: 	movq	%rdx, %rax
    0000001b: 	movl	%edx, %ecx
    0000001d: 	movq	%r9, %r10
    00000020: 	addq	$0x1, %rdx
    00000024: 	shrq	$0x6, %rax
    00000028: 	shlq	%cl, %r10
    0000002b: 	movq	(%rsi,%rax,8), %rcx
    0000002f: 	andq	%r10, %rcx
    00000032: 	xorq	%rcx, (%rdi,%rax,8)
    00000036: 	cmpq	%rdx, %r8
    00000039: 	jne	.Ltmp775 # Offset: 57
.Ltmp774:
    0000003b: 	retq # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z12XorBitTablesImEvPT_PKS0_mm"

Binary Function "_Z29AndComplimentBitTablesHalfOptImEvPT_PKS0_mm" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0xdc20
  Size        : 0x1af
  MaxSize     : 0x1b0
  Offset      : 0xdc20
  Section     : .text
  Orc Section : .local.text._Z29AndComplimentBitTablesHalfOptImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp776 # Offset: 7
    0000000d: 	subq	%rdx, %rcx
    00000010: 	pushq	%rbp
    00000011: 	movq	%rsi, %r8
    00000014: 	movq	%rdx, %rax
    00000017: 	pushq	%rbx
    00000018: 	leaq	-0x1(%rcx), %rsi
    0000001c: 	je	.Ltmp777 # Offset: 28
    00000022: 	movl	$0x1, %ebx
    00000027: 	testb	$0x3f, %al
    00000029: 	jne	.Ltmp778 # Offset: 41
    0000002b: 	jmp	.Ltmp779 # Offset: 43
.Ltmp780:
    00000030: 	testb	$0x3f, %al
    00000032: 	je	.Ltmp779 # Offset: 50
.Ltmp778:
    00000038: 	movq	%rax, %r11
    0000003b: 	movl	%eax, %ecx
    0000003d: 	movq	%rbx, %rdx
    00000040: 	addq	$0x1, %rax
    00000044: 	shrq	$0x6, %r11
    00000048: 	shlq	%cl, %rdx
    0000004b: 	leaq	(%rdi,%r11,8), %r9
    0000004f: 	movq	(%r8,%r11,8), %rcx
    00000053: 	notq	%rdx
    00000056: 	movq	(%r9), %r10
    00000059: 	xorq	%r10, %rcx
    0000005c: 	orq	%rcx, %rdx
    0000005f: 	andq	%r10, %rdx
    00000062: 	movq	%rdx, (%r9)
    00000065: 	subq	$0x1, %rsi
    00000069: 	jae	.Ltmp780 # Offset: 105
    0000006b: 	movq	%rax, %rcx
    0000006e: 	shrq	$0x6, %rcx
.Ltmp786:
    00000072: 	leaq	(,%rcx,8), %r10
    0000007a: 	leaq	-0x40(%rsi), %rbx
    0000007e: 	leaq	(%rdi,%r10), %r9
    00000082: 	leaq	0x8(%r8,%r10), %r11
    00000087: 	leaq	0x1(%rcx), %rdx
    0000008b: 	cmpq	%r11, %r9
    0000008e: 	je	.Ltmp781 # Offset: 142
    00000094: 	cmpq	$0x7f, %rbx
    00000098: 	jbe	.Ltmp781 # Offset: 152
    0000009e: 	movq	%rbx, %rbp
    000000a1: 	addq	%r8, %r10
    000000a4: 	xorl	%edx, %edx
    000000a6: 	shrq	$0x6, %rbp
    000000aa: 	addq	$0x1, %rbp
    000000ae: 	movq	%rbp, %r11
    000000b1: 	shrq	%r11
    000000b4: 	shlq	$0x4, %r11
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp782:
    000000c0: 	movdqu	(%r10,%rdx), %xmm0
    000000c6: 	movdqu	(%r9,%rdx), %xmm1
    000000cc: 	pandn	%xmm1, %xmm0
    000000d0: 	movups	%xmm0, (%r9,%rdx)
    000000d5: 	addq	$0x10, %rdx
    000000d9: 	cmpq	%r11, %rdx
    000000dc: 	jne	.Ltmp782 # Offset: 220
    000000de: 	movq	%rbp, %rdx
    000000e1: 	andq	$-0x2, %rdx
    000000e5: 	addq	%rdx, %rcx
    000000e8: 	cmpq	%rbp, %rdx
    000000eb: 	je	.Ltmp783 # Offset: 235
    000000ed: 	movq	(%r8,%rcx,8), %rdx
    000000f1: 	notq	%rdx
    000000f4: 	andq	%rdx, (%rdi,%rcx,8)
.Ltmp783:
    000000f8: 	andq	$-0x40, %rbx
    000000fc: 	andl	$0x3f, %esi
    000000ff: 	leaq	0x40(%rax,%rbx), %rax
.Ltmp787:
    00000104: 	testq	%rsi, %rsi
    00000107: 	je	.Ltmp784 # Offset: 263
    00000109: 	addq	%rax, %rsi
    0000010c: 	movl	$0x1, %ebx
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp785:
    00000118: 	movq	%rax, %r11
    0000011b: 	movl	%eax, %ecx
    0000011d: 	movq	%rbx, %rdx
    00000120: 	addq	$0x1, %rax
    00000124: 	shrq	$0x6, %r11
    00000128: 	shlq	%cl, %rdx
    0000012b: 	leaq	(%rdi,%r11,8), %r9
    0000012f: 	movq	(%r8,%r11,8), %rcx
    00000133: 	notq	%rdx
    00000136: 	movq	(%r9), %r10
    00000139: 	xorq	%r10, %rcx
    0000013c: 	orq	%rcx, %rdx
    0000013f: 	andq	%r10, %rdx
    00000142: 	movq	%rdx, (%r9)
    00000145: 	cmpq	%rsi, %rax
    00000148: 	jne	.Ltmp785 # Offset: 328
.Ltmp784:
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp776:
    00000150: 	retq # Offset: 336
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp779:
    00000158: 	movq	%rax, %rcx
    0000015b: 	shrq	$0x6, %rcx
    0000015f: 	cmpq	$0x3f, %rsi
    00000163: 	ja	.Ltmp786 # Offset: 355
    00000169: 	jmp	.Ltmp787 # Offset: 361
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp781:
    00000170: 	movq	%rbx, %r10
    00000173: 	shrq	$0x6, %r10
    00000177: 	addq	%rdx, %r10
    0000017a: 	jmp	.Ltmp788 # Offset: 378
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp789:
    00000180: 	addq	$0x1, %rdx
.Ltmp788:
    00000184: 	movq	(%r8,%rcx,8), %r9
    00000188: 	notq	%r9
    0000018b: 	andq	%r9, (%rdi,%rcx,8)
    0000018f: 	movq	%rdx, %rcx
    00000192: 	cmpq	%rdx, %r10
    00000195: 	jne	.Ltmp789 # Offset: 405
    00000197: 	jmp	.Ltmp783 # Offset: 407
.Ltmp777:
    0000019c: 	movq	%rdx, %rcx
    0000019f: 	movq	$-0x1, %rsi
    000001a6: 	shrq	$0x6, %rcx
    000001aa: 	jmp	.Ltmp786 # Offset: 426
DWARF CFI Instructions:
    <empty>
End of Function "_Z29AndComplimentBitTablesHalfOptImEvPT_PKS0_mm"

Binary Function "_Z27AndComplimentBitTablesShiftImEvPT_PKS0_mm" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0xddd0
  Size        : 0x59
  MaxSize     : 0x60
  Offset      : 0xddd0
  Section     : .text
  Orc Section : .local.text._Z27AndComplimentBitTablesShiftImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp790 # Offset: 7
    00000009: 	je	.Ltmp790 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %r11
    00000012: 	movq	%rcx, %r9
    00000015: 	movl	$0x1, %ebx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp791:
    00000020: 	movq	%rdx, %r8
    00000023: 	movl	%edx, %ecx
    00000025: 	movq	%rbx, %rax
    00000028: 	addq	$0x1, %rdx
    0000002c: 	shrq	$0x6, %r8
    00000030: 	shlq	%cl, %rax
    00000033: 	leaq	(%r10,%r8,8), %rsi
    00000037: 	movq	(%r11,%r8,8), %rcx
    0000003b: 	notq	%rax
    0000003e: 	movq	(%rsi), %rdi
    00000041: 	xorq	%rdi, %rcx
    00000044: 	orq	%rcx, %rax
    00000047: 	andq	%rdi, %rax
    0000004a: 	movq	%rax, (%rsi)
    0000004d: 	cmpq	%rdx, %r9
    00000050: 	jne	.Ltmp791 # Offset: 80
    00000052: 	popq	%rbx
    00000053: 	retq # Offset: 83
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp790:
    00000058: 	retq # Offset: 88
DWARF CFI Instructions:
    <empty>
End of Function "_Z27AndComplimentBitTablesShiftImEvPT_PKS0_mm"

Binary Function "_Z22AndComplimentBitTablesImEvPT_PKS0_mm" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0xde30
  Size        : 0x59
  MaxSize     : 0x60
  Offset      : 0xde30
  Section     : .text
  Orc Section : .local.text._Z22AndComplimentBitTablesImEvPT_PKS0_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	cmpq	%rdx, %rcx
    00000007: 	jb	.Ltmp792 # Offset: 7
    00000009: 	je	.Ltmp792 # Offset: 9
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %r11
    00000012: 	movq	%rcx, %r9
    00000015: 	movl	$0x1, %ebx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp793:
    00000020: 	movq	%rdx, %r8
    00000023: 	movl	%edx, %ecx
    00000025: 	movq	%rbx, %rax
    00000028: 	addq	$0x1, %rdx
    0000002c: 	shrq	$0x6, %r8
    00000030: 	shlq	%cl, %rax
    00000033: 	leaq	(%r10,%r8,8), %rsi
    00000037: 	movq	(%r11,%r8,8), %rcx
    0000003b: 	notq	%rax
    0000003e: 	movq	(%rsi), %rdi
    00000041: 	xorq	%rdi, %rcx
    00000044: 	orq	%rcx, %rax
    00000047: 	andq	%rdi, %rax
    0000004a: 	movq	%rax, (%rsi)
    0000004d: 	cmpq	%rdx, %r9
    00000050: 	jne	.Ltmp793 # Offset: 80
    00000052: 	popq	%rbx
    00000053: 	retq # Offset: 83
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp792:
    00000058: 	retq # Offset: 88
DWARF CFI Instructions:
    <empty>
End of Function "_Z22AndComplimentBitTablesImEvPT_PKS0_mm"

Binary Function "_Z23StencilBitTablesHalfOptImEvPT_PKS0_S3_mm" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0xde90
  Size        : 0x1d0
  MaxSize     : 0x1d0
  Offset      : 0xde90
  Section     : .text
  Orc Section : .local.text._Z23StencilBitTablesHalfOptImEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	cmpq	%rcx, %r8
    00000007: 	jb	.Ltmp794 # Offset: 7
    0000000d: 	subq	%rcx, %r8
    00000010: 	pushq	%r13
    00000012: 	movq	%rdi, %rax
    00000015: 	movq	%rsi, %r9
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r10
    0000001d: 	leaq	-0x1(%r8), %rdi
    00000021: 	pushq	%rbp
    00000022: 	pushq	%rbx
    00000023: 	je	.Ltmp795 # Offset: 35
    00000029: 	movl	$0x1, %r11d
    0000002f: 	testb	$0x3f, %cl
    00000032: 	jne	.Ltmp796 # Offset: 50
    00000034: 	jmp	.Ltmp797 # Offset: 52
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp798:
    00000040: 	testb	$0x3f, %cl
    00000043: 	je	.Ltmp797 # Offset: 67
.Ltmp796:
    00000049: 	movq	%rcx, %rsi
    0000004c: 	movq	%r11, %r8
    0000004f: 	shrq	$0x6, %rsi
    00000053: 	shlq	%cl, %r8
    00000056: 	addq	$0x1, %rcx
    0000005a: 	movq	(%r9,%rsi,8), %rdx
    0000005e: 	andq	(%r10,%rsi,8), %rdx
    00000062: 	andq	%r8, %rdx
    00000065: 	orq	%rdx, (%rax,%rsi,8)
    00000069: 	subq	$0x1, %rdi
    0000006d: 	jae	.Ltmp798 # Offset: 109
    0000006f: 	movq	%rcx, %rsi
    00000072: 	shrq	$0x6, %rsi
.Ltmp804:
    00000076: 	leaq	(,%rsi,8), %r11
    0000007e: 	leaq	-0x40(%rdi), %rbx
    00000082: 	leaq	0x8(%r11), %rbp
    00000086: 	leaq	(%rax,%r11), %r8
    0000008a: 	leaq	(%r10,%rbp), %r12
    0000008e: 	leaq	0x1(%rsi), %rdx
    00000092: 	cmpq	%r12, %r8
    00000095: 	setne	%r12b
    00000099: 	addq	%r9, %rbp
    0000009c: 	cmpq	%rbp, %r8
    0000009f: 	setne	%bpl
    000000a3: 	testb	%bpl, %r12b
    000000a6: 	je	.Ltmp799 # Offset: 166
    000000ac: 	cmpq	$0x7f, %rbx
    000000b0: 	jbe	.Ltmp799 # Offset: 176
    000000b6: 	movq	%rbx, %r12
    000000b9: 	leaq	(%r9,%r11), %r13
    000000bd: 	xorl	%edx, %edx
    000000bf: 	addq	%r10, %r11
    000000c2: 	shrq	$0x6, %r12
    000000c6: 	addq	$0x1, %r12
    000000ca: 	movq	%r12, %rbp
    000000cd: 	shrq	%rbp
    000000d0: 	shlq	$0x4, %rbp
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp800:
    000000d8: 	movdqu	(%r11,%rdx), %xmm0
    000000de: 	movdqu	(%r13,%rdx), %xmm1
    000000e5: 	movdqu	(%r8,%rdx), %xmm2
    000000eb: 	pand	%xmm1, %xmm0
    000000ef: 	por	%xmm2, %xmm0
    000000f3: 	movups	%xmm0, (%r8,%rdx)
    000000f8: 	addq	$0x10, %rdx
    000000fc: 	cmpq	%rdx, %rbp
    000000ff: 	jne	.Ltmp800 # Offset: 255
    00000101: 	movq	%r12, %r8
    00000104: 	andq	$-0x2, %r8
    00000108: 	leaq	(%rsi,%r8), %rdx
    0000010c: 	cmpq	%r12, %r8
    0000010f: 	je	.Ltmp801 # Offset: 271
    00000111: 	movq	(%r10,%rdx,8), %rsi
    00000115: 	andq	(%r9,%rdx,8), %rsi
    00000119: 	orq	%rsi, (%rax,%rdx,8)
.Ltmp801:
    0000011d: 	andq	$-0x40, %rbx
    00000121: 	andl	$0x3f, %edi
    00000124: 	leaq	0x40(%rcx,%rbx), %rcx
.Ltmp805:
    00000129: 	testq	%rdi, %rdi
    0000012c: 	je	.Ltmp802 # Offset: 300
    0000012e: 	addq	%rcx, %rdi
    00000131: 	movl	$0x1, %r11d
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp803:
    00000140: 	movq	%rcx, %rsi
    00000143: 	movq	%r11, %r8
    00000146: 	shrq	$0x6, %rsi
    0000014a: 	shlq	%cl, %r8
    0000014d: 	addq	$0x1, %rcx
    00000151: 	movq	(%r9,%rsi,8), %rdx
    00000155: 	andq	(%r10,%rsi,8), %rdx
    00000159: 	andq	%r8, %rdx
    0000015c: 	orq	%rdx, (%rax,%rsi,8)
    00000160: 	cmpq	%rdi, %rcx
    00000163: 	jne	.Ltmp803 # Offset: 355
.Ltmp802:
    00000165: 	popq	%rbx
    00000166: 	popq	%rbp
    00000167: 	popq	%r12
    00000169: 	popq	%r13
    0000016b: 	retq # Offset: 363
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp794:
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp797:
    00000178: 	movq	%rcx, %rsi
    0000017b: 	shrq	$0x6, %rsi
    0000017f: 	cmpq	$0x3f, %rdi
    00000183: 	ja	.Ltmp804 # Offset: 387
    00000189: 	jmp	.Ltmp805 # Offset: 393
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp799:
    00000190: 	movq	%rbx, %r11
    00000193: 	shrq	$0x6, %r11
    00000197: 	addq	%rdx, %r11
    0000019a: 	jmp	.Ltmp806 # Offset: 410
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp807:
    000001a0: 	addq	$0x1, %rdx
.Ltmp806:
    000001a4: 	movq	(%r10,%rsi,8), %r8
    000001a8: 	andq	(%r9,%rsi,8), %r8
    000001ac: 	orq	%r8, (%rax,%rsi,8)
    000001b0: 	movq	%rdx, %rsi
    000001b3: 	cmpq	%rdx, %r11
    000001b6: 	jne	.Ltmp807 # Offset: 438
    000001b8: 	jmp	.Ltmp801 # Offset: 440
.Ltmp795:
    000001bd: 	movq	%rcx, %rsi
    000001c0: 	movq	$-0x1, %rdi
    000001c7: 	shrq	$0x6, %rsi
    000001cb: 	jmp	.Ltmp804 # Offset: 459
DWARF CFI Instructions:
    <empty>
End of Function "_Z23StencilBitTablesHalfOptImEvPT_PKS0_S3_mm"

Binary Function "_Z21StencilBitTablesShiftImEvPT_PKS0_S3_mm" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0xe060
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0xe060
  Section     : .text
  Orc Section : .local.text._Z21StencilBitTablesShiftImEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	cmpq	%rcx, %r8
    0000000a: 	jb	.Ltmp808 # Offset: 10
    0000000c: 	je	.Ltmp808 # Offset: 12
    0000000e: 	movl	$0x1, %r10d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp809:
    00000018: 	movq	%rcx, %rsi
    0000001b: 	movq	%r10, %rax
    0000001e: 	shrq	$0x6, %rsi
    00000022: 	shlq	%cl, %rax
    00000025: 	addq	$0x1, %rcx
    00000029: 	andq	(%r9,%rsi,8), %rax
    0000002d: 	andq	(%rdx,%rsi,8), %rax
    00000031: 	orq	%rax, (%rdi,%rsi,8)
    00000035: 	cmpq	%rcx, %r8
    00000038: 	jne	.Ltmp809 # Offset: 56
.Ltmp808:
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z21StencilBitTablesShiftImEvPT_PKS0_S3_mm"

Binary Function "_Z16StencilBitTablesImEvPT_PKS0_S3_mm" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0xe0a0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xe0a0
  Section     : .text
  Orc Section : .local.text._Z16StencilBitTablesImEvPT_PKS0_S3_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r10
    00000007: 	cmpq	%rcx, %r8
    0000000a: 	jb	.Ltmp810 # Offset: 10
    0000000c: 	je	.Ltmp810 # Offset: 12
    0000000e: 	movl	$0x1, %r11d
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp811:
    00000018: 	movq	%rcx, %rsi
    0000001b: 	movq	%r11, %r9
    0000001e: 	shrq	$0x6, %rsi
    00000022: 	shlq	%cl, %r9
    00000025: 	addq	$0x1, %rcx
    00000029: 	movq	(%r10,%rsi,8), %rax
    0000002d: 	andq	(%rdx,%rsi,8), %rax
    00000031: 	andq	%r9, %rax
    00000034: 	orq	%rax, (%rdi,%rsi,8)
    00000038: 	cmpq	%rcx, %r8
    0000003b: 	jne	.Ltmp811 # Offset: 59
.Ltmp810:
    0000003d: 	retq # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z16StencilBitTablesImEvPT_PKS0_S3_mm"

Binary Function "_Z20CountBitsByteDirect2ImEmPT_mm" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0xe0e0
  Size        : 0x21e
  MaxSize     : 0x220
  Offset      : 0xe0e0
  Section     : .text
  Orc Section : .local.text._Z20CountBitsByteDirect2ImEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	xorl	%r9d, %r9d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp812 # Offset: 10
    0000000c: 	movq	%rsi, %r8
    0000000f: 	subq	%rsi, %rdx
    00000012: 	je	.Ltmp812 # Offset: 18
    00000014: 	movq	%rsi, %r9
    00000017: 	movq	%rdi, %r10
    0000001a: 	andl	$0x7, %r9d
    0000001e: 	je	.Ltmp813 # Offset: 30
    00000020: 	xorl	%r9d, %r9d
    00000023: 	movl	$0x1, %edi
    00000028: 	jmp	.Ltmp814 # Offset: 40
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp815:
    00000030: 	testb	$0x7, %r8b
    00000034: 	je	.Ltmp813 # Offset: 52
.Ltmp814:
    00000036: 	movq	%r8, %rsi
    00000039: 	movl	%r8d, %ecx
    0000003c: 	movq	%rdi, %rax
    0000003f: 	shrq	$0x6, %rsi
    00000043: 	shlq	%cl, %rax
    00000046: 	andq	(%r10,%rsi,8), %rax
    0000004a: 	cmpq	$0x1, %rax
    0000004e: 	sbbq	$-0x1, %r9
    00000052: 	addq	$0x1, %r8
    00000056: 	subq	$0x1, %rdx
    0000005a: 	jne	.Ltmp815 # Offset: 90
.Ltmp812:
    0000005c: 	movq	%r9, %rax
    0000005f: 	retq # Offset: 95
.Ltmp813:
    00000060: 	movq	%r8, %rax
    00000063: 	pushq	%rbp
    00000064: 	shrq	$0x3, %rax
    00000068: 	pushq	%rbx
    00000069: 	cmpq	$0x7, %rdx
    0000006d: 	jbe	.Ltmp816 # Offset: 109
    00000073: 	leaq	-0x8(%rdx), %rbp
    00000077: 	leaq	0x1(%r10,%rax), %rbx
    0000007c: 	leaq	(%r10,%rax), %rcx
    00000080: 	movq	%rbp, %rax
    00000083: 	shrq	$0x3, %rax
    00000087: 	addq	%rax, %rbx
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp817:
    00000090: 	movzbl	(%rcx), %esi
    00000093: 	movl	%esi, %eax
    00000095: 	movl	%esi, %r11d
    00000098: 	movq	%rsi, %rdi
    0000009b: 	shrb	%al
    0000009d: 	andl	$0x4, %r11d
    000000a1: 	andl	$0x1, %edi
    000000a4: 	andl	$0x1, %eax
    000000a7: 	cmpb	$0x1, %r11b
    000000ab: 	movl	%esi, %r11d
    000000ae: 	sbbq	$-0x1, %rdi
    000000b2: 	andl	$0x8, %r11d
    000000b6: 	cmpb	$0x1, %r11b
    000000ba: 	movl	%esi, %r11d
    000000bd: 	sbbq	$-0x1, %rax
    000000c1: 	andl	$0x10, %r11d
    000000c5: 	cmpb	$0x1, %r11b
    000000c9: 	movl	%esi, %r11d
    000000cc: 	sbbq	$-0x1, %rdi
    000000d0: 	andl	$0x20, %r11d
    000000d4: 	cmpb	$0x1, %r11b
    000000d8: 	movl	%esi, %r11d
    000000db: 	sbbq	$-0x1, %rax
    000000df: 	andl	$0x40, %r11d
    000000e3: 	cmpb	$0x1, %r11b
    000000e7: 	sbbq	$-0x1, %rdi
    000000eb: 	cmpb	$-0x80, %sil
    000000ef: 	sbbq	$-0x1, %rax
    000000f3: 	addq	$0x1, %rcx
    000000f7: 	addq	%rdi, %rax
    000000fa: 	addq	%rax, %r9
    000000fd: 	cmpq	%rcx, %rbx
    00000100: 	jne	.Ltmp817 # Offset: 256
    00000102: 	andq	$-0x8, %rbp
    00000106: 	andl	$0x7, %edx
    00000109: 	leaq	0x8(%r8,%rbp), %r8
    0000010e: 	leaq	-0x1(%rdx), %rsi
    00000112: 	je	.Ltmp818 # Offset: 274
.Ltmp819:
    00000118: 	movq	%r8, %rdi
    0000011b: 	movl	%r8d, %ecx
    0000011e: 	movl	$0x1, %eax
    00000123: 	andl	$0x7, %ecx
    00000126: 	shrq	$0x3, %rdi
    0000012a: 	movl	%eax, %edx
    0000012c: 	shll	%cl, %edx
    0000012e: 	andb	(%r10,%rdi), %dl
    00000132: 	leaq	0x1(%r8), %rcx
    00000136: 	cmpb	$0x1, %dl
    00000139: 	sbbq	$-0x1, %r9
    0000013d: 	testq	%rsi, %rsi
    00000140: 	je	.Ltmp818 # Offset: 320
    00000146: 	movq	%rcx, %rdi
    00000149: 	movl	%eax, %edx
    0000014b: 	andl	$0x7, %ecx
    0000014e: 	shrq	$0x3, %rdi
    00000152: 	shll	%cl, %edx
    00000154: 	leaq	0x2(%r8), %rcx
    00000158: 	andb	(%r10,%rdi), %dl
    0000015c: 	cmpb	$0x1, %dl
    0000015f: 	sbbq	$-0x1, %r9
    00000163: 	cmpq	$0x1, %rsi
    00000167: 	je	.Ltmp818 # Offset: 359
    0000016d: 	movq	%rcx, %rdi
    00000170: 	movl	%eax, %edx
    00000172: 	andl	$0x7, %ecx
    00000175: 	shrq	$0x3, %rdi
    00000179: 	shll	%cl, %edx
    0000017b: 	leaq	0x3(%r8), %rcx
    0000017f: 	andb	(%r10,%rdi), %dl
    00000183: 	cmpb	$0x1, %dl
    00000186: 	sbbq	$-0x1, %r9
    0000018a: 	cmpq	$0x2, %rsi
    0000018e: 	je	.Ltmp818 # Offset: 398
    00000190: 	movq	%rcx, %rdi
    00000193: 	movl	%eax, %edx
    00000195: 	andl	$0x7, %ecx
    00000198: 	shrq	$0x3, %rdi
    0000019c: 	shll	%cl, %edx
    0000019e: 	leaq	0x4(%r8), %rcx
    000001a2: 	andb	(%r10,%rdi), %dl
    000001a6: 	cmpb	$0x1, %dl
    000001a9: 	sbbq	$-0x1, %r9
    000001ad: 	cmpq	$0x3, %rsi
    000001b1: 	je	.Ltmp818 # Offset: 433
    000001b3: 	movq	%rcx, %rdi
    000001b6: 	movl	%eax, %edx
    000001b8: 	andl	$0x7, %ecx
    000001bb: 	shrq	$0x3, %rdi
    000001bf: 	shll	%cl, %edx
    000001c1: 	leaq	0x5(%r8), %rcx
    000001c5: 	andb	(%r10,%rdi), %dl
    000001c9: 	cmpb	$0x1, %dl
    000001cc: 	sbbq	$-0x1, %r9
    000001d0: 	cmpq	$0x4, %rsi
    000001d4: 	je	.Ltmp818 # Offset: 468
    000001d6: 	movq	%rcx, %rdi
    000001d9: 	movl	%eax, %edx
    000001db: 	andl	$0x7, %ecx
    000001de: 	shrq	$0x3, %rdi
    000001e2: 	shll	%cl, %edx
    000001e4: 	leaq	0x6(%r8), %rcx
    000001e8: 	andb	(%r10,%rdi), %dl
    000001ec: 	cmpb	$0x1, %dl
    000001ef: 	sbbq	$-0x1, %r9
    000001f3: 	cmpq	$0x5, %rsi
    000001f7: 	je	.Ltmp818 # Offset: 503
    000001f9: 	movq	%rcx, %rdx
    000001fc: 	andl	$0x7, %ecx
    000001ff: 	shrq	$0x3, %rdx
    00000203: 	shll	%cl, %eax
    00000205: 	andb	(%r10,%rdx), %al
    00000209: 	cmpb	$0x1, %al
    0000020b: 	sbbq	$-0x1, %r9
.Ltmp818:
    0000020f: 	movq	%r9, %rax
    00000212: 	popq	%rbx
    00000213: 	popq	%rbp
    00000214: 	retq # Offset: 532
.Ltmp816:
    00000215: 	leaq	-0x1(%rdx), %rsi
    00000219: 	jmp	.Ltmp819 # Offset: 537
DWARF CFI Instructions:
    <empty>
End of Function "_Z20CountBitsByteDirect2ImEmPT_mm"

Binary Function "_Z17CountBitsByteLoopImEmPT_mm" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0xe300
  Size        : 0x798
  MaxSize     : 0x7a0
  Offset      : 0xe300
  Section     : .text
  Orc Section : .local.text._Z17CountBitsByteLoopImEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp820 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rdx, %rdi
    00000012: 	subq	%rsi, %rdi
    00000015: 	je	.Ltmp820 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp821 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp822 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp823:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp821 # Offset: 52
.Ltmp822:
    00000036: 	movq	%rsi, %rdx
    00000039: 	movl	%esi, %ecx
    0000003b: 	movq	%r10, %rax
    0000003e: 	shrq	$0x6, %rdx
    00000042: 	shlq	%cl, %rax
    00000045: 	andq	(%r9,%rdx,8), %rax
    00000049: 	cmpq	$0x1, %rax
    0000004d: 	sbbq	$-0x1, %r8
    00000051: 	addq	$0x1, %rsi
    00000055: 	subq	$0x1, %rdi
    00000059: 	jne	.Ltmp823 # Offset: 89
.Ltmp820:
    0000005b: 	movq	%r8, %rax
    0000005e: 	retq # Offset: 94
.Ltmp821:
    0000005f: 	movq	%rsi, %r10
    00000062: 	pushq	%rbx
    00000063: 	shrq	$0x3, %r10
    00000067: 	cmpq	$0x7, %rdi
    0000006b: 	jbe	.Ltmp824 # Offset: 107
    00000071: 	leaq	-0x8(%rdi), %r11
    00000075: 	movq	%r11, %rcx
    00000078: 	shrq	$0x3, %rcx
    0000007c: 	addq	$0x1, %rcx
    00000080: 	cmpq	$0x77, %r11
    00000084: 	jbe	.Ltmp825 # Offset: 132
    0000008a: 	leaq	(%r9,%r10), %rax
    0000008e: 	pxor	%xmm9, %xmm9
    00000093: 	pxor	%xmm3, %xmm3
    00000097: 	movq	%rcx, %rdx
    0000009a: 	shrq	$0x4, %rdx
    0000009e: 	pxor	%xmm1, %xmm1
    000000a2: 	movdqa	DATAat0x165d0(%rip), %xmm8
    000000ab: 	movdqa	DATAat0x165e0(%rip), %xmm11
    000000b4: 	shlq	$0x4, %rdx
    000000b8: 	pxor	%xmm0, %xmm0
    000000bc: 	movdqa	DATAat0x165f0(%rip), %xmm10
    000000c5: 	addq	%rax, %rdx
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp826:
    000000d0: 	movdqu	(%rax), %xmm4
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm4, %xmm6
    000000dc: 	pand	%xmm8, %xmm6
    000000e1: 	pcmpeqb	%xmm3, %xmm6
    000000e5: 	pandn	%xmm8, %xmm6
    000000ea: 	movdqa	%xmm6, %xmm2
    000000ee: 	punpckhbw	%xmm3, %xmm6
    000000f2: 	punpcklbw	%xmm3, %xmm2
    000000f6: 	movdqa	%xmm6, %xmm5
    000000fa: 	punpckhwd	%xmm1, %xmm6
    000000fe: 	movdqa	%xmm2, %xmm7
    00000102: 	punpckhwd	%xmm1, %xmm2
    00000106: 	punpcklwd	%xmm1, %xmm5
    0000010a: 	punpcklwd	%xmm1, %xmm7
    0000010e: 	movdqa	%xmm7, %xmm13
    00000113: 	movdqa	%xmm7, %xmm12
    00000118: 	movdqa	%xmm2, %xmm7
    0000011c: 	punpckldq	%xmm0, %xmm13
    00000121: 	punpckldq	%xmm0, %xmm7
    00000125: 	punpckhdq	%xmm0, %xmm12
    0000012a: 	punpckhdq	%xmm0, %xmm2
    0000012e: 	paddq	%xmm13, %xmm12
    00000133: 	paddq	%xmm7, %xmm2
    00000137: 	paddq	%xmm2, %xmm12
    0000013c: 	movdqa	%xmm5, %xmm2
    00000140: 	punpckhdq	%xmm0, %xmm5
    00000144: 	punpckldq	%xmm0, %xmm2
    00000148: 	paddq	%xmm2, %xmm5
    0000014c: 	movdqa	%xmm6, %xmm2
    00000150: 	punpckhdq	%xmm0, %xmm6
    00000154: 	punpckldq	%xmm0, %xmm2
    00000158: 	paddq	%xmm2, %xmm5
    0000015c: 	movdqa	%xmm4, %xmm2
    00000160: 	pand	%xmm11, %xmm2
    00000165: 	paddq	%xmm5, %xmm12
    0000016a: 	pcmpeqb	%xmm3, %xmm2
    0000016e: 	pandn	%xmm8, %xmm2
    00000173: 	movdqa	%xmm2, %xmm5
    00000177: 	punpckhbw	%xmm3, %xmm2
    0000017b: 	punpcklbw	%xmm3, %xmm5
    0000017f: 	movdqa	%xmm2, %xmm13
    00000184: 	punpckhwd	%xmm1, %xmm2
    00000188: 	movdqa	%xmm5, %xmm14
    0000018d: 	punpckhwd	%xmm1, %xmm5
    00000191: 	punpcklwd	%xmm1, %xmm13
    00000196: 	punpcklwd	%xmm1, %xmm14
    0000019b: 	movdqa	%xmm14, %xmm7
    000001a0: 	punpckhdq	%xmm0, %xmm14
    000001a5: 	punpckldq	%xmm0, %xmm7
    000001a9: 	paddq	%xmm6, %xmm7
    000001ad: 	movdqa	%xmm5, %xmm6
    000001b1: 	punpckhdq	%xmm0, %xmm5
    000001b5: 	punpckldq	%xmm0, %xmm6
    000001b9: 	paddq	%xmm14, %xmm7
    000001be: 	paddq	%xmm6, %xmm5
    000001c2: 	movdqa	%xmm13, %xmm6
    000001c7: 	paddq	%xmm12, %xmm7
    000001cc: 	punpckldq	%xmm0, %xmm6
    000001d0: 	punpckhdq	%xmm0, %xmm13
    000001d5: 	paddq	%xmm6, %xmm5
    000001d9: 	paddq	%xmm5, %xmm7
    000001dd: 	movdqa	%xmm2, %xmm5
    000001e1: 	punpckhdq	%xmm0, %xmm2
    000001e5: 	punpckldq	%xmm0, %xmm5
    000001e9: 	paddq	%xmm5, %xmm13
    000001ee: 	paddq	%xmm13, %xmm2
    000001f3: 	paddq	%xmm2, %xmm7
    000001f7: 	movdqa	%xmm4, %xmm2
    000001fb: 	pand	%xmm10, %xmm2
    00000200: 	pcmpeqb	%xmm3, %xmm2
    00000204: 	pandn	%xmm8, %xmm2
    00000209: 	movdqa	%xmm2, %xmm12
    0000020e: 	punpckhbw	%xmm3, %xmm2
    00000212: 	punpcklbw	%xmm3, %xmm12
    00000217: 	movdqa	%xmm2, %xmm13
    0000021c: 	punpckhwd	%xmm1, %xmm2
    00000220: 	movdqa	%xmm12, %xmm5
    00000225: 	punpckhwd	%xmm1, %xmm12
    0000022a: 	punpcklwd	%xmm1, %xmm13
    0000022f: 	punpcklwd	%xmm1, %xmm5
    00000233: 	movdqa	%xmm5, %xmm14
    00000238: 	movdqa	%xmm5, %xmm6
    0000023c: 	movdqa	%xmm12, %xmm5
    00000241: 	punpckldq	%xmm0, %xmm14
    00000246: 	punpckhdq	%xmm0, %xmm6
    0000024a: 	punpckldq	%xmm0, %xmm5
    0000024e: 	paddq	%xmm14, %xmm6
    00000253: 	punpckhdq	%xmm0, %xmm12
    00000258: 	paddq	%xmm5, %xmm6
    0000025c: 	movdqa	%xmm13, %xmm5
    00000261: 	punpckhdq	%xmm0, %xmm13
    00000266: 	punpckldq	%xmm0, %xmm5
    0000026a: 	paddq	%xmm7, %xmm6
    0000026e: 	paddq	%xmm5, %xmm12
    00000273: 	movdqa	%xmm2, %xmm5
    00000277: 	paddq	%xmm12, %xmm13
    0000027c: 	movdqa	%xmm2, %xmm12
    00000281: 	punpckldq	%xmm0, %xmm5
    00000285: 	punpckhdq	%xmm0, %xmm12
    0000028a: 	paddq	%xmm13, %xmm6
    0000028f: 	paddq	%xmm5, %xmm12
    00000294: 	movdqa	DATAat0x16600(%rip), %xmm5
    0000029c: 	pand	%xmm4, %xmm5
    000002a0: 	pcmpeqb	%xmm3, %xmm5
    000002a4: 	pandn	%xmm8, %xmm5
    000002a9: 	movdqa	%xmm5, %xmm14
    000002ae: 	punpckhbw	%xmm3, %xmm5
    000002b2: 	punpcklbw	%xmm3, %xmm14
    000002b7: 	movdqa	%xmm5, %xmm2
    000002bb: 	punpckhwd	%xmm1, %xmm5
    000002bf: 	movdqa	%xmm14, %xmm13
    000002c4: 	punpckhwd	%xmm1, %xmm14
    000002c9: 	punpcklwd	%xmm1, %xmm2
    000002cd: 	punpcklwd	%xmm1, %xmm13
    000002d2: 	movdqa	%xmm14, %xmm7
    000002d7: 	punpckhdq	%xmm0, %xmm14
    000002dc: 	movdqa	%xmm13, %xmm15
    000002e1: 	punpckldq	%xmm0, %xmm7
    000002e5: 	punpckldq	%xmm0, %xmm13
    000002ea: 	punpckhdq	%xmm0, %xmm15
    000002ef: 	paddq	%xmm13, %xmm12
    000002f4: 	paddq	%xmm15, %xmm7
    000002f9: 	paddq	%xmm12, %xmm6
    000002fe: 	paddq	%xmm14, %xmm7
    00000303: 	paddq	%xmm6, %xmm7
    00000307: 	movdqa	%xmm2, %xmm6
    0000030b: 	punpckhdq	%xmm0, %xmm2
    0000030f: 	punpckldq	%xmm0, %xmm6
    00000313: 	paddq	%xmm6, %xmm2
    00000317: 	movdqa	%xmm5, %xmm6
    0000031b: 	punpckhdq	%xmm0, %xmm5
    0000031f: 	punpckldq	%xmm0, %xmm6
    00000323: 	paddq	%xmm6, %xmm2
    00000327: 	paddq	%xmm2, %xmm7
    0000032b: 	movdqa	DATAat0x16610(%rip), %xmm2
    00000333: 	pand	%xmm4, %xmm2
    00000337: 	pcmpeqb	%xmm3, %xmm2
    0000033b: 	pandn	%xmm8, %xmm2
    00000340: 	movdqa	%xmm2, %xmm13
    00000345: 	punpckhbw	%xmm3, %xmm2
    00000349: 	punpcklbw	%xmm3, %xmm13
    0000034e: 	movdqa	%xmm2, %xmm12
    00000353: 	punpckhwd	%xmm1, %xmm2
    00000357: 	movdqa	%xmm13, %xmm14
    0000035c: 	punpckhwd	%xmm1, %xmm13
    00000361: 	punpcklwd	%xmm1, %xmm12
    00000366: 	punpcklwd	%xmm1, %xmm14
    0000036b: 	movdqa	%xmm14, %xmm6
    00000370: 	punpckhdq	%xmm0, %xmm14
    00000375: 	punpckldq	%xmm0, %xmm6
    00000379: 	paddq	%xmm5, %xmm6
    0000037d: 	movdqa	%xmm13, %xmm5
    00000382: 	paddq	%xmm14, %xmm6
    00000387: 	punpckhdq	%xmm0, %xmm5
    0000038b: 	paddq	%xmm7, %xmm6
    0000038f: 	movdqa	%xmm13, %xmm7
    00000394: 	punpckldq	%xmm0, %xmm7
    00000398: 	paddq	%xmm7, %xmm5
    0000039c: 	movdqa	%xmm12, %xmm7
    000003a1: 	punpckhdq	%xmm0, %xmm12
    000003a6: 	punpckldq	%xmm0, %xmm7
    000003aa: 	paddq	%xmm7, %xmm5
    000003ae: 	paddq	%xmm5, %xmm6
    000003b2: 	movdqa	%xmm2, %xmm5
    000003b6: 	punpckhdq	%xmm0, %xmm2
    000003ba: 	punpckldq	%xmm0, %xmm5
    000003be: 	paddq	%xmm5, %xmm12
    000003c3: 	paddq	%xmm12, %xmm2
    000003c8: 	paddq	%xmm2, %xmm6
    000003cc: 	movdqa	DATAat0x16620(%rip), %xmm2
    000003d4: 	pand	%xmm4, %xmm2
    000003d8: 	pcmpeqb	%xmm3, %xmm2
    000003dc: 	pandn	%xmm8, %xmm2
    000003e1: 	movdqa	%xmm2, %xmm12
    000003e6: 	punpckhbw	%xmm3, %xmm2
    000003ea: 	punpcklbw	%xmm3, %xmm12
    000003ef: 	movdqa	%xmm2, %xmm13
    000003f4: 	punpckhwd	%xmm1, %xmm2
    000003f8: 	movdqa	%xmm12, %xmm5
    000003fd: 	punpckhwd	%xmm1, %xmm12
    00000402: 	punpcklwd	%xmm1, %xmm13
    00000407: 	punpcklwd	%xmm1, %xmm5
    0000040b: 	movdqa	%xmm5, %xmm14
    00000410: 	movdqa	%xmm5, %xmm7
    00000414: 	movdqa	%xmm12, %xmm5
    00000419: 	punpckldq	%xmm0, %xmm14
    0000041e: 	punpckhdq	%xmm0, %xmm7
    00000422: 	punpckldq	%xmm0, %xmm5
    00000426: 	paddq	%xmm14, %xmm7
    0000042b: 	punpckhdq	%xmm0, %xmm12
    00000430: 	paddq	%xmm5, %xmm7
    00000434: 	movdqa	%xmm13, %xmm5
    00000439: 	punpckhdq	%xmm0, %xmm13
    0000043e: 	punpckldq	%xmm0, %xmm5
    00000442: 	paddq	%xmm6, %xmm7
    00000446: 	paddq	%xmm5, %xmm12
    0000044b: 	movdqa	%xmm2, %xmm5
    0000044f: 	paddq	%xmm12, %xmm13
    00000454: 	movdqa	%xmm2, %xmm12
    00000459: 	punpckldq	%xmm0, %xmm5
    0000045d: 	movdqa	DATAat0x16630(%rip), %xmm2
    00000465: 	paddq	%xmm13, %xmm7
    0000046a: 	punpckhdq	%xmm0, %xmm12
    0000046f: 	pand	%xmm4, %xmm2
    00000473: 	paddq	%xmm5, %xmm12
    00000478: 	pand	DATAat0x16640(%rip), %xmm4
    00000480: 	pcmpeqb	%xmm3, %xmm2
    00000484: 	pcmpeqb	%xmm3, %xmm4
    00000488: 	pandn	%xmm8, %xmm2
    0000048d: 	movdqa	%xmm2, %xmm13
    00000492: 	punpckhbw	%xmm3, %xmm2
    00000496: 	pandn	%xmm8, %xmm4
    0000049b: 	punpcklbw	%xmm3, %xmm13
    000004a0: 	movdqa	%xmm2, %xmm6
    000004a4: 	punpckhwd	%xmm1, %xmm2
    000004a8: 	movdqa	%xmm13, %xmm14
    000004ad: 	punpckhwd	%xmm1, %xmm13
    000004b2: 	punpcklwd	%xmm1, %xmm6
    000004b6: 	punpcklwd	%xmm1, %xmm14
    000004bb: 	movdqa	%xmm13, %xmm5
    000004c0: 	punpckhdq	%xmm0, %xmm13
    000004c5: 	movdqa	%xmm14, %xmm15
    000004ca: 	punpckldq	%xmm0, %xmm5
    000004ce: 	punpckldq	%xmm0, %xmm14
    000004d3: 	punpckhdq	%xmm0, %xmm15
    000004d8: 	paddq	%xmm14, %xmm12
    000004dd: 	paddq	%xmm15, %xmm5
    000004e2: 	paddq	%xmm12, %xmm7
    000004e7: 	paddq	%xmm13, %xmm5
    000004ec: 	paddq	%xmm7, %xmm5
    000004f0: 	movdqa	%xmm6, %xmm7
    000004f4: 	punpckhdq	%xmm0, %xmm6
    000004f8: 	punpckldq	%xmm0, %xmm7
    000004fc: 	paddq	%xmm7, %xmm6
    00000500: 	movdqa	%xmm2, %xmm7
    00000504: 	punpckhdq	%xmm0, %xmm2
    00000508: 	punpckldq	%xmm0, %xmm7
    0000050c: 	paddq	%xmm7, %xmm6
    00000510: 	movdqa	%xmm4, %xmm7
    00000514: 	punpckhbw	%xmm3, %xmm4
    00000518: 	punpcklbw	%xmm3, %xmm7
    0000051c: 	paddq	%xmm6, %xmm5
    00000520: 	movdqa	%xmm4, %xmm6
    00000524: 	movdqa	%xmm7, %xmm12
    00000529: 	punpckhwd	%xmm1, %xmm7
    0000052d: 	punpcklwd	%xmm1, %xmm6
    00000531: 	punpcklwd	%xmm1, %xmm12
    00000536: 	punpckhwd	%xmm1, %xmm4
    0000053a: 	movdqa	%xmm12, %xmm13
    0000053f: 	punpckhdq	%xmm0, %xmm12
    00000544: 	punpckldq	%xmm0, %xmm13
    00000549: 	paddq	%xmm13, %xmm2
    0000054e: 	paddq	%xmm12, %xmm2
    00000553: 	paddq	%xmm5, %xmm2
    00000557: 	movdqa	%xmm7, %xmm5
    0000055b: 	punpckhdq	%xmm0, %xmm7
    0000055f: 	punpckldq	%xmm0, %xmm5
    00000563: 	paddq	%xmm5, %xmm7
    00000567: 	movdqa	%xmm6, %xmm5
    0000056b: 	punpckhdq	%xmm0, %xmm6
    0000056f: 	punpckldq	%xmm0, %xmm5
    00000573: 	paddq	%xmm5, %xmm7
    00000577: 	movdqa	%xmm4, %xmm5
    0000057b: 	punpckhdq	%xmm0, %xmm4
    0000057f: 	punpckldq	%xmm0, %xmm5
    00000583: 	paddq	%xmm7, %xmm2
    00000587: 	paddq	%xmm5, %xmm6
    0000058b: 	paddq	%xmm6, %xmm4
    0000058f: 	paddq	%xmm2, %xmm4
    00000593: 	paddq	%xmm4, %xmm9
    00000598: 	cmpq	%rdx, %rax
    0000059b: 	jne	.Ltmp826 # Offset: 1435
    000005a1: 	movdqa	%xmm9, %xmm0
    000005a6: 	movq	%rcx, %rdx
    000005a9: 	psrldq	$0x8, %xmm0
    000005ae: 	andq	$-0x10, %rdx
    000005b2: 	paddq	%xmm0, %xmm9
    000005b7: 	addq	%rdx, %r10
    000005ba: 	movq	%xmm9, %rax
    000005bf: 	addq	%rax, %r8
    000005c2: 	movq	%rdx, %rax
    000005c5: 	negq	%rax
    000005c8: 	leaq	(%rdi,%rax,8), %rax
    000005cc: 	cmpq	%rdx, %rcx
    000005cf: 	je	.Ltmp827 # Offset: 1487
.Ltmp830:
    000005d5: 	subq	$0x8, %rax
    000005d9: 	leaq	0x1(%r9,%r10), %rdx
    000005de: 	leaq	(%r9,%r10), %rcx
    000005e2: 	shrq	$0x3, %rax
    000005e6: 	leaq	(%rax,%rdx), %rbx
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp828:
    000005f0: 	movzbl	(%rcx), %edx
    000005f3: 	movl	%edx, %r10d
    000005f6: 	movq	%rdx, %rax
    000005f9: 	andl	$0x2, %r10d
    000005fd: 	andl	$0x1, %eax
    00000600: 	cmpb	$0x1, %r10b
    00000604: 	movl	%edx, %r10d
    00000607: 	sbbq	$-0x1, %rax
    0000060b: 	andl	$0x4, %r10d
    0000060f: 	cmpb	$0x1, %r10b
    00000613: 	movl	%edx, %r10d
    00000616: 	sbbq	$-0x1, %rax
    0000061a: 	andl	$0x8, %r10d
    0000061e: 	cmpb	$0x1, %r10b
    00000622: 	movl	%edx, %r10d
    00000625: 	sbbq	$-0x1, %rax
    00000629: 	andl	$0x10, %r10d
    0000062d: 	cmpb	$0x1, %r10b
    00000631: 	movl	%edx, %r10d
    00000634: 	sbbq	$-0x1, %rax
    00000638: 	andl	$0x20, %r10d
    0000063c: 	cmpb	$0x1, %r10b
    00000640: 	movl	%edx, %r10d
    00000643: 	sbbq	$-0x1, %rax
    00000647: 	andl	$0x40, %r10d
    0000064b: 	cmpb	$0x1, %r10b
    0000064f: 	sbbq	$-0x1, %rax
    00000653: 	cmpb	$-0x80, %dl
    00000656: 	sbbq	$-0x1, %rax
    0000065a: 	addq	$0x1, %rcx
    0000065e: 	addq	%rax, %r8
    00000661: 	cmpq	%rcx, %rbx
    00000664: 	jne	.Ltmp828 # Offset: 1636
.Ltmp827:
    00000666: 	andq	$-0x8, %r11
    0000066a: 	andl	$0x7, %edi
    0000066d: 	leaq	0x8(%rsi,%r11), %rsi
    00000672: 	leaq	-0x1(%rdi), %rdx
    00000676: 	je	.Ltmp829 # Offset: 1654
.Ltmp831:
    0000067c: 	movl	%esi, %ecx
    0000067e: 	movl	$0x1, %eax
    00000683: 	movq	%rsi, %rdi
    00000686: 	andl	$0x7, %ecx
    00000689: 	movl	%eax, %ebx
    0000068b: 	shrq	$0x3, %rdi
    0000068f: 	shll	%cl, %ebx
    00000691: 	movl	%ebx, %ecx
    00000693: 	andb	(%r9,%rdi), %cl
    00000697: 	cmpb	$0x1, %cl
    0000069a: 	leaq	0x1(%rsi), %rcx
    0000069e: 	sbbq	$-0x1, %r8
    000006a2: 	testq	%rdx, %rdx
    000006a5: 	je	.Ltmp829 # Offset: 1701
    000006ab: 	movq	%rcx, %rdi
    000006ae: 	movl	%eax, %ebx
    000006b0: 	andl	$0x7, %ecx
    000006b3: 	shrq	$0x3, %rdi
    000006b7: 	shll	%cl, %ebx
    000006b9: 	movl	%ebx, %ecx
    000006bb: 	andb	(%r9,%rdi), %cl
    000006bf: 	cmpb	$0x1, %cl
    000006c2: 	leaq	0x2(%rsi), %rcx
    000006c6: 	sbbq	$-0x1, %r8
    000006ca: 	cmpq	$0x1, %rdx
    000006ce: 	je	.Ltmp829 # Offset: 1742
    000006d4: 	movq	%rcx, %rdi
    000006d7: 	movl	%eax, %ebx
    000006d9: 	andl	$0x7, %ecx
    000006dc: 	shrq	$0x3, %rdi
    000006e0: 	shll	%cl, %ebx
    000006e2: 	movl	%ebx, %ecx
    000006e4: 	andb	(%r9,%rdi), %cl
    000006e8: 	cmpb	$0x1, %cl
    000006eb: 	leaq	0x3(%rsi), %rcx
    000006ef: 	sbbq	$-0x1, %r8
    000006f3: 	cmpq	$0x2, %rdx
    000006f7: 	je	.Ltmp829 # Offset: 1783
    000006fd: 	movq	%rcx, %rdi
    00000700: 	movl	%eax, %ebx
    00000702: 	andl	$0x7, %ecx
    00000705: 	shrq	$0x3, %rdi
    00000709: 	shll	%cl, %ebx
    0000070b: 	movl	%ebx, %ecx
    0000070d: 	andb	(%r9,%rdi), %cl
    00000711: 	cmpb	$0x1, %cl
    00000714: 	leaq	0x4(%rsi), %rcx
    00000718: 	sbbq	$-0x1, %r8
    0000071c: 	cmpq	$0x3, %rdx
    00000720: 	je	.Ltmp829 # Offset: 1824
    00000722: 	movq	%rcx, %rdi
    00000725: 	movl	%eax, %ebx
    00000727: 	andl	$0x7, %ecx
    0000072a: 	shrq	$0x3, %rdi
    0000072e: 	shll	%cl, %ebx
    00000730: 	movl	%ebx, %ecx
    00000732: 	andb	(%r9,%rdi), %cl
    00000736: 	cmpb	$0x1, %cl
    00000739: 	leaq	0x5(%rsi), %rcx
    0000073d: 	sbbq	$-0x1, %r8
    00000741: 	cmpq	$0x4, %rdx
    00000745: 	je	.Ltmp829 # Offset: 1861
    00000747: 	movq	%rcx, %rdi
    0000074a: 	movl	%eax, %ebx
    0000074c: 	andl	$0x7, %ecx
    0000074f: 	shrq	$0x3, %rdi
    00000753: 	shll	%cl, %ebx
    00000755: 	movl	%ebx, %ecx
    00000757: 	andb	(%r9,%rdi), %cl
    0000075b: 	cmpb	$0x1, %cl
    0000075e: 	leaq	0x6(%rsi), %rcx
    00000762: 	sbbq	$-0x1, %r8
    00000766: 	cmpq	$0x5, %rdx
    0000076a: 	je	.Ltmp829 # Offset: 1898
    0000076c: 	movq	%rcx, %rdx
    0000076f: 	andl	$0x7, %ecx
    00000772: 	shrq	$0x3, %rdx
    00000776: 	shll	%cl, %eax
    00000778: 	andb	(%r9,%rdx), %al
    0000077c: 	cmpb	$0x1, %al
    0000077e: 	sbbq	$-0x1, %r8
.Ltmp829:
    00000782: 	movq	%r8, %rax
    00000785: 	popq	%rbx
    00000786: 	retq # Offset: 1926
.Ltmp825:
    00000787: 	movq	%rdi, %rax
    0000078a: 	jmp	.Ltmp830 # Offset: 1930
.Ltmp824:
    0000078f: 	leaq	-0x1(%rdi), %rdx
    00000793: 	jmp	.Ltmp831 # Offset: 1939
DWARF CFI Instructions:
    <empty>
End of Function "_Z17CountBitsByteLoopImEmPT_mm"

Binary Function "_Z18CountBitsByteLoop2ImEmPT_mm" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0xeaa0
  Size        : 0x79d
  MaxSize     : 0x7a0
  Offset      : 0xeaa0
  Section     : .text
  Orc Section : .local.text._Z18CountBitsByteLoop2ImEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp832 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rdx, %rdi
    00000012: 	subq	%rsi, %rdi
    00000015: 	je	.Ltmp832 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp833 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp834 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp835:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp833 # Offset: 52
.Ltmp834:
    00000036: 	movq	%rsi, %rdx
    00000039: 	movl	%esi, %ecx
    0000003b: 	movq	%r10, %rax
    0000003e: 	shrq	$0x6, %rdx
    00000042: 	shlq	%cl, %rax
    00000045: 	andq	(%r9,%rdx,8), %rax
    00000049: 	cmpq	$0x1, %rax
    0000004d: 	sbbq	$-0x1, %r8
    00000051: 	addq	$0x1, %rsi
    00000055: 	subq	$0x1, %rdi
    00000059: 	jne	.Ltmp835 # Offset: 89
.Ltmp832:
    0000005b: 	movq	%r8, %rax
    0000005e: 	retq # Offset: 94
.Ltmp833:
    0000005f: 	movq	%rsi, %r10
    00000062: 	pushq	%rbx
    00000063: 	shrq	$0x3, %r10
    00000067: 	cmpq	$0x7, %rdi
    0000006b: 	jbe	.Ltmp836 # Offset: 107
    00000071: 	leaq	-0x8(%rdi), %r11
    00000075: 	movq	%r11, %rcx
    00000078: 	shrq	$0x3, %rcx
    0000007c: 	addq	$0x1, %rcx
    00000080: 	cmpq	$0x77, %r11
    00000084: 	jbe	.Ltmp837 # Offset: 132
    0000008a: 	leaq	(%r9,%r10), %rax
    0000008e: 	pxor	%xmm9, %xmm9
    00000093: 	pxor	%xmm3, %xmm3
    00000097: 	movq	%rcx, %rdx
    0000009a: 	shrq	$0x4, %rdx
    0000009e: 	pxor	%xmm1, %xmm1
    000000a2: 	movdqa	DATAat0x16640(%rip), %xmm11
    000000ab: 	movdqa	DATAat0x165d0(%rip), %xmm8
    000000b4: 	shlq	$0x4, %rdx
    000000b8: 	pxor	%xmm0, %xmm0
    000000bc: 	movdqa	DATAat0x16630(%rip), %xmm10
    000000c5: 	addq	%rax, %rdx
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp838:
    000000d0: 	movdqu	(%rax), %xmm4
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm4, %xmm6
    000000dc: 	pand	%xmm11, %xmm6
    000000e1: 	pcmpeqb	%xmm3, %xmm6
    000000e5: 	pandn	%xmm8, %xmm6
    000000ea: 	movdqa	%xmm6, %xmm2
    000000ee: 	punpckhbw	%xmm3, %xmm6
    000000f2: 	punpcklbw	%xmm3, %xmm2
    000000f6: 	movdqa	%xmm6, %xmm5
    000000fa: 	punpckhwd	%xmm1, %xmm6
    000000fe: 	movdqa	%xmm2, %xmm7
    00000102: 	punpckhwd	%xmm1, %xmm2
    00000106: 	punpcklwd	%xmm1, %xmm5
    0000010a: 	punpcklwd	%xmm1, %xmm7
    0000010e: 	movdqa	%xmm7, %xmm13
    00000113: 	movdqa	%xmm7, %xmm12
    00000118: 	movdqa	%xmm2, %xmm7
    0000011c: 	punpckldq	%xmm0, %xmm13
    00000121: 	punpckldq	%xmm0, %xmm7
    00000125: 	punpckhdq	%xmm0, %xmm12
    0000012a: 	punpckhdq	%xmm0, %xmm2
    0000012e: 	paddq	%xmm13, %xmm12
    00000133: 	paddq	%xmm7, %xmm2
    00000137: 	paddq	%xmm2, %xmm12
    0000013c: 	movdqa	%xmm5, %xmm2
    00000140: 	punpckhdq	%xmm0, %xmm5
    00000144: 	punpckldq	%xmm0, %xmm2
    00000148: 	paddq	%xmm2, %xmm5
    0000014c: 	movdqa	%xmm6, %xmm2
    00000150: 	punpckhdq	%xmm0, %xmm6
    00000154: 	punpckldq	%xmm0, %xmm2
    00000158: 	paddq	%xmm2, %xmm5
    0000015c: 	movdqa	%xmm4, %xmm2
    00000160: 	pand	%xmm10, %xmm2
    00000165: 	paddq	%xmm5, %xmm12
    0000016a: 	pcmpeqb	%xmm3, %xmm2
    0000016e: 	pandn	%xmm8, %xmm2
    00000173: 	movdqa	%xmm2, %xmm5
    00000177: 	punpckhbw	%xmm3, %xmm2
    0000017b: 	punpcklbw	%xmm3, %xmm5
    0000017f: 	movdqa	%xmm2, %xmm13
    00000184: 	punpckhwd	%xmm1, %xmm2
    00000188: 	movdqa	%xmm5, %xmm14
    0000018d: 	punpckhwd	%xmm1, %xmm5
    00000191: 	punpcklwd	%xmm1, %xmm13
    00000196: 	punpcklwd	%xmm1, %xmm14
    0000019b: 	movdqa	%xmm14, %xmm7
    000001a0: 	punpckhdq	%xmm0, %xmm14
    000001a5: 	punpckldq	%xmm0, %xmm7
    000001a9: 	paddq	%xmm6, %xmm7
    000001ad: 	movdqa	%xmm5, %xmm6
    000001b1: 	punpckhdq	%xmm0, %xmm5
    000001b5: 	punpckldq	%xmm0, %xmm6
    000001b9: 	paddq	%xmm14, %xmm7
    000001be: 	paddq	%xmm6, %xmm5
    000001c2: 	movdqa	%xmm13, %xmm6
    000001c7: 	paddq	%xmm12, %xmm7
    000001cc: 	punpckldq	%xmm0, %xmm6
    000001d0: 	punpckhdq	%xmm0, %xmm13
    000001d5: 	paddq	%xmm6, %xmm5
    000001d9: 	paddq	%xmm5, %xmm7
    000001dd: 	movdqa	%xmm2, %xmm5
    000001e1: 	punpckhdq	%xmm0, %xmm2
    000001e5: 	punpckldq	%xmm0, %xmm5
    000001e9: 	paddq	%xmm5, %xmm13
    000001ee: 	paddq	%xmm13, %xmm2
    000001f3: 	paddq	%xmm2, %xmm7
    000001f7: 	movdqa	DATAat0x16620(%rip), %xmm2
    000001ff: 	pand	%xmm4, %xmm2
    00000203: 	pcmpeqb	%xmm3, %xmm2
    00000207: 	pandn	%xmm8, %xmm2
    0000020c: 	movdqa	%xmm2, %xmm12
    00000211: 	punpckhbw	%xmm3, %xmm2
    00000215: 	punpcklbw	%xmm3, %xmm12
    0000021a: 	movdqa	%xmm2, %xmm13
    0000021f: 	punpckhwd	%xmm1, %xmm2
    00000223: 	movdqa	%xmm12, %xmm5
    00000228: 	punpckhwd	%xmm1, %xmm12
    0000022d: 	punpcklwd	%xmm1, %xmm13
    00000232: 	punpcklwd	%xmm1, %xmm5
    00000236: 	movdqa	%xmm5, %xmm14
    0000023b: 	movdqa	%xmm5, %xmm6
    0000023f: 	movdqa	%xmm12, %xmm5
    00000244: 	punpckldq	%xmm0, %xmm14
    00000249: 	punpckhdq	%xmm0, %xmm6
    0000024d: 	punpckldq	%xmm0, %xmm5
    00000251: 	paddq	%xmm14, %xmm6
    00000256: 	punpckhdq	%xmm0, %xmm12
    0000025b: 	paddq	%xmm5, %xmm6
    0000025f: 	movdqa	%xmm13, %xmm5
    00000264: 	punpckhdq	%xmm0, %xmm13
    00000269: 	punpckldq	%xmm0, %xmm5
    0000026d: 	paddq	%xmm7, %xmm6
    00000271: 	paddq	%xmm5, %xmm12
    00000276: 	movdqa	%xmm2, %xmm5
    0000027a: 	paddq	%xmm12, %xmm13
    0000027f: 	movdqa	%xmm2, %xmm12
    00000284: 	punpckldq	%xmm0, %xmm5
    00000288: 	punpckhdq	%xmm0, %xmm12
    0000028d: 	paddq	%xmm13, %xmm6
    00000292: 	paddq	%xmm5, %xmm12
    00000297: 	movdqa	DATAat0x16610(%rip), %xmm5
    0000029f: 	pand	%xmm4, %xmm5
    000002a3: 	pcmpeqb	%xmm3, %xmm5
    000002a7: 	pandn	%xmm8, %xmm5
    000002ac: 	movdqa	%xmm5, %xmm14
    000002b1: 	punpckhbw	%xmm3, %xmm5
    000002b5: 	punpcklbw	%xmm3, %xmm14
    000002ba: 	movdqa	%xmm5, %xmm2
    000002be: 	punpckhwd	%xmm1, %xmm5
    000002c2: 	movdqa	%xmm14, %xmm13
    000002c7: 	punpckhwd	%xmm1, %xmm14
    000002cc: 	punpcklwd	%xmm1, %xmm2
    000002d0: 	punpcklwd	%xmm1, %xmm13
    000002d5: 	movdqa	%xmm14, %xmm7
    000002da: 	punpckhdq	%xmm0, %xmm14
    000002df: 	movdqa	%xmm13, %xmm15
    000002e4: 	punpckldq	%xmm0, %xmm7
    000002e8: 	punpckldq	%xmm0, %xmm13
    000002ed: 	punpckhdq	%xmm0, %xmm15
    000002f2: 	paddq	%xmm13, %xmm12
    000002f7: 	paddq	%xmm15, %xmm7
    000002fc: 	paddq	%xmm12, %xmm6
    00000301: 	paddq	%xmm14, %xmm7
    00000306: 	paddq	%xmm6, %xmm7
    0000030a: 	movdqa	%xmm2, %xmm6
    0000030e: 	punpckhdq	%xmm0, %xmm2
    00000312: 	punpckldq	%xmm0, %xmm6
    00000316: 	paddq	%xmm6, %xmm2
    0000031a: 	movdqa	%xmm5, %xmm6
    0000031e: 	punpckhdq	%xmm0, %xmm5
    00000322: 	punpckldq	%xmm0, %xmm6
    00000326: 	paddq	%xmm6, %xmm2
    0000032a: 	paddq	%xmm2, %xmm7
    0000032e: 	movdqa	DATAat0x16600(%rip), %xmm2
    00000336: 	pand	%xmm4, %xmm2
    0000033a: 	pcmpeqb	%xmm3, %xmm2
    0000033e: 	pandn	%xmm8, %xmm2
    00000343: 	movdqa	%xmm2, %xmm13
    00000348: 	punpckhbw	%xmm3, %xmm2
    0000034c: 	punpcklbw	%xmm3, %xmm13
    00000351: 	movdqa	%xmm2, %xmm12
    00000356: 	punpckhwd	%xmm1, %xmm2
    0000035a: 	movdqa	%xmm13, %xmm14
    0000035f: 	punpckhwd	%xmm1, %xmm13
    00000364: 	punpcklwd	%xmm1, %xmm12
    00000369: 	punpcklwd	%xmm1, %xmm14
    0000036e: 	movdqa	%xmm14, %xmm6
    00000373: 	punpckhdq	%xmm0, %xmm14
    00000378: 	punpckldq	%xmm0, %xmm6
    0000037c: 	paddq	%xmm5, %xmm6
    00000380: 	movdqa	%xmm13, %xmm5
    00000385: 	paddq	%xmm14, %xmm6
    0000038a: 	punpckhdq	%xmm0, %xmm5
    0000038e: 	paddq	%xmm7, %xmm6
    00000392: 	movdqa	%xmm13, %xmm7
    00000397: 	punpckldq	%xmm0, %xmm7
    0000039b: 	paddq	%xmm7, %xmm5
    0000039f: 	movdqa	%xmm12, %xmm7
    000003a4: 	punpckhdq	%xmm0, %xmm12
    000003a9: 	punpckldq	%xmm0, %xmm7
    000003ad: 	paddq	%xmm7, %xmm5
    000003b1: 	paddq	%xmm5, %xmm6
    000003b5: 	movdqa	%xmm2, %xmm5
    000003b9: 	punpckhdq	%xmm0, %xmm2
    000003bd: 	punpckldq	%xmm0, %xmm5
    000003c1: 	paddq	%xmm5, %xmm12
    000003c6: 	paddq	%xmm12, %xmm2
    000003cb: 	paddq	%xmm2, %xmm6
    000003cf: 	movdqa	DATAat0x165f0(%rip), %xmm2
    000003d7: 	pand	%xmm4, %xmm2
    000003db: 	pcmpeqb	%xmm3, %xmm2
    000003df: 	pandn	%xmm8, %xmm2
    000003e4: 	movdqa	%xmm2, %xmm12
    000003e9: 	punpckhbw	%xmm3, %xmm2
    000003ed: 	punpcklbw	%xmm3, %xmm12
    000003f2: 	movdqa	%xmm2, %xmm13
    000003f7: 	punpckhwd	%xmm1, %xmm2
    000003fb: 	movdqa	%xmm12, %xmm5
    00000400: 	punpckhwd	%xmm1, %xmm12
    00000405: 	punpcklwd	%xmm1, %xmm13
    0000040a: 	punpcklwd	%xmm1, %xmm5
    0000040e: 	movdqa	%xmm5, %xmm14
    00000413: 	movdqa	%xmm5, %xmm7
    00000417: 	movdqa	%xmm12, %xmm5
    0000041c: 	punpckldq	%xmm0, %xmm14
    00000421: 	punpckhdq	%xmm0, %xmm7
    00000425: 	punpckldq	%xmm0, %xmm5
    00000429: 	paddq	%xmm14, %xmm7
    0000042e: 	punpckhdq	%xmm0, %xmm12
    00000433: 	paddq	%xmm5, %xmm7
    00000437: 	movdqa	%xmm13, %xmm5
    0000043c: 	punpckhdq	%xmm0, %xmm13
    00000441: 	punpckldq	%xmm0, %xmm5
    00000445: 	paddq	%xmm6, %xmm7
    00000449: 	paddq	%xmm5, %xmm12
    0000044e: 	movdqa	%xmm2, %xmm5
    00000452: 	paddq	%xmm12, %xmm13
    00000457: 	movdqa	%xmm2, %xmm12
    0000045c: 	punpckldq	%xmm0, %xmm5
    00000460: 	movdqa	DATAat0x165e0(%rip), %xmm2
    00000468: 	paddq	%xmm13, %xmm7
    0000046d: 	punpckhdq	%xmm0, %xmm12
    00000472: 	pand	%xmm4, %xmm2
    00000476: 	paddq	%xmm5, %xmm12
    0000047b: 	pand	%xmm8, %xmm4
    00000480: 	pcmpeqb	%xmm3, %xmm2
    00000484: 	pcmpeqb	%xmm3, %xmm4
    00000488: 	pandn	%xmm8, %xmm2
    0000048d: 	pandn	%xmm8, %xmm4
    00000492: 	movdqa	%xmm2, %xmm13
    00000497: 	punpckhbw	%xmm3, %xmm2
    0000049b: 	punpcklbw	%xmm3, %xmm13
    000004a0: 	movdqa	%xmm2, %xmm6
    000004a4: 	punpckhwd	%xmm1, %xmm2
    000004a8: 	movdqa	%xmm13, %xmm14
    000004ad: 	punpckhwd	%xmm1, %xmm13
    000004b2: 	punpcklwd	%xmm1, %xmm6
    000004b6: 	punpcklwd	%xmm1, %xmm14
    000004bb: 	movdqa	%xmm13, %xmm5
    000004c0: 	punpckhdq	%xmm0, %xmm13
    000004c5: 	movdqa	%xmm14, %xmm15
    000004ca: 	punpckldq	%xmm0, %xmm5
    000004ce: 	punpckldq	%xmm0, %xmm14
    000004d3: 	punpckhdq	%xmm0, %xmm15
    000004d8: 	paddq	%xmm14, %xmm12
    000004dd: 	paddq	%xmm15, %xmm5
    000004e2: 	paddq	%xmm12, %xmm7
    000004e7: 	paddq	%xmm13, %xmm5
    000004ec: 	paddq	%xmm7, %xmm5
    000004f0: 	movdqa	%xmm6, %xmm7
    000004f4: 	punpckhdq	%xmm0, %xmm6
    000004f8: 	punpckldq	%xmm0, %xmm7
    000004fc: 	paddq	%xmm7, %xmm6
    00000500: 	movdqa	%xmm2, %xmm7
    00000504: 	punpckhdq	%xmm0, %xmm2
    00000508: 	punpckldq	%xmm0, %xmm7
    0000050c: 	paddq	%xmm7, %xmm6
    00000510: 	movdqa	%xmm4, %xmm7
    00000514: 	punpckhbw	%xmm3, %xmm4
    00000518: 	punpcklbw	%xmm3, %xmm7
    0000051c: 	paddq	%xmm6, %xmm5
    00000520: 	movdqa	%xmm4, %xmm6
    00000524: 	movdqa	%xmm7, %xmm12
    00000529: 	punpckhwd	%xmm1, %xmm7
    0000052d: 	punpcklwd	%xmm1, %xmm6
    00000531: 	punpcklwd	%xmm1, %xmm12
    00000536: 	punpckhwd	%xmm1, %xmm4
    0000053a: 	movdqa	%xmm12, %xmm13
    0000053f: 	punpckhdq	%xmm0, %xmm12
    00000544: 	punpckldq	%xmm0, %xmm13
    00000549: 	paddq	%xmm13, %xmm2
    0000054e: 	paddq	%xmm12, %xmm2
    00000553: 	paddq	%xmm5, %xmm2
    00000557: 	movdqa	%xmm7, %xmm5
    0000055b: 	punpckhdq	%xmm0, %xmm7
    0000055f: 	punpckldq	%xmm0, %xmm5
    00000563: 	paddq	%xmm5, %xmm7
    00000567: 	movdqa	%xmm6, %xmm5
    0000056b: 	punpckhdq	%xmm0, %xmm6
    0000056f: 	punpckldq	%xmm0, %xmm5
    00000573: 	paddq	%xmm5, %xmm7
    00000577: 	movdqa	%xmm4, %xmm5
    0000057b: 	punpckhdq	%xmm0, %xmm4
    0000057f: 	punpckldq	%xmm0, %xmm5
    00000583: 	paddq	%xmm7, %xmm2
    00000587: 	paddq	%xmm5, %xmm6
    0000058b: 	paddq	%xmm6, %xmm4
    0000058f: 	paddq	%xmm2, %xmm4
    00000593: 	paddq	%xmm4, %xmm9
    00000598: 	cmpq	%rdx, %rax
    0000059b: 	jne	.Ltmp838 # Offset: 1435
    000005a1: 	movdqa	%xmm9, %xmm0
    000005a6: 	movq	%rcx, %rdx
    000005a9: 	psrldq	$0x8, %xmm0
    000005ae: 	andq	$-0x10, %rdx
    000005b2: 	paddq	%xmm0, %xmm9
    000005b7: 	addq	%rdx, %r10
    000005ba: 	movq	%xmm9, %rax
    000005bf: 	addq	%rax, %r8
    000005c2: 	movq	%rdx, %rax
    000005c5: 	negq	%rax
    000005c8: 	leaq	(%rdi,%rax,8), %rax
    000005cc: 	cmpq	%rdx, %rcx
    000005cf: 	je	.Ltmp839 # Offset: 1487
.Ltmp842:
    000005d5: 	subq	$0x8, %rax
    000005d9: 	leaq	0x1(%r9,%r10), %rdx
    000005de: 	leaq	(%r9,%r10), %rcx
    000005e2: 	shrq	$0x3, %rax
    000005e6: 	leaq	(%rax,%rdx), %rbx
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp840:
    000005f0: 	movsbq	(%rcx), %rax
    000005f4: 	movq	%rax, %rdx
    000005f7: 	shrq	$0x3f, %rax
    000005fb: 	movl	%edx, %r10d
    000005fe: 	andl	$0x40, %r10d
    00000602: 	cmpb	$0x1, %r10b
    00000606: 	movl	%edx, %r10d
    00000609: 	sbbq	$-0x1, %rax
    0000060d: 	andl	$0x20, %r10d
    00000611: 	cmpb	$0x1, %r10b
    00000615: 	movl	%edx, %r10d
    00000618: 	sbbq	$-0x1, %rax
    0000061c: 	andl	$0x10, %r10d
    00000620: 	cmpb	$0x1, %r10b
    00000624: 	movl	%edx, %r10d
    00000627: 	sbbq	$-0x1, %rax
    0000062b: 	andl	$0x8, %r10d
    0000062f: 	cmpb	$0x1, %r10b
    00000633: 	movl	%edx, %r10d
    00000636: 	sbbq	$-0x1, %rax
    0000063a: 	andl	$0x4, %r10d
    0000063e: 	cmpb	$0x1, %r10b
    00000642: 	movl	%edx, %r10d
    00000645: 	sbbq	$-0x1, %rax
    00000649: 	andl	$0x2, %r10d
    0000064d: 	cmpb	$0x1, %r10b
    00000651: 	sbbq	$-0x1, %rax
    00000655: 	andl	$0x1, %edx
    00000658: 	cmpb	$0x1, %dl
    0000065b: 	sbbq	$-0x1, %rax
    0000065f: 	addq	$0x1, %rcx
    00000663: 	addq	%rax, %r8
    00000666: 	cmpq	%rcx, %rbx
    00000669: 	jne	.Ltmp840 # Offset: 1641
.Ltmp839:
    0000066b: 	andq	$-0x8, %r11
    0000066f: 	andl	$0x7, %edi
    00000672: 	leaq	0x8(%rsi,%r11), %rsi
    00000677: 	leaq	-0x1(%rdi), %rdx
    0000067b: 	je	.Ltmp841 # Offset: 1659
.Ltmp843:
    00000681: 	movl	%esi, %ecx
    00000683: 	movl	$0x1, %eax
    00000688: 	movq	%rsi, %rdi
    0000068b: 	andl	$0x7, %ecx
    0000068e: 	movl	%eax, %ebx
    00000690: 	shrq	$0x3, %rdi
    00000694: 	shll	%cl, %ebx
    00000696: 	movl	%ebx, %ecx
    00000698: 	andb	(%r9,%rdi), %cl
    0000069c: 	cmpb	$0x1, %cl
    0000069f: 	leaq	0x1(%rsi), %rcx
    000006a3: 	sbbq	$-0x1, %r8
    000006a7: 	testq	%rdx, %rdx
    000006aa: 	je	.Ltmp841 # Offset: 1706
    000006b0: 	movq	%rcx, %rdi
    000006b3: 	movl	%eax, %ebx
    000006b5: 	andl	$0x7, %ecx
    000006b8: 	shrq	$0x3, %rdi
    000006bc: 	shll	%cl, %ebx
    000006be: 	movl	%ebx, %ecx
    000006c0: 	andb	(%r9,%rdi), %cl
    000006c4: 	cmpb	$0x1, %cl
    000006c7: 	leaq	0x2(%rsi), %rcx
    000006cb: 	sbbq	$-0x1, %r8
    000006cf: 	cmpq	$0x1, %rdx
    000006d3: 	je	.Ltmp841 # Offset: 1747
    000006d9: 	movq	%rcx, %rdi
    000006dc: 	movl	%eax, %ebx
    000006de: 	andl	$0x7, %ecx
    000006e1: 	shrq	$0x3, %rdi
    000006e5: 	shll	%cl, %ebx
    000006e7: 	movl	%ebx, %ecx
    000006e9: 	andb	(%r9,%rdi), %cl
    000006ed: 	cmpb	$0x1, %cl
    000006f0: 	leaq	0x3(%rsi), %rcx
    000006f4: 	sbbq	$-0x1, %r8
    000006f8: 	cmpq	$0x2, %rdx
    000006fc: 	je	.Ltmp841 # Offset: 1788
    00000702: 	movq	%rcx, %rdi
    00000705: 	movl	%eax, %ebx
    00000707: 	andl	$0x7, %ecx
    0000070a: 	shrq	$0x3, %rdi
    0000070e: 	shll	%cl, %ebx
    00000710: 	movl	%ebx, %ecx
    00000712: 	andb	(%r9,%rdi), %cl
    00000716: 	cmpb	$0x1, %cl
    00000719: 	leaq	0x4(%rsi), %rcx
    0000071d: 	sbbq	$-0x1, %r8
    00000721: 	cmpq	$0x3, %rdx
    00000725: 	je	.Ltmp841 # Offset: 1829
    00000727: 	movq	%rcx, %rdi
    0000072a: 	movl	%eax, %ebx
    0000072c: 	andl	$0x7, %ecx
    0000072f: 	shrq	$0x3, %rdi
    00000733: 	shll	%cl, %ebx
    00000735: 	movl	%ebx, %ecx
    00000737: 	andb	(%r9,%rdi), %cl
    0000073b: 	cmpb	$0x1, %cl
    0000073e: 	leaq	0x5(%rsi), %rcx
    00000742: 	sbbq	$-0x1, %r8
    00000746: 	cmpq	$0x4, %rdx
    0000074a: 	je	.Ltmp841 # Offset: 1866
    0000074c: 	movq	%rcx, %rdi
    0000074f: 	movl	%eax, %ebx
    00000751: 	andl	$0x7, %ecx
    00000754: 	shrq	$0x3, %rdi
    00000758: 	shll	%cl, %ebx
    0000075a: 	movl	%ebx, %ecx
    0000075c: 	andb	(%r9,%rdi), %cl
    00000760: 	cmpb	$0x1, %cl
    00000763: 	leaq	0x6(%rsi), %rcx
    00000767: 	sbbq	$-0x1, %r8
    0000076b: 	cmpq	$0x5, %rdx
    0000076f: 	je	.Ltmp841 # Offset: 1903
    00000771: 	movq	%rcx, %rdx
    00000774: 	andl	$0x7, %ecx
    00000777: 	shrq	$0x3, %rdx
    0000077b: 	shll	%cl, %eax
    0000077d: 	andb	(%r9,%rdx), %al
    00000781: 	cmpb	$0x1, %al
    00000783: 	sbbq	$-0x1, %r8
.Ltmp841:
    00000787: 	movq	%r8, %rax
    0000078a: 	popq	%rbx
    0000078b: 	retq # Offset: 1931
.Ltmp837:
    0000078c: 	movq	%rdi, %rax
    0000078f: 	jmp	.Ltmp842 # Offset: 1935
.Ltmp836:
    00000794: 	leaq	-0x1(%rdi), %rdx
    00000798: 	jmp	.Ltmp843 # Offset: 1944
DWARF CFI Instructions:
    <empty>
End of Function "_Z18CountBitsByteLoop2ImEmPT_mm"

Binary Function "_Z9CountBitsImEmPT_mm" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0xf240
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0xf240
  Section     : .text
  Orc Section : .local.text._Z9CountBitsImEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	xorl	%r8d, %r8d
    0000000a: 	cmpq	%rsi, %rdx
    0000000d: 	jb	.Ltmp844 # Offset: 13
    0000000f: 	je	.Ltmp844 # Offset: 15
    00000011: 	movl	$0x1, %r9d
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp845:
    00000020: 	movq	%rcx, %rsi
    00000023: 	movq	%r9, %rax
    00000026: 	shrq	$0x6, %rsi
    0000002a: 	shlq	%cl, %rax
    0000002d: 	andq	(%rdi,%rsi,8), %rax
    00000031: 	cmpq	$0x1, %rax
    00000035: 	sbbq	$-0x1, %r8
    00000039: 	addq	$0x1, %rcx
    0000003d: 	cmpq	%rcx, %rdx
    00000040: 	jne	.Ltmp845 # Offset: 64
.Ltmp844:
    00000042: 	movq	%r8, %rax
    00000045: 	retq # Offset: 69
DWARF CFI Instructions:
    <empty>
End of Function "_Z9CountBitsImEmPT_mm"

Binary Function "_Z16SetBitsOptimizedIhEvPT_mm" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0xf290
  Size        : 0x180
  MaxSize     : 0x180
  Offset      : 0xf290
  Section     : .text
  Orc Section : .local.text._Z16SetBitsOptimizedIhEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp846 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdx, %rax
    00000012: 	pushq	%r13
    00000014: 	shrq	$0x3, %rax
    00000018: 	movq	%rdx, %r13
    0000001b: 	pushq	%r12
    0000001d: 	movq	%rdi, %r12
    00000020: 	movq	%rsi, %rdi
    00000023: 	subq	%rsi, %r13
    00000026: 	shrq	$0x3, %rdi
    0000002a: 	pushq	%rbp
    0000002b: 	movq	%rdx, %rbp
    0000002e: 	pushq	%rbx
    0000002f: 	movq	%rsi, %rbx
    00000032: 	cmpq	%rdi, %rax
    00000035: 	jbe	.Ltmp847 # Offset: 53
    00000037: 	movq	%rsi, %rcx
    0000003a: 	andl	$0x7, %ecx
    0000003d: 	je	.Ltmp847 # Offset: 61
    0000003f: 	addq	$0x8, %rbx
    00000043: 	movl	$0xffffffff, %eax
    00000048: 	leaq	-0x8(%rcx,%r13), %r13
    0000004d: 	subq	%rcx, %rbx
    00000050: 	shll	%cl, %eax
    00000052: 	orb	%al, (%r12,%rdi)
    00000056: 	movq	%rbx, %rdi
    00000059: 	shrq	$0x3, %rdi
.Ltmp847:
    0000005d: 	cmpq	$0x200, %r13
    00000064: 	ja	.Ltmp848 # Offset: 100
    00000066: 	cmpq	$0x7, %r13
    0000006a: 	jbe	.Ltmp849 # Offset: 106
    0000006c: 	leaq	-0x8(%r13), %rcx
    00000070: 	addq	%r12, %rdi
    00000073: 	movq	$-0x1, %r8
    0000007a: 	movq	%rcx, %rax
    0000007d: 	shrq	$0x3, %rax
    00000081: 	addq	$0x1, %rax
    00000085: 	cmpl	$0x8, %eax
    00000088: 	jae	.Ltmp850 # Offset: 136
    0000008e: 	testb	$0x4, %al
    00000090: 	jne	.Ltmp851 # Offset: 144
    00000096: 	testl	%eax, %eax
    00000098: 	je	.Ltmp852 # Offset: 152
    0000009a: 	movb	$-0x1, (%rdi)
    0000009d: 	testb	$0x2, %al
    0000009f: 	jne	.Ltmp853 # Offset: 159
.Ltmp852:
    000000a5: 	andq	$-0x8, %rcx
    000000a9: 	andl	$0x7, %r13d
    000000ad: 	leaq	0x8(%rbx,%rcx), %rbx
    000000b2: 	jmp	.Ltmp849 # Offset: 178
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp848:
    000000b8: 	movq	%r13, %r14
    000000bb: 	addq	%r12, %rdi
    000000be: 	movl	$0xff, %esi
    000000c3: 	shrq	$0x3, %r14
    000000c7: 	movq	%r14, %rdx
    000000ca: 	shlq	$0x3, %r14
    000000ce: 	callq	memset@PLT # Offset: 206
    000000d3: 	addq	%r14, %rbx
    000000d6: 	subq	%r14, %r13
.Ltmp849:
    000000d9: 	testq	%r13, %r13
    000000dc: 	je	.Ltmp854 # Offset: 220
    000000de: 	movl	$0xffffffff, %edx
    000000e3: 	movl	%ebp, %ecx
    000000e5: 	movq	%rbx, %rsi
    000000e8: 	andl	$0x7, %ecx
    000000eb: 	movl	%edx, %eax
    000000ed: 	shrq	$0x3, %rsi
    000000f1: 	shll	%cl, %eax
    000000f3: 	movl	%ebx, %ecx
    000000f5: 	andl	$0x7, %ecx
    000000f8: 	notl	%eax
    000000fa: 	shll	%cl, %edx
    000000fc: 	andl	%edx, %eax
    000000fe: 	orb	%al, (%r12,%rsi)
.Ltmp854:
    00000102: 	popq	%rbx
    00000103: 	popq	%rbp
    00000104: 	popq	%r12
    00000106: 	popq	%r13
    00000108: 	popq	%r14
    0000010a: 	retq # Offset: 266
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp846:
    00000110: 	retq # Offset: 272
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp850:
    00000118: 	leaq	0x8(%rdi), %rsi
    0000011c: 	movl	%eax, %edx
    0000011e: 	movq	$-0x1, (%rdi)
    00000125: 	movq	$-0x1, -0x8(%rdi,%rdx)
    0000012e: 	andq	$-0x8, %rsi
    00000132: 	subq	%rsi, %rdi
    00000135: 	addl	%edi, %eax
    00000137: 	andl	$-0x8, %eax
    0000013a: 	cmpl	$0x8, %eax
    0000013d: 	jb	.Ltmp852 # Offset: 317
    00000143: 	andl	$-0x8, %eax
    00000146: 	xorl	%edx, %edx
.Ltmp855:
    00000148: 	movl	%edx, %edi
    0000014a: 	addl	$0x8, %edx
    0000014d: 	movq	%r8, (%rsi,%rdi)
    00000151: 	cmpl	%eax, %edx
    00000153: 	jb	.Ltmp855 # Offset: 339
    00000155: 	jmp	.Ltmp852 # Offset: 341
.Ltmp851:
    0000015a: 	movl	%eax, %eax
    0000015c: 	movl	$0xffffffff, (%rdi)
    00000162: 	movl	$0xffffffff, -0x4(%rdi,%rax)
    0000016a: 	jmp	.Ltmp852 # Offset: 362
.Ltmp853:
    0000016f: 	movl	%eax, %eax
    00000171: 	movl	$0xffffffff, %edx
    00000176: 	movw	%dx, -0x2(%rdi,%rax)
    0000017b: 	jmp	.Ltmp852 # Offset: 379
DWARF CFI Instructions:
    <empty>
End of Function "_Z16SetBitsOptimizedIhEvPT_mm"

Binary Function "_Z16SetBitsOptimizedItEvPT_mm" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0xf410
  Size        : 0x174
  MaxSize     : 0x180
  Offset      : 0xf410
  Section     : .text
  Orc Section : .local.text._Z16SetBitsOptimizedItEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp856 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	movq	%rdx, %r13
    00000014: 	pushq	%r12
    00000016: 	subq	%rsi, %r13
    00000019: 	movq	%rdi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rdx, %rbp
    00000020: 	movq	%rsi, %rdx
    00000023: 	movq	%rbp, %rax
    00000026: 	shrq	$0x4, %rdx
    0000002a: 	pushq	%rbx
    0000002b: 	movq	%rsi, %rbx
    0000002e: 	shrq	$0x4, %rax
    00000032: 	cmpq	%rdx, %rax
    00000035: 	jbe	.Ltmp857 # Offset: 53
    00000037: 	movq	%rsi, %rcx
    0000003a: 	andl	$0xf, %ecx
    0000003d: 	je	.Ltmp857 # Offset: 61
    0000003f: 	addq	$0x10, %rbx
    00000043: 	movl	$0xffffffff, %eax
    00000048: 	leaq	-0x10(%rcx,%r13), %r13
    0000004d: 	subq	%rcx, %rbx
    00000050: 	shll	%cl, %eax
    00000052: 	orw	%ax, (%rdi,%rdx,2)
    00000056: 	movq	%rbx, %rdx
    00000059: 	shrq	$0x4, %rdx
.Ltmp857:
    0000005d: 	cmpq	$0x200, %r13
    00000064: 	ja	.Ltmp858 # Offset: 100
    00000066: 	cmpq	$0xf, %r13
    0000006a: 	jbe	.Ltmp859 # Offset: 106
    0000006c: 	leaq	-0x10(%r13), %rsi
    00000070: 	leaq	(%r12,%rdx,2), %rdx
    00000074: 	movq	%rsi, %rax
    00000077: 	shrq	$0x4, %rax
    0000007b: 	leaq	0x2(%rax,%rax), %rax
    00000080: 	cmpl	$0x8, %eax
    00000083: 	jae	.Ltmp860 # Offset: 131
    00000089: 	testb	$0x4, %al
    0000008b: 	jne	.Ltmp861 # Offset: 139
    00000091: 	testl	%eax, %eax
    00000093: 	je	.Ltmp862 # Offset: 147
    00000095: 	movb	$-0x1, (%rdx)
    00000098: 	testb	$0x2, %al
    0000009a: 	jne	.Ltmp863 # Offset: 154
.Ltmp862:
    000000a0: 	andq	$-0x10, %rsi
    000000a4: 	andl	$0xf, %r13d
    000000a8: 	leaq	0x10(%rbx,%rsi), %rbx
    000000ad: 	jmp	.Ltmp859 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp858:
    000000b0: 	movq	%r13, %r14
    000000b3: 	leaq	(%r12,%rdx,2), %rdi
    000000b7: 	movl	$0xff, %esi
    000000bc: 	shrq	$0x4, %r14
    000000c0: 	leaq	(%r14,%r14), %r8
    000000c4: 	shlq	$0x4, %r14
    000000c8: 	movq	%r8, %rdx
    000000cb: 	addq	%r14, %rbx
    000000ce: 	subq	%r14, %r13
    000000d1: 	callq	memset@PLT # Offset: 209
.Ltmp859:
    000000d6: 	testq	%r13, %r13
    000000d9: 	je	.Ltmp864 # Offset: 217
    000000db: 	movl	$0xffffffff, %edx
    000000e0: 	movl	%ebp, %ecx
    000000e2: 	movq	%rbx, %rsi
    000000e5: 	andl	$0xf, %ecx
    000000e8: 	movl	%edx, %eax
    000000ea: 	shrq	$0x4, %rsi
    000000ee: 	shll	%cl, %eax
    000000f0: 	movl	%ebx, %ecx
    000000f2: 	andl	$0xf, %ecx
    000000f5: 	notl	%eax
    000000f7: 	shll	%cl, %edx
    000000f9: 	andl	%edx, %eax
    000000fb: 	orw	%ax, (%r12,%rsi,2)
.Ltmp864:
    00000100: 	popq	%rbx
    00000101: 	popq	%rbp
    00000102: 	popq	%r12
    00000104: 	popq	%r13
    00000106: 	popq	%r14
    00000108: 	retq # Offset: 264
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp856:
    00000110: 	retq # Offset: 272
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp860:
    00000118: 	leaq	0x8(%rdx), %rdi
    0000011c: 	movl	%eax, %ecx
    0000011e: 	movq	$-0x1, (%rdx)
    00000125: 	movq	$-0x1, -0x8(%rdx,%rcx)
    0000012e: 	andq	$-0x8, %rdi
    00000132: 	subq	%rdi, %rdx
    00000135: 	leal	(%rax,%rdx), %ecx
    00000138: 	movl	%ecx, %eax
    0000013a: 	shrl	$0x3, %eax
    0000013d: 	movl	%eax, %ecx
    0000013f: 	movq	$-0x1, %rax
    00000146: 	rep		stosq	%rax, %es:(%rdi)
    00000149: 	jmp	.Ltmp862 # Offset: 329
.Ltmp861:
    0000014e: 	movl	%eax, %eax
    00000150: 	movl	$0xffffffff, (%rdx)
    00000156: 	movl	$0xffffffff, -0x4(%rdx,%rax)
    0000015e: 	jmp	.Ltmp862 # Offset: 350
.Ltmp863:
    00000163: 	movl	%eax, %eax
    00000165: 	movl	$0xffffffff, %ecx
    0000016a: 	movw	%cx, -0x2(%rdx,%rax)
    0000016f: 	jmp	.Ltmp862 # Offset: 367
DWARF CFI Instructions:
    <empty>
End of Function "_Z16SetBitsOptimizedItEvPT_mm"

Binary Function "_Z16SetBitsOptimizedIjEvPT_mm" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0xf590
  Size        : 0x163
  MaxSize     : 0x170
  Offset      : 0xf590
  Section     : .text
  Orc Section : .local.text._Z16SetBitsOptimizedIjEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp865 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	movq	%rdx, %r13
    00000014: 	pushq	%r12
    00000016: 	subq	%rsi, %r13
    00000019: 	movq	%rdi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rdx, %rbp
    00000020: 	movq	%rsi, %rdx
    00000023: 	movq	%rbp, %rax
    00000026: 	shrq	$0x5, %rdx
    0000002a: 	pushq	%rbx
    0000002b: 	movq	%rsi, %rbx
    0000002e: 	shrq	$0x5, %rax
    00000032: 	cmpq	%rdx, %rax
    00000035: 	jbe	.Ltmp866 # Offset: 53
    00000037: 	movq	%rsi, %rcx
    0000003a: 	andl	$0x1f, %ecx
    0000003d: 	je	.Ltmp866 # Offset: 61
    0000003f: 	addq	$0x20, %rbx
    00000043: 	movl	$0xffffffff, %eax
    00000048: 	leaq	-0x20(%rcx,%r13), %r13
    0000004d: 	subq	%rcx, %rbx
    00000050: 	shll	%cl, %eax
    00000052: 	orl	%eax, (%rdi,%rdx,4)
    00000055: 	movq	%rbx, %rdx
    00000058: 	shrq	$0x5, %rdx
.Ltmp866:
    0000005c: 	cmpq	$0x200, %r13
    00000063: 	ja	.Ltmp867 # Offset: 99
    00000065: 	cmpq	$0x1f, %r13
    00000069: 	jbe	.Ltmp868 # Offset: 105
    0000006b: 	leaq	-0x20(%r13), %rsi
    0000006f: 	leaq	(%r12,%rdx,4), %rdx
    00000073: 	movq	%rsi, %rax
    00000076: 	shrq	$0x5, %rax
    0000007a: 	leaq	0x4(,%rax,4), %rax
    00000082: 	cmpl	$0x8, %eax
    00000085: 	jae	.Ltmp869 # Offset: 133
    0000008b: 	testb	$0x4, %al
    0000008d: 	jne	.Ltmp870 # Offset: 141
    00000093: 	testl	%eax, %eax
    00000095: 	je	.Ltmp871 # Offset: 149
    00000097: 	movb	$-0x1, (%rdx)
.Ltmp871:
    0000009a: 	andq	$-0x20, %rsi
    0000009e: 	andl	$0x1f, %r13d
    000000a2: 	leaq	0x20(%rbx,%rsi), %rbx
    000000a7: 	jmp	.Ltmp868 # Offset: 167
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp867:
    000000b0: 	movq	%r13, %r14
    000000b3: 	leaq	(%r12,%rdx,4), %rdi
    000000b7: 	movl	$0xff, %esi
    000000bc: 	shrq	$0x5, %r14
    000000c0: 	leaq	(,%r14,4), %r8
    000000c8: 	shlq	$0x5, %r14
    000000cc: 	movq	%r8, %rdx
    000000cf: 	addq	%r14, %rbx
    000000d2: 	subq	%r14, %r13
    000000d5: 	callq	memset@PLT # Offset: 213
.Ltmp868:
    000000da: 	testq	%r13, %r13
    000000dd: 	je	.Ltmp872 # Offset: 221
    000000df: 	movl	$0xffffffff, %edx
    000000e4: 	movl	%ebp, %ecx
    000000e6: 	movq	%rbx, %rsi
    000000e9: 	movl	%edx, %eax
    000000eb: 	shrq	$0x5, %rsi
    000000ef: 	shll	%cl, %eax
    000000f1: 	movl	%ebx, %ecx
    000000f3: 	notl	%eax
    000000f5: 	shll	%cl, %edx
    000000f7: 	andl	%edx, %eax
    000000f9: 	orl	%eax, (%r12,%rsi,4)
.Ltmp872:
    000000fd: 	popq	%rbx
    000000fe: 	popq	%rbp
    000000ff: 	popq	%r12
    00000101: 	popq	%r13
    00000103: 	popq	%r14
    00000105: 	retq # Offset: 261
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp865:
    00000110: 	retq # Offset: 272
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp869:
    00000118: 	leaq	0x8(%rdx), %rdi
    0000011c: 	movl	%eax, %ecx
    0000011e: 	movq	$-0x1, (%rdx)
    00000125: 	movq	$-0x1, -0x8(%rdx,%rcx)
    0000012e: 	andq	$-0x8, %rdi
    00000132: 	subq	%rdi, %rdx
    00000135: 	leal	(%rax,%rdx), %ecx
    00000138: 	movl	%ecx, %eax
    0000013a: 	shrl	$0x3, %eax
    0000013d: 	movl	%eax, %ecx
    0000013f: 	movq	$-0x1, %rax
    00000146: 	rep		stosq	%rax, %es:(%rdi)
    00000149: 	jmp	.Ltmp871 # Offset: 329
.Ltmp870:
    0000014e: 	movl	%eax, %eax
    00000150: 	movl	$0xffffffff, (%rdx)
    00000156: 	movl	$0xffffffff, -0x4(%rdx,%rax)
    0000015e: 	jmp	.Ltmp871 # Offset: 350
DWARF CFI Instructions:
    <empty>
End of Function "_Z16SetBitsOptimizedIjEvPT_mm"

Binary Function "_Z16SetBitsOptimizedImEvPT_mm" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0xf700
  Size        : 0x129
  MaxSize     : 0x130
  Offset      : 0xf700
  Section     : .text
  Orc Section : .local.text._Z16SetBitsOptimizedImEvPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp873 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	pushq	%r14
    00000012: 	shrq	$0x6, %rax
    00000016: 	pushq	%r13
    00000018: 	movq	%rdx, %r13
    0000001b: 	pushq	%r12
    0000001d: 	subq	%rsi, %r13
    00000020: 	movq	%rdi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%rdx, %rbp
    00000027: 	shrq	$0x6, %rdx
    0000002b: 	pushq	%rbx
    0000002c: 	movq	%rsi, %rbx
    0000002f: 	cmpq	%rax, %rdx
    00000032: 	jbe	.Ltmp874 # Offset: 50
    00000034: 	movq	%rsi, %rcx
    00000037: 	andl	$0x3f, %ecx
    0000003a: 	je	.Ltmp874 # Offset: 58
    0000003c: 	addq	$0x40, %rbx
    00000040: 	movq	$-0x1, %rdx
    00000047: 	leaq	-0x40(%rcx,%r13), %r13
    0000004c: 	subq	%rcx, %rbx
    0000004f: 	shlq	%cl, %rdx
    00000052: 	orq	%rdx, (%rdi,%rax,8)
    00000056: 	movq	%rbx, %rax
    00000059: 	shrq	$0x6, %rax
.Ltmp874:
    0000005d: 	cmpq	$0x200, %r13
    00000064: 	ja	.Ltmp875 # Offset: 100
    0000006a: 	cmpq	$0x3f, %r13
    0000006e: 	jbe	.Ltmp876 # Offset: 110
    00000070: 	leaq	-0x40(%r13), %rdx
    00000074: 	leaq	(%r12,%rax,8), %rax
    00000078: 	andl	$0x3f, %r13d
    0000007c: 	movq	%rdx, %rcx
    0000007f: 	leaq	0x8(%rax), %rdi
    00000083: 	movq	$-0x1, (%rax)
    0000008a: 	andq	$-0x40, %rdx
    0000008e: 	shrq	$0x6, %rcx
    00000092: 	andq	$-0x8, %rdi
    00000096: 	leaq	0x40(%rbx,%rdx), %rbx
    0000009b: 	leaq	0x8(,%rcx,8), %rcx
    000000a3: 	movl	%ecx, %esi
    000000a5: 	movq	$-0x1, -0x8(%rax,%rsi)
    000000ae: 	subq	%rdi, %rax
    000000b1: 	addl	%eax, %ecx
    000000b3: 	movq	$-0x1, %rax
    000000ba: 	shrl	$0x3, %ecx
    000000bd: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp876:
    000000c0: 	testq	%r13, %r13
    000000c3: 	je	.Ltmp877 # Offset: 195
    000000c5: 	movq	$-0x1, %rdx
    000000cc: 	movl	%ebp, %ecx
    000000ce: 	movq	%rbx, %rsi
    000000d1: 	movq	%rdx, %rax
    000000d4: 	shrq	$0x6, %rsi
    000000d8: 	shlq	%cl, %rax
    000000db: 	movl	%ebx, %ecx
    000000dd: 	notq	%rax
    000000e0: 	shlq	%cl, %rdx
    000000e3: 	andq	%rdx, %rax
    000000e6: 	orq	%rax, (%r12,%rsi,8)
.Ltmp877:
    000000ea: 	popq	%rbx
    000000eb: 	popq	%rbp
    000000ec: 	popq	%r12
    000000ee: 	popq	%r13
    000000f0: 	popq	%r14
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp875:
    000000f8: 	movq	%r13, %r14
    000000fb: 	leaq	(%r12,%rax,8), %rdi
    000000ff: 	movl	$0xff, %esi
    00000104: 	shrq	$0x6, %r14
    00000108: 	leaq	(,%r14,8), %rdx
    00000110: 	shlq	$0x6, %r14
    00000114: 	callq	memset@PLT # Offset: 276
    00000119: 	addq	%r14, %rbx
    0000011c: 	subq	%r14, %r13
    0000011f: 	jmp	.Ltmp876 # Offset: 287
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp873:
    00000128: 	retq # Offset: 296
DWARF CFI Instructions:
    <empty>
End of Function "_Z16SetBitsOptimizedImEvPT_mm"

Binary Function "_Z18CountBitsByteTableImEmPT_mm" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0xf830
  Size        : 0x20c
  MaxSize     : 0x210
  Offset      : 0xf830
  Section     : .text
  Orc Section : .local.text._Z18CountBitsByteTableImEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movq	%rsi, %r8
    0000000a: 	movq	%rdx, %r10
    0000000d: 	cmpq	%rsi, %rdx
    00000010: 	jb	.Ltmp878 # Offset: 16
    00000016: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    0000001d: 	jne	.Ltmp879 # Offset: 29
    0000001f: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 31
.Ltmp879:
    00000024: 	movq	%r10, %rdx
    00000027: 	subq	%r8, %rdx
    0000002a: 	je	.Ltmp878 # Offset: 42
    00000030: 	movq	%r8, %rax
    00000033: 	andl	$0x7, %eax
    00000036: 	je	.Ltmp880 # Offset: 54
    00000038: 	xorl	%eax, %eax
    0000003a: 	movl	$0x1, %edi
    0000003f: 	jmp	.Ltmp881 # Offset: 63
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp882:
    00000048: 	testb	$0x7, %r8b
    0000004c: 	je	.Ltmp880 # Offset: 76
.Ltmp881:
    0000004e: 	movq	%r8, %rsi
    00000051: 	movl	%r8d, %ecx
    00000054: 	movq	%rdi, %r11
    00000057: 	shrq	$0x6, %rsi
    0000005b: 	shlq	%cl, %r11
    0000005e: 	movq	(%r9,%rsi,8), %rcx
    00000062: 	andq	%r11, %rcx
    00000065: 	cmpq	$0x1, %rcx
    00000069: 	sbbq	$-0x1, %rax
    0000006d: 	addq	$0x1, %r8
    00000071: 	subq	$0x1, %rdx
    00000075: 	jne	.Ltmp882 # Offset: 117
.Ltmp885:
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp880:
    00000080: 	movq	%r8, %rsi
    00000083: 	shrq	$0x3, %rsi
    00000087: 	cmpq	$0x7, %rdx
    0000008b: 	jbe	.Ltmp883 # Offset: 139
    00000091: 	leaq	-0x8(%rdx), %r11
    00000095: 	leaq	0x1(%r9,%rsi), %rdi
    0000009a: 	leaq	(%r9,%rsi), %rcx
    0000009e: 	movq	%r11, %rsi
    000000a1: 	leaq	"_ZL13bitCountTable/1"(%rip), %r10
    000000a8: 	shrq	$0x3, %rsi
    000000ac: 	addq	%rsi, %rdi
    000000af: 	nop # Size: 1
.Ltmp884:
    000000b0: 	movzbl	(%rcx), %esi
    000000b3: 	addq	$0x1, %rcx
    000000b7: 	addq	(%r10,%rsi,8), %rax
    000000bb: 	cmpq	%rdi, %rcx
    000000be: 	jne	.Ltmp884 # Offset: 190
    000000c0: 	andq	$-0x8, %r11
    000000c4: 	andl	$0x7, %edx
    000000c7: 	leaq	0x8(%r8,%r11), %r8
    000000cc: 	leaq	-0x1(%rdx), %rsi
    000000d0: 	je	.Ltmp885 # Offset: 208
.Ltmp886:
    000000d2: 	movl	%r8d, %ecx
    000000d5: 	movl	$0x1, %edx
    000000da: 	movq	%r8, %rdi
    000000dd: 	andl	$0x7, %ecx
    000000e0: 	movl	%edx, %r10d
    000000e3: 	shrq	$0x3, %rdi
    000000e7: 	shll	%cl, %r10d
    000000ea: 	movl	%r10d, %ecx
    000000ed: 	andb	(%r9,%rdi), %cl
    000000f1: 	cmpb	$0x1, %cl
    000000f4: 	leaq	0x1(%r8), %rcx
    000000f8: 	sbbq	$-0x1, %rax
    000000fc: 	testq	%rsi, %rsi
    000000ff: 	je	.Ltmp885 # Offset: 255
    00000105: 	movq	%rcx, %rdi
    00000108: 	movl	%edx, %r10d
    0000010b: 	andl	$0x7, %ecx
    0000010e: 	shrq	$0x3, %rdi
    00000112: 	shll	%cl, %r10d
    00000115: 	movl	%r10d, %ecx
    00000118: 	andb	(%r9,%rdi), %cl
    0000011c: 	cmpb	$0x1, %cl
    0000011f: 	leaq	0x2(%r8), %rcx
    00000123: 	sbbq	$-0x1, %rax
    00000127: 	cmpq	$0x1, %rsi
    0000012b: 	je	.Ltmp885 # Offset: 299
    00000131: 	movq	%rcx, %rdi
    00000134: 	movl	%edx, %r10d
    00000137: 	andl	$0x7, %ecx
    0000013a: 	shrq	$0x3, %rdi
    0000013e: 	shll	%cl, %r10d
    00000141: 	movl	%r10d, %ecx
    00000144: 	andb	(%r9,%rdi), %cl
    00000148: 	cmpb	$0x1, %cl
    0000014b: 	leaq	0x3(%r8), %rcx
    0000014f: 	sbbq	$-0x1, %rax
    00000153: 	cmpq	$0x2, %rsi
    00000157: 	je	.Ltmp885 # Offset: 343
    0000015d: 	movq	%rcx, %rdi
    00000160: 	movl	%edx, %r10d
    00000163: 	andl	$0x7, %ecx
    00000166: 	shrq	$0x3, %rdi
    0000016a: 	shll	%cl, %r10d
    0000016d: 	movl	%r10d, %ecx
    00000170: 	andb	(%r9,%rdi), %cl
    00000174: 	cmpb	$0x1, %cl
    00000177: 	leaq	0x4(%r8), %rcx
    0000017b: 	sbbq	$-0x1, %rax
    0000017f: 	cmpq	$0x3, %rsi
    00000183: 	je	.Ltmp885 # Offset: 387
    00000189: 	movq	%rcx, %rdi
    0000018c: 	movl	%edx, %r10d
    0000018f: 	andl	$0x7, %ecx
    00000192: 	shrq	$0x3, %rdi
    00000196: 	shll	%cl, %r10d
    00000199: 	movl	%r10d, %ecx
    0000019c: 	andb	(%r9,%rdi), %cl
    000001a0: 	cmpb	$0x1, %cl
    000001a3: 	leaq	0x5(%r8), %rcx
    000001a7: 	sbbq	$-0x1, %rax
    000001ab: 	cmpq	$0x4, %rsi
    000001af: 	je	.Ltmp885 # Offset: 431
    000001b5: 	movq	%rcx, %rdi
    000001b8: 	movl	%edx, %r10d
    000001bb: 	andl	$0x7, %ecx
    000001be: 	shrq	$0x3, %rdi
    000001c2: 	shll	%cl, %r10d
    000001c5: 	movl	%r10d, %ecx
    000001c8: 	andb	(%r9,%rdi), %cl
    000001cc: 	cmpb	$0x1, %cl
    000001cf: 	leaq	0x6(%r8), %rcx
    000001d3: 	sbbq	$-0x1, %rax
    000001d7: 	cmpq	$0x5, %rsi
    000001db: 	je	.Ltmp885 # Offset: 475
    000001e1: 	movq	%rcx, %rsi
    000001e4: 	andl	$0x7, %ecx
    000001e7: 	shrq	$0x3, %rsi
    000001eb: 	shll	%cl, %edx
    000001ed: 	andb	(%r9,%rsi), %dl
    000001f1: 	cmpb	$0x1, %dl
    000001f4: 	sbbq	$-0x1, %rax
    000001f8: 	retq # Offset: 504
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp878:
    00000200: 	xorl	%eax, %eax
    00000202: 	retq # Offset: 514
.Ltmp883:
    00000203: 	leaq	-0x1(%rdx), %rsi
    00000207: 	jmp	.Ltmp886 # Offset: 519
DWARF CFI Instructions:
    <empty>
End of Function "_Z18CountBitsByteTableImEmPT_mm"

Binary Function "_Z18CountBitsByteTableIjEmPT_mm" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0xfa40
  Size        : 0x20c
  MaxSize     : 0x210
  Offset      : 0xfa40
  Section     : .text
  Orc Section : .local.text._Z18CountBitsByteTableIjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movq	%rsi, %r8
    0000000a: 	movq	%rdx, %r10
    0000000d: 	cmpq	%rsi, %rdx
    00000010: 	jb	.Ltmp887 # Offset: 16
    00000016: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    0000001d: 	jne	.Ltmp888 # Offset: 29
    0000001f: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 31
.Ltmp888:
    00000024: 	movq	%r10, %rdx
    00000027: 	subq	%r8, %rdx
    0000002a: 	je	.Ltmp887 # Offset: 42
    00000030: 	movq	%r8, %rax
    00000033: 	andl	$0x7, %eax
    00000036: 	je	.Ltmp889 # Offset: 54
    00000038: 	xorl	%eax, %eax
    0000003a: 	movl	$0x1, %edi
    0000003f: 	jmp	.Ltmp890 # Offset: 63
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp891:
    00000048: 	testb	$0x7, %r8b
    0000004c: 	je	.Ltmp889 # Offset: 76
.Ltmp890:
    0000004e: 	movq	%r8, %rsi
    00000051: 	movl	%r8d, %ecx
    00000054: 	movl	%edi, %r11d
    00000057: 	shrq	$0x5, %rsi
    0000005b: 	shll	%cl, %r11d
    0000005e: 	movl	(%r9,%rsi,4), %ecx
    00000062: 	andl	%r11d, %ecx
    00000065: 	cmpl	$0x1, %ecx
    00000068: 	sbbq	$-0x1, %rax
    0000006c: 	addq	$0x1, %r8
    00000070: 	subq	$0x1, %rdx
    00000074: 	jne	.Ltmp891 # Offset: 116
.Ltmp894:
    00000076: 	retq # Offset: 118
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp889:
    00000080: 	movq	%r8, %rsi
    00000083: 	shrq	$0x3, %rsi
    00000087: 	cmpq	$0x7, %rdx
    0000008b: 	jbe	.Ltmp892 # Offset: 139
    00000091: 	leaq	-0x8(%rdx), %r11
    00000095: 	leaq	0x1(%r9,%rsi), %rdi
    0000009a: 	leaq	(%r9,%rsi), %rcx
    0000009e: 	movq	%r11, %rsi
    000000a1: 	leaq	"_ZL13bitCountTable/1"(%rip), %r10
    000000a8: 	shrq	$0x3, %rsi
    000000ac: 	addq	%rsi, %rdi
    000000af: 	nop # Size: 1
.Ltmp893:
    000000b0: 	movzbl	(%rcx), %esi
    000000b3: 	addq	$0x1, %rcx
    000000b7: 	addq	(%r10,%rsi,8), %rax
    000000bb: 	cmpq	%rdi, %rcx
    000000be: 	jne	.Ltmp893 # Offset: 190
    000000c0: 	andq	$-0x8, %r11
    000000c4: 	andl	$0x7, %edx
    000000c7: 	leaq	0x8(%r8,%r11), %r8
    000000cc: 	leaq	-0x1(%rdx), %rsi
    000000d0: 	je	.Ltmp894 # Offset: 208
.Ltmp895:
    000000d2: 	movl	%r8d, %ecx
    000000d5: 	movl	$0x1, %edx
    000000da: 	movq	%r8, %rdi
    000000dd: 	andl	$0x7, %ecx
    000000e0: 	movl	%edx, %r10d
    000000e3: 	shrq	$0x3, %rdi
    000000e7: 	shll	%cl, %r10d
    000000ea: 	movl	%r10d, %ecx
    000000ed: 	andb	(%r9,%rdi), %cl
    000000f1: 	cmpb	$0x1, %cl
    000000f4: 	leaq	0x1(%r8), %rcx
    000000f8: 	sbbq	$-0x1, %rax
    000000fc: 	testq	%rsi, %rsi
    000000ff: 	je	.Ltmp894 # Offset: 255
    00000105: 	movq	%rcx, %rdi
    00000108: 	movl	%edx, %r10d
    0000010b: 	andl	$0x7, %ecx
    0000010e: 	shrq	$0x3, %rdi
    00000112: 	shll	%cl, %r10d
    00000115: 	movl	%r10d, %ecx
    00000118: 	andb	(%r9,%rdi), %cl
    0000011c: 	cmpb	$0x1, %cl
    0000011f: 	leaq	0x2(%r8), %rcx
    00000123: 	sbbq	$-0x1, %rax
    00000127: 	cmpq	$0x1, %rsi
    0000012b: 	je	.Ltmp894 # Offset: 299
    00000131: 	movq	%rcx, %rdi
    00000134: 	movl	%edx, %r10d
    00000137: 	andl	$0x7, %ecx
    0000013a: 	shrq	$0x3, %rdi
    0000013e: 	shll	%cl, %r10d
    00000141: 	movl	%r10d, %ecx
    00000144: 	andb	(%r9,%rdi), %cl
    00000148: 	cmpb	$0x1, %cl
    0000014b: 	leaq	0x3(%r8), %rcx
    0000014f: 	sbbq	$-0x1, %rax
    00000153: 	cmpq	$0x2, %rsi
    00000157: 	je	.Ltmp894 # Offset: 343
    0000015d: 	movq	%rcx, %rdi
    00000160: 	movl	%edx, %r10d
    00000163: 	andl	$0x7, %ecx
    00000166: 	shrq	$0x3, %rdi
    0000016a: 	shll	%cl, %r10d
    0000016d: 	movl	%r10d, %ecx
    00000170: 	andb	(%r9,%rdi), %cl
    00000174: 	cmpb	$0x1, %cl
    00000177: 	leaq	0x4(%r8), %rcx
    0000017b: 	sbbq	$-0x1, %rax
    0000017f: 	cmpq	$0x3, %rsi
    00000183: 	je	.Ltmp894 # Offset: 387
    00000189: 	movq	%rcx, %rdi
    0000018c: 	movl	%edx, %r10d
    0000018f: 	andl	$0x7, %ecx
    00000192: 	shrq	$0x3, %rdi
    00000196: 	shll	%cl, %r10d
    00000199: 	movl	%r10d, %ecx
    0000019c: 	andb	(%r9,%rdi), %cl
    000001a0: 	cmpb	$0x1, %cl
    000001a3: 	leaq	0x5(%r8), %rcx
    000001a7: 	sbbq	$-0x1, %rax
    000001ab: 	cmpq	$0x4, %rsi
    000001af: 	je	.Ltmp894 # Offset: 431
    000001b5: 	movq	%rcx, %rdi
    000001b8: 	movl	%edx, %r10d
    000001bb: 	andl	$0x7, %ecx
    000001be: 	shrq	$0x3, %rdi
    000001c2: 	shll	%cl, %r10d
    000001c5: 	movl	%r10d, %ecx
    000001c8: 	andb	(%r9,%rdi), %cl
    000001cc: 	cmpb	$0x1, %cl
    000001cf: 	leaq	0x6(%r8), %rcx
    000001d3: 	sbbq	$-0x1, %rax
    000001d7: 	cmpq	$0x5, %rsi
    000001db: 	je	.Ltmp894 # Offset: 475
    000001e1: 	movq	%rcx, %rsi
    000001e4: 	andl	$0x7, %ecx
    000001e7: 	shrq	$0x3, %rsi
    000001eb: 	shll	%cl, %edx
    000001ed: 	andb	(%r9,%rsi), %dl
    000001f1: 	cmpb	$0x1, %dl
    000001f4: 	sbbq	$-0x1, %rax
    000001f8: 	retq # Offset: 504
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp887:
    00000200: 	xorl	%eax, %eax
    00000202: 	retq # Offset: 514
.Ltmp892:
    00000203: 	leaq	-0x1(%rdx), %rsi
    00000207: 	jmp	.Ltmp895 # Offset: 519
DWARF CFI Instructions:
    <empty>
End of Function "_Z18CountBitsByteTableIjEmPT_mm"

Binary Function "_Z18CountBitsByteTableItEmPT_mm" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0xfc50
  Size        : 0x20c
  MaxSize     : 0x210
  Offset      : 0xfc50
  Section     : .text
  Orc Section : .local.text._Z18CountBitsByteTableItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movq	%rsi, %r8
    0000000a: 	movq	%rdx, %r10
    0000000d: 	cmpq	%rsi, %rdx
    00000010: 	jb	.Ltmp896 # Offset: 16
    00000016: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    0000001d: 	jne	.Ltmp897 # Offset: 29
    0000001f: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 31
.Ltmp897:
    00000024: 	movq	%r10, %rdx
    00000027: 	subq	%r8, %rdx
    0000002a: 	je	.Ltmp896 # Offset: 42
    00000030: 	movq	%r8, %rax
    00000033: 	andl	$0x7, %eax
    00000036: 	je	.Ltmp898 # Offset: 54
    00000038: 	xorl	%eax, %eax
    0000003a: 	movl	$0x1, %edi
    0000003f: 	jmp	.Ltmp899 # Offset: 63
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp900:
    00000048: 	testb	$0x7, %r8b
    0000004c: 	je	.Ltmp898 # Offset: 76
.Ltmp899:
    0000004e: 	movl	%r8d, %ecx
    00000051: 	movq	%r8, %rsi
    00000054: 	movl	%edi, %r11d
    00000057: 	andl	$0xf, %ecx
    0000005a: 	shrq	$0x4, %rsi
    0000005e: 	shll	%cl, %r11d
    00000061: 	movl	%r11d, %ecx
    00000064: 	andw	(%r9,%rsi,2), %cx
    00000069: 	cmpw	$0x1, %cx
    0000006d: 	sbbq	$-0x1, %rax
    00000071: 	addq	$0x1, %r8
    00000075: 	subq	$0x1, %rdx
    00000079: 	jne	.Ltmp900 # Offset: 121
.Ltmp903:
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp898:
    00000080: 	movq	%r8, %rsi
    00000083: 	shrq	$0x3, %rsi
    00000087: 	cmpq	$0x7, %rdx
    0000008b: 	jbe	.Ltmp901 # Offset: 139
    00000091: 	leaq	-0x8(%rdx), %r11
    00000095: 	leaq	0x1(%r9,%rsi), %rdi
    0000009a: 	leaq	(%r9,%rsi), %rcx
    0000009e: 	movq	%r11, %rsi
    000000a1: 	leaq	"_ZL13bitCountTable/1"(%rip), %r10
    000000a8: 	shrq	$0x3, %rsi
    000000ac: 	addq	%rsi, %rdi
    000000af: 	nop # Size: 1
.Ltmp902:
    000000b0: 	movzbl	(%rcx), %esi
    000000b3: 	addq	$0x1, %rcx
    000000b7: 	addq	(%r10,%rsi,8), %rax
    000000bb: 	cmpq	%rdi, %rcx
    000000be: 	jne	.Ltmp902 # Offset: 190
    000000c0: 	andq	$-0x8, %r11
    000000c4: 	andl	$0x7, %edx
    000000c7: 	leaq	0x8(%r8,%r11), %r8
    000000cc: 	leaq	-0x1(%rdx), %rsi
    000000d0: 	je	.Ltmp903 # Offset: 208
.Ltmp904:
    000000d2: 	movl	%r8d, %ecx
    000000d5: 	movl	$0x1, %edx
    000000da: 	movq	%r8, %rdi
    000000dd: 	andl	$0x7, %ecx
    000000e0: 	movl	%edx, %r10d
    000000e3: 	shrq	$0x3, %rdi
    000000e7: 	shll	%cl, %r10d
    000000ea: 	movl	%r10d, %ecx
    000000ed: 	andb	(%r9,%rdi), %cl
    000000f1: 	cmpb	$0x1, %cl
    000000f4: 	leaq	0x1(%r8), %rcx
    000000f8: 	sbbq	$-0x1, %rax
    000000fc: 	testq	%rsi, %rsi
    000000ff: 	je	.Ltmp903 # Offset: 255
    00000105: 	movq	%rcx, %rdi
    00000108: 	movl	%edx, %r10d
    0000010b: 	andl	$0x7, %ecx
    0000010e: 	shrq	$0x3, %rdi
    00000112: 	shll	%cl, %r10d
    00000115: 	movl	%r10d, %ecx
    00000118: 	andb	(%r9,%rdi), %cl
    0000011c: 	cmpb	$0x1, %cl
    0000011f: 	leaq	0x2(%r8), %rcx
    00000123: 	sbbq	$-0x1, %rax
    00000127: 	cmpq	$0x1, %rsi
    0000012b: 	je	.Ltmp903 # Offset: 299
    00000131: 	movq	%rcx, %rdi
    00000134: 	movl	%edx, %r10d
    00000137: 	andl	$0x7, %ecx
    0000013a: 	shrq	$0x3, %rdi
    0000013e: 	shll	%cl, %r10d
    00000141: 	movl	%r10d, %ecx
    00000144: 	andb	(%r9,%rdi), %cl
    00000148: 	cmpb	$0x1, %cl
    0000014b: 	leaq	0x3(%r8), %rcx
    0000014f: 	sbbq	$-0x1, %rax
    00000153: 	cmpq	$0x2, %rsi
    00000157: 	je	.Ltmp903 # Offset: 343
    0000015d: 	movq	%rcx, %rdi
    00000160: 	movl	%edx, %r10d
    00000163: 	andl	$0x7, %ecx
    00000166: 	shrq	$0x3, %rdi
    0000016a: 	shll	%cl, %r10d
    0000016d: 	movl	%r10d, %ecx
    00000170: 	andb	(%r9,%rdi), %cl
    00000174: 	cmpb	$0x1, %cl
    00000177: 	leaq	0x4(%r8), %rcx
    0000017b: 	sbbq	$-0x1, %rax
    0000017f: 	cmpq	$0x3, %rsi
    00000183: 	je	.Ltmp903 # Offset: 387
    00000189: 	movq	%rcx, %rdi
    0000018c: 	movl	%edx, %r10d
    0000018f: 	andl	$0x7, %ecx
    00000192: 	shrq	$0x3, %rdi
    00000196: 	shll	%cl, %r10d
    00000199: 	movl	%r10d, %ecx
    0000019c: 	andb	(%r9,%rdi), %cl
    000001a0: 	cmpb	$0x1, %cl
    000001a3: 	leaq	0x5(%r8), %rcx
    000001a7: 	sbbq	$-0x1, %rax
    000001ab: 	cmpq	$0x4, %rsi
    000001af: 	je	.Ltmp903 # Offset: 431
    000001b5: 	movq	%rcx, %rdi
    000001b8: 	movl	%edx, %r10d
    000001bb: 	andl	$0x7, %ecx
    000001be: 	shrq	$0x3, %rdi
    000001c2: 	shll	%cl, %r10d
    000001c5: 	movl	%r10d, %ecx
    000001c8: 	andb	(%r9,%rdi), %cl
    000001cc: 	cmpb	$0x1, %cl
    000001cf: 	leaq	0x6(%r8), %rcx
    000001d3: 	sbbq	$-0x1, %rax
    000001d7: 	cmpq	$0x5, %rsi
    000001db: 	je	.Ltmp903 # Offset: 475
    000001e1: 	movq	%rcx, %rsi
    000001e4: 	andl	$0x7, %ecx
    000001e7: 	shrq	$0x3, %rsi
    000001eb: 	shll	%cl, %edx
    000001ed: 	andb	(%r9,%rsi), %dl
    000001f1: 	cmpb	$0x1, %dl
    000001f4: 	sbbq	$-0x1, %rax
    000001f8: 	retq # Offset: 504
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp896:
    00000200: 	xorl	%eax, %eax
    00000202: 	retq # Offset: 514
.Ltmp901:
    00000203: 	leaq	-0x1(%rdx), %rsi
    00000207: 	jmp	.Ltmp904 # Offset: 519
DWARF CFI Instructions:
    <empty>
End of Function "_Z18CountBitsByteTableItEmPT_mm"

Binary Function "_Z18CountBitsByteTableIhEmPT_mm" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0xfe60
  Size        : 0x20c
  MaxSize     : 0x210
  Offset      : 0xfe60
  Section     : .text
  Orc Section : .local.text._Z18CountBitsByteTableIhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movq	%rsi, %r8
    0000000a: 	movq	%rdx, %r10
    0000000d: 	cmpq	%rsi, %rdx
    00000010: 	jb	.Ltmp905 # Offset: 16
    00000016: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    0000001d: 	jne	.Ltmp906 # Offset: 29
    0000001f: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 31
.Ltmp906:
    00000024: 	movq	%r10, %rdx
    00000027: 	subq	%r8, %rdx
    0000002a: 	je	.Ltmp905 # Offset: 42
    00000030: 	movq	%r8, %rax
    00000033: 	andl	$0x7, %eax
    00000036: 	je	.Ltmp907 # Offset: 54
    00000038: 	xorl	%eax, %eax
    0000003a: 	movl	$0x1, %edi
    0000003f: 	jmp	.Ltmp908 # Offset: 63
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp909:
    00000048: 	testb	$0x7, %r8b
    0000004c: 	je	.Ltmp907 # Offset: 76
.Ltmp908:
    0000004e: 	movl	%r8d, %ecx
    00000051: 	movq	%r8, %rsi
    00000054: 	movl	%edi, %r11d
    00000057: 	andl	$0x7, %ecx
    0000005a: 	shrq	$0x3, %rsi
    0000005e: 	shll	%cl, %r11d
    00000061: 	movl	%r11d, %ecx
    00000064: 	andb	(%r9,%rsi), %cl
    00000068: 	cmpb	$0x1, %cl
    0000006b: 	sbbq	$-0x1, %rax
    0000006f: 	addq	$0x1, %r8
    00000073: 	subq	$0x1, %rdx
    00000077: 	jne	.Ltmp909 # Offset: 119
.Ltmp912:
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp907:
    00000080: 	movq	%r8, %rsi
    00000083: 	shrq	$0x3, %rsi
    00000087: 	cmpq	$0x7, %rdx
    0000008b: 	jbe	.Ltmp910 # Offset: 139
    00000091: 	leaq	-0x8(%rdx), %r11
    00000095: 	leaq	0x1(%r9,%rsi), %rdi
    0000009a: 	leaq	(%r9,%rsi), %rcx
    0000009e: 	movq	%r11, %rsi
    000000a1: 	leaq	"_ZL13bitCountTable/1"(%rip), %r10
    000000a8: 	shrq	$0x3, %rsi
    000000ac: 	addq	%rsi, %rdi
    000000af: 	nop # Size: 1
.Ltmp911:
    000000b0: 	movzbl	(%rcx), %esi
    000000b3: 	addq	$0x1, %rcx
    000000b7: 	addq	(%r10,%rsi,8), %rax
    000000bb: 	cmpq	%rcx, %rdi
    000000be: 	jne	.Ltmp911 # Offset: 190
    000000c0: 	andq	$-0x8, %r11
    000000c4: 	andl	$0x7, %edx
    000000c7: 	leaq	0x8(%r8,%r11), %r8
    000000cc: 	leaq	-0x1(%rdx), %rsi
    000000d0: 	je	.Ltmp912 # Offset: 208
.Ltmp913:
    000000d2: 	movl	%r8d, %ecx
    000000d5: 	movl	$0x1, %edx
    000000da: 	movq	%r8, %rdi
    000000dd: 	andl	$0x7, %ecx
    000000e0: 	movl	%edx, %r10d
    000000e3: 	shrq	$0x3, %rdi
    000000e7: 	shll	%cl, %r10d
    000000ea: 	movl	%r10d, %ecx
    000000ed: 	andb	(%r9,%rdi), %cl
    000000f1: 	cmpb	$0x1, %cl
    000000f4: 	leaq	0x1(%r8), %rcx
    000000f8: 	sbbq	$-0x1, %rax
    000000fc: 	testq	%rsi, %rsi
    000000ff: 	je	.Ltmp912 # Offset: 255
    00000105: 	movq	%rcx, %rdi
    00000108: 	movl	%edx, %r10d
    0000010b: 	andl	$0x7, %ecx
    0000010e: 	shrq	$0x3, %rdi
    00000112: 	shll	%cl, %r10d
    00000115: 	movl	%r10d, %ecx
    00000118: 	andb	(%r9,%rdi), %cl
    0000011c: 	cmpb	$0x1, %cl
    0000011f: 	leaq	0x2(%r8), %rcx
    00000123: 	sbbq	$-0x1, %rax
    00000127: 	cmpq	$0x1, %rsi
    0000012b: 	je	.Ltmp912 # Offset: 299
    00000131: 	movq	%rcx, %rdi
    00000134: 	movl	%edx, %r10d
    00000137: 	andl	$0x7, %ecx
    0000013a: 	shrq	$0x3, %rdi
    0000013e: 	shll	%cl, %r10d
    00000141: 	movl	%r10d, %ecx
    00000144: 	andb	(%r9,%rdi), %cl
    00000148: 	cmpb	$0x1, %cl
    0000014b: 	leaq	0x3(%r8), %rcx
    0000014f: 	sbbq	$-0x1, %rax
    00000153: 	cmpq	$0x2, %rsi
    00000157: 	je	.Ltmp912 # Offset: 343
    0000015d: 	movq	%rcx, %rdi
    00000160: 	movl	%edx, %r10d
    00000163: 	andl	$0x7, %ecx
    00000166: 	shrq	$0x3, %rdi
    0000016a: 	shll	%cl, %r10d
    0000016d: 	movl	%r10d, %ecx
    00000170: 	andb	(%r9,%rdi), %cl
    00000174: 	cmpb	$0x1, %cl
    00000177: 	leaq	0x4(%r8), %rcx
    0000017b: 	sbbq	$-0x1, %rax
    0000017f: 	cmpq	$0x3, %rsi
    00000183: 	je	.Ltmp912 # Offset: 387
    00000189: 	movq	%rcx, %rdi
    0000018c: 	movl	%edx, %r10d
    0000018f: 	andl	$0x7, %ecx
    00000192: 	shrq	$0x3, %rdi
    00000196: 	shll	%cl, %r10d
    00000199: 	movl	%r10d, %ecx
    0000019c: 	andb	(%r9,%rdi), %cl
    000001a0: 	cmpb	$0x1, %cl
    000001a3: 	leaq	0x5(%r8), %rcx
    000001a7: 	sbbq	$-0x1, %rax
    000001ab: 	cmpq	$0x4, %rsi
    000001af: 	je	.Ltmp912 # Offset: 431
    000001b5: 	movq	%rcx, %rdi
    000001b8: 	movl	%edx, %r10d
    000001bb: 	andl	$0x7, %ecx
    000001be: 	shrq	$0x3, %rdi
    000001c2: 	shll	%cl, %r10d
    000001c5: 	movl	%r10d, %ecx
    000001c8: 	andb	(%r9,%rdi), %cl
    000001cc: 	cmpb	$0x1, %cl
    000001cf: 	leaq	0x6(%r8), %rcx
    000001d3: 	sbbq	$-0x1, %rax
    000001d7: 	cmpq	$0x5, %rsi
    000001db: 	je	.Ltmp912 # Offset: 475
    000001e1: 	movq	%rcx, %rsi
    000001e4: 	andl	$0x7, %ecx
    000001e7: 	shrq	$0x3, %rsi
    000001eb: 	shll	%cl, %edx
    000001ed: 	andb	(%r9,%rsi), %dl
    000001f1: 	cmpb	$0x1, %dl
    000001f4: 	sbbq	$-0x1, %rax
    000001f8: 	retq # Offset: 504
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp905:
    00000200: 	xorl	%eax, %eax
    00000202: 	retq # Offset: 514
.Ltmp910:
    00000203: 	leaq	-0x1(%rdx), %rsi
    00000207: 	jmp	.Ltmp913 # Offset: 519
DWARF CFI Instructions:
    <empty>
End of Function "_Z18CountBitsByteTableIhEmPT_mm"

Binary Function "_Z19CountBits32ParallelImEmPT_mm" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x10070
  Size        : 0x341
  MaxSize     : 0x350
  Offset      : 0x10070
  Section     : .text
  Orc Section : .local.text._Z19CountBits32ParallelImEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp914 # Offset: 7
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %r8
    00000011: 	movq	%rsi, %rcx
    00000014: 	movq	%rdx, %r9
    00000017: 	subq	$0x10, %rsp
    0000001b: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000022: 	jne	.Ltmp915 # Offset: 34
    00000024: 	movq	%rsi, 0x8(%rsp)
    00000029: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 41
    0000002e: 	movq	0x8(%rsp), %rcx
.Ltmp915:
    00000033: 	movq	%r9, %rdx
    00000036: 	subq	%rcx, %rdx
    00000039: 	je	.Ltmp916 # Offset: 57
    0000003f: 	movq	%rcx, %rax
    00000042: 	andl	$0x1f, %eax
    00000045: 	je	.Ltmp917 # Offset: 69
    00000047: 	xorl	%eax, %eax
    00000049: 	movl	$0x1, %r9d
    0000004f: 	jmp	.Ltmp918 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp919:
    00000058: 	testb	$0x1f, %cl
    0000005b: 	je	.Ltmp917 # Offset: 91
.Ltmp918:
    0000005d: 	movq	%rcx, %rdi
    00000060: 	movq	%r9, %rsi
    00000063: 	shrq	$0x6, %rdi
    00000067: 	shlq	%cl, %rsi
    0000006a: 	andq	(%r8,%rdi,8), %rsi
    0000006e: 	cmpq	$0x1, %rsi
    00000072: 	sbbq	$-0x1, %rax
    00000076: 	addq	$0x1, %rcx
    0000007a: 	subq	$0x1, %rdx
    0000007e: 	jne	.Ltmp919 # Offset: 126
.Ltmp924:
    00000080: 	addq	$0x10, %rsp
    00000084: 	popq	%rbx
    00000085: 	retq # Offset: 133
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp917:
    00000090: 	movq	%rcx, %r11
    00000093: 	shrq	$0x5, %r11
    00000097: 	cmpq	$0x1f, %rdx
    0000009b: 	jbe	.Ltmp920 # Offset: 155
    000000a1: 	leaq	-0x20(%rdx), %r9
    000000a5: 	movq	%r9, %r10
    000000a8: 	shrq	$0x5, %r10
    000000ac: 	addq	$0x1, %r10
    000000b0: 	cmpq	$0x5f, %r9
    000000b4: 	jbe	.Ltmp921 # Offset: 180
    000000ba: 	movq	%r10, %rdi
    000000bd: 	leaq	(%r8,%r11,4), %rsi
    000000c1: 	movdqa	DATAat0x16650(%rip), %xmm8
    000000ca: 	movdqa	DATAat0x16660(%rip), %xmm4
    000000d2: 	shrq	$0x2, %rdi
    000000d6: 	pxor	%xmm2, %xmm2
    000000da: 	pxor	%xmm3, %xmm3
    000000de: 	movdqa	DATAat0x16670(%rip), %xmm7
    000000e6: 	shlq	$0x4, %rdi
    000000ea: 	movdqa	DATAat0x16680(%rip), %xmm6
    000000f2: 	movdqa	DATAat0x16690(%rip), %xmm5
    000000fa: 	addq	%rsi, %rdi
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp922:
    00000100: 	movdqu	(%rsi), %xmm0
    00000104: 	addq	$0x10, %rsi
    00000108: 	movdqa	%xmm0, %xmm1
    0000010c: 	psrld	$0x1, %xmm1
    00000111: 	pand	%xmm8, %xmm1
    00000116: 	psubd	%xmm1, %xmm0
    0000011a: 	movdqa	%xmm0, %xmm1
    0000011e: 	pand	%xmm4, %xmm0
    00000122: 	psrld	$0x2, %xmm1
    00000127: 	pand	%xmm4, %xmm1
    0000012b: 	paddd	%xmm0, %xmm1
    0000012f: 	movdqa	%xmm1, %xmm0
    00000133: 	psrld	$0x4, %xmm0
    00000138: 	paddd	%xmm1, %xmm0
    0000013c: 	pand	%xmm7, %xmm0
    00000140: 	movdqa	%xmm0, %xmm1
    00000144: 	psrld	$0x8, %xmm1
    00000149: 	paddd	%xmm0, %xmm1
    0000014d: 	pand	%xmm6, %xmm1
    00000151: 	movdqa	%xmm1, %xmm0
    00000155: 	psrld	$0x10, %xmm0
    0000015a: 	paddd	%xmm1, %xmm0
    0000015e: 	pand	%xmm5, %xmm0
    00000162: 	movdqa	%xmm0, %xmm1
    00000166: 	punpckldq	%xmm3, %xmm0
    0000016a: 	punpckhdq	%xmm3, %xmm1
    0000016e: 	paddq	%xmm1, %xmm0
    00000172: 	paddq	%xmm0, %xmm2
    00000176: 	cmpq	%rdi, %rsi
    00000179: 	jne	.Ltmp922 # Offset: 377
    0000017b: 	movdqa	%xmm2, %xmm0
    0000017f: 	movq	%rdx, %rdi
    00000182: 	psrldq	$0x8, %xmm0
    00000187: 	paddq	%xmm0, %xmm2
    0000018b: 	movq	%xmm2, %rsi
    00000190: 	addq	%rsi, %rax
    00000193: 	movq	%r10, %rsi
    00000196: 	andq	$-0x4, %rsi
    0000019a: 	movq	%rsi, %rbx
    0000019d: 	addq	%rsi, %r11
    000001a0: 	shlq	$0x5, %rbx
    000001a4: 	subq	%rbx, %rdi
    000001a7: 	cmpq	%rsi, %r10
    000001aa: 	je	.Ltmp923 # Offset: 426
.Ltmp927:
    000001b0: 	movl	(%r8,%r11,4), %esi
    000001b4: 	leaq	(,%r11,4), %r10
    000001bc: 	movl	%esi, %r11d
    000001bf: 	shrl	%r11d
    000001c2: 	andl	$0x55555555, %r11d
    000001c9: 	subl	%r11d, %esi
    000001cc: 	movl	%esi, %r11d
    000001cf: 	andl	$0x33333333, %esi
    000001d5: 	shrl	$0x2, %r11d
    000001d9: 	andl	$0x33333333, %r11d
    000001e0: 	addl	%r11d, %esi
    000001e3: 	movl	%esi, %r11d
    000001e6: 	shrl	$0x4, %r11d
    000001ea: 	addl	%esi, %r11d
    000001ed: 	andl	$0xf0f0f0f, %r11d
    000001f4: 	movl	%r11d, %esi
    000001f7: 	shrl	$0x8, %esi
    000001fa: 	addl	%r11d, %esi
    000001fd: 	andl	$0xff00ff, %esi
    00000203: 	movl	%esi, %r11d
    00000206: 	shrl	$0x10, %r11d
    0000020a: 	addl	%r11d, %esi
    0000020d: 	movzwl	%si, %esi
    00000210: 	addq	%rsi, %rax
    00000213: 	leaq	-0x20(%rdi), %rsi
    00000217: 	cmpq	$0x1f, %rsi
    0000021b: 	jbe	.Ltmp923 # Offset: 539
    00000221: 	movl	0x4(%r8,%r10), %esi
    00000226: 	subq	$0x40, %rdi
    0000022a: 	movl	%esi, %r11d
    0000022d: 	shrl	%r11d
    00000230: 	andl	$0x55555555, %r11d
    00000237: 	subl	%r11d, %esi
    0000023a: 	movl	%esi, %r11d
    0000023d: 	andl	$0x33333333, %esi
    00000243: 	shrl	$0x2, %r11d
    00000247: 	andl	$0x33333333, %r11d
    0000024e: 	addl	%r11d, %esi
    00000251: 	movl	%esi, %r11d
    00000254: 	shrl	$0x4, %r11d
    00000258: 	addl	%esi, %r11d
    0000025b: 	andl	$0xf0f0f0f, %r11d
    00000262: 	movl	%r11d, %esi
    00000265: 	shrl	$0x8, %esi
    00000268: 	addl	%r11d, %esi
    0000026b: 	andl	$0xff00ff, %esi
    00000271: 	movl	%esi, %r11d
    00000274: 	shrl	$0x10, %r11d
    00000278: 	addl	%r11d, %esi
    0000027b: 	movzwl	%si, %esi
    0000027e: 	addq	%rsi, %rax
    00000281: 	cmpq	$0x1f, %rdi
    00000285: 	jbe	.Ltmp923 # Offset: 645
    00000287: 	movl	0x8(%r8,%r10), %esi
    0000028c: 	movl	%esi, %edi
    0000028e: 	shrl	%edi
    00000290: 	andl	$0x55555555, %edi
    00000296: 	subl	%edi, %esi
    00000298: 	movl	%esi, %edi
    0000029a: 	andl	$0x33333333, %esi
    000002a0: 	shrl	$0x2, %edi
    000002a3: 	andl	$0x33333333, %edi
    000002a9: 	addl	%edi, %esi
    000002ab: 	movl	%esi, %edi
    000002ad: 	shrl	$0x4, %edi
    000002b0: 	addl	%esi, %edi
    000002b2: 	andl	$0xf0f0f0f, %edi
    000002b8: 	movl	%edi, %esi
    000002ba: 	shrl	$0x8, %esi
    000002bd: 	addl	%edi, %esi
    000002bf: 	andl	$0xff00ff, %esi
    000002c5: 	movl	%esi, %edi
    000002c7: 	shrl	$0x10, %edi
    000002ca: 	addl	%edi, %esi
    000002cc: 	movzwl	%si, %esi
    000002cf: 	addq	%rsi, %rax
.Ltmp923:
    000002d2: 	andq	$-0x20, %r9
    000002d6: 	andl	$0x1f, %edx
    000002d9: 	leaq	0x20(%rcx,%r9), %rcx
    000002de: 	leaq	-0x1(%rdx), %rdi
    000002e2: 	je	.Ltmp924 # Offset: 738
.Ltmp928:
    000002e8: 	addq	%rcx, %rdi
    000002eb: 	movl	$0x1, %r9d
    000002f1: 	jmp	.Ltmp925 # Offset: 753
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp926:
    000002f8: 	movq	%rdx, %rcx
.Ltmp925:
    000002fb: 	movq	%rcx, %rsi
    000002fe: 	movq	%r9, %rdx
    00000301: 	shrq	$0x6, %rsi
    00000305: 	shlq	%cl, %rdx
    00000308: 	andq	(%r8,%rsi,8), %rdx
    0000030c: 	cmpq	$0x1, %rdx
    00000310: 	leaq	0x1(%rcx), %rdx
    00000314: 	sbbq	$-0x1, %rax
    00000318: 	cmpq	%rdi, %rcx
    0000031b: 	jne	.Ltmp926 # Offset: 795
    0000031d: 	addq	$0x10, %rsp
    00000321: 	popq	%rbx
    00000322: 	retq # Offset: 802
.Ltmp916:
    00000323: 	addq	$0x10, %rsp
    00000327: 	xorl	%eax, %eax
    00000329: 	popq	%rbx
    0000032a: 	retq # Offset: 810
    0000032b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp914:
    00000330: 	xorl	%eax, %eax
    00000332: 	retq # Offset: 818
.Ltmp921:
    00000333: 	movq	%rdx, %rdi
    00000336: 	jmp	.Ltmp927 # Offset: 822
.Ltmp920:
    0000033b: 	leaq	-0x1(%rdx), %rdi
    0000033f: 	jmp	.Ltmp928 # Offset: 831
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBits32ParallelImEmPT_mm"

Binary Function "_Z19CountBits32ParallelIjEmPT_mm" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x103c0
  Size        : 0x339
  MaxSize     : 0x340
  Offset      : 0x103c0
  Section     : .text
  Orc Section : .local.text._Z19CountBits32ParallelIjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp929 # Offset: 7
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %r8
    00000011: 	movq	%rsi, %rcx
    00000014: 	movq	%rdx, %r9
    00000017: 	subq	$0x10, %rsp
    0000001b: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000022: 	jne	.Ltmp930 # Offset: 34
    00000024: 	movq	%rsi, 0x8(%rsp)
    00000029: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 41
    0000002e: 	movq	0x8(%rsp), %rcx
.Ltmp930:
    00000033: 	movq	%r9, %rdx
    00000036: 	subq	%rcx, %rdx
    00000039: 	je	.Ltmp931 # Offset: 57
    0000003f: 	movq	%rcx, %rax
    00000042: 	andl	$0x1f, %eax
    00000045: 	je	.Ltmp932 # Offset: 69
    00000047: 	xorl	%eax, %eax
    00000049: 	movl	$0x1, %r9d
    0000004f: 	jmp	.Ltmp933 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp934:
    00000058: 	testb	$0x1f, %cl
    0000005b: 	je	.Ltmp932 # Offset: 91
.Ltmp933:
    0000005d: 	movq	%rcx, %rdi
    00000060: 	movl	%r9d, %esi
    00000063: 	shrq	$0x5, %rdi
    00000067: 	shll	%cl, %esi
    00000069: 	andl	(%r8,%rdi,4), %esi
    0000006d: 	cmpl	$0x1, %esi
    00000070: 	sbbq	$-0x1, %rax
    00000074: 	addq	$0x1, %rcx
    00000078: 	subq	$0x1, %rdx
    0000007c: 	jne	.Ltmp934 # Offset: 124
.Ltmp939:
    0000007e: 	addq	$0x10, %rsp
    00000082: 	popq	%rbx
    00000083: 	retq # Offset: 131
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp932:
    00000088: 	movq	%rcx, %r11
    0000008b: 	shrq	$0x5, %r11
    0000008f: 	cmpq	$0x1f, %rdx
    00000093: 	jbe	.Ltmp935 # Offset: 147
    00000099: 	leaq	-0x20(%rdx), %r9
    0000009d: 	movq	%r9, %r10
    000000a0: 	shrq	$0x5, %r10
    000000a4: 	addq	$0x1, %r10
    000000a8: 	cmpq	$0x5f, %r9
    000000ac: 	jbe	.Ltmp936 # Offset: 172
    000000b2: 	movq	%r10, %rdi
    000000b5: 	leaq	(%r8,%r11,4), %rsi
    000000b9: 	movdqa	DATAat0x16650(%rip), %xmm8
    000000c2: 	movdqa	DATAat0x16660(%rip), %xmm4
    000000ca: 	shrq	$0x2, %rdi
    000000ce: 	pxor	%xmm2, %xmm2
    000000d2: 	pxor	%xmm3, %xmm3
    000000d6: 	movdqa	DATAat0x16670(%rip), %xmm7
    000000de: 	shlq	$0x4, %rdi
    000000e2: 	movdqa	DATAat0x16680(%rip), %xmm6
    000000ea: 	movdqa	DATAat0x16690(%rip), %xmm5
    000000f2: 	addq	%rsi, %rdi
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp937:
    000000f8: 	movdqu	(%rsi), %xmm0
    000000fc: 	addq	$0x10, %rsi
    00000100: 	movdqa	%xmm0, %xmm1
    00000104: 	psrld	$0x1, %xmm1
    00000109: 	pand	%xmm8, %xmm1
    0000010e: 	psubd	%xmm1, %xmm0
    00000112: 	movdqa	%xmm0, %xmm1
    00000116: 	pand	%xmm4, %xmm0
    0000011a: 	psrld	$0x2, %xmm1
    0000011f: 	pand	%xmm4, %xmm1
    00000123: 	paddd	%xmm0, %xmm1
    00000127: 	movdqa	%xmm1, %xmm0
    0000012b: 	psrld	$0x4, %xmm0
    00000130: 	paddd	%xmm1, %xmm0
    00000134: 	pand	%xmm7, %xmm0
    00000138: 	movdqa	%xmm0, %xmm1
    0000013c: 	psrld	$0x8, %xmm1
    00000141: 	paddd	%xmm0, %xmm1
    00000145: 	pand	%xmm6, %xmm1
    00000149: 	movdqa	%xmm1, %xmm0
    0000014d: 	psrld	$0x10, %xmm0
    00000152: 	paddd	%xmm1, %xmm0
    00000156: 	pand	%xmm5, %xmm0
    0000015a: 	movdqa	%xmm0, %xmm1
    0000015e: 	punpckldq	%xmm3, %xmm0
    00000162: 	punpckhdq	%xmm3, %xmm1
    00000166: 	paddq	%xmm1, %xmm0
    0000016a: 	paddq	%xmm0, %xmm2
    0000016e: 	cmpq	%rdi, %rsi
    00000171: 	jne	.Ltmp937 # Offset: 369
    00000173: 	movdqa	%xmm2, %xmm0
    00000177: 	movq	%rdx, %rdi
    0000017a: 	psrldq	$0x8, %xmm0
    0000017f: 	paddq	%xmm0, %xmm2
    00000183: 	movq	%xmm2, %rsi
    00000188: 	addq	%rsi, %rax
    0000018b: 	movq	%r10, %rsi
    0000018e: 	andq	$-0x4, %rsi
    00000192: 	movq	%rsi, %rbx
    00000195: 	addq	%rsi, %r11
    00000198: 	shlq	$0x5, %rbx
    0000019c: 	subq	%rbx, %rdi
    0000019f: 	cmpq	%rsi, %r10
    000001a2: 	je	.Ltmp938 # Offset: 418
.Ltmp942:
    000001a8: 	movl	(%r8,%r11,4), %esi
    000001ac: 	leaq	(,%r11,4), %r10
    000001b4: 	movl	%esi, %r11d
    000001b7: 	shrl	%r11d
    000001ba: 	andl	$0x55555555, %r11d
    000001c1: 	subl	%r11d, %esi
    000001c4: 	movl	%esi, %r11d
    000001c7: 	andl	$0x33333333, %esi
    000001cd: 	shrl	$0x2, %r11d
    000001d1: 	andl	$0x33333333, %r11d
    000001d8: 	addl	%r11d, %esi
    000001db: 	movl	%esi, %r11d
    000001de: 	shrl	$0x4, %r11d
    000001e2: 	addl	%esi, %r11d
    000001e5: 	andl	$0xf0f0f0f, %r11d
    000001ec: 	movl	%r11d, %esi
    000001ef: 	shrl	$0x8, %esi
    000001f2: 	addl	%r11d, %esi
    000001f5: 	andl	$0xff00ff, %esi
    000001fb: 	movl	%esi, %r11d
    000001fe: 	shrl	$0x10, %r11d
    00000202: 	addl	%r11d, %esi
    00000205: 	movzwl	%si, %esi
    00000208: 	addq	%rsi, %rax
    0000020b: 	leaq	-0x20(%rdi), %rsi
    0000020f: 	cmpq	$0x1f, %rsi
    00000213: 	jbe	.Ltmp938 # Offset: 531
    00000219: 	movl	0x4(%r8,%r10), %esi
    0000021e: 	subq	$0x40, %rdi
    00000222: 	movl	%esi, %r11d
    00000225: 	shrl	%r11d
    00000228: 	andl	$0x55555555, %r11d
    0000022f: 	subl	%r11d, %esi
    00000232: 	movl	%esi, %r11d
    00000235: 	andl	$0x33333333, %esi
    0000023b: 	shrl	$0x2, %r11d
    0000023f: 	andl	$0x33333333, %r11d
    00000246: 	addl	%r11d, %esi
    00000249: 	movl	%esi, %r11d
    0000024c: 	shrl	$0x4, %r11d
    00000250: 	addl	%esi, %r11d
    00000253: 	andl	$0xf0f0f0f, %r11d
    0000025a: 	movl	%r11d, %esi
    0000025d: 	shrl	$0x8, %esi
    00000260: 	addl	%r11d, %esi
    00000263: 	andl	$0xff00ff, %esi
    00000269: 	movl	%esi, %r11d
    0000026c: 	shrl	$0x10, %r11d
    00000270: 	addl	%r11d, %esi
    00000273: 	movzwl	%si, %esi
    00000276: 	addq	%rsi, %rax
    00000279: 	cmpq	$0x1f, %rdi
    0000027d: 	jbe	.Ltmp938 # Offset: 637
    0000027f: 	movl	0x8(%r8,%r10), %esi
    00000284: 	movl	%esi, %edi
    00000286: 	shrl	%edi
    00000288: 	andl	$0x55555555, %edi
    0000028e: 	subl	%edi, %esi
    00000290: 	movl	%esi, %edi
    00000292: 	andl	$0x33333333, %esi
    00000298: 	shrl	$0x2, %edi
    0000029b: 	andl	$0x33333333, %edi
    000002a1: 	addl	%edi, %esi
    000002a3: 	movl	%esi, %edi
    000002a5: 	shrl	$0x4, %edi
    000002a8: 	addl	%esi, %edi
    000002aa: 	andl	$0xf0f0f0f, %edi
    000002b0: 	movl	%edi, %esi
    000002b2: 	shrl	$0x8, %esi
    000002b5: 	addl	%edi, %esi
    000002b7: 	andl	$0xff00ff, %esi
    000002bd: 	movl	%esi, %edi
    000002bf: 	shrl	$0x10, %edi
    000002c2: 	addl	%edi, %esi
    000002c4: 	movzwl	%si, %esi
    000002c7: 	addq	%rsi, %rax
.Ltmp938:
    000002ca: 	andq	$-0x20, %r9
    000002ce: 	andl	$0x1f, %edx
    000002d1: 	leaq	0x20(%rcx,%r9), %rcx
    000002d6: 	leaq	-0x1(%rdx), %rdi
    000002da: 	je	.Ltmp939 # Offset: 730
.Ltmp943:
    000002e0: 	addq	%rcx, %rdi
    000002e3: 	movl	$0x1, %r9d
    000002e9: 	jmp	.Ltmp940 # Offset: 745
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp941:
    000002f0: 	movq	%rdx, %rcx
.Ltmp940:
    000002f3: 	movq	%rcx, %rsi
    000002f6: 	movl	%r9d, %edx
    000002f9: 	shrq	$0x5, %rsi
    000002fd: 	shll	%cl, %edx
    000002ff: 	andl	(%r8,%rsi,4), %edx
    00000303: 	cmpl	$0x1, %edx
    00000306: 	leaq	0x1(%rcx), %rdx
    0000030a: 	sbbq	$-0x1, %rax
    0000030e: 	cmpq	%rdi, %rcx
    00000311: 	jne	.Ltmp941 # Offset: 785
    00000313: 	addq	$0x10, %rsp
    00000317: 	popq	%rbx
    00000318: 	retq # Offset: 792
.Ltmp931:
    00000319: 	addq	$0x10, %rsp
    0000031d: 	xorl	%eax, %eax
    0000031f: 	popq	%rbx
    00000320: 	retq # Offset: 800
    00000321: 	nopl	(%rax) # Size: 7
.Ltmp929:
    00000328: 	xorl	%eax, %eax
    0000032a: 	retq # Offset: 810
.Ltmp936:
    0000032b: 	movq	%rdx, %rdi
    0000032e: 	jmp	.Ltmp942 # Offset: 814
.Ltmp935:
    00000333: 	leaq	-0x1(%rdx), %rdi
    00000337: 	jmp	.Ltmp943 # Offset: 823
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBits32ParallelIjEmPT_mm"

Binary Function "_Z19CountBits32ParallelItEmPT_mm" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x10700
  Size        : 0x331
  MaxSize     : 0x340
  Offset      : 0x10700
  Section     : .text
  Orc Section : .local.text._Z19CountBits32ParallelItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp944 # Offset: 7
    0000000d: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000014: 	pushq	%rbx
    00000015: 	movq	%rdi, %r9
    00000018: 	movq	%rsi, %r8
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jne	.Ltmp945 # Offset: 30
    00000020: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 32
.Ltmp945:
    00000025: 	movq	%r10, %rdx
    00000028: 	subq	%r8, %rdx
    0000002b: 	je	.Ltmp946 # Offset: 43
    00000031: 	movq	%r8, %rax
    00000034: 	andl	$0x1f, %eax
    00000037: 	je	.Ltmp947 # Offset: 55
    00000039: 	xorl	%eax, %eax
    0000003b: 	movl	$0x1, %edi
    00000040: 	jmp	.Ltmp948 # Offset: 64
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp949:
    00000048: 	testb	$0x1f, %r8b
    0000004c: 	je	.Ltmp947 # Offset: 76
.Ltmp948:
    0000004e: 	movl	%r8d, %ecx
    00000051: 	movq	%r8, %rsi
    00000054: 	movl	%edi, %ebx
    00000056: 	andl	$0xf, %ecx
    00000059: 	shrq	$0x4, %rsi
    0000005d: 	shll	%cl, %ebx
    0000005f: 	movl	%ebx, %ecx
    00000061: 	andw	(%r9,%rsi,2), %cx
    00000066: 	cmpw	$0x1, %cx
    0000006a: 	sbbq	$-0x1, %rax
    0000006e: 	addq	$0x1, %r8
    00000072: 	subq	$0x1, %rdx
    00000076: 	jne	.Ltmp949 # Offset: 118
.Ltmp954:
    00000078: 	popq	%rbx
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp947:
    00000080: 	movq	%r8, %r11
    00000083: 	shrq	$0x5, %r11
    00000087: 	cmpq	$0x1f, %rdx
    0000008b: 	jbe	.Ltmp950 # Offset: 139
    00000091: 	leaq	-0x20(%rdx), %rdi
    00000095: 	movq	%rdi, %r10
    00000098: 	shrq	$0x5, %r10
    0000009c: 	addq	$0x1, %r10
    000000a0: 	cmpq	$0x5f, %rdi
    000000a4: 	jbe	.Ltmp951 # Offset: 164
    000000aa: 	movq	%r10, %rsi
    000000ad: 	leaq	(%r9,%r11,4), %rcx
    000000b1: 	movdqa	DATAat0x16650(%rip), %xmm8
    000000ba: 	movdqa	DATAat0x16660(%rip), %xmm4
    000000c2: 	shrq	$0x2, %rsi
    000000c6: 	pxor	%xmm2, %xmm2
    000000ca: 	pxor	%xmm3, %xmm3
    000000ce: 	movdqa	DATAat0x16670(%rip), %xmm7
    000000d6: 	shlq	$0x4, %rsi
    000000da: 	movdqa	DATAat0x16680(%rip), %xmm6
    000000e2: 	movdqa	DATAat0x16690(%rip), %xmm5
    000000ea: 	addq	%rcx, %rsi
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp952:
    000000f0: 	movdqu	(%rcx), %xmm0
    000000f4: 	addq	$0x10, %rcx
    000000f8: 	movdqa	%xmm0, %xmm1
    000000fc: 	psrld	$0x1, %xmm1
    00000101: 	pand	%xmm8, %xmm1
    00000106: 	psubd	%xmm1, %xmm0
    0000010a: 	movdqa	%xmm0, %xmm1
    0000010e: 	pand	%xmm4, %xmm0
    00000112: 	psrld	$0x2, %xmm1
    00000117: 	pand	%xmm4, %xmm1
    0000011b: 	paddd	%xmm0, %xmm1
    0000011f: 	movdqa	%xmm1, %xmm0
    00000123: 	psrld	$0x4, %xmm0
    00000128: 	paddd	%xmm1, %xmm0
    0000012c: 	pand	%xmm7, %xmm0
    00000130: 	movdqa	%xmm0, %xmm1
    00000134: 	psrld	$0x8, %xmm1
    00000139: 	paddd	%xmm0, %xmm1
    0000013d: 	pand	%xmm6, %xmm1
    00000141: 	movdqa	%xmm1, %xmm0
    00000145: 	psrld	$0x10, %xmm0
    0000014a: 	paddd	%xmm1, %xmm0
    0000014e: 	pand	%xmm5, %xmm0
    00000152: 	movdqa	%xmm0, %xmm1
    00000156: 	punpckldq	%xmm3, %xmm0
    0000015a: 	punpckhdq	%xmm3, %xmm1
    0000015e: 	paddq	%xmm1, %xmm0
    00000162: 	paddq	%xmm0, %xmm2
    00000166: 	cmpq	%rsi, %rcx
    00000169: 	jne	.Ltmp952 # Offset: 361
    0000016b: 	movdqa	%xmm2, %xmm0
    0000016f: 	movq	%rdx, %rsi
    00000172: 	psrldq	$0x8, %xmm0
    00000177: 	paddq	%xmm0, %xmm2
    0000017b: 	movq	%xmm2, %rcx
    00000180: 	addq	%rcx, %rax
    00000183: 	movq	%r10, %rcx
    00000186: 	andq	$-0x4, %rcx
    0000018a: 	movq	%rcx, %rbx
    0000018d: 	addq	%rcx, %r11
    00000190: 	shlq	$0x5, %rbx
    00000194: 	subq	%rbx, %rsi
    00000197: 	cmpq	%rcx, %r10
    0000019a: 	je	.Ltmp953 # Offset: 410
.Ltmp957:
    000001a0: 	movl	(%r9,%r11,4), %ecx
    000001a4: 	leaq	(,%r11,4), %r10
    000001ac: 	movl	%ecx, %r11d
    000001af: 	shrl	%r11d
    000001b2: 	andl	$0x55555555, %r11d
    000001b9: 	subl	%r11d, %ecx
    000001bc: 	movl	%ecx, %r11d
    000001bf: 	andl	$0x33333333, %ecx
    000001c5: 	shrl	$0x2, %r11d
    000001c9: 	andl	$0x33333333, %r11d
    000001d0: 	addl	%r11d, %ecx
    000001d3: 	movl	%ecx, %r11d
    000001d6: 	shrl	$0x4, %r11d
    000001da: 	addl	%ecx, %r11d
    000001dd: 	andl	$0xf0f0f0f, %r11d
    000001e4: 	movl	%r11d, %ecx
    000001e7: 	shrl	$0x8, %ecx
    000001ea: 	addl	%r11d, %ecx
    000001ed: 	andl	$0xff00ff, %ecx
    000001f3: 	movl	%ecx, %r11d
    000001f6: 	shrl	$0x10, %r11d
    000001fa: 	addl	%r11d, %ecx
    000001fd: 	movzwl	%cx, %ecx
    00000200: 	addq	%rcx, %rax
    00000203: 	leaq	-0x20(%rsi), %rcx
    00000207: 	cmpq	$0x1f, %rcx
    0000020b: 	jbe	.Ltmp953 # Offset: 523
    00000211: 	movl	0x4(%r9,%r10), %ecx
    00000216: 	subq	$0x40, %rsi
    0000021a: 	movl	%ecx, %r11d
    0000021d: 	shrl	%r11d
    00000220: 	andl	$0x55555555, %r11d
    00000227: 	subl	%r11d, %ecx
    0000022a: 	movl	%ecx, %r11d
    0000022d: 	andl	$0x33333333, %ecx
    00000233: 	shrl	$0x2, %r11d
    00000237: 	andl	$0x33333333, %r11d
    0000023e: 	addl	%r11d, %ecx
    00000241: 	movl	%ecx, %r11d
    00000244: 	shrl	$0x4, %r11d
    00000248: 	addl	%ecx, %r11d
    0000024b: 	andl	$0xf0f0f0f, %r11d
    00000252: 	movl	%r11d, %ecx
    00000255: 	shrl	$0x8, %ecx
    00000258: 	addl	%r11d, %ecx
    0000025b: 	andl	$0xff00ff, %ecx
    00000261: 	movl	%ecx, %r11d
    00000264: 	shrl	$0x10, %r11d
    00000268: 	addl	%r11d, %ecx
    0000026b: 	movzwl	%cx, %ecx
    0000026e: 	addq	%rcx, %rax
    00000271: 	cmpq	$0x1f, %rsi
    00000275: 	jbe	.Ltmp953 # Offset: 629
    00000277: 	movl	0x8(%r9,%r10), %ecx
    0000027c: 	movl	%ecx, %esi
    0000027e: 	shrl	%esi
    00000280: 	andl	$0x55555555, %esi
    00000286: 	subl	%esi, %ecx
    00000288: 	movl	%ecx, %esi
    0000028a: 	andl	$0x33333333, %ecx
    00000290: 	shrl	$0x2, %esi
    00000293: 	andl	$0x33333333, %esi
    00000299: 	addl	%esi, %ecx
    0000029b: 	movl	%ecx, %esi
    0000029d: 	shrl	$0x4, %esi
    000002a0: 	addl	%ecx, %esi
    000002a2: 	andl	$0xf0f0f0f, %esi
    000002a8: 	movl	%esi, %ecx
    000002aa: 	shrl	$0x8, %ecx
    000002ad: 	addl	%esi, %ecx
    000002af: 	andl	$0xff00ff, %ecx
    000002b5: 	movl	%ecx, %esi
    000002b7: 	shrl	$0x10, %esi
    000002ba: 	addl	%esi, %ecx
    000002bc: 	movzwl	%cx, %ecx
    000002bf: 	addq	%rcx, %rax
.Ltmp953:
    000002c2: 	andq	$-0x20, %rdi
    000002c6: 	andl	$0x1f, %edx
    000002c9: 	leaq	0x20(%r8,%rdi), %r8
    000002ce: 	leaq	-0x1(%rdx), %rdi
    000002d2: 	je	.Ltmp954 # Offset: 722
.Ltmp958:
    000002d8: 	addq	%r8, %rdi
    000002db: 	movl	$0x1, %r10d
    000002e1: 	jmp	.Ltmp955 # Offset: 737
    000002e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp956:
    000002e8: 	movq	%rdx, %r8
.Ltmp955:
    000002eb: 	movq	%r8, %rsi
    000002ee: 	movl	%r8d, %ecx
    000002f1: 	movl	%r10d, %edx
    000002f4: 	shrq	$0x4, %rsi
    000002f8: 	andl	$0xf, %ecx
    000002fb: 	shll	%cl, %edx
    000002fd: 	andw	(%r9,%rsi,2), %dx
    00000302: 	cmpw	$0x1, %dx
    00000306: 	leaq	0x1(%r8), %rdx
    0000030a: 	sbbq	$-0x1, %rax
    0000030e: 	cmpq	%rdi, %r8
    00000311: 	jne	.Ltmp956 # Offset: 785
    00000313: 	popq	%rbx
    00000314: 	retq # Offset: 788
.Ltmp946:
    00000315: 	xorl	%eax, %eax
    00000317: 	popq	%rbx
    00000318: 	retq # Offset: 792
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp944:
    00000320: 	xorl	%eax, %eax
    00000322: 	retq # Offset: 802
.Ltmp951:
    00000323: 	movq	%rdx, %rsi
    00000326: 	jmp	.Ltmp957 # Offset: 806
.Ltmp950:
    0000032b: 	leaq	-0x1(%rdx), %rdi
    0000032f: 	jmp	.Ltmp958 # Offset: 815
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBits32ParallelItEmPT_mm"

Binary Function "_Z19CountBits32ParallelIhEmPT_mm" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0x10a40
  Size        : 0x331
  MaxSize     : 0x340
  Offset      : 0x10a40
  Section     : .text
  Orc Section : .local.text._Z19CountBits32ParallelIhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp959 # Offset: 7
    0000000d: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000014: 	pushq	%rbx
    00000015: 	movq	%rdi, %r9
    00000018: 	movq	%rsi, %r8
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jne	.Ltmp960 # Offset: 30
    00000020: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 32
.Ltmp960:
    00000025: 	movq	%r10, %rdx
    00000028: 	subq	%r8, %rdx
    0000002b: 	je	.Ltmp961 # Offset: 43
    00000031: 	movq	%r8, %rax
    00000034: 	andl	$0x1f, %eax
    00000037: 	je	.Ltmp962 # Offset: 55
    00000039: 	xorl	%eax, %eax
    0000003b: 	movl	$0x1, %edi
    00000040: 	jmp	.Ltmp963 # Offset: 64
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp964:
    00000048: 	testb	$0x1f, %r8b
    0000004c: 	je	.Ltmp962 # Offset: 76
.Ltmp963:
    0000004e: 	movl	%r8d, %ecx
    00000051: 	movq	%r8, %rsi
    00000054: 	movl	%edi, %ebx
    00000056: 	andl	$0x7, %ecx
    00000059: 	shrq	$0x3, %rsi
    0000005d: 	shll	%cl, %ebx
    0000005f: 	movl	%ebx, %ecx
    00000061: 	andb	(%r9,%rsi), %cl
    00000065: 	cmpb	$0x1, %cl
    00000068: 	sbbq	$-0x1, %rax
    0000006c: 	addq	$0x1, %r8
    00000070: 	subq	$0x1, %rdx
    00000074: 	jne	.Ltmp964 # Offset: 116
.Ltmp969:
    00000076: 	popq	%rbx
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp962:
    00000080: 	movq	%r8, %r11
    00000083: 	shrq	$0x5, %r11
    00000087: 	cmpq	$0x1f, %rdx
    0000008b: 	jbe	.Ltmp965 # Offset: 139
    00000091: 	leaq	-0x20(%rdx), %rdi
    00000095: 	movq	%rdi, %r10
    00000098: 	shrq	$0x5, %r10
    0000009c: 	addq	$0x1, %r10
    000000a0: 	cmpq	$0x5f, %rdi
    000000a4: 	jbe	.Ltmp966 # Offset: 164
    000000aa: 	movq	%r10, %rsi
    000000ad: 	leaq	(%r9,%r11,4), %rcx
    000000b1: 	movdqa	DATAat0x16650(%rip), %xmm8
    000000ba: 	movdqa	DATAat0x16660(%rip), %xmm4
    000000c2: 	shrq	$0x2, %rsi
    000000c6: 	pxor	%xmm2, %xmm2
    000000ca: 	pxor	%xmm3, %xmm3
    000000ce: 	movdqa	DATAat0x16670(%rip), %xmm7
    000000d6: 	shlq	$0x4, %rsi
    000000da: 	movdqa	DATAat0x16680(%rip), %xmm6
    000000e2: 	movdqa	DATAat0x16690(%rip), %xmm5
    000000ea: 	addq	%rcx, %rsi
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp967:
    000000f0: 	movdqu	(%rcx), %xmm0
    000000f4: 	addq	$0x10, %rcx
    000000f8: 	movdqa	%xmm0, %xmm1
    000000fc: 	psrld	$0x1, %xmm1
    00000101: 	pand	%xmm8, %xmm1
    00000106: 	psubd	%xmm1, %xmm0
    0000010a: 	movdqa	%xmm0, %xmm1
    0000010e: 	pand	%xmm4, %xmm0
    00000112: 	psrld	$0x2, %xmm1
    00000117: 	pand	%xmm4, %xmm1
    0000011b: 	paddd	%xmm0, %xmm1
    0000011f: 	movdqa	%xmm1, %xmm0
    00000123: 	psrld	$0x4, %xmm0
    00000128: 	paddd	%xmm1, %xmm0
    0000012c: 	pand	%xmm7, %xmm0
    00000130: 	movdqa	%xmm0, %xmm1
    00000134: 	psrld	$0x8, %xmm1
    00000139: 	paddd	%xmm0, %xmm1
    0000013d: 	pand	%xmm6, %xmm1
    00000141: 	movdqa	%xmm1, %xmm0
    00000145: 	psrld	$0x10, %xmm0
    0000014a: 	paddd	%xmm1, %xmm0
    0000014e: 	pand	%xmm5, %xmm0
    00000152: 	movdqa	%xmm0, %xmm1
    00000156: 	punpckldq	%xmm3, %xmm0
    0000015a: 	punpckhdq	%xmm3, %xmm1
    0000015e: 	paddq	%xmm1, %xmm0
    00000162: 	paddq	%xmm0, %xmm2
    00000166: 	cmpq	%rsi, %rcx
    00000169: 	jne	.Ltmp967 # Offset: 361
    0000016b: 	movdqa	%xmm2, %xmm0
    0000016f: 	movq	%rdx, %rsi
    00000172: 	psrldq	$0x8, %xmm0
    00000177: 	paddq	%xmm0, %xmm2
    0000017b: 	movq	%xmm2, %rcx
    00000180: 	addq	%rcx, %rax
    00000183: 	movq	%r10, %rcx
    00000186: 	andq	$-0x4, %rcx
    0000018a: 	movq	%rcx, %rbx
    0000018d: 	addq	%rcx, %r11
    00000190: 	shlq	$0x5, %rbx
    00000194: 	subq	%rbx, %rsi
    00000197: 	cmpq	%rcx, %r10
    0000019a: 	je	.Ltmp968 # Offset: 410
.Ltmp972:
    000001a0: 	movl	(%r9,%r11,4), %ecx
    000001a4: 	leaq	(,%r11,4), %r10
    000001ac: 	movl	%ecx, %r11d
    000001af: 	shrl	%r11d
    000001b2: 	andl	$0x55555555, %r11d
    000001b9: 	subl	%r11d, %ecx
    000001bc: 	movl	%ecx, %r11d
    000001bf: 	andl	$0x33333333, %ecx
    000001c5: 	shrl	$0x2, %r11d
    000001c9: 	andl	$0x33333333, %r11d
    000001d0: 	addl	%r11d, %ecx
    000001d3: 	movl	%ecx, %r11d
    000001d6: 	shrl	$0x4, %r11d
    000001da: 	addl	%ecx, %r11d
    000001dd: 	andl	$0xf0f0f0f, %r11d
    000001e4: 	movl	%r11d, %ecx
    000001e7: 	shrl	$0x8, %ecx
    000001ea: 	addl	%r11d, %ecx
    000001ed: 	andl	$0xff00ff, %ecx
    000001f3: 	movl	%ecx, %r11d
    000001f6: 	shrl	$0x10, %r11d
    000001fa: 	addl	%r11d, %ecx
    000001fd: 	movzwl	%cx, %ecx
    00000200: 	addq	%rcx, %rax
    00000203: 	leaq	-0x20(%rsi), %rcx
    00000207: 	cmpq	$0x1f, %rcx
    0000020b: 	jbe	.Ltmp968 # Offset: 523
    00000211: 	movl	0x4(%r9,%r10), %ecx
    00000216: 	subq	$0x40, %rsi
    0000021a: 	movl	%ecx, %r11d
    0000021d: 	shrl	%r11d
    00000220: 	andl	$0x55555555, %r11d
    00000227: 	subl	%r11d, %ecx
    0000022a: 	movl	%ecx, %r11d
    0000022d: 	andl	$0x33333333, %ecx
    00000233: 	shrl	$0x2, %r11d
    00000237: 	andl	$0x33333333, %r11d
    0000023e: 	addl	%r11d, %ecx
    00000241: 	movl	%ecx, %r11d
    00000244: 	shrl	$0x4, %r11d
    00000248: 	addl	%ecx, %r11d
    0000024b: 	andl	$0xf0f0f0f, %r11d
    00000252: 	movl	%r11d, %ecx
    00000255: 	shrl	$0x8, %ecx
    00000258: 	addl	%r11d, %ecx
    0000025b: 	andl	$0xff00ff, %ecx
    00000261: 	movl	%ecx, %r11d
    00000264: 	shrl	$0x10, %r11d
    00000268: 	addl	%r11d, %ecx
    0000026b: 	movzwl	%cx, %ecx
    0000026e: 	addq	%rcx, %rax
    00000271: 	cmpq	$0x1f, %rsi
    00000275: 	jbe	.Ltmp968 # Offset: 629
    00000277: 	movl	0x8(%r9,%r10), %ecx
    0000027c: 	movl	%ecx, %esi
    0000027e: 	shrl	%esi
    00000280: 	andl	$0x55555555, %esi
    00000286: 	subl	%esi, %ecx
    00000288: 	movl	%ecx, %esi
    0000028a: 	andl	$0x33333333, %ecx
    00000290: 	shrl	$0x2, %esi
    00000293: 	andl	$0x33333333, %esi
    00000299: 	addl	%esi, %ecx
    0000029b: 	movl	%ecx, %esi
    0000029d: 	shrl	$0x4, %esi
    000002a0: 	addl	%ecx, %esi
    000002a2: 	andl	$0xf0f0f0f, %esi
    000002a8: 	movl	%esi, %ecx
    000002aa: 	shrl	$0x8, %ecx
    000002ad: 	addl	%esi, %ecx
    000002af: 	andl	$0xff00ff, %ecx
    000002b5: 	movl	%ecx, %esi
    000002b7: 	shrl	$0x10, %esi
    000002ba: 	addl	%esi, %ecx
    000002bc: 	movzwl	%cx, %ecx
    000002bf: 	addq	%rcx, %rax
.Ltmp968:
    000002c2: 	andq	$-0x20, %rdi
    000002c6: 	andl	$0x1f, %edx
    000002c9: 	leaq	0x20(%r8,%rdi), %r8
    000002ce: 	leaq	-0x1(%rdx), %rdi
    000002d2: 	je	.Ltmp969 # Offset: 722
.Ltmp973:
    000002d8: 	addq	%r8, %rdi
    000002db: 	movl	$0x1, %r10d
    000002e1: 	jmp	.Ltmp970 # Offset: 737
    000002e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp971:
    000002e8: 	movq	%rdx, %r8
.Ltmp970:
    000002eb: 	movq	%r8, %rsi
    000002ee: 	movl	%r8d, %ecx
    000002f1: 	movl	%r10d, %edx
    000002f4: 	shrq	$0x3, %rsi
    000002f8: 	andl	$0x7, %ecx
    000002fb: 	shll	%cl, %edx
    000002fd: 	andb	(%r9,%rsi), %dl
    00000301: 	cmpb	$0x1, %dl
    00000304: 	leaq	0x1(%r8), %rdx
    00000308: 	sbbq	$-0x1, %rax
    0000030c: 	cmpq	%rdi, %r8
    0000030f: 	jne	.Ltmp971 # Offset: 783
    00000311: 	popq	%rbx
    00000312: 	retq # Offset: 786
.Ltmp961:
    00000313: 	xorl	%eax, %eax
    00000315: 	popq	%rbx
    00000316: 	retq # Offset: 790
    00000317: 	nopw	(%rax,%rax) # Size: 9
.Ltmp959:
    00000320: 	xorl	%eax, %eax
    00000322: 	retq # Offset: 802
.Ltmp966:
    00000323: 	movq	%rdx, %rsi
    00000326: 	jmp	.Ltmp972 # Offset: 806
.Ltmp965:
    0000032b: 	leaq	-0x1(%rdx), %rdi
    0000032f: 	jmp	.Ltmp973 # Offset: 815
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBits32ParallelIhEmPT_mm"

Binary Function "_Z20CountBits32Parallel2IjEmPT_mm" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0x10d80
  Size        : 0x391
  MaxSize     : 0x3a0
  Offset      : 0x10d80
  Section     : .text
  Orc Section : .local.text._Z20CountBits32Parallel2IjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp974 # Offset: 7
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %r8
    00000011: 	movq	%rsi, %rcx
    00000014: 	movq	%rdx, %r9
    00000017: 	subq	$0x10, %rsp
    0000001b: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000022: 	jne	.Ltmp975 # Offset: 34
    00000024: 	movq	%rsi, 0x8(%rsp)
    00000029: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 41
    0000002e: 	movq	0x8(%rsp), %rcx
.Ltmp975:
    00000033: 	movq	%r9, %rdx
    00000036: 	subq	%rcx, %rdx
    00000039: 	je	.Ltmp976 # Offset: 57
    0000003f: 	movq	%rcx, %rax
    00000042: 	andl	$0x1f, %eax
    00000045: 	je	.Ltmp977 # Offset: 69
    00000047: 	xorl	%eax, %eax
    00000049: 	movl	$0x1, %r9d
    0000004f: 	jmp	.Ltmp978 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp979:
    00000058: 	testb	$0x1f, %cl
    0000005b: 	je	.Ltmp977 # Offset: 91
.Ltmp978:
    0000005d: 	movq	%rcx, %rdi
    00000060: 	movl	%r9d, %esi
    00000063: 	shrq	$0x5, %rdi
    00000067: 	shll	%cl, %esi
    00000069: 	andl	(%r8,%rdi,4), %esi
    0000006d: 	cmpl	$0x1, %esi
    00000070: 	sbbq	$-0x1, %rax
    00000074: 	addq	$0x1, %rcx
    00000078: 	subq	$0x1, %rdx
    0000007c: 	jne	.Ltmp979 # Offset: 124
.Ltmp984:
    0000007e: 	addq	$0x10, %rsp
    00000082: 	popq	%rbx
    00000083: 	retq # Offset: 131
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp977:
    00000088: 	movq	%rcx, %r11
    0000008b: 	shrq	$0x5, %r11
    0000008f: 	cmpq	$0x1f, %rdx
    00000093: 	jbe	.Ltmp980 # Offset: 147
    00000099: 	leaq	-0x20(%rdx), %rdi
    0000009d: 	movq	%rdi, %r10
    000000a0: 	shrq	$0x5, %r10
    000000a4: 	addq	$0x1, %r10
    000000a8: 	cmpq	$0x5f, %rdi
    000000ac: 	jbe	.Ltmp981 # Offset: 172
    000000b2: 	movq	%r10, %r9
    000000b5: 	leaq	(%r8,%r11,4), %rsi
    000000b9: 	movdqa	DATAat0x16650(%rip), %xmm7
    000000c1: 	movdqa	DATAat0x16660(%rip), %xmm6
    000000c9: 	shrq	$0x2, %r9
    000000cd: 	pxor	%xmm2, %xmm2
    000000d1: 	movdqa	DATAat0x16670(%rip), %xmm5
    000000d9: 	movdqa	DATAat0x16680(%rip), %xmm4
    000000e1: 	shlq	$0x4, %r9
    000000e5: 	pxor	%xmm3, %xmm3
    000000e9: 	movdqa	DATAat0x16690(%rip), %xmm8
    000000f2: 	addq	%rsi, %r9
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp982:
    000000f8: 	movdqu	(%rsi), %xmm1
    000000fc: 	addq	$0x10, %rsi
    00000100: 	movdqa	%xmm1, %xmm0
    00000104: 	pand	%xmm7, %xmm1
    00000108: 	psrld	$0x1, %xmm0
    0000010d: 	pand	%xmm7, %xmm0
    00000111: 	paddd	%xmm1, %xmm0
    00000115: 	movdqa	%xmm0, %xmm1
    00000119: 	pand	%xmm6, %xmm0
    0000011d: 	psrld	$0x2, %xmm1
    00000122: 	pand	%xmm6, %xmm1
    00000126: 	paddd	%xmm0, %xmm1
    0000012a: 	movdqa	%xmm1, %xmm0
    0000012e: 	pand	%xmm5, %xmm1
    00000132: 	psrld	$0x4, %xmm0
    00000137: 	pand	%xmm5, %xmm0
    0000013b: 	paddd	%xmm1, %xmm0
    0000013f: 	movdqa	%xmm0, %xmm1
    00000143: 	pand	%xmm4, %xmm0
    00000147: 	psrld	$0x8, %xmm1
    0000014c: 	pand	%xmm4, %xmm1
    00000150: 	paddd	%xmm0, %xmm1
    00000154: 	movdqa	%xmm1, %xmm0
    00000158: 	psrld	$0x10, %xmm1
    0000015d: 	pand	%xmm8, %xmm0
    00000162: 	paddd	%xmm1, %xmm0
    00000166: 	movdqa	%xmm0, %xmm1
    0000016a: 	punpckldq	%xmm3, %xmm0
    0000016e: 	punpckhdq	%xmm3, %xmm1
    00000172: 	paddq	%xmm1, %xmm0
    00000176: 	paddq	%xmm0, %xmm2
    0000017a: 	cmpq	%rsi, %r9
    0000017d: 	jne	.Ltmp982 # Offset: 381
    00000183: 	movdqa	%xmm2, %xmm0
    00000187: 	movq	%rdx, %r9
    0000018a: 	psrldq	$0x8, %xmm0
    0000018f: 	paddq	%xmm0, %xmm2
    00000193: 	movq	%xmm2, %rsi
    00000198: 	addq	%rsi, %rax
    0000019b: 	movq	%r10, %rsi
    0000019e: 	andq	$-0x4, %rsi
    000001a2: 	movq	%rsi, %rbx
    000001a5: 	addq	%rsi, %r11
    000001a8: 	shlq	$0x5, %rbx
    000001ac: 	subq	%rbx, %r9
    000001af: 	cmpq	%r10, %rsi
    000001b2: 	je	.Ltmp983 # Offset: 434
.Ltmp987:
    000001b8: 	movl	(%r8,%r11,4), %esi
    000001bc: 	leaq	(,%r11,4), %r10
    000001c4: 	movl	%esi, %r11d
    000001c7: 	andl	$0x55555555, %esi
    000001cd: 	shrl	%r11d
    000001d0: 	andl	$0x55555555, %r11d
    000001d7: 	addl	%esi, %r11d
    000001da: 	movl	%r11d, %esi
    000001dd: 	andl	$0x33333333, %r11d
    000001e4: 	shrl	$0x2, %esi
    000001e7: 	andl	$0x33333333, %esi
    000001ed: 	addl	%r11d, %esi
    000001f0: 	movl	%esi, %r11d
    000001f3: 	andl	$0xf0f0f0f, %esi
    000001f9: 	shrl	$0x4, %r11d
    000001fd: 	andl	$0x70f0f0f, %r11d
    00000204: 	addl	%esi, %r11d
    00000207: 	movl	%r11d, %esi
    0000020a: 	andl	$0xff00ff, %r11d
    00000211: 	shrl	$0x8, %esi
    00000214: 	andl	$0xff00ff, %esi
    0000021a: 	addl	%r11d, %esi
    0000021d: 	movl	%esi, %r11d
    00000220: 	movzwl	%si, %esi
    00000223: 	shrl	$0x10, %r11d
    00000227: 	addl	%r11d, %esi
    0000022a: 	addq	%rsi, %rax
    0000022d: 	leaq	-0x20(%r9), %rsi
    00000231: 	cmpq	$0x1f, %rsi
    00000235: 	jbe	.Ltmp983 # Offset: 565
    0000023b: 	movl	0x4(%r8,%r10), %r11d
    00000240: 	subq	$0x40, %r9
    00000244: 	movl	%r11d, %esi
    00000247: 	andl	$0x55555555, %r11d
    0000024e: 	shrl	%esi
    00000250: 	andl	$0x55555555, %esi
    00000256: 	addl	%r11d, %esi
    00000259: 	movl	%esi, %r11d
    0000025c: 	andl	$0x33333333, %esi
    00000262: 	shrl	$0x2, %r11d
    00000266: 	andl	$0x33333333, %r11d
    0000026d: 	addl	%r11d, %esi
    00000270: 	movl	%esi, %r11d
    00000273: 	andl	$0xf0f0f0f, %esi
    00000279: 	shrl	$0x4, %r11d
    0000027d: 	andl	$0x70f0f0f, %r11d
    00000284: 	addl	%esi, %r11d
    00000287: 	movl	%r11d, %esi
    0000028a: 	andl	$0xff00ff, %r11d
    00000291: 	shrl	$0x8, %esi
    00000294: 	andl	$0xff00ff, %esi
    0000029a: 	addl	%r11d, %esi
    0000029d: 	movl	%esi, %r11d
    000002a0: 	movzwl	%si, %esi
    000002a3: 	shrl	$0x10, %r11d
    000002a7: 	addl	%r11d, %esi
    000002aa: 	addq	%rsi, %rax
    000002ad: 	cmpq	$0x1f, %r9
    000002b1: 	jbe	.Ltmp983 # Offset: 689
    000002b3: 	movl	0x8(%r8,%r10), %r9d
    000002b8: 	movl	%r9d, %esi
    000002bb: 	andl	$0x55555555, %r9d
    000002c2: 	shrl	%esi
    000002c4: 	andl	$0x55555555, %esi
    000002ca: 	addl	%r9d, %esi
    000002cd: 	movl	%esi, %r9d
    000002d0: 	andl	$0x33333333, %esi
    000002d6: 	shrl	$0x2, %r9d
    000002da: 	andl	$0x33333333, %r9d
    000002e1: 	addl	%r9d, %esi
    000002e4: 	movl	%esi, %r9d
    000002e7: 	andl	$0xf0f0f0f, %esi
    000002ed: 	shrl	$0x4, %r9d
    000002f1: 	andl	$0x70f0f0f, %r9d
    000002f8: 	addl	%r9d, %esi
    000002fb: 	movl	%esi, %r9d
    000002fe: 	andl	$0xff00ff, %esi
    00000304: 	shrl	$0x8, %r9d
    00000308: 	andl	$0xff00ff, %r9d
    0000030f: 	addl	%r9d, %esi
    00000312: 	movl	%esi, %r9d
    00000315: 	movzwl	%si, %esi
    00000318: 	shrl	$0x10, %r9d
    0000031c: 	addl	%r9d, %esi
    0000031f: 	addq	%rsi, %rax
.Ltmp983:
    00000322: 	andq	$-0x20, %rdi
    00000326: 	andl	$0x1f, %edx
    00000329: 	leaq	0x20(%rcx,%rdi), %rcx
    0000032e: 	leaq	-0x1(%rdx), %rdi
    00000332: 	je	.Ltmp984 # Offset: 818
.Ltmp988:
    00000338: 	addq	%rcx, %rdi
    0000033b: 	movl	$0x1, %r9d
    00000341: 	jmp	.Ltmp985 # Offset: 833
    00000343: 	nopl	(%rax,%rax) # Size: 5
.Ltmp986:
    00000348: 	movq	%rdx, %rcx
.Ltmp985:
    0000034b: 	movq	%rcx, %rsi
    0000034e: 	movl	%r9d, %edx
    00000351: 	shrq	$0x5, %rsi
    00000355: 	shll	%cl, %edx
    00000357: 	andl	(%r8,%rsi,4), %edx
    0000035b: 	cmpl	$0x1, %edx
    0000035e: 	leaq	0x1(%rcx), %rdx
    00000362: 	sbbq	$-0x1, %rax
    00000366: 	cmpq	%rdi, %rcx
    00000369: 	jne	.Ltmp986 # Offset: 873
    0000036b: 	addq	$0x10, %rsp
    0000036f: 	popq	%rbx
    00000370: 	retq # Offset: 880
.Ltmp976:
    00000371: 	addq	$0x10, %rsp
    00000375: 	xorl	%eax, %eax
    00000377: 	popq	%rbx
    00000378: 	retq # Offset: 888
    00000379: 	nopl	(%rax) # Size: 7
.Ltmp974:
    00000380: 	xorl	%eax, %eax
    00000382: 	retq # Offset: 898
.Ltmp981:
    00000383: 	movq	%rdx, %r9
    00000386: 	jmp	.Ltmp987 # Offset: 902
.Ltmp980:
    0000038b: 	leaq	-0x1(%rdx), %rdi
    0000038f: 	jmp	.Ltmp988 # Offset: 911
DWARF CFI Instructions:
    <empty>
End of Function "_Z20CountBits32Parallel2IjEmPT_mm"

Binary Function "_Z19CountBits32MultiplyImEmPT_mm" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0x11120
  Size        : 0x2f1
  MaxSize     : 0x300
  Offset      : 0x11120
  Section     : .text
  Orc Section : .local.text._Z19CountBits32MultiplyImEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp989 # Offset: 7
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %r8
    00000011: 	movq	%rsi, %rcx
    00000014: 	movq	%rdx, %r9
    00000017: 	subq	$0x10, %rsp
    0000001b: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000022: 	jne	.Ltmp990 # Offset: 34
    00000024: 	movq	%rsi, 0x8(%rsp)
    00000029: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 41
    0000002e: 	movq	0x8(%rsp), %rcx
.Ltmp990:
    00000033: 	movq	%r9, %rdx
    00000036: 	subq	%rcx, %rdx
    00000039: 	je	.Ltmp991 # Offset: 57
    0000003f: 	movq	%rcx, %rax
    00000042: 	andl	$0x1f, %eax
    00000045: 	je	.Ltmp992 # Offset: 69
    00000047: 	xorl	%eax, %eax
    00000049: 	movl	$0x1, %r9d
    0000004f: 	jmp	.Ltmp993 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp994:
    00000058: 	testb	$0x1f, %cl
    0000005b: 	je	.Ltmp992 # Offset: 91
.Ltmp993:
    0000005d: 	movq	%rcx, %rdi
    00000060: 	movq	%r9, %rsi
    00000063: 	shrq	$0x6, %rdi
    00000067: 	shlq	%cl, %rsi
    0000006a: 	andq	(%r8,%rdi,8), %rsi
    0000006e: 	cmpq	$0x1, %rsi
    00000072: 	sbbq	$-0x1, %rax
    00000076: 	addq	$0x1, %rcx
    0000007a: 	subq	$0x1, %rdx
    0000007e: 	jne	.Ltmp994 # Offset: 126
.Ltmp999:
    00000080: 	addq	$0x10, %rsp
    00000084: 	popq	%rbx
    00000085: 	retq # Offset: 133
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp992:
    00000090: 	movq	%rcx, %r11
    00000093: 	shrq	$0x5, %r11
    00000097: 	cmpq	$0x1f, %rdx
    0000009b: 	jbe	.Ltmp995 # Offset: 155
    000000a1: 	leaq	-0x20(%rdx), %r9
    000000a5: 	movq	%r9, %r10
    000000a8: 	shrq	$0x5, %r10
    000000ac: 	addq	$0x1, %r10
    000000b0: 	cmpq	$0x5f, %r9
    000000b4: 	jbe	.Ltmp996 # Offset: 180
    000000ba: 	movq	%r10, %rdi
    000000bd: 	leaq	(%r8,%r11,4), %rsi
    000000c1: 	movdqa	DATAat0x16650(%rip), %xmm6
    000000c9: 	movdqa	DATAat0x16660(%rip), %xmm4
    000000d1: 	shrq	$0x2, %rdi
    000000d5: 	movdqa	DATAat0x16670(%rip), %xmm5
    000000dd: 	pxor	%xmm2, %xmm2
    000000e1: 	pxor	%xmm3, %xmm3
    000000e5: 	shlq	$0x4, %rdi
    000000e9: 	addq	%rsi, %rdi
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp997:
    000000f0: 	movdqu	(%rsi), %xmm0
    000000f4: 	addq	$0x10, %rsi
    000000f8: 	movdqa	%xmm0, %xmm1
    000000fc: 	psrld	$0x1, %xmm1
    00000101: 	pand	%xmm6, %xmm1
    00000105: 	psubd	%xmm1, %xmm0
    00000109: 	movdqa	%xmm0, %xmm1
    0000010d: 	pand	%xmm4, %xmm0
    00000111: 	psrld	$0x2, %xmm1
    00000116: 	pand	%xmm4, %xmm1
    0000011a: 	paddd	%xmm1, %xmm0
    0000011e: 	movdqa	%xmm0, %xmm1
    00000122: 	psrld	$0x4, %xmm1
    00000127: 	paddd	%xmm0, %xmm1
    0000012b: 	pand	%xmm5, %xmm1
    0000012f: 	movdqa	%xmm1, %xmm0
    00000133: 	pslld	$0x8, %xmm0
    00000138: 	paddd	%xmm1, %xmm0
    0000013c: 	movdqa	%xmm0, %xmm1
    00000140: 	pslld	$0x10, %xmm1
    00000145: 	paddd	%xmm1, %xmm0
    00000149: 	psrld	$0x18, %xmm0
    0000014e: 	movdqa	%xmm0, %xmm1
    00000152: 	punpckldq	%xmm3, %xmm0
    00000156: 	punpckhdq	%xmm3, %xmm1
    0000015a: 	paddq	%xmm1, %xmm0
    0000015e: 	paddq	%xmm0, %xmm2
    00000162: 	cmpq	%rdi, %rsi
    00000165: 	jne	.Ltmp997 # Offset: 357
    00000167: 	movdqa	%xmm2, %xmm0
    0000016b: 	movq	%rdx, %rdi
    0000016e: 	psrldq	$0x8, %xmm0
    00000173: 	paddq	%xmm0, %xmm2
    00000177: 	movq	%xmm2, %rsi
    0000017c: 	addq	%rsi, %rax
    0000017f: 	movq	%r10, %rsi
    00000182: 	andq	$-0x4, %rsi
    00000186: 	movq	%rsi, %rbx
    00000189: 	addq	%rsi, %r11
    0000018c: 	shlq	$0x5, %rbx
    00000190: 	subq	%rbx, %rdi
    00000193: 	cmpq	%r10, %rsi
    00000196: 	je	.Ltmp998 # Offset: 406
.Ltmp1002:
    0000019c: 	movl	(%r8,%r11,4), %esi
    000001a0: 	leaq	(,%r11,4), %r10
    000001a8: 	movl	%esi, %r11d
    000001ab: 	shrl	%r11d
    000001ae: 	andl	$0x55555555, %r11d
    000001b5: 	subl	%r11d, %esi
    000001b8: 	movl	%esi, %r11d
    000001bb: 	shrl	$0x2, %esi
    000001be: 	andl	$0x33333333, %esi
    000001c4: 	andl	$0x33333333, %r11d
    000001cb: 	addl	%esi, %r11d
    000001ce: 	movl	%r11d, %esi
    000001d1: 	shrl	$0x4, %esi
    000001d4: 	addl	%r11d, %esi
    000001d7: 	andl	$0xf0f0f0f, %esi
    000001dd: 	imull	$0x1010101, %esi, %esi
    000001e3: 	shrl	$0x18, %esi
    000001e6: 	addq	%rsi, %rax
    000001e9: 	leaq	-0x20(%rdi), %rsi
    000001ed: 	cmpq	$0x1f, %rsi
    000001f1: 	jbe	.Ltmp998 # Offset: 497
    000001f7: 	movl	0x4(%r8,%r10), %esi
    000001fc: 	subq	$0x40, %rdi
    00000200: 	movl	%esi, %r11d
    00000203: 	shrl	%r11d
    00000206: 	andl	$0x55555555, %r11d
    0000020d: 	subl	%r11d, %esi
    00000210: 	movl	%esi, %r11d
    00000213: 	shrl	$0x2, %esi
    00000216: 	andl	$0x33333333, %esi
    0000021c: 	andl	$0x33333333, %r11d
    00000223: 	addl	%esi, %r11d
    00000226: 	movl	%r11d, %esi
    00000229: 	shrl	$0x4, %esi
    0000022c: 	addl	%r11d, %esi
    0000022f: 	andl	$0xf0f0f0f, %esi
    00000235: 	imull	$0x1010101, %esi, %esi
    0000023b: 	shrl	$0x18, %esi
    0000023e: 	addq	%rsi, %rax
    00000241: 	cmpq	$0x1f, %rdi
    00000245: 	jbe	.Ltmp998 # Offset: 581
    00000247: 	movl	0x8(%r8,%r10), %esi
    0000024c: 	movl	%esi, %edi
    0000024e: 	shrl	%edi
    00000250: 	andl	$0x55555555, %edi
    00000256: 	subl	%edi, %esi
    00000258: 	movl	%esi, %edi
    0000025a: 	shrl	$0x2, %esi
    0000025d: 	andl	$0x33333333, %edi
    00000263: 	andl	$0x33333333, %esi
    00000269: 	addl	%edi, %esi
    0000026b: 	movl	%esi, %edi
    0000026d: 	shrl	$0x4, %edi
    00000270: 	addl	%edi, %esi
    00000272: 	andl	$0xf0f0f0f, %esi
    00000278: 	imull	$0x1010101, %esi, %esi
    0000027e: 	shrl	$0x18, %esi
    00000281: 	addq	%rsi, %rax
.Ltmp998:
    00000284: 	andq	$-0x20, %r9
    00000288: 	andl	$0x1f, %edx
    0000028b: 	leaq	0x20(%rcx,%r9), %rcx
    00000290: 	leaq	-0x1(%rdx), %rdi
    00000294: 	je	.Ltmp999 # Offset: 660
.Ltmp1003:
    0000029a: 	addq	%rcx, %rdi
    0000029d: 	movl	$0x1, %r9d
    000002a3: 	jmp	.Ltmp1000 # Offset: 675
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp1001:
    000002a8: 	movq	%rdx, %rcx
.Ltmp1000:
    000002ab: 	movq	%rcx, %rsi
    000002ae: 	movq	%r9, %rdx
    000002b1: 	shrq	$0x6, %rsi
    000002b5: 	shlq	%cl, %rdx
    000002b8: 	andq	(%r8,%rsi,8), %rdx
    000002bc: 	cmpq	$0x1, %rdx
    000002c0: 	leaq	0x1(%rcx), %rdx
    000002c4: 	sbbq	$-0x1, %rax
    000002c8: 	cmpq	%rdi, %rcx
    000002cb: 	jne	.Ltmp1001 # Offset: 715
    000002cd: 	addq	$0x10, %rsp
    000002d1: 	popq	%rbx
    000002d2: 	retq # Offset: 722
.Ltmp991:
    000002d3: 	addq	$0x10, %rsp
    000002d7: 	xorl	%eax, %eax
    000002d9: 	popq	%rbx
    000002da: 	retq # Offset: 730
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp989:
    000002e0: 	xorl	%eax, %eax
    000002e2: 	retq # Offset: 738
.Ltmp996:
    000002e3: 	movq	%rdx, %rdi
    000002e6: 	jmp	.Ltmp1002 # Offset: 742
.Ltmp995:
    000002eb: 	leaq	-0x1(%rdx), %rdi
    000002ef: 	jmp	.Ltmp1003 # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBits32MultiplyImEmPT_mm"

Binary Function "_Z19CountBits32MultiplyIjEmPT_mm" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0x11420
  Size        : 0x2e9
  MaxSize     : 0x2f0
  Offset      : 0x11420
  Section     : .text
  Orc Section : .local.text._Z19CountBits32MultiplyIjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp1004 # Offset: 7
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %r8
    00000011: 	movq	%rsi, %rcx
    00000014: 	movq	%rdx, %r9
    00000017: 	subq	$0x10, %rsp
    0000001b: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000022: 	jne	.Ltmp1005 # Offset: 34
    00000024: 	movq	%rsi, 0x8(%rsp)
    00000029: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 41
    0000002e: 	movq	0x8(%rsp), %rcx
.Ltmp1005:
    00000033: 	movq	%r9, %rdx
    00000036: 	subq	%rcx, %rdx
    00000039: 	je	.Ltmp1006 # Offset: 57
    0000003f: 	movq	%rcx, %rax
    00000042: 	andl	$0x1f, %eax
    00000045: 	je	.Ltmp1007 # Offset: 69
    00000047: 	xorl	%eax, %eax
    00000049: 	movl	$0x1, %r9d
    0000004f: 	jmp	.Ltmp1008 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp1009:
    00000058: 	testb	$0x1f, %cl
    0000005b: 	je	.Ltmp1007 # Offset: 91
.Ltmp1008:
    0000005d: 	movq	%rcx, %rdi
    00000060: 	movl	%r9d, %esi
    00000063: 	shrq	$0x5, %rdi
    00000067: 	shll	%cl, %esi
    00000069: 	andl	(%r8,%rdi,4), %esi
    0000006d: 	cmpl	$0x1, %esi
    00000070: 	sbbq	$-0x1, %rax
    00000074: 	addq	$0x1, %rcx
    00000078: 	subq	$0x1, %rdx
    0000007c: 	jne	.Ltmp1009 # Offset: 124
.Ltmp1014:
    0000007e: 	addq	$0x10, %rsp
    00000082: 	popq	%rbx
    00000083: 	retq # Offset: 131
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1007:
    00000088: 	movq	%rcx, %r11
    0000008b: 	shrq	$0x5, %r11
    0000008f: 	cmpq	$0x1f, %rdx
    00000093: 	jbe	.Ltmp1010 # Offset: 147
    00000099: 	leaq	-0x20(%rdx), %r9
    0000009d: 	movq	%r9, %r10
    000000a0: 	shrq	$0x5, %r10
    000000a4: 	addq	$0x1, %r10
    000000a8: 	cmpq	$0x5f, %r9
    000000ac: 	jbe	.Ltmp1011 # Offset: 172
    000000b2: 	movq	%r10, %rdi
    000000b5: 	leaq	(%r8,%r11,4), %rsi
    000000b9: 	movdqa	DATAat0x16650(%rip), %xmm6
    000000c1: 	movdqa	DATAat0x16660(%rip), %xmm4
    000000c9: 	shrq	$0x2, %rdi
    000000cd: 	movdqa	DATAat0x16670(%rip), %xmm5
    000000d5: 	pxor	%xmm2, %xmm2
    000000d9: 	pxor	%xmm3, %xmm3
    000000dd: 	shlq	$0x4, %rdi
    000000e1: 	addq	%rsi, %rdi
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp1012:
    000000e8: 	movdqu	(%rsi), %xmm0
    000000ec: 	addq	$0x10, %rsi
    000000f0: 	movdqa	%xmm0, %xmm1
    000000f4: 	psrld	$0x1, %xmm1
    000000f9: 	pand	%xmm6, %xmm1
    000000fd: 	psubd	%xmm1, %xmm0
    00000101: 	movdqa	%xmm0, %xmm1
    00000105: 	pand	%xmm4, %xmm0
    00000109: 	psrld	$0x2, %xmm1
    0000010e: 	pand	%xmm4, %xmm1
    00000112: 	paddd	%xmm1, %xmm0
    00000116: 	movdqa	%xmm0, %xmm1
    0000011a: 	psrld	$0x4, %xmm1
    0000011f: 	paddd	%xmm0, %xmm1
    00000123: 	pand	%xmm5, %xmm1
    00000127: 	movdqa	%xmm1, %xmm0
    0000012b: 	pslld	$0x8, %xmm0
    00000130: 	paddd	%xmm1, %xmm0
    00000134: 	movdqa	%xmm0, %xmm1
    00000138: 	pslld	$0x10, %xmm1
    0000013d: 	paddd	%xmm1, %xmm0
    00000141: 	psrld	$0x18, %xmm0
    00000146: 	movdqa	%xmm0, %xmm1
    0000014a: 	punpckldq	%xmm3, %xmm0
    0000014e: 	punpckhdq	%xmm3, %xmm1
    00000152: 	paddq	%xmm1, %xmm0
    00000156: 	paddq	%xmm0, %xmm2
    0000015a: 	cmpq	%rdi, %rsi
    0000015d: 	jne	.Ltmp1012 # Offset: 349
    0000015f: 	movdqa	%xmm2, %xmm0
    00000163: 	movq	%rdx, %rdi
    00000166: 	psrldq	$0x8, %xmm0
    0000016b: 	paddq	%xmm0, %xmm2
    0000016f: 	movq	%xmm2, %rsi
    00000174: 	addq	%rsi, %rax
    00000177: 	movq	%r10, %rsi
    0000017a: 	andq	$-0x4, %rsi
    0000017e: 	movq	%rsi, %rbx
    00000181: 	addq	%rsi, %r11
    00000184: 	shlq	$0x5, %rbx
    00000188: 	subq	%rbx, %rdi
    0000018b: 	cmpq	%r10, %rsi
    0000018e: 	je	.Ltmp1013 # Offset: 398
.Ltmp1017:
    00000194: 	movl	(%r8,%r11,4), %esi
    00000198: 	leaq	(,%r11,4), %r10
    000001a0: 	movl	%esi, %r11d
    000001a3: 	shrl	%r11d
    000001a6: 	andl	$0x55555555, %r11d
    000001ad: 	subl	%r11d, %esi
    000001b0: 	movl	%esi, %r11d
    000001b3: 	shrl	$0x2, %esi
    000001b6: 	andl	$0x33333333, %esi
    000001bc: 	andl	$0x33333333, %r11d
    000001c3: 	addl	%esi, %r11d
    000001c6: 	movl	%r11d, %esi
    000001c9: 	shrl	$0x4, %esi
    000001cc: 	addl	%r11d, %esi
    000001cf: 	andl	$0xf0f0f0f, %esi
    000001d5: 	imull	$0x1010101, %esi, %esi
    000001db: 	shrl	$0x18, %esi
    000001de: 	addq	%rsi, %rax
    000001e1: 	leaq	-0x20(%rdi), %rsi
    000001e5: 	cmpq	$0x1f, %rsi
    000001e9: 	jbe	.Ltmp1013 # Offset: 489
    000001ef: 	movl	0x4(%r8,%r10), %esi
    000001f4: 	subq	$0x40, %rdi
    000001f8: 	movl	%esi, %r11d
    000001fb: 	shrl	%r11d
    000001fe: 	andl	$0x55555555, %r11d
    00000205: 	subl	%r11d, %esi
    00000208: 	movl	%esi, %r11d
    0000020b: 	shrl	$0x2, %esi
    0000020e: 	andl	$0x33333333, %esi
    00000214: 	andl	$0x33333333, %r11d
    0000021b: 	addl	%esi, %r11d
    0000021e: 	movl	%r11d, %esi
    00000221: 	shrl	$0x4, %esi
    00000224: 	addl	%r11d, %esi
    00000227: 	andl	$0xf0f0f0f, %esi
    0000022d: 	imull	$0x1010101, %esi, %esi
    00000233: 	shrl	$0x18, %esi
    00000236: 	addq	%rsi, %rax
    00000239: 	cmpq	$0x1f, %rdi
    0000023d: 	jbe	.Ltmp1013 # Offset: 573
    0000023f: 	movl	0x8(%r8,%r10), %esi
    00000244: 	movl	%esi, %edi
    00000246: 	shrl	%edi
    00000248: 	andl	$0x55555555, %edi
    0000024e: 	subl	%edi, %esi
    00000250: 	movl	%esi, %edi
    00000252: 	shrl	$0x2, %esi
    00000255: 	andl	$0x33333333, %edi
    0000025b: 	andl	$0x33333333, %esi
    00000261: 	addl	%edi, %esi
    00000263: 	movl	%esi, %edi
    00000265: 	shrl	$0x4, %edi
    00000268: 	addl	%edi, %esi
    0000026a: 	andl	$0xf0f0f0f, %esi
    00000270: 	imull	$0x1010101, %esi, %esi
    00000276: 	shrl	$0x18, %esi
    00000279: 	addq	%rsi, %rax
.Ltmp1013:
    0000027c: 	andq	$-0x20, %r9
    00000280: 	andl	$0x1f, %edx
    00000283: 	leaq	0x20(%rcx,%r9), %rcx
    00000288: 	leaq	-0x1(%rdx), %rdi
    0000028c: 	je	.Ltmp1014 # Offset: 652
.Ltmp1018:
    00000292: 	addq	%rcx, %rdi
    00000295: 	movl	$0x1, %r9d
    0000029b: 	jmp	.Ltmp1015 # Offset: 667
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp1016:
    000002a0: 	movq	%rdx, %rcx
.Ltmp1015:
    000002a3: 	movq	%rcx, %rsi
    000002a6: 	movl	%r9d, %edx
    000002a9: 	shrq	$0x5, %rsi
    000002ad: 	shll	%cl, %edx
    000002af: 	andl	(%r8,%rsi,4), %edx
    000002b3: 	cmpl	$0x1, %edx
    000002b6: 	leaq	0x1(%rcx), %rdx
    000002ba: 	sbbq	$-0x1, %rax
    000002be: 	cmpq	%rdi, %rcx
    000002c1: 	jne	.Ltmp1016 # Offset: 705
    000002c3: 	addq	$0x10, %rsp
    000002c7: 	popq	%rbx
    000002c8: 	retq # Offset: 712
.Ltmp1006:
    000002c9: 	addq	$0x10, %rsp
    000002cd: 	xorl	%eax, %eax
    000002cf: 	popq	%rbx
    000002d0: 	retq # Offset: 720
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp1004:
    000002d8: 	xorl	%eax, %eax
    000002da: 	retq # Offset: 730
.Ltmp1011:
    000002db: 	movq	%rdx, %rdi
    000002de: 	jmp	.Ltmp1017 # Offset: 734
.Ltmp1010:
    000002e3: 	leaq	-0x1(%rdx), %rdi
    000002e7: 	jmp	.Ltmp1018 # Offset: 743
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBits32MultiplyIjEmPT_mm"

Binary Function "_Z19CountBits32MultiplyItEmPT_mm" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0x11710
  Size        : 0x2e1
  MaxSize     : 0x2f0
  Offset      : 0x11710
  Section     : .text
  Orc Section : .local.text._Z19CountBits32MultiplyItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp1019 # Offset: 7
    0000000d: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000014: 	pushq	%rbx
    00000015: 	movq	%rdi, %r9
    00000018: 	movq	%rsi, %r8
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jne	.Ltmp1020 # Offset: 30
    00000020: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 32
.Ltmp1020:
    00000025: 	movq	%r10, %rdx
    00000028: 	subq	%r8, %rdx
    0000002b: 	je	.Ltmp1021 # Offset: 43
    00000031: 	movq	%r8, %rax
    00000034: 	andl	$0x1f, %eax
    00000037: 	je	.Ltmp1022 # Offset: 55
    00000039: 	xorl	%eax, %eax
    0000003b: 	movl	$0x1, %edi
    00000040: 	jmp	.Ltmp1023 # Offset: 64
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1024:
    00000048: 	testb	$0x1f, %r8b
    0000004c: 	je	.Ltmp1022 # Offset: 76
.Ltmp1023:
    0000004e: 	movl	%r8d, %ecx
    00000051: 	movq	%r8, %rsi
    00000054: 	movl	%edi, %ebx
    00000056: 	andl	$0xf, %ecx
    00000059: 	shrq	$0x4, %rsi
    0000005d: 	shll	%cl, %ebx
    0000005f: 	movl	%ebx, %ecx
    00000061: 	andw	(%r9,%rsi,2), %cx
    00000066: 	cmpw	$0x1, %cx
    0000006a: 	sbbq	$-0x1, %rax
    0000006e: 	addq	$0x1, %r8
    00000072: 	subq	$0x1, %rdx
    00000076: 	jne	.Ltmp1024 # Offset: 118
.Ltmp1029:
    00000078: 	popq	%rbx
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1022:
    00000080: 	movq	%r8, %r11
    00000083: 	shrq	$0x5, %r11
    00000087: 	cmpq	$0x1f, %rdx
    0000008b: 	jbe	.Ltmp1025 # Offset: 139
    00000091: 	leaq	-0x20(%rdx), %rdi
    00000095: 	movq	%rdi, %r10
    00000098: 	shrq	$0x5, %r10
    0000009c: 	addq	$0x1, %r10
    000000a0: 	cmpq	$0x5f, %rdi
    000000a4: 	jbe	.Ltmp1026 # Offset: 164
    000000aa: 	movq	%r10, %rsi
    000000ad: 	leaq	(%r9,%r11,4), %rcx
    000000b1: 	movdqa	DATAat0x16650(%rip), %xmm6
    000000b9: 	movdqa	DATAat0x16660(%rip), %xmm4
    000000c1: 	shrq	$0x2, %rsi
    000000c5: 	movdqa	DATAat0x16670(%rip), %xmm5
    000000cd: 	pxor	%xmm2, %xmm2
    000000d1: 	pxor	%xmm3, %xmm3
    000000d5: 	shlq	$0x4, %rsi
    000000d9: 	addq	%rcx, %rsi
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1027:
    000000e0: 	movdqu	(%rcx), %xmm0
    000000e4: 	addq	$0x10, %rcx
    000000e8: 	movdqa	%xmm0, %xmm1
    000000ec: 	psrld	$0x1, %xmm1
    000000f1: 	pand	%xmm6, %xmm1
    000000f5: 	psubd	%xmm1, %xmm0
    000000f9: 	movdqa	%xmm0, %xmm1
    000000fd: 	pand	%xmm4, %xmm0
    00000101: 	psrld	$0x2, %xmm1
    00000106: 	pand	%xmm4, %xmm1
    0000010a: 	paddd	%xmm1, %xmm0
    0000010e: 	movdqa	%xmm0, %xmm1
    00000112: 	psrld	$0x4, %xmm1
    00000117: 	paddd	%xmm0, %xmm1
    0000011b: 	pand	%xmm5, %xmm1
    0000011f: 	movdqa	%xmm1, %xmm0
    00000123: 	pslld	$0x8, %xmm0
    00000128: 	paddd	%xmm1, %xmm0
    0000012c: 	movdqa	%xmm0, %xmm1
    00000130: 	pslld	$0x10, %xmm1
    00000135: 	paddd	%xmm1, %xmm0
    00000139: 	psrld	$0x18, %xmm0
    0000013e: 	movdqa	%xmm0, %xmm1
    00000142: 	punpckldq	%xmm3, %xmm0
    00000146: 	punpckhdq	%xmm3, %xmm1
    0000014a: 	paddq	%xmm1, %xmm0
    0000014e: 	paddq	%xmm0, %xmm2
    00000152: 	cmpq	%rsi, %rcx
    00000155: 	jne	.Ltmp1027 # Offset: 341
    00000157: 	movdqa	%xmm2, %xmm0
    0000015b: 	movq	%rdx, %rsi
    0000015e: 	psrldq	$0x8, %xmm0
    00000163: 	paddq	%xmm0, %xmm2
    00000167: 	movq	%xmm2, %rcx
    0000016c: 	addq	%rcx, %rax
    0000016f: 	movq	%r10, %rcx
    00000172: 	andq	$-0x4, %rcx
    00000176: 	movq	%rcx, %rbx
    00000179: 	addq	%rcx, %r11
    0000017c: 	shlq	$0x5, %rbx
    00000180: 	subq	%rbx, %rsi
    00000183: 	cmpq	%r10, %rcx
    00000186: 	je	.Ltmp1028 # Offset: 390
.Ltmp1032:
    0000018c: 	movl	(%r9,%r11,4), %ecx
    00000190: 	leaq	(,%r11,4), %r10
    00000198: 	movl	%ecx, %r11d
    0000019b: 	shrl	%r11d
    0000019e: 	andl	$0x55555555, %r11d
    000001a5: 	subl	%r11d, %ecx
    000001a8: 	movl	%ecx, %r11d
    000001ab: 	shrl	$0x2, %ecx
    000001ae: 	andl	$0x33333333, %ecx
    000001b4: 	andl	$0x33333333, %r11d
    000001bb: 	addl	%ecx, %r11d
    000001be: 	movl	%r11d, %ecx
    000001c1: 	shrl	$0x4, %ecx
    000001c4: 	addl	%r11d, %ecx
    000001c7: 	andl	$0xf0f0f0f, %ecx
    000001cd: 	imull	$0x1010101, %ecx, %ecx
    000001d3: 	shrl	$0x18, %ecx
    000001d6: 	addq	%rcx, %rax
    000001d9: 	leaq	-0x20(%rsi), %rcx
    000001dd: 	cmpq	$0x1f, %rcx
    000001e1: 	jbe	.Ltmp1028 # Offset: 481
    000001e7: 	movl	0x4(%r9,%r10), %ecx
    000001ec: 	subq	$0x40, %rsi
    000001f0: 	movl	%ecx, %r11d
    000001f3: 	shrl	%r11d
    000001f6: 	andl	$0x55555555, %r11d
    000001fd: 	subl	%r11d, %ecx
    00000200: 	movl	%ecx, %r11d
    00000203: 	shrl	$0x2, %ecx
    00000206: 	andl	$0x33333333, %ecx
    0000020c: 	andl	$0x33333333, %r11d
    00000213: 	addl	%ecx, %r11d
    00000216: 	movl	%r11d, %ecx
    00000219: 	shrl	$0x4, %ecx
    0000021c: 	addl	%r11d, %ecx
    0000021f: 	andl	$0xf0f0f0f, %ecx
    00000225: 	imull	$0x1010101, %ecx, %ecx
    0000022b: 	shrl	$0x18, %ecx
    0000022e: 	addq	%rcx, %rax
    00000231: 	cmpq	$0x1f, %rsi
    00000235: 	jbe	.Ltmp1028 # Offset: 565
    00000237: 	movl	0x8(%r9,%r10), %ecx
    0000023c: 	movl	%ecx, %esi
    0000023e: 	shrl	%esi
    00000240: 	andl	$0x55555555, %esi
    00000246: 	subl	%esi, %ecx
    00000248: 	movl	%ecx, %esi
    0000024a: 	shrl	$0x2, %ecx
    0000024d: 	andl	$0x33333333, %esi
    00000253: 	andl	$0x33333333, %ecx
    00000259: 	addl	%esi, %ecx
    0000025b: 	movl	%ecx, %esi
    0000025d: 	shrl	$0x4, %esi
    00000260: 	addl	%esi, %ecx
    00000262: 	andl	$0xf0f0f0f, %ecx
    00000268: 	imull	$0x1010101, %ecx, %ecx
    0000026e: 	shrl	$0x18, %ecx
    00000271: 	addq	%rcx, %rax
.Ltmp1028:
    00000274: 	andq	$-0x20, %rdi
    00000278: 	andl	$0x1f, %edx
    0000027b: 	leaq	0x20(%r8,%rdi), %r8
    00000280: 	leaq	-0x1(%rdx), %rdi
    00000284: 	je	.Ltmp1029 # Offset: 644
.Ltmp1033:
    0000028a: 	addq	%r8, %rdi
    0000028d: 	movl	$0x1, %r10d
    00000293: 	jmp	.Ltmp1030 # Offset: 659
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp1031:
    00000298: 	movq	%rdx, %r8
.Ltmp1030:
    0000029b: 	movq	%r8, %rsi
    0000029e: 	movl	%r8d, %ecx
    000002a1: 	movl	%r10d, %edx
    000002a4: 	shrq	$0x4, %rsi
    000002a8: 	andl	$0xf, %ecx
    000002ab: 	shll	%cl, %edx
    000002ad: 	andw	(%r9,%rsi,2), %dx
    000002b2: 	cmpw	$0x1, %dx
    000002b6: 	leaq	0x1(%r8), %rdx
    000002ba: 	sbbq	$-0x1, %rax
    000002be: 	cmpq	%rdi, %r8
    000002c1: 	jne	.Ltmp1031 # Offset: 705
    000002c3: 	popq	%rbx
    000002c4: 	retq # Offset: 708
.Ltmp1021:
    000002c5: 	xorl	%eax, %eax
    000002c7: 	popq	%rbx
    000002c8: 	retq # Offset: 712
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp1019:
    000002d0: 	xorl	%eax, %eax
    000002d2: 	retq # Offset: 722
.Ltmp1026:
    000002d3: 	movq	%rdx, %rsi
    000002d6: 	jmp	.Ltmp1032 # Offset: 726
.Ltmp1025:
    000002db: 	leaq	-0x1(%rdx), %rdi
    000002df: 	jmp	.Ltmp1033 # Offset: 735
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBits32MultiplyItEmPT_mm"

Binary Function "_Z19CountBits32MultiplyIhEmPT_mm" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0x11a00
  Size        : 0x2e1
  MaxSize     : 0x2f0
  Offset      : 0x11a00
  Section     : .text
  Orc Section : .local.text._Z19CountBits32MultiplyIhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp1034 # Offset: 7
    0000000d: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000014: 	pushq	%rbx
    00000015: 	movq	%rdi, %r9
    00000018: 	movq	%rsi, %r8
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jne	.Ltmp1035 # Offset: 30
    00000020: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 32
.Ltmp1035:
    00000025: 	movq	%r10, %rdx
    00000028: 	subq	%r8, %rdx
    0000002b: 	je	.Ltmp1036 # Offset: 43
    00000031: 	movq	%r8, %rax
    00000034: 	andl	$0x1f, %eax
    00000037: 	je	.Ltmp1037 # Offset: 55
    00000039: 	xorl	%eax, %eax
    0000003b: 	movl	$0x1, %edi
    00000040: 	jmp	.Ltmp1038 # Offset: 64
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1039:
    00000048: 	testb	$0x1f, %r8b
    0000004c: 	je	.Ltmp1037 # Offset: 76
.Ltmp1038:
    0000004e: 	movl	%r8d, %ecx
    00000051: 	movq	%r8, %rsi
    00000054: 	movl	%edi, %ebx
    00000056: 	andl	$0x7, %ecx
    00000059: 	shrq	$0x3, %rsi
    0000005d: 	shll	%cl, %ebx
    0000005f: 	movl	%ebx, %ecx
    00000061: 	andb	(%r9,%rsi), %cl
    00000065: 	cmpb	$0x1, %cl
    00000068: 	sbbq	$-0x1, %rax
    0000006c: 	addq	$0x1, %r8
    00000070: 	subq	$0x1, %rdx
    00000074: 	jne	.Ltmp1039 # Offset: 116
.Ltmp1044:
    00000076: 	popq	%rbx
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1037:
    00000080: 	movq	%r8, %r11
    00000083: 	shrq	$0x5, %r11
    00000087: 	cmpq	$0x1f, %rdx
    0000008b: 	jbe	.Ltmp1040 # Offset: 139
    00000091: 	leaq	-0x20(%rdx), %rdi
    00000095: 	movq	%rdi, %r10
    00000098: 	shrq	$0x5, %r10
    0000009c: 	addq	$0x1, %r10
    000000a0: 	cmpq	$0x5f, %rdi
    000000a4: 	jbe	.Ltmp1041 # Offset: 164
    000000aa: 	movq	%r10, %rsi
    000000ad: 	leaq	(%r9,%r11,4), %rcx
    000000b1: 	movdqa	DATAat0x16650(%rip), %xmm6
    000000b9: 	movdqa	DATAat0x16660(%rip), %xmm4
    000000c1: 	shrq	$0x2, %rsi
    000000c5: 	movdqa	DATAat0x16670(%rip), %xmm5
    000000cd: 	pxor	%xmm2, %xmm2
    000000d1: 	pxor	%xmm3, %xmm3
    000000d5: 	shlq	$0x4, %rsi
    000000d9: 	addq	%rcx, %rsi
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1042:
    000000e0: 	movdqu	(%rcx), %xmm0
    000000e4: 	addq	$0x10, %rcx
    000000e8: 	movdqa	%xmm0, %xmm1
    000000ec: 	psrld	$0x1, %xmm1
    000000f1: 	pand	%xmm6, %xmm1
    000000f5: 	psubd	%xmm1, %xmm0
    000000f9: 	movdqa	%xmm0, %xmm1
    000000fd: 	pand	%xmm4, %xmm0
    00000101: 	psrld	$0x2, %xmm1
    00000106: 	pand	%xmm4, %xmm1
    0000010a: 	paddd	%xmm1, %xmm0
    0000010e: 	movdqa	%xmm0, %xmm1
    00000112: 	psrld	$0x4, %xmm1
    00000117: 	paddd	%xmm0, %xmm1
    0000011b: 	pand	%xmm5, %xmm1
    0000011f: 	movdqa	%xmm1, %xmm0
    00000123: 	pslld	$0x8, %xmm0
    00000128: 	paddd	%xmm1, %xmm0
    0000012c: 	movdqa	%xmm0, %xmm1
    00000130: 	pslld	$0x10, %xmm1
    00000135: 	paddd	%xmm1, %xmm0
    00000139: 	psrld	$0x18, %xmm0
    0000013e: 	movdqa	%xmm0, %xmm1
    00000142: 	punpckldq	%xmm3, %xmm0
    00000146: 	punpckhdq	%xmm3, %xmm1
    0000014a: 	paddq	%xmm1, %xmm0
    0000014e: 	paddq	%xmm0, %xmm2
    00000152: 	cmpq	%rsi, %rcx
    00000155: 	jne	.Ltmp1042 # Offset: 341
    00000157: 	movdqa	%xmm2, %xmm0
    0000015b: 	movq	%rdx, %rsi
    0000015e: 	psrldq	$0x8, %xmm0
    00000163: 	paddq	%xmm0, %xmm2
    00000167: 	movq	%xmm2, %rcx
    0000016c: 	addq	%rcx, %rax
    0000016f: 	movq	%r10, %rcx
    00000172: 	andq	$-0x4, %rcx
    00000176: 	movq	%rcx, %rbx
    00000179: 	addq	%rcx, %r11
    0000017c: 	shlq	$0x5, %rbx
    00000180: 	subq	%rbx, %rsi
    00000183: 	cmpq	%r10, %rcx
    00000186: 	je	.Ltmp1043 # Offset: 390
.Ltmp1047:
    0000018c: 	movl	(%r9,%r11,4), %ecx
    00000190: 	leaq	(,%r11,4), %r10
    00000198: 	movl	%ecx, %r11d
    0000019b: 	shrl	%r11d
    0000019e: 	andl	$0x55555555, %r11d
    000001a5: 	subl	%r11d, %ecx
    000001a8: 	movl	%ecx, %r11d
    000001ab: 	shrl	$0x2, %ecx
    000001ae: 	andl	$0x33333333, %ecx
    000001b4: 	andl	$0x33333333, %r11d
    000001bb: 	addl	%ecx, %r11d
    000001be: 	movl	%r11d, %ecx
    000001c1: 	shrl	$0x4, %ecx
    000001c4: 	addl	%r11d, %ecx
    000001c7: 	andl	$0xf0f0f0f, %ecx
    000001cd: 	imull	$0x1010101, %ecx, %ecx
    000001d3: 	shrl	$0x18, %ecx
    000001d6: 	addq	%rcx, %rax
    000001d9: 	leaq	-0x20(%rsi), %rcx
    000001dd: 	cmpq	$0x1f, %rcx
    000001e1: 	jbe	.Ltmp1043 # Offset: 481
    000001e7: 	movl	0x4(%r9,%r10), %ecx
    000001ec: 	subq	$0x40, %rsi
    000001f0: 	movl	%ecx, %r11d
    000001f3: 	shrl	%r11d
    000001f6: 	andl	$0x55555555, %r11d
    000001fd: 	subl	%r11d, %ecx
    00000200: 	movl	%ecx, %r11d
    00000203: 	shrl	$0x2, %ecx
    00000206: 	andl	$0x33333333, %ecx
    0000020c: 	andl	$0x33333333, %r11d
    00000213: 	addl	%ecx, %r11d
    00000216: 	movl	%r11d, %ecx
    00000219: 	shrl	$0x4, %ecx
    0000021c: 	addl	%r11d, %ecx
    0000021f: 	andl	$0xf0f0f0f, %ecx
    00000225: 	imull	$0x1010101, %ecx, %ecx
    0000022b: 	shrl	$0x18, %ecx
    0000022e: 	addq	%rcx, %rax
    00000231: 	cmpq	$0x1f, %rsi
    00000235: 	jbe	.Ltmp1043 # Offset: 565
    00000237: 	movl	0x8(%r9,%r10), %ecx
    0000023c: 	movl	%ecx, %esi
    0000023e: 	shrl	%esi
    00000240: 	andl	$0x55555555, %esi
    00000246: 	subl	%esi, %ecx
    00000248: 	movl	%ecx, %esi
    0000024a: 	shrl	$0x2, %ecx
    0000024d: 	andl	$0x33333333, %esi
    00000253: 	andl	$0x33333333, %ecx
    00000259: 	addl	%esi, %ecx
    0000025b: 	movl	%ecx, %esi
    0000025d: 	shrl	$0x4, %esi
    00000260: 	addl	%esi, %ecx
    00000262: 	andl	$0xf0f0f0f, %ecx
    00000268: 	imull	$0x1010101, %ecx, %ecx
    0000026e: 	shrl	$0x18, %ecx
    00000271: 	addq	%rcx, %rax
.Ltmp1043:
    00000274: 	andq	$-0x20, %rdi
    00000278: 	andl	$0x1f, %edx
    0000027b: 	leaq	0x20(%r8,%rdi), %r8
    00000280: 	leaq	-0x1(%rdx), %rdi
    00000284: 	je	.Ltmp1044 # Offset: 644
.Ltmp1048:
    0000028a: 	addq	%r8, %rdi
    0000028d: 	movl	$0x1, %r10d
    00000293: 	jmp	.Ltmp1045 # Offset: 659
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp1046:
    00000298: 	movq	%rdx, %r8
.Ltmp1045:
    0000029b: 	movq	%r8, %rsi
    0000029e: 	movl	%r8d, %ecx
    000002a1: 	movl	%r10d, %edx
    000002a4: 	shrq	$0x3, %rsi
    000002a8: 	andl	$0x7, %ecx
    000002ab: 	shll	%cl, %edx
    000002ad: 	andb	(%r9,%rsi), %dl
    000002b1: 	cmpb	$0x1, %dl
    000002b4: 	leaq	0x1(%r8), %rdx
    000002b8: 	sbbq	$-0x1, %rax
    000002bc: 	cmpq	%rdi, %r8
    000002bf: 	jne	.Ltmp1046 # Offset: 703
    000002c1: 	popq	%rbx
    000002c2: 	retq # Offset: 706
.Ltmp1036:
    000002c3: 	xorl	%eax, %eax
    000002c5: 	popq	%rbx
    000002c6: 	retq # Offset: 710
    000002c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1034:
    000002d0: 	xorl	%eax, %eax
    000002d2: 	retq # Offset: 722
.Ltmp1041:
    000002d3: 	movq	%rdx, %rsi
    000002d6: 	jmp	.Ltmp1047 # Offset: 726
.Ltmp1040:
    000002db: 	leaq	-0x1(%rdx), %rdi
    000002df: 	jmp	.Ltmp1048 # Offset: 735
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBits32MultiplyIhEmPT_mm"

Binary Function "_Z20CountBits32Parallel2IhEmPT_mm" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0x11cf0
  Size        : 0x371
  MaxSize     : 0x380
  Offset      : 0x11cf0
  Section     : .text
  Orc Section : .local.text._Z20CountBits32Parallel2IhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp1049 # Offset: 7
    0000000d: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000014: 	pushq	%rbx
    00000015: 	movq	%rdi, %r9
    00000018: 	movq	%rsi, %r8
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jne	.Ltmp1050 # Offset: 30
    00000020: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 32
.Ltmp1050:
    00000025: 	movq	%r10, %rdx
    00000028: 	subq	%r8, %rdx
    0000002b: 	je	.Ltmp1051 # Offset: 43
    00000031: 	movq	%r8, %rax
    00000034: 	andl	$0x1f, %eax
    00000037: 	je	.Ltmp1052 # Offset: 55
    00000039: 	xorl	%eax, %eax
    0000003b: 	movl	$0x1, %edi
    00000040: 	jmp	.Ltmp1053 # Offset: 64
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1054:
    00000048: 	testb	$0x1f, %r8b
    0000004c: 	je	.Ltmp1052 # Offset: 76
.Ltmp1053:
    0000004e: 	movl	%r8d, %ecx
    00000051: 	movq	%r8, %rsi
    00000054: 	movl	%edi, %ebx
    00000056: 	andl	$0x7, %ecx
    00000059: 	shrq	$0x3, %rsi
    0000005d: 	shll	%cl, %ebx
    0000005f: 	movl	%ebx, %ecx
    00000061: 	andb	(%r9,%rsi), %cl
    00000065: 	cmpb	$0x1, %cl
    00000068: 	sbbq	$-0x1, %rax
    0000006c: 	addq	$0x1, %r8
    00000070: 	subq	$0x1, %rdx
    00000074: 	jne	.Ltmp1054 # Offset: 116
.Ltmp1059:
    00000076: 	popq	%rbx
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1052:
    00000080: 	movq	%r8, %r11
    00000083: 	shrq	$0x5, %r11
    00000087: 	cmpq	$0x1f, %rdx
    0000008b: 	jbe	.Ltmp1055 # Offset: 139
    00000091: 	leaq	-0x20(%rdx), %rsi
    00000095: 	movq	%rsi, %r10
    00000098: 	shrq	$0x5, %r10
    0000009c: 	addq	$0x1, %r10
    000000a0: 	cmpq	$0x5f, %rsi
    000000a4: 	jbe	.Ltmp1056 # Offset: 164
    000000aa: 	movq	%r10, %rdi
    000000ad: 	leaq	(%r9,%r11,4), %rcx
    000000b1: 	movdqa	DATAat0x16650(%rip), %xmm7
    000000b9: 	movdqa	DATAat0x16660(%rip), %xmm6
    000000c1: 	shrq	$0x2, %rdi
    000000c5: 	pxor	%xmm2, %xmm2
    000000c9: 	movdqa	DATAat0x16670(%rip), %xmm5
    000000d1: 	movdqa	DATAat0x16680(%rip), %xmm4
    000000d9: 	shlq	$0x4, %rdi
    000000dd: 	pxor	%xmm3, %xmm3
    000000e1: 	movdqa	DATAat0x16690(%rip), %xmm8
    000000ea: 	addq	%rcx, %rdi
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp1057:
    000000f0: 	movdqu	(%rcx), %xmm1
    000000f4: 	addq	$0x10, %rcx
    000000f8: 	movdqa	%xmm1, %xmm0
    000000fc: 	pand	%xmm7, %xmm1
    00000100: 	psrld	$0x1, %xmm0
    00000105: 	pand	%xmm7, %xmm0
    00000109: 	paddd	%xmm1, %xmm0
    0000010d: 	movdqa	%xmm0, %xmm1
    00000111: 	pand	%xmm6, %xmm0
    00000115: 	psrld	$0x2, %xmm1
    0000011a: 	pand	%xmm6, %xmm1
    0000011e: 	paddd	%xmm0, %xmm1
    00000122: 	movdqa	%xmm1, %xmm0
    00000126: 	pand	%xmm5, %xmm1
    0000012a: 	psrld	$0x4, %xmm0
    0000012f: 	pand	%xmm5, %xmm0
    00000133: 	paddd	%xmm1, %xmm0
    00000137: 	movdqa	%xmm0, %xmm1
    0000013b: 	pand	%xmm4, %xmm0
    0000013f: 	psrld	$0x8, %xmm1
    00000144: 	pand	%xmm4, %xmm1
    00000148: 	paddd	%xmm0, %xmm1
    0000014c: 	movdqa	%xmm1, %xmm0
    00000150: 	psrld	$0x10, %xmm1
    00000155: 	pand	%xmm8, %xmm0
    0000015a: 	paddd	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	punpckldq	%xmm3, %xmm0
    00000166: 	punpckhdq	%xmm3, %xmm1
    0000016a: 	paddq	%xmm1, %xmm0
    0000016e: 	paddq	%xmm0, %xmm2
    00000172: 	cmpq	%rcx, %rdi
    00000175: 	jne	.Ltmp1057 # Offset: 373
    0000017b: 	movdqa	%xmm2, %xmm0
    0000017f: 	movq	%rdx, %rdi
    00000182: 	psrldq	$0x8, %xmm0
    00000187: 	paddq	%xmm0, %xmm2
    0000018b: 	movq	%xmm2, %rcx
    00000190: 	addq	%rcx, %rax
    00000193: 	movq	%r10, %rcx
    00000196: 	andq	$-0x4, %rcx
    0000019a: 	movq	%rcx, %rbx
    0000019d: 	addq	%rcx, %r11
    000001a0: 	shlq	$0x5, %rbx
    000001a4: 	subq	%rbx, %rdi
    000001a7: 	cmpq	%r10, %rcx
    000001aa: 	je	.Ltmp1058 # Offset: 426
.Ltmp1062:
    000001b0: 	movl	(%r9,%r11,4), %ecx
    000001b4: 	leaq	(,%r11,4), %r10
    000001bc: 	movl	%ecx, %r11d
    000001bf: 	andl	$0x55555555, %ecx
    000001c5: 	shrl	%r11d
    000001c8: 	andl	$0x55555555, %r11d
    000001cf: 	addl	%ecx, %r11d
    000001d2: 	movl	%r11d, %ecx
    000001d5: 	andl	$0x33333333, %r11d
    000001dc: 	shrl	$0x2, %ecx
    000001df: 	andl	$0x33333333, %ecx
    000001e5: 	addl	%r11d, %ecx
    000001e8: 	movl	%ecx, %r11d
    000001eb: 	andl	$0xf0f0f0f, %ecx
    000001f1: 	shrl	$0x4, %r11d
    000001f5: 	andl	$0x70f0f0f, %r11d
    000001fc: 	addl	%ecx, %r11d
    000001ff: 	movl	%r11d, %ecx
    00000202: 	andl	$0xff00ff, %r11d
    00000209: 	shrl	$0x8, %ecx
    0000020c: 	andl	$0xff00ff, %ecx
    00000212: 	addl	%r11d, %ecx
    00000215: 	movl	%ecx, %r11d
    00000218: 	movzwl	%cx, %ecx
    0000021b: 	shrl	$0x10, %r11d
    0000021f: 	addl	%r11d, %ecx
    00000222: 	addq	%rcx, %rax
    00000225: 	leaq	-0x20(%rdi), %rcx
    00000229: 	cmpq	$0x1f, %rcx
    0000022d: 	jbe	.Ltmp1058 # Offset: 557
    00000233: 	movl	0x4(%r9,%r10), %r11d
    00000238: 	subq	$0x40, %rdi
    0000023c: 	movl	%r11d, %ecx
    0000023f: 	andl	$0x55555555, %r11d
    00000246: 	shrl	%ecx
    00000248: 	andl	$0x55555555, %ecx
    0000024e: 	addl	%r11d, %ecx
    00000251: 	movl	%ecx, %r11d
    00000254: 	andl	$0x33333333, %ecx
    0000025a: 	shrl	$0x2, %r11d
    0000025e: 	andl	$0x33333333, %r11d
    00000265: 	addl	%r11d, %ecx
    00000268: 	movl	%ecx, %r11d
    0000026b: 	andl	$0xf0f0f0f, %ecx
    00000271: 	shrl	$0x4, %r11d
    00000275: 	andl	$0x70f0f0f, %r11d
    0000027c: 	addl	%ecx, %r11d
    0000027f: 	movl	%r11d, %ecx
    00000282: 	andl	$0xff00ff, %r11d
    00000289: 	shrl	$0x8, %ecx
    0000028c: 	andl	$0xff00ff, %ecx
    00000292: 	addl	%r11d, %ecx
    00000295: 	movl	%ecx, %r11d
    00000298: 	movzwl	%cx, %ecx
    0000029b: 	shrl	$0x10, %r11d
    0000029f: 	addl	%r11d, %ecx
    000002a2: 	addq	%rcx, %rax
    000002a5: 	cmpq	$0x1f, %rdi
    000002a9: 	jbe	.Ltmp1058 # Offset: 681
    000002ab: 	movl	0x8(%r9,%r10), %edi
    000002b0: 	movl	%edi, %ecx
    000002b2: 	andl	$0x55555555, %edi
    000002b8: 	shrl	%ecx
    000002ba: 	andl	$0x55555555, %ecx
    000002c0: 	addl	%edi, %ecx
    000002c2: 	movl	%ecx, %edi
    000002c4: 	andl	$0x33333333, %ecx
    000002ca: 	shrl	$0x2, %edi
    000002cd: 	andl	$0x33333333, %edi
    000002d3: 	addl	%edi, %ecx
    000002d5: 	movl	%ecx, %edi
    000002d7: 	andl	$0xf0f0f0f, %ecx
    000002dd: 	shrl	$0x4, %edi
    000002e0: 	andl	$0x70f0f0f, %edi
    000002e6: 	addl	%edi, %ecx
    000002e8: 	movl	%ecx, %edi
    000002ea: 	andl	$0xff00ff, %ecx
    000002f0: 	shrl	$0x8, %edi
    000002f3: 	andl	$0xff00ff, %edi
    000002f9: 	addl	%edi, %ecx
    000002fb: 	movl	%ecx, %edi
    000002fd: 	movzwl	%cx, %ecx
    00000300: 	shrl	$0x10, %edi
    00000303: 	addl	%edi, %ecx
    00000305: 	addq	%rcx, %rax
.Ltmp1058:
    00000308: 	andq	$-0x20, %rsi
    0000030c: 	andl	$0x1f, %edx
    0000030f: 	leaq	0x20(%r8,%rsi), %r8
    00000314: 	leaq	-0x1(%rdx), %rdi
    00000318: 	je	.Ltmp1059 # Offset: 792
.Ltmp1063:
    0000031e: 	addq	%r8, %rdi
    00000321: 	movl	$0x1, %r10d
    00000327: 	jmp	.Ltmp1060 # Offset: 807
    00000329: 	nopl	(%rax) # Size: 7
.Ltmp1061:
    00000330: 	movq	%rdx, %r8
.Ltmp1060:
    00000333: 	movq	%r8, %rsi
    00000336: 	movl	%r8d, %ecx
    00000339: 	movl	%r10d, %edx
    0000033c: 	shrq	$0x3, %rsi
    00000340: 	andl	$0x7, %ecx
    00000343: 	shll	%cl, %edx
    00000345: 	andb	(%r9,%rsi), %dl
    00000349: 	cmpb	$0x1, %dl
    0000034c: 	leaq	0x1(%r8), %rdx
    00000350: 	sbbq	$-0x1, %rax
    00000354: 	cmpq	%rdi, %r8
    00000357: 	jne	.Ltmp1061 # Offset: 855
    00000359: 	popq	%rbx
    0000035a: 	retq # Offset: 858
.Ltmp1051:
    0000035b: 	xorl	%eax, %eax
    0000035d: 	popq	%rbx
    0000035e: 	retq # Offset: 862
    0000035f: 	nop # Size: 1
.Ltmp1049:
    00000360: 	xorl	%eax, %eax
    00000362: 	retq # Offset: 866
.Ltmp1056:
    00000363: 	movq	%rdx, %rdi
    00000366: 	jmp	.Ltmp1062 # Offset: 870
.Ltmp1055:
    0000036b: 	leaq	-0x1(%rdx), %rdi
    0000036f: 	jmp	.Ltmp1063 # Offset: 879
DWARF CFI Instructions:
    <empty>
End of Function "_Z20CountBits32Parallel2IhEmPT_mm"

Binary Function "_Z20CountBits32Parallel2ItEmPT_mm" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0x12070
  Size        : 0x359
  MaxSize     : 0x360
  Offset      : 0x12070
  Section     : .text
  Orc Section : .local.text._Z20CountBits32Parallel2ItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdx
    00000007: 	jb	.Ltmp1064 # Offset: 7
    0000000d: 	cmpb	$0x0, "_ZL19bitCountInitialized/1"(%rip)
    00000014: 	pushq	%rbx
    00000015: 	movq	%rdi, %r9
    00000018: 	movq	%rsi, %r8
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jne	.Ltmp1065 # Offset: 30
    00000020: 	callq	"_Z23InitializeBitCountTablev.part.0/1" # Offset: 32
.Ltmp1065:
    00000025: 	movq	%r10, %rdx
    00000028: 	subq	%r8, %rdx
    0000002b: 	je	.Ltmp1066 # Offset: 43
    00000031: 	movq	%r8, %rax
    00000034: 	andl	$0x1f, %eax
    00000037: 	je	.Ltmp1067 # Offset: 55
    00000039: 	xorl	%eax, %eax
    0000003b: 	movl	$0x1, %edi
    00000040: 	jmp	.Ltmp1068 # Offset: 64
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1069:
    00000048: 	testb	$0x1f, %r8b
    0000004c: 	je	.Ltmp1067 # Offset: 76
.Ltmp1068:
    0000004e: 	movl	%r8d, %ecx
    00000051: 	movq	%r8, %rsi
    00000054: 	movl	%edi, %ebx
    00000056: 	andl	$0xf, %ecx
    00000059: 	shrq	$0x4, %rsi
    0000005d: 	shll	%cl, %ebx
    0000005f: 	movl	%ebx, %ecx
    00000061: 	andw	(%r9,%rsi,2), %cx
    00000066: 	cmpw	$0x1, %cx
    0000006a: 	sbbq	$-0x1, %rax
    0000006e: 	addq	$0x1, %r8
    00000072: 	subq	$0x1, %rdx
    00000076: 	jne	.Ltmp1069 # Offset: 118
.Ltmp1074:
    00000078: 	popq	%rbx
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1067:
    00000080: 	movq	%r8, %rbx
    00000083: 	shrq	$0x5, %rbx
    00000087: 	cmpq	$0x1f, %rdx
    0000008b: 	jbe	.Ltmp1070 # Offset: 139
    00000091: 	leaq	-0x20(%rdx), %rsi
    00000095: 	movq	%rsi, %r11
    00000098: 	shrq	$0x5, %r11
    0000009c: 	addq	$0x1, %r11
    000000a0: 	cmpq	$0x5f, %rsi
    000000a4: 	jbe	.Ltmp1071 # Offset: 164
    000000aa: 	movq	%r11, %rdi
    000000ad: 	leaq	(%r9,%rbx,4), %rcx
    000000b1: 	movdqa	DATAat0x16650(%rip), %xmm7
    000000b9: 	movdqa	DATAat0x16660(%rip), %xmm6
    000000c1: 	shrq	$0x2, %rdi
    000000c5: 	pxor	%xmm2, %xmm2
    000000c9: 	movdqa	DATAat0x16670(%rip), %xmm5
    000000d1: 	movdqa	DATAat0x16680(%rip), %xmm4
    000000d9: 	shlq	$0x4, %rdi
    000000dd: 	pxor	%xmm3, %xmm3
    000000e1: 	movdqa	DATAat0x16690(%rip), %xmm8
    000000ea: 	addq	%rcx, %rdi
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp1072:
    000000f0: 	movdqu	(%rcx), %xmm1
    000000f4: 	addq	$0x10, %rcx
    000000f8: 	movdqa	%xmm1, %xmm0
    000000fc: 	pand	%xmm7, %xmm1
    00000100: 	psrld	$0x1, %xmm0
    00000105: 	pand	%xmm7, %xmm0
    00000109: 	paddd	%xmm1, %xmm0
    0000010d: 	movdqa	%xmm0, %xmm1
    00000111: 	pand	%xmm6, %xmm0
    00000115: 	psrld	$0x2, %xmm1
    0000011a: 	pand	%xmm6, %xmm1
    0000011e: 	paddd	%xmm0, %xmm1
    00000122: 	movdqa	%xmm1, %xmm0
    00000126: 	pand	%xmm5, %xmm1
    0000012a: 	psrld	$0x4, %xmm0
    0000012f: 	pand	%xmm5, %xmm0
    00000133: 	paddd	%xmm1, %xmm0
    00000137: 	movdqa	%xmm0, %xmm1
    0000013b: 	pand	%xmm4, %xmm0
    0000013f: 	psrld	$0x8, %xmm1
    00000144: 	pand	%xmm4, %xmm1
    00000148: 	paddd	%xmm0, %xmm1
    0000014c: 	movdqa	%xmm1, %xmm0
    00000150: 	psrld	$0x10, %xmm1
    00000155: 	pand	%xmm8, %xmm0
    0000015a: 	paddd	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	punpckldq	%xmm3, %xmm0
    00000166: 	punpckhdq	%xmm3, %xmm1
    0000016a: 	paddq	%xmm1, %xmm0
    0000016e: 	paddq	%xmm0, %xmm2
    00000172: 	cmpq	%rcx, %rdi
    00000175: 	jne	.Ltmp1072 # Offset: 373
    0000017b: 	movdqa	%xmm2, %xmm0
    0000017f: 	movq	%rdx, %r10
    00000182: 	psrldq	$0x8, %xmm0
    00000187: 	paddq	%xmm0, %xmm2
    0000018b: 	movq	%xmm2, %rcx
    00000190: 	addq	%rcx, %rax
    00000193: 	movq	%r11, %rcx
    00000196: 	andq	$-0x4, %rcx
    0000019a: 	movq	%rcx, %rdi
    0000019d: 	addq	%rcx, %rbx
    000001a0: 	shlq	$0x5, %rdi
    000001a4: 	subq	%rdi, %r10
    000001a7: 	cmpq	%r11, %rcx
    000001aa: 	je	.Ltmp1073 # Offset: 426
.Ltmp1077:
    000001b0: 	movl	(%r9,%rbx,4), %ecx
    000001b4: 	leaq	(,%rbx,4), %r11
    000001bc: 	movl	%ecx, %edi
    000001be: 	andl	$0x55555555, %ecx
    000001c4: 	shrl	%edi
    000001c6: 	andl	$0x55555555, %edi
    000001cc: 	addl	%ecx, %edi
    000001ce: 	movl	%edi, %ecx
    000001d0: 	andl	$0x33333333, %edi
    000001d6: 	shrl	$0x2, %ecx
    000001d9: 	andl	$0x33333333, %ecx
    000001df: 	addl	%edi, %ecx
    000001e1: 	movl	%ecx, %edi
    000001e3: 	andl	$0xf0f0f0f, %ecx
    000001e9: 	shrl	$0x4, %edi
    000001ec: 	andl	$0x70f0f0f, %edi
    000001f2: 	addl	%ecx, %edi
    000001f4: 	movl	%edi, %ecx
    000001f6: 	andl	$0xff00ff, %edi
    000001fc: 	shrl	$0x8, %ecx
    000001ff: 	andl	$0xff00ff, %ecx
    00000205: 	addl	%edi, %ecx
    00000207: 	movl	%ecx, %edi
    00000209: 	movzwl	%cx, %ecx
    0000020c: 	shrl	$0x10, %edi
    0000020f: 	addl	%edi, %ecx
    00000211: 	addq	%rcx, %rax
    00000214: 	leaq	-0x20(%r10), %rcx
    00000218: 	cmpq	$0x1f, %rcx
    0000021c: 	jbe	.Ltmp1073 # Offset: 540
    00000222: 	movl	0x4(%r9,%r11), %ecx
    00000227: 	subq	$0x40, %r10
    0000022b: 	movl	%ecx, %edi
    0000022d: 	andl	$0x55555555, %ecx
    00000233: 	shrl	%edi
    00000235: 	andl	$0x55555555, %edi
    0000023b: 	addl	%ecx, %edi
    0000023d: 	movl	%edi, %ecx
    0000023f: 	andl	$0x33333333, %edi
    00000245: 	shrl	$0x2, %ecx
    00000248: 	andl	$0x33333333, %ecx
    0000024e: 	addl	%edi, %ecx
    00000250: 	movl	%ecx, %edi
    00000252: 	andl	$0xf0f0f0f, %ecx
    00000258: 	shrl	$0x4, %edi
    0000025b: 	andl	$0x70f0f0f, %edi
    00000261: 	addl	%ecx, %edi
    00000263: 	movl	%edi, %ecx
    00000265: 	andl	$0xff00ff, %edi
    0000026b: 	shrl	$0x8, %ecx
    0000026e: 	andl	$0xff00ff, %ecx
    00000274: 	addl	%edi, %ecx
    00000276: 	movl	%ecx, %edi
    00000278: 	movzwl	%cx, %ecx
    0000027b: 	shrl	$0x10, %edi
    0000027e: 	addl	%edi, %ecx
    00000280: 	addq	%rcx, %rax
    00000283: 	cmpq	$0x1f, %r10
    00000287: 	jbe	.Ltmp1073 # Offset: 647
    00000289: 	movl	0x8(%r9,%r11), %edi
    0000028e: 	movl	%edi, %ecx
    00000290: 	andl	$0x55555555, %edi
    00000296: 	shrl	%ecx
    00000298: 	andl	$0x55555555, %ecx
    0000029e: 	addl	%edi, %ecx
    000002a0: 	movl	%ecx, %edi
    000002a2: 	andl	$0x33333333, %ecx
    000002a8: 	shrl	$0x2, %edi
    000002ab: 	andl	$0x33333333, %edi
    000002b1: 	addl	%edi, %ecx
    000002b3: 	movl	%ecx, %edi
    000002b5: 	andl	$0xf0f0f0f, %ecx
    000002bb: 	shrl	$0x4, %edi
    000002be: 	andl	$0x70f0f0f, %edi
    000002c4: 	addl	%edi, %ecx
    000002c6: 	movl	%ecx, %edi
    000002c8: 	andl	$0xff00ff, %ecx
    000002ce: 	shrl	$0x8, %edi
    000002d1: 	andl	$0xff00ff, %edi
    000002d7: 	addl	%edi, %ecx
    000002d9: 	movl	%ecx, %edi
    000002db: 	movzwl	%cx, %ecx
    000002de: 	shrl	$0x10, %edi
    000002e1: 	addl	%edi, %ecx
    000002e3: 	addq	%rcx, %rax
.Ltmp1073:
    000002e6: 	andq	$-0x20, %rsi
    000002ea: 	andl	$0x1f, %edx
    000002ed: 	leaq	0x20(%r8,%rsi), %r8
    000002f2: 	leaq	-0x1(%rdx), %rdi
    000002f6: 	je	.Ltmp1074 # Offset: 758
.Ltmp1078:
    000002fc: 	addq	%r8, %rdi
    000002ff: 	movl	$0x1, %r10d
    00000305: 	jmp	.Ltmp1075 # Offset: 773
    00000307: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1076:
    00000310: 	movq	%rdx, %r8
.Ltmp1075:
    00000313: 	movq	%r8, %rsi
    00000316: 	movl	%r8d, %ecx
    00000319: 	movl	%r10d, %edx
    0000031c: 	shrq	$0x4, %rsi
    00000320: 	andl	$0xf, %ecx
    00000323: 	shll	%cl, %edx
    00000325: 	andw	(%r9,%rsi,2), %dx
    0000032a: 	cmpw	$0x1, %dx
    0000032e: 	leaq	0x1(%r8), %rdx
    00000332: 	sbbq	$-0x1, %rax
    00000336: 	cmpq	%rdi, %r8
    00000339: 	jne	.Ltmp1076 # Offset: 825
    0000033b: 	popq	%rbx
    0000033c: 	retq # Offset: 828
.Ltmp1066:
    0000033d: 	xorl	%eax, %eax
    0000033f: 	popq	%rbx
    00000340: 	retq # Offset: 832
    00000341: 	nopl	(%rax) # Size: 7
.Ltmp1064:
    00000348: 	xorl	%eax, %eax
    0000034a: 	retq # Offset: 842
.Ltmp1071:
    0000034b: 	movq	%rdx, %r10
    0000034e: 	jmp	.Ltmp1077 # Offset: 846
.Ltmp1070:
    00000353: 	leaq	-0x1(%rdx), %rdi
    00000357: 	jmp	.Ltmp1078 # Offset: 855
DWARF CFI Instructions:
    <empty>
End of Function "_Z20CountBits32Parallel2ItEmPT_mm"

Binary Function "_Z20CountBitsByteDirect2IhEmPT_mm" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0x123d0
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0x123d0
  Section     : .text
  Orc Section : .local.text._Z20CountBitsByteDirect2IhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp1079 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rsi, %rdi
    00000012: 	subq	%rsi, %rdx
    00000015: 	je	.Ltmp1079 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp1080 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp1081 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1082:
    00000030: 	testb	$0x7, %dil
    00000034: 	je	.Ltmp1080 # Offset: 52
.Ltmp1081:
    00000036: 	movq	%rdi, %rsi
    00000039: 	movl	%edi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x3, %rsi
    00000042: 	andl	$0x7, %ecx
    00000045: 	shll	%cl, %eax
    00000047: 	andb	(%r9,%rsi), %al
    0000004b: 	cmpb	$0x1, %al
    0000004d: 	sbbq	$-0x1, %r8
    00000051: 	addq	$0x1, %rdi
    00000055: 	subq	$0x1, %rdx
    00000059: 	jne	.Ltmp1082 # Offset: 89
.Ltmp1079:
    0000005b: 	movq	%r8, %rax
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp1080:
    00000060: 	movq	%rdi, %rax
    00000063: 	pushq	%rbp
    00000064: 	shrq	$0x3, %rax
    00000068: 	pushq	%rbx
    00000069: 	cmpq	$0x7, %rdx
    0000006d: 	jbe	.Ltmp1083 # Offset: 109
    00000073: 	leaq	-0x8(%rdx), %rbp
    00000077: 	leaq	0x1(%r9,%rax), %rbx
    0000007c: 	leaq	(%r9,%rax), %r10
    00000080: 	movq	%rbp, %rax
    00000083: 	shrq	$0x3, %rax
    00000087: 	addq	%rax, %rbx
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1084:
    00000090: 	movzbl	(%r10), %ecx
    00000094: 	movl	%ecx, %eax
    00000096: 	movl	%ecx, %r11d
    00000099: 	movq	%rcx, %rsi
    0000009c: 	shrb	%al
    0000009e: 	andl	$0x4, %r11d
    000000a2: 	andl	$0x1, %esi
    000000a5: 	andl	$0x1, %eax
    000000a8: 	cmpb	$0x1, %r11b
    000000ac: 	movl	%ecx, %r11d
    000000af: 	sbbq	$-0x1, %rsi
    000000b3: 	andl	$0x8, %r11d
    000000b7: 	cmpb	$0x1, %r11b
    000000bb: 	movl	%ecx, %r11d
    000000be: 	sbbq	$-0x1, %rax
    000000c2: 	andl	$0x10, %r11d
    000000c6: 	cmpb	$0x1, %r11b
    000000ca: 	movl	%ecx, %r11d
    000000cd: 	sbbq	$-0x1, %rsi
    000000d1: 	andl	$0x20, %r11d
    000000d5: 	cmpb	$0x1, %r11b
    000000d9: 	movl	%ecx, %r11d
    000000dc: 	sbbq	$-0x1, %rax
    000000e0: 	andl	$0x40, %r11d
    000000e4: 	cmpb	$0x1, %r11b
    000000e8: 	sbbq	$-0x1, %rsi
    000000ec: 	cmpb	$-0x80, %cl
    000000ef: 	sbbq	$-0x1, %rax
    000000f3: 	addq	$0x1, %r10
    000000f7: 	addq	%rsi, %rax
    000000fa: 	addq	%rax, %r8
    000000fd: 	cmpq	%r10, %rbx
    00000100: 	jne	.Ltmp1084 # Offset: 256
    00000102: 	andq	$-0x8, %rbp
    00000106: 	andl	$0x7, %edx
    00000109: 	leaq	0x8(%rdi,%rbp), %rdi
    0000010e: 	leaq	-0x1(%rdx), %rsi
    00000112: 	je	.Ltmp1085 # Offset: 274
.Ltmp1086:
    00000118: 	movq	%rdi, %r10
    0000011b: 	movl	%edi, %ecx
    0000011d: 	movl	$0x1, %eax
    00000122: 	andl	$0x7, %ecx
    00000125: 	shrq	$0x3, %r10
    00000129: 	movl	%eax, %edx
    0000012b: 	shll	%cl, %edx
    0000012d: 	andb	(%r9,%r10), %dl
    00000131: 	leaq	0x1(%rdi), %rcx
    00000135: 	cmpb	$0x1, %dl
    00000138: 	sbbq	$-0x1, %r8
    0000013c: 	testq	%rsi, %rsi
    0000013f: 	je	.Ltmp1085 # Offset: 319
    00000145: 	movq	%rcx, %r10
    00000148: 	movl	%eax, %edx
    0000014a: 	andl	$0x7, %ecx
    0000014d: 	shrq	$0x3, %r10
    00000151: 	shll	%cl, %edx
    00000153: 	leaq	0x2(%rdi), %rcx
    00000157: 	andb	(%r9,%r10), %dl
    0000015b: 	cmpb	$0x1, %dl
    0000015e: 	sbbq	$-0x1, %r8
    00000162: 	cmpq	$0x1, %rsi
    00000166: 	je	.Ltmp1085 # Offset: 358
    0000016c: 	movq	%rcx, %r10
    0000016f: 	movl	%eax, %edx
    00000171: 	andl	$0x7, %ecx
    00000174: 	shrq	$0x3, %r10
    00000178: 	shll	%cl, %edx
    0000017a: 	leaq	0x3(%rdi), %rcx
    0000017e: 	andb	(%r9,%r10), %dl
    00000182: 	cmpb	$0x1, %dl
    00000185: 	sbbq	$-0x1, %r8
    00000189: 	cmpq	$0x2, %rsi
    0000018d: 	je	.Ltmp1085 # Offset: 397
    0000018f: 	movq	%rcx, %r10
    00000192: 	movl	%eax, %edx
    00000194: 	andl	$0x7, %ecx
    00000197: 	shrq	$0x3, %r10
    0000019b: 	shll	%cl, %edx
    0000019d: 	leaq	0x4(%rdi), %rcx
    000001a1: 	andb	(%r9,%r10), %dl
    000001a5: 	cmpb	$0x1, %dl
    000001a8: 	sbbq	$-0x1, %r8
    000001ac: 	cmpq	$0x3, %rsi
    000001b0: 	je	.Ltmp1085 # Offset: 432
    000001b2: 	movq	%rcx, %r10
    000001b5: 	movl	%eax, %edx
    000001b7: 	andl	$0x7, %ecx
    000001ba: 	shrq	$0x3, %r10
    000001be: 	shll	%cl, %edx
    000001c0: 	leaq	0x5(%rdi), %rcx
    000001c4: 	andb	(%r9,%r10), %dl
    000001c8: 	cmpb	$0x1, %dl
    000001cb: 	sbbq	$-0x1, %r8
    000001cf: 	cmpq	$0x4, %rsi
    000001d3: 	je	.Ltmp1085 # Offset: 467
    000001d5: 	movq	%rcx, %r10
    000001d8: 	movl	%eax, %edx
    000001da: 	andl	$0x7, %ecx
    000001dd: 	shrq	$0x3, %r10
    000001e1: 	shll	%cl, %edx
    000001e3: 	leaq	0x6(%rdi), %rcx
    000001e7: 	andb	(%r9,%r10), %dl
    000001eb: 	cmpb	$0x1, %dl
    000001ee: 	sbbq	$-0x1, %r8
    000001f2: 	cmpq	$0x5, %rsi
    000001f6: 	je	.Ltmp1085 # Offset: 502
    000001f8: 	movq	%rcx, %rdx
    000001fb: 	andl	$0x7, %ecx
    000001fe: 	shrq	$0x3, %rdx
    00000202: 	shll	%cl, %eax
    00000204: 	andb	(%r9,%rdx), %al
    00000208: 	cmpb	$0x1, %al
    0000020a: 	sbbq	$-0x1, %r8
.Ltmp1085:
    0000020e: 	movq	%r8, %rax
    00000211: 	popq	%rbx
    00000212: 	popq	%rbp
    00000213: 	retq # Offset: 531
.Ltmp1083:
    00000214: 	leaq	-0x1(%rdx), %rsi
    00000218: 	jmp	.Ltmp1086 # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_Z20CountBitsByteDirect2IhEmPT_mm"

Binary Function "_Z20CountBitsByteDirect2ItEmPT_mm" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0x125f0
  Size        : 0x225
  MaxSize     : 0x230
  Offset      : 0x125f0
  Section     : .text
  Orc Section : .local.text._Z20CountBitsByteDirect2ItEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp1087 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rsi, %rdi
    00000012: 	subq	%rsi, %rdx
    00000015: 	je	.Ltmp1087 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp1088 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp1089 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1090:
    00000030: 	testb	$0x7, %dil
    00000034: 	je	.Ltmp1088 # Offset: 52
.Ltmp1089:
    00000036: 	movq	%rdi, %rsi
    00000039: 	movl	%edi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x4, %rsi
    00000042: 	andl	$0xf, %ecx
    00000045: 	shll	%cl, %eax
    00000047: 	andw	(%r9,%rsi,2), %ax
    0000004c: 	cmpw	$0x1, %ax
    00000050: 	sbbq	$-0x1, %r8
    00000054: 	addq	$0x1, %rdi
    00000058: 	subq	$0x1, %rdx
    0000005c: 	jne	.Ltmp1090 # Offset: 92
.Ltmp1087:
    0000005e: 	movq	%r8, %rax
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1088:
    00000068: 	movq	%rdi, %rax
    0000006b: 	pushq	%rbp
    0000006c: 	shrq	$0x3, %rax
    00000070: 	pushq	%rbx
    00000071: 	cmpq	$0x7, %rdx
    00000075: 	jbe	.Ltmp1091 # Offset: 117
    0000007b: 	leaq	-0x8(%rdx), %rbp
    0000007f: 	leaq	0x1(%r9,%rax), %rbx
    00000084: 	leaq	(%r9,%rax), %r10
    00000088: 	movq	%rbp, %rax
    0000008b: 	shrq	$0x3, %rax
    0000008f: 	addq	%rax, %rbx
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1092:
    00000098: 	movzbl	(%r10), %ecx
    0000009c: 	movl	%ecx, %eax
    0000009e: 	movl	%ecx, %r11d
    000000a1: 	movq	%rcx, %rsi
    000000a4: 	shrb	%al
    000000a6: 	andl	$0x4, %r11d
    000000aa: 	andl	$0x1, %esi
    000000ad: 	andl	$0x1, %eax
    000000b0: 	cmpb	$0x1, %r11b
    000000b4: 	movl	%ecx, %r11d
    000000b7: 	sbbq	$-0x1, %rsi
    000000bb: 	andl	$0x8, %r11d
    000000bf: 	cmpb	$0x1, %r11b
    000000c3: 	movl	%ecx, %r11d
    000000c6: 	sbbq	$-0x1, %rax
    000000ca: 	andl	$0x10, %r11d
    000000ce: 	cmpb	$0x1, %r11b
    000000d2: 	movl	%ecx, %r11d
    000000d5: 	sbbq	$-0x1, %rsi
    000000d9: 	andl	$0x20, %r11d
    000000dd: 	cmpb	$0x1, %r11b
    000000e1: 	movl	%ecx, %r11d
    000000e4: 	sbbq	$-0x1, %rax
    000000e8: 	andl	$0x40, %r11d
    000000ec: 	cmpb	$0x1, %r11b
    000000f0: 	sbbq	$-0x1, %rsi
    000000f4: 	cmpb	$-0x80, %cl
    000000f7: 	sbbq	$-0x1, %rax
    000000fb: 	addq	$0x1, %r10
    000000ff: 	addq	%rsi, %rax
    00000102: 	addq	%rax, %r8
    00000105: 	cmpq	%r10, %rbx
    00000108: 	jne	.Ltmp1092 # Offset: 264
    0000010a: 	andq	$-0x8, %rbp
    0000010e: 	andl	$0x7, %edx
    00000111: 	leaq	0x8(%rdi,%rbp), %rdi
    00000116: 	leaq	-0x1(%rdx), %rsi
    0000011a: 	je	.Ltmp1093 # Offset: 282
.Ltmp1094:
    00000120: 	movq	%rdi, %r10
    00000123: 	movl	%edi, %ecx
    00000125: 	movl	$0x1, %eax
    0000012a: 	andl	$0x7, %ecx
    0000012d: 	shrq	$0x3, %r10
    00000131: 	movl	%eax, %edx
    00000133: 	shll	%cl, %edx
    00000135: 	andb	(%r9,%r10), %dl
    00000139: 	leaq	0x1(%rdi), %rcx
    0000013d: 	cmpb	$0x1, %dl
    00000140: 	sbbq	$-0x1, %r8
    00000144: 	testq	%rsi, %rsi
    00000147: 	je	.Ltmp1093 # Offset: 327
    0000014d: 	movq	%rcx, %r10
    00000150: 	movl	%eax, %edx
    00000152: 	andl	$0x7, %ecx
    00000155: 	shrq	$0x3, %r10
    00000159: 	shll	%cl, %edx
    0000015b: 	leaq	0x2(%rdi), %rcx
    0000015f: 	andb	(%r9,%r10), %dl
    00000163: 	cmpb	$0x1, %dl
    00000166: 	sbbq	$-0x1, %r8
    0000016a: 	cmpq	$0x1, %rsi
    0000016e: 	je	.Ltmp1093 # Offset: 366
    00000174: 	movq	%rcx, %r10
    00000177: 	movl	%eax, %edx
    00000179: 	andl	$0x7, %ecx
    0000017c: 	shrq	$0x3, %r10
    00000180: 	shll	%cl, %edx
    00000182: 	leaq	0x3(%rdi), %rcx
    00000186: 	andb	(%r9,%r10), %dl
    0000018a: 	cmpb	$0x1, %dl
    0000018d: 	sbbq	$-0x1, %r8
    00000191: 	cmpq	$0x2, %rsi
    00000195: 	je	.Ltmp1093 # Offset: 405
    00000197: 	movq	%rcx, %r10
    0000019a: 	movl	%eax, %edx
    0000019c: 	andl	$0x7, %ecx
    0000019f: 	shrq	$0x3, %r10
    000001a3: 	shll	%cl, %edx
    000001a5: 	leaq	0x4(%rdi), %rcx
    000001a9: 	andb	(%r9,%r10), %dl
    000001ad: 	cmpb	$0x1, %dl
    000001b0: 	sbbq	$-0x1, %r8
    000001b4: 	cmpq	$0x3, %rsi
    000001b8: 	je	.Ltmp1093 # Offset: 440
    000001ba: 	movq	%rcx, %r10
    000001bd: 	movl	%eax, %edx
    000001bf: 	andl	$0x7, %ecx
    000001c2: 	shrq	$0x3, %r10
    000001c6: 	shll	%cl, %edx
    000001c8: 	leaq	0x5(%rdi), %rcx
    000001cc: 	andb	(%r9,%r10), %dl
    000001d0: 	cmpb	$0x1, %dl
    000001d3: 	sbbq	$-0x1, %r8
    000001d7: 	cmpq	$0x4, %rsi
    000001db: 	je	.Ltmp1093 # Offset: 475
    000001dd: 	movq	%rcx, %r10
    000001e0: 	movl	%eax, %edx
    000001e2: 	andl	$0x7, %ecx
    000001e5: 	shrq	$0x3, %r10
    000001e9: 	shll	%cl, %edx
    000001eb: 	leaq	0x6(%rdi), %rcx
    000001ef: 	andb	(%r9,%r10), %dl
    000001f3: 	cmpb	$0x1, %dl
    000001f6: 	sbbq	$-0x1, %r8
    000001fa: 	cmpq	$0x5, %rsi
    000001fe: 	je	.Ltmp1093 # Offset: 510
    00000200: 	movq	%rcx, %rdx
    00000203: 	andl	$0x7, %ecx
    00000206: 	shrq	$0x3, %rdx
    0000020a: 	shll	%cl, %eax
    0000020c: 	andb	(%r9,%rdx), %al
    00000210: 	cmpb	$0x1, %al
    00000212: 	sbbq	$-0x1, %r8
.Ltmp1093:
    00000216: 	movq	%r8, %rax
    00000219: 	popq	%rbx
    0000021a: 	popq	%rbp
    0000021b: 	retq # Offset: 539
.Ltmp1091:
    0000021c: 	leaq	-0x1(%rdx), %rsi
    00000220: 	jmp	.Ltmp1094 # Offset: 544
DWARF CFI Instructions:
    <empty>
End of Function "_Z20CountBitsByteDirect2ItEmPT_mm"

Binary Function "_Z20CountBitsByteDirect2IjEmPT_mm" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0x12820
  Size        : 0x21e
  MaxSize     : 0x220
  Offset      : 0x12820
  Section     : .text
  Orc Section : .local.text._Z20CountBitsByteDirect2IjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	xorl	%r9d, %r9d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp1095 # Offset: 10
    0000000c: 	movq	%rsi, %r8
    0000000f: 	subq	%rsi, %rdx
    00000012: 	je	.Ltmp1095 # Offset: 18
    00000014: 	movq	%rsi, %r9
    00000017: 	movq	%rdi, %r10
    0000001a: 	andl	$0x7, %r9d
    0000001e: 	je	.Ltmp1096 # Offset: 30
    00000020: 	xorl	%r9d, %r9d
    00000023: 	movl	$0x1, %edi
    00000028: 	jmp	.Ltmp1097 # Offset: 40
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1098:
    00000030: 	testb	$0x7, %r8b
    00000034: 	je	.Ltmp1096 # Offset: 52
.Ltmp1097:
    00000036: 	movq	%r8, %rsi
    00000039: 	movl	%r8d, %ecx
    0000003c: 	movl	%edi, %eax
    0000003e: 	shrq	$0x5, %rsi
    00000042: 	shll	%cl, %eax
    00000044: 	andl	(%r10,%rsi,4), %eax
    00000048: 	cmpl	$0x1, %eax
    0000004b: 	sbbq	$-0x1, %r9
    0000004f: 	addq	$0x1, %r8
    00000053: 	subq	$0x1, %rdx
    00000057: 	jne	.Ltmp1098 # Offset: 87
.Ltmp1095:
    00000059: 	movq	%r9, %rax
    0000005c: 	retq # Offset: 92
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1096:
    00000060: 	movq	%r8, %rax
    00000063: 	pushq	%rbp
    00000064: 	shrq	$0x3, %rax
    00000068: 	pushq	%rbx
    00000069: 	cmpq	$0x7, %rdx
    0000006d: 	jbe	.Ltmp1099 # Offset: 109
    00000073: 	leaq	-0x8(%rdx), %rbp
    00000077: 	leaq	0x1(%r10,%rax), %rbx
    0000007c: 	leaq	(%r10,%rax), %rcx
    00000080: 	movq	%rbp, %rax
    00000083: 	shrq	$0x3, %rax
    00000087: 	addq	%rax, %rbx
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1100:
    00000090: 	movzbl	(%rcx), %esi
    00000093: 	movl	%esi, %eax
    00000095: 	movl	%esi, %r11d
    00000098: 	movq	%rsi, %rdi
    0000009b: 	shrb	%al
    0000009d: 	andl	$0x4, %r11d
    000000a1: 	andl	$0x1, %edi
    000000a4: 	andl	$0x1, %eax
    000000a7: 	cmpb	$0x1, %r11b
    000000ab: 	movl	%esi, %r11d
    000000ae: 	sbbq	$-0x1, %rdi
    000000b2: 	andl	$0x8, %r11d
    000000b6: 	cmpb	$0x1, %r11b
    000000ba: 	movl	%esi, %r11d
    000000bd: 	sbbq	$-0x1, %rax
    000000c1: 	andl	$0x10, %r11d
    000000c5: 	cmpb	$0x1, %r11b
    000000c9: 	movl	%esi, %r11d
    000000cc: 	sbbq	$-0x1, %rdi
    000000d0: 	andl	$0x20, %r11d
    000000d4: 	cmpb	$0x1, %r11b
    000000d8: 	movl	%esi, %r11d
    000000db: 	sbbq	$-0x1, %rax
    000000df: 	andl	$0x40, %r11d
    000000e3: 	cmpb	$0x1, %r11b
    000000e7: 	sbbq	$-0x1, %rdi
    000000eb: 	cmpb	$-0x80, %sil
    000000ef: 	sbbq	$-0x1, %rax
    000000f3: 	addq	$0x1, %rcx
    000000f7: 	addq	%rdi, %rax
    000000fa: 	addq	%rax, %r9
    000000fd: 	cmpq	%rcx, %rbx
    00000100: 	jne	.Ltmp1100 # Offset: 256
    00000102: 	andq	$-0x8, %rbp
    00000106: 	andl	$0x7, %edx
    00000109: 	leaq	0x8(%r8,%rbp), %r8
    0000010e: 	leaq	-0x1(%rdx), %rsi
    00000112: 	je	.Ltmp1101 # Offset: 274
.Ltmp1102:
    00000118: 	movq	%r8, %rdi
    0000011b: 	movl	%r8d, %ecx
    0000011e: 	movl	$0x1, %eax
    00000123: 	andl	$0x7, %ecx
    00000126: 	shrq	$0x3, %rdi
    0000012a: 	movl	%eax, %edx
    0000012c: 	shll	%cl, %edx
    0000012e: 	andb	(%r10,%rdi), %dl
    00000132: 	leaq	0x1(%r8), %rcx
    00000136: 	cmpb	$0x1, %dl
    00000139: 	sbbq	$-0x1, %r9
    0000013d: 	testq	%rsi, %rsi
    00000140: 	je	.Ltmp1101 # Offset: 320
    00000146: 	movq	%rcx, %rdi
    00000149: 	movl	%eax, %edx
    0000014b: 	andl	$0x7, %ecx
    0000014e: 	shrq	$0x3, %rdi
    00000152: 	shll	%cl, %edx
    00000154: 	leaq	0x2(%r8), %rcx
    00000158: 	andb	(%r10,%rdi), %dl
    0000015c: 	cmpb	$0x1, %dl
    0000015f: 	sbbq	$-0x1, %r9
    00000163: 	cmpq	$0x1, %rsi
    00000167: 	je	.Ltmp1101 # Offset: 359
    0000016d: 	movq	%rcx, %rdi
    00000170: 	movl	%eax, %edx
    00000172: 	andl	$0x7, %ecx
    00000175: 	shrq	$0x3, %rdi
    00000179: 	shll	%cl, %edx
    0000017b: 	leaq	0x3(%r8), %rcx
    0000017f: 	andb	(%r10,%rdi), %dl
    00000183: 	cmpb	$0x1, %dl
    00000186: 	sbbq	$-0x1, %r9
    0000018a: 	cmpq	$0x2, %rsi
    0000018e: 	je	.Ltmp1101 # Offset: 398
    00000190: 	movq	%rcx, %rdi
    00000193: 	movl	%eax, %edx
    00000195: 	andl	$0x7, %ecx
    00000198: 	shrq	$0x3, %rdi
    0000019c: 	shll	%cl, %edx
    0000019e: 	leaq	0x4(%r8), %rcx
    000001a2: 	andb	(%r10,%rdi), %dl
    000001a6: 	cmpb	$0x1, %dl
    000001a9: 	sbbq	$-0x1, %r9
    000001ad: 	cmpq	$0x3, %rsi
    000001b1: 	je	.Ltmp1101 # Offset: 433
    000001b3: 	movq	%rcx, %rdi
    000001b6: 	movl	%eax, %edx
    000001b8: 	andl	$0x7, %ecx
    000001bb: 	shrq	$0x3, %rdi
    000001bf: 	shll	%cl, %edx
    000001c1: 	leaq	0x5(%r8), %rcx
    000001c5: 	andb	(%r10,%rdi), %dl
    000001c9: 	cmpb	$0x1, %dl
    000001cc: 	sbbq	$-0x1, %r9
    000001d0: 	cmpq	$0x4, %rsi
    000001d4: 	je	.Ltmp1101 # Offset: 468
    000001d6: 	movq	%rcx, %rdi
    000001d9: 	movl	%eax, %edx
    000001db: 	andl	$0x7, %ecx
    000001de: 	shrq	$0x3, %rdi
    000001e2: 	shll	%cl, %edx
    000001e4: 	leaq	0x6(%r8), %rcx
    000001e8: 	andb	(%r10,%rdi), %dl
    000001ec: 	cmpb	$0x1, %dl
    000001ef: 	sbbq	$-0x1, %r9
    000001f3: 	cmpq	$0x5, %rsi
    000001f7: 	je	.Ltmp1101 # Offset: 503
    000001f9: 	movq	%rcx, %rdx
    000001fc: 	andl	$0x7, %ecx
    000001ff: 	shrq	$0x3, %rdx
    00000203: 	shll	%cl, %eax
    00000205: 	andb	(%r10,%rdx), %al
    00000209: 	cmpb	$0x1, %al
    0000020b: 	sbbq	$-0x1, %r9
.Ltmp1101:
    0000020f: 	movq	%r9, %rax
    00000212: 	popq	%rbx
    00000213: 	popq	%rbp
    00000214: 	retq # Offset: 532
.Ltmp1099:
    00000215: 	leaq	-0x1(%rdx), %rsi
    00000219: 	jmp	.Ltmp1102 # Offset: 537
DWARF CFI Instructions:
    <empty>
End of Function "_Z20CountBitsByteDirect2IjEmPT_mm"

Binary Function "_Z19CountBitsByteDirectIhEmPT_mm" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0x12a40
  Size        : 0x220
  MaxSize     : 0x220
  Offset      : 0x12a40
  Section     : .text
  Orc Section : .local.text._Z19CountBitsByteDirectIhEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp1103 # Offset: 10
    0000000c: 	subq	%rsi, %rdx
    0000000f: 	je	.Ltmp1103 # Offset: 15
    00000011: 	movq	%rsi, %r8
    00000014: 	movq	%rdi, %r9
    00000017: 	andl	$0x7, %r8d
    0000001b: 	je	.Ltmp1104 # Offset: 27
    0000001d: 	xorl	%r8d, %r8d
    00000020: 	movl	$0x1, %r10d
    00000026: 	jmp	.Ltmp1105 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1106:
    00000030: 	testb	$0x7, %sil
    00000034: 	je	.Ltmp1104 # Offset: 52
.Ltmp1105:
    00000036: 	movq	%rsi, %rdi
    00000039: 	movl	%esi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x3, %rdi
    00000042: 	andl	$0x7, %ecx
    00000045: 	shll	%cl, %eax
    00000047: 	andb	(%r9,%rdi), %al
    0000004b: 	cmpb	$0x1, %al
    0000004d: 	sbbq	$-0x1, %r8
    00000051: 	addq	$0x1, %rsi
    00000055: 	subq	$0x1, %rdx
    00000059: 	jne	.Ltmp1106 # Offset: 89
.Ltmp1103:
    0000005b: 	movq	%r8, %rax
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp1104:
    00000060: 	movq	%rsi, %rax
    00000063: 	pushq	%rbx
    00000064: 	shrq	$0x3, %rax
    00000068: 	cmpq	$0x7, %rdx
    0000006c: 	jbe	.Ltmp1107 # Offset: 108
    00000072: 	leaq	-0x8(%rdx), %rbx
    00000076: 	leaq	0x1(%r9,%rax), %r11
    0000007b: 	leaq	(%r9,%rax), %rdi
    0000007f: 	movq	%rbx, %rax
    00000082: 	shrq	$0x3, %rax
    00000086: 	addq	%rax, %r11
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1108:
    00000090: 	movzbl	(%rdi), %ecx
    00000093: 	movl	%ecx, %r10d
    00000096: 	movq	%rcx, %rax
    00000099: 	andl	$0x2, %r10d
    0000009d: 	andl	$0x1, %eax
    000000a0: 	cmpb	$0x1, %r10b
    000000a4: 	movl	%ecx, %r10d
    000000a7: 	sbbq	$-0x1, %rax
    000000ab: 	andl	$0x4, %r10d
    000000af: 	cmpb	$0x1, %r10b
    000000b3: 	movl	%ecx, %r10d
    000000b6: 	sbbq	$-0x1, %rax
    000000ba: 	andl	$0x8, %r10d
    000000be: 	cmpb	$0x1, %r10b
    000000c2: 	movl	%ecx, %r10d
    000000c5: 	sbbq	$-0x1, %rax
    000000c9: 	andl	$0x10, %r10d
    000000cd: 	cmpb	$0x1, %r10b
    000000d1: 	movl	%ecx, %r10d
    000000d4: 	sbbq	$-0x1, %rax
    000000d8: 	andl	$0x20, %r10d
    000000dc: 	cmpb	$0x1, %r10b
    000000e0: 	movl	%ecx, %r10d
    000000e3: 	sbbq	$-0x1, %rax
    000000e7: 	andl	$0x40, %r10d
    000000eb: 	cmpb	$0x1, %r10b
    000000ef: 	sbbq	$-0x1, %rax
    000000f3: 	cmpb	$-0x80, %cl
    000000f6: 	sbbq	$-0x1, %rax
    000000fa: 	addq	$0x1, %rdi
    000000fe: 	addq	%rax, %r8
    00000101: 	cmpq	%rdi, %r11
    00000104: 	jne	.Ltmp1108 # Offset: 260
    00000106: 	andq	$-0x8, %rbx
    0000010a: 	andl	$0x7, %edx
    0000010d: 	leaq	0x8(%rsi,%rbx), %rsi
    00000112: 	leaq	-0x1(%rdx), %rdi
    00000116: 	je	.Ltmp1109 # Offset: 278
.Ltmp1110:
    0000011c: 	movq	%rsi, %r10
    0000011f: 	movl	%esi, %ecx
    00000121: 	movl	$0x1, %eax
    00000126: 	andl	$0x7, %ecx
    00000129: 	shrq	$0x3, %r10
    0000012d: 	movl	%eax, %edx
    0000012f: 	shll	%cl, %edx
    00000131: 	andb	(%r9,%r10), %dl
    00000135: 	leaq	0x1(%rsi), %rcx
    00000139: 	cmpb	$0x1, %dl
    0000013c: 	sbbq	$-0x1, %r8
    00000140: 	testq	%rdi, %rdi
    00000143: 	je	.Ltmp1109 # Offset: 323
    00000149: 	movq	%rcx, %r10
    0000014c: 	movl	%eax, %edx
    0000014e: 	andl	$0x7, %ecx
    00000151: 	shrq	$0x3, %r10
    00000155: 	shll	%cl, %edx
    00000157: 	leaq	0x2(%rsi), %rcx
    0000015b: 	andb	(%r9,%r10), %dl
    0000015f: 	cmpb	$0x1, %dl
    00000162: 	sbbq	$-0x1, %r8
    00000166: 	cmpq	$0x1, %rdi
    0000016a: 	je	.Ltmp1109 # Offset: 362
    00000170: 	movq	%rcx, %r10
    00000173: 	movl	%eax, %edx
    00000175: 	andl	$0x7, %ecx
    00000178: 	shrq	$0x3, %r10
    0000017c: 	shll	%cl, %edx
    0000017e: 	leaq	0x3(%rsi), %rcx
    00000182: 	andb	(%r9,%r10), %dl
    00000186: 	cmpb	$0x1, %dl
    00000189: 	sbbq	$-0x1, %r8
    0000018d: 	cmpq	$0x2, %rdi
    00000191: 	je	.Ltmp1109 # Offset: 401
    00000193: 	movq	%rcx, %r10
    00000196: 	movl	%eax, %edx
    00000198: 	andl	$0x7, %ecx
    0000019b: 	shrq	$0x3, %r10
    0000019f: 	shll	%cl, %edx
    000001a1: 	leaq	0x4(%rsi), %rcx
    000001a5: 	andb	(%r9,%r10), %dl
    000001a9: 	cmpb	$0x1, %dl
    000001ac: 	sbbq	$-0x1, %r8
    000001b0: 	cmpq	$0x3, %rdi
    000001b4: 	je	.Ltmp1109 # Offset: 436
    000001b6: 	movq	%rcx, %r10
    000001b9: 	movl	%eax, %edx
    000001bb: 	andl	$0x7, %ecx
    000001be: 	shrq	$0x3, %r10
    000001c2: 	shll	%cl, %edx
    000001c4: 	leaq	0x5(%rsi), %rcx
    000001c8: 	andb	(%r9,%r10), %dl
    000001cc: 	cmpb	$0x1, %dl
    000001cf: 	sbbq	$-0x1, %r8
    000001d3: 	cmpq	$0x4, %rdi
    000001d7: 	je	.Ltmp1109 # Offset: 471
    000001d9: 	movq	%rcx, %r10
    000001dc: 	movl	%eax, %edx
    000001de: 	andl	$0x7, %ecx
    000001e1: 	shrq	$0x3, %r10
    000001e5: 	shll	%cl, %edx
    000001e7: 	leaq	0x6(%rsi), %rcx
    000001eb: 	andb	(%r9,%r10), %dl
    000001ef: 	cmpb	$0x1, %dl
    000001f2: 	sbbq	$-0x1, %r8
    000001f6: 	cmpq	$0x5, %rdi
    000001fa: 	je	.Ltmp1109 # Offset: 506
    000001fc: 	movq	%rcx, %rdx
    000001ff: 	andl	$0x7, %ecx
    00000202: 	shrq	$0x3, %rdx
    00000206: 	shll	%cl, %eax
    00000208: 	andb	(%r9,%rdx), %al
    0000020c: 	cmpb	$0x1, %al
    0000020e: 	sbbq	$-0x1, %r8
.Ltmp1109:
    00000212: 	movq	%r8, %rax
    00000215: 	popq	%rbx
    00000216: 	retq # Offset: 534
.Ltmp1107:
    00000217: 	leaq	-0x1(%rdx), %rdi
    0000021b: 	jmp	.Ltmp1110 # Offset: 539
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBitsByteDirectIhEmPT_mm"

Binary Function "_Z19CountBitsByteDirectIjEmPT_mm" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0x12c60
  Size        : 0x221
  MaxSize     : 0x230
  Offset      : 0x12c60
  Section     : .text
  Orc Section : .local.text._Z19CountBitsByteDirectIjEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp1111 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rsi, %rdi
    00000012: 	subq	%rsi, %rdx
    00000015: 	je	.Ltmp1111 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp1112 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp1113 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1114:
    00000030: 	testb	$0x7, %dil
    00000034: 	je	.Ltmp1112 # Offset: 52
.Ltmp1113:
    00000036: 	movq	%rdi, %rsi
    00000039: 	movl	%edi, %ecx
    0000003b: 	movl	%r10d, %eax
    0000003e: 	shrq	$0x5, %rsi
    00000042: 	shll	%cl, %eax
    00000044: 	andl	(%r9,%rsi,4), %eax
    00000048: 	cmpl	$0x1, %eax
    0000004b: 	sbbq	$-0x1, %r8
    0000004f: 	addq	$0x1, %rdi
    00000053: 	subq	$0x1, %rdx
    00000057: 	jne	.Ltmp1114 # Offset: 87
.Ltmp1111:
    00000059: 	movq	%r8, %rax
    0000005c: 	retq # Offset: 92
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1112:
    00000060: 	movq	%rdi, %rax
    00000063: 	pushq	%rbx
    00000064: 	shrq	$0x3, %rax
    00000068: 	cmpq	$0x7, %rdx
    0000006c: 	jbe	.Ltmp1115 # Offset: 108
    00000072: 	leaq	-0x8(%rdx), %rbx
    00000076: 	leaq	0x1(%r9,%rax), %r11
    0000007b: 	leaq	(%r9,%rax), %rcx
    0000007f: 	movq	%rbx, %rax
    00000082: 	shrq	$0x3, %rax
    00000086: 	addq	%rax, %r11
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1116:
    00000090: 	movzbl	(%rcx), %esi
    00000093: 	movl	%esi, %r10d
    00000096: 	movq	%rsi, %rax
    00000099: 	andl	$0x2, %r10d
    0000009d: 	andl	$0x1, %eax
    000000a0: 	cmpb	$0x1, %r10b
    000000a4: 	movl	%esi, %r10d
    000000a7: 	sbbq	$-0x1, %rax
    000000ab: 	andl	$0x4, %r10d
    000000af: 	cmpb	$0x1, %r10b
    000000b3: 	movl	%esi, %r10d
    000000b6: 	sbbq	$-0x1, %rax
    000000ba: 	andl	$0x8, %r10d
    000000be: 	cmpb	$0x1, %r10b
    000000c2: 	movl	%esi, %r10d
    000000c5: 	sbbq	$-0x1, %rax
    000000c9: 	andl	$0x10, %r10d
    000000cd: 	cmpb	$0x1, %r10b
    000000d1: 	movl	%esi, %r10d
    000000d4: 	sbbq	$-0x1, %rax
    000000d8: 	andl	$0x20, %r10d
    000000dc: 	cmpb	$0x1, %r10b
    000000e0: 	movl	%esi, %r10d
    000000e3: 	sbbq	$-0x1, %rax
    000000e7: 	andl	$0x40, %r10d
    000000eb: 	cmpb	$0x1, %r10b
    000000ef: 	sbbq	$-0x1, %rax
    000000f3: 	cmpb	$-0x80, %sil
    000000f7: 	sbbq	$-0x1, %rax
    000000fb: 	addq	$0x1, %rcx
    000000ff: 	addq	%rax, %r8
    00000102: 	cmpq	%rcx, %r11
    00000105: 	jne	.Ltmp1116 # Offset: 261
    00000107: 	andq	$-0x8, %rbx
    0000010b: 	andl	$0x7, %edx
    0000010e: 	leaq	0x8(%rdi,%rbx), %rdi
    00000113: 	leaq	-0x1(%rdx), %rsi
    00000117: 	je	.Ltmp1117 # Offset: 279
.Ltmp1118:
    0000011d: 	movq	%rdi, %r10
    00000120: 	movl	%edi, %ecx
    00000122: 	movl	$0x1, %eax
    00000127: 	andl	$0x7, %ecx
    0000012a: 	shrq	$0x3, %r10
    0000012e: 	movl	%eax, %edx
    00000130: 	shll	%cl, %edx
    00000132: 	andb	(%r9,%r10), %dl
    00000136: 	leaq	0x1(%rdi), %rcx
    0000013a: 	cmpb	$0x1, %dl
    0000013d: 	sbbq	$-0x1, %r8
    00000141: 	testq	%rsi, %rsi
    00000144: 	je	.Ltmp1117 # Offset: 324
    0000014a: 	movq	%rcx, %r10
    0000014d: 	movl	%eax, %edx
    0000014f: 	andl	$0x7, %ecx
    00000152: 	shrq	$0x3, %r10
    00000156: 	shll	%cl, %edx
    00000158: 	leaq	0x2(%rdi), %rcx
    0000015c: 	andb	(%r9,%r10), %dl
    00000160: 	cmpb	$0x1, %dl
    00000163: 	sbbq	$-0x1, %r8
    00000167: 	cmpq	$0x1, %rsi
    0000016b: 	je	.Ltmp1117 # Offset: 363
    00000171: 	movq	%rcx, %r10
    00000174: 	movl	%eax, %edx
    00000176: 	andl	$0x7, %ecx
    00000179: 	shrq	$0x3, %r10
    0000017d: 	shll	%cl, %edx
    0000017f: 	leaq	0x3(%rdi), %rcx
    00000183: 	andb	(%r9,%r10), %dl
    00000187: 	cmpb	$0x1, %dl
    0000018a: 	sbbq	$-0x1, %r8
    0000018e: 	cmpq	$0x2, %rsi
    00000192: 	je	.Ltmp1117 # Offset: 402
    00000194: 	movq	%rcx, %r10
    00000197: 	movl	%eax, %edx
    00000199: 	andl	$0x7, %ecx
    0000019c: 	shrq	$0x3, %r10
    000001a0: 	shll	%cl, %edx
    000001a2: 	leaq	0x4(%rdi), %rcx
    000001a6: 	andb	(%r9,%r10), %dl
    000001aa: 	cmpb	$0x1, %dl
    000001ad: 	sbbq	$-0x1, %r8
    000001b1: 	cmpq	$0x3, %rsi
    000001b5: 	je	.Ltmp1117 # Offset: 437
    000001b7: 	movq	%rcx, %r10
    000001ba: 	movl	%eax, %edx
    000001bc: 	andl	$0x7, %ecx
    000001bf: 	shrq	$0x3, %r10
    000001c3: 	shll	%cl, %edx
    000001c5: 	leaq	0x5(%rdi), %rcx
    000001c9: 	andb	(%r9,%r10), %dl
    000001cd: 	cmpb	$0x1, %dl
    000001d0: 	sbbq	$-0x1, %r8
    000001d4: 	cmpq	$0x4, %rsi
    000001d8: 	je	.Ltmp1117 # Offset: 472
    000001da: 	movq	%rcx, %r10
    000001dd: 	movl	%eax, %edx
    000001df: 	andl	$0x7, %ecx
    000001e2: 	shrq	$0x3, %r10
    000001e6: 	shll	%cl, %edx
    000001e8: 	leaq	0x6(%rdi), %rcx
    000001ec: 	andb	(%r9,%r10), %dl
    000001f0: 	cmpb	$0x1, %dl
    000001f3: 	sbbq	$-0x1, %r8
    000001f7: 	cmpq	$0x5, %rsi
    000001fb: 	je	.Ltmp1117 # Offset: 507
    000001fd: 	movq	%rcx, %rdx
    00000200: 	andl	$0x7, %ecx
    00000203: 	shrq	$0x3, %rdx
    00000207: 	shll	%cl, %eax
    00000209: 	andb	(%r9,%rdx), %al
    0000020d: 	cmpb	$0x1, %al
    0000020f: 	sbbq	$-0x1, %r8
.Ltmp1117:
    00000213: 	movq	%r8, %rax
    00000216: 	popq	%rbx
    00000217: 	retq # Offset: 535
.Ltmp1115:
    00000218: 	leaq	-0x1(%rdx), %rsi
    0000021c: 	jmp	.Ltmp1118 # Offset: 540
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBitsByteDirectIjEmPT_mm"

Binary Function "_Z19CountBitsByteDirectImEmPT_mm" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0x12e90
  Size        : 0x221
  MaxSize     : 0x230
  Offset      : 0x12e90
  Section     : .text
  Orc Section : .local.text._Z19CountBitsByteDirectImEmPT_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	%rsi, %rdx
    0000000a: 	jb	.Ltmp1119 # Offset: 10
    0000000c: 	movq	%rdi, %r9
    0000000f: 	movq	%rsi, %rdi
    00000012: 	subq	%rsi, %rdx
    00000015: 	je	.Ltmp1119 # Offset: 21
    00000017: 	movq	%rsi, %r8
    0000001a: 	andl	$0x7, %r8d
    0000001e: 	je	.Ltmp1120 # Offset: 30
    00000020: 	xorl	%r8d, %r8d
    00000023: 	movl	$0x1, %r10d
    00000029: 	jmp	.Ltmp1121 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1122:
    00000030: 	testb	$0x7, %dil
    00000034: 	je	.Ltmp1120 # Offset: 52
.Ltmp1121:
    00000036: 	movq	%rdi, %rsi
    00000039: 	movl	%edi, %ecx
    0000003b: 	movq	%r10, %rax
    0000003e: 	shrq	$0x6, %rsi
    00000042: 	shlq	%cl, %rax
    00000045: 	andq	(%r9,%rsi,8), %rax
    00000049: 	cmpq	$0x1, %rax
    0000004d: 	sbbq	$-0x1, %r8
    00000051: 	addq	$0x1, %rdi
    00000055: 	subq	$0x1, %rdx
    00000059: 	jne	.Ltmp1122 # Offset: 89
.Ltmp1119:
    0000005b: 	movq	%r8, %rax
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp1120:
    00000060: 	movq	%rdi, %rax
    00000063: 	pushq	%rbx
    00000064: 	shrq	$0x3, %rax
    00000068: 	cmpq	$0x7, %rdx
    0000006c: 	jbe	.Ltmp1123 # Offset: 108
    00000072: 	leaq	-0x8(%rdx), %rbx
    00000076: 	leaq	0x1(%r9,%rax), %r11
    0000007b: 	leaq	(%r9,%rax), %rcx
    0000007f: 	movq	%rbx, %rax
    00000082: 	shrq	$0x3, %rax
    00000086: 	addq	%rax, %r11
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1124:
    00000090: 	movzbl	(%rcx), %esi
    00000093: 	movl	%esi, %r10d
    00000096: 	movq	%rsi, %rax
    00000099: 	andl	$0x2, %r10d
    0000009d: 	andl	$0x1, %eax
    000000a0: 	cmpb	$0x1, %r10b
    000000a4: 	movl	%esi, %r10d
    000000a7: 	sbbq	$-0x1, %rax
    000000ab: 	andl	$0x4, %r10d
    000000af: 	cmpb	$0x1, %r10b
    000000b3: 	movl	%esi, %r10d
    000000b6: 	sbbq	$-0x1, %rax
    000000ba: 	andl	$0x8, %r10d
    000000be: 	cmpb	$0x1, %r10b
    000000c2: 	movl	%esi, %r10d
    000000c5: 	sbbq	$-0x1, %rax
    000000c9: 	andl	$0x10, %r10d
    000000cd: 	cmpb	$0x1, %r10b
    000000d1: 	movl	%esi, %r10d
    000000d4: 	sbbq	$-0x1, %rax
    000000d8: 	andl	$0x20, %r10d
    000000dc: 	cmpb	$0x1, %r10b
    000000e0: 	movl	%esi, %r10d
    000000e3: 	sbbq	$-0x1, %rax
    000000e7: 	andl	$0x40, %r10d
    000000eb: 	cmpb	$0x1, %r10b
    000000ef: 	sbbq	$-0x1, %rax
    000000f3: 	cmpb	$-0x80, %sil
    000000f7: 	sbbq	$-0x1, %rax
    000000fb: 	addq	$0x1, %rcx
    000000ff: 	addq	%rax, %r8
    00000102: 	cmpq	%rcx, %r11
    00000105: 	jne	.Ltmp1124 # Offset: 261
    00000107: 	andq	$-0x8, %rbx
    0000010b: 	andl	$0x7, %edx
    0000010e: 	leaq	0x8(%rdi,%rbx), %rdi
    00000113: 	leaq	-0x1(%rdx), %rsi
    00000117: 	je	.Ltmp1125 # Offset: 279
.Ltmp1126:
    0000011d: 	movq	%rdi, %r10
    00000120: 	movl	%edi, %ecx
    00000122: 	movl	$0x1, %eax
    00000127: 	andl	$0x7, %ecx
    0000012a: 	shrq	$0x3, %r10
    0000012e: 	movl	%eax, %edx
    00000130: 	shll	%cl, %edx
    00000132: 	andb	(%r9,%r10), %dl
    00000136: 	leaq	0x1(%rdi), %rcx
    0000013a: 	cmpb	$0x1, %dl
    0000013d: 	sbbq	$-0x1, %r8
    00000141: 	testq	%rsi, %rsi
    00000144: 	je	.Ltmp1125 # Offset: 324
    0000014a: 	movq	%rcx, %r10
    0000014d: 	movl	%eax, %edx
    0000014f: 	andl	$0x7, %ecx
    00000152: 	shrq	$0x3, %r10
    00000156: 	shll	%cl, %edx
    00000158: 	leaq	0x2(%rdi), %rcx
    0000015c: 	andb	(%r9,%r10), %dl
    00000160: 	cmpb	$0x1, %dl
    00000163: 	sbbq	$-0x1, %r8
    00000167: 	cmpq	$0x1, %rsi
    0000016b: 	je	.Ltmp1125 # Offset: 363
    00000171: 	movq	%rcx, %r10
    00000174: 	movl	%eax, %edx
    00000176: 	andl	$0x7, %ecx
    00000179: 	shrq	$0x3, %r10
    0000017d: 	shll	%cl, %edx
    0000017f: 	leaq	0x3(%rdi), %rcx
    00000183: 	andb	(%r9,%r10), %dl
    00000187: 	cmpb	$0x1, %dl
    0000018a: 	sbbq	$-0x1, %r8
    0000018e: 	cmpq	$0x2, %rsi
    00000192: 	je	.Ltmp1125 # Offset: 402
    00000194: 	movq	%rcx, %r10
    00000197: 	movl	%eax, %edx
    00000199: 	andl	$0x7, %ecx
    0000019c: 	shrq	$0x3, %r10
    000001a0: 	shll	%cl, %edx
    000001a2: 	leaq	0x4(%rdi), %rcx
    000001a6: 	andb	(%r9,%r10), %dl
    000001aa: 	cmpb	$0x1, %dl
    000001ad: 	sbbq	$-0x1, %r8
    000001b1: 	cmpq	$0x3, %rsi
    000001b5: 	je	.Ltmp1125 # Offset: 437
    000001b7: 	movq	%rcx, %r10
    000001ba: 	movl	%eax, %edx
    000001bc: 	andl	$0x7, %ecx
    000001bf: 	shrq	$0x3, %r10
    000001c3: 	shll	%cl, %edx
    000001c5: 	leaq	0x5(%rdi), %rcx
    000001c9: 	andb	(%r9,%r10), %dl
    000001cd: 	cmpb	$0x1, %dl
    000001d0: 	sbbq	$-0x1, %r8
    000001d4: 	cmpq	$0x4, %rsi
    000001d8: 	je	.Ltmp1125 # Offset: 472
    000001da: 	movq	%rcx, %r10
    000001dd: 	movl	%eax, %edx
    000001df: 	andl	$0x7, %ecx
    000001e2: 	shrq	$0x3, %r10
    000001e6: 	shll	%cl, %edx
    000001e8: 	leaq	0x6(%rdi), %rcx
    000001ec: 	andb	(%r9,%r10), %dl
    000001f0: 	cmpb	$0x1, %dl
    000001f3: 	sbbq	$-0x1, %r8
    000001f7: 	cmpq	$0x5, %rsi
    000001fb: 	je	.Ltmp1125 # Offset: 507
    000001fd: 	movq	%rcx, %rdx
    00000200: 	andl	$0x7, %ecx
    00000203: 	shrq	$0x3, %rdx
    00000207: 	shll	%cl, %eax
    00000209: 	andb	(%r9,%rdx), %al
    0000020d: 	cmpb	$0x1, %al
    0000020f: 	sbbq	$-0x1, %r8
.Ltmp1125:
    00000213: 	movq	%r8, %rax
    00000216: 	popq	%rbx
    00000217: 	retq # Offset: 535
.Ltmp1123:
    00000218: 	leaq	-0x1(%rdx), %rsi
    0000021c: 	jmp	.Ltmp1126 # Offset: 540
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CountBitsByteDirectImEmPT_mm"

Binary Function "_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0x130c0
  Size        : 0x102
  MaxSize     : 0x110
  Offset      : 0x130c0
  Section     : .text
  Orc Section : .local.text._Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r9, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r8, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rsi, %rbx
    0000001d: 	subq	$0x18, %rsp
    00000021: 	movq	%rcx, 0x8(%rsp)
    00000026: 	callq	clock@PLT # Offset: 38
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	movl	iterations(%rip), %eax
    00000038: 	testl	%eax, %eax
    0000003a: 	jle	.Ltmp1127 # Offset: 58
    0000003c: 	xorl	%r15d, %r15d
    0000003f: 	nop # Size: 1
.Ltmp1128:
    00000040: 	movq	%rbp, %rdx
    00000043: 	movq	%rbx, %rsi
    00000046: 	movq	%r12, %rdi
    00000049: 	addl	$0x1, %r15d
    0000004d: 	callq	*%r13 # Offset: 77
    00000050: 	cmpl	%r15d, iterations(%rip)
    00000057: 	jg	.Ltmp1128 # Offset: 87
.Ltmp1127:
    00000059: 	callq	clock@PLT # Offset: 89
    0000005e: 	pxor	%xmm0, %xmm0
    00000062: 	movq	%r14, %rdi
    00000065: 	movq	%rax, end_time(%rip)
    0000006c: 	subq	start_time(%rip), %rax
    00000073: 	cvtsi2sd	%rax, %xmm0
    00000078: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000080: 	callq	_Z13record_resultdPKc # Offset: 128
    00000085: 	xorl	%r9d, %r9d
    00000088: 	cmpq	%rbp, %rbx
    0000008b: 	ja	.Ltmp1129 # Offset: 139
    0000008d: 	je	.Ltmp1129 # Offset: 141
    0000008f: 	movl	$0x1, %esi
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1130:
    00000098: 	movq	%rbx, %rdx
    0000009b: 	movl	%ebx, %ecx
    0000009d: 	movl	%esi, %eax
    0000009f: 	shrq	$0x3, %rdx
    000000a3: 	andl	$0x7, %ecx
    000000a6: 	shll	%cl, %eax
    000000a8: 	andb	(%r12,%rdx), %al
    000000ac: 	cmpb	$0x1, %al
    000000ae: 	sbbq	$-0x1, %r9
    000000b2: 	addq	$0x1, %rbx
    000000b6: 	cmpq	%rbp, %rbx
    000000b9: 	jne	.Ltmp1130 # Offset: 185
.Ltmp1129:
    000000bb: 	movq	0x8(%rsp), %rax
    000000c0: 	cmpq	%r9, %rax
    000000c3: 	jne	.Ltmp1131 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1131:
    000000d8: 	addq	$0x18, %rsp
    000000dc: 	movq	%rax, %r8
    000000df: 	movq	%r14, %rdx
    000000e2: 	movq	%r9, %rcx
    000000e5: 	popq	%rbx
    000000e6: 	leaq	DATAat0x15118(%rip), %rsi
    000000ed: 	popq	%rbp
    000000ee: 	movl	$0x1, %edi
    000000f3: 	popq	%r12
    000000f5: 	xorl	%eax, %eax
    000000f7: 	popq	%r13
    000000f9: 	popq	%r14
    000000fb: 	popq	%r15
    000000fd: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 253
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_setbitsIhPFvPhmmEEvPT_mmmT0_PKc"

Binary Function "_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x131d0
  Size        : 0x11b
  MaxSize     : 0x120
  Offset      : 0x131d0
  Section     : .text
  Orc Section : .local.text._Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r9, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rcx, %rbx
    0000001d: 	subq	$0x18, %rsp
    00000021: 	movq	0x50(%rsp), %rax
    00000026: 	movq	%r8, 0x8(%rsp)
    0000002b: 	movq	%rax, (%rsp)
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp1132 # Offset: 67
    00000045: 	xorl	%r15d, %r15d
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1133:
    00000050: 	movq	%rbx, %rcx
    00000053: 	movq	%r14, %rdx
    00000056: 	movq	%r12, %rsi
    00000059: 	movq	%rbp, %rdi
    0000005c: 	callq	*%r13 # Offset: 92
    0000005f: 	addl	$0x1, %r15d
    00000063: 	cmpl	%r15d, iterations(%rip)
    0000006a: 	jg	.Ltmp1133 # Offset: 106
.Ltmp1132:
    0000006c: 	callq	clock@PLT # Offset: 108
    00000071: 	movq	(%rsp), %rdi
    00000075: 	pxor	%xmm0, %xmm0
    00000079: 	movq	%rax, end_time(%rip)
    00000080: 	subq	start_time(%rip), %rax
    00000087: 	cvtsi2sd	%rax, %xmm0
    0000008c: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000094: 	callq	_Z13record_resultdPKc # Offset: 148
    00000099: 	xorl	%r9d, %r9d
    0000009c: 	cmpq	%rbx, %r14
    0000009f: 	ja	.Ltmp1134 # Offset: 159
    000000a1: 	je	.Ltmp1134 # Offset: 161
    000000a3: 	movl	$0x1, %edi
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1135:
    000000b0: 	movq	%r14, %rsi
    000000b3: 	movl	%r14d, %ecx
    000000b6: 	movl	%edi, %eax
    000000b8: 	shrq	$0x3, %rsi
    000000bc: 	andl	$0x7, %ecx
    000000bf: 	shll	%cl, %eax
    000000c1: 	andb	(%rbp,%rsi), %al
    000000c5: 	cmpb	$0x1, %al
    000000c7: 	sbbq	$-0x1, %r9
    000000cb: 	addq	$0x1, %r14
    000000cf: 	cmpq	%rbx, %r14
    000000d2: 	jne	.Ltmp1135 # Offset: 210
.Ltmp1134:
    000000d4: 	movq	0x8(%rsp), %rax
    000000d9: 	cmpq	%r9, %rax
    000000dc: 	jne	.Ltmp1136 # Offset: 220
    000000de: 	addq	$0x18, %rsp
    000000e2: 	popq	%rbx
    000000e3: 	popq	%rbp
    000000e4: 	popq	%r12
    000000e6: 	popq	%r13
    000000e8: 	popq	%r14
    000000ea: 	popq	%r15
    000000ec: 	retq # Offset: 236
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp1136:
    000000f0: 	movq	(%rsp), %rdx
    000000f4: 	addq	$0x18, %rsp
    000000f8: 	movq	%rax, %r8
    000000fb: 	movq	%r9, %rcx
    000000fe: 	popq	%rbx
    000000ff: 	leaq	DATAat0x15118(%rip), %rsi
    00000106: 	popq	%rbp
    00000107: 	movl	$0x1, %edi
    0000010c: 	popq	%r12
    0000010e: 	xorl	%eax, %eax
    00000110: 	popq	%r13
    00000112: 	popq	%r14
    00000114: 	popq	%r15
    00000116: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 278
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_mergebitsIhPFvPhPKhmmEEvPT_PKS5_mmmT0_PKc"

Binary Function "_Z13test_blitbitsIhPFvPhPKhS2_mmEEvPT_PKS5_S8_mmmT0_PKc" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0x132f0
  Size        : 0x12c
  MaxSize     : 0x130
  Offset      : 0x132f0
  Section     : .text
  Orc Section : .local.text._Z13test_blitbitsIhPFvPhPKhS2_mmEEvPT_PKS5_S8_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rcx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	0x60(%rsp), %rax
    00000026: 	movq	%r9, 0x18(%rsp)
    0000002b: 	movq	%rax, 0x8(%rsp)
    00000030: 	movq	0x68(%rsp), %rax
    00000035: 	movq	%rax, 0x10(%rsp)
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp1137 # Offset: 78
    00000050: 	xorl	%r13d, %r13d
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1138:
    00000058: 	movq	0x8(%rsp), %rax
    0000005d: 	movq	%r15, %r8
    00000060: 	movq	%r14, %rcx
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rbp, %rsi
    00000069: 	movq	%rbx, %rdi
    0000006c: 	addl	$0x1, %r13d
    00000070: 	callq	*%rax # Offset: 112
    00000072: 	cmpl	%r13d, iterations(%rip)
    00000079: 	jg	.Ltmp1138 # Offset: 121
.Ltmp1137:
    0000007b: 	callq	clock@PLT # Offset: 123
    00000080: 	movq	0x10(%rsp), %rdi
    00000085: 	pxor	%xmm0, %xmm0
    00000089: 	movq	%rax, end_time(%rip)
    00000090: 	subq	start_time(%rip), %rax
    00000097: 	cvtsi2sd	%rax, %xmm0
    0000009c: 	divsd	DATAat0x165b8(%rip), %xmm0
    000000a4: 	callq	_Z13record_resultdPKc # Offset: 164
    000000a9: 	xorl	%r9d, %r9d
    000000ac: 	cmpq	%r15, %r14
    000000af: 	ja	.Ltmp1139 # Offset: 175
    000000b1: 	je	.Ltmp1139 # Offset: 177
    000000b3: 	movl	$0x1, %esi
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1140:
    000000c0: 	movq	%r14, %rdx
    000000c3: 	movl	%r14d, %ecx
    000000c6: 	movl	%esi, %eax
    000000c8: 	shrq	$0x3, %rdx
    000000cc: 	andl	$0x7, %ecx
    000000cf: 	shll	%cl, %eax
    000000d1: 	andb	(%rbx,%rdx), %al
    000000d4: 	cmpb	$0x1, %al
    000000d6: 	sbbq	$-0x1, %r9
    000000da: 	addq	$0x1, %r14
    000000de: 	cmpq	%r15, %r14
    000000e1: 	jne	.Ltmp1140 # Offset: 225
.Ltmp1139:
    000000e3: 	movq	0x18(%rsp), %rax
    000000e8: 	cmpq	%r9, %rax
    000000eb: 	jne	.Ltmp1141 # Offset: 235
    000000ed: 	addq	$0x28, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1141:
    00000100: 	movq	0x10(%rsp), %rdx
    00000105: 	addq	$0x28, %rsp
    00000109: 	movq	%rax, %r8
    0000010c: 	movq	%r9, %rcx
    0000010f: 	popq	%rbx
    00000110: 	leaq	DATAat0x15118(%rip), %rsi
    00000117: 	popq	%rbp
    00000118: 	movl	$0x1, %edi
    0000011d: 	popq	%r12
    0000011f: 	xorl	%eax, %eax
    00000121: 	popq	%r13
    00000123: 	popq	%r14
    00000125: 	popq	%r15
    00000127: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 295
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_blitbitsIhPFvPhPKhS2_mmEEvPT_PKS5_S8_mmmT0_PKc"

Binary Function "_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0x13420
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0x13420
  Section     : .text
  Orc Section : .local.text._Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x8, %rsp
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp1142 # Offset: 53
    00000037: 	xorl	%r15d, %r15d
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1143:
    00000040: 	movq	%r12, %rdx
    00000043: 	movq	%rbp, %rsi
    00000046: 	movq	%rbx, %rdi
    00000049: 	addl	$0x1, %r15d
    0000004d: 	callq	*%r13 # Offset: 77
    00000050: 	cmpl	%r15d, iterations(%rip)
    00000057: 	jg	.Ltmp1143 # Offset: 87
    00000059: 	cmpq	$0x3e7a, %rax
    0000005f: 	jne	.Ltmp1144 # Offset: 95
.Ltmp1145:
    00000061: 	callq	clock@PLT # Offset: 97
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movq	%r14, %rdi
    0000006d: 	movq	%rax, end_time(%rip)
    00000074: 	subq	start_time(%rip), %rax
    0000007b: 	cvtsi2sd	%rax, %xmm0
    00000080: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000088: 	addq	$0x8, %rsp
    0000008c: 	popq	%rbx
    0000008d: 	popq	%rbp
    0000008e: 	popq	%r12
    00000090: 	popq	%r13
    00000092: 	popq	%r14
    00000094: 	popq	%r15
    00000096: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 150
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1142:
    000000a0: 	xorl	%eax, %eax
.Ltmp1144:
    000000a2: 	movq	%rax, %rcx
    000000a5: 	movq	%r14, %rdx
    000000a8: 	movl	$0x1, %edi
    000000ad: 	xorl	%eax, %eax
    000000af: 	leaq	DATAat0x15a82(%rip), %rsi
    000000b6: 	callq	__printf_chk@PLT # Offset: 182
    000000bb: 	jmp	.Ltmp1145 # Offset: 187
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_countbitsIhPFmPhmmEEvPT_mmT0_PKc"

Binary Function "_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x134e0
  Size        : 0x10a
  MaxSize     : 0x110
  Offset      : 0x134e0
  Section     : .text
  Orc Section : .local.text._Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r9, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r8, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rsi, %rbx
    0000001d: 	subq	$0x18, %rsp
    00000021: 	movq	%rcx, 0x8(%rsp)
    00000026: 	callq	clock@PLT # Offset: 38
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	movl	iterations(%rip), %eax
    00000038: 	testl	%eax, %eax
    0000003a: 	jle	.Ltmp1146 # Offset: 58
    0000003c: 	xorl	%r15d, %r15d
    0000003f: 	nop # Size: 1
.Ltmp1147:
    00000040: 	movq	%rbp, %rdx
    00000043: 	movq	%rbx, %rsi
    00000046: 	movq	%r12, %rdi
    00000049: 	addl	$0x1, %r15d
    0000004d: 	callq	*%r13 # Offset: 77
    00000050: 	cmpl	%r15d, iterations(%rip)
    00000057: 	jg	.Ltmp1147 # Offset: 87
.Ltmp1146:
    00000059: 	callq	clock@PLT # Offset: 89
    0000005e: 	pxor	%xmm0, %xmm0
    00000062: 	movq	%r14, %rdi
    00000065: 	movq	%rax, end_time(%rip)
    0000006c: 	subq	start_time(%rip), %rax
    00000073: 	cvtsi2sd	%rax, %xmm0
    00000078: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000080: 	callq	_Z13record_resultdPKc # Offset: 128
    00000085: 	xorl	%r9d, %r9d
    00000088: 	cmpq	%rbp, %rbx
    0000008b: 	ja	.Ltmp1148 # Offset: 139
    0000008d: 	je	.Ltmp1148 # Offset: 141
    0000008f: 	movl	$0x1, %esi
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1149:
    00000098: 	movq	%rbx, %rdx
    0000009b: 	movl	%ebx, %ecx
    0000009d: 	movl	%esi, %eax
    0000009f: 	shrq	$0x4, %rdx
    000000a3: 	andl	$0xf, %ecx
    000000a6: 	shll	%cl, %eax
    000000a8: 	andw	(%r12,%rdx,2), %ax
    000000ad: 	cmpw	$0x1, %ax
    000000b1: 	sbbq	$-0x1, %r9
    000000b5: 	addq	$0x1, %rbx
    000000b9: 	cmpq	%rbp, %rbx
    000000bc: 	jne	.Ltmp1149 # Offset: 188
.Ltmp1148:
    000000be: 	movq	0x8(%rsp), %rax
    000000c3: 	cmpq	%r9, %rax
    000000c6: 	jne	.Ltmp1150 # Offset: 198
    000000c8: 	addq	$0x18, %rsp
    000000cc: 	popq	%rbx
    000000cd: 	popq	%rbp
    000000ce: 	popq	%r12
    000000d0: 	popq	%r13
    000000d2: 	popq	%r14
    000000d4: 	popq	%r15
    000000d6: 	retq # Offset: 214
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1150:
    000000e0: 	addq	$0x18, %rsp
    000000e4: 	movq	%rax, %r8
    000000e7: 	movq	%r14, %rdx
    000000ea: 	movq	%r9, %rcx
    000000ed: 	popq	%rbx
    000000ee: 	leaq	DATAat0x15118(%rip), %rsi
    000000f5: 	popq	%rbp
    000000f6: 	movl	$0x1, %edi
    000000fb: 	popq	%r12
    000000fd: 	xorl	%eax, %eax
    000000ff: 	popq	%r13
    00000101: 	popq	%r14
    00000103: 	popq	%r15
    00000105: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 261
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_setbitsItPFvPtmmEEvPT_mmmT0_PKc"

Binary Function "_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x135f0
  Size        : 0x11b
  MaxSize     : 0x120
  Offset      : 0x135f0
  Section     : .text
  Orc Section : .local.text._Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r9, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rcx, %rbx
    0000001d: 	subq	$0x18, %rsp
    00000021: 	movq	0x50(%rsp), %rax
    00000026: 	movq	%r8, 0x8(%rsp)
    0000002b: 	movq	%rax, (%rsp)
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp1151 # Offset: 67
    00000045: 	xorl	%r15d, %r15d
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1152:
    00000050: 	movq	%rbx, %rcx
    00000053: 	movq	%r14, %rdx
    00000056: 	movq	%r12, %rsi
    00000059: 	movq	%rbp, %rdi
    0000005c: 	callq	*%r13 # Offset: 92
    0000005f: 	addl	$0x1, %r15d
    00000063: 	cmpl	%r15d, iterations(%rip)
    0000006a: 	jg	.Ltmp1152 # Offset: 106
.Ltmp1151:
    0000006c: 	callq	clock@PLT # Offset: 108
    00000071: 	movq	(%rsp), %rdi
    00000075: 	pxor	%xmm0, %xmm0
    00000079: 	movq	%rax, end_time(%rip)
    00000080: 	subq	start_time(%rip), %rax
    00000087: 	cvtsi2sd	%rax, %xmm0
    0000008c: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000094: 	callq	_Z13record_resultdPKc # Offset: 148
    00000099: 	xorl	%r9d, %r9d
    0000009c: 	cmpq	%rbx, %r14
    0000009f: 	ja	.Ltmp1153 # Offset: 159
    000000a1: 	je	.Ltmp1153 # Offset: 161
    000000a3: 	movl	$0x1, %edi
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1154:
    000000b0: 	movq	%r14, %rsi
    000000b3: 	movl	%r14d, %ecx
    000000b6: 	movl	%edi, %eax
    000000b8: 	shrq	$0x4, %rsi
    000000bc: 	andl	$0xf, %ecx
    000000bf: 	shll	%cl, %eax
    000000c1: 	andw	(%rbp,%rsi,2), %ax
    000000c6: 	cmpw	$0x1, %ax
    000000ca: 	sbbq	$-0x1, %r9
    000000ce: 	addq	$0x1, %r14
    000000d2: 	cmpq	%rbx, %r14
    000000d5: 	jne	.Ltmp1154 # Offset: 213
.Ltmp1153:
    000000d7: 	movq	0x8(%rsp), %rax
    000000dc: 	cmpq	%r9, %rax
    000000df: 	jne	.Ltmp1155 # Offset: 223
    000000e1: 	addq	$0x18, %rsp
    000000e5: 	popq	%rbx
    000000e6: 	popq	%rbp
    000000e7: 	popq	%r12
    000000e9: 	popq	%r13
    000000eb: 	popq	%r14
    000000ed: 	popq	%r15
    000000ef: 	retq # Offset: 239
.Ltmp1155:
    000000f0: 	movq	(%rsp), %rdx
    000000f4: 	addq	$0x18, %rsp
    000000f8: 	movq	%rax, %r8
    000000fb: 	movq	%r9, %rcx
    000000fe: 	popq	%rbx
    000000ff: 	leaq	DATAat0x15118(%rip), %rsi
    00000106: 	popq	%rbp
    00000107: 	movl	$0x1, %edi
    0000010c: 	popq	%r12
    0000010e: 	xorl	%eax, %eax
    00000110: 	popq	%r13
    00000112: 	popq	%r14
    00000114: 	popq	%r15
    00000116: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 278
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_mergebitsItPFvPtPKtmmEEvPT_PKS5_mmmT0_PKc"

Binary Function "_Z13test_blitbitsItPFvPtPKtS2_mmEEvPT_PKS5_S8_mmmT0_PKc" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0x13710
  Size        : 0x12c
  MaxSize     : 0x130
  Offset      : 0x13710
  Section     : .text
  Orc Section : .local.text._Z13test_blitbitsItPFvPtPKtS2_mmEEvPT_PKS5_S8_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rcx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	0x60(%rsp), %rax
    00000026: 	movq	%r9, 0x18(%rsp)
    0000002b: 	movq	%rax, 0x8(%rsp)
    00000030: 	movq	0x68(%rsp), %rax
    00000035: 	movq	%rax, 0x10(%rsp)
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp1156 # Offset: 78
    00000050: 	xorl	%r13d, %r13d
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1157:
    00000058: 	movq	0x8(%rsp), %rax
    0000005d: 	movq	%r15, %r8
    00000060: 	movq	%r14, %rcx
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rbp, %rsi
    00000069: 	movq	%rbx, %rdi
    0000006c: 	addl	$0x1, %r13d
    00000070: 	callq	*%rax # Offset: 112
    00000072: 	cmpl	%r13d, iterations(%rip)
    00000079: 	jg	.Ltmp1157 # Offset: 121
.Ltmp1156:
    0000007b: 	callq	clock@PLT # Offset: 123
    00000080: 	movq	0x10(%rsp), %rdi
    00000085: 	pxor	%xmm0, %xmm0
    00000089: 	movq	%rax, end_time(%rip)
    00000090: 	subq	start_time(%rip), %rax
    00000097: 	cvtsi2sd	%rax, %xmm0
    0000009c: 	divsd	DATAat0x165b8(%rip), %xmm0
    000000a4: 	callq	_Z13record_resultdPKc # Offset: 164
    000000a9: 	xorl	%r9d, %r9d
    000000ac: 	cmpq	%r15, %r14
    000000af: 	ja	.Ltmp1158 # Offset: 175
    000000b1: 	je	.Ltmp1158 # Offset: 177
    000000b3: 	movl	$0x1, %esi
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1159:
    000000c0: 	movq	%r14, %rdx
    000000c3: 	movl	%r14d, %ecx
    000000c6: 	movl	%esi, %eax
    000000c8: 	shrq	$0x4, %rdx
    000000cc: 	andl	$0xf, %ecx
    000000cf: 	shll	%cl, %eax
    000000d1: 	andw	(%rbx,%rdx,2), %ax
    000000d5: 	cmpw	$0x1, %ax
    000000d9: 	sbbq	$-0x1, %r9
    000000dd: 	addq	$0x1, %r14
    000000e1: 	cmpq	%r15, %r14
    000000e4: 	jne	.Ltmp1159 # Offset: 228
.Ltmp1158:
    000000e6: 	movq	0x18(%rsp), %rax
    000000eb: 	cmpq	%r9, %rax
    000000ee: 	jne	.Ltmp1160 # Offset: 238
    000000f0: 	addq	$0x28, %rsp
    000000f4: 	popq	%rbx
    000000f5: 	popq	%rbp
    000000f6: 	popq	%r12
    000000f8: 	popq	%r13
    000000fa: 	popq	%r14
    000000fc: 	popq	%r15
    000000fe: 	retq # Offset: 254
    000000ff: 	nop # Size: 1
.Ltmp1160:
    00000100: 	movq	0x10(%rsp), %rdx
    00000105: 	addq	$0x28, %rsp
    00000109: 	movq	%rax, %r8
    0000010c: 	movq	%r9, %rcx
    0000010f: 	popq	%rbx
    00000110: 	leaq	DATAat0x15118(%rip), %rsi
    00000117: 	popq	%rbp
    00000118: 	movl	$0x1, %edi
    0000011d: 	popq	%r12
    0000011f: 	xorl	%eax, %eax
    00000121: 	popq	%r13
    00000123: 	popq	%r14
    00000125: 	popq	%r15
    00000127: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 295
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_blitbitsItPFvPtPKtS2_mmEEvPT_PKS5_S8_mmmT0_PKc"

Binary Function "_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc" after disassembly {
  Number      : 193
  State       : disassembled
  Address     : 0x13840
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0x13840
  Section     : .text
  Orc Section : .local.text._Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0192:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x8, %rsp
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp1161 # Offset: 53
    00000037: 	xorl	%r15d, %r15d
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1162:
    00000040: 	movq	%r12, %rdx
    00000043: 	movq	%rbp, %rsi
    00000046: 	movq	%rbx, %rdi
    00000049: 	addl	$0x1, %r15d
    0000004d: 	callq	*%r13 # Offset: 77
    00000050: 	cmpl	%r15d, iterations(%rip)
    00000057: 	jg	.Ltmp1162 # Offset: 87
    00000059: 	cmpq	$0x3e7a, %rax
    0000005f: 	jne	.Ltmp1163 # Offset: 95
.Ltmp1164:
    00000061: 	callq	clock@PLT # Offset: 97
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movq	%r14, %rdi
    0000006d: 	movq	%rax, end_time(%rip)
    00000074: 	subq	start_time(%rip), %rax
    0000007b: 	cvtsi2sd	%rax, %xmm0
    00000080: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000088: 	addq	$0x8, %rsp
    0000008c: 	popq	%rbx
    0000008d: 	popq	%rbp
    0000008e: 	popq	%r12
    00000090: 	popq	%r13
    00000092: 	popq	%r14
    00000094: 	popq	%r15
    00000096: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 150
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1161:
    000000a0: 	xorl	%eax, %eax
.Ltmp1163:
    000000a2: 	movq	%rax, %rcx
    000000a5: 	movq	%r14, %rdx
    000000a8: 	movl	$0x1, %edi
    000000ad: 	xorl	%eax, %eax
    000000af: 	leaq	DATAat0x15a82(%rip), %rsi
    000000b6: 	callq	__printf_chk@PLT # Offset: 182
    000000bb: 	jmp	.Ltmp1164 # Offset: 187
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_countbitsItPFmPtmmEEvPT_mmT0_PKc"

Binary Function "_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc" after disassembly {
  Number      : 194
  State       : disassembled
  Address     : 0x13900
  Size        : 0x102
  MaxSize     : 0x110
  Offset      : 0x13900
  Section     : .text
  Orc Section : .local.text._Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0193:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r9, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r8, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rsi, %rbx
    0000001d: 	subq	$0x18, %rsp
    00000021: 	movq	%rcx, 0x8(%rsp)
    00000026: 	callq	clock@PLT # Offset: 38
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	movl	iterations(%rip), %eax
    00000038: 	testl	%eax, %eax
    0000003a: 	jle	.Ltmp1165 # Offset: 58
    0000003c: 	xorl	%r15d, %r15d
    0000003f: 	nop # Size: 1
.Ltmp1166:
    00000040: 	movq	%rbp, %rdx
    00000043: 	movq	%rbx, %rsi
    00000046: 	movq	%r12, %rdi
    00000049: 	addl	$0x1, %r15d
    0000004d: 	callq	*%r13 # Offset: 77
    00000050: 	cmpl	%r15d, iterations(%rip)
    00000057: 	jg	.Ltmp1166 # Offset: 87
.Ltmp1165:
    00000059: 	callq	clock@PLT # Offset: 89
    0000005e: 	pxor	%xmm0, %xmm0
    00000062: 	movq	%r14, %rdi
    00000065: 	movq	%rax, end_time(%rip)
    0000006c: 	subq	start_time(%rip), %rax
    00000073: 	cvtsi2sd	%rax, %xmm0
    00000078: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000080: 	callq	_Z13record_resultdPKc # Offset: 128
    00000085: 	xorl	%r9d, %r9d
    00000088: 	cmpq	%rbp, %rbx
    0000008b: 	ja	.Ltmp1167 # Offset: 139
    0000008d: 	je	.Ltmp1167 # Offset: 141
    0000008f: 	movl	$0x1, %esi
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1168:
    00000098: 	movq	%rbx, %rdx
    0000009b: 	movl	%ebx, %ecx
    0000009d: 	movl	%esi, %eax
    0000009f: 	shrq	$0x5, %rdx
    000000a3: 	shll	%cl, %eax
    000000a5: 	andl	(%r12,%rdx,4), %eax
    000000a9: 	cmpl	$0x1, %eax
    000000ac: 	sbbq	$-0x1, %r9
    000000b0: 	addq	$0x1, %rbx
    000000b4: 	cmpq	%rbp, %rbx
    000000b7: 	jne	.Ltmp1168 # Offset: 183
.Ltmp1167:
    000000b9: 	movq	0x8(%rsp), %rax
    000000be: 	cmpq	%r9, %rax
    000000c1: 	jne	.Ltmp1169 # Offset: 193
    000000c3: 	addq	$0x18, %rsp
    000000c7: 	popq	%rbx
    000000c8: 	popq	%rbp
    000000c9: 	popq	%r12
    000000cb: 	popq	%r13
    000000cd: 	popq	%r14
    000000cf: 	popq	%r15
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1169:
    000000d8: 	addq	$0x18, %rsp
    000000dc: 	movq	%rax, %r8
    000000df: 	movq	%r14, %rdx
    000000e2: 	movq	%r9, %rcx
    000000e5: 	popq	%rbx
    000000e6: 	leaq	DATAat0x15118(%rip), %rsi
    000000ed: 	popq	%rbp
    000000ee: 	movl	$0x1, %edi
    000000f3: 	popq	%r12
    000000f5: 	xorl	%eax, %eax
    000000f7: 	popq	%r13
    000000f9: 	popq	%r14
    000000fb: 	popq	%r15
    000000fd: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 253
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_setbitsIjPFvPjmmEEvPT_mmmT0_PKc"

Binary Function "_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc" after disassembly {
  Number      : 195
  State       : disassembled
  Address     : 0x13a10
  Size        : 0x11b
  MaxSize     : 0x120
  Offset      : 0x13a10
  Section     : .text
  Orc Section : .local.text._Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0194:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r9, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rcx, %rbx
    0000001d: 	subq	$0x18, %rsp
    00000021: 	movq	0x50(%rsp), %rax
    00000026: 	movq	%r8, 0x8(%rsp)
    0000002b: 	movq	%rax, (%rsp)
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp1170 # Offset: 67
    00000045: 	xorl	%r15d, %r15d
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1171:
    00000050: 	movq	%rbx, %rcx
    00000053: 	movq	%r14, %rdx
    00000056: 	movq	%r12, %rsi
    00000059: 	movq	%rbp, %rdi
    0000005c: 	callq	*%r13 # Offset: 92
    0000005f: 	addl	$0x1, %r15d
    00000063: 	cmpl	%r15d, iterations(%rip)
    0000006a: 	jg	.Ltmp1171 # Offset: 106
.Ltmp1170:
    0000006c: 	callq	clock@PLT # Offset: 108
    00000071: 	movq	(%rsp), %rdi
    00000075: 	pxor	%xmm0, %xmm0
    00000079: 	movq	%rax, end_time(%rip)
    00000080: 	subq	start_time(%rip), %rax
    00000087: 	cvtsi2sd	%rax, %xmm0
    0000008c: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000094: 	callq	_Z13record_resultdPKc # Offset: 148
    00000099: 	xorl	%r9d, %r9d
    0000009c: 	cmpq	%rbx, %r14
    0000009f: 	ja	.Ltmp1172 # Offset: 159
    000000a1: 	je	.Ltmp1172 # Offset: 161
    000000a3: 	movl	$0x1, %edi
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1173:
    000000b0: 	movq	%r14, %rsi
    000000b3: 	movl	%r14d, %ecx
    000000b6: 	movl	%edi, %eax
    000000b8: 	shrq	$0x5, %rsi
    000000bc: 	shll	%cl, %eax
    000000be: 	andl	(%rbp,%rsi,4), %eax
    000000c2: 	cmpl	$0x1, %eax
    000000c5: 	sbbq	$-0x1, %r9
    000000c9: 	addq	$0x1, %r14
    000000cd: 	cmpq	%rbx, %r14
    000000d0: 	jne	.Ltmp1173 # Offset: 208
.Ltmp1172:
    000000d2: 	movq	0x8(%rsp), %rax
    000000d7: 	cmpq	%r9, %rax
    000000da: 	jne	.Ltmp1174 # Offset: 218
    000000dc: 	addq	$0x18, %rsp
    000000e0: 	popq	%rbx
    000000e1: 	popq	%rbp
    000000e2: 	popq	%r12
    000000e4: 	popq	%r13
    000000e6: 	popq	%r14
    000000e8: 	popq	%r15
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1174:
    000000f0: 	movq	(%rsp), %rdx
    000000f4: 	addq	$0x18, %rsp
    000000f8: 	movq	%rax, %r8
    000000fb: 	movq	%r9, %rcx
    000000fe: 	popq	%rbx
    000000ff: 	leaq	DATAat0x15118(%rip), %rsi
    00000106: 	popq	%rbp
    00000107: 	movl	$0x1, %edi
    0000010c: 	popq	%r12
    0000010e: 	xorl	%eax, %eax
    00000110: 	popq	%r13
    00000112: 	popq	%r14
    00000114: 	popq	%r15
    00000116: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 278
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_mergebitsIjPFvPjPKjmmEEvPT_PKS5_mmmT0_PKc"

Binary Function "_Z13test_blitbitsIjPFvPjPKjS2_mmEEvPT_PKS5_S8_mmmT0_PKc" after disassembly {
  Number      : 196
  State       : disassembled
  Address     : 0x13b30
  Size        : 0x12c
  MaxSize     : 0x130
  Offset      : 0x13b30
  Section     : .text
  Orc Section : .local.text._Z13test_blitbitsIjPFvPjPKjS2_mmEEvPT_PKS5_S8_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0195:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rcx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	0x60(%rsp), %rax
    00000026: 	movq	%r9, 0x18(%rsp)
    0000002b: 	movq	%rax, 0x8(%rsp)
    00000030: 	movq	0x68(%rsp), %rax
    00000035: 	movq	%rax, 0x10(%rsp)
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp1175 # Offset: 78
    00000050: 	xorl	%r13d, %r13d
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1176:
    00000058: 	movq	0x8(%rsp), %rax
    0000005d: 	movq	%r15, %r8
    00000060: 	movq	%r14, %rcx
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rbp, %rsi
    00000069: 	movq	%rbx, %rdi
    0000006c: 	addl	$0x1, %r13d
    00000070: 	callq	*%rax # Offset: 112
    00000072: 	cmpl	%r13d, iterations(%rip)
    00000079: 	jg	.Ltmp1176 # Offset: 121
.Ltmp1175:
    0000007b: 	callq	clock@PLT # Offset: 123
    00000080: 	movq	0x10(%rsp), %rdi
    00000085: 	pxor	%xmm0, %xmm0
    00000089: 	movq	%rax, end_time(%rip)
    00000090: 	subq	start_time(%rip), %rax
    00000097: 	cvtsi2sd	%rax, %xmm0
    0000009c: 	divsd	DATAat0x165b8(%rip), %xmm0
    000000a4: 	callq	_Z13record_resultdPKc # Offset: 164
    000000a9: 	xorl	%r9d, %r9d
    000000ac: 	cmpq	%r15, %r14
    000000af: 	ja	.Ltmp1177 # Offset: 175
    000000b1: 	je	.Ltmp1177 # Offset: 177
    000000b3: 	movl	$0x1, %esi
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1178:
    000000c0: 	movq	%r14, %rdx
    000000c3: 	movl	%r14d, %ecx
    000000c6: 	movl	%esi, %eax
    000000c8: 	shrq	$0x5, %rdx
    000000cc: 	shll	%cl, %eax
    000000ce: 	andl	(%rbx,%rdx,4), %eax
    000000d1: 	cmpl	$0x1, %eax
    000000d4: 	sbbq	$-0x1, %r9
    000000d8: 	addq	$0x1, %r14
    000000dc: 	cmpq	%r15, %r14
    000000df: 	jne	.Ltmp1178 # Offset: 223
.Ltmp1177:
    000000e1: 	movq	0x18(%rsp), %rax
    000000e6: 	cmpq	%r9, %rax
    000000e9: 	jne	.Ltmp1179 # Offset: 233
    000000eb: 	addq	$0x28, %rsp
    000000ef: 	popq	%rbx
    000000f0: 	popq	%rbp
    000000f1: 	popq	%r12
    000000f3: 	popq	%r13
    000000f5: 	popq	%r14
    000000f7: 	popq	%r15
    000000f9: 	retq # Offset: 249
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1179:
    00000100: 	movq	0x10(%rsp), %rdx
    00000105: 	addq	$0x28, %rsp
    00000109: 	movq	%rax, %r8
    0000010c: 	movq	%r9, %rcx
    0000010f: 	popq	%rbx
    00000110: 	leaq	DATAat0x15118(%rip), %rsi
    00000117: 	popq	%rbp
    00000118: 	movl	$0x1, %edi
    0000011d: 	popq	%r12
    0000011f: 	xorl	%eax, %eax
    00000121: 	popq	%r13
    00000123: 	popq	%r14
    00000125: 	popq	%r15
    00000127: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 295
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_blitbitsIjPFvPjPKjS2_mmEEvPT_PKS5_S8_mmmT0_PKc"

Binary Function "_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc" after disassembly {
  Number      : 197
  State       : disassembled
  Address     : 0x13c60
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0x13c60
  Section     : .text
  Orc Section : .local.text._Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0196:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x8, %rsp
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp1180 # Offset: 53
    00000037: 	xorl	%r15d, %r15d
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1181:
    00000040: 	movq	%r12, %rdx
    00000043: 	movq	%rbp, %rsi
    00000046: 	movq	%rbx, %rdi
    00000049: 	addl	$0x1, %r15d
    0000004d: 	callq	*%r13 # Offset: 77
    00000050: 	cmpl	%r15d, iterations(%rip)
    00000057: 	jg	.Ltmp1181 # Offset: 87
    00000059: 	cmpq	$0x3e7a, %rax
    0000005f: 	jne	.Ltmp1182 # Offset: 95
.Ltmp1183:
    00000061: 	callq	clock@PLT # Offset: 97
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movq	%r14, %rdi
    0000006d: 	movq	%rax, end_time(%rip)
    00000074: 	subq	start_time(%rip), %rax
    0000007b: 	cvtsi2sd	%rax, %xmm0
    00000080: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000088: 	addq	$0x8, %rsp
    0000008c: 	popq	%rbx
    0000008d: 	popq	%rbp
    0000008e: 	popq	%r12
    00000090: 	popq	%r13
    00000092: 	popq	%r14
    00000094: 	popq	%r15
    00000096: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 150
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1180:
    000000a0: 	xorl	%eax, %eax
.Ltmp1182:
    000000a2: 	movq	%rax, %rcx
    000000a5: 	movq	%r14, %rdx
    000000a8: 	movl	$0x1, %edi
    000000ad: 	xorl	%eax, %eax
    000000af: 	leaq	DATAat0x15a82(%rip), %rsi
    000000b6: 	callq	__printf_chk@PLT # Offset: 182
    000000bb: 	jmp	.Ltmp1183 # Offset: 187
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_countbitsIjPFmPjmmEEvPT_mmT0_PKc"

Binary Function "_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc" after disassembly {
  Number      : 198
  State       : disassembled
  Address     : 0x13d20
  Size        : 0x102
  MaxSize     : 0x110
  Offset      : 0x13d20
  Section     : .text
  Orc Section : .local.text._Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0197:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r9, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r8, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rsi, %rbx
    0000001d: 	subq	$0x18, %rsp
    00000021: 	movq	%rcx, 0x8(%rsp)
    00000026: 	callq	clock@PLT # Offset: 38
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	movl	iterations(%rip), %eax
    00000038: 	testl	%eax, %eax
    0000003a: 	jle	.Ltmp1184 # Offset: 58
    0000003c: 	xorl	%r15d, %r15d
    0000003f: 	nop # Size: 1
.Ltmp1185:
    00000040: 	movq	%rbp, %rdx
    00000043: 	movq	%rbx, %rsi
    00000046: 	movq	%r12, %rdi
    00000049: 	addl	$0x1, %r15d
    0000004d: 	callq	*%r13 # Offset: 77
    00000050: 	cmpl	%r15d, iterations(%rip)
    00000057: 	jg	.Ltmp1185 # Offset: 87
.Ltmp1184:
    00000059: 	callq	clock@PLT # Offset: 89
    0000005e: 	pxor	%xmm0, %xmm0
    00000062: 	movq	%r14, %rdi
    00000065: 	movq	%rax, end_time(%rip)
    0000006c: 	subq	start_time(%rip), %rax
    00000073: 	cvtsi2sd	%rax, %xmm0
    00000078: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000080: 	callq	_Z13record_resultdPKc # Offset: 128
    00000085: 	xorl	%r9d, %r9d
    00000088: 	cmpq	%rbp, %rbx
    0000008b: 	ja	.Ltmp1186 # Offset: 139
    0000008d: 	je	.Ltmp1186 # Offset: 141
    0000008f: 	movl	$0x1, %esi
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1187:
    00000098: 	movq	%rbx, %rdx
    0000009b: 	movl	%ebx, %ecx
    0000009d: 	movq	%rsi, %rax
    000000a0: 	shrq	$0x6, %rdx
    000000a4: 	shlq	%cl, %rax
    000000a7: 	andq	(%r12,%rdx,8), %rax
    000000ab: 	cmpq	$0x1, %rax
    000000af: 	sbbq	$-0x1, %r9
    000000b3: 	addq	$0x1, %rbx
    000000b7: 	cmpq	%rbp, %rbx
    000000ba: 	jne	.Ltmp1187 # Offset: 186
.Ltmp1186:
    000000bc: 	movq	0x8(%rsp), %rax
    000000c1: 	cmpq	%r9, %rax
    000000c4: 	jne	.Ltmp1188 # Offset: 196
    000000c6: 	addq	$0x18, %rsp
    000000ca: 	popq	%rbx
    000000cb: 	popq	%rbp
    000000cc: 	popq	%r12
    000000ce: 	popq	%r13
    000000d0: 	popq	%r14
    000000d2: 	popq	%r15
    000000d4: 	retq # Offset: 212
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp1188:
    000000d8: 	addq	$0x18, %rsp
    000000dc: 	movq	%rax, %r8
    000000df: 	movq	%r14, %rdx
    000000e2: 	movq	%r9, %rcx
    000000e5: 	popq	%rbx
    000000e6: 	leaq	DATAat0x15118(%rip), %rsi
    000000ed: 	popq	%rbp
    000000ee: 	movl	$0x1, %edi
    000000f3: 	popq	%r12
    000000f5: 	xorl	%eax, %eax
    000000f7: 	popq	%r13
    000000f9: 	popq	%r14
    000000fb: 	popq	%r15
    000000fd: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 253
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_setbitsImPFvPmmmEEvPT_mmmT0_PKc"

Binary Function "_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc" after disassembly {
  Number      : 199
  State       : disassembled
  Address     : 0x13e30
  Size        : 0x11b
  MaxSize     : 0x120
  Offset      : 0x13e30
  Section     : .text
  Orc Section : .local.text._Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0198:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r9, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rcx, %rbx
    0000001d: 	subq	$0x18, %rsp
    00000021: 	movq	0x50(%rsp), %rax
    00000026: 	movq	%r8, 0x8(%rsp)
    0000002b: 	movq	%rax, (%rsp)
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp1189 # Offset: 67
    00000045: 	xorl	%r15d, %r15d
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1190:
    00000050: 	movq	%rbx, %rcx
    00000053: 	movq	%r14, %rdx
    00000056: 	movq	%r12, %rsi
    00000059: 	movq	%rbp, %rdi
    0000005c: 	callq	*%r13 # Offset: 92
    0000005f: 	addl	$0x1, %r15d
    00000063: 	cmpl	%r15d, iterations(%rip)
    0000006a: 	jg	.Ltmp1190 # Offset: 106
.Ltmp1189:
    0000006c: 	callq	clock@PLT # Offset: 108
    00000071: 	movq	(%rsp), %rdi
    00000075: 	pxor	%xmm0, %xmm0
    00000079: 	movq	%rax, end_time(%rip)
    00000080: 	subq	start_time(%rip), %rax
    00000087: 	cvtsi2sd	%rax, %xmm0
    0000008c: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000094: 	callq	_Z13record_resultdPKc # Offset: 148
    00000099: 	xorl	%r9d, %r9d
    0000009c: 	cmpq	%rbx, %r14
    0000009f: 	ja	.Ltmp1191 # Offset: 159
    000000a1: 	je	.Ltmp1191 # Offset: 161
    000000a3: 	movl	$0x1, %edi
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1192:
    000000b0: 	movq	%r14, %rsi
    000000b3: 	movl	%r14d, %ecx
    000000b6: 	movq	%rdi, %rax
    000000b9: 	shrq	$0x6, %rsi
    000000bd: 	shlq	%cl, %rax
    000000c0: 	andq	(%rbp,%rsi,8), %rax
    000000c5: 	cmpq	$0x1, %rax
    000000c9: 	sbbq	$-0x1, %r9
    000000cd: 	addq	$0x1, %r14
    000000d1: 	cmpq	%rbx, %r14
    000000d4: 	jne	.Ltmp1192 # Offset: 212
.Ltmp1191:
    000000d6: 	movq	0x8(%rsp), %rax
    000000db: 	cmpq	%r9, %rax
    000000de: 	jne	.Ltmp1193 # Offset: 222
    000000e0: 	addq	$0x18, %rsp
    000000e4: 	popq	%rbx
    000000e5: 	popq	%rbp
    000000e6: 	popq	%r12
    000000e8: 	popq	%r13
    000000ea: 	popq	%r14
    000000ec: 	popq	%r15
    000000ee: 	retq # Offset: 238
    000000ef: 	nop # Size: 1
.Ltmp1193:
    000000f0: 	movq	(%rsp), %rdx
    000000f4: 	addq	$0x18, %rsp
    000000f8: 	movq	%rax, %r8
    000000fb: 	movq	%r9, %rcx
    000000fe: 	popq	%rbx
    000000ff: 	leaq	DATAat0x15118(%rip), %rsi
    00000106: 	popq	%rbp
    00000107: 	movl	$0x1, %edi
    0000010c: 	popq	%r12
    0000010e: 	xorl	%eax, %eax
    00000110: 	popq	%r13
    00000112: 	popq	%r14
    00000114: 	popq	%r15
    00000116: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 278
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_mergebitsImPFvPmPKmmmEEvPT_PKS5_mmmT0_PKc"

Binary Function "_Z13test_blitbitsImPFvPmPKmS2_mmEEvPT_PKS5_S8_mmmT0_PKc" after disassembly {
  Number      : 200
  State       : disassembled
  Address     : 0x13f50
  Size        : 0x12c
  MaxSize     : 0x130
  Offset      : 0x13f50
  Section     : .text
  Orc Section : .local.text._Z13test_blitbitsImPFvPmPKmS2_mmEEvPT_PKS5_S8_mmmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0199:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rcx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	0x60(%rsp), %rax
    00000026: 	movq	%r9, 0x18(%rsp)
    0000002b: 	movq	%rax, 0x8(%rsp)
    00000030: 	movq	0x68(%rsp), %rax
    00000035: 	movq	%rax, 0x10(%rsp)
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp1194 # Offset: 78
    00000050: 	xorl	%r13d, %r13d
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1195:
    00000058: 	movq	0x8(%rsp), %rax
    0000005d: 	movq	%r15, %r8
    00000060: 	movq	%r14, %rcx
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rbp, %rsi
    00000069: 	movq	%rbx, %rdi
    0000006c: 	addl	$0x1, %r13d
    00000070: 	callq	*%rax # Offset: 112
    00000072: 	cmpl	%r13d, iterations(%rip)
    00000079: 	jg	.Ltmp1195 # Offset: 121
.Ltmp1194:
    0000007b: 	callq	clock@PLT # Offset: 123
    00000080: 	movq	0x10(%rsp), %rdi
    00000085: 	pxor	%xmm0, %xmm0
    00000089: 	movq	%rax, end_time(%rip)
    00000090: 	subq	start_time(%rip), %rax
    00000097: 	cvtsi2sd	%rax, %xmm0
    0000009c: 	divsd	DATAat0x165b8(%rip), %xmm0
    000000a4: 	callq	_Z13record_resultdPKc # Offset: 164
    000000a9: 	xorl	%r9d, %r9d
    000000ac: 	cmpq	%r15, %r14
    000000af: 	ja	.Ltmp1196 # Offset: 175
    000000b1: 	je	.Ltmp1196 # Offset: 177
    000000b3: 	movl	$0x1, %esi
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1197:
    000000c0: 	movq	%r14, %rdx
    000000c3: 	movl	%r14d, %ecx
    000000c6: 	movq	%rsi, %rax
    000000c9: 	shrq	$0x6, %rdx
    000000cd: 	shlq	%cl, %rax
    000000d0: 	andq	(%rbx,%rdx,8), %rax
    000000d4: 	cmpq	$0x1, %rax
    000000d8: 	sbbq	$-0x1, %r9
    000000dc: 	addq	$0x1, %r14
    000000e0: 	cmpq	%r15, %r14
    000000e3: 	jne	.Ltmp1197 # Offset: 227
.Ltmp1196:
    000000e5: 	movq	0x18(%rsp), %rax
    000000ea: 	cmpq	%r9, %rax
    000000ed: 	jne	.Ltmp1198 # Offset: 237
    000000ef: 	addq	$0x28, %rsp
    000000f3: 	popq	%rbx
    000000f4: 	popq	%rbp
    000000f5: 	popq	%r12
    000000f7: 	popq	%r13
    000000f9: 	popq	%r14
    000000fb: 	popq	%r15
    000000fd: 	retq # Offset: 253
    000000fe: 	nop # Size: 2
.Ltmp1198:
    00000100: 	movq	0x10(%rsp), %rdx
    00000105: 	addq	$0x28, %rsp
    00000109: 	movq	%rax, %r8
    0000010c: 	movq	%r9, %rcx
    0000010f: 	popq	%rbx
    00000110: 	leaq	DATAat0x15118(%rip), %rsi
    00000117: 	popq	%rbp
    00000118: 	movl	$0x1, %edi
    0000011d: 	popq	%r12
    0000011f: 	xorl	%eax, %eax
    00000121: 	popq	%r13
    00000123: 	popq	%r14
    00000125: 	popq	%r15
    00000127: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 295
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_blitbitsImPFvPmPKmS2_mmEEvPT_PKS5_S8_mmmT0_PKc"

Binary Function "_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc" after disassembly {
  Number      : 201
  State       : disassembled
  Address     : 0x14080
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0x14080
  Section     : .text
  Orc Section : .local.text._Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0200:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x8, %rsp
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp1199 # Offset: 53
    00000037: 	xorl	%r15d, %r15d
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1200:
    00000040: 	movq	%r12, %rdx
    00000043: 	movq	%rbp, %rsi
    00000046: 	movq	%rbx, %rdi
    00000049: 	addl	$0x1, %r15d
    0000004d: 	callq	*%r13 # Offset: 77
    00000050: 	cmpl	%r15d, iterations(%rip)
    00000057: 	jg	.Ltmp1200 # Offset: 87
    00000059: 	cmpq	$0x3e7a, %rax
    0000005f: 	jne	.Ltmp1201 # Offset: 95
.Ltmp1202:
    00000061: 	callq	clock@PLT # Offset: 97
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	movq	%r14, %rdi
    0000006d: 	movq	%rax, end_time(%rip)
    00000074: 	subq	start_time(%rip), %rax
    0000007b: 	cvtsi2sd	%rax, %xmm0
    00000080: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000088: 	addq	$0x8, %rsp
    0000008c: 	popq	%rbx
    0000008d: 	popq	%rbp
    0000008e: 	popq	%r12
    00000090: 	popq	%r13
    00000092: 	popq	%r14
    00000094: 	popq	%r15
    00000096: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 150
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1199:
    000000a0: 	xorl	%eax, %eax
.Ltmp1201:
    000000a2: 	movq	%rax, %rcx
    000000a5: 	movq	%r14, %rdx
    000000a8: 	movl	$0x1, %edi
    000000ad: 	xorl	%eax, %eax
    000000af: 	leaq	DATAat0x15a82(%rip), %rsi
    000000b6: 	callq	__printf_chk@PLT # Offset: 182
    000000bb: 	jmp	.Ltmp1202 # Offset: 187
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_countbitsImPFmPmmmEEvPT_mmT0_PKc"

Binary Function "_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc" after disassembly {
  Number      : 202
  State       : disassembled
  Address     : 0x14140
  Size        : 0x131
  MaxSize     : 0x140
  Offset      : 0x14140
  Section     : .text
  Orc Section : .local.text._Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0201:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rsi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rcx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rdx, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rdi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	subq	$0x7e0, %rsp
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x7d8(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	movl	iterations(%rip), %eax
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp1203 # Offset: 70
    00000048: 	xorl	%ebx, %ebx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1204:
    00000050: 	movq	%rbp, %rdi
    00000053: 	addl	$0x1, %ebx
    00000056: 	callq	*%r12 # Offset: 86
    00000059: 	cmpl	%ebx, iterations(%rip)
    0000005f: 	jg	.Ltmp1204 # Offset: 95
.Ltmp1203:
    00000061: 	callq	clock@PLT # Offset: 97
    00000066: 	movq	%r13, %rdi
    00000069: 	pxor	%xmm0, %xmm0
    0000006d: 	movq	%rsp, %rbx
    00000070: 	movq	%rax, end_time(%rip)
    00000077: 	subq	start_time(%rip), %rax
    0000007e: 	xorl	%r12d, %r12d
    00000081: 	cvtsi2sd	%rax, %xmm0
    00000086: 	divsd	DATAat0x165b8(%rip), %xmm0
    0000008e: 	callq	_Z13record_resultdPKc # Offset: 142
    00000093: 	movq	%rbp, %rsi
    00000096: 	movq	%rsp, %rdi
    00000099: 	movl	$0xfa, %ecx
    0000009e: 	rep		movsq	(%rsi), %es:(%rdi)
    000000a1: 	leaq	0x7d0(%rsp), %rbp
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp1205:
    000000b0: 	movq	(%rbx), %rdi
    000000b3: 	addq	$0x8, %rbx
    000000b7: 	callq	__popcountdi2@PLT # Offset: 183
    000000bc: 	cltq
    000000be: 	addq	%rax, %r12
    000000c1: 	cmpq	%rbx, %rbp
    000000c4: 	jne	.Ltmp1205 # Offset: 196
    000000c6: 	cmpq	%r12, %r14
    000000c9: 	jne	.Ltmp1206 # Offset: 201
    000000cb: 	movq	0x7d8(%rsp), %rax
    000000d3: 	subq	%fs:0x28, %rax
    000000dc: 	jne	.Ltmp1207 # Offset: 220
    000000de: 	addq	$0x7e0, %rsp
    000000e5: 	popq	%rbx
    000000e6: 	popq	%rbp
    000000e7: 	popq	%r12
    000000e9: 	popq	%r13
    000000eb: 	popq	%r14
    000000ed: 	retq # Offset: 237
.Ltmp1206:
    000000ee: 	movq	0x7d8(%rsp), %rax
    000000f6: 	subq	%fs:0x28, %rax
    000000ff: 	jne	.Ltmp1207 # Offset: 255
    00000101: 	addq	$0x7e0, %rsp
    00000108: 	movq	%r14, %r8
    0000010b: 	movq	%r12, %rcx
    0000010e: 	movq	%r13, %rdx
    00000111: 	popq	%rbx
    00000112: 	leaq	DATAat0x15118(%rip), %rsi
    00000119: 	popq	%rbp
    0000011a: 	movl	$0x1, %edi
    0000011f: 	popq	%r12
    00000121: 	xorl	%eax, %eax
    00000123: 	popq	%r13
    00000125: 	popq	%r14
    00000127: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 295
.Ltmp1207:
    0000012c: 	callq	__stack_chk_fail@PLT # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_setbitsStdIPFvRSt6bitsetILm15994EEEEvS2_mT_PKc"

Binary Function "_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc" after disassembly {
  Number      : 203
  State       : disassembled
  Address     : 0x14280
  Size        : 0x135
  MaxSize     : 0x140
  Offset      : 0x14280
  Section     : .text
  Orc Section : .local.text._Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0202:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdx, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%r8, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdi, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	subq	$0x7e8, %rsp
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x7d8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	movl	iterations(%rip), %eax
    00000049: 	testl	%eax, %eax
    0000004b: 	jle	.Ltmp1208 # Offset: 75
    0000004d: 	xorl	%ebx, %ebx
    0000004f: 	nop # Size: 1
.Ltmp1209:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbp, %rdi
    00000056: 	addl	$0x1, %ebx
    00000059: 	callq	*%r15 # Offset: 89
    0000005c: 	cmpl	%ebx, iterations(%rip)
    00000062: 	jg	.Ltmp1209 # Offset: 98
.Ltmp1208:
    00000064: 	callq	clock@PLT # Offset: 100
    00000069: 	movq	%r13, %rdi
    0000006c: 	pxor	%xmm0, %xmm0
    00000070: 	movq	%rsp, %rbx
    00000073: 	movq	%rax, end_time(%rip)
    0000007a: 	subq	start_time(%rip), %rax
    00000081: 	xorl	%r12d, %r12d
    00000084: 	cvtsi2sd	%rax, %xmm0
    00000089: 	divsd	DATAat0x165b8(%rip), %xmm0
    00000091: 	callq	_Z13record_resultdPKc # Offset: 145
    00000096: 	movq	%rbp, %rsi
    00000099: 	movq	%rsp, %rdi
    0000009c: 	movl	$0xfa, %ecx
    000000a1: 	rep		movsq	(%rsi), %es:(%rdi)
    000000a4: 	leaq	0x7d0(%rsp), %rbp
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1210:
    000000b0: 	movq	(%rbx), %rdi
    000000b3: 	addq	$0x8, %rbx
    000000b7: 	callq	__popcountdi2@PLT # Offset: 183
    000000bc: 	cltq
    000000be: 	addq	%rax, %r12
    000000c1: 	cmpq	%rbx, %rbp
    000000c4: 	jne	.Ltmp1210 # Offset: 196
    000000c6: 	cmpq	%r12, %r14
    000000c9: 	jne	.Ltmp1211 # Offset: 201
    000000cb: 	movq	0x7d8(%rsp), %rax
    000000d3: 	subq	%fs:0x28, %rax
    000000dc: 	jne	.Ltmp1212 # Offset: 220
    000000de: 	addq	$0x7e8, %rsp
    000000e5: 	popq	%rbx
    000000e6: 	popq	%rbp
    000000e7: 	popq	%r12
    000000e9: 	popq	%r13
    000000eb: 	popq	%r14
    000000ed: 	popq	%r15
    000000ef: 	retq # Offset: 239
.Ltmp1211:
    000000f0: 	movq	0x7d8(%rsp), %rax
    000000f8: 	subq	%fs:0x28, %rax
    00000101: 	jne	.Ltmp1212 # Offset: 257
    00000103: 	addq	$0x7e8, %rsp
    0000010a: 	movq	%r14, %r8
    0000010d: 	movq	%r12, %rcx
    00000110: 	movq	%r13, %rdx
    00000113: 	popq	%rbx
    00000114: 	leaq	DATAat0x15118(%rip), %rsi
    0000011b: 	popq	%rbp
    0000011c: 	movl	$0x1, %edi
    00000121: 	popq	%r12
    00000123: 	xorl	%eax, %eax
    00000125: 	popq	%r13
    00000127: 	popq	%r14
    00000129: 	popq	%r15
    0000012b: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 299
.Ltmp1212:
    00000130: 	callq	__stack_chk_fail@PLT # Offset: 304
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_mergebitsStdIPFvRSt6bitsetILm15994EERKS1_EEvS2_S4_mT_PKc"

Binary Function "_Z16test_blitbitsStdIPFvRSt6bitsetILm15994EERKS1_S4_EEvS2_S4_S4_mT_PKc" after disassembly {
  Number      : 204
  State       : disassembled
  Address     : 0x143c0
  Size        : 0x149
  MaxSize     : 0x149
  Offset      : 0x143c0
  Section     : .text
  Orc Section : .local.text._Z16test_blitbitsStdIPFvRSt6bitsetILm15994EERKS1_S4_EEvS2_S4_S4_mT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0203:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r9, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x7f8, %rsp
    00000024: 	movq	%rcx, 0x8(%rsp)
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x7e8(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	callq	clock@PLT # Offset: 60
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp1213 # Offset: 80
    00000052: 	xorl	%r14d, %r14d
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1214:
    00000058: 	movq	%r12, %rdx
    0000005b: 	movq	%rbp, %rsi
    0000005e: 	movq	%rbx, %rdi
    00000061: 	addl	$0x1, %r14d
    00000065: 	callq	*%r15 # Offset: 101
    00000068: 	cmpl	%r14d, iterations(%rip)
    0000006f: 	jg	.Ltmp1214 # Offset: 111
.Ltmp1213:
    00000071: 	callq	clock@PLT # Offset: 113
    00000076: 	movq	%r13, %rdi
    00000079: 	pxor	%xmm0, %xmm0
    0000007d: 	xorl	%r12d, %r12d
    00000080: 	movq	%rax, end_time(%rip)
    00000087: 	subq	start_time(%rip), %rax
    0000008e: 	leaq	0x7e0(%rsp), %rbp
    00000096: 	cvtsi2sd	%rax, %xmm0
    0000009b: 	divsd	DATAat0x165b8(%rip), %xmm0
    000000a3: 	callq	_Z13record_resultdPKc # Offset: 163
    000000a8: 	movq	%rbx, %rsi
    000000ab: 	leaq	0x10(%rsp), %rdi
    000000b0: 	movl	$0xfa, %ecx
    000000b5: 	rep		movsq	(%rsi), %es:(%rdi)
    000000b8: 	leaq	0x10(%rsp), %rbx
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp1215:
    000000c0: 	movq	(%rbx), %rdi
    000000c3: 	addq	$0x8, %rbx
    000000c7: 	callq	__popcountdi2@PLT # Offset: 199
    000000cc: 	cltq
    000000ce: 	addq	%rax, %r12
    000000d1: 	cmpq	%rbx, %rbp
    000000d4: 	jne	.Ltmp1215 # Offset: 212
    000000d6: 	cmpq	%r12, 0x8(%rsp)
    000000db: 	jne	.Ltmp1216 # Offset: 219
    000000dd: 	movq	0x7e8(%rsp), %rax
    000000e5: 	subq	%fs:0x28, %rax
    000000ee: 	jne	.Ltmp1217 # Offset: 238
    000000f0: 	addq	$0x7f8, %rsp
    000000f7: 	popq	%rbx
    000000f8: 	popq	%rbp
    000000f9: 	popq	%r12
    000000fb: 	popq	%r13
    000000fd: 	popq	%r14
    000000ff: 	popq	%r15
    00000101: 	retq # Offset: 257
.Ltmp1216:
    00000102: 	movq	0x7e8(%rsp), %rax
    0000010a: 	subq	%fs:0x28, %rax
    00000113: 	jne	.Ltmp1217 # Offset: 275
    00000115: 	movq	0x8(%rsp), %r8
    0000011a: 	movq	%r12, %rcx
    0000011d: 	movq	%r13, %rdx
    00000120: 	movl	$0x1, %edi
    00000125: 	addq	$0x7f8, %rsp
    0000012c: 	leaq	DATAat0x15118(%rip), %rsi
    00000133: 	xorl	%eax, %eax
    00000135: 	popq	%rbx
    00000136: 	popq	%rbp
    00000137: 	popq	%r12
    00000139: 	popq	%r13
    0000013b: 	popq	%r14
    0000013d: 	popq	%r15
    0000013f: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 319
.Ltmp1217:
    00000144: 	callq	__stack_chk_fail@PLT # Offset: 324
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_blitbitsStdIPFvRSt6bitsetILm15994EERKS1_S4_EEvS2_S4_S4_mT_PKc"

Binary Function "_fini" after disassembly {
  Number      : 205
  State       : disassembled
  Address     : 0x1450c
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x1450c
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0204:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 206 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 733 instructions were shortened
BOLT-INFO: removed 289 empty blocks
BOLT-INFO: SCTC: patched 1 tail calls (1 forward) tail calls (0 backward) from a total of 1 while removing 0 double jumps and removing 1 basic blocks totalling 5 bytes of code. CTCs total execution count is 0 and the number of times CTCs are taken is 0
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 203 out of 219 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x2046ec
