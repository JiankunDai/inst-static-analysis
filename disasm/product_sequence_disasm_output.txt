BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0xa030, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x9ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x1430
  Size        : 0xbf
  MaxSize     : 0xc0
  Offset      : 0x1430
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x7150(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x7136(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIfEvv # Offset: 100
    00000069: 	callq	_Z11TestOneTypeIdEvv # Offset: 105
    0000006e: 	popq	%rbx
    0000006f: 	xorl	%eax, %eax
    00000071: 	popq	%rbp
    00000072: 	popq	%r12
    00000074: 	popq	%r13
    00000076: 	popq	%r14
    00000078: 	retq # Offset: 120
.Ltmp3:
    00000079: 	movq	0x8(%r14), %rdi
    0000007d: 	movl	$0xa, %edx
    00000082: 	xorl	%esi, %esi
    00000084: 	callq	strtol@PLT # Offset: 132
    00000089: 	movl	%eax, iterations(%rip)
    0000008f: 	cmpl	$0x2, %r13d
    00000093: 	jle	.Ltmp4 # Offset: 147
    00000095: 	movq	0x10(%r14), %rdi
    00000099: 	xorl	%esi, %esi
    0000009b: 	callq	strtod@PLT # Offset: 155
    000000a0: 	movsd	%xmm0, init_value(%rip)
    000000a8: 	jmp	.Ltmp4 # Offset: 168
.Ltmp1:
    000000aa: 	leaq	DATAat0x7136(%rip), %rsi
    000000b1: 	movl	$0x1, %edi
    000000b6: 	xorl	%eax, %eax
    000000b8: 	callq	__printf_chk@PLT # Offset: 184
    000000bd: 	jmp	.Ltmp4 # Offset: 189
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x15d0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15d0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x9fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1600
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1600
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x9fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1630
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1630
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x9ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1670
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1670
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16b0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16b0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x16c0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x16c0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp9 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp10 # Offset: 38
.Ltmp9:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp11 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp10:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp11:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x7008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x1760
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1760
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp12 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp13 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp14:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp14 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp27:
    00000069: 	leaq	DATAat0x7152(%rip), %rbp
    00000070: 	leaq	DATAat0x7028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x7068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp15 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x7298(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x7098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x7290(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp16 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp20:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp17 # Offset: 244
    000000fa: 	movq	DATAat0x7288(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp21:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x7288(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp18 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp18:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x7137(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x7298(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp19 # Offset: 398
.Ltmp16:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp20 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp21 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp17:
    000001c8: 	movq	DATAat0x72d0(%rip), %rsi
    000001cf: 	movq	DATAat0x7288(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp18 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp19:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp15 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp22 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp23:
    00000210: 	addq	$0x10, %rax
.Ltmp22:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp23 # Offset: 542
.Ltmp28:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x70c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp24 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp25 # Offset: 592
.Ltmp24:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp12:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp25:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp26:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp26 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x7112(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp12 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp13:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp27 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp15:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp28 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1a90
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1a90
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp29 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp30 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp31:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp31 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp36:
    0000006a: 	leaq	DATAat0x7152(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x70f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x7138(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x7152(%rip), %r8
    000000a1: 	leaq	DATAat0x7126(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp32 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp33:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x7137(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp33 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp32 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp34 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp35:
    00000140: 	addq	$0x10, %rax
.Ltmp34:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp35 # Offset: 334
.Ltmp37:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x70c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp29:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp30:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp36 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp32:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp37 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1c40
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1c40
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1c60
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1c60
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x7290(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1ca0
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1ca0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1cb0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1cb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1d00
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1d00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1d50
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1d50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1d80
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1d80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1db0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1db0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1de0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1de0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1e10
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1e10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1e40
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1e40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1e70
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1e70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1ea0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1ea0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1ed0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1ed0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1f00
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1f00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x1f30
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1f30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x1f60
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x1f60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x1fa0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1fa0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x1fd0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1fd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x2000
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2000
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x2030
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2030
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2060
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2060
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2090
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2090
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x20c0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x20f0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x2120
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2120
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x2150
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2150
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2180
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2180
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 41
  State       : disassembled
  Address     : 0x21b0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x21b0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp38 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp41:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp40:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp39 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp40 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp41 # Offset: 142
.Ltmp38:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp42 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp43 # Offset: 164
.Ltmp46:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp44 # Offset: 177
.Ltmp45:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp43 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp45 # Offset: 214
.Ltmp44:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp46 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp47 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp49:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp48 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp48:
    0000010a: 	addq	$0x20, %r13
.Ltmp43:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp49 # Offset: 275
.Ltmp47:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp50 # Offset: 283
.Ltmp56:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp51 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp52:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp52 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp51:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp39:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp40 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp41 # Offset: 389
    0000018b: 	jmp	.Ltmp38 # Offset: 395
.Ltmp42:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp47 # Offset: 405
.Ltmp55:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp53 # Offset: 422
.Ltmp54:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp47 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp54 # Offset: 463
.Ltmp53:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp55 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp56 # Offset: 482
.Ltmp50:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x23b0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x23b0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp57 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp58 # Offset: 152
.Ltmp69:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp59 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp60 # Offset: 204
.Ltmp59:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp61 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp62 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp64:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp63 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp62:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp64 # Offset: 339
    00000155: 	jmp	.Ltmp65 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp58:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp66 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp67 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp68 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp68:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp71:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp69 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp61:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp65:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp64 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp66:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp70 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp71 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp71 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp70:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp71 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp71 # Offset: 696
.Ltmp60:
    000002bd: 	leaq	DATAat0x7188(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp67:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp72 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp72:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp57:
    000002e0: 	leaq	DATAat0x7158(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp63:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z11TestOneTypeIfEvv" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x26e0
  Size        : 0x1e46
  MaxSize     : 0x1e50
  Offset      : 0x26e0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIfEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x3e80, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0xc8, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0xb8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0x80(%rsp), %rax
    00000035: 	movl	$0x616f6c66, 0x80(%rsp)
    00000040: 	movq	%rax, 0x58(%rsp)
    00000045: 	movq	%rax, 0x70(%rsp)
    0000004a: 	movb	$0x74, 0x84(%rsp)
    00000052: 	movq	$0x5, 0x78(%rsp)
    0000005b: 	movb	$0x0, 0x85(%rsp)
    00000063: 	callq	_Znam@PLT # Offset: 99
    00000068: 	pxor	%xmm0, %xmm0
    0000006c: 	movq	%rax, %rbp
    0000006f: 	leaq	0x3e80(%rax), %rbx
    00000076: 	cvtsd2ss	init_value(%rip), %xmm0
    0000007e: 	shufps	$0x0, %xmm0, %xmm0
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp73:
    00000088: 	movups	%xmm0, (%rax)
    0000008b: 	addq	$0x10, %rax
    0000008f: 	cmpq	%rax, %rbx
    00000092: 	jne	.Ltmp73 # Offset: 146
    00000094: 	movq	0x70(%rsp), %r14
    00000099: 	movq	0x78(%rsp), %r13
    0000009e: 	leaq	0xa0(%rsp), %r12
    000000a6: 	movq	%r12, 0x90(%rsp)
    000000ae: 	movq	%r14, %rax
    000000b1: 	addq	%r13, %rax
    000000b4: 	je	.Ltmp74 # Offset: 180
    000000b6: 	testq	%r14, %r14
    000000b9: 	je	.Ltmp75 # Offset: 185
.Ltmp74:
    000000bf: 	movq	%r13, 0x68(%rsp)
    000000c4: 	cmpq	$0xf, %r13
    000000c8: 	ja	.Ltmp76 # Offset: 200
    000000ce: 	cmpq	$0x1, %r13
    000000d2: 	jne	.Ltmp77 # Offset: 210
    000000d8: 	movzbl	(%r14), %eax
    000000dc: 	movb	%al, 0xa0(%rsp)
    000000e3: 	movq	%r12, %rax
.Ltmp211:
    000000e6: 	movq	%r13, 0x98(%rsp)
    000000ee: 	movb	$0x0, (%rax,%r13)
    000000f3: 	movabsq	$0x3fffffffffffffff, %rax
    000000fd: 	subq	0x98(%rsp), %rax
    00000105: 	cmpq	$0x11, %rax
    00000109: 	jbe	.Ltmp78 # Offset: 265
    0000010f: 	leaq	0x90(%rsp), %r14
    00000117: 	movl	$0x12, %edx
    0000011c: 	leaq	DATAat0x71c7(%rip), %rsi
    00000123: 	movq	%r14, %rdi
    00000126: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 294
    0000012b: 	callq	clock@PLT # Offset: 299
    00000130: 	movl	iterations(%rip), %esi
    00000136: 	movq	%rax, start_time(%rip)
    0000013d: 	testl	%esi, %esi
    0000013f: 	jle	.Ltmp79 # Offset: 319
    00000145: 	movss	DATAat0x72b0(%rip), %xmm5
    0000014d: 	xorl	%r13d, %r13d
    00000150: 	leaq	DATAat0x71da(%rip), %r15
    00000157: 	movss	%xmm5, 0x20(%rsp)
    0000015d: 	movsd	DATAat0x72a0(%rip), %xmm5
    00000165: 	movsd	%xmm5, 0x8(%rsp)
    0000016b: 	movq	DATAat0x72c0(%rip), %xmm5
    00000173: 	movaps	%xmm5, 0x10(%rsp)
    00000178: 	movsd	DATAat0x72a8(%rip), %xmm5
    00000180: 	movsd	%xmm5, 0x50(%rsp)
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp82:
    00000190: 	movss	0x20(%rsp), %xmm2
    00000196: 	movq	%rbp, %rax
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp80:
    000001a0: 	mulss	(%rax), %xmm2
    000001a4: 	addq	$0x4, %rax
    000001a8: 	cmpq	%rax, %rbx
    000001ab: 	jne	.Ltmp80 # Offset: 427
    000001ad: 	movsd	0x8(%rsp), %xmm1
    000001b3: 	movsd	init_value(%rip), %xmm0
    000001bb: 	movss	%xmm2, 0x30(%rsp)
    000001c1: 	callq	pow@PLT # Offset: 449
    000001c6: 	movss	0x30(%rsp), %xmm2
    000001cc: 	cvtss2sd	%xmm2, %xmm2
    000001d0: 	subsd	%xmm0, %xmm2
    000001d4: 	andpd	0x10(%rsp), %xmm2
    000001da: 	comisd	0x50(%rsp), %xmm2
    000001e0: 	ja	.Ltmp81 # Offset: 480
.Ltmp212:
    000001e6: 	addl	$0x1, %r13d
    000001ea: 	cmpl	iterations(%rip), %r13d
    000001f1: 	jl	.Ltmp82 # Offset: 497
.Ltmp79:
    000001f3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001fa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000201: 	subq	$0x20, %rax
    00000205: 	cmpq	%rax, %r15
    00000208: 	je	.Ltmp83 # Offset: 520
    0000020e: 	leaq	0x10(%r15), %rdi
    00000212: 	movq	0x98(%rsp), %r13
    0000021a: 	movq	%rdi, (%r15)
    0000021d: 	movq	0x90(%rsp), %rax
    00000225: 	movq	%rax, %rcx
    00000228: 	movq	%rax, 0x8(%rsp)
    0000022d: 	addq	%r13, %rcx
    00000230: 	je	.Ltmp84 # Offset: 560
    00000232: 	testq	%rax, %rax
    00000235: 	je	.Ltmp85 # Offset: 565
.Ltmp84:
    0000023b: 	movq	%r13, 0x68(%rsp)
    00000240: 	cmpq	$0xf, %r13
    00000244: 	ja	.Ltmp86 # Offset: 580
    0000024a: 	cmpq	$0x1, %r13
    0000024e: 	jne	.Ltmp87 # Offset: 590
    00000254: 	movq	0x8(%rsp), %rax
    00000259: 	movzbl	(%rax), %eax
    0000025c: 	movb	%al, 0x10(%r15)
.Ltmp258:
    00000260: 	movq	%r13, 0x8(%r15)
    00000264: 	movb	$0x0, (%rdi,%r13)
    00000269: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000270: 	addq	$0x20, %rax
    00000274: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp241:
    0000027b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000282: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000289: 	je	.Ltmp88 # Offset: 649
.Ltmp236:
    0000028f: 	movq	-0x20(%rax), %r13
    00000293: 	callq	clock@PLT # Offset: 659
    00000298: 	pxor	%xmm0, %xmm0
    0000029c: 	movq	%rax, end_time(%rip)
    000002a3: 	movq	%r13, %rdi
    000002a6: 	subq	start_time(%rip), %rax
    000002ad: 	cvtsi2sd	%rax, %xmm0
    000002b2: 	divsd	DATAat0x7290(%rip), %xmm0
    000002ba: 	callq	_Z13record_resultdPKc # Offset: 698
    000002bf: 	movq	0x90(%rsp), %rdi
    000002c7: 	cmpq	%r12, %rdi
    000002ca: 	je	.Ltmp89 # Offset: 714
    000002cc: 	movq	0xa0(%rsp), %rax
    000002d4: 	leaq	0x1(%rax), %rsi
    000002d8: 	callq	_ZdlPvm@PLT # Offset: 728
.Ltmp89:
    000002dd: 	movq	0x70(%rsp), %r15
    000002e2: 	movq	0x78(%rsp), %r13
    000002e7: 	movq	%r12, 0x90(%rsp)
    000002ef: 	movq	%r15, %rax
    000002f2: 	addq	%r13, %rax
    000002f5: 	je	.Ltmp90 # Offset: 757
    000002f7: 	testq	%r15, %r15
    000002fa: 	je	.Ltmp91 # Offset: 762
.Ltmp90:
    00000300: 	movq	%r13, 0x68(%rsp)
    00000305: 	cmpq	$0xf, %r13
    00000309: 	ja	.Ltmp92 # Offset: 777
    0000030f: 	cmpq	$0x1, %r13
    00000313: 	jne	.Ltmp93 # Offset: 787
    00000319: 	movzbl	(%r15), %eax
    0000031d: 	movb	%al, 0xa0(%rsp)
    00000324: 	movq	%r12, %rax
.Ltmp231:
    00000327: 	movq	%r13, 0x98(%rsp)
    0000032f: 	movb	$0x0, (%rax,%r13)
    00000334: 	movabsq	$0x3fffffffffffffff, %rax
    0000033e: 	subq	0x98(%rsp), %rax
    00000346: 	cmpq	$0x11, %rax
    0000034a: 	jbe	.Ltmp94 # Offset: 842
    00000350: 	movl	$0x12, %edx
    00000355: 	leaq	DATAat0x71ea(%rip), %rsi
    0000035c: 	movq	%r14, %rdi
    0000035f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 863
    00000364: 	callq	clock@PLT # Offset: 868
    00000369: 	movl	iterations(%rip), %ecx
    0000036f: 	movq	%rax, start_time(%rip)
    00000376: 	testl	%ecx, %ecx
    00000378: 	jle	.Ltmp95 # Offset: 888
    0000037e: 	movss	DATAat0x72b0(%rip), %xmm5
    00000386: 	movsd	DATAat0x72a0(%rip), %xmm6
    0000038e: 	xorl	%r13d, %r13d
    00000391: 	leaq	DATAat0x71da(%rip), %r15
    00000398: 	movss	%xmm5, 0x20(%rsp)
    0000039e: 	movq	DATAat0x72c0(%rip), %xmm5
    000003a6: 	movsd	%xmm6, 0x8(%rsp)
    000003ac: 	movsd	DATAat0x72a8(%rip), %xmm6
    000003b4: 	movaps	%xmm5, 0x10(%rsp)
    000003b9: 	movsd	%xmm6, 0x50(%rsp)
    000003bf: 	nop # Size: 1
.Ltmp98:
    000003c0: 	movss	0x20(%rsp), %xmm2
    000003c6: 	movq	%rbp, %rax
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp96:
    000003d0: 	mulss	(%rax), %xmm2
    000003d4: 	addq	$0x4, %rax
    000003d8: 	cmpq	%rbx, %rax
    000003db: 	jne	.Ltmp96 # Offset: 987
    000003dd: 	movsd	0x8(%rsp), %xmm1
    000003e3: 	movsd	init_value(%rip), %xmm0
    000003eb: 	movss	%xmm2, 0x30(%rsp)
    000003f1: 	callq	pow@PLT # Offset: 1009
    000003f6: 	movss	0x30(%rsp), %xmm2
    000003fc: 	cvtss2sd	%xmm2, %xmm2
    00000400: 	subsd	%xmm0, %xmm2
    00000404: 	andpd	0x10(%rsp), %xmm2
    0000040a: 	comisd	0x50(%rsp), %xmm2
    00000410: 	ja	.Ltmp97 # Offset: 1040
.Ltmp213:
    00000416: 	addl	$0x1, %r13d
    0000041a: 	cmpl	iterations(%rip), %r13d
    00000421: 	jl	.Ltmp98 # Offset: 1057
.Ltmp95:
    00000423: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000042a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000431: 	subq	$0x20, %rax
    00000435: 	cmpq	%rax, %r15
    00000438: 	je	.Ltmp99 # Offset: 1080
    0000043e: 	leaq	0x10(%r15), %rdi
    00000442: 	movq	0x98(%rsp), %r13
    0000044a: 	movq	%rdi, (%r15)
    0000044d: 	movq	0x90(%rsp), %rax
    00000455: 	movq	%rax, %rcx
    00000458: 	movq	%rax, 0x8(%rsp)
    0000045d: 	addq	%r13, %rcx
    00000460: 	je	.Ltmp100 # Offset: 1120
    00000462: 	testq	%rax, %rax
    00000465: 	je	.Ltmp101 # Offset: 1125
.Ltmp100:
    0000046b: 	movq	%r13, 0x68(%rsp)
    00000470: 	cmpq	$0xf, %r13
    00000474: 	ja	.Ltmp102 # Offset: 1140
    0000047a: 	cmpq	$0x1, %r13
    0000047e: 	jne	.Ltmp103 # Offset: 1150
    00000484: 	movq	0x8(%rsp), %rax
    00000489: 	movzbl	(%rax), %eax
    0000048c: 	movb	%al, 0x10(%r15)
.Ltmp255:
    00000490: 	movq	%r13, 0x8(%r15)
    00000494: 	movb	$0x0, (%rdi,%r13)
    00000499: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004a0: 	addq	$0x20, %rax
    000004a4: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp246:
    000004ab: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004b2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004b9: 	je	.Ltmp104 # Offset: 1209
.Ltmp245:
    000004bf: 	movq	-0x20(%rax), %r13
    000004c3: 	callq	clock@PLT # Offset: 1219
    000004c8: 	pxor	%xmm0, %xmm0
    000004cc: 	movq	%rax, end_time(%rip)
    000004d3: 	movq	%r13, %rdi
    000004d6: 	subq	start_time(%rip), %rax
    000004dd: 	cvtsi2sd	%rax, %xmm0
    000004e2: 	divsd	DATAat0x7290(%rip), %xmm0
    000004ea: 	callq	_Z13record_resultdPKc # Offset: 1258
    000004ef: 	movq	0x90(%rsp), %rdi
    000004f7: 	cmpq	%r12, %rdi
    000004fa: 	je	.Ltmp105 # Offset: 1274
    000004fc: 	movq	0xa0(%rsp), %rax
    00000504: 	leaq	0x1(%rax), %rsi
    00000508: 	callq	_ZdlPvm@PLT # Offset: 1288
.Ltmp105:
    0000050d: 	movq	0x70(%rsp), %r15
    00000512: 	movq	0x78(%rsp), %r13
    00000517: 	movq	%r12, 0x90(%rsp)
    0000051f: 	movq	%r15, %rax
    00000522: 	addq	%r13, %rax
    00000525: 	je	.Ltmp106 # Offset: 1317
    00000527: 	testq	%r15, %r15
    0000052a: 	je	.Ltmp107 # Offset: 1322
.Ltmp106:
    00000530: 	movq	%r13, 0x68(%rsp)
    00000535: 	cmpq	$0xf, %r13
    00000539: 	ja	.Ltmp108 # Offset: 1337
    0000053f: 	cmpq	$0x1, %r13
    00000543: 	jne	.Ltmp109 # Offset: 1347
    00000549: 	movzbl	(%r15), %eax
    0000054d: 	movb	%al, 0xa0(%rsp)
    00000554: 	movq	%r12, %rax
.Ltmp233:
    00000557: 	movq	%r13, 0x98(%rsp)
    0000055f: 	movb	$0x0, (%rax,%r13)
    00000564: 	movabsq	$0x3fffffffffffffff, %rax
    0000056e: 	subq	0x98(%rsp), %rax
    00000576: 	cmpq	$0x11, %rax
    0000057a: 	jbe	.Ltmp110 # Offset: 1402
    00000580: 	movl	$0x12, %edx
    00000585: 	leaq	DATAat0x71fd(%rip), %rsi
    0000058c: 	movq	%r14, %rdi
    0000058f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1423
    00000594: 	callq	clock@PLT # Offset: 1428
    00000599: 	movl	iterations(%rip), %edx
    0000059f: 	movq	%rax, start_time(%rip)
    000005a6: 	testl	%edx, %edx
    000005a8: 	jle	.Ltmp111 # Offset: 1448
    000005ae: 	movss	DATAat0x72b0(%rip), %xmm5
    000005b6: 	movsd	DATAat0x72a0(%rip), %xmm6
    000005be: 	xorl	%r13d, %r13d
    000005c1: 	leaq	DATAat0x71da(%rip), %r15
    000005c8: 	movss	%xmm5, 0x20(%rsp)
    000005ce: 	movq	DATAat0x72c0(%rip), %xmm5
    000005d6: 	movsd	%xmm6, 0x8(%rsp)
    000005dc: 	movsd	DATAat0x72a8(%rip), %xmm6
    000005e4: 	movaps	%xmm5, 0x10(%rsp)
    000005e9: 	movsd	%xmm6, 0x50(%rsp)
    000005ef: 	nop # Size: 1
.Ltmp114:
    000005f0: 	movss	0x20(%rsp), %xmm2
    000005f6: 	movq	%rbp, %rax
    000005f9: 	nopl	(%rax) # Size: 7
.Ltmp112:
    00000600: 	mulss	(%rax), %xmm2
    00000604: 	addq	$0x8, %rax
    00000608: 	mulss	-0x4(%rax), %xmm2
    0000060d: 	cmpq	%rax, %rbx
    00000610: 	jne	.Ltmp112 # Offset: 1552
    00000612: 	movsd	0x8(%rsp), %xmm1
    00000618: 	movsd	init_value(%rip), %xmm0
    00000620: 	movss	%xmm2, 0x30(%rsp)
    00000626: 	callq	pow@PLT # Offset: 1574
    0000062b: 	movss	0x30(%rsp), %xmm2
    00000631: 	cvtss2sd	%xmm2, %xmm2
    00000635: 	subsd	%xmm0, %xmm2
    00000639: 	andpd	0x10(%rsp), %xmm2
    0000063f: 	comisd	0x50(%rsp), %xmm2
    00000645: 	ja	.Ltmp113 # Offset: 1605
.Ltmp214:
    0000064b: 	addl	$0x1, %r13d
    0000064f: 	cmpl	iterations(%rip), %r13d
    00000656: 	jl	.Ltmp114 # Offset: 1622
.Ltmp111:
    00000658: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000065f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000666: 	subq	$0x20, %rax
    0000066a: 	cmpq	%rax, %r15
    0000066d: 	je	.Ltmp115 # Offset: 1645
    00000673: 	leaq	0x10(%r15), %rdi
    00000677: 	movq	0x98(%rsp), %r13
    0000067f: 	movq	%rdi, (%r15)
    00000682: 	movq	0x90(%rsp), %rax
    0000068a: 	movq	%rax, %rcx
    0000068d: 	movq	%rax, 0x8(%rsp)
    00000692: 	addq	%r13, %rcx
    00000695: 	je	.Ltmp116 # Offset: 1685
    00000697: 	testq	%rax, %rax
    0000069a: 	je	.Ltmp117 # Offset: 1690
.Ltmp116:
    000006a0: 	movq	%r13, 0x68(%rsp)
    000006a5: 	cmpq	$0xf, %r13
    000006a9: 	ja	.Ltmp118 # Offset: 1705
    000006af: 	cmpq	$0x1, %r13
    000006b3: 	jne	.Ltmp119 # Offset: 1715
    000006b9: 	movq	0x8(%rsp), %rax
    000006be: 	movzbl	(%rax), %eax
    000006c1: 	movb	%al, 0x10(%r15)
.Ltmp261:
    000006c5: 	movq	%r13, 0x8(%r15)
    000006c9: 	movb	$0x0, (%rdi,%r13)
    000006ce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000006dc: 	addq	$0x20, %rax
    000006e0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000006e7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000006ee: 	je	.Ltmp120 # Offset: 1774
.Ltmp247:
    000006f4: 	movq	-0x20(%rax), %r13
    000006f8: 	callq	clock@PLT # Offset: 1784
    000006fd: 	pxor	%xmm0, %xmm0
    00000701: 	movq	%rax, end_time(%rip)
    00000708: 	movq	%r13, %rdi
    0000070b: 	subq	start_time(%rip), %rax
    00000712: 	cvtsi2sd	%rax, %xmm0
    00000717: 	divsd	DATAat0x7290(%rip), %xmm0
    0000071f: 	callq	_Z13record_resultdPKc # Offset: 1823
    00000724: 	movq	0x90(%rsp), %rdi
    0000072c: 	cmpq	%r12, %rdi
    0000072f: 	je	.Ltmp121 # Offset: 1839
    00000731: 	movq	0xa0(%rsp), %rax
    00000739: 	leaq	0x1(%rax), %rsi
    0000073d: 	callq	_ZdlPvm@PLT # Offset: 1853
.Ltmp121:
    00000742: 	movq	0x70(%rsp), %r15
    00000747: 	movq	0x78(%rsp), %r13
    0000074c: 	movq	%r12, 0x90(%rsp)
    00000754: 	movq	%r15, %rax
    00000757: 	addq	%r13, %rax
    0000075a: 	je	.Ltmp122 # Offset: 1882
    0000075c: 	testq	%r15, %r15
    0000075f: 	je	.Ltmp123 # Offset: 1887
.Ltmp122:
    00000765: 	movq	%r13, 0x68(%rsp)
    0000076a: 	cmpq	$0xf, %r13
    0000076e: 	ja	.Ltmp124 # Offset: 1902
    00000774: 	cmpq	$0x1, %r13
    00000778: 	jne	.Ltmp125 # Offset: 1912
    0000077e: 	movzbl	(%r15), %eax
    00000782: 	movb	%al, 0xa0(%rsp)
    00000789: 	movq	%r12, %rax
.Ltmp227:
    0000078c: 	movq	%r13, 0x98(%rsp)
    00000794: 	movb	$0x0, (%rax,%r13)
    00000799: 	movabsq	$0x3fffffffffffffff, %rax
    000007a3: 	subq	0x98(%rsp), %rax
    000007ab: 	cmpq	$0x11, %rax
    000007af: 	jbe	.Ltmp126 # Offset: 1967
    000007b5: 	movl	$0x12, %edx
    000007ba: 	leaq	DATAat0x7210(%rip), %rsi
    000007c1: 	movq	%r14, %rdi
    000007c4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1988
    000007c9: 	callq	clock@PLT # Offset: 1993
    000007ce: 	movl	iterations(%rip), %r15d
    000007d5: 	movq	%rax, start_time(%rip)
    000007dc: 	testl	%r15d, %r15d
    000007df: 	jle	.Ltmp127 # Offset: 2015
    000007e5: 	movss	DATAat0x72b0(%rip), %xmm5
    000007ed: 	movsd	DATAat0x72a0(%rip), %xmm6
    000007f5: 	xorl	%r13d, %r13d
    000007f8: 	movq	DATAat0x72c0(%rip), %xmm4
    00000800: 	movss	%xmm5, 0x20(%rsp)
    00000806: 	movsd	DATAat0x72a8(%rip), %xmm5
    0000080e: 	movsd	%xmm6, 0x8(%rsp)
    00000814: 	movaps	%xmm4, 0x10(%rsp)
    00000819: 	movsd	%xmm5, 0x50(%rsp)
    0000081f: 	nop # Size: 1
.Ltmp130:
    00000820: 	movss	0x20(%rsp), %xmm2
    00000826: 	movq	%rbp, %rax
    00000829: 	nopl	(%rax) # Size: 7
.Ltmp128:
    00000830: 	mulss	(%rax), %xmm2
    00000834: 	addq	$0x10, %rax
    00000838: 	mulss	-0xc(%rax), %xmm2
    0000083d: 	mulss	-0x8(%rax), %xmm2
    00000842: 	mulss	-0x4(%rax), %xmm2
    00000847: 	cmpq	%rax, %rbx
    0000084a: 	jne	.Ltmp128 # Offset: 2122
    0000084c: 	movsd	0x8(%rsp), %xmm1
    00000852: 	movsd	init_value(%rip), %xmm0
    0000085a: 	movss	%xmm2, 0x30(%rsp)
    00000860: 	callq	pow@PLT # Offset: 2144
    00000865: 	movss	0x30(%rsp), %xmm2
    0000086b: 	cvtss2sd	%xmm2, %xmm2
    0000086f: 	subsd	%xmm0, %xmm2
    00000873: 	andpd	0x10(%rsp), %xmm2
    00000879: 	comisd	0x50(%rsp), %xmm2
    0000087f: 	ja	.Ltmp129 # Offset: 2175
.Ltmp218:
    00000885: 	addl	$0x1, %r13d
    00000889: 	cmpl	%r15d, %r13d
    0000088c: 	jl	.Ltmp130 # Offset: 2188
.Ltmp127:
    0000088e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000895: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    0000089c: 	subq	$0x20, %rax
    000008a0: 	cmpq	%rax, %r15
    000008a3: 	je	.Ltmp131 # Offset: 2211
    000008a9: 	leaq	0x10(%r15), %rdi
    000008ad: 	movq	0x98(%rsp), %r13
    000008b5: 	movq	%rdi, (%r15)
    000008b8: 	movq	0x90(%rsp), %rax
    000008c0: 	movq	%rax, %rcx
    000008c3: 	movq	%rax, 0x8(%rsp)
    000008c8: 	addq	%r13, %rcx
    000008cb: 	je	.Ltmp132 # Offset: 2251
    000008cd: 	testq	%rax, %rax
    000008d0: 	je	.Ltmp133 # Offset: 2256
.Ltmp132:
    000008d6: 	movq	%r13, 0x68(%rsp)
    000008db: 	cmpq	$0xf, %r13
    000008df: 	ja	.Ltmp134 # Offset: 2271
    000008e5: 	cmpq	$0x1, %r13
    000008e9: 	jne	.Ltmp135 # Offset: 2281
    000008ef: 	movq	0x8(%rsp), %rax
    000008f4: 	movzbl	(%rax), %eax
    000008f7: 	movb	%al, 0x10(%r15)
.Ltmp251:
    000008fb: 	movq	%r13, 0x8(%r15)
    000008ff: 	movb	$0x0, (%rdi,%r13)
    00000904: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000090b: 	addq	$0x20, %rax
    0000090f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp248:
    00000916: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000091d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000924: 	je	.Ltmp136 # Offset: 2340
.Ltmp243:
    0000092a: 	movq	-0x20(%rax), %r13
    0000092e: 	callq	clock@PLT # Offset: 2350
    00000933: 	pxor	%xmm0, %xmm0
    00000937: 	movq	%rax, end_time(%rip)
    0000093e: 	movq	%r13, %rdi
    00000941: 	subq	start_time(%rip), %rax
    00000948: 	cvtsi2sd	%rax, %xmm0
    0000094d: 	divsd	DATAat0x7290(%rip), %xmm0
    00000955: 	callq	_Z13record_resultdPKc # Offset: 2389
    0000095a: 	movq	0x90(%rsp), %rdi
    00000962: 	cmpq	%r12, %rdi
    00000965: 	je	.Ltmp137 # Offset: 2405
    00000967: 	movq	0xa0(%rsp), %rax
    0000096f: 	leaq	0x1(%rax), %rsi
    00000973: 	callq	_ZdlPvm@PLT # Offset: 2419
.Ltmp137:
    00000978: 	movq	0x70(%rsp), %r15
    0000097d: 	movq	0x78(%rsp), %r13
    00000982: 	movq	%r12, 0x90(%rsp)
    0000098a: 	movq	%r15, %rax
    0000098d: 	addq	%r13, %rax
    00000990: 	je	.Ltmp138 # Offset: 2448
    00000992: 	testq	%r15, %r15
    00000995: 	je	.Ltmp139 # Offset: 2453
.Ltmp138:
    0000099b: 	movq	%r13, 0x68(%rsp)
    000009a0: 	cmpq	$0xf, %r13
    000009a4: 	ja	.Ltmp140 # Offset: 2468
    000009aa: 	cmpq	$0x1, %r13
    000009ae: 	jne	.Ltmp141 # Offset: 2478
    000009b4: 	movzbl	(%r15), %eax
    000009b8: 	movb	%al, 0xa0(%rsp)
    000009bf: 	movq	%r12, %rax
.Ltmp229:
    000009c2: 	movq	%r13, 0x98(%rsp)
    000009ca: 	movb	$0x0, (%rax,%r13)
    000009cf: 	movabsq	$0x3fffffffffffffff, %rax
    000009d9: 	subq	0x98(%rsp), %rax
    000009e1: 	cmpq	$0x11, %rax
    000009e5: 	jbe	.Ltmp142 # Offset: 2533
    000009eb: 	movl	$0x12, %edx
    000009f0: 	leaq	DATAat0x7223(%rip), %rsi
    000009f7: 	movq	%r14, %rdi
    000009fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2554
    000009ff: 	callq	clock@PLT # Offset: 2559
    00000a04: 	movq	%rax, start_time(%rip)
    00000a0b: 	movl	iterations(%rip), %eax
    00000a11: 	testl	%eax, %eax
    00000a13: 	jle	.Ltmp143 # Offset: 2579
    00000a19: 	movsd	DATAat0x72a0(%rip), %xmm7
    00000a21: 	movq	DATAat0x72c0(%rip), %xmm6
    00000a29: 	xorl	%r13d, %r13d
    00000a2c: 	movsd	DATAat0x72a8(%rip), %xmm4
    00000a34: 	movq	DATAat0x72b0(%rip), %r15
    00000a3b: 	movsd	%xmm7, 0x8(%rsp)
    00000a41: 	movaps	%xmm6, 0x10(%rsp)
    00000a46: 	movsd	%xmm4, 0x50(%rsp)
    00000a4c: 	nopl	(%rax) # Size: 4
.Ltmp146:
    00000a50: 	movq	%rbp, %rax
    00000a53: 	movq	%r15, %xmm2
    00000a58: 	nopl	(%rax,%rax) # Size: 8
.Ltmp144:
    00000a60: 	movq	(%rax), %xmm0
    00000a64: 	addq	$0x8, %rax
    00000a68: 	mulps	%xmm0, %xmm2
    00000a6b: 	cmpq	%rax, %rbx
    00000a6e: 	jne	.Ltmp144 # Offset: 2670
    00000a70: 	movsd	0x8(%rsp), %xmm1
    00000a76: 	movsd	init_value(%rip), %xmm0
    00000a7e: 	movlps	%xmm2, 0x20(%rsp)
    00000a83: 	callq	pow@PLT # Offset: 2691
    00000a88: 	movq	0x20(%rsp), %xmm2
    00000a8e: 	movapd	%xmm0, %xmm1
    00000a92: 	movaps	%xmm2, %xmm6
    00000a95: 	shufps	$0xe5, %xmm6, %xmm6
    00000a99: 	movaps	%xmm6, %xmm0
    00000a9c: 	mulss	%xmm2, %xmm0
    00000aa0: 	cvtss2sd	%xmm0, %xmm0
    00000aa4: 	subsd	%xmm1, %xmm0
    00000aa8: 	andpd	0x10(%rsp), %xmm0
    00000aae: 	comisd	0x50(%rsp), %xmm0
    00000ab4: 	ja	.Ltmp145 # Offset: 2740
.Ltmp217:
    00000aba: 	addl	$0x1, %r13d
    00000abe: 	cmpl	iterations(%rip), %r13d
    00000ac5: 	jl	.Ltmp146 # Offset: 2757
.Ltmp143:
    00000ac7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000ace: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000ad5: 	subq	$0x20, %rax
    00000ad9: 	cmpq	%rax, %r15
    00000adc: 	je	.Ltmp147 # Offset: 2780
    00000ae2: 	leaq	0x10(%r15), %rdi
    00000ae6: 	movq	0x98(%rsp), %r13
    00000aee: 	movq	%rdi, (%r15)
    00000af1: 	movq	0x90(%rsp), %rax
    00000af9: 	movq	%rax, %rcx
    00000afc: 	movq	%rax, 0x8(%rsp)
    00000b01: 	addq	%r13, %rcx
    00000b04: 	je	.Ltmp148 # Offset: 2820
    00000b06: 	testq	%rax, %rax
    00000b09: 	je	.Ltmp149 # Offset: 2825
.Ltmp148:
    00000b0f: 	movq	%r13, 0x68(%rsp)
    00000b14: 	cmpq	$0xf, %r13
    00000b18: 	ja	.Ltmp150 # Offset: 2840
    00000b1e: 	cmpq	$0x1, %r13
    00000b22: 	jne	.Ltmp151 # Offset: 2850
    00000b28: 	movq	0x8(%rsp), %rax
    00000b2d: 	movzbl	(%rax), %eax
    00000b30: 	movb	%al, 0x10(%r15)
.Ltmp253:
    00000b34: 	movq	%r13, 0x8(%r15)
    00000b38: 	movb	$0x0, (%rdi,%r13)
    00000b3d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000b44: 	addq	$0x20, %rax
    00000b48: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp244:
    00000b4f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000b56: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000b5d: 	je	.Ltmp152 # Offset: 2909
.Ltmp238:
    00000b63: 	movq	-0x20(%rax), %r13
    00000b67: 	callq	clock@PLT # Offset: 2919
    00000b6c: 	pxor	%xmm0, %xmm0
    00000b70: 	movq	%rax, end_time(%rip)
    00000b77: 	movq	%r13, %rdi
    00000b7a: 	subq	start_time(%rip), %rax
    00000b81: 	cvtsi2sd	%rax, %xmm0
    00000b86: 	divsd	DATAat0x7290(%rip), %xmm0
    00000b8e: 	callq	_Z13record_resultdPKc # Offset: 2958
    00000b93: 	movq	0x90(%rsp), %rdi
    00000b9b: 	cmpq	%r12, %rdi
    00000b9e: 	je	.Ltmp153 # Offset: 2974
    00000ba0: 	movq	0xa0(%rsp), %rax
    00000ba8: 	leaq	0x1(%rax), %rsi
    00000bac: 	callq	_ZdlPvm@PLT # Offset: 2988
.Ltmp153:
    00000bb1: 	movq	0x70(%rsp), %r15
    00000bb6: 	movq	0x78(%rsp), %r13
    00000bbb: 	movq	%r12, 0x90(%rsp)
    00000bc3: 	movq	%r15, %rax
    00000bc6: 	addq	%r13, %rax
    00000bc9: 	je	.Ltmp154 # Offset: 3017
    00000bcb: 	testq	%r15, %r15
    00000bce: 	je	.Ltmp155 # Offset: 3022
.Ltmp154:
    00000bd4: 	movq	%r13, 0x68(%rsp)
    00000bd9: 	cmpq	$0xf, %r13
    00000bdd: 	ja	.Ltmp156 # Offset: 3037
    00000be3: 	cmpq	$0x1, %r13
    00000be7: 	jne	.Ltmp157 # Offset: 3047
    00000bed: 	movzbl	(%r15), %eax
    00000bf1: 	movb	%al, 0xa0(%rsp)
    00000bf8: 	movq	%r12, %rax
.Ltmp225:
    00000bfb: 	movq	%r13, 0x98(%rsp)
    00000c03: 	movb	$0x0, (%rax,%r13)
    00000c08: 	movabsq	$0x3fffffffffffffff, %rax
    00000c12: 	subq	0x98(%rsp), %rax
    00000c1a: 	cmpq	$0x11, %rax
    00000c1e: 	jbe	.Ltmp158 # Offset: 3102
    00000c24: 	movl	$0x12, %edx
    00000c29: 	leaq	DATAat0x7236(%rip), %rsi
    00000c30: 	movq	%r14, %rdi
    00000c33: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3123
    00000c38: 	callq	clock@PLT # Offset: 3128
    00000c3d: 	movl	iterations(%rip), %r15d
    00000c44: 	movq	%rax, start_time(%rip)
    00000c4b: 	testl	%r15d, %r15d
    00000c4e: 	jle	.Ltmp159 # Offset: 3150
    00000c54: 	movsd	DATAat0x72a0(%rip), %xmm5
    00000c5c: 	movq	DATAat0x72c0(%rip), %xmm7
    00000c64: 	xorl	%r13d, %r13d
    00000c67: 	movsd	DATAat0x72a8(%rip), %xmm6
    00000c6f: 	movaps	DATAat0x72b0(%rip), %xmm4
    00000c76: 	movsd	%xmm5, 0x8(%rsp)
    00000c7c: 	movaps	%xmm7, 0x10(%rsp)
    00000c81: 	movsd	%xmm6, 0x50(%rsp)
    00000c87: 	movaps	%xmm4, 0x20(%rsp)
    00000c8c: 	nopl	(%rax) # Size: 4
.Ltmp162:
    00000c90: 	movaps	0x20(%rsp), %xmm2
    00000c95: 	movq	%rbp, %rax
    00000c98: 	nopl	(%rax,%rax) # Size: 8
.Ltmp160:
    00000ca0: 	movups	(%rax), %xmm5
    00000ca3: 	addq	$0x10, %rax
    00000ca7: 	mulps	%xmm5, %xmm2
    00000caa: 	cmpq	%rax, %rbx
    00000cad: 	jne	.Ltmp160 # Offset: 3245
    00000caf: 	movsd	0x8(%rsp), %xmm1
    00000cb5: 	movsd	init_value(%rip), %xmm0
    00000cbd: 	movaps	%xmm2, 0x30(%rsp)
    00000cc2: 	callq	pow@PLT # Offset: 3266
    00000cc7: 	movaps	0x30(%rsp), %xmm2
    00000ccc: 	movapd	%xmm0, %xmm3
    00000cd0: 	movaps	%xmm2, %xmm1
    00000cd3: 	movaps	%xmm2, %xmm0
    00000cd6: 	unpckhps	%xmm2, %xmm1
    00000cd9: 	shufps	$0x55, %xmm2, %xmm0
    00000cdd: 	mulss	%xmm1, %xmm0
    00000ce1: 	movaps	%xmm2, %xmm1
    00000ce4: 	shufps	$0xff, %xmm2, %xmm1
    00000ce8: 	mulss	%xmm1, %xmm0
    00000cec: 	mulss	%xmm2, %xmm0
    00000cf0: 	cvtss2sd	%xmm0, %xmm0
    00000cf4: 	subsd	%xmm3, %xmm0
    00000cf8: 	andpd	0x10(%rsp), %xmm0
    00000cfe: 	comisd	0x50(%rsp), %xmm0
    00000d04: 	ja	.Ltmp161 # Offset: 3332
.Ltmp216:
    00000d0a: 	addl	$0x1, %r13d
    00000d0e: 	cmpl	%r15d, %r13d
    00000d11: 	jl	.Ltmp162 # Offset: 3345
.Ltmp159:
    00000d17: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000d1e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000d25: 	subq	$0x20, %rax
    00000d29: 	cmpq	%rax, %r15
    00000d2c: 	je	.Ltmp163 # Offset: 3372
    00000d32: 	leaq	0x10(%r15), %rdi
    00000d36: 	movq	0x98(%rsp), %r13
    00000d3e: 	movq	%rdi, (%r15)
    00000d41: 	movq	0x90(%rsp), %rax
    00000d49: 	movq	%rax, %rcx
    00000d4c: 	movq	%rax, 0x8(%rsp)
    00000d51: 	addq	%r13, %rcx
    00000d54: 	je	.Ltmp164 # Offset: 3412
    00000d56: 	testq	%rax, %rax
    00000d59: 	je	.Ltmp165 # Offset: 3417
.Ltmp164:
    00000d5f: 	movq	%r13, 0x68(%rsp)
    00000d64: 	cmpq	$0xf, %r13
    00000d68: 	ja	.Ltmp166 # Offset: 3432
    00000d6e: 	cmpq	$0x1, %r13
    00000d72: 	jne	.Ltmp167 # Offset: 3442
    00000d78: 	movq	0x8(%rsp), %rax
    00000d7d: 	movzbl	(%rax), %eax
    00000d80: 	movb	%al, 0x10(%r15)
.Ltmp256:
    00000d84: 	movq	%r13, 0x8(%r15)
    00000d88: 	movb	$0x0, (%rdi,%r13)
    00000d8d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d94: 	addq	$0x20, %rax
    00000d98: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp240:
    00000d9f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000da6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000dad: 	je	.Ltmp168 # Offset: 3501
.Ltmp239:
    00000db3: 	movq	-0x20(%rax), %r13
    00000db7: 	callq	clock@PLT # Offset: 3511
    00000dbc: 	pxor	%xmm0, %xmm0
    00000dc0: 	movq	%rax, end_time(%rip)
    00000dc7: 	movq	%r13, %rdi
    00000dca: 	subq	start_time(%rip), %rax
    00000dd1: 	cvtsi2sd	%rax, %xmm0
    00000dd6: 	divsd	DATAat0x7290(%rip), %xmm0
    00000dde: 	callq	_Z13record_resultdPKc # Offset: 3550
    00000de3: 	movq	0x90(%rsp), %rdi
    00000deb: 	cmpq	%r12, %rdi
    00000dee: 	je	.Ltmp169 # Offset: 3566
    00000df0: 	movq	0xa0(%rsp), %rax
    00000df8: 	leaq	0x1(%rax), %rsi
    00000dfc: 	callq	_ZdlPvm@PLT # Offset: 3580
.Ltmp169:
    00000e01: 	movq	0x70(%rsp), %r15
    00000e06: 	movq	0x78(%rsp), %r13
    00000e0b: 	movq	%r12, 0x90(%rsp)
    00000e13: 	movq	%r15, %rax
    00000e16: 	addq	%r13, %rax
    00000e19: 	je	.Ltmp170 # Offset: 3609
    00000e1b: 	testq	%r15, %r15
    00000e1e: 	je	.Ltmp171 # Offset: 3614
.Ltmp170:
    00000e24: 	movq	%r13, 0x68(%rsp)
    00000e29: 	cmpq	$0xf, %r13
    00000e2d: 	ja	.Ltmp172 # Offset: 3629
    00000e33: 	cmpq	$0x1, %r13
    00000e37: 	jne	.Ltmp173 # Offset: 3639
    00000e3d: 	movzbl	(%r15), %eax
    00000e41: 	movb	%al, 0xa0(%rsp)
    00000e48: 	movq	%r12, %rax
.Ltmp223:
    00000e4b: 	movq	%r13, 0x98(%rsp)
    00000e53: 	movb	$0x0, (%rax,%r13)
    00000e58: 	movabsq	$0x3fffffffffffffff, %rax
    00000e62: 	subq	0x98(%rsp), %rax
    00000e6a: 	cmpq	$0x11, %rax
    00000e6e: 	jbe	.Ltmp174 # Offset: 3694
    00000e74: 	movl	$0x12, %edx
    00000e79: 	leaq	DATAat0x7249(%rip), %rsi
    00000e80: 	movq	%r14, %rdi
    00000e83: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3715
    00000e88: 	callq	clock@PLT # Offset: 3720
    00000e8d: 	movl	iterations(%rip), %r15d
    00000e94: 	movq	%rax, start_time(%rip)
    00000e9b: 	testl	%r15d, %r15d
    00000e9e: 	jle	.Ltmp175 # Offset: 3742
    00000ea4: 	movsd	DATAat0x72a0(%rip), %xmm5
    00000eac: 	movq	DATAat0x72c0(%rip), %xmm7
    00000eb4: 	xorl	%r13d, %r13d
    00000eb7: 	movsd	DATAat0x72a8(%rip), %xmm6
    00000ebf: 	movaps	DATAat0x72b0(%rip), %xmm4
    00000ec6: 	movsd	%xmm5, 0x8(%rsp)
    00000ecc: 	movaps	%xmm7, 0x10(%rsp)
    00000ed1: 	movsd	%xmm6, 0x50(%rsp)
    00000ed7: 	movaps	%xmm4, 0x20(%rsp)
    00000edc: 	nopl	(%rax) # Size: 4
.Ltmp178:
    00000ee0: 	movaps	0x20(%rsp), %xmm2
    00000ee5: 	movq	%rbp, %rax
    00000ee8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp176:
    00000ef0: 	movups	(%rax), %xmm6
    00000ef3: 	addq	$0x10, %rax
    00000ef7: 	mulps	%xmm6, %xmm2
    00000efa: 	cmpq	%rax, %rbx
    00000efd: 	jne	.Ltmp176 # Offset: 3837
    00000eff: 	movsd	0x8(%rsp), %xmm1
    00000f05: 	movsd	init_value(%rip), %xmm0
    00000f0d: 	movaps	%xmm2, 0x30(%rsp)
    00000f12: 	callq	pow@PLT # Offset: 3858
    00000f17: 	movaps	0x30(%rsp), %xmm2
    00000f1c: 	movapd	%xmm0, %xmm3
    00000f20: 	movaps	%xmm2, %xmm1
    00000f23: 	movaps	%xmm2, %xmm0
    00000f26: 	unpckhps	%xmm2, %xmm1
    00000f29: 	shufps	$0x55, %xmm2, %xmm0
    00000f2d: 	mulss	%xmm1, %xmm0
    00000f31: 	movaps	%xmm2, %xmm1
    00000f34: 	shufps	$0xff, %xmm2, %xmm1
    00000f38: 	mulss	%xmm1, %xmm0
    00000f3c: 	mulss	%xmm2, %xmm0
    00000f40: 	cvtss2sd	%xmm0, %xmm0
    00000f44: 	subsd	%xmm3, %xmm0
    00000f48: 	andpd	0x10(%rsp), %xmm0
    00000f4e: 	comisd	0x50(%rsp), %xmm0
    00000f54: 	ja	.Ltmp177 # Offset: 3924
.Ltmp215:
    00000f5a: 	addl	$0x1, %r13d
    00000f5e: 	cmpl	%r15d, %r13d
    00000f61: 	jl	.Ltmp178 # Offset: 3937
.Ltmp175:
    00000f67: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000f6e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000f75: 	subq	$0x20, %rax
    00000f79: 	cmpq	%rax, %r15
    00000f7c: 	je	.Ltmp179 # Offset: 3964
    00000f82: 	leaq	0x10(%r15), %rdi
    00000f86: 	movq	0x98(%rsp), %r13
    00000f8e: 	movq	%rdi, (%r15)
    00000f91: 	movq	0x90(%rsp), %rax
    00000f99: 	movq	%rax, %rcx
    00000f9c: 	movq	%rax, 0x8(%rsp)
    00000fa1: 	addq	%r13, %rcx
    00000fa4: 	je	.Ltmp180 # Offset: 4004
    00000fa6: 	testq	%rax, %rax
    00000fa9: 	je	.Ltmp181 # Offset: 4009
.Ltmp180:
    00000faf: 	movq	%r13, 0x68(%rsp)
    00000fb4: 	cmpq	$0xf, %r13
    00000fb8: 	ja	.Ltmp182 # Offset: 4024
    00000fbe: 	cmpq	$0x1, %r13
    00000fc2: 	jne	.Ltmp183 # Offset: 4034
    00000fc8: 	movq	0x8(%rsp), %rax
    00000fcd: 	movzbl	(%rax), %eax
    00000fd0: 	movb	%al, 0x10(%r15)
.Ltmp259:
    00000fd4: 	movq	%r13, 0x8(%r15)
    00000fd8: 	movb	$0x0, (%rdi,%r13)
    00000fdd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000fe4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000feb: 	addq	$0x20, %rax
    00000fef: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000ff6: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000ffd: 	je	.Ltmp184 # Offset: 4093
.Ltmp237:
    00001003: 	movq	-0x20(%rax), %r13
    00001007: 	callq	clock@PLT # Offset: 4103
    0000100c: 	pxor	%xmm0, %xmm0
    00001010: 	movq	%rax, end_time(%rip)
    00001017: 	movq	%r13, %rdi
    0000101a: 	subq	start_time(%rip), %rax
    00001021: 	cvtsi2sd	%rax, %xmm0
    00001026: 	divsd	DATAat0x7290(%rip), %xmm0
    0000102e: 	callq	_Z13record_resultdPKc # Offset: 4142
    00001033: 	movq	0x90(%rsp), %rdi
    0000103b: 	cmpq	%r12, %rdi
    0000103e: 	je	.Ltmp185 # Offset: 4158
    00001040: 	movq	0xa0(%rsp), %rax
    00001048: 	leaq	0x1(%rax), %rsi
    0000104c: 	callq	_ZdlPvm@PLT # Offset: 4172
.Ltmp185:
    00001051: 	movq	0x70(%rsp), %r15
    00001056: 	movq	0x78(%rsp), %r13
    0000105b: 	movq	%r12, 0x90(%rsp)
    00001063: 	movq	%r15, %rax
    00001066: 	addq	%r13, %rax
    00001069: 	je	.Ltmp186 # Offset: 4201
    0000106b: 	testq	%r15, %r15
    0000106e: 	je	.Ltmp187 # Offset: 4206
.Ltmp186:
    00001074: 	movq	%r13, 0x68(%rsp)
    00001079: 	cmpq	$0xf, %r13
    0000107d: 	ja	.Ltmp188 # Offset: 4221
    00001083: 	cmpq	$0x1, %r13
    00001087: 	jne	.Ltmp189 # Offset: 4231
    0000108d: 	movzbl	(%r15), %eax
    00001091: 	movb	%al, 0xa0(%rsp)
    00001098: 	movq	%r12, %rax
.Ltmp221:
    0000109b: 	movq	%r13, 0x98(%rsp)
    000010a3: 	movb	$0x0, (%rax,%r13)
    000010a8: 	movabsq	$0x3fffffffffffffff, %rax
    000010b2: 	subq	0x98(%rsp), %rax
    000010ba: 	cmpq	$0x11, %rax
    000010be: 	jbe	.Ltmp190 # Offset: 4286
    000010c4: 	movl	$0x12, %edx
    000010c9: 	leaq	DATAat0x725c(%rip), %rsi
    000010d0: 	movq	%r14, %rdi
    000010d3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4307
    000010d8: 	callq	clock@PLT # Offset: 4312
    000010dd: 	movl	iterations(%rip), %r15d
    000010e4: 	movq	%rax, start_time(%rip)
    000010eb: 	testl	%r15d, %r15d
    000010ee: 	jle	.Ltmp191 # Offset: 4334
    000010f4: 	movsd	DATAat0x72a0(%rip), %xmm5
    000010fc: 	movq	DATAat0x72c0(%rip), %xmm7
    00001104: 	xorl	%r13d, %r13d
    00001107: 	movsd	DATAat0x72a8(%rip), %xmm6
    0000110f: 	movaps	DATAat0x72b0(%rip), %xmm4
    00001116: 	movsd	%xmm5, 0x8(%rsp)
    0000111c: 	movaps	%xmm7, 0x10(%rsp)
    00001121: 	movsd	%xmm6, 0x50(%rsp)
    00001127: 	movaps	%xmm4, 0x20(%rsp)
    0000112c: 	nopl	(%rax) # Size: 4
.Ltmp194:
    00001130: 	movaps	0x20(%rsp), %xmm3
    00001135: 	movq	%rbp, %rax
    00001138: 	movaps	%xmm3, %xmm2
    0000113b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp192:
    00001140: 	movups	(%rax), %xmm7
    00001143: 	movups	0x10(%rax), %xmm4
    00001147: 	addq	$0x20, %rax
    0000114b: 	mulps	%xmm7, %xmm3
    0000114e: 	mulps	%xmm4, %xmm2
    00001151: 	cmpq	%rax, %rbx
    00001154: 	jne	.Ltmp192 # Offset: 4436
    00001156: 	movsd	0x8(%rsp), %xmm1
    0000115c: 	movsd	init_value(%rip), %xmm0
    00001164: 	movaps	%xmm2, 0x40(%rsp)
    00001169: 	movaps	%xmm3, 0x30(%rsp)
    0000116e: 	callq	pow@PLT # Offset: 4462
    00001173: 	movaps	0x30(%rsp), %xmm3
    00001178: 	movaps	0x40(%rsp), %xmm2
    0000117d: 	movapd	%xmm0, %xmm4
    00001181: 	movaps	%xmm3, %xmm0
    00001184: 	movaps	%xmm3, %xmm1
    00001187: 	unpckhps	%xmm3, %xmm0
    0000118a: 	shufps	$0x55, %xmm3, %xmm1
    0000118e: 	mulss	%xmm1, %xmm0
    00001192: 	movaps	%xmm3, %xmm1
    00001195: 	shufps	$0xff, %xmm3, %xmm1
    00001199: 	mulss	%xmm1, %xmm0
    0000119d: 	movaps	%xmm2, %xmm1
    000011a0: 	shufps	$0x55, %xmm2, %xmm1
    000011a4: 	mulss	%xmm3, %xmm0
    000011a8: 	movaps	%xmm2, %xmm3
    000011ab: 	unpckhps	%xmm2, %xmm3
    000011ae: 	mulss	%xmm3, %xmm1
    000011b2: 	movaps	%xmm2, %xmm3
    000011b5: 	shufps	$0xff, %xmm2, %xmm3
    000011b9: 	mulss	%xmm3, %xmm1
    000011bd: 	mulss	%xmm2, %xmm1
    000011c1: 	mulss	%xmm1, %xmm0
    000011c5: 	cvtss2sd	%xmm0, %xmm0
    000011c9: 	subsd	%xmm4, %xmm0
    000011cd: 	andpd	0x10(%rsp), %xmm0
    000011d3: 	comisd	0x50(%rsp), %xmm0
    000011d9: 	ja	.Ltmp193 # Offset: 4569
.Ltmp219:
    000011df: 	addl	$0x1, %r13d
    000011e3: 	cmpl	%r15d, %r13d
    000011e6: 	jl	.Ltmp194 # Offset: 4582
.Ltmp191:
    000011ec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000011f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000011fa: 	subq	$0x20, %rax
    000011fe: 	cmpq	%rax, %rbx
    00001201: 	je	.Ltmp195 # Offset: 4609
    00001207: 	leaq	0x10(%rbx), %rdi
    0000120b: 	movq	0x98(%rsp), %r13
    00001213: 	movq	%rdi, (%rbx)
    00001216: 	movq	0x90(%rsp), %r15
    0000121e: 	movq	%r15, %rax
    00001221: 	addq	%r13, %rax
    00001224: 	je	.Ltmp196 # Offset: 4644
    00001226: 	testq	%r15, %r15
    00001229: 	je	.Ltmp197 # Offset: 4649
.Ltmp196:
    0000122f: 	movq	%r13, 0x68(%rsp)
    00001234: 	cmpq	$0xf, %r13
    00001238: 	ja	.Ltmp198 # Offset: 4664
    0000123e: 	cmpq	$0x1, %r13
    00001242: 	jne	.Ltmp199 # Offset: 4674
    00001248: 	movzbl	(%r15), %eax
    0000124c: 	movb	%al, 0x10(%rbx)
.Ltmp249:
    0000124f: 	movq	%r13, 0x8(%rbx)
    00001253: 	movb	$0x0, (%rdi,%r13)
    00001258: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000125f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001266: 	addq	$0x20, %rax
    0000126a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001271: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001278: 	je	.Ltmp200 # Offset: 4728
.Ltmp242:
    0000127e: 	movq	-0x20(%rax), %r13
    00001282: 	callq	clock@PLT # Offset: 4738
    00001287: 	pxor	%xmm0, %xmm0
    0000128b: 	movq	%rax, end_time(%rip)
    00001292: 	movq	%r13, %rdi
    00001295: 	subq	start_time(%rip), %rax
    0000129c: 	cvtsi2sd	%rax, %xmm0
    000012a1: 	divsd	DATAat0x7290(%rip), %xmm0
    000012a9: 	callq	_Z13record_resultdPKc # Offset: 4777
    000012ae: 	movq	0x90(%rsp), %rdi
    000012b6: 	cmpq	%r12, %rdi
    000012b9: 	je	.Ltmp201 # Offset: 4793
    000012bb: 	movq	0xa0(%rsp), %rax
    000012c3: 	leaq	0x1(%rax), %rsi
    000012c7: 	callq	_ZdlPvm@PLT # Offset: 4807
.Ltmp201:
    000012cc: 	movq	0x70(%rsp), %r15
    000012d1: 	movq	0x78(%rsp), %r13
    000012d6: 	movq	%r12, 0x90(%rsp)
    000012de: 	movq	%r15, %rax
    000012e1: 	addq	%r13, %rax
    000012e4: 	je	.Ltmp202 # Offset: 4836
    000012e6: 	testq	%r15, %r15
    000012e9: 	je	.Ltmp203 # Offset: 4841
.Ltmp202:
    000012ef: 	movq	%r13, 0x68(%rsp)
    000012f4: 	cmpq	$0xf, %r13
    000012f8: 	ja	.Ltmp204 # Offset: 4856
    000012fe: 	cmpq	$0x1, %r13
    00001302: 	jne	.Ltmp205 # Offset: 4866
    00001308: 	movzbl	(%r15), %eax
    0000130c: 	movb	%al, 0xa0(%rsp)
    00001313: 	movq	%r12, %rax
.Ltmp235:
    00001316: 	movq	%r13, 0x98(%rsp)
    0000131e: 	movb	$0x0, (%rax,%r13)
    00001323: 	movabsq	$0x3fffffffffffffff, %rax
    0000132d: 	subq	0x98(%rsp), %rax
    00001335: 	cmpq	$0x10, %rax
    00001339: 	jbe	.Ltmp206 # Offset: 4921
    0000133f: 	movl	$0x11, %edx
    00001344: 	leaq	DATAat0x726f(%rip), %rsi
    0000134b: 	movq	%r14, %rdi
    0000134e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4942
    00001353: 	movl	iterations(%rip), %edx
    00001359: 	xorl	%r8d, %r8d
    0000135c: 	xorl	%ecx, %ecx
    0000135e: 	movl	$0xfa0, %esi
    00001363: 	movq	0x90(%rsp), %rdi
    0000136b: 	callq	_Z9summarizePKciiii # Offset: 4971
    00001370: 	movq	0x90(%rsp), %rdi
    00001378: 	cmpq	%r12, %rdi
    0000137b: 	je	.Ltmp207 # Offset: 4987
    0000137d: 	movq	0xa0(%rsp), %rax
    00001385: 	leaq	0x1(%rax), %rsi
    00001389: 	callq	_ZdlPvm@PLT # Offset: 5001
.Ltmp207:
    0000138e: 	movq	%rbp, %rdi
    00001391: 	movl	$0x4, %esi
    00001396: 	callq	_ZdlPvm@PLT # Offset: 5014
    0000139b: 	movq	0x70(%rsp), %rdi
    000013a0: 	cmpq	0x58(%rsp), %rdi
    000013a5: 	je	.Ltmp208 # Offset: 5029
    000013a7: 	movq	0x80(%rsp), %rax
    000013af: 	leaq	0x1(%rax), %rsi
    000013b3: 	callq	_ZdlPvm@PLT # Offset: 5043
.Ltmp208:
    000013b8: 	movq	0xb8(%rsp), %rax
    000013c0: 	subq	%fs:0x28, %rax
    000013c9: 	jne	.Ltmp209 # Offset: 5065
    000013cf: 	addq	$0xc8, %rsp
    000013d6: 	popq	%rbx
    000013d7: 	popq	%rbp
    000013d8: 	popq	%r12
    000013da: 	popq	%r13
    000013dc: 	popq	%r14
    000013de: 	popq	%r15
    000013e0: 	retq # Offset: 5088
.Ltmp77:
    000013e1: 	testq	%r13, %r13
    000013e4: 	jne	.Ltmp210 # Offset: 5092
    000013ea: 	movq	%r12, %rax
    000013ed: 	jmp	.Ltmp211 # Offset: 5101
    000013f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp81:
    000013f8: 	movl	current_test(%rip), %edx
    000013fe: 	movq	%r15, %rsi
    00001401: 	movl	$0x1, %edi
    00001406: 	xorl	%eax, %eax
    00001408: 	callq	__printf_chk@PLT # Offset: 5128
    0000140d: 	jmp	.Ltmp212 # Offset: 5133
    00001412: 	nopw	(%rax,%rax) # Size: 6
.Ltmp97:
    00001418: 	movl	current_test(%rip), %edx
    0000141e: 	movq	%r15, %rsi
    00001421: 	movl	$0x1, %edi
    00001426: 	xorl	%eax, %eax
    00001428: 	callq	__printf_chk@PLT # Offset: 5160
    0000142d: 	jmp	.Ltmp213 # Offset: 5165
    00001432: 	nopw	(%rax,%rax) # Size: 6
.Ltmp113:
    00001438: 	movl	current_test(%rip), %edx
    0000143e: 	movq	%r15, %rsi
    00001441: 	movl	$0x1, %edi
    00001446: 	xorl	%eax, %eax
    00001448: 	callq	__printf_chk@PLT # Offset: 5192
    0000144d: 	jmp	.Ltmp214 # Offset: 5197
    00001452: 	nopw	(%rax,%rax) # Size: 6
.Ltmp177:
    00001458: 	movl	current_test(%rip), %edx
    0000145e: 	leaq	DATAat0x71da(%rip), %rsi
    00001465: 	movl	$0x1, %edi
    0000146a: 	xorl	%eax, %eax
    0000146c: 	callq	__printf_chk@PLT # Offset: 5228
    00001471: 	movl	iterations(%rip), %r15d
    00001478: 	jmp	.Ltmp215 # Offset: 5240
    0000147d: 	nopl	(%rax) # Size: 3
.Ltmp161:
    00001480: 	movl	current_test(%rip), %edx
    00001486: 	leaq	DATAat0x71da(%rip), %rsi
    0000148d: 	movl	$0x1, %edi
    00001492: 	xorl	%eax, %eax
    00001494: 	callq	__printf_chk@PLT # Offset: 5268
    00001499: 	movl	iterations(%rip), %r15d
    000014a0: 	jmp	.Ltmp216 # Offset: 5280
    000014a5: 	nopl	(%rax) # Size: 3
.Ltmp145:
    000014a8: 	movl	current_test(%rip), %edx
    000014ae: 	leaq	DATAat0x71da(%rip), %rsi
    000014b5: 	movl	$0x1, %edi
    000014ba: 	xorl	%eax, %eax
    000014bc: 	callq	__printf_chk@PLT # Offset: 5308
    000014c1: 	jmp	.Ltmp217 # Offset: 5313
    000014c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp129:
    000014d0: 	movl	current_test(%rip), %edx
    000014d6: 	leaq	DATAat0x71da(%rip), %rsi
    000014dd: 	movl	$0x1, %edi
    000014e2: 	xorl	%eax, %eax
    000014e4: 	callq	__printf_chk@PLT # Offset: 5348
    000014e9: 	movl	iterations(%rip), %r15d
    000014f0: 	jmp	.Ltmp218 # Offset: 5360
    000014f5: 	nopl	(%rax) # Size: 3
.Ltmp193:
    000014f8: 	movl	current_test(%rip), %edx
    000014fe: 	leaq	DATAat0x71da(%rip), %rsi
    00001505: 	movl	$0x1, %edi
    0000150a: 	xorl	%eax, %eax
    0000150c: 	callq	__printf_chk@PLT # Offset: 5388
    00001511: 	movl	iterations(%rip), %r15d
    00001518: 	jmp	.Ltmp219 # Offset: 5400
.Ltmp189:
    0000151d: 	testq	%r13, %r13
    00001520: 	jne	.Ltmp220 # Offset: 5408
    00001526: 	movq	%r12, %rax
    00001529: 	jmp	.Ltmp221 # Offset: 5417
.Ltmp173:
    0000152e: 	testq	%r13, %r13
    00001531: 	jne	.Ltmp222 # Offset: 5425
    00001537: 	movq	%r12, %rax
    0000153a: 	jmp	.Ltmp223 # Offset: 5434
.Ltmp157:
    0000153f: 	testq	%r13, %r13
    00001542: 	jne	.Ltmp224 # Offset: 5442
    00001548: 	movq	%r12, %rax
    0000154b: 	jmp	.Ltmp225 # Offset: 5451
.Ltmp125:
    00001550: 	testq	%r13, %r13
    00001553: 	jne	.Ltmp226 # Offset: 5459
    00001559: 	movq	%r12, %rax
    0000155c: 	jmp	.Ltmp227 # Offset: 5468
.Ltmp141:
    00001561: 	testq	%r13, %r13
    00001564: 	jne	.Ltmp228 # Offset: 5476
    0000156a: 	movq	%r12, %rax
    0000156d: 	jmp	.Ltmp229 # Offset: 5485
.Ltmp93:
    00001572: 	testq	%r13, %r13
    00001575: 	jne	.Ltmp230 # Offset: 5493
    0000157b: 	movq	%r12, %rax
    0000157e: 	jmp	.Ltmp231 # Offset: 5502
.Ltmp109:
    00001583: 	testq	%r13, %r13
    00001586: 	jne	.Ltmp232 # Offset: 5510
    0000158c: 	movq	%r12, %rax
    0000158f: 	jmp	.Ltmp233 # Offset: 5519
.Ltmp205:
    00001594: 	testq	%r13, %r13
    00001597: 	jne	.Ltmp234 # Offset: 5527
    0000159d: 	movq	%r12, %rax
    000015a0: 	jmp	.Ltmp235 # Offset: 5536
.Ltmp204:
    000015a5: 	leaq	0x68(%rsp), %rsi
    000015aa: 	xorl	%edx, %edx
    000015ac: 	movq	%r14, %rdi
    000015af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5551
    000015b4: 	movq	%rax, 0x90(%rsp)
    000015bc: 	movq	%rax, %rdi
    000015bf: 	movq	0x68(%rsp), %rax
    000015c4: 	movq	%rax, 0xa0(%rsp)
.Ltmp273:
    000015cc: 	movq	%r13, %rdx
    000015cf: 	movq	%r15, %rsi
    000015d2: 	callq	memcpy@PLT # Offset: 5586
    000015d7: 	movq	0x68(%rsp), %r13
    000015dc: 	movq	0x90(%rsp), %rax
    000015e4: 	jmp	.Ltmp235 # Offset: 5604
.Ltmp108:
    000015e9: 	leaq	0x68(%rsp), %rsi
    000015ee: 	xorl	%edx, %edx
    000015f0: 	movq	%r14, %rdi
    000015f3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5619
    000015f8: 	movq	%rax, 0x90(%rsp)
    00001600: 	movq	%rax, %rdi
    00001603: 	movq	0x68(%rsp), %rax
    00001608: 	movq	%rax, 0xa0(%rsp)
.Ltmp272:
    00001610: 	movq	%r13, %rdx
    00001613: 	movq	%r15, %rsi
    00001616: 	callq	memcpy@PLT # Offset: 5654
    0000161b: 	movq	0x68(%rsp), %r13
    00001620: 	movq	0x90(%rsp), %rax
    00001628: 	jmp	.Ltmp233 # Offset: 5672
.Ltmp124:
    0000162d: 	leaq	0x68(%rsp), %rsi
    00001632: 	xorl	%edx, %edx
    00001634: 	movq	%r14, %rdi
    00001637: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5687
    0000163c: 	movq	%rax, 0x90(%rsp)
    00001644: 	movq	%rax, %rdi
    00001647: 	movq	0x68(%rsp), %rax
    0000164c: 	movq	%rax, 0xa0(%rsp)
.Ltmp269:
    00001654: 	movq	%r13, %rdx
    00001657: 	movq	%r15, %rsi
    0000165a: 	callq	memcpy@PLT # Offset: 5722
    0000165f: 	movq	0x68(%rsp), %r13
    00001664: 	movq	0x90(%rsp), %rax
    0000166c: 	jmp	.Ltmp227 # Offset: 5740
.Ltmp140:
    00001671: 	leaq	0x68(%rsp), %rsi
    00001676: 	xorl	%edx, %edx
    00001678: 	movq	%r14, %rdi
    0000167b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5755
    00001680: 	movq	%rax, 0x90(%rsp)
    00001688: 	movq	%rax, %rdi
    0000168b: 	movq	0x68(%rsp), %rax
    00001690: 	movq	%rax, 0xa0(%rsp)
.Ltmp270:
    00001698: 	movq	%r13, %rdx
    0000169b: 	movq	%r15, %rsi
    0000169e: 	callq	memcpy@PLT # Offset: 5790
    000016a3: 	movq	0x68(%rsp), %r13
    000016a8: 	movq	0x90(%rsp), %rax
    000016b0: 	jmp	.Ltmp229 # Offset: 5808
.Ltmp76:
    000016b5: 	leaq	0x68(%rsp), %rsi
    000016ba: 	leaq	0x90(%rsp), %rdi
    000016c2: 	xorl	%edx, %edx
    000016c4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5828
    000016c9: 	movq	%rax, 0x90(%rsp)
    000016d1: 	movq	%rax, %rdi
    000016d4: 	movq	0x68(%rsp), %rax
    000016d9: 	movq	%rax, 0xa0(%rsp)
.Ltmp265:
    000016e1: 	movq	%r13, %rdx
    000016e4: 	movq	%r14, %rsi
    000016e7: 	callq	memcpy@PLT # Offset: 5863
    000016ec: 	movq	0x68(%rsp), %r13
    000016f1: 	movq	0x90(%rsp), %rax
    000016f9: 	jmp	.Ltmp211 # Offset: 5881
.Ltmp92:
    000016fe: 	leaq	0x68(%rsp), %rsi
    00001703: 	xorl	%edx, %edx
    00001705: 	movq	%r14, %rdi
    00001708: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5896
    0000170d: 	movq	%rax, 0x90(%rsp)
    00001715: 	movq	%rax, %rdi
    00001718: 	movq	0x68(%rsp), %rax
    0000171d: 	movq	%rax, 0xa0(%rsp)
.Ltmp271:
    00001725: 	movq	%r13, %rdx
    00001728: 	movq	%r15, %rsi
    0000172b: 	callq	memcpy@PLT # Offset: 5931
    00001730: 	movq	0x68(%rsp), %r13
    00001735: 	movq	0x90(%rsp), %rax
    0000173d: 	jmp	.Ltmp231 # Offset: 5949
.Ltmp172:
    00001742: 	leaq	0x68(%rsp), %rsi
    00001747: 	xorl	%edx, %edx
    00001749: 	movq	%r14, %rdi
    0000174c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5964
    00001751: 	movq	%rax, 0x90(%rsp)
    00001759: 	movq	%rax, %rdi
    0000175c: 	movq	0x68(%rsp), %rax
    00001761: 	movq	%rax, 0xa0(%rsp)
.Ltmp267:
    00001769: 	movq	%r13, %rdx
    0000176c: 	movq	%r15, %rsi
    0000176f: 	callq	memcpy@PLT # Offset: 5999
    00001774: 	movq	0x68(%rsp), %r13
    00001779: 	movq	0x90(%rsp), %rax
    00001781: 	jmp	.Ltmp223 # Offset: 6017
.Ltmp156:
    00001786: 	leaq	0x68(%rsp), %rsi
    0000178b: 	xorl	%edx, %edx
    0000178d: 	movq	%r14, %rdi
    00001790: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6032
    00001795: 	movq	%rax, 0x90(%rsp)
    0000179d: 	movq	%rax, %rdi
    000017a0: 	movq	0x68(%rsp), %rax
    000017a5: 	movq	%rax, 0xa0(%rsp)
.Ltmp268:
    000017ad: 	movq	%r13, %rdx
    000017b0: 	movq	%r15, %rsi
    000017b3: 	callq	memcpy@PLT # Offset: 6067
    000017b8: 	movq	0x68(%rsp), %r13
    000017bd: 	movq	0x90(%rsp), %rax
    000017c5: 	jmp	.Ltmp225 # Offset: 6085
.Ltmp188:
    000017ca: 	leaq	0x68(%rsp), %rsi
    000017cf: 	xorl	%edx, %edx
    000017d1: 	movq	%r14, %rdi
    000017d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6100
    000017d9: 	movq	%rax, 0x90(%rsp)
    000017e1: 	movq	%rax, %rdi
    000017e4: 	movq	0x68(%rsp), %rax
    000017e9: 	movq	%rax, 0xa0(%rsp)
.Ltmp266:
    000017f1: 	movq	%r13, %rdx
    000017f4: 	movq	%r15, %rsi
    000017f7: 	callq	memcpy@PLT # Offset: 6135
    000017fc: 	movq	0x68(%rsp), %r13
    00001801: 	movq	0x90(%rsp), %rax
    00001809: 	jmp	.Ltmp221 # Offset: 6153
.Ltmp88:
    0000180e: 	movq	-0x8(%rdx), %rax
    00001812: 	addq	$0x200, %rax
    00001818: 	jmp	.Ltmp236 # Offset: 6168
.Ltmp179:
    0000181d: 	movq	%r14, %rsi
    00001820: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001827: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6183
    0000182c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001833: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000183a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001841: 	jne	.Ltmp237 # Offset: 6209
.Ltmp184:
    00001847: 	movq	-0x8(%rdx), %rax
    0000184b: 	addq	$0x200, %rax
    00001851: 	jmp	.Ltmp237 # Offset: 6225
.Ltmp152:
    00001856: 	movq	-0x8(%rdx), %rax
    0000185a: 	addq	$0x200, %rax
    00001860: 	jmp	.Ltmp238 # Offset: 6240
.Ltmp168:
    00001865: 	movq	-0x8(%rdx), %rax
    00001869: 	addq	$0x200, %rax
    0000186f: 	jmp	.Ltmp239 # Offset: 6255
.Ltmp163:
    00001874: 	movq	%r14, %rsi
    00001877: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000187e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6270
    00001883: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000188a: 	jmp	.Ltmp240 # Offset: 6282
.Ltmp83:
    0000188f: 	movq	%r14, %rsi
    00001892: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001899: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6297
    0000189e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000018a5: 	jmp	.Ltmp241 # Offset: 6309
.Ltmp195:
    000018aa: 	movq	%r14, %rsi
    000018ad: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000018b4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6324
    000018b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000018c0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000018c7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000018ce: 	jne	.Ltmp242 # Offset: 6350
.Ltmp200:
    000018d4: 	movq	-0x8(%rdx), %rax
    000018d8: 	addq	$0x200, %rax
    000018de: 	jmp	.Ltmp242 # Offset: 6366
.Ltmp136:
    000018e3: 	movq	-0x8(%rdx), %rax
    000018e7: 	addq	$0x200, %rax
    000018ed: 	jmp	.Ltmp243 # Offset: 6381
.Ltmp147:
    000018f2: 	movq	%r14, %rsi
    000018f5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000018fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6396
    00001901: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001908: 	jmp	.Ltmp244 # Offset: 6408
.Ltmp104:
    0000190d: 	movq	-0x8(%rdx), %rax
    00001911: 	addq	$0x200, %rax
    00001917: 	jmp	.Ltmp245 # Offset: 6423
.Ltmp99:
    0000191c: 	movq	%r14, %rsi
    0000191f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001926: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6438
    0000192b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001932: 	jmp	.Ltmp246 # Offset: 6450
.Ltmp115:
    00001937: 	movq	%r14, %rsi
    0000193a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001941: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6465
    00001946: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000194d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001954: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000195b: 	jne	.Ltmp247 # Offset: 6491
.Ltmp120:
    00001961: 	movq	-0x8(%rdx), %rax
    00001965: 	addq	$0x200, %rax
    0000196b: 	jmp	.Ltmp247 # Offset: 6507
.Ltmp131:
    00001970: 	movq	%r14, %rsi
    00001973: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000197a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6522
    0000197f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001986: 	jmp	.Ltmp248 # Offset: 6534
.Ltmp199:
    0000198b: 	testq	%r13, %r13
    0000198e: 	je	.Ltmp249 # Offset: 6542
    00001994: 	jmp	.Ltmp250 # Offset: 6548
    00001999: 	nopl	(%rax) # Size: 7
.Ltmp135:
    000019a0: 	testq	%r13, %r13
    000019a3: 	je	.Ltmp251 # Offset: 6563
    000019a9: 	jmp	.Ltmp252 # Offset: 6569
    000019ae: 	nop # Size: 2
.Ltmp151:
    000019b0: 	testq	%r13, %r13
    000019b3: 	je	.Ltmp253 # Offset: 6579
    000019b9: 	jmp	.Ltmp254 # Offset: 6585
    000019be: 	nop # Size: 2
.Ltmp103:
    000019c0: 	testq	%r13, %r13
    000019c3: 	je	.Ltmp255 # Offset: 6595
.Ltmp262:
    000019c9: 	movq	0x8(%rsp), %rsi
    000019ce: 	movq	%r13, %rdx
    000019d1: 	callq	memcpy@PLT # Offset: 6609
    000019d6: 	movq	0x68(%rsp), %r13
    000019db: 	movq	(%r15), %rdi
    000019de: 	jmp	.Ltmp255 # Offset: 6622
.Ltmp167:
    000019e3: 	testq	%r13, %r13
    000019e6: 	je	.Ltmp256 # Offset: 6630
    000019ec: 	jmp	.Ltmp257 # Offset: 6636
    000019f1: 	nopl	(%rax) # Size: 7
.Ltmp87:
    000019f8: 	testq	%r13, %r13
    000019fb: 	je	.Ltmp258 # Offset: 6651
.Ltmp264:
    00001a01: 	movq	0x8(%rsp), %rsi
    00001a06: 	movq	%r13, %rdx
    00001a09: 	callq	memcpy@PLT # Offset: 6665
    00001a0e: 	movq	0x68(%rsp), %r13
    00001a13: 	movq	(%r15), %rdi
    00001a16: 	jmp	.Ltmp258 # Offset: 6678
.Ltmp183:
    00001a1b: 	testq	%r13, %r13
    00001a1e: 	je	.Ltmp259 # Offset: 6686
    00001a24: 	jmp	.Ltmp260 # Offset: 6692
    00001a29: 	nopl	(%rax) # Size: 7
.Ltmp119:
    00001a30: 	testq	%r13, %r13
    00001a33: 	je	.Ltmp261 # Offset: 6707
.Ltmp263:
    00001a39: 	movq	0x8(%rsp), %rsi
    00001a3e: 	movq	%r13, %rdx
    00001a41: 	callq	memcpy@PLT # Offset: 6721
    00001a46: 	movq	0x68(%rsp), %r13
    00001a4b: 	movq	(%r15), %rdi
    00001a4e: 	jmp	.Ltmp261 # Offset: 6734
.Ltmp134:
    00001a53: 	leaq	0x68(%rsp), %rsi
    00001a58: 	xorl	%edx, %edx
    00001a5a: 	movq	%r15, %rdi
    00001a5d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6749
    00001a62: 	movq	%rax, (%r15)
    00001a65: 	movq	%rax, %rdi
    00001a68: 	movq	0x68(%rsp), %rax
    00001a6d: 	movq	%rax, 0x10(%r15)
.Ltmp252:
    00001a71: 	movq	0x8(%rsp), %rsi
    00001a76: 	movq	%r13, %rdx
    00001a79: 	callq	memcpy@PLT # Offset: 6777
    00001a7e: 	movq	0x68(%rsp), %r13
    00001a83: 	movq	(%r15), %rdi
    00001a86: 	jmp	.Ltmp251 # Offset: 6790
.Ltmp198:
    00001a8b: 	leaq	0x68(%rsp), %rsi
    00001a90: 	xorl	%edx, %edx
    00001a92: 	movq	%rbx, %rdi
    00001a95: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6805
    00001a9a: 	movq	%rax, (%rbx)
    00001a9d: 	movq	%rax, %rdi
    00001aa0: 	movq	0x68(%rsp), %rax
    00001aa5: 	movq	%rax, 0x10(%rbx)
.Ltmp250:
    00001aa9: 	movq	%r13, %rdx
    00001aac: 	movq	%r15, %rsi
    00001aaf: 	callq	memcpy@PLT # Offset: 6831
    00001ab4: 	movq	0x68(%rsp), %r13
    00001ab9: 	movq	(%rbx), %rdi
    00001abc: 	jmp	.Ltmp249 # Offset: 6844
.Ltmp166:
    00001ac1: 	leaq	0x68(%rsp), %rsi
    00001ac6: 	xorl	%edx, %edx
    00001ac8: 	movq	%r15, %rdi
    00001acb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6859
    00001ad0: 	movq	%rax, (%r15)
    00001ad3: 	movq	%rax, %rdi
    00001ad6: 	movq	0x68(%rsp), %rax
    00001adb: 	movq	%rax, 0x10(%r15)
.Ltmp257:
    00001adf: 	movq	0x8(%rsp), %rsi
    00001ae4: 	movq	%r13, %rdx
    00001ae7: 	callq	memcpy@PLT # Offset: 6887
    00001aec: 	movq	0x68(%rsp), %r13
    00001af1: 	movq	(%r15), %rdi
    00001af4: 	jmp	.Ltmp256 # Offset: 6900
.Ltmp182:
    00001af9: 	leaq	0x68(%rsp), %rsi
    00001afe: 	xorl	%edx, %edx
    00001b00: 	movq	%r15, %rdi
    00001b03: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6915
    00001b08: 	movq	%rax, (%r15)
    00001b0b: 	movq	%rax, %rdi
    00001b0e: 	movq	0x68(%rsp), %rax
    00001b13: 	movq	%rax, 0x10(%r15)
.Ltmp260:
    00001b17: 	movq	0x8(%rsp), %rsi
    00001b1c: 	movq	%r13, %rdx
    00001b1f: 	callq	memcpy@PLT # Offset: 6943
    00001b24: 	movq	0x68(%rsp), %r13
    00001b29: 	movq	(%r15), %rdi
    00001b2c: 	jmp	.Ltmp259 # Offset: 6956
.Ltmp150:
    00001b31: 	leaq	0x68(%rsp), %rsi
    00001b36: 	xorl	%edx, %edx
    00001b38: 	movq	%r15, %rdi
    00001b3b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6971
    00001b40: 	movq	%rax, (%r15)
    00001b43: 	movq	%rax, %rdi
    00001b46: 	movq	0x68(%rsp), %rax
    00001b4b: 	movq	%rax, 0x10(%r15)
.Ltmp254:
    00001b4f: 	movq	0x8(%rsp), %rsi
    00001b54: 	movq	%r13, %rdx
    00001b57: 	callq	memcpy@PLT # Offset: 6999
    00001b5c: 	movq	0x68(%rsp), %r13
    00001b61: 	movq	(%r15), %rdi
    00001b64: 	jmp	.Ltmp253 # Offset: 7012
.Ltmp102:
    00001b69: 	leaq	0x68(%rsp), %rsi
    00001b6e: 	xorl	%edx, %edx
    00001b70: 	movq	%r15, %rdi
    00001b73: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7027
    00001b78: 	movq	%rax, (%r15)
    00001b7b: 	movq	%rax, %rdi
    00001b7e: 	movq	0x68(%rsp), %rax
    00001b83: 	movq	%rax, 0x10(%r15)
    00001b87: 	jmp	.Ltmp262 # Offset: 7047
.Ltmp118:
    00001b8c: 	leaq	0x68(%rsp), %rsi
    00001b91: 	xorl	%edx, %edx
    00001b93: 	movq	%r15, %rdi
    00001b96: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7062
    00001b9b: 	movq	%rax, (%r15)
    00001b9e: 	movq	%rax, %rdi
    00001ba1: 	movq	0x68(%rsp), %rax
    00001ba6: 	movq	%rax, 0x10(%r15)
    00001baa: 	jmp	.Ltmp263 # Offset: 7082
.Ltmp86:
    00001baf: 	leaq	0x68(%rsp), %rsi
    00001bb4: 	xorl	%edx, %edx
    00001bb6: 	movq	%r15, %rdi
    00001bb9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7097
    00001bbe: 	movq	%rax, (%r15)
    00001bc1: 	movq	%rax, %rdi
    00001bc4: 	movq	0x68(%rsp), %rax
    00001bc9: 	movq	%rax, 0x10(%r15)
    00001bcd: 	jmp	.Ltmp264 # Offset: 7117
.Ltmp78:
    00001bd2: 	leaq	DATAat0x71b2(%rip), %rdi
    00001bd9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7129
.Ltmp85:
    00001bde: 	leaq	DATAat0x7188(%rip), %rdi
    00001be5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7141
.Ltmp91:
    00001bea: 	leaq	DATAat0x7188(%rip), %rdi
    00001bf1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7153
.Ltmp94:
    00001bf6: 	leaq	DATAat0x71b2(%rip), %rdi
    00001bfd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7165
.Ltmp101:
    00001c02: 	leaq	DATAat0x7188(%rip), %rdi
    00001c09: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7177
.Ltmp107:
    00001c0e: 	leaq	DATAat0x7188(%rip), %rdi
    00001c15: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7189
.Ltmp110:
    00001c1a: 	leaq	DATAat0x71b2(%rip), %rdi
    00001c21: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7201
.Ltmp117:
    00001c26: 	leaq	DATAat0x7188(%rip), %rdi
    00001c2d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7213
.Ltmp123:
    00001c32: 	leaq	DATAat0x7188(%rip), %rdi
    00001c39: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7225
.Ltmp126:
    00001c3e: 	leaq	DATAat0x71b2(%rip), %rdi
    00001c45: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7237
.Ltmp133:
    00001c4a: 	leaq	DATAat0x7188(%rip), %rdi
    00001c51: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7249
.Ltmp139:
    00001c56: 	leaq	DATAat0x7188(%rip), %rdi
    00001c5d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7261
.Ltmp142:
    00001c62: 	leaq	DATAat0x71b2(%rip), %rdi
    00001c69: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7273
.Ltmp149:
    00001c6e: 	leaq	DATAat0x7188(%rip), %rdi
    00001c75: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7285
.Ltmp155:
    00001c7a: 	leaq	DATAat0x7188(%rip), %rdi
    00001c81: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7297
.Ltmp158:
    00001c86: 	leaq	DATAat0x71b2(%rip), %rdi
    00001c8d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7309
.Ltmp165:
    00001c92: 	leaq	DATAat0x7188(%rip), %rdi
    00001c99: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7321
.Ltmp171:
    00001c9e: 	leaq	DATAat0x7188(%rip), %rdi
    00001ca5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7333
.Ltmp174:
    00001caa: 	leaq	DATAat0x71b2(%rip), %rdi
    00001cb1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7345
.Ltmp181:
    00001cb6: 	leaq	DATAat0x7188(%rip), %rdi
    00001cbd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7357
.Ltmp187:
    00001cc2: 	leaq	DATAat0x7188(%rip), %rdi
    00001cc9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7369
.Ltmp190:
    00001cce: 	leaq	DATAat0x71b2(%rip), %rdi
    00001cd5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7381
.Ltmp197:
    00001cda: 	leaq	DATAat0x7188(%rip), %rdi
    00001ce1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7393
.Ltmp203:
    00001ce6: 	leaq	DATAat0x7188(%rip), %rdi
    00001ced: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7405
.Ltmp206:
    00001cf2: 	leaq	DATAat0x71b2(%rip), %rdi
    00001cf9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7417
.Ltmp209:
    00001cfe: 	callq	__stack_chk_fail@PLT # Offset: 7422
.Ltmp210:
    00001d03: 	movq	%r12, %rdi
    00001d06: 	jmp	.Ltmp265 # Offset: 7430
.Ltmp220:
    00001d0b: 	movq	%r12, %rdi
    00001d0e: 	jmp	.Ltmp266 # Offset: 7438
.Ltmp222:
    00001d13: 	movq	%r12, %rdi
    00001d16: 	jmp	.Ltmp267 # Offset: 7446
.Ltmp224:
    00001d1b: 	movq	%r12, %rdi
    00001d1e: 	jmp	.Ltmp268 # Offset: 7454
.Ltmp226:
    00001d23: 	movq	%r12, %rdi
    00001d26: 	jmp	.Ltmp269 # Offset: 7462
.Ltmp228:
    00001d2b: 	movq	%r12, %rdi
    00001d2e: 	jmp	.Ltmp270 # Offset: 7470
.Ltmp230:
    00001d33: 	movq	%r12, %rdi
    00001d36: 	jmp	.Ltmp271 # Offset: 7478
.Ltmp232:
    00001d3b: 	movq	%r12, %rdi
    00001d3e: 	jmp	.Ltmp272 # Offset: 7486
.Ltmp234:
    00001d43: 	movq	%r12, %rdi
    00001d46: 	jmp	.Ltmp273 # Offset: 7494
.Ltmp75:
    00001d4b: 	leaq	DATAat0x7188(%rip), %rdi
    00001d52: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7506
    00001d57: 	endbr64
.Ltmp275:
    00001d5b: 	movq	%rax, %rbx
    00001d5e: 	jmp	.Ltmp274 # Offset: 7518
    00001d60: 	endbr64
    00001d64: 	jmp	.Ltmp275 # Offset: 7524
    00001d66: 	endbr64
    00001d6a: 	jmp	.Ltmp275 # Offset: 7530
    00001d6c: 	endbr64
    00001d70: 	jmp	.Ltmp275 # Offset: 7536
.Ltmp274:
    00001d72: 	movq	0x90(%rsp), %rdi
    00001d7a: 	cmpq	%r12, %rdi
    00001d7d: 	je	.Ltmp276 # Offset: 7549
    00001d7f: 	movq	0xa0(%rsp), %rax
    00001d87: 	leaq	0x1(%rax), %rsi
    00001d8b: 	callq	_ZdlPvm@PLT # Offset: 7563
.Ltmp276:
    00001d90: 	movl	$0x4, %esi
    00001d95: 	movq	%rbp, %rdi
    00001d98: 	callq	_ZdlPvm@PLT # Offset: 7576
.Ltmp278:
    00001d9d: 	movq	0x70(%rsp), %rdi
    00001da2: 	cmpq	0x58(%rsp), %rdi
    00001da7: 	je	.Ltmp277 # Offset: 7591
    00001da9: 	movq	0x80(%rsp), %rax
    00001db1: 	leaq	0x1(%rax), %rsi
    00001db5: 	callq	_ZdlPvm@PLT # Offset: 7605
.Ltmp277:
    00001dba: 	movq	%rbx, %rdi
    00001dbd: 	callq	_Unwind_Resume@PLT # Offset: 7613
    00001dc2: 	endbr64
    00001dc6: 	jmp	.Ltmp275 # Offset: 7622
    00001dc8: 	endbr64
    00001dcc: 	jmp	.Ltmp275 # Offset: 7628
    00001dce: 	endbr64
    00001dd2: 	jmp	.Ltmp275 # Offset: 7634
    00001dd4: 	endbr64
    00001dd8: 	jmp	.Ltmp275 # Offset: 7640
    00001dda: 	endbr64
    00001dde: 	jmp	.Ltmp275 # Offset: 7646
    00001de3: 	endbr64
    00001de7: 	jmp	.Ltmp275 # Offset: 7655
    00001dec: 	endbr64
    00001df0: 	jmp	.Ltmp275 # Offset: 7664
    00001df5: 	endbr64
    00001df9: 	jmp	.Ltmp275 # Offset: 7673
    00001dfe: 	endbr64
    00001e02: 	jmp	.Ltmp275 # Offset: 7682
    00001e07: 	endbr64
    00001e0b: 	movq	%rax, %rbx
    00001e0e: 	jmp	.Ltmp276 # Offset: 7694
    00001e10: 	endbr64
    00001e14: 	movq	%rax, %rbx
    00001e17: 	jmp	.Ltmp278 # Offset: 7703
    00001e19: 	endbr64
    00001e1d: 	jmp	.Ltmp275 # Offset: 7709
    00001e22: 	endbr64
    00001e26: 	jmp	.Ltmp275 # Offset: 7718
    00001e2b: 	endbr64
    00001e2f: 	jmp	.Ltmp275 # Offset: 7727
    00001e34: 	endbr64
    00001e38: 	jmp	.Ltmp275 # Offset: 7736
    00001e3d: 	endbr64
    00001e41: 	jmp	.Ltmp275 # Offset: 7745
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIfEvv"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x4530
  Size        : 0x1fb4
  MaxSize     : 0x1fb4
  Offset      : 0x4530
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x656c, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0xe8, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0xd8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0xa0(%rsp), %rax
    00000035: 	movw	%di, 0xa4(%rsp)
    0000003d: 	movl	$0x7d00, %edi
    00000042: 	movq	%rax, 0x78(%rsp)
    00000047: 	movq	%rax, 0x90(%rsp)
    0000004f: 	movl	$0x62756f64, 0xa0(%rsp)
    0000005a: 	movq	$0x6, 0x98(%rsp)
    00000066: 	movb	$0x0, 0xa6(%rsp)
    0000006e: 	callq	_Znam@PLT # Offset: 110
    00000073: 	movsd	init_value(%rip), %xmm0
    0000007b: 	movq	%rax, %rbp
    0000007e: 	leaq	0x7d00(%rax), %rbx
    00000085: 	unpcklpd	%xmm0, %xmm0
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp279:
    00000090: 	movups	%xmm0, (%rax)
    00000093: 	addq	$0x10, %rax
    00000097: 	cmpq	%rbx, %rax
    0000009a: 	jne	.Ltmp279 # Offset: 154
    0000009c: 	movq	0x90(%rsp), %r14
    000000a4: 	movq	0x98(%rsp), %r13
    000000ac: 	leaq	0xc0(%rsp), %r12
    000000b4: 	movq	%r12, 0xb0(%rsp)
    000000bc: 	movq	%r14, %rax
    000000bf: 	addq	%r13, %rax
    000000c2: 	je	.Ltmp280 # Offset: 194
    000000c4: 	testq	%r14, %r14
    000000c7: 	je	.Ltmp281 # Offset: 199
.Ltmp280:
    000000cd: 	movq	%r13, 0x88(%rsp)
    000000d5: 	cmpq	$0xf, %r13
    000000d9: 	ja	.Ltmp282 # Offset: 217
    000000df: 	cmpq	$0x1, %r13
    000000e3: 	jne	.Ltmp283 # Offset: 227
    000000e9: 	movzbl	(%r14), %eax
    000000ed: 	movb	%al, 0xc0(%rsp)
    000000f4: 	movq	%r12, %rax
.Ltmp417:
    000000f7: 	movq	%r13, 0xb8(%rsp)
    000000ff: 	movb	$0x0, (%rax,%r13)
    00000104: 	movabsq	$0x3fffffffffffffff, %rax
    0000010e: 	subq	0xb8(%rsp), %rax
    00000116: 	cmpq	$0x11, %rax
    0000011a: 	jbe	.Ltmp284 # Offset: 282
    00000120: 	leaq	0xb0(%rsp), %r14
    00000128: 	movl	$0x12, %edx
    0000012d: 	leaq	DATAat0x71c7(%rip), %rsi
    00000134: 	movq	%r14, %rdi
    00000137: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 311
    0000013c: 	callq	clock@PLT # Offset: 316
    00000141: 	movl	iterations(%rip), %esi
    00000147: 	movq	%rax, start_time(%rip)
    0000014e: 	testl	%esi, %esi
    00000150: 	jle	.Ltmp285 # Offset: 336
    00000156: 	movsd	DATAat0x72d0(%rip), %xmm7
    0000015e: 	movsd	DATAat0x72a8(%rip), %xmm3
    00000166: 	xorl	%r13d, %r13d
    00000169: 	leaq	DATAat0x71da(%rip), %r15
    00000170: 	movsd	%xmm7, 0x20(%rsp)
    00000176: 	movsd	DATAat0x72a0(%rip), %xmm7
    0000017e: 	movsd	%xmm3, 0x70(%rsp)
    00000184: 	movsd	%xmm7, 0x8(%rsp)
    0000018a: 	movq	DATAat0x72c0(%rip), %xmm7
    00000192: 	movaps	%xmm7, 0x10(%rsp)
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp288:
    000001a0: 	movsd	0x20(%rsp), %xmm2
    000001a6: 	movq	%rbp, %rax
    000001a9: 	nopl	(%rax) # Size: 7
.Ltmp286:
    000001b0: 	mulsd	(%rax), %xmm2
    000001b4: 	addq	$0x8, %rax
    000001b8: 	cmpq	%rbx, %rax
    000001bb: 	jne	.Ltmp286 # Offset: 443
    000001bd: 	movsd	0x8(%rsp), %xmm1
    000001c3: 	movsd	init_value(%rip), %xmm0
    000001cb: 	movsd	%xmm2, 0x30(%rsp)
    000001d1: 	callq	pow@PLT # Offset: 465
    000001d6: 	movsd	0x30(%rsp), %xmm2
    000001dc: 	subsd	%xmm0, %xmm2
    000001e0: 	andpd	0x10(%rsp), %xmm2
    000001e6: 	comisd	0x70(%rsp), %xmm2
    000001ec: 	ja	.Ltmp287 # Offset: 492
.Ltmp418:
    000001f2: 	addl	$0x1, %r13d
    000001f6: 	cmpl	iterations(%rip), %r13d
    000001fd: 	jl	.Ltmp288 # Offset: 509
.Ltmp285:
    000001ff: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000206: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    0000020d: 	subq	$0x20, %rax
    00000211: 	cmpq	%rax, %r15
    00000214: 	je	.Ltmp289 # Offset: 532
    0000021a: 	leaq	0x10(%r15), %rdi
    0000021e: 	movq	0xb8(%rsp), %r13
    00000226: 	movq	%rdi, (%r15)
    00000229: 	movq	0xb0(%rsp), %rax
    00000231: 	movq	%rax, %rcx
    00000234: 	movq	%rax, 0x8(%rsp)
    00000239: 	addq	%r13, %rcx
    0000023c: 	je	.Ltmp290 # Offset: 572
    0000023e: 	testq	%rax, %rax
    00000241: 	je	.Ltmp291 # Offset: 577
.Ltmp290:
    00000247: 	movq	%r13, 0x88(%rsp)
    0000024f: 	cmpq	$0xf, %r13
    00000253: 	ja	.Ltmp292 # Offset: 595
    00000259: 	cmpq	$0x1, %r13
    0000025d: 	jne	.Ltmp293 # Offset: 605
    00000263: 	movq	0x8(%rsp), %rax
    00000268: 	movzbl	(%rax), %eax
    0000026b: 	movb	%al, 0x10(%r15)
.Ltmp464:
    0000026f: 	movq	%r13, 0x8(%r15)
    00000273: 	movb	$0x0, (%rdi,%r13)
    00000278: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027f: 	addq	$0x20, %rax
    00000283: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp447:
    0000028a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000291: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000298: 	je	.Ltmp294 # Offset: 664
.Ltmp442:
    0000029e: 	movq	-0x20(%rax), %r13
    000002a2: 	callq	clock@PLT # Offset: 674
    000002a7: 	pxor	%xmm0, %xmm0
    000002ab: 	movq	%rax, end_time(%rip)
    000002b2: 	movq	%r13, %rdi
    000002b5: 	subq	start_time(%rip), %rax
    000002bc: 	cvtsi2sd	%rax, %xmm0
    000002c1: 	divsd	DATAat0x7290(%rip), %xmm0
    000002c9: 	callq	_Z13record_resultdPKc # Offset: 713
    000002ce: 	movq	0xb0(%rsp), %rdi
    000002d6: 	cmpq	%r12, %rdi
    000002d9: 	je	.Ltmp295 # Offset: 729
    000002db: 	movq	0xc0(%rsp), %rax
    000002e3: 	leaq	0x1(%rax), %rsi
    000002e7: 	callq	_ZdlPvm@PLT # Offset: 743
.Ltmp295:
    000002ec: 	movq	0x90(%rsp), %r15
    000002f4: 	movq	0x98(%rsp), %r13
    000002fc: 	movq	%r12, 0xb0(%rsp)
    00000304: 	movq	%r15, %rax
    00000307: 	addq	%r13, %rax
    0000030a: 	je	.Ltmp296 # Offset: 778
    0000030c: 	testq	%r15, %r15
    0000030f: 	je	.Ltmp297 # Offset: 783
.Ltmp296:
    00000315: 	movq	%r13, 0x88(%rsp)
    0000031d: 	cmpq	$0xf, %r13
    00000321: 	ja	.Ltmp298 # Offset: 801
    00000327: 	cmpq	$0x1, %r13
    0000032b: 	jne	.Ltmp299 # Offset: 811
    00000331: 	movzbl	(%r15), %eax
    00000335: 	movb	%al, 0xc0(%rsp)
    0000033c: 	movq	%r12, %rax
.Ltmp437:
    0000033f: 	movq	%r13, 0xb8(%rsp)
    00000347: 	movb	$0x0, (%rax,%r13)
    0000034c: 	movabsq	$0x3fffffffffffffff, %rax
    00000356: 	subq	0xb8(%rsp), %rax
    0000035e: 	cmpq	$0x11, %rax
    00000362: 	jbe	.Ltmp300 # Offset: 866
    00000368: 	movl	$0x12, %edx
    0000036d: 	leaq	DATAat0x71ea(%rip), %rsi
    00000374: 	movq	%r14, %rdi
    00000377: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 887
    0000037c: 	callq	clock@PLT # Offset: 892
    00000381: 	movl	iterations(%rip), %ecx
    00000387: 	movq	%rax, start_time(%rip)
    0000038e: 	testl	%ecx, %ecx
    00000390: 	jle	.Ltmp301 # Offset: 912
    00000396: 	movsd	DATAat0x72d0(%rip), %xmm5
    0000039e: 	movsd	DATAat0x72a0(%rip), %xmm7
    000003a6: 	xorl	%r13d, %r13d
    000003a9: 	leaq	DATAat0x71da(%rip), %r15
    000003b0: 	movq	DATAat0x72c0(%rip), %xmm3
    000003b8: 	movsd	%xmm5, 0x20(%rsp)
    000003be: 	movsd	DATAat0x72a8(%rip), %xmm5
    000003c6: 	movsd	%xmm7, 0x8(%rsp)
    000003cc: 	movaps	%xmm3, 0x10(%rsp)
    000003d1: 	movsd	%xmm5, 0x70(%rsp)
    000003d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp304:
    000003e0: 	movsd	0x20(%rsp), %xmm2
    000003e6: 	movq	%rbp, %rax
    000003e9: 	nopl	(%rax) # Size: 7
.Ltmp302:
    000003f0: 	mulsd	(%rax), %xmm2
    000003f4: 	addq	$0x8, %rax
    000003f8: 	cmpq	%rbx, %rax
    000003fb: 	jne	.Ltmp302 # Offset: 1019
    000003fd: 	movsd	0x8(%rsp), %xmm1
    00000403: 	movsd	init_value(%rip), %xmm0
    0000040b: 	movsd	%xmm2, 0x30(%rsp)
    00000411: 	callq	pow@PLT # Offset: 1041
    00000416: 	movsd	0x30(%rsp), %xmm2
    0000041c: 	subsd	%xmm0, %xmm2
    00000420: 	andpd	0x10(%rsp), %xmm2
    00000426: 	comisd	0x70(%rsp), %xmm2
    0000042c: 	ja	.Ltmp303 # Offset: 1068
.Ltmp419:
    00000432: 	addl	$0x1, %r13d
    00000436: 	cmpl	iterations(%rip), %r13d
    0000043d: 	jl	.Ltmp304 # Offset: 1085
.Ltmp301:
    0000043f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000446: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    0000044d: 	subq	$0x20, %rax
    00000451: 	cmpq	%rax, %r15
    00000454: 	je	.Ltmp305 # Offset: 1108
    0000045a: 	leaq	0x10(%r15), %rdi
    0000045e: 	movq	0xb8(%rsp), %r13
    00000466: 	movq	%rdi, (%r15)
    00000469: 	movq	0xb0(%rsp), %rax
    00000471: 	movq	%rax, %rcx
    00000474: 	movq	%rax, 0x8(%rsp)
    00000479: 	addq	%r13, %rcx
    0000047c: 	je	.Ltmp306 # Offset: 1148
    0000047e: 	testq	%rax, %rax
    00000481: 	je	.Ltmp307 # Offset: 1153
.Ltmp306:
    00000487: 	movq	%r13, 0x88(%rsp)
    0000048f: 	cmpq	$0xf, %r13
    00000493: 	ja	.Ltmp308 # Offset: 1171
    00000499: 	cmpq	$0x1, %r13
    0000049d: 	jne	.Ltmp309 # Offset: 1181
    000004a3: 	movq	0x8(%rsp), %rax
    000004a8: 	movzbl	(%rax), %eax
    000004ab: 	movb	%al, 0x10(%r15)
.Ltmp461:
    000004af: 	movq	%r13, 0x8(%r15)
    000004b3: 	movb	$0x0, (%rdi,%r13)
    000004b8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004bf: 	addq	$0x20, %rax
    000004c3: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp452:
    000004ca: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004d1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004d8: 	je	.Ltmp310 # Offset: 1240
.Ltmp451:
    000004de: 	movq	-0x20(%rax), %r13
    000004e2: 	callq	clock@PLT # Offset: 1250
    000004e7: 	pxor	%xmm0, %xmm0
    000004eb: 	movq	%rax, end_time(%rip)
    000004f2: 	movq	%r13, %rdi
    000004f5: 	subq	start_time(%rip), %rax
    000004fc: 	cvtsi2sd	%rax, %xmm0
    00000501: 	divsd	DATAat0x7290(%rip), %xmm0
    00000509: 	callq	_Z13record_resultdPKc # Offset: 1289
    0000050e: 	movq	0xb0(%rsp), %rdi
    00000516: 	cmpq	%r12, %rdi
    00000519: 	je	.Ltmp311 # Offset: 1305
    0000051b: 	movq	0xc0(%rsp), %rax
    00000523: 	leaq	0x1(%rax), %rsi
    00000527: 	callq	_ZdlPvm@PLT # Offset: 1319
.Ltmp311:
    0000052c: 	movq	0x90(%rsp), %r15
    00000534: 	movq	0x98(%rsp), %r13
    0000053c: 	movq	%r12, 0xb0(%rsp)
    00000544: 	movq	%r15, %rax
    00000547: 	addq	%r13, %rax
    0000054a: 	je	.Ltmp312 # Offset: 1354
    0000054c: 	testq	%r15, %r15
    0000054f: 	je	.Ltmp313 # Offset: 1359
.Ltmp312:
    00000555: 	movq	%r13, 0x88(%rsp)
    0000055d: 	cmpq	$0xf, %r13
    00000561: 	ja	.Ltmp314 # Offset: 1377
    00000567: 	cmpq	$0x1, %r13
    0000056b: 	jne	.Ltmp315 # Offset: 1387
    00000571: 	movzbl	(%r15), %eax
    00000575: 	movb	%al, 0xc0(%rsp)
    0000057c: 	movq	%r12, %rax
.Ltmp439:
    0000057f: 	movq	%r13, 0xb8(%rsp)
    00000587: 	movb	$0x0, (%rax,%r13)
    0000058c: 	movabsq	$0x3fffffffffffffff, %rax
    00000596: 	subq	0xb8(%rsp), %rax
    0000059e: 	cmpq	$0x11, %rax
    000005a2: 	jbe	.Ltmp316 # Offset: 1442
    000005a8: 	movl	$0x12, %edx
    000005ad: 	leaq	DATAat0x71fd(%rip), %rsi
    000005b4: 	movq	%r14, %rdi
    000005b7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1463
    000005bc: 	callq	clock@PLT # Offset: 1468
    000005c1: 	movl	iterations(%rip), %edx
    000005c7: 	movq	%rax, start_time(%rip)
    000005ce: 	testl	%edx, %edx
    000005d0: 	jle	.Ltmp317 # Offset: 1488
    000005d6: 	movsd	DATAat0x72d0(%rip), %xmm7
    000005de: 	movsd	DATAat0x72a0(%rip), %xmm3
    000005e6: 	xorl	%r13d, %r13d
    000005e9: 	leaq	DATAat0x71da(%rip), %r15
    000005f0: 	movq	DATAat0x72c0(%rip), %xmm5
    000005f8: 	movsd	%xmm7, 0x20(%rsp)
    000005fe: 	movsd	DATAat0x72a8(%rip), %xmm7
    00000606: 	movsd	%xmm3, 0x8(%rsp)
    0000060c: 	movaps	%xmm5, 0x10(%rsp)
    00000611: 	movsd	%xmm7, 0x70(%rsp)
    00000617: 	nopw	(%rax,%rax) # Size: 9
.Ltmp320:
    00000620: 	movsd	0x20(%rsp), %xmm2
    00000626: 	movq	%rbp, %rax
    00000629: 	nopl	(%rax) # Size: 7
.Ltmp318:
    00000630: 	mulsd	(%rax), %xmm2
    00000634: 	addq	$0x10, %rax
    00000638: 	mulsd	-0x8(%rax), %xmm2
    0000063d: 	cmpq	%rbx, %rax
    00000640: 	jne	.Ltmp318 # Offset: 1600
    00000642: 	movsd	0x8(%rsp), %xmm1
    00000648: 	movsd	init_value(%rip), %xmm0
    00000650: 	movsd	%xmm2, 0x30(%rsp)
    00000656: 	callq	pow@PLT # Offset: 1622
    0000065b: 	movsd	0x30(%rsp), %xmm2
    00000661: 	subsd	%xmm0, %xmm2
    00000665: 	andpd	0x10(%rsp), %xmm2
    0000066b: 	comisd	0x70(%rsp), %xmm2
    00000671: 	ja	.Ltmp319 # Offset: 1649
.Ltmp420:
    00000677: 	addl	$0x1, %r13d
    0000067b: 	cmpl	iterations(%rip), %r13d
    00000682: 	jl	.Ltmp320 # Offset: 1666
.Ltmp317:
    00000684: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000068b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000692: 	subq	$0x20, %rax
    00000696: 	cmpq	%rax, %r15
    00000699: 	je	.Ltmp321 # Offset: 1689
    0000069f: 	leaq	0x10(%r15), %rdi
    000006a3: 	movq	0xb8(%rsp), %r13
    000006ab: 	movq	%rdi, (%r15)
    000006ae: 	movq	0xb0(%rsp), %rax
    000006b6: 	movq	%rax, %rcx
    000006b9: 	movq	%rax, 0x8(%rsp)
    000006be: 	addq	%r13, %rcx
    000006c1: 	je	.Ltmp322 # Offset: 1729
    000006c3: 	testq	%rax, %rax
    000006c6: 	je	.Ltmp323 # Offset: 1734
.Ltmp322:
    000006cc: 	movq	%r13, 0x88(%rsp)
    000006d4: 	cmpq	$0xf, %r13
    000006d8: 	ja	.Ltmp324 # Offset: 1752
    000006de: 	cmpq	$0x1, %r13
    000006e2: 	jne	.Ltmp325 # Offset: 1762
    000006e8: 	movq	0x8(%rsp), %rax
    000006ed: 	movzbl	(%rax), %eax
    000006f0: 	movb	%al, 0x10(%r15)
.Ltmp467:
    000006f4: 	movq	%r13, 0x8(%r15)
    000006f8: 	movb	$0x0, (%rdi,%r13)
    000006fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000704: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000070b: 	addq	$0x20, %rax
    0000070f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000716: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000071d: 	je	.Ltmp326 # Offset: 1821
.Ltmp453:
    00000723: 	movq	-0x20(%rax), %r13
    00000727: 	callq	clock@PLT # Offset: 1831
    0000072c: 	pxor	%xmm0, %xmm0
    00000730: 	movq	%rax, end_time(%rip)
    00000737: 	movq	%r13, %rdi
    0000073a: 	subq	start_time(%rip), %rax
    00000741: 	cvtsi2sd	%rax, %xmm0
    00000746: 	divsd	DATAat0x7290(%rip), %xmm0
    0000074e: 	callq	_Z13record_resultdPKc # Offset: 1870
    00000753: 	movq	0xb0(%rsp), %rdi
    0000075b: 	cmpq	%r12, %rdi
    0000075e: 	je	.Ltmp327 # Offset: 1886
    00000760: 	movq	0xc0(%rsp), %rax
    00000768: 	leaq	0x1(%rax), %rsi
    0000076c: 	callq	_ZdlPvm@PLT # Offset: 1900
.Ltmp327:
    00000771: 	movq	0x90(%rsp), %r15
    00000779: 	movq	0x98(%rsp), %r13
    00000781: 	movq	%r12, 0xb0(%rsp)
    00000789: 	movq	%r15, %rax
    0000078c: 	addq	%r13, %rax
    0000078f: 	je	.Ltmp328 # Offset: 1935
    00000791: 	testq	%r15, %r15
    00000794: 	je	.Ltmp329 # Offset: 1940
.Ltmp328:
    0000079a: 	movq	%r13, 0x88(%rsp)
    000007a2: 	cmpq	$0xf, %r13
    000007a6: 	ja	.Ltmp330 # Offset: 1958
    000007ac: 	cmpq	$0x1, %r13
    000007b0: 	jne	.Ltmp331 # Offset: 1968
    000007b6: 	movzbl	(%r15), %eax
    000007ba: 	movb	%al, 0xc0(%rsp)
    000007c1: 	movq	%r12, %rax
.Ltmp433:
    000007c4: 	movq	%r13, 0xb8(%rsp)
    000007cc: 	movb	$0x0, (%rax,%r13)
    000007d1: 	movabsq	$0x3fffffffffffffff, %rax
    000007db: 	subq	0xb8(%rsp), %rax
    000007e3: 	cmpq	$0x11, %rax
    000007e7: 	jbe	.Ltmp332 # Offset: 2023
    000007ed: 	movl	$0x12, %edx
    000007f2: 	leaq	DATAat0x7210(%rip), %rsi
    000007f9: 	movq	%r14, %rdi
    000007fc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2044
    00000801: 	callq	clock@PLT # Offset: 2049
    00000806: 	movl	iterations(%rip), %r15d
    0000080d: 	movq	%rax, start_time(%rip)
    00000814: 	testl	%r15d, %r15d
    00000817: 	jle	.Ltmp333 # Offset: 2071
    0000081d: 	movsd	DATAat0x72d0(%rip), %xmm3
    00000825: 	movsd	DATAat0x72a0(%rip), %xmm5
    0000082d: 	xorl	%r13d, %r13d
    00000830: 	movq	DATAat0x72c0(%rip), %xmm7
    00000838: 	movsd	DATAat0x72a8(%rip), %xmm4
    00000840: 	movsd	%xmm3, 0x20(%rsp)
    00000846: 	movsd	%xmm5, 0x8(%rsp)
    0000084c: 	movaps	%xmm7, 0x10(%rsp)
    00000851: 	movsd	%xmm4, 0x70(%rsp)
    00000857: 	nopw	(%rax,%rax) # Size: 9
.Ltmp336:
    00000860: 	movsd	0x20(%rsp), %xmm2
    00000866: 	movq	%rbp, %rax
    00000869: 	nopl	(%rax) # Size: 7
.Ltmp334:
    00000870: 	mulsd	(%rax), %xmm2
    00000874: 	addq	$0x20, %rax
    00000878: 	mulsd	-0x18(%rax), %xmm2
    0000087d: 	mulsd	-0x10(%rax), %xmm2
    00000882: 	mulsd	-0x8(%rax), %xmm2
    00000887: 	cmpq	%rbx, %rax
    0000088a: 	jne	.Ltmp334 # Offset: 2186
    0000088c: 	movsd	0x8(%rsp), %xmm1
    00000892: 	movsd	init_value(%rip), %xmm0
    0000089a: 	movsd	%xmm2, 0x30(%rsp)
    000008a0: 	callq	pow@PLT # Offset: 2208
    000008a5: 	movsd	0x30(%rsp), %xmm2
    000008ab: 	subsd	%xmm0, %xmm2
    000008af: 	andpd	0x10(%rsp), %xmm2
    000008b5: 	comisd	0x70(%rsp), %xmm2
    000008bb: 	ja	.Ltmp335 # Offset: 2235
.Ltmp424:
    000008c1: 	addl	$0x1, %r13d
    000008c5: 	cmpl	%r15d, %r13d
    000008c8: 	jl	.Ltmp336 # Offset: 2248
.Ltmp333:
    000008ca: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000008d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    000008d8: 	subq	$0x20, %rax
    000008dc: 	cmpq	%rax, %r15
    000008df: 	je	.Ltmp337 # Offset: 2271
    000008e5: 	leaq	0x10(%r15), %rdi
    000008e9: 	movq	0xb8(%rsp), %r13
    000008f1: 	movq	%rdi, (%r15)
    000008f4: 	movq	0xb0(%rsp), %rax
    000008fc: 	movq	%rax, %rcx
    000008ff: 	movq	%rax, 0x8(%rsp)
    00000904: 	addq	%r13, %rcx
    00000907: 	je	.Ltmp338 # Offset: 2311
    00000909: 	testq	%rax, %rax
    0000090c: 	je	.Ltmp339 # Offset: 2316
.Ltmp338:
    00000912: 	movq	%r13, 0x88(%rsp)
    0000091a: 	cmpq	$0xf, %r13
    0000091e: 	ja	.Ltmp340 # Offset: 2334
    00000924: 	cmpq	$0x1, %r13
    00000928: 	jne	.Ltmp341 # Offset: 2344
    0000092e: 	movq	0x8(%rsp), %rax
    00000933: 	movzbl	(%rax), %eax
    00000936: 	movb	%al, 0x10(%r15)
.Ltmp457:
    0000093a: 	movq	%r13, 0x8(%r15)
    0000093e: 	movb	$0x0, (%rdi,%r13)
    00000943: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000094a: 	addq	$0x20, %rax
    0000094e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp454:
    00000955: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000095c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000963: 	je	.Ltmp342 # Offset: 2403
.Ltmp449:
    00000969: 	movq	-0x20(%rax), %r13
    0000096d: 	callq	clock@PLT # Offset: 2413
    00000972: 	pxor	%xmm0, %xmm0
    00000976: 	movq	%rax, end_time(%rip)
    0000097d: 	movq	%r13, %rdi
    00000980: 	subq	start_time(%rip), %rax
    00000987: 	cvtsi2sd	%rax, %xmm0
    0000098c: 	divsd	DATAat0x7290(%rip), %xmm0
    00000994: 	callq	_Z13record_resultdPKc # Offset: 2452
    00000999: 	movq	0xb0(%rsp), %rdi
    000009a1: 	cmpq	%r12, %rdi
    000009a4: 	je	.Ltmp343 # Offset: 2468
    000009a6: 	movq	0xc0(%rsp), %rax
    000009ae: 	leaq	0x1(%rax), %rsi
    000009b2: 	callq	_ZdlPvm@PLT # Offset: 2482
.Ltmp343:
    000009b7: 	movq	0x90(%rsp), %r15
    000009bf: 	movq	0x98(%rsp), %r13
    000009c7: 	movq	%r12, 0xb0(%rsp)
    000009cf: 	movq	%r15, %rax
    000009d2: 	addq	%r13, %rax
    000009d5: 	je	.Ltmp344 # Offset: 2517
    000009d7: 	testq	%r15, %r15
    000009da: 	je	.Ltmp345 # Offset: 2522
.Ltmp344:
    000009e0: 	movq	%r13, 0x88(%rsp)
    000009e8: 	cmpq	$0xf, %r13
    000009ec: 	ja	.Ltmp346 # Offset: 2540
    000009f2: 	cmpq	$0x1, %r13
    000009f6: 	jne	.Ltmp347 # Offset: 2550
    000009fc: 	movzbl	(%r15), %eax
    00000a00: 	movb	%al, 0xc0(%rsp)
    00000a07: 	movq	%r12, %rax
.Ltmp435:
    00000a0a: 	movq	%r13, 0xb8(%rsp)
    00000a12: 	movb	$0x0, (%rax,%r13)
    00000a17: 	movabsq	$0x3fffffffffffffff, %rax
    00000a21: 	subq	0xb8(%rsp), %rax
    00000a29: 	cmpq	$0x11, %rax
    00000a2d: 	jbe	.Ltmp348 # Offset: 2605
    00000a33: 	movl	$0x12, %edx
    00000a38: 	leaq	DATAat0x7223(%rip), %rsi
    00000a3f: 	movq	%r14, %rdi
    00000a42: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2626
    00000a47: 	callq	clock@PLT # Offset: 2631
    00000a4c: 	movq	%rax, start_time(%rip)
    00000a53: 	movl	iterations(%rip), %eax
    00000a59: 	testl	%eax, %eax
    00000a5b: 	jle	.Ltmp349 # Offset: 2651
    00000a61: 	movsd	DATAat0x72a0(%rip), %xmm3
    00000a69: 	movq	DATAat0x72c0(%rip), %xmm5
    00000a71: 	xorl	%r13d, %r13d
    00000a74: 	leaq	DATAat0x71da(%rip), %r15
    00000a7b: 	movsd	DATAat0x72a8(%rip), %xmm7
    00000a83: 	movapd	DATAat0x72d0(%rip), %xmm4
    00000a8b: 	movsd	%xmm3, 0x8(%rsp)
    00000a91: 	movaps	%xmm5, 0x10(%rsp)
    00000a96: 	movsd	%xmm7, 0x70(%rsp)
    00000a9c: 	movaps	%xmm4, 0x20(%rsp)
    00000aa1: 	nopl	(%rax) # Size: 7
.Ltmp352:
    00000aa8: 	movapd	0x20(%rsp), %xmm2
    00000aae: 	movq	%rbp, %rax
    00000ab1: 	nopl	(%rax) # Size: 7
.Ltmp350:
    00000ab8: 	movupd	(%rax), %xmm7
    00000abc: 	addq	$0x10, %rax
    00000ac0: 	mulpd	%xmm7, %xmm2
    00000ac4: 	cmpq	%rbx, %rax
    00000ac7: 	jne	.Ltmp350 # Offset: 2759
    00000ac9: 	movsd	0x8(%rsp), %xmm1
    00000acf: 	movsd	init_value(%rip), %xmm0
    00000ad7: 	movaps	%xmm2, 0x30(%rsp)
    00000adc: 	callq	pow@PLT # Offset: 2780
    00000ae1: 	movapd	0x30(%rsp), %xmm2
    00000ae7: 	movapd	%xmm0, %xmm1
    00000aeb: 	movapd	%xmm2, %xmm4
    00000aef: 	unpckhpd	%xmm4, %xmm4
    00000af3: 	movapd	%xmm4, %xmm0
    00000af7: 	mulsd	%xmm2, %xmm0
    00000afb: 	subsd	%xmm1, %xmm0
    00000aff: 	andpd	0x10(%rsp), %xmm0
    00000b05: 	comisd	0x70(%rsp), %xmm0
    00000b0b: 	ja	.Ltmp351 # Offset: 2827
.Ltmp423:
    00000b11: 	addl	$0x1, %r13d
    00000b15: 	cmpl	iterations(%rip), %r13d
    00000b1c: 	jl	.Ltmp352 # Offset: 2844
.Ltmp349:
    00000b1e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000b25: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000b2c: 	subq	$0x20, %rax
    00000b30: 	cmpq	%rax, %r15
    00000b33: 	je	.Ltmp353 # Offset: 2867
    00000b39: 	leaq	0x10(%r15), %rdi
    00000b3d: 	movq	0xb8(%rsp), %r13
    00000b45: 	movq	%rdi, (%r15)
    00000b48: 	movq	0xb0(%rsp), %rax
    00000b50: 	movq	%rax, %rcx
    00000b53: 	movq	%rax, 0x8(%rsp)
    00000b58: 	addq	%r13, %rcx
    00000b5b: 	je	.Ltmp354 # Offset: 2907
    00000b5d: 	testq	%rax, %rax
    00000b60: 	je	.Ltmp355 # Offset: 2912
.Ltmp354:
    00000b66: 	movq	%r13, 0x88(%rsp)
    00000b6e: 	cmpq	$0xf, %r13
    00000b72: 	ja	.Ltmp356 # Offset: 2930
    00000b78: 	cmpq	$0x1, %r13
    00000b7c: 	jne	.Ltmp357 # Offset: 2940
    00000b82: 	movq	0x8(%rsp), %rax
    00000b87: 	movzbl	(%rax), %eax
    00000b8a: 	movb	%al, 0x10(%r15)
.Ltmp459:
    00000b8e: 	movq	%r13, 0x8(%r15)
    00000b92: 	movb	$0x0, (%rdi,%r13)
    00000b97: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000b9e: 	addq	$0x20, %rax
    00000ba2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp450:
    00000ba9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000bb0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000bb7: 	je	.Ltmp358 # Offset: 2999
.Ltmp444:
    00000bbd: 	movq	-0x20(%rax), %r13
    00000bc1: 	callq	clock@PLT # Offset: 3009
    00000bc6: 	pxor	%xmm0, %xmm0
    00000bca: 	movq	%rax, end_time(%rip)
    00000bd1: 	movq	%r13, %rdi
    00000bd4: 	subq	start_time(%rip), %rax
    00000bdb: 	cvtsi2sd	%rax, %xmm0
    00000be0: 	divsd	DATAat0x7290(%rip), %xmm0
    00000be8: 	callq	_Z13record_resultdPKc # Offset: 3048
    00000bed: 	movq	0xb0(%rsp), %rdi
    00000bf5: 	cmpq	%r12, %rdi
    00000bf8: 	je	.Ltmp359 # Offset: 3064
    00000bfa: 	movq	0xc0(%rsp), %rax
    00000c02: 	leaq	0x1(%rax), %rsi
    00000c06: 	callq	_ZdlPvm@PLT # Offset: 3078
.Ltmp359:
    00000c0b: 	movq	0x90(%rsp), %r15
    00000c13: 	movq	0x98(%rsp), %r13
    00000c1b: 	movq	%r12, 0xb0(%rsp)
    00000c23: 	movq	%r15, %rax
    00000c26: 	addq	%r13, %rax
    00000c29: 	je	.Ltmp360 # Offset: 3113
    00000c2b: 	testq	%r15, %r15
    00000c2e: 	je	.Ltmp361 # Offset: 3118
.Ltmp360:
    00000c34: 	movq	%r13, 0x88(%rsp)
    00000c3c: 	cmpq	$0xf, %r13
    00000c40: 	ja	.Ltmp362 # Offset: 3136
    00000c46: 	cmpq	$0x1, %r13
    00000c4a: 	jne	.Ltmp363 # Offset: 3146
    00000c50: 	movzbl	(%r15), %eax
    00000c54: 	movb	%al, 0xc0(%rsp)
    00000c5b: 	movq	%r12, %rax
.Ltmp431:
    00000c5e: 	movq	%r13, 0xb8(%rsp)
    00000c66: 	movb	$0x0, (%rax,%r13)
    00000c6b: 	movabsq	$0x3fffffffffffffff, %rax
    00000c75: 	subq	0xb8(%rsp), %rax
    00000c7d: 	cmpq	$0x11, %rax
    00000c81: 	jbe	.Ltmp364 # Offset: 3201
    00000c87: 	movl	$0x12, %edx
    00000c8c: 	leaq	DATAat0x7236(%rip), %rsi
    00000c93: 	movq	%r14, %rdi
    00000c96: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3222
    00000c9b: 	callq	clock@PLT # Offset: 3227
    00000ca0: 	movl	iterations(%rip), %r15d
    00000ca7: 	movq	%rax, start_time(%rip)
    00000cae: 	testl	%r15d, %r15d
    00000cb1: 	jle	.Ltmp365 # Offset: 3249
    00000cb7: 	movsd	DATAat0x72a0(%rip), %xmm3
    00000cbf: 	movq	DATAat0x72c0(%rip), %xmm5
    00000cc7: 	xorl	%r13d, %r13d
    00000cca: 	movsd	DATAat0x72a8(%rip), %xmm7
    00000cd2: 	movapd	DATAat0x72d0(%rip), %xmm4
    00000cda: 	movsd	%xmm3, 0x8(%rsp)
    00000ce0: 	movaps	%xmm5, 0x10(%rsp)
    00000ce5: 	movsd	%xmm7, 0x70(%rsp)
    00000ceb: 	movaps	%xmm4, 0x20(%rsp)
.Ltmp368:
    00000cf0: 	movapd	0x20(%rsp), %xmm2
    00000cf6: 	movq	%rbp, %rax
    00000cf9: 	movapd	%xmm2, %xmm3
    00000cfd: 	nopl	(%rax) # Size: 3
.Ltmp366:
    00000d00: 	movupd	(%rax), %xmm6
    00000d04: 	movupd	0x10(%rax), %xmm5
    00000d09: 	addq	$0x20, %rax
    00000d0d: 	mulpd	%xmm6, %xmm2
    00000d11: 	mulpd	%xmm5, %xmm3
    00000d15: 	cmpq	%rbx, %rax
    00000d18: 	jne	.Ltmp366 # Offset: 3352
    00000d1a: 	movsd	0x8(%rsp), %xmm1
    00000d20: 	movsd	init_value(%rip), %xmm0
    00000d28: 	movaps	%xmm2, 0x40(%rsp)
    00000d2d: 	movaps	%xmm3, 0x30(%rsp)
    00000d32: 	callq	pow@PLT # Offset: 3378
    00000d37: 	movapd	0x40(%rsp), %xmm2
    00000d3d: 	movapd	0x30(%rsp), %xmm3
    00000d43: 	movapd	%xmm0, %xmm1
    00000d47: 	movapd	%xmm2, %xmm5
    00000d4b: 	movapd	%xmm3, %xmm0
    00000d4f: 	unpckhpd	%xmm3, %xmm3
    00000d53: 	unpckhpd	%xmm5, %xmm5
    00000d57: 	mulsd	%xmm5, %xmm0
    00000d5b: 	mulsd	%xmm3, %xmm0
    00000d5f: 	mulsd	%xmm2, %xmm0
    00000d63: 	subsd	%xmm1, %xmm0
    00000d67: 	andpd	0x10(%rsp), %xmm0
    00000d6d: 	comisd	0x70(%rsp), %xmm0
    00000d73: 	ja	.Ltmp367 # Offset: 3443
.Ltmp422:
    00000d79: 	addl	$0x1, %r13d
    00000d7d: 	cmpl	%r15d, %r13d
    00000d80: 	jl	.Ltmp368 # Offset: 3456
.Ltmp365:
    00000d86: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000d8d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00000d94: 	subq	$0x20, %rax
    00000d98: 	cmpq	%rax, %r15
    00000d9b: 	je	.Ltmp369 # Offset: 3483
    00000da1: 	leaq	0x10(%r15), %rdi
    00000da5: 	movq	0xb8(%rsp), %r13
    00000dad: 	movq	%rdi, (%r15)
    00000db0: 	movq	0xb0(%rsp), %rax
    00000db8: 	movq	%rax, %rcx
    00000dbb: 	movq	%rax, 0x8(%rsp)
    00000dc0: 	addq	%r13, %rcx
    00000dc3: 	je	.Ltmp370 # Offset: 3523
    00000dc5: 	testq	%rax, %rax
    00000dc8: 	je	.Ltmp371 # Offset: 3528
.Ltmp370:
    00000dce: 	movq	%r13, 0x88(%rsp)
    00000dd6: 	cmpq	$0xf, %r13
    00000dda: 	ja	.Ltmp372 # Offset: 3546
    00000de0: 	cmpq	$0x1, %r13
    00000de4: 	jne	.Ltmp373 # Offset: 3556
    00000dea: 	movq	0x8(%rsp), %rax
    00000def: 	movzbl	(%rax), %eax
    00000df2: 	movb	%al, 0x10(%r15)
.Ltmp462:
    00000df6: 	movq	%r13, 0x8(%r15)
    00000dfa: 	movb	$0x0, (%rdi,%r13)
    00000dff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e06: 	addq	$0x20, %rax
    00000e0a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp446:
    00000e11: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000e18: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e1f: 	je	.Ltmp374 # Offset: 3615
.Ltmp445:
    00000e25: 	movq	-0x20(%rax), %r13
    00000e29: 	callq	clock@PLT # Offset: 3625
    00000e2e: 	pxor	%xmm0, %xmm0
    00000e32: 	movq	%rax, end_time(%rip)
    00000e39: 	movq	%r13, %rdi
    00000e3c: 	subq	start_time(%rip), %rax
    00000e43: 	cvtsi2sd	%rax, %xmm0
    00000e48: 	divsd	DATAat0x7290(%rip), %xmm0
    00000e50: 	callq	_Z13record_resultdPKc # Offset: 3664
    00000e55: 	movq	0xb0(%rsp), %rdi
    00000e5d: 	cmpq	%r12, %rdi
    00000e60: 	je	.Ltmp375 # Offset: 3680
    00000e62: 	movq	0xc0(%rsp), %rax
    00000e6a: 	leaq	0x1(%rax), %rsi
    00000e6e: 	callq	_ZdlPvm@PLT # Offset: 3694
.Ltmp375:
    00000e73: 	movq	0x90(%rsp), %r15
    00000e7b: 	movq	0x98(%rsp), %r13
    00000e83: 	movq	%r12, 0xb0(%rsp)
    00000e8b: 	movq	%r15, %rax
    00000e8e: 	addq	%r13, %rax
    00000e91: 	je	.Ltmp376 # Offset: 3729
    00000e93: 	testq	%r15, %r15
    00000e96: 	je	.Ltmp377 # Offset: 3734
.Ltmp376:
    00000e9c: 	movq	%r13, 0x88(%rsp)
    00000ea4: 	cmpq	$0xf, %r13
    00000ea8: 	ja	.Ltmp378 # Offset: 3752
    00000eae: 	cmpq	$0x1, %r13
    00000eb2: 	jne	.Ltmp379 # Offset: 3762
    00000eb8: 	movzbl	(%r15), %eax
    00000ebc: 	movb	%al, 0xc0(%rsp)
    00000ec3: 	movq	%r12, %rax
.Ltmp429:
    00000ec6: 	movq	%r13, 0xb8(%rsp)
    00000ece: 	movb	$0x0, (%rax,%r13)
    00000ed3: 	movabsq	$0x3fffffffffffffff, %rax
    00000edd: 	subq	0xb8(%rsp), %rax
    00000ee5: 	cmpq	$0x11, %rax
    00000ee9: 	jbe	.Ltmp380 # Offset: 3817
    00000eef: 	movl	$0x12, %edx
    00000ef4: 	leaq	DATAat0x7249(%rip), %rsi
    00000efb: 	movq	%r14, %rdi
    00000efe: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3838
    00000f03: 	callq	clock@PLT # Offset: 3843
    00000f08: 	movl	iterations(%rip), %r15d
    00000f0f: 	movq	%rax, start_time(%rip)
    00000f16: 	testl	%r15d, %r15d
    00000f19: 	jle	.Ltmp381 # Offset: 3865
    00000f1f: 	movsd	DATAat0x72a0(%rip), %xmm3
    00000f27: 	movq	DATAat0x72c0(%rip), %xmm5
    00000f2f: 	xorl	%r13d, %r13d
    00000f32: 	movsd	DATAat0x72a8(%rip), %xmm7
    00000f3a: 	movapd	DATAat0x72d0(%rip), %xmm6
    00000f42: 	movsd	%xmm3, 0x8(%rsp)
    00000f48: 	movaps	%xmm5, 0x10(%rsp)
    00000f4d: 	movsd	%xmm7, 0x70(%rsp)
    00000f53: 	movaps	%xmm6, 0x20(%rsp)
    00000f58: 	nopl	(%rax,%rax) # Size: 8
.Ltmp384:
    00000f60: 	movapd	0x20(%rsp), %xmm2
    00000f66: 	movq	%rbp, %rax
    00000f69: 	movapd	%xmm2, %xmm3
    00000f6d: 	nopl	(%rax) # Size: 3
.Ltmp382:
    00000f70: 	movupd	(%rax), %xmm7
    00000f74: 	movupd	0x10(%rax), %xmm6
    00000f79: 	addq	$0x20, %rax
    00000f7d: 	mulpd	%xmm7, %xmm2
    00000f81: 	mulpd	%xmm6, %xmm3
    00000f85: 	cmpq	%rbx, %rax
    00000f88: 	jne	.Ltmp382 # Offset: 3976
    00000f8a: 	movsd	0x8(%rsp), %xmm1
    00000f90: 	movsd	init_value(%rip), %xmm0
    00000f98: 	movaps	%xmm3, 0x40(%rsp)
    00000f9d: 	movaps	%xmm2, 0x30(%rsp)
    00000fa2: 	callq	pow@PLT # Offset: 4002
    00000fa7: 	movapd	0x30(%rsp), %xmm2
    00000fad: 	movapd	0x40(%rsp), %xmm3
    00000fb3: 	movapd	%xmm0, %xmm1
    00000fb7: 	movapd	%xmm2, %xmm4
    00000fbb: 	unpckhpd	%xmm4, %xmm4
    00000fbf: 	movapd	%xmm4, %xmm0
    00000fc3: 	mulsd	%xmm3, %xmm0
    00000fc7: 	unpckhpd	%xmm3, %xmm3
    00000fcb: 	mulsd	%xmm3, %xmm0
    00000fcf: 	mulsd	%xmm2, %xmm0
    00000fd3: 	subsd	%xmm1, %xmm0
    00000fd7: 	andpd	0x10(%rsp), %xmm0
    00000fdd: 	comisd	0x70(%rsp), %xmm0
    00000fe3: 	ja	.Ltmp383 # Offset: 4067
.Ltmp421:
    00000fe9: 	addl	$0x1, %r13d
    00000fed: 	cmpl	%r15d, %r13d
    00000ff0: 	jl	.Ltmp384 # Offset: 4080
.Ltmp381:
    00000ff6: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000ffd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r15
    00001004: 	subq	$0x20, %rax
    00001008: 	cmpq	%rax, %r15
    0000100b: 	je	.Ltmp385 # Offset: 4107
    00001011: 	leaq	0x10(%r15), %rdi
    00001015: 	movq	0xb8(%rsp), %r13
    0000101d: 	movq	%rdi, (%r15)
    00001020: 	movq	0xb0(%rsp), %rax
    00001028: 	movq	%rax, %rcx
    0000102b: 	movq	%rax, 0x8(%rsp)
    00001030: 	addq	%r13, %rcx
    00001033: 	je	.Ltmp386 # Offset: 4147
    00001035: 	testq	%rax, %rax
    00001038: 	je	.Ltmp387 # Offset: 4152
.Ltmp386:
    0000103e: 	movq	%r13, 0x88(%rsp)
    00001046: 	cmpq	$0xf, %r13
    0000104a: 	ja	.Ltmp388 # Offset: 4170
    00001050: 	cmpq	$0x1, %r13
    00001054: 	jne	.Ltmp389 # Offset: 4180
    0000105a: 	movq	0x8(%rsp), %rax
    0000105f: 	movzbl	(%rax), %eax
    00001062: 	movb	%al, 0x10(%r15)
.Ltmp465:
    00001066: 	movq	%r13, 0x8(%r15)
    0000106a: 	movb	$0x0, (%rdi,%r13)
    0000106f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001076: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000107d: 	addq	$0x20, %rax
    00001081: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001088: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000108f: 	je	.Ltmp390 # Offset: 4239
.Ltmp443:
    00001095: 	movq	-0x20(%rax), %r13
    00001099: 	callq	clock@PLT # Offset: 4249
    0000109e: 	pxor	%xmm0, %xmm0
    000010a2: 	movq	%rax, end_time(%rip)
    000010a9: 	movq	%r13, %rdi
    000010ac: 	subq	start_time(%rip), %rax
    000010b3: 	cvtsi2sd	%rax, %xmm0
    000010b8: 	divsd	DATAat0x7290(%rip), %xmm0
    000010c0: 	callq	_Z13record_resultdPKc # Offset: 4288
    000010c5: 	movq	0xb0(%rsp), %rdi
    000010cd: 	cmpq	%r12, %rdi
    000010d0: 	je	.Ltmp391 # Offset: 4304
    000010d2: 	movq	0xc0(%rsp), %rax
    000010da: 	leaq	0x1(%rax), %rsi
    000010de: 	callq	_ZdlPvm@PLT # Offset: 4318
.Ltmp391:
    000010e3: 	movq	0x90(%rsp), %r15
    000010eb: 	movq	0x98(%rsp), %r13
    000010f3: 	movq	%r12, 0xb0(%rsp)
    000010fb: 	movq	%r15, %rax
    000010fe: 	addq	%r13, %rax
    00001101: 	je	.Ltmp392 # Offset: 4353
    00001103: 	testq	%r15, %r15
    00001106: 	je	.Ltmp393 # Offset: 4358
.Ltmp392:
    0000110c: 	movq	%r13, 0x88(%rsp)
    00001114: 	cmpq	$0xf, %r13
    00001118: 	ja	.Ltmp394 # Offset: 4376
    0000111e: 	cmpq	$0x1, %r13
    00001122: 	jne	.Ltmp395 # Offset: 4386
    00001128: 	movzbl	(%r15), %eax
    0000112c: 	movb	%al, 0xc0(%rsp)
    00001133: 	movq	%r12, %rax
.Ltmp427:
    00001136: 	movq	%r13, 0xb8(%rsp)
    0000113e: 	movb	$0x0, (%rax,%r13)
    00001143: 	movabsq	$0x3fffffffffffffff, %rax
    0000114d: 	subq	0xb8(%rsp), %rax
    00001155: 	cmpq	$0x11, %rax
    00001159: 	jbe	.Ltmp396 # Offset: 4441
    0000115f: 	movl	$0x12, %edx
    00001164: 	leaq	DATAat0x725c(%rip), %rsi
    0000116b: 	movq	%r14, %rdi
    0000116e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4462
    00001173: 	callq	clock@PLT # Offset: 4467
    00001178: 	movl	iterations(%rip), %r15d
    0000117f: 	movq	%rax, start_time(%rip)
    00001186: 	testl	%r15d, %r15d
    00001189: 	jle	.Ltmp397 # Offset: 4489
    0000118f: 	movsd	DATAat0x72a0(%rip), %xmm4
    00001197: 	movq	DATAat0x72c0(%rip), %xmm3
    0000119f: 	xorl	%r13d, %r13d
    000011a2: 	movsd	DATAat0x72a8(%rip), %xmm5
    000011aa: 	movapd	DATAat0x72d0(%rip), %xmm7
    000011b2: 	movsd	%xmm4, 0x8(%rsp)
    000011b8: 	movaps	%xmm3, 0x10(%rsp)
    000011bd: 	movsd	%xmm5, 0x70(%rsp)
    000011c3: 	movaps	%xmm7, 0x20(%rsp)
    000011c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp400:
    000011d0: 	movapd	0x20(%rsp), %xmm4
    000011d6: 	movq	%rbp, %rax
    000011d9: 	movapd	%xmm4, %xmm3
    000011dd: 	movapd	%xmm4, %xmm2
    000011e1: 	movapd	%xmm4, %xmm5
    000011e5: 	nopl	(%rax) # Size: 3
.Ltmp398:
    000011e8: 	movupd	(%rax), %xmm1
    000011ec: 	movupd	0x10(%rax), %xmm7
    000011f1: 	addq	$0x40, %rax
    000011f5: 	movupd	-0x20(%rax), %xmm6
    000011fa: 	mulpd	%xmm1, %xmm4
    000011fe: 	movupd	-0x10(%rax), %xmm1
    00001203: 	mulpd	%xmm7, %xmm5
    00001207: 	mulpd	%xmm6, %xmm2
    0000120b: 	mulpd	%xmm1, %xmm3
    0000120f: 	cmpq	%rax, %rbx
    00001212: 	jne	.Ltmp398 # Offset: 4626
    00001214: 	movsd	0x8(%rsp), %xmm1
    0000121a: 	movsd	init_value(%rip), %xmm0
    00001222: 	movaps	%xmm5, 0x60(%rsp)
    00001227: 	movaps	%xmm4, 0x50(%rsp)
    0000122c: 	movaps	%xmm3, 0x40(%rsp)
    00001231: 	movaps	%xmm2, 0x30(%rsp)
    00001236: 	callq	pow@PLT # Offset: 4662
    0000123b: 	movapd	0x50(%rsp), %xmm4
    00001241: 	movapd	0x60(%rsp), %xmm5
    00001247: 	movapd	%xmm0, %xmm6
    0000124b: 	movapd	0x30(%rsp), %xmm2
    00001251: 	movapd	%xmm4, %xmm3
    00001255: 	movapd	%xmm5, %xmm0
    00001259: 	unpckhpd	%xmm5, %xmm5
    0000125d: 	unpckhpd	%xmm3, %xmm3
    00001261: 	mulsd	%xmm3, %xmm0
    00001265: 	movapd	0x40(%rsp), %xmm3
    0000126b: 	mulsd	%xmm5, %xmm0
    0000126f: 	movapd	%xmm2, %xmm5
    00001273: 	unpckhpd	%xmm5, %xmm5
    00001277: 	movapd	%xmm5, %xmm1
    0000127b: 	mulsd	%xmm3, %xmm1
    0000127f: 	unpckhpd	%xmm3, %xmm3
    00001283: 	mulsd	%xmm4, %xmm0
    00001287: 	mulsd	%xmm3, %xmm1
    0000128b: 	mulsd	%xmm2, %xmm1
    0000128f: 	mulsd	%xmm1, %xmm0
    00001293: 	subsd	%xmm6, %xmm0
    00001297: 	andpd	0x10(%rsp), %xmm0
    0000129d: 	comisd	0x70(%rsp), %xmm0
    000012a3: 	ja	.Ltmp399 # Offset: 4771
.Ltmp425:
    000012a9: 	addl	$0x1, %r13d
    000012ad: 	cmpl	%r15d, %r13d
    000012b0: 	jl	.Ltmp400 # Offset: 4784
.Ltmp397:
    000012b6: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000012bd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000012c4: 	subq	$0x20, %rax
    000012c8: 	cmpq	%rax, %rbx
    000012cb: 	je	.Ltmp401 # Offset: 4811
    000012d1: 	leaq	0x10(%rbx), %rdi
    000012d5: 	movq	0xb8(%rsp), %r13
    000012dd: 	movq	%rdi, (%rbx)
    000012e0: 	movq	0xb0(%rsp), %r15
    000012e8: 	movq	%r15, %rax
    000012eb: 	addq	%r13, %rax
    000012ee: 	je	.Ltmp402 # Offset: 4846
    000012f0: 	testq	%r15, %r15
    000012f3: 	je	.Ltmp403 # Offset: 4851
.Ltmp402:
    000012f9: 	movq	%r13, 0x88(%rsp)
    00001301: 	cmpq	$0xf, %r13
    00001305: 	ja	.Ltmp404 # Offset: 4869
    0000130b: 	cmpq	$0x1, %r13
    0000130f: 	jne	.Ltmp405 # Offset: 4879
    00001315: 	movzbl	(%r15), %eax
    00001319: 	movb	%al, 0x10(%rbx)
.Ltmp455:
    0000131c: 	movq	%r13, 0x8(%rbx)
    00001320: 	movb	$0x0, (%rdi,%r13)
    00001325: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000132c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001333: 	addq	$0x20, %rax
    00001337: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000133e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001345: 	je	.Ltmp406 # Offset: 4933
.Ltmp448:
    0000134b: 	movq	-0x20(%rax), %r13
    0000134f: 	callq	clock@PLT # Offset: 4943
    00001354: 	pxor	%xmm0, %xmm0
    00001358: 	movq	%rax, end_time(%rip)
    0000135f: 	movq	%r13, %rdi
    00001362: 	subq	start_time(%rip), %rax
    00001369: 	cvtsi2sd	%rax, %xmm0
    0000136e: 	divsd	DATAat0x7290(%rip), %xmm0
    00001376: 	callq	_Z13record_resultdPKc # Offset: 4982
    0000137b: 	movq	0xb0(%rsp), %rdi
    00001383: 	cmpq	%r12, %rdi
    00001386: 	je	.Ltmp407 # Offset: 4998
    00001388: 	movq	0xc0(%rsp), %rax
    00001390: 	leaq	0x1(%rax), %rsi
    00001394: 	callq	_ZdlPvm@PLT # Offset: 5012
.Ltmp407:
    00001399: 	movq	0x90(%rsp), %r15
    000013a1: 	movq	0x98(%rsp), %r13
    000013a9: 	movq	%r12, 0xb0(%rsp)
    000013b1: 	movq	%r15, %rax
    000013b4: 	addq	%r13, %rax
    000013b7: 	je	.Ltmp408 # Offset: 5047
    000013b9: 	testq	%r15, %r15
    000013bc: 	je	.Ltmp409 # Offset: 5052
.Ltmp408:
    000013c2: 	movq	%r13, 0x88(%rsp)
    000013ca: 	cmpq	$0xf, %r13
    000013ce: 	ja	.Ltmp410 # Offset: 5070
    000013d4: 	cmpq	$0x1, %r13
    000013d8: 	jne	.Ltmp411 # Offset: 5080
    000013de: 	movzbl	(%r15), %eax
    000013e2: 	movb	%al, 0xc0(%rsp)
    000013e9: 	movq	%r12, %rax
.Ltmp441:
    000013ec: 	movq	%r13, 0xb8(%rsp)
    000013f4: 	movb	$0x0, (%rax,%r13)
    000013f9: 	movabsq	$0x3fffffffffffffff, %rax
    00001403: 	subq	0xb8(%rsp), %rax
    0000140b: 	cmpq	$0x10, %rax
    0000140f: 	jbe	.Ltmp412 # Offset: 5135
    00001415: 	movl	$0x11, %edx
    0000141a: 	leaq	DATAat0x726f(%rip), %rsi
    00001421: 	movq	%r14, %rdi
    00001424: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5156
    00001429: 	movl	iterations(%rip), %edx
    0000142f: 	xorl	%r8d, %r8d
    00001432: 	xorl	%ecx, %ecx
    00001434: 	movl	$0xfa0, %esi
    00001439: 	movq	0xb0(%rsp), %rdi
    00001441: 	callq	_Z9summarizePKciiii # Offset: 5185
    00001446: 	movq	0xb0(%rsp), %rdi
    0000144e: 	cmpq	%r12, %rdi
    00001451: 	je	.Ltmp413 # Offset: 5201
    00001453: 	movq	0xc0(%rsp), %rax
    0000145b: 	leaq	0x1(%rax), %rsi
    0000145f: 	callq	_ZdlPvm@PLT # Offset: 5215
.Ltmp413:
    00001464: 	movq	%rbp, %rdi
    00001467: 	movl	$0x8, %esi
    0000146c: 	callq	_ZdlPvm@PLT # Offset: 5228
    00001471: 	movq	0x90(%rsp), %rdi
    00001479: 	cmpq	0x78(%rsp), %rdi
    0000147e: 	je	.Ltmp414 # Offset: 5246
    00001480: 	movq	0xa0(%rsp), %rax
    00001488: 	leaq	0x1(%rax), %rsi
    0000148c: 	callq	_ZdlPvm@PLT # Offset: 5260
.Ltmp414:
    00001491: 	movq	0xd8(%rsp), %rax
    00001499: 	subq	%fs:0x28, %rax
    000014a2: 	jne	.Ltmp415 # Offset: 5282
    000014a8: 	addq	$0xe8, %rsp
    000014af: 	popq	%rbx
    000014b0: 	popq	%rbp
    000014b1: 	popq	%r12
    000014b3: 	popq	%r13
    000014b5: 	popq	%r14
    000014b7: 	popq	%r15
    000014b9: 	retq # Offset: 5305
.Ltmp283:
    000014ba: 	testq	%r13, %r13
    000014bd: 	jne	.Ltmp416 # Offset: 5309
    000014c3: 	movq	%r12, %rax
    000014c6: 	jmp	.Ltmp417 # Offset: 5318
    000014cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp287:
    000014d0: 	movl	current_test(%rip), %edx
    000014d6: 	movq	%r15, %rsi
    000014d9: 	movl	$0x1, %edi
    000014de: 	xorl	%eax, %eax
    000014e0: 	callq	__printf_chk@PLT # Offset: 5344
    000014e5: 	jmp	.Ltmp418 # Offset: 5349
    000014ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp303:
    000014f0: 	movl	current_test(%rip), %edx
    000014f6: 	movq	%r15, %rsi
    000014f9: 	movl	$0x1, %edi
    000014fe: 	xorl	%eax, %eax
    00001500: 	callq	__printf_chk@PLT # Offset: 5376
    00001505: 	jmp	.Ltmp419 # Offset: 5381
    0000150a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp319:
    00001510: 	movl	current_test(%rip), %edx
    00001516: 	movq	%r15, %rsi
    00001519: 	movl	$0x1, %edi
    0000151e: 	xorl	%eax, %eax
    00001520: 	callq	__printf_chk@PLT # Offset: 5408
    00001525: 	jmp	.Ltmp420 # Offset: 5413
    0000152a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp383:
    00001530: 	movl	current_test(%rip), %edx
    00001536: 	leaq	DATAat0x71da(%rip), %rsi
    0000153d: 	movl	$0x1, %edi
    00001542: 	xorl	%eax, %eax
    00001544: 	callq	__printf_chk@PLT # Offset: 5444
    00001549: 	movl	iterations(%rip), %r15d
    00001550: 	jmp	.Ltmp421 # Offset: 5456
    00001555: 	nopl	(%rax) # Size: 3
.Ltmp367:
    00001558: 	movl	current_test(%rip), %edx
    0000155e: 	leaq	DATAat0x71da(%rip), %rsi
    00001565: 	movl	$0x1, %edi
    0000156a: 	xorl	%eax, %eax
    0000156c: 	callq	__printf_chk@PLT # Offset: 5484
    00001571: 	movl	iterations(%rip), %r15d
    00001578: 	jmp	.Ltmp422 # Offset: 5496
    0000157d: 	nopl	(%rax) # Size: 3
.Ltmp351:
    00001580: 	movl	current_test(%rip), %edx
    00001586: 	movq	%r15, %rsi
    00001589: 	movl	$0x1, %edi
    0000158e: 	xorl	%eax, %eax
    00001590: 	callq	__printf_chk@PLT # Offset: 5520
    00001595: 	jmp	.Ltmp423 # Offset: 5525
    0000159a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp335:
    000015a0: 	movl	current_test(%rip), %edx
    000015a6: 	leaq	DATAat0x71da(%rip), %rsi
    000015ad: 	movl	$0x1, %edi
    000015b2: 	xorl	%eax, %eax
    000015b4: 	callq	__printf_chk@PLT # Offset: 5556
    000015b9: 	movl	iterations(%rip), %r15d
    000015c0: 	jmp	.Ltmp424 # Offset: 5568
    000015c5: 	nopl	(%rax) # Size: 3
.Ltmp399:
    000015c8: 	movl	current_test(%rip), %edx
    000015ce: 	leaq	DATAat0x71da(%rip), %rsi
    000015d5: 	movl	$0x1, %edi
    000015da: 	xorl	%eax, %eax
    000015dc: 	callq	__printf_chk@PLT # Offset: 5596
    000015e1: 	movl	iterations(%rip), %r15d
    000015e8: 	jmp	.Ltmp425 # Offset: 5608
.Ltmp395:
    000015ed: 	testq	%r13, %r13
    000015f0: 	jne	.Ltmp426 # Offset: 5616
    000015f6: 	movq	%r12, %rax
    000015f9: 	jmp	.Ltmp427 # Offset: 5625
.Ltmp379:
    000015fe: 	testq	%r13, %r13
    00001601: 	jne	.Ltmp428 # Offset: 5633
    00001607: 	movq	%r12, %rax
    0000160a: 	jmp	.Ltmp429 # Offset: 5642
.Ltmp363:
    0000160f: 	testq	%r13, %r13
    00001612: 	jne	.Ltmp430 # Offset: 5650
    00001618: 	movq	%r12, %rax
    0000161b: 	jmp	.Ltmp431 # Offset: 5659
.Ltmp331:
    00001620: 	testq	%r13, %r13
    00001623: 	jne	.Ltmp432 # Offset: 5667
    00001629: 	movq	%r12, %rax
    0000162c: 	jmp	.Ltmp433 # Offset: 5676
.Ltmp347:
    00001631: 	testq	%r13, %r13
    00001634: 	jne	.Ltmp434 # Offset: 5684
    0000163a: 	movq	%r12, %rax
    0000163d: 	jmp	.Ltmp435 # Offset: 5693
.Ltmp299:
    00001642: 	testq	%r13, %r13
    00001645: 	jne	.Ltmp436 # Offset: 5701
    0000164b: 	movq	%r12, %rax
    0000164e: 	jmp	.Ltmp437 # Offset: 5710
.Ltmp315:
    00001653: 	testq	%r13, %r13
    00001656: 	jne	.Ltmp438 # Offset: 5718
    0000165c: 	movq	%r12, %rax
    0000165f: 	jmp	.Ltmp439 # Offset: 5727
.Ltmp411:
    00001664: 	testq	%r13, %r13
    00001667: 	jne	.Ltmp440 # Offset: 5735
    0000166d: 	movq	%r12, %rax
    00001670: 	jmp	.Ltmp441 # Offset: 5744
.Ltmp410:
    00001675: 	leaq	0x88(%rsp), %rsi
    0000167d: 	xorl	%edx, %edx
    0000167f: 	movq	%r14, %rdi
    00001682: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5762
    00001687: 	movq	%rax, 0xb0(%rsp)
    0000168f: 	movq	%rax, %rdi
    00001692: 	movq	0x88(%rsp), %rax
    0000169a: 	movq	%rax, 0xc0(%rsp)
.Ltmp479:
    000016a2: 	movq	%r13, %rdx
    000016a5: 	movq	%r15, %rsi
    000016a8: 	callq	memcpy@PLT # Offset: 5800
    000016ad: 	movq	0x88(%rsp), %r13
    000016b5: 	movq	0xb0(%rsp), %rax
    000016bd: 	jmp	.Ltmp441 # Offset: 5821
.Ltmp314:
    000016c2: 	leaq	0x88(%rsp), %rsi
    000016ca: 	xorl	%edx, %edx
    000016cc: 	movq	%r14, %rdi
    000016cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5839
    000016d4: 	movq	%rax, 0xb0(%rsp)
    000016dc: 	movq	%rax, %rdi
    000016df: 	movq	0x88(%rsp), %rax
    000016e7: 	movq	%rax, 0xc0(%rsp)
.Ltmp478:
    000016ef: 	movq	%r13, %rdx
    000016f2: 	movq	%r15, %rsi
    000016f5: 	callq	memcpy@PLT # Offset: 5877
    000016fa: 	movq	0x88(%rsp), %r13
    00001702: 	movq	0xb0(%rsp), %rax
    0000170a: 	jmp	.Ltmp439 # Offset: 5898
.Ltmp330:
    0000170f: 	leaq	0x88(%rsp), %rsi
    00001717: 	xorl	%edx, %edx
    00001719: 	movq	%r14, %rdi
    0000171c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5916
    00001721: 	movq	%rax, 0xb0(%rsp)
    00001729: 	movq	%rax, %rdi
    0000172c: 	movq	0x88(%rsp), %rax
    00001734: 	movq	%rax, 0xc0(%rsp)
.Ltmp475:
    0000173c: 	movq	%r13, %rdx
    0000173f: 	movq	%r15, %rsi
    00001742: 	callq	memcpy@PLT # Offset: 5954
    00001747: 	movq	0x88(%rsp), %r13
    0000174f: 	movq	0xb0(%rsp), %rax
    00001757: 	jmp	.Ltmp433 # Offset: 5975
.Ltmp346:
    0000175c: 	leaq	0x88(%rsp), %rsi
    00001764: 	xorl	%edx, %edx
    00001766: 	movq	%r14, %rdi
    00001769: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5993
    0000176e: 	movq	%rax, 0xb0(%rsp)
    00001776: 	movq	%rax, %rdi
    00001779: 	movq	0x88(%rsp), %rax
    00001781: 	movq	%rax, 0xc0(%rsp)
.Ltmp476:
    00001789: 	movq	%r13, %rdx
    0000178c: 	movq	%r15, %rsi
    0000178f: 	callq	memcpy@PLT # Offset: 6031
    00001794: 	movq	0x88(%rsp), %r13
    0000179c: 	movq	0xb0(%rsp), %rax
    000017a4: 	jmp	.Ltmp435 # Offset: 6052
.Ltmp282:
    000017a9: 	leaq	0x88(%rsp), %rsi
    000017b1: 	leaq	0xb0(%rsp), %rdi
    000017b9: 	xorl	%edx, %edx
    000017bb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6075
    000017c0: 	movq	%rax, 0xb0(%rsp)
    000017c8: 	movq	%rax, %rdi
    000017cb: 	movq	0x88(%rsp), %rax
    000017d3: 	movq	%rax, 0xc0(%rsp)
.Ltmp471:
    000017db: 	movq	%r13, %rdx
    000017de: 	movq	%r14, %rsi
    000017e1: 	callq	memcpy@PLT # Offset: 6113
    000017e6: 	movq	0x88(%rsp), %r13
    000017ee: 	movq	0xb0(%rsp), %rax
    000017f6: 	jmp	.Ltmp417 # Offset: 6134
.Ltmp298:
    000017fb: 	leaq	0x88(%rsp), %rsi
    00001803: 	xorl	%edx, %edx
    00001805: 	movq	%r14, %rdi
    00001808: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6152
    0000180d: 	movq	%rax, 0xb0(%rsp)
    00001815: 	movq	%rax, %rdi
    00001818: 	movq	0x88(%rsp), %rax
    00001820: 	movq	%rax, 0xc0(%rsp)
.Ltmp477:
    00001828: 	movq	%r13, %rdx
    0000182b: 	movq	%r15, %rsi
    0000182e: 	callq	memcpy@PLT # Offset: 6190
    00001833: 	movq	0x88(%rsp), %r13
    0000183b: 	movq	0xb0(%rsp), %rax
    00001843: 	jmp	.Ltmp437 # Offset: 6211
.Ltmp378:
    00001848: 	leaq	0x88(%rsp), %rsi
    00001850: 	xorl	%edx, %edx
    00001852: 	movq	%r14, %rdi
    00001855: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6229
    0000185a: 	movq	%rax, 0xb0(%rsp)
    00001862: 	movq	%rax, %rdi
    00001865: 	movq	0x88(%rsp), %rax
    0000186d: 	movq	%rax, 0xc0(%rsp)
.Ltmp473:
    00001875: 	movq	%r13, %rdx
    00001878: 	movq	%r15, %rsi
    0000187b: 	callq	memcpy@PLT # Offset: 6267
    00001880: 	movq	0x88(%rsp), %r13
    00001888: 	movq	0xb0(%rsp), %rax
    00001890: 	jmp	.Ltmp429 # Offset: 6288
.Ltmp362:
    00001895: 	leaq	0x88(%rsp), %rsi
    0000189d: 	xorl	%edx, %edx
    0000189f: 	movq	%r14, %rdi
    000018a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6306
    000018a7: 	movq	%rax, 0xb0(%rsp)
    000018af: 	movq	%rax, %rdi
    000018b2: 	movq	0x88(%rsp), %rax
    000018ba: 	movq	%rax, 0xc0(%rsp)
.Ltmp474:
    000018c2: 	movq	%r13, %rdx
    000018c5: 	movq	%r15, %rsi
    000018c8: 	callq	memcpy@PLT # Offset: 6344
    000018cd: 	movq	0x88(%rsp), %r13
    000018d5: 	movq	0xb0(%rsp), %rax
    000018dd: 	jmp	.Ltmp431 # Offset: 6365
.Ltmp394:
    000018e2: 	leaq	0x88(%rsp), %rsi
    000018ea: 	xorl	%edx, %edx
    000018ec: 	movq	%r14, %rdi
    000018ef: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6383
    000018f4: 	movq	%rax, 0xb0(%rsp)
    000018fc: 	movq	%rax, %rdi
    000018ff: 	movq	0x88(%rsp), %rax
    00001907: 	movq	%rax, 0xc0(%rsp)
.Ltmp472:
    0000190f: 	movq	%r13, %rdx
    00001912: 	movq	%r15, %rsi
    00001915: 	callq	memcpy@PLT # Offset: 6421
    0000191a: 	movq	0x88(%rsp), %r13
    00001922: 	movq	0xb0(%rsp), %rax
    0000192a: 	jmp	.Ltmp427 # Offset: 6442
.Ltmp294:
    0000192f: 	movq	-0x8(%rdx), %rax
    00001933: 	addq	$0x200, %rax
    00001939: 	jmp	.Ltmp442 # Offset: 6457
.Ltmp385:
    0000193e: 	movq	%r14, %rsi
    00001941: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001948: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6472
    0000194d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001954: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000195b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001962: 	jne	.Ltmp443 # Offset: 6498
.Ltmp390:
    00001968: 	movq	-0x8(%rdx), %rax
    0000196c: 	addq	$0x200, %rax
    00001972: 	jmp	.Ltmp443 # Offset: 6514
.Ltmp358:
    00001977: 	movq	-0x8(%rdx), %rax
    0000197b: 	addq	$0x200, %rax
    00001981: 	jmp	.Ltmp444 # Offset: 6529
.Ltmp374:
    00001986: 	movq	-0x8(%rdx), %rax
    0000198a: 	addq	$0x200, %rax
    00001990: 	jmp	.Ltmp445 # Offset: 6544
.Ltmp369:
    00001995: 	movq	%r14, %rsi
    00001998: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000199f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6559
    000019a4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000019ab: 	jmp	.Ltmp446 # Offset: 6571
.Ltmp289:
    000019b0: 	movq	%r14, %rsi
    000019b3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000019ba: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6586
    000019bf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000019c6: 	jmp	.Ltmp447 # Offset: 6598
.Ltmp401:
    000019cb: 	movq	%r14, %rsi
    000019ce: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000019d5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6613
    000019da: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000019e1: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000019e8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000019ef: 	jne	.Ltmp448 # Offset: 6639
.Ltmp406:
    000019f5: 	movq	-0x8(%rdx), %rax
    000019f9: 	addq	$0x200, %rax
    000019ff: 	jmp	.Ltmp448 # Offset: 6655
.Ltmp342:
    00001a04: 	movq	-0x8(%rdx), %rax
    00001a08: 	addq	$0x200, %rax
    00001a0e: 	jmp	.Ltmp449 # Offset: 6670
.Ltmp353:
    00001a13: 	movq	%r14, %rsi
    00001a16: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a1d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6685
    00001a22: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a29: 	jmp	.Ltmp450 # Offset: 6697
.Ltmp310:
    00001a2e: 	movq	-0x8(%rdx), %rax
    00001a32: 	addq	$0x200, %rax
    00001a38: 	jmp	.Ltmp451 # Offset: 6712
.Ltmp305:
    00001a3d: 	movq	%r14, %rsi
    00001a40: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a47: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6727
    00001a4c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a53: 	jmp	.Ltmp452 # Offset: 6739
.Ltmp321:
    00001a58: 	movq	%r14, %rsi
    00001a5b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a62: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6754
    00001a67: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a6e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001a75: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001a7c: 	jne	.Ltmp453 # Offset: 6780
.Ltmp326:
    00001a82: 	movq	-0x8(%rdx), %rax
    00001a86: 	addq	$0x200, %rax
    00001a8c: 	jmp	.Ltmp453 # Offset: 6796
.Ltmp337:
    00001a91: 	movq	%r14, %rsi
    00001a94: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a9b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6811
    00001aa0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001aa7: 	jmp	.Ltmp454 # Offset: 6823
.Ltmp405:
    00001aac: 	testq	%r13, %r13
    00001aaf: 	je	.Ltmp455 # Offset: 6831
    00001ab5: 	jmp	.Ltmp456 # Offset: 6837
    00001aba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp341:
    00001ac0: 	testq	%r13, %r13
    00001ac3: 	je	.Ltmp457 # Offset: 6851
    00001ac9: 	jmp	.Ltmp458 # Offset: 6857
    00001ace: 	nop # Size: 2
.Ltmp357:
    00001ad0: 	testq	%r13, %r13
    00001ad3: 	je	.Ltmp459 # Offset: 6867
    00001ad9: 	jmp	.Ltmp460 # Offset: 6873
    00001ade: 	nop # Size: 2
.Ltmp309:
    00001ae0: 	testq	%r13, %r13
    00001ae3: 	je	.Ltmp461 # Offset: 6883
.Ltmp468:
    00001ae9: 	movq	0x8(%rsp), %rsi
    00001aee: 	movq	%r13, %rdx
    00001af1: 	callq	memcpy@PLT # Offset: 6897
    00001af6: 	movq	0x88(%rsp), %r13
    00001afe: 	movq	(%r15), %rdi
    00001b01: 	jmp	.Ltmp461 # Offset: 6913
.Ltmp373:
    00001b06: 	testq	%r13, %r13
    00001b09: 	je	.Ltmp462 # Offset: 6921
    00001b0f: 	jmp	.Ltmp463 # Offset: 6927
    00001b14: 	nopl	(%rax) # Size: 4
.Ltmp293:
    00001b18: 	testq	%r13, %r13
    00001b1b: 	je	.Ltmp464 # Offset: 6939
.Ltmp470:
    00001b21: 	movq	0x8(%rsp), %rsi
    00001b26: 	movq	%r13, %rdx
    00001b29: 	callq	memcpy@PLT # Offset: 6953
    00001b2e: 	movq	0x88(%rsp), %r13
    00001b36: 	movq	(%r15), %rdi
    00001b39: 	jmp	.Ltmp464 # Offset: 6969
.Ltmp389:
    00001b3e: 	testq	%r13, %r13
    00001b41: 	je	.Ltmp465 # Offset: 6977
    00001b47: 	jmp	.Ltmp466 # Offset: 6983
    00001b4c: 	nopl	(%rax) # Size: 4
.Ltmp325:
    00001b50: 	testq	%r13, %r13
    00001b53: 	je	.Ltmp467 # Offset: 6995
.Ltmp469:
    00001b59: 	movq	0x8(%rsp), %rsi
    00001b5e: 	movq	%r13, %rdx
    00001b61: 	callq	memcpy@PLT # Offset: 7009
    00001b66: 	movq	0x88(%rsp), %r13
    00001b6e: 	movq	(%r15), %rdi
    00001b71: 	jmp	.Ltmp467 # Offset: 7025
.Ltmp340:
    00001b76: 	leaq	0x88(%rsp), %rsi
    00001b7e: 	xorl	%edx, %edx
    00001b80: 	movq	%r15, %rdi
    00001b83: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7043
    00001b88: 	movq	%rax, (%r15)
    00001b8b: 	movq	%rax, %rdi
    00001b8e: 	movq	0x88(%rsp), %rax
    00001b96: 	movq	%rax, 0x10(%r15)
.Ltmp458:
    00001b9a: 	movq	0x8(%rsp), %rsi
    00001b9f: 	movq	%r13, %rdx
    00001ba2: 	callq	memcpy@PLT # Offset: 7074
    00001ba7: 	movq	0x88(%rsp), %r13
    00001baf: 	movq	(%r15), %rdi
    00001bb2: 	jmp	.Ltmp457 # Offset: 7090
.Ltmp404:
    00001bb7: 	leaq	0x88(%rsp), %rsi
    00001bbf: 	xorl	%edx, %edx
    00001bc1: 	movq	%rbx, %rdi
    00001bc4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7108
    00001bc9: 	movq	%rax, (%rbx)
    00001bcc: 	movq	%rax, %rdi
    00001bcf: 	movq	0x88(%rsp), %rax
    00001bd7: 	movq	%rax, 0x10(%rbx)
.Ltmp456:
    00001bdb: 	movq	%r13, %rdx
    00001bde: 	movq	%r15, %rsi
    00001be1: 	callq	memcpy@PLT # Offset: 7137
    00001be6: 	movq	0x88(%rsp), %r13
    00001bee: 	movq	(%rbx), %rdi
    00001bf1: 	jmp	.Ltmp455 # Offset: 7153
.Ltmp372:
    00001bf6: 	leaq	0x88(%rsp), %rsi
    00001bfe: 	xorl	%edx, %edx
    00001c00: 	movq	%r15, %rdi
    00001c03: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7171
    00001c08: 	movq	%rax, (%r15)
    00001c0b: 	movq	%rax, %rdi
    00001c0e: 	movq	0x88(%rsp), %rax
    00001c16: 	movq	%rax, 0x10(%r15)
.Ltmp463:
    00001c1a: 	movq	0x8(%rsp), %rsi
    00001c1f: 	movq	%r13, %rdx
    00001c22: 	callq	memcpy@PLT # Offset: 7202
    00001c27: 	movq	0x88(%rsp), %r13
    00001c2f: 	movq	(%r15), %rdi
    00001c32: 	jmp	.Ltmp462 # Offset: 7218
.Ltmp388:
    00001c37: 	leaq	0x88(%rsp), %rsi
    00001c3f: 	xorl	%edx, %edx
    00001c41: 	movq	%r15, %rdi
    00001c44: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7236
    00001c49: 	movq	%rax, (%r15)
    00001c4c: 	movq	%rax, %rdi
    00001c4f: 	movq	0x88(%rsp), %rax
    00001c57: 	movq	%rax, 0x10(%r15)
.Ltmp466:
    00001c5b: 	movq	0x8(%rsp), %rsi
    00001c60: 	movq	%r13, %rdx
    00001c63: 	callq	memcpy@PLT # Offset: 7267
    00001c68: 	movq	0x88(%rsp), %r13
    00001c70: 	movq	(%r15), %rdi
    00001c73: 	jmp	.Ltmp465 # Offset: 7283
.Ltmp356:
    00001c78: 	leaq	0x88(%rsp), %rsi
    00001c80: 	xorl	%edx, %edx
    00001c82: 	movq	%r15, %rdi
    00001c85: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7301
    00001c8a: 	movq	%rax, (%r15)
    00001c8d: 	movq	%rax, %rdi
    00001c90: 	movq	0x88(%rsp), %rax
    00001c98: 	movq	%rax, 0x10(%r15)
.Ltmp460:
    00001c9c: 	movq	0x8(%rsp), %rsi
    00001ca1: 	movq	%r13, %rdx
    00001ca4: 	callq	memcpy@PLT # Offset: 7332
    00001ca9: 	movq	0x88(%rsp), %r13
    00001cb1: 	movq	(%r15), %rdi
    00001cb4: 	jmp	.Ltmp459 # Offset: 7348
.Ltmp308:
    00001cb9: 	leaq	0x88(%rsp), %rsi
    00001cc1: 	xorl	%edx, %edx
    00001cc3: 	movq	%r15, %rdi
    00001cc6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7366
    00001ccb: 	movq	%rax, (%r15)
    00001cce: 	movq	%rax, %rdi
    00001cd1: 	movq	0x88(%rsp), %rax
    00001cd9: 	movq	%rax, 0x10(%r15)
    00001cdd: 	jmp	.Ltmp468 # Offset: 7389
.Ltmp324:
    00001ce2: 	leaq	0x88(%rsp), %rsi
    00001cea: 	xorl	%edx, %edx
    00001cec: 	movq	%r15, %rdi
    00001cef: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7407
    00001cf4: 	movq	%rax, (%r15)
    00001cf7: 	movq	%rax, %rdi
    00001cfa: 	movq	0x88(%rsp), %rax
    00001d02: 	movq	%rax, 0x10(%r15)
    00001d06: 	jmp	.Ltmp469 # Offset: 7430
.Ltmp292:
    00001d0b: 	leaq	0x88(%rsp), %rsi
    00001d13: 	xorl	%edx, %edx
    00001d15: 	movq	%r15, %rdi
    00001d18: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7448
    00001d1d: 	movq	%rax, (%r15)
    00001d20: 	movq	%rax, %rdi
    00001d23: 	movq	0x88(%rsp), %rax
    00001d2b: 	movq	%rax, 0x10(%r15)
    00001d2f: 	jmp	.Ltmp470 # Offset: 7471
.Ltmp284:
    00001d34: 	leaq	DATAat0x71b2(%rip), %rdi
    00001d3b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7483
.Ltmp291:
    00001d40: 	leaq	DATAat0x7188(%rip), %rdi
    00001d47: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7495
.Ltmp297:
    00001d4c: 	leaq	DATAat0x7188(%rip), %rdi
    00001d53: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7507
.Ltmp300:
    00001d58: 	leaq	DATAat0x71b2(%rip), %rdi
    00001d5f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7519
.Ltmp307:
    00001d64: 	leaq	DATAat0x7188(%rip), %rdi
    00001d6b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7531
.Ltmp313:
    00001d70: 	leaq	DATAat0x7188(%rip), %rdi
    00001d77: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7543
.Ltmp316:
    00001d7c: 	leaq	DATAat0x71b2(%rip), %rdi
    00001d83: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7555
.Ltmp323:
    00001d88: 	leaq	DATAat0x7188(%rip), %rdi
    00001d8f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7567
.Ltmp329:
    00001d94: 	leaq	DATAat0x7188(%rip), %rdi
    00001d9b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7579
.Ltmp332:
    00001da0: 	leaq	DATAat0x71b2(%rip), %rdi
    00001da7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7591
.Ltmp339:
    00001dac: 	leaq	DATAat0x7188(%rip), %rdi
    00001db3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7603
.Ltmp345:
    00001db8: 	leaq	DATAat0x7188(%rip), %rdi
    00001dbf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7615
.Ltmp348:
    00001dc4: 	leaq	DATAat0x71b2(%rip), %rdi
    00001dcb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7627
.Ltmp355:
    00001dd0: 	leaq	DATAat0x7188(%rip), %rdi
    00001dd7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7639
.Ltmp361:
    00001ddc: 	leaq	DATAat0x7188(%rip), %rdi
    00001de3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7651
.Ltmp364:
    00001de8: 	leaq	DATAat0x71b2(%rip), %rdi
    00001def: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7663
.Ltmp371:
    00001df4: 	leaq	DATAat0x7188(%rip), %rdi
    00001dfb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7675
.Ltmp377:
    00001e00: 	leaq	DATAat0x7188(%rip), %rdi
    00001e07: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7687
.Ltmp380:
    00001e0c: 	leaq	DATAat0x71b2(%rip), %rdi
    00001e13: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7699
.Ltmp387:
    00001e18: 	leaq	DATAat0x7188(%rip), %rdi
    00001e1f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7711
.Ltmp393:
    00001e24: 	leaq	DATAat0x7188(%rip), %rdi
    00001e2b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7723
.Ltmp396:
    00001e30: 	leaq	DATAat0x71b2(%rip), %rdi
    00001e37: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7735
.Ltmp403:
    00001e3c: 	leaq	DATAat0x7188(%rip), %rdi
    00001e43: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7747
.Ltmp409:
    00001e48: 	leaq	DATAat0x7188(%rip), %rdi
    00001e4f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7759
.Ltmp412:
    00001e54: 	leaq	DATAat0x71b2(%rip), %rdi
    00001e5b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7771
.Ltmp415:
    00001e60: 	callq	__stack_chk_fail@PLT # Offset: 7776
.Ltmp416:
    00001e65: 	movq	%r12, %rdi
    00001e68: 	jmp	.Ltmp471 # Offset: 7784
.Ltmp426:
    00001e6d: 	movq	%r12, %rdi
    00001e70: 	jmp	.Ltmp472 # Offset: 7792
.Ltmp428:
    00001e75: 	movq	%r12, %rdi
    00001e78: 	jmp	.Ltmp473 # Offset: 7800
.Ltmp430:
    00001e7d: 	movq	%r12, %rdi
    00001e80: 	jmp	.Ltmp474 # Offset: 7808
.Ltmp432:
    00001e85: 	movq	%r12, %rdi
    00001e88: 	jmp	.Ltmp475 # Offset: 7816
.Ltmp434:
    00001e8d: 	movq	%r12, %rdi
    00001e90: 	jmp	.Ltmp476 # Offset: 7824
.Ltmp436:
    00001e95: 	movq	%r12, %rdi
    00001e98: 	jmp	.Ltmp477 # Offset: 7832
.Ltmp438:
    00001e9d: 	movq	%r12, %rdi
    00001ea0: 	jmp	.Ltmp478 # Offset: 7840
.Ltmp440:
    00001ea5: 	movq	%r12, %rdi
    00001ea8: 	jmp	.Ltmp479 # Offset: 7848
.Ltmp281:
    00001ead: 	leaq	DATAat0x7188(%rip), %rdi
    00001eb4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7860
    00001eb9: 	endbr64
.Ltmp481:
    00001ebd: 	movq	%rax, %rbx
    00001ec0: 	jmp	.Ltmp480 # Offset: 7872
    00001ec2: 	endbr64
    00001ec6: 	jmp	.Ltmp481 # Offset: 7878
    00001ec8: 	endbr64
    00001ecc: 	jmp	.Ltmp481 # Offset: 7884
    00001ece: 	endbr64
    00001ed2: 	jmp	.Ltmp481 # Offset: 7890
.Ltmp480:
    00001ed4: 	movq	0xb0(%rsp), %rdi
    00001edc: 	cmpq	%r12, %rdi
    00001edf: 	je	.Ltmp482 # Offset: 7903
    00001ee1: 	movq	0xc0(%rsp), %rax
    00001ee9: 	leaq	0x1(%rax), %rsi
    00001eed: 	callq	_ZdlPvm@PLT # Offset: 7917
.Ltmp482:
    00001ef2: 	movl	$0x8, %esi
    00001ef7: 	movq	%rbp, %rdi
    00001efa: 	callq	_ZdlPvm@PLT # Offset: 7930
.Ltmp484:
    00001eff: 	movq	0x90(%rsp), %rdi
    00001f07: 	cmpq	0x78(%rsp), %rdi
    00001f0c: 	je	.Ltmp483 # Offset: 7948
    00001f0e: 	movq	0xa0(%rsp), %rax
    00001f16: 	leaq	0x1(%rax), %rsi
    00001f1a: 	callq	_ZdlPvm@PLT # Offset: 7962
.Ltmp483:
    00001f1f: 	movq	%rbx, %rdi
    00001f22: 	callq	_Unwind_Resume@PLT # Offset: 7970
    00001f27: 	endbr64
    00001f2b: 	jmp	.Ltmp481 # Offset: 7979
    00001f2d: 	endbr64
    00001f31: 	jmp	.Ltmp481 # Offset: 7985
    00001f33: 	endbr64
    00001f37: 	jmp	.Ltmp481 # Offset: 7991
    00001f39: 	endbr64
    00001f3d: 	jmp	.Ltmp481 # Offset: 7997
    00001f42: 	endbr64
    00001f46: 	jmp	.Ltmp481 # Offset: 8006
    00001f4b: 	endbr64
    00001f4f: 	jmp	.Ltmp481 # Offset: 8015
    00001f54: 	endbr64
    00001f58: 	jmp	.Ltmp481 # Offset: 8024
    00001f5d: 	endbr64
    00001f61: 	jmp	.Ltmp481 # Offset: 8033
    00001f66: 	endbr64
    00001f6a: 	jmp	.Ltmp481 # Offset: 8042
    00001f6f: 	endbr64
    00001f73: 	movq	%rax, %rbx
    00001f76: 	jmp	.Ltmp482 # Offset: 8054
    00001f7b: 	endbr64
    00001f7f: 	movq	%rax, %rbx
    00001f82: 	jmp	.Ltmp484 # Offset: 8066
    00001f87: 	endbr64
    00001f8b: 	jmp	.Ltmp481 # Offset: 8075
    00001f90: 	endbr64
    00001f94: 	jmp	.Ltmp481 # Offset: 8084
    00001f99: 	endbr64
    00001f9d: 	jmp	.Ltmp481 # Offset: 8093
    00001fa2: 	endbr64
    00001fa6: 	jmp	.Ltmp481 # Offset: 8102
    00001fab: 	endbr64
    00001faf: 	jmp	.Ltmp481 # Offset: 8111
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_fini" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x64e4
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x64e4
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 46 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 424 instructions were shortened
BOLT-INFO: removed 49 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 41 out of 75 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x20118c
