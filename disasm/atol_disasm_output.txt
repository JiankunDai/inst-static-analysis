BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: split function detected on input : _Z11testIntegerv.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x3000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x3000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x11ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 7
  State       : disassembled
  Address     : 0x3a90
  Size        : 0xd4
  MaxSize     : 0xe0
  Offset      : 0x3a90
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp73 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0xd5c6(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp74:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp74 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0xd028(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp75 # Offset: 98
.Ltmp76:
    00000064: 	callq	_Z8UnitTestv # Offset: 100
    00000069: 	callq	_Z20CreateIntegerStringsv # Offset: 105
    0000006e: 	callq	_Z18CreateFloatStringsv # Offset: 110
    00000073: 	callq	_Z11testIntegerv # Offset: 115
    00000078: 	callq	_Z7testHexv # Offset: 120
    0000007d: 	movl	iterations(%rip), %edx
    00000083: 	movl	%edx, %eax
    00000085: 	shrl	$0x1f, %eax
    00000088: 	addl	%edx, %eax
    0000008a: 	sarl	%eax
    0000008c: 	movl	%eax, iterations(%rip)
    00000092: 	callq	_Z9testFloatv # Offset: 146
    00000097: 	callq	_Z12testFloatSciv # Offset: 151
    0000009c: 	popq	%rbx
    0000009d: 	xorl	%eax, %eax
    0000009f: 	popq	%rbp
    000000a0: 	popq	%r12
    000000a2: 	popq	%r13
    000000a4: 	popq	%r14
    000000a6: 	retq # Offset: 166
.Ltmp75:
    000000a7: 	movq	0x8(%r14), %rdi
    000000ab: 	movl	$0xa, %edx
    000000b0: 	xorl	%esi, %esi
    000000b2: 	callq	strtol@PLT # Offset: 178
    000000b7: 	movl	%eax, iterations(%rip)
    000000bd: 	jmp	.Ltmp76 # Offset: 189
.Ltmp73:
    000000bf: 	leaq	DATAat0xd028(%rip), %rsi
    000000c6: 	movl	$0x1, %edi
    000000cb: 	xorl	%eax, %eax
    000000cd: 	callq	__printf_chk@PLT # Offset: 205
    000000d2: 	jmp	.Ltmp76 # Offset: 210
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 8
  State       : disassembled
  Address     : 0x3b70
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3b70
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x11fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x3ba0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3ba0
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp77 # Offset: 17
    00000013: 	movq	DATAat0x11fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp77 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp77:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 10
  State       : disassembled
  Address     : 0x3bd0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x3bd0
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp78 # Offset: 34
    00000024: 	movq	DATAat0x11ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp78 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp78:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 11
  State       : disassembled
  Address     : 0x3c10
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x3c10
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp79 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp80 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp80:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp79:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 12
  State       : disassembled
  Address     : 0x3c50
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x3c50
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13simple_strtolPKcPPci.part.0.constprop.0/1(*2)" after disassembly {
  All names   : _Z13simple_strtolPKcPPci.part.0.constprop.0/1
                _Z13simple_strtolPKcPPci.part.0.constprop.0/atol.cpp/1
  Number      : 13
  State       : disassembled
  Address     : 0x3c60
  Size        : 0x47d
  MaxSize     : 0x480
  Offset      : 0x3c60
  Section     : .text
  Orc Section : .local.text._Z13simple_strtolPKcPPci.part.0.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	pushq	%r13
    00000002: 	movq	%rdi, %r8
    00000005: 	movslq	%esi, %r9
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x8, %rsp
    00000010: 	cmpb	$0x0, "_ZZ13simple_strtolPKcPPciE18tables_initialized/1"(%rip)
    00000017: 	jne	.Ltmp81 # Offset: 23
    0000001d: 	leaq	"_ZZ13simple_strtolPKcPPciE14division_table/1"(%rip), %rdx
    00000024: 	xorl	%eax, %eax
    00000026: 	pcmpeqd	%xmm0, %xmm0
    0000002a: 	movl	$0x4a, %ecx
    0000002f: 	movq	%rdx, %rdi
    00000032: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+48(%rip)
    00000039: 	movl	$0x2322, %edx
    0000003e: 	rep		stosq	%rax, %es:(%rdi)
    00000041: 	movq	DATAat0xf400(%rip), %rax
    00000048: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+80(%rip)
    0000004f: 	movl	$0x2322, %ecx
    00000054: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+112(%rip)
    0000005b: 	movq	%rax, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+48(%rip)
    00000062: 	movl	$0x908, %eax
    00000067: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+64(%rip)
    0000006e: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+96(%rip)
    00000075: 	movw	%ax, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+56(%rip)
    0000007c: 	movq	DATAat0xf408(%rip), %rax
    00000083: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"(%rip)
    0000008a: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+16(%rip)
    00000091: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+32(%rip)
    00000098: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+128(%rip)
    0000009f: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+144(%rip)
    000000a6: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+160(%rip)
    000000ad: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+176(%rip)
    000000b4: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+192(%rip)
    000000bb: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+208(%rip)
    000000c2: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+224(%rip)
    000000c9: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+240(%rip)
    000000d0: 	movdqa	DATAat0xf4e0(%rip), %xmm0
    000000d8: 	movq	%rax, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+81(%rip)
    000000df: 	movw	%dx, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+89(%rip)
    000000e6: 	movq	%rax, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+113(%rip)
    000000ed: 	movw	%cx, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+121(%rip)
    000000f4: 	movb	$0x1, "_ZZ13simple_strtolPKcPPciE18tables_initialized/1"(%rip)
    000000fb: 	movups	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+65(%rip)
    00000102: 	movups	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+97(%rip)
    00000109: 	jmp	.Ltmp81 # Offset: 265
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp82:
    00000110: 	addq	$0x1, %r8
.Ltmp81:
    00000114: 	movzbl	(%r8), %eax
    00000118: 	cmpb	$0x20, %al
    0000011a: 	je	.Ltmp82 # Offset: 282
    0000011c: 	cmpb	$0x2d, %al
    0000011e: 	je	.Ltmp83 # Offset: 286
    00000124: 	xorl	%esi, %esi
    00000126: 	cmpb	$0x2b, %al
    00000128: 	sete	%al
    0000012b: 	movzbl	%al, %eax
    0000012e: 	addq	%rax, %r8
.Ltmp98:
    00000131: 	testl	$0xffffffef, %r9d
    00000138: 	je	.Ltmp84 # Offset: 312
.Ltmp95:
    0000013e: 	cmpl	$0xa, %r9d
    00000142: 	je	.Ltmp85 # Offset: 322
.Ltmp107:
    00000148: 	cmpl	$0x10, %r9d
    0000014c: 	je	.Ltmp86 # Offset: 332
    00000152: 	movl	%r9d, %r11d
    00000155: 	leal	(%r9,%r9), %ecx
    00000159: 	imull	%r9d, %r11d
    0000015d: 	leal	0x1(%rcx), %r10d
    00000161: 	movslq	%r11d, %r11
.Ltmp109:
    00000164: 	leaq	"_ZZ13simple_strtolPKcPPciE14division_table/1"(%rip), %rdi
    0000016b: 	movslq	%ecx, %rcx
    0000016e: 	movq	(%rdi,%rcx,8), %rbp
    00000172: 	testq	%rbp, %rbp
    00000175: 	je	.Ltmp87 # Offset: 373
    0000017b: 	movslq	%r10d, %rax
    0000017e: 	movq	(%rdi,%rax,8), %rbx
.Ltmp105:
    00000182: 	movsbq	(%r8), %rdx
    00000186: 	xorl	%eax, %eax
    00000188: 	leaq	"_ZZ13simple_strtolPKcPPciE9hex_table/1"(%rip), %rdi
    0000018f: 	movslq	%r9d, %r10
    00000192: 	testb	%dl, %dl
    00000194: 	jne	.Ltmp88 # Offset: 404
    00000196: 	jmp	.Ltmp89 # Offset: 406
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp92:
    000001a0: 	imulq	%r10, %rdx
    000001a4: 	addq	$0x2, %r8
    000001a8: 	imulq	%r11, %rax
    000001ac: 	addq	%rcx, %rdx
    000001af: 	addq	%rdx, %rax
    000001b2: 	movsbq	(%r8), %rdx
    000001b6: 	testb	%dl, %dl
    000001b8: 	je	.Ltmp89 # Offset: 440
.Ltmp88:
    000001be: 	movsbq	0x1(%r8), %rcx
    000001c3: 	movsbq	%dl, %r12
    000001c7: 	testb	%cl, %cl
    000001c9: 	je	.Ltmp90 # Offset: 457
    000001cb: 	movzbl	(%rdi,%rdx), %edx
    000001cf: 	movzbl	(%rdi,%rcx), %ecx
    000001d3: 	cmpq	%rbx, %rax
    000001d6: 	jg	.Ltmp91 # Offset: 470
    000001d8: 	cmpq	%rcx, %rdx
    000001db: 	movq	%rcx, %r13
    000001de: 	cmovgeq	%rdx, %r13
    000001e2: 	cmpq	%r10, %r13
    000001e5: 	jl	.Ltmp92 # Offset: 485
.Ltmp90:
    000001e7: 	movzbl	(%rdi,%r12), %edx
    000001ec: 	cmpq	%rbp, %rax
    000001ef: 	jg	.Ltmp91 # Offset: 495
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp93:
    000001f8: 	cmpq	%r9, %rdx
    000001fb: 	jge	.Ltmp89 # Offset: 507
    00000201: 	imulq	%r9, %rax
    00000205: 	addq	$0x1, %r8
    00000209: 	addq	%rdx, %rax
    0000020c: 	movsbq	(%r8), %rdx
    00000210: 	testb	%dl, %dl
    00000212: 	je	.Ltmp89 # Offset: 530
    00000218: 	movzbl	(%rdi,%rdx), %edx
    0000021c: 	cmpq	%rbp, %rax
    0000021f: 	jle	.Ltmp93 # Offset: 543
.Ltmp91:
    00000221: 	callq	__errno_location@PLT # Offset: 545
    00000226: 	movl	$0x22, (%rax)
    0000022c: 	addq	$0x8, %rsp
    00000230: 	movabsq	$0x7fffffffffffffff, %rax
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	retq # Offset: 576
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp84:
    00000248: 	movzbl	(%r8), %eax
    0000024c: 	cmpb	$0x30, %al
    0000024e: 	je	.Ltmp94 # Offset: 590
    00000254: 	testl	%r9d, %r9d
    00000257: 	jne	.Ltmp95 # Offset: 599
.Ltmp104:
    0000025d: 	movsbl	%al, %edx
    00000260: 	xorl	%eax, %eax
    00000262: 	leal	-0x30(%rdx), %ecx
    00000265: 	cmpl	$0x9, %ecx
    00000268: 	ja	.Ltmp89 # Offset: 616
    0000026e: 	movsbl	0x1(%r8), %edi
    00000273: 	movl	%edx, %eax
.Ltmp108:
    00000275: 	subl	$0x30, %eax
    00000278: 	leal	-0x30(%rdi), %ecx
    0000027b: 	addq	$0x1, %r8
    0000027f: 	movabsq	$0x147ae147ae147ae, %r9
    00000289: 	cltq
    0000028b: 	cmpl	$0x9, %ecx
    0000028e: 	jbe	.Ltmp96 # Offset: 654
    00000290: 	jmp	.Ltmp89 # Offset: 656
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp97:
    00000298: 	movslq	%ecx, %rcx
    0000029b: 	movslq	%edx, %rdx
    0000029e: 	cmpq	%r9, %rax
    000002a1: 	jg	.Ltmp91 # Offset: 673
    000002a7: 	leaq	(%rax,%rax,4), %rax
    000002ab: 	addq	$0x2, %r8
    000002af: 	leaq	(%rax,%rax,4), %rdi
    000002b3: 	leaq	(%rcx,%rcx,4), %rax
    000002b7: 	leaq	(%rdx,%rax,2), %rax
    000002bb: 	leaq	(%rax,%rdi,4), %rax
    000002bf: 	movsbl	(%r8), %edi
    000002c3: 	leal	-0x30(%rdi), %ecx
    000002c6: 	cmpl	$0x9, %ecx
    000002c9: 	ja	.Ltmp89 # Offset: 713
.Ltmp96:
    000002cb: 	movsbl	0x1(%r8), %edx
    000002d0: 	subl	$0x30, %edx
    000002d3: 	cmpl	$0x9, %edx
    000002d6: 	jbe	.Ltmp97 # Offset: 726
    000002d8: 	subl	$0x30, %edi
    000002db: 	cmpl	$0x9, %edi
    000002de: 	ja	.Ltmp89 # Offset: 734
    000002e0: 	movabsq	$0xccccccccccccccc, %rdx
    000002ea: 	movslq	%edi, %rdi
    000002ed: 	cmpq	%rdx, %rax
    000002f0: 	jg	.Ltmp91 # Offset: 752
    000002f6: 	leaq	(%rax,%rax,4), %rax
    000002fa: 	leaq	(%rdi,%rax,2), %rax
.Ltmp89:
    000002fe: 	movq	%rax, %rdx
    00000301: 	negq	%rdx
    00000304: 	testb	%sil, %sil
    00000307: 	cmovneq	%rdx, %rax
    0000030b: 	addq	$0x8, %rsp
    0000030f: 	popq	%rbx
    00000310: 	popq	%rbp
    00000311: 	popq	%r12
    00000313: 	popq	%r13
    00000315: 	retq # Offset: 789
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp83:
    00000320: 	addq	$0x1, %r8
    00000324: 	movl	$0x1, %esi
    00000329: 	jmp	.Ltmp98 # Offset: 809
    0000032e: 	nop # Size: 2
.Ltmp94:
    00000330: 	movsbl	0x1(%r8), %edi
    00000335: 	movl	%edi, %eax
    00000337: 	andl	$-0x21, %eax
    0000033a: 	cmpb	$0x58, %al
    0000033c: 	jne	.Ltmp99 # Offset: 828
    00000342: 	addq	$0x2, %r8
.Ltmp86:
    00000346: 	movsbq	(%r8), %rdx
    0000034a: 	xorl	%eax, %eax
    0000034c: 	leaq	"_ZZ13simple_strtolPKcPPciE9hex_table/1"(%rip), %rdi
    00000353: 	movabsq	$0x7fffffffffffff, %r9
    0000035d: 	testb	%dl, %dl
    0000035f: 	jne	.Ltmp100 # Offset: 863
    00000361: 	jmp	.Ltmp89 # Offset: 865
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp102:
    00000368: 	movzbl	(%rdi,%rdx), %edx
    0000036c: 	movzbl	(%rdi,%rcx), %ecx
    00000370: 	cmpq	%r9, %rax
    00000373: 	jg	.Ltmp91 # Offset: 883
    00000379: 	cmpq	$0xf, %rdx
    0000037d: 	jg	.Ltmp101 # Offset: 893
    0000037f: 	cmpq	$0xf, %rcx
    00000383: 	jg	.Ltmp101 # Offset: 899
    00000385: 	shlq	$0x4, %rdx
    00000389: 	shlq	$0x8, %rax
    0000038d: 	addq	$0x2, %r8
    00000391: 	addq	%rcx, %rdx
    00000394: 	addq	%rdx, %rax
    00000397: 	movsbq	(%r8), %rdx
    0000039b: 	testb	%dl, %dl
    0000039d: 	je	.Ltmp89 # Offset: 925
.Ltmp100:
    000003a3: 	movsbq	0x1(%r8), %rcx
    000003a8: 	testb	%cl, %cl
    000003aa: 	jne	.Ltmp102 # Offset: 938
    000003ac: 	movabsq	$0x7ffffffffffffff, %rcx
    000003b6: 	movzbl	(%rdi,%rdx), %edx
    000003ba: 	cmpq	%rcx, %rax
    000003bd: 	jg	.Ltmp91 # Offset: 957
.Ltmp101:
    000003c3: 	movabsq	$0x7ffffffffffffff, %rcx
    000003cd: 	nopl	(%rax) # Size: 3
.Ltmp103:
    000003d0: 	cmpq	$0xf, %rdx
    000003d4: 	jg	.Ltmp89 # Offset: 980
    000003da: 	shlq	$0x4, %rax
    000003de: 	addq	$0x1, %r8
    000003e2: 	addq	%rdx, %rax
    000003e5: 	movsbq	(%r8), %rdx
    000003e9: 	testb	%dl, %dl
    000003eb: 	je	.Ltmp89 # Offset: 1003
    000003f1: 	movzbl	(%rdi,%rdx), %edx
    000003f5: 	cmpq	%rcx, %rax
    000003f8: 	jle	.Ltmp103 # Offset: 1016
    000003fa: 	jmp	.Ltmp91 # Offset: 1018
    000003ff: 	nop # Size: 1
.Ltmp85:
    00000400: 	movzbl	(%r8), %eax
    00000404: 	jmp	.Ltmp104 # Offset: 1028
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp87:
    00000410: 	movabsq	$0x7fffffffffffffff, %rbx
    0000041a: 	movslq	%r9d, %rbp
    0000041d: 	movq	%rbx, %rax
    00000420: 	cqto
    00000422: 	idivq	%rbp
    00000425: 	movq	%rax, (%rdi,%rcx,8)
    00000429: 	movq	%rbx, %rax
    0000042c: 	cqto
    0000042e: 	idivq	%r11
    00000431: 	movq	%rax, %rbx
    00000434: 	movslq	%r10d, %rax
    00000437: 	movq	%rbx, (%rdi,%rax,8)
    0000043b: 	movq	(%rdi,%rcx,8), %rbp
    0000043f: 	jmp	.Ltmp105 # Offset: 1087
.Ltmp99:
    00000444: 	testl	%r9d, %r9d
    00000447: 	je	.Ltmp106 # Offset: 1095
    00000449: 	cmpl	$0xa, %r9d
    0000044d: 	jne	.Ltmp107 # Offset: 1101
    00000453: 	movl	$0x30, %eax
    00000458: 	jmp	.Ltmp108 # Offset: 1112
.Ltmp106:
    0000045d: 	addq	$0x1, %r8
    00000461: 	movl	$0x11, %r10d
    00000467: 	movl	$0x10, %ecx
    0000046c: 	movl	$0x40, %r11d
    00000472: 	movl	$0x8, %r9d
    00000478: 	jmp	.Ltmp109 # Offset: 1144
DWARF CFI Instructions:
    <empty>
End of Function "_Z13simple_strtolPKcPPci.part.0.constprop.0/1(*2)"

Binary Function "_Z13simple_strtodPKcPPc.constprop.0/1(*2)" after disassembly {
  All names   : _Z13simple_strtodPKcPPc.constprop.0/1
                _Z13simple_strtodPKcPPc.constprop.0/atol.cpp/1
  Number      : 14
  State       : disassembled
  Address     : 0x40e0
  Size        : 0x4c9
  MaxSize     : 0x4d0
  Offset      : 0x40e0
  Section     : .text
  Orc Section : .local.text._Z13simple_strtodPKcPPc.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	pushq	%rbx
    00000001: 	subq	$0x10, %rsp
    00000005: 	movzbl	(%rdi), %edx
    00000008: 	cmpb	$0x20, %dl
    0000000b: 	jne	.Ltmp110 # Offset: 11
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp111:
    00000010: 	movzbl	0x1(%rdi), %edx
    00000014: 	addq	$0x1, %rdi
    00000018: 	cmpb	$0x20, %dl
    0000001b: 	je	.Ltmp111 # Offset: 27
.Ltmp110:
    0000001d: 	cmpb	$0x2d, %dl
    00000020: 	je	.Ltmp112 # Offset: 32
    00000026: 	xorl	%r9d, %r9d
    00000029: 	cmpb	$0x2b, %dl
    0000002c: 	je	.Ltmp113 # Offset: 44
.Ltmp137:
    00000032: 	movsbl	%dl, %eax
    00000035: 	subl	$0x30, %eax
    00000038: 	cmpl	$0x9, %eax
    0000003b: 	jbe	.Ltmp114 # Offset: 59
    00000041: 	andl	$-0x21, %edx
    00000044: 	cmpb	$0x49, %dl
    00000047: 	jne	.Ltmp115 # Offset: 71
    0000004d: 	leaq	0x1(%rdi), %rbx
    00000051: 	leaq	DATAat0xd48c(%rip), %rsi
    00000058: 	movq	%rbx, %rdi
    0000005b: 	callq	strcmp@PLT # Offset: 91
    00000060: 	movsd	DATAat0xf438(%rip), %xmm0
    00000068: 	testl	%eax, %eax
    0000006a: 	je	.Ltmp116 # Offset: 106
    0000006c: 	leaq	DATAat0xd49e(%rip), %rsi
    00000073: 	movq	%rbx, %rdi
    00000076: 	movsd	%xmm0, 0x8(%rsp)
    0000007c: 	callq	strcmp@PLT # Offset: 124
    00000081: 	movsd	0x8(%rsp), %xmm0
    00000087: 	testl	%eax, %eax
    00000089: 	je	.Ltmp116 # Offset: 137
    0000008b: 	movzbl	(%rbx), %eax
    0000008e: 	cmpl	$0x4e, %eax
    00000091: 	jne	.Ltmp117 # Offset: 145
    00000093: 	cmpb	$0x46, 0x1(%rbx)
    00000097: 	je	.Ltmp118 # Offset: 151
.Ltmp117:
    0000009d: 	cmpl	$0x6e, %eax
    000000a0: 	jne	.Ltmp119 # Offset: 160
    000000a6: 	cmpb	$0x66, 0x1(%rbx)
    000000aa: 	jne	.Ltmp119 # Offset: 170
    000000b0: 	cmpb	$0x0, 0x2(%rbx)
    000000b4: 	jne	.Ltmp119 # Offset: 180
    000000ba: 	movsd	DATAat0xf438(%rip), %xmm0
.Ltmp116:
    000000c2: 	addq	$0x10, %rsp
    000000c6: 	popq	%rbx
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp114:
    000000d0: 	movsbl	0x1(%rdi), %ecx
    000000d4: 	leaq	0x1(%rdi), %rdx
    000000d8: 	cltq
    000000da: 	leal	-0x30(%rcx), %edi
    000000dd: 	movl	%ecx, %r10d
    000000e0: 	cmpl	$0x9, %edi
    000000e3: 	jbe	.Ltmp120 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp122:
    000000e8: 	movl	%r10d, %r8d
    000000eb: 	jmp	.Ltmp121 # Offset: 235
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp123:
    000000f0: 	leaq	(%rax,%rax,4), %rax
    000000f4: 	addq	$0x2, %rdx
    000000f8: 	leaq	(%rax,%rax,4), %rcx
    000000fc: 	leal	(%rdi,%rdi,4), %eax
    000000ff: 	leal	(%rsi,%rax,2), %eax
    00000102: 	leaq	(%rax,%rcx,4), %rax
    00000106: 	movsbl	(%rdx), %ecx
    00000109: 	leal	-0x30(%rcx), %edi
    0000010c: 	movl	%ecx, %r10d
    0000010f: 	cmpl	$0x9, %edi
    00000112: 	ja	.Ltmp122 # Offset: 274
.Ltmp120:
    00000114: 	movsbl	0x1(%rdx), %esi
    00000118: 	movl	%esi, %r8d
    0000011b: 	subl	$0x30, %esi
    0000011e: 	cmpl	$0x9, %esi
    00000121: 	jbe	.Ltmp123 # Offset: 289
    00000123: 	subl	$0x30, %ecx
    00000126: 	cmpl	$0x9, %ecx
    00000129: 	ja	.Ltmp122 # Offset: 297
    0000012b: 	leaq	(%rax,%rax,4), %rax
    0000012f: 	movslq	%ecx, %rcx
    00000132: 	addq	$0x1, %rdx
    00000136: 	leaq	(%rcx,%rax,2), %rax
.Ltmp121:
    0000013a: 	testq	%rax, %rax
    0000013d: 	js	.Ltmp124 # Offset: 317
    00000143: 	pxor	%xmm0, %xmm0
    00000147: 	cvtsi2sd	%rax, %xmm0
    0000014c: 	cmpb	$0x2e, %r8b
    00000150: 	je	.Ltmp125 # Offset: 336
.Ltmp138:
    00000156: 	testb	%r9b, %r9b
    00000159: 	je	.Ltmp126 # Offset: 345
    0000015b: 	xorpd	DATAat0xf4f0(%rip), %xmm0
.Ltmp126:
    00000163: 	andl	$-0x21, %r8d
    00000167: 	cmpb	$0x45, %r8b
    0000016b: 	jne	.Ltmp116 # Offset: 363
    00000171: 	movsbl	0x1(%rdx), %eax
    00000175: 	cmpb	$0x2d, %al
    00000177: 	je	.Ltmp127 # Offset: 375
    0000017d: 	cmpb	$0x2b, %al
    0000017f: 	je	.Ltmp128 # Offset: 383
    00000185: 	leaq	0x1(%rdx), %rsi
    00000189: 	xorl	%edi, %edi
.Ltmp145:
    0000018b: 	subl	$0x30, %eax
    0000018e: 	cmpl	$0x9, %eax
    00000191: 	ja	.Ltmp116 # Offset: 401
    00000197: 	movsbl	0x1(%rsi), %edx
    0000019b: 	leaq	0x1(%rsi), %rcx
    0000019f: 	subl	$0x30, %edx
    000001a2: 	cmpl	$0x9, %edx
    000001a5: 	ja	.Ltmp129 # Offset: 421
    000001a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp130:
    000001b0: 	leal	(%rax,%rax,4), %eax
    000001b3: 	addq	$0x1, %rcx
    000001b7: 	leal	(%rdx,%rax,2), %eax
    000001ba: 	movsbl	(%rcx), %edx
    000001bd: 	subl	$0x30, %edx
    000001c0: 	cmpl	$0x9, %edx
    000001c3: 	jbe	.Ltmp130 # Offset: 451
    000001c5: 	cmpl	$0x134, %eax
    000001ca: 	jg	.Ltmp131 # Offset: 458
.Ltmp129:
    000001d0: 	testl	%eax, %eax
    000001d2: 	je	.Ltmp116 # Offset: 466
    000001d8: 	cmpl	$0x7, %eax
    000001db: 	jg	.Ltmp132 # Offset: 475
    000001e1: 	testb	$0x1, %al
    000001e3: 	je	.Ltmp133 # Offset: 483
    000001e9: 	movsd	DATAat0xf420(%rip), %xmm2
    000001f1: 	movsd	DATAat0xf428(%rip), %xmm1
.Ltmp154:
    000001f9: 	testb	$0x2, %al
    000001fb: 	je	.Ltmp134 # Offset: 507
    000001fd: 	movapd	%xmm2, %xmm1
.Ltmp134:
    00000201: 	testb	$0x4, %al
    00000203: 	je	.Ltmp135 # Offset: 515
    00000205: 	mulsd	DATAat0xf440(%rip), %xmm1
.Ltmp135:
    0000020d: 	testb	%dil, %dil
    00000210: 	je	.Ltmp136 # Offset: 528
    00000216: 	divsd	%xmm1, %xmm0
    0000021a: 	jmp	.Ltmp116 # Offset: 538
    0000021f: 	nop # Size: 1
.Ltmp113:
    00000220: 	movzbl	0x1(%rdi), %edx
    00000224: 	addq	$0x1, %rdi
    00000228: 	jmp	.Ltmp137 # Offset: 552
    0000022d: 	nopl	(%rax) # Size: 3
.Ltmp115:
    00000230: 	pxor	%xmm0, %xmm0
    00000234: 	cmpb	$0x4e, %dl
    00000237: 	jne	.Ltmp116 # Offset: 567
    0000023d: 	movzbl	0x1(%rdi), %eax
    00000241: 	andl	$-0x21, %eax
    00000244: 	cmpb	$0x41, %al
    00000246: 	jne	.Ltmp116 # Offset: 582
    0000024c: 	movzbl	0x2(%rdi), %eax
    00000250: 	andl	$-0x21, %eax
    00000253: 	cmpb	$0x4e, %al
    00000255: 	jne	.Ltmp116 # Offset: 597
    0000025b: 	movsd	DATAat0xf430(%rip), %xmm0
    00000263: 	jmp	.Ltmp116 # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp112:
    00000270: 	movzbl	0x1(%rdi), %edx
    00000274: 	movl	$0x1, %r9d
    0000027a: 	addq	$0x1, %rdi
    0000027e: 	jmp	.Ltmp137 # Offset: 638
    00000283: 	nopl	(%rax,%rax) # Size: 5
.Ltmp124:
    00000288: 	movq	%rax, %rcx
    0000028b: 	andl	$0x1, %eax
    0000028e: 	pxor	%xmm0, %xmm0
    00000292: 	shrq	%rcx
    00000295: 	orq	%rax, %rcx
    00000298: 	cvtsi2sd	%rcx, %xmm0
    0000029d: 	addsd	%xmm0, %xmm0
    000002a1: 	cmpb	$0x2e, %r8b
    000002a5: 	jne	.Ltmp138 # Offset: 677
.Ltmp125:
    000002ab: 	movsbl	0x1(%rdx), %esi
    000002af: 	leaq	0x1(%rdx), %rbx
    000002b3: 	leal	-0x30(%rsi), %r10d
    000002b7: 	movl	%esi, %r11d
    000002ba: 	cmpl	$0x9, %r10d
    000002be: 	ja	.Ltmp139 # Offset: 702
    000002c4: 	movq	%rbx, %rax
    000002c7: 	xorl	%ecx, %ecx
    000002c9: 	jmp	.Ltmp140 # Offset: 713
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp142:
    000002d0: 	leaq	(%rcx,%rcx,4), %rcx
    000002d4: 	addq	$0x2, %rax
    000002d8: 	leaq	(%rcx,%rcx,4), %rsi
    000002dc: 	leal	(%r10,%r10,4), %ecx
    000002e0: 	leal	(%rdi,%rcx,2), %ecx
    000002e3: 	leaq	(%rcx,%rsi,4), %rcx
    000002e7: 	movsbl	(%rax), %esi
    000002ea: 	leal	-0x30(%rsi), %r10d
    000002ee: 	movl	%esi, %r11d
    000002f1: 	cmpl	$0x9, %r10d
    000002f5: 	ja	.Ltmp141 # Offset: 757
.Ltmp140:
    000002f7: 	movsbl	0x1(%rax), %edi
    000002fb: 	movl	%edi, %r8d
    000002fe: 	subl	$0x30, %edi
    00000301: 	cmpl	$0x9, %edi
    00000304: 	jbe	.Ltmp142 # Offset: 772
    00000306: 	subl	$0x30, %esi
    00000309: 	cmpl	$0x9, %esi
    0000030c: 	ja	.Ltmp141 # Offset: 780
    0000030e: 	movslq	%esi, %rsi
    00000311: 	leaq	(%rcx,%rcx,4), %rcx
    00000315: 	leaq	0x1(%rax), %rbx
    00000319: 	leaq	(%rsi,%rcx,2), %rcx
    0000031d: 	movl	%eax, %esi
    0000031f: 	subl	%edx, %esi
.Ltmp146:
    00000321: 	pxor	%xmm1, %xmm1
    00000325: 	testl	%esi, %esi
    00000327: 	je	.Ltmp143 # Offset: 807
    00000329: 	testq	%rcx, %rcx
    0000032c: 	js	.Ltmp144 # Offset: 812
    0000032e: 	pxor	%xmm1, %xmm1
    00000332: 	cvtsi2sd	%rcx, %xmm1
.Ltmp147:
    00000337: 	leaq	"_ZL19fraction_multiplier/1"(%rip), %rax
    0000033e: 	mulsd	(%rax,%rsi,8), %xmm1
.Ltmp143:
    00000343: 	addsd	%xmm1, %xmm0
    00000347: 	movq	%rbx, %rdx
    0000034a: 	jmp	.Ltmp138 # Offset: 842
    0000034f: 	nop # Size: 1
.Ltmp127:
    00000350: 	movsbl	0x2(%rdx), %eax
    00000354: 	leaq	0x2(%rdx), %rsi
    00000358: 	movl	$0x1, %edi
    0000035d: 	jmp	.Ltmp145 # Offset: 861
.Ltmp141:
    00000362: 	movl	%eax, %esi
    00000364: 	movl	%r11d, %r8d
    00000367: 	subl	%ebx, %esi
    00000369: 	movq	%rax, %rbx
    0000036c: 	jmp	.Ltmp146 # Offset: 876
.Ltmp128:
    0000036e: 	movsbl	0x2(%rdx), %eax
    00000372: 	leaq	0x2(%rdx), %rsi
    00000376: 	xorl	%edi, %edi
    00000378: 	jmp	.Ltmp145 # Offset: 888
.Ltmp119:
    0000037d: 	pxor	%xmm0, %xmm0
    00000381: 	jmp	.Ltmp116 # Offset: 897
.Ltmp118:
    00000386: 	cmpb	$0x0, 0x2(%rbx)
    0000038a: 	je	.Ltmp116 # Offset: 906
    00000390: 	jmp	.Ltmp117 # Offset: 912
    00000395: 	nopl	(%rax) # Size: 3
.Ltmp131:
    00000398: 	callq	__errno_location@PLT # Offset: 920
    0000039d: 	pxor	%xmm0, %xmm0
    000003a1: 	movl	$0x22, (%rax)
    000003a7: 	jmp	.Ltmp116 # Offset: 935
.Ltmp144:
    000003ac: 	movq	%rcx, %rax
    000003af: 	andl	$0x1, %ecx
    000003b2: 	pxor	%xmm1, %xmm1
    000003b6: 	shrq	%rax
    000003b9: 	orq	%rcx, %rax
    000003bc: 	cvtsi2sd	%rax, %xmm1
    000003c1: 	addsd	%xmm1, %xmm1
    000003c5: 	jmp	.Ltmp147 # Offset: 965
.Ltmp132:
    000003ca: 	movsd	DATAat0xf418(%rip), %xmm1
    000003d2: 	cmpl	$0x3f, %eax
    000003d5: 	jg	.Ltmp148 # Offset: 981
    000003d7: 	testb	$0x1, %al
    000003d9: 	je	.Ltmp149 # Offset: 985
    000003db: 	movsd	DATAat0xf428(%rip), %xmm1
.Ltmp149:
    000003e3: 	testb	$0x2, %al
    000003e5: 	je	.Ltmp150 # Offset: 997
    000003e7: 	mulsd	DATAat0xf410(%rip), %xmm1
.Ltmp150:
    000003ef: 	testb	$0x4, %al
    000003f1: 	je	.Ltmp151 # Offset: 1009
    000003f3: 	mulsd	DATAat0xf440(%rip), %xmm1
.Ltmp151:
    000003fb: 	testb	$0x8, %al
    000003fd: 	je	.Ltmp152 # Offset: 1021
    000003ff: 	mulsd	DATAat0xf448(%rip), %xmm1
.Ltmp152:
    00000407: 	testb	$0x10, %al
    00000409: 	je	.Ltmp153 # Offset: 1033
    0000040b: 	mulsd	DATAat0xf450(%rip), %xmm1
.Ltmp153:
    00000413: 	shrl	$0x5, %eax
    00000416: 	je	.Ltmp135 # Offset: 1046
    0000041c: 	mulsd	DATAat0xf458(%rip), %xmm1
    00000424: 	jmp	.Ltmp135 # Offset: 1060
.Ltmp136:
    00000429: 	mulsd	%xmm1, %xmm0
    0000042d: 	jmp	.Ltmp116 # Offset: 1069
.Ltmp133:
    00000432: 	movsd	DATAat0xf410(%rip), %xmm2
    0000043a: 	movsd	DATAat0xf418(%rip), %xmm1
    00000442: 	jmp	.Ltmp154 # Offset: 1090
.Ltmp148:
    00000447: 	testb	$0x1, %al
    00000449: 	je	.Ltmp155 # Offset: 1097
    0000044b: 	movsd	DATAat0xf428(%rip), %xmm1
.Ltmp155:
    00000453: 	testb	$0x2, %al
    00000455: 	je	.Ltmp156 # Offset: 1109
    00000457: 	mulsd	DATAat0xf410(%rip), %xmm1
.Ltmp156:
    0000045f: 	testb	$0x4, %al
    00000461: 	je	.Ltmp157 # Offset: 1121
    00000463: 	mulsd	DATAat0xf440(%rip), %xmm1
.Ltmp157:
    0000046b: 	testb	$0x8, %al
    0000046d: 	je	.Ltmp158 # Offset: 1133
    0000046f: 	mulsd	DATAat0xf448(%rip), %xmm1
.Ltmp158:
    00000477: 	testb	$0x10, %al
    00000479: 	je	.Ltmp159 # Offset: 1145
    0000047b: 	mulsd	DATAat0xf450(%rip), %xmm1
.Ltmp159:
    00000483: 	testb	$0x20, %al
    00000485: 	je	.Ltmp160 # Offset: 1157
    00000487: 	mulsd	DATAat0xf458(%rip), %xmm1
.Ltmp160:
    0000048f: 	testb	$0x40, %al
    00000491: 	je	.Ltmp161 # Offset: 1169
    00000493: 	mulsd	DATAat0xf460(%rip), %xmm1
.Ltmp161:
    0000049b: 	testb	$-0x80, %al
    0000049d: 	je	.Ltmp162 # Offset: 1181
    0000049f: 	mulsd	DATAat0xf468(%rip), %xmm1
.Ltmp162:
    000004a7: 	testb	$0x1, %ah
    000004aa: 	je	.Ltmp135 # Offset: 1194
    000004b0: 	mulsd	DATAat0xf470(%rip), %xmm1
    000004b8: 	jmp	.Ltmp135 # Offset: 1208
.Ltmp139:
    000004bd: 	movl	%esi, %r8d
    000004c0: 	pxor	%xmm1, %xmm1
    000004c4: 	jmp	.Ltmp143 # Offset: 1220
DWARF CFI Instructions:
    <empty>
End of Function "_Z13simple_strtodPKcPPc.constprop.0/1(*2)"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x45b0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x45b0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x45d0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x45d0
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0xf478(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x4610
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x4610
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp163 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp164 # Offset: 38
.Ltmp163:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp165 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp164:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp165:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0xd5d0(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x46b0
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x46b0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp166 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp167 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp168:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp168 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp181:
    00000069: 	leaq	DATAat0xd5c8(%rip), %rbp
    00000070: 	leaq	DATAat0xd5f0(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0xd630(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp169 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0xf480(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0xd660(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0xf478(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp170 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp174:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp171 # Offset: 244
    000000fa: 	movq	DATAat0xf438(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp175:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0xf438(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp172 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp172:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0xd029(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0xf480(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp173 # Offset: 398
.Ltmp170:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp174 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp175 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp171:
    000001c8: 	movq	DATAat0xf418(%rip), %rsi
    000001cf: 	movq	DATAat0xf438(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp172 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp173:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp169 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp176 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp177:
    00000210: 	addq	$0x10, %rax
.Ltmp176:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp177 # Offset: 542
.Ltmp182:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0xd690(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp178 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp179 # Offset: 592
.Ltmp178:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp166:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp179:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp180:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp180 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0xd004(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp166 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp167:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp181 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp169:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp182 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x49e0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x49e0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp183 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp184 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp185:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp185 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp190:
    0000006a: 	leaq	DATAat0xd5c8(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0xd6b8(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0xd02a(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0xd5c8(%rip), %r8
    000000a1: 	leaq	DATAat0xd018(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp186 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp187:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0xd029(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp187 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp186 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp188 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp189:
    00000140: 	addq	$0x10, %rax
.Ltmp188:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp189 # Offset: 334
.Ltmp191:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0xd690(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp183:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp184:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp190 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp186:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp191 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z20CreateIntegerStringsv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x4b90
  Size        : 0x11f
  MaxSize     : 0x120
  Offset      : 0x4b90
  Section     : .text
  Orc Section : .local.text._Z20CreateIntegerStringsv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	xorl	%r13d, %r13d
    00000009: 	pushq	%r12
    0000000b: 	leaq	integer_strings(%rip), %r12
    00000012: 	pushq	%rbp
    00000013: 	leaq	hex_strings(%rip), %rbp
    0000001a: 	pushq	%rbx
    0000001b: 	xorl	%ebx, %ebx
    0000001d: 	subq	$0x8, %rsp
    00000021: 	movq	$0x0, global_integer_sum(%rip)
    0000002c: 	movq	$0x0, global_uinteger_sum(%rip)
    00000037: 	movq	$0x0, global_64_sum(%rip)
    00000042: 	movq	$0x0, global_u64_sum(%rip)
    0000004d: 	jmp	.Ltmp192 # Offset: 77
    0000004f: 	nop # Size: 1
.Ltmp194:
    00000050: 	movq	DATAat0xf488(%rip), %rax
    00000057: 	pxor	%xmm0, %xmm0
    0000005b: 	cvtsi2sd	%r13, %xmm0
    00000060: 	divsd	DATAat0xf490(%rip), %xmm0
    00000068: 	movq	%rax, %xmm1
    0000006d: 	callq	pow@PLT # Offset: 109
    00000072: 	mulsd	DATAat0xf498(%rip), %xmm0
    0000007a: 	addsd	DATAat0xf4a0(%rip), %xmm0
    00000082: 	cvttsd2si	%xmm0, %rbx
.Ltmp195:
    00000087: 	addq	$0x32, %r12
    0000008b: 	addq	$0x32, %rbp
.Ltmp192:
    0000008f: 	movq	%rbx, %r9
    00000092: 	leaq	DATAat0xd042(%rip), %r8
    00000099: 	movq	%r12, %rdi
    0000009c: 	xorl	%eax, %eax
    0000009e: 	movq	$-0x1, %rcx
    000000a5: 	movl	$0x1, %edx
    000000aa: 	movl	$0x31, %esi
    000000af: 	addq	$0x1, %r13
    000000b3: 	callq	__snprintf_chk@PLT # Offset: 179
    000000b8: 	movq	%rbx, %r9
    000000bb: 	movl	$0x1, %edx
    000000c0: 	movq	%rbp, %rdi
    000000c3: 	leaq	DATAat0xd046(%rip), %r8
    000000ca: 	movq	$-0x1, %rcx
    000000d1: 	movl	$0x31, %esi
    000000d6: 	xorl	%eax, %eax
    000000d8: 	callq	__snprintf_chk@PLT # Offset: 216
    000000dd: 	addq	%rbx, global_uinteger_sum(%rip)
    000000e4: 	addq	%rbx, global_integer_sum(%rip)
    000000eb: 	addq	%rbx, global_u64_sum(%rip)
    000000f2: 	addq	%rbx, global_64_sum(%rip)
    000000f9: 	cmpq	$0x4b0, %r13
    00000100: 	je	.Ltmp193 # Offset: 256
    00000102: 	cmpq	$0x4a, %r13
    00000106: 	jg	.Ltmp194 # Offset: 262
    0000010c: 	movq	%r13, %rbx
    0000010f: 	jmp	.Ltmp195 # Offset: 271
.Ltmp193:
    00000114: 	addq	$0x8, %rsp
    00000118: 	popq	%rbx
    00000119: 	popq	%rbp
    0000011a: 	popq	%r12
    0000011c: 	popq	%r13
    0000011e: 	retq # Offset: 286
DWARF CFI Instructions:
    <empty>
End of Function "_Z20CreateIntegerStringsv"

Binary Function "_Z18CreateFloatStringsv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x4cb0
  Size        : 0x1af
  MaxSize     : 0x1b0
  Offset      : 0x4cb0
  Section     : .text
  Orc Section : .local.text._Z18CreateFloatStringsv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%eax, %eax
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	xorl	%r13d, %r13d
    0000000f: 	pushq	%r12
    00000011: 	leaq	DATAat0xd04c(%rip), %r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	leaq	float_stringsE(%rip), %rbx
    00000021: 	subq	$0x18, %rsp
    00000025: 	movl	$0x0, global_float_sum(%rip)
    0000002f: 	movq	$0x0, global_double_sum(%rip)
    0000003a: 	jmp	.Ltmp196 # Offset: 58
    0000003f: 	nop # Size: 1
.Ltmp198:
    00000040: 	movq	DATAat0xf4a8(%rip), %rax
    00000047: 	divsd	DATAat0xf490(%rip), %xmm0
    0000004f: 	movq	%rax, %xmm1
    00000054: 	callq	pow@PLT # Offset: 84
    00000059: 	movq	%r12, %r8
    0000005c: 	movl	$0x1, %edx
    00000061: 	movq	%rbp, %rdi
    00000064: 	mulsd	DATAat0xf4b0(%rip), %xmm0
    0000006c: 	movl	$0x31, %esi
    00000071: 	movl	$0x1, %eax
    00000076: 	movq	$-0x1, %rcx
    0000007d: 	movsd	%xmm0, 0x8(%rsp)
    00000083: 	callq	__snprintf_chk@PLT # Offset: 131
    00000088: 	movsd	0x8(%rsp), %xmm0
    0000008e: 	movl	$0x1, %edx
    00000093: 	leaq	DATAat0xd04f(%rip), %r8
    0000009a: 	movq	$-0x1, %rcx
    000000a1: 	movl	$0x31, %esi
    000000a6: 	movq	%r15, %rdi
    000000a9: 	movl	$0x1, %eax
    000000ae: 	callq	__snprintf_chk@PLT # Offset: 174
    000000b3: 	movsd	0x8(%rsp), %xmm0
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	cvtsd2ss	%xmm0, %xmm1
    000000c1: 	addsd	global_double_sum(%rip), %xmm0
    000000c9: 	addss	global_float_sum(%rip), %xmm1
    000000d1: 	movsd	%xmm0, global_double_sum(%rip)
    000000d9: 	movss	%xmm1, global_float_sum(%rip)
    000000e1: 	cmpq	$0x4b0, %r14
    000000e8: 	je	.Ltmp197 # Offset: 232
.Ltmp199:
    000000ee: 	addq	$0x32, %r13
    000000f2: 	movq	%r14, %rax
.Ltmp196:
    000000f5: 	pxor	%xmm0, %xmm0
    000000f9: 	leaq	float_strings(%rip), %rdx
    00000100: 	leaq	(%rbx,%r13), %r15
    00000104: 	cvtsi2sd	%rax, %xmm0
    00000109: 	leaq	(%rdx,%r13), %rbp
    0000010d: 	leaq	0x1(%rax), %r14
    00000111: 	cmpq	$0x4a, %rax
    00000115: 	ja	.Ltmp198 # Offset: 277
    0000011b: 	movq	%r12, %r8
    0000011e: 	movl	$0x1, %edx
    00000123: 	movl	$0x31, %esi
    00000128: 	movq	%rbp, %rdi
    0000012b: 	movq	$-0x1, %rcx
    00000132: 	movl	$0x1, %eax
    00000137: 	movsd	%xmm0, 0x8(%rsp)
    0000013d: 	callq	__snprintf_chk@PLT # Offset: 317
    00000142: 	movsd	0x8(%rsp), %xmm0
    00000148: 	movl	$0x1, %edx
    0000014d: 	leaq	DATAat0xd04f(%rip), %r8
    00000154: 	movq	$-0x1, %rcx
    0000015b: 	movl	$0x31, %esi
    00000160: 	movq	%r15, %rdi
    00000163: 	movl	$0x1, %eax
    00000168: 	callq	__snprintf_chk@PLT # Offset: 360
    0000016d: 	movsd	0x8(%rsp), %xmm0
    00000173: 	pxor	%xmm1, %xmm1
    00000177: 	cvtsd2ss	%xmm0, %xmm1
    0000017b: 	addsd	global_double_sum(%rip), %xmm0
    00000183: 	addss	global_float_sum(%rip), %xmm1
    0000018b: 	movsd	%xmm0, global_double_sum(%rip)
    00000193: 	movss	%xmm1, global_float_sum(%rip)
    0000019b: 	jmp	.Ltmp199 # Offset: 411
.Ltmp197:
    000001a0: 	addq	$0x18, %rsp
    000001a4: 	popq	%rbx
    000001a5: 	popq	%rbp
    000001a6: 	popq	%r12
    000001a8: 	popq	%r13
    000001aa: 	popq	%r14
    000001ac: 	popq	%r15
    000001ae: 	retq # Offset: 430
DWARF CFI Instructions:
    <empty>
End of Function "_Z18CreateFloatStringsv"

Binary Function "_Z19CreateNumberStringsv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x4e60
  Size        : 0x16
  MaxSize     : 0x20
  Offset      : 0x4e60
  Section     : .text
  Orc Section : .local.text._Z19CreateNumberStringsv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	_Z20CreateIntegerStringsv # Offset: 8
    0000000d: 	addq	$0x8, %rsp
    00000011: 	jmp	_Z18CreateFloatStringsv # TAILCALL  # Offset: 17
DWARF CFI Instructions:
    <empty>
End of Function "_Z19CreateNumberStringsv"

Binary Function "_Z13simple_strtodPKcPPc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x4e80
  Size        : 0x4e3
  MaxSize     : 0x4f0
  Offset      : 0x4e80
  Section     : .text
  Orc Section : .local.text._Z13simple_strtodPKcPPc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x8, %rsp
    00000017: 	movzbl	(%rdi), %edx
    0000001a: 	cmpb	$0x20, %dl
    0000001d: 	jne	.Ltmp200 # Offset: 29
    0000001f: 	nop # Size: 1
.Ltmp201:
    00000020: 	movzbl	0x1(%rbx), %edx
    00000024: 	addq	$0x1, %rbx
    00000028: 	cmpb	$0x20, %dl
    0000002b: 	je	.Ltmp201 # Offset: 43
.Ltmp200:
    0000002d: 	cmpb	$0x2d, %dl
    00000030: 	je	.Ltmp202 # Offset: 48
    00000036: 	xorl	%edi, %edi
    00000038: 	cmpb	$0x2b, %dl
    0000003b: 	je	.Ltmp203 # Offset: 59
.Ltmp230:
    00000041: 	movsbl	%dl, %eax
    00000044: 	subl	$0x30, %eax
    00000047: 	cmpl	$0x9, %eax
    0000004a: 	jbe	.Ltmp204 # Offset: 74
    0000004c: 	andl	$-0x21, %edx
    0000004f: 	cmpb	$0x49, %dl
    00000052: 	jne	.Ltmp205 # Offset: 82
    00000058: 	leaq	0x1(%rbx), %r13
    0000005c: 	leaq	DATAat0xd48c(%rip), %rsi
    00000063: 	movq	%r13, %rdi
    00000066: 	callq	strcmp@PLT # Offset: 102
    0000006b: 	testl	%eax, %eax
    0000006d: 	je	.Ltmp206 # Offset: 109
    00000073: 	leaq	DATAat0xd49e(%rip), %rsi
    0000007a: 	movq	%r13, %rdi
    0000007d: 	callq	strcmp@PLT # Offset: 125
    00000082: 	testl	%eax, %eax
    00000084: 	je	.Ltmp206 # Offset: 132
    0000008a: 	movzbl	(%r13), %eax
    0000008f: 	cmpl	$0x4e, %eax
    00000092: 	jne	.Ltmp207 # Offset: 146
    00000094: 	cmpb	$0x46, 0x1(%r13)
    00000099: 	je	.Ltmp208 # Offset: 153
.Ltmp207:
    0000009f: 	cmpl	$0x6e, %eax
    000000a2: 	jne	.Ltmp209 # Offset: 162
    000000a4: 	cmpb	$0x66, 0x1(%r13)
    000000a9: 	jne	.Ltmp209 # Offset: 169
    000000ab: 	cmpb	$0x0, 0x2(%r13)
    000000b0: 	je	.Ltmp206 # Offset: 176
.Ltmp209:
    000000b6: 	pxor	%xmm0, %xmm0
    000000ba: 	jmp	.Ltmp210 # Offset: 186
    000000bf: 	nop # Size: 1
.Ltmp204:
    000000c0: 	movsbl	0x1(%rbx), %ecx
    000000c4: 	leaq	0x1(%rbx), %rdx
    000000c8: 	cltq
    000000ca: 	leal	-0x30(%rcx), %r8d
    000000ce: 	movl	%ecx, %r10d
    000000d1: 	cmpl	$0x9, %r8d
    000000d5: 	jbe	.Ltmp211 # Offset: 213
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp213:
    000000e0: 	movl	%r10d, %r9d
    000000e3: 	jmp	.Ltmp212 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp214:
    000000e8: 	leaq	(%rax,%rax,4), %rax
    000000ec: 	addq	$0x2, %rdx
    000000f0: 	leaq	(%rax,%rax,4), %rcx
    000000f4: 	leal	(%r8,%r8,4), %eax
    000000f8: 	leal	(%rsi,%rax,2), %eax
    000000fb: 	leaq	(%rax,%rcx,4), %rax
    000000ff: 	movsbl	(%rdx), %ecx
    00000102: 	leal	-0x30(%rcx), %r8d
    00000106: 	movl	%ecx, %r10d
    00000109: 	cmpl	$0x9, %r8d
    0000010d: 	ja	.Ltmp213 # Offset: 269
.Ltmp211:
    0000010f: 	movsbl	0x1(%rdx), %esi
    00000113: 	movl	%esi, %r9d
    00000116: 	subl	$0x30, %esi
    00000119: 	cmpl	$0x9, %esi
    0000011c: 	jbe	.Ltmp214 # Offset: 284
    0000011e: 	subl	$0x30, %ecx
    00000121: 	cmpl	$0x9, %ecx
    00000124: 	ja	.Ltmp213 # Offset: 292
    00000126: 	leaq	(%rax,%rax,4), %rax
    0000012a: 	movslq	%ecx, %rcx
    0000012d: 	addq	$0x1, %rdx
    00000131: 	leaq	(%rcx,%rax,2), %rax
.Ltmp212:
    00000135: 	testq	%rax, %rax
    00000138: 	js	.Ltmp215 # Offset: 312
    0000013e: 	pxor	%xmm0, %xmm0
    00000142: 	cvtsi2sd	%rax, %xmm0
    00000147: 	cmpb	$0x2e, %r9b
    0000014b: 	je	.Ltmp216 # Offset: 331
.Ltmp233:
    00000151: 	testb	%dil, %dil
    00000154: 	je	.Ltmp217 # Offset: 340
    00000156: 	xorpd	DATAat0xf4f0(%rip), %xmm0
.Ltmp217:
    0000015e: 	andl	$-0x21, %r9d
    00000162: 	cmpb	$0x45, %r9b
    00000166: 	jne	.Ltmp218 # Offset: 358
    0000016c: 	movsbl	0x1(%rdx), %eax
    00000170: 	cmpb	$0x2d, %al
    00000172: 	je	.Ltmp219 # Offset: 370
    00000178: 	cmpb	$0x2b, %al
    0000017a: 	je	.Ltmp220 # Offset: 378
    00000180: 	leaq	0x1(%rdx), %rcx
    00000184: 	xorl	%esi, %esi
.Ltmp239:
    00000186: 	subl	$0x30, %eax
    00000189: 	cmpl	$0x9, %eax
    0000018c: 	ja	.Ltmp221 # Offset: 396
    00000192: 	movsbl	0x1(%rcx), %edx
    00000196: 	leaq	0x1(%rcx), %rbp
    0000019a: 	subl	$0x30, %edx
    0000019d: 	cmpl	$0x9, %edx
    000001a0: 	ja	.Ltmp222 # Offset: 416
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp223:
    000001a8: 	leal	(%rax,%rax,4), %eax
    000001ab: 	addq	$0x1, %rbp
    000001af: 	leal	(%rdx,%rax,2), %eax
    000001b2: 	movsbl	(%rbp), %edx
    000001b6: 	subl	$0x30, %edx
    000001b9: 	cmpl	$0x9, %edx
    000001bc: 	jbe	.Ltmp223 # Offset: 444
    000001be: 	cmpl	$0x134, %eax
    000001c3: 	jg	.Ltmp224 # Offset: 451
.Ltmp222:
    000001c9: 	testl	%eax, %eax
    000001cb: 	je	.Ltmp210 # Offset: 459
    000001d1: 	cmpl	$0x7, %eax
    000001d4: 	jg	.Ltmp225 # Offset: 468
    000001da: 	testb	$0x1, %al
    000001dc: 	je	.Ltmp226 # Offset: 476
    000001e2: 	movsd	DATAat0xf420(%rip), %xmm2
    000001ea: 	movsd	DATAat0xf428(%rip), %xmm1
.Ltmp256:
    000001f2: 	testb	$0x2, %al
    000001f4: 	je	.Ltmp227 # Offset: 500
    000001f6: 	movapd	%xmm2, %xmm1
.Ltmp227:
    000001fa: 	testb	$0x4, %al
    000001fc: 	je	.Ltmp228 # Offset: 508
    000001fe: 	mulsd	DATAat0xf440(%rip), %xmm1
.Ltmp228:
    00000206: 	testb	%sil, %sil
    00000209: 	je	.Ltmp229 # Offset: 521
    0000020f: 	divsd	%xmm1, %xmm0
    00000213: 	jmp	.Ltmp210 # Offset: 531
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp203:
    00000218: 	movzbl	0x1(%rbx), %edx
    0000021c: 	addq	$0x1, %rbx
    00000220: 	jmp	.Ltmp230 # Offset: 544
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp205:
    00000228: 	pxor	%xmm0, %xmm0
    0000022c: 	cmpb	$0x4e, %dl
    0000022f: 	jne	.Ltmp210 # Offset: 559
    00000231: 	movzbl	0x1(%rbx), %eax
    00000235: 	andl	$-0x21, %eax
    00000238: 	cmpb	$0x41, %al
    0000023a: 	jne	.Ltmp210 # Offset: 570
    0000023c: 	movzbl	0x2(%rbx), %eax
    00000240: 	andl	$-0x21, %eax
    00000243: 	cmpb	$0x4e, %al
    00000245: 	jne	.Ltmp210 # Offset: 581
    00000247: 	movsd	DATAat0xf430(%rip), %xmm0
    0000024f: 	leaq	0x3(%rbx), %rbp
    00000253: 	jmp	.Ltmp210 # Offset: 595
.Ltmp208:
    00000255: 	cmpb	$0x0, 0x2(%r13)
    0000025a: 	jne	.Ltmp207 # Offset: 602
.Ltmp206:
    00000260: 	movsd	DATAat0xf438(%rip), %xmm0
    00000268: 	leaq	0x8(%rbx), %rbp
.Ltmp210:
    0000026c: 	testq	%r12, %r12
    0000026f: 	je	.Ltmp231 # Offset: 623
    00000271: 	movq	%rbp, (%r12)
.Ltmp231:
    00000275: 	addq	$0x8, %rsp
    00000279: 	popq	%rbx
    0000027a: 	popq	%rbp
    0000027b: 	popq	%r12
    0000027d: 	popq	%r13
    0000027f: 	retq # Offset: 639
.Ltmp202:
    00000280: 	movzbl	0x1(%rbx), %edx
    00000284: 	movl	$0x1, %edi
    00000289: 	addq	$0x1, %rbx
    0000028d: 	jmp	.Ltmp230 # Offset: 653
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp218:
    00000298: 	cmpq	%rbp, %rdx
    0000029b: 	jbe	.Ltmp232 # Offset: 667
.Ltmp221:
    000002a1: 	movsbl	-0x1(%rdx), %eax
    000002a5: 	subl	$0x30, %eax
    000002a8: 	cmpl	$0x9, %eax
    000002ab: 	cmovbeq	%rdx, %rbp
    000002af: 	jmp	.Ltmp210 # Offset: 687
    000002b1: 	nopl	(%rax) # Size: 7
.Ltmp215:
    000002b8: 	movq	%rax, %rcx
    000002bb: 	andl	$0x1, %eax
    000002be: 	pxor	%xmm0, %xmm0
    000002c2: 	shrq	%rcx
    000002c5: 	orq	%rax, %rcx
    000002c8: 	cvtsi2sd	%rcx, %xmm0
    000002cd: 	addsd	%xmm0, %xmm0
    000002d1: 	cmpb	$0x2e, %r9b
    000002d5: 	jne	.Ltmp233 # Offset: 725
.Ltmp216:
    000002db: 	movsbl	0x1(%rdx), %esi
    000002df: 	leaq	0x1(%rdx), %r11
    000002e3: 	xorl	%ecx, %ecx
    000002e5: 	pxor	%xmm1, %xmm1
    000002e9: 	movq	%r11, %rax
    000002ec: 	leal	-0x30(%rsi), %r10d
    000002f0: 	movl	%esi, %ebx
    000002f2: 	movl	%esi, %r9d
    000002f5: 	cmpl	$0x9, %r10d
    000002f9: 	jbe	.Ltmp234 # Offset: 761
    000002fb: 	jmp	.Ltmp235 # Offset: 763
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp237:
    00000300: 	leaq	(%rcx,%rcx,4), %rcx
    00000304: 	addq	$0x2, %rax
    00000308: 	leaq	(%rcx,%rcx,4), %rsi
    0000030c: 	leal	(%r10,%r10,4), %ecx
    00000310: 	leal	(%r8,%rcx,2), %ecx
    00000314: 	leaq	(%rcx,%rsi,4), %rcx
    00000318: 	movsbl	(%rax), %esi
    0000031b: 	leal	-0x30(%rsi), %r10d
    0000031f: 	movl	%esi, %ebx
    00000321: 	cmpl	$0x9, %r10d
    00000325: 	ja	.Ltmp236 # Offset: 805
.Ltmp234:
    00000327: 	movsbl	0x1(%rax), %r8d
    0000032c: 	movl	%r8d, %r9d
    0000032f: 	subl	$0x30, %r8d
    00000333: 	cmpl	$0x9, %r8d
    00000337: 	jbe	.Ltmp237 # Offset: 823
    00000339: 	subl	$0x30, %esi
    0000033c: 	cmpl	$0x9, %esi
    0000033f: 	ja	.Ltmp236 # Offset: 831
    00000341: 	movslq	%esi, %rsi
    00000344: 	leaq	(%rcx,%rcx,4), %rcx
    00000348: 	leaq	0x1(%rax), %r11
    0000034c: 	leaq	(%rsi,%rcx,2), %rcx
    00000350: 	movl	%eax, %esi
    00000352: 	subl	%edx, %esi
.Ltmp240:
    00000354: 	pxor	%xmm1, %xmm1
    00000358: 	testl	%esi, %esi
    0000035a: 	je	.Ltmp235 # Offset: 858
    0000035c: 	testq	%rcx, %rcx
    0000035f: 	js	.Ltmp238 # Offset: 863
    00000361: 	pxor	%xmm1, %xmm1
    00000365: 	cvtsi2sd	%rcx, %xmm1
.Ltmp241:
    0000036a: 	leaq	"_ZL19fraction_multiplier/1"(%rip), %rax
    00000371: 	mulsd	(%rax,%rsi,8), %xmm1
.Ltmp235:
    00000376: 	addsd	%xmm1, %xmm0
    0000037a: 	movq	%r11, %rdx
    0000037d: 	jmp	.Ltmp233 # Offset: 893
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp232:
    00000388: 	movq	%rdx, %rbp
    0000038b: 	jmp	.Ltmp210 # Offset: 907
.Ltmp219:
    00000390: 	movsbl	0x2(%rdx), %eax
    00000394: 	leaq	0x2(%rdx), %rcx
    00000398: 	movl	$0x1, %esi
    0000039d: 	jmp	.Ltmp239 # Offset: 925
.Ltmp236:
    000003a2: 	movl	%eax, %esi
    000003a4: 	movl	%ebx, %r9d
    000003a7: 	subl	%r11d, %esi
    000003aa: 	movq	%rax, %r11
    000003ad: 	jmp	.Ltmp240 # Offset: 941
.Ltmp220:
    000003af: 	movsbl	0x2(%rdx), %eax
    000003b3: 	leaq	0x2(%rdx), %rcx
    000003b7: 	xorl	%esi, %esi
    000003b9: 	jmp	.Ltmp239 # Offset: 953
.Ltmp224:
    000003be: 	callq	__errno_location@PLT # Offset: 958
    000003c3: 	pxor	%xmm0, %xmm0
    000003c7: 	movl	$0x22, (%rax)
    000003cd: 	jmp	.Ltmp210 # Offset: 973
.Ltmp238:
    000003d2: 	movq	%rcx, %rax
    000003d5: 	andl	$0x1, %ecx
    000003d8: 	pxor	%xmm1, %xmm1
    000003dc: 	shrq	%rax
    000003df: 	orq	%rcx, %rax
    000003e2: 	cvtsi2sd	%rax, %xmm1
    000003e7: 	addsd	%xmm1, %xmm1
    000003eb: 	jmp	.Ltmp241 # Offset: 1003
.Ltmp229:
    000003f0: 	mulsd	%xmm1, %xmm0
    000003f4: 	jmp	.Ltmp210 # Offset: 1012
.Ltmp225:
    000003f9: 	movsd	DATAat0xf418(%rip), %xmm1
    00000401: 	cmpl	$0x3f, %eax
    00000404: 	jg	.Ltmp242 # Offset: 1028
    00000406: 	testb	$0x1, %al
    00000408: 	je	.Ltmp243 # Offset: 1032
    0000040a: 	movsd	DATAat0xf428(%rip), %xmm1
.Ltmp243:
    00000412: 	testb	$0x2, %al
    00000414: 	je	.Ltmp244 # Offset: 1044
    00000416: 	mulsd	DATAat0xf410(%rip), %xmm1
.Ltmp244:
    0000041e: 	testb	$0x4, %al
    00000420: 	je	.Ltmp245 # Offset: 1056
    00000422: 	mulsd	DATAat0xf440(%rip), %xmm1
.Ltmp245:
    0000042a: 	testb	$0x8, %al
    0000042c: 	je	.Ltmp246 # Offset: 1068
    0000042e: 	mulsd	DATAat0xf448(%rip), %xmm1
.Ltmp246:
    00000436: 	testb	$0x10, %al
    00000438: 	je	.Ltmp247 # Offset: 1080
    0000043a: 	mulsd	DATAat0xf450(%rip), %xmm1
.Ltmp247:
    00000442: 	shrl	$0x5, %eax
    00000445: 	je	.Ltmp228 # Offset: 1093
    0000044b: 	mulsd	DATAat0xf458(%rip), %xmm1
    00000453: 	jmp	.Ltmp228 # Offset: 1107
.Ltmp242:
    00000458: 	testb	$0x1, %al
    0000045a: 	je	.Ltmp248 # Offset: 1114
    0000045c: 	movsd	DATAat0xf428(%rip), %xmm1
.Ltmp248:
    00000464: 	testb	$0x2, %al
    00000466: 	je	.Ltmp249 # Offset: 1126
    00000468: 	mulsd	DATAat0xf410(%rip), %xmm1
.Ltmp249:
    00000470: 	testb	$0x4, %al
    00000472: 	je	.Ltmp250 # Offset: 1138
    00000474: 	mulsd	DATAat0xf440(%rip), %xmm1
.Ltmp250:
    0000047c: 	testb	$0x8, %al
    0000047e: 	je	.Ltmp251 # Offset: 1150
    00000480: 	mulsd	DATAat0xf448(%rip), %xmm1
.Ltmp251:
    00000488: 	testb	$0x10, %al
    0000048a: 	je	.Ltmp252 # Offset: 1162
    0000048c: 	mulsd	DATAat0xf450(%rip), %xmm1
.Ltmp252:
    00000494: 	testb	$0x20, %al
    00000496: 	je	.Ltmp253 # Offset: 1174
    00000498: 	mulsd	DATAat0xf458(%rip), %xmm1
.Ltmp253:
    000004a0: 	testb	$0x40, %al
    000004a2: 	je	.Ltmp254 # Offset: 1186
    000004a4: 	mulsd	DATAat0xf460(%rip), %xmm1
.Ltmp254:
    000004ac: 	testb	$-0x80, %al
    000004ae: 	je	.Ltmp255 # Offset: 1198
    000004b0: 	mulsd	DATAat0xf468(%rip), %xmm1
.Ltmp255:
    000004b8: 	testb	$0x1, %ah
    000004bb: 	je	.Ltmp228 # Offset: 1211
    000004c1: 	mulsd	DATAat0xf470(%rip), %xmm1
    000004c9: 	jmp	.Ltmp228 # Offset: 1225
.Ltmp226:
    000004ce: 	movsd	DATAat0xf410(%rip), %xmm2
    000004d6: 	movsd	DATAat0xf418(%rip), %xmm1
    000004de: 	jmp	.Ltmp256 # Offset: 1246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13simple_strtodPKcPPc"

Binary Function "_Z13simple_strtolPKcPPci" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x5370
  Size        : 0x4e8
  MaxSize     : 0x4f0
  Offset      : 0x5370
  Section     : .text
  Orc Section : .local.text._Z13simple_strtolPKcPPci
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	movslq	%edx, %r8
    00000007: 	pushq	%r14
    00000009: 	leal	-0x2(%r8), %eax
    0000000d: 	pushq	%r13
    0000000f: 	cmpl	$0x22, %eax
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rsi, %rbp
    00000018: 	seta	%sil
    0000001c: 	testl	%r8d, %r8d
    0000001f: 	setne	%dl
    00000022: 	pushq	%rbx
    00000023: 	xorl	%eax, %eax
    00000025: 	andb	%dl, %sil
    00000028: 	jne	.Ltmp257 # Offset: 40
    0000002e: 	cmpb	$0x0, "_ZZ13simple_strtolPKcPPciE18tables_initialized/1"(%rip)
    00000035: 	movq	%rdi, %r9
    00000038: 	je	.Ltmp258 # Offset: 56
.Ltmp279:
    0000003e: 	movzbl	(%r9), %eax
    00000042: 	movq	%r9, %rbx
    00000045: 	cmpb	$0x20, %al
    00000047: 	jne	.Ltmp259 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp260:
    00000050: 	movzbl	0x1(%rbx), %eax
    00000054: 	addq	$0x1, %rbx
    00000058: 	cmpb	$0x20, %al
    0000005a: 	je	.Ltmp260 # Offset: 90
.Ltmp259:
    0000005c: 	cmpb	$0x2d, %al
    0000005e: 	je	.Ltmp261 # Offset: 94
    00000064: 	cmpb	$0x2b, %al
    00000066: 	sete	%al
    00000069: 	movzbl	%al, %eax
    0000006c: 	addq	%rax, %rbx
.Ltmp278:
    0000006f: 	testl	$0xffffffef, %r8d
    00000076: 	je	.Ltmp262 # Offset: 118
.Ltmp275:
    0000007c: 	cmpl	$0xa, %r8d
    00000080: 	je	.Ltmp263 # Offset: 128
.Ltmp291:
    00000086: 	cmpl	$0x10, %r8d
    0000008a: 	je	.Ltmp264 # Offset: 138
    00000090: 	movl	%r8d, %r9d
    00000093: 	leal	(%r8,%r8), %ecx
    00000097: 	imull	%r8d, %r9d
    0000009b: 	leal	0x1(%rcx), %r12d
    0000009f: 	movslq	%r9d, %r9
.Ltmp290:
    000000a2: 	leaq	"_ZZ13simple_strtolPKcPPciE14division_table/1"(%rip), %rdi
    000000a9: 	movslq	%ecx, %rcx
    000000ac: 	movq	(%rdi,%rcx,8), %r11
    000000b0: 	testq	%r11, %r11
    000000b3: 	je	.Ltmp265 # Offset: 179
    000000b9: 	movslq	%r12d, %rax
    000000bc: 	movq	(%rdi,%rax,8), %r10
.Ltmp286:
    000000c0: 	movsbq	(%rbx), %rdx
    000000c4: 	xorl	%eax, %eax
    000000c6: 	leaq	"_ZZ13simple_strtolPKcPPciE9hex_table/1"(%rip), %rcx
    000000cd: 	movslq	%r8d, %rdi
    000000d0: 	testb	%dl, %dl
    000000d2: 	jne	.Ltmp266 # Offset: 210
    000000d4: 	jmp	.Ltmp267 # Offset: 212
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp270:
    000000e0: 	imulq	%rdi, %rdx
    000000e4: 	addq	$0x2, %rbx
    000000e8: 	imulq	%r9, %rax
    000000ec: 	addq	%r12, %rdx
    000000ef: 	addq	%rdx, %rax
    000000f2: 	movsbq	(%rbx), %rdx
    000000f6: 	testb	%dl, %dl
    000000f8: 	je	.Ltmp267 # Offset: 248
.Ltmp266:
    000000fa: 	movsbq	0x1(%rbx), %r12
    000000ff: 	movsbq	%dl, %r13
    00000103: 	testb	%r12b, %r12b
    00000106: 	je	.Ltmp268 # Offset: 262
    00000108: 	movzbl	(%rcx,%rdx), %edx
    0000010c: 	movzbl	(%rcx,%r12), %r12d
    00000111: 	cmpq	%r10, %rax
    00000114: 	jg	.Ltmp269 # Offset: 276
    0000011a: 	cmpq	%r12, %rdx
    0000011d: 	movq	%r12, %r14
    00000120: 	cmovgeq	%rdx, %r14
    00000124: 	cmpq	%rdi, %r14
    00000127: 	jl	.Ltmp270 # Offset: 295
.Ltmp268:
    00000129: 	movzbl	(%rcx,%r13), %edx
    0000012e: 	cmpq	%r11, %rax
    00000131: 	jle	.Ltmp271 # Offset: 305
    00000133: 	jmp	.Ltmp269 # Offset: 307
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp272:
    00000140: 	imulq	%r8, %rax
    00000144: 	addq	$0x1, %rbx
    00000148: 	addq	%rdx, %rax
    0000014b: 	movsbq	(%rbx), %rdx
    0000014f: 	testb	%dl, %dl
    00000151: 	je	.Ltmp267 # Offset: 337
    00000153: 	movzbl	(%rcx,%rdx), %edx
    00000157: 	cmpq	%r11, %rax
    0000015a: 	jg	.Ltmp269 # Offset: 346
.Ltmp271:
    00000160: 	cmpq	%r8, %rdx
    00000163: 	jl	.Ltmp272 # Offset: 355
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp267:
    00000168: 	movq	%rbx, %r9
    0000016b: 	jmp	.Ltmp273 # Offset: 363
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp262:
    00000170: 	movzbl	(%rbx), %eax
    00000173: 	cmpb	$0x30, %al
    00000175: 	je	.Ltmp274 # Offset: 373
    0000017b: 	testl	%r8d, %r8d
    0000017e: 	jne	.Ltmp275 # Offset: 382
    00000184: 	movsbl	%al, %edx
    00000187: 	xorl	%eax, %eax
    00000189: 	leal	-0x30(%rdx), %ecx
    0000018c: 	cmpl	$0x9, %ecx
    0000018f: 	jbe	.Ltmp276 # Offset: 399
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp273:
    00000198: 	testq	%rbp, %rbp
    0000019b: 	je	.Ltmp277 # Offset: 411
    0000019d: 	movq	%r9, (%rbp)
.Ltmp277:
    000001a1: 	movq	%rax, %rdx
    000001a4: 	negq	%rdx
    000001a7: 	testb	%sil, %sil
    000001aa: 	cmovneq	%rdx, %rax
.Ltmp257:
    000001ae: 	popq	%rbx
    000001af: 	popq	%rbp
    000001b0: 	popq	%r12
    000001b2: 	popq	%r13
    000001b4: 	popq	%r14
    000001b6: 	retq # Offset: 438
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp261:
    000001c0: 	addq	$0x1, %rbx
    000001c4: 	movl	$0x1, %esi
    000001c9: 	jmp	.Ltmp278 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp258:
    000001d0: 	leaq	"_ZZ13simple_strtolPKcPPciE14division_table/1"(%rip), %rdx
    000001d7: 	movl	$0x4a, %ecx
    000001dc: 	pcmpeqd	%xmm0, %xmm0
    000001e0: 	movb	$0x1, "_ZZ13simple_strtolPKcPPciE18tables_initialized/1"(%rip)
    000001e7: 	movq	%rdx, %rdi
    000001ea: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+48(%rip)
    000001f1: 	movl	$0x2322, %edx
    000001f6: 	rep		stosq	%rax, %es:(%rdi)
    000001f9: 	movq	DATAat0xf400(%rip), %rax
    00000200: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+80(%rip)
    00000207: 	movl	$0x2322, %ecx
    0000020c: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+112(%rip)
    00000213: 	movq	%rax, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+48(%rip)
    0000021a: 	movl	$0x908, %eax
    0000021f: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+64(%rip)
    00000226: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+96(%rip)
    0000022d: 	movw	%ax, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+56(%rip)
    00000234: 	movq	DATAat0xf408(%rip), %rax
    0000023b: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"(%rip)
    00000242: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+16(%rip)
    00000249: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+32(%rip)
    00000250: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+128(%rip)
    00000257: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+144(%rip)
    0000025e: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+160(%rip)
    00000265: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+176(%rip)
    0000026c: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+192(%rip)
    00000273: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+208(%rip)
    0000027a: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+224(%rip)
    00000281: 	movaps	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+240(%rip)
    00000288: 	movdqa	DATAat0xf4e0(%rip), %xmm0
    00000290: 	movq	%rax, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+81(%rip)
    00000297: 	movw	%dx, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+89(%rip)
    0000029e: 	movq	%rax, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+113(%rip)
    000002a5: 	movw	%cx, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+121(%rip)
    000002ac: 	movups	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+65(%rip)
    000002b3: 	movups	%xmm0, "_ZZ13simple_strtolPKcPPciE9hex_table/1"+97(%rip)
    000002ba: 	jmp	.Ltmp279 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp263:
    000002c0: 	movzbl	(%rbx), %eax
    000002c3: 	movsbl	%al, %edx
    000002c6: 	xorl	%eax, %eax
    000002c8: 	leal	-0x30(%rdx), %ecx
    000002cb: 	cmpl	$0x9, %ecx
    000002ce: 	ja	.Ltmp273 # Offset: 718
.Ltmp276:
    000002d4: 	movsbl	0x1(%rbx), %edi
    000002d8: 	movl	%edx, %eax
.Ltmp292:
    000002da: 	subl	$0x30, %eax
    000002dd: 	leal	-0x30(%rdi), %ecx
    000002e0: 	addq	$0x1, %rbx
    000002e4: 	movabsq	$0x147ae147ae147ae, %r8
    000002ee: 	cltq
    000002f0: 	cmpl	$0x9, %ecx
    000002f3: 	jbe	.Ltmp280 # Offset: 755
    000002f5: 	jmp	.Ltmp267 # Offset: 757
    000002fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp281:
    00000300: 	movslq	%ecx, %rcx
    00000303: 	movslq	%edx, %rdx
    00000306: 	cmpq	%r8, %rax
    00000309: 	jg	.Ltmp269 # Offset: 777
    0000030f: 	leaq	(%rax,%rax,4), %rax
    00000313: 	addq	$0x2, %rbx
    00000317: 	leaq	(%rax,%rax,4), %rdi
    0000031b: 	leaq	(%rcx,%rcx,4), %rax
    0000031f: 	leaq	(%rdx,%rax,2), %rax
    00000323: 	leaq	(%rax,%rdi,4), %rax
    00000327: 	movsbl	(%rbx), %edi
    0000032a: 	leal	-0x30(%rdi), %ecx
    0000032d: 	cmpl	$0x9, %ecx
    00000330: 	ja	.Ltmp267 # Offset: 816
.Ltmp280:
    00000336: 	movsbl	0x1(%rbx), %edx
    0000033a: 	subl	$0x30, %edx
    0000033d: 	cmpl	$0x9, %edx
    00000340: 	jbe	.Ltmp281 # Offset: 832
    00000342: 	subl	$0x30, %edi
    00000345: 	cmpl	$0x9, %edi
    00000348: 	ja	.Ltmp267 # Offset: 840
    0000034e: 	movabsq	$0xccccccccccccccc, %rdx
    00000358: 	movslq	%edi, %rdi
    0000035b: 	cmpq	%rdx, %rax
    0000035e: 	jg	.Ltmp269 # Offset: 862
    00000364: 	leaq	(%rax,%rax,4), %rax
    00000368: 	leaq	0x1(%rbx), %r9
    0000036c: 	leaq	(%rdi,%rax,2), %rax
    00000370: 	jmp	.Ltmp273 # Offset: 880
    00000375: 	nopl	(%rax) # Size: 3
.Ltmp274:
    00000378: 	movsbl	0x1(%rbx), %edi
    0000037c: 	movl	%edi, %eax
    0000037e: 	andl	$-0x21, %eax
    00000381: 	cmpb	$0x58, %al
    00000383: 	jne	.Ltmp282 # Offset: 899
    00000389: 	addq	$0x2, %rbx
.Ltmp264:
    0000038d: 	movsbq	(%rbx), %rdx
    00000391: 	xorl	%eax, %eax
    00000393: 	leaq	"_ZZ13simple_strtolPKcPPciE9hex_table/1"(%rip), %rcx
    0000039a: 	movabsq	$0x7fffffffffffff, %r8
    000003a4: 	testb	%dl, %dl
    000003a6: 	jne	.Ltmp283 # Offset: 934
    000003a8: 	jmp	.Ltmp267 # Offset: 936
    000003ad: 	nopl	(%rax) # Size: 3
.Ltmp285:
    000003b0: 	movzbl	(%rcx,%rdx), %edx
    000003b4: 	movzbl	(%rcx,%rdi), %edi
    000003b8: 	cmpq	%r8, %rax
    000003bb: 	jg	.Ltmp269 # Offset: 955
    000003bd: 	cmpq	$0xf, %rdx
    000003c1: 	jg	.Ltmp284 # Offset: 961
    000003c7: 	cmpq	$0xf, %rdi
    000003cb: 	jg	.Ltmp284 # Offset: 971
    000003d1: 	shlq	$0x4, %rdx
    000003d5: 	shlq	$0x8, %rax
    000003d9: 	addq	$0x2, %rbx
    000003dd: 	addq	%rdi, %rdx
    000003e0: 	addq	%rdx, %rax
    000003e3: 	movsbq	(%rbx), %rdx
    000003e7: 	testb	%dl, %dl
    000003e9: 	je	.Ltmp267 # Offset: 1001
.Ltmp283:
    000003ef: 	movsbq	0x1(%rbx), %rdi
    000003f4: 	testb	%dil, %dil
    000003f7: 	jne	.Ltmp285 # Offset: 1015
    000003f9: 	movabsq	$0x7ffffffffffffff, %rdi
    00000403: 	movzbl	(%rcx,%rdx), %edx
    00000407: 	cmpq	%rdi, %rax
    0000040a: 	jle	.Ltmp284 # Offset: 1034
    0000040c: 	nopl	(%rax) # Size: 4
.Ltmp269:
    00000410: 	callq	__errno_location@PLT # Offset: 1040
    00000415: 	movl	$0x22, (%rax)
    0000041b: 	movabsq	$0x7fffffffffffffff, %rax
    00000425: 	testq	%rbp, %rbp
    00000428: 	je	.Ltmp257 # Offset: 1064
    0000042e: 	movq	%rbx, (%rbp)
    00000432: 	popq	%rbx
    00000433: 	popq	%rbp
    00000434: 	popq	%r12
    00000436: 	popq	%r13
    00000438: 	popq	%r14
    0000043a: 	retq # Offset: 1082
    0000043b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp265:
    00000440: 	movabsq	$0x7fffffffffffffff, %r10
    0000044a: 	movslq	%r8d, %r11
    0000044d: 	movq	%r10, %rax
    00000450: 	cqto
    00000452: 	idivq	%r11
    00000455: 	movq	%rax, (%rdi,%rcx,8)
    00000459: 	movq	%r10, %rax
    0000045c: 	cqto
    0000045e: 	idivq	%r9
    00000461: 	movq	%rax, %r10
    00000464: 	movslq	%r12d, %rax
    00000467: 	movq	%r10, (%rdi,%rax,8)
    0000046b: 	movq	(%rdi,%rcx,8), %r11
    0000046f: 	jmp	.Ltmp286 # Offset: 1135
.Ltmp284:
    00000474: 	movabsq	$0x7ffffffffffffff, %rdi
    0000047e: 	jmp	.Ltmp287 # Offset: 1150
.Ltmp288:
    00000480: 	shlq	$0x4, %rax
    00000484: 	addq	$0x1, %rbx
    00000488: 	addq	%rdx, %rax
    0000048b: 	movsbq	(%rbx), %rdx
    0000048f: 	testb	%dl, %dl
    00000491: 	je	.Ltmp267 # Offset: 1169
    00000497: 	movzbl	(%rcx,%rdx), %edx
    0000049b: 	cmpq	%rdi, %rax
    0000049e: 	jg	.Ltmp269 # Offset: 1182
.Ltmp287:
    000004a4: 	cmpq	$0xf, %rdx
    000004a8: 	jle	.Ltmp288 # Offset: 1192
    000004aa: 	jmp	.Ltmp267 # Offset: 1194
.Ltmp282:
    000004af: 	testl	%r8d, %r8d
    000004b2: 	jne	.Ltmp289 # Offset: 1202
    000004b4: 	addq	$0x1, %rbx
    000004b8: 	movl	$0x11, %r12d
    000004be: 	movl	$0x10, %ecx
    000004c3: 	movl	$0x40, %r9d
    000004c9: 	movl	$0x8, %r8d
    000004cf: 	jmp	.Ltmp290 # Offset: 1231
.Ltmp289:
    000004d4: 	cmpl	$0xa, %r8d
    000004d8: 	jne	.Ltmp291 # Offset: 1240
    000004de: 	movl	$0x30, %eax
    000004e3: 	jmp	.Ltmp292 # Offset: 1251
DWARF CFI Instructions:
    <empty>
End of Function "_Z13simple_strtolPKcPPci"

Binary Function "_fini" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0xcf50
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0xcf50
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 31 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 167 instructions were shortened
BOLT-INFO: removed 63 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 18 out of 60 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x200c78
