BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x18030, which lies outside .bss
BOLT-WARNING: split function detected on input : _Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x17ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x1420
  Size        : 0xcb
  MaxSize     : 0xd0
  Offset      : 0x1420
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x141b6(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x1419c(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIdEvv # Offset: 100
    00000069: 	shll	$0x3, iterations(%rip)
    00000070: 	callq	_Z11TestOneTypeIiEvv # Offset: 112
    00000075: 	callq	_Z11TestOneTypeImEvv # Offset: 117
    0000007a: 	popq	%rbx
    0000007b: 	xorl	%eax, %eax
    0000007d: 	popq	%rbp
    0000007e: 	popq	%r12
    00000080: 	popq	%r13
    00000082: 	popq	%r14
    00000084: 	retq # Offset: 132
.Ltmp3:
    00000085: 	movq	0x8(%r14), %rdi
    00000089: 	movl	$0xa, %edx
    0000008e: 	xorl	%esi, %esi
    00000090: 	callq	strtol@PLT # Offset: 144
    00000095: 	movl	%eax, iterations(%rip)
    0000009b: 	cmpl	$0x2, %r13d
    0000009f: 	jle	.Ltmp4 # Offset: 159
    000000a1: 	movq	0x10(%r14), %rdi
    000000a5: 	xorl	%esi, %esi
    000000a7: 	callq	strtod@PLT # Offset: 167
    000000ac: 	movsd	%xmm0, init_value(%rip)
    000000b4: 	jmp	.Ltmp4 # Offset: 180
.Ltmp1:
    000000b6: 	leaq	DATAat0x1419c(%rip), %rsi
    000000bd: 	movl	$0x1, %edi
    000000c2: 	xorl	%eax, %eax
    000000c4: 	callq	__printf_chk@PLT # Offset: 196
    000000c9: 	jmp	.Ltmp4 # Offset: 201
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 6
  State       : disassembled
  Address     : 0x15d0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15d0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x17fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1600
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1600
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x17fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1630
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1630
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x17ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x1670
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1670
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 10
  State       : disassembled
  Address     : 0x16b0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16b0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/stepanov_abstraction.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x16c0
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x16c0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp9 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp10 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp11 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp13:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp12 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp11:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp13 # Offset: 131
    00000085: 	jmp	.Ltmp14 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp10:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp14:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp13 # Offset: 192
.Ltmp12:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp9:
    000000c7: 	leaq	DATAat0x14008(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x17a0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x17a0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp15 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp16 # Offset: 38
.Ltmp15:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp17 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp16:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp17:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x14038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1840
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1840
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp18 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp19 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp20:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp20 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp33:
    00000069: 	leaq	DATAat0x141b8(%rip), %rbp
    00000070: 	leaq	DATAat0x14058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x14098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp21 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x14870(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x140c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x14868(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp22 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp26:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp23 # Offset: 244
    000000fa: 	movq	DATAat0x14858(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp27:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x14858(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp24 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp24:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x1419d(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x14870(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp25 # Offset: 398
.Ltmp22:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp26 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp27 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp23:
    000001c8: 	movq	DATAat0x14860(%rip), %rsi
    000001cf: 	movq	DATAat0x14858(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp24 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp25:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp21 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp28 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp29:
    00000210: 	addq	$0x10, %rax
.Ltmp28:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp29 # Offset: 542
.Ltmp34:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x140f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp30 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp31 # Offset: 592
.Ltmp30:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp18:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp31:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp32:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp32 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x14178(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp18 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp19:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp33 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp21:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp34 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1b70
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1b70
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp35 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp36 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp37:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp37 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp42:
    0000006a: 	leaq	DATAat0x141b8(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x14120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x1419e(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x141b8(%rip), %r8
    000000a1: 	leaq	DATAat0x1418c(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp38 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp39:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x1419d(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp39 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp38 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp40 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp41:
    00000140: 	addq	$0x10, %rax
.Ltmp40:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp41 # Offset: 334
.Ltmp43:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x140f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp35:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp36:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp42 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp38:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp43 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1d20
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1d20
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1d40
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1d40
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x14868(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1d80
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1d80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1d90
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1d90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1de0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1de0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1e30
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1e30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1e60
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1e60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1e90
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1e90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1ec0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1ec0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1ef0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1ef0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1f20
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1f20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1f50
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1f50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1f80
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1f80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x1fb0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1fb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x1fe0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1fe0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2010
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2010
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2040
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x2040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x2080
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2080
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x20b0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x20b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x20e0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x20e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2110
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2110
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x2140
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2140
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x2170
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2170
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x21a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x21a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x21d0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x21d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2200
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2200
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2230
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2230
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x2260
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2260
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_.part.0/1
                _ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_.part.0/stepanov_abstraction.cpp/1
  Number      : 44
  State       : disassembled
  Address     : 0x2760
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x2760
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	pushq	%rbp
    00000001: 	movq	%rsi, %rbp
    00000004: 	pushq	%rbx
    00000005: 	subq	$0x8, %rsp
.Ltmp80:
    00000009: 	movl	(%rdi), %edx
    0000000b: 	movq	%rbp, %rbx
    0000000e: 	movq	%rdi, %rax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp77:
    00000018: 	movl	-0x4(%rbx), %esi
    0000001b: 	leaq	-0x4(%rbx), %rcx
    0000001f: 	cmpl	%esi, %edx
    00000021: 	jl	.Ltmp73 # Offset: 33
    00000023: 	cmpq	%rax, %rcx
    00000026: 	jbe	.Ltmp74 # Offset: 38
    00000028: 	cmpl	(%rax), %edx
    0000002a: 	jle	.Ltmp75 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp76:
    00000030: 	addq	$0x4, %rax
    00000034: 	cmpl	(%rax), %edx
    00000036: 	jg	.Ltmp76 # Offset: 54
    00000038: 	cmpq	%rax, %rcx
    0000003b: 	jbe	.Ltmp74 # Offset: 59
.Ltmp75:
    0000003d: 	movl	(%rax), %r8d
    00000040: 	movl	%r8d, (%rcx)
    00000043: 	movl	%esi, (%rax)
.Ltmp73:
    00000045: 	movq	%rcx, %rbx
    00000048: 	jmp	.Ltmp77 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp74:
    00000050: 	movq	%rbx, %rax
    00000053: 	subq	%rdi, %rax
    00000056: 	cmpq	$0x4, %rax
    0000005a: 	jle	.Ltmp78 # Offset: 90
    0000005c: 	movq	%rbx, %rsi
    0000005f: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_.part.0/1" # Offset: 95
.Ltmp78:
    00000064: 	movq	%rbp, %rax
    00000067: 	subq	%rbx, %rax
    0000006a: 	cmpq	$0x4, %rax
    0000006e: 	jg	.Ltmp79 # Offset: 110
    00000070: 	addq	$0x8, %rsp
    00000074: 	popq	%rbx
    00000075: 	popq	%rbp
    00000076: 	retq # Offset: 118
.Ltmp79:
    00000077: 	movq	%rbx, %rdi
    0000007a: 	jmp	.Ltmp80 # Offset: 122
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_.part.0/1
                _ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_.part.0/stepanov_abstraction.cpp/1
  Number      : 45
  State       : disassembled
  Address     : 0x27e0
  Size        : 0x8f
  MaxSize     : 0x90
  Offset      : 0x27e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	pushq	%rbp
    00000001: 	movq	%rsi, %rbp
    00000004: 	pushq	%rbx
    00000005: 	subq	$0x8, %rsp
.Ltmp88:
    00000009: 	movsd	(%rdi), %xmm0
    0000000d: 	movq	%rbp, %rbx
    00000010: 	movq	%rdi, %rax
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp85:
    00000018: 	movsd	-0x8(%rbx), %xmm1
    0000001d: 	leaq	-0x8(%rbx), %rdx
    00000021: 	comisd	%xmm0, %xmm1
    00000025: 	ja	.Ltmp81 # Offset: 37
    00000027: 	cmpq	%rax, %rdx
    0000002a: 	jbe	.Ltmp82 # Offset: 42
    0000002c: 	comisd	(%rax), %xmm0
    00000030: 	jbe	.Ltmp83 # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp84:
    00000038: 	addq	$0x8, %rax
    0000003c: 	comisd	(%rax), %xmm0
    00000040: 	ja	.Ltmp84 # Offset: 64
    00000042: 	cmpq	%rax, %rdx
    00000045: 	jbe	.Ltmp82 # Offset: 69
.Ltmp83:
    00000047: 	movsd	(%rax), %xmm2
    0000004b: 	movsd	%xmm2, (%rdx)
    0000004f: 	movsd	%xmm1, (%rax)
.Ltmp81:
    00000053: 	movq	%rdx, %rbx
    00000056: 	jmp	.Ltmp85 # Offset: 86
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp82:
    00000060: 	movq	%rbx, %rax
    00000063: 	subq	%rdi, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp86 # Offset: 106
    0000006c: 	movq	%rbx, %rsi
    0000006f: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_.part.0/1" # Offset: 111
.Ltmp86:
    00000074: 	movq	%rbp, %rax
    00000077: 	subq	%rbx, %rax
    0000007a: 	cmpq	$0x8, %rax
    0000007e: 	jg	.Ltmp87 # Offset: 126
    00000080: 	addq	$0x8, %rsp
    00000084: 	popq	%rbx
    00000085: 	popq	%rbp
    00000086: 	retq # Offset: 134
.Ltmp87:
    00000087: 	movq	%rbx, %rdi
    0000008a: 	jmp	.Ltmp88 # Offset: 138
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEEEEvT_SD_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEEEEvT_SD_.part.0/1
                _ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEEEEvT_SD_.part.0/stepanov_abstraction.cpp/1
  Number      : 46
  State       : disassembled
  Address     : 0x2870
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x2870
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEEEEvT_SD_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	pushq	%rbp
    00000001: 	movq	%rsi, %rbp
    00000004: 	pushq	%rbx
    00000005: 	subq	$0x8, %rsp
.Ltmp96:
    00000009: 	movq	(%rdi), %rdx
    0000000c: 	movq	%rbp, %rbx
    0000000f: 	movq	%rdi, %rax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp93:
    00000018: 	movq	-0x8(%rbx), %rsi
    0000001c: 	leaq	-0x8(%rbx), %rcx
    00000020: 	cmpq	%rsi, %rdx
    00000023: 	jb	.Ltmp89 # Offset: 35
    00000025: 	cmpq	%rax, %rcx
    00000028: 	jbe	.Ltmp90 # Offset: 40
    0000002a: 	cmpq	(%rax), %rdx
    0000002d: 	jbe	.Ltmp91 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp92:
    00000030: 	addq	$0x8, %rax
    00000034: 	cmpq	(%rax), %rdx
    00000037: 	ja	.Ltmp92 # Offset: 55
    00000039: 	cmpq	%rax, %rcx
    0000003c: 	jbe	.Ltmp90 # Offset: 60
.Ltmp91:
    0000003e: 	movq	(%rax), %r8
    00000041: 	movq	%r8, (%rcx)
    00000044: 	movq	%rsi, (%rax)
.Ltmp89:
    00000047: 	movq	%rcx, %rbx
    0000004a: 	jmp	.Ltmp93 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp90:
    00000050: 	movq	%rbx, %rax
    00000053: 	subq	%rdi, %rax
    00000056: 	cmpq	$0x8, %rax
    0000005a: 	jle	.Ltmp94 # Offset: 90
    0000005c: 	movq	%rbx, %rsi
    0000005f: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEEEEvT_SD_.part.0/1" # Offset: 95
.Ltmp94:
    00000064: 	movq	%rbp, %rax
    00000067: 	subq	%rbx, %rax
    0000006a: 	cmpq	$0x8, %rax
    0000006e: 	jg	.Ltmp95 # Offset: 110
    00000070: 	addq	$0x8, %rsp
    00000074: 	popq	%rbx
    00000075: 	popq	%rbp
    00000076: 	retq # Offset: 118
.Ltmp95:
    00000077: 	movq	%rbx, %rdi
    0000007a: 	jmp	.Ltmp96 # Offset: 122
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEEEEvT_SD_.part.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 47
  State       : disassembled
  Address     : 0x28f0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x28f0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp97 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp100:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp99:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp98 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp99 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp100 # Offset: 142
.Ltmp97:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp101 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp102 # Offset: 164
.Ltmp105:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp103 # Offset: 177
.Ltmp104:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp102 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp104 # Offset: 214
.Ltmp103:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp105 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp106 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp108:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp107 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp107:
    0000010a: 	addq	$0x20, %r13
.Ltmp102:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp108 # Offset: 275
.Ltmp106:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp109 # Offset: 283
.Ltmp115:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp110 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp111:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp111 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp110:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp98:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp99 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp100 # Offset: 389
    0000018b: 	jmp	.Ltmp97 # Offset: 395
.Ltmp101:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp106 # Offset: 405
.Ltmp114:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp112 # Offset: 422
.Ltmp113:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp106 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp113 # Offset: 463
.Ltmp112:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp114 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp115 # Offset: 482
.Ltmp109:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/stepanov_abstraction.cpp/1
  Number      : 48
  State       : disassembled
  Address     : 0x2af0
  Size        : 0x75d
  MaxSize     : 0x760
  Offset      : 0x2af0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp209:
    00000014: 	movsd	(%r13), %xmm0
    0000001a: 	movq	%rbx, %rbp
    0000001d: 	movq	%r13, %rax
.Ltmp120:
    00000020: 	movsd	-0x8(%rbp), %xmm1
    00000025: 	leaq	-0x8(%rbp), %rdx
    00000029: 	comisd	%xmm0, %xmm1
    0000002d: 	ja	.Ltmp116 # Offset: 45
    0000002f: 	cmpq	%rax, %rdx
    00000032: 	jbe	.Ltmp117 # Offset: 50
    00000034: 	comisd	(%rax), %xmm0
    00000038: 	jbe	.Ltmp118 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp119:
    00000040: 	addq	$0x8, %rax
    00000044: 	comisd	(%rax), %xmm0
    00000048: 	ja	.Ltmp119 # Offset: 72
    0000004a: 	cmpq	%rax, %rdx
    0000004d: 	jbe	.Ltmp117 # Offset: 77
.Ltmp118:
    0000004f: 	movsd	(%rax), %xmm2
    00000053: 	movsd	%xmm2, (%rdx)
    00000057: 	movsd	%xmm1, (%rax)
.Ltmp116:
    0000005b: 	movq	%rdx, %rbp
    0000005e: 	jmp	.Ltmp120 # Offset: 94
.Ltmp117:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r13, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp121 # Offset: 106
    0000006c: 	movsd	(%r13), %xmm0
    00000072: 	movq	%rbp, %r12
    00000075: 	movq	%r13, %rax
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp126:
    00000080: 	comisd	%xmm0, %xmm1
    00000084: 	leaq	-0x8(%r12), %rdx
    00000089: 	ja	.Ltmp122 # Offset: 137
    0000008b: 	cmpq	%rax, %rdx
    0000008e: 	jbe	.Ltmp123 # Offset: 142
    00000090: 	comisd	(%rax), %xmm0
    00000094: 	jbe	.Ltmp124 # Offset: 148
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp125:
    000000a0: 	addq	$0x8, %rax
    000000a4: 	comisd	(%rax), %xmm0
    000000a8: 	ja	.Ltmp125 # Offset: 168
    000000aa: 	cmpq	%rax, %rdx
    000000ad: 	jbe	.Ltmp123 # Offset: 173
.Ltmp124:
    000000af: 	movsd	(%rax), %xmm2
    000000b3: 	movsd	%xmm2, (%rdx)
    000000b7: 	movsd	%xmm1, (%rax)
.Ltmp122:
    000000bb: 	movsd	-0x8(%rdx), %xmm1
    000000c0: 	movq	%rdx, %r12
    000000c3: 	jmp	.Ltmp126 # Offset: 195
.Ltmp123:
    000000c5: 	movq	%r12, %rax
    000000c8: 	subq	%r13, %rax
    000000cb: 	cmpq	$0x8, %rax
    000000cf: 	jg	.Ltmp127 # Offset: 207
.Ltmp189:
    000000d5: 	movq	%rbp, %rax
    000000d8: 	subq	%r12, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jg	.Ltmp128 # Offset: 223
.Ltmp121:
    000000e5: 	movq	%rbx, %rax
    000000e8: 	subq	%rbp, %rax
    000000eb: 	cmpq	$0x8, %rax
    000000ef: 	jle	.Ltmp129 # Offset: 239
    000000f1: 	movsd	(%rbp), %xmm0
    000000f6: 	movq	%rbx, %r12
    000000f9: 	movq	%rbp, %rax
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp134:
    00000100: 	movsd	-0x8(%r12), %xmm1
    00000107: 	leaq	-0x8(%r12), %rdx
    0000010c: 	comisd	%xmm0, %xmm1
    00000110: 	ja	.Ltmp130 # Offset: 272
    00000112: 	cmpq	%rax, %rdx
    00000115: 	jbe	.Ltmp131 # Offset: 277
    00000117: 	comisd	(%rax), %xmm0
    0000011b: 	jbe	.Ltmp132 # Offset: 283
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp133:
    00000120: 	addq	$0x8, %rax
    00000124: 	comisd	(%rax), %xmm0
    00000128: 	ja	.Ltmp133 # Offset: 296
    0000012a: 	cmpq	%rax, %rdx
    0000012d: 	jbe	.Ltmp131 # Offset: 301
.Ltmp132:
    0000012f: 	movsd	(%rax), %xmm2
    00000133: 	movsd	%xmm2, (%rdx)
    00000137: 	movsd	%xmm1, (%rax)
.Ltmp130:
    0000013b: 	movq	%rdx, %r12
    0000013e: 	jmp	.Ltmp134 # Offset: 318
.Ltmp131:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%rbp, %rax
    00000146: 	cmpq	$0x8, %rax
    0000014a: 	jg	.Ltmp135 # Offset: 330
.Ltmp164:
    00000150: 	movq	%rbx, %rax
    00000153: 	subq	%r12, %rax
    00000156: 	cmpq	$0x8, %rax
    0000015a: 	jg	.Ltmp136 # Offset: 346
.Ltmp129:
    00000160: 	addq	$0x8, %rsp
    00000164: 	popq	%rbx
    00000165: 	popq	%rbp
    00000166: 	popq	%r12
    00000168: 	popq	%r13
    0000016a: 	popq	%r14
    0000016c: 	popq	%r15
    0000016e: 	retq # Offset: 366
.Ltmp128:
    0000016f: 	movsd	(%r12), %xmm0
    00000175: 	movq	%rbp, %r13
    00000178: 	movq	%r12, %rax
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp141:
    00000180: 	movsd	-0x8(%r13), %xmm1
    00000186: 	leaq	-0x8(%r13), %rdx
    0000018a: 	comisd	%xmm0, %xmm1
    0000018e: 	ja	.Ltmp137 # Offset: 398
    00000190: 	cmpq	%rax, %rdx
    00000193: 	jbe	.Ltmp138 # Offset: 403
    00000199: 	comisd	(%rax), %xmm0
    0000019d: 	jbe	.Ltmp139 # Offset: 413
    0000019f: 	nop # Size: 1
.Ltmp140:
    000001a0: 	addq	$0x8, %rax
    000001a4: 	comisd	(%rax), %xmm0
    000001a8: 	ja	.Ltmp140 # Offset: 424
    000001aa: 	cmpq	%rax, %rdx
    000001ad: 	jbe	.Ltmp138 # Offset: 429
.Ltmp139:
    000001b3: 	movsd	(%rax), %xmm2
    000001b7: 	movsd	%xmm2, (%rdx)
    000001bb: 	movsd	%xmm1, (%rax)
.Ltmp137:
    000001bf: 	movq	%rdx, %r13
    000001c2: 	jmp	.Ltmp141 # Offset: 450
.Ltmp127:
    000001c4: 	movsd	(%r13), %xmm0
    000001ca: 	movq	%r12, %r14
    000001cd: 	movq	%r13, %rax
.Ltmp146:
    000001d0: 	comisd	%xmm0, %xmm1
    000001d4: 	leaq	-0x8(%r14), %rdx
    000001d8: 	ja	.Ltmp142 # Offset: 472
    000001da: 	cmpq	%rax, %rdx
    000001dd: 	jbe	.Ltmp143 # Offset: 477
    000001e3: 	comisd	(%rax), %xmm0
    000001e7: 	jbe	.Ltmp144 # Offset: 487
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp145:
    000001f0: 	addq	$0x8, %rax
    000001f4: 	comisd	(%rax), %xmm0
    000001f8: 	ja	.Ltmp145 # Offset: 504
    000001fa: 	cmpq	%rax, %rdx
    000001fd: 	jbe	.Ltmp143 # Offset: 509
.Ltmp144:
    00000203: 	movsd	(%rax), %xmm2
    00000207: 	movsd	%xmm2, (%rdx)
    0000020b: 	movsd	%xmm1, (%rax)
.Ltmp142:
    0000020f: 	movsd	-0x8(%rdx), %xmm1
    00000214: 	movq	%rdx, %r14
    00000217: 	jmp	.Ltmp146 # Offset: 535
.Ltmp136:
    00000219: 	movsd	(%r12), %xmm0
    0000021f: 	movq	%rbx, %rbp
    00000222: 	movq	%r12, %rax
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp151:
    00000228: 	movsd	-0x8(%rbp), %xmm1
    0000022d: 	leaq	-0x8(%rbp), %rdx
    00000231: 	comisd	%xmm0, %xmm1
    00000235: 	ja	.Ltmp147 # Offset: 565
    00000237: 	cmpq	%rax, %rdx
    0000023a: 	jbe	.Ltmp148 # Offset: 570
    00000240: 	comisd	(%rax), %xmm0
    00000244: 	jbe	.Ltmp149 # Offset: 580
    00000246: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp150:
    00000250: 	addq	$0x8, %rax
    00000254: 	comisd	(%rax), %xmm0
    00000258: 	ja	.Ltmp150 # Offset: 600
    0000025a: 	cmpq	%rax, %rdx
    0000025d: 	jbe	.Ltmp148 # Offset: 605
.Ltmp149:
    00000263: 	movsd	(%rax), %xmm2
    00000267: 	movsd	%xmm2, (%rdx)
    0000026b: 	movsd	%xmm1, (%rax)
.Ltmp147:
    0000026f: 	movq	%rdx, %rbp
    00000272: 	jmp	.Ltmp151 # Offset: 626
.Ltmp135:
    00000274: 	movsd	(%rbp), %xmm0
    00000279: 	movq	%r12, %r13
    0000027c: 	movq	%rbp, %rax
    0000027f: 	nop # Size: 1
.Ltmp156:
    00000280: 	comisd	%xmm0, %xmm1
    00000284: 	leaq	-0x8(%r13), %rdx
    00000288: 	ja	.Ltmp152 # Offset: 648
    0000028a: 	cmpq	%rax, %rdx
    0000028d: 	jbe	.Ltmp153 # Offset: 653
    0000028f: 	comisd	(%rax), %xmm0
    00000293: 	jbe	.Ltmp154 # Offset: 659
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp155:
    00000298: 	addq	$0x8, %rax
    0000029c: 	comisd	(%rax), %xmm0
    000002a0: 	ja	.Ltmp155 # Offset: 672
    000002a2: 	cmpq	%rax, %rdx
    000002a5: 	jbe	.Ltmp153 # Offset: 677
.Ltmp154:
    000002a7: 	movsd	(%rax), %xmm2
    000002ab: 	movsd	%xmm2, (%rdx)
    000002af: 	movsd	%xmm1, (%rax)
.Ltmp152:
    000002b3: 	movsd	-0x8(%rdx), %xmm1
    000002b8: 	movq	%rdx, %r13
    000002bb: 	jmp	.Ltmp156 # Offset: 699
.Ltmp153:
    000002bd: 	movq	%r13, %rax
    000002c0: 	subq	%rbp, %rax
    000002c3: 	cmpq	$0x8, %rax
    000002c7: 	jle	.Ltmp157 # Offset: 711
    000002c9: 	movsd	(%rbp), %xmm0
    000002ce: 	movq	%r13, %r14
    000002d1: 	movq	%rbp, %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp162:
    000002d8: 	movsd	-0x8(%r14), %xmm1
    000002de: 	leaq	-0x8(%r14), %rdx
    000002e2: 	comisd	%xmm0, %xmm1
    000002e6: 	ja	.Ltmp158 # Offset: 742
    000002e8: 	cmpq	%rax, %rdx
    000002eb: 	jbe	.Ltmp159 # Offset: 747
    000002ed: 	comisd	(%rax), %xmm0
    000002f1: 	jbe	.Ltmp160 # Offset: 753
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp161:
    000002f8: 	addq	$0x8, %rax
    000002fc: 	comisd	(%rax), %xmm0
    00000300: 	ja	.Ltmp161 # Offset: 768
    00000302: 	cmpq	%rax, %rdx
    00000305: 	jbe	.Ltmp159 # Offset: 773
.Ltmp160:
    00000307: 	movsd	(%rax), %xmm2
    0000030b: 	movsd	%xmm2, (%rdx)
    0000030f: 	movsd	%xmm1, (%rax)
.Ltmp158:
    00000313: 	movq	%rdx, %r14
    00000316: 	jmp	.Ltmp162 # Offset: 790
.Ltmp159:
    00000318: 	movq	%r14, %rax
    0000031b: 	subq	%rbp, %rax
    0000031e: 	cmpq	$0x8, %rax
    00000322: 	jle	.Ltmp163 # Offset: 802
    00000324: 	movq	%r14, %rsi
    00000327: 	movq	%rbp, %rdi
    0000032a: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 810
.Ltmp163:
    0000032f: 	movq	%r13, %rax
    00000332: 	subq	%r14, %rax
    00000335: 	cmpq	$0x8, %rax
    00000339: 	jle	.Ltmp157 # Offset: 825
    0000033b: 	movq	%r13, %rsi
    0000033e: 	movq	%r14, %rdi
    00000341: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 833
.Ltmp157:
    00000346: 	movq	%r12, %rax
    00000349: 	subq	%r13, %rax
    0000034c: 	cmpq	$0x8, %rax
    00000350: 	jle	.Ltmp164 # Offset: 848
    00000356: 	movsd	(%r13), %xmm0
    0000035c: 	movq	%r12, %rbp
    0000035f: 	movq	%r13, %rax
    00000362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp169:
    00000368: 	movsd	-0x8(%rbp), %xmm1
    0000036d: 	leaq	-0x8(%rbp), %rdx
    00000371: 	comisd	%xmm0, %xmm1
    00000375: 	ja	.Ltmp165 # Offset: 885
    00000377: 	cmpq	%rax, %rdx
    0000037a: 	jbe	.Ltmp166 # Offset: 890
    00000380: 	comisd	(%rax), %xmm0
    00000384: 	jbe	.Ltmp167 # Offset: 900
    00000386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp168:
    00000390: 	addq	$0x8, %rax
    00000394: 	comisd	(%rax), %xmm0
    00000398: 	ja	.Ltmp168 # Offset: 920
    0000039a: 	cmpq	%rax, %rdx
    0000039d: 	jbe	.Ltmp166 # Offset: 925
.Ltmp167:
    000003a3: 	movsd	(%rax), %xmm2
    000003a7: 	movsd	%xmm2, (%rdx)
    000003ab: 	movsd	%xmm1, (%rax)
.Ltmp165:
    000003af: 	movq	%rdx, %rbp
    000003b2: 	jmp	.Ltmp169 # Offset: 946
.Ltmp148:
    000003b4: 	movq	%rbp, %rax
    000003b7: 	subq	%r12, %rax
    000003ba: 	cmpq	$0x8, %rax
    000003be: 	jle	.Ltmp170 # Offset: 958
    000003c0: 	movsd	(%r12), %xmm0
    000003c6: 	movq	%rbp, %r13
    000003c9: 	movq	%r12, %rax
    000003cc: 	nopl	(%rax) # Size: 4
.Ltmp175:
    000003d0: 	movsd	-0x8(%r13), %xmm1
    000003d6: 	leaq	-0x8(%r13), %rdx
    000003da: 	comisd	%xmm0, %xmm1
    000003de: 	ja	.Ltmp171 # Offset: 990
    000003e0: 	cmpq	%rax, %rdx
    000003e3: 	jbe	.Ltmp172 # Offset: 995
    000003e5: 	comisd	(%rax), %xmm0
    000003e9: 	jbe	.Ltmp173 # Offset: 1001
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp174:
    000003f0: 	addq	$0x8, %rax
    000003f4: 	comisd	(%rax), %xmm0
    000003f8: 	ja	.Ltmp174 # Offset: 1016
    000003fa: 	cmpq	%rax, %rdx
    000003fd: 	jbe	.Ltmp172 # Offset: 1021
.Ltmp173:
    000003ff: 	movsd	(%rax), %xmm2
    00000403: 	movsd	%xmm2, (%rdx)
    00000407: 	movsd	%xmm1, (%rax)
.Ltmp171:
    0000040b: 	movq	%rdx, %r13
    0000040e: 	jmp	.Ltmp175 # Offset: 1038
.Ltmp172:
    00000410: 	movq	%r13, %rax
    00000413: 	subq	%r12, %rax
    00000416: 	cmpq	$0x8, %rax
    0000041a: 	jle	.Ltmp176 # Offset: 1050
    0000041c: 	movq	%r13, %rsi
    0000041f: 	movq	%r12, %rdi
    00000422: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1058
.Ltmp176:
    00000427: 	movq	%rbp, %rax
    0000042a: 	subq	%r13, %rax
    0000042d: 	cmpq	$0x8, %rax
    00000431: 	jle	.Ltmp170 # Offset: 1073
    00000433: 	movq	%rbp, %rsi
    00000436: 	movq	%r13, %rdi
    00000439: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1081
.Ltmp170:
    0000043e: 	movq	%rbx, %rax
    00000441: 	subq	%rbp, %rax
    00000444: 	cmpq	$0x8, %rax
    00000448: 	jle	.Ltmp129 # Offset: 1096
    0000044e: 	movsd	(%rbp), %xmm0
    00000453: 	movq	%rbx, %r13
    00000456: 	movq	%rbp, %rax
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp181:
    00000460: 	movsd	-0x8(%r13), %xmm1
    00000466: 	leaq	-0x8(%r13), %rdx
    0000046a: 	comisd	%xmm0, %xmm1
    0000046e: 	ja	.Ltmp177 # Offset: 1134
    00000470: 	cmpq	%rax, %rdx
    00000473: 	jbe	.Ltmp178 # Offset: 1139
    00000479: 	comisd	(%rax), %xmm0
    0000047d: 	jbe	.Ltmp179 # Offset: 1149
    0000047f: 	nop # Size: 1
.Ltmp180:
    00000480: 	addq	$0x8, %rax
    00000484: 	comisd	(%rax), %xmm0
    00000488: 	ja	.Ltmp180 # Offset: 1160
    0000048a: 	cmpq	%rax, %rdx
    0000048d: 	jbe	.Ltmp178 # Offset: 1165
.Ltmp179:
    00000493: 	movsd	(%rax), %xmm2
    00000497: 	movsd	%xmm2, (%rdx)
    0000049b: 	movsd	%xmm1, (%rax)
.Ltmp177:
    0000049f: 	movq	%rdx, %r13
    000004a2: 	jmp	.Ltmp181 # Offset: 1186
.Ltmp143:
    000004a4: 	movq	%r14, %rax
    000004a7: 	subq	%r13, %rax
    000004aa: 	cmpq	$0x8, %rax
    000004ae: 	jle	.Ltmp182 # Offset: 1198
    000004b0: 	movsd	(%r13), %xmm0
    000004b6: 	movq	%r14, %r15
    000004b9: 	movq	%r13, %rax
    000004bc: 	nopl	(%rax) # Size: 4
.Ltmp187:
    000004c0: 	movsd	-0x8(%r15), %xmm1
    000004c6: 	leaq	-0x8(%r15), %rdx
    000004ca: 	comisd	%xmm0, %xmm1
    000004ce: 	ja	.Ltmp183 # Offset: 1230
    000004d0: 	cmpq	%rax, %rdx
    000004d3: 	jbe	.Ltmp184 # Offset: 1235
    000004d5: 	comisd	(%rax), %xmm0
    000004d9: 	jbe	.Ltmp185 # Offset: 1241
    000004db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp186:
    000004e0: 	addq	$0x8, %rax
    000004e4: 	comisd	(%rax), %xmm0
    000004e8: 	ja	.Ltmp186 # Offset: 1256
    000004ea: 	cmpq	%rax, %rdx
    000004ed: 	jbe	.Ltmp184 # Offset: 1261
.Ltmp185:
    000004ef: 	movsd	(%rax), %xmm2
    000004f3: 	movsd	%xmm2, (%rdx)
    000004f7: 	movsd	%xmm1, (%rax)
.Ltmp183:
    000004fb: 	movq	%rdx, %r15
    000004fe: 	jmp	.Ltmp187 # Offset: 1278
.Ltmp184:
    00000500: 	movq	%r15, %rax
    00000503: 	subq	%r13, %rax
    00000506: 	cmpq	$0x8, %rax
    0000050a: 	jle	.Ltmp188 # Offset: 1290
    0000050c: 	movq	%r15, %rsi
    0000050f: 	movq	%r13, %rdi
    00000512: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1298
.Ltmp188:
    00000517: 	movq	%r14, %rax
    0000051a: 	subq	%r15, %rax
    0000051d: 	cmpq	$0x8, %rax
    00000521: 	jle	.Ltmp182 # Offset: 1313
    00000523: 	movq	%r14, %rsi
    00000526: 	movq	%r15, %rdi
    00000529: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1321
.Ltmp182:
    0000052e: 	movq	%r12, %rax
    00000531: 	subq	%r14, %rax
    00000534: 	cmpq	$0x8, %rax
    00000538: 	jle	.Ltmp189 # Offset: 1336
    0000053e: 	movsd	(%r14), %xmm0
    00000543: 	movq	%r12, %r13
    00000546: 	movq	%r14, %rax
    00000549: 	nopl	(%rax) # Size: 7
.Ltmp194:
    00000550: 	movsd	-0x8(%r13), %xmm1
    00000556: 	leaq	-0x8(%r13), %rdx
    0000055a: 	comisd	%xmm0, %xmm1
    0000055e: 	ja	.Ltmp190 # Offset: 1374
    00000560: 	cmpq	%rax, %rdx
    00000563: 	jbe	.Ltmp191 # Offset: 1379
    00000569: 	comisd	(%rax), %xmm0
    0000056d: 	jbe	.Ltmp192 # Offset: 1389
    0000056f: 	nop # Size: 1
.Ltmp193:
    00000570: 	addq	$0x8, %rax
    00000574: 	comisd	(%rax), %xmm0
    00000578: 	ja	.Ltmp193 # Offset: 1400
    0000057a: 	cmpq	%rax, %rdx
    0000057d: 	jbe	.Ltmp191 # Offset: 1405
.Ltmp192:
    00000583: 	movsd	(%rax), %xmm2
    00000587: 	movsd	%xmm2, (%rdx)
    0000058b: 	movsd	%xmm1, (%rax)
.Ltmp190:
    0000058f: 	movq	%rdx, %r13
    00000592: 	jmp	.Ltmp194 # Offset: 1426
.Ltmp138:
    00000594: 	movq	%r13, %rax
    00000597: 	subq	%r12, %rax
    0000059a: 	cmpq	$0x8, %rax
    0000059e: 	jle	.Ltmp195 # Offset: 1438
    000005a0: 	movsd	(%r12), %xmm0
    000005a6: 	movq	%r13, %r14
    000005a9: 	movq	%r12, %rax
    000005ac: 	nopl	(%rax) # Size: 4
.Ltmp200:
    000005b0: 	movsd	-0x8(%r14), %xmm1
    000005b6: 	leaq	-0x8(%r14), %rdx
    000005ba: 	comisd	%xmm0, %xmm1
    000005be: 	ja	.Ltmp196 # Offset: 1470
    000005c0: 	cmpq	%rax, %rdx
    000005c3: 	jbe	.Ltmp197 # Offset: 1475
    000005c5: 	comisd	(%rax), %xmm0
    000005c9: 	jbe	.Ltmp198 # Offset: 1481
    000005cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp199:
    000005d0: 	addq	$0x8, %rax
    000005d4: 	comisd	(%rax), %xmm0
    000005d8: 	ja	.Ltmp199 # Offset: 1496
    000005da: 	cmpq	%rax, %rdx
    000005dd: 	jbe	.Ltmp197 # Offset: 1501
.Ltmp198:
    000005df: 	movsd	(%rax), %xmm2
    000005e3: 	movsd	%xmm2, (%rdx)
    000005e7: 	movsd	%xmm1, (%rax)
.Ltmp196:
    000005eb: 	movq	%rdx, %r14
    000005ee: 	jmp	.Ltmp200 # Offset: 1518
.Ltmp197:
    000005f0: 	movq	%r14, %rax
    000005f3: 	subq	%r12, %rax
    000005f6: 	cmpq	$0x8, %rax
    000005fa: 	jle	.Ltmp201 # Offset: 1530
    000005fc: 	movq	%r14, %rsi
    000005ff: 	movq	%r12, %rdi
    00000602: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1538
.Ltmp201:
    00000607: 	movq	%r13, %rax
    0000060a: 	subq	%r14, %rax
    0000060d: 	cmpq	$0x8, %rax
    00000611: 	jle	.Ltmp195 # Offset: 1553
    00000613: 	movq	%r13, %rsi
    00000616: 	movq	%r14, %rdi
    00000619: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1561
.Ltmp195:
    0000061e: 	movq	%rbp, %rax
    00000621: 	subq	%r13, %rax
    00000624: 	cmpq	$0x8, %rax
    00000628: 	jle	.Ltmp121 # Offset: 1576
    0000062e: 	movsd	(%r13), %xmm0
    00000634: 	movq	%rbp, %r12
    00000637: 	movq	%r13, %rax
    0000063a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp206:
    00000640: 	movsd	-0x8(%r12), %xmm1
    00000647: 	leaq	-0x8(%r12), %rdx
    0000064c: 	comisd	%xmm0, %xmm1
    00000650: 	ja	.Ltmp202 # Offset: 1616
    00000652: 	cmpq	%rax, %rdx
    00000655: 	jbe	.Ltmp203 # Offset: 1621
    0000065b: 	comisd	(%rax), %xmm0
    0000065f: 	jbe	.Ltmp204 # Offset: 1631
    00000661: 	nopl	(%rax) # Size: 7
.Ltmp205:
    00000668: 	addq	$0x8, %rax
    0000066c: 	comisd	(%rax), %xmm0
    00000670: 	ja	.Ltmp205 # Offset: 1648
    00000672: 	cmpq	%rax, %rdx
    00000675: 	jbe	.Ltmp203 # Offset: 1653
.Ltmp204:
    0000067b: 	movsd	(%rax), %xmm2
    0000067f: 	movsd	%xmm2, (%rdx)
    00000683: 	movsd	%xmm1, (%rax)
.Ltmp202:
    00000687: 	movq	%rdx, %r12
    0000068a: 	jmp	.Ltmp206 # Offset: 1674
.Ltmp166:
    0000068c: 	movq	%rbp, %rax
    0000068f: 	subq	%r13, %rax
    00000692: 	cmpq	$0x8, %rax
    00000696: 	jle	.Ltmp207 # Offset: 1686
    00000698: 	movq	%rbp, %rsi
    0000069b: 	movq	%r13, %rdi
    0000069e: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1694
.Ltmp207:
    000006a3: 	movq	%r12, %rax
    000006a6: 	subq	%rbp, %rax
    000006a9: 	cmpq	$0x8, %rax
    000006ad: 	jle	.Ltmp164 # Offset: 1709
    000006b3: 	movq	%r12, %rsi
    000006b6: 	movq	%rbp, %rdi
    000006b9: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1721
    000006be: 	jmp	.Ltmp164 # Offset: 1726
.Ltmp178:
    000006c3: 	movq	%r13, %rax
    000006c6: 	subq	%rbp, %rax
    000006c9: 	cmpq	$0x8, %rax
    000006cd: 	jle	.Ltmp208 # Offset: 1741
    000006cf: 	movq	%r13, %rsi
    000006d2: 	movq	%rbp, %rdi
    000006d5: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1749
.Ltmp208:
    000006da: 	movq	%rbx, %rax
    000006dd: 	subq	%r13, %rax
    000006e0: 	cmpq	$0x8, %rax
    000006e4: 	jg	.Ltmp209 # Offset: 1764
    000006ea: 	jmp	.Ltmp129 # Offset: 1770
.Ltmp191:
    000006ef: 	movq	%r13, %rax
    000006f2: 	subq	%r14, %rax
    000006f5: 	cmpq	$0x8, %rax
    000006f9: 	jle	.Ltmp210 # Offset: 1785
    000006fb: 	movq	%r13, %rsi
    000006fe: 	movq	%r14, %rdi
    00000701: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1793
.Ltmp210:
    00000706: 	movq	%r12, %rax
    00000709: 	subq	%r13, %rax
    0000070c: 	cmpq	$0x8, %rax
    00000710: 	jle	.Ltmp189 # Offset: 1808
    00000716: 	movq	%r12, %rsi
    00000719: 	movq	%r13, %rdi
    0000071c: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1820
    00000721: 	jmp	.Ltmp189 # Offset: 1825
.Ltmp203:
    00000726: 	movq	%r12, %rax
    00000729: 	subq	%r13, %rax
    0000072c: 	cmpq	$0x8, %rax
    00000730: 	jle	.Ltmp211 # Offset: 1840
    00000732: 	movq	%r12, %rsi
    00000735: 	movq	%r13, %rdi
    00000738: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1848
.Ltmp211:
    0000073d: 	movq	%rbp, %rax
    00000740: 	subq	%r12, %rax
    00000743: 	cmpq	$0x8, %rax
    00000747: 	jle	.Ltmp121 # Offset: 1863
    0000074d: 	movq	%rbp, %rsi
    00000750: 	movq	%r12, %rdi
    00000753: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 1875
    00000758: 	jmp	.Ltmp121 # Offset: 1880
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/stepanov_abstraction.cpp/1
  Number      : 49
  State       : disassembled
  Address     : 0x3250
  Size        : 0x65d
  MaxSize     : 0x660
  Offset      : 0x3250
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp305:
    00000014: 	movl	(%r12), %edx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp216:
    00000020: 	movl	-0x4(%rbp), %ecx
    00000023: 	leaq	-0x4(%rbp), %rsi
    00000027: 	cmpl	%ecx, %edx
    00000029: 	jl	.Ltmp212 # Offset: 41
    0000002b: 	cmpq	%rax, %rsi
    0000002e: 	jbe	.Ltmp213 # Offset: 46
    00000030: 	cmpl	(%rax), %edx
    00000032: 	jle	.Ltmp214 # Offset: 50
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp215:
    00000038: 	addq	$0x4, %rax
    0000003c: 	cmpl	(%rax), %edx
    0000003e: 	jg	.Ltmp215 # Offset: 62
    00000040: 	cmpq	%rax, %rsi
    00000043: 	jbe	.Ltmp213 # Offset: 67
.Ltmp214:
    00000045: 	movl	(%rax), %edi
    00000047: 	movl	%edi, (%rsi)
    00000049: 	movl	%ecx, (%rax)
.Ltmp212:
    0000004b: 	movq	%rsi, %rbp
    0000004e: 	jmp	.Ltmp216 # Offset: 78
.Ltmp213:
    00000050: 	movq	%rbp, %rax
    00000053: 	subq	%r12, %rax
    00000056: 	cmpq	$0x4, %rax
    0000005a: 	jle	.Ltmp217 # Offset: 90
    0000005c: 	movl	(%r12), %edx
    00000060: 	movq	%rbp, %r13
    00000063: 	movq	%r12, %rax
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp222:
    00000070: 	leaq	-0x4(%r13), %rsi
    00000074: 	cmpl	%ecx, %edx
    00000076: 	jl	.Ltmp218 # Offset: 118
    00000078: 	cmpq	%rax, %rsi
    0000007b: 	jbe	.Ltmp219 # Offset: 123
    0000007d: 	cmpl	(%rax), %edx
    0000007f: 	jle	.Ltmp220 # Offset: 127
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp221:
    00000088: 	addq	$0x4, %rax
    0000008c: 	cmpl	(%rax), %edx
    0000008e: 	jg	.Ltmp221 # Offset: 142
    00000090: 	cmpq	%rax, %rsi
    00000093: 	jbe	.Ltmp219 # Offset: 147
.Ltmp220:
    00000095: 	movl	(%rax), %edi
    00000097: 	movl	%edi, (%rsi)
    00000099: 	movl	%ecx, (%rax)
.Ltmp218:
    0000009b: 	movl	-0x4(%rsi), %ecx
    0000009e: 	movq	%rsi, %r13
    000000a1: 	jmp	.Ltmp222 # Offset: 161
.Ltmp219:
    000000a3: 	movq	%r13, %rax
    000000a6: 	subq	%r12, %rax
    000000a9: 	cmpq	$0x4, %rax
    000000ad: 	jg	.Ltmp223 # Offset: 173
.Ltmp285:
    000000b3: 	movq	%rbp, %rax
    000000b6: 	subq	%r13, %rax
    000000b9: 	cmpq	$0x4, %rax
    000000bd: 	jg	.Ltmp224 # Offset: 189
.Ltmp217:
    000000bf: 	movq	%rbx, %rax
    000000c2: 	subq	%rbp, %rax
    000000c5: 	cmpq	$0x4, %rax
    000000c9: 	jle	.Ltmp225 # Offset: 201
    000000cb: 	movl	(%rbp), %edx
    000000ce: 	movq	%rbx, %r12
    000000d1: 	movq	%rbp, %rax
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp230:
    000000d8: 	movl	-0x4(%r12), %ecx
    000000dd: 	leaq	-0x4(%r12), %rsi
    000000e2: 	cmpl	%ecx, %edx
    000000e4: 	jl	.Ltmp226 # Offset: 228
    000000e6: 	cmpq	%rax, %rsi
    000000e9: 	jbe	.Ltmp227 # Offset: 233
    000000eb: 	cmpl	(%rax), %edx
    000000ed: 	jle	.Ltmp228 # Offset: 237
    000000ef: 	nop # Size: 1
.Ltmp229:
    000000f0: 	addq	$0x4, %rax
    000000f4: 	cmpl	(%rax), %edx
    000000f6: 	jg	.Ltmp229 # Offset: 246
    000000f8: 	cmpq	%rax, %rsi
    000000fb: 	jbe	.Ltmp227 # Offset: 251
.Ltmp228:
    000000fd: 	movl	(%rax), %edi
    000000ff: 	movl	%edi, (%rsi)
    00000101: 	movl	%ecx, (%rax)
.Ltmp226:
    00000103: 	movq	%rsi, %r12
    00000106: 	jmp	.Ltmp230 # Offset: 262
.Ltmp227:
    00000108: 	movq	%r12, %rax
    0000010b: 	subq	%rbp, %rax
    0000010e: 	cmpq	$0x4, %rax
    00000112: 	jg	.Ltmp231 # Offset: 274
.Ltmp260:
    00000118: 	movq	%rbx, %rax
    0000011b: 	subq	%r12, %rax
    0000011e: 	cmpq	$0x4, %rax
    00000122: 	jg	.Ltmp232 # Offset: 290
.Ltmp225:
    00000128: 	addq	$0x8, %rsp
    0000012c: 	popq	%rbx
    0000012d: 	popq	%rbp
    0000012e: 	popq	%r12
    00000130: 	popq	%r13
    00000132: 	popq	%r14
    00000134: 	popq	%r15
    00000136: 	retq # Offset: 310
.Ltmp224:
    00000137: 	movl	(%r13), %edx
    0000013b: 	movq	%rbp, %r12
    0000013e: 	movq	%r13, %rax
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp237:
    00000148: 	movl	-0x4(%r12), %esi
    0000014d: 	leaq	-0x4(%r12), %rcx
    00000152: 	cmpl	%esi, %edx
    00000154: 	jl	.Ltmp233 # Offset: 340
    00000156: 	cmpq	%rax, %rcx
    00000159: 	jbe	.Ltmp234 # Offset: 345
    0000015f: 	cmpl	(%rax), %edx
    00000161: 	jle	.Ltmp235 # Offset: 353
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp236:
    00000168: 	addq	$0x4, %rax
    0000016c: 	cmpl	(%rax), %edx
    0000016e: 	jg	.Ltmp236 # Offset: 366
    00000170: 	cmpq	%rax, %rcx
    00000173: 	jbe	.Ltmp234 # Offset: 371
.Ltmp235:
    00000179: 	movl	(%rax), %edi
    0000017b: 	movl	%edi, (%rcx)
    0000017d: 	movl	%esi, (%rax)
.Ltmp233:
    0000017f: 	movq	%rcx, %r12
    00000182: 	jmp	.Ltmp237 # Offset: 386
.Ltmp223:
    00000184: 	movl	(%r12), %edx
    00000188: 	movq	%r13, %r14
    0000018b: 	movq	%r12, %rax
    0000018e: 	nop # Size: 2
.Ltmp242:
    00000190: 	leaq	-0x4(%r14), %rsi
    00000194: 	cmpl	%ecx, %edx
    00000196: 	jl	.Ltmp238 # Offset: 406
    00000198: 	cmpq	%rax, %rsi
    0000019b: 	jbe	.Ltmp239 # Offset: 411
    000001a1: 	cmpl	%edx, (%rax)
    000001a3: 	jge	.Ltmp240 # Offset: 419
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp241:
    000001a8: 	addq	$0x4, %rax
    000001ac: 	cmpl	(%rax), %edx
    000001ae: 	jg	.Ltmp241 # Offset: 430
    000001b0: 	cmpq	%rax, %rsi
    000001b3: 	jbe	.Ltmp239 # Offset: 435
.Ltmp240:
    000001b9: 	movl	(%rax), %edi
    000001bb: 	movl	%edi, (%rsi)
    000001bd: 	movl	%ecx, (%rax)
.Ltmp238:
    000001bf: 	movl	-0x4(%rsi), %ecx
    000001c2: 	movq	%rsi, %r14
    000001c5: 	jmp	.Ltmp242 # Offset: 453
.Ltmp232:
    000001c7: 	movl	(%r12), %edx
    000001cb: 	movq	%rbx, %rbp
    000001ce: 	movq	%r12, %rax
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp247:
    000001d8: 	movl	-0x4(%rbp), %esi
    000001db: 	leaq	-0x4(%rbp), %rcx
    000001df: 	cmpl	%esi, %edx
    000001e1: 	jl	.Ltmp243 # Offset: 481
    000001e3: 	cmpq	%rax, %rcx
    000001e6: 	jbe	.Ltmp244 # Offset: 486
    000001ec: 	cmpl	%edx, (%rax)
    000001ee: 	jge	.Ltmp245 # Offset: 494
.Ltmp246:
    000001f0: 	addq	$0x4, %rax
    000001f4: 	cmpl	(%rax), %edx
    000001f6: 	jg	.Ltmp246 # Offset: 502
    000001f8: 	cmpq	%rax, %rcx
    000001fb: 	jbe	.Ltmp244 # Offset: 507
.Ltmp245:
    00000201: 	movl	(%rax), %edi
    00000203: 	movl	%edi, (%rcx)
    00000205: 	movl	%esi, (%rax)
.Ltmp243:
    00000207: 	movq	%rcx, %rbp
    0000020a: 	jmp	.Ltmp247 # Offset: 522
.Ltmp231:
    0000020c: 	movl	(%rbp), %edx
    0000020f: 	movq	%r12, %r13
    00000212: 	movq	%rbp, %rax
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp252:
    00000218: 	leaq	-0x4(%r13), %rsi
    0000021c: 	cmpl	%ecx, %edx
    0000021e: 	jl	.Ltmp248 # Offset: 542
    00000220: 	cmpq	%rax, %rsi
    00000223: 	jbe	.Ltmp249 # Offset: 547
    00000225: 	cmpl	(%rax), %edx
    00000227: 	jle	.Ltmp250 # Offset: 551
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp251:
    00000230: 	addq	$0x4, %rax
    00000234: 	cmpl	(%rax), %edx
    00000236: 	jg	.Ltmp251 # Offset: 566
    00000238: 	cmpq	%rax, %rsi
    0000023b: 	jbe	.Ltmp249 # Offset: 571
.Ltmp250:
    0000023d: 	movl	(%rax), %edi
    0000023f: 	movl	%edi, (%rsi)
    00000241: 	movl	%ecx, (%rax)
.Ltmp248:
    00000243: 	movl	-0x4(%rsi), %ecx
    00000246: 	movq	%rsi, %r13
    00000249: 	jmp	.Ltmp252 # Offset: 585
.Ltmp249:
    0000024b: 	movq	%r13, %rax
    0000024e: 	subq	%rbp, %rax
    00000251: 	cmpq	$0x4, %rax
    00000255: 	jle	.Ltmp253 # Offset: 597
    00000257: 	movl	(%rbp), %edx
    0000025a: 	movq	%r13, %r14
    0000025d: 	movq	%rbp, %rax
.Ltmp258:
    00000260: 	movl	-0x4(%r14), %esi
    00000264: 	leaq	-0x4(%r14), %rcx
    00000268: 	cmpl	%esi, %edx
    0000026a: 	jl	.Ltmp254 # Offset: 618
    0000026c: 	cmpq	%rax, %rcx
    0000026f: 	jbe	.Ltmp255 # Offset: 623
    00000271: 	cmpl	(%rax), %edx
    00000273: 	jle	.Ltmp256 # Offset: 627
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp257:
    00000278: 	addq	$0x4, %rax
    0000027c: 	cmpl	(%rax), %edx
    0000027e: 	jg	.Ltmp257 # Offset: 638
    00000280: 	cmpq	%rax, %rcx
    00000283: 	jbe	.Ltmp255 # Offset: 643
.Ltmp256:
    00000285: 	movl	(%rax), %edi
    00000287: 	movl	%edi, (%rcx)
    00000289: 	movl	%esi, (%rax)
.Ltmp254:
    0000028b: 	movq	%rcx, %r14
    0000028e: 	jmp	.Ltmp258 # Offset: 654
.Ltmp255:
    00000290: 	movq	%r14, %rax
    00000293: 	subq	%rbp, %rax
    00000296: 	cmpq	$0x4, %rax
    0000029a: 	jle	.Ltmp259 # Offset: 666
    0000029c: 	movq	%r14, %rsi
    0000029f: 	movq	%rbp, %rdi
    000002a2: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 674
.Ltmp259:
    000002a7: 	movq	%r13, %rax
    000002aa: 	subq	%r14, %rax
    000002ad: 	cmpq	$0x4, %rax
    000002b1: 	jle	.Ltmp253 # Offset: 689
    000002b3: 	movq	%r13, %rsi
    000002b6: 	movq	%r14, %rdi
    000002b9: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 697
.Ltmp253:
    000002be: 	movq	%r12, %rax
    000002c1: 	subq	%r13, %rax
    000002c4: 	cmpq	$0x4, %rax
    000002c8: 	jle	.Ltmp260 # Offset: 712
    000002ce: 	movl	(%r13), %edx
    000002d2: 	movq	%r12, %rbp
    000002d5: 	movq	%r13, %rax
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp265:
    000002e0: 	movl	-0x4(%rbp), %esi
    000002e3: 	leaq	-0x4(%rbp), %rcx
    000002e7: 	cmpl	%esi, %edx
    000002e9: 	jl	.Ltmp261 # Offset: 745
    000002eb: 	cmpq	%rax, %rcx
    000002ee: 	jbe	.Ltmp262 # Offset: 750
    000002f4: 	cmpl	%edx, (%rax)
    000002f6: 	jge	.Ltmp263 # Offset: 758
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp264:
    00000300: 	addq	$0x4, %rax
    00000304: 	cmpl	(%rax), %edx
    00000306: 	jg	.Ltmp264 # Offset: 774
    00000308: 	cmpq	%rax, %rcx
    0000030b: 	jbe	.Ltmp262 # Offset: 779
.Ltmp263:
    00000311: 	movl	(%rax), %edi
    00000313: 	movl	%edi, (%rcx)
    00000315: 	movl	%esi, (%rax)
.Ltmp261:
    00000317: 	movq	%rcx, %rbp
    0000031a: 	jmp	.Ltmp265 # Offset: 794
.Ltmp244:
    0000031c: 	movq	%rbp, %rax
    0000031f: 	subq	%r12, %rax
    00000322: 	cmpq	$0x4, %rax
    00000326: 	jle	.Ltmp266 # Offset: 806
    00000328: 	movl	(%r12), %edx
    0000032c: 	movq	%rbp, %r13
    0000032f: 	movq	%r12, %rax
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp271:
    00000338: 	movl	-0x4(%r13), %esi
    0000033c: 	leaq	-0x4(%r13), %rcx
    00000340: 	cmpl	%esi, %edx
    00000342: 	jl	.Ltmp267 # Offset: 834
    00000344: 	cmpq	%rax, %rcx
    00000347: 	jbe	.Ltmp268 # Offset: 839
    00000349: 	cmpl	%edx, (%rax)
    0000034b: 	jge	.Ltmp269 # Offset: 843
    0000034d: 	nopl	(%rax) # Size: 3
.Ltmp270:
    00000350: 	addq	$0x4, %rax
    00000354: 	cmpl	(%rax), %edx
    00000356: 	jg	.Ltmp270 # Offset: 854
    00000358: 	cmpq	%rax, %rcx
    0000035b: 	jbe	.Ltmp268 # Offset: 859
.Ltmp269:
    0000035d: 	movl	(%rax), %edi
    0000035f: 	movl	%edi, (%rcx)
    00000361: 	movl	%esi, (%rax)
.Ltmp267:
    00000363: 	movq	%rcx, %r13
    00000366: 	jmp	.Ltmp271 # Offset: 870
.Ltmp268:
    00000368: 	movq	%r13, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x4, %rax
    00000372: 	jle	.Ltmp272 # Offset: 882
    00000374: 	movq	%r13, %rsi
    00000377: 	movq	%r12, %rdi
    0000037a: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 890
.Ltmp272:
    0000037f: 	movq	%rbp, %rax
    00000382: 	subq	%r13, %rax
    00000385: 	cmpq	$0x4, %rax
    00000389: 	jle	.Ltmp266 # Offset: 905
    0000038b: 	movq	%rbp, %rsi
    0000038e: 	movq	%r13, %rdi
    00000391: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 913
.Ltmp266:
    00000396: 	movq	%rbx, %rax
    00000399: 	subq	%rbp, %rax
    0000039c: 	cmpq	$0x4, %rax
    000003a0: 	jle	.Ltmp225 # Offset: 928
    000003a6: 	movl	(%rbp), %edx
    000003a9: 	movq	%rbx, %r12
    000003ac: 	movq	%rbp, %rax
    000003af: 	nop # Size: 1
.Ltmp277:
    000003b0: 	movl	-0x4(%r12), %esi
    000003b5: 	leaq	-0x4(%r12), %rcx
    000003ba: 	cmpl	%esi, %edx
    000003bc: 	jl	.Ltmp273 # Offset: 956
    000003be: 	cmpq	%rax, %rcx
    000003c1: 	jbe	.Ltmp274 # Offset: 961
    000003c7: 	cmpl	(%rax), %edx
    000003c9: 	jle	.Ltmp275 # Offset: 969
    000003cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp276:
    000003d0: 	addq	$0x4, %rax
    000003d4: 	cmpl	(%rax), %edx
    000003d6: 	jg	.Ltmp276 # Offset: 982
    000003d8: 	cmpq	%rax, %rcx
    000003db: 	jbe	.Ltmp274 # Offset: 987
.Ltmp275:
    000003e1: 	movl	(%rax), %edi
    000003e3: 	movl	%edi, (%rcx)
    000003e5: 	movl	%esi, (%rax)
.Ltmp273:
    000003e7: 	movq	%rcx, %r12
    000003ea: 	jmp	.Ltmp277 # Offset: 1002
.Ltmp239:
    000003ec: 	movq	%r14, %rax
    000003ef: 	subq	%r12, %rax
    000003f2: 	cmpq	$0x4, %rax
    000003f6: 	jle	.Ltmp278 # Offset: 1014
    000003f8: 	movl	(%r12), %edx
    000003fc: 	movq	%r14, %r15
    000003ff: 	movq	%r12, %rax
    00000402: 	nopw	(%rax,%rax) # Size: 6
.Ltmp283:
    00000408: 	movl	-0x4(%r15), %esi
    0000040c: 	leaq	-0x4(%r15), %rcx
    00000410: 	cmpl	%esi, %edx
    00000412: 	jl	.Ltmp279 # Offset: 1042
    00000414: 	cmpq	%rax, %rcx
    00000417: 	jbe	.Ltmp280 # Offset: 1047
    00000419: 	cmpl	(%rax), %edx
    0000041b: 	jle	.Ltmp281 # Offset: 1051
    0000041d: 	nopl	(%rax) # Size: 3
.Ltmp282:
    00000420: 	addq	$0x4, %rax
    00000424: 	cmpl	(%rax), %edx
    00000426: 	jg	.Ltmp282 # Offset: 1062
    00000428: 	cmpq	%rax, %rcx
    0000042b: 	jbe	.Ltmp280 # Offset: 1067
.Ltmp281:
    0000042d: 	movl	(%rax), %edi
    0000042f: 	movl	%edi, (%rcx)
    00000431: 	movl	%esi, (%rax)
.Ltmp279:
    00000433: 	movq	%rcx, %r15
    00000436: 	jmp	.Ltmp283 # Offset: 1078
.Ltmp280:
    00000438: 	movq	%r15, %rax
    0000043b: 	subq	%r12, %rax
    0000043e: 	cmpq	$0x4, %rax
    00000442: 	jle	.Ltmp284 # Offset: 1090
    00000444: 	movq	%r15, %rsi
    00000447: 	movq	%r12, %rdi
    0000044a: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1098
.Ltmp284:
    0000044f: 	movq	%r14, %rax
    00000452: 	subq	%r15, %rax
    00000455: 	cmpq	$0x4, %rax
    00000459: 	jle	.Ltmp278 # Offset: 1113
    0000045b: 	movq	%r14, %rsi
    0000045e: 	movq	%r15, %rdi
    00000461: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1121
.Ltmp278:
    00000466: 	movq	%r13, %rax
    00000469: 	subq	%r14, %rax
    0000046c: 	cmpq	$0x4, %rax
    00000470: 	jle	.Ltmp285 # Offset: 1136
    00000476: 	movl	(%r14), %edx
    00000479: 	movq	%r13, %r12
    0000047c: 	movq	%r14, %rax
    0000047f: 	nop # Size: 1
.Ltmp290:
    00000480: 	movl	-0x4(%r12), %esi
    00000485: 	leaq	-0x4(%r12), %rcx
    0000048a: 	cmpl	%esi, %edx
    0000048c: 	jl	.Ltmp286 # Offset: 1164
    0000048e: 	cmpq	%rax, %rcx
    00000491: 	jbe	.Ltmp287 # Offset: 1169
    00000497: 	cmpl	(%rax), %edx
    00000499: 	jle	.Ltmp288 # Offset: 1177
    0000049b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp289:
    000004a0: 	addq	$0x4, %rax
    000004a4: 	cmpl	(%rax), %edx
    000004a6: 	jg	.Ltmp289 # Offset: 1190
    000004a8: 	cmpq	%rax, %rcx
    000004ab: 	jbe	.Ltmp287 # Offset: 1195
.Ltmp288:
    000004b1: 	movl	(%rax), %edi
    000004b3: 	movl	%edi, (%rcx)
    000004b5: 	movl	%esi, (%rax)
.Ltmp286:
    000004b7: 	movq	%rcx, %r12
    000004ba: 	jmp	.Ltmp290 # Offset: 1210
.Ltmp234:
    000004bc: 	movq	%r12, %rax
    000004bf: 	subq	%r13, %rax
    000004c2: 	cmpq	$0x4, %rax
    000004c6: 	jle	.Ltmp291 # Offset: 1222
    000004c8: 	movl	(%r13), %edx
    000004cc: 	movq	%r12, %r14
    000004cf: 	movq	%r13, %rax
    000004d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp296:
    000004d8: 	movl	-0x4(%r14), %esi
    000004dc: 	leaq	-0x4(%r14), %rcx
    000004e0: 	cmpl	%esi, %edx
    000004e2: 	jl	.Ltmp292 # Offset: 1250
    000004e4: 	cmpq	%rax, %rcx
    000004e7: 	jbe	.Ltmp293 # Offset: 1255
    000004e9: 	cmpl	(%rax), %edx
    000004eb: 	jle	.Ltmp294 # Offset: 1259
    000004ed: 	nopl	(%rax) # Size: 3
.Ltmp295:
    000004f0: 	addq	$0x4, %rax
    000004f4: 	cmpl	(%rax), %edx
    000004f6: 	jg	.Ltmp295 # Offset: 1270
    000004f8: 	cmpq	%rax, %rcx
    000004fb: 	jbe	.Ltmp293 # Offset: 1275
.Ltmp294:
    000004fd: 	movl	(%rax), %edi
    000004ff: 	movl	%edi, (%rcx)
    00000501: 	movl	%esi, (%rax)
.Ltmp292:
    00000503: 	movq	%rcx, %r14
    00000506: 	jmp	.Ltmp296 # Offset: 1286
.Ltmp293:
    00000508: 	movq	%r14, %rax
    0000050b: 	subq	%r13, %rax
    0000050e: 	cmpq	$0x4, %rax
    00000512: 	jle	.Ltmp297 # Offset: 1298
    00000514: 	movq	%r14, %rsi
    00000517: 	movq	%r13, %rdi
    0000051a: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1306
.Ltmp297:
    0000051f: 	movq	%r12, %rax
    00000522: 	subq	%r14, %rax
    00000525: 	cmpq	$0x4, %rax
    00000529: 	jle	.Ltmp291 # Offset: 1321
    0000052b: 	movq	%r12, %rsi
    0000052e: 	movq	%r14, %rdi
    00000531: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1329
.Ltmp291:
    00000536: 	movq	%rbp, %rax
    00000539: 	subq	%r12, %rax
    0000053c: 	cmpq	$0x4, %rax
    00000540: 	jle	.Ltmp217 # Offset: 1344
    00000546: 	movl	(%r12), %edx
    0000054a: 	movq	%rbp, %r13
    0000054d: 	movq	%r12, %rax
.Ltmp302:
    00000550: 	movl	-0x4(%r13), %esi
    00000554: 	leaq	-0x4(%r13), %rcx
    00000558: 	cmpl	%esi, %edx
    0000055a: 	jl	.Ltmp298 # Offset: 1370
    0000055c: 	cmpq	%rax, %rcx
    0000055f: 	jbe	.Ltmp299 # Offset: 1375
    00000565: 	cmpl	(%rax), %edx
    00000567: 	jle	.Ltmp300 # Offset: 1383
    00000569: 	nopl	(%rax) # Size: 7
.Ltmp301:
    00000570: 	addq	$0x4, %rax
    00000574: 	cmpl	(%rax), %edx
    00000576: 	jg	.Ltmp301 # Offset: 1398
    00000578: 	cmpq	%rax, %rcx
    0000057b: 	jbe	.Ltmp299 # Offset: 1403
.Ltmp300:
    00000581: 	movl	(%rax), %edi
    00000583: 	movl	%edi, (%rcx)
    00000585: 	movl	%esi, (%rax)
.Ltmp298:
    00000587: 	movq	%rcx, %r13
    0000058a: 	jmp	.Ltmp302 # Offset: 1418
.Ltmp262:
    0000058c: 	movq	%rbp, %rax
    0000058f: 	subq	%r13, %rax
    00000592: 	cmpq	$0x4, %rax
    00000596: 	jle	.Ltmp303 # Offset: 1430
    00000598: 	movq	%rbp, %rsi
    0000059b: 	movq	%r13, %rdi
    0000059e: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1438
.Ltmp303:
    000005a3: 	movq	%r12, %rax
    000005a6: 	subq	%rbp, %rax
    000005a9: 	cmpq	$0x4, %rax
    000005ad: 	jle	.Ltmp260 # Offset: 1453
    000005b3: 	movq	%r12, %rsi
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1465
    000005be: 	jmp	.Ltmp260 # Offset: 1470
.Ltmp274:
    000005c3: 	movq	%r12, %rax
    000005c6: 	subq	%rbp, %rax
    000005c9: 	cmpq	$0x4, %rax
    000005cd: 	jle	.Ltmp304 # Offset: 1485
    000005cf: 	movq	%r12, %rsi
    000005d2: 	movq	%rbp, %rdi
    000005d5: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1493
.Ltmp304:
    000005da: 	movq	%rbx, %rax
    000005dd: 	subq	%r12, %rax
    000005e0: 	cmpq	$0x4, %rax
    000005e4: 	jg	.Ltmp305 # Offset: 1508
    000005ea: 	jmp	.Ltmp225 # Offset: 1514
.Ltmp287:
    000005ef: 	movq	%r12, %rax
    000005f2: 	subq	%r14, %rax
    000005f5: 	cmpq	$0x4, %rax
    000005f9: 	jle	.Ltmp306 # Offset: 1529
    000005fb: 	movq	%r12, %rsi
    000005fe: 	movq	%r14, %rdi
    00000601: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1537
.Ltmp306:
    00000606: 	movq	%r13, %rax
    00000609: 	subq	%r12, %rax
    0000060c: 	cmpq	$0x4, %rax
    00000610: 	jle	.Ltmp285 # Offset: 1552
    00000616: 	movq	%r13, %rsi
    00000619: 	movq	%r12, %rdi
    0000061c: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1564
    00000621: 	jmp	.Ltmp285 # Offset: 1569
.Ltmp299:
    00000626: 	movq	%r13, %rax
    00000629: 	subq	%r12, %rax
    0000062c: 	cmpq	$0x4, %rax
    00000630: 	jle	.Ltmp307 # Offset: 1584
    00000632: 	movq	%r13, %rsi
    00000635: 	movq	%r12, %rdi
    00000638: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1592
.Ltmp307:
    0000063d: 	movq	%rbp, %rax
    00000640: 	subq	%r13, %rax
    00000643: 	cmpq	$0x4, %rax
    00000647: 	jle	.Ltmp217 # Offset: 1607
    0000064d: 	movq	%rbp, %rsi
    00000650: 	movq	%r13, %rdi
    00000653: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 1619
    00000658: 	jmp	.Ltmp217 # Offset: 1624
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/stepanov_abstraction.cpp/1
  Number      : 50
  State       : disassembled
  Address     : 0x38b0
  Size        : 0x6d9
  MaxSize     : 0x6e0
  Offset      : 0x38b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp401:
    00000014: 	movq	(%r12), %rdx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp312:
    00000020: 	movq	-0x8(%rbp), %rcx
    00000024: 	leaq	-0x8(%rbp), %rsi
    00000028: 	cmpq	%rcx, %rdx
    0000002b: 	jb	.Ltmp308 # Offset: 43
    0000002d: 	cmpq	%rax, %rsi
    00000030: 	jbe	.Ltmp309 # Offset: 48
    00000032: 	cmpq	(%rax), %rdx
    00000035: 	jbe	.Ltmp310 # Offset: 53
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp311:
    00000040: 	addq	$0x8, %rax
    00000044: 	cmpq	(%rax), %rdx
    00000047: 	ja	.Ltmp311 # Offset: 71
    00000049: 	cmpq	%rax, %rsi
    0000004c: 	jbe	.Ltmp309 # Offset: 76
.Ltmp310:
    0000004e: 	movq	(%rax), %rdi
    00000051: 	movq	%rdi, (%rsi)
    00000054: 	movq	%rcx, (%rax)
.Ltmp308:
    00000057: 	movq	%rsi, %rbp
    0000005a: 	jmp	.Ltmp312 # Offset: 90
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp309:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r12, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp313 # Offset: 106
    0000006c: 	movq	(%r12), %rdx
    00000070: 	movq	%rbp, %r13
    00000073: 	movq	%r12, %rax
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp318:
    00000080: 	leaq	-0x8(%r13), %rsi
    00000084: 	cmpq	%rcx, %rdx
    00000087: 	jb	.Ltmp314 # Offset: 135
    00000089: 	cmpq	%rax, %rsi
    0000008c: 	jbe	.Ltmp315 # Offset: 140
    0000008e: 	cmpq	(%rax), %rdx
    00000091: 	jbe	.Ltmp316 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp317:
    00000098: 	addq	$0x8, %rax
    0000009c: 	cmpq	(%rax), %rdx
    0000009f: 	ja	.Ltmp317 # Offset: 159
    000000a1: 	cmpq	%rax, %rsi
    000000a4: 	jbe	.Ltmp315 # Offset: 164
.Ltmp316:
    000000a6: 	movq	(%rax), %rdi
    000000a9: 	movq	%rdi, (%rsi)
    000000ac: 	movq	%rcx, (%rax)
.Ltmp314:
    000000af: 	movq	-0x8(%rsi), %rcx
    000000b3: 	movq	%rsi, %r13
    000000b6: 	jmp	.Ltmp318 # Offset: 182
.Ltmp315:
    000000b8: 	movq	%r13, %rax
    000000bb: 	subq	%r12, %rax
    000000be: 	cmpq	$0x8, %rax
    000000c2: 	jg	.Ltmp319 # Offset: 194
.Ltmp381:
    000000c8: 	movq	%rbp, %rax
    000000cb: 	subq	%r13, %rax
    000000ce: 	cmpq	$0x8, %rax
    000000d2: 	jg	.Ltmp320 # Offset: 210
.Ltmp313:
    000000d8: 	movq	%rbx, %rax
    000000db: 	subq	%rbp, %rax
    000000de: 	cmpq	$0x8, %rax
    000000e2: 	jle	.Ltmp321 # Offset: 226
    000000e4: 	movq	(%rbp), %rdx
    000000e8: 	movq	%rbx, %r12
    000000eb: 	movq	%rbp, %rax
    000000ee: 	nop # Size: 2
.Ltmp326:
    000000f0: 	movq	-0x8(%r12), %rcx
    000000f5: 	leaq	-0x8(%r12), %rsi
    000000fa: 	cmpq	%rcx, %rdx
    000000fd: 	jb	.Ltmp322 # Offset: 253
    000000ff: 	cmpq	%rax, %rsi
    00000102: 	jbe	.Ltmp323 # Offset: 258
    00000104: 	cmpq	(%rax), %rdx
    00000107: 	jbe	.Ltmp324 # Offset: 263
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp325:
    00000110: 	addq	$0x8, %rax
    00000114: 	cmpq	(%rax), %rdx
    00000117: 	ja	.Ltmp325 # Offset: 279
    00000119: 	cmpq	%rax, %rsi
    0000011c: 	jbe	.Ltmp323 # Offset: 284
.Ltmp324:
    0000011e: 	movq	(%rax), %rdi
    00000121: 	movq	%rdi, (%rsi)
    00000124: 	movq	%rcx, (%rax)
.Ltmp322:
    00000127: 	movq	%rsi, %r12
    0000012a: 	jmp	.Ltmp326 # Offset: 298
.Ltmp323:
    0000012c: 	movq	%r12, %rax
    0000012f: 	subq	%rbp, %rax
    00000132: 	cmpq	$0x8, %rax
    00000136: 	jg	.Ltmp327 # Offset: 310
.Ltmp356:
    0000013c: 	movq	%rbx, %rax
    0000013f: 	subq	%r12, %rax
    00000142: 	cmpq	$0x8, %rax
    00000146: 	jg	.Ltmp328 # Offset: 326
.Ltmp321:
    0000014c: 	addq	$0x8, %rsp
    00000150: 	popq	%rbx
    00000151: 	popq	%rbp
    00000152: 	popq	%r12
    00000154: 	popq	%r13
    00000156: 	popq	%r14
    00000158: 	popq	%r15
    0000015a: 	retq # Offset: 346
.Ltmp320:
    0000015b: 	movq	(%r13), %rdx
    0000015f: 	movq	%rbp, %r12
    00000162: 	movq	%r13, %rax
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp333:
    00000168: 	movq	-0x8(%r12), %rsi
    0000016d: 	leaq	-0x8(%r12), %rcx
    00000172: 	cmpq	%rsi, %rdx
    00000175: 	jb	.Ltmp329 # Offset: 373
    00000177: 	cmpq	%rax, %rcx
    0000017a: 	jbe	.Ltmp330 # Offset: 378
    00000180: 	cmpq	(%rax), %rdx
    00000183: 	jbe	.Ltmp331 # Offset: 387
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp332:
    00000188: 	addq	$0x8, %rax
    0000018c: 	cmpq	(%rax), %rdx
    0000018f: 	ja	.Ltmp332 # Offset: 399
    00000191: 	cmpq	%rax, %rcx
    00000194: 	jbe	.Ltmp330 # Offset: 404
.Ltmp331:
    0000019a: 	movq	(%rax), %rdi
    0000019d: 	movq	%rdi, (%rcx)
    000001a0: 	movq	%rsi, (%rax)
.Ltmp329:
    000001a3: 	movq	%rcx, %r12
    000001a6: 	jmp	.Ltmp333 # Offset: 422
.Ltmp319:
    000001a8: 	movq	(%r12), %rdx
    000001ac: 	movq	%r13, %r14
    000001af: 	movq	%r12, %rax
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp338:
    000001b8: 	leaq	-0x8(%r14), %rsi
    000001bc: 	cmpq	%rcx, %rdx
    000001bf: 	jb	.Ltmp334 # Offset: 447
    000001c1: 	cmpq	%rax, %rsi
    000001c4: 	jbe	.Ltmp335 # Offset: 452
    000001ca: 	cmpq	%rdx, (%rax)
    000001cd: 	jae	.Ltmp336 # Offset: 461
    000001cf: 	nop # Size: 1
.Ltmp337:
    000001d0: 	addq	$0x8, %rax
    000001d4: 	cmpq	(%rax), %rdx
    000001d7: 	ja	.Ltmp337 # Offset: 471
    000001d9: 	cmpq	%rax, %rsi
    000001dc: 	jbe	.Ltmp335 # Offset: 476
.Ltmp336:
    000001e2: 	movq	(%rax), %rdi
    000001e5: 	movq	%rdi, (%rsi)
    000001e8: 	movq	%rcx, (%rax)
.Ltmp334:
    000001eb: 	movq	-0x8(%rsi), %rcx
    000001ef: 	movq	%rsi, %r14
    000001f2: 	jmp	.Ltmp338 # Offset: 498
.Ltmp328:
    000001f4: 	movq	(%r12), %rdx
    000001f8: 	movq	%rbx, %rbp
    000001fb: 	movq	%r12, %rax
    000001fe: 	nop # Size: 2
.Ltmp343:
    00000200: 	movq	-0x8(%rbp), %rsi
    00000204: 	leaq	-0x8(%rbp), %rcx
    00000208: 	cmpq	%rsi, %rdx
    0000020b: 	jb	.Ltmp339 # Offset: 523
    0000020d: 	cmpq	%rax, %rcx
    00000210: 	jbe	.Ltmp340 # Offset: 528
    00000216: 	cmpq	%rdx, (%rax)
    00000219: 	jae	.Ltmp341 # Offset: 537
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp342:
    00000220: 	addq	$0x8, %rax
    00000224: 	cmpq	(%rax), %rdx
    00000227: 	ja	.Ltmp342 # Offset: 551
    00000229: 	cmpq	%rax, %rcx
    0000022c: 	jbe	.Ltmp340 # Offset: 556
.Ltmp341:
    00000232: 	movq	(%rax), %rdi
    00000235: 	movq	%rdi, (%rcx)
    00000238: 	movq	%rsi, (%rax)
.Ltmp339:
    0000023b: 	movq	%rcx, %rbp
    0000023e: 	jmp	.Ltmp343 # Offset: 574
.Ltmp327:
    00000240: 	movq	(%rbp), %rdx
    00000244: 	movq	%r12, %r13
    00000247: 	movq	%rbp, %rax
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp348:
    00000250: 	leaq	-0x8(%r13), %rsi
    00000254: 	cmpq	%rcx, %rdx
    00000257: 	jb	.Ltmp344 # Offset: 599
    00000259: 	cmpq	%rax, %rsi
    0000025c: 	jbe	.Ltmp345 # Offset: 604
    0000025e: 	cmpq	(%rax), %rdx
    00000261: 	jbe	.Ltmp346 # Offset: 609
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp347:
    00000268: 	addq	$0x8, %rax
    0000026c: 	cmpq	(%rax), %rdx
    0000026f: 	ja	.Ltmp347 # Offset: 623
    00000271: 	cmpq	%rax, %rsi
    00000274: 	jbe	.Ltmp345 # Offset: 628
.Ltmp346:
    00000276: 	movq	(%rax), %rdi
    00000279: 	movq	%rdi, (%rsi)
    0000027c: 	movq	%rcx, (%rax)
.Ltmp344:
    0000027f: 	movq	-0x8(%rsi), %rcx
    00000283: 	movq	%rsi, %r13
    00000286: 	jmp	.Ltmp348 # Offset: 646
.Ltmp345:
    00000288: 	movq	%r13, %rax
    0000028b: 	subq	%rbp, %rax
    0000028e: 	cmpq	$0x8, %rax
    00000292: 	jle	.Ltmp349 # Offset: 658
    00000294: 	movq	(%rbp), %rdx
    00000298: 	movq	%r13, %r14
    0000029b: 	movq	%rbp, %rax
    0000029e: 	nop # Size: 2
.Ltmp354:
    000002a0: 	movq	-0x8(%r14), %rsi
    000002a4: 	leaq	-0x8(%r14), %rcx
    000002a8: 	cmpq	%rsi, %rdx
    000002ab: 	jb	.Ltmp350 # Offset: 683
    000002ad: 	cmpq	%rax, %rcx
    000002b0: 	jbe	.Ltmp351 # Offset: 688
    000002b2: 	cmpq	(%rax), %rdx
    000002b5: 	jbe	.Ltmp352 # Offset: 693
    000002b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp353:
    000002c0: 	addq	$0x8, %rax
    000002c4: 	cmpq	(%rax), %rdx
    000002c7: 	ja	.Ltmp353 # Offset: 711
    000002c9: 	cmpq	%rax, %rcx
    000002cc: 	jbe	.Ltmp351 # Offset: 716
.Ltmp352:
    000002ce: 	movq	(%rax), %rdi
    000002d1: 	movq	%rdi, (%rcx)
    000002d4: 	movq	%rsi, (%rax)
.Ltmp350:
    000002d7: 	movq	%rcx, %r14
    000002da: 	jmp	.Ltmp354 # Offset: 730
.Ltmp351:
    000002dc: 	movq	%r14, %rax
    000002df: 	subq	%rbp, %rax
    000002e2: 	cmpq	$0x8, %rax
    000002e6: 	jle	.Ltmp355 # Offset: 742
    000002e8: 	movq	%r14, %rsi
    000002eb: 	movq	%rbp, %rdi
    000002ee: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 750
.Ltmp355:
    000002f3: 	movq	%r13, %rax
    000002f6: 	subq	%r14, %rax
    000002f9: 	cmpq	$0x8, %rax
    000002fd: 	jle	.Ltmp349 # Offset: 765
    000002ff: 	movq	%r13, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 773
.Ltmp349:
    0000030a: 	movq	%r12, %rax
    0000030d: 	subq	%r13, %rax
    00000310: 	cmpq	$0x8, %rax
    00000314: 	jle	.Ltmp356 # Offset: 788
    0000031a: 	movq	(%r13), %rdx
    0000031e: 	movq	%r12, %rbp
    00000321: 	movq	%r13, %rax
    00000324: 	nopl	(%rax) # Size: 4
.Ltmp361:
    00000328: 	movq	-0x8(%rbp), %rsi
    0000032c: 	leaq	-0x8(%rbp), %rcx
    00000330: 	cmpq	%rsi, %rdx
    00000333: 	jb	.Ltmp357 # Offset: 819
    00000335: 	cmpq	%rax, %rcx
    00000338: 	jbe	.Ltmp358 # Offset: 824
    0000033e: 	cmpq	%rdx, (%rax)
    00000341: 	jae	.Ltmp359 # Offset: 833
    00000343: 	nopl	(%rax,%rax) # Size: 5
.Ltmp360:
    00000348: 	addq	$0x8, %rax
    0000034c: 	cmpq	(%rax), %rdx
    0000034f: 	ja	.Ltmp360 # Offset: 847
    00000351: 	cmpq	%rax, %rcx
    00000354: 	jbe	.Ltmp358 # Offset: 852
.Ltmp359:
    0000035a: 	movq	(%rax), %rdi
    0000035d: 	movq	%rdi, (%rcx)
    00000360: 	movq	%rsi, (%rax)
.Ltmp357:
    00000363: 	movq	%rcx, %rbp
    00000366: 	jmp	.Ltmp361 # Offset: 870
.Ltmp340:
    00000368: 	movq	%rbp, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x8, %rax
    00000372: 	jle	.Ltmp362 # Offset: 882
    00000374: 	movq	(%r12), %rdx
    00000378: 	movq	%rbp, %r13
    0000037b: 	movq	%r12, %rax
    0000037e: 	nop # Size: 2
.Ltmp367:
    00000380: 	movq	-0x8(%r13), %rsi
    00000384: 	leaq	-0x8(%r13), %rcx
    00000388: 	cmpq	%rsi, %rdx
    0000038b: 	jb	.Ltmp363 # Offset: 907
    0000038d: 	cmpq	%rax, %rcx
    00000390: 	jbe	.Ltmp364 # Offset: 912
    00000392: 	cmpq	%rdx, (%rax)
    00000395: 	jae	.Ltmp365 # Offset: 917
    00000397: 	nopw	(%rax,%rax) # Size: 9
.Ltmp366:
    000003a0: 	addq	$0x8, %rax
    000003a4: 	cmpq	(%rax), %rdx
    000003a7: 	ja	.Ltmp366 # Offset: 935
    000003a9: 	cmpq	%rax, %rcx
    000003ac: 	jbe	.Ltmp364 # Offset: 940
.Ltmp365:
    000003ae: 	movq	(%rax), %rdi
    000003b1: 	movq	%rdi, (%rcx)
    000003b4: 	movq	%rsi, (%rax)
.Ltmp363:
    000003b7: 	movq	%rcx, %r13
    000003ba: 	jmp	.Ltmp367 # Offset: 954
.Ltmp364:
    000003bc: 	movq	%r13, %rax
    000003bf: 	subq	%r12, %rax
    000003c2: 	cmpq	$0x8, %rax
    000003c6: 	jle	.Ltmp368 # Offset: 966
    000003c8: 	movq	%r13, %rsi
    000003cb: 	movq	%r12, %rdi
    000003ce: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 974
.Ltmp368:
    000003d3: 	movq	%rbp, %rax
    000003d6: 	subq	%r13, %rax
    000003d9: 	cmpq	$0x8, %rax
    000003dd: 	jle	.Ltmp362 # Offset: 989
    000003df: 	movq	%rbp, %rsi
    000003e2: 	movq	%r13, %rdi
    000003e5: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 997
.Ltmp362:
    000003ea: 	movq	%rbx, %rax
    000003ed: 	subq	%rbp, %rax
    000003f0: 	cmpq	$0x8, %rax
    000003f4: 	jle	.Ltmp321 # Offset: 1012
    000003fa: 	movq	(%rbp), %rdx
    000003fe: 	movq	%rbx, %r12
    00000401: 	movq	%rbp, %rax
    00000404: 	nopl	(%rax) # Size: 4
.Ltmp373:
    00000408: 	movq	-0x8(%r12), %rsi
    0000040d: 	leaq	-0x8(%r12), %rcx
    00000412: 	cmpq	%rsi, %rdx
    00000415: 	jb	.Ltmp369 # Offset: 1045
    00000417: 	cmpq	%rax, %rcx
    0000041a: 	jbe	.Ltmp370 # Offset: 1050
    00000420: 	cmpq	(%rax), %rdx
    00000423: 	jbe	.Ltmp371 # Offset: 1059
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp372:
    00000428: 	addq	$0x8, %rax
    0000042c: 	cmpq	(%rax), %rdx
    0000042f: 	ja	.Ltmp372 # Offset: 1071
    00000431: 	cmpq	%rax, %rcx
    00000434: 	jbe	.Ltmp370 # Offset: 1076
.Ltmp371:
    0000043a: 	movq	(%rax), %rdi
    0000043d: 	movq	%rdi, (%rcx)
    00000440: 	movq	%rsi, (%rax)
.Ltmp369:
    00000443: 	movq	%rcx, %r12
    00000446: 	jmp	.Ltmp373 # Offset: 1094
.Ltmp335:
    00000448: 	movq	%r14, %rax
    0000044b: 	subq	%r12, %rax
    0000044e: 	cmpq	$0x8, %rax
    00000452: 	jle	.Ltmp374 # Offset: 1106
    00000454: 	movq	(%r12), %rdx
    00000458: 	movq	%r14, %r15
    0000045b: 	movq	%r12, %rax
    0000045e: 	nop # Size: 2
.Ltmp379:
    00000460: 	movq	-0x8(%r15), %rsi
    00000464: 	leaq	-0x8(%r15), %rcx
    00000468: 	cmpq	%rsi, %rdx
    0000046b: 	jb	.Ltmp375 # Offset: 1131
    0000046d: 	cmpq	%rax, %rcx
    00000470: 	jbe	.Ltmp376 # Offset: 1136
    00000472: 	cmpq	(%rax), %rdx
    00000475: 	jbe	.Ltmp377 # Offset: 1141
    00000477: 	nopw	(%rax,%rax) # Size: 9
.Ltmp378:
    00000480: 	addq	$0x8, %rax
    00000484: 	cmpq	(%rax), %rdx
    00000487: 	ja	.Ltmp378 # Offset: 1159
    00000489: 	cmpq	%rax, %rcx
    0000048c: 	jbe	.Ltmp376 # Offset: 1164
.Ltmp377:
    0000048e: 	movq	(%rax), %rdi
    00000491: 	movq	%rdi, (%rcx)
    00000494: 	movq	%rsi, (%rax)
.Ltmp375:
    00000497: 	movq	%rcx, %r15
    0000049a: 	jmp	.Ltmp379 # Offset: 1178
.Ltmp376:
    0000049c: 	movq	%r15, %rax
    0000049f: 	subq	%r12, %rax
    000004a2: 	cmpq	$0x8, %rax
    000004a6: 	jle	.Ltmp380 # Offset: 1190
    000004a8: 	movq	%r15, %rsi
    000004ab: 	movq	%r12, %rdi
    000004ae: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1198
.Ltmp380:
    000004b3: 	movq	%r14, %rax
    000004b6: 	subq	%r15, %rax
    000004b9: 	cmpq	$0x8, %rax
    000004bd: 	jle	.Ltmp374 # Offset: 1213
    000004bf: 	movq	%r14, %rsi
    000004c2: 	movq	%r15, %rdi
    000004c5: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1221
.Ltmp374:
    000004ca: 	movq	%r13, %rax
    000004cd: 	subq	%r14, %rax
    000004d0: 	cmpq	$0x8, %rax
    000004d4: 	jle	.Ltmp381 # Offset: 1236
    000004da: 	movq	(%r14), %rdx
    000004dd: 	movq	%r13, %r12
    000004e0: 	movq	%r14, %rax
    000004e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp386:
    000004e8: 	movq	-0x8(%r12), %rsi
    000004ed: 	leaq	-0x8(%r12), %rcx
    000004f2: 	cmpq	%rsi, %rdx
    000004f5: 	jb	.Ltmp382 # Offset: 1269
    000004f7: 	cmpq	%rax, %rcx
    000004fa: 	jbe	.Ltmp383 # Offset: 1274
    00000500: 	cmpq	(%rax), %rdx
    00000503: 	jbe	.Ltmp384 # Offset: 1283
    00000505: 	nopl	(%rax) # Size: 3
.Ltmp385:
    00000508: 	addq	$0x8, %rax
    0000050c: 	cmpq	(%rax), %rdx
    0000050f: 	ja	.Ltmp385 # Offset: 1295
    00000511: 	cmpq	%rax, %rcx
    00000514: 	jbe	.Ltmp383 # Offset: 1300
.Ltmp384:
    0000051a: 	movq	(%rax), %rdi
    0000051d: 	movq	%rdi, (%rcx)
    00000520: 	movq	%rsi, (%rax)
.Ltmp382:
    00000523: 	movq	%rcx, %r12
    00000526: 	jmp	.Ltmp386 # Offset: 1318
.Ltmp330:
    00000528: 	movq	%r12, %rax
    0000052b: 	subq	%r13, %rax
    0000052e: 	cmpq	$0x8, %rax
    00000532: 	jle	.Ltmp387 # Offset: 1330
    00000534: 	movq	(%r13), %rdx
    00000538: 	movq	%r12, %r14
    0000053b: 	movq	%r13, %rax
    0000053e: 	nop # Size: 2
.Ltmp392:
    00000540: 	movq	-0x8(%r14), %rsi
    00000544: 	leaq	-0x8(%r14), %rcx
    00000548: 	cmpq	%rsi, %rdx
    0000054b: 	jb	.Ltmp388 # Offset: 1355
    0000054d: 	cmpq	%rax, %rcx
    00000550: 	jbe	.Ltmp389 # Offset: 1360
    00000552: 	cmpq	(%rax), %rdx
    00000555: 	jbe	.Ltmp390 # Offset: 1365
    00000557: 	nopw	(%rax,%rax) # Size: 9
.Ltmp391:
    00000560: 	addq	$0x8, %rax
    00000564: 	cmpq	(%rax), %rdx
    00000567: 	ja	.Ltmp391 # Offset: 1383
    00000569: 	cmpq	%rax, %rcx
    0000056c: 	jbe	.Ltmp389 # Offset: 1388
.Ltmp390:
    0000056e: 	movq	(%rax), %rdi
    00000571: 	movq	%rdi, (%rcx)
    00000574: 	movq	%rsi, (%rax)
.Ltmp388:
    00000577: 	movq	%rcx, %r14
    0000057a: 	jmp	.Ltmp392 # Offset: 1402
.Ltmp389:
    0000057c: 	movq	%r14, %rax
    0000057f: 	subq	%r13, %rax
    00000582: 	cmpq	$0x8, %rax
    00000586: 	jle	.Ltmp393 # Offset: 1414
    00000588: 	movq	%r14, %rsi
    0000058b: 	movq	%r13, %rdi
    0000058e: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1422
.Ltmp393:
    00000593: 	movq	%r12, %rax
    00000596: 	subq	%r14, %rax
    00000599: 	cmpq	$0x8, %rax
    0000059d: 	jle	.Ltmp387 # Offset: 1437
    0000059f: 	movq	%r12, %rsi
    000005a2: 	movq	%r14, %rdi
    000005a5: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1445
.Ltmp387:
    000005aa: 	movq	%rbp, %rax
    000005ad: 	subq	%r12, %rax
    000005b0: 	cmpq	$0x8, %rax
    000005b4: 	jle	.Ltmp313 # Offset: 1460
    000005ba: 	movq	(%r12), %rdx
    000005be: 	movq	%rbp, %r13
    000005c1: 	movq	%r12, %rax
    000005c4: 	nopl	(%rax) # Size: 4
.Ltmp398:
    000005c8: 	movq	-0x8(%r13), %rsi
    000005cc: 	leaq	-0x8(%r13), %rcx
    000005d0: 	cmpq	%rsi, %rdx
    000005d3: 	jb	.Ltmp394 # Offset: 1491
    000005d5: 	cmpq	%rax, %rcx
    000005d8: 	jbe	.Ltmp395 # Offset: 1496
    000005de: 	cmpq	(%rax), %rdx
    000005e1: 	jbe	.Ltmp396 # Offset: 1505
    000005e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp397:
    000005e8: 	addq	$0x8, %rax
    000005ec: 	cmpq	(%rax), %rdx
    000005ef: 	ja	.Ltmp397 # Offset: 1519
    000005f1: 	cmpq	%rax, %rcx
    000005f4: 	jbe	.Ltmp395 # Offset: 1524
.Ltmp396:
    000005fa: 	movq	(%rax), %rdi
    000005fd: 	movq	%rdi, (%rcx)
    00000600: 	movq	%rsi, (%rax)
.Ltmp394:
    00000603: 	movq	%rcx, %r13
    00000606: 	jmp	.Ltmp398 # Offset: 1542
.Ltmp358:
    00000608: 	movq	%rbp, %rax
    0000060b: 	subq	%r13, %rax
    0000060e: 	cmpq	$0x8, %rax
    00000612: 	jle	.Ltmp399 # Offset: 1554
    00000614: 	movq	%rbp, %rsi
    00000617: 	movq	%r13, %rdi
    0000061a: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1562
.Ltmp399:
    0000061f: 	movq	%r12, %rax
    00000622: 	subq	%rbp, %rax
    00000625: 	cmpq	$0x8, %rax
    00000629: 	jle	.Ltmp356 # Offset: 1577
    0000062f: 	movq	%r12, %rsi
    00000632: 	movq	%rbp, %rdi
    00000635: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1589
    0000063a: 	jmp	.Ltmp356 # Offset: 1594
.Ltmp370:
    0000063f: 	movq	%r12, %rax
    00000642: 	subq	%rbp, %rax
    00000645: 	cmpq	$0x8, %rax
    00000649: 	jle	.Ltmp400 # Offset: 1609
    0000064b: 	movq	%r12, %rsi
    0000064e: 	movq	%rbp, %rdi
    00000651: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1617
.Ltmp400:
    00000656: 	movq	%rbx, %rax
    00000659: 	subq	%r12, %rax
    0000065c: 	cmpq	$0x8, %rax
    00000660: 	jg	.Ltmp401 # Offset: 1632
    00000666: 	jmp	.Ltmp321 # Offset: 1638
.Ltmp383:
    0000066b: 	movq	%r12, %rax
    0000066e: 	subq	%r14, %rax
    00000671: 	cmpq	$0x8, %rax
    00000675: 	jle	.Ltmp402 # Offset: 1653
    00000677: 	movq	%r12, %rsi
    0000067a: 	movq	%r14, %rdi
    0000067d: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1661
.Ltmp402:
    00000682: 	movq	%r13, %rax
    00000685: 	subq	%r12, %rax
    00000688: 	cmpq	$0x8, %rax
    0000068c: 	jle	.Ltmp381 # Offset: 1676
    00000692: 	movq	%r13, %rsi
    00000695: 	movq	%r12, %rdi
    00000698: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1688
    0000069d: 	jmp	.Ltmp381 # Offset: 1693
.Ltmp395:
    000006a2: 	movq	%r13, %rax
    000006a5: 	subq	%r12, %rax
    000006a8: 	cmpq	$0x8, %rax
    000006ac: 	jle	.Ltmp403 # Offset: 1708
    000006ae: 	movq	%r13, %rsi
    000006b1: 	movq	%r12, %rdi
    000006b4: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1716
.Ltmp403:
    000006b9: 	movq	%rbp, %rax
    000006bc: 	subq	%r13, %rax
    000006bf: 	cmpq	$0x8, %rax
    000006c3: 	jle	.Ltmp313 # Offset: 1731
    000006c9: 	movq	%rbp, %rsi
    000006cc: 	movq	%r13, %rdi
    000006cf: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 1743
    000006d4: 	jmp	.Ltmp313 # Offset: 1748
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x3f90
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x3f90
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp404 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp405 # Offset: 63
.Ltmp404:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp406 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp407 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp411:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp408 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp409 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp407:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp410 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp411 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp406:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp412:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp411 # Offset: 248
.Ltmp405:
    000000fd: 	leaq	DATAat0x14008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp408:
    00000109: 	leaq	DATAat0x141ba(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp409:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp410:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp412 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp413 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp413:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x40e0
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0x40e0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0x30(%rdi), %rcx
    00000019: 	movq	0x48(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	(%rsi), %rbp
    00000024: 	movq	%rdi, 0x20(%rsp)
    00000029: 	movq	%rcx, 0x10(%rsp)
    0000002e: 	movq	0x10(%rsi), %rcx
    00000032: 	movq	%rax, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	0x18(%rsi), %rcx
    0000003f: 	leaq	0x8(%rcx), %r12
    00000043: 	movq	%rcx, 0x28(%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp414 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp417:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp416:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp415 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp416 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp417 # Offset: 142
.Ltmp414:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x28(%rsp)
    00000099: 	je	.Ltmp418 # Offset: 153
    0000009f: 	cmpq	0x18(%rsp), %rbp
    000000a4: 	je	.Ltmp419 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp421:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp420 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x18(%rsp)
    000000d7: 	jne	.Ltmp421 # Offset: 215
.Ltmp419:
    000000d9: 	cmpq	%r13, 0x10(%rsp)
    000000de: 	je	.Ltmp422 # Offset: 222
.Ltmp424:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp423 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x10(%rsp)
    00000107: 	jne	.Ltmp424 # Offset: 263
.Ltmp422:
    00000109: 	movq	0x20(%rsp), %rax
    0000010e: 	movq	0x48(%rax), %rax
    00000112: 	movq	%rax, (%rsp)
    00000116: 	leaq	0x8(%rax), %rbp
    0000011a: 	movq	0x18(%r15), %rax
    0000011e: 	leaq	0x8(%rax), %rbx
    00000122: 	cmpq	%rbx, %rbp
    00000125: 	jbe	.Ltmp425 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp426:
    00000130: 	movq	(%rbx), %rdi
    00000133: 	movl	$0x200, %esi
    00000138: 	addq	$0x8, %rbx
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
    00000141: 	cmpq	%rbx, %rbp
    00000144: 	ja	.Ltmp426 # Offset: 324
.Ltmp425:
    00000146: 	movdqu	(%r15), %xmm0
    0000014b: 	movq	0x20(%rsp), %rax
    00000150: 	movups	%xmm0, 0x30(%rax)
    00000154: 	movdqu	0x10(%r15), %xmm1
    0000015a: 	movaps	%xmm1, (%rsp)
    0000015e: 	movups	%xmm1, 0x40(%rax)
    00000162: 	addq	$0x38, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	popq	%r13
    0000016c: 	popq	%r14
    0000016e: 	popq	%r15
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp415:
    00000178: 	addq	$0x20, %r14
    0000017c: 	cmpq	%r14, %rbx
    0000017f: 	jne	.Ltmp416 # Offset: 383
    00000185: 	addq	$0x8, %r12
    00000189: 	cmpq	%r12, (%rsp)
    0000018d: 	ja	.Ltmp417 # Offset: 397
    00000193: 	jmp	.Ltmp414 # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp423:
    000001a0: 	addq	$0x20, %r13
    000001a4: 	cmpq	%r13, 0x10(%rsp)
    000001a9: 	jne	.Ltmp424 # Offset: 425
    000001af: 	jmp	.Ltmp422 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp420:
    000001b8: 	addq	$0x20, %rbp
    000001bc: 	cmpq	%rbp, 0x18(%rsp)
    000001c1: 	jne	.Ltmp421 # Offset: 449
    000001c7: 	jmp	.Ltmp419 # Offset: 455
.Ltmp418:
    000001cc: 	cmpq	0x10(%rsp), %rbp
    000001d1: 	je	.Ltmp422 # Offset: 465
.Ltmp429:
    000001d7: 	movq	(%rbp), %rdi
    000001db: 	leaq	0x10(%rbp), %rax
    000001df: 	cmpq	%rax, %rdi
    000001e2: 	je	.Ltmp427 # Offset: 482
.Ltmp428:
    000001e4: 	movq	0x10(%rbp), %rax
    000001e8: 	addq	$0x20, %rbp
    000001ec: 	leaq	0x1(%rax), %rsi
    000001f0: 	callq	_ZdlPvm@PLT # Offset: 496
    000001f5: 	cmpq	%rbp, 0x10(%rsp)
    000001fa: 	je	.Ltmp422 # Offset: 506
    00000200: 	movq	(%rbp), %rdi
    00000204: 	leaq	0x10(%rbp), %rax
    00000208: 	cmpq	%rax, %rdi
    0000020b: 	jne	.Ltmp428 # Offset: 523
.Ltmp427:
    0000020d: 	addq	$0x20, %rbp
    00000211: 	cmpq	%rbp, 0x10(%rsp)
    00000216: 	jne	.Ltmp429 # Offset: 534
    00000218: 	jmp	.Ltmp422 # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E"

Binary Function "_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x4300
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0x4300
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp430 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp432:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movsd	-0x10(%rdi), %xmm0
    00000019: 	comisd	-0x8(%rdi), %xmm0
    0000001e: 	ja	.Ltmp431 # Offset: 30
.Ltmp430:
    00000020: 	cmpq	%rdi, %rsi
    00000023: 	jne	.Ltmp432 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp431:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	leaq	DATAat0x141cf(%rip), %rsi
    0000003a: 	movl	$0x1, %edi
    0000003f: 	xorl	%eax, %eax
    00000041: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12ValueWrapperIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x4350
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0x4350
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12ValueWrapperIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp433 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp435:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movsd	-0x10(%rdi), %xmm0
    00000019: 	comisd	-0x8(%rdi), %xmm0
    0000001e: 	ja	.Ltmp434 # Offset: 30
.Ltmp433:
    00000020: 	cmpq	%rdi, %rsi
    00000023: 	jne	.Ltmp435 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp434:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	leaq	DATAat0x141cf(%rip), %rsi
    0000003a: 	movl	$0x1, %edi
    0000003f: 	xorl	%eax, %eax
    00000041: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12ValueWrapperIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x43a0
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0x43a0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp436 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp438:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movsd	-0x10(%rdi), %xmm0
    00000019: 	comisd	-0x8(%rdi), %xmm0
    0000001e: 	ja	.Ltmp437 # Offset: 30
.Ltmp436:
    00000020: 	cmpq	%rdi, %rsi
    00000023: 	jne	.Ltmp438 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp437:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	leaq	DATAat0x141cf(%rip), %rsi
    0000003a: 	movl	$0x1, %edi
    0000003f: 	xorl	%eax, %eax
    00000041: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZN9benchmark9quicksortIPdEEvT_S2_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x43f0
  Size        : 0x4a0
  MaxSize     : 0x4a0
  Offset      : 0x43f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, 0x18(%rsp)
    0000001d: 	cmpq	$0x8, %rax
    00000021: 	jle	.Ltmp439 # Offset: 33
.Ltmp451:
    00000023: 	movsd	(%rdi), %xmm2
    00000027: 	movq	0x18(%rsp), %r13
    0000002c: 	movq	%rdi, %rax
.Ltmp444:
    0000002f: 	movsd	-0x8(%r13), %xmm0
    00000035: 	leaq	-0x8(%r13), %rdx
    00000039: 	comisd	%xmm2, %xmm0
    0000003d: 	ja	.Ltmp440 # Offset: 61
    0000003f: 	cmpq	%rdx, %rax
    00000042: 	jae	.Ltmp441 # Offset: 66
    00000044: 	movsd	(%rax), %xmm1
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp442 # Offset: 76
.Ltmp443:
    0000004e: 	movsd	0x8(%rax), %xmm1
    00000053: 	addq	$0x8, %rax
    00000057: 	comisd	%xmm1, %xmm2
    0000005b: 	ja	.Ltmp443 # Offset: 91
    0000005d: 	cmpq	%rax, %rdx
    00000060: 	jbe	.Ltmp441 # Offset: 96
.Ltmp442:
    00000062: 	movsd	%xmm1, (%rdx)
    00000066: 	movsd	%xmm0, (%rax)
.Ltmp440:
    0000006a: 	movq	%rdx, %r13
    0000006d: 	jmp	.Ltmp444 # Offset: 109
.Ltmp439:
    0000006f: 	addq	$0x28, %rsp
    00000073: 	popq	%rbx
    00000074: 	popq	%rbp
    00000075: 	popq	%r12
    00000077: 	popq	%r13
    00000079: 	popq	%r14
    0000007b: 	popq	%r15
    0000007d: 	retq # Offset: 125
.Ltmp441:
    0000007e: 	movq	%r13, %rax
    00000081: 	subq	%rdi, %rax
    00000084: 	cmpq	$0x8, %rax
    00000088: 	jle	.Ltmp445 # Offset: 136
.Ltmp501:
    0000008a: 	movsd	(%rdi), %xmm2
    0000008e: 	movq	%r13, %r14
    00000091: 	movq	%rdi, %rax
.Ltmp450:
    00000094: 	comisd	%xmm2, %xmm0
    00000098: 	leaq	-0x8(%r14), %rdx
    0000009c: 	ja	.Ltmp446 # Offset: 156
    0000009e: 	cmpq	%rax, %rdx
    000000a1: 	jbe	.Ltmp447 # Offset: 161
    000000a3: 	movsd	(%rax), %xmm1
    000000a7: 	comisd	%xmm1, %xmm2
    000000ab: 	jbe	.Ltmp448 # Offset: 171
.Ltmp449:
    000000ad: 	movsd	0x8(%rax), %xmm1
    000000b2: 	addq	$0x8, %rax
    000000b6: 	comisd	%xmm1, %xmm2
    000000ba: 	ja	.Ltmp449 # Offset: 186
    000000bc: 	cmpq	%rax, %rdx
    000000bf: 	jbe	.Ltmp447 # Offset: 191
.Ltmp448:
    000000c1: 	movsd	%xmm1, (%rdx)
    000000c5: 	movsd	%xmm0, (%rax)
.Ltmp446:
    000000c9: 	movsd	-0x8(%rdx), %xmm0
    000000ce: 	movq	%rdx, %r14
    000000d1: 	jmp	.Ltmp450 # Offset: 209
.Ltmp445:
    000000d3: 	movq	0x18(%rsp), %rax
    000000d8: 	subq	%r13, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jle	.Ltmp439 # Offset: 223
    000000e1: 	movq	%r13, %rdi
    000000e4: 	jmp	.Ltmp451 # Offset: 228
.Ltmp447:
    000000e9: 	movq	%r14, %rax
    000000ec: 	subq	%rdi, %rax
    000000ef: 	cmpq	$0x8, %rax
    000000f3: 	jle	.Ltmp452 # Offset: 243
.Ltmp500:
    000000f9: 	movsd	(%rdi), %xmm2
    000000fd: 	movq	%r14, %r15
    00000100: 	movq	%rdi, %rax
.Ltmp457:
    00000103: 	comisd	%xmm2, %xmm0
    00000107: 	leaq	-0x8(%r15), %rdx
    0000010b: 	ja	.Ltmp453 # Offset: 267
    0000010d: 	cmpq	%rax, %rdx
    00000110: 	jbe	.Ltmp454 # Offset: 272
    00000112: 	movsd	(%rax), %xmm1
    00000116: 	comisd	%xmm1, %xmm2
    0000011a: 	jbe	.Ltmp455 # Offset: 282
.Ltmp456:
    0000011c: 	movsd	0x8(%rax), %xmm1
    00000121: 	addq	$0x8, %rax
    00000125: 	comisd	%xmm1, %xmm2
    00000129: 	ja	.Ltmp456 # Offset: 297
    0000012b: 	cmpq	%rax, %rdx
    0000012e: 	jbe	.Ltmp454 # Offset: 302
.Ltmp455:
    00000130: 	movsd	%xmm1, (%rdx)
    00000134: 	movsd	%xmm0, (%rax)
.Ltmp453:
    00000138: 	movsd	-0x8(%rdx), %xmm0
    0000013d: 	movq	%rdx, %r15
    00000140: 	jmp	.Ltmp457 # Offset: 320
.Ltmp454:
    00000142: 	movq	%r15, %rax
    00000145: 	subq	%rdi, %rax
    00000148: 	cmpq	$0x8, %rax
    0000014c: 	jle	.Ltmp458 # Offset: 332
.Ltmp499:
    00000152: 	movsd	(%rdi), %xmm2
    00000156: 	movq	%r15, %rbx
    00000159: 	movq	%rdi, %rax
.Ltmp463:
    0000015c: 	comisd	%xmm2, %xmm0
    00000160: 	leaq	-0x8(%rbx), %rcx
    00000164: 	ja	.Ltmp459 # Offset: 356
    00000166: 	cmpq	%rax, %rcx
    00000169: 	jbe	.Ltmp460 # Offset: 361
    0000016b: 	movsd	(%rax), %xmm1
    0000016f: 	comisd	%xmm1, %xmm2
    00000173: 	jbe	.Ltmp461 # Offset: 371
.Ltmp462:
    00000175: 	movsd	0x8(%rax), %xmm1
    0000017a: 	addq	$0x8, %rax
    0000017e: 	comisd	%xmm1, %xmm2
    00000182: 	ja	.Ltmp462 # Offset: 386
    00000184: 	cmpq	%rax, %rcx
    00000187: 	jbe	.Ltmp460 # Offset: 391
.Ltmp461:
    00000189: 	movsd	%xmm1, (%rcx)
    0000018d: 	movsd	%xmm0, (%rax)
.Ltmp459:
    00000191: 	movsd	-0x8(%rcx), %xmm0
    00000196: 	movq	%rcx, %rbx
    00000199: 	jmp	.Ltmp463 # Offset: 409
.Ltmp460:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	subq	%rdi, %rax
    000001a1: 	cmpq	$0x8, %rax
    000001a5: 	jle	.Ltmp464 # Offset: 421
.Ltmp498:
    000001ab: 	movsd	(%rdi), %xmm2
    000001af: 	movq	%rbx, %rcx
    000001b2: 	movq	%rdi, %rax
.Ltmp469:
    000001b5: 	comisd	%xmm2, %xmm0
    000001b9: 	leaq	-0x8(%rcx), %rsi
    000001bd: 	ja	.Ltmp465 # Offset: 445
    000001bf: 	cmpq	%rax, %rsi
    000001c2: 	jbe	.Ltmp466 # Offset: 450
    000001c4: 	movsd	(%rax), %xmm1
    000001c8: 	comisd	%xmm1, %xmm2
    000001cc: 	jbe	.Ltmp467 # Offset: 460
.Ltmp468:
    000001ce: 	movsd	0x8(%rax), %xmm1
    000001d3: 	addq	$0x8, %rax
    000001d7: 	comisd	%xmm1, %xmm2
    000001db: 	ja	.Ltmp468 # Offset: 475
    000001dd: 	cmpq	%rax, %rsi
    000001e0: 	jbe	.Ltmp466 # Offset: 480
.Ltmp467:
    000001e2: 	movsd	%xmm1, (%rsi)
    000001e6: 	movsd	%xmm0, (%rax)
.Ltmp465:
    000001ea: 	movsd	-0x8(%rsi), %xmm0
    000001ef: 	movq	%rsi, %rcx
    000001f2: 	jmp	.Ltmp469 # Offset: 498
.Ltmp466:
    000001f4: 	movq	%rcx, %rax
    000001f7: 	subq	%rdi, %rax
    000001fa: 	cmpq	$0x8, %rax
    000001fe: 	jle	.Ltmp470 # Offset: 510
.Ltmp497:
    00000204: 	movsd	(%rdi), %xmm2
    00000208: 	movq	%rcx, %r12
    0000020b: 	movq	%rdi, %rax
.Ltmp475:
    0000020e: 	comisd	%xmm2, %xmm0
    00000212: 	leaq	-0x8(%r12), %rsi
    00000217: 	ja	.Ltmp471 # Offset: 535
    00000219: 	cmpq	%rax, %rsi
    0000021c: 	jbe	.Ltmp472 # Offset: 540
    0000021e: 	movsd	(%rax), %xmm1
    00000222: 	comisd	%xmm1, %xmm2
    00000226: 	jbe	.Ltmp473 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp474:
    00000230: 	movsd	0x8(%rax), %xmm1
    00000235: 	addq	$0x8, %rax
    00000239: 	comisd	%xmm1, %xmm2
    0000023d: 	ja	.Ltmp474 # Offset: 573
    0000023f: 	cmpq	%rax, %rsi
    00000242: 	jbe	.Ltmp472 # Offset: 578
.Ltmp473:
    00000244: 	movsd	%xmm1, (%rsi)
    00000248: 	movsd	%xmm0, (%rax)
.Ltmp471:
    0000024c: 	movsd	-0x8(%rsi), %xmm0
    00000251: 	movq	%rsi, %r12
    00000254: 	jmp	.Ltmp475 # Offset: 596
.Ltmp472:
    00000256: 	movq	%r12, %rax
    00000259: 	subq	%rdi, %rax
    0000025c: 	cmpq	$0x8, %rax
    00000260: 	jle	.Ltmp476 # Offset: 608
.Ltmp496:
    00000266: 	movsd	(%rdi), %xmm2
    0000026a: 	movq	%r12, %r8
    0000026d: 	movq	%rdi, %rax
.Ltmp494:
    00000270: 	comisd	%xmm2, %xmm0
    00000274: 	leaq	-0x8(%r8), %rsi
    00000278: 	ja	.Ltmp477 # Offset: 632
    0000027e: 	cmpq	%rax, %rsi
    00000281: 	jbe	.Ltmp478 # Offset: 641
    00000283: 	movsd	(%rax), %xmm1
    00000287: 	comisd	%xmm1, %xmm2
    0000028b: 	jbe	.Ltmp479 # Offset: 651
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp480:
    00000298: 	movsd	0x8(%rax), %xmm1
    0000029d: 	addq	$0x8, %rax
    000002a1: 	comisd	%xmm1, %xmm2
    000002a5: 	ja	.Ltmp480 # Offset: 677
    000002a7: 	cmpq	%rax, %rsi
    000002aa: 	ja	.Ltmp479 # Offset: 682
.Ltmp478:
    000002b0: 	movq	%r8, %rax
    000002b3: 	subq	%rdi, %rax
    000002b6: 	cmpq	$0x8, %rax
    000002ba: 	jle	.Ltmp481 # Offset: 698
.Ltmp493:
    000002c0: 	movsd	(%rdi), %xmm1
    000002c4: 	movq	%r8, %rbp
    000002c7: 	movq	%rdi, %rax
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp492:
    000002d0: 	comisd	%xmm1, %xmm0
    000002d4: 	leaq	-0x8(%rbp), %rsi
    000002d8: 	ja	.Ltmp482 # Offset: 728
    000002de: 	cmpq	%rax, %rsi
    000002e1: 	jbe	.Ltmp483 # Offset: 737
    000002e3: 	movsd	(%rax), %xmm2
    000002e7: 	comisd	%xmm2, %xmm1
    000002eb: 	jbe	.Ltmp484 # Offset: 747
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp485:
    000002f8: 	movsd	0x8(%rax), %xmm2
    000002fd: 	addq	$0x8, %rax
    00000301: 	comisd	%xmm2, %xmm1
    00000305: 	ja	.Ltmp485 # Offset: 773
    00000307: 	cmpq	%rax, %rsi
    0000030a: 	ja	.Ltmp484 # Offset: 778
.Ltmp483:
    00000310: 	movq	%rbp, %rax
    00000313: 	subq	%rdi, %rax
    00000316: 	cmpq	$0x8, %rax
    0000031a: 	jle	.Ltmp486 # Offset: 794
.Ltmp491:
    00000320: 	movsd	(%rdi), %xmm1
    00000324: 	movq	%rbp, %rsi
    00000327: 	movq	%rdi, %rax
    0000032a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp495:
    00000330: 	movsd	-0x8(%rsi), %xmm2
    00000335: 	leaq	-0x8(%rsi), %r9
    00000339: 	comisd	%xmm1, %xmm2
    0000033d: 	ja	.Ltmp487 # Offset: 829
    00000343: 	cmpq	%rax, %r9
    00000346: 	jbe	.Ltmp488 # Offset: 838
    00000348: 	movsd	(%rax), %xmm0
    0000034c: 	comisd	%xmm0, %xmm1
    00000350: 	jbe	.Ltmp489 # Offset: 848
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp490:
    00000360: 	movsd	0x8(%rax), %xmm0
    00000365: 	addq	$0x8, %rax
    00000369: 	comisd	%xmm0, %xmm1
    0000036d: 	ja	.Ltmp490 # Offset: 877
    0000036f: 	cmpq	%rax, %r9
    00000372: 	ja	.Ltmp489 # Offset: 882
.Ltmp488:
    00000374: 	movq	%r8, 0x10(%rsp)
    00000379: 	movq	%rcx, 0x8(%rsp)
    0000037e: 	movq	%rsi, (%rsp)
    00000382: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 898
    00000387: 	movq	(%rsp), %rsi
    0000038b: 	movq	%rbp, %rax
    0000038e: 	movq	0x8(%rsp), %rcx
    00000393: 	movq	0x10(%rsp), %r8
    00000398: 	subq	%rsi, %rax
    0000039b: 	cmpq	$0x8, %rax
    0000039f: 	jle	.Ltmp486 # Offset: 927
    000003a1: 	movq	%rsi, %rdi
    000003a4: 	jmp	.Ltmp491 # Offset: 932
.Ltmp484:
    000003a9: 	movsd	%xmm2, (%rsi)
    000003ad: 	movsd	%xmm0, (%rax)
.Ltmp482:
    000003b1: 	movsd	-0x8(%rsi), %xmm0
    000003b6: 	movq	%rsi, %rbp
    000003b9: 	jmp	.Ltmp492 # Offset: 953
.Ltmp486:
    000003be: 	movq	%r8, %rax
    000003c1: 	subq	%rbp, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp481 # Offset: 968
    000003ca: 	movsd	-0x8(%r8), %xmm0
    000003d0: 	movq	%rbp, %rdi
    000003d3: 	jmp	.Ltmp493 # Offset: 979
.Ltmp479:
    000003d8: 	movsd	%xmm1, (%rsi)
    000003dc: 	movsd	%xmm0, (%rax)
.Ltmp477:
    000003e0: 	movsd	-0x8(%rsi), %xmm0
    000003e5: 	movq	%rsi, %r8
    000003e8: 	jmp	.Ltmp494 # Offset: 1000
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp489:
    000003f0: 	movsd	%xmm0, (%r9)
    000003f5: 	movsd	%xmm2, (%rax)
.Ltmp487:
    000003f9: 	movq	%r9, %rsi
    000003fc: 	jmp	.Ltmp495 # Offset: 1020
.Ltmp481:
    00000401: 	movq	%r12, %rax
    00000404: 	subq	%r8, %rax
    00000407: 	cmpq	$0x8, %rax
    0000040b: 	jle	.Ltmp476 # Offset: 1035
    0000040d: 	movsd	-0x8(%r12), %xmm0
    00000414: 	movq	%r8, %rdi
    00000417: 	jmp	.Ltmp496 # Offset: 1047
.Ltmp476:
    0000041c: 	movq	%rcx, %rax
    0000041f: 	subq	%r12, %rax
    00000422: 	cmpq	$0x8, %rax
    00000426: 	jle	.Ltmp470 # Offset: 1062
    00000428: 	movsd	-0x8(%rcx), %xmm0
    0000042d: 	movq	%r12, %rdi
    00000430: 	jmp	.Ltmp497 # Offset: 1072
.Ltmp470:
    00000435: 	movq	%rbx, %rax
    00000438: 	subq	%rcx, %rax
    0000043b: 	cmpq	$0x8, %rax
    0000043f: 	jle	.Ltmp464 # Offset: 1087
    00000441: 	movsd	-0x8(%rbx), %xmm0
    00000446: 	movq	%rcx, %rdi
    00000449: 	jmp	.Ltmp498 # Offset: 1097
.Ltmp464:
    0000044e: 	movq	%r15, %rax
    00000451: 	subq	%rbx, %rax
    00000454: 	cmpq	$0x8, %rax
    00000458: 	jle	.Ltmp458 # Offset: 1112
    0000045a: 	movsd	-0x8(%r15), %xmm0
    00000460: 	movq	%rbx, %rdi
    00000463: 	jmp	.Ltmp499 # Offset: 1123
.Ltmp458:
    00000468: 	movq	%r14, %rax
    0000046b: 	subq	%r15, %rax
    0000046e: 	cmpq	$0x8, %rax
    00000472: 	jle	.Ltmp452 # Offset: 1138
    00000474: 	movsd	-0x8(%r14), %xmm0
    0000047a: 	movq	%r15, %rdi
    0000047d: 	jmp	.Ltmp500 # Offset: 1149
.Ltmp452:
    00000482: 	movq	%r13, %rax
    00000485: 	subq	%r14, %rax
    00000488: 	cmpq	$0x8, %rax
    0000048c: 	jle	.Ltmp445 # Offset: 1164
    00000492: 	movsd	-0x8(%r13), %xmm0
    00000498: 	movq	%r14, %rdi
    0000049b: 	jmp	.Ltmp501 # Offset: 1179
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPdEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x4890
  Size        : 0x73f
  MaxSize     : 0x740
  Offset      : 0x4890
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp502 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %rdx
    00000019: 	pushq	%r13
    0000001b: 	pushq	%r12
    0000001d: 	movq	%rsi, %r12
    00000020: 	pushq	%rbp
    00000021: 	movq	%rsi, %rbp
    00000024: 	pushq	%rbx
    00000025: 	movsd	(%rdi), %xmm1
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp507:
    00000030: 	movsd	-0x8(%rbp), %xmm2
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm1, %xmm2
    0000003d: 	ja	.Ltmp503 # Offset: 61
    0000003f: 	cmpq	%rdx, %rcx
    00000042: 	jbe	.Ltmp504 # Offset: 66
    00000044: 	movsd	(%rdx), %xmm0
    00000048: 	leaq	0x8(%rdx), %rax
    0000004c: 	comisd	%xmm0, %xmm1
    00000050: 	jbe	.Ltmp505 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp506:
    00000058: 	movq	%rax, %rdx
    0000005b: 	movsd	(%rax), %xmm0
    0000005f: 	leaq	0x8(%rax), %rax
    00000063: 	comisd	%xmm0, %xmm1
    00000067: 	ja	.Ltmp506 # Offset: 103
    00000069: 	cmpq	%rdx, %rcx
    0000006c: 	jbe	.Ltmp504 # Offset: 108
.Ltmp505:
    0000006e: 	movsd	%xmm0, (%rcx)
    00000072: 	movsd	%xmm2, (%rdx)
.Ltmp503:
    00000076: 	movq	%rcx, %rbp
    00000079: 	jmp	.Ltmp507 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp504:
    00000080: 	movq	%rbp, %rax
    00000083: 	subq	%rdi, %rax
    00000086: 	cmpq	$0x8, %rax
    0000008a: 	jle	.Ltmp508 # Offset: 138
    0000008c: 	movsd	(%rdi), %xmm1
    00000090: 	movq	%rbp, %r13
    00000093: 	movq	%rdi, %rdx
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp513:
    000000a0: 	comisd	%xmm1, %xmm2
    000000a4: 	leaq	-0x8(%r13), %rcx
    000000a8: 	ja	.Ltmp509 # Offset: 168
    000000aa: 	cmpq	%rdx, %rcx
    000000ad: 	jbe	.Ltmp510 # Offset: 173
    000000af: 	movsd	(%rdx), %xmm0
    000000b3: 	leaq	0x8(%rdx), %rax
    000000b7: 	comisd	%xmm0, %xmm1
    000000bb: 	jbe	.Ltmp511 # Offset: 187
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp512:
    000000c0: 	movq	%rax, %rdx
    000000c3: 	movsd	(%rax), %xmm0
    000000c7: 	leaq	0x8(%rax), %rax
    000000cb: 	comisd	%xmm0, %xmm1
    000000cf: 	ja	.Ltmp512 # Offset: 207
    000000d1: 	cmpq	%rdx, %rcx
    000000d4: 	jbe	.Ltmp510 # Offset: 212
.Ltmp511:
    000000d6: 	movsd	%xmm0, (%rcx)
    000000da: 	movsd	%xmm2, (%rdx)
.Ltmp509:
    000000de: 	movsd	-0x8(%rcx), %xmm2
    000000e3: 	movq	%rcx, %r13
    000000e6: 	jmp	.Ltmp513 # Offset: 230
.Ltmp510:
    000000e8: 	movq	%r13, %rax
    000000eb: 	subq	%rdi, %rax
    000000ee: 	cmpq	$0x8, %rax
    000000f2: 	jg	.Ltmp514 # Offset: 242
.Ltmp550:
    000000f8: 	movq	%rbp, %rax
    000000fb: 	subq	%r13, %rax
    000000fe: 	cmpq	$0x8, %rax
    00000102: 	jg	.Ltmp515 # Offset: 258
.Ltmp508:
    00000108: 	movq	%r12, %rax
    0000010b: 	subq	%rbp, %rax
    0000010e: 	cmpq	$0x8, %rax
    00000112: 	jle	.Ltmp516 # Offset: 274
    00000114: 	movsd	(%rbp), %xmm1
    00000119: 	movq	%r12, %r13
    0000011c: 	movq	%rbp, %rdx
    0000011f: 	nop # Size: 1
.Ltmp521:
    00000120: 	movsd	-0x8(%r13), %xmm2
    00000126: 	leaq	-0x8(%r13), %rcx
    0000012a: 	comisd	%xmm1, %xmm2
    0000012e: 	ja	.Ltmp517 # Offset: 302
    00000130: 	cmpq	%rdx, %rcx
    00000133: 	jbe	.Ltmp518 # Offset: 307
    00000135: 	movsd	(%rdx), %xmm0
    00000139: 	leaq	0x8(%rdx), %rax
    0000013d: 	comisd	%xmm0, %xmm1
    00000141: 	jbe	.Ltmp519 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp520:
    00000148: 	movq	%rax, %rdx
    0000014b: 	movsd	(%rax), %xmm0
    0000014f: 	leaq	0x8(%rax), %rax
    00000153: 	comisd	%xmm0, %xmm1
    00000157: 	ja	.Ltmp520 # Offset: 343
    00000159: 	cmpq	%rdx, %rcx
    0000015c: 	jbe	.Ltmp518 # Offset: 348
.Ltmp519:
    0000015e: 	movsd	%xmm0, (%rcx)
    00000162: 	movsd	%xmm2, (%rdx)
.Ltmp517:
    00000166: 	movq	%rcx, %r13
    00000169: 	jmp	.Ltmp521 # Offset: 361
.Ltmp518:
    0000016b: 	movq	%r13, %rax
    0000016e: 	subq	%rbp, %rax
    00000171: 	cmpq	$0x8, %rax
    00000175: 	jg	.Ltmp522 # Offset: 373
.Ltmp573:
    0000017b: 	movq	%r12, %rax
    0000017e: 	subq	%r13, %rax
    00000181: 	cmpq	$0x8, %rax
    00000185: 	jg	.Ltmp523 # Offset: 389
.Ltmp516:
    00000187: 	popq	%rbx
    00000188: 	popq	%rbp
    00000189: 	popq	%r12
    0000018b: 	popq	%r13
    0000018d: 	popq	%r14
    0000018f: 	retq # Offset: 399
.Ltmp502:
    00000190: 	retq # Offset: 400
.Ltmp523:
    00000191: 	movsd	(%r13), %xmm1
    00000197: 	movq	%r12, %rbp
    0000019a: 	movq	%r13, %rdx
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp528:
    000001a0: 	movsd	-0x8(%rbp), %xmm2
    000001a5: 	leaq	-0x8(%rbp), %rcx
    000001a9: 	comisd	%xmm1, %xmm2
    000001ad: 	ja	.Ltmp524 # Offset: 429
    000001af: 	cmpq	%rdx, %rcx
    000001b2: 	jbe	.Ltmp525 # Offset: 434
    000001b8: 	movsd	(%rdx), %xmm0
    000001bc: 	leaq	0x8(%rdx), %rax
    000001c0: 	comisd	%xmm0, %xmm1
    000001c4: 	jbe	.Ltmp526 # Offset: 452
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp527:
    000001d0: 	movq	%rax, %rdx
    000001d3: 	movsd	(%rax), %xmm0
    000001d7: 	leaq	0x8(%rax), %rax
    000001db: 	comisd	%xmm0, %xmm1
    000001df: 	ja	.Ltmp527 # Offset: 479
    000001e1: 	cmpq	%rdx, %rcx
    000001e4: 	jbe	.Ltmp525 # Offset: 484
.Ltmp526:
    000001ea: 	movsd	%xmm0, (%rcx)
    000001ee: 	movsd	%xmm2, (%rdx)
.Ltmp524:
    000001f2: 	movq	%rcx, %rbp
    000001f5: 	jmp	.Ltmp528 # Offset: 501
.Ltmp522:
    000001f7: 	movsd	(%rbp), %xmm1
    000001fc: 	movq	%r13, %rbx
    000001ff: 	movq	%rbp, %rdx
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp533:
    00000208: 	comisd	%xmm1, %xmm2
    0000020c: 	leaq	-0x8(%rbx), %rcx
    00000210: 	ja	.Ltmp529 # Offset: 528
    00000212: 	cmpq	%rdx, %rcx
    00000215: 	jbe	.Ltmp530 # Offset: 533
    0000021b: 	movsd	(%rdx), %xmm0
    0000021f: 	leaq	0x8(%rdx), %rax
    00000223: 	comisd	%xmm0, %xmm1
    00000227: 	jbe	.Ltmp531 # Offset: 551
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp532:
    00000230: 	movq	%rax, %rdx
    00000233: 	movsd	(%rax), %xmm0
    00000237: 	leaq	0x8(%rax), %rax
    0000023b: 	comisd	%xmm0, %xmm1
    0000023f: 	ja	.Ltmp532 # Offset: 575
    00000241: 	cmpq	%rdx, %rcx
    00000244: 	jbe	.Ltmp530 # Offset: 580
.Ltmp531:
    0000024a: 	movsd	%xmm0, (%rcx)
    0000024e: 	movsd	%xmm2, (%rdx)
.Ltmp529:
    00000252: 	movsd	-0x8(%rcx), %xmm2
    00000257: 	movq	%rcx, %rbx
    0000025a: 	jmp	.Ltmp533 # Offset: 602
.Ltmp515:
    0000025c: 	movsd	(%r13), %xmm1
    00000262: 	movq	%rbp, %rbx
    00000265: 	movq	%r13, %rdx
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp538:
    00000270: 	movsd	-0x8(%rbx), %xmm2
    00000275: 	leaq	-0x8(%rbx), %rcx
    00000279: 	comisd	%xmm1, %xmm2
    0000027d: 	ja	.Ltmp534 # Offset: 637
    0000027f: 	cmpq	%rdx, %rcx
    00000282: 	jbe	.Ltmp535 # Offset: 642
    00000288: 	movsd	(%rdx), %xmm0
    0000028c: 	leaq	0x8(%rdx), %rax
    00000290: 	comisd	%xmm0, %xmm1
    00000294: 	jbe	.Ltmp536 # Offset: 660
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp537:
    000002a0: 	movq	%rax, %rdx
    000002a3: 	movsd	(%rax), %xmm0
    000002a7: 	leaq	0x8(%rax), %rax
    000002ab: 	comisd	%xmm0, %xmm1
    000002af: 	ja	.Ltmp537 # Offset: 687
    000002b1: 	cmpq	%rdx, %rcx
    000002b4: 	jbe	.Ltmp535 # Offset: 692
.Ltmp536:
    000002ba: 	movsd	%xmm0, (%rcx)
    000002be: 	movsd	%xmm2, (%rdx)
.Ltmp534:
    000002c2: 	movq	%rcx, %rbx
    000002c5: 	jmp	.Ltmp538 # Offset: 709
.Ltmp514:
    000002c7: 	movsd	(%rdi), %xmm1
    000002cb: 	movq	%r13, %rbx
    000002ce: 	movq	%rdi, %rdx
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp543:
    000002d8: 	comisd	%xmm1, %xmm2
    000002dc: 	leaq	-0x8(%rbx), %rcx
    000002e0: 	ja	.Ltmp539 # Offset: 736
    000002e2: 	cmpq	%rdx, %rcx
    000002e5: 	jbe	.Ltmp540 # Offset: 741
    000002e7: 	movsd	(%rdx), %xmm0
    000002eb: 	leaq	0x8(%rdx), %rax
    000002ef: 	comisd	%xmm0, %xmm1
    000002f3: 	jbe	.Ltmp541 # Offset: 755
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp542:
    000002f8: 	movq	%rax, %rdx
    000002fb: 	movsd	(%rax), %xmm0
    000002ff: 	leaq	0x8(%rax), %rax
    00000303: 	comisd	%xmm0, %xmm1
    00000307: 	ja	.Ltmp542 # Offset: 775
    00000309: 	cmpq	%rdx, %rcx
    0000030c: 	jbe	.Ltmp540 # Offset: 780
.Ltmp541:
    0000030e: 	movsd	%xmm0, (%rcx)
    00000312: 	movsd	%xmm2, (%rdx)
.Ltmp539:
    00000316: 	movsd	-0x8(%rcx), %xmm2
    0000031b: 	movq	%rcx, %rbx
    0000031e: 	jmp	.Ltmp543 # Offset: 798
.Ltmp540:
    00000320: 	movq	%rbx, %rax
    00000323: 	subq	%rdi, %rax
    00000326: 	cmpq	$0x8, %rax
    0000032a: 	jle	.Ltmp544 # Offset: 810
    0000032c: 	movsd	(%rdi), %xmm1
    00000330: 	movq	%rbx, %r14
    00000333: 	movq	%rdi, %rdx
    00000336: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp549:
    00000340: 	movsd	-0x8(%r14), %xmm2
    00000346: 	leaq	-0x8(%r14), %rcx
    0000034a: 	comisd	%xmm1, %xmm2
    0000034e: 	ja	.Ltmp545 # Offset: 846
    00000350: 	cmpq	%rdx, %rcx
    00000353: 	jbe	.Ltmp546 # Offset: 851
    00000355: 	movsd	(%rdx), %xmm0
    00000359: 	leaq	0x8(%rdx), %rax
    0000035d: 	comisd	%xmm0, %xmm1
    00000361: 	jbe	.Ltmp547 # Offset: 865
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp548:
    00000368: 	movq	%rax, %rdx
    0000036b: 	movsd	(%rax), %xmm0
    0000036f: 	leaq	0x8(%rax), %rax
    00000373: 	comisd	%xmm0, %xmm1
    00000377: 	ja	.Ltmp548 # Offset: 887
    00000379: 	cmpq	%rdx, %rcx
    0000037c: 	jbe	.Ltmp546 # Offset: 892
.Ltmp547:
    0000037e: 	movsd	%xmm0, (%rcx)
    00000382: 	movsd	%xmm2, (%rdx)
.Ltmp545:
    00000386: 	movq	%rcx, %r14
    00000389: 	jmp	.Ltmp549 # Offset: 905
.Ltmp546:
    0000038b: 	movq	%r14, %rsi
    0000038e: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 910
    00000393: 	movq	%rbx, %rsi
    00000396: 	movq	%r14, %rdi
    00000399: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 921
.Ltmp544:
    0000039e: 	movq	%r13, %rax
    000003a1: 	movq	%rbx, %rdi
    000003a4: 	subq	%rbx, %rax
    000003a7: 	cmpq	$0x8, %rax
    000003ab: 	jle	.Ltmp550 # Offset: 939
    000003b1: 	movsd	(%rbx), %xmm1
    000003b5: 	movq	%r13, %r14
    000003b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp555:
    000003c0: 	movsd	-0x8(%r14), %xmm2
    000003c6: 	leaq	-0x8(%r14), %rdx
    000003ca: 	comisd	%xmm1, %xmm2
    000003ce: 	ja	.Ltmp551 # Offset: 974
    000003d0: 	cmpq	%rbx, %rdx
    000003d3: 	jbe	.Ltmp552 # Offset: 979
    000003d9: 	movsd	(%rbx), %xmm0
    000003dd: 	leaq	0x8(%rbx), %rax
    000003e1: 	comisd	%xmm0, %xmm1
    000003e5: 	jbe	.Ltmp553 # Offset: 997
    000003e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp554:
    000003f0: 	movq	%rax, %rbx
    000003f3: 	movsd	(%rax), %xmm0
    000003f7: 	leaq	0x8(%rax), %rax
    000003fb: 	comisd	%xmm0, %xmm1
    000003ff: 	ja	.Ltmp554 # Offset: 1023
    00000401: 	cmpq	%rbx, %rdx
    00000404: 	jbe	.Ltmp552 # Offset: 1028
.Ltmp553:
    0000040a: 	movsd	%xmm0, (%rdx)
    0000040e: 	movsd	%xmm2, (%rbx)
.Ltmp551:
    00000412: 	movq	%rdx, %r14
    00000415: 	jmp	.Ltmp555 # Offset: 1045
.Ltmp535:
    00000417: 	movq	%rbx, %rax
    0000041a: 	subq	%r13, %rax
    0000041d: 	cmpq	$0x8, %rax
    00000421: 	jle	.Ltmp556 # Offset: 1057
    00000423: 	movsd	(%r13), %xmm1
    00000429: 	movq	%rbx, %r14
    0000042c: 	movq	%r13, %rdx
    0000042f: 	nop # Size: 1
.Ltmp561:
    00000430: 	movsd	-0x8(%r14), %xmm2
    00000436: 	leaq	-0x8(%r14), %rcx
    0000043a: 	comisd	%xmm1, %xmm2
    0000043e: 	ja	.Ltmp557 # Offset: 1086
    00000440: 	cmpq	%rdx, %rcx
    00000443: 	jbe	.Ltmp558 # Offset: 1091
    00000445: 	movsd	(%rdx), %xmm0
    00000449: 	leaq	0x8(%rdx), %rax
    0000044d: 	comisd	%xmm0, %xmm1
    00000451: 	jbe	.Ltmp559 # Offset: 1105
    00000453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp560:
    00000458: 	movq	%rax, %rdx
    0000045b: 	movsd	(%rax), %xmm0
    0000045f: 	leaq	0x8(%rax), %rax
    00000463: 	comisd	%xmm0, %xmm1
    00000467: 	ja	.Ltmp560 # Offset: 1127
    00000469: 	cmpq	%rdx, %rcx
    0000046c: 	jbe	.Ltmp558 # Offset: 1132
.Ltmp559:
    0000046e: 	movsd	%xmm0, (%rcx)
    00000472: 	movsd	%xmm2, (%rdx)
.Ltmp557:
    00000476: 	movq	%rcx, %r14
    00000479: 	jmp	.Ltmp561 # Offset: 1145
.Ltmp558:
    0000047b: 	movq	%r14, %rsi
    0000047e: 	movq	%r13, %rdi
    00000481: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1153
    00000486: 	movq	%rbx, %rsi
    00000489: 	movq	%r14, %rdi
    0000048c: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1164
.Ltmp556:
    00000491: 	movq	%rbp, %rax
    00000494: 	movq	%rbx, %rdi
    00000497: 	subq	%rbx, %rax
    0000049a: 	cmpq	$0x8, %rax
    0000049e: 	jle	.Ltmp508 # Offset: 1182
    000004a4: 	movsd	(%rbx), %xmm1
    000004a8: 	movq	%rbp, %r13
    000004ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp566:
    000004b0: 	movsd	-0x8(%r13), %xmm2
    000004b6: 	leaq	-0x8(%r13), %rdx
    000004ba: 	comisd	%xmm1, %xmm2
    000004be: 	ja	.Ltmp562 # Offset: 1214
    000004c0: 	cmpq	%rbx, %rdx
    000004c3: 	jbe	.Ltmp563 # Offset: 1219
    000004c9: 	movsd	(%rbx), %xmm0
    000004cd: 	leaq	0x8(%rbx), %rax
    000004d1: 	comisd	%xmm0, %xmm1
    000004d5: 	jbe	.Ltmp564 # Offset: 1237
    000004d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp565:
    000004e0: 	movq	%rax, %rbx
    000004e3: 	movsd	(%rax), %xmm0
    000004e7: 	leaq	0x8(%rax), %rax
    000004eb: 	comisd	%xmm0, %xmm1
    000004ef: 	ja	.Ltmp565 # Offset: 1263
    000004f1: 	cmpq	%rbx, %rdx
    000004f4: 	jbe	.Ltmp563 # Offset: 1268
.Ltmp564:
    000004fa: 	movsd	%xmm0, (%rdx)
    000004fe: 	movsd	%xmm2, (%rbx)
.Ltmp562:
    00000502: 	movq	%rdx, %r13
    00000505: 	jmp	.Ltmp566 # Offset: 1285
.Ltmp530:
    00000507: 	movq	%rbx, %rax
    0000050a: 	subq	%rbp, %rax
    0000050d: 	cmpq	$0x8, %rax
    00000511: 	jle	.Ltmp567 # Offset: 1297
    00000513: 	movsd	(%rbp), %xmm1
    00000518: 	movq	%rbx, %r14
    0000051b: 	movq	%rbp, %rdx
    0000051e: 	nop # Size: 2
.Ltmp572:
    00000520: 	movsd	-0x8(%r14), %xmm2
    00000526: 	leaq	-0x8(%r14), %rcx
    0000052a: 	comisd	%xmm1, %xmm2
    0000052e: 	ja	.Ltmp568 # Offset: 1326
    00000530: 	cmpq	%rdx, %rcx
    00000533: 	jbe	.Ltmp569 # Offset: 1331
    00000535: 	movsd	(%rdx), %xmm0
    00000539: 	leaq	0x8(%rdx), %rax
    0000053d: 	comisd	%xmm0, %xmm1
    00000541: 	jbe	.Ltmp570 # Offset: 1345
    00000543: 	nopl	(%rax,%rax) # Size: 5
.Ltmp571:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movsd	(%rax), %xmm0
    0000054f: 	leaq	0x8(%rax), %rax
    00000553: 	comisd	%xmm0, %xmm1
    00000557: 	ja	.Ltmp571 # Offset: 1367
    00000559: 	cmpq	%rdx, %rcx
    0000055c: 	jbe	.Ltmp569 # Offset: 1372
.Ltmp570:
    0000055e: 	movsd	%xmm0, (%rcx)
    00000562: 	movsd	%xmm2, (%rdx)
.Ltmp568:
    00000566: 	movq	%rcx, %r14
    00000569: 	jmp	.Ltmp572 # Offset: 1385
.Ltmp569:
    0000056b: 	movq	%r14, %rsi
    0000056e: 	movq	%rbp, %rdi
    00000571: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1393
    00000576: 	movq	%rbx, %rsi
    00000579: 	movq	%r14, %rdi
    0000057c: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1404
.Ltmp567:
    00000581: 	movq	%r13, %rax
    00000584: 	movq	%rbx, %rdi
    00000587: 	subq	%rbx, %rax
    0000058a: 	cmpq	$0x8, %rax
    0000058e: 	jle	.Ltmp573 # Offset: 1422
    00000594: 	movsd	(%rbx), %xmm1
    00000598: 	movq	%r13, %rbp
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp578:
    000005a0: 	movsd	-0x8(%rbp), %xmm2
    000005a5: 	leaq	-0x8(%rbp), %rdx
    000005a9: 	comisd	%xmm1, %xmm2
    000005ad: 	ja	.Ltmp574 # Offset: 1453
    000005af: 	cmpq	%rbx, %rdx
    000005b2: 	jbe	.Ltmp575 # Offset: 1458
    000005b8: 	movsd	(%rbx), %xmm0
    000005bc: 	leaq	0x8(%rbx), %rax
    000005c0: 	comisd	%xmm0, %xmm1
    000005c4: 	jbe	.Ltmp576 # Offset: 1476
    000005c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp577:
    000005d0: 	movq	%rax, %rbx
    000005d3: 	movsd	(%rax), %xmm0
    000005d7: 	leaq	0x8(%rax), %rax
    000005db: 	comisd	%xmm0, %xmm1
    000005df: 	ja	.Ltmp577 # Offset: 1503
    000005e1: 	cmpq	%rbx, %rdx
    000005e4: 	jbe	.Ltmp575 # Offset: 1508
.Ltmp576:
    000005ea: 	movsd	%xmm0, (%rdx)
    000005ee: 	movsd	%xmm2, (%rbx)
.Ltmp574:
    000005f2: 	movq	%rdx, %rbp
    000005f5: 	jmp	.Ltmp578 # Offset: 1525
.Ltmp525:
    000005f7: 	movq	%rbp, %rax
    000005fa: 	subq	%r13, %rax
    000005fd: 	cmpq	$0x8, %rax
    00000601: 	jle	.Ltmp579 # Offset: 1537
    00000603: 	movsd	(%r13), %xmm1
    00000609: 	movq	%rbp, %r14
    0000060c: 	movq	%r13, %rdx
    0000060f: 	nop # Size: 1
.Ltmp584:
    00000610: 	movsd	-0x8(%r14), %xmm2
    00000616: 	leaq	-0x8(%r14), %rcx
    0000061a: 	comisd	%xmm1, %xmm2
    0000061e: 	ja	.Ltmp580 # Offset: 1566
    00000620: 	cmpq	%rdx, %rcx
    00000623: 	jbe	.Ltmp581 # Offset: 1571
    00000625: 	movsd	(%rdx), %xmm0
    00000629: 	leaq	0x8(%rdx), %rax
    0000062d: 	comisd	%xmm0, %xmm1
    00000631: 	jbe	.Ltmp582 # Offset: 1585
    00000633: 	nopl	(%rax,%rax) # Size: 5
.Ltmp583:
    00000638: 	movq	%rax, %rdx
    0000063b: 	movsd	(%rax), %xmm0
    0000063f: 	leaq	0x8(%rax), %rax
    00000643: 	comisd	%xmm0, %xmm1
    00000647: 	ja	.Ltmp583 # Offset: 1607
    00000649: 	cmpq	%rdx, %rcx
    0000064c: 	jbe	.Ltmp581 # Offset: 1612
.Ltmp582:
    0000064e: 	movsd	%xmm0, (%rcx)
    00000652: 	movsd	%xmm2, (%rdx)
.Ltmp580:
    00000656: 	movq	%rcx, %r14
    00000659: 	jmp	.Ltmp584 # Offset: 1625
.Ltmp581:
    0000065b: 	movq	%r14, %rsi
    0000065e: 	movq	%r13, %rdi
    00000661: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1633
    00000666: 	movq	%rbp, %rsi
    00000669: 	movq	%r14, %rdi
    0000066c: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1644
.Ltmp579:
    00000671: 	movq	%r12, %rax
    00000674: 	movq	%rbp, %rdi
    00000677: 	subq	%rbp, %rax
    0000067a: 	cmpq	$0x8, %rax
    0000067e: 	jle	.Ltmp516 # Offset: 1662
    00000684: 	movsd	(%rbp), %xmm1
    00000689: 	movq	%r12, %r13
    0000068c: 	nopl	(%rax) # Size: 4
.Ltmp589:
    00000690: 	movsd	-0x8(%r13), %xmm2
    00000696: 	leaq	-0x8(%r13), %rdx
    0000069a: 	comisd	%xmm1, %xmm2
    0000069e: 	ja	.Ltmp585 # Offset: 1694
    000006a0: 	cmpq	%rbp, %rdx
    000006a3: 	jbe	.Ltmp586 # Offset: 1699
    000006a5: 	movsd	(%rbp), %xmm0
    000006aa: 	leaq	0x8(%rbp), %rax
    000006ae: 	comisd	%xmm0, %xmm1
    000006b2: 	jbe	.Ltmp587 # Offset: 1714
    000006b4: 	nopl	(%rax) # Size: 4
.Ltmp588:
    000006b8: 	movq	%rax, %rbp
    000006bb: 	movsd	(%rax), %xmm0
    000006bf: 	leaq	0x8(%rax), %rax
    000006c3: 	comisd	%xmm0, %xmm1
    000006c7: 	ja	.Ltmp588 # Offset: 1735
    000006c9: 	cmpq	%rbp, %rdx
    000006cc: 	jbe	.Ltmp586 # Offset: 1740
.Ltmp587:
    000006ce: 	movsd	%xmm0, (%rdx)
    000006d2: 	movsd	%xmm2, (%rbp)
.Ltmp585:
    000006d7: 	movq	%rdx, %r13
    000006da: 	jmp	.Ltmp589 # Offset: 1754
.Ltmp586:
    000006dc: 	movq	%r13, %rsi
    000006df: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1759
    000006e4: 	popq	%rbx
    000006e5: 	movq	%r12, %rsi
    000006e8: 	popq	%rbp
    000006e9: 	movq	%r13, %rdi
    000006ec: 	popq	%r12
    000006ee: 	popq	%r13
    000006f0: 	popq	%r14
    000006f2: 	jmp	.LBB056 # Offset: 1778
.Ltmp575:
    000006f7: 	movq	%rbp, %rsi
    000006fa: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1786
    000006ff: 	movq	%r13, %rsi
    00000702: 	movq	%rbp, %rdi
    00000705: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1797
    0000070a: 	jmp	.Ltmp573 # Offset: 1802
.Ltmp563:
    0000070f: 	movq	%r13, %rsi
    00000712: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1810
    00000717: 	movq	%rbp, %rsi
    0000071a: 	movq	%r13, %rdi
    0000071d: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1821
    00000722: 	jmp	.Ltmp508 # Offset: 1826
.Ltmp552:
    00000727: 	movq	%r14, %rsi
    0000072a: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1834
    0000072f: 	movq	%r13, %rsi
    00000732: 	movq	%r14, %rdi
    00000735: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 1845
    0000073a: 	jmp	.Ltmp550 # Offset: 1850
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_"

Binary Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEEEEvT_S5_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x4fd0
  Size        : 0x99
  MaxSize     : 0xa0
  Offset      : 0x4fd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	cmpq	$0x8, %rdx
    0000000e: 	jle	.Ltmp590 # Offset: 14
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %rax
    00000019: 	movq	%rsi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	subq	$0x8, %rsp
    00000024: 	movsd	(%rdi), %xmm0
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp595:
    00000030: 	movsd	-0x8(%rbp), %xmm1
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm0, %xmm1
    0000003d: 	ja	.Ltmp591 # Offset: 61
    0000003f: 	cmpq	%rax, %rcx
    00000042: 	jbe	.Ltmp592 # Offset: 66
    00000044: 	comisd	(%rax), %xmm0
    00000048: 	leaq	0x8(%rax), %rdx
    0000004c: 	jbe	.Ltmp593 # Offset: 76
    0000004e: 	nop # Size: 2
.Ltmp594:
    00000050: 	movq	%rdx, %rax
    00000053: 	leaq	0x8(%rdx), %rdx
    00000057: 	comisd	(%rax), %xmm0
    0000005b: 	ja	.Ltmp594 # Offset: 91
    0000005d: 	cmpq	%rax, %rcx
    00000060: 	jbe	.Ltmp592 # Offset: 96
.Ltmp593:
    00000062: 	movsd	(%rax), %xmm2
    00000066: 	movsd	%xmm2, (%rcx)
    0000006a: 	movsd	%xmm1, (%rax)
.Ltmp591:
    0000006e: 	movq	%rcx, %rbp
    00000071: 	jmp	.Ltmp595 # Offset: 113
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp592:
    00000078: 	movq	%rbp, %rsi
    0000007b: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEEEEvT_S5_ # Offset: 123
    00000080: 	addq	$0x8, %rsp
    00000084: 	movq	%r12, %rsi
    00000087: 	movq	%rbp, %rdi
    0000008a: 	popq	%rbp
    0000008b: 	popq	%r12
    0000008d: 	jmp	.LBB057 # Offset: 141
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp590:
    00000098: 	retq # Offset: 152
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEvT_SE_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x5070
  Size        : 0x99
  MaxSize     : 0xa0
  Offset      : 0x5070
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEvT_SE_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	cmpq	$0x8, %rdx
    0000000e: 	jle	.Ltmp596 # Offset: 14
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %rax
    00000019: 	movq	%rsi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	subq	$0x8, %rsp
    00000024: 	movsd	(%rdi), %xmm0
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp601:
    00000030: 	movsd	-0x8(%rbp), %xmm1
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm0, %xmm1
    0000003d: 	ja	.Ltmp597 # Offset: 61
    0000003f: 	cmpq	%rax, %rcx
    00000042: 	jbe	.Ltmp598 # Offset: 66
    00000044: 	comisd	(%rax), %xmm0
    00000048: 	leaq	0x8(%rax), %rdx
    0000004c: 	jbe	.Ltmp599 # Offset: 76
    0000004e: 	nop # Size: 2
.Ltmp600:
    00000050: 	movq	%rdx, %rax
    00000053: 	leaq	0x8(%rdx), %rdx
    00000057: 	comisd	(%rax), %xmm0
    0000005b: 	ja	.Ltmp600 # Offset: 91
    0000005d: 	cmpq	%rax, %rcx
    00000060: 	jbe	.Ltmp598 # Offset: 96
.Ltmp599:
    00000062: 	movsd	(%rax), %xmm2
    00000066: 	movsd	%xmm2, (%rcx)
    0000006a: 	movsd	%xmm1, (%rax)
.Ltmp597:
    0000006e: 	movq	%rcx, %rbp
    00000071: 	jmp	.Ltmp601 # Offset: 113
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp598:
    00000078: 	movq	%rbp, %rsi
    0000007b: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEvT_SE_ # Offset: 123
    00000080: 	addq	$0x8, %rsp
    00000084: 	movq	%r12, %rsi
    00000087: 	movq	%rbp, %rdi
    0000008a: 	popq	%rbp
    0000008b: 	popq	%r12
    0000008d: 	jmp	.LBB058 # Offset: 141
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp596:
    00000098: 	retq # Offset: 152
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEvT_SE_"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPddEdEEEvT_S5_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x5110
  Size        : 0xa1
  MaxSize     : 0xb0
  Offset      : 0x5110
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_IPddEdEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp602 # Offset: 14
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %rdx
    00000019: 	movq	%rsi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	subq	$0x8, %rsp
    00000024: 	movsd	(%rdi), %xmm1
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp607:
    00000030: 	movsd	-0x8(%rbp), %xmm2
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm1, %xmm2
    0000003d: 	ja	.Ltmp603 # Offset: 61
    0000003f: 	cmpq	%rdx, %rcx
    00000042: 	jbe	.Ltmp604 # Offset: 66
    00000044: 	movsd	(%rdx), %xmm0
    00000048: 	leaq	0x8(%rdx), %rax
    0000004c: 	comisd	%xmm0, %xmm1
    00000050: 	jbe	.Ltmp605 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp606:
    00000058: 	movq	%rax, %rdx
    0000005b: 	movsd	(%rax), %xmm0
    0000005f: 	leaq	0x8(%rax), %rax
    00000063: 	comisd	%xmm0, %xmm1
    00000067: 	ja	.Ltmp606 # Offset: 103
    00000069: 	cmpq	%rdx, %rcx
    0000006c: 	jbe	.Ltmp604 # Offset: 108
.Ltmp605:
    0000006e: 	movsd	%xmm0, (%rcx)
    00000072: 	movsd	%xmm2, (%rdx)
.Ltmp603:
    00000076: 	movq	%rcx, %rbp
    00000079: 	jmp	.Ltmp607 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp604:
    00000080: 	movq	%rbp, %rsi
    00000083: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPddEdEEEvT_S5_ # Offset: 131
    00000088: 	addq	$0x8, %rsp
    0000008c: 	movq	%r12, %rsi
    0000008f: 	movq	%rbp, %rdi
    00000092: 	popq	%rbp
    00000093: 	popq	%r12
    00000095: 	jmp	.LBB059 # Offset: 149
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp602:
    000000a0: 	retq # Offset: 160
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPddEdEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEEEvT_S6_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x51c0
  Size        : 0xa1
  MaxSize     : 0xb0
  Offset      : 0x51c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEEEvT_S6_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp608 # Offset: 14
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %rdx
    00000019: 	movq	%rsi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	subq	$0x8, %rsp
    00000024: 	movsd	(%rdi), %xmm1
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp613:
    00000030: 	movsd	-0x8(%rbp), %xmm2
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm1, %xmm2
    0000003d: 	ja	.Ltmp609 # Offset: 61
    0000003f: 	cmpq	%rdx, %rcx
    00000042: 	jbe	.Ltmp610 # Offset: 66
    00000044: 	movsd	(%rdx), %xmm0
    00000048: 	leaq	0x8(%rdx), %rax
    0000004c: 	comisd	%xmm0, %xmm1
    00000050: 	jbe	.Ltmp611 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp612:
    00000058: 	movq	%rax, %rdx
    0000005b: 	movsd	(%rax), %xmm0
    0000005f: 	leaq	0x8(%rax), %rax
    00000063: 	comisd	%xmm0, %xmm1
    00000067: 	ja	.Ltmp612 # Offset: 103
    00000069: 	cmpq	%rdx, %rcx
    0000006c: 	jbe	.Ltmp610 # Offset: 108
.Ltmp611:
    0000006e: 	movsd	%xmm0, (%rcx)
    00000072: 	movsd	%xmm2, (%rdx)
.Ltmp609:
    00000076: 	movq	%rcx, %rbp
    00000079: 	jmp	.Ltmp613 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp610:
    00000080: 	movq	%rbp, %rsi
    00000083: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEEEvT_S6_ # Offset: 131
    00000088: 	addq	$0x8, %rsp
    0000008c: 	movq	%r12, %rsi
    0000008f: 	movq	%rbp, %rdi
    00000092: 	popq	%rbp
    00000093: 	popq	%r12
    00000095: 	jmp	.LBB060 # Offset: 149
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp608:
    000000a0: 	retq # Offset: 160
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEEEvT_S6_"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_EEEvT_S8_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x5270
  Size        : 0x99
  MaxSize     : 0xa0
  Offset      : 0x5270
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_EEEvT_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	cmpq	$0x8, %rdx
    0000000e: 	jle	.Ltmp614 # Offset: 14
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %rax
    00000019: 	movq	%rsi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	subq	$0x8, %rsp
    00000024: 	movsd	(%rdi), %xmm0
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp619:
    00000030: 	movsd	-0x8(%rbp), %xmm1
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm0, %xmm1
    0000003d: 	ja	.Ltmp615 # Offset: 61
    0000003f: 	cmpq	%rax, %rcx
    00000042: 	jbe	.Ltmp616 # Offset: 66
    00000044: 	comisd	(%rax), %xmm0
    00000048: 	leaq	0x8(%rax), %rdx
    0000004c: 	jbe	.Ltmp617 # Offset: 76
    0000004e: 	nop # Size: 2
.Ltmp618:
    00000050: 	movq	%rdx, %rax
    00000053: 	leaq	0x8(%rdx), %rdx
    00000057: 	comisd	(%rax), %xmm0
    0000005b: 	ja	.Ltmp618 # Offset: 91
    0000005d: 	cmpq	%rax, %rcx
    00000060: 	jbe	.Ltmp616 # Offset: 96
.Ltmp617:
    00000062: 	movsd	(%rax), %xmm2
    00000066: 	movsd	%xmm2, (%rcx)
    0000006a: 	movsd	%xmm1, (%rax)
.Ltmp615:
    0000006e: 	movq	%rcx, %rbp
    00000071: 	jmp	.Ltmp619 # Offset: 113
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp616:
    00000078: 	movq	%rbp, %rsi
    0000007b: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_EEEvT_S8_ # Offset: 123
    00000080: 	addq	$0x8, %rsp
    00000084: 	movq	%r12, %rsi
    00000087: 	movq	%rbp, %rdi
    0000008a: 	popq	%rbp
    0000008b: 	popq	%r12
    0000008d: 	jmp	.LBB061 # Offset: 141
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp614:
    00000098: 	retq # Offset: 152
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_EEEvT_S8_"

Binary Function "_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x5310
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x5310
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	addq	$0x4, %rdi
    00000008: 	jmp	.Ltmp620 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp622:
    00000010: 	addq	$0x4, %rdi
    00000014: 	movl	-0x8(%rdi), %eax
    00000017: 	cmpl	%eax, -0x4(%rdi)
    0000001a: 	jl	.Ltmp621 # Offset: 26
.Ltmp620:
    0000001c: 	cmpq	%rdi, %rsi
    0000001f: 	jne	.Ltmp622 # Offset: 31
    00000021: 	retq # Offset: 33
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp621:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x141cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12ValueWrapperIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x5350
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x5350
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12ValueWrapperIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	addq	$0x4, %rdi
    00000008: 	jmp	.Ltmp623 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp625:
    00000010: 	addq	$0x4, %rdi
    00000014: 	movl	-0x8(%rdi), %eax
    00000017: 	cmpl	%eax, -0x4(%rdi)
    0000001a: 	jl	.Ltmp624 # Offset: 26
.Ltmp623:
    0000001c: 	cmpq	%rdi, %rsi
    0000001f: 	jne	.Ltmp625 # Offset: 31
    00000021: 	retq # Offset: 33
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp624:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x141cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12ValueWrapperIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IiEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x5390
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x5390
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IiEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	addq	$0x4, %rdi
    00000008: 	jmp	.Ltmp626 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp628:
    00000010: 	addq	$0x4, %rdi
    00000014: 	movl	-0x8(%rdi), %eax
    00000017: 	cmpl	%eax, -0x4(%rdi)
    0000001a: 	jl	.Ltmp627 # Offset: 26
.Ltmp626:
    0000001c: 	cmpq	%rdi, %rsi
    0000001f: 	jne	.Ltmp628 # Offset: 31
    00000021: 	retq # Offset: 33
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp627:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x141cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IiEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x53d0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x53d0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	addq	$0x4, %rdi
    00000008: 	jmp	.Ltmp629 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp631:
    00000010: 	addq	$0x4, %rdi
    00000014: 	movl	-0x8(%rdi), %ecx
    00000017: 	cmpl	%ecx, (%rax)
    00000019: 	jl	.Ltmp630 # Offset: 25
.Ltmp629:
    0000001b: 	movq	%rdi, %rax
    0000001e: 	cmpq	%rdi, %rsi
    00000021: 	jne	.Ltmp631 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp630:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x141cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZN9benchmark9quicksortIPiEEvT_S2_" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x5410
  Size        : 0x41e
  MaxSize     : 0x420
  Offset      : 0x5410
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPiEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x4, %rax
    00000020: 	jle	.Ltmp632 # Offset: 32
.Ltmp644:
    00000022: 	movl	(%rdi), %r8d
    00000025: 	movq	(%rsp), %r13
    00000029: 	movq	%rdi, %rdx
.Ltmp637:
    0000002c: 	movl	-0x4(%r13), %eax
    00000030: 	leaq	-0x4(%r13), %rcx
    00000034: 	cmpl	%r8d, %eax
    00000037: 	jg	.Ltmp633 # Offset: 55
    00000039: 	cmpq	%rcx, %rdx
    0000003c: 	jae	.Ltmp634 # Offset: 60
    0000003e: 	movl	(%rdx), %esi
    00000040: 	cmpl	%esi, %r8d
    00000043: 	jle	.Ltmp635 # Offset: 67
.Ltmp636:
    00000045: 	movl	0x4(%rdx), %esi
    00000048: 	addq	$0x4, %rdx
    0000004c: 	cmpl	%r8d, %esi
    0000004f: 	jl	.Ltmp636 # Offset: 79
    00000051: 	cmpq	%rdx, %rcx
    00000054: 	jbe	.Ltmp634 # Offset: 84
.Ltmp635:
    00000056: 	movl	%esi, (%rcx)
    00000058: 	movl	%eax, (%rdx)
.Ltmp633:
    0000005a: 	movq	%rcx, %r13
    0000005d: 	jmp	.Ltmp637 # Offset: 93
.Ltmp632:
    0000005f: 	addq	$0x28, %rsp
    00000063: 	popq	%rbx
    00000064: 	popq	%rbp
    00000065: 	popq	%r12
    00000067: 	popq	%r13
    00000069: 	popq	%r14
    0000006b: 	popq	%r15
    0000006d: 	retq # Offset: 109
.Ltmp634:
    0000006e: 	movq	%r13, %rdx
    00000071: 	movq	%r13, %r8
    00000074: 	subq	%rdi, %rdx
    00000077: 	cmpq	$0x4, %rdx
    0000007b: 	jle	.Ltmp638 # Offset: 123
.Ltmp696:
    0000007d: 	movl	(%rdi), %r9d
    00000080: 	movq	%r8, %r14
    00000083: 	movq	%rdi, %rdx
.Ltmp643:
    00000086: 	leaq	-0x4(%r14), %rcx
    0000008a: 	cmpl	%eax, %r9d
    0000008d: 	jl	.Ltmp639 # Offset: 141
    0000008f: 	cmpq	%rdx, %rcx
    00000092: 	jbe	.Ltmp640 # Offset: 146
    00000094: 	movl	(%rdx), %esi
    00000096: 	cmpl	%esi, %r9d
    00000099: 	jle	.Ltmp641 # Offset: 153
.Ltmp642:
    0000009b: 	movl	0x4(%rdx), %esi
    0000009e: 	addq	$0x4, %rdx
    000000a2: 	cmpl	%esi, %r9d
    000000a5: 	jg	.Ltmp642 # Offset: 165
    000000a7: 	cmpq	%rdx, %rcx
    000000aa: 	jbe	.Ltmp640 # Offset: 170
.Ltmp641:
    000000ac: 	movl	%esi, (%rcx)
    000000ae: 	movl	%eax, (%rdx)
.Ltmp639:
    000000b0: 	movl	-0x4(%rcx), %eax
    000000b3: 	movq	%rcx, %r14
    000000b6: 	jmp	.Ltmp643 # Offset: 182
.Ltmp695:
    000000b8: 	movq	%r8, %r13
.Ltmp638:
    000000bb: 	movq	(%rsp), %rax
    000000bf: 	subq	%r13, %rax
    000000c2: 	cmpq	$0x4, %rax
    000000c6: 	jle	.Ltmp632 # Offset: 198
    000000c8: 	movq	%r13, %rdi
    000000cb: 	jmp	.Ltmp644 # Offset: 203
.Ltmp640:
    000000d0: 	movq	%r14, %rdx
    000000d3: 	subq	%rdi, %rdx
    000000d6: 	cmpq	$0x4, %rdx
    000000da: 	jle	.Ltmp645 # Offset: 218
    000000e0: 	movq	%r8, 0x8(%rsp)
    000000e5: 	movq	%r14, %rbx
.Ltmp698:
    000000e8: 	movl	(%rdi), %r9d
    000000eb: 	movq	%rbx, %r15
    000000ee: 	movq	%rdi, %rdx
.Ltmp650:
    000000f1: 	leaq	-0x4(%r15), %rcx
    000000f5: 	cmpl	%r9d, %eax
    000000f8: 	jg	.Ltmp646 # Offset: 248
    000000fa: 	cmpq	%rdx, %rcx
    000000fd: 	jbe	.Ltmp647 # Offset: 253
    000000ff: 	movl	(%rdx), %esi
    00000101: 	cmpl	%esi, %r9d
    00000104: 	jle	.Ltmp648 # Offset: 260
.Ltmp649:
    00000106: 	movl	0x4(%rdx), %esi
    00000109: 	addq	$0x4, %rdx
    0000010d: 	cmpl	%esi, %r9d
    00000110: 	jg	.Ltmp649 # Offset: 272
    00000112: 	cmpq	%rdx, %rcx
    00000115: 	jbe	.Ltmp647 # Offset: 277
.Ltmp648:
    00000117: 	movl	%esi, (%rcx)
    00000119: 	movl	%eax, (%rdx)
.Ltmp646:
    0000011b: 	movl	-0x4(%rcx), %eax
    0000011e: 	movq	%rcx, %r15
    00000121: 	jmp	.Ltmp650 # Offset: 289
.Ltmp647:
    00000123: 	movq	%r15, %rdx
    00000126: 	subq	%rdi, %rdx
    00000129: 	cmpq	$0x4, %rdx
    0000012d: 	jle	.Ltmp651 # Offset: 301
    00000133: 	movq	%rbx, 0x10(%rsp)
    00000138: 	movq	%r15, %rbx
.Ltmp694:
    0000013b: 	movl	(%rdi), %r9d
    0000013e: 	movq	%rbx, %r14
    00000141: 	movq	%rdi, %rdx
.Ltmp656:
    00000144: 	leaq	-0x4(%r14), %rcx
    00000148: 	cmpl	%eax, %r9d
    0000014b: 	jl	.Ltmp652 # Offset: 331
    0000014d: 	cmpq	%rdx, %rcx
    00000150: 	jbe	.Ltmp653 # Offset: 336
    00000152: 	movl	(%rdx), %esi
    00000154: 	cmpl	%esi, %r9d
    00000157: 	jle	.Ltmp654 # Offset: 343
.Ltmp655:
    00000159: 	movl	0x4(%rdx), %esi
    0000015c: 	addq	$0x4, %rdx
    00000160: 	cmpl	%esi, %r9d
    00000163: 	jg	.Ltmp655 # Offset: 355
    00000165: 	cmpq	%rdx, %rcx
    00000168: 	jbe	.Ltmp653 # Offset: 360
.Ltmp654:
    0000016a: 	movl	%esi, (%rcx)
    0000016c: 	movl	%eax, (%rdx)
.Ltmp652:
    0000016e: 	movl	-0x4(%rcx), %eax
    00000171: 	movq	%rcx, %r14
    00000174: 	jmp	.Ltmp656 # Offset: 372
.Ltmp653:
    00000176: 	movq	%r14, %rdx
    00000179: 	subq	%rdi, %rdx
    0000017c: 	cmpq	$0x4, %rdx
    00000180: 	jle	.Ltmp657 # Offset: 384
    00000186: 	movq	%rbx, 0x18(%rsp)
    0000018b: 	movq	%r14, %rbx
.Ltmp692:
    0000018e: 	movl	(%rdi), %r9d
    00000191: 	movq	%rbx, %r14
    00000194: 	movq	%rdi, %rdx
.Ltmp662:
    00000197: 	leaq	-0x4(%r14), %rcx
    0000019b: 	cmpl	%eax, %r9d
    0000019e: 	jl	.Ltmp658 # Offset: 414
    000001a0: 	cmpq	%rdx, %rcx
    000001a3: 	jbe	.Ltmp659 # Offset: 419
    000001a5: 	movl	(%rdx), %esi
    000001a7: 	cmpl	%esi, %r9d
    000001aa: 	jle	.Ltmp660 # Offset: 426
.Ltmp661:
    000001ac: 	movl	0x4(%rdx), %esi
    000001af: 	addq	$0x4, %rdx
    000001b3: 	cmpl	%esi, %r9d
    000001b6: 	jg	.Ltmp661 # Offset: 438
    000001b8: 	cmpq	%rdx, %rcx
    000001bb: 	jbe	.Ltmp659 # Offset: 443
.Ltmp660:
    000001bd: 	movl	%esi, (%rcx)
    000001bf: 	movl	%eax, (%rdx)
.Ltmp658:
    000001c1: 	movl	-0x4(%rcx), %eax
    000001c4: 	movq	%rcx, %r14
    000001c7: 	jmp	.Ltmp662 # Offset: 455
.Ltmp659:
    000001c9: 	movq	%r14, %rdx
    000001cc: 	subq	%rdi, %rdx
    000001cf: 	cmpq	$0x4, %rdx
    000001d3: 	jle	.Ltmp663 # Offset: 467
.Ltmp690:
    000001d9: 	movl	(%rdi), %r8d
    000001dc: 	movq	%r14, %r15
    000001df: 	movq	%rdi, %rdx
.Ltmp668:
    000001e2: 	leaq	-0x4(%r15), %rcx
    000001e6: 	cmpl	%eax, %r8d
    000001e9: 	jl	.Ltmp664 # Offset: 489
    000001eb: 	cmpq	%rdx, %rcx
    000001ee: 	jbe	.Ltmp665 # Offset: 494
    000001f0: 	movl	(%rdx), %esi
    000001f2: 	cmpl	%esi, %r8d
    000001f5: 	jle	.Ltmp666 # Offset: 501
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp667:
    00000200: 	movl	0x4(%rdx), %esi
    00000203: 	addq	$0x4, %rdx
    00000207: 	cmpl	%esi, %r8d
    0000020a: 	jg	.Ltmp667 # Offset: 522
    0000020c: 	cmpq	%rdx, %rcx
    0000020f: 	jbe	.Ltmp665 # Offset: 527
.Ltmp666:
    00000211: 	movl	%esi, (%rcx)
    00000213: 	movl	%eax, (%rdx)
.Ltmp664:
    00000215: 	movl	-0x4(%rcx), %eax
    00000218: 	movq	%rcx, %r15
    0000021b: 	jmp	.Ltmp668 # Offset: 539
.Ltmp665:
    0000021d: 	movq	%r15, %rdx
    00000220: 	subq	%rdi, %rdx
    00000223: 	cmpq	$0x4, %rdx
    00000227: 	jle	.Ltmp669 # Offset: 551
.Ltmp689:
    0000022d: 	movl	(%rdi), %r8d
    00000230: 	movq	%r15, %r12
    00000233: 	movq	%rdi, %rdx
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp687:
    00000240: 	leaq	-0x4(%r12), %rsi
    00000245: 	cmpl	%eax, %r8d
    00000248: 	jl	.Ltmp670 # Offset: 584
    0000024e: 	cmpq	%rdx, %rsi
    00000251: 	jbe	.Ltmp671 # Offset: 593
    00000253: 	movl	(%rdx), %ecx
    00000255: 	cmpl	%ecx, %r8d
    00000258: 	jle	.Ltmp672 # Offset: 600
    0000025e: 	nop # Size: 2
.Ltmp673:
    00000260: 	movl	0x4(%rdx), %ecx
    00000263: 	addq	$0x4, %rdx
    00000267: 	cmpl	%ecx, %r8d
    0000026a: 	jg	.Ltmp673 # Offset: 618
    0000026c: 	cmpq	%rdx, %rsi
    0000026f: 	ja	.Ltmp672 # Offset: 623
.Ltmp671:
    00000275: 	movq	%r12, %rdx
    00000278: 	subq	%rdi, %rdx
    0000027b: 	cmpq	$0x4, %rdx
    0000027f: 	jle	.Ltmp674 # Offset: 639
.Ltmp686:
    00000285: 	movl	(%rdi), %esi
    00000287: 	movq	%r12, %rbp
    0000028a: 	movq	%rdi, %rdx
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp685:
    00000290: 	leaq	-0x4(%rbp), %rcx
    00000294: 	cmpl	%esi, %eax
    00000296: 	jg	.Ltmp675 # Offset: 662
    0000029c: 	cmpq	%rdx, %rcx
    0000029f: 	jbe	.Ltmp676 # Offset: 671
    000002a1: 	movl	(%rdx), %r8d
    000002a4: 	cmpl	%r8d, %esi
    000002a7: 	jle	.Ltmp677 # Offset: 679
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp678:
    000002b0: 	movl	0x4(%rdx), %r8d
    000002b4: 	addq	$0x4, %rdx
    000002b8: 	cmpl	%r8d, %esi
    000002bb: 	jg	.Ltmp678 # Offset: 699
    000002bd: 	cmpq	%rdx, %rcx
    000002c0: 	ja	.Ltmp677 # Offset: 704
.Ltmp676:
    000002c2: 	movq	%rbp, %rax
    000002c5: 	subq	%rdi, %rax
    000002c8: 	cmpq	$0x4, %rax
    000002cc: 	jle	.Ltmp679 # Offset: 716
.Ltmp684:
    000002ce: 	movl	(%rdi), %ecx
    000002d0: 	movq	%rbp, %r13
    000002d3: 	movq	%rdi, %rax
    000002d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp688:
    000002e0: 	movl	-0x4(%r13), %r8d
    000002e4: 	leaq	-0x4(%r13), %rsi
    000002e8: 	cmpl	%r8d, %ecx
    000002eb: 	jl	.Ltmp680 # Offset: 747
    000002f1: 	cmpq	%rax, %rsi
    000002f4: 	jbe	.Ltmp681 # Offset: 756
    000002f6: 	movl	(%rax), %edx
    000002f8: 	cmpl	%edx, %ecx
    000002fa: 	jle	.Ltmp682 # Offset: 762
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp683:
    00000300: 	movl	0x4(%rax), %edx
    00000303: 	addq	$0x4, %rax
    00000307: 	cmpl	%edx, %ecx
    00000309: 	jg	.Ltmp683 # Offset: 777
    0000030b: 	cmpq	%rax, %rsi
    0000030e: 	ja	.Ltmp682 # Offset: 782
.Ltmp681:
    00000310: 	movq	%r13, %rsi
    00000313: 	callq	_ZN9benchmark9quicksortIPiEEvT_S2_ # Offset: 787
    00000318: 	movq	%rbp, %rax
    0000031b: 	subq	%r13, %rax
    0000031e: 	cmpq	$0x4, %rax
    00000322: 	jle	.Ltmp679 # Offset: 802
    00000324: 	movq	%r13, %rdi
    00000327: 	jmp	.Ltmp684 # Offset: 807
.Ltmp677:
    00000329: 	movl	%r8d, (%rcx)
    0000032c: 	movl	%eax, (%rdx)
.Ltmp675:
    0000032e: 	movl	-0x4(%rcx), %eax
    00000331: 	movq	%rcx, %rbp
    00000334: 	jmp	.Ltmp685 # Offset: 820
.Ltmp679:
    00000339: 	movq	%r12, %rax
    0000033c: 	subq	%rbp, %rax
    0000033f: 	cmpq	$0x4, %rax
    00000343: 	jle	.Ltmp674 # Offset: 835
    00000345: 	movl	-0x4(%r12), %eax
    0000034a: 	movq	%rbp, %rdi
    0000034d: 	jmp	.Ltmp686 # Offset: 845
.Ltmp672:
    00000352: 	movl	%ecx, (%rsi)
    00000354: 	movl	%eax, (%rdx)
.Ltmp670:
    00000356: 	movl	-0x4(%rsi), %eax
    00000359: 	movq	%rsi, %r12
    0000035c: 	jmp	.Ltmp687 # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp682:
    00000368: 	movl	%edx, (%rsi)
    0000036a: 	movl	%r8d, (%rax)
.Ltmp680:
    0000036d: 	movq	%rsi, %r13
    00000370: 	jmp	.Ltmp688 # Offset: 880
.Ltmp674:
    00000375: 	movq	%r15, %rax
    00000378: 	subq	%r12, %rax
    0000037b: 	cmpq	$0x4, %rax
    0000037f: 	jle	.Ltmp669 # Offset: 895
    00000381: 	movl	-0x4(%r15), %eax
    00000385: 	movq	%r12, %rdi
    00000388: 	jmp	.Ltmp689 # Offset: 904
.Ltmp669:
    0000038d: 	movq	%r14, %rax
    00000390: 	subq	%r15, %rax
    00000393: 	cmpq	$0x4, %rax
    00000397: 	jle	.Ltmp663 # Offset: 919
    00000399: 	movl	-0x4(%r14), %eax
    0000039d: 	movq	%r15, %rdi
    000003a0: 	jmp	.Ltmp690 # Offset: 928
.Ltmp663:
    000003a5: 	movq	%rbx, %rax
    000003a8: 	subq	%r14, %rax
    000003ab: 	cmpq	$0x4, %rax
    000003af: 	jle	.Ltmp691 # Offset: 943
    000003b1: 	movl	-0x4(%rbx), %eax
    000003b4: 	movq	%r14, %rdi
    000003b7: 	jmp	.Ltmp692 # Offset: 951
.Ltmp691:
    000003bc: 	movq	%rbx, %r14
    000003bf: 	movq	0x18(%rsp), %rbx
.Ltmp657:
    000003c4: 	movq	%rbx, %rax
    000003c7: 	subq	%r14, %rax
    000003ca: 	cmpq	$0x4, %rax
    000003ce: 	jle	.Ltmp693 # Offset: 974
    000003d0: 	movl	-0x4(%rbx), %eax
    000003d3: 	movq	%r14, %rdi
    000003d6: 	jmp	.Ltmp694 # Offset: 982
.Ltmp697:
    000003db: 	movq	0x8(%rsp), %r8
    000003e0: 	movq	%rbx, %r14
.Ltmp645:
    000003e3: 	movq	%r8, %rax
    000003e6: 	subq	%r14, %rax
    000003e9: 	cmpq	$0x4, %rax
    000003ed: 	jle	.Ltmp695 # Offset: 1005
    000003f3: 	movl	-0x4(%r8), %eax
    000003f7: 	movq	%r14, %rdi
    000003fa: 	jmp	.Ltmp696 # Offset: 1018
.Ltmp693:
    000003ff: 	movq	%rbx, %r15
    00000402: 	movq	0x10(%rsp), %rbx
.Ltmp651:
    00000407: 	movq	%rbx, %rax
    0000040a: 	subq	%r15, %rax
    0000040d: 	cmpq	$0x4, %rax
    00000411: 	jle	.Ltmp697 # Offset: 1041
    00000413: 	movl	-0x4(%rbx), %eax
    00000416: 	movq	%r15, %rdi
    00000419: 	jmp	.Ltmp698 # Offset: 1049
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPiEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x5830
  Size        : 0x643
  MaxSize     : 0x650
  Offset      : 0x5830
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x4, %rax
    0000000e: 	jle	.Ltmp699 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movl	(%rdi), %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp704:
    00000030: 	movl	-0x4(%rbp), %edi
    00000033: 	leaq	-0x4(%rbp), %r8
    00000037: 	cmpl	%esi, %edi
    00000039: 	jg	.Ltmp700 # Offset: 57
    0000003b: 	cmpq	%rdx, %r8
    0000003e: 	jbe	.Ltmp701 # Offset: 62
    00000040: 	movl	(%rdx), %ecx
    00000042: 	cmpl	%ecx, %esi
    00000044: 	jle	.Ltmp702 # Offset: 68
    00000046: 	leaq	0x4(%rdx), %rax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp703:
    00000050: 	movq	%rax, %rdx
    00000053: 	movl	(%rax), %ecx
    00000055: 	leaq	0x4(%rax), %rax
    00000059: 	cmpl	%esi, %ecx
    0000005b: 	jl	.Ltmp703 # Offset: 91
    0000005d: 	cmpq	%rdx, %r8
    00000060: 	jbe	.Ltmp701 # Offset: 96
.Ltmp702:
    00000062: 	movl	%ecx, (%r8)
    00000065: 	movl	%edi, (%rdx)
.Ltmp700:
    00000067: 	movq	%r8, %rbp
    0000006a: 	jmp	.Ltmp704 # Offset: 106
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp701:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x4, %rax
    0000007a: 	jle	.Ltmp705 # Offset: 122
    0000007c: 	movl	(%r9), %esi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp710:
    00000088: 	leaq	-0x4(%r13), %r8
    0000008c: 	cmpl	%edi, %esi
    0000008e: 	jl	.Ltmp706 # Offset: 142
    00000090: 	cmpq	%rdx, %r8
    00000093: 	jbe	.Ltmp707 # Offset: 147
    00000095: 	movl	(%rdx), %ecx
    00000097: 	cmpl	%ecx, %esi
    00000099: 	jle	.Ltmp708 # Offset: 153
    0000009b: 	leaq	0x4(%rdx), %rax
    0000009f: 	nop # Size: 1
.Ltmp709:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movl	(%rax), %ecx
    000000a5: 	leaq	0x4(%rax), %rax
    000000a9: 	cmpl	%ecx, %esi
    000000ab: 	jg	.Ltmp709 # Offset: 171
    000000ad: 	cmpq	%rdx, %r8
    000000b0: 	jbe	.Ltmp707 # Offset: 176
.Ltmp708:
    000000b2: 	movl	%ecx, (%r8)
    000000b5: 	movl	%edi, (%rdx)
.Ltmp706:
    000000b7: 	movl	-0x4(%r8), %edi
    000000bb: 	movq	%r8, %r13
    000000be: 	jmp	.Ltmp710 # Offset: 190
.Ltmp707:
    000000c0: 	movq	%r13, %rax
    000000c3: 	subq	%r9, %rax
    000000c6: 	cmpq	$0x4, %rax
    000000ca: 	jg	.Ltmp711 # Offset: 202
.Ltmp747:
    000000d0: 	movq	%rbp, %rax
    000000d3: 	subq	%r13, %rax
    000000d6: 	cmpq	$0x4, %rax
    000000da: 	jg	.Ltmp712 # Offset: 218
.Ltmp705:
    000000e0: 	movq	%r12, %rax
    000000e3: 	subq	%rbp, %rax
    000000e6: 	cmpq	$0x4, %rax
    000000ea: 	jle	.Ltmp713 # Offset: 234
    000000ec: 	movl	(%rbp), %esi
    000000ef: 	movq	%r12, %r13
    000000f2: 	movq	%rbp, %rdx
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp718:
    000000f8: 	movl	-0x4(%r13), %edi
    000000fc: 	leaq	-0x4(%r13), %r8
    00000100: 	cmpl	%edi, %esi
    00000102: 	jl	.Ltmp714 # Offset: 258
    00000104: 	cmpq	%rdx, %r8
    00000107: 	jbe	.Ltmp715 # Offset: 263
    00000109: 	movl	(%rdx), %ecx
    0000010b: 	cmpl	%ecx, %esi
    0000010d: 	jle	.Ltmp716 # Offset: 269
    0000010f: 	leaq	0x4(%rdx), %rax
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp717:
    00000118: 	movq	%rax, %rdx
    0000011b: 	movl	(%rax), %ecx
    0000011d: 	leaq	0x4(%rax), %rax
    00000121: 	cmpl	%ecx, %esi
    00000123: 	jg	.Ltmp717 # Offset: 291
    00000125: 	cmpq	%rdx, %r8
    00000128: 	jbe	.Ltmp715 # Offset: 296
.Ltmp716:
    0000012a: 	movl	%ecx, (%r8)
    0000012d: 	movl	%edi, (%rdx)
.Ltmp714:
    0000012f: 	movq	%r8, %r13
    00000132: 	jmp	.Ltmp718 # Offset: 306
.Ltmp715:
    00000134: 	movq	%r13, %rax
    00000137: 	subq	%rbp, %rax
    0000013a: 	cmpq	$0x4, %rax
    0000013e: 	jg	.Ltmp719 # Offset: 318
.Ltmp770:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%r13, %rax
    00000146: 	cmpq	$0x4, %rax
    0000014a: 	jg	.Ltmp720 # Offset: 330
.Ltmp713:
    0000014c: 	popq	%rbx
    0000014d: 	popq	%rbp
    0000014e: 	popq	%r12
    00000150: 	popq	%r13
    00000152: 	popq	%r14
    00000154: 	retq # Offset: 340
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp699:
    00000158: 	retq # Offset: 344
.Ltmp720:
    00000159: 	movl	(%r13), %esi
    0000015d: 	movq	%r12, %rbp
    00000160: 	movq	%r13, %rdx
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp725:
    00000168: 	movl	-0x4(%rbp), %r8d
    0000016c: 	leaq	-0x4(%rbp), %rdi
    00000170: 	cmpl	%r8d, %esi
    00000173: 	jl	.Ltmp721 # Offset: 371
    00000175: 	cmpq	%rdx, %rdi
    00000178: 	jbe	.Ltmp722 # Offset: 376
    0000017e: 	movl	(%rdx), %ecx
    00000180: 	cmpl	%esi, %ecx
    00000182: 	jge	.Ltmp723 # Offset: 386
    00000184: 	leaq	0x4(%rdx), %rax
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp724:
    00000190: 	movq	%rax, %rdx
    00000193: 	movl	(%rax), %ecx
    00000195: 	leaq	0x4(%rax), %rax
    00000199: 	cmpl	%ecx, %esi
    0000019b: 	jg	.Ltmp724 # Offset: 411
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	jbe	.Ltmp722 # Offset: 416
.Ltmp723:
    000001a6: 	movl	%ecx, (%rdi)
    000001a8: 	movl	%r8d, (%rdx)
.Ltmp721:
    000001ab: 	movq	%rdi, %rbp
    000001ae: 	jmp	.Ltmp725 # Offset: 430
.Ltmp719:
    000001b0: 	movl	(%rbp), %esi
    000001b3: 	movq	%r13, %rbx
    000001b6: 	movq	%rbp, %rdx
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp730:
    000001c0: 	leaq	-0x4(%rbx), %r8
    000001c4: 	cmpl	%edi, %esi
    000001c6: 	jl	.Ltmp726 # Offset: 454
    000001c8: 	cmpq	%rdx, %r8
    000001cb: 	jbe	.Ltmp727 # Offset: 459
    000001d1: 	movl	(%rdx), %ecx
    000001d3: 	cmpl	%esi, %ecx
    000001d5: 	jge	.Ltmp728 # Offset: 469
    000001d7: 	leaq	0x4(%rdx), %rax
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp729:
    000001e0: 	movq	%rax, %rdx
    000001e3: 	movl	(%rax), %ecx
    000001e5: 	leaq	0x4(%rax), %rax
    000001e9: 	cmpl	%ecx, %esi
    000001eb: 	jg	.Ltmp729 # Offset: 491
    000001ed: 	cmpq	%rdx, %r8
    000001f0: 	jbe	.Ltmp727 # Offset: 496
.Ltmp728:
    000001f6: 	movl	%ecx, (%r8)
    000001f9: 	movl	%edi, (%rdx)
.Ltmp726:
    000001fb: 	movl	-0x4(%r8), %edi
    000001ff: 	movq	%r8, %rbx
    00000202: 	jmp	.Ltmp730 # Offset: 514
.Ltmp712:
    00000204: 	movl	(%r13), %esi
    00000208: 	movq	%rbp, %rbx
    0000020b: 	movq	%r13, %rdx
    0000020e: 	nop # Size: 2
.Ltmp735:
    00000210: 	movl	-0x4(%rbx), %r8d
    00000214: 	leaq	-0x4(%rbx), %rdi
    00000218: 	cmpl	%r8d, %esi
    0000021b: 	jl	.Ltmp731 # Offset: 539
    0000021d: 	cmpq	%rdx, %rdi
    00000220: 	jbe	.Ltmp732 # Offset: 544
    00000226: 	movl	(%rdx), %ecx
    00000228: 	cmpl	%ecx, %esi
    0000022a: 	jle	.Ltmp733 # Offset: 554
    0000022c: 	leaq	0x4(%rdx), %rax
.Ltmp734:
    00000230: 	movq	%rax, %rdx
    00000233: 	movl	(%rax), %ecx
    00000235: 	leaq	0x4(%rax), %rax
    00000239: 	cmpl	%ecx, %esi
    0000023b: 	jg	.Ltmp734 # Offset: 571
    0000023d: 	cmpq	%rdx, %rdi
    00000240: 	jbe	.Ltmp732 # Offset: 576
.Ltmp733:
    00000246: 	movl	%ecx, (%rdi)
    00000248: 	movl	%r8d, (%rdx)
.Ltmp731:
    0000024b: 	movq	%rdi, %rbx
    0000024e: 	jmp	.Ltmp735 # Offset: 590
.Ltmp711:
    00000250: 	movl	(%r9), %esi
    00000253: 	movq	%r13, %rbx
    00000256: 	movq	%r9, %rdx
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp740:
    00000260: 	leaq	-0x4(%rbx), %r8
    00000264: 	cmpl	%edi, %esi
    00000266: 	jl	.Ltmp736 # Offset: 614
    00000268: 	cmpq	%rdx, %r8
    0000026b: 	jbe	.Ltmp737 # Offset: 619
    0000026d: 	movl	(%rdx), %ecx
    0000026f: 	cmpl	%ecx, %esi
    00000271: 	jle	.Ltmp738 # Offset: 625
    00000273: 	leaq	0x4(%rdx), %rax
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp739:
    00000280: 	movq	%rax, %rdx
    00000283: 	movl	(%rax), %ecx
    00000285: 	leaq	0x4(%rax), %rax
    00000289: 	cmpl	%ecx, %esi
    0000028b: 	jg	.Ltmp739 # Offset: 651
    0000028d: 	cmpq	%rdx, %r8
    00000290: 	jbe	.Ltmp737 # Offset: 656
.Ltmp738:
    00000292: 	movl	%ecx, (%r8)
    00000295: 	movl	%edi, (%rdx)
.Ltmp736:
    00000297: 	movl	-0x4(%r8), %edi
    0000029b: 	movq	%r8, %rbx
    0000029e: 	jmp	.Ltmp740 # Offset: 670
.Ltmp737:
    000002a0: 	movq	%rbx, %rax
    000002a3: 	subq	%r9, %rax
    000002a6: 	cmpq	$0x4, %rax
    000002aa: 	jle	.Ltmp741 # Offset: 682
    000002ac: 	movl	(%r9), %esi
    000002af: 	movq	%rbx, %r14
    000002b2: 	movq	%r9, %rdx
    000002b5: 	nopl	(%rax) # Size: 3
.Ltmp746:
    000002b8: 	movl	-0x4(%r14), %r8d
    000002bc: 	leaq	-0x4(%r14), %rdi
    000002c0: 	cmpl	%r8d, %esi
    000002c3: 	jl	.Ltmp742 # Offset: 707
    000002c5: 	cmpq	%rdx, %rdi
    000002c8: 	jbe	.Ltmp743 # Offset: 712
    000002ca: 	movl	(%rdx), %ecx
    000002cc: 	cmpl	%ecx, %esi
    000002ce: 	jle	.Ltmp744 # Offset: 718
    000002d0: 	leaq	0x4(%rdx), %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp745:
    000002d8: 	movq	%rax, %rdx
    000002db: 	movl	(%rax), %ecx
    000002dd: 	leaq	0x4(%rax), %rax
    000002e1: 	cmpl	%ecx, %esi
    000002e3: 	jg	.Ltmp745 # Offset: 739
    000002e5: 	cmpq	%rdx, %rdi
    000002e8: 	jbe	.Ltmp743 # Offset: 744
.Ltmp744:
    000002ea: 	movl	%ecx, (%rdi)
    000002ec: 	movl	%r8d, (%rdx)
.Ltmp742:
    000002ef: 	movq	%rdi, %r14
    000002f2: 	jmp	.Ltmp746 # Offset: 754
.Ltmp743:
    000002f4: 	movq	%r14, %rsi
    000002f7: 	movq	%r9, %rdi
    000002fa: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 762
    000002ff: 	movq	%rbx, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 773
.Ltmp741:
    0000030a: 	movq	%r13, %rax
    0000030d: 	movq	%rbx, %r8
    00000310: 	subq	%rbx, %rax
    00000313: 	cmpq	$0x4, %rax
    00000317: 	jle	.Ltmp747 # Offset: 791
    0000031d: 	movl	(%rbx), %ecx
    0000031f: 	movq	%r13, %r14
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp752:
    00000328: 	movl	-0x4(%r14), %edi
    0000032c: 	leaq	-0x4(%r14), %rsi
    00000330: 	cmpl	%edi, %ecx
    00000332: 	jl	.Ltmp748 # Offset: 818
    00000334: 	cmpq	%rbx, %rsi
    00000337: 	jbe	.Ltmp749 # Offset: 823
    0000033d: 	movl	(%rbx), %edx
    0000033f: 	cmpl	%ecx, %edx
    00000341: 	jge	.Ltmp750 # Offset: 833
    00000343: 	leaq	0x4(%rbx), %rax
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp751:
    00000350: 	movq	%rax, %rbx
    00000353: 	movl	(%rax), %edx
    00000355: 	leaq	0x4(%rax), %rax
    00000359: 	cmpl	%edx, %ecx
    0000035b: 	jg	.Ltmp751 # Offset: 859
    0000035d: 	cmpq	%rbx, %rsi
    00000360: 	jbe	.Ltmp749 # Offset: 864
.Ltmp750:
    00000366: 	movl	%edx, (%rsi)
    00000368: 	movl	%edi, (%rbx)
.Ltmp748:
    0000036a: 	movq	%rsi, %r14
    0000036d: 	jmp	.Ltmp752 # Offset: 877
.Ltmp732:
    0000036f: 	movq	%rbx, %rax
    00000372: 	subq	%r13, %rax
    00000375: 	cmpq	$0x4, %rax
    00000379: 	jle	.Ltmp753 # Offset: 889
    0000037b: 	movl	(%r13), %esi
    0000037f: 	movq	%rbx, %r14
    00000382: 	movq	%r13, %rdx
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp758:
    00000388: 	movl	-0x4(%r14), %r8d
    0000038c: 	leaq	-0x4(%r14), %rdi
    00000390: 	cmpl	%r8d, %esi
    00000393: 	jl	.Ltmp754 # Offset: 915
    00000395: 	cmpq	%rdx, %rdi
    00000398: 	jbe	.Ltmp755 # Offset: 920
    0000039a: 	movl	(%rdx), %ecx
    0000039c: 	cmpl	%esi, %ecx
    0000039e: 	jge	.Ltmp756 # Offset: 926
    000003a0: 	leaq	0x4(%rdx), %rax
    000003a4: 	nopl	(%rax) # Size: 4
.Ltmp757:
    000003a8: 	movq	%rax, %rdx
    000003ab: 	movl	(%rax), %ecx
    000003ad: 	leaq	0x4(%rax), %rax
    000003b1: 	cmpl	%ecx, %esi
    000003b3: 	jg	.Ltmp757 # Offset: 947
    000003b5: 	cmpq	%rdx, %rdi
    000003b8: 	jbe	.Ltmp755 # Offset: 952
.Ltmp756:
    000003ba: 	movl	%ecx, (%rdi)
    000003bc: 	movl	%r8d, (%rdx)
.Ltmp754:
    000003bf: 	movq	%rdi, %r14
    000003c2: 	jmp	.Ltmp758 # Offset: 962
.Ltmp755:
    000003c4: 	movq	%r14, %rsi
    000003c7: 	movq	%r13, %rdi
    000003ca: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 970
    000003cf: 	movq	%rbx, %rsi
    000003d2: 	movq	%r14, %rdi
    000003d5: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 981
.Ltmp753:
    000003da: 	movq	%rbp, %rax
    000003dd: 	movq	%rbx, %r8
    000003e0: 	subq	%rbx, %rax
    000003e3: 	cmpq	$0x4, %rax
    000003e7: 	jle	.Ltmp705 # Offset: 999
    000003ed: 	movl	(%rbx), %ecx
    000003ef: 	movq	%rbp, %r13
    000003f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp763:
    000003f8: 	movl	-0x4(%r13), %edi
    000003fc: 	leaq	-0x4(%r13), %rsi
    00000400: 	cmpl	%edi, %ecx
    00000402: 	jl	.Ltmp759 # Offset: 1026
    00000404: 	cmpq	%rbx, %rsi
    00000407: 	jbe	.Ltmp760 # Offset: 1031
    0000040d: 	movl	(%rbx), %edx
    0000040f: 	cmpl	%edx, %ecx
    00000411: 	jle	.Ltmp761 # Offset: 1041
    00000413: 	leaq	0x4(%rbx), %rax
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp762:
    00000420: 	movq	%rax, %rbx
    00000423: 	movl	(%rax), %edx
    00000425: 	leaq	0x4(%rax), %rax
    00000429: 	cmpl	%edx, %ecx
    0000042b: 	jg	.Ltmp762 # Offset: 1067
    0000042d: 	cmpq	%rbx, %rsi
    00000430: 	jbe	.Ltmp760 # Offset: 1072
.Ltmp761:
    00000436: 	movl	%edx, (%rsi)
    00000438: 	movl	%edi, (%rbx)
.Ltmp759:
    0000043a: 	movq	%rsi, %r13
    0000043d: 	jmp	.Ltmp763 # Offset: 1085
.Ltmp727:
    0000043f: 	movq	%rbx, %rax
    00000442: 	subq	%rbp, %rax
    00000445: 	cmpq	$0x4, %rax
    00000449: 	jle	.Ltmp764 # Offset: 1097
    0000044b: 	movl	(%rbp), %esi
    0000044e: 	movq	%rbx, %r14
    00000451: 	movq	%rbp, %rdx
    00000454: 	nopl	(%rax) # Size: 4
.Ltmp769:
    00000458: 	movl	-0x4(%r14), %r8d
    0000045c: 	leaq	-0x4(%r14), %rdi
    00000460: 	cmpl	%r8d, %esi
    00000463: 	jl	.Ltmp765 # Offset: 1123
    00000465: 	cmpq	%rdx, %rdi
    00000468: 	jbe	.Ltmp766 # Offset: 1128
    0000046a: 	movl	(%rdx), %ecx
    0000046c: 	cmpl	%esi, %ecx
    0000046e: 	jge	.Ltmp767 # Offset: 1134
    00000470: 	leaq	0x4(%rdx), %rax
    00000474: 	nopl	(%rax) # Size: 4
.Ltmp768:
    00000478: 	movq	%rax, %rdx
    0000047b: 	movl	(%rax), %ecx
    0000047d: 	leaq	0x4(%rax), %rax
    00000481: 	cmpl	%ecx, %esi
    00000483: 	jg	.Ltmp768 # Offset: 1155
    00000485: 	cmpq	%rdx, %rdi
    00000488: 	jbe	.Ltmp766 # Offset: 1160
.Ltmp767:
    0000048a: 	movl	%ecx, (%rdi)
    0000048c: 	movl	%r8d, (%rdx)
.Ltmp765:
    0000048f: 	movq	%rdi, %r14
    00000492: 	jmp	.Ltmp769 # Offset: 1170
.Ltmp766:
    00000494: 	movq	%r14, %rsi
    00000497: 	movq	%rbp, %rdi
    0000049a: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1178
    0000049f: 	movq	%rbx, %rsi
    000004a2: 	movq	%r14, %rdi
    000004a5: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1189
.Ltmp764:
    000004aa: 	movq	%r13, %rax
    000004ad: 	movq	%rbx, %r8
    000004b0: 	subq	%rbx, %rax
    000004b3: 	cmpq	$0x4, %rax
    000004b7: 	jle	.Ltmp770 # Offset: 1207
    000004bd: 	movl	(%rbx), %ecx
    000004bf: 	movq	%r13, %rbp
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp775:
    000004c8: 	movl	-0x4(%rbp), %edi
    000004cb: 	leaq	-0x4(%rbp), %rsi
    000004cf: 	cmpl	%edi, %ecx
    000004d1: 	jl	.Ltmp771 # Offset: 1233
    000004d3: 	cmpq	%rbx, %rsi
    000004d6: 	jbe	.Ltmp772 # Offset: 1238
    000004dc: 	movl	(%rbx), %edx
    000004de: 	cmpl	%edx, %ecx
    000004e0: 	jle	.Ltmp773 # Offset: 1248
    000004e2: 	leaq	0x4(%rbx), %rax
    000004e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp774:
    000004f0: 	movq	%rax, %rbx
    000004f3: 	movl	(%rax), %edx
    000004f5: 	leaq	0x4(%rax), %rax
    000004f9: 	cmpl	%edx, %ecx
    000004fb: 	jg	.Ltmp774 # Offset: 1275
    000004fd: 	cmpq	%rbx, %rsi
    00000500: 	jbe	.Ltmp772 # Offset: 1280
.Ltmp773:
    00000506: 	movl	%edx, (%rsi)
    00000508: 	movl	%edi, (%rbx)
.Ltmp771:
    0000050a: 	movq	%rsi, %rbp
    0000050d: 	jmp	.Ltmp775 # Offset: 1293
.Ltmp722:
    0000050f: 	movq	%rbp, %rax
    00000512: 	subq	%r13, %rax
    00000515: 	cmpq	$0x4, %rax
    00000519: 	jle	.Ltmp776 # Offset: 1305
    0000051b: 	movl	(%r13), %esi
    0000051f: 	movq	%rbp, %r14
    00000522: 	movq	%r13, %rdx
    00000525: 	nopl	(%rax) # Size: 3
.Ltmp781:
    00000528: 	movl	-0x4(%r14), %r8d
    0000052c: 	leaq	-0x4(%r14), %rdi
    00000530: 	cmpl	%r8d, %esi
    00000533: 	jl	.Ltmp777 # Offset: 1331
    00000535: 	cmpq	%rdx, %rdi
    00000538: 	jbe	.Ltmp778 # Offset: 1336
    0000053a: 	movl	(%rdx), %ecx
    0000053c: 	cmpl	%esi, %ecx
    0000053e: 	jge	.Ltmp779 # Offset: 1342
    00000540: 	leaq	0x4(%rdx), %rax
    00000544: 	nopl	(%rax) # Size: 4
.Ltmp780:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movl	(%rax), %ecx
    0000054d: 	leaq	0x4(%rax), %rax
    00000551: 	cmpl	%ecx, %esi
    00000553: 	jg	.Ltmp780 # Offset: 1363
    00000555: 	cmpq	%rdx, %rdi
    00000558: 	jbe	.Ltmp778 # Offset: 1368
.Ltmp779:
    0000055a: 	movl	%ecx, (%rdi)
    0000055c: 	movl	%r8d, (%rdx)
.Ltmp777:
    0000055f: 	movq	%rdi, %r14
    00000562: 	jmp	.Ltmp781 # Offset: 1378
.Ltmp778:
    00000564: 	movq	%r14, %rsi
    00000567: 	movq	%r13, %rdi
    0000056a: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1386
    0000056f: 	movq	%rbp, %rsi
    00000572: 	movq	%r14, %rdi
    00000575: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1397
.Ltmp776:
    0000057a: 	movq	%r12, %rax
    0000057d: 	movq	%rbp, %r8
    00000580: 	subq	%rbp, %rax
    00000583: 	cmpq	$0x4, %rax
    00000587: 	jle	.Ltmp713 # Offset: 1415
    0000058d: 	movl	(%rbp), %ecx
    00000590: 	movq	%r12, %r13
    00000593: 	nopl	(%rax,%rax) # Size: 5
.Ltmp786:
    00000598: 	movl	-0x4(%r13), %edi
    0000059c: 	leaq	-0x4(%r13), %rsi
    000005a0: 	cmpl	%edi, %ecx
    000005a2: 	jl	.Ltmp782 # Offset: 1442
    000005a4: 	cmpq	%rbp, %rsi
    000005a7: 	jbe	.Ltmp783 # Offset: 1447
    000005a9: 	movl	(%rbp), %edx
    000005ac: 	cmpl	%ecx, %edx
    000005ae: 	jge	.Ltmp784 # Offset: 1454
    000005b0: 	leaq	0x4(%rbp), %rax
    000005b4: 	nopl	(%rax) # Size: 4
.Ltmp785:
    000005b8: 	movq	%rax, %rbp
    000005bb: 	movl	(%rax), %edx
    000005bd: 	leaq	0x4(%rax), %rax
    000005c1: 	cmpl	%edx, %ecx
    000005c3: 	jg	.Ltmp785 # Offset: 1475
    000005c5: 	cmpq	%rbp, %rsi
    000005c8: 	jbe	.Ltmp783 # Offset: 1480
.Ltmp784:
    000005ca: 	movl	%edx, (%rsi)
    000005cc: 	movl	%edi, (%rbp)
.Ltmp782:
    000005cf: 	movq	%rsi, %r13
    000005d2: 	jmp	.Ltmp786 # Offset: 1490
.Ltmp783:
    000005d4: 	movq	%r13, %rsi
    000005d7: 	movq	%r8, %rdi
    000005da: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1498
    000005df: 	popq	%rbx
    000005e0: 	movq	%r12, %rsi
    000005e3: 	popq	%rbp
    000005e4: 	movq	%r13, %rdi
    000005e7: 	popq	%r12
    000005e9: 	popq	%r13
    000005eb: 	popq	%r14
    000005ed: 	jmp	.LBB067 # Offset: 1517
.Ltmp772:
    000005f2: 	movq	%rbp, %rsi
    000005f5: 	movq	%r8, %rdi
    000005f8: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1528
    000005fd: 	movq	%r13, %rsi
    00000600: 	movq	%rbp, %rdi
    00000603: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1539
    00000608: 	jmp	.Ltmp770 # Offset: 1544
.Ltmp760:
    0000060d: 	movq	%r13, %rsi
    00000610: 	movq	%r8, %rdi
    00000613: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1555
    00000618: 	movq	%rbp, %rsi
    0000061b: 	movq	%r13, %rdi
    0000061e: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1566
    00000623: 	jmp	.Ltmp705 # Offset: 1571
.Ltmp749:
    00000628: 	movq	%r14, %rsi
    0000062b: 	movq	%r8, %rdi
    0000062e: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1582
    00000633: 	movq	%r13, %rsi
    00000636: 	movq	%r14, %rdi
    00000639: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 1593
    0000063e: 	jmp	.Ltmp747 # Offset: 1598
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_"

Binary Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIiEEEEvT_S5_" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x5e80
  Size        : 0x89
  MaxSize     : 0x90
  Offset      : 0x5e80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIiEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	cmpq	$0x4, %rdx
    0000000e: 	jle	.Ltmp787 # Offset: 14
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %rax
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	subq	$0x8, %rsp
    00000020: 	movl	(%rdi), %ecx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp792:
    00000028: 	movl	-0x4(%rbp), %r8d
    0000002c: 	leaq	-0x4(%rbp), %rsi
    00000030: 	cmpl	%r8d, %ecx
    00000033: 	jl	.Ltmp788 # Offset: 51
    00000035: 	cmpq	%rax, %rsi
    00000038: 	jbe	.Ltmp789 # Offset: 56
    0000003a: 	cmpl	(%rax), %ecx
    0000003c: 	jle	.Ltmp790 # Offset: 60
    0000003e: 	leaq	0x4(%rax), %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp791:
    00000048: 	movq	%rdx, %rax
    0000004b: 	leaq	0x4(%rdx), %rdx
    0000004f: 	cmpl	(%rax), %ecx
    00000051: 	jg	.Ltmp791 # Offset: 81
    00000053: 	cmpq	%rax, %rsi
    00000056: 	jbe	.Ltmp789 # Offset: 86
.Ltmp790:
    00000058: 	movl	(%rax), %edx
    0000005a: 	movl	%edx, (%rsi)
    0000005c: 	movl	%r8d, (%rax)
.Ltmp788:
    0000005f: 	movq	%rsi, %rbp
    00000062: 	jmp	.Ltmp792 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp789:
    00000068: 	movq	%rbp, %rsi
    0000006b: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIiEEEEvT_S5_ # Offset: 107
    00000070: 	addq	$0x8, %rsp
    00000074: 	movq	%r12, %rsi
    00000077: 	movq	%rbp, %rdi
    0000007a: 	popq	%rbp
    0000007b: 	popq	%r12
    0000007d: 	jmp	.LBB068 # Offset: 125
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp787:
    00000088: 	retq # Offset: 136
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIiEEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEEEEvT_SE_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x5f10
  Size        : 0x89
  MaxSize     : 0x90
  Offset      : 0x5f10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEEEEvT_SE_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	cmpq	$0x4, %rdx
    0000000e: 	jle	.Ltmp793 # Offset: 14
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %rax
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	subq	$0x8, %rsp
    00000020: 	movl	(%rdi), %ecx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp798:
    00000028: 	movl	-0x4(%rbp), %r8d
    0000002c: 	leaq	-0x4(%rbp), %rsi
    00000030: 	cmpl	%r8d, %ecx
    00000033: 	jl	.Ltmp794 # Offset: 51
    00000035: 	cmpq	%rax, %rsi
    00000038: 	jbe	.Ltmp795 # Offset: 56
    0000003a: 	cmpl	(%rax), %ecx
    0000003c: 	jle	.Ltmp796 # Offset: 60
    0000003e: 	leaq	0x4(%rax), %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp797:
    00000048: 	movq	%rdx, %rax
    0000004b: 	leaq	0x4(%rdx), %rdx
    0000004f: 	cmpl	(%rax), %ecx
    00000051: 	jg	.Ltmp797 # Offset: 81
    00000053: 	cmpq	%rax, %rsi
    00000056: 	jbe	.Ltmp795 # Offset: 86
.Ltmp796:
    00000058: 	movl	(%rax), %edx
    0000005a: 	movl	%edx, (%rsi)
    0000005c: 	movl	%r8d, (%rax)
.Ltmp794:
    0000005f: 	movq	%rsi, %rbp
    00000062: 	jmp	.Ltmp798 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp795:
    00000068: 	movq	%rbp, %rsi
    0000006b: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEEEEvT_SE_ # Offset: 107
    00000070: 	addq	$0x8, %rsp
    00000074: 	movq	%r12, %rsi
    00000077: 	movq	%rbp, %rdi
    0000007a: 	popq	%rbp
    0000007b: 	popq	%r12
    0000007d: 	jmp	.LBB069 # Offset: 125
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp793:
    00000088: 	retq # Offset: 136
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEEEEvT_SE_"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x5fa0
  Size        : 0x643
  MaxSize     : 0x650
  Offset      : 0x5fa0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x4, %rax
    0000000e: 	jle	.Ltmp799 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movl	(%rdi), %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp804:
    00000030: 	movl	-0x4(%rbp), %edi
    00000033: 	leaq	-0x4(%rbp), %r8
    00000037: 	cmpl	%esi, %edi
    00000039: 	jg	.Ltmp800 # Offset: 57
    0000003b: 	cmpq	%rdx, %r8
    0000003e: 	jbe	.Ltmp801 # Offset: 62
    00000040: 	movl	(%rdx), %ecx
    00000042: 	cmpl	%ecx, %esi
    00000044: 	jle	.Ltmp802 # Offset: 68
    00000046: 	leaq	0x4(%rdx), %rax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp803:
    00000050: 	movq	%rax, %rdx
    00000053: 	movl	(%rax), %ecx
    00000055: 	leaq	0x4(%rax), %rax
    00000059: 	cmpl	%esi, %ecx
    0000005b: 	jl	.Ltmp803 # Offset: 91
    0000005d: 	cmpq	%rdx, %r8
    00000060: 	jbe	.Ltmp801 # Offset: 96
.Ltmp802:
    00000062: 	movl	%ecx, (%r8)
    00000065: 	movl	%edi, (%rdx)
.Ltmp800:
    00000067: 	movq	%r8, %rbp
    0000006a: 	jmp	.Ltmp804 # Offset: 106
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp801:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x4, %rax
    0000007a: 	jle	.Ltmp805 # Offset: 122
    0000007c: 	movl	(%r9), %esi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp810:
    00000088: 	leaq	-0x4(%r13), %r8
    0000008c: 	cmpl	%edi, %esi
    0000008e: 	jl	.Ltmp806 # Offset: 142
    00000090: 	cmpq	%rdx, %r8
    00000093: 	jbe	.Ltmp807 # Offset: 147
    00000095: 	movl	(%rdx), %ecx
    00000097: 	cmpl	%ecx, %esi
    00000099: 	jle	.Ltmp808 # Offset: 153
    0000009b: 	leaq	0x4(%rdx), %rax
    0000009f: 	nop # Size: 1
.Ltmp809:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movl	(%rax), %ecx
    000000a5: 	leaq	0x4(%rax), %rax
    000000a9: 	cmpl	%ecx, %esi
    000000ab: 	jg	.Ltmp809 # Offset: 171
    000000ad: 	cmpq	%rdx, %r8
    000000b0: 	jbe	.Ltmp807 # Offset: 176
.Ltmp808:
    000000b2: 	movl	%ecx, (%r8)
    000000b5: 	movl	%edi, (%rdx)
.Ltmp806:
    000000b7: 	movl	-0x4(%r8), %edi
    000000bb: 	movq	%r8, %r13
    000000be: 	jmp	.Ltmp810 # Offset: 190
.Ltmp807:
    000000c0: 	movq	%r13, %rax
    000000c3: 	subq	%r9, %rax
    000000c6: 	cmpq	$0x4, %rax
    000000ca: 	jg	.Ltmp811 # Offset: 202
.Ltmp847:
    000000d0: 	movq	%rbp, %rax
    000000d3: 	subq	%r13, %rax
    000000d6: 	cmpq	$0x4, %rax
    000000da: 	jg	.Ltmp812 # Offset: 218
.Ltmp805:
    000000e0: 	movq	%r12, %rax
    000000e3: 	subq	%rbp, %rax
    000000e6: 	cmpq	$0x4, %rax
    000000ea: 	jle	.Ltmp813 # Offset: 234
    000000ec: 	movl	(%rbp), %esi
    000000ef: 	movq	%r12, %r13
    000000f2: 	movq	%rbp, %rdx
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp818:
    000000f8: 	movl	-0x4(%r13), %edi
    000000fc: 	leaq	-0x4(%r13), %r8
    00000100: 	cmpl	%edi, %esi
    00000102: 	jl	.Ltmp814 # Offset: 258
    00000104: 	cmpq	%rdx, %r8
    00000107: 	jbe	.Ltmp815 # Offset: 263
    00000109: 	movl	(%rdx), %ecx
    0000010b: 	cmpl	%ecx, %esi
    0000010d: 	jle	.Ltmp816 # Offset: 269
    0000010f: 	leaq	0x4(%rdx), %rax
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp817:
    00000118: 	movq	%rax, %rdx
    0000011b: 	movl	(%rax), %ecx
    0000011d: 	leaq	0x4(%rax), %rax
    00000121: 	cmpl	%ecx, %esi
    00000123: 	jg	.Ltmp817 # Offset: 291
    00000125: 	cmpq	%rdx, %r8
    00000128: 	jbe	.Ltmp815 # Offset: 296
.Ltmp816:
    0000012a: 	movl	%ecx, (%r8)
    0000012d: 	movl	%edi, (%rdx)
.Ltmp814:
    0000012f: 	movq	%r8, %r13
    00000132: 	jmp	.Ltmp818 # Offset: 306
.Ltmp815:
    00000134: 	movq	%r13, %rax
    00000137: 	subq	%rbp, %rax
    0000013a: 	cmpq	$0x4, %rax
    0000013e: 	jg	.Ltmp819 # Offset: 318
.Ltmp870:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%r13, %rax
    00000146: 	cmpq	$0x4, %rax
    0000014a: 	jg	.Ltmp820 # Offset: 330
.Ltmp813:
    0000014c: 	popq	%rbx
    0000014d: 	popq	%rbp
    0000014e: 	popq	%r12
    00000150: 	popq	%r13
    00000152: 	popq	%r14
    00000154: 	retq # Offset: 340
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp799:
    00000158: 	retq # Offset: 344
.Ltmp820:
    00000159: 	movl	(%r13), %esi
    0000015d: 	movq	%r12, %rbp
    00000160: 	movq	%r13, %rdx
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp825:
    00000168: 	movl	-0x4(%rbp), %r8d
    0000016c: 	leaq	-0x4(%rbp), %rdi
    00000170: 	cmpl	%r8d, %esi
    00000173: 	jl	.Ltmp821 # Offset: 371
    00000175: 	cmpq	%rdx, %rdi
    00000178: 	jbe	.Ltmp822 # Offset: 376
    0000017e: 	movl	(%rdx), %ecx
    00000180: 	cmpl	%esi, %ecx
    00000182: 	jge	.Ltmp823 # Offset: 386
    00000184: 	leaq	0x4(%rdx), %rax
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp824:
    00000190: 	movq	%rax, %rdx
    00000193: 	movl	(%rax), %ecx
    00000195: 	leaq	0x4(%rax), %rax
    00000199: 	cmpl	%ecx, %esi
    0000019b: 	jg	.Ltmp824 # Offset: 411
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	jbe	.Ltmp822 # Offset: 416
.Ltmp823:
    000001a6: 	movl	%ecx, (%rdi)
    000001a8: 	movl	%r8d, (%rdx)
.Ltmp821:
    000001ab: 	movq	%rdi, %rbp
    000001ae: 	jmp	.Ltmp825 # Offset: 430
.Ltmp819:
    000001b0: 	movl	(%rbp), %esi
    000001b3: 	movq	%r13, %rbx
    000001b6: 	movq	%rbp, %rdx
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp830:
    000001c0: 	leaq	-0x4(%rbx), %r8
    000001c4: 	cmpl	%edi, %esi
    000001c6: 	jl	.Ltmp826 # Offset: 454
    000001c8: 	cmpq	%rdx, %r8
    000001cb: 	jbe	.Ltmp827 # Offset: 459
    000001d1: 	movl	(%rdx), %ecx
    000001d3: 	cmpl	%esi, %ecx
    000001d5: 	jge	.Ltmp828 # Offset: 469
    000001d7: 	leaq	0x4(%rdx), %rax
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp829:
    000001e0: 	movq	%rax, %rdx
    000001e3: 	movl	(%rax), %ecx
    000001e5: 	leaq	0x4(%rax), %rax
    000001e9: 	cmpl	%ecx, %esi
    000001eb: 	jg	.Ltmp829 # Offset: 491
    000001ed: 	cmpq	%rdx, %r8
    000001f0: 	jbe	.Ltmp827 # Offset: 496
.Ltmp828:
    000001f6: 	movl	%ecx, (%r8)
    000001f9: 	movl	%edi, (%rdx)
.Ltmp826:
    000001fb: 	movl	-0x4(%r8), %edi
    000001ff: 	movq	%r8, %rbx
    00000202: 	jmp	.Ltmp830 # Offset: 514
.Ltmp812:
    00000204: 	movl	(%r13), %esi
    00000208: 	movq	%rbp, %rbx
    0000020b: 	movq	%r13, %rdx
    0000020e: 	nop # Size: 2
.Ltmp835:
    00000210: 	movl	-0x4(%rbx), %r8d
    00000214: 	leaq	-0x4(%rbx), %rdi
    00000218: 	cmpl	%r8d, %esi
    0000021b: 	jl	.Ltmp831 # Offset: 539
    0000021d: 	cmpq	%rdx, %rdi
    00000220: 	jbe	.Ltmp832 # Offset: 544
    00000226: 	movl	(%rdx), %ecx
    00000228: 	cmpl	%ecx, %esi
    0000022a: 	jle	.Ltmp833 # Offset: 554
    0000022c: 	leaq	0x4(%rdx), %rax
.Ltmp834:
    00000230: 	movq	%rax, %rdx
    00000233: 	movl	(%rax), %ecx
    00000235: 	leaq	0x4(%rax), %rax
    00000239: 	cmpl	%ecx, %esi
    0000023b: 	jg	.Ltmp834 # Offset: 571
    0000023d: 	cmpq	%rdx, %rdi
    00000240: 	jbe	.Ltmp832 # Offset: 576
.Ltmp833:
    00000246: 	movl	%ecx, (%rdi)
    00000248: 	movl	%r8d, (%rdx)
.Ltmp831:
    0000024b: 	movq	%rdi, %rbx
    0000024e: 	jmp	.Ltmp835 # Offset: 590
.Ltmp811:
    00000250: 	movl	(%r9), %esi
    00000253: 	movq	%r13, %rbx
    00000256: 	movq	%r9, %rdx
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp840:
    00000260: 	leaq	-0x4(%rbx), %r8
    00000264: 	cmpl	%edi, %esi
    00000266: 	jl	.Ltmp836 # Offset: 614
    00000268: 	cmpq	%rdx, %r8
    0000026b: 	jbe	.Ltmp837 # Offset: 619
    0000026d: 	movl	(%rdx), %ecx
    0000026f: 	cmpl	%ecx, %esi
    00000271: 	jle	.Ltmp838 # Offset: 625
    00000273: 	leaq	0x4(%rdx), %rax
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp839:
    00000280: 	movq	%rax, %rdx
    00000283: 	movl	(%rax), %ecx
    00000285: 	leaq	0x4(%rax), %rax
    00000289: 	cmpl	%ecx, %esi
    0000028b: 	jg	.Ltmp839 # Offset: 651
    0000028d: 	cmpq	%rdx, %r8
    00000290: 	jbe	.Ltmp837 # Offset: 656
.Ltmp838:
    00000292: 	movl	%ecx, (%r8)
    00000295: 	movl	%edi, (%rdx)
.Ltmp836:
    00000297: 	movl	-0x4(%r8), %edi
    0000029b: 	movq	%r8, %rbx
    0000029e: 	jmp	.Ltmp840 # Offset: 670
.Ltmp837:
    000002a0: 	movq	%rbx, %rax
    000002a3: 	subq	%r9, %rax
    000002a6: 	cmpq	$0x4, %rax
    000002aa: 	jle	.Ltmp841 # Offset: 682
    000002ac: 	movl	(%r9), %esi
    000002af: 	movq	%rbx, %r14
    000002b2: 	movq	%r9, %rdx
    000002b5: 	nopl	(%rax) # Size: 3
.Ltmp846:
    000002b8: 	movl	-0x4(%r14), %r8d
    000002bc: 	leaq	-0x4(%r14), %rdi
    000002c0: 	cmpl	%r8d, %esi
    000002c3: 	jl	.Ltmp842 # Offset: 707
    000002c5: 	cmpq	%rdx, %rdi
    000002c8: 	jbe	.Ltmp843 # Offset: 712
    000002ca: 	movl	(%rdx), %ecx
    000002cc: 	cmpl	%ecx, %esi
    000002ce: 	jle	.Ltmp844 # Offset: 718
    000002d0: 	leaq	0x4(%rdx), %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp845:
    000002d8: 	movq	%rax, %rdx
    000002db: 	movl	(%rax), %ecx
    000002dd: 	leaq	0x4(%rax), %rax
    000002e1: 	cmpl	%ecx, %esi
    000002e3: 	jg	.Ltmp845 # Offset: 739
    000002e5: 	cmpq	%rdx, %rdi
    000002e8: 	jbe	.Ltmp843 # Offset: 744
.Ltmp844:
    000002ea: 	movl	%ecx, (%rdi)
    000002ec: 	movl	%r8d, (%rdx)
.Ltmp842:
    000002ef: 	movq	%rdi, %r14
    000002f2: 	jmp	.Ltmp846 # Offset: 754
.Ltmp843:
    000002f4: 	movq	%r14, %rsi
    000002f7: 	movq	%r9, %rdi
    000002fa: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 762
    000002ff: 	movq	%rbx, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 773
.Ltmp841:
    0000030a: 	movq	%r13, %rax
    0000030d: 	movq	%rbx, %r8
    00000310: 	subq	%rbx, %rax
    00000313: 	cmpq	$0x4, %rax
    00000317: 	jle	.Ltmp847 # Offset: 791
    0000031d: 	movl	(%rbx), %ecx
    0000031f: 	movq	%r13, %r14
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp852:
    00000328: 	movl	-0x4(%r14), %edi
    0000032c: 	leaq	-0x4(%r14), %rsi
    00000330: 	cmpl	%edi, %ecx
    00000332: 	jl	.Ltmp848 # Offset: 818
    00000334: 	cmpq	%rbx, %rsi
    00000337: 	jbe	.Ltmp849 # Offset: 823
    0000033d: 	movl	(%rbx), %edx
    0000033f: 	cmpl	%ecx, %edx
    00000341: 	jge	.Ltmp850 # Offset: 833
    00000343: 	leaq	0x4(%rbx), %rax
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp851:
    00000350: 	movq	%rax, %rbx
    00000353: 	movl	(%rax), %edx
    00000355: 	leaq	0x4(%rax), %rax
    00000359: 	cmpl	%edx, %ecx
    0000035b: 	jg	.Ltmp851 # Offset: 859
    0000035d: 	cmpq	%rbx, %rsi
    00000360: 	jbe	.Ltmp849 # Offset: 864
.Ltmp850:
    00000366: 	movl	%edx, (%rsi)
    00000368: 	movl	%edi, (%rbx)
.Ltmp848:
    0000036a: 	movq	%rsi, %r14
    0000036d: 	jmp	.Ltmp852 # Offset: 877
.Ltmp832:
    0000036f: 	movq	%rbx, %rax
    00000372: 	subq	%r13, %rax
    00000375: 	cmpq	$0x4, %rax
    00000379: 	jle	.Ltmp853 # Offset: 889
    0000037b: 	movl	(%r13), %esi
    0000037f: 	movq	%rbx, %r14
    00000382: 	movq	%r13, %rdx
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp858:
    00000388: 	movl	-0x4(%r14), %r8d
    0000038c: 	leaq	-0x4(%r14), %rdi
    00000390: 	cmpl	%r8d, %esi
    00000393: 	jl	.Ltmp854 # Offset: 915
    00000395: 	cmpq	%rdx, %rdi
    00000398: 	jbe	.Ltmp855 # Offset: 920
    0000039a: 	movl	(%rdx), %ecx
    0000039c: 	cmpl	%esi, %ecx
    0000039e: 	jge	.Ltmp856 # Offset: 926
    000003a0: 	leaq	0x4(%rdx), %rax
    000003a4: 	nopl	(%rax) # Size: 4
.Ltmp857:
    000003a8: 	movq	%rax, %rdx
    000003ab: 	movl	(%rax), %ecx
    000003ad: 	leaq	0x4(%rax), %rax
    000003b1: 	cmpl	%ecx, %esi
    000003b3: 	jg	.Ltmp857 # Offset: 947
    000003b5: 	cmpq	%rdx, %rdi
    000003b8: 	jbe	.Ltmp855 # Offset: 952
.Ltmp856:
    000003ba: 	movl	%ecx, (%rdi)
    000003bc: 	movl	%r8d, (%rdx)
.Ltmp854:
    000003bf: 	movq	%rdi, %r14
    000003c2: 	jmp	.Ltmp858 # Offset: 962
.Ltmp855:
    000003c4: 	movq	%r14, %rsi
    000003c7: 	movq	%r13, %rdi
    000003ca: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 970
    000003cf: 	movq	%rbx, %rsi
    000003d2: 	movq	%r14, %rdi
    000003d5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 981
.Ltmp853:
    000003da: 	movq	%rbp, %rax
    000003dd: 	movq	%rbx, %r8
    000003e0: 	subq	%rbx, %rax
    000003e3: 	cmpq	$0x4, %rax
    000003e7: 	jle	.Ltmp805 # Offset: 999
    000003ed: 	movl	(%rbx), %ecx
    000003ef: 	movq	%rbp, %r13
    000003f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp863:
    000003f8: 	movl	-0x4(%r13), %edi
    000003fc: 	leaq	-0x4(%r13), %rsi
    00000400: 	cmpl	%edi, %ecx
    00000402: 	jl	.Ltmp859 # Offset: 1026
    00000404: 	cmpq	%rbx, %rsi
    00000407: 	jbe	.Ltmp860 # Offset: 1031
    0000040d: 	movl	(%rbx), %edx
    0000040f: 	cmpl	%edx, %ecx
    00000411: 	jle	.Ltmp861 # Offset: 1041
    00000413: 	leaq	0x4(%rbx), %rax
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp862:
    00000420: 	movq	%rax, %rbx
    00000423: 	movl	(%rax), %edx
    00000425: 	leaq	0x4(%rax), %rax
    00000429: 	cmpl	%edx, %ecx
    0000042b: 	jg	.Ltmp862 # Offset: 1067
    0000042d: 	cmpq	%rbx, %rsi
    00000430: 	jbe	.Ltmp860 # Offset: 1072
.Ltmp861:
    00000436: 	movl	%edx, (%rsi)
    00000438: 	movl	%edi, (%rbx)
.Ltmp859:
    0000043a: 	movq	%rsi, %r13
    0000043d: 	jmp	.Ltmp863 # Offset: 1085
.Ltmp827:
    0000043f: 	movq	%rbx, %rax
    00000442: 	subq	%rbp, %rax
    00000445: 	cmpq	$0x4, %rax
    00000449: 	jle	.Ltmp864 # Offset: 1097
    0000044b: 	movl	(%rbp), %esi
    0000044e: 	movq	%rbx, %r14
    00000451: 	movq	%rbp, %rdx
    00000454: 	nopl	(%rax) # Size: 4
.Ltmp869:
    00000458: 	movl	-0x4(%r14), %r8d
    0000045c: 	leaq	-0x4(%r14), %rdi
    00000460: 	cmpl	%r8d, %esi
    00000463: 	jl	.Ltmp865 # Offset: 1123
    00000465: 	cmpq	%rdx, %rdi
    00000468: 	jbe	.Ltmp866 # Offset: 1128
    0000046a: 	movl	(%rdx), %ecx
    0000046c: 	cmpl	%esi, %ecx
    0000046e: 	jge	.Ltmp867 # Offset: 1134
    00000470: 	leaq	0x4(%rdx), %rax
    00000474: 	nopl	(%rax) # Size: 4
.Ltmp868:
    00000478: 	movq	%rax, %rdx
    0000047b: 	movl	(%rax), %ecx
    0000047d: 	leaq	0x4(%rax), %rax
    00000481: 	cmpl	%ecx, %esi
    00000483: 	jg	.Ltmp868 # Offset: 1155
    00000485: 	cmpq	%rdx, %rdi
    00000488: 	jbe	.Ltmp866 # Offset: 1160
.Ltmp867:
    0000048a: 	movl	%ecx, (%rdi)
    0000048c: 	movl	%r8d, (%rdx)
.Ltmp865:
    0000048f: 	movq	%rdi, %r14
    00000492: 	jmp	.Ltmp869 # Offset: 1170
.Ltmp866:
    00000494: 	movq	%r14, %rsi
    00000497: 	movq	%rbp, %rdi
    0000049a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1178
    0000049f: 	movq	%rbx, %rsi
    000004a2: 	movq	%r14, %rdi
    000004a5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1189
.Ltmp864:
    000004aa: 	movq	%r13, %rax
    000004ad: 	movq	%rbx, %r8
    000004b0: 	subq	%rbx, %rax
    000004b3: 	cmpq	$0x4, %rax
    000004b7: 	jle	.Ltmp870 # Offset: 1207
    000004bd: 	movl	(%rbx), %ecx
    000004bf: 	movq	%r13, %rbp
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp875:
    000004c8: 	movl	-0x4(%rbp), %edi
    000004cb: 	leaq	-0x4(%rbp), %rsi
    000004cf: 	cmpl	%edi, %ecx
    000004d1: 	jl	.Ltmp871 # Offset: 1233
    000004d3: 	cmpq	%rbx, %rsi
    000004d6: 	jbe	.Ltmp872 # Offset: 1238
    000004dc: 	movl	(%rbx), %edx
    000004de: 	cmpl	%edx, %ecx
    000004e0: 	jle	.Ltmp873 # Offset: 1248
    000004e2: 	leaq	0x4(%rbx), %rax
    000004e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp874:
    000004f0: 	movq	%rax, %rbx
    000004f3: 	movl	(%rax), %edx
    000004f5: 	leaq	0x4(%rax), %rax
    000004f9: 	cmpl	%edx, %ecx
    000004fb: 	jg	.Ltmp874 # Offset: 1275
    000004fd: 	cmpq	%rbx, %rsi
    00000500: 	jbe	.Ltmp872 # Offset: 1280
.Ltmp873:
    00000506: 	movl	%edx, (%rsi)
    00000508: 	movl	%edi, (%rbx)
.Ltmp871:
    0000050a: 	movq	%rsi, %rbp
    0000050d: 	jmp	.Ltmp875 # Offset: 1293
.Ltmp822:
    0000050f: 	movq	%rbp, %rax
    00000512: 	subq	%r13, %rax
    00000515: 	cmpq	$0x4, %rax
    00000519: 	jle	.Ltmp876 # Offset: 1305
    0000051b: 	movl	(%r13), %esi
    0000051f: 	movq	%rbp, %r14
    00000522: 	movq	%r13, %rdx
    00000525: 	nopl	(%rax) # Size: 3
.Ltmp881:
    00000528: 	movl	-0x4(%r14), %r8d
    0000052c: 	leaq	-0x4(%r14), %rdi
    00000530: 	cmpl	%r8d, %esi
    00000533: 	jl	.Ltmp877 # Offset: 1331
    00000535: 	cmpq	%rdx, %rdi
    00000538: 	jbe	.Ltmp878 # Offset: 1336
    0000053a: 	movl	(%rdx), %ecx
    0000053c: 	cmpl	%esi, %ecx
    0000053e: 	jge	.Ltmp879 # Offset: 1342
    00000540: 	leaq	0x4(%rdx), %rax
    00000544: 	nopl	(%rax) # Size: 4
.Ltmp880:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movl	(%rax), %ecx
    0000054d: 	leaq	0x4(%rax), %rax
    00000551: 	cmpl	%ecx, %esi
    00000553: 	jg	.Ltmp880 # Offset: 1363
    00000555: 	cmpq	%rdx, %rdi
    00000558: 	jbe	.Ltmp878 # Offset: 1368
.Ltmp879:
    0000055a: 	movl	%ecx, (%rdi)
    0000055c: 	movl	%r8d, (%rdx)
.Ltmp877:
    0000055f: 	movq	%rdi, %r14
    00000562: 	jmp	.Ltmp881 # Offset: 1378
.Ltmp878:
    00000564: 	movq	%r14, %rsi
    00000567: 	movq	%r13, %rdi
    0000056a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1386
    0000056f: 	movq	%rbp, %rsi
    00000572: 	movq	%r14, %rdi
    00000575: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1397
.Ltmp876:
    0000057a: 	movq	%r12, %rax
    0000057d: 	movq	%rbp, %r8
    00000580: 	subq	%rbp, %rax
    00000583: 	cmpq	$0x4, %rax
    00000587: 	jle	.Ltmp813 # Offset: 1415
    0000058d: 	movl	(%rbp), %ecx
    00000590: 	movq	%r12, %r13
    00000593: 	nopl	(%rax,%rax) # Size: 5
.Ltmp886:
    00000598: 	movl	-0x4(%r13), %edi
    0000059c: 	leaq	-0x4(%r13), %rsi
    000005a0: 	cmpl	%edi, %ecx
    000005a2: 	jl	.Ltmp882 # Offset: 1442
    000005a4: 	cmpq	%rbp, %rsi
    000005a7: 	jbe	.Ltmp883 # Offset: 1447
    000005a9: 	movl	(%rbp), %edx
    000005ac: 	cmpl	%ecx, %edx
    000005ae: 	jge	.Ltmp884 # Offset: 1454
    000005b0: 	leaq	0x4(%rbp), %rax
    000005b4: 	nopl	(%rax) # Size: 4
.Ltmp885:
    000005b8: 	movq	%rax, %rbp
    000005bb: 	movl	(%rax), %edx
    000005bd: 	leaq	0x4(%rax), %rax
    000005c1: 	cmpl	%edx, %ecx
    000005c3: 	jg	.Ltmp885 # Offset: 1475
    000005c5: 	cmpq	%rbp, %rsi
    000005c8: 	jbe	.Ltmp883 # Offset: 1480
.Ltmp884:
    000005ca: 	movl	%edx, (%rsi)
    000005cc: 	movl	%edi, (%rbp)
.Ltmp882:
    000005cf: 	movq	%rsi, %r13
    000005d2: 	jmp	.Ltmp886 # Offset: 1490
.Ltmp883:
    000005d4: 	movq	%r13, %rsi
    000005d7: 	movq	%r8, %rdi
    000005da: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1498
    000005df: 	popq	%rbx
    000005e0: 	movq	%r12, %rsi
    000005e3: 	popq	%rbp
    000005e4: 	movq	%r13, %rdi
    000005e7: 	popq	%r12
    000005e9: 	popq	%r13
    000005eb: 	popq	%r14
    000005ed: 	jmp	.LBB070 # Offset: 1517
.Ltmp872:
    000005f2: 	movq	%rbp, %rsi
    000005f5: 	movq	%r8, %rdi
    000005f8: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1528
    000005fd: 	movq	%r13, %rsi
    00000600: 	movq	%rbp, %rdi
    00000603: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1539
    00000608: 	jmp	.Ltmp870 # Offset: 1544
.Ltmp860:
    0000060d: 	movq	%r13, %rsi
    00000610: 	movq	%r8, %rdi
    00000613: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1555
    00000618: 	movq	%rbp, %rsi
    0000061b: 	movq	%r13, %rdi
    0000061e: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1566
    00000623: 	jmp	.Ltmp805 # Offset: 1571
.Ltmp849:
    00000628: 	movq	%r14, %rsi
    0000062b: 	movq	%r8, %rdi
    0000062e: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1582
    00000633: 	movq	%r13, %rsi
    00000636: 	movq	%r14, %rdi
    00000639: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 1593
    0000063e: 	jmp	.Ltmp847 # Offset: 1598
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x65f0
  Size        : 0x643
  MaxSize     : 0x650
  Offset      : 0x65f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x4, %rax
    0000000e: 	jle	.Ltmp887 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movl	(%rdi), %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp892:
    00000030: 	movl	-0x4(%rbp), %edi
    00000033: 	leaq	-0x4(%rbp), %r8
    00000037: 	cmpl	%esi, %edi
    00000039: 	jg	.Ltmp888 # Offset: 57
    0000003b: 	cmpq	%rdx, %r8
    0000003e: 	jbe	.Ltmp889 # Offset: 62
    00000040: 	movl	(%rdx), %ecx
    00000042: 	cmpl	%ecx, %esi
    00000044: 	jle	.Ltmp890 # Offset: 68
    00000046: 	leaq	0x4(%rdx), %rax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp891:
    00000050: 	movq	%rax, %rdx
    00000053: 	movl	(%rax), %ecx
    00000055: 	leaq	0x4(%rax), %rax
    00000059: 	cmpl	%esi, %ecx
    0000005b: 	jl	.Ltmp891 # Offset: 91
    0000005d: 	cmpq	%rdx, %r8
    00000060: 	jbe	.Ltmp889 # Offset: 96
.Ltmp890:
    00000062: 	movl	%ecx, (%r8)
    00000065: 	movl	%edi, (%rdx)
.Ltmp888:
    00000067: 	movq	%r8, %rbp
    0000006a: 	jmp	.Ltmp892 # Offset: 106
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp889:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x4, %rax
    0000007a: 	jle	.Ltmp893 # Offset: 122
    0000007c: 	movl	(%r9), %esi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp898:
    00000088: 	leaq	-0x4(%r13), %r8
    0000008c: 	cmpl	%edi, %esi
    0000008e: 	jl	.Ltmp894 # Offset: 142
    00000090: 	cmpq	%rdx, %r8
    00000093: 	jbe	.Ltmp895 # Offset: 147
    00000095: 	movl	(%rdx), %ecx
    00000097: 	cmpl	%ecx, %esi
    00000099: 	jle	.Ltmp896 # Offset: 153
    0000009b: 	leaq	0x4(%rdx), %rax
    0000009f: 	nop # Size: 1
.Ltmp897:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movl	(%rax), %ecx
    000000a5: 	leaq	0x4(%rax), %rax
    000000a9: 	cmpl	%ecx, %esi
    000000ab: 	jg	.Ltmp897 # Offset: 171
    000000ad: 	cmpq	%rdx, %r8
    000000b0: 	jbe	.Ltmp895 # Offset: 176
.Ltmp896:
    000000b2: 	movl	%ecx, (%r8)
    000000b5: 	movl	%edi, (%rdx)
.Ltmp894:
    000000b7: 	movl	-0x4(%r8), %edi
    000000bb: 	movq	%r8, %r13
    000000be: 	jmp	.Ltmp898 # Offset: 190
.Ltmp895:
    000000c0: 	movq	%r13, %rax
    000000c3: 	subq	%r9, %rax
    000000c6: 	cmpq	$0x4, %rax
    000000ca: 	jg	.Ltmp899 # Offset: 202
.Ltmp935:
    000000d0: 	movq	%rbp, %rax
    000000d3: 	subq	%r13, %rax
    000000d6: 	cmpq	$0x4, %rax
    000000da: 	jg	.Ltmp900 # Offset: 218
.Ltmp893:
    000000e0: 	movq	%r12, %rax
    000000e3: 	subq	%rbp, %rax
    000000e6: 	cmpq	$0x4, %rax
    000000ea: 	jle	.Ltmp901 # Offset: 234
    000000ec: 	movl	(%rbp), %esi
    000000ef: 	movq	%r12, %r13
    000000f2: 	movq	%rbp, %rdx
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp906:
    000000f8: 	movl	-0x4(%r13), %edi
    000000fc: 	leaq	-0x4(%r13), %r8
    00000100: 	cmpl	%edi, %esi
    00000102: 	jl	.Ltmp902 # Offset: 258
    00000104: 	cmpq	%rdx, %r8
    00000107: 	jbe	.Ltmp903 # Offset: 263
    00000109: 	movl	(%rdx), %ecx
    0000010b: 	cmpl	%ecx, %esi
    0000010d: 	jle	.Ltmp904 # Offset: 269
    0000010f: 	leaq	0x4(%rdx), %rax
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp905:
    00000118: 	movq	%rax, %rdx
    0000011b: 	movl	(%rax), %ecx
    0000011d: 	leaq	0x4(%rax), %rax
    00000121: 	cmpl	%ecx, %esi
    00000123: 	jg	.Ltmp905 # Offset: 291
    00000125: 	cmpq	%rdx, %r8
    00000128: 	jbe	.Ltmp903 # Offset: 296
.Ltmp904:
    0000012a: 	movl	%ecx, (%r8)
    0000012d: 	movl	%edi, (%rdx)
.Ltmp902:
    0000012f: 	movq	%r8, %r13
    00000132: 	jmp	.Ltmp906 # Offset: 306
.Ltmp903:
    00000134: 	movq	%r13, %rax
    00000137: 	subq	%rbp, %rax
    0000013a: 	cmpq	$0x4, %rax
    0000013e: 	jg	.Ltmp907 # Offset: 318
.Ltmp958:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%r13, %rax
    00000146: 	cmpq	$0x4, %rax
    0000014a: 	jg	.Ltmp908 # Offset: 330
.Ltmp901:
    0000014c: 	popq	%rbx
    0000014d: 	popq	%rbp
    0000014e: 	popq	%r12
    00000150: 	popq	%r13
    00000152: 	popq	%r14
    00000154: 	retq # Offset: 340
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp887:
    00000158: 	retq # Offset: 344
.Ltmp908:
    00000159: 	movl	(%r13), %esi
    0000015d: 	movq	%r12, %rbp
    00000160: 	movq	%r13, %rdx
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp913:
    00000168: 	movl	-0x4(%rbp), %r8d
    0000016c: 	leaq	-0x4(%rbp), %rdi
    00000170: 	cmpl	%r8d, %esi
    00000173: 	jl	.Ltmp909 # Offset: 371
    00000175: 	cmpq	%rdx, %rdi
    00000178: 	jbe	.Ltmp910 # Offset: 376
    0000017e: 	movl	(%rdx), %ecx
    00000180: 	cmpl	%esi, %ecx
    00000182: 	jge	.Ltmp911 # Offset: 386
    00000184: 	leaq	0x4(%rdx), %rax
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp912:
    00000190: 	movq	%rax, %rdx
    00000193: 	movl	(%rax), %ecx
    00000195: 	leaq	0x4(%rax), %rax
    00000199: 	cmpl	%ecx, %esi
    0000019b: 	jg	.Ltmp912 # Offset: 411
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	jbe	.Ltmp910 # Offset: 416
.Ltmp911:
    000001a6: 	movl	%ecx, (%rdi)
    000001a8: 	movl	%r8d, (%rdx)
.Ltmp909:
    000001ab: 	movq	%rdi, %rbp
    000001ae: 	jmp	.Ltmp913 # Offset: 430
.Ltmp907:
    000001b0: 	movl	(%rbp), %esi
    000001b3: 	movq	%r13, %rbx
    000001b6: 	movq	%rbp, %rdx
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp918:
    000001c0: 	leaq	-0x4(%rbx), %r8
    000001c4: 	cmpl	%edi, %esi
    000001c6: 	jl	.Ltmp914 # Offset: 454
    000001c8: 	cmpq	%rdx, %r8
    000001cb: 	jbe	.Ltmp915 # Offset: 459
    000001d1: 	movl	(%rdx), %ecx
    000001d3: 	cmpl	%esi, %ecx
    000001d5: 	jge	.Ltmp916 # Offset: 469
    000001d7: 	leaq	0x4(%rdx), %rax
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp917:
    000001e0: 	movq	%rax, %rdx
    000001e3: 	movl	(%rax), %ecx
    000001e5: 	leaq	0x4(%rax), %rax
    000001e9: 	cmpl	%ecx, %esi
    000001eb: 	jg	.Ltmp917 # Offset: 491
    000001ed: 	cmpq	%rdx, %r8
    000001f0: 	jbe	.Ltmp915 # Offset: 496
.Ltmp916:
    000001f6: 	movl	%ecx, (%r8)
    000001f9: 	movl	%edi, (%rdx)
.Ltmp914:
    000001fb: 	movl	-0x4(%r8), %edi
    000001ff: 	movq	%r8, %rbx
    00000202: 	jmp	.Ltmp918 # Offset: 514
.Ltmp900:
    00000204: 	movl	(%r13), %esi
    00000208: 	movq	%rbp, %rbx
    0000020b: 	movq	%r13, %rdx
    0000020e: 	nop # Size: 2
.Ltmp923:
    00000210: 	movl	-0x4(%rbx), %r8d
    00000214: 	leaq	-0x4(%rbx), %rdi
    00000218: 	cmpl	%r8d, %esi
    0000021b: 	jl	.Ltmp919 # Offset: 539
    0000021d: 	cmpq	%rdx, %rdi
    00000220: 	jbe	.Ltmp920 # Offset: 544
    00000226: 	movl	(%rdx), %ecx
    00000228: 	cmpl	%ecx, %esi
    0000022a: 	jle	.Ltmp921 # Offset: 554
    0000022c: 	leaq	0x4(%rdx), %rax
.Ltmp922:
    00000230: 	movq	%rax, %rdx
    00000233: 	movl	(%rax), %ecx
    00000235: 	leaq	0x4(%rax), %rax
    00000239: 	cmpl	%ecx, %esi
    0000023b: 	jg	.Ltmp922 # Offset: 571
    0000023d: 	cmpq	%rdx, %rdi
    00000240: 	jbe	.Ltmp920 # Offset: 576
.Ltmp921:
    00000246: 	movl	%ecx, (%rdi)
    00000248: 	movl	%r8d, (%rdx)
.Ltmp919:
    0000024b: 	movq	%rdi, %rbx
    0000024e: 	jmp	.Ltmp923 # Offset: 590
.Ltmp899:
    00000250: 	movl	(%r9), %esi
    00000253: 	movq	%r13, %rbx
    00000256: 	movq	%r9, %rdx
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp928:
    00000260: 	leaq	-0x4(%rbx), %r8
    00000264: 	cmpl	%edi, %esi
    00000266: 	jl	.Ltmp924 # Offset: 614
    00000268: 	cmpq	%rdx, %r8
    0000026b: 	jbe	.Ltmp925 # Offset: 619
    0000026d: 	movl	(%rdx), %ecx
    0000026f: 	cmpl	%ecx, %esi
    00000271: 	jle	.Ltmp926 # Offset: 625
    00000273: 	leaq	0x4(%rdx), %rax
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp927:
    00000280: 	movq	%rax, %rdx
    00000283: 	movl	(%rax), %ecx
    00000285: 	leaq	0x4(%rax), %rax
    00000289: 	cmpl	%ecx, %esi
    0000028b: 	jg	.Ltmp927 # Offset: 651
    0000028d: 	cmpq	%rdx, %r8
    00000290: 	jbe	.Ltmp925 # Offset: 656
.Ltmp926:
    00000292: 	movl	%ecx, (%r8)
    00000295: 	movl	%edi, (%rdx)
.Ltmp924:
    00000297: 	movl	-0x4(%r8), %edi
    0000029b: 	movq	%r8, %rbx
    0000029e: 	jmp	.Ltmp928 # Offset: 670
.Ltmp925:
    000002a0: 	movq	%rbx, %rax
    000002a3: 	subq	%r9, %rax
    000002a6: 	cmpq	$0x4, %rax
    000002aa: 	jle	.Ltmp929 # Offset: 682
    000002ac: 	movl	(%r9), %esi
    000002af: 	movq	%rbx, %r14
    000002b2: 	movq	%r9, %rdx
    000002b5: 	nopl	(%rax) # Size: 3
.Ltmp934:
    000002b8: 	movl	-0x4(%r14), %r8d
    000002bc: 	leaq	-0x4(%r14), %rdi
    000002c0: 	cmpl	%r8d, %esi
    000002c3: 	jl	.Ltmp930 # Offset: 707
    000002c5: 	cmpq	%rdx, %rdi
    000002c8: 	jbe	.Ltmp931 # Offset: 712
    000002ca: 	movl	(%rdx), %ecx
    000002cc: 	cmpl	%ecx, %esi
    000002ce: 	jle	.Ltmp932 # Offset: 718
    000002d0: 	leaq	0x4(%rdx), %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp933:
    000002d8: 	movq	%rax, %rdx
    000002db: 	movl	(%rax), %ecx
    000002dd: 	leaq	0x4(%rax), %rax
    000002e1: 	cmpl	%ecx, %esi
    000002e3: 	jg	.Ltmp933 # Offset: 739
    000002e5: 	cmpq	%rdx, %rdi
    000002e8: 	jbe	.Ltmp931 # Offset: 744
.Ltmp932:
    000002ea: 	movl	%ecx, (%rdi)
    000002ec: 	movl	%r8d, (%rdx)
.Ltmp930:
    000002ef: 	movq	%rdi, %r14
    000002f2: 	jmp	.Ltmp934 # Offset: 754
.Ltmp931:
    000002f4: 	movq	%r14, %rsi
    000002f7: 	movq	%r9, %rdi
    000002fa: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 762
    000002ff: 	movq	%rbx, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 773
.Ltmp929:
    0000030a: 	movq	%r13, %rax
    0000030d: 	movq	%rbx, %r8
    00000310: 	subq	%rbx, %rax
    00000313: 	cmpq	$0x4, %rax
    00000317: 	jle	.Ltmp935 # Offset: 791
    0000031d: 	movl	(%rbx), %ecx
    0000031f: 	movq	%r13, %r14
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp940:
    00000328: 	movl	-0x4(%r14), %edi
    0000032c: 	leaq	-0x4(%r14), %rsi
    00000330: 	cmpl	%edi, %ecx
    00000332: 	jl	.Ltmp936 # Offset: 818
    00000334: 	cmpq	%rbx, %rsi
    00000337: 	jbe	.Ltmp937 # Offset: 823
    0000033d: 	movl	(%rbx), %edx
    0000033f: 	cmpl	%ecx, %edx
    00000341: 	jge	.Ltmp938 # Offset: 833
    00000343: 	leaq	0x4(%rbx), %rax
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp939:
    00000350: 	movq	%rax, %rbx
    00000353: 	movl	(%rax), %edx
    00000355: 	leaq	0x4(%rax), %rax
    00000359: 	cmpl	%edx, %ecx
    0000035b: 	jg	.Ltmp939 # Offset: 859
    0000035d: 	cmpq	%rbx, %rsi
    00000360: 	jbe	.Ltmp937 # Offset: 864
.Ltmp938:
    00000366: 	movl	%edx, (%rsi)
    00000368: 	movl	%edi, (%rbx)
.Ltmp936:
    0000036a: 	movq	%rsi, %r14
    0000036d: 	jmp	.Ltmp940 # Offset: 877
.Ltmp920:
    0000036f: 	movq	%rbx, %rax
    00000372: 	subq	%r13, %rax
    00000375: 	cmpq	$0x4, %rax
    00000379: 	jle	.Ltmp941 # Offset: 889
    0000037b: 	movl	(%r13), %esi
    0000037f: 	movq	%rbx, %r14
    00000382: 	movq	%r13, %rdx
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp946:
    00000388: 	movl	-0x4(%r14), %r8d
    0000038c: 	leaq	-0x4(%r14), %rdi
    00000390: 	cmpl	%r8d, %esi
    00000393: 	jl	.Ltmp942 # Offset: 915
    00000395: 	cmpq	%rdx, %rdi
    00000398: 	jbe	.Ltmp943 # Offset: 920
    0000039a: 	movl	(%rdx), %ecx
    0000039c: 	cmpl	%esi, %ecx
    0000039e: 	jge	.Ltmp944 # Offset: 926
    000003a0: 	leaq	0x4(%rdx), %rax
    000003a4: 	nopl	(%rax) # Size: 4
.Ltmp945:
    000003a8: 	movq	%rax, %rdx
    000003ab: 	movl	(%rax), %ecx
    000003ad: 	leaq	0x4(%rax), %rax
    000003b1: 	cmpl	%ecx, %esi
    000003b3: 	jg	.Ltmp945 # Offset: 947
    000003b5: 	cmpq	%rdx, %rdi
    000003b8: 	jbe	.Ltmp943 # Offset: 952
.Ltmp944:
    000003ba: 	movl	%ecx, (%rdi)
    000003bc: 	movl	%r8d, (%rdx)
.Ltmp942:
    000003bf: 	movq	%rdi, %r14
    000003c2: 	jmp	.Ltmp946 # Offset: 962
.Ltmp943:
    000003c4: 	movq	%r14, %rsi
    000003c7: 	movq	%r13, %rdi
    000003ca: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 970
    000003cf: 	movq	%rbx, %rsi
    000003d2: 	movq	%r14, %rdi
    000003d5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 981
.Ltmp941:
    000003da: 	movq	%rbp, %rax
    000003dd: 	movq	%rbx, %r8
    000003e0: 	subq	%rbx, %rax
    000003e3: 	cmpq	$0x4, %rax
    000003e7: 	jle	.Ltmp893 # Offset: 999
    000003ed: 	movl	(%rbx), %ecx
    000003ef: 	movq	%rbp, %r13
    000003f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp951:
    000003f8: 	movl	-0x4(%r13), %edi
    000003fc: 	leaq	-0x4(%r13), %rsi
    00000400: 	cmpl	%edi, %ecx
    00000402: 	jl	.Ltmp947 # Offset: 1026
    00000404: 	cmpq	%rbx, %rsi
    00000407: 	jbe	.Ltmp948 # Offset: 1031
    0000040d: 	movl	(%rbx), %edx
    0000040f: 	cmpl	%edx, %ecx
    00000411: 	jle	.Ltmp949 # Offset: 1041
    00000413: 	leaq	0x4(%rbx), %rax
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp950:
    00000420: 	movq	%rax, %rbx
    00000423: 	movl	(%rax), %edx
    00000425: 	leaq	0x4(%rax), %rax
    00000429: 	cmpl	%edx, %ecx
    0000042b: 	jg	.Ltmp950 # Offset: 1067
    0000042d: 	cmpq	%rbx, %rsi
    00000430: 	jbe	.Ltmp948 # Offset: 1072
.Ltmp949:
    00000436: 	movl	%edx, (%rsi)
    00000438: 	movl	%edi, (%rbx)
.Ltmp947:
    0000043a: 	movq	%rsi, %r13
    0000043d: 	jmp	.Ltmp951 # Offset: 1085
.Ltmp915:
    0000043f: 	movq	%rbx, %rax
    00000442: 	subq	%rbp, %rax
    00000445: 	cmpq	$0x4, %rax
    00000449: 	jle	.Ltmp952 # Offset: 1097
    0000044b: 	movl	(%rbp), %esi
    0000044e: 	movq	%rbx, %r14
    00000451: 	movq	%rbp, %rdx
    00000454: 	nopl	(%rax) # Size: 4
.Ltmp957:
    00000458: 	movl	-0x4(%r14), %r8d
    0000045c: 	leaq	-0x4(%r14), %rdi
    00000460: 	cmpl	%r8d, %esi
    00000463: 	jl	.Ltmp953 # Offset: 1123
    00000465: 	cmpq	%rdx, %rdi
    00000468: 	jbe	.Ltmp954 # Offset: 1128
    0000046a: 	movl	(%rdx), %ecx
    0000046c: 	cmpl	%esi, %ecx
    0000046e: 	jge	.Ltmp955 # Offset: 1134
    00000470: 	leaq	0x4(%rdx), %rax
    00000474: 	nopl	(%rax) # Size: 4
.Ltmp956:
    00000478: 	movq	%rax, %rdx
    0000047b: 	movl	(%rax), %ecx
    0000047d: 	leaq	0x4(%rax), %rax
    00000481: 	cmpl	%ecx, %esi
    00000483: 	jg	.Ltmp956 # Offset: 1155
    00000485: 	cmpq	%rdx, %rdi
    00000488: 	jbe	.Ltmp954 # Offset: 1160
.Ltmp955:
    0000048a: 	movl	%ecx, (%rdi)
    0000048c: 	movl	%r8d, (%rdx)
.Ltmp953:
    0000048f: 	movq	%rdi, %r14
    00000492: 	jmp	.Ltmp957 # Offset: 1170
.Ltmp954:
    00000494: 	movq	%r14, %rsi
    00000497: 	movq	%rbp, %rdi
    0000049a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1178
    0000049f: 	movq	%rbx, %rsi
    000004a2: 	movq	%r14, %rdi
    000004a5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1189
.Ltmp952:
    000004aa: 	movq	%r13, %rax
    000004ad: 	movq	%rbx, %r8
    000004b0: 	subq	%rbx, %rax
    000004b3: 	cmpq	$0x4, %rax
    000004b7: 	jle	.Ltmp958 # Offset: 1207
    000004bd: 	movl	(%rbx), %ecx
    000004bf: 	movq	%r13, %rbp
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp963:
    000004c8: 	movl	-0x4(%rbp), %edi
    000004cb: 	leaq	-0x4(%rbp), %rsi
    000004cf: 	cmpl	%edi, %ecx
    000004d1: 	jl	.Ltmp959 # Offset: 1233
    000004d3: 	cmpq	%rbx, %rsi
    000004d6: 	jbe	.Ltmp960 # Offset: 1238
    000004dc: 	movl	(%rbx), %edx
    000004de: 	cmpl	%edx, %ecx
    000004e0: 	jle	.Ltmp961 # Offset: 1248
    000004e2: 	leaq	0x4(%rbx), %rax
    000004e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp962:
    000004f0: 	movq	%rax, %rbx
    000004f3: 	movl	(%rax), %edx
    000004f5: 	leaq	0x4(%rax), %rax
    000004f9: 	cmpl	%edx, %ecx
    000004fb: 	jg	.Ltmp962 # Offset: 1275
    000004fd: 	cmpq	%rbx, %rsi
    00000500: 	jbe	.Ltmp960 # Offset: 1280
.Ltmp961:
    00000506: 	movl	%edx, (%rsi)
    00000508: 	movl	%edi, (%rbx)
.Ltmp959:
    0000050a: 	movq	%rsi, %rbp
    0000050d: 	jmp	.Ltmp963 # Offset: 1293
.Ltmp910:
    0000050f: 	movq	%rbp, %rax
    00000512: 	subq	%r13, %rax
    00000515: 	cmpq	$0x4, %rax
    00000519: 	jle	.Ltmp964 # Offset: 1305
    0000051b: 	movl	(%r13), %esi
    0000051f: 	movq	%rbp, %r14
    00000522: 	movq	%r13, %rdx
    00000525: 	nopl	(%rax) # Size: 3
.Ltmp969:
    00000528: 	movl	-0x4(%r14), %r8d
    0000052c: 	leaq	-0x4(%r14), %rdi
    00000530: 	cmpl	%r8d, %esi
    00000533: 	jl	.Ltmp965 # Offset: 1331
    00000535: 	cmpq	%rdx, %rdi
    00000538: 	jbe	.Ltmp966 # Offset: 1336
    0000053a: 	movl	(%rdx), %ecx
    0000053c: 	cmpl	%esi, %ecx
    0000053e: 	jge	.Ltmp967 # Offset: 1342
    00000540: 	leaq	0x4(%rdx), %rax
    00000544: 	nopl	(%rax) # Size: 4
.Ltmp968:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movl	(%rax), %ecx
    0000054d: 	leaq	0x4(%rax), %rax
    00000551: 	cmpl	%ecx, %esi
    00000553: 	jg	.Ltmp968 # Offset: 1363
    00000555: 	cmpq	%rdx, %rdi
    00000558: 	jbe	.Ltmp966 # Offset: 1368
.Ltmp967:
    0000055a: 	movl	%ecx, (%rdi)
    0000055c: 	movl	%r8d, (%rdx)
.Ltmp965:
    0000055f: 	movq	%rdi, %r14
    00000562: 	jmp	.Ltmp969 # Offset: 1378
.Ltmp966:
    00000564: 	movq	%r14, %rsi
    00000567: 	movq	%r13, %rdi
    0000056a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1386
    0000056f: 	movq	%rbp, %rsi
    00000572: 	movq	%r14, %rdi
    00000575: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1397
.Ltmp964:
    0000057a: 	movq	%r12, %rax
    0000057d: 	movq	%rbp, %r8
    00000580: 	subq	%rbp, %rax
    00000583: 	cmpq	$0x4, %rax
    00000587: 	jle	.Ltmp901 # Offset: 1415
    0000058d: 	movl	(%rbp), %ecx
    00000590: 	movq	%r12, %r13
    00000593: 	nopl	(%rax,%rax) # Size: 5
.Ltmp974:
    00000598: 	movl	-0x4(%r13), %edi
    0000059c: 	leaq	-0x4(%r13), %rsi
    000005a0: 	cmpl	%edi, %ecx
    000005a2: 	jl	.Ltmp970 # Offset: 1442
    000005a4: 	cmpq	%rbp, %rsi
    000005a7: 	jbe	.Ltmp971 # Offset: 1447
    000005a9: 	movl	(%rbp), %edx
    000005ac: 	cmpl	%ecx, %edx
    000005ae: 	jge	.Ltmp972 # Offset: 1454
    000005b0: 	leaq	0x4(%rbp), %rax
    000005b4: 	nopl	(%rax) # Size: 4
.Ltmp973:
    000005b8: 	movq	%rax, %rbp
    000005bb: 	movl	(%rax), %edx
    000005bd: 	leaq	0x4(%rax), %rax
    000005c1: 	cmpl	%edx, %ecx
    000005c3: 	jg	.Ltmp973 # Offset: 1475
    000005c5: 	cmpq	%rbp, %rsi
    000005c8: 	jbe	.Ltmp971 # Offset: 1480
.Ltmp972:
    000005ca: 	movl	%edx, (%rsi)
    000005cc: 	movl	%edi, (%rbp)
.Ltmp970:
    000005cf: 	movq	%rsi, %r13
    000005d2: 	jmp	.Ltmp974 # Offset: 1490
.Ltmp971:
    000005d4: 	movq	%r13, %rsi
    000005d7: 	movq	%r8, %rdi
    000005da: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1498
    000005df: 	popq	%rbx
    000005e0: 	movq	%r12, %rsi
    000005e3: 	popq	%rbp
    000005e4: 	movq	%r13, %rdi
    000005e7: 	popq	%r12
    000005e9: 	popq	%r13
    000005eb: 	popq	%r14
    000005ed: 	jmp	.LBB071 # Offset: 1517
.Ltmp960:
    000005f2: 	movq	%rbp, %rsi
    000005f5: 	movq	%r8, %rdi
    000005f8: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1528
    000005fd: 	movq	%r13, %rsi
    00000600: 	movq	%rbp, %rdi
    00000603: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1539
    00000608: 	jmp	.Ltmp958 # Offset: 1544
.Ltmp948:
    0000060d: 	movq	%r13, %rsi
    00000610: 	movq	%r8, %rdi
    00000613: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1555
    00000618: 	movq	%rbp, %rsi
    0000061b: 	movq	%r13, %rdi
    0000061e: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1566
    00000623: 	jmp	.Ltmp893 # Offset: 1571
.Ltmp937:
    00000628: 	movq	%r14, %rsi
    0000062b: 	movq	%r8, %rdi
    0000062e: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1582
    00000633: 	movq	%r13, %rsi
    00000636: 	movq	%r14, %rdi
    00000639: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 1593
    0000063e: 	jmp	.Ltmp935 # Offset: 1598
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_EEEvT_S8_" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x6c40
  Size        : 0x89
  MaxSize     : 0x90
  Offset      : 0x6c40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_EEEvT_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	cmpq	$0x4, %rdx
    0000000e: 	jle	.Ltmp975 # Offset: 14
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %rax
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	subq	$0x8, %rsp
    00000020: 	movl	(%rdi), %ecx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp980:
    00000028: 	movl	-0x4(%rbp), %r8d
    0000002c: 	leaq	-0x4(%rbp), %rsi
    00000030: 	cmpl	%r8d, %ecx
    00000033: 	jl	.Ltmp976 # Offset: 51
    00000035: 	cmpq	%rax, %rsi
    00000038: 	jbe	.Ltmp977 # Offset: 56
    0000003a: 	cmpl	(%rax), %ecx
    0000003c: 	jle	.Ltmp978 # Offset: 60
    0000003e: 	leaq	0x4(%rax), %rdx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp979:
    00000048: 	movq	%rdx, %rax
    0000004b: 	leaq	0x4(%rdx), %rdx
    0000004f: 	cmpl	(%rax), %ecx
    00000051: 	jg	.Ltmp979 # Offset: 81
    00000053: 	cmpq	%rax, %rsi
    00000056: 	jbe	.Ltmp977 # Offset: 86
.Ltmp978:
    00000058: 	movl	(%rax), %edx
    0000005a: 	movl	%edx, (%rsi)
    0000005c: 	movl	%r8d, (%rax)
.Ltmp976:
    0000005f: 	movq	%rsi, %rbp
    00000062: 	jmp	.Ltmp980 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp977:
    00000068: 	movq	%rbp, %rsi
    0000006b: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_EEEvT_S8_ # Offset: 107
    00000070: 	addq	$0x8, %rsp
    00000074: 	movq	%r12, %rsi
    00000077: 	movq	%rbp, %rdi
    0000007a: 	popq	%rbp
    0000007b: 	popq	%r12
    0000007d: 	jmp	.LBB072 # Offset: 125
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp975:
    00000088: 	retq # Offset: 136
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_EEEvT_S8_"

Binary Function "_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x6cd0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x6cd0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp981 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp983:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movq	-0x10(%rdi), %rax
    00000018: 	cmpq	%rax, -0x8(%rdi)
    0000001c: 	jb	.Ltmp982 # Offset: 28
.Ltmp981:
    0000001e: 	cmpq	%rdi, %rsi
    00000021: 	jne	.Ltmp983 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp982:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x141cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedI14PointerWrapperImEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x6d10
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0x6d10
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedI14PointerWrapperImEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp984 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp986:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movq	-0x10(%rdi), %rcx
    00000018: 	cmpq	%rcx, (%rax)
    0000001b: 	jb	.Ltmp985 # Offset: 27
.Ltmp984:
    0000001d: 	movq	%rdi, %rax
    00000020: 	cmpq	%rdi, %rsi
    00000023: 	jne	.Ltmp986 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp985:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	leaq	DATAat0x141cf(%rip), %rsi
    0000003a: 	movl	$0x1, %edi
    0000003f: 	xorl	%eax, %eax
    00000041: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedI14PointerWrapperImEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12ValueWrapperImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x6d60
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x6d60
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12ValueWrapperImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp987 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp989:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movq	-0x10(%rdi), %rax
    00000018: 	cmpq	%rax, -0x8(%rdi)
    0000001c: 	jb	.Ltmp988 # Offset: 28
.Ltmp987:
    0000001e: 	cmpq	%rdi, %rsi
    00000021: 	jne	.Ltmp989 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp988:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x141cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12ValueWrapperImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_ImEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x6da0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x6da0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_ImEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp990 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp992:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movq	-0x10(%rdi), %rax
    00000018: 	cmpq	%rax, -0x8(%rdi)
    0000001c: 	jb	.Ltmp991 # Offset: 28
.Ltmp990:
    0000001e: 	cmpq	%rdi, %rsi
    00000021: 	jne	.Ltmp992 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp991:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x141cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_ImEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZN9benchmark9quicksortIPmEEvT_S2_" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x6de0
  Size        : 0x43a
  MaxSize     : 0x440
  Offset      : 0x6de0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPmEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x8, %rax
    00000020: 	jle	.Ltmp993 # Offset: 32
.Ltmp1005:
    00000022: 	movq	(%rdi), %r8
    00000025: 	movq	(%rsp), %r13
    00000029: 	movq	%rdi, %rdx
.Ltmp998:
    0000002c: 	movq	-0x8(%r13), %rax
    00000030: 	leaq	-0x8(%r13), %rcx
    00000034: 	cmpq	%r8, %rax
    00000037: 	ja	.Ltmp994 # Offset: 55
    00000039: 	cmpq	%rcx, %rdx
    0000003c: 	jae	.Ltmp995 # Offset: 60
    0000003e: 	movq	(%rdx), %rsi
    00000041: 	cmpq	%rsi, %r8
    00000044: 	jbe	.Ltmp996 # Offset: 68
.Ltmp997:
    00000046: 	movq	0x8(%rdx), %rsi
    0000004a: 	addq	$0x8, %rdx
    0000004e: 	cmpq	%r8, %rsi
    00000051: 	jb	.Ltmp997 # Offset: 81
    00000053: 	cmpq	%rdx, %rcx
    00000056: 	jbe	.Ltmp995 # Offset: 86
.Ltmp996:
    00000058: 	movq	%rsi, (%rcx)
    0000005b: 	movq	%rax, (%rdx)
.Ltmp994:
    0000005e: 	movq	%rcx, %r13
    00000061: 	jmp	.Ltmp998 # Offset: 97
.Ltmp993:
    00000063: 	addq	$0x28, %rsp
    00000067: 	popq	%rbx
    00000068: 	popq	%rbp
    00000069: 	popq	%r12
    0000006b: 	popq	%r13
    0000006d: 	popq	%r14
    0000006f: 	popq	%r15
    00000071: 	retq # Offset: 113
.Ltmp995:
    00000072: 	movq	%r13, %rdx
    00000075: 	movq	%r13, %r8
    00000078: 	subq	%rdi, %rdx
    0000007b: 	cmpq	$0x8, %rdx
    0000007f: 	jle	.Ltmp999 # Offset: 127
.Ltmp1057:
    00000081: 	movq	(%rdi), %r9
    00000084: 	movq	%r8, %r14
    00000087: 	movq	%rdi, %rdx
.Ltmp1004:
    0000008a: 	leaq	-0x8(%r14), %rcx
    0000008e: 	cmpq	%rax, %r9
    00000091: 	jb	.Ltmp1000 # Offset: 145
    00000093: 	cmpq	%rdx, %rcx
    00000096: 	jbe	.Ltmp1001 # Offset: 150
    00000098: 	movq	(%rdx), %rsi
    0000009b: 	cmpq	%rsi, %r9
    0000009e: 	jbe	.Ltmp1002 # Offset: 158
.Ltmp1003:
    000000a0: 	movq	0x8(%rdx), %rsi
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	cmpq	%rsi, %r9
    000000ab: 	ja	.Ltmp1003 # Offset: 171
    000000ad: 	cmpq	%rdx, %rcx
    000000b0: 	jbe	.Ltmp1001 # Offset: 176
.Ltmp1002:
    000000b2: 	movq	%rsi, (%rcx)
    000000b5: 	movq	%rax, (%rdx)
.Ltmp1000:
    000000b8: 	movq	-0x8(%rcx), %rax
    000000bc: 	movq	%rcx, %r14
    000000bf: 	jmp	.Ltmp1004 # Offset: 191
.Ltmp1056:
    000000c1: 	movq	%r8, %r13
.Ltmp999:
    000000c4: 	movq	(%rsp), %rax
    000000c8: 	subq	%r13, %rax
    000000cb: 	cmpq	$0x8, %rax
    000000cf: 	jle	.Ltmp993 # Offset: 207
    000000d1: 	movq	%r13, %rdi
    000000d4: 	jmp	.Ltmp1005 # Offset: 212
.Ltmp1001:
    000000d9: 	movq	%r14, %rdx
    000000dc: 	subq	%rdi, %rdx
    000000df: 	cmpq	$0x8, %rdx
    000000e3: 	jle	.Ltmp1006 # Offset: 227
    000000e9: 	movq	%r8, 0x8(%rsp)
    000000ee: 	movq	%r14, %rbx
.Ltmp1059:
    000000f1: 	movq	(%rdi), %r9
    000000f4: 	movq	%rbx, %r15
    000000f7: 	movq	%rdi, %rdx
.Ltmp1011:
    000000fa: 	leaq	-0x8(%r15), %rcx
    000000fe: 	cmpq	%r9, %rax
    00000101: 	ja	.Ltmp1007 # Offset: 257
    00000103: 	cmpq	%rdx, %rcx
    00000106: 	jbe	.Ltmp1008 # Offset: 262
    00000108: 	movq	(%rdx), %rsi
    0000010b: 	cmpq	%rsi, %r9
    0000010e: 	jbe	.Ltmp1009 # Offset: 270
.Ltmp1010:
    00000110: 	movq	0x8(%rdx), %rsi
    00000114: 	addq	$0x8, %rdx
    00000118: 	cmpq	%rsi, %r9
    0000011b: 	ja	.Ltmp1010 # Offset: 283
    0000011d: 	cmpq	%rdx, %rcx
    00000120: 	jbe	.Ltmp1008 # Offset: 288
.Ltmp1009:
    00000122: 	movq	%rsi, (%rcx)
    00000125: 	movq	%rax, (%rdx)
.Ltmp1007:
    00000128: 	movq	-0x8(%rcx), %rax
    0000012c: 	movq	%rcx, %r15
    0000012f: 	jmp	.Ltmp1011 # Offset: 303
.Ltmp1008:
    00000131: 	movq	%r15, %rdx
    00000134: 	subq	%rdi, %rdx
    00000137: 	cmpq	$0x8, %rdx
    0000013b: 	jle	.Ltmp1012 # Offset: 315
    00000141: 	movq	%rbx, 0x10(%rsp)
    00000146: 	movq	%r15, %rbx
.Ltmp1055:
    00000149: 	movq	(%rdi), %r9
    0000014c: 	movq	%rbx, %r14
    0000014f: 	movq	%rdi, %rdx
.Ltmp1017:
    00000152: 	leaq	-0x8(%r14), %rcx
    00000156: 	cmpq	%rax, %r9
    00000159: 	jb	.Ltmp1013 # Offset: 345
    0000015b: 	cmpq	%rdx, %rcx
    0000015e: 	jbe	.Ltmp1014 # Offset: 350
    00000160: 	movq	(%rdx), %rsi
    00000163: 	cmpq	%rsi, %r9
    00000166: 	jbe	.Ltmp1015 # Offset: 358
.Ltmp1016:
    00000168: 	movq	0x8(%rdx), %rsi
    0000016c: 	addq	$0x8, %rdx
    00000170: 	cmpq	%rsi, %r9
    00000173: 	ja	.Ltmp1016 # Offset: 371
    00000175: 	cmpq	%rdx, %rcx
    00000178: 	jbe	.Ltmp1014 # Offset: 376
.Ltmp1015:
    0000017a: 	movq	%rsi, (%rcx)
    0000017d: 	movq	%rax, (%rdx)
.Ltmp1013:
    00000180: 	movq	-0x8(%rcx), %rax
    00000184: 	movq	%rcx, %r14
    00000187: 	jmp	.Ltmp1017 # Offset: 391
.Ltmp1014:
    00000189: 	movq	%r14, %rdx
    0000018c: 	subq	%rdi, %rdx
    0000018f: 	cmpq	$0x8, %rdx
    00000193: 	jle	.Ltmp1018 # Offset: 403
    00000199: 	movq	%rbx, 0x18(%rsp)
    0000019e: 	movq	%r14, %rbx
.Ltmp1053:
    000001a1: 	movq	(%rdi), %r9
    000001a4: 	movq	%rbx, %r14
    000001a7: 	movq	%rdi, %rdx
.Ltmp1023:
    000001aa: 	leaq	-0x8(%r14), %rcx
    000001ae: 	cmpq	%rax, %r9
    000001b1: 	jb	.Ltmp1019 # Offset: 433
    000001b3: 	cmpq	%rdx, %rcx
    000001b6: 	jbe	.Ltmp1020 # Offset: 438
    000001b8: 	movq	(%rdx), %rsi
    000001bb: 	cmpq	%rsi, %r9
    000001be: 	jbe	.Ltmp1021 # Offset: 446
.Ltmp1022:
    000001c0: 	movq	0x8(%rdx), %rsi
    000001c4: 	addq	$0x8, %rdx
    000001c8: 	cmpq	%rsi, %r9
    000001cb: 	ja	.Ltmp1022 # Offset: 459
    000001cd: 	cmpq	%rdx, %rcx
    000001d0: 	jbe	.Ltmp1020 # Offset: 464
.Ltmp1021:
    000001d2: 	movq	%rsi, (%rcx)
    000001d5: 	movq	%rax, (%rdx)
.Ltmp1019:
    000001d8: 	movq	-0x8(%rcx), %rax
    000001dc: 	movq	%rcx, %r14
    000001df: 	jmp	.Ltmp1023 # Offset: 479
.Ltmp1020:
    000001e1: 	movq	%r14, %rdx
    000001e4: 	subq	%rdi, %rdx
    000001e7: 	cmpq	$0x8, %rdx
    000001eb: 	jle	.Ltmp1024 # Offset: 491
.Ltmp1051:
    000001f1: 	movq	(%rdi), %r8
    000001f4: 	movq	%r14, %r15
    000001f7: 	movq	%rdi, %rdx
.Ltmp1029:
    000001fa: 	leaq	-0x8(%r15), %rcx
    000001fe: 	cmpq	%rax, %r8
    00000201: 	jb	.Ltmp1025 # Offset: 513
    00000203: 	cmpq	%rdx, %rcx
    00000206: 	jbe	.Ltmp1026 # Offset: 518
    00000208: 	movq	(%rdx), %rsi
    0000020b: 	cmpq	%rsi, %r8
    0000020e: 	jbe	.Ltmp1027 # Offset: 526
.Ltmp1028:
    00000210: 	movq	0x8(%rdx), %rsi
    00000214: 	addq	$0x8, %rdx
    00000218: 	cmpq	%rsi, %r8
    0000021b: 	ja	.Ltmp1028 # Offset: 539
    0000021d: 	cmpq	%rdx, %rcx
    00000220: 	jbe	.Ltmp1026 # Offset: 544
.Ltmp1027:
    00000222: 	movq	%rsi, (%rcx)
    00000225: 	movq	%rax, (%rdx)
.Ltmp1025:
    00000228: 	movq	-0x8(%rcx), %rax
    0000022c: 	movq	%rcx, %r15
    0000022f: 	jmp	.Ltmp1029 # Offset: 559
.Ltmp1026:
    00000231: 	movq	%r15, %rdx
    00000234: 	subq	%rdi, %rdx
    00000237: 	cmpq	$0x8, %rdx
    0000023b: 	jle	.Ltmp1030 # Offset: 571
.Ltmp1050:
    00000241: 	movq	(%rdi), %r8
    00000244: 	movq	%r15, %r12
    00000247: 	movq	%rdi, %rdx
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1048:
    00000250: 	leaq	-0x8(%r12), %rsi
    00000255: 	cmpq	%rax, %r8
    00000258: 	jb	.Ltmp1031 # Offset: 600
    0000025e: 	cmpq	%rdx, %rsi
    00000261: 	jbe	.Ltmp1032 # Offset: 609
    00000263: 	movq	(%rdx), %rcx
    00000266: 	cmpq	%rcx, %r8
    00000269: 	jbe	.Ltmp1033 # Offset: 617
    0000026f: 	nop # Size: 1
.Ltmp1034:
    00000270: 	movq	0x8(%rdx), %rcx
    00000274: 	addq	$0x8, %rdx
    00000278: 	cmpq	%rcx, %r8
    0000027b: 	ja	.Ltmp1034 # Offset: 635
    0000027d: 	cmpq	%rdx, %rsi
    00000280: 	ja	.Ltmp1033 # Offset: 640
.Ltmp1032:
    00000286: 	movq	%r12, %rdx
    00000289: 	subq	%rdi, %rdx
    0000028c: 	cmpq	$0x8, %rdx
    00000290: 	jle	.Ltmp1035 # Offset: 656
.Ltmp1047:
    00000296: 	movq	(%rdi), %rsi
    00000299: 	movq	%r12, %rbp
    0000029c: 	movq	%rdi, %rdx
    0000029f: 	nop # Size: 1
.Ltmp1046:
    000002a0: 	leaq	-0x8(%rbp), %rcx
    000002a4: 	cmpq	%rsi, %rax
    000002a7: 	ja	.Ltmp1036 # Offset: 679
    000002ad: 	cmpq	%rdx, %rcx
    000002b0: 	jbe	.Ltmp1037 # Offset: 688
    000002b2: 	movq	(%rdx), %r8
    000002b5: 	cmpq	%r8, %rsi
    000002b8: 	jbe	.Ltmp1038 # Offset: 696
    000002be: 	nop # Size: 2
.Ltmp1039:
    000002c0: 	movq	0x8(%rdx), %r8
    000002c4: 	addq	$0x8, %rdx
    000002c8: 	cmpq	%r8, %rsi
    000002cb: 	ja	.Ltmp1039 # Offset: 715
    000002cd: 	cmpq	%rdx, %rcx
    000002d0: 	ja	.Ltmp1038 # Offset: 720
.Ltmp1037:
    000002d2: 	movq	%rbp, %rax
    000002d5: 	subq	%rdi, %rax
    000002d8: 	cmpq	$0x8, %rax
    000002dc: 	jle	.Ltmp1040 # Offset: 732
.Ltmp1045:
    000002de: 	movq	(%rdi), %rcx
    000002e1: 	movq	%rbp, %r13
    000002e4: 	movq	%rdi, %rax
    000002e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1049:
    000002f0: 	movq	-0x8(%r13), %r8
    000002f4: 	leaq	-0x8(%r13), %rsi
    000002f8: 	cmpq	%r8, %rcx
    000002fb: 	jb	.Ltmp1041 # Offset: 763
    00000301: 	cmpq	%rax, %rsi
    00000304: 	jbe	.Ltmp1042 # Offset: 772
    00000306: 	movq	(%rax), %rdx
    00000309: 	cmpq	%rdx, %rcx
    0000030c: 	jbe	.Ltmp1043 # Offset: 780
    0000030e: 	nop # Size: 2
.Ltmp1044:
    00000310: 	movq	0x8(%rax), %rdx
    00000314: 	addq	$0x8, %rax
    00000318: 	cmpq	%rdx, %rcx
    0000031b: 	ja	.Ltmp1044 # Offset: 795
    0000031d: 	cmpq	%rax, %rsi
    00000320: 	ja	.Ltmp1043 # Offset: 800
.Ltmp1042:
    00000322: 	movq	%r13, %rsi
    00000325: 	callq	_ZN9benchmark9quicksortIPmEEvT_S2_ # Offset: 805
    0000032a: 	movq	%rbp, %rax
    0000032d: 	subq	%r13, %rax
    00000330: 	cmpq	$0x8, %rax
    00000334: 	jle	.Ltmp1040 # Offset: 820
    00000336: 	movq	%r13, %rdi
    00000339: 	jmp	.Ltmp1045 # Offset: 825
.Ltmp1038:
    0000033b: 	movq	%r8, (%rcx)
    0000033e: 	movq	%rax, (%rdx)
.Ltmp1036:
    00000341: 	movq	-0x8(%rcx), %rax
    00000345: 	movq	%rcx, %rbp
    00000348: 	jmp	.Ltmp1046 # Offset: 840
.Ltmp1040:
    0000034d: 	movq	%r12, %rax
    00000350: 	subq	%rbp, %rax
    00000353: 	cmpq	$0x8, %rax
    00000357: 	jle	.Ltmp1035 # Offset: 855
    00000359: 	movq	-0x8(%r12), %rax
    0000035e: 	movq	%rbp, %rdi
    00000361: 	jmp	.Ltmp1047 # Offset: 865
.Ltmp1033:
    00000366: 	movq	%rcx, (%rsi)
    00000369: 	movq	%rax, (%rdx)
.Ltmp1031:
    0000036c: 	movq	-0x8(%rsi), %rax
    00000370: 	movq	%rsi, %r12
    00000373: 	jmp	.Ltmp1048 # Offset: 883
    00000378: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1043:
    00000380: 	movq	%rdx, (%rsi)
    00000383: 	movq	%r8, (%rax)
.Ltmp1041:
    00000386: 	movq	%rsi, %r13
    00000389: 	jmp	.Ltmp1049 # Offset: 905
.Ltmp1035:
    0000038e: 	movq	%r15, %rax
    00000391: 	subq	%r12, %rax
    00000394: 	cmpq	$0x8, %rax
    00000398: 	jle	.Ltmp1030 # Offset: 920
    0000039a: 	movq	-0x8(%r15), %rax
    0000039e: 	movq	%r12, %rdi
    000003a1: 	jmp	.Ltmp1050 # Offset: 929
.Ltmp1030:
    000003a6: 	movq	%r14, %rax
    000003a9: 	subq	%r15, %rax
    000003ac: 	cmpq	$0x8, %rax
    000003b0: 	jle	.Ltmp1024 # Offset: 944
    000003b2: 	movq	-0x8(%r14), %rax
    000003b6: 	movq	%r15, %rdi
    000003b9: 	jmp	.Ltmp1051 # Offset: 953
.Ltmp1024:
    000003be: 	movq	%rbx, %rax
    000003c1: 	subq	%r14, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp1052 # Offset: 968
    000003ca: 	movq	-0x8(%rbx), %rax
    000003ce: 	movq	%r14, %rdi
    000003d1: 	jmp	.Ltmp1053 # Offset: 977
.Ltmp1052:
    000003d6: 	movq	%rbx, %r14
    000003d9: 	movq	0x18(%rsp), %rbx
.Ltmp1018:
    000003de: 	movq	%rbx, %rax
    000003e1: 	subq	%r14, %rax
    000003e4: 	cmpq	$0x8, %rax
    000003e8: 	jle	.Ltmp1054 # Offset: 1000
    000003ea: 	movq	-0x8(%rbx), %rax
    000003ee: 	movq	%r14, %rdi
    000003f1: 	jmp	.Ltmp1055 # Offset: 1009
.Ltmp1058:
    000003f6: 	movq	0x8(%rsp), %r8
    000003fb: 	movq	%rbx, %r14
.Ltmp1006:
    000003fe: 	movq	%r8, %rax
    00000401: 	subq	%r14, %rax
    00000404: 	cmpq	$0x8, %rax
    00000408: 	jle	.Ltmp1056 # Offset: 1032
    0000040e: 	movq	-0x8(%r8), %rax
    00000412: 	movq	%r14, %rdi
    00000415: 	jmp	.Ltmp1057 # Offset: 1045
.Ltmp1054:
    0000041a: 	movq	%rbx, %r15
    0000041d: 	movq	0x10(%rsp), %rbx
.Ltmp1012:
    00000422: 	movq	%rbx, %rax
    00000425: 	subq	%r15, %rax
    00000428: 	cmpq	$0x8, %rax
    0000042c: 	jle	.Ltmp1058 # Offset: 1068
    0000042e: 	movq	-0x8(%rbx), %rax
    00000432: 	movq	%r15, %rdi
    00000435: 	jmp	.Ltmp1059 # Offset: 1077
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPmEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x7220
  Size        : 0x6af
  MaxSize     : 0x6b0
  Offset      : 0x7220
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp1060 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movq	(%rdi), %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1065:
    00000030: 	movq	-0x8(%rbp), %rdi
    00000034: 	leaq	-0x8(%rbp), %r8
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	ja	.Ltmp1061 # Offset: 59
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	jbe	.Ltmp1062 # Offset: 64
    00000042: 	movq	(%rdx), %rcx
    00000045: 	cmpq	%rcx, %rsi
    00000048: 	jbe	.Ltmp1063 # Offset: 72
    0000004a: 	leaq	0x8(%rdx), %rax
    0000004e: 	nop # Size: 2
.Ltmp1064:
    00000050: 	movq	%rax, %rdx
    00000053: 	movq	(%rax), %rcx
    00000056: 	leaq	0x8(%rax), %rax
    0000005a: 	cmpq	%rsi, %rcx
    0000005d: 	jb	.Ltmp1064 # Offset: 93
    0000005f: 	cmpq	%rdx, %r8
    00000062: 	jbe	.Ltmp1062 # Offset: 98
.Ltmp1063:
    00000064: 	movq	%rcx, (%r8)
    00000067: 	movq	%rdi, (%rdx)
.Ltmp1061:
    0000006a: 	movq	%r8, %rbp
    0000006d: 	jmp	.Ltmp1065 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp1062:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x8, %rax
    0000007a: 	jle	.Ltmp1066 # Offset: 122
    0000007c: 	movq	(%r9), %rsi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp1071:
    00000088: 	leaq	-0x8(%r13), %r8
    0000008c: 	cmpq	%rdi, %rsi
    0000008f: 	jb	.Ltmp1067 # Offset: 143
    00000091: 	cmpq	%rdx, %r8
    00000094: 	jbe	.Ltmp1068 # Offset: 148
    00000096: 	movq	(%rdx), %rcx
    00000099: 	cmpq	%rcx, %rsi
    0000009c: 	jbe	.Ltmp1069 # Offset: 156
    0000009e: 	leaq	0x8(%rdx), %rax
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1070:
    000000a8: 	movq	%rax, %rdx
    000000ab: 	movq	(%rax), %rcx
    000000ae: 	leaq	0x8(%rax), %rax
    000000b2: 	cmpq	%rcx, %rsi
    000000b5: 	ja	.Ltmp1070 # Offset: 181
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jbe	.Ltmp1068 # Offset: 186
.Ltmp1069:
    000000bc: 	movq	%rcx, (%r8)
    000000bf: 	movq	%rdi, (%rdx)
.Ltmp1067:
    000000c2: 	movq	-0x8(%r8), %rdi
    000000c6: 	movq	%r8, %r13
    000000c9: 	jmp	.Ltmp1071 # Offset: 201
.Ltmp1068:
    000000cb: 	movq	%r13, %rax
    000000ce: 	subq	%r9, %rax
    000000d1: 	cmpq	$0x8, %rax
    000000d5: 	jg	.Ltmp1072 # Offset: 213
.Ltmp1108:
    000000db: 	movq	%rbp, %rax
    000000de: 	subq	%r13, %rax
    000000e1: 	cmpq	$0x8, %rax
    000000e5: 	jg	.Ltmp1073 # Offset: 229
.Ltmp1066:
    000000eb: 	movq	%r12, %rax
    000000ee: 	subq	%rbp, %rax
    000000f1: 	cmpq	$0x8, %rax
    000000f5: 	jle	.Ltmp1074 # Offset: 245
    000000f7: 	movq	(%rbp), %rsi
    000000fb: 	movq	%r12, %r13
    000000fe: 	movq	%rbp, %rdx
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1079:
    00000108: 	movq	-0x8(%r13), %rdi
    0000010c: 	leaq	-0x8(%r13), %r8
    00000110: 	cmpq	%rdi, %rsi
    00000113: 	jb	.Ltmp1075 # Offset: 275
    00000115: 	cmpq	%rdx, %r8
    00000118: 	jbe	.Ltmp1076 # Offset: 280
    0000011a: 	movq	(%rdx), %rcx
    0000011d: 	cmpq	%rcx, %rsi
    00000120: 	jbe	.Ltmp1077 # Offset: 288
    00000122: 	leaq	0x8(%rdx), %rax
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1078:
    00000130: 	movq	%rax, %rdx
    00000133: 	movq	(%rax), %rcx
    00000136: 	leaq	0x8(%rax), %rax
    0000013a: 	cmpq	%rcx, %rsi
    0000013d: 	ja	.Ltmp1078 # Offset: 317
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jbe	.Ltmp1076 # Offset: 322
.Ltmp1077:
    00000144: 	movq	%rcx, (%r8)
    00000147: 	movq	%rdi, (%rdx)
.Ltmp1075:
    0000014a: 	movq	%r8, %r13
    0000014d: 	jmp	.Ltmp1079 # Offset: 333
.Ltmp1076:
    0000014f: 	movq	%r13, %rax
    00000152: 	subq	%rbp, %rax
    00000155: 	cmpq	$0x8, %rax
    00000159: 	jg	.Ltmp1080 # Offset: 345
.Ltmp1131:
    0000015b: 	movq	%r12, %rax
    0000015e: 	subq	%r13, %rax
    00000161: 	cmpq	$0x8, %rax
    00000165: 	jg	.Ltmp1081 # Offset: 357
.Ltmp1074:
    00000167: 	popq	%rbx
    00000168: 	popq	%rbp
    00000169: 	popq	%r12
    0000016b: 	popq	%r13
    0000016d: 	popq	%r14
    0000016f: 	retq # Offset: 367
.Ltmp1060:
    00000170: 	retq # Offset: 368
.Ltmp1081:
    00000171: 	movq	(%r13), %rsi
    00000175: 	movq	%r12, %rbp
    00000178: 	movq	%r13, %rdx
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1086:
    00000180: 	movq	-0x8(%rbp), %r8
    00000184: 	leaq	-0x8(%rbp), %rdi
    00000188: 	cmpq	%r8, %rsi
    0000018b: 	jb	.Ltmp1082 # Offset: 395
    0000018d: 	cmpq	%rdx, %rdi
    00000190: 	jbe	.Ltmp1083 # Offset: 400
    00000196: 	movq	(%rdx), %rcx
    00000199: 	cmpq	%rsi, %rcx
    0000019c: 	jae	.Ltmp1084 # Offset: 412
    0000019e: 	leaq	0x8(%rdx), %rax
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1085:
    000001a8: 	movq	%rax, %rdx
    000001ab: 	movq	(%rax), %rcx
    000001ae: 	leaq	0x8(%rax), %rax
    000001b2: 	cmpq	%rcx, %rsi
    000001b5: 	ja	.Ltmp1085 # Offset: 437
    000001b7: 	cmpq	%rdx, %rdi
    000001ba: 	jbe	.Ltmp1083 # Offset: 442
.Ltmp1084:
    000001c0: 	movq	%rcx, (%rdi)
    000001c3: 	movq	%r8, (%rdx)
.Ltmp1082:
    000001c6: 	movq	%rdi, %rbp
    000001c9: 	jmp	.Ltmp1086 # Offset: 457
.Ltmp1080:
    000001cb: 	movq	(%rbp), %rsi
    000001cf: 	movq	%r13, %rbx
    000001d2: 	movq	%rbp, %rdx
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp1091:
    000001d8: 	leaq	-0x8(%rbx), %r8
    000001dc: 	cmpq	%rdi, %rsi
    000001df: 	jb	.Ltmp1087 # Offset: 479
    000001e1: 	cmpq	%rdx, %r8
    000001e4: 	jbe	.Ltmp1088 # Offset: 484
    000001ea: 	movq	(%rdx), %rcx
    000001ed: 	cmpq	%rsi, %rcx
    000001f0: 	jae	.Ltmp1089 # Offset: 496
    000001f2: 	leaq	0x8(%rdx), %rax
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1090:
    00000200: 	movq	%rax, %rdx
    00000203: 	movq	(%rax), %rcx
    00000206: 	leaq	0x8(%rax), %rax
    0000020a: 	cmpq	%rcx, %rsi
    0000020d: 	ja	.Ltmp1090 # Offset: 525
    0000020f: 	cmpq	%rdx, %r8
    00000212: 	jbe	.Ltmp1088 # Offset: 530
.Ltmp1089:
    00000218: 	movq	%rcx, (%r8)
    0000021b: 	movq	%rdi, (%rdx)
.Ltmp1087:
    0000021e: 	movq	-0x8(%r8), %rdi
    00000222: 	movq	%r8, %rbx
    00000225: 	jmp	.Ltmp1091 # Offset: 549
.Ltmp1073:
    00000227: 	movq	(%r13), %rsi
    0000022b: 	movq	%rbp, %rbx
    0000022e: 	movq	%r13, %rdx
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp1096:
    00000238: 	movq	-0x8(%rbx), %r8
    0000023c: 	leaq	-0x8(%rbx), %rdi
    00000240: 	cmpq	%r8, %rsi
    00000243: 	jb	.Ltmp1092 # Offset: 579
    00000245: 	cmpq	%rdx, %rdi
    00000248: 	jbe	.Ltmp1093 # Offset: 584
    0000024e: 	movq	(%rdx), %rcx
    00000251: 	cmpq	%rcx, %rsi
    00000254: 	jbe	.Ltmp1094 # Offset: 596
    00000256: 	leaq	0x8(%rdx), %rax
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1095:
    00000260: 	movq	%rax, %rdx
    00000263: 	movq	(%rax), %rcx
    00000266: 	leaq	0x8(%rax), %rax
    0000026a: 	cmpq	%rcx, %rsi
    0000026d: 	ja	.Ltmp1095 # Offset: 621
    0000026f: 	cmpq	%rdx, %rdi
    00000272: 	jbe	.Ltmp1093 # Offset: 626
.Ltmp1094:
    00000278: 	movq	%rcx, (%rdi)
    0000027b: 	movq	%r8, (%rdx)
.Ltmp1092:
    0000027e: 	movq	%rdi, %rbx
    00000281: 	jmp	.Ltmp1096 # Offset: 641
.Ltmp1072:
    00000283: 	movq	(%r9), %rsi
    00000286: 	movq	%r13, %rbx
    00000289: 	movq	%r9, %rdx
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp1101:
    00000290: 	leaq	-0x8(%rbx), %r8
    00000294: 	cmpq	%rdi, %rsi
    00000297: 	jb	.Ltmp1097 # Offset: 663
    00000299: 	cmpq	%rdx, %r8
    0000029c: 	jbe	.Ltmp1098 # Offset: 668
    0000029e: 	movq	(%rdx), %rcx
    000002a1: 	cmpq	%rcx, %rsi
    000002a4: 	jbe	.Ltmp1099 # Offset: 676
    000002a6: 	leaq	0x8(%rdx), %rax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1100:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movq	(%rax), %rcx
    000002b6: 	leaq	0x8(%rax), %rax
    000002ba: 	cmpq	%rcx, %rsi
    000002bd: 	ja	.Ltmp1100 # Offset: 701
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	jbe	.Ltmp1098 # Offset: 706
.Ltmp1099:
    000002c4: 	movq	%rcx, (%r8)
    000002c7: 	movq	%rdi, (%rdx)
.Ltmp1097:
    000002ca: 	movq	-0x8(%r8), %rdi
    000002ce: 	movq	%r8, %rbx
    000002d1: 	jmp	.Ltmp1101 # Offset: 721
.Ltmp1098:
    000002d3: 	movq	%rbx, %rax
    000002d6: 	subq	%r9, %rax
    000002d9: 	cmpq	$0x8, %rax
    000002dd: 	jle	.Ltmp1102 # Offset: 733
    000002df: 	movq	(%r9), %rsi
    000002e2: 	movq	%rbx, %r14
    000002e5: 	movq	%r9, %rdx
    000002e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1107:
    000002f0: 	movq	-0x8(%r14), %r8
    000002f4: 	leaq	-0x8(%r14), %rdi
    000002f8: 	cmpq	%r8, %rsi
    000002fb: 	jb	.Ltmp1103 # Offset: 763
    000002fd: 	cmpq	%rdx, %rdi
    00000300: 	jbe	.Ltmp1104 # Offset: 768
    00000302: 	movq	(%rdx), %rcx
    00000305: 	cmpq	%rcx, %rsi
    00000308: 	jbe	.Ltmp1105 # Offset: 776
    0000030a: 	leaq	0x8(%rdx), %rax
    0000030e: 	nop # Size: 2
.Ltmp1106:
    00000310: 	movq	%rax, %rdx
    00000313: 	movq	(%rax), %rcx
    00000316: 	leaq	0x8(%rax), %rax
    0000031a: 	cmpq	%rcx, %rsi
    0000031d: 	ja	.Ltmp1106 # Offset: 797
    0000031f: 	cmpq	%rdx, %rdi
    00000322: 	jbe	.Ltmp1104 # Offset: 802
.Ltmp1105:
    00000324: 	movq	%rcx, (%rdi)
    00000327: 	movq	%r8, (%rdx)
.Ltmp1103:
    0000032a: 	movq	%rdi, %r14
    0000032d: 	jmp	.Ltmp1107 # Offset: 813
.Ltmp1104:
    0000032f: 	movq	%r14, %rsi
    00000332: 	movq	%r9, %rdi
    00000335: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 821
    0000033a: 	movq	%rbx, %rsi
    0000033d: 	movq	%r14, %rdi
    00000340: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 832
.Ltmp1102:
    00000345: 	movq	%r13, %rax
    00000348: 	movq	%rbx, %r8
    0000034b: 	subq	%rbx, %rax
    0000034e: 	cmpq	$0x8, %rax
    00000352: 	jle	.Ltmp1108 # Offset: 850
    00000358: 	movq	(%rbx), %rcx
    0000035b: 	movq	%r13, %r14
    0000035e: 	nop # Size: 2
.Ltmp1113:
    00000360: 	movq	-0x8(%r14), %rdi
    00000364: 	leaq	-0x8(%r14), %rsi
    00000368: 	cmpq	%rdi, %rcx
    0000036b: 	jb	.Ltmp1109 # Offset: 875
    0000036d: 	cmpq	%rbx, %rsi
    00000370: 	jbe	.Ltmp1110 # Offset: 880
    00000376: 	movq	(%rbx), %rdx
    00000379: 	cmpq	%rcx, %rdx
    0000037c: 	jae	.Ltmp1111 # Offset: 892
    0000037e: 	leaq	0x8(%rbx), %rax
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1112:
    00000388: 	movq	%rax, %rbx
    0000038b: 	movq	(%rax), %rdx
    0000038e: 	leaq	0x8(%rax), %rax
    00000392: 	cmpq	%rdx, %rcx
    00000395: 	ja	.Ltmp1112 # Offset: 917
    00000397: 	cmpq	%rbx, %rsi
    0000039a: 	jbe	.Ltmp1110 # Offset: 922
.Ltmp1111:
    000003a0: 	movq	%rdx, (%rsi)
    000003a3: 	movq	%rdi, (%rbx)
.Ltmp1109:
    000003a6: 	movq	%rsi, %r14
    000003a9: 	jmp	.Ltmp1113 # Offset: 937
.Ltmp1093:
    000003ab: 	movq	%rbx, %rax
    000003ae: 	subq	%r13, %rax
    000003b1: 	cmpq	$0x8, %rax
    000003b5: 	jle	.Ltmp1114 # Offset: 949
    000003b7: 	movq	(%r13), %rsi
    000003bb: 	movq	%rbx, %r14
    000003be: 	movq	%r13, %rdx
    000003c1: 	nopl	(%rax) # Size: 7
.Ltmp1119:
    000003c8: 	movq	-0x8(%r14), %r8
    000003cc: 	leaq	-0x8(%r14), %rdi
    000003d0: 	cmpq	%r8, %rsi
    000003d3: 	jb	.Ltmp1115 # Offset: 979
    000003d5: 	cmpq	%rdx, %rdi
    000003d8: 	jbe	.Ltmp1116 # Offset: 984
    000003da: 	movq	(%rdx), %rcx
    000003dd: 	cmpq	%rsi, %rcx
    000003e0: 	jae	.Ltmp1117 # Offset: 992
    000003e2: 	leaq	0x8(%rdx), %rax
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1118:
    000003f0: 	movq	%rax, %rdx
    000003f3: 	movq	(%rax), %rcx
    000003f6: 	leaq	0x8(%rax), %rax
    000003fa: 	cmpq	%rcx, %rsi
    000003fd: 	ja	.Ltmp1118 # Offset: 1021
    000003ff: 	cmpq	%rdx, %rdi
    00000402: 	jbe	.Ltmp1116 # Offset: 1026
.Ltmp1117:
    00000404: 	movq	%rcx, (%rdi)
    00000407: 	movq	%r8, (%rdx)
.Ltmp1115:
    0000040a: 	movq	%rdi, %r14
    0000040d: 	jmp	.Ltmp1119 # Offset: 1037
.Ltmp1116:
    0000040f: 	movq	%r14, %rsi
    00000412: 	movq	%r13, %rdi
    00000415: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1045
    0000041a: 	movq	%rbx, %rsi
    0000041d: 	movq	%r14, %rdi
    00000420: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1056
.Ltmp1114:
    00000425: 	movq	%rbp, %rax
    00000428: 	movq	%rbx, %r8
    0000042b: 	subq	%rbx, %rax
    0000042e: 	cmpq	$0x8, %rax
    00000432: 	jle	.Ltmp1066 # Offset: 1074
    00000438: 	movq	(%rbx), %rcx
    0000043b: 	movq	%rbp, %r13
    0000043e: 	nop # Size: 2
.Ltmp1124:
    00000440: 	movq	-0x8(%r13), %rdi
    00000444: 	leaq	-0x8(%r13), %rsi
    00000448: 	cmpq	%rdi, %rcx
    0000044b: 	jb	.Ltmp1120 # Offset: 1099
    0000044d: 	cmpq	%rbx, %rsi
    00000450: 	jbe	.Ltmp1121 # Offset: 1104
    00000456: 	movq	(%rbx), %rdx
    00000459: 	cmpq	%rdx, %rcx
    0000045c: 	jbe	.Ltmp1122 # Offset: 1116
    0000045e: 	leaq	0x8(%rbx), %rax
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1123:
    00000468: 	movq	%rax, %rbx
    0000046b: 	movq	(%rax), %rdx
    0000046e: 	leaq	0x8(%rax), %rax
    00000472: 	cmpq	%rdx, %rcx
    00000475: 	ja	.Ltmp1123 # Offset: 1141
    00000477: 	cmpq	%rbx, %rsi
    0000047a: 	jbe	.Ltmp1121 # Offset: 1146
.Ltmp1122:
    00000480: 	movq	%rdx, (%rsi)
    00000483: 	movq	%rdi, (%rbx)
.Ltmp1120:
    00000486: 	movq	%rsi, %r13
    00000489: 	jmp	.Ltmp1124 # Offset: 1161
.Ltmp1088:
    0000048b: 	movq	%rbx, %rax
    0000048e: 	subq	%rbp, %rax
    00000491: 	cmpq	$0x8, %rax
    00000495: 	jle	.Ltmp1125 # Offset: 1173
    00000497: 	movq	(%rbp), %rsi
    0000049b: 	movq	%rbx, %r14
    0000049e: 	movq	%rbp, %rdx
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp1130:
    000004a8: 	movq	-0x8(%r14), %r8
    000004ac: 	leaq	-0x8(%r14), %rdi
    000004b0: 	cmpq	%r8, %rsi
    000004b3: 	jb	.Ltmp1126 # Offset: 1203
    000004b5: 	cmpq	%rdx, %rdi
    000004b8: 	jbe	.Ltmp1127 # Offset: 1208
    000004ba: 	movq	(%rdx), %rcx
    000004bd: 	cmpq	%rsi, %rcx
    000004c0: 	jae	.Ltmp1128 # Offset: 1216
    000004c2: 	leaq	0x8(%rdx), %rax
    000004c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1129:
    000004d0: 	movq	%rax, %rdx
    000004d3: 	movq	(%rax), %rcx
    000004d6: 	leaq	0x8(%rax), %rax
    000004da: 	cmpq	%rcx, %rsi
    000004dd: 	ja	.Ltmp1129 # Offset: 1245
    000004df: 	cmpq	%rdx, %rdi
    000004e2: 	jbe	.Ltmp1127 # Offset: 1250
.Ltmp1128:
    000004e4: 	movq	%rcx, (%rdi)
    000004e7: 	movq	%r8, (%rdx)
.Ltmp1126:
    000004ea: 	movq	%rdi, %r14
    000004ed: 	jmp	.Ltmp1130 # Offset: 1261
.Ltmp1127:
    000004ef: 	movq	%r14, %rsi
    000004f2: 	movq	%rbp, %rdi
    000004f5: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1269
    000004fa: 	movq	%rbx, %rsi
    000004fd: 	movq	%r14, %rdi
    00000500: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1280
.Ltmp1125:
    00000505: 	movq	%r13, %rax
    00000508: 	movq	%rbx, %r8
    0000050b: 	subq	%rbx, %rax
    0000050e: 	cmpq	$0x8, %rax
    00000512: 	jle	.Ltmp1131 # Offset: 1298
    00000518: 	movq	(%rbx), %rcx
    0000051b: 	movq	%r13, %rbp
    0000051e: 	nop # Size: 2
.Ltmp1136:
    00000520: 	movq	-0x8(%rbp), %rdi
    00000524: 	leaq	-0x8(%rbp), %rsi
    00000528: 	cmpq	%rdi, %rcx
    0000052b: 	jb	.Ltmp1132 # Offset: 1323
    0000052d: 	cmpq	%rbx, %rsi
    00000530: 	jbe	.Ltmp1133 # Offset: 1328
    00000536: 	movq	(%rbx), %rdx
    00000539: 	cmpq	%rdx, %rcx
    0000053c: 	jbe	.Ltmp1134 # Offset: 1340
    0000053e: 	leaq	0x8(%rbx), %rax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1135:
    00000548: 	movq	%rax, %rbx
    0000054b: 	movq	(%rax), %rdx
    0000054e: 	leaq	0x8(%rax), %rax
    00000552: 	cmpq	%rdx, %rcx
    00000555: 	ja	.Ltmp1135 # Offset: 1365
    00000557: 	cmpq	%rbx, %rsi
    0000055a: 	jbe	.Ltmp1133 # Offset: 1370
.Ltmp1134:
    00000560: 	movq	%rdx, (%rsi)
    00000563: 	movq	%rdi, (%rbx)
.Ltmp1132:
    00000566: 	movq	%rsi, %rbp
    00000569: 	jmp	.Ltmp1136 # Offset: 1385
.Ltmp1083:
    0000056b: 	movq	%rbp, %rax
    0000056e: 	subq	%r13, %rax
    00000571: 	cmpq	$0x8, %rax
    00000575: 	jle	.Ltmp1137 # Offset: 1397
    00000577: 	movq	(%r13), %rsi
    0000057b: 	movq	%rbp, %r14
    0000057e: 	movq	%r13, %rdx
    00000581: 	nopl	(%rax) # Size: 7
.Ltmp1142:
    00000588: 	movq	-0x8(%r14), %r8
    0000058c: 	leaq	-0x8(%r14), %rdi
    00000590: 	cmpq	%r8, %rsi
    00000593: 	jb	.Ltmp1138 # Offset: 1427
    00000595: 	cmpq	%rdx, %rdi
    00000598: 	jbe	.Ltmp1139 # Offset: 1432
    0000059a: 	movq	(%rdx), %rcx
    0000059d: 	cmpq	%rsi, %rcx
    000005a0: 	jae	.Ltmp1140 # Offset: 1440
    000005a2: 	leaq	0x8(%rdx), %rax
    000005a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1141:
    000005b0: 	movq	%rax, %rdx
    000005b3: 	movq	(%rax), %rcx
    000005b6: 	leaq	0x8(%rax), %rax
    000005ba: 	cmpq	%rcx, %rsi
    000005bd: 	ja	.Ltmp1141 # Offset: 1469
    000005bf: 	cmpq	%rdx, %rdi
    000005c2: 	jbe	.Ltmp1139 # Offset: 1474
.Ltmp1140:
    000005c4: 	movq	%rcx, (%rdi)
    000005c7: 	movq	%r8, (%rdx)
.Ltmp1138:
    000005ca: 	movq	%rdi, %r14
    000005cd: 	jmp	.Ltmp1142 # Offset: 1485
.Ltmp1139:
    000005cf: 	movq	%r14, %rsi
    000005d2: 	movq	%r13, %rdi
    000005d5: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1493
    000005da: 	movq	%rbp, %rsi
    000005dd: 	movq	%r14, %rdi
    000005e0: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1504
.Ltmp1137:
    000005e5: 	movq	%r12, %rax
    000005e8: 	movq	%rbp, %r8
    000005eb: 	subq	%rbp, %rax
    000005ee: 	cmpq	$0x8, %rax
    000005f2: 	jle	.Ltmp1074 # Offset: 1522
    000005f8: 	movq	(%rbp), %rcx
    000005fc: 	movq	%r12, %r13
    000005ff: 	nop # Size: 1
.Ltmp1147:
    00000600: 	movq	-0x8(%r13), %rdi
    00000604: 	leaq	-0x8(%r13), %rsi
    00000608: 	cmpq	%rdi, %rcx
    0000060b: 	jb	.Ltmp1143 # Offset: 1547
    0000060d: 	cmpq	%rbp, %rsi
    00000610: 	jbe	.Ltmp1144 # Offset: 1552
    00000612: 	movq	(%rbp), %rdx
    00000616: 	cmpq	%rcx, %rdx
    00000619: 	jae	.Ltmp1145 # Offset: 1561
    0000061b: 	leaq	0x8(%rbp), %rax
    0000061f: 	nop # Size: 1
.Ltmp1146:
    00000620: 	movq	%rax, %rbp
    00000623: 	movq	(%rax), %rdx
    00000626: 	leaq	0x8(%rax), %rax
    0000062a: 	cmpq	%rdx, %rcx
    0000062d: 	ja	.Ltmp1146 # Offset: 1581
    0000062f: 	cmpq	%rbp, %rsi
    00000632: 	jbe	.Ltmp1144 # Offset: 1586
.Ltmp1145:
    00000634: 	movq	%rdx, (%rsi)
    00000637: 	movq	%rdi, (%rbp)
.Ltmp1143:
    0000063b: 	movq	%rsi, %r13
    0000063e: 	jmp	.Ltmp1147 # Offset: 1598
.Ltmp1144:
    00000640: 	movq	%r13, %rsi
    00000643: 	movq	%r8, %rdi
    00000646: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1606
    0000064b: 	popq	%rbx
    0000064c: 	movq	%r12, %rsi
    0000064f: 	popq	%rbp
    00000650: 	movq	%r13, %rdi
    00000653: 	popq	%r12
    00000655: 	popq	%r13
    00000657: 	popq	%r14
    00000659: 	jmp	.LBB078 # Offset: 1625
.Ltmp1133:
    0000065e: 	movq	%rbp, %rsi
    00000661: 	movq	%r8, %rdi
    00000664: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1636
    00000669: 	movq	%r13, %rsi
    0000066c: 	movq	%rbp, %rdi
    0000066f: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1647
    00000674: 	jmp	.Ltmp1131 # Offset: 1652
.Ltmp1121:
    00000679: 	movq	%r13, %rsi
    0000067c: 	movq	%r8, %rdi
    0000067f: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1663
    00000684: 	movq	%rbp, %rsi
    00000687: 	movq	%r13, %rdi
    0000068a: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1674
    0000068f: 	jmp	.Ltmp1066 # Offset: 1679
.Ltmp1110:
    00000694: 	movq	%r14, %rsi
    00000697: 	movq	%r8, %rdi
    0000069a: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1690
    0000069f: 	movq	%r13, %rsi
    000006a2: 	movq	%r14, %rdi
    000006a5: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 1701
    000006aa: 	jmp	.Ltmp1108 # Offset: 1706
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_"

Binary Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperImEEEEvT_S5_" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x78d0
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x78d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperImEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	cmpq	$0x8, %rdx
    0000000e: 	jle	.Ltmp1148 # Offset: 14
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %rax
    00000019: 	movq	%rsi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	subq	$0x8, %rsp
    00000024: 	movq	(%rdi), %rcx
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1153:
    00000030: 	movq	-0x8(%rbp), %r8
    00000034: 	leaq	-0x8(%rbp), %rsi
    00000038: 	cmpq	%r8, %rcx
    0000003b: 	jb	.Ltmp1149 # Offset: 59
    0000003d: 	cmpq	%rax, %rsi
    00000040: 	jbe	.Ltmp1150 # Offset: 64
    00000042: 	cmpq	(%rax), %rcx
    00000045: 	jbe	.Ltmp1151 # Offset: 69
    00000047: 	leaq	0x8(%rax), %rdx
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1152:
    00000050: 	movq	%rdx, %rax
    00000053: 	leaq	0x8(%rdx), %rdx
    00000057: 	cmpq	(%rax), %rcx
    0000005a: 	ja	.Ltmp1152 # Offset: 90
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jbe	.Ltmp1150 # Offset: 95
.Ltmp1151:
    00000061: 	movq	(%rax), %rdx
    00000064: 	movq	%rdx, (%rsi)
    00000067: 	movq	%r8, (%rax)
.Ltmp1149:
    0000006a: 	movq	%rsi, %rbp
    0000006d: 	jmp	.Ltmp1153 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp1150:
    00000070: 	movq	%rbp, %rsi
    00000073: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperImEEEEvT_S5_ # Offset: 115
    00000078: 	addq	$0x8, %rsp
    0000007c: 	movq	%r12, %rsi
    0000007f: 	movq	%rbp, %rdi
    00000082: 	popq	%rbp
    00000083: 	popq	%r12
    00000085: 	jmp	.LBB079 # Offset: 133
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1148:
    00000090: 	retq # Offset: 144
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperImEEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEEEEvT_SE_" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x7970
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x7970
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEEEEvT_SE_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	cmpq	$0x8, %rdx
    0000000e: 	jle	.Ltmp1154 # Offset: 14
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %rax
    00000019: 	movq	%rsi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	subq	$0x8, %rsp
    00000024: 	movq	(%rdi), %rcx
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1159:
    00000030: 	movq	-0x8(%rbp), %r8
    00000034: 	leaq	-0x8(%rbp), %rsi
    00000038: 	cmpq	%r8, %rcx
    0000003b: 	jb	.Ltmp1155 # Offset: 59
    0000003d: 	cmpq	%rax, %rsi
    00000040: 	jbe	.Ltmp1156 # Offset: 64
    00000042: 	cmpq	(%rax), %rcx
    00000045: 	jbe	.Ltmp1157 # Offset: 69
    00000047: 	leaq	0x8(%rax), %rdx
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1158:
    00000050: 	movq	%rdx, %rax
    00000053: 	leaq	0x8(%rdx), %rdx
    00000057: 	cmpq	(%rax), %rcx
    0000005a: 	ja	.Ltmp1158 # Offset: 90
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jbe	.Ltmp1156 # Offset: 95
.Ltmp1157:
    00000061: 	movq	(%rax), %rdx
    00000064: 	movq	%rdx, (%rsi)
    00000067: 	movq	%r8, (%rax)
.Ltmp1155:
    0000006a: 	movq	%rsi, %rbp
    0000006d: 	jmp	.Ltmp1159 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp1156:
    00000070: 	movq	%rbp, %rsi
    00000073: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEEEEvT_SE_ # Offset: 115
    00000078: 	addq	$0x8, %rsp
    0000007c: 	movq	%r12, %rsi
    0000007f: 	movq	%rbp, %rdi
    00000082: 	popq	%rbp
    00000083: 	popq	%r12
    00000085: 	jmp	.LBB080 # Offset: 133
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1154:
    00000090: 	retq # Offset: 144
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEEEEvT_SE_"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x7a10
  Size        : 0x6af
  MaxSize     : 0x6b0
  Offset      : 0x7a10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp1160 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movq	(%rdi), %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1165:
    00000030: 	movq	-0x8(%rbp), %rdi
    00000034: 	leaq	-0x8(%rbp), %r8
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	ja	.Ltmp1161 # Offset: 59
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	jbe	.Ltmp1162 # Offset: 64
    00000042: 	movq	(%rdx), %rcx
    00000045: 	cmpq	%rcx, %rsi
    00000048: 	jbe	.Ltmp1163 # Offset: 72
    0000004a: 	leaq	0x8(%rdx), %rax
    0000004e: 	nop # Size: 2
.Ltmp1164:
    00000050: 	movq	%rax, %rdx
    00000053: 	movq	(%rax), %rcx
    00000056: 	leaq	0x8(%rax), %rax
    0000005a: 	cmpq	%rsi, %rcx
    0000005d: 	jb	.Ltmp1164 # Offset: 93
    0000005f: 	cmpq	%rdx, %r8
    00000062: 	jbe	.Ltmp1162 # Offset: 98
.Ltmp1163:
    00000064: 	movq	%rcx, (%r8)
    00000067: 	movq	%rdi, (%rdx)
.Ltmp1161:
    0000006a: 	movq	%r8, %rbp
    0000006d: 	jmp	.Ltmp1165 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp1162:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x8, %rax
    0000007a: 	jle	.Ltmp1166 # Offset: 122
    0000007c: 	movq	(%r9), %rsi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp1171:
    00000088: 	leaq	-0x8(%r13), %r8
    0000008c: 	cmpq	%rdi, %rsi
    0000008f: 	jb	.Ltmp1167 # Offset: 143
    00000091: 	cmpq	%rdx, %r8
    00000094: 	jbe	.Ltmp1168 # Offset: 148
    00000096: 	movq	(%rdx), %rcx
    00000099: 	cmpq	%rcx, %rsi
    0000009c: 	jbe	.Ltmp1169 # Offset: 156
    0000009e: 	leaq	0x8(%rdx), %rax
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1170:
    000000a8: 	movq	%rax, %rdx
    000000ab: 	movq	(%rax), %rcx
    000000ae: 	leaq	0x8(%rax), %rax
    000000b2: 	cmpq	%rcx, %rsi
    000000b5: 	ja	.Ltmp1170 # Offset: 181
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jbe	.Ltmp1168 # Offset: 186
.Ltmp1169:
    000000bc: 	movq	%rcx, (%r8)
    000000bf: 	movq	%rdi, (%rdx)
.Ltmp1167:
    000000c2: 	movq	-0x8(%r8), %rdi
    000000c6: 	movq	%r8, %r13
    000000c9: 	jmp	.Ltmp1171 # Offset: 201
.Ltmp1168:
    000000cb: 	movq	%r13, %rax
    000000ce: 	subq	%r9, %rax
    000000d1: 	cmpq	$0x8, %rax
    000000d5: 	jg	.Ltmp1172 # Offset: 213
.Ltmp1208:
    000000db: 	movq	%rbp, %rax
    000000de: 	subq	%r13, %rax
    000000e1: 	cmpq	$0x8, %rax
    000000e5: 	jg	.Ltmp1173 # Offset: 229
.Ltmp1166:
    000000eb: 	movq	%r12, %rax
    000000ee: 	subq	%rbp, %rax
    000000f1: 	cmpq	$0x8, %rax
    000000f5: 	jle	.Ltmp1174 # Offset: 245
    000000f7: 	movq	(%rbp), %rsi
    000000fb: 	movq	%r12, %r13
    000000fe: 	movq	%rbp, %rdx
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1179:
    00000108: 	movq	-0x8(%r13), %rdi
    0000010c: 	leaq	-0x8(%r13), %r8
    00000110: 	cmpq	%rdi, %rsi
    00000113: 	jb	.Ltmp1175 # Offset: 275
    00000115: 	cmpq	%rdx, %r8
    00000118: 	jbe	.Ltmp1176 # Offset: 280
    0000011a: 	movq	(%rdx), %rcx
    0000011d: 	cmpq	%rcx, %rsi
    00000120: 	jbe	.Ltmp1177 # Offset: 288
    00000122: 	leaq	0x8(%rdx), %rax
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1178:
    00000130: 	movq	%rax, %rdx
    00000133: 	movq	(%rax), %rcx
    00000136: 	leaq	0x8(%rax), %rax
    0000013a: 	cmpq	%rcx, %rsi
    0000013d: 	ja	.Ltmp1178 # Offset: 317
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jbe	.Ltmp1176 # Offset: 322
.Ltmp1177:
    00000144: 	movq	%rcx, (%r8)
    00000147: 	movq	%rdi, (%rdx)
.Ltmp1175:
    0000014a: 	movq	%r8, %r13
    0000014d: 	jmp	.Ltmp1179 # Offset: 333
.Ltmp1176:
    0000014f: 	movq	%r13, %rax
    00000152: 	subq	%rbp, %rax
    00000155: 	cmpq	$0x8, %rax
    00000159: 	jg	.Ltmp1180 # Offset: 345
.Ltmp1231:
    0000015b: 	movq	%r12, %rax
    0000015e: 	subq	%r13, %rax
    00000161: 	cmpq	$0x8, %rax
    00000165: 	jg	.Ltmp1181 # Offset: 357
.Ltmp1174:
    00000167: 	popq	%rbx
    00000168: 	popq	%rbp
    00000169: 	popq	%r12
    0000016b: 	popq	%r13
    0000016d: 	popq	%r14
    0000016f: 	retq # Offset: 367
.Ltmp1160:
    00000170: 	retq # Offset: 368
.Ltmp1181:
    00000171: 	movq	(%r13), %rsi
    00000175: 	movq	%r12, %rbp
    00000178: 	movq	%r13, %rdx
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1186:
    00000180: 	movq	-0x8(%rbp), %r8
    00000184: 	leaq	-0x8(%rbp), %rdi
    00000188: 	cmpq	%r8, %rsi
    0000018b: 	jb	.Ltmp1182 # Offset: 395
    0000018d: 	cmpq	%rdx, %rdi
    00000190: 	jbe	.Ltmp1183 # Offset: 400
    00000196: 	movq	(%rdx), %rcx
    00000199: 	cmpq	%rsi, %rcx
    0000019c: 	jae	.Ltmp1184 # Offset: 412
    0000019e: 	leaq	0x8(%rdx), %rax
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1185:
    000001a8: 	movq	%rax, %rdx
    000001ab: 	movq	(%rax), %rcx
    000001ae: 	leaq	0x8(%rax), %rax
    000001b2: 	cmpq	%rcx, %rsi
    000001b5: 	ja	.Ltmp1185 # Offset: 437
    000001b7: 	cmpq	%rdx, %rdi
    000001ba: 	jbe	.Ltmp1183 # Offset: 442
.Ltmp1184:
    000001c0: 	movq	%rcx, (%rdi)
    000001c3: 	movq	%r8, (%rdx)
.Ltmp1182:
    000001c6: 	movq	%rdi, %rbp
    000001c9: 	jmp	.Ltmp1186 # Offset: 457
.Ltmp1180:
    000001cb: 	movq	(%rbp), %rsi
    000001cf: 	movq	%r13, %rbx
    000001d2: 	movq	%rbp, %rdx
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp1191:
    000001d8: 	leaq	-0x8(%rbx), %r8
    000001dc: 	cmpq	%rdi, %rsi
    000001df: 	jb	.Ltmp1187 # Offset: 479
    000001e1: 	cmpq	%rdx, %r8
    000001e4: 	jbe	.Ltmp1188 # Offset: 484
    000001ea: 	movq	(%rdx), %rcx
    000001ed: 	cmpq	%rsi, %rcx
    000001f0: 	jae	.Ltmp1189 # Offset: 496
    000001f2: 	leaq	0x8(%rdx), %rax
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1190:
    00000200: 	movq	%rax, %rdx
    00000203: 	movq	(%rax), %rcx
    00000206: 	leaq	0x8(%rax), %rax
    0000020a: 	cmpq	%rcx, %rsi
    0000020d: 	ja	.Ltmp1190 # Offset: 525
    0000020f: 	cmpq	%rdx, %r8
    00000212: 	jbe	.Ltmp1188 # Offset: 530
.Ltmp1189:
    00000218: 	movq	%rcx, (%r8)
    0000021b: 	movq	%rdi, (%rdx)
.Ltmp1187:
    0000021e: 	movq	-0x8(%r8), %rdi
    00000222: 	movq	%r8, %rbx
    00000225: 	jmp	.Ltmp1191 # Offset: 549
.Ltmp1173:
    00000227: 	movq	(%r13), %rsi
    0000022b: 	movq	%rbp, %rbx
    0000022e: 	movq	%r13, %rdx
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp1196:
    00000238: 	movq	-0x8(%rbx), %r8
    0000023c: 	leaq	-0x8(%rbx), %rdi
    00000240: 	cmpq	%r8, %rsi
    00000243: 	jb	.Ltmp1192 # Offset: 579
    00000245: 	cmpq	%rdx, %rdi
    00000248: 	jbe	.Ltmp1193 # Offset: 584
    0000024e: 	movq	(%rdx), %rcx
    00000251: 	cmpq	%rcx, %rsi
    00000254: 	jbe	.Ltmp1194 # Offset: 596
    00000256: 	leaq	0x8(%rdx), %rax
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1195:
    00000260: 	movq	%rax, %rdx
    00000263: 	movq	(%rax), %rcx
    00000266: 	leaq	0x8(%rax), %rax
    0000026a: 	cmpq	%rcx, %rsi
    0000026d: 	ja	.Ltmp1195 # Offset: 621
    0000026f: 	cmpq	%rdx, %rdi
    00000272: 	jbe	.Ltmp1193 # Offset: 626
.Ltmp1194:
    00000278: 	movq	%rcx, (%rdi)
    0000027b: 	movq	%r8, (%rdx)
.Ltmp1192:
    0000027e: 	movq	%rdi, %rbx
    00000281: 	jmp	.Ltmp1196 # Offset: 641
.Ltmp1172:
    00000283: 	movq	(%r9), %rsi
    00000286: 	movq	%r13, %rbx
    00000289: 	movq	%r9, %rdx
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp1201:
    00000290: 	leaq	-0x8(%rbx), %r8
    00000294: 	cmpq	%rdi, %rsi
    00000297: 	jb	.Ltmp1197 # Offset: 663
    00000299: 	cmpq	%rdx, %r8
    0000029c: 	jbe	.Ltmp1198 # Offset: 668
    0000029e: 	movq	(%rdx), %rcx
    000002a1: 	cmpq	%rcx, %rsi
    000002a4: 	jbe	.Ltmp1199 # Offset: 676
    000002a6: 	leaq	0x8(%rdx), %rax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1200:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movq	(%rax), %rcx
    000002b6: 	leaq	0x8(%rax), %rax
    000002ba: 	cmpq	%rcx, %rsi
    000002bd: 	ja	.Ltmp1200 # Offset: 701
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	jbe	.Ltmp1198 # Offset: 706
.Ltmp1199:
    000002c4: 	movq	%rcx, (%r8)
    000002c7: 	movq	%rdi, (%rdx)
.Ltmp1197:
    000002ca: 	movq	-0x8(%r8), %rdi
    000002ce: 	movq	%r8, %rbx
    000002d1: 	jmp	.Ltmp1201 # Offset: 721
.Ltmp1198:
    000002d3: 	movq	%rbx, %rax
    000002d6: 	subq	%r9, %rax
    000002d9: 	cmpq	$0x8, %rax
    000002dd: 	jle	.Ltmp1202 # Offset: 733
    000002df: 	movq	(%r9), %rsi
    000002e2: 	movq	%rbx, %r14
    000002e5: 	movq	%r9, %rdx
    000002e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1207:
    000002f0: 	movq	-0x8(%r14), %r8
    000002f4: 	leaq	-0x8(%r14), %rdi
    000002f8: 	cmpq	%r8, %rsi
    000002fb: 	jb	.Ltmp1203 # Offset: 763
    000002fd: 	cmpq	%rdx, %rdi
    00000300: 	jbe	.Ltmp1204 # Offset: 768
    00000302: 	movq	(%rdx), %rcx
    00000305: 	cmpq	%rcx, %rsi
    00000308: 	jbe	.Ltmp1205 # Offset: 776
    0000030a: 	leaq	0x8(%rdx), %rax
    0000030e: 	nop # Size: 2
.Ltmp1206:
    00000310: 	movq	%rax, %rdx
    00000313: 	movq	(%rax), %rcx
    00000316: 	leaq	0x8(%rax), %rax
    0000031a: 	cmpq	%rcx, %rsi
    0000031d: 	ja	.Ltmp1206 # Offset: 797
    0000031f: 	cmpq	%rdx, %rdi
    00000322: 	jbe	.Ltmp1204 # Offset: 802
.Ltmp1205:
    00000324: 	movq	%rcx, (%rdi)
    00000327: 	movq	%r8, (%rdx)
.Ltmp1203:
    0000032a: 	movq	%rdi, %r14
    0000032d: 	jmp	.Ltmp1207 # Offset: 813
.Ltmp1204:
    0000032f: 	movq	%r14, %rsi
    00000332: 	movq	%r9, %rdi
    00000335: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 821
    0000033a: 	movq	%rbx, %rsi
    0000033d: 	movq	%r14, %rdi
    00000340: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 832
.Ltmp1202:
    00000345: 	movq	%r13, %rax
    00000348: 	movq	%rbx, %r8
    0000034b: 	subq	%rbx, %rax
    0000034e: 	cmpq	$0x8, %rax
    00000352: 	jle	.Ltmp1208 # Offset: 850
    00000358: 	movq	(%rbx), %rcx
    0000035b: 	movq	%r13, %r14
    0000035e: 	nop # Size: 2
.Ltmp1213:
    00000360: 	movq	-0x8(%r14), %rdi
    00000364: 	leaq	-0x8(%r14), %rsi
    00000368: 	cmpq	%rdi, %rcx
    0000036b: 	jb	.Ltmp1209 # Offset: 875
    0000036d: 	cmpq	%rbx, %rsi
    00000370: 	jbe	.Ltmp1210 # Offset: 880
    00000376: 	movq	(%rbx), %rdx
    00000379: 	cmpq	%rcx, %rdx
    0000037c: 	jae	.Ltmp1211 # Offset: 892
    0000037e: 	leaq	0x8(%rbx), %rax
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1212:
    00000388: 	movq	%rax, %rbx
    0000038b: 	movq	(%rax), %rdx
    0000038e: 	leaq	0x8(%rax), %rax
    00000392: 	cmpq	%rdx, %rcx
    00000395: 	ja	.Ltmp1212 # Offset: 917
    00000397: 	cmpq	%rbx, %rsi
    0000039a: 	jbe	.Ltmp1210 # Offset: 922
.Ltmp1211:
    000003a0: 	movq	%rdx, (%rsi)
    000003a3: 	movq	%rdi, (%rbx)
.Ltmp1209:
    000003a6: 	movq	%rsi, %r14
    000003a9: 	jmp	.Ltmp1213 # Offset: 937
.Ltmp1193:
    000003ab: 	movq	%rbx, %rax
    000003ae: 	subq	%r13, %rax
    000003b1: 	cmpq	$0x8, %rax
    000003b5: 	jle	.Ltmp1214 # Offset: 949
    000003b7: 	movq	(%r13), %rsi
    000003bb: 	movq	%rbx, %r14
    000003be: 	movq	%r13, %rdx
    000003c1: 	nopl	(%rax) # Size: 7
.Ltmp1219:
    000003c8: 	movq	-0x8(%r14), %r8
    000003cc: 	leaq	-0x8(%r14), %rdi
    000003d0: 	cmpq	%r8, %rsi
    000003d3: 	jb	.Ltmp1215 # Offset: 979
    000003d5: 	cmpq	%rdx, %rdi
    000003d8: 	jbe	.Ltmp1216 # Offset: 984
    000003da: 	movq	(%rdx), %rcx
    000003dd: 	cmpq	%rsi, %rcx
    000003e0: 	jae	.Ltmp1217 # Offset: 992
    000003e2: 	leaq	0x8(%rdx), %rax
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1218:
    000003f0: 	movq	%rax, %rdx
    000003f3: 	movq	(%rax), %rcx
    000003f6: 	leaq	0x8(%rax), %rax
    000003fa: 	cmpq	%rcx, %rsi
    000003fd: 	ja	.Ltmp1218 # Offset: 1021
    000003ff: 	cmpq	%rdx, %rdi
    00000402: 	jbe	.Ltmp1216 # Offset: 1026
.Ltmp1217:
    00000404: 	movq	%rcx, (%rdi)
    00000407: 	movq	%r8, (%rdx)
.Ltmp1215:
    0000040a: 	movq	%rdi, %r14
    0000040d: 	jmp	.Ltmp1219 # Offset: 1037
.Ltmp1216:
    0000040f: 	movq	%r14, %rsi
    00000412: 	movq	%r13, %rdi
    00000415: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1045
    0000041a: 	movq	%rbx, %rsi
    0000041d: 	movq	%r14, %rdi
    00000420: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1056
.Ltmp1214:
    00000425: 	movq	%rbp, %rax
    00000428: 	movq	%rbx, %r8
    0000042b: 	subq	%rbx, %rax
    0000042e: 	cmpq	$0x8, %rax
    00000432: 	jle	.Ltmp1166 # Offset: 1074
    00000438: 	movq	(%rbx), %rcx
    0000043b: 	movq	%rbp, %r13
    0000043e: 	nop # Size: 2
.Ltmp1224:
    00000440: 	movq	-0x8(%r13), %rdi
    00000444: 	leaq	-0x8(%r13), %rsi
    00000448: 	cmpq	%rdi, %rcx
    0000044b: 	jb	.Ltmp1220 # Offset: 1099
    0000044d: 	cmpq	%rbx, %rsi
    00000450: 	jbe	.Ltmp1221 # Offset: 1104
    00000456: 	movq	(%rbx), %rdx
    00000459: 	cmpq	%rdx, %rcx
    0000045c: 	jbe	.Ltmp1222 # Offset: 1116
    0000045e: 	leaq	0x8(%rbx), %rax
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1223:
    00000468: 	movq	%rax, %rbx
    0000046b: 	movq	(%rax), %rdx
    0000046e: 	leaq	0x8(%rax), %rax
    00000472: 	cmpq	%rdx, %rcx
    00000475: 	ja	.Ltmp1223 # Offset: 1141
    00000477: 	cmpq	%rbx, %rsi
    0000047a: 	jbe	.Ltmp1221 # Offset: 1146
.Ltmp1222:
    00000480: 	movq	%rdx, (%rsi)
    00000483: 	movq	%rdi, (%rbx)
.Ltmp1220:
    00000486: 	movq	%rsi, %r13
    00000489: 	jmp	.Ltmp1224 # Offset: 1161
.Ltmp1188:
    0000048b: 	movq	%rbx, %rax
    0000048e: 	subq	%rbp, %rax
    00000491: 	cmpq	$0x8, %rax
    00000495: 	jle	.Ltmp1225 # Offset: 1173
    00000497: 	movq	(%rbp), %rsi
    0000049b: 	movq	%rbx, %r14
    0000049e: 	movq	%rbp, %rdx
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp1230:
    000004a8: 	movq	-0x8(%r14), %r8
    000004ac: 	leaq	-0x8(%r14), %rdi
    000004b0: 	cmpq	%r8, %rsi
    000004b3: 	jb	.Ltmp1226 # Offset: 1203
    000004b5: 	cmpq	%rdx, %rdi
    000004b8: 	jbe	.Ltmp1227 # Offset: 1208
    000004ba: 	movq	(%rdx), %rcx
    000004bd: 	cmpq	%rsi, %rcx
    000004c0: 	jae	.Ltmp1228 # Offset: 1216
    000004c2: 	leaq	0x8(%rdx), %rax
    000004c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1229:
    000004d0: 	movq	%rax, %rdx
    000004d3: 	movq	(%rax), %rcx
    000004d6: 	leaq	0x8(%rax), %rax
    000004da: 	cmpq	%rcx, %rsi
    000004dd: 	ja	.Ltmp1229 # Offset: 1245
    000004df: 	cmpq	%rdx, %rdi
    000004e2: 	jbe	.Ltmp1227 # Offset: 1250
.Ltmp1228:
    000004e4: 	movq	%rcx, (%rdi)
    000004e7: 	movq	%r8, (%rdx)
.Ltmp1226:
    000004ea: 	movq	%rdi, %r14
    000004ed: 	jmp	.Ltmp1230 # Offset: 1261
.Ltmp1227:
    000004ef: 	movq	%r14, %rsi
    000004f2: 	movq	%rbp, %rdi
    000004f5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1269
    000004fa: 	movq	%rbx, %rsi
    000004fd: 	movq	%r14, %rdi
    00000500: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1280
.Ltmp1225:
    00000505: 	movq	%r13, %rax
    00000508: 	movq	%rbx, %r8
    0000050b: 	subq	%rbx, %rax
    0000050e: 	cmpq	$0x8, %rax
    00000512: 	jle	.Ltmp1231 # Offset: 1298
    00000518: 	movq	(%rbx), %rcx
    0000051b: 	movq	%r13, %rbp
    0000051e: 	nop # Size: 2
.Ltmp1236:
    00000520: 	movq	-0x8(%rbp), %rdi
    00000524: 	leaq	-0x8(%rbp), %rsi
    00000528: 	cmpq	%rdi, %rcx
    0000052b: 	jb	.Ltmp1232 # Offset: 1323
    0000052d: 	cmpq	%rbx, %rsi
    00000530: 	jbe	.Ltmp1233 # Offset: 1328
    00000536: 	movq	(%rbx), %rdx
    00000539: 	cmpq	%rdx, %rcx
    0000053c: 	jbe	.Ltmp1234 # Offset: 1340
    0000053e: 	leaq	0x8(%rbx), %rax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1235:
    00000548: 	movq	%rax, %rbx
    0000054b: 	movq	(%rax), %rdx
    0000054e: 	leaq	0x8(%rax), %rax
    00000552: 	cmpq	%rdx, %rcx
    00000555: 	ja	.Ltmp1235 # Offset: 1365
    00000557: 	cmpq	%rbx, %rsi
    0000055a: 	jbe	.Ltmp1233 # Offset: 1370
.Ltmp1234:
    00000560: 	movq	%rdx, (%rsi)
    00000563: 	movq	%rdi, (%rbx)
.Ltmp1232:
    00000566: 	movq	%rsi, %rbp
    00000569: 	jmp	.Ltmp1236 # Offset: 1385
.Ltmp1183:
    0000056b: 	movq	%rbp, %rax
    0000056e: 	subq	%r13, %rax
    00000571: 	cmpq	$0x8, %rax
    00000575: 	jle	.Ltmp1237 # Offset: 1397
    00000577: 	movq	(%r13), %rsi
    0000057b: 	movq	%rbp, %r14
    0000057e: 	movq	%r13, %rdx
    00000581: 	nopl	(%rax) # Size: 7
.Ltmp1242:
    00000588: 	movq	-0x8(%r14), %r8
    0000058c: 	leaq	-0x8(%r14), %rdi
    00000590: 	cmpq	%r8, %rsi
    00000593: 	jb	.Ltmp1238 # Offset: 1427
    00000595: 	cmpq	%rdx, %rdi
    00000598: 	jbe	.Ltmp1239 # Offset: 1432
    0000059a: 	movq	(%rdx), %rcx
    0000059d: 	cmpq	%rsi, %rcx
    000005a0: 	jae	.Ltmp1240 # Offset: 1440
    000005a2: 	leaq	0x8(%rdx), %rax
    000005a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1241:
    000005b0: 	movq	%rax, %rdx
    000005b3: 	movq	(%rax), %rcx
    000005b6: 	leaq	0x8(%rax), %rax
    000005ba: 	cmpq	%rcx, %rsi
    000005bd: 	ja	.Ltmp1241 # Offset: 1469
    000005bf: 	cmpq	%rdx, %rdi
    000005c2: 	jbe	.Ltmp1239 # Offset: 1474
.Ltmp1240:
    000005c4: 	movq	%rcx, (%rdi)
    000005c7: 	movq	%r8, (%rdx)
.Ltmp1238:
    000005ca: 	movq	%rdi, %r14
    000005cd: 	jmp	.Ltmp1242 # Offset: 1485
.Ltmp1239:
    000005cf: 	movq	%r14, %rsi
    000005d2: 	movq	%r13, %rdi
    000005d5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1493
    000005da: 	movq	%rbp, %rsi
    000005dd: 	movq	%r14, %rdi
    000005e0: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1504
.Ltmp1237:
    000005e5: 	movq	%r12, %rax
    000005e8: 	movq	%rbp, %r8
    000005eb: 	subq	%rbp, %rax
    000005ee: 	cmpq	$0x8, %rax
    000005f2: 	jle	.Ltmp1174 # Offset: 1522
    000005f8: 	movq	(%rbp), %rcx
    000005fc: 	movq	%r12, %r13
    000005ff: 	nop # Size: 1
.Ltmp1247:
    00000600: 	movq	-0x8(%r13), %rdi
    00000604: 	leaq	-0x8(%r13), %rsi
    00000608: 	cmpq	%rdi, %rcx
    0000060b: 	jb	.Ltmp1243 # Offset: 1547
    0000060d: 	cmpq	%rbp, %rsi
    00000610: 	jbe	.Ltmp1244 # Offset: 1552
    00000612: 	movq	(%rbp), %rdx
    00000616: 	cmpq	%rcx, %rdx
    00000619: 	jae	.Ltmp1245 # Offset: 1561
    0000061b: 	leaq	0x8(%rbp), %rax
    0000061f: 	nop # Size: 1
.Ltmp1246:
    00000620: 	movq	%rax, %rbp
    00000623: 	movq	(%rax), %rdx
    00000626: 	leaq	0x8(%rax), %rax
    0000062a: 	cmpq	%rdx, %rcx
    0000062d: 	ja	.Ltmp1246 # Offset: 1581
    0000062f: 	cmpq	%rbp, %rsi
    00000632: 	jbe	.Ltmp1244 # Offset: 1586
.Ltmp1245:
    00000634: 	movq	%rdx, (%rsi)
    00000637: 	movq	%rdi, (%rbp)
.Ltmp1243:
    0000063b: 	movq	%rsi, %r13
    0000063e: 	jmp	.Ltmp1247 # Offset: 1598
.Ltmp1244:
    00000640: 	movq	%r13, %rsi
    00000643: 	movq	%r8, %rdi
    00000646: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1606
    0000064b: 	popq	%rbx
    0000064c: 	movq	%r12, %rsi
    0000064f: 	popq	%rbp
    00000650: 	movq	%r13, %rdi
    00000653: 	popq	%r12
    00000655: 	popq	%r13
    00000657: 	popq	%r14
    00000659: 	jmp	.LBB081 # Offset: 1625
.Ltmp1233:
    0000065e: 	movq	%rbp, %rsi
    00000661: 	movq	%r8, %rdi
    00000664: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1636
    00000669: 	movq	%r13, %rsi
    0000066c: 	movq	%rbp, %rdi
    0000066f: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1647
    00000674: 	jmp	.Ltmp1231 # Offset: 1652
.Ltmp1221:
    00000679: 	movq	%r13, %rsi
    0000067c: 	movq	%r8, %rdi
    0000067f: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1663
    00000684: 	movq	%rbp, %rsi
    00000687: 	movq	%r13, %rdi
    0000068a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1674
    0000068f: 	jmp	.Ltmp1166 # Offset: 1679
.Ltmp1210:
    00000694: 	movq	%r14, %rsi
    00000697: 	movq	%r8, %rdi
    0000069a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1690
    0000069f: 	movq	%r13, %rsi
    000006a2: 	movq	%r14, %rdi
    000006a5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 1701
    000006aa: 	jmp	.Ltmp1208 # Offset: 1706
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x80c0
  Size        : 0x6af
  MaxSize     : 0x6b0
  Offset      : 0x80c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp1248 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movq	(%rdi), %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1253:
    00000030: 	movq	-0x8(%rbp), %rdi
    00000034: 	leaq	-0x8(%rbp), %r8
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	ja	.Ltmp1249 # Offset: 59
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	jbe	.Ltmp1250 # Offset: 64
    00000042: 	movq	(%rdx), %rcx
    00000045: 	cmpq	%rcx, %rsi
    00000048: 	jbe	.Ltmp1251 # Offset: 72
    0000004a: 	leaq	0x8(%rdx), %rax
    0000004e: 	nop # Size: 2
.Ltmp1252:
    00000050: 	movq	%rax, %rdx
    00000053: 	movq	(%rax), %rcx
    00000056: 	leaq	0x8(%rax), %rax
    0000005a: 	cmpq	%rsi, %rcx
    0000005d: 	jb	.Ltmp1252 # Offset: 93
    0000005f: 	cmpq	%rdx, %r8
    00000062: 	jbe	.Ltmp1250 # Offset: 98
.Ltmp1251:
    00000064: 	movq	%rcx, (%r8)
    00000067: 	movq	%rdi, (%rdx)
.Ltmp1249:
    0000006a: 	movq	%r8, %rbp
    0000006d: 	jmp	.Ltmp1253 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp1250:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x8, %rax
    0000007a: 	jle	.Ltmp1254 # Offset: 122
    0000007c: 	movq	(%r9), %rsi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp1259:
    00000088: 	leaq	-0x8(%r13), %r8
    0000008c: 	cmpq	%rdi, %rsi
    0000008f: 	jb	.Ltmp1255 # Offset: 143
    00000091: 	cmpq	%rdx, %r8
    00000094: 	jbe	.Ltmp1256 # Offset: 148
    00000096: 	movq	(%rdx), %rcx
    00000099: 	cmpq	%rcx, %rsi
    0000009c: 	jbe	.Ltmp1257 # Offset: 156
    0000009e: 	leaq	0x8(%rdx), %rax
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1258:
    000000a8: 	movq	%rax, %rdx
    000000ab: 	movq	(%rax), %rcx
    000000ae: 	leaq	0x8(%rax), %rax
    000000b2: 	cmpq	%rcx, %rsi
    000000b5: 	ja	.Ltmp1258 # Offset: 181
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jbe	.Ltmp1256 # Offset: 186
.Ltmp1257:
    000000bc: 	movq	%rcx, (%r8)
    000000bf: 	movq	%rdi, (%rdx)
.Ltmp1255:
    000000c2: 	movq	-0x8(%r8), %rdi
    000000c6: 	movq	%r8, %r13
    000000c9: 	jmp	.Ltmp1259 # Offset: 201
.Ltmp1256:
    000000cb: 	movq	%r13, %rax
    000000ce: 	subq	%r9, %rax
    000000d1: 	cmpq	$0x8, %rax
    000000d5: 	jg	.Ltmp1260 # Offset: 213
.Ltmp1296:
    000000db: 	movq	%rbp, %rax
    000000de: 	subq	%r13, %rax
    000000e1: 	cmpq	$0x8, %rax
    000000e5: 	jg	.Ltmp1261 # Offset: 229
.Ltmp1254:
    000000eb: 	movq	%r12, %rax
    000000ee: 	subq	%rbp, %rax
    000000f1: 	cmpq	$0x8, %rax
    000000f5: 	jle	.Ltmp1262 # Offset: 245
    000000f7: 	movq	(%rbp), %rsi
    000000fb: 	movq	%r12, %r13
    000000fe: 	movq	%rbp, %rdx
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1267:
    00000108: 	movq	-0x8(%r13), %rdi
    0000010c: 	leaq	-0x8(%r13), %r8
    00000110: 	cmpq	%rdi, %rsi
    00000113: 	jb	.Ltmp1263 # Offset: 275
    00000115: 	cmpq	%rdx, %r8
    00000118: 	jbe	.Ltmp1264 # Offset: 280
    0000011a: 	movq	(%rdx), %rcx
    0000011d: 	cmpq	%rcx, %rsi
    00000120: 	jbe	.Ltmp1265 # Offset: 288
    00000122: 	leaq	0x8(%rdx), %rax
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1266:
    00000130: 	movq	%rax, %rdx
    00000133: 	movq	(%rax), %rcx
    00000136: 	leaq	0x8(%rax), %rax
    0000013a: 	cmpq	%rcx, %rsi
    0000013d: 	ja	.Ltmp1266 # Offset: 317
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jbe	.Ltmp1264 # Offset: 322
.Ltmp1265:
    00000144: 	movq	%rcx, (%r8)
    00000147: 	movq	%rdi, (%rdx)
.Ltmp1263:
    0000014a: 	movq	%r8, %r13
    0000014d: 	jmp	.Ltmp1267 # Offset: 333
.Ltmp1264:
    0000014f: 	movq	%r13, %rax
    00000152: 	subq	%rbp, %rax
    00000155: 	cmpq	$0x8, %rax
    00000159: 	jg	.Ltmp1268 # Offset: 345
.Ltmp1319:
    0000015b: 	movq	%r12, %rax
    0000015e: 	subq	%r13, %rax
    00000161: 	cmpq	$0x8, %rax
    00000165: 	jg	.Ltmp1269 # Offset: 357
.Ltmp1262:
    00000167: 	popq	%rbx
    00000168: 	popq	%rbp
    00000169: 	popq	%r12
    0000016b: 	popq	%r13
    0000016d: 	popq	%r14
    0000016f: 	retq # Offset: 367
.Ltmp1248:
    00000170: 	retq # Offset: 368
.Ltmp1269:
    00000171: 	movq	(%r13), %rsi
    00000175: 	movq	%r12, %rbp
    00000178: 	movq	%r13, %rdx
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1274:
    00000180: 	movq	-0x8(%rbp), %r8
    00000184: 	leaq	-0x8(%rbp), %rdi
    00000188: 	cmpq	%r8, %rsi
    0000018b: 	jb	.Ltmp1270 # Offset: 395
    0000018d: 	cmpq	%rdx, %rdi
    00000190: 	jbe	.Ltmp1271 # Offset: 400
    00000196: 	movq	(%rdx), %rcx
    00000199: 	cmpq	%rsi, %rcx
    0000019c: 	jae	.Ltmp1272 # Offset: 412
    0000019e: 	leaq	0x8(%rdx), %rax
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1273:
    000001a8: 	movq	%rax, %rdx
    000001ab: 	movq	(%rax), %rcx
    000001ae: 	leaq	0x8(%rax), %rax
    000001b2: 	cmpq	%rcx, %rsi
    000001b5: 	ja	.Ltmp1273 # Offset: 437
    000001b7: 	cmpq	%rdx, %rdi
    000001ba: 	jbe	.Ltmp1271 # Offset: 442
.Ltmp1272:
    000001c0: 	movq	%rcx, (%rdi)
    000001c3: 	movq	%r8, (%rdx)
.Ltmp1270:
    000001c6: 	movq	%rdi, %rbp
    000001c9: 	jmp	.Ltmp1274 # Offset: 457
.Ltmp1268:
    000001cb: 	movq	(%rbp), %rsi
    000001cf: 	movq	%r13, %rbx
    000001d2: 	movq	%rbp, %rdx
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp1279:
    000001d8: 	leaq	-0x8(%rbx), %r8
    000001dc: 	cmpq	%rdi, %rsi
    000001df: 	jb	.Ltmp1275 # Offset: 479
    000001e1: 	cmpq	%rdx, %r8
    000001e4: 	jbe	.Ltmp1276 # Offset: 484
    000001ea: 	movq	(%rdx), %rcx
    000001ed: 	cmpq	%rsi, %rcx
    000001f0: 	jae	.Ltmp1277 # Offset: 496
    000001f2: 	leaq	0x8(%rdx), %rax
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1278:
    00000200: 	movq	%rax, %rdx
    00000203: 	movq	(%rax), %rcx
    00000206: 	leaq	0x8(%rax), %rax
    0000020a: 	cmpq	%rcx, %rsi
    0000020d: 	ja	.Ltmp1278 # Offset: 525
    0000020f: 	cmpq	%rdx, %r8
    00000212: 	jbe	.Ltmp1276 # Offset: 530
.Ltmp1277:
    00000218: 	movq	%rcx, (%r8)
    0000021b: 	movq	%rdi, (%rdx)
.Ltmp1275:
    0000021e: 	movq	-0x8(%r8), %rdi
    00000222: 	movq	%r8, %rbx
    00000225: 	jmp	.Ltmp1279 # Offset: 549
.Ltmp1261:
    00000227: 	movq	(%r13), %rsi
    0000022b: 	movq	%rbp, %rbx
    0000022e: 	movq	%r13, %rdx
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp1284:
    00000238: 	movq	-0x8(%rbx), %r8
    0000023c: 	leaq	-0x8(%rbx), %rdi
    00000240: 	cmpq	%r8, %rsi
    00000243: 	jb	.Ltmp1280 # Offset: 579
    00000245: 	cmpq	%rdx, %rdi
    00000248: 	jbe	.Ltmp1281 # Offset: 584
    0000024e: 	movq	(%rdx), %rcx
    00000251: 	cmpq	%rcx, %rsi
    00000254: 	jbe	.Ltmp1282 # Offset: 596
    00000256: 	leaq	0x8(%rdx), %rax
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1283:
    00000260: 	movq	%rax, %rdx
    00000263: 	movq	(%rax), %rcx
    00000266: 	leaq	0x8(%rax), %rax
    0000026a: 	cmpq	%rcx, %rsi
    0000026d: 	ja	.Ltmp1283 # Offset: 621
    0000026f: 	cmpq	%rdx, %rdi
    00000272: 	jbe	.Ltmp1281 # Offset: 626
.Ltmp1282:
    00000278: 	movq	%rcx, (%rdi)
    0000027b: 	movq	%r8, (%rdx)
.Ltmp1280:
    0000027e: 	movq	%rdi, %rbx
    00000281: 	jmp	.Ltmp1284 # Offset: 641
.Ltmp1260:
    00000283: 	movq	(%r9), %rsi
    00000286: 	movq	%r13, %rbx
    00000289: 	movq	%r9, %rdx
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp1289:
    00000290: 	leaq	-0x8(%rbx), %r8
    00000294: 	cmpq	%rdi, %rsi
    00000297: 	jb	.Ltmp1285 # Offset: 663
    00000299: 	cmpq	%rdx, %r8
    0000029c: 	jbe	.Ltmp1286 # Offset: 668
    0000029e: 	movq	(%rdx), %rcx
    000002a1: 	cmpq	%rcx, %rsi
    000002a4: 	jbe	.Ltmp1287 # Offset: 676
    000002a6: 	leaq	0x8(%rdx), %rax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1288:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movq	(%rax), %rcx
    000002b6: 	leaq	0x8(%rax), %rax
    000002ba: 	cmpq	%rcx, %rsi
    000002bd: 	ja	.Ltmp1288 # Offset: 701
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	jbe	.Ltmp1286 # Offset: 706
.Ltmp1287:
    000002c4: 	movq	%rcx, (%r8)
    000002c7: 	movq	%rdi, (%rdx)
.Ltmp1285:
    000002ca: 	movq	-0x8(%r8), %rdi
    000002ce: 	movq	%r8, %rbx
    000002d1: 	jmp	.Ltmp1289 # Offset: 721
.Ltmp1286:
    000002d3: 	movq	%rbx, %rax
    000002d6: 	subq	%r9, %rax
    000002d9: 	cmpq	$0x8, %rax
    000002dd: 	jle	.Ltmp1290 # Offset: 733
    000002df: 	movq	(%r9), %rsi
    000002e2: 	movq	%rbx, %r14
    000002e5: 	movq	%r9, %rdx
    000002e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1295:
    000002f0: 	movq	-0x8(%r14), %r8
    000002f4: 	leaq	-0x8(%r14), %rdi
    000002f8: 	cmpq	%r8, %rsi
    000002fb: 	jb	.Ltmp1291 # Offset: 763
    000002fd: 	cmpq	%rdx, %rdi
    00000300: 	jbe	.Ltmp1292 # Offset: 768
    00000302: 	movq	(%rdx), %rcx
    00000305: 	cmpq	%rcx, %rsi
    00000308: 	jbe	.Ltmp1293 # Offset: 776
    0000030a: 	leaq	0x8(%rdx), %rax
    0000030e: 	nop # Size: 2
.Ltmp1294:
    00000310: 	movq	%rax, %rdx
    00000313: 	movq	(%rax), %rcx
    00000316: 	leaq	0x8(%rax), %rax
    0000031a: 	cmpq	%rcx, %rsi
    0000031d: 	ja	.Ltmp1294 # Offset: 797
    0000031f: 	cmpq	%rdx, %rdi
    00000322: 	jbe	.Ltmp1292 # Offset: 802
.Ltmp1293:
    00000324: 	movq	%rcx, (%rdi)
    00000327: 	movq	%r8, (%rdx)
.Ltmp1291:
    0000032a: 	movq	%rdi, %r14
    0000032d: 	jmp	.Ltmp1295 # Offset: 813
.Ltmp1292:
    0000032f: 	movq	%r14, %rsi
    00000332: 	movq	%r9, %rdi
    00000335: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 821
    0000033a: 	movq	%rbx, %rsi
    0000033d: 	movq	%r14, %rdi
    00000340: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 832
.Ltmp1290:
    00000345: 	movq	%r13, %rax
    00000348: 	movq	%rbx, %r8
    0000034b: 	subq	%rbx, %rax
    0000034e: 	cmpq	$0x8, %rax
    00000352: 	jle	.Ltmp1296 # Offset: 850
    00000358: 	movq	(%rbx), %rcx
    0000035b: 	movq	%r13, %r14
    0000035e: 	nop # Size: 2
.Ltmp1301:
    00000360: 	movq	-0x8(%r14), %rdi
    00000364: 	leaq	-0x8(%r14), %rsi
    00000368: 	cmpq	%rdi, %rcx
    0000036b: 	jb	.Ltmp1297 # Offset: 875
    0000036d: 	cmpq	%rbx, %rsi
    00000370: 	jbe	.Ltmp1298 # Offset: 880
    00000376: 	movq	(%rbx), %rdx
    00000379: 	cmpq	%rcx, %rdx
    0000037c: 	jae	.Ltmp1299 # Offset: 892
    0000037e: 	leaq	0x8(%rbx), %rax
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1300:
    00000388: 	movq	%rax, %rbx
    0000038b: 	movq	(%rax), %rdx
    0000038e: 	leaq	0x8(%rax), %rax
    00000392: 	cmpq	%rdx, %rcx
    00000395: 	ja	.Ltmp1300 # Offset: 917
    00000397: 	cmpq	%rbx, %rsi
    0000039a: 	jbe	.Ltmp1298 # Offset: 922
.Ltmp1299:
    000003a0: 	movq	%rdx, (%rsi)
    000003a3: 	movq	%rdi, (%rbx)
.Ltmp1297:
    000003a6: 	movq	%rsi, %r14
    000003a9: 	jmp	.Ltmp1301 # Offset: 937
.Ltmp1281:
    000003ab: 	movq	%rbx, %rax
    000003ae: 	subq	%r13, %rax
    000003b1: 	cmpq	$0x8, %rax
    000003b5: 	jle	.Ltmp1302 # Offset: 949
    000003b7: 	movq	(%r13), %rsi
    000003bb: 	movq	%rbx, %r14
    000003be: 	movq	%r13, %rdx
    000003c1: 	nopl	(%rax) # Size: 7
.Ltmp1307:
    000003c8: 	movq	-0x8(%r14), %r8
    000003cc: 	leaq	-0x8(%r14), %rdi
    000003d0: 	cmpq	%r8, %rsi
    000003d3: 	jb	.Ltmp1303 # Offset: 979
    000003d5: 	cmpq	%rdx, %rdi
    000003d8: 	jbe	.Ltmp1304 # Offset: 984
    000003da: 	movq	(%rdx), %rcx
    000003dd: 	cmpq	%rsi, %rcx
    000003e0: 	jae	.Ltmp1305 # Offset: 992
    000003e2: 	leaq	0x8(%rdx), %rax
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1306:
    000003f0: 	movq	%rax, %rdx
    000003f3: 	movq	(%rax), %rcx
    000003f6: 	leaq	0x8(%rax), %rax
    000003fa: 	cmpq	%rcx, %rsi
    000003fd: 	ja	.Ltmp1306 # Offset: 1021
    000003ff: 	cmpq	%rdx, %rdi
    00000402: 	jbe	.Ltmp1304 # Offset: 1026
.Ltmp1305:
    00000404: 	movq	%rcx, (%rdi)
    00000407: 	movq	%r8, (%rdx)
.Ltmp1303:
    0000040a: 	movq	%rdi, %r14
    0000040d: 	jmp	.Ltmp1307 # Offset: 1037
.Ltmp1304:
    0000040f: 	movq	%r14, %rsi
    00000412: 	movq	%r13, %rdi
    00000415: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1045
    0000041a: 	movq	%rbx, %rsi
    0000041d: 	movq	%r14, %rdi
    00000420: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1056
.Ltmp1302:
    00000425: 	movq	%rbp, %rax
    00000428: 	movq	%rbx, %r8
    0000042b: 	subq	%rbx, %rax
    0000042e: 	cmpq	$0x8, %rax
    00000432: 	jle	.Ltmp1254 # Offset: 1074
    00000438: 	movq	(%rbx), %rcx
    0000043b: 	movq	%rbp, %r13
    0000043e: 	nop # Size: 2
.Ltmp1312:
    00000440: 	movq	-0x8(%r13), %rdi
    00000444: 	leaq	-0x8(%r13), %rsi
    00000448: 	cmpq	%rdi, %rcx
    0000044b: 	jb	.Ltmp1308 # Offset: 1099
    0000044d: 	cmpq	%rbx, %rsi
    00000450: 	jbe	.Ltmp1309 # Offset: 1104
    00000456: 	movq	(%rbx), %rdx
    00000459: 	cmpq	%rdx, %rcx
    0000045c: 	jbe	.Ltmp1310 # Offset: 1116
    0000045e: 	leaq	0x8(%rbx), %rax
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1311:
    00000468: 	movq	%rax, %rbx
    0000046b: 	movq	(%rax), %rdx
    0000046e: 	leaq	0x8(%rax), %rax
    00000472: 	cmpq	%rdx, %rcx
    00000475: 	ja	.Ltmp1311 # Offset: 1141
    00000477: 	cmpq	%rbx, %rsi
    0000047a: 	jbe	.Ltmp1309 # Offset: 1146
.Ltmp1310:
    00000480: 	movq	%rdx, (%rsi)
    00000483: 	movq	%rdi, (%rbx)
.Ltmp1308:
    00000486: 	movq	%rsi, %r13
    00000489: 	jmp	.Ltmp1312 # Offset: 1161
.Ltmp1276:
    0000048b: 	movq	%rbx, %rax
    0000048e: 	subq	%rbp, %rax
    00000491: 	cmpq	$0x8, %rax
    00000495: 	jle	.Ltmp1313 # Offset: 1173
    00000497: 	movq	(%rbp), %rsi
    0000049b: 	movq	%rbx, %r14
    0000049e: 	movq	%rbp, %rdx
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp1318:
    000004a8: 	movq	-0x8(%r14), %r8
    000004ac: 	leaq	-0x8(%r14), %rdi
    000004b0: 	cmpq	%r8, %rsi
    000004b3: 	jb	.Ltmp1314 # Offset: 1203
    000004b5: 	cmpq	%rdx, %rdi
    000004b8: 	jbe	.Ltmp1315 # Offset: 1208
    000004ba: 	movq	(%rdx), %rcx
    000004bd: 	cmpq	%rsi, %rcx
    000004c0: 	jae	.Ltmp1316 # Offset: 1216
    000004c2: 	leaq	0x8(%rdx), %rax
    000004c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1317:
    000004d0: 	movq	%rax, %rdx
    000004d3: 	movq	(%rax), %rcx
    000004d6: 	leaq	0x8(%rax), %rax
    000004da: 	cmpq	%rcx, %rsi
    000004dd: 	ja	.Ltmp1317 # Offset: 1245
    000004df: 	cmpq	%rdx, %rdi
    000004e2: 	jbe	.Ltmp1315 # Offset: 1250
.Ltmp1316:
    000004e4: 	movq	%rcx, (%rdi)
    000004e7: 	movq	%r8, (%rdx)
.Ltmp1314:
    000004ea: 	movq	%rdi, %r14
    000004ed: 	jmp	.Ltmp1318 # Offset: 1261
.Ltmp1315:
    000004ef: 	movq	%r14, %rsi
    000004f2: 	movq	%rbp, %rdi
    000004f5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1269
    000004fa: 	movq	%rbx, %rsi
    000004fd: 	movq	%r14, %rdi
    00000500: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1280
.Ltmp1313:
    00000505: 	movq	%r13, %rax
    00000508: 	movq	%rbx, %r8
    0000050b: 	subq	%rbx, %rax
    0000050e: 	cmpq	$0x8, %rax
    00000512: 	jle	.Ltmp1319 # Offset: 1298
    00000518: 	movq	(%rbx), %rcx
    0000051b: 	movq	%r13, %rbp
    0000051e: 	nop # Size: 2
.Ltmp1324:
    00000520: 	movq	-0x8(%rbp), %rdi
    00000524: 	leaq	-0x8(%rbp), %rsi
    00000528: 	cmpq	%rdi, %rcx
    0000052b: 	jb	.Ltmp1320 # Offset: 1323
    0000052d: 	cmpq	%rbx, %rsi
    00000530: 	jbe	.Ltmp1321 # Offset: 1328
    00000536: 	movq	(%rbx), %rdx
    00000539: 	cmpq	%rdx, %rcx
    0000053c: 	jbe	.Ltmp1322 # Offset: 1340
    0000053e: 	leaq	0x8(%rbx), %rax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1323:
    00000548: 	movq	%rax, %rbx
    0000054b: 	movq	(%rax), %rdx
    0000054e: 	leaq	0x8(%rax), %rax
    00000552: 	cmpq	%rdx, %rcx
    00000555: 	ja	.Ltmp1323 # Offset: 1365
    00000557: 	cmpq	%rbx, %rsi
    0000055a: 	jbe	.Ltmp1321 # Offset: 1370
.Ltmp1322:
    00000560: 	movq	%rdx, (%rsi)
    00000563: 	movq	%rdi, (%rbx)
.Ltmp1320:
    00000566: 	movq	%rsi, %rbp
    00000569: 	jmp	.Ltmp1324 # Offset: 1385
.Ltmp1271:
    0000056b: 	movq	%rbp, %rax
    0000056e: 	subq	%r13, %rax
    00000571: 	cmpq	$0x8, %rax
    00000575: 	jle	.Ltmp1325 # Offset: 1397
    00000577: 	movq	(%r13), %rsi
    0000057b: 	movq	%rbp, %r14
    0000057e: 	movq	%r13, %rdx
    00000581: 	nopl	(%rax) # Size: 7
.Ltmp1330:
    00000588: 	movq	-0x8(%r14), %r8
    0000058c: 	leaq	-0x8(%r14), %rdi
    00000590: 	cmpq	%r8, %rsi
    00000593: 	jb	.Ltmp1326 # Offset: 1427
    00000595: 	cmpq	%rdx, %rdi
    00000598: 	jbe	.Ltmp1327 # Offset: 1432
    0000059a: 	movq	(%rdx), %rcx
    0000059d: 	cmpq	%rsi, %rcx
    000005a0: 	jae	.Ltmp1328 # Offset: 1440
    000005a2: 	leaq	0x8(%rdx), %rax
    000005a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1329:
    000005b0: 	movq	%rax, %rdx
    000005b3: 	movq	(%rax), %rcx
    000005b6: 	leaq	0x8(%rax), %rax
    000005ba: 	cmpq	%rcx, %rsi
    000005bd: 	ja	.Ltmp1329 # Offset: 1469
    000005bf: 	cmpq	%rdx, %rdi
    000005c2: 	jbe	.Ltmp1327 # Offset: 1474
.Ltmp1328:
    000005c4: 	movq	%rcx, (%rdi)
    000005c7: 	movq	%r8, (%rdx)
.Ltmp1326:
    000005ca: 	movq	%rdi, %r14
    000005cd: 	jmp	.Ltmp1330 # Offset: 1485
.Ltmp1327:
    000005cf: 	movq	%r14, %rsi
    000005d2: 	movq	%r13, %rdi
    000005d5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1493
    000005da: 	movq	%rbp, %rsi
    000005dd: 	movq	%r14, %rdi
    000005e0: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1504
.Ltmp1325:
    000005e5: 	movq	%r12, %rax
    000005e8: 	movq	%rbp, %r8
    000005eb: 	subq	%rbp, %rax
    000005ee: 	cmpq	$0x8, %rax
    000005f2: 	jle	.Ltmp1262 # Offset: 1522
    000005f8: 	movq	(%rbp), %rcx
    000005fc: 	movq	%r12, %r13
    000005ff: 	nop # Size: 1
.Ltmp1335:
    00000600: 	movq	-0x8(%r13), %rdi
    00000604: 	leaq	-0x8(%r13), %rsi
    00000608: 	cmpq	%rdi, %rcx
    0000060b: 	jb	.Ltmp1331 # Offset: 1547
    0000060d: 	cmpq	%rbp, %rsi
    00000610: 	jbe	.Ltmp1332 # Offset: 1552
    00000612: 	movq	(%rbp), %rdx
    00000616: 	cmpq	%rcx, %rdx
    00000619: 	jae	.Ltmp1333 # Offset: 1561
    0000061b: 	leaq	0x8(%rbp), %rax
    0000061f: 	nop # Size: 1
.Ltmp1334:
    00000620: 	movq	%rax, %rbp
    00000623: 	movq	(%rax), %rdx
    00000626: 	leaq	0x8(%rax), %rax
    0000062a: 	cmpq	%rdx, %rcx
    0000062d: 	ja	.Ltmp1334 # Offset: 1581
    0000062f: 	cmpq	%rbp, %rsi
    00000632: 	jbe	.Ltmp1332 # Offset: 1586
.Ltmp1333:
    00000634: 	movq	%rdx, (%rsi)
    00000637: 	movq	%rdi, (%rbp)
.Ltmp1331:
    0000063b: 	movq	%rsi, %r13
    0000063e: 	jmp	.Ltmp1335 # Offset: 1598
.Ltmp1332:
    00000640: 	movq	%r13, %rsi
    00000643: 	movq	%r8, %rdi
    00000646: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1606
    0000064b: 	popq	%rbx
    0000064c: 	movq	%r12, %rsi
    0000064f: 	popq	%rbp
    00000650: 	movq	%r13, %rdi
    00000653: 	popq	%r12
    00000655: 	popq	%r13
    00000657: 	popq	%r14
    00000659: 	jmp	.LBB082 # Offset: 1625
.Ltmp1321:
    0000065e: 	movq	%rbp, %rsi
    00000661: 	movq	%r8, %rdi
    00000664: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1636
    00000669: 	movq	%r13, %rsi
    0000066c: 	movq	%rbp, %rdi
    0000066f: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1647
    00000674: 	jmp	.Ltmp1319 # Offset: 1652
.Ltmp1309:
    00000679: 	movq	%r13, %rsi
    0000067c: 	movq	%r8, %rdi
    0000067f: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1663
    00000684: 	movq	%rbp, %rsi
    00000687: 	movq	%r13, %rdi
    0000068a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1674
    0000068f: 	jmp	.Ltmp1254 # Offset: 1679
.Ltmp1298:
    00000694: 	movq	%r14, %rsi
    00000697: 	movq	%r8, %rdi
    0000069a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1690
    0000069f: 	movq	%r13, %rsi
    000006a2: 	movq	%r14, %rdi
    000006a5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 1701
    000006aa: 	jmp	.Ltmp1296 # Offset: 1706
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_EEEvT_S8_" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x8770
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x8770
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_EEEvT_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	cmpq	$0x8, %rdx
    0000000e: 	jle	.Ltmp1336 # Offset: 14
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %rax
    00000019: 	movq	%rsi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	subq	$0x8, %rsp
    00000024: 	movq	(%rdi), %rcx
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1341:
    00000030: 	movq	-0x8(%rbp), %r8
    00000034: 	leaq	-0x8(%rbp), %rsi
    00000038: 	cmpq	%r8, %rcx
    0000003b: 	jb	.Ltmp1337 # Offset: 59
    0000003d: 	cmpq	%rax, %rsi
    00000040: 	jbe	.Ltmp1338 # Offset: 64
    00000042: 	cmpq	(%rax), %rcx
    00000045: 	jbe	.Ltmp1339 # Offset: 69
    00000047: 	leaq	0x8(%rax), %rdx
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1340:
    00000050: 	movq	%rdx, %rax
    00000053: 	leaq	0x8(%rdx), %rdx
    00000057: 	cmpq	(%rax), %rcx
    0000005a: 	ja	.Ltmp1340 # Offset: 90
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jbe	.Ltmp1338 # Offset: 95
.Ltmp1339:
    00000061: 	movq	(%rax), %rdx
    00000064: 	movq	%rdx, (%rsi)
    00000067: 	movq	%r8, (%rax)
.Ltmp1337:
    0000006a: 	movq	%rsi, %rbp
    0000006d: 	jmp	.Ltmp1341 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp1338:
    00000070: 	movq	%rbp, %rsi
    00000073: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_EEEvT_S8_ # Offset: 115
    00000078: 	addq	$0x8, %rsp
    0000007c: 	movq	%r12, %rsi
    0000007f: 	movq	%rbp, %rdi
    00000082: 	popq	%rbp
    00000083: 	popq	%r12
    00000085: 	jmp	.LBB083 # Offset: 133
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1336:
    00000090: 	retq # Offset: 144
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_EEEvT_S8_"

Binary Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x8810
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0x8810
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPddEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r9
    0000000c: 	movq	%rsi, %rcx
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp1342 # Offset: 21
    0000001b: 	movq	%rdx, %rdi
    0000001e: 	jmp	.Ltmp1343 # Offset: 30
.Ltmp1345:
    00000020: 	leaq	-0x1(%rax), %r10
    00000024: 	leaq	(%rax,%rax), %rsi
    00000028: 	movsd	%xmm2, (%rcx,%rdi,8)
    0000002d: 	leaq	(%rcx,%r10,8), %rdx
    00000031: 	movq	%r10, %rax
    00000034: 	cmpq	%rsi, %r9
    00000037: 	jle	.Ltmp1344 # Offset: 55
.Ltmp1346:
    00000039: 	movq	%rax, %rdi
    0000003c: 	movq	%rsi, %rax
.Ltmp1343:
    0000003f: 	leaq	(,%rax,8), %rdx
    00000047: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000004d: 	addq	%rcx, %rdx
    00000050: 	movsd	(%rdx), %xmm1
    00000054: 	comisd	%xmm2, %xmm1
    00000058: 	jbe	.Ltmp1345 # Offset: 88
    0000005a: 	leaq	0x2(%rax,%rax), %rsi
    0000005f: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000064: 	cmpq	%rsi, %r9
    00000067: 	jg	.Ltmp1346 # Offset: 103
.Ltmp1344:
    00000069: 	cmpq	%rsi, %r9
    0000006c: 	je	.Ltmp1347 # Offset: 108
.Ltmp1352:
    00000072: 	leaq	-0x1(%rax), %rdi
    00000076: 	movq	%rdi, %rsi
    00000079: 	shrq	$0x3f, %rsi
    0000007d: 	addq	%rdi, %rsi
    00000080: 	sarq	%rsi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1348 # Offset: 134
    00000088: 	jmp	.Ltmp1349 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1351:
    00000090: 	movsd	%xmm1, (%rdx)
    00000094: 	leaq	-0x1(%rsi), %rdx
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rsi, %rax
    000000ab: 	cmpq	%rsi, %r8
    000000ae: 	jge	.Ltmp1350 # Offset: 174
    000000b0: 	movq	%rdx, %rsi
.Ltmp1348:
    000000b3: 	leaq	(%rcx,%rsi,8), %rdi
    000000b7: 	leaq	(%rcx,%rax,8), %rdx
    000000bb: 	movsd	(%rdi), %xmm1
    000000bf: 	comisd	%xmm1, %xmm0
    000000c3: 	ja	.Ltmp1351 # Offset: 195
.Ltmp1349:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1350:
    000000d0: 	movq	%rdi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1342:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1349 # Offset: 228
    000000e6: 	movq	%rax, %rsi
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1347:
    000000f0: 	movsd	-0x8(%rcx,%rsi,8), %xmm1
    000000f6: 	leaq	-0x1(%rsi), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rcx,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1352 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI14PointerWrapperIdEdEEvlT_lT0_" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x8920
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x8920
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI14PointerWrapperIdEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %rcx
    00000012: 	cmpq	%rdi, %rdx
    00000015: 	jge	.Ltmp1353 # Offset: 21
    0000001b: 	movq	%r8, %r9
    0000001e: 	jmp	.Ltmp1354 # Offset: 30
.Ltmp1356:
    00000020: 	movq	%rax, %r9
.Ltmp1354:
    00000023: 	leaq	-0x1(%rdx), %rax
    00000027: 	leaq	(,%rax,8), %rdi
    0000002f: 	leaq	(%rcx,%rdi), %rsi
    00000033: 	leaq	0x8(%rdi,%rcx), %rdi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	(%rdi), %xmm2
    00000040: 	comisd	%xmm1, %xmm2
    00000044: 	jbe	.Ltmp1355 # Offset: 68
    00000046: 	movq	%rdx, %rax
    00000049: 	movapd	%xmm2, %xmm1
    0000004d: 	movq	%rdi, %rsi
    00000050: 	addq	$0x1, %rdx
.Ltmp1355:
    00000054: 	addq	%rdx, %rdx
    00000057: 	movsd	%xmm1, (%rcx,%r9,8)
    0000005d: 	cmpq	%rdx, %r10
    00000060: 	jg	.Ltmp1356 # Offset: 96
    00000062: 	je	.Ltmp1357 # Offset: 98
.Ltmp1362:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1358 # Offset: 120
    0000007a: 	jmp	.Ltmp1359 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1361:
    00000080: 	leaq	-0x1(%rdi), %rdx
    00000084: 	movsd	%xmm1, (%rsi)
    00000088: 	movq	%rdx, %rax
    0000008b: 	shrq	$0x3f, %rax
    0000008f: 	addq	%rdx, %rax
    00000092: 	sarq	%rax
    00000095: 	movq	%rax, %rdx
    00000098: 	movq	%rdi, %rax
    0000009b: 	cmpq	%rdi, %r8
    0000009e: 	jge	.Ltmp1360 # Offset: 158
    000000a0: 	movq	%rdx, %rdi
.Ltmp1358:
    000000a3: 	leaq	(%rcx,%rdi,8), %r9
    000000a7: 	leaq	(%rcx,%rax,8), %rsi
    000000ab: 	movsd	(%r9), %xmm1
    000000b0: 	comisd	%xmm1, %xmm0
    000000b4: 	ja	.Ltmp1361 # Offset: 180
.Ltmp1359:
    000000b6: 	movsd	%xmm0, (%rsi)
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1360:
    000000c0: 	movq	%r9, %rsi
    000000c3: 	movsd	%xmm0, (%rsi)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1353:
    000000d0: 	leaq	(%rsi,%r8,8), %rsi
    000000d4: 	jne	.Ltmp1359 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1357:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp1362 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI14PointerWrapperIdEdEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12ValueWrapperIdES2_EEvlT_lT0_" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x8a20
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0x8a20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12ValueWrapperIdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r9
    0000000c: 	movq	%rsi, %rcx
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp1363 # Offset: 21
    0000001b: 	movq	%rdx, %rdi
    0000001e: 	jmp	.Ltmp1364 # Offset: 30
.Ltmp1366:
    00000020: 	leaq	0x2(%rax,%rax), %rsi
    00000025: 	movsd	%xmm1, (%rcx,%rdi,8)
    0000002a: 	cmpq	%rsi, %r9
    0000002d: 	jle	.Ltmp1365 # Offset: 45
.Ltmp1367:
    0000002f: 	movq	%rax, %rdi
    00000032: 	movq	%rsi, %rax
.Ltmp1364:
    00000035: 	leaq	(,%rax,8), %rsi
    0000003d: 	leaq	(%rcx,%rsi), %rdx
    00000041: 	leaq	-0x8(%rcx,%rsi), %rsi
    00000046: 	movsd	(%rdx), %xmm1
    0000004a: 	comisd	(%rsi), %xmm1
    0000004e: 	ja	.Ltmp1366 # Offset: 78
    00000050: 	movsd	(%rsi), %xmm1
    00000054: 	leaq	-0x1(%rax), %r10
    00000058: 	leaq	(%rax,%rax), %rsi
    0000005c: 	leaq	(%rcx,%r10,8), %rdx
    00000060: 	movq	%r10, %rax
    00000063: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000068: 	cmpq	%r9, %rsi
    0000006b: 	jl	.Ltmp1367 # Offset: 107
.Ltmp1365:
    0000006d: 	cmpq	%r9, %rsi
    00000070: 	je	.Ltmp1368 # Offset: 112
.Ltmp1373:
    00000072: 	leaq	-0x1(%rax), %rdi
    00000076: 	movq	%rdi, %rsi
    00000079: 	shrq	$0x3f, %rsi
    0000007d: 	addq	%rdi, %rsi
    00000080: 	sarq	%rsi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1369 # Offset: 134
    00000088: 	jmp	.Ltmp1370 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1372:
    00000090: 	movsd	(%rdi), %xmm1
    00000094: 	movsd	%xmm1, (%rdx)
    00000098: 	leaq	-0x1(%rsi), %rdx
    0000009c: 	movq	%rdx, %rax
    0000009f: 	shrq	$0x3f, %rax
    000000a3: 	addq	%rdx, %rax
    000000a6: 	sarq	%rax
    000000a9: 	movq	%rax, %rdx
    000000ac: 	movq	%rsi, %rax
    000000af: 	cmpq	%rsi, %r8
    000000b2: 	jge	.Ltmp1371 # Offset: 178
    000000b4: 	movq	%rdx, %rsi
.Ltmp1369:
    000000b7: 	leaq	(%rcx,%rsi,8), %rdi
    000000bb: 	leaq	(%rcx,%rax,8), %rdx
    000000bf: 	comisd	(%rdi), %xmm0
    000000c3: 	ja	.Ltmp1372 # Offset: 195
.Ltmp1370:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1371:
    000000d0: 	movq	%rdi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1363:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1370 # Offset: 228
    000000e6: 	movq	%rax, %rsi
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1368:
    000000f0: 	movsd	-0x8(%rcx,%rsi,8), %xmm1
    000000f6: 	leaq	-0x1(%rsi), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rcx,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1373 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12ValueWrapperIdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x8b30
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x8b30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdx, %r9
    0000000c: 	cmpq	%rdi, %rax
    0000000f: 	jge	.Ltmp1374 # Offset: 15
    00000015: 	movq	%rdx, %r10
    00000018: 	jmp	.Ltmp1375 # Offset: 24
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1377:
    00000020: 	movq	%rcx, %r10
.Ltmp1375:
    00000023: 	leaq	(,%rax,8), %rdx
    0000002b: 	leaq	-0x1(%rax), %rcx
    0000002f: 	leaq	(%rsi,%rdx), %r8
    00000033: 	leaq	-0x8(%rdx,%rsi), %rdx
    00000038: 	movsd	(%r8), %xmm1
    0000003d: 	comisd	(%rdx), %xmm1
    00000041: 	jbe	.Ltmp1376 # Offset: 65
    00000043: 	movq	%rax, %rcx
    00000046: 	movq	%r8, %rdx
    00000049: 	addq	$0x1, %rax
.Ltmp1376:
    0000004d: 	movsd	(%rdx), %xmm1
    00000051: 	addq	%rax, %rax
    00000054: 	movsd	%xmm1, (%rsi,%r10,8)
    0000005a: 	cmpq	%rax, %rdi
    0000005d: 	jg	.Ltmp1377 # Offset: 93
    0000005f: 	je	.Ltmp1378 # Offset: 95
.Ltmp1383:
    00000061: 	leaq	-0x1(%rcx), %rax
    00000065: 	movq	%rax, %rdi
    00000068: 	shrq	$0x3f, %rdi
    0000006c: 	addq	%rax, %rdi
    0000006f: 	sarq	%rdi
    00000072: 	cmpq	%r9, %rcx
    00000075: 	jg	.Ltmp1379 # Offset: 117
    00000077: 	jmp	.Ltmp1380 # Offset: 119
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp1382:
    00000080: 	movsd	(%r8), %xmm1
    00000085: 	movq	%rdi, %rcx
    00000088: 	movsd	%xmm1, (%rdx)
    0000008c: 	leaq	-0x1(%rdi), %rdx
    00000090: 	movq	%rdx, %rax
    00000093: 	shrq	$0x3f, %rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	sarq	%rax
    0000009d: 	cmpq	%rdi, %r9
    000000a0: 	jge	.Ltmp1381 # Offset: 160
    000000a2: 	movq	%rax, %rdi
.Ltmp1379:
    000000a5: 	leaq	(%rsi,%rdi,8), %r8
    000000a9: 	leaq	(%rsi,%rcx,8), %rdx
    000000ad: 	comisd	(%r8), %xmm0
    000000b2: 	ja	.Ltmp1382 # Offset: 178
.Ltmp1380:
    000000b4: 	movsd	%xmm0, (%rdx)
    000000b8: 	retq # Offset: 184
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp1381:
    000000c0: 	movq	%r8, %rdx
    000000c3: 	movsd	%xmm0, (%rdx)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1374:
    000000d0: 	leaq	(%rsi,%rdx,8), %rdx
    000000d4: 	jne	.Ltmp1380 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1378:
    000000e0: 	leaq	-0x1(%rax), %rcx
    000000e4: 	leaq	(%rsi,%rcx,8), %rax
    000000e8: 	movsd	(%rax), %xmm1
    000000ec: 	movsd	%xmm1, (%rdx)
    000000f0: 	movq	%rax, %rdx
    000000f3: 	jmp	.Ltmp1383 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x8c30
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0x8c30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r9
    0000000c: 	movq	%rsi, %rcx
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp1384 # Offset: 21
    0000001b: 	movq	%rdx, %rdi
    0000001e: 	jmp	.Ltmp1385 # Offset: 30
.Ltmp1387:
    00000020: 	leaq	0x2(%rax,%rax), %rsi
    00000025: 	movsd	%xmm1, (%rcx,%rdi,8)
    0000002a: 	cmpq	%rsi, %r9
    0000002d: 	jle	.Ltmp1386 # Offset: 45
.Ltmp1388:
    0000002f: 	movq	%rax, %rdi
    00000032: 	movq	%rsi, %rax
.Ltmp1385:
    00000035: 	leaq	(,%rax,8), %rsi
    0000003d: 	leaq	(%rcx,%rsi), %rdx
    00000041: 	leaq	-0x8(%rcx,%rsi), %rsi
    00000046: 	movsd	(%rdx), %xmm1
    0000004a: 	comisd	(%rsi), %xmm1
    0000004e: 	ja	.Ltmp1387 # Offset: 78
    00000050: 	movsd	(%rsi), %xmm1
    00000054: 	leaq	-0x1(%rax), %r10
    00000058: 	leaq	(%rax,%rax), %rsi
    0000005c: 	leaq	(%rcx,%r10,8), %rdx
    00000060: 	movq	%r10, %rax
    00000063: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000068: 	cmpq	%r9, %rsi
    0000006b: 	jl	.Ltmp1388 # Offset: 107
.Ltmp1386:
    0000006d: 	cmpq	%r9, %rsi
    00000070: 	je	.Ltmp1389 # Offset: 112
.Ltmp1394:
    00000072: 	leaq	-0x1(%rax), %rdi
    00000076: 	movq	%rdi, %rsi
    00000079: 	shrq	$0x3f, %rsi
    0000007d: 	addq	%rdi, %rsi
    00000080: 	sarq	%rsi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1390 # Offset: 134
    00000088: 	jmp	.Ltmp1391 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1393:
    00000090: 	movsd	(%rdi), %xmm1
    00000094: 	movsd	%xmm1, (%rdx)
    00000098: 	leaq	-0x1(%rsi), %rdx
    0000009c: 	movq	%rdx, %rax
    0000009f: 	shrq	$0x3f, %rax
    000000a3: 	addq	%rdx, %rax
    000000a6: 	sarq	%rax
    000000a9: 	movq	%rax, %rdx
    000000ac: 	movq	%rsi, %rax
    000000af: 	cmpq	%rsi, %r8
    000000b2: 	jge	.Ltmp1392 # Offset: 178
    000000b4: 	movq	%rdx, %rsi
.Ltmp1390:
    000000b7: 	leaq	(%rcx,%rsi,8), %rdi
    000000bb: 	leaq	(%rcx,%rax,8), %rdx
    000000bf: 	comisd	(%rdi), %xmm0
    000000c3: 	ja	.Ltmp1393 # Offset: 195
.Ltmp1391:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1392:
    000000d0: 	movq	%rdi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1384:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1391 # Offset: 228
    000000e6: 	movq	%rax, %rsi
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1389:
    000000f0: 	movsd	-0x8(%rcx,%rsi,8), %xmm1
    000000f6: 	leaq	-0x1(%rsi), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rcx,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1394 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x8d40
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x8d40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdx, %r9
    0000000c: 	cmpq	%rdi, %rax
    0000000f: 	jge	.Ltmp1395 # Offset: 15
    00000015: 	movq	%rdx, %r10
    00000018: 	jmp	.Ltmp1396 # Offset: 24
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1398:
    00000020: 	movq	%rcx, %r10
.Ltmp1396:
    00000023: 	leaq	(,%rax,8), %rdx
    0000002b: 	leaq	-0x1(%rax), %rcx
    0000002f: 	leaq	(%rsi,%rdx), %r8
    00000033: 	leaq	-0x8(%rdx,%rsi), %rdx
    00000038: 	movsd	(%r8), %xmm1
    0000003d: 	comisd	(%rdx), %xmm1
    00000041: 	jbe	.Ltmp1397 # Offset: 65
    00000043: 	movq	%rax, %rcx
    00000046: 	movq	%r8, %rdx
    00000049: 	addq	$0x1, %rax
.Ltmp1397:
    0000004d: 	movsd	(%rdx), %xmm1
    00000051: 	addq	%rax, %rax
    00000054: 	movsd	%xmm1, (%rsi,%r10,8)
    0000005a: 	cmpq	%rax, %rdi
    0000005d: 	jg	.Ltmp1398 # Offset: 93
    0000005f: 	je	.Ltmp1399 # Offset: 95
.Ltmp1404:
    00000061: 	leaq	-0x1(%rcx), %rax
    00000065: 	movq	%rax, %rdi
    00000068: 	shrq	$0x3f, %rdi
    0000006c: 	addq	%rax, %rdi
    0000006f: 	sarq	%rdi
    00000072: 	cmpq	%r9, %rcx
    00000075: 	jg	.Ltmp1400 # Offset: 117
    00000077: 	jmp	.Ltmp1401 # Offset: 119
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp1403:
    00000080: 	movsd	(%r8), %xmm1
    00000085: 	movq	%rdi, %rcx
    00000088: 	movsd	%xmm1, (%rdx)
    0000008c: 	leaq	-0x1(%rdi), %rdx
    00000090: 	movq	%rdx, %rax
    00000093: 	shrq	$0x3f, %rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	sarq	%rax
    0000009d: 	cmpq	%rdi, %r9
    000000a0: 	jge	.Ltmp1402 # Offset: 160
    000000a2: 	movq	%rax, %rdi
.Ltmp1400:
    000000a5: 	leaq	(%rsi,%rdi,8), %r8
    000000a9: 	leaq	(%rsi,%rcx,8), %rdx
    000000ad: 	comisd	(%r8), %xmm0
    000000b2: 	ja	.Ltmp1403 # Offset: 178
.Ltmp1401:
    000000b4: 	movsd	%xmm0, (%rdx)
    000000b8: 	retq # Offset: 184
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp1402:
    000000c0: 	movq	%r8, %rdx
    000000c3: 	movsd	%xmm0, (%rdx)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1395:
    000000d0: 	leaq	(%rsi,%rdx,8), %rdx
    000000d4: 	jne	.Ltmp1401 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1399:
    000000e0: 	leaq	-0x1(%rax), %rcx
    000000e4: 	leaq	(%rsi,%rcx,8), %rax
    000000e8: 	movsd	(%rax), %xmm1
    000000ec: 	movsd	%xmm1, (%rdx)
    000000f0: 	movq	%rax, %rdx
    000000f3: 	jmp	.Ltmp1404 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPddEdEdEEvlT_lT0_" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x8e40
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x8e40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPddEdEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %rcx
    00000012: 	cmpq	%rdi, %rdx
    00000015: 	jge	.Ltmp1405 # Offset: 21
    0000001b: 	movq	%r8, %r9
    0000001e: 	jmp	.Ltmp1406 # Offset: 30
.Ltmp1408:
    00000020: 	movq	%rax, %r9
.Ltmp1406:
    00000023: 	leaq	-0x1(%rdx), %rax
    00000027: 	leaq	(,%rax,8), %rdi
    0000002f: 	leaq	(%rcx,%rdi), %rsi
    00000033: 	leaq	0x8(%rdi,%rcx), %rdi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	(%rdi), %xmm2
    00000040: 	comisd	%xmm1, %xmm2
    00000044: 	jbe	.Ltmp1407 # Offset: 68
    00000046: 	movq	%rdx, %rax
    00000049: 	movapd	%xmm2, %xmm1
    0000004d: 	movq	%rdi, %rsi
    00000050: 	addq	$0x1, %rdx
.Ltmp1407:
    00000054: 	addq	%rdx, %rdx
    00000057: 	movsd	%xmm1, (%rcx,%r9,8)
    0000005d: 	cmpq	%rdx, %r10
    00000060: 	jg	.Ltmp1408 # Offset: 96
    00000062: 	je	.Ltmp1409 # Offset: 98
.Ltmp1414:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1410 # Offset: 120
    0000007a: 	jmp	.Ltmp1411 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1413:
    00000080: 	leaq	-0x1(%rdi), %rdx
    00000084: 	movsd	%xmm1, (%rsi)
    00000088: 	movq	%rdx, %rax
    0000008b: 	shrq	$0x3f, %rax
    0000008f: 	addq	%rdx, %rax
    00000092: 	sarq	%rax
    00000095: 	movq	%rax, %rdx
    00000098: 	movq	%rdi, %rax
    0000009b: 	cmpq	%rdi, %r8
    0000009e: 	jge	.Ltmp1412 # Offset: 158
    000000a0: 	movq	%rdx, %rdi
.Ltmp1410:
    000000a3: 	leaq	(%rcx,%rdi,8), %r9
    000000a7: 	leaq	(%rcx,%rax,8), %rsi
    000000ab: 	movsd	(%r9), %xmm1
    000000b0: 	comisd	%xmm1, %xmm0
    000000b4: 	ja	.Ltmp1413 # Offset: 180
.Ltmp1411:
    000000b6: 	movsd	%xmm0, (%rsi)
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1412:
    000000c0: 	movq	%r9, %rsi
    000000c3: 	movsd	%xmm0, (%rsi)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1405:
    000000d0: 	leaq	(%rsi,%r8,8), %rsi
    000000d4: 	jne	.Ltmp1411 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1409:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp1414 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPddEdEdEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEdEEvlT_lT0_" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x8f40
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x8f40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %rcx
    00000012: 	cmpq	%rdi, %rdx
    00000015: 	jge	.Ltmp1415 # Offset: 21
    0000001b: 	movq	%r8, %r9
    0000001e: 	jmp	.Ltmp1416 # Offset: 30
.Ltmp1418:
    00000020: 	movq	%rax, %r9
.Ltmp1416:
    00000023: 	leaq	-0x1(%rdx), %rax
    00000027: 	leaq	(,%rax,8), %rdi
    0000002f: 	leaq	(%rcx,%rdi), %rsi
    00000033: 	leaq	0x8(%rdi,%rcx), %rdi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	(%rdi), %xmm2
    00000040: 	comisd	%xmm1, %xmm2
    00000044: 	jbe	.Ltmp1417 # Offset: 68
    00000046: 	movq	%rdx, %rax
    00000049: 	movapd	%xmm2, %xmm1
    0000004d: 	movq	%rdi, %rsi
    00000050: 	addq	$0x1, %rdx
.Ltmp1417:
    00000054: 	addq	%rdx, %rdx
    00000057: 	movsd	%xmm1, (%rcx,%r9,8)
    0000005d: 	cmpq	%rdx, %r10
    00000060: 	jg	.Ltmp1418 # Offset: 96
    00000062: 	je	.Ltmp1419 # Offset: 98
.Ltmp1424:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1420 # Offset: 120
    0000007a: 	jmp	.Ltmp1421 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1423:
    00000080: 	leaq	-0x1(%rdi), %rdx
    00000084: 	movsd	%xmm1, (%rsi)
    00000088: 	movq	%rdx, %rax
    0000008b: 	shrq	$0x3f, %rax
    0000008f: 	addq	%rdx, %rax
    00000092: 	sarq	%rax
    00000095: 	movq	%rax, %rdx
    00000098: 	movq	%rdi, %rax
    0000009b: 	cmpq	%rdi, %r8
    0000009e: 	jge	.Ltmp1422 # Offset: 158
    000000a0: 	movq	%rdx, %rdi
.Ltmp1420:
    000000a3: 	leaq	(%rcx,%rdi,8), %r9
    000000a7: 	leaq	(%rcx,%rax,8), %rsi
    000000ab: 	movsd	(%r9), %xmm1
    000000b0: 	comisd	%xmm1, %xmm0
    000000b4: 	ja	.Ltmp1423 # Offset: 180
.Ltmp1421:
    000000b6: 	movsd	%xmm0, (%rsi)
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1422:
    000000c0: 	movq	%r9, %rsi
    000000c3: 	movsd	%xmm0, (%rsi)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1415:
    000000d0: 	leaq	(%rsi,%r8,8), %rsi
    000000d4: 	jne	.Ltmp1421 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1419:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp1424 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEdEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_ES4_EEvlT_lT0_" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x9040
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x9040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_ES4_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdx, %r9
    0000000c: 	cmpq	%rdi, %rax
    0000000f: 	jge	.Ltmp1425 # Offset: 15
    00000015: 	movq	%rdx, %r10
    00000018: 	jmp	.Ltmp1426 # Offset: 24
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1428:
    00000020: 	movq	%rcx, %r10
.Ltmp1426:
    00000023: 	leaq	(,%rax,8), %rdx
    0000002b: 	leaq	-0x1(%rax), %rcx
    0000002f: 	leaq	(%rsi,%rdx), %r8
    00000033: 	leaq	-0x8(%rdx,%rsi), %rdx
    00000038: 	movsd	(%r8), %xmm1
    0000003d: 	comisd	(%rdx), %xmm1
    00000041: 	jbe	.Ltmp1427 # Offset: 65
    00000043: 	movq	%rax, %rcx
    00000046: 	movq	%r8, %rdx
    00000049: 	addq	$0x1, %rax
.Ltmp1427:
    0000004d: 	movsd	(%rdx), %xmm1
    00000051: 	addq	%rax, %rax
    00000054: 	movsd	%xmm1, (%rsi,%r10,8)
    0000005a: 	cmpq	%rax, %rdi
    0000005d: 	jg	.Ltmp1428 # Offset: 93
    0000005f: 	je	.Ltmp1429 # Offset: 95
.Ltmp1434:
    00000061: 	leaq	-0x1(%rcx), %rax
    00000065: 	movq	%rax, %rdi
    00000068: 	shrq	$0x3f, %rdi
    0000006c: 	addq	%rax, %rdi
    0000006f: 	sarq	%rdi
    00000072: 	cmpq	%r9, %rcx
    00000075: 	jg	.Ltmp1430 # Offset: 117
    00000077: 	jmp	.Ltmp1431 # Offset: 119
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp1433:
    00000080: 	movsd	(%r8), %xmm1
    00000085: 	movq	%rdi, %rcx
    00000088: 	movsd	%xmm1, (%rdx)
    0000008c: 	leaq	-0x1(%rdi), %rdx
    00000090: 	movq	%rdx, %rax
    00000093: 	shrq	$0x3f, %rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	sarq	%rax
    0000009d: 	cmpq	%rdi, %r9
    000000a0: 	jge	.Ltmp1432 # Offset: 160
    000000a2: 	movq	%rax, %rdi
.Ltmp1430:
    000000a5: 	leaq	(%rsi,%rdi,8), %r8
    000000a9: 	leaq	(%rsi,%rcx,8), %rdx
    000000ad: 	comisd	(%r8), %xmm0
    000000b2: 	ja	.Ltmp1433 # Offset: 178
.Ltmp1431:
    000000b4: 	movsd	%xmm0, (%rdx)
    000000b8: 	retq # Offset: 184
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp1432:
    000000c0: 	movq	%r8, %rdx
    000000c3: 	movsd	%xmm0, (%rdx)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1425:
    000000d0: 	leaq	(%rsi,%rdx,8), %rdx
    000000d4: 	jne	.Ltmp1431 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1429:
    000000e0: 	leaq	-0x1(%rax), %rcx
    000000e4: 	leaq	(%rsi,%rcx,8), %rax
    000000e8: 	movsd	(%rax), %xmm1
    000000ec: 	movsd	%xmm1, (%rdx)
    000000f0: 	movq	%rax, %rdx
    000000f3: 	jmp	.Ltmp1434 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_ES4_EEvlT_lT0_"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x9140
  Size        : 0x30ce
  MaxSize     : 0x30d0
  Offset      : 0x9140
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x17000(%rsp), %r11
.Ltmp1435:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1435 # Offset: 37
    00000027: 	subq	$0x818, %rsp
    0000002e: 	leaq	DATAat0x141e4(%rip), %rsi
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x17808(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	leaq	0x60(%rsp), %rax
    0000004d: 	leaq	0x100(%rsp), %rbp
    00000055: 	movq	%rax, %rdi
    00000058: 	movq	%rax, 0x30(%rsp)
    0000005d: 	leaq	0x3f80(%rsp), %rbx
    00000065: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 101
    0000006a: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm2
    00000072: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    0000007a: 	leaq	0x40(%rsp), %rsi
    0000007f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000086: 	movaps	%xmm2, 0x40(%rsp)
    0000008b: 	movaps	%xmm3, 0x50(%rsp)
    00000090: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 144
    00000095: 	movl	iterations(%rip), %eax
    0000009b: 	movsd	init_value(%rip), %xmm0
    000000a3: 	movl	%eax, 0x3c(%rsp)
    000000a7: 	cvttsd2si	%xmm0, %eax
    000000ab: 	unpcklpd	%xmm0, %xmm0
    000000af: 	addl	$0x7b, %eax
    000000b2: 	cltq
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	movq	%rbp, %rax
.Ltmp1436:
    000000be: 	movaps	%xmm0, (%rax)
    000000c1: 	addq	$0x10, %rax
    000000c5: 	cmpq	%rax, %rbx
    000000c8: 	jne	.Ltmp1436 # Offset: 200
    000000ca: 	leaq	0x7e00(%rsp), %r12
    000000d2: 	movq	%rbx, %rax
.Ltmp1437:
    000000d5: 	movaps	%xmm0, (%rax)
    000000d8: 	addq	$0x10, %rax
    000000dc: 	cmpq	%rax, %r12
    000000df: 	jne	.Ltmp1437 # Offset: 223
    000000e1: 	leaq	0xbc80(%rsp), %r13
    000000e9: 	movq	%r12, %rax
.Ltmp1438:
    000000ec: 	movaps	%xmm0, (%rax)
    000000ef: 	addq	$0x10, %rax
    000000f3: 	cmpq	%rax, %r13
    000000f6: 	jne	.Ltmp1438 # Offset: 246
    000000f8: 	leaq	0x13980(%rsp), %rax
    00000100: 	movq	0x30(%rsp), %rsi
    00000105: 	leaq	DATAat0x141eb(%rip), %rdx
    0000010c: 	movq	%rax, %rdi
    0000010f: 	movq	%rax, 0x18(%rsp)
    00000114: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 276
    00000119: 	callq	clock@PLT # Offset: 281
    0000011e: 	movl	iterations(%rip), %edx
    00000124: 	movq	%rax, start_time(%rip)
    0000012b: 	testl	%edx, %edx
    0000012d: 	jle	.Ltmp1439 # Offset: 301
    0000012f: 	movsd	DATAat0x14878(%rip), %xmm5
    00000137: 	pxor	%xmm4, %xmm4
    0000013b: 	xorl	%r14d, %r14d
    0000013e: 	leaq	DATAat0x141d4(%rip), %r15
    00000145: 	movsd	%xmm4, 0x8(%rsp)
    0000014b: 	movsd	%xmm5, 0x10(%rsp)
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp1442:
    00000158: 	movq	%rbp, %rax
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	nop # Size: 1
.Ltmp1440:
    00000160: 	movsd	(%rax), %xmm1
    00000164: 	addq	$0x10, %rax
    00000168: 	addsd	%xmm1, %xmm0
    0000016c: 	movsd	-0x8(%rax), %xmm1
    00000171: 	addsd	%xmm1, %xmm0
    00000175: 	cmpq	%rax, %rbx
    00000178: 	jne	.Ltmp1440 # Offset: 376
    0000017a: 	movsd	0x10(%rsp), %xmm1
    00000180: 	mulsd	init_value(%rip), %xmm1
    00000188: 	ucomisd	%xmm1, %xmm0
    0000018c: 	jp	.Ltmp1441 # Offset: 396
    00000192: 	jne	.Ltmp1441 # Offset: 402
.Ltmp1676:
    00000198: 	addl	$0x1, %r14d
    0000019c: 	cmpl	%edx, %r14d
    0000019f: 	jl	.Ltmp1442 # Offset: 415
.Ltmp1439:
    000001a1: 	callq	clock@PLT # Offset: 417
    000001a6: 	movq	0x18(%rsp), %rdi
    000001ab: 	pxor	%xmm0, %xmm0
    000001af: 	movq	%rax, end_time(%rip)
    000001b6: 	subq	start_time(%rip), %rax
    000001bd: 	cvtsi2sd	%rax, %xmm0
    000001c2: 	divsd	DATAat0x14868(%rip), %xmm0
    000001ca: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 458
    000001cf: 	movq	0x13980(%rsp), %rdi
    000001d7: 	leaq	0x13990(%rsp), %rax
    000001df: 	movq	%rax, 0x20(%rsp)
    000001e4: 	cmpq	%rax, %rdi
    000001e7: 	je	.Ltmp1443 # Offset: 487
    000001e9: 	movq	0x13990(%rsp), %rax
    000001f1: 	leaq	0x1(%rax), %rsi
    000001f5: 	callq	_ZdlPvm@PLT # Offset: 501
.Ltmp1443:
    000001fa: 	movq	0x30(%rsp), %rsi
    000001ff: 	movq	0x18(%rsp), %rdi
    00000204: 	leaq	DATAat0x141ff(%rip), %rdx
    0000020b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 523
    00000210: 	callq	clock@PLT # Offset: 528
    00000215: 	movl	iterations(%rip), %edx
    0000021b: 	movq	%rax, start_time(%rip)
    00000222: 	testl	%edx, %edx
    00000224: 	jle	.Ltmp1444 # Offset: 548
    00000226: 	movsd	DATAat0x14878(%rip), %xmm7
    0000022e: 	pxor	%xmm6, %xmm6
    00000232: 	xorl	%r14d, %r14d
    00000235: 	leaq	DATAat0x141d4(%rip), %r15
    0000023c: 	movsd	%xmm6, 0x8(%rsp)
    00000242: 	movsd	%xmm7, 0x10(%rsp)
    00000248: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1447:
    00000250: 	movq	%rbp, %rax
    00000253: 	pxor	%xmm0, %xmm0
    00000257: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1445:
    00000260: 	movsd	(%rax), %xmm1
    00000264: 	addq	$0x10, %rax
    00000268: 	addsd	%xmm1, %xmm0
    0000026c: 	movsd	-0x8(%rax), %xmm1
    00000271: 	addsd	%xmm1, %xmm0
    00000275: 	cmpq	%rax, %rbx
    00000278: 	jne	.Ltmp1445 # Offset: 632
    0000027a: 	movsd	0x10(%rsp), %xmm1
    00000280: 	mulsd	init_value(%rip), %xmm1
    00000288: 	ucomisd	%xmm1, %xmm0
    0000028c: 	jp	.Ltmp1446 # Offset: 652
    00000292: 	jne	.Ltmp1446 # Offset: 658
.Ltmp1675:
    00000298: 	addl	$0x1, %r14d
    0000029c: 	cmpl	%edx, %r14d
    0000029f: 	jl	.Ltmp1447 # Offset: 671
.Ltmp1444:
    000002a1: 	callq	clock@PLT # Offset: 673
    000002a6: 	movq	0x18(%rsp), %rdi
    000002ab: 	pxor	%xmm0, %xmm0
    000002af: 	movq	%rax, end_time(%rip)
    000002b6: 	subq	start_time(%rip), %rax
    000002bd: 	cvtsi2sd	%rax, %xmm0
    000002c2: 	divsd	DATAat0x14868(%rip), %xmm0
    000002ca: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 714
    000002cf: 	movq	0x13980(%rsp), %rdi
    000002d7: 	cmpq	0x20(%rsp), %rdi
    000002dc: 	je	.Ltmp1448 # Offset: 732
    000002de: 	movq	0x13990(%rsp), %rax
    000002e6: 	leaq	0x1(%rax), %rsi
    000002ea: 	callq	_ZdlPvm@PLT # Offset: 746
.Ltmp1448:
    000002ef: 	movq	0x30(%rsp), %rsi
    000002f4: 	movq	0x18(%rsp), %rdi
    000002f9: 	leaq	DATAat0x14310(%rip), %rdx
    00000300: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 768
    00000305: 	callq	clock@PLT # Offset: 773
    0000030a: 	movl	iterations(%rip), %edx
    00000310: 	movq	%rax, start_time(%rip)
    00000317: 	testl	%edx, %edx
    00000319: 	jle	.Ltmp1449 # Offset: 793
    0000031b: 	movsd	DATAat0x14878(%rip), %xmm3
    00000323: 	pxor	%xmm2, %xmm2
    00000327: 	xorl	%r14d, %r14d
    0000032a: 	leaq	DATAat0x141d4(%rip), %r15
    00000331: 	movsd	%xmm2, 0x8(%rsp)
    00000337: 	movsd	%xmm3, 0x10(%rsp)
    0000033d: 	nopl	(%rax) # Size: 3
.Ltmp1452:
    00000340: 	movq	%rbx, %rax
    00000343: 	pxor	%xmm0, %xmm0
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1450:
    00000350: 	movsd	(%rax), %xmm1
    00000354: 	addq	$0x10, %rax
    00000358: 	addsd	%xmm1, %xmm0
    0000035c: 	movsd	-0x8(%rax), %xmm1
    00000361: 	addsd	%xmm1, %xmm0
    00000365: 	cmpq	%rax, %r12
    00000368: 	jne	.Ltmp1450 # Offset: 872
    0000036a: 	movsd	0x10(%rsp), %xmm1
    00000370: 	mulsd	init_value(%rip), %xmm1
    00000378: 	ucomisd	%xmm1, %xmm0
    0000037c: 	jp	.Ltmp1451 # Offset: 892
    00000382: 	jne	.Ltmp1451 # Offset: 898
.Ltmp1674:
    00000388: 	addl	$0x1, %r14d
    0000038c: 	cmpl	%edx, %r14d
    0000038f: 	jl	.Ltmp1452 # Offset: 911
.Ltmp1449:
    00000391: 	callq	clock@PLT # Offset: 913
    00000396: 	movq	0x18(%rsp), %rdi
    0000039b: 	pxor	%xmm0, %xmm0
    0000039f: 	movq	%rax, end_time(%rip)
    000003a6: 	subq	start_time(%rip), %rax
    000003ad: 	cvtsi2sd	%rax, %xmm0
    000003b2: 	divsd	DATAat0x14868(%rip), %xmm0
    000003ba: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 954
    000003bf: 	movq	0x13980(%rsp), %rdi
    000003c7: 	cmpq	0x20(%rsp), %rdi
    000003cc: 	je	.Ltmp1453 # Offset: 972
    000003ce: 	movq	0x13990(%rsp), %rax
    000003d6: 	leaq	0x1(%rax), %rsi
    000003da: 	callq	_ZdlPvm@PLT # Offset: 986
.Ltmp1453:
    000003df: 	movq	0x30(%rsp), %rsi
    000003e4: 	movq	0x18(%rsp), %rdi
    000003e9: 	leaq	DATAat0x14338(%rip), %rdx
    000003f0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1008
    000003f5: 	callq	clock@PLT # Offset: 1013
    000003fa: 	movl	iterations(%rip), %edx
    00000400: 	movq	%rax, start_time(%rip)
    00000407: 	testl	%edx, %edx
    00000409: 	jle	.Ltmp1454 # Offset: 1033
    0000040b: 	movsd	DATAat0x14878(%rip), %xmm5
    00000413: 	pxor	%xmm4, %xmm4
    00000417: 	xorl	%r14d, %r14d
    0000041a: 	leaq	DATAat0x141d4(%rip), %r15
    00000421: 	movsd	%xmm4, 0x8(%rsp)
    00000427: 	movsd	%xmm5, 0x10(%rsp)
    0000042d: 	nopl	(%rax) # Size: 3
.Ltmp1457:
    00000430: 	movq	%rbx, %rax
    00000433: 	pxor	%xmm0, %xmm0
    00000437: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1455:
    00000440: 	movsd	(%rax), %xmm1
    00000444: 	addq	$0x10, %rax
    00000448: 	addsd	%xmm1, %xmm0
    0000044c: 	movsd	-0x8(%rax), %xmm1
    00000451: 	addsd	%xmm1, %xmm0
    00000455: 	cmpq	%rax, %r12
    00000458: 	jne	.Ltmp1455 # Offset: 1112
    0000045a: 	movsd	0x10(%rsp), %xmm1
    00000460: 	mulsd	init_value(%rip), %xmm1
    00000468: 	ucomisd	%xmm1, %xmm0
    0000046c: 	jp	.Ltmp1456 # Offset: 1132
    00000472: 	jne	.Ltmp1456 # Offset: 1138
.Ltmp1673:
    00000478: 	addl	$0x1, %r14d
    0000047c: 	cmpl	%edx, %r14d
    0000047f: 	jl	.Ltmp1457 # Offset: 1151
.Ltmp1454:
    00000481: 	callq	clock@PLT # Offset: 1153
    00000486: 	movq	0x18(%rsp), %rdi
    0000048b: 	pxor	%xmm0, %xmm0
    0000048f: 	movq	%rax, end_time(%rip)
    00000496: 	subq	start_time(%rip), %rax
    0000049d: 	cvtsi2sd	%rax, %xmm0
    000004a2: 	divsd	DATAat0x14868(%rip), %xmm0
    000004aa: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1194
    000004af: 	movq	0x13980(%rsp), %rdi
    000004b7: 	cmpq	0x20(%rsp), %rdi
    000004bc: 	je	.Ltmp1458 # Offset: 1212
    000004be: 	movq	0x13990(%rsp), %rax
    000004c6: 	leaq	0x1(%rax), %rsi
    000004ca: 	callq	_ZdlPvm@PLT # Offset: 1226
.Ltmp1458:
    000004cf: 	movq	0x30(%rsp), %rsi
    000004d4: 	movq	0x18(%rsp), %rdi
    000004d9: 	leaq	DATAat0x14368(%rip), %rdx
    000004e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1248
    000004e5: 	callq	clock@PLT # Offset: 1253
    000004ea: 	movl	iterations(%rip), %edx
    000004f0: 	movq	%rax, start_time(%rip)
    000004f7: 	testl	%edx, %edx
    000004f9: 	jle	.Ltmp1459 # Offset: 1273
    000004fb: 	movsd	DATAat0x14878(%rip), %xmm7
    00000503: 	pxor	%xmm6, %xmm6
    00000507: 	xorl	%r14d, %r14d
    0000050a: 	leaq	DATAat0x141d4(%rip), %r15
    00000511: 	movsd	%xmm6, 0x8(%rsp)
    00000517: 	movsd	%xmm7, 0x10(%rsp)
    0000051d: 	nopl	(%rax) # Size: 3
.Ltmp1462:
    00000520: 	movq	%r12, %rax
    00000523: 	pxor	%xmm0, %xmm0
    00000527: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1460:
    00000530: 	movsd	(%rax), %xmm1
    00000534: 	addq	$0x10, %rax
    00000538: 	addsd	%xmm1, %xmm0
    0000053c: 	movsd	-0x8(%rax), %xmm1
    00000541: 	addsd	%xmm1, %xmm0
    00000545: 	cmpq	%rax, %r13
    00000548: 	jne	.Ltmp1460 # Offset: 1352
    0000054a: 	movsd	0x10(%rsp), %xmm1
    00000550: 	mulsd	init_value(%rip), %xmm1
    00000558: 	ucomisd	%xmm1, %xmm0
    0000055c: 	jp	.Ltmp1461 # Offset: 1372
    00000562: 	jne	.Ltmp1461 # Offset: 1378
.Ltmp1672:
    00000568: 	addl	$0x1, %r14d
    0000056c: 	cmpl	%edx, %r14d
    0000056f: 	jl	.Ltmp1462 # Offset: 1391
.Ltmp1459:
    00000571: 	callq	clock@PLT # Offset: 1393
    00000576: 	movq	0x18(%rsp), %rdi
    0000057b: 	pxor	%xmm0, %xmm0
    0000057f: 	movq	%rax, end_time(%rip)
    00000586: 	subq	start_time(%rip), %rax
    0000058d: 	cvtsi2sd	%rax, %xmm0
    00000592: 	divsd	DATAat0x14868(%rip), %xmm0
    0000059a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1434
    0000059f: 	movq	0x13980(%rsp), %rdi
    000005a7: 	cmpq	0x20(%rsp), %rdi
    000005ac: 	je	.Ltmp1463 # Offset: 1452
    000005ae: 	movq	0x13990(%rsp), %rax
    000005b6: 	leaq	0x1(%rax), %rsi
    000005ba: 	callq	_ZdlPvm@PLT # Offset: 1466
.Ltmp1463:
    000005bf: 	movq	0x30(%rsp), %rsi
    000005c4: 	movq	0x18(%rsp), %rdi
    000005c9: 	leaq	DATAat0x14390(%rip), %rdx
    000005d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1488
    000005d5: 	callq	clock@PLT # Offset: 1493
    000005da: 	movl	iterations(%rip), %edx
    000005e0: 	movq	%rax, start_time(%rip)
    000005e7: 	testl	%edx, %edx
    000005e9: 	jle	.Ltmp1464 # Offset: 1513
    000005eb: 	movsd	DATAat0x14878(%rip), %xmm3
    000005f3: 	pxor	%xmm2, %xmm2
    000005f7: 	xorl	%r14d, %r14d
    000005fa: 	leaq	DATAat0x141d4(%rip), %r15
    00000601: 	movsd	%xmm2, 0x8(%rsp)
    00000607: 	movsd	%xmm3, 0x10(%rsp)
    0000060d: 	nopl	(%rax) # Size: 3
.Ltmp1467:
    00000610: 	movq	%r12, %rax
    00000613: 	pxor	%xmm0, %xmm0
    00000617: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1465:
    00000620: 	movsd	(%rax), %xmm1
    00000624: 	addq	$0x10, %rax
    00000628: 	addsd	%xmm1, %xmm0
    0000062c: 	movsd	-0x8(%rax), %xmm1
    00000631: 	addsd	%xmm1, %xmm0
    00000635: 	cmpq	%rax, %r13
    00000638: 	jne	.Ltmp1465 # Offset: 1592
    0000063a: 	movsd	0x10(%rsp), %xmm1
    00000640: 	mulsd	init_value(%rip), %xmm1
    00000648: 	ucomisd	%xmm1, %xmm0
    0000064c: 	jp	.Ltmp1466 # Offset: 1612
    00000652: 	jne	.Ltmp1466 # Offset: 1618
.Ltmp1671:
    00000658: 	addl	$0x1, %r14d
    0000065c: 	cmpl	%edx, %r14d
    0000065f: 	jl	.Ltmp1467 # Offset: 1631
.Ltmp1464:
    00000661: 	callq	clock@PLT # Offset: 1633
    00000666: 	movq	0x18(%rsp), %rdi
    0000066b: 	pxor	%xmm0, %xmm0
    0000066f: 	movq	%rax, end_time(%rip)
    00000676: 	subq	start_time(%rip), %rax
    0000067d: 	cvtsi2sd	%rax, %xmm0
    00000682: 	divsd	DATAat0x14868(%rip), %xmm0
    0000068a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1674
    0000068f: 	movq	0x13980(%rsp), %rdi
    00000697: 	cmpq	0x20(%rsp), %rdi
    0000069c: 	je	.Ltmp1468 # Offset: 1692
    0000069e: 	movq	0x13990(%rsp), %rax
    000006a6: 	leaq	0x1(%rax), %rsi
    000006aa: 	callq	_ZdlPvm@PLT # Offset: 1706
.Ltmp1468:
    000006af: 	movq	0x30(%rsp), %rsi
    000006b4: 	movq	0x18(%rsp), %rdi
    000006b9: 	leaq	DATAat0x143c0(%rip), %rdx
    000006c0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1728
    000006c5: 	callq	clock@PLT # Offset: 1733
    000006ca: 	movl	iterations(%rip), %edx
    000006d0: 	movq	%rax, start_time(%rip)
    000006d7: 	testl	%edx, %edx
    000006d9: 	jle	.Ltmp1469 # Offset: 1753
    000006db: 	movsd	DATAat0x14878(%rip), %xmm5
    000006e3: 	pxor	%xmm4, %xmm4
    000006e7: 	xorl	%r14d, %r14d
    000006ea: 	leaq	DATAat0x141d4(%rip), %r15
    000006f1: 	movsd	%xmm4, 0x8(%rsp)
    000006f7: 	movsd	%xmm5, 0x10(%rsp)
    000006fd: 	nopl	(%rax) # Size: 3
.Ltmp1472:
    00000700: 	movq	%rbp, %rax
    00000703: 	pxor	%xmm0, %xmm0
    00000707: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1470:
    00000710: 	movsd	(%rax), %xmm1
    00000714: 	addq	$0x10, %rax
    00000718: 	addsd	%xmm1, %xmm0
    0000071c: 	movsd	-0x8(%rax), %xmm1
    00000721: 	addsd	%xmm1, %xmm0
    00000725: 	cmpq	%rax, %rbx
    00000728: 	jne	.Ltmp1470 # Offset: 1832
    0000072a: 	movsd	0x10(%rsp), %xmm1
    00000730: 	mulsd	init_value(%rip), %xmm1
    00000738: 	ucomisd	%xmm1, %xmm0
    0000073c: 	jp	.Ltmp1471 # Offset: 1852
    00000742: 	jne	.Ltmp1471 # Offset: 1858
.Ltmp1670:
    00000748: 	addl	$0x1, %r14d
    0000074c: 	cmpl	%edx, %r14d
    0000074f: 	jl	.Ltmp1472 # Offset: 1871
.Ltmp1469:
    00000751: 	callq	clock@PLT # Offset: 1873
    00000756: 	movq	0x18(%rsp), %rdi
    0000075b: 	pxor	%xmm0, %xmm0
    0000075f: 	movq	%rax, end_time(%rip)
    00000766: 	subq	start_time(%rip), %rax
    0000076d: 	cvtsi2sd	%rax, %xmm0
    00000772: 	divsd	DATAat0x14868(%rip), %xmm0
    0000077a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1914
    0000077f: 	movq	0x13980(%rsp), %rdi
    00000787: 	cmpq	0x20(%rsp), %rdi
    0000078c: 	je	.Ltmp1473 # Offset: 1932
    0000078e: 	movq	0x13990(%rsp), %rax
    00000796: 	leaq	0x1(%rax), %rsi
    0000079a: 	callq	_ZdlPvm@PLT # Offset: 1946
.Ltmp1473:
    0000079f: 	movq	0x30(%rsp), %rsi
    000007a4: 	movq	0x18(%rsp), %rdi
    000007a9: 	leaq	DATAat0x143e8(%rip), %rdx
    000007b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1968
    000007b5: 	callq	clock@PLT # Offset: 1973
    000007ba: 	movl	iterations(%rip), %edx
    000007c0: 	movq	%rax, start_time(%rip)
    000007c7: 	testl	%edx, %edx
    000007c9: 	jle	.Ltmp1474 # Offset: 1993
    000007cb: 	movsd	DATAat0x14878(%rip), %xmm7
    000007d3: 	pxor	%xmm6, %xmm6
    000007d7: 	xorl	%r14d, %r14d
    000007da: 	leaq	DATAat0x141d4(%rip), %r15
    000007e1: 	movsd	%xmm6, 0x8(%rsp)
    000007e7: 	movsd	%xmm7, 0x10(%rsp)
    000007ed: 	nopl	(%rax) # Size: 3
.Ltmp1477:
    000007f0: 	movq	%rbp, %rax
    000007f3: 	pxor	%xmm0, %xmm0
    000007f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1475:
    00000800: 	movsd	(%rax), %xmm1
    00000804: 	addq	$0x10, %rax
    00000808: 	addsd	%xmm1, %xmm0
    0000080c: 	movsd	-0x8(%rax), %xmm1
    00000811: 	addsd	%xmm1, %xmm0
    00000815: 	cmpq	%rax, %rbx
    00000818: 	jne	.Ltmp1475 # Offset: 2072
    0000081a: 	movsd	0x10(%rsp), %xmm1
    00000820: 	mulsd	init_value(%rip), %xmm1
    00000828: 	ucomisd	%xmm1, %xmm0
    0000082c: 	jp	.Ltmp1476 # Offset: 2092
    00000832: 	jne	.Ltmp1476 # Offset: 2098
.Ltmp1669:
    00000838: 	addl	$0x1, %r14d
    0000083c: 	cmpl	%edx, %r14d
    0000083f: 	jl	.Ltmp1477 # Offset: 2111
.Ltmp1474:
    00000841: 	callq	clock@PLT # Offset: 2113
    00000846: 	movq	0x18(%rsp), %rdi
    0000084b: 	pxor	%xmm0, %xmm0
    0000084f: 	movq	%rax, end_time(%rip)
    00000856: 	subq	start_time(%rip), %rax
    0000085d: 	cvtsi2sd	%rax, %xmm0
    00000862: 	divsd	DATAat0x14868(%rip), %xmm0
    0000086a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2154
    0000086f: 	movq	0x13980(%rsp), %rdi
    00000877: 	cmpq	0x20(%rsp), %rdi
    0000087c: 	je	.Ltmp1478 # Offset: 2172
    0000087e: 	movq	0x13990(%rsp), %rax
    00000886: 	leaq	0x1(%rax), %rsi
    0000088a: 	callq	_ZdlPvm@PLT # Offset: 2186
.Ltmp1478:
    0000088f: 	movq	0x30(%rsp), %rsi
    00000894: 	movq	0x18(%rsp), %rdi
    00000899: 	leaq	DATAat0x14418(%rip), %rdx
    000008a0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2208
    000008a5: 	callq	clock@PLT # Offset: 2213
    000008aa: 	movl	iterations(%rip), %edx
    000008b0: 	movq	%rax, start_time(%rip)
    000008b7: 	testl	%edx, %edx
    000008b9: 	jle	.Ltmp1479 # Offset: 2233
    000008bb: 	movsd	DATAat0x14878(%rip), %xmm3
    000008c3: 	pxor	%xmm2, %xmm2
    000008c7: 	xorl	%r14d, %r14d
    000008ca: 	leaq	DATAat0x141d4(%rip), %r15
    000008d1: 	movsd	%xmm2, 0x8(%rsp)
    000008d7: 	movsd	%xmm3, 0x10(%rsp)
    000008dd: 	nopl	(%rax) # Size: 3
.Ltmp1482:
    000008e0: 	movq	%rbx, %rax
    000008e3: 	pxor	%xmm0, %xmm0
    000008e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1480:
    000008f0: 	movsd	(%rax), %xmm1
    000008f4: 	addq	$0x10, %rax
    000008f8: 	addsd	%xmm1, %xmm0
    000008fc: 	movsd	-0x8(%rax), %xmm1
    00000901: 	addsd	%xmm1, %xmm0
    00000905: 	cmpq	%rax, %r12
    00000908: 	jne	.Ltmp1480 # Offset: 2312
    0000090a: 	movsd	0x10(%rsp), %xmm1
    00000910: 	mulsd	init_value(%rip), %xmm1
    00000918: 	ucomisd	%xmm1, %xmm0
    0000091c: 	jp	.Ltmp1481 # Offset: 2332
    00000922: 	jne	.Ltmp1481 # Offset: 2338
.Ltmp1668:
    00000928: 	addl	$0x1, %r14d
    0000092c: 	cmpl	%edx, %r14d
    0000092f: 	jl	.Ltmp1482 # Offset: 2351
.Ltmp1479:
    00000931: 	callq	clock@PLT # Offset: 2353
    00000936: 	movq	0x18(%rsp), %rdi
    0000093b: 	pxor	%xmm0, %xmm0
    0000093f: 	movq	%rax, end_time(%rip)
    00000946: 	subq	start_time(%rip), %rax
    0000094d: 	cvtsi2sd	%rax, %xmm0
    00000952: 	divsd	DATAat0x14868(%rip), %xmm0
    0000095a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2394
    0000095f: 	movq	0x13980(%rsp), %rdi
    00000967: 	cmpq	0x20(%rsp), %rdi
    0000096c: 	je	.Ltmp1483 # Offset: 2412
    0000096e: 	movq	0x13990(%rsp), %rax
    00000976: 	leaq	0x1(%rax), %rsi
    0000097a: 	callq	_ZdlPvm@PLT # Offset: 2426
.Ltmp1483:
    0000097f: 	movq	0x30(%rsp), %rsi
    00000984: 	leaq	0x80(%rsp), %rdi
    0000098c: 	leaq	DATAat0x14219(%rip), %rdx
    00000993: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2451
    00000998: 	movl	iterations(%rip), %edx
    0000099e: 	movl	$0x1, %r8d
    000009a4: 	movl	$0x1, %ecx
    000009a9: 	movq	0x80(%rsp), %rdi
    000009b1: 	movl	$0x7d0, %esi
    000009b6: 	callq	_Z9summarizePKciiii # Offset: 2486
    000009bb: 	movslq	iterations(%rip), %rax
    000009c2: 	leaq	0xfb00(%rsp), %r8
    000009ca: 	movabsq	$0x5851f42d4c957f2d, %rdi
    000009d4: 	movabsq	$0x14057b7ef767814f, %rsi
    000009de: 	movq	%r8, 0x10(%rsp)
    000009e3: 	movq	%rax, %rdx
    000009e6: 	imulq	$0x10624dd3, %rax, %rax
    000009ed: 	sarl	$0x1f, %edx
    000009f0: 	sarq	$0x26, %rax
    000009f4: 	subl	%edx, %eax
    000009f6: 	movq	%r13, %rdx
    000009f9: 	movl	%eax, iterations(%rip)
    000009ff: 	nop # Size: 1
.Ltmp1484:
    00000a00: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000a07: 	pxor	%xmm0, %xmm0
    00000a0b: 	addq	$0x8, %rdx
    00000a0f: 	imulq	%rdi, %rax
    00000a13: 	addq	%rsi, %rax
    00000a16: 	movq	%rax, %rcx
    00000a19: 	movq	%rax, %r9
    00000a1c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000a23: 	shrq	$0x14, %rcx
    00000a27: 	shlq	$0x17, %r9
    00000a2b: 	xorq	%r9, %rcx
    00000a2e: 	xorq	%rcx, %rax
    00000a31: 	sarq	$0x3, %rax
    00000a35: 	cvtsi2sd	%rax, %xmm0
    00000a3a: 	movsd	%xmm0, -0x8(%rdx)
    00000a3f: 	cmpq	%r8, %rdx
    00000a42: 	jne	.Ltmp1484 # Offset: 2626
    00000a44: 	movq	0x10(%rsp), %rdi
    00000a49: 	movl	$0x3e80, %edx
    00000a4e: 	movq	%r13, %rsi
    00000a51: 	callq	memcpy@PLT # Offset: 2641
    00000a56: 	movq	0x18(%rsp), %rdi
    00000a5b: 	movl	$0x3e80, %edx
    00000a60: 	movq	%r13, %rsi
    00000a63: 	callq	memcpy@PLT # Offset: 2659
    00000a68: 	leaq	0xe0(%rsp), %rax
    00000a70: 	movq	0x30(%rsp), %rsi
    00000a75: 	leaq	DATAat0x14231(%rip), %rdx
    00000a7c: 	movq	%rax, %rdi
    00000a7f: 	movq	%rax, 0x8(%rsp)
    00000a84: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2692
    00000a89: 	callq	clock@PLT # Offset: 2697
    00000a8e: 	xorl	%r14d, %r14d
    00000a91: 	leaq	0x108(%rsp), %r15
    00000a99: 	movq	%rax, start_time(%rip)
    00000aa0: 	movl	iterations(%rip), %eax
    00000aa6: 	testl	%eax, %eax
    00000aa8: 	jle	.Ltmp1485 # Offset: 2728
    00000aaa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1489:
    00000ab0: 	movl	$0x3e80, %edx
    00000ab5: 	movq	%r13, %rsi
    00000ab8: 	movq	%rbp, %rdi
    00000abb: 	callq	memcpy@PLT # Offset: 2747
    00000ac0: 	movq	%r15, %rcx
    00000ac3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1488:
    00000ac8: 	movsd	(%rcx), %xmm1
    00000acc: 	movq	%rcx, %rax
    00000acf: 	nop # Size: 1
.Ltmp1487:
    00000ad0: 	movq	%rax, %rdx
    00000ad3: 	leaq	-0x8(%rax), %rax
    00000ad7: 	movsd	-0x8(%rdx), %xmm0
    00000adc: 	comisd	%xmm1, %xmm0
    00000ae0: 	jbe	.Ltmp1486 # Offset: 2784
    00000ae2: 	movsd	%xmm0, 0x8(%rax)
    00000ae7: 	cmpq	%rbp, %rax
    00000aea: 	jne	.Ltmp1487 # Offset: 2794
    00000aec: 	movq	%rbp, %rdx
.Ltmp1486:
    00000aef: 	addq	$0x8, %rcx
    00000af3: 	movsd	%xmm1, (%rdx)
    00000af7: 	cmpq	%rbx, %rcx
    00000afa: 	jne	.Ltmp1488 # Offset: 2810
    00000afc: 	movq	0x8(%rsp), %rdx
    00000b01: 	movq	%rbx, %rsi
    00000b04: 	movq	%rbp, %rdi
    00000b07: 	callq	_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2823
    00000b0c: 	addl	$0x1, %r14d
    00000b10: 	cmpl	iterations(%rip), %r14d
    00000b17: 	jl	.Ltmp1489 # Offset: 2839
.Ltmp1485:
    00000b19: 	callq	clock@PLT # Offset: 2841
    00000b1e: 	movq	0x8(%rsp), %rdi
    00000b23: 	pxor	%xmm0, %xmm0
    00000b27: 	movq	%rax, end_time(%rip)
    00000b2e: 	subq	start_time(%rip), %rax
    00000b35: 	cvtsi2sd	%rax, %xmm0
    00000b3a: 	divsd	DATAat0x14868(%rip), %xmm0
    00000b42: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2882
    00000b47: 	movq	0xe0(%rsp), %rdi
    00000b4f: 	leaq	0xf0(%rsp), %rax
    00000b57: 	movq	%rax, 0x28(%rsp)
    00000b5c: 	cmpq	%rax, %rdi
    00000b5f: 	je	.Ltmp1490 # Offset: 2911
    00000b61: 	movq	0xf0(%rsp), %rax
    00000b69: 	leaq	0x1(%rax), %rsi
    00000b6d: 	callq	_ZdlPvm@PLT # Offset: 2925
.Ltmp1490:
    00000b72: 	movq	0x30(%rsp), %rsi
    00000b77: 	movq	0x8(%rsp), %rdi
    00000b7c: 	leaq	DATAat0x14249(%rip), %rdx
    00000b83: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2947
    00000b88: 	callq	clock@PLT # Offset: 2952
    00000b8d: 	xorl	%r14d, %r14d
    00000b90: 	leaq	0x108(%rsp), %r15
    00000b98: 	movq	%rax, start_time(%rip)
    00000b9f: 	movl	iterations(%rip), %eax
    00000ba5: 	movl	%eax, 0x20(%rsp)
    00000ba9: 	testl	%eax, %eax
    00000bab: 	jle	.Ltmp1491 # Offset: 2987
    00000bb1: 	nopl	(%rax) # Size: 7
.Ltmp1499:
    00000bb8: 	movl	$0x3e80, %edx
    00000bbd: 	movq	%r13, %rsi
    00000bc0: 	movq	%rbp, %rdi
    00000bc3: 	callq	memcpy@PLT # Offset: 3011
    00000bc8: 	movq	%r15, %rcx
    00000bcb: 	movq	%r15, %rdx
    00000bce: 	nop # Size: 2
.Ltmp1496:
    00000bd0: 	movsd	(%rdx), %xmm1
    00000bd4: 	cmpq	%rbp, %rdx
    00000bd7: 	je	.Ltmp1492 # Offset: 3031
    00000bdd: 	movq	%rdx, %rax
    00000be0: 	jmp	.Ltmp1493 # Offset: 3040
    00000be2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1495:
    00000be8: 	movsd	%xmm0, (%rax)
    00000bec: 	subq	$0x8, %rax
    00000bf0: 	cmpq	%rax, %rbp
    00000bf3: 	je	.Ltmp1494 # Offset: 3059
.Ltmp1493:
    00000bf5: 	movsd	-0x8(%rax), %xmm0
    00000bfa: 	comisd	%xmm1, %xmm0
    00000bfe: 	ja	.Ltmp1495 # Offset: 3070
.Ltmp1494:
    00000c00: 	addq	$0x8, %rdx
    00000c04: 	movsd	%xmm1, (%rax)
    00000c08: 	cmpq	%rdx, %rbx
    00000c0b: 	jne	.Ltmp1496 # Offset: 3083
    00000c0d: 	movsd	0x100(%rsp), %xmm0
    00000c16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1498:
    00000c20: 	movapd	%xmm0, %xmm1
    00000c24: 	movsd	(%rcx), %xmm0
    00000c28: 	comisd	%xmm0, %xmm1
    00000c2c: 	ja	.Ltmp1497 # Offset: 3116
    00000c32: 	addq	$0x8, %rcx
    00000c36: 	cmpq	%rcx, %rbx
    00000c39: 	jne	.Ltmp1498 # Offset: 3129
    00000c3b: 	addl	$0x1, %r14d
    00000c3f: 	cmpl	0x20(%rsp), %r14d
    00000c44: 	jl	.Ltmp1499 # Offset: 3140
.Ltmp1491:
    00000c4a: 	callq	clock@PLT # Offset: 3146
    00000c4f: 	movq	0x8(%rsp), %rdi
    00000c54: 	pxor	%xmm0, %xmm0
    00000c58: 	movq	%rax, end_time(%rip)
    00000c5f: 	subq	start_time(%rip), %rax
    00000c66: 	cvtsi2sd	%rax, %xmm0
    00000c6b: 	divsd	DATAat0x14868(%rip), %xmm0
    00000c73: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3187
    00000c78: 	movq	0xe0(%rsp), %rdi
    00000c80: 	cmpq	0x28(%rsp), %rdi
    00000c85: 	je	.Ltmp1500 # Offset: 3205
    00000c87: 	movq	0xf0(%rsp), %rax
    00000c8f: 	leaq	0x1(%rax), %rsi
    00000c93: 	callq	_ZdlPvm@PLT # Offset: 3219
.Ltmp1500:
    00000c98: 	movq	0x30(%rsp), %rsi
    00000c9d: 	movq	0x8(%rsp), %rdi
    00000ca2: 	leaq	DATAat0x14458(%rip), %rdx
    00000ca9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3241
    00000cae: 	callq	clock@PLT # Offset: 3246
    00000cb3: 	xorl	%r14d, %r14d
    00000cb6: 	movq	%rax, start_time(%rip)
    00000cbd: 	leaq	0x3f88(%rsp), %rax
    00000cc5: 	movq	%rax, 0x20(%rsp)
    00000cca: 	movl	iterations(%rip), %eax
    00000cd0: 	testl	%eax, %eax
    00000cd2: 	jle	.Ltmp1501 # Offset: 3282
    00000cd4: 	nopl	(%rax) # Size: 4
.Ltmp1505:
    00000cd8: 	movq	0x10(%rsp), %rsi
    00000cdd: 	movl	$0x3e80, %edx
    00000ce2: 	movq	%rbx, %rdi
    00000ce5: 	callq	memcpy@PLT # Offset: 3301
    00000cea: 	movq	0x20(%rsp), %rcx
    00000cef: 	nop # Size: 1
.Ltmp1504:
    00000cf0: 	movsd	(%rcx), %xmm1
    00000cf4: 	movq	%rcx, %rax
    00000cf7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1503:
    00000d00: 	movq	%rax, %rdx
    00000d03: 	leaq	-0x8(%rax), %rax
    00000d07: 	movsd	-0x8(%rdx), %xmm0
    00000d0c: 	comisd	%xmm1, %xmm0
    00000d10: 	jbe	.Ltmp1502 # Offset: 3344
    00000d12: 	movsd	%xmm0, 0x8(%rax)
    00000d17: 	cmpq	%rbx, %rax
    00000d1a: 	jne	.Ltmp1503 # Offset: 3354
    00000d1c: 	movq	%rbx, %rdx
.Ltmp1502:
    00000d1f: 	addq	$0x8, %rcx
    00000d23: 	movsd	%xmm1, (%rdx)
    00000d27: 	cmpq	%r12, %rcx
    00000d2a: 	jne	.Ltmp1504 # Offset: 3370
    00000d2c: 	movq	0x8(%rsp), %rdx
    00000d31: 	movq	%r12, %rsi
    00000d34: 	movq	%rbx, %rdi
    00000d37: 	callq	_Z13verify_sortedIP12ValueWrapperIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3383
    00000d3c: 	addl	$0x1, %r14d
    00000d40: 	cmpl	iterations(%rip), %r14d
    00000d47: 	jl	.Ltmp1505 # Offset: 3399
.Ltmp1501:
    00000d49: 	callq	clock@PLT # Offset: 3401
    00000d4e: 	movq	0x8(%rsp), %rdi
    00000d53: 	pxor	%xmm0, %xmm0
    00000d57: 	movq	%rax, end_time(%rip)
    00000d5e: 	subq	start_time(%rip), %rax
    00000d65: 	cvtsi2sd	%rax, %xmm0
    00000d6a: 	divsd	DATAat0x14868(%rip), %xmm0
    00000d72: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3442
    00000d77: 	movq	0xe0(%rsp), %rdi
    00000d7f: 	cmpq	0x28(%rsp), %rdi
    00000d84: 	je	.Ltmp1506 # Offset: 3460
    00000d86: 	movq	0xf0(%rsp), %rax
    00000d8e: 	leaq	0x1(%rax), %rsi
    00000d92: 	callq	_ZdlPvm@PLT # Offset: 3474
.Ltmp1506:
    00000d97: 	movq	0x30(%rsp), %rsi
    00000d9c: 	movq	0x8(%rsp), %rdi
    00000da1: 	leaq	DATAat0x14488(%rip), %rdx
    00000da8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3496
    00000dad: 	callq	clock@PLT # Offset: 3501
    00000db2: 	movl	iterations(%rip), %r15d
    00000db9: 	xorl	%r14d, %r14d
    00000dbc: 	movq	%rax, start_time(%rip)
    00000dc3: 	leaq	0x3f88(%rsp), %rax
    00000dcb: 	movq	%rax, 0x20(%rsp)
    00000dd0: 	testl	%r15d, %r15d
    00000dd3: 	jle	.Ltmp1507 # Offset: 3539
    00000dd9: 	nopl	(%rax) # Size: 7
.Ltmp1515:
    00000de0: 	movq	0x10(%rsp), %rsi
    00000de5: 	movl	$0x3e80, %edx
    00000dea: 	movq	%rbx, %rdi
    00000ded: 	callq	memcpy@PLT # Offset: 3565
    00000df2: 	movq	0x20(%rsp), %rcx
    00000df7: 	movq	%rcx, %rsi
    00000dfa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1512:
    00000e00: 	movsd	(%rcx), %xmm1
    00000e04: 	movq	%rcx, %rax
    00000e07: 	cmpq	%rbx, %rcx
    00000e0a: 	jne	.Ltmp1508 # Offset: 3594
    00000e0c: 	jmp	.Ltmp1509 # Offset: 3596
    00000e11: 	nopl	(%rax) # Size: 7
.Ltmp1511:
    00000e18: 	movsd	%xmm0, 0x8(%rax)
    00000e1d: 	cmpq	%rbx, %rax
    00000e20: 	je	.Ltmp1510 # Offset: 3616
.Ltmp1508:
    00000e26: 	movq	%rax, %rdx
    00000e29: 	leaq	-0x8(%rax), %rax
    00000e2d: 	movsd	-0x8(%rdx), %xmm0
    00000e32: 	comisd	%xmm1, %xmm0
    00000e36: 	ja	.Ltmp1511 # Offset: 3638
    00000e38: 	addq	$0x8, %rcx
    00000e3c: 	movsd	%xmm1, (%rdx)
    00000e40: 	cmpq	%rcx, %r12
    00000e43: 	jne	.Ltmp1512 # Offset: 3651
.Ltmp1667:
    00000e45: 	movsd	0x3f80(%rsp), %xmm0
    00000e4e: 	nop # Size: 2
.Ltmp1514:
    00000e50: 	movapd	%xmm0, %xmm1
    00000e54: 	movsd	(%rsi), %xmm0
    00000e58: 	comisd	%xmm0, %xmm1
    00000e5c: 	ja	.Ltmp1513 # Offset: 3676
    00000e62: 	addq	$0x8, %rsi
    00000e66: 	cmpq	%rsi, %r12
    00000e69: 	jne	.Ltmp1514 # Offset: 3689
    00000e6b: 	addl	$0x1, %r14d
    00000e6f: 	cmpl	%r15d, %r14d
    00000e72: 	jl	.Ltmp1515 # Offset: 3698
.Ltmp1507:
    00000e78: 	callq	clock@PLT # Offset: 3704
    00000e7d: 	movq	0x8(%rsp), %rdi
    00000e82: 	pxor	%xmm0, %xmm0
    00000e86: 	movq	%rax, end_time(%rip)
    00000e8d: 	subq	start_time(%rip), %rax
    00000e94: 	cvtsi2sd	%rax, %xmm0
    00000e99: 	divsd	DATAat0x14868(%rip), %xmm0
    00000ea1: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3745
    00000ea6: 	movq	0xe0(%rsp), %rdi
    00000eae: 	cmpq	0x28(%rsp), %rdi
    00000eb3: 	je	.Ltmp1516 # Offset: 3763
    00000eb5: 	movq	0xf0(%rsp), %rax
    00000ebd: 	leaq	0x1(%rax), %rsi
    00000ec1: 	callq	_ZdlPvm@PLT # Offset: 3777
.Ltmp1516:
    00000ec6: 	movq	0x30(%rsp), %rsi
    00000ecb: 	movq	0x8(%rsp), %rdi
    00000ed0: 	leaq	DATAat0x144b8(%rip), %rdx
    00000ed7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3799
    00000edc: 	callq	clock@PLT # Offset: 3804
    00000ee1: 	xorl	%r14d, %r14d
    00000ee4: 	leaq	0x7e08(%rsp), %r15
    00000eec: 	movq	%rax, start_time(%rip)
    00000ef3: 	movl	iterations(%rip), %eax
    00000ef9: 	testl	%eax, %eax
    00000efb: 	jle	.Ltmp1517 # Offset: 3835
    00000efd: 	nopl	(%rax) # Size: 3
.Ltmp1521:
    00000f00: 	movq	0x18(%rsp), %rsi
    00000f05: 	movl	$0x3e80, %edx
    00000f0a: 	movq	%r12, %rdi
    00000f0d: 	callq	memcpy@PLT # Offset: 3853
    00000f12: 	movq	%r15, %rcx
    00000f15: 	nopl	(%rax) # Size: 3
.Ltmp1520:
    00000f18: 	movsd	(%rcx), %xmm1
    00000f1c: 	movq	%rcx, %rax
    00000f1f: 	nop # Size: 1
.Ltmp1519:
    00000f20: 	movq	%rax, %rdx
    00000f23: 	leaq	-0x8(%rax), %rax
    00000f27: 	movsd	-0x8(%rdx), %xmm0
    00000f2c: 	comisd	%xmm1, %xmm0
    00000f30: 	jbe	.Ltmp1518 # Offset: 3888
    00000f32: 	movsd	%xmm0, 0x8(%rax)
    00000f37: 	cmpq	%r12, %rax
    00000f3a: 	jne	.Ltmp1519 # Offset: 3898
    00000f3c: 	movq	%r12, %rdx
.Ltmp1518:
    00000f3f: 	addq	$0x8, %rcx
    00000f43: 	movsd	%xmm1, (%rdx)
    00000f47: 	cmpq	%r13, %rcx
    00000f4a: 	jne	.Ltmp1520 # Offset: 3914
    00000f4c: 	movq	0x8(%rsp), %rdx
    00000f51: 	movq	%r13, %rsi
    00000f54: 	movq	%r12, %rdi
    00000f57: 	callq	_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3927
    00000f5c: 	addl	$0x1, %r14d
    00000f60: 	cmpl	iterations(%rip), %r14d
    00000f67: 	jl	.Ltmp1521 # Offset: 3943
.Ltmp1517:
    00000f69: 	callq	clock@PLT # Offset: 3945
    00000f6e: 	movq	0x8(%rsp), %rdi
    00000f73: 	pxor	%xmm0, %xmm0
    00000f77: 	movq	%rax, end_time(%rip)
    00000f7e: 	subq	start_time(%rip), %rax
    00000f85: 	cvtsi2sd	%rax, %xmm0
    00000f8a: 	divsd	DATAat0x14868(%rip), %xmm0
    00000f92: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3986
    00000f97: 	movq	0xe0(%rsp), %rdi
    00000f9f: 	cmpq	0x28(%rsp), %rdi
    00000fa4: 	je	.Ltmp1522 # Offset: 4004
    00000fa6: 	movq	0xf0(%rsp), %rax
    00000fae: 	leaq	0x1(%rax), %rsi
    00000fb2: 	callq	_ZdlPvm@PLT # Offset: 4018
.Ltmp1522:
    00000fb7: 	movq	0x30(%rsp), %rsi
    00000fbc: 	movq	0x8(%rsp), %rdi
    00000fc1: 	leaq	DATAat0x144e8(%rip), %rdx
    00000fc8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4040
    00000fcd: 	callq	clock@PLT # Offset: 4045
    00000fd2: 	xorl	%r14d, %r14d
    00000fd5: 	leaq	0x7e08(%rsp), %r15
    00000fdd: 	movq	%rax, start_time(%rip)
    00000fe4: 	movl	iterations(%rip), %eax
    00000fea: 	movl	%eax, 0x20(%rsp)
    00000fee: 	testl	%eax, %eax
    00000ff0: 	jle	.Ltmp1523 # Offset: 4080
    00000ff6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1531:
    00001000: 	movq	0x18(%rsp), %rsi
    00001005: 	movl	$0x3e80, %edx
    0000100a: 	movq	%r12, %rdi
    0000100d: 	callq	memcpy@PLT # Offset: 4109
    00001012: 	movq	%r15, %rsi
    00001015: 	movq	%r15, %rcx
    00001018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1528:
    00001020: 	movsd	(%rcx), %xmm1
    00001024: 	movq	%rcx, %rax
    00001027: 	cmpq	%r12, %rcx
    0000102a: 	jne	.Ltmp1524 # Offset: 4138
    0000102c: 	jmp	.Ltmp1525 # Offset: 4140
    00001031: 	nopl	(%rax) # Size: 7
.Ltmp1527:
    00001038: 	movsd	%xmm0, 0x8(%rax)
    0000103d: 	cmpq	%r12, %rax
    00001040: 	je	.Ltmp1526 # Offset: 4160
.Ltmp1524:
    00001046: 	movq	%rax, %rdx
    00001049: 	leaq	-0x8(%rax), %rax
    0000104d: 	movsd	-0x8(%rdx), %xmm0
    00001052: 	comisd	%xmm1, %xmm0
    00001056: 	ja	.Ltmp1527 # Offset: 4182
    00001058: 	addq	$0x8, %rcx
    0000105c: 	movsd	%xmm1, (%rdx)
    00001060: 	cmpq	%rcx, %r13
    00001063: 	jne	.Ltmp1528 # Offset: 4195
.Ltmp1666:
    00001065: 	movsd	0x7e00(%rsp), %xmm0
    0000106e: 	nop # Size: 2
.Ltmp1530:
    00001070: 	movapd	%xmm0, %xmm1
    00001074: 	movsd	(%rsi), %xmm0
    00001078: 	comisd	%xmm0, %xmm1
    0000107c: 	ja	.Ltmp1529 # Offset: 4220
    00001082: 	addq	$0x8, %rsi
    00001086: 	cmpq	%rsi, %r13
    00001089: 	jne	.Ltmp1530 # Offset: 4233
    0000108b: 	addl	$0x1, %r14d
    0000108f: 	cmpl	0x20(%rsp), %r14d
    00001094: 	jl	.Ltmp1531 # Offset: 4244
.Ltmp1523:
    0000109a: 	callq	clock@PLT # Offset: 4250
    0000109f: 	movq	0x8(%rsp), %rdi
    000010a4: 	pxor	%xmm0, %xmm0
    000010a8: 	movq	%rax, end_time(%rip)
    000010af: 	subq	start_time(%rip), %rax
    000010b6: 	cvtsi2sd	%rax, %xmm0
    000010bb: 	divsd	DATAat0x14868(%rip), %xmm0
    000010c3: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4291
    000010c8: 	movq	0xe0(%rsp), %rdi
    000010d0: 	cmpq	0x28(%rsp), %rdi
    000010d5: 	je	.Ltmp1532 # Offset: 4309
    000010d7: 	movq	0xf0(%rsp), %rax
    000010df: 	leaq	0x1(%rax), %rsi
    000010e3: 	callq	_ZdlPvm@PLT # Offset: 4323
.Ltmp1532:
    000010e8: 	movq	0x30(%rsp), %rsi
    000010ed: 	movq	0x8(%rsp), %rdi
    000010f2: 	leaq	DATAat0x14520(%rip), %rdx
    000010f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4345
    000010fe: 	callq	clock@PLT # Offset: 4350
    00001103: 	xorl	%r14d, %r14d
    00001106: 	leaq	0x108(%rsp), %r15
    0000110e: 	movq	%rax, start_time(%rip)
    00001115: 	movl	iterations(%rip), %eax
    0000111b: 	movl	%eax, 0x20(%rsp)
    0000111f: 	testl	%eax, %eax
    00001121: 	jle	.Ltmp1533 # Offset: 4385
    00001127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1541:
    00001130: 	movl	$0x3e80, %edx
    00001135: 	movq	%r13, %rsi
    00001138: 	movq	%rbp, %rdi
    0000113b: 	callq	memcpy@PLT # Offset: 4411
    00001140: 	movq	%r15, %rcx
    00001143: 	movq	%r15, %rdx
    00001146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1538:
    00001150: 	movsd	(%rdx), %xmm1
    00001154: 	cmpq	%rbp, %rdx
    00001157: 	je	.Ltmp1534 # Offset: 4439
    0000115d: 	movq	%rdx, %rax
    00001160: 	jmp	.Ltmp1535 # Offset: 4448
    00001162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1537:
    00001168: 	movsd	%xmm0, (%rax)
    0000116c: 	subq	$0x8, %rax
    00001170: 	cmpq	%rax, %rbp
    00001173: 	je	.Ltmp1536 # Offset: 4467
.Ltmp1535:
    00001175: 	movsd	-0x8(%rax), %xmm0
    0000117a: 	comisd	%xmm1, %xmm0
    0000117e: 	ja	.Ltmp1537 # Offset: 4478
.Ltmp1536:
    00001180: 	addq	$0x8, %rdx
    00001184: 	movsd	%xmm1, (%rax)
    00001188: 	cmpq	%rdx, %rbx
    0000118b: 	jne	.Ltmp1538 # Offset: 4491
    0000118d: 	movsd	0x100(%rsp), %xmm0
    00001196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1540:
    000011a0: 	movapd	%xmm0, %xmm1
    000011a4: 	movsd	(%rcx), %xmm0
    000011a8: 	comisd	%xmm0, %xmm1
    000011ac: 	ja	.Ltmp1539 # Offset: 4524
    000011b2: 	addq	$0x8, %rcx
    000011b6: 	cmpq	%rbx, %rcx
    000011b9: 	jne	.Ltmp1540 # Offset: 4537
    000011bb: 	addl	$0x1, %r14d
    000011bf: 	cmpl	0x20(%rsp), %r14d
    000011c4: 	jl	.Ltmp1541 # Offset: 4548
.Ltmp1533:
    000011ca: 	callq	clock@PLT # Offset: 4554
    000011cf: 	movq	0x8(%rsp), %rdi
    000011d4: 	pxor	%xmm0, %xmm0
    000011d8: 	movq	%rax, end_time(%rip)
    000011df: 	subq	start_time(%rip), %rax
    000011e6: 	cvtsi2sd	%rax, %xmm0
    000011eb: 	divsd	DATAat0x14868(%rip), %xmm0
    000011f3: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4595
    000011f8: 	movq	0xe0(%rsp), %rdi
    00001200: 	cmpq	0x28(%rsp), %rdi
    00001205: 	je	.Ltmp1542 # Offset: 4613
    00001207: 	movq	0xf0(%rsp), %rax
    0000120f: 	leaq	0x1(%rax), %rsi
    00001213: 	callq	_ZdlPvm@PLT # Offset: 4627
.Ltmp1542:
    00001218: 	movq	0x30(%rsp), %rsi
    0000121d: 	movq	0x8(%rsp), %rdi
    00001222: 	leaq	DATAat0x14548(%rip), %rdx
    00001229: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4649
    0000122e: 	callq	clock@PLT # Offset: 4654
    00001233: 	xorl	%r14d, %r14d
    00001236: 	leaq	0x108(%rsp), %r15
    0000123e: 	movq	%rax, start_time(%rip)
    00001245: 	movl	iterations(%rip), %eax
    0000124b: 	movl	%eax, 0x20(%rsp)
    0000124f: 	testl	%eax, %eax
    00001251: 	jle	.Ltmp1543 # Offset: 4689
    00001257: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1551:
    00001260: 	movl	$0x3e80, %edx
    00001265: 	movq	%r13, %rsi
    00001268: 	movq	%rbp, %rdi
    0000126b: 	callq	memcpy@PLT # Offset: 4715
    00001270: 	movq	%r15, %rcx
    00001273: 	movq	%r15, %rdx
    00001276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1548:
    00001280: 	movsd	(%rdx), %xmm1
    00001284: 	cmpq	%rbp, %rdx
    00001287: 	je	.Ltmp1544 # Offset: 4743
    0000128d: 	movq	%rdx, %rax
    00001290: 	jmp	.Ltmp1545 # Offset: 4752
    00001292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1547:
    00001298: 	movsd	%xmm0, (%rax)
    0000129c: 	subq	$0x8, %rax
    000012a0: 	cmpq	%rax, %rbp
    000012a3: 	je	.Ltmp1546 # Offset: 4771
.Ltmp1545:
    000012a5: 	movsd	-0x8(%rax), %xmm0
    000012aa: 	comisd	%xmm1, %xmm0
    000012ae: 	ja	.Ltmp1547 # Offset: 4782
.Ltmp1546:
    000012b0: 	addq	$0x8, %rdx
    000012b4: 	movsd	%xmm1, (%rax)
    000012b8: 	cmpq	%rdx, %rbx
    000012bb: 	jne	.Ltmp1548 # Offset: 4795
    000012bd: 	movsd	0x100(%rsp), %xmm0
    000012c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1550:
    000012d0: 	movapd	%xmm0, %xmm1
    000012d4: 	movsd	(%rcx), %xmm0
    000012d8: 	comisd	%xmm0, %xmm1
    000012dc: 	ja	.Ltmp1549 # Offset: 4828
    000012e2: 	addq	$0x8, %rcx
    000012e6: 	cmpq	%rbx, %rcx
    000012e9: 	jne	.Ltmp1550 # Offset: 4841
    000012eb: 	addl	$0x1, %r14d
    000012ef: 	cmpl	0x20(%rsp), %r14d
    000012f4: 	jl	.Ltmp1551 # Offset: 4852
.Ltmp1543:
    000012fa: 	callq	clock@PLT # Offset: 4858
    000012ff: 	movq	0x8(%rsp), %rdi
    00001304: 	pxor	%xmm0, %xmm0
    00001308: 	movq	%rax, end_time(%rip)
    0000130f: 	subq	start_time(%rip), %rax
    00001316: 	cvtsi2sd	%rax, %xmm0
    0000131b: 	divsd	DATAat0x14868(%rip), %xmm0
    00001323: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4899
    00001328: 	movq	0xe0(%rsp), %rdi
    00001330: 	cmpq	0x28(%rsp), %rdi
    00001335: 	je	.Ltmp1552 # Offset: 4917
    00001337: 	movq	0xf0(%rsp), %rax
    0000133f: 	leaq	0x1(%rax), %rsi
    00001343: 	callq	_ZdlPvm@PLT # Offset: 4931
.Ltmp1552:
    00001348: 	movq	0x30(%rsp), %rsi
    0000134d: 	movq	0x8(%rsp), %rdi
    00001352: 	leaq	DATAat0x14578(%rip), %rdx
    00001359: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4953
    0000135e: 	callq	clock@PLT # Offset: 4958
    00001363: 	movl	iterations(%rip), %r15d
    0000136a: 	xorl	%r14d, %r14d
    0000136d: 	movq	%rax, start_time(%rip)
    00001374: 	leaq	0x3f88(%rsp), %rax
    0000137c: 	movq	%rax, 0x20(%rsp)
    00001381: 	testl	%r15d, %r15d
    00001384: 	jle	.Ltmp1553 # Offset: 4996
    0000138a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1561:
    00001390: 	movq	0x10(%rsp), %rsi
    00001395: 	movl	$0x3e80, %edx
    0000139a: 	movq	%rbx, %rdi
    0000139d: 	callq	memcpy@PLT # Offset: 5021
    000013a2: 	movq	0x20(%rsp), %rcx
    000013a7: 	movq	%rcx, %rsi
    000013aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1558:
    000013b0: 	movsd	(%rcx), %xmm1
    000013b4: 	movq	%rcx, %rax
    000013b7: 	cmpq	%rbx, %rcx
    000013ba: 	jne	.Ltmp1554 # Offset: 5050
    000013bc: 	jmp	.Ltmp1555 # Offset: 5052
    000013c1: 	nopl	(%rax) # Size: 7
.Ltmp1557:
    000013c8: 	movsd	%xmm0, 0x8(%rax)
    000013cd: 	cmpq	%rbx, %rax
    000013d0: 	je	.Ltmp1556 # Offset: 5072
.Ltmp1554:
    000013d6: 	movq	%rax, %rdx
    000013d9: 	leaq	-0x8(%rax), %rax
    000013dd: 	movsd	-0x8(%rdx), %xmm0
    000013e2: 	comisd	%xmm1, %xmm0
    000013e6: 	ja	.Ltmp1557 # Offset: 5094
    000013e8: 	addq	$0x8, %rcx
    000013ec: 	movsd	%xmm1, (%rdx)
    000013f0: 	cmpq	%rcx, %r12
    000013f3: 	jne	.Ltmp1558 # Offset: 5107
.Ltmp1665:
    000013f5: 	movsd	0x3f80(%rsp), %xmm0
    000013fe: 	nop # Size: 2
.Ltmp1560:
    00001400: 	movapd	%xmm0, %xmm1
    00001404: 	movsd	(%rsi), %xmm0
    00001408: 	comisd	%xmm0, %xmm1
    0000140c: 	ja	.Ltmp1559 # Offset: 5132
    00001412: 	addq	$0x8, %rsi
    00001416: 	cmpq	%r12, %rsi
    00001419: 	jne	.Ltmp1560 # Offset: 5145
    0000141b: 	addl	$0x1, %r14d
    0000141f: 	cmpl	%r15d, %r14d
    00001422: 	jl	.Ltmp1561 # Offset: 5154
.Ltmp1553:
    00001428: 	callq	clock@PLT # Offset: 5160
    0000142d: 	movq	0x8(%rsp), %rdi
    00001432: 	pxor	%xmm0, %xmm0
    00001436: 	movq	%rax, end_time(%rip)
    0000143d: 	subq	start_time(%rip), %rax
    00001444: 	cvtsi2sd	%rax, %xmm0
    00001449: 	divsd	DATAat0x14868(%rip), %xmm0
    00001451: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5201
    00001456: 	movq	0xe0(%rsp), %rdi
    0000145e: 	cmpq	0x28(%rsp), %rdi
    00001463: 	je	.Ltmp1562 # Offset: 5219
    00001465: 	movq	0xf0(%rsp), %rax
    0000146d: 	leaq	0x1(%rax), %rsi
    00001471: 	callq	_ZdlPvm@PLT # Offset: 5233
.Ltmp1562:
    00001476: 	movq	0x30(%rsp), %r15
    0000147b: 	leaq	0xa0(%rsp), %rdi
    00001483: 	leaq	DATAat0x14267(%rip), %rdx
    0000148a: 	movq	%r15, %rsi
    0000148d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5261
    00001492: 	movl	iterations(%rip), %edx
    00001498: 	movl	$0x1, %r8d
    0000149e: 	movl	$0x1, %ecx
    000014a3: 	movq	0xa0(%rsp), %rdi
    000014ab: 	movl	$0x7d0, %esi
    000014b0: 	callq	_Z9summarizePKciiii # Offset: 5296
    000014b5: 	movq	0x8(%rsp), %rdi
    000014ba: 	leaq	DATAat0x14283(%rip), %rdx
    000014c1: 	movq	%r15, %rsi
    000014c4: 	shll	$0x3, iterations(%rip)
    000014cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5323
    000014d0: 	callq	clock@PLT # Offset: 5328
    000014d5: 	xorl	%r14d, %r14d
    000014d8: 	movq	%rax, start_time(%rip)
    000014df: 	movl	iterations(%rip), %eax
    000014e5: 	testl	%eax, %eax
    000014e7: 	jle	.Ltmp1563 # Offset: 5351
    000014e9: 	nopl	(%rax) # Size: 7
.Ltmp1564:
    000014f0: 	movl	$0x3e80, %edx
    000014f5: 	movq	%r13, %rsi
    000014f8: 	movq	%rbp, %rdi
    000014fb: 	callq	memcpy@PLT # Offset: 5371
    00001500: 	movq	%rbx, %rsi
    00001503: 	movq	%rbp, %rdi
    00001506: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 5382
    0000150b: 	movq	0x8(%rsp), %rdx
    00001510: 	movq	%rbx, %rsi
    00001513: 	movq	%rbp, %rdi
    00001516: 	callq	_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5398
    0000151b: 	addl	$0x1, %r14d
    0000151f: 	cmpl	iterations(%rip), %r14d
    00001526: 	jl	.Ltmp1564 # Offset: 5414
.Ltmp1563:
    00001528: 	callq	clock@PLT # Offset: 5416
    0000152d: 	movq	0x8(%rsp), %rdi
    00001532: 	pxor	%xmm0, %xmm0
    00001536: 	movq	%rax, end_time(%rip)
    0000153d: 	subq	start_time(%rip), %rax
    00001544: 	cvtsi2sd	%rax, %xmm0
    00001549: 	divsd	DATAat0x14868(%rip), %xmm0
    00001551: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5457
    00001556: 	movq	0xe0(%rsp), %rdi
    0000155e: 	cmpq	0x28(%rsp), %rdi
    00001563: 	je	.Ltmp1565 # Offset: 5475
    00001565: 	movq	0xf0(%rsp), %rax
    0000156d: 	leaq	0x1(%rax), %rsi
    00001571: 	callq	_ZdlPvm@PLT # Offset: 5489
.Ltmp1565:
    00001576: 	movq	0x30(%rsp), %rsi
    0000157b: 	movq	0x8(%rsp), %rdi
    00001580: 	leaq	DATAat0x14296(%rip), %rdx
    00001587: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5511
    0000158c: 	callq	clock@PLT # Offset: 5516
    00001591: 	xorl	%r14d, %r14d
    00001594: 	leaq	0x108(%rsp), %r15
    0000159c: 	movq	%rax, start_time(%rip)
    000015a3: 	movl	iterations(%rip), %eax
    000015a9: 	testl	%eax, %eax
    000015ab: 	jle	.Ltmp1566 # Offset: 5547
    000015ad: 	nopl	(%rax) # Size: 3
.Ltmp1569:
    000015b0: 	movl	$0x3e80, %edx
    000015b5: 	movq	%r13, %rsi
    000015b8: 	movq	%rbp, %rdi
    000015bb: 	callq	memcpy@PLT # Offset: 5563
    000015c0: 	movq	%rbx, %rsi
    000015c3: 	movq	%rbp, %rdi
    000015c6: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIdEEEvT_S3_ # Offset: 5574
    000015cb: 	movq	%r15, %rax
    000015ce: 	movsd	0x100(%rsp), %xmm0
    000015d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1568:
    000015e0: 	movapd	%xmm0, %xmm1
    000015e4: 	movsd	(%rax), %xmm0
    000015e8: 	comisd	%xmm0, %xmm1
    000015ec: 	ja	.Ltmp1567 # Offset: 5612
    000015f2: 	addq	$0x8, %rax
    000015f6: 	cmpq	%rax, %rbx
    000015f9: 	jne	.Ltmp1568 # Offset: 5625
    000015fb: 	addl	$0x1, %r14d
    000015ff: 	cmpl	iterations(%rip), %r14d
    00001606: 	jl	.Ltmp1569 # Offset: 5638
.Ltmp1566:
    00001608: 	callq	clock@PLT # Offset: 5640
    0000160d: 	movq	0x8(%rsp), %rdi
    00001612: 	pxor	%xmm0, %xmm0
    00001616: 	movq	%rax, end_time(%rip)
    0000161d: 	subq	start_time(%rip), %rax
    00001624: 	cvtsi2sd	%rax, %xmm0
    00001629: 	divsd	DATAat0x14868(%rip), %xmm0
    00001631: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5681
    00001636: 	movq	0xe0(%rsp), %rdi
    0000163e: 	cmpq	0x28(%rsp), %rdi
    00001643: 	je	.Ltmp1570 # Offset: 5699
    00001645: 	movq	0xf0(%rsp), %rax
    0000164d: 	leaq	0x1(%rax), %rsi
    00001651: 	callq	_ZdlPvm@PLT # Offset: 5713
.Ltmp1570:
    00001656: 	movq	0x30(%rsp), %rsi
    0000165b: 	movq	0x8(%rsp), %rdi
    00001660: 	leaq	DATAat0x145b8(%rip), %rdx
    00001667: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5735
    0000166c: 	callq	clock@PLT # Offset: 5740
    00001671: 	movl	iterations(%rip), %r15d
    00001678: 	xorl	%r14d, %r14d
    0000167b: 	movq	%rax, start_time(%rip)
    00001682: 	testl	%r15d, %r15d
    00001685: 	jle	.Ltmp1571 # Offset: 5765
    00001687: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1572:
    00001690: 	movq	0x10(%rsp), %rsi
    00001695: 	movl	$0x3e80, %edx
    0000169a: 	movq	%rbx, %rdi
    0000169d: 	callq	memcpy@PLT # Offset: 5789
    000016a2: 	movq	%r12, %rsi
    000016a5: 	movq	%rbx, %rdi
    000016a8: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIdEEEvT_S4_.part.0/1" # Offset: 5800
    000016ad: 	movq	0x8(%rsp), %rdx
    000016b2: 	movq	%r12, %rsi
    000016b5: 	movq	%rbx, %rdi
    000016b8: 	callq	_Z13verify_sortedIP12ValueWrapperIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5816
    000016bd: 	addl	$0x1, %r14d
    000016c1: 	cmpl	iterations(%rip), %r14d
    000016c8: 	jl	.Ltmp1572 # Offset: 5832
.Ltmp1571:
    000016ca: 	callq	clock@PLT # Offset: 5834
    000016cf: 	movq	0x8(%rsp), %rdi
    000016d4: 	pxor	%xmm0, %xmm0
    000016d8: 	movq	%rax, end_time(%rip)
    000016df: 	subq	start_time(%rip), %rax
    000016e6: 	cvtsi2sd	%rax, %xmm0
    000016eb: 	divsd	DATAat0x14868(%rip), %xmm0
    000016f3: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5875
    000016f8: 	movq	0xe0(%rsp), %rdi
    00001700: 	cmpq	0x28(%rsp), %rdi
    00001705: 	je	.Ltmp1573 # Offset: 5893
    00001707: 	movq	0xf0(%rsp), %rax
    0000170f: 	leaq	0x1(%rax), %rsi
    00001713: 	callq	_ZdlPvm@PLT # Offset: 5907
.Ltmp1573:
    00001718: 	movq	0x30(%rsp), %rsi
    0000171d: 	movq	0x8(%rsp), %rdi
    00001722: 	leaq	DATAat0x145e0(%rip), %rdx
    00001729: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5929
    0000172e: 	callq	clock@PLT # Offset: 5934
    00001733: 	movl	iterations(%rip), %r11d
    0000173a: 	xorl	%r14d, %r14d
    0000173d: 	leaq	DATAat0x141cf(%rip), %r15
    00001744: 	movq	%rax, start_time(%rip)
    0000174b: 	leaq	0x3f88(%rsp), %rax
    00001753: 	movq	%rax, 0x20(%rsp)
    00001758: 	testl	%r11d, %r11d
    0000175b: 	jle	.Ltmp1574 # Offset: 5979
    0000175d: 	nopl	(%rax) # Size: 3
.Ltmp1577:
    00001760: 	movq	0x10(%rsp), %rsi
    00001765: 	movl	$0x3e80, %edx
    0000176a: 	movq	%rbx, %rdi
    0000176d: 	callq	memcpy@PLT # Offset: 5997
    00001772: 	movq	%r12, %rsi
    00001775: 	movq	%rbx, %rdi
    00001778: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEEEEvT_S5_ # Offset: 6008
    0000177d: 	movq	0x20(%rsp), %rax
    00001782: 	movsd	0x3f80(%rsp), %xmm0
    0000178b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1576:
    00001790: 	movapd	%xmm0, %xmm1
    00001794: 	movsd	(%rax), %xmm0
    00001798: 	comisd	%xmm0, %xmm1
    0000179c: 	ja	.Ltmp1575 # Offset: 6044
    000017a2: 	addq	$0x8, %rax
    000017a6: 	cmpq	%rax, %r12
    000017a9: 	jne	.Ltmp1576 # Offset: 6057
    000017ab: 	addl	$0x1, %r14d
    000017af: 	cmpl	iterations(%rip), %r14d
    000017b6: 	jl	.Ltmp1577 # Offset: 6070
.Ltmp1574:
    000017b8: 	callq	clock@PLT # Offset: 6072
    000017bd: 	movq	0x8(%rsp), %rdi
    000017c2: 	pxor	%xmm0, %xmm0
    000017c6: 	movq	%rax, end_time(%rip)
    000017cd: 	subq	start_time(%rip), %rax
    000017d4: 	cvtsi2sd	%rax, %xmm0
    000017d9: 	divsd	DATAat0x14868(%rip), %xmm0
    000017e1: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6113
    000017e6: 	movq	0xe0(%rsp), %rdi
    000017ee: 	cmpq	0x28(%rsp), %rdi
    000017f3: 	je	.Ltmp1578 # Offset: 6131
    000017f5: 	movq	0xf0(%rsp), %rax
    000017fd: 	leaq	0x1(%rax), %rsi
    00001801: 	callq	_ZdlPvm@PLT # Offset: 6145
.Ltmp1578:
    00001806: 	movq	0x30(%rsp), %rsi
    0000180b: 	movq	0x8(%rsp), %rdi
    00001810: 	leaq	DATAat0x14610(%rip), %rdx
    00001817: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6167
    0000181c: 	callq	clock@PLT # Offset: 6172
    00001821: 	movl	iterations(%rip), %r10d
    00001828: 	xorl	%r14d, %r14d
    0000182b: 	movq	%rax, start_time(%rip)
    00001832: 	testl	%r10d, %r10d
    00001835: 	jle	.Ltmp1579 # Offset: 6197
    00001837: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1580:
    00001840: 	movq	0x18(%rsp), %rsi
    00001845: 	movl	$0x3e80, %edx
    0000184a: 	movq	%r12, %rdi
    0000184d: 	callq	memcpy@PLT # Offset: 6221
    00001852: 	movq	%r13, %rsi
    00001855: 	movq	%r12, %rdi
    00001858: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_.part.0/1" # Offset: 6232
    0000185d: 	movq	0x8(%rsp), %rdx
    00001862: 	movq	%r13, %rsi
    00001865: 	movq	%r12, %rdi
    00001868: 	callq	_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6248
    0000186d: 	addl	$0x1, %r14d
    00001871: 	cmpl	iterations(%rip), %r14d
    00001878: 	jl	.Ltmp1580 # Offset: 6264
.Ltmp1579:
    0000187a: 	callq	clock@PLT # Offset: 6266
    0000187f: 	movq	0x8(%rsp), %rdi
    00001884: 	pxor	%xmm0, %xmm0
    00001888: 	movq	%rax, end_time(%rip)
    0000188f: 	subq	start_time(%rip), %rax
    00001896: 	cvtsi2sd	%rax, %xmm0
    0000189b: 	divsd	DATAat0x14868(%rip), %xmm0
    000018a3: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6307
    000018a8: 	movq	0xe0(%rsp), %rdi
    000018b0: 	cmpq	0x28(%rsp), %rdi
    000018b5: 	je	.Ltmp1581 # Offset: 6325
    000018b7: 	movq	0xf0(%rsp), %rax
    000018bf: 	leaq	0x1(%rax), %rsi
    000018c3: 	callq	_ZdlPvm@PLT # Offset: 6339
.Ltmp1581:
    000018c8: 	movq	0x30(%rsp), %rsi
    000018cd: 	movq	0x8(%rsp), %rdi
    000018d2: 	leaq	DATAat0x14638(%rip), %rdx
    000018d9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6361
    000018de: 	callq	clock@PLT # Offset: 6366
    000018e3: 	movl	iterations(%rip), %r9d
    000018ea: 	xorl	%r14d, %r14d
    000018ed: 	leaq	0x7e08(%rsp), %r15
    000018f5: 	movq	%rax, start_time(%rip)
    000018fc: 	testl	%r9d, %r9d
    000018ff: 	jle	.Ltmp1582 # Offset: 6399
    00001901: 	nopl	(%rax) # Size: 7
.Ltmp1585:
    00001908: 	movq	0x18(%rsp), %rsi
    0000190d: 	movl	$0x3e80, %edx
    00001912: 	movq	%r12, %rdi
    00001915: 	callq	memcpy@PLT # Offset: 6421
    0000191a: 	movq	%r13, %rsi
    0000191d: 	movq	%r12, %rdi
    00001920: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEvT_SE_ # Offset: 6432
    00001925: 	movq	%r15, %rax
    00001928: 	movsd	0x7e00(%rsp), %xmm0
    00001931: 	nopl	(%rax) # Size: 7
.Ltmp1584:
    00001938: 	movapd	%xmm0, %xmm1
    0000193c: 	movsd	(%rax), %xmm0
    00001940: 	comisd	%xmm0, %xmm1
    00001944: 	ja	.Ltmp1583 # Offset: 6468
    0000194a: 	addq	$0x8, %rax
    0000194e: 	cmpq	%rax, %r13
    00001951: 	jne	.Ltmp1584 # Offset: 6481
    00001953: 	addl	$0x1, %r14d
    00001957: 	cmpl	iterations(%rip), %r14d
    0000195e: 	jl	.Ltmp1585 # Offset: 6494
.Ltmp1582:
    00001960: 	callq	clock@PLT # Offset: 6496
    00001965: 	movq	0x8(%rsp), %rdi
    0000196a: 	pxor	%xmm0, %xmm0
    0000196e: 	movq	%rax, end_time(%rip)
    00001975: 	subq	start_time(%rip), %rax
    0000197c: 	cvtsi2sd	%rax, %xmm0
    00001981: 	divsd	DATAat0x14868(%rip), %xmm0
    00001989: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6537
    0000198e: 	movq	0xe0(%rsp), %rdi
    00001996: 	cmpq	0x28(%rsp), %rdi
    0000199b: 	je	.Ltmp1586 # Offset: 6555
    0000199d: 	movq	0xf0(%rsp), %rax
    000019a5: 	leaq	0x1(%rax), %rsi
    000019a9: 	callq	_ZdlPvm@PLT # Offset: 6569
.Ltmp1586:
    000019ae: 	movq	0x30(%rsp), %rsi
    000019b3: 	movq	0x8(%rsp), %rdi
    000019b8: 	leaq	DATAat0x14668(%rip), %rdx
    000019bf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6591
    000019c4: 	callq	clock@PLT # Offset: 6596
    000019c9: 	movl	iterations(%rip), %r8d
    000019d0: 	xorl	%r14d, %r14d
    000019d3: 	leaq	0x108(%rsp), %r15
    000019db: 	movq	%rax, start_time(%rip)
    000019e2: 	testl	%r8d, %r8d
    000019e5: 	jle	.Ltmp1587 # Offset: 6629
    000019e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1590:
    000019f0: 	movl	$0x3e80, %edx
    000019f5: 	movq	%r13, %rsi
    000019f8: 	movq	%rbp, %rdi
    000019fb: 	callq	memcpy@PLT # Offset: 6651
    00001a00: 	movq	%rbx, %rsi
    00001a03: 	movq	%rbp, %rdi
    00001a06: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPddEdEEEvT_S5_ # Offset: 6662
    00001a0b: 	movq	%r15, %rax
    00001a0e: 	movsd	0x100(%rsp), %xmm0
    00001a17: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1589:
    00001a20: 	movapd	%xmm0, %xmm1
    00001a24: 	movsd	(%rax), %xmm0
    00001a28: 	comisd	%xmm0, %xmm1
    00001a2c: 	ja	.Ltmp1588 # Offset: 6700
    00001a32: 	addq	$0x8, %rax
    00001a36: 	cmpq	%rbx, %rax
    00001a39: 	jne	.Ltmp1589 # Offset: 6713
    00001a3b: 	addl	$0x1, %r14d
    00001a3f: 	cmpl	iterations(%rip), %r14d
    00001a46: 	jl	.Ltmp1590 # Offset: 6726
.Ltmp1587:
    00001a48: 	callq	clock@PLT # Offset: 6728
    00001a4d: 	movq	0x8(%rsp), %rdi
    00001a52: 	pxor	%xmm0, %xmm0
    00001a56: 	movq	%rax, end_time(%rip)
    00001a5d: 	subq	start_time(%rip), %rax
    00001a64: 	cvtsi2sd	%rax, %xmm0
    00001a69: 	divsd	DATAat0x14868(%rip), %xmm0
    00001a71: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6769
    00001a76: 	movq	0xe0(%rsp), %rdi
    00001a7e: 	cmpq	0x28(%rsp), %rdi
    00001a83: 	je	.Ltmp1591 # Offset: 6787
    00001a85: 	movq	0xf0(%rsp), %rax
    00001a8d: 	leaq	0x1(%rax), %rsi
    00001a91: 	callq	_ZdlPvm@PLT # Offset: 6801
.Ltmp1591:
    00001a96: 	movq	0x30(%rsp), %rsi
    00001a9b: 	movq	0x8(%rsp), %rdi
    00001aa0: 	leaq	DATAat0x14690(%rip), %rdx
    00001aa7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6823
    00001aac: 	callq	clock@PLT # Offset: 6828
    00001ab1: 	movl	iterations(%rip), %edi
    00001ab7: 	xorl	%r14d, %r14d
    00001aba: 	leaq	0x108(%rsp), %r15
    00001ac2: 	movq	%rax, start_time(%rip)
    00001ac9: 	testl	%edi, %edi
    00001acb: 	jle	.Ltmp1592 # Offset: 6859
    00001acd: 	nopl	(%rax) # Size: 3
.Ltmp1595:
    00001ad0: 	movl	$0x3e80, %edx
    00001ad5: 	movq	%r13, %rsi
    00001ad8: 	movq	%rbp, %rdi
    00001adb: 	callq	memcpy@PLT # Offset: 6875
    00001ae0: 	movq	%rbx, %rsi
    00001ae3: 	movq	%rbp, %rdi
    00001ae6: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEEEvT_S6_ # Offset: 6886
    00001aeb: 	movq	%r15, %rax
    00001aee: 	movsd	0x100(%rsp), %xmm0
    00001af7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1594:
    00001b00: 	movapd	%xmm0, %xmm1
    00001b04: 	movsd	(%rax), %xmm0
    00001b08: 	comisd	%xmm0, %xmm1
    00001b0c: 	ja	.Ltmp1593 # Offset: 6924
    00001b12: 	addq	$0x8, %rax
    00001b16: 	cmpq	%rbx, %rax
    00001b19: 	jne	.Ltmp1594 # Offset: 6937
    00001b1b: 	addl	$0x1, %r14d
    00001b1f: 	cmpl	iterations(%rip), %r14d
    00001b26: 	jl	.Ltmp1595 # Offset: 6950
.Ltmp1592:
    00001b28: 	callq	clock@PLT # Offset: 6952
    00001b2d: 	movq	0x8(%rsp), %rdi
    00001b32: 	pxor	%xmm0, %xmm0
    00001b36: 	movq	%rax, end_time(%rip)
    00001b3d: 	subq	start_time(%rip), %rax
    00001b44: 	cvtsi2sd	%rax, %xmm0
    00001b49: 	divsd	DATAat0x14868(%rip), %xmm0
    00001b51: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6993
    00001b56: 	movq	0xe0(%rsp), %rdi
    00001b5e: 	cmpq	0x28(%rsp), %rdi
    00001b63: 	je	.Ltmp1596 # Offset: 7011
    00001b65: 	movq	0xf0(%rsp), %rax
    00001b6d: 	leaq	0x1(%rax), %rsi
    00001b71: 	callq	_ZdlPvm@PLT # Offset: 7025
.Ltmp1596:
    00001b76: 	movq	0x30(%rsp), %rsi
    00001b7b: 	movq	0x8(%rsp), %rdi
    00001b80: 	leaq	DATAat0x146c0(%rip), %rdx
    00001b87: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7047
    00001b8c: 	callq	clock@PLT # Offset: 7052
    00001b91: 	movl	iterations(%rip), %esi
    00001b97: 	xorl	%r14d, %r14d
    00001b9a: 	leaq	DATAat0x141cf(%rip), %r15
    00001ba1: 	movq	%rax, start_time(%rip)
    00001ba8: 	leaq	0x3f88(%rsp), %rax
    00001bb0: 	movq	%rax, 0x20(%rsp)
    00001bb5: 	testl	%esi, %esi
    00001bb7: 	jle	.Ltmp1597 # Offset: 7095
    00001bb9: 	nopl	(%rax) # Size: 7
.Ltmp1600:
    00001bc0: 	movq	0x10(%rsp), %rsi
    00001bc5: 	movl	$0x3e80, %edx
    00001bca: 	movq	%rbx, %rdi
    00001bcd: 	callq	memcpy@PLT # Offset: 7117
    00001bd2: 	movq	%r12, %rsi
    00001bd5: 	movq	%rbx, %rdi
    00001bd8: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_EEEvT_S8_ # Offset: 7128
    00001bdd: 	movq	0x20(%rsp), %rax
    00001be2: 	movsd	0x3f80(%rsp), %xmm0
    00001beb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1599:
    00001bf0: 	movapd	%xmm0, %xmm1
    00001bf4: 	movsd	(%rax), %xmm0
    00001bf8: 	comisd	%xmm0, %xmm1
    00001bfc: 	ja	.Ltmp1598 # Offset: 7164
    00001c02: 	addq	$0x8, %rax
    00001c06: 	cmpq	%r12, %rax
    00001c09: 	jne	.Ltmp1599 # Offset: 7177
    00001c0b: 	addl	$0x1, %r14d
    00001c0f: 	cmpl	iterations(%rip), %r14d
    00001c16: 	jl	.Ltmp1600 # Offset: 7190
.Ltmp1597:
    00001c18: 	callq	clock@PLT # Offset: 7192
    00001c1d: 	movq	0x8(%rsp), %rdi
    00001c22: 	pxor	%xmm0, %xmm0
    00001c26: 	movq	%rax, end_time(%rip)
    00001c2d: 	subq	start_time(%rip), %rax
    00001c34: 	cvtsi2sd	%rax, %xmm0
    00001c39: 	divsd	DATAat0x14868(%rip), %xmm0
    00001c41: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7233
    00001c46: 	movq	0xe0(%rsp), %rdi
    00001c4e: 	cmpq	0x28(%rsp), %rdi
    00001c53: 	je	.Ltmp1601 # Offset: 7251
    00001c55: 	movq	0xf0(%rsp), %rax
    00001c5d: 	leaq	0x1(%rax), %rsi
    00001c61: 	callq	_ZdlPvm@PLT # Offset: 7265
.Ltmp1601:
    00001c66: 	movq	0x30(%rsp), %r15
    00001c6b: 	leaq	0xc0(%rsp), %rdi
    00001c73: 	leaq	DATAat0x142af(%rip), %rdx
    00001c7a: 	movq	%r15, %rsi
    00001c7d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7293
    00001c82: 	movl	iterations(%rip), %edx
    00001c88: 	movl	$0x1, %r8d
    00001c8e: 	movl	$0x1, %ecx
    00001c93: 	movq	0xc0(%rsp), %rdi
    00001c9b: 	movl	$0x7d0, %esi
    00001ca0: 	callq	_Z9summarizePKciiii # Offset: 7328
    00001ca5: 	movq	0x8(%rsp), %rdi
    00001caa: 	leaq	DATAat0x142c6(%rip), %rdx
    00001cb1: 	movq	%r15, %rsi
    00001cb4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7348
    00001cb9: 	callq	clock@PLT # Offset: 7353
    00001cbe: 	movl	iterations(%rip), %ecx
    00001cc4: 	xorl	%r14d, %r14d
    00001cc7: 	movq	%rax, start_time(%rip)
    00001cce: 	testl	%ecx, %ecx
    00001cd0: 	jle	.Ltmp1602 # Offset: 7376
    00001cd6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1605:
    00001ce0: 	movl	$0x3e80, %edx
    00001ce5: 	movq	%r13, %rsi
    00001ce8: 	movq	%rbp, %rdi
    00001ceb: 	movl	$0x3e7, %r15d
    00001cf1: 	callq	memcpy@PLT # Offset: 7409
    00001cf6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1603:
    00001d00: 	movsd	(%rbp,%r15,8), %xmm0
    00001d07: 	movq	%r15, %rdx
    00001d0a: 	movq	%rbp, %rsi
    00001d0d: 	movl	$0x7d0, %edi
    00001d12: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 7442
    00001d17: 	subq	$0x1, %r15
    00001d1b: 	jae	.Ltmp1603 # Offset: 7451
    00001d1d: 	movl	$0x7cf, %r15d
    00001d23: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1604:
    00001d28: 	movsd	(%rbp,%r15,8), %xmm0
    00001d2f: 	xorl	%edx, %edx
    00001d31: 	movq	%r15, %rdi
    00001d34: 	movq	%rbp, %rsi
    00001d37: 	movsd	0x100(%rsp), %xmm1
    00001d40: 	movsd	%xmm1, (%rbp,%r15,8)
    00001d47: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 7495
    00001d4c: 	subq	$0x1, %r15
    00001d50: 	jne	.Ltmp1604 # Offset: 7504
    00001d52: 	movq	0x8(%rsp), %rdx
    00001d57: 	movq	%rbx, %rsi
    00001d5a: 	movq	%rbp, %rdi
    00001d5d: 	callq	_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7517
    00001d62: 	addl	$0x1, %r14d
    00001d66: 	cmpl	iterations(%rip), %r14d
    00001d6d: 	jl	.Ltmp1605 # Offset: 7533
.Ltmp1602:
    00001d73: 	callq	clock@PLT # Offset: 7539
    00001d78: 	movq	0x8(%rsp), %rdi
    00001d7d: 	pxor	%xmm0, %xmm0
    00001d81: 	movq	%rax, end_time(%rip)
    00001d88: 	subq	start_time(%rip), %rax
    00001d8f: 	cvtsi2sd	%rax, %xmm0
    00001d94: 	divsd	DATAat0x14868(%rip), %xmm0
    00001d9c: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7580
    00001da1: 	movq	0xe0(%rsp), %rdi
    00001da9: 	cmpq	0x28(%rsp), %rdi
    00001dae: 	je	.Ltmp1606 # Offset: 7598
    00001db0: 	movq	0xf0(%rsp), %rax
    00001db8: 	leaq	0x1(%rax), %rsi
    00001dbc: 	callq	_ZdlPvm@PLT # Offset: 7612
.Ltmp1606:
    00001dc1: 	movq	0x30(%rsp), %rsi
    00001dc6: 	movq	0x8(%rsp), %rdi
    00001dcb: 	leaq	DATAat0x142d9(%rip), %rdx
    00001dd2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7634
    00001dd7: 	callq	clock@PLT # Offset: 7639
    00001ddc: 	leaq	0x108(%rsp), %r15
    00001de4: 	movl	$0x0, 0x20(%rsp)
    00001dec: 	movq	%rax, start_time(%rip)
    00001df3: 	movl	iterations(%rip), %eax
    00001df9: 	movl	%eax, 0x38(%rsp)
    00001dfd: 	testl	%eax, %eax
    00001dff: 	jle	.Ltmp1607 # Offset: 7679
    00001e05: 	nopl	(%rax) # Size: 3
.Ltmp1612:
    00001e08: 	movl	$0x3e80, %edx
    00001e0d: 	movq	%r13, %rsi
    00001e10: 	movq	%rbp, %rdi
    00001e13: 	movl	$0x3e7, %r14d
    00001e19: 	callq	memcpy@PLT # Offset: 7705
    00001e1e: 	nop # Size: 2
.Ltmp1608:
    00001e20: 	movsd	(%rbp,%r14,8), %xmm0
    00001e27: 	movq	%r14, %rdx
    00001e2a: 	movq	%rbp, %rsi
    00001e2d: 	movl	$0x7d0, %edi
    00001e32: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperIdEdEEvlT_lT0_ # Offset: 7730
    00001e37: 	subq	$0x1, %r14
    00001e3b: 	jae	.Ltmp1608 # Offset: 7739
    00001e3d: 	movl	$0x7cf, %r14d
    00001e43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1609:
    00001e48: 	movsd	(%rbp,%r14,8), %xmm0
    00001e4f: 	xorl	%edx, %edx
    00001e51: 	movq	%r14, %rdi
    00001e54: 	movq	%rbp, %rsi
    00001e57: 	movsd	0x100(%rsp), %xmm1
    00001e60: 	movsd	%xmm1, (%rbp,%r14,8)
    00001e67: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperIdEdEEvlT_lT0_ # Offset: 7783
    00001e6c: 	subq	$0x1, %r14
    00001e70: 	jne	.Ltmp1609 # Offset: 7792
    00001e72: 	movsd	0x100(%rsp), %xmm0
    00001e7b: 	movq	%r15, %rax
    00001e7e: 	nop # Size: 2
.Ltmp1611:
    00001e80: 	movapd	%xmm0, %xmm1
    00001e84: 	movsd	(%rax), %xmm0
    00001e88: 	comisd	%xmm0, %xmm1
    00001e8c: 	ja	.Ltmp1610 # Offset: 7820
    00001e92: 	addq	$0x8, %rax
    00001e96: 	cmpq	%rax, %rbx
    00001e99: 	jne	.Ltmp1611 # Offset: 7833
    00001e9b: 	addl	$0x1, 0x20(%rsp)
    00001ea0: 	movl	0x20(%rsp), %eax
    00001ea4: 	cmpl	0x38(%rsp), %eax
    00001ea8: 	jl	.Ltmp1612 # Offset: 7848
.Ltmp1607:
    00001eae: 	callq	clock@PLT # Offset: 7854
    00001eb3: 	movq	0x8(%rsp), %rdi
    00001eb8: 	pxor	%xmm0, %xmm0
    00001ebc: 	movq	%rax, end_time(%rip)
    00001ec3: 	subq	start_time(%rip), %rax
    00001eca: 	cvtsi2sd	%rax, %xmm0
    00001ecf: 	divsd	DATAat0x14868(%rip), %xmm0
    00001ed7: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7895
    00001edc: 	movq	0xe0(%rsp), %rdi
    00001ee4: 	cmpq	0x28(%rsp), %rdi
    00001ee9: 	je	.Ltmp1613 # Offset: 7913
    00001eeb: 	movq	0xf0(%rsp), %rax
    00001ef3: 	leaq	0x1(%rax), %rsi
    00001ef7: 	callq	_ZdlPvm@PLT # Offset: 7927
.Ltmp1613:
    00001efc: 	movq	0x30(%rsp), %rsi
    00001f01: 	movq	0x8(%rsp), %rdi
    00001f06: 	leaq	DATAat0x14700(%rip), %rdx
    00001f0d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7949
    00001f12: 	callq	clock@PLT # Offset: 7954
    00001f17: 	movl	iterations(%rip), %edx
    00001f1d: 	xorl	%r14d, %r14d
    00001f20: 	movq	%rax, start_time(%rip)
    00001f27: 	testl	%edx, %edx
    00001f29: 	jle	.Ltmp1614 # Offset: 7977
    00001f2f: 	nop # Size: 1
.Ltmp1617:
    00001f30: 	movq	0x10(%rsp), %rsi
    00001f35: 	movl	$0x3e80, %edx
    00001f3a: 	movq	%rbx, %rdi
    00001f3d: 	movl	$0x3e7, %r15d
    00001f43: 	callq	memcpy@PLT # Offset: 8003
    00001f48: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1615:
    00001f50: 	movsd	(%rbx,%r15,8), %xmm0
    00001f56: 	movq	%r15, %rdx
    00001f59: 	movq	%rbx, %rsi
    00001f5c: 	movl	$0x7d0, %edi
    00001f61: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIdES2_EEvlT_lT0_ # Offset: 8033
    00001f66: 	subq	$0x1, %r15
    00001f6a: 	jae	.Ltmp1615 # Offset: 8042
    00001f6c: 	movl	$0x7cf, %r15d
    00001f72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1616:
    00001f78: 	movsd	(%rbx,%r15,8), %xmm0
    00001f7e: 	xorl	%edx, %edx
    00001f80: 	movq	%r15, %rdi
    00001f83: 	movq	%rbx, %rsi
    00001f86: 	movsd	0x3f80(%rsp), %xmm1
    00001f8f: 	movsd	%xmm1, (%rbx,%r15,8)
    00001f95: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIdES2_EEvlT_lT0_ # Offset: 8085
    00001f9a: 	subq	$0x1, %r15
    00001f9e: 	jne	.Ltmp1616 # Offset: 8094
    00001fa0: 	movq	0x8(%rsp), %rdx
    00001fa5: 	movq	%r12, %rsi
    00001fa8: 	movq	%rbx, %rdi
    00001fab: 	callq	_Z13verify_sortedIP12ValueWrapperIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8107
    00001fb0: 	addl	$0x1, %r14d
    00001fb4: 	cmpl	iterations(%rip), %r14d
    00001fbb: 	jl	.Ltmp1617 # Offset: 8123
.Ltmp1614:
    00001fc1: 	callq	clock@PLT # Offset: 8129
    00001fc6: 	movq	0x8(%rsp), %rdi
    00001fcb: 	pxor	%xmm0, %xmm0
    00001fcf: 	movq	%rax, end_time(%rip)
    00001fd6: 	subq	start_time(%rip), %rax
    00001fdd: 	cvtsi2sd	%rax, %xmm0
    00001fe2: 	divsd	DATAat0x14868(%rip), %xmm0
    00001fea: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8170
    00001fef: 	movq	0xe0(%rsp), %rdi
    00001ff7: 	cmpq	0x28(%rsp), %rdi
    00001ffc: 	je	.Ltmp1618 # Offset: 8188
    00001ffe: 	movq	0xf0(%rsp), %rax
    00002006: 	leaq	0x1(%rax), %rsi
    0000200a: 	callq	_ZdlPvm@PLT # Offset: 8202
.Ltmp1618:
    0000200f: 	movq	0x30(%rsp), %rsi
    00002014: 	movq	0x8(%rsp), %rdi
    00002019: 	leaq	DATAat0x14728(%rip), %rdx
    00002020: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8224
    00002025: 	callq	clock@PLT # Offset: 8229
    0000202a: 	leaq	0x3f88(%rsp), %rdi
    00002032: 	xorl	%r14d, %r14d
    00002035: 	movq	%rax, start_time(%rip)
    0000203c: 	movl	iterations(%rip), %eax
    00002042: 	movq	%rdi, 0x20(%rsp)
    00002047: 	movl	%eax, 0x38(%rsp)
    0000204b: 	testl	%eax, %eax
    0000204d: 	jle	.Ltmp1619 # Offset: 8269
    00002053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1624:
    00002058: 	movq	0x10(%rsp), %rsi
    0000205d: 	movl	$0x3e80, %edx
    00002062: 	movq	%rbx, %rdi
    00002065: 	movl	$0x3e7, %r15d
    0000206b: 	callq	memcpy@PLT # Offset: 8299
.Ltmp1620:
    00002070: 	movsd	(%rbx,%r15,8), %xmm0
    00002076: 	movq	%r15, %rdx
    00002079: 	movq	%rbx, %rsi
    0000207c: 	movl	$0x7d0, %edi
    00002081: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_ # Offset: 8321
    00002086: 	subq	$0x1, %r15
    0000208a: 	jae	.Ltmp1620 # Offset: 8330
    0000208c: 	movl	$0x7cf, %r15d
    00002092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1621:
    00002098: 	movsd	(%rbx,%r15,8), %xmm0
    0000209e: 	xorl	%edx, %edx
    000020a0: 	movq	%r15, %rdi
    000020a3: 	movq	%rbx, %rsi
    000020a6: 	movsd	0x3f80(%rsp), %xmm1
    000020af: 	movsd	%xmm1, (%rbx,%r15,8)
    000020b5: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_ # Offset: 8373
    000020ba: 	subq	$0x1, %r15
    000020be: 	jne	.Ltmp1621 # Offset: 8382
    000020c0: 	movsd	0x3f80(%rsp), %xmm0
    000020c9: 	movq	0x20(%rsp), %rax
    000020ce: 	nop # Size: 2
.Ltmp1623:
    000020d0: 	movapd	%xmm0, %xmm1
    000020d4: 	movsd	(%rax), %xmm0
    000020d8: 	comisd	%xmm0, %xmm1
    000020dc: 	ja	.Ltmp1622 # Offset: 8412
    000020e2: 	addq	$0x8, %rax
    000020e6: 	cmpq	%r12, %rax
    000020e9: 	jne	.Ltmp1623 # Offset: 8425
    000020eb: 	addl	$0x1, %r14d
    000020ef: 	cmpl	0x38(%rsp), %r14d
    000020f4: 	jl	.Ltmp1624 # Offset: 8436
.Ltmp1619:
    000020fa: 	callq	clock@PLT # Offset: 8442
    000020ff: 	movq	0x8(%rsp), %rdi
    00002104: 	pxor	%xmm0, %xmm0
    00002108: 	movq	%rax, end_time(%rip)
    0000210f: 	subq	start_time(%rip), %rax
    00002116: 	cvtsi2sd	%rax, %xmm0
    0000211b: 	divsd	DATAat0x14868(%rip), %xmm0
    00002123: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8483
    00002128: 	movq	0xe0(%rsp), %rdi
    00002130: 	cmpq	0x28(%rsp), %rdi
    00002135: 	je	.Ltmp1625 # Offset: 8501
    00002137: 	movq	0xf0(%rsp), %rax
    0000213f: 	leaq	0x1(%rax), %rsi
    00002143: 	callq	_ZdlPvm@PLT # Offset: 8515
.Ltmp1625:
    00002148: 	movq	0x30(%rsp), %rsi
    0000214d: 	movq	0x8(%rsp), %rdi
    00002152: 	leaq	DATAat0x14758(%rip), %rdx
    00002159: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8537
    0000215e: 	callq	clock@PLT # Offset: 8542
    00002163: 	xorl	%r14d, %r14d
    00002166: 	movq	%rax, start_time(%rip)
    0000216d: 	movl	iterations(%rip), %eax
    00002173: 	testl	%eax, %eax
    00002175: 	jle	.Ltmp1626 # Offset: 8565
    0000217b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1629:
    00002180: 	movq	0x18(%rsp), %rsi
    00002185: 	movl	$0x3e80, %edx
    0000218a: 	movq	%r12, %rdi
    0000218d: 	movl	$0x3e7, %r15d
    00002193: 	callq	memcpy@PLT # Offset: 8595
    00002198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1627:
    000021a0: 	movsd	(%r12,%r15,8), %xmm0
    000021a6: 	movq	%r15, %rdx
    000021a9: 	movq	%r12, %rsi
    000021ac: 	movl	$0x7d0, %edi
    000021b1: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_ # Offset: 8625
    000021b6: 	subq	$0x1, %r15
    000021ba: 	jae	.Ltmp1627 # Offset: 8634
    000021bc: 	movl	$0x7cf, %r15d
    000021c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1628:
    000021c8: 	movsd	(%r12,%r15,8), %xmm0
    000021ce: 	xorl	%edx, %edx
    000021d0: 	movq	%r15, %rdi
    000021d3: 	movq	%r12, %rsi
    000021d6: 	movsd	0x7e00(%rsp), %xmm1
    000021df: 	movsd	%xmm1, (%r12,%r15,8)
    000021e5: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_ # Offset: 8677
    000021ea: 	subq	$0x1, %r15
    000021ee: 	jne	.Ltmp1628 # Offset: 8686
    000021f0: 	movq	0x8(%rsp), %rdx
    000021f5: 	movq	%r13, %rsi
    000021f8: 	movq	%r12, %rdi
    000021fb: 	callq	_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8699
    00002200: 	addl	$0x1, %r14d
    00002204: 	cmpl	iterations(%rip), %r14d
    0000220b: 	jl	.Ltmp1629 # Offset: 8715
.Ltmp1626:
    00002211: 	callq	clock@PLT # Offset: 8721
    00002216: 	movq	0x8(%rsp), %rdi
    0000221b: 	pxor	%xmm0, %xmm0
    0000221f: 	movq	%rax, end_time(%rip)
    00002226: 	subq	start_time(%rip), %rax
    0000222d: 	cvtsi2sd	%rax, %xmm0
    00002232: 	divsd	DATAat0x14868(%rip), %xmm0
    0000223a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8762
    0000223f: 	movq	0xe0(%rsp), %rdi
    00002247: 	cmpq	0x28(%rsp), %rdi
    0000224c: 	je	.Ltmp1630 # Offset: 8780
    0000224e: 	movq	0xf0(%rsp), %rax
    00002256: 	leaq	0x1(%rax), %rsi
    0000225a: 	callq	_ZdlPvm@PLT # Offset: 8794
.Ltmp1630:
    0000225f: 	movq	0x30(%rsp), %rsi
    00002264: 	movq	0x8(%rsp), %rdi
    00002269: 	leaq	DATAat0x14780(%rip), %rdx
    00002270: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8816
    00002275: 	callq	clock@PLT # Offset: 8821
    0000227a: 	leaq	0x7e08(%rsp), %r15
    00002282: 	movl	$0x0, 0x20(%rsp)
    0000228a: 	movq	%rax, start_time(%rip)
    00002291: 	movl	iterations(%rip), %eax
    00002297: 	movl	%eax, 0x38(%rsp)
    0000229b: 	testl	%eax, %eax
    0000229d: 	jle	.Ltmp1631 # Offset: 8861
    000022a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1636:
    000022a8: 	movq	0x18(%rsp), %rsi
    000022ad: 	movl	$0x3e80, %edx
    000022b2: 	movq	%r12, %rdi
    000022b5: 	movl	$0x3e7, %r14d
    000022bb: 	callq	memcpy@PLT # Offset: 8891
.Ltmp1632:
    000022c0: 	movsd	(%r12,%r14,8), %xmm0
    000022c6: 	movq	%r14, %rdx
    000022c9: 	movq	%r12, %rsi
    000022cc: 	movl	$0x7d0, %edi
    000022d1: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_ # Offset: 8913
    000022d6: 	subq	$0x1, %r14
    000022da: 	jae	.Ltmp1632 # Offset: 8922
    000022dc: 	movl	$0x7cf, %r14d
    000022e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1633:
    000022e8: 	movsd	(%r12,%r14,8), %xmm0
    000022ee: 	xorl	%edx, %edx
    000022f0: 	movq	%r14, %rdi
    000022f3: 	movq	%r12, %rsi
    000022f6: 	movsd	0x7e00(%rsp), %xmm1
    000022ff: 	movsd	%xmm1, (%r12,%r14,8)
    00002305: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_ # Offset: 8965
    0000230a: 	subq	$0x1, %r14
    0000230e: 	jne	.Ltmp1633 # Offset: 8974
    00002310: 	movsd	0x7e00(%rsp), %xmm0
    00002319: 	movq	%r15, %rax
    0000231c: 	nopl	(%rax) # Size: 4
.Ltmp1635:
    00002320: 	movapd	%xmm0, %xmm1
    00002324: 	movsd	(%rax), %xmm0
    00002328: 	comisd	%xmm0, %xmm1
    0000232c: 	ja	.Ltmp1634 # Offset: 9004
    00002332: 	addq	$0x8, %rax
    00002336: 	cmpq	%rax, %r13
    00002339: 	jne	.Ltmp1635 # Offset: 9017
    0000233b: 	addl	$0x1, 0x20(%rsp)
    00002340: 	movl	0x20(%rsp), %eax
    00002344: 	cmpl	0x38(%rsp), %eax
    00002348: 	jl	.Ltmp1636 # Offset: 9032
.Ltmp1631:
    0000234e: 	callq	clock@PLT # Offset: 9038
    00002353: 	movq	0x8(%rsp), %rdi
    00002358: 	pxor	%xmm0, %xmm0
    0000235c: 	movq	%rax, end_time(%rip)
    00002363: 	subq	start_time(%rip), %rax
    0000236a: 	cvtsi2sd	%rax, %xmm0
    0000236f: 	divsd	DATAat0x14868(%rip), %xmm0
    00002377: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9079
    0000237c: 	movq	0xe0(%rsp), %rdi
    00002384: 	cmpq	0x28(%rsp), %rdi
    00002389: 	je	.Ltmp1637 # Offset: 9097
    0000238b: 	movq	0xf0(%rsp), %rax
    00002393: 	leaq	0x1(%rax), %rsi
    00002397: 	callq	_ZdlPvm@PLT # Offset: 9111
.Ltmp1637:
    0000239c: 	movq	0x30(%rsp), %rsi
    000023a1: 	movq	0x8(%rsp), %rdi
    000023a6: 	leaq	DATAat0x147b0(%rip), %rdx
    000023ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9133
    000023b2: 	callq	clock@PLT # Offset: 9138
    000023b7: 	leaq	0x108(%rsp), %r15
    000023bf: 	movl	$0x0, 0x18(%rsp)
    000023c7: 	movq	%rax, start_time(%rip)
    000023ce: 	movl	iterations(%rip), %eax
    000023d4: 	movl	%eax, 0x20(%rsp)
    000023d8: 	testl	%eax, %eax
    000023da: 	jle	.Ltmp1638 # Offset: 9178
.Ltmp1643:
    000023e0: 	movl	$0x3e80, %edx
    000023e5: 	movq	%r13, %rsi
    000023e8: 	movq	%rbp, %rdi
    000023eb: 	movl	$0x3e7, %r14d
    000023f1: 	callq	memcpy@PLT # Offset: 9201
    000023f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1639:
    00002400: 	movsd	(%rbp,%r14,8), %xmm0
    00002407: 	movq	%r14, %rdx
    0000240a: 	movq	%rbp, %rsi
    0000240d: 	movl	$0x7d0, %edi
    00002412: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPddEdEdEEvlT_lT0_ # Offset: 9234
    00002417: 	subq	$0x1, %r14
    0000241b: 	jae	.Ltmp1639 # Offset: 9243
    0000241d: 	movl	$0x7cf, %r14d
    00002423: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1640:
    00002428: 	movsd	(%rbp,%r14,8), %xmm0
    0000242f: 	xorl	%edx, %edx
    00002431: 	movq	%r14, %rdi
    00002434: 	movq	%rbp, %rsi
    00002437: 	movsd	0x100(%rsp), %xmm1
    00002440: 	movsd	%xmm1, (%rbp,%r14,8)
    00002447: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPddEdEdEEvlT_lT0_ # Offset: 9287
    0000244c: 	subq	$0x1, %r14
    00002450: 	jne	.Ltmp1640 # Offset: 9296
    00002452: 	movsd	0x100(%rsp), %xmm0
    0000245b: 	movq	%r15, %rax
    0000245e: 	nop # Size: 2
.Ltmp1642:
    00002460: 	movapd	%xmm0, %xmm1
    00002464: 	movsd	(%rax), %xmm0
    00002468: 	comisd	%xmm0, %xmm1
    0000246c: 	ja	.Ltmp1641 # Offset: 9324
    00002472: 	addq	$0x8, %rax
    00002476: 	cmpq	%rax, %rbx
    00002479: 	jne	.Ltmp1642 # Offset: 9337
    0000247b: 	addl	$0x1, 0x18(%rsp)
    00002480: 	movl	0x18(%rsp), %eax
    00002484: 	cmpl	0x20(%rsp), %eax
    00002488: 	jl	.Ltmp1643 # Offset: 9352
.Ltmp1638:
    0000248e: 	callq	clock@PLT # Offset: 9358
    00002493: 	movq	0x8(%rsp), %rdi
    00002498: 	pxor	%xmm0, %xmm0
    0000249c: 	movq	%rax, end_time(%rip)
    000024a3: 	subq	start_time(%rip), %rax
    000024aa: 	cvtsi2sd	%rax, %xmm0
    000024af: 	divsd	DATAat0x14868(%rip), %xmm0
    000024b7: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9399
    000024bc: 	movq	0xe0(%rsp), %rdi
    000024c4: 	cmpq	0x28(%rsp), %rdi
    000024c9: 	je	.Ltmp1644 # Offset: 9417
    000024cb: 	movq	0xf0(%rsp), %rax
    000024d3: 	leaq	0x1(%rax), %rsi
    000024d7: 	callq	_ZdlPvm@PLT # Offset: 9431
.Ltmp1644:
    000024dc: 	movq	0x30(%rsp), %rsi
    000024e1: 	movq	0x8(%rsp), %rdi
    000024e6: 	leaq	DATAat0x147d8(%rip), %rdx
    000024ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9453
    000024f2: 	callq	clock@PLT # Offset: 9458
    000024f7: 	leaq	0x108(%rsp), %r15
    000024ff: 	movl	$0x0, 0x18(%rsp)
    00002507: 	movq	%rax, start_time(%rip)
    0000250e: 	movl	iterations(%rip), %eax
    00002514: 	movl	%eax, 0x20(%rsp)
    00002518: 	testl	%eax, %eax
    0000251a: 	jle	.Ltmp1645 # Offset: 9498
.Ltmp1650:
    00002520: 	movl	$0x3e80, %edx
    00002525: 	movq	%r13, %rsi
    00002528: 	movq	%rbp, %rdi
    0000252b: 	movl	$0x3e7, %r14d
    00002531: 	callq	memcpy@PLT # Offset: 9521
    00002536: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1646:
    00002540: 	movsd	(%rbp,%r14,8), %xmm0
    00002547: 	movq	%r14, %rdx
    0000254a: 	movq	%rbp, %rsi
    0000254d: 	movl	$0x7d0, %edi
    00002552: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEdEEvlT_lT0_ # Offset: 9554
    00002557: 	subq	$0x1, %r14
    0000255b: 	jae	.Ltmp1646 # Offset: 9563
    0000255d: 	movl	$0x7cf, %r14d
    00002563: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1647:
    00002568: 	movsd	(%rbp,%r14,8), %xmm0
    0000256f: 	xorl	%edx, %edx
    00002571: 	movq	%r14, %rdi
    00002574: 	movq	%rbp, %rsi
    00002577: 	movsd	0x100(%rsp), %xmm1
    00002580: 	movsd	%xmm1, (%rbp,%r14,8)
    00002587: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIdEdEdEdEEvlT_lT0_ # Offset: 9607
    0000258c: 	subq	$0x1, %r14
    00002590: 	jne	.Ltmp1647 # Offset: 9616
    00002592: 	movsd	0x100(%rsp), %xmm0
    0000259b: 	movq	%r15, %rax
    0000259e: 	nop # Size: 2
.Ltmp1649:
    000025a0: 	movapd	%xmm0, %xmm1
    000025a4: 	movsd	(%rax), %xmm0
    000025a8: 	comisd	%xmm0, %xmm1
    000025ac: 	ja	.Ltmp1648 # Offset: 9644
    000025b2: 	addq	$0x8, %rax
    000025b6: 	cmpq	%rbx, %rax
    000025b9: 	jne	.Ltmp1649 # Offset: 9657
    000025bb: 	addl	$0x1, 0x18(%rsp)
    000025c0: 	movl	0x18(%rsp), %eax
    000025c4: 	cmpl	0x20(%rsp), %eax
    000025c8: 	jl	.Ltmp1650 # Offset: 9672
.Ltmp1645:
    000025ce: 	callq	clock@PLT # Offset: 9678
    000025d3: 	movq	0x8(%rsp), %rdi
    000025d8: 	pxor	%xmm0, %xmm0
    000025dc: 	movq	%rax, end_time(%rip)
    000025e3: 	subq	start_time(%rip), %rax
    000025ea: 	cvtsi2sd	%rax, %xmm0
    000025ef: 	divsd	DATAat0x14868(%rip), %xmm0
    000025f7: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9719
    000025fc: 	movq	0xe0(%rsp), %rdi
    00002604: 	cmpq	0x28(%rsp), %rdi
    00002609: 	je	.Ltmp1651 # Offset: 9737
    0000260b: 	movq	0xf0(%rsp), %rax
    00002613: 	leaq	0x1(%rax), %rsi
    00002617: 	callq	_ZdlPvm@PLT # Offset: 9751
.Ltmp1651:
    0000261c: 	movq	0x30(%rsp), %rsi
    00002621: 	movq	0x8(%rsp), %rdi
    00002626: 	leaq	DATAat0x14808(%rip), %rdx
    0000262d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9773
    00002632: 	callq	clock@PLT # Offset: 9778
    00002637: 	movl	iterations(%rip), %r13d
    0000263e: 	xorl	%ebp, %ebp
    00002640: 	leaq	DATAat0x141cf(%rip), %r14
    00002647: 	movq	%rax, start_time(%rip)
    0000264e: 	leaq	0x3f88(%rsp), %rax
    00002656: 	movq	%rax, 0x20(%rsp)
    0000265b: 	testl	%r13d, %r13d
    0000265e: 	jle	.Ltmp1652 # Offset: 9822
    00002664: 	nopl	(%rax) # Size: 4
.Ltmp1657:
    00002668: 	movq	0x10(%rsp), %rsi
    0000266d: 	movl	$0x3e80, %edx
    00002672: 	movq	%rbx, %rdi
    00002675: 	movl	$0x3e7, %r15d
    0000267b: 	callq	memcpy@PLT # Offset: 9851
.Ltmp1653:
    00002680: 	movsd	(%rbx,%r15,8), %xmm0
    00002686: 	movq	%r15, %rdx
    00002689: 	movq	%rbx, %rsi
    0000268c: 	movl	$0x7d0, %edi
    00002691: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_ES4_EEvlT_lT0_ # Offset: 9873
    00002696: 	subq	$0x1, %r15
    0000269a: 	jae	.Ltmp1653 # Offset: 9882
    0000269c: 	movl	$0x7cf, %r15d
    000026a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1654:
    000026a8: 	movsd	(%rbx,%r15,8), %xmm0
    000026ae: 	xorl	%edx, %edx
    000026b0: 	movq	%r15, %rdi
    000026b3: 	movq	%rbx, %rsi
    000026b6: 	movsd	0x3f80(%rsp), %xmm1
    000026bf: 	movsd	%xmm1, (%rbx,%r15,8)
    000026c5: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIdEES4_ES4_ES4_EEvlT_lT0_ # Offset: 9925
    000026ca: 	subq	$0x1, %r15
    000026ce: 	jne	.Ltmp1654 # Offset: 9934
    000026d0: 	movsd	0x3f80(%rsp), %xmm0
    000026d9: 	movq	0x20(%rsp), %rax
    000026de: 	nop # Size: 2
.Ltmp1656:
    000026e0: 	movapd	%xmm0, %xmm1
    000026e4: 	movsd	(%rax), %xmm0
    000026e8: 	comisd	%xmm0, %xmm1
    000026ec: 	ja	.Ltmp1655 # Offset: 9964
    000026f2: 	addq	$0x8, %rax
    000026f6: 	cmpq	%r12, %rax
    000026f9: 	jne	.Ltmp1656 # Offset: 9977
    000026fb: 	addl	$0x1, %ebp
    000026fe: 	cmpl	%r13d, %ebp
    00002701: 	jl	.Ltmp1657 # Offset: 9985
.Ltmp1652:
    00002707: 	callq	clock@PLT # Offset: 9991
    0000270c: 	movq	0x8(%rsp), %rdi
    00002711: 	pxor	%xmm0, %xmm0
    00002715: 	movq	%rax, end_time(%rip)
    0000271c: 	subq	start_time(%rip), %rax
    00002723: 	cvtsi2sd	%rax, %xmm0
    00002728: 	divsd	DATAat0x14868(%rip), %xmm0
    00002730: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10032
    00002735: 	movq	0xe0(%rsp), %rdi
    0000273d: 	cmpq	0x28(%rsp), %rdi
    00002742: 	je	.Ltmp1658 # Offset: 10050
    00002744: 	movq	0xf0(%rsp), %rax
    0000274c: 	leaq	0x1(%rax), %rsi
    00002750: 	callq	_ZdlPvm@PLT # Offset: 10064
.Ltmp1658:
    00002755: 	movq	0x30(%rsp), %rsi
    0000275a: 	movq	0x8(%rsp), %rdi
    0000275f: 	leaq	DATAat0x142f2(%rip), %rdx
    00002766: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10086
    0000276b: 	movl	iterations(%rip), %edx
    00002771: 	movl	$0x1, %r8d
    00002777: 	movl	$0x1, %ecx
    0000277c: 	movq	0xe0(%rsp), %rdi
    00002784: 	movl	$0x7d0, %esi
    00002789: 	callq	_Z9summarizePKciiii # Offset: 10121
    0000278e: 	movl	0x3c(%rsp), %eax
    00002792: 	movq	0xe0(%rsp), %rdi
    0000279a: 	movl	%eax, iterations(%rip)
    000027a0: 	cmpq	0x28(%rsp), %rdi
    000027a5: 	je	.Ltmp1659 # Offset: 10149
    000027a7: 	movq	0xf0(%rsp), %rax
    000027af: 	leaq	0x1(%rax), %rsi
    000027b3: 	callq	_ZdlPvm@PLT # Offset: 10163
.Ltmp1659:
    000027b8: 	movq	0xc0(%rsp), %rdi
    000027c0: 	leaq	0xd0(%rsp), %rax
    000027c8: 	cmpq	%rax, %rdi
    000027cb: 	je	.Ltmp1660 # Offset: 10187
    000027cd: 	movq	0xd0(%rsp), %rax
    000027d5: 	leaq	0x1(%rax), %rsi
    000027d9: 	callq	_ZdlPvm@PLT # Offset: 10201
.Ltmp1660:
    000027de: 	movq	0xa0(%rsp), %rdi
    000027e6: 	leaq	0xb0(%rsp), %rax
    000027ee: 	cmpq	%rax, %rdi
    000027f1: 	je	.Ltmp1661 # Offset: 10225
    000027f3: 	movq	0xb0(%rsp), %rax
    000027fb: 	leaq	0x1(%rax), %rsi
    000027ff: 	callq	_ZdlPvm@PLT # Offset: 10239
.Ltmp1661:
    00002804: 	movq	0x80(%rsp), %rdi
    0000280c: 	leaq	0x90(%rsp), %rax
    00002814: 	cmpq	%rax, %rdi
    00002817: 	je	.Ltmp1662 # Offset: 10263
    00002819: 	movq	0x90(%rsp), %rax
    00002821: 	leaq	0x1(%rax), %rsi
    00002825: 	callq	_ZdlPvm@PLT # Offset: 10277
.Ltmp1662:
    0000282a: 	movq	0x60(%rsp), %rdi
    0000282f: 	leaq	0x70(%rsp), %rax
    00002834: 	cmpq	%rax, %rdi
    00002837: 	je	.Ltmp1663 # Offset: 10295
    00002839: 	movq	0x70(%rsp), %rax
    0000283e: 	leaq	0x1(%rax), %rsi
    00002842: 	callq	_ZdlPvm@PLT # Offset: 10306
.Ltmp1663:
    00002847: 	movq	0x17808(%rsp), %rax
    0000284f: 	subq	%fs:0x28, %rax
    00002858: 	jne	.Ltmp1664 # Offset: 10328
    0000285e: 	addq	$0x17818, %rsp
    00002865: 	popq	%rbx
    00002866: 	popq	%rbp
    00002867: 	popq	%r12
    00002869: 	popq	%r13
    0000286b: 	popq	%r14
    0000286d: 	popq	%r15
    0000286f: 	retq # Offset: 10351
.Ltmp1556:
    00002870: 	movq	%rbx, %rdx
    00002873: 	addq	$0x8, %rcx
    00002877: 	movsd	%xmm1, (%rdx)
    0000287b: 	cmpq	%rcx, %r12
    0000287e: 	jne	.Ltmp1558 # Offset: 10366
    00002884: 	jmp	.Ltmp1665 # Offset: 10372
    00002889: 	nopl	(%rax) # Size: 7
.Ltmp1526:
    00002890: 	movq	%r12, %rdx
    00002893: 	addq	$0x8, %rcx
    00002897: 	movsd	%xmm1, (%rdx)
    0000289b: 	cmpq	%rcx, %r13
    0000289e: 	jne	.Ltmp1528 # Offset: 10398
    000028a4: 	jmp	.Ltmp1666 # Offset: 10404
    000028a9: 	nopl	(%rax) # Size: 7
.Ltmp1510:
    000028b0: 	movq	%rbx, %rdx
    000028b3: 	addq	$0x8, %rcx
    000028b7: 	movsd	%xmm1, (%rdx)
    000028bb: 	cmpq	%rcx, %r12
    000028be: 	jne	.Ltmp1512 # Offset: 10430
    000028c4: 	jmp	.Ltmp1667 # Offset: 10436
.Ltmp1555:
    000028c9: 	movsd	%xmm1, 0x3f80(%rsp)
    000028d2: 	leaq	0x8(%rbx), %rcx
    000028d6: 	jmp	.Ltmp1558 # Offset: 10454
.Ltmp1509:
    000028db: 	movsd	%xmm1, 0x3f80(%rsp)
    000028e4: 	leaq	0x8(%rbx), %rcx
    000028e8: 	jmp	.Ltmp1512 # Offset: 10472
.Ltmp1544:
    000028ed: 	movsd	%xmm1, 0x100(%rsp)
    000028f6: 	leaq	0x8(%rbp), %rdx
    000028fa: 	jmp	.Ltmp1548 # Offset: 10490
.Ltmp1492:
    000028ff: 	movsd	%xmm1, 0x100(%rsp)
    00002908: 	leaq	0x8(%rbp), %rdx
    0000290c: 	jmp	.Ltmp1496 # Offset: 10508
.Ltmp1525:
    00002911: 	movsd	%xmm1, 0x7e00(%rsp)
    0000291a: 	leaq	0x8(%r12), %rcx
    0000291f: 	jmp	.Ltmp1528 # Offset: 10527
.Ltmp1534:
    00002924: 	movsd	%xmm1, 0x100(%rsp)
    0000292d: 	leaq	0x8(%rbp), %rdx
    00002931: 	jmp	.Ltmp1538 # Offset: 10545
.Ltmp1539:
    00002936: 	movq	0xe0(%rsp), %rdx
    0000293e: 	leaq	DATAat0x141cf(%rip), %rsi
    00002945: 	movl	$0x1, %edi
    0000294a: 	xorl	%eax, %eax
    0000294c: 	callq	__printf_chk@PLT # Offset: 10572
    00002951: 	movl	iterations(%rip), %eax
    00002957: 	addl	$0x1, %r14d
    0000295b: 	movl	%eax, 0x20(%rsp)
    0000295f: 	cmpl	0x20(%rsp), %r14d
    00002964: 	jl	.Ltmp1541 # Offset: 10596
    0000296a: 	jmp	.Ltmp1533 # Offset: 10602
.Ltmp1497:
    0000296f: 	movq	0xe0(%rsp), %rdx
    00002977: 	leaq	DATAat0x141cf(%rip), %rsi
    0000297e: 	movl	$0x1, %edi
    00002983: 	xorl	%eax, %eax
    00002985: 	callq	__printf_chk@PLT # Offset: 10629
    0000298a: 	movl	iterations(%rip), %eax
    00002990: 	addl	$0x1, %r14d
    00002994: 	movl	%eax, 0x20(%rsp)
    00002998: 	cmpl	0x20(%rsp), %r14d
    0000299d: 	jl	.Ltmp1499 # Offset: 10653
    000029a3: 	jmp	.Ltmp1491 # Offset: 10659
.Ltmp1529:
    000029a8: 	movq	0xe0(%rsp), %rdx
    000029b0: 	leaq	DATAat0x141cf(%rip), %rsi
    000029b7: 	movl	$0x1, %edi
    000029bc: 	xorl	%eax, %eax
    000029be: 	callq	__printf_chk@PLT # Offset: 10686
    000029c3: 	movl	iterations(%rip), %eax
    000029c9: 	addl	$0x1, %r14d
    000029cd: 	movl	%eax, 0x20(%rsp)
    000029d1: 	cmpl	0x20(%rsp), %r14d
    000029d6: 	jl	.Ltmp1531 # Offset: 10710
    000029dc: 	jmp	.Ltmp1523 # Offset: 10716
.Ltmp1549:
    000029e1: 	movq	0xe0(%rsp), %rdx
    000029e9: 	leaq	DATAat0x141cf(%rip), %rsi
    000029f0: 	movl	$0x1, %edi
    000029f5: 	xorl	%eax, %eax
    000029f7: 	callq	__printf_chk@PLT # Offset: 10743
    000029fc: 	movl	iterations(%rip), %eax
    00002a02: 	addl	$0x1, %r14d
    00002a06: 	movl	%eax, 0x20(%rsp)
    00002a0a: 	cmpl	0x20(%rsp), %r14d
    00002a0f: 	jl	.Ltmp1551 # Offset: 10767
    00002a15: 	jmp	.Ltmp1543 # Offset: 10773
.Ltmp1513:
    00002a1a: 	movq	0xe0(%rsp), %rdx
    00002a22: 	leaq	DATAat0x141cf(%rip), %rsi
    00002a29: 	movl	$0x1, %edi
    00002a2e: 	xorl	%eax, %eax
    00002a30: 	callq	__printf_chk@PLT # Offset: 10800
    00002a35: 	movl	iterations(%rip), %r15d
    00002a3c: 	addl	$0x1, %r14d
    00002a40: 	cmpl	%r15d, %r14d
    00002a43: 	jl	.Ltmp1515 # Offset: 10819
    00002a49: 	jmp	.Ltmp1507 # Offset: 10825
.Ltmp1655:
    00002a4e: 	movq	0xe0(%rsp), %rdx
    00002a56: 	movq	%r14, %rsi
    00002a59: 	movl	$0x1, %edi
    00002a5e: 	xorl	%eax, %eax
    00002a60: 	callq	__printf_chk@PLT # Offset: 10848
    00002a65: 	movl	iterations(%rip), %r13d
    00002a6c: 	addl	$0x1, %ebp
    00002a6f: 	cmpl	%r13d, %ebp
    00002a72: 	jl	.Ltmp1657 # Offset: 10866
    00002a78: 	jmp	.Ltmp1652 # Offset: 10872
.Ltmp1648:
    00002a7d: 	movq	0xe0(%rsp), %rdx
    00002a85: 	leaq	DATAat0x141cf(%rip), %rsi
    00002a8c: 	movl	$0x1, %edi
    00002a91: 	xorl	%eax, %eax
    00002a93: 	callq	__printf_chk@PLT # Offset: 10899
    00002a98: 	movl	iterations(%rip), %eax
    00002a9e: 	addl	$0x1, 0x18(%rsp)
    00002aa3: 	movl	%eax, 0x20(%rsp)
    00002aa7: 	movl	0x18(%rsp), %eax
    00002aab: 	cmpl	0x20(%rsp), %eax
    00002aaf: 	jl	.Ltmp1650 # Offset: 10927
    00002ab5: 	jmp	.Ltmp1645 # Offset: 10933
.Ltmp1641:
    00002aba: 	movq	0xe0(%rsp), %rdx
    00002ac2: 	leaq	DATAat0x141cf(%rip), %rsi
    00002ac9: 	movl	$0x1, %edi
    00002ace: 	xorl	%eax, %eax
    00002ad0: 	callq	__printf_chk@PLT # Offset: 10960
    00002ad5: 	movl	iterations(%rip), %eax
    00002adb: 	addl	$0x1, 0x18(%rsp)
    00002ae0: 	movl	%eax, 0x20(%rsp)
    00002ae4: 	movl	0x18(%rsp), %eax
    00002ae8: 	cmpl	0x20(%rsp), %eax
    00002aec: 	jl	.Ltmp1643 # Offset: 10988
    00002af2: 	jmp	.Ltmp1638 # Offset: 10994
.Ltmp1634:
    00002af7: 	movq	0xe0(%rsp), %rdx
    00002aff: 	leaq	DATAat0x141cf(%rip), %rsi
    00002b06: 	movl	$0x1, %edi
    00002b0b: 	xorl	%eax, %eax
    00002b0d: 	callq	__printf_chk@PLT # Offset: 11021
    00002b12: 	movl	iterations(%rip), %eax
    00002b18: 	addl	$0x1, 0x20(%rsp)
    00002b1d: 	movl	%eax, 0x38(%rsp)
    00002b21: 	movl	0x20(%rsp), %eax
    00002b25: 	cmpl	0x38(%rsp), %eax
    00002b29: 	jl	.Ltmp1636 # Offset: 11049
    00002b2f: 	jmp	.Ltmp1631 # Offset: 11055
.Ltmp1622:
    00002b34: 	movq	0xe0(%rsp), %rdx
    00002b3c: 	leaq	DATAat0x141cf(%rip), %rsi
    00002b43: 	movl	$0x1, %edi
    00002b48: 	xorl	%eax, %eax
    00002b4a: 	callq	__printf_chk@PLT # Offset: 11082
    00002b4f: 	movl	iterations(%rip), %eax
    00002b55: 	addl	$0x1, %r14d
    00002b59: 	movl	%eax, 0x38(%rsp)
    00002b5d: 	cmpl	0x38(%rsp), %r14d
    00002b62: 	jl	.Ltmp1624 # Offset: 11106
    00002b68: 	jmp	.Ltmp1619 # Offset: 11112
.Ltmp1610:
    00002b6d: 	movq	0xe0(%rsp), %rdx
    00002b75: 	leaq	DATAat0x141cf(%rip), %rsi
    00002b7c: 	movl	$0x1, %edi
    00002b81: 	xorl	%eax, %eax
    00002b83: 	callq	__printf_chk@PLT # Offset: 11139
    00002b88: 	movl	iterations(%rip), %eax
    00002b8e: 	addl	$0x1, 0x20(%rsp)
    00002b93: 	movl	%eax, 0x38(%rsp)
    00002b97: 	movl	0x20(%rsp), %eax
    00002b9b: 	cmpl	0x38(%rsp), %eax
    00002b9f: 	jl	.Ltmp1612 # Offset: 11167
    00002ba5: 	jmp	.Ltmp1607 # Offset: 11173
.Ltmp1598:
    00002baa: 	movq	0xe0(%rsp), %rdx
    00002bb2: 	movq	%r15, %rsi
    00002bb5: 	movl	$0x1, %edi
    00002bba: 	xorl	%eax, %eax
    00002bbc: 	callq	__printf_chk@PLT # Offset: 11196
    00002bc1: 	addl	$0x1, %r14d
    00002bc5: 	cmpl	iterations(%rip), %r14d
    00002bcc: 	jl	.Ltmp1600 # Offset: 11212
    00002bd2: 	jmp	.Ltmp1597 # Offset: 11218
.Ltmp1593:
    00002bd7: 	movq	0xe0(%rsp), %rdx
    00002bdf: 	leaq	DATAat0x141cf(%rip), %rsi
    00002be6: 	movl	$0x1, %edi
    00002beb: 	xorl	%eax, %eax
    00002bed: 	callq	__printf_chk@PLT # Offset: 11245
    00002bf2: 	addl	$0x1, %r14d
    00002bf6: 	cmpl	iterations(%rip), %r14d
    00002bfd: 	jl	.Ltmp1595 # Offset: 11261
    00002c03: 	jmp	.Ltmp1592 # Offset: 11267
.Ltmp1583:
    00002c08: 	movq	0xe0(%rsp), %rdx
    00002c10: 	leaq	DATAat0x141cf(%rip), %rsi
    00002c17: 	movl	$0x1, %edi
    00002c1c: 	xorl	%eax, %eax
    00002c1e: 	callq	__printf_chk@PLT # Offset: 11294
    00002c23: 	addl	$0x1, %r14d
    00002c27: 	cmpl	iterations(%rip), %r14d
    00002c2e: 	jl	.Ltmp1585 # Offset: 11310
    00002c34: 	jmp	.Ltmp1582 # Offset: 11316
.Ltmp1588:
    00002c39: 	movq	0xe0(%rsp), %rdx
    00002c41: 	leaq	DATAat0x141cf(%rip), %rsi
    00002c48: 	movl	$0x1, %edi
    00002c4d: 	xorl	%eax, %eax
    00002c4f: 	callq	__printf_chk@PLT # Offset: 11343
    00002c54: 	addl	$0x1, %r14d
    00002c58: 	cmpl	iterations(%rip), %r14d
    00002c5f: 	jl	.Ltmp1590 # Offset: 11359
    00002c65: 	jmp	.Ltmp1587 # Offset: 11365
.Ltmp1575:
    00002c6a: 	movq	0xe0(%rsp), %rdx
    00002c72: 	movq	%r15, %rsi
    00002c75: 	movl	$0x1, %edi
    00002c7a: 	xorl	%eax, %eax
    00002c7c: 	callq	__printf_chk@PLT # Offset: 11388
    00002c81: 	addl	$0x1, %r14d
    00002c85: 	cmpl	iterations(%rip), %r14d
    00002c8c: 	jl	.Ltmp1577 # Offset: 11404
    00002c92: 	jmp	.Ltmp1574 # Offset: 11410
.Ltmp1481:
    00002c97: 	movq	0x13980(%rsp), %rdx
    00002c9f: 	movq	%r15, %rsi
    00002ca2: 	movl	$0x1, %edi
    00002ca7: 	xorl	%eax, %eax
    00002ca9: 	callq	__printf_chk@PLT # Offset: 11433
    00002cae: 	movl	iterations(%rip), %edx
    00002cb4: 	jmp	.Ltmp1668 # Offset: 11444
.Ltmp1559:
    00002cb9: 	movq	0xe0(%rsp), %rdx
    00002cc1: 	leaq	DATAat0x141cf(%rip), %rsi
    00002cc8: 	movl	$0x1, %edi
    00002ccd: 	xorl	%eax, %eax
    00002ccf: 	callq	__printf_chk@PLT # Offset: 11471
    00002cd4: 	movl	iterations(%rip), %r15d
    00002cdb: 	addl	$0x1, %r14d
    00002cdf: 	cmpl	%r15d, %r14d
    00002ce2: 	jl	.Ltmp1561 # Offset: 11490
    00002ce8: 	jmp	.Ltmp1553 # Offset: 11496
.Ltmp1567:
    00002ced: 	movq	0xe0(%rsp), %rdx
    00002cf5: 	leaq	DATAat0x141cf(%rip), %rsi
    00002cfc: 	movl	$0x1, %edi
    00002d01: 	xorl	%eax, %eax
    00002d03: 	callq	__printf_chk@PLT # Offset: 11523
    00002d08: 	addl	$0x1, %r14d
    00002d0c: 	cmpl	iterations(%rip), %r14d
    00002d13: 	jl	.Ltmp1569 # Offset: 11539
    00002d19: 	jmp	.Ltmp1566 # Offset: 11545
.Ltmp1476:
    00002d1e: 	movq	0x13980(%rsp), %rdx
    00002d26: 	movq	%r15, %rsi
    00002d29: 	movl	$0x1, %edi
    00002d2e: 	xorl	%eax, %eax
    00002d30: 	callq	__printf_chk@PLT # Offset: 11568
    00002d35: 	movl	iterations(%rip), %edx
    00002d3b: 	jmp	.Ltmp1669 # Offset: 11579
.Ltmp1471:
    00002d40: 	movq	0x13980(%rsp), %rdx
    00002d48: 	movq	%r15, %rsi
    00002d4b: 	movl	$0x1, %edi
    00002d50: 	xorl	%eax, %eax
    00002d52: 	callq	__printf_chk@PLT # Offset: 11602
    00002d57: 	movl	iterations(%rip), %edx
    00002d5d: 	jmp	.Ltmp1670 # Offset: 11613
.Ltmp1466:
    00002d62: 	movq	0x13980(%rsp), %rdx
    00002d6a: 	movq	%r15, %rsi
    00002d6d: 	movl	$0x1, %edi
    00002d72: 	xorl	%eax, %eax
    00002d74: 	callq	__printf_chk@PLT # Offset: 11636
    00002d79: 	movl	iterations(%rip), %edx
    00002d7f: 	jmp	.Ltmp1671 # Offset: 11647
.Ltmp1461:
    00002d84: 	movq	0x13980(%rsp), %rdx
    00002d8c: 	movq	%r15, %rsi
    00002d8f: 	movl	$0x1, %edi
    00002d94: 	xorl	%eax, %eax
    00002d96: 	callq	__printf_chk@PLT # Offset: 11670
    00002d9b: 	movl	iterations(%rip), %edx
    00002da1: 	jmp	.Ltmp1672 # Offset: 11681
.Ltmp1456:
    00002da6: 	movq	0x13980(%rsp), %rdx
    00002dae: 	movq	%r15, %rsi
    00002db1: 	movl	$0x1, %edi
    00002db6: 	xorl	%eax, %eax
    00002db8: 	callq	__printf_chk@PLT # Offset: 11704
    00002dbd: 	movl	iterations(%rip), %edx
    00002dc3: 	jmp	.Ltmp1673 # Offset: 11715
.Ltmp1451:
    00002dc8: 	movq	0x13980(%rsp), %rdx
    00002dd0: 	movq	%r15, %rsi
    00002dd3: 	movl	$0x1, %edi
    00002dd8: 	xorl	%eax, %eax
    00002dda: 	callq	__printf_chk@PLT # Offset: 11738
    00002ddf: 	movl	iterations(%rip), %edx
    00002de5: 	jmp	.Ltmp1674 # Offset: 11749
.Ltmp1446:
    00002dea: 	movq	0x13980(%rsp), %rdx
    00002df2: 	movq	%r15, %rsi
    00002df5: 	movl	$0x1, %edi
    00002dfa: 	xorl	%eax, %eax
    00002dfc: 	callq	__printf_chk@PLT # Offset: 11772
    00002e01: 	movl	iterations(%rip), %edx
    00002e07: 	jmp	.Ltmp1675 # Offset: 11783
.Ltmp1441:
    00002e0c: 	movq	0x13980(%rsp), %rdx
    00002e14: 	movq	%r15, %rsi
    00002e17: 	movl	$0x1, %edi
    00002e1c: 	xorl	%eax, %eax
    00002e1e: 	callq	__printf_chk@PLT # Offset: 11806
    00002e23: 	movl	iterations(%rip), %edx
    00002e29: 	jmp	.Ltmp1676 # Offset: 11817
.Ltmp1664:
    00002e2e: 	callq	__stack_chk_fail@PLT # Offset: 11822
    00002e33: 	endbr64
.Ltmp1678:
    00002e37: 	movq	%rax, %rbp
    00002e3a: 	jmp	.Ltmp1677 # Offset: 11834
    00002e3f: 	endbr64
    00002e43: 	jmp	.Ltmp1678 # Offset: 11843
    00002e45: 	endbr64
    00002e49: 	jmp	.Ltmp1678 # Offset: 11849
    00002e4b: 	endbr64
    00002e4f: 	jmp	.Ltmp1678 # Offset: 11855
    00002e51: 	endbr64
    00002e55: 	jmp	.Ltmp1678 # Offset: 11861
    00002e57: 	endbr64
    00002e5b: 	jmp	.Ltmp1678 # Offset: 11867
    00002e5d: 	endbr64
    00002e61: 	jmp	.Ltmp1678 # Offset: 11873
    00002e63: 	endbr64
    00002e67: 	jmp	.Ltmp1678 # Offset: 11879
    00002e69: 	endbr64
    00002e6d: 	jmp	.Ltmp1678 # Offset: 11885
    00002e6f: 	endbr64
    00002e73: 	jmp	.Ltmp1678 # Offset: 11891
    00002e75: 	endbr64
.Ltmp1680:
    00002e79: 	movq	%rax, %rbp
    00002e7c: 	jmp	.Ltmp1679 # Offset: 11900
    00002e7e: 	endbr64
    00002e82: 	jmp	.Ltmp1680 # Offset: 11906
    00002e84: 	endbr64
    00002e88: 	jmp	.Ltmp1680 # Offset: 11912
    00002e8a: 	endbr64
    00002e8e: 	jmp	.Ltmp1680 # Offset: 11918
.Ltmp1679:
    00002e90: 	movq	0xe0(%rsp), %rdi
    00002e98: 	cmpq	0x28(%rsp), %rdi
    00002e9d: 	je	.Ltmp1681 # Offset: 11933
.Ltmp1685:
    00002e9f: 	movq	0xf0(%rsp), %rax
    00002ea7: 	leaq	0x1(%rax), %rsi
    00002eab: 	callq	_ZdlPvm@PLT # Offset: 11947
.Ltmp1681:
    00002eb0: 	movq	0x80(%rsp), %rdi
    00002eb8: 	leaq	0x90(%rsp), %rax
    00002ec0: 	cmpq	%rax, %rdi
    00002ec3: 	je	.Ltmp1682 # Offset: 11971
    00002ec5: 	movq	0x90(%rsp), %rax
    00002ecd: 	leaq	0x1(%rax), %rsi
    00002ed1: 	callq	_ZdlPvm@PLT # Offset: 11985
.Ltmp1682:
    00002ed6: 	movq	0x60(%rsp), %rdi
    00002edb: 	leaq	0x70(%rsp), %rax
    00002ee0: 	cmpq	%rax, %rdi
    00002ee3: 	je	.Ltmp1683 # Offset: 12003
    00002ee5: 	movq	0x70(%rsp), %rax
    00002eea: 	leaq	0x1(%rax), %rsi
    00002eee: 	callq	_ZdlPvm@PLT # Offset: 12014
.Ltmp1683:
    00002ef3: 	movq	%rbp, %rdi
    00002ef6: 	callq	_Unwind_Resume@PLT # Offset: 12022
    00002efb: 	endbr64
    00002eff: 	movq	%rax, %rbp
    00002f02: 	jmp	.Ltmp1684 # Offset: 12034
    00002f04: 	endbr64
    00002f08: 	movq	%rax, %rbp
    00002f0b: 	jmp	.Ltmp1681 # Offset: 12043
.Ltmp1684:
    00002f0d: 	movq	0xe0(%rsp), %rdi
    00002f15: 	leaq	0xf0(%rsp), %rax
    00002f1d: 	cmpq	%rax, %rdi
    00002f20: 	jne	.Ltmp1685 # Offset: 12064
    00002f26: 	jmp	.Ltmp1681 # Offset: 12070
    00002f28: 	endbr64
.Ltmp1687:
    00002f2c: 	movq	%rax, %rbp
    00002f2f: 	jmp	.Ltmp1686 # Offset: 12079
    00002f31: 	endbr64
    00002f35: 	jmp	.Ltmp1687 # Offset: 12085
.Ltmp1686:
    00002f37: 	movq	0x13980(%rsp), %rdi
    00002f3f: 	cmpq	0x20(%rsp), %rdi
    00002f44: 	je	.Ltmp1682 # Offset: 12100
.Ltmp1689:
    00002f46: 	movq	0x13990(%rsp), %rax
    00002f4e: 	leaq	0x1(%rax), %rsi
    00002f52: 	callq	_ZdlPvm@PLT # Offset: 12114
    00002f57: 	jmp	.Ltmp1682 # Offset: 12119
    00002f5c: 	endbr64
    00002f60: 	jmp	.Ltmp1687 # Offset: 12128
    00002f62: 	endbr64
    00002f66: 	jmp	.Ltmp1687 # Offset: 12134
    00002f68: 	endbr64
    00002f6c: 	jmp	.Ltmp1687 # Offset: 12140
    00002f6e: 	endbr64
    00002f72: 	jmp	.Ltmp1687 # Offset: 12146
    00002f74: 	endbr64
    00002f78: 	jmp	.Ltmp1687 # Offset: 12152
    00002f7a: 	endbr64
    00002f7e: 	jmp	.Ltmp1687 # Offset: 12158
    00002f80: 	endbr64
    00002f84: 	movq	%rax, %rbp
    00002f87: 	jmp	.Ltmp1688 # Offset: 12167
    00002f89: 	endbr64
    00002f8d: 	movq	%rax, %rbp
    00002f90: 	jmp	.Ltmp1682 # Offset: 12176
.Ltmp1688:
    00002f95: 	movq	0x13980(%rsp), %rdi
    00002f9d: 	leaq	0x13990(%rsp), %rax
    00002fa5: 	cmpq	%rax, %rdi
    00002fa8: 	jne	.Ltmp1689 # Offset: 12200
    00002faa: 	jmp	.Ltmp1682 # Offset: 12202
    00002faf: 	endbr64
.Ltmp1691:
    00002fb3: 	movq	%rax, %rbp
    00002fb6: 	jmp	.Ltmp1690 # Offset: 12214
    00002fb8: 	endbr64
    00002fbc: 	jmp	.Ltmp1691 # Offset: 12220
    00002fbe: 	endbr64
    00002fc2: 	jmp	.Ltmp1691 # Offset: 12226
    00002fc4: 	endbr64
    00002fc8: 	movq	%rax, %rbp
    00002fcb: 	jmp	.Ltmp1692 # Offset: 12235
.Ltmp1690:
    00002fcd: 	movq	0xe0(%rsp), %rdi
    00002fd5: 	cmpq	0x28(%rsp), %rdi
    00002fda: 	je	.Ltmp1692 # Offset: 12250
    00002fdc: 	movq	0xf0(%rsp), %rax
    00002fe4: 	leaq	0x1(%rax), %rsi
    00002fe8: 	callq	_ZdlPvm@PLT # Offset: 12264
.Ltmp1692:
    00002fed: 	movq	0xa0(%rsp), %rdi
    00002ff5: 	leaq	0xb0(%rsp), %rax
    00002ffd: 	cmpq	%rax, %rdi
    00003000: 	je	.Ltmp1681 # Offset: 12288
    00003006: 	movq	0xb0(%rsp), %rax
    0000300e: 	leaq	0x1(%rax), %rsi
    00003012: 	callq	_ZdlPvm@PLT # Offset: 12306
    00003017: 	jmp	.Ltmp1681 # Offset: 12311
    0000301c: 	endbr64
    00003020: 	jmp	.Ltmp1680 # Offset: 12320
    00003025: 	endbr64
    00003029: 	jmp	.Ltmp1680 # Offset: 12329
    0000302e: 	endbr64
    00003032: 	jmp	.Ltmp1680 # Offset: 12338
    00003037: 	endbr64
    0000303b: 	jmp	.Ltmp1680 # Offset: 12347
    00003040: 	endbr64
    00003044: 	jmp	.Ltmp1691 # Offset: 12356
    00003049: 	endbr64
    0000304d: 	jmp	.Ltmp1691 # Offset: 12365
    00003052: 	endbr64
    00003056: 	jmp	.Ltmp1691 # Offset: 12374
    0000305b: 	endbr64
    0000305f: 	jmp	.Ltmp1691 # Offset: 12383
    00003064: 	endbr64
    00003068: 	jmp	.Ltmp1691 # Offset: 12392
    0000306d: 	endbr64
    00003071: 	jmp	.Ltmp1691 # Offset: 12401
    00003076: 	endbr64
    0000307a: 	movq	%rax, %rbp
    0000307d: 	jmp	.Ltmp1693 # Offset: 12413
.Ltmp1677:
    0000307f: 	movq	0xe0(%rsp), %rdi
    00003087: 	cmpq	0x28(%rsp), %rdi
    0000308c: 	je	.Ltmp1693 # Offset: 12428
    0000308e: 	movq	0xf0(%rsp), %rax
    00003096: 	leaq	0x1(%rax), %rsi
    0000309a: 	callq	_ZdlPvm@PLT # Offset: 12442
.Ltmp1693:
    0000309f: 	movq	0xc0(%rsp), %rdi
    000030a7: 	leaq	0xd0(%rsp), %rax
    000030af: 	cmpq	%rax, %rdi
    000030b2: 	je	.Ltmp1692 # Offset: 12466
    000030b8: 	movq	0xd0(%rsp), %rax
    000030c0: 	leaq	0x1(%rax), %rsi
    000030c4: 	callq	_ZdlPvm@PLT # Offset: 12484
    000030c9: 	jmp	.Ltmp1692 # Offset: 12489
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_ZN9benchmark9__sift_inIPiiEEvlT_lT0_" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0xc210
  Size        : 0x103
  MaxSize     : 0x110
  Offset      : 0xc210
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPiiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rdi
    00000010: 	movq	%rdx, %r8
    00000013: 	movl	%ecx, %r9d
    00000016: 	cmpq	%r11, %rax
    00000019: 	jge	.Ltmp1694 # Offset: 25
    0000001f: 	movq	%rdx, %r10
    00000022: 	jmp	.Ltmp1695 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1697:
    00000028: 	leaq	-0x1(%rax), %rbx
    0000002c: 	leaq	(%rax,%rax), %rcx
    00000030: 	movl	%esi, (%rdi,%r10,4)
    00000034: 	leaq	(%rdi,%rbx,4), %rdx
    00000038: 	movq	%rbx, %rax
    0000003b: 	cmpq	%rcx, %r11
    0000003e: 	jle	.Ltmp1696 # Offset: 62
.Ltmp1698:
    00000040: 	movq	%rax, %r10
    00000043: 	movq	%rcx, %rax
.Ltmp1695:
    00000046: 	leaq	(,%rax,4), %rdx
    0000004e: 	movl	-0x4(%rdi,%rdx), %esi
    00000052: 	addq	%rdi, %rdx
    00000055: 	movl	(%rdx), %ecx
    00000057: 	cmpl	%ecx, %esi
    00000059: 	jge	.Ltmp1697 # Offset: 89
    0000005b: 	movl	%ecx, (%rdi,%r10,4)
    0000005f: 	leaq	0x2(%rax,%rax), %rcx
    00000064: 	cmpq	%rcx, %r11
    00000067: 	jg	.Ltmp1698 # Offset: 103
.Ltmp1696:
    00000069: 	cmpq	%rcx, %r11
    0000006c: 	je	.Ltmp1699 # Offset: 108
.Ltmp1704:
    00000072: 	leaq	-0x1(%rax), %rsi
    00000076: 	movq	%rsi, %rcx
    00000079: 	shrq	$0x3f, %rcx
    0000007d: 	addq	%rsi, %rcx
    00000080: 	sarq	%rcx
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1700 # Offset: 134
    00000088: 	jmp	.Ltmp1701 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1703:
    00000090: 	movl	%esi, (%rdx)
    00000092: 	leaq	-0x1(%rcx), %rdx
    00000096: 	movq	%rdx, %rax
    00000099: 	shrq	$0x3f, %rax
    0000009d: 	addq	%rdx, %rax
    000000a0: 	sarq	%rax
    000000a3: 	movq	%rax, %rdx
    000000a6: 	movq	%rcx, %rax
    000000a9: 	cmpq	%rcx, %r8
    000000ac: 	jge	.Ltmp1702 # Offset: 172
    000000ae: 	movq	%rdx, %rcx
.Ltmp1700:
    000000b1: 	leaq	(%rdi,%rcx,4), %r10
    000000b5: 	leaq	(%rdi,%rax,4), %rdx
    000000b9: 	movl	(%r10), %esi
    000000bc: 	cmpl	%r9d, %esi
    000000bf: 	jl	.Ltmp1703 # Offset: 191
.Ltmp1701:
    000000c1: 	movl	%r9d, (%rdx)
    000000c4: 	popq	%rbx
    000000c5: 	retq # Offset: 197
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1702:
    000000d0: 	movq	%r10, %rdx
    000000d3: 	movl	%r9d, (%rdx)
    000000d6: 	popq	%rbx
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1694:
    000000e0: 	leaq	(%rsi,%rdx,4), %rdx
    000000e4: 	jne	.Ltmp1701 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1699:
    000000f0: 	movl	-0x4(%rdi,%rcx,4), %eax
    000000f4: 	movl	%eax, (%rdx)
    000000f6: 	leaq	-0x1(%rcx), %rax
    000000fa: 	leaq	(%rdi,%rax,4), %rdx
    000000fe: 	jmp	.Ltmp1704 # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPiiEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI14PointerWrapperIiEiEEvlT_lT0_" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0xc320
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0xc320
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI14PointerWrapperIiEiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %r9d
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp1705 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp1706 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1708:
    00000028: 	movq	%rax, %rbx
.Ltmp1706:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,4), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x4(%r10,%rsi), %r10
    00000040: 	movl	(%rcx), %edi
    00000042: 	movl	(%r10), %r11d
    00000045: 	cmpl	%edi, %r11d
    00000048: 	jle	.Ltmp1707 # Offset: 72
    0000004a: 	movq	%rdx, %rax
    0000004d: 	movl	%r11d, %edi
    00000050: 	movq	%r10, %rcx
    00000053: 	addq	$0x1, %rdx
.Ltmp1707:
    00000057: 	addq	%rdx, %rdx
    0000005a: 	movl	%edi, (%rsi,%rbx,4)
    0000005d: 	cmpq	%rdx, %rbp
    00000060: 	jg	.Ltmp1708 # Offset: 96
    00000062: 	je	.Ltmp1709 # Offset: 98
.Ltmp1714:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1710 # Offset: 120
    0000007a: 	jmp	.Ltmp1711 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1713:
    00000080: 	movl	%edx, (%rcx)
    00000082: 	leaq	-0x1(%rdi), %rdx
    00000086: 	movq	%rdx, %rax
    00000089: 	shrq	$0x3f, %rax
    0000008d: 	addq	%rdx, %rax
    00000090: 	sarq	%rax
    00000093: 	movq	%rax, %rdx
    00000096: 	movq	%rdi, %rax
    00000099: 	cmpq	%rdi, %r8
    0000009c: 	jge	.Ltmp1712 # Offset: 156
    0000009e: 	movq	%rdx, %rdi
.Ltmp1710:
    000000a1: 	leaq	(%rsi,%rdi,4), %r10
    000000a5: 	leaq	(%rsi,%rax,4), %rcx
    000000a9: 	movl	(%r10), %edx
    000000ac: 	cmpl	%r9d, %edx
    000000af: 	jl	.Ltmp1713 # Offset: 175
.Ltmp1711:
    000000b1: 	movl	%r9d, (%rcx)
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1712:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movl	%r9d, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1705:
    000000d0: 	leaq	(%rsi,%r8,4), %rcx
    000000d4: 	jne	.Ltmp1711 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1709:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,4), %rdx
    000000e8: 	movl	(%rdx), %edi
    000000ea: 	movl	%edi, (%rcx)
    000000ec: 	movq	%rdx, %rcx
    000000ef: 	jmp	.Ltmp1714 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI14PointerWrapperIiEiEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12ValueWrapperIiES2_EEvlT_lT0_" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0xc420
  Size        : 0xf3
  MaxSize     : 0x100
  Offset      : 0xc420
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12ValueWrapperIiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r11
    0000000c: 	movq	%rdx, %r8
    0000000f: 	movl	%ecx, %r9d
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp1715 # Offset: 21
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jmp	.Ltmp1716 # Offset: 30
.Ltmp1718:
    00000020: 	leaq	0x2(%rax,%rax), %rcx
    00000025: 	movl	%edi, (%rsi,%r10,4)
    00000029: 	cmpq	%rcx, %r11
    0000002c: 	jle	.Ltmp1717 # Offset: 44
.Ltmp1719:
    0000002e: 	movq	%rax, %r10
    00000031: 	movq	%rcx, %rax
.Ltmp1716:
    00000034: 	leaq	(,%rax,4), %rcx
    0000003c: 	leaq	(%rsi,%rcx), %rdx
    00000040: 	leaq	-0x4(%rsi,%rcx), %rcx
    00000045: 	movl	(%rdx), %edi
    00000047: 	cmpl	(%rcx), %edi
    00000049: 	jg	.Ltmp1718 # Offset: 73
    0000004b: 	movl	(%rcx), %ecx
    0000004d: 	leaq	-0x1(%rax), %rdi
    00000051: 	leaq	(%rsi,%rdi,4), %rdx
    00000055: 	movl	%ecx, (%rsi,%r10,4)
    00000059: 	leaq	(%rax,%rax), %rcx
    0000005d: 	movq	%rdi, %rax
    00000060: 	cmpq	%r11, %rcx
    00000063: 	jl	.Ltmp1719 # Offset: 99
.Ltmp1717:
    00000065: 	cmpq	%r11, %rcx
    00000068: 	je	.Ltmp1720 # Offset: 104
.Ltmp1725:
    0000006a: 	leaq	-0x1(%rax), %rdi
    0000006e: 	movq	%rdi, %rcx
    00000071: 	shrq	$0x3f, %rcx
    00000075: 	addq	%rdi, %rcx
    00000078: 	sarq	%rcx
    0000007b: 	cmpq	%r8, %rax
    0000007e: 	jg	.Ltmp1721 # Offset: 126
    00000080: 	jmp	.Ltmp1722 # Offset: 128
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1724:
    00000088: 	movl	(%rdi), %eax
    0000008a: 	movl	%eax, (%rdx)
    0000008c: 	leaq	-0x1(%rcx), %rdx
    00000090: 	movq	%rdx, %rax
    00000093: 	shrq	$0x3f, %rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	sarq	%rax
    0000009d: 	movq	%rax, %rdx
    000000a0: 	movq	%rcx, %rax
    000000a3: 	cmpq	%rcx, %r8
    000000a6: 	jge	.Ltmp1723 # Offset: 166
    000000a8: 	movq	%rdx, %rcx
.Ltmp1721:
    000000ab: 	leaq	(%rsi,%rcx,4), %rdi
    000000af: 	leaq	(%rsi,%rax,4), %rdx
    000000b3: 	cmpl	%r9d, (%rdi)
    000000b6: 	jl	.Ltmp1724 # Offset: 182
.Ltmp1722:
    000000b8: 	movl	%r9d, (%rdx)
    000000bb: 	retq # Offset: 187
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp1723:
    000000c0: 	movq	%rdi, %rdx
    000000c3: 	movl	%r9d, (%rdx)
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1715:
    000000d0: 	leaq	(%rsi,%rdx,4), %rdx
    000000d4: 	jne	.Ltmp1722 # Offset: 212
    000000d6: 	movq	%rax, %rcx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1720:
    000000e0: 	movl	-0x4(%rsi,%rcx,4), %eax
    000000e4: 	movl	%eax, (%rdx)
    000000e6: 	leaq	-0x1(%rcx), %rax
    000000ea: 	leaq	(%rsi,%rax,4), %rdx
    000000ee: 	jmp	.Ltmp1725 # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12ValueWrapperIiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIiEES3_EEvlT_lT0_" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0xc520
  Size        : 0xe4
  MaxSize     : 0xf0
  Offset      : 0xc520
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIiEES3_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdx, %r9
    0000000d: 	movl	%ecx, %r10d
    00000010: 	cmpq	%rdi, %rax
    00000013: 	jge	.Ltmp1726 # Offset: 19
    00000019: 	movq	%rdi, %r11
    0000001c: 	movq	%rdx, %r8
    0000001f: 	jmp	.Ltmp1727 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1729:
    00000028: 	movq	%rcx, %r8
.Ltmp1727:
    0000002b: 	leaq	(,%rax,4), %rdx
    00000033: 	leaq	-0x1(%rax), %rcx
    00000037: 	leaq	(%rsi,%rdx), %rdi
    0000003b: 	leaq	-0x4(%rdx,%rsi), %rdx
    00000040: 	movl	(%rdx), %ebx
    00000042: 	cmpl	%ebx, (%rdi)
    00000044: 	jle	.Ltmp1728 # Offset: 68
    00000046: 	movq	%rax, %rcx
    00000049: 	movq	%rdi, %rdx
    0000004c: 	addq	$0x1, %rax
.Ltmp1728:
    00000050: 	movl	(%rdx), %edi
    00000052: 	addq	%rax, %rax
    00000055: 	movl	%edi, (%rsi,%r8,4)
    00000059: 	cmpq	%rax, %r11
    0000005c: 	jg	.Ltmp1729 # Offset: 92
    0000005e: 	je	.Ltmp1730 # Offset: 94
.Ltmp1735:
    00000060: 	leaq	-0x1(%rcx), %rax
    00000064: 	movq	%rax, %rdi
    00000067: 	shrq	$0x3f, %rdi
    0000006b: 	addq	%rax, %rdi
    0000006e: 	sarq	%rdi
    00000071: 	cmpq	%r9, %rcx
    00000074: 	jg	.Ltmp1731 # Offset: 116
    00000076: 	jmp	.Ltmp1732 # Offset: 118
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1734:
    00000080: 	movl	(%r8), %eax
    00000083: 	movq	%rdi, %rcx
    00000086: 	movl	%eax, (%rdx)
    00000088: 	leaq	-0x1(%rdi), %rdx
    0000008c: 	movq	%rdx, %rax
    0000008f: 	shrq	$0x3f, %rax
    00000093: 	addq	%rdx, %rax
    00000096: 	sarq	%rax
    00000099: 	cmpq	%rdi, %r9
    0000009c: 	jge	.Ltmp1733 # Offset: 156
    0000009e: 	movq	%rax, %rdi
.Ltmp1731:
    000000a1: 	leaq	(%rsi,%rdi,4), %r8
    000000a5: 	leaq	(%rsi,%rcx,4), %rdx
    000000a9: 	cmpl	%r10d, (%r8)
    000000ac: 	jl	.Ltmp1734 # Offset: 172
.Ltmp1732:
    000000ae: 	movl	%r10d, (%rdx)
    000000b1: 	popq	%rbx
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1733:
    000000b8: 	movq	%r8, %rdx
    000000bb: 	movl	%r10d, (%rdx)
    000000be: 	popq	%rbx
    000000bf: 	retq # Offset: 191
.Ltmp1726:
    000000c0: 	leaq	(%rsi,%rdx,4), %rdx
    000000c4: 	jne	.Ltmp1732 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1730:
    000000d0: 	leaq	-0x1(%rax), %rcx
    000000d4: 	leaq	(%rsi,%rcx,4), %rax
    000000d8: 	movl	(%rax), %edi
    000000da: 	movl	%edi, (%rdx)
    000000dc: 	movq	%rax, %rdx
    000000df: 	jmp	.Ltmp1735 # Offset: 223
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIiEES3_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEESB_EEvlT_lT0_" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0xc610
  Size        : 0xf3
  MaxSize     : 0x100
  Offset      : 0xc610
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEESB_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r11
    0000000c: 	movq	%rdx, %r8
    0000000f: 	movl	%ecx, %r9d
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp1736 # Offset: 21
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jmp	.Ltmp1737 # Offset: 30
.Ltmp1739:
    00000020: 	leaq	0x2(%rax,%rax), %rcx
    00000025: 	movl	%edi, (%rsi,%r10,4)
    00000029: 	cmpq	%rcx, %r11
    0000002c: 	jle	.Ltmp1738 # Offset: 44
.Ltmp1740:
    0000002e: 	movq	%rax, %r10
    00000031: 	movq	%rcx, %rax
.Ltmp1737:
    00000034: 	leaq	(,%rax,4), %rcx
    0000003c: 	leaq	(%rsi,%rcx), %rdx
    00000040: 	leaq	-0x4(%rsi,%rcx), %rcx
    00000045: 	movl	(%rdx), %edi
    00000047: 	cmpl	(%rcx), %edi
    00000049: 	jg	.Ltmp1739 # Offset: 73
    0000004b: 	movl	(%rcx), %ecx
    0000004d: 	leaq	-0x1(%rax), %rdi
    00000051: 	leaq	(%rsi,%rdi,4), %rdx
    00000055: 	movl	%ecx, (%rsi,%r10,4)
    00000059: 	leaq	(%rax,%rax), %rcx
    0000005d: 	movq	%rdi, %rax
    00000060: 	cmpq	%r11, %rcx
    00000063: 	jl	.Ltmp1740 # Offset: 99
.Ltmp1738:
    00000065: 	cmpq	%r11, %rcx
    00000068: 	je	.Ltmp1741 # Offset: 104
.Ltmp1746:
    0000006a: 	leaq	-0x1(%rax), %rdi
    0000006e: 	movq	%rdi, %rcx
    00000071: 	shrq	$0x3f, %rcx
    00000075: 	addq	%rdi, %rcx
    00000078: 	sarq	%rcx
    0000007b: 	cmpq	%r8, %rax
    0000007e: 	jg	.Ltmp1742 # Offset: 126
    00000080: 	jmp	.Ltmp1743 # Offset: 128
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1745:
    00000088: 	movl	(%rdi), %eax
    0000008a: 	movl	%eax, (%rdx)
    0000008c: 	leaq	-0x1(%rcx), %rdx
    00000090: 	movq	%rdx, %rax
    00000093: 	shrq	$0x3f, %rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	sarq	%rax
    0000009d: 	movq	%rax, %rdx
    000000a0: 	movq	%rcx, %rax
    000000a3: 	cmpq	%rcx, %r8
    000000a6: 	jge	.Ltmp1744 # Offset: 166
    000000a8: 	movq	%rdx, %rcx
.Ltmp1742:
    000000ab: 	leaq	(%rsi,%rcx,4), %rdi
    000000af: 	leaq	(%rsi,%rax,4), %rdx
    000000b3: 	cmpl	%r9d, (%rdi)
    000000b6: 	jl	.Ltmp1745 # Offset: 182
.Ltmp1743:
    000000b8: 	movl	%r9d, (%rdx)
    000000bb: 	retq # Offset: 187
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp1744:
    000000c0: 	movq	%rdi, %rdx
    000000c3: 	movl	%r9d, (%rdx)
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1736:
    000000d0: 	leaq	(%rsi,%rdx,4), %rdx
    000000d4: 	jne	.Ltmp1743 # Offset: 212
    000000d6: 	movq	%rax, %rcx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1741:
    000000e0: 	movl	-0x4(%rsi,%rcx,4), %eax
    000000e4: 	movl	%eax, (%rdx)
    000000e6: 	leaq	-0x1(%rcx), %rax
    000000ea: 	leaq	(%rsi,%rax,4), %rdx
    000000ee: 	jmp	.Ltmp1746 # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEESB_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEESC_EEvlT_lT0_" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0xc710
  Size        : 0xe4
  MaxSize     : 0xf0
  Offset      : 0xc710
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEESC_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdx, %r9
    0000000d: 	movl	%ecx, %r10d
    00000010: 	cmpq	%rdi, %rax
    00000013: 	jge	.Ltmp1747 # Offset: 19
    00000019: 	movq	%rdi, %r11
    0000001c: 	movq	%rdx, %r8
    0000001f: 	jmp	.Ltmp1748 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1750:
    00000028: 	movq	%rcx, %r8
.Ltmp1748:
    0000002b: 	leaq	(,%rax,4), %rdx
    00000033: 	leaq	-0x1(%rax), %rcx
    00000037: 	leaq	(%rsi,%rdx), %rdi
    0000003b: 	leaq	-0x4(%rdx,%rsi), %rdx
    00000040: 	movl	(%rdx), %ebx
    00000042: 	cmpl	%ebx, (%rdi)
    00000044: 	jle	.Ltmp1749 # Offset: 68
    00000046: 	movq	%rax, %rcx
    00000049: 	movq	%rdi, %rdx
    0000004c: 	addq	$0x1, %rax
.Ltmp1749:
    00000050: 	movl	(%rdx), %edi
    00000052: 	addq	%rax, %rax
    00000055: 	movl	%edi, (%rsi,%r8,4)
    00000059: 	cmpq	%rax, %r11
    0000005c: 	jg	.Ltmp1750 # Offset: 92
    0000005e: 	je	.Ltmp1751 # Offset: 94
.Ltmp1756:
    00000060: 	leaq	-0x1(%rcx), %rax
    00000064: 	movq	%rax, %rdi
    00000067: 	shrq	$0x3f, %rdi
    0000006b: 	addq	%rax, %rdi
    0000006e: 	sarq	%rdi
    00000071: 	cmpq	%r9, %rcx
    00000074: 	jg	.Ltmp1752 # Offset: 116
    00000076: 	jmp	.Ltmp1753 # Offset: 118
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1755:
    00000080: 	movl	(%r8), %eax
    00000083: 	movq	%rdi, %rcx
    00000086: 	movl	%eax, (%rdx)
    00000088: 	leaq	-0x1(%rdi), %rdx
    0000008c: 	movq	%rdx, %rax
    0000008f: 	shrq	$0x3f, %rax
    00000093: 	addq	%rdx, %rax
    00000096: 	sarq	%rax
    00000099: 	cmpq	%rdi, %r9
    0000009c: 	jge	.Ltmp1754 # Offset: 156
    0000009e: 	movq	%rax, %rdi
.Ltmp1752:
    000000a1: 	leaq	(%rsi,%rdi,4), %r8
    000000a5: 	leaq	(%rsi,%rcx,4), %rdx
    000000a9: 	cmpl	%r10d, (%r8)
    000000ac: 	jl	.Ltmp1755 # Offset: 172
.Ltmp1753:
    000000ae: 	movl	%r10d, (%rdx)
    000000b1: 	popq	%rbx
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1754:
    000000b8: 	movq	%r8, %rdx
    000000bb: 	movl	%r10d, (%rdx)
    000000be: 	popq	%rbx
    000000bf: 	retq # Offset: 191
.Ltmp1747:
    000000c0: 	leaq	(%rsi,%rdx,4), %rdx
    000000c4: 	jne	.Ltmp1753 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1751:
    000000d0: 	leaq	-0x1(%rax), %rcx
    000000d4: 	leaq	(%rsi,%rcx,4), %rax
    000000d8: 	movl	(%rax), %edi
    000000da: 	movl	%edi, (%rdx)
    000000dc: 	movq	%rax, %rdx
    000000df: 	jmp	.Ltmp1756 # Offset: 223
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEESC_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPiiEiEiEEvlT_lT0_" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0xc800
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0xc800
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPiiEiEiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %r9d
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp1757 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp1758 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1760:
    00000028: 	movq	%rax, %rbx
.Ltmp1758:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,4), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x4(%r10,%rsi), %r10
    00000040: 	movl	(%rcx), %edi
    00000042: 	movl	(%r10), %r11d
    00000045: 	cmpl	%edi, %r11d
    00000048: 	jle	.Ltmp1759 # Offset: 72
    0000004a: 	movq	%rdx, %rax
    0000004d: 	movl	%r11d, %edi
    00000050: 	movq	%r10, %rcx
    00000053: 	addq	$0x1, %rdx
.Ltmp1759:
    00000057: 	addq	%rdx, %rdx
    0000005a: 	movl	%edi, (%rsi,%rbx,4)
    0000005d: 	cmpq	%rdx, %rbp
    00000060: 	jg	.Ltmp1760 # Offset: 96
    00000062: 	je	.Ltmp1761 # Offset: 98
.Ltmp1766:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1762 # Offset: 120
    0000007a: 	jmp	.Ltmp1763 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1765:
    00000080: 	movl	%edx, (%rcx)
    00000082: 	leaq	-0x1(%rdi), %rdx
    00000086: 	movq	%rdx, %rax
    00000089: 	shrq	$0x3f, %rax
    0000008d: 	addq	%rdx, %rax
    00000090: 	sarq	%rax
    00000093: 	movq	%rax, %rdx
    00000096: 	movq	%rdi, %rax
    00000099: 	cmpq	%rdi, %r8
    0000009c: 	jge	.Ltmp1764 # Offset: 156
    0000009e: 	movq	%rdx, %rdi
.Ltmp1762:
    000000a1: 	leaq	(%rsi,%rdi,4), %r10
    000000a5: 	leaq	(%rsi,%rax,4), %rcx
    000000a9: 	movl	(%r10), %edx
    000000ac: 	cmpl	%r9d, %edx
    000000af: 	jl	.Ltmp1765 # Offset: 175
.Ltmp1763:
    000000b1: 	movl	%r9d, (%rcx)
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1764:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movl	%r9d, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1757:
    000000d0: 	leaq	(%rsi,%r8,4), %rcx
    000000d4: 	jne	.Ltmp1763 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1761:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,4), %rdx
    000000e8: 	movl	(%rdx), %edi
    000000ea: 	movl	%edi, (%rcx)
    000000ec: 	movq	%rdx, %rcx
    000000ef: 	jmp	.Ltmp1766 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPiiEiEiEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEiEEvlT_lT0_" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0xc900
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0xc900
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %r9d
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp1767 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp1768 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1770:
    00000028: 	movq	%rax, %rbx
.Ltmp1768:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,4), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x4(%r10,%rsi), %r10
    00000040: 	movl	(%rcx), %edi
    00000042: 	movl	(%r10), %r11d
    00000045: 	cmpl	%edi, %r11d
    00000048: 	jle	.Ltmp1769 # Offset: 72
    0000004a: 	movq	%rdx, %rax
    0000004d: 	movl	%r11d, %edi
    00000050: 	movq	%r10, %rcx
    00000053: 	addq	$0x1, %rdx
.Ltmp1769:
    00000057: 	addq	%rdx, %rdx
    0000005a: 	movl	%edi, (%rsi,%rbx,4)
    0000005d: 	cmpq	%rdx, %rbp
    00000060: 	jg	.Ltmp1770 # Offset: 96
    00000062: 	je	.Ltmp1771 # Offset: 98
.Ltmp1776:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1772 # Offset: 120
    0000007a: 	jmp	.Ltmp1773 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1775:
    00000080: 	movl	%edx, (%rcx)
    00000082: 	leaq	-0x1(%rdi), %rdx
    00000086: 	movq	%rdx, %rax
    00000089: 	shrq	$0x3f, %rax
    0000008d: 	addq	%rdx, %rax
    00000090: 	sarq	%rax
    00000093: 	movq	%rax, %rdx
    00000096: 	movq	%rdi, %rax
    00000099: 	cmpq	%rdi, %r8
    0000009c: 	jge	.Ltmp1774 # Offset: 156
    0000009e: 	movq	%rdx, %rdi
.Ltmp1772:
    000000a1: 	leaq	(%rsi,%rdi,4), %r10
    000000a5: 	leaq	(%rsi,%rax,4), %rcx
    000000a9: 	movl	(%r10), %edx
    000000ac: 	cmpl	%r9d, %edx
    000000af: 	jl	.Ltmp1775 # Offset: 175
.Ltmp1773:
    000000b1: 	movl	%r9d, (%rcx)
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1774:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movl	%r9d, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1767:
    000000d0: 	leaq	(%rsi,%r8,4), %rcx
    000000d4: 	jne	.Ltmp1773 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1771:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,4), %rdx
    000000e8: 	movl	(%rdx), %edi
    000000ea: 	movl	%edi, (%rcx)
    000000ec: 	movq	%rdx, %rcx
    000000ef: 	jmp	.Ltmp1776 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEiEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_ES4_EEvlT_lT0_" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0xca00
  Size        : 0xe4
  MaxSize     : 0xf0
  Offset      : 0xca00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_ES4_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdx, %r9
    0000000d: 	movl	%ecx, %r10d
    00000010: 	cmpq	%rdi, %rax
    00000013: 	jge	.Ltmp1777 # Offset: 19
    00000019: 	movq	%rdi, %r11
    0000001c: 	movq	%rdx, %r8
    0000001f: 	jmp	.Ltmp1778 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1780:
    00000028: 	movq	%rcx, %r8
.Ltmp1778:
    0000002b: 	leaq	(,%rax,4), %rdx
    00000033: 	leaq	-0x1(%rax), %rcx
    00000037: 	leaq	(%rsi,%rdx), %rdi
    0000003b: 	leaq	-0x4(%rdx,%rsi), %rdx
    00000040: 	movl	(%rdx), %ebx
    00000042: 	cmpl	%ebx, (%rdi)
    00000044: 	jle	.Ltmp1779 # Offset: 68
    00000046: 	movq	%rax, %rcx
    00000049: 	movq	%rdi, %rdx
    0000004c: 	addq	$0x1, %rax
.Ltmp1779:
    00000050: 	movl	(%rdx), %edi
    00000052: 	addq	%rax, %rax
    00000055: 	movl	%edi, (%rsi,%r8,4)
    00000059: 	cmpq	%rax, %r11
    0000005c: 	jg	.Ltmp1780 # Offset: 92
    0000005e: 	je	.Ltmp1781 # Offset: 94
.Ltmp1786:
    00000060: 	leaq	-0x1(%rcx), %rax
    00000064: 	movq	%rax, %rdi
    00000067: 	shrq	$0x3f, %rdi
    0000006b: 	addq	%rax, %rdi
    0000006e: 	sarq	%rdi
    00000071: 	cmpq	%r9, %rcx
    00000074: 	jg	.Ltmp1782 # Offset: 116
    00000076: 	jmp	.Ltmp1783 # Offset: 118
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1785:
    00000080: 	movl	(%r8), %eax
    00000083: 	movq	%rdi, %rcx
    00000086: 	movl	%eax, (%rdx)
    00000088: 	leaq	-0x1(%rdi), %rdx
    0000008c: 	movq	%rdx, %rax
    0000008f: 	shrq	$0x3f, %rax
    00000093: 	addq	%rdx, %rax
    00000096: 	sarq	%rax
    00000099: 	cmpq	%rdi, %r9
    0000009c: 	jge	.Ltmp1784 # Offset: 156
    0000009e: 	movq	%rax, %rdi
.Ltmp1782:
    000000a1: 	leaq	(%rsi,%rdi,4), %r8
    000000a5: 	leaq	(%rsi,%rcx,4), %rdx
    000000a9: 	cmpl	%r10d, (%r8)
    000000ac: 	jl	.Ltmp1785 # Offset: 172
.Ltmp1783:
    000000ae: 	movl	%r10d, (%rdx)
    000000b1: 	popq	%rbx
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1784:
    000000b8: 	movq	%r8, %rdx
    000000bb: 	movl	%r10d, (%rdx)
    000000be: 	popq	%rbx
    000000bf: 	retq # Offset: 191
.Ltmp1777:
    000000c0: 	leaq	(%rsi,%rdx,4), %rdx
    000000c4: 	jne	.Ltmp1783 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1781:
    000000d0: 	leaq	-0x1(%rax), %rcx
    000000d4: 	leaq	(%rsi,%rcx,4), %rax
    000000d8: 	movl	(%rax), %edi
    000000da: 	movl	%edi, (%rdx)
    000000dc: 	movq	%rax, %rdx
    000000df: 	jmp	.Ltmp1786 # Offset: 223
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_ES4_EEvlT_lT0_"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0xcaf0
  Size        : 0x2d0f
  MaxSize     : 0x2d10
  Offset      : 0xcaf0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xb000(%rsp), %r11
.Ltmp1787:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1787 # Offset: 37
    00000027: 	subq	$0xc98, %rsp
    0000002e: 	leaq	DATAat0x14842(%rip), %rsi
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0xbc88(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	leaq	0x60(%rsp), %rax
    0000004d: 	leaq	0x2040(%rsp), %r12
    00000055: 	movq	%rax, %rdi
    00000058: 	movq	%rax, 0x28(%rsp)
    0000005d: 	leaq	0x100(%rsp), %rbp
    00000065: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 101
    0000006a: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm2
    00000072: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    0000007a: 	leaq	0x40(%rsp), %rsi
    0000007f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000086: 	movaps	%xmm2, 0x40(%rsp)
    0000008b: 	movaps	%xmm3, 0x50(%rsp)
    00000090: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 144
    00000095: 	movl	iterations(%rip), %eax
    0000009b: 	movq	%r12, 0x18(%rsp)
    000000a0: 	movl	%eax, 0x3c(%rsp)
    000000a4: 	cvttsd2si	init_value(%rip), %eax
    000000ac: 	leal	0x7b(%rax), %edx
    000000af: 	movd	%eax, %xmm4
    000000b3: 	movq	%rbp, %rax
    000000b6: 	movslq	%edx, %rdx
    000000b9: 	pshufd	$0x0, %xmm4, %xmm0
    000000be: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
.Ltmp1788:
    000000c5: 	movaps	%xmm0, (%rax)
    000000c8: 	addq	$0x10, %rax
    000000cc: 	cmpq	%rax, %r12
    000000cf: 	jne	.Ltmp1788 # Offset: 207
    000000d1: 	leaq	0x3f80(%rsp), %r13
    000000d9: 	movq	%r12, %rax
    000000dc: 	movq	%r13, 0x30(%rsp)
.Ltmp1789:
    000000e1: 	movaps	%xmm0, (%rax)
    000000e4: 	addq	$0x10, %rax
    000000e8: 	cmpq	%rax, %r13
    000000eb: 	jne	.Ltmp1789 # Offset: 235
    000000ed: 	leaq	0x5ec0(%rsp), %r14
    000000f5: 	movq	%r13, %rax
.Ltmp1790:
    000000f8: 	movaps	%xmm0, (%rax)
    000000fb: 	addq	$0x10, %rax
    000000ff: 	cmpq	%rax, %r14
    00000102: 	jne	.Ltmp1790 # Offset: 258
    00000104: 	leaq	0x9d40(%rsp), %rax
    0000010c: 	movq	0x28(%rsp), %rsi
    00000111: 	leaq	DATAat0x141eb(%rip), %rdx
    00000118: 	movq	%rax, %rdi
    0000011b: 	movq	%rax, 0x10(%rsp)
    00000120: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 288
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	movsd	DATAat0x14878(%rip), %xmm5
    00000132: 	xorl	%ebx, %ebx
    00000134: 	movl	iterations(%rip), %ecx
    0000013a: 	movq	%rax, start_time(%rip)
    00000141: 	leaq	DATAat0x141d4(%rip), %r15
    00000148: 	movsd	%xmm5, (%rsp)
    0000014d: 	testl	%ecx, %ecx
    0000014f: 	jle	.Ltmp1791 # Offset: 335
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp1794:
    00000158: 	movq	%rbp, %rax
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	nop # Size: 1
.Ltmp1792:
    00000160: 	paddd	(%rax), %xmm0
    00000164: 	addq	$0x10, %rax
    00000168: 	cmpq	%rax, %r12
    0000016b: 	jne	.Ltmp1792 # Offset: 363
    0000016d: 	movdqa	%xmm0, %xmm1
    00000171: 	psrldq	$0x8, %xmm1
    00000176: 	paddd	%xmm1, %xmm0
    0000017a: 	movsd	(%rsp), %xmm1
    0000017f: 	mulsd	init_value(%rip), %xmm1
    00000187: 	cvttsd2si	%xmm1, %edx
    0000018b: 	movdqa	%xmm0, %xmm1
    0000018f: 	psrldq	$0x4, %xmm1
    00000194: 	paddd	%xmm1, %xmm0
    00000198: 	movd	%xmm0, %eax
    0000019c: 	cmpl	%eax, %edx
    0000019e: 	je	.Ltmp1793 # Offset: 414
    000001a0: 	movq	0x9d40(%rsp), %rdx
    000001a8: 	movq	%r15, %rsi
    000001ab: 	movl	$0x1, %edi
    000001b0: 	xorl	%eax, %eax
    000001b2: 	callq	__printf_chk@PLT # Offset: 434
    000001b7: 	movl	iterations(%rip), %ecx
.Ltmp1793:
    000001bd: 	addl	$0x1, %ebx
    000001c0: 	cmpl	%ecx, %ebx
    000001c2: 	jl	.Ltmp1794 # Offset: 450
.Ltmp1791:
    000001c4: 	callq	clock@PLT # Offset: 452
    000001c9: 	movq	0x10(%rsp), %rdi
    000001ce: 	pxor	%xmm0, %xmm0
    000001d2: 	movq	%rax, end_time(%rip)
    000001d9: 	subq	start_time(%rip), %rax
    000001e0: 	cvtsi2sd	%rax, %xmm0
    000001e5: 	divsd	DATAat0x14868(%rip), %xmm0
    000001ed: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 493
    000001f2: 	movq	0x9d40(%rsp), %rdi
    000001fa: 	leaq	0x9d50(%rsp), %rax
    00000202: 	movq	%rax, 0x8(%rsp)
    00000207: 	cmpq	%rax, %rdi
    0000020a: 	je	.Ltmp1795 # Offset: 522
    0000020c: 	movq	0x9d50(%rsp), %rax
    00000214: 	leaq	0x1(%rax), %rsi
    00000218: 	callq	_ZdlPvm@PLT # Offset: 536
.Ltmp1795:
    0000021d: 	movq	0x28(%rsp), %rsi
    00000222: 	movq	0x10(%rsp), %rdi
    00000227: 	leaq	DATAat0x141ff(%rip), %rdx
    0000022e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 558
    00000233: 	callq	clock@PLT # Offset: 563
    00000238: 	movsd	DATAat0x14878(%rip), %xmm6
    00000240: 	xorl	%ebx, %ebx
    00000242: 	movl	iterations(%rip), %ecx
    00000248: 	movq	%rax, start_time(%rip)
    0000024f: 	leaq	DATAat0x141d4(%rip), %r15
    00000256: 	movsd	%xmm6, (%rsp)
    0000025b: 	testl	%ecx, %ecx
    0000025d: 	jle	.Ltmp1796 # Offset: 605
    0000025f: 	nop # Size: 1
.Ltmp1799:
    00000260: 	movq	%rbp, %rax
    00000263: 	pxor	%xmm0, %xmm0
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1797:
    00000270: 	paddd	(%rax), %xmm0
    00000274: 	addq	$0x10, %rax
    00000278: 	cmpq	%rax, %r12
    0000027b: 	jne	.Ltmp1797 # Offset: 635
    0000027d: 	movdqa	%xmm0, %xmm1
    00000281: 	psrldq	$0x8, %xmm1
    00000286: 	paddd	%xmm1, %xmm0
    0000028a: 	movsd	(%rsp), %xmm1
    0000028f: 	mulsd	init_value(%rip), %xmm1
    00000297: 	cvttsd2si	%xmm1, %edx
    0000029b: 	movdqa	%xmm0, %xmm1
    0000029f: 	psrldq	$0x4, %xmm1
    000002a4: 	paddd	%xmm1, %xmm0
    000002a8: 	movd	%xmm0, %eax
    000002ac: 	cmpl	%eax, %edx
    000002ae: 	je	.Ltmp1798 # Offset: 686
    000002b0: 	movq	0x9d40(%rsp), %rdx
    000002b8: 	movq	%r15, %rsi
    000002bb: 	movl	$0x1, %edi
    000002c0: 	xorl	%eax, %eax
    000002c2: 	callq	__printf_chk@PLT # Offset: 706
    000002c7: 	movl	iterations(%rip), %ecx
.Ltmp1798:
    000002cd: 	addl	$0x1, %ebx
    000002d0: 	cmpl	%ecx, %ebx
    000002d2: 	jl	.Ltmp1799 # Offset: 722
.Ltmp1796:
    000002d4: 	callq	clock@PLT # Offset: 724
    000002d9: 	movq	0x10(%rsp), %rdi
    000002de: 	pxor	%xmm0, %xmm0
    000002e2: 	movq	%rax, end_time(%rip)
    000002e9: 	subq	start_time(%rip), %rax
    000002f0: 	cvtsi2sd	%rax, %xmm0
    000002f5: 	divsd	DATAat0x14868(%rip), %xmm0
    000002fd: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 765
    00000302: 	movq	0x9d40(%rsp), %rdi
    0000030a: 	cmpq	0x8(%rsp), %rdi
    0000030f: 	je	.Ltmp1800 # Offset: 783
    00000311: 	movq	0x9d50(%rsp), %rax
    00000319: 	leaq	0x1(%rax), %rsi
    0000031d: 	callq	_ZdlPvm@PLT # Offset: 797
.Ltmp1800:
    00000322: 	movq	0x28(%rsp), %rsi
    00000327: 	movq	0x10(%rsp), %rdi
    0000032c: 	leaq	DATAat0x14310(%rip), %rdx
    00000333: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 819
    00000338: 	callq	clock@PLT # Offset: 824
    0000033d: 	movsd	DATAat0x14878(%rip), %xmm7
    00000345: 	xorl	%ebx, %ebx
    00000347: 	movl	iterations(%rip), %ecx
    0000034d: 	movq	%rax, start_time(%rip)
    00000354: 	leaq	DATAat0x141d4(%rip), %r15
    0000035b: 	movsd	%xmm7, (%rsp)
    00000360: 	testl	%ecx, %ecx
    00000362: 	jle	.Ltmp1801 # Offset: 866
    00000364: 	nopl	(%rax) # Size: 4
.Ltmp1804:
    00000368: 	movq	%r12, %rax
    0000036b: 	pxor	%xmm0, %xmm0
    0000036f: 	nop # Size: 1
.Ltmp1802:
    00000370: 	paddd	(%rax), %xmm0
    00000374: 	addq	$0x10, %rax
    00000378: 	cmpq	%rax, %r13
    0000037b: 	jne	.Ltmp1802 # Offset: 891
    0000037d: 	movdqa	%xmm0, %xmm1
    00000381: 	psrldq	$0x8, %xmm1
    00000386: 	paddd	%xmm1, %xmm0
    0000038a: 	movsd	(%rsp), %xmm1
    0000038f: 	mulsd	init_value(%rip), %xmm1
    00000397: 	cvttsd2si	%xmm1, %edx
    0000039b: 	movdqa	%xmm0, %xmm1
    0000039f: 	psrldq	$0x4, %xmm1
    000003a4: 	paddd	%xmm1, %xmm0
    000003a8: 	movd	%xmm0, %eax
    000003ac: 	cmpl	%eax, %edx
    000003ae: 	je	.Ltmp1803 # Offset: 942
    000003b0: 	movq	0x9d40(%rsp), %rdx
    000003b8: 	movq	%r15, %rsi
    000003bb: 	movl	$0x1, %edi
    000003c0: 	xorl	%eax, %eax
    000003c2: 	callq	__printf_chk@PLT # Offset: 962
    000003c7: 	movl	iterations(%rip), %ecx
.Ltmp1803:
    000003cd: 	addl	$0x1, %ebx
    000003d0: 	cmpl	%ecx, %ebx
    000003d2: 	jl	.Ltmp1804 # Offset: 978
.Ltmp1801:
    000003d4: 	callq	clock@PLT # Offset: 980
    000003d9: 	movq	0x10(%rsp), %rdi
    000003de: 	pxor	%xmm0, %xmm0
    000003e2: 	movq	%rax, end_time(%rip)
    000003e9: 	subq	start_time(%rip), %rax
    000003f0: 	cvtsi2sd	%rax, %xmm0
    000003f5: 	divsd	DATAat0x14868(%rip), %xmm0
    000003fd: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1021
    00000402: 	movq	0x9d40(%rsp), %rdi
    0000040a: 	cmpq	0x8(%rsp), %rdi
    0000040f: 	je	.Ltmp1805 # Offset: 1039
    00000411: 	movq	0x9d50(%rsp), %rax
    00000419: 	leaq	0x1(%rax), %rsi
    0000041d: 	callq	_ZdlPvm@PLT # Offset: 1053
.Ltmp1805:
    00000422: 	movq	0x28(%rsp), %rsi
    00000427: 	movq	0x10(%rsp), %rdi
    0000042c: 	leaq	DATAat0x14338(%rip), %rdx
    00000433: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1075
    00000438: 	callq	clock@PLT # Offset: 1080
    0000043d: 	movsd	DATAat0x14878(%rip), %xmm2
    00000445: 	xorl	%ebx, %ebx
    00000447: 	movl	iterations(%rip), %ecx
    0000044d: 	movq	%rax, start_time(%rip)
    00000454: 	leaq	DATAat0x141d4(%rip), %r15
    0000045b: 	movsd	%xmm2, (%rsp)
    00000460: 	testl	%ecx, %ecx
    00000462: 	jle	.Ltmp1806 # Offset: 1122
    00000464: 	nopl	(%rax) # Size: 4
.Ltmp1809:
    00000468: 	movq	%r12, %rax
    0000046b: 	pxor	%xmm0, %xmm0
    0000046f: 	nop # Size: 1
.Ltmp1807:
    00000470: 	paddd	(%rax), %xmm0
    00000474: 	addq	$0x10, %rax
    00000478: 	cmpq	%rax, %r13
    0000047b: 	jne	.Ltmp1807 # Offset: 1147
    0000047d: 	movdqa	%xmm0, %xmm1
    00000481: 	psrldq	$0x8, %xmm1
    00000486: 	paddd	%xmm1, %xmm0
    0000048a: 	movsd	(%rsp), %xmm1
    0000048f: 	mulsd	init_value(%rip), %xmm1
    00000497: 	cvttsd2si	%xmm1, %edx
    0000049b: 	movdqa	%xmm0, %xmm1
    0000049f: 	psrldq	$0x4, %xmm1
    000004a4: 	paddd	%xmm1, %xmm0
    000004a8: 	movd	%xmm0, %eax
    000004ac: 	cmpl	%eax, %edx
    000004ae: 	je	.Ltmp1808 # Offset: 1198
    000004b0: 	movq	0x9d40(%rsp), %rdx
    000004b8: 	movq	%r15, %rsi
    000004bb: 	movl	$0x1, %edi
    000004c0: 	xorl	%eax, %eax
    000004c2: 	callq	__printf_chk@PLT # Offset: 1218
    000004c7: 	movl	iterations(%rip), %ecx
.Ltmp1808:
    000004cd: 	addl	$0x1, %ebx
    000004d0: 	cmpl	%ecx, %ebx
    000004d2: 	jl	.Ltmp1809 # Offset: 1234
.Ltmp1806:
    000004d4: 	callq	clock@PLT # Offset: 1236
    000004d9: 	movq	0x10(%rsp), %rdi
    000004de: 	pxor	%xmm0, %xmm0
    000004e2: 	movq	%rax, end_time(%rip)
    000004e9: 	subq	start_time(%rip), %rax
    000004f0: 	cvtsi2sd	%rax, %xmm0
    000004f5: 	divsd	DATAat0x14868(%rip), %xmm0
    000004fd: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1277
    00000502: 	movq	0x9d40(%rsp), %rdi
    0000050a: 	cmpq	0x8(%rsp), %rdi
    0000050f: 	je	.Ltmp1810 # Offset: 1295
    00000511: 	movq	0x9d50(%rsp), %rax
    00000519: 	leaq	0x1(%rax), %rsi
    0000051d: 	callq	_ZdlPvm@PLT # Offset: 1309
.Ltmp1810:
    00000522: 	movq	0x28(%rsp), %rsi
    00000527: 	movq	0x10(%rsp), %rdi
    0000052c: 	leaq	DATAat0x14368(%rip), %rdx
    00000533: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1331
    00000538: 	callq	clock@PLT # Offset: 1336
    0000053d: 	movsd	DATAat0x14878(%rip), %xmm3
    00000545: 	xorl	%ebx, %ebx
    00000547: 	movl	iterations(%rip), %ecx
    0000054d: 	movq	%rax, start_time(%rip)
    00000554: 	leaq	DATAat0x141d4(%rip), %r15
    0000055b: 	movsd	%xmm3, (%rsp)
    00000560: 	testl	%ecx, %ecx
    00000562: 	jle	.Ltmp1811 # Offset: 1378
    00000564: 	nopl	(%rax) # Size: 4
.Ltmp1814:
    00000568: 	movq	%r13, %rax
    0000056b: 	pxor	%xmm0, %xmm0
    0000056f: 	nop # Size: 1
.Ltmp1812:
    00000570: 	paddd	(%rax), %xmm0
    00000574: 	addq	$0x10, %rax
    00000578: 	cmpq	%rax, %r14
    0000057b: 	jne	.Ltmp1812 # Offset: 1403
    0000057d: 	movdqa	%xmm0, %xmm1
    00000581: 	psrldq	$0x8, %xmm1
    00000586: 	paddd	%xmm1, %xmm0
    0000058a: 	movsd	(%rsp), %xmm1
    0000058f: 	mulsd	init_value(%rip), %xmm1
    00000597: 	cvttsd2si	%xmm1, %edx
    0000059b: 	movdqa	%xmm0, %xmm1
    0000059f: 	psrldq	$0x4, %xmm1
    000005a4: 	paddd	%xmm1, %xmm0
    000005a8: 	movd	%xmm0, %eax
    000005ac: 	cmpl	%eax, %edx
    000005ae: 	je	.Ltmp1813 # Offset: 1454
    000005b0: 	movq	0x9d40(%rsp), %rdx
    000005b8: 	movq	%r15, %rsi
    000005bb: 	movl	$0x1, %edi
    000005c0: 	xorl	%eax, %eax
    000005c2: 	callq	__printf_chk@PLT # Offset: 1474
    000005c7: 	movl	iterations(%rip), %ecx
.Ltmp1813:
    000005cd: 	addl	$0x1, %ebx
    000005d0: 	cmpl	%ecx, %ebx
    000005d2: 	jl	.Ltmp1814 # Offset: 1490
.Ltmp1811:
    000005d4: 	callq	clock@PLT # Offset: 1492
    000005d9: 	movq	0x10(%rsp), %rdi
    000005de: 	pxor	%xmm0, %xmm0
    000005e2: 	movq	%rax, end_time(%rip)
    000005e9: 	subq	start_time(%rip), %rax
    000005f0: 	cvtsi2sd	%rax, %xmm0
    000005f5: 	divsd	DATAat0x14868(%rip), %xmm0
    000005fd: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1533
    00000602: 	movq	0x9d40(%rsp), %rdi
    0000060a: 	cmpq	0x8(%rsp), %rdi
    0000060f: 	je	.Ltmp1815 # Offset: 1551
    00000611: 	movq	0x9d50(%rsp), %rax
    00000619: 	leaq	0x1(%rax), %rsi
    0000061d: 	callq	_ZdlPvm@PLT # Offset: 1565
.Ltmp1815:
    00000622: 	movq	0x28(%rsp), %rsi
    00000627: 	movq	0x10(%rsp), %rdi
    0000062c: 	leaq	DATAat0x14390(%rip), %rdx
    00000633: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1587
    00000638: 	callq	clock@PLT # Offset: 1592
    0000063d: 	movsd	DATAat0x14878(%rip), %xmm4
    00000645: 	xorl	%ebx, %ebx
    00000647: 	movl	iterations(%rip), %ecx
    0000064d: 	movq	%rax, start_time(%rip)
    00000654: 	leaq	DATAat0x141d4(%rip), %r15
    0000065b: 	movsd	%xmm4, (%rsp)
    00000660: 	testl	%ecx, %ecx
    00000662: 	jle	.Ltmp1816 # Offset: 1634
    00000664: 	nopl	(%rax) # Size: 4
.Ltmp1819:
    00000668: 	movq	%r13, %rax
    0000066b: 	pxor	%xmm0, %xmm0
    0000066f: 	nop # Size: 1
.Ltmp1817:
    00000670: 	paddd	(%rax), %xmm0
    00000674: 	addq	$0x10, %rax
    00000678: 	cmpq	%rax, %r14
    0000067b: 	jne	.Ltmp1817 # Offset: 1659
    0000067d: 	movdqa	%xmm0, %xmm1
    00000681: 	psrldq	$0x8, %xmm1
    00000686: 	paddd	%xmm1, %xmm0
    0000068a: 	movsd	(%rsp), %xmm1
    0000068f: 	mulsd	init_value(%rip), %xmm1
    00000697: 	cvttsd2si	%xmm1, %edx
    0000069b: 	movdqa	%xmm0, %xmm1
    0000069f: 	psrldq	$0x4, %xmm1
    000006a4: 	paddd	%xmm1, %xmm0
    000006a8: 	movd	%xmm0, %eax
    000006ac: 	cmpl	%eax, %edx
    000006ae: 	je	.Ltmp1818 # Offset: 1710
    000006b0: 	movq	0x9d40(%rsp), %rdx
    000006b8: 	movq	%r15, %rsi
    000006bb: 	movl	$0x1, %edi
    000006c0: 	xorl	%eax, %eax
    000006c2: 	callq	__printf_chk@PLT # Offset: 1730
    000006c7: 	movl	iterations(%rip), %ecx
.Ltmp1818:
    000006cd: 	addl	$0x1, %ebx
    000006d0: 	cmpl	%ecx, %ebx
    000006d2: 	jl	.Ltmp1819 # Offset: 1746
.Ltmp1816:
    000006d4: 	callq	clock@PLT # Offset: 1748
    000006d9: 	movq	0x10(%rsp), %rdi
    000006de: 	pxor	%xmm0, %xmm0
    000006e2: 	movq	%rax, end_time(%rip)
    000006e9: 	subq	start_time(%rip), %rax
    000006f0: 	cvtsi2sd	%rax, %xmm0
    000006f5: 	divsd	DATAat0x14868(%rip), %xmm0
    000006fd: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1789
    00000702: 	movq	0x9d40(%rsp), %rdi
    0000070a: 	cmpq	0x8(%rsp), %rdi
    0000070f: 	je	.Ltmp1820 # Offset: 1807
    00000711: 	movq	0x9d50(%rsp), %rax
    00000719: 	leaq	0x1(%rax), %rsi
    0000071d: 	callq	_ZdlPvm@PLT # Offset: 1821
.Ltmp1820:
    00000722: 	movq	0x28(%rsp), %rsi
    00000727: 	movq	0x10(%rsp), %rdi
    0000072c: 	leaq	DATAat0x143c0(%rip), %rdx
    00000733: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1843
    00000738: 	callq	clock@PLT # Offset: 1848
    0000073d: 	movsd	DATAat0x14878(%rip), %xmm5
    00000745: 	xorl	%ebx, %ebx
    00000747: 	movl	iterations(%rip), %ecx
    0000074d: 	movq	%rax, start_time(%rip)
    00000754: 	leaq	DATAat0x141d4(%rip), %r15
    0000075b: 	movsd	%xmm5, (%rsp)
    00000760: 	testl	%ecx, %ecx
    00000762: 	jle	.Ltmp1821 # Offset: 1890
    00000764: 	nopl	(%rax) # Size: 4
.Ltmp1824:
    00000768: 	movq	%rbp, %rax
    0000076b: 	pxor	%xmm0, %xmm0
    0000076f: 	nop # Size: 1
.Ltmp1822:
    00000770: 	paddd	(%rax), %xmm0
    00000774: 	addq	$0x10, %rax
    00000778: 	cmpq	%rax, %r12
    0000077b: 	jne	.Ltmp1822 # Offset: 1915
    0000077d: 	movdqa	%xmm0, %xmm1
    00000781: 	psrldq	$0x8, %xmm1
    00000786: 	paddd	%xmm1, %xmm0
    0000078a: 	movsd	(%rsp), %xmm1
    0000078f: 	mulsd	init_value(%rip), %xmm1
    00000797: 	cvttsd2si	%xmm1, %edx
    0000079b: 	movdqa	%xmm0, %xmm1
    0000079f: 	psrldq	$0x4, %xmm1
    000007a4: 	paddd	%xmm1, %xmm0
    000007a8: 	movd	%xmm0, %eax
    000007ac: 	cmpl	%eax, %edx
    000007ae: 	je	.Ltmp1823 # Offset: 1966
    000007b0: 	movq	0x9d40(%rsp), %rdx
    000007b8: 	movq	%r15, %rsi
    000007bb: 	movl	$0x1, %edi
    000007c0: 	xorl	%eax, %eax
    000007c2: 	callq	__printf_chk@PLT # Offset: 1986
    000007c7: 	movl	iterations(%rip), %ecx
.Ltmp1823:
    000007cd: 	addl	$0x1, %ebx
    000007d0: 	cmpl	%ecx, %ebx
    000007d2: 	jl	.Ltmp1824 # Offset: 2002
.Ltmp1821:
    000007d4: 	callq	clock@PLT # Offset: 2004
    000007d9: 	movq	0x10(%rsp), %rdi
    000007de: 	pxor	%xmm0, %xmm0
    000007e2: 	movq	%rax, end_time(%rip)
    000007e9: 	subq	start_time(%rip), %rax
    000007f0: 	cvtsi2sd	%rax, %xmm0
    000007f5: 	divsd	DATAat0x14868(%rip), %xmm0
    000007fd: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2045
    00000802: 	movq	0x9d40(%rsp), %rdi
    0000080a: 	cmpq	0x8(%rsp), %rdi
    0000080f: 	je	.Ltmp1825 # Offset: 2063
    00000811: 	movq	0x9d50(%rsp), %rax
    00000819: 	leaq	0x1(%rax), %rsi
    0000081d: 	callq	_ZdlPvm@PLT # Offset: 2077
.Ltmp1825:
    00000822: 	movq	0x28(%rsp), %rsi
    00000827: 	movq	0x10(%rsp), %rdi
    0000082c: 	leaq	DATAat0x143e8(%rip), %rdx
    00000833: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2099
    00000838: 	callq	clock@PLT # Offset: 2104
    0000083d: 	movsd	DATAat0x14878(%rip), %xmm6
    00000845: 	xorl	%ebx, %ebx
    00000847: 	movl	iterations(%rip), %ecx
    0000084d: 	movq	%rax, start_time(%rip)
    00000854: 	leaq	DATAat0x141d4(%rip), %r15
    0000085b: 	movsd	%xmm6, (%rsp)
    00000860: 	testl	%ecx, %ecx
    00000862: 	jle	.Ltmp1826 # Offset: 2146
    00000864: 	nopl	(%rax) # Size: 4
.Ltmp1829:
    00000868: 	movq	%rbp, %rax
    0000086b: 	pxor	%xmm0, %xmm0
    0000086f: 	nop # Size: 1
.Ltmp1827:
    00000870: 	paddd	(%rax), %xmm0
    00000874: 	addq	$0x10, %rax
    00000878: 	cmpq	%rax, %r12
    0000087b: 	jne	.Ltmp1827 # Offset: 2171
    0000087d: 	movdqa	%xmm0, %xmm1
    00000881: 	psrldq	$0x8, %xmm1
    00000886: 	paddd	%xmm1, %xmm0
    0000088a: 	movsd	(%rsp), %xmm1
    0000088f: 	mulsd	init_value(%rip), %xmm1
    00000897: 	cvttsd2si	%xmm1, %edx
    0000089b: 	movdqa	%xmm0, %xmm1
    0000089f: 	psrldq	$0x4, %xmm1
    000008a4: 	paddd	%xmm1, %xmm0
    000008a8: 	movd	%xmm0, %eax
    000008ac: 	cmpl	%eax, %edx
    000008ae: 	je	.Ltmp1828 # Offset: 2222
    000008b0: 	movq	0x9d40(%rsp), %rdx
    000008b8: 	movq	%r15, %rsi
    000008bb: 	movl	$0x1, %edi
    000008c0: 	xorl	%eax, %eax
    000008c2: 	callq	__printf_chk@PLT # Offset: 2242
    000008c7: 	movl	iterations(%rip), %ecx
.Ltmp1828:
    000008cd: 	addl	$0x1, %ebx
    000008d0: 	cmpl	%ecx, %ebx
    000008d2: 	jl	.Ltmp1829 # Offset: 2258
.Ltmp1826:
    000008d4: 	callq	clock@PLT # Offset: 2260
    000008d9: 	movq	0x10(%rsp), %rdi
    000008de: 	pxor	%xmm0, %xmm0
    000008e2: 	movq	%rax, end_time(%rip)
    000008e9: 	subq	start_time(%rip), %rax
    000008f0: 	cvtsi2sd	%rax, %xmm0
    000008f5: 	divsd	DATAat0x14868(%rip), %xmm0
    000008fd: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2301
    00000902: 	movq	0x9d40(%rsp), %rdi
    0000090a: 	cmpq	0x8(%rsp), %rdi
    0000090f: 	je	.Ltmp1830 # Offset: 2319
    00000911: 	movq	0x9d50(%rsp), %rax
    00000919: 	leaq	0x1(%rax), %rsi
    0000091d: 	callq	_ZdlPvm@PLT # Offset: 2333
.Ltmp1830:
    00000922: 	movq	0x28(%rsp), %rsi
    00000927: 	movq	0x10(%rsp), %rdi
    0000092c: 	leaq	DATAat0x14418(%rip), %rdx
    00000933: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2355
    00000938: 	callq	clock@PLT # Offset: 2360
    0000093d: 	movsd	DATAat0x14878(%rip), %xmm7
    00000945: 	xorl	%ebx, %ebx
    00000947: 	movl	iterations(%rip), %ecx
    0000094d: 	movq	%rax, start_time(%rip)
    00000954: 	leaq	DATAat0x141d4(%rip), %r15
    0000095b: 	movsd	%xmm7, (%rsp)
    00000960: 	testl	%ecx, %ecx
    00000962: 	jle	.Ltmp1831 # Offset: 2402
    00000964: 	nopl	(%rax) # Size: 4
.Ltmp1834:
    00000968: 	movq	%r12, %rax
    0000096b: 	pxor	%xmm0, %xmm0
    0000096f: 	nop # Size: 1
.Ltmp1832:
    00000970: 	paddd	(%rax), %xmm0
    00000974: 	addq	$0x10, %rax
    00000978: 	cmpq	%rax, %r13
    0000097b: 	jne	.Ltmp1832 # Offset: 2427
    0000097d: 	movdqa	%xmm0, %xmm1
    00000981: 	psrldq	$0x8, %xmm1
    00000986: 	paddd	%xmm1, %xmm0
    0000098a: 	movsd	(%rsp), %xmm1
    0000098f: 	mulsd	init_value(%rip), %xmm1
    00000997: 	cvttsd2si	%xmm1, %edx
    0000099b: 	movdqa	%xmm0, %xmm1
    0000099f: 	psrldq	$0x4, %xmm1
    000009a4: 	paddd	%xmm1, %xmm0
    000009a8: 	movd	%xmm0, %eax
    000009ac: 	cmpl	%eax, %edx
    000009ae: 	je	.Ltmp1833 # Offset: 2478
    000009b0: 	movq	0x9d40(%rsp), %rdx
    000009b8: 	movq	%r15, %rsi
    000009bb: 	movl	$0x1, %edi
    000009c0: 	xorl	%eax, %eax
    000009c2: 	callq	__printf_chk@PLT # Offset: 2498
    000009c7: 	movl	iterations(%rip), %ecx
.Ltmp1833:
    000009cd: 	addl	$0x1, %ebx
    000009d0: 	cmpl	%ecx, %ebx
    000009d2: 	jl	.Ltmp1834 # Offset: 2514
.Ltmp1831:
    000009d4: 	callq	clock@PLT # Offset: 2516
    000009d9: 	movq	0x10(%rsp), %rdi
    000009de: 	pxor	%xmm0, %xmm0
    000009e2: 	movq	%rax, end_time(%rip)
    000009e9: 	subq	start_time(%rip), %rax
    000009f0: 	cvtsi2sd	%rax, %xmm0
    000009f5: 	divsd	DATAat0x14868(%rip), %xmm0
    000009fd: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2557
    00000a02: 	movq	0x9d40(%rsp), %rdi
    00000a0a: 	cmpq	0x8(%rsp), %rdi
    00000a0f: 	je	.Ltmp1835 # Offset: 2575
    00000a11: 	movq	0x9d50(%rsp), %rax
    00000a19: 	leaq	0x1(%rax), %rsi
    00000a1d: 	callq	_ZdlPvm@PLT # Offset: 2589
.Ltmp1835:
    00000a22: 	movq	0x28(%rsp), %rsi
    00000a27: 	leaq	0x80(%rsp), %rdi
    00000a2f: 	leaq	DATAat0x14219(%rip), %rdx
    00000a36: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2614
    00000a3b: 	movl	iterations(%rip), %edx
    00000a41: 	movl	$0x1, %r8d
    00000a47: 	movl	$0x1, %ecx
    00000a4c: 	movq	0x80(%rsp), %rdi
    00000a54: 	movl	$0x7d0, %esi
    00000a59: 	callq	_Z9summarizePKciiii # Offset: 2649
    00000a5e: 	movslq	iterations(%rip), %rax
    00000a65: 	leaq	0x7e00(%rsp), %r8
    00000a6d: 	movabsq	$0x5851f42d4c957f2d, %rdi
    00000a77: 	movabsq	$0x14057b7ef767814f, %rsi
    00000a81: 	movq	%r8, 0x8(%rsp)
    00000a86: 	movq	%rax, %rdx
    00000a89: 	imulq	$0x10624dd3, %rax, %rax
    00000a90: 	sarl	$0x1f, %edx
    00000a93: 	sarq	$0x26, %rax
    00000a97: 	subl	%edx, %eax
    00000a99: 	movq	%r14, %rdx
    00000a9c: 	movl	%eax, iterations(%rip)
    00000aa2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1836:
    00000aa8: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000aaf: 	addq	$0x4, %rdx
    00000ab3: 	imulq	%rdi, %rax
    00000ab7: 	addq	%rsi, %rax
    00000aba: 	movq	%rax, %rcx
    00000abd: 	movq	%rax, %r9
    00000ac0: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000ac7: 	shrq	$0x14, %rcx
    00000acb: 	shlq	$0x17, %r9
    00000acf: 	xorq	%r9, %rcx
    00000ad2: 	xorq	%rcx, %rax
    00000ad5: 	sarq	$0x3, %rax
    00000ad9: 	movl	%eax, -0x4(%rdx)
    00000adc: 	cmpq	%r8, %rdx
    00000adf: 	jne	.Ltmp1836 # Offset: 2783
    00000ae1: 	movq	0x8(%rsp), %rdi
    00000ae6: 	movl	$0x3e8, %ecx
    00000aeb: 	movq	%r14, %rsi
    00000aee: 	leaq	0xe0(%rsp), %rax
    00000af6: 	rep		movsq	(%rsi), %es:(%rdi)
    00000af9: 	movq	0x10(%rsp), %rdi
    00000afe: 	movl	$0x3e8, %ecx
    00000b03: 	movq	%r14, %rsi
    00000b06: 	rep		movsq	(%rsi), %es:(%rdi)
    00000b09: 	movq	0x28(%rsp), %rsi
    00000b0e: 	movq	%rax, %rdi
    00000b11: 	movq	%rax, (%rsp)
    00000b15: 	leaq	DATAat0x14231(%rip), %rdx
    00000b1c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2844
    00000b21: 	callq	clock@PLT # Offset: 2849
    00000b26: 	movl	iterations(%rip), %r10d
    00000b2d: 	xorl	%ebx, %ebx
    00000b2f: 	leaq	0x104(%rsp), %r15
    00000b37: 	movq	%rax, start_time(%rip)
    00000b3e: 	testl	%r10d, %r10d
    00000b41: 	jle	.Ltmp1837 # Offset: 2881
    00000b43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1841:
    00000b48: 	movl	$0x3e8, %ecx
    00000b4d: 	movq	%rbp, %rdi
    00000b50: 	movq	%r14, %rsi
    00000b53: 	rep		movsq	(%rsi), %es:(%rdi)
    00000b56: 	movq	%r15, %rdi
    00000b59: 	nopl	(%rax) # Size: 7
.Ltmp1840:
    00000b60: 	movl	(%rdi), %esi
    00000b62: 	movq	%rdi, %rax
    00000b65: 	nopl	(%rax) # Size: 3
.Ltmp1839:
    00000b68: 	movq	%rax, %rdx
    00000b6b: 	leaq	-0x4(%rax), %rax
    00000b6f: 	movl	-0x4(%rdx), %ecx
    00000b72: 	cmpl	%ecx, %esi
    00000b74: 	jge	.Ltmp1838 # Offset: 2932
    00000b76: 	movl	%ecx, 0x4(%rax)
    00000b79: 	cmpq	%rbp, %rax
    00000b7c: 	jne	.Ltmp1839 # Offset: 2940
    00000b7e: 	movq	%rbp, %rdx
.Ltmp1838:
    00000b81: 	addq	$0x4, %rdi
    00000b85: 	movl	%esi, (%rdx)
    00000b87: 	cmpq	%r12, %rdi
    00000b8a: 	jne	.Ltmp1840 # Offset: 2954
    00000b8c: 	movq	(%rsp), %rdx
    00000b90: 	movq	%r12, %rsi
    00000b93: 	movq	%rbp, %rdi
    00000b96: 	callq	_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2966
    00000b9b: 	addl	$0x1, %ebx
    00000b9e: 	cmpl	iterations(%rip), %ebx
    00000ba4: 	jl	.Ltmp1841 # Offset: 2980
.Ltmp1837:
    00000ba6: 	callq	clock@PLT # Offset: 2982
    00000bab: 	movq	(%rsp), %rdi
    00000baf: 	pxor	%xmm0, %xmm0
    00000bb3: 	movq	%rax, end_time(%rip)
    00000bba: 	subq	start_time(%rip), %rax
    00000bc1: 	cvtsi2sd	%rax, %xmm0
    00000bc6: 	divsd	DATAat0x14868(%rip), %xmm0
    00000bce: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3022
    00000bd3: 	movq	0xe0(%rsp), %rdi
    00000bdb: 	leaq	0xf0(%rsp), %rax
    00000be3: 	movq	%rax, 0x20(%rsp)
    00000be8: 	cmpq	%rax, %rdi
    00000beb: 	je	.Ltmp1842 # Offset: 3051
    00000bed: 	movq	0xf0(%rsp), %rax
    00000bf5: 	leaq	0x1(%rax), %rsi
    00000bf9: 	callq	_ZdlPvm@PLT # Offset: 3065
.Ltmp1842:
    00000bfe: 	movq	0x28(%rsp), %rsi
    00000c03: 	movq	(%rsp), %rdi
    00000c07: 	leaq	DATAat0x14249(%rip), %rdx
    00000c0e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3086
    00000c13: 	callq	clock@PLT # Offset: 3091
    00000c18: 	movl	iterations(%rip), %r8d
    00000c1f: 	xorl	%ebx, %ebx
    00000c21: 	leaq	0x104(%rsp), %r15
    00000c29: 	movq	%rax, start_time(%rip)
    00000c30: 	testl	%r8d, %r8d
    00000c33: 	jle	.Ltmp1843 # Offset: 3123
    00000c35: 	nopl	(%rax) # Size: 3
.Ltmp1851:
    00000c38: 	movl	$0x3e8, %ecx
    00000c3d: 	movq	%rbp, %rdi
    00000c40: 	movq	%r14, %rsi
    00000c43: 	rep		movsq	(%rsi), %es:(%rdi)
    00000c46: 	movq	%r15, %rdi
    00000c49: 	movq	%r15, %rsi
    00000c4c: 	nopl	(%rax) # Size: 4
.Ltmp1848:
    00000c50: 	movl	(%rsi), %ecx
    00000c52: 	cmpq	%rbp, %rsi
    00000c55: 	je	.Ltmp1844 # Offset: 3157
    00000c5b: 	movq	%rsi, %rax
    00000c5e: 	jmp	.Ltmp1845 # Offset: 3166
.Ltmp1847:
    00000c60: 	movl	%edx, (%rax)
    00000c62: 	subq	$0x4, %rax
    00000c66: 	cmpq	%rax, %rbp
    00000c69: 	je	.Ltmp1846 # Offset: 3177
.Ltmp1845:
    00000c6b: 	movl	-0x4(%rax), %edx
    00000c6e: 	cmpl	%edx, %ecx
    00000c70: 	jl	.Ltmp1847 # Offset: 3184
.Ltmp1846:
    00000c72: 	addq	$0x4, %rsi
    00000c76: 	movl	%ecx, (%rax)
    00000c78: 	cmpq	%rsi, %r12
    00000c7b: 	jne	.Ltmp1848 # Offset: 3195
    00000c7d: 	movl	0x100(%rsp), %eax
    00000c84: 	nopl	(%rax) # Size: 4
.Ltmp1850:
    00000c88: 	movl	%eax, %edx
    00000c8a: 	movl	(%rdi), %eax
    00000c8c: 	cmpl	%edx, %eax
    00000c8e: 	jl	.Ltmp1849 # Offset: 3214
    00000c94: 	addq	$0x4, %rdi
    00000c98: 	cmpq	%rdi, %r12
    00000c9b: 	jne	.Ltmp1850 # Offset: 3227
    00000c9d: 	addl	$0x1, %ebx
    00000ca0: 	cmpl	%r8d, %ebx
    00000ca3: 	jl	.Ltmp1851 # Offset: 3235
.Ltmp1843:
    00000ca5: 	callq	clock@PLT # Offset: 3237
    00000caa: 	movq	(%rsp), %rdi
    00000cae: 	pxor	%xmm0, %xmm0
    00000cb2: 	movq	%rax, end_time(%rip)
    00000cb9: 	subq	start_time(%rip), %rax
    00000cc0: 	cvtsi2sd	%rax, %xmm0
    00000cc5: 	divsd	DATAat0x14868(%rip), %xmm0
    00000ccd: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3277
    00000cd2: 	movq	0xe0(%rsp), %rdi
    00000cda: 	cmpq	0x20(%rsp), %rdi
    00000cdf: 	je	.Ltmp1852 # Offset: 3295
    00000ce1: 	movq	0xf0(%rsp), %rax
    00000ce9: 	leaq	0x1(%rax), %rsi
    00000ced: 	callq	_ZdlPvm@PLT # Offset: 3309
.Ltmp1852:
    00000cf2: 	movq	0x28(%rsp), %rsi
    00000cf7: 	movq	(%rsp), %rdi
    00000cfb: 	leaq	DATAat0x14458(%rip), %rdx
    00000d02: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3330
    00000d07: 	callq	clock@PLT # Offset: 3335
    00000d0c: 	movl	iterations(%rip), %r9d
    00000d13: 	xorl	%ebx, %ebx
    00000d15: 	leaq	0x2044(%rsp), %r15
    00000d1d: 	movq	%rax, start_time(%rip)
    00000d24: 	testl	%r9d, %r9d
    00000d27: 	jle	.Ltmp1853 # Offset: 3367
    00000d29: 	nopl	(%rax) # Size: 7
.Ltmp1857:
    00000d30: 	movq	0x8(%rsp), %rsi
    00000d35: 	movl	$0x3e8, %ecx
    00000d3a: 	movq	%r12, %rdi
    00000d3d: 	rep		movsq	(%rsi), %es:(%rdi)
    00000d40: 	movq	%r15, %rsi
    00000d43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1856:
    00000d48: 	movl	(%rsi), %ecx
    00000d4a: 	movq	%rsi, %rdx
    00000d4d: 	nopl	(%rax) # Size: 3
.Ltmp1855:
    00000d50: 	movq	%rdx, %rax
    00000d53: 	leaq	-0x4(%rdx), %rdx
    00000d57: 	cmpl	-0x4(%rax), %ecx
    00000d5a: 	jge	.Ltmp1854 # Offset: 3418
    00000d5c: 	movl	-0x4(%rax), %eax
    00000d5f: 	movl	%eax, 0x4(%rdx)
    00000d62: 	cmpq	%r12, %rdx
    00000d65: 	jne	.Ltmp1855 # Offset: 3429
    00000d67: 	movq	%r12, %rax
.Ltmp1854:
    00000d6a: 	addq	$0x4, %rsi
    00000d6e: 	movl	%ecx, (%rax)
    00000d70: 	cmpq	%r13, %rsi
    00000d73: 	jne	.Ltmp1856 # Offset: 3443
    00000d75: 	movq	(%rsp), %rdx
    00000d79: 	movq	%r13, %rsi
    00000d7c: 	movq	%r12, %rdi
    00000d7f: 	callq	_Z13verify_sortedIP12ValueWrapperIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3455
    00000d84: 	addl	$0x1, %ebx
    00000d87: 	cmpl	iterations(%rip), %ebx
    00000d8d: 	jl	.Ltmp1857 # Offset: 3469
.Ltmp1853:
    00000d8f: 	callq	clock@PLT # Offset: 3471
    00000d94: 	movq	(%rsp), %rdi
    00000d98: 	pxor	%xmm0, %xmm0
    00000d9c: 	movq	%rax, end_time(%rip)
    00000da3: 	subq	start_time(%rip), %rax
    00000daa: 	cvtsi2sd	%rax, %xmm0
    00000daf: 	divsd	DATAat0x14868(%rip), %xmm0
    00000db7: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3511
    00000dbc: 	movq	0xe0(%rsp), %rdi
    00000dc4: 	cmpq	0x20(%rsp), %rdi
    00000dc9: 	je	.Ltmp1858 # Offset: 3529
    00000dcb: 	movq	0xf0(%rsp), %rax
    00000dd3: 	leaq	0x1(%rax), %rsi
    00000dd7: 	callq	_ZdlPvm@PLT # Offset: 3543
.Ltmp1858:
    00000ddc: 	movq	0x28(%rsp), %rsi
    00000de1: 	movq	(%rsp), %rdi
    00000de5: 	leaq	DATAat0x14488(%rip), %rdx
    00000dec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3564
    00000df1: 	callq	clock@PLT # Offset: 3569
    00000df6: 	movl	iterations(%rip), %r8d
    00000dfd: 	xorl	%ebx, %ebx
    00000dff: 	leaq	0x2044(%rsp), %r15
    00000e07: 	movq	%rax, start_time(%rip)
    00000e0e: 	testl	%r8d, %r8d
    00000e11: 	jle	.Ltmp1859 # Offset: 3601
    00000e13: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1867:
    00000e18: 	movq	0x8(%rsp), %rsi
    00000e1d: 	movl	$0x3e8, %ecx
    00000e22: 	movq	%r12, %rdi
    00000e25: 	rep		movsq	(%rsi), %es:(%rdi)
    00000e28: 	movq	%r15, %rdi
    00000e2b: 	movq	%r15, %rsi
    00000e2e: 	nop # Size: 2
.Ltmp1864:
    00000e30: 	movl	(%rsi), %ecx
    00000e32: 	movq	%rsi, %rdx
    00000e35: 	cmpq	%r12, %rsi
    00000e38: 	jne	.Ltmp1860 # Offset: 3640
    00000e3a: 	jmp	.Ltmp1861 # Offset: 3642
    00000e3f: 	nop # Size: 1
.Ltmp1863:
    00000e40: 	movl	-0x4(%rax), %eax
    00000e43: 	movl	%eax, 0x4(%rdx)
    00000e46: 	cmpq	%r12, %rdx
    00000e49: 	je	.Ltmp1862 # Offset: 3657
.Ltmp1860:
    00000e4f: 	movq	%rdx, %rax
    00000e52: 	leaq	-0x4(%rdx), %rdx
    00000e56: 	cmpl	-0x4(%rax), %ecx
    00000e59: 	jl	.Ltmp1863 # Offset: 3673
    00000e5b: 	addq	$0x4, %rsi
    00000e5f: 	movl	%ecx, (%rax)
    00000e61: 	cmpq	%rsi, %r13
    00000e64: 	jne	.Ltmp1864 # Offset: 3684
.Ltmp2017:
    00000e66: 	movl	0x2040(%rsp), %eax
    00000e6d: 	nopl	(%rax) # Size: 3
.Ltmp1866:
    00000e70: 	movl	%eax, %edx
    00000e72: 	movl	(%rdi), %eax
    00000e74: 	cmpl	%edx, %eax
    00000e76: 	jl	.Ltmp1865 # Offset: 3702
    00000e7c: 	addq	$0x4, %rdi
    00000e80: 	cmpq	%rdi, %r13
    00000e83: 	jne	.Ltmp1866 # Offset: 3715
    00000e85: 	addl	$0x1, %ebx
    00000e88: 	cmpl	%r8d, %ebx
    00000e8b: 	jl	.Ltmp1867 # Offset: 3723
.Ltmp1859:
    00000e8d: 	callq	clock@PLT # Offset: 3725
    00000e92: 	movq	(%rsp), %rdi
    00000e96: 	pxor	%xmm0, %xmm0
    00000e9a: 	movq	%rax, end_time(%rip)
    00000ea1: 	subq	start_time(%rip), %rax
    00000ea8: 	cvtsi2sd	%rax, %xmm0
    00000ead: 	divsd	DATAat0x14868(%rip), %xmm0
    00000eb5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3765
    00000eba: 	movq	0xe0(%rsp), %rdi
    00000ec2: 	cmpq	0x20(%rsp), %rdi
    00000ec7: 	je	.Ltmp1868 # Offset: 3783
    00000ec9: 	movq	0xf0(%rsp), %rax
    00000ed1: 	leaq	0x1(%rax), %rsi
    00000ed5: 	callq	_ZdlPvm@PLT # Offset: 3797
.Ltmp1868:
    00000eda: 	movq	0x28(%rsp), %rsi
    00000edf: 	movq	(%rsp), %rdi
    00000ee3: 	leaq	DATAat0x144b8(%rip), %rdx
    00000eea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3818
    00000eef: 	callq	clock@PLT # Offset: 3823
    00000ef4: 	movl	iterations(%rip), %r8d
    00000efb: 	xorl	%ebx, %ebx
    00000efd: 	leaq	0x3f84(%rsp), %r15
    00000f05: 	movq	%rax, start_time(%rip)
    00000f0c: 	testl	%r8d, %r8d
    00000f0f: 	jle	.Ltmp1869 # Offset: 3855
    00000f11: 	nopl	(%rax) # Size: 7
.Ltmp1873:
    00000f18: 	movq	0x10(%rsp), %rsi
    00000f1d: 	movl	$0x3e8, %ecx
    00000f22: 	movq	%r13, %rdi
    00000f25: 	rep		movsq	(%rsi), %es:(%rdi)
    00000f28: 	movq	%r15, %rsi
    00000f2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1872:
    00000f30: 	movl	(%rsi), %ecx
    00000f32: 	movq	%rsi, %rdx
    00000f35: 	nopl	(%rax) # Size: 3
.Ltmp1871:
    00000f38: 	movq	%rdx, %rax
    00000f3b: 	leaq	-0x4(%rdx), %rdx
    00000f3f: 	cmpl	-0x4(%rax), %ecx
    00000f42: 	jge	.Ltmp1870 # Offset: 3906
    00000f44: 	movl	-0x4(%rax), %eax
    00000f47: 	movl	%eax, 0x4(%rdx)
    00000f4a: 	cmpq	%r13, %rdx
    00000f4d: 	jne	.Ltmp1871 # Offset: 3917
    00000f4f: 	movq	%r13, %rax
.Ltmp1870:
    00000f52: 	addq	$0x4, %rsi
    00000f56: 	movl	%ecx, (%rax)
    00000f58: 	cmpq	%r14, %rsi
    00000f5b: 	jne	.Ltmp1872 # Offset: 3931
    00000f5d: 	movq	(%rsp), %rdx
    00000f61: 	movq	%r14, %rsi
    00000f64: 	movq	%r13, %rdi
    00000f67: 	callq	_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IiEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3943
    00000f6c: 	addl	$0x1, %ebx
    00000f6f: 	cmpl	iterations(%rip), %ebx
    00000f75: 	jl	.Ltmp1873 # Offset: 3957
.Ltmp1869:
    00000f77: 	callq	clock@PLT # Offset: 3959
    00000f7c: 	movq	(%rsp), %rdi
    00000f80: 	pxor	%xmm0, %xmm0
    00000f84: 	movq	%rax, end_time(%rip)
    00000f8b: 	subq	start_time(%rip), %rax
    00000f92: 	cvtsi2sd	%rax, %xmm0
    00000f97: 	divsd	DATAat0x14868(%rip), %xmm0
    00000f9f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3999
    00000fa4: 	movq	0xe0(%rsp), %rdi
    00000fac: 	cmpq	0x20(%rsp), %rdi
    00000fb1: 	je	.Ltmp1874 # Offset: 4017
    00000fb3: 	movq	0xf0(%rsp), %rax
    00000fbb: 	leaq	0x1(%rax), %rsi
    00000fbf: 	callq	_ZdlPvm@PLT # Offset: 4031
.Ltmp1874:
    00000fc4: 	movq	0x28(%rsp), %rsi
    00000fc9: 	movq	(%rsp), %rdi
    00000fcd: 	leaq	DATAat0x144e8(%rip), %rdx
    00000fd4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4052
    00000fd9: 	callq	clock@PLT # Offset: 4057
    00000fde: 	movl	iterations(%rip), %r8d
    00000fe5: 	xorl	%ebx, %ebx
    00000fe7: 	leaq	0x3f84(%rsp), %r15
    00000fef: 	movq	%rax, start_time(%rip)
    00000ff6: 	testl	%r8d, %r8d
    00000ff9: 	jle	.Ltmp1875 # Offset: 4089
    00000fff: 	nop # Size: 1
.Ltmp1883:
    00001000: 	movq	0x10(%rsp), %rsi
    00001005: 	movl	$0x3e8, %ecx
    0000100a: 	movq	%r13, %rdi
    0000100d: 	rep		movsq	(%rsi), %es:(%rdi)
    00001010: 	movq	%r15, %rdi
    00001013: 	movq	%r15, %rsi
    00001016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1880:
    00001020: 	movl	(%rsi), %ecx
    00001022: 	movq	%rsi, %rdx
    00001025: 	cmpq	%r13, %rsi
    00001028: 	jne	.Ltmp1876 # Offset: 4136
    0000102a: 	jmp	.Ltmp1877 # Offset: 4138
    0000102f: 	nop # Size: 1
.Ltmp1879:
    00001030: 	movl	-0x4(%rax), %eax
    00001033: 	movl	%eax, 0x4(%rdx)
    00001036: 	cmpq	%r13, %rdx
    00001039: 	je	.Ltmp1878 # Offset: 4153
.Ltmp1876:
    0000103f: 	movq	%rdx, %rax
    00001042: 	leaq	-0x4(%rdx), %rdx
    00001046: 	cmpl	-0x4(%rax), %ecx
    00001049: 	jl	.Ltmp1879 # Offset: 4169
    0000104b: 	addq	$0x4, %rsi
    0000104f: 	movl	%ecx, (%rax)
    00001051: 	cmpq	%rsi, %r14
    00001054: 	jne	.Ltmp1880 # Offset: 4180
.Ltmp2016:
    00001056: 	movl	0x3f80(%rsp), %eax
    0000105d: 	nopl	(%rax) # Size: 3
.Ltmp1882:
    00001060: 	movl	%eax, %edx
    00001062: 	movl	(%rdi), %eax
    00001064: 	cmpl	%edx, %eax
    00001066: 	jl	.Ltmp1881 # Offset: 4198
    0000106c: 	addq	$0x4, %rdi
    00001070: 	cmpq	%rdi, %r14
    00001073: 	jne	.Ltmp1882 # Offset: 4211
    00001075: 	addl	$0x1, %ebx
    00001078: 	cmpl	%r8d, %ebx
    0000107b: 	jl	.Ltmp1883 # Offset: 4219
.Ltmp1875:
    0000107d: 	callq	clock@PLT # Offset: 4221
    00001082: 	movq	(%rsp), %rdi
    00001086: 	pxor	%xmm0, %xmm0
    0000108a: 	movq	%rax, end_time(%rip)
    00001091: 	subq	start_time(%rip), %rax
    00001098: 	cvtsi2sd	%rax, %xmm0
    0000109d: 	divsd	DATAat0x14868(%rip), %xmm0
    000010a5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4261
    000010aa: 	movq	0xe0(%rsp), %rdi
    000010b2: 	cmpq	0x20(%rsp), %rdi
    000010b7: 	je	.Ltmp1884 # Offset: 4279
    000010b9: 	movq	0xf0(%rsp), %rax
    000010c1: 	leaq	0x1(%rax), %rsi
    000010c5: 	callq	_ZdlPvm@PLT # Offset: 4293
.Ltmp1884:
    000010ca: 	movq	0x28(%rsp), %rsi
    000010cf: 	movq	(%rsp), %rdi
    000010d3: 	leaq	DATAat0x14520(%rip), %rdx
    000010da: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4314
    000010df: 	callq	clock@PLT # Offset: 4319
    000010e4: 	movl	iterations(%rip), %r8d
    000010eb: 	xorl	%ebx, %ebx
    000010ed: 	leaq	0x104(%rsp), %r15
    000010f5: 	movq	%rax, start_time(%rip)
    000010fc: 	testl	%r8d, %r8d
    000010ff: 	jle	.Ltmp1885 # Offset: 4351
    00001101: 	nopl	(%rax) # Size: 7
.Ltmp1893:
    00001108: 	movl	$0x3e8, %ecx
    0000110d: 	movq	%rbp, %rdi
    00001110: 	movq	%r14, %rsi
    00001113: 	rep		movsq	(%rsi), %es:(%rdi)
    00001116: 	movq	%r15, %rdi
    00001119: 	movq	%r15, %rsi
    0000111c: 	nopl	(%rax) # Size: 4
.Ltmp1890:
    00001120: 	movl	(%rsi), %ecx
    00001122: 	cmpq	%rbp, %rsi
    00001125: 	je	.Ltmp1886 # Offset: 4389
    0000112b: 	movq	%rsi, %rax
    0000112e: 	jmp	.Ltmp1887 # Offset: 4398
.Ltmp1889:
    00001130: 	movl	%edx, (%rax)
    00001132: 	subq	$0x4, %rax
    00001136: 	cmpq	%rax, %rbp
    00001139: 	je	.Ltmp1888 # Offset: 4409
.Ltmp1887:
    0000113b: 	movl	-0x4(%rax), %edx
    0000113e: 	cmpl	%edx, %ecx
    00001140: 	jl	.Ltmp1889 # Offset: 4416
.Ltmp1888:
    00001142: 	addq	$0x4, %rsi
    00001146: 	movl	%ecx, (%rax)
    00001148: 	cmpq	%rsi, %r12
    0000114b: 	jne	.Ltmp1890 # Offset: 4427
    0000114d: 	movl	0x100(%rsp), %eax
    00001154: 	nopl	(%rax) # Size: 4
.Ltmp1892:
    00001158: 	movl	%eax, %edx
    0000115a: 	movl	(%rdi), %eax
    0000115c: 	cmpl	%eax, %edx
    0000115e: 	jg	.Ltmp1891 # Offset: 4446
    00001164: 	addq	$0x4, %rdi
    00001168: 	cmpq	%r12, %rdi
    0000116b: 	jne	.Ltmp1892 # Offset: 4459
    0000116d: 	addl	$0x1, %ebx
    00001170: 	cmpl	%r8d, %ebx
    00001173: 	jl	.Ltmp1893 # Offset: 4467
.Ltmp1885:
    00001175: 	callq	clock@PLT # Offset: 4469
    0000117a: 	movq	(%rsp), %rdi
    0000117e: 	pxor	%xmm0, %xmm0
    00001182: 	movq	%rax, end_time(%rip)
    00001189: 	subq	start_time(%rip), %rax
    00001190: 	cvtsi2sd	%rax, %xmm0
    00001195: 	divsd	DATAat0x14868(%rip), %xmm0
    0000119d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4509
    000011a2: 	movq	0xe0(%rsp), %rdi
    000011aa: 	cmpq	0x20(%rsp), %rdi
    000011af: 	je	.Ltmp1894 # Offset: 4527
    000011b1: 	movq	0xf0(%rsp), %rax
    000011b9: 	leaq	0x1(%rax), %rsi
    000011bd: 	callq	_ZdlPvm@PLT # Offset: 4541
.Ltmp1894:
    000011c2: 	movq	0x28(%rsp), %rsi
    000011c7: 	movq	(%rsp), %rdi
    000011cb: 	leaq	DATAat0x14548(%rip), %rdx
    000011d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4562
    000011d7: 	callq	clock@PLT # Offset: 4567
    000011dc: 	movl	iterations(%rip), %r8d
    000011e3: 	xorl	%ebx, %ebx
    000011e5: 	leaq	0x104(%rsp), %r15
    000011ed: 	movq	%rax, start_time(%rip)
    000011f4: 	testl	%r8d, %r8d
    000011f7: 	jle	.Ltmp1895 # Offset: 4599
    000011f9: 	nopl	(%rax) # Size: 7
.Ltmp1903:
    00001200: 	movl	$0x3e8, %ecx
    00001205: 	movq	%rbp, %rdi
    00001208: 	movq	%r14, %rsi
    0000120b: 	rep		movsq	(%rsi), %es:(%rdi)
    0000120e: 	movq	%r15, %rdi
    00001211: 	movq	%r15, %rsi
    00001214: 	nopl	(%rax) # Size: 4
.Ltmp1900:
    00001218: 	movl	(%rsi), %ecx
    0000121a: 	cmpq	%rbp, %rsi
    0000121d: 	je	.Ltmp1896 # Offset: 4637
    00001223: 	movq	%rsi, %rax
    00001226: 	jmp	.Ltmp1897 # Offset: 4646
    00001228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1899:
    00001230: 	movl	%edx, (%rax)
    00001232: 	subq	$0x4, %rax
    00001236: 	cmpq	%rax, %rbp
    00001239: 	je	.Ltmp1898 # Offset: 4665
.Ltmp1897:
    0000123b: 	movl	-0x4(%rax), %edx
    0000123e: 	cmpl	%edx, %ecx
    00001240: 	jl	.Ltmp1899 # Offset: 4672
.Ltmp1898:
    00001242: 	addq	$0x4, %rsi
    00001246: 	movl	%ecx, (%rax)
    00001248: 	cmpq	%rsi, %r12
    0000124b: 	jne	.Ltmp1900 # Offset: 4683
    0000124d: 	movl	0x100(%rsp), %eax
    00001254: 	nopl	(%rax) # Size: 4
.Ltmp1902:
    00001258: 	movl	%eax, %edx
    0000125a: 	movl	(%rdi), %eax
    0000125c: 	cmpl	%edx, %eax
    0000125e: 	jl	.Ltmp1901 # Offset: 4702
    00001264: 	addq	$0x4, %rdi
    00001268: 	cmpq	%rdi, %r12
    0000126b: 	jne	.Ltmp1902 # Offset: 4715
    0000126d: 	addl	$0x1, %ebx
    00001270: 	cmpl	%r8d, %ebx
    00001273: 	jl	.Ltmp1903 # Offset: 4723
.Ltmp1895:
    00001275: 	callq	clock@PLT # Offset: 4725
    0000127a: 	movq	(%rsp), %rdi
    0000127e: 	pxor	%xmm0, %xmm0
    00001282: 	movq	%rax, end_time(%rip)
    00001289: 	subq	start_time(%rip), %rax
    00001290: 	cvtsi2sd	%rax, %xmm0
    00001295: 	divsd	DATAat0x14868(%rip), %xmm0
    0000129d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4765
    000012a2: 	movq	0xe0(%rsp), %rdi
    000012aa: 	cmpq	0x20(%rsp), %rdi
    000012af: 	je	.Ltmp1904 # Offset: 4783
    000012b1: 	movq	0xf0(%rsp), %rax
    000012b9: 	leaq	0x1(%rax), %rsi
    000012bd: 	callq	_ZdlPvm@PLT # Offset: 4797
.Ltmp1904:
    000012c2: 	movq	0x28(%rsp), %rsi
    000012c7: 	movq	(%rsp), %rdi
    000012cb: 	leaq	DATAat0x14578(%rip), %rdx
    000012d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4818
    000012d7: 	callq	clock@PLT # Offset: 4823
    000012dc: 	movl	iterations(%rip), %r8d
    000012e3: 	xorl	%ebx, %ebx
    000012e5: 	leaq	0x2044(%rsp), %r15
    000012ed: 	movq	%rax, start_time(%rip)
    000012f4: 	testl	%r8d, %r8d
    000012f7: 	jle	.Ltmp1905 # Offset: 4855
    000012fd: 	nopl	(%rax) # Size: 3
.Ltmp1913:
    00001300: 	movq	0x8(%rsp), %rsi
    00001305: 	movl	$0x3e8, %ecx
    0000130a: 	movq	%r12, %rdi
    0000130d: 	rep		movsq	(%rsi), %es:(%rdi)
    00001310: 	movq	%r15, %rdi
    00001313: 	movq	%r15, %rsi
    00001316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1910:
    00001320: 	movl	(%rsi), %ecx
    00001322: 	movq	%rsi, %rdx
    00001325: 	cmpq	%r12, %rsi
    00001328: 	jne	.Ltmp1906 # Offset: 4904
    0000132a: 	jmp	.Ltmp1907 # Offset: 4906
    0000132f: 	nop # Size: 1
.Ltmp1909:
    00001330: 	movl	-0x4(%rax), %eax
    00001333: 	movl	%eax, 0x4(%rdx)
    00001336: 	cmpq	%r12, %rdx
    00001339: 	je	.Ltmp1908 # Offset: 4921
.Ltmp1906:
    0000133f: 	movq	%rdx, %rax
    00001342: 	leaq	-0x4(%rdx), %rdx
    00001346: 	cmpl	-0x4(%rax), %ecx
    00001349: 	jl	.Ltmp1909 # Offset: 4937
    0000134b: 	addq	$0x4, %rsi
    0000134f: 	movl	%ecx, (%rax)
    00001351: 	cmpq	%rsi, %r13
    00001354: 	jne	.Ltmp1910 # Offset: 4948
.Ltmp2015:
    00001356: 	movl	0x2040(%rsp), %eax
    0000135d: 	nopl	(%rax) # Size: 3
.Ltmp1912:
    00001360: 	movl	%eax, %edx
    00001362: 	movl	(%rdi), %eax
    00001364: 	cmpl	%eax, %edx
    00001366: 	jg	.Ltmp1911 # Offset: 4966
    0000136c: 	addq	$0x4, %rdi
    00001370: 	cmpq	%r13, %rdi
    00001373: 	jne	.Ltmp1912 # Offset: 4979
    00001375: 	addl	$0x1, %ebx
    00001378: 	cmpl	%r8d, %ebx
    0000137b: 	jl	.Ltmp1913 # Offset: 4987
.Ltmp1905:
    0000137d: 	callq	clock@PLT # Offset: 4989
    00001382: 	movq	(%rsp), %rdi
    00001386: 	pxor	%xmm0, %xmm0
    0000138a: 	movq	%rax, end_time(%rip)
    00001391: 	subq	start_time(%rip), %rax
    00001398: 	cvtsi2sd	%rax, %xmm0
    0000139d: 	divsd	DATAat0x14868(%rip), %xmm0
    000013a5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5029
    000013aa: 	movq	0xe0(%rsp), %rdi
    000013b2: 	cmpq	0x20(%rsp), %rdi
    000013b7: 	je	.Ltmp1914 # Offset: 5047
    000013b9: 	movq	0xf0(%rsp), %rax
    000013c1: 	leaq	0x1(%rax), %rsi
    000013c5: 	callq	_ZdlPvm@PLT # Offset: 5061
.Ltmp1914:
    000013ca: 	movq	0x28(%rsp), %rbx
    000013cf: 	leaq	0xa0(%rsp), %rdi
    000013d7: 	leaq	DATAat0x14267(%rip), %rdx
    000013de: 	movq	%rbx, %rsi
    000013e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5089
    000013e6: 	movl	iterations(%rip), %edx
    000013ec: 	movl	$0x1, %r8d
    000013f2: 	movl	$0x1, %ecx
    000013f7: 	movq	0xa0(%rsp), %rdi
    000013ff: 	movl	$0x7d0, %esi
    00001404: 	callq	_Z9summarizePKciiii # Offset: 5124
    00001409: 	movq	(%rsp), %rdi
    0000140d: 	leaq	DATAat0x14283(%rip), %rdx
    00001414: 	movq	%rbx, %rsi
    00001417: 	shll	$0x3, iterations(%rip)
    0000141e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5150
    00001423: 	callq	clock@PLT # Offset: 5155
    00001428: 	movl	iterations(%rip), %edi
    0000142e: 	xorl	%ebx, %ebx
    00001430: 	leaq	0x100(%rsp), %r15
    00001438: 	movq	%rax, start_time(%rip)
    0000143f: 	testl	%edi, %edi
    00001441: 	jle	.Ltmp1915 # Offset: 5185
    00001443: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1916:
    00001448: 	movq	%rbp, %rdi
    0000144b: 	movl	$0x3e8, %ecx
    00001450: 	movq	%r14, %rsi
    00001453: 	movq	%r15, %rbp
    00001456: 	rep		movsq	(%rsi), %es:(%rdi)
    00001459: 	movq	%r12, %rsi
    0000145c: 	movq	%r15, %rdi
    0000145f: 	callq	_ZN9benchmark9quicksortIPiEEvT_S2_ # Offset: 5215
    00001464: 	movq	(%rsp), %rdx
    00001468: 	movq	%r12, %rsi
    0000146b: 	movq	%r15, %rdi
    0000146e: 	callq	_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5230
    00001473: 	addl	$0x1, %ebx
    00001476: 	cmpl	iterations(%rip), %ebx
    0000147c: 	jl	.Ltmp1916 # Offset: 5244
.Ltmp1915:
    0000147e: 	callq	clock@PLT # Offset: 5246
    00001483: 	movq	(%rsp), %rdi
    00001487: 	pxor	%xmm0, %xmm0
    0000148b: 	movq	%rax, end_time(%rip)
    00001492: 	subq	start_time(%rip), %rax
    00001499: 	cvtsi2sd	%rax, %xmm0
    0000149e: 	divsd	DATAat0x14868(%rip), %xmm0
    000014a6: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5286
    000014ab: 	movq	0xe0(%rsp), %rdi
    000014b3: 	cmpq	0x20(%rsp), %rdi
    000014b8: 	je	.Ltmp1917 # Offset: 5304
    000014ba: 	movq	0xf0(%rsp), %rax
    000014c2: 	leaq	0x1(%rax), %rsi
    000014c6: 	callq	_ZdlPvm@PLT # Offset: 5318
.Ltmp1917:
    000014cb: 	movq	0x28(%rsp), %rsi
    000014d0: 	movq	(%rsp), %rdi
    000014d4: 	leaq	DATAat0x14296(%rip), %rdx
    000014db: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5339
    000014e0: 	callq	clock@PLT # Offset: 5344
    000014e5: 	movl	iterations(%rip), %esi
    000014eb: 	xorl	%ebx, %ebx
    000014ed: 	leaq	0x104(%rsp), %r15
    000014f5: 	movq	%rax, start_time(%rip)
    000014fc: 	testl	%esi, %esi
    000014fe: 	jle	.Ltmp1918 # Offset: 5374
.Ltmp1921:
    00001500: 	movq	%rbp, %rdi
    00001503: 	movl	$0x3e8, %ecx
    00001508: 	movq	%r14, %rsi
    0000150b: 	rep		movsq	(%rsi), %es:(%rdi)
    0000150e: 	leaq	0x100(%rsp), %rbp
    00001516: 	movq	%r12, %rsi
    00001519: 	movq	%rbp, %rdi
    0000151c: 	callq	_ZN9benchmark9quicksortI14PointerWrapperIiEEEvT_S3_ # Offset: 5404
    00001521: 	movl	0x100(%rsp), %edx
    00001528: 	movq	%r15, %rax
    0000152b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1920:
    00001530: 	movl	%edx, %ecx
    00001532: 	movl	(%rax), %edx
    00001534: 	cmpl	%ecx, %edx
    00001536: 	jl	.Ltmp1919 # Offset: 5430
    0000153c: 	addq	$0x4, %rax
    00001540: 	cmpq	%r12, %rax
    00001543: 	jne	.Ltmp1920 # Offset: 5443
    00001545: 	addl	$0x1, %ebx
    00001548: 	cmpl	iterations(%rip), %ebx
    0000154e: 	jl	.Ltmp1921 # Offset: 5454
.Ltmp1918:
    00001550: 	callq	clock@PLT # Offset: 5456
    00001555: 	movq	(%rsp), %rdi
    00001559: 	pxor	%xmm0, %xmm0
    0000155d: 	movq	%rax, end_time(%rip)
    00001564: 	subq	start_time(%rip), %rax
    0000156b: 	cvtsi2sd	%rax, %xmm0
    00001570: 	divsd	DATAat0x14868(%rip), %xmm0
    00001578: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5496
    0000157d: 	movq	0xe0(%rsp), %rdi
    00001585: 	cmpq	0x20(%rsp), %rdi
    0000158a: 	je	.Ltmp1922 # Offset: 5514
    0000158c: 	movq	0xf0(%rsp), %rax
    00001594: 	leaq	0x1(%rax), %rsi
    00001598: 	callq	_ZdlPvm@PLT # Offset: 5528
.Ltmp1922:
    0000159d: 	movq	0x28(%rsp), %rsi
    000015a2: 	movq	(%rsp), %rdi
    000015a6: 	leaq	DATAat0x145b8(%rip), %rdx
    000015ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5549
    000015b2: 	callq	clock@PLT # Offset: 5554
    000015b7: 	movl	iterations(%rip), %ecx
    000015bd: 	xorl	%ebx, %ebx
    000015bf: 	leaq	0x2040(%rsp), %r15
    000015c7: 	movq	%rax, start_time(%rip)
    000015ce: 	testl	%ecx, %ecx
    000015d0: 	jle	.Ltmp1923 # Offset: 5584
    000015d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1924:
    000015d8: 	movq	0x8(%rsp), %rsi
    000015dd: 	movq	%r12, %rdi
    000015e0: 	movl	$0x3e8, %ecx
    000015e5: 	movq	%r15, %r12
    000015e8: 	rep		movsq	(%rsi), %es:(%rdi)
    000015eb: 	movq	%r13, %rsi
    000015ee: 	movq	%r15, %rdi
    000015f1: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIiEEEvT_S4_.part.0/1" # Offset: 5617
    000015f6: 	movq	(%rsp), %rdx
    000015fa: 	movq	%r13, %rsi
    000015fd: 	movq	%r15, %rdi
    00001600: 	callq	_Z13verify_sortedIP12ValueWrapperIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5632
    00001605: 	addl	$0x1, %ebx
    00001608: 	cmpl	iterations(%rip), %ebx
    0000160e: 	jl	.Ltmp1924 # Offset: 5646
.Ltmp1923:
    00001610: 	callq	clock@PLT # Offset: 5648
    00001615: 	movq	(%rsp), %rdi
    00001619: 	pxor	%xmm0, %xmm0
    0000161d: 	movq	%rax, end_time(%rip)
    00001624: 	subq	start_time(%rip), %rax
    0000162b: 	cvtsi2sd	%rax, %xmm0
    00001630: 	divsd	DATAat0x14868(%rip), %xmm0
    00001638: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5688
    0000163d: 	movq	0xe0(%rsp), %rdi
    00001645: 	cmpq	0x20(%rsp), %rdi
    0000164a: 	je	.Ltmp1925 # Offset: 5706
    0000164c: 	movq	0xf0(%rsp), %rax
    00001654: 	leaq	0x1(%rax), %rsi
    00001658: 	callq	_ZdlPvm@PLT # Offset: 5720
.Ltmp1925:
    0000165d: 	movq	0x28(%rsp), %rsi
    00001662: 	movq	(%rsp), %rdi
    00001666: 	leaq	DATAat0x145e0(%rip), %rdx
    0000166d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5741
    00001672: 	callq	clock@PLT # Offset: 5746
    00001677: 	movl	iterations(%rip), %edx
    0000167d: 	xorl	%ebx, %ebx
    0000167f: 	leaq	0x2044(%rsp), %r15
    00001687: 	movq	%rax, start_time(%rip)
    0000168e: 	testl	%edx, %edx
    00001690: 	jle	.Ltmp1926 # Offset: 5776
    00001692: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1929:
    00001698: 	movq	0x8(%rsp), %rsi
    0000169d: 	movq	%r12, %rdi
    000016a0: 	movl	$0x3e8, %ecx
    000016a5: 	leaq	0x2040(%rsp), %r12
    000016ad: 	rep		movsq	(%rsi), %es:(%rdi)
    000016b0: 	movq	%r13, %rsi
    000016b3: 	movq	%r12, %rdi
    000016b6: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIiEEEEvT_S5_ # Offset: 5814
    000016bb: 	movl	0x2040(%rsp), %edx
    000016c2: 	movq	%r15, %rax
    000016c5: 	nopl	(%rax) # Size: 3
.Ltmp1928:
    000016c8: 	movl	%edx, %ecx
    000016ca: 	movl	(%rax), %edx
    000016cc: 	cmpl	%ecx, %edx
    000016ce: 	jl	.Ltmp1927 # Offset: 5838
    000016d4: 	addq	$0x4, %rax
    000016d8: 	cmpq	%rax, %r13
    000016db: 	jne	.Ltmp1928 # Offset: 5851
    000016dd: 	addl	$0x1, %ebx
    000016e0: 	cmpl	iterations(%rip), %ebx
    000016e6: 	jl	.Ltmp1929 # Offset: 5862
.Ltmp1926:
    000016e8: 	callq	clock@PLT # Offset: 5864
    000016ed: 	movq	(%rsp), %rdi
    000016f1: 	pxor	%xmm0, %xmm0
    000016f5: 	movq	%rax, end_time(%rip)
    000016fc: 	subq	start_time(%rip), %rax
    00001703: 	cvtsi2sd	%rax, %xmm0
    00001708: 	divsd	DATAat0x14868(%rip), %xmm0
    00001710: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5904
    00001715: 	movq	0xe0(%rsp), %rdi
    0000171d: 	cmpq	0x20(%rsp), %rdi
    00001722: 	je	.Ltmp1930 # Offset: 5922
    00001724: 	movq	0xf0(%rsp), %rax
    0000172c: 	leaq	0x1(%rax), %rsi
    00001730: 	callq	_ZdlPvm@PLT # Offset: 5936
.Ltmp1930:
    00001735: 	movq	0x28(%rsp), %rsi
    0000173a: 	movq	(%rsp), %rdi
    0000173e: 	leaq	DATAat0x14610(%rip), %rdx
    00001745: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5957
    0000174a: 	callq	clock@PLT # Offset: 5962
    0000174f: 	xorl	%ebx, %ebx
    00001751: 	leaq	0x3f80(%rsp), %r15
    00001759: 	movq	%rax, start_time(%rip)
    00001760: 	movl	iterations(%rip), %eax
    00001766: 	testl	%eax, %eax
    00001768: 	jle	.Ltmp1931 # Offset: 5992
    0000176a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1932:
    00001770: 	movq	0x10(%rsp), %rsi
    00001775: 	movq	%r13, %rdi
    00001778: 	movl	$0x3e8, %ecx
    0000177d: 	movq	%r15, %r13
    00001780: 	rep		movsq	(%rsi), %es:(%rdi)
    00001783: 	movq	%r14, %rsi
    00001786: 	movq	%r15, %rdi
    00001789: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_.part.0/1" # Offset: 6025
    0000178e: 	movq	(%rsp), %rdx
    00001792: 	movq	%r14, %rsi
    00001795: 	movq	%r15, %rdi
    00001798: 	callq	_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IiEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6040
    0000179d: 	addl	$0x1, %ebx
    000017a0: 	cmpl	iterations(%rip), %ebx
    000017a6: 	jl	.Ltmp1932 # Offset: 6054
.Ltmp1931:
    000017a8: 	callq	clock@PLT # Offset: 6056
    000017ad: 	movq	(%rsp), %rdi
    000017b1: 	pxor	%xmm0, %xmm0
    000017b5: 	movq	%rax, end_time(%rip)
    000017bc: 	subq	start_time(%rip), %rax
    000017c3: 	cvtsi2sd	%rax, %xmm0
    000017c8: 	divsd	DATAat0x14868(%rip), %xmm0
    000017d0: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6096
    000017d5: 	movq	0xe0(%rsp), %rdi
    000017dd: 	cmpq	0x20(%rsp), %rdi
    000017e2: 	je	.Ltmp1933 # Offset: 6114
    000017e4: 	movq	0xf0(%rsp), %rax
    000017ec: 	leaq	0x1(%rax), %rsi
    000017f0: 	callq	_ZdlPvm@PLT # Offset: 6128
.Ltmp1933:
    000017f5: 	movq	0x28(%rsp), %rsi
    000017fa: 	movq	(%rsp), %rdi
    000017fe: 	leaq	DATAat0x14638(%rip), %rdx
    00001805: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6149
    0000180a: 	callq	clock@PLT # Offset: 6154
    0000180f: 	xorl	%ebx, %ebx
    00001811: 	leaq	0x3f80(%rsp), %r15
    00001819: 	movq	%rax, start_time(%rip)
    00001820: 	movl	iterations(%rip), %eax
    00001826: 	testl	%eax, %eax
    00001828: 	jle	.Ltmp1934 # Offset: 6184
    0000182a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1935:
    00001830: 	movq	0x10(%rsp), %rsi
    00001835: 	movq	%r13, %rdi
    00001838: 	movl	$0x3e8, %ecx
    0000183d: 	movq	%r15, %r13
    00001840: 	rep		movsq	(%rsi), %es:(%rdi)
    00001843: 	movq	%r14, %rsi
    00001846: 	movq	%r15, %rdi
    00001849: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEEEEvT_SE_ # Offset: 6217
    0000184e: 	movq	(%rsp), %rdx
    00001852: 	movq	%r14, %rsi
    00001855: 	movq	%r15, %rdi
    00001858: 	callq	_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEEEEvT_SD_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6232
    0000185d: 	addl	$0x1, %ebx
    00001860: 	cmpl	iterations(%rip), %ebx
    00001866: 	jl	.Ltmp1935 # Offset: 6246
.Ltmp1934:
    00001868: 	callq	clock@PLT # Offset: 6248
    0000186d: 	movq	(%rsp), %rdi
    00001871: 	pxor	%xmm0, %xmm0
    00001875: 	movq	%rax, end_time(%rip)
    0000187c: 	subq	start_time(%rip), %rax
    00001883: 	cvtsi2sd	%rax, %xmm0
    00001888: 	divsd	DATAat0x14868(%rip), %xmm0
    00001890: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6288
    00001895: 	movq	0xe0(%rsp), %rdi
    0000189d: 	cmpq	0x20(%rsp), %rdi
    000018a2: 	je	.Ltmp1936 # Offset: 6306
    000018a4: 	movq	0xf0(%rsp), %rax
    000018ac: 	leaq	0x1(%rax), %rsi
    000018b0: 	callq	_ZdlPvm@PLT # Offset: 6320
.Ltmp1936:
    000018b5: 	movq	0x28(%rsp), %rsi
    000018ba: 	movq	(%rsp), %rdi
    000018be: 	leaq	DATAat0x14668(%rip), %rdx
    000018c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6341
    000018ca: 	callq	clock@PLT # Offset: 6346
    000018cf: 	xorl	%ebx, %ebx
    000018d1: 	leaq	0x104(%rsp), %r15
    000018d9: 	movq	%rax, start_time(%rip)
    000018e0: 	movl	iterations(%rip), %eax
    000018e6: 	testl	%eax, %eax
    000018e8: 	jle	.Ltmp1937 # Offset: 6376
    000018ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1940:
    000018f0: 	movq	%rbp, %rdi
    000018f3: 	movl	$0x3e8, %ecx
    000018f8: 	movq	%r14, %rsi
    000018fb: 	rep		movsq	(%rsi), %es:(%rdi)
    000018fe: 	leaq	0x100(%rsp), %rbp
    00001906: 	movq	%r12, %rsi
    00001909: 	movq	%rbp, %rdi
    0000190c: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPiiEiEEEvT_S5_ # Offset: 6412
    00001911: 	movl	0x100(%rsp), %edx
    00001918: 	movq	0x18(%rsp), %rsi
    0000191d: 	movq	%r15, %rax
.Ltmp1939:
    00001920: 	movl	%edx, %ecx
    00001922: 	movl	(%rax), %edx
    00001924: 	cmpl	%edx, %ecx
    00001926: 	jg	.Ltmp1938 # Offset: 6438
    0000192c: 	addq	$0x4, %rax
    00001930: 	cmpq	%rax, %rsi
    00001933: 	jne	.Ltmp1939 # Offset: 6451
    00001935: 	addl	$0x1, %ebx
    00001938: 	cmpl	iterations(%rip), %ebx
    0000193e: 	jl	.Ltmp1940 # Offset: 6462
.Ltmp1937:
    00001940: 	callq	clock@PLT # Offset: 6464
    00001945: 	movq	(%rsp), %rdi
    00001949: 	pxor	%xmm0, %xmm0
    0000194d: 	movq	%rax, end_time(%rip)
    00001954: 	subq	start_time(%rip), %rax
    0000195b: 	cvtsi2sd	%rax, %xmm0
    00001960: 	divsd	DATAat0x14868(%rip), %xmm0
    00001968: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6504
    0000196d: 	movq	0xe0(%rsp), %rdi
    00001975: 	cmpq	0x20(%rsp), %rdi
    0000197a: 	je	.Ltmp1941 # Offset: 6522
    0000197c: 	movq	0xf0(%rsp), %rax
    00001984: 	leaq	0x1(%rax), %rsi
    00001988: 	callq	_ZdlPvm@PLT # Offset: 6536
.Ltmp1941:
    0000198d: 	movq	0x28(%rsp), %rsi
    00001992: 	movq	(%rsp), %rdi
    00001996: 	leaq	DATAat0x14690(%rip), %rdx
    0000199d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6557
    000019a2: 	callq	clock@PLT # Offset: 6562
    000019a7: 	xorl	%ebx, %ebx
    000019a9: 	leaq	0x104(%rsp), %r15
    000019b1: 	movq	%rax, start_time(%rip)
    000019b8: 	movl	iterations(%rip), %eax
    000019be: 	testl	%eax, %eax
    000019c0: 	jle	.Ltmp1942 # Offset: 6592
    000019c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1945:
    000019c8: 	movq	%rbp, %rdi
    000019cb: 	movl	$0x3e8, %ecx
    000019d0: 	movq	%r14, %rsi
    000019d3: 	rep		movsq	(%rsi), %es:(%rdi)
    000019d6: 	leaq	0x100(%rsp), %rbp
    000019de: 	movq	%r12, %rsi
    000019e1: 	movq	%rbp, %rdi
    000019e4: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEEEvT_S6_ # Offset: 6628
    000019e9: 	movl	0x100(%rsp), %edx
    000019f0: 	movq	0x18(%rsp), %rsi
    000019f5: 	movq	%r15, %rax
    000019f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1944:
    00001a00: 	movl	%edx, %ecx
    00001a02: 	movl	(%rax), %edx
    00001a04: 	cmpl	%ecx, %edx
    00001a06: 	jl	.Ltmp1943 # Offset: 6662
    00001a0c: 	addq	$0x4, %rax
    00001a10: 	cmpq	%rax, %rsi
    00001a13: 	jne	.Ltmp1944 # Offset: 6675
    00001a15: 	addl	$0x1, %ebx
    00001a18: 	cmpl	iterations(%rip), %ebx
    00001a1e: 	jl	.Ltmp1945 # Offset: 6686
.Ltmp1942:
    00001a20: 	callq	clock@PLT # Offset: 6688
    00001a25: 	movq	(%rsp), %rdi
    00001a29: 	pxor	%xmm0, %xmm0
    00001a2d: 	movq	%rax, end_time(%rip)
    00001a34: 	subq	start_time(%rip), %rax
    00001a3b: 	cvtsi2sd	%rax, %xmm0
    00001a40: 	divsd	DATAat0x14868(%rip), %xmm0
    00001a48: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6728
    00001a4d: 	movq	0xe0(%rsp), %rdi
    00001a55: 	cmpq	0x20(%rsp), %rdi
    00001a5a: 	je	.Ltmp1946 # Offset: 6746
    00001a5c: 	movq	0xf0(%rsp), %rax
    00001a64: 	leaq	0x1(%rax), %rsi
    00001a68: 	callq	_ZdlPvm@PLT # Offset: 6760
.Ltmp1946:
    00001a6d: 	movq	0x28(%rsp), %rsi
    00001a72: 	movq	(%rsp), %rdi
    00001a76: 	leaq	DATAat0x146c0(%rip), %rdx
    00001a7d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6781
    00001a82: 	callq	clock@PLT # Offset: 6786
    00001a87: 	xorl	%ebx, %ebx
    00001a89: 	leaq	0x2044(%rsp), %r15
    00001a91: 	movq	%rax, start_time(%rip)
    00001a98: 	movl	iterations(%rip), %eax
    00001a9e: 	testl	%eax, %eax
    00001aa0: 	jle	.Ltmp1947 # Offset: 6816
    00001aa2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1950:
    00001aa8: 	movq	0x8(%rsp), %rsi
    00001aad: 	movq	%r12, %rdi
    00001ab0: 	movl	$0x3e8, %ecx
    00001ab5: 	leaq	0x2040(%rsp), %r12
    00001abd: 	rep		movsq	(%rsi), %es:(%rdi)
    00001ac0: 	movq	%r13, %rsi
    00001ac3: 	movq	%r12, %rdi
    00001ac6: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_EEEvT_S8_ # Offset: 6854
    00001acb: 	movl	0x2040(%rsp), %edx
    00001ad2: 	movq	0x30(%rsp), %rsi
    00001ad7: 	movq	%r15, %rax
    00001ada: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1949:
    00001ae0: 	movl	%edx, %ecx
    00001ae2: 	movl	(%rax), %edx
    00001ae4: 	cmpl	%edx, %ecx
    00001ae6: 	jg	.Ltmp1948 # Offset: 6886
    00001aec: 	addq	$0x4, %rax
    00001af0: 	cmpq	%rsi, %rax
    00001af3: 	jne	.Ltmp1949 # Offset: 6899
    00001af5: 	addl	$0x1, %ebx
    00001af8: 	cmpl	iterations(%rip), %ebx
    00001afe: 	jl	.Ltmp1950 # Offset: 6910
.Ltmp1947:
    00001b00: 	callq	clock@PLT # Offset: 6912
    00001b05: 	movq	(%rsp), %rdi
    00001b09: 	pxor	%xmm0, %xmm0
    00001b0d: 	movq	%rax, end_time(%rip)
    00001b14: 	subq	start_time(%rip), %rax
    00001b1b: 	cvtsi2sd	%rax, %xmm0
    00001b20: 	divsd	DATAat0x14868(%rip), %xmm0
    00001b28: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6952
    00001b2d: 	movq	0xe0(%rsp), %rdi
    00001b35: 	cmpq	0x20(%rsp), %rdi
    00001b3a: 	je	.Ltmp1951 # Offset: 6970
    00001b3c: 	movq	0xf0(%rsp), %rax
    00001b44: 	leaq	0x1(%rax), %rsi
    00001b48: 	callq	_ZdlPvm@PLT # Offset: 6984
.Ltmp1951:
    00001b4d: 	movq	0x28(%rsp), %rbx
    00001b52: 	leaq	0xc0(%rsp), %rdi
    00001b5a: 	leaq	DATAat0x142af(%rip), %rdx
    00001b61: 	movq	%rbx, %rsi
    00001b64: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7012
    00001b69: 	movl	iterations(%rip), %edx
    00001b6f: 	movl	$0x1, %r8d
    00001b75: 	movl	$0x1, %ecx
    00001b7a: 	movq	0xc0(%rsp), %rdi
    00001b82: 	movl	$0x7d0, %esi
    00001b87: 	callq	_Z9summarizePKciiii # Offset: 7047
    00001b8c: 	movq	(%rsp), %rdi
    00001b90: 	leaq	DATAat0x142c6(%rip), %rdx
    00001b97: 	movq	%rbx, %rsi
    00001b9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7066
    00001b9f: 	callq	clock@PLT # Offset: 7071
    00001ba4: 	movl	iterations(%rip), %r11d
    00001bab: 	xorl	%ebx, %ebx
    00001bad: 	movq	%rax, start_time(%rip)
    00001bb4: 	testl	%r11d, %r11d
    00001bb7: 	jle	.Ltmp1952 # Offset: 7095
    00001bbd: 	nopl	(%rax) # Size: 3
.Ltmp1955:
    00001bc0: 	movl	$0x3e8, %ecx
    00001bc5: 	movq	%rbp, %rdi
    00001bc8: 	movq	%r14, %rsi
    00001bcb: 	movl	$0x3e7, %r15d
    00001bd1: 	rep		movsq	(%rsi), %es:(%rdi)
    00001bd4: 	nopl	(%rax) # Size: 4
.Ltmp1953:
    00001bd8: 	movl	(%rbp,%r15,4), %ecx
    00001bdd: 	movq	%r15, %rdx
    00001be0: 	movq	%rbp, %rsi
    00001be3: 	movl	$0x7d0, %edi
    00001be8: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 7144
    00001bed: 	subq	$0x1, %r15
    00001bf1: 	jae	.Ltmp1953 # Offset: 7153
    00001bf3: 	movl	$0x7cf, %r15d
    00001bf9: 	nopl	(%rax) # Size: 7
.Ltmp1954:
    00001c00: 	movl	0x100(%rsp), %eax
    00001c07: 	xorl	%edx, %edx
    00001c09: 	movq	%r15, %rdi
    00001c0c: 	movq	%rbp, %rsi
    00001c0f: 	movl	(%rbp,%r15,4), %ecx
    00001c14: 	movl	%eax, (%rbp,%r15,4)
    00001c19: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 7193
    00001c1e: 	subq	$0x1, %r15
    00001c22: 	jne	.Ltmp1954 # Offset: 7202
    00001c24: 	movq	(%rsp), %rdx
    00001c28: 	movq	%r12, %rsi
    00001c2b: 	movq	%rbp, %rdi
    00001c2e: 	callq	_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7214
    00001c33: 	addl	$0x1, %ebx
    00001c36: 	cmpl	iterations(%rip), %ebx
    00001c3c: 	jl	.Ltmp1955 # Offset: 7228
.Ltmp1952:
    00001c3e: 	callq	clock@PLT # Offset: 7230
    00001c43: 	movq	(%rsp), %rdi
    00001c47: 	pxor	%xmm0, %xmm0
    00001c4b: 	movq	%rax, end_time(%rip)
    00001c52: 	subq	start_time(%rip), %rax
    00001c59: 	cvtsi2sd	%rax, %xmm0
    00001c5e: 	divsd	DATAat0x14868(%rip), %xmm0
    00001c66: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7270
    00001c6b: 	movq	0xe0(%rsp), %rdi
    00001c73: 	cmpq	0x20(%rsp), %rdi
    00001c78: 	je	.Ltmp1956 # Offset: 7288
    00001c7a: 	movq	0xf0(%rsp), %rax
    00001c82: 	leaq	0x1(%rax), %rsi
    00001c86: 	callq	_ZdlPvm@PLT # Offset: 7302
.Ltmp1956:
    00001c8b: 	movq	0x28(%rsp), %rsi
    00001c90: 	movq	(%rsp), %rdi
    00001c94: 	leaq	DATAat0x142d9(%rip), %rdx
    00001c9b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7323
    00001ca0: 	callq	clock@PLT # Offset: 7328
    00001ca5: 	movl	iterations(%rip), %r10d
    00001cac: 	movl	$0x0, 0x38(%rsp)
    00001cb4: 	leaq	0x104(%rsp), %r15
    00001cbc: 	movq	%rax, start_time(%rip)
    00001cc3: 	testl	%r10d, %r10d
    00001cc6: 	jle	.Ltmp1957 # Offset: 7366
    00001ccc: 	nopl	(%rax) # Size: 4
.Ltmp1962:
    00001cd0: 	movl	$0x3e8, %ecx
    00001cd5: 	movq	%rbp, %rdi
    00001cd8: 	movq	%r14, %rsi
    00001cdb: 	movl	$0x3e7, %ebx
    00001ce0: 	rep		movsq	(%rsi), %es:(%rdi)
    00001ce3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1958:
    00001ce8: 	movl	(%rbp,%rbx,4), %ecx
    00001cec: 	movq	%rbx, %rdx
    00001cef: 	movq	%rbp, %rsi
    00001cf2: 	movl	$0x7d0, %edi
    00001cf7: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperIiEiEEvlT_lT0_ # Offset: 7415
    00001cfc: 	subq	$0x1, %rbx
    00001d00: 	jae	.Ltmp1958 # Offset: 7424
    00001d02: 	movl	$0x7cf, %ebx
    00001d07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1959:
    00001d10: 	movl	0x100(%rsp), %eax
    00001d17: 	movl	(%rbp,%rbx,4), %ecx
    00001d1b: 	xorl	%edx, %edx
    00001d1d: 	movq	%rbx, %rdi
    00001d20: 	movq	%rbp, %rsi
    00001d23: 	movl	%eax, (%rbp,%rbx,4)
    00001d27: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperIiEiEEvlT_lT0_ # Offset: 7463
    00001d2c: 	subq	$0x1, %rbx
    00001d30: 	jne	.Ltmp1959 # Offset: 7472
    00001d32: 	movl	0x100(%rsp), %edx
    00001d39: 	movq	0x18(%rsp), %rsi
    00001d3e: 	movq	%r15, %rax
    00001d41: 	nopl	(%rax) # Size: 7
.Ltmp1961:
    00001d48: 	movl	%edx, %ecx
    00001d4a: 	movl	(%rax), %edx
    00001d4c: 	cmpl	%ecx, %edx
    00001d4e: 	jl	.Ltmp1960 # Offset: 7502
    00001d54: 	addq	$0x4, %rax
    00001d58: 	cmpq	%rax, %rsi
    00001d5b: 	jne	.Ltmp1961 # Offset: 7515
.Ltmp2020:
    00001d5d: 	addl	$0x1, 0x38(%rsp)
    00001d62: 	movl	0x38(%rsp), %eax
    00001d66: 	cmpl	iterations(%rip), %eax
    00001d6c: 	jl	.Ltmp1962 # Offset: 7532
.Ltmp1957:
    00001d72: 	callq	clock@PLT # Offset: 7538
    00001d77: 	movq	(%rsp), %rdi
    00001d7b: 	pxor	%xmm0, %xmm0
    00001d7f: 	movq	%rax, end_time(%rip)
    00001d86: 	subq	start_time(%rip), %rax
    00001d8d: 	cvtsi2sd	%rax, %xmm0
    00001d92: 	divsd	DATAat0x14868(%rip), %xmm0
    00001d9a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7578
    00001d9f: 	movq	0xe0(%rsp), %rdi
    00001da7: 	cmpq	0x20(%rsp), %rdi
    00001dac: 	je	.Ltmp1963 # Offset: 7596
    00001dae: 	movq	0xf0(%rsp), %rax
    00001db6: 	leaq	0x1(%rax), %rsi
    00001dba: 	callq	_ZdlPvm@PLT # Offset: 7610
.Ltmp1963:
    00001dbf: 	movq	0x28(%rsp), %rsi
    00001dc4: 	movq	(%rsp), %rdi
    00001dc8: 	leaq	DATAat0x14700(%rip), %rdx
    00001dcf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7631
    00001dd4: 	callq	clock@PLT # Offset: 7636
    00001dd9: 	movl	iterations(%rip), %r9d
    00001de0: 	xorl	%ebx, %ebx
    00001de2: 	movq	%rax, start_time(%rip)
    00001de9: 	testl	%r9d, %r9d
    00001dec: 	jle	.Ltmp1964 # Offset: 7660
    00001dee: 	nop # Size: 2
.Ltmp1967:
    00001df0: 	movq	0x8(%rsp), %rsi
    00001df5: 	movl	$0x3e8, %ecx
    00001dfa: 	movq	%r12, %rdi
    00001dfd: 	movl	$0x3e7, %r15d
    00001e03: 	rep		movsq	(%rsi), %es:(%rdi)
    00001e06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1965:
    00001e10: 	movl	(%r12,%r15,4), %ecx
    00001e14: 	movq	%r15, %rdx
    00001e17: 	movq	%r12, %rsi
    00001e1a: 	movl	$0x7d0, %edi
    00001e1f: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIiES2_EEvlT_lT0_ # Offset: 7711
    00001e24: 	subq	$0x1, %r15
    00001e28: 	jae	.Ltmp1965 # Offset: 7720
    00001e2a: 	movl	$0x7cf, %r15d
.Ltmp1966:
    00001e30: 	movl	0x2040(%rsp), %eax
    00001e37: 	movl	(%r12,%r15,4), %ecx
    00001e3b: 	xorl	%edx, %edx
    00001e3d: 	movq	%r15, %rdi
    00001e40: 	movq	%r12, %rsi
    00001e43: 	movl	%eax, (%r12,%r15,4)
    00001e47: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIiES2_EEvlT_lT0_ # Offset: 7751
    00001e4c: 	subq	$0x1, %r15
    00001e50: 	jne	.Ltmp1966 # Offset: 7760
    00001e52: 	movq	(%rsp), %rdx
    00001e56: 	movq	%r13, %rsi
    00001e59: 	movq	%r12, %rdi
    00001e5c: 	callq	_Z13verify_sortedIP12ValueWrapperIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7772
    00001e61: 	addl	$0x1, %ebx
    00001e64: 	cmpl	iterations(%rip), %ebx
    00001e6a: 	jl	.Ltmp1967 # Offset: 7786
.Ltmp1964:
    00001e6c: 	callq	clock@PLT # Offset: 7788
    00001e71: 	movq	(%rsp), %rdi
    00001e75: 	pxor	%xmm0, %xmm0
    00001e79: 	movq	%rax, end_time(%rip)
    00001e80: 	subq	start_time(%rip), %rax
    00001e87: 	cvtsi2sd	%rax, %xmm0
    00001e8c: 	divsd	DATAat0x14868(%rip), %xmm0
    00001e94: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7828
    00001e99: 	movq	0xe0(%rsp), %rdi
    00001ea1: 	cmpq	0x20(%rsp), %rdi
    00001ea6: 	je	.Ltmp1968 # Offset: 7846
    00001ea8: 	movq	0xf0(%rsp), %rax
    00001eb0: 	leaq	0x1(%rax), %rsi
    00001eb4: 	callq	_ZdlPvm@PLT # Offset: 7860
.Ltmp1968:
    00001eb9: 	movq	0x28(%rsp), %rsi
    00001ebe: 	movq	(%rsp), %rdi
    00001ec2: 	leaq	DATAat0x14728(%rip), %rdx
    00001ec9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7881
    00001ece: 	callq	clock@PLT # Offset: 7886
    00001ed3: 	movl	iterations(%rip), %r8d
    00001eda: 	movl	$0x0, 0x38(%rsp)
    00001ee2: 	leaq	0x2044(%rsp), %r15
    00001eea: 	movq	%rax, start_time(%rip)
    00001ef1: 	testl	%r8d, %r8d
    00001ef4: 	jle	.Ltmp1969 # Offset: 7924
    00001efa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1974:
    00001f00: 	movq	0x8(%rsp), %rsi
    00001f05: 	movl	$0x3e8, %ecx
    00001f0a: 	movq	%r12, %rdi
    00001f0d: 	movl	$0x3e7, %ebx
    00001f12: 	rep		movsq	(%rsi), %es:(%rdi)
    00001f15: 	nopl	(%rax) # Size: 3
.Ltmp1970:
    00001f18: 	movl	(%r12,%rbx,4), %ecx
    00001f1c: 	movq	%rbx, %rdx
    00001f1f: 	movq	%r12, %rsi
    00001f22: 	movl	$0x7d0, %edi
    00001f27: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIiEES3_EEvlT_lT0_ # Offset: 7975
    00001f2c: 	subq	$0x1, %rbx
    00001f30: 	jae	.Ltmp1970 # Offset: 7984
    00001f32: 	movl	$0x7cf, %ebx
    00001f37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1971:
    00001f40: 	movl	0x2040(%rsp), %eax
    00001f47: 	movl	(%r12,%rbx,4), %ecx
    00001f4b: 	xorl	%edx, %edx
    00001f4d: 	movq	%rbx, %rdi
    00001f50: 	movq	%r12, %rsi
    00001f53: 	movl	%eax, (%r12,%rbx,4)
    00001f57: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIiEES3_EEvlT_lT0_ # Offset: 8023
    00001f5c: 	subq	$0x1, %rbx
    00001f60: 	jne	.Ltmp1971 # Offset: 8032
    00001f62: 	movl	0x2040(%rsp), %edx
    00001f69: 	movq	0x30(%rsp), %rsi
    00001f6e: 	movq	%r15, %rax
    00001f71: 	nopl	(%rax) # Size: 7
.Ltmp1973:
    00001f78: 	movl	%edx, %ecx
    00001f7a: 	movl	(%rax), %edx
    00001f7c: 	cmpl	%ecx, %edx
    00001f7e: 	jl	.Ltmp1972 # Offset: 8062
    00001f84: 	addq	$0x4, %rax
    00001f88: 	cmpq	%rax, %rsi
    00001f8b: 	jne	.Ltmp1973 # Offset: 8075
.Ltmp2019:
    00001f8d: 	addl	$0x1, 0x38(%rsp)
    00001f92: 	movl	0x38(%rsp), %eax
    00001f96: 	cmpl	iterations(%rip), %eax
    00001f9c: 	jl	.Ltmp1974 # Offset: 8092
.Ltmp1969:
    00001fa2: 	callq	clock@PLT # Offset: 8098
    00001fa7: 	movq	(%rsp), %rdi
    00001fab: 	pxor	%xmm0, %xmm0
    00001faf: 	movq	%rax, end_time(%rip)
    00001fb6: 	subq	start_time(%rip), %rax
    00001fbd: 	cvtsi2sd	%rax, %xmm0
    00001fc2: 	divsd	DATAat0x14868(%rip), %xmm0
    00001fca: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8138
    00001fcf: 	movq	0xe0(%rsp), %rdi
    00001fd7: 	cmpq	0x20(%rsp), %rdi
    00001fdc: 	je	.Ltmp1975 # Offset: 8156
    00001fde: 	movq	0xf0(%rsp), %rax
    00001fe6: 	leaq	0x1(%rax), %rsi
    00001fea: 	callq	_ZdlPvm@PLT # Offset: 8170
.Ltmp1975:
    00001fef: 	movq	0x28(%rsp), %rsi
    00001ff4: 	movq	(%rsp), %rdi
    00001ff8: 	leaq	DATAat0x14758(%rip), %rdx
    00001fff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8191
    00002004: 	callq	clock@PLT # Offset: 8196
    00002009: 	movl	iterations(%rip), %edi
    0000200f: 	xorl	%ebx, %ebx
    00002011: 	movq	%rax, start_time(%rip)
    00002018: 	testl	%edi, %edi
    0000201a: 	jle	.Ltmp1976 # Offset: 8218
.Ltmp1979:
    00002020: 	movq	0x10(%rsp), %rsi
    00002025: 	movl	$0x3e8, %ecx
    0000202a: 	movq	%r13, %rdi
    0000202d: 	movl	$0x3e7, %r15d
    00002033: 	rep		movsq	(%rsi), %es:(%rdi)
    00002036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1977:
    00002040: 	movl	(%r13,%r15,4), %ecx
    00002045: 	movq	%r15, %rdx
    00002048: 	movq	%r13, %rsi
    0000204b: 	movl	$0x7d0, %edi
    00002050: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEESB_EEvlT_lT0_ # Offset: 8272
    00002055: 	subq	$0x1, %r15
    00002059: 	jae	.Ltmp1977 # Offset: 8281
    0000205b: 	movl	$0x7cf, %r15d
    00002061: 	nopl	(%rax) # Size: 7
.Ltmp1978:
    00002068: 	movl	0x3f80(%rsp), %eax
    0000206f: 	xorl	%edx, %edx
    00002071: 	movq	%r15, %rdi
    00002074: 	movq	%r13, %rsi
    00002077: 	movl	(%r13,%r15,4), %ecx
    0000207c: 	movl	%eax, (%r13,%r15,4)
    00002081: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IiEEEEEEEEEESB_EEvlT_lT0_ # Offset: 8321
    00002086: 	subq	$0x1, %r15
    0000208a: 	jne	.Ltmp1978 # Offset: 8330
    0000208c: 	movq	(%rsp), %rdx
    00002090: 	movq	%r14, %rsi
    00002093: 	movq	%r13, %rdi
    00002096: 	callq	_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IiEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8342
    0000209b: 	addl	$0x1, %ebx
    0000209e: 	cmpl	iterations(%rip), %ebx
    000020a4: 	jl	.Ltmp1979 # Offset: 8356
.Ltmp1976:
    000020aa: 	callq	clock@PLT # Offset: 8362
    000020af: 	movq	(%rsp), %rdi
    000020b3: 	pxor	%xmm0, %xmm0
    000020b7: 	movq	%rax, end_time(%rip)
    000020be: 	subq	start_time(%rip), %rax
    000020c5: 	cvtsi2sd	%rax, %xmm0
    000020ca: 	divsd	DATAat0x14868(%rip), %xmm0
    000020d2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8402
    000020d7: 	movq	0xe0(%rsp), %rdi
    000020df: 	cmpq	0x20(%rsp), %rdi
    000020e4: 	je	.Ltmp1980 # Offset: 8420
    000020e6: 	movq	0xf0(%rsp), %rax
    000020ee: 	leaq	0x1(%rax), %rsi
    000020f2: 	callq	_ZdlPvm@PLT # Offset: 8434
.Ltmp1980:
    000020f7: 	movq	0x28(%rsp), %rsi
    000020fc: 	movq	(%rsp), %rdi
    00002100: 	leaq	DATAat0x14780(%rip), %rdx
    00002107: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8455
    0000210c: 	callq	clock@PLT # Offset: 8460
    00002111: 	movl	iterations(%rip), %esi
    00002117: 	movl	$0x0, 0x38(%rsp)
    0000211f: 	leaq	0x3f84(%rsp), %r15
    00002127: 	movq	%rax, start_time(%rip)
    0000212e: 	testl	%esi, %esi
    00002130: 	jle	.Ltmp1981 # Offset: 8496
    00002136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1986:
    00002140: 	movq	0x10(%rsp), %rsi
    00002145: 	movl	$0x3e8, %ecx
    0000214a: 	movq	%r13, %rdi
    0000214d: 	movl	$0x3e7, %ebx
    00002152: 	rep		movsq	(%rsi), %es:(%rdi)
    00002155: 	nopl	(%rax) # Size: 3
.Ltmp1982:
    00002158: 	movl	(%r13,%rbx,4), %ecx
    0000215d: 	movq	%rbx, %rdx
    00002160: 	movq	%r13, %rsi
    00002163: 	movl	$0x7d0, %edi
    00002168: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEESC_EEvlT_lT0_ # Offset: 8552
    0000216d: 	subq	$0x1, %rbx
    00002171: 	jae	.Ltmp1982 # Offset: 8561
    00002173: 	movl	$0x7cf, %ebx
    00002178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1983:
    00002180: 	movl	0x3f80(%rsp), %eax
    00002187: 	xorl	%edx, %edx
    00002189: 	movq	%rbx, %rdi
    0000218c: 	movq	%r13, %rsi
    0000218f: 	movl	(%r13,%rbx,4), %ecx
    00002194: 	movl	%eax, (%r13,%rbx,4)
    00002199: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IiEEEEEEEEEEESC_EEvlT_lT0_ # Offset: 8601
    0000219e: 	subq	$0x1, %rbx
    000021a2: 	jne	.Ltmp1983 # Offset: 8610
    000021a4: 	movl	0x3f80(%rsp), %edx
    000021ab: 	movq	%r15, %rax
    000021ae: 	nop # Size: 2
.Ltmp1985:
    000021b0: 	movl	%edx, %ecx
    000021b2: 	movl	(%rax), %edx
    000021b4: 	cmpl	%edx, %ecx
    000021b6: 	jg	.Ltmp1984 # Offset: 8630
    000021bc: 	addq	$0x4, %rax
    000021c0: 	cmpq	%r14, %rax
    000021c3: 	jne	.Ltmp1985 # Offset: 8643
.Ltmp2018:
    000021c5: 	addl	$0x1, 0x38(%rsp)
    000021ca: 	movl	0x38(%rsp), %eax
    000021ce: 	cmpl	iterations(%rip), %eax
    000021d4: 	jl	.Ltmp1986 # Offset: 8660
.Ltmp1981:
    000021da: 	callq	clock@PLT # Offset: 8666
    000021df: 	movq	(%rsp), %rdi
    000021e3: 	pxor	%xmm0, %xmm0
    000021e7: 	movq	%rax, end_time(%rip)
    000021ee: 	subq	start_time(%rip), %rax
    000021f5: 	cvtsi2sd	%rax, %xmm0
    000021fa: 	divsd	DATAat0x14868(%rip), %xmm0
    00002202: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8706
    00002207: 	movq	0xe0(%rsp), %rdi
    0000220f: 	cmpq	0x20(%rsp), %rdi
    00002214: 	je	.Ltmp1987 # Offset: 8724
    00002216: 	movq	0xf0(%rsp), %rax
    0000221e: 	leaq	0x1(%rax), %rsi
    00002222: 	callq	_ZdlPvm@PLT # Offset: 8738
.Ltmp1987:
    00002227: 	movq	0x28(%rsp), %rsi
    0000222c: 	movq	(%rsp), %rdi
    00002230: 	leaq	DATAat0x147b0(%rip), %rdx
    00002237: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8759
    0000223c: 	callq	clock@PLT # Offset: 8764
    00002241: 	movl	iterations(%rip), %ecx
    00002247: 	xorl	%ebx, %ebx
    00002249: 	leaq	0x104(%rsp), %r15
    00002251: 	movq	%rax, start_time(%rip)
    00002258: 	testl	%ecx, %ecx
    0000225a: 	jle	.Ltmp1988 # Offset: 8794
.Ltmp1993:
    00002260: 	movl	$0x3e8, %ecx
    00002265: 	movq	%rbp, %rdi
    00002268: 	movq	%r14, %rsi
    0000226b: 	movl	$0x3e7, %r13d
    00002271: 	rep		movsq	(%rsi), %es:(%rdi)
    00002274: 	nopl	(%rax) # Size: 4
.Ltmp1989:
    00002278: 	movl	(%rbp,%r13,4), %ecx
    0000227d: 	movq	%r13, %rdx
    00002280: 	movq	%rbp, %rsi
    00002283: 	movl	$0x7d0, %edi
    00002288: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPiiEiEiEEvlT_lT0_ # Offset: 8840
    0000228d: 	subq	$0x1, %r13
    00002291: 	jae	.Ltmp1989 # Offset: 8849
    00002293: 	movl	$0x7cf, %r13d
    00002299: 	nopl	(%rax) # Size: 7
.Ltmp1990:
    000022a0: 	movl	0x100(%rsp), %eax
    000022a7: 	xorl	%edx, %edx
    000022a9: 	movq	%r13, %rdi
    000022ac: 	movq	%rbp, %rsi
    000022af: 	movl	(%rbp,%r13,4), %ecx
    000022b4: 	movl	%eax, (%rbp,%r13,4)
    000022b9: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPiiEiEiEEvlT_lT0_ # Offset: 8889
    000022be: 	subq	$0x1, %r13
    000022c2: 	jne	.Ltmp1990 # Offset: 8898
    000022c4: 	movl	0x100(%rsp), %edx
    000022cb: 	movq	0x18(%rsp), %rsi
    000022d0: 	movq	%r15, %rax
    000022d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1992:
    000022d8: 	movl	%edx, %ecx
    000022da: 	movl	(%rax), %edx
    000022dc: 	cmpl	%ecx, %edx
    000022de: 	jl	.Ltmp1991 # Offset: 8926
    000022e4: 	addq	$0x4, %rax
    000022e8: 	cmpq	%rax, %rsi
    000022eb: 	jne	.Ltmp1992 # Offset: 8939
    000022ed: 	addl	$0x1, %ebx
    000022f0: 	cmpl	iterations(%rip), %ebx
    000022f6: 	jl	.Ltmp1993 # Offset: 8950
.Ltmp1988:
    000022fc: 	callq	clock@PLT # Offset: 8956
    00002301: 	movq	(%rsp), %rdi
    00002305: 	pxor	%xmm0, %xmm0
    00002309: 	movq	%rax, end_time(%rip)
    00002310: 	subq	start_time(%rip), %rax
    00002317: 	cvtsi2sd	%rax, %xmm0
    0000231c: 	divsd	DATAat0x14868(%rip), %xmm0
    00002324: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8996
    00002329: 	movq	0xe0(%rsp), %rdi
    00002331: 	cmpq	0x20(%rsp), %rdi
    00002336: 	je	.Ltmp1994 # Offset: 9014
    00002338: 	movq	0xf0(%rsp), %rax
    00002340: 	leaq	0x1(%rax), %rsi
    00002344: 	callq	_ZdlPvm@PLT # Offset: 9028
.Ltmp1994:
    00002349: 	movq	0x28(%rsp), %rsi
    0000234e: 	movq	(%rsp), %rdi
    00002352: 	leaq	DATAat0x147d8(%rip), %rdx
    00002359: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9049
    0000235e: 	callq	clock@PLT # Offset: 9054
    00002363: 	movl	iterations(%rip), %edx
    00002369: 	xorl	%ebx, %ebx
    0000236b: 	leaq	0x104(%rsp), %r15
    00002373: 	movq	%rax, start_time(%rip)
    0000237a: 	testl	%edx, %edx
    0000237c: 	jle	.Ltmp1995 # Offset: 9084
    00002382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2000:
    00002388: 	movl	$0x3e8, %ecx
    0000238d: 	movq	%rbp, %rdi
    00002390: 	movq	%r14, %rsi
    00002393: 	movl	$0x3e7, %r13d
    00002399: 	rep		movsq	(%rsi), %es:(%rdi)
    0000239c: 	nopl	(%rax) # Size: 4
.Ltmp1996:
    000023a0: 	movl	(%rbp,%r13,4), %ecx
    000023a5: 	movq	%r13, %rdx
    000023a8: 	movq	%rbp, %rsi
    000023ab: 	movl	$0x7d0, %edi
    000023b0: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEiEEvlT_lT0_ # Offset: 9136
    000023b5: 	subq	$0x1, %r13
    000023b9: 	jae	.Ltmp1996 # Offset: 9145
    000023bb: 	movl	$0x7cf, %r13d
    000023c1: 	nopl	(%rax) # Size: 7
.Ltmp1997:
    000023c8: 	movl	0x100(%rsp), %eax
    000023cf: 	xorl	%edx, %edx
    000023d1: 	movq	%r13, %rdi
    000023d4: 	movq	%rbp, %rsi
    000023d7: 	movl	(%rbp,%r13,4), %ecx
    000023dc: 	movl	%eax, (%rbp,%r13,4)
    000023e1: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperIiEiEiEiEEvlT_lT0_ # Offset: 9185
    000023e6: 	subq	$0x1, %r13
    000023ea: 	jne	.Ltmp1997 # Offset: 9194
    000023ec: 	movl	0x100(%rsp), %edx
    000023f3: 	movq	0x18(%rsp), %rsi
    000023f8: 	movq	%r15, %rax
    000023fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1999:
    00002400: 	movl	%edx, %ecx
    00002402: 	movl	(%rax), %edx
    00002404: 	cmpl	%ecx, %edx
    00002406: 	jl	.Ltmp1998 # Offset: 9222
    0000240c: 	addq	$0x4, %rax
    00002410: 	cmpq	%rsi, %rax
    00002413: 	jne	.Ltmp1999 # Offset: 9235
    00002415: 	addl	$0x1, %ebx
    00002418: 	cmpl	iterations(%rip), %ebx
    0000241e: 	jl	.Ltmp2000 # Offset: 9246
.Ltmp1995:
    00002424: 	callq	clock@PLT # Offset: 9252
    00002429: 	movq	(%rsp), %rdi
    0000242d: 	pxor	%xmm0, %xmm0
    00002431: 	movq	%rax, end_time(%rip)
    00002438: 	subq	start_time(%rip), %rax
    0000243f: 	cvtsi2sd	%rax, %xmm0
    00002444: 	divsd	DATAat0x14868(%rip), %xmm0
    0000244c: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9292
    00002451: 	movq	0xe0(%rsp), %rdi
    00002459: 	cmpq	0x20(%rsp), %rdi
    0000245e: 	je	.Ltmp2001 # Offset: 9310
    00002460: 	movq	0xf0(%rsp), %rax
    00002468: 	leaq	0x1(%rax), %rsi
    0000246c: 	callq	_ZdlPvm@PLT # Offset: 9324
.Ltmp2001:
    00002471: 	movq	0x28(%rsp), %rsi
    00002476: 	movq	(%rsp), %rdi
    0000247a: 	leaq	DATAat0x14808(%rip), %rdx
    00002481: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9345
    00002486: 	callq	clock@PLT # Offset: 9350
    0000248b: 	xorl	%ebx, %ebx
    0000248d: 	leaq	0x2044(%rsp), %r15
    00002495: 	leaq	DATAat0x141cf(%rip), %rbp
    0000249c: 	movq	%rax, start_time(%rip)
    000024a3: 	movl	iterations(%rip), %eax
    000024a9: 	testl	%eax, %eax
    000024ab: 	jle	.Ltmp2002 # Offset: 9387
    000024b1: 	nopl	(%rax) # Size: 7
.Ltmp2007:
    000024b8: 	movq	0x8(%rsp), %rsi
    000024bd: 	movl	$0x3e8, %ecx
    000024c2: 	movq	%r12, %rdi
    000024c5: 	movl	$0x3e7, %r13d
    000024cb: 	rep		movsq	(%rsi), %es:(%rdi)
    000024ce: 	nop # Size: 2
.Ltmp2003:
    000024d0: 	movl	(%r12,%r13,4), %ecx
    000024d4: 	movq	%r13, %rdx
    000024d7: 	movq	%r12, %rsi
    000024da: 	movl	$0x7d0, %edi
    000024df: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_ES4_EEvlT_lT0_ # Offset: 9439
    000024e4: 	subq	$0x1, %r13
    000024e8: 	jae	.Ltmp2003 # Offset: 9448
    000024ea: 	movl	$0x7cf, %r13d
.Ltmp2004:
    000024f0: 	movl	0x2040(%rsp), %eax
    000024f7: 	movl	(%r12,%r13,4), %ecx
    000024fb: 	xorl	%edx, %edx
    000024fd: 	movq	%r13, %rdi
    00002500: 	movq	%r12, %rsi
    00002503: 	movl	%eax, (%r12,%r13,4)
    00002507: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperIiEES4_ES4_ES4_EEvlT_lT0_ # Offset: 9479
    0000250c: 	subq	$0x1, %r13
    00002510: 	jne	.Ltmp2004 # Offset: 9488
    00002512: 	movl	0x2040(%rsp), %edx
    00002519: 	movq	0x30(%rsp), %rsi
    0000251e: 	movq	%r15, %rax
    00002521: 	nopl	(%rax) # Size: 7
.Ltmp2006:
    00002528: 	movl	%edx, %ecx
    0000252a: 	movl	(%rax), %edx
    0000252c: 	cmpl	%edx, %ecx
    0000252e: 	jg	.Ltmp2005 # Offset: 9518
    00002534: 	addq	$0x4, %rax
    00002538: 	cmpq	%rsi, %rax
    0000253b: 	jne	.Ltmp2006 # Offset: 9531
    0000253d: 	addl	$0x1, %ebx
    00002540: 	cmpl	iterations(%rip), %ebx
    00002546: 	jl	.Ltmp2007 # Offset: 9542
.Ltmp2002:
    0000254c: 	callq	clock@PLT # Offset: 9548
    00002551: 	movq	(%rsp), %rdi
    00002555: 	pxor	%xmm0, %xmm0
    00002559: 	movq	%rax, end_time(%rip)
    00002560: 	subq	start_time(%rip), %rax
    00002567: 	cvtsi2sd	%rax, %xmm0
    0000256c: 	divsd	DATAat0x14868(%rip), %xmm0
    00002574: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9588
    00002579: 	movq	0xe0(%rsp), %rdi
    00002581: 	cmpq	0x20(%rsp), %rdi
    00002586: 	je	.Ltmp2008 # Offset: 9606
    00002588: 	movq	0xf0(%rsp), %rax
    00002590: 	leaq	0x1(%rax), %rsi
    00002594: 	callq	_ZdlPvm@PLT # Offset: 9620
.Ltmp2008:
    00002599: 	movq	0x28(%rsp), %rsi
    0000259e: 	movq	(%rsp), %rdi
    000025a2: 	leaq	DATAat0x142f2(%rip), %rdx
    000025a9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9641
    000025ae: 	movl	iterations(%rip), %edx
    000025b4: 	movl	$0x1, %r8d
    000025ba: 	movl	$0x1, %ecx
    000025bf: 	movq	0xe0(%rsp), %rdi
    000025c7: 	movl	$0x7d0, %esi
    000025cc: 	callq	_Z9summarizePKciiii # Offset: 9676
    000025d1: 	movl	0x3c(%rsp), %eax
    000025d5: 	movq	0xe0(%rsp), %rdi
    000025dd: 	movl	%eax, iterations(%rip)
    000025e3: 	cmpq	0x20(%rsp), %rdi
    000025e8: 	je	.Ltmp2009 # Offset: 9704
    000025ea: 	movq	0xf0(%rsp), %rax
    000025f2: 	leaq	0x1(%rax), %rsi
    000025f6: 	callq	_ZdlPvm@PLT # Offset: 9718
.Ltmp2009:
    000025fb: 	movq	0xc0(%rsp), %rdi
    00002603: 	leaq	0xd0(%rsp), %rax
    0000260b: 	cmpq	%rax, %rdi
    0000260e: 	je	.Ltmp2010 # Offset: 9742
    00002610: 	movq	0xd0(%rsp), %rax
    00002618: 	leaq	0x1(%rax), %rsi
    0000261c: 	callq	_ZdlPvm@PLT # Offset: 9756
.Ltmp2010:
    00002621: 	movq	0xa0(%rsp), %rdi
    00002629: 	leaq	0xb0(%rsp), %rax
    00002631: 	cmpq	%rax, %rdi
    00002634: 	je	.Ltmp2011 # Offset: 9780
    00002636: 	movq	0xb0(%rsp), %rax
    0000263e: 	leaq	0x1(%rax), %rsi
    00002642: 	callq	_ZdlPvm@PLT # Offset: 9794
.Ltmp2011:
    00002647: 	movq	0x80(%rsp), %rdi
    0000264f: 	leaq	0x90(%rsp), %rax
    00002657: 	cmpq	%rax, %rdi
    0000265a: 	je	.Ltmp2012 # Offset: 9818
    0000265c: 	movq	0x90(%rsp), %rax
    00002664: 	leaq	0x1(%rax), %rsi
    00002668: 	callq	_ZdlPvm@PLT # Offset: 9832
.Ltmp2012:
    0000266d: 	movq	0x60(%rsp), %rdi
    00002672: 	leaq	0x70(%rsp), %rax
    00002677: 	cmpq	%rax, %rdi
    0000267a: 	je	.Ltmp2013 # Offset: 9850
    0000267c: 	movq	0x70(%rsp), %rax
    00002681: 	leaq	0x1(%rax), %rsi
    00002685: 	callq	_ZdlPvm@PLT # Offset: 9861
.Ltmp2013:
    0000268a: 	movq	0xbc88(%rsp), %rax
    00002692: 	subq	%fs:0x28, %rax
    0000269b: 	jne	.Ltmp2014 # Offset: 9883
    000026a1: 	addq	$0xbc98, %rsp
    000026a8: 	popq	%rbx
    000026a9: 	popq	%rbp
    000026aa: 	popq	%r12
    000026ac: 	popq	%r13
    000026ae: 	popq	%r14
    000026b0: 	popq	%r15
    000026b2: 	retq # Offset: 9906
    000026b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1908:
    000026b8: 	movq	%r12, %rax
    000026bb: 	addq	$0x4, %rsi
    000026bf: 	movl	%ecx, (%rax)
    000026c1: 	cmpq	%rsi, %r13
    000026c4: 	jne	.Ltmp1910 # Offset: 9924
    000026ca: 	jmp	.Ltmp2015 # Offset: 9930
    000026cf: 	nop # Size: 1
.Ltmp1878:
    000026d0: 	movq	%r13, %rax
    000026d3: 	addq	$0x4, %rsi
    000026d7: 	movl	%ecx, (%rax)
    000026d9: 	cmpq	%rsi, %r14
    000026dc: 	jne	.Ltmp1880 # Offset: 9948
    000026e2: 	jmp	.Ltmp2016 # Offset: 9954
    000026e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1862:
    000026f0: 	movq	%r12, %rax
    000026f3: 	addq	$0x4, %rsi
    000026f7: 	movl	%ecx, (%rax)
    000026f9: 	cmpq	%rsi, %r13
    000026fc: 	jne	.Ltmp1864 # Offset: 9980
    00002702: 	jmp	.Ltmp2017 # Offset: 9986
.Ltmp1907:
    00002707: 	movl	%ecx, 0x2040(%rsp)
    0000270e: 	leaq	0x4(%r12), %rsi
    00002713: 	jmp	.Ltmp1910 # Offset: 10003
.Ltmp1896:
    00002718: 	movl	%ecx, 0x100(%rsp)
    0000271f: 	leaq	0x4(%rbp), %rsi
    00002723: 	jmp	.Ltmp1900 # Offset: 10019
.Ltmp1861:
    00002728: 	movl	%ecx, 0x2040(%rsp)
    0000272f: 	leaq	0x4(%r12), %rsi
    00002734: 	jmp	.Ltmp1864 # Offset: 10036
.Ltmp1844:
    00002739: 	movl	%ecx, 0x100(%rsp)
    00002740: 	leaq	0x4(%rbp), %rsi
    00002744: 	jmp	.Ltmp1848 # Offset: 10052
.Ltmp1877:
    00002749: 	movl	%ecx, 0x3f80(%rsp)
    00002750: 	leaq	0x4(%r13), %rsi
    00002754: 	jmp	.Ltmp1880 # Offset: 10068
.Ltmp1886:
    00002759: 	movl	%ecx, 0x100(%rsp)
    00002760: 	leaq	0x4(%rbp), %rsi
    00002764: 	jmp	.Ltmp1890 # Offset: 10084
.Ltmp1891:
    00002769: 	movq	0xe0(%rsp), %rdx
    00002771: 	leaq	DATAat0x141cf(%rip), %rsi
    00002778: 	movl	$0x1, %edi
    0000277d: 	xorl	%eax, %eax
    0000277f: 	callq	__printf_chk@PLT # Offset: 10111
    00002784: 	movl	iterations(%rip), %r8d
    0000278b: 	addl	$0x1, %ebx
    0000278e: 	cmpl	%r8d, %ebx
    00002791: 	jl	.Ltmp1893 # Offset: 10129
    00002797: 	jmp	.Ltmp1885 # Offset: 10135
.Ltmp1901:
    0000279c: 	movq	0xe0(%rsp), %rdx
    000027a4: 	leaq	DATAat0x141cf(%rip), %rsi
    000027ab: 	movl	$0x1, %edi
    000027b0: 	xorl	%eax, %eax
    000027b2: 	callq	__printf_chk@PLT # Offset: 10162
    000027b7: 	movl	iterations(%rip), %r8d
    000027be: 	addl	$0x1, %ebx
    000027c1: 	cmpl	%r8d, %ebx
    000027c4: 	jl	.Ltmp1903 # Offset: 10180
    000027ca: 	jmp	.Ltmp1895 # Offset: 10186
.Ltmp1865:
    000027cf: 	movq	0xe0(%rsp), %rdx
    000027d7: 	leaq	DATAat0x141cf(%rip), %rsi
    000027de: 	movl	$0x1, %edi
    000027e3: 	xorl	%eax, %eax
    000027e5: 	callq	__printf_chk@PLT # Offset: 10213
    000027ea: 	movl	iterations(%rip), %r8d
    000027f1: 	addl	$0x1, %ebx
    000027f4: 	cmpl	%r8d, %ebx
    000027f7: 	jl	.Ltmp1867 # Offset: 10231
    000027fd: 	jmp	.Ltmp1859 # Offset: 10237
.Ltmp1849:
    00002802: 	movq	0xe0(%rsp), %rdx
    0000280a: 	leaq	DATAat0x141cf(%rip), %rsi
    00002811: 	movl	$0x1, %edi
    00002816: 	xorl	%eax, %eax
    00002818: 	callq	__printf_chk@PLT # Offset: 10264
    0000281d: 	movl	iterations(%rip), %r8d
    00002824: 	addl	$0x1, %ebx
    00002827: 	cmpl	%r8d, %ebx
    0000282a: 	jl	.Ltmp1851 # Offset: 10282
    00002830: 	jmp	.Ltmp1843 # Offset: 10288
.Ltmp1881:
    00002835: 	movq	0xe0(%rsp), %rdx
    0000283d: 	leaq	DATAat0x141cf(%rip), %rsi
    00002844: 	movl	$0x1, %edi
    00002849: 	xorl	%eax, %eax
    0000284b: 	callq	__printf_chk@PLT # Offset: 10315
    00002850: 	movl	iterations(%rip), %r8d
    00002857: 	addl	$0x1, %ebx
    0000285a: 	cmpl	%r8d, %ebx
    0000285d: 	jl	.Ltmp1883 # Offset: 10333
    00002863: 	jmp	.Ltmp1875 # Offset: 10339
.Ltmp2005:
    00002868: 	movq	0xe0(%rsp), %rdx
    00002870: 	movq	%rbp, %rsi
    00002873: 	movl	$0x1, %edi
    00002878: 	xorl	%eax, %eax
    0000287a: 	callq	__printf_chk@PLT # Offset: 10362
    0000287f: 	addl	$0x1, %ebx
    00002882: 	cmpl	iterations(%rip), %ebx
    00002888: 	jl	.Ltmp2007 # Offset: 10376
    0000288e: 	jmp	.Ltmp2002 # Offset: 10382
.Ltmp1927:
    00002893: 	movq	0xe0(%rsp), %rdx
    0000289b: 	leaq	DATAat0x141cf(%rip), %rsi
    000028a2: 	movl	$0x1, %edi
    000028a7: 	xorl	%eax, %eax
    000028a9: 	callq	__printf_chk@PLT # Offset: 10409
    000028ae: 	addl	$0x1, %ebx
    000028b1: 	cmpl	iterations(%rip), %ebx
    000028b7: 	jl	.Ltmp1929 # Offset: 10423
    000028bd: 	jmp	.Ltmp1926 # Offset: 10429
.Ltmp1998:
    000028c2: 	movq	0xe0(%rsp), %rdx
    000028ca: 	leaq	DATAat0x141cf(%rip), %rsi
    000028d1: 	movl	$0x1, %edi
    000028d6: 	xorl	%eax, %eax
    000028d8: 	callq	__printf_chk@PLT # Offset: 10456
    000028dd: 	addl	$0x1, %ebx
    000028e0: 	cmpl	iterations(%rip), %ebx
    000028e6: 	jl	.Ltmp2000 # Offset: 10470
    000028ec: 	jmp	.Ltmp1995 # Offset: 10476
.Ltmp1911:
    000028f1: 	movq	0xe0(%rsp), %rdx
    000028f9: 	leaq	DATAat0x141cf(%rip), %rsi
    00002900: 	movl	$0x1, %edi
    00002905: 	xorl	%eax, %eax
    00002907: 	callq	__printf_chk@PLT # Offset: 10503
    0000290c: 	movl	iterations(%rip), %r8d
    00002913: 	addl	$0x1, %ebx
    00002916: 	cmpl	%r8d, %ebx
    00002919: 	jl	.Ltmp1913 # Offset: 10521
    0000291f: 	jmp	.Ltmp1905 # Offset: 10527
.Ltmp1919:
    00002924: 	movq	0xe0(%rsp), %rdx
    0000292c: 	leaq	DATAat0x141cf(%rip), %rsi
    00002933: 	movl	$0x1, %edi
    00002938: 	xorl	%eax, %eax
    0000293a: 	callq	__printf_chk@PLT # Offset: 10554
    0000293f: 	addl	$0x1, %ebx
    00002942: 	cmpl	iterations(%rip), %ebx
    00002948: 	jl	.Ltmp1921 # Offset: 10568
    0000294e: 	jmp	.Ltmp1918 # Offset: 10574
.Ltmp1991:
    00002953: 	movq	0xe0(%rsp), %rdx
    0000295b: 	leaq	DATAat0x141cf(%rip), %rsi
    00002962: 	movl	$0x1, %edi
    00002967: 	xorl	%eax, %eax
    00002969: 	callq	__printf_chk@PLT # Offset: 10601
    0000296e: 	addl	$0x1, %ebx
    00002971: 	cmpl	iterations(%rip), %ebx
    00002977: 	jl	.Ltmp1993 # Offset: 10615
    0000297d: 	jmp	.Ltmp1988 # Offset: 10621
.Ltmp1984:
    00002982: 	movq	0xe0(%rsp), %rdx
    0000298a: 	leaq	DATAat0x141cf(%rip), %rsi
    00002991: 	movl	$0x1, %edi
    00002996: 	xorl	%eax, %eax
    00002998: 	callq	__printf_chk@PLT # Offset: 10648
    0000299d: 	jmp	.Ltmp2018 # Offset: 10653
.Ltmp1972:
    000029a2: 	movq	0xe0(%rsp), %rdx
    000029aa: 	leaq	DATAat0x141cf(%rip), %rsi
    000029b1: 	movl	$0x1, %edi
    000029b6: 	xorl	%eax, %eax
    000029b8: 	callq	__printf_chk@PLT # Offset: 10680
    000029bd: 	jmp	.Ltmp2019 # Offset: 10685
.Ltmp1960:
    000029c2: 	movq	0xe0(%rsp), %rdx
    000029ca: 	leaq	DATAat0x141cf(%rip), %rsi
    000029d1: 	movl	$0x1, %edi
    000029d6: 	xorl	%eax, %eax
    000029d8: 	callq	__printf_chk@PLT # Offset: 10712
    000029dd: 	jmp	.Ltmp2020 # Offset: 10717
.Ltmp1948:
    000029e2: 	movq	0xe0(%rsp), %rdx
    000029ea: 	leaq	DATAat0x141cf(%rip), %rsi
    000029f1: 	movl	$0x1, %edi
    000029f6: 	xorl	%eax, %eax
    000029f8: 	callq	__printf_chk@PLT # Offset: 10744
    000029fd: 	addl	$0x1, %ebx
    00002a00: 	cmpl	iterations(%rip), %ebx
    00002a06: 	jl	.Ltmp1950 # Offset: 10758
    00002a0c: 	jmp	.Ltmp1947 # Offset: 10764
.Ltmp1938:
    00002a11: 	movq	0xe0(%rsp), %rdx
    00002a19: 	leaq	DATAat0x141cf(%rip), %rsi
    00002a20: 	movl	$0x1, %edi
    00002a25: 	xorl	%eax, %eax
    00002a27: 	callq	__printf_chk@PLT # Offset: 10791
    00002a2c: 	addl	$0x1, %ebx
    00002a2f: 	cmpl	iterations(%rip), %ebx
    00002a35: 	jl	.Ltmp1940 # Offset: 10805
    00002a3b: 	jmp	.Ltmp1937 # Offset: 10811
.Ltmp1943:
    00002a40: 	movq	0xe0(%rsp), %rdx
    00002a48: 	leaq	DATAat0x141cf(%rip), %rsi
    00002a4f: 	movl	$0x1, %edi
    00002a54: 	xorl	%eax, %eax
    00002a56: 	callq	__printf_chk@PLT # Offset: 10838
    00002a5b: 	addl	$0x1, %ebx
    00002a5e: 	cmpl	iterations(%rip), %ebx
    00002a64: 	jl	.Ltmp1945 # Offset: 10852
    00002a6a: 	jmp	.Ltmp1942 # Offset: 10858
.Ltmp2014:
    00002a6f: 	callq	__stack_chk_fail@PLT # Offset: 10863
    00002a74: 	endbr64
.Ltmp2022:
    00002a78: 	movq	%rax, %rbp
    00002a7b: 	jmp	.Ltmp2021 # Offset: 10875
    00002a80: 	endbr64
    00002a84: 	jmp	.Ltmp2022 # Offset: 10884
    00002a86: 	endbr64
    00002a8a: 	jmp	.Ltmp2022 # Offset: 10890
    00002a8c: 	endbr64
    00002a90: 	jmp	.Ltmp2022 # Offset: 10896
    00002a92: 	endbr64
    00002a96: 	jmp	.Ltmp2022 # Offset: 10902
    00002a98: 	endbr64
    00002a9c: 	jmp	.Ltmp2022 # Offset: 10908
    00002a9e: 	endbr64
    00002aa2: 	jmp	.Ltmp2022 # Offset: 10914
    00002aa4: 	endbr64
    00002aa8: 	jmp	.Ltmp2022 # Offset: 10920
    00002aaa: 	endbr64
    00002aae: 	jmp	.Ltmp2022 # Offset: 10926
    00002ab0: 	endbr64
    00002ab4: 	jmp	.Ltmp2022 # Offset: 10932
    00002ab6: 	endbr64
.Ltmp2024:
    00002aba: 	movq	%rax, %rbp
    00002abd: 	jmp	.Ltmp2023 # Offset: 10941
    00002abf: 	endbr64
    00002ac3: 	jmp	.Ltmp2024 # Offset: 10947
    00002ac5: 	endbr64
    00002ac9: 	jmp	.Ltmp2024 # Offset: 10953
    00002acb: 	endbr64
    00002acf: 	jmp	.Ltmp2024 # Offset: 10959
.Ltmp2023:
    00002ad1: 	movq	0xe0(%rsp), %rdi
    00002ad9: 	cmpq	0x20(%rsp), %rdi
    00002ade: 	je	.Ltmp2025 # Offset: 10974
.Ltmp2029:
    00002ae0: 	movq	0xf0(%rsp), %rax
    00002ae8: 	leaq	0x1(%rax), %rsi
    00002aec: 	callq	_ZdlPvm@PLT # Offset: 10988
.Ltmp2025:
    00002af1: 	movq	0x80(%rsp), %rdi
    00002af9: 	leaq	0x90(%rsp), %rax
    00002b01: 	cmpq	%rax, %rdi
    00002b04: 	je	.Ltmp2026 # Offset: 11012
    00002b06: 	movq	0x90(%rsp), %rax
    00002b0e: 	leaq	0x1(%rax), %rsi
    00002b12: 	callq	_ZdlPvm@PLT # Offset: 11026
.Ltmp2026:
    00002b17: 	movq	0x60(%rsp), %rdi
    00002b1c: 	leaq	0x70(%rsp), %rax
    00002b21: 	cmpq	%rax, %rdi
    00002b24: 	je	.Ltmp2027 # Offset: 11044
    00002b26: 	movq	0x70(%rsp), %rax
    00002b2b: 	leaq	0x1(%rax), %rsi
    00002b2f: 	callq	_ZdlPvm@PLT # Offset: 11055
.Ltmp2027:
    00002b34: 	movq	%rbp, %rdi
    00002b37: 	callq	_Unwind_Resume@PLT # Offset: 11063
    00002b3c: 	endbr64
    00002b40: 	movq	%rax, %rbp
    00002b43: 	jmp	.Ltmp2028 # Offset: 11075
    00002b45: 	endbr64
    00002b49: 	movq	%rax, %rbp
    00002b4c: 	jmp	.Ltmp2025 # Offset: 11084
.Ltmp2028:
    00002b4e: 	movq	0xe0(%rsp), %rdi
    00002b56: 	leaq	0xf0(%rsp), %rax
    00002b5e: 	cmpq	%rax, %rdi
    00002b61: 	jne	.Ltmp2029 # Offset: 11105
    00002b67: 	jmp	.Ltmp2025 # Offset: 11111
    00002b69: 	endbr64
.Ltmp2031:
    00002b6d: 	movq	%rax, %rbp
    00002b70: 	jmp	.Ltmp2030 # Offset: 11120
    00002b72: 	endbr64
    00002b76: 	jmp	.Ltmp2031 # Offset: 11126
.Ltmp2030:
    00002b78: 	movq	0x9d40(%rsp), %rdi
    00002b80: 	cmpq	0x8(%rsp), %rdi
    00002b85: 	je	.Ltmp2026 # Offset: 11141
.Ltmp2033:
    00002b87: 	movq	0x9d50(%rsp), %rax
    00002b8f: 	leaq	0x1(%rax), %rsi
    00002b93: 	callq	_ZdlPvm@PLT # Offset: 11155
    00002b98: 	jmp	.Ltmp2026 # Offset: 11160
    00002b9d: 	endbr64
    00002ba1: 	jmp	.Ltmp2031 # Offset: 11169
    00002ba3: 	endbr64
    00002ba7: 	jmp	.Ltmp2031 # Offset: 11175
    00002ba9: 	endbr64
    00002bad: 	jmp	.Ltmp2031 # Offset: 11181
    00002baf: 	endbr64
    00002bb3: 	jmp	.Ltmp2031 # Offset: 11187
    00002bb5: 	endbr64
    00002bb9: 	jmp	.Ltmp2031 # Offset: 11193
    00002bbb: 	endbr64
    00002bbf: 	jmp	.Ltmp2031 # Offset: 11199
    00002bc1: 	endbr64
    00002bc5: 	movq	%rax, %rbp
    00002bc8: 	jmp	.Ltmp2032 # Offset: 11208
    00002bca: 	endbr64
    00002bce: 	movq	%rax, %rbp
    00002bd1: 	jmp	.Ltmp2026 # Offset: 11217
.Ltmp2032:
    00002bd6: 	movq	0x9d40(%rsp), %rdi
    00002bde: 	leaq	0x9d50(%rsp), %rax
    00002be6: 	cmpq	%rax, %rdi
    00002be9: 	jne	.Ltmp2033 # Offset: 11241
    00002beb: 	jmp	.Ltmp2026 # Offset: 11243
    00002bf0: 	endbr64
.Ltmp2035:
    00002bf4: 	movq	%rax, %rbp
    00002bf7: 	jmp	.Ltmp2034 # Offset: 11255
    00002bf9: 	endbr64
    00002bfd: 	jmp	.Ltmp2035 # Offset: 11261
    00002bff: 	endbr64
    00002c03: 	jmp	.Ltmp2035 # Offset: 11267
    00002c05: 	endbr64
    00002c09: 	movq	%rax, %rbp
    00002c0c: 	jmp	.Ltmp2036 # Offset: 11276
.Ltmp2034:
    00002c0e: 	movq	0xe0(%rsp), %rdi
    00002c16: 	cmpq	0x20(%rsp), %rdi
    00002c1b: 	je	.Ltmp2036 # Offset: 11291
    00002c1d: 	movq	0xf0(%rsp), %rax
    00002c25: 	leaq	0x1(%rax), %rsi
    00002c29: 	callq	_ZdlPvm@PLT # Offset: 11305
.Ltmp2036:
    00002c2e: 	movq	0xa0(%rsp), %rdi
    00002c36: 	leaq	0xb0(%rsp), %rax
    00002c3e: 	cmpq	%rax, %rdi
    00002c41: 	je	.Ltmp2025 # Offset: 11329
    00002c47: 	movq	0xb0(%rsp), %rax
    00002c4f: 	leaq	0x1(%rax), %rsi
    00002c53: 	callq	_ZdlPvm@PLT # Offset: 11347
    00002c58: 	jmp	.Ltmp2025 # Offset: 11352
    00002c5d: 	endbr64
    00002c61: 	jmp	.Ltmp2024 # Offset: 11361
    00002c66: 	endbr64
    00002c6a: 	jmp	.Ltmp2024 # Offset: 11370
    00002c6f: 	endbr64
    00002c73: 	jmp	.Ltmp2024 # Offset: 11379
    00002c78: 	endbr64
    00002c7c: 	jmp	.Ltmp2024 # Offset: 11388
    00002c81: 	endbr64
    00002c85: 	jmp	.Ltmp2035 # Offset: 11397
    00002c8a: 	endbr64
    00002c8e: 	jmp	.Ltmp2035 # Offset: 11406
    00002c93: 	endbr64
    00002c97: 	jmp	.Ltmp2035 # Offset: 11415
    00002c9c: 	endbr64
    00002ca0: 	jmp	.Ltmp2035 # Offset: 11424
    00002ca5: 	endbr64
    00002ca9: 	jmp	.Ltmp2035 # Offset: 11433
    00002cae: 	endbr64
    00002cb2: 	jmp	.Ltmp2035 # Offset: 11442
    00002cb7: 	endbr64
    00002cbb: 	movq	%rax, %rbp
    00002cbe: 	jmp	.Ltmp2037 # Offset: 11454
.Ltmp2021:
    00002cc0: 	movq	0xe0(%rsp), %rdi
    00002cc8: 	cmpq	0x20(%rsp), %rdi
    00002ccd: 	je	.Ltmp2037 # Offset: 11469
    00002ccf: 	movq	0xf0(%rsp), %rax
    00002cd7: 	leaq	0x1(%rax), %rsi
    00002cdb: 	callq	_ZdlPvm@PLT # Offset: 11483
.Ltmp2037:
    00002ce0: 	movq	0xc0(%rsp), %rdi
    00002ce8: 	leaq	0xd0(%rsp), %rax
    00002cf0: 	cmpq	%rax, %rdi
    00002cf3: 	je	.Ltmp2036 # Offset: 11507
    00002cf9: 	movq	0xd0(%rsp), %rax
    00002d01: 	leaq	0x1(%rax), %rsi
    00002d05: 	callq	_ZdlPvm@PLT # Offset: 11525
    00002d0a: 	jmp	.Ltmp2036 # Offset: 11530
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_ZN9benchmark9__sift_inIPmmEEvlT_lT0_" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0xf800
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0xf800
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPmmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rdi
    00000010: 	movq	%rdx, %r8
    00000013: 	movq	%rcx, %r9
    00000016: 	cmpq	%r11, %rax
    00000019: 	jge	.Ltmp2038 # Offset: 25
    0000001f: 	movq	%rdx, %r10
    00000022: 	jmp	.Ltmp2039 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp2041:
    00000028: 	leaq	-0x1(%rax), %rbx
    0000002c: 	leaq	(%rax,%rax), %rcx
    00000030: 	movq	%rsi, (%rdi,%r10,8)
    00000034: 	leaq	(%rdi,%rbx,8), %rdx
    00000038: 	movq	%rbx, %rax
    0000003b: 	cmpq	%rcx, %r11
    0000003e: 	jle	.Ltmp2040 # Offset: 62
.Ltmp2042:
    00000040: 	movq	%rax, %r10
    00000043: 	movq	%rcx, %rax
.Ltmp2039:
    00000046: 	leaq	(,%rax,8), %rdx
    0000004e: 	movq	-0x8(%rdi,%rdx), %rsi
    00000053: 	addq	%rdi, %rdx
    00000056: 	movq	(%rdx), %rcx
    00000059: 	cmpq	%rcx, %rsi
    0000005c: 	jae	.Ltmp2041 # Offset: 92
    0000005e: 	movq	%rcx, (%rdi,%r10,8)
    00000062: 	leaq	0x2(%rax,%rax), %rcx
    00000067: 	cmpq	%rcx, %r11
    0000006a: 	jg	.Ltmp2042 # Offset: 106
.Ltmp2040:
    0000006c: 	cmpq	%rcx, %r11
    0000006f: 	je	.Ltmp2043 # Offset: 111
.Ltmp2048:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp2044 # Offset: 133
    00000087: 	jmp	.Ltmp2045 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2047:
    00000090: 	movq	%rsi, (%rdx)
    00000093: 	leaq	-0x1(%rcx), %rdx
    00000097: 	movq	%rdx, %rax
    0000009a: 	shrq	$0x3f, %rax
    0000009e: 	addq	%rdx, %rax
    000000a1: 	sarq	%rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	movq	%rcx, %rax
    000000aa: 	cmpq	%rcx, %r8
    000000ad: 	jge	.Ltmp2046 # Offset: 173
    000000af: 	movq	%rdx, %rcx
.Ltmp2044:
    000000b2: 	leaq	(%rdi,%rcx,8), %r10
    000000b6: 	leaq	(%rdi,%rax,8), %rdx
    000000ba: 	movq	(%r10), %rsi
    000000bd: 	cmpq	%r9, %rsi
    000000c0: 	jb	.Ltmp2047 # Offset: 192
.Ltmp2045:
    000000c2: 	movq	%r9, (%rdx)
    000000c5: 	popq	%rbx
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2046:
    000000d0: 	movq	%r10, %rdx
    000000d3: 	movq	%r9, (%rdx)
    000000d6: 	popq	%rbx
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2038:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp2045 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp2043:
    000000f0: 	movq	-0x8(%rdi,%rcx,8), %rax
    000000f5: 	movq	%rax, (%rdx)
    000000f8: 	leaq	-0x1(%rcx), %rax
    000000fc: 	leaq	(%rdi,%rax,8), %rdx
    00000100: 	jmp	.Ltmp2048 # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPmmEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI14PointerWrapperImEmEEvlT_lT0_" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0xf910
  Size        : 0xf6
  MaxSize     : 0x100
  Offset      : 0xf910
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI14PointerWrapperImEmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rcx, %r9
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp2049 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp2050 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2052:
    00000028: 	movq	%rax, %rbx
.Ltmp2050:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,8), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x8(%r10,%rsi), %r10
    00000040: 	movq	(%rcx), %rdi
    00000043: 	movq	(%r10), %r11
    00000046: 	cmpq	%rdi, %r11
    00000049: 	jbe	.Ltmp2051 # Offset: 73
    0000004b: 	movq	%rdx, %rax
    0000004e: 	movq	%r11, %rdi
    00000051: 	movq	%r10, %rcx
    00000054: 	addq	$0x1, %rdx
.Ltmp2051:
    00000058: 	addq	%rdx, %rdx
    0000005b: 	movq	%rdi, (%rsi,%rbx,8)
    0000005f: 	cmpq	%rdx, %rbp
    00000062: 	jg	.Ltmp2052 # Offset: 98
    00000064: 	je	.Ltmp2053 # Offset: 100
.Ltmp2058:
    00000066: 	leaq	-0x1(%rax), %rdx
    0000006a: 	movq	%rdx, %rdi
    0000006d: 	shrq	$0x3f, %rdi
    00000071: 	addq	%rdx, %rdi
    00000074: 	sarq	%rdi
    00000077: 	cmpq	%r8, %rax
    0000007a: 	jg	.Ltmp2054 # Offset: 122
    0000007c: 	jmp	.Ltmp2055 # Offset: 124
    0000007e: 	nop # Size: 2
.Ltmp2057:
    00000080: 	movq	%rdx, (%rcx)
    00000083: 	leaq	-0x1(%rdi), %rdx
    00000087: 	movq	%rdx, %rax
    0000008a: 	shrq	$0x3f, %rax
    0000008e: 	addq	%rdx, %rax
    00000091: 	sarq	%rax
    00000094: 	movq	%rax, %rdx
    00000097: 	movq	%rdi, %rax
    0000009a: 	cmpq	%rdi, %r8
    0000009d: 	jge	.Ltmp2056 # Offset: 157
    0000009f: 	movq	%rdx, %rdi
.Ltmp2054:
    000000a2: 	leaq	(%rsi,%rdi,8), %r10
    000000a6: 	leaq	(%rsi,%rax,8), %rcx
    000000aa: 	movq	(%r10), %rdx
    000000ad: 	cmpq	%r9, %rdx
    000000b0: 	jb	.Ltmp2057 # Offset: 176
.Ltmp2055:
    000000b2: 	movq	%r9, (%rcx)
    000000b5: 	popq	%rbx
    000000b6: 	popq	%rbp
    000000b7: 	retq # Offset: 183
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2056:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movq	%r9, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp2049:
    000000d0: 	leaq	(%rsi,%r8,8), %rcx
    000000d4: 	jne	.Ltmp2055 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2053:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,8), %rdx
    000000e8: 	movq	(%rdx), %rdi
    000000eb: 	movq	%rdi, (%rcx)
    000000ee: 	movq	%rdx, %rcx
    000000f1: 	jmp	.Ltmp2058 # Offset: 241
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI14PointerWrapperImEmEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12ValueWrapperImES2_EEvlT_lT0_" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0xfa10
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0xfa10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12ValueWrapperImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r11
    0000000c: 	movq	%rdx, %r8
    0000000f: 	movq	%rcx, %r9
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp2059 # Offset: 21
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jmp	.Ltmp2060 # Offset: 30
.Ltmp2062:
    00000020: 	leaq	0x2(%rax,%rax), %rcx
    00000025: 	movq	%rdi, (%rsi,%r10,8)
    00000029: 	cmpq	%rcx, %r11
    0000002c: 	jle	.Ltmp2061 # Offset: 44
.Ltmp2063:
    0000002e: 	movq	%rax, %r10
    00000031: 	movq	%rcx, %rax
.Ltmp2060:
    00000034: 	leaq	(,%rax,8), %rcx
    0000003c: 	leaq	(%rsi,%rcx), %rdx
    00000040: 	leaq	-0x8(%rsi,%rcx), %rcx
    00000045: 	movq	(%rdx), %rdi
    00000048: 	cmpq	(%rcx), %rdi
    0000004b: 	ja	.Ltmp2062 # Offset: 75
    0000004d: 	movq	(%rcx), %rcx
    00000050: 	leaq	-0x1(%rax), %rdi
    00000054: 	leaq	(%rsi,%rdi,8), %rdx
    00000058: 	movq	%rcx, (%rsi,%r10,8)
    0000005c: 	leaq	(%rax,%rax), %rcx
    00000060: 	movq	%rdi, %rax
    00000063: 	cmpq	%r11, %rcx
    00000066: 	jl	.Ltmp2063 # Offset: 102
.Ltmp2061:
    00000068: 	cmpq	%r11, %rcx
    0000006b: 	je	.Ltmp2064 # Offset: 107
.Ltmp2069:
    0000006d: 	leaq	-0x1(%rax), %rdi
    00000071: 	movq	%rdi, %rcx
    00000074: 	shrq	$0x3f, %rcx
    00000078: 	addq	%rdi, %rcx
    0000007b: 	sarq	%rcx
    0000007e: 	cmpq	%r8, %rax
    00000081: 	jg	.Ltmp2065 # Offset: 129
    00000083: 	jmp	.Ltmp2066 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp2068:
    00000088: 	movq	(%rdi), %rax
    0000008b: 	movq	%rax, (%rdx)
    0000008e: 	leaq	-0x1(%rcx), %rdx
    00000092: 	movq	%rdx, %rax
    00000095: 	shrq	$0x3f, %rax
    00000099: 	addq	%rdx, %rax
    0000009c: 	sarq	%rax
    0000009f: 	movq	%rax, %rdx
    000000a2: 	movq	%rcx, %rax
    000000a5: 	cmpq	%rcx, %r8
    000000a8: 	jge	.Ltmp2067 # Offset: 168
    000000aa: 	movq	%rdx, %rcx
.Ltmp2065:
    000000ad: 	leaq	(%rsi,%rcx,8), %rdi
    000000b1: 	leaq	(%rsi,%rax,8), %rdx
    000000b5: 	cmpq	%r9, (%rdi)
    000000b8: 	jb	.Ltmp2068 # Offset: 184
.Ltmp2066:
    000000ba: 	movq	%r9, (%rdx)
    000000bd: 	retq # Offset: 189
    000000be: 	nop # Size: 2
.Ltmp2067:
    000000c0: 	movq	%rdi, %rdx
    000000c3: 	movq	%r9, (%rdx)
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2059:
    000000d0: 	leaq	(%rsi,%rdx,8), %rdx
    000000d4: 	jne	.Ltmp2066 # Offset: 212
    000000d6: 	movq	%rax, %rcx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2064:
    000000e0: 	movq	-0x8(%rsi,%rcx,8), %rax
    000000e5: 	movq	%rax, (%rdx)
    000000e8: 	leaq	-0x1(%rcx), %rax
    000000ec: 	leaq	(%rsi,%rax,8), %rdx
    000000f0: 	jmp	.Ltmp2069 # Offset: 240
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12ValueWrapperImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperImEES3_EEvlT_lT0_" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0xfb10
  Size        : 0xe3
  MaxSize     : 0xf0
  Offset      : 0xfb10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperImEES3_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdx, %r9
    0000000d: 	movq	%rcx, %r10
    00000010: 	cmpq	%rdi, %rax
    00000013: 	jge	.Ltmp2070 # Offset: 19
    00000019: 	movq	%rdi, %r11
    0000001c: 	movq	%rdx, %r8
    0000001f: 	jmp	.Ltmp2071 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp2073:
    00000028: 	movq	%rcx, %r8
.Ltmp2071:
    0000002b: 	leaq	(,%rax,8), %rdx
    00000033: 	leaq	-0x1(%rax), %rcx
    00000037: 	leaq	(%rsi,%rdx), %rdi
    0000003b: 	leaq	-0x8(%rdx,%rsi), %rdx
    00000040: 	movq	(%rdx), %rbx
    00000043: 	cmpq	%rbx, (%rdi)
    00000046: 	jbe	.Ltmp2072 # Offset: 70
    00000048: 	movq	%rax, %rcx
    0000004b: 	movq	%rdi, %rdx
    0000004e: 	addq	$0x1, %rax
.Ltmp2072:
    00000052: 	movq	(%rdx), %rdi
    00000055: 	addq	%rax, %rax
    00000058: 	movq	%rdi, (%rsi,%r8,8)
    0000005c: 	cmpq	%rax, %r11
    0000005f: 	jg	.Ltmp2073 # Offset: 95
    00000061: 	je	.Ltmp2074 # Offset: 97
.Ltmp2079:
    00000063: 	leaq	-0x1(%rcx), %rax
    00000067: 	movq	%rax, %rdi
    0000006a: 	shrq	$0x3f, %rdi
    0000006e: 	addq	%rax, %rdi
    00000071: 	sarq	%rdi
    00000074: 	cmpq	%r9, %rcx
    00000077: 	jg	.Ltmp2075 # Offset: 119
    00000079: 	jmp	.Ltmp2076 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2078:
    00000080: 	movq	(%r8), %rax
    00000083: 	movq	%rdi, %rcx
    00000086: 	movq	%rax, (%rdx)
    00000089: 	leaq	-0x1(%rdi), %rdx
    0000008d: 	movq	%rdx, %rax
    00000090: 	shrq	$0x3f, %rax
    00000094: 	addq	%rdx, %rax
    00000097: 	sarq	%rax
    0000009a: 	cmpq	%rdi, %r9
    0000009d: 	jge	.Ltmp2077 # Offset: 157
    0000009f: 	movq	%rax, %rdi
.Ltmp2075:
    000000a2: 	leaq	(%rsi,%rdi,8), %r8
    000000a6: 	leaq	(%rsi,%rcx,8), %rdx
    000000aa: 	cmpq	%r10, (%r8)
    000000ad: 	jb	.Ltmp2078 # Offset: 173
.Ltmp2076:
    000000af: 	movq	%r10, (%rdx)
    000000b2: 	popq	%rbx
    000000b3: 	retq # Offset: 179
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp2077:
    000000b8: 	movq	%r8, %rdx
    000000bb: 	movq	%r10, (%rdx)
    000000be: 	popq	%rbx
    000000bf: 	retq # Offset: 191
.Ltmp2070:
    000000c0: 	leaq	(%rsi,%rdx,8), %rdx
    000000c4: 	jne	.Ltmp2076 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2074:
    000000d0: 	leaq	-0x1(%rax), %rcx
    000000d4: 	leaq	(%rsi,%rcx,8), %rax
    000000d8: 	movq	(%rax), %rdi
    000000db: 	movq	%rdi, (%rdx)
    000000de: 	movq	%rax, %rdx
    000000e1: 	jmp	.Ltmp2079 # Offset: 225
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperImEES3_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEESB_EEvlT_lT0_" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0xfc00
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0xfc00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEESB_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r11
    0000000c: 	movq	%rdx, %r8
    0000000f: 	movq	%rcx, %r9
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp2080 # Offset: 21
    0000001b: 	movq	%rdx, %r10
    0000001e: 	jmp	.Ltmp2081 # Offset: 30
.Ltmp2083:
    00000020: 	leaq	0x2(%rax,%rax), %rcx
    00000025: 	movq	%rdi, (%rsi,%r10,8)
    00000029: 	cmpq	%rcx, %r11
    0000002c: 	jle	.Ltmp2082 # Offset: 44
.Ltmp2084:
    0000002e: 	movq	%rax, %r10
    00000031: 	movq	%rcx, %rax
.Ltmp2081:
    00000034: 	leaq	(,%rax,8), %rcx
    0000003c: 	leaq	(%rsi,%rcx), %rdx
    00000040: 	leaq	-0x8(%rsi,%rcx), %rcx
    00000045: 	movq	(%rdx), %rdi
    00000048: 	cmpq	(%rcx), %rdi
    0000004b: 	ja	.Ltmp2083 # Offset: 75
    0000004d: 	movq	(%rcx), %rcx
    00000050: 	leaq	-0x1(%rax), %rdi
    00000054: 	leaq	(%rsi,%rdi,8), %rdx
    00000058: 	movq	%rcx, (%rsi,%r10,8)
    0000005c: 	leaq	(%rax,%rax), %rcx
    00000060: 	movq	%rdi, %rax
    00000063: 	cmpq	%r11, %rcx
    00000066: 	jl	.Ltmp2084 # Offset: 102
.Ltmp2082:
    00000068: 	cmpq	%r11, %rcx
    0000006b: 	je	.Ltmp2085 # Offset: 107
.Ltmp2090:
    0000006d: 	leaq	-0x1(%rax), %rdi
    00000071: 	movq	%rdi, %rcx
    00000074: 	shrq	$0x3f, %rcx
    00000078: 	addq	%rdi, %rcx
    0000007b: 	sarq	%rcx
    0000007e: 	cmpq	%r8, %rax
    00000081: 	jg	.Ltmp2086 # Offset: 129
    00000083: 	jmp	.Ltmp2087 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp2089:
    00000088: 	movq	(%rdi), %rax
    0000008b: 	movq	%rax, (%rdx)
    0000008e: 	leaq	-0x1(%rcx), %rdx
    00000092: 	movq	%rdx, %rax
    00000095: 	shrq	$0x3f, %rax
    00000099: 	addq	%rdx, %rax
    0000009c: 	sarq	%rax
    0000009f: 	movq	%rax, %rdx
    000000a2: 	movq	%rcx, %rax
    000000a5: 	cmpq	%rcx, %r8
    000000a8: 	jge	.Ltmp2088 # Offset: 168
    000000aa: 	movq	%rdx, %rcx
.Ltmp2086:
    000000ad: 	leaq	(%rsi,%rcx,8), %rdi
    000000b1: 	leaq	(%rsi,%rax,8), %rdx
    000000b5: 	cmpq	%r9, (%rdi)
    000000b8: 	jb	.Ltmp2089 # Offset: 184
.Ltmp2087:
    000000ba: 	movq	%r9, (%rdx)
    000000bd: 	retq # Offset: 189
    000000be: 	nop # Size: 2
.Ltmp2088:
    000000c0: 	movq	%rdi, %rdx
    000000c3: 	movq	%r9, (%rdx)
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2080:
    000000d0: 	leaq	(%rsi,%rdx,8), %rdx
    000000d4: 	jne	.Ltmp2087 # Offset: 212
    000000d6: 	movq	%rax, %rcx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2085:
    000000e0: 	movq	-0x8(%rsi,%rcx,8), %rax
    000000e5: 	movq	%rax, (%rdx)
    000000e8: 	leaq	-0x1(%rcx), %rax
    000000ec: 	leaq	(%rsi,%rax,8), %rdx
    000000f0: 	jmp	.Ltmp2090 # Offset: 240
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEESB_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEESC_EEvlT_lT0_" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0xfd00
  Size        : 0xe3
  MaxSize     : 0xf0
  Offset      : 0xfd00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEESC_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdx, %r9
    0000000d: 	movq	%rcx, %r10
    00000010: 	cmpq	%rdi, %rax
    00000013: 	jge	.Ltmp2091 # Offset: 19
    00000019: 	movq	%rdi, %r11
    0000001c: 	movq	%rdx, %r8
    0000001f: 	jmp	.Ltmp2092 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp2094:
    00000028: 	movq	%rcx, %r8
.Ltmp2092:
    0000002b: 	leaq	(,%rax,8), %rdx
    00000033: 	leaq	-0x1(%rax), %rcx
    00000037: 	leaq	(%rsi,%rdx), %rdi
    0000003b: 	leaq	-0x8(%rdx,%rsi), %rdx
    00000040: 	movq	(%rdx), %rbx
    00000043: 	cmpq	%rbx, (%rdi)
    00000046: 	jbe	.Ltmp2093 # Offset: 70
    00000048: 	movq	%rax, %rcx
    0000004b: 	movq	%rdi, %rdx
    0000004e: 	addq	$0x1, %rax
.Ltmp2093:
    00000052: 	movq	(%rdx), %rdi
    00000055: 	addq	%rax, %rax
    00000058: 	movq	%rdi, (%rsi,%r8,8)
    0000005c: 	cmpq	%rax, %r11
    0000005f: 	jg	.Ltmp2094 # Offset: 95
    00000061: 	je	.Ltmp2095 # Offset: 97
.Ltmp2100:
    00000063: 	leaq	-0x1(%rcx), %rax
    00000067: 	movq	%rax, %rdi
    0000006a: 	shrq	$0x3f, %rdi
    0000006e: 	addq	%rax, %rdi
    00000071: 	sarq	%rdi
    00000074: 	cmpq	%r9, %rcx
    00000077: 	jg	.Ltmp2096 # Offset: 119
    00000079: 	jmp	.Ltmp2097 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2099:
    00000080: 	movq	(%r8), %rax
    00000083: 	movq	%rdi, %rcx
    00000086: 	movq	%rax, (%rdx)
    00000089: 	leaq	-0x1(%rdi), %rdx
    0000008d: 	movq	%rdx, %rax
    00000090: 	shrq	$0x3f, %rax
    00000094: 	addq	%rdx, %rax
    00000097: 	sarq	%rax
    0000009a: 	cmpq	%rdi, %r9
    0000009d: 	jge	.Ltmp2098 # Offset: 157
    0000009f: 	movq	%rax, %rdi
.Ltmp2096:
    000000a2: 	leaq	(%rsi,%rdi,8), %r8
    000000a6: 	leaq	(%rsi,%rcx,8), %rdx
    000000aa: 	cmpq	%r10, (%r8)
    000000ad: 	jb	.Ltmp2099 # Offset: 173
.Ltmp2097:
    000000af: 	movq	%r10, (%rdx)
    000000b2: 	popq	%rbx
    000000b3: 	retq # Offset: 179
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp2098:
    000000b8: 	movq	%r8, %rdx
    000000bb: 	movq	%r10, (%rdx)
    000000be: 	popq	%rbx
    000000bf: 	retq # Offset: 191
.Ltmp2091:
    000000c0: 	leaq	(%rsi,%rdx,8), %rdx
    000000c4: 	jne	.Ltmp2097 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2095:
    000000d0: 	leaq	-0x1(%rax), %rcx
    000000d4: 	leaq	(%rsi,%rcx,8), %rax
    000000d8: 	movq	(%rax), %rdi
    000000db: 	movq	%rdi, (%rdx)
    000000de: 	movq	%rax, %rdx
    000000e1: 	jmp	.Ltmp2100 # Offset: 225
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEESC_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPmmEmEmEEvlT_lT0_" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0xfdf0
  Size        : 0xf6
  MaxSize     : 0x100
  Offset      : 0xfdf0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPmmEmEmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rcx, %r9
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp2101 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp2102 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2104:
    00000028: 	movq	%rax, %rbx
.Ltmp2102:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,8), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x8(%r10,%rsi), %r10
    00000040: 	movq	(%rcx), %rdi
    00000043: 	movq	(%r10), %r11
    00000046: 	cmpq	%rdi, %r11
    00000049: 	jbe	.Ltmp2103 # Offset: 73
    0000004b: 	movq	%rdx, %rax
    0000004e: 	movq	%r11, %rdi
    00000051: 	movq	%r10, %rcx
    00000054: 	addq	$0x1, %rdx
.Ltmp2103:
    00000058: 	addq	%rdx, %rdx
    0000005b: 	movq	%rdi, (%rsi,%rbx,8)
    0000005f: 	cmpq	%rdx, %rbp
    00000062: 	jg	.Ltmp2104 # Offset: 98
    00000064: 	je	.Ltmp2105 # Offset: 100
.Ltmp2110:
    00000066: 	leaq	-0x1(%rax), %rdx
    0000006a: 	movq	%rdx, %rdi
    0000006d: 	shrq	$0x3f, %rdi
    00000071: 	addq	%rdx, %rdi
    00000074: 	sarq	%rdi
    00000077: 	cmpq	%r8, %rax
    0000007a: 	jg	.Ltmp2106 # Offset: 122
    0000007c: 	jmp	.Ltmp2107 # Offset: 124
    0000007e: 	nop # Size: 2
.Ltmp2109:
    00000080: 	movq	%rdx, (%rcx)
    00000083: 	leaq	-0x1(%rdi), %rdx
    00000087: 	movq	%rdx, %rax
    0000008a: 	shrq	$0x3f, %rax
    0000008e: 	addq	%rdx, %rax
    00000091: 	sarq	%rax
    00000094: 	movq	%rax, %rdx
    00000097: 	movq	%rdi, %rax
    0000009a: 	cmpq	%rdi, %r8
    0000009d: 	jge	.Ltmp2108 # Offset: 157
    0000009f: 	movq	%rdx, %rdi
.Ltmp2106:
    000000a2: 	leaq	(%rsi,%rdi,8), %r10
    000000a6: 	leaq	(%rsi,%rax,8), %rcx
    000000aa: 	movq	(%r10), %rdx
    000000ad: 	cmpq	%r9, %rdx
    000000b0: 	jb	.Ltmp2109 # Offset: 176
.Ltmp2107:
    000000b2: 	movq	%r9, (%rcx)
    000000b5: 	popq	%rbx
    000000b6: 	popq	%rbp
    000000b7: 	retq # Offset: 183
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2108:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movq	%r9, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp2101:
    000000d0: 	leaq	(%rsi,%r8,8), %rcx
    000000d4: 	jne	.Ltmp2107 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2105:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,8), %rdx
    000000e8: 	movq	(%rdx), %rdi
    000000eb: 	movq	%rdi, (%rcx)
    000000ee: 	movq	%rdx, %rcx
    000000f1: 	jmp	.Ltmp2110 # Offset: 241
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPmmEmEmEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperImEmEmEmEEvlT_lT0_" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0xfef0
  Size        : 0xf6
  MaxSize     : 0x100
  Offset      : 0xfef0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperImEmEmEmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rcx, %r9
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp2111 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp2112 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2114:
    00000028: 	movq	%rax, %rbx
.Ltmp2112:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,8), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x8(%r10,%rsi), %r10
    00000040: 	movq	(%rcx), %rdi
    00000043: 	movq	(%r10), %r11
    00000046: 	cmpq	%rdi, %r11
    00000049: 	jbe	.Ltmp2113 # Offset: 73
    0000004b: 	movq	%rdx, %rax
    0000004e: 	movq	%r11, %rdi
    00000051: 	movq	%r10, %rcx
    00000054: 	addq	$0x1, %rdx
.Ltmp2113:
    00000058: 	addq	%rdx, %rdx
    0000005b: 	movq	%rdi, (%rsi,%rbx,8)
    0000005f: 	cmpq	%rdx, %rbp
    00000062: 	jg	.Ltmp2114 # Offset: 98
    00000064: 	je	.Ltmp2115 # Offset: 100
.Ltmp2120:
    00000066: 	leaq	-0x1(%rax), %rdx
    0000006a: 	movq	%rdx, %rdi
    0000006d: 	shrq	$0x3f, %rdi
    00000071: 	addq	%rdx, %rdi
    00000074: 	sarq	%rdi
    00000077: 	cmpq	%r8, %rax
    0000007a: 	jg	.Ltmp2116 # Offset: 122
    0000007c: 	jmp	.Ltmp2117 # Offset: 124
    0000007e: 	nop # Size: 2
.Ltmp2119:
    00000080: 	movq	%rdx, (%rcx)
    00000083: 	leaq	-0x1(%rdi), %rdx
    00000087: 	movq	%rdx, %rax
    0000008a: 	shrq	$0x3f, %rax
    0000008e: 	addq	%rdx, %rax
    00000091: 	sarq	%rax
    00000094: 	movq	%rax, %rdx
    00000097: 	movq	%rdi, %rax
    0000009a: 	cmpq	%rdi, %r8
    0000009d: 	jge	.Ltmp2118 # Offset: 157
    0000009f: 	movq	%rdx, %rdi
.Ltmp2116:
    000000a2: 	leaq	(%rsi,%rdi,8), %r10
    000000a6: 	leaq	(%rsi,%rax,8), %rcx
    000000aa: 	movq	(%r10), %rdx
    000000ad: 	cmpq	%r9, %rdx
    000000b0: 	jb	.Ltmp2119 # Offset: 176
.Ltmp2117:
    000000b2: 	movq	%r9, (%rcx)
    000000b5: 	popq	%rbx
    000000b6: 	popq	%rbp
    000000b7: 	retq # Offset: 183
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2118:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movq	%r9, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp2111:
    000000d0: 	leaq	(%rsi,%r8,8), %rcx
    000000d4: 	jne	.Ltmp2117 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2115:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,8), %rdx
    000000e8: 	movq	(%rdx), %rdi
    000000eb: 	movq	%rdi, (%rcx)
    000000ee: 	movq	%rdx, %rcx
    000000f1: 	jmp	.Ltmp2120 # Offset: 241
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperImEmEmEmEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_ES4_EEvlT_lT0_" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0xfff0
  Size        : 0xe3
  MaxSize     : 0xf0
  Offset      : 0xfff0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_ES4_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdx, %r9
    0000000d: 	movq	%rcx, %r10
    00000010: 	cmpq	%rdi, %rax
    00000013: 	jge	.Ltmp2121 # Offset: 19
    00000019: 	movq	%rdi, %r11
    0000001c: 	movq	%rdx, %r8
    0000001f: 	jmp	.Ltmp2122 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp2124:
    00000028: 	movq	%rcx, %r8
.Ltmp2122:
    0000002b: 	leaq	(,%rax,8), %rdx
    00000033: 	leaq	-0x1(%rax), %rcx
    00000037: 	leaq	(%rsi,%rdx), %rdi
    0000003b: 	leaq	-0x8(%rdx,%rsi), %rdx
    00000040: 	movq	(%rdx), %rbx
    00000043: 	cmpq	%rbx, (%rdi)
    00000046: 	jbe	.Ltmp2123 # Offset: 70
    00000048: 	movq	%rax, %rcx
    0000004b: 	movq	%rdi, %rdx
    0000004e: 	addq	$0x1, %rax
.Ltmp2123:
    00000052: 	movq	(%rdx), %rdi
    00000055: 	addq	%rax, %rax
    00000058: 	movq	%rdi, (%rsi,%r8,8)
    0000005c: 	cmpq	%rax, %r11
    0000005f: 	jg	.Ltmp2124 # Offset: 95
    00000061: 	je	.Ltmp2125 # Offset: 97
.Ltmp2130:
    00000063: 	leaq	-0x1(%rcx), %rax
    00000067: 	movq	%rax, %rdi
    0000006a: 	shrq	$0x3f, %rdi
    0000006e: 	addq	%rax, %rdi
    00000071: 	sarq	%rdi
    00000074: 	cmpq	%r9, %rcx
    00000077: 	jg	.Ltmp2126 # Offset: 119
    00000079: 	jmp	.Ltmp2127 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2129:
    00000080: 	movq	(%r8), %rax
    00000083: 	movq	%rdi, %rcx
    00000086: 	movq	%rax, (%rdx)
    00000089: 	leaq	-0x1(%rdi), %rdx
    0000008d: 	movq	%rdx, %rax
    00000090: 	shrq	$0x3f, %rax
    00000094: 	addq	%rdx, %rax
    00000097: 	sarq	%rax
    0000009a: 	cmpq	%rdi, %r9
    0000009d: 	jge	.Ltmp2128 # Offset: 157
    0000009f: 	movq	%rax, %rdi
.Ltmp2126:
    000000a2: 	leaq	(%rsi,%rdi,8), %r8
    000000a6: 	leaq	(%rsi,%rcx,8), %rdx
    000000aa: 	cmpq	%r10, (%r8)
    000000ad: 	jb	.Ltmp2129 # Offset: 173
.Ltmp2127:
    000000af: 	movq	%r10, (%rdx)
    000000b2: 	popq	%rbx
    000000b3: 	retq # Offset: 179
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp2128:
    000000b8: 	movq	%r8, %rdx
    000000bb: 	movq	%r10, (%rdx)
    000000be: 	popq	%rbx
    000000bf: 	retq # Offset: 191
.Ltmp2121:
    000000c0: 	leaq	(%rsi,%rdx,8), %rdx
    000000c4: 	jne	.Ltmp2127 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2125:
    000000d0: 	leaq	-0x1(%rax), %rcx
    000000d4: 	leaq	(%rsi,%rcx,8), %rax
    000000d8: 	movq	(%rax), %rdi
    000000db: 	movq	%rdi, (%rdx)
    000000de: 	movq	%rax, %rdx
    000000e1: 	jmp	.Ltmp2130 # Offset: 225
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_ES4_EEvlT_lT0_"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x100e0
  Size        : 0x3080
  MaxSize     : 0x3080
  Offset      : 0x100e0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x17000(%rsp), %r11
.Ltmp2131:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp2131 # Offset: 37
    00000027: 	subq	$0x818, %rsp
    0000002e: 	leaq	DATAat0x1484a(%rip), %rsi
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x17808(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	leaq	0x60(%rsp), %rax
    0000004d: 	movq	%rax, %rdi
    00000050: 	movq	%rax, 0x30(%rsp)
    00000055: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 85
    0000005a: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm2
    00000062: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    0000006a: 	leaq	0x40(%rsp), %rsi
    0000006f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000076: 	movaps	%xmm2, 0x40(%rsp)
    0000007b: 	movaps	%xmm3, 0x50(%rsp)
    00000080: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 128
    00000085: 	movl	iterations(%rip), %eax
    0000008b: 	movsd	init_value(%rip), %xmm0
    00000093: 	movl	%eax, 0x3c(%rsp)
    00000097: 	cvttsd2si	%xmm0, %eax
    0000009b: 	addl	$0x7b, %eax
    0000009e: 	comisd	DATAat0x14880(%rip), %xmm0
    000000a6: 	cltq
    000000a8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000af: 	jae	.Ltmp2132 # Offset: 175
    000000b5: 	cvttsd2si	%xmm0, %rax
.Ltmp2381:
    000000ba: 	movq	%rax, %xmm0
    000000bf: 	leaq	0x100(%rsp), %rbp
    000000c7: 	leaq	0x3f80(%rsp), %rbx
    000000cf: 	punpcklqdq	%xmm0, %xmm0
    000000d3: 	movq	%rbp, %rax
.Ltmp2133:
    000000d6: 	movaps	%xmm0, (%rax)
    000000d9: 	addq	$0x10, %rax
    000000dd: 	cmpq	%rax, %rbx
    000000e0: 	jne	.Ltmp2133 # Offset: 224
    000000e2: 	leaq	0x7e00(%rsp), %r12
    000000ea: 	movq	%rbx, %rax
.Ltmp2134:
    000000ed: 	movaps	%xmm0, (%rax)
    000000f0: 	addq	$0x10, %rax
    000000f4: 	cmpq	%rax, %r12
    000000f7: 	jne	.Ltmp2134 # Offset: 247
    000000f9: 	leaq	0xbc80(%rsp), %r15
    00000101: 	movq	%r12, %rax
.Ltmp2135:
    00000104: 	movaps	%xmm0, (%rax)
    00000107: 	addq	$0x10, %rax
    0000010b: 	cmpq	%rax, %r15
    0000010e: 	jne	.Ltmp2135 # Offset: 270
    00000110: 	leaq	0x13980(%rsp), %rax
    00000118: 	movq	0x30(%rsp), %rsi
    0000011d: 	leaq	DATAat0x141eb(%rip), %rdx
    00000124: 	movq	%rax, %rdi
    00000127: 	movq	%rax, 0x18(%rsp)
    0000012c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 300
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	movl	iterations(%rip), %ecx
    0000013c: 	xorl	%r13d, %r13d
    0000013f: 	movsd	DATAat0x14878(%rip), %xmm4
    00000147: 	movq	%rax, start_time(%rip)
    0000014e: 	movabsq	$-0x8000000000000000, %r14
    00000158: 	movsd	%xmm4, 0x8(%rsp)
    0000015e: 	testl	%ecx, %ecx
    00000160: 	jle	.Ltmp2136 # Offset: 352
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2140:
    00000168: 	movq	%rbp, %rax
    0000016b: 	pxor	%xmm0, %xmm0
    0000016f: 	nop # Size: 1
.Ltmp2137:
    00000170: 	paddq	(%rax), %xmm0
    00000174: 	addq	$0x10, %rax
    00000178: 	cmpq	%rax, %rbx
    0000017b: 	jne	.Ltmp2137 # Offset: 379
    0000017d: 	movsd	0x8(%rsp), %xmm1
    00000183: 	mulsd	init_value(%rip), %xmm1
    0000018b: 	comisd	DATAat0x14880(%rip), %xmm1
    00000193: 	jae	.Ltmp2138 # Offset: 403
    00000199: 	cvttsd2si	%xmm1, %rdx
.Ltmp2380:
    0000019e: 	movdqa	%xmm0, %xmm1
    000001a2: 	psrldq	$0x8, %xmm1
    000001a7: 	paddq	%xmm1, %xmm0
    000001ab: 	movq	%xmm0, %rax
    000001b0: 	cmpq	%rax, %rdx
    000001b3: 	je	.Ltmp2139 # Offset: 435
    000001b5: 	movq	0x13980(%rsp), %rdx
    000001bd: 	leaq	DATAat0x141d4(%rip), %rsi
    000001c4: 	movl	$0x1, %edi
    000001c9: 	xorl	%eax, %eax
    000001cb: 	callq	__printf_chk@PLT # Offset: 459
    000001d0: 	movl	iterations(%rip), %ecx
.Ltmp2139:
    000001d6: 	addl	$0x1, %r13d
    000001da: 	cmpl	%ecx, %r13d
    000001dd: 	jl	.Ltmp2140 # Offset: 477
.Ltmp2136:
    000001df: 	callq	clock@PLT # Offset: 479
    000001e4: 	movq	0x18(%rsp), %rdi
    000001e9: 	pxor	%xmm0, %xmm0
    000001ed: 	movq	%rax, end_time(%rip)
    000001f4: 	subq	start_time(%rip), %rax
    000001fb: 	cvtsi2sd	%rax, %xmm0
    00000200: 	divsd	DATAat0x14868(%rip), %xmm0
    00000208: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 520
    0000020d: 	movq	0x13980(%rsp), %rdi
    00000215: 	leaq	0x13990(%rsp), %r14
    0000021d: 	cmpq	%r14, %rdi
    00000220: 	je	.Ltmp2141 # Offset: 544
    00000222: 	movq	0x13990(%rsp), %rax
    0000022a: 	leaq	0x1(%rax), %rsi
    0000022e: 	callq	_ZdlPvm@PLT # Offset: 558
.Ltmp2141:
    00000233: 	movq	0x30(%rsp), %rsi
    00000238: 	movq	0x18(%rsp), %rdi
    0000023d: 	leaq	DATAat0x141ff(%rip), %rdx
    00000244: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 580
    00000249: 	callq	clock@PLT # Offset: 585
    0000024e: 	movsd	DATAat0x14878(%rip), %xmm5
    00000256: 	movl	iterations(%rip), %ecx
    0000025c: 	xorl	%r13d, %r13d
    0000025f: 	movq	%rax, start_time(%rip)
    00000266: 	movsd	%xmm5, 0x8(%rsp)
    0000026c: 	testl	%ecx, %ecx
    0000026e: 	jle	.Ltmp2142 # Offset: 622
.Ltmp2146:
    00000270: 	movq	%rbp, %rax
    00000273: 	pxor	%xmm0, %xmm0
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2143:
    00000280: 	paddq	(%rax), %xmm0
    00000284: 	addq	$0x10, %rax
    00000288: 	cmpq	%rax, %rbx
    0000028b: 	jne	.Ltmp2143 # Offset: 651
    0000028d: 	movsd	0x8(%rsp), %xmm1
    00000293: 	mulsd	init_value(%rip), %xmm1
    0000029b: 	comisd	DATAat0x14880(%rip), %xmm1
    000002a3: 	jae	.Ltmp2144 # Offset: 675
    000002a9: 	cvttsd2si	%xmm1, %rdx
.Ltmp2379:
    000002ae: 	movdqa	%xmm0, %xmm1
    000002b2: 	psrldq	$0x8, %xmm1
    000002b7: 	paddq	%xmm1, %xmm0
    000002bb: 	movq	%xmm0, %rax
    000002c0: 	cmpq	%rax, %rdx
    000002c3: 	je	.Ltmp2145 # Offset: 707
    000002c5: 	movq	0x13980(%rsp), %rdx
    000002cd: 	leaq	DATAat0x141d4(%rip), %rsi
    000002d4: 	movl	$0x1, %edi
    000002d9: 	xorl	%eax, %eax
    000002db: 	callq	__printf_chk@PLT # Offset: 731
    000002e0: 	movl	iterations(%rip), %ecx
.Ltmp2145:
    000002e6: 	addl	$0x1, %r13d
    000002ea: 	cmpl	%ecx, %r13d
    000002ed: 	jl	.Ltmp2146 # Offset: 749
.Ltmp2142:
    000002ef: 	callq	clock@PLT # Offset: 751
    000002f4: 	movq	0x18(%rsp), %rdi
    000002f9: 	pxor	%xmm0, %xmm0
    000002fd: 	movq	%rax, end_time(%rip)
    00000304: 	subq	start_time(%rip), %rax
    0000030b: 	cvtsi2sd	%rax, %xmm0
    00000310: 	divsd	DATAat0x14868(%rip), %xmm0
    00000318: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 792
    0000031d: 	movq	0x13980(%rsp), %rdi
    00000325: 	cmpq	%r14, %rdi
    00000328: 	je	.Ltmp2147 # Offset: 808
    0000032a: 	movq	0x13990(%rsp), %rax
    00000332: 	leaq	0x1(%rax), %rsi
    00000336: 	callq	_ZdlPvm@PLT # Offset: 822
.Ltmp2147:
    0000033b: 	movq	0x30(%rsp), %rsi
    00000340: 	movq	0x18(%rsp), %rdi
    00000345: 	leaq	DATAat0x14310(%rip), %rdx
    0000034c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 844
    00000351: 	callq	clock@PLT # Offset: 849
    00000356: 	movsd	DATAat0x14878(%rip), %xmm6
    0000035e: 	movl	iterations(%rip), %ecx
    00000364: 	xorl	%r13d, %r13d
    00000367: 	movq	%rax, start_time(%rip)
    0000036e: 	movsd	%xmm6, 0x8(%rsp)
    00000374: 	testl	%ecx, %ecx
    00000376: 	jle	.Ltmp2148 # Offset: 886
    0000037c: 	nopl	(%rax) # Size: 4
.Ltmp2152:
    00000380: 	movq	%rbx, %rax
    00000383: 	pxor	%xmm0, %xmm0
    00000387: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2149:
    00000390: 	paddq	(%rax), %xmm0
    00000394: 	addq	$0x10, %rax
    00000398: 	cmpq	%rax, %r12
    0000039b: 	jne	.Ltmp2149 # Offset: 923
    0000039d: 	movsd	0x8(%rsp), %xmm1
    000003a3: 	mulsd	init_value(%rip), %xmm1
    000003ab: 	comisd	DATAat0x14880(%rip), %xmm1
    000003b3: 	jae	.Ltmp2150 # Offset: 947
    000003b9: 	cvttsd2si	%xmm1, %rdx
.Ltmp2378:
    000003be: 	movdqa	%xmm0, %xmm1
    000003c2: 	psrldq	$0x8, %xmm1
    000003c7: 	paddq	%xmm1, %xmm0
    000003cb: 	movq	%xmm0, %rax
    000003d0: 	cmpq	%rax, %rdx
    000003d3: 	je	.Ltmp2151 # Offset: 979
    000003d5: 	movq	0x13980(%rsp), %rdx
    000003dd: 	leaq	DATAat0x141d4(%rip), %rsi
    000003e4: 	movl	$0x1, %edi
    000003e9: 	xorl	%eax, %eax
    000003eb: 	callq	__printf_chk@PLT # Offset: 1003
    000003f0: 	movl	iterations(%rip), %ecx
.Ltmp2151:
    000003f6: 	addl	$0x1, %r13d
    000003fa: 	cmpl	%ecx, %r13d
    000003fd: 	jl	.Ltmp2152 # Offset: 1021
.Ltmp2148:
    000003ff: 	callq	clock@PLT # Offset: 1023
    00000404: 	movq	0x18(%rsp), %rdi
    00000409: 	pxor	%xmm0, %xmm0
    0000040d: 	movq	%rax, end_time(%rip)
    00000414: 	subq	start_time(%rip), %rax
    0000041b: 	cvtsi2sd	%rax, %xmm0
    00000420: 	divsd	DATAat0x14868(%rip), %xmm0
    00000428: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1064
    0000042d: 	movq	0x13980(%rsp), %rdi
    00000435: 	cmpq	%r14, %rdi
    00000438: 	je	.Ltmp2153 # Offset: 1080
    0000043a: 	movq	0x13990(%rsp), %rax
    00000442: 	leaq	0x1(%rax), %rsi
    00000446: 	callq	_ZdlPvm@PLT # Offset: 1094
.Ltmp2153:
    0000044b: 	movq	0x30(%rsp), %rsi
    00000450: 	movq	0x18(%rsp), %rdi
    00000455: 	leaq	DATAat0x14338(%rip), %rdx
    0000045c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1116
    00000461: 	callq	clock@PLT # Offset: 1121
    00000466: 	movsd	DATAat0x14878(%rip), %xmm7
    0000046e: 	movl	iterations(%rip), %ecx
    00000474: 	xorl	%r13d, %r13d
    00000477: 	movq	%rax, start_time(%rip)
    0000047e: 	movsd	%xmm7, 0x8(%rsp)
    00000484: 	testl	%ecx, %ecx
    00000486: 	jle	.Ltmp2154 # Offset: 1158
    0000048c: 	nopl	(%rax) # Size: 4
.Ltmp2158:
    00000490: 	movq	%rbx, %rax
    00000493: 	pxor	%xmm0, %xmm0
    00000497: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2155:
    000004a0: 	paddq	(%rax), %xmm0
    000004a4: 	addq	$0x10, %rax
    000004a8: 	cmpq	%rax, %r12
    000004ab: 	jne	.Ltmp2155 # Offset: 1195
    000004ad: 	movsd	0x8(%rsp), %xmm1
    000004b3: 	mulsd	init_value(%rip), %xmm1
    000004bb: 	comisd	DATAat0x14880(%rip), %xmm1
    000004c3: 	jae	.Ltmp2156 # Offset: 1219
    000004c9: 	cvttsd2si	%xmm1, %rdx
.Ltmp2377:
    000004ce: 	movdqa	%xmm0, %xmm1
    000004d2: 	psrldq	$0x8, %xmm1
    000004d7: 	paddq	%xmm1, %xmm0
    000004db: 	movq	%xmm0, %rax
    000004e0: 	cmpq	%rax, %rdx
    000004e3: 	je	.Ltmp2157 # Offset: 1251
    000004e5: 	movq	0x13980(%rsp), %rdx
    000004ed: 	leaq	DATAat0x141d4(%rip), %rsi
    000004f4: 	movl	$0x1, %edi
    000004f9: 	xorl	%eax, %eax
    000004fb: 	callq	__printf_chk@PLT # Offset: 1275
    00000500: 	movl	iterations(%rip), %ecx
.Ltmp2157:
    00000506: 	addl	$0x1, %r13d
    0000050a: 	cmpl	%ecx, %r13d
    0000050d: 	jl	.Ltmp2158 # Offset: 1293
.Ltmp2154:
    0000050f: 	callq	clock@PLT # Offset: 1295
    00000514: 	movq	0x18(%rsp), %rdi
    00000519: 	pxor	%xmm0, %xmm0
    0000051d: 	movq	%rax, end_time(%rip)
    00000524: 	subq	start_time(%rip), %rax
    0000052b: 	cvtsi2sd	%rax, %xmm0
    00000530: 	divsd	DATAat0x14868(%rip), %xmm0
    00000538: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1336
    0000053d: 	movq	0x13980(%rsp), %rdi
    00000545: 	cmpq	%r14, %rdi
    00000548: 	je	.Ltmp2159 # Offset: 1352
    0000054a: 	movq	0x13990(%rsp), %rax
    00000552: 	leaq	0x1(%rax), %rsi
    00000556: 	callq	_ZdlPvm@PLT # Offset: 1366
.Ltmp2159:
    0000055b: 	movq	0x30(%rsp), %rsi
    00000560: 	movq	0x18(%rsp), %rdi
    00000565: 	leaq	DATAat0x14368(%rip), %rdx
    0000056c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1388
    00000571: 	callq	clock@PLT # Offset: 1393
    00000576: 	movsd	DATAat0x14878(%rip), %xmm2
    0000057e: 	movl	iterations(%rip), %ecx
    00000584: 	xorl	%r13d, %r13d
    00000587: 	movq	%rax, start_time(%rip)
    0000058e: 	movsd	%xmm2, 0x8(%rsp)
    00000594: 	testl	%ecx, %ecx
    00000596: 	jle	.Ltmp2160 # Offset: 1430
    0000059c: 	nopl	(%rax) # Size: 4
.Ltmp2164:
    000005a0: 	movq	%r12, %rax
    000005a3: 	pxor	%xmm0, %xmm0
    000005a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2161:
    000005b0: 	paddq	(%rax), %xmm0
    000005b4: 	addq	$0x10, %rax
    000005b8: 	cmpq	%rax, %r15
    000005bb: 	jne	.Ltmp2161 # Offset: 1467
    000005bd: 	movsd	0x8(%rsp), %xmm1
    000005c3: 	mulsd	init_value(%rip), %xmm1
    000005cb: 	comisd	DATAat0x14880(%rip), %xmm1
    000005d3: 	jae	.Ltmp2162 # Offset: 1491
    000005d9: 	cvttsd2si	%xmm1, %rdx
.Ltmp2376:
    000005de: 	movdqa	%xmm0, %xmm1
    000005e2: 	psrldq	$0x8, %xmm1
    000005e7: 	paddq	%xmm1, %xmm0
    000005eb: 	movq	%xmm0, %rax
    000005f0: 	cmpq	%rax, %rdx
    000005f3: 	je	.Ltmp2163 # Offset: 1523
    000005f5: 	movq	0x13980(%rsp), %rdx
    000005fd: 	leaq	DATAat0x141d4(%rip), %rsi
    00000604: 	movl	$0x1, %edi
    00000609: 	xorl	%eax, %eax
    0000060b: 	callq	__printf_chk@PLT # Offset: 1547
    00000610: 	movl	iterations(%rip), %ecx
.Ltmp2163:
    00000616: 	addl	$0x1, %r13d
    0000061a: 	cmpl	%ecx, %r13d
    0000061d: 	jl	.Ltmp2164 # Offset: 1565
.Ltmp2160:
    0000061f: 	callq	clock@PLT # Offset: 1567
    00000624: 	movq	0x18(%rsp), %rdi
    00000629: 	pxor	%xmm0, %xmm0
    0000062d: 	movq	%rax, end_time(%rip)
    00000634: 	subq	start_time(%rip), %rax
    0000063b: 	cvtsi2sd	%rax, %xmm0
    00000640: 	divsd	DATAat0x14868(%rip), %xmm0
    00000648: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1608
    0000064d: 	movq	0x13980(%rsp), %rdi
    00000655: 	cmpq	%r14, %rdi
    00000658: 	je	.Ltmp2165 # Offset: 1624
    0000065a: 	movq	0x13990(%rsp), %rax
    00000662: 	leaq	0x1(%rax), %rsi
    00000666: 	callq	_ZdlPvm@PLT # Offset: 1638
.Ltmp2165:
    0000066b: 	movq	0x30(%rsp), %rsi
    00000670: 	movq	0x18(%rsp), %rdi
    00000675: 	leaq	DATAat0x14390(%rip), %rdx
    0000067c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1660
    00000681: 	callq	clock@PLT # Offset: 1665
    00000686: 	movsd	DATAat0x14878(%rip), %xmm3
    0000068e: 	movl	iterations(%rip), %ecx
    00000694: 	xorl	%r13d, %r13d
    00000697: 	movq	%rax, start_time(%rip)
    0000069e: 	movsd	%xmm3, 0x8(%rsp)
    000006a4: 	testl	%ecx, %ecx
    000006a6: 	jle	.Ltmp2166 # Offset: 1702
    000006ac: 	nopl	(%rax) # Size: 4
.Ltmp2170:
    000006b0: 	movq	%r12, %rax
    000006b3: 	pxor	%xmm0, %xmm0
    000006b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2167:
    000006c0: 	paddq	(%rax), %xmm0
    000006c4: 	addq	$0x10, %rax
    000006c8: 	cmpq	%rax, %r15
    000006cb: 	jne	.Ltmp2167 # Offset: 1739
    000006cd: 	movsd	0x8(%rsp), %xmm1
    000006d3: 	mulsd	init_value(%rip), %xmm1
    000006db: 	comisd	DATAat0x14880(%rip), %xmm1
    000006e3: 	jae	.Ltmp2168 # Offset: 1763
    000006e9: 	cvttsd2si	%xmm1, %rdx
.Ltmp2375:
    000006ee: 	movdqa	%xmm0, %xmm1
    000006f2: 	psrldq	$0x8, %xmm1
    000006f7: 	paddq	%xmm1, %xmm0
    000006fb: 	movq	%xmm0, %rax
    00000700: 	cmpq	%rax, %rdx
    00000703: 	je	.Ltmp2169 # Offset: 1795
    00000705: 	movq	0x13980(%rsp), %rdx
    0000070d: 	leaq	DATAat0x141d4(%rip), %rsi
    00000714: 	movl	$0x1, %edi
    00000719: 	xorl	%eax, %eax
    0000071b: 	callq	__printf_chk@PLT # Offset: 1819
    00000720: 	movl	iterations(%rip), %ecx
.Ltmp2169:
    00000726: 	addl	$0x1, %r13d
    0000072a: 	cmpl	%ecx, %r13d
    0000072d: 	jl	.Ltmp2170 # Offset: 1837
.Ltmp2166:
    0000072f: 	callq	clock@PLT # Offset: 1839
    00000734: 	movq	0x18(%rsp), %rdi
    00000739: 	pxor	%xmm0, %xmm0
    0000073d: 	movq	%rax, end_time(%rip)
    00000744: 	subq	start_time(%rip), %rax
    0000074b: 	cvtsi2sd	%rax, %xmm0
    00000750: 	divsd	DATAat0x14868(%rip), %xmm0
    00000758: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1880
    0000075d: 	movq	0x13980(%rsp), %rdi
    00000765: 	cmpq	%r14, %rdi
    00000768: 	je	.Ltmp2171 # Offset: 1896
    0000076a: 	movq	0x13990(%rsp), %rax
    00000772: 	leaq	0x1(%rax), %rsi
    00000776: 	callq	_ZdlPvm@PLT # Offset: 1910
.Ltmp2171:
    0000077b: 	movq	0x30(%rsp), %rsi
    00000780: 	movq	0x18(%rsp), %rdi
    00000785: 	leaq	DATAat0x143c0(%rip), %rdx
    0000078c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1932
    00000791: 	callq	clock@PLT # Offset: 1937
    00000796: 	movsd	DATAat0x14878(%rip), %xmm4
    0000079e: 	movl	iterations(%rip), %ecx
    000007a4: 	xorl	%r13d, %r13d
    000007a7: 	movq	%rax, start_time(%rip)
    000007ae: 	movsd	%xmm4, 0x8(%rsp)
    000007b4: 	testl	%ecx, %ecx
    000007b6: 	jle	.Ltmp2172 # Offset: 1974
    000007bc: 	nopl	(%rax) # Size: 4
.Ltmp2176:
    000007c0: 	movq	%rbp, %rax
    000007c3: 	pxor	%xmm0, %xmm0
    000007c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2173:
    000007d0: 	paddq	(%rax), %xmm0
    000007d4: 	addq	$0x10, %rax
    000007d8: 	cmpq	%rax, %rbx
    000007db: 	jne	.Ltmp2173 # Offset: 2011
    000007dd: 	movsd	0x8(%rsp), %xmm1
    000007e3: 	mulsd	init_value(%rip), %xmm1
    000007eb: 	comisd	DATAat0x14880(%rip), %xmm1
    000007f3: 	jae	.Ltmp2174 # Offset: 2035
    000007f9: 	cvttsd2si	%xmm1, %rdx
.Ltmp2374:
    000007fe: 	movdqa	%xmm0, %xmm1
    00000802: 	psrldq	$0x8, %xmm1
    00000807: 	paddq	%xmm1, %xmm0
    0000080b: 	movq	%xmm0, %rax
    00000810: 	cmpq	%rax, %rdx
    00000813: 	je	.Ltmp2175 # Offset: 2067
    00000815: 	movq	0x13980(%rsp), %rdx
    0000081d: 	leaq	DATAat0x141d4(%rip), %rsi
    00000824: 	movl	$0x1, %edi
    00000829: 	xorl	%eax, %eax
    0000082b: 	callq	__printf_chk@PLT # Offset: 2091
    00000830: 	movl	iterations(%rip), %ecx
.Ltmp2175:
    00000836: 	addl	$0x1, %r13d
    0000083a: 	cmpl	%ecx, %r13d
    0000083d: 	jl	.Ltmp2176 # Offset: 2109
.Ltmp2172:
    0000083f: 	callq	clock@PLT # Offset: 2111
    00000844: 	movq	0x18(%rsp), %rdi
    00000849: 	pxor	%xmm0, %xmm0
    0000084d: 	movq	%rax, end_time(%rip)
    00000854: 	subq	start_time(%rip), %rax
    0000085b: 	cvtsi2sd	%rax, %xmm0
    00000860: 	divsd	DATAat0x14868(%rip), %xmm0
    00000868: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2152
    0000086d: 	movq	0x13980(%rsp), %rdi
    00000875: 	cmpq	%r14, %rdi
    00000878: 	je	.Ltmp2177 # Offset: 2168
    0000087a: 	movq	0x13990(%rsp), %rax
    00000882: 	leaq	0x1(%rax), %rsi
    00000886: 	callq	_ZdlPvm@PLT # Offset: 2182
.Ltmp2177:
    0000088b: 	movq	0x30(%rsp), %rsi
    00000890: 	movq	0x18(%rsp), %rdi
    00000895: 	leaq	DATAat0x143e8(%rip), %rdx
    0000089c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2204
    000008a1: 	callq	clock@PLT # Offset: 2209
    000008a6: 	movsd	DATAat0x14878(%rip), %xmm5
    000008ae: 	movl	iterations(%rip), %ecx
    000008b4: 	xorl	%r13d, %r13d
    000008b7: 	movq	%rax, start_time(%rip)
    000008be: 	movsd	%xmm5, 0x8(%rsp)
    000008c4: 	testl	%ecx, %ecx
    000008c6: 	jle	.Ltmp2178 # Offset: 2246
    000008cc: 	nopl	(%rax) # Size: 4
.Ltmp2182:
    000008d0: 	movq	%rbp, %rax
    000008d3: 	pxor	%xmm0, %xmm0
    000008d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2179:
    000008e0: 	paddq	(%rax), %xmm0
    000008e4: 	addq	$0x10, %rax
    000008e8: 	cmpq	%rax, %rbx
    000008eb: 	jne	.Ltmp2179 # Offset: 2283
    000008ed: 	movsd	0x8(%rsp), %xmm1
    000008f3: 	mulsd	init_value(%rip), %xmm1
    000008fb: 	comisd	DATAat0x14880(%rip), %xmm1
    00000903: 	jae	.Ltmp2180 # Offset: 2307
    00000909: 	cvttsd2si	%xmm1, %rdx
.Ltmp2373:
    0000090e: 	movdqa	%xmm0, %xmm1
    00000912: 	psrldq	$0x8, %xmm1
    00000917: 	paddq	%xmm1, %xmm0
    0000091b: 	movq	%xmm0, %rax
    00000920: 	cmpq	%rax, %rdx
    00000923: 	je	.Ltmp2181 # Offset: 2339
    00000925: 	movq	0x13980(%rsp), %rdx
    0000092d: 	leaq	DATAat0x141d4(%rip), %rsi
    00000934: 	movl	$0x1, %edi
    00000939: 	xorl	%eax, %eax
    0000093b: 	callq	__printf_chk@PLT # Offset: 2363
    00000940: 	movl	iterations(%rip), %ecx
.Ltmp2181:
    00000946: 	addl	$0x1, %r13d
    0000094a: 	cmpl	%ecx, %r13d
    0000094d: 	jl	.Ltmp2182 # Offset: 2381
.Ltmp2178:
    0000094f: 	callq	clock@PLT # Offset: 2383
    00000954: 	movq	0x18(%rsp), %rdi
    00000959: 	pxor	%xmm0, %xmm0
    0000095d: 	movq	%rax, end_time(%rip)
    00000964: 	subq	start_time(%rip), %rax
    0000096b: 	cvtsi2sd	%rax, %xmm0
    00000970: 	divsd	DATAat0x14868(%rip), %xmm0
    00000978: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2424
    0000097d: 	movq	0x13980(%rsp), %rdi
    00000985: 	cmpq	%r14, %rdi
    00000988: 	je	.Ltmp2183 # Offset: 2440
    0000098a: 	movq	0x13990(%rsp), %rax
    00000992: 	leaq	0x1(%rax), %rsi
    00000996: 	callq	_ZdlPvm@PLT # Offset: 2454
.Ltmp2183:
    0000099b: 	movq	0x30(%rsp), %rsi
    000009a0: 	movq	0x18(%rsp), %rdi
    000009a5: 	leaq	DATAat0x14418(%rip), %rdx
    000009ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2476
    000009b1: 	callq	clock@PLT # Offset: 2481
    000009b6: 	movsd	DATAat0x14878(%rip), %xmm6
    000009be: 	movl	iterations(%rip), %ecx
    000009c4: 	xorl	%r13d, %r13d
    000009c7: 	movq	%rax, start_time(%rip)
    000009ce: 	movsd	%xmm6, 0x8(%rsp)
    000009d4: 	testl	%ecx, %ecx
    000009d6: 	jle	.Ltmp2184 # Offset: 2518
    000009dc: 	nopl	(%rax) # Size: 4
.Ltmp2188:
    000009e0: 	movq	%rbx, %rax
    000009e3: 	pxor	%xmm0, %xmm0
    000009e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2185:
    000009f0: 	paddq	(%rax), %xmm0
    000009f4: 	addq	$0x10, %rax
    000009f8: 	cmpq	%rax, %r12
    000009fb: 	jne	.Ltmp2185 # Offset: 2555
    000009fd: 	movsd	0x8(%rsp), %xmm1
    00000a03: 	mulsd	init_value(%rip), %xmm1
    00000a0b: 	comisd	DATAat0x14880(%rip), %xmm1
    00000a13: 	jae	.Ltmp2186 # Offset: 2579
    00000a19: 	cvttsd2si	%xmm1, %rdx
.Ltmp2372:
    00000a1e: 	movdqa	%xmm0, %xmm1
    00000a22: 	psrldq	$0x8, %xmm1
    00000a27: 	paddq	%xmm1, %xmm0
    00000a2b: 	movq	%xmm0, %rax
    00000a30: 	cmpq	%rax, %rdx
    00000a33: 	je	.Ltmp2187 # Offset: 2611
    00000a35: 	movq	0x13980(%rsp), %rdx
    00000a3d: 	leaq	DATAat0x141d4(%rip), %rsi
    00000a44: 	movl	$0x1, %edi
    00000a49: 	xorl	%eax, %eax
    00000a4b: 	callq	__printf_chk@PLT # Offset: 2635
    00000a50: 	movl	iterations(%rip), %ecx
.Ltmp2187:
    00000a56: 	addl	$0x1, %r13d
    00000a5a: 	cmpl	%ecx, %r13d
    00000a5d: 	jl	.Ltmp2188 # Offset: 2653
.Ltmp2184:
    00000a5f: 	callq	clock@PLT # Offset: 2655
    00000a64: 	movq	0x18(%rsp), %rdi
    00000a69: 	pxor	%xmm0, %xmm0
    00000a6d: 	movq	%rax, end_time(%rip)
    00000a74: 	subq	start_time(%rip), %rax
    00000a7b: 	cvtsi2sd	%rax, %xmm0
    00000a80: 	divsd	DATAat0x14868(%rip), %xmm0
    00000a88: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2696
    00000a8d: 	movq	0x13980(%rsp), %rdi
    00000a95: 	cmpq	%r14, %rdi
    00000a98: 	je	.Ltmp2189 # Offset: 2712
    00000a9a: 	movq	0x13990(%rsp), %rax
    00000aa2: 	leaq	0x1(%rax), %rsi
    00000aa6: 	callq	_ZdlPvm@PLT # Offset: 2726
.Ltmp2189:
    00000aab: 	movq	0x30(%rsp), %rsi
    00000ab0: 	leaq	0x80(%rsp), %rdi
    00000ab8: 	leaq	DATAat0x14219(%rip), %rdx
    00000abf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2751
    00000ac4: 	movl	iterations(%rip), %edx
    00000aca: 	movl	$0x1, %r8d
    00000ad0: 	movl	$0x1, %ecx
    00000ad5: 	movq	0x80(%rsp), %rdi
    00000add: 	movl	$0x7d0, %esi
    00000ae2: 	callq	_Z9summarizePKciiii # Offset: 2786
    00000ae7: 	movslq	iterations(%rip), %rax
    00000aee: 	leaq	0xfb00(%rsp), %r8
    00000af6: 	movabsq	$0x5851f42d4c957f2d, %rdi
    00000b00: 	movabsq	$0x14057b7ef767814f, %rsi
    00000b0a: 	movq	%r8, 0x10(%rsp)
    00000b0f: 	movq	%rax, %rdx
    00000b12: 	imulq	$0x10624dd3, %rax, %rax
    00000b19: 	sarl	$0x1f, %edx
    00000b1c: 	sarq	$0x26, %rax
    00000b20: 	subl	%edx, %eax
    00000b22: 	movq	%r15, %rdx
    00000b25: 	movl	%eax, iterations(%rip)
    00000b2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2190:
    00000b30: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000b37: 	addq	$0x8, %rdx
    00000b3b: 	imulq	%rdi, %rax
    00000b3f: 	addq	%rsi, %rax
    00000b42: 	movq	%rax, %rcx
    00000b45: 	movq	%rax, %r9
    00000b48: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000b4f: 	shrq	$0x14, %rcx
    00000b53: 	shlq	$0x17, %r9
    00000b57: 	xorq	%r9, %rcx
    00000b5a: 	xorq	%rcx, %rax
    00000b5d: 	sarq	$0x3, %rax
    00000b61: 	movq	%rax, -0x8(%rdx)
    00000b65: 	cmpq	%r8, %rdx
    00000b68: 	jne	.Ltmp2190 # Offset: 2920
    00000b6a: 	movq	0x10(%rsp), %rdi
    00000b6f: 	movl	$0x3e80, %edx
    00000b74: 	movq	%r15, %rsi
    00000b77: 	callq	memcpy@PLT # Offset: 2935
    00000b7c: 	movq	0x18(%rsp), %rdi
    00000b81: 	movl	$0x3e80, %edx
    00000b86: 	movq	%r15, %rsi
    00000b89: 	callq	memcpy@PLT # Offset: 2953
    00000b8e: 	leaq	0xe0(%rsp), %rax
    00000b96: 	movq	0x30(%rsp), %rsi
    00000b9b: 	leaq	DATAat0x14231(%rip), %rdx
    00000ba2: 	movq	%rax, %rdi
    00000ba5: 	movq	%rax, 0x8(%rsp)
    00000baa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2986
    00000baf: 	callq	clock@PLT # Offset: 2991
    00000bb4: 	xorl	%r13d, %r13d
    00000bb7: 	leaq	0x108(%rsp), %r14
    00000bbf: 	movq	%rax, start_time(%rip)
    00000bc6: 	movl	iterations(%rip), %eax
    00000bcc: 	testl	%eax, %eax
    00000bce: 	jle	.Ltmp2191 # Offset: 3022
.Ltmp2195:
    00000bd0: 	movq	%rbp, %rdi
    00000bd3: 	movl	$0x3e80, %edx
    00000bd8: 	movq	%r15, %rsi
    00000bdb: 	callq	memcpy@PLT # Offset: 3035
    00000be0: 	movq	%r14, %rdi
    00000be3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2194:
    00000be8: 	movq	(%rdi), %rsi
    00000beb: 	movq	%rdi, %rax
    00000bee: 	nop # Size: 2
.Ltmp2193:
    00000bf0: 	movq	%rax, %rdx
    00000bf3: 	leaq	-0x8(%rax), %rax
    00000bf7: 	movq	-0x8(%rdx), %rcx
    00000bfb: 	cmpq	%rcx, %rsi
    00000bfe: 	jae	.Ltmp2192 # Offset: 3070
    00000c00: 	movq	%rcx, 0x8(%rax)
    00000c04: 	cmpq	%rbp, %rax
    00000c07: 	jne	.Ltmp2193 # Offset: 3079
    00000c09: 	movq	%rbp, %rdx
.Ltmp2192:
    00000c0c: 	addq	$0x8, %rdi
    00000c10: 	movq	%rsi, (%rdx)
    00000c13: 	cmpq	%rbx, %rdi
    00000c16: 	jne	.Ltmp2194 # Offset: 3094
    00000c18: 	movq	0x8(%rsp), %rdx
    00000c1d: 	movq	%rbx, %rsi
    00000c20: 	movq	%rbp, %rdi
    00000c23: 	callq	_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3107
    00000c28: 	addl	$0x1, %r13d
    00000c2c: 	cmpl	iterations(%rip), %r13d
    00000c33: 	jl	.Ltmp2195 # Offset: 3123
.Ltmp2191:
    00000c35: 	callq	clock@PLT # Offset: 3125
    00000c3a: 	movq	0x8(%rsp), %rdi
    00000c3f: 	pxor	%xmm0, %xmm0
    00000c43: 	movq	%rax, end_time(%rip)
    00000c4a: 	subq	start_time(%rip), %rax
    00000c51: 	cvtsi2sd	%rax, %xmm0
    00000c56: 	divsd	DATAat0x14868(%rip), %xmm0
    00000c5e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3166
    00000c63: 	movq	0xe0(%rsp), %rdi
    00000c6b: 	leaq	0xf0(%rsp), %rax
    00000c73: 	movq	%rax, 0x20(%rsp)
    00000c78: 	cmpq	%rax, %rdi
    00000c7b: 	je	.Ltmp2196 # Offset: 3195
    00000c7d: 	movq	0xf0(%rsp), %rax
    00000c85: 	leaq	0x1(%rax), %rsi
    00000c89: 	callq	_ZdlPvm@PLT # Offset: 3209
.Ltmp2196:
    00000c8e: 	movq	0x30(%rsp), %rsi
    00000c93: 	movq	0x8(%rsp), %rdi
    00000c98: 	leaq	DATAat0x14249(%rip), %rdx
    00000c9f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3231
    00000ca4: 	callq	clock@PLT # Offset: 3236
    00000ca9: 	xorl	%r13d, %r13d
    00000cac: 	leaq	0x108(%rsp), %r14
    00000cb4: 	movq	%rax, start_time(%rip)
    00000cbb: 	movl	iterations(%rip), %eax
    00000cc1: 	movl	%eax, 0x2c(%rsp)
    00000cc5: 	testl	%eax, %eax
    00000cc7: 	jle	.Ltmp2197 # Offset: 3271
    00000ccd: 	nopl	(%rax) # Size: 3
.Ltmp2205:
    00000cd0: 	movq	%r15, %rsi
    00000cd3: 	movq	%rbp, %rdi
    00000cd6: 	movl	$0x3e80, %edx
    00000cdb: 	callq	memcpy@PLT # Offset: 3291
    00000ce0: 	movq	%r14, %rdi
    00000ce3: 	movq	%r14, %rsi
    00000ce6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2202:
    00000cf0: 	movq	(%rsi), %rcx
    00000cf3: 	cmpq	%rbp, %rsi
    00000cf6: 	je	.Ltmp2198 # Offset: 3318
    00000cfc: 	movq	%rsi, %rax
    00000cff: 	jmp	.Ltmp2199 # Offset: 3327
    00000d01: 	nopl	(%rax) # Size: 7
.Ltmp2201:
    00000d08: 	movq	%rdx, (%rax)
    00000d0b: 	subq	$0x8, %rax
    00000d0f: 	cmpq	%rax, %rbp
    00000d12: 	je	.Ltmp2200 # Offset: 3346
.Ltmp2199:
    00000d14: 	movq	-0x8(%rax), %rdx
    00000d18: 	cmpq	%rdx, %rcx
    00000d1b: 	jb	.Ltmp2201 # Offset: 3355
.Ltmp2200:
    00000d1d: 	addq	$0x8, %rsi
    00000d21: 	movq	%rcx, (%rax)
    00000d24: 	cmpq	%rsi, %rbx
    00000d27: 	jne	.Ltmp2202 # Offset: 3367
    00000d29: 	movq	0x100(%rsp), %rax
    00000d31: 	nopl	(%rax) # Size: 7
.Ltmp2204:
    00000d38: 	movq	%rax, %rdx
    00000d3b: 	movq	(%rdi), %rax
    00000d3e: 	cmpq	%rdx, %rax
    00000d41: 	jb	.Ltmp2203 # Offset: 3393
    00000d47: 	addq	$0x8, %rdi
    00000d4b: 	cmpq	%rdi, %rbx
    00000d4e: 	jne	.Ltmp2204 # Offset: 3406
    00000d50: 	addl	$0x1, %r13d
    00000d54: 	cmpl	0x2c(%rsp), %r13d
    00000d59: 	jl	.Ltmp2205 # Offset: 3417
.Ltmp2197:
    00000d5f: 	callq	clock@PLT # Offset: 3423
    00000d64: 	movq	0x8(%rsp), %rdi
    00000d69: 	pxor	%xmm0, %xmm0
    00000d6d: 	movq	%rax, end_time(%rip)
    00000d74: 	subq	start_time(%rip), %rax
    00000d7b: 	cvtsi2sd	%rax, %xmm0
    00000d80: 	divsd	DATAat0x14868(%rip), %xmm0
    00000d88: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3464
    00000d8d: 	movq	0xe0(%rsp), %rdi
    00000d95: 	cmpq	0x20(%rsp), %rdi
    00000d9a: 	je	.Ltmp2206 # Offset: 3482
    00000d9c: 	movq	0xf0(%rsp), %rax
    00000da4: 	leaq	0x1(%rax), %rsi
    00000da8: 	callq	_ZdlPvm@PLT # Offset: 3496
.Ltmp2206:
    00000dad: 	movq	0x30(%rsp), %rsi
    00000db2: 	movq	0x8(%rsp), %rdi
    00000db7: 	leaq	DATAat0x14458(%rip), %rdx
    00000dbe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3518
    00000dc3: 	callq	clock@PLT # Offset: 3523
    00000dc8: 	xorl	%r13d, %r13d
    00000dcb: 	leaq	0x3f88(%rsp), %r14
    00000dd3: 	movq	%rax, start_time(%rip)
    00000dda: 	movl	iterations(%rip), %eax
    00000de0: 	testl	%eax, %eax
    00000de2: 	jle	.Ltmp2207 # Offset: 3554
    00000de4: 	nopl	(%rax) # Size: 4
.Ltmp2211:
    00000de8: 	movq	0x10(%rsp), %rsi
    00000ded: 	movl	$0x3e80, %edx
    00000df2: 	movq	%rbx, %rdi
    00000df5: 	callq	memcpy@PLT # Offset: 3573
    00000dfa: 	movq	%r14, %rsi
    00000dfd: 	nopl	(%rax) # Size: 3
.Ltmp2210:
    00000e00: 	movq	(%rsi), %rcx
    00000e03: 	movq	%rsi, %rdx
    00000e06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2209:
    00000e10: 	movq	%rdx, %rax
    00000e13: 	leaq	-0x8(%rdx), %rdx
    00000e17: 	cmpq	-0x8(%rax), %rcx
    00000e1b: 	jae	.Ltmp2208 # Offset: 3611
    00000e1d: 	movq	-0x8(%rax), %rax
    00000e21: 	movq	%rax, 0x8(%rdx)
    00000e25: 	cmpq	%rbx, %rdx
    00000e28: 	jne	.Ltmp2209 # Offset: 3624
    00000e2a: 	movq	%rbx, %rax
.Ltmp2208:
    00000e2d: 	addq	$0x8, %rsi
    00000e31: 	movq	%rcx, (%rax)
    00000e34: 	cmpq	%r12, %rsi
    00000e37: 	jne	.Ltmp2210 # Offset: 3639
    00000e39: 	movq	0x8(%rsp), %rdx
    00000e3e: 	movq	%r12, %rsi
    00000e41: 	movq	%rbx, %rdi
    00000e44: 	callq	_Z13verify_sortedIP12ValueWrapperImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3652
    00000e49: 	addl	$0x1, %r13d
    00000e4d: 	cmpl	iterations(%rip), %r13d
    00000e54: 	jl	.Ltmp2211 # Offset: 3668
.Ltmp2207:
    00000e56: 	callq	clock@PLT # Offset: 3670
    00000e5b: 	movq	0x8(%rsp), %rdi
    00000e60: 	pxor	%xmm0, %xmm0
    00000e64: 	movq	%rax, end_time(%rip)
    00000e6b: 	subq	start_time(%rip), %rax
    00000e72: 	cvtsi2sd	%rax, %xmm0
    00000e77: 	divsd	DATAat0x14868(%rip), %xmm0
    00000e7f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3711
    00000e84: 	movq	0xe0(%rsp), %rdi
    00000e8c: 	cmpq	0x20(%rsp), %rdi
    00000e91: 	je	.Ltmp2212 # Offset: 3729
    00000e93: 	movq	0xf0(%rsp), %rax
    00000e9b: 	leaq	0x1(%rax), %rsi
    00000e9f: 	callq	_ZdlPvm@PLT # Offset: 3743
.Ltmp2212:
    00000ea4: 	movq	0x30(%rsp), %rsi
    00000ea9: 	movq	0x8(%rsp), %rdi
    00000eae: 	leaq	DATAat0x14488(%rip), %rdx
    00000eb5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3765
    00000eba: 	callq	clock@PLT # Offset: 3770
    00000ebf: 	xorl	%r13d, %r13d
    00000ec2: 	leaq	0x3f88(%rsp), %r14
    00000eca: 	movq	%rax, start_time(%rip)
    00000ed1: 	movl	iterations(%rip), %eax
    00000ed7: 	movl	%eax, 0x2c(%rsp)
    00000edb: 	testl	%eax, %eax
    00000edd: 	jle	.Ltmp2213 # Offset: 3805
    00000ee3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2221:
    00000ee8: 	movq	0x10(%rsp), %rsi
    00000eed: 	movq	%rbx, %rdi
    00000ef0: 	movl	$0x3e80, %edx
    00000ef5: 	callq	memcpy@PLT # Offset: 3829
    00000efa: 	movq	%r14, %rdi
    00000efd: 	movq	%r14, %rsi
.Ltmp2218:
    00000f00: 	movq	(%rsi), %rcx
    00000f03: 	movq	%rsi, %rdx
    00000f06: 	cmpq	%rbx, %rsi
    00000f09: 	jne	.Ltmp2214 # Offset: 3849
    00000f0b: 	jmp	.Ltmp2215 # Offset: 3851
.Ltmp2217:
    00000f10: 	movq	-0x8(%rax), %rax
    00000f14: 	movq	%rax, 0x8(%rdx)
    00000f18: 	cmpq	%rbx, %rdx
    00000f1b: 	je	.Ltmp2216 # Offset: 3867
.Ltmp2214:
    00000f21: 	movq	%rdx, %rax
    00000f24: 	leaq	-0x8(%rdx), %rdx
    00000f28: 	cmpq	-0x8(%rax), %rcx
    00000f2c: 	jb	.Ltmp2217 # Offset: 3884
    00000f2e: 	addq	$0x8, %rsi
    00000f32: 	movq	%rcx, (%rax)
    00000f35: 	cmpq	%rsi, %r12
    00000f38: 	jne	.Ltmp2218 # Offset: 3896
.Ltmp2371:
    00000f3a: 	movq	0x3f80(%rsp), %rax
    00000f42: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2220:
    00000f48: 	movq	%rax, %rdx
    00000f4b: 	movq	(%rdi), %rax
    00000f4e: 	cmpq	%rdx, %rax
    00000f51: 	jb	.Ltmp2219 # Offset: 3921
    00000f57: 	addq	$0x8, %rdi
    00000f5b: 	cmpq	%rdi, %r12
    00000f5e: 	jne	.Ltmp2220 # Offset: 3934
    00000f60: 	addl	$0x1, %r13d
    00000f64: 	cmpl	0x2c(%rsp), %r13d
    00000f69: 	jl	.Ltmp2221 # Offset: 3945
.Ltmp2213:
    00000f6f: 	callq	clock@PLT # Offset: 3951
    00000f74: 	movq	0x8(%rsp), %rdi
    00000f79: 	pxor	%xmm0, %xmm0
    00000f7d: 	movq	%rax, end_time(%rip)
    00000f84: 	subq	start_time(%rip), %rax
    00000f8b: 	cvtsi2sd	%rax, %xmm0
    00000f90: 	divsd	DATAat0x14868(%rip), %xmm0
    00000f98: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3992
    00000f9d: 	movq	0xe0(%rsp), %rdi
    00000fa5: 	cmpq	0x20(%rsp), %rdi
    00000faa: 	je	.Ltmp2222 # Offset: 4010
    00000fac: 	movq	0xf0(%rsp), %rax
    00000fb4: 	leaq	0x1(%rax), %rsi
    00000fb8: 	callq	_ZdlPvm@PLT # Offset: 4024
.Ltmp2222:
    00000fbd: 	movq	0x30(%rsp), %rsi
    00000fc2: 	movq	0x8(%rsp), %rdi
    00000fc7: 	leaq	DATAat0x144b8(%rip), %rdx
    00000fce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4046
    00000fd3: 	callq	clock@PLT # Offset: 4051
    00000fd8: 	xorl	%r13d, %r13d
    00000fdb: 	leaq	0x7e08(%rsp), %r14
    00000fe3: 	movq	%rax, start_time(%rip)
    00000fea: 	movl	iterations(%rip), %eax
    00000ff0: 	testl	%eax, %eax
    00000ff2: 	jle	.Ltmp2223 # Offset: 4082
    00000ff4: 	nopl	(%rax) # Size: 4
.Ltmp2227:
    00000ff8: 	movq	0x18(%rsp), %rsi
    00000ffd: 	movl	$0x3e80, %edx
    00001002: 	movq	%r12, %rdi
    00001005: 	callq	memcpy@PLT # Offset: 4101
    0000100a: 	movq	%r14, %rsi
    0000100d: 	nopl	(%rax) # Size: 3
.Ltmp2226:
    00001010: 	movq	(%rsi), %rcx
    00001013: 	movq	%rsi, %rdx
    00001016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2225:
    00001020: 	movq	%rdx, %rax
    00001023: 	leaq	-0x8(%rdx), %rdx
    00001027: 	cmpq	-0x8(%rax), %rcx
    0000102b: 	jae	.Ltmp2224 # Offset: 4139
    0000102d: 	movq	-0x8(%rax), %rax
    00001031: 	movq	%rax, 0x8(%rdx)
    00001035: 	cmpq	%r12, %rdx
    00001038: 	jne	.Ltmp2225 # Offset: 4152
    0000103a: 	movq	%r12, %rax
.Ltmp2224:
    0000103d: 	addq	$0x8, %rsi
    00001041: 	movq	%rcx, (%rax)
    00001044: 	cmpq	%r15, %rsi
    00001047: 	jne	.Ltmp2226 # Offset: 4167
    00001049: 	movq	0x8(%rsp), %rdx
    0000104e: 	movq	%r15, %rsi
    00001051: 	movq	%r12, %rdi
    00001054: 	callq	_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_ImEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4180
    00001059: 	addl	$0x1, %r13d
    0000105d: 	cmpl	iterations(%rip), %r13d
    00001064: 	jl	.Ltmp2227 # Offset: 4196
.Ltmp2223:
    00001066: 	callq	clock@PLT # Offset: 4198
    0000106b: 	movq	0x8(%rsp), %rdi
    00001070: 	pxor	%xmm0, %xmm0
    00001074: 	movq	%rax, end_time(%rip)
    0000107b: 	subq	start_time(%rip), %rax
    00001082: 	cvtsi2sd	%rax, %xmm0
    00001087: 	divsd	DATAat0x14868(%rip), %xmm0
    0000108f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4239
    00001094: 	movq	0xe0(%rsp), %rdi
    0000109c: 	cmpq	0x20(%rsp), %rdi
    000010a1: 	je	.Ltmp2228 # Offset: 4257
    000010a3: 	movq	0xf0(%rsp), %rax
    000010ab: 	leaq	0x1(%rax), %rsi
    000010af: 	callq	_ZdlPvm@PLT # Offset: 4271
.Ltmp2228:
    000010b4: 	movq	0x30(%rsp), %rsi
    000010b9: 	movq	0x8(%rsp), %rdi
    000010be: 	leaq	DATAat0x144e8(%rip), %rdx
    000010c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4293
    000010ca: 	callq	clock@PLT # Offset: 4298
    000010cf: 	xorl	%r13d, %r13d
    000010d2: 	leaq	0x7e08(%rsp), %r14
    000010da: 	movq	%rax, start_time(%rip)
    000010e1: 	movl	iterations(%rip), %eax
    000010e7: 	movl	%eax, 0x2c(%rsp)
    000010eb: 	testl	%eax, %eax
    000010ed: 	jle	.Ltmp2229 # Offset: 4333
    000010f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2237:
    000010f8: 	movq	0x18(%rsp), %rsi
    000010fd: 	movq	%r12, %rdi
    00001100: 	movl	$0x3e80, %edx
    00001105: 	callq	memcpy@PLT # Offset: 4357
    0000110a: 	movq	%r14, %rdi
    0000110d: 	movq	%r14, %rsi
.Ltmp2234:
    00001110: 	movq	(%rsi), %rcx
    00001113: 	movq	%rsi, %rdx
    00001116: 	cmpq	%r12, %rsi
    00001119: 	jne	.Ltmp2230 # Offset: 4377
    0000111b: 	jmp	.Ltmp2231 # Offset: 4379
.Ltmp2233:
    00001120: 	movq	-0x8(%rax), %rax
    00001124: 	movq	%rax, 0x8(%rdx)
    00001128: 	cmpq	%r12, %rdx
    0000112b: 	je	.Ltmp2232 # Offset: 4395
.Ltmp2230:
    00001131: 	movq	%rdx, %rax
    00001134: 	leaq	-0x8(%rdx), %rdx
    00001138: 	cmpq	-0x8(%rax), %rcx
    0000113c: 	jb	.Ltmp2233 # Offset: 4412
    0000113e: 	addq	$0x8, %rsi
    00001142: 	movq	%rcx, (%rax)
    00001145: 	cmpq	%rsi, %r15
    00001148: 	jne	.Ltmp2234 # Offset: 4424
.Ltmp2370:
    0000114a: 	movq	0x7e00(%rsp), %rax
    00001152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2236:
    00001158: 	movq	%rax, %rdx
    0000115b: 	movq	(%rdi), %rax
    0000115e: 	cmpq	%rdx, %rax
    00001161: 	jb	.Ltmp2235 # Offset: 4449
    00001167: 	addq	$0x8, %rdi
    0000116b: 	cmpq	%rdi, %r15
    0000116e: 	jne	.Ltmp2236 # Offset: 4462
    00001170: 	addl	$0x1, %r13d
    00001174: 	cmpl	0x2c(%rsp), %r13d
    00001179: 	jl	.Ltmp2237 # Offset: 4473
.Ltmp2229:
    0000117f: 	callq	clock@PLT # Offset: 4479
    00001184: 	movq	0x8(%rsp), %rdi
    00001189: 	pxor	%xmm0, %xmm0
    0000118d: 	movq	%rax, end_time(%rip)
    00001194: 	subq	start_time(%rip), %rax
    0000119b: 	cvtsi2sd	%rax, %xmm0
    000011a0: 	divsd	DATAat0x14868(%rip), %xmm0
    000011a8: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4520
    000011ad: 	movq	0xe0(%rsp), %rdi
    000011b5: 	cmpq	0x20(%rsp), %rdi
    000011ba: 	je	.Ltmp2238 # Offset: 4538
    000011bc: 	movq	0xf0(%rsp), %rax
    000011c4: 	leaq	0x1(%rax), %rsi
    000011c8: 	callq	_ZdlPvm@PLT # Offset: 4552
.Ltmp2238:
    000011cd: 	movq	0x30(%rsp), %rsi
    000011d2: 	movq	0x8(%rsp), %rdi
    000011d7: 	leaq	DATAat0x14520(%rip), %rdx
    000011de: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4574
    000011e3: 	callq	clock@PLT # Offset: 4579
    000011e8: 	xorl	%r13d, %r13d
    000011eb: 	leaq	0x108(%rsp), %r14
    000011f3: 	movq	%rax, start_time(%rip)
    000011fa: 	movl	iterations(%rip), %eax
    00001200: 	movl	%eax, 0x2c(%rsp)
    00001204: 	testl	%eax, %eax
    00001206: 	jle	.Ltmp2239 # Offset: 4614
    0000120c: 	nopl	(%rax) # Size: 4
.Ltmp2247:
    00001210: 	movq	%r15, %rsi
    00001213: 	movq	%rbp, %rdi
    00001216: 	movl	$0x3e80, %edx
    0000121b: 	callq	memcpy@PLT # Offset: 4635
    00001220: 	movq	%r14, %rdi
    00001223: 	movq	%r14, %rsi
    00001226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2244:
    00001230: 	movq	(%rsi), %rcx
    00001233: 	cmpq	%rbp, %rsi
    00001236: 	je	.Ltmp2240 # Offset: 4662
    0000123c: 	movq	%rsi, %rax
    0000123f: 	jmp	.Ltmp2241 # Offset: 4671
    00001241: 	nopl	(%rax) # Size: 7
.Ltmp2243:
    00001248: 	movq	%rdx, (%rax)
    0000124b: 	subq	$0x8, %rax
    0000124f: 	cmpq	%rax, %rbp
    00001252: 	je	.Ltmp2242 # Offset: 4690
.Ltmp2241:
    00001254: 	movq	-0x8(%rax), %rdx
    00001258: 	cmpq	%rdx, %rcx
    0000125b: 	jb	.Ltmp2243 # Offset: 4699
.Ltmp2242:
    0000125d: 	addq	$0x8, %rsi
    00001261: 	movq	%rcx, (%rax)
    00001264: 	cmpq	%rsi, %rbx
    00001267: 	jne	.Ltmp2244 # Offset: 4711
    00001269: 	movq	0x100(%rsp), %rax
    00001271: 	nopl	(%rax) # Size: 7
.Ltmp2246:
    00001278: 	movq	%rax, %rdx
    0000127b: 	movq	(%rdi), %rax
    0000127e: 	cmpq	%rax, %rdx
    00001281: 	ja	.Ltmp2245 # Offset: 4737
    00001287: 	addq	$0x8, %rdi
    0000128b: 	cmpq	%rbx, %rdi
    0000128e: 	jne	.Ltmp2246 # Offset: 4750
    00001290: 	addl	$0x1, %r13d
    00001294: 	cmpl	0x2c(%rsp), %r13d
    00001299: 	jl	.Ltmp2247 # Offset: 4761
.Ltmp2239:
    0000129f: 	callq	clock@PLT # Offset: 4767
    000012a4: 	movq	0x8(%rsp), %rdi
    000012a9: 	pxor	%xmm0, %xmm0
    000012ad: 	movq	%rax, end_time(%rip)
    000012b4: 	subq	start_time(%rip), %rax
    000012bb: 	cvtsi2sd	%rax, %xmm0
    000012c0: 	divsd	DATAat0x14868(%rip), %xmm0
    000012c8: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4808
    000012cd: 	movq	0xe0(%rsp), %rdi
    000012d5: 	cmpq	0x20(%rsp), %rdi
    000012da: 	je	.Ltmp2248 # Offset: 4826
    000012dc: 	movq	0xf0(%rsp), %rax
    000012e4: 	leaq	0x1(%rax), %rsi
    000012e8: 	callq	_ZdlPvm@PLT # Offset: 4840
.Ltmp2248:
    000012ed: 	movq	0x30(%rsp), %rsi
    000012f2: 	movq	0x8(%rsp), %rdi
    000012f7: 	leaq	DATAat0x14548(%rip), %rdx
    000012fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4862
    00001303: 	callq	clock@PLT # Offset: 4867
    00001308: 	xorl	%r13d, %r13d
    0000130b: 	leaq	0x108(%rsp), %r14
    00001313: 	movq	%rax, start_time(%rip)
    0000131a: 	movl	iterations(%rip), %eax
    00001320: 	movl	%eax, 0x2c(%rsp)
    00001324: 	testl	%eax, %eax
    00001326: 	jle	.Ltmp2249 # Offset: 4902
    0000132c: 	nopl	(%rax) # Size: 4
.Ltmp2257:
    00001330: 	movq	%r15, %rsi
    00001333: 	movq	%rbp, %rdi
    00001336: 	movl	$0x3e80, %edx
    0000133b: 	callq	memcpy@PLT # Offset: 4923
    00001340: 	movq	%r14, %rdi
    00001343: 	movq	%r14, %rsi
    00001346: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2254:
    00001350: 	movq	(%rsi), %rcx
    00001353: 	cmpq	%rbp, %rsi
    00001356: 	je	.Ltmp2250 # Offset: 4950
    0000135c: 	movq	%rsi, %rax
    0000135f: 	jmp	.Ltmp2251 # Offset: 4959
    00001361: 	nopl	(%rax) # Size: 7
.Ltmp2253:
    00001368: 	movq	%rdx, (%rax)
    0000136b: 	subq	$0x8, %rax
    0000136f: 	cmpq	%rax, %rbp
    00001372: 	je	.Ltmp2252 # Offset: 4978
.Ltmp2251:
    00001374: 	movq	-0x8(%rax), %rdx
    00001378: 	cmpq	%rdx, %rcx
    0000137b: 	jb	.Ltmp2253 # Offset: 4987
.Ltmp2252:
    0000137d: 	addq	$0x8, %rsi
    00001381: 	movq	%rcx, (%rax)
    00001384: 	cmpq	%rsi, %rbx
    00001387: 	jne	.Ltmp2254 # Offset: 4999
    00001389: 	movq	0x100(%rsp), %rax
    00001391: 	nopl	(%rax) # Size: 7
.Ltmp2256:
    00001398: 	movq	%rax, %rdx
    0000139b: 	movq	(%rdi), %rax
    0000139e: 	cmpq	%rdx, %rax
    000013a1: 	jb	.Ltmp2255 # Offset: 5025
    000013a7: 	addq	$0x8, %rdi
    000013ab: 	cmpq	%rdi, %rbx
    000013ae: 	jne	.Ltmp2256 # Offset: 5038
    000013b0: 	addl	$0x1, %r13d
    000013b4: 	cmpl	0x2c(%rsp), %r13d
    000013b9: 	jl	.Ltmp2257 # Offset: 5049
.Ltmp2249:
    000013bf: 	callq	clock@PLT # Offset: 5055
    000013c4: 	movq	0x8(%rsp), %rdi
    000013c9: 	pxor	%xmm0, %xmm0
    000013cd: 	movq	%rax, end_time(%rip)
    000013d4: 	subq	start_time(%rip), %rax
    000013db: 	cvtsi2sd	%rax, %xmm0
    000013e0: 	divsd	DATAat0x14868(%rip), %xmm0
    000013e8: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5096
    000013ed: 	movq	0xe0(%rsp), %rdi
    000013f5: 	cmpq	0x20(%rsp), %rdi
    000013fa: 	je	.Ltmp2258 # Offset: 5114
    000013fc: 	movq	0xf0(%rsp), %rax
    00001404: 	leaq	0x1(%rax), %rsi
    00001408: 	callq	_ZdlPvm@PLT # Offset: 5128
.Ltmp2258:
    0000140d: 	movq	0x30(%rsp), %rsi
    00001412: 	movq	0x8(%rsp), %rdi
    00001417: 	leaq	DATAat0x14578(%rip), %rdx
    0000141e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5150
    00001423: 	callq	clock@PLT # Offset: 5155
    00001428: 	xorl	%r13d, %r13d
    0000142b: 	leaq	0x3f88(%rsp), %r14
    00001433: 	movq	%rax, start_time(%rip)
    0000143a: 	movl	iterations(%rip), %eax
    00001440: 	movl	%eax, 0x2c(%rsp)
    00001444: 	testl	%eax, %eax
    00001446: 	jle	.Ltmp2259 # Offset: 5190
    0000144c: 	nopl	(%rax) # Size: 4
.Ltmp2267:
    00001450: 	movq	0x10(%rsp), %rsi
    00001455: 	movq	%rbx, %rdi
    00001458: 	movl	$0x3e80, %edx
    0000145d: 	callq	memcpy@PLT # Offset: 5213
    00001462: 	movq	%r14, %rdi
    00001465: 	movq	%r14, %rsi
    00001468: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2264:
    00001470: 	movq	(%rsi), %rcx
    00001473: 	movq	%rsi, %rdx
    00001476: 	cmpq	%rbx, %rsi
    00001479: 	jne	.Ltmp2260 # Offset: 5241
    0000147b: 	jmp	.Ltmp2261 # Offset: 5243
.Ltmp2263:
    00001480: 	movq	-0x8(%rax), %rax
    00001484: 	movq	%rax, 0x8(%rdx)
    00001488: 	cmpq	%rbx, %rdx
    0000148b: 	je	.Ltmp2262 # Offset: 5259
.Ltmp2260:
    00001491: 	movq	%rdx, %rax
    00001494: 	leaq	-0x8(%rdx), %rdx
    00001498: 	cmpq	-0x8(%rax), %rcx
    0000149c: 	jb	.Ltmp2263 # Offset: 5276
    0000149e: 	addq	$0x8, %rsi
    000014a2: 	movq	%rcx, (%rax)
    000014a5: 	cmpq	%rsi, %r12
    000014a8: 	jne	.Ltmp2264 # Offset: 5288
.Ltmp2369:
    000014aa: 	movq	0x3f80(%rsp), %rax
    000014b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2266:
    000014b8: 	movq	%rax, %rdx
    000014bb: 	movq	(%rdi), %rax
    000014be: 	cmpq	%rax, %rdx
    000014c1: 	ja	.Ltmp2265 # Offset: 5313
    000014c7: 	addq	$0x8, %rdi
    000014cb: 	cmpq	%rdi, %r12
    000014ce: 	jne	.Ltmp2266 # Offset: 5326
    000014d0: 	addl	$0x1, %r13d
    000014d4: 	cmpl	0x2c(%rsp), %r13d
    000014d9: 	jl	.Ltmp2267 # Offset: 5337
.Ltmp2259:
    000014df: 	callq	clock@PLT # Offset: 5343
    000014e4: 	movq	0x8(%rsp), %rdi
    000014e9: 	pxor	%xmm0, %xmm0
    000014ed: 	movq	%rax, end_time(%rip)
    000014f4: 	subq	start_time(%rip), %rax
    000014fb: 	cvtsi2sd	%rax, %xmm0
    00001500: 	divsd	DATAat0x14868(%rip), %xmm0
    00001508: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5384
    0000150d: 	movq	0xe0(%rsp), %rdi
    00001515: 	cmpq	0x20(%rsp), %rdi
    0000151a: 	je	.Ltmp2268 # Offset: 5402
    0000151c: 	movq	0xf0(%rsp), %rax
    00001524: 	leaq	0x1(%rax), %rsi
    00001528: 	callq	_ZdlPvm@PLT # Offset: 5416
.Ltmp2268:
    0000152d: 	movq	0x30(%rsp), %r14
    00001532: 	leaq	0xa0(%rsp), %rdi
    0000153a: 	leaq	DATAat0x14267(%rip), %rdx
    00001541: 	movq	%r14, %rsi
    00001544: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5444
    00001549: 	movl	iterations(%rip), %edx
    0000154f: 	movl	$0x1, %r8d
    00001555: 	movl	$0x1, %ecx
    0000155a: 	movq	0xa0(%rsp), %rdi
    00001562: 	movl	$0x7d0, %esi
    00001567: 	callq	_Z9summarizePKciiii # Offset: 5479
    0000156c: 	movq	0x8(%rsp), %rdi
    00001571: 	leaq	DATAat0x14283(%rip), %rdx
    00001578: 	movq	%r14, %rsi
    0000157b: 	shll	$0x3, iterations(%rip)
    00001582: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5506
    00001587: 	callq	clock@PLT # Offset: 5511
    0000158c: 	xorl	%r13d, %r13d
    0000158f: 	movq	%rax, start_time(%rip)
    00001596: 	movl	iterations(%rip), %eax
    0000159c: 	testl	%eax, %eax
    0000159e: 	jle	.Ltmp2269 # Offset: 5534
.Ltmp2270:
    000015a0: 	movl	$0x3e80, %edx
    000015a5: 	movq	%r15, %rsi
    000015a8: 	movq	%rbp, %rdi
    000015ab: 	callq	memcpy@PLT # Offset: 5547
    000015b0: 	movq	%rbx, %rsi
    000015b3: 	movq	%rbp, %rdi
    000015b6: 	callq	_ZN9benchmark9quicksortIPmEEvT_S2_ # Offset: 5558
    000015bb: 	movq	0x8(%rsp), %rdx
    000015c0: 	movq	%rbx, %rsi
    000015c3: 	movq	%rbp, %rdi
    000015c6: 	callq	_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5574
    000015cb: 	addl	$0x1, %r13d
    000015cf: 	cmpl	iterations(%rip), %r13d
    000015d6: 	jl	.Ltmp2270 # Offset: 5590
.Ltmp2269:
    000015d8: 	callq	clock@PLT # Offset: 5592
    000015dd: 	movq	0x8(%rsp), %rdi
    000015e2: 	pxor	%xmm0, %xmm0
    000015e6: 	movq	%rax, end_time(%rip)
    000015ed: 	subq	start_time(%rip), %rax
    000015f4: 	cvtsi2sd	%rax, %xmm0
    000015f9: 	divsd	DATAat0x14868(%rip), %xmm0
    00001601: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5633
    00001606: 	movq	0xe0(%rsp), %rdi
    0000160e: 	cmpq	0x20(%rsp), %rdi
    00001613: 	je	.Ltmp2271 # Offset: 5651
    00001615: 	movq	0xf0(%rsp), %rax
    0000161d: 	leaq	0x1(%rax), %rsi
    00001621: 	callq	_ZdlPvm@PLT # Offset: 5665
.Ltmp2271:
    00001626: 	movq	0x30(%rsp), %rsi
    0000162b: 	movq	0x8(%rsp), %rdi
    00001630: 	leaq	DATAat0x14296(%rip), %rdx
    00001637: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5687
    0000163c: 	callq	clock@PLT # Offset: 5692
    00001641: 	xorl	%r13d, %r13d
    00001644: 	movq	%rax, start_time(%rip)
    0000164b: 	movl	iterations(%rip), %eax
    00001651: 	testl	%eax, %eax
    00001653: 	jle	.Ltmp2272 # Offset: 5715
    00001655: 	nopl	(%rax) # Size: 3
.Ltmp2273:
    00001658: 	movl	$0x3e80, %edx
    0000165d: 	movq	%r15, %rsi
    00001660: 	movq	%rbp, %rdi
    00001663: 	callq	memcpy@PLT # Offset: 5731
    00001668: 	movq	%rbx, %rsi
    0000166b: 	movq	%rbp, %rdi
    0000166e: 	callq	_ZN9benchmark9quicksortI14PointerWrapperImEEEvT_S3_ # Offset: 5742
    00001673: 	movq	0x8(%rsp), %rdx
    00001678: 	movq	%rbx, %rsi
    0000167b: 	movq	%rbp, %rdi
    0000167e: 	callq	_Z13verify_sortedI14PointerWrapperImEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5758
    00001683: 	addl	$0x1, %r13d
    00001687: 	cmpl	iterations(%rip), %r13d
    0000168e: 	jl	.Ltmp2273 # Offset: 5774
.Ltmp2272:
    00001690: 	callq	clock@PLT # Offset: 5776
    00001695: 	movq	0x8(%rsp), %rdi
    0000169a: 	pxor	%xmm0, %xmm0
    0000169e: 	movq	%rax, end_time(%rip)
    000016a5: 	subq	start_time(%rip), %rax
    000016ac: 	cvtsi2sd	%rax, %xmm0
    000016b1: 	divsd	DATAat0x14868(%rip), %xmm0
    000016b9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5817
    000016be: 	movq	0xe0(%rsp), %rdi
    000016c6: 	cmpq	0x20(%rsp), %rdi
    000016cb: 	je	.Ltmp2274 # Offset: 5835
    000016cd: 	movq	0xf0(%rsp), %rax
    000016d5: 	leaq	0x1(%rax), %rsi
    000016d9: 	callq	_ZdlPvm@PLT # Offset: 5849
.Ltmp2274:
    000016de: 	movq	0x30(%rsp), %rsi
    000016e3: 	movq	0x8(%rsp), %rdi
    000016e8: 	leaq	DATAat0x145b8(%rip), %rdx
    000016ef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5871
    000016f4: 	callq	clock@PLT # Offset: 5876
    000016f9: 	movl	iterations(%rip), %r14d
    00001700: 	xorl	%r13d, %r13d
    00001703: 	movq	%rax, start_time(%rip)
    0000170a: 	testl	%r14d, %r14d
    0000170d: 	jle	.Ltmp2275 # Offset: 5901
    0000170f: 	nop # Size: 1
.Ltmp2276:
    00001710: 	movq	0x10(%rsp), %rsi
    00001715: 	movl	$0x3e80, %edx
    0000171a: 	movq	%rbx, %rdi
    0000171d: 	callq	memcpy@PLT # Offset: 5917
    00001722: 	movq	%r12, %rsi
    00001725: 	movq	%rbx, %rdi
    00001728: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperImEEEvT_S4_.part.0/1" # Offset: 5928
    0000172d: 	movq	0x8(%rsp), %rdx
    00001732: 	movq	%r12, %rsi
    00001735: 	movq	%rbx, %rdi
    00001738: 	callq	_Z13verify_sortedIP12ValueWrapperImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5944
    0000173d: 	addl	$0x1, %r13d
    00001741: 	cmpl	iterations(%rip), %r13d
    00001748: 	jl	.Ltmp2276 # Offset: 5960
.Ltmp2275:
    0000174a: 	callq	clock@PLT # Offset: 5962
    0000174f: 	movq	0x8(%rsp), %rdi
    00001754: 	pxor	%xmm0, %xmm0
    00001758: 	movq	%rax, end_time(%rip)
    0000175f: 	subq	start_time(%rip), %rax
    00001766: 	cvtsi2sd	%rax, %xmm0
    0000176b: 	divsd	DATAat0x14868(%rip), %xmm0
    00001773: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6003
    00001778: 	movq	0xe0(%rsp), %rdi
    00001780: 	cmpq	0x20(%rsp), %rdi
    00001785: 	je	.Ltmp2277 # Offset: 6021
    00001787: 	movq	0xf0(%rsp), %rax
    0000178f: 	leaq	0x1(%rax), %rsi
    00001793: 	callq	_ZdlPvm@PLT # Offset: 6035
.Ltmp2277:
    00001798: 	movq	0x30(%rsp), %rsi
    0000179d: 	movq	0x8(%rsp), %rdi
    000017a2: 	leaq	DATAat0x145e0(%rip), %rdx
    000017a9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6057
    000017ae: 	callq	clock@PLT # Offset: 6062
    000017b3: 	movl	iterations(%rip), %r11d
    000017ba: 	xorl	%r13d, %r13d
    000017bd: 	leaq	0x3f88(%rsp), %r14
    000017c5: 	movq	%rax, start_time(%rip)
    000017cc: 	testl	%r11d, %r11d
    000017cf: 	jle	.Ltmp2278 # Offset: 6095
    000017d1: 	nopl	(%rax) # Size: 7
.Ltmp2281:
    000017d8: 	movq	0x10(%rsp), %rsi
    000017dd: 	movl	$0x3e80, %edx
    000017e2: 	movq	%rbx, %rdi
    000017e5: 	callq	memcpy@PLT # Offset: 6117
    000017ea: 	movq	%r12, %rsi
    000017ed: 	movq	%rbx, %rdi
    000017f0: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperImEEEEvT_S5_ # Offset: 6128
    000017f5: 	movq	0x3f80(%rsp), %rdx
    000017fd: 	movq	%r14, %rax
.Ltmp2280:
    00001800: 	movq	%rdx, %rcx
    00001803: 	movq	(%rax), %rdx
    00001806: 	cmpq	%rcx, %rdx
    00001809: 	jb	.Ltmp2279 # Offset: 6153
    0000180f: 	addq	$0x8, %rax
    00001813: 	cmpq	%r12, %rax
    00001816: 	jne	.Ltmp2280 # Offset: 6166
    00001818: 	addl	$0x1, %r13d
    0000181c: 	cmpl	iterations(%rip), %r13d
    00001823: 	jl	.Ltmp2281 # Offset: 6179
.Ltmp2278:
    00001825: 	callq	clock@PLT # Offset: 6181
    0000182a: 	movq	0x8(%rsp), %rdi
    0000182f: 	pxor	%xmm0, %xmm0
    00001833: 	movq	%rax, end_time(%rip)
    0000183a: 	subq	start_time(%rip), %rax
    00001841: 	cvtsi2sd	%rax, %xmm0
    00001846: 	divsd	DATAat0x14868(%rip), %xmm0
    0000184e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6222
    00001853: 	movq	0xe0(%rsp), %rdi
    0000185b: 	cmpq	0x20(%rsp), %rdi
    00001860: 	je	.Ltmp2282 # Offset: 6240
    00001862: 	movq	0xf0(%rsp), %rax
    0000186a: 	leaq	0x1(%rax), %rsi
    0000186e: 	callq	_ZdlPvm@PLT # Offset: 6254
.Ltmp2282:
    00001873: 	movq	0x30(%rsp), %rsi
    00001878: 	movq	0x8(%rsp), %rdi
    0000187d: 	leaq	DATAat0x14610(%rip), %rdx
    00001884: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6276
    00001889: 	callq	clock@PLT # Offset: 6281
    0000188e: 	movl	iterations(%rip), %r10d
    00001895: 	xorl	%r13d, %r13d
    00001898: 	movq	%rax, start_time(%rip)
    0000189f: 	testl	%r10d, %r10d
    000018a2: 	jle	.Ltmp2283 # Offset: 6306
    000018a4: 	nopl	(%rax) # Size: 4
.Ltmp2284:
    000018a8: 	movq	0x18(%rsp), %rsi
    000018ad: 	movl	$0x3e80, %edx
    000018b2: 	movq	%r12, %rdi
    000018b5: 	callq	memcpy@PLT # Offset: 6325
    000018ba: 	movq	%r15, %rsi
    000018bd: 	movq	%r12, %rdi
    000018c0: 	callq	"_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEEEEvT_SD_.part.0/1" # Offset: 6336
    000018c5: 	movq	0x8(%rsp), %rdx
    000018ca: 	movq	%r15, %rsi
    000018cd: 	movq	%r12, %rdi
    000018d0: 	callq	_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_ImEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6352
    000018d5: 	addl	$0x1, %r13d
    000018d9: 	cmpl	iterations(%rip), %r13d
    000018e0: 	jl	.Ltmp2284 # Offset: 6368
.Ltmp2283:
    000018e2: 	callq	clock@PLT # Offset: 6370
    000018e7: 	movq	0x8(%rsp), %rdi
    000018ec: 	pxor	%xmm0, %xmm0
    000018f0: 	movq	%rax, end_time(%rip)
    000018f7: 	subq	start_time(%rip), %rax
    000018fe: 	cvtsi2sd	%rax, %xmm0
    00001903: 	divsd	DATAat0x14868(%rip), %xmm0
    0000190b: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6411
    00001910: 	movq	0xe0(%rsp), %rdi
    00001918: 	cmpq	0x20(%rsp), %rdi
    0000191d: 	je	.Ltmp2285 # Offset: 6429
    0000191f: 	movq	0xf0(%rsp), %rax
    00001927: 	leaq	0x1(%rax), %rsi
    0000192b: 	callq	_ZdlPvm@PLT # Offset: 6443
.Ltmp2285:
    00001930: 	movq	0x30(%rsp), %rsi
    00001935: 	movq	0x8(%rsp), %rdi
    0000193a: 	leaq	DATAat0x14638(%rip), %rdx
    00001941: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6465
    00001946: 	callq	clock@PLT # Offset: 6470
    0000194b: 	movl	iterations(%rip), %r9d
    00001952: 	xorl	%r13d, %r13d
    00001955: 	leaq	0x7e08(%rsp), %r14
    0000195d: 	movq	%rax, start_time(%rip)
    00001964: 	testl	%r9d, %r9d
    00001967: 	jle	.Ltmp2286 # Offset: 6503
    00001969: 	nopl	(%rax) # Size: 7
.Ltmp2289:
    00001970: 	movq	0x18(%rsp), %rsi
    00001975: 	movl	$0x3e80, %edx
    0000197a: 	movq	%r12, %rdi
    0000197d: 	callq	memcpy@PLT # Offset: 6525
    00001982: 	movq	%r15, %rsi
    00001985: 	movq	%r12, %rdi
    00001988: 	callq	_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEEEEvT_SE_ # Offset: 6536
    0000198d: 	movq	0x7e00(%rsp), %rdx
    00001995: 	movq	%r14, %rax
    00001998: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2288:
    000019a0: 	movq	%rdx, %rcx
    000019a3: 	movq	(%rax), %rdx
    000019a6: 	cmpq	%rcx, %rdx
    000019a9: 	jb	.Ltmp2287 # Offset: 6569
    000019af: 	addq	$0x8, %rax
    000019b3: 	cmpq	%r15, %rax
    000019b6: 	jne	.Ltmp2288 # Offset: 6582
    000019b8: 	addl	$0x1, %r13d
    000019bc: 	cmpl	iterations(%rip), %r13d
    000019c3: 	jl	.Ltmp2289 # Offset: 6595
.Ltmp2286:
    000019c5: 	callq	clock@PLT # Offset: 6597
    000019ca: 	movq	0x8(%rsp), %rdi
    000019cf: 	pxor	%xmm0, %xmm0
    000019d3: 	movq	%rax, end_time(%rip)
    000019da: 	subq	start_time(%rip), %rax
    000019e1: 	cvtsi2sd	%rax, %xmm0
    000019e6: 	divsd	DATAat0x14868(%rip), %xmm0
    000019ee: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6638
    000019f3: 	movq	0xe0(%rsp), %rdi
    000019fb: 	cmpq	0x20(%rsp), %rdi
    00001a00: 	je	.Ltmp2290 # Offset: 6656
    00001a02: 	movq	0xf0(%rsp), %rax
    00001a0a: 	leaq	0x1(%rax), %rsi
    00001a0e: 	callq	_ZdlPvm@PLT # Offset: 6670
.Ltmp2290:
    00001a13: 	movq	0x30(%rsp), %rsi
    00001a18: 	movq	0x8(%rsp), %rdi
    00001a1d: 	leaq	DATAat0x14668(%rip), %rdx
    00001a24: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6692
    00001a29: 	callq	clock@PLT # Offset: 6697
    00001a2e: 	movl	iterations(%rip), %r8d
    00001a35: 	xorl	%r13d, %r13d
    00001a38: 	leaq	0x108(%rsp), %r14
    00001a40: 	movq	%rax, start_time(%rip)
    00001a47: 	testl	%r8d, %r8d
    00001a4a: 	jle	.Ltmp2291 # Offset: 6730
    00001a4c: 	nopl	(%rax) # Size: 4
.Ltmp2294:
    00001a50: 	movl	$0x3e80, %edx
    00001a55: 	movq	%r15, %rsi
    00001a58: 	movq	%rbp, %rdi
    00001a5b: 	callq	memcpy@PLT # Offset: 6747
    00001a60: 	movq	%rbx, %rsi
    00001a63: 	movq	%rbp, %rdi
    00001a66: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IPmmEmEEEvT_S5_ # Offset: 6758
    00001a6b: 	movq	0x100(%rsp), %rdx
    00001a73: 	movq	%r14, %rax
    00001a76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2293:
    00001a80: 	movq	%rdx, %rcx
    00001a83: 	movq	(%rax), %rdx
    00001a86: 	cmpq	%rdx, %rcx
    00001a89: 	ja	.Ltmp2292 # Offset: 6793
    00001a8f: 	addq	$0x8, %rax
    00001a93: 	cmpq	%rax, %rbx
    00001a96: 	jne	.Ltmp2293 # Offset: 6806
    00001a98: 	addl	$0x1, %r13d
    00001a9c: 	cmpl	iterations(%rip), %r13d
    00001aa3: 	jl	.Ltmp2294 # Offset: 6819
.Ltmp2291:
    00001aa5: 	callq	clock@PLT # Offset: 6821
    00001aaa: 	movq	0x8(%rsp), %rdi
    00001aaf: 	pxor	%xmm0, %xmm0
    00001ab3: 	movq	%rax, end_time(%rip)
    00001aba: 	subq	start_time(%rip), %rax
    00001ac1: 	cvtsi2sd	%rax, %xmm0
    00001ac6: 	divsd	DATAat0x14868(%rip), %xmm0
    00001ace: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6862
    00001ad3: 	movq	0xe0(%rsp), %rdi
    00001adb: 	cmpq	0x20(%rsp), %rdi
    00001ae0: 	je	.Ltmp2295 # Offset: 6880
    00001ae2: 	movq	0xf0(%rsp), %rax
    00001aea: 	leaq	0x1(%rax), %rsi
    00001aee: 	callq	_ZdlPvm@PLT # Offset: 6894
.Ltmp2295:
    00001af3: 	movq	0x30(%rsp), %rsi
    00001af8: 	movq	0x8(%rsp), %rdi
    00001afd: 	leaq	DATAat0x14690(%rip), %rdx
    00001b04: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6916
    00001b09: 	callq	clock@PLT # Offset: 6921
    00001b0e: 	movl	iterations(%rip), %edi
    00001b14: 	xorl	%r13d, %r13d
    00001b17: 	leaq	0x108(%rsp), %r14
    00001b1f: 	movq	%rax, start_time(%rip)
    00001b26: 	testl	%edi, %edi
    00001b28: 	jle	.Ltmp2296 # Offset: 6952
    00001b2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2299:
    00001b30: 	movl	$0x3e80, %edx
    00001b35: 	movq	%r15, %rsi
    00001b38: 	movq	%rbp, %rdi
    00001b3b: 	callq	memcpy@PLT # Offset: 6971
    00001b40: 	movq	%rbx, %rsi
    00001b43: 	movq	%rbp, %rdi
    00001b46: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperImEmEmEEEvT_S6_ # Offset: 6982
    00001b4b: 	movq	0x100(%rsp), %rdx
    00001b53: 	movq	%r14, %rax
    00001b56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2298:
    00001b60: 	movq	%rdx, %rcx
    00001b63: 	movq	(%rax), %rdx
    00001b66: 	cmpq	%rcx, %rdx
    00001b69: 	jb	.Ltmp2297 # Offset: 7017
    00001b6f: 	addq	$0x8, %rax
    00001b73: 	cmpq	%rax, %rbx
    00001b76: 	jne	.Ltmp2298 # Offset: 7030
    00001b78: 	addl	$0x1, %r13d
    00001b7c: 	cmpl	iterations(%rip), %r13d
    00001b83: 	jl	.Ltmp2299 # Offset: 7043
.Ltmp2296:
    00001b85: 	callq	clock@PLT # Offset: 7045
    00001b8a: 	movq	0x8(%rsp), %rdi
    00001b8f: 	pxor	%xmm0, %xmm0
    00001b93: 	movq	%rax, end_time(%rip)
    00001b9a: 	subq	start_time(%rip), %rax
    00001ba1: 	cvtsi2sd	%rax, %xmm0
    00001ba6: 	divsd	DATAat0x14868(%rip), %xmm0
    00001bae: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7086
    00001bb3: 	movq	0xe0(%rsp), %rdi
    00001bbb: 	cmpq	0x20(%rsp), %rdi
    00001bc0: 	je	.Ltmp2300 # Offset: 7104
    00001bc2: 	movq	0xf0(%rsp), %rax
    00001bca: 	leaq	0x1(%rax), %rsi
    00001bce: 	callq	_ZdlPvm@PLT # Offset: 7118
.Ltmp2300:
    00001bd3: 	movq	0x30(%rsp), %rsi
    00001bd8: 	movq	0x8(%rsp), %rdi
    00001bdd: 	leaq	DATAat0x146c0(%rip), %rdx
    00001be4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7140
    00001be9: 	callq	clock@PLT # Offset: 7145
    00001bee: 	movl	iterations(%rip), %esi
    00001bf4: 	xorl	%r13d, %r13d
    00001bf7: 	leaq	0x3f88(%rsp), %r14
    00001bff: 	movq	%rax, start_time(%rip)
    00001c06: 	testl	%esi, %esi
    00001c08: 	jle	.Ltmp2301 # Offset: 7176
    00001c0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2304:
    00001c10: 	movq	0x10(%rsp), %rsi
    00001c15: 	movl	$0x3e80, %edx
    00001c1a: 	movq	%rbx, %rdi
    00001c1d: 	callq	memcpy@PLT # Offset: 7197
    00001c22: 	movq	%r12, %rsi
    00001c25: 	movq	%rbx, %rdi
    00001c28: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_EEEvT_S8_ # Offset: 7208
    00001c2d: 	movq	0x3f80(%rsp), %rdx
    00001c35: 	movq	%r14, %rax
    00001c38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2303:
    00001c40: 	movq	%rdx, %rcx
    00001c43: 	movq	(%rax), %rdx
    00001c46: 	cmpq	%rdx, %rcx
    00001c49: 	ja	.Ltmp2302 # Offset: 7241
    00001c4f: 	addq	$0x8, %rax
    00001c53: 	cmpq	%r12, %rax
    00001c56: 	jne	.Ltmp2303 # Offset: 7254
    00001c58: 	addl	$0x1, %r13d
    00001c5c: 	cmpl	iterations(%rip), %r13d
    00001c63: 	jl	.Ltmp2304 # Offset: 7267
.Ltmp2301:
    00001c65: 	callq	clock@PLT # Offset: 7269
    00001c6a: 	movq	0x8(%rsp), %rdi
    00001c6f: 	pxor	%xmm0, %xmm0
    00001c73: 	movq	%rax, end_time(%rip)
    00001c7a: 	subq	start_time(%rip), %rax
    00001c81: 	cvtsi2sd	%rax, %xmm0
    00001c86: 	divsd	DATAat0x14868(%rip), %xmm0
    00001c8e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7310
    00001c93: 	movq	0xe0(%rsp), %rdi
    00001c9b: 	cmpq	0x20(%rsp), %rdi
    00001ca0: 	je	.Ltmp2305 # Offset: 7328
    00001ca2: 	movq	0xf0(%rsp), %rax
    00001caa: 	leaq	0x1(%rax), %rsi
    00001cae: 	callq	_ZdlPvm@PLT # Offset: 7342
.Ltmp2305:
    00001cb3: 	movq	0x30(%rsp), %r14
    00001cb8: 	leaq	0xc0(%rsp), %rdi
    00001cc0: 	leaq	DATAat0x142af(%rip), %rdx
    00001cc7: 	movq	%r14, %rsi
    00001cca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7370
    00001ccf: 	movl	iterations(%rip), %edx
    00001cd5: 	movl	$0x1, %r8d
    00001cdb: 	movl	$0x1, %ecx
    00001ce0: 	movq	0xc0(%rsp), %rdi
    00001ce8: 	movl	$0x7d0, %esi
    00001ced: 	callq	_Z9summarizePKciiii # Offset: 7405
    00001cf2: 	movq	0x8(%rsp), %rdi
    00001cf7: 	leaq	DATAat0x142c6(%rip), %rdx
    00001cfe: 	movq	%r14, %rsi
    00001d01: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7425
    00001d06: 	callq	clock@PLT # Offset: 7430
    00001d0b: 	movl	iterations(%rip), %ecx
    00001d11: 	xorl	%r13d, %r13d
    00001d14: 	movq	%rax, start_time(%rip)
    00001d1b: 	testl	%ecx, %ecx
    00001d1d: 	jle	.Ltmp2306 # Offset: 7453
    00001d23: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2309:
    00001d28: 	movl	$0x3e80, %edx
    00001d2d: 	movq	%r15, %rsi
    00001d30: 	movq	%rbp, %rdi
    00001d33: 	movl	$0x3e7, %r14d
    00001d39: 	callq	memcpy@PLT # Offset: 7481
    00001d3e: 	nop # Size: 2
.Ltmp2307:
    00001d40: 	movq	(%rbp,%r14,8), %rcx
    00001d45: 	movq	%r14, %rdx
    00001d48: 	movq	%rbp, %rsi
    00001d4b: 	movl	$0x7d0, %edi
    00001d50: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 7504
    00001d55: 	subq	$0x1, %r14
    00001d59: 	jae	.Ltmp2307 # Offset: 7513
    00001d5b: 	movl	$0x7cf, %r14d
    00001d61: 	nopl	(%rax) # Size: 7
.Ltmp2308:
    00001d68: 	movq	0x100(%rsp), %rax
    00001d70: 	xorl	%edx, %edx
    00001d72: 	movq	%r14, %rdi
    00001d75: 	movq	%rbp, %rsi
    00001d78: 	movq	(%rbp,%r14,8), %rcx
    00001d7d: 	movq	%rax, (%rbp,%r14,8)
    00001d82: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 7554
    00001d87: 	subq	$0x1, %r14
    00001d8b: 	jne	.Ltmp2308 # Offset: 7563
    00001d8d: 	movq	0x8(%rsp), %rdx
    00001d92: 	movq	%rbx, %rsi
    00001d95: 	movq	%rbp, %rdi
    00001d98: 	callq	_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7576
    00001d9d: 	addl	$0x1, %r13d
    00001da1: 	cmpl	iterations(%rip), %r13d
    00001da8: 	jl	.Ltmp2309 # Offset: 7592
.Ltmp2306:
    00001dae: 	callq	clock@PLT # Offset: 7598
    00001db3: 	movq	0x8(%rsp), %rdi
    00001db8: 	pxor	%xmm0, %xmm0
    00001dbc: 	movq	%rax, end_time(%rip)
    00001dc3: 	subq	start_time(%rip), %rax
    00001dca: 	cvtsi2sd	%rax, %xmm0
    00001dcf: 	divsd	DATAat0x14868(%rip), %xmm0
    00001dd7: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7639
    00001ddc: 	movq	0xe0(%rsp), %rdi
    00001de4: 	cmpq	0x20(%rsp), %rdi
    00001de9: 	je	.Ltmp2310 # Offset: 7657
    00001deb: 	movq	0xf0(%rsp), %rax
    00001df3: 	leaq	0x1(%rax), %rsi
    00001df7: 	callq	_ZdlPvm@PLT # Offset: 7671
.Ltmp2310:
    00001dfc: 	movq	0x30(%rsp), %rsi
    00001e01: 	movq	0x8(%rsp), %rdi
    00001e06: 	leaq	DATAat0x142d9(%rip), %rdx
    00001e0d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7693
    00001e12: 	callq	clock@PLT # Offset: 7698
    00001e17: 	leaq	0x108(%rsp), %r14
    00001e1f: 	movl	$0x0, 0x2c(%rsp)
    00001e27: 	movq	%rax, start_time(%rip)
    00001e2e: 	movl	iterations(%rip), %eax
    00001e34: 	movl	%eax, 0x38(%rsp)
    00001e38: 	testl	%eax, %eax
    00001e3a: 	jle	.Ltmp2311 # Offset: 7738
.Ltmp2316:
    00001e40: 	movl	$0x3e80, %edx
    00001e45: 	movq	%r15, %rsi
    00001e48: 	movq	%rbp, %rdi
    00001e4b: 	movl	$0x3e7, %r13d
    00001e51: 	callq	memcpy@PLT # Offset: 7761
    00001e56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2312:
    00001e60: 	movq	(%rbp,%r13,8), %rcx
    00001e65: 	movq	%r13, %rdx
    00001e68: 	movq	%rbp, %rsi
    00001e6b: 	movl	$0x7d0, %edi
    00001e70: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperImEmEEvlT_lT0_ # Offset: 7792
    00001e75: 	subq	$0x1, %r13
    00001e79: 	jae	.Ltmp2312 # Offset: 7801
    00001e7b: 	movl	$0x7cf, %r13d
    00001e81: 	nopl	(%rax) # Size: 7
.Ltmp2313:
    00001e88: 	movq	0x100(%rsp), %rax
    00001e90: 	xorl	%edx, %edx
    00001e92: 	movq	%r13, %rdi
    00001e95: 	movq	%rbp, %rsi
    00001e98: 	movq	(%rbp,%r13,8), %rcx
    00001e9d: 	movq	%rax, (%rbp,%r13,8)
    00001ea2: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperImEmEEvlT_lT0_ # Offset: 7842
    00001ea7: 	subq	$0x1, %r13
    00001eab: 	jne	.Ltmp2313 # Offset: 7851
    00001ead: 	movq	0x100(%rsp), %rdx
    00001eb5: 	movq	%r14, %rax
    00001eb8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2315:
    00001ec0: 	movq	%rdx, %rcx
    00001ec3: 	movq	(%rax), %rdx
    00001ec6: 	cmpq	%rcx, %rdx
    00001ec9: 	jb	.Ltmp2314 # Offset: 7881
    00001ecf: 	addq	$0x8, %rax
    00001ed3: 	cmpq	%rbx, %rax
    00001ed6: 	jne	.Ltmp2315 # Offset: 7894
    00001ed8: 	addl	$0x1, 0x2c(%rsp)
    00001edd: 	movl	0x2c(%rsp), %eax
    00001ee1: 	cmpl	0x38(%rsp), %eax
    00001ee5: 	jl	.Ltmp2316 # Offset: 7909
.Ltmp2311:
    00001eeb: 	callq	clock@PLT # Offset: 7915
    00001ef0: 	movq	0x8(%rsp), %rdi
    00001ef5: 	pxor	%xmm0, %xmm0
    00001ef9: 	movq	%rax, end_time(%rip)
    00001f00: 	subq	start_time(%rip), %rax
    00001f07: 	cvtsi2sd	%rax, %xmm0
    00001f0c: 	divsd	DATAat0x14868(%rip), %xmm0
    00001f14: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7956
    00001f19: 	movq	0xe0(%rsp), %rdi
    00001f21: 	cmpq	0x20(%rsp), %rdi
    00001f26: 	je	.Ltmp2317 # Offset: 7974
    00001f28: 	movq	0xf0(%rsp), %rax
    00001f30: 	leaq	0x1(%rax), %rsi
    00001f34: 	callq	_ZdlPvm@PLT # Offset: 7988
.Ltmp2317:
    00001f39: 	movq	0x30(%rsp), %rsi
    00001f3e: 	movq	0x8(%rsp), %rdi
    00001f43: 	leaq	DATAat0x14700(%rip), %rdx
    00001f4a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8010
    00001f4f: 	callq	clock@PLT # Offset: 8015
    00001f54: 	movl	iterations(%rip), %edx
    00001f5a: 	xorl	%r13d, %r13d
    00001f5d: 	movq	%rax, start_time(%rip)
    00001f64: 	testl	%edx, %edx
    00001f66: 	jle	.Ltmp2318 # Offset: 8038
    00001f6c: 	nopl	(%rax) # Size: 4
.Ltmp2321:
    00001f70: 	movq	0x10(%rsp), %rsi
    00001f75: 	movl	$0x3e80, %edx
    00001f7a: 	movq	%rbx, %rdi
    00001f7d: 	movl	$0x3e7, %r14d
    00001f83: 	callq	memcpy@PLT # Offset: 8067
    00001f88: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2319:
    00001f90: 	movq	(%rbx,%r14,8), %rcx
    00001f94: 	movq	%r14, %rdx
    00001f97: 	movq	%rbx, %rsi
    00001f9a: 	movl	$0x7d0, %edi
    00001f9f: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperImES2_EEvlT_lT0_ # Offset: 8095
    00001fa4: 	subq	$0x1, %r14
    00001fa8: 	jae	.Ltmp2319 # Offset: 8104
    00001faa: 	movl	$0x7cf, %r14d
.Ltmp2320:
    00001fb0: 	movq	(%rbx,%r14,8), %rcx
    00001fb4: 	xorl	%edx, %edx
    00001fb6: 	movq	%r14, %rdi
    00001fb9: 	movq	%rbx, %rsi
    00001fbc: 	movq	0x3f80(%rsp), %rax
    00001fc4: 	movq	%rax, (%rbx,%r14,8)
    00001fc8: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperImES2_EEvlT_lT0_ # Offset: 8136
    00001fcd: 	subq	$0x1, %r14
    00001fd1: 	jne	.Ltmp2320 # Offset: 8145
    00001fd3: 	movq	0x8(%rsp), %rdx
    00001fd8: 	movq	%r12, %rsi
    00001fdb: 	movq	%rbx, %rdi
    00001fde: 	callq	_Z13verify_sortedIP12ValueWrapperImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8158
    00001fe3: 	addl	$0x1, %r13d
    00001fe7: 	cmpl	iterations(%rip), %r13d
    00001fee: 	jl	.Ltmp2321 # Offset: 8174
.Ltmp2318:
    00001ff0: 	callq	clock@PLT # Offset: 8176
    00001ff5: 	movq	0x8(%rsp), %rdi
    00001ffa: 	pxor	%xmm0, %xmm0
    00001ffe: 	movq	%rax, end_time(%rip)
    00002005: 	subq	start_time(%rip), %rax
    0000200c: 	cvtsi2sd	%rax, %xmm0
    00002011: 	divsd	DATAat0x14868(%rip), %xmm0
    00002019: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8217
    0000201e: 	movq	0xe0(%rsp), %rdi
    00002026: 	cmpq	0x20(%rsp), %rdi
    0000202b: 	je	.Ltmp2322 # Offset: 8235
    0000202d: 	movq	0xf0(%rsp), %rax
    00002035: 	leaq	0x1(%rax), %rsi
    00002039: 	callq	_ZdlPvm@PLT # Offset: 8249
.Ltmp2322:
    0000203e: 	movq	0x30(%rsp), %rsi
    00002043: 	movq	0x8(%rsp), %rdi
    00002048: 	leaq	DATAat0x14728(%rip), %rdx
    0000204f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8271
    00002054: 	callq	clock@PLT # Offset: 8276
    00002059: 	leaq	0x3f88(%rsp), %r14
    00002061: 	movl	$0x0, 0x2c(%rsp)
    00002069: 	movq	%rax, start_time(%rip)
    00002070: 	movl	iterations(%rip), %eax
    00002076: 	movl	%eax, 0x38(%rsp)
    0000207a: 	testl	%eax, %eax
    0000207c: 	jle	.Ltmp2323 # Offset: 8316
    00002082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2328:
    00002088: 	movq	0x10(%rsp), %rsi
    0000208d: 	movl	$0x3e80, %edx
    00002092: 	movq	%rbx, %rdi
    00002095: 	movl	$0x3e7, %r13d
    0000209b: 	callq	memcpy@PLT # Offset: 8347
.Ltmp2324:
    000020a0: 	movq	(%rbx,%r13,8), %rcx
    000020a4: 	movq	%r13, %rdx
    000020a7: 	movq	%rbx, %rsi
    000020aa: 	movl	$0x7d0, %edi
    000020af: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperImEES3_EEvlT_lT0_ # Offset: 8367
    000020b4: 	subq	$0x1, %r13
    000020b8: 	jae	.Ltmp2324 # Offset: 8376
    000020ba: 	movl	$0x7cf, %r13d
.Ltmp2325:
    000020c0: 	movq	(%rbx,%r13,8), %rcx
    000020c4: 	xorl	%edx, %edx
    000020c6: 	movq	%r13, %rdi
    000020c9: 	movq	%rbx, %rsi
    000020cc: 	movq	0x3f80(%rsp), %rax
    000020d4: 	movq	%rax, (%rbx,%r13,8)
    000020d8: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperImEES3_EEvlT_lT0_ # Offset: 8408
    000020dd: 	subq	$0x1, %r13
    000020e1: 	jne	.Ltmp2325 # Offset: 8417
    000020e3: 	movq	0x3f80(%rsp), %rdx
    000020eb: 	movq	%r14, %rax
    000020ee: 	nop # Size: 2
.Ltmp2327:
    000020f0: 	movq	%rdx, %rcx
    000020f3: 	movq	(%rax), %rdx
    000020f6: 	cmpq	%rcx, %rdx
    000020f9: 	jb	.Ltmp2326 # Offset: 8441
    000020ff: 	addq	$0x8, %rax
    00002103: 	cmpq	%rax, %r12
    00002106: 	jne	.Ltmp2327 # Offset: 8454
    00002108: 	addl	$0x1, 0x2c(%rsp)
    0000210d: 	movl	0x2c(%rsp), %eax
    00002111: 	cmpl	0x38(%rsp), %eax
    00002115: 	jl	.Ltmp2328 # Offset: 8469
.Ltmp2323:
    0000211b: 	callq	clock@PLT # Offset: 8475
    00002120: 	movq	0x8(%rsp), %rdi
    00002125: 	pxor	%xmm0, %xmm0
    00002129: 	movq	%rax, end_time(%rip)
    00002130: 	subq	start_time(%rip), %rax
    00002137: 	cvtsi2sd	%rax, %xmm0
    0000213c: 	divsd	DATAat0x14868(%rip), %xmm0
    00002144: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8516
    00002149: 	movq	0xe0(%rsp), %rdi
    00002151: 	cmpq	0x20(%rsp), %rdi
    00002156: 	je	.Ltmp2329 # Offset: 8534
    00002158: 	movq	0xf0(%rsp), %rax
    00002160: 	leaq	0x1(%rax), %rsi
    00002164: 	callq	_ZdlPvm@PLT # Offset: 8548
.Ltmp2329:
    00002169: 	movq	0x30(%rsp), %rsi
    0000216e: 	movq	0x8(%rsp), %rdi
    00002173: 	leaq	DATAat0x14758(%rip), %rdx
    0000217a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8570
    0000217f: 	callq	clock@PLT # Offset: 8575
    00002184: 	xorl	%r13d, %r13d
    00002187: 	movq	%rax, start_time(%rip)
    0000218e: 	movl	iterations(%rip), %eax
    00002194: 	testl	%eax, %eax
    00002196: 	jle	.Ltmp2330 # Offset: 8598
    0000219c: 	nopl	(%rax) # Size: 4
.Ltmp2333:
    000021a0: 	movq	0x18(%rsp), %rsi
    000021a5: 	movl	$0x3e80, %edx
    000021aa: 	movq	%r12, %rdi
    000021ad: 	movl	$0x3e7, %r14d
    000021b3: 	callq	memcpy@PLT # Offset: 8627
    000021b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2331:
    000021c0: 	movq	(%r12,%r14,8), %rcx
    000021c4: 	movq	%r14, %rdx
    000021c7: 	movq	%r12, %rsi
    000021ca: 	movl	$0x7d0, %edi
    000021cf: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEESB_EEvlT_lT0_ # Offset: 8655
    000021d4: 	subq	$0x1, %r14
    000021d8: 	jae	.Ltmp2331 # Offset: 8664
    000021da: 	movl	$0x7cf, %r14d
.Ltmp2332:
    000021e0: 	movq	(%r12,%r14,8), %rcx
    000021e4: 	xorl	%edx, %edx
    000021e6: 	movq	%r14, %rdi
    000021e9: 	movq	%r12, %rsi
    000021ec: 	movq	0x7e00(%rsp), %rax
    000021f4: 	movq	%rax, (%r12,%r14,8)
    000021f8: 	callq	_ZN9benchmark9__sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_ImEEEEEEEEEESB_EEvlT_lT0_ # Offset: 8696
    000021fd: 	subq	$0x1, %r14
    00002201: 	jne	.Ltmp2332 # Offset: 8705
    00002203: 	movq	0x8(%rsp), %rdx
    00002208: 	movq	%r15, %rsi
    0000220b: 	movq	%r12, %rdi
    0000220e: 	callq	_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_ImEEEEEEEEEEEvT_SC_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8718
    00002213: 	addl	$0x1, %r13d
    00002217: 	cmpl	iterations(%rip), %r13d
    0000221e: 	jl	.Ltmp2333 # Offset: 8734
.Ltmp2330:
    00002220: 	callq	clock@PLT # Offset: 8736
    00002225: 	movq	0x8(%rsp), %rdi
    0000222a: 	pxor	%xmm0, %xmm0
    0000222e: 	movq	%rax, end_time(%rip)
    00002235: 	subq	start_time(%rip), %rax
    0000223c: 	cvtsi2sd	%rax, %xmm0
    00002241: 	divsd	DATAat0x14868(%rip), %xmm0
    00002249: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8777
    0000224e: 	movq	0xe0(%rsp), %rdi
    00002256: 	cmpq	0x20(%rsp), %rdi
    0000225b: 	je	.Ltmp2334 # Offset: 8795
    0000225d: 	movq	0xf0(%rsp), %rax
    00002265: 	leaq	0x1(%rax), %rsi
    00002269: 	callq	_ZdlPvm@PLT # Offset: 8809
.Ltmp2334:
    0000226e: 	movq	0x30(%rsp), %rsi
    00002273: 	movq	0x8(%rsp), %rdi
    00002278: 	leaq	DATAat0x14780(%rip), %rdx
    0000227f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8831
    00002284: 	callq	clock@PLT # Offset: 8836
    00002289: 	leaq	0x7e08(%rsp), %r14
    00002291: 	movl	$0x0, 0x2c(%rsp)
    00002299: 	movq	%rax, start_time(%rip)
    000022a0: 	movl	iterations(%rip), %eax
    000022a6: 	movl	%eax, 0x38(%rsp)
    000022aa: 	testl	%eax, %eax
    000022ac: 	jle	.Ltmp2335 # Offset: 8876
    000022b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2340:
    000022b8: 	movq	0x18(%rsp), %rsi
    000022bd: 	movl	$0x3e80, %edx
    000022c2: 	movq	%r12, %rdi
    000022c5: 	movl	$0x3e7, %r13d
    000022cb: 	callq	memcpy@PLT # Offset: 8907
.Ltmp2336:
    000022d0: 	movq	(%r12,%r13,8), %rcx
    000022d4: 	movq	%r13, %rdx
    000022d7: 	movq	%r12, %rsi
    000022da: 	movl	$0x7d0, %edi
    000022df: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEESC_EEvlT_lT0_ # Offset: 8927
    000022e4: 	subq	$0x1, %r13
    000022e8: 	jae	.Ltmp2336 # Offset: 8936
    000022ea: 	movl	$0x7cf, %r13d
.Ltmp2337:
    000022f0: 	movq	(%r12,%r13,8), %rcx
    000022f4: 	xorl	%edx, %edx
    000022f6: 	movq	%r13, %rdi
    000022f9: 	movq	%r12, %rsi
    000022fc: 	movq	0x7e00(%rsp), %rax
    00002304: 	movq	%rax, (%r12,%r13,8)
    00002308: 	callq	_ZN9benchmark9__sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_ImEEEEEEEEEEESC_EEvlT_lT0_ # Offset: 8968
    0000230d: 	subq	$0x1, %r13
    00002311: 	jne	.Ltmp2337 # Offset: 8977
    00002313: 	movq	0x7e00(%rsp), %rdx
    0000231b: 	movq	%r14, %rax
    0000231e: 	nop # Size: 2
.Ltmp2339:
    00002320: 	movq	%rdx, %rcx
    00002323: 	movq	(%rax), %rdx
    00002326: 	cmpq	%rdx, %rcx
    00002329: 	ja	.Ltmp2338 # Offset: 9001
    0000232f: 	addq	$0x8, %rax
    00002333: 	cmpq	%r15, %rax
    00002336: 	jne	.Ltmp2339 # Offset: 9014
    00002338: 	addl	$0x1, 0x2c(%rsp)
    0000233d: 	movl	0x2c(%rsp), %eax
    00002341: 	cmpl	0x38(%rsp), %eax
    00002345: 	jl	.Ltmp2340 # Offset: 9029
.Ltmp2335:
    0000234b: 	callq	clock@PLT # Offset: 9035
    00002350: 	movq	0x8(%rsp), %rdi
    00002355: 	pxor	%xmm0, %xmm0
    00002359: 	movq	%rax, end_time(%rip)
    00002360: 	subq	start_time(%rip), %rax
    00002367: 	cvtsi2sd	%rax, %xmm0
    0000236c: 	divsd	DATAat0x14868(%rip), %xmm0
    00002374: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9076
    00002379: 	movq	0xe0(%rsp), %rdi
    00002381: 	cmpq	0x20(%rsp), %rdi
    00002386: 	je	.Ltmp2341 # Offset: 9094
    00002388: 	movq	0xf0(%rsp), %rax
    00002390: 	leaq	0x1(%rax), %rsi
    00002394: 	callq	_ZdlPvm@PLT # Offset: 9108
.Ltmp2341:
    00002399: 	movq	0x30(%rsp), %rsi
    0000239e: 	movq	0x8(%rsp), %rdi
    000023a3: 	leaq	DATAat0x147b0(%rip), %rdx
    000023aa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9130
    000023af: 	callq	clock@PLT # Offset: 9135
    000023b4: 	leaq	0x108(%rsp), %r14
    000023bc: 	movl	$0x0, 0x18(%rsp)
    000023c4: 	movq	%rax, start_time(%rip)
    000023cb: 	movl	iterations(%rip), %eax
    000023d1: 	movl	%eax, 0x2c(%rsp)
    000023d5: 	testl	%eax, %eax
    000023d7: 	jle	.Ltmp2342 # Offset: 9175
    000023dd: 	nopl	(%rax) # Size: 3
.Ltmp2347:
    000023e0: 	movl	$0x3e80, %edx
    000023e5: 	movq	%r15, %rsi
    000023e8: 	movq	%rbp, %rdi
    000023eb: 	movl	$0x3e7, %r13d
    000023f1: 	callq	memcpy@PLT # Offset: 9201
    000023f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2343:
    00002400: 	movq	(%rbp,%r13,8), %rcx
    00002405: 	movq	%r13, %rdx
    00002408: 	movq	%rbp, %rsi
    0000240b: 	movl	$0x7d0, %edi
    00002410: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPmmEmEmEEvlT_lT0_ # Offset: 9232
    00002415: 	subq	$0x1, %r13
    00002419: 	jae	.Ltmp2343 # Offset: 9241
    0000241b: 	movl	$0x7cf, %r13d
    00002421: 	nopl	(%rax) # Size: 7
.Ltmp2344:
    00002428: 	movq	0x100(%rsp), %rax
    00002430: 	xorl	%edx, %edx
    00002432: 	movq	%r13, %rdi
    00002435: 	movq	%rbp, %rsi
    00002438: 	movq	(%rbp,%r13,8), %rcx
    0000243d: 	movq	%rax, (%rbp,%r13,8)
    00002442: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IPmmEmEmEEvlT_lT0_ # Offset: 9282
    00002447: 	subq	$0x1, %r13
    0000244b: 	jne	.Ltmp2344 # Offset: 9291
    0000244d: 	movq	0x100(%rsp), %rdx
    00002455: 	movq	%r14, %rax
    00002458: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2346:
    00002460: 	movq	%rdx, %rcx
    00002463: 	movq	(%rax), %rdx
    00002466: 	cmpq	%rcx, %rdx
    00002469: 	jb	.Ltmp2345 # Offset: 9321
    0000246f: 	addq	$0x8, %rax
    00002473: 	cmpq	%rbx, %rax
    00002476: 	jne	.Ltmp2346 # Offset: 9334
    00002478: 	addl	$0x1, 0x18(%rsp)
    0000247d: 	movl	0x18(%rsp), %eax
    00002481: 	cmpl	0x2c(%rsp), %eax
    00002485: 	jl	.Ltmp2347 # Offset: 9349
.Ltmp2342:
    0000248b: 	callq	clock@PLT # Offset: 9355
    00002490: 	movq	0x8(%rsp), %rdi
    00002495: 	pxor	%xmm0, %xmm0
    00002499: 	movq	%rax, end_time(%rip)
    000024a0: 	subq	start_time(%rip), %rax
    000024a7: 	cvtsi2sd	%rax, %xmm0
    000024ac: 	divsd	DATAat0x14868(%rip), %xmm0
    000024b4: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9396
    000024b9: 	movq	0xe0(%rsp), %rdi
    000024c1: 	cmpq	0x20(%rsp), %rdi
    000024c6: 	je	.Ltmp2348 # Offset: 9414
    000024c8: 	movq	0xf0(%rsp), %rax
    000024d0: 	leaq	0x1(%rax), %rsi
    000024d4: 	callq	_ZdlPvm@PLT # Offset: 9428
.Ltmp2348:
    000024d9: 	movq	0x30(%rsp), %rsi
    000024de: 	movq	0x8(%rsp), %rdi
    000024e3: 	leaq	DATAat0x147d8(%rip), %rdx
    000024ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9450
    000024ef: 	callq	clock@PLT # Offset: 9455
    000024f4: 	leaq	0x108(%rsp), %r14
    000024fc: 	movl	$0x0, 0x18(%rsp)
    00002504: 	movq	%rax, start_time(%rip)
    0000250b: 	movl	iterations(%rip), %eax
    00002511: 	movl	%eax, 0x2c(%rsp)
    00002515: 	testl	%eax, %eax
    00002517: 	jle	.Ltmp2349 # Offset: 9495
    0000251d: 	nopl	(%rax) # Size: 3
.Ltmp2354:
    00002520: 	movl	$0x3e80, %edx
    00002525: 	movq	%r15, %rsi
    00002528: 	movq	%rbp, %rdi
    0000252b: 	movl	$0x3e7, %r13d
    00002531: 	callq	memcpy@PLT # Offset: 9521
    00002536: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2350:
    00002540: 	movq	(%rbp,%r13,8), %rcx
    00002545: 	movq	%r13, %rdx
    00002548: 	movq	%rbp, %rsi
    0000254b: 	movl	$0x7d0, %edi
    00002550: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperImEmEmEmEEvlT_lT0_ # Offset: 9552
    00002555: 	subq	$0x1, %r13
    00002559: 	jae	.Ltmp2350 # Offset: 9561
    0000255b: 	movl	$0x7cf, %r13d
    00002561: 	nopl	(%rax) # Size: 7
.Ltmp2351:
    00002568: 	movq	0x100(%rsp), %rax
    00002570: 	xorl	%edx, %edx
    00002572: 	movq	%r13, %rdi
    00002575: 	movq	%rbp, %rsi
    00002578: 	movq	(%rbp,%r13,8), %rcx
    0000257d: 	movq	%rax, (%rbp,%r13,8)
    00002582: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperImEmEmEmEEvlT_lT0_ # Offset: 9602
    00002587: 	subq	$0x1, %r13
    0000258b: 	jne	.Ltmp2351 # Offset: 9611
    0000258d: 	movq	0x100(%rsp), %rdx
    00002595: 	movq	%r14, %rax
    00002598: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2353:
    000025a0: 	movq	%rdx, %rcx
    000025a3: 	movq	(%rax), %rdx
    000025a6: 	cmpq	%rcx, %rdx
    000025a9: 	jb	.Ltmp2352 # Offset: 9641
    000025af: 	addq	$0x8, %rax
    000025b3: 	cmpq	%rbx, %rax
    000025b6: 	jne	.Ltmp2353 # Offset: 9654
    000025b8: 	addl	$0x1, 0x18(%rsp)
    000025bd: 	movl	0x18(%rsp), %eax
    000025c1: 	cmpl	0x2c(%rsp), %eax
    000025c5: 	jl	.Ltmp2354 # Offset: 9669
.Ltmp2349:
    000025cb: 	callq	clock@PLT # Offset: 9675
    000025d0: 	movq	0x8(%rsp), %rdi
    000025d5: 	pxor	%xmm0, %xmm0
    000025d9: 	movq	%rax, end_time(%rip)
    000025e0: 	subq	start_time(%rip), %rax
    000025e7: 	cvtsi2sd	%rax, %xmm0
    000025ec: 	divsd	DATAat0x14868(%rip), %xmm0
    000025f4: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9716
    000025f9: 	movq	0xe0(%rsp), %rdi
    00002601: 	cmpq	0x20(%rsp), %rdi
    00002606: 	je	.Ltmp2355 # Offset: 9734
    00002608: 	movq	0xf0(%rsp), %rax
    00002610: 	leaq	0x1(%rax), %rsi
    00002614: 	callq	_ZdlPvm@PLT # Offset: 9748
.Ltmp2355:
    00002619: 	movq	0x30(%rsp), %rsi
    0000261e: 	movq	0x8(%rsp), %rdi
    00002623: 	leaq	DATAat0x14808(%rip), %rdx
    0000262a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9770
    0000262f: 	callq	clock@PLT # Offset: 9775
    00002634: 	movl	iterations(%rip), %r13d
    0000263b: 	xorl	%ebp, %ebp
    0000263d: 	leaq	0x3f88(%rsp), %r14
    00002645: 	movq	%rax, start_time(%rip)
    0000264c: 	testl	%r13d, %r13d
    0000264f: 	jle	.Ltmp2356 # Offset: 9807
    00002655: 	nopl	(%rax) # Size: 3
.Ltmp2361:
    00002658: 	movq	0x10(%rsp), %rsi
    0000265d: 	movl	$0x3e80, %edx
    00002662: 	movq	%rbx, %rdi
    00002665: 	movl	$0x3e7, %r15d
    0000266b: 	callq	memcpy@PLT # Offset: 9835
.Ltmp2357:
    00002670: 	movq	(%rbx,%r15,8), %rcx
    00002674: 	movq	%r15, %rdx
    00002677: 	movq	%rbx, %rsi
    0000267a: 	movl	$0x7d0, %edi
    0000267f: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_ES4_EEvlT_lT0_ # Offset: 9855
    00002684: 	subq	$0x1, %r15
    00002688: 	jae	.Ltmp2357 # Offset: 9864
    0000268a: 	movl	$0x7cf, %r15d
.Ltmp2358:
    00002690: 	movq	(%rbx,%r15,8), %rcx
    00002694: 	xorl	%edx, %edx
    00002696: 	movq	%r15, %rdi
    00002699: 	movq	%rbx, %rsi
    0000269c: 	movq	0x3f80(%rsp), %rax
    000026a4: 	movq	%rax, (%rbx,%r15,8)
    000026a8: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_I14PointerWrapperI12ValueWrapperImEES4_ES4_ES4_EEvlT_lT0_ # Offset: 9896
    000026ad: 	subq	$0x1, %r15
    000026b1: 	jne	.Ltmp2358 # Offset: 9905
    000026b3: 	movq	0x3f80(%rsp), %rdx
    000026bb: 	movq	%r14, %rax
    000026be: 	nop # Size: 2
.Ltmp2360:
    000026c0: 	movq	%rdx, %rcx
    000026c3: 	movq	(%rax), %rdx
    000026c6: 	cmpq	%rdx, %rcx
    000026c9: 	ja	.Ltmp2359 # Offset: 9929
    000026cf: 	addq	$0x8, %rax
    000026d3: 	cmpq	%r12, %rax
    000026d6: 	jne	.Ltmp2360 # Offset: 9942
    000026d8: 	addl	$0x1, %ebp
    000026db: 	cmpl	%r13d, %ebp
    000026de: 	jl	.Ltmp2361 # Offset: 9950
.Ltmp2356:
    000026e4: 	callq	clock@PLT # Offset: 9956
    000026e9: 	movq	0x8(%rsp), %rdi
    000026ee: 	pxor	%xmm0, %xmm0
    000026f2: 	movq	%rax, end_time(%rip)
    000026f9: 	subq	start_time(%rip), %rax
    00002700: 	cvtsi2sd	%rax, %xmm0
    00002705: 	divsd	DATAat0x14868(%rip), %xmm0
    0000270d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9997
    00002712: 	movq	0xe0(%rsp), %rdi
    0000271a: 	cmpq	0x20(%rsp), %rdi
    0000271f: 	je	.Ltmp2362 # Offset: 10015
    00002721: 	movq	0xf0(%rsp), %rax
    00002729: 	leaq	0x1(%rax), %rsi
    0000272d: 	callq	_ZdlPvm@PLT # Offset: 10029
.Ltmp2362:
    00002732: 	movq	0x30(%rsp), %rsi
    00002737: 	movq	0x8(%rsp), %rdi
    0000273c: 	leaq	DATAat0x142f2(%rip), %rdx
    00002743: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10051
    00002748: 	movl	iterations(%rip), %edx
    0000274e: 	movl	$0x1, %r8d
    00002754: 	movl	$0x1, %ecx
    00002759: 	movq	0xe0(%rsp), %rdi
    00002761: 	movl	$0x7d0, %esi
    00002766: 	callq	_Z9summarizePKciiii # Offset: 10086
    0000276b: 	movl	0x3c(%rsp), %eax
    0000276f: 	movq	0xe0(%rsp), %rdi
    00002777: 	movl	%eax, iterations(%rip)
    0000277d: 	cmpq	0x20(%rsp), %rdi
    00002782: 	je	.Ltmp2363 # Offset: 10114
    00002784: 	movq	0xf0(%rsp), %rax
    0000278c: 	leaq	0x1(%rax), %rsi
    00002790: 	callq	_ZdlPvm@PLT # Offset: 10128
.Ltmp2363:
    00002795: 	movq	0xc0(%rsp), %rdi
    0000279d: 	leaq	0xd0(%rsp), %rax
    000027a5: 	cmpq	%rax, %rdi
    000027a8: 	je	.Ltmp2364 # Offset: 10152
    000027aa: 	movq	0xd0(%rsp), %rax
    000027b2: 	leaq	0x1(%rax), %rsi
    000027b6: 	callq	_ZdlPvm@PLT # Offset: 10166
.Ltmp2364:
    000027bb: 	movq	0xa0(%rsp), %rdi
    000027c3: 	leaq	0xb0(%rsp), %rax
    000027cb: 	cmpq	%rax, %rdi
    000027ce: 	je	.Ltmp2365 # Offset: 10190
    000027d0: 	movq	0xb0(%rsp), %rax
    000027d8: 	leaq	0x1(%rax), %rsi
    000027dc: 	callq	_ZdlPvm@PLT # Offset: 10204
.Ltmp2365:
    000027e1: 	movq	0x80(%rsp), %rdi
    000027e9: 	leaq	0x90(%rsp), %rax
    000027f1: 	cmpq	%rax, %rdi
    000027f4: 	je	.Ltmp2366 # Offset: 10228
    000027f6: 	movq	0x90(%rsp), %rax
    000027fe: 	leaq	0x1(%rax), %rsi
    00002802: 	callq	_ZdlPvm@PLT # Offset: 10242
.Ltmp2366:
    00002807: 	movq	0x60(%rsp), %rdi
    0000280c: 	leaq	0x70(%rsp), %rax
    00002811: 	cmpq	%rax, %rdi
    00002814: 	je	.Ltmp2367 # Offset: 10260
    00002816: 	movq	0x70(%rsp), %rax
    0000281b: 	leaq	0x1(%rax), %rsi
    0000281f: 	callq	_ZdlPvm@PLT # Offset: 10271
.Ltmp2367:
    00002824: 	movq	0x17808(%rsp), %rax
    0000282c: 	subq	%fs:0x28, %rax
    00002835: 	jne	.Ltmp2368 # Offset: 10293
    0000283b: 	addq	$0x17818, %rsp
    00002842: 	popq	%rbx
    00002843: 	popq	%rbp
    00002844: 	popq	%r12
    00002846: 	popq	%r13
    00002848: 	popq	%r14
    0000284a: 	popq	%r15
    0000284c: 	retq # Offset: 10316
    0000284d: 	nopl	(%rax) # Size: 3
.Ltmp2262:
    00002850: 	movq	%rbx, %rax
    00002853: 	addq	$0x8, %rsi
    00002857: 	movq	%rcx, (%rax)
    0000285a: 	cmpq	%rsi, %r12
    0000285d: 	jne	.Ltmp2264 # Offset: 10333
    00002863: 	jmp	.Ltmp2369 # Offset: 10339
    00002868: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2232:
    00002870: 	movq	%r12, %rax
    00002873: 	addq	$0x8, %rsi
    00002877: 	movq	%rcx, (%rax)
    0000287a: 	cmpq	%rsi, %r15
    0000287d: 	jne	.Ltmp2234 # Offset: 10365
    00002883: 	jmp	.Ltmp2370 # Offset: 10371
    00002888: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2216:
    00002890: 	movq	%rbx, %rax
    00002893: 	addq	$0x8, %rsi
    00002897: 	movq	%rcx, (%rax)
    0000289a: 	cmpq	%rsi, %r12
    0000289d: 	jne	.Ltmp2218 # Offset: 10397
    000028a3: 	jmp	.Ltmp2371 # Offset: 10403
.Ltmp2186:
    000028a8: 	subsd	DATAat0x14880(%rip), %xmm1
    000028b0: 	movabsq	$-0x8000000000000000, %rax
    000028ba: 	cvttsd2si	%xmm1, %rdx
    000028bf: 	xorq	%rax, %rdx
    000028c2: 	jmp	.Ltmp2372 # Offset: 10434
.Ltmp2180:
    000028c7: 	subsd	DATAat0x14880(%rip), %xmm1
    000028cf: 	movabsq	$-0x8000000000000000, %rax
    000028d9: 	cvttsd2si	%xmm1, %rdx
    000028de: 	xorq	%rax, %rdx
    000028e1: 	jmp	.Ltmp2373 # Offset: 10465
.Ltmp2174:
    000028e6: 	subsd	DATAat0x14880(%rip), %xmm1
    000028ee: 	movabsq	$-0x8000000000000000, %rax
    000028f8: 	cvttsd2si	%xmm1, %rdx
    000028fd: 	xorq	%rax, %rdx
    00002900: 	jmp	.Ltmp2374 # Offset: 10496
.Ltmp2168:
    00002905: 	subsd	DATAat0x14880(%rip), %xmm1
    0000290d: 	movabsq	$-0x8000000000000000, %rax
    00002917: 	cvttsd2si	%xmm1, %rdx
    0000291c: 	xorq	%rax, %rdx
    0000291f: 	jmp	.Ltmp2375 # Offset: 10527
.Ltmp2162:
    00002924: 	subsd	DATAat0x14880(%rip), %xmm1
    0000292c: 	movabsq	$-0x8000000000000000, %rax
    00002936: 	cvttsd2si	%xmm1, %rdx
    0000293b: 	xorq	%rax, %rdx
    0000293e: 	jmp	.Ltmp2376 # Offset: 10558
.Ltmp2156:
    00002943: 	subsd	DATAat0x14880(%rip), %xmm1
    0000294b: 	movabsq	$-0x8000000000000000, %rax
    00002955: 	cvttsd2si	%xmm1, %rdx
    0000295a: 	xorq	%rax, %rdx
    0000295d: 	jmp	.Ltmp2377 # Offset: 10589
.Ltmp2150:
    00002962: 	subsd	DATAat0x14880(%rip), %xmm1
    0000296a: 	movabsq	$-0x8000000000000000, %rax
    00002974: 	cvttsd2si	%xmm1, %rdx
    00002979: 	xorq	%rax, %rdx
    0000297c: 	jmp	.Ltmp2378 # Offset: 10620
.Ltmp2144:
    00002981: 	subsd	DATAat0x14880(%rip), %xmm1
    00002989: 	movabsq	$-0x8000000000000000, %rax
    00002993: 	cvttsd2si	%xmm1, %rdx
    00002998: 	xorq	%rax, %rdx
    0000299b: 	jmp	.Ltmp2379 # Offset: 10651
.Ltmp2138:
    000029a0: 	subsd	DATAat0x14880(%rip), %xmm1
    000029a8: 	cvttsd2si	%xmm1, %rdx
    000029ad: 	xorq	%r14, %rdx
    000029b0: 	jmp	.Ltmp2380 # Offset: 10672
.Ltmp2198:
    000029b5: 	movq	%rcx, 0x100(%rsp)
    000029bd: 	leaq	0x8(%rbp), %rsi
    000029c1: 	jmp	.Ltmp2202 # Offset: 10689
.Ltmp2240:
    000029c6: 	movq	%rcx, 0x100(%rsp)
    000029ce: 	leaq	0x8(%rbp), %rsi
    000029d2: 	jmp	.Ltmp2244 # Offset: 10706
.Ltmp2231:
    000029d7: 	movq	%rcx, 0x7e00(%rsp)
    000029df: 	leaq	0x8(%r12), %rsi
    000029e4: 	jmp	.Ltmp2234 # Offset: 10724
.Ltmp2215:
    000029e9: 	movq	%rcx, 0x3f80(%rsp)
    000029f1: 	leaq	0x8(%rbx), %rsi
    000029f5: 	jmp	.Ltmp2218 # Offset: 10741
.Ltmp2261:
    000029fa: 	movq	%rcx, 0x3f80(%rsp)
    00002a02: 	leaq	0x8(%rbx), %rsi
    00002a06: 	jmp	.Ltmp2264 # Offset: 10758
.Ltmp2250:
    00002a0b: 	movq	%rcx, 0x100(%rsp)
    00002a13: 	leaq	0x8(%rbp), %rsi
    00002a17: 	jmp	.Ltmp2254 # Offset: 10775
.Ltmp2255:
    00002a1c: 	movq	0xe0(%rsp), %rdx
    00002a24: 	leaq	DATAat0x141cf(%rip), %rsi
    00002a2b: 	movl	$0x1, %edi
    00002a30: 	xorl	%eax, %eax
    00002a32: 	callq	__printf_chk@PLT # Offset: 10802
    00002a37: 	movl	iterations(%rip), %eax
    00002a3d: 	addl	$0x1, %r13d
    00002a41: 	movl	%eax, 0x2c(%rsp)
    00002a45: 	cmpl	0x2c(%rsp), %r13d
    00002a4a: 	jl	.Ltmp2257 # Offset: 10826
    00002a50: 	jmp	.Ltmp2249 # Offset: 10832
.Ltmp2203:
    00002a55: 	movq	0xe0(%rsp), %rdx
    00002a5d: 	leaq	DATAat0x141cf(%rip), %rsi
    00002a64: 	movl	$0x1, %edi
    00002a69: 	xorl	%eax, %eax
    00002a6b: 	callq	__printf_chk@PLT # Offset: 10859
    00002a70: 	movl	iterations(%rip), %eax
    00002a76: 	addl	$0x1, %r13d
    00002a7a: 	movl	%eax, 0x2c(%rsp)
    00002a7e: 	cmpl	0x2c(%rsp), %r13d
    00002a83: 	jl	.Ltmp2205 # Offset: 10883
    00002a89: 	jmp	.Ltmp2197 # Offset: 10889
.Ltmp2265:
    00002a8e: 	movq	0xe0(%rsp), %rdx
    00002a96: 	leaq	DATAat0x141cf(%rip), %rsi
    00002a9d: 	movl	$0x1, %edi
    00002aa2: 	xorl	%eax, %eax
    00002aa4: 	callq	__printf_chk@PLT # Offset: 10916
    00002aa9: 	movl	iterations(%rip), %eax
    00002aaf: 	addl	$0x1, %r13d
    00002ab3: 	movl	%eax, 0x2c(%rsp)
    00002ab7: 	cmpl	0x2c(%rsp), %r13d
    00002abc: 	jl	.Ltmp2267 # Offset: 10940
    00002ac2: 	jmp	.Ltmp2259 # Offset: 10946
.Ltmp2235:
    00002ac7: 	movq	0xe0(%rsp), %rdx
    00002acf: 	leaq	DATAat0x141cf(%rip), %rsi
    00002ad6: 	movl	$0x1, %edi
    00002adb: 	xorl	%eax, %eax
    00002add: 	callq	__printf_chk@PLT # Offset: 10973
    00002ae2: 	movl	iterations(%rip), %eax
    00002ae8: 	addl	$0x1, %r13d
    00002aec: 	movl	%eax, 0x2c(%rsp)
    00002af0: 	cmpl	0x2c(%rsp), %r13d
    00002af5: 	jl	.Ltmp2237 # Offset: 10997
    00002afb: 	jmp	.Ltmp2229 # Offset: 11003
.Ltmp2245:
    00002b00: 	movq	0xe0(%rsp), %rdx
    00002b08: 	leaq	DATAat0x141cf(%rip), %rsi
    00002b0f: 	movl	$0x1, %edi
    00002b14: 	xorl	%eax, %eax
    00002b16: 	callq	__printf_chk@PLT # Offset: 11030
    00002b1b: 	movl	iterations(%rip), %eax
    00002b21: 	addl	$0x1, %r13d
    00002b25: 	movl	%eax, 0x2c(%rsp)
    00002b29: 	cmpl	0x2c(%rsp), %r13d
    00002b2e: 	jl	.Ltmp2247 # Offset: 11054
    00002b34: 	jmp	.Ltmp2239 # Offset: 11060
.Ltmp2219:
    00002b39: 	movq	0xe0(%rsp), %rdx
    00002b41: 	leaq	DATAat0x141cf(%rip), %rsi
    00002b48: 	movl	$0x1, %edi
    00002b4d: 	xorl	%eax, %eax
    00002b4f: 	callq	__printf_chk@PLT # Offset: 11087
    00002b54: 	movl	iterations(%rip), %eax
    00002b5a: 	addl	$0x1, %r13d
    00002b5e: 	movl	%eax, 0x2c(%rsp)
    00002b62: 	cmpl	0x2c(%rsp), %r13d
    00002b67: 	jl	.Ltmp2221 # Offset: 11111
    00002b6d: 	jmp	.Ltmp2213 # Offset: 11117
.Ltmp2359:
    00002b72: 	movq	0xe0(%rsp), %rdx
    00002b7a: 	leaq	DATAat0x141cf(%rip), %rsi
    00002b81: 	movl	$0x1, %edi
    00002b86: 	xorl	%eax, %eax
    00002b88: 	callq	__printf_chk@PLT # Offset: 11144
    00002b8d: 	movl	iterations(%rip), %r13d
    00002b94: 	addl	$0x1, %ebp
    00002b97: 	cmpl	%r13d, %ebp
    00002b9a: 	jl	.Ltmp2361 # Offset: 11162
    00002ba0: 	jmp	.Ltmp2356 # Offset: 11168
.Ltmp2292:
    00002ba5: 	movq	0xe0(%rsp), %rdx
    00002bad: 	leaq	DATAat0x141cf(%rip), %rsi
    00002bb4: 	movl	$0x1, %edi
    00002bb9: 	xorl	%eax, %eax
    00002bbb: 	callq	__printf_chk@PLT # Offset: 11195
    00002bc0: 	addl	$0x1, %r13d
    00002bc4: 	cmpl	iterations(%rip), %r13d
    00002bcb: 	jl	.Ltmp2294 # Offset: 11211
    00002bd1: 	jmp	.Ltmp2291 # Offset: 11217
.Ltmp2352:
    00002bd6: 	movq	0xe0(%rsp), %rdx
    00002bde: 	leaq	DATAat0x141cf(%rip), %rsi
    00002be5: 	movl	$0x1, %edi
    00002bea: 	xorl	%eax, %eax
    00002bec: 	callq	__printf_chk@PLT # Offset: 11244
    00002bf1: 	movl	iterations(%rip), %eax
    00002bf7: 	addl	$0x1, 0x18(%rsp)
    00002bfc: 	movl	%eax, 0x2c(%rsp)
    00002c00: 	movl	0x18(%rsp), %eax
    00002c04: 	cmpl	0x2c(%rsp), %eax
    00002c08: 	jl	.Ltmp2354 # Offset: 11272
    00002c0e: 	jmp	.Ltmp2349 # Offset: 11278
.Ltmp2279:
    00002c13: 	movq	0xe0(%rsp), %rdx
    00002c1b: 	leaq	DATAat0x141cf(%rip), %rsi
    00002c22: 	movl	$0x1, %edi
    00002c27: 	xorl	%eax, %eax
    00002c29: 	callq	__printf_chk@PLT # Offset: 11305
    00002c2e: 	addl	$0x1, %r13d
    00002c32: 	cmpl	iterations(%rip), %r13d
    00002c39: 	jl	.Ltmp2281 # Offset: 11321
    00002c3f: 	jmp	.Ltmp2278 # Offset: 11327
.Ltmp2287:
    00002c44: 	movq	0xe0(%rsp), %rdx
    00002c4c: 	leaq	DATAat0x141cf(%rip), %rsi
    00002c53: 	movl	$0x1, %edi
    00002c58: 	xorl	%eax, %eax
    00002c5a: 	callq	__printf_chk@PLT # Offset: 11354
    00002c5f: 	addl	$0x1, %r13d
    00002c63: 	cmpl	iterations(%rip), %r13d
    00002c6a: 	jl	.Ltmp2289 # Offset: 11370
    00002c70: 	jmp	.Ltmp2286 # Offset: 11376
.Ltmp2345:
    00002c75: 	movq	0xe0(%rsp), %rdx
    00002c7d: 	leaq	DATAat0x141cf(%rip), %rsi
    00002c84: 	movl	$0x1, %edi
    00002c89: 	xorl	%eax, %eax
    00002c8b: 	callq	__printf_chk@PLT # Offset: 11403
    00002c90: 	movl	iterations(%rip), %eax
    00002c96: 	addl	$0x1, 0x18(%rsp)
    00002c9b: 	movl	%eax, 0x2c(%rsp)
    00002c9f: 	movl	0x18(%rsp), %eax
    00002ca3: 	cmpl	0x2c(%rsp), %eax
    00002ca7: 	jl	.Ltmp2347 # Offset: 11431
    00002cad: 	jmp	.Ltmp2342 # Offset: 11437
.Ltmp2338:
    00002cb2: 	movq	0xe0(%rsp), %rdx
    00002cba: 	leaq	DATAat0x141cf(%rip), %rsi
    00002cc1: 	movl	$0x1, %edi
    00002cc6: 	xorl	%eax, %eax
    00002cc8: 	callq	__printf_chk@PLT # Offset: 11464
    00002ccd: 	movl	iterations(%rip), %eax
    00002cd3: 	addl	$0x1, 0x2c(%rsp)
    00002cd8: 	movl	%eax, 0x38(%rsp)
    00002cdc: 	movl	0x2c(%rsp), %eax
    00002ce0: 	cmpl	0x38(%rsp), %eax
    00002ce4: 	jl	.Ltmp2340 # Offset: 11492
    00002cea: 	jmp	.Ltmp2335 # Offset: 11498
.Ltmp2326:
    00002cef: 	movq	0xe0(%rsp), %rdx
    00002cf7: 	leaq	DATAat0x141cf(%rip), %rsi
    00002cfe: 	movl	$0x1, %edi
    00002d03: 	xorl	%eax, %eax
    00002d05: 	callq	__printf_chk@PLT # Offset: 11525
    00002d0a: 	movl	iterations(%rip), %eax
    00002d10: 	addl	$0x1, 0x2c(%rsp)
    00002d15: 	movl	%eax, 0x38(%rsp)
    00002d19: 	movl	0x2c(%rsp), %eax
    00002d1d: 	cmpl	0x38(%rsp), %eax
    00002d21: 	jl	.Ltmp2328 # Offset: 11553
    00002d27: 	jmp	.Ltmp2323 # Offset: 11559
.Ltmp2314:
    00002d2c: 	movq	0xe0(%rsp), %rdx
    00002d34: 	leaq	DATAat0x141cf(%rip), %rsi
    00002d3b: 	movl	$0x1, %edi
    00002d40: 	xorl	%eax, %eax
    00002d42: 	callq	__printf_chk@PLT # Offset: 11586
    00002d47: 	movl	iterations(%rip), %eax
    00002d4d: 	addl	$0x1, 0x2c(%rsp)
    00002d52: 	movl	%eax, 0x38(%rsp)
    00002d56: 	movl	0x2c(%rsp), %eax
    00002d5a: 	cmpl	0x38(%rsp), %eax
    00002d5e: 	jl	.Ltmp2316 # Offset: 11614
    00002d64: 	jmp	.Ltmp2311 # Offset: 11620
.Ltmp2297:
    00002d69: 	movq	0xe0(%rsp), %rdx
    00002d71: 	leaq	DATAat0x141cf(%rip), %rsi
    00002d78: 	movl	$0x1, %edi
    00002d7d: 	xorl	%eax, %eax
    00002d7f: 	callq	__printf_chk@PLT # Offset: 11647
    00002d84: 	addl	$0x1, %r13d
    00002d88: 	cmpl	iterations(%rip), %r13d
    00002d8f: 	jl	.Ltmp2299 # Offset: 11663
    00002d95: 	jmp	.Ltmp2296 # Offset: 11669
.Ltmp2302:
    00002d9a: 	movq	0xe0(%rsp), %rdx
    00002da2: 	leaq	DATAat0x141cf(%rip), %rsi
    00002da9: 	movl	$0x1, %edi
    00002dae: 	xorl	%eax, %eax
    00002db0: 	callq	__printf_chk@PLT # Offset: 11696
    00002db5: 	addl	$0x1, %r13d
    00002db9: 	cmpl	iterations(%rip), %r13d
    00002dc0: 	jl	.Ltmp2304 # Offset: 11712
    00002dc6: 	jmp	.Ltmp2301 # Offset: 11718
.Ltmp2132:
    00002dcb: 	subsd	DATAat0x14880(%rip), %xmm0
    00002dd3: 	cvttsd2si	%xmm0, %rax
    00002dd8: 	btcq	$0x3f, %rax
    00002ddd: 	jmp	.Ltmp2381 # Offset: 11741
.Ltmp2368:
    00002de2: 	callq	__stack_chk_fail@PLT # Offset: 11746
    00002de7: 	endbr64
.Ltmp2383:
    00002deb: 	movq	%rax, %rbp
    00002dee: 	jmp	.Ltmp2382 # Offset: 11758
    00002df3: 	endbr64
    00002df7: 	jmp	.Ltmp2383 # Offset: 11767
    00002df9: 	endbr64
    00002dfd: 	jmp	.Ltmp2383 # Offset: 11773
    00002dff: 	endbr64
    00002e03: 	jmp	.Ltmp2383 # Offset: 11779
    00002e05: 	endbr64
    00002e09: 	jmp	.Ltmp2383 # Offset: 11785
    00002e0b: 	endbr64
    00002e0f: 	jmp	.Ltmp2383 # Offset: 11791
    00002e11: 	endbr64
    00002e15: 	jmp	.Ltmp2383 # Offset: 11797
    00002e17: 	endbr64
    00002e1b: 	jmp	.Ltmp2383 # Offset: 11803
    00002e1d: 	endbr64
    00002e21: 	jmp	.Ltmp2383 # Offset: 11809
    00002e23: 	endbr64
    00002e27: 	jmp	.Ltmp2383 # Offset: 11815
    00002e29: 	endbr64
.Ltmp2385:
    00002e2d: 	movq	%rax, %rbp
    00002e30: 	jmp	.Ltmp2384 # Offset: 11824
    00002e32: 	endbr64
    00002e36: 	jmp	.Ltmp2385 # Offset: 11830
    00002e38: 	endbr64
    00002e3c: 	jmp	.Ltmp2385 # Offset: 11836
    00002e3e: 	endbr64
    00002e42: 	jmp	.Ltmp2385 # Offset: 11842
.Ltmp2384:
    00002e44: 	movq	0xe0(%rsp), %rdi
    00002e4c: 	cmpq	0x20(%rsp), %rdi
    00002e51: 	je	.Ltmp2386 # Offset: 11857
.Ltmp2390:
    00002e53: 	movq	0xf0(%rsp), %rax
    00002e5b: 	leaq	0x1(%rax), %rsi
    00002e5f: 	callq	_ZdlPvm@PLT # Offset: 11871
.Ltmp2386:
    00002e64: 	movq	0x80(%rsp), %rdi
    00002e6c: 	leaq	0x90(%rsp), %rax
    00002e74: 	cmpq	%rax, %rdi
    00002e77: 	je	.Ltmp2387 # Offset: 11895
    00002e79: 	movq	0x90(%rsp), %rax
    00002e81: 	leaq	0x1(%rax), %rsi
    00002e85: 	callq	_ZdlPvm@PLT # Offset: 11909
.Ltmp2387:
    00002e8a: 	movq	0x60(%rsp), %rdi
    00002e8f: 	leaq	0x70(%rsp), %rax
    00002e94: 	cmpq	%rax, %rdi
    00002e97: 	je	.Ltmp2388 # Offset: 11927
    00002e99: 	movq	0x70(%rsp), %rax
    00002e9e: 	leaq	0x1(%rax), %rsi
    00002ea2: 	callq	_ZdlPvm@PLT # Offset: 11938
.Ltmp2388:
    00002ea7: 	movq	%rbp, %rdi
    00002eaa: 	callq	_Unwind_Resume@PLT # Offset: 11946
    00002eaf: 	endbr64
    00002eb3: 	movq	%rax, %rbp
    00002eb6: 	jmp	.Ltmp2389 # Offset: 11958
    00002eb8: 	endbr64
    00002ebc: 	movq	%rax, %rbp
    00002ebf: 	jmp	.Ltmp2386 # Offset: 11967
.Ltmp2389:
    00002ec1: 	movq	0xe0(%rsp), %rdi
    00002ec9: 	leaq	0xf0(%rsp), %rax
    00002ed1: 	cmpq	%rax, %rdi
    00002ed4: 	jne	.Ltmp2390 # Offset: 11988
    00002eda: 	jmp	.Ltmp2386 # Offset: 11994
    00002edc: 	endbr64
.Ltmp2392:
    00002ee0: 	movq	%rax, %rbp
    00002ee3: 	jmp	.Ltmp2391 # Offset: 12003
    00002ee5: 	endbr64
    00002ee9: 	jmp	.Ltmp2392 # Offset: 12009
.Ltmp2391:
    00002eeb: 	movq	0x13980(%rsp), %rdi
    00002ef3: 	cmpq	%r14, %rdi
    00002ef6: 	je	.Ltmp2387 # Offset: 12022
.Ltmp2394:
    00002ef8: 	movq	0x13990(%rsp), %rax
    00002f00: 	leaq	0x1(%rax), %rsi
    00002f04: 	callq	_ZdlPvm@PLT # Offset: 12036
    00002f09: 	jmp	.Ltmp2387 # Offset: 12041
    00002f0e: 	endbr64
    00002f12: 	jmp	.Ltmp2392 # Offset: 12050
    00002f14: 	endbr64
    00002f18: 	jmp	.Ltmp2392 # Offset: 12056
    00002f1a: 	endbr64
    00002f1e: 	jmp	.Ltmp2392 # Offset: 12062
    00002f20: 	endbr64
    00002f24: 	jmp	.Ltmp2392 # Offset: 12068
    00002f26: 	endbr64
    00002f2a: 	jmp	.Ltmp2392 # Offset: 12074
    00002f2c: 	endbr64
    00002f30: 	jmp	.Ltmp2392 # Offset: 12080
    00002f32: 	endbr64
    00002f36: 	movq	%rax, %rbp
    00002f39: 	jmp	.Ltmp2393 # Offset: 12089
    00002f3b: 	endbr64
    00002f3f: 	movq	%rax, %rbp
    00002f42: 	jmp	.Ltmp2387 # Offset: 12098
.Ltmp2393:
    00002f47: 	movq	0x13980(%rsp), %rdi
    00002f4f: 	leaq	0x13990(%rsp), %rax
    00002f57: 	cmpq	%rax, %rdi
    00002f5a: 	jne	.Ltmp2394 # Offset: 12122
    00002f5c: 	jmp	.Ltmp2387 # Offset: 12124
    00002f61: 	endbr64
.Ltmp2396:
    00002f65: 	movq	%rax, %rbp
    00002f68: 	jmp	.Ltmp2395 # Offset: 12136
    00002f6a: 	endbr64
    00002f6e: 	jmp	.Ltmp2396 # Offset: 12142
    00002f70: 	endbr64
    00002f74: 	jmp	.Ltmp2396 # Offset: 12148
    00002f76: 	endbr64
    00002f7a: 	movq	%rax, %rbp
    00002f7d: 	jmp	.Ltmp2397 # Offset: 12157
.Ltmp2395:
    00002f7f: 	movq	0xe0(%rsp), %rdi
    00002f87: 	cmpq	0x20(%rsp), %rdi
    00002f8c: 	je	.Ltmp2397 # Offset: 12172
    00002f8e: 	movq	0xf0(%rsp), %rax
    00002f96: 	leaq	0x1(%rax), %rsi
    00002f9a: 	callq	_ZdlPvm@PLT # Offset: 12186
.Ltmp2397:
    00002f9f: 	movq	0xa0(%rsp), %rdi
    00002fa7: 	leaq	0xb0(%rsp), %rax
    00002faf: 	cmpq	%rax, %rdi
    00002fb2: 	je	.Ltmp2386 # Offset: 12210
    00002fb8: 	movq	0xb0(%rsp), %rax
    00002fc0: 	leaq	0x1(%rax), %rsi
    00002fc4: 	callq	_ZdlPvm@PLT # Offset: 12228
    00002fc9: 	jmp	.Ltmp2386 # Offset: 12233
    00002fce: 	endbr64
    00002fd2: 	jmp	.Ltmp2385 # Offset: 12242
    00002fd7: 	endbr64
    00002fdb: 	jmp	.Ltmp2385 # Offset: 12251
    00002fe0: 	endbr64
    00002fe4: 	jmp	.Ltmp2385 # Offset: 12260
    00002fe9: 	endbr64
    00002fed: 	jmp	.Ltmp2385 # Offset: 12269
    00002ff2: 	endbr64
    00002ff6: 	jmp	.Ltmp2396 # Offset: 12278
    00002ffb: 	endbr64
    00002fff: 	jmp	.Ltmp2396 # Offset: 12287
    00003004: 	endbr64
    00003008: 	jmp	.Ltmp2396 # Offset: 12296
    0000300d: 	endbr64
    00003011: 	jmp	.Ltmp2396 # Offset: 12305
    00003016: 	endbr64
    0000301a: 	jmp	.Ltmp2396 # Offset: 12314
    0000301f: 	endbr64
    00003023: 	jmp	.Ltmp2396 # Offset: 12323
    00003028: 	endbr64
    0000302c: 	movq	%rax, %rbp
    0000302f: 	jmp	.Ltmp2398 # Offset: 12335
.Ltmp2382:
    00003031: 	movq	0xe0(%rsp), %rdi
    00003039: 	cmpq	0x20(%rsp), %rdi
    0000303e: 	je	.Ltmp2398 # Offset: 12350
    00003040: 	movq	0xf0(%rsp), %rax
    00003048: 	leaq	0x1(%rax), %rsi
    0000304c: 	callq	_ZdlPvm@PLT # Offset: 12364
.Ltmp2398:
    00003051: 	movq	0xc0(%rsp), %rdi
    00003059: 	leaq	0xd0(%rsp), %rax
    00003061: 	cmpq	%rax, %rdi
    00003064: 	je	.Ltmp2397 # Offset: 12388
    0000306a: 	movq	0xd0(%rsp), %rax
    00003072: 	leaq	0x1(%rax), %rsi
    00003076: 	callq	_ZdlPvm@PLT # Offset: 12406
    0000307b: 	jmp	.Ltmp2397 # Offset: 12411
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_fini" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x13160
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x13160
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 116 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 849 instructions were shortened
BOLT-INFO: removed 388 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 109 out of 143 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x202e50
