BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x1401c, which lies outside .bss
BOLT-WARNING: ignoring symbol __TMC_END__ at 0x14020, which lies outside .data
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x13fe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 2
  State       : disassembled
  Address     : 0x1160
  Size        : 0x4e3a
  MaxSize     : 0x4e40
  Offset      : 0x1160
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB01:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x88, %rsp
    00000015: 	testl	%edi, %edi
    00000017: 	jle	.Ltmp1 # Offset: 23
    0000001d: 	leal	-0x1(%rdi), %eax
    00000020: 	movl	%edi, %r13d
    00000023: 	movq	%rsi, %r14
    00000026: 	movq	%rsi, %rbx
    00000029: 	leaq	0x8(%rsi,%rax,8), %r12
    0000002e: 	leaq	DATAat0x10a13(%rip), %rbp
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp2:
    00000038: 	movq	(%rbx), %rdx
    0000003b: 	movq	%rbp, %rsi
    0000003e: 	movl	$0x1, %edi
    00000043: 	xorl	%eax, %eax
    00000045: 	addq	$0x8, %rbx
    00000049: 	callq	__printf_chk@PLT # Offset: 73
    0000004e: 	cmpq	%r12, %rbx
    00000051: 	jne	.Ltmp2 # Offset: 81
    00000053: 	xorl	%eax, %eax
    00000055: 	leaq	DATAat0x109f9(%rip), %rsi
    0000005c: 	movl	$0x1, %edi
    00000061: 	callq	__printf_chk@PLT # Offset: 97
    00000066: 	cmpl	$0x1, %r13d
    0000006a: 	jg	.Ltmp3 # Offset: 106
.Ltmp282:
    00000070: 	movl	$0x1, 0x7c(%rsp)
    00000078: 	movl	$0x1, 0x78(%rsp)
    00000080: 	movq	$0x1, 0x70(%rsp)
    00000089: 	movq	$0x1, 0x68(%rsp)
    00000092: 	movl	$0x1, 0x64(%rsp)
    0000009a: 	movl	$0x5, (%rsp)
    000000a1: 	movl	$0x1, 0x60(%rsp)
    000000a9: 	movl	$0x5, 0x2c(%rsp)
    000000b1: 	movl	$0x5, 0x28(%rsp)
    000000b9: 	movl	$0x1, 0x5c(%rsp)
    000000c1: 	movl	$0x5, 0x24(%rsp)
    000000c9: 	movl	$0x5, 0x18(%rsp)
    000000d1: 	movl	$0x1, 0x58(%rsp)
.Ltmp283:
    000000d9: 	movzbl	init_value(%rip), %eax
    000000e0: 	movl	$0x3e8, %ecx
    000000e5: 	movl	$0x1f40, %esi
    000000ea: 	xorl	%ebp, %ebp
    000000ec: 	leaq	data8unsigned(%rip), %rdi
    000000f3: 	leaq	DATAat0x10f44(%rip), %rbx
    000000fa: 	movabsq	$0x101010101010101, %rdx
    00000104: 	imulq	%rdx, %rax
    00000108: 	leaq	DATAat0x10a17(%rip), %rdx
    0000010f: 	rep		stosq	%rax, %es:(%rdi)
    00000112: 	movq	%rdi, %r15
    00000115: 	leaq	data8unsigned(%rip), %rdi
    0000011c: 	callq	_Z13test_constantIh20shift_right_constantIhEEvPT_iPKc # Offset: 284
    00000121: 	leaq	DATAat0x10118(%rip), %rdx
    00000128: 	movl	$0x1f40, %esi
    0000012d: 	leaq	data8unsigned(%rip), %rdi
    00000134: 	callq	_Z13test_constantIh29shift_right_repeated_constantIhEEvPT_iPKc # Offset: 308
    00000139: 	callq	clock@PLT # Offset: 313
    0000013e: 	movl	iterations(%rip), %edx
    00000144: 	movq	%rax, start_time(%rip)
    0000014b: 	testl	%edx, %edx
    0000014d: 	jle	.Ltmp4 # Offset: 333
    0000014f: 	nop # Size: 1
.Ltmp7:
    00000150: 	leaq	data8unsigned(%rip), %rax
    00000157: 	pxor	%xmm1, %xmm1
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5:
    00000160: 	movdqa	(%rax), %xmm0
    00000164: 	addq	$0x10, %rax
    00000168: 	paddb	%xmm0, %xmm0
    0000016c: 	paddb	%xmm0, %xmm0
    00000170: 	paddb	%xmm0, %xmm0
    00000174: 	paddb	%xmm0, %xmm0
    00000178: 	paddb	%xmm0, %xmm0
    0000017c: 	paddb	%xmm0, %xmm1
    00000180: 	cmpq	%rax, %r15
    00000183: 	jne	.Ltmp5 # Offset: 387
    00000185: 	movdqa	%xmm1, %xmm0
    00000189: 	psrldq	$0x8, %xmm0
    0000018e: 	paddb	%xmm0, %xmm1
    00000192: 	pxor	%xmm0, %xmm0
    00000196: 	psadbw	%xmm0, %xmm1
    0000019a: 	movd	%xmm1, %eax
    0000019e: 	testb	%al, %al
    000001a0: 	jne	.Ltmp6 # Offset: 416
    000001a6: 	addl	$0x1, %ebp
    000001a9: 	cmpl	%edx, %ebp
    000001ab: 	jl	.Ltmp7 # Offset: 427
.Ltmp4:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	leaq	DATAat0x10a34(%rip), %rdi
    000001b9: 	xorl	%ebx, %ebx
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	movq	%rax, end_time(%rip)
    000001c6: 	subq	start_time(%rip), %rax
    000001cd: 	leaq	data16(%rip), %r15
    000001d4: 	leaq	DATAat0x10f44(%rip), %rbp
    000001db: 	cvtsi2sd	%rax, %xmm0
    000001e0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001e8: 	callq	_Z13record_resultdPKc # Offset: 488
    000001ed: 	callq	clock@PLT # Offset: 493
    000001f2: 	movl	iterations(%rip), %edx
    000001f8: 	movq	%rax, start_time(%rip)
    000001ff: 	testl	%edx, %edx
    00000201: 	jle	.Ltmp8 # Offset: 513
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp11:
    00000208: 	leaq	data8unsigned(%rip), %rax
    0000020f: 	pxor	%xmm1, %xmm1
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp9:
    00000218: 	movdqa	(%rax), %xmm0
    0000021c: 	addq	$0x10, %rax
    00000220: 	paddb	%xmm0, %xmm0
    00000224: 	paddb	%xmm0, %xmm0
    00000228: 	paddb	%xmm0, %xmm0
    0000022c: 	paddb	%xmm0, %xmm0
    00000230: 	paddb	%xmm0, %xmm0
    00000234: 	paddb	%xmm0, %xmm1
    00000238: 	cmpq	%r15, %rax
    0000023b: 	jne	.Ltmp9 # Offset: 571
    0000023d: 	movdqa	%xmm1, %xmm0
    00000241: 	psrldq	$0x8, %xmm0
    00000246: 	paddb	%xmm0, %xmm1
    0000024a: 	pxor	%xmm0, %xmm0
    0000024e: 	psadbw	%xmm0, %xmm1
    00000252: 	movd	%xmm1, %eax
    00000256: 	testb	%al, %al
    00000258: 	jne	.Ltmp10 # Offset: 600
    0000025e: 	addl	$0x1, %ebx
    00000261: 	cmpl	%edx, %ebx
    00000263: 	jl	.Ltmp11 # Offset: 611
.Ltmp8:
    00000265: 	callq	clock@PLT # Offset: 613
    0000026a: 	leaq	DATAat0x10140(%rip), %rdi
    00000271: 	xorl	%ebx, %ebx
    00000273: 	pxor	%xmm0, %xmm0
    00000277: 	movq	%rax, end_time(%rip)
    0000027e: 	subq	start_time(%rip), %rax
    00000285: 	leaq	data16(%rip), %r15
    0000028c: 	leaq	DATAat0x10f44(%rip), %rbp
    00000293: 	cvtsi2sd	%rax, %xmm0
    00000298: 	divsd	DATAat0x10f68(%rip), %xmm0
    000002a0: 	callq	_Z13record_resultdPKc # Offset: 672
    000002a5: 	callq	clock@PLT # Offset: 677
    000002aa: 	movl	iterations(%rip), %ecx
    000002b0: 	movq	init_value(%rip), %rsi
    000002b7: 	movq	%rax, start_time(%rip)
    000002be: 	testl	%ecx, %ecx
    000002c0: 	jle	.Ltmp12 # Offset: 704
    000002c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp15:
    000002c8: 	leaq	data8unsigned(%rip), %rax
    000002cf: 	pxor	%xmm0, %xmm0
    000002d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp13:
    000002d8: 	paddb	(%rax), %xmm0
    000002dc: 	addq	$0x10, %rax
    000002e0: 	cmpq	%r15, %rax
    000002e3: 	jne	.Ltmp13 # Offset: 739
    000002e5: 	movdqa	%xmm0, %xmm1
    000002e9: 	movl	%esi, %edx
    000002eb: 	psrldq	$0x8, %xmm1
    000002f0: 	shll	$0x6, %edx
    000002f3: 	paddb	%xmm1, %xmm0
    000002f7: 	pxor	%xmm1, %xmm1
    000002fb: 	psadbw	%xmm1, %xmm0
    000002ff: 	movd	%xmm0, %eax
    00000303: 	cmpb	%al, %dl
    00000305: 	je	.Ltmp14 # Offset: 773
    00000307: 	movl	current_test(%rip), %edx
    0000030d: 	movq	%rbp, %rsi
    00000310: 	movl	$0x1, %edi
    00000315: 	xorl	%eax, %eax
    00000317: 	addl	$0x1, %ebx
    0000031a: 	callq	__printf_chk@PLT # Offset: 794
    0000031f: 	movl	iterations(%rip), %ecx
    00000325: 	cmpl	%ecx, %ebx
    00000327: 	jge	.Ltmp12 # Offset: 807
    00000329: 	movq	init_value(%rip), %rsi
    00000330: 	jmp	.Ltmp15 # Offset: 816
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp14:
    00000338: 	addl	$0x1, %ebx
    0000033b: 	cmpl	%ecx, %ebx
    0000033d: 	jl	.Ltmp15 # Offset: 829
.Ltmp12:
    0000033f: 	callq	clock@PLT # Offset: 831
    00000344: 	leaq	DATAat0x10a50(%rip), %rdi
    0000034b: 	xorl	%ebx, %ebx
    0000034d: 	pxor	%xmm0, %xmm0
    00000351: 	movq	%rax, end_time(%rip)
    00000358: 	subq	start_time(%rip), %rax
    0000035f: 	leaq	data16(%rip), %r15
    00000366: 	leaq	DATAat0x10f44(%rip), %rbp
    0000036d: 	cvtsi2sd	%rax, %xmm0
    00000372: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000037a: 	callq	_Z13record_resultdPKc # Offset: 890
    0000037f: 	callq	clock@PLT # Offset: 895
    00000384: 	movl	iterations(%rip), %ecx
    0000038a: 	movq	init_value(%rip), %rsi
    00000391: 	movq	%rax, start_time(%rip)
    00000398: 	testl	%ecx, %ecx
    0000039a: 	jle	.Ltmp16 # Offset: 922
    0000039c: 	nopl	(%rax) # Size: 4
.Ltmp19:
    000003a0: 	leaq	data8unsigned(%rip), %rax
    000003a7: 	pxor	%xmm0, %xmm0
    000003ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp17:
    000003b0: 	paddb	(%rax), %xmm0
    000003b4: 	addq	$0x10, %rax
    000003b8: 	cmpq	%r15, %rax
    000003bb: 	jne	.Ltmp17 # Offset: 955
    000003bd: 	movdqa	%xmm0, %xmm1
    000003c1: 	movl	%esi, %edx
    000003c3: 	psrldq	$0x8, %xmm1
    000003c8: 	shll	$0x6, %edx
    000003cb: 	paddb	%xmm1, %xmm0
    000003cf: 	pxor	%xmm1, %xmm1
    000003d3: 	psadbw	%xmm1, %xmm0
    000003d7: 	movd	%xmm0, %eax
    000003db: 	cmpb	%al, %dl
    000003dd: 	je	.Ltmp18 # Offset: 989
    000003df: 	movl	current_test(%rip), %edx
    000003e5: 	movq	%rbp, %rsi
    000003e8: 	movl	$0x1, %edi
    000003ed: 	xorl	%eax, %eax
    000003ef: 	addl	$0x1, %ebx
    000003f2: 	callq	__printf_chk@PLT # Offset: 1010
    000003f7: 	movl	iterations(%rip), %ecx
    000003fd: 	cmpl	%ecx, %ebx
    000003ff: 	jge	.Ltmp16 # Offset: 1023
    00000401: 	movq	init_value(%rip), %rsi
    00000408: 	jmp	.Ltmp19 # Offset: 1032
    0000040a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp18:
    00000410: 	addl	$0x1, %ebx
    00000413: 	cmpl	%ecx, %ebx
    00000415: 	jl	.Ltmp19 # Offset: 1045
.Ltmp16:
    00000417: 	callq	clock@PLT # Offset: 1047
    0000041c: 	leaq	DATAat0x10a61(%rip), %rdi
    00000423: 	xorl	%ebx, %ebx
    00000425: 	pxor	%xmm0, %xmm0
    00000429: 	movq	%rax, end_time(%rip)
    00000430: 	subq	start_time(%rip), %rax
    00000437: 	leaq	data16(%rip), %r15
    0000043e: 	leaq	DATAat0x10f44(%rip), %rbp
    00000445: 	cvtsi2sd	%rax, %xmm0
    0000044a: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000452: 	callq	_Z13record_resultdPKc # Offset: 1106
    00000457: 	callq	clock@PLT # Offset: 1111
    0000045c: 	movl	iterations(%rip), %ecx
    00000462: 	movq	init_value(%rip), %rsi
    00000469: 	movq	%rax, start_time(%rip)
    00000470: 	testl	%ecx, %ecx
    00000472: 	jle	.Ltmp20 # Offset: 1138
    00000474: 	nopl	(%rax) # Size: 4
.Ltmp23:
    00000478: 	leaq	data8unsigned(%rip), %rax
    0000047f: 	pxor	%xmm0, %xmm0
    00000483: 	nopl	(%rax,%rax) # Size: 5
.Ltmp21:
    00000488: 	paddb	(%rax), %xmm0
    0000048c: 	addq	$0x10, %rax
    00000490: 	cmpq	%r15, %rax
    00000493: 	jne	.Ltmp21 # Offset: 1171
    00000495: 	movdqa	%xmm0, %xmm1
    00000499: 	movl	%esi, %edx
    0000049b: 	psrldq	$0x8, %xmm1
    000004a0: 	shll	$0x6, %edx
    000004a3: 	paddb	%xmm1, %xmm0
    000004a7: 	pxor	%xmm1, %xmm1
    000004ab: 	psadbw	%xmm1, %xmm0
    000004af: 	movd	%xmm0, %eax
    000004b3: 	cmpb	%al, %dl
    000004b5: 	je	.Ltmp22 # Offset: 1205
    000004b7: 	movl	current_test(%rip), %edx
    000004bd: 	movq	%rbp, %rsi
    000004c0: 	movl	$0x1, %edi
    000004c5: 	xorl	%eax, %eax
    000004c7: 	addl	$0x1, %ebx
    000004ca: 	callq	__printf_chk@PLT # Offset: 1226
    000004cf: 	movl	iterations(%rip), %ecx
    000004d5: 	cmpl	%ecx, %ebx
    000004d7: 	jge	.Ltmp20 # Offset: 1239
    000004d9: 	movq	init_value(%rip), %rsi
    000004e0: 	jmp	.Ltmp23 # Offset: 1248
    000004e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp22:
    000004e8: 	addl	$0x1, %ebx
    000004eb: 	cmpl	%ecx, %ebx
    000004ed: 	jl	.Ltmp23 # Offset: 1261
.Ltmp20:
    000004ef: 	callq	clock@PLT # Offset: 1263
    000004f4: 	leaq	DATAat0x10a7a(%rip), %rdi
    000004fb: 	pxor	%xmm0, %xmm0
    000004ff: 	xorl	%ebp, %ebp
    00000501: 	movq	%rax, end_time(%rip)
    00000508: 	subq	start_time(%rip), %rax
    0000050f: 	leaq	DATAat0x10f44(%rip), %rbx
    00000516: 	cvtsi2sd	%rax, %xmm0
    0000051b: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000523: 	callq	_Z13record_resultdPKc # Offset: 1315
    00000528: 	movl	$0x3e8, %ecx
    0000052d: 	movl	$0x1f40, %esi
    00000532: 	movzbl	init_value(%rip), %eax
    00000539: 	movabsq	$0x101010101010101, %rdx
    00000543: 	leaq	data8(%rip), %rdi
    0000054a: 	imulq	%rdx, %rax
    0000054e: 	leaq	DATAat0x10a18(%rip), %rdx
    00000555: 	rep		stosq	%rax, %es:(%rdi)
    00000558: 	movq	%rdi, %r15
    0000055b: 	leaq	data8(%rip), %rdi
    00000562: 	callq	_Z13test_constantIa20shift_right_constantIaEEvPT_iPKc # Offset: 1378
    00000567: 	leaq	DATAat0x10168(%rip), %rdx
    0000056e: 	movl	$0x1f40, %esi
    00000573: 	leaq	data8(%rip), %rdi
    0000057a: 	callq	_Z13test_constantIa29shift_right_repeated_constantIaEEvPT_iPKc # Offset: 1402
    0000057f: 	callq	clock@PLT # Offset: 1407
    00000584: 	movl	iterations(%rip), %edx
    0000058a: 	movq	%rax, start_time(%rip)
    00000591: 	testl	%edx, %edx
    00000593: 	jle	.Ltmp24 # Offset: 1427
    00000595: 	nopl	(%rax) # Size: 3
.Ltmp27:
    00000598: 	leaq	data8(%rip), %rax
    0000059f: 	pxor	%xmm1, %xmm1
    000005a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp25:
    000005a8: 	movdqa	(%rax), %xmm0
    000005ac: 	addq	$0x10, %rax
    000005b0: 	paddb	%xmm0, %xmm0
    000005b4: 	paddb	%xmm0, %xmm0
    000005b8: 	paddb	%xmm0, %xmm0
    000005bc: 	paddb	%xmm0, %xmm0
    000005c0: 	paddb	%xmm0, %xmm0
    000005c4: 	paddb	%xmm0, %xmm1
    000005c8: 	cmpq	%rax, %r15
    000005cb: 	jne	.Ltmp25 # Offset: 1483
    000005cd: 	movdqa	%xmm1, %xmm0
    000005d1: 	psrldq	$0x8, %xmm0
    000005d6: 	paddb	%xmm0, %xmm1
    000005da: 	pxor	%xmm0, %xmm0
    000005de: 	psadbw	%xmm0, %xmm1
    000005e2: 	movd	%xmm1, %eax
    000005e6: 	testb	%al, %al
    000005e8: 	jne	.Ltmp26 # Offset: 1512
    000005ee: 	addl	$0x1, %ebp
    000005f1: 	cmpl	%edx, %ebp
    000005f3: 	jl	.Ltmp27 # Offset: 1523
.Ltmp24:
    000005f5: 	callq	clock@PLT # Offset: 1525
    000005fa: 	leaq	DATAat0x10a35(%rip), %rdi
    00000601: 	xorl	%ebx, %ebx
    00000603: 	pxor	%xmm0, %xmm0
    00000607: 	movq	%rax, end_time(%rip)
    0000060e: 	subq	start_time(%rip), %rax
    00000615: 	leaq	data8unsigned(%rip), %r15
    0000061c: 	leaq	DATAat0x10f44(%rip), %rbp
    00000623: 	cvtsi2sd	%rax, %xmm0
    00000628: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000630: 	callq	_Z13record_resultdPKc # Offset: 1584
    00000635: 	callq	clock@PLT # Offset: 1589
    0000063a: 	movl	iterations(%rip), %edx
    00000640: 	movq	%rax, start_time(%rip)
    00000647: 	testl	%edx, %edx
    00000649: 	jle	.Ltmp28 # Offset: 1609
    0000064b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp31:
    00000650: 	leaq	data8(%rip), %rax
    00000657: 	pxor	%xmm1, %xmm1
    0000065b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp29:
    00000660: 	movdqa	(%rax), %xmm0
    00000664: 	addq	$0x10, %rax
    00000668: 	paddb	%xmm0, %xmm0
    0000066c: 	paddb	%xmm0, %xmm0
    00000670: 	paddb	%xmm0, %xmm0
    00000674: 	paddb	%xmm0, %xmm0
    00000678: 	paddb	%xmm0, %xmm0
    0000067c: 	paddb	%xmm0, %xmm1
    00000680: 	cmpq	%r15, %rax
    00000683: 	jne	.Ltmp29 # Offset: 1667
    00000685: 	movdqa	%xmm1, %xmm0
    00000689: 	psrldq	$0x8, %xmm0
    0000068e: 	paddb	%xmm0, %xmm1
    00000692: 	pxor	%xmm0, %xmm0
    00000696: 	psadbw	%xmm0, %xmm1
    0000069a: 	movd	%xmm1, %eax
    0000069e: 	testb	%al, %al
    000006a0: 	jne	.Ltmp30 # Offset: 1696
    000006a6: 	addl	$0x1, %ebx
    000006a9: 	cmpl	%edx, %ebx
    000006ab: 	jl	.Ltmp31 # Offset: 1707
.Ltmp28:
    000006ad: 	callq	clock@PLT # Offset: 1709
    000006b2: 	leaq	DATAat0x10190(%rip), %rdi
    000006b9: 	xorl	%ebx, %ebx
    000006bb: 	pxor	%xmm0, %xmm0
    000006bf: 	movq	%rax, end_time(%rip)
    000006c6: 	subq	start_time(%rip), %rax
    000006cd: 	leaq	data8unsigned(%rip), %r15
    000006d4: 	leaq	DATAat0x10f44(%rip), %rbp
    000006db: 	cvtsi2sd	%rax, %xmm0
    000006e0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000006e8: 	callq	_Z13record_resultdPKc # Offset: 1768
    000006ed: 	callq	clock@PLT # Offset: 1773
    000006f2: 	movl	iterations(%rip), %ecx
    000006f8: 	movq	init_value(%rip), %rsi
    000006ff: 	movq	%rax, start_time(%rip)
    00000706: 	testl	%ecx, %ecx
    00000708: 	jle	.Ltmp32 # Offset: 1800
    0000070a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp35:
    00000710: 	leaq	data8(%rip), %rax
    00000717: 	pxor	%xmm0, %xmm0
    0000071b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp33:
    00000720: 	paddb	(%rax), %xmm0
    00000724: 	addq	$0x10, %rax
    00000728: 	cmpq	%r15, %rax
    0000072b: 	jne	.Ltmp33 # Offset: 1835
    0000072d: 	movdqa	%xmm0, %xmm1
    00000731: 	movl	%esi, %edx
    00000733: 	psrldq	$0x8, %xmm1
    00000738: 	shll	$0x6, %edx
    0000073b: 	paddb	%xmm1, %xmm0
    0000073f: 	pxor	%xmm1, %xmm1
    00000743: 	psadbw	%xmm1, %xmm0
    00000747: 	movd	%xmm0, %eax
    0000074b: 	cmpb	%al, %dl
    0000074d: 	je	.Ltmp34 # Offset: 1869
    0000074f: 	movl	current_test(%rip), %edx
    00000755: 	movq	%rbp, %rsi
    00000758: 	movl	$0x1, %edi
    0000075d: 	xorl	%eax, %eax
    0000075f: 	addl	$0x1, %ebx
    00000762: 	callq	__printf_chk@PLT # Offset: 1890
    00000767: 	movl	iterations(%rip), %ecx
    0000076d: 	cmpl	%ecx, %ebx
    0000076f: 	jge	.Ltmp32 # Offset: 1903
    00000771: 	movq	init_value(%rip), %rsi
    00000778: 	jmp	.Ltmp35 # Offset: 1912
    0000077a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp34:
    00000780: 	addl	$0x1, %ebx
    00000783: 	cmpl	%ecx, %ebx
    00000785: 	jl	.Ltmp35 # Offset: 1925
.Ltmp32:
    00000787: 	callq	clock@PLT # Offset: 1927
    0000078c: 	leaq	DATAat0x10a51(%rip), %rdi
    00000793: 	xorl	%ebx, %ebx
    00000795: 	pxor	%xmm0, %xmm0
    00000799: 	movq	%rax, end_time(%rip)
    000007a0: 	subq	start_time(%rip), %rax
    000007a7: 	leaq	data8unsigned(%rip), %r15
    000007ae: 	leaq	DATAat0x10f44(%rip), %rbp
    000007b5: 	cvtsi2sd	%rax, %xmm0
    000007ba: 	divsd	DATAat0x10f68(%rip), %xmm0
    000007c2: 	callq	_Z13record_resultdPKc # Offset: 1986
    000007c7: 	callq	clock@PLT # Offset: 1991
    000007cc: 	movl	iterations(%rip), %ecx
    000007d2: 	movq	init_value(%rip), %rsi
    000007d9: 	movq	%rax, start_time(%rip)
    000007e0: 	testl	%ecx, %ecx
    000007e2: 	jle	.Ltmp36 # Offset: 2018
    000007e4: 	nopl	(%rax) # Size: 4
.Ltmp39:
    000007e8: 	leaq	data8(%rip), %rax
    000007ef: 	pxor	%xmm0, %xmm0
    000007f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp37:
    000007f8: 	paddb	(%rax), %xmm0
    000007fc: 	addq	$0x10, %rax
    00000800: 	cmpq	%r15, %rax
    00000803: 	jne	.Ltmp37 # Offset: 2051
    00000805: 	movdqa	%xmm0, %xmm1
    00000809: 	movl	%esi, %edx
    0000080b: 	psrldq	$0x8, %xmm1
    00000810: 	shll	$0x6, %edx
    00000813: 	paddb	%xmm1, %xmm0
    00000817: 	pxor	%xmm1, %xmm1
    0000081b: 	psadbw	%xmm1, %xmm0
    0000081f: 	movd	%xmm0, %eax
    00000823: 	cmpb	%al, %dl
    00000825: 	je	.Ltmp38 # Offset: 2085
    00000827: 	movl	current_test(%rip), %edx
    0000082d: 	movq	%rbp, %rsi
    00000830: 	movl	$0x1, %edi
    00000835: 	xorl	%eax, %eax
    00000837: 	addl	$0x1, %ebx
    0000083a: 	callq	__printf_chk@PLT # Offset: 2106
    0000083f: 	movl	iterations(%rip), %ecx
    00000845: 	cmpl	%ecx, %ebx
    00000847: 	jge	.Ltmp36 # Offset: 2119
    00000849: 	movq	init_value(%rip), %rsi
    00000850: 	jmp	.Ltmp39 # Offset: 2128
    00000852: 	nopw	(%rax,%rax) # Size: 6
.Ltmp38:
    00000858: 	addl	$0x1, %ebx
    0000085b: 	cmpl	%ecx, %ebx
    0000085d: 	jl	.Ltmp39 # Offset: 2141
.Ltmp36:
    0000085f: 	callq	clock@PLT # Offset: 2143
    00000864: 	leaq	DATAat0x10a62(%rip), %rdi
    0000086b: 	xorl	%ebx, %ebx
    0000086d: 	pxor	%xmm0, %xmm0
    00000871: 	movq	%rax, end_time(%rip)
    00000878: 	subq	start_time(%rip), %rax
    0000087f: 	leaq	data8unsigned(%rip), %r15
    00000886: 	leaq	DATAat0x10f44(%rip), %rbp
    0000088d: 	cvtsi2sd	%rax, %xmm0
    00000892: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000089a: 	callq	_Z13record_resultdPKc # Offset: 2202
    0000089f: 	callq	clock@PLT # Offset: 2207
    000008a4: 	movl	iterations(%rip), %ecx
    000008aa: 	movq	init_value(%rip), %rsi
    000008b1: 	movq	%rax, start_time(%rip)
    000008b8: 	testl	%ecx, %ecx
    000008ba: 	jle	.Ltmp40 # Offset: 2234
    000008bc: 	nopl	(%rax) # Size: 4
.Ltmp43:
    000008c0: 	leaq	data8(%rip), %rax
    000008c7: 	pxor	%xmm0, %xmm0
    000008cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp41:
    000008d0: 	paddb	(%rax), %xmm0
    000008d4: 	addq	$0x10, %rax
    000008d8: 	cmpq	%r15, %rax
    000008db: 	jne	.Ltmp41 # Offset: 2267
    000008dd: 	movdqa	%xmm0, %xmm1
    000008e1: 	movl	%esi, %edx
    000008e3: 	psrldq	$0x8, %xmm1
    000008e8: 	shll	$0x6, %edx
    000008eb: 	paddb	%xmm1, %xmm0
    000008ef: 	pxor	%xmm1, %xmm1
    000008f3: 	psadbw	%xmm1, %xmm0
    000008f7: 	movd	%xmm0, %eax
    000008fb: 	cmpb	%al, %dl
    000008fd: 	je	.Ltmp42 # Offset: 2301
    000008ff: 	movl	current_test(%rip), %edx
    00000905: 	movq	%rbp, %rsi
    00000908: 	movl	$0x1, %edi
    0000090d: 	xorl	%eax, %eax
    0000090f: 	addl	$0x1, %ebx
    00000912: 	callq	__printf_chk@PLT # Offset: 2322
    00000917: 	movl	iterations(%rip), %ecx
    0000091d: 	cmpl	%ecx, %ebx
    0000091f: 	jge	.Ltmp40 # Offset: 2335
    00000921: 	movq	init_value(%rip), %rsi
    00000928: 	jmp	.Ltmp43 # Offset: 2344
    0000092a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp42:
    00000930: 	addl	$0x1, %ebx
    00000933: 	cmpl	%ecx, %ebx
    00000935: 	jl	.Ltmp43 # Offset: 2357
.Ltmp40:
    00000937: 	callq	clock@PLT # Offset: 2359
    0000093c: 	pxor	%xmm0, %xmm0
    00000940: 	leaq	DATAat0x10a7b(%rip), %rdi
    00000947: 	leaq	data32(%rip), %rbx
    0000094e: 	movq	%rax, end_time(%rip)
    00000955: 	subq	start_time(%rip), %rax
    0000095c: 	cvtsi2sd	%rax, %xmm0
    00000961: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000969: 	callq	_Z13record_resultdPKc # Offset: 2409
    0000096e: 	movd	init_value(%rip), %xmm0
    00000976: 	leaq	-0x3e80(%rbx), %rax
    0000097d: 	punpcklwd	%xmm0, %xmm0
    00000981: 	pshufd	$0x0, %xmm0, %xmm0
    00000986: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp44:
    00000990: 	movaps	%xmm0, (%rax)
    00000993: 	addq	$0x10, %rax
    00000997: 	cmpq	%rbx, %rax
    0000099a: 	jne	.Ltmp44 # Offset: 2458
    0000099c: 	leaq	DATAat0x10a92(%rip), %rdx
    000009a3: 	movl	$0x1f40, %esi
    000009a8: 	xorl	%r12d, %r12d
    000009ab: 	leaq	data16unsigned(%rip), %rdi
    000009b2: 	leaq	DATAat0x10f44(%rip), %rbp
    000009b9: 	callq	_Z13test_constantIt20shift_right_constantItEEvPT_iPKc # Offset: 2489
    000009be: 	leaq	DATAat0x101b8(%rip), %rdx
    000009c5: 	movl	$0x1f40, %esi
    000009ca: 	leaq	data16unsigned(%rip), %rdi
    000009d1: 	callq	_Z13test_constantIt29shift_right_repeated_constantItEEvPT_iPKc # Offset: 2513
    000009d6: 	leaq	DATAat0x10ab0(%rip), %rdx
    000009dd: 	movl	$0x1f40, %esi
    000009e2: 	leaq	data16unsigned(%rip), %rdi
    000009e9: 	callq	_Z13test_constantIt19shift_left_constantItEEvPT_iPKc # Offset: 2537
    000009ee: 	movl	$0x1f40, %esi
    000009f3: 	leaq	DATAat0x101e0(%rip), %rdx
    000009fa: 	leaq	data16unsigned(%rip), %rdi
    00000a01: 	callq	_Z13test_constantIt28shift_left_repeated_constantItEEvPT_iPKc # Offset: 2561
    00000a06: 	callq	clock@PLT # Offset: 2566
    00000a0b: 	movl	iterations(%rip), %ecx
    00000a11: 	movq	init_value(%rip), %rsi
    00000a18: 	movq	%rax, start_time(%rip)
    00000a1f: 	testl	%ecx, %ecx
    00000a21: 	jle	.Ltmp45 # Offset: 2593
    00000a27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp48:
    00000a30: 	leaq	data16unsigned(%rip), %rax
    00000a37: 	pxor	%xmm0, %xmm0
    00000a3b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp46:
    00000a40: 	paddw	(%rax), %xmm0
    00000a44: 	addq	$0x10, %rax
    00000a48: 	cmpq	%rbx, %rax
    00000a4b: 	jne	.Ltmp46 # Offset: 2635
    00000a4d: 	movdqa	%xmm0, %xmm1
    00000a51: 	imulw	$0x1f40, %si, %dx
    00000a56: 	psrldq	$0x8, %xmm1
    00000a5b: 	paddw	%xmm1, %xmm0
    00000a5f: 	movdqa	%xmm0, %xmm1
    00000a63: 	psrldq	$0x4, %xmm1
    00000a68: 	paddw	%xmm1, %xmm0
    00000a6c: 	movdqa	%xmm0, %xmm1
    00000a70: 	psrldq	$0x2, %xmm1
    00000a75: 	paddw	%xmm1, %xmm0
    00000a79: 	pextrw	$0x0, %xmm0, %eax
    00000a7e: 	cmpw	%ax, %dx
    00000a81: 	je	.Ltmp47 # Offset: 2689
    00000a83: 	movl	current_test(%rip), %edx
    00000a89: 	movq	%rbp, %rsi
    00000a8c: 	movl	$0x1, %edi
    00000a91: 	xorl	%eax, %eax
    00000a93: 	addl	$0x1, %r12d
    00000a97: 	callq	__printf_chk@PLT # Offset: 2711
    00000a9c: 	movl	iterations(%rip), %ecx
    00000aa2: 	cmpl	%ecx, %r12d
    00000aa5: 	jge	.Ltmp45 # Offset: 2725
    00000aa7: 	movq	init_value(%rip), %rsi
    00000aae: 	jmp	.Ltmp48 # Offset: 2734
.Ltmp47:
    00000ab0: 	addl	$0x1, %r12d
    00000ab4: 	cmpl	%ecx, %r12d
    00000ab7: 	jl	.Ltmp48 # Offset: 2743
.Ltmp45:
    00000abd: 	callq	clock@PLT # Offset: 2749
    00000ac2: 	leaq	DATAat0x10acd(%rip), %rdi
    00000ac9: 	pxor	%xmm0, %xmm0
    00000acd: 	xorl	%r12d, %r12d
    00000ad0: 	movq	%rax, end_time(%rip)
    00000ad7: 	subq	start_time(%rip), %rax
    00000ade: 	leaq	DATAat0x10f44(%rip), %rbp
    00000ae5: 	cvtsi2sd	%rax, %xmm0
    00000aea: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000af2: 	callq	_Z13record_resultdPKc # Offset: 2802
    00000af7: 	callq	clock@PLT # Offset: 2807
    00000afc: 	movl	iterations(%rip), %ecx
    00000b02: 	movq	init_value(%rip), %rsi
    00000b09: 	movq	%rax, start_time(%rip)
    00000b10: 	testl	%ecx, %ecx
    00000b12: 	jle	.Ltmp49 # Offset: 2834
    00000b18: 	nopl	(%rax,%rax) # Size: 8
.Ltmp52:
    00000b20: 	leaq	data16unsigned(%rip), %rax
    00000b27: 	pxor	%xmm0, %xmm0
    00000b2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp50:
    00000b30: 	paddw	(%rax), %xmm0
    00000b34: 	addq	$0x10, %rax
    00000b38: 	cmpq	%rbx, %rax
    00000b3b: 	jne	.Ltmp50 # Offset: 2875
    00000b3d: 	movdqa	%xmm0, %xmm1
    00000b41: 	imulw	$0x1f40, %si, %dx
    00000b46: 	psrldq	$0x8, %xmm1
    00000b4b: 	paddw	%xmm1, %xmm0
    00000b4f: 	movdqa	%xmm0, %xmm1
    00000b53: 	psrldq	$0x4, %xmm1
    00000b58: 	paddw	%xmm1, %xmm0
    00000b5c: 	movdqa	%xmm0, %xmm1
    00000b60: 	psrldq	$0x2, %xmm1
    00000b65: 	paddw	%xmm1, %xmm0
    00000b69: 	pextrw	$0x0, %xmm0, %eax
    00000b6e: 	cmpw	%ax, %dx
    00000b71: 	je	.Ltmp51 # Offset: 2929
    00000b73: 	movl	current_test(%rip), %edx
    00000b79: 	movq	%rbp, %rsi
    00000b7c: 	movl	$0x1, %edi
    00000b81: 	xorl	%eax, %eax
    00000b83: 	addl	$0x1, %r12d
    00000b87: 	callq	__printf_chk@PLT # Offset: 2951
    00000b8c: 	movl	iterations(%rip), %ecx
    00000b92: 	cmpl	%ecx, %r12d
    00000b95: 	jge	.Ltmp49 # Offset: 2965
    00000b97: 	movq	init_value(%rip), %rsi
    00000b9e: 	jmp	.Ltmp52 # Offset: 2974
.Ltmp51:
    00000ba0: 	addl	$0x1, %r12d
    00000ba4: 	cmpl	%ecx, %r12d
    00000ba7: 	jl	.Ltmp52 # Offset: 2983
.Ltmp49:
    00000bad: 	callq	clock@PLT # Offset: 2989
    00000bb2: 	leaq	DATAat0x10adf(%rip), %rdi
    00000bb9: 	pxor	%xmm0, %xmm0
    00000bbd: 	xorl	%r12d, %r12d
    00000bc0: 	movq	%rax, end_time(%rip)
    00000bc7: 	subq	start_time(%rip), %rax
    00000bce: 	leaq	DATAat0x10f44(%rip), %rbp
    00000bd5: 	cvtsi2sd	%rax, %xmm0
    00000bda: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000be2: 	callq	_Z13record_resultdPKc # Offset: 3042
    00000be7: 	callq	clock@PLT # Offset: 3047
    00000bec: 	movl	iterations(%rip), %ecx
    00000bf2: 	movq	init_value(%rip), %rsi
    00000bf9: 	movq	%rax, start_time(%rip)
    00000c00: 	testl	%ecx, %ecx
    00000c02: 	jle	.Ltmp53 # Offset: 3074
    00000c08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp56:
    00000c10: 	leaq	data16unsigned(%rip), %rax
    00000c17: 	pxor	%xmm0, %xmm0
    00000c1b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp54:
    00000c20: 	paddw	(%rax), %xmm0
    00000c24: 	addq	$0x10, %rax
    00000c28: 	cmpq	%rbx, %rax
    00000c2b: 	jne	.Ltmp54 # Offset: 3115
    00000c2d: 	movdqa	%xmm0, %xmm1
    00000c31: 	imulw	$0x1f40, %si, %dx
    00000c36: 	psrldq	$0x8, %xmm1
    00000c3b: 	paddw	%xmm1, %xmm0
    00000c3f: 	movdqa	%xmm0, %xmm1
    00000c43: 	psrldq	$0x4, %xmm1
    00000c48: 	paddw	%xmm1, %xmm0
    00000c4c: 	movdqa	%xmm0, %xmm1
    00000c50: 	psrldq	$0x2, %xmm1
    00000c55: 	paddw	%xmm1, %xmm0
    00000c59: 	pextrw	$0x0, %xmm0, %eax
    00000c5e: 	cmpw	%ax, %dx
    00000c61: 	je	.Ltmp55 # Offset: 3169
    00000c63: 	movl	current_test(%rip), %edx
    00000c69: 	movq	%rbp, %rsi
    00000c6c: 	movl	$0x1, %edi
    00000c71: 	xorl	%eax, %eax
    00000c73: 	addl	$0x1, %r12d
    00000c77: 	callq	__printf_chk@PLT # Offset: 3191
    00000c7c: 	movl	iterations(%rip), %ecx
    00000c82: 	cmpl	%ecx, %r12d
    00000c85: 	jge	.Ltmp53 # Offset: 3205
    00000c87: 	movq	init_value(%rip), %rsi
    00000c8e: 	jmp	.Ltmp56 # Offset: 3214
.Ltmp55:
    00000c90: 	addl	$0x1, %r12d
    00000c94: 	cmpl	%ecx, %r12d
    00000c97: 	jl	.Ltmp56 # Offset: 3223
.Ltmp53:
    00000c9d: 	callq	clock@PLT # Offset: 3229
    00000ca2: 	pxor	%xmm0, %xmm0
    00000ca6: 	leaq	DATAat0x10af9(%rip), %rdi
    00000cad: 	leaq	data16unsigned(%rip), %r14
    00000cb4: 	movq	%rax, end_time(%rip)
    00000cbb: 	subq	start_time(%rip), %rax
    00000cc2: 	cvtsi2sd	%rax, %xmm0
    00000cc7: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000ccf: 	callq	_Z13record_resultdPKc # Offset: 3279
    00000cd4: 	movd	init_value(%rip), %xmm0
    00000cdc: 	leaq	-0x3e80(%r14), %rax
    00000ce3: 	punpcklwd	%xmm0, %xmm0
    00000ce7: 	pshufd	$0x0, %xmm0, %xmm0
    00000cec: 	nopl	(%rax) # Size: 4
.Ltmp57:
    00000cf0: 	movaps	%xmm0, (%rax)
    00000cf3: 	addq	$0x10, %rax
    00000cf7: 	cmpq	%rax, %r14
    00000cfa: 	jne	.Ltmp57 # Offset: 3322
    00000cfc: 	leaq	DATAat0x10a93(%rip), %rdx
    00000d03: 	movl	$0x1f40, %esi
    00000d08: 	xorl	%r12d, %r12d
    00000d0b: 	leaq	data16(%rip), %rdi
    00000d12: 	leaq	DATAat0x10f44(%rip), %rbp
    00000d19: 	callq	_Z13test_constantIs20shift_right_constantIsEEvPT_iPKc # Offset: 3353
    00000d1e: 	leaq	DATAat0x10208(%rip), %rdx
    00000d25: 	movl	$0x1f40, %esi
    00000d2a: 	leaq	data16(%rip), %rdi
    00000d31: 	callq	_Z13test_constantIs29shift_right_repeated_constantIsEEvPT_iPKc # Offset: 3377
    00000d36: 	leaq	DATAat0x10ab1(%rip), %rdx
    00000d3d: 	movl	$0x1f40, %esi
    00000d42: 	leaq	data16(%rip), %rdi
    00000d49: 	callq	_Z13test_constantIs19shift_left_constantIsEEvPT_iPKc # Offset: 3401
    00000d4e: 	movl	$0x1f40, %esi
    00000d53: 	leaq	DATAat0x10230(%rip), %rdx
    00000d5a: 	leaq	data16(%rip), %rdi
    00000d61: 	callq	_Z13test_constantIs28shift_left_repeated_constantIsEEvPT_iPKc # Offset: 3425
    00000d66: 	callq	clock@PLT # Offset: 3430
    00000d6b: 	movl	iterations(%rip), %ecx
    00000d71: 	movq	init_value(%rip), %rsi
    00000d78: 	movq	%rax, start_time(%rip)
    00000d7f: 	testl	%ecx, %ecx
    00000d81: 	jle	.Ltmp58 # Offset: 3457
    00000d87: 	nopw	(%rax,%rax) # Size: 9
.Ltmp61:
    00000d90: 	leaq	data16(%rip), %rax
    00000d97: 	pxor	%xmm0, %xmm0
    00000d9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp59:
    00000da0: 	paddw	(%rax), %xmm0
    00000da4: 	addq	$0x10, %rax
    00000da8: 	cmpq	%rax, %r14
    00000dab: 	jne	.Ltmp59 # Offset: 3499
    00000dad: 	movdqa	%xmm0, %xmm1
    00000db1: 	imulw	$0x1f40, %si, %dx
    00000db6: 	psrldq	$0x8, %xmm1
    00000dbb: 	paddw	%xmm1, %xmm0
    00000dbf: 	movdqa	%xmm0, %xmm1
    00000dc3: 	psrldq	$0x4, %xmm1
    00000dc8: 	paddw	%xmm1, %xmm0
    00000dcc: 	movdqa	%xmm0, %xmm1
    00000dd0: 	psrldq	$0x2, %xmm1
    00000dd5: 	paddw	%xmm1, %xmm0
    00000dd9: 	pextrw	$0x0, %xmm0, %eax
    00000dde: 	cmpw	%ax, %dx
    00000de1: 	je	.Ltmp60 # Offset: 3553
    00000de3: 	movl	current_test(%rip), %edx
    00000de9: 	movq	%rbp, %rsi
    00000dec: 	movl	$0x1, %edi
    00000df1: 	xorl	%eax, %eax
    00000df3: 	addl	$0x1, %r12d
    00000df7: 	callq	__printf_chk@PLT # Offset: 3575
    00000dfc: 	movl	iterations(%rip), %ecx
    00000e02: 	cmpl	%ecx, %r12d
    00000e05: 	jge	.Ltmp58 # Offset: 3589
    00000e07: 	movq	init_value(%rip), %rsi
    00000e0e: 	jmp	.Ltmp61 # Offset: 3598
.Ltmp60:
    00000e10: 	addl	$0x1, %r12d
    00000e14: 	cmpl	%ecx, %r12d
    00000e17: 	jl	.Ltmp61 # Offset: 3607
.Ltmp58:
    00000e1d: 	callq	clock@PLT # Offset: 3613
    00000e22: 	leaq	DATAat0x10ace(%rip), %rdi
    00000e29: 	pxor	%xmm0, %xmm0
    00000e2d: 	xorl	%r12d, %r12d
    00000e30: 	movq	%rax, end_time(%rip)
    00000e37: 	subq	start_time(%rip), %rax
    00000e3e: 	leaq	DATAat0x10f44(%rip), %rbp
    00000e45: 	cvtsi2sd	%rax, %xmm0
    00000e4a: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000e52: 	callq	_Z13record_resultdPKc # Offset: 3666
    00000e57: 	callq	clock@PLT # Offset: 3671
    00000e5c: 	movl	iterations(%rip), %ecx
    00000e62: 	movq	init_value(%rip), %rsi
    00000e69: 	movq	%rax, start_time(%rip)
    00000e70: 	testl	%ecx, %ecx
    00000e72: 	jle	.Ltmp62 # Offset: 3698
    00000e78: 	nopl	(%rax,%rax) # Size: 8
.Ltmp65:
    00000e80: 	leaq	data16(%rip), %rax
    00000e87: 	pxor	%xmm0, %xmm0
    00000e8b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp63:
    00000e90: 	paddw	(%rax), %xmm0
    00000e94: 	addq	$0x10, %rax
    00000e98: 	cmpq	%rax, %r14
    00000e9b: 	jne	.Ltmp63 # Offset: 3739
    00000e9d: 	movdqa	%xmm0, %xmm1
    00000ea1: 	imulw	$0x1f40, %si, %dx
    00000ea6: 	psrldq	$0x8, %xmm1
    00000eab: 	paddw	%xmm1, %xmm0
    00000eaf: 	movdqa	%xmm0, %xmm1
    00000eb3: 	psrldq	$0x4, %xmm1
    00000eb8: 	paddw	%xmm1, %xmm0
    00000ebc: 	movdqa	%xmm0, %xmm1
    00000ec0: 	psrldq	$0x2, %xmm1
    00000ec5: 	paddw	%xmm1, %xmm0
    00000ec9: 	pextrw	$0x0, %xmm0, %eax
    00000ece: 	cmpw	%ax, %dx
    00000ed1: 	je	.Ltmp64 # Offset: 3793
    00000ed3: 	movl	current_test(%rip), %edx
    00000ed9: 	movq	%rbp, %rsi
    00000edc: 	movl	$0x1, %edi
    00000ee1: 	xorl	%eax, %eax
    00000ee3: 	addl	$0x1, %r12d
    00000ee7: 	callq	__printf_chk@PLT # Offset: 3815
    00000eec: 	movl	iterations(%rip), %ecx
    00000ef2: 	cmpl	%ecx, %r12d
    00000ef5: 	jge	.Ltmp62 # Offset: 3829
    00000ef7: 	movq	init_value(%rip), %rsi
    00000efe: 	jmp	.Ltmp65 # Offset: 3838
.Ltmp64:
    00000f00: 	addl	$0x1, %r12d
    00000f04: 	cmpl	%ecx, %r12d
    00000f07: 	jl	.Ltmp65 # Offset: 3847
.Ltmp62:
    00000f0d: 	callq	clock@PLT # Offset: 3853
    00000f12: 	leaq	DATAat0x10ae0(%rip), %rdi
    00000f19: 	pxor	%xmm0, %xmm0
    00000f1d: 	xorl	%r12d, %r12d
    00000f20: 	movq	%rax, end_time(%rip)
    00000f27: 	subq	start_time(%rip), %rax
    00000f2e: 	leaq	DATAat0x10f44(%rip), %rbp
    00000f35: 	cvtsi2sd	%rax, %xmm0
    00000f3a: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000f42: 	callq	_Z13record_resultdPKc # Offset: 3906
    00000f47: 	callq	clock@PLT # Offset: 3911
    00000f4c: 	movl	iterations(%rip), %ecx
    00000f52: 	movq	init_value(%rip), %rsi
    00000f59: 	movq	%rax, start_time(%rip)
    00000f60: 	testl	%ecx, %ecx
    00000f62: 	jle	.Ltmp66 # Offset: 3938
    00000f68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp69:
    00000f70: 	leaq	data16(%rip), %rax
    00000f77: 	pxor	%xmm0, %xmm0
    00000f7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp67:
    00000f80: 	paddw	(%rax), %xmm0
    00000f84: 	addq	$0x10, %rax
    00000f88: 	cmpq	%rax, %r14
    00000f8b: 	jne	.Ltmp67 # Offset: 3979
    00000f8d: 	movdqa	%xmm0, %xmm1
    00000f91: 	imulw	$0x1f40, %si, %dx
    00000f96: 	psrldq	$0x8, %xmm1
    00000f9b: 	paddw	%xmm1, %xmm0
    00000f9f: 	movdqa	%xmm0, %xmm1
    00000fa3: 	psrldq	$0x4, %xmm1
    00000fa8: 	paddw	%xmm1, %xmm0
    00000fac: 	movdqa	%xmm0, %xmm1
    00000fb0: 	psrldq	$0x2, %xmm1
    00000fb5: 	paddw	%xmm1, %xmm0
    00000fb9: 	pextrw	$0x0, %xmm0, %eax
    00000fbe: 	cmpw	%ax, %dx
    00000fc1: 	je	.Ltmp68 # Offset: 4033
    00000fc3: 	movl	current_test(%rip), %edx
    00000fc9: 	movq	%rbp, %rsi
    00000fcc: 	movl	$0x1, %edi
    00000fd1: 	xorl	%eax, %eax
    00000fd3: 	addl	$0x1, %r12d
    00000fd7: 	callq	__printf_chk@PLT # Offset: 4055
    00000fdc: 	movl	iterations(%rip), %ecx
    00000fe2: 	cmpl	%ecx, %r12d
    00000fe5: 	jge	.Ltmp66 # Offset: 4069
    00000fe7: 	movq	init_value(%rip), %rsi
    00000fee: 	jmp	.Ltmp69 # Offset: 4078
.Ltmp68:
    00000ff0: 	addl	$0x1, %r12d
    00000ff4: 	cmpl	%ecx, %r12d
    00000ff7: 	jl	.Ltmp69 # Offset: 4087
.Ltmp66:
    00000ffd: 	callq	clock@PLT # Offset: 4093
    00001002: 	pxor	%xmm0, %xmm0
    00001006: 	leaq	DATAat0x10afa(%rip), %rdi
    0000100d: 	leaq	data64(%rip), %r12
    00001014: 	movq	%rax, end_time(%rip)
    0000101b: 	subq	start_time(%rip), %rax
    00001022: 	cvtsi2sd	%rax, %xmm0
    00001027: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000102f: 	callq	_Z13record_resultdPKc # Offset: 4143
    00001034: 	movd	init_value(%rip), %xmm7
    0000103c: 	leaq	-0x7d00(%r12), %rax
    00001044: 	pshufd	$0x0, %xmm7, %xmm0
    00001049: 	nopl	(%rax) # Size: 7
.Ltmp70:
    00001050: 	movaps	%xmm0, (%rax)
    00001053: 	addq	$0x10, %rax
    00001057: 	cmpq	%r12, %rax
    0000105a: 	jne	.Ltmp70 # Offset: 4186
    0000105c: 	leaq	DATAat0x10b12(%rip), %rdx
    00001063: 	movl	$0x1f40, %esi
    00001068: 	xorl	%r13d, %r13d
    0000106b: 	leaq	data32unsigned(%rip), %rdi
    00001072: 	leaq	DATAat0x10f44(%rip), %rbp
    00001079: 	callq	_Z13test_constantIj20shift_right_constantIjEEvPT_iPKc # Offset: 4217
    0000107e: 	leaq	DATAat0x10258(%rip), %rdx
    00001085: 	movl	$0x1f40, %esi
    0000108a: 	leaq	data32unsigned(%rip), %rdi
    00001091: 	callq	_Z13test_constantIj29shift_right_repeated_constantIjEEvPT_iPKc # Offset: 4241
    00001096: 	leaq	DATAat0x10b30(%rip), %rdx
    0000109d: 	movl	$0x1f40, %esi
    000010a2: 	leaq	data32unsigned(%rip), %rdi
    000010a9: 	callq	_Z13test_constantIj19shift_left_constantIjEEvPT_iPKc # Offset: 4265
    000010ae: 	movl	$0x1f40, %esi
    000010b3: 	leaq	DATAat0x10280(%rip), %rdx
    000010ba: 	leaq	data32unsigned(%rip), %rdi
    000010c1: 	callq	_Z13test_constantIj28shift_left_repeated_constantIjEEvPT_iPKc # Offset: 4289
    000010c6: 	callq	clock@PLT # Offset: 4294
    000010cb: 	movl	iterations(%rip), %ecx
    000010d1: 	movq	init_value(%rip), %rsi
    000010d8: 	movq	%rax, start_time(%rip)
    000010df: 	testl	%ecx, %ecx
    000010e1: 	jle	.Ltmp71 # Offset: 4321
    000010e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp74:
    000010f0: 	leaq	data32unsigned(%rip), %rax
    000010f7: 	pxor	%xmm0, %xmm0
    000010fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp72:
    00001100: 	paddd	(%rax), %xmm0
    00001104: 	addq	$0x10, %rax
    00001108: 	cmpq	%r12, %rax
    0000110b: 	jne	.Ltmp72 # Offset: 4363
    0000110d: 	movdqa	%xmm0, %xmm1
    00001111: 	imull	$0x1f40, %esi, %edx
    00001117: 	psrldq	$0x8, %xmm1
    0000111c: 	paddd	%xmm1, %xmm0
    00001120: 	movdqa	%xmm0, %xmm1
    00001124: 	psrldq	$0x4, %xmm1
    00001129: 	paddd	%xmm1, %xmm0
    0000112d: 	movd	%xmm0, %eax
    00001131: 	cmpl	%eax, %edx
    00001133: 	je	.Ltmp73 # Offset: 4403
    00001135: 	movl	current_test(%rip), %edx
    0000113b: 	movq	%rbp, %rsi
    0000113e: 	movl	$0x1, %edi
    00001143: 	xorl	%eax, %eax
    00001145: 	addl	$0x1, %r13d
    00001149: 	callq	__printf_chk@PLT # Offset: 4425
    0000114e: 	movl	iterations(%rip), %ecx
    00001154: 	cmpl	%ecx, %r13d
    00001157: 	jge	.Ltmp71 # Offset: 4439
    00001159: 	movq	init_value(%rip), %rsi
    00001160: 	jmp	.Ltmp74 # Offset: 4448
    00001162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp73:
    00001168: 	addl	$0x1, %r13d
    0000116c: 	cmpl	%ecx, %r13d
    0000116f: 	jl	.Ltmp74 # Offset: 4463
.Ltmp71:
    00001175: 	callq	clock@PLT # Offset: 4469
    0000117a: 	leaq	DATAat0x10b4d(%rip), %rdi
    00001181: 	pxor	%xmm0, %xmm0
    00001185: 	xorl	%r13d, %r13d
    00001188: 	movq	%rax, end_time(%rip)
    0000118f: 	subq	start_time(%rip), %rax
    00001196: 	leaq	DATAat0x10f44(%rip), %rbp
    0000119d: 	cvtsi2sd	%rax, %xmm0
    000011a2: 	divsd	DATAat0x10f68(%rip), %xmm0
    000011aa: 	callq	_Z13record_resultdPKc # Offset: 4522
    000011af: 	callq	clock@PLT # Offset: 4527
    000011b4: 	movl	iterations(%rip), %ecx
    000011ba: 	movq	init_value(%rip), %rsi
    000011c1: 	movq	%rax, start_time(%rip)
    000011c8: 	testl	%ecx, %ecx
    000011ca: 	jle	.Ltmp75 # Offset: 4554
.Ltmp78:
    000011d0: 	leaq	data32unsigned(%rip), %rax
    000011d7: 	pxor	%xmm0, %xmm0
    000011db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp76:
    000011e0: 	paddd	(%rax), %xmm0
    000011e4: 	addq	$0x10, %rax
    000011e8: 	cmpq	%r12, %rax
    000011eb: 	jne	.Ltmp76 # Offset: 4587
    000011ed: 	movdqa	%xmm0, %xmm1
    000011f1: 	imull	$0x1f40, %esi, %edx
    000011f7: 	psrldq	$0x8, %xmm1
    000011fc: 	paddd	%xmm1, %xmm0
    00001200: 	movdqa	%xmm0, %xmm1
    00001204: 	psrldq	$0x4, %xmm1
    00001209: 	paddd	%xmm1, %xmm0
    0000120d: 	movd	%xmm0, %eax
    00001211: 	cmpl	%eax, %edx
    00001213: 	je	.Ltmp77 # Offset: 4627
    00001215: 	movl	current_test(%rip), %edx
    0000121b: 	movq	%rbp, %rsi
    0000121e: 	movl	$0x1, %edi
    00001223: 	xorl	%eax, %eax
    00001225: 	addl	$0x1, %r13d
    00001229: 	callq	__printf_chk@PLT # Offset: 4649
    0000122e: 	movl	iterations(%rip), %ecx
    00001234: 	cmpl	%ecx, %r13d
    00001237: 	jge	.Ltmp75 # Offset: 4663
    00001239: 	movq	init_value(%rip), %rsi
    00001240: 	jmp	.Ltmp78 # Offset: 4672
    00001242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp77:
    00001248: 	addl	$0x1, %r13d
    0000124c: 	cmpl	%ecx, %r13d
    0000124f: 	jl	.Ltmp78 # Offset: 4687
.Ltmp75:
    00001255: 	callq	clock@PLT # Offset: 4693
    0000125a: 	leaq	DATAat0x10b5f(%rip), %rdi
    00001261: 	pxor	%xmm0, %xmm0
    00001265: 	xorl	%r13d, %r13d
    00001268: 	movq	%rax, end_time(%rip)
    0000126f: 	subq	start_time(%rip), %rax
    00001276: 	leaq	DATAat0x10f44(%rip), %rbp
    0000127d: 	cvtsi2sd	%rax, %xmm0
    00001282: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000128a: 	callq	_Z13record_resultdPKc # Offset: 4746
    0000128f: 	callq	clock@PLT # Offset: 4751
    00001294: 	movl	iterations(%rip), %ecx
    0000129a: 	movq	init_value(%rip), %rsi
    000012a1: 	movq	%rax, start_time(%rip)
    000012a8: 	testl	%ecx, %ecx
    000012aa: 	jle	.Ltmp79 # Offset: 4778
.Ltmp82:
    000012b0: 	leaq	data32unsigned(%rip), %rax
    000012b7: 	pxor	%xmm0, %xmm0
    000012bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp80:
    000012c0: 	paddd	(%rax), %xmm0
    000012c4: 	addq	$0x10, %rax
    000012c8: 	cmpq	%r12, %rax
    000012cb: 	jne	.Ltmp80 # Offset: 4811
    000012cd: 	movdqa	%xmm0, %xmm1
    000012d1: 	imull	$0x1f40, %esi, %edx
    000012d7: 	psrldq	$0x8, %xmm1
    000012dc: 	paddd	%xmm1, %xmm0
    000012e0: 	movdqa	%xmm0, %xmm1
    000012e4: 	psrldq	$0x4, %xmm1
    000012e9: 	paddd	%xmm1, %xmm0
    000012ed: 	movd	%xmm0, %eax
    000012f1: 	cmpl	%eax, %edx
    000012f3: 	je	.Ltmp81 # Offset: 4851
    000012f5: 	movl	current_test(%rip), %edx
    000012fb: 	movq	%rbp, %rsi
    000012fe: 	movl	$0x1, %edi
    00001303: 	xorl	%eax, %eax
    00001305: 	addl	$0x1, %r13d
    00001309: 	callq	__printf_chk@PLT # Offset: 4873
    0000130e: 	movl	iterations(%rip), %ecx
    00001314: 	cmpl	%ecx, %r13d
    00001317: 	jge	.Ltmp79 # Offset: 4887
    00001319: 	movq	init_value(%rip), %rsi
    00001320: 	jmp	.Ltmp82 # Offset: 4896
    00001322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp81:
    00001328: 	addl	$0x1, %r13d
    0000132c: 	cmpl	%ecx, %r13d
    0000132f: 	jl	.Ltmp82 # Offset: 4911
.Ltmp79:
    00001335: 	callq	clock@PLT # Offset: 4917
    0000133a: 	pxor	%xmm0, %xmm0
    0000133e: 	leaq	DATAat0x10b79(%rip), %rdi
    00001345: 	movq	%rax, end_time(%rip)
    0000134c: 	subq	start_time(%rip), %rax
    00001353: 	cvtsi2sd	%rax, %xmm0
    00001358: 	divsd	DATAat0x10f68(%rip), %xmm0
    00001360: 	callq	_Z13record_resultdPKc # Offset: 4960
    00001365: 	movd	init_value(%rip), %xmm7
    0000136d: 	leaq	data32(%rip), %rax
    00001374: 	pshufd	$0x0, %xmm7, %xmm0
    00001379: 	nopl	(%rax) # Size: 7
.Ltmp83:
    00001380: 	movaps	%xmm0, (%rax)
    00001383: 	leaq	data32unsigned(%rip), %rdi
    0000138a: 	addq	$0x10, %rax
    0000138e: 	cmpq	%rdi, %rax
    00001391: 	jne	.Ltmp83 # Offset: 5009
    00001393: 	leaq	DATAat0x10b13(%rip), %rdx
    0000139a: 	movl	$0x1f40, %esi
    0000139f: 	xorl	%r13d, %r13d
    000013a2: 	subq	$0x7d00, %rdi
    000013a9: 	callq	_Z13test_constantIi20shift_right_constantIiEEvPT_iPKc # Offset: 5033
    000013ae: 	leaq	DATAat0x102a8(%rip), %rdx
    000013b5: 	movl	$0x1f40, %esi
    000013ba: 	leaq	data32(%rip), %rdi
    000013c1: 	callq	_Z13test_constantIi29shift_right_repeated_constantIiEEvPT_iPKc # Offset: 5057
    000013c6: 	leaq	DATAat0x10b31(%rip), %rdx
    000013cd: 	movl	$0x1f40, %esi
    000013d2: 	leaq	data32(%rip), %rdi
    000013d9: 	callq	_Z13test_constantIi19shift_left_constantIiEEvPT_iPKc # Offset: 5081
    000013de: 	movl	$0x1f40, %esi
    000013e3: 	leaq	DATAat0x102d0(%rip), %rdx
    000013ea: 	leaq	data32(%rip), %rdi
    000013f1: 	callq	_Z13test_constantIi28shift_left_repeated_constantIiEEvPT_iPKc # Offset: 5105
    000013f6: 	leaq	DATAat0x10f44(%rip), %rbp
    000013fd: 	callq	clock@PLT # Offset: 5117
    00001402: 	movl	iterations(%rip), %ecx
    00001408: 	movq	init_value(%rip), %rsi
    0000140f: 	movq	%rax, start_time(%rip)
    00001416: 	testl	%ecx, %ecx
    00001418: 	jle	.Ltmp84 # Offset: 5144
    0000141e: 	nop # Size: 2
.Ltmp87:
    00001420: 	leaq	data32(%rip), %rax
    00001427: 	pxor	%xmm0, %xmm0
    0000142b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp85:
    00001430: 	paddd	(%rax), %xmm0
    00001434: 	leaq	data32unsigned(%rip), %rdi
    0000143b: 	addq	$0x10, %rax
    0000143f: 	cmpq	%rax, %rdi
    00001442: 	jne	.Ltmp85 # Offset: 5186
    00001444: 	movdqa	%xmm0, %xmm1
    00001448: 	imull	$0x1f40, %esi, %edx
    0000144e: 	psrldq	$0x8, %xmm1
    00001453: 	paddd	%xmm1, %xmm0
    00001457: 	movdqa	%xmm0, %xmm1
    0000145b: 	psrldq	$0x4, %xmm1
    00001460: 	paddd	%xmm1, %xmm0
    00001464: 	movd	%xmm0, %eax
    00001468: 	cmpl	%eax, %edx
    0000146a: 	je	.Ltmp86 # Offset: 5226
    0000146c: 	movl	current_test(%rip), %edx
    00001472: 	movq	%rbp, %rsi
    00001475: 	movl	$0x1, %edi
    0000147a: 	xorl	%eax, %eax
    0000147c: 	addl	$0x1, %r13d
    00001480: 	callq	__printf_chk@PLT # Offset: 5248
    00001485: 	movl	iterations(%rip), %ecx
    0000148b: 	cmpl	%ecx, %r13d
    0000148e: 	jge	.Ltmp84 # Offset: 5262
    00001490: 	movq	init_value(%rip), %rsi
    00001497: 	jmp	.Ltmp87 # Offset: 5271
    00001499: 	nopl	(%rax) # Size: 7
.Ltmp86:
    000014a0: 	addl	$0x1, %r13d
    000014a4: 	cmpl	%ecx, %r13d
    000014a7: 	jl	.Ltmp87 # Offset: 5287
.Ltmp84:
    000014ad: 	callq	clock@PLT # Offset: 5293
    000014b2: 	leaq	DATAat0x10b4e(%rip), %rdi
    000014b9: 	pxor	%xmm0, %xmm0
    000014bd: 	xorl	%r13d, %r13d
    000014c0: 	movq	%rax, end_time(%rip)
    000014c7: 	subq	start_time(%rip), %rax
    000014ce: 	leaq	DATAat0x10f44(%rip), %rbp
    000014d5: 	cvtsi2sd	%rax, %xmm0
    000014da: 	divsd	DATAat0x10f68(%rip), %xmm0
    000014e2: 	callq	_Z13record_resultdPKc # Offset: 5346
    000014e7: 	callq	clock@PLT # Offset: 5351
    000014ec: 	movl	iterations(%rip), %ecx
    000014f2: 	movq	init_value(%rip), %rsi
    000014f9: 	movq	%rax, start_time(%rip)
    00001500: 	testl	%ecx, %ecx
    00001502: 	jle	.Ltmp88 # Offset: 5378
    00001508: 	nopl	(%rax,%rax) # Size: 8
.Ltmp91:
    00001510: 	leaq	data32(%rip), %rax
    00001517: 	pxor	%xmm0, %xmm0
    0000151b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp89:
    00001520: 	paddd	(%rax), %xmm0
    00001524: 	leaq	data32unsigned(%rip), %rdi
    0000152b: 	addq	$0x10, %rax
    0000152f: 	cmpq	%rdi, %rax
    00001532: 	jne	.Ltmp89 # Offset: 5426
    00001534: 	movdqa	%xmm0, %xmm1
    00001538: 	imull	$0x1f40, %esi, %edx
    0000153e: 	psrldq	$0x8, %xmm1
    00001543: 	paddd	%xmm1, %xmm0
    00001547: 	movdqa	%xmm0, %xmm1
    0000154b: 	psrldq	$0x4, %xmm1
    00001550: 	paddd	%xmm1, %xmm0
    00001554: 	movd	%xmm0, %eax
    00001558: 	cmpl	%eax, %edx
    0000155a: 	je	.Ltmp90 # Offset: 5466
    0000155c: 	movl	current_test(%rip), %edx
    00001562: 	movq	%rbp, %rsi
    00001565: 	movl	$0x1, %edi
    0000156a: 	xorl	%eax, %eax
    0000156c: 	addl	$0x1, %r13d
    00001570: 	callq	__printf_chk@PLT # Offset: 5488
    00001575: 	movl	iterations(%rip), %ecx
    0000157b: 	cmpl	%ecx, %r13d
    0000157e: 	jge	.Ltmp88 # Offset: 5502
    00001580: 	movq	init_value(%rip), %rsi
    00001587: 	jmp	.Ltmp91 # Offset: 5511
    00001589: 	nopl	(%rax) # Size: 7
.Ltmp90:
    00001590: 	addl	$0x1, %r13d
    00001594: 	cmpl	%ecx, %r13d
    00001597: 	jl	.Ltmp91 # Offset: 5527
.Ltmp88:
    0000159d: 	callq	clock@PLT # Offset: 5533
    000015a2: 	leaq	DATAat0x10b60(%rip), %rdi
    000015a9: 	pxor	%xmm0, %xmm0
    000015ad: 	xorl	%r13d, %r13d
    000015b0: 	movq	%rax, end_time(%rip)
    000015b7: 	subq	start_time(%rip), %rax
    000015be: 	leaq	DATAat0x10f44(%rip), %rbp
    000015c5: 	cvtsi2sd	%rax, %xmm0
    000015ca: 	divsd	DATAat0x10f68(%rip), %xmm0
    000015d2: 	callq	_Z13record_resultdPKc # Offset: 5586
    000015d7: 	callq	clock@PLT # Offset: 5591
    000015dc: 	movl	iterations(%rip), %ecx
    000015e2: 	movq	init_value(%rip), %rsi
    000015e9: 	movq	%rax, start_time(%rip)
    000015f0: 	testl	%ecx, %ecx
    000015f2: 	jle	.Ltmp92 # Offset: 5618
    000015f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp95:
    00001600: 	leaq	data32(%rip), %rax
    00001607: 	pxor	%xmm0, %xmm0
    0000160b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp93:
    00001610: 	paddd	(%rax), %xmm0
    00001614: 	leaq	data32unsigned(%rip), %rdi
    0000161b: 	addq	$0x10, %rax
    0000161f: 	cmpq	%rax, %rdi
    00001622: 	jne	.Ltmp93 # Offset: 5666
    00001624: 	movdqa	%xmm0, %xmm1
    00001628: 	imull	$0x1f40, %esi, %edx
    0000162e: 	psrldq	$0x8, %xmm1
    00001633: 	paddd	%xmm1, %xmm0
    00001637: 	movdqa	%xmm0, %xmm1
    0000163b: 	psrldq	$0x4, %xmm1
    00001640: 	paddd	%xmm1, %xmm0
    00001644: 	movd	%xmm0, %eax
    00001648: 	cmpl	%eax, %edx
    0000164a: 	je	.Ltmp94 # Offset: 5706
    0000164c: 	movl	current_test(%rip), %edx
    00001652: 	movq	%rbp, %rsi
    00001655: 	movl	$0x1, %edi
    0000165a: 	xorl	%eax, %eax
    0000165c: 	addl	$0x1, %r13d
    00001660: 	callq	__printf_chk@PLT # Offset: 5728
    00001665: 	movl	iterations(%rip), %ecx
    0000166b: 	cmpl	%ecx, %r13d
    0000166e: 	jge	.Ltmp92 # Offset: 5742
    00001670: 	movq	init_value(%rip), %rsi
    00001677: 	jmp	.Ltmp95 # Offset: 5751
    00001679: 	nopl	(%rax) # Size: 7
.Ltmp94:
    00001680: 	addl	$0x1, %r13d
    00001684: 	cmpl	%ecx, %r13d
    00001687: 	jl	.Ltmp95 # Offset: 5767
.Ltmp92:
    0000168d: 	callq	clock@PLT # Offset: 5773
    00001692: 	pxor	%xmm0, %xmm0
    00001696: 	leaq	DATAat0x10b7a(%rip), %rdi
    0000169d: 	leaq	end_time(%rip), %rbp
    000016a4: 	movq	%rax, end_time(%rip)
    000016ab: 	subq	start_time(%rip), %rax
    000016b2: 	cvtsi2sd	%rax, %xmm0
    000016b7: 	divsd	DATAat0x10f68(%rip), %xmm0
    000016bf: 	callq	_Z13record_resultdPKc # Offset: 5823
    000016c4: 	leaq	-0xfa00(%rbp), %rax
    000016cb: 	movq	init_value(%rip), %xmm0
    000016d3: 	punpcklqdq	%xmm0, %xmm0
    000016d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp96:
    000016e0: 	movaps	%xmm0, (%rax)
    000016e3: 	addq	$0x10, %rax
    000016e7: 	cmpq	%rbp, %rax
    000016ea: 	jne	.Ltmp96 # Offset: 5866
    000016ec: 	leaq	DATAat0x10b92(%rip), %rdx
    000016f3: 	movl	$0x1f40, %esi
    000016f8: 	xorl	%r15d, %r15d
    000016fb: 	leaq	data64unsigned(%rip), %rdi
    00001702: 	leaq	DATAat0x10f44(%rip), %r13
    00001709: 	callq	_Z13test_constantIm20shift_right_constantImEEvPT_iPKc # Offset: 5897
    0000170e: 	leaq	DATAat0x102f8(%rip), %rdx
    00001715: 	movl	$0x1f40, %esi
    0000171a: 	leaq	data64unsigned(%rip), %rdi
    00001721: 	callq	_Z13test_constantIm29shift_right_repeated_constantImEEvPT_iPKc # Offset: 5921
    00001726: 	leaq	DATAat0x10bb0(%rip), %rdx
    0000172d: 	movl	$0x1f40, %esi
    00001732: 	leaq	data64unsigned(%rip), %rdi
    00001739: 	callq	_Z13test_constantIm19shift_left_constantImEEvPT_iPKc # Offset: 5945
    0000173e: 	movl	$0x1f40, %esi
    00001743: 	leaq	DATAat0x10320(%rip), %rdx
    0000174a: 	leaq	data64unsigned(%rip), %rdi
    00001751: 	callq	_Z13test_constantIm28shift_left_repeated_constantImEEvPT_iPKc # Offset: 5969
    00001756: 	callq	clock@PLT # Offset: 5974
    0000175b: 	movl	iterations(%rip), %ecx
    00001761: 	movq	init_value(%rip), %rsi
    00001768: 	movq	%rax, start_time(%rip)
    0000176f: 	testl	%ecx, %ecx
    00001771: 	jle	.Ltmp97 # Offset: 6001
    00001773: 	nopl	(%rax,%rax) # Size: 5
.Ltmp100:
    00001778: 	leaq	data64unsigned(%rip), %rax
    0000177f: 	pxor	%xmm0, %xmm0
    00001783: 	nopl	(%rax,%rax) # Size: 5
.Ltmp98:
    00001788: 	paddq	(%rax), %xmm0
    0000178c: 	addq	$0x10, %rax
    00001790: 	cmpq	%rbp, %rax
    00001793: 	jne	.Ltmp98 # Offset: 6035
    00001795: 	movdqa	%xmm0, %xmm1
    00001799: 	imulq	$0x1f40, %rsi, %rdx
    000017a0: 	psrldq	$0x8, %xmm1
    000017a5: 	paddq	%xmm1, %xmm0
    000017a9: 	movq	%xmm0, %rax
    000017ae: 	cmpq	%rax, %rdx
    000017b1: 	je	.Ltmp99 # Offset: 6065
    000017b3: 	movl	current_test(%rip), %edx
    000017b9: 	movq	%r13, %rsi
    000017bc: 	movl	$0x1, %edi
    000017c1: 	xorl	%eax, %eax
    000017c3: 	addl	$0x1, %r15d
    000017c7: 	callq	__printf_chk@PLT # Offset: 6087
    000017cc: 	movl	iterations(%rip), %ecx
    000017d2: 	cmpl	%ecx, %r15d
    000017d5: 	jge	.Ltmp97 # Offset: 6101
    000017d7: 	movq	init_value(%rip), %rsi
    000017de: 	jmp	.Ltmp100 # Offset: 6110
.Ltmp99:
    000017e0: 	addl	$0x1, %r15d
    000017e4: 	cmpl	%ecx, %r15d
    000017e7: 	jl	.Ltmp100 # Offset: 6119
.Ltmp97:
    000017e9: 	callq	clock@PLT # Offset: 6121
    000017ee: 	leaq	DATAat0x10bcd(%rip), %rdi
    000017f5: 	pxor	%xmm0, %xmm0
    000017f9: 	xorl	%r15d, %r15d
    000017fc: 	movq	%rax, end_time(%rip)
    00001803: 	subq	start_time(%rip), %rax
    0000180a: 	leaq	DATAat0x10f44(%rip), %r13
    00001811: 	cvtsi2sd	%rax, %xmm0
    00001816: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000181e: 	callq	_Z13record_resultdPKc # Offset: 6174
    00001823: 	callq	clock@PLT # Offset: 6179
    00001828: 	movl	iterations(%rip), %ecx
    0000182e: 	movq	init_value(%rip), %rsi
    00001835: 	movq	%rax, start_time(%rip)
    0000183c: 	testl	%ecx, %ecx
    0000183e: 	jle	.Ltmp101 # Offset: 6206
.Ltmp104:
    00001840: 	leaq	data64unsigned(%rip), %rax
    00001847: 	pxor	%xmm0, %xmm0
    0000184b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp102:
    00001850: 	paddq	(%rax), %xmm0
    00001854: 	addq	$0x10, %rax
    00001858: 	cmpq	%rbp, %rax
    0000185b: 	jne	.Ltmp102 # Offset: 6235
    0000185d: 	movdqa	%xmm0, %xmm1
    00001861: 	imulq	$0x1f40, %rsi, %rdx
    00001868: 	psrldq	$0x8, %xmm1
    0000186d: 	paddq	%xmm1, %xmm0
    00001871: 	movq	%xmm0, %rax
    00001876: 	cmpq	%rax, %rdx
    00001879: 	je	.Ltmp103 # Offset: 6265
    0000187b: 	movl	current_test(%rip), %edx
    00001881: 	movq	%r13, %rsi
    00001884: 	movl	$0x1, %edi
    00001889: 	xorl	%eax, %eax
    0000188b: 	addl	$0x1, %r15d
    0000188f: 	callq	__printf_chk@PLT # Offset: 6287
    00001894: 	movl	iterations(%rip), %ecx
    0000189a: 	cmpl	%ecx, %r15d
    0000189d: 	jge	.Ltmp101 # Offset: 6301
    0000189f: 	movq	init_value(%rip), %rsi
    000018a6: 	jmp	.Ltmp104 # Offset: 6310
    000018a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp103:
    000018b0: 	addl	$0x1, %r15d
    000018b4: 	cmpl	%ecx, %r15d
    000018b7: 	jl	.Ltmp104 # Offset: 6327
.Ltmp101:
    000018b9: 	callq	clock@PLT # Offset: 6329
    000018be: 	leaq	DATAat0x10bdf(%rip), %rdi
    000018c5: 	pxor	%xmm0, %xmm0
    000018c9: 	xorl	%r15d, %r15d
    000018cc: 	movq	%rax, end_time(%rip)
    000018d3: 	subq	start_time(%rip), %rax
    000018da: 	leaq	DATAat0x10f44(%rip), %r13
    000018e1: 	cvtsi2sd	%rax, %xmm0
    000018e6: 	divsd	DATAat0x10f68(%rip), %xmm0
    000018ee: 	callq	_Z13record_resultdPKc # Offset: 6382
    000018f3: 	callq	clock@PLT # Offset: 6387
    000018f8: 	movl	iterations(%rip), %ecx
    000018fe: 	movq	init_value(%rip), %rsi
    00001905: 	movq	%rax, start_time(%rip)
    0000190c: 	testl	%ecx, %ecx
    0000190e: 	jle	.Ltmp105 # Offset: 6414
.Ltmp108:
    00001910: 	leaq	data64unsigned(%rip), %rax
    00001917: 	pxor	%xmm0, %xmm0
    0000191b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp106:
    00001920: 	paddq	(%rax), %xmm0
    00001924: 	addq	$0x10, %rax
    00001928: 	cmpq	%rbp, %rax
    0000192b: 	jne	.Ltmp106 # Offset: 6443
    0000192d: 	movdqa	%xmm0, %xmm1
    00001931: 	imulq	$0x1f40, %rsi, %rdx
    00001938: 	psrldq	$0x8, %xmm1
    0000193d: 	paddq	%xmm1, %xmm0
    00001941: 	movq	%xmm0, %rax
    00001946: 	cmpq	%rax, %rdx
    00001949: 	je	.Ltmp107 # Offset: 6473
    0000194b: 	movl	current_test(%rip), %edx
    00001951: 	movq	%r13, %rsi
    00001954: 	movl	$0x1, %edi
    00001959: 	xorl	%eax, %eax
    0000195b: 	addl	$0x1, %r15d
    0000195f: 	callq	__printf_chk@PLT # Offset: 6495
    00001964: 	movl	iterations(%rip), %ecx
    0000196a: 	cmpl	%ecx, %r15d
    0000196d: 	jge	.Ltmp105 # Offset: 6509
    0000196f: 	movq	init_value(%rip), %rsi
    00001976: 	jmp	.Ltmp108 # Offset: 6518
    00001978: 	nopl	(%rax,%rax) # Size: 8
.Ltmp107:
    00001980: 	addl	$0x1, %r15d
    00001984: 	cmpl	%ecx, %r15d
    00001987: 	jl	.Ltmp108 # Offset: 6535
.Ltmp105:
    00001989: 	callq	clock@PLT # Offset: 6537
    0000198e: 	pxor	%xmm0, %xmm0
    00001992: 	leaq	DATAat0x10bf9(%rip), %rdi
    00001999: 	leaq	data64unsigned(%rip), %r13
    000019a0: 	movq	%rax, end_time(%rip)
    000019a7: 	subq	start_time(%rip), %rax
    000019ae: 	cvtsi2sd	%rax, %xmm0
    000019b3: 	divsd	DATAat0x10f68(%rip), %xmm0
    000019bb: 	callq	_Z13record_resultdPKc # Offset: 6587
    000019c0: 	leaq	-0xfa00(%r13), %rax
    000019c7: 	movq	init_value(%rip), %xmm0
    000019cf: 	punpcklqdq	%xmm0, %xmm0
    000019d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp109:
    000019d8: 	movaps	%xmm0, (%rax)
    000019db: 	addq	$0x10, %rax
    000019df: 	cmpq	%r13, %rax
    000019e2: 	jne	.Ltmp109 # Offset: 6626
    000019e4: 	leaq	DATAat0x10b93(%rip), %rdx
    000019eb: 	movl	$0x1f40, %esi
    000019f0: 	leaq	data64(%rip), %rdi
    000019f7: 	xorl	%r15d, %r15d
    000019fa: 	callq	_Z13test_constantIl20shift_right_constantIlEEvPT_iPKc # Offset: 6650
    000019ff: 	leaq	DATAat0x10348(%rip), %rdx
    00001a06: 	movl	$0x1f40, %esi
    00001a0b: 	leaq	data64(%rip), %rdi
    00001a12: 	callq	_Z13test_constantIl29shift_right_repeated_constantIlEEvPT_iPKc # Offset: 6674
    00001a17: 	leaq	DATAat0x10bb1(%rip), %rdx
    00001a1e: 	movl	$0x1f40, %esi
    00001a23: 	leaq	data64(%rip), %rdi
    00001a2a: 	callq	_Z13test_constantIl19shift_left_constantIlEEvPT_iPKc # Offset: 6698
    00001a2f: 	movl	$0x1f40, %esi
    00001a34: 	leaq	data64(%rip), %rdi
    00001a3b: 	leaq	DATAat0x10370(%rip), %rdx
    00001a42: 	callq	_Z13test_constantIl28shift_left_repeated_constantIlEEvPT_iPKc # Offset: 6722
    00001a47: 	callq	clock@PLT # Offset: 6727
    00001a4c: 	movl	iterations(%rip), %edi
    00001a52: 	movq	init_value(%rip), %rsi
    00001a59: 	movq	%rax, start_time(%rip)
    00001a60: 	testl	%edi, %edi
    00001a62: 	jle	.Ltmp110 # Offset: 6754
    00001a64: 	nopl	(%rax) # Size: 4
.Ltmp113:
    00001a68: 	leaq	data64(%rip), %rax
    00001a6f: 	pxor	%xmm0, %xmm0
    00001a73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp111:
    00001a78: 	paddq	(%rax), %xmm0
    00001a7c: 	addq	$0x10, %rax
    00001a80: 	cmpq	%rax, %r13
    00001a83: 	jne	.Ltmp111 # Offset: 6787
    00001a85: 	movdqa	%xmm0, %xmm1
    00001a89: 	imulq	$0x1f40, %rsi, %rdx
    00001a90: 	psrldq	$0x8, %xmm1
    00001a95: 	paddq	%xmm1, %xmm0
    00001a99: 	movq	%xmm0, %rax
    00001a9e: 	cmpq	%rax, %rdx
    00001aa1: 	je	.Ltmp112 # Offset: 6817
    00001aa3: 	movl	current_test(%rip), %edx
    00001aa9: 	movl	$0x1, %edi
    00001aae: 	leaq	DATAat0x10f44(%rip), %rsi
    00001ab5: 	xorl	%eax, %eax
    00001ab7: 	addl	$0x1, %r15d
    00001abb: 	callq	__printf_chk@PLT # Offset: 6843
    00001ac0: 	movl	iterations(%rip), %edi
    00001ac6: 	cmpl	%edi, %r15d
    00001ac9: 	jge	.Ltmp110 # Offset: 6857
    00001acb: 	movq	init_value(%rip), %rsi
    00001ad2: 	jmp	.Ltmp113 # Offset: 6866
    00001ad4: 	nopl	(%rax) # Size: 4
.Ltmp112:
    00001ad8: 	addl	$0x1, %r15d
    00001adc: 	cmpl	%edi, %r15d
    00001adf: 	jl	.Ltmp113 # Offset: 6879
.Ltmp110:
    00001ae1: 	callq	clock@PLT # Offset: 6881
    00001ae6: 	leaq	DATAat0x10bce(%rip), %rdi
    00001aed: 	pxor	%xmm0, %xmm0
    00001af1: 	xorl	%r15d, %r15d
    00001af4: 	movq	%rax, end_time(%rip)
    00001afb: 	subq	start_time(%rip), %rax
    00001b02: 	cvtsi2sd	%rax, %xmm0
    00001b07: 	divsd	DATAat0x10f68(%rip), %xmm0
    00001b0f: 	callq	_Z13record_resultdPKc # Offset: 6927
    00001b14: 	callq	clock@PLT # Offset: 6932
    00001b19: 	movl	iterations(%rip), %edi
    00001b1f: 	movq	init_value(%rip), %rsi
    00001b26: 	movq	%rax, start_time(%rip)
    00001b2d: 	testl	%edi, %edi
    00001b2f: 	jle	.Ltmp114 # Offset: 6959
    00001b35: 	nopl	(%rax) # Size: 3
.Ltmp117:
    00001b38: 	leaq	data64(%rip), %rax
    00001b3f: 	pxor	%xmm0, %xmm0
    00001b43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp115:
    00001b48: 	paddq	(%rax), %xmm0
    00001b4c: 	addq	$0x10, %rax
    00001b50: 	cmpq	%rax, %r13
    00001b53: 	jne	.Ltmp115 # Offset: 6995
    00001b55: 	movdqa	%xmm0, %xmm1
    00001b59: 	imulq	$0x1f40, %rsi, %rdx
    00001b60: 	psrldq	$0x8, %xmm1
    00001b65: 	paddq	%xmm1, %xmm0
    00001b69: 	movq	%xmm0, %rax
    00001b6e: 	cmpq	%rax, %rdx
    00001b71: 	je	.Ltmp116 # Offset: 7025
    00001b73: 	movl	current_test(%rip), %edx
    00001b79: 	movl	$0x1, %edi
    00001b7e: 	leaq	DATAat0x10f44(%rip), %rsi
    00001b85: 	xorl	%eax, %eax
    00001b87: 	addl	$0x1, %r15d
    00001b8b: 	callq	__printf_chk@PLT # Offset: 7051
    00001b90: 	movl	iterations(%rip), %edi
    00001b96: 	cmpl	%edi, %r15d
    00001b99: 	jge	.Ltmp114 # Offset: 7065
    00001b9b: 	movq	init_value(%rip), %rsi
    00001ba2: 	jmp	.Ltmp117 # Offset: 7074
    00001ba4: 	nopl	(%rax) # Size: 4
.Ltmp116:
    00001ba8: 	addl	$0x1, %r15d
    00001bac: 	cmpl	%edi, %r15d
    00001baf: 	jl	.Ltmp117 # Offset: 7087
.Ltmp114:
    00001bb1: 	callq	clock@PLT # Offset: 7089
    00001bb6: 	leaq	DATAat0x10be0(%rip), %rdi
    00001bbd: 	pxor	%xmm0, %xmm0
    00001bc1: 	xorl	%r15d, %r15d
    00001bc4: 	movq	%rax, end_time(%rip)
    00001bcb: 	subq	start_time(%rip), %rax
    00001bd2: 	cvtsi2sd	%rax, %xmm0
    00001bd7: 	divsd	DATAat0x10f68(%rip), %xmm0
    00001bdf: 	callq	_Z13record_resultdPKc # Offset: 7135
    00001be4: 	callq	clock@PLT # Offset: 7140
    00001be9: 	movl	iterations(%rip), %edi
    00001bef: 	movq	init_value(%rip), %rsi
    00001bf6: 	movq	%rax, start_time(%rip)
    00001bfd: 	testl	%edi, %edi
    00001bff: 	jle	.Ltmp118 # Offset: 7167
    00001c05: 	nopl	(%rax) # Size: 3
.Ltmp121:
    00001c08: 	leaq	data64(%rip), %rax
    00001c0f: 	pxor	%xmm0, %xmm0
    00001c13: 	nopl	(%rax,%rax) # Size: 5
.Ltmp119:
    00001c18: 	paddq	(%rax), %xmm0
    00001c1c: 	addq	$0x10, %rax
    00001c20: 	cmpq	%r13, %rax
    00001c23: 	jne	.Ltmp119 # Offset: 7203
    00001c25: 	movdqa	%xmm0, %xmm1
    00001c29: 	imulq	$0x1f40, %rsi, %rdx
    00001c30: 	psrldq	$0x8, %xmm1
    00001c35: 	paddq	%xmm1, %xmm0
    00001c39: 	movq	%xmm0, %rax
    00001c3e: 	cmpq	%rax, %rdx
    00001c41: 	je	.Ltmp120 # Offset: 7233
    00001c43: 	movl	current_test(%rip), %edx
    00001c49: 	movl	$0x1, %edi
    00001c4e: 	leaq	DATAat0x10f44(%rip), %rsi
    00001c55: 	xorl	%eax, %eax
    00001c57: 	addl	$0x1, %r15d
    00001c5b: 	callq	__printf_chk@PLT # Offset: 7259
    00001c60: 	movl	iterations(%rip), %edi
    00001c66: 	cmpl	%edi, %r15d
    00001c69: 	jge	.Ltmp118 # Offset: 7273
    00001c6b: 	movq	init_value(%rip), %rsi
    00001c72: 	jmp	.Ltmp121 # Offset: 7282
    00001c74: 	nopl	(%rax) # Size: 4
.Ltmp120:
    00001c78: 	addl	$0x1, %r15d
    00001c7c: 	cmpl	%edi, %r15d
    00001c7f: 	jl	.Ltmp121 # Offset: 7295
.Ltmp118:
    00001c81: 	callq	clock@PLT # Offset: 7297
    00001c86: 	leaq	DATAat0x10bfa(%rip), %rdi
    00001c8d: 	pxor	%xmm0, %xmm0
    00001c91: 	movq	%rax, end_time(%rip)
    00001c98: 	subq	start_time(%rip), %rax
    00001c9f: 	cvtsi2sd	%rax, %xmm0
    00001ca4: 	divsd	DATAat0x10f68(%rip), %xmm0
    00001cac: 	callq	_Z13record_resultdPKc # Offset: 7340
    00001cb1: 	movl	iterations(%rip), %edx
    00001cb7: 	xorl	%r8d, %r8d
    00001cba: 	xorl	%ecx, %ecx
    00001cbc: 	movl	$0x1f40, %esi
    00001cc1: 	leaq	DATAat0x10c12(%rip), %rdi
    00001cc8: 	callq	_Z9summarizePKciiii # Offset: 7368
    00001ccd: 	movzbl	init_value(%rip), %eax
    00001cd4: 	movabsq	$0x101010101010101, %rdx
    00001cde: 	movl	$0x3e8, %ecx
    00001ce3: 	leaq	data8unsigned(%rip), %rdi
    00001cea: 	imulq	%rdx, %rax
    00001cee: 	rep		stosq	%rax, %es:(%rdi)
    00001cf1: 	callq	clock@PLT # Offset: 7409
    00001cf6: 	movl	iterations(%rip), %edi
    00001cfc: 	movq	%rax, start_time(%rip)
    00001d03: 	testl	%edi, %edi
    00001d05: 	jle	.Ltmp122 # Offset: 7429
    00001d0b: 	movslq	0x18(%rsp), %rax
    00001d10: 	movq	init_value(%rip), %rsi
    00001d17: 	xorl	%r9d, %r9d
    00001d1a: 	leaq	data16(%rip), %r15
    00001d21: 	movdqa	DATAat0x10fa0(%rip), %xmm2
    00001d29: 	movq	%rax, %xmm4
    00001d2e: 	nop # Size: 2
.Ltmp125:
    00001d30: 	pxor	%xmm6, %xmm6
    00001d34: 	leaq	data8unsigned(%rip), %rax
    00001d3b: 	pxor	%xmm5, %xmm5
    00001d3f: 	movdqa	%xmm6, %xmm7
    00001d43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp123:
    00001d48: 	movdqa	(%rax), %xmm3
    00001d4c: 	addq	$0x10, %rax
    00001d50: 	movdqa	%xmm3, %xmm1
    00001d54: 	punpckhbw	%xmm7, %xmm3
    00001d58: 	punpcklbw	%xmm7, %xmm1
    00001d5c: 	movdqa	%xmm1, %xmm0
    00001d60: 	punpckhwd	%xmm5, %xmm1
    00001d64: 	punpcklwd	%xmm5, %xmm0
    00001d68: 	psrad	%xmm4, %xmm1
    00001d6c: 	psrad	%xmm4, %xmm0
    00001d70: 	movdqa	%xmm0, %xmm8
    00001d75: 	punpcklwd	%xmm1, %xmm0
    00001d79: 	punpckhwd	%xmm1, %xmm8
    00001d7e: 	movdqa	%xmm0, %xmm1
    00001d82: 	punpckhwd	%xmm8, %xmm1
    00001d87: 	punpcklwd	%xmm8, %xmm0
    00001d8c: 	punpcklwd	%xmm1, %xmm0
    00001d90: 	movdqa	%xmm3, %xmm1
    00001d94: 	punpckhwd	%xmm5, %xmm3
    00001d98: 	punpcklwd	%xmm5, %xmm1
    00001d9c: 	psrad	%xmm4, %xmm3
    00001da0: 	pand	%xmm2, %xmm0
    00001da4: 	psrad	%xmm4, %xmm1
    00001da8: 	movdqa	%xmm1, %xmm8
    00001dad: 	punpcklwd	%xmm3, %xmm1
    00001db1: 	punpckhwd	%xmm3, %xmm8
    00001db6: 	movdqa	%xmm1, %xmm3
    00001dba: 	punpckhwd	%xmm8, %xmm3
    00001dbf: 	punpcklwd	%xmm8, %xmm1
    00001dc4: 	punpcklwd	%xmm3, %xmm1
    00001dc8: 	pand	%xmm2, %xmm1
    00001dcc: 	packuswb	%xmm1, %xmm0
    00001dd0: 	paddb	%xmm0, %xmm6
    00001dd4: 	cmpq	%rax, %r15
    00001dd7: 	jne	.Ltmp123 # Offset: 7639
    00001ddd: 	movdqa	%xmm6, %xmm0
    00001de1: 	movzbl	0x18(%rsp), %ecx
    00001de6: 	movzbl	%sil, %eax
    00001dea: 	psrldq	$0x8, %xmm0
    00001def: 	paddb	%xmm0, %xmm6
    00001df3: 	sarl	%cl, %eax
    00001df5: 	psadbw	%xmm7, %xmm6
    00001df9: 	shll	$0x6, %eax
    00001dfc: 	movd	%xmm6, %edx
    00001e00: 	cmpb	%dl, %al
    00001e02: 	je	.Ltmp124 # Offset: 7682
    00001e04: 	movl	current_test(%rip), %edx
    00001e0a: 	movl	$0x1, %edi
    00001e0f: 	leaq	DATAat0x10f44(%rip), %rsi
    00001e16: 	xorl	%eax, %eax
    00001e18: 	movl	%r9d, 0x30(%rsp)
    00001e1d: 	movq	%xmm4, 0x50(%rsp)
    00001e23: 	movaps	%xmm2, 0x40(%rsp)
    00001e28: 	callq	__printf_chk@PLT # Offset: 7720
    00001e2d: 	movl	0x30(%rsp), %r9d
    00001e32: 	movl	iterations(%rip), %edi
    00001e38: 	addl	$0x1, %r9d
    00001e3c: 	cmpl	%edi, %r9d
    00001e3f: 	jge	.Ltmp122 # Offset: 7743
    00001e41: 	movq	init_value(%rip), %rsi
    00001e48: 	movdqa	0x40(%rsp), %xmm2
    00001e4e: 	movq	0x50(%rsp), %xmm4
    00001e54: 	jmp	.Ltmp125 # Offset: 7764
    00001e59: 	nopl	(%rax) # Size: 7
.Ltmp124:
    00001e60: 	addl	$0x1, %r9d
    00001e64: 	cmpl	%edi, %r9d
    00001e67: 	jl	.Ltmp125 # Offset: 7783
.Ltmp122:
    00001e6d: 	callq	clock@PLT # Offset: 7789
    00001e72: 	leaq	DATAat0x10c2b(%rip), %rdi
    00001e79: 	pxor	%xmm0, %xmm0
    00001e7d: 	movq	%rax, end_time(%rip)
    00001e84: 	subq	start_time(%rip), %rax
    00001e8b: 	cvtsi2sd	%rax, %xmm0
    00001e90: 	divsd	DATAat0x10f68(%rip), %xmm0
    00001e98: 	callq	_Z13record_resultdPKc # Offset: 7832
    00001e9d: 	movl	0x7c(%rsp), %edx
    00001ea1: 	movl	$0x1f40, %esi
    00001ea6: 	leaq	data8unsigned(%rip), %rdi
    00001ead: 	leaq	DATAat0x10398(%rip), %rcx
    00001eb4: 	callq	_Z14test_variable1Ih29shift_right_repeated_variableIhEEvPT_iS2_PKc # Offset: 7860
    00001eb9: 	callq	clock@PLT # Offset: 7865
    00001ebe: 	movl	iterations(%rip), %edi
    00001ec4: 	movq	%rax, start_time(%rip)
    00001ecb: 	testl	%edi, %edi
    00001ecd: 	jle	.Ltmp126 # Offset: 7885
    00001ed3: 	movslq	0x18(%rsp), %rax
    00001ed8: 	movq	init_value(%rip), %rsi
    00001edf: 	xorl	%r9d, %r9d
    00001ee2: 	leaq	data16(%rip), %r15
    00001ee9: 	movdqa	DATAat0x10fa0(%rip), %xmm2
    00001ef1: 	movq	%rax, %xmm4
    00001ef6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp129:
    00001f00: 	pxor	%xmm6, %xmm6
    00001f04: 	leaq	data8unsigned(%rip), %rax
    00001f0b: 	pxor	%xmm5, %xmm5
    00001f0f: 	movdqa	%xmm6, %xmm7
    00001f13: 	nopl	(%rax,%rax) # Size: 5
.Ltmp127:
    00001f18: 	movdqa	(%rax), %xmm3
    00001f1c: 	addq	$0x10, %rax
    00001f20: 	movdqa	%xmm3, %xmm1
    00001f24: 	punpckhbw	%xmm7, %xmm3
    00001f28: 	punpcklbw	%xmm7, %xmm1
    00001f2c: 	movdqa	%xmm1, %xmm0
    00001f30: 	punpckhwd	%xmm5, %xmm1
    00001f34: 	punpcklwd	%xmm5, %xmm0
    00001f38: 	pslld	%xmm4, %xmm1
    00001f3c: 	pslld	%xmm4, %xmm0
    00001f40: 	movdqa	%xmm0, %xmm8
    00001f45: 	punpcklwd	%xmm1, %xmm0
    00001f49: 	punpckhwd	%xmm1, %xmm8
    00001f4e: 	movdqa	%xmm0, %xmm1
    00001f52: 	punpckhwd	%xmm8, %xmm1
    00001f57: 	punpcklwd	%xmm8, %xmm0
    00001f5c: 	punpcklwd	%xmm1, %xmm0
    00001f60: 	movdqa	%xmm3, %xmm1
    00001f64: 	punpckhwd	%xmm5, %xmm3
    00001f68: 	punpcklwd	%xmm5, %xmm1
    00001f6c: 	pslld	%xmm4, %xmm3
    00001f70: 	pand	%xmm2, %xmm0
    00001f74: 	pslld	%xmm4, %xmm1
    00001f78: 	movdqa	%xmm1, %xmm8
    00001f7d: 	punpcklwd	%xmm3, %xmm1
    00001f81: 	punpckhwd	%xmm3, %xmm8
    00001f86: 	movdqa	%xmm1, %xmm3
    00001f8a: 	punpckhwd	%xmm8, %xmm3
    00001f8f: 	punpcklwd	%xmm8, %xmm1
    00001f94: 	punpcklwd	%xmm3, %xmm1
    00001f98: 	pand	%xmm2, %xmm1
    00001f9c: 	packuswb	%xmm1, %xmm0
    00001fa0: 	paddb	%xmm0, %xmm6
    00001fa4: 	cmpq	%r15, %rax
    00001fa7: 	jne	.Ltmp127 # Offset: 8103
    00001fad: 	movdqa	%xmm6, %xmm0
    00001fb1: 	movzbl	0x18(%rsp), %ecx
    00001fb6: 	movzbl	%sil, %eax
    00001fba: 	psrldq	$0x8, %xmm0
    00001fbf: 	paddb	%xmm0, %xmm6
    00001fc3: 	shll	%cl, %eax
    00001fc5: 	psadbw	%xmm7, %xmm6
    00001fc9: 	shll	$0x6, %eax
    00001fcc: 	movd	%xmm6, %edx
    00001fd0: 	cmpb	%dl, %al
    00001fd2: 	je	.Ltmp128 # Offset: 8146
    00001fd4: 	movl	current_test(%rip), %edx
    00001fda: 	movl	$0x1, %edi
    00001fdf: 	leaq	DATAat0x10f44(%rip), %rsi
    00001fe6: 	xorl	%eax, %eax
    00001fe8: 	movl	%r9d, 0x30(%rsp)
    00001fed: 	movq	%xmm4, 0x50(%rsp)
    00001ff3: 	movaps	%xmm2, 0x40(%rsp)
    00001ff8: 	callq	__printf_chk@PLT # Offset: 8184
    00001ffd: 	movl	0x30(%rsp), %r9d
    00002002: 	movl	iterations(%rip), %edi
    00002008: 	addl	$0x1, %r9d
    0000200c: 	cmpl	%edi, %r9d
    0000200f: 	jge	.Ltmp126 # Offset: 8207
    00002011: 	movq	init_value(%rip), %rsi
    00002018: 	movdqa	0x40(%rsp), %xmm2
    0000201e: 	movq	0x50(%rsp), %xmm4
    00002024: 	jmp	.Ltmp129 # Offset: 8228
    00002029: 	nopl	(%rax) # Size: 7
.Ltmp128:
    00002030: 	addl	$0x1, %r9d
    00002034: 	cmpl	%edi, %r9d
    00002037: 	jl	.Ltmp129 # Offset: 8247
.Ltmp126:
    0000203d: 	callq	clock@PLT # Offset: 8253
    00002042: 	leaq	DATAat0x10c48(%rip), %rdi
    00002049: 	pxor	%xmm0, %xmm0
    0000204d: 	movq	%rax, end_time(%rip)
    00002054: 	subq	start_time(%rip), %rax
    0000205b: 	cvtsi2sd	%rax, %xmm0
    00002060: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002068: 	callq	_Z13record_resultdPKc # Offset: 8296
    0000206d: 	movl	0x7c(%rsp), %edx
    00002071: 	leaq	DATAat0x103c0(%rip), %rcx
    00002078: 	movl	$0x1f40, %esi
    0000207d: 	leaq	data8unsigned(%rip), %rdi
    00002084: 	callq	_Z14test_variable1Ih28shift_left_repeated_variableIhEEvPT_iS2_PKc # Offset: 8324
    00002089: 	movzbl	init_value(%rip), %eax
    00002090: 	movabsq	$0x101010101010101, %rdx
    0000209a: 	movl	$0x3e8, %ecx
    0000209f: 	leaq	data8(%rip), %rdi
    000020a6: 	imulq	%rdx, %rax
    000020aa: 	rep		stosq	%rax, %es:(%rdi)
    000020ad: 	callq	clock@PLT # Offset: 8365
    000020b2: 	movl	iterations(%rip), %edi
    000020b8: 	movq	%rax, start_time(%rip)
    000020bf: 	testl	%edi, %edi
    000020c1: 	jle	.Ltmp130 # Offset: 8385
    000020c7: 	movslq	0x24(%rsp), %rax
    000020cc: 	movq	init_value(%rip), %rsi
    000020d3: 	xorl	%r9d, %r9d
    000020d6: 	leaq	data8unsigned(%rip), %r15
    000020dd: 	movdqa	DATAat0x10fa0(%rip), %xmm2
    000020e5: 	movq	%rax, %xmm3
    000020ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp133:
    000020f0: 	pxor	%xmm5, %xmm5
    000020f4: 	leaq	data8(%rip), %rax
    000020fb: 	pxor	%xmm6, %xmm6
    000020ff: 	movdqa	%xmm5, %xmm7
    00002103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp131:
    00002108: 	movdqa	(%rax), %xmm4
    0000210c: 	movdqa	%xmm7, %xmm0
    00002110: 	movdqa	%xmm6, %xmm8
    00002115: 	addq	$0x10, %rax
    00002119: 	pcmpgtb	%xmm4, %xmm0
    0000211d: 	movdqa	%xmm4, %xmm1
    00002121: 	punpcklbw	%xmm0, %xmm1
    00002125: 	punpckhbw	%xmm0, %xmm4
    00002129: 	pcmpgtw	%xmm1, %xmm8
    0000212e: 	movdqa	%xmm1, %xmm0
    00002132: 	punpcklwd	%xmm8, %xmm0
    00002137: 	punpckhwd	%xmm8, %xmm1
    0000213c: 	psrad	%xmm3, %xmm1
    00002140: 	psrad	%xmm3, %xmm0
    00002144: 	movdqa	%xmm0, %xmm8
    00002149: 	punpcklwd	%xmm1, %xmm0
    0000214d: 	punpckhwd	%xmm1, %xmm8
    00002152: 	movdqa	%xmm0, %xmm1
    00002156: 	punpckhwd	%xmm8, %xmm1
    0000215b: 	punpcklwd	%xmm8, %xmm0
    00002160: 	movdqa	%xmm6, %xmm8
    00002165: 	pcmpgtw	%xmm4, %xmm8
    0000216a: 	punpcklwd	%xmm1, %xmm0
    0000216e: 	movdqa	%xmm4, %xmm1
    00002172: 	pand	%xmm2, %xmm0
    00002176: 	punpcklwd	%xmm8, %xmm1
    0000217b: 	punpckhwd	%xmm8, %xmm4
    00002180: 	psrad	%xmm3, %xmm4
    00002184: 	psrad	%xmm3, %xmm1
    00002188: 	movdqa	%xmm1, %xmm8
    0000218d: 	punpcklwd	%xmm4, %xmm1
    00002191: 	punpckhwd	%xmm4, %xmm8
    00002196: 	movdqa	%xmm1, %xmm4
    0000219a: 	punpckhwd	%xmm8, %xmm4
    0000219f: 	punpcklwd	%xmm8, %xmm1
    000021a4: 	punpcklwd	%xmm4, %xmm1
    000021a8: 	pand	%xmm2, %xmm1
    000021ac: 	packuswb	%xmm1, %xmm0
    000021b0: 	paddb	%xmm0, %xmm5
    000021b4: 	cmpq	%rax, %r15
    000021b7: 	jne	.Ltmp131 # Offset: 8631
    000021bd: 	movdqa	%xmm5, %xmm0
    000021c1: 	movzbl	0x24(%rsp), %ecx
    000021c6: 	movsbl	%sil, %eax
    000021ca: 	psrldq	$0x8, %xmm0
    000021cf: 	paddb	%xmm0, %xmm5
    000021d3: 	sarl	%cl, %eax
    000021d5: 	psadbw	%xmm7, %xmm5
    000021d9: 	shll	$0x6, %eax
    000021dc: 	movd	%xmm5, %edx
    000021e0: 	cmpb	%dl, %al
    000021e2: 	je	.Ltmp132 # Offset: 8674
    000021e4: 	movl	current_test(%rip), %edx
    000021ea: 	movl	$0x1, %edi
    000021ef: 	leaq	DATAat0x10f44(%rip), %rsi
    000021f6: 	xorl	%eax, %eax
    000021f8: 	movl	%r9d, 0x18(%rsp)
    000021fd: 	movq	%xmm3, 0x40(%rsp)
    00002203: 	movaps	%xmm2, 0x30(%rsp)
    00002208: 	callq	__printf_chk@PLT # Offset: 8712
    0000220d: 	movl	0x18(%rsp), %r9d
    00002212: 	movl	iterations(%rip), %edi
    00002218: 	addl	$0x1, %r9d
    0000221c: 	cmpl	%edi, %r9d
    0000221f: 	jge	.Ltmp130 # Offset: 8735
    00002221: 	movq	init_value(%rip), %rsi
    00002228: 	movdqa	0x30(%rsp), %xmm2
    0000222e: 	movq	0x40(%rsp), %xmm3
    00002234: 	jmp	.Ltmp133 # Offset: 8756
    00002239: 	nopl	(%rax) # Size: 7
.Ltmp132:
    00002240: 	addl	$0x1, %r9d
    00002244: 	cmpl	%edi, %r9d
    00002247: 	jl	.Ltmp133 # Offset: 8775
.Ltmp130:
    0000224d: 	callq	clock@PLT # Offset: 8781
    00002252: 	leaq	DATAat0x10c2c(%rip), %rdi
    00002259: 	pxor	%xmm0, %xmm0
    0000225d: 	movq	%rax, end_time(%rip)
    00002264: 	subq	start_time(%rip), %rax
    0000226b: 	cvtsi2sd	%rax, %xmm0
    00002270: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002278: 	callq	_Z13record_resultdPKc # Offset: 8824
    0000227d: 	movl	0x5c(%rsp), %edx
    00002281: 	movl	$0x1f40, %esi
    00002286: 	leaq	data8(%rip), %rdi
    0000228d: 	leaq	DATAat0x103e8(%rip), %rcx
    00002294: 	callq	_Z14test_variable1Ia29shift_right_repeated_variableIaEEvPT_iS2_PKc # Offset: 8852
    00002299: 	callq	clock@PLT # Offset: 8857
    0000229e: 	movl	iterations(%rip), %edi
    000022a4: 	movq	%rax, start_time(%rip)
    000022ab: 	testl	%edi, %edi
    000022ad: 	jle	.Ltmp134 # Offset: 8877
    000022b3: 	movslq	0x24(%rsp), %rax
    000022b8: 	movq	init_value(%rip), %rsi
    000022bf: 	xorl	%r9d, %r9d
    000022c2: 	leaq	data8unsigned(%rip), %r15
    000022c9: 	movdqa	DATAat0x10fa0(%rip), %xmm2
    000022d1: 	movq	%rax, %xmm3
    000022d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp137:
    000022e0: 	pxor	%xmm5, %xmm5
    000022e4: 	leaq	data8(%rip), %rax
    000022eb: 	pxor	%xmm6, %xmm6
    000022ef: 	movdqa	%xmm5, %xmm7
    000022f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp135:
    000022f8: 	movdqa	(%rax), %xmm4
    000022fc: 	movdqa	%xmm7, %xmm0
    00002300: 	movdqa	%xmm6, %xmm8
    00002305: 	addq	$0x10, %rax
    00002309: 	pcmpgtb	%xmm4, %xmm0
    0000230d: 	movdqa	%xmm4, %xmm1
    00002311: 	punpcklbw	%xmm0, %xmm1
    00002315: 	punpckhbw	%xmm0, %xmm4
    00002319: 	pcmpgtw	%xmm1, %xmm8
    0000231e: 	movdqa	%xmm1, %xmm0
    00002322: 	punpcklwd	%xmm8, %xmm0
    00002327: 	punpckhwd	%xmm8, %xmm1
    0000232c: 	pslld	%xmm3, %xmm1
    00002330: 	pslld	%xmm3, %xmm0
    00002334: 	movdqa	%xmm0, %xmm8
    00002339: 	punpcklwd	%xmm1, %xmm0
    0000233d: 	punpckhwd	%xmm1, %xmm8
    00002342: 	movdqa	%xmm0, %xmm1
    00002346: 	punpckhwd	%xmm8, %xmm1
    0000234b: 	punpcklwd	%xmm8, %xmm0
    00002350: 	movdqa	%xmm6, %xmm8
    00002355: 	pcmpgtw	%xmm4, %xmm8
    0000235a: 	punpcklwd	%xmm1, %xmm0
    0000235e: 	movdqa	%xmm4, %xmm1
    00002362: 	pand	%xmm2, %xmm0
    00002366: 	punpcklwd	%xmm8, %xmm1
    0000236b: 	punpckhwd	%xmm8, %xmm4
    00002370: 	pslld	%xmm3, %xmm4
    00002374: 	pslld	%xmm3, %xmm1
    00002378: 	movdqa	%xmm1, %xmm8
    0000237d: 	punpcklwd	%xmm4, %xmm1
    00002381: 	punpckhwd	%xmm4, %xmm8
    00002386: 	movdqa	%xmm1, %xmm4
    0000238a: 	punpckhwd	%xmm8, %xmm4
    0000238f: 	punpcklwd	%xmm8, %xmm1
    00002394: 	punpcklwd	%xmm4, %xmm1
    00002398: 	pand	%xmm2, %xmm1
    0000239c: 	packuswb	%xmm1, %xmm0
    000023a0: 	paddb	%xmm0, %xmm5
    000023a4: 	cmpq	%r15, %rax
    000023a7: 	jne	.Ltmp135 # Offset: 9127
    000023ad: 	movdqa	%xmm5, %xmm0
    000023b1: 	movzbl	0x24(%rsp), %ecx
    000023b6: 	movsbl	%sil, %eax
    000023ba: 	psrldq	$0x8, %xmm0
    000023bf: 	paddb	%xmm0, %xmm5
    000023c3: 	shll	%cl, %eax
    000023c5: 	psadbw	%xmm7, %xmm5
    000023c9: 	shll	$0x6, %eax
    000023cc: 	movd	%xmm5, %edx
    000023d0: 	cmpb	%dl, %al
    000023d2: 	je	.Ltmp136 # Offset: 9170
    000023d4: 	movl	current_test(%rip), %edx
    000023da: 	movl	$0x1, %edi
    000023df: 	leaq	DATAat0x10f44(%rip), %rsi
    000023e6: 	xorl	%eax, %eax
    000023e8: 	movl	%r9d, 0x18(%rsp)
    000023ed: 	movq	%xmm3, 0x40(%rsp)
    000023f3: 	movaps	%xmm2, 0x30(%rsp)
    000023f8: 	callq	__printf_chk@PLT # Offset: 9208
    000023fd: 	movl	0x18(%rsp), %r9d
    00002402: 	movl	iterations(%rip), %edi
    00002408: 	addl	$0x1, %r9d
    0000240c: 	cmpl	%edi, %r9d
    0000240f: 	jge	.Ltmp134 # Offset: 9231
    00002411: 	movq	init_value(%rip), %rsi
    00002418: 	movdqa	0x30(%rsp), %xmm2
    0000241e: 	movq	0x40(%rsp), %xmm3
    00002424: 	jmp	.Ltmp137 # Offset: 9252
    00002429: 	nopl	(%rax) # Size: 7
.Ltmp136:
    00002430: 	addl	$0x1, %r9d
    00002434: 	cmpl	%edi, %r9d
    00002437: 	jl	.Ltmp137 # Offset: 9271
.Ltmp134:
    0000243d: 	callq	clock@PLT # Offset: 9277
    00002442: 	leaq	DATAat0x10c49(%rip), %rdi
    00002449: 	pxor	%xmm0, %xmm0
    0000244d: 	movq	%rax, end_time(%rip)
    00002454: 	subq	start_time(%rip), %rax
    0000245b: 	cvtsi2sd	%rax, %xmm0
    00002460: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002468: 	callq	_Z13record_resultdPKc # Offset: 9320
    0000246d: 	movl	0x5c(%rsp), %edx
    00002471: 	leaq	DATAat0x10410(%rip), %rcx
    00002478: 	movl	$0x1f40, %esi
    0000247d: 	leaq	data8(%rip), %rdi
    00002484: 	callq	_Z14test_variable1Ia28shift_left_repeated_variableIaEEvPT_iS2_PKc # Offset: 9348
    00002489: 	movd	init_value(%rip), %xmm0
    00002491: 	leaq	data16unsigned(%rip), %rax
    00002498: 	punpcklwd	%xmm0, %xmm0
    0000249c: 	pshufd	$0x0, %xmm0, %xmm0
    000024a1: 	nopl	(%rax) # Size: 7
.Ltmp138:
    000024a8: 	movaps	%xmm0, (%rax)
    000024ab: 	addq	$0x10, %rax
    000024af: 	cmpq	%rbx, %rax
    000024b2: 	jne	.Ltmp138 # Offset: 9394
    000024b4: 	callq	clock@PLT # Offset: 9396
    000024b9: 	movl	iterations(%rip), %edx
    000024bf: 	movq	%rax, start_time(%rip)
    000024c6: 	testl	%edx, %edx
    000024c8: 	jle	.Ltmp139 # Offset: 9416
    000024ce: 	movslq	0x28(%rsp), %rax
    000024d3: 	movq	init_value(%rip), %rsi
    000024da: 	xorl	%r15d, %r15d
    000024dd: 	movq	%rax, %xmm2
    000024e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp142:
    000024e8: 	pxor	%xmm3, %xmm3
    000024ec: 	leaq	data16unsigned(%rip), %rax
    000024f3: 	movdqa	%xmm3, %xmm5
    000024f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp140:
    00002500: 	movdqa	(%rax), %xmm1
    00002504: 	addq	$0x10, %rax
    00002508: 	movdqa	%xmm1, %xmm0
    0000250c: 	punpckhwd	%xmm5, %xmm1
    00002510: 	punpcklwd	%xmm5, %xmm0
    00002514: 	psrad	%xmm2, %xmm1
    00002518: 	psrad	%xmm2, %xmm0
    0000251c: 	movdqa	%xmm0, %xmm4
    00002520: 	punpcklwd	%xmm1, %xmm0
    00002524: 	punpckhwd	%xmm1, %xmm4
    00002528: 	movdqa	%xmm0, %xmm1
    0000252c: 	punpckhwd	%xmm4, %xmm1
    00002530: 	punpcklwd	%xmm4, %xmm0
    00002534: 	punpcklwd	%xmm1, %xmm0
    00002538: 	paddw	%xmm0, %xmm3
    0000253c: 	cmpq	%rbx, %rax
    0000253f: 	jne	.Ltmp140 # Offset: 9535
    00002541: 	movdqa	%xmm3, %xmm0
    00002545: 	movzbl	0x28(%rsp), %ecx
    0000254a: 	movzwl	%si, %eax
    0000254d: 	psrldq	$0x8, %xmm0
    00002552: 	paddw	%xmm0, %xmm3
    00002556: 	sarl	%cl, %eax
    00002558: 	movdqa	%xmm3, %xmm0
    0000255c: 	imulw	$0x1f40, %ax, %ax
    00002561: 	psrldq	$0x4, %xmm0
    00002566: 	paddw	%xmm0, %xmm3
    0000256a: 	movdqa	%xmm3, %xmm0
    0000256e: 	psrldq	$0x2, %xmm0
    00002573: 	paddw	%xmm0, %xmm3
    00002577: 	pextrw	$0x0, %xmm3, %ecx
    0000257c: 	cmpw	%cx, %ax
    0000257f: 	je	.Ltmp141 # Offset: 9599
    00002581: 	movl	current_test(%rip), %edx
    00002587: 	leaq	DATAat0x10f44(%rip), %rsi
    0000258e: 	movl	$0x1, %edi
    00002593: 	xorl	%eax, %eax
    00002595: 	movq	%xmm2, 0x18(%rsp)
    0000259b: 	addl	$0x1, %r15d
    0000259f: 	callq	__printf_chk@PLT # Offset: 9631
    000025a4: 	movl	iterations(%rip), %edx
    000025aa: 	cmpl	%edx, %r15d
    000025ad: 	jge	.Ltmp139 # Offset: 9645
    000025af: 	movq	init_value(%rip), %rsi
    000025b6: 	movq	0x18(%rsp), %xmm2
    000025bc: 	jmp	.Ltmp142 # Offset: 9660
    000025c1: 	nopl	(%rax) # Size: 7
.Ltmp141:
    000025c8: 	addl	$0x1, %r15d
    000025cc: 	cmpl	%edx, %r15d
    000025cf: 	jl	.Ltmp142 # Offset: 9679
.Ltmp139:
    000025d5: 	callq	clock@PLT # Offset: 9685
    000025da: 	leaq	DATAat0x10c64(%rip), %rdi
    000025e1: 	pxor	%xmm0, %xmm0
    000025e5: 	movq	%rax, end_time(%rip)
    000025ec: 	subq	start_time(%rip), %rax
    000025f3: 	cvtsi2sd	%rax, %xmm0
    000025f8: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002600: 	callq	_Z13record_resultdPKc # Offset: 9728
    00002605: 	movl	0x78(%rsp), %edx
    00002609: 	leaq	DATAat0x10438(%rip), %rcx
    00002610: 	movl	$0x1f40, %esi
    00002615: 	leaq	data16unsigned(%rip), %rdi
    0000261c: 	callq	_Z14test_variable1It29shift_right_repeated_variableItEEvPT_iS2_PKc # Offset: 9756
    00002621: 	callq	clock@PLT # Offset: 9761
    00002626: 	movl	iterations(%rip), %edx
    0000262c: 	movq	%rax, start_time(%rip)
    00002633: 	testl	%edx, %edx
    00002635: 	jle	.Ltmp143 # Offset: 9781
    0000263b: 	movslq	0x28(%rsp), %rax
    00002640: 	movq	init_value(%rip), %rsi
    00002647: 	xorl	%r15d, %r15d
    0000264a: 	movq	%rax, %xmm2
    0000264f: 	nop # Size: 1
.Ltmp146:
    00002650: 	pxor	%xmm3, %xmm3
    00002654: 	leaq	data16unsigned(%rip), %rax
    0000265b: 	movdqa	%xmm3, %xmm5
    0000265f: 	nop # Size: 1
.Ltmp144:
    00002660: 	movdqa	(%rax), %xmm1
    00002664: 	addq	$0x10, %rax
    00002668: 	movdqa	%xmm1, %xmm0
    0000266c: 	punpckhwd	%xmm5, %xmm1
    00002670: 	punpcklwd	%xmm5, %xmm0
    00002674: 	pslld	%xmm2, %xmm1
    00002678: 	pslld	%xmm2, %xmm0
    0000267c: 	movdqa	%xmm0, %xmm4
    00002680: 	punpcklwd	%xmm1, %xmm0
    00002684: 	punpckhwd	%xmm1, %xmm4
    00002688: 	movdqa	%xmm0, %xmm1
    0000268c: 	punpckhwd	%xmm4, %xmm1
    00002690: 	punpcklwd	%xmm4, %xmm0
    00002694: 	punpcklwd	%xmm1, %xmm0
    00002698: 	paddw	%xmm0, %xmm3
    0000269c: 	cmpq	%rbx, %rax
    0000269f: 	jne	.Ltmp144 # Offset: 9887
    000026a1: 	movdqa	%xmm3, %xmm0
    000026a5: 	movzbl	0x28(%rsp), %ecx
    000026aa: 	movzwl	%si, %eax
    000026ad: 	psrldq	$0x8, %xmm0
    000026b2: 	paddw	%xmm0, %xmm3
    000026b6: 	shll	%cl, %eax
    000026b8: 	movdqa	%xmm3, %xmm0
    000026bc: 	imulw	$0x1f40, %ax, %ax
    000026c1: 	psrldq	$0x4, %xmm0
    000026c6: 	paddw	%xmm0, %xmm3
    000026ca: 	movdqa	%xmm3, %xmm0
    000026ce: 	psrldq	$0x2, %xmm0
    000026d3: 	paddw	%xmm0, %xmm3
    000026d7: 	pextrw	$0x0, %xmm3, %ecx
    000026dc: 	cmpw	%cx, %ax
    000026df: 	je	.Ltmp145 # Offset: 9951
    000026e1: 	movl	current_test(%rip), %edx
    000026e7: 	leaq	DATAat0x10f44(%rip), %rsi
    000026ee: 	movl	$0x1, %edi
    000026f3: 	xorl	%eax, %eax
    000026f5: 	movq	%xmm2, 0x18(%rsp)
    000026fb: 	addl	$0x1, %r15d
    000026ff: 	callq	__printf_chk@PLT # Offset: 9983
    00002704: 	movl	iterations(%rip), %edx
    0000270a: 	cmpl	%edx, %r15d
    0000270d: 	jge	.Ltmp143 # Offset: 9997
    0000270f: 	movq	init_value(%rip), %rsi
    00002716: 	movq	0x18(%rsp), %xmm2
    0000271c: 	jmp	.Ltmp146 # Offset: 10012
    00002721: 	nopl	(%rax) # Size: 7
.Ltmp145:
    00002728: 	addl	$0x1, %r15d
    0000272c: 	cmpl	%edx, %r15d
    0000272f: 	jl	.Ltmp146 # Offset: 10031
.Ltmp143:
    00002735: 	callq	clock@PLT # Offset: 10037
    0000273a: 	leaq	DATAat0x10c82(%rip), %rdi
    00002741: 	pxor	%xmm0, %xmm0
    00002745: 	movq	%rax, end_time(%rip)
    0000274c: 	subq	start_time(%rip), %rax
    00002753: 	cvtsi2sd	%rax, %xmm0
    00002758: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002760: 	callq	_Z13record_resultdPKc # Offset: 10080
    00002765: 	movl	0x78(%rsp), %edx
    00002769: 	leaq	DATAat0x10460(%rip), %rcx
    00002770: 	movl	$0x1f40, %esi
    00002775: 	leaq	data16unsigned(%rip), %rdi
    0000277c: 	callq	_Z14test_variable1It28shift_left_repeated_variableItEEvPT_iS2_PKc # Offset: 10108
    00002781: 	movd	init_value(%rip), %xmm0
    00002789: 	leaq	data16(%rip), %rax
    00002790: 	punpcklwd	%xmm0, %xmm0
    00002794: 	pshufd	$0x0, %xmm0, %xmm0
    00002799: 	nopl	(%rax) # Size: 7
.Ltmp147:
    000027a0: 	movaps	%xmm0, (%rax)
    000027a3: 	addq	$0x10, %rax
    000027a7: 	cmpq	%r14, %rax
    000027aa: 	jne	.Ltmp147 # Offset: 10154
    000027ac: 	callq	clock@PLT # Offset: 10156
    000027b1: 	movl	iterations(%rip), %edx
    000027b7: 	movq	%rax, start_time(%rip)
    000027be: 	testl	%edx, %edx
    000027c0: 	jle	.Ltmp148 # Offset: 10176
    000027c6: 	movslq	0x2c(%rsp), %rax
    000027cb: 	movq	init_value(%rip), %rsi
    000027d2: 	xorl	%r15d, %r15d
    000027d5: 	movq	%rax, %xmm2
    000027da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp151:
    000027e0: 	pxor	%xmm3, %xmm3
    000027e4: 	leaq	data16(%rip), %rax
    000027eb: 	movdqa	%xmm3, %xmm5
    000027ef: 	nop # Size: 1
.Ltmp149:
    000027f0: 	movdqa	(%rax), %xmm1
    000027f4: 	movdqa	%xmm5, %xmm4
    000027f8: 	addq	$0x10, %rax
    000027fc: 	pcmpgtw	%xmm1, %xmm4
    00002800: 	movdqa	%xmm1, %xmm0
    00002804: 	punpcklwd	%xmm4, %xmm0
    00002808: 	punpckhwd	%xmm4, %xmm1
    0000280c: 	psrad	%xmm2, %xmm1
    00002810: 	psrad	%xmm2, %xmm0
    00002814: 	movdqa	%xmm0, %xmm4
    00002818: 	punpcklwd	%xmm1, %xmm0
    0000281c: 	punpckhwd	%xmm1, %xmm4
    00002820: 	movdqa	%xmm0, %xmm1
    00002824: 	punpckhwd	%xmm4, %xmm1
    00002828: 	punpcklwd	%xmm4, %xmm0
    0000282c: 	punpcklwd	%xmm1, %xmm0
    00002830: 	paddw	%xmm0, %xmm3
    00002834: 	cmpq	%rax, %r14
    00002837: 	jne	.Ltmp149 # Offset: 10295
    00002839: 	movdqa	%xmm3, %xmm0
    0000283d: 	movzbl	0x2c(%rsp), %ecx
    00002842: 	movswl	%si, %eax
    00002845: 	psrldq	$0x8, %xmm0
    0000284a: 	paddw	%xmm0, %xmm3
    0000284e: 	sarl	%cl, %eax
    00002850: 	movdqa	%xmm3, %xmm0
    00002854: 	imulw	$0x1f40, %ax, %ax
    00002859: 	psrldq	$0x4, %xmm0
    0000285e: 	paddw	%xmm0, %xmm3
    00002862: 	movdqa	%xmm3, %xmm0
    00002866: 	psrldq	$0x2, %xmm0
    0000286b: 	paddw	%xmm0, %xmm3
    0000286f: 	pextrw	$0x0, %xmm3, %ecx
    00002874: 	cmpw	%cx, %ax
    00002877: 	je	.Ltmp150 # Offset: 10359
    00002879: 	movl	current_test(%rip), %edx
    0000287f: 	leaq	DATAat0x10f44(%rip), %rsi
    00002886: 	movl	$0x1, %edi
    0000288b: 	xorl	%eax, %eax
    0000288d: 	movq	%xmm2, 0x18(%rsp)
    00002893: 	addl	$0x1, %r15d
    00002897: 	callq	__printf_chk@PLT # Offset: 10391
    0000289c: 	movl	iterations(%rip), %edx
    000028a2: 	cmpl	%edx, %r15d
    000028a5: 	jge	.Ltmp148 # Offset: 10405
    000028a7: 	movq	init_value(%rip), %rsi
    000028ae: 	movq	0x18(%rsp), %xmm2
    000028b4: 	jmp	.Ltmp151 # Offset: 10420
    000028b9: 	nopl	(%rax) # Size: 7
.Ltmp150:
    000028c0: 	addl	$0x1, %r15d
    000028c4: 	cmpl	%edx, %r15d
    000028c7: 	jl	.Ltmp151 # Offset: 10439
.Ltmp148:
    000028cd: 	callq	clock@PLT # Offset: 10445
    000028d2: 	leaq	DATAat0x10c65(%rip), %rdi
    000028d9: 	pxor	%xmm0, %xmm0
    000028dd: 	movq	%rax, end_time(%rip)
    000028e4: 	subq	start_time(%rip), %rax
    000028eb: 	cvtsi2sd	%rax, %xmm0
    000028f0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000028f8: 	callq	_Z13record_resultdPKc # Offset: 10488
    000028fd: 	movl	0x60(%rsp), %edx
    00002901: 	leaq	DATAat0x10488(%rip), %rcx
    00002908: 	movl	$0x1f40, %esi
    0000290d: 	leaq	data16(%rip), %rdi
    00002914: 	callq	_Z14test_variable1Is29shift_right_repeated_variableIsEEvPT_iS2_PKc # Offset: 10516
    00002919: 	callq	clock@PLT # Offset: 10521
    0000291e: 	movl	iterations(%rip), %edx
    00002924: 	movq	%rax, start_time(%rip)
    0000292b: 	testl	%edx, %edx
    0000292d: 	jle	.Ltmp152 # Offset: 10541
    00002933: 	movslq	0x2c(%rsp), %rax
    00002938: 	movq	init_value(%rip), %rsi
    0000293f: 	xorl	%r15d, %r15d
    00002942: 	movq	%rax, %xmm2
    00002947: 	nopw	(%rax,%rax) # Size: 9
.Ltmp155:
    00002950: 	pxor	%xmm3, %xmm3
    00002954: 	leaq	data16(%rip), %rax
    0000295b: 	movdqa	%xmm3, %xmm5
    0000295f: 	nop # Size: 1
.Ltmp153:
    00002960: 	movdqa	(%rax), %xmm1
    00002964: 	movdqa	%xmm5, %xmm4
    00002968: 	addq	$0x10, %rax
    0000296c: 	pcmpgtw	%xmm1, %xmm4
    00002970: 	movdqa	%xmm1, %xmm0
    00002974: 	punpcklwd	%xmm4, %xmm0
    00002978: 	punpckhwd	%xmm4, %xmm1
    0000297c: 	pslld	%xmm2, %xmm1
    00002980: 	pslld	%xmm2, %xmm0
    00002984: 	movdqa	%xmm0, %xmm4
    00002988: 	punpcklwd	%xmm1, %xmm0
    0000298c: 	punpckhwd	%xmm1, %xmm4
    00002990: 	movdqa	%xmm0, %xmm1
    00002994: 	punpckhwd	%xmm4, %xmm1
    00002998: 	punpcklwd	%xmm4, %xmm0
    0000299c: 	punpcklwd	%xmm1, %xmm0
    000029a0: 	paddw	%xmm0, %xmm3
    000029a4: 	cmpq	%r14, %rax
    000029a7: 	jne	.Ltmp153 # Offset: 10663
    000029a9: 	movdqa	%xmm3, %xmm0
    000029ad: 	movzbl	0x2c(%rsp), %ecx
    000029b2: 	movswl	%si, %eax
    000029b5: 	psrldq	$0x8, %xmm0
    000029ba: 	paddw	%xmm0, %xmm3
    000029be: 	shll	%cl, %eax
    000029c0: 	movdqa	%xmm3, %xmm0
    000029c4: 	imulw	$0x1f40, %ax, %ax
    000029c9: 	psrldq	$0x4, %xmm0
    000029ce: 	paddw	%xmm0, %xmm3
    000029d2: 	movdqa	%xmm3, %xmm0
    000029d6: 	psrldq	$0x2, %xmm0
    000029db: 	paddw	%xmm0, %xmm3
    000029df: 	pextrw	$0x0, %xmm3, %ecx
    000029e4: 	cmpw	%cx, %ax
    000029e7: 	je	.Ltmp154 # Offset: 10727
    000029e9: 	movl	current_test(%rip), %edx
    000029ef: 	leaq	DATAat0x10f44(%rip), %rsi
    000029f6: 	movl	$0x1, %edi
    000029fb: 	xorl	%eax, %eax
    000029fd: 	movq	%xmm2, 0x18(%rsp)
    00002a03: 	addl	$0x1, %r15d
    00002a07: 	callq	__printf_chk@PLT # Offset: 10759
    00002a0c: 	movl	iterations(%rip), %edx
    00002a12: 	cmpl	%edx, %r15d
    00002a15: 	jge	.Ltmp152 # Offset: 10773
    00002a17: 	movq	init_value(%rip), %rsi
    00002a1e: 	movq	0x18(%rsp), %xmm2
    00002a24: 	jmp	.Ltmp155 # Offset: 10788
    00002a29: 	nopl	(%rax) # Size: 7
.Ltmp154:
    00002a30: 	addl	$0x1, %r15d
    00002a34: 	cmpl	%edx, %r15d
    00002a37: 	jl	.Ltmp155 # Offset: 10807
.Ltmp152:
    00002a3d: 	callq	clock@PLT # Offset: 10813
    00002a42: 	leaq	DATAat0x10c83(%rip), %rdi
    00002a49: 	pxor	%xmm0, %xmm0
    00002a4d: 	movq	%rax, end_time(%rip)
    00002a54: 	subq	start_time(%rip), %rax
    00002a5b: 	cvtsi2sd	%rax, %xmm0
    00002a60: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002a68: 	callq	_Z13record_resultdPKc # Offset: 10856
    00002a6d: 	movl	0x60(%rsp), %edx
    00002a71: 	leaq	DATAat0x104b0(%rip), %rcx
    00002a78: 	movl	$0x1f40, %esi
    00002a7d: 	leaq	data16(%rip), %rdi
    00002a84: 	callq	_Z14test_variable1Is28shift_left_repeated_variableIsEEvPT_iS2_PKc # Offset: 10884
    00002a89: 	movd	init_value(%rip), %xmm7
    00002a91: 	leaq	data32unsigned(%rip), %rax
    00002a98: 	pshufd	$0x0, %xmm7, %xmm0
    00002a9d: 	nopl	(%rax) # Size: 3
.Ltmp156:
    00002aa0: 	movaps	%xmm0, (%rax)
    00002aa3: 	addq	$0x10, %rax
    00002aa7: 	cmpq	%rax, %r12
    00002aaa: 	jne	.Ltmp156 # Offset: 10922
    00002aac: 	callq	clock@PLT # Offset: 10924
    00002ab1: 	movl	iterations(%rip), %edi
    00002ab7: 	movd	(%rsp), %xmm0
    00002abc: 	xorl	%r15d, %r15d
    00002abf: 	movq	%rax, start_time(%rip)
    00002ac6: 	movq	init_value(%rip), %rsi
    00002acd: 	testl	%edi, %edi
    00002acf: 	jle	.Ltmp157 # Offset: 10959
    00002ad5: 	nopl	(%rax) # Size: 3
.Ltmp160:
    00002ad8: 	leaq	data32unsigned(%rip), %rax
    00002adf: 	pxor	%xmm2, %xmm2
    00002ae3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp158:
    00002ae8: 	movdqa	(%rax), %xmm1
    00002aec: 	addq	$0x10, %rax
    00002af0: 	psrld	%xmm0, %xmm1
    00002af4: 	paddd	%xmm1, %xmm2
    00002af8: 	cmpq	%r12, %rax
    00002afb: 	jne	.Ltmp158 # Offset: 11003
    00002afd: 	movdqa	%xmm2, %xmm1
    00002b01: 	movzbl	(%rsp), %ecx
    00002b05: 	movl	%esi, %edx
    00002b07: 	psrldq	$0x8, %xmm1
    00002b0c: 	paddd	%xmm1, %xmm2
    00002b10: 	shrl	%cl, %edx
    00002b12: 	movdqa	%xmm2, %xmm1
    00002b16: 	imull	$0x1f40, %edx, %edx
    00002b1c: 	psrldq	$0x4, %xmm1
    00002b21: 	paddd	%xmm1, %xmm2
    00002b25: 	movd	%xmm2, %eax
    00002b29: 	cmpl	%eax, %edx
    00002b2b: 	je	.Ltmp159 # Offset: 11051
    00002b2d: 	movl	current_test(%rip), %edx
    00002b33: 	movl	$0x1, %edi
    00002b38: 	leaq	DATAat0x10f44(%rip), %rsi
    00002b3f: 	xorl	%eax, %eax
    00002b41: 	movq	%xmm0, 0x18(%rsp)
    00002b47: 	addl	$0x1, %r15d
    00002b4b: 	callq	__printf_chk@PLT # Offset: 11083
    00002b50: 	movl	iterations(%rip), %edi
    00002b56: 	cmpl	%edi, %r15d
    00002b59: 	jge	.Ltmp157 # Offset: 11097
    00002b5b: 	movq	init_value(%rip), %rsi
    00002b62: 	movq	0x18(%rsp), %xmm0
    00002b68: 	jmp	.Ltmp160 # Offset: 11112
    00002b6d: 	nopl	(%rax) # Size: 3
.Ltmp159:
    00002b70: 	addl	$0x1, %r15d
    00002b74: 	cmpl	%edi, %r15d
    00002b77: 	jl	.Ltmp160 # Offset: 11127
.Ltmp157:
    00002b7d: 	callq	clock@PLT # Offset: 11133
    00002b82: 	leaq	DATAat0x10c9f(%rip), %rdi
    00002b89: 	pxor	%xmm0, %xmm0
    00002b8d: 	xorl	%r15d, %r15d
    00002b90: 	movq	%rax, end_time(%rip)
    00002b97: 	subq	start_time(%rip), %rax
    00002b9e: 	cvtsi2sd	%rax, %xmm0
    00002ba3: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002bab: 	callq	_Z13record_resultdPKc # Offset: 11179
    00002bb0: 	movl	0x64(%rsp), %edx
    00002bb4: 	movl	$0x1f40, %esi
    00002bb9: 	leaq	data32unsigned(%rip), %rdi
    00002bc0: 	leaq	DATAat0x104d8(%rip), %rcx
    00002bc7: 	callq	_Z14test_variable1Ij29shift_right_repeated_variableIjEEvPT_iS2_PKc # Offset: 11207
    00002bcc: 	callq	clock@PLT # Offset: 11212
    00002bd1: 	movl	iterations(%rip), %edi
    00002bd7: 	movq	init_value(%rip), %rsi
    00002bde: 	movq	%rax, start_time(%rip)
    00002be5: 	movd	(%rsp), %xmm0
    00002bea: 	testl	%edi, %edi
    00002bec: 	jle	.Ltmp161 # Offset: 11244
    00002bf2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp164:
    00002bf8: 	leaq	data32unsigned(%rip), %rax
    00002bff: 	pxor	%xmm2, %xmm2
    00002c03: 	nopl	(%rax,%rax) # Size: 5
.Ltmp162:
    00002c08: 	movdqa	(%rax), %xmm1
    00002c0c: 	addq	$0x10, %rax
    00002c10: 	pslld	%xmm0, %xmm1
    00002c14: 	paddd	%xmm1, %xmm2
    00002c18: 	cmpq	%rax, %r12
    00002c1b: 	jne	.Ltmp162 # Offset: 11291
    00002c1d: 	movdqa	%xmm2, %xmm1
    00002c21: 	movzbl	(%rsp), %ecx
    00002c25: 	movl	%esi, %edx
    00002c27: 	psrldq	$0x8, %xmm1
    00002c2c: 	paddd	%xmm1, %xmm2
    00002c30: 	shll	%cl, %edx
    00002c32: 	movdqa	%xmm2, %xmm1
    00002c36: 	imull	$0x1f40, %edx, %edx
    00002c3c: 	psrldq	$0x4, %xmm1
    00002c41: 	paddd	%xmm1, %xmm2
    00002c45: 	movd	%xmm2, %eax
    00002c49: 	cmpl	%eax, %edx
    00002c4b: 	je	.Ltmp163 # Offset: 11339
    00002c4d: 	movl	current_test(%rip), %edx
    00002c53: 	movl	$0x1, %edi
    00002c58: 	leaq	DATAat0x10f44(%rip), %rsi
    00002c5f: 	xorl	%eax, %eax
    00002c61: 	movq	%xmm0, 0x18(%rsp)
    00002c67: 	addl	$0x1, %r15d
    00002c6b: 	callq	__printf_chk@PLT # Offset: 11371
    00002c70: 	movl	iterations(%rip), %edi
    00002c76: 	cmpl	%edi, %r15d
    00002c79: 	jge	.Ltmp161 # Offset: 11385
    00002c7b: 	movq	init_value(%rip), %rsi
    00002c82: 	movq	0x18(%rsp), %xmm0
    00002c88: 	jmp	.Ltmp164 # Offset: 11400
    00002c8d: 	nopl	(%rax) # Size: 3
.Ltmp163:
    00002c90: 	addl	$0x1, %r15d
    00002c94: 	cmpl	%edi, %r15d
    00002c97: 	jl	.Ltmp164 # Offset: 11415
.Ltmp161:
    00002c9d: 	callq	clock@PLT # Offset: 11421
    00002ca2: 	leaq	DATAat0x10cbd(%rip), %rdi
    00002ca9: 	pxor	%xmm0, %xmm0
    00002cad: 	movq	%rax, end_time(%rip)
    00002cb4: 	subq	start_time(%rip), %rax
    00002cbb: 	cvtsi2sd	%rax, %xmm0
    00002cc0: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002cc8: 	callq	_Z13record_resultdPKc # Offset: 11464
    00002ccd: 	movl	0x64(%rsp), %edx
    00002cd1: 	leaq	DATAat0x10500(%rip), %rcx
    00002cd8: 	movl	$0x1f40, %esi
    00002cdd: 	leaq	data32unsigned(%rip), %rdi
    00002ce4: 	callq	_Z14test_variable1Ij28shift_left_repeated_variableIjEEvPT_iS2_PKc # Offset: 11492
    00002ce9: 	movd	init_value(%rip), %xmm7
    00002cf1: 	leaq	data32(%rip), %rax
    00002cf8: 	pshufd	$0x0, %xmm7, %xmm0
    00002cfd: 	nopl	(%rax) # Size: 3
.Ltmp165:
    00002d00: 	movaps	%xmm0, (%rax)
    00002d03: 	leaq	data32unsigned(%rip), %rdi
    00002d0a: 	addq	$0x10, %rax
    00002d0e: 	cmpq	%rax, %rdi
    00002d11: 	jne	.Ltmp165 # Offset: 11537
    00002d13: 	callq	clock@PLT # Offset: 11539
    00002d18: 	movl	iterations(%rip), %edi
    00002d1e: 	movq	%rax, start_time(%rip)
    00002d25: 	testl	%edi, %edi
    00002d27: 	jle	.Ltmp166 # Offset: 11559
    00002d2d: 	movslq	(%rsp), %rax
    00002d31: 	movq	init_value(%rip), %rsi
    00002d38: 	xorl	%r15d, %r15d
    00002d3b: 	movq	%rax, %xmm2
.Ltmp169:
    00002d40: 	leaq	data32(%rip), %rax
    00002d47: 	pxor	%xmm1, %xmm1
    00002d4b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp167:
    00002d50: 	movdqa	(%rax), %xmm0
    00002d54: 	leaq	data32unsigned(%rip), %rcx
    00002d5b: 	addq	$0x10, %rax
    00002d5f: 	psrad	%xmm2, %xmm0
    00002d63: 	paddd	%xmm0, %xmm1
    00002d67: 	cmpq	%rcx, %rax
    00002d6a: 	jne	.Ltmp167 # Offset: 11626
    00002d6c: 	movdqa	%xmm1, %xmm0
    00002d70: 	movzbl	(%rsp), %ecx
    00002d74: 	movl	%esi, %edx
    00002d76: 	psrldq	$0x8, %xmm0
    00002d7b: 	paddd	%xmm0, %xmm1
    00002d7f: 	sarl	%cl, %edx
    00002d81: 	movdqa	%xmm1, %xmm0
    00002d85: 	imull	$0x1f40, %edx, %edx
    00002d8b: 	psrldq	$0x4, %xmm0
    00002d90: 	paddd	%xmm0, %xmm1
    00002d94: 	movd	%xmm1, %eax
    00002d98: 	cmpl	%eax, %edx
    00002d9a: 	je	.Ltmp168 # Offset: 11674
    00002d9c: 	movl	current_test(%rip), %edx
    00002da2: 	movl	$0x1, %edi
    00002da7: 	leaq	DATAat0x10f44(%rip), %rsi
    00002dae: 	xorl	%eax, %eax
    00002db0: 	movq	%xmm2, 0x18(%rsp)
    00002db6: 	addl	$0x1, %r15d
    00002dba: 	callq	__printf_chk@PLT # Offset: 11706
    00002dbf: 	movl	iterations(%rip), %edi
    00002dc5: 	cmpl	%edi, %r15d
    00002dc8: 	jge	.Ltmp166 # Offset: 11720
    00002dca: 	movq	init_value(%rip), %rsi
    00002dd1: 	movq	0x18(%rsp), %xmm2
    00002dd7: 	jmp	.Ltmp169 # Offset: 11735
    00002ddc: 	nopl	(%rax) # Size: 4
.Ltmp168:
    00002de0: 	addl	$0x1, %r15d
    00002de4: 	cmpl	%edi, %r15d
    00002de7: 	jl	.Ltmp169 # Offset: 11751
.Ltmp166:
    00002ded: 	callq	clock@PLT # Offset: 11757
    00002df2: 	leaq	DATAat0x10ca0(%rip), %rdi
    00002df9: 	pxor	%xmm0, %xmm0
    00002dfd: 	movq	%rax, end_time(%rip)
    00002e04: 	subq	start_time(%rip), %rax
    00002e0b: 	cvtsi2sd	%rax, %xmm0
    00002e10: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002e18: 	callq	_Z13record_resultdPKc # Offset: 11800
    00002e1d: 	movl	0x58(%rsp), %edx
    00002e21: 	movl	$0x1f40, %esi
    00002e26: 	leaq	data32(%rip), %rdi
    00002e2d: 	leaq	DATAat0x10528(%rip), %rcx
    00002e34: 	callq	_Z14test_variable1Ii29shift_right_repeated_variableIiEEvPT_iS2_PKc # Offset: 11828
    00002e39: 	callq	clock@PLT # Offset: 11833
    00002e3e: 	movl	iterations(%rip), %edi
    00002e44: 	movq	%rax, start_time(%rip)
    00002e4b: 	testl	%edi, %edi
    00002e4d: 	jle	.Ltmp170 # Offset: 11853
    00002e53: 	movslq	(%rsp), %rax
    00002e57: 	movq	init_value(%rip), %rsi
    00002e5e: 	xorl	%r15d, %r15d
    00002e61: 	movq	%rax, %xmm2
    00002e66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp173:
    00002e70: 	leaq	data32(%rip), %rax
    00002e77: 	pxor	%xmm1, %xmm1
    00002e7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp171:
    00002e80: 	movdqa	(%rax), %xmm0
    00002e84: 	leaq	data32unsigned(%rip), %rcx
    00002e8b: 	addq	$0x10, %rax
    00002e8f: 	pslld	%xmm2, %xmm0
    00002e93: 	paddd	%xmm0, %xmm1
    00002e97: 	cmpq	%rcx, %rax
    00002e9a: 	jne	.Ltmp171 # Offset: 11930
    00002e9c: 	movdqa	%xmm1, %xmm0
    00002ea0: 	movzbl	(%rsp), %ecx
    00002ea4: 	movl	%esi, %edx
    00002ea6: 	psrldq	$0x8, %xmm0
    00002eab: 	paddd	%xmm0, %xmm1
    00002eaf: 	shll	%cl, %edx
    00002eb1: 	movdqa	%xmm1, %xmm0
    00002eb5: 	imull	$0x1f40, %edx, %edx
    00002ebb: 	psrldq	$0x4, %xmm0
    00002ec0: 	paddd	%xmm0, %xmm1
    00002ec4: 	movd	%xmm1, %eax
    00002ec8: 	cmpl	%eax, %edx
    00002eca: 	je	.Ltmp172 # Offset: 11978
    00002ecc: 	movl	current_test(%rip), %edx
    00002ed2: 	movl	$0x1, %edi
    00002ed7: 	leaq	DATAat0x10f44(%rip), %rsi
    00002ede: 	xorl	%eax, %eax
    00002ee0: 	movq	%xmm2, 0x18(%rsp)
    00002ee6: 	addl	$0x1, %r15d
    00002eea: 	callq	__printf_chk@PLT # Offset: 12010
    00002eef: 	movl	iterations(%rip), %edi
    00002ef5: 	cmpl	%edi, %r15d
    00002ef8: 	jge	.Ltmp170 # Offset: 12024
    00002efa: 	movq	init_value(%rip), %rsi
    00002f01: 	movq	0x18(%rsp), %xmm2
    00002f07: 	jmp	.Ltmp173 # Offset: 12039
    00002f0c: 	nopl	(%rax) # Size: 4
.Ltmp172:
    00002f10: 	addl	$0x1, %r15d
    00002f14: 	cmpl	%edi, %r15d
    00002f17: 	jl	.Ltmp173 # Offset: 12055
.Ltmp170:
    00002f1d: 	callq	clock@PLT # Offset: 12061
    00002f22: 	leaq	DATAat0x10cbe(%rip), %rdi
    00002f29: 	pxor	%xmm0, %xmm0
    00002f2d: 	movq	%rax, end_time(%rip)
    00002f34: 	subq	start_time(%rip), %rax
    00002f3b: 	cvtsi2sd	%rax, %xmm0
    00002f40: 	divsd	DATAat0x10f68(%rip), %xmm0
    00002f48: 	callq	_Z13record_resultdPKc # Offset: 12104
    00002f4d: 	movl	0x58(%rsp), %edx
    00002f51: 	leaq	DATAat0x10550(%rip), %rcx
    00002f58: 	movl	$0x1f40, %esi
    00002f5d: 	leaq	data32(%rip), %rdi
    00002f64: 	callq	_Z14test_variable1Ii28shift_left_repeated_variableIiEEvPT_iS2_PKc # Offset: 12132
    00002f69: 	leaq	data64unsigned(%rip), %rax
    00002f70: 	movq	init_value(%rip), %xmm0
    00002f78: 	punpcklqdq	%xmm0, %xmm0
    00002f7c: 	nopl	(%rax) # Size: 4
.Ltmp174:
    00002f80: 	movaps	%xmm0, (%rax)
    00002f83: 	addq	$0x10, %rax
    00002f87: 	cmpq	%rbp, %rax
    00002f8a: 	jne	.Ltmp174 # Offset: 12170
    00002f8c: 	callq	clock@PLT # Offset: 12172
    00002f91: 	movl	iterations(%rip), %edi
    00002f97: 	movd	(%rsp), %xmm0
    00002f9c: 	xorl	%r15d, %r15d
    00002f9f: 	movq	%rax, start_time(%rip)
    00002fa6: 	movq	init_value(%rip), %rsi
    00002fad: 	testl	%edi, %edi
    00002faf: 	jle	.Ltmp175 # Offset: 12207
    00002fb5: 	nopl	(%rax) # Size: 3
.Ltmp178:
    00002fb8: 	leaq	data64unsigned(%rip), %rax
    00002fbf: 	pxor	%xmm2, %xmm2
    00002fc3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp176:
    00002fc8: 	movdqa	(%rax), %xmm1
    00002fcc: 	addq	$0x10, %rax
    00002fd0: 	psrlq	%xmm0, %xmm1
    00002fd4: 	paddq	%xmm1, %xmm2
    00002fd8: 	cmpq	%rbp, %rax
    00002fdb: 	jne	.Ltmp176 # Offset: 12251
    00002fdd: 	movzbl	(%rsp), %ecx
    00002fe1: 	movq	%rsi, %rdx
    00002fe4: 	movdqa	%xmm2, %xmm1
    00002fe8: 	psrldq	$0x8, %xmm1
    00002fed: 	shrq	%cl, %rdx
    00002ff0: 	paddq	%xmm1, %xmm2
    00002ff4: 	imulq	$0x1f40, %rdx, %rdx
    00002ffb: 	movq	%xmm2, %rax
    00003000: 	cmpq	%rax, %rdx
    00003003: 	je	.Ltmp177 # Offset: 12291
    00003005: 	movl	current_test(%rip), %edx
    0000300b: 	movl	$0x1, %edi
    00003010: 	leaq	DATAat0x10f44(%rip), %rsi
    00003017: 	xorl	%eax, %eax
    00003019: 	movq	%xmm0, 0x18(%rsp)
    0000301f: 	addl	$0x1, %r15d
    00003023: 	callq	__printf_chk@PLT # Offset: 12323
    00003028: 	movl	iterations(%rip), %edi
    0000302e: 	cmpl	%edi, %r15d
    00003031: 	jge	.Ltmp175 # Offset: 12337
    00003033: 	movq	init_value(%rip), %rsi
    0000303a: 	movq	0x18(%rsp), %xmm0
    00003040: 	jmp	.Ltmp178 # Offset: 12352
    00003045: 	nopl	(%rax) # Size: 3
.Ltmp177:
    00003048: 	addl	$0x1, %r15d
    0000304c: 	cmpl	%edi, %r15d
    0000304f: 	jl	.Ltmp178 # Offset: 12367
.Ltmp175:
    00003055: 	callq	clock@PLT # Offset: 12373
    0000305a: 	leaq	DATAat0x10cda(%rip), %rdi
    00003061: 	pxor	%xmm0, %xmm0
    00003065: 	xorl	%r15d, %r15d
    00003068: 	movq	%rax, end_time(%rip)
    0000306f: 	subq	start_time(%rip), %rax
    00003076: 	cvtsi2sd	%rax, %xmm0
    0000307b: 	divsd	DATAat0x10f68(%rip), %xmm0
    00003083: 	callq	_Z13record_resultdPKc # Offset: 12419
    00003088: 	movq	0x68(%rsp), %rdx
    0000308d: 	movl	$0x1f40, %esi
    00003092: 	leaq	data64unsigned(%rip), %rdi
    00003099: 	leaq	DATAat0x10578(%rip), %rcx
    000030a0: 	callq	_Z14test_variable1Im29shift_right_repeated_variableImEEvPT_iS2_PKc # Offset: 12448
    000030a5: 	callq	clock@PLT # Offset: 12453
    000030aa: 	movl	iterations(%rip), %edi
    000030b0: 	movq	init_value(%rip), %rsi
    000030b7: 	movq	%rax, start_time(%rip)
    000030be: 	movd	(%rsp), %xmm0
    000030c3: 	testl	%edi, %edi
    000030c5: 	jle	.Ltmp179 # Offset: 12485
    000030cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp182:
    000030d0: 	leaq	data64unsigned(%rip), %rax
    000030d7: 	pxor	%xmm2, %xmm2
    000030db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp180:
    000030e0: 	movdqa	(%rax), %xmm1
    000030e4: 	addq	$0x10, %rax
    000030e8: 	psllq	%xmm0, %xmm1
    000030ec: 	paddq	%xmm1, %xmm2
    000030f0: 	cmpq	%rbp, %rax
    000030f3: 	jne	.Ltmp180 # Offset: 12531
    000030f5: 	movzbl	(%rsp), %ecx
    000030f9: 	movq	%rsi, %rdx
    000030fc: 	movdqa	%xmm2, %xmm1
    00003100: 	psrldq	$0x8, %xmm1
    00003105: 	shlq	%cl, %rdx
    00003108: 	paddq	%xmm1, %xmm2
    0000310c: 	imulq	$0x1f40, %rdx, %rdx
    00003113: 	movq	%xmm2, %rax
    00003118: 	cmpq	%rax, %rdx
    0000311b: 	je	.Ltmp181 # Offset: 12571
    0000311d: 	movl	current_test(%rip), %edx
    00003123: 	movl	$0x1, %edi
    00003128: 	leaq	DATAat0x10f44(%rip), %rsi
    0000312f: 	xorl	%eax, %eax
    00003131: 	movq	%xmm0, 0x18(%rsp)
    00003137: 	addl	$0x1, %r15d
    0000313b: 	callq	__printf_chk@PLT # Offset: 12603
    00003140: 	movl	iterations(%rip), %edi
    00003146: 	cmpl	%edi, %r15d
    00003149: 	jge	.Ltmp179 # Offset: 12617
    0000314b: 	movq	init_value(%rip), %rsi
    00003152: 	movq	0x18(%rsp), %xmm0
    00003158: 	jmp	.Ltmp182 # Offset: 12632
    0000315d: 	nopl	(%rax) # Size: 3
.Ltmp181:
    00003160: 	addl	$0x1, %r15d
    00003164: 	cmpl	%edi, %r15d
    00003167: 	jl	.Ltmp182 # Offset: 12647
.Ltmp179:
    0000316d: 	callq	clock@PLT # Offset: 12653
    00003172: 	leaq	DATAat0x10cf8(%rip), %rdi
    00003179: 	pxor	%xmm0, %xmm0
    0000317d: 	movq	%rax, end_time(%rip)
    00003184: 	subq	start_time(%rip), %rax
    0000318b: 	cvtsi2sd	%rax, %xmm0
    00003190: 	divsd	DATAat0x10f68(%rip), %xmm0
    00003198: 	callq	_Z13record_resultdPKc # Offset: 12696
    0000319d: 	movq	0x68(%rsp), %rdx
    000031a2: 	leaq	DATAat0x105a0(%rip), %rcx
    000031a9: 	movl	$0x1f40, %esi
    000031ae: 	leaq	data64unsigned(%rip), %rdi
    000031b5: 	callq	_Z14test_variable1Im28shift_left_repeated_variableImEEvPT_iS2_PKc # Offset: 12725
    000031ba: 	leaq	data64(%rip), %rax
    000031c1: 	movq	init_value(%rip), %xmm0
    000031c9: 	punpcklqdq	%xmm0, %xmm0
    000031cd: 	nopl	(%rax) # Size: 3
.Ltmp183:
    000031d0: 	movaps	%xmm0, (%rax)
    000031d3: 	addq	$0x10, %rax
    000031d7: 	cmpq	%rax, %r13
    000031da: 	jne	.Ltmp183 # Offset: 12762
    000031dc: 	callq	clock@PLT # Offset: 12764
    000031e1: 	movl	iterations(%rip), %r9d
    000031e8: 	movl	(%rsp), %ecx
    000031eb: 	xorl	%r15d, %r15d
    000031ee: 	movq	%rax, start_time(%rip)
    000031f5: 	movq	init_value(%rip), %rsi
    000031fc: 	testl	%r9d, %r9d
    000031ff: 	jle	.Ltmp184 # Offset: 12799
    00003205: 	nopl	(%rax) # Size: 3
.Ltmp187:
    00003208: 	leaq	data64(%rip), %rax
    0000320f: 	xorl	%edi, %edi
    00003211: 	nopl	(%rax) # Size: 7
.Ltmp185:
    00003218: 	movq	(%rax), %rdx
    0000321b: 	addq	$0x8, %rax
    0000321f: 	sarq	%cl, %rdx
    00003222: 	addq	%rdx, %rdi
    00003225: 	cmpq	%r13, %rax
    00003228: 	jne	.Ltmp185 # Offset: 12840
    0000322a: 	movq	%rsi, %rax
    0000322d: 	sarq	%cl, %rax
    00003230: 	imulq	$0x1f40, %rax, %rax
    00003237: 	cmpq	%rax, %rdi
    0000323a: 	je	.Ltmp186 # Offset: 12858
    0000323c: 	movl	current_test(%rip), %edx
    00003242: 	xorl	%eax, %eax
    00003244: 	movl	%ecx, 0x18(%rsp)
    00003248: 	addl	$0x1, %r15d
    0000324c: 	leaq	DATAat0x10f44(%rip), %rsi
    00003253: 	movl	$0x1, %edi
    00003258: 	callq	__printf_chk@PLT # Offset: 12888
    0000325d: 	movl	iterations(%rip), %r9d
    00003264: 	cmpl	%r9d, %r15d
    00003267: 	jge	.Ltmp184 # Offset: 12903
    00003269: 	movq	init_value(%rip), %rsi
    00003270: 	movl	0x18(%rsp), %ecx
    00003274: 	jmp	.Ltmp187 # Offset: 12916
    00003276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp186:
    00003280: 	addl	$0x1, %r15d
    00003284: 	cmpl	%r9d, %r15d
    00003287: 	jl	.Ltmp187 # Offset: 12935
.Ltmp184:
    0000328d: 	callq	clock@PLT # Offset: 12941
    00003292: 	leaq	DATAat0x10cdb(%rip), %rdi
    00003299: 	pxor	%xmm0, %xmm0
    0000329d: 	movq	%rax, end_time(%rip)
    000032a4: 	subq	start_time(%rip), %rax
    000032ab: 	cvtsi2sd	%rax, %xmm0
    000032b0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000032b8: 	callq	_Z13record_resultdPKc # Offset: 12984
    000032bd: 	movq	0x70(%rsp), %rdx
    000032c2: 	movl	$0x1f40, %esi
    000032c7: 	leaq	data64(%rip), %rdi
    000032ce: 	leaq	DATAat0x105c8(%rip), %rcx
    000032d5: 	callq	_Z14test_variable1Il29shift_right_repeated_variableIlEEvPT_iS2_PKc # Offset: 13013
    000032da: 	callq	clock@PLT # Offset: 13018
    000032df: 	movl	iterations(%rip), %edi
    000032e5: 	movq	%rax, start_time(%rip)
    000032ec: 	testl	%edi, %edi
    000032ee: 	jle	.Ltmp188 # Offset: 13038
    000032f4: 	movslq	(%rsp), %rax
    000032f8: 	movq	init_value(%rip), %rsi
    000032ff: 	xorl	%r15d, %r15d
    00003302: 	movq	%rax, %xmm2
    00003307: 	nopw	(%rax,%rax) # Size: 9
.Ltmp191:
    00003310: 	leaq	data64(%rip), %rax
    00003317: 	pxor	%xmm1, %xmm1
    0000331b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp189:
    00003320: 	movdqa	(%rax), %xmm0
    00003324: 	addq	$0x10, %rax
    00003328: 	psllq	%xmm2, %xmm0
    0000332c: 	paddq	%xmm0, %xmm1
    00003330: 	cmpq	%rax, %r13
    00003333: 	jne	.Ltmp189 # Offset: 13107
    00003335: 	movzbl	(%rsp), %ecx
    00003339: 	movq	%rsi, %rdx
    0000333c: 	movdqa	%xmm1, %xmm0
    00003340: 	psrldq	$0x8, %xmm0
    00003345: 	shlq	%cl, %rdx
    00003348: 	paddq	%xmm0, %xmm1
    0000334c: 	imulq	$0x1f40, %rdx, %rdx
    00003353: 	movq	%xmm1, %rax
    00003358: 	cmpq	%rax, %rdx
    0000335b: 	je	.Ltmp190 # Offset: 13147
    0000335d: 	movl	current_test(%rip), %edx
    00003363: 	movl	$0x1, %edi
    00003368: 	leaq	DATAat0x10f44(%rip), %rsi
    0000336f: 	xorl	%eax, %eax
    00003371: 	movq	%xmm2, 0x18(%rsp)
    00003377: 	addl	$0x1, %r15d
    0000337b: 	callq	__printf_chk@PLT # Offset: 13179
    00003380: 	movl	iterations(%rip), %edi
    00003386: 	cmpl	%edi, %r15d
    00003389: 	jge	.Ltmp188 # Offset: 13193
    0000338b: 	movq	init_value(%rip), %rsi
    00003392: 	movq	0x18(%rsp), %xmm2
    00003398: 	jmp	.Ltmp191 # Offset: 13208
    0000339d: 	nopl	(%rax) # Size: 3
.Ltmp190:
    000033a0: 	addl	$0x1, %r15d
    000033a4: 	cmpl	%edi, %r15d
    000033a7: 	jl	.Ltmp191 # Offset: 13223
.Ltmp188:
    000033ad: 	callq	clock@PLT # Offset: 13229
    000033b2: 	leaq	DATAat0x10cf9(%rip), %rdi
    000033b9: 	pxor	%xmm0, %xmm0
    000033bd: 	movq	%rax, end_time(%rip)
    000033c4: 	subq	start_time(%rip), %rax
    000033cb: 	cvtsi2sd	%rax, %xmm0
    000033d0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000033d8: 	callq	_Z13record_resultdPKc # Offset: 13272
    000033dd: 	movq	0x70(%rsp), %rdx
    000033e2: 	leaq	DATAat0x105f0(%rip), %rcx
    000033e9: 	movl	$0x1f40, %esi
    000033ee: 	leaq	data64(%rip), %rdi
    000033f5: 	callq	_Z14test_variable1Il28shift_left_repeated_variableIlEEvPT_iS2_PKc # Offset: 13301
    000033fa: 	movl	iterations(%rip), %edx
    00003400: 	xorl	%r8d, %r8d
    00003403: 	xorl	%ecx, %ecx
    00003405: 	movl	$0x1f40, %esi
    0000340a: 	leaq	DATAat0x10d15(%rip), %rdi
    00003411: 	callq	_Z9summarizePKciiii # Offset: 13329
    00003416: 	movzbl	init_value(%rip), %eax
    0000341d: 	movabsq	$0x101010101010101, %rdx
    00003427: 	movl	$0x3e8, %ecx
    0000342c: 	leaq	data8unsigned(%rip), %rdi
    00003433: 	imulq	%rdx, %rax
    00003437: 	rep		stosq	%rax, %es:(%rdi)
    0000343a: 	callq	clock@PLT # Offset: 13370
    0000343f: 	movl	iterations(%rip), %edx
    00003445: 	movq	%rax, start_time(%rip)
    0000344c: 	testl	%edx, %edx
    0000344e: 	jle	.Ltmp192 # Offset: 13390
    00003450: 	xorl	%ecx, %ecx
    00003452: 	movdqa	DATAat0x11010(%rip), %xmm0
    0000345a: 	leaq	data16(%rip), %r15
    00003461: 	leaq	DATAat0x10f44(%rip), %rsi
    00003468: 	nopl	(%rax,%rax) # Size: 8
.Ltmp195:
    00003470: 	leaq	data8unsigned(%rip), %rax
    00003477: 	pxor	%xmm1, %xmm1
    0000347b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp193:
    00003480: 	movdqa	(%rax), %xmm2
    00003484: 	addq	$0x10, %rax
    00003488: 	pand	%xmm0, %xmm2
    0000348c: 	paddb	%xmm2, %xmm1
    00003490: 	cmpq	%r15, %rax
    00003493: 	jne	.Ltmp193 # Offset: 13459
    00003495: 	movdqa	%xmm1, %xmm2
    00003499: 	psrldq	$0x8, %xmm2
    0000349e: 	paddb	%xmm2, %xmm1
    000034a2: 	pxor	%xmm2, %xmm2
    000034a6: 	psadbw	%xmm2, %xmm1
    000034aa: 	movd	%xmm1, %eax
    000034ae: 	testb	%al, %al
    000034b0: 	jne	.Ltmp194 # Offset: 13488
    000034b6: 	addl	$0x1, %ecx
    000034b9: 	cmpl	%edx, %ecx
    000034bb: 	jl	.Ltmp195 # Offset: 13499
.Ltmp192:
    000034bd: 	callq	clock@PLT # Offset: 13501
    000034c2: 	leaq	DATAat0x10d2e(%rip), %rdi
    000034c9: 	pxor	%xmm0, %xmm0
    000034cd: 	movq	%rax, end_time(%rip)
    000034d4: 	subq	start_time(%rip), %rax
    000034db: 	cvtsi2sd	%rax, %xmm0
    000034e0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000034e8: 	callq	_Z13record_resultdPKc # Offset: 13544
    000034ed: 	callq	clock@PLT # Offset: 13549
    000034f2: 	movl	iterations(%rip), %edx
    000034f8: 	movq	%rax, start_time(%rip)
    000034ff: 	testl	%edx, %edx
    00003501: 	jle	.Ltmp196 # Offset: 13569
    00003503: 	xorl	%ecx, %ecx
    00003505: 	movdqa	DATAat0x11020(%rip), %xmm2
    0000350d: 	leaq	data16(%rip), %r15
    00003514: 	leaq	DATAat0x10f44(%rip), %rsi
    0000351b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp199:
    00003520: 	leaq	data8unsigned(%rip), %rax
    00003527: 	pxor	%xmm1, %xmm1
    0000352b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp197:
    00003530: 	movdqa	(%rax), %xmm0
    00003534: 	addq	$0x10, %rax
    00003538: 	psrlw	$0x4, %xmm0
    0000353d: 	pand	%xmm2, %xmm0
    00003541: 	paddb	%xmm0, %xmm0
    00003545: 	paddb	%xmm0, %xmm0
    00003549: 	paddb	%xmm0, %xmm0
    0000354d: 	paddb	%xmm0, %xmm0
    00003551: 	paddb	%xmm0, %xmm1
    00003555: 	cmpq	%r15, %rax
    00003558: 	jne	.Ltmp197 # Offset: 13656
    0000355a: 	movdqa	%xmm1, %xmm0
    0000355e: 	psrldq	$0x8, %xmm0
    00003563: 	paddb	%xmm0, %xmm1
    00003567: 	pxor	%xmm0, %xmm0
    0000356b: 	psadbw	%xmm0, %xmm1
    0000356f: 	movd	%xmm1, %eax
    00003573: 	testb	%al, %al
    00003575: 	jne	.Ltmp198 # Offset: 13685
    0000357b: 	addl	$0x1, %ecx
    0000357e: 	cmpl	%edx, %ecx
    00003580: 	jl	.Ltmp199 # Offset: 13696
.Ltmp196:
    00003582: 	callq	clock@PLT # Offset: 13698
    00003587: 	leaq	DATAat0x10618(%rip), %rdi
    0000358e: 	pxor	%xmm0, %xmm0
    00003592: 	movq	%rax, end_time(%rip)
    00003599: 	subq	start_time(%rip), %rax
    000035a0: 	cvtsi2sd	%rax, %xmm0
    000035a5: 	divsd	DATAat0x10f68(%rip), %xmm0
    000035ad: 	callq	_Z13record_resultdPKc # Offset: 13741
    000035b2: 	movzbl	init_value(%rip), %eax
    000035b9: 	movabsq	$0x101010101010101, %rdx
    000035c3: 	movl	$0x3e8, %ecx
    000035c8: 	leaq	data8(%rip), %rdi
    000035cf: 	imulq	%rdx, %rax
    000035d3: 	rep		stosq	%rax, %es:(%rdi)
    000035d6: 	callq	clock@PLT # Offset: 13782
    000035db: 	movl	iterations(%rip), %edx
    000035e1: 	movq	%rax, start_time(%rip)
    000035e8: 	testl	%edx, %edx
    000035ea: 	jle	.Ltmp200 # Offset: 13802
    000035ec: 	xorl	%ecx, %ecx
    000035ee: 	movdqa	DATAat0x11010(%rip), %xmm0
    000035f6: 	leaq	data8unsigned(%rip), %r15
    000035fd: 	leaq	DATAat0x10f44(%rip), %rsi
    00003604: 	nopl	(%rax) # Size: 4
.Ltmp203:
    00003608: 	leaq	data8(%rip), %rax
    0000360f: 	pxor	%xmm1, %xmm1
    00003613: 	nopl	(%rax,%rax) # Size: 5
.Ltmp201:
    00003618: 	movdqa	(%rax), %xmm2
    0000361c: 	addq	$0x10, %rax
    00003620: 	pand	%xmm0, %xmm2
    00003624: 	paddb	%xmm2, %xmm1
    00003628: 	cmpq	%r15, %rax
    0000362b: 	jne	.Ltmp201 # Offset: 13867
    0000362d: 	movdqa	%xmm1, %xmm2
    00003631: 	psrldq	$0x8, %xmm2
    00003636: 	paddb	%xmm2, %xmm1
    0000363a: 	pxor	%xmm2, %xmm2
    0000363e: 	psadbw	%xmm2, %xmm1
    00003642: 	movd	%xmm1, %eax
    00003646: 	testb	%al, %al
    00003648: 	jne	.Ltmp202 # Offset: 13896
    0000364e: 	addl	$0x1, %ecx
    00003651: 	cmpl	%edx, %ecx
    00003653: 	jl	.Ltmp203 # Offset: 13907
.Ltmp200:
    00003655: 	callq	clock@PLT # Offset: 13909
    0000365a: 	leaq	DATAat0x10d2f(%rip), %rdi
    00003661: 	pxor	%xmm0, %xmm0
    00003665: 	movq	%rax, end_time(%rip)
    0000366c: 	subq	start_time(%rip), %rax
    00003673: 	cvtsi2sd	%rax, %xmm0
    00003678: 	divsd	DATAat0x10f68(%rip), %xmm0
    00003680: 	callq	_Z13record_resultdPKc # Offset: 13952
    00003685: 	callq	clock@PLT # Offset: 13957
    0000368a: 	movl	iterations(%rip), %edx
    00003690: 	movq	%rax, start_time(%rip)
    00003697: 	testl	%edx, %edx
    00003699: 	jle	.Ltmp204 # Offset: 13977
    0000369f: 	xorl	%ecx, %ecx
    000036a1: 	movdqa	DATAat0x11020(%rip), %xmm2
    000036a9: 	movdqa	DATAat0x11030(%rip), %xmm3
    000036b1: 	leaq	data8unsigned(%rip), %r15
    000036b8: 	leaq	DATAat0x10f44(%rip), %rsi
    000036bf: 	nop # Size: 1
.Ltmp207:
    000036c0: 	leaq	data8(%rip), %rax
    000036c7: 	pxor	%xmm1, %xmm1
    000036cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp205:
    000036d0: 	movdqa	(%rax), %xmm0
    000036d4: 	addq	$0x10, %rax
    000036d8: 	psraw	$0x4, %xmm0
    000036dd: 	pand	%xmm2, %xmm0
    000036e1: 	pxor	%xmm3, %xmm0
    000036e5: 	psubb	%xmm3, %xmm0
    000036e9: 	paddb	%xmm0, %xmm0
    000036ed: 	paddb	%xmm0, %xmm0
    000036f1: 	paddb	%xmm0, %xmm0
    000036f5: 	paddb	%xmm0, %xmm0
    000036f9: 	paddb	%xmm0, %xmm1
    000036fd: 	cmpq	%rax, %r15
    00003700: 	jne	.Ltmp205 # Offset: 14080
    00003702: 	movdqa	%xmm1, %xmm0
    00003706: 	psrldq	$0x8, %xmm0
    0000370b: 	paddb	%xmm0, %xmm1
    0000370f: 	pxor	%xmm0, %xmm0
    00003713: 	psadbw	%xmm0, %xmm1
    00003717: 	movd	%xmm1, %eax
    0000371b: 	testb	%al, %al
    0000371d: 	jne	.Ltmp206 # Offset: 14109
    00003723: 	addl	$0x1, %ecx
    00003726: 	cmpl	%edx, %ecx
    00003728: 	jl	.Ltmp207 # Offset: 14120
.Ltmp204:
    0000372a: 	callq	clock@PLT # Offset: 14122
    0000372f: 	pxor	%xmm0, %xmm0
    00003733: 	leaq	DATAat0x10640(%rip), %rdi
    0000373a: 	movq	%rax, end_time(%rip)
    00003741: 	subq	start_time(%rip), %rax
    00003748: 	cvtsi2sd	%rax, %xmm0
    0000374d: 	divsd	DATAat0x10f68(%rip), %xmm0
    00003755: 	callq	_Z13record_resultdPKc # Offset: 14165
    0000375a: 	movd	init_value(%rip), %xmm0
    00003762: 	leaq	data16unsigned(%rip), %rax
    00003769: 	punpcklwd	%xmm0, %xmm0
    0000376d: 	pshufd	$0x0, %xmm0, %xmm0
    00003772: 	nopw	(%rax,%rax) # Size: 6
.Ltmp208:
    00003778: 	movaps	%xmm0, (%rax)
    0000377b: 	addq	$0x10, %rax
    0000377f: 	cmpq	%rbx, %rax
    00003782: 	jne	.Ltmp208 # Offset: 14210
    00003784: 	leaq	DATAat0x10d48(%rip), %rdx
    0000378b: 	movl	$0x1f40, %esi
    00003790: 	leaq	data16unsigned(%rip), %rdi
    00003797: 	callq	_Z13test_constantIt17mask_low_constantItEEvPT_iPKc # Offset: 14231
    0000379c: 	leaq	DATAat0x10668(%rip), %rdx
    000037a3: 	movl	$0x1f40, %esi
    000037a8: 	leaq	data16unsigned(%rip), %rdi
    000037af: 	callq	_Z13test_constantIt26mask_low_by_shift_constantItEEvPT_iPKc # Offset: 14255
    000037b4: 	movd	init_value(%rip), %xmm0
    000037bc: 	leaq	data16(%rip), %rax
    000037c3: 	punpcklwd	%xmm0, %xmm0
    000037c7: 	pshufd	$0x0, %xmm0, %xmm0
    000037cc: 	nopl	(%rax) # Size: 4
.Ltmp209:
    000037d0: 	movaps	%xmm0, (%rax)
    000037d3: 	addq	$0x10, %rax
    000037d7: 	cmpq	%r14, %rax
    000037da: 	jne	.Ltmp209 # Offset: 14298
    000037dc: 	leaq	DATAat0x10d49(%rip), %rdx
    000037e3: 	movl	$0x1f40, %esi
    000037e8: 	leaq	data16(%rip), %rdi
    000037ef: 	callq	_Z13test_constantIs17mask_low_constantIsEEvPT_iPKc # Offset: 14319
    000037f4: 	leaq	DATAat0x10690(%rip), %rdx
    000037fb: 	movl	$0x1f40, %esi
    00003800: 	leaq	data16(%rip), %rdi
    00003807: 	callq	_Z13test_constantIs26mask_low_by_shift_constantIsEEvPT_iPKc # Offset: 14343
    0000380c: 	movd	init_value(%rip), %xmm7
    00003814: 	leaq	data32unsigned(%rip), %rax
    0000381b: 	pshufd	$0x0, %xmm7, %xmm0
.Ltmp210:
    00003820: 	movaps	%xmm0, (%rax)
    00003823: 	addq	$0x10, %rax
    00003827: 	cmpq	%r12, %rax
    0000382a: 	jne	.Ltmp210 # Offset: 14378
    0000382c: 	leaq	DATAat0x10d63(%rip), %rdx
    00003833: 	movl	$0x1f40, %esi
    00003838: 	leaq	data32unsigned(%rip), %rdi
    0000383f: 	callq	_Z13test_constantIj17mask_low_constantIjEEvPT_iPKc # Offset: 14399
    00003844: 	leaq	DATAat0x106b8(%rip), %rdx
    0000384b: 	movl	$0x1f40, %esi
    00003850: 	leaq	data32unsigned(%rip), %rdi
    00003857: 	callq	_Z13test_constantIj26mask_low_by_shift_constantIjEEvPT_iPKc # Offset: 14423
    0000385c: 	movd	init_value(%rip), %xmm7
    00003864: 	leaq	data32(%rip), %rax
    0000386b: 	pshufd	$0x0, %xmm7, %xmm0
.Ltmp211:
    00003870: 	movaps	%xmm0, (%rax)
    00003873: 	leaq	data32unsigned(%rip), %rdi
    0000387a: 	addq	$0x10, %rax
    0000387e: 	cmpq	%rdi, %rax
    00003881: 	jne	.Ltmp211 # Offset: 14465
    00003883: 	leaq	DATAat0x10d64(%rip), %rdx
    0000388a: 	movl	$0x1f40, %esi
    0000388f: 	subq	$0x7d00, %rdi
    00003896: 	callq	_Z13test_constantIi17mask_low_constantIiEEvPT_iPKc # Offset: 14486
    0000389b: 	leaq	DATAat0x106e0(%rip), %rdx
    000038a2: 	movl	$0x1f40, %esi
    000038a7: 	leaq	data32(%rip), %rdi
    000038ae: 	callq	_Z13test_constantIi26mask_low_by_shift_constantIiEEvPT_iPKc # Offset: 14510
    000038b3: 	leaq	data64unsigned(%rip), %rax
    000038ba: 	movq	init_value(%rip), %xmm0
    000038c2: 	punpcklqdq	%xmm0, %xmm0
    000038c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp212:
    000038d0: 	movaps	%xmm0, (%rax)
    000038d3: 	addq	$0x10, %rax
    000038d7: 	cmpq	%rbp, %rax
    000038da: 	jne	.Ltmp212 # Offset: 14554
    000038dc: 	leaq	DATAat0x10d7e(%rip), %rdx
    000038e3: 	movl	$0x1f40, %esi
    000038e8: 	leaq	data64unsigned(%rip), %rdi
    000038ef: 	callq	_Z13test_constantIm17mask_low_constantImEEvPT_iPKc # Offset: 14575
    000038f4: 	leaq	DATAat0x10708(%rip), %rdx
    000038fb: 	movl	$0x1f40, %esi
    00003900: 	leaq	data64unsigned(%rip), %rdi
    00003907: 	callq	_Z13test_constantIm26mask_low_by_shift_constantImEEvPT_iPKc # Offset: 14599
    0000390c: 	leaq	data64(%rip), %rax
    00003913: 	movq	init_value(%rip), %xmm0
    0000391b: 	punpcklqdq	%xmm0, %xmm0
    0000391f: 	nop # Size: 1
.Ltmp213:
    00003920: 	movaps	%xmm0, (%rax)
    00003923: 	addq	$0x10, %rax
    00003927: 	cmpq	%r13, %rax
    0000392a: 	jne	.Ltmp213 # Offset: 14634
    0000392c: 	leaq	DATAat0x10d7f(%rip), %rdx
    00003933: 	movl	$0x1f40, %esi
    00003938: 	leaq	data64(%rip), %rdi
    0000393f: 	callq	_Z13test_constantIl17mask_low_constantIlEEvPT_iPKc # Offset: 14655
    00003944: 	leaq	DATAat0x10730(%rip), %rdx
    0000394b: 	movl	$0x1f40, %esi
    00003950: 	leaq	data64(%rip), %rdi
    00003957: 	callq	_Z13test_constantIl26mask_low_by_shift_constantIlEEvPT_iPKc # Offset: 14679
    0000395c: 	movl	iterations(%rip), %edx
    00003962: 	xorl	%r8d, %r8d
    00003965: 	xorl	%ecx, %ecx
    00003967: 	movl	$0x1f40, %esi
    0000396c: 	leaq	DATAat0x10d99(%rip), %rdi
    00003973: 	callq	_Z9summarizePKciiii # Offset: 14707
    00003978: 	movzbl	init_value(%rip), %eax
    0000397f: 	movabsq	$0x101010101010101, %rdx
    00003989: 	movl	$0x3e8, %ecx
    0000398e: 	leaq	data8unsigned(%rip), %rdi
    00003995: 	imulq	%rdx, %rax
    00003999: 	rep		stosq	%rax, %es:(%rdi)
    0000399c: 	callq	clock@PLT # Offset: 14748
    000039a1: 	movl	iterations(%rip), %edx
    000039a7: 	movq	%rax, start_time(%rip)
    000039ae: 	testl	%edx, %edx
    000039b0: 	jle	.Ltmp214 # Offset: 14768
    000039b6: 	movdqa	DATAat0x11010(%rip), %xmm0
    000039be: 	xorl	%ecx, %ecx
    000039c0: 	leaq	data16(%rip), %r15
    000039c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp217:
    000039d0: 	leaq	data8unsigned(%rip), %rax
    000039d7: 	pxor	%xmm1, %xmm1
    000039db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp215:
    000039e0: 	movdqa	(%rax), %xmm2
    000039e4: 	addq	$0x10, %rax
    000039e8: 	pand	%xmm0, %xmm2
    000039ec: 	paddb	%xmm2, %xmm1
    000039f0: 	cmpq	%rax, %r15
    000039f3: 	jne	.Ltmp215 # Offset: 14835
    000039f5: 	movdqa	%xmm1, %xmm2
    000039f9: 	psrldq	$0x8, %xmm2
    000039fe: 	paddb	%xmm2, %xmm1
    00003a02: 	pxor	%xmm2, %xmm2
    00003a06: 	psadbw	%xmm2, %xmm1
    00003a0a: 	movd	%xmm1, %eax
    00003a0e: 	testb	%al, %al
    00003a10: 	je	.Ltmp216 # Offset: 14864
    00003a16: 	movl	current_test(%rip), %edx
    00003a1c: 	xorl	%eax, %eax
    00003a1e: 	movl	$0x1, %edi
    00003a23: 	movl	%ecx, 0x18(%rsp)
    00003a27: 	leaq	DATAat0x10f44(%rip), %rsi
    00003a2e: 	movaps	%xmm0, (%rsp)
    00003a32: 	callq	__printf_chk@PLT # Offset: 14898
    00003a37: 	movl	0x18(%rsp), %ecx
    00003a3b: 	movl	iterations(%rip), %edx
    00003a41: 	movdqa	(%rsp), %xmm0
    00003a46: 	addl	$0x1, %ecx
    00003a49: 	cmpl	%edx, %ecx
    00003a4b: 	jl	.Ltmp217 # Offset: 14923
.Ltmp214:
    00003a4d: 	callq	clock@PLT # Offset: 14925
    00003a52: 	leaq	DATAat0x10db1(%rip), %rdi
    00003a59: 	pxor	%xmm0, %xmm0
    00003a5d: 	movq	%rax, end_time(%rip)
    00003a64: 	subq	start_time(%rip), %rax
    00003a6b: 	cvtsi2sd	%rax, %xmm0
    00003a70: 	divsd	DATAat0x10f68(%rip), %xmm0
    00003a78: 	callq	_Z13record_resultdPKc # Offset: 14968
    00003a7d: 	movl	$0x4, %edx
    00003a82: 	leaq	DATAat0x10758(%rip), %rcx
    00003a89: 	movl	$0x1f40, %esi
    00003a8e: 	leaq	data8unsigned(%rip), %rdi
    00003a95: 	callq	_Z14test_variable1Ih26mask_low_by_shift_variableIhEEvPT_iS2_PKc # Offset: 14997
    00003a9a: 	movzbl	init_value(%rip), %eax
    00003aa1: 	movabsq	$0x101010101010101, %rdx
    00003aab: 	movl	$0x3e8, %ecx
    00003ab0: 	leaq	data8(%rip), %rdi
    00003ab7: 	imulq	%rdx, %rax
    00003abb: 	rep		stosq	%rax, %es:(%rdi)
    00003abe: 	callq	clock@PLT # Offset: 15038
    00003ac3: 	movl	iterations(%rip), %edx
    00003ac9: 	movq	%rax, start_time(%rip)
    00003ad0: 	testl	%edx, %edx
    00003ad2: 	jle	.Ltmp218 # Offset: 15058
    00003ad8: 	movdqa	DATAat0x11010(%rip), %xmm0
    00003ae0: 	xorl	%ecx, %ecx
    00003ae2: 	leaq	data8unsigned(%rip), %r15
    00003ae9: 	nopl	(%rax) # Size: 7
.Ltmp221:
    00003af0: 	leaq	data8(%rip), %rax
    00003af7: 	pxor	%xmm1, %xmm1
    00003afb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp219:
    00003b00: 	movdqa	(%rax), %xmm2
    00003b04: 	addq	$0x10, %rax
    00003b08: 	pand	%xmm0, %xmm2
    00003b0c: 	paddb	%xmm2, %xmm1
    00003b10: 	cmpq	%r15, %rax
    00003b13: 	jne	.Ltmp219 # Offset: 15123
    00003b15: 	movdqa	%xmm1, %xmm2
    00003b19: 	psrldq	$0x8, %xmm2
    00003b1e: 	paddb	%xmm2, %xmm1
    00003b22: 	pxor	%xmm2, %xmm2
    00003b26: 	psadbw	%xmm2, %xmm1
    00003b2a: 	movd	%xmm1, %eax
    00003b2e: 	testb	%al, %al
    00003b30: 	je	.Ltmp220 # Offset: 15152
    00003b36: 	movl	current_test(%rip), %edx
    00003b3c: 	xorl	%eax, %eax
    00003b3e: 	movl	$0x1, %edi
    00003b43: 	movl	%ecx, 0x18(%rsp)
    00003b47: 	leaq	DATAat0x10f44(%rip), %rsi
    00003b4e: 	movaps	%xmm0, (%rsp)
    00003b52: 	callq	__printf_chk@PLT # Offset: 15186
    00003b57: 	movl	0x18(%rsp), %ecx
    00003b5b: 	movl	iterations(%rip), %edx
    00003b61: 	movdqa	(%rsp), %xmm0
    00003b66: 	addl	$0x1, %ecx
    00003b69: 	cmpl	%edx, %ecx
    00003b6b: 	jl	.Ltmp221 # Offset: 15211
.Ltmp218:
    00003b6d: 	callq	clock@PLT # Offset: 15213
    00003b72: 	leaq	DATAat0x10db2(%rip), %rdi
    00003b79: 	pxor	%xmm0, %xmm0
    00003b7d: 	movq	%rax, end_time(%rip)
    00003b84: 	subq	start_time(%rip), %rax
    00003b8b: 	cvtsi2sd	%rax, %xmm0
    00003b90: 	divsd	DATAat0x10f68(%rip), %xmm0
    00003b98: 	callq	_Z13record_resultdPKc # Offset: 15256
    00003b9d: 	movl	$0x4, %edx
    00003ba2: 	leaq	DATAat0x10780(%rip), %rcx
    00003ba9: 	movl	$0x1f40, %esi
    00003bae: 	leaq	data8(%rip), %rdi
    00003bb5: 	callq	_Z14test_variable1Ia26mask_low_by_shift_variableIaEEvPT_iS2_PKc # Offset: 15285
    00003bba: 	movd	init_value(%rip), %xmm0
    00003bc2: 	leaq	data16unsigned(%rip), %rax
    00003bc9: 	punpcklwd	%xmm0, %xmm0
    00003bcd: 	pshufd	$0x0, %xmm0, %xmm0
    00003bd2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp222:
    00003bd8: 	movaps	%xmm0, (%rax)
    00003bdb: 	addq	$0x10, %rax
    00003bdf: 	cmpq	%rbx, %rax
    00003be2: 	jne	.Ltmp222 # Offset: 15330
    00003be4: 	callq	clock@PLT # Offset: 15332
    00003be9: 	movl	iterations(%rip), %edi
    00003bef: 	movq	%rax, start_time(%rip)
    00003bf6: 	testl	%edi, %edi
    00003bf8: 	jle	.Ltmp223 # Offset: 15352
    00003bfe: 	movq	init_value(%rip), %rsi
    00003c05: 	movdqa	DATAat0x10fb0(%rip), %xmm1
    00003c0d: 	xorl	%r15d, %r15d
.Ltmp226:
    00003c10: 	leaq	data16unsigned(%rip), %rax
    00003c17: 	pxor	%xmm0, %xmm0
    00003c1b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp224:
    00003c20: 	movdqa	(%rax), %xmm2
    00003c24: 	addq	$0x10, %rax
    00003c28: 	pand	%xmm1, %xmm2
    00003c2c: 	paddw	%xmm2, %xmm0
    00003c30: 	cmpq	%rbx, %rax
    00003c33: 	jne	.Ltmp224 # Offset: 15411
    00003c35: 	movdqa	%xmm0, %xmm2
    00003c39: 	movl	%esi, %eax
    00003c3b: 	psrldq	$0x8, %xmm2
    00003c40: 	andl	$-0x10, %eax
    00003c43: 	imulw	$0x1f40, %ax, %ax
    00003c48: 	paddw	%xmm2, %xmm0
    00003c4c: 	movdqa	%xmm0, %xmm2
    00003c50: 	psrldq	$0x4, %xmm2
    00003c55: 	paddw	%xmm2, %xmm0
    00003c59: 	movdqa	%xmm0, %xmm2
    00003c5d: 	psrldq	$0x2, %xmm2
    00003c62: 	paddw	%xmm2, %xmm0
    00003c66: 	pextrw	$0x0, %xmm0, %edx
    00003c6b: 	cmpw	%dx, %ax
    00003c6e: 	je	.Ltmp225 # Offset: 15470
    00003c70: 	movl	current_test(%rip), %edx
    00003c76: 	xorl	%eax, %eax
    00003c78: 	movaps	%xmm1, (%rsp)
    00003c7c: 	addl	$0x1, %r15d
    00003c80: 	movl	$0x1, %edi
    00003c85: 	leaq	DATAat0x10f44(%rip), %rsi
    00003c8c: 	callq	__printf_chk@PLT # Offset: 15500
    00003c91: 	movl	iterations(%rip), %edi
    00003c97: 	cmpl	%edi, %r15d
    00003c9a: 	jge	.Ltmp223 # Offset: 15514
    00003c9c: 	movq	init_value(%rip), %rsi
    00003ca3: 	movdqa	(%rsp), %xmm1
    00003ca8: 	jmp	.Ltmp226 # Offset: 15528
    00003cad: 	nopl	(%rax) # Size: 3
.Ltmp220:
    00003cb0: 	addl	$0x1, %ecx
    00003cb3: 	cmpl	%edx, %ecx
    00003cb5: 	jl	.Ltmp221 # Offset: 15541
    00003cbb: 	jmp	.Ltmp218 # Offset: 15547
.Ltmp216:
    00003cc0: 	addl	$0x1, %ecx
    00003cc3: 	cmpl	%edx, %ecx
    00003cc5: 	jl	.Ltmp217 # Offset: 15557
    00003ccb: 	jmp	.Ltmp214 # Offset: 15563
.Ltmp225:
    00003cd0: 	addl	$0x1, %r15d
    00003cd4: 	cmpl	%edi, %r15d
    00003cd7: 	jl	.Ltmp226 # Offset: 15575
.Ltmp223:
    00003cdd: 	callq	clock@PLT # Offset: 15581
    00003ce2: 	leaq	DATAat0x10dcb(%rip), %rdi
    00003ce9: 	pxor	%xmm0, %xmm0
    00003ced: 	movq	%rax, end_time(%rip)
    00003cf4: 	subq	start_time(%rip), %rax
    00003cfb: 	cvtsi2sd	%rax, %xmm0
    00003d00: 	divsd	DATAat0x10f68(%rip), %xmm0
    00003d08: 	callq	_Z13record_resultdPKc # Offset: 15624
    00003d0d: 	movl	$0x4, %edx
    00003d12: 	leaq	DATAat0x107a8(%rip), %rcx
    00003d19: 	movl	$0x1f40, %esi
    00003d1e: 	leaq	data16unsigned(%rip), %rdi
    00003d25: 	callq	_Z14test_variable1It26mask_low_by_shift_variableItEEvPT_iS2_PKc # Offset: 15653
    00003d2a: 	movd	init_value(%rip), %xmm0
    00003d32: 	leaq	data16(%rip), %rax
    00003d39: 	punpcklwd	%xmm0, %xmm0
    00003d3d: 	pshufd	$0x0, %xmm0, %xmm0
    00003d42: 	nopw	(%rax,%rax) # Size: 6
.Ltmp227:
    00003d48: 	movaps	%xmm0, (%rax)
    00003d4b: 	addq	$0x10, %rax
    00003d4f: 	cmpq	%rax, %r14
    00003d52: 	jne	.Ltmp227 # Offset: 15698
    00003d54: 	callq	clock@PLT # Offset: 15700
    00003d59: 	movl	iterations(%rip), %edi
    00003d5f: 	movq	%rax, start_time(%rip)
    00003d66: 	testl	%edi, %edi
    00003d68: 	jle	.Ltmp228 # Offset: 15720
    00003d6e: 	movq	init_value(%rip), %rsi
    00003d75: 	movdqa	DATAat0x10fb0(%rip), %xmm1
    00003d7d: 	xorl	%r15d, %r15d
.Ltmp231:
    00003d80: 	leaq	data16(%rip), %rax
    00003d87: 	pxor	%xmm0, %xmm0
    00003d8b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp229:
    00003d90: 	movdqa	(%rax), %xmm2
    00003d94: 	addq	$0x10, %rax
    00003d98: 	pand	%xmm1, %xmm2
    00003d9c: 	paddw	%xmm2, %xmm0
    00003da0: 	cmpq	%r14, %rax
    00003da3: 	jne	.Ltmp229 # Offset: 15779
    00003da5: 	movdqa	%xmm0, %xmm2
    00003da9: 	movl	%esi, %eax
    00003dab: 	psrldq	$0x8, %xmm2
    00003db0: 	andl	$-0x10, %eax
    00003db3: 	imulw	$0x1f40, %ax, %ax
    00003db8: 	paddw	%xmm2, %xmm0
    00003dbc: 	movdqa	%xmm0, %xmm2
    00003dc0: 	psrldq	$0x4, %xmm2
    00003dc5: 	paddw	%xmm2, %xmm0
    00003dc9: 	movdqa	%xmm0, %xmm2
    00003dcd: 	psrldq	$0x2, %xmm2
    00003dd2: 	paddw	%xmm2, %xmm0
    00003dd6: 	pextrw	$0x0, %xmm0, %edx
    00003ddb: 	cmpw	%dx, %ax
    00003dde: 	je	.Ltmp230 # Offset: 15838
    00003de0: 	movl	current_test(%rip), %edx
    00003de6: 	xorl	%eax, %eax
    00003de8: 	movaps	%xmm1, (%rsp)
    00003dec: 	addl	$0x1, %r15d
    00003df0: 	movl	$0x1, %edi
    00003df5: 	leaq	DATAat0x10f44(%rip), %rsi
    00003dfc: 	callq	__printf_chk@PLT # Offset: 15868
    00003e01: 	movl	iterations(%rip), %edi
    00003e07: 	cmpl	%edi, %r15d
    00003e0a: 	jge	.Ltmp228 # Offset: 15882
    00003e0c: 	movq	init_value(%rip), %rsi
    00003e13: 	movdqa	(%rsp), %xmm1
    00003e18: 	jmp	.Ltmp231 # Offset: 15896
    00003e1d: 	nopl	(%rax) # Size: 3
.Ltmp230:
    00003e20: 	addl	$0x1, %r15d
    00003e24: 	cmpl	%edi, %r15d
    00003e27: 	jl	.Ltmp231 # Offset: 15911
.Ltmp228:
    00003e2d: 	callq	clock@PLT # Offset: 15917
    00003e32: 	leaq	DATAat0x10dcc(%rip), %rdi
    00003e39: 	pxor	%xmm0, %xmm0
    00003e3d: 	movq	%rax, end_time(%rip)
    00003e44: 	subq	start_time(%rip), %rax
    00003e4b: 	cvtsi2sd	%rax, %xmm0
    00003e50: 	divsd	DATAat0x10f68(%rip), %xmm0
    00003e58: 	callq	_Z13record_resultdPKc # Offset: 15960
    00003e5d: 	movl	$0x4, %edx
    00003e62: 	leaq	DATAat0x107d0(%rip), %rcx
    00003e69: 	movl	$0x1f40, %esi
    00003e6e: 	leaq	data16(%rip), %rdi
    00003e75: 	callq	_Z14test_variable1Is26mask_low_by_shift_variableIsEEvPT_iS2_PKc # Offset: 15989
    00003e7a: 	movd	init_value(%rip), %xmm7
    00003e82: 	leaq	data32unsigned(%rip), %rax
    00003e89: 	pshufd	$0x0, %xmm7, %xmm0
    00003e8e: 	nop # Size: 2
.Ltmp232:
    00003e90: 	movaps	%xmm0, (%rax)
    00003e93: 	addq	$0x10, %rax
    00003e97: 	cmpq	%r12, %rax
    00003e9a: 	jne	.Ltmp232 # Offset: 16026
    00003e9c: 	callq	clock@PLT # Offset: 16028
    00003ea1: 	movl	iterations(%rip), %ecx
    00003ea7: 	movq	%rax, start_time(%rip)
    00003eae: 	testl	%ecx, %ecx
    00003eb0: 	jle	.Ltmp233 # Offset: 16048
    00003eb6: 	movq	init_value(%rip), %rsi
    00003ebd: 	movdqa	DATAat0x10fc0(%rip), %xmm1
    00003ec5: 	xorl	%r15d, %r15d
    00003ec8: 	leaq	DATAat0x10f44(%rip), %r14
    00003ecf: 	nop # Size: 1
.Ltmp236:
    00003ed0: 	leaq	data32unsigned(%rip), %rax
    00003ed7: 	pxor	%xmm0, %xmm0
    00003edb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp234:
    00003ee0: 	movdqa	(%rax), %xmm2
    00003ee4: 	addq	$0x10, %rax
    00003ee8: 	pand	%xmm1, %xmm2
    00003eec: 	paddd	%xmm2, %xmm0
    00003ef0: 	cmpq	%r12, %rax
    00003ef3: 	jne	.Ltmp234 # Offset: 16115
    00003ef5: 	movdqa	%xmm0, %xmm2
    00003ef9: 	movl	%esi, %edx
    00003efb: 	psrldq	$0x8, %xmm2
    00003f00: 	andl	$-0x10, %edx
    00003f03: 	imull	$0x1f40, %edx, %edx
    00003f09: 	paddd	%xmm2, %xmm0
    00003f0d: 	movdqa	%xmm0, %xmm2
    00003f11: 	psrldq	$0x4, %xmm2
    00003f16: 	paddd	%xmm2, %xmm0
    00003f1a: 	movd	%xmm0, %eax
    00003f1e: 	cmpl	%eax, %edx
    00003f20: 	je	.Ltmp235 # Offset: 16160
    00003f22: 	movl	current_test(%rip), %edx
    00003f28: 	movq	%r14, %rsi
    00003f2b: 	movl	$0x1, %edi
    00003f30: 	xorl	%eax, %eax
    00003f32: 	movaps	%xmm1, (%rsp)
    00003f36: 	addl	$0x1, %r15d
    00003f3a: 	callq	__printf_chk@PLT # Offset: 16186
    00003f3f: 	movl	iterations(%rip), %ecx
    00003f45: 	cmpl	%ecx, %r15d
    00003f48: 	jge	.Ltmp233 # Offset: 16200
    00003f4a: 	movq	init_value(%rip), %rsi
    00003f51: 	movdqa	(%rsp), %xmm1
    00003f56: 	jmp	.Ltmp236 # Offset: 16214
    00003f5b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp235:
    00003f60: 	addl	$0x1, %r15d
    00003f64: 	cmpl	%ecx, %r15d
    00003f67: 	jl	.Ltmp236 # Offset: 16231
.Ltmp233:
    00003f6d: 	callq	clock@PLT # Offset: 16237
    00003f72: 	leaq	DATAat0x10de6(%rip), %rdi
    00003f79: 	pxor	%xmm0, %xmm0
    00003f7d: 	movq	%rax, end_time(%rip)
    00003f84: 	subq	start_time(%rip), %rax
    00003f8b: 	cvtsi2sd	%rax, %xmm0
    00003f90: 	divsd	DATAat0x10f68(%rip), %xmm0
    00003f98: 	callq	_Z13record_resultdPKc # Offset: 16280
    00003f9d: 	movl	$0x4, %edx
    00003fa2: 	leaq	DATAat0x107f8(%rip), %rcx
    00003fa9: 	movl	$0x1f40, %esi
    00003fae: 	leaq	data32unsigned(%rip), %rdi
    00003fb5: 	callq	_Z14test_variable1Ij26mask_low_by_shift_variableIjEEvPT_iS2_PKc # Offset: 16309
    00003fba: 	movd	init_value(%rip), %xmm7
    00003fc2: 	leaq	data32(%rip), %rax
    00003fc9: 	pshufd	$0x0, %xmm7, %xmm0
    00003fce: 	nop # Size: 2
.Ltmp237:
    00003fd0: 	movaps	%xmm0, (%rax)
    00003fd3: 	leaq	data32unsigned(%rip), %rdi
    00003fda: 	addq	$0x10, %rax
    00003fde: 	cmpq	%rdi, %rax
    00003fe1: 	jne	.Ltmp237 # Offset: 16353
    00003fe3: 	callq	clock@PLT # Offset: 16355
    00003fe8: 	movl	iterations(%rip), %ecx
    00003fee: 	movq	%rax, start_time(%rip)
    00003ff5: 	testl	%ecx, %ecx
    00003ff7: 	jle	.Ltmp238 # Offset: 16375
    00003ffd: 	movq	init_value(%rip), %rsi
    00004004: 	movdqa	DATAat0x10fc0(%rip), %xmm1
    0000400c: 	xorl	%r15d, %r15d
    0000400f: 	leaq	DATAat0x10f44(%rip), %r14
    00004016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp241:
    00004020: 	leaq	data32(%rip), %rax
    00004027: 	pxor	%xmm0, %xmm0
    0000402b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp239:
    00004030: 	movdqa	(%rax), %xmm2
    00004034: 	leaq	data32unsigned(%rip), %rdi
    0000403b: 	addq	$0x10, %rax
    0000403f: 	pand	%xmm1, %xmm2
    00004043: 	paddd	%xmm2, %xmm0
    00004047: 	cmpq	%rax, %rdi
    0000404a: 	jne	.Ltmp239 # Offset: 16458
    0000404c: 	movdqa	%xmm0, %xmm2
    00004050: 	movl	%esi, %edx
    00004052: 	psrldq	$0x8, %xmm2
    00004057: 	andl	$-0x10, %edx
    0000405a: 	imull	$0x1f40, %edx, %edx
    00004060: 	paddd	%xmm2, %xmm0
    00004064: 	movdqa	%xmm0, %xmm2
    00004068: 	psrldq	$0x4, %xmm2
    0000406d: 	paddd	%xmm2, %xmm0
    00004071: 	movd	%xmm0, %eax
    00004075: 	cmpl	%eax, %edx
    00004077: 	je	.Ltmp240 # Offset: 16503
    00004079: 	movl	current_test(%rip), %edx
    0000407f: 	movq	%r14, %rsi
    00004082: 	movl	$0x1, %edi
    00004087: 	xorl	%eax, %eax
    00004089: 	movaps	%xmm1, (%rsp)
    0000408d: 	addl	$0x1, %r15d
    00004091: 	callq	__printf_chk@PLT # Offset: 16529
    00004096: 	movl	iterations(%rip), %ecx
    0000409c: 	cmpl	%ecx, %r15d
    0000409f: 	jge	.Ltmp238 # Offset: 16543
    000040a1: 	movq	init_value(%rip), %rsi
    000040a8: 	movdqa	(%rsp), %xmm1
    000040ad: 	jmp	.Ltmp241 # Offset: 16557
    000040b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp240:
    000040b8: 	addl	$0x1, %r15d
    000040bc: 	cmpl	%ecx, %r15d
    000040bf: 	jl	.Ltmp241 # Offset: 16575
.Ltmp238:
    000040c5: 	callq	clock@PLT # Offset: 16581
    000040ca: 	leaq	DATAat0x10de7(%rip), %rdi
    000040d1: 	pxor	%xmm0, %xmm0
    000040d5: 	movq	%rax, end_time(%rip)
    000040dc: 	subq	start_time(%rip), %rax
    000040e3: 	cvtsi2sd	%rax, %xmm0
    000040e8: 	divsd	DATAat0x10f68(%rip), %xmm0
    000040f0: 	callq	_Z13record_resultdPKc # Offset: 16624
    000040f5: 	movl	$0x4, %edx
    000040fa: 	leaq	DATAat0x10820(%rip), %rcx
    00004101: 	movl	$0x1f40, %esi
    00004106: 	leaq	data32(%rip), %rdi
    0000410d: 	callq	_Z14test_variable1Ii26mask_low_by_shift_variableIiEEvPT_iS2_PKc # Offset: 16653
    00004112: 	leaq	data64unsigned(%rip), %rax
    00004119: 	movq	init_value(%rip), %xmm0
    00004121: 	punpcklqdq	%xmm0, %xmm0
    00004125: 	nopl	(%rax) # Size: 3
.Ltmp242:
    00004128: 	movaps	%xmm0, (%rax)
    0000412b: 	addq	$0x10, %rax
    0000412f: 	cmpq	%rbp, %rax
    00004132: 	jne	.Ltmp242 # Offset: 16690
    00004134: 	callq	clock@PLT # Offset: 16692
    00004139: 	movl	iterations(%rip), %ecx
    0000413f: 	movq	%rax, start_time(%rip)
    00004146: 	testl	%ecx, %ecx
    00004148: 	jle	.Ltmp243 # Offset: 16712
    0000414e: 	movq	init_value(%rip), %rsi
    00004155: 	movdqa	DATAat0x10fd0(%rip), %xmm1
    0000415d: 	xorl	%r15d, %r15d
    00004160: 	leaq	DATAat0x10f44(%rip), %r14
    00004167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp246:
    00004170: 	leaq	data64unsigned(%rip), %rax
    00004177: 	pxor	%xmm0, %xmm0
    0000417b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp244:
    00004180: 	movdqa	(%rax), %xmm2
    00004184: 	addq	$0x10, %rax
    00004188: 	pand	%xmm1, %xmm2
    0000418c: 	paddq	%xmm2, %xmm0
    00004190: 	cmpq	%rbp, %rax
    00004193: 	jne	.Ltmp244 # Offset: 16787
    00004195: 	movq	%rsi, %rdx
    00004198: 	movdqa	%xmm0, %xmm2
    0000419c: 	andq	$-0x10, %rdx
    000041a0: 	psrldq	$0x8, %xmm2
    000041a5: 	imulq	$0x1f40, %rdx, %rdx
    000041ac: 	paddq	%xmm2, %xmm0
    000041b0: 	movq	%xmm0, %rax
    000041b5: 	cmpq	%rax, %rdx
    000041b8: 	je	.Ltmp245 # Offset: 16824
    000041ba: 	movl	current_test(%rip), %edx
    000041c0: 	movq	%r14, %rsi
    000041c3: 	movl	$0x1, %edi
    000041c8: 	xorl	%eax, %eax
    000041ca: 	movaps	%xmm1, (%rsp)
    000041ce: 	addl	$0x1, %r15d
    000041d2: 	callq	__printf_chk@PLT # Offset: 16850
    000041d7: 	movl	iterations(%rip), %ecx
    000041dd: 	cmpl	%ecx, %r15d
    000041e0: 	jge	.Ltmp243 # Offset: 16864
    000041e2: 	movq	init_value(%rip), %rsi
    000041e9: 	movdqa	(%rsp), %xmm1
    000041ee: 	jmp	.Ltmp246 # Offset: 16878
.Ltmp245:
    000041f0: 	addl	$0x1, %r15d
    000041f4: 	cmpl	%ecx, %r15d
    000041f7: 	jl	.Ltmp246 # Offset: 16887
.Ltmp243:
    000041fd: 	callq	clock@PLT # Offset: 16893
    00004202: 	leaq	DATAat0x10e01(%rip), %rdi
    00004209: 	pxor	%xmm0, %xmm0
    0000420d: 	movq	%rax, end_time(%rip)
    00004214: 	subq	start_time(%rip), %rax
    0000421b: 	cvtsi2sd	%rax, %xmm0
    00004220: 	divsd	DATAat0x10f68(%rip), %xmm0
    00004228: 	callq	_Z13record_resultdPKc # Offset: 16936
    0000422d: 	movl	$0x4, %edx
    00004232: 	leaq	DATAat0x10848(%rip), %rcx
    00004239: 	movl	$0x1f40, %esi
    0000423e: 	leaq	data64unsigned(%rip), %rdi
    00004245: 	callq	_Z14test_variable1Im26mask_low_by_shift_variableImEEvPT_iS2_PKc # Offset: 16965
    0000424a: 	leaq	data64(%rip), %rax
    00004251: 	movq	init_value(%rip), %xmm0
    00004259: 	punpcklqdq	%xmm0, %xmm0
    0000425d: 	nopl	(%rax) # Size: 3
.Ltmp247:
    00004260: 	movaps	%xmm0, (%rax)
    00004263: 	addq	$0x10, %rax
    00004267: 	cmpq	%rax, %r13
    0000426a: 	jne	.Ltmp247 # Offset: 17002
    0000426c: 	callq	clock@PLT # Offset: 17004
    00004271: 	movl	iterations(%rip), %ecx
    00004277: 	movq	%rax, start_time(%rip)
    0000427e: 	testl	%ecx, %ecx
    00004280: 	jle	.Ltmp248 # Offset: 17024
    00004286: 	movq	init_value(%rip), %rsi
    0000428d: 	movdqa	DATAat0x10fd0(%rip), %xmm1
    00004295: 	xorl	%r15d, %r15d
    00004298: 	leaq	DATAat0x10f44(%rip), %r14
    0000429f: 	nop # Size: 1
.Ltmp251:
    000042a0: 	leaq	data64(%rip), %rax
    000042a7: 	pxor	%xmm0, %xmm0
    000042ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp249:
    000042b0: 	movdqa	(%rax), %xmm2
    000042b4: 	addq	$0x10, %rax
    000042b8: 	pand	%xmm1, %xmm2
    000042bc: 	paddq	%xmm2, %xmm0
    000042c0: 	cmpq	%r13, %rax
    000042c3: 	jne	.Ltmp249 # Offset: 17091
    000042c5: 	movq	%rsi, %rdx
    000042c8: 	movdqa	%xmm0, %xmm2
    000042cc: 	andq	$-0x10, %rdx
    000042d0: 	psrldq	$0x8, %xmm2
    000042d5: 	imulq	$0x1f40, %rdx, %rdx
    000042dc: 	paddq	%xmm2, %xmm0
    000042e0: 	movq	%xmm0, %rax
    000042e5: 	cmpq	%rax, %rdx
    000042e8: 	je	.Ltmp250 # Offset: 17128
    000042ea: 	movl	current_test(%rip), %edx
    000042f0: 	movq	%r14, %rsi
    000042f3: 	movl	$0x1, %edi
    000042f8: 	xorl	%eax, %eax
    000042fa: 	movaps	%xmm1, (%rsp)
    000042fe: 	addl	$0x1, %r15d
    00004302: 	callq	__printf_chk@PLT # Offset: 17154
    00004307: 	movl	iterations(%rip), %ecx
    0000430d: 	cmpl	%ecx, %r15d
    00004310: 	jge	.Ltmp248 # Offset: 17168
    00004312: 	movq	init_value(%rip), %rsi
    00004319: 	movdqa	(%rsp), %xmm1
    0000431e: 	jmp	.Ltmp251 # Offset: 17182
.Ltmp250:
    00004320: 	addl	$0x1, %r15d
    00004324: 	cmpl	%ecx, %r15d
    00004327: 	jl	.Ltmp251 # Offset: 17191
.Ltmp248:
    0000432d: 	callq	clock@PLT # Offset: 17197
    00004332: 	pxor	%xmm0, %xmm0
    00004336: 	leaq	DATAat0x10e02(%rip), %rdi
    0000433d: 	xorl	%r14d, %r14d
    00004340: 	movq	%rax, end_time(%rip)
    00004347: 	subq	start_time(%rip), %rax
    0000434e: 	leaq	data16(%rip), %r15
    00004355: 	leaq	DATAat0x10f44(%rip), %r13
    0000435c: 	cvtsi2sd	%rax, %xmm0
    00004361: 	divsd	DATAat0x10f68(%rip), %xmm0
    00004369: 	callq	_Z13record_resultdPKc # Offset: 17257
    0000436e: 	movl	$0x4, %edx
    00004373: 	leaq	DATAat0x10870(%rip), %rcx
    0000437a: 	movl	$0x1f40, %esi
    0000437f: 	leaq	data64(%rip), %rdi
    00004386: 	callq	_Z14test_variable1Il26mask_low_by_shift_variableIlEEvPT_iS2_PKc # Offset: 17286
    0000438b: 	movl	iterations(%rip), %edx
    00004391: 	xorl	%r8d, %r8d
    00004394: 	xorl	%ecx, %ecx
    00004396: 	movl	$0x1f40, %esi
    0000439b: 	leaq	DATAat0x10e1c(%rip), %rdi
    000043a2: 	callq	_Z9summarizePKciiii # Offset: 17314
    000043a7: 	movzbl	init_value(%rip), %eax
    000043ae: 	movabsq	$0x101010101010101, %rdx
    000043b8: 	movl	$0x3e8, %ecx
    000043bd: 	leaq	data8unsigned(%rip), %rdi
    000043c4: 	imulq	%rdx, %rax
    000043c8: 	rep		stosq	%rax, %es:(%rdi)
    000043cb: 	callq	clock@PLT # Offset: 17355
    000043d0: 	movl	iterations(%rip), %ecx
    000043d6: 	movq	init_value(%rip), %rsi
    000043dd: 	movq	%rax, start_time(%rip)
    000043e4: 	testl	%ecx, %ecx
    000043e6: 	jle	.Ltmp252 # Offset: 17382
    000043ec: 	nopl	(%rax) # Size: 4
.Ltmp255:
    000043f0: 	leaq	data8unsigned(%rip), %rax
    000043f7: 	pxor	%xmm0, %xmm0
    000043fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp253:
    00004400: 	paddb	(%rax), %xmm0
    00004404: 	addq	$0x10, %rax
    00004408: 	cmpq	%rax, %r15
    0000440b: 	jne	.Ltmp253 # Offset: 17419
    0000440d: 	movdqa	%xmm0, %xmm1
    00004411: 	movl	%esi, %edx
    00004413: 	psrldq	$0x8, %xmm1
    00004418: 	shll	$0x6, %edx
    0000441b: 	paddb	%xmm1, %xmm0
    0000441f: 	pxor	%xmm1, %xmm1
    00004423: 	psadbw	%xmm1, %xmm0
    00004427: 	movd	%xmm0, %eax
    0000442b: 	cmpb	%al, %dl
    0000442d: 	je	.Ltmp254 # Offset: 17453
    0000442f: 	movl	current_test(%rip), %edx
    00004435: 	movq	%r13, %rsi
    00004438: 	movl	$0x1, %edi
    0000443d: 	xorl	%eax, %eax
    0000443f: 	addl	$0x1, %r14d
    00004443: 	callq	__printf_chk@PLT # Offset: 17475
    00004448: 	movl	iterations(%rip), %ecx
    0000444e: 	cmpl	%ecx, %r14d
    00004451: 	jge	.Ltmp252 # Offset: 17489
    00004453: 	movq	init_value(%rip), %rsi
    0000445a: 	jmp	.Ltmp255 # Offset: 17498
    0000445c: 	nopl	(%rax) # Size: 4
.Ltmp254:
    00004460: 	addl	$0x1, %r14d
    00004464: 	cmpl	%ecx, %r14d
    00004467: 	jl	.Ltmp255 # Offset: 17511
.Ltmp252:
    00004469: 	callq	clock@PLT # Offset: 17513
    0000446e: 	leaq	DATAat0x10e34(%rip), %rdi
    00004475: 	pxor	%xmm0, %xmm0
    00004479: 	movq	%rax, end_time(%rip)
    00004480: 	subq	start_time(%rip), %rax
    00004487: 	cvtsi2sd	%rax, %xmm0
    0000448c: 	divsd	DATAat0x10f68(%rip), %xmm0
    00004494: 	callq	_Z13record_resultdPKc # Offset: 17556
    00004499: 	leaq	DATAat0x10898(%rip), %rdx
    000044a0: 	movl	$0x1f40, %esi
    000044a5: 	leaq	data8unsigned(%rip), %rdi
    000044ac: 	callq	_Z13test_constantIh27mask_high_by_shift_constantIhEEvPT_iPKc # Offset: 17580
    000044b1: 	movd	init_value(%rip), %xmm0
    000044b9: 	leaq	data16unsigned(%rip), %rax
    000044c0: 	punpcklwd	%xmm0, %xmm0
    000044c4: 	pshufd	$0x0, %xmm0, %xmm0
    000044c9: 	nopl	(%rax) # Size: 7
.Ltmp256:
    000044d0: 	movaps	%xmm0, (%rax)
    000044d3: 	addq	$0x10, %rax
    000044d7: 	cmpq	%rbx, %rax
    000044da: 	jne	.Ltmp256 # Offset: 17626
    000044dc: 	callq	clock@PLT # Offset: 17628
    000044e1: 	movl	iterations(%rip), %ecx
    000044e7: 	xorl	%r14d, %r14d
    000044ea: 	movq	init_value(%rip), %rsi
    000044f1: 	movq	%rax, start_time(%rip)
    000044f8: 	leaq	DATAat0x10f44(%rip), %r13
    000044ff: 	testl	%ecx, %ecx
    00004501: 	jle	.Ltmp257 # Offset: 17665
    00004507: 	nopw	(%rax,%rax) # Size: 9
.Ltmp260:
    00004510: 	leaq	data16unsigned(%rip), %rax
    00004517: 	pxor	%xmm0, %xmm0
    0000451b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp258:
    00004520: 	paddw	(%rax), %xmm0
    00004524: 	addq	$0x10, %rax
    00004528: 	cmpq	%rbx, %rax
    0000452b: 	jne	.Ltmp258 # Offset: 17707
    0000452d: 	movdqa	%xmm0, %xmm1
    00004531: 	imulw	$0x1f40, %si, %dx
    00004536: 	psrldq	$0x8, %xmm1
    0000453b: 	paddw	%xmm1, %xmm0
    0000453f: 	movdqa	%xmm0, %xmm1
    00004543: 	psrldq	$0x4, %xmm1
    00004548: 	paddw	%xmm1, %xmm0
    0000454c: 	movdqa	%xmm0, %xmm1
    00004550: 	psrldq	$0x2, %xmm1
    00004555: 	paddw	%xmm1, %xmm0
    00004559: 	pextrw	$0x0, %xmm0, %eax
    0000455e: 	cmpw	%ax, %dx
    00004561: 	je	.Ltmp259 # Offset: 17761
    00004563: 	movl	current_test(%rip), %edx
    00004569: 	movq	%r13, %rsi
    0000456c: 	movl	$0x1, %edi
    00004571: 	xorl	%eax, %eax
    00004573: 	addl	$0x1, %r14d
    00004577: 	callq	__printf_chk@PLT # Offset: 17783
    0000457c: 	movl	iterations(%rip), %ecx
    00004582: 	cmpl	%ecx, %r14d
    00004585: 	jge	.Ltmp257 # Offset: 17797
    00004587: 	movq	init_value(%rip), %rsi
    0000458e: 	jmp	.Ltmp260 # Offset: 17806
.Ltmp259:
    00004590: 	addl	$0x1, %r14d
    00004594: 	cmpl	%ecx, %r14d
    00004597: 	jl	.Ltmp260 # Offset: 17815
.Ltmp257:
    0000459d: 	callq	clock@PLT # Offset: 17821
    000045a2: 	leaq	DATAat0x10e4f(%rip), %rdi
    000045a9: 	pxor	%xmm0, %xmm0
    000045ad: 	movq	%rax, end_time(%rip)
    000045b4: 	subq	start_time(%rip), %rax
    000045bb: 	cvtsi2sd	%rax, %xmm0
    000045c0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000045c8: 	callq	_Z13record_resultdPKc # Offset: 17864
    000045cd: 	leaq	DATAat0x108c0(%rip), %rdx
    000045d4: 	movl	$0x1f40, %esi
    000045d9: 	leaq	data16unsigned(%rip), %rdi
    000045e0: 	callq	_Z13test_constantIt27mask_high_by_shift_constantItEEvPT_iPKc # Offset: 17888
    000045e5: 	movd	init_value(%rip), %xmm7
    000045ed: 	leaq	data32unsigned(%rip), %rax
    000045f4: 	pshufd	$0x0, %xmm7, %xmm0
    000045f9: 	nopl	(%rax) # Size: 7
.Ltmp261:
    00004600: 	movaps	%xmm0, (%rax)
    00004603: 	addq	$0x10, %rax
    00004607: 	cmpq	%r12, %rax
    0000460a: 	jne	.Ltmp261 # Offset: 17930
    0000460c: 	leaq	DATAat0x10e6b(%rip), %rdx
    00004613: 	movl	$0x1f40, %esi
    00004618: 	leaq	data32unsigned(%rip), %rdi
    0000461f: 	callq	_Z13test_constantIj18mask_high_constantIjEEvPT_iPKc # Offset: 17951
    00004624: 	leaq	DATAat0x108e8(%rip), %rdx
    0000462b: 	movl	$0x1f40, %esi
    00004630: 	leaq	data32unsigned(%rip), %rdi
    00004637: 	callq	_Z13test_constantIj27mask_high_by_shift_constantIjEEvPT_iPKc # Offset: 17975
    0000463c: 	leaq	data64unsigned(%rip), %rax
    00004643: 	movq	init_value(%rip), %xmm0
    0000464b: 	punpcklqdq	%xmm0, %xmm0
    0000464f: 	nop # Size: 1
.Ltmp262:
    00004650: 	movaps	%xmm0, (%rax)
    00004653: 	addq	$0x10, %rax
    00004657: 	cmpq	%rbp, %rax
    0000465a: 	jne	.Ltmp262 # Offset: 18010
    0000465c: 	leaq	DATAat0x10e87(%rip), %rdx
    00004663: 	movl	$0x1f40, %esi
    00004668: 	xorl	%r14d, %r14d
    0000466b: 	leaq	data64unsigned(%rip), %rdi
    00004672: 	leaq	data16(%rip), %r15
    00004679: 	callq	_Z13test_constantIm18mask_high_constantImEEvPT_iPKc # Offset: 18041
    0000467e: 	leaq	DATAat0x10910(%rip), %rdx
    00004685: 	movl	$0x1f40, %esi
    0000468a: 	leaq	data64unsigned(%rip), %rdi
    00004691: 	callq	_Z13test_constantIm27mask_high_by_shift_constantImEEvPT_iPKc # Offset: 18065
    00004696: 	movl	iterations(%rip), %edx
    0000469c: 	xorl	%r8d, %r8d
    0000469f: 	xorl	%ecx, %ecx
    000046a1: 	movl	$0x1f40, %esi
    000046a6: 	leaq	DATAat0x10ea3(%rip), %rdi
    000046ad: 	leaq	DATAat0x10f44(%rip), %r13
    000046b4: 	callq	_Z9summarizePKciiii # Offset: 18100
    000046b9: 	movzbl	init_value(%rip), %eax
    000046c0: 	movabsq	$0x101010101010101, %rdx
    000046ca: 	movl	$0x3e8, %ecx
    000046cf: 	leaq	data8unsigned(%rip), %rdi
    000046d6: 	imulq	%rdx, %rax
    000046da: 	rep		stosq	%rax, %es:(%rdi)
    000046dd: 	callq	clock@PLT # Offset: 18141
    000046e2: 	movl	iterations(%rip), %ecx
    000046e8: 	movq	init_value(%rip), %rsi
    000046ef: 	movq	%rax, start_time(%rip)
    000046f6: 	testl	%ecx, %ecx
    000046f8: 	jle	.Ltmp263 # Offset: 18168
    000046fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp266:
    00004700: 	leaq	data8unsigned(%rip), %rax
    00004707: 	pxor	%xmm0, %xmm0
    0000470b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp264:
    00004710: 	paddb	(%rax), %xmm0
    00004714: 	addq	$0x10, %rax
    00004718: 	cmpq	%r15, %rax
    0000471b: 	jne	.Ltmp264 # Offset: 18203
    0000471d: 	movdqa	%xmm0, %xmm1
    00004721: 	movl	%esi, %edx
    00004723: 	psrldq	$0x8, %xmm1
    00004728: 	shll	$0x6, %edx
    0000472b: 	paddb	%xmm1, %xmm0
    0000472f: 	pxor	%xmm1, %xmm1
    00004733: 	psadbw	%xmm1, %xmm0
    00004737: 	movd	%xmm0, %eax
    0000473b: 	cmpb	%al, %dl
    0000473d: 	je	.Ltmp265 # Offset: 18237
    0000473f: 	movl	current_test(%rip), %edx
    00004745: 	movq	%r13, %rsi
    00004748: 	movl	$0x1, %edi
    0000474d: 	xorl	%eax, %eax
    0000474f: 	addl	$0x1, %r14d
    00004753: 	callq	__printf_chk@PLT # Offset: 18259
    00004758: 	movl	iterations(%rip), %ecx
    0000475e: 	cmpl	%ecx, %r14d
    00004761: 	jge	.Ltmp263 # Offset: 18273
    00004763: 	movq	init_value(%rip), %rsi
    0000476a: 	jmp	.Ltmp266 # Offset: 18282
    0000476c: 	nopl	(%rax) # Size: 4
.Ltmp265:
    00004770: 	addl	$0x1, %r14d
    00004774: 	cmpl	%ecx, %r14d
    00004777: 	jl	.Ltmp266 # Offset: 18295
.Ltmp263:
    00004779: 	callq	clock@PLT # Offset: 18297
    0000477e: 	leaq	DATAat0x10ebc(%rip), %rdi
    00004785: 	pxor	%xmm0, %xmm0
    00004789: 	movq	%rax, end_time(%rip)
    00004790: 	subq	start_time(%rip), %rax
    00004797: 	cvtsi2sd	%rax, %xmm0
    0000479c: 	divsd	DATAat0x10f68(%rip), %xmm0
    000047a4: 	callq	_Z13record_resultdPKc # Offset: 18340
    000047a9: 	movl	$0x4, %edx
    000047ae: 	leaq	DATAat0x10938(%rip), %rcx
    000047b5: 	movl	$0x1f40, %esi
    000047ba: 	leaq	data8unsigned(%rip), %rdi
    000047c1: 	callq	_Z14test_variable1Ih27mask_high_by_shift_variableIhEEvPT_iS2_PKc # Offset: 18369
    000047c6: 	movd	init_value(%rip), %xmm0
    000047ce: 	leaq	data16unsigned(%rip), %rax
    000047d5: 	punpcklwd	%xmm0, %xmm0
    000047d9: 	pshufd	$0x0, %xmm0, %xmm0
    000047de: 	nop # Size: 2
.Ltmp267:
    000047e0: 	movaps	%xmm0, (%rax)
    000047e3: 	addq	$0x10, %rax
    000047e7: 	cmpq	%rbx, %rax
    000047ea: 	jne	.Ltmp267 # Offset: 18410
    000047ec: 	callq	clock@PLT # Offset: 18412
    000047f1: 	movl	iterations(%rip), %ecx
    000047f7: 	xorl	%r14d, %r14d
    000047fa: 	movq	init_value(%rip), %rsi
    00004801: 	movq	%rax, start_time(%rip)
    00004808: 	leaq	DATAat0x10f44(%rip), %r13
    0000480f: 	testl	%ecx, %ecx
    00004811: 	jle	.Ltmp268 # Offset: 18449
    00004817: 	nopw	(%rax,%rax) # Size: 9
.Ltmp271:
    00004820: 	leaq	data16unsigned(%rip), %rax
    00004827: 	pxor	%xmm0, %xmm0
    0000482b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp269:
    00004830: 	paddw	(%rax), %xmm0
    00004834: 	addq	$0x10, %rax
    00004838: 	cmpq	%rbx, %rax
    0000483b: 	jne	.Ltmp269 # Offset: 18491
    0000483d: 	movdqa	%xmm0, %xmm1
    00004841: 	imulw	$0x1f40, %si, %ax
    00004846: 	psrldq	$0x8, %xmm1
    0000484b: 	paddw	%xmm1, %xmm0
    0000484f: 	movdqa	%xmm0, %xmm1
    00004853: 	psrldq	$0x4, %xmm1
    00004858: 	paddw	%xmm1, %xmm0
    0000485c: 	movdqa	%xmm0, %xmm1
    00004860: 	psrldq	$0x2, %xmm1
    00004865: 	paddw	%xmm1, %xmm0
    00004869: 	pextrw	$0x0, %xmm0, %edx
    0000486e: 	cmpw	%ax, %dx
    00004871: 	je	.Ltmp270 # Offset: 18545
    00004873: 	movl	current_test(%rip), %edx
    00004879: 	movq	%r13, %rsi
    0000487c: 	movl	$0x1, %edi
    00004881: 	xorl	%eax, %eax
    00004883: 	addl	$0x1, %r14d
    00004887: 	callq	__printf_chk@PLT # Offset: 18567
    0000488c: 	movl	iterations(%rip), %ecx
    00004892: 	cmpl	%ecx, %r14d
    00004895: 	jge	.Ltmp268 # Offset: 18581
    00004897: 	movq	init_value(%rip), %rsi
    0000489e: 	jmp	.Ltmp271 # Offset: 18590
.Ltmp270:
    000048a0: 	addl	$0x1, %r14d
    000048a4: 	cmpl	%ecx, %r14d
    000048a7: 	jl	.Ltmp271 # Offset: 18599
.Ltmp268:
    000048ad: 	callq	clock@PLT # Offset: 18605
    000048b2: 	leaq	DATAat0x10ed7(%rip), %rdi
    000048b9: 	pxor	%xmm0, %xmm0
    000048bd: 	movq	%rax, end_time(%rip)
    000048c4: 	subq	start_time(%rip), %rax
    000048cb: 	cvtsi2sd	%rax, %xmm0
    000048d0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000048d8: 	callq	_Z13record_resultdPKc # Offset: 18648
    000048dd: 	movl	$0x4, %edx
    000048e2: 	leaq	DATAat0x10960(%rip), %rcx
    000048e9: 	movl	$0x1f40, %esi
    000048ee: 	leaq	data16unsigned(%rip), %rdi
    000048f5: 	callq	_Z14test_variable1It27mask_high_by_shift_variableItEEvPT_iS2_PKc # Offset: 18677
    000048fa: 	movd	init_value(%rip), %xmm7
    00004902: 	leaq	data32unsigned(%rip), %rax
    00004909: 	pshufd	$0x0, %xmm7, %xmm0
    0000490e: 	nop # Size: 2
.Ltmp272:
    00004910: 	movaps	%xmm0, (%rax)
    00004913: 	addq	$0x10, %rax
    00004917: 	cmpq	%rax, %r12
    0000491a: 	jne	.Ltmp272 # Offset: 18714
    0000491c: 	callq	clock@PLT # Offset: 18716
    00004921: 	movl	iterations(%rip), %ecx
    00004927: 	movq	%rax, start_time(%rip)
    0000492e: 	testl	%ecx, %ecx
    00004930: 	jle	.Ltmp273 # Offset: 18736
    00004936: 	movq	init_value(%rip), %rsi
    0000493d: 	movdqa	DATAat0x10ff0(%rip), %xmm2
    00004945: 	xorl	%r13d, %r13d
    00004948: 	leaq	DATAat0x10f44(%rip), %rbx
    0000494f: 	nop # Size: 1
.Ltmp276:
    00004950: 	leaq	data32unsigned(%rip), %rax
    00004957: 	pxor	%xmm0, %xmm0
    0000495b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp274:
    00004960: 	movdqa	(%rax), %xmm1
    00004964: 	addq	$0x10, %rax
    00004968: 	pand	%xmm2, %xmm1
    0000496c: 	paddd	%xmm1, %xmm0
    00004970: 	cmpq	%r12, %rax
    00004973: 	jne	.Ltmp274 # Offset: 18803
    00004975: 	movdqa	%xmm0, %xmm1
    00004979: 	movl	%esi, %edx
    0000497b: 	psrldq	$0x8, %xmm1
    00004980: 	andl	$0xfffffff, %edx
    00004986: 	imull	$0x1f40, %edx, %edx
    0000498c: 	paddd	%xmm1, %xmm0
    00004990: 	movdqa	%xmm0, %xmm1
    00004994: 	psrldq	$0x4, %xmm1
    00004999: 	paddd	%xmm1, %xmm0
    0000499d: 	movd	%xmm0, %eax
    000049a1: 	cmpl	%eax, %edx
    000049a3: 	je	.Ltmp275 # Offset: 18851
    000049a5: 	movl	current_test(%rip), %edx
    000049ab: 	movq	%rbx, %rsi
    000049ae: 	movl	$0x1, %edi
    000049b3: 	xorl	%eax, %eax
    000049b5: 	addl	$0x1, %r13d
    000049b9: 	callq	__printf_chk@PLT # Offset: 18873
    000049be: 	movl	iterations(%rip), %ecx
    000049c4: 	cmpl	%ecx, %r13d
    000049c7: 	jge	.Ltmp273 # Offset: 18887
    000049c9: 	movq	init_value(%rip), %rsi
    000049d0: 	movdqa	DATAat0x10ff0(%rip), %xmm2
    000049d8: 	jmp	.Ltmp276 # Offset: 18904
    000049dd: 	nopl	(%rax) # Size: 3
.Ltmp275:
    000049e0: 	addl	$0x1, %r13d
    000049e4: 	cmpl	%ecx, %r13d
    000049e7: 	jl	.Ltmp276 # Offset: 18919
.Ltmp273:
    000049ed: 	callq	clock@PLT # Offset: 18925
    000049f2: 	leaq	DATAat0x10ef3(%rip), %rdi
    000049f9: 	pxor	%xmm0, %xmm0
    000049fd: 	movq	%rax, end_time(%rip)
    00004a04: 	subq	start_time(%rip), %rax
    00004a0b: 	cvtsi2sd	%rax, %xmm0
    00004a10: 	divsd	DATAat0x10f68(%rip), %xmm0
    00004a18: 	callq	_Z13record_resultdPKc # Offset: 18968
    00004a1d: 	movl	$0x4, %edx
    00004a22: 	leaq	DATAat0x10988(%rip), %rcx
    00004a29: 	movl	$0x1f40, %esi
    00004a2e: 	leaq	data32unsigned(%rip), %rdi
    00004a35: 	callq	_Z14test_variable1Ij27mask_high_by_shift_variableIjEEvPT_iS2_PKc # Offset: 18997
    00004a3a: 	leaq	data64unsigned(%rip), %rax
    00004a41: 	movq	init_value(%rip), %xmm0
    00004a49: 	punpcklqdq	%xmm0, %xmm0
    00004a4d: 	nopl	(%rax) # Size: 3
.Ltmp277:
    00004a50: 	movaps	%xmm0, (%rax)
    00004a53: 	addq	$0x10, %rax
    00004a57: 	cmpq	%rbp, %rax
    00004a5a: 	jne	.Ltmp277 # Offset: 19034
    00004a5c: 	callq	clock@PLT # Offset: 19036
    00004a61: 	movl	iterations(%rip), %ecx
    00004a67: 	movq	%rax, start_time(%rip)
    00004a6e: 	testl	%ecx, %ecx
    00004a70: 	jle	.Ltmp278 # Offset: 19056
    00004a76: 	movdqa	DATAat0x11000(%rip), %xmm2
    00004a7e: 	xorl	%ebx, %ebx
    00004a80: 	movabsq	$0xfffffffffffffff, %r12
    00004a8a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp281:
    00004a90: 	leaq	data64unsigned(%rip), %rax
    00004a97: 	pxor	%xmm0, %xmm0
    00004a9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp279:
    00004aa0: 	movdqa	(%rax), %xmm1
    00004aa4: 	addq	$0x10, %rax
    00004aa8: 	pand	%xmm2, %xmm1
    00004aac: 	paddq	%xmm1, %xmm0
    00004ab0: 	cmpq	%rbp, %rax
    00004ab3: 	jne	.Ltmp279 # Offset: 19123
    00004ab5: 	movq	init_value(%rip), %rdx
    00004abc: 	movdqa	%xmm0, %xmm1
    00004ac0: 	psrldq	$0x8, %xmm1
    00004ac5: 	andq	%r12, %rdx
    00004ac8: 	paddq	%xmm1, %xmm0
    00004acc: 	imulq	$0x1f40, %rdx, %rdx
    00004ad3: 	movq	%xmm0, %rax
    00004ad8: 	cmpq	%rax, %rdx
    00004adb: 	je	.Ltmp280 # Offset: 19163
    00004ae1: 	movl	current_test(%rip), %edx
    00004ae7: 	xorl	%eax, %eax
    00004ae9: 	movl	$0x1, %edi
    00004aee: 	addl	$0x1, %ebx
    00004af1: 	leaq	DATAat0x10f44(%rip), %rsi
    00004af8: 	callq	__printf_chk@PLT # Offset: 19192
    00004afd: 	movl	iterations(%rip), %ecx
    00004b03: 	movdqa	DATAat0x11000(%rip), %xmm2
    00004b0b: 	cmpl	%ecx, %ebx
    00004b0d: 	jl	.Ltmp281 # Offset: 19213
.Ltmp278:
    00004b0f: 	callq	clock@PLT # Offset: 19215
    00004b14: 	leaq	DATAat0x10f0f(%rip), %rdi
    00004b1b: 	pxor	%xmm0, %xmm0
    00004b1f: 	movq	%rax, end_time(%rip)
    00004b26: 	subq	start_time(%rip), %rax
    00004b2d: 	cvtsi2sd	%rax, %xmm0
    00004b32: 	divsd	DATAat0x10f68(%rip), %xmm0
    00004b3a: 	callq	_Z13record_resultdPKc # Offset: 19258
    00004b3f: 	movl	$0x4, %edx
    00004b44: 	leaq	DATAat0x109b0(%rip), %rcx
    00004b4b: 	movl	$0x1f40, %esi
    00004b50: 	leaq	data64unsigned(%rip), %rdi
    00004b57: 	callq	_Z14test_variable1Im27mask_high_by_shift_variableImEEvPT_iS2_PKc # Offset: 19287
    00004b5c: 	movl	iterations(%rip), %edx
    00004b62: 	xorl	%r8d, %r8d
    00004b65: 	xorl	%ecx, %ecx
    00004b67: 	movl	$0x1f40, %esi
    00004b6c: 	leaq	DATAat0x10f2b(%rip), %rdi
    00004b73: 	callq	_Z9summarizePKciiii # Offset: 19315
    00004b78: 	addq	$0x88, %rsp
    00004b7f: 	xorl	%eax, %eax
    00004b81: 	popq	%rbx
    00004b82: 	popq	%rbp
    00004b83: 	popq	%r12
    00004b85: 	popq	%r13
    00004b87: 	popq	%r14
    00004b89: 	popq	%r15
    00004b8b: 	retq # Offset: 19339
    00004b8c: 	nopl	(%rax) # Size: 4
.Ltmp280:
    00004b90: 	addl	$0x1, %ebx
    00004b93: 	cmpl	%ecx, %ebx
    00004b95: 	jl	.Ltmp281 # Offset: 19349
    00004b9b: 	jmp	.Ltmp278 # Offset: 19355
.Ltmp206:
    00004ba0: 	movl	current_test(%rip), %edx
    00004ba6: 	xorl	%eax, %eax
    00004ba8: 	movl	$0x1, %edi
    00004bad: 	movl	%ecx, 0x18(%rsp)
    00004bb1: 	movaps	%xmm2, (%rsp)
    00004bb5: 	callq	__printf_chk@PLT # Offset: 19381
    00004bba: 	movl	0x18(%rsp), %ecx
    00004bbe: 	movl	iterations(%rip), %edx
    00004bc4: 	leaq	DATAat0x10f44(%rip), %rsi
    00004bcb: 	movdqa	(%rsp), %xmm2
    00004bd0: 	movdqa	DATAat0x11030(%rip), %xmm3
    00004bd8: 	addl	$0x1, %ecx
    00004bdb: 	cmpl	%edx, %ecx
    00004bdd: 	jl	.Ltmp207 # Offset: 19421
    00004be3: 	jmp	.Ltmp204 # Offset: 19427
    00004be8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp202:
    00004bf0: 	movl	current_test(%rip), %edx
    00004bf6: 	xorl	%eax, %eax
    00004bf8: 	movl	$0x1, %edi
    00004bfd: 	movl	%ecx, 0x18(%rsp)
    00004c01: 	movaps	%xmm0, (%rsp)
    00004c05: 	callq	__printf_chk@PLT # Offset: 19461
    00004c0a: 	movl	0x18(%rsp), %ecx
    00004c0e: 	movl	iterations(%rip), %edx
    00004c14: 	leaq	DATAat0x10f44(%rip), %rsi
    00004c1b: 	movdqa	(%rsp), %xmm0
    00004c20: 	addl	$0x1, %ecx
    00004c23: 	cmpl	%edx, %ecx
    00004c25: 	jl	.Ltmp203 # Offset: 19493
    00004c2b: 	jmp	.Ltmp200 # Offset: 19499
.Ltmp198:
    00004c30: 	movl	current_test(%rip), %edx
    00004c36: 	xorl	%eax, %eax
    00004c38: 	movl	$0x1, %edi
    00004c3d: 	movl	%ecx, 0x18(%rsp)
    00004c41: 	movaps	%xmm2, (%rsp)
    00004c45: 	callq	__printf_chk@PLT # Offset: 19525
    00004c4a: 	movl	0x18(%rsp), %ecx
    00004c4e: 	movl	iterations(%rip), %edx
    00004c54: 	leaq	DATAat0x10f44(%rip), %rsi
    00004c5b: 	movdqa	(%rsp), %xmm2
    00004c60: 	addl	$0x1, %ecx
    00004c63: 	cmpl	%edx, %ecx
    00004c65: 	jl	.Ltmp199 # Offset: 19557
    00004c6b: 	jmp	.Ltmp196 # Offset: 19563
.Ltmp194:
    00004c70: 	movl	current_test(%rip), %edx
    00004c76: 	xorl	%eax, %eax
    00004c78: 	movl	$0x1, %edi
    00004c7d: 	movl	%ecx, 0x18(%rsp)
    00004c81: 	movaps	%xmm0, (%rsp)
    00004c85: 	callq	__printf_chk@PLT # Offset: 19589
    00004c8a: 	movl	0x18(%rsp), %ecx
    00004c8e: 	movl	iterations(%rip), %edx
    00004c94: 	leaq	DATAat0x10f44(%rip), %rsi
    00004c9b: 	movdqa	(%rsp), %xmm0
    00004ca0: 	addl	$0x1, %ecx
    00004ca3: 	cmpl	%edx, %ecx
    00004ca5: 	jl	.Ltmp195 # Offset: 19621
    00004cab: 	jmp	.Ltmp192 # Offset: 19627
.Ltmp30:
    00004cb0: 	movl	current_test(%rip), %edx
    00004cb6: 	movq	%rbp, %rsi
    00004cb9: 	movl	$0x1, %edi
    00004cbe: 	xorl	%eax, %eax
    00004cc0: 	addl	$0x1, %ebx
    00004cc3: 	callq	__printf_chk@PLT # Offset: 19651
    00004cc8: 	movl	iterations(%rip), %edx
    00004cce: 	cmpl	%edx, %ebx
    00004cd0: 	jl	.Ltmp31 # Offset: 19664
    00004cd6: 	jmp	.Ltmp28 # Offset: 19670
    00004cdb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp26:
    00004ce0: 	movl	current_test(%rip), %edx
    00004ce6: 	movq	%rbx, %rsi
    00004ce9: 	movl	$0x1, %edi
    00004cee: 	xorl	%eax, %eax
    00004cf0: 	addl	$0x1, %ebp
    00004cf3: 	callq	__printf_chk@PLT # Offset: 19699
    00004cf8: 	movl	iterations(%rip), %edx
    00004cfe: 	cmpl	%edx, %ebp
    00004d00: 	jl	.Ltmp27 # Offset: 19712
    00004d06: 	jmp	.Ltmp24 # Offset: 19718
    00004d0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp10:
    00004d10: 	movl	current_test(%rip), %edx
    00004d16: 	movq	%rbp, %rsi
    00004d19: 	movl	$0x1, %edi
    00004d1e: 	xorl	%eax, %eax
    00004d20: 	addl	$0x1, %ebx
    00004d23: 	callq	__printf_chk@PLT # Offset: 19747
    00004d28: 	movl	iterations(%rip), %edx
    00004d2e: 	cmpl	%edx, %ebx
    00004d30: 	jl	.Ltmp11 # Offset: 19760
    00004d36: 	jmp	.Ltmp8 # Offset: 19766
    00004d3b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp6:
    00004d40: 	movl	current_test(%rip), %edx
    00004d46: 	movq	%rbx, %rsi
    00004d49: 	movl	$0x1, %edi
    00004d4e: 	xorl	%eax, %eax
    00004d50: 	addl	$0x1, %ebp
    00004d53: 	callq	__printf_chk@PLT # Offset: 19795
    00004d58: 	movl	iterations(%rip), %edx
    00004d5e: 	cmpl	%edx, %ebp
    00004d60: 	jl	.Ltmp7 # Offset: 19808
    00004d66: 	jmp	.Ltmp4 # Offset: 19814
.Ltmp3:
    00004d6b: 	movq	0x8(%r14), %rdi
    00004d6f: 	movl	$0xa, %edx
    00004d74: 	xorl	%esi, %esi
    00004d76: 	callq	strtol@PLT # Offset: 19830
    00004d7b: 	movl	%eax, iterations(%rip)
    00004d81: 	cmpl	$0x2, %r13d
    00004d85: 	jle	.Ltmp282 # Offset: 19845
    00004d8b: 	movq	0x10(%r14), %rdi
    00004d8f: 	movl	$0xa, %edx
    00004d94: 	xorl	%esi, %esi
    00004d96: 	callq	strtol@PLT # Offset: 19862
    00004d9b: 	cltq
    00004d9d: 	movq	%rax, init_value(%rip)
    00004da4: 	cmpl	$0x3, %r13d
    00004da8: 	jle	.Ltmp282 # Offset: 19880
    00004dae: 	movq	0x18(%r14), %rdi
    00004db2: 	movl	$0xa, %edx
    00004db7: 	xorl	%esi, %esi
    00004db9: 	callq	strtol@PLT # Offset: 19897
    00004dbe: 	movq	%rax, %rdx
    00004dc1: 	movl	%eax, 0x58(%rsp)
    00004dc5: 	movl	$0x5, %eax
    00004dca: 	imull	%edx, %eax
    00004dcd: 	movl	%edx, 0x64(%rsp)
    00004dd1: 	movzbl	%al, %ebx
    00004dd4: 	movsbl	%al, %eax
    00004dd7: 	movl	%eax, 0x24(%rsp)
    00004ddb: 	movsbl	%dl, %eax
    00004dde: 	movl	%eax, 0x5c(%rsp)
    00004de2: 	leal	(%rdx,%rdx,4), %eax
    00004de5: 	movl	%ebx, 0x18(%rsp)
    00004de9: 	movzwl	%ax, %ebx
    00004dec: 	cwtl
    00004ded: 	movl	%eax, 0x2c(%rsp)
    00004df1: 	movswl	%dx, %eax
    00004df4: 	movl	%eax, 0x60(%rsp)
    00004df8: 	leal	(%rdx,%rdx,4), %eax
    00004dfb: 	movl	%eax, (%rsp)
    00004dfe: 	movslq	%edx, %rax
    00004e01: 	movq	%rax, 0x68(%rsp)
    00004e06: 	movq	%rax, 0x70(%rsp)
    00004e0b: 	movzwl	%dx, %eax
    00004e0e: 	movl	%eax, 0x78(%rsp)
    00004e12: 	movzbl	%dl, %eax
    00004e15: 	movl	%ebx, 0x28(%rsp)
    00004e19: 	movl	%eax, 0x7c(%rsp)
    00004e1d: 	jmp	.Ltmp283 # Offset: 19997
.Ltmp1:
    00004e22: 	leaq	DATAat0x109f9(%rip), %rsi
    00004e29: 	movl	$0x1, %edi
    00004e2e: 	xorl	%eax, %eax
    00004e30: 	callq	__printf_chk@PLT # Offset: 20016
    00004e35: 	jmp	.Ltmp282 # Offset: 20021
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x5fa0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x5fa0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x13fd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 4
  State       : disassembled
  Address     : 0x5fd0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x5fd0
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp284 # Offset: 17
    00000013: 	movq	DATAat0x13fe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp284 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp284:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x6000
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x6000
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp285 # Offset: 34
    00000024: 	movq	DATAat0x13ff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp285 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp285:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x6040
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x6040
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp286 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp287 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp287:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp286:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x6080
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x6080
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 8
  State       : disassembled
  Address     : 0x6090
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x6090
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp288 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp289 # Offset: 38
.Ltmp288:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp290 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp289:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp290:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x10008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x6130
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x6130
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp291 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp292 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp293:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp293 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp306:
    00000069: 	leaq	DATAat0x10a15(%rip), %rbp
    00000070: 	leaq	DATAat0x10028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x10068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp294 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x10f70(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x10098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x10f68(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp295 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp299:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp296 # Offset: 244
    000000fa: 	movq	DATAat0x10f58(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp300:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x10f58(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp297 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp297:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x109fa(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x10f70(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp298 # Offset: 398
.Ltmp295:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp299 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp300 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp296:
    000001c8: 	movq	DATAat0x10f60(%rip), %rsi
    000001cf: 	movq	DATAat0x10f58(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp297 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp298:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp294 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp301 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp302:
    00000210: 	addq	$0x10, %rax
.Ltmp301:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp302 # Offset: 542
.Ltmp307:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x100c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp303 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp304 # Offset: 592
.Ltmp303:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp291:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp304:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp305:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp305 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x109d5(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp291 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp292:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp306 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp294:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp307 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x6460
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x6460
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp308 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp309 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp310:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp310 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp315:
    0000006a: 	leaq	DATAat0x10a15(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x100f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x109fb(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x10a15(%rip), %r8
    000000a1: 	leaq	DATAat0x109e9(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp311 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp312:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x109fa(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp312 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp311 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp313 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp314:
    00000140: 	addq	$0x10, %rax
.Ltmp313:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp314 # Offset: 334
.Ltmp316:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x100c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp308:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp309:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp315 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp311:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp316 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x6610
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x6610
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x6630
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x6630
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_Z13test_constantIh20shift_right_constantIhEEvPT_iPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x6670
  Size        : 0x2ea
  MaxSize     : 0x2f0
  Offset      : 0x6670
  Section     : .text
  Orc Section : .local.text._Z13test_constantIh20shift_right_constantIhEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp317 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	movq	init_value(%rip), %rdi
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r13d, %eax
    0000004f: 	movdqa	DATAat0x10f80(%rip), %xmm2
    00000057: 	andl	$-0x10, %ebx
    0000005a: 	shrl	$0x4, %eax
    0000005d: 	leaq	DATAat0x10f44(%rip), %rbp
    00000064: 	subl	$0x1, %eax
    00000067: 	shlq	$0x4, %rax
    0000006b: 	leaq	0x10(%r14,%rax), %r15
.Ltmp322:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp318 # Offset: 117
    0000007b: 	cmpl	$0xe, 0x4(%rsp)
    00000080: 	jbe	.Ltmp319 # Offset: 128
    00000086: 	movq	%r14, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp320:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrlw	$0x5, %xmm0
    0000009d: 	pand	%xmm2, %xmm0
    000000a1: 	paddb	%xmm0, %xmm1
    000000a5: 	cmpq	%r15, %rax
    000000a8: 	jne	.Ltmp320 # Offset: 168
    000000aa: 	movdqa	%xmm1, %xmm0
    000000ae: 	pxor	%xmm3, %xmm3
    000000b2: 	psrldq	$0x8, %xmm0
    000000b7: 	paddb	%xmm0, %xmm1
    000000bb: 	psadbw	%xmm3, %xmm1
    000000bf: 	movd	%xmm1, %eax
    000000c3: 	cmpl	%r13d, %ebx
    000000c6: 	je	.Ltmp318 # Offset: 198
    000000cc: 	movl	%ebx, %edx
.Ltmp323:
    000000ce: 	movslq	%edx, %r9
    000000d1: 	movzbl	(%r14,%r9), %r9d
    000000d6: 	shrb	$0x5, %r9b
    000000da: 	addl	%r9d, %eax
    000000dd: 	leal	0x1(%rdx), %r9d
    000000e1: 	cmpl	%r9d, %r13d
    000000e4: 	jle	.Ltmp318 # Offset: 228
    000000ea: 	movslq	%r9d, %r9
    000000ed: 	movzbl	(%r14,%r9), %r9d
    000000f2: 	shrb	$0x5, %r9b
    000000f6: 	addl	%r9d, %eax
    000000f9: 	leal	0x2(%rdx), %r9d
    000000fd: 	cmpl	%r9d, %r13d
    00000100: 	jle	.Ltmp318 # Offset: 256
    00000106: 	movslq	%r9d, %r9
    00000109: 	movzbl	(%r14,%r9), %r9d
    0000010e: 	shrb	$0x5, %r9b
    00000112: 	addl	%r9d, %eax
    00000115: 	leal	0x3(%rdx), %r9d
    00000119: 	cmpl	%r9d, %r13d
    0000011c: 	jle	.Ltmp318 # Offset: 284
    00000122: 	movslq	%r9d, %r9
    00000125: 	movzbl	(%r14,%r9), %r9d
    0000012a: 	shrb	$0x5, %r9b
    0000012e: 	addl	%r9d, %eax
    00000131: 	leal	0x4(%rdx), %r9d
    00000135: 	cmpl	%r9d, %r13d
    00000138: 	jle	.Ltmp318 # Offset: 312
    0000013e: 	movslq	%r9d, %r9
    00000141: 	movzbl	(%r14,%r9), %r9d
    00000146: 	shrb	$0x5, %r9b
    0000014a: 	addl	%r9d, %eax
    0000014d: 	leal	0x5(%rdx), %r9d
    00000151: 	cmpl	%r9d, %r13d
    00000154: 	jle	.Ltmp318 # Offset: 340
    0000015a: 	movslq	%r9d, %r9
    0000015d: 	movzbl	(%r14,%r9), %r9d
    00000162: 	shrb	$0x5, %r9b
    00000166: 	addl	%r9d, %eax
    00000169: 	leal	0x6(%rdx), %r9d
    0000016d: 	cmpl	%r9d, %r13d
    00000170: 	jle	.Ltmp318 # Offset: 368
    00000176: 	movslq	%r9d, %r9
    00000179: 	movzbl	(%r14,%r9), %r9d
    0000017e: 	shrb	$0x5, %r9b
    00000182: 	addl	%r9d, %eax
    00000185: 	leal	0x7(%rdx), %r9d
    00000189: 	cmpl	%r9d, %r13d
    0000018c: 	jle	.Ltmp318 # Offset: 396
    00000192: 	movslq	%r9d, %r9
    00000195: 	movzbl	(%r14,%r9), %r9d
    0000019a: 	shrb	$0x5, %r9b
    0000019e: 	addl	%r9d, %eax
    000001a1: 	leal	0x8(%rdx), %r9d
    000001a5: 	cmpl	%r9d, %r13d
    000001a8: 	jle	.Ltmp318 # Offset: 424
    000001ae: 	movslq	%r9d, %r9
    000001b1: 	movzbl	(%r14,%r9), %r9d
    000001b6: 	shrb	$0x5, %r9b
    000001ba: 	addl	%r9d, %eax
    000001bd: 	leal	0x9(%rdx), %r9d
    000001c1: 	cmpl	%r9d, %r13d
    000001c4: 	jle	.Ltmp318 # Offset: 452
    000001ca: 	movslq	%r9d, %r9
    000001cd: 	movzbl	(%r14,%r9), %r9d
    000001d2: 	shrb	$0x5, %r9b
    000001d6: 	addl	%r9d, %eax
    000001d9: 	leal	0xa(%rdx), %r9d
    000001dd: 	cmpl	%r9d, %r13d
    000001e0: 	jle	.Ltmp318 # Offset: 480
    000001e2: 	movslq	%r9d, %r9
    000001e5: 	movzbl	(%r14,%r9), %r9d
    000001ea: 	shrb	$0x5, %r9b
    000001ee: 	addl	%r9d, %eax
    000001f1: 	leal	0xb(%rdx), %r9d
    000001f5: 	cmpl	%r9d, %r13d
    000001f8: 	jle	.Ltmp318 # Offset: 504
    000001fa: 	movslq	%r9d, %r9
    000001fd: 	movzbl	(%r14,%r9), %r9d
    00000202: 	shrb	$0x5, %r9b
    00000206: 	addl	%r9d, %eax
    00000209: 	leal	0xc(%rdx), %r9d
    0000020d: 	cmpl	%r9d, %r13d
    00000210: 	jle	.Ltmp318 # Offset: 528
    00000212: 	movslq	%r9d, %r9
    00000215: 	movzbl	(%r14,%r9), %r9d
    0000021a: 	shrb	$0x5, %r9b
    0000021e: 	addl	%r9d, %eax
    00000221: 	leal	0xd(%rdx), %r9d
    00000225: 	cmpl	%r9d, %r13d
    00000228: 	jle	.Ltmp318 # Offset: 552
    0000022a: 	movslq	%r9d, %r9
    0000022d: 	addl	$0xe, %edx
    00000230: 	movzbl	(%r14,%r9), %r9d
    00000235: 	shrb	$0x5, %r9b
    00000239: 	addl	%r9d, %eax
    0000023c: 	cmpl	%edx, %r13d
    0000023f: 	jle	.Ltmp318 # Offset: 575
    00000241: 	movslq	%edx, %rdx
    00000244: 	movzbl	(%r14,%rdx), %edx
    00000249: 	shrb	$0x5, %dl
    0000024c: 	addl	%edx, %eax
    0000024e: 	nop # Size: 2
.Ltmp318:
    00000250: 	movl	%edi, %edx
    00000252: 	shrb	$0x5, %dl
    00000255: 	shll	$0x6, %edx
    00000258: 	cmpb	%al, %dl
    0000025a: 	je	.Ltmp321 # Offset: 602
    0000025c: 	movl	current_test(%rip), %edx
    00000262: 	movq	%rbp, %rsi
    00000265: 	movl	$0x1, %edi
    0000026a: 	xorl	%eax, %eax
    0000026c: 	addl	$0x1, %r12d
    00000270: 	callq	__printf_chk@PLT # Offset: 624
    00000275: 	movl	iterations(%rip), %esi
    0000027b: 	cmpl	%esi, %r12d
    0000027e: 	jge	.Ltmp317 # Offset: 638
    00000280: 	movq	init_value(%rip), %rdi
    00000287: 	movdqa	DATAat0x10f80(%rip), %xmm2
    0000028f: 	jmp	.Ltmp322 # Offset: 655
    00000294: 	nopl	(%rax) # Size: 4
.Ltmp321:
    00000298: 	addl	$0x1, %r12d
    0000029c: 	cmpl	%esi, %r12d
    0000029f: 	jl	.Ltmp322 # Offset: 671
.Ltmp317:
    000002a5: 	callq	clock@PLT # Offset: 677
    000002aa: 	pxor	%xmm0, %xmm0
    000002ae: 	movq	0x8(%rsp), %rdi
    000002b3: 	movq	%rax, end_time(%rip)
    000002ba: 	subq	start_time(%rip), %rax
    000002c1: 	cvtsi2sd	%rax, %xmm0
    000002c6: 	divsd	DATAat0x10f68(%rip), %xmm0
    000002ce: 	addq	$0x18, %rsp
    000002d2: 	popq	%rbx
    000002d3: 	popq	%rbp
    000002d4: 	popq	%r12
    000002d6: 	popq	%r13
    000002d8: 	popq	%r14
    000002da: 	popq	%r15
    000002dc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 732
.Ltmp319:
    000002e1: 	xorl	%edx, %edx
    000002e3: 	xorl	%eax, %eax
    000002e5: 	jmp	.Ltmp323 # Offset: 741
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIh20shift_right_constantIhEEvPT_iPKc"

Binary Function "_Z13test_constantIh29shift_right_repeated_constantIhEEvPT_iPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x6960
  Size        : 0x2ea
  MaxSize     : 0x2f0
  Offset      : 0x6960
  Section     : .text
  Orc Section : .local.text._Z13test_constantIh29shift_right_repeated_constantIhEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp324 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	movq	init_value(%rip), %rdi
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r13d, %eax
    0000004f: 	movdqa	DATAat0x10f80(%rip), %xmm2
    00000057: 	andl	$-0x10, %ebx
    0000005a: 	shrl	$0x4, %eax
    0000005d: 	leaq	DATAat0x10f44(%rip), %rbp
    00000064: 	subl	$0x1, %eax
    00000067: 	shlq	$0x4, %rax
    0000006b: 	leaq	0x10(%r14,%rax), %r15
.Ltmp329:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp325 # Offset: 117
    0000007b: 	cmpl	$0xe, 0x4(%rsp)
    00000080: 	jbe	.Ltmp326 # Offset: 128
    00000086: 	movq	%r14, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp327:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrlw	$0x5, %xmm0
    0000009d: 	pand	%xmm2, %xmm0
    000000a1: 	paddb	%xmm0, %xmm1
    000000a5: 	cmpq	%r15, %rax
    000000a8: 	jne	.Ltmp327 # Offset: 168
    000000aa: 	movdqa	%xmm1, %xmm0
    000000ae: 	pxor	%xmm3, %xmm3
    000000b2: 	psrldq	$0x8, %xmm0
    000000b7: 	paddb	%xmm0, %xmm1
    000000bb: 	psadbw	%xmm3, %xmm1
    000000bf: 	movd	%xmm1, %eax
    000000c3: 	cmpl	%r13d, %ebx
    000000c6: 	je	.Ltmp325 # Offset: 198
    000000cc: 	movl	%ebx, %edx
.Ltmp330:
    000000ce: 	movslq	%edx, %r9
    000000d1: 	movzbl	(%r14,%r9), %r9d
    000000d6: 	shrb	$0x5, %r9b
    000000da: 	addl	%r9d, %eax
    000000dd: 	leal	0x1(%rdx), %r9d
    000000e1: 	cmpl	%r9d, %r13d
    000000e4: 	jle	.Ltmp325 # Offset: 228
    000000ea: 	movslq	%r9d, %r9
    000000ed: 	movzbl	(%r14,%r9), %r9d
    000000f2: 	shrb	$0x5, %r9b
    000000f6: 	addl	%r9d, %eax
    000000f9: 	leal	0x2(%rdx), %r9d
    000000fd: 	cmpl	%r9d, %r13d
    00000100: 	jle	.Ltmp325 # Offset: 256
    00000106: 	movslq	%r9d, %r9
    00000109: 	movzbl	(%r14,%r9), %r9d
    0000010e: 	shrb	$0x5, %r9b
    00000112: 	addl	%r9d, %eax
    00000115: 	leal	0x3(%rdx), %r9d
    00000119: 	cmpl	%r9d, %r13d
    0000011c: 	jle	.Ltmp325 # Offset: 284
    00000122: 	movslq	%r9d, %r9
    00000125: 	movzbl	(%r14,%r9), %r9d
    0000012a: 	shrb	$0x5, %r9b
    0000012e: 	addl	%r9d, %eax
    00000131: 	leal	0x4(%rdx), %r9d
    00000135: 	cmpl	%r9d, %r13d
    00000138: 	jle	.Ltmp325 # Offset: 312
    0000013e: 	movslq	%r9d, %r9
    00000141: 	movzbl	(%r14,%r9), %r9d
    00000146: 	shrb	$0x5, %r9b
    0000014a: 	addl	%r9d, %eax
    0000014d: 	leal	0x5(%rdx), %r9d
    00000151: 	cmpl	%r9d, %r13d
    00000154: 	jle	.Ltmp325 # Offset: 340
    0000015a: 	movslq	%r9d, %r9
    0000015d: 	movzbl	(%r14,%r9), %r9d
    00000162: 	shrb	$0x5, %r9b
    00000166: 	addl	%r9d, %eax
    00000169: 	leal	0x6(%rdx), %r9d
    0000016d: 	cmpl	%r9d, %r13d
    00000170: 	jle	.Ltmp325 # Offset: 368
    00000176: 	movslq	%r9d, %r9
    00000179: 	movzbl	(%r14,%r9), %r9d
    0000017e: 	shrb	$0x5, %r9b
    00000182: 	addl	%r9d, %eax
    00000185: 	leal	0x7(%rdx), %r9d
    00000189: 	cmpl	%r9d, %r13d
    0000018c: 	jle	.Ltmp325 # Offset: 396
    00000192: 	movslq	%r9d, %r9
    00000195: 	movzbl	(%r14,%r9), %r9d
    0000019a: 	shrb	$0x5, %r9b
    0000019e: 	addl	%r9d, %eax
    000001a1: 	leal	0x8(%rdx), %r9d
    000001a5: 	cmpl	%r9d, %r13d
    000001a8: 	jle	.Ltmp325 # Offset: 424
    000001ae: 	movslq	%r9d, %r9
    000001b1: 	movzbl	(%r14,%r9), %r9d
    000001b6: 	shrb	$0x5, %r9b
    000001ba: 	addl	%r9d, %eax
    000001bd: 	leal	0x9(%rdx), %r9d
    000001c1: 	cmpl	%r9d, %r13d
    000001c4: 	jle	.Ltmp325 # Offset: 452
    000001ca: 	movslq	%r9d, %r9
    000001cd: 	movzbl	(%r14,%r9), %r9d
    000001d2: 	shrb	$0x5, %r9b
    000001d6: 	addl	%r9d, %eax
    000001d9: 	leal	0xa(%rdx), %r9d
    000001dd: 	cmpl	%r9d, %r13d
    000001e0: 	jle	.Ltmp325 # Offset: 480
    000001e2: 	movslq	%r9d, %r9
    000001e5: 	movzbl	(%r14,%r9), %r9d
    000001ea: 	shrb	$0x5, %r9b
    000001ee: 	addl	%r9d, %eax
    000001f1: 	leal	0xb(%rdx), %r9d
    000001f5: 	cmpl	%r9d, %r13d
    000001f8: 	jle	.Ltmp325 # Offset: 504
    000001fa: 	movslq	%r9d, %r9
    000001fd: 	movzbl	(%r14,%r9), %r9d
    00000202: 	shrb	$0x5, %r9b
    00000206: 	addl	%r9d, %eax
    00000209: 	leal	0xc(%rdx), %r9d
    0000020d: 	cmpl	%r9d, %r13d
    00000210: 	jle	.Ltmp325 # Offset: 528
    00000212: 	movslq	%r9d, %r9
    00000215: 	movzbl	(%r14,%r9), %r9d
    0000021a: 	shrb	$0x5, %r9b
    0000021e: 	addl	%r9d, %eax
    00000221: 	leal	0xd(%rdx), %r9d
    00000225: 	cmpl	%r9d, %r13d
    00000228: 	jle	.Ltmp325 # Offset: 552
    0000022a: 	movslq	%r9d, %r9
    0000022d: 	addl	$0xe, %edx
    00000230: 	movzbl	(%r14,%r9), %r9d
    00000235: 	shrb	$0x5, %r9b
    00000239: 	addl	%r9d, %eax
    0000023c: 	cmpl	%edx, %r13d
    0000023f: 	jle	.Ltmp325 # Offset: 575
    00000241: 	movslq	%edx, %rdx
    00000244: 	movzbl	(%r14,%rdx), %edx
    00000249: 	shrb	$0x5, %dl
    0000024c: 	addl	%edx, %eax
    0000024e: 	nop # Size: 2
.Ltmp325:
    00000250: 	movl	%edi, %edx
    00000252: 	shrb	$0x5, %dl
    00000255: 	shll	$0x6, %edx
    00000258: 	cmpb	%al, %dl
    0000025a: 	je	.Ltmp328 # Offset: 602
    0000025c: 	movl	current_test(%rip), %edx
    00000262: 	movq	%rbp, %rsi
    00000265: 	movl	$0x1, %edi
    0000026a: 	xorl	%eax, %eax
    0000026c: 	addl	$0x1, %r12d
    00000270: 	callq	__printf_chk@PLT # Offset: 624
    00000275: 	movl	iterations(%rip), %esi
    0000027b: 	cmpl	%esi, %r12d
    0000027e: 	jge	.Ltmp324 # Offset: 638
    00000280: 	movq	init_value(%rip), %rdi
    00000287: 	movdqa	DATAat0x10f80(%rip), %xmm2
    0000028f: 	jmp	.Ltmp329 # Offset: 655
    00000294: 	nopl	(%rax) # Size: 4
.Ltmp328:
    00000298: 	addl	$0x1, %r12d
    0000029c: 	cmpl	%esi, %r12d
    0000029f: 	jl	.Ltmp329 # Offset: 671
.Ltmp324:
    000002a5: 	callq	clock@PLT # Offset: 677
    000002aa: 	pxor	%xmm0, %xmm0
    000002ae: 	movq	0x8(%rsp), %rdi
    000002b3: 	movq	%rax, end_time(%rip)
    000002ba: 	subq	start_time(%rip), %rax
    000002c1: 	cvtsi2sd	%rax, %xmm0
    000002c6: 	divsd	DATAat0x10f68(%rip), %xmm0
    000002ce: 	addq	$0x18, %rsp
    000002d2: 	popq	%rbx
    000002d3: 	popq	%rbp
    000002d4: 	popq	%r12
    000002d6: 	popq	%r13
    000002d8: 	popq	%r14
    000002da: 	popq	%r15
    000002dc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 732
.Ltmp326:
    000002e1: 	xorl	%edx, %edx
    000002e3: 	xorl	%eax, %eax
    000002e5: 	jmp	.Ltmp330 # Offset: 741
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIh29shift_right_repeated_constantIhEEvPT_iPKc"

Binary Function "_Z13test_constantIa20shift_right_constantIaEEvPT_iPKc" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x6c50
  Size        : 0x312
  MaxSize     : 0x320
  Offset      : 0x6c50
  Section     : .text
  Orc Section : .local.text._Z13test_constantIa20shift_right_constantIaEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp331 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	movdqa	DATAat0x10f80(%rip), %xmm3
    0000004d: 	movl	%eax, 0x4(%rsp)
    00000051: 	movl	%r13d, %eax
    00000054: 	andl	$-0x10, %ebx
    00000057: 	xorl	%r12d, %r12d
    0000005a: 	shrl	$0x4, %eax
    0000005d: 	movdqa	DATAat0x10f90(%rip), %xmm2
    00000065: 	leaq	DATAat0x10f44(%rip), %rbp
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%r14,%rax), %r15
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp336:
    00000080: 	xorl	%eax, %eax
    00000082: 	testl	%r13d, %r13d
    00000085: 	jle	.Ltmp332 # Offset: 133
    0000008b: 	cmpl	$0xe, 0x4(%rsp)
    00000090: 	jbe	.Ltmp333 # Offset: 144
    00000096: 	movq	%r14, %rax
    00000099: 	pxor	%xmm1, %xmm1
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp334:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	addq	$0x10, %rax
    000000a8: 	psraw	$0x5, %xmm0
    000000ad: 	pand	%xmm3, %xmm0
    000000b1: 	pxor	%xmm2, %xmm0
    000000b5: 	psubb	%xmm2, %xmm0
    000000b9: 	paddb	%xmm0, %xmm1
    000000bd: 	cmpq	%r15, %rax
    000000c0: 	jne	.Ltmp334 # Offset: 192
    000000c2: 	movdqa	%xmm1, %xmm0
    000000c6: 	psrldq	$0x8, %xmm0
    000000cb: 	paddb	%xmm0, %xmm1
    000000cf: 	pxor	%xmm0, %xmm0
    000000d3: 	psadbw	%xmm0, %xmm1
    000000d7: 	movd	%xmm1, %eax
    000000db: 	cmpl	%r13d, %ebx
    000000de: 	je	.Ltmp332 # Offset: 222
    000000e4: 	movl	%ebx, %edx
.Ltmp337:
    000000e6: 	movslq	%edx, %r9
    000000e9: 	movzbl	(%r14,%r9), %r9d
    000000ee: 	sarb	$0x5, %r9b
    000000f2: 	addl	%r9d, %eax
    000000f5: 	leal	0x1(%rdx), %r9d
    000000f9: 	cmpl	%r9d, %r13d
    000000fc: 	jle	.Ltmp332 # Offset: 252
    00000102: 	movslq	%r9d, %r9
    00000105: 	movzbl	(%r14,%r9), %r9d
    0000010a: 	sarb	$0x5, %r9b
    0000010e: 	addl	%r9d, %eax
    00000111: 	leal	0x2(%rdx), %r9d
    00000115: 	cmpl	%r9d, %r13d
    00000118: 	jle	.Ltmp332 # Offset: 280
    0000011e: 	movslq	%r9d, %r9
    00000121: 	movzbl	(%r14,%r9), %r9d
    00000126: 	sarb	$0x5, %r9b
    0000012a: 	addl	%r9d, %eax
    0000012d: 	leal	0x3(%rdx), %r9d
    00000131: 	cmpl	%r9d, %r13d
    00000134: 	jle	.Ltmp332 # Offset: 308
    0000013a: 	movslq	%r9d, %r9
    0000013d: 	movzbl	(%r14,%r9), %r9d
    00000142: 	sarb	$0x5, %r9b
    00000146: 	addl	%r9d, %eax
    00000149: 	leal	0x4(%rdx), %r9d
    0000014d: 	cmpl	%r9d, %r13d
    00000150: 	jle	.Ltmp332 # Offset: 336
    00000156: 	movslq	%r9d, %r9
    00000159: 	movzbl	(%r14,%r9), %r9d
    0000015e: 	sarb	$0x5, %r9b
    00000162: 	addl	%r9d, %eax
    00000165: 	leal	0x5(%rdx), %r9d
    00000169: 	cmpl	%r9d, %r13d
    0000016c: 	jle	.Ltmp332 # Offset: 364
    00000172: 	movslq	%r9d, %r9
    00000175: 	movzbl	(%r14,%r9), %r9d
    0000017a: 	sarb	$0x5, %r9b
    0000017e: 	addl	%r9d, %eax
    00000181: 	leal	0x6(%rdx), %r9d
    00000185: 	cmpl	%r9d, %r13d
    00000188: 	jle	.Ltmp332 # Offset: 392
    0000018e: 	movslq	%r9d, %r9
    00000191: 	movzbl	(%r14,%r9), %r9d
    00000196: 	sarb	$0x5, %r9b
    0000019a: 	addl	%r9d, %eax
    0000019d: 	leal	0x7(%rdx), %r9d
    000001a1: 	cmpl	%r9d, %r13d
    000001a4: 	jle	.Ltmp332 # Offset: 420
    000001aa: 	movslq	%r9d, %r9
    000001ad: 	movzbl	(%r14,%r9), %r9d
    000001b2: 	sarb	$0x5, %r9b
    000001b6: 	addl	%r9d, %eax
    000001b9: 	leal	0x8(%rdx), %r9d
    000001bd: 	cmpl	%r9d, %r13d
    000001c0: 	jle	.Ltmp332 # Offset: 448
    000001c6: 	movslq	%r9d, %r9
    000001c9: 	movzbl	(%r14,%r9), %r9d
    000001ce: 	sarb	$0x5, %r9b
    000001d2: 	addl	%r9d, %eax
    000001d5: 	leal	0x9(%rdx), %r9d
    000001d9: 	cmpl	%r9d, %r13d
    000001dc: 	jle	.Ltmp332 # Offset: 476
    000001e2: 	movslq	%r9d, %r9
    000001e5: 	leal	0xa(%rdx), %r10d
    000001e9: 	movzbl	(%r14,%r9), %r9d
    000001ee: 	sarb	$0x5, %r9b
    000001f2: 	addl	%eax, %r9d
    000001f5: 	movl	%r9d, %eax
    000001f8: 	cmpl	%r10d, %r13d
    000001fb: 	jle	.Ltmp332 # Offset: 507
    000001fd: 	movslq	%r10d, %r10
    00000200: 	movzbl	(%r14,%r10), %eax
    00000205: 	sarb	$0x5, %al
    00000208: 	addl	%r9d, %eax
    0000020b: 	leal	0xb(%rdx), %r9d
    0000020f: 	cmpl	%r9d, %r13d
    00000212: 	jle	.Ltmp332 # Offset: 530
    00000214: 	movslq	%r9d, %r9
    00000217: 	movzbl	(%r14,%r9), %r9d
    0000021c: 	sarb	$0x5, %r9b
    00000220: 	addl	%r9d, %eax
    00000223: 	leal	0xc(%rdx), %r9d
    00000227: 	cmpl	%r9d, %r13d
    0000022a: 	jle	.Ltmp332 # Offset: 554
    0000022c: 	movslq	%r9d, %r9
    0000022f: 	movzbl	(%r14,%r9), %r9d
    00000234: 	sarb	$0x5, %r9b
    00000238: 	addl	%r9d, %eax
    0000023b: 	leal	0xd(%rdx), %r9d
    0000023f: 	cmpl	%r9d, %r13d
    00000242: 	jle	.Ltmp332 # Offset: 578
    00000244: 	movslq	%r9d, %r9
    00000247: 	addl	$0xe, %edx
    0000024a: 	movzbl	(%r14,%r9), %r9d
    0000024f: 	sarb	$0x5, %r9b
    00000253: 	addl	%r9d, %eax
    00000256: 	cmpl	%edx, %r13d
    00000259: 	jle	.Ltmp332 # Offset: 601
    0000025b: 	movslq	%edx, %rdx
    0000025e: 	movzbl	(%r14,%rdx), %edx
    00000263: 	sarb	$0x5, %dl
    00000266: 	addl	%edx, %eax
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp332:
    00000270: 	movl	%edi, %edx
    00000272: 	sarb	$0x5, %dl
    00000275: 	shll	$0x6, %edx
    00000278: 	cmpb	%al, %dl
    0000027a: 	je	.Ltmp335 # Offset: 634
    0000027c: 	movl	current_test(%rip), %edx
    00000282: 	movq	%rbp, %rsi
    00000285: 	movl	$0x1, %edi
    0000028a: 	xorl	%eax, %eax
    0000028c: 	addl	$0x1, %r12d
    00000290: 	callq	__printf_chk@PLT # Offset: 656
    00000295: 	movl	iterations(%rip), %esi
    0000029b: 	cmpl	%esi, %r12d
    0000029e: 	jge	.Ltmp331 # Offset: 670
    000002a0: 	movq	init_value(%rip), %rdi
    000002a7: 	movdqa	DATAat0x10f80(%rip), %xmm3
    000002af: 	movdqa	DATAat0x10f90(%rip), %xmm2
    000002b7: 	jmp	.Ltmp336 # Offset: 695
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp335:
    000002c0: 	addl	$0x1, %r12d
    000002c4: 	cmpl	%esi, %r12d
    000002c7: 	jl	.Ltmp336 # Offset: 711
.Ltmp331:
    000002cd: 	callq	clock@PLT # Offset: 717
    000002d2: 	pxor	%xmm0, %xmm0
    000002d6: 	movq	0x8(%rsp), %rdi
    000002db: 	movq	%rax, end_time(%rip)
    000002e2: 	subq	start_time(%rip), %rax
    000002e9: 	cvtsi2sd	%rax, %xmm0
    000002ee: 	divsd	DATAat0x10f68(%rip), %xmm0
    000002f6: 	addq	$0x18, %rsp
    000002fa: 	popq	%rbx
    000002fb: 	popq	%rbp
    000002fc: 	popq	%r12
    000002fe: 	popq	%r13
    00000300: 	popq	%r14
    00000302: 	popq	%r15
    00000304: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 772
.Ltmp333:
    00000309: 	xorl	%edx, %edx
    0000030b: 	xorl	%eax, %eax
    0000030d: 	jmp	.Ltmp337 # Offset: 781
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIa20shift_right_constantIaEEvPT_iPKc"

Binary Function "_Z13test_constantIa29shift_right_repeated_constantIaEEvPT_iPKc" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x6f70
  Size        : 0x312
  MaxSize     : 0x320
  Offset      : 0x6f70
  Section     : .text
  Orc Section : .local.text._Z13test_constantIa29shift_right_repeated_constantIaEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp338 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	movdqa	DATAat0x10f80(%rip), %xmm3
    0000004d: 	movl	%eax, 0x4(%rsp)
    00000051: 	movl	%r13d, %eax
    00000054: 	andl	$-0x10, %ebx
    00000057: 	xorl	%r12d, %r12d
    0000005a: 	shrl	$0x4, %eax
    0000005d: 	movdqa	DATAat0x10f90(%rip), %xmm2
    00000065: 	leaq	DATAat0x10f44(%rip), %rbp
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%r14,%rax), %r15
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp343:
    00000080: 	xorl	%eax, %eax
    00000082: 	testl	%r13d, %r13d
    00000085: 	jle	.Ltmp339 # Offset: 133
    0000008b: 	cmpl	$0xe, 0x4(%rsp)
    00000090: 	jbe	.Ltmp340 # Offset: 144
    00000096: 	movq	%r14, %rax
    00000099: 	pxor	%xmm1, %xmm1
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp341:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	addq	$0x10, %rax
    000000a8: 	psraw	$0x5, %xmm0
    000000ad: 	pand	%xmm3, %xmm0
    000000b1: 	pxor	%xmm2, %xmm0
    000000b5: 	psubb	%xmm2, %xmm0
    000000b9: 	paddb	%xmm0, %xmm1
    000000bd: 	cmpq	%r15, %rax
    000000c0: 	jne	.Ltmp341 # Offset: 192
    000000c2: 	movdqa	%xmm1, %xmm0
    000000c6: 	psrldq	$0x8, %xmm0
    000000cb: 	paddb	%xmm0, %xmm1
    000000cf: 	pxor	%xmm0, %xmm0
    000000d3: 	psadbw	%xmm0, %xmm1
    000000d7: 	movd	%xmm1, %eax
    000000db: 	cmpl	%r13d, %ebx
    000000de: 	je	.Ltmp339 # Offset: 222
    000000e4: 	movl	%ebx, %edx
.Ltmp344:
    000000e6: 	movslq	%edx, %r9
    000000e9: 	movzbl	(%r14,%r9), %r9d
    000000ee: 	sarb	$0x5, %r9b
    000000f2: 	addl	%r9d, %eax
    000000f5: 	leal	0x1(%rdx), %r9d
    000000f9: 	cmpl	%r9d, %r13d
    000000fc: 	jle	.Ltmp339 # Offset: 252
    00000102: 	movslq	%r9d, %r9
    00000105: 	movzbl	(%r14,%r9), %r9d
    0000010a: 	sarb	$0x5, %r9b
    0000010e: 	addl	%r9d, %eax
    00000111: 	leal	0x2(%rdx), %r9d
    00000115: 	cmpl	%r9d, %r13d
    00000118: 	jle	.Ltmp339 # Offset: 280
    0000011e: 	movslq	%r9d, %r9
    00000121: 	movzbl	(%r14,%r9), %r9d
    00000126: 	sarb	$0x5, %r9b
    0000012a: 	addl	%r9d, %eax
    0000012d: 	leal	0x3(%rdx), %r9d
    00000131: 	cmpl	%r9d, %r13d
    00000134: 	jle	.Ltmp339 # Offset: 308
    0000013a: 	movslq	%r9d, %r9
    0000013d: 	movzbl	(%r14,%r9), %r9d
    00000142: 	sarb	$0x5, %r9b
    00000146: 	addl	%r9d, %eax
    00000149: 	leal	0x4(%rdx), %r9d
    0000014d: 	cmpl	%r9d, %r13d
    00000150: 	jle	.Ltmp339 # Offset: 336
    00000156: 	movslq	%r9d, %r9
    00000159: 	movzbl	(%r14,%r9), %r9d
    0000015e: 	sarb	$0x5, %r9b
    00000162: 	addl	%r9d, %eax
    00000165: 	leal	0x5(%rdx), %r9d
    00000169: 	cmpl	%r9d, %r13d
    0000016c: 	jle	.Ltmp339 # Offset: 364
    00000172: 	movslq	%r9d, %r9
    00000175: 	movzbl	(%r14,%r9), %r9d
    0000017a: 	sarb	$0x5, %r9b
    0000017e: 	addl	%r9d, %eax
    00000181: 	leal	0x6(%rdx), %r9d
    00000185: 	cmpl	%r9d, %r13d
    00000188: 	jle	.Ltmp339 # Offset: 392
    0000018e: 	movslq	%r9d, %r9
    00000191: 	movzbl	(%r14,%r9), %r9d
    00000196: 	sarb	$0x5, %r9b
    0000019a: 	addl	%r9d, %eax
    0000019d: 	leal	0x7(%rdx), %r9d
    000001a1: 	cmpl	%r9d, %r13d
    000001a4: 	jle	.Ltmp339 # Offset: 420
    000001aa: 	movslq	%r9d, %r9
    000001ad: 	movzbl	(%r14,%r9), %r9d
    000001b2: 	sarb	$0x5, %r9b
    000001b6: 	addl	%r9d, %eax
    000001b9: 	leal	0x8(%rdx), %r9d
    000001bd: 	cmpl	%r9d, %r13d
    000001c0: 	jle	.Ltmp339 # Offset: 448
    000001c6: 	movslq	%r9d, %r9
    000001c9: 	movzbl	(%r14,%r9), %r9d
    000001ce: 	sarb	$0x5, %r9b
    000001d2: 	addl	%r9d, %eax
    000001d5: 	leal	0x9(%rdx), %r9d
    000001d9: 	cmpl	%r9d, %r13d
    000001dc: 	jle	.Ltmp339 # Offset: 476
    000001e2: 	movslq	%r9d, %r9
    000001e5: 	leal	0xa(%rdx), %r10d
    000001e9: 	movzbl	(%r14,%r9), %r9d
    000001ee: 	sarb	$0x5, %r9b
    000001f2: 	addl	%eax, %r9d
    000001f5: 	movl	%r9d, %eax
    000001f8: 	cmpl	%r10d, %r13d
    000001fb: 	jle	.Ltmp339 # Offset: 507
    000001fd: 	movslq	%r10d, %r10
    00000200: 	movzbl	(%r14,%r10), %eax
    00000205: 	sarb	$0x5, %al
    00000208: 	addl	%r9d, %eax
    0000020b: 	leal	0xb(%rdx), %r9d
    0000020f: 	cmpl	%r9d, %r13d
    00000212: 	jle	.Ltmp339 # Offset: 530
    00000214: 	movslq	%r9d, %r9
    00000217: 	movzbl	(%r14,%r9), %r9d
    0000021c: 	sarb	$0x5, %r9b
    00000220: 	addl	%r9d, %eax
    00000223: 	leal	0xc(%rdx), %r9d
    00000227: 	cmpl	%r9d, %r13d
    0000022a: 	jle	.Ltmp339 # Offset: 554
    0000022c: 	movslq	%r9d, %r9
    0000022f: 	movzbl	(%r14,%r9), %r9d
    00000234: 	sarb	$0x5, %r9b
    00000238: 	addl	%r9d, %eax
    0000023b: 	leal	0xd(%rdx), %r9d
    0000023f: 	cmpl	%r9d, %r13d
    00000242: 	jle	.Ltmp339 # Offset: 578
    00000244: 	movslq	%r9d, %r9
    00000247: 	addl	$0xe, %edx
    0000024a: 	movzbl	(%r14,%r9), %r9d
    0000024f: 	sarb	$0x5, %r9b
    00000253: 	addl	%r9d, %eax
    00000256: 	cmpl	%edx, %r13d
    00000259: 	jle	.Ltmp339 # Offset: 601
    0000025b: 	movslq	%edx, %rdx
    0000025e: 	movzbl	(%r14,%rdx), %edx
    00000263: 	sarb	$0x5, %dl
    00000266: 	addl	%edx, %eax
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp339:
    00000270: 	movl	%edi, %edx
    00000272: 	sarb	$0x5, %dl
    00000275: 	shll	$0x6, %edx
    00000278: 	cmpb	%al, %dl
    0000027a: 	je	.Ltmp342 # Offset: 634
    0000027c: 	movl	current_test(%rip), %edx
    00000282: 	movq	%rbp, %rsi
    00000285: 	movl	$0x1, %edi
    0000028a: 	xorl	%eax, %eax
    0000028c: 	addl	$0x1, %r12d
    00000290: 	callq	__printf_chk@PLT # Offset: 656
    00000295: 	movl	iterations(%rip), %esi
    0000029b: 	cmpl	%esi, %r12d
    0000029e: 	jge	.Ltmp338 # Offset: 670
    000002a0: 	movq	init_value(%rip), %rdi
    000002a7: 	movdqa	DATAat0x10f80(%rip), %xmm3
    000002af: 	movdqa	DATAat0x10f90(%rip), %xmm2
    000002b7: 	jmp	.Ltmp343 # Offset: 695
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp342:
    000002c0: 	addl	$0x1, %r12d
    000002c4: 	cmpl	%esi, %r12d
    000002c7: 	jl	.Ltmp343 # Offset: 711
.Ltmp338:
    000002cd: 	callq	clock@PLT # Offset: 717
    000002d2: 	pxor	%xmm0, %xmm0
    000002d6: 	movq	0x8(%rsp), %rdi
    000002db: 	movq	%rax, end_time(%rip)
    000002e2: 	subq	start_time(%rip), %rax
    000002e9: 	cvtsi2sd	%rax, %xmm0
    000002ee: 	divsd	DATAat0x10f68(%rip), %xmm0
    000002f6: 	addq	$0x18, %rsp
    000002fa: 	popq	%rbx
    000002fb: 	popq	%rbp
    000002fc: 	popq	%r12
    000002fe: 	popq	%r13
    00000300: 	popq	%r14
    00000302: 	popq	%r15
    00000304: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 772
.Ltmp340:
    00000309: 	xorl	%edx, %edx
    0000030b: 	xorl	%eax, %eax
    0000030d: 	jmp	.Ltmp344 # Offset: 781
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIa29shift_right_repeated_constantIaEEvPT_iPKc"

Binary Function "_Z13test_constantIt20shift_right_constantItEEvPT_iPKc" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x7290
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x7290
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt20shift_right_constantItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp345 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x8, %ebx
    00000052: 	leaq	DATAat0x10f44(%rip), %rbp
    00000059: 	shrl	$0x3, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp351:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp346 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp347 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp348:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrlw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp348 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp346 # Offset: 213
    000000db: 	movl	%ebx, %eax
    000000dd: 	movl	%ebx, %ecx
.Ltmp352:
    000000df: 	movl	%r14d, %r8d
    000000e2: 	subl	%eax, %r8d
    000000e5: 	leal	-0x1(%r8), %r9d
    000000e9: 	cmpl	$0x2, %r9d
    000000ed: 	jbe	.Ltmp349 # Offset: 237
    000000ef: 	movq	(%r15,%rax,2), %xmm0
    000000f5: 	psrlw	$0x5, %xmm0
    000000fa: 	pextrw	$0x0, %xmm0, %eax
    000000ff: 	pextrw	$0x1, %xmm0, %r9d
    00000105: 	addl	%r9d, %eax
    00000108: 	addl	%edx, %eax
    0000010a: 	pextrw	$0x2, %xmm0, %edx
    0000010f: 	addl	%edx, %eax
    00000111: 	pextrw	$0x3, %xmm0, %edx
    00000116: 	addl	%eax, %edx
    00000118: 	movl	%r8d, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %ecx
    00000120: 	cmpl	%eax, %r8d
    00000123: 	je	.Ltmp346 # Offset: 291
.Ltmp349:
    00000125: 	movslq	%ecx, %rax
    00000128: 	leaq	(%rax,%rax), %r8
    0000012c: 	movzwl	(%r15,%rax,2), %eax
    00000131: 	shrw	$0x5, %ax
    00000135: 	addl	%eax, %edx
    00000137: 	leal	0x1(%rcx), %eax
    0000013a: 	cmpl	%eax, %r14d
    0000013d: 	jle	.Ltmp346 # Offset: 317
    0000013f: 	movzwl	0x2(%r15,%r8), %eax
    00000145: 	addl	$0x2, %ecx
    00000148: 	shrw	$0x5, %ax
    0000014c: 	addl	%eax, %edx
    0000014e: 	cmpl	%ecx, %r14d
    00000151: 	jle	.Ltmp346 # Offset: 337
    00000153: 	movzwl	0x4(%r15,%r8), %eax
    00000159: 	shrw	$0x5, %ax
    0000015d: 	addl	%eax, %edx
.Ltmp346:
    0000015f: 	movl	%edi, %eax
    00000161: 	shrw	$0x5, %ax
    00000165: 	imulw	$0x1f40, %ax, %ax
    0000016a: 	cmpw	%dx, %ax
    0000016d: 	je	.Ltmp350 # Offset: 365
    0000016f: 	movl	current_test(%rip), %edx
    00000175: 	movq	%rbp, %rsi
    00000178: 	movl	$0x1, %edi
    0000017d: 	xorl	%eax, %eax
    0000017f: 	addl	$0x1, %r12d
    00000183: 	callq	__printf_chk@PLT # Offset: 387
    00000188: 	movl	iterations(%rip), %esi
    0000018e: 	cmpl	%r12d, %esi
    00000191: 	jle	.Ltmp345 # Offset: 401
    00000193: 	movq	init_value(%rip), %rdi
    0000019a: 	jmp	.Ltmp351 # Offset: 410
    0000019f: 	nop # Size: 1
.Ltmp350:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%esi, %r12d
    000001a7: 	jl	.Ltmp351 # Offset: 423
.Ltmp345:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp347:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp352 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt20shift_right_constantItEEvPT_iPKc"

Binary Function "_Z13test_constantIt29shift_right_repeated_constantItEEvPT_iPKc" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x7490
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x7490
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt29shift_right_repeated_constantItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp353 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x8, %ebx
    00000052: 	leaq	DATAat0x10f44(%rip), %rbp
    00000059: 	shrl	$0x3, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp359:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp354 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp355 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp356:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrlw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp356 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp354 # Offset: 213
    000000db: 	movl	%ebx, %eax
    000000dd: 	movl	%ebx, %ecx
.Ltmp360:
    000000df: 	movl	%r14d, %r8d
    000000e2: 	subl	%eax, %r8d
    000000e5: 	leal	-0x1(%r8), %r9d
    000000e9: 	cmpl	$0x2, %r9d
    000000ed: 	jbe	.Ltmp357 # Offset: 237
    000000ef: 	movq	(%r15,%rax,2), %xmm0
    000000f5: 	psrlw	$0x5, %xmm0
    000000fa: 	pextrw	$0x0, %xmm0, %eax
    000000ff: 	pextrw	$0x1, %xmm0, %r9d
    00000105: 	addl	%r9d, %eax
    00000108: 	addl	%edx, %eax
    0000010a: 	pextrw	$0x2, %xmm0, %edx
    0000010f: 	addl	%edx, %eax
    00000111: 	pextrw	$0x3, %xmm0, %edx
    00000116: 	addl	%eax, %edx
    00000118: 	movl	%r8d, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %ecx
    00000120: 	cmpl	%eax, %r8d
    00000123: 	je	.Ltmp354 # Offset: 291
.Ltmp357:
    00000125: 	movslq	%ecx, %rax
    00000128: 	leaq	(%rax,%rax), %r8
    0000012c: 	movzwl	(%r15,%rax,2), %eax
    00000131: 	shrw	$0x5, %ax
    00000135: 	addl	%eax, %edx
    00000137: 	leal	0x1(%rcx), %eax
    0000013a: 	cmpl	%eax, %r14d
    0000013d: 	jle	.Ltmp354 # Offset: 317
    0000013f: 	movzwl	0x2(%r15,%r8), %eax
    00000145: 	addl	$0x2, %ecx
    00000148: 	shrw	$0x5, %ax
    0000014c: 	addl	%eax, %edx
    0000014e: 	cmpl	%ecx, %r14d
    00000151: 	jle	.Ltmp354 # Offset: 337
    00000153: 	movzwl	0x4(%r15,%r8), %eax
    00000159: 	shrw	$0x5, %ax
    0000015d: 	addl	%eax, %edx
.Ltmp354:
    0000015f: 	movl	%edi, %eax
    00000161: 	shrw	$0x5, %ax
    00000165: 	imulw	$0x1f40, %ax, %ax
    0000016a: 	cmpw	%dx, %ax
    0000016d: 	je	.Ltmp358 # Offset: 365
    0000016f: 	movl	current_test(%rip), %edx
    00000175: 	movq	%rbp, %rsi
    00000178: 	movl	$0x1, %edi
    0000017d: 	xorl	%eax, %eax
    0000017f: 	addl	$0x1, %r12d
    00000183: 	callq	__printf_chk@PLT # Offset: 387
    00000188: 	movl	iterations(%rip), %esi
    0000018e: 	cmpl	%r12d, %esi
    00000191: 	jle	.Ltmp353 # Offset: 401
    00000193: 	movq	init_value(%rip), %rdi
    0000019a: 	jmp	.Ltmp359 # Offset: 410
    0000019f: 	nop # Size: 1
.Ltmp358:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%esi, %r12d
    000001a7: 	jl	.Ltmp359 # Offset: 423
.Ltmp353:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp355:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp360 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt29shift_right_repeated_constantItEEvPT_iPKc"

Binary Function "_Z13test_constantIt19shift_left_constantItEEvPT_iPKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x7690
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x7690
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt19shift_left_constantItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp361 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x8, %ebx
    00000052: 	leaq	DATAat0x10f44(%rip), %rbp
    00000059: 	shrl	$0x3, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp367:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp362 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp363 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp364:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psllw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp364 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp362 # Offset: 213
    000000db: 	movl	%ebx, %eax
    000000dd: 	movl	%ebx, %ecx
.Ltmp368:
    000000df: 	movl	%r14d, %r8d
    000000e2: 	subl	%eax, %r8d
    000000e5: 	leal	-0x1(%r8), %r9d
    000000e9: 	cmpl	$0x2, %r9d
    000000ed: 	jbe	.Ltmp365 # Offset: 237
    000000ef: 	movq	(%r15,%rax,2), %xmm0
    000000f5: 	psllw	$0x5, %xmm0
    000000fa: 	pextrw	$0x0, %xmm0, %eax
    000000ff: 	pextrw	$0x1, %xmm0, %r9d
    00000105: 	addl	%r9d, %eax
    00000108: 	addl	%edx, %eax
    0000010a: 	pextrw	$0x2, %xmm0, %edx
    0000010f: 	addl	%edx, %eax
    00000111: 	pextrw	$0x3, %xmm0, %edx
    00000116: 	addl	%eax, %edx
    00000118: 	movl	%r8d, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %ecx
    00000120: 	cmpl	%eax, %r8d
    00000123: 	je	.Ltmp362 # Offset: 291
.Ltmp365:
    00000125: 	movslq	%ecx, %rax
    00000128: 	leaq	(%rax,%rax), %r8
    0000012c: 	movzwl	(%r15,%rax,2), %eax
    00000131: 	shll	$0x5, %eax
    00000134: 	addl	%eax, %edx
    00000136: 	leal	0x1(%rcx), %eax
    00000139: 	cmpl	%eax, %r14d
    0000013c: 	jle	.Ltmp362 # Offset: 316
    0000013e: 	movzwl	0x2(%r15,%r8), %eax
    00000144: 	addl	$0x2, %ecx
    00000147: 	shll	$0x5, %eax
    0000014a: 	addl	%eax, %edx
    0000014c: 	cmpl	%ecx, %r14d
    0000014f: 	jle	.Ltmp362 # Offset: 335
    00000151: 	movzwl	0x4(%r15,%r8), %eax
    00000157: 	shll	$0x5, %eax
    0000015a: 	addl	%eax, %edx
.Ltmp362:
    0000015c: 	movl	%edi, %eax
    0000015e: 	shll	$0x5, %eax
    00000161: 	imulw	$0x1f40, %ax, %ax
    00000166: 	cmpw	%dx, %ax
    00000169: 	je	.Ltmp366 # Offset: 361
    0000016b: 	movl	current_test(%rip), %edx
    00000171: 	movq	%rbp, %rsi
    00000174: 	movl	$0x1, %edi
    00000179: 	xorl	%eax, %eax
    0000017b: 	addl	$0x1, %r12d
    0000017f: 	callq	__printf_chk@PLT # Offset: 383
    00000184: 	movl	iterations(%rip), %esi
    0000018a: 	cmpl	%r12d, %esi
    0000018d: 	jle	.Ltmp361 # Offset: 397
    0000018f: 	movq	init_value(%rip), %rdi
    00000196: 	jmp	.Ltmp367 # Offset: 406
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp366:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%esi, %r12d
    000001a7: 	jl	.Ltmp367 # Offset: 423
.Ltmp361:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp363:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp368 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt19shift_left_constantItEEvPT_iPKc"

Binary Function "_Z13test_constantIt28shift_left_repeated_constantItEEvPT_iPKc" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x7890
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x7890
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt28shift_left_repeated_constantItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp369 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x8, %ebx
    00000052: 	leaq	DATAat0x10f44(%rip), %rbp
    00000059: 	shrl	$0x3, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp375:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp370 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp371 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp372:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psllw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp372 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp370 # Offset: 213
    000000db: 	movl	%ebx, %eax
    000000dd: 	movl	%ebx, %ecx
.Ltmp376:
    000000df: 	movl	%r14d, %r8d
    000000e2: 	subl	%eax, %r8d
    000000e5: 	leal	-0x1(%r8), %r9d
    000000e9: 	cmpl	$0x2, %r9d
    000000ed: 	jbe	.Ltmp373 # Offset: 237
    000000ef: 	movq	(%r15,%rax,2), %xmm0
    000000f5: 	psllw	$0x5, %xmm0
    000000fa: 	pextrw	$0x0, %xmm0, %eax
    000000ff: 	pextrw	$0x1, %xmm0, %r9d
    00000105: 	addl	%r9d, %eax
    00000108: 	addl	%edx, %eax
    0000010a: 	pextrw	$0x2, %xmm0, %edx
    0000010f: 	addl	%edx, %eax
    00000111: 	pextrw	$0x3, %xmm0, %edx
    00000116: 	addl	%eax, %edx
    00000118: 	movl	%r8d, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %ecx
    00000120: 	cmpl	%eax, %r8d
    00000123: 	je	.Ltmp370 # Offset: 291
.Ltmp373:
    00000125: 	movslq	%ecx, %rax
    00000128: 	leaq	(%rax,%rax), %r8
    0000012c: 	movzwl	(%r15,%rax,2), %eax
    00000131: 	shll	$0x5, %eax
    00000134: 	addl	%eax, %edx
    00000136: 	leal	0x1(%rcx), %eax
    00000139: 	cmpl	%eax, %r14d
    0000013c: 	jle	.Ltmp370 # Offset: 316
    0000013e: 	movzwl	0x2(%r15,%r8), %eax
    00000144: 	addl	$0x2, %ecx
    00000147: 	shll	$0x5, %eax
    0000014a: 	addl	%eax, %edx
    0000014c: 	cmpl	%ecx, %r14d
    0000014f: 	jle	.Ltmp370 # Offset: 335
    00000151: 	movzwl	0x4(%r15,%r8), %eax
    00000157: 	shll	$0x5, %eax
    0000015a: 	addl	%eax, %edx
.Ltmp370:
    0000015c: 	movl	%edi, %eax
    0000015e: 	shll	$0x5, %eax
    00000161: 	imulw	$0x1f40, %ax, %ax
    00000166: 	cmpw	%dx, %ax
    00000169: 	je	.Ltmp374 # Offset: 361
    0000016b: 	movl	current_test(%rip), %edx
    00000171: 	movq	%rbp, %rsi
    00000174: 	movl	$0x1, %edi
    00000179: 	xorl	%eax, %eax
    0000017b: 	addl	$0x1, %r12d
    0000017f: 	callq	__printf_chk@PLT # Offset: 383
    00000184: 	movl	iterations(%rip), %esi
    0000018a: 	cmpl	%r12d, %esi
    0000018d: 	jle	.Ltmp369 # Offset: 397
    0000018f: 	movq	init_value(%rip), %rdi
    00000196: 	jmp	.Ltmp375 # Offset: 406
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp374:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%esi, %r12d
    000001a7: 	jl	.Ltmp375 # Offset: 423
.Ltmp369:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp371:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp376 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt28shift_left_repeated_constantItEEvPT_iPKc"

Binary Function "_Z13test_constantIs20shift_right_constantIsEEvPT_iPKc" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x7a90
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x7a90
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs20shift_right_constantIsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r9d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r9d, %r9d
    00000033: 	jle	.Ltmp377 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movq	init_value(%rip), %r10
    00000047: 	xorl	%r12d, %r12d
    0000004a: 	movl	%eax, 0x4(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	andl	$-0x8, %ebx
    00000054: 	leaq	DATAat0x10f44(%rip), %rbp
    0000005b: 	shrl	$0x3, %eax
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r15,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp383:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp378 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp379 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp380:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psraw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp380 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp378 # Offset: 213
    000000d7: 	movl	%ebx, %eax
    000000d9: 	movl	%ebx, %ecx
.Ltmp384:
    000000db: 	movl	%r14d, %esi
    000000de: 	subl	%eax, %esi
    000000e0: 	leal	-0x1(%rsi), %edi
    000000e3: 	cmpl	$0x2, %edi
    000000e6: 	jbe	.Ltmp381 # Offset: 230
    000000e8: 	movq	(%r15,%rax,2), %xmm0
    000000ee: 	psraw	$0x5, %xmm0
    000000f3: 	pextrw	$0x1, %xmm0, %edi
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%edi, %eax
    000000ff: 	pextrw	$0x2, %xmm0, %edi
    00000104: 	addl	%edi, %eax
    00000106: 	pextrw	$0x3, %xmm0, %edi
    0000010b: 	addl	%edi, %eax
    0000010d: 	addl	%eax, %edx
    0000010f: 	movl	%esi, %eax
    00000111: 	andl	$-0x4, %eax
    00000114: 	addl	%eax, %ecx
    00000116: 	cmpl	%eax, %esi
    00000118: 	je	.Ltmp378 # Offset: 280
.Ltmp381:
    0000011a: 	movslq	%ecx, %rax
    0000011d: 	leaq	(%rax,%rax), %rsi
    00000121: 	movzwl	(%r15,%rax,2), %eax
    00000126: 	sarw	$0x5, %ax
    0000012a: 	addl	%eax, %edx
    0000012c: 	leal	0x1(%rcx), %eax
    0000012f: 	cmpl	%eax, %r14d
    00000132: 	jle	.Ltmp378 # Offset: 306
    00000134: 	movzwl	0x2(%r15,%rsi), %eax
    0000013a: 	addl	$0x2, %ecx
    0000013d: 	sarw	$0x5, %ax
    00000141: 	addl	%eax, %edx
    00000143: 	cmpl	%ecx, %r14d
    00000146: 	jle	.Ltmp378 # Offset: 326
    00000148: 	movzwl	0x4(%r15,%rsi), %eax
    0000014e: 	sarw	$0x5, %ax
    00000152: 	addl	%eax, %edx
.Ltmp378:
    00000154: 	movl	%r10d, %eax
    00000157: 	sarw	$0x5, %ax
    0000015b: 	imulw	$0x1f40, %ax, %ax
    00000160: 	cmpw	%dx, %ax
    00000163: 	je	.Ltmp382 # Offset: 355
    00000165: 	movl	current_test(%rip), %edx
    0000016b: 	movq	%rbp, %rsi
    0000016e: 	movl	$0x1, %edi
    00000173: 	xorl	%eax, %eax
    00000175: 	addl	$0x1, %r12d
    00000179: 	callq	__printf_chk@PLT # Offset: 377
    0000017e: 	movl	iterations(%rip), %r9d
    00000185: 	cmpl	%r9d, %r12d
    00000188: 	jge	.Ltmp377 # Offset: 392
    0000018a: 	movq	init_value(%rip), %r10
    00000191: 	jmp	.Ltmp383 # Offset: 401
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp382:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%r9d, %r12d
    000001a7: 	jl	.Ltmp383 # Offset: 423
.Ltmp377:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp379:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp384 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs20shift_right_constantIsEEvPT_iPKc"

Binary Function "_Z13test_constantIs29shift_right_repeated_constantIsEEvPT_iPKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x7c90
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x7c90
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs29shift_right_repeated_constantIsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r9d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r9d, %r9d
    00000033: 	jle	.Ltmp385 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movq	init_value(%rip), %r10
    00000047: 	xorl	%r12d, %r12d
    0000004a: 	movl	%eax, 0x4(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	andl	$-0x8, %ebx
    00000054: 	leaq	DATAat0x10f44(%rip), %rbp
    0000005b: 	shrl	$0x3, %eax
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r15,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp391:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp386 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp387 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp388:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psraw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp388 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp386 # Offset: 213
    000000d7: 	movl	%ebx, %eax
    000000d9: 	movl	%ebx, %ecx
.Ltmp392:
    000000db: 	movl	%r14d, %esi
    000000de: 	subl	%eax, %esi
    000000e0: 	leal	-0x1(%rsi), %edi
    000000e3: 	cmpl	$0x2, %edi
    000000e6: 	jbe	.Ltmp389 # Offset: 230
    000000e8: 	movq	(%r15,%rax,2), %xmm0
    000000ee: 	psraw	$0x5, %xmm0
    000000f3: 	pextrw	$0x1, %xmm0, %edi
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%edi, %eax
    000000ff: 	pextrw	$0x2, %xmm0, %edi
    00000104: 	addl	%edi, %eax
    00000106: 	pextrw	$0x3, %xmm0, %edi
    0000010b: 	addl	%edi, %eax
    0000010d: 	addl	%eax, %edx
    0000010f: 	movl	%esi, %eax
    00000111: 	andl	$-0x4, %eax
    00000114: 	addl	%eax, %ecx
    00000116: 	cmpl	%eax, %esi
    00000118: 	je	.Ltmp386 # Offset: 280
.Ltmp389:
    0000011a: 	movslq	%ecx, %rax
    0000011d: 	leaq	(%rax,%rax), %rsi
    00000121: 	movzwl	(%r15,%rax,2), %eax
    00000126: 	sarw	$0x5, %ax
    0000012a: 	addl	%eax, %edx
    0000012c: 	leal	0x1(%rcx), %eax
    0000012f: 	cmpl	%eax, %r14d
    00000132: 	jle	.Ltmp386 # Offset: 306
    00000134: 	movzwl	0x2(%r15,%rsi), %eax
    0000013a: 	addl	$0x2, %ecx
    0000013d: 	sarw	$0x5, %ax
    00000141: 	addl	%eax, %edx
    00000143: 	cmpl	%ecx, %r14d
    00000146: 	jle	.Ltmp386 # Offset: 326
    00000148: 	movzwl	0x4(%r15,%rsi), %eax
    0000014e: 	sarw	$0x5, %ax
    00000152: 	addl	%eax, %edx
.Ltmp386:
    00000154: 	movl	%r10d, %eax
    00000157: 	sarw	$0x5, %ax
    0000015b: 	imulw	$0x1f40, %ax, %ax
    00000160: 	cmpw	%dx, %ax
    00000163: 	je	.Ltmp390 # Offset: 355
    00000165: 	movl	current_test(%rip), %edx
    0000016b: 	movq	%rbp, %rsi
    0000016e: 	movl	$0x1, %edi
    00000173: 	xorl	%eax, %eax
    00000175: 	addl	$0x1, %r12d
    00000179: 	callq	__printf_chk@PLT # Offset: 377
    0000017e: 	movl	iterations(%rip), %r9d
    00000185: 	cmpl	%r9d, %r12d
    00000188: 	jge	.Ltmp385 # Offset: 392
    0000018a: 	movq	init_value(%rip), %r10
    00000191: 	jmp	.Ltmp391 # Offset: 401
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp390:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%r9d, %r12d
    000001a7: 	jl	.Ltmp391 # Offset: 423
.Ltmp385:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp387:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp392 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs29shift_right_repeated_constantIsEEvPT_iPKc"

Binary Function "_Z13test_constantIs19shift_left_constantIsEEvPT_iPKc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x7e90
  Size        : 0x1ec
  MaxSize     : 0x1f0
  Offset      : 0x7e90
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs19shift_left_constantIsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r9d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r9d, %r9d
    00000033: 	jle	.Ltmp393 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movq	init_value(%rip), %r10
    00000047: 	xorl	%r12d, %r12d
    0000004a: 	movl	%eax, 0x4(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	andl	$-0x8, %ebx
    00000054: 	leaq	DATAat0x10f44(%rip), %rbp
    0000005b: 	shrl	$0x3, %eax
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r15,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp399:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp394 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp395 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp396:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psllw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp396 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp394 # Offset: 213
    000000d7: 	movl	%ebx, %eax
    000000d9: 	movl	%ebx, %ecx
.Ltmp400:
    000000db: 	movl	%r14d, %esi
    000000de: 	subl	%eax, %esi
    000000e0: 	leal	-0x1(%rsi), %edi
    000000e3: 	cmpl	$0x2, %edi
    000000e6: 	jbe	.Ltmp397 # Offset: 230
    000000e8: 	movq	(%r15,%rax,2), %xmm0
    000000ee: 	psllw	$0x5, %xmm0
    000000f3: 	pextrw	$0x1, %xmm0, %edi
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%edi, %eax
    000000ff: 	pextrw	$0x2, %xmm0, %edi
    00000104: 	addl	%edi, %eax
    00000106: 	pextrw	$0x3, %xmm0, %edi
    0000010b: 	addl	%edi, %eax
    0000010d: 	addl	%eax, %edx
    0000010f: 	movl	%esi, %eax
    00000111: 	andl	$-0x4, %eax
    00000114: 	addl	%eax, %ecx
    00000116: 	cmpl	%eax, %esi
    00000118: 	je	.Ltmp394 # Offset: 280
.Ltmp397:
    0000011a: 	movslq	%ecx, %rax
    0000011d: 	leaq	(%rax,%rax), %rsi
    00000121: 	movswl	(%r15,%rax,2), %eax
    00000126: 	shll	$0x5, %eax
    00000129: 	addl	%eax, %edx
    0000012b: 	leal	0x1(%rcx), %eax
    0000012e: 	cmpl	%eax, %r14d
    00000131: 	jle	.Ltmp394 # Offset: 305
    00000133: 	movswl	0x2(%r15,%rsi), %eax
    00000139: 	addl	$0x2, %ecx
    0000013c: 	shll	$0x5, %eax
    0000013f: 	addl	%eax, %edx
    00000141: 	cmpl	%ecx, %r14d
    00000144: 	jle	.Ltmp394 # Offset: 324
    00000146: 	movswl	0x4(%r15,%rsi), %eax
    0000014c: 	shll	$0x5, %eax
    0000014f: 	addl	%eax, %edx
.Ltmp394:
    00000151: 	movl	%r10d, %eax
    00000154: 	shll	$0x5, %eax
    00000157: 	imulw	$0x1f40, %ax, %ax
    0000015c: 	cmpw	%dx, %ax
    0000015f: 	je	.Ltmp398 # Offset: 351
    00000161: 	movl	current_test(%rip), %edx
    00000167: 	movq	%rbp, %rsi
    0000016a: 	movl	$0x1, %edi
    0000016f: 	xorl	%eax, %eax
    00000171: 	addl	$0x1, %r12d
    00000175: 	callq	__printf_chk@PLT # Offset: 373
    0000017a: 	movl	iterations(%rip), %r9d
    00000181: 	cmpl	%r9d, %r12d
    00000184: 	jge	.Ltmp393 # Offset: 388
    00000186: 	movq	init_value(%rip), %r10
    0000018d: 	jmp	.Ltmp399 # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp398:
    00000198: 	addl	$0x1, %r12d
    0000019c: 	cmpl	%r9d, %r12d
    0000019f: 	jl	.Ltmp399 # Offset: 415
.Ltmp393:
    000001a5: 	callq	clock@PLT # Offset: 421
    000001aa: 	pxor	%xmm0, %xmm0
    000001ae: 	movq	0x8(%rsp), %rdi
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	subq	start_time(%rip), %rax
    000001c1: 	cvtsi2sd	%rax, %xmm0
    000001c6: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001ce: 	addq	$0x18, %rsp
    000001d2: 	popq	%rbx
    000001d3: 	popq	%rbp
    000001d4: 	popq	%r12
    000001d6: 	popq	%r13
    000001d8: 	popq	%r14
    000001da: 	popq	%r15
    000001dc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 476
.Ltmp395:
    000001e1: 	xorl	%eax, %eax
    000001e3: 	xorl	%ecx, %ecx
    000001e5: 	xorl	%edx, %edx
    000001e7: 	jmp	.Ltmp400 # Offset: 487
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs19shift_left_constantIsEEvPT_iPKc"

Binary Function "_Z13test_constantIs28shift_left_repeated_constantIsEEvPT_iPKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x8080
  Size        : 0x1ec
  MaxSize     : 0x1f0
  Offset      : 0x8080
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs28shift_left_repeated_constantIsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r9d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r9d, %r9d
    00000033: 	jle	.Ltmp401 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movq	init_value(%rip), %r10
    00000047: 	xorl	%r12d, %r12d
    0000004a: 	movl	%eax, 0x4(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	andl	$-0x8, %ebx
    00000054: 	leaq	DATAat0x10f44(%rip), %rbp
    0000005b: 	shrl	$0x3, %eax
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r15,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp407:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp402 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp403 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp404:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psllw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp404 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp402 # Offset: 213
    000000d7: 	movl	%ebx, %eax
    000000d9: 	movl	%ebx, %ecx
.Ltmp408:
    000000db: 	movl	%r14d, %esi
    000000de: 	subl	%eax, %esi
    000000e0: 	leal	-0x1(%rsi), %edi
    000000e3: 	cmpl	$0x2, %edi
    000000e6: 	jbe	.Ltmp405 # Offset: 230
    000000e8: 	movq	(%r15,%rax,2), %xmm0
    000000ee: 	psllw	$0x5, %xmm0
    000000f3: 	pextrw	$0x1, %xmm0, %edi
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%edi, %eax
    000000ff: 	pextrw	$0x2, %xmm0, %edi
    00000104: 	addl	%edi, %eax
    00000106: 	pextrw	$0x3, %xmm0, %edi
    0000010b: 	addl	%edi, %eax
    0000010d: 	addl	%eax, %edx
    0000010f: 	movl	%esi, %eax
    00000111: 	andl	$-0x4, %eax
    00000114: 	addl	%eax, %ecx
    00000116: 	cmpl	%eax, %esi
    00000118: 	je	.Ltmp402 # Offset: 280
.Ltmp405:
    0000011a: 	movslq	%ecx, %rax
    0000011d: 	leaq	(%rax,%rax), %rsi
    00000121: 	movswl	(%r15,%rax,2), %eax
    00000126: 	shll	$0x5, %eax
    00000129: 	addl	%eax, %edx
    0000012b: 	leal	0x1(%rcx), %eax
    0000012e: 	cmpl	%eax, %r14d
    00000131: 	jle	.Ltmp402 # Offset: 305
    00000133: 	movswl	0x2(%r15,%rsi), %eax
    00000139: 	addl	$0x2, %ecx
    0000013c: 	shll	$0x5, %eax
    0000013f: 	addl	%eax, %edx
    00000141: 	cmpl	%ecx, %r14d
    00000144: 	jle	.Ltmp402 # Offset: 324
    00000146: 	movswl	0x4(%r15,%rsi), %eax
    0000014c: 	shll	$0x5, %eax
    0000014f: 	addl	%eax, %edx
.Ltmp402:
    00000151: 	movl	%r10d, %eax
    00000154: 	shll	$0x5, %eax
    00000157: 	imulw	$0x1f40, %ax, %ax
    0000015c: 	cmpw	%dx, %ax
    0000015f: 	je	.Ltmp406 # Offset: 351
    00000161: 	movl	current_test(%rip), %edx
    00000167: 	movq	%rbp, %rsi
    0000016a: 	movl	$0x1, %edi
    0000016f: 	xorl	%eax, %eax
    00000171: 	addl	$0x1, %r12d
    00000175: 	callq	__printf_chk@PLT # Offset: 373
    0000017a: 	movl	iterations(%rip), %r9d
    00000181: 	cmpl	%r9d, %r12d
    00000184: 	jge	.Ltmp401 # Offset: 388
    00000186: 	movq	init_value(%rip), %r10
    0000018d: 	jmp	.Ltmp407 # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp406:
    00000198: 	addl	$0x1, %r12d
    0000019c: 	cmpl	%r9d, %r12d
    0000019f: 	jl	.Ltmp407 # Offset: 415
.Ltmp401:
    000001a5: 	callq	clock@PLT # Offset: 421
    000001aa: 	pxor	%xmm0, %xmm0
    000001ae: 	movq	0x8(%rsp), %rdi
    000001b3: 	movq	%rax, end_time(%rip)
    000001ba: 	subq	start_time(%rip), %rax
    000001c1: 	cvtsi2sd	%rax, %xmm0
    000001c6: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001ce: 	addq	$0x18, %rsp
    000001d2: 	popq	%rbx
    000001d3: 	popq	%rbp
    000001d4: 	popq	%r12
    000001d6: 	popq	%r13
    000001d8: 	popq	%r14
    000001da: 	popq	%r15
    000001dc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 476
.Ltmp403:
    000001e1: 	xorl	%eax, %eax
    000001e3: 	xorl	%ecx, %ecx
    000001e5: 	xorl	%edx, %edx
    000001e7: 	jmp	.Ltmp408 # Offset: 487
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs28shift_left_repeated_constantIsEEvPT_iPKc"

Binary Function "_Z13test_constantIj20shift_right_constantIjEEvPT_iPKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x8270
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x8270
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj20shift_right_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp409 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r13d, %r13d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	leaq	DATAat0x10f44(%rip), %r12
    00000059: 	shrl	$0x2, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %rbx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp414:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp410 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp411 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp412:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrld	$0x5, %xmm0
    0000009d: 	paddd	%xmm0, %xmm1
    000000a1: 	cmpq	%rbx, %rax
    000000a4: 	jne	.Ltmp412 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	movl	%ebp, %edx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddd	%xmm0, %xmm1
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x4, %xmm0
    000000be: 	paddd	%xmm0, %xmm1
    000000c2: 	movd	%xmm1, %eax
    000000c6: 	cmpl	%r14d, %ebp
    000000c9: 	je	.Ltmp410 # Offset: 201
.Ltmp415:
    000000cb: 	movslq	%edx, %r9
    000000ce: 	leaq	(,%r9,4), %r10
    000000d6: 	movl	(%r15,%r9,4), %r9d
    000000da: 	shrl	$0x5, %r9d
    000000de: 	addl	%r9d, %eax
    000000e1: 	leal	0x1(%rdx), %r9d
    000000e5: 	cmpl	%r9d, %r14d
    000000e8: 	jle	.Ltmp410 # Offset: 232
    000000ea: 	movl	0x4(%r15,%r10), %r9d
    000000ef: 	addl	$0x2, %edx
    000000f2: 	shrl	$0x5, %r9d
    000000f6: 	addl	%r9d, %eax
    000000f9: 	cmpl	%edx, %r14d
    000000fc: 	jle	.Ltmp410 # Offset: 252
    000000fe: 	movl	0x8(%r15,%r10), %edx
    00000103: 	shrl	$0x5, %edx
    00000106: 	addl	%edx, %eax
.Ltmp410:
    00000108: 	movl	%edi, %edx
    0000010a: 	shrl	$0x5, %edx
    0000010d: 	imull	$0x1f40, %edx, %edx
    00000113: 	cmpl	%eax, %edx
    00000115: 	je	.Ltmp413 # Offset: 277
    00000117: 	movl	current_test(%rip), %edx
    0000011d: 	movq	%r12, %rsi
    00000120: 	movl	$0x1, %edi
    00000125: 	xorl	%eax, %eax
    00000127: 	addl	$0x1, %r13d
    0000012b: 	callq	__printf_chk@PLT # Offset: 299
    00000130: 	movl	iterations(%rip), %esi
    00000136: 	cmpl	%esi, %r13d
    00000139: 	jge	.Ltmp409 # Offset: 313
    0000013b: 	movq	init_value(%rip), %rdi
    00000142: 	jmp	.Ltmp414 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp413:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp414 # Offset: 343
.Ltmp409:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp411:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp415 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj20shift_right_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIj29shift_right_repeated_constantIjEEvPT_iPKc" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x8420
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x8420
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj29shift_right_repeated_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp416 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r13d, %r13d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	leaq	DATAat0x10f44(%rip), %r12
    00000059: 	shrl	$0x2, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %rbx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp421:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp417 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp418 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp419:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrld	$0x5, %xmm0
    0000009d: 	paddd	%xmm0, %xmm1
    000000a1: 	cmpq	%rbx, %rax
    000000a4: 	jne	.Ltmp419 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	movl	%ebp, %edx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddd	%xmm0, %xmm1
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x4, %xmm0
    000000be: 	paddd	%xmm0, %xmm1
    000000c2: 	movd	%xmm1, %eax
    000000c6: 	cmpl	%r14d, %ebp
    000000c9: 	je	.Ltmp417 # Offset: 201
.Ltmp422:
    000000cb: 	movslq	%edx, %r9
    000000ce: 	leaq	(,%r9,4), %r10
    000000d6: 	movl	(%r15,%r9,4), %r9d
    000000da: 	shrl	$0x5, %r9d
    000000de: 	addl	%r9d, %eax
    000000e1: 	leal	0x1(%rdx), %r9d
    000000e5: 	cmpl	%r9d, %r14d
    000000e8: 	jle	.Ltmp417 # Offset: 232
    000000ea: 	movl	0x4(%r15,%r10), %r9d
    000000ef: 	addl	$0x2, %edx
    000000f2: 	shrl	$0x5, %r9d
    000000f6: 	addl	%r9d, %eax
    000000f9: 	cmpl	%edx, %r14d
    000000fc: 	jle	.Ltmp417 # Offset: 252
    000000fe: 	movl	0x8(%r15,%r10), %edx
    00000103: 	shrl	$0x5, %edx
    00000106: 	addl	%edx, %eax
.Ltmp417:
    00000108: 	movl	%edi, %edx
    0000010a: 	shrl	$0x5, %edx
    0000010d: 	imull	$0x1f40, %edx, %edx
    00000113: 	cmpl	%eax, %edx
    00000115: 	je	.Ltmp420 # Offset: 277
    00000117: 	movl	current_test(%rip), %edx
    0000011d: 	movq	%r12, %rsi
    00000120: 	movl	$0x1, %edi
    00000125: 	xorl	%eax, %eax
    00000127: 	addl	$0x1, %r13d
    0000012b: 	callq	__printf_chk@PLT # Offset: 299
    00000130: 	movl	iterations(%rip), %esi
    00000136: 	cmpl	%esi, %r13d
    00000139: 	jge	.Ltmp416 # Offset: 313
    0000013b: 	movq	init_value(%rip), %rdi
    00000142: 	jmp	.Ltmp421 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp420:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp421 # Offset: 343
.Ltmp416:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp418:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp422 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj29shift_right_repeated_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIj19shift_left_constantIjEEvPT_iPKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x85d0
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x85d0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj19shift_left_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp423 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r13d, %r13d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	leaq	DATAat0x10f44(%rip), %r12
    00000059: 	shrl	$0x2, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %rbx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp428:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp424 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp425 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp426:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pslld	$0x5, %xmm0
    0000009d: 	paddd	%xmm0, %xmm1
    000000a1: 	cmpq	%rbx, %rax
    000000a4: 	jne	.Ltmp426 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	movl	%ebp, %edx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddd	%xmm0, %xmm1
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x4, %xmm0
    000000be: 	paddd	%xmm0, %xmm1
    000000c2: 	movd	%xmm1, %eax
    000000c6: 	cmpl	%r14d, %ebp
    000000c9: 	je	.Ltmp424 # Offset: 201
.Ltmp429:
    000000cb: 	movslq	%edx, %r9
    000000ce: 	leaq	(,%r9,4), %r10
    000000d6: 	movl	(%r15,%r9,4), %r9d
    000000da: 	shll	$0x5, %r9d
    000000de: 	addl	%r9d, %eax
    000000e1: 	leal	0x1(%rdx), %r9d
    000000e5: 	cmpl	%r9d, %r14d
    000000e8: 	jle	.Ltmp424 # Offset: 232
    000000ea: 	movl	0x4(%r15,%r10), %r9d
    000000ef: 	addl	$0x2, %edx
    000000f2: 	shll	$0x5, %r9d
    000000f6: 	addl	%r9d, %eax
    000000f9: 	cmpl	%edx, %r14d
    000000fc: 	jle	.Ltmp424 # Offset: 252
    000000fe: 	movl	0x8(%r15,%r10), %edx
    00000103: 	shll	$0x5, %edx
    00000106: 	addl	%edx, %eax
.Ltmp424:
    00000108: 	movl	%edi, %edx
    0000010a: 	shll	$0x5, %edx
    0000010d: 	imull	$0x1f40, %edx, %edx
    00000113: 	cmpl	%eax, %edx
    00000115: 	je	.Ltmp427 # Offset: 277
    00000117: 	movl	current_test(%rip), %edx
    0000011d: 	movq	%r12, %rsi
    00000120: 	movl	$0x1, %edi
    00000125: 	xorl	%eax, %eax
    00000127: 	addl	$0x1, %r13d
    0000012b: 	callq	__printf_chk@PLT # Offset: 299
    00000130: 	movl	iterations(%rip), %esi
    00000136: 	cmpl	%esi, %r13d
    00000139: 	jge	.Ltmp423 # Offset: 313
    0000013b: 	movq	init_value(%rip), %rdi
    00000142: 	jmp	.Ltmp428 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp427:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp428 # Offset: 343
.Ltmp423:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp425:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp429 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj19shift_left_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIj28shift_left_repeated_constantIjEEvPT_iPKc" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x8780
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x8780
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj28shift_left_repeated_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp430 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r13d, %r13d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	leaq	DATAat0x10f44(%rip), %r12
    00000059: 	shrl	$0x2, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %rbx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp435:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp431 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp432 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp433:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pslld	$0x5, %xmm0
    0000009d: 	paddd	%xmm0, %xmm1
    000000a1: 	cmpq	%rbx, %rax
    000000a4: 	jne	.Ltmp433 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	movl	%ebp, %edx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddd	%xmm0, %xmm1
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x4, %xmm0
    000000be: 	paddd	%xmm0, %xmm1
    000000c2: 	movd	%xmm1, %eax
    000000c6: 	cmpl	%r14d, %ebp
    000000c9: 	je	.Ltmp431 # Offset: 201
.Ltmp436:
    000000cb: 	movslq	%edx, %r9
    000000ce: 	leaq	(,%r9,4), %r10
    000000d6: 	movl	(%r15,%r9,4), %r9d
    000000da: 	shll	$0x5, %r9d
    000000de: 	addl	%r9d, %eax
    000000e1: 	leal	0x1(%rdx), %r9d
    000000e5: 	cmpl	%r9d, %r14d
    000000e8: 	jle	.Ltmp431 # Offset: 232
    000000ea: 	movl	0x4(%r15,%r10), %r9d
    000000ef: 	addl	$0x2, %edx
    000000f2: 	shll	$0x5, %r9d
    000000f6: 	addl	%r9d, %eax
    000000f9: 	cmpl	%edx, %r14d
    000000fc: 	jle	.Ltmp431 # Offset: 252
    000000fe: 	movl	0x8(%r15,%r10), %edx
    00000103: 	shll	$0x5, %edx
    00000106: 	addl	%edx, %eax
.Ltmp431:
    00000108: 	movl	%edi, %edx
    0000010a: 	shll	$0x5, %edx
    0000010d: 	imull	$0x1f40, %edx, %edx
    00000113: 	cmpl	%eax, %edx
    00000115: 	je	.Ltmp434 # Offset: 277
    00000117: 	movl	current_test(%rip), %edx
    0000011d: 	movq	%r12, %rsi
    00000120: 	movl	$0x1, %edi
    00000125: 	xorl	%eax, %eax
    00000127: 	addl	$0x1, %r13d
    0000012b: 	callq	__printf_chk@PLT # Offset: 299
    00000130: 	movl	iterations(%rip), %esi
    00000136: 	cmpl	%esi, %r13d
    00000139: 	jge	.Ltmp430 # Offset: 313
    0000013b: 	movq	init_value(%rip), %rdi
    00000142: 	jmp	.Ltmp435 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp434:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp435 # Offset: 343
.Ltmp430:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp432:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp436 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj28shift_left_repeated_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIi20shift_right_constantIiEEvPT_iPKc" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x8930
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x8930
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi20shift_right_constantIiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp437 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r13d, %r13d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	leaq	DATAat0x10f44(%rip), %r12
    00000059: 	shrl	$0x2, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %rbx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp442:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp438 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp439 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp440:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrad	$0x5, %xmm0
    0000009d: 	paddd	%xmm0, %xmm1
    000000a1: 	cmpq	%rbx, %rax
    000000a4: 	jne	.Ltmp440 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	movl	%ebp, %edx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddd	%xmm0, %xmm1
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x4, %xmm0
    000000be: 	paddd	%xmm0, %xmm1
    000000c2: 	movd	%xmm1, %eax
    000000c6: 	cmpl	%r14d, %ebp
    000000c9: 	je	.Ltmp438 # Offset: 201
.Ltmp443:
    000000cb: 	movslq	%edx, %r9
    000000ce: 	leaq	(,%r9,4), %r10
    000000d6: 	movl	(%r15,%r9,4), %r9d
    000000da: 	sarl	$0x5, %r9d
    000000de: 	addl	%r9d, %eax
    000000e1: 	leal	0x1(%rdx), %r9d
    000000e5: 	cmpl	%r9d, %r14d
    000000e8: 	jle	.Ltmp438 # Offset: 232
    000000ea: 	movl	0x4(%r15,%r10), %r9d
    000000ef: 	addl	$0x2, %edx
    000000f2: 	sarl	$0x5, %r9d
    000000f6: 	addl	%r9d, %eax
    000000f9: 	cmpl	%edx, %r14d
    000000fc: 	jle	.Ltmp438 # Offset: 252
    000000fe: 	movl	0x8(%r15,%r10), %edx
    00000103: 	sarl	$0x5, %edx
    00000106: 	addl	%edx, %eax
.Ltmp438:
    00000108: 	movl	%edi, %edx
    0000010a: 	sarl	$0x5, %edx
    0000010d: 	imull	$0x1f40, %edx, %edx
    00000113: 	cmpl	%eax, %edx
    00000115: 	je	.Ltmp441 # Offset: 277
    00000117: 	movl	current_test(%rip), %edx
    0000011d: 	movq	%r12, %rsi
    00000120: 	movl	$0x1, %edi
    00000125: 	xorl	%eax, %eax
    00000127: 	addl	$0x1, %r13d
    0000012b: 	callq	__printf_chk@PLT # Offset: 299
    00000130: 	movl	iterations(%rip), %esi
    00000136: 	cmpl	%esi, %r13d
    00000139: 	jge	.Ltmp437 # Offset: 313
    0000013b: 	movq	init_value(%rip), %rdi
    00000142: 	jmp	.Ltmp442 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp441:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp442 # Offset: 343
.Ltmp437:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp439:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp443 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi20shift_right_constantIiEEvPT_iPKc"

Binary Function "_Z13test_constantIi29shift_right_repeated_constantIiEEvPT_iPKc" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x8ae0
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x8ae0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi29shift_right_repeated_constantIiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp444 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r13d, %r13d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	leaq	DATAat0x10f44(%rip), %r12
    00000059: 	shrl	$0x2, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %rbx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp449:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp445 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp446 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp447:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrad	$0x5, %xmm0
    0000009d: 	paddd	%xmm0, %xmm1
    000000a1: 	cmpq	%rbx, %rax
    000000a4: 	jne	.Ltmp447 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	movl	%ebp, %edx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddd	%xmm0, %xmm1
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x4, %xmm0
    000000be: 	paddd	%xmm0, %xmm1
    000000c2: 	movd	%xmm1, %eax
    000000c6: 	cmpl	%r14d, %ebp
    000000c9: 	je	.Ltmp445 # Offset: 201
.Ltmp450:
    000000cb: 	movslq	%edx, %r9
    000000ce: 	leaq	(,%r9,4), %r10
    000000d6: 	movl	(%r15,%r9,4), %r9d
    000000da: 	sarl	$0x5, %r9d
    000000de: 	addl	%r9d, %eax
    000000e1: 	leal	0x1(%rdx), %r9d
    000000e5: 	cmpl	%r9d, %r14d
    000000e8: 	jle	.Ltmp445 # Offset: 232
    000000ea: 	movl	0x4(%r15,%r10), %r9d
    000000ef: 	addl	$0x2, %edx
    000000f2: 	sarl	$0x5, %r9d
    000000f6: 	addl	%r9d, %eax
    000000f9: 	cmpl	%edx, %r14d
    000000fc: 	jle	.Ltmp445 # Offset: 252
    000000fe: 	movl	0x8(%r15,%r10), %edx
    00000103: 	sarl	$0x5, %edx
    00000106: 	addl	%edx, %eax
.Ltmp445:
    00000108: 	movl	%edi, %edx
    0000010a: 	sarl	$0x5, %edx
    0000010d: 	imull	$0x1f40, %edx, %edx
    00000113: 	cmpl	%eax, %edx
    00000115: 	je	.Ltmp448 # Offset: 277
    00000117: 	movl	current_test(%rip), %edx
    0000011d: 	movq	%r12, %rsi
    00000120: 	movl	$0x1, %edi
    00000125: 	xorl	%eax, %eax
    00000127: 	addl	$0x1, %r13d
    0000012b: 	callq	__printf_chk@PLT # Offset: 299
    00000130: 	movl	iterations(%rip), %esi
    00000136: 	cmpl	%esi, %r13d
    00000139: 	jge	.Ltmp444 # Offset: 313
    0000013b: 	movq	init_value(%rip), %rdi
    00000142: 	jmp	.Ltmp449 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp448:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp449 # Offset: 343
.Ltmp444:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp446:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp450 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi29shift_right_repeated_constantIiEEvPT_iPKc"

Binary Function "_Z13test_constantIi19shift_left_constantIiEEvPT_iPKc" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x8c90
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x8c90
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi19shift_left_constantIiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp451 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r13d, %r13d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	leaq	DATAat0x10f44(%rip), %r12
    00000059: 	shrl	$0x2, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %rbx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp456:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp452 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp453 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp454:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pslld	$0x5, %xmm0
    0000009d: 	paddd	%xmm0, %xmm1
    000000a1: 	cmpq	%rbx, %rax
    000000a4: 	jne	.Ltmp454 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	movl	%ebp, %edx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddd	%xmm0, %xmm1
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x4, %xmm0
    000000be: 	paddd	%xmm0, %xmm1
    000000c2: 	movd	%xmm1, %eax
    000000c6: 	cmpl	%r14d, %ebp
    000000c9: 	je	.Ltmp452 # Offset: 201
.Ltmp457:
    000000cb: 	movslq	%edx, %r9
    000000ce: 	leaq	(,%r9,4), %r10
    000000d6: 	movl	(%r15,%r9,4), %r9d
    000000da: 	shll	$0x5, %r9d
    000000de: 	addl	%r9d, %eax
    000000e1: 	leal	0x1(%rdx), %r9d
    000000e5: 	cmpl	%r9d, %r14d
    000000e8: 	jle	.Ltmp452 # Offset: 232
    000000ea: 	movl	0x4(%r15,%r10), %r9d
    000000ef: 	addl	$0x2, %edx
    000000f2: 	shll	$0x5, %r9d
    000000f6: 	addl	%r9d, %eax
    000000f9: 	cmpl	%edx, %r14d
    000000fc: 	jle	.Ltmp452 # Offset: 252
    000000fe: 	movl	0x8(%r15,%r10), %edx
    00000103: 	shll	$0x5, %edx
    00000106: 	addl	%edx, %eax
.Ltmp452:
    00000108: 	movl	%edi, %edx
    0000010a: 	shll	$0x5, %edx
    0000010d: 	imull	$0x1f40, %edx, %edx
    00000113: 	cmpl	%eax, %edx
    00000115: 	je	.Ltmp455 # Offset: 277
    00000117: 	movl	current_test(%rip), %edx
    0000011d: 	movq	%r12, %rsi
    00000120: 	movl	$0x1, %edi
    00000125: 	xorl	%eax, %eax
    00000127: 	addl	$0x1, %r13d
    0000012b: 	callq	__printf_chk@PLT # Offset: 299
    00000130: 	movl	iterations(%rip), %esi
    00000136: 	cmpl	%esi, %r13d
    00000139: 	jge	.Ltmp451 # Offset: 313
    0000013b: 	movq	init_value(%rip), %rdi
    00000142: 	jmp	.Ltmp456 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp455:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp456 # Offset: 343
.Ltmp451:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp453:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp457 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi19shift_left_constantIiEEvPT_iPKc"

Binary Function "_Z13test_constantIi28shift_left_repeated_constantIiEEvPT_iPKc" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x8e40
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x8e40
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi28shift_left_repeated_constantIiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp458 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r13d, %r13d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x4, %ebp
    00000052: 	leaq	DATAat0x10f44(%rip), %r12
    00000059: 	shrl	$0x2, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %rbx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp463:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp459 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp460 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp461:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pslld	$0x5, %xmm0
    0000009d: 	paddd	%xmm0, %xmm1
    000000a1: 	cmpq	%rbx, %rax
    000000a4: 	jne	.Ltmp461 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	movl	%ebp, %edx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddd	%xmm0, %xmm1
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x4, %xmm0
    000000be: 	paddd	%xmm0, %xmm1
    000000c2: 	movd	%xmm1, %eax
    000000c6: 	cmpl	%r14d, %ebp
    000000c9: 	je	.Ltmp459 # Offset: 201
.Ltmp464:
    000000cb: 	movslq	%edx, %r9
    000000ce: 	leaq	(,%r9,4), %r10
    000000d6: 	movl	(%r15,%r9,4), %r9d
    000000da: 	shll	$0x5, %r9d
    000000de: 	addl	%r9d, %eax
    000000e1: 	leal	0x1(%rdx), %r9d
    000000e5: 	cmpl	%r9d, %r14d
    000000e8: 	jle	.Ltmp459 # Offset: 232
    000000ea: 	movl	0x4(%r15,%r10), %r9d
    000000ef: 	addl	$0x2, %edx
    000000f2: 	shll	$0x5, %r9d
    000000f6: 	addl	%r9d, %eax
    000000f9: 	cmpl	%edx, %r14d
    000000fc: 	jle	.Ltmp459 # Offset: 252
    000000fe: 	movl	0x8(%r15,%r10), %edx
    00000103: 	shll	$0x5, %edx
    00000106: 	addl	%edx, %eax
.Ltmp459:
    00000108: 	movl	%edi, %edx
    0000010a: 	shll	$0x5, %edx
    0000010d: 	imull	$0x1f40, %edx, %edx
    00000113: 	cmpl	%eax, %edx
    00000115: 	je	.Ltmp462 # Offset: 277
    00000117: 	movl	current_test(%rip), %edx
    0000011d: 	movq	%r12, %rsi
    00000120: 	movl	$0x1, %edi
    00000125: 	xorl	%eax, %eax
    00000127: 	addl	$0x1, %r13d
    0000012b: 	callq	__printf_chk@PLT # Offset: 299
    00000130: 	movl	iterations(%rip), %esi
    00000136: 	cmpl	%esi, %r13d
    00000139: 	jge	.Ltmp458 # Offset: 313
    0000013b: 	movq	init_value(%rip), %rdi
    00000142: 	jmp	.Ltmp463 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp462:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp463 # Offset: 343
.Ltmp458:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp460:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp464 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi28shift_left_repeated_constantIiEEvPT_iPKc"

Binary Function "_Z13test_constantIm20shift_right_constantImEEvPT_iPKc" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x8ff0
  Size        : 0x152
  MaxSize     : 0x160
  Offset      : 0x8ff0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm20shift_right_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp465 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	leaq	DATAat0x10f44(%rip), %rbx
    00000053: 	subl	$0x1, %eax
    00000056: 	shlq	$0x4, %rax
    0000005a: 	leaq	0x10(%r12,%rax), %r13
    0000005f: 	nop # Size: 1
.Ltmp470:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp466 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp467 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm1, %xmm1
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp468:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	psrlq	$0x5, %xmm0
    0000008d: 	paddq	%xmm0, %xmm1
    00000091: 	cmpq	%rax, %r13
    00000094: 	jne	.Ltmp468 # Offset: 148
    00000096: 	movdqa	%xmm1, %xmm0
    0000009a: 	movslq	%ebp, %rdx
    0000009d: 	psrldq	$0x8, %xmm0
    000000a2: 	paddq	%xmm0, %xmm1
    000000a6: 	movq	%xmm1, %rax
    000000ab: 	cmpl	%r14d, %ebp
    000000ae: 	je	.Ltmp466 # Offset: 174
.Ltmp471:
    000000b0: 	movq	(%r12,%rdx,8), %rdx
    000000b4: 	shrq	$0x5, %rdx
    000000b8: 	addq	%rdx, %rax
.Ltmp466:
    000000bb: 	movq	%rdi, %rdx
    000000be: 	shrq	$0x5, %rdx
    000000c2: 	imulq	$0x1f40, %rdx, %rdx
    000000c9: 	cmpq	%rax, %rdx
    000000cc: 	je	.Ltmp469 # Offset: 204
    000000ce: 	movl	current_test(%rip), %edx
    000000d4: 	movq	%rbx, %rsi
    000000d7: 	movl	$0x1, %edi
    000000dc: 	xorl	%eax, %eax
    000000de: 	addl	$0x1, %r15d
    000000e2: 	callq	__printf_chk@PLT # Offset: 226
    000000e7: 	movl	iterations(%rip), %esi
    000000ed: 	cmpl	%esi, %r15d
    000000f0: 	jge	.Ltmp465 # Offset: 240
    000000f2: 	movq	init_value(%rip), %rdi
    000000f9: 	jmp	.Ltmp470 # Offset: 249
    000000fe: 	nop # Size: 2
.Ltmp469:
    00000100: 	addl	$0x1, %r15d
    00000104: 	cmpl	%esi, %r15d
    00000107: 	jl	.Ltmp470 # Offset: 263
.Ltmp465:
    0000010d: 	callq	clock@PLT # Offset: 269
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	movq	0x8(%rsp), %rdi
    0000011b: 	movq	%rax, end_time(%rip)
    00000122: 	subq	start_time(%rip), %rax
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
.Ltmp467:
    00000149: 	xorl	%edx, %edx
    0000014b: 	xorl	%eax, %eax
    0000014d: 	jmp	.Ltmp471 # Offset: 333
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm20shift_right_constantImEEvPT_iPKc"

Binary Function "_Z13test_constantIm29shift_right_repeated_constantImEEvPT_iPKc" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x9150
  Size        : 0x152
  MaxSize     : 0x160
  Offset      : 0x9150
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm29shift_right_repeated_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp472 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	leaq	DATAat0x10f44(%rip), %rbx
    00000053: 	subl	$0x1, %eax
    00000056: 	shlq	$0x4, %rax
    0000005a: 	leaq	0x10(%r12,%rax), %r13
    0000005f: 	nop # Size: 1
.Ltmp477:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp473 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp474 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm1, %xmm1
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp475:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	psrlq	$0x5, %xmm0
    0000008d: 	paddq	%xmm0, %xmm1
    00000091: 	cmpq	%rax, %r13
    00000094: 	jne	.Ltmp475 # Offset: 148
    00000096: 	movdqa	%xmm1, %xmm0
    0000009a: 	movslq	%ebp, %rdx
    0000009d: 	psrldq	$0x8, %xmm0
    000000a2: 	paddq	%xmm0, %xmm1
    000000a6: 	movq	%xmm1, %rax
    000000ab: 	cmpl	%r14d, %ebp
    000000ae: 	je	.Ltmp473 # Offset: 174
.Ltmp478:
    000000b0: 	movq	(%r12,%rdx,8), %rdx
    000000b4: 	shrq	$0x5, %rdx
    000000b8: 	addq	%rdx, %rax
.Ltmp473:
    000000bb: 	movq	%rdi, %rdx
    000000be: 	shrq	$0x5, %rdx
    000000c2: 	imulq	$0x1f40, %rdx, %rdx
    000000c9: 	cmpq	%rax, %rdx
    000000cc: 	je	.Ltmp476 # Offset: 204
    000000ce: 	movl	current_test(%rip), %edx
    000000d4: 	movq	%rbx, %rsi
    000000d7: 	movl	$0x1, %edi
    000000dc: 	xorl	%eax, %eax
    000000de: 	addl	$0x1, %r15d
    000000e2: 	callq	__printf_chk@PLT # Offset: 226
    000000e7: 	movl	iterations(%rip), %esi
    000000ed: 	cmpl	%esi, %r15d
    000000f0: 	jge	.Ltmp472 # Offset: 240
    000000f2: 	movq	init_value(%rip), %rdi
    000000f9: 	jmp	.Ltmp477 # Offset: 249
    000000fe: 	nop # Size: 2
.Ltmp476:
    00000100: 	addl	$0x1, %r15d
    00000104: 	cmpl	%esi, %r15d
    00000107: 	jl	.Ltmp477 # Offset: 263
.Ltmp472:
    0000010d: 	callq	clock@PLT # Offset: 269
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	movq	0x8(%rsp), %rdi
    0000011b: 	movq	%rax, end_time(%rip)
    00000122: 	subq	start_time(%rip), %rax
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
.Ltmp474:
    00000149: 	xorl	%edx, %edx
    0000014b: 	xorl	%eax, %eax
    0000014d: 	jmp	.Ltmp478 # Offset: 333
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm29shift_right_repeated_constantImEEvPT_iPKc"

Binary Function "_Z13test_constantIm19shift_left_constantImEEvPT_iPKc" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x92b0
  Size        : 0x152
  MaxSize     : 0x160
  Offset      : 0x92b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm19shift_left_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp479 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	leaq	DATAat0x10f44(%rip), %rbx
    00000053: 	subl	$0x1, %eax
    00000056: 	shlq	$0x4, %rax
    0000005a: 	leaq	0x10(%r12,%rax), %r13
    0000005f: 	nop # Size: 1
.Ltmp484:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp480 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp481 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm1, %xmm1
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp482:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	psllq	$0x5, %xmm0
    0000008d: 	paddq	%xmm0, %xmm1
    00000091: 	cmpq	%rax, %r13
    00000094: 	jne	.Ltmp482 # Offset: 148
    00000096: 	movdqa	%xmm1, %xmm0
    0000009a: 	movslq	%ebp, %rdx
    0000009d: 	psrldq	$0x8, %xmm0
    000000a2: 	paddq	%xmm0, %xmm1
    000000a6: 	movq	%xmm1, %rax
    000000ab: 	cmpl	%r14d, %ebp
    000000ae: 	je	.Ltmp480 # Offset: 174
.Ltmp485:
    000000b0: 	movq	(%r12,%rdx,8), %rdx
    000000b4: 	shlq	$0x5, %rdx
    000000b8: 	addq	%rdx, %rax
.Ltmp480:
    000000bb: 	movq	%rdi, %rdx
    000000be: 	shlq	$0x5, %rdx
    000000c2: 	imulq	$0x1f40, %rdx, %rdx
    000000c9: 	cmpq	%rax, %rdx
    000000cc: 	je	.Ltmp483 # Offset: 204
    000000ce: 	movl	current_test(%rip), %edx
    000000d4: 	movq	%rbx, %rsi
    000000d7: 	movl	$0x1, %edi
    000000dc: 	xorl	%eax, %eax
    000000de: 	addl	$0x1, %r15d
    000000e2: 	callq	__printf_chk@PLT # Offset: 226
    000000e7: 	movl	iterations(%rip), %esi
    000000ed: 	cmpl	%esi, %r15d
    000000f0: 	jge	.Ltmp479 # Offset: 240
    000000f2: 	movq	init_value(%rip), %rdi
    000000f9: 	jmp	.Ltmp484 # Offset: 249
    000000fe: 	nop # Size: 2
.Ltmp483:
    00000100: 	addl	$0x1, %r15d
    00000104: 	cmpl	%esi, %r15d
    00000107: 	jl	.Ltmp484 # Offset: 263
.Ltmp479:
    0000010d: 	callq	clock@PLT # Offset: 269
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	movq	0x8(%rsp), %rdi
    0000011b: 	movq	%rax, end_time(%rip)
    00000122: 	subq	start_time(%rip), %rax
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
.Ltmp481:
    00000149: 	xorl	%edx, %edx
    0000014b: 	xorl	%eax, %eax
    0000014d: 	jmp	.Ltmp485 # Offset: 333
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm19shift_left_constantImEEvPT_iPKc"

Binary Function "_Z13test_constantIm28shift_left_repeated_constantImEEvPT_iPKc" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x9410
  Size        : 0x152
  MaxSize     : 0x160
  Offset      : 0x9410
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm28shift_left_repeated_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp486 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	leaq	DATAat0x10f44(%rip), %rbx
    00000053: 	subl	$0x1, %eax
    00000056: 	shlq	$0x4, %rax
    0000005a: 	leaq	0x10(%r12,%rax), %r13
    0000005f: 	nop # Size: 1
.Ltmp491:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp487 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp488 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm1, %xmm1
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp489:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	psllq	$0x5, %xmm0
    0000008d: 	paddq	%xmm0, %xmm1
    00000091: 	cmpq	%rax, %r13
    00000094: 	jne	.Ltmp489 # Offset: 148
    00000096: 	movdqa	%xmm1, %xmm0
    0000009a: 	movslq	%ebp, %rdx
    0000009d: 	psrldq	$0x8, %xmm0
    000000a2: 	paddq	%xmm0, %xmm1
    000000a6: 	movq	%xmm1, %rax
    000000ab: 	cmpl	%r14d, %ebp
    000000ae: 	je	.Ltmp487 # Offset: 174
.Ltmp492:
    000000b0: 	movq	(%r12,%rdx,8), %rdx
    000000b4: 	shlq	$0x5, %rdx
    000000b8: 	addq	%rdx, %rax
.Ltmp487:
    000000bb: 	movq	%rdi, %rdx
    000000be: 	shlq	$0x5, %rdx
    000000c2: 	imulq	$0x1f40, %rdx, %rdx
    000000c9: 	cmpq	%rax, %rdx
    000000cc: 	je	.Ltmp490 # Offset: 204
    000000ce: 	movl	current_test(%rip), %edx
    000000d4: 	movq	%rbx, %rsi
    000000d7: 	movl	$0x1, %edi
    000000dc: 	xorl	%eax, %eax
    000000de: 	addl	$0x1, %r15d
    000000e2: 	callq	__printf_chk@PLT # Offset: 226
    000000e7: 	movl	iterations(%rip), %esi
    000000ed: 	cmpl	%esi, %r15d
    000000f0: 	jge	.Ltmp486 # Offset: 240
    000000f2: 	movq	init_value(%rip), %rdi
    000000f9: 	jmp	.Ltmp491 # Offset: 249
    000000fe: 	nop # Size: 2
.Ltmp490:
    00000100: 	addl	$0x1, %r15d
    00000104: 	cmpl	%esi, %r15d
    00000107: 	jl	.Ltmp491 # Offset: 263
.Ltmp486:
    0000010d: 	callq	clock@PLT # Offset: 269
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	movq	0x8(%rsp), %rdi
    0000011b: 	movq	%rax, end_time(%rip)
    00000122: 	subq	start_time(%rip), %rax
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
.Ltmp488:
    00000149: 	xorl	%edx, %edx
    0000014b: 	xorl	%eax, %eax
    0000014d: 	jmp	.Ltmp492 # Offset: 333
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm28shift_left_repeated_constantImEEvPT_iPKc"

Binary Function "_Z13test_constantIl20shift_right_constantIlEEvPT_iPKc" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x9570
  Size        : 0xfb
  MaxSize     : 0x100
  Offset      : 0x9570
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl20shift_right_constantIlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp493 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x10f44(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp497:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp494 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp495:
    00000060: 	movq	(%rax), %rdx
    00000063: 	addq	$0x8, %rax
    00000067: 	sarq	$0x5, %rdx
    0000006b: 	addq	%rdx, %rcx
    0000006e: 	cmpq	%rax, %r13
    00000071: 	jne	.Ltmp495 # Offset: 113
.Ltmp494:
    00000073: 	movq	%rdi, %rax
    00000076: 	sarq	$0x5, %rax
    0000007a: 	imulq	$0x1f40, %rax, %rax
    00000081: 	cmpq	%rcx, %rax
    00000084: 	je	.Ltmp496 # Offset: 132
    00000086: 	movl	current_test(%rip), %edx
    0000008c: 	movq	%rbp, %rsi
    0000008f: 	movl	$0x1, %edi
    00000094: 	xorl	%eax, %eax
    00000096: 	addl	$0x1, %r14d
    0000009a: 	callq	__printf_chk@PLT # Offset: 154
    0000009f: 	movl	iterations(%rip), %esi
    000000a5: 	cmpl	%esi, %r14d
    000000a8: 	jge	.Ltmp493 # Offset: 168
    000000aa: 	movq	init_value(%rip), %rdi
    000000b1: 	jmp	.Ltmp497 # Offset: 177
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp496:
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	cmpl	%esi, %r14d
    000000bf: 	jl	.Ltmp497 # Offset: 191
.Ltmp493:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r12, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000000e8: 	addq	$0x8, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl20shift_right_constantIlEEvPT_iPKc"

Binary Function "_Z13test_constantIl29shift_right_repeated_constantIlEEvPT_iPKc" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x9670
  Size        : 0xfb
  MaxSize     : 0x100
  Offset      : 0x9670
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl29shift_right_repeated_constantIlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp498 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x10f44(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp502:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp499 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp500:
    00000060: 	movq	(%rax), %rdx
    00000063: 	addq	$0x8, %rax
    00000067: 	sarq	$0x5, %rdx
    0000006b: 	addq	%rdx, %rcx
    0000006e: 	cmpq	%rax, %r13
    00000071: 	jne	.Ltmp500 # Offset: 113
.Ltmp499:
    00000073: 	movq	%rdi, %rax
    00000076: 	sarq	$0x5, %rax
    0000007a: 	imulq	$0x1f40, %rax, %rax
    00000081: 	cmpq	%rcx, %rax
    00000084: 	je	.Ltmp501 # Offset: 132
    00000086: 	movl	current_test(%rip), %edx
    0000008c: 	movq	%rbp, %rsi
    0000008f: 	movl	$0x1, %edi
    00000094: 	xorl	%eax, %eax
    00000096: 	addl	$0x1, %r14d
    0000009a: 	callq	__printf_chk@PLT # Offset: 154
    0000009f: 	movl	iterations(%rip), %esi
    000000a5: 	cmpl	%esi, %r14d
    000000a8: 	jge	.Ltmp498 # Offset: 168
    000000aa: 	movq	init_value(%rip), %rdi
    000000b1: 	jmp	.Ltmp502 # Offset: 177
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp501:
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	cmpl	%esi, %r14d
    000000bf: 	jl	.Ltmp502 # Offset: 191
.Ltmp498:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r12, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x10f68(%rip), %xmm0
    000000e8: 	addq	$0x8, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl29shift_right_repeated_constantIlEEvPT_iPKc"

Binary Function "_Z13test_constantIl19shift_left_constantIlEEvPT_iPKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x9770
  Size        : 0x152
  MaxSize     : 0x160
  Offset      : 0x9770
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl19shift_left_constantIlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp503 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	leaq	DATAat0x10f44(%rip), %rbx
    00000053: 	subl	$0x1, %eax
    00000056: 	shlq	$0x4, %rax
    0000005a: 	leaq	0x10(%r12,%rax), %r13
    0000005f: 	nop # Size: 1
.Ltmp508:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp504 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp505 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm1, %xmm1
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp506:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	psllq	$0x5, %xmm0
    0000008d: 	paddq	%xmm0, %xmm1
    00000091: 	cmpq	%rax, %r13
    00000094: 	jne	.Ltmp506 # Offset: 148
    00000096: 	movdqa	%xmm1, %xmm0
    0000009a: 	movslq	%ebp, %rdx
    0000009d: 	psrldq	$0x8, %xmm0
    000000a2: 	paddq	%xmm0, %xmm1
    000000a6: 	movq	%xmm1, %rax
    000000ab: 	cmpl	%r14d, %ebp
    000000ae: 	je	.Ltmp504 # Offset: 174
.Ltmp509:
    000000b0: 	movq	(%r12,%rdx,8), %rdx
    000000b4: 	shlq	$0x5, %rdx
    000000b8: 	addq	%rdx, %rax
.Ltmp504:
    000000bb: 	movq	%rdi, %rdx
    000000be: 	shlq	$0x5, %rdx
    000000c2: 	imulq	$0x1f40, %rdx, %rdx
    000000c9: 	cmpq	%rax, %rdx
    000000cc: 	je	.Ltmp507 # Offset: 204
    000000ce: 	movl	current_test(%rip), %edx
    000000d4: 	movq	%rbx, %rsi
    000000d7: 	movl	$0x1, %edi
    000000dc: 	xorl	%eax, %eax
    000000de: 	addl	$0x1, %r15d
    000000e2: 	callq	__printf_chk@PLT # Offset: 226
    000000e7: 	movl	iterations(%rip), %esi
    000000ed: 	cmpl	%esi, %r15d
    000000f0: 	jge	.Ltmp503 # Offset: 240
    000000f2: 	movq	init_value(%rip), %rdi
    000000f9: 	jmp	.Ltmp508 # Offset: 249
    000000fe: 	nop # Size: 2
.Ltmp507:
    00000100: 	addl	$0x1, %r15d
    00000104: 	cmpl	%esi, %r15d
    00000107: 	jl	.Ltmp508 # Offset: 263
.Ltmp503:
    0000010d: 	callq	clock@PLT # Offset: 269
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	movq	0x8(%rsp), %rdi
    0000011b: 	movq	%rax, end_time(%rip)
    00000122: 	subq	start_time(%rip), %rax
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
.Ltmp505:
    00000149: 	xorl	%edx, %edx
    0000014b: 	xorl	%eax, %eax
    0000014d: 	jmp	.Ltmp509 # Offset: 333
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl19shift_left_constantIlEEvPT_iPKc"

Binary Function "_Z13test_constantIl28shift_left_repeated_constantIlEEvPT_iPKc" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x98d0
  Size        : 0x152
  MaxSize     : 0x160
  Offset      : 0x98d0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl28shift_left_repeated_constantIlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp510 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ebp
    0000004c: 	leaq	DATAat0x10f44(%rip), %rbx
    00000053: 	subl	$0x1, %eax
    00000056: 	shlq	$0x4, %rax
    0000005a: 	leaq	0x10(%r12,%rax), %r13
    0000005f: 	nop # Size: 1
.Ltmp515:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp511 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp512 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm1, %xmm1
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp513:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	psllq	$0x5, %xmm0
    0000008d: 	paddq	%xmm0, %xmm1
    00000091: 	cmpq	%rax, %r13
    00000094: 	jne	.Ltmp513 # Offset: 148
    00000096: 	movdqa	%xmm1, %xmm0
    0000009a: 	movslq	%ebp, %rdx
    0000009d: 	psrldq	$0x8, %xmm0
    000000a2: 	paddq	%xmm0, %xmm1
    000000a6: 	movq	%xmm1, %rax
    000000ab: 	cmpl	%r14d, %ebp
    000000ae: 	je	.Ltmp511 # Offset: 174
.Ltmp516:
    000000b0: 	movq	(%r12,%rdx,8), %rdx
    000000b4: 	shlq	$0x5, %rdx
    000000b8: 	addq	%rdx, %rax
.Ltmp511:
    000000bb: 	movq	%rdi, %rdx
    000000be: 	shlq	$0x5, %rdx
    000000c2: 	imulq	$0x1f40, %rdx, %rdx
    000000c9: 	cmpq	%rax, %rdx
    000000cc: 	je	.Ltmp514 # Offset: 204
    000000ce: 	movl	current_test(%rip), %edx
    000000d4: 	movq	%rbx, %rsi
    000000d7: 	movl	$0x1, %edi
    000000dc: 	xorl	%eax, %eax
    000000de: 	addl	$0x1, %r15d
    000000e2: 	callq	__printf_chk@PLT # Offset: 226
    000000e7: 	movl	iterations(%rip), %esi
    000000ed: 	cmpl	%esi, %r15d
    000000f0: 	jge	.Ltmp510 # Offset: 240
    000000f2: 	movq	init_value(%rip), %rdi
    000000f9: 	jmp	.Ltmp515 # Offset: 249
    000000fe: 	nop # Size: 2
.Ltmp514:
    00000100: 	addl	$0x1, %r15d
    00000104: 	cmpl	%esi, %r15d
    00000107: 	jl	.Ltmp515 # Offset: 263
.Ltmp510:
    0000010d: 	callq	clock@PLT # Offset: 269
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	movq	0x8(%rsp), %rdi
    0000011b: 	movq	%rax, end_time(%rip)
    00000122: 	subq	start_time(%rip), %rax
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
.Ltmp512:
    00000149: 	xorl	%edx, %edx
    0000014b: 	xorl	%eax, %eax
    0000014d: 	jmp	.Ltmp516 # Offset: 333
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl28shift_left_repeated_constantIlEEvPT_iPKc"

Binary Function "_Z14test_variable1Ih29shift_right_repeated_variableIhEEvPT_iS2_PKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x9a30
  Size        : 0x422
  MaxSize     : 0x430
  Offset      : 0x9a30
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ih29shift_right_repeated_variableIhEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%edx, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %edi
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%edi, %edi
    00000033: 	jle	.Ltmp517 # Offset: 51
    00000039: 	leal	-0x1(%rbx), %eax
    0000003c: 	movl	%ebx, %ebp
    0000003e: 	movq	init_value(%rip), %r9
    00000045: 	movzbl	%r12b, %ecx
    00000049: 	movl	%eax, 0x8(%rsp)
    0000004d: 	movl	%ebx, %eax
    0000004f: 	movdqa	DATAat0x10fa0(%rip), %xmm7
    00000057: 	andl	$-0x10, %ebp
    0000005a: 	shrl	$0x4, %eax
    0000005d: 	xorl	%r15d, %r15d
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%r13,%rax), %r14
    0000006c: 	movzbl	%r12b, %eax
    00000070: 	leaq	DATAat0x10f44(%rip), %r12
    00000077: 	movq	%rax, %xmm0
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp522:
    00000080: 	xorl	%eax, %eax
    00000082: 	testl	%ebx, %ebx
    00000084: 	jle	.Ltmp518 # Offset: 132
    0000008a: 	cmpl	$0xe, 0x8(%rsp)
    0000008f: 	jbe	.Ltmp519 # Offset: 143
    00000095: 	pxor	%xmm5, %xmm5
    00000099: 	movq	%r13, %rax
    0000009c: 	pxor	%xmm4, %xmm4
    000000a0: 	movdqa	%xmm5, %xmm6
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp520:
    000000a8: 	movdqu	(%rax), %xmm3
    000000ac: 	addq	$0x10, %rax
    000000b0: 	movdqa	%xmm3, %xmm2
    000000b4: 	punpckhbw	%xmm6, %xmm3
    000000b8: 	punpcklbw	%xmm6, %xmm2
    000000bc: 	movdqa	%xmm2, %xmm1
    000000c0: 	punpckhwd	%xmm4, %xmm2
    000000c4: 	punpcklwd	%xmm4, %xmm1
    000000c8: 	psrad	%xmm0, %xmm2
    000000cc: 	psrad	%xmm0, %xmm1
    000000d0: 	psrad	%xmm0, %xmm2
    000000d4: 	psrad	%xmm0, %xmm1
    000000d8: 	psrad	%xmm0, %xmm2
    000000dc: 	psrad	%xmm0, %xmm1
    000000e0: 	psrad	%xmm0, %xmm2
    000000e4: 	psrad	%xmm0, %xmm1
    000000e8: 	psrad	%xmm0, %xmm2
    000000ec: 	psrad	%xmm0, %xmm1
    000000f0: 	movdqa	%xmm1, %xmm8
    000000f5: 	punpcklwd	%xmm2, %xmm1
    000000f9: 	punpckhwd	%xmm2, %xmm8
    000000fe: 	movdqa	%xmm1, %xmm2
    00000102: 	punpckhwd	%xmm8, %xmm2
    00000107: 	punpcklwd	%xmm8, %xmm1
    0000010c: 	punpcklwd	%xmm2, %xmm1
    00000110: 	movdqa	%xmm3, %xmm2
    00000114: 	punpckhwd	%xmm4, %xmm3
    00000118: 	punpcklwd	%xmm4, %xmm2
    0000011c: 	psrad	%xmm0, %xmm3
    00000120: 	pand	%xmm7, %xmm1
    00000124: 	psrad	%xmm0, %xmm2
    00000128: 	psrad	%xmm0, %xmm3
    0000012c: 	psrad	%xmm0, %xmm2
    00000130: 	psrad	%xmm0, %xmm3
    00000134: 	psrad	%xmm0, %xmm2
    00000138: 	psrad	%xmm0, %xmm3
    0000013c: 	psrad	%xmm0, %xmm2
    00000140: 	psrad	%xmm0, %xmm3
    00000144: 	psrad	%xmm0, %xmm2
    00000148: 	movdqa	%xmm2, %xmm8
    0000014d: 	punpcklwd	%xmm3, %xmm2
    00000151: 	punpckhwd	%xmm3, %xmm8
    00000156: 	movdqa	%xmm2, %xmm3
    0000015a: 	punpckhwd	%xmm8, %xmm3
    0000015f: 	punpcklwd	%xmm8, %xmm2
    00000164: 	punpcklwd	%xmm3, %xmm2
    00000168: 	pand	%xmm7, %xmm2
    0000016c: 	packuswb	%xmm2, %xmm1
    00000170: 	paddb	%xmm1, %xmm5
    00000174: 	cmpq	%r14, %rax
    00000177: 	jne	.Ltmp520 # Offset: 375
    0000017d: 	movdqa	%xmm5, %xmm1
    00000181: 	psrldq	$0x8, %xmm1
    00000186: 	paddb	%xmm1, %xmm5
    0000018a: 	psadbw	%xmm6, %xmm5
    0000018e: 	movd	%xmm5, %eax
    00000192: 	cmpl	%ebx, %ebp
    00000194: 	je	.Ltmp518 # Offset: 404
    0000019a: 	movl	%ebp, %esi
.Ltmp523:
    0000019c: 	movslq	%esi, %rdx
    0000019f: 	movzbl	(%r13,%rdx), %edx
    000001a5: 	sarl	%cl, %edx
    000001a7: 	sarl	%cl, %edx
    000001a9: 	sarl	%cl, %edx
    000001ab: 	sarl	%cl, %edx
    000001ad: 	sarl	%cl, %edx
    000001af: 	addl	%edx, %eax
    000001b1: 	leal	0x1(%rsi), %edx
    000001b4: 	cmpl	%edx, %ebx
    000001b6: 	jle	.Ltmp518 # Offset: 438
    000001bc: 	movslq	%edx, %rdx
    000001bf: 	movzbl	(%r13,%rdx), %edx
    000001c5: 	sarl	%cl, %edx
    000001c7: 	sarl	%cl, %edx
    000001c9: 	sarl	%cl, %edx
    000001cb: 	sarl	%cl, %edx
    000001cd: 	sarl	%cl, %edx
    000001cf: 	addl	%edx, %eax
    000001d1: 	leal	0x2(%rsi), %edx
    000001d4: 	cmpl	%edx, %ebx
    000001d6: 	jle	.Ltmp518 # Offset: 470
    000001dc: 	movslq	%edx, %rdx
    000001df: 	movzbl	(%r13,%rdx), %edx
    000001e5: 	sarl	%cl, %edx
    000001e7: 	sarl	%cl, %edx
    000001e9: 	sarl	%cl, %edx
    000001eb: 	sarl	%cl, %edx
    000001ed: 	sarl	%cl, %edx
    000001ef: 	addl	%edx, %eax
    000001f1: 	leal	0x3(%rsi), %edx
    000001f4: 	cmpl	%edx, %ebx
    000001f6: 	jle	.Ltmp518 # Offset: 502
    000001fc: 	movslq	%edx, %rdx
    000001ff: 	movzbl	(%r13,%rdx), %edx
    00000205: 	sarl	%cl, %edx
    00000207: 	sarl	%cl, %edx
    00000209: 	sarl	%cl, %edx
    0000020b: 	sarl	%cl, %edx
    0000020d: 	sarl	%cl, %edx
    0000020f: 	addl	%edx, %eax
    00000211: 	leal	0x4(%rsi), %edx
    00000214: 	cmpl	%edx, %ebx
    00000216: 	jle	.Ltmp518 # Offset: 534
    0000021c: 	movslq	%edx, %rdx
    0000021f: 	movzbl	(%r13,%rdx), %edx
    00000225: 	sarl	%cl, %edx
    00000227: 	sarl	%cl, %edx
    00000229: 	sarl	%cl, %edx
    0000022b: 	sarl	%cl, %edx
    0000022d: 	sarl	%cl, %edx
    0000022f: 	addl	%edx, %eax
    00000231: 	leal	0x5(%rsi), %edx
    00000234: 	cmpl	%edx, %ebx
    00000236: 	jle	.Ltmp518 # Offset: 566
    0000023c: 	movslq	%edx, %rdx
    0000023f: 	movzbl	(%r13,%rdx), %edx
    00000245: 	sarl	%cl, %edx
    00000247: 	sarl	%cl, %edx
    00000249: 	sarl	%cl, %edx
    0000024b: 	sarl	%cl, %edx
    0000024d: 	sarl	%cl, %edx
    0000024f: 	addl	%edx, %eax
    00000251: 	leal	0x6(%rsi), %edx
    00000254: 	cmpl	%edx, %ebx
    00000256: 	jle	.Ltmp518 # Offset: 598
    0000025c: 	movslq	%edx, %rdx
    0000025f: 	movzbl	(%r13,%rdx), %edx
    00000265: 	sarl	%cl, %edx
    00000267: 	sarl	%cl, %edx
    00000269: 	sarl	%cl, %edx
    0000026b: 	sarl	%cl, %edx
    0000026d: 	sarl	%cl, %edx
    0000026f: 	addl	%edx, %eax
    00000271: 	leal	0x7(%rsi), %edx
    00000274: 	cmpl	%edx, %ebx
    00000276: 	jle	.Ltmp518 # Offset: 630
    0000027c: 	movslq	%edx, %rdx
    0000027f: 	movzbl	(%r13,%rdx), %edx
    00000285: 	sarl	%cl, %edx
    00000287: 	sarl	%cl, %edx
    00000289: 	sarl	%cl, %edx
    0000028b: 	sarl	%cl, %edx
    0000028d: 	sarl	%cl, %edx
    0000028f: 	addl	%edx, %eax
    00000291: 	leal	0x8(%rsi), %edx
    00000294: 	cmpl	%edx, %ebx
    00000296: 	jle	.Ltmp518 # Offset: 662
    0000029c: 	movslq	%edx, %rdx
    0000029f: 	movzbl	(%r13,%rdx), %edx
    000002a5: 	sarl	%cl, %edx
    000002a7: 	sarl	%cl, %edx
    000002a9: 	sarl	%cl, %edx
    000002ab: 	sarl	%cl, %edx
    000002ad: 	sarl	%cl, %edx
    000002af: 	addl	%edx, %eax
    000002b1: 	leal	0x9(%rsi), %edx
    000002b4: 	cmpl	%edx, %ebx
    000002b6: 	jle	.Ltmp518 # Offset: 694
    000002bc: 	movslq	%edx, %rdx
    000002bf: 	movzbl	(%r13,%rdx), %edx
    000002c5: 	sarl	%cl, %edx
    000002c7: 	sarl	%cl, %edx
    000002c9: 	sarl	%cl, %edx
    000002cb: 	sarl	%cl, %edx
    000002cd: 	sarl	%cl, %edx
    000002cf: 	addl	%edx, %eax
    000002d1: 	leal	0xa(%rsi), %edx
    000002d4: 	cmpl	%edx, %ebx
    000002d6: 	jle	.Ltmp518 # Offset: 726
    000002dc: 	movslq	%edx, %rdx
    000002df: 	movzbl	(%r13,%rdx), %edx
    000002e5: 	sarl	%cl, %edx
    000002e7: 	sarl	%cl, %edx
    000002e9: 	sarl	%cl, %edx
    000002eb: 	sarl	%cl, %edx
    000002ed: 	sarl	%cl, %edx
    000002ef: 	addl	%edx, %eax
    000002f1: 	leal	0xb(%rsi), %edx
    000002f4: 	cmpl	%edx, %ebx
    000002f6: 	jle	.Ltmp518 # Offset: 758
    000002f8: 	movslq	%edx, %rdx
    000002fb: 	movzbl	(%r13,%rdx), %edx
    00000301: 	sarl	%cl, %edx
    00000303: 	sarl	%cl, %edx
    00000305: 	sarl	%cl, %edx
    00000307: 	sarl	%cl, %edx
    00000309: 	sarl	%cl, %edx
    0000030b: 	addl	%edx, %eax
    0000030d: 	leal	0xc(%rsi), %edx
    00000310: 	cmpl	%edx, %ebx
    00000312: 	jle	.Ltmp518 # Offset: 786
    00000314: 	movslq	%edx, %rdx
    00000317: 	movzbl	(%r13,%rdx), %edx
    0000031d: 	sarl	%cl, %edx
    0000031f: 	sarl	%cl, %edx
    00000321: 	sarl	%cl, %edx
    00000323: 	sarl	%cl, %edx
    00000325: 	sarl	%cl, %edx
    00000327: 	addl	%edx, %eax
    00000329: 	leal	0xd(%rsi), %edx
    0000032c: 	cmpl	%edx, %ebx
    0000032e: 	jle	.Ltmp518 # Offset: 814
    00000330: 	movslq	%edx, %rdx
    00000333: 	addl	$0xe, %esi
    00000336: 	movzbl	(%r13,%rdx), %edx
    0000033c: 	sarl	%cl, %edx
    0000033e: 	sarl	%cl, %edx
    00000340: 	sarl	%cl, %edx
    00000342: 	sarl	%cl, %edx
    00000344: 	sarl	%cl, %edx
    00000346: 	addl	%edx, %eax
    00000348: 	cmpl	%esi, %ebx
    0000034a: 	jle	.Ltmp518 # Offset: 842
    0000034c: 	movslq	%esi, %rsi
    0000034f: 	movzbl	(%r13,%rsi), %edx
    00000355: 	sarl	%cl, %edx
    00000357: 	sarl	%cl, %edx
    00000359: 	sarl	%cl, %edx
    0000035b: 	sarl	%cl, %edx
    0000035d: 	sarl	%cl, %edx
    0000035f: 	addl	%edx, %eax
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp518:
    00000368: 	movzbl	%r9b, %edx
    0000036c: 	sarl	%cl, %edx
    0000036e: 	sarl	%cl, %edx
    00000370: 	sarl	%cl, %edx
    00000372: 	sarl	%cl, %edx
    00000374: 	sarl	%cl, %edx
    00000376: 	shll	$0x6, %edx
    00000379: 	cmpb	%al, %dl
    0000037b: 	je	.Ltmp521 # Offset: 891
    0000037d: 	movl	current_test(%rip), %edx
    00000383: 	movl	$0x1, %edi
    00000388: 	movq	%r12, %rsi
    0000038b: 	xorl	%eax, %eax
    0000038d: 	movl	%ecx, 0xc(%rsp)
    00000391: 	addl	$0x1, %r15d
    00000395: 	movq	%xmm0, 0x10(%rsp)
    0000039b: 	callq	__printf_chk@PLT # Offset: 923
    000003a0: 	movl	iterations(%rip), %edi
    000003a6: 	cmpl	%edi, %r15d
    000003a9: 	jge	.Ltmp517 # Offset: 937
    000003ab: 	movq	init_value(%rip), %r9
    000003b2: 	movl	0xc(%rsp), %ecx
    000003b6: 	movq	0x10(%rsp), %xmm0
    000003bc: 	movdqa	DATAat0x10fa0(%rip), %xmm7
    000003c4: 	jmp	.Ltmp522 # Offset: 964
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp521:
    000003d0: 	addl	$0x1, %r15d
    000003d4: 	cmpl	%edi, %r15d
    000003d7: 	jl	.Ltmp522 # Offset: 983
.Ltmp517:
    000003dd: 	callq	clock@PLT # Offset: 989
    000003e2: 	pxor	%xmm0, %xmm0
    000003e6: 	movq	0x18(%rsp), %rdi
    000003eb: 	movq	%rax, end_time(%rip)
    000003f2: 	subq	start_time(%rip), %rax
    000003f9: 	cvtsi2sd	%rax, %xmm0
    000003fe: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000406: 	addq	$0x28, %rsp
    0000040a: 	popq	%rbx
    0000040b: 	popq	%rbp
    0000040c: 	popq	%r12
    0000040e: 	popq	%r13
    00000410: 	popq	%r14
    00000412: 	popq	%r15
    00000414: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1044
.Ltmp519:
    00000419: 	xorl	%esi, %esi
    0000041b: 	xorl	%eax, %eax
    0000041d: 	jmp	.Ltmp523 # Offset: 1053
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ih29shift_right_repeated_variableIhEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ih28shift_left_repeated_variableIhEEvPT_iS2_PKc" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x9e60
  Size        : 0x422
  MaxSize     : 0x430
  Offset      : 0x9e60
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ih28shift_left_repeated_variableIhEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%edx, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %edi
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%edi, %edi
    00000033: 	jle	.Ltmp524 # Offset: 51
    00000039: 	leal	-0x1(%rbx), %eax
    0000003c: 	movl	%ebx, %ebp
    0000003e: 	movq	init_value(%rip), %r9
    00000045: 	movzbl	%r12b, %ecx
    00000049: 	movl	%eax, 0x8(%rsp)
    0000004d: 	movl	%ebx, %eax
    0000004f: 	movdqa	DATAat0x10fa0(%rip), %xmm7
    00000057: 	andl	$-0x10, %ebp
    0000005a: 	shrl	$0x4, %eax
    0000005d: 	xorl	%r15d, %r15d
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%r13,%rax), %r14
    0000006c: 	movzbl	%r12b, %eax
    00000070: 	leaq	DATAat0x10f44(%rip), %r12
    00000077: 	movq	%rax, %xmm0
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp529:
    00000080: 	xorl	%eax, %eax
    00000082: 	testl	%ebx, %ebx
    00000084: 	jle	.Ltmp525 # Offset: 132
    0000008a: 	cmpl	$0xe, 0x8(%rsp)
    0000008f: 	jbe	.Ltmp526 # Offset: 143
    00000095: 	pxor	%xmm5, %xmm5
    00000099: 	movq	%r13, %rax
    0000009c: 	pxor	%xmm4, %xmm4
    000000a0: 	movdqa	%xmm5, %xmm6
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp527:
    000000a8: 	movdqu	(%rax), %xmm3
    000000ac: 	addq	$0x10, %rax
    000000b0: 	movdqa	%xmm3, %xmm2
    000000b4: 	punpckhbw	%xmm6, %xmm3
    000000b8: 	punpcklbw	%xmm6, %xmm2
    000000bc: 	movdqa	%xmm2, %xmm1
    000000c0: 	punpckhwd	%xmm4, %xmm2
    000000c4: 	punpcklwd	%xmm4, %xmm1
    000000c8: 	pslld	%xmm0, %xmm2
    000000cc: 	pslld	%xmm0, %xmm1
    000000d0: 	pslld	%xmm0, %xmm2
    000000d4: 	pslld	%xmm0, %xmm1
    000000d8: 	pslld	%xmm0, %xmm2
    000000dc: 	pslld	%xmm0, %xmm1
    000000e0: 	pslld	%xmm0, %xmm2
    000000e4: 	pslld	%xmm0, %xmm1
    000000e8: 	pslld	%xmm0, %xmm2
    000000ec: 	pslld	%xmm0, %xmm1
    000000f0: 	movdqa	%xmm1, %xmm8
    000000f5: 	punpcklwd	%xmm2, %xmm1
    000000f9: 	punpckhwd	%xmm2, %xmm8
    000000fe: 	movdqa	%xmm1, %xmm2
    00000102: 	punpckhwd	%xmm8, %xmm2
    00000107: 	punpcklwd	%xmm8, %xmm1
    0000010c: 	punpcklwd	%xmm2, %xmm1
    00000110: 	movdqa	%xmm3, %xmm2
    00000114: 	punpckhwd	%xmm4, %xmm3
    00000118: 	punpcklwd	%xmm4, %xmm2
    0000011c: 	pslld	%xmm0, %xmm3
    00000120: 	pand	%xmm7, %xmm1
    00000124: 	pslld	%xmm0, %xmm2
    00000128: 	pslld	%xmm0, %xmm3
    0000012c: 	pslld	%xmm0, %xmm2
    00000130: 	pslld	%xmm0, %xmm3
    00000134: 	pslld	%xmm0, %xmm2
    00000138: 	pslld	%xmm0, %xmm3
    0000013c: 	pslld	%xmm0, %xmm2
    00000140: 	pslld	%xmm0, %xmm3
    00000144: 	pslld	%xmm0, %xmm2
    00000148: 	movdqa	%xmm2, %xmm8
    0000014d: 	punpcklwd	%xmm3, %xmm2
    00000151: 	punpckhwd	%xmm3, %xmm8
    00000156: 	movdqa	%xmm2, %xmm3
    0000015a: 	punpckhwd	%xmm8, %xmm3
    0000015f: 	punpcklwd	%xmm8, %xmm2
    00000164: 	punpcklwd	%xmm3, %xmm2
    00000168: 	pand	%xmm7, %xmm2
    0000016c: 	packuswb	%xmm2, %xmm1
    00000170: 	paddb	%xmm1, %xmm5
    00000174: 	cmpq	%r14, %rax
    00000177: 	jne	.Ltmp527 # Offset: 375
    0000017d: 	movdqa	%xmm5, %xmm1
    00000181: 	psrldq	$0x8, %xmm1
    00000186: 	paddb	%xmm1, %xmm5
    0000018a: 	psadbw	%xmm6, %xmm5
    0000018e: 	movd	%xmm5, %eax
    00000192: 	cmpl	%ebx, %ebp
    00000194: 	je	.Ltmp525 # Offset: 404
    0000019a: 	movl	%ebp, %esi
.Ltmp530:
    0000019c: 	movslq	%esi, %rdx
    0000019f: 	movzbl	(%r13,%rdx), %edx
    000001a5: 	shll	%cl, %edx
    000001a7: 	shll	%cl, %edx
    000001a9: 	shll	%cl, %edx
    000001ab: 	shll	%cl, %edx
    000001ad: 	shll	%cl, %edx
    000001af: 	addl	%edx, %eax
    000001b1: 	leal	0x1(%rsi), %edx
    000001b4: 	cmpl	%edx, %ebx
    000001b6: 	jle	.Ltmp525 # Offset: 438
    000001bc: 	movslq	%edx, %rdx
    000001bf: 	movzbl	(%r13,%rdx), %edx
    000001c5: 	shll	%cl, %edx
    000001c7: 	shll	%cl, %edx
    000001c9: 	shll	%cl, %edx
    000001cb: 	shll	%cl, %edx
    000001cd: 	shll	%cl, %edx
    000001cf: 	addl	%edx, %eax
    000001d1: 	leal	0x2(%rsi), %edx
    000001d4: 	cmpl	%edx, %ebx
    000001d6: 	jle	.Ltmp525 # Offset: 470
    000001dc: 	movslq	%edx, %rdx
    000001df: 	movzbl	(%r13,%rdx), %edx
    000001e5: 	shll	%cl, %edx
    000001e7: 	shll	%cl, %edx
    000001e9: 	shll	%cl, %edx
    000001eb: 	shll	%cl, %edx
    000001ed: 	shll	%cl, %edx
    000001ef: 	addl	%edx, %eax
    000001f1: 	leal	0x3(%rsi), %edx
    000001f4: 	cmpl	%edx, %ebx
    000001f6: 	jle	.Ltmp525 # Offset: 502
    000001fc: 	movslq	%edx, %rdx
    000001ff: 	movzbl	(%r13,%rdx), %edx
    00000205: 	shll	%cl, %edx
    00000207: 	shll	%cl, %edx
    00000209: 	shll	%cl, %edx
    0000020b: 	shll	%cl, %edx
    0000020d: 	shll	%cl, %edx
    0000020f: 	addl	%edx, %eax
    00000211: 	leal	0x4(%rsi), %edx
    00000214: 	cmpl	%edx, %ebx
    00000216: 	jle	.Ltmp525 # Offset: 534
    0000021c: 	movslq	%edx, %rdx
    0000021f: 	movzbl	(%r13,%rdx), %edx
    00000225: 	shll	%cl, %edx
    00000227: 	shll	%cl, %edx
    00000229: 	shll	%cl, %edx
    0000022b: 	shll	%cl, %edx
    0000022d: 	shll	%cl, %edx
    0000022f: 	addl	%edx, %eax
    00000231: 	leal	0x5(%rsi), %edx
    00000234: 	cmpl	%edx, %ebx
    00000236: 	jle	.Ltmp525 # Offset: 566
    0000023c: 	movslq	%edx, %rdx
    0000023f: 	movzbl	(%r13,%rdx), %edx
    00000245: 	shll	%cl, %edx
    00000247: 	shll	%cl, %edx
    00000249: 	shll	%cl, %edx
    0000024b: 	shll	%cl, %edx
    0000024d: 	shll	%cl, %edx
    0000024f: 	addl	%edx, %eax
    00000251: 	leal	0x6(%rsi), %edx
    00000254: 	cmpl	%edx, %ebx
    00000256: 	jle	.Ltmp525 # Offset: 598
    0000025c: 	movslq	%edx, %rdx
    0000025f: 	movzbl	(%r13,%rdx), %edx
    00000265: 	shll	%cl, %edx
    00000267: 	shll	%cl, %edx
    00000269: 	shll	%cl, %edx
    0000026b: 	shll	%cl, %edx
    0000026d: 	shll	%cl, %edx
    0000026f: 	addl	%edx, %eax
    00000271: 	leal	0x7(%rsi), %edx
    00000274: 	cmpl	%edx, %ebx
    00000276: 	jle	.Ltmp525 # Offset: 630
    0000027c: 	movslq	%edx, %rdx
    0000027f: 	movzbl	(%r13,%rdx), %edx
    00000285: 	shll	%cl, %edx
    00000287: 	shll	%cl, %edx
    00000289: 	shll	%cl, %edx
    0000028b: 	shll	%cl, %edx
    0000028d: 	shll	%cl, %edx
    0000028f: 	addl	%edx, %eax
    00000291: 	leal	0x8(%rsi), %edx
    00000294: 	cmpl	%edx, %ebx
    00000296: 	jle	.Ltmp525 # Offset: 662
    0000029c: 	movslq	%edx, %rdx
    0000029f: 	movzbl	(%r13,%rdx), %edx
    000002a5: 	shll	%cl, %edx
    000002a7: 	shll	%cl, %edx
    000002a9: 	shll	%cl, %edx
    000002ab: 	shll	%cl, %edx
    000002ad: 	shll	%cl, %edx
    000002af: 	addl	%edx, %eax
    000002b1: 	leal	0x9(%rsi), %edx
    000002b4: 	cmpl	%edx, %ebx
    000002b6: 	jle	.Ltmp525 # Offset: 694
    000002bc: 	movslq	%edx, %rdx
    000002bf: 	movzbl	(%r13,%rdx), %edx
    000002c5: 	shll	%cl, %edx
    000002c7: 	shll	%cl, %edx
    000002c9: 	shll	%cl, %edx
    000002cb: 	shll	%cl, %edx
    000002cd: 	shll	%cl, %edx
    000002cf: 	addl	%edx, %eax
    000002d1: 	leal	0xa(%rsi), %edx
    000002d4: 	cmpl	%edx, %ebx
    000002d6: 	jle	.Ltmp525 # Offset: 726
    000002dc: 	movslq	%edx, %rdx
    000002df: 	movzbl	(%r13,%rdx), %edx
    000002e5: 	shll	%cl, %edx
    000002e7: 	shll	%cl, %edx
    000002e9: 	shll	%cl, %edx
    000002eb: 	shll	%cl, %edx
    000002ed: 	shll	%cl, %edx
    000002ef: 	addl	%edx, %eax
    000002f1: 	leal	0xb(%rsi), %edx
    000002f4: 	cmpl	%edx, %ebx
    000002f6: 	jle	.Ltmp525 # Offset: 758
    000002f8: 	movslq	%edx, %rdx
    000002fb: 	movzbl	(%r13,%rdx), %edx
    00000301: 	shll	%cl, %edx
    00000303: 	shll	%cl, %edx
    00000305: 	shll	%cl, %edx
    00000307: 	shll	%cl, %edx
    00000309: 	shll	%cl, %edx
    0000030b: 	addl	%edx, %eax
    0000030d: 	leal	0xc(%rsi), %edx
    00000310: 	cmpl	%edx, %ebx
    00000312: 	jle	.Ltmp525 # Offset: 786
    00000314: 	movslq	%edx, %rdx
    00000317: 	movzbl	(%r13,%rdx), %edx
    0000031d: 	shll	%cl, %edx
    0000031f: 	shll	%cl, %edx
    00000321: 	shll	%cl, %edx
    00000323: 	shll	%cl, %edx
    00000325: 	shll	%cl, %edx
    00000327: 	addl	%edx, %eax
    00000329: 	leal	0xd(%rsi), %edx
    0000032c: 	cmpl	%edx, %ebx
    0000032e: 	jle	.Ltmp525 # Offset: 814
    00000330: 	movslq	%edx, %rdx
    00000333: 	addl	$0xe, %esi
    00000336: 	movzbl	(%r13,%rdx), %edx
    0000033c: 	shll	%cl, %edx
    0000033e: 	shll	%cl, %edx
    00000340: 	shll	%cl, %edx
    00000342: 	shll	%cl, %edx
    00000344: 	shll	%cl, %edx
    00000346: 	addl	%edx, %eax
    00000348: 	cmpl	%esi, %ebx
    0000034a: 	jle	.Ltmp525 # Offset: 842
    0000034c: 	movslq	%esi, %rsi
    0000034f: 	movzbl	(%r13,%rsi), %edx
    00000355: 	shll	%cl, %edx
    00000357: 	shll	%cl, %edx
    00000359: 	shll	%cl, %edx
    0000035b: 	shll	%cl, %edx
    0000035d: 	shll	%cl, %edx
    0000035f: 	addl	%edx, %eax
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp525:
    00000368: 	movzbl	%r9b, %edx
    0000036c: 	shll	%cl, %edx
    0000036e: 	shll	%cl, %edx
    00000370: 	shll	%cl, %edx
    00000372: 	shll	%cl, %edx
    00000374: 	shll	%cl, %edx
    00000376: 	shll	$0x6, %edx
    00000379: 	cmpb	%al, %dl
    0000037b: 	je	.Ltmp528 # Offset: 891
    0000037d: 	movl	current_test(%rip), %edx
    00000383: 	movl	$0x1, %edi
    00000388: 	movq	%r12, %rsi
    0000038b: 	xorl	%eax, %eax
    0000038d: 	movl	%ecx, 0xc(%rsp)
    00000391: 	addl	$0x1, %r15d
    00000395: 	movq	%xmm0, 0x10(%rsp)
    0000039b: 	callq	__printf_chk@PLT # Offset: 923
    000003a0: 	movl	iterations(%rip), %edi
    000003a6: 	cmpl	%edi, %r15d
    000003a9: 	jge	.Ltmp524 # Offset: 937
    000003ab: 	movq	init_value(%rip), %r9
    000003b2: 	movl	0xc(%rsp), %ecx
    000003b6: 	movq	0x10(%rsp), %xmm0
    000003bc: 	movdqa	DATAat0x10fa0(%rip), %xmm7
    000003c4: 	jmp	.Ltmp529 # Offset: 964
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp528:
    000003d0: 	addl	$0x1, %r15d
    000003d4: 	cmpl	%edi, %r15d
    000003d7: 	jl	.Ltmp529 # Offset: 983
.Ltmp524:
    000003dd: 	callq	clock@PLT # Offset: 989
    000003e2: 	pxor	%xmm0, %xmm0
    000003e6: 	movq	0x18(%rsp), %rdi
    000003eb: 	movq	%rax, end_time(%rip)
    000003f2: 	subq	start_time(%rip), %rax
    000003f9: 	cvtsi2sd	%rax, %xmm0
    000003fe: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000406: 	addq	$0x28, %rsp
    0000040a: 	popq	%rbx
    0000040b: 	popq	%rbp
    0000040c: 	popq	%r12
    0000040e: 	popq	%r13
    00000410: 	popq	%r14
    00000412: 	popq	%r15
    00000414: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1044
.Ltmp526:
    00000419: 	xorl	%esi, %esi
    0000041b: 	xorl	%eax, %eax
    0000041d: 	jmp	.Ltmp530 # Offset: 1053
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ih28shift_left_repeated_variableIhEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ia29shift_right_repeated_variableIaEEvPT_iS2_PKc" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0xa290
  Size        : 0x433
  MaxSize     : 0x440
  Offset      : 0xa290
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ia29shift_right_repeated_variableIaEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %edx
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%edx, %edx
    00000032: 	jle	.Ltmp531 # Offset: 50
    00000038: 	leal	-0x1(%rbx), %eax
    0000003b: 	movsbl	%bpl, %ecx
    0000003f: 	movl	%ebx, %ebp
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, (%rsp)
    00000047: 	movl	%ebx, %eax
    00000049: 	movq	init_value(%rip), %rsi
    00000050: 	andl	$-0x10, %ebp
    00000053: 	shrl	$0x4, %eax
    00000056: 	movdqa	DATAat0x10fa0(%rip), %xmm6
    0000005e: 	leaq	DATAat0x10f44(%rip), %r12
    00000065: 	subl	$0x1, %eax
    00000068: 	shlq	$0x4, %rax
    0000006c: 	leaq	0x10(%r14,%rax), %r15
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp536:
    00000078: 	xorl	%eax, %eax
    0000007a: 	testl	%ebx, %ebx
    0000007c: 	jle	.Ltmp532 # Offset: 124
    00000082: 	cmpl	$0xe, (%rsp)
    00000086: 	jbe	.Ltmp533 # Offset: 134
    0000008c: 	pxor	%xmm4, %xmm4
    00000090: 	movslq	%ecx, %rdi
    00000093: 	pxor	%xmm5, %xmm5
    00000097: 	movq	%r14, %rax
    0000009a: 	movq	%rdi, %xmm3
    0000009f: 	movdqa	%xmm4, %xmm7
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp534:
    000000a8: 	movdqu	(%rax), %xmm2
    000000ac: 	movdqa	%xmm7, %xmm0
    000000b0: 	movdqa	%xmm5, %xmm8
    000000b5: 	addq	$0x10, %rax
    000000b9: 	pcmpgtb	%xmm2, %xmm0
    000000bd: 	movdqa	%xmm2, %xmm1
    000000c1: 	punpcklbw	%xmm0, %xmm1
    000000c5: 	punpckhbw	%xmm0, %xmm2
    000000c9: 	pcmpgtw	%xmm1, %xmm8
    000000ce: 	movdqa	%xmm1, %xmm0
    000000d2: 	punpcklwd	%xmm8, %xmm0
    000000d7: 	punpckhwd	%xmm8, %xmm1
    000000dc: 	psrad	%xmm3, %xmm0
    000000e0: 	psrad	%xmm3, %xmm1
    000000e4: 	psrad	%xmm3, %xmm0
    000000e8: 	psrad	%xmm3, %xmm1
    000000ec: 	psrad	%xmm3, %xmm0
    000000f0: 	psrad	%xmm3, %xmm1
    000000f4: 	psrad	%xmm3, %xmm0
    000000f8: 	psrad	%xmm3, %xmm1
    000000fc: 	psrad	%xmm3, %xmm0
    00000100: 	psrad	%xmm3, %xmm1
    00000104: 	movdqa	%xmm0, %xmm8
    00000109: 	punpcklwd	%xmm1, %xmm0
    0000010d: 	punpckhwd	%xmm1, %xmm8
    00000112: 	movdqa	%xmm0, %xmm1
    00000116: 	punpckhwd	%xmm8, %xmm1
    0000011b: 	punpcklwd	%xmm8, %xmm0
    00000120: 	movdqa	%xmm5, %xmm8
    00000125: 	pcmpgtw	%xmm2, %xmm8
    0000012a: 	punpcklwd	%xmm1, %xmm0
    0000012e: 	movdqa	%xmm2, %xmm1
    00000132: 	pand	%xmm6, %xmm0
    00000136: 	punpcklwd	%xmm8, %xmm1
    0000013b: 	punpckhwd	%xmm8, %xmm2
    00000140: 	psrad	%xmm3, %xmm1
    00000144: 	psrad	%xmm3, %xmm2
    00000148: 	psrad	%xmm3, %xmm1
    0000014c: 	psrad	%xmm3, %xmm2
    00000150: 	psrad	%xmm3, %xmm1
    00000154: 	psrad	%xmm3, %xmm2
    00000158: 	psrad	%xmm3, %xmm1
    0000015c: 	psrad	%xmm3, %xmm2
    00000160: 	psrad	%xmm3, %xmm1
    00000164: 	psrad	%xmm3, %xmm2
    00000168: 	movdqa	%xmm1, %xmm8
    0000016d: 	punpcklwd	%xmm2, %xmm1
    00000171: 	punpckhwd	%xmm2, %xmm8
    00000176: 	movdqa	%xmm1, %xmm2
    0000017a: 	punpckhwd	%xmm8, %xmm2
    0000017f: 	punpcklwd	%xmm8, %xmm1
    00000184: 	punpcklwd	%xmm2, %xmm1
    00000188: 	pand	%xmm6, %xmm1
    0000018c: 	packuswb	%xmm1, %xmm0
    00000190: 	paddb	%xmm0, %xmm4
    00000194: 	cmpq	%r15, %rax
    00000197: 	jne	.Ltmp534 # Offset: 407
    0000019d: 	movdqa	%xmm4, %xmm0
    000001a1: 	psrldq	$0x8, %xmm0
    000001a6: 	paddb	%xmm0, %xmm4
    000001aa: 	psadbw	%xmm7, %xmm4
    000001ae: 	movd	%xmm4, %eax
    000001b2: 	cmpl	%ebx, %ebp
    000001b4: 	je	.Ltmp532 # Offset: 436
    000001ba: 	movl	%ebp, %r10d
.Ltmp537:
    000001bd: 	movslq	%r10d, %rdi
    000001c0: 	movsbl	(%r14,%rdi), %edi
    000001c5: 	sarl	%cl, %edi
    000001c7: 	sarl	%cl, %edi
    000001c9: 	sarl	%cl, %edi
    000001cb: 	sarl	%cl, %edi
    000001cd: 	sarl	%cl, %edi
    000001cf: 	addl	%edi, %eax
    000001d1: 	leal	0x1(%r10), %edi
    000001d5: 	cmpl	%edi, %ebx
    000001d7: 	jle	.Ltmp532 # Offset: 471
    000001dd: 	movslq	%edi, %rdi
    000001e0: 	movsbl	(%r14,%rdi), %edi
    000001e5: 	sarl	%cl, %edi
    000001e7: 	sarl	%cl, %edi
    000001e9: 	sarl	%cl, %edi
    000001eb: 	sarl	%cl, %edi
    000001ed: 	sarl	%cl, %edi
    000001ef: 	addl	%edi, %eax
    000001f1: 	leal	0x2(%r10), %edi
    000001f5: 	cmpl	%edi, %ebx
    000001f7: 	jle	.Ltmp532 # Offset: 503
    000001fd: 	movslq	%edi, %rdi
    00000200: 	movsbl	(%r14,%rdi), %edi
    00000205: 	sarl	%cl, %edi
    00000207: 	sarl	%cl, %edi
    00000209: 	sarl	%cl, %edi
    0000020b: 	sarl	%cl, %edi
    0000020d: 	sarl	%cl, %edi
    0000020f: 	addl	%edi, %eax
    00000211: 	leal	0x3(%r10), %edi
    00000215: 	cmpl	%edi, %ebx
    00000217: 	jle	.Ltmp532 # Offset: 535
    0000021d: 	movslq	%edi, %rdi
    00000220: 	movsbl	(%r14,%rdi), %edi
    00000225: 	sarl	%cl, %edi
    00000227: 	sarl	%cl, %edi
    00000229: 	sarl	%cl, %edi
    0000022b: 	sarl	%cl, %edi
    0000022d: 	sarl	%cl, %edi
    0000022f: 	addl	%edi, %eax
    00000231: 	leal	0x4(%r10), %edi
    00000235: 	cmpl	%edi, %ebx
    00000237: 	jle	.Ltmp532 # Offset: 567
    0000023d: 	movslq	%edi, %rdi
    00000240: 	movsbl	(%r14,%rdi), %edi
    00000245: 	sarl	%cl, %edi
    00000247: 	sarl	%cl, %edi
    00000249: 	sarl	%cl, %edi
    0000024b: 	sarl	%cl, %edi
    0000024d: 	sarl	%cl, %edi
    0000024f: 	addl	%edi, %eax
    00000251: 	leal	0x5(%r10), %edi
    00000255: 	cmpl	%edi, %ebx
    00000257: 	jle	.Ltmp532 # Offset: 599
    0000025d: 	movslq	%edi, %rdi
    00000260: 	movsbl	(%r14,%rdi), %edi
    00000265: 	sarl	%cl, %edi
    00000267: 	sarl	%cl, %edi
    00000269: 	sarl	%cl, %edi
    0000026b: 	sarl	%cl, %edi
    0000026d: 	sarl	%cl, %edi
    0000026f: 	addl	%edi, %eax
    00000271: 	leal	0x6(%r10), %edi
    00000275: 	cmpl	%edi, %ebx
    00000277: 	jle	.Ltmp532 # Offset: 631
    0000027d: 	movslq	%edi, %rdi
    00000280: 	movsbl	(%r14,%rdi), %edi
    00000285: 	sarl	%cl, %edi
    00000287: 	sarl	%cl, %edi
    00000289: 	sarl	%cl, %edi
    0000028b: 	sarl	%cl, %edi
    0000028d: 	sarl	%cl, %edi
    0000028f: 	addl	%edi, %eax
    00000291: 	leal	0x7(%r10), %edi
    00000295: 	cmpl	%edi, %ebx
    00000297: 	jle	.Ltmp532 # Offset: 663
    0000029d: 	movslq	%edi, %rdi
    000002a0: 	movsbl	(%r14,%rdi), %edi
    000002a5: 	sarl	%cl, %edi
    000002a7: 	sarl	%cl, %edi
    000002a9: 	sarl	%cl, %edi
    000002ab: 	sarl	%cl, %edi
    000002ad: 	sarl	%cl, %edi
    000002af: 	addl	%edi, %eax
    000002b1: 	leal	0x8(%r10), %edi
    000002b5: 	cmpl	%edi, %ebx
    000002b7: 	jle	.Ltmp532 # Offset: 695
    000002bd: 	movslq	%edi, %rdi
    000002c0: 	movsbl	(%r14,%rdi), %edi
    000002c5: 	sarl	%cl, %edi
    000002c7: 	sarl	%cl, %edi
    000002c9: 	sarl	%cl, %edi
    000002cb: 	sarl	%cl, %edi
    000002cd: 	sarl	%cl, %edi
    000002cf: 	addl	%edi, %eax
    000002d1: 	leal	0x9(%r10), %edi
    000002d5: 	cmpl	%edi, %ebx
    000002d7: 	jle	.Ltmp532 # Offset: 727
    000002dd: 	movslq	%edi, %rdi
    000002e0: 	leal	0xa(%r10), %r11d
    000002e4: 	movsbl	(%r14,%rdi), %edi
    000002e9: 	sarl	%cl, %edi
    000002eb: 	sarl	%cl, %edi
    000002ed: 	sarl	%cl, %edi
    000002ef: 	sarl	%cl, %edi
    000002f1: 	sarl	%cl, %edi
    000002f3: 	addl	%eax, %edi
    000002f5: 	movl	%edi, %eax
    000002f7: 	cmpl	%r11d, %ebx
    000002fa: 	jle	.Ltmp532 # Offset: 762
    00000300: 	movslq	%r11d, %r11
    00000303: 	movsbl	(%r14,%r11), %eax
    00000308: 	sarl	%cl, %eax
    0000030a: 	sarl	%cl, %eax
    0000030c: 	sarl	%cl, %eax
    0000030e: 	sarl	%cl, %eax
    00000310: 	sarl	%cl, %eax
    00000312: 	addl	%edi, %eax
    00000314: 	leal	0xb(%r10), %edi
    00000318: 	cmpl	%edi, %ebx
    0000031a: 	jle	.Ltmp532 # Offset: 794
    0000031c: 	movslq	%edi, %rdi
    0000031f: 	movsbl	(%r14,%rdi), %edi
    00000324: 	sarl	%cl, %edi
    00000326: 	sarl	%cl, %edi
    00000328: 	sarl	%cl, %edi
    0000032a: 	sarl	%cl, %edi
    0000032c: 	sarl	%cl, %edi
    0000032e: 	addl	%edi, %eax
    00000330: 	leal	0xc(%r10), %edi
    00000334: 	cmpl	%edi, %ebx
    00000336: 	jle	.Ltmp532 # Offset: 822
    00000338: 	movslq	%edi, %rdi
    0000033b: 	movsbl	(%r14,%rdi), %edi
    00000340: 	sarl	%cl, %edi
    00000342: 	sarl	%cl, %edi
    00000344: 	sarl	%cl, %edi
    00000346: 	sarl	%cl, %edi
    00000348: 	sarl	%cl, %edi
    0000034a: 	addl	%edi, %eax
    0000034c: 	leal	0xd(%r10), %edi
    00000350: 	cmpl	%edi, %ebx
    00000352: 	jle	.Ltmp532 # Offset: 850
    00000354: 	movslq	%edi, %rdi
    00000357: 	addl	$0xe, %r10d
    0000035b: 	movsbl	(%r14,%rdi), %edi
    00000360: 	sarl	%cl, %edi
    00000362: 	sarl	%cl, %edi
    00000364: 	sarl	%cl, %edi
    00000366: 	sarl	%cl, %edi
    00000368: 	sarl	%cl, %edi
    0000036a: 	addl	%edi, %eax
    0000036c: 	cmpl	%r10d, %ebx
    0000036f: 	jle	.Ltmp532 # Offset: 879
    00000371: 	movslq	%r10d, %r10
    00000374: 	movsbl	(%r14,%r10), %edi
    00000379: 	sarl	%cl, %edi
    0000037b: 	sarl	%cl, %edi
    0000037d: 	sarl	%cl, %edi
    0000037f: 	sarl	%cl, %edi
    00000381: 	sarl	%cl, %edi
    00000383: 	addl	%edi, %eax
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp532:
    00000388: 	movsbl	%sil, %edi
    0000038c: 	sarl	%cl, %edi
    0000038e: 	sarl	%cl, %edi
    00000390: 	sarl	%cl, %edi
    00000392: 	sarl	%cl, %edi
    00000394: 	sarl	%cl, %edi
    00000396: 	shll	$0x6, %edi
    00000399: 	cmpb	%al, %dil
    0000039c: 	je	.Ltmp535 # Offset: 924
    0000039e: 	movl	current_test(%rip), %edx
    000003a4: 	movq	%r12, %rsi
    000003a7: 	movl	$0x1, %edi
    000003ac: 	xorl	%eax, %eax
    000003ae: 	movl	%ecx, 0x4(%rsp)
    000003b2: 	addl	$0x1, %r13d
    000003b6: 	callq	__printf_chk@PLT # Offset: 950
    000003bb: 	movl	iterations(%rip), %edx
    000003c1: 	cmpl	%edx, %r13d
    000003c4: 	jge	.Ltmp531 # Offset: 964
    000003c6: 	movq	init_value(%rip), %rsi
    000003cd: 	movl	0x4(%rsp), %ecx
    000003d1: 	movdqa	DATAat0x10fa0(%rip), %xmm6
    000003d9: 	jmp	.Ltmp536 # Offset: 985
    000003de: 	nop # Size: 2
.Ltmp535:
    000003e0: 	addl	$0x1, %r13d
    000003e4: 	cmpl	%edx, %r13d
    000003e7: 	jl	.Ltmp536 # Offset: 999
.Ltmp531:
    000003ed: 	callq	clock@PLT # Offset: 1005
    000003f2: 	pxor	%xmm0, %xmm0
    000003f6: 	movq	0x8(%rsp), %rdi
    000003fb: 	movq	%rax, end_time(%rip)
    00000402: 	subq	start_time(%rip), %rax
    00000409: 	cvtsi2sd	%rax, %xmm0
    0000040e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000416: 	addq	$0x18, %rsp
    0000041a: 	popq	%rbx
    0000041b: 	popq	%rbp
    0000041c: 	popq	%r12
    0000041e: 	popq	%r13
    00000420: 	popq	%r14
    00000422: 	popq	%r15
    00000424: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1060
.Ltmp533:
    00000429: 	xorl	%r10d, %r10d
    0000042c: 	xorl	%eax, %eax
    0000042e: 	jmp	.Ltmp537 # Offset: 1070
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ia29shift_right_repeated_variableIaEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ia28shift_left_repeated_variableIaEEvPT_iS2_PKc" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0xa6d0
  Size        : 0x433
  MaxSize     : 0x440
  Offset      : 0xa6d0
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ia28shift_left_repeated_variableIaEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %edx
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%edx, %edx
    00000032: 	jle	.Ltmp538 # Offset: 50
    00000038: 	leal	-0x1(%rbx), %eax
    0000003b: 	movsbl	%bpl, %ecx
    0000003f: 	movl	%ebx, %ebp
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, (%rsp)
    00000047: 	movl	%ebx, %eax
    00000049: 	movq	init_value(%rip), %rsi
    00000050: 	andl	$-0x10, %ebp
    00000053: 	shrl	$0x4, %eax
    00000056: 	movdqa	DATAat0x10fa0(%rip), %xmm6
    0000005e: 	leaq	DATAat0x10f44(%rip), %r12
    00000065: 	subl	$0x1, %eax
    00000068: 	shlq	$0x4, %rax
    0000006c: 	leaq	0x10(%r14,%rax), %r15
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp543:
    00000078: 	xorl	%eax, %eax
    0000007a: 	testl	%ebx, %ebx
    0000007c: 	jle	.Ltmp539 # Offset: 124
    00000082: 	cmpl	$0xe, (%rsp)
    00000086: 	jbe	.Ltmp540 # Offset: 134
    0000008c: 	pxor	%xmm4, %xmm4
    00000090: 	movslq	%ecx, %rdi
    00000093: 	pxor	%xmm5, %xmm5
    00000097: 	movq	%r14, %rax
    0000009a: 	movq	%rdi, %xmm3
    0000009f: 	movdqa	%xmm4, %xmm7
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp541:
    000000a8: 	movdqu	(%rax), %xmm2
    000000ac: 	movdqa	%xmm7, %xmm0
    000000b0: 	movdqa	%xmm5, %xmm8
    000000b5: 	addq	$0x10, %rax
    000000b9: 	pcmpgtb	%xmm2, %xmm0
    000000bd: 	movdqa	%xmm2, %xmm1
    000000c1: 	punpcklbw	%xmm0, %xmm1
    000000c5: 	punpckhbw	%xmm0, %xmm2
    000000c9: 	pcmpgtw	%xmm1, %xmm8
    000000ce: 	movdqa	%xmm1, %xmm0
    000000d2: 	punpcklwd	%xmm8, %xmm0
    000000d7: 	punpckhwd	%xmm8, %xmm1
    000000dc: 	pslld	%xmm3, %xmm0
    000000e0: 	pslld	%xmm3, %xmm1
    000000e4: 	pslld	%xmm3, %xmm0
    000000e8: 	pslld	%xmm3, %xmm1
    000000ec: 	pslld	%xmm3, %xmm0
    000000f0: 	pslld	%xmm3, %xmm1
    000000f4: 	pslld	%xmm3, %xmm0
    000000f8: 	pslld	%xmm3, %xmm1
    000000fc: 	pslld	%xmm3, %xmm0
    00000100: 	pslld	%xmm3, %xmm1
    00000104: 	movdqa	%xmm0, %xmm8
    00000109: 	punpcklwd	%xmm1, %xmm0
    0000010d: 	punpckhwd	%xmm1, %xmm8
    00000112: 	movdqa	%xmm0, %xmm1
    00000116: 	punpckhwd	%xmm8, %xmm1
    0000011b: 	punpcklwd	%xmm8, %xmm0
    00000120: 	movdqa	%xmm5, %xmm8
    00000125: 	pcmpgtw	%xmm2, %xmm8
    0000012a: 	punpcklwd	%xmm1, %xmm0
    0000012e: 	movdqa	%xmm2, %xmm1
    00000132: 	pand	%xmm6, %xmm0
    00000136: 	punpcklwd	%xmm8, %xmm1
    0000013b: 	punpckhwd	%xmm8, %xmm2
    00000140: 	pslld	%xmm3, %xmm1
    00000144: 	pslld	%xmm3, %xmm2
    00000148: 	pslld	%xmm3, %xmm1
    0000014c: 	pslld	%xmm3, %xmm2
    00000150: 	pslld	%xmm3, %xmm1
    00000154: 	pslld	%xmm3, %xmm2
    00000158: 	pslld	%xmm3, %xmm1
    0000015c: 	pslld	%xmm3, %xmm2
    00000160: 	pslld	%xmm3, %xmm1
    00000164: 	pslld	%xmm3, %xmm2
    00000168: 	movdqa	%xmm1, %xmm8
    0000016d: 	punpcklwd	%xmm2, %xmm1
    00000171: 	punpckhwd	%xmm2, %xmm8
    00000176: 	movdqa	%xmm1, %xmm2
    0000017a: 	punpckhwd	%xmm8, %xmm2
    0000017f: 	punpcklwd	%xmm8, %xmm1
    00000184: 	punpcklwd	%xmm2, %xmm1
    00000188: 	pand	%xmm6, %xmm1
    0000018c: 	packuswb	%xmm1, %xmm0
    00000190: 	paddb	%xmm0, %xmm4
    00000194: 	cmpq	%r15, %rax
    00000197: 	jne	.Ltmp541 # Offset: 407
    0000019d: 	movdqa	%xmm4, %xmm0
    000001a1: 	psrldq	$0x8, %xmm0
    000001a6: 	paddb	%xmm0, %xmm4
    000001aa: 	psadbw	%xmm7, %xmm4
    000001ae: 	movd	%xmm4, %eax
    000001b2: 	cmpl	%ebx, %ebp
    000001b4: 	je	.Ltmp539 # Offset: 436
    000001ba: 	movl	%ebp, %r10d
.Ltmp544:
    000001bd: 	movslq	%r10d, %rdi
    000001c0: 	movsbl	(%r14,%rdi), %edi
    000001c5: 	shll	%cl, %edi
    000001c7: 	shll	%cl, %edi
    000001c9: 	shll	%cl, %edi
    000001cb: 	shll	%cl, %edi
    000001cd: 	shll	%cl, %edi
    000001cf: 	addl	%edi, %eax
    000001d1: 	leal	0x1(%r10), %edi
    000001d5: 	cmpl	%edi, %ebx
    000001d7: 	jle	.Ltmp539 # Offset: 471
    000001dd: 	movslq	%edi, %rdi
    000001e0: 	movsbl	(%r14,%rdi), %edi
    000001e5: 	shll	%cl, %edi
    000001e7: 	shll	%cl, %edi
    000001e9: 	shll	%cl, %edi
    000001eb: 	shll	%cl, %edi
    000001ed: 	shll	%cl, %edi
    000001ef: 	addl	%edi, %eax
    000001f1: 	leal	0x2(%r10), %edi
    000001f5: 	cmpl	%edi, %ebx
    000001f7: 	jle	.Ltmp539 # Offset: 503
    000001fd: 	movslq	%edi, %rdi
    00000200: 	movsbl	(%r14,%rdi), %edi
    00000205: 	shll	%cl, %edi
    00000207: 	shll	%cl, %edi
    00000209: 	shll	%cl, %edi
    0000020b: 	shll	%cl, %edi
    0000020d: 	shll	%cl, %edi
    0000020f: 	addl	%edi, %eax
    00000211: 	leal	0x3(%r10), %edi
    00000215: 	cmpl	%edi, %ebx
    00000217: 	jle	.Ltmp539 # Offset: 535
    0000021d: 	movslq	%edi, %rdi
    00000220: 	movsbl	(%r14,%rdi), %edi
    00000225: 	shll	%cl, %edi
    00000227: 	shll	%cl, %edi
    00000229: 	shll	%cl, %edi
    0000022b: 	shll	%cl, %edi
    0000022d: 	shll	%cl, %edi
    0000022f: 	addl	%edi, %eax
    00000231: 	leal	0x4(%r10), %edi
    00000235: 	cmpl	%edi, %ebx
    00000237: 	jle	.Ltmp539 # Offset: 567
    0000023d: 	movslq	%edi, %rdi
    00000240: 	movsbl	(%r14,%rdi), %edi
    00000245: 	shll	%cl, %edi
    00000247: 	shll	%cl, %edi
    00000249: 	shll	%cl, %edi
    0000024b: 	shll	%cl, %edi
    0000024d: 	shll	%cl, %edi
    0000024f: 	addl	%edi, %eax
    00000251: 	leal	0x5(%r10), %edi
    00000255: 	cmpl	%edi, %ebx
    00000257: 	jle	.Ltmp539 # Offset: 599
    0000025d: 	movslq	%edi, %rdi
    00000260: 	movsbl	(%r14,%rdi), %edi
    00000265: 	shll	%cl, %edi
    00000267: 	shll	%cl, %edi
    00000269: 	shll	%cl, %edi
    0000026b: 	shll	%cl, %edi
    0000026d: 	shll	%cl, %edi
    0000026f: 	addl	%edi, %eax
    00000271: 	leal	0x6(%r10), %edi
    00000275: 	cmpl	%edi, %ebx
    00000277: 	jle	.Ltmp539 # Offset: 631
    0000027d: 	movslq	%edi, %rdi
    00000280: 	movsbl	(%r14,%rdi), %edi
    00000285: 	shll	%cl, %edi
    00000287: 	shll	%cl, %edi
    00000289: 	shll	%cl, %edi
    0000028b: 	shll	%cl, %edi
    0000028d: 	shll	%cl, %edi
    0000028f: 	addl	%edi, %eax
    00000291: 	leal	0x7(%r10), %edi
    00000295: 	cmpl	%edi, %ebx
    00000297: 	jle	.Ltmp539 # Offset: 663
    0000029d: 	movslq	%edi, %rdi
    000002a0: 	movsbl	(%r14,%rdi), %edi
    000002a5: 	shll	%cl, %edi
    000002a7: 	shll	%cl, %edi
    000002a9: 	shll	%cl, %edi
    000002ab: 	shll	%cl, %edi
    000002ad: 	shll	%cl, %edi
    000002af: 	addl	%edi, %eax
    000002b1: 	leal	0x8(%r10), %edi
    000002b5: 	cmpl	%edi, %ebx
    000002b7: 	jle	.Ltmp539 # Offset: 695
    000002bd: 	movslq	%edi, %rdi
    000002c0: 	movsbl	(%r14,%rdi), %edi
    000002c5: 	shll	%cl, %edi
    000002c7: 	shll	%cl, %edi
    000002c9: 	shll	%cl, %edi
    000002cb: 	shll	%cl, %edi
    000002cd: 	shll	%cl, %edi
    000002cf: 	addl	%edi, %eax
    000002d1: 	leal	0x9(%r10), %edi
    000002d5: 	cmpl	%edi, %ebx
    000002d7: 	jle	.Ltmp539 # Offset: 727
    000002dd: 	movslq	%edi, %rdi
    000002e0: 	leal	0xa(%r10), %r11d
    000002e4: 	movsbl	(%r14,%rdi), %edi
    000002e9: 	shll	%cl, %edi
    000002eb: 	shll	%cl, %edi
    000002ed: 	shll	%cl, %edi
    000002ef: 	shll	%cl, %edi
    000002f1: 	shll	%cl, %edi
    000002f3: 	addl	%eax, %edi
    000002f5: 	movl	%edi, %eax
    000002f7: 	cmpl	%r11d, %ebx
    000002fa: 	jle	.Ltmp539 # Offset: 762
    00000300: 	movslq	%r11d, %r11
    00000303: 	movsbl	(%r14,%r11), %eax
    00000308: 	shll	%cl, %eax
    0000030a: 	shll	%cl, %eax
    0000030c: 	shll	%cl, %eax
    0000030e: 	shll	%cl, %eax
    00000310: 	shll	%cl, %eax
    00000312: 	addl	%edi, %eax
    00000314: 	leal	0xb(%r10), %edi
    00000318: 	cmpl	%edi, %ebx
    0000031a: 	jle	.Ltmp539 # Offset: 794
    0000031c: 	movslq	%edi, %rdi
    0000031f: 	movsbl	(%r14,%rdi), %edi
    00000324: 	shll	%cl, %edi
    00000326: 	shll	%cl, %edi
    00000328: 	shll	%cl, %edi
    0000032a: 	shll	%cl, %edi
    0000032c: 	shll	%cl, %edi
    0000032e: 	addl	%edi, %eax
    00000330: 	leal	0xc(%r10), %edi
    00000334: 	cmpl	%edi, %ebx
    00000336: 	jle	.Ltmp539 # Offset: 822
    00000338: 	movslq	%edi, %rdi
    0000033b: 	movsbl	(%r14,%rdi), %edi
    00000340: 	shll	%cl, %edi
    00000342: 	shll	%cl, %edi
    00000344: 	shll	%cl, %edi
    00000346: 	shll	%cl, %edi
    00000348: 	shll	%cl, %edi
    0000034a: 	addl	%edi, %eax
    0000034c: 	leal	0xd(%r10), %edi
    00000350: 	cmpl	%edi, %ebx
    00000352: 	jle	.Ltmp539 # Offset: 850
    00000354: 	movslq	%edi, %rdi
    00000357: 	addl	$0xe, %r10d
    0000035b: 	movsbl	(%r14,%rdi), %edi
    00000360: 	shll	%cl, %edi
    00000362: 	shll	%cl, %edi
    00000364: 	shll	%cl, %edi
    00000366: 	shll	%cl, %edi
    00000368: 	shll	%cl, %edi
    0000036a: 	addl	%edi, %eax
    0000036c: 	cmpl	%r10d, %ebx
    0000036f: 	jle	.Ltmp539 # Offset: 879
    00000371: 	movslq	%r10d, %r10
    00000374: 	movsbl	(%r14,%r10), %edi
    00000379: 	shll	%cl, %edi
    0000037b: 	shll	%cl, %edi
    0000037d: 	shll	%cl, %edi
    0000037f: 	shll	%cl, %edi
    00000381: 	shll	%cl, %edi
    00000383: 	addl	%edi, %eax
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp539:
    00000388: 	movsbl	%sil, %edi
    0000038c: 	shll	%cl, %edi
    0000038e: 	shll	%cl, %edi
    00000390: 	shll	%cl, %edi
    00000392: 	shll	%cl, %edi
    00000394: 	shll	%cl, %edi
    00000396: 	shll	$0x6, %edi
    00000399: 	cmpb	%al, %dil
    0000039c: 	je	.Ltmp542 # Offset: 924
    0000039e: 	movl	current_test(%rip), %edx
    000003a4: 	movq	%r12, %rsi
    000003a7: 	movl	$0x1, %edi
    000003ac: 	xorl	%eax, %eax
    000003ae: 	movl	%ecx, 0x4(%rsp)
    000003b2: 	addl	$0x1, %r13d
    000003b6: 	callq	__printf_chk@PLT # Offset: 950
    000003bb: 	movl	iterations(%rip), %edx
    000003c1: 	cmpl	%edx, %r13d
    000003c4: 	jge	.Ltmp538 # Offset: 964
    000003c6: 	movq	init_value(%rip), %rsi
    000003cd: 	movl	0x4(%rsp), %ecx
    000003d1: 	movdqa	DATAat0x10fa0(%rip), %xmm6
    000003d9: 	jmp	.Ltmp543 # Offset: 985
    000003de: 	nop # Size: 2
.Ltmp542:
    000003e0: 	addl	$0x1, %r13d
    000003e4: 	cmpl	%edx, %r13d
    000003e7: 	jl	.Ltmp543 # Offset: 999
.Ltmp538:
    000003ed: 	callq	clock@PLT # Offset: 1005
    000003f2: 	pxor	%xmm0, %xmm0
    000003f6: 	movq	0x8(%rsp), %rdi
    000003fb: 	movq	%rax, end_time(%rip)
    00000402: 	subq	start_time(%rip), %rax
    00000409: 	cvtsi2sd	%rax, %xmm0
    0000040e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000416: 	addq	$0x18, %rsp
    0000041a: 	popq	%rbx
    0000041b: 	popq	%rbp
    0000041c: 	popq	%r12
    0000041e: 	popq	%r13
    00000420: 	popq	%r14
    00000422: 	popq	%r15
    00000424: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1060
.Ltmp540:
    00000429: 	xorl	%r10d, %r10d
    0000042c: 	xorl	%eax, %eax
    0000042e: 	jmp	.Ltmp544 # Offset: 1070
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ia28shift_left_repeated_variableIaEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1It29shift_right_repeated_variableItEEvPT_iS2_PKc" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0xab10
  Size        : 0x292
  MaxSize     : 0x2a0
  Offset      : 0xab10
  Section     : .text
  Orc Section : .local.text._Z14test_variable1It29shift_right_repeated_variableItEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %r10d
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%r10d, %r10d
    00000034: 	jle	.Ltmp545 # Offset: 52
    0000003a: 	leal	-0x1(%rbx), %eax
    0000003d: 	movzwl	%bp, %ecx
    00000040: 	movq	init_value(%rip), %r11
    00000047: 	movl	%ebx, %ebp
    00000049: 	movl	%eax, (%rsp)
    0000004c: 	movl	%ebx, %eax
    0000004e: 	andl	$-0x8, %ebp
    00000051: 	xorl	%r13d, %r13d
    00000054: 	shrl	$0x3, %eax
    00000057: 	leaq	DATAat0x10f44(%rip), %r12
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r14,%rax), %r15
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp550:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%ebx, %ebx
    00000074: 	jle	.Ltmp546 # Offset: 116
    0000007a: 	cmpl	$0x6, (%rsp)
    0000007e: 	jbe	.Ltmp547 # Offset: 126
    00000084: 	pxor	%xmm2, %xmm2
    00000088: 	movslq	%ecx, %rdi
    0000008b: 	movq	%r14, %rax
    0000008e: 	movq	%rdi, %xmm4
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp548:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movdqa	%xmm1, %xmm0
    000000ac: 	punpckhwd	%xmm3, %xmm1
    000000b0: 	punpcklwd	%xmm3, %xmm0
    000000b4: 	psrad	%xmm4, %xmm1
    000000b8: 	psrad	%xmm4, %xmm0
    000000bc: 	psrad	%xmm4, %xmm1
    000000c0: 	psrad	%xmm4, %xmm0
    000000c4: 	psrad	%xmm4, %xmm1
    000000c8: 	psrad	%xmm4, %xmm0
    000000cc: 	psrad	%xmm4, %xmm1
    000000d0: 	psrad	%xmm4, %xmm0
    000000d4: 	psrad	%xmm4, %xmm1
    000000d8: 	psrad	%xmm4, %xmm0
    000000dc: 	movdqa	%xmm0, %xmm5
    000000e0: 	punpcklwd	%xmm1, %xmm0
    000000e4: 	punpckhwd	%xmm1, %xmm5
    000000e8: 	movdqa	%xmm0, %xmm1
    000000ec: 	punpckhwd	%xmm5, %xmm1
    000000f0: 	punpcklwd	%xmm5, %xmm0
    000000f4: 	punpcklwd	%xmm1, %xmm0
    000000f8: 	paddw	%xmm0, %xmm2
    000000fc: 	cmpq	%r15, %rax
    000000ff: 	jne	.Ltmp548 # Offset: 255
    00000101: 	movdqa	%xmm2, %xmm0
    00000105: 	psrldq	$0x8, %xmm0
    0000010a: 	paddw	%xmm0, %xmm2
    0000010e: 	movdqa	%xmm2, %xmm0
    00000112: 	psrldq	$0x4, %xmm0
    00000117: 	paddw	%xmm0, %xmm2
    0000011b: 	movdqa	%xmm2, %xmm0
    0000011f: 	psrldq	$0x2, %xmm0
    00000124: 	paddw	%xmm0, %xmm2
    00000128: 	pextrw	$0x0, %xmm2, %eax
    0000012d: 	cmpl	%ebx, %ebp
    0000012f: 	je	.Ltmp546 # Offset: 303
    00000135: 	movl	%ebp, %edx
.Ltmp551:
    00000137: 	movslq	%edx, %rsi
    0000013a: 	leaq	(%rsi,%rsi), %rdi
    0000013e: 	movzwl	(%r14,%rsi,2), %esi
    00000143: 	sarl	%cl, %esi
    00000145: 	sarl	%cl, %esi
    00000147: 	sarl	%cl, %esi
    00000149: 	sarl	%cl, %esi
    0000014b: 	sarl	%cl, %esi
    0000014d: 	addl	%esi, %eax
    0000014f: 	leal	0x1(%rdx), %esi
    00000152: 	cmpl	%esi, %ebx
    00000154: 	jle	.Ltmp546 # Offset: 340
    0000015a: 	movzwl	0x2(%r14,%rdi), %esi
    00000160: 	sarl	%cl, %esi
    00000162: 	sarl	%cl, %esi
    00000164: 	sarl	%cl, %esi
    00000166: 	sarl	%cl, %esi
    00000168: 	sarl	%cl, %esi
    0000016a: 	addl	%esi, %eax
    0000016c: 	leal	0x2(%rdx), %esi
    0000016f: 	cmpl	%ebx, %esi
    00000171: 	jge	.Ltmp546 # Offset: 369
    00000173: 	movzwl	0x4(%r14,%rdi), %esi
    00000179: 	sarl	%cl, %esi
    0000017b: 	sarl	%cl, %esi
    0000017d: 	sarl	%cl, %esi
    0000017f: 	sarl	%cl, %esi
    00000181: 	sarl	%cl, %esi
    00000183: 	addl	%esi, %eax
    00000185: 	leal	0x3(%rdx), %esi
    00000188: 	cmpl	%esi, %ebx
    0000018a: 	jle	.Ltmp546 # Offset: 394
    0000018c: 	movzwl	0x6(%r14,%rdi), %esi
    00000192: 	sarl	%cl, %esi
    00000194: 	sarl	%cl, %esi
    00000196: 	sarl	%cl, %esi
    00000198: 	sarl	%cl, %esi
    0000019a: 	sarl	%cl, %esi
    0000019c: 	addl	%esi, %eax
    0000019e: 	leal	0x4(%rdx), %esi
    000001a1: 	cmpl	%esi, %ebx
    000001a3: 	jle	.Ltmp546 # Offset: 419
    000001a5: 	movzwl	0x8(%r14,%rdi), %esi
    000001ab: 	sarl	%cl, %esi
    000001ad: 	sarl	%cl, %esi
    000001af: 	sarl	%cl, %esi
    000001b1: 	sarl	%cl, %esi
    000001b3: 	sarl	%cl, %esi
    000001b5: 	addl	%esi, %eax
    000001b7: 	leal	0x5(%rdx), %esi
    000001ba: 	cmpl	%esi, %ebx
    000001bc: 	jle	.Ltmp546 # Offset: 444
    000001be: 	movzwl	0xa(%r14,%rdi), %esi
    000001c4: 	addl	$0x6, %edx
    000001c7: 	sarl	%cl, %esi
    000001c9: 	sarl	%cl, %esi
    000001cb: 	sarl	%cl, %esi
    000001cd: 	sarl	%cl, %esi
    000001cf: 	sarl	%cl, %esi
    000001d1: 	addl	%esi, %eax
    000001d3: 	cmpl	%edx, %ebx
    000001d5: 	jle	.Ltmp546 # Offset: 469
    000001d7: 	movzwl	0xc(%r14,%rdi), %edx
    000001dd: 	sarl	%cl, %edx
    000001df: 	sarl	%cl, %edx
    000001e1: 	sarl	%cl, %edx
    000001e3: 	sarl	%cl, %edx
    000001e5: 	sarl	%cl, %edx
    000001e7: 	addl	%edx, %eax
.Ltmp546:
    000001e9: 	movzwl	%r11w, %edx
    000001ed: 	sarl	%cl, %edx
    000001ef: 	sarl	%cl, %edx
    000001f1: 	sarl	%cl, %edx
    000001f3: 	sarl	%cl, %edx
    000001f5: 	sarl	%cl, %edx
    000001f7: 	imulw	$0x1f40, %dx, %dx
    000001fc: 	cmpw	%ax, %dx
    000001ff: 	je	.Ltmp549 # Offset: 511
    00000201: 	movl	current_test(%rip), %edx
    00000207: 	movq	%r12, %rsi
    0000020a: 	movl	$0x1, %edi
    0000020f: 	xorl	%eax, %eax
    00000211: 	movl	%ecx, 0x4(%rsp)
    00000215: 	addl	$0x1, %r13d
    00000219: 	callq	__printf_chk@PLT # Offset: 537
    0000021e: 	movl	iterations(%rip), %r10d
    00000225: 	cmpl	%r10d, %r13d
    00000228: 	jge	.Ltmp545 # Offset: 552
    0000022a: 	movq	init_value(%rip), %r11
    00000231: 	movl	0x4(%rsp), %ecx
    00000235: 	jmp	.Ltmp550 # Offset: 565
    0000023a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp549:
    00000240: 	addl	$0x1, %r13d
    00000244: 	cmpl	%r10d, %r13d
    00000247: 	jl	.Ltmp550 # Offset: 583
.Ltmp545:
    0000024d: 	callq	clock@PLT # Offset: 589
    00000252: 	pxor	%xmm0, %xmm0
    00000256: 	movq	0x8(%rsp), %rdi
    0000025b: 	movq	%rax, end_time(%rip)
    00000262: 	subq	start_time(%rip), %rax
    00000269: 	cvtsi2sd	%rax, %xmm0
    0000026e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000276: 	addq	$0x18, %rsp
    0000027a: 	popq	%rbx
    0000027b: 	popq	%rbp
    0000027c: 	popq	%r12
    0000027e: 	popq	%r13
    00000280: 	popq	%r14
    00000282: 	popq	%r15
    00000284: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 644
.Ltmp547:
    00000289: 	xorl	%edx, %edx
    0000028b: 	xorl	%eax, %eax
    0000028d: 	jmp	.Ltmp551 # Offset: 653
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1It29shift_right_repeated_variableItEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1It28shift_left_repeated_variableItEEvPT_iS2_PKc" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0xadb0
  Size        : 0x292
  MaxSize     : 0x2a0
  Offset      : 0xadb0
  Section     : .text
  Orc Section : .local.text._Z14test_variable1It28shift_left_repeated_variableItEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %r10d
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%r10d, %r10d
    00000034: 	jle	.Ltmp552 # Offset: 52
    0000003a: 	leal	-0x1(%rbx), %eax
    0000003d: 	movzwl	%bp, %ecx
    00000040: 	movq	init_value(%rip), %r11
    00000047: 	movl	%ebx, %ebp
    00000049: 	movl	%eax, (%rsp)
    0000004c: 	movl	%ebx, %eax
    0000004e: 	andl	$-0x8, %ebp
    00000051: 	xorl	%r13d, %r13d
    00000054: 	shrl	$0x3, %eax
    00000057: 	leaq	DATAat0x10f44(%rip), %r12
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r14,%rax), %r15
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp557:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%ebx, %ebx
    00000074: 	jle	.Ltmp553 # Offset: 116
    0000007a: 	cmpl	$0x6, (%rsp)
    0000007e: 	jbe	.Ltmp554 # Offset: 126
    00000084: 	pxor	%xmm2, %xmm2
    00000088: 	movslq	%ecx, %rdi
    0000008b: 	movq	%r14, %rax
    0000008e: 	movq	%rdi, %xmm4
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp555:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movdqa	%xmm1, %xmm0
    000000ac: 	punpckhwd	%xmm3, %xmm1
    000000b0: 	punpcklwd	%xmm3, %xmm0
    000000b4: 	pslld	%xmm4, %xmm1
    000000b8: 	pslld	%xmm4, %xmm0
    000000bc: 	pslld	%xmm4, %xmm1
    000000c0: 	pslld	%xmm4, %xmm0
    000000c4: 	pslld	%xmm4, %xmm1
    000000c8: 	pslld	%xmm4, %xmm0
    000000cc: 	pslld	%xmm4, %xmm1
    000000d0: 	pslld	%xmm4, %xmm0
    000000d4: 	pslld	%xmm4, %xmm1
    000000d8: 	pslld	%xmm4, %xmm0
    000000dc: 	movdqa	%xmm0, %xmm5
    000000e0: 	punpcklwd	%xmm1, %xmm0
    000000e4: 	punpckhwd	%xmm1, %xmm5
    000000e8: 	movdqa	%xmm0, %xmm1
    000000ec: 	punpckhwd	%xmm5, %xmm1
    000000f0: 	punpcklwd	%xmm5, %xmm0
    000000f4: 	punpcklwd	%xmm1, %xmm0
    000000f8: 	paddw	%xmm0, %xmm2
    000000fc: 	cmpq	%r15, %rax
    000000ff: 	jne	.Ltmp555 # Offset: 255
    00000101: 	movdqa	%xmm2, %xmm0
    00000105: 	psrldq	$0x8, %xmm0
    0000010a: 	paddw	%xmm0, %xmm2
    0000010e: 	movdqa	%xmm2, %xmm0
    00000112: 	psrldq	$0x4, %xmm0
    00000117: 	paddw	%xmm0, %xmm2
    0000011b: 	movdqa	%xmm2, %xmm0
    0000011f: 	psrldq	$0x2, %xmm0
    00000124: 	paddw	%xmm0, %xmm2
    00000128: 	pextrw	$0x0, %xmm2, %eax
    0000012d: 	cmpl	%ebx, %ebp
    0000012f: 	je	.Ltmp553 # Offset: 303
    00000135: 	movl	%ebp, %edx
.Ltmp558:
    00000137: 	movslq	%edx, %rsi
    0000013a: 	leaq	(%rsi,%rsi), %rdi
    0000013e: 	movzwl	(%r14,%rsi,2), %esi
    00000143: 	shll	%cl, %esi
    00000145: 	shll	%cl, %esi
    00000147: 	shll	%cl, %esi
    00000149: 	shll	%cl, %esi
    0000014b: 	shll	%cl, %esi
    0000014d: 	addl	%esi, %eax
    0000014f: 	leal	0x1(%rdx), %esi
    00000152: 	cmpl	%esi, %ebx
    00000154: 	jle	.Ltmp553 # Offset: 340
    0000015a: 	movzwl	0x2(%r14,%rdi), %esi
    00000160: 	shll	%cl, %esi
    00000162: 	shll	%cl, %esi
    00000164: 	shll	%cl, %esi
    00000166: 	shll	%cl, %esi
    00000168: 	shll	%cl, %esi
    0000016a: 	addl	%esi, %eax
    0000016c: 	leal	0x2(%rdx), %esi
    0000016f: 	cmpl	%ebx, %esi
    00000171: 	jge	.Ltmp553 # Offset: 369
    00000173: 	movzwl	0x4(%r14,%rdi), %esi
    00000179: 	shll	%cl, %esi
    0000017b: 	shll	%cl, %esi
    0000017d: 	shll	%cl, %esi
    0000017f: 	shll	%cl, %esi
    00000181: 	shll	%cl, %esi
    00000183: 	addl	%esi, %eax
    00000185: 	leal	0x3(%rdx), %esi
    00000188: 	cmpl	%esi, %ebx
    0000018a: 	jle	.Ltmp553 # Offset: 394
    0000018c: 	movzwl	0x6(%r14,%rdi), %esi
    00000192: 	shll	%cl, %esi
    00000194: 	shll	%cl, %esi
    00000196: 	shll	%cl, %esi
    00000198: 	shll	%cl, %esi
    0000019a: 	shll	%cl, %esi
    0000019c: 	addl	%esi, %eax
    0000019e: 	leal	0x4(%rdx), %esi
    000001a1: 	cmpl	%esi, %ebx
    000001a3: 	jle	.Ltmp553 # Offset: 419
    000001a5: 	movzwl	0x8(%r14,%rdi), %esi
    000001ab: 	shll	%cl, %esi
    000001ad: 	shll	%cl, %esi
    000001af: 	shll	%cl, %esi
    000001b1: 	shll	%cl, %esi
    000001b3: 	shll	%cl, %esi
    000001b5: 	addl	%esi, %eax
    000001b7: 	leal	0x5(%rdx), %esi
    000001ba: 	cmpl	%esi, %ebx
    000001bc: 	jle	.Ltmp553 # Offset: 444
    000001be: 	movzwl	0xa(%r14,%rdi), %esi
    000001c4: 	addl	$0x6, %edx
    000001c7: 	shll	%cl, %esi
    000001c9: 	shll	%cl, %esi
    000001cb: 	shll	%cl, %esi
    000001cd: 	shll	%cl, %esi
    000001cf: 	shll	%cl, %esi
    000001d1: 	addl	%esi, %eax
    000001d3: 	cmpl	%edx, %ebx
    000001d5: 	jle	.Ltmp553 # Offset: 469
    000001d7: 	movzwl	0xc(%r14,%rdi), %edx
    000001dd: 	shll	%cl, %edx
    000001df: 	shll	%cl, %edx
    000001e1: 	shll	%cl, %edx
    000001e3: 	shll	%cl, %edx
    000001e5: 	shll	%cl, %edx
    000001e7: 	addl	%edx, %eax
.Ltmp553:
    000001e9: 	movzwl	%r11w, %edx
    000001ed: 	shll	%cl, %edx
    000001ef: 	shll	%cl, %edx
    000001f1: 	shll	%cl, %edx
    000001f3: 	shll	%cl, %edx
    000001f5: 	shll	%cl, %edx
    000001f7: 	imulw	$0x1f40, %dx, %dx
    000001fc: 	cmpw	%ax, %dx
    000001ff: 	je	.Ltmp556 # Offset: 511
    00000201: 	movl	current_test(%rip), %edx
    00000207: 	movq	%r12, %rsi
    0000020a: 	movl	$0x1, %edi
    0000020f: 	xorl	%eax, %eax
    00000211: 	movl	%ecx, 0x4(%rsp)
    00000215: 	addl	$0x1, %r13d
    00000219: 	callq	__printf_chk@PLT # Offset: 537
    0000021e: 	movl	iterations(%rip), %r10d
    00000225: 	cmpl	%r10d, %r13d
    00000228: 	jge	.Ltmp552 # Offset: 552
    0000022a: 	movq	init_value(%rip), %r11
    00000231: 	movl	0x4(%rsp), %ecx
    00000235: 	jmp	.Ltmp557 # Offset: 565
    0000023a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp556:
    00000240: 	addl	$0x1, %r13d
    00000244: 	cmpl	%r10d, %r13d
    00000247: 	jl	.Ltmp557 # Offset: 583
.Ltmp552:
    0000024d: 	callq	clock@PLT # Offset: 589
    00000252: 	pxor	%xmm0, %xmm0
    00000256: 	movq	0x8(%rsp), %rdi
    0000025b: 	movq	%rax, end_time(%rip)
    00000262: 	subq	start_time(%rip), %rax
    00000269: 	cvtsi2sd	%rax, %xmm0
    0000026e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000276: 	addq	$0x18, %rsp
    0000027a: 	popq	%rbx
    0000027b: 	popq	%rbp
    0000027c: 	popq	%r12
    0000027e: 	popq	%r13
    00000280: 	popq	%r14
    00000282: 	popq	%r15
    00000284: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 644
.Ltmp554:
    00000289: 	xorl	%edx, %edx
    0000028b: 	xorl	%eax, %eax
    0000028d: 	jmp	.Ltmp558 # Offset: 653
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1It28shift_left_repeated_variableItEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Is29shift_right_repeated_variableIsEEvPT_iS2_PKc" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0xb050
  Size        : 0x29a
  MaxSize     : 0x2a0
  Offset      : 0xb050
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Is29shift_right_repeated_variableIsEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %r10d
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%r10d, %r10d
    00000034: 	jle	.Ltmp559 # Offset: 52
    0000003a: 	leal	-0x1(%rbx), %eax
    0000003d: 	movswl	%bp, %ecx
    00000040: 	movq	init_value(%rip), %r11
    00000047: 	movl	%ebx, %ebp
    00000049: 	movl	%eax, (%rsp)
    0000004c: 	movl	%ebx, %eax
    0000004e: 	andl	$-0x8, %ebp
    00000051: 	xorl	%r13d, %r13d
    00000054: 	shrl	$0x3, %eax
    00000057: 	leaq	DATAat0x10f44(%rip), %r12
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r14,%rax), %r15
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp564:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%ebx, %ebx
    00000074: 	jle	.Ltmp560 # Offset: 116
    0000007a: 	cmpl	$0x6, (%rsp)
    0000007e: 	jbe	.Ltmp561 # Offset: 126
    00000084: 	pxor	%xmm2, %xmm2
    00000088: 	movslq	%ecx, %rdi
    0000008b: 	movq	%r14, %rax
    0000008e: 	movq	%rdi, %xmm4
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp562:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	movdqa	%xmm3, %xmm5
    000000a8: 	addq	$0x10, %rax
    000000ac: 	pcmpgtw	%xmm1, %xmm5
    000000b0: 	movdqa	%xmm1, %xmm0
    000000b4: 	punpcklwd	%xmm5, %xmm0
    000000b8: 	punpckhwd	%xmm5, %xmm1
    000000bc: 	psrad	%xmm4, %xmm0
    000000c0: 	psrad	%xmm4, %xmm1
    000000c4: 	psrad	%xmm4, %xmm0
    000000c8: 	psrad	%xmm4, %xmm1
    000000cc: 	psrad	%xmm4, %xmm0
    000000d0: 	psrad	%xmm4, %xmm1
    000000d4: 	psrad	%xmm4, %xmm0
    000000d8: 	psrad	%xmm4, %xmm1
    000000dc: 	psrad	%xmm4, %xmm0
    000000e0: 	psrad	%xmm4, %xmm1
    000000e4: 	movdqa	%xmm0, %xmm5
    000000e8: 	punpcklwd	%xmm1, %xmm0
    000000ec: 	punpckhwd	%xmm1, %xmm5
    000000f0: 	movdqa	%xmm0, %xmm1
    000000f4: 	punpckhwd	%xmm5, %xmm1
    000000f8: 	punpcklwd	%xmm5, %xmm0
    000000fc: 	punpcklwd	%xmm1, %xmm0
    00000100: 	paddw	%xmm0, %xmm2
    00000104: 	cmpq	%r15, %rax
    00000107: 	jne	.Ltmp562 # Offset: 263
    00000109: 	movdqa	%xmm2, %xmm0
    0000010d: 	psrldq	$0x8, %xmm0
    00000112: 	paddw	%xmm0, %xmm2
    00000116: 	movdqa	%xmm2, %xmm0
    0000011a: 	psrldq	$0x4, %xmm0
    0000011f: 	paddw	%xmm0, %xmm2
    00000123: 	movdqa	%xmm2, %xmm0
    00000127: 	psrldq	$0x2, %xmm0
    0000012c: 	paddw	%xmm0, %xmm2
    00000130: 	pextrw	$0x0, %xmm2, %eax
    00000135: 	cmpl	%ebx, %ebp
    00000137: 	je	.Ltmp560 # Offset: 311
    0000013d: 	movl	%ebp, %edx
.Ltmp565:
    0000013f: 	movslq	%edx, %rsi
    00000142: 	leaq	(%rsi,%rsi), %rdi
    00000146: 	movswl	(%r14,%rsi,2), %esi
    0000014b: 	sarl	%cl, %esi
    0000014d: 	sarl	%cl, %esi
    0000014f: 	sarl	%cl, %esi
    00000151: 	sarl	%cl, %esi
    00000153: 	sarl	%cl, %esi
    00000155: 	addl	%esi, %eax
    00000157: 	leal	0x1(%rdx), %esi
    0000015a: 	cmpl	%esi, %ebx
    0000015c: 	jle	.Ltmp560 # Offset: 348
    00000162: 	movswl	0x2(%r14,%rdi), %esi
    00000168: 	sarl	%cl, %esi
    0000016a: 	sarl	%cl, %esi
    0000016c: 	sarl	%cl, %esi
    0000016e: 	sarl	%cl, %esi
    00000170: 	sarl	%cl, %esi
    00000172: 	addl	%esi, %eax
    00000174: 	leal	0x2(%rdx), %esi
    00000177: 	cmpl	%ebx, %esi
    00000179: 	jge	.Ltmp560 # Offset: 377
    0000017b: 	movswl	0x4(%r14,%rdi), %esi
    00000181: 	sarl	%cl, %esi
    00000183: 	sarl	%cl, %esi
    00000185: 	sarl	%cl, %esi
    00000187: 	sarl	%cl, %esi
    00000189: 	sarl	%cl, %esi
    0000018b: 	addl	%esi, %eax
    0000018d: 	leal	0x3(%rdx), %esi
    00000190: 	cmpl	%esi, %ebx
    00000192: 	jle	.Ltmp560 # Offset: 402
    00000194: 	movswl	0x6(%r14,%rdi), %esi
    0000019a: 	sarl	%cl, %esi
    0000019c: 	sarl	%cl, %esi
    0000019e: 	sarl	%cl, %esi
    000001a0: 	sarl	%cl, %esi
    000001a2: 	sarl	%cl, %esi
    000001a4: 	addl	%esi, %eax
    000001a6: 	leal	0x4(%rdx), %esi
    000001a9: 	cmpl	%esi, %ebx
    000001ab: 	jle	.Ltmp560 # Offset: 427
    000001ad: 	movswl	0x8(%r14,%rdi), %esi
    000001b3: 	sarl	%cl, %esi
    000001b5: 	sarl	%cl, %esi
    000001b7: 	sarl	%cl, %esi
    000001b9: 	sarl	%cl, %esi
    000001bb: 	sarl	%cl, %esi
    000001bd: 	addl	%esi, %eax
    000001bf: 	leal	0x5(%rdx), %esi
    000001c2: 	cmpl	%esi, %ebx
    000001c4: 	jle	.Ltmp560 # Offset: 452
    000001c6: 	movswl	0xa(%r14,%rdi), %esi
    000001cc: 	addl	$0x6, %edx
    000001cf: 	sarl	%cl, %esi
    000001d1: 	sarl	%cl, %esi
    000001d3: 	sarl	%cl, %esi
    000001d5: 	sarl	%cl, %esi
    000001d7: 	sarl	%cl, %esi
    000001d9: 	addl	%esi, %eax
    000001db: 	cmpl	%edx, %ebx
    000001dd: 	jle	.Ltmp560 # Offset: 477
    000001df: 	movswl	0xc(%r14,%rdi), %edx
    000001e5: 	sarl	%cl, %edx
    000001e7: 	sarl	%cl, %edx
    000001e9: 	sarl	%cl, %edx
    000001eb: 	sarl	%cl, %edx
    000001ed: 	sarl	%cl, %edx
    000001ef: 	addl	%edx, %eax
.Ltmp560:
    000001f1: 	movswl	%r11w, %edx
    000001f5: 	sarl	%cl, %edx
    000001f7: 	sarl	%cl, %edx
    000001f9: 	sarl	%cl, %edx
    000001fb: 	sarl	%cl, %edx
    000001fd: 	sarl	%cl, %edx
    000001ff: 	imulw	$0x1f40, %dx, %dx
    00000204: 	cmpw	%ax, %dx
    00000207: 	je	.Ltmp563 # Offset: 519
    00000209: 	movl	current_test(%rip), %edx
    0000020f: 	movq	%r12, %rsi
    00000212: 	movl	$0x1, %edi
    00000217: 	xorl	%eax, %eax
    00000219: 	movl	%ecx, 0x4(%rsp)
    0000021d: 	addl	$0x1, %r13d
    00000221: 	callq	__printf_chk@PLT # Offset: 545
    00000226: 	movl	iterations(%rip), %r10d
    0000022d: 	cmpl	%r10d, %r13d
    00000230: 	jge	.Ltmp559 # Offset: 560
    00000232: 	movq	init_value(%rip), %r11
    00000239: 	movl	0x4(%rsp), %ecx
    0000023d: 	jmp	.Ltmp564 # Offset: 573
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp563:
    00000248: 	addl	$0x1, %r13d
    0000024c: 	cmpl	%r10d, %r13d
    0000024f: 	jl	.Ltmp564 # Offset: 591
.Ltmp559:
    00000255: 	callq	clock@PLT # Offset: 597
    0000025a: 	pxor	%xmm0, %xmm0
    0000025e: 	movq	0x8(%rsp), %rdi
    00000263: 	movq	%rax, end_time(%rip)
    0000026a: 	subq	start_time(%rip), %rax
    00000271: 	cvtsi2sd	%rax, %xmm0
    00000276: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000027e: 	addq	$0x18, %rsp
    00000282: 	popq	%rbx
    00000283: 	popq	%rbp
    00000284: 	popq	%r12
    00000286: 	popq	%r13
    00000288: 	popq	%r14
    0000028a: 	popq	%r15
    0000028c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 652
.Ltmp561:
    00000291: 	xorl	%edx, %edx
    00000293: 	xorl	%eax, %eax
    00000295: 	jmp	.Ltmp565 # Offset: 661
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Is29shift_right_repeated_variableIsEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Is28shift_left_repeated_variableIsEEvPT_iS2_PKc" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0xb2f0
  Size        : 0x29a
  MaxSize     : 0x2a0
  Offset      : 0xb2f0
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Is28shift_left_repeated_variableIsEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %r10d
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%r10d, %r10d
    00000034: 	jle	.Ltmp566 # Offset: 52
    0000003a: 	leal	-0x1(%rbx), %eax
    0000003d: 	movswl	%bp, %ecx
    00000040: 	movq	init_value(%rip), %r11
    00000047: 	movl	%ebx, %ebp
    00000049: 	movl	%eax, (%rsp)
    0000004c: 	movl	%ebx, %eax
    0000004e: 	andl	$-0x8, %ebp
    00000051: 	xorl	%r13d, %r13d
    00000054: 	shrl	$0x3, %eax
    00000057: 	leaq	DATAat0x10f44(%rip), %r12
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r14,%rax), %r15
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp571:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%ebx, %ebx
    00000074: 	jle	.Ltmp567 # Offset: 116
    0000007a: 	cmpl	$0x6, (%rsp)
    0000007e: 	jbe	.Ltmp568 # Offset: 126
    00000084: 	pxor	%xmm2, %xmm2
    00000088: 	movslq	%ecx, %rdi
    0000008b: 	movq	%r14, %rax
    0000008e: 	movq	%rdi, %xmm4
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp569:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	movdqa	%xmm3, %xmm5
    000000a8: 	addq	$0x10, %rax
    000000ac: 	pcmpgtw	%xmm1, %xmm5
    000000b0: 	movdqa	%xmm1, %xmm0
    000000b4: 	punpcklwd	%xmm5, %xmm0
    000000b8: 	punpckhwd	%xmm5, %xmm1
    000000bc: 	pslld	%xmm4, %xmm0
    000000c0: 	pslld	%xmm4, %xmm1
    000000c4: 	pslld	%xmm4, %xmm0
    000000c8: 	pslld	%xmm4, %xmm1
    000000cc: 	pslld	%xmm4, %xmm0
    000000d0: 	pslld	%xmm4, %xmm1
    000000d4: 	pslld	%xmm4, %xmm0
    000000d8: 	pslld	%xmm4, %xmm1
    000000dc: 	pslld	%xmm4, %xmm0
    000000e0: 	pslld	%xmm4, %xmm1
    000000e4: 	movdqa	%xmm0, %xmm5
    000000e8: 	punpcklwd	%xmm1, %xmm0
    000000ec: 	punpckhwd	%xmm1, %xmm5
    000000f0: 	movdqa	%xmm0, %xmm1
    000000f4: 	punpckhwd	%xmm5, %xmm1
    000000f8: 	punpcklwd	%xmm5, %xmm0
    000000fc: 	punpcklwd	%xmm1, %xmm0
    00000100: 	paddw	%xmm0, %xmm2
    00000104: 	cmpq	%r15, %rax
    00000107: 	jne	.Ltmp569 # Offset: 263
    00000109: 	movdqa	%xmm2, %xmm0
    0000010d: 	psrldq	$0x8, %xmm0
    00000112: 	paddw	%xmm0, %xmm2
    00000116: 	movdqa	%xmm2, %xmm0
    0000011a: 	psrldq	$0x4, %xmm0
    0000011f: 	paddw	%xmm0, %xmm2
    00000123: 	movdqa	%xmm2, %xmm0
    00000127: 	psrldq	$0x2, %xmm0
    0000012c: 	paddw	%xmm0, %xmm2
    00000130: 	pextrw	$0x0, %xmm2, %eax
    00000135: 	cmpl	%ebx, %ebp
    00000137: 	je	.Ltmp567 # Offset: 311
    0000013d: 	movl	%ebp, %edx
.Ltmp572:
    0000013f: 	movslq	%edx, %rsi
    00000142: 	leaq	(%rsi,%rsi), %rdi
    00000146: 	movswl	(%r14,%rsi,2), %esi
    0000014b: 	shll	%cl, %esi
    0000014d: 	shll	%cl, %esi
    0000014f: 	shll	%cl, %esi
    00000151: 	shll	%cl, %esi
    00000153: 	shll	%cl, %esi
    00000155: 	addl	%esi, %eax
    00000157: 	leal	0x1(%rdx), %esi
    0000015a: 	cmpl	%esi, %ebx
    0000015c: 	jle	.Ltmp567 # Offset: 348
    00000162: 	movswl	0x2(%r14,%rdi), %esi
    00000168: 	shll	%cl, %esi
    0000016a: 	shll	%cl, %esi
    0000016c: 	shll	%cl, %esi
    0000016e: 	shll	%cl, %esi
    00000170: 	shll	%cl, %esi
    00000172: 	addl	%esi, %eax
    00000174: 	leal	0x2(%rdx), %esi
    00000177: 	cmpl	%ebx, %esi
    00000179: 	jge	.Ltmp567 # Offset: 377
    0000017b: 	movswl	0x4(%r14,%rdi), %esi
    00000181: 	shll	%cl, %esi
    00000183: 	shll	%cl, %esi
    00000185: 	shll	%cl, %esi
    00000187: 	shll	%cl, %esi
    00000189: 	shll	%cl, %esi
    0000018b: 	addl	%esi, %eax
    0000018d: 	leal	0x3(%rdx), %esi
    00000190: 	cmpl	%esi, %ebx
    00000192: 	jle	.Ltmp567 # Offset: 402
    00000194: 	movswl	0x6(%r14,%rdi), %esi
    0000019a: 	shll	%cl, %esi
    0000019c: 	shll	%cl, %esi
    0000019e: 	shll	%cl, %esi
    000001a0: 	shll	%cl, %esi
    000001a2: 	shll	%cl, %esi
    000001a4: 	addl	%esi, %eax
    000001a6: 	leal	0x4(%rdx), %esi
    000001a9: 	cmpl	%esi, %ebx
    000001ab: 	jle	.Ltmp567 # Offset: 427
    000001ad: 	movswl	0x8(%r14,%rdi), %esi
    000001b3: 	shll	%cl, %esi
    000001b5: 	shll	%cl, %esi
    000001b7: 	shll	%cl, %esi
    000001b9: 	shll	%cl, %esi
    000001bb: 	shll	%cl, %esi
    000001bd: 	addl	%esi, %eax
    000001bf: 	leal	0x5(%rdx), %esi
    000001c2: 	cmpl	%esi, %ebx
    000001c4: 	jle	.Ltmp567 # Offset: 452
    000001c6: 	movswl	0xa(%r14,%rdi), %esi
    000001cc: 	addl	$0x6, %edx
    000001cf: 	shll	%cl, %esi
    000001d1: 	shll	%cl, %esi
    000001d3: 	shll	%cl, %esi
    000001d5: 	shll	%cl, %esi
    000001d7: 	shll	%cl, %esi
    000001d9: 	addl	%esi, %eax
    000001db: 	cmpl	%edx, %ebx
    000001dd: 	jle	.Ltmp567 # Offset: 477
    000001df: 	movswl	0xc(%r14,%rdi), %edx
    000001e5: 	shll	%cl, %edx
    000001e7: 	shll	%cl, %edx
    000001e9: 	shll	%cl, %edx
    000001eb: 	shll	%cl, %edx
    000001ed: 	shll	%cl, %edx
    000001ef: 	addl	%edx, %eax
.Ltmp567:
    000001f1: 	movswl	%r11w, %edx
    000001f5: 	shll	%cl, %edx
    000001f7: 	shll	%cl, %edx
    000001f9: 	shll	%cl, %edx
    000001fb: 	shll	%cl, %edx
    000001fd: 	shll	%cl, %edx
    000001ff: 	imulw	$0x1f40, %dx, %dx
    00000204: 	cmpw	%ax, %dx
    00000207: 	je	.Ltmp570 # Offset: 519
    00000209: 	movl	current_test(%rip), %edx
    0000020f: 	movq	%r12, %rsi
    00000212: 	movl	$0x1, %edi
    00000217: 	xorl	%eax, %eax
    00000219: 	movl	%ecx, 0x4(%rsp)
    0000021d: 	addl	$0x1, %r13d
    00000221: 	callq	__printf_chk@PLT # Offset: 545
    00000226: 	movl	iterations(%rip), %r10d
    0000022d: 	cmpl	%r10d, %r13d
    00000230: 	jge	.Ltmp566 # Offset: 560
    00000232: 	movq	init_value(%rip), %r11
    00000239: 	movl	0x4(%rsp), %ecx
    0000023d: 	jmp	.Ltmp571 # Offset: 573
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp570:
    00000248: 	addl	$0x1, %r13d
    0000024c: 	cmpl	%r10d, %r13d
    0000024f: 	jl	.Ltmp571 # Offset: 591
.Ltmp566:
    00000255: 	callq	clock@PLT # Offset: 597
    0000025a: 	pxor	%xmm0, %xmm0
    0000025e: 	movq	0x8(%rsp), %rdi
    00000263: 	movq	%rax, end_time(%rip)
    0000026a: 	subq	start_time(%rip), %rax
    00000271: 	cvtsi2sd	%rax, %xmm0
    00000276: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000027e: 	addq	$0x18, %rsp
    00000282: 	popq	%rbx
    00000283: 	popq	%rbp
    00000284: 	popq	%r12
    00000286: 	popq	%r13
    00000288: 	popq	%r14
    0000028a: 	popq	%r15
    0000028c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 652
.Ltmp568:
    00000291: 	xorl	%edx, %edx
    00000293: 	xorl	%eax, %eax
    00000295: 	jmp	.Ltmp572 # Offset: 661
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Is28shift_left_repeated_variableIsEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ij29shift_right_repeated_variableIjEEvPT_iS2_PKc" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0xb590
  Size        : 0x1d2
  MaxSize     : 0x1e0
  Offset      : 0xb590
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ij29shift_right_repeated_variableIjEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x18, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r10d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r10d, %r10d
    00000035: 	jle	.Ltmp573 # Offset: 53
    0000003b: 	leal	-0x1(%r14), %eax
    0000003f: 	movl	%r14d, %r13d
    00000042: 	movq	init_value(%rip), %r11
    00000049: 	xorl	%r12d, %r12d
    0000004c: 	movl	%eax, 0x4(%rsp)
    00000050: 	movl	%r14d, %eax
    00000053: 	andl	$-0x4, %r13d
    00000057: 	shrl	$0x2, %eax
    0000005a: 	subl	$0x1, %eax
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	0x10(%r15,%rax), %rbp
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp578:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp574 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp575 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	movd	%ebx, %xmm1
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp576:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	addq	$0x10, %rax
    000000a0: 	psrld	%xmm1, %xmm0
    000000a4: 	psrld	%xmm1, %xmm0
    000000a8: 	psrld	%xmm1, %xmm0
    000000ac: 	psrld	%xmm1, %xmm0
    000000b0: 	psrld	%xmm1, %xmm0
    000000b4: 	paddd	%xmm0, %xmm2
    000000b8: 	cmpq	%rbp, %rax
    000000bb: 	jne	.Ltmp576 # Offset: 187
    000000bd: 	movdqa	%xmm2, %xmm0
    000000c1: 	movl	%r13d, %esi
    000000c4: 	psrldq	$0x8, %xmm0
    000000c9: 	paddd	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x4, %xmm0
    000000d6: 	paddd	%xmm0, %xmm2
    000000da: 	movd	%xmm2, %eax
    000000de: 	cmpl	%r14d, %r13d
    000000e1: 	je	.Ltmp574 # Offset: 225
.Ltmp579:
    000000e3: 	movslq	%esi, %rdx
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	leaq	(,%rdx,4), %rdi
    000000f0: 	movl	(%r15,%rdx,4), %edx
    000000f4: 	shrl	%cl, %edx
    000000f6: 	shrl	%cl, %edx
    000000f8: 	shrl	%cl, %edx
    000000fa: 	shrl	%cl, %edx
    000000fc: 	shrl	%cl, %edx
    000000fe: 	addl	%edx, %eax
    00000100: 	leal	0x1(%rsi), %edx
    00000103: 	cmpl	%edx, %r14d
    00000106: 	jle	.Ltmp574 # Offset: 262
    00000108: 	movl	0x4(%r15,%rdi), %edx
    0000010d: 	addl	$0x2, %esi
    00000110: 	shrl	%cl, %edx
    00000112: 	shrl	%cl, %edx
    00000114: 	shrl	%cl, %edx
    00000116: 	shrl	%cl, %edx
    00000118: 	shrl	%cl, %edx
    0000011a: 	addl	%edx, %eax
    0000011c: 	cmpl	%r14d, %esi
    0000011f: 	jge	.Ltmp574 # Offset: 287
    00000121: 	movl	0x8(%r15,%rdi), %edx
    00000126: 	shrl	%cl, %edx
    00000128: 	shrl	%cl, %edx
    0000012a: 	shrl	%cl, %edx
    0000012c: 	shrl	%cl, %edx
    0000012e: 	shrl	%cl, %edx
    00000130: 	addl	%edx, %eax
.Ltmp574:
    00000132: 	movl	%ebx, %ecx
    00000134: 	movl	%r11d, %edx
    00000137: 	shrl	%cl, %edx
    00000139: 	shrl	%cl, %edx
    0000013b: 	shrl	%cl, %edx
    0000013d: 	shrl	%cl, %edx
    0000013f: 	shrl	%cl, %edx
    00000141: 	imull	$0x1f40, %edx, %edx
    00000147: 	cmpl	%eax, %edx
    00000149: 	je	.Ltmp577 # Offset: 329
    0000014b: 	movl	current_test(%rip), %edx
    00000151: 	leaq	DATAat0x10f44(%rip), %rsi
    00000158: 	movl	$0x1, %edi
    0000015d: 	xorl	%eax, %eax
    0000015f: 	addl	$0x1, %r12d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	movl	iterations(%rip), %r10d
    0000016f: 	cmpl	%r10d, %r12d
    00000172: 	jge	.Ltmp573 # Offset: 370
    00000174: 	movq	init_value(%rip), %r11
    0000017b: 	jmp	.Ltmp578 # Offset: 379
.Ltmp577:
    00000180: 	addl	$0x1, %r12d
    00000184: 	cmpl	%r10d, %r12d
    00000187: 	jl	.Ltmp578 # Offset: 391
.Ltmp573:
    0000018d: 	callq	clock@PLT # Offset: 397
    00000192: 	pxor	%xmm0, %xmm0
    00000196: 	movq	0x8(%rsp), %rdi
    0000019b: 	movq	%rax, end_time(%rip)
    000001a2: 	subq	start_time(%rip), %rax
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001b6: 	addq	$0x18, %rsp
    000001ba: 	popq	%rbx
    000001bb: 	popq	%rbp
    000001bc: 	popq	%r12
    000001be: 	popq	%r13
    000001c0: 	popq	%r14
    000001c2: 	popq	%r15
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
.Ltmp575:
    000001c9: 	xorl	%esi, %esi
    000001cb: 	xorl	%eax, %eax
    000001cd: 	jmp	.Ltmp579 # Offset: 461
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ij29shift_right_repeated_variableIjEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ij28shift_left_repeated_variableIjEEvPT_iS2_PKc" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0xb770
  Size        : 0x1d2
  MaxSize     : 0x1e0
  Offset      : 0xb770
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ij28shift_left_repeated_variableIjEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x18, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r10d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r10d, %r10d
    00000035: 	jle	.Ltmp580 # Offset: 53
    0000003b: 	leal	-0x1(%r14), %eax
    0000003f: 	movl	%r14d, %r13d
    00000042: 	movq	init_value(%rip), %r11
    00000049: 	xorl	%r12d, %r12d
    0000004c: 	movl	%eax, 0x4(%rsp)
    00000050: 	movl	%r14d, %eax
    00000053: 	andl	$-0x4, %r13d
    00000057: 	shrl	$0x2, %eax
    0000005a: 	subl	$0x1, %eax
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	0x10(%r15,%rax), %rbp
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp585:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp581 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp582 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	movd	%ebx, %xmm1
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp583:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	addq	$0x10, %rax
    000000a0: 	pslld	%xmm1, %xmm0
    000000a4: 	pslld	%xmm1, %xmm0
    000000a8: 	pslld	%xmm1, %xmm0
    000000ac: 	pslld	%xmm1, %xmm0
    000000b0: 	pslld	%xmm1, %xmm0
    000000b4: 	paddd	%xmm0, %xmm2
    000000b8: 	cmpq	%rbp, %rax
    000000bb: 	jne	.Ltmp583 # Offset: 187
    000000bd: 	movdqa	%xmm2, %xmm0
    000000c1: 	movl	%r13d, %esi
    000000c4: 	psrldq	$0x8, %xmm0
    000000c9: 	paddd	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x4, %xmm0
    000000d6: 	paddd	%xmm0, %xmm2
    000000da: 	movd	%xmm2, %eax
    000000de: 	cmpl	%r14d, %r13d
    000000e1: 	je	.Ltmp581 # Offset: 225
.Ltmp586:
    000000e3: 	movslq	%esi, %rdx
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	leaq	(,%rdx,4), %rdi
    000000f0: 	movl	(%r15,%rdx,4), %edx
    000000f4: 	shll	%cl, %edx
    000000f6: 	shll	%cl, %edx
    000000f8: 	shll	%cl, %edx
    000000fa: 	shll	%cl, %edx
    000000fc: 	shll	%cl, %edx
    000000fe: 	addl	%edx, %eax
    00000100: 	leal	0x1(%rsi), %edx
    00000103: 	cmpl	%edx, %r14d
    00000106: 	jle	.Ltmp581 # Offset: 262
    00000108: 	movl	0x4(%r15,%rdi), %edx
    0000010d: 	addl	$0x2, %esi
    00000110: 	shll	%cl, %edx
    00000112: 	shll	%cl, %edx
    00000114: 	shll	%cl, %edx
    00000116: 	shll	%cl, %edx
    00000118: 	shll	%cl, %edx
    0000011a: 	addl	%edx, %eax
    0000011c: 	cmpl	%r14d, %esi
    0000011f: 	jge	.Ltmp581 # Offset: 287
    00000121: 	movl	0x8(%r15,%rdi), %edx
    00000126: 	shll	%cl, %edx
    00000128: 	shll	%cl, %edx
    0000012a: 	shll	%cl, %edx
    0000012c: 	shll	%cl, %edx
    0000012e: 	shll	%cl, %edx
    00000130: 	addl	%edx, %eax
.Ltmp581:
    00000132: 	movl	%ebx, %ecx
    00000134: 	movl	%r11d, %edx
    00000137: 	shll	%cl, %edx
    00000139: 	shll	%cl, %edx
    0000013b: 	shll	%cl, %edx
    0000013d: 	shll	%cl, %edx
    0000013f: 	shll	%cl, %edx
    00000141: 	imull	$0x1f40, %edx, %edx
    00000147: 	cmpl	%eax, %edx
    00000149: 	je	.Ltmp584 # Offset: 329
    0000014b: 	movl	current_test(%rip), %edx
    00000151: 	leaq	DATAat0x10f44(%rip), %rsi
    00000158: 	movl	$0x1, %edi
    0000015d: 	xorl	%eax, %eax
    0000015f: 	addl	$0x1, %r12d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	movl	iterations(%rip), %r10d
    0000016f: 	cmpl	%r10d, %r12d
    00000172: 	jge	.Ltmp580 # Offset: 370
    00000174: 	movq	init_value(%rip), %r11
    0000017b: 	jmp	.Ltmp585 # Offset: 379
.Ltmp584:
    00000180: 	addl	$0x1, %r12d
    00000184: 	cmpl	%r10d, %r12d
    00000187: 	jl	.Ltmp585 # Offset: 391
.Ltmp580:
    0000018d: 	callq	clock@PLT # Offset: 397
    00000192: 	pxor	%xmm0, %xmm0
    00000196: 	movq	0x8(%rsp), %rdi
    0000019b: 	movq	%rax, end_time(%rip)
    000001a2: 	subq	start_time(%rip), %rax
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001b6: 	addq	$0x18, %rsp
    000001ba: 	popq	%rbx
    000001bb: 	popq	%rbp
    000001bc: 	popq	%r12
    000001be: 	popq	%r13
    000001c0: 	popq	%r14
    000001c2: 	popq	%r15
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
.Ltmp582:
    000001c9: 	xorl	%esi, %esi
    000001cb: 	xorl	%eax, %eax
    000001cd: 	jmp	.Ltmp586 # Offset: 461
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ij28shift_left_repeated_variableIjEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ii29shift_right_repeated_variableIiEEvPT_iS2_PKc" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0xb950
  Size        : 0x1d2
  MaxSize     : 0x1e0
  Offset      : 0xb950
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ii29shift_right_repeated_variableIiEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x18, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r10d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r10d, %r10d
    00000035: 	jle	.Ltmp587 # Offset: 53
    0000003b: 	leal	-0x1(%r14), %eax
    0000003f: 	movl	%r14d, %r13d
    00000042: 	movq	init_value(%rip), %r11
    00000049: 	xorl	%r12d, %r12d
    0000004c: 	movl	%eax, 0x4(%rsp)
    00000050: 	movl	%r14d, %eax
    00000053: 	andl	$-0x4, %r13d
    00000057: 	shrl	$0x2, %eax
    0000005a: 	subl	$0x1, %eax
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	0x10(%r15,%rax), %rbp
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp592:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp588 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp589 # Offset: 128
    00000086: 	movslq	%ebx, %rdi
    00000089: 	movq	%r15, %rax
    0000008c: 	pxor	%xmm2, %xmm2
    00000090: 	movq	%rdi, %xmm1
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp590:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	addq	$0x10, %rax
    000000a0: 	psrad	%xmm1, %xmm0
    000000a4: 	psrad	%xmm1, %xmm0
    000000a8: 	psrad	%xmm1, %xmm0
    000000ac: 	psrad	%xmm1, %xmm0
    000000b0: 	psrad	%xmm1, %xmm0
    000000b4: 	paddd	%xmm0, %xmm2
    000000b8: 	cmpq	%rbp, %rax
    000000bb: 	jne	.Ltmp590 # Offset: 187
    000000bd: 	movdqa	%xmm2, %xmm0
    000000c1: 	movl	%r13d, %esi
    000000c4: 	psrldq	$0x8, %xmm0
    000000c9: 	paddd	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x4, %xmm0
    000000d6: 	paddd	%xmm0, %xmm2
    000000da: 	movd	%xmm2, %eax
    000000de: 	cmpl	%r14d, %r13d
    000000e1: 	je	.Ltmp588 # Offset: 225
.Ltmp593:
    000000e3: 	movslq	%esi, %rdx
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	leaq	(,%rdx,4), %rdi
    000000f0: 	movl	(%r15,%rdx,4), %edx
    000000f4: 	sarl	%cl, %edx
    000000f6: 	sarl	%cl, %edx
    000000f8: 	sarl	%cl, %edx
    000000fa: 	sarl	%cl, %edx
    000000fc: 	sarl	%cl, %edx
    000000fe: 	addl	%edx, %eax
    00000100: 	leal	0x1(%rsi), %edx
    00000103: 	cmpl	%edx, %r14d
    00000106: 	jle	.Ltmp588 # Offset: 262
    00000108: 	movl	0x4(%r15,%rdi), %edx
    0000010d: 	addl	$0x2, %esi
    00000110: 	sarl	%cl, %edx
    00000112: 	sarl	%cl, %edx
    00000114: 	sarl	%cl, %edx
    00000116: 	sarl	%cl, %edx
    00000118: 	sarl	%cl, %edx
    0000011a: 	addl	%edx, %eax
    0000011c: 	cmpl	%r14d, %esi
    0000011f: 	jge	.Ltmp588 # Offset: 287
    00000121: 	movl	0x8(%r15,%rdi), %edx
    00000126: 	sarl	%cl, %edx
    00000128: 	sarl	%cl, %edx
    0000012a: 	sarl	%cl, %edx
    0000012c: 	sarl	%cl, %edx
    0000012e: 	sarl	%cl, %edx
    00000130: 	addl	%edx, %eax
.Ltmp588:
    00000132: 	movl	%ebx, %ecx
    00000134: 	movl	%r11d, %edx
    00000137: 	sarl	%cl, %edx
    00000139: 	sarl	%cl, %edx
    0000013b: 	sarl	%cl, %edx
    0000013d: 	sarl	%cl, %edx
    0000013f: 	sarl	%cl, %edx
    00000141: 	imull	$0x1f40, %edx, %edx
    00000147: 	cmpl	%eax, %edx
    00000149: 	je	.Ltmp591 # Offset: 329
    0000014b: 	movl	current_test(%rip), %edx
    00000151: 	leaq	DATAat0x10f44(%rip), %rsi
    00000158: 	movl	$0x1, %edi
    0000015d: 	xorl	%eax, %eax
    0000015f: 	addl	$0x1, %r12d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	movl	iterations(%rip), %r10d
    0000016f: 	cmpl	%r10d, %r12d
    00000172: 	jge	.Ltmp587 # Offset: 370
    00000174: 	movq	init_value(%rip), %r11
    0000017b: 	jmp	.Ltmp592 # Offset: 379
.Ltmp591:
    00000180: 	addl	$0x1, %r12d
    00000184: 	cmpl	%r10d, %r12d
    00000187: 	jl	.Ltmp592 # Offset: 391
.Ltmp587:
    0000018d: 	callq	clock@PLT # Offset: 397
    00000192: 	pxor	%xmm0, %xmm0
    00000196: 	movq	0x8(%rsp), %rdi
    0000019b: 	movq	%rax, end_time(%rip)
    000001a2: 	subq	start_time(%rip), %rax
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001b6: 	addq	$0x18, %rsp
    000001ba: 	popq	%rbx
    000001bb: 	popq	%rbp
    000001bc: 	popq	%r12
    000001be: 	popq	%r13
    000001c0: 	popq	%r14
    000001c2: 	popq	%r15
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
.Ltmp589:
    000001c9: 	xorl	%esi, %esi
    000001cb: 	xorl	%eax, %eax
    000001cd: 	jmp	.Ltmp593 # Offset: 461
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ii29shift_right_repeated_variableIiEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ii28shift_left_repeated_variableIiEEvPT_iS2_PKc" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0xbb30
  Size        : 0x1d2
  MaxSize     : 0x1e0
  Offset      : 0xbb30
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ii28shift_left_repeated_variableIiEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x18, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r10d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r10d, %r10d
    00000035: 	jle	.Ltmp594 # Offset: 53
    0000003b: 	leal	-0x1(%r14), %eax
    0000003f: 	movl	%r14d, %r13d
    00000042: 	movq	init_value(%rip), %r11
    00000049: 	xorl	%r12d, %r12d
    0000004c: 	movl	%eax, 0x4(%rsp)
    00000050: 	movl	%r14d, %eax
    00000053: 	andl	$-0x4, %r13d
    00000057: 	shrl	$0x2, %eax
    0000005a: 	subl	$0x1, %eax
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	0x10(%r15,%rax), %rbp
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp599:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp595 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp596 # Offset: 128
    00000086: 	movslq	%ebx, %rdi
    00000089: 	movq	%r15, %rax
    0000008c: 	pxor	%xmm2, %xmm2
    00000090: 	movq	%rdi, %xmm1
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp597:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	addq	$0x10, %rax
    000000a0: 	pslld	%xmm1, %xmm0
    000000a4: 	pslld	%xmm1, %xmm0
    000000a8: 	pslld	%xmm1, %xmm0
    000000ac: 	pslld	%xmm1, %xmm0
    000000b0: 	pslld	%xmm1, %xmm0
    000000b4: 	paddd	%xmm0, %xmm2
    000000b8: 	cmpq	%rbp, %rax
    000000bb: 	jne	.Ltmp597 # Offset: 187
    000000bd: 	movdqa	%xmm2, %xmm0
    000000c1: 	movl	%r13d, %esi
    000000c4: 	psrldq	$0x8, %xmm0
    000000c9: 	paddd	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x4, %xmm0
    000000d6: 	paddd	%xmm0, %xmm2
    000000da: 	movd	%xmm2, %eax
    000000de: 	cmpl	%r14d, %r13d
    000000e1: 	je	.Ltmp595 # Offset: 225
.Ltmp600:
    000000e3: 	movslq	%esi, %rdx
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	leaq	(,%rdx,4), %rdi
    000000f0: 	movl	(%r15,%rdx,4), %edx
    000000f4: 	shll	%cl, %edx
    000000f6: 	shll	%cl, %edx
    000000f8: 	shll	%cl, %edx
    000000fa: 	shll	%cl, %edx
    000000fc: 	shll	%cl, %edx
    000000fe: 	addl	%edx, %eax
    00000100: 	leal	0x1(%rsi), %edx
    00000103: 	cmpl	%edx, %r14d
    00000106: 	jle	.Ltmp595 # Offset: 262
    00000108: 	movl	0x4(%r15,%rdi), %edx
    0000010d: 	addl	$0x2, %esi
    00000110: 	shll	%cl, %edx
    00000112: 	shll	%cl, %edx
    00000114: 	shll	%cl, %edx
    00000116: 	shll	%cl, %edx
    00000118: 	shll	%cl, %edx
    0000011a: 	addl	%edx, %eax
    0000011c: 	cmpl	%r14d, %esi
    0000011f: 	jge	.Ltmp595 # Offset: 287
    00000121: 	movl	0x8(%r15,%rdi), %edx
    00000126: 	shll	%cl, %edx
    00000128: 	shll	%cl, %edx
    0000012a: 	shll	%cl, %edx
    0000012c: 	shll	%cl, %edx
    0000012e: 	shll	%cl, %edx
    00000130: 	addl	%edx, %eax
.Ltmp595:
    00000132: 	movl	%ebx, %ecx
    00000134: 	movl	%r11d, %edx
    00000137: 	shll	%cl, %edx
    00000139: 	shll	%cl, %edx
    0000013b: 	shll	%cl, %edx
    0000013d: 	shll	%cl, %edx
    0000013f: 	shll	%cl, %edx
    00000141: 	imull	$0x1f40, %edx, %edx
    00000147: 	cmpl	%eax, %edx
    00000149: 	je	.Ltmp598 # Offset: 329
    0000014b: 	movl	current_test(%rip), %edx
    00000151: 	leaq	DATAat0x10f44(%rip), %rsi
    00000158: 	movl	$0x1, %edi
    0000015d: 	xorl	%eax, %eax
    0000015f: 	addl	$0x1, %r12d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	movl	iterations(%rip), %r10d
    0000016f: 	cmpl	%r10d, %r12d
    00000172: 	jge	.Ltmp594 # Offset: 370
    00000174: 	movq	init_value(%rip), %r11
    0000017b: 	jmp	.Ltmp599 # Offset: 379
.Ltmp598:
    00000180: 	addl	$0x1, %r12d
    00000184: 	cmpl	%r10d, %r12d
    00000187: 	jl	.Ltmp599 # Offset: 391
.Ltmp594:
    0000018d: 	callq	clock@PLT # Offset: 397
    00000192: 	pxor	%xmm0, %xmm0
    00000196: 	movq	0x8(%rsp), %rdi
    0000019b: 	movq	%rax, end_time(%rip)
    000001a2: 	subq	start_time(%rip), %rax
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001b6: 	addq	$0x18, %rsp
    000001ba: 	popq	%rbx
    000001bb: 	popq	%rbp
    000001bc: 	popq	%r12
    000001be: 	popq	%r13
    000001c0: 	popq	%r14
    000001c2: 	popq	%r15
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
.Ltmp596:
    000001c9: 	xorl	%esi, %esi
    000001cb: 	xorl	%eax, %eax
    000001cd: 	jmp	.Ltmp600 # Offset: 461
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ii28shift_left_repeated_variableIiEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Im29shift_right_repeated_variableImEEvPT_iS2_PKc" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0xbd10
  Size        : 0x18a
  MaxSize     : 0x190
  Offset      : 0xbd10
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Im29shift_right_repeated_variableImEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %esi
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%esi, %esi
    00000034: 	jle	.Ltmp601 # Offset: 52
    0000003a: 	movl	%r14d, %eax
    0000003d: 	movl	%r14d, %r12d
    00000040: 	movq	init_value(%rip), %rdi
    00000047: 	movl	%ebp, %ecx
    00000049: 	shrl	%eax
    0000004b: 	andl	$-0x2, %r12d
    0000004f: 	leaq	DATAat0x10f44(%rip), %rbp
    00000056: 	xorl	%r15d, %r15d
    00000059: 	subl	$0x1, %eax
    0000005c: 	shlq	$0x4, %rax
    00000060: 	leaq	0x10(%rbx,%rax), %r13
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp606:
    00000068: 	xorl	%edx, %edx
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp602 # Offset: 109
    0000006f: 	cmpl	$0x1, %r14d
    00000073: 	je	.Ltmp603 # Offset: 115
    00000079: 	movq	%rbx, %rax
    0000007c: 	pxor	%xmm2, %xmm2
    00000080: 	movd	%ecx, %xmm1
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp604:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	psrlq	%xmm1, %xmm0
    00000094: 	psrlq	%xmm1, %xmm0
    00000098: 	psrlq	%xmm1, %xmm0
    0000009c: 	psrlq	%xmm1, %xmm0
    000000a0: 	psrlq	%xmm1, %xmm0
    000000a4: 	paddq	%xmm0, %xmm2
    000000a8: 	cmpq	%rax, %r13
    000000ab: 	jne	.Ltmp604 # Offset: 171
    000000ad: 	movdqa	%xmm2, %xmm0
    000000b1: 	movslq	%r12d, %rax
    000000b4: 	psrldq	$0x8, %xmm0
    000000b9: 	paddq	%xmm0, %xmm2
    000000bd: 	movq	%xmm2, %rdx
    000000c2: 	cmpl	%r14d, %r12d
    000000c5: 	je	.Ltmp602 # Offset: 197
.Ltmp607:
    000000c7: 	movq	(%rbx,%rax,8), %rax
    000000cb: 	shrq	%cl, %rax
    000000ce: 	shrq	%cl, %rax
    000000d1: 	shrq	%cl, %rax
    000000d4: 	shrq	%cl, %rax
    000000d7: 	shrq	%cl, %rax
    000000da: 	addq	%rax, %rdx
.Ltmp602:
    000000dd: 	movq	%rdi, %rax
    000000e0: 	shrq	%cl, %rax
    000000e3: 	shrq	%cl, %rax
    000000e6: 	shrq	%cl, %rax
    000000e9: 	shrq	%cl, %rax
    000000ec: 	shrq	%cl, %rax
    000000ef: 	imulq	$0x1f40, %rax, %rax
    000000f6: 	cmpq	%rdx, %rax
    000000f9: 	je	.Ltmp605 # Offset: 249
    000000fb: 	movl	current_test(%rip), %edx
    00000101: 	movq	%rbp, %rsi
    00000104: 	movl	$0x1, %edi
    00000109: 	xorl	%eax, %eax
    0000010b: 	movl	%ecx, 0x4(%rsp)
    0000010f: 	addl	$0x1, %r15d
    00000113: 	callq	__printf_chk@PLT # Offset: 275
    00000118: 	movl	iterations(%rip), %esi
    0000011e: 	cmpl	%esi, %r15d
    00000121: 	jge	.Ltmp601 # Offset: 289
    00000123: 	movq	init_value(%rip), %rdi
    0000012a: 	movl	0x4(%rsp), %ecx
    0000012e: 	jmp	.Ltmp606 # Offset: 302
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp605:
    00000138: 	addl	$0x1, %r15d
    0000013c: 	cmpl	%esi, %r15d
    0000013f: 	jl	.Ltmp606 # Offset: 319
.Ltmp601:
    00000145: 	callq	clock@PLT # Offset: 325
    0000014a: 	pxor	%xmm0, %xmm0
    0000014e: 	movq	0x8(%rsp), %rdi
    00000153: 	movq	%rax, end_time(%rip)
    0000015a: 	subq	start_time(%rip), %rax
    00000161: 	cvtsi2sd	%rax, %xmm0
    00000166: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000016e: 	addq	$0x18, %rsp
    00000172: 	popq	%rbx
    00000173: 	popq	%rbp
    00000174: 	popq	%r12
    00000176: 	popq	%r13
    00000178: 	popq	%r14
    0000017a: 	popq	%r15
    0000017c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 380
.Ltmp603:
    00000181: 	xorl	%eax, %eax
    00000183: 	xorl	%edx, %edx
    00000185: 	jmp	.Ltmp607 # Offset: 389
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Im29shift_right_repeated_variableImEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Im28shift_left_repeated_variableImEEvPT_iS2_PKc" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0xbea0
  Size        : 0x18a
  MaxSize     : 0x190
  Offset      : 0xbea0
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Im28shift_left_repeated_variableImEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %esi
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%esi, %esi
    00000034: 	jle	.Ltmp608 # Offset: 52
    0000003a: 	movl	%r14d, %eax
    0000003d: 	movl	%r14d, %r12d
    00000040: 	movq	init_value(%rip), %rdi
    00000047: 	movl	%ebp, %ecx
    00000049: 	shrl	%eax
    0000004b: 	andl	$-0x2, %r12d
    0000004f: 	leaq	DATAat0x10f44(%rip), %rbp
    00000056: 	xorl	%r15d, %r15d
    00000059: 	subl	$0x1, %eax
    0000005c: 	shlq	$0x4, %rax
    00000060: 	leaq	0x10(%rbx,%rax), %r13
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp613:
    00000068: 	xorl	%edx, %edx
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp609 # Offset: 109
    0000006f: 	cmpl	$0x1, %r14d
    00000073: 	je	.Ltmp610 # Offset: 115
    00000079: 	movq	%rbx, %rax
    0000007c: 	pxor	%xmm2, %xmm2
    00000080: 	movd	%ecx, %xmm1
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp611:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	psllq	%xmm1, %xmm0
    00000094: 	psllq	%xmm1, %xmm0
    00000098: 	psllq	%xmm1, %xmm0
    0000009c: 	psllq	%xmm1, %xmm0
    000000a0: 	psllq	%xmm1, %xmm0
    000000a4: 	paddq	%xmm0, %xmm2
    000000a8: 	cmpq	%rax, %r13
    000000ab: 	jne	.Ltmp611 # Offset: 171
    000000ad: 	movdqa	%xmm2, %xmm0
    000000b1: 	movslq	%r12d, %rax
    000000b4: 	psrldq	$0x8, %xmm0
    000000b9: 	paddq	%xmm0, %xmm2
    000000bd: 	movq	%xmm2, %rdx
    000000c2: 	cmpl	%r14d, %r12d
    000000c5: 	je	.Ltmp609 # Offset: 197
.Ltmp614:
    000000c7: 	movq	(%rbx,%rax,8), %rax
    000000cb: 	shlq	%cl, %rax
    000000ce: 	shlq	%cl, %rax
    000000d1: 	shlq	%cl, %rax
    000000d4: 	shlq	%cl, %rax
    000000d7: 	shlq	%cl, %rax
    000000da: 	addq	%rax, %rdx
.Ltmp609:
    000000dd: 	movq	%rdi, %rax
    000000e0: 	shlq	%cl, %rax
    000000e3: 	shlq	%cl, %rax
    000000e6: 	shlq	%cl, %rax
    000000e9: 	shlq	%cl, %rax
    000000ec: 	shlq	%cl, %rax
    000000ef: 	imulq	$0x1f40, %rax, %rax
    000000f6: 	cmpq	%rdx, %rax
    000000f9: 	je	.Ltmp612 # Offset: 249
    000000fb: 	movl	current_test(%rip), %edx
    00000101: 	movq	%rbp, %rsi
    00000104: 	movl	$0x1, %edi
    00000109: 	xorl	%eax, %eax
    0000010b: 	movl	%ecx, 0x4(%rsp)
    0000010f: 	addl	$0x1, %r15d
    00000113: 	callq	__printf_chk@PLT # Offset: 275
    00000118: 	movl	iterations(%rip), %esi
    0000011e: 	cmpl	%esi, %r15d
    00000121: 	jge	.Ltmp608 # Offset: 289
    00000123: 	movq	init_value(%rip), %rdi
    0000012a: 	movl	0x4(%rsp), %ecx
    0000012e: 	jmp	.Ltmp613 # Offset: 302
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp612:
    00000138: 	addl	$0x1, %r15d
    0000013c: 	cmpl	%esi, %r15d
    0000013f: 	jl	.Ltmp613 # Offset: 319
.Ltmp608:
    00000145: 	callq	clock@PLT # Offset: 325
    0000014a: 	pxor	%xmm0, %xmm0
    0000014e: 	movq	0x8(%rsp), %rdi
    00000153: 	movq	%rax, end_time(%rip)
    0000015a: 	subq	start_time(%rip), %rax
    00000161: 	cvtsi2sd	%rax, %xmm0
    00000166: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000016e: 	addq	$0x18, %rsp
    00000172: 	popq	%rbx
    00000173: 	popq	%rbp
    00000174: 	popq	%r12
    00000176: 	popq	%r13
    00000178: 	popq	%r14
    0000017a: 	popq	%r15
    0000017c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 380
.Ltmp610:
    00000181: 	xorl	%eax, %eax
    00000183: 	xorl	%edx, %edx
    00000185: 	jmp	.Ltmp614 # Offset: 389
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Im28shift_left_repeated_variableImEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Il29shift_right_repeated_variableIlEEvPT_iS2_PKc" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0xc030
  Size        : 0x127
  MaxSize     : 0x130
  Offset      : 0xc030
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Il29shift_right_repeated_variableIlEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %edi
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%edi, %edi
    00000032: 	jle	.Ltmp615 # Offset: 50
    00000038: 	leal	-0x1(%r15), %eax
    0000003c: 	movq	init_value(%rip), %r8
    00000043: 	movl	%ebp, %ecx
    00000045: 	xorl	%r14d, %r14d
    00000048: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004d: 	leaq	DATAat0x10f44(%rip), %rbp
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp619:
    00000058: 	movq	%rbx, %rdx
    0000005b: 	xorl	%esi, %esi
    0000005d: 	testl	%r15d, %r15d
    00000060: 	jle	.Ltmp616 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp617:
    00000068: 	movq	(%rdx), %rax
    0000006b: 	addq	$0x8, %rdx
    0000006f: 	sarq	%cl, %rax
    00000072: 	sarq	%cl, %rax
    00000075: 	sarq	%cl, %rax
    00000078: 	sarq	%cl, %rax
    0000007b: 	sarq	%cl, %rax
    0000007e: 	addq	%rax, %rsi
    00000081: 	cmpq	%rdx, %r13
    00000084: 	jne	.Ltmp617 # Offset: 132
.Ltmp616:
    00000086: 	movq	%r8, %rax
    00000089: 	sarq	%cl, %rax
    0000008c: 	sarq	%cl, %rax
    0000008f: 	sarq	%cl, %rax
    00000092: 	sarq	%cl, %rax
    00000095: 	sarq	%cl, %rax
    00000098: 	imulq	$0x1f40, %rax, %rax
    0000009f: 	cmpq	%rsi, %rax
    000000a2: 	je	.Ltmp618 # Offset: 162
    000000a4: 	movl	current_test(%rip), %edx
    000000aa: 	movl	$0x1, %edi
    000000af: 	movq	%rbp, %rsi
    000000b2: 	xorl	%eax, %eax
    000000b4: 	movl	%ecx, 0xc(%rsp)
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	callq	__printf_chk@PLT # Offset: 188
    000000c1: 	movl	iterations(%rip), %edi
    000000c7: 	cmpl	%edi, %r14d
    000000ca: 	jge	.Ltmp615 # Offset: 202
    000000cc: 	movq	init_value(%rip), %r8
    000000d3: 	movl	0xc(%rsp), %ecx
    000000d7: 	jmp	.Ltmp619 # Offset: 215
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp618:
    000000e0: 	addl	$0x1, %r14d
    000000e4: 	cmpl	%edi, %r14d
    000000e7: 	jl	.Ltmp619 # Offset: 231
.Ltmp615:
    000000ed: 	callq	clock@PLT # Offset: 237
    000000f2: 	pxor	%xmm0, %xmm0
    000000f6: 	movq	%r12, %rdi
    000000f9: 	movq	%rax, end_time(%rip)
    00000100: 	subq	start_time(%rip), %rax
    00000107: 	cvtsi2sd	%rax, %xmm0
    0000010c: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000114: 	addq	$0x18, %rsp
    00000118: 	popq	%rbx
    00000119: 	popq	%rbp
    0000011a: 	popq	%r12
    0000011c: 	popq	%r13
    0000011e: 	popq	%r14
    00000120: 	popq	%r15
    00000122: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 290
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Il29shift_right_repeated_variableIlEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Il28shift_left_repeated_variableIlEEvPT_iS2_PKc" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0xc160
  Size        : 0x192
  MaxSize     : 0x1a0
  Offset      : 0xc160
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Il28shift_left_repeated_variableIlEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %esi
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%esi, %esi
    00000034: 	jle	.Ltmp620 # Offset: 52
    0000003a: 	movl	%r14d, %eax
    0000003d: 	movl	%r14d, %r12d
    00000040: 	movq	init_value(%rip), %rdi
    00000047: 	movl	%ebp, %ecx
    00000049: 	shrl	%eax
    0000004b: 	andl	$-0x2, %r12d
    0000004f: 	leaq	DATAat0x10f44(%rip), %rbp
    00000056: 	xorl	%r15d, %r15d
    00000059: 	subl	$0x1, %eax
    0000005c: 	shlq	$0x4, %rax
    00000060: 	leaq	0x10(%rbx,%rax), %r13
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp625:
    00000068: 	xorl	%edx, %edx
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp621 # Offset: 109
    0000006f: 	cmpl	$0x1, %r14d
    00000073: 	je	.Ltmp622 # Offset: 115
    00000079: 	movslq	%ecx, %rdx
    0000007c: 	movq	%rbx, %rax
    0000007f: 	pxor	%xmm2, %xmm2
    00000083: 	movq	%rdx, %xmm1
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp623:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psllq	%xmm1, %xmm0
    0000009c: 	psllq	%xmm1, %xmm0
    000000a0: 	psllq	%xmm1, %xmm0
    000000a4: 	psllq	%xmm1, %xmm0
    000000a8: 	psllq	%xmm1, %xmm0
    000000ac: 	paddq	%xmm0, %xmm2
    000000b0: 	cmpq	%rax, %r13
    000000b3: 	jne	.Ltmp623 # Offset: 179
    000000b5: 	movdqa	%xmm2, %xmm0
    000000b9: 	movslq	%r12d, %rax
    000000bc: 	psrldq	$0x8, %xmm0
    000000c1: 	paddq	%xmm0, %xmm2
    000000c5: 	movq	%xmm2, %rdx
    000000ca: 	cmpl	%r14d, %r12d
    000000cd: 	je	.Ltmp621 # Offset: 205
.Ltmp626:
    000000cf: 	movq	(%rbx,%rax,8), %rax
    000000d3: 	shlq	%cl, %rax
    000000d6: 	shlq	%cl, %rax
    000000d9: 	shlq	%cl, %rax
    000000dc: 	shlq	%cl, %rax
    000000df: 	shlq	%cl, %rax
    000000e2: 	addq	%rax, %rdx
.Ltmp621:
    000000e5: 	movq	%rdi, %rax
    000000e8: 	shlq	%cl, %rax
    000000eb: 	shlq	%cl, %rax
    000000ee: 	shlq	%cl, %rax
    000000f1: 	shlq	%cl, %rax
    000000f4: 	shlq	%cl, %rax
    000000f7: 	imulq	$0x1f40, %rax, %rax
    000000fe: 	cmpq	%rdx, %rax
    00000101: 	je	.Ltmp624 # Offset: 257
    00000103: 	movl	current_test(%rip), %edx
    00000109: 	movq	%rbp, %rsi
    0000010c: 	movl	$0x1, %edi
    00000111: 	xorl	%eax, %eax
    00000113: 	movl	%ecx, 0x4(%rsp)
    00000117: 	addl	$0x1, %r15d
    0000011b: 	callq	__printf_chk@PLT # Offset: 283
    00000120: 	movl	iterations(%rip), %esi
    00000126: 	cmpl	%esi, %r15d
    00000129: 	jge	.Ltmp620 # Offset: 297
    0000012b: 	movq	init_value(%rip), %rdi
    00000132: 	movl	0x4(%rsp), %ecx
    00000136: 	jmp	.Ltmp625 # Offset: 310
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp624:
    00000140: 	addl	$0x1, %r15d
    00000144: 	cmpl	%esi, %r15d
    00000147: 	jl	.Ltmp625 # Offset: 327
.Ltmp620:
    0000014d: 	callq	clock@PLT # Offset: 333
    00000152: 	pxor	%xmm0, %xmm0
    00000156: 	movq	0x8(%rsp), %rdi
    0000015b: 	movq	%rax, end_time(%rip)
    00000162: 	subq	start_time(%rip), %rax
    00000169: 	cvtsi2sd	%rax, %xmm0
    0000016e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000176: 	addq	$0x18, %rsp
    0000017a: 	popq	%rbx
    0000017b: 	popq	%rbp
    0000017c: 	popq	%r12
    0000017e: 	popq	%r13
    00000180: 	popq	%r14
    00000182: 	popq	%r15
    00000184: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 388
.Ltmp622:
    00000189: 	xorl	%eax, %eax
    0000018b: 	xorl	%edx, %edx
    0000018d: 	jmp	.Ltmp626 # Offset: 397
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Il28shift_left_repeated_variableIlEEvPT_iS2_PKc"

Binary Function "_Z13test_constantIt17mask_low_constantItEEvPT_iPKc" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0xc300
  Size        : 0x204
  MaxSize     : 0x210
  Offset      : 0xc300
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt17mask_low_constantItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r9d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r9d, %r9d
    00000033: 	jle	.Ltmp627 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movq	init_value(%rip), %r10
    00000047: 	movq	DATAat0x10fb0(%rip), %xmm3
    0000004f: 	movl	%eax, 0x4(%rsp)
    00000053: 	movl	%r14d, %eax
    00000056: 	andl	$-0x8, %ebx
    00000059: 	xorl	%r12d, %r12d
    0000005c: 	shrl	$0x3, %eax
    0000005f: 	movdqa	DATAat0x10fb0(%rip), %xmm2
    00000067: 	leaq	DATAat0x10f44(%rip), %rbp
    0000006e: 	subl	$0x1, %eax
    00000071: 	shlq	$0x4, %rax
    00000075: 	leaq	0x10(%r15,%rax), %r13
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp633:
    00000080: 	xorl	%edx, %edx
    00000082: 	testl	%r14d, %r14d
    00000085: 	jle	.Ltmp628 # Offset: 133
    0000008b: 	cmpl	$0x6, 0x4(%rsp)
    00000090: 	jbe	.Ltmp629 # Offset: 144
    00000096: 	movq	%r15, %rax
    00000099: 	pxor	%xmm1, %xmm1
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp630:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	addq	$0x10, %rax
    000000a8: 	pand	%xmm2, %xmm0
    000000ac: 	paddw	%xmm0, %xmm1
    000000b0: 	cmpq	%r13, %rax
    000000b3: 	jne	.Ltmp630 # Offset: 179
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x8, %xmm0
    000000be: 	paddw	%xmm0, %xmm1
    000000c2: 	movdqa	%xmm1, %xmm0
    000000c6: 	psrldq	$0x4, %xmm0
    000000cb: 	paddw	%xmm0, %xmm1
    000000cf: 	movdqa	%xmm1, %xmm0
    000000d3: 	psrldq	$0x2, %xmm0
    000000d8: 	paddw	%xmm0, %xmm1
    000000dc: 	pextrw	$0x0, %xmm1, %edx
    000000e1: 	cmpl	%r14d, %ebx
    000000e4: 	je	.Ltmp628 # Offset: 228
    000000e6: 	movl	%ebx, %eax
    000000e8: 	movl	%ebx, %ecx
.Ltmp634:
    000000ea: 	movl	%r14d, %esi
    000000ed: 	subl	%eax, %esi
    000000ef: 	leal	-0x1(%rsi), %edi
    000000f2: 	cmpl	$0x2, %edi
    000000f5: 	jbe	.Ltmp631 # Offset: 245
    000000f7: 	movq	(%r15,%rax,2), %xmm0
    000000fd: 	pand	%xmm3, %xmm0
    00000101: 	pextrw	$0x0, %xmm0, %eax
    00000106: 	pextrw	$0x1, %xmm0, %edi
    0000010b: 	addl	%edi, %eax
    0000010d: 	addl	%edx, %eax
    0000010f: 	pextrw	$0x2, %xmm0, %edx
    00000114: 	addl	%edx, %eax
    00000116: 	pextrw	$0x3, %xmm0, %edx
    0000011b: 	addl	%eax, %edx
    0000011d: 	movl	%esi, %eax
    0000011f: 	andl	$-0x4, %eax
    00000122: 	addl	%eax, %ecx
    00000124: 	cmpl	%eax, %esi
    00000126: 	je	.Ltmp628 # Offset: 294
.Ltmp631:
    00000128: 	movslq	%ecx, %rax
    0000012b: 	leaq	(%rax,%rax), %rsi
    0000012f: 	movzwl	(%r15,%rax,2), %eax
    00000134: 	andl	$-0x10, %eax
    00000137: 	addl	%eax, %edx
    00000139: 	leal	0x1(%rcx), %eax
    0000013c: 	cmpl	%eax, %r14d
    0000013f: 	jle	.Ltmp628 # Offset: 319
    00000141: 	movzwl	0x2(%r15,%rsi), %eax
    00000147: 	addl	$0x2, %ecx
    0000014a: 	andl	$-0x10, %eax
    0000014d: 	addl	%eax, %edx
    0000014f: 	cmpl	%ecx, %r14d
    00000152: 	jle	.Ltmp628 # Offset: 338
    00000154: 	movzwl	0x4(%r15,%rsi), %eax
    0000015a: 	andl	$-0x10, %eax
    0000015d: 	addl	%eax, %edx
.Ltmp628:
    0000015f: 	movl	%r10d, %eax
    00000162: 	andl	$-0x10, %eax
    00000165: 	imulw	$0x1f40, %ax, %ax
    0000016a: 	cmpw	%dx, %ax
    0000016d: 	je	.Ltmp632 # Offset: 365
    0000016f: 	movl	current_test(%rip), %edx
    00000175: 	movq	%rbp, %rsi
    00000178: 	movl	$0x1, %edi
    0000017d: 	xorl	%eax, %eax
    0000017f: 	addl	$0x1, %r12d
    00000183: 	callq	__printf_chk@PLT # Offset: 387
    00000188: 	movl	iterations(%rip), %r9d
    0000018f: 	cmpl	%r12d, %r9d
    00000192: 	jle	.Ltmp627 # Offset: 402
    00000194: 	movq	init_value(%rip), %r10
    0000019b: 	movdqa	DATAat0x10fb0(%rip), %xmm2
    000001a3: 	movq	DATAat0x10fb0(%rip), %xmm3
    000001ab: 	jmp	.Ltmp633 # Offset: 427
.Ltmp632:
    000001b0: 	addl	$0x1, %r12d
    000001b4: 	cmpl	%r9d, %r12d
    000001b7: 	jl	.Ltmp633 # Offset: 439
.Ltmp627:
    000001bd: 	callq	clock@PLT # Offset: 445
    000001c2: 	pxor	%xmm0, %xmm0
    000001c6: 	movq	0x8(%rsp), %rdi
    000001cb: 	movq	%rax, end_time(%rip)
    000001d2: 	subq	start_time(%rip), %rax
    000001d9: 	cvtsi2sd	%rax, %xmm0
    000001de: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001e6: 	addq	$0x18, %rsp
    000001ea: 	popq	%rbx
    000001eb: 	popq	%rbp
    000001ec: 	popq	%r12
    000001ee: 	popq	%r13
    000001f0: 	popq	%r14
    000001f2: 	popq	%r15
    000001f4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 500
.Ltmp629:
    000001f9: 	xorl	%eax, %eax
    000001fb: 	xorl	%ecx, %ecx
    000001fd: 	xorl	%edx, %edx
    000001ff: 	jmp	.Ltmp634 # Offset: 511
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt17mask_low_constantItEEvPT_iPKc"

Binary Function "_Z13test_constantIt26mask_low_by_shift_constantItEEvPT_iPKc" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0xc510
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0xc510
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt26mask_low_by_shift_constantItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r9d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r9d, %r9d
    00000033: 	jle	.Ltmp635 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movq	init_value(%rip), %r10
    00000047: 	xorl	%r12d, %r12d
    0000004a: 	movl	%eax, 0x4(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	andl	$-0x8, %ebx
    00000054: 	leaq	DATAat0x10f44(%rip), %rbp
    0000005b: 	shrl	$0x3, %eax
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r15,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp641:
    00000070: 	xorl	%esi, %esi
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp636 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp637 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp638:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrlw	$0x4, %xmm0
    0000009d: 	psllw	$0x4, %xmm0
    000000a2: 	paddw	%xmm0, %xmm1
    000000a6: 	cmpq	%r13, %rax
    000000a9: 	jne	.Ltmp638 # Offset: 169
    000000ab: 	movdqa	%xmm1, %xmm0
    000000af: 	psrldq	$0x8, %xmm0
    000000b4: 	paddw	%xmm0, %xmm1
    000000b8: 	movdqa	%xmm1, %xmm0
    000000bc: 	psrldq	$0x4, %xmm0
    000000c1: 	paddw	%xmm0, %xmm1
    000000c5: 	movdqa	%xmm1, %xmm0
    000000c9: 	psrldq	$0x2, %xmm0
    000000ce: 	paddw	%xmm0, %xmm1
    000000d2: 	pextrw	$0x0, %xmm1, %esi
    000000d7: 	cmpl	%r14d, %ebx
    000000da: 	je	.Ltmp636 # Offset: 218
    000000dc: 	movl	%ebx, %eax
    000000de: 	movl	%ebx, %edx
.Ltmp642:
    000000e0: 	movl	%r14d, %ecx
    000000e3: 	subl	%eax, %ecx
    000000e5: 	leal	-0x1(%rcx), %edi
    000000e8: 	cmpl	$0x2, %edi
    000000eb: 	jbe	.Ltmp639 # Offset: 235
    000000ed: 	movq	(%r15,%rax,2), %xmm0
    000000f3: 	psrlw	$0x4, %xmm0
    000000f8: 	psllw	$0x4, %xmm0
    000000fd: 	pextrw	$0x0, %xmm0, %eax
    00000102: 	pextrw	$0x1, %xmm0, %edi
    00000107: 	addl	%edi, %eax
    00000109: 	addl	%esi, %eax
    0000010b: 	pextrw	$0x2, %xmm0, %esi
    00000110: 	addl	%esi, %eax
    00000112: 	pextrw	$0x3, %xmm0, %esi
    00000117: 	addl	%eax, %esi
    00000119: 	movl	%ecx, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %edx
    00000120: 	cmpl	%eax, %ecx
    00000122: 	je	.Ltmp636 # Offset: 290
.Ltmp639:
    00000124: 	movslq	%edx, %rax
    00000127: 	leaq	(%rax,%rax), %rcx
    0000012b: 	movzwl	(%r15,%rax,2), %eax
    00000130: 	andl	$-0x10, %eax
    00000133: 	addl	%eax, %esi
    00000135: 	leal	0x1(%rdx), %eax
    00000138: 	cmpl	%eax, %r14d
    0000013b: 	jle	.Ltmp636 # Offset: 315
    0000013d: 	movzwl	0x2(%r15,%rcx), %eax
    00000143: 	addl	$0x2, %edx
    00000146: 	andl	$-0x10, %eax
    00000149: 	addl	%eax, %esi
    0000014b: 	cmpl	%edx, %r14d
    0000014e: 	jle	.Ltmp636 # Offset: 334
    00000150: 	movzwl	0x4(%r15,%rcx), %eax
    00000156: 	andl	$-0x10, %eax
    00000159: 	addl	%eax, %esi
.Ltmp636:
    0000015b: 	movl	%r10d, %eax
    0000015e: 	andl	$-0x10, %eax
    00000161: 	imulw	$0x1f40, %ax, %ax
    00000166: 	cmpw	%si, %ax
    00000169: 	je	.Ltmp640 # Offset: 361
    0000016b: 	movl	current_test(%rip), %edx
    00000171: 	movq	%rbp, %rsi
    00000174: 	movl	$0x1, %edi
    00000179: 	xorl	%eax, %eax
    0000017b: 	addl	$0x1, %r12d
    0000017f: 	callq	__printf_chk@PLT # Offset: 383
    00000184: 	movl	iterations(%rip), %r9d
    0000018b: 	cmpl	%r12d, %r9d
    0000018e: 	jle	.Ltmp635 # Offset: 398
    00000190: 	movq	init_value(%rip), %r10
    00000197: 	jmp	.Ltmp641 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp640:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%r9d, %r12d
    000001a7: 	jl	.Ltmp641 # Offset: 423
.Ltmp635:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp637:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%edx, %edx
    000001ed: 	xorl	%esi, %esi
    000001ef: 	jmp	.Ltmp642 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt26mask_low_by_shift_constantItEEvPT_iPKc"

Binary Function "_Z13test_constantIs17mask_low_constantIsEEvPT_iPKc" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0xc710
  Size        : 0x204
  MaxSize     : 0x210
  Offset      : 0xc710
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs17mask_low_constantIsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r9d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r9d, %r9d
    00000033: 	jle	.Ltmp643 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movq	init_value(%rip), %r10
    00000047: 	movq	DATAat0x10fb0(%rip), %xmm3
    0000004f: 	movl	%eax, 0x4(%rsp)
    00000053: 	movl	%r14d, %eax
    00000056: 	andl	$-0x8, %ebx
    00000059: 	xorl	%r12d, %r12d
    0000005c: 	shrl	$0x3, %eax
    0000005f: 	movdqa	DATAat0x10fb0(%rip), %xmm2
    00000067: 	leaq	DATAat0x10f44(%rip), %rbp
    0000006e: 	subl	$0x1, %eax
    00000071: 	shlq	$0x4, %rax
    00000075: 	leaq	0x10(%r15,%rax), %r13
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp649:
    00000080: 	xorl	%edx, %edx
    00000082: 	testl	%r14d, %r14d
    00000085: 	jle	.Ltmp644 # Offset: 133
    0000008b: 	cmpl	$0x6, 0x4(%rsp)
    00000090: 	jbe	.Ltmp645 # Offset: 144
    00000096: 	movq	%r15, %rax
    00000099: 	pxor	%xmm1, %xmm1
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp646:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	addq	$0x10, %rax
    000000a8: 	pand	%xmm2, %xmm0
    000000ac: 	paddw	%xmm0, %xmm1
    000000b0: 	cmpq	%r13, %rax
    000000b3: 	jne	.Ltmp646 # Offset: 179
    000000b5: 	movdqa	%xmm1, %xmm0
    000000b9: 	psrldq	$0x8, %xmm0
    000000be: 	paddw	%xmm0, %xmm1
    000000c2: 	movdqa	%xmm1, %xmm0
    000000c6: 	psrldq	$0x4, %xmm0
    000000cb: 	paddw	%xmm0, %xmm1
    000000cf: 	movdqa	%xmm1, %xmm0
    000000d3: 	psrldq	$0x2, %xmm0
    000000d8: 	paddw	%xmm0, %xmm1
    000000dc: 	pextrw	$0x0, %xmm1, %edx
    000000e1: 	cmpl	%r14d, %ebx
    000000e4: 	je	.Ltmp644 # Offset: 228
    000000e6: 	movl	%ebx, %eax
    000000e8: 	movl	%ebx, %ecx
.Ltmp650:
    000000ea: 	movl	%r14d, %esi
    000000ed: 	subl	%eax, %esi
    000000ef: 	leal	-0x1(%rsi), %edi
    000000f2: 	cmpl	$0x2, %edi
    000000f5: 	jbe	.Ltmp647 # Offset: 245
    000000f7: 	movq	(%r15,%rax,2), %xmm0
    000000fd: 	pand	%xmm3, %xmm0
    00000101: 	pextrw	$0x1, %xmm0, %edi
    00000106: 	pextrw	$0x0, %xmm0, %eax
    0000010b: 	addl	%edi, %eax
    0000010d: 	pextrw	$0x2, %xmm0, %edi
    00000112: 	addl	%edi, %eax
    00000114: 	pextrw	$0x3, %xmm0, %edi
    00000119: 	addl	%edi, %eax
    0000011b: 	addl	%eax, %edx
    0000011d: 	movl	%esi, %eax
    0000011f: 	andl	$-0x4, %eax
    00000122: 	addl	%eax, %ecx
    00000124: 	cmpl	%eax, %esi
    00000126: 	je	.Ltmp644 # Offset: 294
.Ltmp647:
    00000128: 	movslq	%ecx, %rax
    0000012b: 	leaq	(%rax,%rax), %rsi
    0000012f: 	movzwl	(%r15,%rax,2), %eax
    00000134: 	andl	$-0x10, %eax
    00000137: 	addl	%eax, %edx
    00000139: 	leal	0x1(%rcx), %eax
    0000013c: 	cmpl	%eax, %r14d
    0000013f: 	jle	.Ltmp644 # Offset: 319
    00000141: 	movzwl	0x2(%r15,%rsi), %eax
    00000147: 	addl	$0x2, %ecx
    0000014a: 	andl	$-0x10, %eax
    0000014d: 	addl	%eax, %edx
    0000014f: 	cmpl	%ecx, %r14d
    00000152: 	jle	.Ltmp644 # Offset: 338
    00000154: 	movzwl	0x4(%r15,%rsi), %eax
    0000015a: 	andl	$-0x10, %eax
    0000015d: 	addl	%eax, %edx
.Ltmp644:
    0000015f: 	movl	%r10d, %eax
    00000162: 	andl	$-0x10, %eax
    00000165: 	imulw	$0x1f40, %ax, %ax
    0000016a: 	cmpw	%dx, %ax
    0000016d: 	je	.Ltmp648 # Offset: 365
    0000016f: 	movl	current_test(%rip), %edx
    00000175: 	movq	%rbp, %rsi
    00000178: 	movl	$0x1, %edi
    0000017d: 	xorl	%eax, %eax
    0000017f: 	addl	$0x1, %r12d
    00000183: 	callq	__printf_chk@PLT # Offset: 387
    00000188: 	movl	iterations(%rip), %r9d
    0000018f: 	cmpl	%r9d, %r12d
    00000192: 	jge	.Ltmp643 # Offset: 402
    00000194: 	movq	init_value(%rip), %r10
    0000019b: 	movdqa	DATAat0x10fb0(%rip), %xmm2
    000001a3: 	movq	DATAat0x10fb0(%rip), %xmm3
    000001ab: 	jmp	.Ltmp649 # Offset: 427
.Ltmp648:
    000001b0: 	addl	$0x1, %r12d
    000001b4: 	cmpl	%r9d, %r12d
    000001b7: 	jl	.Ltmp649 # Offset: 439
.Ltmp643:
    000001bd: 	callq	clock@PLT # Offset: 445
    000001c2: 	pxor	%xmm0, %xmm0
    000001c6: 	movq	0x8(%rsp), %rdi
    000001cb: 	movq	%rax, end_time(%rip)
    000001d2: 	subq	start_time(%rip), %rax
    000001d9: 	cvtsi2sd	%rax, %xmm0
    000001de: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001e6: 	addq	$0x18, %rsp
    000001ea: 	popq	%rbx
    000001eb: 	popq	%rbp
    000001ec: 	popq	%r12
    000001ee: 	popq	%r13
    000001f0: 	popq	%r14
    000001f2: 	popq	%r15
    000001f4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 500
.Ltmp645:
    000001f9: 	xorl	%eax, %eax
    000001fb: 	xorl	%ecx, %ecx
    000001fd: 	xorl	%edx, %edx
    000001ff: 	jmp	.Ltmp650 # Offset: 511
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs17mask_low_constantIsEEvPT_iPKc"

Binary Function "_Z13test_constantIs26mask_low_by_shift_constantIsEEvPT_iPKc" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0xc920
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0xc920
  Section     : .text
  Orc Section : .local.text._Z13test_constantIs26mask_low_by_shift_constantIsEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r9d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r9d, %r9d
    00000033: 	jle	.Ltmp651 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movl	%r14d, %ebx
    00000040: 	movq	init_value(%rip), %r10
    00000047: 	xorl	%r12d, %r12d
    0000004a: 	movl	%eax, 0x4(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	andl	$-0x8, %ebx
    00000054: 	leaq	DATAat0x10f44(%rip), %rbp
    0000005b: 	shrl	$0x3, %eax
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r15,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp657:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp652 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp653 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp654:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psraw	$0x4, %xmm0
    0000009d: 	psllw	$0x4, %xmm0
    000000a2: 	paddw	%xmm0, %xmm1
    000000a6: 	cmpq	%r13, %rax
    000000a9: 	jne	.Ltmp654 # Offset: 169
    000000ab: 	movdqa	%xmm1, %xmm0
    000000af: 	psrldq	$0x8, %xmm0
    000000b4: 	paddw	%xmm0, %xmm1
    000000b8: 	movdqa	%xmm1, %xmm0
    000000bc: 	psrldq	$0x4, %xmm0
    000000c1: 	paddw	%xmm0, %xmm1
    000000c5: 	movdqa	%xmm1, %xmm0
    000000c9: 	psrldq	$0x2, %xmm0
    000000ce: 	paddw	%xmm0, %xmm1
    000000d2: 	pextrw	$0x0, %xmm1, %edx
    000000d7: 	cmpl	%r14d, %ebx
    000000da: 	je	.Ltmp652 # Offset: 218
    000000dc: 	movl	%ebx, %eax
    000000de: 	movl	%ebx, %ecx
.Ltmp658:
    000000e0: 	movl	%r14d, %esi
    000000e3: 	subl	%eax, %esi
    000000e5: 	leal	-0x1(%rsi), %edi
    000000e8: 	cmpl	$0x2, %edi
    000000eb: 	jbe	.Ltmp655 # Offset: 235
    000000ed: 	movq	(%r15,%rax,2), %xmm0
    000000f3: 	psraw	$0x4, %xmm0
    000000f8: 	psllw	$0x4, %xmm0
    000000fd: 	pextrw	$0x1, %xmm0, %edi
    00000102: 	pextrw	$0x0, %xmm0, %eax
    00000107: 	addl	%edi, %eax
    00000109: 	pextrw	$0x2, %xmm0, %edi
    0000010e: 	addl	%edi, %eax
    00000110: 	pextrw	$0x3, %xmm0, %edi
    00000115: 	addl	%edi, %eax
    00000117: 	addl	%eax, %edx
    00000119: 	movl	%esi, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %ecx
    00000120: 	cmpl	%eax, %esi
    00000122: 	je	.Ltmp652 # Offset: 290
.Ltmp655:
    00000124: 	movslq	%ecx, %rax
    00000127: 	leaq	(%rax,%rax), %rsi
    0000012b: 	movzwl	(%r15,%rax,2), %eax
    00000130: 	andl	$-0x10, %eax
    00000133: 	addl	%eax, %edx
    00000135: 	leal	0x1(%rcx), %eax
    00000138: 	cmpl	%eax, %r14d
    0000013b: 	jle	.Ltmp652 # Offset: 315
    0000013d: 	movzwl	0x2(%r15,%rsi), %eax
    00000143: 	addl	$0x2, %ecx
    00000146: 	andl	$-0x10, %eax
    00000149: 	addl	%eax, %edx
    0000014b: 	cmpl	%ecx, %r14d
    0000014e: 	jle	.Ltmp652 # Offset: 334
    00000150: 	movzwl	0x4(%r15,%rsi), %eax
    00000156: 	andl	$-0x10, %eax
    00000159: 	addl	%eax, %edx
.Ltmp652:
    0000015b: 	movl	%r10d, %eax
    0000015e: 	andl	$-0x10, %eax
    00000161: 	imulw	$0x1f40, %ax, %ax
    00000166: 	cmpw	%dx, %ax
    00000169: 	je	.Ltmp656 # Offset: 361
    0000016b: 	movl	current_test(%rip), %edx
    00000171: 	movq	%rbp, %rsi
    00000174: 	movl	$0x1, %edi
    00000179: 	xorl	%eax, %eax
    0000017b: 	addl	$0x1, %r12d
    0000017f: 	callq	__printf_chk@PLT # Offset: 383
    00000184: 	movl	iterations(%rip), %r9d
    0000018b: 	cmpl	%r9d, %r12d
    0000018e: 	jge	.Ltmp651 # Offset: 398
    00000190: 	movq	init_value(%rip), %r10
    00000197: 	jmp	.Ltmp657 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp656:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%r9d, %r12d
    000001a7: 	jl	.Ltmp657 # Offset: 423
.Ltmp651:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp653:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp658 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIs26mask_low_by_shift_constantIsEEvPT_iPKc"

Binary Function "_Z13test_constantIj17mask_low_constantIjEEvPT_iPKc" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0xcb20
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0xcb20
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj17mask_low_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp659 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	xorl	%r13d, %r13d
    00000041: 	movq	init_value(%rip), %rdi
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	movdqa	DATAat0x10fc0(%rip), %xmm2
    00000057: 	andl	$-0x4, %ebp
    0000005a: 	shrl	$0x2, %eax
    0000005d: 	leaq	DATAat0x10f44(%rip), %r12
    00000064: 	subl	$0x1, %eax
    00000067: 	shlq	$0x4, %rax
    0000006b: 	leaq	0x10(%r15,%rax), %rbx
.Ltmp664:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp660 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp661 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp662:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddd	%xmm0, %xmm1
    000000a0: 	cmpq	%rbx, %rax
    000000a3: 	jne	.Ltmp662 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movl	%ebp, %edx
    000000ab: 	psrldq	$0x8, %xmm0
    000000b0: 	paddd	%xmm0, %xmm1
    000000b4: 	movdqa	%xmm1, %xmm0
    000000b8: 	psrldq	$0x4, %xmm0
    000000bd: 	paddd	%xmm0, %xmm1
    000000c1: 	movd	%xmm1, %eax
    000000c5: 	cmpl	%r14d, %ebp
    000000c8: 	je	.Ltmp660 # Offset: 200
.Ltmp665:
    000000ca: 	movslq	%edx, %r9
    000000cd: 	leaq	(,%r9,4), %r10
    000000d5: 	movl	(%r15,%r9,4), %r9d
    000000d9: 	andl	$-0x10, %r9d
    000000dd: 	addl	%r9d, %eax
    000000e0: 	leal	0x1(%rdx), %r9d
    000000e4: 	cmpl	%r9d, %r14d
    000000e7: 	jle	.Ltmp660 # Offset: 231
    000000e9: 	movl	0x4(%r15,%r10), %r9d
    000000ee: 	addl	$0x2, %edx
    000000f1: 	andl	$-0x10, %r9d
    000000f5: 	addl	%r9d, %eax
    000000f8: 	cmpl	%edx, %r14d
    000000fb: 	jle	.Ltmp660 # Offset: 251
    000000fd: 	movl	0x8(%r15,%r10), %edx
    00000102: 	andl	$-0x10, %edx
    00000105: 	addl	%edx, %eax
.Ltmp660:
    00000107: 	movl	%edi, %edx
    00000109: 	andl	$-0x10, %edx
    0000010c: 	imull	$0x1f40, %edx, %edx
    00000112: 	cmpl	%eax, %edx
    00000114: 	je	.Ltmp663 # Offset: 276
    00000116: 	movl	current_test(%rip), %edx
    0000011c: 	movq	%r12, %rsi
    0000011f: 	movl	$0x1, %edi
    00000124: 	xorl	%eax, %eax
    00000126: 	addl	$0x1, %r13d
    0000012a: 	callq	__printf_chk@PLT # Offset: 298
    0000012f: 	movl	iterations(%rip), %esi
    00000135: 	cmpl	%esi, %r13d
    00000138: 	jge	.Ltmp659 # Offset: 312
    0000013a: 	movq	init_value(%rip), %rdi
    00000141: 	movdqa	DATAat0x10fc0(%rip), %xmm2
    00000149: 	jmp	.Ltmp664 # Offset: 329
    0000014e: 	nop # Size: 2
.Ltmp663:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp664 # Offset: 343
.Ltmp659:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp661:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp665 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj17mask_low_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIj26mask_low_by_shift_constantIjEEvPT_iPKc" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0xccd0
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0xccd0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj26mask_low_by_shift_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp666 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	xorl	%r13d, %r13d
    00000041: 	movq	init_value(%rip), %rdi
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	movdqa	DATAat0x10fc0(%rip), %xmm2
    00000057: 	andl	$-0x4, %ebp
    0000005a: 	shrl	$0x2, %eax
    0000005d: 	leaq	DATAat0x10f44(%rip), %r12
    00000064: 	subl	$0x1, %eax
    00000067: 	shlq	$0x4, %rax
    0000006b: 	leaq	0x10(%r15,%rax), %rbx
.Ltmp671:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp667 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp668 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp669:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddd	%xmm0, %xmm1
    000000a0: 	cmpq	%rbx, %rax
    000000a3: 	jne	.Ltmp669 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movl	%ebp, %edx
    000000ab: 	psrldq	$0x8, %xmm0
    000000b0: 	paddd	%xmm0, %xmm1
    000000b4: 	movdqa	%xmm1, %xmm0
    000000b8: 	psrldq	$0x4, %xmm0
    000000bd: 	paddd	%xmm0, %xmm1
    000000c1: 	movd	%xmm1, %eax
    000000c5: 	cmpl	%r14d, %ebp
    000000c8: 	je	.Ltmp667 # Offset: 200
.Ltmp672:
    000000ca: 	movslq	%edx, %r9
    000000cd: 	leaq	(,%r9,4), %r10
    000000d5: 	movl	(%r15,%r9,4), %r9d
    000000d9: 	andl	$-0x10, %r9d
    000000dd: 	addl	%r9d, %eax
    000000e0: 	leal	0x1(%rdx), %r9d
    000000e4: 	cmpl	%r9d, %r14d
    000000e7: 	jle	.Ltmp667 # Offset: 231
    000000e9: 	movl	0x4(%r15,%r10), %r9d
    000000ee: 	addl	$0x2, %edx
    000000f1: 	andl	$-0x10, %r9d
    000000f5: 	addl	%r9d, %eax
    000000f8: 	cmpl	%edx, %r14d
    000000fb: 	jle	.Ltmp667 # Offset: 251
    000000fd: 	movl	0x8(%r15,%r10), %edx
    00000102: 	andl	$-0x10, %edx
    00000105: 	addl	%edx, %eax
.Ltmp667:
    00000107: 	movl	%edi, %edx
    00000109: 	andl	$-0x10, %edx
    0000010c: 	imull	$0x1f40, %edx, %edx
    00000112: 	cmpl	%eax, %edx
    00000114: 	je	.Ltmp670 # Offset: 276
    00000116: 	movl	current_test(%rip), %edx
    0000011c: 	movq	%r12, %rsi
    0000011f: 	movl	$0x1, %edi
    00000124: 	xorl	%eax, %eax
    00000126: 	addl	$0x1, %r13d
    0000012a: 	callq	__printf_chk@PLT # Offset: 298
    0000012f: 	movl	iterations(%rip), %esi
    00000135: 	cmpl	%esi, %r13d
    00000138: 	jge	.Ltmp666 # Offset: 312
    0000013a: 	movq	init_value(%rip), %rdi
    00000141: 	movdqa	DATAat0x10fc0(%rip), %xmm2
    00000149: 	jmp	.Ltmp671 # Offset: 329
    0000014e: 	nop # Size: 2
.Ltmp670:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp671 # Offset: 343
.Ltmp666:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp668:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp672 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj26mask_low_by_shift_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIi17mask_low_constantIiEEvPT_iPKc" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0xce80
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0xce80
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi17mask_low_constantIiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp673 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	xorl	%r13d, %r13d
    00000041: 	movq	init_value(%rip), %rdi
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	movdqa	DATAat0x10fc0(%rip), %xmm2
    00000057: 	andl	$-0x4, %ebp
    0000005a: 	shrl	$0x2, %eax
    0000005d: 	leaq	DATAat0x10f44(%rip), %r12
    00000064: 	subl	$0x1, %eax
    00000067: 	shlq	$0x4, %rax
    0000006b: 	leaq	0x10(%r15,%rax), %rbx
.Ltmp678:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp674 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp675 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp676:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddd	%xmm0, %xmm1
    000000a0: 	cmpq	%rbx, %rax
    000000a3: 	jne	.Ltmp676 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movl	%ebp, %edx
    000000ab: 	psrldq	$0x8, %xmm0
    000000b0: 	paddd	%xmm0, %xmm1
    000000b4: 	movdqa	%xmm1, %xmm0
    000000b8: 	psrldq	$0x4, %xmm0
    000000bd: 	paddd	%xmm0, %xmm1
    000000c1: 	movd	%xmm1, %eax
    000000c5: 	cmpl	%r14d, %ebp
    000000c8: 	je	.Ltmp674 # Offset: 200
.Ltmp679:
    000000ca: 	movslq	%edx, %r9
    000000cd: 	leaq	(,%r9,4), %r10
    000000d5: 	movl	(%r15,%r9,4), %r9d
    000000d9: 	andl	$-0x10, %r9d
    000000dd: 	addl	%r9d, %eax
    000000e0: 	leal	0x1(%rdx), %r9d
    000000e4: 	cmpl	%r9d, %r14d
    000000e7: 	jle	.Ltmp674 # Offset: 231
    000000e9: 	movl	0x4(%r15,%r10), %r9d
    000000ee: 	addl	$0x2, %edx
    000000f1: 	andl	$-0x10, %r9d
    000000f5: 	addl	%r9d, %eax
    000000f8: 	cmpl	%edx, %r14d
    000000fb: 	jle	.Ltmp674 # Offset: 251
    000000fd: 	movl	0x8(%r15,%r10), %edx
    00000102: 	andl	$-0x10, %edx
    00000105: 	addl	%edx, %eax
.Ltmp674:
    00000107: 	movl	%edi, %edx
    00000109: 	andl	$-0x10, %edx
    0000010c: 	imull	$0x1f40, %edx, %edx
    00000112: 	cmpl	%eax, %edx
    00000114: 	je	.Ltmp677 # Offset: 276
    00000116: 	movl	current_test(%rip), %edx
    0000011c: 	movq	%r12, %rsi
    0000011f: 	movl	$0x1, %edi
    00000124: 	xorl	%eax, %eax
    00000126: 	addl	$0x1, %r13d
    0000012a: 	callq	__printf_chk@PLT # Offset: 298
    0000012f: 	movl	iterations(%rip), %esi
    00000135: 	cmpl	%esi, %r13d
    00000138: 	jge	.Ltmp673 # Offset: 312
    0000013a: 	movq	init_value(%rip), %rdi
    00000141: 	movdqa	DATAat0x10fc0(%rip), %xmm2
    00000149: 	jmp	.Ltmp678 # Offset: 329
    0000014e: 	nop # Size: 2
.Ltmp677:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp678 # Offset: 343
.Ltmp673:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp675:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp679 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi17mask_low_constantIiEEvPT_iPKc"

Binary Function "_Z13test_constantIi26mask_low_by_shift_constantIiEEvPT_iPKc" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0xd030
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0xd030
  Section     : .text
  Orc Section : .local.text._Z13test_constantIi26mask_low_by_shift_constantIiEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp680 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	xorl	%r13d, %r13d
    00000041: 	movq	init_value(%rip), %rdi
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	movdqa	DATAat0x10fc0(%rip), %xmm2
    00000057: 	andl	$-0x4, %ebp
    0000005a: 	shrl	$0x2, %eax
    0000005d: 	leaq	DATAat0x10f44(%rip), %r12
    00000064: 	subl	$0x1, %eax
    00000067: 	shlq	$0x4, %rax
    0000006b: 	leaq	0x10(%r15,%rax), %rbx
.Ltmp685:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp681 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp682 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp683:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddd	%xmm0, %xmm1
    000000a0: 	cmpq	%rbx, %rax
    000000a3: 	jne	.Ltmp683 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movl	%ebp, %edx
    000000ab: 	psrldq	$0x8, %xmm0
    000000b0: 	paddd	%xmm0, %xmm1
    000000b4: 	movdqa	%xmm1, %xmm0
    000000b8: 	psrldq	$0x4, %xmm0
    000000bd: 	paddd	%xmm0, %xmm1
    000000c1: 	movd	%xmm1, %eax
    000000c5: 	cmpl	%r14d, %ebp
    000000c8: 	je	.Ltmp681 # Offset: 200
.Ltmp686:
    000000ca: 	movslq	%edx, %r9
    000000cd: 	leaq	(,%r9,4), %r10
    000000d5: 	movl	(%r15,%r9,4), %r9d
    000000d9: 	andl	$-0x10, %r9d
    000000dd: 	addl	%r9d, %eax
    000000e0: 	leal	0x1(%rdx), %r9d
    000000e4: 	cmpl	%r9d, %r14d
    000000e7: 	jle	.Ltmp681 # Offset: 231
    000000e9: 	movl	0x4(%r15,%r10), %r9d
    000000ee: 	addl	$0x2, %edx
    000000f1: 	andl	$-0x10, %r9d
    000000f5: 	addl	%r9d, %eax
    000000f8: 	cmpl	%edx, %r14d
    000000fb: 	jle	.Ltmp681 # Offset: 251
    000000fd: 	movl	0x8(%r15,%r10), %edx
    00000102: 	andl	$-0x10, %edx
    00000105: 	addl	%edx, %eax
.Ltmp681:
    00000107: 	movl	%edi, %edx
    00000109: 	andl	$-0x10, %edx
    0000010c: 	imull	$0x1f40, %edx, %edx
    00000112: 	cmpl	%eax, %edx
    00000114: 	je	.Ltmp684 # Offset: 276
    00000116: 	movl	current_test(%rip), %edx
    0000011c: 	movq	%r12, %rsi
    0000011f: 	movl	$0x1, %edi
    00000124: 	xorl	%eax, %eax
    00000126: 	addl	$0x1, %r13d
    0000012a: 	callq	__printf_chk@PLT # Offset: 298
    0000012f: 	movl	iterations(%rip), %esi
    00000135: 	cmpl	%esi, %r13d
    00000138: 	jge	.Ltmp680 # Offset: 312
    0000013a: 	movq	init_value(%rip), %rdi
    00000141: 	movdqa	DATAat0x10fc0(%rip), %xmm2
    00000149: 	jmp	.Ltmp685 # Offset: 329
    0000014e: 	nop # Size: 2
.Ltmp684:
    00000150: 	addl	$0x1, %r13d
    00000154: 	cmpl	%esi, %r13d
    00000157: 	jl	.Ltmp685 # Offset: 343
.Ltmp680:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	0x8(%rsp), %rdi
    0000016b: 	movq	%rax, end_time(%rip)
    00000172: 	subq	start_time(%rip), %rax
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
.Ltmp682:
    00000199: 	xorl	%edx, %edx
    0000019b: 	xorl	%eax, %eax
    0000019d: 	jmp	.Ltmp686 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIi26mask_low_by_shift_constantIiEEvPT_iPKc"

Binary Function "_Z13test_constantIm17mask_low_constantImEEvPT_iPKc" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0xd1e0
  Size        : 0x16a
  MaxSize     : 0x170
  Offset      : 0xd1e0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm17mask_low_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp687 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	movdqa	DATAat0x10fd0(%rip), %xmm2
    00000051: 	andl	$-0x2, %ebp
    00000054: 	leaq	DATAat0x10f44(%rip), %rbx
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r12,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp692:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp688 # Offset: 117
    00000077: 	cmpl	$0x1, %r14d
    0000007b: 	je	.Ltmp689 # Offset: 123
    00000081: 	movq	%r12, %rax
    00000084: 	pxor	%xmm1, %xmm1
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp690:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddq	%xmm0, %xmm1
    000000a0: 	cmpq	%rax, %r13
    000000a3: 	jne	.Ltmp690 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movslq	%ebp, %rdx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddq	%xmm0, %xmm1
    000000b5: 	movq	%xmm1, %rax
    000000ba: 	cmpl	%r14d, %ebp
    000000bd: 	je	.Ltmp688 # Offset: 189
.Ltmp693:
    000000bf: 	movq	(%r12,%rdx,8), %rdx
    000000c3: 	andq	$-0x10, %rdx
    000000c7: 	addq	%rdx, %rax
.Ltmp688:
    000000ca: 	movq	%rdi, %rdx
    000000cd: 	andq	$-0x10, %rdx
    000000d1: 	imulq	$0x1f40, %rdx, %rdx
    000000d8: 	cmpq	%rax, %rdx
    000000db: 	je	.Ltmp691 # Offset: 219
    000000dd: 	movl	current_test(%rip), %edx
    000000e3: 	movq	%rbx, %rsi
    000000e6: 	movl	$0x1, %edi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	addl	$0x1, %r15d
    000000f1: 	callq	__printf_chk@PLT # Offset: 241
    000000f6: 	movl	iterations(%rip), %esi
    000000fc: 	cmpl	%esi, %r15d
    000000ff: 	jge	.Ltmp687 # Offset: 255
    00000101: 	movq	init_value(%rip), %rdi
    00000108: 	movdqa	DATAat0x10fd0(%rip), %xmm2
    00000110: 	jmp	.Ltmp692 # Offset: 272
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp691:
    00000118: 	addl	$0x1, %r15d
    0000011c: 	cmpl	%esi, %r15d
    0000011f: 	jl	.Ltmp692 # Offset: 287
.Ltmp687:
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	pxor	%xmm0, %xmm0
    0000012e: 	movq	0x8(%rsp), %rdi
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	subq	start_time(%rip), %rax
    00000141: 	cvtsi2sd	%rax, %xmm0
    00000146: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000014e: 	addq	$0x18, %rsp
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	popq	%r12
    00000156: 	popq	%r13
    00000158: 	popq	%r14
    0000015a: 	popq	%r15
    0000015c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 348
.Ltmp689:
    00000161: 	xorl	%edx, %edx
    00000163: 	xorl	%eax, %eax
    00000165: 	jmp	.Ltmp693 # Offset: 357
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm17mask_low_constantImEEvPT_iPKc"

Binary Function "_Z13test_constantIm26mask_low_by_shift_constantImEEvPT_iPKc" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0xd350
  Size        : 0x16a
  MaxSize     : 0x170
  Offset      : 0xd350
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm26mask_low_by_shift_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp694 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	movdqa	DATAat0x10fd0(%rip), %xmm2
    00000051: 	andl	$-0x2, %ebp
    00000054: 	leaq	DATAat0x10f44(%rip), %rbx
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r12,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp699:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp695 # Offset: 117
    00000077: 	cmpl	$0x1, %r14d
    0000007b: 	je	.Ltmp696 # Offset: 123
    00000081: 	movq	%r12, %rax
    00000084: 	pxor	%xmm1, %xmm1
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp697:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddq	%xmm0, %xmm1
    000000a0: 	cmpq	%rax, %r13
    000000a3: 	jne	.Ltmp697 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movslq	%ebp, %rdx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddq	%xmm0, %xmm1
    000000b5: 	movq	%xmm1, %rax
    000000ba: 	cmpl	%r14d, %ebp
    000000bd: 	je	.Ltmp695 # Offset: 189
.Ltmp700:
    000000bf: 	movq	(%r12,%rdx,8), %rdx
    000000c3: 	andq	$-0x10, %rdx
    000000c7: 	addq	%rdx, %rax
.Ltmp695:
    000000ca: 	movq	%rdi, %rdx
    000000cd: 	andq	$-0x10, %rdx
    000000d1: 	imulq	$0x1f40, %rdx, %rdx
    000000d8: 	cmpq	%rax, %rdx
    000000db: 	je	.Ltmp698 # Offset: 219
    000000dd: 	movl	current_test(%rip), %edx
    000000e3: 	movq	%rbx, %rsi
    000000e6: 	movl	$0x1, %edi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	addl	$0x1, %r15d
    000000f1: 	callq	__printf_chk@PLT # Offset: 241
    000000f6: 	movl	iterations(%rip), %esi
    000000fc: 	cmpl	%esi, %r15d
    000000ff: 	jge	.Ltmp694 # Offset: 255
    00000101: 	movq	init_value(%rip), %rdi
    00000108: 	movdqa	DATAat0x10fd0(%rip), %xmm2
    00000110: 	jmp	.Ltmp699 # Offset: 272
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp698:
    00000118: 	addl	$0x1, %r15d
    0000011c: 	cmpl	%esi, %r15d
    0000011f: 	jl	.Ltmp699 # Offset: 287
.Ltmp694:
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	pxor	%xmm0, %xmm0
    0000012e: 	movq	0x8(%rsp), %rdi
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	subq	start_time(%rip), %rax
    00000141: 	cvtsi2sd	%rax, %xmm0
    00000146: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000014e: 	addq	$0x18, %rsp
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	popq	%r12
    00000156: 	popq	%r13
    00000158: 	popq	%r14
    0000015a: 	popq	%r15
    0000015c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 348
.Ltmp696:
    00000161: 	xorl	%edx, %edx
    00000163: 	xorl	%eax, %eax
    00000165: 	jmp	.Ltmp700 # Offset: 357
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm26mask_low_by_shift_constantImEEvPT_iPKc"

Binary Function "_Z13test_constantIl17mask_low_constantIlEEvPT_iPKc" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0xd4c0
  Size        : 0x16a
  MaxSize     : 0x170
  Offset      : 0xd4c0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl17mask_low_constantIlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp701 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	movdqa	DATAat0x10fd0(%rip), %xmm2
    00000051: 	andl	$-0x2, %ebp
    00000054: 	leaq	DATAat0x10f44(%rip), %rbx
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r12,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp706:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp702 # Offset: 117
    00000077: 	cmpl	$0x1, %r14d
    0000007b: 	je	.Ltmp703 # Offset: 123
    00000081: 	movq	%r12, %rax
    00000084: 	pxor	%xmm1, %xmm1
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp704:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddq	%xmm0, %xmm1
    000000a0: 	cmpq	%rax, %r13
    000000a3: 	jne	.Ltmp704 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movslq	%ebp, %rdx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddq	%xmm0, %xmm1
    000000b5: 	movq	%xmm1, %rax
    000000ba: 	cmpl	%r14d, %ebp
    000000bd: 	je	.Ltmp702 # Offset: 189
.Ltmp707:
    000000bf: 	movq	(%r12,%rdx,8), %rdx
    000000c3: 	andq	$-0x10, %rdx
    000000c7: 	addq	%rdx, %rax
.Ltmp702:
    000000ca: 	movq	%rdi, %rdx
    000000cd: 	andq	$-0x10, %rdx
    000000d1: 	imulq	$0x1f40, %rdx, %rdx
    000000d8: 	cmpq	%rax, %rdx
    000000db: 	je	.Ltmp705 # Offset: 219
    000000dd: 	movl	current_test(%rip), %edx
    000000e3: 	movq	%rbx, %rsi
    000000e6: 	movl	$0x1, %edi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	addl	$0x1, %r15d
    000000f1: 	callq	__printf_chk@PLT # Offset: 241
    000000f6: 	movl	iterations(%rip), %esi
    000000fc: 	cmpl	%esi, %r15d
    000000ff: 	jge	.Ltmp701 # Offset: 255
    00000101: 	movq	init_value(%rip), %rdi
    00000108: 	movdqa	DATAat0x10fd0(%rip), %xmm2
    00000110: 	jmp	.Ltmp706 # Offset: 272
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp705:
    00000118: 	addl	$0x1, %r15d
    0000011c: 	cmpl	%esi, %r15d
    0000011f: 	jl	.Ltmp706 # Offset: 287
.Ltmp701:
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	pxor	%xmm0, %xmm0
    0000012e: 	movq	0x8(%rsp), %rdi
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	subq	start_time(%rip), %rax
    00000141: 	cvtsi2sd	%rax, %xmm0
    00000146: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000014e: 	addq	$0x18, %rsp
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	popq	%r12
    00000156: 	popq	%r13
    00000158: 	popq	%r14
    0000015a: 	popq	%r15
    0000015c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 348
.Ltmp703:
    00000161: 	xorl	%edx, %edx
    00000163: 	xorl	%eax, %eax
    00000165: 	jmp	.Ltmp707 # Offset: 357
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl17mask_low_constantIlEEvPT_iPKc"

Binary Function "_Z13test_constantIl26mask_low_by_shift_constantIlEEvPT_iPKc" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0xd630
  Size        : 0x16a
  MaxSize     : 0x170
  Offset      : 0xd630
  Section     : .text
  Orc Section : .local.text._Z13test_constantIl26mask_low_by_shift_constantIlEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp708 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movq	init_value(%rip), %rdi
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	movdqa	DATAat0x10fd0(%rip), %xmm2
    00000051: 	andl	$-0x2, %ebp
    00000054: 	leaq	DATAat0x10f44(%rip), %rbx
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r12,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp713:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp709 # Offset: 117
    00000077: 	cmpl	$0x1, %r14d
    0000007b: 	je	.Ltmp710 # Offset: 123
    00000081: 	movq	%r12, %rax
    00000084: 	pxor	%xmm1, %xmm1
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp711:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddq	%xmm0, %xmm1
    000000a0: 	cmpq	%rax, %r13
    000000a3: 	jne	.Ltmp711 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movslq	%ebp, %rdx
    000000ac: 	psrldq	$0x8, %xmm0
    000000b1: 	paddq	%xmm0, %xmm1
    000000b5: 	movq	%xmm1, %rax
    000000ba: 	cmpl	%r14d, %ebp
    000000bd: 	je	.Ltmp709 # Offset: 189
.Ltmp714:
    000000bf: 	movq	(%r12,%rdx,8), %rdx
    000000c3: 	andq	$-0x10, %rdx
    000000c7: 	addq	%rdx, %rax
.Ltmp709:
    000000ca: 	movq	%rdi, %rdx
    000000cd: 	andq	$-0x10, %rdx
    000000d1: 	imulq	$0x1f40, %rdx, %rdx
    000000d8: 	cmpq	%rax, %rdx
    000000db: 	je	.Ltmp712 # Offset: 219
    000000dd: 	movl	current_test(%rip), %edx
    000000e3: 	movq	%rbx, %rsi
    000000e6: 	movl	$0x1, %edi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	addl	$0x1, %r15d
    000000f1: 	callq	__printf_chk@PLT # Offset: 241
    000000f6: 	movl	iterations(%rip), %esi
    000000fc: 	cmpl	%esi, %r15d
    000000ff: 	jge	.Ltmp708 # Offset: 255
    00000101: 	movq	init_value(%rip), %rdi
    00000108: 	movdqa	DATAat0x10fd0(%rip), %xmm2
    00000110: 	jmp	.Ltmp713 # Offset: 272
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp712:
    00000118: 	addl	$0x1, %r15d
    0000011c: 	cmpl	%esi, %r15d
    0000011f: 	jl	.Ltmp713 # Offset: 287
.Ltmp708:
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	pxor	%xmm0, %xmm0
    0000012e: 	movq	0x8(%rsp), %rdi
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	subq	start_time(%rip), %rax
    00000141: 	cvtsi2sd	%rax, %xmm0
    00000146: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000014e: 	addq	$0x18, %rsp
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	popq	%r12
    00000156: 	popq	%r13
    00000158: 	popq	%r14
    0000015a: 	popq	%r15
    0000015c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 348
.Ltmp710:
    00000161: 	xorl	%edx, %edx
    00000163: 	xorl	%eax, %eax
    00000165: 	jmp	.Ltmp714 # Offset: 357
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIl26mask_low_by_shift_constantIlEEvPT_iPKc"

Binary Function "_Z14test_variable1Ih26mask_low_by_shift_variableIhEEvPT_iS2_PKc" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0xd7a0
  Size        : 0x372
  MaxSize     : 0x380
  Offset      : 0xd7a0
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ih26mask_low_by_shift_variableIhEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%edx, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %edi
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%edi, %edi
    00000033: 	jle	.Ltmp715 # Offset: 51
    00000039: 	leal	-0x1(%rbx), %eax
    0000003c: 	movl	%ebx, %ebp
    0000003e: 	movq	init_value(%rip), %r10
    00000045: 	movzbl	%r12b, %ecx
    00000049: 	movl	%eax, 0x8(%rsp)
    0000004d: 	movl	%ebx, %eax
    0000004f: 	movdqa	DATAat0x10fa0(%rip), %xmm7
    00000057: 	andl	$-0x10, %ebp
    0000005a: 	shrl	$0x4, %eax
    0000005d: 	xorl	%r13d, %r13d
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%r14,%rax), %r15
    0000006c: 	movzbl	%r12b, %eax
    00000070: 	leaq	DATAat0x10f44(%rip), %r12
    00000077: 	movq	%rax, %xmm3
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp720:
    00000080: 	xorl	%eax, %eax
    00000082: 	testl	%ebx, %ebx
    00000084: 	jle	.Ltmp716 # Offset: 132
    0000008a: 	cmpl	$0xe, 0x8(%rsp)
    0000008f: 	jbe	.Ltmp717 # Offset: 143
    00000095: 	pxor	%xmm5, %xmm5
    00000099: 	movq	%r14, %rax
    0000009c: 	pxor	%xmm4, %xmm4
    000000a0: 	movdqa	%xmm5, %xmm6
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp718:
    000000a8: 	movdqu	(%rax), %xmm2
    000000ac: 	addq	$0x10, %rax
    000000b0: 	movdqa	%xmm2, %xmm1
    000000b4: 	punpckhbw	%xmm6, %xmm2
    000000b8: 	punpcklbw	%xmm6, %xmm1
    000000bc: 	movdqa	%xmm1, %xmm0
    000000c0: 	punpckhwd	%xmm4, %xmm1
    000000c4: 	punpcklwd	%xmm4, %xmm0
    000000c8: 	psrad	%xmm3, %xmm1
    000000cc: 	psrad	%xmm3, %xmm0
    000000d0: 	pslld	%xmm3, %xmm1
    000000d4: 	pslld	%xmm3, %xmm0
    000000d8: 	movdqa	%xmm0, %xmm8
    000000dd: 	punpcklwd	%xmm1, %xmm0
    000000e1: 	punpckhwd	%xmm1, %xmm8
    000000e6: 	movdqa	%xmm0, %xmm1
    000000ea: 	punpckhwd	%xmm8, %xmm1
    000000ef: 	punpcklwd	%xmm8, %xmm0
    000000f4: 	punpcklwd	%xmm1, %xmm0
    000000f8: 	movdqa	%xmm2, %xmm1
    000000fc: 	punpckhwd	%xmm4, %xmm2
    00000100: 	punpcklwd	%xmm4, %xmm1
    00000104: 	psrad	%xmm3, %xmm2
    00000108: 	pand	%xmm7, %xmm0
    0000010c: 	psrad	%xmm3, %xmm1
    00000110: 	pslld	%xmm3, %xmm2
    00000114: 	pslld	%xmm3, %xmm1
    00000118: 	movdqa	%xmm1, %xmm8
    0000011d: 	punpcklwd	%xmm2, %xmm1
    00000121: 	punpckhwd	%xmm2, %xmm8
    00000126: 	movdqa	%xmm1, %xmm2
    0000012a: 	punpckhwd	%xmm8, %xmm2
    0000012f: 	punpcklwd	%xmm8, %xmm1
    00000134: 	punpcklwd	%xmm2, %xmm1
    00000138: 	pand	%xmm7, %xmm1
    0000013c: 	packuswb	%xmm1, %xmm0
    00000140: 	paddb	%xmm0, %xmm5
    00000144: 	cmpq	%r15, %rax
    00000147: 	jne	.Ltmp718 # Offset: 327
    0000014d: 	movdqa	%xmm5, %xmm0
    00000151: 	psrldq	$0x8, %xmm0
    00000156: 	paddb	%xmm0, %xmm5
    0000015a: 	psadbw	%xmm6, %xmm5
    0000015e: 	movd	%xmm5, %eax
    00000162: 	cmpl	%ebx, %ebp
    00000164: 	je	.Ltmp716 # Offset: 356
    0000016a: 	movl	%ebp, %edx
.Ltmp721:
    0000016c: 	movslq	%edx, %rsi
    0000016f: 	movzbl	(%r14,%rsi), %esi
    00000174: 	sarl	%cl, %esi
    00000176: 	shll	%cl, %esi
    00000178: 	addl	%esi, %eax
    0000017a: 	leal	0x1(%rdx), %esi
    0000017d: 	cmpl	%esi, %ebx
    0000017f: 	jle	.Ltmp716 # Offset: 383
    00000185: 	movslq	%esi, %rsi
    00000188: 	movzbl	(%r14,%rsi), %esi
    0000018d: 	sarl	%cl, %esi
    0000018f: 	shll	%cl, %esi
    00000191: 	addl	%esi, %eax
    00000193: 	leal	0x2(%rdx), %esi
    00000196: 	cmpl	%esi, %ebx
    00000198: 	jle	.Ltmp716 # Offset: 408
    0000019e: 	movslq	%esi, %rsi
    000001a1: 	movzbl	(%r14,%rsi), %esi
    000001a6: 	sarl	%cl, %esi
    000001a8: 	shll	%cl, %esi
    000001aa: 	addl	%esi, %eax
    000001ac: 	leal	0x3(%rdx), %esi
    000001af: 	cmpl	%esi, %ebx
    000001b1: 	jle	.Ltmp716 # Offset: 433
    000001b7: 	movslq	%esi, %rsi
    000001ba: 	movzbl	(%r14,%rsi), %esi
    000001bf: 	sarl	%cl, %esi
    000001c1: 	shll	%cl, %esi
    000001c3: 	addl	%esi, %eax
    000001c5: 	leal	0x4(%rdx), %esi
    000001c8: 	cmpl	%esi, %ebx
    000001ca: 	jle	.Ltmp716 # Offset: 458
    000001d0: 	movslq	%esi, %rsi
    000001d3: 	movzbl	(%r14,%rsi), %esi
    000001d8: 	sarl	%cl, %esi
    000001da: 	shll	%cl, %esi
    000001dc: 	addl	%esi, %eax
    000001de: 	leal	0x5(%rdx), %esi
    000001e1: 	cmpl	%esi, %ebx
    000001e3: 	jle	.Ltmp716 # Offset: 483
    000001e9: 	movslq	%esi, %rsi
    000001ec: 	movzbl	(%r14,%rsi), %esi
    000001f1: 	sarl	%cl, %esi
    000001f3: 	shll	%cl, %esi
    000001f5: 	addl	%esi, %eax
    000001f7: 	leal	0x6(%rdx), %esi
    000001fa: 	cmpl	%esi, %ebx
    000001fc: 	jle	.Ltmp716 # Offset: 508
    00000202: 	movslq	%esi, %rsi
    00000205: 	movzbl	(%r14,%rsi), %esi
    0000020a: 	sarl	%cl, %esi
    0000020c: 	shll	%cl, %esi
    0000020e: 	addl	%esi, %eax
    00000210: 	leal	0x7(%rdx), %esi
    00000213: 	cmpl	%esi, %ebx
    00000215: 	jle	.Ltmp716 # Offset: 533
    0000021b: 	movslq	%esi, %rsi
    0000021e: 	movzbl	(%r14,%rsi), %esi
    00000223: 	sarl	%cl, %esi
    00000225: 	shll	%cl, %esi
    00000227: 	addl	%esi, %eax
    00000229: 	leal	0x8(%rdx), %esi
    0000022c: 	cmpl	%esi, %ebx
    0000022e: 	jle	.Ltmp716 # Offset: 558
    00000234: 	movslq	%esi, %rsi
    00000237: 	movzbl	(%r14,%rsi), %esi
    0000023c: 	sarl	%cl, %esi
    0000023e: 	shll	%cl, %esi
    00000240: 	addl	%esi, %eax
    00000242: 	leal	0x9(%rdx), %esi
    00000245: 	cmpl	%esi, %ebx
    00000247: 	jle	.Ltmp716 # Offset: 583
    00000249: 	movslq	%esi, %rsi
    0000024c: 	movzbl	(%r14,%rsi), %esi
    00000251: 	sarl	%cl, %esi
    00000253: 	shll	%cl, %esi
    00000255: 	addl	%esi, %eax
    00000257: 	leal	0xa(%rdx), %esi
    0000025a: 	cmpl	%esi, %ebx
    0000025c: 	jle	.Ltmp716 # Offset: 604
    0000025e: 	movslq	%esi, %rsi
    00000261: 	movzbl	(%r14,%rsi), %esi
    00000266: 	sarl	%cl, %esi
    00000268: 	shll	%cl, %esi
    0000026a: 	addl	%esi, %eax
    0000026c: 	leal	0xb(%rdx), %esi
    0000026f: 	cmpl	%esi, %ebx
    00000271: 	jle	.Ltmp716 # Offset: 625
    00000273: 	movslq	%esi, %rsi
    00000276: 	movzbl	(%r14,%rsi), %esi
    0000027b: 	sarl	%cl, %esi
    0000027d: 	shll	%cl, %esi
    0000027f: 	addl	%esi, %eax
    00000281: 	leal	0xc(%rdx), %esi
    00000284: 	cmpl	%esi, %ebx
    00000286: 	jle	.Ltmp716 # Offset: 646
    00000288: 	movslq	%esi, %rsi
    0000028b: 	movzbl	(%r14,%rsi), %esi
    00000290: 	sarl	%cl, %esi
    00000292: 	shll	%cl, %esi
    00000294: 	addl	%esi, %eax
    00000296: 	leal	0xd(%rdx), %esi
    00000299: 	cmpl	%esi, %ebx
    0000029b: 	jle	.Ltmp716 # Offset: 667
    0000029d: 	movslq	%esi, %rsi
    000002a0: 	addl	$0xe, %edx
    000002a3: 	movzbl	(%r14,%rsi), %esi
    000002a8: 	sarl	%cl, %esi
    000002aa: 	shll	%cl, %esi
    000002ac: 	addl	%esi, %eax
    000002ae: 	cmpl	%edx, %ebx
    000002b0: 	jle	.Ltmp716 # Offset: 688
    000002b2: 	movslq	%edx, %rdx
    000002b5: 	movzbl	(%r14,%rdx), %edx
    000002ba: 	sarl	%cl, %edx
    000002bc: 	shll	%cl, %edx
    000002be: 	addl	%edx, %eax
.Ltmp716:
    000002c0: 	movzbl	%r10b, %edx
    000002c4: 	sarl	%cl, %edx
    000002c6: 	shll	%cl, %edx
    000002c8: 	shll	$0x6, %edx
    000002cb: 	cmpb	%al, %dl
    000002cd: 	je	.Ltmp719 # Offset: 717
    000002cf: 	movl	current_test(%rip), %edx
    000002d5: 	movl	$0x1, %edi
    000002da: 	movq	%r12, %rsi
    000002dd: 	xorl	%eax, %eax
    000002df: 	movl	%ecx, 0xc(%rsp)
    000002e3: 	addl	$0x1, %r13d
    000002e7: 	movq	%xmm3, 0x10(%rsp)
    000002ed: 	callq	__printf_chk@PLT # Offset: 749
    000002f2: 	movl	iterations(%rip), %edi
    000002f8: 	cmpl	%r13d, %edi
    000002fb: 	jle	.Ltmp715 # Offset: 763
    000002fd: 	movq	init_value(%rip), %r10
    00000304: 	movl	0xc(%rsp), %ecx
    00000308: 	movq	0x10(%rsp), %xmm3
    0000030e: 	movdqa	DATAat0x10fa0(%rip), %xmm7
    00000316: 	jmp	.Ltmp720 # Offset: 790
    0000031b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp719:
    00000320: 	addl	$0x1, %r13d
    00000324: 	cmpl	%edi, %r13d
    00000327: 	jl	.Ltmp720 # Offset: 807
.Ltmp715:
    0000032d: 	callq	clock@PLT # Offset: 813
    00000332: 	pxor	%xmm0, %xmm0
    00000336: 	movq	0x18(%rsp), %rdi
    0000033b: 	movq	%rax, end_time(%rip)
    00000342: 	subq	start_time(%rip), %rax
    00000349: 	cvtsi2sd	%rax, %xmm0
    0000034e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000356: 	addq	$0x28, %rsp
    0000035a: 	popq	%rbx
    0000035b: 	popq	%rbp
    0000035c: 	popq	%r12
    0000035e: 	popq	%r13
    00000360: 	popq	%r14
    00000362: 	popq	%r15
    00000364: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 868
.Ltmp717:
    00000369: 	xorl	%edx, %edx
    0000036b: 	xorl	%eax, %eax
    0000036d: 	jmp	.Ltmp721 # Offset: 877
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ih26mask_low_by_shift_variableIhEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ia26mask_low_by_shift_variableIaEEvPT_iS2_PKc" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0xdb20
  Size        : 0x3d2
  MaxSize     : 0x3e0
  Offset      : 0xdb20
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ia26mask_low_by_shift_variableIaEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %edx
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%edx, %edx
    00000032: 	jle	.Ltmp722 # Offset: 50
    00000038: 	leal	-0x1(%rbx), %eax
    0000003b: 	movsbl	%bpl, %ecx
    0000003f: 	movl	%ebx, %ebp
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, (%rsp)
    00000047: 	movl	%ebx, %eax
    00000049: 	movq	init_value(%rip), %rsi
    00000050: 	andl	$-0x10, %ebp
    00000053: 	shrl	$0x4, %eax
    00000056: 	movdqa	DATAat0x10fa0(%rip), %xmm5
    0000005e: 	leaq	DATAat0x10f44(%rip), %r12
    00000065: 	subl	$0x1, %eax
    00000068: 	shlq	$0x4, %rax
    0000006c: 	leaq	0x10(%r14,%rax), %r15
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp727:
    00000078: 	xorl	%eax, %eax
    0000007a: 	testl	%ebx, %ebx
    0000007c: 	jle	.Ltmp723 # Offset: 124
    00000082: 	cmpl	$0xe, (%rsp)
    00000086: 	jbe	.Ltmp724 # Offset: 134
    0000008c: 	pxor	%xmm3, %xmm3
    00000090: 	movslq	%ecx, %rdi
    00000093: 	pxor	%xmm4, %xmm4
    00000097: 	movq	%r14, %rax
    0000009a: 	movq	%rdi, %xmm7
    0000009f: 	movdqa	%xmm3, %xmm6
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp725:
    000000a8: 	movdqu	(%rax), %xmm2
    000000ac: 	movdqa	%xmm6, %xmm0
    000000b0: 	movdqa	%xmm4, %xmm8
    000000b5: 	addq	$0x10, %rax
    000000b9: 	pcmpgtb	%xmm2, %xmm0
    000000bd: 	movdqa	%xmm2, %xmm1
    000000c1: 	punpcklbw	%xmm0, %xmm1
    000000c5: 	punpckhbw	%xmm0, %xmm2
    000000c9: 	pcmpgtw	%xmm1, %xmm8
    000000ce: 	movdqa	%xmm1, %xmm0
    000000d2: 	punpcklwd	%xmm8, %xmm0
    000000d7: 	punpckhwd	%xmm8, %xmm1
    000000dc: 	psrad	%xmm7, %xmm0
    000000e0: 	psrad	%xmm7, %xmm1
    000000e4: 	pslld	%xmm7, %xmm0
    000000e8: 	pslld	%xmm7, %xmm1
    000000ec: 	movdqa	%xmm0, %xmm8
    000000f1: 	punpcklwd	%xmm1, %xmm0
    000000f5: 	punpckhwd	%xmm1, %xmm8
    000000fa: 	movdqa	%xmm0, %xmm1
    000000fe: 	punpckhwd	%xmm8, %xmm1
    00000103: 	punpcklwd	%xmm8, %xmm0
    00000108: 	movdqa	%xmm4, %xmm8
    0000010d: 	pcmpgtw	%xmm2, %xmm8
    00000112: 	punpcklwd	%xmm1, %xmm0
    00000116: 	movdqa	%xmm2, %xmm1
    0000011a: 	pand	%xmm5, %xmm0
    0000011e: 	punpcklwd	%xmm8, %xmm1
    00000123: 	punpckhwd	%xmm8, %xmm2
    00000128: 	psrad	%xmm7, %xmm1
    0000012c: 	psrad	%xmm7, %xmm2
    00000130: 	pslld	%xmm7, %xmm1
    00000134: 	pslld	%xmm7, %xmm2
    00000138: 	movdqa	%xmm1, %xmm8
    0000013d: 	punpcklwd	%xmm2, %xmm1
    00000141: 	punpckhwd	%xmm2, %xmm8
    00000146: 	movdqa	%xmm1, %xmm2
    0000014a: 	punpckhwd	%xmm8, %xmm2
    0000014f: 	punpcklwd	%xmm8, %xmm1
    00000154: 	punpcklwd	%xmm2, %xmm1
    00000158: 	pand	%xmm5, %xmm1
    0000015c: 	packuswb	%xmm1, %xmm0
    00000160: 	paddb	%xmm0, %xmm3
    00000164: 	cmpq	%r15, %rax
    00000167: 	jne	.Ltmp725 # Offset: 359
    0000016d: 	movdqa	%xmm3, %xmm0
    00000171: 	psrldq	$0x8, %xmm0
    00000176: 	paddb	%xmm0, %xmm3
    0000017a: 	psadbw	%xmm6, %xmm3
    0000017e: 	movd	%xmm3, %eax
    00000182: 	cmpl	%ebx, %ebp
    00000184: 	je	.Ltmp723 # Offset: 388
    0000018a: 	movl	%ebp, %edi
.Ltmp728:
    0000018c: 	movslq	%edi, %r10
    0000018f: 	movsbl	(%r14,%r10), %r10d
    00000194: 	sarl	%cl, %r10d
    00000197: 	shll	%cl, %r10d
    0000019a: 	addl	%r10d, %eax
    0000019d: 	leal	0x1(%rdi), %r10d
    000001a1: 	cmpl	%r10d, %ebx
    000001a4: 	jle	.Ltmp723 # Offset: 420
    000001aa: 	movslq	%r10d, %r10
    000001ad: 	movsbl	(%r14,%r10), %r10d
    000001b2: 	sarl	%cl, %r10d
    000001b5: 	shll	%cl, %r10d
    000001b8: 	addl	%r10d, %eax
    000001bb: 	leal	0x2(%rdi), %r10d
    000001bf: 	cmpl	%r10d, %ebx
    000001c2: 	jle	.Ltmp723 # Offset: 450
    000001c8: 	movslq	%r10d, %r10
    000001cb: 	movsbl	(%r14,%r10), %r10d
    000001d0: 	sarl	%cl, %r10d
    000001d3: 	shll	%cl, %r10d
    000001d6: 	addl	%r10d, %eax
    000001d9: 	leal	0x3(%rdi), %r10d
    000001dd: 	cmpl	%r10d, %ebx
    000001e0: 	jle	.Ltmp723 # Offset: 480
    000001e6: 	movslq	%r10d, %r10
    000001e9: 	movsbl	(%r14,%r10), %r10d
    000001ee: 	sarl	%cl, %r10d
    000001f1: 	shll	%cl, %r10d
    000001f4: 	addl	%r10d, %eax
    000001f7: 	leal	0x4(%rdi), %r10d
    000001fb: 	cmpl	%r10d, %ebx
    000001fe: 	jle	.Ltmp723 # Offset: 510
    00000204: 	movslq	%r10d, %r10
    00000207: 	movsbl	(%r14,%r10), %r10d
    0000020c: 	sarl	%cl, %r10d
    0000020f: 	shll	%cl, %r10d
    00000212: 	addl	%r10d, %eax
    00000215: 	leal	0x5(%rdi), %r10d
    00000219: 	cmpl	%r10d, %ebx
    0000021c: 	jle	.Ltmp723 # Offset: 540
    00000222: 	movslq	%r10d, %r10
    00000225: 	movsbl	(%r14,%r10), %r10d
    0000022a: 	sarl	%cl, %r10d
    0000022d: 	shll	%cl, %r10d
    00000230: 	addl	%r10d, %eax
    00000233: 	leal	0x6(%rdi), %r10d
    00000237: 	cmpl	%r10d, %ebx
    0000023a: 	jle	.Ltmp723 # Offset: 570
    00000240: 	movslq	%r10d, %r10
    00000243: 	movsbl	(%r14,%r10), %r10d
    00000248: 	sarl	%cl, %r10d
    0000024b: 	shll	%cl, %r10d
    0000024e: 	addl	%r10d, %eax
    00000251: 	leal	0x7(%rdi), %r10d
    00000255: 	cmpl	%r10d, %ebx
    00000258: 	jle	.Ltmp723 # Offset: 600
    0000025e: 	movslq	%r10d, %r10
    00000261: 	movsbl	(%r14,%r10), %r10d
    00000266: 	sarl	%cl, %r10d
    00000269: 	shll	%cl, %r10d
    0000026c: 	addl	%r10d, %eax
    0000026f: 	leal	0x8(%rdi), %r10d
    00000273: 	cmpl	%r10d, %ebx
    00000276: 	jle	.Ltmp723 # Offset: 630
    0000027c: 	movslq	%r10d, %r10
    0000027f: 	movsbl	(%r14,%r10), %r10d
    00000284: 	sarl	%cl, %r10d
    00000287: 	shll	%cl, %r10d
    0000028a: 	addl	%r10d, %eax
    0000028d: 	leal	0x9(%rdi), %r10d
    00000291: 	cmpl	%r10d, %ebx
    00000294: 	jle	.Ltmp723 # Offset: 660
    0000029a: 	movslq	%r10d, %r10
    0000029d: 	leal	0xa(%rdi), %r11d
    000002a1: 	movsbl	(%r14,%r10), %r10d
    000002a6: 	sarl	%cl, %r10d
    000002a9: 	shll	%cl, %r10d
    000002ac: 	addl	%eax, %r10d
    000002af: 	movl	%r10d, %eax
    000002b2: 	cmpl	%r11d, %ebx
    000002b5: 	jle	.Ltmp723 # Offset: 693
    000002b7: 	movslq	%r11d, %r11
    000002ba: 	movsbl	(%r14,%r11), %eax
    000002bf: 	sarl	%cl, %eax
    000002c1: 	shll	%cl, %eax
    000002c3: 	addl	%r10d, %eax
    000002c6: 	leal	0xb(%rdi), %r10d
    000002ca: 	cmpl	%r10d, %ebx
    000002cd: 	jle	.Ltmp723 # Offset: 717
    000002cf: 	movslq	%r10d, %r10
    000002d2: 	movsbl	(%r14,%r10), %r10d
    000002d7: 	sarl	%cl, %r10d
    000002da: 	shll	%cl, %r10d
    000002dd: 	addl	%r10d, %eax
    000002e0: 	leal	0xc(%rdi), %r10d
    000002e4: 	cmpl	%r10d, %ebx
    000002e7: 	jle	.Ltmp723 # Offset: 743
    000002e9: 	movslq	%r10d, %r10
    000002ec: 	movsbl	(%r14,%r10), %r10d
    000002f1: 	sarl	%cl, %r10d
    000002f4: 	shll	%cl, %r10d
    000002f7: 	addl	%r10d, %eax
    000002fa: 	leal	0xd(%rdi), %r10d
    000002fe: 	cmpl	%r10d, %ebx
    00000301: 	jle	.Ltmp723 # Offset: 769
    00000303: 	movslq	%r10d, %r10
    00000306: 	addl	$0xe, %edi
    00000309: 	movsbl	(%r14,%r10), %r10d
    0000030e: 	sarl	%cl, %r10d
    00000311: 	shll	%cl, %r10d
    00000314: 	addl	%r10d, %eax
    00000317: 	cmpl	%edi, %ebx
    00000319: 	jle	.Ltmp723 # Offset: 793
    0000031b: 	movslq	%edi, %rdi
    0000031e: 	movsbl	(%r14,%rdi), %edi
    00000323: 	sarl	%cl, %edi
    00000325: 	shll	%cl, %edi
    00000327: 	addl	%edi, %eax
    00000329: 	nopl	(%rax) # Size: 7
.Ltmp723:
    00000330: 	movsbl	%sil, %edi
    00000334: 	sarl	%cl, %edi
    00000336: 	shll	%cl, %edi
    00000338: 	shll	$0x6, %edi
    0000033b: 	cmpb	%al, %dil
    0000033e: 	je	.Ltmp726 # Offset: 830
    00000340: 	movl	current_test(%rip), %edx
    00000346: 	movq	%r12, %rsi
    00000349: 	movl	$0x1, %edi
    0000034e: 	xorl	%eax, %eax
    00000350: 	movl	%ecx, 0x4(%rsp)
    00000354: 	addl	$0x1, %r13d
    00000358: 	callq	__printf_chk@PLT # Offset: 856
    0000035d: 	movl	iterations(%rip), %edx
    00000363: 	cmpl	%edx, %r13d
    00000366: 	jge	.Ltmp722 # Offset: 870
    00000368: 	movq	init_value(%rip), %rsi
    0000036f: 	movl	0x4(%rsp), %ecx
    00000373: 	movdqa	DATAat0x10fa0(%rip), %xmm5
    0000037b: 	jmp	.Ltmp727 # Offset: 891
.Ltmp726:
    00000380: 	addl	$0x1, %r13d
    00000384: 	cmpl	%edx, %r13d
    00000387: 	jl	.Ltmp727 # Offset: 903
.Ltmp722:
    0000038d: 	callq	clock@PLT # Offset: 909
    00000392: 	pxor	%xmm0, %xmm0
    00000396: 	movq	0x8(%rsp), %rdi
    0000039b: 	movq	%rax, end_time(%rip)
    000003a2: 	subq	start_time(%rip), %rax
    000003a9: 	cvtsi2sd	%rax, %xmm0
    000003ae: 	divsd	DATAat0x10f68(%rip), %xmm0
    000003b6: 	addq	$0x18, %rsp
    000003ba: 	popq	%rbx
    000003bb: 	popq	%rbp
    000003bc: 	popq	%r12
    000003be: 	popq	%r13
    000003c0: 	popq	%r14
    000003c2: 	popq	%r15
    000003c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 964
.Ltmp724:
    000003c9: 	xorl	%edi, %edi
    000003cb: 	xorl	%eax, %eax
    000003cd: 	jmp	.Ltmp728 # Offset: 973
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ia26mask_low_by_shift_variableIaEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1It26mask_low_by_shift_variableItEEvPT_iS2_PKc" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0xdf00
  Size        : 0x242
  MaxSize     : 0x250
  Offset      : 0xdf00
  Section     : .text
  Orc Section : .local.text._Z14test_variable1It26mask_low_by_shift_variableItEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %r10d
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%r10d, %r10d
    00000034: 	jle	.Ltmp729 # Offset: 52
    0000003a: 	leal	-0x1(%rbx), %eax
    0000003d: 	movzwl	%bp, %ecx
    00000040: 	movq	init_value(%rip), %r11
    00000047: 	movl	%ebx, %ebp
    00000049: 	movl	%eax, (%rsp)
    0000004c: 	movl	%ebx, %eax
    0000004e: 	andl	$-0x8, %ebp
    00000051: 	xorl	%r13d, %r13d
    00000054: 	shrl	$0x3, %eax
    00000057: 	leaq	DATAat0x10f44(%rip), %r12
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r14,%rax), %r15
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp734:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%ebx, %ebx
    00000074: 	jle	.Ltmp730 # Offset: 116
    0000007a: 	cmpl	$0x6, (%rsp)
    0000007e: 	jbe	.Ltmp731 # Offset: 126
    00000084: 	pxor	%xmm3, %xmm3
    00000088: 	movslq	%ecx, %rdi
    0000008b: 	movq	%r14, %rax
    0000008e: 	movq	%rdi, %xmm2
    00000093: 	movdqa	%xmm3, %xmm5
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp732:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movdqa	%xmm1, %xmm0
    000000ac: 	punpckhwd	%xmm5, %xmm1
    000000b0: 	punpcklwd	%xmm5, %xmm0
    000000b4: 	psrad	%xmm2, %xmm1
    000000b8: 	psrad	%xmm2, %xmm0
    000000bc: 	pslld	%xmm2, %xmm1
    000000c0: 	pslld	%xmm2, %xmm0
    000000c4: 	movdqa	%xmm0, %xmm4
    000000c8: 	punpcklwd	%xmm1, %xmm0
    000000cc: 	punpckhwd	%xmm1, %xmm4
    000000d0: 	movdqa	%xmm0, %xmm1
    000000d4: 	punpckhwd	%xmm4, %xmm1
    000000d8: 	punpcklwd	%xmm4, %xmm0
    000000dc: 	punpcklwd	%xmm1, %xmm0
    000000e0: 	paddw	%xmm0, %xmm3
    000000e4: 	cmpq	%r15, %rax
    000000e7: 	jne	.Ltmp732 # Offset: 231
    000000e9: 	movdqa	%xmm3, %xmm0
    000000ed: 	psrldq	$0x8, %xmm0
    000000f2: 	paddw	%xmm0, %xmm3
    000000f6: 	movdqa	%xmm3, %xmm0
    000000fa: 	psrldq	$0x4, %xmm0
    000000ff: 	paddw	%xmm0, %xmm3
    00000103: 	movdqa	%xmm3, %xmm0
    00000107: 	psrldq	$0x2, %xmm0
    0000010c: 	paddw	%xmm0, %xmm3
    00000110: 	pextrw	$0x0, %xmm3, %eax
    00000115: 	cmpl	%ebx, %ebp
    00000117: 	je	.Ltmp730 # Offset: 279
    0000011d: 	movl	%ebp, %edx
.Ltmp735:
    0000011f: 	movslq	%edx, %rsi
    00000122: 	leaq	(%rsi,%rsi), %rdi
    00000126: 	movzwl	(%r14,%rsi,2), %esi
    0000012b: 	sarl	%cl, %esi
    0000012d: 	shll	%cl, %esi
    0000012f: 	addl	%esi, %eax
    00000131: 	leal	0x1(%rdx), %esi
    00000134: 	cmpl	%esi, %ebx
    00000136: 	jle	.Ltmp730 # Offset: 310
    00000138: 	movzwl	0x2(%r14,%rdi), %esi
    0000013e: 	sarl	%cl, %esi
    00000140: 	shll	%cl, %esi
    00000142: 	addl	%esi, %eax
    00000144: 	leal	0x2(%rdx), %esi
    00000147: 	cmpl	%ebx, %esi
    00000149: 	jge	.Ltmp730 # Offset: 329
    0000014b: 	movzwl	0x4(%r14,%rdi), %esi
    00000151: 	sarl	%cl, %esi
    00000153: 	shll	%cl, %esi
    00000155: 	addl	%esi, %eax
    00000157: 	leal	0x3(%rdx), %esi
    0000015a: 	cmpl	%esi, %ebx
    0000015c: 	jle	.Ltmp730 # Offset: 348
    0000015e: 	movzwl	0x6(%r14,%rdi), %esi
    00000164: 	sarl	%cl, %esi
    00000166: 	shll	%cl, %esi
    00000168: 	addl	%esi, %eax
    0000016a: 	leal	0x4(%rdx), %esi
    0000016d: 	cmpl	%esi, %ebx
    0000016f: 	jle	.Ltmp730 # Offset: 367
    00000171: 	movzwl	0x8(%r14,%rdi), %esi
    00000177: 	sarl	%cl, %esi
    00000179: 	shll	%cl, %esi
    0000017b: 	addl	%esi, %eax
    0000017d: 	leal	0x5(%rdx), %esi
    00000180: 	cmpl	%esi, %ebx
    00000182: 	jle	.Ltmp730 # Offset: 386
    00000184: 	movzwl	0xa(%r14,%rdi), %esi
    0000018a: 	addl	$0x6, %edx
    0000018d: 	sarl	%cl, %esi
    0000018f: 	shll	%cl, %esi
    00000191: 	addl	%esi, %eax
    00000193: 	cmpl	%edx, %ebx
    00000195: 	jle	.Ltmp730 # Offset: 405
    00000197: 	movzwl	0xc(%r14,%rdi), %edx
    0000019d: 	sarl	%cl, %edx
    0000019f: 	shll	%cl, %edx
    000001a1: 	addl	%edx, %eax
.Ltmp730:
    000001a3: 	movzwl	%r11w, %edx
    000001a7: 	sarl	%cl, %edx
    000001a9: 	shll	%cl, %edx
    000001ab: 	imulw	$0x1f40, %dx, %dx
    000001b0: 	cmpw	%ax, %dx
    000001b3: 	je	.Ltmp733 # Offset: 435
    000001b5: 	movl	current_test(%rip), %edx
    000001bb: 	movq	%r12, %rsi
    000001be: 	movl	$0x1, %edi
    000001c3: 	xorl	%eax, %eax
    000001c5: 	movl	%ecx, 0x4(%rsp)
    000001c9: 	addl	$0x1, %r13d
    000001cd: 	callq	__printf_chk@PLT # Offset: 461
    000001d2: 	movl	iterations(%rip), %r10d
    000001d9: 	cmpl	%r10d, %r13d
    000001dc: 	jge	.Ltmp729 # Offset: 476
    000001de: 	movq	init_value(%rip), %r11
    000001e5: 	movl	0x4(%rsp), %ecx
    000001e9: 	jmp	.Ltmp734 # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp733:
    000001f0: 	addl	$0x1, %r13d
    000001f4: 	cmpl	%r10d, %r13d
    000001f7: 	jl	.Ltmp734 # Offset: 503
.Ltmp729:
    000001fd: 	callq	clock@PLT # Offset: 509
    00000202: 	pxor	%xmm0, %xmm0
    00000206: 	movq	0x8(%rsp), %rdi
    0000020b: 	movq	%rax, end_time(%rip)
    00000212: 	subq	start_time(%rip), %rax
    00000219: 	cvtsi2sd	%rax, %xmm0
    0000021e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000226: 	addq	$0x18, %rsp
    0000022a: 	popq	%rbx
    0000022b: 	popq	%rbp
    0000022c: 	popq	%r12
    0000022e: 	popq	%r13
    00000230: 	popq	%r14
    00000232: 	popq	%r15
    00000234: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 564
.Ltmp731:
    00000239: 	xorl	%edx, %edx
    0000023b: 	xorl	%eax, %eax
    0000023d: 	jmp	.Ltmp735 # Offset: 573
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1It26mask_low_by_shift_variableItEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Is26mask_low_by_shift_variableIsEEvPT_iS2_PKc" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0xe150
  Size        : 0x252
  MaxSize     : 0x260
  Offset      : 0xe150
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Is26mask_low_by_shift_variableIsEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %r10d
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%r10d, %r10d
    00000034: 	jle	.Ltmp736 # Offset: 52
    0000003a: 	leal	-0x1(%rbx), %eax
    0000003d: 	movswl	%bp, %ecx
    00000040: 	movq	init_value(%rip), %r11
    00000047: 	movl	%ebx, %ebp
    00000049: 	movl	%eax, (%rsp)
    0000004c: 	movl	%ebx, %eax
    0000004e: 	andl	$-0x8, %ebp
    00000051: 	xorl	%r13d, %r13d
    00000054: 	shrl	$0x3, %eax
    00000057: 	leaq	DATAat0x10f44(%rip), %r12
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r14,%rax), %r15
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp741:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%ebx, %ebx
    00000074: 	jle	.Ltmp737 # Offset: 116
    0000007a: 	cmpl	$0x6, (%rsp)
    0000007e: 	jbe	.Ltmp738 # Offset: 126
    00000084: 	pxor	%xmm3, %xmm3
    00000088: 	movslq	%ecx, %rdi
    0000008b: 	movq	%r14, %rax
    0000008e: 	movq	%rdi, %xmm2
    00000093: 	movdqa	%xmm3, %xmm5
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp739:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	movdqa	%xmm5, %xmm4
    000000a8: 	addq	$0x10, %rax
    000000ac: 	pcmpgtw	%xmm1, %xmm4
    000000b0: 	movdqa	%xmm1, %xmm0
    000000b4: 	punpcklwd	%xmm4, %xmm0
    000000b8: 	punpckhwd	%xmm4, %xmm1
    000000bc: 	psrad	%xmm2, %xmm0
    000000c0: 	psrad	%xmm2, %xmm1
    000000c4: 	pslld	%xmm2, %xmm0
    000000c8: 	pslld	%xmm2, %xmm1
    000000cc: 	movdqa	%xmm0, %xmm4
    000000d0: 	punpcklwd	%xmm1, %xmm0
    000000d4: 	punpckhwd	%xmm1, %xmm4
    000000d8: 	movdqa	%xmm0, %xmm1
    000000dc: 	punpckhwd	%xmm4, %xmm1
    000000e0: 	punpcklwd	%xmm4, %xmm0
    000000e4: 	punpcklwd	%xmm1, %xmm0
    000000e8: 	paddw	%xmm0, %xmm3
    000000ec: 	cmpq	%r15, %rax
    000000ef: 	jne	.Ltmp739 # Offset: 239
    000000f1: 	movdqa	%xmm3, %xmm0
    000000f5: 	psrldq	$0x8, %xmm0
    000000fa: 	paddw	%xmm0, %xmm3
    000000fe: 	movdqa	%xmm3, %xmm0
    00000102: 	psrldq	$0x4, %xmm0
    00000107: 	paddw	%xmm0, %xmm3
    0000010b: 	movdqa	%xmm3, %xmm0
    0000010f: 	psrldq	$0x2, %xmm0
    00000114: 	paddw	%xmm0, %xmm3
    00000118: 	pextrw	$0x0, %xmm3, %eax
    0000011d: 	cmpl	%ebx, %ebp
    0000011f: 	je	.Ltmp737 # Offset: 287
    00000125: 	movl	%ebp, %edx
.Ltmp742:
    00000127: 	movslq	%edx, %rsi
    0000012a: 	leaq	(%rsi,%rsi), %rdi
    0000012e: 	movswl	(%r14,%rsi,2), %esi
    00000133: 	sarl	%cl, %esi
    00000135: 	shll	%cl, %esi
    00000137: 	addl	%esi, %eax
    00000139: 	leal	0x1(%rdx), %esi
    0000013c: 	cmpl	%esi, %ebx
    0000013e: 	jle	.Ltmp737 # Offset: 318
    00000140: 	movswl	0x2(%r14,%rdi), %esi
    00000146: 	sarl	%cl, %esi
    00000148: 	shll	%cl, %esi
    0000014a: 	addl	%esi, %eax
    0000014c: 	leal	0x2(%rdx), %esi
    0000014f: 	cmpl	%ebx, %esi
    00000151: 	jge	.Ltmp737 # Offset: 337
    00000153: 	movswl	0x4(%r14,%rdi), %esi
    00000159: 	sarl	%cl, %esi
    0000015b: 	shll	%cl, %esi
    0000015d: 	addl	%esi, %eax
    0000015f: 	leal	0x3(%rdx), %esi
    00000162: 	cmpl	%esi, %ebx
    00000164: 	jle	.Ltmp737 # Offset: 356
    00000166: 	movswl	0x6(%r14,%rdi), %esi
    0000016c: 	sarl	%cl, %esi
    0000016e: 	shll	%cl, %esi
    00000170: 	addl	%esi, %eax
    00000172: 	leal	0x4(%rdx), %esi
    00000175: 	cmpl	%esi, %ebx
    00000177: 	jle	.Ltmp737 # Offset: 375
    00000179: 	movswl	0x8(%r14,%rdi), %esi
    0000017f: 	sarl	%cl, %esi
    00000181: 	shll	%cl, %esi
    00000183: 	addl	%esi, %eax
    00000185: 	leal	0x5(%rdx), %esi
    00000188: 	cmpl	%esi, %ebx
    0000018a: 	jle	.Ltmp737 # Offset: 394
    0000018c: 	movswl	0xa(%r14,%rdi), %esi
    00000192: 	addl	$0x6, %edx
    00000195: 	sarl	%cl, %esi
    00000197: 	shll	%cl, %esi
    00000199: 	addl	%esi, %eax
    0000019b: 	cmpl	%edx, %ebx
    0000019d: 	jle	.Ltmp737 # Offset: 413
    0000019f: 	movswl	0xc(%r14,%rdi), %edx
    000001a5: 	sarl	%cl, %edx
    000001a7: 	shll	%cl, %edx
    000001a9: 	addl	%edx, %eax
.Ltmp737:
    000001ab: 	movswl	%r11w, %edx
    000001af: 	sarl	%cl, %edx
    000001b1: 	shll	%cl, %edx
    000001b3: 	imulw	$0x1f40, %dx, %dx
    000001b8: 	cmpw	%ax, %dx
    000001bb: 	je	.Ltmp740 # Offset: 443
    000001bd: 	movl	current_test(%rip), %edx
    000001c3: 	movq	%r12, %rsi
    000001c6: 	movl	$0x1, %edi
    000001cb: 	xorl	%eax, %eax
    000001cd: 	movl	%ecx, 0x4(%rsp)
    000001d1: 	addl	$0x1, %r13d
    000001d5: 	callq	__printf_chk@PLT # Offset: 469
    000001da: 	movl	iterations(%rip), %r10d
    000001e1: 	cmpl	%r10d, %r13d
    000001e4: 	jge	.Ltmp736 # Offset: 484
    000001e6: 	movq	init_value(%rip), %r11
    000001ed: 	movl	0x4(%rsp), %ecx
    000001f1: 	jmp	.Ltmp741 # Offset: 497
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp740:
    00000200: 	addl	$0x1, %r13d
    00000204: 	cmpl	%r10d, %r13d
    00000207: 	jl	.Ltmp741 # Offset: 519
.Ltmp736:
    0000020d: 	callq	clock@PLT # Offset: 525
    00000212: 	pxor	%xmm0, %xmm0
    00000216: 	movq	0x8(%rsp), %rdi
    0000021b: 	movq	%rax, end_time(%rip)
    00000222: 	subq	start_time(%rip), %rax
    00000229: 	cvtsi2sd	%rax, %xmm0
    0000022e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000236: 	addq	$0x18, %rsp
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 580
.Ltmp738:
    00000249: 	xorl	%edx, %edx
    0000024b: 	xorl	%eax, %eax
    0000024d: 	jmp	.Ltmp742 # Offset: 589
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Is26mask_low_by_shift_variableIsEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ij26mask_low_by_shift_variableIjEEvPT_iS2_PKc" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0xe3b0
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0xe3b0
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ij26mask_low_by_shift_variableIjEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x18, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r10d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r10d, %r10d
    00000035: 	jle	.Ltmp743 # Offset: 53
    0000003b: 	leal	-0x1(%r14), %eax
    0000003f: 	movl	%r14d, %r13d
    00000042: 	movq	init_value(%rip), %r11
    00000049: 	xorl	%r12d, %r12d
    0000004c: 	movl	%eax, 0x4(%rsp)
    00000050: 	movl	%r14d, %eax
    00000053: 	andl	$-0x4, %r13d
    00000057: 	shrl	$0x2, %eax
    0000005a: 	subl	$0x1, %eax
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	0x10(%r15,%rax), %rbp
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp748:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp744 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp745 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	movd	%ebx, %xmm2
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp746:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	addq	$0x10, %rax
    000000a0: 	psrld	%xmm2, %xmm0
    000000a4: 	pslld	%xmm2, %xmm0
    000000a8: 	paddd	%xmm0, %xmm1
    000000ac: 	cmpq	%rbp, %rax
    000000af: 	jne	.Ltmp746 # Offset: 175
    000000b1: 	movdqa	%xmm1, %xmm0
    000000b5: 	movl	%r13d, %esi
    000000b8: 	psrldq	$0x8, %xmm0
    000000bd: 	paddd	%xmm0, %xmm1
    000000c1: 	movdqa	%xmm1, %xmm0
    000000c5: 	psrldq	$0x4, %xmm0
    000000ca: 	paddd	%xmm0, %xmm1
    000000ce: 	movd	%xmm1, %eax
    000000d2: 	cmpl	%r14d, %r13d
    000000d5: 	je	.Ltmp744 # Offset: 213
.Ltmp749:
    000000d7: 	movslq	%esi, %rdx
    000000da: 	movl	%ebx, %ecx
    000000dc: 	leaq	(,%rdx,4), %rdi
    000000e4: 	movl	(%r15,%rdx,4), %edx
    000000e8: 	shrl	%cl, %edx
    000000ea: 	shll	%cl, %edx
    000000ec: 	addl	%edx, %eax
    000000ee: 	leal	0x1(%rsi), %edx
    000000f1: 	cmpl	%edx, %r14d
    000000f4: 	jle	.Ltmp744 # Offset: 244
    000000f6: 	movl	0x4(%r15,%rdi), %edx
    000000fb: 	addl	$0x2, %esi
    000000fe: 	shrl	%cl, %edx
    00000100: 	shll	%cl, %edx
    00000102: 	addl	%edx, %eax
    00000104: 	cmpl	%esi, %r14d
    00000107: 	jle	.Ltmp744 # Offset: 263
    00000109: 	movl	0x8(%r15,%rdi), %edx
    0000010e: 	shrl	%cl, %edx
    00000110: 	shll	%cl, %edx
    00000112: 	addl	%edx, %eax
.Ltmp744:
    00000114: 	movl	%ebx, %ecx
    00000116: 	movl	%r11d, %edx
    00000119: 	shrl	%cl, %edx
    0000011b: 	shll	%cl, %edx
    0000011d: 	imull	$0x1f40, %edx, %edx
    00000123: 	cmpl	%eax, %edx
    00000125: 	je	.Ltmp747 # Offset: 293
    00000127: 	movl	current_test(%rip), %edx
    0000012d: 	leaq	DATAat0x10f44(%rip), %rsi
    00000134: 	movl	$0x1, %edi
    00000139: 	xorl	%eax, %eax
    0000013b: 	addl	$0x1, %r12d
    0000013f: 	callq	__printf_chk@PLT # Offset: 319
    00000144: 	movl	iterations(%rip), %r10d
    0000014b: 	cmpl	%r10d, %r12d
    0000014e: 	jge	.Ltmp743 # Offset: 334
    00000150: 	movq	init_value(%rip), %r11
    00000157: 	jmp	.Ltmp748 # Offset: 343
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp747:
    00000160: 	addl	$0x1, %r12d
    00000164: 	cmpl	%r10d, %r12d
    00000167: 	jl	.Ltmp748 # Offset: 359
.Ltmp743:
    0000016d: 	callq	clock@PLT # Offset: 365
    00000172: 	pxor	%xmm0, %xmm0
    00000176: 	movq	0x8(%rsp), %rdi
    0000017b: 	movq	%rax, end_time(%rip)
    00000182: 	subq	start_time(%rip), %rax
    00000189: 	cvtsi2sd	%rax, %xmm0
    0000018e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000196: 	addq	$0x18, %rsp
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	popq	%r15
    000001a4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 420
.Ltmp745:
    000001a9: 	xorl	%esi, %esi
    000001ab: 	xorl	%eax, %eax
    000001ad: 	jmp	.Ltmp749 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ij26mask_low_by_shift_variableIjEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ii26mask_low_by_shift_variableIiEEvPT_iS2_PKc" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0xe570
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0xe570
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ii26mask_low_by_shift_variableIiEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x18, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r10d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r10d, %r10d
    00000035: 	jle	.Ltmp750 # Offset: 53
    0000003b: 	leal	-0x1(%r14), %eax
    0000003f: 	movl	%r14d, %r13d
    00000042: 	movq	init_value(%rip), %r11
    00000049: 	xorl	%r12d, %r12d
    0000004c: 	movl	%eax, 0x4(%rsp)
    00000050: 	movl	%r14d, %eax
    00000053: 	andl	$-0x4, %r13d
    00000057: 	shrl	$0x2, %eax
    0000005a: 	subl	$0x1, %eax
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	0x10(%r15,%rax), %rbp
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp755:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp751 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp752 # Offset: 128
    00000086: 	movslq	%ebx, %rdi
    00000089: 	movq	%r15, %rax
    0000008c: 	pxor	%xmm1, %xmm1
    00000090: 	movq	%rdi, %xmm2
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp753:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	addq	$0x10, %rax
    000000a0: 	psrad	%xmm2, %xmm0
    000000a4: 	pslld	%xmm2, %xmm0
    000000a8: 	paddd	%xmm0, %xmm1
    000000ac: 	cmpq	%rbp, %rax
    000000af: 	jne	.Ltmp753 # Offset: 175
    000000b1: 	movdqa	%xmm1, %xmm0
    000000b5: 	movl	%r13d, %esi
    000000b8: 	psrldq	$0x8, %xmm0
    000000bd: 	paddd	%xmm0, %xmm1
    000000c1: 	movdqa	%xmm1, %xmm0
    000000c5: 	psrldq	$0x4, %xmm0
    000000ca: 	paddd	%xmm0, %xmm1
    000000ce: 	movd	%xmm1, %eax
    000000d2: 	cmpl	%r14d, %r13d
    000000d5: 	je	.Ltmp751 # Offset: 213
.Ltmp756:
    000000d7: 	movslq	%esi, %rdx
    000000da: 	movl	%ebx, %ecx
    000000dc: 	leaq	(,%rdx,4), %rdi
    000000e4: 	movl	(%r15,%rdx,4), %edx
    000000e8: 	sarl	%cl, %edx
    000000ea: 	shll	%cl, %edx
    000000ec: 	addl	%edx, %eax
    000000ee: 	leal	0x1(%rsi), %edx
    000000f1: 	cmpl	%edx, %r14d
    000000f4: 	jle	.Ltmp751 # Offset: 244
    000000f6: 	movl	0x4(%r15,%rdi), %edx
    000000fb: 	addl	$0x2, %esi
    000000fe: 	sarl	%cl, %edx
    00000100: 	shll	%cl, %edx
    00000102: 	addl	%edx, %eax
    00000104: 	cmpl	%esi, %r14d
    00000107: 	jle	.Ltmp751 # Offset: 263
    00000109: 	movl	0x8(%r15,%rdi), %edx
    0000010e: 	sarl	%cl, %edx
    00000110: 	shll	%cl, %edx
    00000112: 	addl	%edx, %eax
.Ltmp751:
    00000114: 	movl	%ebx, %ecx
    00000116: 	movl	%r11d, %edx
    00000119: 	sarl	%cl, %edx
    0000011b: 	shll	%cl, %edx
    0000011d: 	imull	$0x1f40, %edx, %edx
    00000123: 	cmpl	%eax, %edx
    00000125: 	je	.Ltmp754 # Offset: 293
    00000127: 	movl	current_test(%rip), %edx
    0000012d: 	leaq	DATAat0x10f44(%rip), %rsi
    00000134: 	movl	$0x1, %edi
    00000139: 	xorl	%eax, %eax
    0000013b: 	addl	$0x1, %r12d
    0000013f: 	callq	__printf_chk@PLT # Offset: 319
    00000144: 	movl	iterations(%rip), %r10d
    0000014b: 	cmpl	%r10d, %r12d
    0000014e: 	jge	.Ltmp750 # Offset: 334
    00000150: 	movq	init_value(%rip), %r11
    00000157: 	jmp	.Ltmp755 # Offset: 343
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp754:
    00000160: 	addl	$0x1, %r12d
    00000164: 	cmpl	%r10d, %r12d
    00000167: 	jl	.Ltmp755 # Offset: 359
.Ltmp750:
    0000016d: 	callq	clock@PLT # Offset: 365
    00000172: 	pxor	%xmm0, %xmm0
    00000176: 	movq	0x8(%rsp), %rdi
    0000017b: 	movq	%rax, end_time(%rip)
    00000182: 	subq	start_time(%rip), %rax
    00000189: 	cvtsi2sd	%rax, %xmm0
    0000018e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000196: 	addq	$0x18, %rsp
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	popq	%r15
    000001a4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 420
.Ltmp752:
    000001a9: 	xorl	%esi, %esi
    000001ab: 	xorl	%eax, %eax
    000001ad: 	jmp	.Ltmp756 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ii26mask_low_by_shift_variableIiEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Im26mask_low_by_shift_variableImEEvPT_iS2_PKc" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0xe730
  Size        : 0x16a
  MaxSize     : 0x170
  Offset      : 0xe730
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Im26mask_low_by_shift_variableImEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %esi
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%esi, %esi
    00000034: 	jle	.Ltmp757 # Offset: 52
    0000003a: 	movl	%r14d, %eax
    0000003d: 	movl	%r14d, %r12d
    00000040: 	movq	init_value(%rip), %rdi
    00000047: 	movl	%ebp, %ecx
    00000049: 	shrl	%eax
    0000004b: 	andl	$-0x2, %r12d
    0000004f: 	leaq	DATAat0x10f44(%rip), %rbp
    00000056: 	xorl	%r15d, %r15d
    00000059: 	subl	$0x1, %eax
    0000005c: 	shlq	$0x4, %rax
    00000060: 	leaq	0x10(%rbx,%rax), %r13
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp762:
    00000068: 	xorl	%edx, %edx
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp758 # Offset: 109
    0000006f: 	cmpl	$0x1, %r14d
    00000073: 	je	.Ltmp759 # Offset: 115
    00000079: 	movq	%rbx, %rax
    0000007c: 	pxor	%xmm1, %xmm1
    00000080: 	movd	%ecx, %xmm2
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp760:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	psrlq	%xmm2, %xmm0
    00000094: 	psllq	%xmm2, %xmm0
    00000098: 	paddq	%xmm0, %xmm1
    0000009c: 	cmpq	%rax, %r13
    0000009f: 	jne	.Ltmp760 # Offset: 159
    000000a1: 	movdqa	%xmm1, %xmm0
    000000a5: 	movslq	%r12d, %rax
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	paddq	%xmm0, %xmm1
    000000b1: 	movq	%xmm1, %rdx
    000000b6: 	cmpl	%r14d, %r12d
    000000b9: 	je	.Ltmp758 # Offset: 185
.Ltmp763:
    000000bb: 	movq	(%rbx,%rax,8), %rax
    000000bf: 	shrq	%cl, %rax
    000000c2: 	shlq	%cl, %rax
    000000c5: 	addq	%rax, %rdx
.Ltmp758:
    000000c8: 	movq	%rdi, %rax
    000000cb: 	shrq	%cl, %rax
    000000ce: 	shlq	%cl, %rax
    000000d1: 	imulq	$0x1f40, %rax, %rax
    000000d8: 	cmpq	%rdx, %rax
    000000db: 	je	.Ltmp761 # Offset: 219
    000000dd: 	movl	current_test(%rip), %edx
    000000e3: 	movq	%rbp, %rsi
    000000e6: 	movl	$0x1, %edi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	movl	%ecx, 0x4(%rsp)
    000000f1: 	addl	$0x1, %r15d
    000000f5: 	callq	__printf_chk@PLT # Offset: 245
    000000fa: 	movl	iterations(%rip), %esi
    00000100: 	cmpl	%esi, %r15d
    00000103: 	jge	.Ltmp757 # Offset: 259
    00000105: 	movq	init_value(%rip), %rdi
    0000010c: 	movl	0x4(%rsp), %ecx
    00000110: 	jmp	.Ltmp762 # Offset: 272
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp761:
    00000118: 	addl	$0x1, %r15d
    0000011c: 	cmpl	%esi, %r15d
    0000011f: 	jl	.Ltmp762 # Offset: 287
.Ltmp757:
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	pxor	%xmm0, %xmm0
    0000012e: 	movq	0x8(%rsp), %rdi
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	subq	start_time(%rip), %rax
    00000141: 	cvtsi2sd	%rax, %xmm0
    00000146: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000014e: 	addq	$0x18, %rsp
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	popq	%r12
    00000156: 	popq	%r13
    00000158: 	popq	%r14
    0000015a: 	popq	%r15
    0000015c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 348
.Ltmp759:
    00000161: 	xorl	%eax, %eax
    00000163: 	xorl	%edx, %edx
    00000165: 	jmp	.Ltmp763 # Offset: 357
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Im26mask_low_by_shift_variableImEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Il26mask_low_by_shift_variableIlEEvPT_iS2_PKc" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0xe8a0
  Size        : 0x117
  MaxSize     : 0x120
  Offset      : 0xe8a0
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Il26mask_low_by_shift_variableIlEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %edi
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%edi, %edi
    00000032: 	jle	.Ltmp764 # Offset: 50
    00000038: 	leal	-0x1(%r15), %eax
    0000003c: 	movq	init_value(%rip), %r8
    00000043: 	movl	%ebp, %ecx
    00000045: 	xorl	%r14d, %r14d
    00000048: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004d: 	leaq	DATAat0x10f44(%rip), %rbp
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp768:
    00000058: 	movq	%rbx, %rdx
    0000005b: 	xorl	%esi, %esi
    0000005d: 	testl	%r15d, %r15d
    00000060: 	jle	.Ltmp765 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp766:
    00000068: 	movq	(%rdx), %rax
    0000006b: 	addq	$0x8, %rdx
    0000006f: 	sarq	%cl, %rax
    00000072: 	shlq	%cl, %rax
    00000075: 	addq	%rax, %rsi
    00000078: 	cmpq	%rdx, %r13
    0000007b: 	jne	.Ltmp766 # Offset: 123
.Ltmp765:
    0000007d: 	movq	%r8, %rax
    00000080: 	sarq	%cl, %rax
    00000083: 	shlq	%cl, %rax
    00000086: 	imulq	$0x1f40, %rax, %rax
    0000008d: 	cmpq	%rsi, %rax
    00000090: 	je	.Ltmp767 # Offset: 144
    00000092: 	movl	current_test(%rip), %edx
    00000098: 	movl	$0x1, %edi
    0000009d: 	movq	%rbp, %rsi
    000000a0: 	xorl	%eax, %eax
    000000a2: 	movl	%ecx, 0xc(%rsp)
    000000a6: 	addl	$0x1, %r14d
    000000aa: 	callq	__printf_chk@PLT # Offset: 170
    000000af: 	movl	iterations(%rip), %edi
    000000b5: 	cmpl	%edi, %r14d
    000000b8: 	jge	.Ltmp764 # Offset: 184
    000000ba: 	movq	init_value(%rip), %r8
    000000c1: 	movl	0xc(%rsp), %ecx
    000000c5: 	jmp	.Ltmp768 # Offset: 197
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp767:
    000000d0: 	addl	$0x1, %r14d
    000000d4: 	cmpl	%edi, %r14d
    000000d7: 	jl	.Ltmp768 # Offset: 215
.Ltmp764:
    000000dd: 	callq	clock@PLT # Offset: 221
    000000e2: 	pxor	%xmm0, %xmm0
    000000e6: 	movq	%r12, %rdi
    000000e9: 	movq	%rax, end_time(%rip)
    000000f0: 	subq	start_time(%rip), %rax
    000000f7: 	cvtsi2sd	%rax, %xmm0
    000000fc: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000104: 	addq	$0x18, %rsp
    00000108: 	popq	%rbx
    00000109: 	popq	%rbp
    0000010a: 	popq	%r12
    0000010c: 	popq	%r13
    0000010e: 	popq	%r14
    00000110: 	popq	%r15
    00000112: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 274
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Il26mask_low_by_shift_variableIlEEvPT_iS2_PKc"

Binary Function "_Z13test_constantIh27mask_high_by_shift_constantIhEEvPT_iPKc" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0xe9c0
  Size        : 0x2a2
  MaxSize     : 0x2b0
  Offset      : 0xe9c0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIh27mask_high_by_shift_constantIhEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp769 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	movdqa	DATAat0x10fe0(%rip), %xmm5
    0000004d: 	movl	%eax, 0x4(%rsp)
    00000051: 	movl	%r13d, %eax
    00000054: 	andl	$-0x10, %ebx
    00000057: 	xorl	%r12d, %r12d
    0000005a: 	shrl	$0x4, %eax
    0000005d: 	movdqa	DATAat0x10fa0(%rip), %xmm4
    00000065: 	leaq	DATAat0x10f44(%rip), %rbp
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%r14,%rax), %r15
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp774:
    00000080: 	xorl	%eax, %eax
    00000082: 	testl	%r13d, %r13d
    00000085: 	jle	.Ltmp770 # Offset: 133
    0000008b: 	cmpl	$0xe, 0x4(%rsp)
    00000090: 	jbe	.Ltmp771 # Offset: 144
    00000096: 	pxor	%xmm2, %xmm2
    0000009a: 	movq	%r14, %rax
    0000009d: 	movdqa	%xmm2, %xmm3
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp772:
    000000a8: 	movdqu	(%rax), %xmm0
    000000ac: 	addq	$0x10, %rax
    000000b0: 	movdqa	%xmm0, %xmm1
    000000b4: 	punpckhbw	%xmm3, %xmm0
    000000b8: 	punpcklbw	%xmm3, %xmm1
    000000bc: 	pand	%xmm5, %xmm0
    000000c0: 	pand	%xmm5, %xmm1
    000000c4: 	pand	%xmm4, %xmm0
    000000c8: 	pand	%xmm4, %xmm1
    000000cc: 	packuswb	%xmm0, %xmm1
    000000d0: 	paddb	%xmm1, %xmm2
    000000d4: 	cmpq	%r15, %rax
    000000d7: 	jne	.Ltmp772 # Offset: 215
    000000d9: 	movdqa	%xmm2, %xmm0
    000000dd: 	psrldq	$0x8, %xmm0
    000000e2: 	paddb	%xmm0, %xmm2
    000000e6: 	psadbw	%xmm3, %xmm2
    000000ea: 	movd	%xmm2, %eax
    000000ee: 	cmpl	%r13d, %ebx
    000000f1: 	je	.Ltmp770 # Offset: 241
    000000f7: 	movl	%ebx, %edx
.Ltmp775:
    000000f9: 	movslq	%edx, %r9
    000000fc: 	addb	(%r14,%r9), %al
    00000100: 	leal	0x1(%rdx), %r9d
    00000104: 	cmpl	%r9d, %r13d
    00000107: 	jle	.Ltmp770 # Offset: 263
    0000010d: 	movslq	%r9d, %r9
    00000110: 	addb	(%r14,%r9), %al
    00000114: 	leal	0x2(%rdx), %r9d
    00000118: 	cmpl	%r9d, %r13d
    0000011b: 	jle	.Ltmp770 # Offset: 283
    00000121: 	movslq	%r9d, %r9
    00000124: 	addb	(%r14,%r9), %al
    00000128: 	leal	0x3(%rdx), %r9d
    0000012c: 	cmpl	%r9d, %r13d
    0000012f: 	jle	.Ltmp770 # Offset: 303
    00000135: 	movslq	%r9d, %r9
    00000138: 	addb	(%r14,%r9), %al
    0000013c: 	leal	0x4(%rdx), %r9d
    00000140: 	cmpl	%r9d, %r13d
    00000143: 	jle	.Ltmp770 # Offset: 323
    00000149: 	movslq	%r9d, %r9
    0000014c: 	addb	(%r14,%r9), %al
    00000150: 	leal	0x5(%rdx), %r9d
    00000154: 	cmpl	%r9d, %r13d
    00000157: 	jle	.Ltmp770 # Offset: 343
    0000015d: 	movslq	%r9d, %r9
    00000160: 	addb	(%r14,%r9), %al
    00000164: 	leal	0x6(%rdx), %r9d
    00000168: 	cmpl	%r9d, %r13d
    0000016b: 	jle	.Ltmp770 # Offset: 363
    00000171: 	movslq	%r9d, %r9
    00000174: 	addb	(%r14,%r9), %al
    00000178: 	leal	0x7(%rdx), %r9d
    0000017c: 	cmpl	%r9d, %r13d
    0000017f: 	jle	.Ltmp770 # Offset: 383
    00000181: 	movslq	%r9d, %r9
    00000184: 	addb	(%r14,%r9), %al
    00000188: 	leal	0x8(%rdx), %r9d
    0000018c: 	cmpl	%r9d, %r13d
    0000018f: 	jle	.Ltmp770 # Offset: 399
    00000191: 	movslq	%r9d, %r9
    00000194: 	addb	(%r14,%r9), %al
    00000198: 	leal	0x9(%rdx), %r9d
    0000019c: 	cmpl	%r9d, %r13d
    0000019f: 	jle	.Ltmp770 # Offset: 415
    000001a1: 	movslq	%r9d, %r9
    000001a4: 	addb	(%r14,%r9), %al
    000001a8: 	leal	0xa(%rdx), %r9d
    000001ac: 	cmpl	%r9d, %r13d
    000001af: 	jle	.Ltmp770 # Offset: 431
    000001b1: 	movslq	%r9d, %r9
    000001b4: 	addb	(%r14,%r9), %al
    000001b8: 	leal	0xb(%rdx), %r9d
    000001bc: 	cmpl	%r9d, %r13d
    000001bf: 	jle	.Ltmp770 # Offset: 447
    000001c1: 	movslq	%r9d, %r9
    000001c4: 	addb	(%r14,%r9), %al
    000001c8: 	leal	0xc(%rdx), %r9d
    000001cc: 	cmpl	%r9d, %r13d
    000001cf: 	jle	.Ltmp770 # Offset: 463
    000001d1: 	movslq	%r9d, %r9
    000001d4: 	addb	(%r14,%r9), %al
    000001d8: 	leal	0xd(%rdx), %r9d
    000001dc: 	cmpl	%r9d, %r13d
    000001df: 	jle	.Ltmp770 # Offset: 479
    000001e1: 	movslq	%r9d, %r9
    000001e4: 	addl	$0xe, %edx
    000001e7: 	addb	(%r14,%r9), %al
    000001eb: 	cmpl	%edx, %r13d
    000001ee: 	jle	.Ltmp770 # Offset: 494
    000001f0: 	movslq	%edx, %rdx
    000001f3: 	addb	(%r14,%rdx), %al
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp770:
    00000200: 	movl	%edi, %edx
    00000202: 	shll	$0x6, %edx
    00000205: 	cmpb	%al, %dl
    00000207: 	je	.Ltmp773 # Offset: 519
    00000209: 	movl	current_test(%rip), %edx
    0000020f: 	movq	%rbp, %rsi
    00000212: 	movl	$0x1, %edi
    00000217: 	xorl	%eax, %eax
    00000219: 	addl	$0x1, %r12d
    0000021d: 	callq	__printf_chk@PLT # Offset: 541
    00000222: 	movl	iterations(%rip), %esi
    00000228: 	cmpl	%esi, %r12d
    0000022b: 	jge	.Ltmp769 # Offset: 555
    0000022d: 	movq	init_value(%rip), %rdi
    00000234: 	movdqa	DATAat0x10fe0(%rip), %xmm5
    0000023c: 	movdqa	DATAat0x10fa0(%rip), %xmm4
    00000244: 	jmp	.Ltmp774 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp773:
    00000250: 	addl	$0x1, %r12d
    00000254: 	cmpl	%esi, %r12d
    00000257: 	jl	.Ltmp774 # Offset: 599
.Ltmp769:
    0000025d: 	callq	clock@PLT # Offset: 605
    00000262: 	pxor	%xmm0, %xmm0
    00000266: 	movq	0x8(%rsp), %rdi
    0000026b: 	movq	%rax, end_time(%rip)
    00000272: 	subq	start_time(%rip), %rax
    00000279: 	cvtsi2sd	%rax, %xmm0
    0000027e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000286: 	addq	$0x18, %rsp
    0000028a: 	popq	%rbx
    0000028b: 	popq	%rbp
    0000028c: 	popq	%r12
    0000028e: 	popq	%r13
    00000290: 	popq	%r14
    00000292: 	popq	%r15
    00000294: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 660
.Ltmp771:
    00000299: 	xorl	%edx, %edx
    0000029b: 	xorl	%eax, %eax
    0000029d: 	jmp	.Ltmp775 # Offset: 669
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIh27mask_high_by_shift_constantIhEEvPT_iPKc"

Binary Function "_Z13test_constantIt27mask_high_by_shift_constantItEEvPT_iPKc" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0xec70
  Size        : 0x202
  MaxSize     : 0x210
  Offset      : 0xec70
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt27mask_high_by_shift_constantItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %edi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%edi, %edi
    00000030: 	jle	.Ltmp776 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movq	init_value(%rip), %r9
    00000042: 	xorl	%r13d, %r13d
    00000045: 	movl	%eax, 0x4(%rsp)
    00000049: 	movl	%ebx, %eax
    0000004b: 	andl	$-0x8, %ebp
    0000004e: 	leaq	DATAat0x10f44(%rip), %r12
    00000055: 	shrl	$0x3, %eax
    00000058: 	subl	$0x1, %eax
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%r14,%rax), %r15
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp781:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp777 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp778 # Offset: 119
    0000007d: 	pxor	%xmm2, %xmm2
    00000081: 	movq	%r14, %rax
    00000084: 	movdqa	%xmm2, %xmm4
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp779:
    00000090: 	movdqu	(%rax), %xmm1
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm1, %xmm0
    0000009c: 	punpckhwd	%xmm4, %xmm1
    000000a0: 	punpcklwd	%xmm4, %xmm0
    000000a4: 	pslld	$0x4, %xmm1
    000000a9: 	pslld	$0x4, %xmm0
    000000ae: 	psrad	$0x4, %xmm1
    000000b3: 	psrad	$0x4, %xmm0
    000000b8: 	movdqa	%xmm0, %xmm3
    000000bc: 	punpcklwd	%xmm1, %xmm0
    000000c0: 	punpckhwd	%xmm1, %xmm3
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	punpckhwd	%xmm3, %xmm1
    000000cc: 	punpcklwd	%xmm3, %xmm0
    000000d0: 	punpcklwd	%xmm1, %xmm0
    000000d4: 	paddw	%xmm0, %xmm2
    000000d8: 	cmpq	%r15, %rax
    000000db: 	jne	.Ltmp779 # Offset: 219
    000000dd: 	movdqa	%xmm2, %xmm0
    000000e1: 	psrldq	$0x8, %xmm0
    000000e6: 	paddw	%xmm0, %xmm2
    000000ea: 	movdqa	%xmm2, %xmm0
    000000ee: 	psrldq	$0x4, %xmm0
    000000f3: 	paddw	%xmm0, %xmm2
    000000f7: 	movdqa	%xmm2, %xmm0
    000000fb: 	psrldq	$0x2, %xmm0
    00000100: 	paddw	%xmm0, %xmm2
    00000104: 	pextrw	$0x0, %xmm2, %eax
    00000109: 	cmpl	%ebx, %ebp
    0000010b: 	je	.Ltmp777 # Offset: 267
    0000010d: 	movl	%ebp, %edx
.Ltmp782:
    0000010f: 	movslq	%edx, %r10
    00000112: 	leaq	(%r10,%r10), %rsi
    00000116: 	addw	(%r14,%r10,2), %ax
    0000011b: 	leal	0x1(%rdx), %r10d
    0000011f: 	cmpl	%r10d, %ebx
    00000122: 	jle	.Ltmp777 # Offset: 290
    00000124: 	leal	0x2(%rdx), %r10d
    00000128: 	addw	0x2(%r14,%rsi), %ax
    0000012e: 	cmpl	%r10d, %ebx
    00000131: 	jle	.Ltmp777 # Offset: 305
    00000133: 	leal	0x3(%rdx), %r10d
    00000137: 	addw	0x4(%r14,%rsi), %ax
    0000013d: 	cmpl	%r10d, %ebx
    00000140: 	jle	.Ltmp777 # Offset: 320
    00000142: 	leal	0x4(%rdx), %r10d
    00000146: 	addw	0x6(%r14,%rsi), %ax
    0000014c: 	cmpl	%r10d, %ebx
    0000014f: 	jle	.Ltmp777 # Offset: 335
    00000151: 	leal	0x5(%rdx), %r10d
    00000155: 	addw	0x8(%r14,%rsi), %ax
    0000015b: 	cmpl	%r10d, %ebx
    0000015e: 	jle	.Ltmp777 # Offset: 350
    00000160: 	addl	$0x6, %edx
    00000163: 	addw	0xa(%r14,%rsi), %ax
    00000169: 	cmpl	%edx, %ebx
    0000016b: 	jle	.Ltmp777 # Offset: 363
    0000016d: 	addw	0xc(%r14,%rsi), %ax
.Ltmp777:
    00000173: 	imulw	$0x1f40, %r9w, %dx
    00000179: 	cmpw	%ax, %dx
    0000017c: 	je	.Ltmp780 # Offset: 380
    0000017e: 	movl	current_test(%rip), %edx
    00000184: 	movl	$0x1, %edi
    00000189: 	movq	%r12, %rsi
    0000018c: 	xorl	%eax, %eax
    0000018e: 	addl	$0x1, %r13d
    00000192: 	callq	__printf_chk@PLT # Offset: 402
    00000197: 	movl	iterations(%rip), %edi
    0000019d: 	cmpl	%edi, %r13d
    000001a0: 	jge	.Ltmp776 # Offset: 416
    000001a2: 	movq	init_value(%rip), %r9
    000001a9: 	jmp	.Ltmp781 # Offset: 425
    000001ae: 	nop # Size: 2
.Ltmp780:
    000001b0: 	addl	$0x1, %r13d
    000001b4: 	cmpl	%edi, %r13d
    000001b7: 	jl	.Ltmp781 # Offset: 439
.Ltmp776:
    000001bd: 	callq	clock@PLT # Offset: 445
    000001c2: 	pxor	%xmm0, %xmm0
    000001c6: 	movq	0x8(%rsp), %rdi
    000001cb: 	movq	%rax, end_time(%rip)
    000001d2: 	subq	start_time(%rip), %rax
    000001d9: 	cvtsi2sd	%rax, %xmm0
    000001de: 	divsd	DATAat0x10f68(%rip), %xmm0
    000001e6: 	addq	$0x18, %rsp
    000001ea: 	popq	%rbx
    000001eb: 	popq	%rbp
    000001ec: 	popq	%r12
    000001ee: 	popq	%r13
    000001f0: 	popq	%r14
    000001f2: 	popq	%r15
    000001f4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 500
.Ltmp778:
    000001f9: 	xorl	%edx, %edx
    000001fb: 	xorl	%eax, %eax
    000001fd: 	jmp	.Ltmp782 # Offset: 509
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt27mask_high_by_shift_constantItEEvPT_iPKc"

Binary Function "_Z13test_constantIj18mask_high_constantIjEEvPT_iPKc" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0xee80
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0xee80
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj18mask_high_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp783 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	xorl	%r13d, %r13d
    00000041: 	movq	init_value(%rip), %rdi
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	movdqa	DATAat0x10ff0(%rip), %xmm2
    00000057: 	andl	$-0x4, %ebp
    0000005a: 	shrl	$0x2, %eax
    0000005d: 	leaq	DATAat0x10f44(%rip), %r12
    00000064: 	subl	$0x1, %eax
    00000067: 	shlq	$0x4, %rax
    0000006b: 	leaq	0x10(%r15,%rax), %rbx
.Ltmp788:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp784 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp785 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp786:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddd	%xmm0, %xmm1
    000000a0: 	cmpq	%rbx, %rax
    000000a3: 	jne	.Ltmp786 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movl	%ebp, %edx
    000000ab: 	psrldq	$0x8, %xmm0
    000000b0: 	paddd	%xmm0, %xmm1
    000000b4: 	movdqa	%xmm1, %xmm0
    000000b8: 	psrldq	$0x4, %xmm0
    000000bd: 	paddd	%xmm0, %xmm1
    000000c1: 	movd	%xmm1, %eax
    000000c5: 	cmpl	%r14d, %ebp
    000000c8: 	je	.Ltmp784 # Offset: 200
.Ltmp789:
    000000ca: 	movslq	%edx, %r9
    000000cd: 	leaq	(,%r9,4), %r10
    000000d5: 	movl	(%r15,%r9,4), %r9d
    000000d9: 	andl	$0xfffffff, %r9d
    000000e0: 	addl	%r9d, %eax
    000000e3: 	leal	0x1(%rdx), %r9d
    000000e7: 	cmpl	%r9d, %r14d
    000000ea: 	jle	.Ltmp784 # Offset: 234
    000000ec: 	movl	0x4(%r15,%r10), %r9d
    000000f1: 	addl	$0x2, %edx
    000000f4: 	andl	$0xfffffff, %r9d
    000000fb: 	addl	%r9d, %eax
    000000fe: 	cmpl	%edx, %r14d
    00000101: 	jle	.Ltmp784 # Offset: 257
    00000103: 	movl	0x8(%r15,%r10), %edx
    00000108: 	andl	$0xfffffff, %edx
    0000010e: 	addl	%edx, %eax
.Ltmp784:
    00000110: 	movl	%edi, %edx
    00000112: 	andl	$0xfffffff, %edx
    00000118: 	imull	$0x1f40, %edx, %edx
    0000011e: 	cmpl	%eax, %edx
    00000120: 	je	.Ltmp787 # Offset: 288
    00000122: 	movl	current_test(%rip), %edx
    00000128: 	movq	%r12, %rsi
    0000012b: 	movl	$0x1, %edi
    00000130: 	xorl	%eax, %eax
    00000132: 	addl	$0x1, %r13d
    00000136: 	callq	__printf_chk@PLT # Offset: 310
    0000013b: 	movl	iterations(%rip), %esi
    00000141: 	cmpl	%esi, %r13d
    00000144: 	jge	.Ltmp783 # Offset: 324
    00000146: 	movq	init_value(%rip), %rdi
    0000014d: 	movdqa	DATAat0x10ff0(%rip), %xmm2
    00000155: 	jmp	.Ltmp788 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp787:
    00000160: 	addl	$0x1, %r13d
    00000164: 	cmpl	%esi, %r13d
    00000167: 	jl	.Ltmp788 # Offset: 359
.Ltmp783:
    0000016d: 	callq	clock@PLT # Offset: 365
    00000172: 	pxor	%xmm0, %xmm0
    00000176: 	movq	0x8(%rsp), %rdi
    0000017b: 	movq	%rax, end_time(%rip)
    00000182: 	subq	start_time(%rip), %rax
    00000189: 	cvtsi2sd	%rax, %xmm0
    0000018e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000196: 	addq	$0x18, %rsp
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	popq	%r15
    000001a4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 420
.Ltmp785:
    000001a9: 	xorl	%edx, %edx
    000001ab: 	xorl	%eax, %eax
    000001ad: 	jmp	.Ltmp789 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj18mask_high_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIj27mask_high_by_shift_constantIjEEvPT_iPKc" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0xf040
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0xf040
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj27mask_high_by_shift_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp790 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	xorl	%r13d, %r13d
    00000041: 	movq	init_value(%rip), %rdi
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	movdqa	DATAat0x10ff0(%rip), %xmm2
    00000057: 	andl	$-0x4, %ebp
    0000005a: 	shrl	$0x2, %eax
    0000005d: 	leaq	DATAat0x10f44(%rip), %r12
    00000064: 	subl	$0x1, %eax
    00000067: 	shlq	$0x4, %rax
    0000006b: 	leaq	0x10(%r15,%rax), %rbx
.Ltmp795:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp791 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp792 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp793:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	pand	%xmm2, %xmm0
    0000009c: 	paddd	%xmm0, %xmm1
    000000a0: 	cmpq	%rbx, %rax
    000000a3: 	jne	.Ltmp793 # Offset: 163
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	movl	%ebp, %edx
    000000ab: 	psrldq	$0x8, %xmm0
    000000b0: 	paddd	%xmm0, %xmm1
    000000b4: 	movdqa	%xmm1, %xmm0
    000000b8: 	psrldq	$0x4, %xmm0
    000000bd: 	paddd	%xmm0, %xmm1
    000000c1: 	movd	%xmm1, %eax
    000000c5: 	cmpl	%r14d, %ebp
    000000c8: 	je	.Ltmp791 # Offset: 200
.Ltmp796:
    000000ca: 	movslq	%edx, %r9
    000000cd: 	leaq	(,%r9,4), %r10
    000000d5: 	movl	(%r15,%r9,4), %r9d
    000000d9: 	andl	$0xfffffff, %r9d
    000000e0: 	addl	%r9d, %eax
    000000e3: 	leal	0x1(%rdx), %r9d
    000000e7: 	cmpl	%r9d, %r14d
    000000ea: 	jle	.Ltmp791 # Offset: 234
    000000ec: 	movl	0x4(%r15,%r10), %r9d
    000000f1: 	addl	$0x2, %edx
    000000f4: 	andl	$0xfffffff, %r9d
    000000fb: 	addl	%r9d, %eax
    000000fe: 	cmpl	%edx, %r14d
    00000101: 	jle	.Ltmp791 # Offset: 257
    00000103: 	movl	0x8(%r15,%r10), %edx
    00000108: 	andl	$0xfffffff, %edx
    0000010e: 	addl	%edx, %eax
.Ltmp791:
    00000110: 	movl	%edi, %edx
    00000112: 	andl	$0xfffffff, %edx
    00000118: 	imull	$0x1f40, %edx, %edx
    0000011e: 	cmpl	%eax, %edx
    00000120: 	je	.Ltmp794 # Offset: 288
    00000122: 	movl	current_test(%rip), %edx
    00000128: 	movq	%r12, %rsi
    0000012b: 	movl	$0x1, %edi
    00000130: 	xorl	%eax, %eax
    00000132: 	addl	$0x1, %r13d
    00000136: 	callq	__printf_chk@PLT # Offset: 310
    0000013b: 	movl	iterations(%rip), %esi
    00000141: 	cmpl	%esi, %r13d
    00000144: 	jge	.Ltmp790 # Offset: 324
    00000146: 	movq	init_value(%rip), %rdi
    0000014d: 	movdqa	DATAat0x10ff0(%rip), %xmm2
    00000155: 	jmp	.Ltmp795 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp794:
    00000160: 	addl	$0x1, %r13d
    00000164: 	cmpl	%esi, %r13d
    00000167: 	jl	.Ltmp795 # Offset: 359
.Ltmp790:
    0000016d: 	callq	clock@PLT # Offset: 365
    00000172: 	pxor	%xmm0, %xmm0
    00000176: 	movq	0x8(%rsp), %rdi
    0000017b: 	movq	%rax, end_time(%rip)
    00000182: 	subq	start_time(%rip), %rax
    00000189: 	cvtsi2sd	%rax, %xmm0
    0000018e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000196: 	addq	$0x18, %rsp
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	popq	%r15
    000001a4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 420
.Ltmp792:
    000001a9: 	xorl	%edx, %edx
    000001ab: 	xorl	%eax, %eax
    000001ad: 	jmp	.Ltmp796 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj27mask_high_by_shift_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIm18mask_high_constantImEEvPT_iPKc" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0xf200
  Size        : 0x158
  MaxSize     : 0x160
  Offset      : 0xf200
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm18mask_high_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp797 # Offset: 49
    00000037: 	movl	%r15d, %eax
    0000003a: 	movl	%r15d, %ebp
    0000003d: 	movdqa	DATAat0x11000(%rip), %xmm2
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movabsq	$0xfffffffffffffff, %r13
    00000052: 	shrl	%eax
    00000054: 	andl	$-0x2, %ebp
    00000057: 	subl	$0x1, %eax
    0000005a: 	shlq	$0x4, %rax
    0000005e: 	leaq	0x10(%rbx,%rax), %r14
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp802:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%r15d, %r15d
    0000006d: 	jle	.Ltmp798 # Offset: 109
    0000006f: 	cmpl	$0x1, %r15d
    00000073: 	je	.Ltmp799 # Offset: 115
    00000079: 	movq	%rbx, %rax
    0000007c: 	pxor	%xmm0, %xmm0
.Ltmp800:
    00000080: 	movdqu	(%rax), %xmm1
    00000084: 	addq	$0x10, %rax
    00000088: 	pand	%xmm2, %xmm1
    0000008c: 	paddq	%xmm1, %xmm0
    00000090: 	cmpq	%rax, %r14
    00000093: 	jne	.Ltmp800 # Offset: 147
    00000095: 	movdqa	%xmm0, %xmm1
    00000099: 	movslq	%ebp, %rdx
    0000009c: 	psrldq	$0x8, %xmm1
    000000a1: 	paddq	%xmm1, %xmm0
    000000a5: 	movq	%xmm0, %rax
    000000aa: 	cmpl	%r15d, %ebp
    000000ad: 	je	.Ltmp798 # Offset: 173
.Ltmp803:
    000000af: 	movq	(%rbx,%rdx,8), %rcx
    000000b3: 	andq	%r13, %rcx
    000000b6: 	addq	%rcx, %rax
.Ltmp798:
    000000b9: 	movq	init_value(%rip), %rdx
    000000c0: 	andq	%r13, %rdx
    000000c3: 	imulq	$0x1f40, %rdx, %rdx
    000000ca: 	cmpq	%rax, %rdx
    000000cd: 	je	.Ltmp801 # Offset: 205
    000000cf: 	movl	current_test(%rip), %edx
    000000d5: 	xorl	%eax, %eax
    000000d7: 	movl	$0x1, %edi
    000000dc: 	addl	$0x1, %r12d
    000000e0: 	leaq	DATAat0x10f44(%rip), %rsi
    000000e7: 	callq	__printf_chk@PLT # Offset: 231
    000000ec: 	movl	iterations(%rip), %esi
    000000f2: 	movdqa	DATAat0x11000(%rip), %xmm2
    000000fa: 	cmpl	%esi, %r12d
    000000fd: 	jl	.Ltmp802 # Offset: 253
.Ltmp797:
    00000103: 	callq	clock@PLT # Offset: 259
    00000108: 	pxor	%xmm0, %xmm0
    0000010c: 	movq	0x8(%rsp), %rdi
    00000111: 	movq	%rax, end_time(%rip)
    00000118: 	subq	start_time(%rip), %rax
    0000011f: 	cvtsi2sd	%rax, %xmm0
    00000124: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000012c: 	addq	$0x18, %rsp
    00000130: 	popq	%rbx
    00000131: 	popq	%rbp
    00000132: 	popq	%r12
    00000134: 	popq	%r13
    00000136: 	popq	%r14
    00000138: 	popq	%r15
    0000013a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 314
    0000013f: 	nop # Size: 1
.Ltmp801:
    00000140: 	addl	$0x1, %r12d
    00000144: 	cmpl	%esi, %r12d
    00000147: 	jl	.Ltmp802 # Offset: 327
    0000014d: 	jmp	.Ltmp797 # Offset: 333
.Ltmp799:
    0000014f: 	xorl	%edx, %edx
    00000151: 	xorl	%eax, %eax
    00000153: 	jmp	.Ltmp803 # Offset: 339
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm18mask_high_constantImEEvPT_iPKc"

Binary Function "_Z13test_constantIm27mask_high_by_shift_constantImEEvPT_iPKc" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0xf360
  Size        : 0x158
  MaxSize     : 0x160
  Offset      : 0xf360
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm27mask_high_by_shift_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp804 # Offset: 49
    00000037: 	movl	%r15d, %eax
    0000003a: 	movl	%r15d, %ebp
    0000003d: 	movdqa	DATAat0x11000(%rip), %xmm2
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movabsq	$0xfffffffffffffff, %r13
    00000052: 	shrl	%eax
    00000054: 	andl	$-0x2, %ebp
    00000057: 	subl	$0x1, %eax
    0000005a: 	shlq	$0x4, %rax
    0000005e: 	leaq	0x10(%rbx,%rax), %r14
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp809:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%r15d, %r15d
    0000006d: 	jle	.Ltmp805 # Offset: 109
    0000006f: 	cmpl	$0x1, %r15d
    00000073: 	je	.Ltmp806 # Offset: 115
    00000079: 	movq	%rbx, %rax
    0000007c: 	pxor	%xmm0, %xmm0
.Ltmp807:
    00000080: 	movdqu	(%rax), %xmm1
    00000084: 	addq	$0x10, %rax
    00000088: 	pand	%xmm2, %xmm1
    0000008c: 	paddq	%xmm1, %xmm0
    00000090: 	cmpq	%rax, %r14
    00000093: 	jne	.Ltmp807 # Offset: 147
    00000095: 	movdqa	%xmm0, %xmm1
    00000099: 	movslq	%ebp, %rdx
    0000009c: 	psrldq	$0x8, %xmm1
    000000a1: 	paddq	%xmm1, %xmm0
    000000a5: 	movq	%xmm0, %rax
    000000aa: 	cmpl	%r15d, %ebp
    000000ad: 	je	.Ltmp805 # Offset: 173
.Ltmp810:
    000000af: 	movq	(%rbx,%rdx,8), %rcx
    000000b3: 	andq	%r13, %rcx
    000000b6: 	addq	%rcx, %rax
.Ltmp805:
    000000b9: 	movq	init_value(%rip), %rdx
    000000c0: 	andq	%r13, %rdx
    000000c3: 	imulq	$0x1f40, %rdx, %rdx
    000000ca: 	cmpq	%rax, %rdx
    000000cd: 	je	.Ltmp808 # Offset: 205
    000000cf: 	movl	current_test(%rip), %edx
    000000d5: 	xorl	%eax, %eax
    000000d7: 	movl	$0x1, %edi
    000000dc: 	addl	$0x1, %r12d
    000000e0: 	leaq	DATAat0x10f44(%rip), %rsi
    000000e7: 	callq	__printf_chk@PLT # Offset: 231
    000000ec: 	movl	iterations(%rip), %esi
    000000f2: 	movdqa	DATAat0x11000(%rip), %xmm2
    000000fa: 	cmpl	%esi, %r12d
    000000fd: 	jl	.Ltmp809 # Offset: 253
.Ltmp804:
    00000103: 	callq	clock@PLT # Offset: 259
    00000108: 	pxor	%xmm0, %xmm0
    0000010c: 	movq	0x8(%rsp), %rdi
    00000111: 	movq	%rax, end_time(%rip)
    00000118: 	subq	start_time(%rip), %rax
    0000011f: 	cvtsi2sd	%rax, %xmm0
    00000124: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000012c: 	addq	$0x18, %rsp
    00000130: 	popq	%rbx
    00000131: 	popq	%rbp
    00000132: 	popq	%r12
    00000134: 	popq	%r13
    00000136: 	popq	%r14
    00000138: 	popq	%r15
    0000013a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 314
    0000013f: 	nop # Size: 1
.Ltmp808:
    00000140: 	addl	$0x1, %r12d
    00000144: 	cmpl	%esi, %r12d
    00000147: 	jl	.Ltmp809 # Offset: 327
    0000014d: 	jmp	.Ltmp804 # Offset: 333
.Ltmp806:
    0000014f: 	xorl	%edx, %edx
    00000151: 	xorl	%eax, %eax
    00000153: 	jmp	.Ltmp810 # Offset: 339
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm27mask_high_by_shift_constantImEEvPT_iPKc"

Binary Function "_Z14test_variable1Ih27mask_high_by_shift_variableIhEEvPT_iS2_PKc" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0xf4c0
  Size        : 0x372
  MaxSize     : 0x380
  Offset      : 0xf4c0
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ih27mask_high_by_shift_variableIhEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%edx, %r12d
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %edi
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%edi, %edi
    00000033: 	jle	.Ltmp811 # Offset: 51
    00000039: 	leal	-0x1(%rbx), %eax
    0000003c: 	movl	%ebx, %ebp
    0000003e: 	movq	init_value(%rip), %r10
    00000045: 	movzbl	%r12b, %ecx
    00000049: 	movl	%eax, 0x8(%rsp)
    0000004d: 	movl	%ebx, %eax
    0000004f: 	movdqa	DATAat0x10fa0(%rip), %xmm7
    00000057: 	andl	$-0x10, %ebp
    0000005a: 	shrl	$0x4, %eax
    0000005d: 	xorl	%r13d, %r13d
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%r14,%rax), %r15
    0000006c: 	movzbl	%r12b, %eax
    00000070: 	leaq	DATAat0x10f44(%rip), %r12
    00000077: 	movq	%rax, %xmm3
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp816:
    00000080: 	xorl	%eax, %eax
    00000082: 	testl	%ebx, %ebx
    00000084: 	jle	.Ltmp812 # Offset: 132
    0000008a: 	cmpl	$0xe, 0x8(%rsp)
    0000008f: 	jbe	.Ltmp813 # Offset: 143
    00000095: 	pxor	%xmm5, %xmm5
    00000099: 	movq	%r14, %rax
    0000009c: 	pxor	%xmm4, %xmm4
    000000a0: 	movdqa	%xmm5, %xmm6
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp814:
    000000a8: 	movdqu	(%rax), %xmm2
    000000ac: 	addq	$0x10, %rax
    000000b0: 	movdqa	%xmm2, %xmm1
    000000b4: 	punpckhbw	%xmm6, %xmm2
    000000b8: 	punpcklbw	%xmm6, %xmm1
    000000bc: 	movdqa	%xmm1, %xmm0
    000000c0: 	punpckhwd	%xmm4, %xmm1
    000000c4: 	punpcklwd	%xmm4, %xmm0
    000000c8: 	pslld	%xmm3, %xmm1
    000000cc: 	pslld	%xmm3, %xmm0
    000000d0: 	psrad	%xmm3, %xmm1
    000000d4: 	psrad	%xmm3, %xmm0
    000000d8: 	movdqa	%xmm0, %xmm8
    000000dd: 	punpcklwd	%xmm1, %xmm0
    000000e1: 	punpckhwd	%xmm1, %xmm8
    000000e6: 	movdqa	%xmm0, %xmm1
    000000ea: 	punpckhwd	%xmm8, %xmm1
    000000ef: 	punpcklwd	%xmm8, %xmm0
    000000f4: 	punpcklwd	%xmm1, %xmm0
    000000f8: 	movdqa	%xmm2, %xmm1
    000000fc: 	punpckhwd	%xmm4, %xmm2
    00000100: 	punpcklwd	%xmm4, %xmm1
    00000104: 	pslld	%xmm3, %xmm2
    00000108: 	pand	%xmm7, %xmm0
    0000010c: 	pslld	%xmm3, %xmm1
    00000110: 	psrad	%xmm3, %xmm2
    00000114: 	psrad	%xmm3, %xmm1
    00000118: 	movdqa	%xmm1, %xmm8
    0000011d: 	punpcklwd	%xmm2, %xmm1
    00000121: 	punpckhwd	%xmm2, %xmm8
    00000126: 	movdqa	%xmm1, %xmm2
    0000012a: 	punpckhwd	%xmm8, %xmm2
    0000012f: 	punpcklwd	%xmm8, %xmm1
    00000134: 	punpcklwd	%xmm2, %xmm1
    00000138: 	pand	%xmm7, %xmm1
    0000013c: 	packuswb	%xmm1, %xmm0
    00000140: 	paddb	%xmm0, %xmm5
    00000144: 	cmpq	%r15, %rax
    00000147: 	jne	.Ltmp814 # Offset: 327
    0000014d: 	movdqa	%xmm5, %xmm0
    00000151: 	psrldq	$0x8, %xmm0
    00000156: 	paddb	%xmm0, %xmm5
    0000015a: 	psadbw	%xmm6, %xmm5
    0000015e: 	movd	%xmm5, %eax
    00000162: 	cmpl	%ebx, %ebp
    00000164: 	je	.Ltmp812 # Offset: 356
    0000016a: 	movl	%ebp, %edx
.Ltmp817:
    0000016c: 	movslq	%edx, %rsi
    0000016f: 	movzbl	(%r14,%rsi), %esi
    00000174: 	shll	%cl, %esi
    00000176: 	sarl	%cl, %esi
    00000178: 	addl	%esi, %eax
    0000017a: 	leal	0x1(%rdx), %esi
    0000017d: 	cmpl	%esi, %ebx
    0000017f: 	jle	.Ltmp812 # Offset: 383
    00000185: 	movslq	%esi, %rsi
    00000188: 	movzbl	(%r14,%rsi), %esi
    0000018d: 	shll	%cl, %esi
    0000018f: 	sarl	%cl, %esi
    00000191: 	addl	%esi, %eax
    00000193: 	leal	0x2(%rdx), %esi
    00000196: 	cmpl	%esi, %ebx
    00000198: 	jle	.Ltmp812 # Offset: 408
    0000019e: 	movslq	%esi, %rsi
    000001a1: 	movzbl	(%r14,%rsi), %esi
    000001a6: 	shll	%cl, %esi
    000001a8: 	sarl	%cl, %esi
    000001aa: 	addl	%esi, %eax
    000001ac: 	leal	0x3(%rdx), %esi
    000001af: 	cmpl	%esi, %ebx
    000001b1: 	jle	.Ltmp812 # Offset: 433
    000001b7: 	movslq	%esi, %rsi
    000001ba: 	movzbl	(%r14,%rsi), %esi
    000001bf: 	shll	%cl, %esi
    000001c1: 	sarl	%cl, %esi
    000001c3: 	addl	%esi, %eax
    000001c5: 	leal	0x4(%rdx), %esi
    000001c8: 	cmpl	%esi, %ebx
    000001ca: 	jle	.Ltmp812 # Offset: 458
    000001d0: 	movslq	%esi, %rsi
    000001d3: 	movzbl	(%r14,%rsi), %esi
    000001d8: 	shll	%cl, %esi
    000001da: 	sarl	%cl, %esi
    000001dc: 	addl	%esi, %eax
    000001de: 	leal	0x5(%rdx), %esi
    000001e1: 	cmpl	%esi, %ebx
    000001e3: 	jle	.Ltmp812 # Offset: 483
    000001e9: 	movslq	%esi, %rsi
    000001ec: 	movzbl	(%r14,%rsi), %esi
    000001f1: 	shll	%cl, %esi
    000001f3: 	sarl	%cl, %esi
    000001f5: 	addl	%esi, %eax
    000001f7: 	leal	0x6(%rdx), %esi
    000001fa: 	cmpl	%esi, %ebx
    000001fc: 	jle	.Ltmp812 # Offset: 508
    00000202: 	movslq	%esi, %rsi
    00000205: 	movzbl	(%r14,%rsi), %esi
    0000020a: 	shll	%cl, %esi
    0000020c: 	sarl	%cl, %esi
    0000020e: 	addl	%esi, %eax
    00000210: 	leal	0x7(%rdx), %esi
    00000213: 	cmpl	%esi, %ebx
    00000215: 	jle	.Ltmp812 # Offset: 533
    0000021b: 	movslq	%esi, %rsi
    0000021e: 	movzbl	(%r14,%rsi), %esi
    00000223: 	shll	%cl, %esi
    00000225: 	sarl	%cl, %esi
    00000227: 	addl	%esi, %eax
    00000229: 	leal	0x8(%rdx), %esi
    0000022c: 	cmpl	%esi, %ebx
    0000022e: 	jle	.Ltmp812 # Offset: 558
    00000234: 	movslq	%esi, %rsi
    00000237: 	movzbl	(%r14,%rsi), %esi
    0000023c: 	shll	%cl, %esi
    0000023e: 	sarl	%cl, %esi
    00000240: 	addl	%esi, %eax
    00000242: 	leal	0x9(%rdx), %esi
    00000245: 	cmpl	%esi, %ebx
    00000247: 	jle	.Ltmp812 # Offset: 583
    00000249: 	movslq	%esi, %rsi
    0000024c: 	movzbl	(%r14,%rsi), %esi
    00000251: 	shll	%cl, %esi
    00000253: 	sarl	%cl, %esi
    00000255: 	addl	%esi, %eax
    00000257: 	leal	0xa(%rdx), %esi
    0000025a: 	cmpl	%esi, %ebx
    0000025c: 	jle	.Ltmp812 # Offset: 604
    0000025e: 	movslq	%esi, %rsi
    00000261: 	movzbl	(%r14,%rsi), %esi
    00000266: 	shll	%cl, %esi
    00000268: 	sarl	%cl, %esi
    0000026a: 	addl	%esi, %eax
    0000026c: 	leal	0xb(%rdx), %esi
    0000026f: 	cmpl	%esi, %ebx
    00000271: 	jle	.Ltmp812 # Offset: 625
    00000273: 	movslq	%esi, %rsi
    00000276: 	movzbl	(%r14,%rsi), %esi
    0000027b: 	shll	%cl, %esi
    0000027d: 	sarl	%cl, %esi
    0000027f: 	addl	%esi, %eax
    00000281: 	leal	0xc(%rdx), %esi
    00000284: 	cmpl	%esi, %ebx
    00000286: 	jle	.Ltmp812 # Offset: 646
    00000288: 	movslq	%esi, %rsi
    0000028b: 	movzbl	(%r14,%rsi), %esi
    00000290: 	shll	%cl, %esi
    00000292: 	sarl	%cl, %esi
    00000294: 	addl	%esi, %eax
    00000296: 	leal	0xd(%rdx), %esi
    00000299: 	cmpl	%esi, %ebx
    0000029b: 	jle	.Ltmp812 # Offset: 667
    0000029d: 	movslq	%esi, %rsi
    000002a0: 	addl	$0xe, %edx
    000002a3: 	movzbl	(%r14,%rsi), %esi
    000002a8: 	shll	%cl, %esi
    000002aa: 	sarl	%cl, %esi
    000002ac: 	addl	%esi, %eax
    000002ae: 	cmpl	%edx, %ebx
    000002b0: 	jle	.Ltmp812 # Offset: 688
    000002b2: 	movslq	%edx, %rdx
    000002b5: 	movzbl	(%r14,%rdx), %edx
    000002ba: 	shll	%cl, %edx
    000002bc: 	sarl	%cl, %edx
    000002be: 	addl	%edx, %eax
.Ltmp812:
    000002c0: 	movzbl	%r10b, %edx
    000002c4: 	shll	%cl, %edx
    000002c6: 	sarl	%cl, %edx
    000002c8: 	shll	$0x6, %edx
    000002cb: 	cmpb	%al, %dl
    000002cd: 	je	.Ltmp815 # Offset: 717
    000002cf: 	movl	current_test(%rip), %edx
    000002d5: 	movl	$0x1, %edi
    000002da: 	movq	%r12, %rsi
    000002dd: 	xorl	%eax, %eax
    000002df: 	movl	%ecx, 0xc(%rsp)
    000002e3: 	addl	$0x1, %r13d
    000002e7: 	movq	%xmm3, 0x10(%rsp)
    000002ed: 	callq	__printf_chk@PLT # Offset: 749
    000002f2: 	movl	iterations(%rip), %edi
    000002f8: 	cmpl	%r13d, %edi
    000002fb: 	jle	.Ltmp811 # Offset: 763
    000002fd: 	movq	init_value(%rip), %r10
    00000304: 	movl	0xc(%rsp), %ecx
    00000308: 	movq	0x10(%rsp), %xmm3
    0000030e: 	movdqa	DATAat0x10fa0(%rip), %xmm7
    00000316: 	jmp	.Ltmp816 # Offset: 790
    0000031b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp815:
    00000320: 	addl	$0x1, %r13d
    00000324: 	cmpl	%edi, %r13d
    00000327: 	jl	.Ltmp816 # Offset: 807
.Ltmp811:
    0000032d: 	callq	clock@PLT # Offset: 813
    00000332: 	pxor	%xmm0, %xmm0
    00000336: 	movq	0x18(%rsp), %rdi
    0000033b: 	movq	%rax, end_time(%rip)
    00000342: 	subq	start_time(%rip), %rax
    00000349: 	cvtsi2sd	%rax, %xmm0
    0000034e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000356: 	addq	$0x28, %rsp
    0000035a: 	popq	%rbx
    0000035b: 	popq	%rbp
    0000035c: 	popq	%r12
    0000035e: 	popq	%r13
    00000360: 	popq	%r14
    00000362: 	popq	%r15
    00000364: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 868
.Ltmp813:
    00000369: 	xorl	%edx, %edx
    0000036b: 	xorl	%eax, %eax
    0000036d: 	jmp	.Ltmp817 # Offset: 877
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ih27mask_high_by_shift_variableIhEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1It27mask_high_by_shift_variableItEEvPT_iS2_PKc" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0xf840
  Size        : 0x242
  MaxSize     : 0x250
  Offset      : 0xf840
  Section     : .text
  Orc Section : .local.text._Z14test_variable1It27mask_high_by_shift_variableItEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movl	%esi, %ebx
    00000015: 	subq	$0x18, %rsp
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %r10d
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%r10d, %r10d
    00000034: 	jle	.Ltmp818 # Offset: 52
    0000003a: 	leal	-0x1(%rbx), %eax
    0000003d: 	movzwl	%bp, %ecx
    00000040: 	movq	init_value(%rip), %r11
    00000047: 	movl	%ebx, %ebp
    00000049: 	movl	%eax, (%rsp)
    0000004c: 	movl	%ebx, %eax
    0000004e: 	andl	$-0x8, %ebp
    00000051: 	xorl	%r13d, %r13d
    00000054: 	shrl	$0x3, %eax
    00000057: 	leaq	DATAat0x10f44(%rip), %r12
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%r14,%rax), %r15
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp823:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%ebx, %ebx
    00000074: 	jle	.Ltmp819 # Offset: 116
    0000007a: 	cmpl	$0x6, (%rsp)
    0000007e: 	jbe	.Ltmp820 # Offset: 126
    00000084: 	pxor	%xmm3, %xmm3
    00000088: 	movslq	%ecx, %rdi
    0000008b: 	movq	%r14, %rax
    0000008e: 	movq	%rdi, %xmm2
    00000093: 	movdqa	%xmm3, %xmm5
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp821:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movdqa	%xmm1, %xmm0
    000000ac: 	punpckhwd	%xmm5, %xmm1
    000000b0: 	punpcklwd	%xmm5, %xmm0
    000000b4: 	pslld	%xmm2, %xmm1
    000000b8: 	pslld	%xmm2, %xmm0
    000000bc: 	psrad	%xmm2, %xmm1
    000000c0: 	psrad	%xmm2, %xmm0
    000000c4: 	movdqa	%xmm0, %xmm4
    000000c8: 	punpcklwd	%xmm1, %xmm0
    000000cc: 	punpckhwd	%xmm1, %xmm4
    000000d0: 	movdqa	%xmm0, %xmm1
    000000d4: 	punpckhwd	%xmm4, %xmm1
    000000d8: 	punpcklwd	%xmm4, %xmm0
    000000dc: 	punpcklwd	%xmm1, %xmm0
    000000e0: 	paddw	%xmm0, %xmm3
    000000e4: 	cmpq	%r15, %rax
    000000e7: 	jne	.Ltmp821 # Offset: 231
    000000e9: 	movdqa	%xmm3, %xmm0
    000000ed: 	psrldq	$0x8, %xmm0
    000000f2: 	paddw	%xmm0, %xmm3
    000000f6: 	movdqa	%xmm3, %xmm0
    000000fa: 	psrldq	$0x4, %xmm0
    000000ff: 	paddw	%xmm0, %xmm3
    00000103: 	movdqa	%xmm3, %xmm0
    00000107: 	psrldq	$0x2, %xmm0
    0000010c: 	paddw	%xmm0, %xmm3
    00000110: 	pextrw	$0x0, %xmm3, %eax
    00000115: 	cmpl	%ebx, %ebp
    00000117: 	je	.Ltmp819 # Offset: 279
    0000011d: 	movl	%ebp, %edx
.Ltmp824:
    0000011f: 	movslq	%edx, %rsi
    00000122: 	leaq	(%rsi,%rsi), %rdi
    00000126: 	movzwl	(%r14,%rsi,2), %esi
    0000012b: 	shll	%cl, %esi
    0000012d: 	sarl	%cl, %esi
    0000012f: 	addl	%esi, %eax
    00000131: 	leal	0x1(%rdx), %esi
    00000134: 	cmpl	%esi, %ebx
    00000136: 	jle	.Ltmp819 # Offset: 310
    00000138: 	movzwl	0x2(%r14,%rdi), %esi
    0000013e: 	shll	%cl, %esi
    00000140: 	sarl	%cl, %esi
    00000142: 	addl	%esi, %eax
    00000144: 	leal	0x2(%rdx), %esi
    00000147: 	cmpl	%ebx, %esi
    00000149: 	jge	.Ltmp819 # Offset: 329
    0000014b: 	movzwl	0x4(%r14,%rdi), %esi
    00000151: 	shll	%cl, %esi
    00000153: 	sarl	%cl, %esi
    00000155: 	addl	%esi, %eax
    00000157: 	leal	0x3(%rdx), %esi
    0000015a: 	cmpl	%esi, %ebx
    0000015c: 	jle	.Ltmp819 # Offset: 348
    0000015e: 	movzwl	0x6(%r14,%rdi), %esi
    00000164: 	shll	%cl, %esi
    00000166: 	sarl	%cl, %esi
    00000168: 	addl	%esi, %eax
    0000016a: 	leal	0x4(%rdx), %esi
    0000016d: 	cmpl	%esi, %ebx
    0000016f: 	jle	.Ltmp819 # Offset: 367
    00000171: 	movzwl	0x8(%r14,%rdi), %esi
    00000177: 	shll	%cl, %esi
    00000179: 	sarl	%cl, %esi
    0000017b: 	addl	%esi, %eax
    0000017d: 	leal	0x5(%rdx), %esi
    00000180: 	cmpl	%esi, %ebx
    00000182: 	jle	.Ltmp819 # Offset: 386
    00000184: 	movzwl	0xa(%r14,%rdi), %esi
    0000018a: 	addl	$0x6, %edx
    0000018d: 	shll	%cl, %esi
    0000018f: 	sarl	%cl, %esi
    00000191: 	addl	%esi, %eax
    00000193: 	cmpl	%edx, %ebx
    00000195: 	jle	.Ltmp819 # Offset: 405
    00000197: 	movzwl	0xc(%r14,%rdi), %edx
    0000019d: 	shll	%cl, %edx
    0000019f: 	sarl	%cl, %edx
    000001a1: 	addl	%edx, %eax
.Ltmp819:
    000001a3: 	movzwl	%r11w, %edx
    000001a7: 	shll	%cl, %edx
    000001a9: 	sarl	%cl, %edx
    000001ab: 	imulw	$0x1f40, %dx, %dx
    000001b0: 	cmpw	%ax, %dx
    000001b3: 	je	.Ltmp822 # Offset: 435
    000001b5: 	movl	current_test(%rip), %edx
    000001bb: 	movq	%r12, %rsi
    000001be: 	movl	$0x1, %edi
    000001c3: 	xorl	%eax, %eax
    000001c5: 	movl	%ecx, 0x4(%rsp)
    000001c9: 	addl	$0x1, %r13d
    000001cd: 	callq	__printf_chk@PLT # Offset: 461
    000001d2: 	movl	iterations(%rip), %r10d
    000001d9: 	cmpl	%r10d, %r13d
    000001dc: 	jge	.Ltmp818 # Offset: 476
    000001de: 	movq	init_value(%rip), %r11
    000001e5: 	movl	0x4(%rsp), %ecx
    000001e9: 	jmp	.Ltmp823 # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp822:
    000001f0: 	addl	$0x1, %r13d
    000001f4: 	cmpl	%r10d, %r13d
    000001f7: 	jl	.Ltmp823 # Offset: 503
.Ltmp818:
    000001fd: 	callq	clock@PLT # Offset: 509
    00000202: 	pxor	%xmm0, %xmm0
    00000206: 	movq	0x8(%rsp), %rdi
    0000020b: 	movq	%rax, end_time(%rip)
    00000212: 	subq	start_time(%rip), %rax
    00000219: 	cvtsi2sd	%rax, %xmm0
    0000021e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000226: 	addq	$0x18, %rsp
    0000022a: 	popq	%rbx
    0000022b: 	popq	%rbp
    0000022c: 	popq	%r12
    0000022e: 	popq	%r13
    00000230: 	popq	%r14
    00000232: 	popq	%r15
    00000234: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 564
.Ltmp820:
    00000239: 	xorl	%edx, %edx
    0000023b: 	xorl	%eax, %eax
    0000023d: 	jmp	.Ltmp824 # Offset: 573
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1It27mask_high_by_shift_variableItEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Ij27mask_high_by_shift_variableIjEEvPT_iS2_PKc" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0xfa90
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0xfa90
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Ij27mask_high_by_shift_variableIjEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x18, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r10d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r10d, %r10d
    00000035: 	jle	.Ltmp825 # Offset: 53
    0000003b: 	leal	-0x1(%r14), %eax
    0000003f: 	movl	%r14d, %r13d
    00000042: 	movq	init_value(%rip), %r11
    00000049: 	xorl	%r12d, %r12d
    0000004c: 	movl	%eax, 0x4(%rsp)
    00000050: 	movl	%r14d, %eax
    00000053: 	andl	$-0x4, %r13d
    00000057: 	shrl	$0x2, %eax
    0000005a: 	subl	$0x1, %eax
    0000005d: 	shlq	$0x4, %rax
    00000061: 	leaq	0x10(%r15,%rax), %rbp
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp830:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp826 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp827 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	movd	%ebx, %xmm2
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp828:
    00000098: 	movdqu	(%rax), %xmm0
    0000009c: 	addq	$0x10, %rax
    000000a0: 	pslld	%xmm2, %xmm0
    000000a4: 	psrld	%xmm2, %xmm0
    000000a8: 	paddd	%xmm0, %xmm1
    000000ac: 	cmpq	%rbp, %rax
    000000af: 	jne	.Ltmp828 # Offset: 175
    000000b1: 	movdqa	%xmm1, %xmm0
    000000b5: 	movl	%r13d, %esi
    000000b8: 	psrldq	$0x8, %xmm0
    000000bd: 	paddd	%xmm0, %xmm1
    000000c1: 	movdqa	%xmm1, %xmm0
    000000c5: 	psrldq	$0x4, %xmm0
    000000ca: 	paddd	%xmm0, %xmm1
    000000ce: 	movd	%xmm1, %eax
    000000d2: 	cmpl	%r14d, %r13d
    000000d5: 	je	.Ltmp826 # Offset: 213
.Ltmp831:
    000000d7: 	movslq	%esi, %rdx
    000000da: 	movl	%ebx, %ecx
    000000dc: 	leaq	(,%rdx,4), %rdi
    000000e4: 	movl	(%r15,%rdx,4), %edx
    000000e8: 	shll	%cl, %edx
    000000ea: 	shrl	%cl, %edx
    000000ec: 	addl	%edx, %eax
    000000ee: 	leal	0x1(%rsi), %edx
    000000f1: 	cmpl	%edx, %r14d
    000000f4: 	jle	.Ltmp826 # Offset: 244
    000000f6: 	movl	0x4(%r15,%rdi), %edx
    000000fb: 	addl	$0x2, %esi
    000000fe: 	shll	%cl, %edx
    00000100: 	shrl	%cl, %edx
    00000102: 	addl	%edx, %eax
    00000104: 	cmpl	%esi, %r14d
    00000107: 	jle	.Ltmp826 # Offset: 263
    00000109: 	movl	0x8(%r15,%rdi), %edx
    0000010e: 	shll	%cl, %edx
    00000110: 	shrl	%cl, %edx
    00000112: 	addl	%edx, %eax
.Ltmp826:
    00000114: 	movl	%ebx, %ecx
    00000116: 	movl	%r11d, %edx
    00000119: 	shll	%cl, %edx
    0000011b: 	shrl	%cl, %edx
    0000011d: 	imull	$0x1f40, %edx, %edx
    00000123: 	cmpl	%eax, %edx
    00000125: 	je	.Ltmp829 # Offset: 293
    00000127: 	movl	current_test(%rip), %edx
    0000012d: 	leaq	DATAat0x10f44(%rip), %rsi
    00000134: 	movl	$0x1, %edi
    00000139: 	xorl	%eax, %eax
    0000013b: 	addl	$0x1, %r12d
    0000013f: 	callq	__printf_chk@PLT # Offset: 319
    00000144: 	movl	iterations(%rip), %r10d
    0000014b: 	cmpl	%r10d, %r12d
    0000014e: 	jge	.Ltmp825 # Offset: 334
    00000150: 	movq	init_value(%rip), %r11
    00000157: 	jmp	.Ltmp830 # Offset: 343
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp829:
    00000160: 	addl	$0x1, %r12d
    00000164: 	cmpl	%r10d, %r12d
    00000167: 	jl	.Ltmp830 # Offset: 359
.Ltmp825:
    0000016d: 	callq	clock@PLT # Offset: 365
    00000172: 	pxor	%xmm0, %xmm0
    00000176: 	movq	0x8(%rsp), %rdi
    0000017b: 	movq	%rax, end_time(%rip)
    00000182: 	subq	start_time(%rip), %rax
    00000189: 	cvtsi2sd	%rax, %xmm0
    0000018e: 	divsd	DATAat0x10f68(%rip), %xmm0
    00000196: 	addq	$0x18, %rsp
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	popq	%r15
    000001a4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 420
.Ltmp827:
    000001a9: 	xorl	%esi, %esi
    000001ab: 	xorl	%eax, %eax
    000001ad: 	jmp	.Ltmp831 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Ij27mask_high_by_shift_variableIjEEvPT_iS2_PKc"

Binary Function "_Z14test_variable1Im27mask_high_by_shift_variableImEEvPT_iS2_PKc" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0xfc50
  Size        : 0x16a
  MaxSize     : 0x16a
  Offset      : 0xfc50
  Section     : .text
  Orc Section : .local.text._Z14test_variable1Im27mask_high_by_shift_variableImEEvPT_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %esi
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%esi, %esi
    00000034: 	jle	.Ltmp832 # Offset: 52
    0000003a: 	movl	%r14d, %eax
    0000003d: 	movl	%r14d, %r12d
    00000040: 	movq	init_value(%rip), %rdi
    00000047: 	movl	%ebp, %ecx
    00000049: 	shrl	%eax
    0000004b: 	andl	$-0x2, %r12d
    0000004f: 	leaq	DATAat0x10f44(%rip), %rbp
    00000056: 	xorl	%r15d, %r15d
    00000059: 	subl	$0x1, %eax
    0000005c: 	shlq	$0x4, %rax
    00000060: 	leaq	0x10(%rbx,%rax), %r13
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp837:
    00000068: 	xorl	%edx, %edx
    0000006a: 	testl	%r14d, %r14d
    0000006d: 	jle	.Ltmp833 # Offset: 109
    0000006f: 	cmpl	$0x1, %r14d
    00000073: 	je	.Ltmp834 # Offset: 115
    00000079: 	movq	%rbx, %rax
    0000007c: 	pxor	%xmm1, %xmm1
    00000080: 	movd	%ecx, %xmm2
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp835:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	psllq	%xmm2, %xmm0
    00000094: 	psrlq	%xmm2, %xmm0
    00000098: 	paddq	%xmm0, %xmm1
    0000009c: 	cmpq	%rax, %r13
    0000009f: 	jne	.Ltmp835 # Offset: 159
    000000a1: 	movdqa	%xmm1, %xmm0
    000000a5: 	movslq	%r12d, %rax
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	paddq	%xmm0, %xmm1
    000000b1: 	movq	%xmm1, %rdx
    000000b6: 	cmpl	%r14d, %r12d
    000000b9: 	je	.Ltmp833 # Offset: 185
.Ltmp838:
    000000bb: 	movq	(%rbx,%rax,8), %rax
    000000bf: 	shlq	%cl, %rax
    000000c2: 	shrq	%cl, %rax
    000000c5: 	addq	%rax, %rdx
.Ltmp833:
    000000c8: 	movq	%rdi, %rax
    000000cb: 	shlq	%cl, %rax
    000000ce: 	shrq	%cl, %rax
    000000d1: 	imulq	$0x1f40, %rax, %rax
    000000d8: 	cmpq	%rdx, %rax
    000000db: 	je	.Ltmp836 # Offset: 219
    000000dd: 	movl	current_test(%rip), %edx
    000000e3: 	movq	%rbp, %rsi
    000000e6: 	movl	$0x1, %edi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	movl	%ecx, 0x4(%rsp)
    000000f1: 	addl	$0x1, %r15d
    000000f5: 	callq	__printf_chk@PLT # Offset: 245
    000000fa: 	movl	iterations(%rip), %esi
    00000100: 	cmpl	%esi, %r15d
    00000103: 	jge	.Ltmp832 # Offset: 259
    00000105: 	movq	init_value(%rip), %rdi
    0000010c: 	movl	0x4(%rsp), %ecx
    00000110: 	jmp	.Ltmp837 # Offset: 272
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp836:
    00000118: 	addl	$0x1, %r15d
    0000011c: 	cmpl	%esi, %r15d
    0000011f: 	jl	.Ltmp837 # Offset: 287
.Ltmp832:
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	pxor	%xmm0, %xmm0
    0000012e: 	movq	0x8(%rsp), %rdi
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	subq	start_time(%rip), %rax
    00000141: 	cvtsi2sd	%rax, %xmm0
    00000146: 	divsd	DATAat0x10f68(%rip), %xmm0
    0000014e: 	addq	$0x18, %rsp
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	popq	%r12
    00000156: 	popq	%r13
    00000158: 	popq	%r14
    0000015a: 	popq	%r15
    0000015c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 348
.Ltmp834:
    00000161: 	xorl	%eax, %eax
    00000163: 	xorl	%edx, %edx
    00000165: 	jmp	.Ltmp838 # Offset: 357
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_variable1Im27mask_high_by_shift_variableImEEvPT_iS2_PKc"

Binary Function "_fini" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0xfdbc
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0xfdbc
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 88 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 712 instructions were shortened
BOLT-INFO: removed 163 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 85 out of 98 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x2033bc
