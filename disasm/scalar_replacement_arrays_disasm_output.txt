BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: split function detected on input : main.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x19ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "_start" after disassembly {
  Number      : 6
  State       : disassembled
  Address     : 0x2820
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x2820
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x19fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x2850
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2850
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp70 # Offset: 17
    00000013: 	movq	DATAat0x19fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp70 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp70:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x2880
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2880
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp71 # Offset: 34
    00000024: 	movq	DATAat0x19ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp71 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp71:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x28c0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x28c0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp72 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp73 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp73:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp72:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 10
  State       : disassembled
  Address     : 0x2900
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x2900
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/scalar_replacement_arrays.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x2910
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x2910
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp74 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp75 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp76 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp78:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp77 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp76:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp78 # Offset: 131
    00000085: 	jmp	.Ltmp79 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp75:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp79:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp78 # Offset: 192
.Ltmp77:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp74:
    000000c7: 	leaq	DATAat0x15008(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x29f0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x29f0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp80 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp81 # Offset: 38
.Ltmp80:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp82 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp81:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp82:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x15038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x2a90
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x2a90
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp83 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp84 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp85:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp85 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp98:
    00000069: 	leaq	DATAat0x158dc(%rip), %rbp
    00000070: 	leaq	DATAat0x15058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x15098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp86 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x15c68(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x150c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x15c60(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp87 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp91:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp88 # Offset: 244
    000000fa: 	movq	DATAat0x15c50(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp92:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x15c50(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp89 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp89:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x158c1(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x15c68(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp90 # Offset: 398
.Ltmp87:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp91 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp92 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp88:
    000001c8: 	movq	DATAat0x15c58(%rip), %rsi
    000001cf: 	movq	DATAat0x15c50(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp89 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp90:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp86 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp93 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp94:
    00000210: 	addq	$0x10, %rax
.Ltmp93:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp94 # Offset: 542
.Ltmp99:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x150f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp95 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp96 # Offset: 592
.Ltmp95:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp83:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp96:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp97:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp97 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x1589c(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp83 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp84:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp98 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp86:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp99 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x2dc0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x2dc0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp100 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp101 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp102:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp102 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp107:
    0000006a: 	leaq	DATAat0x158dc(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x15120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x158c2(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x158dc(%rip), %r8
    000000a1: 	leaq	DATAat0x158b0(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp103 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp104:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x158c1(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp104 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp103 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp105 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp106:
    00000140: 	addq	$0x10, %rax
.Ltmp105:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp106 # Offset: 334
.Ltmp108:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x150f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp100:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp101:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp107 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp103:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp108 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x2f70
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x2f70
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x2f90
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2f90
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x2fd0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2fd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x3000
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3000
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x3030
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3030
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x3060
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3060
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x3090
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3090
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x30c0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x30c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x30f0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x30f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x3120
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3120
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x3150
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3150
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x3180
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3180
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x31b0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x31b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x31e0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x31e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x3220
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3220
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x3250
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3250
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x3280
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3280
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x32b0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x32b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x32e0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x32e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x3310
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3310
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x3340
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3340
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x3370
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3370
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x33a0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x33a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x33d0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x33d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x3400
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3400
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/scalar_replacement_arrays.cpp/1
  Number      : 40
  State       : disassembled
  Address     : 0x3430
  Size        : 0x114
  MaxSize     : 0x120
  Offset      : 0x3430
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	pushq	%r12
    00000002: 	movq	%rdi, %rsi
    00000005: 	pushq	%rbp
    00000006: 	pushq	%rbx
    00000007: 	subq	$0x10, %rsp
    0000000b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000012: 	movq	%fs:0x28, %rax
    0000001b: 	movq	%rax, 0x8(%rsp)
    00000020: 	xorl	%eax, %eax
    00000022: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000029: 	subq	$0x20, %rax
    0000002d: 	cmpq	%rax, %rbx
    00000030: 	je	.Ltmp109 # Offset: 48
    00000036: 	leaq	0x10(%rbx), %rdi
    0000003a: 	movq	0x8(%rsi), %r12
    0000003e: 	movq	%rdi, (%rbx)
    00000041: 	movq	(%rsi), %rbp
    00000044: 	movq	%rbp, %rax
    00000047: 	addq	%r12, %rax
    0000004a: 	je	.Ltmp110 # Offset: 74
    0000004c: 	testq	%rbp, %rbp
    0000004f: 	je	.Ltmp111 # Offset: 79
.Ltmp110:
    00000055: 	movq	%r12, (%rsp)
    00000059: 	cmpq	$0xf, %r12
    0000005d: 	ja	.Ltmp112 # Offset: 93
    0000005f: 	cmpq	$0x1, %r12
    00000063: 	jne	.Ltmp113 # Offset: 99
    00000069: 	movzbl	(%rbp), %eax
    0000006d: 	movb	%al, 0x10(%rbx)
.Ltmp115:
    00000070: 	movq	%r12, 0x8(%rbx)
    00000074: 	movb	$0x0, (%rdi,%r12)
    00000079: 	addq	$0x20, _Z7gLabelsB5cxx11+48(%rip)
    00000081: 	movq	0x8(%rsp), %rax
    00000086: 	subq	%fs:0x28, %rax
    0000008f: 	jne	.Ltmp114 # Offset: 143
    00000091: 	addq	$0x10, %rsp
    00000095: 	popq	%rbx
    00000096: 	popq	%rbp
    00000097: 	popq	%r12
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp112:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	%rsp, %rsi
    000000a6: 	xorl	%edx, %edx
    000000a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 168
    000000ad: 	movq	%rax, (%rbx)
    000000b0: 	movq	%rax, %rdi
    000000b3: 	movq	(%rsp), %rax
    000000b7: 	movq	%rax, 0x10(%rbx)
.Ltmp116:
    000000bb: 	movq	%r12, %rdx
    000000be: 	movq	%rbp, %rsi
    000000c1: 	callq	memcpy@PLT # Offset: 193
    000000c6: 	movq	(%rsp), %r12
    000000ca: 	movq	(%rbx), %rdi
    000000cd: 	jmp	.Ltmp115 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp109:
    000000d0: 	movq	0x8(%rsp), %rax
    000000d5: 	subq	%fs:0x28, %rax
    000000de: 	jne	.Ltmp114 # Offset: 222
    000000e0: 	addq	$0x10, %rsp
    000000e4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000000eb: 	popq	%rbx
    000000ec: 	popq	%rbp
    000000ed: 	popq	%r12
    000000ef: 	jmp	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # TAILCALL  # Offset: 239
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp113:
    000000f8: 	testq	%r12, %r12
    000000fb: 	je	.Ltmp115 # Offset: 251
    00000101: 	jmp	.Ltmp116 # Offset: 257
.Ltmp111:
    00000103: 	leaq	DATAat0x15008(%rip), %rdi
    0000010a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 266
.Ltmp114:
    0000010f: 	callq	__stack_chk_fail@PLT # Offset: 271
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 41
  State       : disassembled
  Address     : 0x3550
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x3550
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp117 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp120:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp119:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp118 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp119 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp120 # Offset: 142
.Ltmp117:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp121 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp122 # Offset: 164
.Ltmp125:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp123 # Offset: 177
.Ltmp124:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp122 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp124 # Offset: 214
.Ltmp123:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp125 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp126 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp128:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp127 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp127:
    0000010a: 	addq	$0x20, %r13
.Ltmp122:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp128 # Offset: 275
.Ltmp126:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp129 # Offset: 283
.Ltmp135:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp130 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp131:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp131 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp130:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp118:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp119 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp120 # Offset: 389
    0000018b: 	jmp	.Ltmp117 # Offset: 395
.Ltmp121:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp126 # Offset: 405
.Ltmp134:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp132 # Offset: 422
.Ltmp133:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp126 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp133 # Offset: 463
.Ltmp132:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp134 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp135 # Offset: 482
.Ltmp129:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x3750
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x3750
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp136 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp137 # Offset: 63
.Ltmp136:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp138 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp139 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp143:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp140 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp141 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp139:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp142 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp143 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp138:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp144:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp143 # Offset: 248
.Ltmp137:
    000000fd: 	leaq	DATAat0x15008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp140:
    00000109: 	leaq	DATAat0x158de(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp141:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp142:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp144 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp145 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp145:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x38a0
  Size        : 0x128
  MaxSize     : 0x130
  Offset      : 0x38a0
  Section     : .text
  Orc Section : .local.text._Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movq	%rsi, %rdi
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movzwl	0x12(%rax), %ecx
    00000018: 	movzwl	0x14(%rax), %edx
    0000001c: 	movzwl	0x4(%rax), %r10d
    00000021: 	movzwl	0x6(%rax), %r11d
    00000026: 	movzwl	0x8(%rax), %ebx
    0000002a: 	movzwl	0xa(%rax), %ebp
    0000002e: 	movzwl	0xc(%rax), %r12d
    00000033: 	movw	%cx, -0xc(%rsp)
    00000038: 	movl	iterations(%rip), %ecx
    0000003e: 	movzwl	0xe(%rax), %r13d
    00000043: 	movw	%dx, -0xa(%rsp)
    00000048: 	movzwl	0x10(%rax), %r14d
    0000004d: 	leal	(%rcx,%rcx), %r9d
    00000051: 	leal	(%r9,%rcx), %r8d
    00000055: 	leal	(,%r8,4), %r15d
    0000005d: 	leal	(%r15,%rcx), %edx
    00000061: 	shll	$0x2, %edx
    00000064: 	addw	init_value(%rip), %dx
    0000006b: 	movl	%edx, %esi
    0000006d: 	subl	%r15d, %esi
    00000070: 	cmpw	%dx, (%rax)
    00000073: 	jne	.Ltmp146 # Offset: 115
    00000079: 	cmpw	%si, 0x2(%rax)
    0000007d: 	jne	.Ltmp146 # Offset: 125
    00000083: 	leal	(,%rcx,4), %edx
    0000008a: 	movl	%ecx, %r15d
    0000008d: 	subl	%edx, %esi
    0000008f: 	shll	$0x4, %r15d
    00000093: 	movl	%esi, %eax
    00000095: 	subl	%r15d, %eax
    00000098: 	cmpw	%si, %r10w
    0000009c: 	jne	.Ltmp146 # Offset: 156
    0000009e: 	cmpw	%r11w, %ax
    000000a2: 	jne	.Ltmp146 # Offset: 162
    000000a4: 	addl	%ecx, %edx
    000000a6: 	leal	(%rcx,%rdx,2), %r10d
    000000aa: 	subl	%r10d, %eax
    000000ad: 	cmpw	%si, %bx
    000000b0: 	jne	.Ltmp146 # Offset: 176
    000000b2: 	cmpw	%bp, %ax
    000000b5: 	jne	.Ltmp146 # Offset: 181
    000000b7: 	leal	(%rax,%r8,2), %eax
    000000bb: 	subl	%ecx, %r15d
    000000be: 	addl	%eax, %r15d
    000000c1: 	cmpw	%r12w, %ax
    000000c5: 	jne	.Ltmp146 # Offset: 197
    000000c7: 	cmpw	%r13w, %r15w
    000000cb: 	jne	.Ltmp146 # Offset: 203
    000000cd: 	leal	(%r8,%r8,8), %r8d
    000000d1: 	addl	%r15d, %r8d
    000000d4: 	movl	%r8d, %esi
    000000d7: 	subl	%r9d, %esi
    000000da: 	cmpw	%r14w, %r8w
    000000de: 	setne	%al
    000000e1: 	cmpw	-0xc(%rsp), %si
    000000e6: 	movl	%esi, %ecx
    000000e8: 	setne	%sil
    000000ec: 	orb	%sil, %al
    000000ef: 	jne	.Ltmp146 # Offset: 239
    000000f1: 	addl	%ecx, %edx
    000000f3: 	cmpw	-0xa(%rsp), %dx
    000000f8: 	jne	.Ltmp146 # Offset: 248
    000000fa: 	popq	%rbx
    000000fb: 	popq	%rbp
    000000fc: 	popq	%r12
    000000fe: 	popq	%r13
    00000100: 	popq	%r14
    00000102: 	popq	%r15
    00000104: 	retq # Offset: 260
    00000105: 	nopl	(%rax) # Size: 3
.Ltmp146:
    00000108: 	movq	(%rdi), %rdx
    0000010b: 	popq	%rbx
    0000010c: 	leaq	DATAat0x158f3(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	popq	%rbp
    00000119: 	xorl	%eax, %eax
    0000011b: 	popq	%r12
    0000011d: 	popq	%r13
    0000011f: 	popq	%r14
    00000121: 	popq	%r15
    00000123: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 291
DWARF CFI Instructions:
    <empty>
End of Function "_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x39d0
  Size        : 0x108
  MaxSize     : 0x110
  Offset      : 0x39d0
  Section     : .text
  Orc Section : .local.text._Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movq	%rsi, %rdi
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	0x24(%rax), %edx
    00000017: 	movl	0x28(%rax), %ecx
    0000001a: 	movl	0x8(%rax), %r10d
    0000001e: 	movl	0xc(%rax), %r11d
    00000022: 	movl	0x10(%rax), %ebx
    00000025: 	movl	0x14(%rax), %ebp
    00000028: 	movl	0x18(%rax), %r12d
    0000002c: 	movl	%edx, -0x10(%rsp)
    00000030: 	movl	iterations(%rip), %edx
    00000036: 	movl	0x1c(%rax), %r13d
    0000003a: 	movl	%ecx, -0xc(%rsp)
    0000003e: 	movl	0x20(%rax), %r14d
    00000042: 	imull	$0x34, %edx, %ecx
    00000045: 	leal	(%rdx,%rdx), %r9d
    00000049: 	addl	init_value(%rip), %ecx
    0000004f: 	leal	(%r9,%rdx), %r8d
    00000053: 	movl	%ecx, %esi
    00000055: 	leal	(,%r8,4), %r15d
    0000005d: 	subl	%r15d, %esi
    00000060: 	cmpl	%ecx, (%rax)
    00000062: 	jne	.Ltmp147 # Offset: 98
    00000068: 	cmpl	%esi, 0x4(%rax)
    0000006b: 	jne	.Ltmp147 # Offset: 107
    0000006d: 	leal	(,%rdx,4), %eax
    00000074: 	movl	%edx, %r15d
    00000077: 	subl	%eax, %esi
    00000079: 	shll	$0x4, %r15d
    0000007d: 	movl	%esi, %ecx
    0000007f: 	subl	%r15d, %ecx
    00000082: 	cmpl	%esi, %r10d
    00000085: 	jne	.Ltmp147 # Offset: 133
    00000087: 	cmpl	%ecx, %r11d
    0000008a: 	jne	.Ltmp147 # Offset: 138
    0000008c: 	addl	%edx, %eax
    0000008e: 	leal	(%rdx,%rax,2), %r10d
    00000092: 	subl	%r10d, %ecx
    00000095: 	cmpl	%esi, %ebx
    00000097: 	jne	.Ltmp147 # Offset: 151
    00000099: 	cmpl	%ecx, %ebp
    0000009b: 	jne	.Ltmp147 # Offset: 155
    0000009d: 	leal	(%rcx,%r8,2), %ecx
    000000a1: 	subl	%edx, %r15d
    000000a4: 	addl	%ecx, %r15d
    000000a7: 	cmpl	%ecx, %r12d
    000000aa: 	jne	.Ltmp147 # Offset: 170
    000000ac: 	cmpl	%r15d, %r13d
    000000af: 	jne	.Ltmp147 # Offset: 175
    000000b1: 	leal	(%r8,%r8,8), %edx
    000000b5: 	addl	%r15d, %edx
    000000b8: 	movl	%edx, %esi
    000000ba: 	subl	%r9d, %esi
    000000bd: 	cmpl	%edx, %r14d
    000000c0: 	setne	%dl
    000000c3: 	cmpl	%esi, -0x10(%rsp)
    000000c7: 	movl	%esi, %ecx
    000000c9: 	setne	%sil
    000000cd: 	orb	%sil, %dl
    000000d0: 	jne	.Ltmp147 # Offset: 208
    000000d2: 	addl	%ecx, %eax
    000000d4: 	cmpl	-0xc(%rsp), %eax
    000000d8: 	jne	.Ltmp147 # Offset: 216
    000000da: 	popq	%rbx
    000000db: 	popq	%rbp
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	popq	%r15
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp147:
    000000e8: 	movq	(%rdi), %rdx
    000000eb: 	popq	%rbx
    000000ec: 	leaq	DATAat0x158f3(%rip), %rsi
    000000f3: 	movl	$0x1, %edi
    000000f8: 	popq	%rbp
    000000f9: 	xorl	%eax, %eax
    000000fb: 	popq	%r12
    000000fd: 	popq	%r13
    000000ff: 	popq	%r14
    00000101: 	popq	%r15
    00000103: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x3ae0
  Size        : 0x128
  MaxSize     : 0x130
  Offset      : 0x3ae0
  Section     : .text
  Orc Section : .local.text._Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	0x48(%rdi), %rdx
    00000015: 	movq	0x50(%rdi), %rcx
    00000019: 	movq	0x10(%rdi), %r10
    0000001d: 	movq	0x18(%rdi), %r11
    00000021: 	movq	0x20(%rdi), %rbx
    00000025: 	movq	0x28(%rdi), %rbp
    00000029: 	movq	0x30(%rdi), %r12
    0000002d: 	movq	%rdx, -0x18(%rsp)
    00000032: 	movslq	iterations(%rip), %rdx
    00000039: 	movq	0x38(%rdi), %r13
    0000003d: 	movq	%rcx, -0x10(%rsp)
    00000042: 	movslq	init_value(%rip), %rcx
    00000049: 	movq	0x40(%rdi), %r14
    0000004d: 	leaq	(%rdx,%rdx), %r9
    00000051: 	leaq	(%r9,%rdx), %r8
    00000055: 	leaq	(,%r8,4), %r15
    0000005d: 	leaq	(%r15,%rdx), %rdi
    00000061: 	leaq	(%rcx,%rdi,4), %rdi
    00000065: 	movq	%rdi, %rcx
    00000068: 	subq	%r15, %rcx
    0000006b: 	cmpq	%rdi, (%rax)
    0000006e: 	jne	.Ltmp148 # Offset: 110
    00000074: 	cmpq	%rcx, 0x8(%rax)
    00000078: 	jne	.Ltmp148 # Offset: 120
    0000007e: 	leaq	(,%rdx,4), %rax
    00000086: 	movq	%rdx, %r15
    00000089: 	subq	%rax, %rcx
    0000008c: 	shlq	$0x4, %r15
    00000090: 	movq	%rcx, %rdi
    00000093: 	subq	%r15, %rdi
    00000096: 	cmpq	%rcx, %r10
    00000099: 	jne	.Ltmp148 # Offset: 153
    0000009b: 	cmpq	%rdi, %r11
    0000009e: 	jne	.Ltmp148 # Offset: 158
    000000a0: 	addq	%rdx, %rax
    000000a3: 	leaq	(%rdx,%rax,2), %r10
    000000a7: 	subq	%r10, %rdi
    000000aa: 	cmpq	%rcx, %rbx
    000000ad: 	jne	.Ltmp148 # Offset: 173
    000000af: 	cmpq	%rdi, %rbp
    000000b2: 	jne	.Ltmp148 # Offset: 178
    000000b4: 	leaq	(%rdi,%r8,2), %rcx
    000000b8: 	subq	%rdx, %r15
    000000bb: 	addq	%rcx, %r15
    000000be: 	cmpq	%rcx, %r12
    000000c1: 	jne	.Ltmp148 # Offset: 193
    000000c3: 	cmpq	%r15, %r13
    000000c6: 	jne	.Ltmp148 # Offset: 198
    000000c8: 	leaq	(%r8,%r8,8), %rdx
    000000cc: 	addq	%r15, %rdx
    000000cf: 	movq	%rdx, %rdi
    000000d2: 	subq	%r9, %rdi
    000000d5: 	cmpq	%rdx, %r14
    000000d8: 	setne	%dl
    000000db: 	cmpq	%rdi, -0x18(%rsp)
    000000e0: 	movq	%rdi, %rcx
    000000e3: 	setne	%dil
    000000e7: 	orb	%dil, %dl
    000000ea: 	jne	.Ltmp148 # Offset: 234
    000000ec: 	addq	%rcx, %rax
    000000ef: 	cmpq	-0x10(%rsp), %rax
    000000f4: 	jne	.Ltmp148 # Offset: 244
    000000f6: 	popq	%rbx
    000000f7: 	popq	%rbp
    000000f8: 	popq	%r12
    000000fa: 	popq	%r13
    000000fc: 	popq	%r14
    000000fe: 	popq	%r15
    00000100: 	retq # Offset: 256
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp148:
    00000108: 	movq	(%rsi), %rdx
    0000010b: 	popq	%rbx
    0000010c: 	leaq	DATAat0x158f3(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	popq	%rbp
    00000119: 	xorl	%eax, %eax
    0000011b: 	popq	%r12
    0000011d: 	popq	%r13
    0000011f: 	popq	%r14
    00000121: 	popq	%r15
    00000123: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 291
DWARF CFI Instructions:
    <empty>
End of Function "_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x3c10
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0x3c10
  Section     : .text
  Orc Section : .local.text._Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	pxor	%xmm1, %xmm1
    0000000c: 	movl	$0x1, %eax
    00000011: 	movq	%rsi, %rcx
    00000014: 	cvtsi2sdl	iterations(%rip), %xmm0
    0000001c: 	movsd	0x18(%rdi), %xmm4
    00000021: 	movsd	DATAat0x15db0(%rip), %xmm2
    00000029: 	cvtsi2sdl	init_value(%rip), %xmm1
    00000031: 	movsd	0x10(%rdi), %xmm11
    00000037: 	movsd	0x20(%rdi), %xmm12
    0000003d: 	movsd	0x28(%rdi), %xmm5
    00000042: 	movsd	0x30(%rdi), %xmm6
    00000047: 	movsd	0x38(%rdi), %xmm7
    0000004c: 	movsd	0x40(%rdi), %xmm10
    00000052: 	mulsd	%xmm0, %xmm2
    00000056: 	movsd	0x48(%rdi), %xmm9
    0000005c: 	movsd	0x50(%rdi), %xmm8
    00000062: 	addsd	%xmm1, %xmm2
    00000066: 	ucomisd	(%rdi), %xmm2
    0000006a: 	setp	%dl
    0000006d: 	cmovnel	%eax, %edx
    00000070: 	testb	%dl, %dl
    00000072: 	jne	.Ltmp149 # Offset: 114
    00000078: 	movsd	DATAat0x15db8(%rip), %xmm2
    00000080: 	mulsd	%xmm0, %xmm2
    00000084: 	addsd	%xmm1, %xmm2
    00000088: 	ucomisd	0x8(%rdi), %xmm2
    0000008d: 	setp	%dl
    00000090: 	cmovnel	%eax, %edx
    00000093: 	testb	%dl, %dl
    00000095: 	jne	.Ltmp149 # Offset: 149
    0000009b: 	movsd	DATAat0x15dc8(%rip), %xmm3
    000000a3: 	movsd	DATAat0x15dc0(%rip), %xmm2
    000000ab: 	mulsd	%xmm0, %xmm3
    000000af: 	mulsd	%xmm0, %xmm2
    000000b3: 	addsd	%xmm1, %xmm3
    000000b7: 	addsd	%xmm1, %xmm2
    000000bb: 	ucomisd	%xmm4, %xmm3
    000000bf: 	setp	%dl
    000000c2: 	cmovnel	%eax, %edx
    000000c5: 	testb	%dl, %dl
    000000c7: 	jne	.Ltmp149 # Offset: 199
    000000cd: 	ucomisd	%xmm2, %xmm11
    000000d2: 	setp	%dl
    000000d5: 	cmovnel	%eax, %edx
    000000d8: 	testb	%dl, %dl
    000000da: 	jne	.Ltmp149 # Offset: 218
    000000e0: 	movsd	DATAat0x15dd8(%rip), %xmm3
    000000e8: 	mulsd	%xmm0, %xmm3
    000000ec: 	addsd	%xmm1, %xmm3
    000000f0: 	ucomisd	%xmm5, %xmm3
    000000f4: 	setp	%dl
    000000f7: 	cmovnel	%eax, %edx
    000000fa: 	testb	%dl, %dl
    000000fc: 	jne	.Ltmp149 # Offset: 252
    00000102: 	ucomisd	%xmm2, %xmm12
    00000107: 	setp	%dl
    0000010a: 	cmovnel	%eax, %edx
    0000010d: 	testb	%dl, %dl
    0000010f: 	jne	.Ltmp149 # Offset: 271
    00000115: 	movsd	DATAat0x15de0(%rip), %xmm2
    0000011d: 	mulsd	%xmm0, %xmm2
    00000121: 	addsd	%xmm1, %xmm2
    00000125: 	ucomisd	%xmm6, %xmm2
    00000129: 	setp	%dl
    0000012c: 	cmovnel	%eax, %edx
    0000012f: 	testb	%dl, %dl
    00000131: 	jne	.Ltmp149 # Offset: 305
    00000133: 	movsd	DATAat0x15de8(%rip), %xmm2
    0000013b: 	mulsd	%xmm0, %xmm2
    0000013f: 	addsd	%xmm1, %xmm2
    00000143: 	ucomisd	%xmm7, %xmm2
    00000147: 	setp	%dl
    0000014a: 	cmovnel	%eax, %edx
    0000014d: 	testb	%dl, %dl
    0000014f: 	jne	.Ltmp149 # Offset: 335
    00000151: 	movsd	DATAat0x15df0(%rip), %xmm2
    00000159: 	mulsd	%xmm0, %xmm2
    0000015d: 	addsd	%xmm1, %xmm2
    00000161: 	ucomisd	%xmm10, %xmm2
    00000166: 	movsd	DATAat0x15df8(%rip), %xmm2
    0000016e: 	mulsd	%xmm0, %xmm2
    00000172: 	setp	%dl
    00000175: 	cmovnel	%eax, %edx
    00000178: 	addsd	%xmm1, %xmm2
    0000017c: 	ucomisd	%xmm9, %xmm2
    00000181: 	setp	%sil
    00000185: 	cmovnel	%eax, %esi
    00000188: 	orb	%sil, %dl
    0000018b: 	jne	.Ltmp149 # Offset: 395
    0000018d: 	mulsd	DATAat0x15c70(%rip), %xmm0
    00000195: 	addsd	%xmm1, %xmm0
    00000199: 	ucomisd	%xmm8, %xmm0
    0000019e: 	setp	%dl
    000001a1: 	cmovel	%edx, %eax
    000001a4: 	testb	%al, %al
    000001a6: 	je	.Ltmp150 # Offset: 422
.Ltmp149:
    000001a8: 	movq	(%rcx), %rdx
    000001ab: 	leaq	DATAat0x158f3(%rip), %rsi
    000001b2: 	movl	$0x1, %edi
    000001b7: 	xorl	%eax, %eax
    000001b9: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 441
    000001be: 	nop # Size: 2
.Ltmp150:
    000001c0: 	retq # Offset: 448
DWARF CFI Instructions:
    <empty>
End of Function "_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x3de0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x3de0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp151 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp152 # Offset: 152
.Ltmp163:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp153 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp154 # Offset: 204
.Ltmp153:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp155 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp156 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp158:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp157 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp156:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp158 # Offset: 339
    00000155: 	jmp	.Ltmp159 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp152:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp160 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp161 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp162 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp162:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp165:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp163 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp155:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp159:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp158 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp160:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp164 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp165 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp165 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp164:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp165 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp165 # Offset: 696
.Ltmp154:
    000002bd: 	leaq	DATAat0x15008(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp161:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp166 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp166:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp151:
    000002e0: 	leaq	DATAat0x15908(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp157:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z18test_array5_globalIdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x4110
  Size        : 0x2a5
  MaxSize     : 0x2b0
  Offset      : 0x4110
  Section     : .text
  Orc Section : .local.text._Z18test_array5_globalIdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movl	iterations(%rip), %edx
    00000013: 	movsd	dataDouble(%rip), %xmm1
    0000001b: 	movq	%rax, start_time(%rip)
    00000022: 	testl	%edx, %edx
    00000024: 	jle	.Ltmp167 # Offset: 36
    0000002a: 	movsd	dataDouble+16(%rip), %xmm2
    00000032: 	movsd	dataDouble+32(%rip), %xmm0
    0000003a: 	xorl	%eax, %eax
    0000003c: 	movsd	dataDouble+8(%rip), %xmm3
    00000044: 	movsd	dataDouble+24(%rip), %xmm4
    0000004c: 	movsd	DATAat0x15c88(%rip), %xmm7
    00000054: 	movsd	DATAat0x15c78(%rip), %xmm9
    0000005d: 	movsd	DATAat0x15ca0(%rip), %xmm6
    00000065: 	movsd	DATAat0x15cb0(%rip), %xmm5
    0000006d: 	movsd	DATAat0x15c80(%rip), %xmm8
    00000076: 	movsd	DATAat0x15c58(%rip), %xmm12
    0000007f: 	movsd	DATAat0x15c98(%rip), %xmm11
    00000088: 	movsd	DATAat0x15ca8(%rip), %xmm10
    00000091: 	movsd	DATAat0x15cc0(%rip), %xmm15
    0000009a: 	movsd	DATAat0x15cc8(%rip), %xmm14
    000000a3: 	movsd	DATAat0x15cd0(%rip), %xmm13
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp168:
    000000b0: 	addsd	%xmm12, %xmm0
    000000b5: 	addsd	%xmm12, %xmm2
    000000ba: 	addl	$0x1, %eax
    000000bd: 	addsd	%xmm6, %xmm3
    000000c1: 	addsd	%xmm9, %xmm4
    000000c6: 	addsd	%xmm9, %xmm1
    000000cb: 	addsd	%xmm9, %xmm0
    000000d0: 	addsd	%xmm11, %xmm2
    000000d5: 	addsd	%xmm5, %xmm3
    000000d9: 	addsd	%xmm6, %xmm4
    000000dd: 	addsd	%xmm8, %xmm1
    000000e2: 	addsd	%xmm11, %xmm0
    000000e7: 	addsd	%xmm8, %xmm2
    000000ec: 	addsd	%xmm10, %xmm4
    000000f1: 	addsd	%xmm14, %xmm3
    000000f6: 	addsd	%xmm7, %xmm1
    000000fa: 	addsd	DATAat0x15c90(%rip), %xmm1
    00000102: 	addsd	%xmm6, %xmm0
    00000106: 	addsd	%xmm7, %xmm2
    0000010a: 	addsd	DATAat0x15dd8(%rip), %xmm2
    00000112: 	addsd	DATAat0x15cb8(%rip), %xmm1
    0000011a: 	addsd	%xmm5, %xmm4
    0000011e: 	addsd	DATAat0x15de0(%rip), %xmm1
    00000126: 	addsd	%xmm8, %xmm0
    0000012b: 	addsd	%xmm13, %xmm3
    00000130: 	addsd	%xmm15, %xmm2
    00000135: 	addsd	%xmm10, %xmm0
    0000013a: 	addsd	%xmm7, %xmm0
    0000013e: 	addsd	%xmm5, %xmm0
    00000142: 	cmpl	%edx, %eax
    00000144: 	jne	.Ltmp168 # Offset: 324
    0000014a: 	movapd	%xmm1, %xmm5
    0000014e: 	movsd	%xmm0, dataDouble+32(%rip)
    00000156: 	unpcklpd	%xmm3, %xmm5
    0000015a: 	movaps	%xmm5, dataDouble(%rip)
    00000161: 	movapd	%xmm2, %xmm5
    00000165: 	unpcklpd	%xmm4, %xmm5
    00000169: 	movaps	%xmm5, dataDouble+16(%rip)
.Ltmp173:
    00000170: 	pxor	%xmm5, %xmm5
    00000174: 	pxor	%xmm6, %xmm6
    00000178: 	movl	$0x1, %eax
    0000017d: 	movsd	DATAat0x15db0(%rip), %xmm7
    00000185: 	cvtsi2sd	%edx, %xmm5
    00000189: 	cvtsi2sdl	init_value(%rip), %xmm6
    00000191: 	mulsd	%xmm5, %xmm7
    00000195: 	addsd	%xmm6, %xmm7
    00000199: 	ucomisd	%xmm1, %xmm7
    0000019d: 	setp	%dl
    000001a0: 	cmovnel	%eax, %edx
    000001a3: 	testb	%dl, %dl
    000001a5: 	jne	.Ltmp169 # Offset: 421
    000001a7: 	movsd	DATAat0x15db8(%rip), %xmm1
    000001af: 	mulsd	%xmm5, %xmm1
    000001b3: 	addsd	%xmm6, %xmm1
    000001b7: 	ucomisd	%xmm3, %xmm1
    000001bb: 	setp	%dl
    000001be: 	cmovnel	%eax, %edx
    000001c1: 	testb	%dl, %dl
    000001c3: 	jne	.Ltmp169 # Offset: 451
    000001c5: 	movsd	DATAat0x15dc0(%rip), %xmm1
    000001cd: 	mulsd	%xmm5, %xmm1
    000001d1: 	mulsd	DATAat0x15dc8(%rip), %xmm5
    000001d9: 	addsd	%xmm6, %xmm1
    000001dd: 	addsd	%xmm6, %xmm5
    000001e1: 	ucomisd	%xmm4, %xmm5
    000001e5: 	setp	%dl
    000001e8: 	cmovnel	%eax, %edx
    000001eb: 	ucomisd	%xmm2, %xmm1
    000001ef: 	setp	%cl
    000001f2: 	cmovnel	%eax, %ecx
    000001f5: 	orb	%cl, %dl
    000001f7: 	jne	.Ltmp169 # Offset: 503
    000001f9: 	ucomisd	%xmm0, %xmm1
    000001fd: 	setp	%dl
    00000200: 	cmovel	%edx, %eax
    00000203: 	testb	%al, %al
    00000205: 	je	.Ltmp170 # Offset: 517
.Ltmp169:
    00000207: 	movq	(%rbp), %rdx
    0000020b: 	leaq	DATAat0x158f3(%rip), %rsi
    00000212: 	movl	$0x1, %edi
    00000217: 	xorl	%eax, %eax
    00000219: 	callq	__printf_chk@PLT # Offset: 537
.Ltmp170:
    0000021e: 	movq	%rbp, %rdi
    00000221: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 545
    00000226: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000022d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000234: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023b: 	je	.Ltmp171 # Offset: 571
.Ltmp172:
    0000023d: 	movq	-0x20(%rax), %rbp
    00000241: 	callq	clock@PLT # Offset: 577
    00000246: 	pxor	%xmm0, %xmm0
    0000024a: 	movq	%rax, end_time(%rip)
    00000251: 	movq	%rbp, %rdi
    00000254: 	popq	%rbp
    00000255: 	subq	start_time(%rip), %rax
    0000025c: 	cvtsi2sd	%rax, %xmm0
    00000261: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000269: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 617
    0000026e: 	nop # Size: 2
.Ltmp171:
    00000270: 	movq	-0x8(%rdx), %rax
    00000274: 	addq	$0x200, %rax
    0000027a: 	jmp	.Ltmp172 # Offset: 634
    0000027c: 	nopl	(%rax) # Size: 4
.Ltmp167:
    00000280: 	movsd	dataDouble+8(%rip), %xmm3
    00000288: 	movsd	dataDouble+16(%rip), %xmm2
    00000290: 	movsd	dataDouble+24(%rip), %xmm4
    00000298: 	movsd	dataDouble+32(%rip), %xmm0
    000002a0: 	jmp	.Ltmp173 # Offset: 672
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_globalIdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global2IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x43c0
  Size        : 0x2b9
  MaxSize     : 0x2c0
  Offset      : 0x43c0
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global2IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movapd	dataDouble(%rip), %xmm3
    00000015: 	movapd	dataDouble+16(%rip), %xmm4
    0000001d: 	movl	iterations(%rip), %ecx
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	movapd	%xmm3, %xmm5
    0000002e: 	movapd	%xmm4, %xmm7
    00000032: 	movsd	dataDouble+32(%rip), %xmm0
    0000003a: 	unpckhpd	%xmm5, %xmm5
    0000003e: 	unpckhpd	%xmm7, %xmm7
    00000042: 	testl	%ecx, %ecx
    00000044: 	jle	.Ltmp174 # Offset: 68
    0000004a: 	movapd	%xmm5, %xmm2
    0000004e: 	movapd	%xmm3, %xmm12
    00000053: 	movapd	%xmm7, %xmm1
    00000057: 	xorl	%edx, %edx
    00000059: 	movapd	%xmm4, %xmm11
    0000005e: 	movsd	DATAat0x15c78(%rip), %xmm7
    00000066: 	movsd	DATAat0x15c80(%rip), %xmm6
    0000006e: 	movsd	DATAat0x15c88(%rip), %xmm5
    00000076: 	movsd	DATAat0x15ca0(%rip), %xmm4
    0000007e: 	movsd	DATAat0x15c90(%rip), %xmm15
    00000087: 	movsd	DATAat0x15cb0(%rip), %xmm3
    0000008f: 	movsd	DATAat0x15c58(%rip), %xmm10
    00000098: 	movsd	DATAat0x15c98(%rip), %xmm9
    000000a1: 	movsd	DATAat0x15ca8(%rip), %xmm8
    000000aa: 	movsd	DATAat0x15cb8(%rip), %xmm14
    000000b3: 	movsd	DATAat0x15de0(%rip), %xmm13
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp175:
    000000c0: 	addsd	%xmm10, %xmm0
    000000c5: 	addsd	%xmm7, %xmm12
    000000ca: 	addl	$0x1, %edx
    000000cd: 	addsd	%xmm10, %xmm11
    000000d2: 	addsd	%xmm7, %xmm1
    000000d6: 	addsd	%xmm4, %xmm2
    000000da: 	addsd	%xmm7, %xmm0
    000000de: 	addsd	%xmm6, %xmm12
    000000e3: 	addsd	%xmm9, %xmm11
    000000e8: 	addsd	%xmm4, %xmm1
    000000ec: 	addsd	%xmm3, %xmm2
    000000f0: 	addsd	DATAat0x15cc8(%rip), %xmm2
    000000f8: 	addsd	%xmm9, %xmm0
    000000fd: 	addsd	%xmm5, %xmm12
    00000102: 	addsd	%xmm6, %xmm11
    00000107: 	addsd	%xmm8, %xmm1
    0000010c: 	addsd	DATAat0x15cd0(%rip), %xmm2
    00000114: 	addsd	%xmm4, %xmm0
    00000118: 	addsd	%xmm15, %xmm12
    0000011d: 	addsd	%xmm5, %xmm11
    00000122: 	addsd	%xmm3, %xmm1
    00000126: 	addsd	DATAat0x15dd8(%rip), %xmm11
    0000012f: 	addsd	DATAat0x15cc0(%rip), %xmm11
    00000138: 	addsd	%xmm6, %xmm0
    0000013c: 	addsd	%xmm14, %xmm12
    00000141: 	addsd	%xmm8, %xmm0
    00000146: 	addsd	%xmm13, %xmm12
    0000014b: 	addsd	%xmm5, %xmm0
    0000014f: 	addsd	%xmm3, %xmm0
    00000153: 	cmpl	%ecx, %edx
    00000155: 	jne	.Ltmp175 # Offset: 341
    0000015b: 	movapd	%xmm12, %xmm3
    00000160: 	movapd	%xmm11, %xmm4
    00000165: 	movapd	%xmm12, %xmm6
    0000016a: 	unpcklpd	%xmm2, %xmm3
    0000016e: 	unpcklpd	%xmm1, %xmm4
    00000172: 	movapd	%xmm1, %xmm5
    00000176: 	movapd	%xmm11, %xmm7
.Ltmp180:
    0000017b: 	pxor	%xmm1, %xmm1
    0000017f: 	movaps	%xmm4, dataDouble+16(%rip)
    00000186: 	pxor	%xmm2, %xmm2
    0000018a: 	movsd	DATAat0x15db0(%rip), %xmm4
    00000192: 	cvtsi2sd	%ecx, %xmm1
    00000196: 	movl	$0x1, %eax
    0000019b: 	movaps	%xmm3, dataDouble(%rip)
    000001a2: 	cvtsi2sdl	init_value(%rip), %xmm2
    000001aa: 	movsd	%xmm0, dataDouble+32(%rip)
    000001b2: 	mulsd	%xmm1, %xmm4
    000001b6: 	addsd	%xmm2, %xmm4
    000001ba: 	ucomisd	%xmm6, %xmm4
    000001be: 	setp	%dl
    000001c1: 	cmovnel	%eax, %edx
    000001c4: 	testb	%dl, %dl
    000001c6: 	jne	.Ltmp176 # Offset: 454
    000001c8: 	movsd	DATAat0x15db8(%rip), %xmm4
    000001d0: 	unpckhpd	%xmm3, %xmm3
    000001d4: 	mulsd	%xmm1, %xmm4
    000001d8: 	addsd	%xmm2, %xmm4
    000001dc: 	ucomisd	%xmm3, %xmm4
    000001e0: 	setp	%dl
    000001e3: 	cmovnel	%eax, %edx
    000001e6: 	testb	%dl, %dl
    000001e8: 	jne	.Ltmp176 # Offset: 488
    000001ea: 	movsd	DATAat0x15dc0(%rip), %xmm3
    000001f2: 	mulsd	%xmm1, %xmm3
    000001f6: 	mulsd	DATAat0x15dc8(%rip), %xmm1
    000001fe: 	addsd	%xmm2, %xmm3
    00000202: 	addsd	%xmm2, %xmm1
    00000206: 	ucomisd	%xmm5, %xmm1
    0000020a: 	setp	%dl
    0000020d: 	cmovnel	%eax, %edx
    00000210: 	ucomisd	%xmm3, %xmm7
    00000214: 	setp	%cl
    00000217: 	cmovnel	%eax, %ecx
    0000021a: 	orb	%cl, %dl
    0000021c: 	jne	.Ltmp176 # Offset: 540
    0000021e: 	ucomisd	%xmm0, %xmm3
    00000222: 	setp	%dl
    00000225: 	cmovel	%edx, %eax
    00000228: 	testb	%al, %al
    0000022a: 	je	.Ltmp177 # Offset: 554
.Ltmp176:
    0000022c: 	movq	(%rbp), %rdx
    00000230: 	leaq	DATAat0x158f3(%rip), %rsi
    00000237: 	movl	$0x1, %edi
    0000023c: 	xorl	%eax, %eax
    0000023e: 	callq	__printf_chk@PLT # Offset: 574
.Ltmp177:
    00000243: 	movq	%rbp, %rdi
    00000246: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 582
    0000024b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000252: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000259: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000260: 	je	.Ltmp178 # Offset: 608
.Ltmp179:
    00000262: 	movq	-0x20(%rax), %rbp
    00000266: 	callq	clock@PLT # Offset: 614
    0000026b: 	pxor	%xmm0, %xmm0
    0000026f: 	movq	%rax, end_time(%rip)
    00000276: 	movq	%rbp, %rdi
    00000279: 	popq	%rbp
    0000027a: 	subq	start_time(%rip), %rax
    00000281: 	cvtsi2sd	%rax, %xmm0
    00000286: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000028e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 654
    00000293: 	nopl	(%rax,%rax) # Size: 5
.Ltmp178:
    00000298: 	movq	-0x8(%rdx), %rax
    0000029c: 	addq	$0x200, %rax
    000002a2: 	jmp	.Ltmp179 # Offset: 674
    000002a4: 	nopl	(%rax) # Size: 4
.Ltmp174:
    000002a8: 	movapd	%xmm7, %xmm5
    000002ac: 	movapd	%xmm3, %xmm6
    000002b0: 	movapd	%xmm4, %xmm7
    000002b4: 	jmp	.Ltmp180 # Offset: 692
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global2IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_globalIdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x4680
  Size        : 0x906
  MaxSize     : 0x910
  Offset      : 0x4680
  Section     : .text
  Orc Section : .local.text._Z19test_array11_globalIdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x58, %rsp
    0000000d: 	callq	clock@PLT # Offset: 13
    00000012: 	movl	iterations(%rip), %r9d
    00000019: 	movq	%rax, start_time(%rip)
    00000020: 	testl	%r9d, %r9d
    00000023: 	jle	.Ltmp181 # Offset: 35
    00000029: 	movsd	dataDouble+32(%rip), %xmm7
    00000031: 	leal	-0x1(%r9), %r8d
    00000035: 	movsd	dataDouble+64(%rip), %xmm0
    0000003d: 	movq	dataDouble(%rip), %rdx
    00000044: 	movq	dataDouble+48(%rip), %rax
    0000004b: 	movsd	%xmm7, 0x20(%rsp)
    00000051: 	movsd	dataDouble+56(%rip), %xmm7
    00000059: 	movsd	dataDouble+80(%rip), %xmm15
    00000062: 	movsd	dataDouble+16(%rip), %xmm2
    0000006a: 	movq	dataDouble+8(%rip), %rsi
    00000071: 	movsd	%xmm7, 0x28(%rsp)
    00000077: 	movsd	dataDouble+72(%rip), %xmm7
    0000007f: 	movq	dataDouble+24(%rip), %rcx
    00000086: 	movq	dataDouble+40(%rip), %rdi
    0000008d: 	movsd	%xmm7, 0x30(%rsp)
    00000093: 	cmpl	$0x1, %r8d
    00000097: 	jbe	.Ltmp182 # Offset: 151
    0000009d: 	movsd	DATAat0x15c58(%rip), %xmm1
    000000a5: 	movsd	DATAat0x15cc8(%rip), %xmm6
    000000ad: 	movl	%r9d, %r10d
    000000b0: 	xorl	%r8d, %r8d
    000000b3: 	movsd	DATAat0x15cb8(%rip), %xmm3
    000000bb: 	shrl	%r10d
    000000be: 	movsd	DATAat0x15ca8(%rip), %xmm10
    000000c7: 	movsd	%xmm1, 0x8(%rsp)
    000000cd: 	movsd	DATAat0x15cd8(%rip), %xmm1
    000000d5: 	movsd	DATAat0x15c80(%rip), %xmm4
    000000dd: 	movsd	%xmm6, 0x10(%rsp)
    000000e3: 	movsd	DATAat0x15cc0(%rip), %xmm8
    000000ec: 	movsd	DATAat0x15dd8(%rip), %xmm9
    000000f5: 	movsd	%xmm1, 0x40(%rsp)
    000000fb: 	movsd	DATAat0x15ce0(%rip), %xmm1
    00000103: 	movsd	DATAat0x15ca0(%rip), %xmm5
    0000010b: 	movsd	%xmm3, 0x18(%rsp)
    00000111: 	movsd	DATAat0x15c78(%rip), %xmm6
    00000119: 	movsd	DATAat0x15c90(%rip), %xmm13
    00000122: 	movsd	%xmm1, 0x48(%rsp)
    00000128: 	movsd	DATAat0x15cd0(%rip), %xmm1
    00000130: 	movsd	DATAat0x15c88(%rip), %xmm7
    00000138: 	movsd	DATAat0x15de0(%rip), %xmm12
    00000141: 	movsd	DATAat0x15c98(%rip), %xmm3
    00000149: 	movsd	DATAat0x15cb0(%rip), %xmm14
    00000152: 	movsd	%xmm1, 0x38(%rsp)
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp183:
    00000160: 	movsd	0x10(%rsp), %xmm1
    00000166: 	movsd	0x18(%rsp), %xmm11
    0000016d: 	addsd	%xmm3, %xmm15
    00000172: 	addl	$0x1, %r8d
    00000176: 	addsd	%xmm1, %xmm0
    0000017a: 	addsd	%xmm10, %xmm15
    0000017f: 	addsd	%xmm10, %xmm0
    00000184: 	addsd	%xmm9, %xmm15
    00000189: 	addsd	%xmm4, %xmm0
    0000018d: 	addsd	%xmm8, %xmm15
    00000192: 	addsd	0x40(%rsp), %xmm15
    00000199: 	addsd	0x48(%rsp), %xmm15
    000001a0: 	addsd	%xmm8, %xmm0
    000001a5: 	addsd	%xmm3, %xmm15
    000001aa: 	addsd	%xmm9, %xmm0
    000001af: 	addsd	%xmm10, %xmm15
    000001b4: 	addsd	%xmm5, %xmm0
    000001b8: 	addsd	%xmm9, %xmm15
    000001bd: 	addsd	%xmm13, %xmm0
    000001c2: 	addsd	%xmm8, %xmm15
    000001c7: 	addsd	%xmm1, %xmm0
    000001cb: 	movq	%rdx, %xmm1
    000001d0: 	addsd	%xmm6, %xmm1
    000001d4: 	movq	%xmm15, %rbx
    000001d9: 	movsd	0x20(%rsp), %xmm15
    000001e0: 	addsd	%xmm10, %xmm0
    000001e5: 	addsd	%xmm4, %xmm1
    000001e9: 	addsd	%xmm4, %xmm0
    000001ed: 	addsd	%xmm7, %xmm1
    000001f1: 	addsd	%xmm8, %xmm0
    000001f6: 	addsd	%xmm13, %xmm1
    000001fb: 	addsd	%xmm9, %xmm0
    00000200: 	addsd	%xmm11, %xmm1
    00000205: 	addsd	%xmm5, %xmm0
    00000209: 	addsd	%xmm12, %xmm1
    0000020e: 	addsd	%xmm13, %xmm0
    00000213: 	addsd	%xmm6, %xmm1
    00000217: 	addsd	%xmm4, %xmm1
    0000021b: 	addsd	%xmm7, %xmm1
    0000021f: 	addsd	%xmm13, %xmm1
    00000224: 	movq	%xmm1, %rdx
    00000229: 	movq	%rax, %xmm1
    0000022e: 	addsd	%xmm5, %xmm1
    00000232: 	addsd	%xmm3, %xmm1
    00000236: 	addsd	%xmm6, %xmm1
    0000023a: 	addsd	0x8(%rsp), %xmm1
    00000240: 	addsd	%xmm6, %xmm1
    00000244: 	addsd	%xmm3, %xmm1
    00000248: 	addsd	%xmm5, %xmm1
    0000024c: 	addsd	%xmm3, %xmm1
    00000250: 	addsd	%xmm6, %xmm1
    00000254: 	addsd	0x8(%rsp), %xmm1
    0000025a: 	movq	%xmm1, %rax
    0000025f: 	movsd	0x8(%rsp), %xmm1
    00000265: 	addsd	%xmm1, %xmm2
    00000269: 	addsd	%xmm1, %xmm15
    0000026e: 	addsd	%xmm3, %xmm2
    00000272: 	addsd	%xmm4, %xmm2
    00000276: 	addsd	%xmm7, %xmm2
    0000027a: 	addsd	%xmm9, %xmm2
    0000027f: 	addsd	%xmm8, %xmm2
    00000284: 	addsd	%xmm1, %xmm2
    00000288: 	movapd	%xmm15, %xmm1
    0000028d: 	movq	%rsi, %xmm15
    00000292: 	addsd	%xmm5, %xmm15
    00000297: 	addsd	%xmm6, %xmm1
    0000029b: 	addsd	%xmm3, %xmm2
    0000029f: 	addsd	%xmm14, %xmm15
    000002a4: 	addsd	0x10(%rsp), %xmm15
    000002ab: 	addsd	0x38(%rsp), %xmm15
    000002b2: 	addsd	%xmm3, %xmm1
    000002b6: 	addsd	%xmm4, %xmm2
    000002ba: 	addsd	%xmm5, %xmm15
    000002bf: 	addsd	%xmm5, %xmm1
    000002c3: 	addsd	%xmm7, %xmm2
    000002c7: 	addsd	%xmm14, %xmm15
    000002cc: 	addsd	%xmm4, %xmm1
    000002d0: 	addsd	%xmm9, %xmm2
    000002d5: 	movq	%xmm15, %rsi
    000002da: 	movq	%rcx, %xmm15
    000002df: 	addsd	%xmm10, %xmm1
    000002e4: 	addsd	%xmm6, %xmm15
    000002e9: 	addsd	%xmm8, %xmm2
    000002ee: 	addsd	%xmm7, %xmm1
    000002f2: 	addsd	%xmm5, %xmm15
    000002f7: 	addsd	%xmm14, %xmm1
    000002fc: 	addsd	0x8(%rsp), %xmm1
    00000302: 	addsd	%xmm10, %xmm15
    00000307: 	addsd	%xmm6, %xmm1
    0000030b: 	addsd	%xmm14, %xmm15
    00000310: 	addsd	%xmm3, %xmm1
    00000314: 	addsd	%xmm6, %xmm15
    00000319: 	addsd	%xmm5, %xmm1
    0000031d: 	addsd	%xmm5, %xmm15
    00000322: 	addsd	%xmm4, %xmm1
    00000326: 	movq	%xmm15, %rcx
    0000032b: 	movsd	0x28(%rsp), %xmm15
    00000332: 	addsd	%xmm4, %xmm15
    00000337: 	addsd	%xmm10, %xmm1
    0000033c: 	addsd	%xmm13, %xmm15
    00000341: 	addsd	%xmm7, %xmm1
    00000345: 	addsd	%xmm12, %xmm15
    0000034a: 	addsd	%xmm4, %xmm15
    0000034f: 	movsd	%xmm15, 0x28(%rsp)
    00000356: 	movsd	0x30(%rsp), %xmm15
    0000035d: 	addsd	%xmm7, %xmm15
    00000362: 	addsd	%xmm9, %xmm15
    00000367: 	addsd	%xmm8, %xmm15
    0000036c: 	addsd	%xmm11, %xmm15
    00000371: 	addsd	%xmm12, %xmm15
    00000376: 	addsd	%xmm7, %xmm15
    0000037b: 	addsd	%xmm9, %xmm15
    00000380: 	addsd	%xmm8, %xmm15
    00000385: 	movq	%xmm15, %r11
    0000038a: 	movq	%rdi, %xmm15
    0000038f: 	addsd	%xmm3, %xmm15
    00000394: 	addsd	%xmm3, %xmm15
    00000399: 	addsd	%xmm3, %xmm15
    0000039e: 	addsd	%xmm3, %xmm15
    000003a3: 	addsd	%xmm3, %xmm15
    000003a8: 	addsd	%xmm3, %xmm15
    000003ad: 	movq	%xmm15, %rdi
    000003b2: 	movq	%rdx, %xmm15
    000003b7: 	addsd	%xmm11, %xmm15
    000003bc: 	addsd	%xmm12, %xmm15
    000003c1: 	movq	%xmm15, %rdx
    000003c6: 	movq	%rcx, %xmm15
    000003cb: 	addsd	%xmm10, %xmm15
    000003d0: 	addsd	%xmm14, %xmm15
    000003d5: 	movq	%xmm15, %rcx
    000003da: 	movq	%rax, %xmm15
    000003df: 	addsd	%xmm6, %xmm15
    000003e4: 	addsd	%xmm3, %xmm15
    000003e9: 	movq	%xmm15, %rax
    000003ee: 	movq	%rsi, %xmm15
    000003f3: 	addsd	0x10(%rsp), %xmm15
    000003fa: 	movapd	%xmm15, %xmm11
    000003ff: 	addsd	0x38(%rsp), %xmm11
    00000406: 	movq	%rbx, %xmm15
    0000040b: 	addsd	0x40(%rsp), %xmm15
    00000412: 	addsd	0x48(%rsp), %xmm15
    00000419: 	movq	%xmm11, %rsi
    0000041e: 	movapd	%xmm1, %xmm11
    00000423: 	movsd	0x28(%rsp), %xmm1
    00000429: 	addsd	%xmm14, %xmm11
    0000042e: 	addsd	%xmm13, %xmm1
    00000433: 	movsd	%xmm11, 0x20(%rsp)
    0000043a: 	movq	%r11, %xmm11
    0000043f: 	addsd	0x18(%rsp), %xmm11
    00000446: 	addsd	%xmm12, %xmm1
    0000044b: 	movsd	%xmm1, 0x28(%rsp)
    00000451: 	movapd	%xmm11, %xmm1
    00000456: 	addsd	%xmm12, %xmm1
    0000045b: 	movsd	%xmm1, 0x30(%rsp)
    00000461: 	cmpl	%r8d, %r10d
    00000464: 	jne	.Ltmp183 # Offset: 1124
    0000046a: 	movl	%r9d, %r8d
    0000046d: 	andl	$-0x2, %r8d
    00000471: 	testb	$0x1, %r9b
    00000475: 	je	.Ltmp184 # Offset: 1141
.Ltmp187:
    0000047b: 	movq	%rdi, %xmm1
    00000480: 	movsd	0x10(%rsp), %xmm11
    00000487: 	addsd	0x8(%rsp), %xmm2
    0000048d: 	addsd	%xmm3, %xmm15
    00000492: 	addsd	%xmm3, %xmm1
    00000496: 	addl	$0x1, %r8d
    0000049a: 	addsd	%xmm11, %xmm0
    0000049f: 	addsd	%xmm3, %xmm2
    000004a3: 	addsd	%xmm10, %xmm15
    000004a8: 	addsd	%xmm3, %xmm1
    000004ac: 	addsd	%xmm10, %xmm0
    000004b1: 	addsd	%xmm4, %xmm2
    000004b5: 	addsd	%xmm9, %xmm15
    000004ba: 	addsd	%xmm3, %xmm1
    000004be: 	addsd	%xmm4, %xmm0
    000004c2: 	addsd	%xmm7, %xmm2
    000004c6: 	addsd	%xmm8, %xmm15
    000004cb: 	movq	%xmm1, %rdi
    000004d0: 	movq	%rdx, %xmm1
    000004d5: 	addsd	0x40(%rsp), %xmm15
    000004dc: 	addsd	%xmm6, %xmm1
    000004e0: 	addsd	%xmm8, %xmm0
    000004e5: 	addsd	%xmm9, %xmm2
    000004ea: 	addsd	0x48(%rsp), %xmm15
    000004f1: 	addsd	%xmm4, %xmm1
    000004f5: 	addsd	%xmm9, %xmm0
    000004fa: 	addsd	%xmm8, %xmm2
    000004ff: 	addsd	%xmm7, %xmm1
    00000503: 	addsd	%xmm5, %xmm0
    00000507: 	addsd	%xmm13, %xmm1
    0000050c: 	addsd	0x18(%rsp), %xmm1
    00000512: 	addsd	%xmm13, %xmm0
    00000517: 	addsd	%xmm12, %xmm1
    0000051c: 	movq	%xmm1, %rdx
    00000521: 	movq	%rcx, %xmm1
    00000526: 	addsd	%xmm6, %xmm1
    0000052a: 	addsd	%xmm5, %xmm1
    0000052e: 	addsd	%xmm10, %xmm1
    00000533: 	addsd	%xmm14, %xmm1
    00000538: 	movq	%xmm1, %rcx
    0000053d: 	movq	%rax, %xmm1
    00000542: 	addsd	%xmm5, %xmm1
    00000546: 	addsd	%xmm3, %xmm1
    0000054a: 	addsd	%xmm6, %xmm1
    0000054e: 	addsd	0x8(%rsp), %xmm1
    00000554: 	addsd	%xmm6, %xmm1
    00000558: 	addsd	%xmm3, %xmm1
    0000055c: 	movq	%xmm1, %rax
    00000561: 	movq	%rsi, %xmm1
    00000566: 	addsd	%xmm5, %xmm1
    0000056a: 	addsd	%xmm14, %xmm1
    0000056f: 	addsd	%xmm11, %xmm1
    00000574: 	addsd	0x38(%rsp), %xmm1
    0000057a: 	movsd	0x18(%rsp), %xmm11
    00000581: 	movq	%xmm1, %rsi
    00000586: 	movsd	0x20(%rsp), %xmm1
    0000058c: 	addsd	0x8(%rsp), %xmm1
    00000592: 	addsd	%xmm6, %xmm1
    00000596: 	addsd	%xmm3, %xmm1
    0000059a: 	addsd	%xmm5, %xmm1
    0000059e: 	addsd	%xmm4, %xmm1
    000005a2: 	addsd	%xmm10, %xmm1
    000005a7: 	addsd	%xmm7, %xmm1
    000005ab: 	addsd	%xmm14, %xmm1
    000005b0: 	movsd	%xmm1, 0x20(%rsp)
    000005b6: 	movsd	0x28(%rsp), %xmm1
    000005bc: 	addsd	%xmm4, %xmm1
    000005c0: 	addsd	%xmm13, %xmm1
    000005c5: 	addsd	%xmm12, %xmm1
    000005ca: 	movsd	%xmm1, 0x28(%rsp)
    000005d0: 	movsd	0x30(%rsp), %xmm1
    000005d6: 	addsd	%xmm7, %xmm1
    000005da: 	addsd	%xmm9, %xmm1
    000005df: 	addsd	%xmm8, %xmm1
    000005e4: 	addsd	%xmm11, %xmm1
    000005e9: 	addsd	%xmm12, %xmm1
    000005ee: 	movsd	%xmm1, 0x30(%rsp)
    000005f4: 	cmpl	%r8d, %r9d
    000005f7: 	jle	.Ltmp184 # Offset: 1527
    000005fd: 	movq	%rdi, %xmm1
    00000602: 	addsd	0x8(%rsp), %xmm2
    00000608: 	addsd	%xmm3, %xmm1
    0000060c: 	addsd	%xmm3, %xmm2
    00000610: 	addsd	%xmm3, %xmm1
    00000614: 	addsd	%xmm4, %xmm2
    00000618: 	addsd	%xmm3, %xmm1
    0000061c: 	addsd	%xmm7, %xmm2
    00000620: 	movq	%xmm1, %rdi
    00000625: 	movq	%rdx, %xmm1
    0000062a: 	addsd	%xmm6, %xmm1
    0000062e: 	addsd	%xmm9, %xmm2
    00000633: 	addsd	%xmm4, %xmm1
    00000637: 	addsd	%xmm8, %xmm2
    0000063c: 	addsd	%xmm7, %xmm1
    00000640: 	addsd	%xmm13, %xmm1
    00000645: 	addsd	%xmm11, %xmm1
    0000064a: 	movsd	0x10(%rsp), %xmm11
    00000651: 	addsd	%xmm11, %xmm0
    00000656: 	addsd	%xmm12, %xmm1
    0000065b: 	addsd	%xmm10, %xmm0
    00000660: 	movq	%xmm1, %rdx
    00000665: 	movq	%rcx, %xmm1
    0000066a: 	addsd	%xmm6, %xmm1
    0000066e: 	addsd	%xmm4, %xmm0
    00000672: 	addsd	%xmm5, %xmm1
    00000676: 	addsd	%xmm8, %xmm0
    0000067b: 	addsd	%xmm10, %xmm1
    00000680: 	addsd	%xmm9, %xmm0
    00000685: 	addsd	%xmm14, %xmm1
    0000068a: 	addsd	%xmm5, %xmm0
    0000068e: 	movq	%xmm1, %rcx
    00000693: 	movq	%rax, %xmm1
    00000698: 	addsd	%xmm5, %xmm1
    0000069c: 	addsd	%xmm13, %xmm0
    000006a1: 	addsd	%xmm3, %xmm1
    000006a5: 	addsd	%xmm6, %xmm1
    000006a9: 	addsd	0x8(%rsp), %xmm1
    000006af: 	addsd	%xmm6, %xmm1
    000006b3: 	addsd	%xmm3, %xmm1
    000006b7: 	movq	%xmm1, %rax
    000006bc: 	movq	%rsi, %xmm1
    000006c1: 	addsd	%xmm5, %xmm1
    000006c5: 	addsd	%xmm14, %xmm1
    000006ca: 	addsd	%xmm11, %xmm1
    000006cf: 	movsd	0x38(%rsp), %xmm11
    000006d6: 	addsd	%xmm1, %xmm11
    000006db: 	movq	%xmm11, %rsi
    000006e0: 	movsd	0x8(%rsp), %xmm11
    000006e7: 	addsd	0x20(%rsp), %xmm11
    000006ee: 	addsd	%xmm6, %xmm11
    000006f3: 	addsd	%xmm3, %xmm11
    000006f8: 	addsd	%xmm15, %xmm3
    000006fd: 	movsd	0x48(%rsp), %xmm15
    00000704: 	addsd	%xmm5, %xmm11
    00000709: 	addsd	%xmm10, %xmm3
    0000070e: 	addsd	%xmm4, %xmm11
    00000713: 	addsd	0x28(%rsp), %xmm4
    00000719: 	addsd	%xmm9, %xmm3
    0000071e: 	addsd	%xmm10, %xmm11
    00000723: 	addsd	%xmm13, %xmm4
    00000728: 	addsd	%xmm8, %xmm3
    0000072d: 	addsd	0x40(%rsp), %xmm3
    00000733: 	addsd	%xmm7, %xmm11
    00000738: 	addsd	0x30(%rsp), %xmm7
    0000073e: 	addsd	%xmm12, %xmm4
    00000743: 	addsd	%xmm3, %xmm15
    00000748: 	addsd	%xmm9, %xmm7
    0000074d: 	addsd	%xmm14, %xmm11
    00000752: 	movsd	%xmm4, 0x28(%rsp)
    00000758: 	addsd	%xmm8, %xmm7
    0000075d: 	addsd	0x18(%rsp), %xmm7
    00000763: 	movsd	%xmm11, 0x20(%rsp)
    0000076a: 	addsd	%xmm12, %xmm7
    0000076f: 	movsd	%xmm7, 0x30(%rsp)
.Ltmp184:
    00000775: 	movsd	0x20(%rsp), %xmm7
    0000077b: 	movsd	0x30(%rsp), %xmm5
    00000781: 	movq	%rdi, dataDouble+40(%rip)
    00000788: 	movq	%rdx, dataDouble(%rip)
    0000078f: 	movsd	%xmm7, dataDouble+32(%rip)
    00000797: 	movsd	0x28(%rsp), %xmm7
    0000079d: 	movq	%rcx, dataDouble+24(%rip)
    000007a4: 	movq	%rax, dataDouble+48(%rip)
    000007ab: 	movq	%rsi, dataDouble+8(%rip)
    000007b2: 	movsd	%xmm0, dataDouble+64(%rip)
    000007ba: 	movsd	%xmm2, dataDouble+16(%rip)
    000007c2: 	movsd	%xmm15, dataDouble+80(%rip)
    000007cb: 	movsd	%xmm7, dataDouble+56(%rip)
    000007d3: 	movsd	%xmm5, dataDouble+72(%rip)
.Ltmp181:
    000007db: 	movq	%rbp, %rsi
    000007de: 	leaq	dataDouble(%rip), %rdi
    000007e5: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2021
    000007ea: 	movq	%rbp, %rdi
    000007ed: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2029
    000007f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007f9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000800: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000807: 	je	.Ltmp185 # Offset: 2055
.Ltmp186:
    00000809: 	movq	-0x20(%rax), %rbp
    0000080d: 	callq	clock@PLT # Offset: 2061
    00000812: 	pxor	%xmm0, %xmm0
    00000816: 	movq	%rax, end_time(%rip)
    0000081d: 	subq	start_time(%rip), %rax
    00000824: 	movq	%rbp, %rdi
    00000827: 	cvtsi2sd	%rax, %xmm0
    0000082c: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000834: 	addq	$0x58, %rsp
    00000838: 	popq	%rbx
    00000839: 	popq	%rbp
    0000083a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2106
    0000083f: 	nop # Size: 1
.Ltmp185:
    00000840: 	movq	-0x8(%rdx), %rax
    00000844: 	addq	$0x200, %rax
    0000084a: 	jmp	.Ltmp186 # Offset: 2122
.Ltmp182:
    0000084c: 	movsd	DATAat0x15c58(%rip), %xmm1
    00000854: 	xorl	%r8d, %r8d
    00000857: 	movsd	DATAat0x15cc8(%rip), %xmm6
    0000085f: 	movsd	DATAat0x15cb8(%rip), %xmm3
    00000867: 	movsd	DATAat0x15ca8(%rip), %xmm10
    00000870: 	movsd	%xmm1, 0x8(%rsp)
    00000876: 	movsd	DATAat0x15cd8(%rip), %xmm1
    0000087e: 	movsd	DATAat0x15c80(%rip), %xmm4
    00000886: 	movsd	%xmm6, 0x10(%rsp)
    0000088c: 	movsd	DATAat0x15cc0(%rip), %xmm8
    00000895: 	movsd	DATAat0x15dd8(%rip), %xmm9
    0000089e: 	movsd	%xmm1, 0x40(%rsp)
    000008a4: 	movsd	DATAat0x15ce0(%rip), %xmm1
    000008ac: 	movsd	DATAat0x15ca0(%rip), %xmm5
    000008b4: 	movsd	%xmm3, 0x18(%rsp)
    000008ba: 	movsd	DATAat0x15c78(%rip), %xmm6
    000008c2: 	movsd	DATAat0x15c90(%rip), %xmm13
    000008cb: 	movsd	%xmm1, 0x48(%rsp)
    000008d1: 	movsd	DATAat0x15cd0(%rip), %xmm1
    000008d9: 	movsd	DATAat0x15c88(%rip), %xmm7
    000008e1: 	movsd	DATAat0x15de0(%rip), %xmm12
    000008ea: 	movsd	DATAat0x15c98(%rip), %xmm3
    000008f2: 	movsd	DATAat0x15cb0(%rip), %xmm14
    000008fb: 	movsd	%xmm1, 0x38(%rsp)
    00000901: 	jmp	.Ltmp187 # Offset: 2305
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_globalIdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global2IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x4f90
  Size        : 0xa3c
  MaxSize     : 0xa40
  Offset      : 0x4f90
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global2IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x58, %rsp
    0000000d: 	callq	clock@PLT # Offset: 13
    00000012: 	movl	iterations(%rip), %esi
    00000018: 	movsd	dataDouble(%rip), %xmm15
    00000021: 	movq	%rax, start_time(%rip)
    00000028: 	movq	dataDouble+8(%rip), %r9
    0000002f: 	movsd	dataDouble+16(%rip), %xmm3
    00000037: 	movq	dataDouble+24(%rip), %r8
    0000003e: 	movsd	dataDouble+32(%rip), %xmm0
    00000046: 	movq	dataDouble+40(%rip), %r10
    0000004d: 	movsd	dataDouble+48(%rip), %xmm2
    00000055: 	movq	dataDouble+56(%rip), %r11
    0000005c: 	movsd	dataDouble+64(%rip), %xmm1
    00000064: 	movq	dataDouble+72(%rip), %rdx
    0000006b: 	movq	dataDouble+80(%rip), %rax
    00000072: 	testl	%esi, %esi
    00000074: 	jle	.Ltmp188 # Offset: 116
    0000007a: 	leal	-0x1(%rsi), %ecx
    0000007d: 	cmpl	$0x1, %ecx
    00000080: 	jbe	.Ltmp189 # Offset: 128
    00000086: 	movsd	DATAat0x15cb0(%rip), %xmm4
    0000008e: 	movl	%esi, %edi
    00000090: 	xorl	%ecx, %ecx
    00000092: 	movsd	DATAat0x15cb8(%rip), %xmm5
    0000009a: 	movsd	DATAat0x15cd8(%rip), %xmm13
    000000a3: 	movsd	DATAat0x15c78(%rip), %xmm6
    000000ab: 	shrl	%edi
    000000ad: 	movsd	%xmm4, 0x20(%rsp)
    000000b3: 	movsd	DATAat0x15cc8(%rip), %xmm4
    000000bb: 	movsd	DATAat0x15c90(%rip), %xmm12
    000000c4: 	movsd	%xmm5, 0x18(%rsp)
    000000ca: 	movsd	DATAat0x15de0(%rip), %xmm5
    000000d2: 	movsd	DATAat0x15c80(%rip), %xmm7
    000000da: 	movsd	DATAat0x15c88(%rip), %xmm9
    000000e3: 	movsd	%xmm4, 0x10(%rsp)
    000000e9: 	movsd	DATAat0x15cd0(%rip), %xmm4
    000000f1: 	movsd	DATAat0x15c58(%rip), %xmm14
    000000fa: 	movsd	%xmm13, 0x38(%rsp)
    00000101: 	movsd	DATAat0x15ce0(%rip), %xmm13
    0000010a: 	movsd	DATAat0x15dd8(%rip), %xmm10
    00000113: 	movsd	%xmm5, 0x28(%rsp)
    00000119: 	movsd	DATAat0x15cc0(%rip), %xmm8
    00000122: 	movsd	%xmm4, 0x30(%rsp)
    00000128: 	movsd	DATAat0x15ca0(%rip), %xmm5
    00000130: 	movsd	DATAat0x15c98(%rip), %xmm4
    00000138: 	movsd	DATAat0x15ca8(%rip), %xmm11
    00000141: 	movsd	%xmm13, 0x40(%rsp)
    00000148: 	movsd	%xmm12, 0x8(%rsp)
    0000014f: 	nop # Size: 1
.Ltmp190:
    00000150: 	addsd	%xmm6, %xmm15
    00000155: 	movsd	0x28(%rsp), %xmm12
    0000015c: 	addsd	%xmm14, %xmm0
    00000161: 	addl	$0x1, %ecx
    00000164: 	movsd	0x20(%rsp), %xmm13
    0000016b: 	addsd	%xmm14, %xmm3
    00000170: 	addsd	%xmm5, %xmm2
    00000174: 	addsd	%xmm7, %xmm15
    00000179: 	addsd	%xmm6, %xmm0
    0000017d: 	addsd	%xmm4, %xmm3
    00000181: 	addsd	%xmm4, %xmm2
    00000185: 	addsd	%xmm9, %xmm15
    0000018a: 	addsd	0x8(%rsp), %xmm15
    00000191: 	addsd	0x18(%rsp), %xmm15
    00000198: 	addsd	%xmm4, %xmm0
    0000019c: 	addsd	%xmm7, %xmm3
    000001a0: 	addsd	%xmm6, %xmm2
    000001a4: 	addsd	%xmm12, %xmm15
    000001a9: 	addsd	%xmm5, %xmm0
    000001ad: 	addsd	%xmm9, %xmm3
    000001b2: 	addsd	%xmm14, %xmm2
    000001b7: 	addsd	%xmm6, %xmm15
    000001bc: 	addsd	%xmm7, %xmm0
    000001c0: 	addsd	%xmm10, %xmm3
    000001c5: 	addsd	%xmm6, %xmm2
    000001c9: 	addsd	%xmm7, %xmm15
    000001ce: 	addsd	%xmm11, %xmm0
    000001d3: 	addsd	%xmm8, %xmm3
    000001d8: 	addsd	%xmm4, %xmm2
    000001dc: 	addsd	%xmm9, %xmm15
    000001e1: 	addsd	0x8(%rsp), %xmm15
    000001e8: 	addsd	%xmm9, %xmm0
    000001ed: 	addsd	%xmm14, %xmm3
    000001f2: 	addsd	%xmm5, %xmm2
    000001f6: 	movq	%xmm15, %rbx
    000001fb: 	movq	%r9, %xmm15
    00000200: 	addsd	%xmm5, %xmm15
    00000205: 	addsd	%xmm13, %xmm0
    0000020a: 	addsd	%xmm4, %xmm3
    0000020e: 	addsd	%xmm4, %xmm2
    00000212: 	addsd	%xmm13, %xmm15
    00000217: 	addsd	0x10(%rsp), %xmm15
    0000021e: 	addsd	0x30(%rsp), %xmm15
    00000225: 	addsd	%xmm14, %xmm0
    0000022a: 	addsd	%xmm7, %xmm3
    0000022e: 	addsd	%xmm6, %xmm2
    00000232: 	addsd	%xmm5, %xmm15
    00000237: 	addsd	%xmm6, %xmm0
    0000023b: 	addsd	%xmm9, %xmm3
    00000240: 	addsd	%xmm14, %xmm2
    00000245: 	addsd	%xmm13, %xmm15
    0000024a: 	addsd	%xmm4, %xmm0
    0000024e: 	addsd	%xmm6, %xmm2
    00000252: 	addsd	%xmm10, %xmm3
    00000257: 	movq	%xmm15, %r9
    0000025c: 	movq	%r8, %xmm15
    00000261: 	addsd	%xmm5, %xmm0
    00000265: 	addsd	%xmm6, %xmm15
    0000026a: 	addsd	%xmm4, %xmm2
    0000026e: 	addsd	%xmm8, %xmm3
    00000273: 	addsd	%xmm7, %xmm0
    00000277: 	addsd	%xmm5, %xmm15
    0000027c: 	addsd	%xmm11, %xmm0
    00000281: 	addsd	%xmm11, %xmm15
    00000286: 	addsd	%xmm9, %xmm0
    0000028b: 	addsd	%xmm13, %xmm15
    00000290: 	movq	%rbx, %xmm13
    00000295: 	addsd	0x18(%rsp), %xmm13
    0000029c: 	addsd	%xmm6, %xmm15
    000002a1: 	addsd	%xmm5, %xmm15
    000002a6: 	movq	%xmm15, %r8
    000002ab: 	movq	%r10, %xmm15
    000002b0: 	addsd	%xmm4, %xmm15
    000002b5: 	addsd	%xmm4, %xmm15
    000002ba: 	addsd	%xmm4, %xmm15
    000002bf: 	addsd	%xmm4, %xmm15
    000002c4: 	movq	%xmm15, %r10
    000002c9: 	movq	%r11, %xmm15
    000002ce: 	addsd	%xmm7, %xmm15
    000002d3: 	addsd	0x8(%rsp), %xmm15
    000002da: 	addsd	%xmm12, %xmm15
    000002df: 	addsd	%xmm7, %xmm15
    000002e4: 	movq	%xmm15, %r11
    000002e9: 	movsd	0x10(%rsp), %xmm15
    000002f0: 	addsd	%xmm15, %xmm1
    000002f5: 	addsd	%xmm11, %xmm1
    000002fa: 	addsd	%xmm7, %xmm1
    000002fe: 	addsd	%xmm8, %xmm1
    00000303: 	addsd	%xmm10, %xmm1
    00000308: 	addsd	%xmm5, %xmm1
    0000030c: 	addsd	0x8(%rsp), %xmm1
    00000312: 	addsd	%xmm15, %xmm1
    00000317: 	movq	%rdx, %xmm15
    0000031c: 	addsd	%xmm9, %xmm15
    00000321: 	addsd	%xmm11, %xmm1
    00000326: 	addsd	%xmm10, %xmm15
    0000032b: 	addsd	%xmm7, %xmm1
    0000032f: 	addsd	%xmm8, %xmm15
    00000334: 	addsd	0x18(%rsp), %xmm15
    0000033b: 	addsd	%xmm8, %xmm1
    00000340: 	addsd	%xmm12, %xmm15
    00000345: 	addsd	%xmm10, %xmm1
    0000034a: 	addsd	%xmm9, %xmm15
    0000034f: 	addsd	%xmm5, %xmm1
    00000353: 	addsd	0x8(%rsp), %xmm1
    00000359: 	addsd	%xmm10, %xmm15
    0000035e: 	addsd	%xmm8, %xmm15
    00000363: 	movq	%xmm15, %rdx
    00000368: 	movq	%rax, %xmm15
    0000036d: 	addsd	%xmm4, %xmm15
    00000372: 	addsd	%xmm11, %xmm15
    00000377: 	addsd	%xmm10, %xmm15
    0000037c: 	addsd	%xmm8, %xmm15
    00000381: 	addsd	0x38(%rsp), %xmm15
    00000388: 	addsd	0x40(%rsp), %xmm15
    0000038f: 	addsd	%xmm4, %xmm15
    00000394: 	addsd	%xmm11, %xmm15
    00000399: 	addsd	%xmm10, %xmm15
    0000039e: 	addsd	%xmm8, %xmm15
    000003a3: 	movq	%xmm15, %rax
    000003a8: 	movq	%r10, %xmm15
    000003ad: 	addsd	%xmm4, %xmm15
    000003b2: 	addsd	%xmm4, %xmm15
    000003b7: 	movq	%xmm15, %r10
    000003bc: 	movapd	%xmm13, %xmm15
    000003c1: 	movsd	0x20(%rsp), %xmm13
    000003c8: 	addsd	%xmm12, %xmm15
    000003cd: 	movq	%r8, %xmm12
    000003d2: 	addsd	%xmm11, %xmm12
    000003d7: 	addsd	%xmm13, %xmm0
    000003dc: 	addsd	%xmm13, %xmm12
    000003e1: 	movsd	0x28(%rsp), %xmm13
    000003e8: 	movq	%xmm12, %r8
    000003ed: 	movq	%r9, %xmm12
    000003f2: 	addsd	0x10(%rsp), %xmm12
    000003f9: 	addsd	0x30(%rsp), %xmm12
    00000400: 	movq	%xmm12, %r9
    00000405: 	movq	%rax, %xmm12
    0000040a: 	addsd	0x38(%rsp), %xmm12
    00000411: 	addsd	0x40(%rsp), %xmm12
    00000418: 	movq	%xmm12, %rax
    0000041d: 	movq	%r11, %xmm12
    00000422: 	addsd	0x8(%rsp), %xmm12
    00000429: 	addsd	%xmm13, %xmm12
    0000042e: 	movq	%xmm12, %r11
    00000433: 	movq	%rdx, %xmm12
    00000438: 	addsd	0x18(%rsp), %xmm12
    0000043f: 	addsd	%xmm13, %xmm12
    00000444: 	movq	%xmm12, %rdx
    00000449: 	cmpl	%ecx, %edi
    0000044b: 	jne	.Ltmp190 # Offset: 1099
    00000451: 	movl	%esi, %ecx
    00000453: 	andl	$-0x2, %ecx
    00000456: 	testb	$0x1, %sil
    0000045a: 	je	.Ltmp188 # Offset: 1114
.Ltmp193:
    00000460: 	movq	%rax, %xmm12
    00000465: 	movsd	0x10(%rsp), %xmm13
    0000046c: 	addsd	%xmm5, %xmm2
    00000470: 	addl	$0x1, %ecx
    00000473: 	addsd	%xmm4, %xmm12
    00000478: 	addsd	%xmm6, %xmm15
    0000047d: 	addsd	%xmm13, %xmm1
    00000482: 	addsd	%xmm14, %xmm0
    00000487: 	addsd	%xmm14, %xmm3
    0000048c: 	addsd	%xmm4, %xmm2
    00000490: 	movq	%xmm12, %rax
    00000495: 	movq	%r9, %xmm12
    0000049a: 	addsd	%xmm7, %xmm15
    0000049f: 	addsd	%xmm5, %xmm12
    000004a4: 	addsd	%xmm6, %xmm0
    000004a8: 	addsd	%xmm11, %xmm1
    000004ad: 	addsd	%xmm4, %xmm3
    000004b1: 	addsd	%xmm9, %xmm15
    000004b6: 	addsd	0x8(%rsp), %xmm15
    000004bd: 	movq	%xmm12, %r9
    000004c2: 	movq	%r8, %xmm12
    000004c7: 	addsd	%xmm4, %xmm0
    000004cb: 	addsd	%xmm6, %xmm12
    000004d0: 	addsd	%xmm7, %xmm1
    000004d4: 	addsd	%xmm6, %xmm2
    000004d8: 	addsd	%xmm7, %xmm3
    000004dc: 	addsd	%xmm5, %xmm0
    000004e0: 	movq	%xmm12, %r8
    000004e5: 	movq	%r11, %xmm12
    000004ea: 	addsd	%xmm8, %xmm1
    000004ef: 	addsd	%xmm7, %xmm12
    000004f4: 	addsd	%xmm14, %xmm2
    000004f9: 	addsd	%xmm7, %xmm0
    000004fd: 	addsd	%xmm9, %xmm3
    00000502: 	addsd	%xmm10, %xmm1
    00000507: 	movq	%xmm12, %r11
    0000050c: 	movq	%rdx, %xmm12
    00000511: 	addsd	%xmm6, %xmm2
    00000515: 	addsd	%xmm9, %xmm12
    0000051a: 	addsd	%xmm11, %xmm0
    0000051f: 	addsd	%xmm10, %xmm3
    00000524: 	addsd	%xmm5, %xmm1
    00000528: 	addsd	%xmm4, %xmm2
    0000052c: 	addsd	0x8(%rsp), %xmm1
    00000532: 	movq	%xmm12, %rdx
    00000537: 	movq	%r10, %xmm12
    0000053c: 	addsd	%xmm9, %xmm0
    00000541: 	addsd	%xmm4, %xmm12
    00000546: 	addsd	%xmm8, %xmm3
    0000054b: 	addsd	0x20(%rsp), %xmm0
    00000551: 	movq	%xmm12, %r10
    00000556: 	movq	%r8, %xmm12
    0000055b: 	addsd	%xmm5, %xmm12
    00000560: 	movq	%xmm12, %r8
    00000565: 	movq	%rax, %xmm12
    0000056a: 	addsd	%xmm11, %xmm12
    0000056f: 	movq	%xmm12, %rax
    00000574: 	movq	%r9, %xmm12
    00000579: 	addsd	0x20(%rsp), %xmm12
    00000580: 	movq	%xmm12, %r9
    00000585: 	movq	%rdx, %xmm12
    0000058a: 	addsd	%xmm10, %xmm12
    0000058f: 	movq	%xmm12, %rdx
    00000594: 	movq	%rax, %xmm12
    00000599: 	addsd	%xmm10, %xmm12
    0000059e: 	movq	%xmm12, %rax
    000005a3: 	movq	%r10, %xmm12
    000005a8: 	addsd	%xmm4, %xmm12
    000005ad: 	movq	%xmm12, %r10
    000005b2: 	movq	%rax, %xmm12
    000005b7: 	addsd	%xmm8, %xmm12
    000005bc: 	movq	%xmm12, %rax
    000005c1: 	movq	%r9, %xmm12
    000005c6: 	addsd	%xmm13, %xmm12
    000005cb: 	movsd	0x18(%rsp), %xmm13
    000005d2: 	addsd	%xmm13, %xmm15
    000005d7: 	movq	%xmm12, %r9
    000005dc: 	movq	%rdx, %xmm12
    000005e1: 	addsd	%xmm8, %xmm12
    000005e6: 	movq	%xmm12, %rdx
    000005eb: 	movq	%r8, %xmm12
    000005f0: 	addsd	%xmm11, %xmm12
    000005f5: 	movq	%xmm12, %r8
    000005fa: 	movq	%rdx, %xmm12
    000005ff: 	addsd	%xmm13, %xmm12
    00000604: 	movsd	0x28(%rsp), %xmm13
    0000060b: 	addsd	%xmm13, %xmm15
    00000610: 	movq	%xmm12, %rdx
    00000615: 	movq	%rax, %xmm12
    0000061a: 	addsd	0x38(%rsp), %xmm12
    00000621: 	movq	%xmm12, %rax
    00000626: 	movq	%r10, %xmm12
    0000062b: 	addsd	%xmm4, %xmm12
    00000630: 	movq	%xmm12, %r10
    00000635: 	movq	%r8, %xmm12
    0000063a: 	addsd	0x20(%rsp), %xmm12
    00000641: 	movq	%xmm12, %r8
    00000646: 	movq	%r11, %xmm12
    0000064b: 	addsd	0x8(%rsp), %xmm12
    00000652: 	movq	%xmm12, %r11
    00000657: 	movq	%r9, %xmm12
    0000065c: 	addsd	0x30(%rsp), %xmm12
    00000663: 	movq	%xmm12, %r9
    00000668: 	movq	%rax, %xmm12
    0000066d: 	addsd	0x40(%rsp), %xmm12
    00000674: 	movq	%xmm12, %rax
    00000679: 	movq	%r11, %xmm12
    0000067e: 	addsd	%xmm13, %xmm12
    00000683: 	movq	%xmm12, %r11
    00000688: 	movq	%rdx, %xmm12
    0000068d: 	addsd	%xmm13, %xmm12
    00000692: 	movq	%xmm12, %rdx
    00000697: 	cmpl	%ecx, %esi
    00000699: 	jle	.Ltmp188 # Offset: 1689
    0000069f: 	movq	%rax, %xmm12
    000006a4: 	movsd	0x10(%rsp), %xmm13
    000006ab: 	addsd	%xmm5, %xmm2
    000006af: 	addsd	%xmm14, %xmm0
    000006b4: 	addsd	%xmm4, %xmm12
    000006b9: 	addsd	%xmm14, %xmm3
    000006be: 	addsd	%xmm13, %xmm1
    000006c3: 	addsd	%xmm6, %xmm15
    000006c8: 	addsd	%xmm4, %xmm2
    000006cc: 	addsd	%xmm6, %xmm0
    000006d0: 	movq	%xmm12, %rax
    000006d5: 	movq	%r9, %xmm12
    000006da: 	addsd	%xmm4, %xmm3
    000006de: 	addsd	%xmm5, %xmm12
    000006e3: 	addsd	%xmm11, %xmm1
    000006e8: 	addsd	%xmm6, %xmm2
    000006ec: 	addsd	%xmm4, %xmm0
    000006f0: 	addsd	%xmm7, %xmm15
    000006f5: 	addsd	%xmm7, %xmm3
    000006f9: 	movq	%xmm12, %r9
    000006fe: 	movq	%r8, %xmm12
    00000703: 	addsd	%xmm7, %xmm1
    00000707: 	addsd	%xmm6, %xmm12
    0000070c: 	addsd	%xmm14, %xmm2
    00000711: 	addsd	%xmm5, %xmm0
    00000715: 	addsd	%xmm9, %xmm15
    0000071a: 	addsd	%xmm8, %xmm1
    0000071f: 	addsd	0x8(%rsp), %xmm15
    00000726: 	movq	%xmm12, %r8
    0000072b: 	movq	%r11, %xmm12
    00000730: 	addsd	%xmm6, %xmm2
    00000734: 	movsd	0x18(%rsp), %xmm6
    0000073a: 	addsd	%xmm7, %xmm12
    0000073f: 	addsd	%xmm7, %xmm0
    00000743: 	addsd	%xmm10, %xmm1
    00000748: 	addsd	%xmm9, %xmm3
    0000074d: 	addsd	%xmm6, %xmm15
    00000752: 	addsd	%xmm4, %xmm2
    00000756: 	movq	%xmm12, %r11
    0000075b: 	movq	%rdx, %xmm12
    00000760: 	addsd	%xmm11, %xmm0
    00000765: 	addsd	%xmm9, %xmm12
    0000076a: 	addsd	%xmm5, %xmm1
    0000076e: 	addsd	%xmm10, %xmm3
    00000773: 	addsd	%xmm9, %xmm0
    00000778: 	movq	%xmm12, %rdx
    0000077d: 	movq	%r10, %xmm12
    00000782: 	addsd	%xmm4, %xmm12
    00000787: 	addsd	%xmm8, %xmm3
    0000078c: 	movq	%xmm12, %r10
    00000791: 	movq	%r8, %xmm12
    00000796: 	addsd	%xmm5, %xmm12
    0000079b: 	movq	%r10, %xmm14
    000007a0: 	addsd	%xmm4, %xmm14
    000007a5: 	movq	%xmm12, %r8
    000007aa: 	movq	%rax, %xmm12
    000007af: 	addsd	%xmm11, %xmm12
    000007b4: 	movq	%xmm14, %r10
    000007b9: 	movq	%r10, %xmm5
    000007be: 	addsd	%xmm4, %xmm5
    000007c2: 	movq	%xmm12, %rax
    000007c7: 	movq	%r9, %xmm12
    000007cc: 	addsd	0x20(%rsp), %xmm12
    000007d3: 	movq	%xmm5, %r10
    000007d8: 	movsd	%xmm12, 0x48(%rsp)
    000007df: 	movq	%rdx, %xmm12
    000007e4: 	addsd	%xmm10, %xmm12
    000007e9: 	movq	%xmm12, %rdx
    000007ee: 	movq	%rax, %xmm12
    000007f3: 	addsd	%xmm10, %xmm12
    000007f8: 	movsd	0x28(%rsp), %xmm10
    000007ff: 	addsd	%xmm10, %xmm15
    00000804: 	movapd	%xmm12, %xmm14
    00000809: 	movsd	0x48(%rsp), %xmm12
    00000810: 	addsd	%xmm8, %xmm14
    00000815: 	addsd	%xmm13, %xmm12
    0000081a: 	movq	%r8, %xmm13
    0000081f: 	addsd	%xmm11, %xmm13
    00000824: 	movsd	0x20(%rsp), %xmm11
    0000082b: 	movsd	%xmm14, 0x10(%rsp)
    00000832: 	movapd	%xmm12, %xmm14
    00000837: 	movq	%rdx, %xmm12
    0000083c: 	addsd	%xmm11, %xmm0
    00000841: 	movapd	%xmm13, %xmm5
    00000846: 	addsd	%xmm8, %xmm12
    0000084b: 	movsd	0x8(%rsp), %xmm13
    00000852: 	addsd	0x30(%rsp), %xmm14
    00000859: 	addsd	%xmm11, %xmm5
    0000085e: 	addsd	%xmm13, %xmm1
    00000863: 	movapd	%xmm12, %xmm7
    00000868: 	movq	%xmm14, %r9
    0000086d: 	movq	%xmm5, %r8
    00000872: 	movq	%r11, %xmm5
    00000877: 	addsd	%xmm6, %xmm7
    0000087b: 	movsd	0x10(%rsp), %xmm6
    00000881: 	addsd	%xmm13, %xmm5
    00000886: 	addsd	0x38(%rsp), %xmm6
    0000088c: 	addsd	0x40(%rsp), %xmm6
    00000892: 	addsd	%xmm10, %xmm7
    00000897: 	addsd	%xmm10, %xmm5
    0000089c: 	movq	%xmm6, %rax
    000008a1: 	movq	%xmm7, %rdx
    000008a6: 	movq	%xmm5, %r11
.Ltmp188:
    000008ab: 	movq	%rbp, %rsi
    000008ae: 	leaq	dataDouble(%rip), %rdi
    000008b5: 	movq	%rdx, dataDouble+72(%rip)
    000008bc: 	movq	%rax, dataDouble+80(%rip)
    000008c3: 	movq	%r9, dataDouble+8(%rip)
    000008ca: 	movq	%r8, dataDouble+24(%rip)
    000008d1: 	movq	%r10, dataDouble+40(%rip)
    000008d8: 	movq	%r11, dataDouble+56(%rip)
    000008df: 	movsd	%xmm15, dataDouble(%rip)
    000008e8: 	movsd	%xmm3, dataDouble+16(%rip)
    000008f0: 	movsd	%xmm0, dataDouble+32(%rip)
    000008f8: 	movsd	%xmm2, dataDouble+48(%rip)
    00000900: 	movsd	%xmm1, dataDouble+64(%rip)
    00000908: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2312
    0000090d: 	movq	%rbp, %rdi
    00000910: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2320
    00000915: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000091c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000923: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000092a: 	je	.Ltmp191 # Offset: 2346
.Ltmp192:
    0000092c: 	movq	-0x20(%rax), %rbp
    00000930: 	callq	clock@PLT # Offset: 2352
    00000935: 	pxor	%xmm0, %xmm0
    00000939: 	movq	%rax, end_time(%rip)
    00000940: 	subq	start_time(%rip), %rax
    00000947: 	movq	%rbp, %rdi
    0000094a: 	cvtsi2sd	%rax, %xmm0
    0000094f: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000957: 	addq	$0x58, %rsp
    0000095b: 	popq	%rbx
    0000095c: 	popq	%rbp
    0000095d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2397
    00000962: 	nopw	(%rax,%rax) # Size: 6
.Ltmp191:
    00000968: 	movq	-0x8(%rdx), %rax
    0000096c: 	addq	$0x200, %rax
    00000972: 	jmp	.Ltmp192 # Offset: 2418
.Ltmp189:
    00000974: 	movsd	DATAat0x15c90(%rip), %xmm5
    0000097c: 	movsd	DATAat0x15cb0(%rip), %xmm4
    00000984: 	xorl	%ecx, %ecx
    00000986: 	movsd	DATAat0x15c78(%rip), %xmm6
    0000098e: 	movsd	DATAat0x15cd8(%rip), %xmm13
    00000997: 	movsd	%xmm5, 0x8(%rsp)
    0000099d: 	movsd	DATAat0x15cb8(%rip), %xmm5
    000009a5: 	movsd	DATAat0x15c80(%rip), %xmm7
    000009ad: 	movsd	DATAat0x15c88(%rip), %xmm9
    000009b6: 	movsd	%xmm4, 0x20(%rsp)
    000009bc: 	movsd	DATAat0x15cc8(%rip), %xmm4
    000009c4: 	movsd	DATAat0x15c58(%rip), %xmm14
    000009cd: 	movsd	%xmm5, 0x18(%rsp)
    000009d3: 	movsd	DATAat0x15de0(%rip), %xmm5
    000009db: 	movsd	DATAat0x15dd8(%rip), %xmm10
    000009e4: 	movsd	%xmm4, 0x10(%rsp)
    000009ea: 	movsd	DATAat0x15cd0(%rip), %xmm4
    000009f2: 	movsd	DATAat0x15cc0(%rip), %xmm8
    000009fb: 	movsd	%xmm13, 0x38(%rsp)
    00000a02: 	movsd	DATAat0x15ce0(%rip), %xmm13
    00000a0b: 	movsd	DATAat0x15ca8(%rip), %xmm11
    00000a14: 	movsd	%xmm5, 0x28(%rsp)
    00000a1a: 	movsd	DATAat0x15ca0(%rip), %xmm5
    00000a22: 	movsd	%xmm4, 0x30(%rsp)
    00000a28: 	movsd	DATAat0x15c98(%rip), %xmm4
    00000a30: 	movsd	%xmm13, 0x40(%rsp)
    00000a37: 	jmp	.Ltmp193 # Offset: 2615
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global2IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_array5_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x59d0
  Size        : 0x274
  MaxSize     : 0x280
  Offset      : 0x59d0
  Section     : .text
  Orc Section : .local.text._Z17test_array5_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	pxor	%xmm1, %xmm1
    00000009: 	movq	%rdi, %rbp
    0000000c: 	subq	$0x10, %rsp
    00000010: 	cvtsi2sdl	init_value(%rip), %xmm1
    00000018: 	movsd	%xmm1, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %edx
    00000029: 	movsd	0x8(%rsp), %xmm1
    0000002f: 	movq	%rax, start_time(%rip)
    00000036: 	testl	%edx, %edx
    00000038: 	jle	.Ltmp194 # Offset: 56
    0000003e: 	movsd	DATAat0x15c78(%rip), %xmm9
    00000047: 	movapd	%xmm1, %xmm4
    0000004b: 	xorl	%eax, %eax
    0000004d: 	movsd	DATAat0x15c80(%rip), %xmm8
    00000056: 	movsd	DATAat0x15c88(%rip), %xmm7
    0000005e: 	movapd	%xmm1, %xmm3
    00000062: 	movapd	%xmm1, %xmm0
    00000066: 	movsd	DATAat0x15c58(%rip), %xmm12
    0000006f: 	movsd	DATAat0x15c98(%rip), %xmm11
    00000078: 	movsd	DATAat0x15ca0(%rip), %xmm6
    00000080: 	movapd	%xmm1, %xmm2
    00000084: 	movsd	DATAat0x15ca8(%rip), %xmm10
    0000008d: 	movsd	DATAat0x15cb0(%rip), %xmm5
    00000095: 	movsd	DATAat0x15cc0(%rip), %xmm15
    0000009e: 	movsd	DATAat0x15cc8(%rip), %xmm14
    000000a7: 	movsd	DATAat0x15cd0(%rip), %xmm13
.Ltmp195:
    000000b0: 	addsd	%xmm12, %xmm0
    000000b5: 	addsd	%xmm12, %xmm2
    000000ba: 	addl	$0x1, %eax
    000000bd: 	addsd	%xmm6, %xmm3
    000000c1: 	addsd	%xmm9, %xmm4
    000000c6: 	addsd	%xmm9, %xmm1
    000000cb: 	addsd	%xmm9, %xmm0
    000000d0: 	addsd	%xmm11, %xmm2
    000000d5: 	addsd	%xmm5, %xmm3
    000000d9: 	addsd	%xmm6, %xmm4
    000000dd: 	addsd	%xmm8, %xmm1
    000000e2: 	addsd	%xmm11, %xmm0
    000000e7: 	addsd	%xmm8, %xmm2
    000000ec: 	addsd	%xmm10, %xmm4
    000000f1: 	addsd	%xmm14, %xmm3
    000000f6: 	addsd	%xmm7, %xmm1
    000000fa: 	addsd	DATAat0x15c90(%rip), %xmm1
    00000102: 	addsd	%xmm6, %xmm0
    00000106: 	addsd	%xmm7, %xmm2
    0000010a: 	addsd	DATAat0x15dd8(%rip), %xmm2
    00000112: 	addsd	DATAat0x15cb8(%rip), %xmm1
    0000011a: 	addsd	%xmm5, %xmm4
    0000011e: 	addsd	DATAat0x15de0(%rip), %xmm1
    00000126: 	addsd	%xmm8, %xmm0
    0000012b: 	addsd	%xmm13, %xmm3
    00000130: 	addsd	%xmm15, %xmm2
    00000135: 	addsd	%xmm10, %xmm0
    0000013a: 	addsd	%xmm7, %xmm0
    0000013e: 	addsd	%xmm5, %xmm0
    00000142: 	cmpl	%edx, %eax
    00000144: 	jne	.Ltmp195 # Offset: 324
.Ltmp199:
    0000014a: 	pxor	%xmm5, %xmm5
    0000014e: 	pxor	%xmm6, %xmm6
    00000152: 	movl	$0x1, %eax
    00000157: 	movsd	DATAat0x15db0(%rip), %xmm7
    0000015f: 	cvtsi2sd	%edx, %xmm5
    00000163: 	cvtsi2sdl	init_value(%rip), %xmm6
    0000016b: 	mulsd	%xmm5, %xmm7
    0000016f: 	addsd	%xmm6, %xmm7
    00000173: 	ucomisd	%xmm1, %xmm7
    00000177: 	setp	%dl
    0000017a: 	cmovnel	%eax, %edx
    0000017d: 	testb	%dl, %dl
    0000017f: 	jne	.Ltmp196 # Offset: 383
    00000181: 	movsd	DATAat0x15db8(%rip), %xmm1
    00000189: 	mulsd	%xmm5, %xmm1
    0000018d: 	addsd	%xmm6, %xmm1
    00000191: 	ucomisd	%xmm3, %xmm1
    00000195: 	setp	%dl
    00000198: 	cmovnel	%eax, %edx
    0000019b: 	testb	%dl, %dl
    0000019d: 	jne	.Ltmp196 # Offset: 413
    0000019f: 	movsd	DATAat0x15dc0(%rip), %xmm1
    000001a7: 	mulsd	%xmm5, %xmm1
    000001ab: 	mulsd	DATAat0x15dc8(%rip), %xmm5
    000001b3: 	addsd	%xmm6, %xmm1
    000001b7: 	addsd	%xmm6, %xmm5
    000001bb: 	ucomisd	%xmm4, %xmm5
    000001bf: 	setp	%dl
    000001c2: 	cmovnel	%eax, %edx
    000001c5: 	ucomisd	%xmm2, %xmm1
    000001c9: 	setp	%cl
    000001cc: 	cmovnel	%eax, %ecx
    000001cf: 	orb	%cl, %dl
    000001d1: 	jne	.Ltmp196 # Offset: 465
    000001d3: 	ucomisd	%xmm0, %xmm1
    000001d7: 	setp	%dl
    000001da: 	cmovel	%edx, %eax
    000001dd: 	testb	%al, %al
    000001df: 	je	.Ltmp197 # Offset: 479
.Ltmp196:
    000001e1: 	movq	(%rbp), %rdx
    000001e5: 	leaq	DATAat0x158f3(%rip), %rsi
    000001ec: 	movl	$0x1, %edi
    000001f1: 	xorl	%eax, %eax
    000001f3: 	callq	__printf_chk@PLT # Offset: 499
.Ltmp197:
    000001f8: 	movq	%rbp, %rdi
    000001fb: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 507
    00000200: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000207: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000020e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000215: 	je	.Ltmp198 # Offset: 533
.Ltmp200:
    00000217: 	movq	-0x20(%rax), %rbp
    0000021b: 	callq	clock@PLT # Offset: 539
    00000220: 	pxor	%xmm0, %xmm0
    00000224: 	movq	%rax, end_time(%rip)
    0000022b: 	subq	start_time(%rip), %rax
    00000232: 	movq	%rbp, %rdi
    00000235: 	cvtsi2sd	%rax, %xmm0
    0000023a: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000242: 	addq	$0x10, %rsp
    00000246: 	popq	%rbp
    00000247: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 583
    0000024c: 	nopl	(%rax) # Size: 4
.Ltmp194:
    00000250: 	movapd	%xmm1, %xmm0
    00000254: 	movapd	%xmm1, %xmm4
    00000258: 	movapd	%xmm1, %xmm2
    0000025c: 	movapd	%xmm1, %xmm3
    00000260: 	jmp	.Ltmp199 # Offset: 608
    00000265: 	nopl	(%rax) # Size: 3
.Ltmp198:
    00000268: 	movq	-0x8(%rdx), %rax
    0000026c: 	addq	$0x200, %rax
    00000272: 	jmp	.Ltmp200 # Offset: 626
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_array5_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x5c50
  Size        : 0x25c
  MaxSize     : 0x260
  Offset      : 0x5c50
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	pxor	%xmm1, %xmm1
    00000009: 	movq	%rdi, %rbp
    0000000c: 	subq	$0x10, %rsp
    00000010: 	cvtsi2sdl	init_value(%rip), %xmm1
    00000018: 	movsd	%xmm1, 0x8(%rsp)
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movl	iterations(%rip), %edx
    00000029: 	movsd	0x8(%rsp), %xmm1
    0000002f: 	movq	%rax, start_time(%rip)
    00000036: 	movapd	%xmm1, %xmm0
    0000003a: 	movapd	%xmm1, %xmm4
    0000003e: 	movapd	%xmm1, %xmm2
    00000042: 	testl	%edx, %edx
    00000044: 	movapd	%xmm1, %xmm3
    00000048: 	jle	.Ltmp201 # Offset: 72
    0000004e: 	movsd	DATAat0x15c78(%rip), %xmm9
    00000057: 	movsd	DATAat0x15c88(%rip), %xmm7
    0000005f: 	xorl	%eax, %eax
    00000061: 	movsd	DATAat0x15ca0(%rip), %xmm6
    00000069: 	movsd	DATAat0x15c80(%rip), %xmm8
    00000072: 	movsd	DATAat0x15cb0(%rip), %xmm5
    0000007a: 	movsd	DATAat0x15c58(%rip), %xmm12
    00000083: 	movsd	DATAat0x15c98(%rip), %xmm11
    0000008c: 	movsd	DATAat0x15ca8(%rip), %xmm10
    00000095: 	movsd	DATAat0x15cc0(%rip), %xmm15
    0000009e: 	movsd	DATAat0x15cc8(%rip), %xmm14
    000000a7: 	movsd	DATAat0x15cd0(%rip), %xmm13
.Ltmp202:
    000000b0: 	addsd	%xmm12, %xmm0
    000000b5: 	addsd	%xmm12, %xmm2
    000000ba: 	addl	$0x1, %eax
    000000bd: 	addsd	%xmm6, %xmm3
    000000c1: 	addsd	%xmm9, %xmm4
    000000c6: 	addsd	%xmm9, %xmm1
    000000cb: 	addsd	%xmm9, %xmm0
    000000d0: 	addsd	%xmm11, %xmm2
    000000d5: 	addsd	%xmm5, %xmm3
    000000d9: 	addsd	%xmm6, %xmm4
    000000dd: 	addsd	%xmm8, %xmm1
    000000e2: 	addsd	%xmm11, %xmm0
    000000e7: 	addsd	%xmm8, %xmm2
    000000ec: 	addsd	%xmm10, %xmm4
    000000f1: 	addsd	%xmm14, %xmm3
    000000f6: 	addsd	%xmm7, %xmm1
    000000fa: 	addsd	DATAat0x15c90(%rip), %xmm1
    00000102: 	addsd	%xmm6, %xmm0
    00000106: 	addsd	%xmm7, %xmm2
    0000010a: 	addsd	DATAat0x15dd8(%rip), %xmm2
    00000112: 	addsd	DATAat0x15cb8(%rip), %xmm1
    0000011a: 	addsd	%xmm5, %xmm4
    0000011e: 	addsd	DATAat0x15de0(%rip), %xmm1
    00000126: 	addsd	%xmm8, %xmm0
    0000012b: 	addsd	%xmm13, %xmm3
    00000130: 	addsd	%xmm15, %xmm2
    00000135: 	addsd	%xmm10, %xmm0
    0000013a: 	addsd	%xmm7, %xmm0
    0000013e: 	addsd	%xmm5, %xmm0
    00000142: 	cmpl	%edx, %eax
    00000144: 	jne	.Ltmp202 # Offset: 324
.Ltmp201:
    0000014a: 	pxor	%xmm5, %xmm5
    0000014e: 	pxor	%xmm6, %xmm6
    00000152: 	movl	$0x1, %eax
    00000157: 	movsd	DATAat0x15db0(%rip), %xmm7
    0000015f: 	cvtsi2sd	%edx, %xmm5
    00000163: 	cvtsi2sdl	init_value(%rip), %xmm6
    0000016b: 	mulsd	%xmm5, %xmm7
    0000016f: 	addsd	%xmm6, %xmm7
    00000173: 	ucomisd	%xmm1, %xmm7
    00000177: 	setp	%dl
    0000017a: 	cmovnel	%eax, %edx
    0000017d: 	testb	%dl, %dl
    0000017f: 	jne	.Ltmp203 # Offset: 383
    00000181: 	movsd	DATAat0x15db8(%rip), %xmm1
    00000189: 	mulsd	%xmm5, %xmm1
    0000018d: 	addsd	%xmm6, %xmm1
    00000191: 	ucomisd	%xmm3, %xmm1
    00000195: 	setp	%dl
    00000198: 	cmovnel	%eax, %edx
    0000019b: 	testb	%dl, %dl
    0000019d: 	jne	.Ltmp203 # Offset: 413
    0000019f: 	movsd	DATAat0x15dc0(%rip), %xmm1
    000001a7: 	mulsd	%xmm5, %xmm1
    000001ab: 	mulsd	DATAat0x15dc8(%rip), %xmm5
    000001b3: 	addsd	%xmm6, %xmm1
    000001b7: 	addsd	%xmm6, %xmm5
    000001bb: 	ucomisd	%xmm4, %xmm5
    000001bf: 	setp	%dl
    000001c2: 	cmovnel	%eax, %edx
    000001c5: 	ucomisd	%xmm2, %xmm1
    000001c9: 	setp	%cl
    000001cc: 	cmovnel	%eax, %ecx
    000001cf: 	orb	%cl, %dl
    000001d1: 	jne	.Ltmp203 # Offset: 465
    000001d3: 	ucomisd	%xmm0, %xmm1
    000001d7: 	setp	%dl
    000001da: 	cmovel	%edx, %eax
    000001dd: 	testb	%al, %al
    000001df: 	je	.Ltmp204 # Offset: 479
.Ltmp203:
    000001e1: 	movq	(%rbp), %rdx
    000001e5: 	leaq	DATAat0x158f3(%rip), %rsi
    000001ec: 	movl	$0x1, %edi
    000001f1: 	xorl	%eax, %eax
    000001f3: 	callq	__printf_chk@PLT # Offset: 499
.Ltmp204:
    000001f8: 	movq	%rbp, %rdi
    000001fb: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 507
    00000200: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000207: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000020e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000215: 	je	.Ltmp205 # Offset: 533
.Ltmp206:
    00000217: 	movq	-0x20(%rax), %rbp
    0000021b: 	callq	clock@PLT # Offset: 539
    00000220: 	pxor	%xmm0, %xmm0
    00000224: 	movq	%rax, end_time(%rip)
    0000022b: 	subq	start_time(%rip), %rax
    00000232: 	movq	%rbp, %rdi
    00000235: 	cvtsi2sd	%rax, %xmm0
    0000023a: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000242: 	addq	$0x10, %rsp
    00000246: 	popq	%rbp
    00000247: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 583
    0000024c: 	nopl	(%rax) # Size: 4
.Ltmp205:
    00000250: 	movq	-0x8(%rdx), %rax
    00000254: 	addq	$0x200, %rax
    0000025a: 	jmp	.Ltmp206 # Offset: 602
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array11_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x5eb0
  Size        : 0x97f
  MaxSize     : 0x980
  Offset      : 0x5eb0
  Section     : .text
  Orc Section : .local.text._Z18test_array11_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	pxor	%xmm0, %xmm0
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0xb8, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0xa8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	cvtsi2sdl	init_value(%rip), %xmm0
    0000002f: 	movapd	%xmm0, %xmm1
    00000033: 	movsd	%xmm0, 0x8(%rsp)
    00000039: 	movsd	%xmm0, 0xa0(%rsp)
    00000042: 	unpcklpd	%xmm1, %xmm1
    00000046: 	movaps	%xmm1, 0x50(%rsp)
    0000004b: 	movaps	%xmm1, 0x60(%rsp)
    00000050: 	movaps	%xmm1, 0x70(%rsp)
    00000055: 	movaps	%xmm1, 0x80(%rsp)
    0000005d: 	movaps	%xmm1, 0x90(%rsp)
    00000065: 	callq	clock@PLT # Offset: 101
    0000006a: 	movl	iterations(%rip), %r9d
    00000071: 	movq	%rax, start_time(%rip)
    00000078: 	testl	%r9d, %r9d
    0000007b: 	jle	.Ltmp207 # Offset: 123
    00000081: 	leal	-0x1(%r9), %eax
    00000085: 	movsd	0x8(%rsp), %xmm0
    0000008b: 	cmpl	$0x1, %eax
    0000008e: 	jbe	.Ltmp208 # Offset: 142
    00000094: 	movsd	DATAat0x15c58(%rip), %xmm1
    0000009c: 	movsd	DATAat0x15cc8(%rip), %xmm7
    000000a4: 	movl	%r9d, %r10d
    000000a7: 	movq	%xmm0, %rdi
    000000ac: 	movsd	DATAat0x15cb8(%rip), %xmm3
    000000b4: 	shrl	%r10d
    000000b7: 	movsd	DATAat0x15ca8(%rip), %xmm10
    000000c0: 	movsd	%xmm0, 0x30(%rsp)
    000000c6: 	movsd	%xmm1, 0x8(%rsp)
    000000cc: 	movapd	%xmm0, %xmm2
    000000d0: 	movsd	DATAat0x15cd8(%rip), %xmm1
    000000d8: 	movsd	DATAat0x15c80(%rip), %xmm4
    000000e0: 	movsd	%xmm7, 0x10(%rsp)
    000000e6: 	movq	%xmm0, %rcx
    000000eb: 	movsd	DATAat0x15cc0(%rip), %xmm8
    000000f4: 	movsd	DATAat0x15dd8(%rip), %xmm9
    000000fd: 	movsd	%xmm1, 0x40(%rsp)
    00000103: 	movq	%xmm0, %rsi
    00000108: 	movsd	DATAat0x15ce0(%rip), %xmm1
    00000110: 	movsd	DATAat0x15ca0(%rip), %xmm5
    00000118: 	movsd	%xmm3, 0x18(%rsp)
    0000011e: 	movapd	%xmm0, %xmm15
    00000123: 	xorl	%r8d, %r8d
    00000126: 	movsd	DATAat0x15c90(%rip), %xmm13
    0000012f: 	movsd	%xmm1, 0x48(%rsp)
    00000135: 	movq	%xmm0, %rax
    0000013a: 	movsd	DATAat0x15cd0(%rip), %xmm1
    00000142: 	movsd	DATAat0x15c78(%rip), %xmm6
    0000014a: 	movsd	DATAat0x15c88(%rip), %xmm7
    00000152: 	movsd	%xmm0, 0x28(%rsp)
    00000158: 	movsd	DATAat0x15de0(%rip), %xmm12
    00000161: 	movq	%xmm0, %rdx
    00000166: 	movsd	DATAat0x15c98(%rip), %xmm3
    0000016e: 	movsd	%xmm0, 0x20(%rsp)
    00000174: 	movsd	DATAat0x15cb0(%rip), %xmm14
    0000017d: 	movsd	%xmm1, 0x38(%rsp)
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp209:
    00000188: 	movsd	0x10(%rsp), %xmm1
    0000018e: 	movsd	0x18(%rsp), %xmm11
    00000195: 	addsd	%xmm3, %xmm15
    0000019a: 	addl	$0x1, %r8d
    0000019e: 	addsd	%xmm1, %xmm0
    000001a2: 	addsd	%xmm10, %xmm15
    000001a7: 	addsd	%xmm10, %xmm0
    000001ac: 	addsd	%xmm9, %xmm15
    000001b1: 	addsd	%xmm4, %xmm0
    000001b5: 	addsd	%xmm8, %xmm15
    000001ba: 	addsd	0x40(%rsp), %xmm15
    000001c1: 	addsd	0x48(%rsp), %xmm15
    000001c8: 	addsd	%xmm8, %xmm0
    000001cd: 	addsd	%xmm3, %xmm15
    000001d2: 	addsd	%xmm9, %xmm0
    000001d7: 	addsd	%xmm10, %xmm15
    000001dc: 	addsd	%xmm5, %xmm0
    000001e0: 	addsd	%xmm9, %xmm15
    000001e5: 	addsd	%xmm13, %xmm0
    000001ea: 	addsd	%xmm8, %xmm15
    000001ef: 	addsd	%xmm1, %xmm0
    000001f3: 	movq	%rdx, %xmm1
    000001f8: 	addsd	%xmm6, %xmm1
    000001fc: 	movq	%xmm15, %rbx
    00000201: 	movsd	0x20(%rsp), %xmm15
    00000208: 	addsd	%xmm10, %xmm0
    0000020d: 	addsd	%xmm4, %xmm1
    00000211: 	addsd	%xmm4, %xmm0
    00000215: 	addsd	%xmm7, %xmm1
    00000219: 	addsd	%xmm8, %xmm0
    0000021e: 	addsd	%xmm13, %xmm1
    00000223: 	addsd	%xmm9, %xmm0
    00000228: 	addsd	%xmm11, %xmm1
    0000022d: 	addsd	%xmm5, %xmm0
    00000231: 	addsd	%xmm12, %xmm1
    00000236: 	addsd	%xmm13, %xmm0
    0000023b: 	addsd	%xmm6, %xmm1
    0000023f: 	addsd	%xmm4, %xmm1
    00000243: 	addsd	%xmm7, %xmm1
    00000247: 	addsd	%xmm13, %xmm1
    0000024c: 	movq	%xmm1, %rdx
    00000251: 	movq	%rax, %xmm1
    00000256: 	addsd	%xmm5, %xmm1
    0000025a: 	addsd	%xmm3, %xmm1
    0000025e: 	addsd	%xmm6, %xmm1
    00000262: 	addsd	0x8(%rsp), %xmm1
    00000268: 	addsd	%xmm6, %xmm1
    0000026c: 	addsd	%xmm3, %xmm1
    00000270: 	addsd	%xmm5, %xmm1
    00000274: 	addsd	%xmm3, %xmm1
    00000278: 	addsd	%xmm6, %xmm1
    0000027c: 	addsd	0x8(%rsp), %xmm1
    00000282: 	movq	%xmm1, %rax
    00000287: 	movsd	0x8(%rsp), %xmm1
    0000028d: 	addsd	%xmm1, %xmm2
    00000291: 	addsd	%xmm1, %xmm15
    00000296: 	addsd	%xmm3, %xmm2
    0000029a: 	addsd	%xmm4, %xmm2
    0000029e: 	addsd	%xmm7, %xmm2
    000002a2: 	addsd	%xmm9, %xmm2
    000002a7: 	addsd	%xmm8, %xmm2
    000002ac: 	addsd	%xmm1, %xmm2
    000002b0: 	movapd	%xmm15, %xmm1
    000002b5: 	movq	%rsi, %xmm15
    000002ba: 	addsd	%xmm5, %xmm15
    000002bf: 	addsd	%xmm6, %xmm1
    000002c3: 	addsd	%xmm3, %xmm2
    000002c7: 	addsd	%xmm14, %xmm15
    000002cc: 	addsd	0x10(%rsp), %xmm15
    000002d3: 	addsd	0x38(%rsp), %xmm15
    000002da: 	addsd	%xmm3, %xmm1
    000002de: 	addsd	%xmm4, %xmm2
    000002e2: 	addsd	%xmm5, %xmm15
    000002e7: 	addsd	%xmm5, %xmm1
    000002eb: 	addsd	%xmm7, %xmm2
    000002ef: 	addsd	%xmm14, %xmm15
    000002f4: 	addsd	%xmm4, %xmm1
    000002f8: 	addsd	%xmm9, %xmm2
    000002fd: 	movq	%xmm15, %rsi
    00000302: 	movq	%rcx, %xmm15
    00000307: 	addsd	%xmm10, %xmm1
    0000030c: 	addsd	%xmm6, %xmm15
    00000311: 	addsd	%xmm8, %xmm2
    00000316: 	addsd	%xmm7, %xmm1
    0000031a: 	addsd	%xmm5, %xmm15
    0000031f: 	addsd	%xmm14, %xmm1
    00000324: 	addsd	0x8(%rsp), %xmm1
    0000032a: 	addsd	%xmm10, %xmm15
    0000032f: 	addsd	%xmm6, %xmm1
    00000333: 	addsd	%xmm14, %xmm15
    00000338: 	addsd	%xmm3, %xmm1
    0000033c: 	addsd	%xmm6, %xmm15
    00000341: 	addsd	%xmm5, %xmm1
    00000345: 	addsd	%xmm5, %xmm15
    0000034a: 	addsd	%xmm4, %xmm1
    0000034e: 	movq	%xmm15, %rcx
    00000353: 	movsd	0x28(%rsp), %xmm15
    0000035a: 	addsd	%xmm4, %xmm15
    0000035f: 	addsd	%xmm10, %xmm1
    00000364: 	addsd	%xmm13, %xmm15
    00000369: 	addsd	%xmm7, %xmm1
    0000036d: 	addsd	%xmm12, %xmm15
    00000372: 	addsd	%xmm4, %xmm15
    00000377: 	movsd	%xmm15, 0x28(%rsp)
    0000037e: 	movsd	0x30(%rsp), %xmm15
    00000385: 	addsd	%xmm7, %xmm15
    0000038a: 	addsd	%xmm9, %xmm15
    0000038f: 	addsd	%xmm8, %xmm15
    00000394: 	addsd	%xmm11, %xmm15
    00000399: 	addsd	%xmm12, %xmm15
    0000039e: 	addsd	%xmm7, %xmm15
    000003a3: 	addsd	%xmm9, %xmm15
    000003a8: 	addsd	%xmm8, %xmm15
    000003ad: 	movq	%xmm15, %r11
    000003b2: 	movq	%rdi, %xmm15
    000003b7: 	addsd	%xmm3, %xmm15
    000003bc: 	addsd	%xmm3, %xmm15
    000003c1: 	addsd	%xmm3, %xmm15
    000003c6: 	addsd	%xmm3, %xmm15
    000003cb: 	addsd	%xmm3, %xmm15
    000003d0: 	addsd	%xmm3, %xmm15
    000003d5: 	movq	%xmm15, %rdi
    000003da: 	movq	%rdx, %xmm15
    000003df: 	addsd	%xmm11, %xmm15
    000003e4: 	addsd	%xmm12, %xmm15
    000003e9: 	movq	%xmm15, %rdx
    000003ee: 	movq	%rcx, %xmm15
    000003f3: 	addsd	%xmm10, %xmm15
    000003f8: 	addsd	%xmm14, %xmm15
    000003fd: 	movq	%xmm15, %rcx
    00000402: 	movq	%rax, %xmm15
    00000407: 	addsd	%xmm6, %xmm15
    0000040c: 	addsd	%xmm3, %xmm15
    00000411: 	movq	%xmm15, %rax
    00000416: 	movq	%rsi, %xmm15
    0000041b: 	addsd	0x10(%rsp), %xmm15
    00000422: 	movapd	%xmm15, %xmm11
    00000427: 	addsd	0x38(%rsp), %xmm11
    0000042e: 	movq	%rbx, %xmm15
    00000433: 	addsd	0x40(%rsp), %xmm15
    0000043a: 	addsd	0x48(%rsp), %xmm15
    00000441: 	movq	%xmm11, %rsi
    00000446: 	movapd	%xmm1, %xmm11
    0000044b: 	movsd	0x28(%rsp), %xmm1
    00000451: 	addsd	%xmm14, %xmm11
    00000456: 	addsd	%xmm13, %xmm1
    0000045b: 	movsd	%xmm11, 0x20(%rsp)
    00000462: 	movq	%r11, %xmm11
    00000467: 	addsd	0x18(%rsp), %xmm11
    0000046e: 	addsd	%xmm12, %xmm1
    00000473: 	movsd	%xmm1, 0x28(%rsp)
    00000479: 	movapd	%xmm11, %xmm1
    0000047e: 	addsd	%xmm12, %xmm1
    00000483: 	movsd	%xmm1, 0x30(%rsp)
    00000489: 	cmpl	%r8d, %r10d
    0000048c: 	jne	.Ltmp209 # Offset: 1164
    00000492: 	movl	%r9d, %r8d
    00000495: 	andl	$-0x2, %r8d
    00000499: 	testb	$0x1, %r9b
    0000049d: 	je	.Ltmp210 # Offset: 1181
.Ltmp214:
    000004a3: 	movq	%rdi, %xmm1
    000004a8: 	movsd	0x10(%rsp), %xmm11
    000004af: 	addsd	0x8(%rsp), %xmm2
    000004b5: 	addsd	%xmm3, %xmm15
    000004ba: 	addsd	%xmm3, %xmm1
    000004be: 	addl	$0x1, %r8d
    000004c2: 	addsd	%xmm11, %xmm0
    000004c7: 	addsd	%xmm3, %xmm2
    000004cb: 	addsd	%xmm10, %xmm15
    000004d0: 	addsd	%xmm3, %xmm1
    000004d4: 	addsd	%xmm10, %xmm0
    000004d9: 	addsd	%xmm4, %xmm2
    000004dd: 	addsd	%xmm9, %xmm15
    000004e2: 	addsd	%xmm3, %xmm1
    000004e6: 	addsd	%xmm4, %xmm0
    000004ea: 	addsd	%xmm7, %xmm2
    000004ee: 	addsd	%xmm8, %xmm15
    000004f3: 	movq	%xmm1, %rdi
    000004f8: 	movq	%rdx, %xmm1
    000004fd: 	addsd	0x40(%rsp), %xmm15
    00000504: 	addsd	%xmm6, %xmm1
    00000508: 	addsd	%xmm8, %xmm0
    0000050d: 	addsd	%xmm9, %xmm2
    00000512: 	addsd	0x48(%rsp), %xmm15
    00000519: 	addsd	%xmm4, %xmm1
    0000051d: 	addsd	%xmm9, %xmm0
    00000522: 	addsd	%xmm8, %xmm2
    00000527: 	addsd	%xmm7, %xmm1
    0000052b: 	addsd	%xmm5, %xmm0
    0000052f: 	addsd	%xmm13, %xmm1
    00000534: 	addsd	0x18(%rsp), %xmm1
    0000053a: 	addsd	%xmm13, %xmm0
    0000053f: 	addsd	%xmm12, %xmm1
    00000544: 	movq	%xmm1, %rdx
    00000549: 	movq	%rcx, %xmm1
    0000054e: 	addsd	%xmm6, %xmm1
    00000552: 	addsd	%xmm5, %xmm1
    00000556: 	addsd	%xmm10, %xmm1
    0000055b: 	addsd	%xmm14, %xmm1
    00000560: 	movq	%xmm1, %rcx
    00000565: 	movq	%rax, %xmm1
    0000056a: 	addsd	%xmm5, %xmm1
    0000056e: 	addsd	%xmm3, %xmm1
    00000572: 	addsd	%xmm6, %xmm1
    00000576: 	addsd	0x8(%rsp), %xmm1
    0000057c: 	addsd	%xmm6, %xmm1
    00000580: 	addsd	%xmm3, %xmm1
    00000584: 	movq	%xmm1, %rax
    00000589: 	movq	%rsi, %xmm1
    0000058e: 	addsd	%xmm5, %xmm1
    00000592: 	addsd	%xmm14, %xmm1
    00000597: 	addsd	%xmm11, %xmm1
    0000059c: 	addsd	0x38(%rsp), %xmm1
    000005a2: 	movsd	0x18(%rsp), %xmm11
    000005a9: 	movq	%xmm1, %rsi
    000005ae: 	movsd	0x20(%rsp), %xmm1
    000005b4: 	addsd	0x8(%rsp), %xmm1
    000005ba: 	addsd	%xmm6, %xmm1
    000005be: 	addsd	%xmm3, %xmm1
    000005c2: 	addsd	%xmm5, %xmm1
    000005c6: 	addsd	%xmm4, %xmm1
    000005ca: 	addsd	%xmm10, %xmm1
    000005cf: 	addsd	%xmm7, %xmm1
    000005d3: 	addsd	%xmm14, %xmm1
    000005d8: 	movsd	%xmm1, 0x20(%rsp)
    000005de: 	movsd	0x28(%rsp), %xmm1
    000005e4: 	addsd	%xmm4, %xmm1
    000005e8: 	addsd	%xmm13, %xmm1
    000005ed: 	addsd	%xmm12, %xmm1
    000005f2: 	movsd	%xmm1, 0x28(%rsp)
    000005f8: 	movsd	0x30(%rsp), %xmm1
    000005fe: 	addsd	%xmm7, %xmm1
    00000602: 	addsd	%xmm9, %xmm1
    00000607: 	addsd	%xmm8, %xmm1
    0000060c: 	addsd	%xmm11, %xmm1
    00000611: 	addsd	%xmm12, %xmm1
    00000616: 	movsd	%xmm1, 0x30(%rsp)
    0000061c: 	cmpl	%r8d, %r9d
    0000061f: 	jle	.Ltmp210 # Offset: 1567
    00000625: 	movq	%rdi, %xmm1
    0000062a: 	addsd	0x8(%rsp), %xmm2
    00000630: 	addsd	%xmm3, %xmm1
    00000634: 	addsd	%xmm3, %xmm2
    00000638: 	addsd	%xmm3, %xmm1
    0000063c: 	addsd	%xmm4, %xmm2
    00000640: 	addsd	%xmm3, %xmm1
    00000644: 	addsd	%xmm7, %xmm2
    00000648: 	movq	%xmm1, %rdi
    0000064d: 	movq	%rdx, %xmm1
    00000652: 	addsd	%xmm6, %xmm1
    00000656: 	addsd	%xmm9, %xmm2
    0000065b: 	addsd	%xmm4, %xmm1
    0000065f: 	addsd	%xmm8, %xmm2
    00000664: 	addsd	%xmm7, %xmm1
    00000668: 	addsd	%xmm13, %xmm1
    0000066d: 	addsd	%xmm11, %xmm1
    00000672: 	movsd	0x10(%rsp), %xmm11
    00000679: 	addsd	%xmm11, %xmm0
    0000067e: 	addsd	%xmm12, %xmm1
    00000683: 	addsd	%xmm10, %xmm0
    00000688: 	movq	%xmm1, %rdx
    0000068d: 	movq	%rcx, %xmm1
    00000692: 	addsd	%xmm6, %xmm1
    00000696: 	addsd	%xmm4, %xmm0
    0000069a: 	addsd	%xmm5, %xmm1
    0000069e: 	addsd	%xmm8, %xmm0
    000006a3: 	addsd	%xmm10, %xmm1
    000006a8: 	addsd	%xmm9, %xmm0
    000006ad: 	addsd	%xmm14, %xmm1
    000006b2: 	addsd	%xmm5, %xmm0
    000006b6: 	movq	%xmm1, %rcx
    000006bb: 	movq	%rax, %xmm1
    000006c0: 	addsd	%xmm5, %xmm1
    000006c4: 	addsd	%xmm13, %xmm0
    000006c9: 	addsd	%xmm3, %xmm1
    000006cd: 	addsd	%xmm6, %xmm1
    000006d1: 	addsd	0x8(%rsp), %xmm1
    000006d7: 	addsd	%xmm6, %xmm1
    000006db: 	addsd	%xmm3, %xmm1
    000006df: 	movq	%xmm1, %rax
    000006e4: 	movq	%rsi, %xmm1
    000006e9: 	addsd	%xmm5, %xmm1
    000006ed: 	addsd	%xmm14, %xmm1
    000006f2: 	addsd	%xmm11, %xmm1
    000006f7: 	movsd	0x38(%rsp), %xmm11
    000006fe: 	addsd	%xmm1, %xmm11
    00000703: 	movq	%xmm11, %rsi
    00000708: 	movsd	0x8(%rsp), %xmm11
    0000070f: 	addsd	0x20(%rsp), %xmm11
    00000716: 	addsd	%xmm6, %xmm11
    0000071b: 	addsd	%xmm3, %xmm11
    00000720: 	addsd	%xmm15, %xmm3
    00000725: 	movsd	0x48(%rsp), %xmm15
    0000072c: 	addsd	%xmm5, %xmm11
    00000731: 	addsd	%xmm10, %xmm3
    00000736: 	addsd	%xmm4, %xmm11
    0000073b: 	addsd	0x28(%rsp), %xmm4
    00000741: 	addsd	%xmm9, %xmm3
    00000746: 	addsd	%xmm10, %xmm11
    0000074b: 	addsd	%xmm13, %xmm4
    00000750: 	addsd	%xmm8, %xmm3
    00000755: 	addsd	0x40(%rsp), %xmm3
    0000075b: 	addsd	%xmm7, %xmm11
    00000760: 	addsd	0x30(%rsp), %xmm7
    00000766: 	addsd	%xmm12, %xmm4
    0000076b: 	addsd	%xmm3, %xmm15
    00000770: 	addsd	%xmm9, %xmm7
    00000775: 	addsd	%xmm14, %xmm11
    0000077a: 	movsd	%xmm4, 0x28(%rsp)
    00000780: 	addsd	%xmm8, %xmm7
    00000785: 	addsd	0x18(%rsp), %xmm7
    0000078b: 	movsd	%xmm11, 0x20(%rsp)
    00000792: 	addsd	%xmm12, %xmm7
    00000797: 	movsd	%xmm7, 0x30(%rsp)
.Ltmp210:
    0000079d: 	movsd	0x20(%rsp), %xmm7
    000007a3: 	movq	%rdi, 0x78(%rsp)
    000007a8: 	movq	%rdx, 0x50(%rsp)
    000007ad: 	movsd	%xmm7, 0x70(%rsp)
    000007b3: 	movsd	0x28(%rsp), %xmm7
    000007b9: 	movq	%rcx, 0x68(%rsp)
    000007be: 	movsd	%xmm7, 0x88(%rsp)
    000007c7: 	movsd	0x30(%rsp), %xmm7
    000007cd: 	movq	%rax, 0x80(%rsp)
    000007d5: 	movq	%rsi, 0x58(%rsp)
    000007da: 	movsd	%xmm0, 0x90(%rsp)
    000007e3: 	movsd	%xmm2, 0x60(%rsp)
    000007e9: 	movsd	%xmm15, 0xa0(%rsp)
    000007f3: 	movsd	%xmm7, 0x98(%rsp)
.Ltmp207:
    000007fc: 	leaq	0x50(%rsp), %rdi
    00000801: 	movq	%rbp, %rsi
    00000804: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2052
    00000809: 	movq	%rbp, %rdi
    0000080c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2060
    00000811: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000818: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000081f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000826: 	je	.Ltmp211 # Offset: 2086
.Ltmp213:
    00000828: 	movq	-0x20(%rax), %rbp
    0000082c: 	callq	clock@PLT # Offset: 2092
    00000831: 	movq	%rax, end_time(%rip)
    00000838: 	movq	0xa8(%rsp), %rdx
    00000840: 	subq	%fs:0x28, %rdx
    00000849: 	jne	.Ltmp212 # Offset: 2121
    0000084f: 	subq	start_time(%rip), %rax
    00000856: 	pxor	%xmm0, %xmm0
    0000085a: 	movq	%rbp, %rdi
    0000085d: 	cvtsi2sd	%rax, %xmm0
    00000862: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000086a: 	addq	$0xb8, %rsp
    00000871: 	popq	%rbx
    00000872: 	popq	%rbp
    00000873: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2163
    00000878: 	nopl	(%rax,%rax) # Size: 8
.Ltmp211:
    00000880: 	movq	-0x8(%rdx), %rax
    00000884: 	addq	$0x200, %rax
    0000088a: 	jmp	.Ltmp213 # Offset: 2186
.Ltmp208:
    0000088c: 	movsd	DATAat0x15c58(%rip), %xmm1
    00000894: 	movq	%xmm0, %rdi
    00000899: 	movsd	DATAat0x15cc8(%rip), %xmm5
    000008a1: 	movsd	%xmm0, 0x30(%rsp)
    000008a7: 	movsd	DATAat0x15cb8(%rip), %xmm3
    000008af: 	movsd	%xmm0, 0x28(%rsp)
    000008b5: 	movsd	DATAat0x15ca8(%rip), %xmm10
    000008be: 	movq	%xmm0, %rcx
    000008c3: 	movsd	%xmm1, 0x8(%rsp)
    000008c9: 	movapd	%xmm0, %xmm2
    000008cd: 	movsd	DATAat0x15cd8(%rip), %xmm1
    000008d5: 	movsd	DATAat0x15c80(%rip), %xmm4
    000008dd: 	movsd	%xmm5, 0x10(%rsp)
    000008e3: 	movq	%xmm0, %rsi
    000008e8: 	movsd	DATAat0x15cc0(%rip), %xmm8
    000008f1: 	movsd	DATAat0x15dd8(%rip), %xmm9
    000008fa: 	movsd	%xmm1, 0x40(%rsp)
    00000900: 	movapd	%xmm0, %xmm15
    00000905: 	xorl	%r8d, %r8d
    00000908: 	movsd	DATAat0x15ce0(%rip), %xmm1
    00000910: 	movsd	%xmm3, 0x18(%rsp)
    00000916: 	movsd	DATAat0x15ca0(%rip), %xmm5
    0000091e: 	movsd	DATAat0x15c90(%rip), %xmm13
    00000927: 	movq	%xmm0, %rax
    0000092c: 	movsd	%xmm1, 0x48(%rsp)
    00000932: 	movq	%xmm0, %rdx
    00000937: 	movsd	DATAat0x15cd0(%rip), %xmm1
    0000093f: 	movsd	DATAat0x15c78(%rip), %xmm6
    00000947: 	movsd	DATAat0x15c88(%rip), %xmm7
    0000094f: 	movsd	%xmm0, 0x20(%rsp)
    00000955: 	movsd	DATAat0x15de0(%rip), %xmm12
    0000095e: 	movsd	DATAat0x15c98(%rip), %xmm3
    00000966: 	movsd	%xmm1, 0x38(%rsp)
    0000096c: 	movsd	DATAat0x15cb0(%rip), %xmm14
    00000975: 	jmp	.Ltmp214 # Offset: 2421
.Ltmp212:
    0000097a: 	callq	__stack_chk_fail@PLT # Offset: 2426
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array11_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x6830
  Size        : 0xab3
  MaxSize     : 0xac0
  Offset      : 0x6830
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	pxor	%xmm2, %xmm2
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0xb8, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0xa8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	cvtsi2sdl	init_value(%rip), %xmm2
    0000002f: 	movsd	%xmm2, 0x8(%rsp)
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movl	iterations(%rip), %esi
    00000040: 	movsd	0x8(%rsp), %xmm2
    00000046: 	movq	%rax, start_time(%rip)
    0000004d: 	testl	%esi, %esi
    0000004f: 	jle	.Ltmp215 # Offset: 79
    00000055: 	leal	-0x1(%rsi), %eax
    00000058: 	cmpl	$0x1, %eax
    0000005b: 	jbe	.Ltmp216 # Offset: 91
    00000061: 	movsd	DATAat0x15cb0(%rip), %xmm4
    00000069: 	movl	%esi, %edi
    0000006b: 	movapd	%xmm2, %xmm1
    0000006f: 	xorl	%ecx, %ecx
    00000071: 	movsd	DATAat0x15cb8(%rip), %xmm5
    00000079: 	shrl	%edi
    0000007b: 	movsd	DATAat0x15cd8(%rip), %xmm13
    00000084: 	movq	%xmm2, %rax
    00000089: 	movsd	%xmm4, 0x20(%rsp)
    0000008f: 	movsd	DATAat0x15cc8(%rip), %xmm4
    00000097: 	movsd	DATAat0x15c90(%rip), %xmm12
    000000a0: 	movq	%xmm2, %rdx
    000000a5: 	movsd	%xmm5, 0x18(%rsp)
    000000ab: 	movsd	DATAat0x15de0(%rip), %xmm5
    000000b3: 	movsd	DATAat0x15c78(%rip), %xmm6
    000000bb: 	movq	%xmm2, %r11
    000000c0: 	movsd	%xmm4, 0x10(%rsp)
    000000c6: 	movapd	%xmm2, %xmm3
    000000ca: 	movsd	DATAat0x15cd0(%rip), %xmm4
    000000d2: 	movsd	DATAat0x15c80(%rip), %xmm7
    000000da: 	movsd	%xmm13, 0x38(%rsp)
    000000e1: 	movq	%xmm2, %r10
    000000e6: 	movsd	DATAat0x15ce0(%rip), %xmm13
    000000ef: 	movsd	DATAat0x15c88(%rip), %xmm9
    000000f8: 	movsd	%xmm5, 0x28(%rsp)
    000000fe: 	movapd	%xmm2, %xmm0
    00000102: 	movsd	DATAat0x15ca0(%rip), %xmm5
    0000010a: 	movsd	DATAat0x15c58(%rip), %xmm14
    00000113: 	movsd	%xmm4, 0x30(%rsp)
    00000119: 	movq	%xmm2, %r8
    0000011e: 	movsd	DATAat0x15c98(%rip), %xmm4
    00000126: 	movsd	DATAat0x15dd8(%rip), %xmm10
    0000012f: 	movsd	DATAat0x15cc0(%rip), %xmm8
    00000138: 	movapd	%xmm2, %xmm15
    0000013d: 	movsd	DATAat0x15ca8(%rip), %xmm11
    00000146: 	movq	%xmm2, %r9
    0000014b: 	movsd	%xmm13, 0x40(%rsp)
    00000152: 	movsd	%xmm12, 0x8(%rsp)
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp217:
    00000160: 	addsd	%xmm6, %xmm2
    00000164: 	movsd	0x28(%rsp), %xmm12
    0000016b: 	addsd	%xmm14, %xmm0
    00000170: 	addl	$0x1, %ecx
    00000173: 	movsd	0x20(%rsp), %xmm13
    0000017a: 	addsd	%xmm14, %xmm15
    0000017f: 	addsd	%xmm5, %xmm3
    00000183: 	addsd	%xmm7, %xmm2
    00000187: 	addsd	%xmm6, %xmm0
    0000018b: 	addsd	%xmm4, %xmm15
    00000190: 	addsd	%xmm4, %xmm3
    00000194: 	addsd	%xmm9, %xmm2
    00000199: 	addsd	0x8(%rsp), %xmm2
    0000019f: 	addsd	0x18(%rsp), %xmm2
    000001a5: 	addsd	%xmm4, %xmm0
    000001a9: 	addsd	%xmm7, %xmm15
    000001ae: 	addsd	%xmm6, %xmm3
    000001b2: 	addsd	%xmm12, %xmm2
    000001b7: 	addsd	%xmm5, %xmm0
    000001bb: 	addsd	%xmm9, %xmm15
    000001c0: 	addsd	%xmm14, %xmm3
    000001c5: 	addsd	%xmm6, %xmm2
    000001c9: 	addsd	%xmm7, %xmm0
    000001cd: 	addsd	%xmm10, %xmm15
    000001d2: 	addsd	%xmm6, %xmm3
    000001d6: 	addsd	%xmm7, %xmm2
    000001da: 	addsd	%xmm11, %xmm0
    000001df: 	addsd	%xmm8, %xmm15
    000001e4: 	addsd	%xmm4, %xmm3
    000001e8: 	addsd	%xmm9, %xmm2
    000001ed: 	addsd	0x8(%rsp), %xmm2
    000001f3: 	addsd	%xmm9, %xmm0
    000001f8: 	addsd	%xmm14, %xmm15
    000001fd: 	addsd	%xmm5, %xmm3
    00000201: 	movq	%xmm2, %rbx
    00000206: 	movq	%r9, %xmm2
    0000020b: 	addsd	%xmm5, %xmm2
    0000020f: 	addsd	%xmm13, %xmm0
    00000214: 	addsd	%xmm4, %xmm15
    00000219: 	addsd	%xmm4, %xmm3
    0000021d: 	addsd	%xmm13, %xmm2
    00000222: 	addsd	0x10(%rsp), %xmm2
    00000228: 	addsd	0x30(%rsp), %xmm2
    0000022e: 	addsd	%xmm14, %xmm0
    00000233: 	addsd	%xmm7, %xmm15
    00000238: 	addsd	%xmm6, %xmm3
    0000023c: 	addsd	%xmm5, %xmm2
    00000240: 	addsd	%xmm6, %xmm0
    00000244: 	addsd	%xmm9, %xmm15
    00000249: 	addsd	%xmm14, %xmm3
    0000024e: 	addsd	%xmm13, %xmm2
    00000253: 	addsd	%xmm4, %xmm0
    00000257: 	addsd	%xmm6, %xmm3
    0000025b: 	addsd	%xmm10, %xmm15
    00000260: 	movq	%xmm2, %r9
    00000265: 	movq	%r8, %xmm2
    0000026a: 	addsd	%xmm5, %xmm0
    0000026e: 	addsd	%xmm6, %xmm2
    00000272: 	addsd	%xmm4, %xmm3
    00000276: 	addsd	%xmm8, %xmm15
    0000027b: 	addsd	%xmm7, %xmm0
    0000027f: 	addsd	%xmm5, %xmm2
    00000283: 	addsd	%xmm11, %xmm0
    00000288: 	addsd	%xmm11, %xmm2
    0000028d: 	addsd	%xmm9, %xmm0
    00000292: 	addsd	%xmm13, %xmm2
    00000297: 	movq	%rbx, %xmm13
    0000029c: 	addsd	0x18(%rsp), %xmm13
    000002a3: 	addsd	%xmm6, %xmm2
    000002a7: 	addsd	%xmm5, %xmm2
    000002ab: 	movq	%xmm2, %r8
    000002b0: 	movq	%r10, %xmm2
    000002b5: 	addsd	%xmm4, %xmm2
    000002b9: 	addsd	%xmm4, %xmm2
    000002bd: 	addsd	%xmm4, %xmm2
    000002c1: 	addsd	%xmm4, %xmm2
    000002c5: 	movq	%xmm2, %r10
    000002ca: 	movq	%r11, %xmm2
    000002cf: 	addsd	%xmm7, %xmm2
    000002d3: 	addsd	0x8(%rsp), %xmm2
    000002d9: 	addsd	%xmm12, %xmm2
    000002de: 	addsd	%xmm7, %xmm2
    000002e2: 	movq	%xmm2, %r11
    000002e7: 	movsd	0x10(%rsp), %xmm2
    000002ed: 	addsd	%xmm2, %xmm1
    000002f1: 	addsd	%xmm11, %xmm1
    000002f6: 	addsd	%xmm7, %xmm1
    000002fa: 	addsd	%xmm8, %xmm1
    000002ff: 	addsd	%xmm10, %xmm1
    00000304: 	addsd	%xmm5, %xmm1
    00000308: 	addsd	0x8(%rsp), %xmm1
    0000030e: 	addsd	%xmm2, %xmm1
    00000312: 	movq	%rdx, %xmm2
    00000317: 	addsd	%xmm9, %xmm2
    0000031c: 	addsd	%xmm11, %xmm1
    00000321: 	addsd	%xmm10, %xmm2
    00000326: 	addsd	%xmm7, %xmm1
    0000032a: 	addsd	%xmm8, %xmm2
    0000032f: 	addsd	0x18(%rsp), %xmm2
    00000335: 	addsd	%xmm8, %xmm1
    0000033a: 	addsd	%xmm12, %xmm2
    0000033f: 	addsd	%xmm10, %xmm1
    00000344: 	addsd	%xmm9, %xmm2
    00000349: 	addsd	%xmm5, %xmm1
    0000034d: 	addsd	0x8(%rsp), %xmm1
    00000353: 	addsd	%xmm10, %xmm2
    00000358: 	addsd	%xmm8, %xmm2
    0000035d: 	movq	%xmm2, %rdx
    00000362: 	movq	%rax, %xmm2
    00000367: 	addsd	%xmm4, %xmm2
    0000036b: 	addsd	%xmm11, %xmm2
    00000370: 	addsd	%xmm10, %xmm2
    00000375: 	addsd	%xmm8, %xmm2
    0000037a: 	addsd	0x38(%rsp), %xmm2
    00000380: 	addsd	0x40(%rsp), %xmm2
    00000386: 	addsd	%xmm4, %xmm2
    0000038a: 	addsd	%xmm11, %xmm2
    0000038f: 	addsd	%xmm10, %xmm2
    00000394: 	addsd	%xmm8, %xmm2
    00000399: 	movq	%xmm2, %rax
    0000039e: 	movq	%r10, %xmm2
    000003a3: 	addsd	%xmm4, %xmm2
    000003a7: 	addsd	%xmm4, %xmm2
    000003ab: 	movq	%xmm2, %r10
    000003b0: 	movapd	%xmm13, %xmm2
    000003b5: 	movsd	0x20(%rsp), %xmm13
    000003bc: 	addsd	%xmm12, %xmm2
    000003c1: 	movq	%r8, %xmm12
    000003c6: 	addsd	%xmm11, %xmm12
    000003cb: 	addsd	%xmm13, %xmm0
    000003d0: 	addsd	%xmm13, %xmm12
    000003d5: 	movsd	0x28(%rsp), %xmm13
    000003dc: 	movq	%xmm12, %r8
    000003e1: 	movq	%r9, %xmm12
    000003e6: 	addsd	0x10(%rsp), %xmm12
    000003ed: 	addsd	0x30(%rsp), %xmm12
    000003f4: 	movq	%xmm12, %r9
    000003f9: 	movq	%rax, %xmm12
    000003fe: 	addsd	0x38(%rsp), %xmm12
    00000405: 	addsd	0x40(%rsp), %xmm12
    0000040c: 	movq	%xmm12, %rax
    00000411: 	movq	%r11, %xmm12
    00000416: 	addsd	0x8(%rsp), %xmm12
    0000041d: 	addsd	%xmm13, %xmm12
    00000422: 	movq	%xmm12, %r11
    00000427: 	movq	%rdx, %xmm12
    0000042c: 	addsd	0x18(%rsp), %xmm12
    00000433: 	addsd	%xmm13, %xmm12
    00000438: 	movq	%xmm12, %rdx
    0000043d: 	cmpl	%ecx, %edi
    0000043f: 	jne	.Ltmp217 # Offset: 1087
    00000445: 	movl	%esi, %ecx
    00000447: 	andl	$-0x2, %ecx
    0000044a: 	testb	$0x1, %sil
    0000044e: 	je	.Ltmp218 # Offset: 1102
.Ltmp222:
    00000454: 	movq	%rax, %xmm12
    00000459: 	addsd	%xmm6, %xmm2
    0000045d: 	addsd	%xmm5, %xmm3
    00000461: 	addl	$0x1, %ecx
    00000464: 	addsd	%xmm4, %xmm12
    00000469: 	movsd	0x10(%rsp), %xmm13
    00000470: 	addsd	%xmm14, %xmm0
    00000475: 	addsd	%xmm14, %xmm15
    0000047a: 	addsd	%xmm13, %xmm1
    0000047f: 	addsd	%xmm7, %xmm2
    00000483: 	movq	%xmm12, %rax
    00000488: 	movq	%r9, %xmm12
    0000048d: 	addsd	%xmm6, %xmm0
    00000491: 	addsd	%xmm5, %xmm12
    00000496: 	addsd	%xmm4, %xmm3
    0000049a: 	addsd	%xmm11, %xmm1
    0000049f: 	addsd	%xmm4, %xmm15
    000004a4: 	addsd	%xmm9, %xmm2
    000004a9: 	addsd	%xmm4, %xmm0
    000004ad: 	movq	%xmm12, %r9
    000004b2: 	movq	%r8, %xmm12
    000004b7: 	addsd	0x8(%rsp), %xmm2
    000004bd: 	addsd	%xmm6, %xmm12
    000004c2: 	addsd	%xmm7, %xmm1
    000004c6: 	addsd	%xmm6, %xmm3
    000004ca: 	addsd	%xmm7, %xmm15
    000004cf: 	addsd	%xmm5, %xmm0
    000004d3: 	movq	%xmm12, %r8
    000004d8: 	movq	%r11, %xmm12
    000004dd: 	addsd	%xmm8, %xmm1
    000004e2: 	addsd	%xmm7, %xmm12
    000004e7: 	addsd	%xmm14, %xmm3
    000004ec: 	addsd	%xmm7, %xmm0
    000004f0: 	addsd	%xmm9, %xmm15
    000004f5: 	addsd	%xmm10, %xmm1
    000004fa: 	movq	%xmm12, %r11
    000004ff: 	movq	%rdx, %xmm12
    00000504: 	addsd	%xmm6, %xmm3
    00000508: 	addsd	%xmm9, %xmm12
    0000050d: 	addsd	%xmm11, %xmm0
    00000512: 	addsd	%xmm10, %xmm15
    00000517: 	addsd	%xmm5, %xmm1
    0000051b: 	addsd	%xmm4, %xmm3
    0000051f: 	addsd	0x8(%rsp), %xmm1
    00000525: 	movq	%xmm12, %rdx
    0000052a: 	movq	%r10, %xmm12
    0000052f: 	addsd	%xmm9, %xmm0
    00000534: 	addsd	%xmm4, %xmm12
    00000539: 	addsd	%xmm8, %xmm15
    0000053e: 	addsd	0x20(%rsp), %xmm0
    00000544: 	movq	%xmm12, %r10
    00000549: 	movq	%r8, %xmm12
    0000054e: 	addsd	%xmm5, %xmm12
    00000553: 	movq	%xmm12, %r8
    00000558: 	movq	%rax, %xmm12
    0000055d: 	addsd	%xmm11, %xmm12
    00000562: 	movq	%xmm12, %rax
    00000567: 	movq	%r9, %xmm12
    0000056c: 	addsd	0x20(%rsp), %xmm12
    00000573: 	movq	%xmm12, %r9
    00000578: 	movq	%rdx, %xmm12
    0000057d: 	addsd	%xmm10, %xmm12
    00000582: 	movq	%xmm12, %rdx
    00000587: 	movq	%rax, %xmm12
    0000058c: 	addsd	%xmm10, %xmm12
    00000591: 	movq	%xmm12, %rax
    00000596: 	movq	%r10, %xmm12
    0000059b: 	addsd	%xmm4, %xmm12
    000005a0: 	movq	%xmm12, %r10
    000005a5: 	movq	%rax, %xmm12
    000005aa: 	addsd	%xmm8, %xmm12
    000005af: 	movq	%xmm12, %rax
    000005b4: 	movq	%r9, %xmm12
    000005b9: 	addsd	%xmm13, %xmm12
    000005be: 	movsd	0x18(%rsp), %xmm13
    000005c5: 	addsd	%xmm13, %xmm2
    000005ca: 	movq	%xmm12, %r9
    000005cf: 	movq	%rdx, %xmm12
    000005d4: 	addsd	%xmm8, %xmm12
    000005d9: 	movq	%xmm12, %rdx
    000005de: 	movq	%r8, %xmm12
    000005e3: 	addsd	%xmm11, %xmm12
    000005e8: 	movq	%xmm12, %r8
    000005ed: 	movq	%rdx, %xmm12
    000005f2: 	addsd	%xmm13, %xmm12
    000005f7: 	movsd	0x28(%rsp), %xmm13
    000005fe: 	addsd	%xmm13, %xmm2
    00000603: 	movq	%xmm12, %rdx
    00000608: 	movq	%rax, %xmm12
    0000060d: 	addsd	0x38(%rsp), %xmm12
    00000614: 	movq	%xmm12, %rax
    00000619: 	movq	%r10, %xmm12
    0000061e: 	addsd	%xmm4, %xmm12
    00000623: 	movq	%xmm12, %r10
    00000628: 	movq	%r8, %xmm12
    0000062d: 	addsd	0x20(%rsp), %xmm12
    00000634: 	movq	%xmm12, %r8
    00000639: 	movq	%r11, %xmm12
    0000063e: 	addsd	0x8(%rsp), %xmm12
    00000645: 	movq	%xmm12, %r11
    0000064a: 	movq	%r9, %xmm12
    0000064f: 	addsd	0x30(%rsp), %xmm12
    00000656: 	movq	%xmm12, %r9
    0000065b: 	movq	%rax, %xmm12
    00000660: 	addsd	0x40(%rsp), %xmm12
    00000667: 	movq	%xmm12, %rax
    0000066c: 	movq	%r11, %xmm12
    00000671: 	addsd	%xmm13, %xmm12
    00000676: 	movq	%xmm12, %r11
    0000067b: 	movq	%rdx, %xmm12
    00000680: 	addsd	%xmm13, %xmm12
    00000685: 	movq	%xmm12, %rdx
    0000068a: 	cmpl	%ecx, %esi
    0000068c: 	jle	.Ltmp218 # Offset: 1676
    00000692: 	movq	%rax, %xmm12
    00000697: 	movsd	0x10(%rsp), %xmm13
    0000069e: 	addsd	%xmm5, %xmm3
    000006a2: 	addsd	%xmm14, %xmm0
    000006a7: 	addsd	%xmm4, %xmm12
    000006ac: 	addsd	%xmm14, %xmm15
    000006b1: 	addsd	%xmm13, %xmm1
    000006b6: 	addsd	%xmm6, %xmm2
    000006ba: 	addsd	%xmm4, %xmm3
    000006be: 	addsd	%xmm6, %xmm0
    000006c2: 	movq	%xmm12, %rax
    000006c7: 	movq	%r9, %xmm12
    000006cc: 	addsd	%xmm4, %xmm15
    000006d1: 	addsd	%xmm5, %xmm12
    000006d6: 	addsd	%xmm11, %xmm1
    000006db: 	addsd	%xmm6, %xmm3
    000006df: 	addsd	%xmm4, %xmm0
    000006e3: 	addsd	%xmm7, %xmm2
    000006e7: 	addsd	%xmm7, %xmm15
    000006ec: 	movq	%xmm12, %r9
    000006f1: 	movq	%r8, %xmm12
    000006f6: 	addsd	%xmm7, %xmm1
    000006fa: 	addsd	%xmm6, %xmm12
    000006ff: 	addsd	%xmm14, %xmm3
    00000704: 	addsd	%xmm5, %xmm0
    00000708: 	addsd	%xmm9, %xmm2
    0000070d: 	addsd	%xmm8, %xmm1
    00000712: 	addsd	0x8(%rsp), %xmm2
    00000718: 	movq	%xmm12, %r8
    0000071d: 	movq	%r11, %xmm12
    00000722: 	addsd	%xmm6, %xmm3
    00000726: 	movsd	0x18(%rsp), %xmm6
    0000072c: 	addsd	%xmm7, %xmm12
    00000731: 	addsd	%xmm7, %xmm0
    00000735: 	addsd	%xmm10, %xmm1
    0000073a: 	addsd	%xmm9, %xmm15
    0000073f: 	addsd	%xmm6, %xmm2
    00000743: 	addsd	%xmm4, %xmm3
    00000747: 	movq	%xmm12, %r11
    0000074c: 	movq	%rdx, %xmm12
    00000751: 	addsd	%xmm11, %xmm0
    00000756: 	addsd	%xmm9, %xmm12
    0000075b: 	addsd	%xmm5, %xmm1
    0000075f: 	addsd	%xmm10, %xmm15
    00000764: 	addsd	%xmm9, %xmm0
    00000769: 	movq	%xmm12, %rdx
    0000076e: 	movq	%r10, %xmm12
    00000773: 	addsd	%xmm4, %xmm12
    00000778: 	addsd	%xmm8, %xmm15
    0000077d: 	movq	%xmm12, %r10
    00000782: 	movq	%r8, %xmm12
    00000787: 	addsd	%xmm5, %xmm12
    0000078c: 	movq	%r10, %xmm14
    00000791: 	addsd	%xmm4, %xmm14
    00000796: 	movq	%xmm12, %r8
    0000079b: 	movq	%rax, %xmm12
    000007a0: 	addsd	%xmm11, %xmm12
    000007a5: 	movq	%xmm14, %r10
    000007aa: 	movq	%r10, %xmm5
    000007af: 	addsd	%xmm4, %xmm5
    000007b3: 	movq	%xmm12, %rax
    000007b8: 	movq	%r9, %xmm12
    000007bd: 	addsd	0x20(%rsp), %xmm12
    000007c4: 	movq	%xmm5, %r10
    000007c9: 	movsd	%xmm12, 0x48(%rsp)
    000007d0: 	movq	%rdx, %xmm12
    000007d5: 	addsd	%xmm10, %xmm12
    000007da: 	movq	%xmm12, %rdx
    000007df: 	movq	%rax, %xmm12
    000007e4: 	addsd	%xmm10, %xmm12
    000007e9: 	movsd	0x28(%rsp), %xmm10
    000007f0: 	addsd	%xmm10, %xmm2
    000007f5: 	movapd	%xmm12, %xmm14
    000007fa: 	movsd	0x48(%rsp), %xmm12
    00000801: 	addsd	%xmm8, %xmm14
    00000806: 	addsd	%xmm13, %xmm12
    0000080b: 	movq	%r8, %xmm13
    00000810: 	addsd	%xmm11, %xmm13
    00000815: 	movsd	0x20(%rsp), %xmm11
    0000081c: 	movsd	%xmm14, 0x10(%rsp)
    00000823: 	movapd	%xmm12, %xmm14
    00000828: 	movq	%rdx, %xmm12
    0000082d: 	addsd	%xmm11, %xmm0
    00000832: 	movapd	%xmm13, %xmm5
    00000837: 	addsd	%xmm8, %xmm12
    0000083c: 	movsd	0x8(%rsp), %xmm13
    00000843: 	addsd	0x30(%rsp), %xmm14
    0000084a: 	addsd	%xmm11, %xmm5
    0000084f: 	addsd	%xmm13, %xmm1
    00000854: 	movapd	%xmm12, %xmm7
    00000859: 	movq	%xmm14, %r9
    0000085e: 	movq	%xmm5, %r8
    00000863: 	movq	%r11, %xmm5
    00000868: 	addsd	%xmm6, %xmm7
    0000086c: 	movsd	0x10(%rsp), %xmm6
    00000872: 	addsd	%xmm13, %xmm5
    00000877: 	addsd	0x38(%rsp), %xmm6
    0000087d: 	addsd	0x40(%rsp), %xmm6
    00000883: 	addsd	%xmm10, %xmm7
    00000888: 	addsd	%xmm10, %xmm5
    0000088d: 	movq	%xmm6, %rax
    00000892: 	movq	%xmm7, %rdx
    00000897: 	movq	%xmm5, %r11
.Ltmp218:
    0000089c: 	leaq	0x50(%rsp), %rdi
    000008a1: 	movq	%rbp, %rsi
    000008a4: 	movq	%rdx, 0x98(%rsp)
    000008ac: 	movq	%rax, 0xa0(%rsp)
    000008b4: 	movq	%r9, 0x58(%rsp)
    000008b9: 	movq	%r8, 0x68(%rsp)
    000008be: 	movq	%r10, 0x78(%rsp)
    000008c3: 	movq	%r11, 0x88(%rsp)
    000008cb: 	movsd	%xmm2, 0x50(%rsp)
    000008d1: 	movsd	%xmm15, 0x60(%rsp)
    000008d8: 	movsd	%xmm0, 0x70(%rsp)
    000008de: 	movsd	%xmm3, 0x80(%rsp)
    000008e7: 	movsd	%xmm1, 0x90(%rsp)
    000008f0: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2288
    000008f5: 	movq	%rbp, %rdi
    000008f8: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2296
    000008fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000904: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000090b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000912: 	je	.Ltmp219 # Offset: 2322
.Ltmp221:
    00000918: 	movq	-0x20(%rax), %rbp
    0000091c: 	callq	clock@PLT # Offset: 2332
    00000921: 	movq	%rax, end_time(%rip)
    00000928: 	movq	0xa8(%rsp), %rdx
    00000930: 	subq	%fs:0x28, %rdx
    00000939: 	jne	.Ltmp220 # Offset: 2361
    0000093f: 	subq	start_time(%rip), %rax
    00000946: 	pxor	%xmm0, %xmm0
    0000094a: 	movq	%rbp, %rdi
    0000094d: 	cvtsi2sd	%rax, %xmm0
    00000952: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000095a: 	addq	$0xb8, %rsp
    00000961: 	popq	%rbx
    00000962: 	popq	%rbp
    00000963: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2403
    00000968: 	nopl	(%rax,%rax) # Size: 8
.Ltmp215:
    00000970: 	movq	%xmm2, %rax
    00000975: 	movq	%xmm2, %rdx
    0000097a: 	movapd	%xmm2, %xmm1
    0000097e: 	movq	%xmm2, %r11
    00000983: 	movapd	%xmm2, %xmm3
    00000987: 	movq	%xmm2, %r10
    0000098c: 	movapd	%xmm2, %xmm0
    00000990: 	movq	%xmm2, %r8
    00000995: 	movapd	%xmm2, %xmm15
    0000099a: 	movq	%xmm2, %r9
    0000099f: 	jmp	.Ltmp218 # Offset: 2463
    000009a4: 	nopl	(%rax) # Size: 4
.Ltmp219:
    000009a8: 	movq	-0x8(%rdx), %rax
    000009ac: 	addq	$0x200, %rax
    000009b2: 	jmp	.Ltmp221 # Offset: 2482
.Ltmp216:
    000009b7: 	movsd	DATAat0x15c90(%rip), %xmm5
    000009bf: 	movq	%xmm2, %rax
    000009c4: 	xorl	%ecx, %ecx
    000009c6: 	movsd	DATAat0x15cb0(%rip), %xmm4
    000009ce: 	movsd	DATAat0x15c78(%rip), %xmm6
    000009d6: 	movq	%xmm2, %rdx
    000009db: 	movsd	DATAat0x15cd8(%rip), %xmm13
    000009e4: 	movapd	%xmm2, %xmm1
    000009e8: 	movsd	%xmm5, 0x8(%rsp)
    000009ee: 	movq	%xmm2, %r11
    000009f3: 	movsd	DATAat0x15cb8(%rip), %xmm5
    000009fb: 	movsd	DATAat0x15c80(%rip), %xmm7
    00000a03: 	movsd	%xmm4, 0x20(%rsp)
    00000a09: 	movapd	%xmm2, %xmm3
    00000a0d: 	movsd	DATAat0x15cc8(%rip), %xmm4
    00000a15: 	movsd	DATAat0x15c88(%rip), %xmm9
    00000a1e: 	movsd	%xmm5, 0x18(%rsp)
    00000a24: 	movq	%xmm2, %r10
    00000a29: 	movsd	DATAat0x15de0(%rip), %xmm5
    00000a31: 	movsd	DATAat0x15c58(%rip), %xmm14
    00000a3a: 	movsd	%xmm4, 0x10(%rsp)
    00000a40: 	movapd	%xmm2, %xmm0
    00000a44: 	movsd	DATAat0x15cd0(%rip), %xmm4
    00000a4c: 	movsd	DATAat0x15dd8(%rip), %xmm10
    00000a55: 	movsd	%xmm5, 0x28(%rsp)
    00000a5b: 	movq	%xmm2, %r8
    00000a60: 	movsd	DATAat0x15ca0(%rip), %xmm5
    00000a68: 	movsd	DATAat0x15cc0(%rip), %xmm8
    00000a71: 	movsd	%xmm4, 0x30(%rsp)
    00000a77: 	movapd	%xmm2, %xmm15
    00000a7c: 	movsd	DATAat0x15c98(%rip), %xmm4
    00000a84: 	movsd	DATAat0x15ca8(%rip), %xmm11
    00000a8d: 	movsd	%xmm13, 0x38(%rsp)
    00000a94: 	movq	%xmm2, %r9
    00000a99: 	movsd	DATAat0x15ce0(%rip), %xmm13
    00000aa2: 	movsd	%xmm13, 0x40(%rsp)
    00000aa9: 	jmp	.Ltmp222 # Offset: 2729
.Ltmp220:
    00000aae: 	callq	__stack_chk_fail@PLT # Offset: 2734
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_array5_argIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x72f0
  Size        : 0x291
  MaxSize     : 0x2a0
  Offset      : 0x72f0
  Section     : .text
  Orc Section : .local.text._Z15test_array5_argIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	movq	%rdi, %rbx
    0000000c: 	subq	$0x8, %rsp
    00000010: 	callq	clock@PLT # Offset: 16
    00000015: 	movl	iterations(%rip), %edx
    0000001b: 	movsd	(%rbx), %xmm1
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	testl	%edx, %edx
    00000028: 	jle	.Ltmp223 # Offset: 40
    0000002e: 	movsd	0x10(%rbx), %xmm2
    00000033: 	movsd	0x20(%rbx), %xmm0
    00000038: 	xorl	%eax, %eax
    0000003a: 	movsd	0x8(%rbx), %xmm3
    0000003f: 	movsd	0x18(%rbx), %xmm4
    00000044: 	movsd	DATAat0x15c88(%rip), %xmm7
    0000004c: 	movsd	DATAat0x15c78(%rip), %xmm9
    00000055: 	movsd	DATAat0x15ca0(%rip), %xmm6
    0000005d: 	movsd	DATAat0x15cb0(%rip), %xmm5
    00000065: 	movsd	DATAat0x15c80(%rip), %xmm8
    0000006e: 	movsd	DATAat0x15c58(%rip), %xmm12
    00000077: 	movsd	DATAat0x15c98(%rip), %xmm11
    00000080: 	movsd	DATAat0x15ca8(%rip), %xmm10
    00000089: 	movsd	DATAat0x15cc0(%rip), %xmm15
    00000092: 	movsd	DATAat0x15cc8(%rip), %xmm14
    0000009b: 	movsd	DATAat0x15cd0(%rip), %xmm13
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp224:
    000000a8: 	addsd	%xmm12, %xmm0
    000000ad: 	addsd	%xmm12, %xmm2
    000000b2: 	addl	$0x1, %eax
    000000b5: 	addsd	%xmm6, %xmm3
    000000b9: 	addsd	%xmm9, %xmm4
    000000be: 	addsd	%xmm9, %xmm1
    000000c3: 	addsd	%xmm9, %xmm0
    000000c8: 	addsd	%xmm11, %xmm2
    000000cd: 	addsd	%xmm5, %xmm3
    000000d1: 	addsd	%xmm6, %xmm4
    000000d5: 	addsd	%xmm8, %xmm1
    000000da: 	addsd	%xmm11, %xmm0
    000000df: 	addsd	%xmm8, %xmm2
    000000e4: 	addsd	%xmm10, %xmm4
    000000e9: 	addsd	%xmm14, %xmm3
    000000ee: 	addsd	%xmm7, %xmm1
    000000f2: 	addsd	DATAat0x15c90(%rip), %xmm1
    000000fa: 	addsd	%xmm6, %xmm0
    000000fe: 	addsd	%xmm7, %xmm2
    00000102: 	addsd	DATAat0x15dd8(%rip), %xmm2
    0000010a: 	addsd	DATAat0x15cb8(%rip), %xmm1
    00000112: 	addsd	%xmm5, %xmm4
    00000116: 	addsd	DATAat0x15de0(%rip), %xmm1
    0000011e: 	addsd	%xmm8, %xmm0
    00000123: 	addsd	%xmm13, %xmm3
    00000128: 	addsd	%xmm15, %xmm2
    0000012d: 	addsd	%xmm10, %xmm0
    00000132: 	addsd	%xmm7, %xmm0
    00000136: 	addsd	%xmm5, %xmm0
    0000013a: 	cmpl	%edx, %eax
    0000013c: 	jne	.Ltmp224 # Offset: 316
    00000142: 	movapd	%xmm1, %xmm5
    00000146: 	movsd	%xmm0, 0x20(%rbx)
    0000014b: 	unpcklpd	%xmm3, %xmm5
    0000014f: 	movups	%xmm5, (%rbx)
    00000152: 	movapd	%xmm2, %xmm5
    00000156: 	unpcklpd	%xmm4, %xmm5
    0000015a: 	movups	%xmm5, 0x10(%rbx)
.Ltmp229:
    0000015e: 	pxor	%xmm5, %xmm5
    00000162: 	pxor	%xmm6, %xmm6
    00000166: 	movl	$0x1, %eax
    0000016b: 	movsd	DATAat0x15db0(%rip), %xmm7
    00000173: 	cvtsi2sd	%edx, %xmm5
    00000177: 	cvtsi2sdl	init_value(%rip), %xmm6
    0000017f: 	mulsd	%xmm5, %xmm7
    00000183: 	addsd	%xmm6, %xmm7
    00000187: 	ucomisd	%xmm1, %xmm7
    0000018b: 	setp	%dl
    0000018e: 	cmovnel	%eax, %edx
    00000191: 	testb	%dl, %dl
    00000193: 	jne	.Ltmp225 # Offset: 403
    00000195: 	movsd	DATAat0x15db8(%rip), %xmm1
    0000019d: 	mulsd	%xmm5, %xmm1
    000001a1: 	addsd	%xmm6, %xmm1
    000001a5: 	ucomisd	%xmm3, %xmm1
    000001a9: 	setp	%dl
    000001ac: 	cmovnel	%eax, %edx
    000001af: 	testb	%dl, %dl
    000001b1: 	jne	.Ltmp225 # Offset: 433
    000001b3: 	movsd	DATAat0x15dc0(%rip), %xmm1
    000001bb: 	mulsd	%xmm5, %xmm1
    000001bf: 	mulsd	DATAat0x15dc8(%rip), %xmm5
    000001c7: 	addsd	%xmm6, %xmm1
    000001cb: 	addsd	%xmm6, %xmm5
    000001cf: 	ucomisd	%xmm4, %xmm5
    000001d3: 	setp	%dl
    000001d6: 	cmovnel	%eax, %edx
    000001d9: 	ucomisd	%xmm2, %xmm1
    000001dd: 	setp	%cl
    000001e0: 	cmovnel	%eax, %ecx
    000001e3: 	orb	%cl, %dl
    000001e5: 	jne	.Ltmp225 # Offset: 485
    000001e7: 	ucomisd	%xmm0, %xmm1
    000001eb: 	setp	%dl
    000001ee: 	cmovel	%edx, %eax
    000001f1: 	testb	%al, %al
    000001f3: 	je	.Ltmp226 # Offset: 499
.Ltmp225:
    000001f5: 	movq	(%rbp), %rdx
    000001f9: 	leaq	DATAat0x158f3(%rip), %rsi
    00000200: 	movl	$0x1, %edi
    00000205: 	xorl	%eax, %eax
    00000207: 	callq	__printf_chk@PLT # Offset: 519
.Ltmp226:
    0000020c: 	movq	%rbp, %rdi
    0000020f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 527
    00000214: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000222: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000229: 	je	.Ltmp227 # Offset: 553
.Ltmp228:
    0000022b: 	movq	-0x20(%rax), %rbp
    0000022f: 	callq	clock@PLT # Offset: 559
    00000234: 	pxor	%xmm0, %xmm0
    00000238: 	movq	%rax, end_time(%rip)
    0000023f: 	subq	start_time(%rip), %rax
    00000246: 	movq	%rbp, %rdi
    00000249: 	cvtsi2sd	%rax, %xmm0
    0000024e: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000256: 	addq	$0x8, %rsp
    0000025a: 	popq	%rbx
    0000025b: 	popq	%rbp
    0000025c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 604
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp227:
    00000268: 	movq	-0x8(%rdx), %rax
    0000026c: 	addq	$0x200, %rax
    00000272: 	jmp	.Ltmp228 # Offset: 626
    00000274: 	nopl	(%rax) # Size: 4
.Ltmp223:
    00000278: 	movsd	0x8(%rbx), %xmm3
    0000027d: 	movsd	0x10(%rbx), %xmm2
    00000282: 	movsd	0x18(%rbx), %xmm4
    00000287: 	movsd	0x20(%rbx), %xmm0
    0000028c: 	jmp	.Ltmp229 # Offset: 652
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_array5_argIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_array11_argIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x7590
  Size        : 0x8f1
  MaxSize     : 0x900
  Offset      : 0x7590
  Section     : .text
  Orc Section : .local.text._Z16test_array11_argIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rsi, %rbp
    0000000d: 	subq	$0x58, %rsp
    00000011: 	callq	clock@PLT # Offset: 17
    00000016: 	movl	iterations(%rip), %r8d
    0000001d: 	movq	%rax, start_time(%rip)
    00000024: 	testl	%r8d, %r8d
    00000027: 	jle	.Ltmp230 # Offset: 39
    0000002d: 	leal	-0x1(%r8), %edi
    00000031: 	movsd	0x40(%r12), %xmm1
    00000038: 	movq	(%r12), %rdx
    0000003c: 	movq	0x30(%r12), %rax
    00000041: 	movsd	0x50(%r12), %xmm14
    00000048: 	movq	0x10(%r12), %r11
    0000004d: 	movsd	0x20(%r12), %xmm0
    00000054: 	movsd	0x8(%r12), %xmm15
    0000005b: 	movq	0x18(%r12), %rcx
    00000060: 	movsd	0x38(%r12), %xmm5
    00000067: 	movsd	0x48(%r12), %xmm3
    0000006e: 	movq	0x28(%r12), %rsi
    00000073: 	cmpl	$0x1, %edi
    00000076: 	jbe	.Ltmp231 # Offset: 118
    0000007c: 	movsd	DATAat0x15c90(%rip), %xmm2
    00000084: 	movl	%r8d, %r9d
    00000087: 	movq	%xmm15, %r10
    0000008c: 	xorl	%edi, %edi
    0000008e: 	movsd	DATAat0x15cc8(%rip), %xmm7
    00000096: 	shrl	%r9d
    00000099: 	movsd	DATAat0x15c80(%rip), %xmm6
    000000a1: 	movq	%rax, %xmm15
    000000a6: 	movsd	%xmm2, 0x8(%rsp)
    000000ac: 	movsd	DATAat0x15cb8(%rip), %xmm2
    000000b4: 	movsd	DATAat0x15dd8(%rip), %xmm11
    000000bd: 	movsd	DATAat0x15c88(%rip), %xmm9
    000000c6: 	movsd	%xmm7, 0x20(%rsp)
    000000cc: 	movsd	DATAat0x15c98(%rip), %xmm4
    000000d4: 	movsd	%xmm2, 0x18(%rsp)
    000000da: 	movsd	DATAat0x15de0(%rip), %xmm2
    000000e2: 	movsd	DATAat0x15ca0(%rip), %xmm7
    000000ea: 	movsd	DATAat0x15c58(%rip), %xmm13
    000000f3: 	movsd	%xmm9, (%rsp)
    000000f9: 	movsd	DATAat0x15cc0(%rip), %xmm10
    00000102: 	movsd	%xmm2, 0x10(%rsp)
    00000108: 	movsd	DATAat0x15cd8(%rip), %xmm2
    00000110: 	movapd	%xmm7, %xmm9
    00000115: 	movsd	DATAat0x15ca8(%rip), %xmm12
    0000011e: 	movsd	DATAat0x15c78(%rip), %xmm8
    00000127: 	movsd	%xmm13, 0x48(%rsp)
    0000012e: 	movapd	%xmm6, %xmm7
    00000132: 	movapd	%xmm11, %xmm13
    00000137: 	movsd	%xmm2, 0x38(%rsp)
    0000013d: 	movapd	%xmm4, %xmm6
    00000141: 	movapd	%xmm10, %xmm11
    00000146: 	movsd	DATAat0x15ce0(%rip), %xmm2
    0000014e: 	movq	%rdx, %xmm4
    00000153: 	movsd	%xmm2, 0x40(%rsp)
    00000159: 	movsd	DATAat0x15cb0(%rip), %xmm2
    00000161: 	movsd	%xmm2, 0x28(%rsp)
    00000167: 	movsd	DATAat0x15cd0(%rip), %xmm2
    0000016f: 	movsd	%xmm2, 0x30(%rsp)
    00000175: 	movapd	%xmm14, %xmm2
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp232:
    00000180: 	addsd	%xmm8, %xmm4
    00000185: 	addsd	%xmm6, %xmm2
    00000189: 	addl	$0x1, %edi
    0000018c: 	movsd	0x8(%rsp), %xmm14
    00000193: 	addsd	%xmm9, %xmm15
    00000198: 	movsd	0x20(%rsp), %xmm10
    0000019f: 	addsd	(%rsp), %xmm3
    000001a4: 	addsd	%xmm7, %xmm5
    000001a8: 	addsd	0x8(%rsp), %xmm5
    000001ae: 	addsd	%xmm7, %xmm4
    000001b2: 	addsd	(%rsp), %xmm4
    000001b7: 	addsd	%xmm12, %xmm2
    000001bc: 	addsd	%xmm6, %xmm15
    000001c1: 	addsd	%xmm10, %xmm1
    000001c6: 	addsd	%xmm13, %xmm3
    000001cb: 	addsd	%xmm14, %xmm4
    000001d0: 	addsd	0x18(%rsp), %xmm4
    000001d6: 	addsd	0x10(%rsp), %xmm4
    000001dc: 	addsd	%xmm13, %xmm2
    000001e1: 	addsd	%xmm8, %xmm15
    000001e6: 	addsd	%xmm12, %xmm1
    000001eb: 	addsd	%xmm11, %xmm3
    000001f0: 	addsd	0x18(%rsp), %xmm3
    000001f6: 	addsd	%xmm8, %xmm4
    000001fb: 	addsd	%xmm11, %xmm2
    00000200: 	addsd	0x38(%rsp), %xmm2
    00000206: 	addsd	0x40(%rsp), %xmm2
    0000020c: 	addsd	%xmm7, %xmm1
    00000210: 	addsd	%xmm7, %xmm4
    00000214: 	addsd	(%rsp), %xmm4
    00000219: 	addsd	%xmm6, %xmm2
    0000021d: 	addsd	%xmm11, %xmm1
    00000222: 	addsd	%xmm14, %xmm4
    00000227: 	addsd	%xmm12, %xmm2
    0000022c: 	addsd	%xmm13, %xmm1
    00000231: 	movq	%xmm4, %rax
    00000236: 	movsd	0x48(%rsp), %xmm4
    0000023c: 	addsd	%xmm13, %xmm2
    00000241: 	addsd	%xmm4, %xmm0
    00000245: 	addsd	%xmm4, %xmm15
    0000024a: 	addsd	%xmm9, %xmm1
    0000024f: 	addsd	%xmm11, %xmm2
    00000254: 	addsd	%xmm8, %xmm0
    00000259: 	addsd	%xmm8, %xmm15
    0000025e: 	addsd	%xmm14, %xmm1
    00000263: 	movsd	0x28(%rsp), %xmm14
    0000026a: 	movq	%xmm2, %rdx
    0000026f: 	movq	%r11, %xmm2
    00000274: 	addsd	%xmm4, %xmm2
    00000278: 	addsd	%xmm6, %xmm0
    0000027c: 	addsd	%xmm6, %xmm15
    00000281: 	addsd	%xmm10, %xmm1
    00000286: 	movq	%rax, %xmm10
    0000028b: 	addsd	0x18(%rsp), %xmm10
    00000292: 	addsd	%xmm6, %xmm2
    00000296: 	addsd	%xmm9, %xmm0
    0000029b: 	addsd	%xmm9, %xmm15
    000002a0: 	addsd	%xmm12, %xmm1
    000002a5: 	addsd	%xmm7, %xmm2
    000002a9: 	addsd	%xmm7, %xmm0
    000002ad: 	addsd	(%rsp), %xmm2
    000002b2: 	addsd	%xmm6, %xmm15
    000002b7: 	addsd	%xmm7, %xmm1
    000002bb: 	addsd	%xmm12, %xmm0
    000002c0: 	addsd	(%rsp), %xmm0
    000002c5: 	addsd	%xmm13, %xmm2
    000002ca: 	addsd	%xmm8, %xmm15
    000002cf: 	addsd	%xmm11, %xmm1
    000002d4: 	addsd	%xmm14, %xmm0
    000002d9: 	addsd	%xmm11, %xmm2
    000002de: 	addsd	%xmm4, %xmm15
    000002e3: 	addsd	%xmm13, %xmm1
    000002e8: 	addsd	%xmm4, %xmm0
    000002ec: 	addsd	%xmm4, %xmm2
    000002f0: 	movq	%r10, %xmm4
    000002f5: 	addsd	%xmm8, %xmm15
    000002fa: 	addsd	%xmm9, %xmm4
    000002ff: 	addsd	%xmm9, %xmm1
    00000304: 	addsd	%xmm8, %xmm0
    00000309: 	addsd	0x8(%rsp), %xmm1
    0000030f: 	addsd	%xmm6, %xmm2
    00000313: 	addsd	%xmm6, %xmm15
    00000318: 	addsd	%xmm14, %xmm4
    0000031d: 	addsd	0x20(%rsp), %xmm4
    00000323: 	addsd	0x30(%rsp), %xmm4
    00000329: 	addsd	%xmm6, %xmm0
    0000032d: 	addsd	%xmm7, %xmm2
    00000331: 	addsd	(%rsp), %xmm2
    00000336: 	addsd	%xmm9, %xmm4
    0000033b: 	addsd	%xmm9, %xmm0
    00000340: 	addsd	%xmm13, %xmm2
    00000345: 	addsd	%xmm14, %xmm4
    0000034a: 	addsd	%xmm7, %xmm0
    0000034e: 	movq	%xmm4, %r10
    00000353: 	movq	%rcx, %xmm4
    00000358: 	addsd	%xmm12, %xmm0
    0000035d: 	addsd	%xmm8, %xmm4
    00000362: 	addsd	(%rsp), %xmm0
    00000367: 	addsd	%xmm9, %xmm4
    0000036c: 	addsd	%xmm12, %xmm4
    00000371: 	addsd	%xmm14, %xmm4
    00000376: 	movsd	0x10(%rsp), %xmm14
    0000037d: 	addsd	%xmm14, %xmm5
    00000382: 	addsd	%xmm14, %xmm3
    00000387: 	addsd	%xmm8, %xmm4
    0000038c: 	addsd	(%rsp), %xmm3
    00000391: 	addsd	%xmm7, %xmm5
    00000395: 	addsd	0x8(%rsp), %xmm5
    0000039b: 	addsd	%xmm9, %xmm4
    000003a0: 	addsd	%xmm13, %xmm3
    000003a5: 	movq	%xmm4, %rcx
    000003aa: 	movq	%rsi, %xmm4
    000003af: 	addsd	%xmm11, %xmm3
    000003b4: 	addsd	%xmm6, %xmm4
    000003b8: 	addsd	0x18(%rsp), %xmm3
    000003be: 	addsd	%xmm6, %xmm4
    000003c2: 	addsd	%xmm6, %xmm4
    000003c6: 	addsd	%xmm6, %xmm4
    000003ca: 	addsd	%xmm6, %xmm4
    000003ce: 	addsd	%xmm6, %xmm4
    000003d2: 	movq	%xmm4, %rsi
    000003d7: 	movapd	%xmm10, %xmm4
    000003dc: 	movsd	0x28(%rsp), %xmm10
    000003e3: 	addsd	%xmm14, %xmm4
    000003e8: 	movq	%rcx, %xmm14
    000003ed: 	addsd	%xmm12, %xmm14
    000003f2: 	addsd	%xmm10, %xmm0
    000003f7: 	addsd	%xmm10, %xmm14
    000003fc: 	movq	%xmm14, %rcx
    00000401: 	movapd	%xmm2, %xmm14
    00000406: 	movsd	0x40(%rsp), %xmm2
    0000040c: 	addsd	%xmm11, %xmm14
    00000411: 	movq	%xmm14, %r11
    00000416: 	movq	%r10, %xmm14
    0000041b: 	addsd	0x20(%rsp), %xmm14
    00000422: 	addsd	0x30(%rsp), %xmm14
    00000429: 	movq	%xmm14, %r10
    0000042e: 	movq	%rdx, %xmm14
    00000433: 	addsd	0x38(%rsp), %xmm14
    0000043a: 	addsd	%xmm14, %xmm2
    0000043f: 	movsd	0x10(%rsp), %xmm14
    00000446: 	addsd	%xmm14, %xmm5
    0000044b: 	addsd	%xmm14, %xmm3
    00000450: 	cmpl	%edi, %r9d
    00000453: 	jne	.Ltmp232 # Offset: 1107
    00000459: 	movl	%r8d, %edi
    0000045c: 	movq	%xmm4, %rdx
    00000461: 	movq	%xmm15, %rax
    00000466: 	movapd	%xmm6, %xmm4
    0000046a: 	movapd	%xmm11, %xmm10
    0000046f: 	movapd	%xmm7, %xmm6
    00000473: 	andl	$-0x2, %edi
    00000476: 	movapd	%xmm9, %xmm7
    0000047b: 	movapd	%xmm13, %xmm11
    00000480: 	movq	%r10, %xmm15
    00000485: 	movsd	(%rsp), %xmm9
    0000048b: 	movsd	0x48(%rsp), %xmm13
    00000492: 	movapd	%xmm2, %xmm14
    00000497: 	testb	$0x1, %r8b
    0000049b: 	je	.Ltmp233 # Offset: 1179
.Ltmp236:
    000004a1: 	movq	%rsi, %xmm2
    000004a6: 	addsd	%xmm13, %xmm0
    000004ab: 	addsd	0x20(%rsp), %xmm1
    000004b1: 	addl	$0x1, %edi
    000004b4: 	addsd	%xmm4, %xmm2
    000004b8: 	addsd	%xmm4, %xmm14
    000004bd: 	addsd	%xmm9, %xmm3
    000004c2: 	addsd	%xmm7, %xmm15
    000004c7: 	addsd	%xmm8, %xmm0
    000004cc: 	addsd	%xmm12, %xmm1
    000004d1: 	addsd	%xmm4, %xmm2
    000004d5: 	addsd	%xmm12, %xmm14
    000004da: 	addsd	%xmm11, %xmm3
    000004df: 	addsd	%xmm6, %xmm5
    000004e3: 	addsd	%xmm4, %xmm0
    000004e7: 	addsd	%xmm6, %xmm1
    000004eb: 	addsd	%xmm4, %xmm2
    000004ef: 	addsd	%xmm11, %xmm14
    000004f4: 	addsd	0x8(%rsp), %xmm5
    000004fa: 	addsd	%xmm10, %xmm3
    000004ff: 	addsd	%xmm7, %xmm0
    00000503: 	addsd	%xmm10, %xmm1
    00000508: 	movq	%xmm2, %rsi
    0000050d: 	movq	%rdx, %xmm2
    00000512: 	addsd	0x18(%rsp), %xmm3
    00000518: 	addsd	%xmm8, %xmm2
    0000051d: 	addsd	%xmm10, %xmm14
    00000522: 	addsd	%xmm6, %xmm0
    00000526: 	addsd	%xmm11, %xmm1
    0000052b: 	addsd	0x38(%rsp), %xmm14
    00000532: 	addsd	0x40(%rsp), %xmm14
    00000539: 	addsd	%xmm6, %xmm2
    0000053d: 	addsd	%xmm12, %xmm0
    00000542: 	addsd	%xmm7, %xmm1
    00000546: 	addsd	0x8(%rsp), %xmm1
    0000054c: 	addsd	%xmm9, %xmm2
    00000551: 	addsd	0x8(%rsp), %xmm2
    00000557: 	addsd	0x18(%rsp), %xmm2
    0000055d: 	addsd	0x10(%rsp), %xmm2
    00000563: 	addsd	%xmm9, %xmm0
    00000568: 	movq	%xmm2, %rdx
    0000056d: 	movq	%rcx, %xmm2
    00000572: 	addsd	%xmm8, %xmm2
    00000577: 	addsd	%xmm7, %xmm2
    0000057b: 	addsd	%xmm12, %xmm2
    00000580: 	addsd	0x28(%rsp), %xmm2
    00000586: 	movq	%xmm2, %rcx
    0000058b: 	movq	%rax, %xmm2
    00000590: 	addsd	%xmm7, %xmm2
    00000594: 	addsd	%xmm4, %xmm2
    00000598: 	addsd	%xmm8, %xmm2
    0000059d: 	addsd	%xmm13, %xmm2
    000005a2: 	addsd	%xmm8, %xmm2
    000005a7: 	addsd	%xmm4, %xmm2
    000005ab: 	movq	%xmm2, %rax
    000005b0: 	movq	%r11, %xmm2
    000005b5: 	addsd	%xmm13, %xmm2
    000005ba: 	addsd	%xmm4, %xmm2
    000005be: 	addsd	%xmm6, %xmm2
    000005c2: 	addsd	%xmm9, %xmm2
    000005c7: 	addsd	%xmm11, %xmm2
    000005cc: 	addsd	%xmm10, %xmm2
    000005d1: 	movq	%xmm2, %r11
    000005d6: 	movsd	0x28(%rsp), %xmm2
    000005dc: 	addsd	%xmm2, %xmm15
    000005e1: 	addsd	%xmm2, %xmm0
    000005e5: 	movsd	0x10(%rsp), %xmm2
    000005eb: 	addsd	0x20(%rsp), %xmm15
    000005f2: 	addsd	0x30(%rsp), %xmm15
    000005f9: 	addsd	%xmm2, %xmm5
    000005fd: 	addsd	%xmm2, %xmm3
    00000601: 	cmpl	%edi, %r8d
    00000604: 	jle	.Ltmp233 # Offset: 1540
    0000060a: 	movq	%rsi, %xmm2
    0000060f: 	addsd	%xmm13, %xmm0
    00000614: 	addsd	0x20(%rsp), %xmm1
    0000061a: 	addsd	%xmm4, %xmm2
    0000061e: 	addsd	%xmm7, %xmm15
    00000623: 	addsd	%xmm8, %xmm0
    00000628: 	addsd	%xmm12, %xmm1
    0000062d: 	addsd	%xmm4, %xmm2
    00000631: 	addsd	%xmm4, %xmm0
    00000635: 	addsd	%xmm6, %xmm1
    00000639: 	addsd	%xmm4, %xmm2
    0000063d: 	addsd	%xmm7, %xmm0
    00000641: 	addsd	%xmm10, %xmm1
    00000646: 	movq	%xmm2, %rsi
    0000064b: 	movq	%rdx, %xmm2
    00000650: 	addsd	%xmm8, %xmm2
    00000655: 	addsd	%xmm6, %xmm0
    00000659: 	addsd	%xmm11, %xmm1
    0000065e: 	addsd	%xmm6, %xmm2
    00000662: 	addsd	%xmm12, %xmm0
    00000667: 	addsd	%xmm7, %xmm1
    0000066b: 	addsd	0x8(%rsp), %xmm1
    00000671: 	addsd	%xmm9, %xmm2
    00000676: 	addsd	0x8(%rsp), %xmm2
    0000067c: 	addsd	0x18(%rsp), %xmm2
    00000682: 	addsd	0x10(%rsp), %xmm2
    00000688: 	addsd	%xmm9, %xmm0
    0000068d: 	movq	%xmm2, %rdx
    00000692: 	movq	%rcx, %xmm2
    00000697: 	addsd	%xmm8, %xmm2
    0000069c: 	addsd	%xmm7, %xmm2
    000006a0: 	addsd	%xmm12, %xmm2
    000006a5: 	addsd	0x28(%rsp), %xmm2
    000006ab: 	movq	%xmm2, %rcx
    000006b0: 	movq	%rax, %xmm2
    000006b5: 	addsd	%xmm7, %xmm2
    000006b9: 	movsd	0x10(%rsp), %xmm7
    000006bf: 	addsd	%xmm4, %xmm2
    000006c3: 	addsd	%xmm8, %xmm2
    000006c8: 	addsd	%xmm13, %xmm2
    000006cd: 	addsd	%xmm8, %xmm2
    000006d2: 	addsd	%xmm4, %xmm2
    000006d6: 	movq	%xmm2, %rax
    000006db: 	movq	%r11, %xmm2
    000006e0: 	addsd	%xmm13, %xmm2
    000006e5: 	addsd	%xmm4, %xmm2
    000006e9: 	addsd	%xmm14, %xmm4
    000006ee: 	movsd	0x40(%rsp), %xmm14
    000006f5: 	addsd	%xmm6, %xmm2
    000006f9: 	addsd	%xmm12, %xmm4
    000006fe: 	addsd	%xmm5, %xmm6
    00000702: 	addsd	0x8(%rsp), %xmm6
    00000708: 	addsd	%xmm9, %xmm2
    0000070d: 	addsd	%xmm3, %xmm9
    00000712: 	addsd	%xmm11, %xmm4
    00000717: 	movapd	%xmm6, %xmm5
    0000071b: 	addsd	%xmm7, %xmm5
    0000071f: 	addsd	%xmm11, %xmm2
    00000724: 	addsd	%xmm11, %xmm9
    00000729: 	addsd	%xmm10, %xmm4
    0000072e: 	addsd	0x38(%rsp), %xmm4
    00000734: 	addsd	%xmm10, %xmm2
    00000739: 	addsd	%xmm10, %xmm9
    0000073e: 	addsd	0x18(%rsp), %xmm9
    00000745: 	addsd	%xmm4, %xmm14
    0000074a: 	movq	%xmm2, %r11
    0000074f: 	movsd	0x28(%rsp), %xmm2
    00000755: 	addsd	%xmm9, %xmm7
    0000075a: 	addsd	%xmm2, %xmm15
    0000075f: 	addsd	%xmm2, %xmm0
    00000763: 	addsd	0x20(%rsp), %xmm15
    0000076a: 	addsd	0x30(%rsp), %xmm15
    00000771: 	movapd	%xmm7, %xmm3
.Ltmp233:
    00000775: 	movq	%rsi, 0x28(%r12)
    0000077a: 	movq	%rdx, (%r12)
    0000077e: 	movq	%rcx, 0x18(%r12)
    00000783: 	movq	%rax, 0x30(%r12)
    00000788: 	movq	%r11, 0x10(%r12)
    0000078d: 	movsd	%xmm1, 0x40(%r12)
    00000794: 	movsd	%xmm15, 0x8(%r12)
    0000079b: 	movsd	%xmm0, 0x20(%r12)
    000007a2: 	movsd	%xmm14, 0x50(%r12)
    000007a9: 	movsd	%xmm5, 0x38(%r12)
    000007b0: 	movsd	%xmm3, 0x48(%r12)
.Ltmp230:
    000007b7: 	movq	%rbp, %rsi
    000007ba: 	movq	%r12, %rdi
    000007bd: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1981
    000007c2: 	movq	%rbp, %rdi
    000007c5: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1989
    000007ca: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007d1: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007df: 	je	.Ltmp234 # Offset: 2015
.Ltmp235:
    000007e1: 	movq	-0x20(%rax), %rbp
    000007e5: 	callq	clock@PLT # Offset: 2021
    000007ea: 	pxor	%xmm0, %xmm0
    000007ee: 	movq	%rax, end_time(%rip)
    000007f5: 	subq	start_time(%rip), %rax
    000007fc: 	movq	%rbp, %rdi
    000007ff: 	cvtsi2sd	%rax, %xmm0
    00000804: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000080c: 	addq	$0x58, %rsp
    00000810: 	popq	%rbp
    00000811: 	popq	%r12
    00000813: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2067
    00000818: 	nopl	(%rax,%rax) # Size: 8
.Ltmp234:
    00000820: 	movq	-0x8(%rdx), %rax
    00000824: 	addq	$0x200, %rax
    0000082a: 	jmp	.Ltmp235 # Offset: 2090
.Ltmp231:
    0000082c: 	movsd	DATAat0x15de0(%rip), %xmm2
    00000834: 	xorl	%edi, %edi
    00000836: 	movsd	DATAat0x15c90(%rip), %xmm4
    0000083e: 	movsd	DATAat0x15cc8(%rip), %xmm7
    00000846: 	movsd	DATAat0x15ca8(%rip), %xmm12
    0000084f: 	movsd	%xmm2, 0x10(%rsp)
    00000855: 	movsd	DATAat0x15cd8(%rip), %xmm2
    0000085d: 	movsd	DATAat0x15c80(%rip), %xmm6
    00000865: 	movsd	DATAat0x15cc0(%rip), %xmm10
    0000086e: 	movsd	%xmm4, 0x8(%rsp)
    00000874: 	movsd	DATAat0x15cb8(%rip), %xmm4
    0000087c: 	movsd	DATAat0x15dd8(%rip), %xmm11
    00000885: 	movsd	%xmm2, 0x38(%rsp)
    0000088b: 	movsd	DATAat0x15ce0(%rip), %xmm2
    00000893: 	movsd	DATAat0x15c78(%rip), %xmm8
    0000089c: 	movsd	%xmm7, 0x20(%rsp)
    000008a2: 	movsd	DATAat0x15c88(%rip), %xmm9
    000008ab: 	movsd	%xmm2, 0x40(%rsp)
    000008b1: 	movsd	DATAat0x15cb0(%rip), %xmm2
    000008b9: 	movsd	DATAat0x15ca0(%rip), %xmm7
    000008c1: 	movsd	DATAat0x15c58(%rip), %xmm13
    000008ca: 	movsd	%xmm4, 0x18(%rsp)
    000008d0: 	movsd	DATAat0x15c98(%rip), %xmm4
    000008d8: 	movsd	%xmm2, 0x28(%rsp)
    000008de: 	movsd	DATAat0x15cd0(%rip), %xmm2
    000008e6: 	movsd	%xmm2, 0x30(%rsp)
    000008ec: 	jmp	.Ltmp236 # Offset: 2284
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_array11_argIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_globalImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x7e90
  Size        : 0x190
  MaxSize     : 0x190
  Offset      : 0x7e90
  Section     : .text
  Orc Section : .local.text._Z18test_array5_globalImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	movslq	iterations(%rip), %rax
    0000001b: 	testl	%eax, %eax
    0000001d: 	jle	.Ltmp237 # Offset: 29
    00000023: 	leal	-0x1(%rax), %edx
    00000026: 	leaq	(%rdx,%rdx,2), %rcx
    0000002a: 	leaq	(%rdx,%rcx,4), %rsi
    0000002e: 	movq	data64(%rip), %rcx
    00000035: 	leaq	0x34(%rcx,%rsi,4), %rdi
    0000003a: 	movq	data64+24(%rip), %rsi
    00000041: 	leaq	(%rdx,%rdx,4), %rcx
    00000045: 	leaq	(%rdx,%rdx,8), %rdx
    00000049: 	movq	%rdi, data64(%rip)
    00000050: 	leaq	0x14(%rsi,%rcx,4), %r9
    00000055: 	movq	data64+16(%rip), %rsi
    0000005c: 	shlq	$0x2, %rdx
    00000060: 	movq	%r9, data64+24(%rip)
    00000067: 	leaq	0x24(%rdx,%rsi), %r10
    0000006c: 	movq	data64+8(%rip), %rsi
    00000073: 	movq	%r10, data64+16(%rip)
    0000007a: 	leaq	0x28(%rsi,%rcx,8), %r8
    0000007f: 	movq	data64+32(%rip), %rcx
    00000086: 	movq	%r8, data64+8(%rip)
    0000008d: 	leaq	0x24(%rdx,%rcx), %r11
    00000092: 	movq	%r11, data64+32(%rip)
.Ltmp242:
    00000099: 	leaq	(%rax,%rax,2), %rdx
    0000009d: 	movslq	init_value(%rip), %rcx
    000000a4: 	shlq	$0x2, %rdx
    000000a8: 	leaq	(%rdx,%rax), %rsi
    000000ac: 	leaq	(%rcx,%rsi,4), %rsi
    000000b0: 	movq	%rsi, %rcx
    000000b3: 	subq	%rdx, %rcx
    000000b6: 	cmpq	%rdi, %rsi
    000000b9: 	jne	.Ltmp238 # Offset: 185
    000000bb: 	cmpq	%r8, %rcx
    000000be: 	jne	.Ltmp238 # Offset: 190
    000000c0: 	leaq	(,%rax,4), %rdx
    000000c8: 	shlq	$0x4, %rax
    000000cc: 	subq	%rdx, %rcx
    000000cf: 	movq	%rcx, %rdx
    000000d2: 	subq	%rax, %rdx
    000000d5: 	cmpq	%r9, %rdx
    000000d8: 	setne	%al
    000000db: 	cmpq	%r10, %rcx
    000000de: 	setne	%dl
    000000e1: 	orb	%dl, %al
    000000e3: 	jne	.Ltmp238 # Offset: 227
    000000e5: 	cmpq	%r11, %rcx
    000000e8: 	je	.Ltmp239 # Offset: 232
.Ltmp238:
    000000ea: 	movq	(%rbp), %rdx
    000000ee: 	leaq	DATAat0x158f3(%rip), %rsi
    000000f5: 	movl	$0x1, %edi
    000000fa: 	xorl	%eax, %eax
    000000fc: 	callq	__printf_chk@PLT # Offset: 252
.Ltmp239:
    00000101: 	movq	%rbp, %rdi
    00000104: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 260
    00000109: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000110: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000117: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000011e: 	je	.Ltmp240 # Offset: 286
.Ltmp241:
    00000120: 	movq	-0x20(%rax), %rbp
    00000124: 	callq	clock@PLT # Offset: 292
    00000129: 	pxor	%xmm0, %xmm0
    0000012d: 	movq	%rax, end_time(%rip)
    00000134: 	movq	%rbp, %rdi
    00000137: 	popq	%rbp
    00000138: 	subq	start_time(%rip), %rax
    0000013f: 	cvtsi2sd	%rax, %xmm0
    00000144: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000014c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 332
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp240:
    00000158: 	movq	-0x8(%rdx), %rax
    0000015c: 	addq	$0x200, %rax
    00000162: 	jmp	.Ltmp241 # Offset: 354
    00000164: 	nopl	(%rax) # Size: 4
.Ltmp237:
    00000168: 	movq	data64(%rip), %rdi
    0000016f: 	movq	data64+8(%rip), %r8
    00000176: 	movq	data64+16(%rip), %r10
    0000017d: 	movq	data64+24(%rip), %r9
    00000184: 	movq	data64+32(%rip), %r11
    0000018b: 	jmp	.Ltmp242 # Offset: 395
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_globalImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_globalImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x8020
  Size        : 0x1c4
  MaxSize     : 0x1d0
  Offset      : 0x8020
  Section     : .text
  Orc Section : .local.text._Z19test_array11_globalImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	movl	iterations(%rip), %eax
    0000001a: 	testl	%eax, %eax
    0000001c: 	jle	.Ltmp243 # Offset: 28
    00000022: 	subl	$0x1, %eax
    00000025: 	movdqa	DATAat0x15cf0(%rip), %xmm4
    0000002d: 	paddq	data64(%rip), %xmm4
    00000035: 	leaq	(,%rax,8), %rcx
    0000003d: 	leaq	(%rax,%rax,2), %rdx
    00000041: 	movdqa	DATAat0x15d00(%rip), %xmm2
    00000049: 	movdqa	DATAat0x15d10(%rip), %xmm1
    00000051: 	leaq	(%rcx,%rax), %rdi
    00000055: 	leaq	(%rax,%rdx,4), %rdx
    00000059: 	subq	%rax, %rcx
    0000005c: 	leaq	(,%rdi,4), %rsi
    00000064: 	movq	%rdi, %xmm7
    00000069: 	leaq	(%rax,%rcx,8), %rcx
    0000006d: 	movq	%rsi, %xmm3
    00000072: 	leaq	(,%rdx,4), %rsi
    0000007a: 	paddq	data64+16(%rip), %xmm2
    00000082: 	movq	%rsi, %xmm0
    00000087: 	leaq	(%rax,%rax,4), %rsi
    0000008b: 	paddq	data64+32(%rip), %xmm1
    00000093: 	leaq	(,%rsi,8), %rdx
    0000009b: 	movq	%rdx, %xmm5
    000000a0: 	leaq	(,%rsi,4), %rdx
    000000a8: 	movq	%rdx, %xmm6
    000000ad: 	movq	%rax, %rdx
    000000b0: 	punpcklqdq	%xmm5, %xmm0
    000000b4: 	shlq	$0x4, %rdx
    000000b8: 	paddq	%xmm0, %xmm4
    000000bc: 	movdqa	%xmm3, %xmm0
    000000c0: 	subq	%rax, %rdx
    000000c3: 	leaq	(%rax,%rsi,2), %rax
    000000c7: 	punpcklqdq	%xmm6, %xmm0
    000000cb: 	movaps	%xmm4, data64(%rip)
    000000d2: 	punpcklqdq	%xmm7, %xmm3
    000000d6: 	leaq	(%rax,%rax,4), %rax
    000000da: 	leaq	(%rdx,%rdx), %rdi
    000000de: 	paddq	%xmm0, %xmm2
    000000e2: 	paddq	%xmm3, %xmm1
    000000e6: 	movq	%rax, %xmm6
    000000eb: 	movdqa	DATAat0x15d20(%rip), %xmm0
    000000f3: 	movq	data64+80(%rip), %rax
    000000fa: 	paddq	data64+48(%rip), %xmm0
    00000102: 	movq	%rdx, %xmm3
    00000107: 	movq	%rdi, %xmm5
    0000010c: 	punpcklqdq	%xmm5, %xmm3
    00000110: 	movaps	%xmm2, data64+16(%rip)
    00000117: 	paddq	%xmm0, %xmm3
    0000011b: 	leaq	0x3c(%rax,%rdx,4), %rax
    00000120: 	movq	%rcx, %xmm0
    00000125: 	movaps	%xmm1, data64+32(%rip)
    0000012c: 	punpcklqdq	%xmm6, %xmm0
    00000130: 	movq	%rax, data64+80(%rip)
    00000137: 	paddq	data64+64(%rip), %xmm0
    0000013f: 	paddq	DATAat0x15d30(%rip), %xmm0
    00000147: 	movaps	%xmm3, data64+48(%rip)
    0000014e: 	movaps	%xmm0, data64+64(%rip)
.Ltmp243:
    00000155: 	movq	%rbp, %rsi
    00000158: 	leaq	data64(%rip), %rdi
    0000015f: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 351
    00000164: 	movq	%rbp, %rdi
    00000167: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 359
    0000016c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000173: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000017a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000181: 	je	.Ltmp244 # Offset: 385
.Ltmp245:
    00000183: 	movq	-0x20(%rax), %rbp
    00000187: 	callq	clock@PLT # Offset: 391
    0000018c: 	pxor	%xmm0, %xmm0
    00000190: 	movq	%rax, end_time(%rip)
    00000197: 	movq	%rbp, %rdi
    0000019a: 	popq	%rbp
    0000019b: 	subq	start_time(%rip), %rax
    000001a2: 	cvtsi2sd	%rax, %xmm0
    000001a7: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001af: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp244:
    000001b8: 	movq	-0x8(%rdx), %rax
    000001bc: 	addq	$0x200, %rax
    000001c2: 	jmp	.Ltmp245 # Offset: 450
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_globalImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_array5_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x81f0
  Size        : 0x12c
  MaxSize     : 0x130
  Offset      : 0x81f0
  Section     : .text
  Orc Section : .local.text._Z17test_array5_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x8, %rsp
    0000000d: 	movslq	init_value(%rip), %rbx
    00000014: 	callq	clock@PLT # Offset: 20
    00000019: 	movslq	iterations(%rip), %rcx
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	testl	%ecx, %ecx
    00000029: 	jle	.Ltmp246 # Offset: 41
    0000002f: 	leal	-0x1(%rcx), %eax
    00000032: 	leaq	(%rax,%rax,2), %rdx
    00000036: 	leaq	(%rax,%rdx,4), %rdx
    0000003a: 	leaq	0x34(%rbx,%rdx,4), %rsi
    0000003f: 	leaq	(%rax,%rax,4), %rdx
    00000043: 	leaq	(%rax,%rax,8), %rax
    00000047: 	leaq	0x14(%rbx,%rdx,4), %rdi
    0000004c: 	leaq	0x24(%rbx,%rax,4), %rax
    00000051: 	leaq	0x28(%rbx,%rdx,8), %rbx
.Ltmp250:
    00000056: 	leaq	(%rcx,%rcx,2), %rdx
    0000005a: 	movslq	init_value(%rip), %r8
    00000061: 	shlq	$0x2, %rdx
    00000065: 	leaq	(%rdx,%rcx), %r9
    00000069: 	leaq	(%r8,%r9,4), %r9
    0000006d: 	movq	%r9, %r8
    00000070: 	subq	%rdx, %r8
    00000073: 	cmpq	%rsi, %r9
    00000076: 	jne	.Ltmp247 # Offset: 118
    00000078: 	cmpq	%rbx, %r8
    0000007b: 	jne	.Ltmp247 # Offset: 123
    0000007d: 	leaq	(,%rcx,4), %rdx
    00000085: 	shlq	$0x4, %rcx
    00000089: 	subq	%rdx, %r8
    0000008c: 	movq	%r8, %rdx
    0000008f: 	subq	%rcx, %rdx
    00000092: 	cmpq	%rdi, %rdx
    00000095: 	jne	.Ltmp247 # Offset: 149
    00000097: 	cmpq	%rax, %r8
    0000009a: 	je	.Ltmp248 # Offset: 154
.Ltmp247:
    0000009c: 	movq	(%rbp), %rdx
    000000a0: 	leaq	DATAat0x158f3(%rip), %rsi
    000000a7: 	movl	$0x1, %edi
    000000ac: 	xorl	%eax, %eax
    000000ae: 	callq	__printf_chk@PLT # Offset: 174
.Ltmp248:
    000000b3: 	movq	%rbp, %rdi
    000000b6: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 182
    000000bb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000c2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000c9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000d0: 	je	.Ltmp249 # Offset: 208
.Ltmp251:
    000000d2: 	movq	-0x20(%rax), %rbp
    000000d6: 	callq	clock@PLT # Offset: 214
    000000db: 	pxor	%xmm0, %xmm0
    000000df: 	movq	%rax, end_time(%rip)
    000000e6: 	subq	start_time(%rip), %rax
    000000ed: 	movq	%rbp, %rdi
    000000f0: 	cvtsi2sd	%rax, %xmm0
    000000f5: 	divsd	DATAat0x15c60(%rip), %xmm0
    000000fd: 	addq	$0x8, %rsp
    00000101: 	popq	%rbx
    00000102: 	popq	%rbp
    00000103: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 259
    00000108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp246:
    00000110: 	movq	%rbx, %rdi
    00000113: 	movq	%rbx, %rax
    00000116: 	movq	%rbx, %rsi
    00000119: 	jmp	.Ltmp250 # Offset: 281
    0000011e: 	nop # Size: 2
.Ltmp249:
    00000120: 	movq	-0x8(%rdx), %rax
    00000124: 	addq	$0x200, %rax
    0000012a: 	jmp	.Ltmp251 # Offset: 298
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_array5_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array11_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x8320
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0x8320
  Section     : .text
  Orc Section : .local.text._Z18test_array11_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x68, %rsp
    0000000d: 	movslq	init_value(%rip), %rbx
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x58(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	movq	%rbx, %xmm0
    00000029: 	movq	%rbx, 0x50(%rsp)
    0000002e: 	punpcklqdq	%xmm0, %xmm0
    00000032: 	movaps	%xmm0, (%rsp)
    00000036: 	movaps	%xmm0, 0x10(%rsp)
    0000003b: 	movaps	%xmm0, 0x20(%rsp)
    00000040: 	movaps	%xmm0, 0x30(%rsp)
    00000045: 	movaps	%xmm0, 0x40(%rsp)
    0000004a: 	callq	clock@PLT # Offset: 74
    0000004f: 	movq	%rax, start_time(%rip)
    00000056: 	movl	iterations(%rip), %eax
    0000005c: 	testl	%eax, %eax
    0000005e: 	jle	.Ltmp252 # Offset: 94
    00000064: 	subl	$0x1, %eax
    00000067: 	leaq	(,%rax,8), %rcx
    0000006f: 	leaq	(%rax,%rax,4), %rsi
    00000073: 	leaq	(%rcx,%rax), %rdx
    00000077: 	subq	%rax, %rcx
    0000007a: 	leaq	0x24(%rbx,%rdx,4), %rdi
    0000007f: 	leaq	0x9(%rbx,%rdx), %rdx
    00000084: 	movq	%rdx, 0x28(%rsp)
    00000089: 	leaq	(%rax,%rax,2), %rdx
    0000008d: 	leaq	(%rax,%rcx,8), %rcx
    00000091: 	leaq	(%rax,%rdx,4), %rdx
    00000095: 	leaq	0x39(%rbx,%rcx), %rcx
    0000009a: 	movq	%rdi, 0x10(%rsp)
    0000009f: 	leaq	0x34(%rbx,%rdx,4), %rdx
    000000a4: 	movq	%rcx, 0x40(%rsp)
    000000a9: 	leaq	0x28(%rbx,%rsi,8), %rcx
    000000ae: 	movq	%rdx, (%rsp)
    000000b2: 	leaq	0x14(%rbx,%rsi,4), %rdx
    000000b7: 	movq	%rdx, 0x18(%rsp)
    000000bc: 	movq	%rax, %rdx
    000000bf: 	shlq	$0x4, %rdx
    000000c3: 	movq	%rcx, 0x8(%rsp)
    000000c8: 	subq	%rax, %rdx
    000000cb: 	leaq	(%rax,%rsi,2), %rax
    000000cf: 	movq	%rdi, 0x20(%rsp)
    000000d4: 	leaq	(%rax,%rax,4), %rax
    000000d8: 	leaq	0xf(%rbx,%rdx), %r8
    000000dd: 	leaq	0x3c(%rbx,%rdx,4), %rcx
    000000e2: 	leaq	0x37(%rbx,%rax), %rax
    000000e7: 	movq	%r8, 0x30(%rsp)
    000000ec: 	leaq	0x1e(%rbx,%rdx,2), %rdx
    000000f1: 	movq	%rcx, 0x50(%rsp)
    000000f6: 	movq	%rdx, 0x38(%rsp)
    000000fb: 	movq	%rax, 0x48(%rsp)
.Ltmp252:
    00000100: 	movq	%rsp, %rdi
    00000103: 	movq	%rbp, %rsi
    00000106: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 262
    0000010b: 	movq	%rbp, %rdi
    0000010e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 270
    00000113: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000121: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000128: 	je	.Ltmp253 # Offset: 296
.Ltmp255:
    0000012a: 	movq	-0x20(%rax), %rbp
    0000012e: 	callq	clock@PLT # Offset: 302
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	movq	0x58(%rsp), %rdx
    0000013f: 	subq	%fs:0x28, %rdx
    00000148: 	jne	.Ltmp254 # Offset: 328
    0000014a: 	subq	start_time(%rip), %rax
    00000151: 	pxor	%xmm0, %xmm0
    00000155: 	movq	%rbp, %rdi
    00000158: 	cvtsi2sd	%rax, %xmm0
    0000015d: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000165: 	addq	$0x68, %rsp
    00000169: 	popq	%rbx
    0000016a: 	popq	%rbp
    0000016b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 363
.Ltmp253:
    00000170: 	movq	-0x8(%rdx), %rax
    00000174: 	addq	$0x200, %rax
    0000017a: 	jmp	.Ltmp255 # Offset: 378
.Ltmp254:
    0000017c: 	callq	__stack_chk_fail@PLT # Offset: 380
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array11_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_array11_argImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x84b0
  Size        : 0x1ac
  MaxSize     : 0x1b0
  Offset      : 0x84b0
  Section     : .text
  Orc Section : .local.text._Z16test_array11_argImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdi, %rbp
    0000000d: 	subq	$0x8, %rsp
    00000011: 	callq	clock@PLT # Offset: 17
    00000016: 	movq	%rax, start_time(%rip)
    0000001d: 	movl	iterations(%rip), %eax
    00000023: 	testl	%eax, %eax
    00000025: 	jle	.Ltmp256 # Offset: 37
    0000002b: 	subl	$0x1, %eax
    0000002e: 	movdqu	(%rbp), %xmm6
    00000033: 	leaq	(,%rax,8), %rcx
    0000003b: 	leaq	(%rax,%rax,2), %rdx
    0000003f: 	leaq	(%rcx,%rax), %rdi
    00000043: 	leaq	(%rax,%rdx,4), %rdx
    00000047: 	subq	%rax, %rcx
    0000004a: 	leaq	(,%rdi,4), %rsi
    00000052: 	leaq	(%rax,%rcx,8), %rcx
    00000056: 	movq	%rsi, %xmm0
    0000005b: 	leaq	(,%rdx,4), %rsi
    00000063: 	movq	%rcx, %xmm1
    00000068: 	movq	%rsi, %xmm2
    0000006d: 	leaq	(%rax,%rax,4), %rsi
    00000071: 	movdqa	%xmm0, %xmm4
    00000075: 	leaq	(,%rsi,8), %rdx
    0000007d: 	movq	%rdx, %xmm5
    00000082: 	leaq	(,%rsi,4), %rdx
    0000008a: 	punpcklqdq	%xmm5, %xmm2
    0000008e: 	movq	%rdx, %xmm7
    00000093: 	movq	%rax, %rdx
    00000096: 	movdqu	0x10(%rbp), %xmm5
    0000009b: 	paddq	DATAat0x15cf0(%rip), %xmm2
    000000a3: 	shlq	$0x4, %rdx
    000000a7: 	punpcklqdq	%xmm7, %xmm4
    000000ab: 	movdqu	0x20(%rbp), %xmm7
    000000b0: 	subq	%rax, %rdx
    000000b3: 	leaq	(%rax,%rsi,2), %rax
    000000b7: 	paddq	DATAat0x15d00(%rip), %xmm4
    000000bf: 	paddq	%xmm6, %xmm2
    000000c3: 	movq	%rdi, %xmm6
    000000c8: 	leaq	(%rax,%rax,4), %rax
    000000cc: 	punpcklqdq	%xmm6, %xmm0
    000000d0: 	leaq	(%rdx,%rdx), %rdi
    000000d4: 	paddq	%xmm5, %xmm4
    000000d8: 	movups	%xmm2, (%rbp)
    000000dc: 	movq	%rdi, %xmm5
    000000e1: 	movq	%rdx, %xmm3
    000000e6: 	movdqu	0x30(%rbp), %xmm6
    000000eb: 	paddq	DATAat0x15d10(%rip), %xmm0
    000000f3: 	punpcklqdq	%xmm5, %xmm3
    000000f7: 	movdqu	0x40(%rbp), %xmm5
    000000fc: 	paddq	DATAat0x15d20(%rip), %xmm3
    00000104: 	movups	%xmm4, 0x10(%rbp)
    00000108: 	paddq	%xmm7, %xmm0
    0000010c: 	movq	%rax, %xmm7
    00000111: 	movq	0x50(%rbp), %rax
    00000115: 	punpcklqdq	%xmm7, %xmm1
    00000119: 	paddq	DATAat0x15d30(%rip), %xmm1
    00000121: 	paddq	%xmm6, %xmm3
    00000125: 	movups	%xmm0, 0x20(%rbp)
    00000129: 	leaq	0x3c(%rax,%rdx,4), %rax
    0000012e: 	movups	%xmm3, 0x30(%rbp)
    00000132: 	movq	%rax, 0x50(%rbp)
    00000136: 	paddq	%xmm5, %xmm1
    0000013a: 	movups	%xmm1, 0x40(%rbp)
.Ltmp256:
    0000013e: 	movq	%r12, %rsi
    00000141: 	movq	%rbp, %rdi
    00000144: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 324
    00000149: 	movq	%r12, %rdi
    0000014c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 332
    00000151: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000158: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000015f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000166: 	je	.Ltmp257 # Offset: 358
.Ltmp258:
    00000168: 	movq	-0x20(%rax), %rbp
    0000016c: 	callq	clock@PLT # Offset: 364
    00000171: 	pxor	%xmm0, %xmm0
    00000175: 	movq	%rax, end_time(%rip)
    0000017c: 	subq	start_time(%rip), %rax
    00000183: 	movq	%rbp, %rdi
    00000186: 	cvtsi2sd	%rax, %xmm0
    0000018b: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000193: 	addq	$0x8, %rsp
    00000197: 	popq	%rbp
    00000198: 	popq	%r12
    0000019a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 410
    0000019f: 	nop # Size: 1
.Ltmp257:
    000001a0: 	movq	-0x8(%rdx), %rax
    000001a4: 	addq	$0x200, %rax
    000001aa: 	jmp	.Ltmp258 # Offset: 426
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_array11_argImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_globalIiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x8660
  Size        : 0x15e
  MaxSize     : 0x160
  Offset      : 0x8660
  Section     : .text
  Orc Section : .local.text._Z18test_array5_globalIiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	movl	iterations(%rip), %eax
    0000001a: 	testl	%eax, %eax
    0000001c: 	jle	.Ltmp259 # Offset: 28
    00000022: 	movl	data32+12(%rip), %edx
    00000028: 	movl	data32+4(%rip), %esi
    0000002e: 	imull	$0x34, %eax, %edi
    00000031: 	leal	(%rax,%rax,4), %ecx
    00000034: 	movl	data32+8(%rip), %r10d
    0000003b: 	addl	data32(%rip), %edi
    00000041: 	leal	(%rdx,%rcx,4), %r9d
    00000045: 	leal	(%rsi,%rcx,8), %r11d
    00000049: 	movl	data32+16(%rip), %esi
    0000004f: 	movl	%edi, data32(%rip)
    00000055: 	leal	(%rax,%rax,8), %edx
    00000058: 	movl	%r9d, data32+12(%rip)
    0000005f: 	shll	$0x2, %edx
    00000062: 	movl	%r11d, data32+4(%rip)
    00000069: 	addl	%edx, %r10d
    0000006c: 	addl	%edx, %esi
    0000006e: 	movl	%r10d, data32+8(%rip)
    00000075: 	movl	%esi, data32+16(%rip)
.Ltmp264:
    0000007b: 	imull	$0x34, %eax, %edx
    0000007e: 	leal	(%rax,%rax,2), %r8d
    00000082: 	addl	init_value(%rip), %edx
    00000088: 	shll	$0x2, %r8d
    0000008c: 	movl	%edx, %ecx
    0000008e: 	subl	%r8d, %ecx
    00000091: 	cmpl	%edi, %edx
    00000093: 	jne	.Ltmp260 # Offset: 147
    00000095: 	cmpl	%r11d, %ecx
    00000098: 	jne	.Ltmp260 # Offset: 152
    0000009a: 	leal	(,%rax,4), %edx
    000000a1: 	shll	$0x4, %eax
    000000a4: 	subl	%edx, %ecx
    000000a6: 	movl	%ecx, %edx
    000000a8: 	subl	%eax, %edx
    000000aa: 	cmpl	%r9d, %edx
    000000ad: 	setne	%al
    000000b0: 	cmpl	%r10d, %ecx
    000000b3: 	setne	%dl
    000000b6: 	orb	%dl, %al
    000000b8: 	jne	.Ltmp260 # Offset: 184
    000000ba: 	cmpl	%esi, %ecx
    000000bc: 	je	.Ltmp261 # Offset: 188
.Ltmp260:
    000000be: 	movq	(%rbp), %rdx
    000000c2: 	leaq	DATAat0x158f3(%rip), %rsi
    000000c9: 	movl	$0x1, %edi
    000000ce: 	xorl	%eax, %eax
    000000d0: 	callq	__printf_chk@PLT # Offset: 208
.Ltmp261:
    000000d5: 	movq	%rbp, %rdi
    000000d8: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 216
    000000dd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000e4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f2: 	je	.Ltmp262 # Offset: 242
.Ltmp263:
    000000f4: 	movq	-0x20(%rax), %rbp
    000000f8: 	callq	clock@PLT # Offset: 248
    000000fd: 	pxor	%xmm0, %xmm0
    00000101: 	movq	%rax, end_time(%rip)
    00000108: 	movq	%rbp, %rdi
    0000010b: 	popq	%rbp
    0000010c: 	subq	start_time(%rip), %rax
    00000113: 	cvtsi2sd	%rax, %xmm0
    00000118: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000120: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 288
    00000125: 	nopl	(%rax) # Size: 3
.Ltmp262:
    00000128: 	movq	-0x8(%rdx), %rax
    0000012c: 	addq	$0x200, %rax
    00000132: 	jmp	.Ltmp263 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp259:
    00000138: 	movl	data32(%rip), %edi
    0000013e: 	movl	data32+4(%rip), %r11d
    00000145: 	movl	data32+8(%rip), %r10d
    0000014c: 	movl	data32+12(%rip), %r9d
    00000153: 	movl	data32+16(%rip), %esi
    00000159: 	jmp	.Ltmp264 # Offset: 345
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_globalIiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_globalIiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x87c0
  Size        : 0x12c
  MaxSize     : 0x130
  Offset      : 0x87c0
  Section     : .text
  Orc Section : .local.text._Z19test_array11_globalIiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	movl	iterations(%rip), %eax
    0000001a: 	testl	%eax, %eax
    0000001c: 	jle	.Ltmp265 # Offset: 28
    00000022: 	movd	%eax, %xmm4
    00000026: 	movdqa	DATAat0x15d40(%rip), %xmm1
    0000002e: 	imull	$0x3c, %eax, %ecx
    00000031: 	addl	%ecx, data32+40(%rip)
    00000037: 	pshufd	$0x0, %xmm4, %xmm0
    0000003c: 	imull	$0x37, %eax, %edx
    0000003f: 	addl	%edx, data32+36(%rip)
    00000045: 	movdqa	%xmm0, %xmm2
    00000049: 	imull	$0x39, %eax, %eax
    0000004c: 	movdqa	%xmm0, %xmm3
    00000050: 	addl	%eax, data32+32(%rip)
    00000056: 	pmuludq	%xmm1, %xmm2
    0000005a: 	psrlq	$0x20, %xmm3
    0000005f: 	psrlq	$0x20, %xmm1
    00000064: 	pmuludq	%xmm3, %xmm1
    00000068: 	pshufd	$0x8, %xmm2, %xmm2
    0000006d: 	pshufd	$0x8, %xmm1, %xmm1
    00000072: 	punpckldq	%xmm1, %xmm2
    00000076: 	movdqa	data32(%rip), %xmm1
    0000007e: 	paddd	%xmm2, %xmm1
    00000082: 	movdqa	DATAat0x15d50(%rip), %xmm2
    0000008a: 	movaps	%xmm1, data32(%rip)
    00000091: 	pmuludq	%xmm2, %xmm0
    00000095: 	psrlq	$0x20, %xmm2
    0000009a: 	pmuludq	%xmm2, %xmm3
    0000009e: 	pshufd	$0x8, %xmm0, %xmm0
    000000a3: 	pshufd	$0x8, %xmm3, %xmm3
    000000a8: 	punpckldq	%xmm3, %xmm0
    000000ac: 	paddd	data32+16(%rip), %xmm0
    000000b4: 	movaps	%xmm0, data32+16(%rip)
.Ltmp265:
    000000bb: 	movq	%rbp, %rsi
    000000be: 	leaq	data32(%rip), %rdi
    000000c5: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 197
    000000ca: 	movq	%rbp, %rdi
    000000cd: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 205
    000000d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000e0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000e7: 	je	.Ltmp266 # Offset: 231
.Ltmp267:
    000000e9: 	movq	-0x20(%rax), %rbp
    000000ed: 	callq	clock@PLT # Offset: 237
    000000f2: 	pxor	%xmm0, %xmm0
    000000f6: 	movq	%rax, end_time(%rip)
    000000fd: 	movq	%rbp, %rdi
    00000100: 	popq	%rbp
    00000101: 	subq	start_time(%rip), %rax
    00000108: 	cvtsi2sd	%rax, %xmm0
    0000010d: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000115: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 277
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp266:
    00000120: 	movq	-0x8(%rdx), %rax
    00000124: 	addq	$0x200, %rax
    0000012a: 	jmp	.Ltmp267 # Offset: 298
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_globalIiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_array5_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x88f0
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0x88f0
  Section     : .text
  Orc Section : .local.text._Z17test_array5_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x8, %rsp
    0000000d: 	movl	init_value(%rip), %ebx
    00000013: 	callq	clock@PLT # Offset: 19
    00000018: 	movq	%rax, start_time(%rip)
    0000001f: 	movl	iterations(%rip), %eax
    00000025: 	testl	%eax, %eax
    00000027: 	jle	.Ltmp268 # Offset: 39
    0000002d: 	imull	$0x34, %eax, %edx
    00000030: 	addl	%edx, %ebx
    00000032: 	movl	%eax, %edx
    00000034: 	shll	$0x5, %edx
    00000037: 	movl	%ebx, %ecx
    00000039: 	subl	%edx, %ecx
    0000003b: 	movl	%eax, %edx
    0000003d: 	shll	$0x4, %edx
    00000040: 	addl	%ecx, %edx
    00000042: 	leal	(%rdx,%rax,4), %esi
.Ltmp272:
    00000045: 	imull	$0x34, %eax, %edi
    00000048: 	leal	(%rax,%rax,2), %r9d
    0000004c: 	addl	init_value(%rip), %edi
    00000052: 	shll	$0x2, %r9d
    00000056: 	movl	%edi, %r8d
    00000059: 	subl	%r9d, %r8d
    0000005c: 	cmpl	%ebx, %edi
    0000005e: 	jne	.Ltmp269 # Offset: 94
    00000060: 	cmpl	%esi, %r8d
    00000063: 	jne	.Ltmp269 # Offset: 99
    00000065: 	leal	(,%rax,4), %esi
    0000006c: 	shll	$0x4, %eax
    0000006f: 	subl	%esi, %r8d
    00000072: 	movl	%r8d, %esi
    00000075: 	subl	%eax, %esi
    00000077: 	cmpl	%ecx, %esi
    00000079: 	jne	.Ltmp269 # Offset: 121
    0000007b: 	cmpl	%edx, %r8d
    0000007e: 	je	.Ltmp270 # Offset: 126
.Ltmp269:
    00000080: 	movq	(%rbp), %rdx
    00000084: 	leaq	DATAat0x158f3(%rip), %rsi
    0000008b: 	movl	$0x1, %edi
    00000090: 	xorl	%eax, %eax
    00000092: 	callq	__printf_chk@PLT # Offset: 146
.Ltmp270:
    00000097: 	movq	%rbp, %rdi
    0000009a: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 154
    0000009f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000a6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000ad: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000b4: 	je	.Ltmp271 # Offset: 180
.Ltmp273:
    000000b6: 	movq	-0x20(%rax), %rbp
    000000ba: 	callq	clock@PLT # Offset: 186
    000000bf: 	pxor	%xmm0, %xmm0
    000000c3: 	movq	%rax, end_time(%rip)
    000000ca: 	subq	start_time(%rip), %rax
    000000d1: 	movq	%rbp, %rdi
    000000d4: 	cvtsi2sd	%rax, %xmm0
    000000d9: 	divsd	DATAat0x15c60(%rip), %xmm0
    000000e1: 	addq	$0x8, %rsp
    000000e5: 	popq	%rbx
    000000e6: 	popq	%rbp
    000000e7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 231
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp268:
    000000f0: 	movl	%ebx, %ecx
    000000f2: 	movl	%ebx, %edx
    000000f4: 	movl	%ebx, %esi
    000000f6: 	jmp	.Ltmp272 # Offset: 246
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp271:
    00000100: 	movq	-0x8(%rdx), %rax
    00000104: 	addq	$0x200, %rax
    0000010a: 	jmp	.Ltmp273 # Offset: 266
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_array5_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array11_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x8a00
  Size        : 0x1b1
  MaxSize     : 0x1c0
  Offset      : 0x8a00
  Section     : .text
  Orc Section : .local.text._Z18test_array11_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x68, %rsp
    0000000d: 	movl	init_value(%rip), %ebx
    00000013: 	movq	%fs:0x28, %rax
    0000001c: 	movq	%rax, 0x58(%rsp)
    00000021: 	xorl	%eax, %eax
    00000023: 	movd	%ebx, %xmm6
    00000027: 	movl	%ebx, 0x48(%rsp)
    0000002b: 	pshufd	$0x0, %xmm6, %xmm5
    00000030: 	pshufd	$0xe0, %xmm6, %xmm4
    00000035: 	movaps	%xmm5, 0x20(%rsp)
    0000003a: 	movaps	%xmm5, 0x30(%rsp)
    0000003f: 	movaps	%xmm5, 0x10(%rsp)
    00000044: 	movq	%xmm4, 0x40(%rsp)
    0000004a: 	movq	%xmm4, 0x8(%rsp)
    00000050: 	callq	clock@PLT # Offset: 80
    00000055: 	movq	%rax, start_time(%rip)
    0000005c: 	movl	iterations(%rip), %eax
    00000062: 	testl	%eax, %eax
    00000064: 	jle	.Ltmp274 # Offset: 100
    0000006a: 	movd	%eax, %xmm6
    0000006e: 	imull	$0xb, %eax, %ecx
    00000071: 	leal	(%rax,%rax,8), %edx
    00000074: 	movdqa	0x10(%rsp), %xmm5
    0000007a: 	pshufd	$0x0, %xmm6, %xmm0
    0000007f: 	movdqa	DATAat0x15d40(%rip), %xmm1
    00000087: 	imull	$0x2a, %eax, %edi
    0000008a: 	addl	%ebx, %edx
    0000008c: 	movdqa	%xmm0, %xmm2
    00000090: 	movdqa	%xmm0, %xmm3
    00000094: 	leal	(,%rax,4), %esi
    0000009b: 	movq	0x8(%rsp), %xmm4
    000000a1: 	pmuludq	%xmm1, %xmm2
    000000a5: 	psrlq	$0x20, %xmm3
    000000aa: 	addl	%ecx, %edx
    000000ac: 	psrlq	$0x20, %xmm1
    000000b1: 	leal	(%rsi,%rax), %ecx
    000000b4: 	pmuludq	%xmm3, %xmm1
    000000b8: 	subl	%ecx, %edx
    000000ba: 	shll	$0x2, %ecx
    000000bd: 	addl	%edi, %edx
    000000bf: 	leal	(%rcx,%rax), %edi
    000000c2: 	subl	%edi, %edx
    000000c4: 	pshufd	$0x8, %xmm2, %xmm2
    000000c9: 	addl	%esi, %edx
    000000cb: 	imull	$0x39, %eax, %esi
    000000ce: 	addl	%ecx, %edx
    000000d0: 	pshufd	$0x8, %xmm1, %xmm1
    000000d5: 	imull	$0x37, %eax, %eax
    000000d8: 	movl	%edx, 0x48(%rsp)
    000000dc: 	punpckldq	%xmm1, %xmm2
    000000e0: 	movdqa	DATAat0x15d50(%rip), %xmm1
    000000e8: 	paddd	%xmm5, %xmm2
    000000ec: 	pmuludq	%xmm1, %xmm0
    000000f0: 	psrlq	$0x20, %xmm1
    000000f5: 	movd	%eax, %xmm7
    000000f9: 	movaps	%xmm2, 0x20(%rsp)
    000000fe: 	pmuludq	%xmm1, %xmm3
    00000102: 	pshufd	$0x8, %xmm0, %xmm0
    00000107: 	pshufd	$0x8, %xmm3, %xmm3
    0000010c: 	punpckldq	%xmm3, %xmm0
    00000110: 	paddd	%xmm5, %xmm0
    00000114: 	movaps	%xmm0, 0x30(%rsp)
    00000119: 	movd	%esi, %xmm0
    0000011d: 	punpckldq	%xmm7, %xmm0
    00000121: 	paddd	%xmm4, %xmm0
    00000125: 	movq	%xmm0, 0x40(%rsp)
.Ltmp274:
    0000012b: 	leaq	0x20(%rsp), %rdi
    00000130: 	movq	%rbp, %rsi
    00000133: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 307
    00000138: 	movq	%rbp, %rdi
    0000013b: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 315
    00000140: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000147: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000014e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000155: 	je	.Ltmp275 # Offset: 341
.Ltmp277:
    00000157: 	movq	-0x20(%rax), %rbp
    0000015b: 	callq	clock@PLT # Offset: 347
    00000160: 	movq	%rax, end_time(%rip)
    00000167: 	movq	0x58(%rsp), %rdx
    0000016c: 	subq	%fs:0x28, %rdx
    00000175: 	jne	.Ltmp276 # Offset: 373
    00000177: 	subq	start_time(%rip), %rax
    0000017e: 	pxor	%xmm0, %xmm0
    00000182: 	movq	%rbp, %rdi
    00000185: 	cvtsi2sd	%rax, %xmm0
    0000018a: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000192: 	addq	$0x68, %rsp
    00000196: 	popq	%rbx
    00000197: 	popq	%rbp
    00000198: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 408
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp275:
    000001a0: 	movq	-0x8(%rdx), %rax
    000001a4: 	addq	$0x200, %rax
    000001aa: 	jmp	.Ltmp277 # Offset: 426
.Ltmp276:
    000001ac: 	callq	__stack_chk_fail@PLT # Offset: 428
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array11_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_array5_argIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x8bc0
  Size        : 0x155
  MaxSize     : 0x160
  Offset      : 0x8bc0
  Section     : .text
  Orc Section : .local.text._Z15test_array5_argIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pushq	%rbp
    00000007: 	movq	%rsi, %rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	%rdi, %rbx
    0000000e: 	callq	clock@PLT # Offset: 14
    00000013: 	movl	iterations(%rip), %esi
    00000019: 	movq	%rax, start_time(%rip)
    00000020: 	testl	%esi, %esi
    00000022: 	jle	.Ltmp278 # Offset: 34
    00000028: 	movl	0x8(%rbx), %eax
    0000002b: 	movl	(%rbx), %ecx
    0000002d: 	movl	0x10(%rbx), %r11d
    00000031: 	movl	0x4(%rbx), %edi
    00000034: 	movl	0xc(%rbx), %r9d
    00000038: 	leal	0x34(%rcx), %r8d
    0000003c: 	leal	0x24(%rax), %r10d
    00000040: 	xorl	%ecx, %ecx
    00000042: 	subl	%eax, %r11d
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp279:
    00000048: 	movl	%r8d, (%rbx)
    0000004b: 	movl	iterations(%rip), %esi
    00000051: 	addl	$0x1, %ecx
    00000054: 	movl	%r8d, %edx
    00000057: 	movl	%r10d, %eax
    0000005a: 	leal	(%r11,%r10), %r12d
    0000005e: 	addl	$0x14, %r9d
    00000062: 	addl	$0x28, %edi
    00000065: 	leal	0x34(%r8), %r8d
    00000069: 	leal	0x24(%r10), %r10d
    0000006d: 	cmpl	%ecx, %esi
    0000006f: 	jg	.Ltmp279 # Offset: 111
    00000071: 	movl	%r9d, 0xc(%rbx)
    00000075: 	movl	%eax, 0x8(%rbx)
    00000078: 	movl	%edi, 0x4(%rbx)
    0000007b: 	movl	%r12d, 0x10(%rbx)
.Ltmp284:
    0000007f: 	imull	$0x34, %esi, %ecx
    00000082: 	leal	(%rsi,%rsi,2), %r10d
    00000086: 	addl	init_value(%rip), %ecx
    0000008c: 	shll	$0x2, %r10d
    00000090: 	movl	%ecx, %r8d
    00000093: 	subl	%r10d, %r8d
    00000096: 	cmpl	%edx, %ecx
    00000098: 	jne	.Ltmp280 # Offset: 152
    0000009a: 	cmpl	%edi, %r8d
    0000009d: 	jne	.Ltmp280 # Offset: 157
    0000009f: 	leal	(,%rsi,4), %edx
    000000a6: 	shll	$0x4, %esi
    000000a9: 	subl	%edx, %r8d
    000000ac: 	movl	%r8d, %edx
    000000af: 	subl	%esi, %edx
    000000b1: 	cmpl	%r9d, %edx
    000000b4: 	setne	%dl
    000000b7: 	cmpl	%eax, %r8d
    000000ba: 	setne	%al
    000000bd: 	orb	%al, %dl
    000000bf: 	jne	.Ltmp280 # Offset: 191
    000000c1: 	cmpl	%r12d, %r8d
    000000c4: 	je	.Ltmp281 # Offset: 196
.Ltmp280:
    000000c6: 	movq	(%rbp), %rdx
    000000ca: 	leaq	DATAat0x158f3(%rip), %rsi
    000000d1: 	movl	$0x1, %edi
    000000d6: 	xorl	%eax, %eax
    000000d8: 	callq	__printf_chk@PLT # Offset: 216
.Ltmp281:
    000000dd: 	movq	%rbp, %rdi
    000000e0: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 224
    000000e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000ec: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000fa: 	je	.Ltmp282 # Offset: 250
.Ltmp283:
    000000fc: 	movq	-0x20(%rax), %rbp
    00000100: 	callq	clock@PLT # Offset: 256
    00000105: 	popq	%rbx
    00000106: 	pxor	%xmm0, %xmm0
    0000010a: 	movq	%rax, end_time(%rip)
    00000111: 	movq	%rbp, %rdi
    00000114: 	popq	%rbp
    00000115: 	subq	start_time(%rip), %rax
    0000011c: 	popq	%r12
    0000011e: 	cvtsi2sd	%rax, %xmm0
    00000123: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000012b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 299
.Ltmp282:
    00000130: 	movq	-0x8(%rdx), %rax
    00000134: 	addq	$0x200, %rax
    0000013a: 	jmp	.Ltmp283 # Offset: 314
    0000013c: 	nopl	(%rax) # Size: 4
.Ltmp278:
    00000140: 	movl	(%rbx), %edx
    00000142: 	movl	0x4(%rbx), %edi
    00000145: 	movl	0x8(%rbx), %eax
    00000148: 	movl	0xc(%rbx), %r9d
    0000014c: 	movl	0x10(%rbx), %r12d
    00000150: 	jmp	.Ltmp284 # Offset: 336
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_array5_argIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_array11_argIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x8d20
  Size        : 0xec
  MaxSize     : 0xf0
  Offset      : 0x8d20
  Section     : .text
  Orc Section : .local.text._Z16test_array11_argIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdi, %rbp
    0000000d: 	subq	$0x8, %rsp
    00000011: 	callq	clock@PLT # Offset: 17
    00000016: 	movq	%rax, start_time(%rip)
    0000001d: 	movl	iterations(%rip), %eax
    00000023: 	testl	%eax, %eax
    00000025: 	jle	.Ltmp285 # Offset: 37
    00000027: 	movl	(%rbp), %eax
    0000002a: 	movdqu	0x4(%rbp), %xmm1
    0000002f: 	xorl	%edx, %edx
    00000031: 	movdqu	0x14(%rbp), %xmm0
    00000036: 	movl	0x28(%rbp), %edi
    00000039: 	movl	0x24(%rbp), %ecx
    0000003c: 	movdqa	DATAat0x15d60(%rip), %xmm3
    00000044: 	addl	$0x34, %eax
    00000047: 	movdqa	DATAat0x15d70(%rip), %xmm2
    0000004f: 	nop # Size: 1
.Ltmp286:
    00000050: 	movl	%eax, (%rbp)
    00000053: 	addl	$0x3c, %edi
    00000056: 	addl	$0x37, %ecx
    00000059: 	addl	$0x1, %edx
    0000005c: 	addl	$0x34, %eax
    0000005f: 	cmpl	%edx, iterations(%rip)
    00000065: 	paddd	%xmm3, %xmm1
    00000069: 	paddd	%xmm2, %xmm0
    0000006d: 	jg	.Ltmp286 # Offset: 109
    0000006f: 	movl	%edi, 0x28(%rbp)
    00000072: 	movl	%ecx, 0x24(%rbp)
    00000075: 	movups	%xmm1, 0x4(%rbp)
    00000079: 	movups	%xmm0, 0x14(%rbp)
.Ltmp285:
    0000007d: 	movq	%r12, %rsi
    00000080: 	movq	%rbp, %rdi
    00000083: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 131
    00000088: 	movq	%r12, %rdi
    0000008b: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 139
    00000090: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000097: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000009e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000a5: 	je	.Ltmp287 # Offset: 165
.Ltmp288:
    000000a7: 	movq	-0x20(%rax), %rbp
    000000ab: 	callq	clock@PLT # Offset: 171
    000000b0: 	pxor	%xmm0, %xmm0
    000000b4: 	movq	%rax, end_time(%rip)
    000000bb: 	subq	start_time(%rip), %rax
    000000c2: 	movq	%rbp, %rdi
    000000c5: 	cvtsi2sd	%rax, %xmm0
    000000ca: 	divsd	DATAat0x15c60(%rip), %xmm0
    000000d2: 	addq	$0x8, %rsp
    000000d6: 	popq	%rbp
    000000d7: 	popq	%r12
    000000d9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 217
    000000de: 	nop # Size: 2
.Ltmp287:
    000000e0: 	movq	-0x8(%rdx), %rax
    000000e4: 	addq	$0x200, %rax
    000000ea: 	jmp	.Ltmp288 # Offset: 234
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_array11_argIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_globalIsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x8e10
  Size        : 0x1b4
  MaxSize     : 0x1c0
  Offset      : 0x8e10
  Section     : .text
  Orc Section : .local.text._Z19test_array11_globalIsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	movl	iterations(%rip), %eax
    0000001a: 	testl	%eax, %eax
    0000001c: 	jle	.Ltmp289 # Offset: 28
    00000022: 	subl	$0x1, %eax
    00000025: 	leal	(%rax,%rax,2), %edi
    00000028: 	movl	%eax, %esi
    0000002a: 	leal	(%rax,%rax,4), %ecx
    0000002d: 	leal	(%rax,%rdi,4), %edi
    00000030: 	shll	$0x4, %esi
    00000033: 	leal	(,%rax,8), %edx
    0000003a: 	shll	$0x2, %edi
    0000003d: 	subl	%eax, %esi
    0000003f: 	leal	(%rdx,%rax), %r9d
    00000043: 	subl	%eax, %edx
    00000045: 	movd	%edi, %xmm1
    00000049: 	movd	%esi, %xmm3
    0000004d: 	movzwl	data16+4(%rip), %edi
    00000054: 	pinsrw	$0x1, data16+14(%rip), %xmm3
    0000005d: 	leal	(,%rcx,4), %r10d
    00000065: 	leal	(,%r9,4), %r8d
    0000006d: 	pinsrw	$0x1, data16+2(%rip), %xmm1
    00000076: 	movd	%edi, %xmm2
    0000007a: 	movzwl	data16+8(%rip), %edi
    00000081: 	leal	(%rax,%rdx,8), %edx
    00000084: 	addw	data16+16(%rip), %dx
    0000008b: 	pinsrw	$0x1, %r10d, %xmm2
    00000091: 	leal	(,%rcx,8), %r10d
    00000099: 	leal	(%rax,%rcx,2), %ecx
    0000009c: 	addl	$0x39, %edx
    0000009f: 	movd	%edi, %xmm0
    000000a3: 	movzwl	data16(%rip), %edi
    000000aa: 	leal	(%rcx,%rcx,4), %ecx
    000000ad: 	movzwl	%dx, %eax
    000000b0: 	pinsrw	$0x1, %r9d, %xmm0
    000000b6: 	punpckldq	%xmm2, %xmm1
    000000ba: 	movd	%r8d, %xmm2
    000000bf: 	addw	data16+18(%rip), %cx
    000000c6: 	punpckldq	%xmm3, %xmm0
    000000ca: 	leal	(%rsi,%rsi), %r9d
    000000ce: 	movdqa	%xmm2, %xmm4
    000000d2: 	addl	$0x37, %ecx
    000000d5: 	punpcklqdq	%xmm0, %xmm1
    000000d9: 	movd	%edi, %xmm0
    000000dd: 	shll	$0x10, %ecx
    000000e0: 	movzwl	data16+12(%rip), %edi
    000000e7: 	movzwl	data16+20(%rip), %edx
    000000ee: 	pinsrw	$0x1, %r10d, %xmm0
    000000f4: 	orl	%ecx, %eax
    000000f6: 	pinsrw	$0x1, data16+6(%rip), %xmm4
    000000ff: 	pinsrw	$0x1, data16+10(%rip), %xmm2
    00000108: 	movd	%edi, %xmm3
    0000010c: 	movl	%eax, data16+16(%rip)
    00000112: 	pinsrw	$0x1, %r9d, %xmm3
    00000118: 	punpckldq	%xmm4, %xmm0
    0000011c: 	leal	0x3c(%rdx,%rsi,4), %esi
    00000120: 	punpckldq	%xmm3, %xmm2
    00000124: 	movw	%si, data16+20(%rip)
    0000012b: 	punpcklqdq	%xmm2, %xmm0
    0000012f: 	paddw	%xmm1, %xmm0
    00000133: 	paddw	DATAat0x15d80(%rip), %xmm0
    0000013b: 	movaps	%xmm0, data16(%rip)
.Ltmp289:
    00000142: 	movq	%rbp, %rsi
    00000145: 	leaq	data16(%rip), %rdi
    0000014c: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 332
    00000151: 	movq	%rbp, %rdi
    00000154: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 340
    00000159: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000160: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000167: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016e: 	je	.Ltmp290 # Offset: 366
.Ltmp291:
    00000170: 	movq	-0x20(%rax), %rbp
    00000174: 	callq	clock@PLT # Offset: 372
    00000179: 	pxor	%xmm0, %xmm0
    0000017d: 	movq	%rax, end_time(%rip)
    00000184: 	movq	%rbp, %rdi
    00000187: 	popq	%rbp
    00000188: 	subq	start_time(%rip), %rax
    0000018f: 	cvtsi2sd	%rax, %xmm0
    00000194: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000019c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp290:
    000001a8: 	movq	-0x8(%rdx), %rax
    000001ac: 	addq	$0x200, %rax
    000001b2: 	jmp	.Ltmp291 # Offset: 434
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_globalIsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_array5_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x8fd0
  Size        : 0x11e
  MaxSize     : 0x120
  Offset      : 0x8fd0
  Section     : .text
  Orc Section : .local.text._Z17test_array5_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pushq	%rbp
    00000007: 	movq	%rdi, %rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movl	init_value(%rip), %ebx
    00000011: 	callq	clock@PLT # Offset: 17
    00000016: 	movl	iterations(%rip), %ecx
    0000001c: 	movq	%rax, start_time(%rip)
    00000023: 	testl	%ecx, %ecx
    00000025: 	jle	.Ltmp292 # Offset: 37
    0000002b: 	leal	-0x1(%rcx), %eax
    0000002e: 	leal	(%rax,%rax,2), %edx
    00000031: 	leal	(%rax,%rdx,4), %edx
    00000034: 	leal	0x34(%rbx,%rdx,4), %r12d
    00000039: 	leal	(%rax,%rax,4), %edx
    0000003c: 	leal	(%rax,%rax,8), %eax
    0000003f: 	leal	0x14(%rbx,%rdx,4), %esi
    00000043: 	leal	0x24(%rbx,%rax,4), %eax
    00000047: 	leal	0x28(%rbx,%rdx,8), %edx
.Ltmp297:
    0000004b: 	leal	(%rcx,%rcx,2), %r8d
    0000004f: 	shll	$0x2, %r8d
    00000053: 	leal	(%r8,%rcx), %edi
    00000057: 	shll	$0x2, %edi
    0000005a: 	addw	init_value(%rip), %di
    00000061: 	movl	%edi, %r9d
    00000064: 	subl	%r8d, %r9d
    00000067: 	cmpw	%r12w, %di
    0000006b: 	jne	.Ltmp293 # Offset: 107
    0000006d: 	cmpw	%dx, %r9w
    00000071: 	jne	.Ltmp293 # Offset: 113
    00000073: 	leal	(,%rcx,4), %edx
    0000007a: 	shll	$0x4, %ecx
    0000007d: 	subl	%edx, %r9d
    00000080: 	movl	%r9d, %edx
    00000083: 	subl	%ecx, %edx
    00000085: 	cmpw	%si, %dx
    00000088: 	jne	.Ltmp293 # Offset: 136
    0000008a: 	cmpw	%ax, %r9w
    0000008e: 	je	.Ltmp294 # Offset: 142
.Ltmp293:
    00000090: 	movq	(%rbp), %rdx
    00000094: 	leaq	DATAat0x158f3(%rip), %rsi
    0000009b: 	movl	$0x1, %edi
    000000a0: 	xorl	%eax, %eax
    000000a2: 	callq	__printf_chk@PLT # Offset: 162
.Ltmp294:
    000000a7: 	movq	%rbp, %rdi
    000000aa: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 170
    000000af: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000b6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000c4: 	je	.Ltmp295 # Offset: 196
.Ltmp296:
    000000c6: 	movq	-0x20(%rax), %rbp
    000000ca: 	callq	clock@PLT # Offset: 202
    000000cf: 	popq	%rbx
    000000d0: 	pxor	%xmm0, %xmm0
    000000d4: 	movq	%rax, end_time(%rip)
    000000db: 	movq	%rbp, %rdi
    000000de: 	popq	%rbp
    000000df: 	subq	start_time(%rip), %rax
    000000e6: 	popq	%r12
    000000e8: 	cvtsi2sd	%rax, %xmm0
    000000ed: 	divsd	DATAat0x15c60(%rip), %xmm0
    000000f5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 245
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp295:
    00000100: 	movq	-0x8(%rdx), %rax
    00000104: 	addq	$0x200, %rax
    0000010a: 	jmp	.Ltmp296 # Offset: 266
    0000010c: 	nopl	(%rax) # Size: 4
.Ltmp292:
    00000110: 	movl	%ebx, %r12d
    00000113: 	movl	%ebx, %esi
    00000115: 	movl	%ebx, %eax
    00000117: 	movl	%ebx, %edx
    00000119: 	jmp	.Ltmp297 # Offset: 281
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_array5_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array11_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x90f0
  Size        : 0x151
  MaxSize     : 0x160
  Offset      : 0x90f0
  Section     : .text
  Orc Section : .local.text._Z18test_array11_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x38, %rsp
    0000000d: 	movl	init_value(%rip), %ebx
    00000013: 	movq	%fs:0x28, %rax
    0000001c: 	movq	%rax, 0x28(%rsp)
    00000021: 	xorl	%eax, %eax
    00000023: 	movd	%ebx, %xmm0
    00000027: 	movl	%ebx, %edx
    00000029: 	movzwl	%bx, %eax
    0000002c: 	movw	%bx, 0x24(%rsp)
    00000031: 	shll	$0x10, %edx
    00000034: 	punpcklwd	%xmm0, %xmm0
    00000038: 	pshufd	$0x0, %xmm0, %xmm0
    0000003d: 	orl	%edx, %eax
    0000003f: 	movl	%eax, 0x20(%rsp)
    00000043: 	movaps	%xmm0, 0x10(%rsp)
    00000048: 	movaps	%xmm0, (%rsp)
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp298 # Offset: 96
    00000062: 	subl	$0x1, %eax
    00000065: 	movdqa	DATAat0x15d80(%rip), %xmm2
    0000006d: 	movdqa	(%rsp), %xmm0
    00000072: 	movl	%eax, %edx
    00000074: 	movd	%eax, %xmm1
    00000078: 	leal	(%rax,%rax,4), %ecx
    0000007b: 	shll	$0x4, %edx
    0000007e: 	punpcklwd	%xmm1, %xmm1
    00000082: 	paddw	%xmm2, %xmm0
    00000086: 	subl	%eax, %edx
    00000088: 	pshufd	$0x0, %xmm1, %xmm1
    0000008d: 	leal	0x3c(%rbx,%rdx,4), %edx
    00000091: 	pmullw	%xmm1, %xmm2
    00000095: 	movw	%dx, 0x24(%rsp)
    0000009a: 	leal	(,%rax,8), %edx
    000000a1: 	subl	%eax, %edx
    000000a3: 	leal	(%rax,%rdx,8), %edx
    000000a6: 	leal	(%rax,%rcx,2), %eax
    000000a9: 	leal	(%rax,%rax,4), %eax
    000000ac: 	leal	0x39(%rdx,%rbx), %edx
    000000b0: 	leal	0x37(%rax,%rbx), %ecx
    000000b4: 	movzwl	%dx, %eax
    000000b7: 	paddw	%xmm2, %xmm0
    000000bb: 	shll	$0x10, %ecx
    000000be: 	movaps	%xmm0, 0x10(%rsp)
    000000c3: 	orl	%ecx, %eax
    000000c5: 	movl	%eax, 0x20(%rsp)
.Ltmp298:
    000000c9: 	leaq	0x10(%rsp), %rdi
    000000ce: 	movq	%rbp, %rsi
    000000d1: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 209
    000000d6: 	movq	%rbp, %rdi
    000000d9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 217
    000000de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000e5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000ec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f3: 	je	.Ltmp299 # Offset: 243
.Ltmp301:
    000000f5: 	movq	-0x20(%rax), %rbp
    000000f9: 	callq	clock@PLT # Offset: 249
    000000fe: 	movq	%rax, end_time(%rip)
    00000105: 	movq	0x28(%rsp), %rdx
    0000010a: 	subq	%fs:0x28, %rdx
    00000113: 	jne	.Ltmp300 # Offset: 275
    00000115: 	subq	start_time(%rip), %rax
    0000011c: 	pxor	%xmm0, %xmm0
    00000120: 	movq	%rbp, %rdi
    00000123: 	cvtsi2sd	%rax, %xmm0
    00000128: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000130: 	addq	$0x38, %rsp
    00000134: 	popq	%rbx
    00000135: 	popq	%rbp
    00000136: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 310
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp299:
    00000140: 	movq	-0x8(%rdx), %rax
    00000144: 	addq	$0x200, %rax
    0000014a: 	jmp	.Ltmp301 # Offset: 330
.Ltmp300:
    0000014c: 	callq	__stack_chk_fail@PLT # Offset: 332
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array11_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_array11_argIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x9250
  Size        : 0x194
  MaxSize     : 0x1a0
  Offset      : 0x9250
  Section     : .text
  Orc Section : .local.text._Z16test_array11_argIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdi, %rbp
    0000000d: 	subq	$0x8, %rsp
    00000011: 	callq	clock@PLT # Offset: 17
    00000016: 	movq	%rax, start_time(%rip)
    0000001d: 	movl	iterations(%rip), %eax
    00000023: 	testl	%eax, %eax
    00000025: 	jle	.Ltmp302 # Offset: 37
    0000002b: 	subl	$0x1, %eax
    0000002e: 	movzwl	0x14(%rbp), %edi
    00000032: 	leal	(%rax,%rax,2), %edx
    00000035: 	movl	%eax, %r9d
    00000038: 	leal	(%rax,%rax,4), %ecx
    0000003b: 	leal	(%rax,%rdx,4), %edx
    0000003e: 	shll	$0x4, %r9d
    00000042: 	leal	(,%rax,8), %esi
    00000049: 	shll	$0x2, %edx
    0000004c: 	subl	%eax, %r9d
    0000004f: 	leal	(%rsi,%rax), %r10d
    00000053: 	subl	%eax, %esi
    00000055: 	movd	%edx, %xmm1
    00000059: 	movzwl	0x4(%rbp), %edx
    0000005d: 	pinsrw	$0x1, 0x2(%rbp), %xmm1
    00000063: 	leal	(,%rcx,4), %r11d
    0000006b: 	movd	%r9d, %xmm3
    00000070: 	pinsrw	$0x1, 0xe(%rbp), %xmm3
    00000076: 	leal	0x3c(%rdi,%r9,4), %edi
    0000007b: 	addl	%r9d, %r9d
    0000007e: 	movd	%edx, %xmm2
    00000082: 	movzwl	0x8(%rbp), %edx
    00000086: 	leal	(,%r10,4), %r8d
    0000008e: 	movw	%di, 0x14(%rbp)
    00000092: 	pinsrw	$0x1, %r11d, %xmm2
    00000098: 	movd	%edx, %xmm0
    0000009c: 	movzwl	(%rbp), %edx
    000000a0: 	punpckldq	%xmm2, %xmm1
    000000a4: 	movd	%r8d, %xmm2
    000000a9: 	pinsrw	$0x1, %r10d, %xmm0
    000000af: 	movdqa	%xmm2, %xmm4
    000000b3: 	leal	(,%rcx,8), %r10d
    000000bb: 	punpckldq	%xmm3, %xmm0
    000000bf: 	pinsrw	$0x1, 0x6(%rbp), %xmm4
    000000c5: 	pinsrw	$0x1, 0xa(%rbp), %xmm2
    000000cb: 	punpcklqdq	%xmm0, %xmm1
    000000cf: 	movd	%edx, %xmm0
    000000d3: 	movzwl	0xc(%rbp), %edx
    000000d7: 	leal	(%rax,%rcx,2), %ecx
    000000da: 	pinsrw	$0x1, %r10d, %xmm0
    000000e0: 	leal	(%rcx,%rcx,4), %ecx
    000000e3: 	leal	(%rax,%rsi,8), %eax
    000000e6: 	addw	0x12(%rbp), %cx
    000000ea: 	movd	%edx, %xmm3
    000000ee: 	addw	0x10(%rbp), %ax
    000000f2: 	punpckldq	%xmm4, %xmm0
    000000f6: 	addl	$0x37, %ecx
    000000f9: 	pinsrw	$0x1, %r9d, %xmm3
    000000ff: 	addl	$0x39, %eax
    00000102: 	movw	%cx, 0x12(%rbp)
    00000106: 	punpckldq	%xmm3, %xmm2
    0000010a: 	movw	%ax, 0x10(%rbp)
    0000010e: 	punpcklqdq	%xmm2, %xmm0
    00000112: 	paddw	%xmm1, %xmm0
    00000116: 	paddw	DATAat0x15d80(%rip), %xmm0
    0000011e: 	movups	%xmm0, (%rbp)
.Ltmp302:
    00000122: 	movq	%r12, %rsi
    00000125: 	movq	%rbp, %rdi
    00000128: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 296
    0000012d: 	movq	%r12, %rdi
    00000130: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 304
    00000135: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000013c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000143: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014a: 	je	.Ltmp303 # Offset: 330
.Ltmp304:
    0000014c: 	movq	-0x20(%rax), %rbp
    00000150: 	callq	clock@PLT # Offset: 336
    00000155: 	pxor	%xmm0, %xmm0
    00000159: 	movq	%rax, end_time(%rip)
    00000160: 	subq	start_time(%rip), %rax
    00000167: 	movq	%rbp, %rdi
    0000016a: 	cvtsi2sd	%rax, %xmm0
    0000016f: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000177: 	addq	$0x8, %rsp
    0000017b: 	popq	%rbp
    0000017c: 	popq	%r12
    0000017e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 382
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp303:
    00000188: 	movq	-0x8(%rdx), %rax
    0000018c: 	addq	$0x200, %rax
    00000192: 	jmp	.Ltmp304 # Offset: 402
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_array11_argIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global2IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x93f0
  Size        : 0x32c
  MaxSize     : 0x330
  Offset      : 0x93f0
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global2IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x18(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	callq	clock@PLT # Offset: 37
    0000002a: 	movdqa	data16(%rip), %xmm0
    00000032: 	movzwl	data16(%rip), %r12d
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movzwl	data16+6(%rip), %eax
    00000048: 	movzwl	data16+2(%rip), %r14d
    00000050: 	movzwl	data16+4(%rip), %r8d
    00000058: 	movw	%ax, 0x4(%rsp)
    0000005d: 	movzwl	data16+10(%rip), %eax
    00000064: 	movzwl	data16+8(%rip), %esi
    0000006b: 	movzwl	data16+12(%rip), %r15d
    00000073: 	movw	%ax, 0x6(%rsp)
    00000078: 	movl	iterations(%rip), %eax
    0000007e: 	movzwl	data16+14(%rip), %r13d
    00000086: 	movzwl	data16+16(%rip), %ebx
    0000008d: 	movzwl	data16+18(%rip), %r11d
    00000095: 	movzwl	data16+20(%rip), %r10d
    0000009d: 	testl	%eax, %eax
    0000009f: 	jle	.Ltmp305 # Offset: 159
    000000a5: 	subl	$0x1, %eax
    000000a8: 	movd	%r8d, %xmm2
    000000ad: 	movd	%esi, %xmm0
    000000b1: 	leal	(,%rax,8), %r9d
    000000b9: 	movl	%eax, %edi
    000000bb: 	movl	%r9d, %edx
    000000be: 	addl	%eax, %r9d
    000000c1: 	shll	$0x4, %edi
    000000c4: 	subl	%eax, %edx
    000000c6: 	leal	(,%r9,4), %ecx
    000000ce: 	subl	%eax, %edi
    000000d0: 	leal	(%rax,%rdx,8), %edx
    000000d3: 	movw	%cx, 0x8(%rsp)
    000000d8: 	movd	%edi, %xmm3
    000000dc: 	leal	0x3c(%r10,%rdi,4), %r10d
    000000e1: 	leal	0x39(%rbx,%rdx), %ebx
    000000e5: 	leal	(%rax,%rax,2), %edx
    000000e8: 	pinsrw	$0x1, %r13d, %xmm3
    000000ee: 	addl	%edi, %edi
    000000f0: 	leal	(%rax,%rdx,4), %edx
    000000f3: 	pinsrw	$0x1, %r9d, %xmm0
    000000f9: 	leal	(,%rdx,4), %ecx
    00000100: 	punpckldq	%xmm3, %xmm0
    00000104: 	movd	%r15d, %xmm3
    00000109: 	movw	%cx, 0xc(%rsp)
    0000010e: 	leal	(%rax,%rax,4), %ecx
    00000111: 	pinsrw	$0x1, %edi, %xmm3
    00000116: 	leal	(,%rcx,4), %edx
    0000011d: 	pinsrw	$0x1, %edx, %xmm2
    00000122: 	leal	(,%rcx,8), %edx
    00000129: 	leal	(%rax,%rcx,2), %ecx
    0000012c: 	movd	0xc(%rsp), %xmm1
    00000132: 	leal	(%rcx,%rcx,4), %ecx
    00000135: 	pinsrw	$0x1, %r14d, %xmm1
    0000013b: 	leal	0x37(%r11,%rcx), %r11d
    00000140: 	punpckldq	%xmm2, %xmm1
    00000144: 	movd	0x8(%rsp), %xmm2
    0000014a: 	punpcklqdq	%xmm0, %xmm1
    0000014e: 	movdqa	%xmm2, %xmm4
    00000152: 	movd	%r12d, %xmm0
    00000157: 	pinsrw	$0x1, 0x4(%rsp), %xmm4
    0000015e: 	pinsrw	$0x1, 0x6(%rsp), %xmm2
    00000165: 	pinsrw	$0x1, %edx, %xmm0
    0000016a: 	punpckldq	%xmm4, %xmm0
    0000016e: 	punpckldq	%xmm3, %xmm2
    00000172: 	punpcklqdq	%xmm2, %xmm0
    00000176: 	paddw	%xmm1, %xmm0
    0000017a: 	paddw	DATAat0x15d80(%rip), %xmm0
.Ltmp305:
    00000182: 	movq	%rbp, %rsi
    00000185: 	leaq	data16(%rip), %rdi
    0000018c: 	movw	%bx, data16+16(%rip)
    00000193: 	movw	%r11w, data16+18(%rip)
    0000019b: 	movw	%r10w, data16+20(%rip)
    000001a3: 	movaps	%xmm0, data16(%rip)
    000001aa: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 426
    000001af: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001bd: 	subq	$0x20, %rax
    000001c1: 	cmpq	%rax, %rbx
    000001c4: 	je	.Ltmp306 # Offset: 452
    000001ca: 	leaq	0x10(%rbx), %rdi
    000001ce: 	movq	0x8(%rbp), %r12
    000001d2: 	movq	%rdi, (%rbx)
    000001d5: 	movq	(%rbp), %r13
    000001d9: 	movq	%r13, %rax
    000001dc: 	addq	%r12, %rax
    000001df: 	je	.Ltmp307 # Offset: 479
    000001e1: 	testq	%r13, %r13
    000001e4: 	je	.Ltmp308 # Offset: 484
.Ltmp307:
    000001ea: 	movq	%r12, 0x10(%rsp)
    000001ef: 	cmpq	$0xf, %r12
    000001f3: 	ja	.Ltmp309 # Offset: 499
    000001f9: 	cmpq	$0x1, %r12
    000001fd: 	jne	.Ltmp310 # Offset: 509
    00000203: 	movzbl	(%r13), %eax
    00000208: 	movb	%al, 0x10(%rbx)
.Ltmp313:
    0000020b: 	movq	%r12, 0x8(%rbx)
    0000020f: 	movb	$0x0, (%rdi,%r12)
    00000214: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000222: 	addq	$0x20, %rax
    00000226: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000234: 	je	.Ltmp311 # Offset: 564
.Ltmp314:
    0000023a: 	movq	-0x20(%rax), %rbp
    0000023e: 	callq	clock@PLT # Offset: 574
    00000243: 	movq	%rax, end_time(%rip)
    0000024a: 	movq	0x18(%rsp), %rdx
    0000024f: 	subq	%fs:0x28, %rdx
    00000258: 	jne	.Ltmp312 # Offset: 600
    0000025e: 	subq	start_time(%rip), %rax
    00000265: 	pxor	%xmm0, %xmm0
    00000269: 	movq	%rbp, %rdi
    0000026c: 	cvtsi2sd	%rax, %xmm0
    00000271: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000279: 	addq	$0x28, %rsp
    0000027d: 	popq	%rbx
    0000027e: 	popq	%rbp
    0000027f: 	popq	%r12
    00000281: 	popq	%r13
    00000283: 	popq	%r14
    00000285: 	popq	%r15
    00000287: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 647
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp309:
    00000290: 	movq	%rbx, %rdi
    00000293: 	leaq	0x10(%rsp), %rsi
    00000298: 	xorl	%edx, %edx
    0000029a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 666
    0000029f: 	movq	%rax, (%rbx)
    000002a2: 	movq	%rax, %rdi
    000002a5: 	movq	0x10(%rsp), %rax
    000002aa: 	movq	%rax, 0x10(%rbx)
.Ltmp315:
    000002ae: 	movq	%r12, %rdx
    000002b1: 	movq	%r13, %rsi
    000002b4: 	callq	memcpy@PLT # Offset: 692
    000002b9: 	movq	0x10(%rsp), %r12
    000002be: 	movq	(%rbx), %rdi
    000002c1: 	jmp	.Ltmp313 # Offset: 705
    000002c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp306:
    000002d0: 	movq	%rbp, %rsi
    000002d3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 730
    000002df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002ed: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002f4: 	jne	.Ltmp314 # Offset: 756
.Ltmp311:
    000002fa: 	movq	-0x8(%rdx), %rax
    000002fe: 	addq	$0x200, %rax
    00000304: 	jmp	.Ltmp314 # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp310:
    00000310: 	testq	%r12, %r12
    00000313: 	je	.Ltmp313 # Offset: 787
    00000319: 	jmp	.Ltmp315 # Offset: 793
.Ltmp312:
    0000031b: 	callq	__stack_chk_fail@PLT # Offset: 795
.Ltmp308:
    00000320: 	leaq	DATAat0x15008(%rip), %rdi
    00000327: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 807
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global2IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_array11_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x9720
  Size        : 0x2c4
  MaxSize     : 0x2d0
  Offset      : 0x9720
  Section     : .text
  Orc Section : .local.text._Z17test_array11_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	subq	$0x10, %rsp
    00000013: 	movq	%fs:0x28, %rax
    0000001c: 	movq	%rax, 0x8(%rsp)
    00000021: 	xorl	%eax, %eax
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	0x8(%rbp), %rsi
    0000002c: 	movdqu	0x10(%rbp), %xmm6
    00000031: 	movdqu	0x20(%rbp), %xmm5
    00000036: 	movq	0x50(%rbp), %rcx
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movl	iterations(%rip), %eax
    00000047: 	movdqu	(%rbp), %xmm2
    0000004c: 	movq	(%rbp), %rdi
    00000050: 	movdqu	0x30(%rbp), %xmm4
    00000055: 	movdqu	0x40(%rbp), %xmm3
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp316 # Offset: 92
    00000062: 	leal	-0x1(%rax), %edx
    00000065: 	pcmpeqd	%xmm1, %xmm1
    00000069: 	leaq	(%rdx,%rdx,2), %r8
    0000006d: 	leaq	(%rdx,%r8,4), %r8
    00000071: 	leaq	(%rdi,%r8,4), %rdi
    00000075: 	movq	%rdi, %xmm2
    0000007a: 	leaq	(%rdx,%rdx,4), %rdi
    0000007e: 	leaq	(%rsi,%rdi,8), %rsi
    00000082: 	movq	%rsi, %xmm7
    00000087: 	punpcklqdq	%xmm7, %xmm2
    0000008b: 	movd	%eax, %xmm7
    0000008f: 	movq	%rdx, %rax
    00000092: 	pshufd	$0x0, %xmm7, %xmm0
    00000097: 	shlq	$0x4, %rax
    0000009b: 	paddq	DATAat0x15cf0(%rip), %xmm2
    000000a3: 	paddd	%xmm1, %xmm0
    000000a7: 	movdqa	DATAat0x15d90(%rip), %xmm1
    000000af: 	subq	%rdx, %rax
    000000b2: 	movdqa	%xmm0, %xmm7
    000000b6: 	leaq	0x3c(%rcx,%rax,4), %rcx
    000000bb: 	movdqa	%xmm1, %xmm8
    000000c0: 	punpckldq	%xmm0, %xmm7
    000000c4: 	punpckhdq	%xmm0, %xmm0
    000000c8: 	punpckldq	%xmm1, %xmm8
    000000cd: 	punpckhdq	%xmm1, %xmm1
    000000d1: 	pmuludq	%xmm0, %xmm1
    000000d5: 	pmuludq	%xmm7, %xmm8
    000000da: 	paddq	DATAat0x15d10(%rip), %xmm1
    000000e2: 	paddq	DATAat0x15d00(%rip), %xmm8
    000000eb: 	paddq	%xmm1, %xmm5
    000000ef: 	movdqa	DATAat0x15da0(%rip), %xmm1
    000000f7: 	paddq	%xmm8, %xmm6
    000000fc: 	movdqa	%xmm1, %xmm8
    00000101: 	punpckldq	%xmm1, %xmm8
    00000106: 	punpckhdq	%xmm1, %xmm1
    0000010a: 	pmuludq	%xmm8, %xmm7
    0000010f: 	pmuludq	%xmm1, %xmm0
    00000113: 	paddq	DATAat0x15d20(%rip), %xmm7
    0000011b: 	paddq	DATAat0x15d30(%rip), %xmm0
    00000123: 	paddq	%xmm7, %xmm4
    00000127: 	paddq	%xmm0, %xmm3
.Ltmp316:
    0000012b: 	movq	%rcx, 0x50(%rbp)
    0000012f: 	movq	%rbp, %rdi
    00000132: 	movq	%r12, %rsi
    00000135: 	movups	%xmm2, (%rbp)
    00000139: 	movups	%xmm6, 0x10(%rbp)
    0000013d: 	movups	%xmm5, 0x20(%rbp)
    00000141: 	movups	%xmm4, 0x30(%rbp)
    00000145: 	movups	%xmm3, 0x40(%rbp)
    00000149: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 329
    0000014e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000015c: 	subq	$0x20, %rax
    00000160: 	cmpq	%rax, %rbp
    00000163: 	je	.Ltmp317 # Offset: 355
    00000169: 	leaq	0x10(%rbp), %rdi
    0000016d: 	movq	%rdi, (%rbp)
    00000171: 	movq	(%r12), %r13
    00000175: 	movq	0x8(%r12), %r12
    0000017a: 	movq	%r13, %rax
    0000017d: 	addq	%r12, %rax
    00000180: 	je	.Ltmp318 # Offset: 384
    00000182: 	testq	%r13, %r13
    00000185: 	je	.Ltmp319 # Offset: 389
.Ltmp318:
    0000018b: 	movq	%r12, (%rsp)
    0000018f: 	cmpq	$0xf, %r12
    00000193: 	ja	.Ltmp320 # Offset: 403
    00000199: 	cmpq	$0x1, %r12
    0000019d: 	jne	.Ltmp321 # Offset: 413
    000001a3: 	movzbl	(%r13), %eax
    000001a8: 	movb	%al, 0x10(%rbp)
.Ltmp324:
    000001ab: 	movq	%r12, 0x8(%rbp)
    000001af: 	movb	$0x0, (%rdi,%r12)
    000001b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001bb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c2: 	addq	$0x20, %rax
    000001c6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001cd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001d4: 	je	.Ltmp322 # Offset: 468
.Ltmp325:
    000001da: 	movq	-0x20(%rax), %rbp
    000001de: 	callq	clock@PLT # Offset: 478
    000001e3: 	movq	%rax, end_time(%rip)
    000001ea: 	movq	0x8(%rsp), %rdx
    000001ef: 	subq	%fs:0x28, %rdx
    000001f8: 	jne	.Ltmp323 # Offset: 504
    000001fe: 	subq	start_time(%rip), %rax
    00000205: 	pxor	%xmm0, %xmm0
    00000209: 	movq	%rbp, %rdi
    0000020c: 	cvtsi2sd	%rax, %xmm0
    00000211: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000219: 	addq	$0x10, %rsp
    0000021d: 	popq	%rbp
    0000021e: 	popq	%r12
    00000220: 	popq	%r13
    00000222: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 546
    00000227: 	nopw	(%rax,%rax) # Size: 9
.Ltmp320:
    00000230: 	movq	%rbp, %rdi
    00000233: 	movq	%rsp, %rsi
    00000236: 	xorl	%edx, %edx
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%rbp)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%rbp)
.Ltmp326:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r13, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%rbp), %rdi
    0000025f: 	jmp	.Ltmp324 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp317:
    00000268: 	movq	%r12, %rsi
    0000026b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000272: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 626
    00000277: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000285: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028c: 	jne	.Ltmp325 # Offset: 652
.Ltmp322:
    00000292: 	movq	-0x8(%rdx), %rax
    00000296: 	addq	$0x200, %rax
    0000029c: 	jmp	.Ltmp325 # Offset: 668
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp321:
    000002a8: 	testq	%r12, %r12
    000002ab: 	je	.Ltmp324 # Offset: 683
    000002b1: 	jmp	.Ltmp326 # Offset: 689
.Ltmp323:
    000002b3: 	callq	__stack_chk_fail@PLT # Offset: 691
.Ltmp319:
    000002b8: 	leaq	DATAat0x15008(%rip), %rdi
    000002bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 703
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_array11_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global1IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x99f0
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x99f0
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global1IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	data32(%rip), %xmm5
    0000002e: 	movdqa	data32+16(%rip), %xmm4
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movl	data32+32(%rip), %esi
    00000049: 	movl	data32+36(%rip), %ecx
    0000004f: 	movl	data32+40(%rip), %edx
    00000055: 	testl	%eax, %eax
    00000057: 	jle	.Ltmp327 # Offset: 87
    00000059: 	movd	%eax, %xmm6
    0000005d: 	movdqa	DATAat0x15d40(%rip), %xmm1
    00000065: 	imull	$0x39, %eax, %edi
    00000068: 	pshufd	$0x0, %xmm6, %xmm0
    0000006d: 	movdqa	%xmm0, %xmm3
    00000071: 	movdqa	%xmm0, %xmm2
    00000075: 	pmuludq	%xmm1, %xmm3
    00000079: 	psrlq	$0x20, %xmm2
    0000007e: 	addl	%edi, %esi
    00000080: 	psrlq	$0x20, %xmm1
    00000085: 	imull	$0x37, %eax, %edi
    00000088: 	pmuludq	%xmm2, %xmm1
    0000008c: 	imull	$0x3c, %eax, %eax
    0000008f: 	addl	%edi, %ecx
    00000091: 	pshufd	$0x8, %xmm3, %xmm3
    00000096: 	addl	%eax, %edx
    00000098: 	pshufd	$0x8, %xmm1, %xmm1
    0000009d: 	punpckldq	%xmm1, %xmm3
    000000a1: 	movdqa	DATAat0x15d50(%rip), %xmm1
    000000a9: 	paddd	%xmm3, %xmm5
    000000ad: 	pmuludq	%xmm1, %xmm0
    000000b1: 	psrlq	$0x20, %xmm1
    000000b6: 	pmuludq	%xmm1, %xmm2
    000000ba: 	pshufd	$0x8, %xmm0, %xmm0
    000000bf: 	pshufd	$0x8, %xmm2, %xmm2
    000000c4: 	punpckldq	%xmm2, %xmm0
    000000c8: 	paddd	%xmm0, %xmm4
.Ltmp327:
    000000cc: 	movl	%esi, data32+32(%rip)
    000000d2: 	leaq	data32(%rip), %rdi
    000000d9: 	movq	%rbp, %rsi
    000000dc: 	movl	%ecx, data32+36(%rip)
    000000e2: 	movl	%edx, data32+40(%rip)
    000000e8: 	movaps	%xmm5, data32(%rip)
    000000ef: 	movaps	%xmm4, data32+16(%rip)
    000000f6: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 246
    000000fb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000102: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000109: 	subq	$0x20, %rax
    0000010d: 	cmpq	%rax, %rbx
    00000110: 	je	.Ltmp328 # Offset: 272
    00000116: 	leaq	0x10(%rbx), %rdi
    0000011a: 	movq	0x8(%rbp), %r12
    0000011e: 	movq	%rdi, (%rbx)
    00000121: 	movq	(%rbp), %r13
    00000125: 	movq	%r13, %rax
    00000128: 	addq	%r12, %rax
    0000012b: 	je	.Ltmp329 # Offset: 299
    0000012d: 	testq	%r13, %r13
    00000130: 	je	.Ltmp330 # Offset: 304
.Ltmp329:
    00000136: 	movq	%r12, (%rsp)
    0000013a: 	cmpq	$0xf, %r12
    0000013e: 	ja	.Ltmp331 # Offset: 318
    00000144: 	cmpq	$0x1, %r12
    00000148: 	jne	.Ltmp332 # Offset: 328
    0000014e: 	movzbl	(%r13), %eax
    00000153: 	movb	%al, 0x10(%rbx)
.Ltmp335:
    00000156: 	movq	%r12, 0x8(%rbx)
    0000015a: 	movb	$0x0, (%rdi,%r12)
    0000015f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000166: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016d: 	addq	$0x20, %rax
    00000171: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000178: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017f: 	je	.Ltmp333 # Offset: 383
.Ltmp336:
    00000185: 	movq	-0x20(%rax), %rbp
    00000189: 	callq	clock@PLT # Offset: 393
    0000018e: 	movq	%rax, end_time(%rip)
    00000195: 	movq	0x8(%rsp), %rdx
    0000019a: 	subq	%fs:0x28, %rdx
    000001a3: 	jne	.Ltmp334 # Offset: 419
    000001a9: 	subq	start_time(%rip), %rax
    000001b0: 	pxor	%xmm0, %xmm0
    000001b4: 	movq	%rbp, %rdi
    000001b7: 	cvtsi2sd	%rax, %xmm0
    000001bc: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001c4: 	addq	$0x18, %rsp
    000001c8: 	popq	%rbx
    000001c9: 	popq	%rbp
    000001ca: 	popq	%r12
    000001cc: 	popq	%r13
    000001ce: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 462
    000001d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp331:
    000001d8: 	movq	%rbx, %rdi
    000001db: 	movq	%rsp, %rsi
    000001de: 	xorl	%edx, %edx
    000001e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 480
    000001e5: 	movq	%rax, (%rbx)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	(%rsp), %rax
    000001ef: 	movq	%rax, 0x10(%rbx)
.Ltmp337:
    000001f3: 	movq	%r12, %rdx
    000001f6: 	movq	%r13, %rsi
    000001f9: 	callq	memcpy@PLT # Offset: 505
    000001fe: 	movq	(%rsp), %r12
    00000202: 	movq	(%rbx), %rdi
    00000205: 	jmp	.Ltmp335 # Offset: 517
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp328:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp336 # Offset: 564
.Ltmp333:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp336 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp332:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp335 # Offset: 595
    00000259: 	jmp	.Ltmp337 # Offset: 601
.Ltmp334:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp330:
    00000260: 	leaq	DATAat0x15008(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global1IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global2IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x9c60
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x9c60
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global2IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	data32(%rip), %xmm5
    0000002e: 	movdqa	data32+16(%rip), %xmm4
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movl	data32+32(%rip), %esi
    00000049: 	movl	data32+36(%rip), %ecx
    0000004f: 	movl	data32+40(%rip), %edx
    00000055: 	testl	%eax, %eax
    00000057: 	jle	.Ltmp338 # Offset: 87
    00000059: 	movd	%eax, %xmm6
    0000005d: 	movdqa	DATAat0x15d40(%rip), %xmm1
    00000065: 	imull	$0x39, %eax, %edi
    00000068: 	pshufd	$0x0, %xmm6, %xmm0
    0000006d: 	movdqa	%xmm0, %xmm3
    00000071: 	movdqa	%xmm0, %xmm2
    00000075: 	pmuludq	%xmm1, %xmm3
    00000079: 	psrlq	$0x20, %xmm2
    0000007e: 	addl	%edi, %esi
    00000080: 	psrlq	$0x20, %xmm1
    00000085: 	imull	$0x3c, %eax, %edi
    00000088: 	pmuludq	%xmm2, %xmm1
    0000008c: 	imull	$0x37, %eax, %eax
    0000008f: 	addl	%edi, %edx
    00000091: 	pshufd	$0x8, %xmm3, %xmm3
    00000096: 	addl	%eax, %ecx
    00000098: 	pshufd	$0x8, %xmm1, %xmm1
    0000009d: 	punpckldq	%xmm1, %xmm3
    000000a1: 	movdqa	DATAat0x15d50(%rip), %xmm1
    000000a9: 	paddd	%xmm3, %xmm5
    000000ad: 	pmuludq	%xmm1, %xmm0
    000000b1: 	psrlq	$0x20, %xmm1
    000000b6: 	pmuludq	%xmm1, %xmm2
    000000ba: 	pshufd	$0x8, %xmm0, %xmm0
    000000bf: 	pshufd	$0x8, %xmm2, %xmm2
    000000c4: 	punpckldq	%xmm2, %xmm0
    000000c8: 	paddd	%xmm0, %xmm4
.Ltmp338:
    000000cc: 	movl	%esi, data32+32(%rip)
    000000d2: 	leaq	data32(%rip), %rdi
    000000d9: 	movq	%rbp, %rsi
    000000dc: 	movl	%ecx, data32+36(%rip)
    000000e2: 	movl	%edx, data32+40(%rip)
    000000e8: 	movaps	%xmm5, data32(%rip)
    000000ef: 	movaps	%xmm4, data32+16(%rip)
    000000f6: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 246
    000000fb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000102: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000109: 	subq	$0x20, %rax
    0000010d: 	cmpq	%rax, %rbx
    00000110: 	je	.Ltmp339 # Offset: 272
    00000116: 	leaq	0x10(%rbx), %rdi
    0000011a: 	movq	0x8(%rbp), %r12
    0000011e: 	movq	%rdi, (%rbx)
    00000121: 	movq	(%rbp), %r13
    00000125: 	movq	%r13, %rax
    00000128: 	addq	%r12, %rax
    0000012b: 	je	.Ltmp340 # Offset: 299
    0000012d: 	testq	%r13, %r13
    00000130: 	je	.Ltmp341 # Offset: 304
.Ltmp340:
    00000136: 	movq	%r12, (%rsp)
    0000013a: 	cmpq	$0xf, %r12
    0000013e: 	ja	.Ltmp342 # Offset: 318
    00000144: 	cmpq	$0x1, %r12
    00000148: 	jne	.Ltmp343 # Offset: 328
    0000014e: 	movzbl	(%r13), %eax
    00000153: 	movb	%al, 0x10(%rbx)
.Ltmp346:
    00000156: 	movq	%r12, 0x8(%rbx)
    0000015a: 	movb	$0x0, (%rdi,%r12)
    0000015f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000166: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016d: 	addq	$0x20, %rax
    00000171: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000178: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017f: 	je	.Ltmp344 # Offset: 383
.Ltmp347:
    00000185: 	movq	-0x20(%rax), %rbp
    00000189: 	callq	clock@PLT # Offset: 393
    0000018e: 	movq	%rax, end_time(%rip)
    00000195: 	movq	0x8(%rsp), %rdx
    0000019a: 	subq	%fs:0x28, %rdx
    000001a3: 	jne	.Ltmp345 # Offset: 419
    000001a9: 	subq	start_time(%rip), %rax
    000001b0: 	pxor	%xmm0, %xmm0
    000001b4: 	movq	%rbp, %rdi
    000001b7: 	cvtsi2sd	%rax, %xmm0
    000001bc: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001c4: 	addq	$0x18, %rsp
    000001c8: 	popq	%rbx
    000001c9: 	popq	%rbp
    000001ca: 	popq	%r12
    000001cc: 	popq	%r13
    000001ce: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 462
    000001d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp342:
    000001d8: 	movq	%rbx, %rdi
    000001db: 	movq	%rsp, %rsi
    000001de: 	xorl	%edx, %edx
    000001e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 480
    000001e5: 	movq	%rax, (%rbx)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	(%rsp), %rax
    000001ef: 	movq	%rax, 0x10(%rbx)
.Ltmp348:
    000001f3: 	movq	%r12, %rdx
    000001f6: 	movq	%r13, %rsi
    000001f9: 	callq	memcpy@PLT # Offset: 505
    000001fe: 	movq	(%rsp), %r12
    00000202: 	movq	(%rbx), %rdi
    00000205: 	jmp	.Ltmp346 # Offset: 517
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp339:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp347 # Offset: 564
.Ltmp344:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp347 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp343:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp346 # Offset: 595
    00000259: 	jmp	.Ltmp348 # Offset: 601
.Ltmp345:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp341:
    00000260: 	leaq	DATAat0x15008(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global2IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global1IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x9ed0
  Size        : 0x31c
  MaxSize     : 0x320
  Offset      : 0x9ed0
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global1IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x18(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	callq	clock@PLT # Offset: 37
    0000002a: 	movdqa	data16(%rip), %xmm0
    00000032: 	movzwl	data16+2(%rip), %r14d
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movzwl	data16(%rip), %eax
    00000048: 	movzwl	data16+4(%rip), %edi
    0000004f: 	movzwl	data16+6(%rip), %r13d
    00000057: 	movw	%ax, 0x4(%rsp)
    0000005c: 	movzwl	data16+12(%rip), %eax
    00000063: 	movzwl	data16+8(%rip), %ecx
    0000006a: 	movzwl	data16+10(%rip), %r12d
    00000072: 	movw	%ax, 0x8(%rsp)
    00000077: 	movl	iterations(%rip), %eax
    0000007d: 	movzwl	data16+14(%rip), %r15d
    00000085: 	movzwl	data16+16(%rip), %r11d
    0000008d: 	movzwl	data16+18(%rip), %r10d
    00000095: 	movzwl	data16+20(%rip), %r9d
    0000009d: 	testl	%eax, %eax
    0000009f: 	jle	.Ltmp349 # Offset: 159
    000000a5: 	movd	%edi, %xmm2
    000000a9: 	movd	%ecx, %xmm0
    000000ad: 	movd	0x4(%rsp), %xmm1
    000000b3: 	subl	$0x1, %eax
    000000b6: 	leal	(,%rax,8), %esi
    000000bd: 	pinsrw	$0x1, %r13d, %xmm2
    000000c3: 	pinsrw	$0x1, %r14d, %xmm1
    000000c9: 	leal	(%rsi,%rax), %ebx
    000000cc: 	leal	(%rax,%rax,4), %ecx
    000000cf: 	punpckldq	%xmm2, %xmm1
    000000d3: 	subl	%eax, %esi
    000000d5: 	leal	(,%rbx,4), %r8d
    000000dd: 	pinsrw	$0x1, %ebx, %xmm0
    000000e2: 	leal	(,%rcx,4), %edi
    000000e9: 	movw	%r8w, 0xc(%rsp)
    000000ef: 	movl	%eax, %r8d
    000000f2: 	leal	(,%rcx,8), %ebx
    000000f9: 	leal	(%rax,%rcx,2), %ecx
    000000fc: 	shll	$0x4, %r8d
    00000100: 	leal	(%rax,%rsi,8), %esi
    00000103: 	leal	(%rcx,%rcx,4), %ecx
    00000106: 	subl	%eax, %r8d
    00000109: 	leal	0x39(%r11,%rsi), %r11d
    0000010e: 	leal	0x37(%r10,%rcx), %r10d
    00000113: 	leal	(%r8,%r8), %edx
    00000117: 	movd	%r8d, %xmm3
    0000011c: 	movd	0xc(%rsp), %xmm2
    00000122: 	pinsrw	$0x1, %edx, %xmm3
    00000127: 	leal	(%rax,%rax,2), %edx
    0000012a: 	movdqa	%xmm2, %xmm4
    0000012e: 	leal	(%rax,%rdx,4), %edx
    00000131: 	punpckldq	%xmm3, %xmm0
    00000135: 	movd	0x8(%rsp), %xmm3
    0000013b: 	shll	$0x2, %edx
    0000013e: 	punpcklqdq	%xmm0, %xmm1
    00000142: 	pinsrw	$0x1, %edi, %xmm4
    00000147: 	movd	%edx, %xmm0
    0000014b: 	pinsrw	$0x1, %r12d, %xmm2
    00000151: 	pinsrw	$0x1, %r15d, %xmm3
    00000157: 	pinsrw	$0x1, %ebx, %xmm0
    0000015c: 	punpckldq	%xmm3, %xmm2
    00000160: 	leal	0x3c(%r9,%r8,4), %r9d
    00000165: 	punpckldq	%xmm4, %xmm0
    00000169: 	punpcklqdq	%xmm2, %xmm0
    0000016d: 	paddw	%xmm1, %xmm0
    00000171: 	paddw	DATAat0x15d80(%rip), %xmm0
.Ltmp349:
    00000179: 	movq	%rbp, %rsi
    0000017c: 	leaq	data16(%rip), %rdi
    00000183: 	movw	%r11w, data16+16(%rip)
    0000018b: 	movw	%r10w, data16+18(%rip)
    00000193: 	movw	%r9w, data16+20(%rip)
    0000019b: 	movaps	%xmm0, data16(%rip)
    000001a2: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 418
    000001a7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001ae: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001b5: 	subq	$0x20, %rax
    000001b9: 	cmpq	%rax, %rbx
    000001bc: 	je	.Ltmp350 # Offset: 444
    000001c2: 	leaq	0x10(%rbx), %rdi
    000001c6: 	movq	0x8(%rbp), %r12
    000001ca: 	movq	%rdi, (%rbx)
    000001cd: 	movq	(%rbp), %r13
    000001d1: 	movq	%r13, %rax
    000001d4: 	addq	%r12, %rax
    000001d7: 	je	.Ltmp351 # Offset: 471
    000001d9: 	testq	%r13, %r13
    000001dc: 	je	.Ltmp352 # Offset: 476
.Ltmp351:
    000001e2: 	movq	%r12, 0x10(%rsp)
    000001e7: 	cmpq	$0xf, %r12
    000001eb: 	ja	.Ltmp353 # Offset: 491
    000001f1: 	cmpq	$0x1, %r12
    000001f5: 	jne	.Ltmp354 # Offset: 501
    000001fb: 	movzbl	(%r13), %eax
    00000200: 	movb	%al, 0x10(%rbx)
.Ltmp357:
    00000203: 	movq	%r12, 0x8(%rbx)
    00000207: 	movb	$0x0, (%rdi,%r12)
    0000020c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000213: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021a: 	addq	$0x20, %rax
    0000021e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000225: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000022c: 	je	.Ltmp355 # Offset: 556
.Ltmp358:
    00000232: 	movq	-0x20(%rax), %rbp
    00000236: 	callq	clock@PLT # Offset: 566
    0000023b: 	movq	%rax, end_time(%rip)
    00000242: 	movq	0x18(%rsp), %rdx
    00000247: 	subq	%fs:0x28, %rdx
    00000250: 	jne	.Ltmp356 # Offset: 592
    00000256: 	subq	start_time(%rip), %rax
    0000025d: 	pxor	%xmm0, %xmm0
    00000261: 	movq	%rbp, %rdi
    00000264: 	cvtsi2sd	%rax, %xmm0
    00000269: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000271: 	addq	$0x28, %rsp
    00000275: 	popq	%rbx
    00000276: 	popq	%rbp
    00000277: 	popq	%r12
    00000279: 	popq	%r13
    0000027b: 	popq	%r14
    0000027d: 	popq	%r15
    0000027f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 639
    00000284: 	nopl	(%rax) # Size: 4
.Ltmp353:
    00000288: 	movq	%rbx, %rdi
    0000028b: 	leaq	0x10(%rsp), %rsi
    00000290: 	xorl	%edx, %edx
    00000292: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 658
    00000297: 	movq	%rax, (%rbx)
    0000029a: 	movq	%rax, %rdi
    0000029d: 	movq	0x10(%rsp), %rax
    000002a2: 	movq	%rax, 0x10(%rbx)
.Ltmp359:
    000002a6: 	movq	%r12, %rdx
    000002a9: 	movq	%r13, %rsi
    000002ac: 	callq	memcpy@PLT # Offset: 684
    000002b1: 	movq	0x10(%rsp), %r12
    000002b6: 	movq	(%rbx), %rdi
    000002b9: 	jmp	.Ltmp357 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp350:
    000002c0: 	movq	%rbp, %rsi
    000002c3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 714
    000002cf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002d6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e4: 	jne	.Ltmp358 # Offset: 740
.Ltmp355:
    000002ea: 	movq	-0x8(%rdx), %rax
    000002ee: 	addq	$0x200, %rax
    000002f4: 	jmp	.Ltmp358 # Offset: 756
    000002f9: 	nopl	(%rax) # Size: 7
.Ltmp354:
    00000300: 	testq	%r12, %r12
    00000303: 	je	.Ltmp357 # Offset: 771
    00000309: 	jmp	.Ltmp359 # Offset: 777
.Ltmp356:
    0000030b: 	callq	__stack_chk_fail@PLT # Offset: 779
.Ltmp352:
    00000310: 	leaq	DATAat0x15008(%rip), %rdi
    00000317: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 791
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global1IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_array11_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0xa1f0
  Size        : 0x2fc
  MaxSize     : 0x300
  Offset      : 0xa1f0
  Section     : .text
  Orc Section : .local.text._Z17test_array11_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x18(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movdqu	(%rbp), %xmm0
    00000032: 	movzwl	0x2(%rbp), %r14d
    00000037: 	movzwl	0x4(%rbp), %edi
    0000003b: 	movzwl	0x6(%rbp), %r13d
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	movzwl	(%rbp), %eax
    0000004b: 	movzwl	0x8(%rbp), %ecx
    0000004f: 	movzwl	0xe(%rbp), %r15d
    00000054: 	movzwl	0x10(%rbp), %r11d
    00000059: 	movzwl	0x12(%rbp), %r10d
    0000005e: 	movzwl	0x14(%rbp), %r9d
    00000063: 	movw	%ax, (%rsp)
    00000067: 	movzwl	0xa(%rbp), %eax
    0000006b: 	movw	%ax, 0x6(%rsp)
    00000070: 	movzwl	0xc(%rbp), %eax
    00000074: 	movw	%ax, 0x8(%rsp)
    00000079: 	movl	iterations(%rip), %eax
    0000007f: 	testl	%eax, %eax
    00000081: 	jle	.Ltmp360 # Offset: 129
    00000087: 	movd	%edi, %xmm2
    0000008b: 	movd	%ecx, %xmm0
    0000008f: 	movd	(%rsp), %xmm1
    00000094: 	subl	$0x1, %eax
    00000097: 	leal	(,%rax,8), %esi
    0000009e: 	pinsrw	$0x1, %r13d, %xmm2
    000000a4: 	pinsrw	$0x1, %r14d, %xmm1
    000000aa: 	leal	(%rsi,%rax), %ebx
    000000ad: 	leal	(%rax,%rax,4), %ecx
    000000b0: 	punpckldq	%xmm2, %xmm1
    000000b4: 	subl	%eax, %esi
    000000b6: 	leal	(,%rbx,4), %r8d
    000000be: 	pinsrw	$0x1, %ebx, %xmm0
    000000c3: 	leal	(,%rcx,4), %edi
    000000ca: 	movw	%r8w, 0xc(%rsp)
    000000d0: 	movl	%eax, %r8d
    000000d3: 	leal	(,%rcx,8), %ebx
    000000da: 	leal	(%rax,%rcx,2), %ecx
    000000dd: 	shll	$0x4, %r8d
    000000e1: 	leal	(%rax,%rsi,8), %esi
    000000e4: 	leal	(%rcx,%rcx,4), %ecx
    000000e7: 	subl	%eax, %r8d
    000000ea: 	leal	0x39(%r11,%rsi), %r11d
    000000ef: 	leal	0x37(%r10,%rcx), %r10d
    000000f4: 	leal	(%r8,%r8), %edx
    000000f8: 	movd	%r8d, %xmm3
    000000fd: 	movd	0xc(%rsp), %xmm2
    00000103: 	pinsrw	$0x1, %edx, %xmm3
    00000108: 	leal	(%rax,%rax,2), %edx
    0000010b: 	movdqa	%xmm2, %xmm4
    0000010f: 	leal	(%rax,%rdx,4), %edx
    00000112: 	punpckldq	%xmm3, %xmm0
    00000116: 	movd	0x8(%rsp), %xmm3
    0000011c: 	shll	$0x2, %edx
    0000011f: 	punpcklqdq	%xmm0, %xmm1
    00000123: 	pinsrw	$0x1, %edi, %xmm4
    00000128: 	pinsrw	$0x1, 0x6(%rsp), %xmm2
    0000012f: 	movd	%edx, %xmm0
    00000133: 	pinsrw	$0x1, %r15d, %xmm3
    00000139: 	pinsrw	$0x1, %ebx, %xmm0
    0000013e: 	leal	0x3c(%r9,%r8,4), %r9d
    00000143: 	punpckldq	%xmm4, %xmm0
    00000147: 	punpckldq	%xmm3, %xmm2
    0000014b: 	punpcklqdq	%xmm2, %xmm0
    0000014f: 	paddw	%xmm1, %xmm0
    00000153: 	paddw	DATAat0x15d80(%rip), %xmm0
.Ltmp360:
    0000015b: 	movw	%r11w, 0x10(%rbp)
    00000160: 	movq	%r12, %rsi
    00000163: 	movq	%rbp, %rdi
    00000166: 	movw	%r10w, 0x12(%rbp)
    0000016b: 	movw	%r9w, 0x14(%rbp)
    00000170: 	movups	%xmm0, (%rbp)
    00000174: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 372
    00000179: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000180: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000187: 	subq	$0x20, %rax
    0000018b: 	cmpq	%rax, %rbx
    0000018e: 	je	.Ltmp361 # Offset: 398
    00000194: 	leaq	0x10(%rbx), %rdi
    00000198: 	movq	%rdi, (%rbx)
    0000019b: 	movq	(%r12), %rbp
    0000019f: 	movq	0x8(%r12), %r12
    000001a4: 	movq	%rbp, %rax
    000001a7: 	addq	%r12, %rax
    000001aa: 	je	.Ltmp362 # Offset: 426
    000001ac: 	testq	%rbp, %rbp
    000001af: 	je	.Ltmp363 # Offset: 431
.Ltmp362:
    000001b5: 	movq	%r12, 0x10(%rsp)
    000001ba: 	cmpq	$0xf, %r12
    000001be: 	ja	.Ltmp364 # Offset: 446
    000001c4: 	cmpq	$0x1, %r12
    000001c8: 	jne	.Ltmp365 # Offset: 456
    000001ce: 	movzbl	(%rbp), %eax
    000001d2: 	movb	%al, 0x10(%rbx)
.Ltmp368:
    000001d5: 	movq	%r12, 0x8(%rbx)
    000001d9: 	movb	$0x0, (%rdi,%r12)
    000001de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	addq	$0x20, %rax
    000001f0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001f7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001fe: 	je	.Ltmp366 # Offset: 510
.Ltmp369:
    00000204: 	movq	-0x20(%rax), %rbp
    00000208: 	callq	clock@PLT # Offset: 520
    0000020d: 	movq	%rax, end_time(%rip)
    00000214: 	movq	0x18(%rsp), %rdx
    00000219: 	subq	%fs:0x28, %rdx
    00000222: 	jne	.Ltmp367 # Offset: 546
    00000228: 	subq	start_time(%rip), %rax
    0000022f: 	pxor	%xmm0, %xmm0
    00000233: 	movq	%rbp, %rdi
    00000236: 	cvtsi2sd	%rax, %xmm0
    0000023b: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000243: 	addq	$0x28, %rsp
    00000247: 	popq	%rbx
    00000248: 	popq	%rbp
    00000249: 	popq	%r12
    0000024b: 	popq	%r13
    0000024d: 	popq	%r14
    0000024f: 	popq	%r15
    00000251: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 593
    00000256: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp364:
    00000260: 	movq	%rbx, %rdi
    00000263: 	leaq	0x10(%rsp), %rsi
    00000268: 	xorl	%edx, %edx
    0000026a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 618
    0000026f: 	movq	%rax, (%rbx)
    00000272: 	movq	%rax, %rdi
    00000275: 	movq	0x10(%rsp), %rax
    0000027a: 	movq	%rax, 0x10(%rbx)
.Ltmp370:
    0000027e: 	movq	%r12, %rdx
    00000281: 	movq	%rbp, %rsi
    00000284: 	callq	memcpy@PLT # Offset: 644
    00000289: 	movq	0x10(%rsp), %r12
    0000028e: 	movq	(%rbx), %rdi
    00000291: 	jmp	.Ltmp368 # Offset: 657
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp361:
    000002a0: 	movq	%r12, %rsi
    000002a3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002aa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 682
    000002af: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002b6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002c4: 	jne	.Ltmp369 # Offset: 708
.Ltmp366:
    000002ca: 	movq	-0x8(%rdx), %rax
    000002ce: 	addq	$0x200, %rax
    000002d4: 	jmp	.Ltmp369 # Offset: 724
    000002d9: 	nopl	(%rax) # Size: 7
.Ltmp365:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp368 # Offset: 739
    000002e9: 	jmp	.Ltmp370 # Offset: 745
.Ltmp367:
    000002eb: 	callq	__stack_chk_fail@PLT # Offset: 747
.Ltmp363:
    000002f0: 	leaq	DATAat0x15008(%rip), %rdi
    000002f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 759
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_array11_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_array11_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0xa4f0
  Size        : 0x244
  MaxSize     : 0x250
  Offset      : 0xa4f0
  Section     : .text
  Orc Section : .local.text._Z17test_array11_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	subq	$0x10, %rsp
    00000013: 	movq	%fs:0x28, %rax
    0000001c: 	movq	%rax, 0x8(%rsp)
    00000021: 	xorl	%eax, %eax
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movl	iterations(%rip), %edx
    0000002e: 	movupd	(%rbp), %xmm5
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movupd	0x10(%rbp), %xmm4
    0000003f: 	movupd	0x20(%rbp), %xmm3
    00000044: 	movupd	0x30(%rbp), %xmm2
    00000049: 	movupd	0x40(%rbp), %xmm1
    0000004e: 	movsd	0x50(%rbp), %xmm0
    00000053: 	testl	%edx, %edx
    00000055: 	jle	.Ltmp371 # Offset: 85
    00000057: 	movapd	DATAat0x15db0(%rip), %xmm11
    00000060: 	xorl	%eax, %eax
    00000062: 	movapd	DATAat0x15dc0(%rip), %xmm10
    0000006b: 	movapd	DATAat0x15df0(%rip), %xmm7
    00000073: 	movsd	DATAat0x15c70(%rip), %xmm6
    0000007b: 	movapd	DATAat0x15dd0(%rip), %xmm9
    00000084: 	movapd	DATAat0x15de0(%rip), %xmm8
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp372:
    00000090: 	addl	$0x1, %eax
    00000093: 	addpd	%xmm11, %xmm5
    00000098: 	addpd	%xmm10, %xmm4
    0000009d: 	addpd	%xmm9, %xmm3
    000000a2: 	addpd	%xmm8, %xmm2
    000000a7: 	addpd	%xmm7, %xmm1
    000000ab: 	addsd	%xmm6, %xmm0
    000000af: 	cmpl	%edx, %eax
    000000b1: 	jne	.Ltmp372 # Offset: 177
.Ltmp371:
    000000b3: 	movups	%xmm5, (%rbp)
    000000b7: 	movq	%rbp, %rdi
    000000ba: 	movq	%r12, %rsi
    000000bd: 	movups	%xmm4, 0x10(%rbp)
    000000c1: 	movups	%xmm3, 0x20(%rbp)
    000000c5: 	movups	%xmm2, 0x30(%rbp)
    000000c9: 	movups	%xmm1, 0x40(%rbp)
    000000cd: 	movsd	%xmm0, 0x50(%rbp)
    000000d2: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 210
    000000d7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000000e5: 	subq	$0x20, %rax
    000000e9: 	cmpq	%rax, %rbp
    000000ec: 	je	.Ltmp373 # Offset: 236
    000000f2: 	leaq	0x10(%rbp), %rdi
    000000f6: 	movq	%rdi, (%rbp)
    000000fa: 	movq	(%r12), %r13
    000000fe: 	movq	0x8(%r12), %r12
    00000103: 	movq	%r13, %rax
    00000106: 	addq	%r12, %rax
    00000109: 	je	.Ltmp374 # Offset: 265
    0000010b: 	testq	%r13, %r13
    0000010e: 	je	.Ltmp375 # Offset: 270
.Ltmp374:
    00000114: 	movq	%r12, (%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp376 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp377 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbp)
.Ltmp380:
    00000134: 	movq	%r12, 0x8(%rbp)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp378 # Offset: 349
.Ltmp381:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x8(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp379 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001a2: 	addq	$0x10, %rsp
    000001a6: 	popq	%rbp
    000001a7: 	popq	%r12
    000001a9: 	popq	%r13
    000001ab: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 427
.Ltmp376:
    000001b0: 	movq	%rbp, %rdi
    000001b3: 	movq	%rsp, %rsi
    000001b6: 	xorl	%edx, %edx
    000001b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 440
    000001bd: 	movq	%rax, (%rbp)
    000001c1: 	movq	%rax, %rdi
    000001c4: 	movq	(%rsp), %rax
    000001c8: 	movq	%rax, 0x10(%rbp)
.Ltmp382:
    000001cc: 	movq	%r12, %rdx
    000001cf: 	movq	%r13, %rsi
    000001d2: 	callq	memcpy@PLT # Offset: 466
    000001d7: 	movq	(%rsp), %r12
    000001db: 	movq	(%rbp), %rdi
    000001df: 	jmp	.Ltmp380 # Offset: 479
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp373:
    000001e8: 	movq	%r12, %rsi
    000001eb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001f2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 498
    000001f7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fe: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000205: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020c: 	jne	.Ltmp381 # Offset: 524
.Ltmp378:
    00000212: 	movq	-0x8(%rdx), %rax
    00000216: 	addq	$0x200, %rax
    0000021c: 	jmp	.Ltmp381 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp377:
    00000228: 	testq	%r12, %r12
    0000022b: 	je	.Ltmp380 # Offset: 555
    00000231: 	jmp	.Ltmp382 # Offset: 561
.Ltmp379:
    00000233: 	callq	__stack_chk_fail@PLT # Offset: 563
.Ltmp375:
    00000238: 	leaq	DATAat0x15008(%rip), %rdi
    0000023f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 575
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_array11_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_array11_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0xa740
  Size        : 0x24c
  MaxSize     : 0x250
  Offset      : 0xa740
  Section     : .text
  Orc Section : .local.text._Z17test_array11_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	subq	$0x10, %rsp
    00000013: 	movq	%fs:0x28, %rax
    0000001c: 	movq	%rax, 0x8(%rsp)
    00000021: 	xorl	%eax, %eax
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movdqu	(%rbp), %xmm5
    0000002d: 	movdqu	0x10(%rbp), %xmm4
    00000032: 	movl	0x20(%rbp), %esi
    00000035: 	movl	0x24(%rbp), %ecx
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	movl	iterations(%rip), %eax
    00000045: 	movl	0x28(%rbp), %edx
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp383 # Offset: 74
    0000004c: 	movd	%eax, %xmm6
    00000050: 	movdqa	DATAat0x15d40(%rip), %xmm1
    00000058: 	imull	$0x39, %eax, %edi
    0000005b: 	pshufd	$0x0, %xmm6, %xmm0
    00000060: 	movdqa	%xmm0, %xmm3
    00000064: 	movdqa	%xmm0, %xmm2
    00000068: 	pmuludq	%xmm1, %xmm3
    0000006c: 	psrlq	$0x20, %xmm2
    00000071: 	addl	%edi, %esi
    00000073: 	psrlq	$0x20, %xmm1
    00000078: 	imull	$0x37, %eax, %edi
    0000007b: 	pmuludq	%xmm2, %xmm1
    0000007f: 	imull	$0x3c, %eax, %eax
    00000082: 	addl	%edi, %ecx
    00000084: 	pshufd	$0x8, %xmm3, %xmm3
    00000089: 	addl	%eax, %edx
    0000008b: 	pshufd	$0x8, %xmm1, %xmm1
    00000090: 	punpckldq	%xmm1, %xmm3
    00000094: 	movdqa	DATAat0x15d50(%rip), %xmm1
    0000009c: 	paddd	%xmm3, %xmm5
    000000a0: 	pmuludq	%xmm1, %xmm0
    000000a4: 	psrlq	$0x20, %xmm1
    000000a9: 	pmuludq	%xmm1, %xmm2
    000000ad: 	pshufd	$0x8, %xmm0, %xmm0
    000000b2: 	pshufd	$0x8, %xmm2, %xmm2
    000000b7: 	punpckldq	%xmm2, %xmm0
    000000bb: 	paddd	%xmm0, %xmm4
.Ltmp383:
    000000bf: 	movl	%esi, 0x20(%rbp)
    000000c2: 	movq	%rbp, %rdi
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movl	%ecx, 0x24(%rbp)
    000000cb: 	movl	%edx, 0x28(%rbp)
    000000ce: 	movups	%xmm5, (%rbp)
    000000d2: 	movups	%xmm4, 0x10(%rbp)
    000000d6: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 214
    000000db: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000000e9: 	subq	$0x20, %rax
    000000ed: 	cmpq	%rax, %rbp
    000000f0: 	je	.Ltmp384 # Offset: 240
    000000f6: 	leaq	0x10(%rbp), %rdi
    000000fa: 	movq	%rdi, (%rbp)
    000000fe: 	movq	(%r12), %r13
    00000102: 	movq	0x8(%r12), %r12
    00000107: 	movq	%r13, %rax
    0000010a: 	addq	%r12, %rax
    0000010d: 	je	.Ltmp385 # Offset: 269
    0000010f: 	testq	%r13, %r13
    00000112: 	je	.Ltmp386 # Offset: 274
.Ltmp385:
    00000118: 	movq	%r12, (%rsp)
    0000011c: 	cmpq	$0xf, %r12
    00000120: 	ja	.Ltmp387 # Offset: 288
    00000126: 	cmpq	$0x1, %r12
    0000012a: 	jne	.Ltmp388 # Offset: 298
    00000130: 	movzbl	(%r13), %eax
    00000135: 	movb	%al, 0x10(%rbp)
.Ltmp391:
    00000138: 	movq	%r12, 0x8(%rbp)
    0000013c: 	movb	$0x0, (%rdi,%r12)
    00000141: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000148: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014f: 	addq	$0x20, %rax
    00000153: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000015a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000161: 	je	.Ltmp389 # Offset: 353
.Ltmp392:
    00000167: 	movq	-0x20(%rax), %rbp
    0000016b: 	callq	clock@PLT # Offset: 363
    00000170: 	movq	%rax, end_time(%rip)
    00000177: 	movq	0x8(%rsp), %rdx
    0000017c: 	subq	%fs:0x28, %rdx
    00000185: 	jne	.Ltmp390 # Offset: 389
    0000018b: 	subq	start_time(%rip), %rax
    00000192: 	pxor	%xmm0, %xmm0
    00000196: 	movq	%rbp, %rdi
    00000199: 	cvtsi2sd	%rax, %xmm0
    0000019e: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001a6: 	addq	$0x10, %rsp
    000001aa: 	popq	%rbp
    000001ab: 	popq	%r12
    000001ad: 	popq	%r13
    000001af: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp387:
    000001b8: 	movq	%rbp, %rdi
    000001bb: 	movq	%rsp, %rsi
    000001be: 	xorl	%edx, %edx
    000001c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 448
    000001c5: 	movq	%rax, (%rbp)
    000001c9: 	movq	%rax, %rdi
    000001cc: 	movq	(%rsp), %rax
    000001d0: 	movq	%rax, 0x10(%rbp)
.Ltmp393:
    000001d4: 	movq	%r12, %rdx
    000001d7: 	movq	%r13, %rsi
    000001da: 	callq	memcpy@PLT # Offset: 474
    000001df: 	movq	(%rsp), %r12
    000001e3: 	movq	(%rbp), %rdi
    000001e7: 	jmp	.Ltmp391 # Offset: 487
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp384:
    000001f0: 	movq	%r12, %rsi
    000001f3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001fa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 506
    000001ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000206: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000020d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000214: 	jne	.Ltmp392 # Offset: 532
.Ltmp389:
    0000021a: 	movq	-0x8(%rdx), %rax
    0000021e: 	addq	$0x200, %rax
    00000224: 	jmp	.Ltmp392 # Offset: 548
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp388:
    00000230: 	testq	%r12, %r12
    00000233: 	je	.Ltmp391 # Offset: 563
    00000239: 	jmp	.Ltmp393 # Offset: 569
.Ltmp390:
    0000023b: 	callq	__stack_chk_fail@PLT # Offset: 571
.Ltmp386:
    00000240: 	leaq	DATAat0x15008(%rip), %rdi
    00000247: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 583
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_array11_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global1IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0xa990
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0xa990
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global1IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movapd	dataDouble(%rip), %xmm5
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movapd	dataDouble+16(%rip), %xmm4
    00000043: 	movapd	dataDouble+32(%rip), %xmm3
    0000004b: 	movapd	dataDouble+48(%rip), %xmm2
    00000053: 	movapd	dataDouble+64(%rip), %xmm1
    0000005b: 	movsd	dataDouble+80(%rip), %xmm0
    00000063: 	testl	%edx, %edx
    00000065: 	jle	.Ltmp394 # Offset: 101
    00000067: 	movapd	DATAat0x15db0(%rip), %xmm11
    00000070: 	xorl	%eax, %eax
    00000072: 	movapd	DATAat0x15dc0(%rip), %xmm10
    0000007b: 	movapd	DATAat0x15df0(%rip), %xmm7
    00000083: 	movsd	DATAat0x15c70(%rip), %xmm6
    0000008b: 	movapd	DATAat0x15dd0(%rip), %xmm9
    00000094: 	movapd	DATAat0x15de0(%rip), %xmm8
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp395:
    000000a0: 	addl	$0x1, %eax
    000000a3: 	addpd	%xmm11, %xmm5
    000000a8: 	addpd	%xmm10, %xmm4
    000000ad: 	addpd	%xmm9, %xmm3
    000000b2: 	addpd	%xmm8, %xmm2
    000000b7: 	addpd	%xmm7, %xmm1
    000000bb: 	addsd	%xmm6, %xmm0
    000000bf: 	cmpl	%edx, %eax
    000000c1: 	jne	.Ltmp395 # Offset: 193
.Ltmp394:
    000000c3: 	movq	%rbp, %rsi
    000000c6: 	leaq	dataDouble(%rip), %rdi
    000000cd: 	movaps	%xmm5, dataDouble(%rip)
    000000d4: 	movaps	%xmm4, dataDouble+16(%rip)
    000000db: 	movaps	%xmm3, dataDouble+32(%rip)
    000000e2: 	movaps	%xmm2, dataDouble+48(%rip)
    000000e9: 	movaps	%xmm1, dataDouble+64(%rip)
    000000f0: 	movsd	%xmm0, dataDouble+80(%rip)
    000000f8: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 248
    000000fd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000104: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010b: 	subq	$0x20, %rax
    0000010f: 	cmpq	%rax, %rbx
    00000112: 	je	.Ltmp396 # Offset: 274
    00000118: 	leaq	0x10(%rbx), %rdi
    0000011c: 	movq	0x8(%rbp), %r12
    00000120: 	movq	%rdi, (%rbx)
    00000123: 	movq	(%rbp), %r13
    00000127: 	movq	%r13, %rax
    0000012a: 	addq	%r12, %rax
    0000012d: 	je	.Ltmp397 # Offset: 301
    0000012f: 	testq	%r13, %r13
    00000132: 	je	.Ltmp398 # Offset: 306
.Ltmp397:
    00000138: 	movq	%r12, (%rsp)
    0000013c: 	cmpq	$0xf, %r12
    00000140: 	ja	.Ltmp399 # Offset: 320
    00000146: 	cmpq	$0x1, %r12
    0000014a: 	jne	.Ltmp400 # Offset: 330
    00000150: 	movzbl	(%r13), %eax
    00000155: 	movb	%al, 0x10(%rbx)
.Ltmp403:
    00000158: 	movq	%r12, 0x8(%rbx)
    0000015c: 	movb	$0x0, (%rdi,%r12)
    00000161: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000168: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016f: 	addq	$0x20, %rax
    00000173: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000017a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000181: 	je	.Ltmp401 # Offset: 385
.Ltmp404:
    00000187: 	movq	-0x20(%rax), %rbp
    0000018b: 	callq	clock@PLT # Offset: 395
    00000190: 	movq	%rax, end_time(%rip)
    00000197: 	movq	0x8(%rsp), %rdx
    0000019c: 	subq	%fs:0x28, %rdx
    000001a5: 	jne	.Ltmp402 # Offset: 421
    000001ab: 	subq	start_time(%rip), %rax
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	%rbp, %rdi
    000001b9: 	cvtsi2sd	%rax, %xmm0
    000001be: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001c6: 	addq	$0x18, %rsp
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 464
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp399:
    000001d8: 	movq	%rbx, %rdi
    000001db: 	movq	%rsp, %rsi
    000001de: 	xorl	%edx, %edx
    000001e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 480
    000001e5: 	movq	%rax, (%rbx)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	(%rsp), %rax
    000001ef: 	movq	%rax, 0x10(%rbx)
.Ltmp405:
    000001f3: 	movq	%r12, %rdx
    000001f6: 	movq	%r13, %rsi
    000001f9: 	callq	memcpy@PLT # Offset: 505
    000001fe: 	movq	(%rsp), %r12
    00000202: 	movq	(%rbx), %rdi
    00000205: 	jmp	.Ltmp403 # Offset: 517
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp396:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp404 # Offset: 564
.Ltmp401:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp404 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp400:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp403 # Offset: 595
    00000259: 	jmp	.Ltmp405 # Offset: 601
.Ltmp402:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp398:
    00000260: 	leaq	DATAat0x15008(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global1IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global1ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0xac00
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0xac00
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global1ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	data64(%rip), %xmm6
    0000002e: 	movdqa	data64+16(%rip), %xmm5
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movdqa	data64+32(%rip), %xmm4
    0000004b: 	movdqa	data64+48(%rip), %xmm3
    00000053: 	movdqa	data64+64(%rip), %xmm0
    0000005b: 	movq	data64+80(%rip), %r8
    00000062: 	testl	%eax, %eax
    00000064: 	jle	.Ltmp406 # Offset: 100
    0000006a: 	subl	$0x1, %eax
    0000006d: 	paddq	DATAat0x15cf0(%rip), %xmm6
    00000075: 	paddq	DATAat0x15d00(%rip), %xmm5
    0000007d: 	leaq	(%rax,%rax,2), %rdx
    00000081: 	leaq	(,%rax,8), %rcx
    00000089: 	leaq	(%rax,%rdx,4), %rdx
    0000008d: 	leaq	(%rcx,%rax), %rdi
    00000091: 	subq	%rax, %rcx
    00000094: 	leaq	(,%rdx,4), %rsi
    0000009c: 	leaq	(,%rdi,4), %rbx
    000000a4: 	movq	%rsi, %xmm1
    000000a9: 	leaq	(%rax,%rax,4), %rsi
    000000ad: 	paddq	DATAat0x15d10(%rip), %xmm4
    000000b5: 	leaq	(,%rsi,8), %rdx
    000000bd: 	movq	%rbx, %xmm2
    000000c2: 	leaq	(%rax,%rcx,8), %rcx
    000000c6: 	movq	%rdx, %xmm7
    000000cb: 	leaq	(,%rsi,4), %rdx
    000000d3: 	paddq	DATAat0x15d20(%rip), %xmm3
    000000db: 	punpcklqdq	%xmm7, %xmm1
    000000df: 	movq	%rdx, %xmm7
    000000e4: 	movq	%rax, %rdx
    000000e7: 	paddq	%xmm1, %xmm6
    000000eb: 	shlq	$0x4, %rdx
    000000ef: 	movq	%rbx, %xmm1
    000000f4: 	subq	%rax, %rdx
    000000f7: 	punpcklqdq	%xmm7, %xmm1
    000000fb: 	movq	%rdi, %xmm7
    00000100: 	punpcklqdq	%xmm7, %xmm2
    00000104: 	leaq	(%rdx,%rdx), %rdi
    00000108: 	paddq	%xmm1, %xmm5
    0000010c: 	paddq	%xmm2, %xmm4
    00000110: 	movq	%rdx, %xmm1
    00000115: 	movq	%rdi, %xmm2
    0000011a: 	leaq	(%rax,%rsi,2), %rax
    0000011e: 	punpcklqdq	%xmm2, %xmm1
    00000122: 	leaq	0x3c(%r8,%rdx,4), %r8
    00000127: 	leaq	(%rax,%rax,4), %rax
    0000012b: 	paddq	DATAat0x15d30(%rip), %xmm0
    00000133: 	paddq	%xmm1, %xmm3
    00000137: 	movq	%rax, %xmm7
    0000013c: 	movq	%rcx, %xmm1
    00000141: 	punpcklqdq	%xmm7, %xmm1
    00000145: 	paddq	%xmm1, %xmm0
.Ltmp406:
    00000149: 	movq	%rbp, %rsi
    0000014c: 	leaq	data64(%rip), %rdi
    00000153: 	movq	%r8, data64+80(%rip)
    0000015a: 	movaps	%xmm6, data64(%rip)
    00000161: 	movaps	%xmm5, data64+16(%rip)
    00000168: 	movaps	%xmm4, data64+32(%rip)
    0000016f: 	movaps	%xmm3, data64+48(%rip)
    00000176: 	movaps	%xmm0, data64+64(%rip)
    0000017d: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 381
    00000182: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000189: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000190: 	subq	$0x20, %rax
    00000194: 	cmpq	%rax, %rbx
    00000197: 	je	.Ltmp407 # Offset: 407
    0000019d: 	leaq	0x10(%rbx), %rdi
    000001a1: 	movq	0x8(%rbp), %r12
    000001a5: 	movq	%rdi, (%rbx)
    000001a8: 	movq	(%rbp), %r13
    000001ac: 	movq	%r13, %rax
    000001af: 	addq	%r12, %rax
    000001b2: 	je	.Ltmp408 # Offset: 434
    000001b4: 	testq	%r13, %r13
    000001b7: 	je	.Ltmp409 # Offset: 439
.Ltmp408:
    000001bd: 	movq	%r12, (%rsp)
    000001c1: 	cmpq	$0xf, %r12
    000001c5: 	ja	.Ltmp410 # Offset: 453
    000001cb: 	cmpq	$0x1, %r12
    000001cf: 	jne	.Ltmp411 # Offset: 463
    000001d5: 	movzbl	(%r13), %eax
    000001da: 	movb	%al, 0x10(%rbx)
.Ltmp414:
    000001dd: 	movq	%r12, 0x8(%rbx)
    000001e1: 	movb	$0x0, (%rdi,%r12)
    000001e6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ed: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f4: 	addq	$0x20, %rax
    000001f8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001ff: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000206: 	je	.Ltmp412 # Offset: 518
.Ltmp415:
    0000020c: 	movq	-0x20(%rax), %rbp
    00000210: 	callq	clock@PLT # Offset: 528
    00000215: 	movq	%rax, end_time(%rip)
    0000021c: 	movq	0x8(%rsp), %rdx
    00000221: 	subq	%fs:0x28, %rdx
    0000022a: 	jne	.Ltmp413 # Offset: 554
    00000230: 	subq	start_time(%rip), %rax
    00000237: 	pxor	%xmm0, %xmm0
    0000023b: 	movq	%rbp, %rdi
    0000023e: 	cvtsi2sd	%rax, %xmm0
    00000243: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000024b: 	addq	$0x18, %rsp
    0000024f: 	popq	%rbx
    00000250: 	popq	%rbp
    00000251: 	popq	%r12
    00000253: 	popq	%r13
    00000255: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 597
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp410:
    00000260: 	movq	%rbx, %rdi
    00000263: 	movq	%rsp, %rsi
    00000266: 	xorl	%edx, %edx
    00000268: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 616
    0000026d: 	movq	%rax, (%rbx)
    00000270: 	movq	%rax, %rdi
    00000273: 	movq	(%rsp), %rax
    00000277: 	movq	%rax, 0x10(%rbx)
.Ltmp416:
    0000027b: 	movq	%r12, %rdx
    0000027e: 	movq	%r13, %rsi
    00000281: 	callq	memcpy@PLT # Offset: 641
    00000286: 	movq	(%rsp), %r12
    0000028a: 	movq	(%rbx), %rdi
    0000028d: 	jmp	.Ltmp414 # Offset: 653
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp407:
    00000298: 	movq	%rbp, %rsi
    0000029b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002a2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 674
    000002a7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ae: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002bc: 	jne	.Ltmp415 # Offset: 700
.Ltmp412:
    000002c2: 	movq	-0x8(%rdx), %rax
    000002c6: 	addq	$0x200, %rax
    000002cc: 	jmp	.Ltmp415 # Offset: 716
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp411:
    000002d8: 	testq	%r12, %r12
    000002db: 	je	.Ltmp414 # Offset: 731
    000002e1: 	jmp	.Ltmp416 # Offset: 737
.Ltmp413:
    000002e3: 	callq	__stack_chk_fail@PLT # Offset: 739
.Ltmp409:
    000002e8: 	leaq	DATAat0x15008(%rip), %rdi
    000002ef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global1ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global2ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0xaf00
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0xaf00
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global2ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	data64(%rip), %xmm5
    0000002e: 	movdqa	data64+16(%rip), %xmm4
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movdqa	data64+32(%rip), %xmm3
    0000004b: 	movdqa	data64+48(%rip), %xmm2
    00000053: 	movdqa	data64+64(%rip), %xmm0
    0000005b: 	movq	data64+64(%rip), %r8
    00000062: 	movq	data64+72(%rip), %rdi
    00000069: 	movq	data64+80(%rip), %rcx
    00000070: 	testl	%eax, %eax
    00000072: 	jle	.Ltmp417 # Offset: 114
    00000078: 	movd	%eax, %xmm6
    0000007c: 	pcmpeqd	%xmm1, %xmm1
    00000080: 	leal	-0x1(%rax), %edx
    00000083: 	pshufd	$0x0, %xmm6, %xmm0
    00000088: 	paddq	DATAat0x15d00(%rip), %xmm4
    00000090: 	paddq	DATAat0x15cf0(%rip), %xmm5
    00000098: 	movq	%rdx, %rsi
    0000009b: 	paddd	%xmm1, %xmm0
    0000009f: 	movdqa	DATAat0x15d40(%rip), %xmm1
    000000a7: 	leaq	(,%rdx,8), %rax
    000000af: 	shlq	$0x4, %rsi
    000000b3: 	movdqa	%xmm0, %xmm6
    000000b7: 	subq	%rdx, %rax
    000000ba: 	subq	%rdx, %rsi
    000000bd: 	movdqa	%xmm1, %xmm7
    000000c1: 	punpckldq	%xmm0, %xmm6
    000000c5: 	punpckhdq	%xmm0, %xmm0
    000000c9: 	punpckldq	%xmm1, %xmm7
    000000cd: 	punpckhdq	%xmm1, %xmm1
    000000d1: 	paddq	DATAat0x15d20(%rip), %xmm2
    000000d9: 	pmuludq	%xmm0, %xmm1
    000000dd: 	pmuludq	%xmm6, %xmm7
    000000e1: 	leaq	(%rdx,%rax,8), %rax
    000000e5: 	addq	%r8, %rax
    000000e8: 	paddq	DATAat0x15d10(%rip), %xmm3
    000000f0: 	leaq	0x3c(%rcx,%rsi,4), %rcx
    000000f5: 	paddq	%xmm1, %xmm4
    000000f9: 	movdqa	DATAat0x15d50(%rip), %xmm1
    00000101: 	paddq	%xmm7, %xmm5
    00000105: 	movdqa	%xmm1, %xmm7
    00000109: 	punpckldq	%xmm1, %xmm7
    0000010d: 	punpckhdq	%xmm1, %xmm1
    00000111: 	pmuludq	%xmm1, %xmm0
    00000115: 	pmuludq	%xmm7, %xmm6
    00000119: 	paddq	%xmm0, %xmm2
    0000011d: 	movq	%rax, %xmm0
    00000122: 	leaq	(%rdx,%rdx,4), %rax
    00000126: 	leaq	(%rdx,%rax,2), %rax
    0000012a: 	paddq	%xmm6, %xmm3
    0000012e: 	leaq	(%rax,%rax,4), %rax
    00000132: 	addq	%rdi, %rax
    00000135: 	movq	%rax, %xmm6
    0000013a: 	punpcklqdq	%xmm6, %xmm0
    0000013e: 	paddq	DATAat0x15d30(%rip), %xmm0
.Ltmp417:
    00000146: 	movq	%rbp, %rsi
    00000149: 	leaq	data64(%rip), %rdi
    00000150: 	movq	%rcx, data64+80(%rip)
    00000157: 	movaps	%xmm5, data64(%rip)
    0000015e: 	movaps	%xmm4, data64+16(%rip)
    00000165: 	movaps	%xmm3, data64+32(%rip)
    0000016c: 	movaps	%xmm2, data64+48(%rip)
    00000173: 	movaps	%xmm0, data64+64(%rip)
    0000017a: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 378
    0000017f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000186: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000018d: 	subq	$0x20, %rax
    00000191: 	cmpq	%rax, %rbx
    00000194: 	je	.Ltmp418 # Offset: 404
    0000019a: 	leaq	0x10(%rbx), %rdi
    0000019e: 	movq	0x8(%rbp), %r12
    000001a2: 	movq	%rdi, (%rbx)
    000001a5: 	movq	(%rbp), %r13
    000001a9: 	movq	%r13, %rax
    000001ac: 	addq	%r12, %rax
    000001af: 	je	.Ltmp419 # Offset: 431
    000001b1: 	testq	%r13, %r13
    000001b4: 	je	.Ltmp420 # Offset: 436
.Ltmp419:
    000001ba: 	movq	%r12, (%rsp)
    000001be: 	cmpq	$0xf, %r12
    000001c2: 	ja	.Ltmp421 # Offset: 450
    000001c8: 	cmpq	$0x1, %r12
    000001cc: 	jne	.Ltmp422 # Offset: 460
    000001d2: 	movzbl	(%r13), %eax
    000001d7: 	movb	%al, 0x10(%rbx)
.Ltmp425:
    000001da: 	movq	%r12, 0x8(%rbx)
    000001de: 	movb	$0x0, (%rdi,%r12)
    000001e3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ea: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f1: 	addq	$0x20, %rax
    000001f5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001fc: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000203: 	je	.Ltmp423 # Offset: 515
.Ltmp426:
    00000209: 	movq	-0x20(%rax), %rbp
    0000020d: 	callq	clock@PLT # Offset: 525
    00000212: 	movq	%rax, end_time(%rip)
    00000219: 	movq	0x8(%rsp), %rdx
    0000021e: 	subq	%fs:0x28, %rdx
    00000227: 	jne	.Ltmp424 # Offset: 551
    0000022d: 	subq	start_time(%rip), %rax
    00000234: 	pxor	%xmm0, %xmm0
    00000238: 	movq	%rbp, %rdi
    0000023b: 	cvtsi2sd	%rax, %xmm0
    00000240: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000248: 	addq	$0x18, %rsp
    0000024c: 	popq	%rbx
    0000024d: 	popq	%rbp
    0000024e: 	popq	%r12
    00000250: 	popq	%r13
    00000252: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 594
    00000257: 	nopw	(%rax,%rax) # Size: 9
.Ltmp421:
    00000260: 	movq	%rbx, %rdi
    00000263: 	movq	%rsp, %rsi
    00000266: 	xorl	%edx, %edx
    00000268: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 616
    0000026d: 	movq	%rax, (%rbx)
    00000270: 	movq	%rax, %rdi
    00000273: 	movq	(%rsp), %rax
    00000277: 	movq	%rax, 0x10(%rbx)
.Ltmp427:
    0000027b: 	movq	%r12, %rdx
    0000027e: 	movq	%r13, %rsi
    00000281: 	callq	memcpy@PLT # Offset: 641
    00000286: 	movq	(%rsp), %r12
    0000028a: 	movq	(%rbx), %rdi
    0000028d: 	jmp	.Ltmp425 # Offset: 653
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp418:
    00000298: 	movq	%rbp, %rsi
    0000029b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002a2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 674
    000002a7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ae: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002bc: 	jne	.Ltmp426 # Offset: 700
.Ltmp423:
    000002c2: 	movq	-0x8(%rdx), %rax
    000002c6: 	addq	$0x200, %rax
    000002cc: 	jmp	.Ltmp426 # Offset: 716
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp422:
    000002d8: 	testq	%r12, %r12
    000002db: 	je	.Ltmp425 # Offset: 731
    000002e1: 	jmp	.Ltmp427 # Offset: 737
.Ltmp424:
    000002e3: 	callq	__stack_chk_fail@PLT # Offset: 739
.Ltmp420:
    000002e8: 	leaq	DATAat0x15008(%rip), %rdi
    000002ef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global2ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0xb200
  Size        : 0x28c
  MaxSize     : 0x290
  Offset      : 0xb200
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x78, %rsp
    00000011: 	movslq	init_value(%rip), %rbx
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x68(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movl	iterations(%rip), %eax
    0000003a: 	testl	%eax, %eax
    0000003c: 	jle	.Ltmp428 # Offset: 60
    00000042: 	subl	$0x1, %eax
    00000045: 	leaq	(%rax,%rax,2), %rdx
    00000049: 	leaq	(,%rax,8), %rcx
    00000051: 	leaq	(%rax,%rdx,4), %r12
    00000055: 	movq	%rax, %rdx
    00000058: 	leaq	(%rcx,%rax), %rdi
    0000005c: 	subq	%rax, %rcx
    0000005f: 	leaq	(%rax,%rax,4), %rsi
    00000063: 	shlq	$0x4, %rdx
    00000067: 	leaq	(%rax,%rcx,8), %rcx
    0000006b: 	subq	%rax, %rdx
    0000006e: 	leaq	(%rax,%rsi,2), %rax
    00000072: 	leaq	0x9(%rbx,%rdi), %r10
    00000077: 	leaq	(%rax,%rax,4), %rax
    0000007b: 	leaq	0xf(%rbx,%rdx), %r9
    00000080: 	leaq	0x39(%rbx,%rcx), %r8
    00000085: 	leaq	0x14(%rbx,%rsi,4), %r11
    0000008a: 	leaq	0x24(%rbx,%rdi,4), %rcx
    0000008f: 	leaq	0x28(%rbx,%rsi,8), %r13
    00000094: 	leaq	0x3c(%rbx,%rdx,4), %rdi
    00000099: 	leaq	0x37(%rbx,%rax), %rax
    0000009e: 	leaq	0x1e(%rbx,%rdx,2), %rdx
    000000a3: 	leaq	0x34(%rbx,%r12,4), %rbx
.Ltmp436:
    000000a8: 	movq	%rdi, 0x60(%rsp)
    000000ad: 	movq	%rbp, %rsi
    000000b0: 	leaq	0x10(%rsp), %rdi
    000000b5: 	movq	%rbx, 0x10(%rsp)
    000000ba: 	movq	%rax, 0x58(%rsp)
    000000bf: 	movq	%r13, 0x18(%rsp)
    000000c4: 	movq	%rcx, 0x20(%rsp)
    000000c9: 	movq	%r11, 0x28(%rsp)
    000000ce: 	movq	%rcx, 0x30(%rsp)
    000000d3: 	movq	%r10, 0x38(%rsp)
    000000d8: 	movq	%r9, 0x40(%rsp)
    000000dd: 	movq	%rdx, 0x48(%rsp)
    000000e2: 	movq	%r8, 0x50(%rsp)
    000000e7: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 231
    000000ec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000fa: 	subq	$0x20, %rax
    000000fe: 	cmpq	%rax, %rbx
    00000101: 	je	.Ltmp429 # Offset: 257
    00000107: 	leaq	0x10(%rbx), %rdi
    0000010b: 	movq	0x8(%rbp), %r12
    0000010f: 	movq	%rdi, (%rbx)
    00000112: 	movq	(%rbp), %r13
    00000116: 	movq	%r13, %rax
    00000119: 	addq	%r12, %rax
    0000011c: 	je	.Ltmp430 # Offset: 284
    0000011e: 	testq	%r13, %r13
    00000121: 	je	.Ltmp431 # Offset: 289
.Ltmp430:
    00000127: 	movq	%r12, 0x8(%rsp)
    0000012c: 	cmpq	$0xf, %r12
    00000130: 	ja	.Ltmp432 # Offset: 304
    00000136: 	cmpq	$0x1, %r12
    0000013a: 	jne	.Ltmp433 # Offset: 314
    00000140: 	movzbl	(%r13), %eax
    00000145: 	movb	%al, 0x10(%rbx)
.Ltmp437:
    00000148: 	movq	%r12, 0x8(%rbx)
    0000014c: 	movb	$0x0, (%rdi,%r12)
    00000151: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000158: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015f: 	addq	$0x20, %rax
    00000163: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000016a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000171: 	je	.Ltmp434 # Offset: 369
.Ltmp438:
    00000177: 	movq	-0x20(%rax), %rbp
    0000017b: 	callq	clock@PLT # Offset: 379
    00000180: 	movq	%rax, end_time(%rip)
    00000187: 	movq	0x68(%rsp), %rdx
    0000018c: 	subq	%fs:0x28, %rdx
    00000195: 	jne	.Ltmp435 # Offset: 405
    0000019b: 	subq	start_time(%rip), %rax
    000001a2: 	pxor	%xmm0, %xmm0
    000001a6: 	movq	%rbp, %rdi
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001b6: 	addq	$0x78, %rsp
    000001ba: 	popq	%rbx
    000001bb: 	popq	%rbp
    000001bc: 	popq	%r12
    000001be: 	popq	%r13
    000001c0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 448
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp428:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	movq	%rbx, %rax
    000001ce: 	movq	%rbx, %r8
    000001d1: 	movq	%rbx, %rdx
    000001d4: 	movq	%rbx, %r9
    000001d7: 	movq	%rbx, %r10
    000001da: 	movq	%rbx, %r11
    000001dd: 	movq	%rbx, %rcx
    000001e0: 	movq	%rbx, %r13
    000001e3: 	jmp	.Ltmp436 # Offset: 483
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp432:
    000001f0: 	movq	%rbx, %rdi
    000001f3: 	leaq	0x8(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 506
    000001ff: 	movq	%rax, (%rbx)
    00000202: 	movq	%rax, %rdi
    00000205: 	movq	0x8(%rsp), %rax
    0000020a: 	movq	%rax, 0x10(%rbx)
.Ltmp439:
    0000020e: 	movq	%r12, %rdx
    00000211: 	movq	%r13, %rsi
    00000214: 	callq	memcpy@PLT # Offset: 532
    00000219: 	movq	0x8(%rsp), %r12
    0000021e: 	movq	(%rbx), %rdi
    00000221: 	jmp	.Ltmp437 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp429:
    00000230: 	movq	%rbp, %rsi
    00000233: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000023a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 570
    0000023f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000246: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000024d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000254: 	jne	.Ltmp438 # Offset: 596
.Ltmp434:
    0000025a: 	movq	-0x8(%rdx), %rax
    0000025e: 	addq	$0x200, %rax
    00000264: 	jmp	.Ltmp438 # Offset: 612
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp433:
    00000270: 	testq	%r12, %r12
    00000273: 	je	.Ltmp437 # Offset: 627
    00000279: 	jmp	.Ltmp439 # Offset: 633
.Ltmp435:
    0000027b: 	callq	__stack_chk_fail@PLT # Offset: 635
.Ltmp431:
    00000280: 	leaq	DATAat0x15008(%rip), %rdi
    00000287: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 647
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0xb490
  Size        : 0x28c
  MaxSize     : 0x290
  Offset      : 0xb490
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	movq	%rdi, %rbp
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x70, %rsp
    00000013: 	movslq	init_value(%rip), %rbx
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x68(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	callq	clock@PLT # Offset: 42
    0000002f: 	movq	%rax, start_time(%rip)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	testl	%eax, %eax
    0000003e: 	jle	.Ltmp440 # Offset: 62
    00000044: 	subl	$0x1, %eax
    00000047: 	leaq	(%rax,%rax,2), %rdx
    0000004b: 	leaq	(,%rax,8), %rcx
    00000053: 	leaq	(%rax,%rdx,4), %r13
    00000057: 	leaq	(%rcx,%rax), %rdx
    0000005b: 	subq	%rax, %rcx
    0000005e: 	leaq	0x24(%rbx,%rdx,4), %rsi
    00000063: 	leaq	0x9(%rbx,%rdx), %r10
    00000068: 	movq	%rax, %rdx
    0000006b: 	leaq	(%rax,%rax,4), %rdi
    0000006f: 	shlq	$0x4, %rdx
    00000073: 	leaq	(%rax,%rcx,8), %rcx
    00000077: 	subq	%rax, %rdx
    0000007a: 	leaq	(%rax,%rdi,2), %rax
    0000007e: 	leaq	0x39(%rbx,%rcx), %r14
    00000083: 	leaq	(%rax,%rax,4), %rax
    00000087: 	leaq	0x28(%rbx,%rdi,8), %r12
    0000008c: 	leaq	0x37(%rbx,%rax), %rcx
    00000091: 	leaq	0x14(%rbx,%rdi,4), %r11
    00000096: 	leaq	0xf(%rbx,%rdx), %r9
    0000009b: 	leaq	0x1e(%rbx,%rdx,2), %r8
    000000a0: 	leaq	0x3c(%rbx,%rdx,4), %rax
    000000a5: 	leaq	0x34(%rbx,%r13,4), %rbx
.Ltmp448:
    000000aa: 	movq	%rsi, 0x20(%rsp)
    000000af: 	leaq	0x10(%rsp), %rdi
    000000b4: 	movq	%rsi, 0x30(%rsp)
    000000b9: 	movq	%rbp, %rsi
    000000bc: 	movq	%rbx, 0x10(%rsp)
    000000c1: 	movq	%rax, 0x60(%rsp)
    000000c6: 	movq	%r12, 0x18(%rsp)
    000000cb: 	movq	%r11, 0x28(%rsp)
    000000d0: 	movq	%r10, 0x38(%rsp)
    000000d5: 	movq	%r9, 0x40(%rsp)
    000000da: 	movq	%r8, 0x48(%rsp)
    000000df: 	movq	%r14, 0x50(%rsp)
    000000e4: 	movq	%rcx, 0x58(%rsp)
    000000e9: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 233
    000000ee: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000fc: 	subq	$0x20, %rax
    00000100: 	cmpq	%rax, %rbx
    00000103: 	je	.Ltmp441 # Offset: 259
    00000109: 	leaq	0x10(%rbx), %rdi
    0000010d: 	movq	0x8(%rbp), %r12
    00000111: 	movq	%rdi, (%rbx)
    00000114: 	movq	(%rbp), %r13
    00000118: 	movq	%r13, %rax
    0000011b: 	addq	%r12, %rax
    0000011e: 	je	.Ltmp442 # Offset: 286
    00000120: 	testq	%r13, %r13
    00000123: 	je	.Ltmp443 # Offset: 291
.Ltmp442:
    00000129: 	movq	%r12, 0x8(%rsp)
    0000012e: 	cmpq	$0xf, %r12
    00000132: 	ja	.Ltmp444 # Offset: 306
    00000138: 	cmpq	$0x1, %r12
    0000013c: 	jne	.Ltmp445 # Offset: 316
    00000142: 	movzbl	(%r13), %eax
    00000147: 	movb	%al, 0x10(%rbx)
.Ltmp449:
    0000014a: 	movq	%r12, 0x8(%rbx)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000015a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000016c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000173: 	je	.Ltmp446 # Offset: 371
.Ltmp450:
    00000179: 	movq	-0x20(%rax), %rbp
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	movq	%rax, end_time(%rip)
    00000189: 	movq	0x68(%rsp), %rdx
    0000018e: 	subq	%fs:0x28, %rdx
    00000197: 	jne	.Ltmp447 # Offset: 407
    0000019d: 	subq	start_time(%rip), %rax
    000001a4: 	pxor	%xmm0, %xmm0
    000001a8: 	movq	%rbp, %rdi
    000001ab: 	cvtsi2sd	%rax, %xmm0
    000001b0: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001b8: 	addq	$0x70, %rsp
    000001bc: 	popq	%rbx
    000001bd: 	popq	%rbp
    000001be: 	popq	%r12
    000001c0: 	popq	%r13
    000001c2: 	popq	%r14
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp440:
    000001d0: 	movq	%rbx, %rax
    000001d3: 	movq	%rbx, %rcx
    000001d6: 	movq	%rbx, %r14
    000001d9: 	movq	%rbx, %r8
    000001dc: 	movq	%rbx, %r9
    000001df: 	movq	%rbx, %r10
    000001e2: 	movq	%rbx, %r11
    000001e5: 	movq	%rbx, %rsi
    000001e8: 	movq	%rbx, %r12
    000001eb: 	jmp	.Ltmp448 # Offset: 491
.Ltmp444:
    000001f0: 	movq	%rbx, %rdi
    000001f3: 	leaq	0x8(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 506
    000001ff: 	movq	%rax, (%rbx)
    00000202: 	movq	%rax, %rdi
    00000205: 	movq	0x8(%rsp), %rax
    0000020a: 	movq	%rax, 0x10(%rbx)
.Ltmp451:
    0000020e: 	movq	%r12, %rdx
    00000211: 	movq	%r13, %rsi
    00000214: 	callq	memcpy@PLT # Offset: 532
    00000219: 	movq	0x8(%rsp), %r12
    0000021e: 	movq	(%rbx), %rdi
    00000221: 	jmp	.Ltmp449 # Offset: 545
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp441:
    00000230: 	movq	%rbp, %rsi
    00000233: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000023a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 570
    0000023f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000246: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000024d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000254: 	jne	.Ltmp450 # Offset: 596
.Ltmp446:
    0000025a: 	movq	-0x8(%rdx), %rax
    0000025e: 	addq	$0x200, %rax
    00000264: 	jmp	.Ltmp450 # Offset: 612
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp445:
    00000270: 	testq	%r12, %r12
    00000273: 	je	.Ltmp449 # Offset: 627
    00000279: 	jmp	.Ltmp451 # Offset: 633
.Ltmp447:
    0000027b: 	callq	__stack_chk_fail@PLT # Offset: 635
.Ltmp443:
    00000280: 	leaq	DATAat0x15008(%rip), %rdi
    00000287: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 647
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0xb720
  Size        : 0x2dc
  MaxSize     : 0x2e0
  Offset      : 0xb720
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x88, %rsp
    00000014: 	movl	init_value(%rip), %ebx
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x78(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	movd	%ebx, %xmm6
    0000002e: 	pshufd	$0x0, %xmm6, %xmm3
    00000033: 	pshufd	$0xe0, %xmm6, %xmm5
    00000038: 	movq	%xmm5, 0x18(%rsp)
    0000003e: 	movaps	%xmm3, 0x20(%rsp)
    00000043: 	movaps	%xmm3, (%rsp)
    00000047: 	callq	clock@PLT # Offset: 71
    0000004c: 	movdqa	(%rsp), %xmm3
    00000051: 	movq	0x18(%rsp), %xmm5
    00000057: 	movq	%rax, start_time(%rip)
    0000005e: 	movl	iterations(%rip), %eax
    00000064: 	testl	%eax, %eax
    00000066: 	jle	.Ltmp452 # Offset: 102
    0000006c: 	movd	%eax, %xmm7
    00000070: 	imull	$0x37, %eax, %edx
    00000073: 	leal	(%rax,%rax), %edi
    00000076: 	movl	%eax, %r8d
    00000079: 	pshufd	$0x0, %xmm7, %xmm0
    0000007e: 	movdqa	DATAat0x15d40(%rip), %xmm1
    00000086: 	imull	$0x39, %eax, %esi
    00000089: 	shll	$0x4, %r8d
    0000008d: 	movdqa	%xmm0, %xmm4
    00000091: 	movdqa	%xmm0, %xmm2
    00000095: 	pmuludq	%xmm1, %xmm4
    00000099: 	psrlq	$0x20, %xmm2
    0000009e: 	movd	%edx, %xmm6
    000000a2: 	psrlq	$0x20, %xmm1
    000000a7: 	imull	$0x34, %eax, %edx
    000000aa: 	pmuludq	%xmm2, %xmm1
    000000ae: 	addl	%ebx, %edx
    000000b0: 	pshufd	$0x8, %xmm4, %xmm4
    000000b5: 	pshufd	$0x8, %xmm1, %xmm1
    000000ba: 	punpckldq	%xmm1, %xmm4
    000000be: 	movdqa	DATAat0x15d50(%rip), %xmm1
    000000c6: 	paddd	%xmm4, %xmm3
    000000ca: 	pmuludq	%xmm1, %xmm0
    000000ce: 	psrlq	$0x20, %xmm1
    000000d3: 	pmuludq	%xmm1, %xmm2
    000000d7: 	movd	%esi, %xmm1
    000000db: 	leal	(%rdi,%rax), %esi
    000000de: 	leal	(,%rsi,4), %ecx
    000000e5: 	punpckldq	%xmm6, %xmm1
    000000e9: 	subl	%ecx, %edx
    000000eb: 	leal	(,%rax,4), %ecx
    000000f2: 	paddd	%xmm1, %xmm5
    000000f6: 	subl	%ecx, %edx
    000000f8: 	addl	%eax, %ecx
    000000fa: 	subl	%r8d, %edx
    000000fd: 	leal	(%rax,%rcx,2), %r9d
    00000101: 	pshufd	$0x8, %xmm0, %xmm0
    00000106: 	subl	%eax, %r8d
    00000109: 	subl	%r9d, %edx
    0000010c: 	leal	(%rsi,%rsi,8), %eax
    0000010f: 	pshufd	$0x8, %xmm2, %xmm2
    00000114: 	leal	(%rdx,%rsi,2), %ebx
    00000117: 	punpckldq	%xmm2, %xmm0
    0000011b: 	paddd	0x20(%rsp), %xmm0
    00000121: 	addl	%r8d, %ebx
    00000124: 	addl	%eax, %ebx
    00000126: 	subl	%edi, %ebx
    00000128: 	addl	%ecx, %ebx
.Ltmp460:
    0000012a: 	leaq	0x40(%rsp), %rdi
    0000012f: 	movq	%rbp, %rsi
    00000132: 	movl	%ebx, 0x68(%rsp)
    00000136: 	movaps	%xmm3, 0x40(%rsp)
    0000013b: 	movaps	%xmm0, 0x50(%rsp)
    00000140: 	movq	%xmm5, 0x60(%rsp)
    00000146: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 326
    0000014b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000152: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000159: 	subq	$0x20, %rax
    0000015d: 	cmpq	%rax, %rbx
    00000160: 	je	.Ltmp453 # Offset: 352
    00000166: 	leaq	0x10(%rbx), %rdi
    0000016a: 	movq	0x8(%rbp), %r12
    0000016e: 	movq	%rdi, (%rbx)
    00000171: 	movq	(%rbp), %r13
    00000175: 	movq	%r13, %rax
    00000178: 	addq	%r12, %rax
    0000017b: 	je	.Ltmp454 # Offset: 379
    0000017d: 	testq	%r13, %r13
    00000180: 	je	.Ltmp455 # Offset: 384
.Ltmp454:
    00000186: 	movq	%r12, 0x38(%rsp)
    0000018b: 	cmpq	$0xf, %r12
    0000018f: 	ja	.Ltmp456 # Offset: 399
    00000195: 	cmpq	$0x1, %r12
    00000199: 	jne	.Ltmp457 # Offset: 409
    0000019f: 	movzbl	(%r13), %eax
    000001a4: 	movb	%al, 0x10(%rbx)
.Ltmp461:
    000001a7: 	movq	%r12, 0x8(%rbx)
    000001ab: 	movb	$0x0, (%rdi,%r12)
    000001b0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001b7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001be: 	addq	$0x20, %rax
    000001c2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001c9: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001d0: 	je	.Ltmp458 # Offset: 464
.Ltmp462:
    000001d6: 	movq	-0x20(%rax), %rbp
    000001da: 	callq	clock@PLT # Offset: 474
    000001df: 	movq	%rax, end_time(%rip)
    000001e6: 	movq	0x78(%rsp), %rdx
    000001eb: 	subq	%fs:0x28, %rdx
    000001f4: 	jne	.Ltmp459 # Offset: 500
    000001fa: 	subq	start_time(%rip), %rax
    00000201: 	pxor	%xmm0, %xmm0
    00000205: 	movq	%rbp, %rdi
    00000208: 	cvtsi2sd	%rax, %xmm0
    0000020d: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000215: 	addq	$0x88, %rsp
    0000021c: 	popq	%rbx
    0000021d: 	popq	%rbp
    0000021e: 	popq	%r12
    00000220: 	popq	%r13
    00000222: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 546
    00000227: 	nopw	(%rax,%rax) # Size: 9
.Ltmp452:
    00000230: 	movdqa	%xmm3, %xmm0
    00000234: 	jmp	.Ltmp460 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp456:
    00000240: 	movq	%rbx, %rdi
    00000243: 	leaq	0x38(%rsp), %rsi
    00000248: 	xorl	%edx, %edx
    0000024a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 586
    0000024f: 	movq	%rax, (%rbx)
    00000252: 	movq	%rax, %rdi
    00000255: 	movq	0x38(%rsp), %rax
    0000025a: 	movq	%rax, 0x10(%rbx)
.Ltmp463:
    0000025e: 	movq	%r12, %rdx
    00000261: 	movq	%r13, %rsi
    00000264: 	callq	memcpy@PLT # Offset: 612
    00000269: 	movq	0x38(%rsp), %r12
    0000026e: 	movq	(%rbx), %rdi
    00000271: 	jmp	.Ltmp461 # Offset: 625
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp453:
    00000280: 	movq	%rbp, %rsi
    00000283: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000028a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 650
    0000028f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000296: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000029d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a4: 	jne	.Ltmp462 # Offset: 676
.Ltmp458:
    000002aa: 	movq	-0x8(%rdx), %rax
    000002ae: 	addq	$0x200, %rax
    000002b4: 	jmp	.Ltmp462 # Offset: 692
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp457:
    000002c0: 	testq	%r12, %r12
    000002c3: 	je	.Ltmp461 # Offset: 707
    000002c9: 	jmp	.Ltmp463 # Offset: 713
.Ltmp459:
    000002cb: 	callq	__stack_chk_fail@PLT # Offset: 715
.Ltmp455:
    000002d0: 	leaq	DATAat0x15008(%rip), %rdi
    000002d7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 727
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0xba00
  Size        : 0x269
  MaxSize     : 0x270
  Offset      : 0xba00
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x58, %rsp
    00000011: 	movl	init_value(%rip), %r12d
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x48(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	movd	%r12d, %xmm0
    0000002d: 	movl	%r12d, %eax
    00000030: 	movzwl	%r12w, %ebx
    00000034: 	punpcklwd	%xmm0, %xmm0
    00000038: 	shll	$0x10, %eax
    0000003b: 	pshufd	$0x0, %xmm0, %xmm0
    00000040: 	orl	%eax, %ebx
    00000042: 	movaps	%xmm0, 0x10(%rsp)
    00000047: 	movaps	%xmm0, (%rsp)
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movdqa	(%rsp), %xmm1
    00000055: 	movq	%rax, start_time(%rip)
    0000005c: 	movl	iterations(%rip), %eax
    00000062: 	testl	%eax, %eax
    00000064: 	jle	.Ltmp464 # Offset: 100
    0000006a: 	subl	$0x1, %eax
    0000006d: 	movdqa	DATAat0x15d80(%rip), %xmm1
    00000075: 	movdqa	0x10(%rsp), %xmm0
    0000007b: 	movd	%eax, %xmm2
    0000007f: 	leal	(,%rax,8), %ebx
    00000086: 	leal	(%rax,%rax,4), %edx
    00000089: 	movl	%eax, %r13d
    0000008c: 	punpcklwd	%xmm2, %xmm2
    00000090: 	paddw	%xmm1, %xmm0
    00000094: 	subl	%eax, %ebx
    00000096: 	shll	$0x4, %r13d
    0000009a: 	pshufd	$0x0, %xmm2, %xmm2
    0000009f: 	leal	(%rax,%rdx,2), %edx
    000000a2: 	leal	(%rax,%rbx,8), %ebx
    000000a5: 	subl	%eax, %r13d
    000000a8: 	pmullw	%xmm2, %xmm1
    000000ac: 	leal	(%rdx,%rdx,4), %edx
    000000af: 	leal	0x39(%rbx,%r12), %ebx
    000000b4: 	leal	0x37(%rdx,%r12), %edx
    000000b9: 	movzwl	%bx, %ebx
    000000bc: 	leal	0x3c(%r12,%r13,4), %r13d
    000000c1: 	shll	$0x10, %edx
    000000c4: 	orl	%edx, %ebx
    000000c6: 	paddw	%xmm0, %xmm1
.Ltmp475:
    000000ca: 	leaq	0x30(%rsp), %rdi
    000000cf: 	movq	%rbp, %rsi
    000000d2: 	movl	%ebx, 0x40(%rsp)
    000000d6: 	movw	%r13w, 0x44(%rsp)
    000000dc: 	movaps	%xmm1, 0x30(%rsp)
    000000e1: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 225
    000000e6: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f4: 	subq	$0x20, %rax
    000000f8: 	cmpq	%rax, %rbx
    000000fb: 	je	.Ltmp465 # Offset: 251
    00000101: 	leaq	0x10(%rbx), %rdi
    00000105: 	movq	0x8(%rbp), %r12
    00000109: 	movq	%rdi, (%rbx)
    0000010c: 	movq	(%rbp), %r13
    00000110: 	movq	%r13, %rax
    00000113: 	addq	%r12, %rax
    00000116: 	je	.Ltmp466 # Offset: 278
    00000118: 	testq	%r13, %r13
    0000011b: 	je	.Ltmp467 # Offset: 283
.Ltmp466:
    00000121: 	movq	%r12, 0x28(%rsp)
    00000126: 	cmpq	$0xf, %r12
    0000012a: 	ja	.Ltmp468 # Offset: 298
    00000130: 	cmpq	$0x1, %r12
    00000134: 	jne	.Ltmp469 # Offset: 308
    0000013a: 	movzbl	(%r13), %eax
    0000013f: 	movb	%al, 0x10(%rbx)
.Ltmp472:
    00000142: 	movq	%r12, 0x8(%rbx)
    00000146: 	movb	$0x0, (%rdi,%r12)
    0000014b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000152: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000159: 	addq	$0x20, %rax
    0000015d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000164: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000016b: 	je	.Ltmp470 # Offset: 363
.Ltmp473:
    00000171: 	movq	-0x20(%rax), %rbp
    00000175: 	callq	clock@PLT # Offset: 373
    0000017a: 	movq	%rax, end_time(%rip)
    00000181: 	movq	0x48(%rsp), %rdx
    00000186: 	subq	%fs:0x28, %rdx
    0000018f: 	jne	.Ltmp471 # Offset: 399
    00000195: 	subq	start_time(%rip), %rax
    0000019c: 	pxor	%xmm0, %xmm0
    000001a0: 	movq	%rbp, %rdi
    000001a3: 	cvtsi2sd	%rax, %xmm0
    000001a8: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001b0: 	addq	$0x58, %rsp
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	popq	%r12
    000001b8: 	popq	%r13
    000001ba: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 442
    000001bf: 	nop # Size: 1
.Ltmp468:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	leaq	0x28(%rsp), %rsi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 458
    000001cf: 	movq	%rax, (%rbx)
    000001d2: 	movq	%rax, %rdi
    000001d5: 	movq	0x28(%rsp), %rax
    000001da: 	movq	%rax, 0x10(%rbx)
.Ltmp474:
    000001de: 	movq	%r12, %rdx
    000001e1: 	movq	%r13, %rsi
    000001e4: 	callq	memcpy@PLT # Offset: 484
    000001e9: 	movq	0x28(%rsp), %r12
    000001ee: 	movq	(%rbx), %rdi
    000001f1: 	jmp	.Ltmp472 # Offset: 497
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp465:
    00000200: 	movq	%rbp, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp473 # Offset: 548
.Ltmp470:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp473 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp469:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp472 # Offset: 579
    00000249: 	jmp	.Ltmp474 # Offset: 585
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp464:
    00000250: 	movl	%r12d, %r13d
    00000253: 	jmp	.Ltmp475 # Offset: 595
.Ltmp467:
    00000258: 	leaq	DATAat0x15008(%rip), %rdi
    0000025f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 607
.Ltmp471:
    00000264: 	callq	__stack_chk_fail@PLT # Offset: 612
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0xbc70
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0xbc70
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x88, %rsp
    00000014: 	movl	init_value(%rip), %ebx
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x78(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	movd	%ebx, %xmm5
    0000002e: 	pshufd	$0x0, %xmm5, %xmm3
    00000033: 	pshufd	$0xe0, %xmm5, %xmm1
    00000038: 	movq	%xmm1, 0x18(%rsp)
    0000003e: 	movaps	%xmm3, 0x20(%rsp)
    00000043: 	movaps	%xmm3, (%rsp)
    00000047: 	callq	clock@PLT # Offset: 71
    0000004c: 	movdqa	(%rsp), %xmm3
    00000051: 	movq	0x18(%rsp), %xmm1
    00000057: 	movq	%rax, start_time(%rip)
    0000005e: 	movl	iterations(%rip), %eax
    00000064: 	testl	%eax, %eax
    00000066: 	jle	.Ltmp476 # Offset: 102
    0000006c: 	movd	%eax, %xmm5
    00000070: 	imull	$0xb, %eax, %esi
    00000073: 	leal	(%rax,%rax,8), %edx
    00000076: 	movl	%ebx, %ecx
    00000078: 	pshufd	$0x0, %xmm5, %xmm0
    0000007d: 	imull	$0x2a, %eax, %edi
    00000080: 	movd	%ecx, %xmm6
    00000084: 	addl	%ebx, %edx
    00000086: 	movdqa	DATAat0x15d40(%rip), %xmm1
    0000008e: 	movdqa	%xmm0, %xmm4
    00000092: 	movdqa	%xmm0, %xmm2
    00000096: 	psrlq	$0x20, %xmm2
    0000009b: 	leal	(%rsi,%rdx), %ebx
    0000009e: 	leal	(,%rax,4), %esi
    000000a5: 	pmuludq	%xmm1, %xmm4
    000000a9: 	psrlq	$0x20, %xmm1
    000000ae: 	leal	(%rsi,%rax), %edx
    000000b1: 	pmuludq	%xmm2, %xmm1
    000000b5: 	subl	%edx, %ebx
    000000b7: 	shll	$0x2, %edx
    000000ba: 	addl	%edi, %ebx
    000000bc: 	leal	(%rdx,%rax), %edi
    000000bf: 	subl	%edi, %ebx
    000000c1: 	addl	%esi, %ebx
    000000c3: 	imull	$0x39, %eax, %esi
    000000c6: 	pshufd	$0x8, %xmm4, %xmm4
    000000cb: 	imull	$0x37, %eax, %eax
    000000ce: 	addl	%edx, %ebx
    000000d0: 	pshufd	$0x8, %xmm1, %xmm1
    000000d5: 	punpckldq	%xmm1, %xmm4
    000000d9: 	movdqa	DATAat0x15d50(%rip), %xmm1
    000000e1: 	movd	%eax, %xmm7
    000000e5: 	paddd	%xmm4, %xmm3
    000000e9: 	pmuludq	%xmm1, %xmm0
    000000ed: 	psrlq	$0x20, %xmm1
    000000f2: 	pmuludq	%xmm1, %xmm2
    000000f6: 	movd	%esi, %xmm1
    000000fa: 	punpckldq	%xmm7, %xmm1
    000000fe: 	pshufd	$0x8, %xmm0, %xmm0
    00000103: 	pshufd	$0x8, %xmm2, %xmm2
    00000108: 	punpckldq	%xmm2, %xmm0
    0000010c: 	pshufd	$0xe0, %xmm6, %xmm2
    00000111: 	paddd	0x20(%rsp), %xmm0
    00000117: 	paddd	%xmm2, %xmm1
.Ltmp484:
    0000011b: 	leaq	0x40(%rsp), %rdi
    00000120: 	movq	%rbp, %rsi
    00000123: 	movl	%ebx, 0x68(%rsp)
    00000127: 	movaps	%xmm3, 0x40(%rsp)
    0000012c: 	movaps	%xmm0, 0x50(%rsp)
    00000131: 	movq	%xmm1, 0x60(%rsp)
    00000137: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 311
    0000013c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000143: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000014a: 	subq	$0x20, %rax
    0000014e: 	cmpq	%rax, %rbx
    00000151: 	je	.Ltmp477 # Offset: 337
    00000157: 	leaq	0x10(%rbx), %rdi
    0000015b: 	movq	0x8(%rbp), %r12
    0000015f: 	movq	%rdi, (%rbx)
    00000162: 	movq	(%rbp), %r13
    00000166: 	movq	%r13, %rax
    00000169: 	addq	%r12, %rax
    0000016c: 	je	.Ltmp478 # Offset: 364
    0000016e: 	testq	%r13, %r13
    00000171: 	je	.Ltmp479 # Offset: 369
.Ltmp478:
    00000177: 	movq	%r12, 0x38(%rsp)
    0000017c: 	cmpq	$0xf, %r12
    00000180: 	ja	.Ltmp480 # Offset: 384
    00000186: 	cmpq	$0x1, %r12
    0000018a: 	jne	.Ltmp481 # Offset: 394
    00000190: 	movzbl	(%r13), %eax
    00000195: 	movb	%al, 0x10(%rbx)
.Ltmp485:
    00000198: 	movq	%r12, 0x8(%rbx)
    0000019c: 	movb	$0x0, (%rdi,%r12)
    000001a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001a8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001af: 	addq	$0x20, %rax
    000001b3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001ba: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001c1: 	je	.Ltmp482 # Offset: 449
.Ltmp486:
    000001c7: 	movq	-0x20(%rax), %rbp
    000001cb: 	callq	clock@PLT # Offset: 459
    000001d0: 	movq	%rax, end_time(%rip)
    000001d7: 	movq	0x78(%rsp), %rdx
    000001dc: 	subq	%fs:0x28, %rdx
    000001e5: 	jne	.Ltmp483 # Offset: 485
    000001eb: 	subq	start_time(%rip), %rax
    000001f2: 	pxor	%xmm0, %xmm0
    000001f6: 	movq	%rbp, %rdi
    000001f9: 	cvtsi2sd	%rax, %xmm0
    000001fe: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000206: 	addq	$0x88, %rsp
    0000020d: 	popq	%rbx
    0000020e: 	popq	%rbp
    0000020f: 	popq	%r12
    00000211: 	popq	%r13
    00000213: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 531
    00000218: 	nopl	(%rax,%rax) # Size: 8
.Ltmp476:
    00000220: 	movdqa	%xmm3, %xmm0
    00000224: 	jmp	.Ltmp484 # Offset: 548
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp480:
    00000230: 	movq	%rbx, %rdi
    00000233: 	leaq	0x38(%rsp), %rsi
    00000238: 	xorl	%edx, %edx
    0000023a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 570
    0000023f: 	movq	%rax, (%rbx)
    00000242: 	movq	%rax, %rdi
    00000245: 	movq	0x38(%rsp), %rax
    0000024a: 	movq	%rax, 0x10(%rbx)
.Ltmp487:
    0000024e: 	movq	%r12, %rdx
    00000251: 	movq	%r13, %rsi
    00000254: 	callq	memcpy@PLT # Offset: 596
    00000259: 	movq	0x38(%rsp), %r12
    0000025e: 	movq	(%rbx), %rdi
    00000261: 	jmp	.Ltmp485 # Offset: 609
    00000266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp477:
    00000270: 	movq	%rbp, %rsi
    00000273: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000027a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 634
    0000027f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000286: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000028d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000294: 	jne	.Ltmp486 # Offset: 660
.Ltmp482:
    0000029a: 	movq	-0x8(%rdx), %rax
    0000029e: 	addq	$0x200, %rax
    000002a4: 	jmp	.Ltmp486 # Offset: 676
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp481:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp485 # Offset: 691
    000002b9: 	jmp	.Ltmp487 # Offset: 697
.Ltmp483:
    000002bb: 	callq	__stack_chk_fail@PLT # Offset: 699
.Ltmp479:
    000002c0: 	leaq	DATAat0x15008(%rip), %rdi
    000002c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0xbf40
  Size        : 0x269
  MaxSize     : 0x270
  Offset      : 0xbf40
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x58, %rsp
    00000011: 	movl	init_value(%rip), %r13d
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x48(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	movd	%r13d, %xmm0
    0000002d: 	movl	%r13d, %eax
    00000030: 	movzwl	%r13w, %ebx
    00000034: 	punpcklwd	%xmm0, %xmm0
    00000038: 	shll	$0x10, %eax
    0000003b: 	pshufd	$0x0, %xmm0, %xmm0
    00000040: 	orl	%eax, %ebx
    00000042: 	movaps	%xmm0, 0x10(%rsp)
    00000047: 	movaps	%xmm0, (%rsp)
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movdqa	(%rsp), %xmm1
    00000055: 	movq	%rax, start_time(%rip)
    0000005c: 	movl	iterations(%rip), %eax
    00000062: 	testl	%eax, %eax
    00000064: 	jle	.Ltmp488 # Offset: 100
    0000006a: 	subl	$0x1, %eax
    0000006d: 	movdqa	DATAat0x15d80(%rip), %xmm1
    00000075: 	movdqa	0x10(%rsp), %xmm0
    0000007b: 	movd	%eax, %xmm2
    0000007f: 	leal	(,%rax,8), %ebx
    00000086: 	leal	(%rax,%rax,4), %edx
    00000089: 	movl	%eax, %r12d
    0000008c: 	punpcklwd	%xmm2, %xmm2
    00000090: 	paddw	%xmm1, %xmm0
    00000094: 	subl	%eax, %ebx
    00000096: 	shll	$0x4, %r12d
    0000009a: 	pshufd	$0x0, %xmm2, %xmm2
    0000009f: 	subl	%eax, %r12d
    000000a2: 	leal	(%rax,%rbx,8), %ebx
    000000a5: 	pmullw	%xmm2, %xmm1
    000000a9: 	leal	(%rax,%rdx,2), %eax
    000000ac: 	leal	0x39(%rbx,%r13), %ebx
    000000b1: 	leal	(%rax,%rax,4), %eax
    000000b4: 	movzwl	%bx, %ebx
    000000b7: 	leal	0x3c(%r13,%r12,4), %r12d
    000000bc: 	leal	0x37(%rax,%r13), %eax
    000000c1: 	shll	$0x10, %eax
    000000c4: 	orl	%eax, %ebx
    000000c6: 	paddw	%xmm0, %xmm1
.Ltmp499:
    000000ca: 	leaq	0x30(%rsp), %rdi
    000000cf: 	movq	%rbp, %rsi
    000000d2: 	movl	%ebx, 0x40(%rsp)
    000000d6: 	movw	%r12w, 0x44(%rsp)
    000000dc: 	movaps	%xmm1, 0x30(%rsp)
    000000e1: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 225
    000000e6: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f4: 	subq	$0x20, %rax
    000000f8: 	cmpq	%rax, %rbx
    000000fb: 	je	.Ltmp489 # Offset: 251
    00000101: 	leaq	0x10(%rbx), %rdi
    00000105: 	movq	0x8(%rbp), %r12
    00000109: 	movq	%rdi, (%rbx)
    0000010c: 	movq	(%rbp), %r13
    00000110: 	movq	%r13, %rax
    00000113: 	addq	%r12, %rax
    00000116: 	je	.Ltmp490 # Offset: 278
    00000118: 	testq	%r13, %r13
    0000011b: 	je	.Ltmp491 # Offset: 283
.Ltmp490:
    00000121: 	movq	%r12, 0x28(%rsp)
    00000126: 	cmpq	$0xf, %r12
    0000012a: 	ja	.Ltmp492 # Offset: 298
    00000130: 	cmpq	$0x1, %r12
    00000134: 	jne	.Ltmp493 # Offset: 308
    0000013a: 	movzbl	(%r13), %eax
    0000013f: 	movb	%al, 0x10(%rbx)
.Ltmp496:
    00000142: 	movq	%r12, 0x8(%rbx)
    00000146: 	movb	$0x0, (%rdi,%r12)
    0000014b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000152: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000159: 	addq	$0x20, %rax
    0000015d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000164: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000016b: 	je	.Ltmp494 # Offset: 363
.Ltmp497:
    00000171: 	movq	-0x20(%rax), %rbp
    00000175: 	callq	clock@PLT # Offset: 373
    0000017a: 	movq	%rax, end_time(%rip)
    00000181: 	movq	0x48(%rsp), %rdx
    00000186: 	subq	%fs:0x28, %rdx
    0000018f: 	jne	.Ltmp495 # Offset: 399
    00000195: 	subq	start_time(%rip), %rax
    0000019c: 	pxor	%xmm0, %xmm0
    000001a0: 	movq	%rbp, %rdi
    000001a3: 	cvtsi2sd	%rax, %xmm0
    000001a8: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001b0: 	addq	$0x58, %rsp
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	popq	%r12
    000001b8: 	popq	%r13
    000001ba: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 442
    000001bf: 	nop # Size: 1
.Ltmp492:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	leaq	0x28(%rsp), %rsi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 458
    000001cf: 	movq	%rax, (%rbx)
    000001d2: 	movq	%rax, %rdi
    000001d5: 	movq	0x28(%rsp), %rax
    000001da: 	movq	%rax, 0x10(%rbx)
.Ltmp498:
    000001de: 	movq	%r12, %rdx
    000001e1: 	movq	%r13, %rsi
    000001e4: 	callq	memcpy@PLT # Offset: 484
    000001e9: 	movq	0x28(%rsp), %r12
    000001ee: 	movq	(%rbx), %rdi
    000001f1: 	jmp	.Ltmp496 # Offset: 497
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp489:
    00000200: 	movq	%rbp, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp497 # Offset: 548
.Ltmp494:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp497 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp493:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp496 # Offset: 579
    00000249: 	jmp	.Ltmp498 # Offset: 585
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp488:
    00000250: 	movl	%r13d, %r12d
    00000253: 	jmp	.Ltmp499 # Offset: 595
.Ltmp491:
    00000258: 	leaq	DATAat0x15008(%rip), %rdi
    0000025f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 607
.Ltmp495:
    00000264: 	callq	__stack_chk_fail@PLT # Offset: 612
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0xc1b0
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0xc1b0
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm5, %xmm5
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x88(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cvtsi2sdl	init_value(%rip), %xmm5
    00000033: 	movapd	%xmm5, %xmm0
    00000037: 	movsd	%xmm5, 0x18(%rsp)
    0000003d: 	unpcklpd	%xmm0, %xmm0
    00000041: 	movaps	%xmm0, (%rsp)
    00000045: 	callq	clock@PLT # Offset: 69
    0000004a: 	movl	iterations(%rip), %edx
    00000050: 	movapd	(%rsp), %xmm0
    00000055: 	movq	%rax, start_time(%rip)
    0000005c: 	movsd	0x18(%rsp), %xmm5
    00000062: 	movapd	%xmm0, %xmm1
    00000066: 	movapd	%xmm0, %xmm2
    0000006a: 	movapd	%xmm0, %xmm3
    0000006e: 	testl	%edx, %edx
    00000070: 	movapd	%xmm0, %xmm4
    00000074: 	jle	.Ltmp500 # Offset: 116
    00000076: 	movapd	DATAat0x15db0(%rip), %xmm10
    0000007f: 	movapd	DATAat0x15de0(%rip), %xmm7
    00000087: 	xorl	%eax, %eax
    00000089: 	movapd	DATAat0x15dc0(%rip), %xmm9
    00000092: 	movapd	DATAat0x15df0(%rip), %xmm6
    0000009a: 	movapd	DATAat0x15dd0(%rip), %xmm8
.Ltmp501:
    000000a3: 	addl	$0x1, %eax
    000000a6: 	addpd	%xmm10, %xmm0
    000000ab: 	addpd	%xmm9, %xmm4
    000000b0: 	addpd	%xmm8, %xmm3
    000000b5: 	addpd	%xmm7, %xmm2
    000000b9: 	addpd	%xmm6, %xmm1
    000000bd: 	addsd	DATAat0x15c70(%rip), %xmm5
    000000c5: 	cmpl	%edx, %eax
    000000c7: 	jne	.Ltmp501 # Offset: 199
.Ltmp500:
    000000c9: 	leaq	0x30(%rsp), %rdi
    000000ce: 	movq	%rbp, %rsi
    000000d1: 	movaps	%xmm0, 0x30(%rsp)
    000000d6: 	movaps	%xmm4, 0x40(%rsp)
    000000db: 	movaps	%xmm3, 0x50(%rsp)
    000000e0: 	movaps	%xmm2, 0x60(%rsp)
    000000e5: 	movaps	%xmm1, 0x70(%rsp)
    000000ea: 	movsd	%xmm5, 0x80(%rsp)
    000000f3: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 243
    000000f8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000106: 	subq	$0x20, %rax
    0000010a: 	cmpq	%rax, %rbx
    0000010d: 	je	.Ltmp502 # Offset: 269
    00000113: 	leaq	0x10(%rbx), %rdi
    00000117: 	movq	0x8(%rbp), %r12
    0000011b: 	movq	%rdi, (%rbx)
    0000011e: 	movq	(%rbp), %r13
    00000122: 	movq	%r13, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp503 # Offset: 296
    0000012a: 	testq	%r13, %r13
    0000012d: 	je	.Ltmp504 # Offset: 301
.Ltmp503:
    00000133: 	movq	%r12, 0x28(%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp505 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp506 # Offset: 326
    0000014c: 	movzbl	(%r13), %eax
    00000151: 	movb	%al, 0x10(%rbx)
.Ltmp509:
    00000154: 	movq	%r12, 0x8(%rbx)
    00000158: 	movb	$0x0, (%rdi,%r12)
    0000015d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000164: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016b: 	addq	$0x20, %rax
    0000016f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000176: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017d: 	je	.Ltmp507 # Offset: 381
.Ltmp510:
    00000183: 	movq	-0x20(%rax), %rbp
    00000187: 	callq	clock@PLT # Offset: 391
    0000018c: 	movq	%rax, end_time(%rip)
    00000193: 	movq	0x88(%rsp), %rdx
    0000019b: 	subq	%fs:0x28, %rdx
    000001a4: 	jne	.Ltmp508 # Offset: 420
    000001aa: 	subq	start_time(%rip), %rax
    000001b1: 	pxor	%xmm0, %xmm0
    000001b5: 	movq	%rbp, %rdi
    000001b8: 	cvtsi2sd	%rax, %xmm0
    000001bd: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001c5: 	addq	$0x98, %rsp
    000001cc: 	popq	%rbx
    000001cd: 	popq	%rbp
    000001ce: 	popq	%r12
    000001d0: 	popq	%r13
    000001d2: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 466
    000001d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp505:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	leaq	0x28(%rsp), %rsi
    000001e8: 	xorl	%edx, %edx
    000001ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 490
    000001ef: 	movq	%rax, (%rbx)
    000001f2: 	movq	%rax, %rdi
    000001f5: 	movq	0x28(%rsp), %rax
    000001fa: 	movq	%rax, 0x10(%rbx)
.Ltmp511:
    000001fe: 	movq	%r12, %rdx
    00000201: 	movq	%r13, %rsi
    00000204: 	callq	memcpy@PLT # Offset: 516
    00000209: 	movq	0x28(%rsp), %r12
    0000020e: 	movq	(%rbx), %rdi
    00000211: 	jmp	.Ltmp509 # Offset: 529
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp502:
    00000220: 	movq	%rbp, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp510 # Offset: 580
.Ltmp507:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp510 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp506:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp509 # Offset: 611
    00000269: 	jmp	.Ltmp511 # Offset: 617
.Ltmp508:
    0000026b: 	callq	__stack_chk_fail@PLT # Offset: 619
.Ltmp504:
    00000270: 	leaq	DATAat0x15008(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global0IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0xc430
  Size        : 0x20c
  MaxSize     : 0x210
  Offset      : 0xc430
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global0IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	leaq	data16(%rip), %rdi
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movl	iterations(%rip), %eax
    0000003a: 	movd	%eax, %xmm0
    0000003e: 	leal	(,%rax,8), %esi
    00000045: 	leal	(%rax,%rax,4), %edx
    00000048: 	movl	%eax, %ecx
    0000004a: 	punpcklwd	%xmm0, %xmm0
    0000004e: 	subl	%eax, %esi
    00000050: 	shll	$0x4, %ecx
    00000053: 	leal	(%rax,%rdx,2), %edx
    00000056: 	pshufd	$0x0, %xmm0, %xmm0
    0000005b: 	leal	(%rax,%rsi,8), %esi
    0000005e: 	leal	(%rdx,%rdx,4), %edx
    00000061: 	subl	%eax, %ecx
    00000063: 	pmullw	DATAat0x15d80(%rip), %xmm0
    0000006b: 	paddw	data16(%rip), %xmm0
    00000073: 	addw	%si, data16+16(%rip)
    0000007a: 	movq	%rbp, %rsi
    0000007d: 	shll	$0x2, %ecx
    00000080: 	addw	%dx, data16+18(%rip)
    00000087: 	addw	%cx, data16+20(%rip)
    0000008e: 	movaps	%xmm0, data16(%rip)
    00000095: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 149
    0000009a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000a8: 	subq	$0x20, %rax
    000000ac: 	cmpq	%rax, %rbx
    000000af: 	je	.Ltmp512 # Offset: 175
    000000b5: 	leaq	0x10(%rbx), %rdi
    000000b9: 	movq	0x8(%rbp), %r12
    000000bd: 	movq	%rdi, (%rbx)
    000000c0: 	movq	(%rbp), %r13
    000000c4: 	movq	%r13, %rax
    000000c7: 	addq	%r12, %rax
    000000ca: 	je	.Ltmp513 # Offset: 202
    000000cc: 	testq	%r13, %r13
    000000cf: 	je	.Ltmp514 # Offset: 207
.Ltmp513:
    000000d5: 	movq	%r12, (%rsp)
    000000d9: 	cmpq	$0xf, %r12
    000000dd: 	ja	.Ltmp515 # Offset: 221
    000000e3: 	cmpq	$0x1, %r12
    000000e7: 	jne	.Ltmp516 # Offset: 231
    000000ed: 	movzbl	(%r13), %eax
    000000f2: 	movb	%al, 0x10(%rbx)
.Ltmp519:
    000000f5: 	movq	%r12, 0x8(%rbx)
    000000f9: 	movb	$0x0, (%rdi,%r12)
    000000fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000105: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000010c: 	addq	$0x20, %rax
    00000110: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000117: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000011e: 	je	.Ltmp517 # Offset: 286
.Ltmp520:
    00000124: 	movq	-0x20(%rax), %rbp
    00000128: 	callq	clock@PLT # Offset: 296
    0000012d: 	movq	%rax, end_time(%rip)
    00000134: 	movq	0x8(%rsp), %rdx
    00000139: 	subq	%fs:0x28, %rdx
    00000142: 	jne	.Ltmp518 # Offset: 322
    00000148: 	subq	start_time(%rip), %rax
    0000014f: 	pxor	%xmm0, %xmm0
    00000153: 	movq	%rbp, %rdi
    00000156: 	cvtsi2sd	%rax, %xmm0
    0000015b: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000163: 	addq	$0x18, %rsp
    00000167: 	popq	%rbx
    00000168: 	popq	%rbp
    00000169: 	popq	%r12
    0000016b: 	popq	%r13
    0000016d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 365
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp515:
    00000178: 	movq	%rbx, %rdi
    0000017b: 	movq	%rsp, %rsi
    0000017e: 	xorl	%edx, %edx
    00000180: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 384
    00000185: 	movq	%rax, (%rbx)
    00000188: 	movq	%rax, %rdi
    0000018b: 	movq	(%rsp), %rax
    0000018f: 	movq	%rax, 0x10(%rbx)
.Ltmp521:
    00000193: 	movq	%r12, %rdx
    00000196: 	movq	%r13, %rsi
    00000199: 	callq	memcpy@PLT # Offset: 409
    0000019e: 	movq	(%rsp), %r12
    000001a2: 	movq	(%rbx), %rdi
    000001a5: 	jmp	.Ltmp519 # Offset: 421
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp512:
    000001b0: 	movq	%rbp, %rsi
    000001b3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ba: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 442
    000001bf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001c6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001cd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001d4: 	jne	.Ltmp520 # Offset: 468
.Ltmp517:
    000001da: 	movq	-0x8(%rdx), %rax
    000001de: 	addq	$0x200, %rax
    000001e4: 	jmp	.Ltmp520 # Offset: 484
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp516:
    000001f0: 	testq	%r12, %r12
    000001f3: 	je	.Ltmp519 # Offset: 499
    000001f9: 	jmp	.Ltmp521 # Offset: 505
.Ltmp514:
    000001fb: 	leaq	DATAat0x15008(%rip), %rdi
    00000202: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 514
.Ltmp518:
    00000207: 	callq	__stack_chk_fail@PLT # Offset: 519
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global0IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global0ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0xc640
  Size        : 0x334
  MaxSize     : 0x340
  Offset      : 0xc640
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global0ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movd	iterations(%rip), %xmm6
    0000002e: 	pxor	%xmm2, %xmm2
    00000032: 	movdqa	DATAat0x15d50(%rip), %xmm8
    0000003b: 	movdqa	%xmm2, %xmm7
    0000003f: 	movdqa	%xmm2, %xmm5
    00000043: 	movdqa	%xmm2, %xmm10
    00000048: 	movq	%rbp, %rsi
    0000004b: 	pshufd	$0x0, %xmm6, %xmm0
    00000050: 	movdqa	DATAat0x15d40(%rip), %xmm6
    00000058: 	movq	%rax, start_time(%rip)
    0000005f: 	leaq	data64(%rip), %rdi
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	movslq	iterations(%rip), %rax
    00000071: 	punpckhdq	%xmm0, %xmm1
    00000075: 	movdqa	%xmm6, %xmm4
    00000079: 	punpckldq	%xmm0, %xmm0
    0000007d: 	punpckhdq	%xmm6, %xmm4
    00000081: 	pcmpgtd	%xmm1, %xmm7
    00000085: 	punpckldq	%xmm6, %xmm6
    00000089: 	pcmpgtd	%xmm4, %xmm5
    0000008d: 	leaq	(,%rax,8), %rdx
    00000095: 	leaq	(%rax,%rax,4), %rcx
    00000099: 	subq	%rax, %rdx
    0000009c: 	leaq	(%rax,%rcx,2), %rcx
    000000a0: 	movdqa	%xmm7, %xmm3
    000000a4: 	leaq	(%rax,%rdx,8), %rdx
    000000a8: 	addq	data64+64(%rip), %rdx
    000000af: 	pmuludq	%xmm1, %xmm5
    000000b3: 	pmuludq	%xmm4, %xmm3
    000000b7: 	leaq	(%rcx,%rcx,4), %rcx
    000000bb: 	addq	data64+72(%rip), %rcx
    000000c2: 	pmuludq	%xmm1, %xmm4
    000000c6: 	paddq	%xmm5, %xmm3
    000000ca: 	movdqa	%xmm2, %xmm5
    000000ce: 	psllq	$0x20, %xmm3
    000000d3: 	pcmpgtd	%xmm0, %xmm5
    000000d7: 	paddq	%xmm3, %xmm4
    000000db: 	movdqa	%xmm8, %xmm3
    000000e0: 	paddq	data64+16(%rip), %xmm4
    000000e8: 	punpckldq	%xmm8, %xmm3
    000000ed: 	punpckhdq	%xmm8, %xmm8
    000000f2: 	pcmpgtd	%xmm3, %xmm10
    000000f7: 	movdqa	%xmm5, %xmm9
    000000fc: 	movaps	%xmm4, data64+16(%rip)
    00000103: 	pmuludq	%xmm3, %xmm9
    00000108: 	pmuludq	%xmm0, %xmm3
    0000010c: 	pmuludq	%xmm6, %xmm5
    00000110: 	pmuludq	%xmm8, %xmm7
    00000115: 	pmuludq	%xmm0, %xmm10
    0000011a: 	paddq	%xmm10, %xmm9
    0000011f: 	psllq	$0x20, %xmm9
    00000125: 	paddq	%xmm9, %xmm3
    0000012a: 	movdqa	%xmm2, %xmm9
    0000012f: 	paddq	data64+32(%rip), %xmm3
    00000137: 	pcmpgtd	%xmm6, %xmm2
    0000013b: 	pcmpgtd	%xmm8, %xmm9
    00000140: 	movaps	%xmm3, data64+32(%rip)
    00000147: 	pmuludq	%xmm0, %xmm2
    0000014b: 	pmuludq	%xmm6, %xmm0
    0000014f: 	movq	%rcx, %xmm6
    00000154: 	pmuludq	%xmm1, %xmm9
    00000159: 	pmuludq	%xmm8, %xmm1
    0000015e: 	paddq	%xmm2, %xmm5
    00000162: 	psllq	$0x20, %xmm5
    00000167: 	paddq	%xmm9, %xmm7
    0000016c: 	paddq	%xmm5, %xmm0
    00000170: 	paddq	data64(%rip), %xmm0
    00000178: 	psllq	$0x20, %xmm7
    0000017d: 	paddq	%xmm7, %xmm1
    00000181: 	paddq	data64+48(%rip), %xmm1
    00000189: 	movaps	%xmm0, data64(%rip)
    00000190: 	movq	%rdx, %xmm0
    00000195: 	movq	%rax, %rdx
    00000198: 	shlq	$0x4, %rdx
    0000019c: 	punpcklqdq	%xmm6, %xmm0
    000001a0: 	movaps	%xmm1, data64+48(%rip)
    000001a7: 	subq	%rax, %rdx
    000001aa: 	movaps	%xmm0, data64+64(%rip)
    000001b1: 	leaq	(,%rdx,4), %rax
    000001b9: 	addq	%rax, data64+80(%rip)
    000001c0: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 448
    000001c5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001cc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d3: 	subq	$0x20, %rax
    000001d7: 	cmpq	%rax, %rbx
    000001da: 	je	.Ltmp522 # Offset: 474
    000001e0: 	leaq	0x10(%rbx), %rdi
    000001e4: 	movq	0x8(%rbp), %r12
    000001e8: 	movq	%rdi, (%rbx)
    000001eb: 	movq	(%rbp), %r13
    000001ef: 	movq	%r13, %rax
    000001f2: 	addq	%r12, %rax
    000001f5: 	je	.Ltmp523 # Offset: 501
    000001f7: 	testq	%r13, %r13
    000001fa: 	je	.Ltmp524 # Offset: 506
.Ltmp523:
    00000200: 	movq	%r12, (%rsp)
    00000204: 	cmpq	$0xf, %r12
    00000208: 	ja	.Ltmp525 # Offset: 520
    0000020e: 	cmpq	$0x1, %r12
    00000212: 	jne	.Ltmp526 # Offset: 530
    00000218: 	movzbl	(%r13), %eax
    0000021d: 	movb	%al, 0x10(%rbx)
.Ltmp529:
    00000220: 	movq	%r12, 0x8(%rbx)
    00000224: 	movb	$0x0, (%rdi,%r12)
    00000229: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000230: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000237: 	addq	$0x20, %rax
    0000023b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000242: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000249: 	je	.Ltmp527 # Offset: 585
.Ltmp530:
    0000024f: 	movq	-0x20(%rax), %rbp
    00000253: 	callq	clock@PLT # Offset: 595
    00000258: 	movq	%rax, end_time(%rip)
    0000025f: 	movq	0x8(%rsp), %rdx
    00000264: 	subq	%fs:0x28, %rdx
    0000026d: 	jne	.Ltmp528 # Offset: 621
    00000273: 	subq	start_time(%rip), %rax
    0000027a: 	pxor	%xmm0, %xmm0
    0000027e: 	movq	%rbp, %rdi
    00000281: 	cvtsi2sd	%rax, %xmm0
    00000286: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000028e: 	addq	$0x18, %rsp
    00000292: 	popq	%rbx
    00000293: 	popq	%rbp
    00000294: 	popq	%r12
    00000296: 	popq	%r13
    00000298: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 664
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp525:
    000002a0: 	movq	%rbx, %rdi
    000002a3: 	movq	%rsp, %rsi
    000002a6: 	xorl	%edx, %edx
    000002a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 680
    000002ad: 	movq	%rax, (%rbx)
    000002b0: 	movq	%rax, %rdi
    000002b3: 	movq	(%rsp), %rax
    000002b7: 	movq	%rax, 0x10(%rbx)
.Ltmp531:
    000002bb: 	movq	%r12, %rdx
    000002be: 	movq	%r13, %rsi
    000002c1: 	callq	memcpy@PLT # Offset: 705
    000002c6: 	movq	(%rsp), %r12
    000002ca: 	movq	(%rbx), %rdi
    000002cd: 	jmp	.Ltmp529 # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp522:
    000002d8: 	movq	%rbp, %rsi
    000002db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 738
    000002e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fc: 	jne	.Ltmp530 # Offset: 764
.Ltmp527:
    00000302: 	movq	-0x8(%rdx), %rax
    00000306: 	addq	$0x200, %rax
    0000030c: 	jmp	.Ltmp530 # Offset: 780
    00000311: 	nopl	(%rax) # Size: 7
.Ltmp526:
    00000318: 	testq	%r12, %r12
    0000031b: 	je	.Ltmp529 # Offset: 795
    00000321: 	jmp	.Ltmp531 # Offset: 801
.Ltmp524:
    00000323: 	leaq	DATAat0x15008(%rip), %rdi
    0000032a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 810
.Ltmp528:
    0000032f: 	callq	__stack_chk_fail@PLT # Offset: 815
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global0ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global0IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0xc980
  Size        : 0x24c
  MaxSize     : 0x250
  Offset      : 0xc980
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global0IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	DATAat0x15d50(%rip), %xmm1
    0000002e: 	movq	%rbp, %rsi
    00000031: 	leaq	data32(%rip), %rdi
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	movl	iterations(%rip), %eax
    00000045: 	movd	%eax, %xmm4
    00000049: 	imull	$0x39, %eax, %edx
    0000004c: 	addl	%edx, data32+32(%rip)
    00000052: 	pshufd	$0x0, %xmm4, %xmm0
    00000057: 	imull	$0x37, %eax, %edx
    0000005a: 	addl	%edx, data32+36(%rip)
    00000060: 	movdqa	%xmm0, %xmm2
    00000064: 	imull	$0x3c, %eax, %eax
    00000067: 	movdqa	%xmm0, %xmm3
    0000006b: 	addl	%eax, data32+40(%rip)
    00000071: 	pmuludq	%xmm1, %xmm2
    00000075: 	psrlq	$0x20, %xmm3
    0000007a: 	psrlq	$0x20, %xmm1
    0000007f: 	pmuludq	%xmm3, %xmm1
    00000083: 	pshufd	$0x8, %xmm2, %xmm2
    00000088: 	pshufd	$0x8, %xmm1, %xmm1
    0000008d: 	punpckldq	%xmm1, %xmm2
    00000091: 	movdqa	data32+16(%rip), %xmm1
    00000099: 	paddd	%xmm2, %xmm1
    0000009d: 	movdqa	DATAat0x15d40(%rip), %xmm2
    000000a5: 	movaps	%xmm1, data32+16(%rip)
    000000ac: 	pmuludq	%xmm2, %xmm0
    000000b0: 	psrlq	$0x20, %xmm2
    000000b5: 	pmuludq	%xmm2, %xmm3
    000000b9: 	pshufd	$0x8, %xmm0, %xmm0
    000000be: 	pshufd	$0x8, %xmm3, %xmm3
    000000c3: 	punpckldq	%xmm3, %xmm0
    000000c7: 	paddd	data32(%rip), %xmm0
    000000cf: 	movaps	%xmm0, data32(%rip)
    000000d6: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 214
    000000db: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e9: 	subq	$0x20, %rax
    000000ed: 	cmpq	%rax, %rbx
    000000f0: 	je	.Ltmp532 # Offset: 240
    000000f6: 	leaq	0x10(%rbx), %rdi
    000000fa: 	movq	0x8(%rbp), %r12
    000000fe: 	movq	%rdi, (%rbx)
    00000101: 	movq	(%rbp), %r13
    00000105: 	movq	%r13, %rax
    00000108: 	addq	%r12, %rax
    0000010b: 	je	.Ltmp533 # Offset: 267
    0000010d: 	testq	%r13, %r13
    00000110: 	je	.Ltmp534 # Offset: 272
.Ltmp533:
    00000116: 	movq	%r12, (%rsp)
    0000011a: 	cmpq	$0xf, %r12
    0000011e: 	ja	.Ltmp535 # Offset: 286
    00000124: 	cmpq	$0x1, %r12
    00000128: 	jne	.Ltmp536 # Offset: 296
    0000012e: 	movzbl	(%r13), %eax
    00000133: 	movb	%al, 0x10(%rbx)
.Ltmp539:
    00000136: 	movq	%r12, 0x8(%rbx)
    0000013a: 	movb	$0x0, (%rdi,%r12)
    0000013f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000146: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014d: 	addq	$0x20, %rax
    00000151: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000158: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015f: 	je	.Ltmp537 # Offset: 351
.Ltmp540:
    00000165: 	movq	-0x20(%rax), %rbp
    00000169: 	callq	clock@PLT # Offset: 361
    0000016e: 	movq	%rax, end_time(%rip)
    00000175: 	movq	0x8(%rsp), %rdx
    0000017a: 	subq	%fs:0x28, %rdx
    00000183: 	jne	.Ltmp538 # Offset: 387
    00000189: 	subq	start_time(%rip), %rax
    00000190: 	pxor	%xmm0, %xmm0
    00000194: 	movq	%rbp, %rdi
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001a4: 	addq	$0x18, %rsp
    000001a8: 	popq	%rbx
    000001a9: 	popq	%rbp
    000001aa: 	popq	%r12
    000001ac: 	popq	%r13
    000001ae: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 430
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp535:
    000001b8: 	movq	%rbx, %rdi
    000001bb: 	movq	%rsp, %rsi
    000001be: 	xorl	%edx, %edx
    000001c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 448
    000001c5: 	movq	%rax, (%rbx)
    000001c8: 	movq	%rax, %rdi
    000001cb: 	movq	(%rsp), %rax
    000001cf: 	movq	%rax, 0x10(%rbx)
.Ltmp541:
    000001d3: 	movq	%r12, %rdx
    000001d6: 	movq	%r13, %rsi
    000001d9: 	callq	memcpy@PLT # Offset: 473
    000001de: 	movq	(%rsp), %r12
    000001e2: 	movq	(%rbx), %rdi
    000001e5: 	jmp	.Ltmp539 # Offset: 485
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp532:
    000001f0: 	movq	%rbp, %rsi
    000001f3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001fa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 506
    000001ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000206: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000214: 	jne	.Ltmp540 # Offset: 532
.Ltmp537:
    0000021a: 	movq	-0x8(%rdx), %rax
    0000021e: 	addq	$0x200, %rax
    00000224: 	jmp	.Ltmp540 # Offset: 548
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp536:
    00000230: 	testq	%r12, %r12
    00000233: 	je	.Ltmp539 # Offset: 563
    00000239: 	jmp	.Ltmp541 # Offset: 569
.Ltmp534:
    0000023b: 	leaq	DATAat0x15008(%rip), %rdi
    00000242: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 578
.Ltmp538:
    00000247: 	callq	__stack_chk_fail@PLT # Offset: 583
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global0IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global1IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0xcbd0
  Size        : 0x264
  MaxSize     : 0x270
  Offset      : 0xcbd0
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global1IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movzwl	data16+8(%rip), %edi
    0000002d: 	movq	data16(%rip), %xmm0
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp542 # Offset: 68
    00000046: 	movq	DATAat0x15d80(%rip), %xmm2
    0000004e: 	leal	-0x1(%rax), %edx
    00000051: 	movd	%edx, %xmm3
    00000055: 	leal	(%rdx,%rdx,8), %edx
    00000058: 	pshuflw	$0x0, %xmm3, %xmm1
    0000005d: 	leal	0x24(%rdi,%rdx,4), %edi
    00000061: 	pmullw	%xmm2, %xmm1
    00000065: 	paddw	%xmm1, %xmm0
    00000069: 	paddw	%xmm2, %xmm0
.Ltmp542:
    0000006d: 	leal	(%rax,%rax,2), %ecx
    00000070: 	movw	%di, data16+8(%rip)
    00000077: 	pextrw	$0x3, %xmm0, %r9d
    0000007d: 	pextrw	$0x2, %xmm0, %r8d
    00000083: 	movq	%xmm0, data16(%rip)
    0000008b: 	shll	$0x2, %ecx
    0000008e: 	leal	(%rcx,%rax), %edx
    00000091: 	shll	$0x2, %edx
    00000094: 	addw	init_value(%rip), %dx
    0000009b: 	movl	%edx, %esi
    0000009d: 	subl	%ecx, %esi
    0000009f: 	pextrw	$0x0, %xmm0, %ecx
    000000a4: 	cmpw	%cx, %dx
    000000a7: 	jne	.Ltmp543 # Offset: 167
    000000a9: 	pextrw	$0x1, %xmm0, %edx
    000000ae: 	cmpw	%dx, %si
    000000b1: 	jne	.Ltmp543 # Offset: 177
    000000b3: 	leal	(,%rax,4), %edx
    000000ba: 	shll	$0x4, %eax
    000000bd: 	subl	%edx, %esi
    000000bf: 	movl	%esi, %edx
    000000c1: 	subl	%eax, %edx
    000000c3: 	cmpw	%r9w, %dx
    000000c7: 	setne	%al
    000000ca: 	cmpw	%r8w, %si
    000000ce: 	setne	%dl
    000000d1: 	orb	%dl, %al
    000000d3: 	jne	.Ltmp543 # Offset: 211
    000000d5: 	cmpw	%si, %di
    000000d8: 	je	.Ltmp544 # Offset: 216
.Ltmp543:
    000000da: 	movq	(%rbp), %rdx
    000000de: 	leaq	DATAat0x158f3(%rip), %rsi
    000000e5: 	movl	$0x1, %edi
    000000ea: 	xorl	%eax, %eax
    000000ec: 	callq	__printf_chk@PLT # Offset: 236
.Ltmp544:
    000000f1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ff: 	subq	$0x20, %rax
    00000103: 	cmpq	%rax, %rbx
    00000106: 	je	.Ltmp545 # Offset: 262
    0000010c: 	leaq	0x10(%rbx), %rdi
    00000110: 	movq	0x8(%rbp), %r12
    00000114: 	movq	%rdi, (%rbx)
    00000117: 	movq	(%rbp), %r13
    0000011b: 	movq	%r13, %rax
    0000011e: 	addq	%r12, %rax
    00000121: 	je	.Ltmp546 # Offset: 289
    00000123: 	testq	%r13, %r13
    00000126: 	je	.Ltmp547 # Offset: 294
.Ltmp546:
    0000012c: 	movq	%r12, (%rsp)
    00000130: 	cmpq	$0xf, %r12
    00000134: 	ja	.Ltmp548 # Offset: 308
    0000013a: 	cmpq	$0x1, %r12
    0000013e: 	jne	.Ltmp549 # Offset: 318
    00000144: 	movzbl	(%r13), %eax
    00000149: 	movb	%al, 0x10(%rbx)
.Ltmp552:
    0000014c: 	movq	%r12, 0x8(%rbx)
    00000150: 	movb	$0x0, (%rdi,%r12)
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000015c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000163: 	addq	$0x20, %rax
    00000167: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000016e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000175: 	je	.Ltmp550 # Offset: 373
.Ltmp553:
    0000017b: 	movq	-0x20(%rax), %rbp
    0000017f: 	callq	clock@PLT # Offset: 383
    00000184: 	movq	%rax, end_time(%rip)
    0000018b: 	movq	0x8(%rsp), %rdx
    00000190: 	subq	%fs:0x28, %rdx
    00000199: 	jne	.Ltmp551 # Offset: 409
    0000019f: 	subq	start_time(%rip), %rax
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	movq	%rbp, %rdi
    000001ad: 	cvtsi2sd	%rax, %xmm0
    000001b2: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001ba: 	addq	$0x18, %rsp
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp548:
    000001d0: 	movq	%rbx, %rdi
    000001d3: 	movq	%rsp, %rsi
    000001d6: 	xorl	%edx, %edx
    000001d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 472
    000001dd: 	movq	%rax, (%rbx)
    000001e0: 	movq	%rax, %rdi
    000001e3: 	movq	(%rsp), %rax
    000001e7: 	movq	%rax, 0x10(%rbx)
.Ltmp554:
    000001eb: 	movq	%r12, %rdx
    000001ee: 	movq	%r13, %rsi
    000001f1: 	callq	memcpy@PLT # Offset: 497
    000001f6: 	movq	(%rsp), %r12
    000001fa: 	movq	(%rbx), %rdi
    000001fd: 	jmp	.Ltmp552 # Offset: 509
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp545:
    00000208: 	movq	%rbp, %rsi
    0000020b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000212: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 530
    00000217: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000225: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022c: 	jne	.Ltmp553 # Offset: 556
.Ltmp550:
    00000232: 	movq	-0x8(%rdx), %rax
    00000236: 	addq	$0x200, %rax
    0000023c: 	jmp	.Ltmp553 # Offset: 572
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp549:
    00000248: 	testq	%r12, %r12
    0000024b: 	je	.Ltmp552 # Offset: 587
    00000251: 	jmp	.Ltmp554 # Offset: 593
.Ltmp551:
    00000253: 	callq	__stack_chk_fail@PLT # Offset: 595
.Ltmp547:
    00000258: 	leaq	DATAat0x15008(%rip), %rdi
    0000025f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 607
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global1IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global2ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0xce40
  Size        : 0x284
  MaxSize     : 0x290
  Offset      : 0xce40
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global2ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	data64(%rip), %rsi
    0000002d: 	movq	data64+8(%rip), %rdi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movslq	iterations(%rip), %rax
    00000042: 	movq	data64+16(%rip), %r8
    00000049: 	movq	data64+24(%rip), %r9
    00000050: 	movq	data64+32(%rip), %r10
    00000057: 	testl	%eax, %eax
    00000059: 	jle	.Ltmp555 # Offset: 89
    0000005b: 	leal	-0x1(%rax), %edx
    0000005e: 	leaq	(%rdx,%rdx,2), %rcx
    00000062: 	leaq	(%rdx,%rcx,4), %rcx
    00000066: 	leaq	0x34(%rsi,%rcx,4), %rsi
    0000006b: 	leaq	(%rdx,%rdx,4), %rcx
    0000006f: 	leaq	(%rdx,%rdx,8), %rdx
    00000073: 	leaq	0x14(%r9,%rcx,4), %r9
    00000078: 	shlq	$0x2, %rdx
    0000007c: 	leaq	0x28(%rdi,%rcx,8), %rdi
    00000081: 	leaq	0x24(%r8,%rdx), %r8
    00000086: 	leaq	0x24(%r10,%rdx), %r10
.Ltmp555:
    0000008b: 	leaq	(%rax,%rax,2), %rdx
    0000008f: 	movslq	init_value(%rip), %rcx
    00000096: 	movq	%rsi, data64(%rip)
    0000009d: 	shlq	$0x2, %rdx
    000000a1: 	movq	%rdi, data64+8(%rip)
    000000a8: 	leaq	(%rdx,%rax), %r11
    000000ac: 	movq	%r8, data64+16(%rip)
    000000b3: 	leaq	(%rcx,%r11,4), %r11
    000000b7: 	movq	%r9, data64+24(%rip)
    000000be: 	movq	%r11, %rcx
    000000c1: 	movq	%r10, data64+32(%rip)
    000000c8: 	subq	%rdx, %rcx
    000000cb: 	cmpq	%rsi, %r11
    000000ce: 	jne	.Ltmp556 # Offset: 206
    000000d0: 	cmpq	%rdi, %rcx
    000000d3: 	jne	.Ltmp556 # Offset: 211
    000000d5: 	leaq	(,%rax,4), %rdx
    000000dd: 	shlq	$0x4, %rax
    000000e1: 	subq	%rdx, %rcx
    000000e4: 	movq	%rcx, %rdx
    000000e7: 	subq	%rax, %rdx
    000000ea: 	cmpq	%r9, %rdx
    000000ed: 	setne	%al
    000000f0: 	cmpq	%r8, %rcx
    000000f3: 	setne	%dl
    000000f6: 	orb	%dl, %al
    000000f8: 	jne	.Ltmp556 # Offset: 248
    000000fa: 	cmpq	%rcx, %r10
    000000fd: 	je	.Ltmp557 # Offset: 253
.Ltmp556:
    000000ff: 	movq	(%rbp), %rdx
    00000103: 	leaq	DATAat0x158f3(%rip), %rsi
    0000010a: 	movl	$0x1, %edi
    0000010f: 	xorl	%eax, %eax
    00000111: 	callq	__printf_chk@PLT # Offset: 273
.Ltmp557:
    00000116: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000011d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000124: 	subq	$0x20, %rax
    00000128: 	cmpq	%rax, %rbx
    0000012b: 	je	.Ltmp558 # Offset: 299
    00000131: 	leaq	0x10(%rbx), %rdi
    00000135: 	movq	0x8(%rbp), %r12
    00000139: 	movq	%rdi, (%rbx)
    0000013c: 	movq	(%rbp), %r13
    00000140: 	movq	%r13, %rax
    00000143: 	addq	%r12, %rax
    00000146: 	je	.Ltmp559 # Offset: 326
    00000148: 	testq	%r13, %r13
    0000014b: 	je	.Ltmp560 # Offset: 331
.Ltmp559:
    00000151: 	movq	%r12, (%rsp)
    00000155: 	cmpq	$0xf, %r12
    00000159: 	ja	.Ltmp561 # Offset: 345
    0000015f: 	cmpq	$0x1, %r12
    00000163: 	jne	.Ltmp562 # Offset: 355
    00000169: 	movzbl	(%r13), %eax
    0000016e: 	movb	%al, 0x10(%rbx)
.Ltmp565:
    00000171: 	movq	%r12, 0x8(%rbx)
    00000175: 	movb	$0x0, (%rdi,%r12)
    0000017a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000188: 	addq	$0x20, %rax
    0000018c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000193: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000019a: 	je	.Ltmp563 # Offset: 410
.Ltmp566:
    000001a0: 	movq	-0x20(%rax), %rbp
    000001a4: 	callq	clock@PLT # Offset: 420
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	movq	0x8(%rsp), %rdx
    000001b5: 	subq	%fs:0x28, %rdx
    000001be: 	jne	.Ltmp564 # Offset: 446
    000001c4: 	subq	start_time(%rip), %rax
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	cvtsi2sd	%rax, %xmm0
    000001d7: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001df: 	addq	$0x18, %rsp
    000001e3: 	popq	%rbx
    000001e4: 	popq	%rbp
    000001e5: 	popq	%r12
    000001e7: 	popq	%r13
    000001e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp561:
    000001f0: 	movq	%rbx, %rdi
    000001f3: 	movq	%rsp, %rsi
    000001f6: 	xorl	%edx, %edx
    000001f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 504
    000001fd: 	movq	%rax, (%rbx)
    00000200: 	movq	%rax, %rdi
    00000203: 	movq	(%rsp), %rax
    00000207: 	movq	%rax, 0x10(%rbx)
.Ltmp567:
    0000020b: 	movq	%r12, %rdx
    0000020e: 	movq	%r13, %rsi
    00000211: 	callq	memcpy@PLT # Offset: 529
    00000216: 	movq	(%rsp), %r12
    0000021a: 	movq	(%rbx), %rdi
    0000021d: 	jmp	.Ltmp565 # Offset: 541
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp558:
    00000228: 	movq	%rbp, %rsi
    0000022b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000232: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 562
    00000237: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000245: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024c: 	jne	.Ltmp566 # Offset: 588
.Ltmp563:
    00000252: 	movq	-0x8(%rdx), %rax
    00000256: 	addq	$0x200, %rax
    0000025c: 	jmp	.Ltmp566 # Offset: 604
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp562:
    00000268: 	testq	%r12, %r12
    0000026b: 	je	.Ltmp565 # Offset: 619
    00000271: 	jmp	.Ltmp567 # Offset: 625
.Ltmp564:
    00000273: 	callq	__stack_chk_fail@PLT # Offset: 627
.Ltmp560:
    00000278: 	leaq	DATAat0x15008(%rip), %rdi
    0000027f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 639
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global2ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global2IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0xd0d0
  Size        : 0x264
  MaxSize     : 0x270
  Offset      : 0xd0d0
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global2IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movzwl	data16+8(%rip), %edi
    0000002d: 	movq	data16(%rip), %xmm0
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp568 # Offset: 68
    00000046: 	movq	DATAat0x15d80(%rip), %xmm2
    0000004e: 	leal	-0x1(%rax), %edx
    00000051: 	movd	%edx, %xmm3
    00000055: 	leal	(%rdx,%rdx,8), %edx
    00000058: 	pshuflw	$0x0, %xmm3, %xmm1
    0000005d: 	leal	0x24(%rdi,%rdx,4), %edi
    00000061: 	pmullw	%xmm2, %xmm1
    00000065: 	paddw	%xmm1, %xmm0
    00000069: 	paddw	%xmm2, %xmm0
.Ltmp568:
    0000006d: 	leal	(%rax,%rax,2), %ecx
    00000070: 	movw	%di, data16+8(%rip)
    00000077: 	pextrw	$0x3, %xmm0, %r9d
    0000007d: 	pextrw	$0x2, %xmm0, %r8d
    00000083: 	movq	%xmm0, data16(%rip)
    0000008b: 	shll	$0x2, %ecx
    0000008e: 	leal	(%rcx,%rax), %edx
    00000091: 	shll	$0x2, %edx
    00000094: 	addw	init_value(%rip), %dx
    0000009b: 	movl	%edx, %esi
    0000009d: 	subl	%ecx, %esi
    0000009f: 	pextrw	$0x0, %xmm0, %ecx
    000000a4: 	cmpw	%cx, %dx
    000000a7: 	jne	.Ltmp569 # Offset: 167
    000000a9: 	pextrw	$0x1, %xmm0, %edx
    000000ae: 	cmpw	%dx, %si
    000000b1: 	jne	.Ltmp569 # Offset: 177
    000000b3: 	leal	(,%rax,4), %edx
    000000ba: 	shll	$0x4, %eax
    000000bd: 	subl	%edx, %esi
    000000bf: 	movl	%esi, %edx
    000000c1: 	subl	%eax, %edx
    000000c3: 	cmpw	%r9w, %dx
    000000c7: 	setne	%al
    000000ca: 	cmpw	%r8w, %si
    000000ce: 	setne	%dl
    000000d1: 	orb	%dl, %al
    000000d3: 	jne	.Ltmp569 # Offset: 211
    000000d5: 	cmpw	%si, %di
    000000d8: 	je	.Ltmp570 # Offset: 216
.Ltmp569:
    000000da: 	movq	(%rbp), %rdx
    000000de: 	leaq	DATAat0x158f3(%rip), %rsi
    000000e5: 	movl	$0x1, %edi
    000000ea: 	xorl	%eax, %eax
    000000ec: 	callq	__printf_chk@PLT # Offset: 236
.Ltmp570:
    000000f1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ff: 	subq	$0x20, %rax
    00000103: 	cmpq	%rax, %rbx
    00000106: 	je	.Ltmp571 # Offset: 262
    0000010c: 	leaq	0x10(%rbx), %rdi
    00000110: 	movq	0x8(%rbp), %r12
    00000114: 	movq	%rdi, (%rbx)
    00000117: 	movq	(%rbp), %r13
    0000011b: 	movq	%r13, %rax
    0000011e: 	addq	%r12, %rax
    00000121: 	je	.Ltmp572 # Offset: 289
    00000123: 	testq	%r13, %r13
    00000126: 	je	.Ltmp573 # Offset: 294
.Ltmp572:
    0000012c: 	movq	%r12, (%rsp)
    00000130: 	cmpq	$0xf, %r12
    00000134: 	ja	.Ltmp574 # Offset: 308
    0000013a: 	cmpq	$0x1, %r12
    0000013e: 	jne	.Ltmp575 # Offset: 318
    00000144: 	movzbl	(%r13), %eax
    00000149: 	movb	%al, 0x10(%rbx)
.Ltmp578:
    0000014c: 	movq	%r12, 0x8(%rbx)
    00000150: 	movb	$0x0, (%rdi,%r12)
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000015c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000163: 	addq	$0x20, %rax
    00000167: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000016e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000175: 	je	.Ltmp576 # Offset: 373
.Ltmp579:
    0000017b: 	movq	-0x20(%rax), %rbp
    0000017f: 	callq	clock@PLT # Offset: 383
    00000184: 	movq	%rax, end_time(%rip)
    0000018b: 	movq	0x8(%rsp), %rdx
    00000190: 	subq	%fs:0x28, %rdx
    00000199: 	jne	.Ltmp577 # Offset: 409
    0000019f: 	subq	start_time(%rip), %rax
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	movq	%rbp, %rdi
    000001ad: 	cvtsi2sd	%rax, %xmm0
    000001b2: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001ba: 	addq	$0x18, %rsp
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp574:
    000001d0: 	movq	%rbx, %rdi
    000001d3: 	movq	%rsp, %rsi
    000001d6: 	xorl	%edx, %edx
    000001d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 472
    000001dd: 	movq	%rax, (%rbx)
    000001e0: 	movq	%rax, %rdi
    000001e3: 	movq	(%rsp), %rax
    000001e7: 	movq	%rax, 0x10(%rbx)
.Ltmp580:
    000001eb: 	movq	%r12, %rdx
    000001ee: 	movq	%r13, %rsi
    000001f1: 	callq	memcpy@PLT # Offset: 497
    000001f6: 	movq	(%rsp), %r12
    000001fa: 	movq	(%rbx), %rdi
    000001fd: 	jmp	.Ltmp578 # Offset: 509
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp571:
    00000208: 	movq	%rbp, %rsi
    0000020b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000212: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 530
    00000217: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000225: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022c: 	jne	.Ltmp579 # Offset: 556
.Ltmp576:
    00000232: 	movq	-0x8(%rdx), %rax
    00000236: 	addq	$0x200, %rax
    0000023c: 	jmp	.Ltmp579 # Offset: 572
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp575:
    00000248: 	testq	%r12, %r12
    0000024b: 	je	.Ltmp578 # Offset: 587
    00000251: 	jmp	.Ltmp580 # Offset: 593
.Ltmp577:
    00000253: 	callq	__stack_chk_fail@PLT # Offset: 595
.Ltmp573:
    00000258: 	leaq	DATAat0x15008(%rip), %rdi
    0000025f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 607
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global2IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global1ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0xd340
  Size        : 0x284
  MaxSize     : 0x290
  Offset      : 0xd340
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global1ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	data64(%rip), %rsi
    0000002d: 	movq	data64+8(%rip), %rdi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movslq	iterations(%rip), %rax
    00000042: 	movq	data64+16(%rip), %r8
    00000049: 	movq	data64+24(%rip), %r9
    00000050: 	movq	data64+32(%rip), %r10
    00000057: 	testl	%eax, %eax
    00000059: 	jle	.Ltmp581 # Offset: 89
    0000005b: 	leal	-0x1(%rax), %edx
    0000005e: 	leaq	(%rdx,%rdx,2), %rcx
    00000062: 	leaq	(%rdx,%rcx,4), %rcx
    00000066: 	leaq	0x34(%rsi,%rcx,4), %rsi
    0000006b: 	leaq	(%rdx,%rdx,4), %rcx
    0000006f: 	leaq	(%rdx,%rdx,8), %rdx
    00000073: 	leaq	0x28(%rdi,%rcx,8), %rdi
    00000078: 	shlq	$0x2, %rdx
    0000007c: 	leaq	0x14(%r9,%rcx,4), %r9
    00000081: 	leaq	0x24(%r8,%rdx), %r8
    00000086: 	leaq	0x24(%r10,%rdx), %r10
.Ltmp581:
    0000008b: 	leaq	(%rax,%rax,2), %rdx
    0000008f: 	movslq	init_value(%rip), %rcx
    00000096: 	movq	%rsi, data64(%rip)
    0000009d: 	shlq	$0x2, %rdx
    000000a1: 	movq	%rdi, data64+8(%rip)
    000000a8: 	leaq	(%rdx,%rax), %r11
    000000ac: 	movq	%r8, data64+16(%rip)
    000000b3: 	leaq	(%rcx,%r11,4), %r11
    000000b7: 	movq	%r9, data64+24(%rip)
    000000be: 	movq	%r11, %rcx
    000000c1: 	movq	%r10, data64+32(%rip)
    000000c8: 	subq	%rdx, %rcx
    000000cb: 	cmpq	%rsi, %r11
    000000ce: 	jne	.Ltmp582 # Offset: 206
    000000d0: 	cmpq	%rdi, %rcx
    000000d3: 	jne	.Ltmp582 # Offset: 211
    000000d5: 	leaq	(,%rax,4), %rdx
    000000dd: 	shlq	$0x4, %rax
    000000e1: 	subq	%rdx, %rcx
    000000e4: 	movq	%rcx, %rdx
    000000e7: 	subq	%rax, %rdx
    000000ea: 	cmpq	%r9, %rdx
    000000ed: 	setne	%al
    000000f0: 	cmpq	%r8, %rcx
    000000f3: 	setne	%dl
    000000f6: 	orb	%dl, %al
    000000f8: 	jne	.Ltmp582 # Offset: 248
    000000fa: 	cmpq	%rcx, %r10
    000000fd: 	je	.Ltmp583 # Offset: 253
.Ltmp582:
    000000ff: 	movq	(%rbp), %rdx
    00000103: 	leaq	DATAat0x158f3(%rip), %rsi
    0000010a: 	movl	$0x1, %edi
    0000010f: 	xorl	%eax, %eax
    00000111: 	callq	__printf_chk@PLT # Offset: 273
.Ltmp583:
    00000116: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000011d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000124: 	subq	$0x20, %rax
    00000128: 	cmpq	%rax, %rbx
    0000012b: 	je	.Ltmp584 # Offset: 299
    00000131: 	leaq	0x10(%rbx), %rdi
    00000135: 	movq	0x8(%rbp), %r12
    00000139: 	movq	%rdi, (%rbx)
    0000013c: 	movq	(%rbp), %r13
    00000140: 	movq	%r13, %rax
    00000143: 	addq	%r12, %rax
    00000146: 	je	.Ltmp585 # Offset: 326
    00000148: 	testq	%r13, %r13
    0000014b: 	je	.Ltmp586 # Offset: 331
.Ltmp585:
    00000151: 	movq	%r12, (%rsp)
    00000155: 	cmpq	$0xf, %r12
    00000159: 	ja	.Ltmp587 # Offset: 345
    0000015f: 	cmpq	$0x1, %r12
    00000163: 	jne	.Ltmp588 # Offset: 355
    00000169: 	movzbl	(%r13), %eax
    0000016e: 	movb	%al, 0x10(%rbx)
.Ltmp591:
    00000171: 	movq	%r12, 0x8(%rbx)
    00000175: 	movb	$0x0, (%rdi,%r12)
    0000017a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000188: 	addq	$0x20, %rax
    0000018c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000193: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000019a: 	je	.Ltmp589 # Offset: 410
.Ltmp592:
    000001a0: 	movq	-0x20(%rax), %rbp
    000001a4: 	callq	clock@PLT # Offset: 420
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	movq	0x8(%rsp), %rdx
    000001b5: 	subq	%fs:0x28, %rdx
    000001be: 	jne	.Ltmp590 # Offset: 446
    000001c4: 	subq	start_time(%rip), %rax
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	cvtsi2sd	%rax, %xmm0
    000001d7: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001df: 	addq	$0x18, %rsp
    000001e3: 	popq	%rbx
    000001e4: 	popq	%rbp
    000001e5: 	popq	%r12
    000001e7: 	popq	%r13
    000001e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp587:
    000001f0: 	movq	%rbx, %rdi
    000001f3: 	movq	%rsp, %rsi
    000001f6: 	xorl	%edx, %edx
    000001f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 504
    000001fd: 	movq	%rax, (%rbx)
    00000200: 	movq	%rax, %rdi
    00000203: 	movq	(%rsp), %rax
    00000207: 	movq	%rax, 0x10(%rbx)
.Ltmp593:
    0000020b: 	movq	%r12, %rdx
    0000020e: 	movq	%r13, %rsi
    00000211: 	callq	memcpy@PLT # Offset: 529
    00000216: 	movq	(%rsp), %r12
    0000021a: 	movq	(%rbx), %rdi
    0000021d: 	jmp	.Ltmp591 # Offset: 541
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp584:
    00000228: 	movq	%rbp, %rsi
    0000022b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000232: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 562
    00000237: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000245: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024c: 	jne	.Ltmp592 # Offset: 588
.Ltmp589:
    00000252: 	movq	-0x8(%rdx), %rax
    00000256: 	addq	$0x200, %rax
    0000025c: 	jmp	.Ltmp592 # Offset: 604
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp588:
    00000268: 	testq	%r12, %r12
    0000026b: 	je	.Ltmp591 # Offset: 619
    00000271: 	jmp	.Ltmp593 # Offset: 625
.Ltmp590:
    00000273: 	callq	__stack_chk_fail@PLT # Offset: 627
.Ltmp586:
    00000278: 	leaq	DATAat0x15008(%rip), %rdi
    0000027f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 639
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global1ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_array5_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0xd5d0
  Size        : 0x274
  MaxSize     : 0x280
  Offset      : 0xd5d0
  Section     : .text
  Orc Section : .local.text._Z16test_array5_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movdqu	(%rbx), %xmm0
    0000002d: 	movl	0x10(%rbx), %esi
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	movl	iterations(%rip), %eax
    0000003d: 	testl	%eax, %eax
    0000003f: 	jle	.Ltmp594 # Offset: 63
    00000041: 	movd	%eax, %xmm4
    00000045: 	movdqa	DATAat0x15d40(%rip), %xmm3
    0000004d: 	leal	(%rax,%rax,8), %eax
    00000050: 	pshufd	$0x0, %xmm4, %xmm1
    00000055: 	leal	(%rsi,%rax,4), %esi
    00000058: 	movdqa	%xmm1, %xmm2
    0000005c: 	psrlq	$0x20, %xmm1
    00000061: 	pmuludq	%xmm3, %xmm2
    00000065: 	psrlq	$0x20, %xmm3
    0000006a: 	pmuludq	%xmm3, %xmm1
    0000006e: 	pshufd	$0x8, %xmm2, %xmm2
    00000073: 	pshufd	$0x8, %xmm1, %xmm1
    00000078: 	punpckldq	%xmm1, %xmm2
    0000007c: 	paddd	%xmm2, %xmm0
.Ltmp594:
    00000080: 	movups	%xmm0, (%rbx)
    00000083: 	movl	iterations(%rip), %edx
    00000089: 	pshufd	$0xff, %xmm0, %xmm1
    0000008e: 	movd	%xmm1, %r9d
    00000093: 	movdqa	%xmm0, %xmm1
    00000097: 	movl	%esi, 0x10(%rbx)
    0000009a: 	imull	$0x34, %edx, %eax
    0000009d: 	leal	(%rdx,%rdx,2), %edi
    000000a0: 	punpckhdq	%xmm0, %xmm1
    000000a4: 	addl	init_value(%rip), %eax
    000000aa: 	shll	$0x2, %edi
    000000ad: 	movl	%eax, %ecx
    000000af: 	movd	%xmm1, %r8d
    000000b4: 	subl	%edi, %ecx
    000000b6: 	movd	%xmm0, %edi
    000000ba: 	cmpl	%eax, %edi
    000000bc: 	jne	.Ltmp595 # Offset: 188
    000000be: 	pshufd	$0x55, %xmm0, %xmm0
    000000c3: 	movd	%xmm0, %eax
    000000c7: 	cmpl	%ecx, %eax
    000000c9: 	jne	.Ltmp595 # Offset: 201
    000000cb: 	leal	(,%rdx,4), %eax
    000000d2: 	shll	$0x4, %edx
    000000d5: 	subl	%eax, %ecx
    000000d7: 	movl	%ecx, %eax
    000000d9: 	subl	%edx, %eax
    000000db: 	cmpl	%r9d, %eax
    000000de: 	setne	%al
    000000e1: 	cmpl	%ecx, %r8d
    000000e4: 	setne	%dl
    000000e7: 	orb	%dl, %al
    000000e9: 	jne	.Ltmp595 # Offset: 233
    000000eb: 	cmpl	%ecx, %esi
    000000ed: 	je	.Ltmp596 # Offset: 237
.Ltmp595:
    000000ef: 	movq	(%rbp), %rdx
    000000f3: 	leaq	DATAat0x158f3(%rip), %rsi
    000000fa: 	movl	$0x1, %edi
    000000ff: 	xorl	%eax, %eax
    00000101: 	callq	__printf_chk@PLT # Offset: 257
.Ltmp596:
    00000106: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000010d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000114: 	subq	$0x20, %rax
    00000118: 	cmpq	%rax, %rbx
    0000011b: 	je	.Ltmp597 # Offset: 283
    00000121: 	leaq	0x10(%rbx), %rdi
    00000125: 	movq	0x8(%rbp), %r12
    00000129: 	movq	%rdi, (%rbx)
    0000012c: 	movq	(%rbp), %r13
    00000130: 	movq	%r13, %rax
    00000133: 	addq	%r12, %rax
    00000136: 	je	.Ltmp598 # Offset: 310
    00000138: 	testq	%r13, %r13
    0000013b: 	je	.Ltmp599 # Offset: 315
.Ltmp598:
    00000141: 	movq	%r12, (%rsp)
    00000145: 	cmpq	$0xf, %r12
    00000149: 	ja	.Ltmp600 # Offset: 329
    0000014f: 	cmpq	$0x1, %r12
    00000153: 	jne	.Ltmp601 # Offset: 339
    00000159: 	movzbl	(%r13), %eax
    0000015e: 	movb	%al, 0x10(%rbx)
.Ltmp604:
    00000161: 	movq	%r12, 0x8(%rbx)
    00000165: 	movb	$0x0, (%rdi,%r12)
    0000016a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000171: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000178: 	addq	$0x20, %rax
    0000017c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000183: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000018a: 	je	.Ltmp602 # Offset: 394
.Ltmp605:
    00000190: 	movq	-0x20(%rax), %rbp
    00000194: 	callq	clock@PLT # Offset: 404
    00000199: 	movq	%rax, end_time(%rip)
    000001a0: 	movq	0x8(%rsp), %rdx
    000001a5: 	subq	%fs:0x28, %rdx
    000001ae: 	jne	.Ltmp603 # Offset: 430
    000001b4: 	subq	start_time(%rip), %rax
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	movq	%rbp, %rdi
    000001c2: 	cvtsi2sd	%rax, %xmm0
    000001c7: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001cf: 	addq	$0x18, %rsp
    000001d3: 	popq	%rbx
    000001d4: 	popq	%rbp
    000001d5: 	popq	%r12
    000001d7: 	popq	%r13
    000001d9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp600:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	movq	%rsp, %rsi
    000001e6: 	xorl	%edx, %edx
    000001e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 488
    000001ed: 	movq	%rax, (%rbx)
    000001f0: 	movq	%rax, %rdi
    000001f3: 	movq	(%rsp), %rax
    000001f7: 	movq	%rax, 0x10(%rbx)
.Ltmp606:
    000001fb: 	movq	%r12, %rdx
    000001fe: 	movq	%r13, %rsi
    00000201: 	callq	memcpy@PLT # Offset: 513
    00000206: 	movq	(%rsp), %r12
    0000020a: 	movq	(%rbx), %rdi
    0000020d: 	jmp	.Ltmp604 # Offset: 525
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp597:
    00000218: 	movq	%rbp, %rsi
    0000021b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000222: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 546
    00000227: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000022e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000235: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023c: 	jne	.Ltmp605 # Offset: 572
.Ltmp602:
    00000242: 	movq	-0x8(%rdx), %rax
    00000246: 	addq	$0x200, %rax
    0000024c: 	jmp	.Ltmp605 # Offset: 588
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp601:
    00000258: 	testq	%r12, %r12
    0000025b: 	je	.Ltmp604 # Offset: 603
    00000261: 	jmp	.Ltmp606 # Offset: 609
.Ltmp603:
    00000263: 	callq	__stack_chk_fail@PLT # Offset: 611
.Ltmp599:
    00000268: 	leaq	DATAat0x15008(%rip), %rdi
    0000026f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 623
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_array5_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_array11_global0IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0xd850
  Size        : 0x25c
  MaxSize     : 0x260
  Offset      : 0xd850
  Section     : .text
  Orc Section : .local.text._Z20test_array11_global0IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	pxor	%xmm1, %xmm1
    0000002a: 	movq	%rbp, %rsi
    0000002d: 	movapd	DATAat0x15dc0(%rip), %xmm5
    00000035: 	cvtsi2sdl	iterations(%rip), %xmm1
    0000003d: 	movapd	DATAat0x15dd0(%rip), %xmm4
    00000045: 	movapd	DATAat0x15de0(%rip), %xmm3
    0000004d: 	leaq	dataDouble(%rip), %rdi
    00000054: 	movapd	DATAat0x15df0(%rip), %xmm2
    0000005c: 	movq	%rax, start_time(%rip)
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	mulsd	DATAat0x15c70(%rip), %xmm1
    0000006f: 	unpcklpd	%xmm0, %xmm0
    00000073: 	mulpd	%xmm0, %xmm5
    00000077: 	addsd	dataDouble+80(%rip), %xmm1
    0000007f: 	mulpd	%xmm0, %xmm4
    00000083: 	addpd	dataDouble+16(%rip), %xmm5
    0000008b: 	mulpd	%xmm0, %xmm3
    0000008f: 	addpd	dataDouble+32(%rip), %xmm4
    00000097: 	mulpd	%xmm0, %xmm2
    0000009b: 	addpd	dataDouble+48(%rip), %xmm3
    000000a3: 	movsd	%xmm1, dataDouble+80(%rip)
    000000ab: 	mulpd	DATAat0x15db0(%rip), %xmm0
    000000b3: 	addpd	dataDouble+64(%rip), %xmm2
    000000bb: 	movaps	%xmm5, dataDouble+16(%rip)
    000000c2: 	addpd	dataDouble(%rip), %xmm0
    000000ca: 	movaps	%xmm4, dataDouble+32(%rip)
    000000d1: 	movaps	%xmm3, dataDouble+48(%rip)
    000000d8: 	movaps	%xmm2, dataDouble+64(%rip)
    000000df: 	movaps	%xmm0, dataDouble(%rip)
    000000e6: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 230
    000000eb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f9: 	subq	$0x20, %rax
    000000fd: 	cmpq	%rax, %rbx
    00000100: 	je	.Ltmp607 # Offset: 256
    00000106: 	leaq	0x10(%rbx), %rdi
    0000010a: 	movq	0x8(%rbp), %r12
    0000010e: 	movq	%rdi, (%rbx)
    00000111: 	movq	(%rbp), %r13
    00000115: 	movq	%r13, %rax
    00000118: 	addq	%r12, %rax
    0000011b: 	je	.Ltmp608 # Offset: 283
    0000011d: 	testq	%r13, %r13
    00000120: 	je	.Ltmp609 # Offset: 288
.Ltmp608:
    00000126: 	movq	%r12, (%rsp)
    0000012a: 	cmpq	$0xf, %r12
    0000012e: 	ja	.Ltmp610 # Offset: 302
    00000134: 	cmpq	$0x1, %r12
    00000138: 	jne	.Ltmp611 # Offset: 312
    0000013e: 	movzbl	(%r13), %eax
    00000143: 	movb	%al, 0x10(%rbx)
.Ltmp614:
    00000146: 	movq	%r12, 0x8(%rbx)
    0000014a: 	movb	$0x0, (%rdi,%r12)
    0000014f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000156: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015d: 	addq	$0x20, %rax
    00000161: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000168: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000016f: 	je	.Ltmp612 # Offset: 367
.Ltmp615:
    00000175: 	movq	-0x20(%rax), %rbp
    00000179: 	callq	clock@PLT # Offset: 377
    0000017e: 	movq	%rax, end_time(%rip)
    00000185: 	movq	0x8(%rsp), %rdx
    0000018a: 	subq	%fs:0x28, %rdx
    00000193: 	jne	.Ltmp613 # Offset: 403
    00000199: 	subq	start_time(%rip), %rax
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	movq	%rbp, %rdi
    000001a7: 	cvtsi2sd	%rax, %xmm0
    000001ac: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001b4: 	addq	$0x18, %rsp
    000001b8: 	popq	%rbx
    000001b9: 	popq	%rbp
    000001ba: 	popq	%r12
    000001bc: 	popq	%r13
    000001be: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp610:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	movq	%rsp, %rsi
    000001ce: 	xorl	%edx, %edx
    000001d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 464
    000001d5: 	movq	%rax, (%rbx)
    000001d8: 	movq	%rax, %rdi
    000001db: 	movq	(%rsp), %rax
    000001df: 	movq	%rax, 0x10(%rbx)
.Ltmp616:
    000001e3: 	movq	%r12, %rdx
    000001e6: 	movq	%r13, %rsi
    000001e9: 	callq	memcpy@PLT # Offset: 489
    000001ee: 	movq	(%rsp), %r12
    000001f2: 	movq	(%rbx), %rdi
    000001f5: 	jmp	.Ltmp614 # Offset: 501
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp607:
    00000200: 	movq	%rbp, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp615 # Offset: 548
.Ltmp612:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp615 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp611:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp614 # Offset: 579
    00000249: 	jmp	.Ltmp616 # Offset: 585
.Ltmp609:
    0000024b: 	leaq	DATAat0x15008(%rip), %rdi
    00000252: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 594
.Ltmp613:
    00000257: 	callq	__stack_chk_fail@PLT # Offset: 599
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array11_global0IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_array5_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0xdab0
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0xdab0
  Section     : .text
  Orc Section : .local.text._Z16test_array5_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movq	0x8(%rbx), %rdi
    0000002d: 	movq	0x10(%rbx), %r8
    00000031: 	movq	0x18(%rbx), %r9
    00000035: 	movq	0x20(%rbx), %r10
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	movslq	iterations(%rip), %rax
    00000047: 	movq	(%rbx), %rsi
    0000004a: 	testl	%eax, %eax
    0000004c: 	jle	.Ltmp617 # Offset: 76
    0000004e: 	leal	-0x1(%rax), %edx
    00000051: 	leaq	(%rdx,%rdx,2), %rcx
    00000055: 	leaq	(%rdx,%rcx,4), %rcx
    00000059: 	leaq	0x34(%rsi,%rcx,4), %rsi
    0000005e: 	leaq	(%rdx,%rdx,4), %rcx
    00000062: 	leaq	(%rdx,%rdx,8), %rdx
    00000066: 	leaq	0x28(%rdi,%rcx,8), %rdi
    0000006b: 	shlq	$0x2, %rdx
    0000006f: 	leaq	0x14(%r9,%rcx,4), %r9
    00000074: 	leaq	0x24(%r8,%rdx), %r8
    00000079: 	leaq	0x24(%r10,%rdx), %r10
.Ltmp617:
    0000007e: 	leaq	(%rax,%rax,2), %rdx
    00000082: 	movslq	init_value(%rip), %rcx
    00000089: 	movq	%rsi, (%rbx)
    0000008c: 	shlq	$0x2, %rdx
    00000090: 	movq	%rdi, 0x8(%rbx)
    00000094: 	leaq	(%rdx,%rax), %r11
    00000098: 	movq	%r8, 0x10(%rbx)
    0000009c: 	leaq	(%rcx,%r11,4), %r11
    000000a0: 	movq	%r9, 0x18(%rbx)
    000000a4: 	movq	%r11, %rcx
    000000a7: 	movq	%r10, 0x20(%rbx)
    000000ab: 	subq	%rdx, %rcx
    000000ae: 	cmpq	%rsi, %r11
    000000b1: 	jne	.Ltmp618 # Offset: 177
    000000b3: 	cmpq	%rdi, %rcx
    000000b6: 	jne	.Ltmp618 # Offset: 182
    000000b8: 	leaq	(,%rax,4), %rdx
    000000c0: 	shlq	$0x4, %rax
    000000c4: 	subq	%rdx, %rcx
    000000c7: 	movq	%rcx, %rdx
    000000ca: 	subq	%rax, %rdx
    000000cd: 	cmpq	%r9, %rdx
    000000d0: 	setne	%al
    000000d3: 	cmpq	%rcx, %r8
    000000d6: 	setne	%dl
    000000d9: 	orb	%dl, %al
    000000db: 	jne	.Ltmp618 # Offset: 219
    000000dd: 	cmpq	%rcx, %r10
    000000e0: 	je	.Ltmp619 # Offset: 224
.Ltmp618:
    000000e2: 	movq	(%rbp), %rdx
    000000e6: 	leaq	DATAat0x158f3(%rip), %rsi
    000000ed: 	movl	$0x1, %edi
    000000f2: 	xorl	%eax, %eax
    000000f4: 	callq	__printf_chk@PLT # Offset: 244
.Ltmp619:
    000000f9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000100: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000107: 	subq	$0x20, %rax
    0000010b: 	cmpq	%rax, %rbx
    0000010e: 	je	.Ltmp620 # Offset: 270
    00000114: 	leaq	0x10(%rbx), %rdi
    00000118: 	movq	0x8(%rbp), %r12
    0000011c: 	movq	%rdi, (%rbx)
    0000011f: 	movq	(%rbp), %r13
    00000123: 	movq	%r13, %rax
    00000126: 	addq	%r12, %rax
    00000129: 	je	.Ltmp621 # Offset: 297
    0000012b: 	testq	%r13, %r13
    0000012e: 	je	.Ltmp622 # Offset: 302
.Ltmp621:
    00000134: 	movq	%r12, (%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp623 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp624 # Offset: 326
    0000014c: 	movzbl	(%r13), %eax
    00000151: 	movb	%al, 0x10(%rbx)
.Ltmp627:
    00000154: 	movq	%r12, 0x8(%rbx)
    00000158: 	movb	$0x0, (%rdi,%r12)
    0000015d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000164: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016b: 	addq	$0x20, %rax
    0000016f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000176: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017d: 	je	.Ltmp625 # Offset: 381
.Ltmp628:
    00000183: 	movq	-0x20(%rax), %rbp
    00000187: 	callq	clock@PLT # Offset: 391
    0000018c: 	movq	%rax, end_time(%rip)
    00000193: 	movq	0x8(%rsp), %rdx
    00000198: 	subq	%fs:0x28, %rdx
    000001a1: 	jne	.Ltmp626 # Offset: 417
    000001a7: 	subq	start_time(%rip), %rax
    000001ae: 	pxor	%xmm0, %xmm0
    000001b2: 	movq	%rbp, %rdi
    000001b5: 	cvtsi2sd	%rax, %xmm0
    000001ba: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001c2: 	addq	$0x18, %rsp
    000001c6: 	popq	%rbx
    000001c7: 	popq	%rbp
    000001c8: 	popq	%r12
    000001ca: 	popq	%r13
    000001cc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 460
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp623:
    000001d8: 	movq	%rbx, %rdi
    000001db: 	movq	%rsp, %rsi
    000001de: 	xorl	%edx, %edx
    000001e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 480
    000001e5: 	movq	%rax, (%rbx)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	(%rsp), %rax
    000001ef: 	movq	%rax, 0x10(%rbx)
.Ltmp629:
    000001f3: 	movq	%r12, %rdx
    000001f6: 	movq	%r13, %rsi
    000001f9: 	callq	memcpy@PLT # Offset: 505
    000001fe: 	movq	(%rsp), %r12
    00000202: 	movq	(%rbx), %rdi
    00000205: 	jmp	.Ltmp627 # Offset: 517
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp620:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp628 # Offset: 564
.Ltmp625:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp628 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp624:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp627 # Offset: 595
    00000259: 	jmp	.Ltmp629 # Offset: 601
.Ltmp626:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp622:
    00000260: 	leaq	DATAat0x15008(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_array5_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_array5_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0xdd20
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0xdd20
  Section     : .text
  Orc Section : .local.text._Z16test_array5_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movq	(%rbx), %xmm0
    0000002d: 	movzwl	0x8(%rbx), %edi
    00000031: 	movq	%rax, start_time(%rip)
    00000038: 	movl	iterations(%rip), %eax
    0000003e: 	testl	%eax, %eax
    00000040: 	jle	.Ltmp630 # Offset: 64
    00000042: 	movq	DATAat0x15d80(%rip), %xmm2
    0000004a: 	leal	-0x1(%rax), %edx
    0000004d: 	movd	%edx, %xmm3
    00000051: 	leal	(%rdx,%rdx,8), %edx
    00000054: 	pshuflw	$0x0, %xmm3, %xmm1
    00000059: 	leal	0x24(%rdi,%rdx,4), %edi
    0000005d: 	pmullw	%xmm2, %xmm1
    00000061: 	paddw	%xmm1, %xmm0
    00000065: 	paddw	%xmm2, %xmm0
.Ltmp630:
    00000069: 	leal	(%rax,%rax,2), %ecx
    0000006c: 	movw	%di, 0x8(%rbx)
    00000070: 	pextrw	$0x3, %xmm0, %r9d
    00000076: 	pextrw	$0x2, %xmm0, %r8d
    0000007c: 	shll	$0x2, %ecx
    0000007f: 	movq	%xmm0, (%rbx)
    00000083: 	leal	(%rcx,%rax), %edx
    00000086: 	shll	$0x2, %edx
    00000089: 	addw	init_value(%rip), %dx
    00000090: 	movl	%edx, %esi
    00000092: 	subl	%ecx, %esi
    00000094: 	pextrw	$0x0, %xmm0, %ecx
    00000099: 	cmpw	%cx, %dx
    0000009c: 	jne	.Ltmp631 # Offset: 156
    0000009e: 	pextrw	$0x1, %xmm0, %edx
    000000a3: 	cmpw	%dx, %si
    000000a6: 	jne	.Ltmp631 # Offset: 166
    000000a8: 	leal	(,%rax,4), %edx
    000000af: 	shll	$0x4, %eax
    000000b2: 	subl	%edx, %esi
    000000b4: 	movl	%esi, %edx
    000000b6: 	subl	%eax, %edx
    000000b8: 	cmpw	%r9w, %dx
    000000bc: 	setne	%al
    000000bf: 	cmpw	%r8w, %si
    000000c3: 	setne	%dl
    000000c6: 	orb	%dl, %al
    000000c8: 	jne	.Ltmp631 # Offset: 200
    000000ca: 	cmpw	%si, %di
    000000cd: 	je	.Ltmp632 # Offset: 205
.Ltmp631:
    000000cf: 	movq	(%rbp), %rdx
    000000d3: 	leaq	DATAat0x158f3(%rip), %rsi
    000000da: 	movl	$0x1, %edi
    000000df: 	xorl	%eax, %eax
    000000e1: 	callq	__printf_chk@PLT # Offset: 225
.Ltmp632:
    000000e6: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f4: 	subq	$0x20, %rax
    000000f8: 	cmpq	%rax, %rbx
    000000fb: 	je	.Ltmp633 # Offset: 251
    00000101: 	leaq	0x10(%rbx), %rdi
    00000105: 	movq	0x8(%rbp), %r12
    00000109: 	movq	%rdi, (%rbx)
    0000010c: 	movq	(%rbp), %r13
    00000110: 	movq	%r13, %rax
    00000113: 	addq	%r12, %rax
    00000116: 	je	.Ltmp634 # Offset: 278
    00000118: 	testq	%r13, %r13
    0000011b: 	je	.Ltmp635 # Offset: 283
.Ltmp634:
    00000121: 	movq	%r12, (%rsp)
    00000125: 	cmpq	$0xf, %r12
    00000129: 	ja	.Ltmp636 # Offset: 297
    0000012f: 	cmpq	$0x1, %r12
    00000133: 	jne	.Ltmp637 # Offset: 307
    00000139: 	movzbl	(%r13), %eax
    0000013e: 	movb	%al, 0x10(%rbx)
.Ltmp640:
    00000141: 	movq	%r12, 0x8(%rbx)
    00000145: 	movb	$0x0, (%rdi,%r12)
    0000014a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000151: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000158: 	addq	$0x20, %rax
    0000015c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000163: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000016a: 	je	.Ltmp638 # Offset: 362
.Ltmp641:
    00000170: 	movq	-0x20(%rax), %rbp
    00000174: 	callq	clock@PLT # Offset: 372
    00000179: 	movq	%rax, end_time(%rip)
    00000180: 	movq	0x8(%rsp), %rdx
    00000185: 	subq	%fs:0x28, %rdx
    0000018e: 	jne	.Ltmp639 # Offset: 398
    00000194: 	subq	start_time(%rip), %rax
    0000019b: 	pxor	%xmm0, %xmm0
    0000019f: 	movq	%rbp, %rdi
    000001a2: 	cvtsi2sd	%rax, %xmm0
    000001a7: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001af: 	addq	$0x18, %rsp
    000001b3: 	popq	%rbx
    000001b4: 	popq	%rbp
    000001b5: 	popq	%r12
    000001b7: 	popq	%r13
    000001b9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 441
    000001be: 	nop # Size: 2
.Ltmp636:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	%rsp, %rsi
    000001c6: 	xorl	%edx, %edx
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 456
    000001cd: 	movq	%rax, (%rbx)
    000001d0: 	movq	%rax, %rdi
    000001d3: 	movq	(%rsp), %rax
    000001d7: 	movq	%rax, 0x10(%rbx)
.Ltmp642:
    000001db: 	movq	%r12, %rdx
    000001de: 	movq	%r13, %rsi
    000001e1: 	callq	memcpy@PLT # Offset: 481
    000001e6: 	movq	(%rsp), %r12
    000001ea: 	movq	(%rbx), %rdi
    000001ed: 	jmp	.Ltmp640 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp633:
    000001f8: 	movq	%rbp, %rsi
    000001fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000215: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021c: 	jne	.Ltmp641 # Offset: 540
.Ltmp638:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp641 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp637:
    00000238: 	testq	%r12, %r12
    0000023b: 	je	.Ltmp640 # Offset: 571
    00000241: 	jmp	.Ltmp642 # Offset: 577
.Ltmp639:
    00000243: 	callq	__stack_chk_fail@PLT # Offset: 579
.Ltmp635:
    00000248: 	leaq	DATAat0x15008(%rip), %rdi
    0000024f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_array5_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global1IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0xdf80
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0xdf80
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global1IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movdqa	data32(%rip), %xmm0
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	data32+16(%rip), %esi
    00000041: 	testl	%edx, %edx
    00000043: 	jle	.Ltmp643 # Offset: 67
    00000045: 	movd	%edx, %xmm4
    00000049: 	movdqa	DATAat0x15d40(%rip), %xmm3
    00000051: 	leal	(%rdx,%rdx,8), %eax
    00000054: 	pshufd	$0x0, %xmm4, %xmm1
    00000059: 	leal	(%rsi,%rax,4), %esi
    0000005c: 	movdqa	%xmm1, %xmm2
    00000060: 	psrlq	$0x20, %xmm1
    00000065: 	pmuludq	%xmm3, %xmm2
    00000069: 	psrlq	$0x20, %xmm3
    0000006e: 	pmuludq	%xmm3, %xmm1
    00000072: 	pshufd	$0x8, %xmm2, %xmm2
    00000077: 	pshufd	$0x8, %xmm1, %xmm1
    0000007c: 	punpckldq	%xmm1, %xmm2
    00000080: 	paddd	%xmm2, %xmm0
.Ltmp643:
    00000084: 	pshufd	$0xff, %xmm0, %xmm1
    00000089: 	imull	$0x34, %edx, %eax
    0000008c: 	leal	(%rdx,%rdx,2), %edi
    0000008f: 	addl	init_value(%rip), %eax
    00000095: 	shll	$0x2, %edi
    00000098: 	movd	%xmm1, %r9d
    0000009d: 	movl	%eax, %ecx
    0000009f: 	movl	%esi, data32+16(%rip)
    000000a5: 	movdqa	%xmm0, %xmm1
    000000a9: 	subl	%edi, %ecx
    000000ab: 	movd	%xmm0, %edi
    000000af: 	movaps	%xmm0, data32(%rip)
    000000b6: 	punpckhdq	%xmm0, %xmm1
    000000ba: 	movd	%xmm1, %r8d
    000000bf: 	cmpl	%eax, %edi
    000000c1: 	jne	.Ltmp644 # Offset: 193
    000000c3: 	pshufd	$0x55, %xmm0, %xmm0
    000000c8: 	movd	%xmm0, %eax
    000000cc: 	cmpl	%ecx, %eax
    000000ce: 	jne	.Ltmp644 # Offset: 206
    000000d0: 	leal	(,%rdx,4), %eax
    000000d7: 	shll	$0x4, %edx
    000000da: 	subl	%eax, %ecx
    000000dc: 	movl	%ecx, %eax
    000000de: 	subl	%edx, %eax
    000000e0: 	cmpl	%r9d, %eax
    000000e3: 	setne	%al
    000000e6: 	cmpl	%ecx, %r8d
    000000e9: 	setne	%dl
    000000ec: 	orb	%dl, %al
    000000ee: 	jne	.Ltmp644 # Offset: 238
    000000f0: 	cmpl	%ecx, %esi
    000000f2: 	je	.Ltmp645 # Offset: 242
.Ltmp644:
    000000f4: 	movq	(%rbp), %rdx
    000000f8: 	leaq	DATAat0x158f3(%rip), %rsi
    000000ff: 	movl	$0x1, %edi
    00000104: 	xorl	%eax, %eax
    00000106: 	callq	__printf_chk@PLT # Offset: 262
.Ltmp645:
    0000010b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000112: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000119: 	subq	$0x20, %rax
    0000011d: 	cmpq	%rax, %rbx
    00000120: 	je	.Ltmp646 # Offset: 288
    00000126: 	leaq	0x10(%rbx), %rdi
    0000012a: 	movq	0x8(%rbp), %r12
    0000012e: 	movq	%rdi, (%rbx)
    00000131: 	movq	(%rbp), %r13
    00000135: 	movq	%r13, %rax
    00000138: 	addq	%r12, %rax
    0000013b: 	je	.Ltmp647 # Offset: 315
    0000013d: 	testq	%r13, %r13
    00000140: 	je	.Ltmp648 # Offset: 320
.Ltmp647:
    00000146: 	movq	%r12, (%rsp)
    0000014a: 	cmpq	$0xf, %r12
    0000014e: 	ja	.Ltmp649 # Offset: 334
    00000154: 	cmpq	$0x1, %r12
    00000158: 	jne	.Ltmp650 # Offset: 344
    0000015e: 	movzbl	(%r13), %eax
    00000163: 	movb	%al, 0x10(%rbx)
.Ltmp653:
    00000166: 	movq	%r12, 0x8(%rbx)
    0000016a: 	movb	$0x0, (%rdi,%r12)
    0000016f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000176: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000017d: 	addq	$0x20, %rax
    00000181: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000188: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000018f: 	je	.Ltmp651 # Offset: 399
.Ltmp654:
    00000195: 	movq	-0x20(%rax), %rbp
    00000199: 	callq	clock@PLT # Offset: 409
    0000019e: 	movq	%rax, end_time(%rip)
    000001a5: 	movq	0x8(%rsp), %rdx
    000001aa: 	subq	%fs:0x28, %rdx
    000001b3: 	jne	.Ltmp652 # Offset: 435
    000001b9: 	subq	start_time(%rip), %rax
    000001c0: 	pxor	%xmm0, %xmm0
    000001c4: 	movq	%rbp, %rdi
    000001c7: 	cvtsi2sd	%rax, %xmm0
    000001cc: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001d4: 	addq	$0x18, %rsp
    000001d8: 	popq	%rbx
    000001d9: 	popq	%rbp
    000001da: 	popq	%r12
    000001dc: 	popq	%r13
    000001de: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 478
    000001e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp649:
    000001e8: 	movq	%rbx, %rdi
    000001eb: 	movq	%rsp, %rsi
    000001ee: 	xorl	%edx, %edx
    000001f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 496
    000001f5: 	movq	%rax, (%rbx)
    000001f8: 	movq	%rax, %rdi
    000001fb: 	movq	(%rsp), %rax
    000001ff: 	movq	%rax, 0x10(%rbx)
.Ltmp655:
    00000203: 	movq	%r12, %rdx
    00000206: 	movq	%r13, %rsi
    00000209: 	callq	memcpy@PLT # Offset: 521
    0000020e: 	movq	(%rsp), %r12
    00000212: 	movq	(%rbx), %rdi
    00000215: 	jmp	.Ltmp653 # Offset: 533
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp646:
    00000220: 	movq	%rbp, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp654 # Offset: 580
.Ltmp651:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp654 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp650:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp653 # Offset: 611
    00000269: 	jmp	.Ltmp655 # Offset: 617
.Ltmp652:
    0000026b: 	callq	__stack_chk_fail@PLT # Offset: 619
.Ltmp648:
    00000270: 	leaq	DATAat0x15008(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global1IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global2IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0xe200
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0xe200
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global2IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movdqa	data32(%rip), %xmm0
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	data32+16(%rip), %esi
    00000041: 	testl	%edx, %edx
    00000043: 	jle	.Ltmp656 # Offset: 67
    00000045: 	movd	%edx, %xmm4
    00000049: 	movdqa	DATAat0x15d40(%rip), %xmm3
    00000051: 	leal	(%rdx,%rdx,8), %eax
    00000054: 	pshufd	$0x0, %xmm4, %xmm1
    00000059: 	leal	(%rsi,%rax,4), %esi
    0000005c: 	movdqa	%xmm1, %xmm2
    00000060: 	psrlq	$0x20, %xmm1
    00000065: 	pmuludq	%xmm3, %xmm2
    00000069: 	psrlq	$0x20, %xmm3
    0000006e: 	pmuludq	%xmm3, %xmm1
    00000072: 	pshufd	$0x8, %xmm2, %xmm2
    00000077: 	pshufd	$0x8, %xmm1, %xmm1
    0000007c: 	punpckldq	%xmm1, %xmm2
    00000080: 	paddd	%xmm2, %xmm0
.Ltmp656:
    00000084: 	pshufd	$0xff, %xmm0, %xmm1
    00000089: 	imull	$0x34, %edx, %eax
    0000008c: 	leal	(%rdx,%rdx,2), %edi
    0000008f: 	addl	init_value(%rip), %eax
    00000095: 	shll	$0x2, %edi
    00000098: 	movd	%xmm1, %r9d
    0000009d: 	movl	%eax, %ecx
    0000009f: 	movl	%esi, data32+16(%rip)
    000000a5: 	movdqa	%xmm0, %xmm1
    000000a9: 	subl	%edi, %ecx
    000000ab: 	movd	%xmm0, %edi
    000000af: 	movaps	%xmm0, data32(%rip)
    000000b6: 	punpckhdq	%xmm0, %xmm1
    000000ba: 	movd	%xmm1, %r8d
    000000bf: 	cmpl	%eax, %edi
    000000c1: 	jne	.Ltmp657 # Offset: 193
    000000c3: 	pshufd	$0x55, %xmm0, %xmm0
    000000c8: 	movd	%xmm0, %eax
    000000cc: 	cmpl	%ecx, %eax
    000000ce: 	jne	.Ltmp657 # Offset: 206
    000000d0: 	leal	(,%rdx,4), %eax
    000000d7: 	shll	$0x4, %edx
    000000da: 	subl	%eax, %ecx
    000000dc: 	movl	%ecx, %eax
    000000de: 	subl	%edx, %eax
    000000e0: 	cmpl	%r9d, %eax
    000000e3: 	setne	%al
    000000e6: 	cmpl	%ecx, %r8d
    000000e9: 	setne	%dl
    000000ec: 	orb	%dl, %al
    000000ee: 	jne	.Ltmp657 # Offset: 238
    000000f0: 	cmpl	%ecx, %esi
    000000f2: 	je	.Ltmp658 # Offset: 242
.Ltmp657:
    000000f4: 	movq	(%rbp), %rdx
    000000f8: 	leaq	DATAat0x158f3(%rip), %rsi
    000000ff: 	movl	$0x1, %edi
    00000104: 	xorl	%eax, %eax
    00000106: 	callq	__printf_chk@PLT # Offset: 262
.Ltmp658:
    0000010b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000112: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000119: 	subq	$0x20, %rax
    0000011d: 	cmpq	%rax, %rbx
    00000120: 	je	.Ltmp659 # Offset: 288
    00000126: 	leaq	0x10(%rbx), %rdi
    0000012a: 	movq	0x8(%rbp), %r12
    0000012e: 	movq	%rdi, (%rbx)
    00000131: 	movq	(%rbp), %r13
    00000135: 	movq	%r13, %rax
    00000138: 	addq	%r12, %rax
    0000013b: 	je	.Ltmp660 # Offset: 315
    0000013d: 	testq	%r13, %r13
    00000140: 	je	.Ltmp661 # Offset: 320
.Ltmp660:
    00000146: 	movq	%r12, (%rsp)
    0000014a: 	cmpq	$0xf, %r12
    0000014e: 	ja	.Ltmp662 # Offset: 334
    00000154: 	cmpq	$0x1, %r12
    00000158: 	jne	.Ltmp663 # Offset: 344
    0000015e: 	movzbl	(%r13), %eax
    00000163: 	movb	%al, 0x10(%rbx)
.Ltmp666:
    00000166: 	movq	%r12, 0x8(%rbx)
    0000016a: 	movb	$0x0, (%rdi,%r12)
    0000016f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000176: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000017d: 	addq	$0x20, %rax
    00000181: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000188: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000018f: 	je	.Ltmp664 # Offset: 399
.Ltmp667:
    00000195: 	movq	-0x20(%rax), %rbp
    00000199: 	callq	clock@PLT # Offset: 409
    0000019e: 	movq	%rax, end_time(%rip)
    000001a5: 	movq	0x8(%rsp), %rdx
    000001aa: 	subq	%fs:0x28, %rdx
    000001b3: 	jne	.Ltmp665 # Offset: 435
    000001b9: 	subq	start_time(%rip), %rax
    000001c0: 	pxor	%xmm0, %xmm0
    000001c4: 	movq	%rbp, %rdi
    000001c7: 	cvtsi2sd	%rax, %xmm0
    000001cc: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001d4: 	addq	$0x18, %rsp
    000001d8: 	popq	%rbx
    000001d9: 	popq	%rbp
    000001da: 	popq	%r12
    000001dc: 	popq	%r13
    000001de: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 478
    000001e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp662:
    000001e8: 	movq	%rbx, %rdi
    000001eb: 	movq	%rsp, %rsi
    000001ee: 	xorl	%edx, %edx
    000001f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 496
    000001f5: 	movq	%rax, (%rbx)
    000001f8: 	movq	%rax, %rdi
    000001fb: 	movq	(%rsp), %rax
    000001ff: 	movq	%rax, 0x10(%rbx)
.Ltmp668:
    00000203: 	movq	%r12, %rdx
    00000206: 	movq	%r13, %rsi
    00000209: 	callq	memcpy@PLT # Offset: 521
    0000020e: 	movq	(%rsp), %r12
    00000212: 	movq	(%rbx), %rdi
    00000215: 	jmp	.Ltmp666 # Offset: 533
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp659:
    00000220: 	movq	%rbp, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp667 # Offset: 580
.Ltmp664:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp667 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp663:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp666 # Offset: 611
    00000269: 	jmp	.Ltmp668 # Offset: 617
.Ltmp665:
    0000026b: 	callq	__stack_chk_fail@PLT # Offset: 619
.Ltmp661:
    00000270: 	leaq	DATAat0x15008(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global2IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global0ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0xe480
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0xe480
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global0ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	data64(%rip), %rcx
    0000002d: 	movq	data64+8(%rip), %rsi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movslq	iterations(%rip), %rax
    00000042: 	movq	data64+24(%rip), %rdi
    00000049: 	movq	data64+16(%rip), %r8
    00000050: 	leaq	(%rax,%rax,2), %r10
    00000054: 	leaq	(%rax,%rax,8), %rdx
    00000058: 	movq	data64+32(%rip), %r9
    0000005f: 	leaq	(%rax,%r10,4), %r10
    00000063: 	leaq	(%rax,%rax,4), %rax
    00000067: 	shlq	$0x2, %rdx
    0000006b: 	leaq	(%rcx,%r10,4), %r10
    0000006f: 	movq	%r10, data64(%rip)
    00000076: 	leaq	(%rsi,%rax,8), %r10
    0000007a: 	leaq	(%rdi,%rax,4), %rax
    0000007e: 	movq	%rax, data64+24(%rip)
    00000085: 	movslq	init_value(%rip), %rax
    0000008c: 	movq	%r10, data64+8(%rip)
    00000093: 	leaq	(%rdx,%r8), %r10
    00000097: 	addq	%r9, %rdx
    0000009a: 	movq	%r10, data64+16(%rip)
    000000a1: 	movq	%rdx, data64+32(%rip)
    000000a8: 	cmpq	%rax, %rcx
    000000ab: 	jne	.Ltmp669 # Offset: 171
    000000ad: 	cmpq	%rax, %rsi
    000000b0: 	jne	.Ltmp669 # Offset: 176
    000000b2: 	cmpq	%rax, %r8
    000000b5: 	setne	%dl
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	setne	%cl
    000000be: 	orb	%cl, %dl
    000000c0: 	jne	.Ltmp669 # Offset: 192
    000000c2: 	cmpq	%rax, %r9
    000000c5: 	je	.Ltmp670 # Offset: 197
.Ltmp669:
    000000c7: 	movq	(%rbp), %rdx
    000000cb: 	leaq	DATAat0x158f3(%rip), %rsi
    000000d2: 	movl	$0x1, %edi
    000000d7: 	xorl	%eax, %eax
    000000d9: 	callq	__printf_chk@PLT # Offset: 217
.Ltmp670:
    000000de: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ec: 	subq	$0x20, %rax
    000000f0: 	cmpq	%rax, %rbx
    000000f3: 	je	.Ltmp671 # Offset: 243
    000000f9: 	leaq	0x10(%rbx), %rdi
    000000fd: 	movq	0x8(%rbp), %r12
    00000101: 	movq	%rdi, (%rbx)
    00000104: 	movq	(%rbp), %r13
    00000108: 	movq	%r13, %rax
    0000010b: 	addq	%r12, %rax
    0000010e: 	je	.Ltmp672 # Offset: 270
    00000110: 	testq	%r13, %r13
    00000113: 	je	.Ltmp673 # Offset: 275
.Ltmp672:
    00000119: 	movq	%r12, (%rsp)
    0000011d: 	cmpq	$0xf, %r12
    00000121: 	ja	.Ltmp674 # Offset: 289
    00000127: 	cmpq	$0x1, %r12
    0000012b: 	jne	.Ltmp675 # Offset: 299
    00000131: 	movzbl	(%r13), %eax
    00000136: 	movb	%al, 0x10(%rbx)
.Ltmp678:
    00000139: 	movq	%r12, 0x8(%rbx)
    0000013d: 	movb	$0x0, (%rdi,%r12)
    00000142: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000149: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000150: 	addq	$0x20, %rax
    00000154: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000015b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000162: 	je	.Ltmp676 # Offset: 354
.Ltmp679:
    00000168: 	movq	-0x20(%rax), %rbp
    0000016c: 	callq	clock@PLT # Offset: 364
    00000171: 	movq	%rax, end_time(%rip)
    00000178: 	movq	0x8(%rsp), %rdx
    0000017d: 	subq	%fs:0x28, %rdx
    00000186: 	jne	.Ltmp677 # Offset: 390
    0000018c: 	subq	start_time(%rip), %rax
    00000193: 	pxor	%xmm0, %xmm0
    00000197: 	movq	%rbp, %rdi
    0000019a: 	cvtsi2sd	%rax, %xmm0
    0000019f: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001a7: 	addq	$0x18, %rsp
    000001ab: 	popq	%rbx
    000001ac: 	popq	%rbp
    000001ad: 	popq	%r12
    000001af: 	popq	%r13
    000001b1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 433
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp674:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	%rsp, %rsi
    000001c6: 	xorl	%edx, %edx
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 456
    000001cd: 	movq	%rax, (%rbx)
    000001d0: 	movq	%rax, %rdi
    000001d3: 	movq	(%rsp), %rax
    000001d7: 	movq	%rax, 0x10(%rbx)
.Ltmp680:
    000001db: 	movq	%r12, %rdx
    000001de: 	movq	%r13, %rsi
    000001e1: 	callq	memcpy@PLT # Offset: 481
    000001e6: 	movq	(%rsp), %r12
    000001ea: 	movq	(%rbx), %rdi
    000001ed: 	jmp	.Ltmp678 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp671:
    000001f8: 	movq	%rbp, %rsi
    000001fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000215: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021c: 	jne	.Ltmp679 # Offset: 540
.Ltmp676:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp679 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp675:
    00000238: 	testq	%r12, %r12
    0000023b: 	je	.Ltmp678 # Offset: 571
    00000241: 	jmp	.Ltmp680 # Offset: 577
.Ltmp673:
    00000243: 	leaq	DATAat0x15008(%rip), %rdi
    0000024a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 586
.Ltmp677:
    0000024f: 	callq	__stack_chk_fail@PLT # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global0ImXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global0IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0xe6e0
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0xe6e0
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global0IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movd	iterations(%rip), %xmm4
    0000002e: 	movdqa	DATAat0x15d40(%rip), %xmm3
    00000036: 	movl	data32+16(%rip), %ecx
    0000003c: 	movdqa	data32(%rip), %xmm2
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	pshufd	$0x0, %xmm4, %xmm1
    00000050: 	movl	init_value(%rip), %edx
    00000056: 	movl	data32+12(%rip), %esi
    0000005c: 	movdqa	%xmm1, %xmm0
    00000060: 	psrlq	$0x20, %xmm1
    00000065: 	movl	data32+8(%rip), %edi
    0000006b: 	pmuludq	%xmm3, %xmm0
    0000006f: 	psrlq	$0x20, %xmm3
    00000074: 	pmuludq	%xmm3, %xmm1
    00000078: 	pshufd	$0x8, %xmm0, %xmm0
    0000007d: 	pshufd	$0x8, %xmm1, %xmm1
    00000082: 	punpckldq	%xmm1, %xmm0
    00000086: 	movdqa	%xmm0, %xmm1
    0000008a: 	punpckhdq	%xmm0, %xmm0
    0000008e: 	movd	%xmm0, %eax
    00000092: 	paddd	%xmm2, %xmm1
    00000096: 	addl	%ecx, %eax
    00000098: 	movaps	%xmm1, data32(%rip)
    0000009f: 	movl	%eax, data32+16(%rip)
    000000a5: 	movd	%xmm2, %eax
    000000a9: 	cmpl	%edx, %eax
    000000ab: 	jne	.Ltmp681 # Offset: 171
    000000ad: 	pshufd	$0x55, %xmm2, %xmm2
    000000b2: 	movd	%xmm2, %eax
    000000b6: 	cmpl	%edx, %eax
    000000b8: 	jne	.Ltmp681 # Offset: 184
    000000ba: 	cmpl	%edi, %edx
    000000bc: 	setne	%al
    000000bf: 	cmpl	%esi, %edx
    000000c1: 	setne	%sil
    000000c5: 	orb	%sil, %al
    000000c8: 	jne	.Ltmp681 # Offset: 200
    000000ca: 	cmpl	%edx, %ecx
    000000cc: 	je	.Ltmp682 # Offset: 204
.Ltmp681:
    000000ce: 	movq	(%rbp), %rdx
    000000d2: 	leaq	DATAat0x158f3(%rip), %rsi
    000000d9: 	movl	$0x1, %edi
    000000de: 	xorl	%eax, %eax
    000000e0: 	callq	__printf_chk@PLT # Offset: 224
.Ltmp682:
    000000e5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ec: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f3: 	subq	$0x20, %rax
    000000f7: 	cmpq	%rax, %rbx
    000000fa: 	je	.Ltmp683 # Offset: 250
    00000100: 	leaq	0x10(%rbx), %rdi
    00000104: 	movq	0x8(%rbp), %r12
    00000108: 	movq	%rdi, (%rbx)
    0000010b: 	movq	(%rbp), %r13
    0000010f: 	movq	%r13, %rax
    00000112: 	addq	%r12, %rax
    00000115: 	je	.Ltmp684 # Offset: 277
    00000117: 	testq	%r13, %r13
    0000011a: 	je	.Ltmp685 # Offset: 282
.Ltmp684:
    00000120: 	movq	%r12, (%rsp)
    00000124: 	cmpq	$0xf, %r12
    00000128: 	ja	.Ltmp686 # Offset: 296
    0000012e: 	cmpq	$0x1, %r12
    00000132: 	jne	.Ltmp687 # Offset: 306
    00000138: 	movzbl	(%r13), %eax
    0000013d: 	movb	%al, 0x10(%rbx)
.Ltmp690:
    00000140: 	movq	%r12, 0x8(%rbx)
    00000144: 	movb	$0x0, (%rdi,%r12)
    00000149: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000150: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000157: 	addq	$0x20, %rax
    0000015b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000162: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000169: 	je	.Ltmp688 # Offset: 361
.Ltmp691:
    0000016f: 	movq	-0x20(%rax), %rbp
    00000173: 	callq	clock@PLT # Offset: 371
    00000178: 	movq	%rax, end_time(%rip)
    0000017f: 	movq	0x8(%rsp), %rdx
    00000184: 	subq	%fs:0x28, %rdx
    0000018d: 	jne	.Ltmp689 # Offset: 397
    00000193: 	subq	start_time(%rip), %rax
    0000019a: 	pxor	%xmm0, %xmm0
    0000019e: 	movq	%rbp, %rdi
    000001a1: 	cvtsi2sd	%rax, %xmm0
    000001a6: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001ae: 	addq	$0x18, %rsp
    000001b2: 	popq	%rbx
    000001b3: 	popq	%rbp
    000001b4: 	popq	%r12
    000001b6: 	popq	%r13
    000001b8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 440
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp686:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	%rsp, %rsi
    000001c6: 	xorl	%edx, %edx
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 456
    000001cd: 	movq	%rax, (%rbx)
    000001d0: 	movq	%rax, %rdi
    000001d3: 	movq	(%rsp), %rax
    000001d7: 	movq	%rax, 0x10(%rbx)
.Ltmp692:
    000001db: 	movq	%r12, %rdx
    000001de: 	movq	%r13, %rsi
    000001e1: 	callq	memcpy@PLT # Offset: 481
    000001e6: 	movq	(%rsp), %r12
    000001ea: 	movq	(%rbx), %rdi
    000001ed: 	jmp	.Ltmp690 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp683:
    000001f8: 	movq	%rbp, %rsi
    000001fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000215: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021c: 	jne	.Ltmp691 # Offset: 540
.Ltmp688:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp691 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp687:
    00000238: 	testq	%r12, %r12
    0000023b: 	je	.Ltmp690 # Offset: 571
    00000241: 	jmp	.Ltmp692 # Offset: 577
.Ltmp685:
    00000243: 	leaq	DATAat0x15008(%rip), %rdi
    0000024a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 586
.Ltmp689:
    0000024f: 	callq	__stack_chk_fail@PLT # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global0IiXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global0IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0xe940
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0xe940
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global0IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movd	iterations(%rip), %xmm2
    0000002e: 	movq	DATAat0x15d80(%rip), %xmm1
    00000036: 	movzwl	data16+8(%rip), %edi
    0000003d: 	movl	init_value(%rip), %edx
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	pshuflw	$0x0, %xmm2, %xmm0
    0000004f: 	pmullw	%xmm1, %xmm0
    00000053: 	movq	data16(%rip), %xmm1
    0000005b: 	paddw	%xmm0, %xmm1
    0000005f: 	pextrw	$0x2, %xmm0, %eax
    00000064: 	pextrw	$0x0, %xmm0, %ecx
    00000069: 	addl	%eax, %edi
    0000006b: 	addl	%edx, %ecx
    0000006d: 	pextrw	$0x3, %xmm0, %esi
    00000072: 	movw	%di, data16+8(%rip)
    00000079: 	pextrw	$0x0, %xmm1, %r10d
    0000007f: 	pextrw	$0x3, %xmm1, %r9d
    00000085: 	pextrw	$0x2, %xmm1, %r8d
    0000008b: 	movq	%xmm1, data16(%rip)
    00000093: 	cmpw	%r10w, %cx
    00000097: 	jne	.Ltmp693 # Offset: 151
    00000099: 	pextrw	$0x1, %xmm0, %ecx
    0000009e: 	pextrw	$0x1, %xmm1, %r10d
    000000a4: 	addl	%edx, %ecx
    000000a6: 	cmpw	%r10w, %cx
    000000aa: 	jne	.Ltmp693 # Offset: 170
    000000ac: 	addl	%edx, %esi
    000000ae: 	addl	%edx, %eax
    000000b0: 	cmpw	%r9w, %si
    000000b4: 	setne	%dl
    000000b7: 	cmpw	%r8w, %ax
    000000bb: 	setne	%cl
    000000be: 	orb	%cl, %dl
    000000c0: 	jne	.Ltmp693 # Offset: 192
    000000c2: 	cmpw	%ax, %di
    000000c5: 	je	.Ltmp694 # Offset: 197
.Ltmp693:
    000000c7: 	movq	(%rbp), %rdx
    000000cb: 	leaq	DATAat0x158f3(%rip), %rsi
    000000d2: 	movl	$0x1, %edi
    000000d7: 	xorl	%eax, %eax
    000000d9: 	callq	__printf_chk@PLT # Offset: 217
.Ltmp694:
    000000de: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ec: 	subq	$0x20, %rax
    000000f0: 	cmpq	%rax, %rbx
    000000f3: 	je	.Ltmp695 # Offset: 243
    000000f9: 	leaq	0x10(%rbx), %rdi
    000000fd: 	movq	0x8(%rbp), %r12
    00000101: 	movq	%rdi, (%rbx)
    00000104: 	movq	(%rbp), %r13
    00000108: 	movq	%r13, %rax
    0000010b: 	addq	%r12, %rax
    0000010e: 	je	.Ltmp696 # Offset: 270
    00000110: 	testq	%r13, %r13
    00000113: 	je	.Ltmp697 # Offset: 275
.Ltmp696:
    00000119: 	movq	%r12, (%rsp)
    0000011d: 	cmpq	$0xf, %r12
    00000121: 	ja	.Ltmp698 # Offset: 289
    00000127: 	cmpq	$0x1, %r12
    0000012b: 	jne	.Ltmp699 # Offset: 299
    00000131: 	movzbl	(%r13), %eax
    00000136: 	movb	%al, 0x10(%rbx)
.Ltmp702:
    00000139: 	movq	%r12, 0x8(%rbx)
    0000013d: 	movb	$0x0, (%rdi,%r12)
    00000142: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000149: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000150: 	addq	$0x20, %rax
    00000154: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000015b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000162: 	je	.Ltmp700 # Offset: 354
.Ltmp703:
    00000168: 	movq	-0x20(%rax), %rbp
    0000016c: 	callq	clock@PLT # Offset: 364
    00000171: 	movq	%rax, end_time(%rip)
    00000178: 	movq	0x8(%rsp), %rdx
    0000017d: 	subq	%fs:0x28, %rdx
    00000186: 	jne	.Ltmp701 # Offset: 390
    0000018c: 	subq	start_time(%rip), %rax
    00000193: 	pxor	%xmm0, %xmm0
    00000197: 	movq	%rbp, %rdi
    0000019a: 	cvtsi2sd	%rax, %xmm0
    0000019f: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001a7: 	addq	$0x18, %rsp
    000001ab: 	popq	%rbx
    000001ac: 	popq	%rbp
    000001ad: 	popq	%r12
    000001af: 	popq	%r13
    000001b1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 433
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp698:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	%rsp, %rsi
    000001c6: 	xorl	%edx, %edx
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 456
    000001cd: 	movq	%rax, (%rbx)
    000001d0: 	movq	%rax, %rdi
    000001d3: 	movq	(%rsp), %rax
    000001d7: 	movq	%rax, 0x10(%rbx)
.Ltmp704:
    000001db: 	movq	%r12, %rdx
    000001de: 	movq	%r13, %rsi
    000001e1: 	callq	memcpy@PLT # Offset: 481
    000001e6: 	movq	(%rsp), %r12
    000001ea: 	movq	(%rbx), %rdi
    000001ed: 	jmp	.Ltmp702 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp695:
    000001f8: 	movq	%rbp, %rsi
    000001fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000215: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021c: 	jne	.Ltmp703 # Offset: 540
.Ltmp700:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp703 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp699:
    00000238: 	testq	%r12, %r12
    0000023b: 	je	.Ltmp702 # Offset: 571
    00000241: 	jmp	.Ltmp704 # Offset: 577
.Ltmp697:
    00000243: 	leaq	DATAat0x15008(%rip), %rdi
    0000024a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 586
.Ltmp701:
    0000024f: 	callq	__stack_chk_fail@PLT # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global0IsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_array5_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0xeba0
  Size        : 0x2b4
  MaxSize     : 0x2c0
  Offset      : 0xeba0
  Section     : .text
  Orc Section : .local.text._Z16test_array5_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %edx
    0000002f: 	movupd	(%rbx), %xmm0
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movupd	0x10(%rbx), %xmm1
    0000003f: 	movsd	0x20(%rbx), %xmm2
    00000044: 	testl	%edx, %edx
    00000046: 	jle	.Ltmp705 # Offset: 70
    00000048: 	movapd	DATAat0x15db0(%rip), %xmm5
    00000050: 	movapd	DATAat0x15dc0(%rip), %xmm4
    00000058: 	xorl	%eax, %eax
    0000005a: 	movsd	DATAat0x15dc0(%rip), %xmm3
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp706:
    00000068: 	addl	$0x1, %eax
    0000006b: 	addpd	%xmm5, %xmm0
    0000006f: 	addpd	%xmm4, %xmm1
    00000073: 	addsd	%xmm3, %xmm2
    00000077: 	cmpl	%edx, %eax
    00000079: 	jne	.Ltmp706 # Offset: 121
.Ltmp705:
    0000007b: 	movapd	%xmm1, %xmm6
    0000007f: 	movapd	%xmm1, %xmm7
    00000083: 	movups	%xmm1, 0x10(%rbx)
    00000087: 	pxor	%xmm1, %xmm1
    0000008b: 	cvtsi2sd	%edx, %xmm1
    0000008f: 	pxor	%xmm3, %xmm3
    00000093: 	movl	$0x1, %eax
    00000098: 	movups	%xmm0, (%rbx)
    0000009b: 	movsd	DATAat0x15db0(%rip), %xmm4
    000000a3: 	cvtsi2sdl	init_value(%rip), %xmm3
    000000ab: 	unpckhpd	%xmm6, %xmm6
    000000af: 	movsd	%xmm2, 0x20(%rbx)
    000000b4: 	mulsd	%xmm1, %xmm4
    000000b8: 	addsd	%xmm3, %xmm4
    000000bc: 	ucomisd	%xmm0, %xmm4
    000000c0: 	setp	%dl
    000000c3: 	cmovnel	%eax, %edx
    000000c6: 	testb	%dl, %dl
    000000c8: 	jne	.Ltmp707 # Offset: 200
    000000ca: 	movsd	DATAat0x15db8(%rip), %xmm4
    000000d2: 	unpckhpd	%xmm0, %xmm0
    000000d6: 	mulsd	%xmm1, %xmm4
    000000da: 	addsd	%xmm3, %xmm4
    000000de: 	ucomisd	%xmm0, %xmm4
    000000e2: 	setp	%dl
    000000e5: 	cmovnel	%eax, %edx
    000000e8: 	testb	%dl, %dl
    000000ea: 	jne	.Ltmp707 # Offset: 234
    000000ec: 	movsd	DATAat0x15dc0(%rip), %xmm0
    000000f4: 	mulsd	%xmm1, %xmm0
    000000f8: 	mulsd	DATAat0x15dc8(%rip), %xmm1
    00000100: 	addsd	%xmm3, %xmm0
    00000104: 	addsd	%xmm3, %xmm1
    00000108: 	ucomisd	%xmm6, %xmm1
    0000010c: 	setp	%dl
    0000010f: 	cmovnel	%eax, %edx
    00000112: 	ucomisd	%xmm0, %xmm7
    00000116: 	setp	%cl
    00000119: 	cmovnel	%eax, %ecx
    0000011c: 	orb	%cl, %dl
    0000011e: 	jne	.Ltmp707 # Offset: 286
    00000120: 	ucomisd	%xmm0, %xmm2
    00000124: 	setp	%dl
    00000127: 	cmovel	%edx, %eax
    0000012a: 	testb	%al, %al
    0000012c: 	je	.Ltmp708 # Offset: 300
.Ltmp707:
    0000012e: 	movq	(%rbp), %rdx
    00000132: 	leaq	DATAat0x158f3(%rip), %rsi
    00000139: 	movl	$0x1, %edi
    0000013e: 	xorl	%eax, %eax
    00000140: 	callq	__printf_chk@PLT # Offset: 320
.Ltmp708:
    00000145: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000014c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000153: 	subq	$0x20, %rax
    00000157: 	cmpq	%rax, %rbx
    0000015a: 	je	.Ltmp709 # Offset: 346
    00000160: 	leaq	0x10(%rbx), %rdi
    00000164: 	movq	0x8(%rbp), %r12
    00000168: 	movq	%rdi, (%rbx)
    0000016b: 	movq	(%rbp), %r13
    0000016f: 	movq	%r13, %rax
    00000172: 	addq	%r12, %rax
    00000175: 	je	.Ltmp710 # Offset: 373
    00000177: 	testq	%r13, %r13
    0000017a: 	je	.Ltmp711 # Offset: 378
.Ltmp710:
    00000180: 	movq	%r12, (%rsp)
    00000184: 	cmpq	$0xf, %r12
    00000188: 	ja	.Ltmp712 # Offset: 392
    0000018e: 	cmpq	$0x1, %r12
    00000192: 	jne	.Ltmp713 # Offset: 402
    00000198: 	movzbl	(%r13), %eax
    0000019d: 	movb	%al, 0x10(%rbx)
.Ltmp716:
    000001a0: 	movq	%r12, 0x8(%rbx)
    000001a4: 	movb	$0x0, (%rdi,%r12)
    000001a9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001b0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001b7: 	addq	$0x20, %rax
    000001bb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001c2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001c9: 	je	.Ltmp714 # Offset: 457
.Ltmp717:
    000001cf: 	movq	-0x20(%rax), %rbp
    000001d3: 	callq	clock@PLT # Offset: 467
    000001d8: 	movq	%rax, end_time(%rip)
    000001df: 	movq	0x8(%rsp), %rdx
    000001e4: 	subq	%fs:0x28, %rdx
    000001ed: 	jne	.Ltmp715 # Offset: 493
    000001f3: 	subq	start_time(%rip), %rax
    000001fa: 	pxor	%xmm0, %xmm0
    000001fe: 	movq	%rbp, %rdi
    00000201: 	cvtsi2sd	%rax, %xmm0
    00000206: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000020e: 	addq	$0x18, %rsp
    00000212: 	popq	%rbx
    00000213: 	popq	%rbp
    00000214: 	popq	%r12
    00000216: 	popq	%r13
    00000218: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 536
    0000021d: 	nopl	(%rax) # Size: 3
.Ltmp712:
    00000220: 	movq	%rbx, %rdi
    00000223: 	movq	%rsp, %rsi
    00000226: 	xorl	%edx, %edx
    00000228: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 552
    0000022d: 	movq	%rax, (%rbx)
    00000230: 	movq	%rax, %rdi
    00000233: 	movq	(%rsp), %rax
    00000237: 	movq	%rax, 0x10(%rbx)
.Ltmp718:
    0000023b: 	movq	%r12, %rdx
    0000023e: 	movq	%r13, %rsi
    00000241: 	callq	memcpy@PLT # Offset: 577
    00000246: 	movq	(%rsp), %r12
    0000024a: 	movq	(%rbx), %rdi
    0000024d: 	jmp	.Ltmp716 # Offset: 589
    00000252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp709:
    00000258: 	movq	%rbp, %rsi
    0000025b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000262: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 610
    00000267: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000026e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000275: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000027c: 	jne	.Ltmp717 # Offset: 636
.Ltmp714:
    00000282: 	movq	-0x8(%rdx), %rax
    00000286: 	addq	$0x200, %rax
    0000028c: 	jmp	.Ltmp717 # Offset: 652
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp713:
    00000298: 	testq	%r12, %r12
    0000029b: 	je	.Ltmp716 # Offset: 667
    000002a1: 	jmp	.Ltmp718 # Offset: 673
.Ltmp715:
    000002a3: 	callq	__stack_chk_fail@PLT # Offset: 675
.Ltmp711:
    000002a8: 	leaq	DATAat0x15008(%rip), %rdi
    000002af: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 687
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_array5_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global1IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0xee60
  Size        : 0x2c4
  MaxSize     : 0x2d0
  Offset      : 0xee60
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global1IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movapd	dataDouble(%rip), %xmm0
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movapd	dataDouble+16(%rip), %xmm1
    00000043: 	movsd	dataDouble+32(%rip), %xmm2
    0000004b: 	testl	%edx, %edx
    0000004d: 	jle	.Ltmp719 # Offset: 77
    0000004f: 	movapd	DATAat0x15db0(%rip), %xmm5
    00000057: 	movapd	DATAat0x15dc0(%rip), %xmm4
    0000005f: 	xorl	%eax, %eax
    00000061: 	movsd	DATAat0x15dc0(%rip), %xmm3
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp720:
    00000070: 	addl	$0x1, %eax
    00000073: 	addpd	%xmm5, %xmm0
    00000077: 	addpd	%xmm4, %xmm1
    0000007b: 	addsd	%xmm3, %xmm2
    0000007f: 	cmpl	%edx, %eax
    00000081: 	jne	.Ltmp720 # Offset: 129
.Ltmp719:
    00000083: 	movapd	%xmm1, %xmm6
    00000087: 	movapd	%xmm1, %xmm5
    0000008b: 	pxor	%xmm3, %xmm3
    0000008f: 	movaps	%xmm1, dataDouble+16(%rip)
    00000096: 	pxor	%xmm1, %xmm1
    0000009a: 	movsd	DATAat0x15db0(%rip), %xmm4
    000000a2: 	movl	$0x1, %eax
    000000a7: 	unpckhpd	%xmm6, %xmm6
    000000ab: 	cvtsi2sd	%edx, %xmm1
    000000af: 	movaps	%xmm0, dataDouble(%rip)
    000000b6: 	cvtsi2sdl	init_value(%rip), %xmm3
    000000be: 	movsd	%xmm2, dataDouble+32(%rip)
    000000c6: 	mulsd	%xmm1, %xmm4
    000000ca: 	addsd	%xmm3, %xmm4
    000000ce: 	ucomisd	%xmm0, %xmm4
    000000d2: 	setp	%dl
    000000d5: 	cmovnel	%eax, %edx
    000000d8: 	testb	%dl, %dl
    000000da: 	jne	.Ltmp721 # Offset: 218
    000000dc: 	movsd	DATAat0x15db8(%rip), %xmm4
    000000e4: 	unpckhpd	%xmm0, %xmm0
    000000e8: 	mulsd	%xmm1, %xmm4
    000000ec: 	addsd	%xmm3, %xmm4
    000000f0: 	ucomisd	%xmm0, %xmm4
    000000f4: 	setp	%dl
    000000f7: 	cmovnel	%eax, %edx
    000000fa: 	testb	%dl, %dl
    000000fc: 	jne	.Ltmp721 # Offset: 252
    000000fe: 	movsd	DATAat0x15dc0(%rip), %xmm0
    00000106: 	mulsd	%xmm1, %xmm0
    0000010a: 	mulsd	DATAat0x15dc8(%rip), %xmm1
    00000112: 	addsd	%xmm3, %xmm0
    00000116: 	addsd	%xmm3, %xmm1
    0000011a: 	ucomisd	%xmm6, %xmm1
    0000011e: 	setp	%dl
    00000121: 	cmovnel	%eax, %edx
    00000124: 	ucomisd	%xmm5, %xmm0
    00000128: 	setp	%cl
    0000012b: 	cmovnel	%eax, %ecx
    0000012e: 	orb	%cl, %dl
    00000130: 	jne	.Ltmp721 # Offset: 304
    00000132: 	ucomisd	%xmm0, %xmm2
    00000136: 	setp	%dl
    00000139: 	cmovel	%edx, %eax
    0000013c: 	testb	%al, %al
    0000013e: 	je	.Ltmp722 # Offset: 318
.Ltmp721:
    00000140: 	movq	(%rbp), %rdx
    00000144: 	leaq	DATAat0x158f3(%rip), %rsi
    0000014b: 	movl	$0x1, %edi
    00000150: 	xorl	%eax, %eax
    00000152: 	callq	__printf_chk@PLT # Offset: 338
.Ltmp722:
    00000157: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000015e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000165: 	subq	$0x20, %rax
    00000169: 	cmpq	%rax, %rbx
    0000016c: 	je	.Ltmp723 # Offset: 364
    00000172: 	leaq	0x10(%rbx), %rdi
    00000176: 	movq	0x8(%rbp), %r12
    0000017a: 	movq	%rdi, (%rbx)
    0000017d: 	movq	(%rbp), %r13
    00000181: 	movq	%r13, %rax
    00000184: 	addq	%r12, %rax
    00000187: 	je	.Ltmp724 # Offset: 391
    00000189: 	testq	%r13, %r13
    0000018c: 	je	.Ltmp725 # Offset: 396
.Ltmp724:
    00000192: 	movq	%r12, (%rsp)
    00000196: 	cmpq	$0xf, %r12
    0000019a: 	ja	.Ltmp726 # Offset: 410
    000001a0: 	cmpq	$0x1, %r12
    000001a4: 	jne	.Ltmp727 # Offset: 420
    000001aa: 	movzbl	(%r13), %eax
    000001af: 	movb	%al, 0x10(%rbx)
.Ltmp730:
    000001b2: 	movq	%r12, 0x8(%rbx)
    000001b6: 	movb	$0x0, (%rdi,%r12)
    000001bb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c9: 	addq	$0x20, %rax
    000001cd: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d4: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001db: 	je	.Ltmp728 # Offset: 475
.Ltmp731:
    000001e1: 	movq	-0x20(%rax), %rbp
    000001e5: 	callq	clock@PLT # Offset: 485
    000001ea: 	movq	%rax, end_time(%rip)
    000001f1: 	movq	0x8(%rsp), %rdx
    000001f6: 	subq	%fs:0x28, %rdx
    000001ff: 	jne	.Ltmp729 # Offset: 511
    00000205: 	subq	start_time(%rip), %rax
    0000020c: 	pxor	%xmm0, %xmm0
    00000210: 	movq	%rbp, %rdi
    00000213: 	cvtsi2sd	%rax, %xmm0
    00000218: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000220: 	addq	$0x18, %rsp
    00000224: 	popq	%rbx
    00000225: 	popq	%rbp
    00000226: 	popq	%r12
    00000228: 	popq	%r13
    0000022a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 554
    0000022f: 	nop # Size: 1
.Ltmp726:
    00000230: 	movq	%rbx, %rdi
    00000233: 	movq	%rsp, %rsi
    00000236: 	xorl	%edx, %edx
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%rbx)
    00000240: 	movq	%rax, %rdi
    00000243: 	movq	(%rsp), %rax
    00000247: 	movq	%rax, 0x10(%rbx)
.Ltmp732:
    0000024b: 	movq	%r12, %rdx
    0000024e: 	movq	%r13, %rsi
    00000251: 	callq	memcpy@PLT # Offset: 593
    00000256: 	movq	(%rsp), %r12
    0000025a: 	movq	(%rbx), %rdi
    0000025d: 	jmp	.Ltmp730 # Offset: 605
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp723:
    00000268: 	movq	%rbp, %rsi
    0000026b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000272: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 626
    00000277: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000285: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028c: 	jne	.Ltmp731 # Offset: 652
.Ltmp728:
    00000292: 	movq	-0x8(%rdx), %rax
    00000296: 	addq	$0x200, %rax
    0000029c: 	jmp	.Ltmp731 # Offset: 668
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp727:
    000002a8: 	testq	%r12, %r12
    000002ab: 	je	.Ltmp730 # Offset: 683
    000002b1: 	jmp	.Ltmp732 # Offset: 689
.Ltmp729:
    000002b3: 	callq	__stack_chk_fail@PLT # Offset: 691
.Ltmp725:
    000002b8: 	leaq	DATAat0x15008(%rip), %rdi
    000002bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 703
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global1IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array5_global0IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0xf130
  Size        : 0x2a4
  MaxSize     : 0x2b0
  Offset      : 0xf130
  Section     : .text
  Orc Section : .local.text._Z19test_array5_global0IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	movapd	DATAat0x15db0(%rip), %xmm1
    00000032: 	movapd	dataDouble+16(%rip), %xmm2
    0000003a: 	cvtsi2sdl	iterations(%rip), %xmm0
    00000042: 	movapd	dataDouble(%rip), %xmm3
    0000004a: 	movq	%rax, start_time(%rip)
    00000051: 	movl	$0x1, %eax
    00000056: 	unpcklpd	%xmm0, %xmm0
    0000005a: 	mulpd	%xmm0, %xmm1
    0000005e: 	mulpd	DATAat0x15dc0(%rip), %xmm0
    00000066: 	movapd	%xmm1, %xmm4
    0000006a: 	addpd	%xmm1, %xmm3
    0000006e: 	addpd	%xmm0, %xmm2
    00000072: 	movapd	%xmm0, %xmm5
    00000076: 	unpckhpd	%xmm5, %xmm5
    0000007a: 	movapd	%xmm5, %xmm8
    0000007f: 	movsd	dataDouble+32(%rip), %xmm5
    00000087: 	movaps	%xmm3, dataDouble(%rip)
    0000008e: 	movapd	%xmm2, %xmm6
    00000092: 	movaps	%xmm2, dataDouble+16(%rip)
    00000099: 	unpckhpd	%xmm6, %xmm6
    0000009d: 	addsd	%xmm0, %xmm5
    000000a1: 	movapd	%xmm6, %xmm7
    000000a5: 	movapd	%xmm2, %xmm6
    000000a9: 	pxor	%xmm2, %xmm2
    000000ad: 	cvtsi2sdl	init_value(%rip), %xmm2
    000000b5: 	movsd	%xmm5, dataDouble+32(%rip)
    000000bd: 	addsd	%xmm2, %xmm4
    000000c1: 	ucomisd	%xmm3, %xmm4
    000000c5: 	setp	%dl
    000000c8: 	cmovnel	%eax, %edx
    000000cb: 	testb	%dl, %dl
    000000cd: 	jne	.Ltmp733 # Offset: 205
    000000cf: 	unpckhpd	%xmm1, %xmm1
    000000d3: 	unpckhpd	%xmm3, %xmm3
    000000d7: 	addsd	%xmm2, %xmm1
    000000db: 	ucomisd	%xmm3, %xmm1
    000000df: 	setp	%dl
    000000e2: 	cmovnel	%eax, %edx
    000000e5: 	testb	%dl, %dl
    000000e7: 	jne	.Ltmp733 # Offset: 231
    000000e9: 	addsd	%xmm2, %xmm0
    000000ed: 	addsd	%xmm8, %xmm2
    000000f2: 	ucomisd	%xmm7, %xmm2
    000000f6: 	setp	%dl
    000000f9: 	cmovnel	%eax, %edx
    000000fc: 	ucomisd	%xmm6, %xmm0
    00000100: 	setp	%cl
    00000103: 	cmovnel	%eax, %ecx
    00000106: 	orb	%cl, %dl
    00000108: 	jne	.Ltmp733 # Offset: 264
    0000010a: 	ucomisd	%xmm0, %xmm5
    0000010e: 	setp	%dl
    00000111: 	cmovel	%edx, %eax
    00000114: 	testb	%al, %al
    00000116: 	je	.Ltmp734 # Offset: 278
.Ltmp733:
    00000118: 	movq	(%rbp), %rdx
    0000011c: 	leaq	DATAat0x158f3(%rip), %rsi
    00000123: 	movl	$0x1, %edi
    00000128: 	xorl	%eax, %eax
    0000012a: 	callq	__printf_chk@PLT # Offset: 298
.Ltmp734:
    0000012f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000136: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000013d: 	subq	$0x20, %rax
    00000141: 	cmpq	%rax, %rbx
    00000144: 	je	.Ltmp735 # Offset: 324
    0000014a: 	leaq	0x10(%rbx), %rdi
    0000014e: 	movq	0x8(%rbp), %r12
    00000152: 	movq	%rdi, (%rbx)
    00000155: 	movq	(%rbp), %r13
    00000159: 	movq	%r13, %rax
    0000015c: 	addq	%r12, %rax
    0000015f: 	je	.Ltmp736 # Offset: 351
    00000161: 	testq	%r13, %r13
    00000164: 	je	.Ltmp737 # Offset: 356
.Ltmp736:
    0000016a: 	movq	%r12, (%rsp)
    0000016e: 	cmpq	$0xf, %r12
    00000172: 	ja	.Ltmp738 # Offset: 370
    00000178: 	cmpq	$0x1, %r12
    0000017c: 	jne	.Ltmp739 # Offset: 380
    00000182: 	movzbl	(%r13), %eax
    00000187: 	movb	%al, 0x10(%rbx)
.Ltmp742:
    0000018a: 	movq	%r12, 0x8(%rbx)
    0000018e: 	movb	$0x0, (%rdi,%r12)
    00000193: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000019a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001a1: 	addq	$0x20, %rax
    000001a5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ac: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001b3: 	je	.Ltmp740 # Offset: 435
.Ltmp743:
    000001b9: 	movq	-0x20(%rax), %rbp
    000001bd: 	callq	clock@PLT # Offset: 445
    000001c2: 	movq	%rax, end_time(%rip)
    000001c9: 	movq	0x8(%rsp), %rdx
    000001ce: 	subq	%fs:0x28, %rdx
    000001d7: 	jne	.Ltmp741 # Offset: 471
    000001dd: 	subq	start_time(%rip), %rax
    000001e4: 	pxor	%xmm0, %xmm0
    000001e8: 	movq	%rbp, %rdi
    000001eb: 	cvtsi2sd	%rax, %xmm0
    000001f0: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001f8: 	addq	$0x18, %rsp
    000001fc: 	popq	%rbx
    000001fd: 	popq	%rbp
    000001fe: 	popq	%r12
    00000200: 	popq	%r13
    00000202: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 514
    00000207: 	nopw	(%rax,%rax) # Size: 9
.Ltmp738:
    00000210: 	movq	%rbx, %rdi
    00000213: 	movq	%rsp, %rsi
    00000216: 	xorl	%edx, %edx
    00000218: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 536
    0000021d: 	movq	%rax, (%rbx)
    00000220: 	movq	%rax, %rdi
    00000223: 	movq	(%rsp), %rax
    00000227: 	movq	%rax, 0x10(%rbx)
.Ltmp744:
    0000022b: 	movq	%r12, %rdx
    0000022e: 	movq	%r13, %rsi
    00000231: 	callq	memcpy@PLT # Offset: 561
    00000236: 	movq	(%rsp), %r12
    0000023a: 	movq	(%rbx), %rdi
    0000023d: 	jmp	.Ltmp742 # Offset: 573
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp735:
    00000248: 	movq	%rbp, %rsi
    0000024b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000252: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 594
    00000257: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000265: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000026c: 	jne	.Ltmp743 # Offset: 620
.Ltmp740:
    00000272: 	movq	-0x8(%rdx), %rax
    00000276: 	addq	$0x200, %rax
    0000027c: 	jmp	.Ltmp743 # Offset: 636
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp739:
    00000288: 	testq	%r12, %r12
    0000028b: 	je	.Ltmp742 # Offset: 651
    00000291: 	jmp	.Ltmp744 # Offset: 657
.Ltmp737:
    00000293: 	leaq	DATAat0x15008(%rip), %rdi
    0000029a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 666
.Ltmp741:
    0000029f: 	callq	__stack_chk_fail@PLT # Offset: 671
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array5_global0IdXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0xf3e0
  Size        : 0x2ac
  MaxSize     : 0x2b0
  Offset      : 0xf3e0
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x68, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x58(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	movd	%ebx, %xmm6
    0000002b: 	pshufd	$0xe0, %xmm6, %xmm5
    00000030: 	pshufd	$0x0, %xmm6, %xmm4
    00000035: 	movq	%xmm5, %r12
    0000003a: 	movaps	%xmm4, (%rsp)
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movdqa	(%rsp), %xmm4
    00000048: 	movq	%r12, %xmm7
    0000004d: 	movdqa	DATAat0x15d40(%rip), %xmm1
    00000055: 	movq	%rax, start_time(%rip)
    0000005c: 	movl	iterations(%rip), %eax
    00000062: 	movd	%eax, %xmm5
    00000066: 	imull	$0x37, %eax, %edx
    00000069: 	leal	(%rax,%rax), %edi
    0000006c: 	movl	%eax, %r8d
    0000006f: 	pshufd	$0x0, %xmm5, %xmm0
    00000074: 	imull	$0x39, %eax, %esi
    00000077: 	shll	$0x4, %r8d
    0000007b: 	movdqa	%xmm0, %xmm2
    0000007f: 	movdqa	%xmm0, %xmm3
    00000083: 	pmuludq	%xmm1, %xmm2
    00000087: 	psrlq	$0x20, %xmm3
    0000008c: 	movd	%edx, %xmm6
    00000090: 	psrlq	$0x20, %xmm1
    00000095: 	imull	$0x34, %eax, %edx
    00000098: 	pmuludq	%xmm3, %xmm1
    0000009c: 	addl	%ebx, %edx
    0000009e: 	pshufd	$0x8, %xmm2, %xmm2
    000000a3: 	pshufd	$0x8, %xmm1, %xmm1
    000000a8: 	punpckldq	%xmm1, %xmm2
    000000ac: 	movdqa	DATAat0x15d50(%rip), %xmm1
    000000b4: 	paddd	%xmm4, %xmm2
    000000b8: 	pmuludq	%xmm1, %xmm0
    000000bc: 	psrlq	$0x20, %xmm1
    000000c1: 	movaps	%xmm2, 0x20(%rsp)
    000000c6: 	pmuludq	%xmm1, %xmm3
    000000ca: 	pshufd	$0x8, %xmm0, %xmm0
    000000cf: 	pshufd	$0x8, %xmm3, %xmm3
    000000d4: 	punpckldq	%xmm3, %xmm0
    000000d8: 	paddd	%xmm4, %xmm0
    000000dc: 	movaps	%xmm0, 0x30(%rsp)
    000000e1: 	movd	%esi, %xmm0
    000000e5: 	leal	(%rdi,%rax), %esi
    000000e8: 	leal	(,%rsi,4), %ecx
    000000ef: 	punpckldq	%xmm6, %xmm0
    000000f3: 	subl	%ecx, %edx
    000000f5: 	leal	(,%rax,4), %ecx
    000000fc: 	paddd	%xmm7, %xmm0
    00000100: 	subl	%ecx, %edx
    00000102: 	addl	%eax, %ecx
    00000104: 	leal	(%rax,%rcx,2), %r9d
    00000108: 	subl	%r8d, %edx
    0000010b: 	subl	%eax, %r8d
    0000010e: 	subl	%r9d, %edx
    00000111: 	movq	%xmm0, 0x40(%rsp)
    00000117: 	leal	(%rdx,%rsi,2), %edx
    0000011a: 	leal	(%rdx,%r8), %eax
    0000011e: 	leal	(%rsi,%rsi,8), %edx
    00000121: 	movq	%rbp, %rsi
    00000124: 	addl	%edx, %eax
    00000126: 	subl	%edi, %eax
    00000128: 	leaq	0x20(%rsp), %rdi
    0000012d: 	addl	%ecx, %eax
    0000012f: 	movl	%eax, 0x48(%rsp)
    00000133: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 307
    00000138: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000013f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000146: 	subq	$0x20, %rax
    0000014a: 	cmpq	%rax, %rbx
    0000014d: 	je	.Ltmp745 # Offset: 333
    00000153: 	leaq	0x10(%rbx), %rdi
    00000157: 	movq	0x8(%rbp), %r12
    0000015b: 	movq	%rdi, (%rbx)
    0000015e: 	movq	(%rbp), %r13
    00000162: 	movq	%r13, %rax
    00000165: 	addq	%r12, %rax
    00000168: 	je	.Ltmp746 # Offset: 360
    0000016a: 	testq	%r13, %r13
    0000016d: 	je	.Ltmp747 # Offset: 365
.Ltmp746:
    00000173: 	movq	%r12, 0x18(%rsp)
    00000178: 	cmpq	$0xf, %r12
    0000017c: 	ja	.Ltmp748 # Offset: 380
    00000182: 	cmpq	$0x1, %r12
    00000186: 	jne	.Ltmp749 # Offset: 390
    0000018c: 	movzbl	(%r13), %eax
    00000191: 	movb	%al, 0x10(%rbx)
.Ltmp752:
    00000194: 	movq	%r12, 0x8(%rbx)
    00000198: 	movb	$0x0, (%rdi,%r12)
    0000019d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001a4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ab: 	addq	$0x20, %rax
    000001af: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001b6: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001bd: 	je	.Ltmp750 # Offset: 445
.Ltmp753:
    000001c3: 	movq	-0x20(%rax), %rbp
    000001c7: 	callq	clock@PLT # Offset: 455
    000001cc: 	movq	%rax, end_time(%rip)
    000001d3: 	movq	0x58(%rsp), %rdx
    000001d8: 	subq	%fs:0x28, %rdx
    000001e1: 	jne	.Ltmp751 # Offset: 481
    000001e7: 	subq	start_time(%rip), %rax
    000001ee: 	pxor	%xmm0, %xmm0
    000001f2: 	movq	%rbp, %rdi
    000001f5: 	cvtsi2sd	%rax, %xmm0
    000001fa: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000202: 	addq	$0x68, %rsp
    00000206: 	popq	%rbx
    00000207: 	popq	%rbp
    00000208: 	popq	%r12
    0000020a: 	popq	%r13
    0000020c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp748:
    00000218: 	movq	%rbx, %rdi
    0000021b: 	leaq	0x18(%rsp), %rsi
    00000220: 	xorl	%edx, %edx
    00000222: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 546
    00000227: 	movq	%rax, (%rbx)
    0000022a: 	movq	%rax, %rdi
    0000022d: 	movq	0x18(%rsp), %rax
    00000232: 	movq	%rax, 0x10(%rbx)
.Ltmp754:
    00000236: 	movq	%r12, %rdx
    00000239: 	movq	%r13, %rsi
    0000023c: 	callq	memcpy@PLT # Offset: 572
    00000241: 	movq	0x18(%rsp), %r12
    00000246: 	movq	(%rbx), %rdi
    00000249: 	jmp	.Ltmp752 # Offset: 585
    0000024e: 	nop # Size: 2
.Ltmp745:
    00000250: 	movq	%rbp, %rsi
    00000253: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000025a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 602
    0000025f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000266: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000274: 	jne	.Ltmp753 # Offset: 628
.Ltmp750:
    0000027a: 	movq	-0x8(%rdx), %rax
    0000027e: 	addq	$0x200, %rax
    00000284: 	jmp	.Ltmp753 # Offset: 644
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp749:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp752 # Offset: 659
    00000299: 	jmp	.Ltmp754 # Offset: 665
.Ltmp751:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp747:
    000002a0: 	leaq	DATAat0x15008(%rip), %rdi
    000002a7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 679
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0xf690
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0xf690
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x38, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x28(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	iterations(%rip), %edx
    00000032: 	movd	%ebx, %xmm1
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	punpcklwd	%xmm1, %xmm1
    00000041: 	leal	(%rdx,%rdx), %edi
    00000044: 	movd	%edx, %xmm0
    00000048: 	pshufd	$0x0, %xmm1, %xmm1
    0000004d: 	movl	%edx, %r8d
    00000050: 	leal	(%rdi,%rdx), %esi
    00000053: 	shll	$0x4, %r8d
    00000057: 	punpcklwd	%xmm0, %xmm0
    0000005b: 	leal	(,%rsi,4), %ecx
    00000062: 	pshufd	$0x0, %xmm0, %xmm0
    00000067: 	pmullw	DATAat0x15d80(%rip), %xmm0
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	leal	(%rcx,%rdx), %eax
    00000076: 	movaps	%xmm0, 0x10(%rsp)
    0000007b: 	leal	(%rbx,%rax,4), %eax
    0000007e: 	subl	%ecx, %eax
    00000080: 	leal	(,%rdx,4), %ecx
    00000087: 	subl	%ecx, %eax
    00000089: 	addl	%edx, %ecx
    0000008b: 	leal	(%rdx,%rcx,2), %r9d
    0000008f: 	subl	%r8d, %eax
    00000092: 	subl	%edx, %r8d
    00000095: 	subl	%r9d, %eax
    00000098: 	leal	(%rax,%rsi,2), %eax
    0000009b: 	leal	(%rsi,%rsi,8), %esi
    0000009e: 	addl	%r8d, %eax
    000000a1: 	addl	%esi, %eax
    000000a3: 	movl	%eax, %esi
    000000a5: 	movzwl	%ax, %eax
    000000a8: 	subl	%edi, %esi
    000000aa: 	leaq	0x10(%rsp), %rdi
    000000af: 	movl	%esi, %edx
    000000b1: 	addl	%esi, %ecx
    000000b3: 	movq	%rbp, %rsi
    000000b6: 	shll	$0x10, %edx
    000000b9: 	movw	%cx, 0x24(%rsp)
    000000be: 	orl	%edx, %eax
    000000c0: 	movl	%eax, 0x20(%rsp)
    000000c4: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 196
    000000c9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %rbx
    000000de: 	je	.Ltmp755 # Offset: 222
    000000e4: 	leaq	0x10(%rbx), %rdi
    000000e8: 	movq	0x8(%rbp), %r12
    000000ec: 	movq	%rdi, (%rbx)
    000000ef: 	movq	(%rbp), %r13
    000000f3: 	movq	%r13, %rax
    000000f6: 	addq	%r12, %rax
    000000f9: 	je	.Ltmp756 # Offset: 249
    000000fb: 	testq	%r13, %r13
    000000fe: 	je	.Ltmp757 # Offset: 254
.Ltmp756:
    00000104: 	movq	%r12, 0x8(%rsp)
    00000109: 	cmpq	$0xf, %r12
    0000010d: 	ja	.Ltmp758 # Offset: 269
    00000113: 	cmpq	$0x1, %r12
    00000117: 	jne	.Ltmp759 # Offset: 279
    0000011d: 	movzbl	(%r13), %eax
    00000122: 	movb	%al, 0x10(%rbx)
.Ltmp762:
    00000125: 	movq	%r12, 0x8(%rbx)
    00000129: 	movb	$0x0, (%rdi,%r12)
    0000012e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000135: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000013c: 	addq	$0x20, %rax
    00000140: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000147: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000014e: 	je	.Ltmp760 # Offset: 334
.Ltmp763:
    00000154: 	movq	-0x20(%rax), %rbp
    00000158: 	callq	clock@PLT # Offset: 344
    0000015d: 	movq	%rax, end_time(%rip)
    00000164: 	movq	0x28(%rsp), %rdx
    00000169: 	subq	%fs:0x28, %rdx
    00000172: 	jne	.Ltmp761 # Offset: 370
    00000178: 	subq	start_time(%rip), %rax
    0000017f: 	pxor	%xmm0, %xmm0
    00000183: 	movq	%rbp, %rdi
    00000186: 	cvtsi2sd	%rax, %xmm0
    0000018b: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000193: 	addq	$0x38, %rsp
    00000197: 	popq	%rbx
    00000198: 	popq	%rbp
    00000199: 	popq	%r12
    0000019b: 	popq	%r13
    0000019d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 413
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp758:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	leaq	0x8(%rsp), %rsi
    000001b0: 	xorl	%edx, %edx
    000001b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 434
    000001b7: 	movq	%rax, (%rbx)
    000001ba: 	movq	%rax, %rdi
    000001bd: 	movq	0x8(%rsp), %rax
    000001c2: 	movq	%rax, 0x10(%rbx)
.Ltmp764:
    000001c6: 	movq	%r12, %rdx
    000001c9: 	movq	%r13, %rsi
    000001cc: 	callq	memcpy@PLT # Offset: 460
    000001d1: 	movq	0x8(%rsp), %r12
    000001d6: 	movq	(%rbx), %rdi
    000001d9: 	jmp	.Ltmp762 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp755:
    000001e0: 	movq	%rbp, %rsi
    000001e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 490
    000001ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000204: 	jne	.Ltmp763 # Offset: 516
.Ltmp760:
    0000020a: 	movq	-0x8(%rdx), %rax
    0000020e: 	addq	$0x200, %rax
    00000214: 	jmp	.Ltmp763 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp759:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp762 # Offset: 547
    00000229: 	jmp	.Ltmp764 # Offset: 553
.Ltmp761:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp757:
    00000230: 	leaq	DATAat0x15008(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_array11_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0xf8d0
  Size        : 0x25c
  MaxSize     : 0x260
  Offset      : 0xf8d0
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x78, %rsp
    00000011: 	movslq	init_value(%rip), %r13
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x68(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movslq	iterations(%rip), %rax
    0000003b: 	leaq	(%rax,%rax), %rbx
    0000003f: 	leaq	(%rbx,%rax), %rbp
    00000043: 	leaq	(,%rbp,4), %rdx
    0000004b: 	leaq	(%rdx,%rax), %rcx
    0000004f: 	leaq	(%r13,%rcx,4), %r11
    00000054: 	movq	%rax, %rcx
    00000057: 	movq	%r11, %r10
    0000005a: 	shlq	$0x4, %rcx
    0000005e: 	movq	%r11, 0x10(%rsp)
    00000063: 	subq	%rdx, %r10
    00000066: 	leaq	(,%rax,4), %rdx
    0000006e: 	movq	%r10, %rsi
    00000071: 	movq	%r10, 0x18(%rsp)
    00000076: 	subq	%rdx, %rsi
    00000079: 	addq	%rax, %rdx
    0000007c: 	movq	%rsi, %r9
    0000007f: 	leaq	(%rax,%rdx,2), %rdi
    00000083: 	movq	%rsi, 0x20(%rsp)
    00000088: 	subq	%rcx, %r9
    0000008b: 	subq	%rax, %rcx
    0000008e: 	movq	%rsi, 0x30(%rsp)
    00000093: 	movq	%r12, %rsi
    00000096: 	movq	%r9, %r8
    00000099: 	movq	%r9, 0x28(%rsp)
    0000009e: 	subq	%rdi, %r8
    000000a1: 	leaq	(%r8,%rbp,2), %rdi
    000000a5: 	movq	%r8, 0x38(%rsp)
    000000aa: 	leaq	(%rcx,%rdi), %rax
    000000ae: 	leaq	(%rbp,%rbp,8), %rcx
    000000b3: 	movq	%rdi, 0x40(%rsp)
    000000b8: 	addq	%rax, %rcx
    000000bb: 	leaq	0x10(%rsp), %rdi
    000000c0: 	movq	%rax, 0x48(%rsp)
    000000c5: 	movq	%rcx, %rbp
    000000c8: 	movq	%rcx, %xmm0
    000000cd: 	subq	%rbx, %rbp
    000000d0: 	movq	%rbp, %xmm1
    000000d5: 	addq	%rbp, %rdx
    000000d8: 	punpcklqdq	%xmm1, %xmm0
    000000dc: 	movq	%rdx, 0x60(%rsp)
    000000e1: 	movaps	%xmm0, 0x50(%rsp)
    000000e6: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 230
    000000eb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f9: 	subq	$0x20, %rax
    000000fd: 	cmpq	%rax, %rbx
    00000100: 	je	.Ltmp765 # Offset: 256
    00000106: 	leaq	0x10(%rbx), %rdi
    0000010a: 	movq	%rdi, (%rbx)
    0000010d: 	movq	(%r12), %rbp
    00000111: 	movq	0x8(%r12), %r12
    00000116: 	movq	%rbp, %rax
    00000119: 	addq	%r12, %rax
    0000011c: 	je	.Ltmp766 # Offset: 284
    0000011e: 	testq	%rbp, %rbp
    00000121: 	je	.Ltmp767 # Offset: 289
.Ltmp766:
    00000127: 	movq	%r12, 0x8(%rsp)
    0000012c: 	cmpq	$0xf, %r12
    00000130: 	ja	.Ltmp768 # Offset: 304
    00000136: 	cmpq	$0x1, %r12
    0000013a: 	jne	.Ltmp769 # Offset: 314
    00000140: 	movzbl	(%rbp), %eax
    00000144: 	movb	%al, 0x10(%rbx)
.Ltmp772:
    00000147: 	movq	%r12, 0x8(%rbx)
    0000014b: 	movb	$0x0, (%rdi,%r12)
    00000150: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000157: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015e: 	addq	$0x20, %rax
    00000162: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000169: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000170: 	je	.Ltmp770 # Offset: 368
.Ltmp773:
    00000176: 	movq	-0x20(%rax), %rbp
    0000017a: 	callq	clock@PLT # Offset: 378
    0000017f: 	movq	%rax, end_time(%rip)
    00000186: 	movq	0x68(%rsp), %rdx
    0000018b: 	subq	%fs:0x28, %rdx
    00000194: 	jne	.Ltmp771 # Offset: 404
    0000019a: 	subq	start_time(%rip), %rax
    000001a1: 	pxor	%xmm0, %xmm0
    000001a5: 	movq	%rbp, %rdi
    000001a8: 	cvtsi2sd	%rax, %xmm0
    000001ad: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001b5: 	addq	$0x78, %rsp
    000001b9: 	popq	%rbx
    000001ba: 	popq	%rbp
    000001bb: 	popq	%r12
    000001bd: 	popq	%r13
    000001bf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 447
    000001c4: 	nopl	(%rax) # Size: 4
.Ltmp768:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	leaq	0x8(%rsp), %rsi
    000001d0: 	xorl	%edx, %edx
    000001d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 466
    000001d7: 	movq	%rax, (%rbx)
    000001da: 	movq	%rax, %rdi
    000001dd: 	movq	0x8(%rsp), %rax
    000001e2: 	movq	%rax, 0x10(%rbx)
.Ltmp774:
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%rbp, %rsi
    000001ec: 	callq	memcpy@PLT # Offset: 492
    000001f1: 	movq	0x8(%rsp), %r12
    000001f6: 	movq	(%rbx), %rdi
    000001f9: 	jmp	.Ltmp772 # Offset: 505
    000001fe: 	nop # Size: 2
.Ltmp765:
    00000200: 	movq	%r12, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp773 # Offset: 548
.Ltmp770:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp773 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp769:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp772 # Offset: 579
    00000249: 	jmp	.Ltmp774 # Offset: 585
.Ltmp771:
    0000024b: 	callq	__stack_chk_fail@PLT # Offset: 587
.Ltmp767:
    00000250: 	leaq	DATAat0x15008(%rip), %rdi
    00000257: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 599
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0xfb30
  Size        : 0x244
  MaxSize     : 0x250
  Offset      : 0xfb30
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movslq	init_value(%rip), %rbx
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x8(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movslq	iterations(%rip), %rax
    0000003b: 	testl	%eax, %eax
    0000003d: 	jle	.Ltmp775 # Offset: 61
    00000043: 	leal	-0x1(%rax), %edx
    00000046: 	leaq	(%rdx,%rdx,2), %rcx
    0000004a: 	leaq	(%rdx,%rcx,4), %rsi
    0000004e: 	leaq	(%rdx,%rdx,4), %rcx
    00000052: 	leaq	(%rdx,%rdx,8), %rdx
    00000056: 	leaq	0x28(%rbx,%rcx,8), %rdi
    0000005b: 	leaq	0x24(%rbx,%rdx,4), %r9
    00000060: 	leaq	0x14(%rbx,%rcx,4), %r8
    00000065: 	leaq	0x34(%rbx,%rsi,4), %rbx
.Ltmp785:
    0000006a: 	leaq	(%rax,%rax,2), %rdx
    0000006e: 	movslq	init_value(%rip), %rcx
    00000075: 	shlq	$0x2, %rdx
    00000079: 	leaq	(%rdx,%rax), %rsi
    0000007d: 	leaq	(%rcx,%rsi,4), %rsi
    00000081: 	movq	%rsi, %rcx
    00000084: 	subq	%rdx, %rcx
    00000087: 	cmpq	%rbx, %rsi
    0000008a: 	jne	.Ltmp776 # Offset: 138
    0000008c: 	cmpq	%rdi, %rcx
    0000008f: 	jne	.Ltmp776 # Offset: 143
    00000091: 	leaq	(,%rax,4), %rdx
    00000099: 	shlq	$0x4, %rax
    0000009d: 	subq	%rdx, %rcx
    000000a0: 	movq	%rcx, %rdx
    000000a3: 	subq	%rax, %rdx
    000000a6: 	cmpq	%r8, %rdx
    000000a9: 	jne	.Ltmp776 # Offset: 169
    000000ab: 	cmpq	%r9, %rcx
    000000ae: 	je	.Ltmp777 # Offset: 174
.Ltmp776:
    000000b0: 	movq	(%rbp), %rdx
    000000b4: 	leaq	DATAat0x158f3(%rip), %rsi
    000000bb: 	movl	$0x1, %edi
    000000c0: 	xorl	%eax, %eax
    000000c2: 	callq	__printf_chk@PLT # Offset: 194
.Ltmp777:
    000000c7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000d5: 	subq	$0x20, %rax
    000000d9: 	cmpq	%rax, %rbx
    000000dc: 	je	.Ltmp778 # Offset: 220
    000000e2: 	leaq	0x10(%rbx), %rdi
    000000e6: 	movq	0x8(%rbp), %r12
    000000ea: 	movq	%rdi, (%rbx)
    000000ed: 	movq	(%rbp), %r13
    000000f1: 	movq	%r13, %rax
    000000f4: 	addq	%r12, %rax
    000000f7: 	je	.Ltmp779 # Offset: 247
    000000f9: 	testq	%r13, %r13
    000000fc: 	je	.Ltmp780 # Offset: 252
.Ltmp779:
    00000102: 	movq	%r12, (%rsp)
    00000106: 	cmpq	$0xf, %r12
    0000010a: 	ja	.Ltmp781 # Offset: 266
    00000110: 	cmpq	$0x1, %r12
    00000114: 	jne	.Ltmp782 # Offset: 276
    0000011a: 	movzbl	(%r13), %eax
    0000011f: 	movb	%al, 0x10(%rbx)
.Ltmp786:
    00000122: 	movq	%r12, 0x8(%rbx)
    00000126: 	movb	$0x0, (%rdi,%r12)
    0000012b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000132: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000139: 	addq	$0x20, %rax
    0000013d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000144: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000014b: 	je	.Ltmp783 # Offset: 331
.Ltmp787:
    00000151: 	movq	-0x20(%rax), %rbp
    00000155: 	callq	clock@PLT # Offset: 341
    0000015a: 	movq	%rax, end_time(%rip)
    00000161: 	movq	0x8(%rsp), %rdx
    00000166: 	subq	%fs:0x28, %rdx
    0000016f: 	jne	.Ltmp784 # Offset: 367
    00000175: 	subq	start_time(%rip), %rax
    0000017c: 	pxor	%xmm0, %xmm0
    00000180: 	movq	%rbp, %rdi
    00000183: 	cvtsi2sd	%rax, %xmm0
    00000188: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000190: 	addq	$0x18, %rsp
    00000194: 	popq	%rbx
    00000195: 	popq	%rbp
    00000196: 	popq	%r12
    00000198: 	popq	%r13
    0000019a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 410
    0000019f: 	nop # Size: 1
.Ltmp775:
    000001a0: 	movq	%rbx, %r8
    000001a3: 	movq	%rbx, %r9
    000001a6: 	movq	%rbx, %rdi
    000001a9: 	jmp	.Ltmp785 # Offset: 425
    000001ae: 	nop # Size: 2
.Ltmp781:
    000001b0: 	movq	%rbx, %rdi
    000001b3: 	movq	%rsp, %rsi
    000001b6: 	xorl	%edx, %edx
    000001b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 440
    000001bd: 	movq	%rax, (%rbx)
    000001c0: 	movq	%rax, %rdi
    000001c3: 	movq	(%rsp), %rax
    000001c7: 	movq	%rax, 0x10(%rbx)
.Ltmp788:
    000001cb: 	movq	%r12, %rdx
    000001ce: 	movq	%r13, %rsi
    000001d1: 	callq	memcpy@PLT # Offset: 465
    000001d6: 	movq	(%rsp), %r12
    000001da: 	movq	(%rbx), %rdi
    000001dd: 	jmp	.Ltmp786 # Offset: 477
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp778:
    000001e8: 	movq	%rbp, %rsi
    000001eb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001f2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 498
    000001f7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fe: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000205: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020c: 	jne	.Ltmp787 # Offset: 524
.Ltmp783:
    00000212: 	movq	-0x8(%rdx), %rax
    00000216: 	addq	$0x200, %rax
    0000021c: 	jmp	.Ltmp787 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp782:
    00000228: 	testq	%r12, %r12
    0000022b: 	je	.Ltmp786 # Offset: 555
    00000231: 	jmp	.Ltmp788 # Offset: 561
.Ltmp784:
    00000233: 	callq	__stack_chk_fail@PLT # Offset: 563
.Ltmp780:
    00000238: 	leaq	DATAat0x15008(%rip), %rdi
    0000023f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 575
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0xfd80
  Size        : 0x24c
  MaxSize     : 0x250
  Offset      : 0xfd80
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x28, %rsp
    00000011: 	movd	init_value(%rip), %xmm3
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	pshuflw	$0x0, %xmm3, %xmm0
    0000002e: 	movq	%xmm0, 0x8(%rsp)
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	0x8(%rsp), %xmm0
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp789 # Offset: 78
    00000050: 	movq	DATAat0x15d80(%rip), %xmm2
    00000058: 	leal	-0x1(%rax), %ebx
    0000005b: 	movd	%ebx, %xmm1
    0000005f: 	pshuflw	$0x0, %xmm1, %xmm1
    00000064: 	paddw	%xmm2, %xmm0
    00000068: 	pmullw	%xmm2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
.Ltmp789:
    00000070: 	leal	(%rax,%rax,2), %ecx
    00000073: 	pextrw	$0x3, %xmm0, %edi
    00000078: 	pextrw	$0x2, %xmm0, %r8d
    0000007e: 	shll	$0x2, %ecx
    00000081: 	leal	(%rcx,%rax), %edx
    00000084: 	shll	$0x2, %edx
    00000087: 	addw	init_value(%rip), %dx
    0000008e: 	movl	%edx, %esi
    00000090: 	subl	%ecx, %esi
    00000092: 	pextrw	$0x0, %xmm0, %ecx
    00000097: 	cmpw	%cx, %dx
    0000009a: 	jne	.Ltmp790 # Offset: 154
    0000009c: 	pextrw	$0x1, %xmm0, %edx
    000000a1: 	cmpw	%dx, %si
    000000a4: 	jne	.Ltmp790 # Offset: 164
    000000a6: 	leal	(,%rax,4), %edx
    000000ad: 	shll	$0x4, %eax
    000000b0: 	subl	%edx, %esi
    000000b2: 	movl	%esi, %edx
    000000b4: 	subl	%eax, %edx
    000000b6: 	cmpw	%di, %dx
    000000b9: 	jne	.Ltmp790 # Offset: 185
    000000bb: 	cmpw	%r8w, %si
    000000bf: 	je	.Ltmp791 # Offset: 191
.Ltmp790:
    000000c1: 	movq	(%rbp), %rdx
    000000c5: 	leaq	DATAat0x158f3(%rip), %rsi
    000000cc: 	movl	$0x1, %edi
    000000d1: 	xorl	%eax, %eax
    000000d3: 	callq	__printf_chk@PLT # Offset: 211
.Ltmp791:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp792 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp793 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp794 # Offset: 269
.Ltmp793:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp795 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp796 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp799:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp797 # Offset: 349
.Ltmp800:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp798 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 428
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp795:
    000001b8: 	movq	%rbx, %rdi
    000001bb: 	leaq	0x10(%rsp), %rsi
    000001c0: 	xorl	%edx, %edx
    000001c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 450
    000001c7: 	movq	%rax, (%rbx)
    000001ca: 	movq	%rax, %rdi
    000001cd: 	movq	0x10(%rsp), %rax
    000001d2: 	movq	%rax, 0x10(%rbx)
.Ltmp801:
    000001d6: 	movq	%r12, %rdx
    000001d9: 	movq	%r13, %rsi
    000001dc: 	callq	memcpy@PLT # Offset: 476
    000001e1: 	movq	0x10(%rsp), %r12
    000001e6: 	movq	(%rbx), %rdi
    000001e9: 	jmp	.Ltmp799 # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp792:
    000001f0: 	movq	%rbp, %rsi
    000001f3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001fa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 506
    000001ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000206: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000214: 	jne	.Ltmp800 # Offset: 532
.Ltmp797:
    0000021a: 	movq	-0x8(%rdx), %rax
    0000021e: 	addq	$0x200, %rax
    00000224: 	jmp	.Ltmp800 # Offset: 548
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp796:
    00000230: 	testq	%r12, %r12
    00000233: 	je	.Ltmp799 # Offset: 563
    00000239: 	jmp	.Ltmp801 # Offset: 569
.Ltmp798:
    0000023b: 	callq	__stack_chk_fail@PLT # Offset: 571
.Ltmp794:
    00000240: 	leaq	DATAat0x15008(%rip), %rdi
    00000247: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 583
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0xffd0
  Size        : 0x244
  MaxSize     : 0x250
  Offset      : 0xffd0
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movslq	init_value(%rip), %rbx
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x8(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movslq	iterations(%rip), %rax
    0000003b: 	testl	%eax, %eax
    0000003d: 	jle	.Ltmp802 # Offset: 61
    00000043: 	leal	-0x1(%rax), %edx
    00000046: 	leaq	(%rdx,%rdx,2), %rcx
    0000004a: 	leaq	(%rdx,%rcx,4), %rsi
    0000004e: 	leaq	(%rdx,%rdx,4), %rcx
    00000052: 	leaq	(%rdx,%rdx,8), %rdx
    00000056: 	leaq	0x14(%rbx,%rcx,4), %r8
    0000005b: 	leaq	0x24(%rbx,%rdx,4), %r9
    00000060: 	leaq	0x28(%rbx,%rcx,8), %rdi
    00000065: 	leaq	0x34(%rbx,%rsi,4), %rbx
.Ltmp812:
    0000006a: 	leaq	(%rax,%rax,2), %rdx
    0000006e: 	movslq	init_value(%rip), %rcx
    00000075: 	shlq	$0x2, %rdx
    00000079: 	leaq	(%rdx,%rax), %rsi
    0000007d: 	leaq	(%rcx,%rsi,4), %rsi
    00000081: 	movq	%rsi, %rcx
    00000084: 	subq	%rdx, %rcx
    00000087: 	cmpq	%rbx, %rsi
    0000008a: 	jne	.Ltmp803 # Offset: 138
    0000008c: 	cmpq	%rdi, %rcx
    0000008f: 	jne	.Ltmp803 # Offset: 143
    00000091: 	leaq	(,%rax,4), %rdx
    00000099: 	shlq	$0x4, %rax
    0000009d: 	subq	%rdx, %rcx
    000000a0: 	movq	%rcx, %rdx
    000000a3: 	subq	%rax, %rdx
    000000a6: 	cmpq	%r8, %rdx
    000000a9: 	jne	.Ltmp803 # Offset: 169
    000000ab: 	cmpq	%r9, %rcx
    000000ae: 	je	.Ltmp804 # Offset: 174
.Ltmp803:
    000000b0: 	movq	(%rbp), %rdx
    000000b4: 	leaq	DATAat0x158f3(%rip), %rsi
    000000bb: 	movl	$0x1, %edi
    000000c0: 	xorl	%eax, %eax
    000000c2: 	callq	__printf_chk@PLT # Offset: 194
.Ltmp804:
    000000c7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000d5: 	subq	$0x20, %rax
    000000d9: 	cmpq	%rax, %rbx
    000000dc: 	je	.Ltmp805 # Offset: 220
    000000e2: 	leaq	0x10(%rbx), %rdi
    000000e6: 	movq	0x8(%rbp), %r12
    000000ea: 	movq	%rdi, (%rbx)
    000000ed: 	movq	(%rbp), %r13
    000000f1: 	movq	%r13, %rax
    000000f4: 	addq	%r12, %rax
    000000f7: 	je	.Ltmp806 # Offset: 247
    000000f9: 	testq	%r13, %r13
    000000fc: 	je	.Ltmp807 # Offset: 252
.Ltmp806:
    00000102: 	movq	%r12, (%rsp)
    00000106: 	cmpq	$0xf, %r12
    0000010a: 	ja	.Ltmp808 # Offset: 266
    00000110: 	cmpq	$0x1, %r12
    00000114: 	jne	.Ltmp809 # Offset: 276
    0000011a: 	movzbl	(%r13), %eax
    0000011f: 	movb	%al, 0x10(%rbx)
.Ltmp813:
    00000122: 	movq	%r12, 0x8(%rbx)
    00000126: 	movb	$0x0, (%rdi,%r12)
    0000012b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000132: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000139: 	addq	$0x20, %rax
    0000013d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000144: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000014b: 	je	.Ltmp810 # Offset: 331
.Ltmp814:
    00000151: 	movq	-0x20(%rax), %rbp
    00000155: 	callq	clock@PLT # Offset: 341
    0000015a: 	movq	%rax, end_time(%rip)
    00000161: 	movq	0x8(%rsp), %rdx
    00000166: 	subq	%fs:0x28, %rdx
    0000016f: 	jne	.Ltmp811 # Offset: 367
    00000175: 	subq	start_time(%rip), %rax
    0000017c: 	pxor	%xmm0, %xmm0
    00000180: 	movq	%rbp, %rdi
    00000183: 	cvtsi2sd	%rax, %xmm0
    00000188: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000190: 	addq	$0x18, %rsp
    00000194: 	popq	%rbx
    00000195: 	popq	%rbp
    00000196: 	popq	%r12
    00000198: 	popq	%r13
    0000019a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 410
    0000019f: 	nop # Size: 1
.Ltmp802:
    000001a0: 	movq	%rbx, %r8
    000001a3: 	movq	%rbx, %r9
    000001a6: 	movq	%rbx, %rdi
    000001a9: 	jmp	.Ltmp812 # Offset: 425
    000001ae: 	nop # Size: 2
.Ltmp808:
    000001b0: 	movq	%rbx, %rdi
    000001b3: 	movq	%rsp, %rsi
    000001b6: 	xorl	%edx, %edx
    000001b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 440
    000001bd: 	movq	%rax, (%rbx)
    000001c0: 	movq	%rax, %rdi
    000001c3: 	movq	(%rsp), %rax
    000001c7: 	movq	%rax, 0x10(%rbx)
.Ltmp815:
    000001cb: 	movq	%r12, %rdx
    000001ce: 	movq	%r13, %rsi
    000001d1: 	callq	memcpy@PLT # Offset: 465
    000001d6: 	movq	(%rsp), %r12
    000001da: 	movq	(%rbx), %rdi
    000001dd: 	jmp	.Ltmp813 # Offset: 477
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp805:
    000001e8: 	movq	%rbp, %rsi
    000001eb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001f2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 498
    000001f7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fe: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000205: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020c: 	jne	.Ltmp814 # Offset: 524
.Ltmp810:
    00000212: 	movq	-0x8(%rdx), %rax
    00000216: 	addq	$0x200, %rax
    0000021c: 	jmp	.Ltmp814 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp809:
    00000228: 	testq	%r12, %r12
    0000022b: 	je	.Ltmp813 # Offset: 555
    00000231: 	jmp	.Ltmp815 # Offset: 561
.Ltmp811:
    00000233: 	callq	__stack_chk_fail@PLT # Offset: 563
.Ltmp807:
    00000238: 	leaq	DATAat0x15008(%rip), %rdi
    0000023f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 575
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x10220
  Size        : 0x24c
  MaxSize     : 0x250
  Offset      : 0x10220
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x28, %rsp
    00000011: 	movd	init_value(%rip), %xmm3
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	pshuflw	$0x0, %xmm3, %xmm0
    0000002e: 	movq	%xmm0, 0x8(%rsp)
    00000034: 	callq	clock@PLT # Offset: 52
    00000039: 	movq	0x8(%rsp), %xmm0
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp816 # Offset: 78
    00000050: 	movq	DATAat0x15d80(%rip), %xmm2
    00000058: 	leal	-0x1(%rax), %ebx
    0000005b: 	movd	%ebx, %xmm1
    0000005f: 	pshuflw	$0x0, %xmm1, %xmm1
    00000064: 	paddw	%xmm2, %xmm0
    00000068: 	pmullw	%xmm2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
.Ltmp816:
    00000070: 	leal	(%rax,%rax,2), %ecx
    00000073: 	pextrw	$0x3, %xmm0, %edi
    00000078: 	pextrw	$0x2, %xmm0, %r8d
    0000007e: 	shll	$0x2, %ecx
    00000081: 	leal	(%rcx,%rax), %edx
    00000084: 	shll	$0x2, %edx
    00000087: 	addw	init_value(%rip), %dx
    0000008e: 	movl	%edx, %esi
    00000090: 	subl	%ecx, %esi
    00000092: 	pextrw	$0x0, %xmm0, %ecx
    00000097: 	cmpw	%cx, %dx
    0000009a: 	jne	.Ltmp817 # Offset: 154
    0000009c: 	pextrw	$0x1, %xmm0, %edx
    000000a1: 	cmpw	%dx, %si
    000000a4: 	jne	.Ltmp817 # Offset: 164
    000000a6: 	leal	(,%rax,4), %edx
    000000ad: 	shll	$0x4, %eax
    000000b0: 	subl	%edx, %esi
    000000b2: 	movl	%esi, %edx
    000000b4: 	subl	%eax, %edx
    000000b6: 	cmpw	%di, %dx
    000000b9: 	jne	.Ltmp817 # Offset: 185
    000000bb: 	cmpw	%r8w, %si
    000000bf: 	je	.Ltmp818 # Offset: 191
.Ltmp817:
    000000c1: 	movq	(%rbp), %rdx
    000000c5: 	leaq	DATAat0x158f3(%rip), %rsi
    000000cc: 	movl	$0x1, %edi
    000000d1: 	xorl	%eax, %eax
    000000d3: 	callq	__printf_chk@PLT # Offset: 211
.Ltmp818:
    000000d8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e6: 	subq	$0x20, %rax
    000000ea: 	cmpq	%rax, %rbx
    000000ed: 	je	.Ltmp819 # Offset: 237
    000000f3: 	leaq	0x10(%rbx), %rdi
    000000f7: 	movq	0x8(%rbp), %r12
    000000fb: 	movq	%rdi, (%rbx)
    000000fe: 	movq	(%rbp), %r13
    00000102: 	movq	%r13, %rax
    00000105: 	addq	%r12, %rax
    00000108: 	je	.Ltmp820 # Offset: 264
    0000010a: 	testq	%r13, %r13
    0000010d: 	je	.Ltmp821 # Offset: 269
.Ltmp820:
    00000113: 	movq	%r12, 0x10(%rsp)
    00000118: 	cmpq	$0xf, %r12
    0000011c: 	ja	.Ltmp822 # Offset: 284
    00000122: 	cmpq	$0x1, %r12
    00000126: 	jne	.Ltmp823 # Offset: 294
    0000012c: 	movzbl	(%r13), %eax
    00000131: 	movb	%al, 0x10(%rbx)
.Ltmp826:
    00000134: 	movq	%r12, 0x8(%rbx)
    00000138: 	movb	$0x0, (%rdi,%r12)
    0000013d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000144: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014b: 	addq	$0x20, %rax
    0000014f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000156: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015d: 	je	.Ltmp824 # Offset: 349
.Ltmp827:
    00000163: 	movq	-0x20(%rax), %rbp
    00000167: 	callq	clock@PLT # Offset: 359
    0000016c: 	movq	%rax, end_time(%rip)
    00000173: 	movq	0x18(%rsp), %rdx
    00000178: 	subq	%fs:0x28, %rdx
    00000181: 	jne	.Ltmp825 # Offset: 385
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rbp, %rdi
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 428
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp822:
    000001b8: 	movq	%rbx, %rdi
    000001bb: 	leaq	0x10(%rsp), %rsi
    000001c0: 	xorl	%edx, %edx
    000001c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 450
    000001c7: 	movq	%rax, (%rbx)
    000001ca: 	movq	%rax, %rdi
    000001cd: 	movq	0x10(%rsp), %rax
    000001d2: 	movq	%rax, 0x10(%rbx)
.Ltmp828:
    000001d6: 	movq	%r12, %rdx
    000001d9: 	movq	%r13, %rsi
    000001dc: 	callq	memcpy@PLT # Offset: 476
    000001e1: 	movq	0x10(%rsp), %r12
    000001e6: 	movq	(%rbx), %rdi
    000001e9: 	jmp	.Ltmp826 # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp819:
    000001f0: 	movq	%rbp, %rsi
    000001f3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001fa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 506
    000001ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000206: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000214: 	jne	.Ltmp827 # Offset: 532
.Ltmp824:
    0000021a: 	movq	-0x8(%rdx), %rax
    0000021e: 	addq	$0x200, %rax
    00000224: 	jmp	.Ltmp827 # Offset: 548
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp823:
    00000230: 	testq	%r12, %r12
    00000233: 	je	.Ltmp826 # Offset: 563
    00000239: 	jmp	.Ltmp828 # Offset: 569
.Ltmp825:
    0000023b: 	callq	__stack_chk_fail@PLT # Offset: 571
.Ltmp821:
    00000240: 	leaq	DATAat0x15008(%rip), %rdi
    00000247: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 583
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x10470
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x10470
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x28, %rsp
    00000011: 	movd	init_value(%rip), %xmm4
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	pshufd	$0x0, %xmm4, %xmm0
    0000002e: 	movaps	%xmm0, (%rsp)
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movl	iterations(%rip), %edx
    0000003d: 	movdqa	(%rsp), %xmm0
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp829 # Offset: 75
    0000004d: 	movd	%edx, %xmm5
    00000051: 	movdqa	DATAat0x15d40(%rip), %xmm3
    00000059: 	pshufd	$0x0, %xmm5, %xmm1
    0000005e: 	movdqa	%xmm1, %xmm2
    00000062: 	psrlq	$0x20, %xmm1
    00000067: 	pmuludq	%xmm3, %xmm2
    0000006b: 	psrlq	$0x20, %xmm3
    00000070: 	pmuludq	%xmm3, %xmm1
    00000074: 	pshufd	$0x8, %xmm2, %xmm2
    00000079: 	pshufd	$0x8, %xmm1, %xmm1
    0000007e: 	punpckldq	%xmm1, %xmm2
    00000082: 	paddd	%xmm2, %xmm0
.Ltmp829:
    00000086: 	pshufd	$0xff, %xmm0, %xmm1
    0000008b: 	imull	$0x34, %edx, %eax
    0000008e: 	leal	(%rdx,%rdx,2), %esi
    00000091: 	addl	init_value(%rip), %eax
    00000097: 	shll	$0x2, %esi
    0000009a: 	movd	%xmm1, %edi
    0000009e: 	movdqa	%xmm0, %xmm1
    000000a2: 	movl	%eax, %ecx
    000000a4: 	punpckhdq	%xmm0, %xmm1
    000000a8: 	subl	%esi, %ecx
    000000aa: 	movd	%xmm0, %esi
    000000ae: 	movd	%xmm1, %r8d
    000000b3: 	cmpl	%eax, %esi
    000000b5: 	jne	.Ltmp830 # Offset: 181
    000000b7: 	pshufd	$0x55, %xmm0, %xmm0
    000000bc: 	movd	%xmm0, %eax
    000000c0: 	cmpl	%ecx, %eax
    000000c2: 	jne	.Ltmp830 # Offset: 194
    000000c4: 	leal	(,%rdx,4), %eax
    000000cb: 	shll	$0x4, %edx
    000000ce: 	subl	%eax, %ecx
    000000d0: 	movl	%ecx, %eax
    000000d2: 	subl	%edx, %eax
    000000d4: 	cmpl	%edi, %eax
    000000d6: 	jne	.Ltmp830 # Offset: 214
    000000d8: 	cmpl	%r8d, %ecx
    000000db: 	je	.Ltmp831 # Offset: 219
.Ltmp830:
    000000dd: 	movq	(%rbp), %rdx
    000000e1: 	leaq	DATAat0x158f3(%rip), %rsi
    000000e8: 	movl	$0x1, %edi
    000000ed: 	xorl	%eax, %eax
    000000ef: 	callq	__printf_chk@PLT # Offset: 239
.Ltmp831:
    000000f4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000fb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000102: 	subq	$0x20, %rax
    00000106: 	cmpq	%rax, %rbx
    00000109: 	je	.Ltmp832 # Offset: 265
    0000010f: 	leaq	0x10(%rbx), %rdi
    00000113: 	movq	0x8(%rbp), %r12
    00000117: 	movq	%rdi, (%rbx)
    0000011a: 	movq	(%rbp), %r13
    0000011e: 	movq	%r13, %rax
    00000121: 	addq	%r12, %rax
    00000124: 	je	.Ltmp833 # Offset: 292
    00000126: 	testq	%r13, %r13
    00000129: 	je	.Ltmp834 # Offset: 297
.Ltmp833:
    0000012f: 	movq	%r12, 0x10(%rsp)
    00000134: 	cmpq	$0xf, %r12
    00000138: 	ja	.Ltmp835 # Offset: 312
    0000013e: 	cmpq	$0x1, %r12
    00000142: 	jne	.Ltmp836 # Offset: 322
    00000148: 	movzbl	(%r13), %eax
    0000014d: 	movb	%al, 0x10(%rbx)
.Ltmp839:
    00000150: 	movq	%r12, 0x8(%rbx)
    00000154: 	movb	$0x0, (%rdi,%r12)
    00000159: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000160: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000167: 	addq	$0x20, %rax
    0000016b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000172: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000179: 	je	.Ltmp837 # Offset: 377
.Ltmp840:
    0000017f: 	movq	-0x20(%rax), %rbp
    00000183: 	callq	clock@PLT # Offset: 387
    00000188: 	movq	%rax, end_time(%rip)
    0000018f: 	movq	0x18(%rsp), %rdx
    00000194: 	subq	%fs:0x28, %rdx
    0000019d: 	jne	.Ltmp838 # Offset: 413
    000001a3: 	subq	start_time(%rip), %rax
    000001aa: 	pxor	%xmm0, %xmm0
    000001ae: 	movq	%rbp, %rdi
    000001b1: 	cvtsi2sd	%rax, %xmm0
    000001b6: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001be: 	addq	$0x28, %rsp
    000001c2: 	popq	%rbx
    000001c3: 	popq	%rbp
    000001c4: 	popq	%r12
    000001c6: 	popq	%r13
    000001c8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 456
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp835:
    000001d0: 	movq	%rbx, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%rbx)
    000001e2: 	movq	%rax, %rdi
    000001e5: 	movq	0x10(%rsp), %rax
    000001ea: 	movq	%rax, 0x10(%rbx)
.Ltmp841:
    000001ee: 	movq	%r12, %rdx
    000001f1: 	movq	%r13, %rsi
    000001f4: 	callq	memcpy@PLT # Offset: 500
    000001f9: 	movq	0x10(%rsp), %r12
    000001fe: 	movq	(%rbx), %rdi
    00000201: 	jmp	.Ltmp839 # Offset: 513
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp832:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp840 # Offset: 564
.Ltmp837:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp840 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp836:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp839 # Offset: 595
    00000259: 	jmp	.Ltmp841 # Offset: 601
.Ltmp838:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp834:
    00000260: 	leaq	DATAat0x15008(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x106e0
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x106e0
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x28, %rsp
    00000011: 	movd	init_value(%rip), %xmm4
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	pshufd	$0x0, %xmm4, %xmm0
    0000002e: 	movaps	%xmm0, (%rsp)
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movl	iterations(%rip), %edx
    0000003d: 	movdqa	(%rsp), %xmm0
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp842 # Offset: 75
    0000004d: 	movd	%edx, %xmm5
    00000051: 	movdqa	DATAat0x15d40(%rip), %xmm3
    00000059: 	pshufd	$0x0, %xmm5, %xmm1
    0000005e: 	movdqa	%xmm1, %xmm2
    00000062: 	psrlq	$0x20, %xmm1
    00000067: 	pmuludq	%xmm3, %xmm2
    0000006b: 	psrlq	$0x20, %xmm3
    00000070: 	pmuludq	%xmm3, %xmm1
    00000074: 	pshufd	$0x8, %xmm2, %xmm2
    00000079: 	pshufd	$0x8, %xmm1, %xmm1
    0000007e: 	punpckldq	%xmm1, %xmm2
    00000082: 	paddd	%xmm2, %xmm0
.Ltmp842:
    00000086: 	pshufd	$0xff, %xmm0, %xmm1
    0000008b: 	imull	$0x34, %edx, %eax
    0000008e: 	leal	(%rdx,%rdx,2), %esi
    00000091: 	addl	init_value(%rip), %eax
    00000097: 	shll	$0x2, %esi
    0000009a: 	movd	%xmm1, %edi
    0000009e: 	movdqa	%xmm0, %xmm1
    000000a2: 	movl	%eax, %ecx
    000000a4: 	punpckhdq	%xmm0, %xmm1
    000000a8: 	subl	%esi, %ecx
    000000aa: 	movd	%xmm0, %esi
    000000ae: 	movd	%xmm1, %r8d
    000000b3: 	cmpl	%eax, %esi
    000000b5: 	jne	.Ltmp843 # Offset: 181
    000000b7: 	pshufd	$0x55, %xmm0, %xmm0
    000000bc: 	movd	%xmm0, %eax
    000000c0: 	cmpl	%ecx, %eax
    000000c2: 	jne	.Ltmp843 # Offset: 194
    000000c4: 	leal	(,%rdx,4), %eax
    000000cb: 	shll	$0x4, %edx
    000000ce: 	subl	%eax, %ecx
    000000d0: 	movl	%ecx, %eax
    000000d2: 	subl	%edx, %eax
    000000d4: 	cmpl	%edi, %eax
    000000d6: 	jne	.Ltmp843 # Offset: 214
    000000d8: 	cmpl	%r8d, %ecx
    000000db: 	je	.Ltmp844 # Offset: 219
.Ltmp843:
    000000dd: 	movq	(%rbp), %rdx
    000000e1: 	leaq	DATAat0x158f3(%rip), %rsi
    000000e8: 	movl	$0x1, %edi
    000000ed: 	xorl	%eax, %eax
    000000ef: 	callq	__printf_chk@PLT # Offset: 239
.Ltmp844:
    000000f4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000fb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000102: 	subq	$0x20, %rax
    00000106: 	cmpq	%rax, %rbx
    00000109: 	je	.Ltmp845 # Offset: 265
    0000010f: 	leaq	0x10(%rbx), %rdi
    00000113: 	movq	0x8(%rbp), %r12
    00000117: 	movq	%rdi, (%rbx)
    0000011a: 	movq	(%rbp), %r13
    0000011e: 	movq	%r13, %rax
    00000121: 	addq	%r12, %rax
    00000124: 	je	.Ltmp846 # Offset: 292
    00000126: 	testq	%r13, %r13
    00000129: 	je	.Ltmp847 # Offset: 297
.Ltmp846:
    0000012f: 	movq	%r12, 0x10(%rsp)
    00000134: 	cmpq	$0xf, %r12
    00000138: 	ja	.Ltmp848 # Offset: 312
    0000013e: 	cmpq	$0x1, %r12
    00000142: 	jne	.Ltmp849 # Offset: 322
    00000148: 	movzbl	(%r13), %eax
    0000014d: 	movb	%al, 0x10(%rbx)
.Ltmp852:
    00000150: 	movq	%r12, 0x8(%rbx)
    00000154: 	movb	$0x0, (%rdi,%r12)
    00000159: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000160: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000167: 	addq	$0x20, %rax
    0000016b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000172: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000179: 	je	.Ltmp850 # Offset: 377
.Ltmp853:
    0000017f: 	movq	-0x20(%rax), %rbp
    00000183: 	callq	clock@PLT # Offset: 387
    00000188: 	movq	%rax, end_time(%rip)
    0000018f: 	movq	0x18(%rsp), %rdx
    00000194: 	subq	%fs:0x28, %rdx
    0000019d: 	jne	.Ltmp851 # Offset: 413
    000001a3: 	subq	start_time(%rip), %rax
    000001aa: 	pxor	%xmm0, %xmm0
    000001ae: 	movq	%rbp, %rdi
    000001b1: 	cvtsi2sd	%rax, %xmm0
    000001b6: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001be: 	addq	$0x28, %rsp
    000001c2: 	popq	%rbx
    000001c3: 	popq	%rbp
    000001c4: 	popq	%r12
    000001c6: 	popq	%r13
    000001c8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 456
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp848:
    000001d0: 	movq	%rbx, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%rbx)
    000001e2: 	movq	%rax, %rdi
    000001e5: 	movq	0x10(%rsp), %rax
    000001ea: 	movq	%rax, 0x10(%rbx)
.Ltmp854:
    000001ee: 	movq	%r12, %rdx
    000001f1: 	movq	%r13, %rsi
    000001f4: 	callq	memcpy@PLT # Offset: 500
    000001f9: 	movq	0x10(%rsp), %r12
    000001fe: 	movq	(%rbx), %rdi
    00000201: 	jmp	.Ltmp852 # Offset: 513
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp845:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp853 # Offset: 564
.Ltmp850:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp853 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp849:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp852 # Offset: 595
    00000259: 	jmp	.Ltmp854 # Offset: 601
.Ltmp851:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp847:
    00000260: 	leaq	DATAat0x15008(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x10950
  Size        : 0x1c4
  MaxSize     : 0x1d0
  Offset      : 0x10950
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	cmpl	init_value(%rip), %ebx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	je	.Ltmp855 # Offset: 57
    0000003b: 	movq	(%rbp), %rdx
    0000003f: 	leaq	DATAat0x158f3(%rip), %rsi
    00000046: 	movl	$0x1, %edi
    0000004b: 	xorl	%eax, %eax
    0000004d: 	callq	__printf_chk@PLT # Offset: 77
.Ltmp855:
    00000052: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000059: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000060: 	subq	$0x20, %rax
    00000064: 	cmpq	%rax, %rbx
    00000067: 	je	.Ltmp856 # Offset: 103
    0000006d: 	leaq	0x10(%rbx), %rdi
    00000071: 	movq	0x8(%rbp), %r12
    00000075: 	movq	%rdi, (%rbx)
    00000078: 	movq	(%rbp), %r13
    0000007c: 	movq	%r13, %rax
    0000007f: 	addq	%r12, %rax
    00000082: 	je	.Ltmp857 # Offset: 130
    00000084: 	testq	%r13, %r13
    00000087: 	je	.Ltmp858 # Offset: 135
.Ltmp857:
    0000008d: 	movq	%r12, (%rsp)
    00000091: 	cmpq	$0xf, %r12
    00000095: 	ja	.Ltmp859 # Offset: 149
    0000009b: 	cmpq	$0x1, %r12
    0000009f: 	jne	.Ltmp860 # Offset: 159
    000000a5: 	movzbl	(%r13), %eax
    000000aa: 	movb	%al, 0x10(%rbx)
.Ltmp863:
    000000ad: 	movq	%r12, 0x8(%rbx)
    000000b1: 	movb	$0x0, (%rdi,%r12)
    000000b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000c4: 	addq	$0x20, %rax
    000000c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000cf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000d6: 	je	.Ltmp861 # Offset: 214
.Ltmp864:
    000000dc: 	movq	-0x20(%rax), %rbp
    000000e0: 	callq	clock@PLT # Offset: 224
    000000e5: 	movq	%rax, end_time(%rip)
    000000ec: 	movq	0x8(%rsp), %rdx
    000000f1: 	subq	%fs:0x28, %rdx
    000000fa: 	jne	.Ltmp862 # Offset: 250
    00000100: 	subq	start_time(%rip), %rax
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	movq	%rbp, %rdi
    0000010e: 	cvtsi2sd	%rax, %xmm0
    00000113: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000011b: 	addq	$0x18, %rsp
    0000011f: 	popq	%rbx
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp859:
    00000130: 	movq	%rbx, %rdi
    00000133: 	movq	%rsp, %rsi
    00000136: 	xorl	%edx, %edx
    00000138: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 312
    0000013d: 	movq	%rax, (%rbx)
    00000140: 	movq	%rax, %rdi
    00000143: 	movq	(%rsp), %rax
    00000147: 	movq	%rax, 0x10(%rbx)
.Ltmp865:
    0000014b: 	movq	%r12, %rdx
    0000014e: 	movq	%r13, %rsi
    00000151: 	callq	memcpy@PLT # Offset: 337
    00000156: 	movq	(%rsp), %r12
    0000015a: 	movq	(%rbx), %rdi
    0000015d: 	jmp	.Ltmp863 # Offset: 349
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp856:
    00000168: 	movq	%rbp, %rsi
    0000016b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000172: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 370
    00000177: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000017e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000185: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000018c: 	jne	.Ltmp864 # Offset: 396
.Ltmp861:
    00000192: 	movq	-0x8(%rdx), %rax
    00000196: 	addq	$0x200, %rax
    0000019c: 	jmp	.Ltmp864 # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp860:
    000001a8: 	testq	%r12, %r12
    000001ab: 	je	.Ltmp863 # Offset: 427
    000001b1: 	jmp	.Ltmp865 # Offset: 433
.Ltmp862:
    000001b3: 	callq	__stack_chk_fail@PLT # Offset: 435
.Ltmp858:
    000001b8: 	leaq	DATAat0x15008(%rip), %rdi
    000001bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 447
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x10b20
  Size        : 0x1c4
  MaxSize     : 0x1d0
  Offset      : 0x10b20
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	cmpl	init_value(%rip), %ebx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	je	.Ltmp866 # Offset: 57
    0000003b: 	movq	(%rbp), %rdx
    0000003f: 	leaq	DATAat0x158f3(%rip), %rsi
    00000046: 	movl	$0x1, %edi
    0000004b: 	xorl	%eax, %eax
    0000004d: 	callq	__printf_chk@PLT # Offset: 77
.Ltmp866:
    00000052: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000059: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000060: 	subq	$0x20, %rax
    00000064: 	cmpq	%rax, %rbx
    00000067: 	je	.Ltmp867 # Offset: 103
    0000006d: 	leaq	0x10(%rbx), %rdi
    00000071: 	movq	0x8(%rbp), %r12
    00000075: 	movq	%rdi, (%rbx)
    00000078: 	movq	(%rbp), %r13
    0000007c: 	movq	%r13, %rax
    0000007f: 	addq	%r12, %rax
    00000082: 	je	.Ltmp868 # Offset: 130
    00000084: 	testq	%r13, %r13
    00000087: 	je	.Ltmp869 # Offset: 135
.Ltmp868:
    0000008d: 	movq	%r12, (%rsp)
    00000091: 	cmpq	$0xf, %r12
    00000095: 	ja	.Ltmp870 # Offset: 149
    0000009b: 	cmpq	$0x1, %r12
    0000009f: 	jne	.Ltmp871 # Offset: 159
    000000a5: 	movzbl	(%r13), %eax
    000000aa: 	movb	%al, 0x10(%rbx)
.Ltmp874:
    000000ad: 	movq	%r12, 0x8(%rbx)
    000000b1: 	movb	$0x0, (%rdi,%r12)
    000000b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000c4: 	addq	$0x20, %rax
    000000c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000cf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000d6: 	je	.Ltmp872 # Offset: 214
.Ltmp875:
    000000dc: 	movq	-0x20(%rax), %rbp
    000000e0: 	callq	clock@PLT # Offset: 224
    000000e5: 	movq	%rax, end_time(%rip)
    000000ec: 	movq	0x8(%rsp), %rdx
    000000f1: 	subq	%fs:0x28, %rdx
    000000fa: 	jne	.Ltmp873 # Offset: 250
    00000100: 	subq	start_time(%rip), %rax
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	movq	%rbp, %rdi
    0000010e: 	cvtsi2sd	%rax, %xmm0
    00000113: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000011b: 	addq	$0x18, %rsp
    0000011f: 	popq	%rbx
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp870:
    00000130: 	movq	%rbx, %rdi
    00000133: 	movq	%rsp, %rsi
    00000136: 	xorl	%edx, %edx
    00000138: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 312
    0000013d: 	movq	%rax, (%rbx)
    00000140: 	movq	%rax, %rdi
    00000143: 	movq	(%rsp), %rax
    00000147: 	movq	%rax, 0x10(%rbx)
.Ltmp876:
    0000014b: 	movq	%r12, %rdx
    0000014e: 	movq	%r13, %rsi
    00000151: 	callq	memcpy@PLT # Offset: 337
    00000156: 	movq	(%rsp), %r12
    0000015a: 	movq	(%rbx), %rdi
    0000015d: 	jmp	.Ltmp874 # Offset: 349
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp867:
    00000168: 	movq	%rbp, %rsi
    0000016b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000172: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 370
    00000177: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000017e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000185: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000018c: 	jne	.Ltmp875 # Offset: 396
.Ltmp872:
    00000192: 	movq	-0x8(%rdx), %rax
    00000196: 	addq	$0x200, %rax
    0000019c: 	jmp	.Ltmp875 # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp871:
    000001a8: 	testq	%r12, %r12
    000001ab: 	je	.Ltmp874 # Offset: 427
    000001b1: 	jmp	.Ltmp876 # Offset: 433
.Ltmp873:
    000001b3: 	callq	__stack_chk_fail@PLT # Offset: 435
.Ltmp869:
    000001b8: 	leaq	DATAat0x15008(%rip), %rdi
    000001bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 447
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x10cf0
  Size        : 0xacc
  MaxSize     : 0xad0
  Offset      : 0x10cf0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x15938(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0xd8, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0xc8(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0x50(%rsp), %rbp
    00000034: 	movq	%rbp, %rdi
    00000037: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 55
    0000003c: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm7
    00000044: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm6
    0000004c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000053: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r15
    0000005a: 	movaps	%xmm7, 0x20(%rsp)
    0000005f: 	movq	%xmm7, %r12
    00000064: 	movhlps	%xmm6, %xmm7
    00000067: 	movq	%rax, 0x18(%rsp)
    0000006c: 	movq	%xmm7, %rcx
    00000071: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000078: 	leaq	0x8(%rcx), %r13
    0000007c: 	movaps	%xmm6, 0x30(%rsp)
    00000081: 	movq	%rax, 0x10(%rsp)
    00000086: 	movq	%xmm7, 0x48(%rsp)
    0000008c: 	movq	%xmm6, 0x40(%rsp)
    00000092: 	cmpq	%r13, %rax
    00000095: 	jbe	.Ltmp877 # Offset: 149
    00000097: 	movq	%r13, (%rsp)
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp880:
    000000a0: 	movq	(%rsp), %rax
    000000a4: 	movq	(%rax), %r14
    000000a7: 	leaq	0x200(%r14), %rbx
    000000ae: 	nop # Size: 2
.Ltmp879:
    000000b0: 	movq	(%r14), %rdi
    000000b3: 	leaq	0x10(%r14), %rdx
    000000b7: 	cmpq	%rdx, %rdi
    000000ba: 	je	.Ltmp878 # Offset: 186
    000000c0: 	movq	0x10(%r14), %rax
    000000c4: 	addq	$0x20, %r14
    000000c8: 	leaq	0x1(%rax), %rsi
    000000cc: 	callq	_ZdlPvm@PLT # Offset: 204
    000000d1: 	cmpq	%r14, %rbx
    000000d4: 	jne	.Ltmp879 # Offset: 212
    000000d6: 	addq	$0x8, (%rsp)
    000000db: 	movq	(%rsp), %rax
    000000df: 	cmpq	%rax, 0x10(%rsp)
    000000e4: 	ja	.Ltmp880 # Offset: 228
.Ltmp877:
    000000e6: 	movq	0x48(%rsp), %rcx
    000000eb: 	cmpq	%rcx, 0x10(%rsp)
    000000f0: 	je	.Ltmp881 # Offset: 240
.Ltmp913:
    000000f6: 	cmpq	0x40(%rsp), %r12
    000000fb: 	je	.Ltmp882 # Offset: 251
.Ltmp884:
    000000fd: 	movq	(%r12), %rdi
    00000101: 	leaq	0x10(%r12), %rax
    00000106: 	cmpq	%rax, %rdi
    00000109: 	je	.Ltmp883 # Offset: 265
    0000010f: 	movq	0x10(%r12), %rax
    00000114: 	addq	$0x20, %r12
    00000118: 	leaq	0x1(%rax), %rsi
    0000011c: 	callq	_ZdlPvm@PLT # Offset: 284
    00000121: 	cmpq	0x40(%rsp), %r12
    00000126: 	jne	.Ltmp884 # Offset: 294
.Ltmp882:
    00000128: 	cmpq	%r15, 0x18(%rsp)
    0000012d: 	je	.Ltmp885 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp887:
    00000130: 	movq	(%r15), %rdi
    00000133: 	leaq	0x10(%r15), %rax
    00000137: 	cmpq	%rax, %rdi
    0000013a: 	je	.Ltmp886 # Offset: 314
    00000140: 	movq	0x10(%r15), %rax
    00000144: 	addq	$0x20, %r15
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
    00000151: 	cmpq	%r15, 0x18(%rsp)
    00000156: 	jne	.Ltmp887 # Offset: 342
.Ltmp885:
    00000158: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000015f: 	leaq	0x8(%rax), %rbx
    00000163: 	cmpq	%r13, %rbx
    00000166: 	jbe	.Ltmp888 # Offset: 358
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp889:
    00000170: 	movq	(%r13), %rdi
    00000174: 	movl	$0x200, %esi
    00000179: 	addq	$0x8, %r13
    0000017d: 	callq	_ZdlPvm@PLT # Offset: 381
    00000182: 	cmpq	%r13, %rbx
    00000185: 	ja	.Ltmp889 # Offset: 389
.Ltmp888:
    00000187: 	movl	init_value(%rip), %ebx
    0000018d: 	movdqa	0x20(%rsp), %xmm6
    00000193: 	movq	%rbp, %rsi
    00000196: 	leaq	0x70(%rsp), %r12
    0000019b: 	movdqa	0x30(%rsp), %xmm7
    000001a1: 	leaq	DATAat0x15940(%rip), %rdx
    000001a8: 	movq	%r12, %rdi
    000001ab: 	movd	%ebx, %xmm3
    000001af: 	movl	%ebx, 0xb8(%rsp)
    000001b6: 	pshufd	$0x0, %xmm3, %xmm4
    000001bb: 	pshufd	$0xe0, %xmm3, %xmm2
    000001c0: 	movaps	%xmm6, _Z7gLabelsB5cxx11+48(%rip)
    000001c7: 	movaps	%xmm7, _Z7gLabelsB5cxx11+64(%rip)
    000001ce: 	movq	%xmm2, %r13
    000001d3: 	movaps	%xmm4, 0x90(%rsp)
    000001db: 	movaps	%xmm4, (%rsp)
    000001df: 	movaps	%xmm4, 0xa0(%rsp)
    000001e7: 	movq	%xmm2, 0xb0(%rsp)
    000001f0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 496
    000001f5: 	callq	clock@PLT # Offset: 501
    000001fa: 	movdqa	DATAat0x15d40(%rip), %xmm3
    00000202: 	movdqa	(%rsp), %xmm4
    00000207: 	leaq	0x90(%rsp), %r14
    0000020f: 	movq	%rax, start_time(%rip)
    00000216: 	movl	iterations(%rip), %eax
    0000021c: 	psrlq	$0x20, %xmm3
    00000221: 	movd	%eax, %xmm7
    00000225: 	imull	$0x37, %eax, %edx
    00000228: 	leal	(%rax,%rax), %edi
    0000022b: 	movl	%eax, %r8d
    0000022e: 	pshufd	$0x0, %xmm7, %xmm0
    00000233: 	imull	$0x39, %eax, %ecx
    00000236: 	leal	(%rdi,%rax), %esi
    00000239: 	shll	$0x4, %r8d
    0000023d: 	movdqa	%xmm0, %xmm2
    00000241: 	movdqa	%xmm0, %xmm1
    00000245: 	pmuludq	DATAat0x15d40(%rip), %xmm1
    0000024d: 	pshufd	$0x8, %xmm1, %xmm1
    00000252: 	psrlq	$0x20, %xmm2
    00000257: 	movd	%edx, %xmm7
    0000025b: 	pmuludq	%xmm2, %xmm3
    0000025f: 	imull	$0x34, %eax, %edx
    00000262: 	addl	%ebx, %edx
    00000264: 	pshufd	$0x8, %xmm3, %xmm3
    00000269: 	punpckldq	%xmm3, %xmm1
    0000026d: 	movq	%r13, %xmm3
    00000272: 	paddd	%xmm4, %xmm1
    00000276: 	movaps	%xmm1, 0x90(%rsp)
    0000027e: 	movdqa	DATAat0x15d50(%rip), %xmm1
    00000286: 	pmuludq	%xmm1, %xmm0
    0000028a: 	psrlq	$0x20, %xmm1
    0000028f: 	pmuludq	%xmm1, %xmm2
    00000293: 	pshufd	$0x8, %xmm0, %xmm0
    00000298: 	pshufd	$0x8, %xmm2, %xmm1
    0000029d: 	punpckldq	%xmm1, %xmm0
    000002a1: 	paddd	%xmm4, %xmm0
    000002a5: 	movaps	%xmm0, 0xa0(%rsp)
    000002ad: 	movd	%ecx, %xmm0
    000002b1: 	leal	(,%rsi,4), %ecx
    000002b8: 	subl	%ecx, %edx
    000002ba: 	leal	(,%rax,4), %ecx
    000002c1: 	punpckldq	%xmm7, %xmm0
    000002c5: 	subl	%ecx, %edx
    000002c7: 	addl	%eax, %ecx
    000002c9: 	paddd	%xmm3, %xmm0
    000002cd: 	subl	%r8d, %edx
    000002d0: 	leal	(%rax,%rcx,2), %r9d
    000002d4: 	subl	%eax, %r8d
    000002d7: 	subl	%r9d, %edx
    000002da: 	movq	%xmm0, 0xb0(%rsp)
    000002e3: 	leal	(%rdx,%rsi,2), %edx
    000002e6: 	leal	(%rdx,%r8), %eax
    000002ea: 	leal	(%rsi,%rsi,8), %edx
    000002ed: 	movq	%r12, %rsi
    000002f0: 	addl	%edx, %eax
    000002f2: 	subl	%edi, %eax
    000002f4: 	movq	%r14, %rdi
    000002f7: 	addl	%ecx, %eax
    000002f9: 	movl	%eax, 0xb8(%rsp)
    00000300: 	callq	_Z12check11_sumsIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 768
    00000305: 	movq	%r12, %rdi
    00000308: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 776
    0000030d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000314: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000031b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000322: 	je	.Ltmp890 # Offset: 802
.Ltmp915:
    00000328: 	movq	-0x20(%rax), %r13
    0000032c: 	callq	clock@PLT # Offset: 812
    00000331: 	pxor	%xmm0, %xmm0
    00000335: 	movq	%rax, end_time(%rip)
    0000033c: 	movq	%r13, %rdi
    0000033f: 	subq	start_time(%rip), %rax
    00000346: 	cvtsi2sd	%rax, %xmm0
    0000034b: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000353: 	callq	_Z13record_resultdPKc # Offset: 851
    00000358: 	movq	0x70(%rsp), %rdi
    0000035d: 	leaq	0x80(%rsp), %r13
    00000365: 	cmpq	%r13, %rdi
    00000368: 	je	.Ltmp891 # Offset: 872
    0000036a: 	movq	0x80(%rsp), %rax
    00000372: 	leaq	0x1(%rax), %rsi
    00000376: 	callq	_ZdlPvm@PLT # Offset: 886
.Ltmp891:
    0000037b: 	movl	init_value(%rip), %eax
    00000381: 	leaq	DATAat0x15970(%rip), %rdx
    00000388: 	movq	%rbp, %rsi
    0000038b: 	movq	%r12, %rdi
    0000038e: 	movd	%eax, %xmm7
    00000392: 	movl	%eax, 0xb8(%rsp)
    00000399: 	pshufd	$0x0, %xmm7, %xmm0
    0000039e: 	movaps	%xmm0, 0x90(%rsp)
    000003a6: 	movaps	%xmm0, 0xa0(%rsp)
    000003ae: 	pshufd	$0xe0, %xmm7, %xmm0
    000003b3: 	movq	%xmm0, 0xb0(%rsp)
    000003bc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 956
    000003c1: 	movq	%r12, %rsi
    000003c4: 	movq	%r14, %rdi
    000003c7: 	callq	_Z17test_array11_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 967
    000003cc: 	movq	0x70(%rsp), %rdi
    000003d1: 	cmpq	%r13, %rdi
    000003d4: 	je	.Ltmp892 # Offset: 980
    000003d6: 	movq	0x80(%rsp), %rax
    000003de: 	leaq	0x1(%rax), %rsi
    000003e2: 	callq	_ZdlPvm@PLT # Offset: 994
.Ltmp892:
    000003e7: 	movl	init_value(%rip), %eax
    000003ed: 	leaq	DATAat0x159a0(%rip), %rdx
    000003f4: 	movq	%rbp, %rsi
    000003f7: 	movq	%r12, %rdi
    000003fa: 	movd	%eax, %xmm2
    000003fe: 	movl	%eax, 0xb8(%rsp)
    00000405: 	pshufd	$0x0, %xmm2, %xmm0
    0000040a: 	movaps	%xmm0, 0x90(%rsp)
    00000412: 	movaps	%xmm0, 0xa0(%rsp)
    0000041a: 	pshufd	$0xe0, %xmm2, %xmm0
    0000041f: 	movq	%xmm0, 0xb0(%rsp)
    00000428: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1064
    0000042d: 	movq	%r12, %rsi
    00000430: 	movq	%r14, %rdi
    00000433: 	callq	_Z17test_array11_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1075
    00000438: 	movq	0x70(%rsp), %rdi
    0000043d: 	cmpq	%r13, %rdi
    00000440: 	je	.Ltmp893 # Offset: 1088
    00000442: 	movq	0x80(%rsp), %rax
    0000044a: 	leaq	0x1(%rax), %rsi
    0000044e: 	callq	_ZdlPvm@PLT # Offset: 1102
.Ltmp893:
    00000453: 	movl	init_value(%rip), %eax
    00000459: 	leaq	DATAat0x159d0(%rip), %rdx
    00000460: 	movq	%rbp, %rsi
    00000463: 	movq	%r12, %rdi
    00000466: 	movd	%eax, %xmm6
    0000046a: 	movl	%eax, 0xb8(%rsp)
    00000471: 	pshufd	$0x0, %xmm6, %xmm0
    00000476: 	movaps	%xmm0, 0x90(%rsp)
    0000047e: 	movaps	%xmm0, 0xa0(%rsp)
    00000486: 	pshufd	$0xe0, %xmm6, %xmm0
    0000048b: 	movq	%xmm0, 0xb0(%rsp)
    00000494: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1172
    00000499: 	movq	%r12, %rsi
    0000049c: 	movq	%r14, %rdi
    0000049f: 	callq	_Z16test_array11_argIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1183
    000004a4: 	movq	0x70(%rsp), %rdi
    000004a9: 	cmpq	%r13, %rdi
    000004ac: 	je	.Ltmp894 # Offset: 1196
    000004ae: 	movq	0x80(%rsp), %rax
    000004b6: 	leaq	0x1(%rax), %rsi
    000004ba: 	callq	_ZdlPvm@PLT # Offset: 1210
.Ltmp894:
    000004bf: 	movl	init_value(%rip), %ebx
    000004c5: 	leaq	DATAat0x159f8(%rip), %rdx
    000004cc: 	movq	%rbp, %rsi
    000004cf: 	movq	%r12, %rdi
    000004d2: 	movd	%ebx, %xmm3
    000004d6: 	movl	%ebx, 0xb8(%rsp)
    000004dd: 	pshufd	$0x0, %xmm3, %xmm5
    000004e2: 	pshufd	$0xe0, %xmm3, %xmm0
    000004e7: 	movaps	%xmm5, 0x90(%rsp)
    000004ef: 	movaps	%xmm5, (%rsp)
    000004f3: 	movaps	%xmm5, 0xa0(%rsp)
    000004fb: 	movq	%xmm0, 0xb0(%rsp)
    00000504: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1284
    00000509: 	callq	clock@PLT # Offset: 1289
    0000050e: 	movd	iterations(%rip), %xmm7
    00000516: 	movdqa	DATAat0x15d40(%rip), %xmm2
    0000051e: 	cmpl	init_value(%rip), %ebx
    00000524: 	movq	%rax, start_time(%rip)
    0000052b: 	pshufd	$0x0, %xmm7, %xmm1
    00000530: 	psrlq	$0x20, %xmm2
    00000535: 	movdqa	%xmm1, %xmm0
    00000539: 	psrlq	$0x20, %xmm1
    0000053e: 	pmuludq	DATAat0x15d40(%rip), %xmm0
    00000546: 	pshufd	$0x8, %xmm0, %xmm0
    0000054b: 	pmuludq	%xmm2, %xmm1
    0000054f: 	pshufd	$0x8, %xmm1, %xmm1
    00000554: 	punpckldq	%xmm1, %xmm0
    00000558: 	paddd	(%rsp), %xmm0
    0000055d: 	movaps	%xmm0, 0x90(%rsp)
    00000565: 	punpckhdq	%xmm0, %xmm0
    00000569: 	movd	%xmm0, 0xa0(%rsp)
    00000572: 	jne	.Ltmp895 # Offset: 1394
.Ltmp914:
    00000578: 	movq	%r12, %rdi
    0000057b: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1403
    00000580: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000587: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000058e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000595: 	je	.Ltmp896 # Offset: 1429
.Ltmp916:
    0000059b: 	movq	-0x20(%rax), %r15
    0000059f: 	callq	clock@PLT # Offset: 1439
    000005a4: 	pxor	%xmm0, %xmm0
    000005a8: 	movq	%rax, end_time(%rip)
    000005af: 	movq	%r15, %rdi
    000005b2: 	subq	start_time(%rip), %rax
    000005b9: 	cvtsi2sd	%rax, %xmm0
    000005be: 	divsd	DATAat0x15c60(%rip), %xmm0
    000005c6: 	callq	_Z13record_resultdPKc # Offset: 1478
    000005cb: 	movq	0x70(%rsp), %rdi
    000005d0: 	cmpq	%r13, %rdi
    000005d3: 	je	.Ltmp897 # Offset: 1491
    000005d5: 	movq	0x80(%rsp), %rax
    000005dd: 	leaq	0x1(%rax), %rsi
    000005e1: 	callq	_ZdlPvm@PLT # Offset: 1505
.Ltmp897:
    000005e6: 	movl	init_value(%rip), %eax
    000005ec: 	leaq	DATAat0x15a30(%rip), %rdx
    000005f3: 	movq	%rbp, %rsi
    000005f6: 	movq	%r12, %rdi
    000005f9: 	movd	%eax, %xmm1
    000005fd: 	movl	%eax, 0xb8(%rsp)
    00000604: 	pshufd	$0x0, %xmm1, %xmm0
    00000609: 	movaps	%xmm0, 0x90(%rsp)
    00000611: 	movaps	%xmm0, 0xa0(%rsp)
    00000619: 	pshufd	$0xe0, %xmm1, %xmm0
    0000061e: 	movq	%xmm0, 0xb0(%rsp)
    00000627: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1575
    0000062c: 	movq	%r12, %rsi
    0000062f: 	movq	%r14, %rdi
    00000632: 	callq	_Z16test_array5_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1586
    00000637: 	movq	0x70(%rsp), %rdi
    0000063c: 	cmpq	%r13, %rdi
    0000063f: 	je	.Ltmp898 # Offset: 1599
    00000641: 	movq	0x80(%rsp), %rax
    00000649: 	leaq	0x1(%rax), %rsi
    0000064d: 	callq	_ZdlPvm@PLT # Offset: 1613
.Ltmp898:
    00000652: 	movl	init_value(%rip), %eax
    00000658: 	leaq	DATAat0x15a68(%rip), %rdx
    0000065f: 	movq	%rbp, %rsi
    00000662: 	movq	%r12, %rdi
    00000665: 	movd	%eax, %xmm7
    00000669: 	movl	%eax, 0xb8(%rsp)
    00000670: 	pshufd	$0x0, %xmm7, %xmm0
    00000675: 	movaps	%xmm0, 0x90(%rsp)
    0000067d: 	movaps	%xmm0, 0xa0(%rsp)
    00000685: 	pshufd	$0xe0, %xmm7, %xmm0
    0000068a: 	movq	%xmm0, 0xb0(%rsp)
    00000693: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1683
    00000698: 	movq	%r12, %rsi
    0000069b: 	movq	%r14, %rdi
    0000069e: 	callq	_Z16test_array5_arg1IiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1694
    000006a3: 	movq	0x70(%rsp), %rdi
    000006a8: 	cmpq	%r13, %rdi
    000006ab: 	je	.Ltmp899 # Offset: 1707
    000006ad: 	movq	0x80(%rsp), %rax
    000006b5: 	leaq	0x1(%rax), %rsi
    000006b9: 	callq	_ZdlPvm@PLT # Offset: 1721
.Ltmp899:
    000006be: 	movl	init_value(%rip), %eax
    000006c4: 	leaq	DATAat0x15aa0(%rip), %rdx
    000006cb: 	movq	%rbp, %rsi
    000006ce: 	movq	%r12, %rdi
    000006d1: 	movd	%eax, %xmm2
    000006d5: 	movl	%eax, 0xb8(%rsp)
    000006dc: 	pshufd	$0x0, %xmm2, %xmm0
    000006e1: 	movaps	%xmm0, 0x90(%rsp)
    000006e9: 	movaps	%xmm0, 0xa0(%rsp)
    000006f1: 	pshufd	$0xe0, %xmm2, %xmm0
    000006f6: 	movq	%xmm0, 0xb0(%rsp)
    000006ff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1791
    00000704: 	movq	%r12, %rsi
    00000707: 	movq	%r14, %rdi
    0000070a: 	callq	_Z15test_array5_argIiEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1802
    0000070f: 	movq	0x70(%rsp), %rdi
    00000714: 	cmpq	%r13, %rdi
    00000717: 	je	.Ltmp900 # Offset: 1815
    00000719: 	movq	0x80(%rsp), %rax
    00000721: 	leaq	0x1(%rax), %rsi
    00000725: 	callq	_ZdlPvm@PLT # Offset: 1829
.Ltmp900:
    0000072a: 	leaq	DATAat0x15ad0(%rip), %rdx
    00000731: 	movq	%rbp, %rsi
    00000734: 	movq	%r12, %rdi
    00000737: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1847
    0000073c: 	movq	%r12, %rdi
    0000073f: 	callq	_Z19test_array11_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1855
    00000744: 	movq	0x70(%rsp), %rdi
    00000749: 	cmpq	%r13, %rdi
    0000074c: 	je	.Ltmp901 # Offset: 1868
    0000074e: 	movq	0x80(%rsp), %rax
    00000756: 	leaq	0x1(%rax), %rsi
    0000075a: 	callq	_ZdlPvm@PLT # Offset: 1882
.Ltmp901:
    0000075f: 	leaq	DATAat0x15af8(%rip), %rdx
    00000766: 	movq	%rbp, %rsi
    00000769: 	movq	%r12, %rdi
    0000076c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1900
    00000771: 	movq	%r12, %rdi
    00000774: 	callq	_Z19test_array11_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1908
    00000779: 	movq	0x70(%rsp), %rdi
    0000077e: 	cmpq	%r13, %rdi
    00000781: 	je	.Ltmp902 # Offset: 1921
    00000783: 	movq	0x80(%rsp), %rax
    0000078b: 	leaq	0x1(%rax), %rsi
    0000078f: 	callq	_ZdlPvm@PLT # Offset: 1935
.Ltmp902:
    00000794: 	leaq	DATAat0x15b28(%rip), %rdx
    0000079b: 	movq	%rbp, %rsi
    0000079e: 	movq	%r12, %rdi
    000007a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1953
    000007a6: 	movq	%r12, %rdi
    000007a9: 	callq	_Z19test_array11_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1961
    000007ae: 	movq	0x70(%rsp), %rdi
    000007b3: 	cmpq	%r13, %rdi
    000007b6: 	je	.Ltmp903 # Offset: 1974
    000007b8: 	movq	0x80(%rsp), %rax
    000007c0: 	leaq	0x1(%rax), %rsi
    000007c4: 	callq	_ZdlPvm@PLT # Offset: 1988
.Ltmp903:
    000007c9: 	leaq	DATAat0x15b58(%rip), %rdx
    000007d0: 	movq	%rbp, %rsi
    000007d3: 	movq	%r12, %rdi
    000007d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2006
    000007db: 	movq	%r12, %rdi
    000007de: 	callq	_Z18test_array11_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2014
    000007e3: 	movq	0x70(%rsp), %rdi
    000007e8: 	cmpq	%r13, %rdi
    000007eb: 	je	.Ltmp904 # Offset: 2027
    000007ed: 	movq	0x80(%rsp), %rax
    000007f5: 	leaq	0x1(%rax), %rsi
    000007f9: 	callq	_ZdlPvm@PLT # Offset: 2041
.Ltmp904:
    000007fe: 	leaq	DATAat0x15b80(%rip), %rdx
    00000805: 	movq	%rbp, %rsi
    00000808: 	movq	%r12, %rdi
    0000080b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2059
    00000810: 	movq	%r12, %rdi
    00000813: 	callq	_Z18test_array5_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2067
    00000818: 	movq	0x70(%rsp), %rdi
    0000081d: 	cmpq	%r13, %rdi
    00000820: 	je	.Ltmp905 # Offset: 2080
    00000822: 	movq	0x80(%rsp), %rax
    0000082a: 	leaq	0x1(%rax), %rsi
    0000082e: 	callq	_ZdlPvm@PLT # Offset: 2094
.Ltmp905:
    00000833: 	leaq	DATAat0x15bb0(%rip), %rdx
    0000083a: 	movq	%rbp, %rsi
    0000083d: 	movq	%r12, %rdi
    00000840: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2112
    00000845: 	movq	%r12, %rdi
    00000848: 	callq	_Z18test_array5_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2120
    0000084d: 	movq	0x70(%rsp), %rdi
    00000852: 	cmpq	%r13, %rdi
    00000855: 	je	.Ltmp906 # Offset: 2133
    00000857: 	movq	0x80(%rsp), %rax
    0000085f: 	leaq	0x1(%rax), %rsi
    00000863: 	callq	_ZdlPvm@PLT # Offset: 2147
.Ltmp906:
    00000868: 	leaq	DATAat0x15be0(%rip), %rdx
    0000086f: 	movq	%rbp, %rsi
    00000872: 	movq	%r12, %rdi
    00000875: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2165
    0000087a: 	movq	%r12, %rdi
    0000087d: 	callq	_Z18test_array5_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2173
    00000882: 	movq	0x70(%rsp), %rdi
    00000887: 	cmpq	%r13, %rdi
    0000088a: 	je	.Ltmp907 # Offset: 2186
    0000088c: 	movq	0x80(%rsp), %rax
    00000894: 	leaq	0x1(%rax), %rsi
    00000898: 	callq	_ZdlPvm@PLT # Offset: 2200
.Ltmp907:
    0000089d: 	leaq	DATAat0x15c10(%rip), %rdx
    000008a4: 	movq	%rbp, %rsi
    000008a7: 	movq	%r12, %rdi
    000008aa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2218
    000008af: 	movq	%r12, %rdi
    000008b2: 	callq	_Z17test_array5_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2226
    000008b7: 	movq	0x70(%rsp), %rdi
    000008bc: 	cmpq	%r13, %rdi
    000008bf: 	je	.Ltmp908 # Offset: 2239
    000008c1: 	movq	0x80(%rsp), %rax
    000008c9: 	leaq	0x1(%rax), %rsi
    000008cd: 	callq	_ZdlPvm@PLT # Offset: 2253
.Ltmp908:
    000008d2: 	movq	0x50(%rsp), %rdi
    000008d7: 	leaq	0x60(%rsp), %rax
    000008dc: 	cmpq	%rax, %rdi
    000008df: 	je	.Ltmp909 # Offset: 2271
    000008e1: 	movq	0x60(%rsp), %rax
    000008e6: 	leaq	0x1(%rax), %rsi
    000008ea: 	callq	_ZdlPvm@PLT # Offset: 2282
.Ltmp909:
    000008ef: 	movq	0xc8(%rsp), %rax
    000008f7: 	subq	%fs:0x28, %rax
    00000900: 	jne	.Ltmp910 # Offset: 2304
    00000906: 	addq	$0xd8, %rsp
    0000090d: 	popq	%rbx
    0000090e: 	popq	%rbp
    0000090f: 	popq	%r12
    00000911: 	popq	%r13
    00000913: 	popq	%r14
    00000915: 	popq	%r15
    00000917: 	retq # Offset: 2327
    00000918: 	nopl	(%rax,%rax) # Size: 8
.Ltmp911:
    00000920: 	addq	$0x20, %r12
.Ltmp881:
    00000924: 	cmpq	%r12, 0x18(%rsp)
    00000929: 	je	.Ltmp885 # Offset: 2345
.Ltmp912:
    0000092f: 	movq	(%r12), %rdi
    00000933: 	leaq	0x10(%r12), %rax
    00000938: 	cmpq	%rax, %rdi
    0000093b: 	je	.Ltmp911 # Offset: 2363
    0000093d: 	movq	0x10(%r12), %rax
    00000942: 	addq	$0x20, %r12
    00000946: 	leaq	0x1(%rax), %rsi
    0000094a: 	callq	_ZdlPvm@PLT # Offset: 2378
    0000094f: 	cmpq	%r12, 0x18(%rsp)
    00000954: 	jne	.Ltmp912 # Offset: 2388
    00000956: 	jmp	.Ltmp885 # Offset: 2390
    0000095b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp878:
    00000960: 	addq	$0x20, %r14
    00000964: 	cmpq	%rbx, %r14
    00000967: 	jne	.Ltmp879 # Offset: 2407
    0000096d: 	addq	$0x8, (%rsp)
    00000972: 	movq	(%rsp), %rax
    00000976: 	cmpq	%rax, 0x10(%rsp)
    0000097b: 	ja	.Ltmp880 # Offset: 2427
    00000981: 	jmp	.Ltmp877 # Offset: 2433
    00000986: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp883:
    00000990: 	addq	$0x20, %r12
    00000994: 	jmp	.Ltmp913 # Offset: 2452
    00000999: 	nopl	(%rax) # Size: 7
.Ltmp886:
    000009a0: 	addq	$0x20, %r15
    000009a4: 	cmpq	%r15, 0x18(%rsp)
    000009a9: 	jne	.Ltmp887 # Offset: 2473
    000009af: 	jmp	.Ltmp885 # Offset: 2479
.Ltmp895:
    000009b4: 	movq	0x70(%rsp), %rdx
    000009b9: 	leaq	DATAat0x158f3(%rip), %rsi
    000009c0: 	movl	$0x1, %edi
    000009c5: 	xorl	%eax, %eax
    000009c7: 	callq	__printf_chk@PLT # Offset: 2503
    000009cc: 	jmp	.Ltmp914 # Offset: 2508
.Ltmp890:
    000009d1: 	movq	-0x8(%rdx), %rax
    000009d5: 	addq	$0x200, %rax
    000009db: 	jmp	.Ltmp915 # Offset: 2523
.Ltmp896:
    000009e0: 	movq	-0x8(%rdx), %rax
    000009e4: 	addq	$0x200, %rax
    000009ea: 	jmp	.Ltmp916 # Offset: 2538
.Ltmp910:
    000009ef: 	callq	__stack_chk_fail@PLT # Offset: 2543
    000009f4: 	endbr64
    000009f8: 	movq	%rax, %rbp
    000009fb: 	jmp	.Ltmp917 # Offset: 2555
    000009fd: 	endbr64
    00000a01: 	movq	%rax, %rbp
    00000a04: 	jmp	.Ltmp918 # Offset: 2564
    00000a06: 	endbr64
.Ltmp920:
    00000a0a: 	movq	%rax, %rbp
    00000a0d: 	jmp	.Ltmp919 # Offset: 2573
    00000a12: 	endbr64
    00000a16: 	jmp	.Ltmp920 # Offset: 2582
    00000a18: 	endbr64
    00000a1c: 	jmp	.Ltmp920 # Offset: 2588
    00000a1e: 	endbr64
    00000a22: 	jmp	.Ltmp920 # Offset: 2594
    00000a24: 	endbr64
    00000a28: 	jmp	.Ltmp920 # Offset: 2600
    00000a2a: 	endbr64
    00000a2e: 	jmp	.Ltmp920 # Offset: 2606
    00000a30: 	endbr64
    00000a34: 	jmp	.Ltmp920 # Offset: 2612
    00000a36: 	endbr64
    00000a3a: 	jmp	.Ltmp920 # Offset: 2618
    00000a3c: 	endbr64
    00000a40: 	jmp	.Ltmp920 # Offset: 2624
.Ltmp918:
    00000a42: 	movq	0x70(%rsp), %rdi
    00000a47: 	leaq	0x80(%rsp), %rax
    00000a4f: 	cmpq	%rax, %rdi
    00000a52: 	je	.Ltmp917 # Offset: 2642
.Ltmp922:
    00000a54: 	movq	0x80(%rsp), %rax
    00000a5c: 	leaq	0x1(%rax), %rsi
    00000a60: 	callq	_ZdlPvm@PLT # Offset: 2656
.Ltmp917:
    00000a65: 	movq	0x50(%rsp), %rdi
    00000a6a: 	leaq	0x60(%rsp), %rax
    00000a6f: 	cmpq	%rax, %rdi
    00000a72: 	je	.Ltmp921 # Offset: 2674
    00000a74: 	movq	0x60(%rsp), %rax
    00000a79: 	leaq	0x1(%rax), %rsi
    00000a7d: 	callq	_ZdlPvm@PLT # Offset: 2685
.Ltmp921:
    00000a82: 	movq	%rbp, %rdi
    00000a85: 	callq	_Unwind_Resume@PLT # Offset: 2693
    00000a8a: 	endbr64
    00000a8e: 	jmp	.Ltmp920 # Offset: 2702
    00000a93: 	endbr64
    00000a97: 	jmp	.Ltmp920 # Offset: 2711
    00000a9c: 	endbr64
    00000aa0: 	jmp	.Ltmp920 # Offset: 2720
    00000aa5: 	endbr64
    00000aa9: 	jmp	.Ltmp920 # Offset: 2729
    00000aae: 	endbr64
    00000ab2: 	jmp	.Ltmp920 # Offset: 2738
    00000ab7: 	endbr64
    00000abb: 	jmp	.Ltmp920 # Offset: 2747
.Ltmp919:
    00000ac0: 	movq	0x70(%rsp), %rdi
    00000ac5: 	cmpq	%r13, %rdi
    00000ac8: 	jne	.Ltmp922 # Offset: 2760
    00000aca: 	jmp	.Ltmp917 # Offset: 2762
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_Z19test_array11_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x117c0
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0x117c0
  Section     : .text
  Orc Section : .local.text._Z19test_array11_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm4, %xmm4
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x88(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cvtsi2sdl	init_value(%rip), %xmm4
    00000033: 	movapd	%xmm4, %xmm2
    00000037: 	movsd	%xmm4, 0x18(%rsp)
    0000003d: 	unpcklpd	%xmm2, %xmm2
    00000041: 	movaps	%xmm2, (%rsp)
    00000045: 	callq	clock@PLT # Offset: 69
    0000004a: 	pxor	%xmm1, %xmm1
    0000004e: 	movapd	(%rsp), %xmm2
    00000053: 	movapd	DATAat0x15db0(%rip), %xmm3
    0000005b: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000063: 	movsd	0x18(%rsp), %xmm4
    00000069: 	leaq	0x30(%rsp), %rdi
    0000006e: 	movq	%rbp, %rsi
    00000071: 	movq	%rax, start_time(%rip)
    00000078: 	movapd	%xmm1, %xmm0
    0000007c: 	mulsd	DATAat0x15c70(%rip), %xmm1
    00000084: 	unpcklpd	%xmm0, %xmm0
    00000088: 	mulpd	%xmm0, %xmm3
    0000008c: 	addsd	%xmm4, %xmm1
    00000090: 	addpd	%xmm2, %xmm3
    00000094: 	movsd	%xmm1, 0x80(%rsp)
    0000009d: 	movaps	%xmm3, 0x30(%rsp)
    000000a2: 	movapd	DATAat0x15dc0(%rip), %xmm3
    000000aa: 	mulpd	%xmm0, %xmm3
    000000ae: 	addpd	%xmm2, %xmm3
    000000b2: 	movaps	%xmm3, 0x40(%rsp)
    000000b7: 	movapd	DATAat0x15dd0(%rip), %xmm3
    000000bf: 	mulpd	%xmm0, %xmm3
    000000c3: 	addpd	%xmm2, %xmm3
    000000c7: 	movaps	%xmm3, 0x50(%rsp)
    000000cc: 	movapd	DATAat0x15de0(%rip), %xmm3
    000000d4: 	mulpd	%xmm0, %xmm3
    000000d8: 	mulpd	DATAat0x15df0(%rip), %xmm0
    000000e0: 	addpd	%xmm2, %xmm3
    000000e4: 	addpd	%xmm2, %xmm0
    000000e8: 	movaps	%xmm3, 0x60(%rsp)
    000000ed: 	movaps	%xmm0, 0x70(%rsp)
    000000f2: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 242
    000000f7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000105: 	subq	$0x20, %rax
    00000109: 	cmpq	%rax, %rbx
    0000010c: 	je	.Ltmp923 # Offset: 268
    00000112: 	leaq	0x10(%rbx), %rdi
    00000116: 	movq	0x8(%rbp), %r12
    0000011a: 	movq	%rdi, (%rbx)
    0000011d: 	movq	(%rbp), %r13
    00000121: 	movq	%r13, %rax
    00000124: 	addq	%r12, %rax
    00000127: 	je	.Ltmp924 # Offset: 295
    00000129: 	testq	%r13, %r13
    0000012c: 	je	.Ltmp925 # Offset: 300
.Ltmp924:
    00000132: 	movq	%r12, 0x28(%rsp)
    00000137: 	cmpq	$0xf, %r12
    0000013b: 	ja	.Ltmp926 # Offset: 315
    00000141: 	cmpq	$0x1, %r12
    00000145: 	jne	.Ltmp927 # Offset: 325
    0000014b: 	movzbl	(%r13), %eax
    00000150: 	movb	%al, 0x10(%rbx)
.Ltmp930:
    00000153: 	movq	%r12, 0x8(%rbx)
    00000157: 	movb	$0x0, (%rdi,%r12)
    0000015c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000163: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016a: 	addq	$0x20, %rax
    0000016e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000175: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017c: 	je	.Ltmp928 # Offset: 380
.Ltmp931:
    00000182: 	movq	-0x20(%rax), %rbp
    00000186: 	callq	clock@PLT # Offset: 390
    0000018b: 	movq	%rax, end_time(%rip)
    00000192: 	movq	0x88(%rsp), %rdx
    0000019a: 	subq	%fs:0x28, %rdx
    000001a3: 	jne	.Ltmp929 # Offset: 419
    000001a9: 	subq	start_time(%rip), %rax
    000001b0: 	pxor	%xmm0, %xmm0
    000001b4: 	movq	%rbp, %rdi
    000001b7: 	cvtsi2sd	%rax, %xmm0
    000001bc: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001c4: 	addq	$0x98, %rsp
    000001cb: 	popq	%rbx
    000001cc: 	popq	%rbp
    000001cd: 	popq	%r12
    000001cf: 	popq	%r13
    000001d1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp926:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	leaq	0x28(%rsp), %rsi
    000001e8: 	xorl	%edx, %edx
    000001ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 490
    000001ef: 	movq	%rax, (%rbx)
    000001f2: 	movq	%rax, %rdi
    000001f5: 	movq	0x28(%rsp), %rax
    000001fa: 	movq	%rax, 0x10(%rbx)
.Ltmp932:
    000001fe: 	movq	%r12, %rdx
    00000201: 	movq	%r13, %rsi
    00000204: 	callq	memcpy@PLT # Offset: 516
    00000209: 	movq	0x28(%rsp), %r12
    0000020e: 	movq	(%rbx), %rdi
    00000211: 	jmp	.Ltmp930 # Offset: 529
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp923:
    00000220: 	movq	%rbp, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp931 # Offset: 580
.Ltmp928:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp931 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp927:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp930 # Offset: 611
    00000269: 	jmp	.Ltmp932 # Offset: 617
.Ltmp929:
    0000026b: 	callq	__stack_chk_fail@PLT # Offset: 619
.Ltmp925:
    00000270: 	leaq	DATAat0x15008(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_array11_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x11a40
  Size        : 0x234
  MaxSize     : 0x240
  Offset      : 0x11a40
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movd	%ebx, %xmm3
    00000030: 	movd	iterations(%rip), %xmm2
    00000038: 	movq	DATAat0x15d80(%rip), %xmm1
    00000040: 	movl	init_value(%rip), %edx
    00000046: 	movq	%rax, start_time(%rip)
    0000004d: 	pshuflw	$0x0, %xmm2, %xmm0
    00000052: 	pmullw	%xmm1, %xmm0
    00000056: 	pshuflw	$0x0, %xmm3, %xmm1
    0000005b: 	paddw	%xmm0, %xmm1
    0000005f: 	pextrw	$0x0, %xmm0, %eax
    00000064: 	pextrw	$0x3, %xmm0, %edi
    00000069: 	addl	%edx, %eax
    0000006b: 	pextrw	$0x2, %xmm0, %esi
    00000070: 	pextrw	$0x0, %xmm1, %ecx
    00000075: 	pextrw	$0x3, %xmm1, %r8d
    0000007b: 	pextrw	$0x2, %xmm1, %r9d
    00000081: 	cmpw	%cx, %ax
    00000084: 	jne	.Ltmp933 # Offset: 132
    00000086: 	pextrw	$0x1, %xmm0, %eax
    0000008b: 	pextrw	$0x1, %xmm1, %ecx
    00000090: 	addl	%edx, %eax
    00000092: 	cmpw	%cx, %ax
    00000095: 	jne	.Ltmp933 # Offset: 149
    00000097: 	addl	%edx, %esi
    00000099: 	cmpw	%r9w, %si
    0000009d: 	jne	.Ltmp933 # Offset: 157
    0000009f: 	addl	%edx, %edi
    000000a1: 	cmpw	%r8w, %di
    000000a5: 	je	.Ltmp934 # Offset: 165
.Ltmp933:
    000000a7: 	movq	(%rbp), %rdx
    000000ab: 	leaq	DATAat0x158f3(%rip), %rsi
    000000b2: 	movl	$0x1, %edi
    000000b7: 	xorl	%eax, %eax
    000000b9: 	callq	__printf_chk@PLT # Offset: 185
.Ltmp934:
    000000be: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000c5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000cc: 	subq	$0x20, %rax
    000000d0: 	cmpq	%rax, %rbx
    000000d3: 	je	.Ltmp935 # Offset: 211
    000000d9: 	leaq	0x10(%rbx), %rdi
    000000dd: 	movq	0x8(%rbp), %r12
    000000e1: 	movq	%rdi, (%rbx)
    000000e4: 	movq	(%rbp), %r13
    000000e8: 	movq	%r13, %rax
    000000eb: 	addq	%r12, %rax
    000000ee: 	je	.Ltmp936 # Offset: 238
    000000f0: 	testq	%r13, %r13
    000000f3: 	je	.Ltmp937 # Offset: 243
.Ltmp936:
    000000f9: 	movq	%r12, (%rsp)
    000000fd: 	cmpq	$0xf, %r12
    00000101: 	ja	.Ltmp938 # Offset: 257
    00000107: 	cmpq	$0x1, %r12
    0000010b: 	jne	.Ltmp939 # Offset: 267
    00000111: 	movzbl	(%r13), %eax
    00000116: 	movb	%al, 0x10(%rbx)
.Ltmp942:
    00000119: 	movq	%r12, 0x8(%rbx)
    0000011d: 	movb	$0x0, (%rdi,%r12)
    00000122: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000129: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000130: 	addq	$0x20, %rax
    00000134: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000013b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000142: 	je	.Ltmp940 # Offset: 322
.Ltmp943:
    00000148: 	movq	-0x20(%rax), %rbp
    0000014c: 	callq	clock@PLT # Offset: 332
    00000151: 	movq	%rax, end_time(%rip)
    00000158: 	movq	0x8(%rsp), %rdx
    0000015d: 	subq	%fs:0x28, %rdx
    00000166: 	jne	.Ltmp941 # Offset: 358
    0000016c: 	subq	start_time(%rip), %rax
    00000173: 	pxor	%xmm0, %xmm0
    00000177: 	movq	%rbp, %rdi
    0000017a: 	cvtsi2sd	%rax, %xmm0
    0000017f: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000187: 	addq	$0x18, %rsp
    0000018b: 	popq	%rbx
    0000018c: 	popq	%rbp
    0000018d: 	popq	%r12
    0000018f: 	popq	%r13
    00000191: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 401
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp938:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	movq	%rsp, %rsi
    000001a6: 	xorl	%edx, %edx
    000001a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 424
    000001ad: 	movq	%rax, (%rbx)
    000001b0: 	movq	%rax, %rdi
    000001b3: 	movq	(%rsp), %rax
    000001b7: 	movq	%rax, 0x10(%rbx)
.Ltmp944:
    000001bb: 	movq	%r12, %rdx
    000001be: 	movq	%r13, %rsi
    000001c1: 	callq	memcpy@PLT # Offset: 449
    000001c6: 	movq	(%rsp), %r12
    000001ca: 	movq	(%rbx), %rdi
    000001cd: 	jmp	.Ltmp942 # Offset: 461
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp935:
    000001d8: 	movq	%rbp, %rsi
    000001db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 482
    000001e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fc: 	jne	.Ltmp943 # Offset: 508
.Ltmp940:
    00000202: 	movq	-0x8(%rdx), %rax
    00000206: 	addq	$0x200, %rax
    0000020c: 	jmp	.Ltmp943 # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp939:
    00000218: 	testq	%r12, %r12
    0000021b: 	je	.Ltmp942 # Offset: 539
    00000221: 	jmp	.Ltmp944 # Offset: 545
.Ltmp941:
    00000223: 	callq	__stack_chk_fail@PLT # Offset: 547
.Ltmp937:
    00000228: 	leaq	DATAat0x15008(%rip), %rdi
    0000022f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 559
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x11c80
  Size        : 0x2bc
  MaxSize     : 0x2c0
  Offset      : 0x11c80
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm2, %xmm2
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x28(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	cvtsi2sdl	init_value(%rip), %xmm2
    0000002d: 	movapd	%xmm2, %xmm0
    00000031: 	movsd	%xmm2, 0x18(%rsp)
    00000037: 	unpcklpd	%xmm0, %xmm0
    0000003b: 	movaps	%xmm0, (%rsp)
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movl	iterations(%rip), %edx
    0000004a: 	movapd	(%rsp), %xmm0
    0000004f: 	movq	%rax, start_time(%rip)
    00000056: 	movsd	0x18(%rsp), %xmm2
    0000005c: 	testl	%edx, %edx
    0000005e: 	movapd	%xmm0, %xmm1
    00000062: 	jle	.Ltmp945 # Offset: 98
    00000064: 	movapd	DATAat0x15db0(%rip), %xmm4
    0000006c: 	movapd	DATAat0x15dc0(%rip), %xmm3
    00000074: 	xorl	%eax, %eax
.Ltmp946:
    00000076: 	addl	$0x1, %eax
    00000079: 	addpd	%xmm4, %xmm0
    0000007d: 	addpd	%xmm3, %xmm1
    00000081: 	addsd	DATAat0x15dc0(%rip), %xmm2
    00000089: 	cmpl	%edx, %eax
    0000008b: 	jne	.Ltmp946 # Offset: 139
.Ltmp945:
    0000008d: 	pxor	%xmm3, %xmm3
    00000091: 	pxor	%xmm4, %xmm4
    00000095: 	movl	$0x1, %eax
    0000009a: 	movsd	DATAat0x15db0(%rip), %xmm5
    000000a2: 	cvtsi2sd	%edx, %xmm3
    000000a6: 	movapd	%xmm1, %xmm6
    000000aa: 	cvtsi2sdl	init_value(%rip), %xmm4
    000000b2: 	unpckhpd	%xmm6, %xmm6
    000000b6: 	mulsd	%xmm3, %xmm5
    000000ba: 	addsd	%xmm4, %xmm5
    000000be: 	ucomisd	%xmm0, %xmm5
    000000c2: 	setp	%dl
    000000c5: 	cmovnel	%eax, %edx
    000000c8: 	testb	%dl, %dl
    000000ca: 	jne	.Ltmp947 # Offset: 202
    000000cc: 	movsd	DATAat0x15db8(%rip), %xmm5
    000000d4: 	unpckhpd	%xmm0, %xmm0
    000000d8: 	mulsd	%xmm3, %xmm5
    000000dc: 	addsd	%xmm4, %xmm5
    000000e0: 	ucomisd	%xmm0, %xmm5
    000000e4: 	setp	%dl
    000000e7: 	cmovnel	%eax, %edx
    000000ea: 	testb	%dl, %dl
    000000ec: 	jne	.Ltmp947 # Offset: 236
    000000ee: 	movsd	DATAat0x15dc0(%rip), %xmm0
    000000f6: 	mulsd	%xmm3, %xmm0
    000000fa: 	mulsd	DATAat0x15dc8(%rip), %xmm3
    00000102: 	addsd	%xmm4, %xmm0
    00000106: 	addsd	%xmm4, %xmm3
    0000010a: 	ucomisd	%xmm6, %xmm3
    0000010e: 	setp	%dl
    00000111: 	cmovnel	%eax, %edx
    00000114: 	ucomisd	%xmm1, %xmm0
    00000118: 	setp	%cl
    0000011b: 	cmovnel	%eax, %ecx
    0000011e: 	orb	%cl, %dl
    00000120: 	jne	.Ltmp947 # Offset: 288
    00000122: 	ucomisd	%xmm0, %xmm2
    00000126: 	setp	%dl
    00000129: 	cmovel	%edx, %eax
    0000012c: 	testb	%al, %al
    0000012e: 	je	.Ltmp948 # Offset: 302
.Ltmp947:
    00000130: 	movq	(%rbp), %rdx
    00000134: 	leaq	DATAat0x158f3(%rip), %rsi
    0000013b: 	movl	$0x1, %edi
    00000140: 	xorl	%eax, %eax
    00000142: 	callq	__printf_chk@PLT # Offset: 322
.Ltmp948:
    00000147: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000014e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000155: 	subq	$0x20, %rax
    00000159: 	cmpq	%rax, %rbx
    0000015c: 	je	.Ltmp949 # Offset: 348
    00000162: 	leaq	0x10(%rbx), %rdi
    00000166: 	movq	0x8(%rbp), %r12
    0000016a: 	movq	%rdi, (%rbx)
    0000016d: 	movq	(%rbp), %r13
    00000171: 	movq	%r13, %rax
    00000174: 	addq	%r12, %rax
    00000177: 	je	.Ltmp950 # Offset: 375
    00000179: 	testq	%r13, %r13
    0000017c: 	je	.Ltmp951 # Offset: 380
.Ltmp950:
    00000182: 	movq	%r12, 0x20(%rsp)
    00000187: 	cmpq	$0xf, %r12
    0000018b: 	ja	.Ltmp952 # Offset: 395
    00000191: 	cmpq	$0x1, %r12
    00000195: 	jne	.Ltmp953 # Offset: 405
    0000019b: 	movzbl	(%r13), %eax
    000001a0: 	movb	%al, 0x10(%rbx)
.Ltmp956:
    000001a3: 	movq	%r12, 0x8(%rbx)
    000001a7: 	movb	$0x0, (%rdi,%r12)
    000001ac: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001b3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ba: 	addq	$0x20, %rax
    000001be: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001c5: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001cc: 	je	.Ltmp954 # Offset: 460
.Ltmp957:
    000001d2: 	movq	-0x20(%rax), %rbp
    000001d6: 	callq	clock@PLT # Offset: 470
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	movq	0x28(%rsp), %rdx
    000001e7: 	subq	%fs:0x28, %rdx
    000001f0: 	jne	.Ltmp955 # Offset: 496
    000001f6: 	subq	start_time(%rip), %rax
    000001fd: 	pxor	%xmm0, %xmm0
    00000201: 	movq	%rbp, %rdi
    00000204: 	cvtsi2sd	%rax, %xmm0
    00000209: 	divsd	DATAat0x15c60(%rip), %xmm0
    00000211: 	addq	$0x38, %rsp
    00000215: 	popq	%rbx
    00000216: 	popq	%rbp
    00000217: 	popq	%r12
    00000219: 	popq	%r13
    0000021b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 539
.Ltmp952:
    00000220: 	movq	%rbx, %rdi
    00000223: 	leaq	0x20(%rsp), %rsi
    00000228: 	xorl	%edx, %edx
    0000022a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 554
    0000022f: 	movq	%rax, (%rbx)
    00000232: 	movq	%rax, %rdi
    00000235: 	movq	0x20(%rsp), %rax
    0000023a: 	movq	%rax, 0x10(%rbx)
.Ltmp958:
    0000023e: 	movq	%r12, %rdx
    00000241: 	movq	%r13, %rsi
    00000244: 	callq	memcpy@PLT # Offset: 580
    00000249: 	movq	0x20(%rsp), %r12
    0000024e: 	movq	(%rbx), %rdi
    00000251: 	jmp	.Ltmp956 # Offset: 593
    00000256: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp949:
    00000260: 	movq	%rbp, %rsi
    00000263: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000026a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 618
    0000026f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000276: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000027d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000284: 	jne	.Ltmp957 # Offset: 644
.Ltmp954:
    0000028a: 	movq	-0x8(%rdx), %rax
    0000028e: 	addq	$0x200, %rax
    00000294: 	jmp	.Ltmp957 # Offset: 660
    00000299: 	nopl	(%rax) # Size: 7
.Ltmp953:
    000002a0: 	testq	%r12, %r12
    000002a3: 	je	.Ltmp956 # Offset: 675
    000002a9: 	jmp	.Ltmp958 # Offset: 681
.Ltmp955:
    000002ab: 	callq	__stack_chk_fail@PLT # Offset: 683
.Ltmp951:
    000002b0: 	leaq	DATAat0x15008(%rip), %rdi
    000002b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 695
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_array5_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x11f40
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0x11f40
  Section     : .text
  Orc Section : .local.text._Z18test_array5_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm3, %xmm3
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x18(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	cvtsi2sdl	init_value(%rip), %xmm3
    0000002d: 	unpcklpd	%xmm3, %xmm3
    00000031: 	movaps	%xmm3, (%rsp)
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	pxor	%xmm2, %xmm2
    0000003e: 	movapd	(%rsp), %xmm3
    00000043: 	movapd	DATAat0x15db0(%rip), %xmm0
    0000004b: 	cvtsi2sdl	iterations(%rip), %xmm2
    00000053: 	movq	%rax, start_time(%rip)
    0000005a: 	movl	$0x1, %edx
    0000005f: 	movapd	%xmm3, %xmm1
    00000063: 	unpcklpd	%xmm2, %xmm2
    00000067: 	mulpd	%xmm2, %xmm0
    0000006b: 	mulpd	DATAat0x15dc0(%rip), %xmm2
    00000073: 	movapd	%xmm0, %xmm5
    00000077: 	addpd	%xmm0, %xmm1
    0000007b: 	addpd	%xmm2, %xmm3
    0000007f: 	movapd	%xmm2, %xmm6
    00000083: 	unpckhpd	%xmm6, %xmm6
    00000087: 	movapd	%xmm3, %xmm7
    0000008b: 	movapd	%xmm3, %xmm4
    0000008f: 	pxor	%xmm3, %xmm3
    00000093: 	cvtsi2sdl	init_value(%rip), %xmm3
    0000009b: 	unpckhpd	%xmm7, %xmm7
    0000009f: 	addsd	%xmm3, %xmm5
    000000a3: 	ucomisd	%xmm1, %xmm5
    000000a7: 	setp	%al
    000000aa: 	cmovnel	%edx, %eax
    000000ad: 	testb	%al, %al
    000000af: 	jne	.Ltmp959 # Offset: 175
    000000b1: 	unpckhpd	%xmm0, %xmm0
    000000b5: 	unpckhpd	%xmm1, %xmm1
    000000b9: 	addsd	%xmm3, %xmm0
    000000bd: 	ucomisd	%xmm1, %xmm0
    000000c1: 	setp	%al
    000000c4: 	cmovnel	%edx, %eax
    000000c7: 	testb	%al, %al
    000000c9: 	jne	.Ltmp959 # Offset: 201
    000000cb: 	addsd	%xmm3, %xmm2
    000000cf: 	ucomisd	%xmm4, %xmm2
    000000d3: 	setp	%al
    000000d6: 	cmovnel	%edx, %eax
    000000d9: 	testb	%al, %al
    000000db: 	jne	.Ltmp959 # Offset: 219
    000000dd: 	addsd	%xmm6, %xmm3
    000000e1: 	ucomisd	%xmm7, %xmm3
    000000e5: 	setp	%al
    000000e8: 	cmovnel	%edx, %eax
    000000eb: 	testb	%al, %al
    000000ed: 	je	.Ltmp960 # Offset: 237
    000000ef: 	nop # Size: 1
.Ltmp959:
    000000f0: 	movq	(%rbp), %rdx
    000000f4: 	leaq	DATAat0x158f3(%rip), %rsi
    000000fb: 	movl	$0x1, %edi
    00000100: 	xorl	%eax, %eax
    00000102: 	callq	__printf_chk@PLT # Offset: 258
.Ltmp960:
    00000107: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000010e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000115: 	subq	$0x20, %rax
    00000119: 	cmpq	%rax, %rbx
    0000011c: 	je	.Ltmp961 # Offset: 284
    00000122: 	leaq	0x10(%rbx), %rdi
    00000126: 	movq	0x8(%rbp), %r12
    0000012a: 	movq	%rdi, (%rbx)
    0000012d: 	movq	(%rbp), %r13
    00000131: 	movq	%r13, %rax
    00000134: 	addq	%r12, %rax
    00000137: 	je	.Ltmp962 # Offset: 311
    00000139: 	testq	%r13, %r13
    0000013c: 	je	.Ltmp963 # Offset: 316
.Ltmp962:
    00000142: 	movq	%r12, 0x10(%rsp)
    00000147: 	cmpq	$0xf, %r12
    0000014b: 	ja	.Ltmp964 # Offset: 331
    00000151: 	cmpq	$0x1, %r12
    00000155: 	jne	.Ltmp965 # Offset: 341
    0000015b: 	movzbl	(%r13), %eax
    00000160: 	movb	%al, 0x10(%rbx)
.Ltmp968:
    00000163: 	movq	%r12, 0x8(%rbx)
    00000167: 	movb	$0x0, (%rdi,%r12)
    0000016c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000173: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000017a: 	addq	$0x20, %rax
    0000017e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000185: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000018c: 	je	.Ltmp966 # Offset: 396
.Ltmp969:
    00000192: 	movq	-0x20(%rax), %rbp
    00000196: 	callq	clock@PLT # Offset: 406
    0000019b: 	movq	%rax, end_time(%rip)
    000001a2: 	movq	0x18(%rsp), %rdx
    000001a7: 	subq	%fs:0x28, %rdx
    000001b0: 	jne	.Ltmp967 # Offset: 432
    000001b6: 	subq	start_time(%rip), %rax
    000001bd: 	pxor	%xmm0, %xmm0
    000001c1: 	movq	%rbp, %rdi
    000001c4: 	cvtsi2sd	%rax, %xmm0
    000001c9: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001d1: 	addq	$0x28, %rsp
    000001d5: 	popq	%rbx
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 475
.Ltmp964:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	leaq	0x10(%rsp), %rsi
    000001e8: 	xorl	%edx, %edx
    000001ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 490
    000001ef: 	movq	%rax, (%rbx)
    000001f2: 	movq	%rax, %rdi
    000001f5: 	movq	0x10(%rsp), %rax
    000001fa: 	movq	%rax, 0x10(%rbx)
.Ltmp970:
    000001fe: 	movq	%r12, %rdx
    00000201: 	movq	%r13, %rsi
    00000204: 	callq	memcpy@PLT # Offset: 516
    00000209: 	movq	0x10(%rsp), %r12
    0000020e: 	movq	(%rbx), %rdi
    00000211: 	jmp	.Ltmp968 # Offset: 529
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp961:
    00000220: 	movq	%rbp, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp969 # Offset: 580
.Ltmp966:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp969 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp965:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp968 # Offset: 611
    00000269: 	jmp	.Ltmp970 # Offset: 617
.Ltmp967:
    0000026b: 	callq	__stack_chk_fail@PLT # Offset: 619
.Ltmp963:
    00000270: 	leaq	DATAat0x15008(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x121c0
  Size        : 0xb96
  MaxSize     : 0xba0
  Offset      : 0x121c0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x15c3a(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x108, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0xf8(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0x60(%rsp), %rbp
    00000034: 	movq	%rbp, %rdi
    00000037: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 55
    0000003c: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm2
    00000044: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000004b: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm5
    00000053: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r15
    0000005a: 	movhlps	%xmm2, %xmm7
    0000005d: 	movq	%rax, 0x28(%rsp)
    00000062: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000069: 	movq	%xmm7, %rcx
    0000006e: 	movaps	%xmm5, 0x30(%rsp)
    00000073: 	movq	%xmm5, %r12
    00000078: 	leaq	0x8(%rcx), %r13
    0000007c: 	movq	%rax, 0x10(%rsp)
    00000081: 	movaps	%xmm2, 0x40(%rsp)
    00000086: 	movq	%xmm7, 0x58(%rsp)
    0000008c: 	movq	%xmm2, 0x50(%rsp)
    00000092: 	cmpq	%r13, %rax
    00000095: 	jbe	.Ltmp971 # Offset: 149
    00000097: 	movq	%r13, (%rsp)
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp974:
    000000a0: 	movq	(%rsp), %rax
    000000a4: 	movq	(%rax), %r14
    000000a7: 	leaq	0x200(%r14), %rbx
    000000ae: 	nop # Size: 2
.Ltmp973:
    000000b0: 	movq	(%r14), %rdi
    000000b3: 	leaq	0x10(%r14), %rdx
    000000b7: 	cmpq	%rdx, %rdi
    000000ba: 	je	.Ltmp972 # Offset: 186
    000000c0: 	movq	0x10(%r14), %rax
    000000c4: 	addq	$0x20, %r14
    000000c8: 	leaq	0x1(%rax), %rsi
    000000cc: 	callq	_ZdlPvm@PLT # Offset: 204
    000000d1: 	cmpq	%rbx, %r14
    000000d4: 	jne	.Ltmp973 # Offset: 212
    000000d6: 	addq	$0x8, (%rsp)
    000000db: 	movq	(%rsp), %rax
    000000df: 	cmpq	%rax, 0x10(%rsp)
    000000e4: 	ja	.Ltmp974 # Offset: 228
.Ltmp971:
    000000e6: 	movq	0x58(%rsp), %rcx
    000000eb: 	cmpq	%rcx, 0x10(%rsp)
    000000f0: 	je	.Ltmp975 # Offset: 240
.Ltmp1008:
    000000f6: 	cmpq	0x50(%rsp), %r12
    000000fb: 	je	.Ltmp976 # Offset: 251
.Ltmp978:
    000000fd: 	movq	(%r12), %rdi
    00000101: 	leaq	0x10(%r12), %rax
    00000106: 	cmpq	%rax, %rdi
    00000109: 	je	.Ltmp977 # Offset: 265
    0000010f: 	movq	0x10(%r12), %rax
    00000114: 	addq	$0x20, %r12
    00000118: 	leaq	0x1(%rax), %rsi
    0000011c: 	callq	_ZdlPvm@PLT # Offset: 284
    00000121: 	cmpq	0x50(%rsp), %r12
    00000126: 	jne	.Ltmp978 # Offset: 294
.Ltmp976:
    00000128: 	cmpq	%r15, 0x28(%rsp)
    0000012d: 	je	.Ltmp979 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp981:
    00000130: 	movq	(%r15), %rdi
    00000133: 	leaq	0x10(%r15), %rax
    00000137: 	cmpq	%rax, %rdi
    0000013a: 	je	.Ltmp980 # Offset: 314
    00000140: 	movq	0x10(%r15), %rax
    00000144: 	addq	$0x20, %r15
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
    00000151: 	cmpq	%r15, 0x28(%rsp)
    00000156: 	jne	.Ltmp981 # Offset: 342
.Ltmp979:
    00000158: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000015f: 	leaq	0x8(%rax), %rbx
    00000163: 	cmpq	%r13, %rbx
    00000166: 	jbe	.Ltmp982 # Offset: 358
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp983:
    00000170: 	movq	(%r13), %rdi
    00000174: 	movl	$0x200, %esi
    00000179: 	addq	$0x8, %r13
    0000017d: 	callq	_ZdlPvm@PLT # Offset: 381
    00000182: 	cmpq	%r13, %rbx
    00000185: 	ja	.Ltmp983 # Offset: 389
.Ltmp982:
    00000187: 	pxor	%xmm3, %xmm3
    0000018b: 	movdqa	0x30(%rsp), %xmm2
    00000191: 	movdqa	0x40(%rsp), %xmm5
    00000197: 	leaq	0x80(%rsp), %r12
    0000019f: 	cvtsi2sdl	init_value(%rip), %xmm3
    000001a7: 	leaq	DATAat0x15940(%rip), %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	movq	%r12, %rdi
    000001b4: 	movaps	%xmm2, _Z7gLabelsB5cxx11+48(%rip)
    000001bb: 	movaps	%xmm5, _Z7gLabelsB5cxx11+64(%rip)
    000001c2: 	movapd	%xmm3, %xmm6
    000001c6: 	movsd	%xmm3, (%rsp)
    000001cb: 	movsd	%xmm3, 0xf0(%rsp)
    000001d4: 	unpcklpd	%xmm6, %xmm6
    000001d8: 	movaps	%xmm6, 0xa0(%rsp)
    000001e0: 	movaps	%xmm6, 0xb0(%rsp)
    000001e8: 	movaps	%xmm6, 0xc0(%rsp)
    000001f0: 	movaps	%xmm6, 0xd0(%rsp)
    000001f8: 	movaps	%xmm6, 0x10(%rsp)
    000001fd: 	movaps	%xmm6, 0xe0(%rsp)
    00000205: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 517
    0000020a: 	callq	clock@PLT # Offset: 522
    0000020f: 	pxor	%xmm1, %xmm1
    00000213: 	movq	%r12, %rsi
    00000216: 	movapd	DATAat0x15db0(%rip), %xmm2
    0000021e: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000226: 	movapd	0x10(%rsp), %xmm7
    0000022c: 	leaq	0xa0(%rsp), %r13
    00000234: 	movq	%rax, start_time(%rip)
    0000023b: 	movq	%r13, %rdi
    0000023e: 	movapd	%xmm1, %xmm0
    00000242: 	mulsd	DATAat0x15c70(%rip), %xmm1
    0000024a: 	unpcklpd	%xmm0, %xmm0
    0000024e: 	mulpd	%xmm0, %xmm2
    00000252: 	addsd	(%rsp), %xmm1
    00000257: 	movsd	%xmm1, 0xf0(%rsp)
    00000260: 	addpd	%xmm7, %xmm2
    00000264: 	movaps	%xmm2, 0xa0(%rsp)
    0000026c: 	movapd	DATAat0x15dc0(%rip), %xmm2
    00000274: 	mulpd	%xmm0, %xmm2
    00000278: 	addpd	%xmm7, %xmm2
    0000027c: 	movaps	%xmm2, 0xb0(%rsp)
    00000284: 	movapd	DATAat0x15dd0(%rip), %xmm2
    0000028c: 	mulpd	%xmm0, %xmm2
    00000290: 	addpd	%xmm7, %xmm2
    00000294: 	movaps	%xmm2, 0xc0(%rsp)
    0000029c: 	movapd	DATAat0x15de0(%rip), %xmm2
    000002a4: 	mulpd	%xmm0, %xmm2
    000002a8: 	mulpd	DATAat0x15df0(%rip), %xmm0
    000002b0: 	addpd	%xmm7, %xmm2
    000002b4: 	addpd	%xmm7, %xmm0
    000002b8: 	movaps	%xmm2, 0xd0(%rsp)
    000002c0: 	movaps	%xmm0, 0xe0(%rsp)
    000002c8: 	callq	_Z12check11_sumsIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 712
    000002cd: 	movq	%r12, %rdi
    000002d0: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 720
    000002d5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002dc: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002e3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ea: 	je	.Ltmp984 # Offset: 746
.Ltmp1009:
    000002f0: 	movq	-0x20(%rax), %r14
    000002f4: 	callq	clock@PLT # Offset: 756
    000002f9: 	pxor	%xmm0, %xmm0
    000002fd: 	movq	%rax, end_time(%rip)
    00000304: 	movq	%r14, %rdi
    00000307: 	subq	start_time(%rip), %rax
    0000030e: 	cvtsi2sd	%rax, %xmm0
    00000313: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000031b: 	callq	_Z13record_resultdPKc # Offset: 795
    00000320: 	movq	0x80(%rsp), %rdi
    00000328: 	leaq	0x90(%rsp), %rbx
    00000330: 	cmpq	%rbx, %rdi
    00000333: 	je	.Ltmp985 # Offset: 819
    00000335: 	movq	0x90(%rsp), %rax
    0000033d: 	leaq	0x1(%rax), %rsi
    00000341: 	callq	_ZdlPvm@PLT # Offset: 833
.Ltmp985:
    00000346: 	pxor	%xmm1, %xmm1
    0000034a: 	leaq	DATAat0x15970(%rip), %rdx
    00000351: 	movq	%rbp, %rsi
    00000354: 	movq	%r12, %rdi
    00000357: 	cvtsi2sdl	init_value(%rip), %xmm1
    0000035f: 	movsd	%xmm1, 0xf0(%rsp)
    00000368: 	movapd	%xmm1, %xmm0
    0000036c: 	unpcklpd	%xmm0, %xmm0
    00000370: 	movaps	%xmm0, 0xa0(%rsp)
    00000378: 	movaps	%xmm0, 0xb0(%rsp)
    00000380: 	movaps	%xmm0, 0xc0(%rsp)
    00000388: 	movaps	%xmm0, 0xd0(%rsp)
    00000390: 	movaps	%xmm0, 0xe0(%rsp)
    00000398: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 920
    0000039d: 	movq	%r12, %rsi
    000003a0: 	movq	%r13, %rdi
    000003a3: 	callq	_Z17test_array11_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 931
    000003a8: 	movq	0x80(%rsp), %rdi
    000003b0: 	cmpq	%rbx, %rdi
    000003b3: 	je	.Ltmp986 # Offset: 947
    000003b5: 	movq	0x90(%rsp), %rax
    000003bd: 	leaq	0x1(%rax), %rsi
    000003c1: 	callq	_ZdlPvm@PLT # Offset: 961
.Ltmp986:
    000003c6: 	pxor	%xmm1, %xmm1
    000003ca: 	leaq	DATAat0x159a0(%rip), %rdx
    000003d1: 	movq	%rbp, %rsi
    000003d4: 	movq	%r12, %rdi
    000003d7: 	cvtsi2sdl	init_value(%rip), %xmm1
    000003df: 	movsd	%xmm1, 0xf0(%rsp)
    000003e8: 	movapd	%xmm1, %xmm0
    000003ec: 	unpcklpd	%xmm0, %xmm0
    000003f0: 	movaps	%xmm0, 0xa0(%rsp)
    000003f8: 	movaps	%xmm0, 0xb0(%rsp)
    00000400: 	movaps	%xmm0, 0xc0(%rsp)
    00000408: 	movaps	%xmm0, 0xd0(%rsp)
    00000410: 	movaps	%xmm0, 0xe0(%rsp)
    00000418: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1048
    0000041d: 	movq	%r12, %rsi
    00000420: 	movq	%r13, %rdi
    00000423: 	callq	_Z17test_array11_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1059
    00000428: 	movq	0x80(%rsp), %rdi
    00000430: 	cmpq	%rbx, %rdi
    00000433: 	je	.Ltmp987 # Offset: 1075
    00000435: 	movq	0x90(%rsp), %rax
    0000043d: 	leaq	0x1(%rax), %rsi
    00000441: 	callq	_ZdlPvm@PLT # Offset: 1089
.Ltmp987:
    00000446: 	pxor	%xmm1, %xmm1
    0000044a: 	leaq	DATAat0x159d0(%rip), %rdx
    00000451: 	movq	%rbp, %rsi
    00000454: 	movq	%r12, %rdi
    00000457: 	cvtsi2sdl	init_value(%rip), %xmm1
    0000045f: 	movsd	%xmm1, 0xf0(%rsp)
    00000468: 	movapd	%xmm1, %xmm0
    0000046c: 	unpcklpd	%xmm0, %xmm0
    00000470: 	movaps	%xmm0, 0xa0(%rsp)
    00000478: 	movaps	%xmm0, 0xb0(%rsp)
    00000480: 	movaps	%xmm0, 0xc0(%rsp)
    00000488: 	movaps	%xmm0, 0xd0(%rsp)
    00000490: 	movaps	%xmm0, 0xe0(%rsp)
    00000498: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1176
    0000049d: 	movq	%r12, %rsi
    000004a0: 	movq	%r13, %rdi
    000004a3: 	callq	_Z16test_array11_argIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1187
    000004a8: 	movq	0x80(%rsp), %rdi
    000004b0: 	cmpq	%rbx, %rdi
    000004b3: 	je	.Ltmp988 # Offset: 1203
    000004b5: 	movq	0x90(%rsp), %rax
    000004bd: 	leaq	0x1(%rax), %rsi
    000004c1: 	callq	_ZdlPvm@PLT # Offset: 1217
.Ltmp988:
    000004c6: 	pxor	%xmm0, %xmm0
    000004ca: 	leaq	DATAat0x159f8(%rip), %rdx
    000004d1: 	movq	%rbp, %rsi
    000004d4: 	movq	%r12, %rdi
    000004d7: 	cvtsi2sdl	init_value(%rip), %xmm0
    000004df: 	movsd	%xmm0, 0xf0(%rsp)
    000004e8: 	movapd	%xmm0, %xmm4
    000004ec: 	unpcklpd	%xmm4, %xmm4
    000004f0: 	movaps	%xmm4, 0xa0(%rsp)
    000004f8: 	movaps	%xmm4, 0xb0(%rsp)
    00000500: 	movaps	%xmm4, 0xc0(%rsp)
    00000508: 	movaps	%xmm4, 0xd0(%rsp)
    00000510: 	movaps	%xmm4, (%rsp)
    00000514: 	movaps	%xmm4, 0xe0(%rsp)
    0000051c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1308
    00000521: 	callq	clock@PLT # Offset: 1313
    00000526: 	pxor	%xmm1, %xmm1
    0000052a: 	pxor	%xmm0, %xmm0
    0000052e: 	movapd	DATAat0x15db0(%rip), %xmm2
    00000536: 	cvtsi2sdl	iterations(%rip), %xmm1
    0000053e: 	movapd	(%rsp), %xmm5
    00000543: 	movq	%rax, start_time(%rip)
    0000054a: 	movl	$0x1, %edx
    0000054f: 	cvtsi2sdl	init_value(%rip), %xmm0
    00000557: 	movapd	%xmm5, %xmm3
    0000055b: 	unpcklpd	%xmm1, %xmm1
    0000055f: 	mulpd	%xmm1, %xmm2
    00000563: 	mulpd	DATAat0x15dc0(%rip), %xmm1
    0000056b: 	movapd	%xmm2, %xmm4
    0000056f: 	addpd	%xmm2, %xmm3
    00000573: 	addsd	%xmm0, %xmm4
    00000577: 	addpd	%xmm1, %xmm5
    0000057b: 	movapd	%xmm1, %xmm6
    0000057f: 	unpckhpd	%xmm6, %xmm6
    00000583: 	movapd	%xmm6, %xmm8
    00000588: 	movaps	%xmm3, 0xa0(%rsp)
    00000590: 	ucomisd	%xmm3, %xmm4
    00000594: 	movapd	%xmm5, %xmm7
    00000598: 	movaps	%xmm5, 0xb0(%rsp)
    000005a0: 	movsd	%xmm5, 0xc0(%rsp)
    000005a9: 	unpckhpd	%xmm7, %xmm7
    000005ad: 	setp	%al
    000005b0: 	cmovnel	%edx, %eax
    000005b3: 	testb	%al, %al
    000005b5: 	jne	.Ltmp989 # Offset: 1461
    000005b7: 	unpckhpd	%xmm2, %xmm2
    000005bb: 	unpckhpd	%xmm3, %xmm3
    000005bf: 	addsd	%xmm0, %xmm2
    000005c3: 	ucomisd	%xmm3, %xmm2
    000005c7: 	setp	%al
    000005ca: 	cmovnel	%edx, %eax
    000005cd: 	testb	%al, %al
    000005cf: 	jne	.Ltmp989 # Offset: 1487
    000005d1: 	addsd	%xmm0, %xmm1
    000005d5: 	ucomisd	%xmm5, %xmm1
    000005d9: 	setp	%al
    000005dc: 	cmovnel	%edx, %eax
    000005df: 	testb	%al, %al
    000005e1: 	jne	.Ltmp989 # Offset: 1505
    000005e3: 	addsd	%xmm8, %xmm0
    000005e8: 	ucomisd	%xmm7, %xmm0
    000005ec: 	setp	%al
    000005ef: 	cmovnel	%edx, %eax
    000005f2: 	testb	%al, %al
    000005f4: 	je	.Ltmp990 # Offset: 1524
.Ltmp989:
    000005f6: 	movq	0x80(%rsp), %rdx
    000005fe: 	leaq	DATAat0x158f3(%rip), %rsi
    00000605: 	movl	$0x1, %edi
    0000060a: 	xorl	%eax, %eax
    0000060c: 	callq	__printf_chk@PLT # Offset: 1548
.Ltmp990:
    00000611: 	movq	%r12, %rdi
    00000614: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1556
    00000619: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000620: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000627: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000062e: 	je	.Ltmp991 # Offset: 1582
.Ltmp1010:
    00000634: 	movq	-0x20(%rax), %r14
    00000638: 	callq	clock@PLT # Offset: 1592
    0000063d: 	pxor	%xmm0, %xmm0
    00000641: 	movq	%rax, end_time(%rip)
    00000648: 	movq	%r14, %rdi
    0000064b: 	subq	start_time(%rip), %rax
    00000652: 	cvtsi2sd	%rax, %xmm0
    00000657: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000065f: 	callq	_Z13record_resultdPKc # Offset: 1631
    00000664: 	movq	0x80(%rsp), %rdi
    0000066c: 	cmpq	%rbx, %rdi
    0000066f: 	je	.Ltmp992 # Offset: 1647
    00000671: 	movq	0x90(%rsp), %rax
    00000679: 	leaq	0x1(%rax), %rsi
    0000067d: 	callq	_ZdlPvm@PLT # Offset: 1661
.Ltmp992:
    00000682: 	pxor	%xmm1, %xmm1
    00000686: 	leaq	DATAat0x15a30(%rip), %rdx
    0000068d: 	movq	%rbp, %rsi
    00000690: 	movq	%r12, %rdi
    00000693: 	cvtsi2sdl	init_value(%rip), %xmm1
    0000069b: 	movsd	%xmm1, 0xf0(%rsp)
    000006a4: 	movapd	%xmm1, %xmm0
    000006a8: 	unpcklpd	%xmm0, %xmm0
    000006ac: 	movaps	%xmm0, 0xa0(%rsp)
    000006b4: 	movaps	%xmm0, 0xb0(%rsp)
    000006bc: 	movaps	%xmm0, 0xc0(%rsp)
    000006c4: 	movaps	%xmm0, 0xd0(%rsp)
    000006cc: 	movaps	%xmm0, 0xe0(%rsp)
    000006d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1748
    000006d9: 	movq	%r12, %rsi
    000006dc: 	movq	%r13, %rdi
    000006df: 	callq	_Z16test_array5_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1759
    000006e4: 	movq	0x80(%rsp), %rdi
    000006ec: 	cmpq	%rbx, %rdi
    000006ef: 	je	.Ltmp993 # Offset: 1775
    000006f1: 	movq	0x90(%rsp), %rax
    000006f9: 	leaq	0x1(%rax), %rsi
    000006fd: 	callq	_ZdlPvm@PLT # Offset: 1789
.Ltmp993:
    00000702: 	pxor	%xmm1, %xmm1
    00000706: 	leaq	DATAat0x15a68(%rip), %rdx
    0000070d: 	movq	%rbp, %rsi
    00000710: 	movq	%r12, %rdi
    00000713: 	cvtsi2sdl	init_value(%rip), %xmm1
    0000071b: 	movsd	%xmm1, 0xf0(%rsp)
    00000724: 	movapd	%xmm1, %xmm0
    00000728: 	unpcklpd	%xmm0, %xmm0
    0000072c: 	movaps	%xmm0, 0xa0(%rsp)
    00000734: 	movaps	%xmm0, 0xb0(%rsp)
    0000073c: 	movaps	%xmm0, 0xc0(%rsp)
    00000744: 	movaps	%xmm0, 0xd0(%rsp)
    0000074c: 	movaps	%xmm0, 0xe0(%rsp)
    00000754: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1876
    00000759: 	movq	%r12, %rsi
    0000075c: 	movq	%r13, %rdi
    0000075f: 	callq	_Z16test_array5_arg1IdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1887
    00000764: 	movq	0x80(%rsp), %rdi
    0000076c: 	cmpq	%rbx, %rdi
    0000076f: 	je	.Ltmp994 # Offset: 1903
    00000771: 	movq	0x90(%rsp), %rax
    00000779: 	leaq	0x1(%rax), %rsi
    0000077d: 	callq	_ZdlPvm@PLT # Offset: 1917
.Ltmp994:
    00000782: 	pxor	%xmm1, %xmm1
    00000786: 	leaq	DATAat0x15aa0(%rip), %rdx
    0000078d: 	movq	%rbp, %rsi
    00000790: 	movq	%r12, %rdi
    00000793: 	cvtsi2sdl	init_value(%rip), %xmm1
    0000079b: 	movsd	%xmm1, 0xf0(%rsp)
    000007a4: 	movapd	%xmm1, %xmm0
    000007a8: 	unpcklpd	%xmm0, %xmm0
    000007ac: 	movaps	%xmm0, 0xa0(%rsp)
    000007b4: 	movaps	%xmm0, 0xb0(%rsp)
    000007bc: 	movaps	%xmm0, 0xc0(%rsp)
    000007c4: 	movaps	%xmm0, 0xd0(%rsp)
    000007cc: 	movaps	%xmm0, 0xe0(%rsp)
    000007d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2004
    000007d9: 	movq	%r12, %rsi
    000007dc: 	movq	%r13, %rdi
    000007df: 	callq	_Z15test_array5_argIdEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2015
    000007e4: 	movq	0x80(%rsp), %rdi
    000007ec: 	cmpq	%rbx, %rdi
    000007ef: 	je	.Ltmp995 # Offset: 2031
    000007f1: 	movq	0x90(%rsp), %rax
    000007f9: 	leaq	0x1(%rax), %rsi
    000007fd: 	callq	_ZdlPvm@PLT # Offset: 2045
.Ltmp995:
    00000802: 	leaq	DATAat0x15ad0(%rip), %rdx
    00000809: 	movq	%rbp, %rsi
    0000080c: 	movq	%r12, %rdi
    0000080f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2063
    00000814: 	movq	%r12, %rdi
    00000817: 	callq	_Z19test_array11_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2071
    0000081c: 	movq	0x80(%rsp), %rdi
    00000824: 	cmpq	%rbx, %rdi
    00000827: 	je	.Ltmp996 # Offset: 2087
    00000829: 	movq	0x90(%rsp), %rax
    00000831: 	leaq	0x1(%rax), %rsi
    00000835: 	callq	_ZdlPvm@PLT # Offset: 2101
.Ltmp996:
    0000083a: 	leaq	DATAat0x15af8(%rip), %rdx
    00000841: 	movq	%rbp, %rsi
    00000844: 	movq	%r12, %rdi
    00000847: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2119
    0000084c: 	movq	%r12, %rdi
    0000084f: 	callq	_Z19test_array11_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2127
    00000854: 	movq	0x80(%rsp), %rdi
    0000085c: 	cmpq	%rbx, %rdi
    0000085f: 	je	.Ltmp997 # Offset: 2143
    00000861: 	movq	0x90(%rsp), %rax
    00000869: 	leaq	0x1(%rax), %rsi
    0000086d: 	callq	_ZdlPvm@PLT # Offset: 2157
.Ltmp997:
    00000872: 	leaq	DATAat0x15b28(%rip), %rdx
    00000879: 	movq	%rbp, %rsi
    0000087c: 	movq	%r12, %rdi
    0000087f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2175
    00000884: 	movq	%r12, %rdi
    00000887: 	callq	_Z19test_array11_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2183
    0000088c: 	movq	0x80(%rsp), %rdi
    00000894: 	cmpq	%rbx, %rdi
    00000897: 	je	.Ltmp998 # Offset: 2199
    00000899: 	movq	0x90(%rsp), %rax
    000008a1: 	leaq	0x1(%rax), %rsi
    000008a5: 	callq	_ZdlPvm@PLT # Offset: 2213
.Ltmp998:
    000008aa: 	leaq	DATAat0x15b58(%rip), %rdx
    000008b1: 	movq	%rbp, %rsi
    000008b4: 	movq	%r12, %rdi
    000008b7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2231
    000008bc: 	movq	%r12, %rdi
    000008bf: 	callq	_Z18test_array11_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2239
    000008c4: 	movq	0x80(%rsp), %rdi
    000008cc: 	cmpq	%rbx, %rdi
    000008cf: 	je	.Ltmp999 # Offset: 2255
    000008d1: 	movq	0x90(%rsp), %rax
    000008d9: 	leaq	0x1(%rax), %rsi
    000008dd: 	callq	_ZdlPvm@PLT # Offset: 2269
.Ltmp999:
    000008e2: 	leaq	DATAat0x15b80(%rip), %rdx
    000008e9: 	movq	%rbp, %rsi
    000008ec: 	movq	%r12, %rdi
    000008ef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2287
    000008f4: 	movq	%r12, %rdi
    000008f7: 	callq	_Z18test_array5_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2295
    000008fc: 	movq	0x80(%rsp), %rdi
    00000904: 	cmpq	%rbx, %rdi
    00000907: 	je	.Ltmp1000 # Offset: 2311
    00000909: 	movq	0x90(%rsp), %rax
    00000911: 	leaq	0x1(%rax), %rsi
    00000915: 	callq	_ZdlPvm@PLT # Offset: 2325
.Ltmp1000:
    0000091a: 	leaq	DATAat0x15bb0(%rip), %rdx
    00000921: 	movq	%rbp, %rsi
    00000924: 	movq	%r12, %rdi
    00000927: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2343
    0000092c: 	movq	%r12, %rdi
    0000092f: 	callq	_Z18test_array5_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2351
    00000934: 	movq	0x80(%rsp), %rdi
    0000093c: 	cmpq	%rbx, %rdi
    0000093f: 	je	.Ltmp1001 # Offset: 2367
    00000941: 	movq	0x90(%rsp), %rax
    00000949: 	leaq	0x1(%rax), %rsi
    0000094d: 	callq	_ZdlPvm@PLT # Offset: 2381
.Ltmp1001:
    00000952: 	leaq	DATAat0x15be0(%rip), %rdx
    00000959: 	movq	%rbp, %rsi
    0000095c: 	movq	%r12, %rdi
    0000095f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2399
    00000964: 	movq	%r12, %rdi
    00000967: 	callq	_Z18test_array5_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2407
    0000096c: 	movq	0x80(%rsp), %rdi
    00000974: 	cmpq	%rbx, %rdi
    00000977: 	je	.Ltmp1002 # Offset: 2423
    00000979: 	movq	0x90(%rsp), %rax
    00000981: 	leaq	0x1(%rax), %rsi
    00000985: 	callq	_ZdlPvm@PLT # Offset: 2437
.Ltmp1002:
    0000098a: 	leaq	DATAat0x15c10(%rip), %rdx
    00000991: 	movq	%rbp, %rsi
    00000994: 	movq	%r12, %rdi
    00000997: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2455
    0000099c: 	movq	%r12, %rdi
    0000099f: 	callq	_Z17test_array5_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2463
    000009a4: 	movq	0x80(%rsp), %rdi
    000009ac: 	cmpq	%rbx, %rdi
    000009af: 	je	.Ltmp1003 # Offset: 2479
    000009b1: 	movq	0x90(%rsp), %rax
    000009b9: 	leaq	0x1(%rax), %rsi
    000009bd: 	callq	_ZdlPvm@PLT # Offset: 2493
.Ltmp1003:
    000009c2: 	movq	0x60(%rsp), %rdi
    000009c7: 	leaq	0x70(%rsp), %rax
    000009cc: 	cmpq	%rax, %rdi
    000009cf: 	je	.Ltmp1004 # Offset: 2511
    000009d1: 	movq	0x70(%rsp), %rax
    000009d6: 	leaq	0x1(%rax), %rsi
    000009da: 	callq	_ZdlPvm@PLT # Offset: 2522
.Ltmp1004:
    000009df: 	movq	0xf8(%rsp), %rax
    000009e7: 	subq	%fs:0x28, %rax
    000009f0: 	jne	.Ltmp1005 # Offset: 2544
    000009f6: 	addq	$0x108, %rsp
    000009fd: 	popq	%rbx
    000009fe: 	popq	%rbp
    000009ff: 	popq	%r12
    00000a01: 	popq	%r13
    00000a03: 	popq	%r14
    00000a05: 	popq	%r15
    00000a07: 	retq # Offset: 2567
    00000a08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1006:
    00000a10: 	addq	$0x20, %r12
.Ltmp975:
    00000a14: 	cmpq	%r12, 0x28(%rsp)
    00000a19: 	je	.Ltmp979 # Offset: 2585
.Ltmp1007:
    00000a1f: 	movq	(%r12), %rdi
    00000a23: 	leaq	0x10(%r12), %rax
    00000a28: 	cmpq	%rax, %rdi
    00000a2b: 	je	.Ltmp1006 # Offset: 2603
    00000a2d: 	movq	0x10(%r12), %rax
    00000a32: 	addq	$0x20, %r12
    00000a36: 	leaq	0x1(%rax), %rsi
    00000a3a: 	callq	_ZdlPvm@PLT # Offset: 2618
    00000a3f: 	cmpq	%r12, 0x28(%rsp)
    00000a44: 	jne	.Ltmp1007 # Offset: 2628
    00000a46: 	jmp	.Ltmp979 # Offset: 2630
    00000a4b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp972:
    00000a50: 	addq	$0x20, %r14
    00000a54: 	cmpq	%rbx, %r14
    00000a57: 	jne	.Ltmp973 # Offset: 2647
    00000a5d: 	addq	$0x8, (%rsp)
    00000a62: 	movq	(%rsp), %rax
    00000a66: 	cmpq	%rax, 0x10(%rsp)
    00000a6b: 	ja	.Ltmp974 # Offset: 2667
    00000a71: 	jmp	.Ltmp971 # Offset: 2673
    00000a76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp977:
    00000a80: 	addq	$0x20, %r12
    00000a84: 	jmp	.Ltmp1008 # Offset: 2692
    00000a89: 	nopl	(%rax) # Size: 7
.Ltmp980:
    00000a90: 	addq	$0x20, %r15
    00000a94: 	cmpq	%r15, 0x28(%rsp)
    00000a99: 	jne	.Ltmp981 # Offset: 2713
    00000a9f: 	jmp	.Ltmp979 # Offset: 2719
.Ltmp984:
    00000aa4: 	movq	-0x8(%rdx), %rax
    00000aa8: 	addq	$0x200, %rax
    00000aae: 	jmp	.Ltmp1009 # Offset: 2734
.Ltmp991:
    00000ab3: 	movq	-0x8(%rdx), %rax
    00000ab7: 	addq	$0x200, %rax
    00000abd: 	jmp	.Ltmp1010 # Offset: 2749
.Ltmp1005:
    00000ac2: 	callq	__stack_chk_fail@PLT # Offset: 2754
    00000ac7: 	endbr64
.Ltmp1012:
    00000acb: 	movq	%rax, %rbp
    00000ace: 	jmp	.Ltmp1011 # Offset: 2766
    00000ad3: 	endbr64
    00000ad7: 	jmp	.Ltmp1012 # Offset: 2775
    00000ad9: 	endbr64
    00000add: 	jmp	.Ltmp1012 # Offset: 2781
    00000adf: 	endbr64
    00000ae3: 	jmp	.Ltmp1012 # Offset: 2787
    00000ae5: 	endbr64
    00000ae9: 	jmp	.Ltmp1012 # Offset: 2793
    00000aeb: 	endbr64
    00000aef: 	jmp	.Ltmp1012 # Offset: 2799
    00000af1: 	endbr64
    00000af5: 	jmp	.Ltmp1012 # Offset: 2805
    00000af7: 	endbr64
    00000afb: 	jmp	.Ltmp1012 # Offset: 2811
    00000afd: 	endbr64
    00000b01: 	jmp	.Ltmp1012 # Offset: 2817
    00000b03: 	endbr64
    00000b07: 	jmp	.Ltmp1012 # Offset: 2823
    00000b09: 	endbr64
    00000b0d: 	jmp	.Ltmp1012 # Offset: 2829
    00000b0f: 	endbr64
    00000b13: 	jmp	.Ltmp1012 # Offset: 2835
    00000b15: 	endbr64
    00000b19: 	jmp	.Ltmp1012 # Offset: 2841
    00000b1b: 	endbr64
    00000b1f: 	jmp	.Ltmp1012 # Offset: 2847
    00000b21: 	endbr64
    00000b25: 	movq	%rax, %rbp
    00000b28: 	jmp	.Ltmp1013 # Offset: 2856
    00000b2a: 	endbr64
    00000b2e: 	movq	%rax, %rbp
    00000b31: 	jmp	.Ltmp1014 # Offset: 2865
.Ltmp1013:
    00000b33: 	movq	0x80(%rsp), %rdi
    00000b3b: 	leaq	0x90(%rsp), %rax
    00000b43: 	cmpq	%rax, %rdi
    00000b46: 	je	.Ltmp1014 # Offset: 2886
.Ltmp1016:
    00000b48: 	movq	0x90(%rsp), %rax
    00000b50: 	leaq	0x1(%rax), %rsi
    00000b54: 	callq	_ZdlPvm@PLT # Offset: 2900
.Ltmp1014:
    00000b59: 	movq	0x60(%rsp), %rdi
    00000b5e: 	leaq	0x70(%rsp), %rax
    00000b63: 	cmpq	%rax, %rdi
    00000b66: 	je	.Ltmp1015 # Offset: 2918
    00000b68: 	movq	0x70(%rsp), %rax
    00000b6d: 	leaq	0x1(%rax), %rsi
    00000b71: 	callq	_ZdlPvm@PLT # Offset: 2929
.Ltmp1015:
    00000b76: 	movq	%rbp, %rdi
    00000b79: 	callq	_Unwind_Resume@PLT # Offset: 2937
    00000b7e: 	endbr64
    00000b82: 	jmp	.Ltmp1012 # Offset: 2946
.Ltmp1011:
    00000b87: 	movq	0x80(%rsp), %rdi
    00000b8f: 	cmpq	%rbx, %rdi
    00000b92: 	jne	.Ltmp1016 # Offset: 2962
    00000b94: 	jmp	.Ltmp1014 # Offset: 2964
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_Z15test_array5_argIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x12d60
  Size        : 0x28b
  MaxSize     : 0x290
  Offset      : 0x12d60
  Section     : .text
  Orc Section : .local.text._Z15test_array5_argIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %edx
    0000002f: 	movq	%rax, start_time(%rip)
    00000036: 	testl	%edx, %edx
    00000038: 	jle	.Ltmp1017 # Offset: 56
    0000003e: 	leal	-0x1(%rdx), %eax
    00000041: 	movzwl	(%rbx), %ecx
    00000044: 	movzwl	0x4(%rbx), %r10d
    00000049: 	leal	(%rax,%rax,2), %esi
    0000004c: 	leal	(%rax,%rax,4), %edi
    0000004f: 	movzwl	0x6(%rbx), %r8d
    00000054: 	leal	(%rax,%rsi,4), %esi
    00000057: 	leal	(%rax,%rax,8), %eax
    0000005a: 	leal	0x34(%rcx,%rsi,4), %esi
    0000005e: 	shll	$0x2, %eax
    00000061: 	movzwl	0x2(%rbx), %ecx
    00000065: 	leal	0x14(%r8,%rdi,4), %r8d
    0000006a: 	addl	%eax, %r10d
    0000006d: 	addw	0x8(%rbx), %ax
    00000071: 	movw	%si, (%rbx)
    00000074: 	addl	$0x24, %r10d
    00000078: 	leal	0x28(%rcx,%rdi,8), %edi
    0000007c: 	addl	$0x24, %eax
    0000007f: 	movw	%r8w, 0x6(%rbx)
    00000084: 	movw	%r10w, 0x4(%rbx)
    00000089: 	movw	%di, 0x2(%rbx)
    0000008d: 	movw	%ax, 0x8(%rbx)
.Ltmp1030:
    00000091: 	leal	(%rdx,%rdx,2), %r9d
    00000095: 	shll	$0x2, %r9d
    00000099: 	leal	(%r9,%rdx), %ecx
    0000009d: 	shll	$0x2, %ecx
    000000a0: 	addw	init_value(%rip), %cx
    000000a7: 	movl	%ecx, %r11d
    000000aa: 	subl	%r9d, %r11d
    000000ad: 	cmpw	%si, %cx
    000000b0: 	jne	.Ltmp1018 # Offset: 176
    000000b2: 	cmpw	%di, %r11w
    000000b6: 	jne	.Ltmp1018 # Offset: 182
    000000b8: 	leal	(,%rdx,4), %ecx
    000000bf: 	shll	$0x4, %edx
    000000c2: 	subl	%ecx, %r11d
    000000c5: 	movl	%r11d, %ecx
    000000c8: 	subl	%edx, %ecx
    000000ca: 	cmpw	%r8w, %cx
    000000ce: 	setne	%dl
    000000d1: 	cmpw	%r10w, %r11w
    000000d5: 	setne	%cl
    000000d8: 	orb	%cl, %dl
    000000da: 	jne	.Ltmp1018 # Offset: 218
    000000dc: 	cmpw	%ax, %r11w
    000000e0: 	je	.Ltmp1019 # Offset: 224
.Ltmp1018:
    000000e2: 	movq	(%rbp), %rdx
    000000e6: 	leaq	DATAat0x158f3(%rip), %rsi
    000000ed: 	movl	$0x1, %edi
    000000f2: 	xorl	%eax, %eax
    000000f4: 	callq	__printf_chk@PLT # Offset: 244
.Ltmp1019:
    000000f9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000100: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000107: 	subq	$0x20, %rax
    0000010b: 	cmpq	%rax, %rbx
    0000010e: 	je	.Ltmp1020 # Offset: 270
    00000114: 	leaq	0x10(%rbx), %rdi
    00000118: 	movq	0x8(%rbp), %r12
    0000011c: 	movq	%rdi, (%rbx)
    0000011f: 	movq	(%rbp), %r13
    00000123: 	movq	%r13, %rax
    00000126: 	addq	%r12, %rax
    00000129: 	je	.Ltmp1021 # Offset: 297
    0000012b: 	testq	%r13, %r13
    0000012e: 	je	.Ltmp1022 # Offset: 302
.Ltmp1021:
    00000134: 	movq	%r12, (%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp1023 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp1024 # Offset: 326
    0000014c: 	movzbl	(%r13), %eax
    00000151: 	movb	%al, 0x10(%rbx)
.Ltmp1027:
    00000154: 	movq	%r12, 0x8(%rbx)
    00000158: 	movb	$0x0, (%rdi,%r12)
    0000015d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000164: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016b: 	addq	$0x20, %rax
    0000016f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000176: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017d: 	je	.Ltmp1025 # Offset: 381
.Ltmp1028:
    00000183: 	movq	-0x20(%rax), %rbp
    00000187: 	callq	clock@PLT # Offset: 391
    0000018c: 	movq	%rax, end_time(%rip)
    00000193: 	movq	0x8(%rsp), %rdx
    00000198: 	subq	%fs:0x28, %rdx
    000001a1: 	jne	.Ltmp1026 # Offset: 417
    000001a7: 	subq	start_time(%rip), %rax
    000001ae: 	pxor	%xmm0, %xmm0
    000001b2: 	movq	%rbp, %rdi
    000001b5: 	cvtsi2sd	%rax, %xmm0
    000001ba: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001c2: 	addq	$0x18, %rsp
    000001c6: 	popq	%rbx
    000001c7: 	popq	%rbp
    000001c8: 	popq	%r12
    000001ca: 	popq	%r13
    000001cc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 460
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp1023:
    000001d8: 	movq	%rbx, %rdi
    000001db: 	movq	%rsp, %rsi
    000001de: 	xorl	%edx, %edx
    000001e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 480
    000001e5: 	movq	%rax, (%rbx)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	(%rsp), %rax
    000001ef: 	movq	%rax, 0x10(%rbx)
.Ltmp1029:
    000001f3: 	movq	%r12, %rdx
    000001f6: 	movq	%r13, %rsi
    000001f9: 	callq	memcpy@PLT # Offset: 505
    000001fe: 	movq	(%rsp), %r12
    00000202: 	movq	(%rbx), %rdi
    00000205: 	jmp	.Ltmp1027 # Offset: 517
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1020:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp1028 # Offset: 564
.Ltmp1025:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp1028 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1024:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp1027 # Offset: 595
    00000259: 	jmp	.Ltmp1029 # Offset: 601
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1017:
    00000260: 	movzwl	(%rbx), %esi
    00000263: 	movzwl	0x2(%rbx), %edi
    00000267: 	movzwl	0x4(%rbx), %r10d
    0000026c: 	movzwl	0x6(%rbx), %r8d
    00000271: 	movzwl	0x8(%rbx), %eax
    00000275: 	jmp	.Ltmp1030 # Offset: 629
.Ltmp1022:
    0000027a: 	leaq	DATAat0x15008(%rip), %rdi
    00000281: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 641
.Ltmp1026:
    00000286: 	callq	__stack_chk_fail@PLT # Offset: 646
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_array5_argIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIsEvv" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x12ff0
  Size        : 0xa8e
  MaxSize     : 0xa90
  Offset      : 0x12ff0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIsEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xc8, %rsp
    00000015: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm5
    0000001d: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm6
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0xb8(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	leaq	0x80(%rsp), %rax
    00000040: 	movl	$0x31746e69, 0x80(%rsp)
    0000004b: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r14
    00000052: 	movq	%rax, 0x40(%rsp)
    00000057: 	movhlps	%xmm5, %xmm3
    0000005a: 	movq	%xmm6, %rbp
    0000005f: 	movq	%rax, 0x70(%rsp)
    00000064: 	movl	$0x5f36, %eax
    00000069: 	movq	%xmm3, %rcx
    0000006e: 	movw	%ax, 0x84(%rsp)
    00000076: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000007d: 	leaq	0x8(%rcx), %r12
    00000081: 	movb	$0x74, 0x86(%rsp)
    00000089: 	movq	%rax, 0x10(%rsp)
    0000008e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000095: 	movq	$0x7, 0x78(%rsp)
    0000009e: 	movb	$0x0, 0x87(%rsp)
    000000a6: 	movq	%rax, (%rsp)
    000000aa: 	movaps	%xmm6, 0x30(%rsp)
    000000af: 	movaps	%xmm5, 0x20(%rsp)
    000000b4: 	movq	%xmm3, 0x48(%rsp)
    000000ba: 	movq	%xmm5, 0x18(%rsp)
    000000c0: 	cmpq	%r12, %rax
    000000c3: 	jbe	.Ltmp1031 # Offset: 195
    000000c5: 	movq	%r12, %r13
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1034:
    000000d0: 	movq	(%r13), %r15
    000000d4: 	leaq	0x200(%r15), %rbx
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1033:
    000000e0: 	movq	(%r15), %rdi
    000000e3: 	leaq	0x10(%r15), %rdx
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp1032 # Offset: 234
    000000f0: 	movq	0x10(%r15), %rax
    000000f4: 	addq	$0x20, %r15
    000000f8: 	leaq	0x1(%rax), %rsi
    000000fc: 	callq	_ZdlPvm@PLT # Offset: 252
    00000101: 	cmpq	%rbx, %r15
    00000104: 	jne	.Ltmp1033 # Offset: 260
    00000106: 	addq	$0x8, %r13
    0000010a: 	cmpq	%r13, (%rsp)
    0000010e: 	ja	.Ltmp1034 # Offset: 270
.Ltmp1031:
    00000110: 	movq	0x48(%rsp), %rcx
    00000115: 	cmpq	%rcx, (%rsp)
    00000119: 	je	.Ltmp1035 # Offset: 281
    0000011f: 	cmpq	%rbp, 0x18(%rsp)
    00000124: 	je	.Ltmp1036 # Offset: 292
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1038:
    00000130: 	movq	(%rbp), %rdi
    00000134: 	leaq	0x10(%rbp), %rax
    00000138: 	cmpq	%rax, %rdi
    0000013b: 	je	.Ltmp1037 # Offset: 315
    00000141: 	movq	0x10(%rbp), %rax
    00000145: 	addq	$0x20, %rbp
    00000149: 	leaq	0x1(%rax), %rsi
    0000014d: 	callq	_ZdlPvm@PLT # Offset: 333
    00000152: 	cmpq	0x18(%rsp), %rbp
    00000157: 	jne	.Ltmp1038 # Offset: 343
.Ltmp1036:
    00000159: 	cmpq	%r14, 0x10(%rsp)
    0000015e: 	je	.Ltmp1039 # Offset: 350
.Ltmp1041:
    00000160: 	movq	(%r14), %rdi
    00000163: 	leaq	0x10(%r14), %rax
    00000167: 	cmpq	%rax, %rdi
    0000016a: 	je	.Ltmp1040 # Offset: 362
    00000170: 	movq	0x10(%r14), %rax
    00000174: 	addq	$0x20, %r14
    00000178: 	leaq	0x1(%rax), %rsi
    0000017c: 	callq	_ZdlPvm@PLT # Offset: 380
    00000181: 	cmpq	%r14, 0x10(%rsp)
    00000186: 	jne	.Ltmp1041 # Offset: 390
.Ltmp1039:
    00000188: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000018f: 	leaq	0x8(%rax), %rbx
    00000193: 	cmpq	%r12, %rbx
    00000196: 	jbe	.Ltmp1042 # Offset: 406
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1043:
    000001a0: 	movq	(%r12), %rdi
    000001a4: 	movl	$0x200, %esi
    000001a9: 	addq	$0x8, %r12
    000001ad: 	callq	_ZdlPvm@PLT # Offset: 429
    000001b2: 	cmpq	%r12, %rbx
    000001b5: 	ja	.Ltmp1043 # Offset: 437
.Ltmp1042:
    000001b7: 	movl	init_value(%rip), %ebx
    000001bd: 	movdqa	0x30(%rsp), %xmm3
    000001c3: 	leaq	0x90(%rsp), %rbp
    000001cb: 	leaq	0x70(%rsp), %r12
    000001d0: 	movdqa	0x20(%rsp), %xmm4
    000001d6: 	movq	%r12, %rsi
    000001d9: 	movq	%rbp, %rdi
    000001dc: 	movd	%ebx, %xmm2
    000001e0: 	movl	%ebx, %edx
    000001e2: 	movzwl	%bx, %eax
    000001e5: 	movw	%bx, 0x64(%rsp)
    000001ea: 	movdqa	%xmm2, %xmm0
    000001ee: 	movaps	%xmm2, (%rsp)
    000001f2: 	punpcklwd	(%rsp), %xmm0
    000001f7: 	shll	$0x10, %edx
    000001fa: 	orl	%edx, %eax
    000001fc: 	leaq	DATAat0x15940(%rip), %rdx
    00000203: 	movaps	%xmm3, _Z7gLabelsB5cxx11+48(%rip)
    0000020a: 	pshufd	$0x0, %xmm0, %xmm0
    0000020f: 	movl	%eax, 0x60(%rsp)
    00000213: 	movaps	%xmm4, _Z7gLabelsB5cxx11+64(%rip)
    0000021a: 	movaps	%xmm0, 0x50(%rsp)
    0000021f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 543
    00000224: 	callq	clock@PLT # Offset: 548
    00000229: 	movl	iterations(%rip), %edx
    0000022f: 	movdqa	(%rsp), %xmm2
    00000234: 	leaq	0x50(%rsp), %r14
    00000239: 	movq	%rax, start_time(%rip)
    00000240: 	leal	(%rdx,%rdx), %ecx
    00000243: 	movdqa	%xmm2, %xmm1
    00000247: 	movd	%edx, %xmm0
    0000024b: 	movl	%edx, %r8d
    0000024e: 	leal	(%rcx,%rdx), %esi
    00000251: 	punpcklwd	%xmm2, %xmm1
    00000255: 	shll	$0x4, %r8d
    00000259: 	punpcklwd	%xmm0, %xmm0
    0000025d: 	leal	(,%rsi,4), %edi
    00000264: 	pshufd	$0x0, %xmm1, %xmm1
    00000269: 	pshufd	$0x0, %xmm0, %xmm0
    0000026e: 	pmullw	DATAat0x15d80(%rip), %xmm0
    00000276: 	leal	(%rdi,%rdx), %eax
    00000279: 	paddw	%xmm1, %xmm0
    0000027d: 	leal	(%rbx,%rax,4), %eax
    00000280: 	movaps	%xmm0, 0x50(%rsp)
    00000285: 	subl	%edi, %eax
    00000287: 	leal	(,%rdx,4), %edi
    0000028e: 	subl	%edi, %eax
    00000290: 	addl	%edx, %edi
    00000292: 	leal	(%rdx,%rdi,2), %r9d
    00000296: 	subl	%r8d, %eax
    00000299: 	subl	%edx, %r8d
    0000029c: 	subl	%r9d, %eax
    0000029f: 	leal	(%rax,%rsi,2), %eax
    000002a2: 	leal	(%rsi,%rsi,8), %esi
    000002a5: 	addl	%r8d, %eax
    000002a8: 	addl	%esi, %eax
    000002aa: 	movl	%eax, %esi
    000002ac: 	movzwl	%ax, %eax
    000002af: 	subl	%ecx, %esi
    000002b1: 	movl	%esi, %edx
    000002b3: 	addl	%esi, %edi
    000002b5: 	movq	%rbp, %rsi
    000002b8: 	shll	$0x10, %edx
    000002bb: 	movw	%di, 0x64(%rsp)
    000002c0: 	movq	%r14, %rdi
    000002c3: 	orl	%edx, %eax
    000002c5: 	movl	%eax, 0x60(%rsp)
    000002c9: 	callq	_Z12check11_sumsIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 713
    000002ce: 	movq	%rbp, %rdi
    000002d1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 721
    000002d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002dd: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002e4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002eb: 	je	.Ltmp1044 # Offset: 747
.Ltmp1068:
    000002f1: 	movq	-0x20(%rax), %r13
    000002f5: 	callq	clock@PLT # Offset: 757
    000002fa: 	pxor	%xmm0, %xmm0
    000002fe: 	movq	%rax, end_time(%rip)
    00000305: 	movq	%r13, %rdi
    00000308: 	subq	start_time(%rip), %rax
    0000030f: 	cvtsi2sd	%rax, %xmm0
    00000314: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000031c: 	callq	_Z13record_resultdPKc # Offset: 796
    00000321: 	movq	0x90(%rsp), %rdi
    00000329: 	leaq	0xa0(%rsp), %r13
    00000331: 	cmpq	%r13, %rdi
    00000334: 	je	.Ltmp1045 # Offset: 820
    00000336: 	movq	0xa0(%rsp), %rax
    0000033e: 	leaq	0x1(%rax), %rsi
    00000342: 	callq	_ZdlPvm@PLT # Offset: 834
.Ltmp1045:
    00000347: 	movl	init_value(%rip), %eax
    0000034d: 	movq	%r12, %rsi
    00000350: 	movq	%rbp, %rdi
    00000353: 	movl	%eax, %ecx
    00000355: 	movd	%eax, %xmm0
    00000359: 	movzwl	%ax, %edx
    0000035c: 	movw	%ax, 0x64(%rsp)
    00000361: 	shll	$0x10, %ecx
    00000364: 	punpcklwd	%xmm0, %xmm0
    00000368: 	orl	%ecx, %edx
    0000036a: 	pshufd	$0x0, %xmm0, %xmm0
    0000036f: 	movl	%edx, 0x60(%rsp)
    00000373: 	leaq	DATAat0x15970(%rip), %rdx
    0000037a: 	movaps	%xmm0, 0x50(%rsp)
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	movq	%rbp, %rsi
    00000387: 	movq	%r14, %rdi
    0000038a: 	callq	_Z17test_array11_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 906
    0000038f: 	movq	0x90(%rsp), %rdi
    00000397: 	cmpq	%r13, %rdi
    0000039a: 	je	.Ltmp1046 # Offset: 922
    0000039c: 	movq	0xa0(%rsp), %rax
    000003a4: 	leaq	0x1(%rax), %rsi
    000003a8: 	callq	_ZdlPvm@PLT # Offset: 936
.Ltmp1046:
    000003ad: 	movl	init_value(%rip), %eax
    000003b3: 	movq	%r12, %rsi
    000003b6: 	movq	%rbp, %rdi
    000003b9: 	movl	%eax, %ecx
    000003bb: 	movd	%eax, %xmm0
    000003bf: 	movzwl	%ax, %edx
    000003c2: 	movw	%ax, 0x64(%rsp)
    000003c7: 	shll	$0x10, %ecx
    000003ca: 	punpcklwd	%xmm0, %xmm0
    000003ce: 	orl	%ecx, %edx
    000003d0: 	pshufd	$0x0, %xmm0, %xmm0
    000003d5: 	movl	%edx, 0x60(%rsp)
    000003d9: 	leaq	DATAat0x159a0(%rip), %rdx
    000003e0: 	movaps	%xmm0, 0x50(%rsp)
    000003e5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 997
    000003ea: 	movq	%rbp, %rsi
    000003ed: 	movq	%r14, %rdi
    000003f0: 	callq	_Z17test_array11_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1008
    000003f5: 	movq	0x90(%rsp), %rdi
    000003fd: 	cmpq	%r13, %rdi
    00000400: 	je	.Ltmp1047 # Offset: 1024
    00000402: 	movq	0xa0(%rsp), %rax
    0000040a: 	leaq	0x1(%rax), %rsi
    0000040e: 	callq	_ZdlPvm@PLT # Offset: 1038
.Ltmp1047:
    00000413: 	movl	init_value(%rip), %eax
    00000419: 	movq	%r12, %rsi
    0000041c: 	movq	%rbp, %rdi
    0000041f: 	movl	%eax, %ecx
    00000421: 	movd	%eax, %xmm0
    00000425: 	movzwl	%ax, %edx
    00000428: 	movw	%ax, 0x64(%rsp)
    0000042d: 	shll	$0x10, %ecx
    00000430: 	punpcklwd	%xmm0, %xmm0
    00000434: 	orl	%ecx, %edx
    00000436: 	pshufd	$0x0, %xmm0, %xmm0
    0000043b: 	movl	%edx, 0x60(%rsp)
    0000043f: 	leaq	DATAat0x159d0(%rip), %rdx
    00000446: 	movaps	%xmm0, 0x50(%rsp)
    0000044b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1099
    00000450: 	movq	%rbp, %rsi
    00000453: 	movq	%r14, %rdi
    00000456: 	callq	_Z16test_array11_argIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1110
    0000045b: 	movq	0x90(%rsp), %rdi
    00000463: 	cmpq	%r13, %rdi
    00000466: 	je	.Ltmp1048 # Offset: 1126
    00000468: 	movq	0xa0(%rsp), %rax
    00000470: 	leaq	0x1(%rax), %rsi
    00000474: 	callq	_ZdlPvm@PLT # Offset: 1140
.Ltmp1048:
    00000479: 	movl	init_value(%rip), %ebx
    0000047f: 	movq	%r12, %rsi
    00000482: 	movq	%rbp, %rdi
    00000485: 	movd	%ebx, %xmm0
    00000489: 	movl	%ebx, %edx
    0000048b: 	movzwl	%bx, %eax
    0000048e: 	movw	%bx, 0x64(%rsp)
    00000493: 	shll	$0x10, %edx
    00000496: 	punpcklwd	%xmm0, %xmm0
    0000049a: 	orl	%edx, %eax
    0000049c: 	pshufd	$0x0, %xmm0, %xmm0
    000004a1: 	leaq	DATAat0x159f8(%rip), %rdx
    000004a8: 	movl	%eax, 0x60(%rsp)
    000004ac: 	movaps	%xmm0, 0x50(%rsp)
    000004b1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1201
    000004b6: 	callq	clock@PLT # Offset: 1206
    000004bb: 	movd	iterations(%rip), %xmm7
    000004c3: 	movq	DATAat0x15d80(%rip), %xmm0
    000004cb: 	movl	init_value(%rip), %edx
    000004d1: 	movq	%rax, start_time(%rip)
    000004d8: 	pshuflw	$0x0, %xmm7, %xmm1
    000004dd: 	movd	%ebx, %xmm7
    000004e1: 	pmullw	%xmm0, %xmm1
    000004e5: 	pshuflw	$0x0, %xmm7, %xmm0
    000004ea: 	paddw	%xmm1, %xmm0
    000004ee: 	pextrw	$0x0, %xmm1, %eax
    000004f3: 	pextrw	$0x3, %xmm1, %esi
    000004f8: 	addl	%edx, %eax
    000004fa: 	pextrw	$0x2, %xmm1, %ecx
    000004ff: 	pextrw	$0x2, %xmm0, %edi
    00000504: 	pextrw	$0x0, %xmm0, %r9d
    0000050a: 	pextrw	$0x3, %xmm0, %r8d
    00000510: 	movq	%xmm0, 0x50(%rsp)
    00000516: 	movw	%di, 0x58(%rsp)
    0000051b: 	cmpw	%r9w, %ax
    0000051f: 	jne	.Ltmp1049 # Offset: 1311
    00000521: 	pextrw	$0x1, %xmm1, %eax
    00000526: 	pextrw	$0x1, %xmm0, %r9d
    0000052c: 	addl	%edx, %eax
    0000052e: 	cmpw	%r9w, %ax
    00000532: 	jne	.Ltmp1049 # Offset: 1330
    00000534: 	addl	%edx, %ecx
    00000536: 	cmpw	%di, %cx
    00000539: 	jne	.Ltmp1049 # Offset: 1337
    0000053b: 	addl	%edx, %esi
    0000053d: 	cmpw	%r8w, %si
    00000541: 	je	.Ltmp1050 # Offset: 1345
.Ltmp1049:
    00000543: 	movq	0x90(%rsp), %rdx
    0000054b: 	leaq	DATAat0x158f3(%rip), %rsi
    00000552: 	movl	$0x1, %edi
    00000557: 	xorl	%eax, %eax
    00000559: 	callq	__printf_chk@PLT # Offset: 1369
.Ltmp1050:
    0000055e: 	movq	%rbp, %rdi
    00000561: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1377
    00000566: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000056d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000574: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000057b: 	je	.Ltmp1051 # Offset: 1403
.Ltmp1069:
    00000581: 	movq	-0x20(%rax), %r15
    00000585: 	callq	clock@PLT # Offset: 1413
    0000058a: 	pxor	%xmm0, %xmm0
    0000058e: 	movq	%rax, end_time(%rip)
    00000595: 	movq	%r15, %rdi
    00000598: 	subq	start_time(%rip), %rax
    0000059f: 	cvtsi2sd	%rax, %xmm0
    000005a4: 	divsd	DATAat0x15c60(%rip), %xmm0
    000005ac: 	callq	_Z13record_resultdPKc # Offset: 1452
    000005b1: 	movq	0x90(%rsp), %rdi
    000005b9: 	cmpq	%r13, %rdi
    000005bc: 	je	.Ltmp1052 # Offset: 1468
    000005be: 	movq	0xa0(%rsp), %rax
    000005c6: 	leaq	0x1(%rax), %rsi
    000005ca: 	callq	_ZdlPvm@PLT # Offset: 1482
.Ltmp1052:
    000005cf: 	movl	init_value(%rip), %eax
    000005d5: 	movq	%r12, %rsi
    000005d8: 	movq	%rbp, %rdi
    000005db: 	movl	%eax, %ecx
    000005dd: 	movd	%eax, %xmm0
    000005e1: 	movzwl	%ax, %edx
    000005e4: 	movw	%ax, 0x64(%rsp)
    000005e9: 	shll	$0x10, %ecx
    000005ec: 	punpcklwd	%xmm0, %xmm0
    000005f0: 	orl	%ecx, %edx
    000005f2: 	pshufd	$0x0, %xmm0, %xmm0
    000005f7: 	movl	%edx, 0x60(%rsp)
    000005fb: 	leaq	DATAat0x15a30(%rip), %rdx
    00000602: 	movaps	%xmm0, 0x50(%rsp)
    00000607: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1543
    0000060c: 	movq	%rbp, %rsi
    0000060f: 	movq	%r14, %rdi
    00000612: 	callq	_Z16test_array5_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1554
    00000617: 	movq	0x90(%rsp), %rdi
    0000061f: 	cmpq	%r13, %rdi
    00000622: 	je	.Ltmp1053 # Offset: 1570
    00000624: 	movq	0xa0(%rsp), %rax
    0000062c: 	leaq	0x1(%rax), %rsi
    00000630: 	callq	_ZdlPvm@PLT # Offset: 1584
.Ltmp1053:
    00000635: 	movl	init_value(%rip), %eax
    0000063b: 	movq	%r12, %rsi
    0000063e: 	movq	%rbp, %rdi
    00000641: 	movl	%eax, %ecx
    00000643: 	movd	%eax, %xmm0
    00000647: 	movzwl	%ax, %edx
    0000064a: 	movw	%ax, 0x64(%rsp)
    0000064f: 	shll	$0x10, %ecx
    00000652: 	punpcklwd	%xmm0, %xmm0
    00000656: 	orl	%ecx, %edx
    00000658: 	pshufd	$0x0, %xmm0, %xmm0
    0000065d: 	movl	%edx, 0x60(%rsp)
    00000661: 	leaq	DATAat0x15a68(%rip), %rdx
    00000668: 	movaps	%xmm0, 0x50(%rsp)
    0000066d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1645
    00000672: 	movq	%rbp, %rsi
    00000675: 	movq	%r14, %rdi
    00000678: 	callq	_Z16test_array5_arg1IsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1656
    0000067d: 	movq	0x90(%rsp), %rdi
    00000685: 	cmpq	%r13, %rdi
    00000688: 	je	.Ltmp1054 # Offset: 1672
    0000068a: 	movq	0xa0(%rsp), %rax
    00000692: 	leaq	0x1(%rax), %rsi
    00000696: 	callq	_ZdlPvm@PLT # Offset: 1686
.Ltmp1054:
    0000069b: 	movl	init_value(%rip), %eax
    000006a1: 	movq	%r12, %rsi
    000006a4: 	movq	%rbp, %rdi
    000006a7: 	movl	%eax, %ecx
    000006a9: 	movd	%eax, %xmm0
    000006ad: 	movzwl	%ax, %edx
    000006b0: 	movw	%ax, 0x64(%rsp)
    000006b5: 	shll	$0x10, %ecx
    000006b8: 	punpcklwd	%xmm0, %xmm0
    000006bc: 	orl	%ecx, %edx
    000006be: 	pshufd	$0x0, %xmm0, %xmm0
    000006c3: 	movl	%edx, 0x60(%rsp)
    000006c7: 	leaq	DATAat0x15aa0(%rip), %rdx
    000006ce: 	movaps	%xmm0, 0x50(%rsp)
    000006d3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1747
    000006d8: 	movq	%rbp, %rsi
    000006db: 	movq	%r14, %rdi
    000006de: 	callq	_Z15test_array5_argIsEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1758
    000006e3: 	movq	0x90(%rsp), %rdi
    000006eb: 	cmpq	%r13, %rdi
    000006ee: 	je	.Ltmp1055 # Offset: 1774
    000006f0: 	movq	0xa0(%rsp), %rax
    000006f8: 	leaq	0x1(%rax), %rsi
    000006fc: 	callq	_ZdlPvm@PLT # Offset: 1788
.Ltmp1055:
    00000701: 	leaq	DATAat0x15ad0(%rip), %rdx
    00000708: 	movq	%r12, %rsi
    0000070b: 	movq	%rbp, %rdi
    0000070e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1806
    00000713: 	movq	%rbp, %rdi
    00000716: 	callq	_Z19test_array11_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1814
    0000071b: 	movq	0x90(%rsp), %rdi
    00000723: 	cmpq	%r13, %rdi
    00000726: 	je	.Ltmp1056 # Offset: 1830
    00000728: 	movq	0xa0(%rsp), %rax
    00000730: 	leaq	0x1(%rax), %rsi
    00000734: 	callq	_ZdlPvm@PLT # Offset: 1844
.Ltmp1056:
    00000739: 	leaq	DATAat0x15af8(%rip), %rdx
    00000740: 	movq	%r12, %rsi
    00000743: 	movq	%rbp, %rdi
    00000746: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1862
    0000074b: 	movq	%rbp, %rdi
    0000074e: 	callq	_Z19test_array11_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1870
    00000753: 	movq	0x90(%rsp), %rdi
    0000075b: 	cmpq	%r13, %rdi
    0000075e: 	je	.Ltmp1057 # Offset: 1886
    00000760: 	movq	0xa0(%rsp), %rax
    00000768: 	leaq	0x1(%rax), %rsi
    0000076c: 	callq	_ZdlPvm@PLT # Offset: 1900
.Ltmp1057:
    00000771: 	leaq	DATAat0x15b28(%rip), %rdx
    00000778: 	movq	%r12, %rsi
    0000077b: 	movq	%rbp, %rdi
    0000077e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1918
    00000783: 	movq	%rbp, %rdi
    00000786: 	callq	_Z19test_array11_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1926
    0000078b: 	movq	0x90(%rsp), %rdi
    00000793: 	cmpq	%r13, %rdi
    00000796: 	je	.Ltmp1058 # Offset: 1942
    00000798: 	movq	0xa0(%rsp), %rax
    000007a0: 	leaq	0x1(%rax), %rsi
    000007a4: 	callq	_ZdlPvm@PLT # Offset: 1956
.Ltmp1058:
    000007a9: 	leaq	DATAat0x15b58(%rip), %rdx
    000007b0: 	movq	%r12, %rsi
    000007b3: 	movq	%rbp, %rdi
    000007b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1974
    000007bb: 	movq	%rbp, %rdi
    000007be: 	callq	_Z18test_array11_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1982
    000007c3: 	movq	0x90(%rsp), %rdi
    000007cb: 	cmpq	%r13, %rdi
    000007ce: 	je	.Ltmp1059 # Offset: 1998
    000007d0: 	movq	0xa0(%rsp), %rax
    000007d8: 	leaq	0x1(%rax), %rsi
    000007dc: 	callq	_ZdlPvm@PLT # Offset: 2012
.Ltmp1059:
    000007e1: 	leaq	DATAat0x15b80(%rip), %rdx
    000007e8: 	movq	%r12, %rsi
    000007eb: 	movq	%rbp, %rdi
    000007ee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2030
    000007f3: 	movq	%rbp, %rdi
    000007f6: 	callq	_Z18test_array5_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2038
    000007fb: 	movq	0x90(%rsp), %rdi
    00000803: 	cmpq	%r13, %rdi
    00000806: 	je	.Ltmp1060 # Offset: 2054
    00000808: 	movq	0xa0(%rsp), %rax
    00000810: 	leaq	0x1(%rax), %rsi
    00000814: 	callq	_ZdlPvm@PLT # Offset: 2068
.Ltmp1060:
    00000819: 	leaq	DATAat0x15bb0(%rip), %rdx
    00000820: 	movq	%r12, %rsi
    00000823: 	movq	%rbp, %rdi
    00000826: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2086
    0000082b: 	movq	%rbp, %rdi
    0000082e: 	callq	_Z18test_array5_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2094
    00000833: 	movq	0x90(%rsp), %rdi
    0000083b: 	cmpq	%r13, %rdi
    0000083e: 	je	.Ltmp1061 # Offset: 2110
    00000840: 	movq	0xa0(%rsp), %rax
    00000848: 	leaq	0x1(%rax), %rsi
    0000084c: 	callq	_ZdlPvm@PLT # Offset: 2124
.Ltmp1061:
    00000851: 	leaq	DATAat0x15be0(%rip), %rdx
    00000858: 	movq	%r12, %rsi
    0000085b: 	movq	%rbp, %rdi
    0000085e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2142
    00000863: 	movq	%rbp, %rdi
    00000866: 	callq	_Z18test_array5_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2150
    0000086b: 	movq	0x90(%rsp), %rdi
    00000873: 	cmpq	%r13, %rdi
    00000876: 	je	.Ltmp1062 # Offset: 2166
    00000878: 	movq	0xa0(%rsp), %rax
    00000880: 	leaq	0x1(%rax), %rsi
    00000884: 	callq	_ZdlPvm@PLT # Offset: 2180
.Ltmp1062:
    00000889: 	leaq	DATAat0x15c10(%rip), %rdx
    00000890: 	movq	%r12, %rsi
    00000893: 	movq	%rbp, %rdi
    00000896: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2198
    0000089b: 	movq	%rbp, %rdi
    0000089e: 	callq	_Z17test_array5_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2206
    000008a3: 	movq	0x90(%rsp), %rdi
    000008ab: 	cmpq	%r13, %rdi
    000008ae: 	je	.Ltmp1063 # Offset: 2222
    000008b0: 	movq	0xa0(%rsp), %rax
    000008b8: 	leaq	0x1(%rax), %rsi
    000008bc: 	callq	_ZdlPvm@PLT # Offset: 2236
.Ltmp1063:
    000008c1: 	movq	0x70(%rsp), %rdi
    000008c6: 	cmpq	0x40(%rsp), %rdi
    000008cb: 	je	.Ltmp1064 # Offset: 2251
    000008cd: 	movq	0x80(%rsp), %rax
    000008d5: 	leaq	0x1(%rax), %rsi
    000008d9: 	callq	_ZdlPvm@PLT # Offset: 2265
.Ltmp1064:
    000008de: 	movq	0xb8(%rsp), %rax
    000008e6: 	subq	%fs:0x28, %rax
    000008ef: 	jne	.Ltmp1065 # Offset: 2287
    000008f5: 	addq	$0xc8, %rsp
    000008fc: 	popq	%rbx
    000008fd: 	popq	%rbp
    000008fe: 	popq	%r12
    00000900: 	popq	%r13
    00000902: 	popq	%r14
    00000904: 	popq	%r15
    00000906: 	retq # Offset: 2310
    00000907: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1066:
    00000910: 	addq	$0x20, %rbp
.Ltmp1035:
    00000914: 	cmpq	%rbp, 0x10(%rsp)
    00000919: 	je	.Ltmp1039 # Offset: 2329
.Ltmp1067:
    0000091f: 	movq	(%rbp), %rdi
    00000923: 	leaq	0x10(%rbp), %rax
    00000927: 	cmpq	%rax, %rdi
    0000092a: 	je	.Ltmp1066 # Offset: 2346
    0000092c: 	movq	0x10(%rbp), %rax
    00000930: 	addq	$0x20, %rbp
    00000934: 	leaq	0x1(%rax), %rsi
    00000938: 	callq	_ZdlPvm@PLT # Offset: 2360
    0000093d: 	cmpq	%rbp, 0x10(%rsp)
    00000942: 	jne	.Ltmp1067 # Offset: 2370
    00000944: 	jmp	.Ltmp1039 # Offset: 2372
    00000949: 	nopl	(%rax) # Size: 7
.Ltmp1032:
    00000950: 	addq	$0x20, %r15
    00000954: 	cmpq	%rbx, %r15
    00000957: 	jne	.Ltmp1033 # Offset: 2391
    0000095d: 	addq	$0x8, %r13
    00000961: 	cmpq	%r13, (%rsp)
    00000965: 	ja	.Ltmp1034 # Offset: 2405
    0000096b: 	jmp	.Ltmp1031 # Offset: 2411
.Ltmp1037:
    00000970: 	addq	$0x20, %rbp
    00000974: 	cmpq	0x18(%rsp), %rbp
    00000979: 	jne	.Ltmp1038 # Offset: 2425
    0000097f: 	jmp	.Ltmp1036 # Offset: 2431
    00000984: 	nopl	(%rax) # Size: 4
.Ltmp1040:
    00000988: 	addq	$0x20, %r14
    0000098c: 	cmpq	%r14, 0x10(%rsp)
    00000991: 	jne	.Ltmp1041 # Offset: 2449
    00000997: 	jmp	.Ltmp1039 # Offset: 2455
.Ltmp1044:
    0000099c: 	movq	-0x8(%rdx), %rax
    000009a0: 	addq	$0x200, %rax
    000009a6: 	jmp	.Ltmp1068 # Offset: 2470
.Ltmp1051:
    000009ab: 	movq	-0x8(%rdx), %rax
    000009af: 	addq	$0x200, %rax
    000009b5: 	jmp	.Ltmp1069 # Offset: 2485
.Ltmp1065:
    000009ba: 	callq	__stack_chk_fail@PLT # Offset: 2490
    000009bf: 	endbr64
.Ltmp1071:
    000009c3: 	movq	%rax, %rbp
    000009c6: 	jmp	.Ltmp1070 # Offset: 2502
    000009cb: 	endbr64
    000009cf: 	jmp	.Ltmp1071 # Offset: 2511
    000009d1: 	endbr64
    000009d5: 	jmp	.Ltmp1071 # Offset: 2517
    000009d7: 	endbr64
    000009db: 	jmp	.Ltmp1071 # Offset: 2523
    000009dd: 	endbr64
    000009e1: 	jmp	.Ltmp1071 # Offset: 2529
    000009e3: 	endbr64
    000009e7: 	jmp	.Ltmp1071 # Offset: 2535
    000009e9: 	endbr64
    000009ed: 	jmp	.Ltmp1071 # Offset: 2541
    000009ef: 	endbr64
    000009f3: 	jmp	.Ltmp1071 # Offset: 2547
    000009f5: 	endbr64
    000009f9: 	jmp	.Ltmp1071 # Offset: 2553
    000009fb: 	endbr64
    000009ff: 	jmp	.Ltmp1071 # Offset: 2559
    00000a01: 	endbr64
    00000a05: 	jmp	.Ltmp1071 # Offset: 2565
    00000a07: 	endbr64
    00000a0b: 	jmp	.Ltmp1071 # Offset: 2571
    00000a0d: 	endbr64
    00000a11: 	jmp	.Ltmp1071 # Offset: 2577
    00000a13: 	endbr64
    00000a17: 	jmp	.Ltmp1071 # Offset: 2583
    00000a19: 	endbr64
    00000a1d: 	movq	%rax, %rbp
    00000a20: 	jmp	.Ltmp1072 # Offset: 2592
    00000a22: 	endbr64
    00000a26: 	movq	%rax, %rbp
    00000a29: 	jmp	.Ltmp1073 # Offset: 2601
.Ltmp1072:
    00000a2b: 	movq	0x90(%rsp), %rdi
    00000a33: 	leaq	0xa0(%rsp), %rax
    00000a3b: 	cmpq	%rax, %rdi
    00000a3e: 	je	.Ltmp1073 # Offset: 2622
.Ltmp1075:
    00000a40: 	movq	0xa0(%rsp), %rax
    00000a48: 	leaq	0x1(%rax), %rsi
    00000a4c: 	callq	_ZdlPvm@PLT # Offset: 2636
.Ltmp1073:
    00000a51: 	movq	0x70(%rsp), %rdi
    00000a56: 	cmpq	0x40(%rsp), %rdi
    00000a5b: 	je	.Ltmp1074 # Offset: 2651
    00000a5d: 	movq	0x80(%rsp), %rax
    00000a65: 	leaq	0x1(%rax), %rsi
    00000a69: 	callq	_ZdlPvm@PLT # Offset: 2665
.Ltmp1074:
    00000a6e: 	movq	%rbp, %rdi
    00000a71: 	callq	_Unwind_Resume@PLT # Offset: 2673
    00000a76: 	endbr64
    00000a7a: 	jmp	.Ltmp1071 # Offset: 2682
.Ltmp1070:
    00000a7f: 	movq	0x90(%rsp), %rdi
    00000a87: 	cmpq	%r13, %rdi
    00000a8a: 	jne	.Ltmp1075 # Offset: 2698
    00000a8c: 	jmp	.Ltmp1073 # Offset: 2700
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIsEvv"

Binary Function "_Z15test_array5_argImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x13a80
  Size        : 0x291
  MaxSize     : 0x2a0
  Offset      : 0x13a80
  Section     : .text
  Orc Section : .local.text._Z15test_array5_argImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	movslq	iterations(%rip), %rax
    00000037: 	testl	%eax, %eax
    00000039: 	jle	.Ltmp1076 # Offset: 57
    0000003f: 	leal	-0x1(%rax), %edx
    00000042: 	movq	0x10(%rbx), %r8
    00000046: 	leaq	(%rdx,%rdx,2), %rcx
    0000004a: 	leaq	(%rdx,%rcx,4), %rsi
    0000004e: 	movq	(%rbx), %rcx
    00000051: 	leaq	0x34(%rcx,%rsi,4), %r9
    00000056: 	movq	0x18(%rbx), %rsi
    0000005a: 	leaq	(%rdx,%rdx,4), %rcx
    0000005e: 	leaq	(%rdx,%rdx,8), %rdx
    00000062: 	movq	%r9, (%rbx)
    00000065: 	leaq	0x14(%rsi,%rcx,4), %rdi
    0000006a: 	shlq	$0x2, %rdx
    0000006e: 	movq	0x8(%rbx), %rsi
    00000072: 	addq	%rdx, %r8
    00000075: 	addq	0x20(%rbx), %rdx
    00000079: 	movq	%rdi, 0x18(%rbx)
    0000007d: 	addq	$0x24, %r8
    00000081: 	leaq	0x28(%rsi,%rcx,8), %r11
    00000086: 	addq	$0x24, %rdx
    0000008a: 	movq	%r8, 0x10(%rbx)
    0000008e: 	movq	%r11, 0x8(%rbx)
    00000092: 	movq	%rdx, 0x20(%rbx)
.Ltmp1089:
    00000096: 	leaq	(%rax,%rax,2), %rcx
    0000009a: 	movslq	init_value(%rip), %rsi
    000000a1: 	shlq	$0x2, %rcx
    000000a5: 	leaq	(%rcx,%rax), %r10
    000000a9: 	leaq	(%rsi,%r10,4), %r10
    000000ad: 	movq	%r10, %rsi
    000000b0: 	subq	%rcx, %rsi
    000000b3: 	cmpq	%r9, %r10
    000000b6: 	jne	.Ltmp1077 # Offset: 182
    000000b8: 	cmpq	%r11, %rsi
    000000bb: 	jne	.Ltmp1077 # Offset: 187
    000000bd: 	leaq	(,%rax,4), %rcx
    000000c5: 	shlq	$0x4, %rax
    000000c9: 	subq	%rcx, %rsi
    000000cc: 	movq	%rsi, %rcx
    000000cf: 	subq	%rax, %rcx
    000000d2: 	cmpq	%rdi, %rcx
    000000d5: 	setne	%al
    000000d8: 	cmpq	%r8, %rsi
    000000db: 	setne	%cl
    000000de: 	orb	%cl, %al
    000000e0: 	jne	.Ltmp1077 # Offset: 224
    000000e2: 	cmpq	%rdx, %rsi
    000000e5: 	je	.Ltmp1078 # Offset: 229
.Ltmp1077:
    000000e7: 	movq	(%rbp), %rdx
    000000eb: 	leaq	DATAat0x158f3(%rip), %rsi
    000000f2: 	movl	$0x1, %edi
    000000f7: 	xorl	%eax, %eax
    000000f9: 	callq	__printf_chk@PLT # Offset: 249
.Ltmp1078:
    000000fe: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000105: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010c: 	subq	$0x20, %rax
    00000110: 	cmpq	%rax, %rbx
    00000113: 	je	.Ltmp1079 # Offset: 275
    00000119: 	leaq	0x10(%rbx), %rdi
    0000011d: 	movq	0x8(%rbp), %r12
    00000121: 	movq	%rdi, (%rbx)
    00000124: 	movq	(%rbp), %r13
    00000128: 	movq	%r13, %rax
    0000012b: 	addq	%r12, %rax
    0000012e: 	je	.Ltmp1080 # Offset: 302
    00000130: 	testq	%r13, %r13
    00000133: 	je	.Ltmp1081 # Offset: 307
.Ltmp1080:
    00000139: 	movq	%r12, (%rsp)
    0000013d: 	cmpq	$0xf, %r12
    00000141: 	ja	.Ltmp1082 # Offset: 321
    00000147: 	cmpq	$0x1, %r12
    0000014b: 	jne	.Ltmp1083 # Offset: 331
    00000151: 	movzbl	(%r13), %eax
    00000156: 	movb	%al, 0x10(%rbx)
.Ltmp1086:
    00000159: 	movq	%r12, 0x8(%rbx)
    0000015d: 	movb	$0x0, (%rdi,%r12)
    00000162: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000169: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000170: 	addq	$0x20, %rax
    00000174: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000017b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000182: 	je	.Ltmp1084 # Offset: 386
.Ltmp1087:
    00000188: 	movq	-0x20(%rax), %rbp
    0000018c: 	callq	clock@PLT # Offset: 396
    00000191: 	movq	%rax, end_time(%rip)
    00000198: 	movq	0x8(%rsp), %rdx
    0000019d: 	subq	%fs:0x28, %rdx
    000001a6: 	jne	.Ltmp1085 # Offset: 422
    000001ac: 	subq	start_time(%rip), %rax
    000001b3: 	pxor	%xmm0, %xmm0
    000001b7: 	movq	%rbp, %rdi
    000001ba: 	cvtsi2sd	%rax, %xmm0
    000001bf: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001c7: 	addq	$0x18, %rsp
    000001cb: 	popq	%rbx
    000001cc: 	popq	%rbp
    000001cd: 	popq	%r12
    000001cf: 	popq	%r13
    000001d1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1082:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	movq	%rsp, %rsi
    000001e6: 	xorl	%edx, %edx
    000001e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 488
    000001ed: 	movq	%rax, (%rbx)
    000001f0: 	movq	%rax, %rdi
    000001f3: 	movq	(%rsp), %rax
    000001f7: 	movq	%rax, 0x10(%rbx)
.Ltmp1088:
    000001fb: 	movq	%r12, %rdx
    000001fe: 	movq	%r13, %rsi
    00000201: 	callq	memcpy@PLT # Offset: 513
    00000206: 	movq	(%rsp), %r12
    0000020a: 	movq	(%rbx), %rdi
    0000020d: 	jmp	.Ltmp1086 # Offset: 525
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1079:
    00000218: 	movq	%rbp, %rsi
    0000021b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000222: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 546
    00000227: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000022e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000235: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023c: 	jne	.Ltmp1087 # Offset: 572
.Ltmp1084:
    00000242: 	movq	-0x8(%rdx), %rax
    00000246: 	addq	$0x200, %rax
    0000024c: 	jmp	.Ltmp1087 # Offset: 588
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp1083:
    00000258: 	testq	%r12, %r12
    0000025b: 	je	.Ltmp1086 # Offset: 603
    00000261: 	jmp	.Ltmp1088 # Offset: 609
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1076:
    00000268: 	movq	(%rbx), %r9
    0000026b: 	movq	0x8(%rbx), %r11
    0000026f: 	movq	0x10(%rbx), %r8
    00000273: 	movq	0x18(%rbx), %rdi
    00000277: 	movq	0x20(%rbx), %rdx
    0000027b: 	jmp	.Ltmp1089 # Offset: 635
.Ltmp1081:
    00000280: 	leaq	DATAat0x15008(%rip), %rdi
    00000287: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 647
.Ltmp1085:
    0000028c: 	callq	__stack_chk_fail@PLT # Offset: 652
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_array5_argImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x13d20
  Size        : 0xae4
  MaxSize     : 0xaf0
  Offset      : 0x13d20
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x15c41(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0xf8, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0xe8(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0x50(%rsp), %rbp
    00000034: 	movq	%rbp, %rdi
    00000037: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 55
    0000003c: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm3
    00000044: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000004b: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm4
    00000053: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r15
    0000005a: 	movhlps	%xmm3, %xmm6
    0000005d: 	movq	%rax, 0x18(%rsp)
    00000062: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000069: 	movq	%xmm6, %rcx
    0000006e: 	movaps	%xmm4, 0x20(%rsp)
    00000073: 	movq	%xmm4, %r12
    00000078: 	leaq	0x8(%rcx), %r13
    0000007c: 	movq	%rax, 0x10(%rsp)
    00000081: 	movaps	%xmm3, 0x30(%rsp)
    00000086: 	movq	%xmm6, 0x48(%rsp)
    0000008c: 	movq	%xmm3, 0x40(%rsp)
    00000092: 	cmpq	%r13, %rax
    00000095: 	jbe	.Ltmp1090 # Offset: 149
    00000097: 	movq	%r13, 0x8(%rsp)
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1093:
    000000a0: 	movq	0x8(%rsp), %rax
    000000a5: 	movq	(%rax), %r14
    000000a8: 	leaq	0x200(%r14), %rbx
    000000af: 	nop # Size: 1
.Ltmp1092:
    000000b0: 	movq	(%r14), %rdi
    000000b3: 	leaq	0x10(%r14), %rdx
    000000b7: 	cmpq	%rdx, %rdi
    000000ba: 	je	.Ltmp1091 # Offset: 186
    000000c0: 	movq	0x10(%r14), %rax
    000000c4: 	addq	$0x20, %r14
    000000c8: 	leaq	0x1(%rax), %rsi
    000000cc: 	callq	_ZdlPvm@PLT # Offset: 204
    000000d1: 	cmpq	%rbx, %r14
    000000d4: 	jne	.Ltmp1092 # Offset: 212
.Ltmp1126:
    000000d6: 	addq	$0x8, 0x8(%rsp)
    000000dc: 	movq	0x8(%rsp), %rax
    000000e1: 	cmpq	%rax, 0x10(%rsp)
    000000e6: 	ja	.Ltmp1093 # Offset: 230
.Ltmp1090:
    000000e8: 	movq	0x48(%rsp), %rcx
    000000ed: 	cmpq	%rcx, 0x10(%rsp)
    000000f2: 	je	.Ltmp1094 # Offset: 242
.Ltmp1127:
    000000f8: 	cmpq	0x40(%rsp), %r12
    000000fd: 	je	.Ltmp1095 # Offset: 253
.Ltmp1097:
    000000ff: 	movq	(%r12), %rdi
    00000103: 	leaq	0x10(%r12), %rax
    00000108: 	cmpq	%rax, %rdi
    0000010b: 	je	.Ltmp1096 # Offset: 267
    00000111: 	movq	0x10(%r12), %rax
    00000116: 	addq	$0x20, %r12
    0000011a: 	leaq	0x1(%rax), %rsi
    0000011e: 	callq	_ZdlPvm@PLT # Offset: 286
    00000123: 	cmpq	0x40(%rsp), %r12
    00000128: 	jne	.Ltmp1097 # Offset: 296
.Ltmp1095:
    0000012a: 	cmpq	%r15, 0x18(%rsp)
    0000012f: 	je	.Ltmp1098 # Offset: 303
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp1100:
    00000138: 	movq	(%r15), %rdi
    0000013b: 	leaq	0x10(%r15), %rax
    0000013f: 	cmpq	%rax, %rdi
    00000142: 	je	.Ltmp1099 # Offset: 322
    00000148: 	movq	0x10(%r15), %rax
    0000014c: 	addq	$0x20, %r15
    00000150: 	leaq	0x1(%rax), %rsi
    00000154: 	callq	_ZdlPvm@PLT # Offset: 340
    00000159: 	cmpq	%r15, 0x18(%rsp)
    0000015e: 	jne	.Ltmp1100 # Offset: 350
.Ltmp1098:
    00000160: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000167: 	leaq	0x8(%rax), %rbx
    0000016b: 	cmpq	%r13, %rbx
    0000016e: 	jbe	.Ltmp1101 # Offset: 366
.Ltmp1102:
    00000170: 	movq	(%r13), %rdi
    00000174: 	movl	$0x200, %esi
    00000179: 	addq	$0x8, %r13
    0000017d: 	callq	_ZdlPvm@PLT # Offset: 381
    00000182: 	cmpq	%r13, %rbx
    00000185: 	ja	.Ltmp1102 # Offset: 389
.Ltmp1101:
    00000187: 	movslq	init_value(%rip), %rbx
    0000018e: 	movdqa	0x20(%rsp), %xmm1
    00000194: 	movq	%rbp, %rsi
    00000197: 	leaq	0x70(%rsp), %r12
    0000019c: 	movdqa	0x30(%rsp), %xmm2
    000001a2: 	leaq	DATAat0x15940(%rip), %rdx
    000001a9: 	movq	%r12, %rdi
    000001ac: 	movq	%rbx, %xmm0
    000001b1: 	movq	%rbx, 0xe0(%rsp)
    000001b9: 	punpcklqdq	%xmm0, %xmm0
    000001bd: 	movaps	%xmm1, _Z7gLabelsB5cxx11+48(%rip)
    000001c4: 	movaps	%xmm2, _Z7gLabelsB5cxx11+64(%rip)
    000001cb: 	movaps	%xmm0, 0x90(%rsp)
    000001d3: 	movaps	%xmm0, 0xa0(%rsp)
    000001db: 	movaps	%xmm0, 0xb0(%rsp)
    000001e3: 	movaps	%xmm0, 0xc0(%rsp)
    000001eb: 	movaps	%xmm0, 0xd0(%rsp)
    000001f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 499
    000001f8: 	callq	clock@PLT # Offset: 504
    000001fd: 	leaq	0x90(%rsp), %r14
    00000205: 	movq	%rax, start_time(%rip)
    0000020c: 	movslq	iterations(%rip), %rax
    00000213: 	leaq	(%rax,%rax), %r13
    00000217: 	leaq	(%r13,%rax), %rsi
    0000021c: 	leaq	(,%rsi,4), %rdx
    00000224: 	leaq	(%rdx,%rax), %rcx
    00000228: 	leaq	(%rbx,%rcx,4), %rbx
    0000022c: 	movq	%rax, %rcx
    0000022f: 	movq	%rbx, %r11
    00000232: 	shlq	$0x4, %rcx
    00000236: 	movq	%rbx, 0x90(%rsp)
    0000023e: 	subq	%rdx, %r11
    00000241: 	leaq	(,%rax,4), %rdx
    00000249: 	movq	%r11, %rdi
    0000024c: 	movq	%r11, 0x98(%rsp)
    00000254: 	subq	%rdx, %rdi
    00000257: 	addq	%rax, %rdx
    0000025a: 	movq	%rdi, %r10
    0000025d: 	leaq	(%rax,%rdx,2), %r8
    00000261: 	movq	%rdi, 0xa0(%rsp)
    00000269: 	subq	%rcx, %r10
    0000026c: 	subq	%rax, %rcx
    0000026f: 	movq	%rdi, 0xb0(%rsp)
    00000277: 	movq	%r14, %rdi
    0000027a: 	movq	%r10, %r9
    0000027d: 	movq	%r10, 0xa8(%rsp)
    00000285: 	subq	%r8, %r9
    00000288: 	leaq	(%r9,%rsi,2), %r8
    0000028c: 	movq	%r9, 0xb8(%rsp)
    00000294: 	leaq	(%rcx,%r8), %rax
    00000298: 	leaq	(%rsi,%rsi,8), %rcx
    0000029c: 	movq	%r8, 0xc0(%rsp)
    000002a4: 	addq	%rax, %rcx
    000002a7: 	movq	%rax, 0xc8(%rsp)
    000002af: 	movq	%rcx, %rsi
    000002b2: 	movq	%rcx, %xmm0
    000002b7: 	subq	%r13, %rsi
    000002ba: 	movq	%rsi, %xmm5
    000002bf: 	addq	%rsi, %rdx
    000002c2: 	movq	%r12, %rsi
    000002c5: 	punpcklqdq	%xmm5, %xmm0
    000002c9: 	movq	%rdx, 0xe0(%rsp)
    000002d1: 	movaps	%xmm0, 0xd0(%rsp)
    000002d9: 	callq	_Z12check11_sumsImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 729
    000002de: 	movq	%r12, %rdi
    000002e1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 737
    000002e6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ed: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002f4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fb: 	je	.Ltmp1103 # Offset: 763
.Ltmp1129:
    00000301: 	movq	-0x20(%rax), %r13
    00000305: 	callq	clock@PLT # Offset: 773
    0000030a: 	pxor	%xmm0, %xmm0
    0000030e: 	movq	%rax, end_time(%rip)
    00000315: 	movq	%r13, %rdi
    00000318: 	subq	start_time(%rip), %rax
    0000031f: 	cvtsi2sd	%rax, %xmm0
    00000324: 	divsd	DATAat0x15c60(%rip), %xmm0
    0000032c: 	callq	_Z13record_resultdPKc # Offset: 812
    00000331: 	movq	0x70(%rsp), %rdi
    00000336: 	leaq	0x80(%rsp), %r13
    0000033e: 	cmpq	%r13, %rdi
    00000341: 	je	.Ltmp1104 # Offset: 833
    00000343: 	movq	0x80(%rsp), %rax
    0000034b: 	leaq	0x1(%rax), %rsi
    0000034f: 	callq	_ZdlPvm@PLT # Offset: 847
.Ltmp1104:
    00000354: 	movslq	init_value(%rip), %rax
    0000035b: 	leaq	DATAat0x15970(%rip), %rdx
    00000362: 	movq	%rbp, %rsi
    00000365: 	movq	%r12, %rdi
    00000368: 	movq	%rax, %xmm0
    0000036d: 	movq	%rax, 0xe0(%rsp)
    00000375: 	punpcklqdq	%xmm0, %xmm0
    00000379: 	movaps	%xmm0, 0x90(%rsp)
    00000381: 	movaps	%xmm0, 0xa0(%rsp)
    00000389: 	movaps	%xmm0, 0xb0(%rsp)
    00000391: 	movaps	%xmm0, 0xc0(%rsp)
    00000399: 	movaps	%xmm0, 0xd0(%rsp)
    000003a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 929
    000003a6: 	movq	%r12, %rsi
    000003a9: 	movq	%r14, %rdi
    000003ac: 	callq	_Z17test_array11_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 940
    000003b1: 	movq	0x70(%rsp), %rdi
    000003b6: 	cmpq	%r13, %rdi
    000003b9: 	je	.Ltmp1105 # Offset: 953
    000003bb: 	movq	0x80(%rsp), %rax
    000003c3: 	leaq	0x1(%rax), %rsi
    000003c7: 	callq	_ZdlPvm@PLT # Offset: 967
.Ltmp1105:
    000003cc: 	movslq	init_value(%rip), %rax
    000003d3: 	leaq	DATAat0x159a0(%rip), %rdx
    000003da: 	movq	%rbp, %rsi
    000003dd: 	movq	%r12, %rdi
    000003e0: 	movq	%rax, %xmm0
    000003e5: 	movq	%rax, 0xe0(%rsp)
    000003ed: 	punpcklqdq	%xmm0, %xmm0
    000003f1: 	movaps	%xmm0, 0x90(%rsp)
    000003f9: 	movaps	%xmm0, 0xa0(%rsp)
    00000401: 	movaps	%xmm0, 0xb0(%rsp)
    00000409: 	movaps	%xmm0, 0xc0(%rsp)
    00000411: 	movaps	%xmm0, 0xd0(%rsp)
    00000419: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1049
    0000041e: 	movq	%r12, %rsi
    00000421: 	movq	%r14, %rdi
    00000424: 	callq	_Z17test_array11_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1060
    00000429: 	movq	0x70(%rsp), %rdi
    0000042e: 	cmpq	%r13, %rdi
    00000431: 	je	.Ltmp1106 # Offset: 1073
    00000433: 	movq	0x80(%rsp), %rax
    0000043b: 	leaq	0x1(%rax), %rsi
    0000043f: 	callq	_ZdlPvm@PLT # Offset: 1087
.Ltmp1106:
    00000444: 	movslq	init_value(%rip), %rax
    0000044b: 	leaq	DATAat0x159d0(%rip), %rdx
    00000452: 	movq	%rbp, %rsi
    00000455: 	movq	%r12, %rdi
    00000458: 	movq	%rax, %xmm0
    0000045d: 	movq	%rax, 0xe0(%rsp)
    00000465: 	punpcklqdq	%xmm0, %xmm0
    00000469: 	movaps	%xmm0, 0x90(%rsp)
    00000471: 	movaps	%xmm0, 0xa0(%rsp)
    00000479: 	movaps	%xmm0, 0xb0(%rsp)
    00000481: 	movaps	%xmm0, 0xc0(%rsp)
    00000489: 	movaps	%xmm0, 0xd0(%rsp)
    00000491: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1169
    00000496: 	movq	%r12, %rsi
    00000499: 	movq	%r14, %rdi
    0000049c: 	callq	_Z16test_array11_argImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1180
    000004a1: 	movq	0x70(%rsp), %rdi
    000004a6: 	cmpq	%r13, %rdi
    000004a9: 	je	.Ltmp1107 # Offset: 1193
    000004ab: 	movq	0x80(%rsp), %rax
    000004b3: 	leaq	0x1(%rax), %rsi
    000004b7: 	callq	_ZdlPvm@PLT # Offset: 1207
.Ltmp1107:
    000004bc: 	movslq	init_value(%rip), %rbx
    000004c3: 	leaq	DATAat0x159f8(%rip), %rdx
    000004ca: 	movq	%rbp, %rsi
    000004cd: 	movq	%r12, %rdi
    000004d0: 	movq	%rbx, %xmm0
    000004d5: 	movq	%rbx, 0xe0(%rsp)
    000004dd: 	punpcklqdq	%xmm0, %xmm0
    000004e1: 	movaps	%xmm0, 0x90(%rsp)
    000004e9: 	movaps	%xmm0, 0xa0(%rsp)
    000004f1: 	movaps	%xmm0, 0xb0(%rsp)
    000004f9: 	movaps	%xmm0, 0xc0(%rsp)
    00000501: 	movaps	%xmm0, 0xd0(%rsp)
    00000509: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1289
    0000050e: 	callq	clock@PLT # Offset: 1294
    00000513: 	movq	%rax, start_time(%rip)
    0000051a: 	movslq	iterations(%rip), %rax
    00000521: 	leaq	(%rax,%rax,2), %rdx
    00000525: 	leaq	(,%rax,4), %rdi
    0000052d: 	shlq	$0x2, %rdx
    00000531: 	leaq	(%rdx,%rax), %rcx
    00000535: 	shlq	$0x4, %rax
    00000539: 	leaq	(%rbx,%rcx,4), %rsi
    0000053d: 	movq	%rsi, %rcx
    00000540: 	movq	%rsi, 0x90(%rsp)
    00000548: 	subq	%rdx, %rcx
    0000054b: 	movq	%rcx, %rdx
    0000054e: 	movq	%rcx, 0x98(%rsp)
    00000556: 	subq	%rdi, %rdx
    00000559: 	movq	%rdx, %rcx
    0000055c: 	movq	%rdx, 0xa0(%rsp)
    00000564: 	subq	%rax, %rcx
    00000567: 	movslq	init_value(%rip), %rax
    0000056e: 	movq	%rdx, 0xb0(%rsp)
    00000576: 	movq	%rcx, 0xa8(%rsp)
    0000057e: 	cmpq	%rax, %rbx
    00000581: 	jne	.Ltmp1108 # Offset: 1409
.Ltmp1128:
    00000587: 	movq	%r12, %rdi
    0000058a: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1418
    0000058f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000596: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000059d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005a4: 	je	.Ltmp1109 # Offset: 1444
.Ltmp1130:
    000005aa: 	movq	-0x20(%rax), %r15
    000005ae: 	callq	clock@PLT # Offset: 1454
    000005b3: 	pxor	%xmm0, %xmm0
    000005b7: 	movq	%rax, end_time(%rip)
    000005be: 	movq	%r15, %rdi
    000005c1: 	subq	start_time(%rip), %rax
    000005c8: 	cvtsi2sd	%rax, %xmm0
    000005cd: 	divsd	DATAat0x15c60(%rip), %xmm0
    000005d5: 	callq	_Z13record_resultdPKc # Offset: 1493
    000005da: 	movq	0x70(%rsp), %rdi
    000005df: 	cmpq	%r13, %rdi
    000005e2: 	je	.Ltmp1110 # Offset: 1506
    000005e4: 	movq	0x80(%rsp), %rax
    000005ec: 	leaq	0x1(%rax), %rsi
    000005f0: 	callq	_ZdlPvm@PLT # Offset: 1520
.Ltmp1110:
    000005f5: 	movslq	init_value(%rip), %rax
    000005fc: 	leaq	DATAat0x15a30(%rip), %rdx
    00000603: 	movq	%rbp, %rsi
    00000606: 	movq	%r12, %rdi
    00000609: 	movq	%rax, %xmm0
    0000060e: 	movq	%rax, 0xe0(%rsp)
    00000616: 	punpcklqdq	%xmm0, %xmm0
    0000061a: 	movaps	%xmm0, 0x90(%rsp)
    00000622: 	movaps	%xmm0, 0xa0(%rsp)
    0000062a: 	movaps	%xmm0, 0xb0(%rsp)
    00000632: 	movaps	%xmm0, 0xc0(%rsp)
    0000063a: 	movaps	%xmm0, 0xd0(%rsp)
    00000642: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1602
    00000647: 	movq	%r12, %rsi
    0000064a: 	movq	%r14, %rdi
    0000064d: 	callq	_Z16test_array5_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1613
    00000652: 	movq	0x70(%rsp), %rdi
    00000657: 	cmpq	%r13, %rdi
    0000065a: 	je	.Ltmp1111 # Offset: 1626
    0000065c: 	movq	0x80(%rsp), %rax
    00000664: 	leaq	0x1(%rax), %rsi
    00000668: 	callq	_ZdlPvm@PLT # Offset: 1640
.Ltmp1111:
    0000066d: 	movslq	init_value(%rip), %rax
    00000674: 	leaq	DATAat0x15a68(%rip), %rdx
    0000067b: 	movq	%rbp, %rsi
    0000067e: 	movq	%r12, %rdi
    00000681: 	movq	%rax, %xmm0
    00000686: 	movq	%rax, 0xe0(%rsp)
    0000068e: 	punpcklqdq	%xmm0, %xmm0
    00000692: 	movaps	%xmm0, 0x90(%rsp)
    0000069a: 	movaps	%xmm0, 0xa0(%rsp)
    000006a2: 	movaps	%xmm0, 0xb0(%rsp)
    000006aa: 	movaps	%xmm0, 0xc0(%rsp)
    000006b2: 	movaps	%xmm0, 0xd0(%rsp)
    000006ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1722
    000006bf: 	movq	%r12, %rsi
    000006c2: 	movq	%r14, %rdi
    000006c5: 	callq	_Z16test_array5_arg1ImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1733
    000006ca: 	movq	0x70(%rsp), %rdi
    000006cf: 	cmpq	%r13, %rdi
    000006d2: 	je	.Ltmp1112 # Offset: 1746
    000006d4: 	movq	0x80(%rsp), %rax
    000006dc: 	leaq	0x1(%rax), %rsi
    000006e0: 	callq	_ZdlPvm@PLT # Offset: 1760
.Ltmp1112:
    000006e5: 	movslq	init_value(%rip), %rax
    000006ec: 	leaq	DATAat0x15aa0(%rip), %rdx
    000006f3: 	movq	%rbp, %rsi
    000006f6: 	movq	%r12, %rdi
    000006f9: 	movq	%rax, %xmm0
    000006fe: 	movq	%rax, 0xe0(%rsp)
    00000706: 	punpcklqdq	%xmm0, %xmm0
    0000070a: 	movaps	%xmm0, 0x90(%rsp)
    00000712: 	movaps	%xmm0, 0xa0(%rsp)
    0000071a: 	movaps	%xmm0, 0xb0(%rsp)
    00000722: 	movaps	%xmm0, 0xc0(%rsp)
    0000072a: 	movaps	%xmm0, 0xd0(%rsp)
    00000732: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1842
    00000737: 	movq	%r12, %rsi
    0000073a: 	movq	%r14, %rdi
    0000073d: 	callq	_Z15test_array5_argImEvPT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1853
    00000742: 	movq	0x70(%rsp), %rdi
    00000747: 	cmpq	%r13, %rdi
    0000074a: 	je	.Ltmp1113 # Offset: 1866
    0000074c: 	movq	0x80(%rsp), %rax
    00000754: 	leaq	0x1(%rax), %rsi
    00000758: 	callq	_ZdlPvm@PLT # Offset: 1880
.Ltmp1113:
    0000075d: 	leaq	DATAat0x15ad0(%rip), %rdx
    00000764: 	movq	%rbp, %rsi
    00000767: 	movq	%r12, %rdi
    0000076a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1898
    0000076f: 	movq	%r12, %rdi
    00000772: 	callq	_Z19test_array11_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1906
    00000777: 	movq	0x70(%rsp), %rdi
    0000077c: 	cmpq	%r13, %rdi
    0000077f: 	je	.Ltmp1114 # Offset: 1919
    00000781: 	movq	0x80(%rsp), %rax
    00000789: 	leaq	0x1(%rax), %rsi
    0000078d: 	callq	_ZdlPvm@PLT # Offset: 1933
.Ltmp1114:
    00000792: 	leaq	DATAat0x15af8(%rip), %rdx
    00000799: 	movq	%rbp, %rsi
    0000079c: 	movq	%r12, %rdi
    0000079f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1951
    000007a4: 	movq	%r12, %rdi
    000007a7: 	callq	_Z19test_array11_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1959
    000007ac: 	movq	0x70(%rsp), %rdi
    000007b1: 	cmpq	%r13, %rdi
    000007b4: 	je	.Ltmp1115 # Offset: 1972
    000007b6: 	movq	0x80(%rsp), %rax
    000007be: 	leaq	0x1(%rax), %rsi
    000007c2: 	callq	_ZdlPvm@PLT # Offset: 1986
.Ltmp1115:
    000007c7: 	leaq	DATAat0x15b28(%rip), %rdx
    000007ce: 	movq	%rbp, %rsi
    000007d1: 	movq	%r12, %rdi
    000007d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2004
    000007d9: 	movq	%r12, %rdi
    000007dc: 	callq	_Z19test_array11_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2012
    000007e1: 	movq	0x70(%rsp), %rdi
    000007e6: 	cmpq	%r13, %rdi
    000007e9: 	je	.Ltmp1116 # Offset: 2025
    000007eb: 	movq	0x80(%rsp), %rax
    000007f3: 	leaq	0x1(%rax), %rsi
    000007f7: 	callq	_ZdlPvm@PLT # Offset: 2039
.Ltmp1116:
    000007fc: 	leaq	DATAat0x15b58(%rip), %rdx
    00000803: 	movq	%rbp, %rsi
    00000806: 	movq	%r12, %rdi
    00000809: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2057
    0000080e: 	movq	%r12, %rdi
    00000811: 	callq	_Z18test_array11_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2065
    00000816: 	movq	0x70(%rsp), %rdi
    0000081b: 	cmpq	%r13, %rdi
    0000081e: 	je	.Ltmp1117 # Offset: 2078
    00000820: 	movq	0x80(%rsp), %rax
    00000828: 	leaq	0x1(%rax), %rsi
    0000082c: 	callq	_ZdlPvm@PLT # Offset: 2092
.Ltmp1117:
    00000831: 	leaq	DATAat0x15b80(%rip), %rdx
    00000838: 	movq	%rbp, %rsi
    0000083b: 	movq	%r12, %rdi
    0000083e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2110
    00000843: 	movq	%r12, %rdi
    00000846: 	callq	_Z18test_array5_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2118
    0000084b: 	movq	0x70(%rsp), %rdi
    00000850: 	cmpq	%r13, %rdi
    00000853: 	je	.Ltmp1118 # Offset: 2131
    00000855: 	movq	0x80(%rsp), %rax
    0000085d: 	leaq	0x1(%rax), %rsi
    00000861: 	callq	_ZdlPvm@PLT # Offset: 2145
.Ltmp1118:
    00000866: 	leaq	DATAat0x15bb0(%rip), %rdx
    0000086d: 	movq	%rbp, %rsi
    00000870: 	movq	%r12, %rdi
    00000873: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2163
    00000878: 	movq	%r12, %rdi
    0000087b: 	callq	_Z18test_array5_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2171
    00000880: 	movq	0x70(%rsp), %rdi
    00000885: 	cmpq	%r13, %rdi
    00000888: 	je	.Ltmp1119 # Offset: 2184
    0000088a: 	movq	0x80(%rsp), %rax
    00000892: 	leaq	0x1(%rax), %rsi
    00000896: 	callq	_ZdlPvm@PLT # Offset: 2198
.Ltmp1119:
    0000089b: 	leaq	DATAat0x15be0(%rip), %rdx
    000008a2: 	movq	%rbp, %rsi
    000008a5: 	movq	%r12, %rdi
    000008a8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2216
    000008ad: 	movq	%r12, %rdi
    000008b0: 	callq	_Z18test_array5_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2224
    000008b5: 	movq	0x70(%rsp), %rdi
    000008ba: 	cmpq	%r13, %rdi
    000008bd: 	je	.Ltmp1120 # Offset: 2237
    000008bf: 	movq	0x80(%rsp), %rax
    000008c7: 	leaq	0x1(%rax), %rsi
    000008cb: 	callq	_ZdlPvm@PLT # Offset: 2251
.Ltmp1120:
    000008d0: 	leaq	DATAat0x15c10(%rip), %rdx
    000008d7: 	movq	%rbp, %rsi
    000008da: 	movq	%r12, %rdi
    000008dd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2269
    000008e2: 	movq	%r12, %rdi
    000008e5: 	callq	_Z17test_array5_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2277
    000008ea: 	movq	0x70(%rsp), %rdi
    000008ef: 	cmpq	%r13, %rdi
    000008f2: 	je	.Ltmp1121 # Offset: 2290
    000008f4: 	movq	0x80(%rsp), %rax
    000008fc: 	leaq	0x1(%rax), %rsi
    00000900: 	callq	_ZdlPvm@PLT # Offset: 2304
.Ltmp1121:
    00000905: 	movq	0x50(%rsp), %rdi
    0000090a: 	leaq	0x60(%rsp), %rax
    0000090f: 	cmpq	%rax, %rdi
    00000912: 	je	.Ltmp1122 # Offset: 2322
    00000914: 	movq	0x60(%rsp), %rax
    00000919: 	leaq	0x1(%rax), %rsi
    0000091d: 	callq	_ZdlPvm@PLT # Offset: 2333
.Ltmp1122:
    00000922: 	movq	0xe8(%rsp), %rax
    0000092a: 	subq	%fs:0x28, %rax
    00000933: 	jne	.Ltmp1123 # Offset: 2355
    00000939: 	addq	$0xf8, %rsp
    00000940: 	popq	%rbx
    00000941: 	popq	%rbp
    00000942: 	popq	%r12
    00000944: 	popq	%r13
    00000946: 	popq	%r14
    00000948: 	popq	%r15
    0000094a: 	retq # Offset: 2378
    0000094b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1124:
    00000950: 	addq	$0x20, %r12
.Ltmp1094:
    00000954: 	cmpq	%r12, 0x18(%rsp)
    00000959: 	je	.Ltmp1098 # Offset: 2393
.Ltmp1125:
    0000095f: 	movq	(%r12), %rdi
    00000963: 	leaq	0x10(%r12), %rax
    00000968: 	cmpq	%rax, %rdi
    0000096b: 	je	.Ltmp1124 # Offset: 2411
    0000096d: 	movq	0x10(%r12), %rax
    00000972: 	addq	$0x20, %r12
    00000976: 	leaq	0x1(%rax), %rsi
    0000097a: 	callq	_ZdlPvm@PLT # Offset: 2426
    0000097f: 	cmpq	%r12, 0x18(%rsp)
    00000984: 	jne	.Ltmp1125 # Offset: 2436
    00000986: 	jmp	.Ltmp1098 # Offset: 2438
    0000098b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1091:
    00000990: 	addq	$0x20, %r14
    00000994: 	cmpq	%rbx, %r14
    00000997: 	jne	.Ltmp1092 # Offset: 2455
    0000099d: 	jmp	.Ltmp1126 # Offset: 2461
    000009a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1096:
    000009a8: 	addq	$0x20, %r12
    000009ac: 	jmp	.Ltmp1127 # Offset: 2476
    000009b1: 	nopl	(%rax) # Size: 7
.Ltmp1099:
    000009b8: 	addq	$0x20, %r15
    000009bc: 	cmpq	%r15, 0x18(%rsp)
    000009c1: 	jne	.Ltmp1100 # Offset: 2497
    000009c7: 	jmp	.Ltmp1098 # Offset: 2503
.Ltmp1108:
    000009cc: 	movq	0x70(%rsp), %rdx
    000009d1: 	leaq	DATAat0x158f3(%rip), %rsi
    000009d8: 	movl	$0x1, %edi
    000009dd: 	xorl	%eax, %eax
    000009df: 	callq	__printf_chk@PLT # Offset: 2527
    000009e4: 	jmp	.Ltmp1128 # Offset: 2532
.Ltmp1103:
    000009e9: 	movq	-0x8(%rdx), %rax
    000009ed: 	addq	$0x200, %rax
    000009f3: 	jmp	.Ltmp1129 # Offset: 2547
.Ltmp1109:
    000009f8: 	movq	-0x8(%rdx), %rax
    000009fc: 	addq	$0x200, %rax
    00000a02: 	jmp	.Ltmp1130 # Offset: 2562
.Ltmp1123:
    00000a07: 	callq	__stack_chk_fail@PLT # Offset: 2567
    00000a0c: 	endbr64
    00000a10: 	movq	%rax, %rbp
    00000a13: 	jmp	.Ltmp1131 # Offset: 2579
    00000a15: 	endbr64
    00000a19: 	movq	%rax, %rbp
    00000a1c: 	jmp	.Ltmp1132 # Offset: 2588
    00000a1e: 	endbr64
.Ltmp1134:
    00000a22: 	movq	%rax, %rbp
    00000a25: 	jmp	.Ltmp1133 # Offset: 2597
    00000a2a: 	endbr64
    00000a2e: 	jmp	.Ltmp1134 # Offset: 2606
    00000a30: 	endbr64
    00000a34: 	jmp	.Ltmp1134 # Offset: 2612
    00000a36: 	endbr64
    00000a3a: 	jmp	.Ltmp1134 # Offset: 2618
    00000a3c: 	endbr64
    00000a40: 	jmp	.Ltmp1134 # Offset: 2624
    00000a42: 	endbr64
    00000a46: 	jmp	.Ltmp1134 # Offset: 2630
    00000a48: 	endbr64
    00000a4c: 	jmp	.Ltmp1134 # Offset: 2636
    00000a4e: 	endbr64
    00000a52: 	jmp	.Ltmp1134 # Offset: 2642
    00000a54: 	endbr64
    00000a58: 	jmp	.Ltmp1134 # Offset: 2648
.Ltmp1132:
    00000a5a: 	movq	0x70(%rsp), %rdi
    00000a5f: 	leaq	0x80(%rsp), %rax
    00000a67: 	cmpq	%rax, %rdi
    00000a6a: 	je	.Ltmp1131 # Offset: 2666
.Ltmp1136:
    00000a6c: 	movq	0x80(%rsp), %rax
    00000a74: 	leaq	0x1(%rax), %rsi
    00000a78: 	callq	_ZdlPvm@PLT # Offset: 2680
.Ltmp1131:
    00000a7d: 	movq	0x50(%rsp), %rdi
    00000a82: 	leaq	0x60(%rsp), %rax
    00000a87: 	cmpq	%rax, %rdi
    00000a8a: 	je	.Ltmp1135 # Offset: 2698
    00000a8c: 	movq	0x60(%rsp), %rax
    00000a91: 	leaq	0x1(%rax), %rsi
    00000a95: 	callq	_ZdlPvm@PLT # Offset: 2709
.Ltmp1135:
    00000a9a: 	movq	%rbp, %rdi
    00000a9d: 	callq	_Unwind_Resume@PLT # Offset: 2717
    00000aa2: 	endbr64
    00000aa6: 	jmp	.Ltmp1134 # Offset: 2726
    00000aab: 	endbr64
    00000aaf: 	jmp	.Ltmp1134 # Offset: 2735
    00000ab4: 	endbr64
    00000ab8: 	jmp	.Ltmp1134 # Offset: 2744
    00000abd: 	endbr64
    00000ac1: 	jmp	.Ltmp1134 # Offset: 2753
    00000ac6: 	endbr64
    00000aca: 	jmp	.Ltmp1134 # Offset: 2762
    00000acf: 	endbr64
    00000ad3: 	jmp	.Ltmp1134 # Offset: 2771
.Ltmp1133:
    00000ad8: 	movq	0x70(%rsp), %rdi
    00000add: 	cmpq	%r13, %rdi
    00000ae0: 	jne	.Ltmp1136 # Offset: 2784
    00000ae2: 	jmp	.Ltmp1131 # Offset: 2786
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_Z18test_array5_globalIsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x14810
  Size        : 0x2b3
  MaxSize     : 0x2b3
  Offset      : 0x14810
  Section     : .text
  Orc Section : .local.text._Z18test_array5_globalIsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	testl	%edx, %edx
    00000035: 	jle	.Ltmp1137 # Offset: 53
    0000003b: 	leal	-0x1(%rdx), %eax
    0000003e: 	movzwl	data16(%rip), %ecx
    00000045: 	movzwl	data16+4(%rip), %r10d
    0000004d: 	leal	(%rax,%rax,2), %esi
    00000050: 	leal	(%rax,%rax,4), %edi
    00000053: 	movzwl	data16+6(%rip), %r8d
    0000005b: 	leal	(%rax,%rsi,4), %esi
    0000005e: 	leal	(%rax,%rax,8), %eax
    00000061: 	leal	0x34(%rcx,%rsi,4), %esi
    00000065: 	shll	$0x2, %eax
    00000068: 	movzwl	data16+2(%rip), %ecx
    0000006f: 	leal	0x14(%r8,%rdi,4), %r8d
    00000074: 	addl	%eax, %r10d
    00000077: 	addw	data16+8(%rip), %ax
    0000007e: 	movw	%si, data16(%rip)
    00000085: 	addl	$0x24, %r10d
    00000089: 	leal	0x28(%rcx,%rdi,8), %edi
    0000008d: 	addl	$0x24, %eax
    00000090: 	movw	%r8w, data16+6(%rip)
    00000098: 	movw	%r10w, data16+4(%rip)
    000000a0: 	movw	%di, data16+2(%rip)
    000000a7: 	movw	%ax, data16+8(%rip)
.Ltmp1150:
    000000ae: 	leal	(%rdx,%rdx,2), %r9d
    000000b2: 	shll	$0x2, %r9d
    000000b6: 	leal	(%r9,%rdx), %ecx
    000000ba: 	shll	$0x2, %ecx
    000000bd: 	addw	init_value(%rip), %cx
    000000c4: 	movl	%ecx, %r11d
    000000c7: 	subl	%r9d, %r11d
    000000ca: 	cmpw	%si, %cx
    000000cd: 	jne	.Ltmp1138 # Offset: 205
    000000cf: 	cmpw	%di, %r11w
    000000d3: 	jne	.Ltmp1138 # Offset: 211
    000000d5: 	leal	(,%rdx,4), %ecx
    000000dc: 	shll	$0x4, %edx
    000000df: 	subl	%ecx, %r11d
    000000e2: 	movl	%r11d, %ecx
    000000e5: 	subl	%edx, %ecx
    000000e7: 	cmpw	%r8w, %cx
    000000eb: 	setne	%dl
    000000ee: 	cmpw	%r10w, %r11w
    000000f2: 	setne	%cl
    000000f5: 	orb	%cl, %dl
    000000f7: 	jne	.Ltmp1138 # Offset: 247
    000000f9: 	cmpw	%ax, %r11w
    000000fd: 	je	.Ltmp1139 # Offset: 253
.Ltmp1138:
    000000ff: 	movq	(%rbp), %rdx
    00000103: 	leaq	DATAat0x158f3(%rip), %rsi
    0000010a: 	movl	$0x1, %edi
    0000010f: 	xorl	%eax, %eax
    00000111: 	callq	__printf_chk@PLT # Offset: 273
.Ltmp1139:
    00000116: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000011d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000124: 	subq	$0x20, %rax
    00000128: 	cmpq	%rax, %rbx
    0000012b: 	je	.Ltmp1140 # Offset: 299
    00000131: 	leaq	0x10(%rbx), %rdi
    00000135: 	movq	0x8(%rbp), %r12
    00000139: 	movq	%rdi, (%rbx)
    0000013c: 	movq	(%rbp), %r13
    00000140: 	movq	%r13, %rax
    00000143: 	addq	%r12, %rax
    00000146: 	je	.Ltmp1141 # Offset: 326
    00000148: 	testq	%r13, %r13
    0000014b: 	je	.Ltmp1142 # Offset: 331
.Ltmp1141:
    00000151: 	movq	%r12, (%rsp)
    00000155: 	cmpq	$0xf, %r12
    00000159: 	ja	.Ltmp1143 # Offset: 345
    0000015f: 	cmpq	$0x1, %r12
    00000163: 	jne	.Ltmp1144 # Offset: 355
    00000169: 	movzbl	(%r13), %eax
    0000016e: 	movb	%al, 0x10(%rbx)
.Ltmp1147:
    00000171: 	movq	%r12, 0x8(%rbx)
    00000175: 	movb	$0x0, (%rdi,%r12)
    0000017a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000188: 	addq	$0x20, %rax
    0000018c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000193: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000019a: 	je	.Ltmp1145 # Offset: 410
.Ltmp1148:
    000001a0: 	movq	-0x20(%rax), %rbp
    000001a4: 	callq	clock@PLT # Offset: 420
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	movq	0x8(%rsp), %rdx
    000001b5: 	subq	%fs:0x28, %rdx
    000001be: 	jne	.Ltmp1146 # Offset: 446
    000001c4: 	subq	start_time(%rip), %rax
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	cvtsi2sd	%rax, %xmm0
    000001d7: 	divsd	DATAat0x15c60(%rip), %xmm0
    000001df: 	addq	$0x18, %rsp
    000001e3: 	popq	%rbx
    000001e4: 	popq	%rbp
    000001e5: 	popq	%r12
    000001e7: 	popq	%r13
    000001e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp1143:
    000001f0: 	movq	%rbx, %rdi
    000001f3: 	movq	%rsp, %rsi
    000001f6: 	xorl	%edx, %edx
    000001f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 504
    000001fd: 	movq	%rax, (%rbx)
    00000200: 	movq	%rax, %rdi
    00000203: 	movq	(%rsp), %rax
    00000207: 	movq	%rax, 0x10(%rbx)
.Ltmp1149:
    0000020b: 	movq	%r12, %rdx
    0000020e: 	movq	%r13, %rsi
    00000211: 	callq	memcpy@PLT # Offset: 529
    00000216: 	movq	(%rsp), %r12
    0000021a: 	movq	(%rbx), %rdi
    0000021d: 	jmp	.Ltmp1147 # Offset: 541
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1140:
    00000228: 	movq	%rbp, %rsi
    0000022b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000232: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 562
    00000237: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000245: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024c: 	jne	.Ltmp1148 # Offset: 588
.Ltmp1145:
    00000252: 	movq	-0x8(%rdx), %rax
    00000256: 	addq	$0x200, %rax
    0000025c: 	jmp	.Ltmp1148 # Offset: 604
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp1144:
    00000268: 	testq	%r12, %r12
    0000026b: 	je	.Ltmp1147 # Offset: 619
    00000271: 	jmp	.Ltmp1149 # Offset: 625
    00000273: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1137:
    00000278: 	movzwl	data16(%rip), %esi
    0000027f: 	movzwl	data16+2(%rip), %edi
    00000286: 	movzwl	data16+4(%rip), %r10d
    0000028e: 	movzwl	data16+6(%rip), %r8d
    00000296: 	movzwl	data16+8(%rip), %eax
    0000029d: 	jmp	.Ltmp1150 # Offset: 669
.Ltmp1142:
    000002a2: 	leaq	DATAat0x15008(%rip), %rdi
    000002a9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 681
.Ltmp1146:
    000002ae: 	callq	__stack_chk_fail@PLT # Offset: 686
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_array5_globalIsXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_fini" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x14ac4
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x14ac4
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 133 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 794 instructions were shortened
BOLT-INFO: removed 263 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 126 out of 159 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x20395c
