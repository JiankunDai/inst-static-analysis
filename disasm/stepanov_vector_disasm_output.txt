BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x19030, which lies outside .bss
BOLT-WARNING: split function detected on input : _Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x18ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x1440
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x1440
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x151b6(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x1519c(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIdEvv # Offset: 100
    00000069: 	movl	iterations(%rip), %eax
    0000006f: 	leal	(%rax,%rax,2), %eax
    00000072: 	movl	%eax, iterations(%rip)
    00000078: 	callq	_Z11TestOneTypeIiEvv # Offset: 120
    0000007d: 	callq	_Z11TestOneTypeImEvv # Offset: 125
    00000082: 	popq	%rbx
    00000083: 	xorl	%eax, %eax
    00000085: 	popq	%rbp
    00000086: 	popq	%r12
    00000088: 	popq	%r13
    0000008a: 	popq	%r14
    0000008c: 	retq # Offset: 140
.Ltmp3:
    0000008d: 	movq	0x8(%r14), %rdi
    00000091: 	movl	$0xa, %edx
    00000096: 	xorl	%esi, %esi
    00000098: 	callq	strtol@PLT # Offset: 152
    0000009d: 	movl	%eax, iterations(%rip)
    000000a3: 	cmpl	$0x2, %r13d
    000000a7: 	jle	.Ltmp4 # Offset: 167
    000000a9: 	movq	0x10(%r14), %rdi
    000000ad: 	xorl	%esi, %esi
    000000af: 	callq	strtod@PLT # Offset: 175
    000000b4: 	movsd	%xmm0, init_value(%rip)
    000000bc: 	jmp	.Ltmp4 # Offset: 188
.Ltmp1:
    000000be: 	leaq	DATAat0x1519c(%rip), %rsi
    000000c5: 	movl	$0x1, %edi
    000000ca: 	xorl	%eax, %eax
    000000cc: 	callq	__printf_chk@PLT # Offset: 204
    000000d1: 	jmp	.Ltmp4 # Offset: 209
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 6
  State       : disassembled
  Address     : 0x1600
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1600
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x18fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1630
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1630
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x18fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1660
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1660
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x18ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16a0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x16a0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 10
  State       : disassembled
  Address     : 0x16e0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16e0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/stepanov_vector.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x16f0
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x16f0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp9 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp10 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp11 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp13:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp12 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp11:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp13 # Offset: 131
    00000085: 	jmp	.Ltmp14 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp10:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp14:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp13 # Offset: 192
.Ltmp12:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp9:
    000000c7: 	leaq	DATAat0x15008(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x17d0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x17d0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp15 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp16 # Offset: 38
.Ltmp15:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp17 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp16:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp17:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x15038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1870
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1870
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp18 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp19 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp20:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp20 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp33:
    00000069: 	leaq	DATAat0x151b8(%rip), %rbp
    00000070: 	leaq	DATAat0x15058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x15098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp21 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x15640(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x150c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x15638(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp22 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp26:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp23 # Offset: 244
    000000fa: 	movq	DATAat0x15628(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp27:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x15628(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp24 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp24:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x1519d(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x15640(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp25 # Offset: 398
.Ltmp22:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp26 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp27 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp23:
    000001c8: 	movq	DATAat0x15630(%rip), %rsi
    000001cf: 	movq	DATAat0x15628(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp24 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp25:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp21 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp28 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp29:
    00000210: 	addq	$0x10, %rax
.Ltmp28:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp29 # Offset: 542
.Ltmp34:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x150f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp30 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp31 # Offset: 592
.Ltmp30:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp18:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp31:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp32:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp32 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x15178(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp18 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp19:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp33 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp21:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp34 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1ba0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1ba0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp35 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp36 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp37:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp37 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp42:
    0000006a: 	leaq	DATAat0x151b8(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x15120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x1519e(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x151b8(%rip), %r8
    000000a1: 	leaq	DATAat0x1518c(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp38 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp39:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x1519d(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp39 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp38 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp40 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp41:
    00000140: 	addq	$0x10, %rax
.Ltmp40:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp41 # Offset: 334
.Ltmp43:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x150f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp35:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp36:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp42 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp38:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp43 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1d50
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1d50
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1d70
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1d70
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x15638(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1db0
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1db0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1dc0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1dc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1e10
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1e10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1e60
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1e60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1e90
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1e90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1ec0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1ec0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1ef0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1ef0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1f20
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1f20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1f50
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1f50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1f80
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1f80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1fb0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1fb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x1fe0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1fe0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x2010
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x2010
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2040
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2070
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x2070
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x20b0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x20e0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x20e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2110
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2110
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2140
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2140
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x2170
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2170
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x21a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x21a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x21d0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x21d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x2200
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2200
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2230
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2230
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2260
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2260
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x2290
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2290
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 44
  State       : disassembled
  Address     : 0x2790
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x2790
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp73 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp76:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp75:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp74 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp75 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp76 # Offset: 142
.Ltmp73:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp77 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp78 # Offset: 164
.Ltmp81:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp79 # Offset: 177
.Ltmp80:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp78 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp80 # Offset: 214
.Ltmp79:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp81 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp82 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp84:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp83 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp83:
    0000010a: 	addq	$0x20, %r13
.Ltmp78:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp84 # Offset: 275
.Ltmp82:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp85 # Offset: 283
.Ltmp91:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp86 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp87:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp87 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp86:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp74:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp75 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp76 # Offset: 389
    0000018b: 	jmp	.Ltmp73 # Offset: 395
.Ltmp77:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp82 # Offset: 405
.Ltmp90:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp88 # Offset: 422
.Ltmp89:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp82 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp89 # Offset: 463
.Ltmp88:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp90 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp91 # Offset: 482
.Ltmp85:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_vector.cpp/1
  Number      : 45
  State       : disassembled
  Address     : 0x2990
  Size        : 0x1de
  MaxSize     : 0x1e0
  Offset      : 0x2990
  Section     : .text
  Orc Section : .local.text._Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	pushq	%r15
    00000002: 	leaq	DATAat0x151ba(%rip), %r15
    00000009: 	pushq	%r14
    0000000b: 	xorl	%r14d, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movq	%rcx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rdi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdx, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%r8, 0x8(%rsp)
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %r11d
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	testl	%r11d, %r11d
    0000003f: 	jle	.Ltmp92 # Offset: 63
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp103:
    00000048: 	movq	0x8(%rbp), %rcx
    0000004c: 	movq	0x8(%r12), %rdx
    00000051: 	movq	0x8(%rbx), %rsi
    00000055: 	cmpq	%rdx, %rcx
    00000058: 	je	.Ltmp93 # Offset: 88
    0000005a: 	subq	%rdx, %rcx
    0000005d: 	leaq	0x8(%rdx), %rax
    00000061: 	leaq	-0x8(%rcx), %rdi
    00000065: 	cmpq	%rax, %rsi
    00000068: 	je	.Ltmp94 # Offset: 104
    0000006e: 	cmpq	$0x10, %rdi
    00000072: 	jbe	.Ltmp94 # Offset: 114
    00000078: 	shrq	$0x3, %rdi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	addq	$0x1, %rdi
    00000082: 	movq	%rdi, %rcx
    00000085: 	shrq	%rcx
    00000088: 	shlq	$0x4, %rcx
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp95:
    00000090: 	movdqu	(%rdx,%rax), %xmm1
    00000095: 	movups	%xmm1, (%rsi,%rax)
    00000099: 	addq	$0x10, %rax
    0000009d: 	cmpq	%rcx, %rax
    000000a0: 	jne	.Ltmp95 # Offset: 160
    000000a2: 	movq	%rdi, %rax
    000000a5: 	andq	$-0x2, %rax
    000000a9: 	leaq	(,%rax,8), %rcx
    000000b1: 	addq	%rcx, %rdx
    000000b4: 	addq	%rsi, %rcx
    000000b7: 	cmpq	%rax, %rdi
    000000ba: 	je	.Ltmp93 # Offset: 186
    000000bc: 	movq	(%rdx), %rax
    000000bf: 	movq	%rax, (%rcx)
.Ltmp93:
    000000c2: 	movq	0x8(%r13), %r10
    000000c6: 	leaq	0x8(%rsi), %r8
    000000ca: 	cmpq	%r10, %rsi
    000000cd: 	je	.Ltmp96 # Offset: 205
    000000cf: 	cmpq	%r8, %r10
    000000d2: 	je	.Ltmp96 # Offset: 210
    000000d4: 	movq	%r8, %r9
    000000d7: 	movq	(%r9), %rdi
    000000da: 	movq	%r9, %rax
    000000dd: 	cmpq	%r9, %rsi
    000000e0: 	jne	.Ltmp97 # Offset: 224
    000000e2: 	jmp	.Ltmp98 # Offset: 226
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp99:
    000000e8: 	movq	%rcx, 0x8(%rax)
    000000ec: 	cmpq	%rax, %rsi
    000000ef: 	je	.Ltmp98 # Offset: 239
.Ltmp97:
    000000f1: 	movq	%rax, %rdx
    000000f4: 	leaq	-0x8(%rax), %rax
    000000f8: 	movq	-0x8(%rdx), %rcx
    000000fc: 	cmpq	%rcx, %rdi
    000000ff: 	jb	.Ltmp99 # Offset: 255
    00000101: 	addq	$0x8, %r9
    00000105: 	movq	%rdi, (%rdx)
    00000108: 	cmpq	%r10, %r9
    0000010b: 	je	.Ltmp96 # Offset: 267
.Ltmp100:
    0000010d: 	movq	(%r9), %rdi
    00000110: 	movq	%r9, %rax
    00000113: 	cmpq	%r9, %rsi
    00000116: 	jne	.Ltmp97 # Offset: 278
    00000118: 	nopl	(%rax,%rax) # Size: 8
.Ltmp98:
    00000120: 	movq	%rsi, %rdx
    00000123: 	addq	$0x8, %r9
    00000127: 	movq	%rdi, (%rdx)
    0000012a: 	cmpq	%r10, %r9
    0000012d: 	jne	.Ltmp100 # Offset: 301
    0000012f: 	jmp	.Ltmp96 # Offset: 303
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp102:
    00000138: 	addq	$0x8, %r8
    0000013c: 	movq	-0x10(%r8), %rsi
    00000140: 	cmpq	%rsi, (%rax)
    00000143: 	jb	.Ltmp101 # Offset: 323
.Ltmp96:
    00000145: 	movq	%r8, %rax
    00000148: 	cmpq	%r8, %r10
    0000014b: 	jne	.Ltmp102 # Offset: 331
    0000014d: 	addl	$0x1, %r14d
    00000151: 	cmpl	%r14d, %r11d
    00000154: 	jg	.Ltmp103 # Offset: 340
.Ltmp92:
    0000015a: 	callq	clock@PLT # Offset: 346
    0000015f: 	pxor	%xmm0, %xmm0
    00000163: 	movq	0x8(%rsp), %rdi
    00000168: 	movq	%rax, end_time(%rip)
    0000016f: 	subq	start_time(%rip), %rax
    00000176: 	cvtsi2sd	%rax, %xmm0
    0000017b: 	divsd	DATAat0x15638(%rip), %xmm0
    00000183: 	addq	$0x18, %rsp
    00000187: 	popq	%rbx
    00000188: 	popq	%rbp
    00000189: 	popq	%r12
    0000018b: 	popq	%r13
    0000018d: 	popq	%r14
    0000018f: 	popq	%r15
    00000191: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 401
.Ltmp101:
    00000196: 	movq	0x8(%rsp), %rax
    0000019b: 	movq	%r15, %rsi
    0000019e: 	movl	$0x1, %edi
    000001a3: 	addl	$0x1, %r14d
    000001a7: 	movq	(%rax), %rdx
    000001aa: 	xorl	%eax, %eax
    000001ac: 	callq	__printf_chk@PLT # Offset: 428
    000001b1: 	movl	iterations(%rip), %r11d
    000001b8: 	cmpl	%r14d, %r11d
    000001bb: 	jg	.Ltmp103 # Offset: 443
    000001c1: 	jmp	.Ltmp92 # Offset: 449
.Ltmp94:
    000001c3: 	xorl	%eax, %eax
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp104:
    000001c8: 	movq	(%rdx,%rax), %rdi
    000001cc: 	movq	%rdi, (%rsi,%rax)
    000001d0: 	addq	$0x8, %rax
    000001d4: 	cmpq	%rax, %rcx
    000001d7: 	jne	.Ltmp104 # Offset: 471
    000001d9: 	jmp	.Ltmp93 # Offset: 473
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_vector.cpp/1
  Number      : 46
  State       : disassembled
  Address     : 0x2b70
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x2b70
  Section     : .text
  Orc Section : .local.text._Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	pushq	%r15
    00000002: 	xorl	%r15d, %r15d
    00000005: 	pushq	%r14
    00000007: 	movq	%rcx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdi, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rsi, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%r8, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdx, %rbx
    0000001c: 	subq	$0x8, %rsp
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	leaq	DATAat0x151ba(%rip), %r8
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp105 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp117:
    00000048: 	movq	0x8(%r12), %r9
    0000004d: 	movq	0x8(%r13), %rdx
    00000051: 	movq	0x8(%rbx), %rsi
    00000055: 	cmpq	%rdx, %r9
    00000058: 	je	.Ltmp106 # Offset: 88
    0000005e: 	movq	%r9, %rdi
    00000061: 	leaq	0x4(%rdx), %r10
    00000065: 	movq	%rsi, %rax
    00000068: 	subq	%rdx, %rdi
    0000006b: 	subq	%r10, %rax
    0000006e: 	leaq	-0x4(%rdi), %rcx
    00000072: 	cmpq	$0x8, %rax
    00000076: 	jbe	.Ltmp107 # Offset: 118
    0000007c: 	cmpq	$0x8, %rcx
    00000080: 	jbe	.Ltmp107 # Offset: 128
    00000086: 	shrq	$0x2, %rcx
    0000008a: 	xorl	%eax, %eax
    0000008c: 	addq	$0x1, %rcx
    00000090: 	movq	%rcx, %rdi
    00000093: 	shrq	$0x2, %rdi
    00000097: 	shlq	$0x4, %rdi
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp108:
    000000a0: 	movdqu	(%rdx,%rax), %xmm1
    000000a5: 	movups	%xmm1, (%rsi,%rax)
    000000a9: 	addq	$0x10, %rax
    000000ad: 	cmpq	%rdi, %rax
    000000b0: 	jne	.Ltmp108 # Offset: 176
    000000b2: 	movq	%rcx, %rax
    000000b5: 	andq	$-0x4, %rax
    000000b9: 	leaq	(,%rax,4), %rdi
    000000c1: 	addq	%rdi, %rdx
    000000c4: 	addq	%rsi, %rdi
    000000c7: 	cmpq	%rax, %rcx
    000000ca: 	je	.Ltmp106 # Offset: 202
    000000cc: 	movl	(%rdx), %eax
    000000ce: 	movl	%eax, (%rdi)
    000000d0: 	leaq	0x4(%rdx), %rax
    000000d4: 	cmpq	%rax, %r9
    000000d7: 	je	.Ltmp106 # Offset: 215
    000000d9: 	movl	0x4(%rdx), %eax
    000000dc: 	movl	%eax, 0x4(%rdi)
    000000df: 	leaq	0x8(%rdx), %rax
    000000e3: 	cmpq	%rax, %r9
    000000e6: 	je	.Ltmp106 # Offset: 230
    000000e8: 	movl	0x8(%rdx), %eax
    000000eb: 	movl	%eax, 0x8(%rdi)
.Ltmp106:
    000000ee: 	movq	0x8(%r14), %r10
    000000f2: 	leaq	0x4(%rsi), %r9
    000000f6: 	cmpq	%r10, %rsi
    000000f9: 	je	.Ltmp109 # Offset: 249
    000000fb: 	cmpq	%r9, %r10
    000000fe: 	je	.Ltmp109 # Offset: 254
    00000100: 	movq	%r9, %r11
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp113:
    00000108: 	movl	(%r11), %edi
    0000010b: 	movq	%r11, %rax
    0000010e: 	cmpq	%r11, %rsi
    00000111: 	jne	.Ltmp110 # Offset: 273
    00000113: 	jmp	.Ltmp111 # Offset: 275
    00000118: 	nopl	(%rax,%rax) # Size: 8
.Ltmp112:
    00000120: 	movl	%ecx, 0x4(%rax)
    00000123: 	cmpq	%rax, %rsi
    00000126: 	je	.Ltmp111 # Offset: 294
.Ltmp110:
    0000012c: 	movq	%rax, %rdx
    0000012f: 	leaq	-0x4(%rax), %rax
    00000133: 	movl	-0x4(%rdx), %ecx
    00000136: 	cmpl	%ecx, %edi
    00000138: 	jl	.Ltmp112 # Offset: 312
    0000013a: 	addq	$0x4, %r11
    0000013e: 	movl	%edi, (%rdx)
    00000140: 	cmpq	%r10, %r11
    00000143: 	jne	.Ltmp113 # Offset: 323
.Ltmp109:
    00000145: 	movq	%r9, %rax
    00000148: 	jmp	.Ltmp114 # Offset: 328
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp116:
    00000150: 	addq	$0x4, %rax
    00000154: 	movl	-0x8(%rax), %esi
    00000157: 	cmpl	%esi, (%rdx)
    00000159: 	jl	.Ltmp115 # Offset: 345
.Ltmp114:
    0000015b: 	movq	%rax, %rdx
    0000015e: 	cmpq	%rax, %r10
    00000161: 	jne	.Ltmp116 # Offset: 353
    00000163: 	addl	$0x1, %r15d
    00000167: 	cmpl	iterations(%rip), %r15d
    0000016e: 	jl	.Ltmp117 # Offset: 366
.Ltmp105:
    00000174: 	callq	clock@PLT # Offset: 372
    00000179: 	pxor	%xmm0, %xmm0
    0000017d: 	movq	%rbp, %rdi
    00000180: 	movq	%rax, end_time(%rip)
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	cvtsi2sd	%rax, %xmm0
    00000193: 	divsd	DATAat0x15638(%rip), %xmm0
    0000019b: 	addq	$0x8, %rsp
    0000019f: 	popq	%rbx
    000001a0: 	popq	%rbp
    000001a1: 	popq	%r12
    000001a3: 	popq	%r13
    000001a5: 	popq	%r14
    000001a7: 	popq	%r15
    000001a9: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 425
    000001ae: 	nop # Size: 2
.Ltmp111:
    000001b0: 	movq	%rsi, %rdx
    000001b3: 	addq	$0x4, %r11
    000001b7: 	movl	%edi, (%rdx)
    000001b9: 	cmpq	%r10, %r11
    000001bc: 	jne	.Ltmp113 # Offset: 444
    000001c2: 	jmp	.Ltmp109 # Offset: 450
.Ltmp115:
    000001c7: 	movq	(%rbp), %rdx
    000001cb: 	movq	%r8, %rsi
    000001ce: 	xorl	%eax, %eax
    000001d0: 	movl	$0x1, %edi
    000001d5: 	addl	$0x1, %r15d
    000001d9: 	callq	__printf_chk@PLT # Offset: 473
    000001de: 	cmpl	iterations(%rip), %r15d
    000001e5: 	leaq	DATAat0x151ba(%rip), %r8
    000001ec: 	jl	.Ltmp117 # Offset: 492
    000001f2: 	jmp	.Ltmp105 # Offset: 498
.Ltmp107:
    000001f4: 	xorl	%eax, %eax
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp118:
    00000200: 	movl	(%rdx,%rax), %ecx
    00000203: 	movl	%ecx, (%rsi,%rax)
    00000206: 	addq	$0x4, %rax
    0000020a: 	cmpq	%rax, %rdi
    0000020d: 	jne	.Ltmp118 # Offset: 525
    0000020f: 	jmp	.Ltmp106 # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_vector.cpp/1
  Number      : 47
  State       : disassembled
  Address     : 0x2d90
  Size        : 0x1f8
  MaxSize     : 0x200
  Offset      : 0x2d90
  Section     : .text
  Orc Section : .local.text._Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	pushq	%r15
    00000002: 	xorl	%r15d, %r15d
    00000005: 	pushq	%r14
    00000007: 	movq	%rcx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdi, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rsi, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%r8, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdx, %rbx
    0000001c: 	subq	$0x8, %rsp
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %r9d
    0000002c: 	leaq	DATAat0x151ba(%rip), %rsi
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	testl	%r9d, %r9d
    0000003d: 	jle	.Ltmp119 # Offset: 61
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp131:
    00000048: 	movq	0x8(%r12), %r8
    0000004d: 	movq	0x8(%r13), %rdx
    00000051: 	movq	0x8(%rbx), %rcx
    00000055: 	cmpq	%rdx, %r8
    00000058: 	je	.Ltmp120 # Offset: 88
    0000005a: 	subq	%rdx, %r8
    0000005d: 	leaq	0x8(%rdx), %rax
    00000061: 	leaq	-0x8(%r8), %rdi
    00000065: 	cmpq	%rax, %rcx
    00000068: 	je	.Ltmp121 # Offset: 104
    0000006e: 	cmpq	$0x10, %rdi
    00000072: 	jbe	.Ltmp121 # Offset: 114
    00000078: 	shrq	$0x3, %rdi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	addq	$0x1, %rdi
    00000082: 	movq	%rdi, %r8
    00000085: 	shrq	%r8
    00000088: 	shlq	$0x4, %r8
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp122:
    00000090: 	movupd	(%rdx,%rax), %xmm2
    00000095: 	movups	%xmm2, (%rcx,%rax)
    00000099: 	addq	$0x10, %rax
    0000009d: 	cmpq	%r8, %rax
    000000a0: 	jne	.Ltmp122 # Offset: 160
    000000a2: 	movq	%rdi, %r8
    000000a5: 	andq	$-0x2, %r8
    000000a9: 	leaq	(,%r8,8), %rax
    000000b1: 	addq	%rax, %rdx
    000000b4: 	addq	%rcx, %rax
    000000b7: 	cmpq	%r8, %rdi
    000000ba: 	je	.Ltmp120 # Offset: 186
    000000bc: 	movsd	(%rdx), %xmm0
    000000c0: 	movsd	%xmm0, (%rax)
.Ltmp120:
    000000c4: 	movq	0x8(%r14), %r8
    000000c8: 	leaq	0x8(%rcx), %rdi
    000000cc: 	cmpq	%r8, %rcx
    000000cf: 	je	.Ltmp123 # Offset: 207
    000000d1: 	cmpq	%rdi, %r8
    000000d4: 	je	.Ltmp123 # Offset: 212
    000000d6: 	movq	%rdi, %r10
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp127:
    000000e0: 	movsd	(%r10), %xmm1
    000000e5: 	movq	%r10, %rax
    000000e8: 	cmpq	%r10, %rcx
    000000eb: 	jne	.Ltmp124 # Offset: 235
    000000ed: 	jmp	.Ltmp125 # Offset: 237
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp126:
    000000f8: 	movsd	%xmm0, 0x8(%rax)
    000000fd: 	cmpq	%rax, %rcx
    00000100: 	je	.Ltmp125 # Offset: 256
.Ltmp124:
    00000106: 	movq	%rax, %rdx
    00000109: 	leaq	-0x8(%rax), %rax
    0000010d: 	movsd	-0x8(%rdx), %xmm0
    00000112: 	comisd	%xmm1, %xmm0
    00000116: 	ja	.Ltmp126 # Offset: 278
    00000118: 	addq	$0x8, %r10
    0000011c: 	movsd	%xmm1, (%rdx)
    00000120: 	cmpq	%r8, %r10
    00000123: 	jne	.Ltmp127 # Offset: 291
.Ltmp123:
    00000125: 	movq	%rdi, %rax
    00000128: 	jmp	.Ltmp128 # Offset: 296
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp130:
    00000130: 	addq	$0x8, %rax
    00000134: 	movsd	-0x10(%rax), %xmm0
    00000139: 	comisd	(%rdx), %xmm0
    0000013d: 	ja	.Ltmp129 # Offset: 317
.Ltmp128:
    0000013f: 	movq	%rax, %rdx
    00000142: 	cmpq	%rax, %r8
    00000145: 	jne	.Ltmp130 # Offset: 325
    00000147: 	addl	$0x1, %r15d
    0000014b: 	cmpl	%r15d, %r9d
    0000014e: 	jg	.Ltmp131 # Offset: 334
.Ltmp119:
    00000154: 	callq	clock@PLT # Offset: 340
    00000159: 	pxor	%xmm0, %xmm0
    0000015d: 	movq	%rbp, %rdi
    00000160: 	movq	%rax, end_time(%rip)
    00000167: 	subq	start_time(%rip), %rax
    0000016e: 	cvtsi2sd	%rax, %xmm0
    00000173: 	divsd	DATAat0x15638(%rip), %xmm0
    0000017b: 	addq	$0x8, %rsp
    0000017f: 	popq	%rbx
    00000180: 	popq	%rbp
    00000181: 	popq	%r12
    00000183: 	popq	%r13
    00000185: 	popq	%r14
    00000187: 	popq	%r15
    00000189: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 393
    0000018e: 	nop # Size: 2
.Ltmp125:
    00000190: 	movq	%rcx, %rdx
    00000193: 	addq	$0x8, %r10
    00000197: 	movsd	%xmm1, (%rdx)
    0000019b: 	cmpq	%r8, %r10
    0000019e: 	jne	.Ltmp127 # Offset: 414
    000001a4: 	jmp	.Ltmp123 # Offset: 420
.Ltmp129:
    000001a9: 	movq	(%rbp), %rdx
    000001ad: 	movl	$0x1, %edi
    000001b2: 	xorl	%eax, %eax
    000001b4: 	addl	$0x1, %r15d
    000001b8: 	callq	__printf_chk@PLT # Offset: 440
    000001bd: 	movl	iterations(%rip), %r9d
    000001c4: 	leaq	DATAat0x151ba(%rip), %rsi
    000001cb: 	cmpl	%r15d, %r9d
    000001ce: 	jg	.Ltmp131 # Offset: 462
    000001d4: 	jmp	.Ltmp119 # Offset: 468
.Ltmp121:
    000001d9: 	xorl	%eax, %eax
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp132:
    000001e0: 	movsd	(%rdx,%rax), %xmm0
    000001e5: 	movsd	%xmm0, (%rcx,%rax)
    000001ea: 	addq	$0x8, %rax
    000001ee: 	cmpq	%rax, %r8
    000001f1: 	jne	.Ltmp132 # Offset: 497
    000001f3: 	jmp	.Ltmp120 # Offset: 499
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x2f90
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x2f90
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp133 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp134 # Offset: 63
.Ltmp133:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp135 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp136 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp140:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp137 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp138 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp136:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp139 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp140 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp135:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp141:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp140 # Offset: 248
.Ltmp134:
    000000fd: 	leaq	DATAat0x15008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp137:
    00000109: 	leaq	DATAat0x151cf(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp138:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp139:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp141 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp142 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp142:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x30e0
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0x30e0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0x30(%rdi), %rcx
    00000019: 	movq	0x48(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	(%rsi), %rbp
    00000024: 	movq	%rdi, 0x20(%rsp)
    00000029: 	movq	%rcx, 0x10(%rsp)
    0000002e: 	movq	0x10(%rsi), %rcx
    00000032: 	movq	%rax, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	0x18(%rsi), %rcx
    0000003f: 	leaq	0x8(%rcx), %r12
    00000043: 	movq	%rcx, 0x28(%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp143 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp146:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp145:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp144 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp145 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp146 # Offset: 142
.Ltmp143:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x28(%rsp)
    00000099: 	je	.Ltmp147 # Offset: 153
    0000009f: 	cmpq	0x18(%rsp), %rbp
    000000a4: 	je	.Ltmp148 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp150:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp149 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x18(%rsp)
    000000d7: 	jne	.Ltmp150 # Offset: 215
.Ltmp148:
    000000d9: 	cmpq	%r13, 0x10(%rsp)
    000000de: 	je	.Ltmp151 # Offset: 222
.Ltmp153:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp152 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x10(%rsp)
    00000107: 	jne	.Ltmp153 # Offset: 263
.Ltmp151:
    00000109: 	movq	0x20(%rsp), %rax
    0000010e: 	movq	0x48(%rax), %rax
    00000112: 	movq	%rax, (%rsp)
    00000116: 	leaq	0x8(%rax), %rbp
    0000011a: 	movq	0x18(%r15), %rax
    0000011e: 	leaq	0x8(%rax), %rbx
    00000122: 	cmpq	%rbx, %rbp
    00000125: 	jbe	.Ltmp154 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp155:
    00000130: 	movq	(%rbx), %rdi
    00000133: 	movl	$0x200, %esi
    00000138: 	addq	$0x8, %rbx
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
    00000141: 	cmpq	%rbx, %rbp
    00000144: 	ja	.Ltmp155 # Offset: 324
.Ltmp154:
    00000146: 	movdqu	(%r15), %xmm0
    0000014b: 	movq	0x20(%rsp), %rax
    00000150: 	movups	%xmm0, 0x30(%rax)
    00000154: 	movdqu	0x10(%r15), %xmm1
    0000015a: 	movaps	%xmm1, (%rsp)
    0000015e: 	movups	%xmm1, 0x40(%rax)
    00000162: 	addq	$0x38, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	popq	%r13
    0000016c: 	popq	%r14
    0000016e: 	popq	%r15
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp144:
    00000178: 	addq	$0x20, %r14
    0000017c: 	cmpq	%r14, %rbx
    0000017f: 	jne	.Ltmp145 # Offset: 383
    00000185: 	addq	$0x8, %r12
    00000189: 	cmpq	%r12, (%rsp)
    0000018d: 	ja	.Ltmp146 # Offset: 397
    00000193: 	jmp	.Ltmp143 # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp152:
    000001a0: 	addq	$0x20, %r13
    000001a4: 	cmpq	%r13, 0x10(%rsp)
    000001a9: 	jne	.Ltmp153 # Offset: 425
    000001af: 	jmp	.Ltmp151 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp149:
    000001b8: 	addq	$0x20, %rbp
    000001bc: 	cmpq	%rbp, 0x18(%rsp)
    000001c1: 	jne	.Ltmp150 # Offset: 449
    000001c7: 	jmp	.Ltmp148 # Offset: 455
.Ltmp147:
    000001cc: 	cmpq	0x10(%rsp), %rbp
    000001d1: 	je	.Ltmp151 # Offset: 465
.Ltmp158:
    000001d7: 	movq	(%rbp), %rdi
    000001db: 	leaq	0x10(%rbp), %rax
    000001df: 	cmpq	%rax, %rdi
    000001e2: 	je	.Ltmp156 # Offset: 482
.Ltmp157:
    000001e4: 	movq	0x10(%rbp), %rax
    000001e8: 	addq	$0x20, %rbp
    000001ec: 	leaq	0x1(%rax), %rsi
    000001f0: 	callq	_ZdlPvm@PLT # Offset: 496
    000001f5: 	cmpq	%rbp, 0x10(%rsp)
    000001fa: 	je	.Ltmp151 # Offset: 506
    00000200: 	movq	(%rbp), %rdi
    00000204: 	leaq	0x10(%rbp), %rax
    00000208: 	cmpq	%rax, %rdi
    0000020b: 	jne	.Ltmp157 # Offset: 523
.Ltmp156:
    0000020d: 	addq	$0x20, %rbp
    00000211: 	cmpq	%rbp, 0x10(%rsp)
    00000216: 	jne	.Ltmp158 # Offset: 534
    00000218: 	jmp	.Ltmp151 # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E"

Binary Function "_ZNSt6vectorIdSaIdEE17_M_default_appendEm" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x3300
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x3300
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIdSaIdEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp159 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp160 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp161 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp162 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp163 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp170:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp164 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp164:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp165 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp166 # Offset: 200
.Ltmp168:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp160:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp167 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp167:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp159:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp165:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp169:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp168 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp166:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp169 # Offset: 392
.Ltmp163:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp171:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp170 # Offset: 445
.Ltmp162:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp171 # Offset: 460
.Ltmp161:
    000001ce: 	leaq	DATAat0x151e4(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIdSaIdEE17_M_default_appendEm"

Binary Function "_ZN9benchmark9quicksortIPdEEvT_S2_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x34e0
  Size        : 0x4a0
  MaxSize     : 0x4a0
  Offset      : 0x34e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, 0x18(%rsp)
    0000001d: 	cmpq	$0x8, %rax
    00000021: 	jle	.Ltmp172 # Offset: 33
.Ltmp184:
    00000023: 	movsd	(%rdi), %xmm2
    00000027: 	movq	0x18(%rsp), %r13
    0000002c: 	movq	%rdi, %rax
.Ltmp177:
    0000002f: 	movsd	-0x8(%r13), %xmm0
    00000035: 	leaq	-0x8(%r13), %rdx
    00000039: 	comisd	%xmm2, %xmm0
    0000003d: 	ja	.Ltmp173 # Offset: 61
    0000003f: 	cmpq	%rdx, %rax
    00000042: 	jae	.Ltmp174 # Offset: 66
    00000044: 	movsd	(%rax), %xmm1
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp175 # Offset: 76
.Ltmp176:
    0000004e: 	movsd	0x8(%rax), %xmm1
    00000053: 	addq	$0x8, %rax
    00000057: 	comisd	%xmm1, %xmm2
    0000005b: 	ja	.Ltmp176 # Offset: 91
    0000005d: 	cmpq	%rax, %rdx
    00000060: 	jbe	.Ltmp174 # Offset: 96
.Ltmp175:
    00000062: 	movsd	%xmm1, (%rdx)
    00000066: 	movsd	%xmm0, (%rax)
.Ltmp173:
    0000006a: 	movq	%rdx, %r13
    0000006d: 	jmp	.Ltmp177 # Offset: 109
.Ltmp172:
    0000006f: 	addq	$0x28, %rsp
    00000073: 	popq	%rbx
    00000074: 	popq	%rbp
    00000075: 	popq	%r12
    00000077: 	popq	%r13
    00000079: 	popq	%r14
    0000007b: 	popq	%r15
    0000007d: 	retq # Offset: 125
.Ltmp174:
    0000007e: 	movq	%r13, %rax
    00000081: 	subq	%rdi, %rax
    00000084: 	cmpq	$0x8, %rax
    00000088: 	jle	.Ltmp178 # Offset: 136
.Ltmp234:
    0000008a: 	movsd	(%rdi), %xmm2
    0000008e: 	movq	%r13, %r14
    00000091: 	movq	%rdi, %rax
.Ltmp183:
    00000094: 	comisd	%xmm2, %xmm0
    00000098: 	leaq	-0x8(%r14), %rdx
    0000009c: 	ja	.Ltmp179 # Offset: 156
    0000009e: 	cmpq	%rax, %rdx
    000000a1: 	jbe	.Ltmp180 # Offset: 161
    000000a3: 	movsd	(%rax), %xmm1
    000000a7: 	comisd	%xmm1, %xmm2
    000000ab: 	jbe	.Ltmp181 # Offset: 171
.Ltmp182:
    000000ad: 	movsd	0x8(%rax), %xmm1
    000000b2: 	addq	$0x8, %rax
    000000b6: 	comisd	%xmm1, %xmm2
    000000ba: 	ja	.Ltmp182 # Offset: 186
    000000bc: 	cmpq	%rax, %rdx
    000000bf: 	jbe	.Ltmp180 # Offset: 191
.Ltmp181:
    000000c1: 	movsd	%xmm1, (%rdx)
    000000c5: 	movsd	%xmm0, (%rax)
.Ltmp179:
    000000c9: 	movsd	-0x8(%rdx), %xmm0
    000000ce: 	movq	%rdx, %r14
    000000d1: 	jmp	.Ltmp183 # Offset: 209
.Ltmp178:
    000000d3: 	movq	0x18(%rsp), %rax
    000000d8: 	subq	%r13, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jle	.Ltmp172 # Offset: 223
    000000e1: 	movq	%r13, %rdi
    000000e4: 	jmp	.Ltmp184 # Offset: 228
.Ltmp180:
    000000e9: 	movq	%r14, %rax
    000000ec: 	subq	%rdi, %rax
    000000ef: 	cmpq	$0x8, %rax
    000000f3: 	jle	.Ltmp185 # Offset: 243
.Ltmp233:
    000000f9: 	movsd	(%rdi), %xmm2
    000000fd: 	movq	%r14, %r15
    00000100: 	movq	%rdi, %rax
.Ltmp190:
    00000103: 	comisd	%xmm2, %xmm0
    00000107: 	leaq	-0x8(%r15), %rdx
    0000010b: 	ja	.Ltmp186 # Offset: 267
    0000010d: 	cmpq	%rax, %rdx
    00000110: 	jbe	.Ltmp187 # Offset: 272
    00000112: 	movsd	(%rax), %xmm1
    00000116: 	comisd	%xmm1, %xmm2
    0000011a: 	jbe	.Ltmp188 # Offset: 282
.Ltmp189:
    0000011c: 	movsd	0x8(%rax), %xmm1
    00000121: 	addq	$0x8, %rax
    00000125: 	comisd	%xmm1, %xmm2
    00000129: 	ja	.Ltmp189 # Offset: 297
    0000012b: 	cmpq	%rax, %rdx
    0000012e: 	jbe	.Ltmp187 # Offset: 302
.Ltmp188:
    00000130: 	movsd	%xmm1, (%rdx)
    00000134: 	movsd	%xmm0, (%rax)
.Ltmp186:
    00000138: 	movsd	-0x8(%rdx), %xmm0
    0000013d: 	movq	%rdx, %r15
    00000140: 	jmp	.Ltmp190 # Offset: 320
.Ltmp187:
    00000142: 	movq	%r15, %rax
    00000145: 	subq	%rdi, %rax
    00000148: 	cmpq	$0x8, %rax
    0000014c: 	jle	.Ltmp191 # Offset: 332
.Ltmp232:
    00000152: 	movsd	(%rdi), %xmm2
    00000156: 	movq	%r15, %rbx
    00000159: 	movq	%rdi, %rax
.Ltmp196:
    0000015c: 	comisd	%xmm2, %xmm0
    00000160: 	leaq	-0x8(%rbx), %rcx
    00000164: 	ja	.Ltmp192 # Offset: 356
    00000166: 	cmpq	%rax, %rcx
    00000169: 	jbe	.Ltmp193 # Offset: 361
    0000016b: 	movsd	(%rax), %xmm1
    0000016f: 	comisd	%xmm1, %xmm2
    00000173: 	jbe	.Ltmp194 # Offset: 371
.Ltmp195:
    00000175: 	movsd	0x8(%rax), %xmm1
    0000017a: 	addq	$0x8, %rax
    0000017e: 	comisd	%xmm1, %xmm2
    00000182: 	ja	.Ltmp195 # Offset: 386
    00000184: 	cmpq	%rax, %rcx
    00000187: 	jbe	.Ltmp193 # Offset: 391
.Ltmp194:
    00000189: 	movsd	%xmm1, (%rcx)
    0000018d: 	movsd	%xmm0, (%rax)
.Ltmp192:
    00000191: 	movsd	-0x8(%rcx), %xmm0
    00000196: 	movq	%rcx, %rbx
    00000199: 	jmp	.Ltmp196 # Offset: 409
.Ltmp193:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	subq	%rdi, %rax
    000001a1: 	cmpq	$0x8, %rax
    000001a5: 	jle	.Ltmp197 # Offset: 421
.Ltmp231:
    000001ab: 	movsd	(%rdi), %xmm2
    000001af: 	movq	%rbx, %rcx
    000001b2: 	movq	%rdi, %rax
.Ltmp202:
    000001b5: 	comisd	%xmm2, %xmm0
    000001b9: 	leaq	-0x8(%rcx), %rsi
    000001bd: 	ja	.Ltmp198 # Offset: 445
    000001bf: 	cmpq	%rax, %rsi
    000001c2: 	jbe	.Ltmp199 # Offset: 450
    000001c4: 	movsd	(%rax), %xmm1
    000001c8: 	comisd	%xmm1, %xmm2
    000001cc: 	jbe	.Ltmp200 # Offset: 460
.Ltmp201:
    000001ce: 	movsd	0x8(%rax), %xmm1
    000001d3: 	addq	$0x8, %rax
    000001d7: 	comisd	%xmm1, %xmm2
    000001db: 	ja	.Ltmp201 # Offset: 475
    000001dd: 	cmpq	%rax, %rsi
    000001e0: 	jbe	.Ltmp199 # Offset: 480
.Ltmp200:
    000001e2: 	movsd	%xmm1, (%rsi)
    000001e6: 	movsd	%xmm0, (%rax)
.Ltmp198:
    000001ea: 	movsd	-0x8(%rsi), %xmm0
    000001ef: 	movq	%rsi, %rcx
    000001f2: 	jmp	.Ltmp202 # Offset: 498
.Ltmp199:
    000001f4: 	movq	%rcx, %rax
    000001f7: 	subq	%rdi, %rax
    000001fa: 	cmpq	$0x8, %rax
    000001fe: 	jle	.Ltmp203 # Offset: 510
.Ltmp230:
    00000204: 	movsd	(%rdi), %xmm2
    00000208: 	movq	%rcx, %r12
    0000020b: 	movq	%rdi, %rax
.Ltmp208:
    0000020e: 	comisd	%xmm2, %xmm0
    00000212: 	leaq	-0x8(%r12), %rsi
    00000217: 	ja	.Ltmp204 # Offset: 535
    00000219: 	cmpq	%rax, %rsi
    0000021c: 	jbe	.Ltmp205 # Offset: 540
    0000021e: 	movsd	(%rax), %xmm1
    00000222: 	comisd	%xmm1, %xmm2
    00000226: 	jbe	.Ltmp206 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp207:
    00000230: 	movsd	0x8(%rax), %xmm1
    00000235: 	addq	$0x8, %rax
    00000239: 	comisd	%xmm1, %xmm2
    0000023d: 	ja	.Ltmp207 # Offset: 573
    0000023f: 	cmpq	%rax, %rsi
    00000242: 	jbe	.Ltmp205 # Offset: 578
.Ltmp206:
    00000244: 	movsd	%xmm1, (%rsi)
    00000248: 	movsd	%xmm0, (%rax)
.Ltmp204:
    0000024c: 	movsd	-0x8(%rsi), %xmm0
    00000251: 	movq	%rsi, %r12
    00000254: 	jmp	.Ltmp208 # Offset: 596
.Ltmp205:
    00000256: 	movq	%r12, %rax
    00000259: 	subq	%rdi, %rax
    0000025c: 	cmpq	$0x8, %rax
    00000260: 	jle	.Ltmp209 # Offset: 608
.Ltmp229:
    00000266: 	movsd	(%rdi), %xmm2
    0000026a: 	movq	%r12, %r8
    0000026d: 	movq	%rdi, %rax
.Ltmp227:
    00000270: 	comisd	%xmm2, %xmm0
    00000274: 	leaq	-0x8(%r8), %rsi
    00000278: 	ja	.Ltmp210 # Offset: 632
    0000027e: 	cmpq	%rax, %rsi
    00000281: 	jbe	.Ltmp211 # Offset: 641
    00000283: 	movsd	(%rax), %xmm1
    00000287: 	comisd	%xmm1, %xmm2
    0000028b: 	jbe	.Ltmp212 # Offset: 651
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp213:
    00000298: 	movsd	0x8(%rax), %xmm1
    0000029d: 	addq	$0x8, %rax
    000002a1: 	comisd	%xmm1, %xmm2
    000002a5: 	ja	.Ltmp213 # Offset: 677
    000002a7: 	cmpq	%rax, %rsi
    000002aa: 	ja	.Ltmp212 # Offset: 682
.Ltmp211:
    000002b0: 	movq	%r8, %rax
    000002b3: 	subq	%rdi, %rax
    000002b6: 	cmpq	$0x8, %rax
    000002ba: 	jle	.Ltmp214 # Offset: 698
.Ltmp226:
    000002c0: 	movsd	(%rdi), %xmm1
    000002c4: 	movq	%r8, %rbp
    000002c7: 	movq	%rdi, %rax
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp225:
    000002d0: 	comisd	%xmm1, %xmm0
    000002d4: 	leaq	-0x8(%rbp), %rsi
    000002d8: 	ja	.Ltmp215 # Offset: 728
    000002de: 	cmpq	%rax, %rsi
    000002e1: 	jbe	.Ltmp216 # Offset: 737
    000002e3: 	movsd	(%rax), %xmm2
    000002e7: 	comisd	%xmm2, %xmm1
    000002eb: 	jbe	.Ltmp217 # Offset: 747
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp218:
    000002f8: 	movsd	0x8(%rax), %xmm2
    000002fd: 	addq	$0x8, %rax
    00000301: 	comisd	%xmm2, %xmm1
    00000305: 	ja	.Ltmp218 # Offset: 773
    00000307: 	cmpq	%rax, %rsi
    0000030a: 	ja	.Ltmp217 # Offset: 778
.Ltmp216:
    00000310: 	movq	%rbp, %rax
    00000313: 	subq	%rdi, %rax
    00000316: 	cmpq	$0x8, %rax
    0000031a: 	jle	.Ltmp219 # Offset: 794
.Ltmp224:
    00000320: 	movsd	(%rdi), %xmm1
    00000324: 	movq	%rbp, %rsi
    00000327: 	movq	%rdi, %rax
    0000032a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp228:
    00000330: 	movsd	-0x8(%rsi), %xmm2
    00000335: 	leaq	-0x8(%rsi), %r9
    00000339: 	comisd	%xmm1, %xmm2
    0000033d: 	ja	.Ltmp220 # Offset: 829
    00000343: 	cmpq	%rax, %r9
    00000346: 	jbe	.Ltmp221 # Offset: 838
    00000348: 	movsd	(%rax), %xmm0
    0000034c: 	comisd	%xmm0, %xmm1
    00000350: 	jbe	.Ltmp222 # Offset: 848
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp223:
    00000360: 	movsd	0x8(%rax), %xmm0
    00000365: 	addq	$0x8, %rax
    00000369: 	comisd	%xmm0, %xmm1
    0000036d: 	ja	.Ltmp223 # Offset: 877
    0000036f: 	cmpq	%rax, %r9
    00000372: 	ja	.Ltmp222 # Offset: 882
.Ltmp221:
    00000374: 	movq	%r8, 0x10(%rsp)
    00000379: 	movq	%rcx, 0x8(%rsp)
    0000037e: 	movq	%rsi, (%rsp)
    00000382: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 898
    00000387: 	movq	(%rsp), %rsi
    0000038b: 	movq	%rbp, %rax
    0000038e: 	movq	0x8(%rsp), %rcx
    00000393: 	movq	0x10(%rsp), %r8
    00000398: 	subq	%rsi, %rax
    0000039b: 	cmpq	$0x8, %rax
    0000039f: 	jle	.Ltmp219 # Offset: 927
    000003a1: 	movq	%rsi, %rdi
    000003a4: 	jmp	.Ltmp224 # Offset: 932
.Ltmp217:
    000003a9: 	movsd	%xmm2, (%rsi)
    000003ad: 	movsd	%xmm0, (%rax)
.Ltmp215:
    000003b1: 	movsd	-0x8(%rsi), %xmm0
    000003b6: 	movq	%rsi, %rbp
    000003b9: 	jmp	.Ltmp225 # Offset: 953
.Ltmp219:
    000003be: 	movq	%r8, %rax
    000003c1: 	subq	%rbp, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp214 # Offset: 968
    000003ca: 	movsd	-0x8(%r8), %xmm0
    000003d0: 	movq	%rbp, %rdi
    000003d3: 	jmp	.Ltmp226 # Offset: 979
.Ltmp212:
    000003d8: 	movsd	%xmm1, (%rsi)
    000003dc: 	movsd	%xmm0, (%rax)
.Ltmp210:
    000003e0: 	movsd	-0x8(%rsi), %xmm0
    000003e5: 	movq	%rsi, %r8
    000003e8: 	jmp	.Ltmp227 # Offset: 1000
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp222:
    000003f0: 	movsd	%xmm0, (%r9)
    000003f5: 	movsd	%xmm2, (%rax)
.Ltmp220:
    000003f9: 	movq	%r9, %rsi
    000003fc: 	jmp	.Ltmp228 # Offset: 1020
.Ltmp214:
    00000401: 	movq	%r12, %rax
    00000404: 	subq	%r8, %rax
    00000407: 	cmpq	$0x8, %rax
    0000040b: 	jle	.Ltmp209 # Offset: 1035
    0000040d: 	movsd	-0x8(%r12), %xmm0
    00000414: 	movq	%r8, %rdi
    00000417: 	jmp	.Ltmp229 # Offset: 1047
.Ltmp209:
    0000041c: 	movq	%rcx, %rax
    0000041f: 	subq	%r12, %rax
    00000422: 	cmpq	$0x8, %rax
    00000426: 	jle	.Ltmp203 # Offset: 1062
    00000428: 	movsd	-0x8(%rcx), %xmm0
    0000042d: 	movq	%r12, %rdi
    00000430: 	jmp	.Ltmp230 # Offset: 1072
.Ltmp203:
    00000435: 	movq	%rbx, %rax
    00000438: 	subq	%rcx, %rax
    0000043b: 	cmpq	$0x8, %rax
    0000043f: 	jle	.Ltmp197 # Offset: 1087
    00000441: 	movsd	-0x8(%rbx), %xmm0
    00000446: 	movq	%rcx, %rdi
    00000449: 	jmp	.Ltmp231 # Offset: 1097
.Ltmp197:
    0000044e: 	movq	%r15, %rax
    00000451: 	subq	%rbx, %rax
    00000454: 	cmpq	$0x8, %rax
    00000458: 	jle	.Ltmp191 # Offset: 1112
    0000045a: 	movsd	-0x8(%r15), %xmm0
    00000460: 	movq	%rbx, %rdi
    00000463: 	jmp	.Ltmp232 # Offset: 1123
.Ltmp191:
    00000468: 	movq	%r14, %rax
    0000046b: 	subq	%r15, %rax
    0000046e: 	cmpq	$0x8, %rax
    00000472: 	jle	.Ltmp185 # Offset: 1138
    00000474: 	movsd	-0x8(%r14), %xmm0
    0000047a: 	movq	%r15, %rdi
    0000047d: 	jmp	.Ltmp233 # Offset: 1149
.Ltmp185:
    00000482: 	movq	%r13, %rax
    00000485: 	subq	%r14, %rax
    00000488: 	cmpq	$0x8, %rax
    0000048c: 	jle	.Ltmp178 # Offset: 1164
    00000492: 	movsd	-0x8(%r13), %xmm0
    00000498: 	movq	%r14, %rdi
    0000049b: 	jmp	.Ltmp234 # Offset: 1179
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPdEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x3980
  Size        : 0xa1
  MaxSize     : 0xb0
  Offset      : 0x3980
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp235 # Offset: 14
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %rdx
    00000019: 	movq	%rsi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	subq	$0x8, %rsp
    00000024: 	movsd	(%rdi), %xmm1
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp240:
    00000030: 	movsd	-0x8(%rbp), %xmm2
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm1, %xmm2
    0000003d: 	ja	.Ltmp236 # Offset: 61
    0000003f: 	cmpq	%rdx, %rcx
    00000042: 	jbe	.Ltmp237 # Offset: 66
    00000044: 	movsd	(%rdx), %xmm0
    00000048: 	leaq	0x8(%rdx), %rax
    0000004c: 	comisd	%xmm0, %xmm1
    00000050: 	jbe	.Ltmp238 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp239:
    00000058: 	movq	%rax, %rdx
    0000005b: 	movsd	(%rax), %xmm0
    0000005f: 	leaq	0x8(%rax), %rax
    00000063: 	comisd	%xmm0, %xmm1
    00000067: 	ja	.Ltmp239 # Offset: 103
    00000069: 	cmpq	%rdx, %rcx
    0000006c: 	jbe	.Ltmp237 # Offset: 108
.Ltmp238:
    0000006e: 	movsd	%xmm0, (%rcx)
    00000072: 	movsd	%xmm2, (%rdx)
.Ltmp236:
    00000076: 	movq	%rcx, %rbp
    00000079: 	jmp	.Ltmp240 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp237:
    00000080: 	movq	%rbp, %rsi
    00000083: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 131
    00000088: 	addq	$0x8, %rsp
    0000008c: 	movq	%r12, %rsi
    0000008f: 	movq	%rbp, %rdi
    00000092: 	popq	%rbp
    00000093: 	popq	%r12
    00000095: 	jmp	.LBB051 # Offset: 149
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp235:
    000000a0: 	retq # Offset: 160
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_"

Binary Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x3a30
  Size        : 0xe2
  MaxSize     : 0xf0
  Offset      : 0x3a30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x38, %rsp
    0000000e: 	movq	0x8(%rsi), %rbp
    00000012: 	movq	0x8(%rdi), %rsi
    00000016: 	movq	%fs:0x28, %rax
    0000001f: 	movq	%rax, 0x28(%rsp)
    00000024: 	xorl	%eax, %eax
    00000026: 	movq	%rbp, %rax
    00000029: 	subq	%rsi, %rax
    0000002c: 	cmpq	$0x8, %rax
    00000030: 	jle	.Ltmp241 # Offset: 48
    00000036: 	movsd	(%rsi), %xmm1
    0000003a: 	movq	%rbp, %rbx
    0000003d: 	movq	%rsi, %rdx
.Ltmp246:
    00000040: 	movsd	-0x8(%rbx), %xmm2
    00000045: 	leaq	-0x8(%rbx), %rcx
    00000049: 	comisd	%xmm1, %xmm2
    0000004d: 	ja	.Ltmp242 # Offset: 77
    0000004f: 	cmpq	%rdx, %rcx
    00000052: 	jbe	.Ltmp243 # Offset: 82
    00000054: 	movsd	(%rdx), %xmm0
    00000058: 	leaq	0x8(%rdx), %rax
    0000005c: 	comisd	%xmm0, %xmm1
    00000060: 	jbe	.Ltmp244 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp245:
    00000068: 	movq	%rax, %rdx
    0000006b: 	movsd	(%rax), %xmm0
    0000006f: 	leaq	0x8(%rax), %rax
    00000073: 	comisd	%xmm0, %xmm1
    00000077: 	ja	.Ltmp245 # Offset: 119
    00000079: 	cmpq	%rdx, %rcx
    0000007c: 	jbe	.Ltmp243 # Offset: 124
.Ltmp244:
    0000007e: 	movsd	%xmm0, (%rcx)
    00000082: 	movsd	%xmm2, (%rdx)
.Ltmp242:
    00000086: 	movq	%rcx, %rbx
    00000089: 	jmp	.Ltmp246 # Offset: 137
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp243:
    00000090: 	movq	%rsp, %r12
    00000093: 	leaq	0x10(%rsp), %r13
    00000098: 	movq	%rsi, 0x18(%rsp)
    0000009d: 	movq	%r13, %rdi
    000000a0: 	movq	%r12, %rsi
    000000a3: 	movq	%rbx, 0x8(%rsp)
    000000a8: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 168
    000000ad: 	movq	%r13, %rsi
    000000b0: 	movq	%r12, %rdi
    000000b3: 	movq	%rbp, 0x18(%rsp)
    000000b8: 	movq	%rbx, 0x8(%rsp)
    000000bd: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 189
.Ltmp241:
    000000c2: 	movq	0x28(%rsp), %rax
    000000c7: 	subq	%fs:0x28, %rax
    000000d0: 	jne	.Ltmp247 # Offset: 208
    000000d2: 	addq	$0x38, %rsp
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	popq	%r12
    000000da: 	popq	%r13
    000000dc: 	retq # Offset: 220
.Ltmp247:
    000000dd: 	callq	__stack_chk_fail@PLT # Offset: 221
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x3b20
  Size        : 0xea
  MaxSize     : 0xf0
  Offset      : 0x3b20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x38, %rsp
    0000000e: 	movq	0x8(%rsi), %rbx
    00000012: 	movq	0x8(%rdi), %rdx
    00000016: 	movq	%fs:0x28, %rax
    0000001f: 	movq	%rax, 0x28(%rsp)
    00000024: 	xorl	%eax, %eax
    00000026: 	movq	%rbx, %rax
    00000029: 	subq	%rdx, %rax
    0000002c: 	cmpq	$0x8, %rax
    00000030: 	jle	.Ltmp248 # Offset: 48
    00000036: 	movsd	(%rdx), %xmm1
    0000003a: 	movq	%rsi, %rbp
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp253:
    00000040: 	movsd	-0x8(%rbx), %xmm2
    00000045: 	leaq	-0x8(%rbx), %rcx
    00000049: 	comisd	%xmm1, %xmm2
    0000004d: 	ja	.Ltmp249 # Offset: 77
    0000004f: 	cmpq	%rdx, %rcx
    00000052: 	jbe	.Ltmp250 # Offset: 82
    00000054: 	movsd	(%rdx), %xmm0
    00000058: 	leaq	0x8(%rdx), %rax
    0000005c: 	comisd	%xmm0, %xmm1
    00000060: 	jbe	.Ltmp251 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp252:
    00000068: 	movq	%rax, %rdx
    0000006b: 	movsd	(%rax), %xmm0
    0000006f: 	leaq	0x8(%rax), %rax
    00000073: 	comisd	%xmm0, %xmm1
    00000077: 	ja	.Ltmp252 # Offset: 119
    00000079: 	cmpq	%rdx, %rcx
    0000007c: 	jbe	.Ltmp250 # Offset: 124
.Ltmp251:
    0000007e: 	movsd	%xmm0, (%rcx)
    00000082: 	movsd	%xmm2, (%rdx)
.Ltmp249:
    00000086: 	movq	%rcx, %rbx
    00000089: 	jmp	.Ltmp253 # Offset: 137
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp250:
    00000090: 	movq	0x8(%rdi), %rax
    00000094: 	movq	%rsp, %r12
    00000097: 	leaq	0x10(%rsp), %r13
    0000009c: 	movq	%rbx, 0x8(%rsp)
    000000a1: 	movq	%r12, %rsi
    000000a4: 	movq	%r13, %rdi
    000000a7: 	movq	%rax, 0x18(%rsp)
    000000ac: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 172
    000000b1: 	movq	0x8(%rbp), %rax
    000000b5: 	movq	%r13, %rsi
    000000b8: 	movq	%r12, %rdi
    000000bb: 	movq	%rbx, 0x8(%rsp)
    000000c0: 	movq	%rax, 0x18(%rsp)
    000000c5: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 197
.Ltmp248:
    000000ca: 	movq	0x28(%rsp), %rax
    000000cf: 	subq	%fs:0x28, %rax
    000000d8: 	jne	.Ltmp254 # Offset: 216
    000000da: 	addq	$0x38, %rsp
    000000de: 	popq	%rbx
    000000df: 	popq	%rbp
    000000e0: 	popq	%r12
    000000e2: 	popq	%r13
    000000e4: 	retq # Offset: 228
.Ltmp254:
    000000e5: 	callq	__stack_chk_fail@PLT # Offset: 229
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_"

Binary Function "_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_vector.cpp/1
  Number      : 55
  State       : disassembled
  Address     : 0x3c10
  Size        : 0xc00
  MaxSize     : 0xc00
  Offset      : 0x3c10
  Section     : .text
  Orc Section : .local.text._Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rsi, %r14
    0000000a: 	pushq	%r13
    0000000c: 	xorl	%r13d, %r13d
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x88, %rsp
    0000001a: 	movq	%rdx, 0x8(%rsp)
    0000001f: 	movq	%rcx, 0x10(%rsp)
    00000024: 	movq	%r8, 0x18(%rsp)
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x78(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	callq	clock@PLT # Offset: 57
    0000003e: 	movl	iterations(%rip), %r11d
    00000045: 	movq	%rax, start_time(%rip)
    0000004c: 	testl	%r11d, %r11d
    0000004f: 	jle	.Ltmp255 # Offset: 79
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp268:
    00000058: 	movq	0x8(%rsp), %rax
    0000005d: 	movq	0x8(%r14), %rsi
    00000061: 	movq	0x8(%r15), %rdx
    00000065: 	movq	0x8(%rax), %rbx
    00000069: 	cmpq	%rdx, %rsi
    0000006c: 	je	.Ltmp256 # Offset: 108
    0000006e: 	subq	%rdx, %rsi
    00000071: 	leaq	0x8(%rdx), %rax
    00000075: 	leaq	-0x8(%rsi), %rcx
    00000079: 	cmpq	%rax, %rbx
    0000007c: 	je	.Ltmp257 # Offset: 124
    00000082: 	cmpq	$0x10, %rcx
    00000086: 	jbe	.Ltmp257 # Offset: 134
    0000008c: 	shrq	$0x3, %rcx
    00000090: 	xorl	%eax, %eax
    00000092: 	addq	$0x1, %rcx
    00000096: 	movq	%rcx, %rsi
    00000099: 	shrq	%rsi
    0000009c: 	shlq	$0x4, %rsi
.Ltmp258:
    000000a0: 	movupd	(%rdx,%rax), %xmm3
    000000a5: 	movups	%xmm3, (%rbx,%rax)
    000000a9: 	addq	$0x10, %rax
    000000ad: 	cmpq	%rsi, %rax
    000000b0: 	jne	.Ltmp258 # Offset: 176
    000000b2: 	movq	%rcx, %rsi
    000000b5: 	andq	$-0x2, %rsi
    000000b9: 	leaq	(,%rsi,8), %rax
    000000c1: 	addq	%rax, %rdx
    000000c4: 	addq	%rbx, %rax
    000000c7: 	cmpq	%rcx, %rsi
    000000ca: 	je	.Ltmp256 # Offset: 202
    000000cc: 	movsd	(%rdx), %xmm0
    000000d0: 	movsd	%xmm0, (%rax)
.Ltmp256:
    000000d4: 	movq	0x10(%rsp), %rax
    000000d9: 	movq	0x8(%rax), %r12
    000000dd: 	movq	%r12, %rax
    000000e0: 	subq	%rbx, %rax
    000000e3: 	cmpq	$0x8, %rax
    000000e7: 	jle	.Ltmp259 # Offset: 231
    000000ed: 	movsd	(%rbx), %xmm1
    000000f1: 	movq	%r12, %rbp
    000000f4: 	movq	%rbx, %rdx
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp264:
    00000100: 	movsd	-0x8(%rbp), %xmm2
    00000105: 	leaq	-0x8(%rbp), %rcx
    00000109: 	comisd	%xmm1, %xmm2
    0000010d: 	ja	.Ltmp260 # Offset: 269
    0000010f: 	cmpq	%rdx, %rcx
    00000112: 	jbe	.Ltmp261 # Offset: 274
    00000118: 	movsd	(%rdx), %xmm0
    0000011c: 	leaq	0x8(%rdx), %rax
    00000120: 	comisd	%xmm0, %xmm1
    00000124: 	jbe	.Ltmp262 # Offset: 292
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp263:
    00000130: 	movq	%rax, %rdx
    00000133: 	movsd	(%rax), %xmm0
    00000137: 	leaq	0x8(%rax), %rax
    0000013b: 	comisd	%xmm0, %xmm1
    0000013f: 	ja	.Ltmp263 # Offset: 319
    00000141: 	cmpq	%rdx, %rcx
    00000144: 	jbe	.Ltmp261 # Offset: 324
.Ltmp262:
    0000014a: 	movsd	%xmm0, (%rcx)
    0000014e: 	movsd	%xmm2, (%rdx)
.Ltmp260:
    00000152: 	movq	%rcx, %rbp
    00000155: 	jmp	.Ltmp264 # Offset: 341
.Ltmp334:
    00000157: 	leaq	0x50(%rsp), %rsi
    0000015c: 	leaq	0x60(%rsp), %rdi
    00000161: 	movl	%r11d, 0x38(%rsp)
    00000166: 	movq	%rcx, 0x58(%rsp)
    0000016b: 	movq	%rcx, 0x30(%rsp)
    00000170: 	movq	%rsi, 0x28(%rsp)
    00000175: 	movq	%rdi, 0x20(%rsp)
    0000017a: 	movq	%rbp, 0x68(%rsp)
    0000017f: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 383
    00000184: 	movq	0x30(%rsp), %rcx
    00000189: 	movq	0x28(%rsp), %rsi
    0000018e: 	movq	%r12, 0x58(%rsp)
    00000193: 	movq	0x20(%rsp), %rdi
    00000198: 	movq	%rcx, 0x68(%rsp)
    0000019d: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 413
    000001a2: 	movl	0x38(%rsp), %r11d
    000001a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp259:
    000001b0: 	addq	$0x8, %rbx
    000001b4: 	jmp	.Ltmp265 # Offset: 436
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp267:
    000001c0: 	addq	$0x8, %rbx
    000001c4: 	movsd	-0x10(%rbx), %xmm0
    000001c9: 	comisd	(%rax), %xmm0
    000001cd: 	ja	.Ltmp266 # Offset: 461
.Ltmp265:
    000001d3: 	movq	%rbx, %rax
    000001d6: 	cmpq	%rbx, %r12
    000001d9: 	jne	.Ltmp267 # Offset: 473
    000001db: 	addl	$0x1, %r13d
    000001df: 	cmpl	%r11d, %r13d
    000001e2: 	jl	.Ltmp268 # Offset: 482
.Ltmp255:
    000001e8: 	callq	clock@PLT # Offset: 488
    000001ed: 	movq	%rax, end_time(%rip)
    000001f4: 	movq	0x78(%rsp), %rdx
    000001f9: 	subq	%fs:0x28, %rdx
    00000202: 	jne	.Ltmp269 # Offset: 514
    00000208: 	subq	start_time(%rip), %rax
    0000020f: 	pxor	%xmm0, %xmm0
    00000213: 	movq	0x18(%rsp), %rdi
    00000218: 	cvtsi2sd	%rax, %xmm0
    0000021d: 	divsd	DATAat0x15638(%rip), %xmm0
    00000225: 	addq	$0x88, %rsp
    0000022c: 	popq	%rbx
    0000022d: 	popq	%rbp
    0000022e: 	popq	%r12
    00000230: 	popq	%r13
    00000232: 	popq	%r14
    00000234: 	popq	%r15
    00000236: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 566
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp261:
    00000240: 	movq	%rbp, %rax
    00000243: 	subq	%rbx, %rax
    00000246: 	cmpq	$0x8, %rax
    0000024a: 	jle	.Ltmp270 # Offset: 586
    00000250: 	movsd	(%rbx), %xmm1
    00000254: 	movq	%rbp, %rax
    00000257: 	movq	%rbx, %rcx
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp275:
    00000260: 	comisd	%xmm1, %xmm2
    00000264: 	leaq	-0x8(%rax), %rsi
    00000268: 	ja	.Ltmp271 # Offset: 616
    0000026a: 	cmpq	%rcx, %rsi
    0000026d: 	jbe	.Ltmp272 # Offset: 621
    00000273: 	movsd	(%rcx), %xmm0
    00000277: 	leaq	0x8(%rcx), %rdx
    0000027b: 	comisd	%xmm0, %xmm1
    0000027f: 	jbe	.Ltmp273 # Offset: 639
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp274:
    00000288: 	movq	%rdx, %rcx
    0000028b: 	movsd	(%rdx), %xmm0
    0000028f: 	leaq	0x8(%rdx), %rdx
    00000293: 	comisd	%xmm0, %xmm1
    00000297: 	ja	.Ltmp274 # Offset: 663
    00000299: 	cmpq	%rcx, %rsi
    0000029c: 	jbe	.Ltmp272 # Offset: 668
.Ltmp273:
    000002a2: 	movsd	%xmm0, (%rsi)
    000002a6: 	movsd	%xmm2, (%rcx)
.Ltmp271:
    000002aa: 	movsd	-0x8(%rsi), %xmm2
    000002af: 	movq	%rsi, %rax
    000002b2: 	jmp	.Ltmp275 # Offset: 690
.Ltmp312:
    000002b4: 	leaq	0x50(%rsp), %rsi
    000002b9: 	leaq	0x60(%rsp), %rdi
    000002be: 	movl	%r11d, 0x38(%rsp)
    000002c3: 	movq	%rcx, 0x58(%rsp)
    000002c8: 	movq	%rcx, 0x30(%rsp)
    000002cd: 	movq	%rdx, 0x68(%rsp)
    000002d2: 	movq	%rsi, 0x28(%rsp)
    000002d7: 	movq	%rdi, 0x20(%rsp)
    000002dc: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 732
    000002e1: 	movq	0x30(%rsp), %rcx
    000002e6: 	movq	0x28(%rsp), %rsi
    000002eb: 	movq	%rbp, 0x58(%rsp)
    000002f0: 	movq	0x20(%rsp), %rdi
    000002f5: 	movq	%rcx, 0x68(%rsp)
    000002fa: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 762
    000002ff: 	movl	0x38(%rsp), %r11d
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp270:
    00000308: 	movq	%r12, %rax
    0000030b: 	subq	%rbp, %rax
    0000030e: 	cmpq	$0x8, %rax
    00000312: 	jle	.Ltmp259 # Offset: 786
    00000318: 	movsd	(%rbp), %xmm1
    0000031d: 	movq	%r12, %rax
    00000320: 	movq	%rbp, %rcx
    00000323: 	nopl	(%rax,%rax) # Size: 5
.Ltmp280:
    00000328: 	movsd	-0x8(%rax), %xmm2
    0000032d: 	leaq	-0x8(%rax), %rsi
    00000331: 	comisd	%xmm1, %xmm2
    00000335: 	ja	.Ltmp276 # Offset: 821
    00000337: 	cmpq	%rcx, %rsi
    0000033a: 	jbe	.Ltmp277 # Offset: 826
    0000033c: 	movsd	(%rcx), %xmm0
    00000340: 	leaq	0x8(%rcx), %rdx
    00000344: 	comisd	%xmm0, %xmm1
    00000348: 	jbe	.Ltmp278 # Offset: 840
    0000034a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp279:
    00000350: 	movq	%rdx, %rcx
    00000353: 	movsd	(%rdx), %xmm0
    00000357: 	leaq	0x8(%rdx), %rdx
    0000035b: 	comisd	%xmm0, %xmm1
    0000035f: 	ja	.Ltmp279 # Offset: 863
    00000361: 	cmpq	%rcx, %rsi
    00000364: 	jbe	.Ltmp277 # Offset: 868
.Ltmp278:
    00000366: 	movsd	%xmm0, (%rsi)
    0000036a: 	movsd	%xmm2, (%rcx)
.Ltmp276:
    0000036e: 	movq	%rsi, %rax
    00000371: 	jmp	.Ltmp280 # Offset: 881
    00000373: 	nopl	(%rax,%rax) # Size: 5
.Ltmp266:
    00000378: 	movq	0x18(%rsp), %rax
    0000037d: 	leaq	DATAat0x151ba(%rip), %rsi
    00000384: 	movl	$0x1, %edi
    00000389: 	addl	$0x1, %r13d
    0000038d: 	movq	(%rax), %rdx
    00000390: 	xorl	%eax, %eax
    00000392: 	callq	__printf_chk@PLT # Offset: 914
    00000397: 	movl	iterations(%rip), %r11d
    0000039e: 	cmpl	%r11d, %r13d
    000003a1: 	jl	.Ltmp268 # Offset: 929
    000003a7: 	jmp	.Ltmp255 # Offset: 935
.Ltmp277:
    000003ac: 	movq	%rax, %rdx
    000003af: 	subq	%rbp, %rdx
    000003b2: 	cmpq	$0x8, %rdx
    000003b6: 	jle	.Ltmp281 # Offset: 950
    000003bc: 	movsd	(%rbp), %xmm1
    000003c1: 	movq	%rax, %rcx
    000003c4: 	movq	%rbp, %rsi
    000003c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp286:
    000003d0: 	comisd	%xmm1, %xmm2
    000003d4: 	leaq	-0x8(%rcx), %rdi
    000003d8: 	ja	.Ltmp282 # Offset: 984
    000003da: 	cmpq	%rsi, %rdi
    000003dd: 	jbe	.Ltmp283 # Offset: 989
    000003e3: 	movsd	(%rsi), %xmm0
    000003e7: 	leaq	0x8(%rsi), %rdx
    000003eb: 	comisd	%xmm0, %xmm1
    000003ef: 	jbe	.Ltmp284 # Offset: 1007
    000003f1: 	nopl	(%rax) # Size: 7
.Ltmp285:
    000003f8: 	movq	%rdx, %rsi
    000003fb: 	movsd	(%rdx), %xmm0
    000003ff: 	leaq	0x8(%rdx), %rdx
    00000403: 	comisd	%xmm0, %xmm1
    00000407: 	ja	.Ltmp285 # Offset: 1031
    00000409: 	cmpq	%rsi, %rdi
    0000040c: 	jbe	.Ltmp283 # Offset: 1036
.Ltmp284:
    00000412: 	movsd	%xmm0, (%rdi)
    00000416: 	movsd	%xmm2, (%rsi)
.Ltmp282:
    0000041a: 	movsd	-0x8(%rdi), %xmm2
    0000041f: 	movq	%rdi, %rcx
    00000422: 	jmp	.Ltmp286 # Offset: 1058
.Ltmp345:
    00000424: 	leaq	0x50(%rsp), %rsi
    00000429: 	leaq	0x60(%rsp), %rdi
    0000042e: 	movl	%r11d, 0x38(%rsp)
    00000433: 	movq	%rax, 0x20(%rsp)
    00000438: 	movq	%rcx, 0x68(%rsp)
    0000043d: 	movq	%rsi, 0x30(%rsp)
    00000442: 	movq	%rdi, 0x28(%rsp)
    00000447: 	movq	%rbp, 0x58(%rsp)
    0000044c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 1100
    00000451: 	movq	0x20(%rsp), %rax
    00000456: 	movq	0x30(%rsp), %rsi
    0000045b: 	movq	%rbp, 0x68(%rsp)
    00000460: 	movq	0x28(%rsp), %rdi
    00000465: 	movq	%rax, 0x58(%rsp)
    0000046a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 1130
    0000046f: 	movl	0x38(%rsp), %r11d
    00000474: 	movq	0x20(%rsp), %rax
.Ltmp281:
    00000479: 	movq	%r12, %rdx
    0000047c: 	subq	%rax, %rdx
    0000047f: 	cmpq	$0x8, %rdx
    00000483: 	jle	.Ltmp259 # Offset: 1155
    00000489: 	movsd	(%rax), %xmm1
    0000048d: 	movq	%r12, %rbp
    00000490: 	movq	%rax, %rcx
    00000493: 	nopl	(%rax,%rax) # Size: 5
.Ltmp291:
    00000498: 	movsd	-0x8(%rbp), %xmm2
    0000049d: 	leaq	-0x8(%rbp), %rsi
    000004a1: 	comisd	%xmm1, %xmm2
    000004a5: 	ja	.Ltmp287 # Offset: 1189
    000004a7: 	cmpq	%rcx, %rsi
    000004aa: 	jbe	.Ltmp288 # Offset: 1194
    000004b0: 	movsd	(%rcx), %xmm0
    000004b4: 	leaq	0x8(%rcx), %rdx
    000004b8: 	comisd	%xmm0, %xmm1
    000004bc: 	jbe	.Ltmp289 # Offset: 1212
    000004be: 	nop # Size: 2
.Ltmp290:
    000004c0: 	movq	%rdx, %rcx
    000004c3: 	movsd	(%rdx), %xmm0
    000004c7: 	leaq	0x8(%rdx), %rdx
    000004cb: 	comisd	%xmm0, %xmm1
    000004cf: 	ja	.Ltmp290 # Offset: 1231
    000004d1: 	cmpq	%rcx, %rsi
    000004d4: 	jbe	.Ltmp288 # Offset: 1236
.Ltmp289:
    000004da: 	movsd	%xmm0, (%rsi)
    000004de: 	movsd	%xmm2, (%rcx)
.Ltmp287:
    000004e2: 	movq	%rsi, %rbp
    000004e5: 	jmp	.Ltmp291 # Offset: 1253
.Ltmp272:
    000004e7: 	movq	%rax, %rdx
    000004ea: 	subq	%rbx, %rdx
    000004ed: 	cmpq	$0x8, %rdx
    000004f1: 	jle	.Ltmp292 # Offset: 1265
    000004f7: 	movsd	(%rbx), %xmm1
    000004fb: 	movq	%rax, %rcx
    000004fe: 	movq	%rbx, %rsi
    00000501: 	nopl	(%rax) # Size: 7
.Ltmp297:
    00000508: 	comisd	%xmm1, %xmm2
    0000050c: 	leaq	-0x8(%rcx), %rdi
    00000510: 	ja	.Ltmp293 # Offset: 1296
    00000512: 	cmpq	%rsi, %rdi
    00000515: 	jbe	.Ltmp294 # Offset: 1301
    0000051b: 	movsd	(%rsi), %xmm0
    0000051f: 	leaq	0x8(%rsi), %rdx
    00000523: 	comisd	%xmm0, %xmm1
    00000527: 	jbe	.Ltmp295 # Offset: 1319
    00000529: 	nopl	(%rax) # Size: 7
.Ltmp296:
    00000530: 	movq	%rdx, %rsi
    00000533: 	movsd	(%rdx), %xmm0
    00000537: 	leaq	0x8(%rdx), %rdx
    0000053b: 	comisd	%xmm0, %xmm1
    0000053f: 	ja	.Ltmp296 # Offset: 1343
    00000541: 	cmpq	%rsi, %rdi
    00000544: 	jbe	.Ltmp294 # Offset: 1348
.Ltmp295:
    0000054a: 	movsd	%xmm0, (%rdi)
    0000054e: 	movsd	%xmm2, (%rsi)
.Ltmp293:
    00000552: 	movsd	-0x8(%rdi), %xmm2
    00000557: 	movq	%rdi, %rcx
    0000055a: 	jmp	.Ltmp297 # Offset: 1370
.Ltmp323:
    0000055c: 	leaq	0x50(%rsp), %rsi
    00000561: 	leaq	0x60(%rsp), %rdi
    00000566: 	movl	%r11d, 0x44(%rsp)
    0000056b: 	movq	%rax, 0x20(%rsp)
    00000570: 	movq	%r9, 0x58(%rsp)
    00000575: 	movq	%r9, 0x38(%rsp)
    0000057a: 	movq	%rcx, 0x68(%rsp)
    0000057f: 	movq	%rsi, 0x30(%rsp)
    00000584: 	movq	%rdi, 0x28(%rsp)
    00000589: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 1417
    0000058e: 	movq	0x20(%rsp), %rax
    00000593: 	movq	0x38(%rsp), %r9
    00000598: 	movq	0x30(%rsp), %rsi
    0000059d: 	movq	0x28(%rsp), %rdi
    000005a2: 	movq	%rax, 0x58(%rsp)
    000005a7: 	movq	%r9, 0x68(%rsp)
    000005ac: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 1452
    000005b1: 	movl	0x44(%rsp), %r11d
    000005b6: 	movq	0x20(%rsp), %rax
.Ltmp292:
    000005bb: 	movq	%rbp, %rdx
    000005be: 	subq	%rax, %rdx
    000005c1: 	cmpq	$0x8, %rdx
    000005c5: 	jle	.Ltmp270 # Offset: 1477
    000005cb: 	movsd	(%rax), %xmm1
    000005cf: 	movq	%rbp, %rdx
    000005d2: 	movq	%rax, %rsi
    000005d5: 	nopl	(%rax) # Size: 3
.Ltmp302:
    000005d8: 	movsd	-0x8(%rdx), %xmm2
    000005dd: 	leaq	-0x8(%rdx), %rdi
    000005e1: 	comisd	%xmm1, %xmm2
    000005e5: 	ja	.Ltmp298 # Offset: 1509
    000005e7: 	cmpq	%rsi, %rdi
    000005ea: 	jbe	.Ltmp299 # Offset: 1514
    000005ec: 	movsd	(%rsi), %xmm0
    000005f0: 	leaq	0x8(%rsi), %rcx
    000005f4: 	comisd	%xmm0, %xmm1
    000005f8: 	jbe	.Ltmp300 # Offset: 1528
    000005fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp301:
    00000600: 	movq	%rcx, %rsi
    00000603: 	movsd	(%rcx), %xmm0
    00000607: 	leaq	0x8(%rcx), %rcx
    0000060b: 	comisd	%xmm0, %xmm1
    0000060f: 	ja	.Ltmp301 # Offset: 1551
    00000611: 	cmpq	%rsi, %rdi
    00000614: 	jbe	.Ltmp299 # Offset: 1556
.Ltmp300:
    00000616: 	movsd	%xmm0, (%rdi)
    0000061a: 	movsd	%xmm2, (%rsi)
.Ltmp298:
    0000061e: 	movq	%rdi, %rdx
    00000621: 	jmp	.Ltmp302 # Offset: 1569
.Ltmp257:
    00000623: 	xorl	%eax, %eax
    00000625: 	nopl	(%rax) # Size: 3
.Ltmp303:
    00000628: 	movsd	(%rdx,%rax), %xmm0
    0000062d: 	movsd	%xmm0, (%rbx,%rax)
    00000632: 	addq	$0x8, %rax
    00000636: 	cmpq	%rax, %rsi
    00000639: 	jne	.Ltmp303 # Offset: 1593
    0000063b: 	jmp	.Ltmp256 # Offset: 1595
.Ltmp299:
    00000640: 	movq	%rdx, %rcx
    00000643: 	subq	%rax, %rcx
    00000646: 	cmpq	$0x8, %rcx
    0000064a: 	jle	.Ltmp304 # Offset: 1610
    00000650: 	movsd	(%rax), %xmm1
    00000654: 	movq	%rdx, %r9
    00000657: 	movq	%rax, %rsi
    0000065a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp309:
    00000660: 	comisd	%xmm1, %xmm2
    00000664: 	leaq	-0x8(%r9), %rdi
    00000668: 	ja	.Ltmp305 # Offset: 1640
    0000066a: 	cmpq	%rsi, %rdi
    0000066d: 	jbe	.Ltmp306 # Offset: 1645
    0000066f: 	movsd	(%rsi), %xmm0
    00000673: 	leaq	0x8(%rsi), %rcx
    00000677: 	comisd	%xmm0, %xmm1
    0000067b: 	jbe	.Ltmp307 # Offset: 1659
    0000067d: 	nopl	(%rax) # Size: 3
.Ltmp308:
    00000680: 	movq	%rcx, %rsi
    00000683: 	movsd	(%rcx), %xmm0
    00000687: 	leaq	0x8(%rcx), %rcx
    0000068b: 	comisd	%xmm0, %xmm1
    0000068f: 	ja	.Ltmp308 # Offset: 1679
    00000691: 	cmpq	%rsi, %rdi
    00000694: 	jbe	.Ltmp306 # Offset: 1684
.Ltmp307:
    00000696: 	movsd	%xmm0, (%rdi)
    0000069a: 	movsd	%xmm2, (%rsi)
.Ltmp305:
    0000069e: 	movsd	-0x8(%rdi), %xmm2
    000006a3: 	movq	%rdi, %r9
    000006a6: 	jmp	.Ltmp309 # Offset: 1702
.Ltmp306:
    000006a8: 	movq	%r9, %rcx
    000006ab: 	subq	%rax, %rcx
    000006ae: 	cmpq	$0x8, %rcx
    000006b2: 	jg	.Ltmp310 # Offset: 1714
    000006b8: 	leaq	0x50(%rsp), %rsi
    000006bd: 	leaq	0x60(%rsp), %rdi
.Ltmp354:
    000006c2: 	movl	%r11d, 0x28(%rsp)
    000006c7: 	movq	%rdx, 0x58(%rsp)
    000006cc: 	movq	%rdx, 0x20(%rsp)
    000006d1: 	movq	%r9, 0x68(%rsp)
    000006d6: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 1750
    000006db: 	movl	0x28(%rsp), %r11d
    000006e0: 	movq	0x20(%rsp), %rdx
.Ltmp304:
    000006e5: 	movq	%rbp, %rax
    000006e8: 	subq	%rdx, %rax
    000006eb: 	cmpq	$0x8, %rax
    000006ef: 	jle	.Ltmp270 # Offset: 1775
    000006f5: 	movsd	(%rdx), %xmm1
    000006f9: 	movq	%rbp, %rcx
    000006fc: 	movq	%rdx, %rsi
    000006ff: 	nop # Size: 1
.Ltmp315:
    00000700: 	movsd	-0x8(%rcx), %xmm2
    00000705: 	leaq	-0x8(%rcx), %rdi
    00000709: 	comisd	%xmm1, %xmm2
    0000070d: 	ja	.Ltmp311 # Offset: 1805
    0000070f: 	cmpq	%rsi, %rdi
    00000712: 	jbe	.Ltmp312 # Offset: 1810
    00000718: 	movsd	(%rsi), %xmm0
    0000071c: 	leaq	0x8(%rsi), %rax
    00000720: 	comisd	%xmm0, %xmm1
    00000724: 	jbe	.Ltmp313 # Offset: 1828
    00000726: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp314:
    00000730: 	movq	%rax, %rsi
    00000733: 	movsd	(%rax), %xmm0
    00000737: 	leaq	0x8(%rax), %rax
    0000073b: 	comisd	%xmm0, %xmm1
    0000073f: 	ja	.Ltmp314 # Offset: 1855
    00000741: 	cmpq	%rsi, %rdi
    00000744: 	jbe	.Ltmp312 # Offset: 1860
.Ltmp313:
    0000074a: 	movsd	%xmm0, (%rdi)
    0000074e: 	movsd	%xmm2, (%rsi)
.Ltmp311:
    00000752: 	movq	%rdi, %rcx
    00000755: 	jmp	.Ltmp315 # Offset: 1877
.Ltmp294:
    00000757: 	movq	%rcx, %rdx
    0000075a: 	subq	%rbx, %rdx
    0000075d: 	cmpq	$0x8, %rdx
    00000761: 	jle	.Ltmp316 # Offset: 1889
    00000767: 	movsd	(%rbx), %xmm1
    0000076b: 	movq	%rcx, %r9
    0000076e: 	movq	%rbx, %rsi
    00000771: 	nopl	(%rax) # Size: 7
.Ltmp321:
    00000778: 	movsd	-0x8(%r9), %xmm2
    0000077e: 	leaq	-0x8(%r9), %rdi
    00000782: 	comisd	%xmm1, %xmm2
    00000786: 	ja	.Ltmp317 # Offset: 1926
    00000788: 	cmpq	%rsi, %rdi
    0000078b: 	jbe	.Ltmp318 # Offset: 1931
    0000078d: 	movsd	(%rsi), %xmm0
    00000791: 	leaq	0x8(%rsi), %rdx
    00000795: 	comisd	%xmm0, %xmm1
    00000799: 	jbe	.Ltmp319 # Offset: 1945
    0000079b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp320:
    000007a0: 	movq	%rdx, %rsi
    000007a3: 	movsd	(%rdx), %xmm0
    000007a7: 	leaq	0x8(%rdx), %rdx
    000007ab: 	comisd	%xmm0, %xmm1
    000007af: 	ja	.Ltmp320 # Offset: 1967
    000007b1: 	cmpq	%rsi, %rdi
    000007b4: 	jbe	.Ltmp318 # Offset: 1972
.Ltmp319:
    000007b6: 	movsd	%xmm0, (%rdi)
    000007ba: 	movsd	%xmm2, (%rsi)
.Ltmp317:
    000007be: 	movq	%rdi, %r9
    000007c1: 	jmp	.Ltmp321 # Offset: 1985
.Ltmp318:
    000007c3: 	leaq	0x50(%rsp), %rsi
    000007c8: 	leaq	0x60(%rsp), %rdi
    000007cd: 	movq	%rax, 0x48(%rsp)
    000007d2: 	movl	%r11d, 0x44(%rsp)
    000007d7: 	movq	%rcx, 0x20(%rsp)
    000007dc: 	movq	%r9, 0x58(%rsp)
    000007e1: 	movq	%r9, 0x38(%rsp)
    000007e6: 	movq	%rsi, 0x30(%rsp)
    000007eb: 	movq	%rdi, 0x28(%rsp)
    000007f0: 	movq	%rbx, 0x68(%rsp)
    000007f5: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 2037
    000007fa: 	movq	0x20(%rsp), %rcx
    000007ff: 	movq	0x38(%rsp), %r9
    00000804: 	movq	0x30(%rsp), %rsi
    00000809: 	movq	0x28(%rsp), %rdi
    0000080e: 	movq	%rcx, 0x58(%rsp)
    00000813: 	movq	%r9, 0x68(%rsp)
    00000818: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 2072
    0000081d: 	movq	0x48(%rsp), %rax
    00000822: 	movl	0x44(%rsp), %r11d
    00000827: 	movq	0x20(%rsp), %rcx
.Ltmp316:
    0000082c: 	movq	%rax, %rdx
    0000082f: 	subq	%rcx, %rdx
    00000832: 	cmpq	$0x8, %rdx
    00000836: 	jle	.Ltmp292 # Offset: 2102
    0000083c: 	movsd	(%rcx), %xmm1
    00000840: 	movq	%rax, %r9
    00000843: 	movq	%rcx, %rsi
    00000846: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp326:
    00000850: 	movsd	-0x8(%r9), %xmm2
    00000856: 	leaq	-0x8(%r9), %rdi
    0000085a: 	comisd	%xmm1, %xmm2
    0000085e: 	ja	.Ltmp322 # Offset: 2142
    00000860: 	cmpq	%rsi, %rdi
    00000863: 	jbe	.Ltmp323 # Offset: 2147
    00000869: 	movsd	(%rsi), %xmm0
    0000086d: 	leaq	0x8(%rsi), %rdx
    00000871: 	comisd	%xmm0, %xmm1
    00000875: 	jbe	.Ltmp324 # Offset: 2165
    00000877: 	nopw	(%rax,%rax) # Size: 9
.Ltmp325:
    00000880: 	movq	%rdx, %rsi
    00000883: 	movsd	(%rdx), %xmm0
    00000887: 	leaq	0x8(%rdx), %rdx
    0000088b: 	comisd	%xmm0, %xmm1
    0000088f: 	ja	.Ltmp325 # Offset: 2191
    00000891: 	cmpq	%rsi, %rdi
    00000894: 	jbe	.Ltmp323 # Offset: 2196
.Ltmp324:
    0000089a: 	movsd	%xmm0, (%rdi)
    0000089e: 	movsd	%xmm2, (%rsi)
.Ltmp322:
    000008a2: 	movq	%rdi, %r9
    000008a5: 	jmp	.Ltmp326 # Offset: 2213
.Ltmp288:
    000008a7: 	movq	%rbp, %rdx
    000008aa: 	subq	%rax, %rdx
    000008ad: 	cmpq	$0x8, %rdx
    000008b1: 	jle	.Ltmp327 # Offset: 2225
    000008b7: 	movsd	(%rax), %xmm1
    000008bb: 	movq	%rbp, %rcx
    000008be: 	movq	%rax, %rsi
    000008c1: 	nopl	(%rax) # Size: 7
.Ltmp332:
    000008c8: 	movsd	-0x8(%rcx), %xmm2
    000008cd: 	leaq	-0x8(%rcx), %rdi
    000008d1: 	comisd	%xmm1, %xmm2
    000008d5: 	ja	.Ltmp328 # Offset: 2261
    000008d7: 	cmpq	%rsi, %rdi
    000008da: 	jbe	.Ltmp329 # Offset: 2266
    000008dc: 	movsd	(%rsi), %xmm0
    000008e0: 	leaq	0x8(%rsi), %rdx
    000008e4: 	comisd	%xmm0, %xmm1
    000008e8: 	jbe	.Ltmp330 # Offset: 2280
    000008ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp331:
    000008f0: 	movq	%rdx, %rsi
    000008f3: 	movsd	(%rdx), %xmm0
    000008f7: 	leaq	0x8(%rdx), %rdx
    000008fb: 	comisd	%xmm0, %xmm1
    000008ff: 	ja	.Ltmp331 # Offset: 2303
    00000901: 	cmpq	%rsi, %rdi
    00000904: 	jbe	.Ltmp329 # Offset: 2308
.Ltmp330:
    00000906: 	movsd	%xmm0, (%rdi)
    0000090a: 	movsd	%xmm2, (%rsi)
.Ltmp328:
    0000090e: 	movq	%rdi, %rcx
    00000911: 	jmp	.Ltmp332 # Offset: 2321
.Ltmp329:
    00000913: 	leaq	0x50(%rsp), %rsi
    00000918: 	leaq	0x60(%rsp), %rdi
    0000091d: 	movl	%r11d, 0x38(%rsp)
    00000922: 	movq	%rcx, 0x58(%rsp)
    00000927: 	movq	%rcx, 0x30(%rsp)
    0000092c: 	movq	%rax, 0x68(%rsp)
    00000931: 	movq	%rsi, 0x28(%rsp)
    00000936: 	movq	%rdi, 0x20(%rsp)
    0000093b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 2363
    00000940: 	movq	0x30(%rsp), %rcx
    00000945: 	movq	0x28(%rsp), %rsi
    0000094a: 	movq	%rbp, 0x58(%rsp)
    0000094f: 	movq	0x20(%rsp), %rdi
    00000954: 	movq	%rcx, 0x68(%rsp)
    00000959: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 2393
    0000095e: 	movl	0x38(%rsp), %r11d
.Ltmp327:
    00000963: 	movq	%r12, %rax
    00000966: 	subq	%rbp, %rax
    00000969: 	cmpq	$0x8, %rax
    0000096d: 	jle	.Ltmp259 # Offset: 2413
    00000973: 	movsd	(%rbp), %xmm1
    00000978: 	movq	%r12, %rcx
    0000097b: 	movq	%rbp, %rdx
    0000097e: 	nop # Size: 2
.Ltmp337:
    00000980: 	movsd	-0x8(%rcx), %xmm2
    00000985: 	leaq	-0x8(%rcx), %rsi
    00000989: 	comisd	%xmm1, %xmm2
    0000098d: 	ja	.Ltmp333 # Offset: 2445
    0000098f: 	cmpq	%rdx, %rsi
    00000992: 	jbe	.Ltmp334 # Offset: 2450
    00000998: 	movsd	(%rdx), %xmm0
    0000099c: 	leaq	0x8(%rdx), %rax
    000009a0: 	comisd	%xmm0, %xmm1
    000009a4: 	jbe	.Ltmp335 # Offset: 2468
    000009a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp336:
    000009b0: 	movq	%rax, %rdx
    000009b3: 	movsd	(%rax), %xmm0
    000009b7: 	leaq	0x8(%rax), %rax
    000009bb: 	comisd	%xmm0, %xmm1
    000009bf: 	ja	.Ltmp336 # Offset: 2495
    000009c1: 	cmpq	%rdx, %rsi
    000009c4: 	jbe	.Ltmp334 # Offset: 2500
.Ltmp335:
    000009ca: 	movsd	%xmm0, (%rsi)
    000009ce: 	movsd	%xmm2, (%rdx)
.Ltmp333:
    000009d2: 	movq	%rsi, %rcx
    000009d5: 	jmp	.Ltmp337 # Offset: 2517
.Ltmp283:
    000009d7: 	movq	%rcx, %rdx
    000009da: 	subq	%rbp, %rdx
    000009dd: 	cmpq	$0x8, %rdx
    000009e1: 	jle	.Ltmp338 # Offset: 2529
    000009e7: 	movsd	(%rbp), %xmm1
    000009ec: 	movq	%rcx, %r9
    000009ef: 	movq	%rbp, %rsi
    000009f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp343:
    000009f8: 	movsd	-0x8(%r9), %xmm2
    000009fe: 	leaq	-0x8(%r9), %rdi
    00000a02: 	comisd	%xmm1, %xmm2
    00000a06: 	ja	.Ltmp339 # Offset: 2566
    00000a08: 	cmpq	%rsi, %rdi
    00000a0b: 	jbe	.Ltmp340 # Offset: 2571
    00000a0d: 	movsd	(%rsi), %xmm0
    00000a11: 	leaq	0x8(%rsi), %rdx
    00000a15: 	comisd	%xmm0, %xmm1
    00000a19: 	jbe	.Ltmp341 # Offset: 2585
    00000a1b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp342:
    00000a20: 	movq	%rdx, %rsi
    00000a23: 	movsd	(%rdx), %xmm0
    00000a27: 	leaq	0x8(%rdx), %rdx
    00000a2b: 	comisd	%xmm0, %xmm1
    00000a2f: 	ja	.Ltmp342 # Offset: 2607
    00000a31: 	cmpq	%rsi, %rdi
    00000a34: 	jbe	.Ltmp340 # Offset: 2612
.Ltmp341:
    00000a36: 	movsd	%xmm0, (%rdi)
    00000a3a: 	movsd	%xmm2, (%rsi)
.Ltmp339:
    00000a3e: 	movq	%rdi, %r9
    00000a41: 	jmp	.Ltmp343 # Offset: 2625
.Ltmp340:
    00000a43: 	leaq	0x50(%rsp), %rsi
    00000a48: 	leaq	0x60(%rsp), %rdi
    00000a4d: 	movq	%rax, 0x48(%rsp)
    00000a52: 	movl	%r11d, 0x44(%rsp)
    00000a57: 	movq	%rcx, 0x20(%rsp)
    00000a5c: 	movq	%r9, 0x58(%rsp)
    00000a61: 	movq	%r9, 0x38(%rsp)
    00000a66: 	movq	%rsi, 0x30(%rsp)
    00000a6b: 	movq	%rdi, 0x28(%rsp)
    00000a70: 	movq	%rbp, 0x68(%rsp)
    00000a75: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 2677
    00000a7a: 	movq	0x20(%rsp), %rcx
    00000a7f: 	movq	0x38(%rsp), %r9
    00000a84: 	movq	0x30(%rsp), %rsi
    00000a89: 	movq	0x28(%rsp), %rdi
    00000a8e: 	movq	%rcx, 0x58(%rsp)
    00000a93: 	movq	%r9, 0x68(%rsp)
    00000a98: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 2712
    00000a9d: 	movq	0x48(%rsp), %rax
    00000aa2: 	movl	0x44(%rsp), %r11d
    00000aa7: 	movq	0x20(%rsp), %rcx
.Ltmp338:
    00000aac: 	movq	%rax, %rdx
    00000aaf: 	subq	%rcx, %rdx
    00000ab2: 	cmpq	$0x8, %rdx
    00000ab6: 	jle	.Ltmp281 # Offset: 2742
    00000abc: 	movsd	(%rcx), %xmm1
    00000ac0: 	movq	%rax, %rbp
    00000ac3: 	movq	%rcx, %rsi
    00000ac6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp348:
    00000ad0: 	movsd	-0x8(%rbp), %xmm2
    00000ad5: 	leaq	-0x8(%rbp), %rdi
    00000ad9: 	comisd	%xmm1, %xmm2
    00000add: 	ja	.Ltmp344 # Offset: 2781
    00000adf: 	cmpq	%rsi, %rdi
    00000ae2: 	jbe	.Ltmp345 # Offset: 2786
    00000ae8: 	movsd	(%rsi), %xmm0
    00000aec: 	leaq	0x8(%rsi), %rdx
    00000af0: 	comisd	%xmm0, %xmm1
    00000af4: 	jbe	.Ltmp346 # Offset: 2804
    00000af6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp347:
    00000b00: 	movq	%rdx, %rsi
    00000b03: 	movsd	(%rdx), %xmm0
    00000b07: 	leaq	0x8(%rdx), %rdx
    00000b0b: 	comisd	%xmm0, %xmm1
    00000b0f: 	ja	.Ltmp347 # Offset: 2831
    00000b11: 	cmpq	%rsi, %rdi
    00000b14: 	jbe	.Ltmp345 # Offset: 2836
.Ltmp346:
    00000b1a: 	movsd	%xmm0, (%rdi)
    00000b1e: 	movsd	%xmm2, (%rsi)
.Ltmp344:
    00000b22: 	movq	%rdi, %rbp
    00000b25: 	jmp	.Ltmp348 # Offset: 2853
.Ltmp310:
    00000b27: 	movsd	(%rax), %xmm1
    00000b2b: 	movq	%r9, %r10
    00000b2e: 	movq	%rax, %rsi
    00000b31: 	nopl	(%rax) # Size: 7
.Ltmp353:
    00000b38: 	movsd	-0x8(%r10), %xmm2
    00000b3e: 	leaq	-0x8(%r10), %rdi
    00000b42: 	comisd	%xmm1, %xmm2
    00000b46: 	ja	.Ltmp349 # Offset: 2886
    00000b48: 	cmpq	%rsi, %rdi
    00000b4b: 	jbe	.Ltmp350 # Offset: 2891
    00000b4d: 	movsd	(%rsi), %xmm0
    00000b51: 	leaq	0x8(%rsi), %rcx
    00000b55: 	comisd	%xmm0, %xmm1
    00000b59: 	jbe	.Ltmp351 # Offset: 2905
    00000b5b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp352:
    00000b60: 	movq	%rcx, %rsi
    00000b63: 	movsd	(%rcx), %xmm0
    00000b67: 	leaq	0x8(%rcx), %rcx
    00000b6b: 	comisd	%xmm0, %xmm1
    00000b6f: 	ja	.Ltmp352 # Offset: 2927
    00000b71: 	cmpq	%rsi, %rdi
    00000b74: 	jbe	.Ltmp350 # Offset: 2932
.Ltmp351:
    00000b76: 	movsd	%xmm0, (%rdi)
    00000b7a: 	movsd	%xmm2, (%rsi)
.Ltmp349:
    00000b7e: 	movq	%rdi, %r10
    00000b81: 	jmp	.Ltmp353 # Offset: 2945
.Ltmp350:
    00000b83: 	leaq	0x50(%rsp), %rsi
    00000b88: 	leaq	0x60(%rsp), %rdi
    00000b8d: 	movq	%rdx, 0x48(%rsp)
    00000b92: 	movl	%r11d, 0x44(%rsp)
    00000b97: 	movq	%r9, 0x30(%rsp)
    00000b9c: 	movq	%r10, 0x58(%rsp)
    00000ba1: 	movq	%r10, 0x38(%rsp)
    00000ba6: 	movq	%rax, 0x68(%rsp)
    00000bab: 	movq	%rsi, 0x28(%rsp)
    00000bb0: 	movq	%rdi, 0x20(%rsp)
    00000bb5: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 2997
    00000bba: 	movq	0x30(%rsp), %r9
    00000bbf: 	movq	0x38(%rsp), %r10
    00000bc4: 	movq	0x28(%rsp), %rsi
    00000bc9: 	movq	0x20(%rsp), %rdi
    00000bce: 	movq	%r9, 0x58(%rsp)
    00000bd3: 	movq	%r10, 0x68(%rsp)
    00000bd8: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 3032
    00000bdd: 	movq	0x48(%rsp), %rdx
    00000be2: 	movl	0x44(%rsp), %r11d
    00000be7: 	movq	0x30(%rsp), %r9
    00000bec: 	movq	0x28(%rsp), %rsi
    00000bf1: 	movq	0x20(%rsp), %rdi
    00000bf6: 	jmp	.Ltmp354 # Offset: 3062
.Ltmp269:
    00000bfb: 	callq	__stack_chk_fail@PLT # Offset: 3067
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x4810
  Size        : 0x73f
  MaxSize     : 0x740
  Offset      : 0x4810
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp355 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %rdx
    00000019: 	pushq	%r13
    0000001b: 	pushq	%r12
    0000001d: 	movq	%rsi, %r12
    00000020: 	pushq	%rbp
    00000021: 	movq	%rsi, %rbp
    00000024: 	pushq	%rbx
    00000025: 	movsd	(%rdi), %xmm1
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp360:
    00000030: 	movsd	-0x8(%rbp), %xmm2
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm1, %xmm2
    0000003d: 	ja	.Ltmp356 # Offset: 61
    0000003f: 	cmpq	%rdx, %rcx
    00000042: 	jbe	.Ltmp357 # Offset: 66
    00000044: 	movsd	(%rdx), %xmm0
    00000048: 	leaq	0x8(%rdx), %rax
    0000004c: 	comisd	%xmm0, %xmm1
    00000050: 	jbe	.Ltmp358 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp359:
    00000058: 	movq	%rax, %rdx
    0000005b: 	movsd	(%rax), %xmm0
    0000005f: 	leaq	0x8(%rax), %rax
    00000063: 	comisd	%xmm0, %xmm1
    00000067: 	ja	.Ltmp359 # Offset: 103
    00000069: 	cmpq	%rdx, %rcx
    0000006c: 	jbe	.Ltmp357 # Offset: 108
.Ltmp358:
    0000006e: 	movsd	%xmm0, (%rcx)
    00000072: 	movsd	%xmm2, (%rdx)
.Ltmp356:
    00000076: 	movq	%rcx, %rbp
    00000079: 	jmp	.Ltmp360 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp357:
    00000080: 	movq	%rbp, %rax
    00000083: 	subq	%rdi, %rax
    00000086: 	cmpq	$0x8, %rax
    0000008a: 	jle	.Ltmp361 # Offset: 138
    0000008c: 	movsd	(%rdi), %xmm1
    00000090: 	movq	%rbp, %r13
    00000093: 	movq	%rdi, %rdx
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp366:
    000000a0: 	comisd	%xmm1, %xmm2
    000000a4: 	leaq	-0x8(%r13), %rcx
    000000a8: 	ja	.Ltmp362 # Offset: 168
    000000aa: 	cmpq	%rdx, %rcx
    000000ad: 	jbe	.Ltmp363 # Offset: 173
    000000af: 	movsd	(%rdx), %xmm0
    000000b3: 	leaq	0x8(%rdx), %rax
    000000b7: 	comisd	%xmm0, %xmm1
    000000bb: 	jbe	.Ltmp364 # Offset: 187
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp365:
    000000c0: 	movq	%rax, %rdx
    000000c3: 	movsd	(%rax), %xmm0
    000000c7: 	leaq	0x8(%rax), %rax
    000000cb: 	comisd	%xmm0, %xmm1
    000000cf: 	ja	.Ltmp365 # Offset: 207
    000000d1: 	cmpq	%rdx, %rcx
    000000d4: 	jbe	.Ltmp363 # Offset: 212
.Ltmp364:
    000000d6: 	movsd	%xmm0, (%rcx)
    000000da: 	movsd	%xmm2, (%rdx)
.Ltmp362:
    000000de: 	movsd	-0x8(%rcx), %xmm2
    000000e3: 	movq	%rcx, %r13
    000000e6: 	jmp	.Ltmp366 # Offset: 230
.Ltmp363:
    000000e8: 	movq	%r13, %rax
    000000eb: 	subq	%rdi, %rax
    000000ee: 	cmpq	$0x8, %rax
    000000f2: 	jg	.Ltmp367 # Offset: 242
.Ltmp403:
    000000f8: 	movq	%rbp, %rax
    000000fb: 	subq	%r13, %rax
    000000fe: 	cmpq	$0x8, %rax
    00000102: 	jg	.Ltmp368 # Offset: 258
.Ltmp361:
    00000108: 	movq	%r12, %rax
    0000010b: 	subq	%rbp, %rax
    0000010e: 	cmpq	$0x8, %rax
    00000112: 	jle	.Ltmp369 # Offset: 274
    00000114: 	movsd	(%rbp), %xmm1
    00000119: 	movq	%r12, %r13
    0000011c: 	movq	%rbp, %rdx
    0000011f: 	nop # Size: 1
.Ltmp374:
    00000120: 	movsd	-0x8(%r13), %xmm2
    00000126: 	leaq	-0x8(%r13), %rcx
    0000012a: 	comisd	%xmm1, %xmm2
    0000012e: 	ja	.Ltmp370 # Offset: 302
    00000130: 	cmpq	%rdx, %rcx
    00000133: 	jbe	.Ltmp371 # Offset: 307
    00000135: 	movsd	(%rdx), %xmm0
    00000139: 	leaq	0x8(%rdx), %rax
    0000013d: 	comisd	%xmm0, %xmm1
    00000141: 	jbe	.Ltmp372 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp373:
    00000148: 	movq	%rax, %rdx
    0000014b: 	movsd	(%rax), %xmm0
    0000014f: 	leaq	0x8(%rax), %rax
    00000153: 	comisd	%xmm0, %xmm1
    00000157: 	ja	.Ltmp373 # Offset: 343
    00000159: 	cmpq	%rdx, %rcx
    0000015c: 	jbe	.Ltmp371 # Offset: 348
.Ltmp372:
    0000015e: 	movsd	%xmm0, (%rcx)
    00000162: 	movsd	%xmm2, (%rdx)
.Ltmp370:
    00000166: 	movq	%rcx, %r13
    00000169: 	jmp	.Ltmp374 # Offset: 361
.Ltmp371:
    0000016b: 	movq	%r13, %rax
    0000016e: 	subq	%rbp, %rax
    00000171: 	cmpq	$0x8, %rax
    00000175: 	jg	.Ltmp375 # Offset: 373
.Ltmp426:
    0000017b: 	movq	%r12, %rax
    0000017e: 	subq	%r13, %rax
    00000181: 	cmpq	$0x8, %rax
    00000185: 	jg	.Ltmp376 # Offset: 389
.Ltmp369:
    00000187: 	popq	%rbx
    00000188: 	popq	%rbp
    00000189: 	popq	%r12
    0000018b: 	popq	%r13
    0000018d: 	popq	%r14
    0000018f: 	retq # Offset: 399
.Ltmp355:
    00000190: 	retq # Offset: 400
.Ltmp376:
    00000191: 	movsd	(%r13), %xmm1
    00000197: 	movq	%r12, %rbp
    0000019a: 	movq	%r13, %rdx
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp381:
    000001a0: 	movsd	-0x8(%rbp), %xmm2
    000001a5: 	leaq	-0x8(%rbp), %rcx
    000001a9: 	comisd	%xmm1, %xmm2
    000001ad: 	ja	.Ltmp377 # Offset: 429
    000001af: 	cmpq	%rdx, %rcx
    000001b2: 	jbe	.Ltmp378 # Offset: 434
    000001b8: 	movsd	(%rdx), %xmm0
    000001bc: 	leaq	0x8(%rdx), %rax
    000001c0: 	comisd	%xmm0, %xmm1
    000001c4: 	jbe	.Ltmp379 # Offset: 452
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp380:
    000001d0: 	movq	%rax, %rdx
    000001d3: 	movsd	(%rax), %xmm0
    000001d7: 	leaq	0x8(%rax), %rax
    000001db: 	comisd	%xmm0, %xmm1
    000001df: 	ja	.Ltmp380 # Offset: 479
    000001e1: 	cmpq	%rdx, %rcx
    000001e4: 	jbe	.Ltmp378 # Offset: 484
.Ltmp379:
    000001ea: 	movsd	%xmm0, (%rcx)
    000001ee: 	movsd	%xmm2, (%rdx)
.Ltmp377:
    000001f2: 	movq	%rcx, %rbp
    000001f5: 	jmp	.Ltmp381 # Offset: 501
.Ltmp375:
    000001f7: 	movsd	(%rbp), %xmm1
    000001fc: 	movq	%r13, %rbx
    000001ff: 	movq	%rbp, %rdx
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp386:
    00000208: 	comisd	%xmm1, %xmm2
    0000020c: 	leaq	-0x8(%rbx), %rcx
    00000210: 	ja	.Ltmp382 # Offset: 528
    00000212: 	cmpq	%rdx, %rcx
    00000215: 	jbe	.Ltmp383 # Offset: 533
    0000021b: 	movsd	(%rdx), %xmm0
    0000021f: 	leaq	0x8(%rdx), %rax
    00000223: 	comisd	%xmm0, %xmm1
    00000227: 	jbe	.Ltmp384 # Offset: 551
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp385:
    00000230: 	movq	%rax, %rdx
    00000233: 	movsd	(%rax), %xmm0
    00000237: 	leaq	0x8(%rax), %rax
    0000023b: 	comisd	%xmm0, %xmm1
    0000023f: 	ja	.Ltmp385 # Offset: 575
    00000241: 	cmpq	%rdx, %rcx
    00000244: 	jbe	.Ltmp383 # Offset: 580
.Ltmp384:
    0000024a: 	movsd	%xmm0, (%rcx)
    0000024e: 	movsd	%xmm2, (%rdx)
.Ltmp382:
    00000252: 	movsd	-0x8(%rcx), %xmm2
    00000257: 	movq	%rcx, %rbx
    0000025a: 	jmp	.Ltmp386 # Offset: 602
.Ltmp368:
    0000025c: 	movsd	(%r13), %xmm1
    00000262: 	movq	%rbp, %rbx
    00000265: 	movq	%r13, %rdx
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp391:
    00000270: 	movsd	-0x8(%rbx), %xmm2
    00000275: 	leaq	-0x8(%rbx), %rcx
    00000279: 	comisd	%xmm1, %xmm2
    0000027d: 	ja	.Ltmp387 # Offset: 637
    0000027f: 	cmpq	%rdx, %rcx
    00000282: 	jbe	.Ltmp388 # Offset: 642
    00000288: 	movsd	(%rdx), %xmm0
    0000028c: 	leaq	0x8(%rdx), %rax
    00000290: 	comisd	%xmm0, %xmm1
    00000294: 	jbe	.Ltmp389 # Offset: 660
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp390:
    000002a0: 	movq	%rax, %rdx
    000002a3: 	movsd	(%rax), %xmm0
    000002a7: 	leaq	0x8(%rax), %rax
    000002ab: 	comisd	%xmm0, %xmm1
    000002af: 	ja	.Ltmp390 # Offset: 687
    000002b1: 	cmpq	%rdx, %rcx
    000002b4: 	jbe	.Ltmp388 # Offset: 692
.Ltmp389:
    000002ba: 	movsd	%xmm0, (%rcx)
    000002be: 	movsd	%xmm2, (%rdx)
.Ltmp387:
    000002c2: 	movq	%rcx, %rbx
    000002c5: 	jmp	.Ltmp391 # Offset: 709
.Ltmp367:
    000002c7: 	movsd	(%rdi), %xmm1
    000002cb: 	movq	%r13, %rbx
    000002ce: 	movq	%rdi, %rdx
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp396:
    000002d8: 	comisd	%xmm1, %xmm2
    000002dc: 	leaq	-0x8(%rbx), %rcx
    000002e0: 	ja	.Ltmp392 # Offset: 736
    000002e2: 	cmpq	%rdx, %rcx
    000002e5: 	jbe	.Ltmp393 # Offset: 741
    000002e7: 	movsd	(%rdx), %xmm0
    000002eb: 	leaq	0x8(%rdx), %rax
    000002ef: 	comisd	%xmm0, %xmm1
    000002f3: 	jbe	.Ltmp394 # Offset: 755
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp395:
    000002f8: 	movq	%rax, %rdx
    000002fb: 	movsd	(%rax), %xmm0
    000002ff: 	leaq	0x8(%rax), %rax
    00000303: 	comisd	%xmm0, %xmm1
    00000307: 	ja	.Ltmp395 # Offset: 775
    00000309: 	cmpq	%rdx, %rcx
    0000030c: 	jbe	.Ltmp393 # Offset: 780
.Ltmp394:
    0000030e: 	movsd	%xmm0, (%rcx)
    00000312: 	movsd	%xmm2, (%rdx)
.Ltmp392:
    00000316: 	movsd	-0x8(%rcx), %xmm2
    0000031b: 	movq	%rcx, %rbx
    0000031e: 	jmp	.Ltmp396 # Offset: 798
.Ltmp393:
    00000320: 	movq	%rbx, %rax
    00000323: 	subq	%rdi, %rax
    00000326: 	cmpq	$0x8, %rax
    0000032a: 	jle	.Ltmp397 # Offset: 810
    0000032c: 	movsd	(%rdi), %xmm1
    00000330: 	movq	%rbx, %r14
    00000333: 	movq	%rdi, %rdx
    00000336: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp402:
    00000340: 	movsd	-0x8(%r14), %xmm2
    00000346: 	leaq	-0x8(%r14), %rcx
    0000034a: 	comisd	%xmm1, %xmm2
    0000034e: 	ja	.Ltmp398 # Offset: 846
    00000350: 	cmpq	%rdx, %rcx
    00000353: 	jbe	.Ltmp399 # Offset: 851
    00000355: 	movsd	(%rdx), %xmm0
    00000359: 	leaq	0x8(%rdx), %rax
    0000035d: 	comisd	%xmm0, %xmm1
    00000361: 	jbe	.Ltmp400 # Offset: 865
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp401:
    00000368: 	movq	%rax, %rdx
    0000036b: 	movsd	(%rax), %xmm0
    0000036f: 	leaq	0x8(%rax), %rax
    00000373: 	comisd	%xmm0, %xmm1
    00000377: 	ja	.Ltmp401 # Offset: 887
    00000379: 	cmpq	%rdx, %rcx
    0000037c: 	jbe	.Ltmp399 # Offset: 892
.Ltmp400:
    0000037e: 	movsd	%xmm0, (%rcx)
    00000382: 	movsd	%xmm2, (%rdx)
.Ltmp398:
    00000386: 	movq	%rcx, %r14
    00000389: 	jmp	.Ltmp402 # Offset: 905
.Ltmp399:
    0000038b: 	movq	%r14, %rsi
    0000038e: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 910
    00000393: 	movq	%rbx, %rsi
    00000396: 	movq	%r14, %rdi
    00000399: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 921
.Ltmp397:
    0000039e: 	movq	%r13, %rax
    000003a1: 	movq	%rbx, %rdi
    000003a4: 	subq	%rbx, %rax
    000003a7: 	cmpq	$0x8, %rax
    000003ab: 	jle	.Ltmp403 # Offset: 939
    000003b1: 	movsd	(%rbx), %xmm1
    000003b5: 	movq	%r13, %r14
    000003b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp408:
    000003c0: 	movsd	-0x8(%r14), %xmm2
    000003c6: 	leaq	-0x8(%r14), %rdx
    000003ca: 	comisd	%xmm1, %xmm2
    000003ce: 	ja	.Ltmp404 # Offset: 974
    000003d0: 	cmpq	%rbx, %rdx
    000003d3: 	jbe	.Ltmp405 # Offset: 979
    000003d9: 	movsd	(%rbx), %xmm0
    000003dd: 	leaq	0x8(%rbx), %rax
    000003e1: 	comisd	%xmm0, %xmm1
    000003e5: 	jbe	.Ltmp406 # Offset: 997
    000003e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp407:
    000003f0: 	movq	%rax, %rbx
    000003f3: 	movsd	(%rax), %xmm0
    000003f7: 	leaq	0x8(%rax), %rax
    000003fb: 	comisd	%xmm0, %xmm1
    000003ff: 	ja	.Ltmp407 # Offset: 1023
    00000401: 	cmpq	%rbx, %rdx
    00000404: 	jbe	.Ltmp405 # Offset: 1028
.Ltmp406:
    0000040a: 	movsd	%xmm0, (%rdx)
    0000040e: 	movsd	%xmm2, (%rbx)
.Ltmp404:
    00000412: 	movq	%rdx, %r14
    00000415: 	jmp	.Ltmp408 # Offset: 1045
.Ltmp388:
    00000417: 	movq	%rbx, %rax
    0000041a: 	subq	%r13, %rax
    0000041d: 	cmpq	$0x8, %rax
    00000421: 	jle	.Ltmp409 # Offset: 1057
    00000423: 	movsd	(%r13), %xmm1
    00000429: 	movq	%rbx, %r14
    0000042c: 	movq	%r13, %rdx
    0000042f: 	nop # Size: 1
.Ltmp414:
    00000430: 	movsd	-0x8(%r14), %xmm2
    00000436: 	leaq	-0x8(%r14), %rcx
    0000043a: 	comisd	%xmm1, %xmm2
    0000043e: 	ja	.Ltmp410 # Offset: 1086
    00000440: 	cmpq	%rdx, %rcx
    00000443: 	jbe	.Ltmp411 # Offset: 1091
    00000445: 	movsd	(%rdx), %xmm0
    00000449: 	leaq	0x8(%rdx), %rax
    0000044d: 	comisd	%xmm0, %xmm1
    00000451: 	jbe	.Ltmp412 # Offset: 1105
    00000453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp413:
    00000458: 	movq	%rax, %rdx
    0000045b: 	movsd	(%rax), %xmm0
    0000045f: 	leaq	0x8(%rax), %rax
    00000463: 	comisd	%xmm0, %xmm1
    00000467: 	ja	.Ltmp413 # Offset: 1127
    00000469: 	cmpq	%rdx, %rcx
    0000046c: 	jbe	.Ltmp411 # Offset: 1132
.Ltmp412:
    0000046e: 	movsd	%xmm0, (%rcx)
    00000472: 	movsd	%xmm2, (%rdx)
.Ltmp410:
    00000476: 	movq	%rcx, %r14
    00000479: 	jmp	.Ltmp414 # Offset: 1145
.Ltmp411:
    0000047b: 	movq	%r14, %rsi
    0000047e: 	movq	%r13, %rdi
    00000481: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1153
    00000486: 	movq	%rbx, %rsi
    00000489: 	movq	%r14, %rdi
    0000048c: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1164
.Ltmp409:
    00000491: 	movq	%rbp, %rax
    00000494: 	movq	%rbx, %rdi
    00000497: 	subq	%rbx, %rax
    0000049a: 	cmpq	$0x8, %rax
    0000049e: 	jle	.Ltmp361 # Offset: 1182
    000004a4: 	movsd	(%rbx), %xmm1
    000004a8: 	movq	%rbp, %r13
    000004ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp419:
    000004b0: 	movsd	-0x8(%r13), %xmm2
    000004b6: 	leaq	-0x8(%r13), %rdx
    000004ba: 	comisd	%xmm1, %xmm2
    000004be: 	ja	.Ltmp415 # Offset: 1214
    000004c0: 	cmpq	%rbx, %rdx
    000004c3: 	jbe	.Ltmp416 # Offset: 1219
    000004c9: 	movsd	(%rbx), %xmm0
    000004cd: 	leaq	0x8(%rbx), %rax
    000004d1: 	comisd	%xmm0, %xmm1
    000004d5: 	jbe	.Ltmp417 # Offset: 1237
    000004d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp418:
    000004e0: 	movq	%rax, %rbx
    000004e3: 	movsd	(%rax), %xmm0
    000004e7: 	leaq	0x8(%rax), %rax
    000004eb: 	comisd	%xmm0, %xmm1
    000004ef: 	ja	.Ltmp418 # Offset: 1263
    000004f1: 	cmpq	%rbx, %rdx
    000004f4: 	jbe	.Ltmp416 # Offset: 1268
.Ltmp417:
    000004fa: 	movsd	%xmm0, (%rdx)
    000004fe: 	movsd	%xmm2, (%rbx)
.Ltmp415:
    00000502: 	movq	%rdx, %r13
    00000505: 	jmp	.Ltmp419 # Offset: 1285
.Ltmp383:
    00000507: 	movq	%rbx, %rax
    0000050a: 	subq	%rbp, %rax
    0000050d: 	cmpq	$0x8, %rax
    00000511: 	jle	.Ltmp420 # Offset: 1297
    00000513: 	movsd	(%rbp), %xmm1
    00000518: 	movq	%rbx, %r14
    0000051b: 	movq	%rbp, %rdx
    0000051e: 	nop # Size: 2
.Ltmp425:
    00000520: 	movsd	-0x8(%r14), %xmm2
    00000526: 	leaq	-0x8(%r14), %rcx
    0000052a: 	comisd	%xmm1, %xmm2
    0000052e: 	ja	.Ltmp421 # Offset: 1326
    00000530: 	cmpq	%rdx, %rcx
    00000533: 	jbe	.Ltmp422 # Offset: 1331
    00000535: 	movsd	(%rdx), %xmm0
    00000539: 	leaq	0x8(%rdx), %rax
    0000053d: 	comisd	%xmm0, %xmm1
    00000541: 	jbe	.Ltmp423 # Offset: 1345
    00000543: 	nopl	(%rax,%rax) # Size: 5
.Ltmp424:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movsd	(%rax), %xmm0
    0000054f: 	leaq	0x8(%rax), %rax
    00000553: 	comisd	%xmm0, %xmm1
    00000557: 	ja	.Ltmp424 # Offset: 1367
    00000559: 	cmpq	%rdx, %rcx
    0000055c: 	jbe	.Ltmp422 # Offset: 1372
.Ltmp423:
    0000055e: 	movsd	%xmm0, (%rcx)
    00000562: 	movsd	%xmm2, (%rdx)
.Ltmp421:
    00000566: 	movq	%rcx, %r14
    00000569: 	jmp	.Ltmp425 # Offset: 1385
.Ltmp422:
    0000056b: 	movq	%r14, %rsi
    0000056e: 	movq	%rbp, %rdi
    00000571: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1393
    00000576: 	movq	%rbx, %rsi
    00000579: 	movq	%r14, %rdi
    0000057c: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1404
.Ltmp420:
    00000581: 	movq	%r13, %rax
    00000584: 	movq	%rbx, %rdi
    00000587: 	subq	%rbx, %rax
    0000058a: 	cmpq	$0x8, %rax
    0000058e: 	jle	.Ltmp426 # Offset: 1422
    00000594: 	movsd	(%rbx), %xmm1
    00000598: 	movq	%r13, %rbp
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp431:
    000005a0: 	movsd	-0x8(%rbp), %xmm2
    000005a5: 	leaq	-0x8(%rbp), %rdx
    000005a9: 	comisd	%xmm1, %xmm2
    000005ad: 	ja	.Ltmp427 # Offset: 1453
    000005af: 	cmpq	%rbx, %rdx
    000005b2: 	jbe	.Ltmp428 # Offset: 1458
    000005b8: 	movsd	(%rbx), %xmm0
    000005bc: 	leaq	0x8(%rbx), %rax
    000005c0: 	comisd	%xmm0, %xmm1
    000005c4: 	jbe	.Ltmp429 # Offset: 1476
    000005c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp430:
    000005d0: 	movq	%rax, %rbx
    000005d3: 	movsd	(%rax), %xmm0
    000005d7: 	leaq	0x8(%rax), %rax
    000005db: 	comisd	%xmm0, %xmm1
    000005df: 	ja	.Ltmp430 # Offset: 1503
    000005e1: 	cmpq	%rbx, %rdx
    000005e4: 	jbe	.Ltmp428 # Offset: 1508
.Ltmp429:
    000005ea: 	movsd	%xmm0, (%rdx)
    000005ee: 	movsd	%xmm2, (%rbx)
.Ltmp427:
    000005f2: 	movq	%rdx, %rbp
    000005f5: 	jmp	.Ltmp431 # Offset: 1525
.Ltmp378:
    000005f7: 	movq	%rbp, %rax
    000005fa: 	subq	%r13, %rax
    000005fd: 	cmpq	$0x8, %rax
    00000601: 	jle	.Ltmp432 # Offset: 1537
    00000603: 	movsd	(%r13), %xmm1
    00000609: 	movq	%rbp, %r14
    0000060c: 	movq	%r13, %rdx
    0000060f: 	nop # Size: 1
.Ltmp437:
    00000610: 	movsd	-0x8(%r14), %xmm2
    00000616: 	leaq	-0x8(%r14), %rcx
    0000061a: 	comisd	%xmm1, %xmm2
    0000061e: 	ja	.Ltmp433 # Offset: 1566
    00000620: 	cmpq	%rdx, %rcx
    00000623: 	jbe	.Ltmp434 # Offset: 1571
    00000625: 	movsd	(%rdx), %xmm0
    00000629: 	leaq	0x8(%rdx), %rax
    0000062d: 	comisd	%xmm0, %xmm1
    00000631: 	jbe	.Ltmp435 # Offset: 1585
    00000633: 	nopl	(%rax,%rax) # Size: 5
.Ltmp436:
    00000638: 	movq	%rax, %rdx
    0000063b: 	movsd	(%rax), %xmm0
    0000063f: 	leaq	0x8(%rax), %rax
    00000643: 	comisd	%xmm0, %xmm1
    00000647: 	ja	.Ltmp436 # Offset: 1607
    00000649: 	cmpq	%rdx, %rcx
    0000064c: 	jbe	.Ltmp434 # Offset: 1612
.Ltmp435:
    0000064e: 	movsd	%xmm0, (%rcx)
    00000652: 	movsd	%xmm2, (%rdx)
.Ltmp433:
    00000656: 	movq	%rcx, %r14
    00000659: 	jmp	.Ltmp437 # Offset: 1625
.Ltmp434:
    0000065b: 	movq	%r14, %rsi
    0000065e: 	movq	%r13, %rdi
    00000661: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1633
    00000666: 	movq	%rbp, %rsi
    00000669: 	movq	%r14, %rdi
    0000066c: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1644
.Ltmp432:
    00000671: 	movq	%r12, %rax
    00000674: 	movq	%rbp, %rdi
    00000677: 	subq	%rbp, %rax
    0000067a: 	cmpq	$0x8, %rax
    0000067e: 	jle	.Ltmp369 # Offset: 1662
    00000684: 	movsd	(%rbp), %xmm1
    00000689: 	movq	%r12, %r13
    0000068c: 	nopl	(%rax) # Size: 4
.Ltmp442:
    00000690: 	movsd	-0x8(%r13), %xmm2
    00000696: 	leaq	-0x8(%r13), %rdx
    0000069a: 	comisd	%xmm1, %xmm2
    0000069e: 	ja	.Ltmp438 # Offset: 1694
    000006a0: 	cmpq	%rbp, %rdx
    000006a3: 	jbe	.Ltmp439 # Offset: 1699
    000006a5: 	movsd	(%rbp), %xmm0
    000006aa: 	leaq	0x8(%rbp), %rax
    000006ae: 	comisd	%xmm0, %xmm1
    000006b2: 	jbe	.Ltmp440 # Offset: 1714
    000006b4: 	nopl	(%rax) # Size: 4
.Ltmp441:
    000006b8: 	movq	%rax, %rbp
    000006bb: 	movsd	(%rax), %xmm0
    000006bf: 	leaq	0x8(%rax), %rax
    000006c3: 	comisd	%xmm0, %xmm1
    000006c7: 	ja	.Ltmp441 # Offset: 1735
    000006c9: 	cmpq	%rbp, %rdx
    000006cc: 	jbe	.Ltmp439 # Offset: 1740
.Ltmp440:
    000006ce: 	movsd	%xmm0, (%rdx)
    000006d2: 	movsd	%xmm2, (%rbp)
.Ltmp438:
    000006d7: 	movq	%rdx, %r13
    000006da: 	jmp	.Ltmp442 # Offset: 1754
.Ltmp439:
    000006dc: 	movq	%r13, %rsi
    000006df: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1759
    000006e4: 	popq	%rbx
    000006e5: 	movq	%r12, %rsi
    000006e8: 	popq	%rbp
    000006e9: 	movq	%r13, %rdi
    000006ec: 	popq	%r12
    000006ee: 	popq	%r13
    000006f0: 	popq	%r14
    000006f2: 	jmp	.LBB055 # Offset: 1778
.Ltmp428:
    000006f7: 	movq	%rbp, %rsi
    000006fa: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1786
    000006ff: 	movq	%r13, %rsi
    00000702: 	movq	%rbp, %rdi
    00000705: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1797
    0000070a: 	jmp	.Ltmp426 # Offset: 1802
.Ltmp416:
    0000070f: 	movq	%r13, %rsi
    00000712: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1810
    00000717: 	movq	%rbp, %rsi
    0000071a: 	movq	%r13, %rdi
    0000071d: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1821
    00000722: 	jmp	.Ltmp361 # Offset: 1826
.Ltmp405:
    00000727: 	movq	%r14, %rsi
    0000072a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1834
    0000072f: 	movq	%r13, %rsi
    00000732: 	movq	%r14, %rdi
    00000735: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 1845
    0000073a: 	jmp	.Ltmp403 # Offset: 1850
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_"

Binary Function "_ZNSt6vectorIiSaIiEE17_M_default_appendEm" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x4f50
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x4f50
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIiSaIiEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp443 # Offset: 7
    0000000d: 	movabsq	$0x1fffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x2, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x2, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp444 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp445 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp446 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp447 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp454:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movl	$0x0, (%rbp)
    00000094: 	subq	$0x1, %rdx
    00000098: 	je	.Ltmp448 # Offset: 152
    0000009a: 	leaq	0x4(%rbp), %rdi
    0000009e: 	shlq	$0x2, %rdx
    000000a2: 	xorl	%esi, %esi
    000000a4: 	movq	%r9, 0x8(%rsp)
    000000a9: 	movq	%r8, (%rsp)
    000000ad: 	callq	memset@PLT # Offset: 173
    000000b2: 	movq	(%rsp), %r8
    000000b6: 	movq	0x8(%rsp), %r9
.Ltmp448:
    000000bb: 	testq	%r9, %r9
    000000be: 	jg	.Ltmp449 # Offset: 190
    000000c4: 	testq	%r8, %r8
    000000c7: 	jne	.Ltmp450 # Offset: 199
.Ltmp452:
    000000cd: 	addq	%r13, %rbx
    000000d0: 	movq	%r15, %xmm0
    000000d5: 	movq	%r14, 0x10(%r12)
    000000da: 	leaq	(%r15,%rbx,4), %rax
    000000de: 	movq	%rax, %xmm1
    000000e3: 	punpcklqdq	%xmm1, %xmm0
    000000e7: 	movups	%xmm0, (%r12)
    000000ec: 	addq	$0x18, %rsp
    000000f0: 	popq	%rbx
    000000f1: 	popq	%rbp
    000000f2: 	popq	%r12
    000000f4: 	popq	%r13
    000000f6: 	popq	%r14
    000000f8: 	popq	%r15
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp444:
    00000100: 	movl	$0x0, (%rdx)
    00000106: 	leaq	0x4(%rdx), %rcx
    0000010a: 	subq	$0x1, %rbx
    0000010e: 	je	.Ltmp451 # Offset: 270
    00000110: 	leaq	(%rcx,%rbx,4), %rax
    00000114: 	movq	%rcx, %rdi
    00000117: 	xorl	%esi, %esi
    00000119: 	subq	%rdx, %rax
    0000011c: 	leaq	-0x4(%rax), %rbx
    00000120: 	movq	%rbx, %rdx
    00000123: 	callq	memset@PLT # Offset: 291
    00000128: 	movq	%rax, %rcx
    0000012b: 	addq	%rbx, %rcx
.Ltmp451:
    0000012e: 	movq	%rcx, 0x8(%r12)
    00000133: 	addq	$0x18, %rsp
    00000137: 	popq	%rbx
    00000138: 	popq	%rbp
    00000139: 	popq	%r12
    0000013b: 	popq	%r13
    0000013d: 	popq	%r14
    0000013f: 	popq	%r15
    00000141: 	retq # Offset: 321
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp443:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp449:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp453:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp452 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp450:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp453 # Offset: 392
.Ltmp447:
    0000018a: 	movabsq	$0x1fffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,4), %r14
.Ltmp455:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp454 # Offset: 445
.Ltmp446:
    000001c2: 	movabsq	$0x7ffffffffffffffc, %r14
    000001cc: 	jmp	.Ltmp455 # Offset: 460
.Ltmp445:
    000001ce: 	leaq	DATAat0x151e4(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIiSaIiEE17_M_default_appendEm"

Binary Function "_ZN9benchmark9quicksortIPiEEvT_S2_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x5130
  Size        : 0x41e
  MaxSize     : 0x420
  Offset      : 0x5130
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPiEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x4, %rax
    00000020: 	jle	.Ltmp456 # Offset: 32
.Ltmp468:
    00000022: 	movl	(%rdi), %r8d
    00000025: 	movq	(%rsp), %r13
    00000029: 	movq	%rdi, %rdx
.Ltmp461:
    0000002c: 	movl	-0x4(%r13), %eax
    00000030: 	leaq	-0x4(%r13), %rcx
    00000034: 	cmpl	%r8d, %eax
    00000037: 	jg	.Ltmp457 # Offset: 55
    00000039: 	cmpq	%rcx, %rdx
    0000003c: 	jae	.Ltmp458 # Offset: 60
    0000003e: 	movl	(%rdx), %esi
    00000040: 	cmpl	%esi, %r8d
    00000043: 	jle	.Ltmp459 # Offset: 67
.Ltmp460:
    00000045: 	movl	0x4(%rdx), %esi
    00000048: 	addq	$0x4, %rdx
    0000004c: 	cmpl	%r8d, %esi
    0000004f: 	jl	.Ltmp460 # Offset: 79
    00000051: 	cmpq	%rdx, %rcx
    00000054: 	jbe	.Ltmp458 # Offset: 84
.Ltmp459:
    00000056: 	movl	%esi, (%rcx)
    00000058: 	movl	%eax, (%rdx)
.Ltmp457:
    0000005a: 	movq	%rcx, %r13
    0000005d: 	jmp	.Ltmp461 # Offset: 93
.Ltmp456:
    0000005f: 	addq	$0x28, %rsp
    00000063: 	popq	%rbx
    00000064: 	popq	%rbp
    00000065: 	popq	%r12
    00000067: 	popq	%r13
    00000069: 	popq	%r14
    0000006b: 	popq	%r15
    0000006d: 	retq # Offset: 109
.Ltmp458:
    0000006e: 	movq	%r13, %rdx
    00000071: 	movq	%r13, %r8
    00000074: 	subq	%rdi, %rdx
    00000077: 	cmpq	$0x4, %rdx
    0000007b: 	jle	.Ltmp462 # Offset: 123
.Ltmp520:
    0000007d: 	movl	(%rdi), %r9d
    00000080: 	movq	%r8, %r14
    00000083: 	movq	%rdi, %rdx
.Ltmp467:
    00000086: 	leaq	-0x4(%r14), %rcx
    0000008a: 	cmpl	%eax, %r9d
    0000008d: 	jl	.Ltmp463 # Offset: 141
    0000008f: 	cmpq	%rdx, %rcx
    00000092: 	jbe	.Ltmp464 # Offset: 146
    00000094: 	movl	(%rdx), %esi
    00000096: 	cmpl	%esi, %r9d
    00000099: 	jle	.Ltmp465 # Offset: 153
.Ltmp466:
    0000009b: 	movl	0x4(%rdx), %esi
    0000009e: 	addq	$0x4, %rdx
    000000a2: 	cmpl	%esi, %r9d
    000000a5: 	jg	.Ltmp466 # Offset: 165
    000000a7: 	cmpq	%rdx, %rcx
    000000aa: 	jbe	.Ltmp464 # Offset: 170
.Ltmp465:
    000000ac: 	movl	%esi, (%rcx)
    000000ae: 	movl	%eax, (%rdx)
.Ltmp463:
    000000b0: 	movl	-0x4(%rcx), %eax
    000000b3: 	movq	%rcx, %r14
    000000b6: 	jmp	.Ltmp467 # Offset: 182
.Ltmp519:
    000000b8: 	movq	%r8, %r13
.Ltmp462:
    000000bb: 	movq	(%rsp), %rax
    000000bf: 	subq	%r13, %rax
    000000c2: 	cmpq	$0x4, %rax
    000000c6: 	jle	.Ltmp456 # Offset: 198
    000000c8: 	movq	%r13, %rdi
    000000cb: 	jmp	.Ltmp468 # Offset: 203
.Ltmp464:
    000000d0: 	movq	%r14, %rdx
    000000d3: 	subq	%rdi, %rdx
    000000d6: 	cmpq	$0x4, %rdx
    000000da: 	jle	.Ltmp469 # Offset: 218
    000000e0: 	movq	%r8, 0x8(%rsp)
    000000e5: 	movq	%r14, %rbx
.Ltmp522:
    000000e8: 	movl	(%rdi), %r9d
    000000eb: 	movq	%rbx, %r15
    000000ee: 	movq	%rdi, %rdx
.Ltmp474:
    000000f1: 	leaq	-0x4(%r15), %rcx
    000000f5: 	cmpl	%r9d, %eax
    000000f8: 	jg	.Ltmp470 # Offset: 248
    000000fa: 	cmpq	%rdx, %rcx
    000000fd: 	jbe	.Ltmp471 # Offset: 253
    000000ff: 	movl	(%rdx), %esi
    00000101: 	cmpl	%esi, %r9d
    00000104: 	jle	.Ltmp472 # Offset: 260
.Ltmp473:
    00000106: 	movl	0x4(%rdx), %esi
    00000109: 	addq	$0x4, %rdx
    0000010d: 	cmpl	%esi, %r9d
    00000110: 	jg	.Ltmp473 # Offset: 272
    00000112: 	cmpq	%rdx, %rcx
    00000115: 	jbe	.Ltmp471 # Offset: 277
.Ltmp472:
    00000117: 	movl	%esi, (%rcx)
    00000119: 	movl	%eax, (%rdx)
.Ltmp470:
    0000011b: 	movl	-0x4(%rcx), %eax
    0000011e: 	movq	%rcx, %r15
    00000121: 	jmp	.Ltmp474 # Offset: 289
.Ltmp471:
    00000123: 	movq	%r15, %rdx
    00000126: 	subq	%rdi, %rdx
    00000129: 	cmpq	$0x4, %rdx
    0000012d: 	jle	.Ltmp475 # Offset: 301
    00000133: 	movq	%rbx, 0x10(%rsp)
    00000138: 	movq	%r15, %rbx
.Ltmp518:
    0000013b: 	movl	(%rdi), %r9d
    0000013e: 	movq	%rbx, %r14
    00000141: 	movq	%rdi, %rdx
.Ltmp480:
    00000144: 	leaq	-0x4(%r14), %rcx
    00000148: 	cmpl	%eax, %r9d
    0000014b: 	jl	.Ltmp476 # Offset: 331
    0000014d: 	cmpq	%rdx, %rcx
    00000150: 	jbe	.Ltmp477 # Offset: 336
    00000152: 	movl	(%rdx), %esi
    00000154: 	cmpl	%esi, %r9d
    00000157: 	jle	.Ltmp478 # Offset: 343
.Ltmp479:
    00000159: 	movl	0x4(%rdx), %esi
    0000015c: 	addq	$0x4, %rdx
    00000160: 	cmpl	%esi, %r9d
    00000163: 	jg	.Ltmp479 # Offset: 355
    00000165: 	cmpq	%rdx, %rcx
    00000168: 	jbe	.Ltmp477 # Offset: 360
.Ltmp478:
    0000016a: 	movl	%esi, (%rcx)
    0000016c: 	movl	%eax, (%rdx)
.Ltmp476:
    0000016e: 	movl	-0x4(%rcx), %eax
    00000171: 	movq	%rcx, %r14
    00000174: 	jmp	.Ltmp480 # Offset: 372
.Ltmp477:
    00000176: 	movq	%r14, %rdx
    00000179: 	subq	%rdi, %rdx
    0000017c: 	cmpq	$0x4, %rdx
    00000180: 	jle	.Ltmp481 # Offset: 384
    00000186: 	movq	%rbx, 0x18(%rsp)
    0000018b: 	movq	%r14, %rbx
.Ltmp516:
    0000018e: 	movl	(%rdi), %r9d
    00000191: 	movq	%rbx, %r14
    00000194: 	movq	%rdi, %rdx
.Ltmp486:
    00000197: 	leaq	-0x4(%r14), %rcx
    0000019b: 	cmpl	%eax, %r9d
    0000019e: 	jl	.Ltmp482 # Offset: 414
    000001a0: 	cmpq	%rdx, %rcx
    000001a3: 	jbe	.Ltmp483 # Offset: 419
    000001a5: 	movl	(%rdx), %esi
    000001a7: 	cmpl	%esi, %r9d
    000001aa: 	jle	.Ltmp484 # Offset: 426
.Ltmp485:
    000001ac: 	movl	0x4(%rdx), %esi
    000001af: 	addq	$0x4, %rdx
    000001b3: 	cmpl	%esi, %r9d
    000001b6: 	jg	.Ltmp485 # Offset: 438
    000001b8: 	cmpq	%rdx, %rcx
    000001bb: 	jbe	.Ltmp483 # Offset: 443
.Ltmp484:
    000001bd: 	movl	%esi, (%rcx)
    000001bf: 	movl	%eax, (%rdx)
.Ltmp482:
    000001c1: 	movl	-0x4(%rcx), %eax
    000001c4: 	movq	%rcx, %r14
    000001c7: 	jmp	.Ltmp486 # Offset: 455
.Ltmp483:
    000001c9: 	movq	%r14, %rdx
    000001cc: 	subq	%rdi, %rdx
    000001cf: 	cmpq	$0x4, %rdx
    000001d3: 	jle	.Ltmp487 # Offset: 467
.Ltmp514:
    000001d9: 	movl	(%rdi), %r8d
    000001dc: 	movq	%r14, %r15
    000001df: 	movq	%rdi, %rdx
.Ltmp492:
    000001e2: 	leaq	-0x4(%r15), %rcx
    000001e6: 	cmpl	%eax, %r8d
    000001e9: 	jl	.Ltmp488 # Offset: 489
    000001eb: 	cmpq	%rdx, %rcx
    000001ee: 	jbe	.Ltmp489 # Offset: 494
    000001f0: 	movl	(%rdx), %esi
    000001f2: 	cmpl	%esi, %r8d
    000001f5: 	jle	.Ltmp490 # Offset: 501
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp491:
    00000200: 	movl	0x4(%rdx), %esi
    00000203: 	addq	$0x4, %rdx
    00000207: 	cmpl	%esi, %r8d
    0000020a: 	jg	.Ltmp491 # Offset: 522
    0000020c: 	cmpq	%rdx, %rcx
    0000020f: 	jbe	.Ltmp489 # Offset: 527
.Ltmp490:
    00000211: 	movl	%esi, (%rcx)
    00000213: 	movl	%eax, (%rdx)
.Ltmp488:
    00000215: 	movl	-0x4(%rcx), %eax
    00000218: 	movq	%rcx, %r15
    0000021b: 	jmp	.Ltmp492 # Offset: 539
.Ltmp489:
    0000021d: 	movq	%r15, %rdx
    00000220: 	subq	%rdi, %rdx
    00000223: 	cmpq	$0x4, %rdx
    00000227: 	jle	.Ltmp493 # Offset: 551
.Ltmp513:
    0000022d: 	movl	(%rdi), %r8d
    00000230: 	movq	%r15, %r12
    00000233: 	movq	%rdi, %rdx
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp511:
    00000240: 	leaq	-0x4(%r12), %rsi
    00000245: 	cmpl	%eax, %r8d
    00000248: 	jl	.Ltmp494 # Offset: 584
    0000024e: 	cmpq	%rdx, %rsi
    00000251: 	jbe	.Ltmp495 # Offset: 593
    00000253: 	movl	(%rdx), %ecx
    00000255: 	cmpl	%ecx, %r8d
    00000258: 	jle	.Ltmp496 # Offset: 600
    0000025e: 	nop # Size: 2
.Ltmp497:
    00000260: 	movl	0x4(%rdx), %ecx
    00000263: 	addq	$0x4, %rdx
    00000267: 	cmpl	%ecx, %r8d
    0000026a: 	jg	.Ltmp497 # Offset: 618
    0000026c: 	cmpq	%rdx, %rsi
    0000026f: 	ja	.Ltmp496 # Offset: 623
.Ltmp495:
    00000275: 	movq	%r12, %rdx
    00000278: 	subq	%rdi, %rdx
    0000027b: 	cmpq	$0x4, %rdx
    0000027f: 	jle	.Ltmp498 # Offset: 639
.Ltmp510:
    00000285: 	movl	(%rdi), %esi
    00000287: 	movq	%r12, %rbp
    0000028a: 	movq	%rdi, %rdx
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp509:
    00000290: 	leaq	-0x4(%rbp), %rcx
    00000294: 	cmpl	%esi, %eax
    00000296: 	jg	.Ltmp499 # Offset: 662
    0000029c: 	cmpq	%rdx, %rcx
    0000029f: 	jbe	.Ltmp500 # Offset: 671
    000002a1: 	movl	(%rdx), %r8d
    000002a4: 	cmpl	%r8d, %esi
    000002a7: 	jle	.Ltmp501 # Offset: 679
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp502:
    000002b0: 	movl	0x4(%rdx), %r8d
    000002b4: 	addq	$0x4, %rdx
    000002b8: 	cmpl	%r8d, %esi
    000002bb: 	jg	.Ltmp502 # Offset: 699
    000002bd: 	cmpq	%rdx, %rcx
    000002c0: 	ja	.Ltmp501 # Offset: 704
.Ltmp500:
    000002c2: 	movq	%rbp, %rax
    000002c5: 	subq	%rdi, %rax
    000002c8: 	cmpq	$0x4, %rax
    000002cc: 	jle	.Ltmp503 # Offset: 716
.Ltmp508:
    000002ce: 	movl	(%rdi), %ecx
    000002d0: 	movq	%rbp, %r13
    000002d3: 	movq	%rdi, %rax
    000002d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp512:
    000002e0: 	movl	-0x4(%r13), %r8d
    000002e4: 	leaq	-0x4(%r13), %rsi
    000002e8: 	cmpl	%r8d, %ecx
    000002eb: 	jl	.Ltmp504 # Offset: 747
    000002f1: 	cmpq	%rax, %rsi
    000002f4: 	jbe	.Ltmp505 # Offset: 756
    000002f6: 	movl	(%rax), %edx
    000002f8: 	cmpl	%edx, %ecx
    000002fa: 	jle	.Ltmp506 # Offset: 762
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp507:
    00000300: 	movl	0x4(%rax), %edx
    00000303: 	addq	$0x4, %rax
    00000307: 	cmpl	%edx, %ecx
    00000309: 	jg	.Ltmp507 # Offset: 777
    0000030b: 	cmpq	%rax, %rsi
    0000030e: 	ja	.Ltmp506 # Offset: 782
.Ltmp505:
    00000310: 	movq	%r13, %rsi
    00000313: 	callq	_ZN9benchmark9quicksortIPiEEvT_S2_ # Offset: 787
    00000318: 	movq	%rbp, %rax
    0000031b: 	subq	%r13, %rax
    0000031e: 	cmpq	$0x4, %rax
    00000322: 	jle	.Ltmp503 # Offset: 802
    00000324: 	movq	%r13, %rdi
    00000327: 	jmp	.Ltmp508 # Offset: 807
.Ltmp501:
    00000329: 	movl	%r8d, (%rcx)
    0000032c: 	movl	%eax, (%rdx)
.Ltmp499:
    0000032e: 	movl	-0x4(%rcx), %eax
    00000331: 	movq	%rcx, %rbp
    00000334: 	jmp	.Ltmp509 # Offset: 820
.Ltmp503:
    00000339: 	movq	%r12, %rax
    0000033c: 	subq	%rbp, %rax
    0000033f: 	cmpq	$0x4, %rax
    00000343: 	jle	.Ltmp498 # Offset: 835
    00000345: 	movl	-0x4(%r12), %eax
    0000034a: 	movq	%rbp, %rdi
    0000034d: 	jmp	.Ltmp510 # Offset: 845
.Ltmp496:
    00000352: 	movl	%ecx, (%rsi)
    00000354: 	movl	%eax, (%rdx)
.Ltmp494:
    00000356: 	movl	-0x4(%rsi), %eax
    00000359: 	movq	%rsi, %r12
    0000035c: 	jmp	.Ltmp511 # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp506:
    00000368: 	movl	%edx, (%rsi)
    0000036a: 	movl	%r8d, (%rax)
.Ltmp504:
    0000036d: 	movq	%rsi, %r13
    00000370: 	jmp	.Ltmp512 # Offset: 880
.Ltmp498:
    00000375: 	movq	%r15, %rax
    00000378: 	subq	%r12, %rax
    0000037b: 	cmpq	$0x4, %rax
    0000037f: 	jle	.Ltmp493 # Offset: 895
    00000381: 	movl	-0x4(%r15), %eax
    00000385: 	movq	%r12, %rdi
    00000388: 	jmp	.Ltmp513 # Offset: 904
.Ltmp493:
    0000038d: 	movq	%r14, %rax
    00000390: 	subq	%r15, %rax
    00000393: 	cmpq	$0x4, %rax
    00000397: 	jle	.Ltmp487 # Offset: 919
    00000399: 	movl	-0x4(%r14), %eax
    0000039d: 	movq	%r15, %rdi
    000003a0: 	jmp	.Ltmp514 # Offset: 928
.Ltmp487:
    000003a5: 	movq	%rbx, %rax
    000003a8: 	subq	%r14, %rax
    000003ab: 	cmpq	$0x4, %rax
    000003af: 	jle	.Ltmp515 # Offset: 943
    000003b1: 	movl	-0x4(%rbx), %eax
    000003b4: 	movq	%r14, %rdi
    000003b7: 	jmp	.Ltmp516 # Offset: 951
.Ltmp515:
    000003bc: 	movq	%rbx, %r14
    000003bf: 	movq	0x18(%rsp), %rbx
.Ltmp481:
    000003c4: 	movq	%rbx, %rax
    000003c7: 	subq	%r14, %rax
    000003ca: 	cmpq	$0x4, %rax
    000003ce: 	jle	.Ltmp517 # Offset: 974
    000003d0: 	movl	-0x4(%rbx), %eax
    000003d3: 	movq	%r14, %rdi
    000003d6: 	jmp	.Ltmp518 # Offset: 982
.Ltmp521:
    000003db: 	movq	0x8(%rsp), %r8
    000003e0: 	movq	%rbx, %r14
.Ltmp469:
    000003e3: 	movq	%r8, %rax
    000003e6: 	subq	%r14, %rax
    000003e9: 	cmpq	$0x4, %rax
    000003ed: 	jle	.Ltmp519 # Offset: 1005
    000003f3: 	movl	-0x4(%r8), %eax
    000003f7: 	movq	%r14, %rdi
    000003fa: 	jmp	.Ltmp520 # Offset: 1018
.Ltmp517:
    000003ff: 	movq	%rbx, %r15
    00000402: 	movq	0x10(%rsp), %rbx
.Ltmp475:
    00000407: 	movq	%rbx, %rax
    0000040a: 	subq	%r15, %rax
    0000040d: 	cmpq	$0x4, %rax
    00000411: 	jle	.Ltmp521 # Offset: 1041
    00000413: 	movl	-0x4(%rbx), %eax
    00000416: 	movq	%r15, %rdi
    00000419: 	jmp	.Ltmp522 # Offset: 1049
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPiEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x5550
  Size        : 0x643
  MaxSize     : 0x650
  Offset      : 0x5550
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x4, %rax
    0000000e: 	jle	.Ltmp523 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movl	(%rdi), %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp528:
    00000030: 	movl	-0x4(%rbp), %edi
    00000033: 	leaq	-0x4(%rbp), %r8
    00000037: 	cmpl	%esi, %edi
    00000039: 	jg	.Ltmp524 # Offset: 57
    0000003b: 	cmpq	%rdx, %r8
    0000003e: 	jbe	.Ltmp525 # Offset: 62
    00000040: 	movl	(%rdx), %ecx
    00000042: 	cmpl	%ecx, %esi
    00000044: 	jle	.Ltmp526 # Offset: 68
    00000046: 	leaq	0x4(%rdx), %rax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp527:
    00000050: 	movq	%rax, %rdx
    00000053: 	movl	(%rax), %ecx
    00000055: 	leaq	0x4(%rax), %rax
    00000059: 	cmpl	%esi, %ecx
    0000005b: 	jl	.Ltmp527 # Offset: 91
    0000005d: 	cmpq	%rdx, %r8
    00000060: 	jbe	.Ltmp525 # Offset: 96
.Ltmp526:
    00000062: 	movl	%ecx, (%r8)
    00000065: 	movl	%edi, (%rdx)
.Ltmp524:
    00000067: 	movq	%r8, %rbp
    0000006a: 	jmp	.Ltmp528 # Offset: 106
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp525:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x4, %rax
    0000007a: 	jle	.Ltmp529 # Offset: 122
    0000007c: 	movl	(%r9), %esi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp534:
    00000088: 	leaq	-0x4(%r13), %r8
    0000008c: 	cmpl	%edi, %esi
    0000008e: 	jl	.Ltmp530 # Offset: 142
    00000090: 	cmpq	%rdx, %r8
    00000093: 	jbe	.Ltmp531 # Offset: 147
    00000095: 	movl	(%rdx), %ecx
    00000097: 	cmpl	%ecx, %esi
    00000099: 	jle	.Ltmp532 # Offset: 153
    0000009b: 	leaq	0x4(%rdx), %rax
    0000009f: 	nop # Size: 1
.Ltmp533:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movl	(%rax), %ecx
    000000a5: 	leaq	0x4(%rax), %rax
    000000a9: 	cmpl	%ecx, %esi
    000000ab: 	jg	.Ltmp533 # Offset: 171
    000000ad: 	cmpq	%rdx, %r8
    000000b0: 	jbe	.Ltmp531 # Offset: 176
.Ltmp532:
    000000b2: 	movl	%ecx, (%r8)
    000000b5: 	movl	%edi, (%rdx)
.Ltmp530:
    000000b7: 	movl	-0x4(%r8), %edi
    000000bb: 	movq	%r8, %r13
    000000be: 	jmp	.Ltmp534 # Offset: 190
.Ltmp531:
    000000c0: 	movq	%r13, %rax
    000000c3: 	subq	%r9, %rax
    000000c6: 	cmpq	$0x4, %rax
    000000ca: 	jg	.Ltmp535 # Offset: 202
.Ltmp571:
    000000d0: 	movq	%rbp, %rax
    000000d3: 	subq	%r13, %rax
    000000d6: 	cmpq	$0x4, %rax
    000000da: 	jg	.Ltmp536 # Offset: 218
.Ltmp529:
    000000e0: 	movq	%r12, %rax
    000000e3: 	subq	%rbp, %rax
    000000e6: 	cmpq	$0x4, %rax
    000000ea: 	jle	.Ltmp537 # Offset: 234
    000000ec: 	movl	(%rbp), %esi
    000000ef: 	movq	%r12, %r13
    000000f2: 	movq	%rbp, %rdx
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp542:
    000000f8: 	movl	-0x4(%r13), %edi
    000000fc: 	leaq	-0x4(%r13), %r8
    00000100: 	cmpl	%edi, %esi
    00000102: 	jl	.Ltmp538 # Offset: 258
    00000104: 	cmpq	%rdx, %r8
    00000107: 	jbe	.Ltmp539 # Offset: 263
    00000109: 	movl	(%rdx), %ecx
    0000010b: 	cmpl	%ecx, %esi
    0000010d: 	jle	.Ltmp540 # Offset: 269
    0000010f: 	leaq	0x4(%rdx), %rax
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp541:
    00000118: 	movq	%rax, %rdx
    0000011b: 	movl	(%rax), %ecx
    0000011d: 	leaq	0x4(%rax), %rax
    00000121: 	cmpl	%ecx, %esi
    00000123: 	jg	.Ltmp541 # Offset: 291
    00000125: 	cmpq	%rdx, %r8
    00000128: 	jbe	.Ltmp539 # Offset: 296
.Ltmp540:
    0000012a: 	movl	%ecx, (%r8)
    0000012d: 	movl	%edi, (%rdx)
.Ltmp538:
    0000012f: 	movq	%r8, %r13
    00000132: 	jmp	.Ltmp542 # Offset: 306
.Ltmp539:
    00000134: 	movq	%r13, %rax
    00000137: 	subq	%rbp, %rax
    0000013a: 	cmpq	$0x4, %rax
    0000013e: 	jg	.Ltmp543 # Offset: 318
.Ltmp594:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%r13, %rax
    00000146: 	cmpq	$0x4, %rax
    0000014a: 	jg	.Ltmp544 # Offset: 330
.Ltmp537:
    0000014c: 	popq	%rbx
    0000014d: 	popq	%rbp
    0000014e: 	popq	%r12
    00000150: 	popq	%r13
    00000152: 	popq	%r14
    00000154: 	retq # Offset: 340
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp523:
    00000158: 	retq # Offset: 344
.Ltmp544:
    00000159: 	movl	(%r13), %esi
    0000015d: 	movq	%r12, %rbp
    00000160: 	movq	%r13, %rdx
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp549:
    00000168: 	movl	-0x4(%rbp), %r8d
    0000016c: 	leaq	-0x4(%rbp), %rdi
    00000170: 	cmpl	%r8d, %esi
    00000173: 	jl	.Ltmp545 # Offset: 371
    00000175: 	cmpq	%rdx, %rdi
    00000178: 	jbe	.Ltmp546 # Offset: 376
    0000017e: 	movl	(%rdx), %ecx
    00000180: 	cmpl	%esi, %ecx
    00000182: 	jge	.Ltmp547 # Offset: 386
    00000184: 	leaq	0x4(%rdx), %rax
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp548:
    00000190: 	movq	%rax, %rdx
    00000193: 	movl	(%rax), %ecx
    00000195: 	leaq	0x4(%rax), %rax
    00000199: 	cmpl	%ecx, %esi
    0000019b: 	jg	.Ltmp548 # Offset: 411
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	jbe	.Ltmp546 # Offset: 416
.Ltmp547:
    000001a6: 	movl	%ecx, (%rdi)
    000001a8: 	movl	%r8d, (%rdx)
.Ltmp545:
    000001ab: 	movq	%rdi, %rbp
    000001ae: 	jmp	.Ltmp549 # Offset: 430
.Ltmp543:
    000001b0: 	movl	(%rbp), %esi
    000001b3: 	movq	%r13, %rbx
    000001b6: 	movq	%rbp, %rdx
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp554:
    000001c0: 	leaq	-0x4(%rbx), %r8
    000001c4: 	cmpl	%edi, %esi
    000001c6: 	jl	.Ltmp550 # Offset: 454
    000001c8: 	cmpq	%rdx, %r8
    000001cb: 	jbe	.Ltmp551 # Offset: 459
    000001d1: 	movl	(%rdx), %ecx
    000001d3: 	cmpl	%esi, %ecx
    000001d5: 	jge	.Ltmp552 # Offset: 469
    000001d7: 	leaq	0x4(%rdx), %rax
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp553:
    000001e0: 	movq	%rax, %rdx
    000001e3: 	movl	(%rax), %ecx
    000001e5: 	leaq	0x4(%rax), %rax
    000001e9: 	cmpl	%ecx, %esi
    000001eb: 	jg	.Ltmp553 # Offset: 491
    000001ed: 	cmpq	%rdx, %r8
    000001f0: 	jbe	.Ltmp551 # Offset: 496
.Ltmp552:
    000001f6: 	movl	%ecx, (%r8)
    000001f9: 	movl	%edi, (%rdx)
.Ltmp550:
    000001fb: 	movl	-0x4(%r8), %edi
    000001ff: 	movq	%r8, %rbx
    00000202: 	jmp	.Ltmp554 # Offset: 514
.Ltmp536:
    00000204: 	movl	(%r13), %esi
    00000208: 	movq	%rbp, %rbx
    0000020b: 	movq	%r13, %rdx
    0000020e: 	nop # Size: 2
.Ltmp559:
    00000210: 	movl	-0x4(%rbx), %r8d
    00000214: 	leaq	-0x4(%rbx), %rdi
    00000218: 	cmpl	%r8d, %esi
    0000021b: 	jl	.Ltmp555 # Offset: 539
    0000021d: 	cmpq	%rdx, %rdi
    00000220: 	jbe	.Ltmp556 # Offset: 544
    00000226: 	movl	(%rdx), %ecx
    00000228: 	cmpl	%ecx, %esi
    0000022a: 	jle	.Ltmp557 # Offset: 554
    0000022c: 	leaq	0x4(%rdx), %rax
.Ltmp558:
    00000230: 	movq	%rax, %rdx
    00000233: 	movl	(%rax), %ecx
    00000235: 	leaq	0x4(%rax), %rax
    00000239: 	cmpl	%ecx, %esi
    0000023b: 	jg	.Ltmp558 # Offset: 571
    0000023d: 	cmpq	%rdx, %rdi
    00000240: 	jbe	.Ltmp556 # Offset: 576
.Ltmp557:
    00000246: 	movl	%ecx, (%rdi)
    00000248: 	movl	%r8d, (%rdx)
.Ltmp555:
    0000024b: 	movq	%rdi, %rbx
    0000024e: 	jmp	.Ltmp559 # Offset: 590
.Ltmp535:
    00000250: 	movl	(%r9), %esi
    00000253: 	movq	%r13, %rbx
    00000256: 	movq	%r9, %rdx
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp564:
    00000260: 	leaq	-0x4(%rbx), %r8
    00000264: 	cmpl	%edi, %esi
    00000266: 	jl	.Ltmp560 # Offset: 614
    00000268: 	cmpq	%rdx, %r8
    0000026b: 	jbe	.Ltmp561 # Offset: 619
    0000026d: 	movl	(%rdx), %ecx
    0000026f: 	cmpl	%ecx, %esi
    00000271: 	jle	.Ltmp562 # Offset: 625
    00000273: 	leaq	0x4(%rdx), %rax
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp563:
    00000280: 	movq	%rax, %rdx
    00000283: 	movl	(%rax), %ecx
    00000285: 	leaq	0x4(%rax), %rax
    00000289: 	cmpl	%ecx, %esi
    0000028b: 	jg	.Ltmp563 # Offset: 651
    0000028d: 	cmpq	%rdx, %r8
    00000290: 	jbe	.Ltmp561 # Offset: 656
.Ltmp562:
    00000292: 	movl	%ecx, (%r8)
    00000295: 	movl	%edi, (%rdx)
.Ltmp560:
    00000297: 	movl	-0x4(%r8), %edi
    0000029b: 	movq	%r8, %rbx
    0000029e: 	jmp	.Ltmp564 # Offset: 670
.Ltmp561:
    000002a0: 	movq	%rbx, %rax
    000002a3: 	subq	%r9, %rax
    000002a6: 	cmpq	$0x4, %rax
    000002aa: 	jle	.Ltmp565 # Offset: 682
    000002ac: 	movl	(%r9), %esi
    000002af: 	movq	%rbx, %r14
    000002b2: 	movq	%r9, %rdx
    000002b5: 	nopl	(%rax) # Size: 3
.Ltmp570:
    000002b8: 	movl	-0x4(%r14), %r8d
    000002bc: 	leaq	-0x4(%r14), %rdi
    000002c0: 	cmpl	%r8d, %esi
    000002c3: 	jl	.Ltmp566 # Offset: 707
    000002c5: 	cmpq	%rdx, %rdi
    000002c8: 	jbe	.Ltmp567 # Offset: 712
    000002ca: 	movl	(%rdx), %ecx
    000002cc: 	cmpl	%ecx, %esi
    000002ce: 	jle	.Ltmp568 # Offset: 718
    000002d0: 	leaq	0x4(%rdx), %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp569:
    000002d8: 	movq	%rax, %rdx
    000002db: 	movl	(%rax), %ecx
    000002dd: 	leaq	0x4(%rax), %rax
    000002e1: 	cmpl	%ecx, %esi
    000002e3: 	jg	.Ltmp569 # Offset: 739
    000002e5: 	cmpq	%rdx, %rdi
    000002e8: 	jbe	.Ltmp567 # Offset: 744
.Ltmp568:
    000002ea: 	movl	%ecx, (%rdi)
    000002ec: 	movl	%r8d, (%rdx)
.Ltmp566:
    000002ef: 	movq	%rdi, %r14
    000002f2: 	jmp	.Ltmp570 # Offset: 754
.Ltmp567:
    000002f4: 	movq	%r14, %rsi
    000002f7: 	movq	%r9, %rdi
    000002fa: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 762
    000002ff: 	movq	%rbx, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 773
.Ltmp565:
    0000030a: 	movq	%r13, %rax
    0000030d: 	movq	%rbx, %r8
    00000310: 	subq	%rbx, %rax
    00000313: 	cmpq	$0x4, %rax
    00000317: 	jle	.Ltmp571 # Offset: 791
    0000031d: 	movl	(%rbx), %ecx
    0000031f: 	movq	%r13, %r14
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp576:
    00000328: 	movl	-0x4(%r14), %edi
    0000032c: 	leaq	-0x4(%r14), %rsi
    00000330: 	cmpl	%edi, %ecx
    00000332: 	jl	.Ltmp572 # Offset: 818
    00000334: 	cmpq	%rbx, %rsi
    00000337: 	jbe	.Ltmp573 # Offset: 823
    0000033d: 	movl	(%rbx), %edx
    0000033f: 	cmpl	%ecx, %edx
    00000341: 	jge	.Ltmp574 # Offset: 833
    00000343: 	leaq	0x4(%rbx), %rax
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp575:
    00000350: 	movq	%rax, %rbx
    00000353: 	movl	(%rax), %edx
    00000355: 	leaq	0x4(%rax), %rax
    00000359: 	cmpl	%edx, %ecx
    0000035b: 	jg	.Ltmp575 # Offset: 859
    0000035d: 	cmpq	%rbx, %rsi
    00000360: 	jbe	.Ltmp573 # Offset: 864
.Ltmp574:
    00000366: 	movl	%edx, (%rsi)
    00000368: 	movl	%edi, (%rbx)
.Ltmp572:
    0000036a: 	movq	%rsi, %r14
    0000036d: 	jmp	.Ltmp576 # Offset: 877
.Ltmp556:
    0000036f: 	movq	%rbx, %rax
    00000372: 	subq	%r13, %rax
    00000375: 	cmpq	$0x4, %rax
    00000379: 	jle	.Ltmp577 # Offset: 889
    0000037b: 	movl	(%r13), %esi
    0000037f: 	movq	%rbx, %r14
    00000382: 	movq	%r13, %rdx
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp582:
    00000388: 	movl	-0x4(%r14), %r8d
    0000038c: 	leaq	-0x4(%r14), %rdi
    00000390: 	cmpl	%r8d, %esi
    00000393: 	jl	.Ltmp578 # Offset: 915
    00000395: 	cmpq	%rdx, %rdi
    00000398: 	jbe	.Ltmp579 # Offset: 920
    0000039a: 	movl	(%rdx), %ecx
    0000039c: 	cmpl	%esi, %ecx
    0000039e: 	jge	.Ltmp580 # Offset: 926
    000003a0: 	leaq	0x4(%rdx), %rax
    000003a4: 	nopl	(%rax) # Size: 4
.Ltmp581:
    000003a8: 	movq	%rax, %rdx
    000003ab: 	movl	(%rax), %ecx
    000003ad: 	leaq	0x4(%rax), %rax
    000003b1: 	cmpl	%ecx, %esi
    000003b3: 	jg	.Ltmp581 # Offset: 947
    000003b5: 	cmpq	%rdx, %rdi
    000003b8: 	jbe	.Ltmp579 # Offset: 952
.Ltmp580:
    000003ba: 	movl	%ecx, (%rdi)
    000003bc: 	movl	%r8d, (%rdx)
.Ltmp578:
    000003bf: 	movq	%rdi, %r14
    000003c2: 	jmp	.Ltmp582 # Offset: 962
.Ltmp579:
    000003c4: 	movq	%r14, %rsi
    000003c7: 	movq	%r13, %rdi
    000003ca: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 970
    000003cf: 	movq	%rbx, %rsi
    000003d2: 	movq	%r14, %rdi
    000003d5: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 981
.Ltmp577:
    000003da: 	movq	%rbp, %rax
    000003dd: 	movq	%rbx, %r8
    000003e0: 	subq	%rbx, %rax
    000003e3: 	cmpq	$0x4, %rax
    000003e7: 	jle	.Ltmp529 # Offset: 999
    000003ed: 	movl	(%rbx), %ecx
    000003ef: 	movq	%rbp, %r13
    000003f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp587:
    000003f8: 	movl	-0x4(%r13), %edi
    000003fc: 	leaq	-0x4(%r13), %rsi
    00000400: 	cmpl	%edi, %ecx
    00000402: 	jl	.Ltmp583 # Offset: 1026
    00000404: 	cmpq	%rbx, %rsi
    00000407: 	jbe	.Ltmp584 # Offset: 1031
    0000040d: 	movl	(%rbx), %edx
    0000040f: 	cmpl	%edx, %ecx
    00000411: 	jle	.Ltmp585 # Offset: 1041
    00000413: 	leaq	0x4(%rbx), %rax
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp586:
    00000420: 	movq	%rax, %rbx
    00000423: 	movl	(%rax), %edx
    00000425: 	leaq	0x4(%rax), %rax
    00000429: 	cmpl	%edx, %ecx
    0000042b: 	jg	.Ltmp586 # Offset: 1067
    0000042d: 	cmpq	%rbx, %rsi
    00000430: 	jbe	.Ltmp584 # Offset: 1072
.Ltmp585:
    00000436: 	movl	%edx, (%rsi)
    00000438: 	movl	%edi, (%rbx)
.Ltmp583:
    0000043a: 	movq	%rsi, %r13
    0000043d: 	jmp	.Ltmp587 # Offset: 1085
.Ltmp551:
    0000043f: 	movq	%rbx, %rax
    00000442: 	subq	%rbp, %rax
    00000445: 	cmpq	$0x4, %rax
    00000449: 	jle	.Ltmp588 # Offset: 1097
    0000044b: 	movl	(%rbp), %esi
    0000044e: 	movq	%rbx, %r14
    00000451: 	movq	%rbp, %rdx
    00000454: 	nopl	(%rax) # Size: 4
.Ltmp593:
    00000458: 	movl	-0x4(%r14), %r8d
    0000045c: 	leaq	-0x4(%r14), %rdi
    00000460: 	cmpl	%r8d, %esi
    00000463: 	jl	.Ltmp589 # Offset: 1123
    00000465: 	cmpq	%rdx, %rdi
    00000468: 	jbe	.Ltmp590 # Offset: 1128
    0000046a: 	movl	(%rdx), %ecx
    0000046c: 	cmpl	%esi, %ecx
    0000046e: 	jge	.Ltmp591 # Offset: 1134
    00000470: 	leaq	0x4(%rdx), %rax
    00000474: 	nopl	(%rax) # Size: 4
.Ltmp592:
    00000478: 	movq	%rax, %rdx
    0000047b: 	movl	(%rax), %ecx
    0000047d: 	leaq	0x4(%rax), %rax
    00000481: 	cmpl	%ecx, %esi
    00000483: 	jg	.Ltmp592 # Offset: 1155
    00000485: 	cmpq	%rdx, %rdi
    00000488: 	jbe	.Ltmp590 # Offset: 1160
.Ltmp591:
    0000048a: 	movl	%ecx, (%rdi)
    0000048c: 	movl	%r8d, (%rdx)
.Ltmp589:
    0000048f: 	movq	%rdi, %r14
    00000492: 	jmp	.Ltmp593 # Offset: 1170
.Ltmp590:
    00000494: 	movq	%r14, %rsi
    00000497: 	movq	%rbp, %rdi
    0000049a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1178
    0000049f: 	movq	%rbx, %rsi
    000004a2: 	movq	%r14, %rdi
    000004a5: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1189
.Ltmp588:
    000004aa: 	movq	%r13, %rax
    000004ad: 	movq	%rbx, %r8
    000004b0: 	subq	%rbx, %rax
    000004b3: 	cmpq	$0x4, %rax
    000004b7: 	jle	.Ltmp594 # Offset: 1207
    000004bd: 	movl	(%rbx), %ecx
    000004bf: 	movq	%r13, %rbp
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp599:
    000004c8: 	movl	-0x4(%rbp), %edi
    000004cb: 	leaq	-0x4(%rbp), %rsi
    000004cf: 	cmpl	%edi, %ecx
    000004d1: 	jl	.Ltmp595 # Offset: 1233
    000004d3: 	cmpq	%rbx, %rsi
    000004d6: 	jbe	.Ltmp596 # Offset: 1238
    000004dc: 	movl	(%rbx), %edx
    000004de: 	cmpl	%edx, %ecx
    000004e0: 	jle	.Ltmp597 # Offset: 1248
    000004e2: 	leaq	0x4(%rbx), %rax
    000004e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp598:
    000004f0: 	movq	%rax, %rbx
    000004f3: 	movl	(%rax), %edx
    000004f5: 	leaq	0x4(%rax), %rax
    000004f9: 	cmpl	%edx, %ecx
    000004fb: 	jg	.Ltmp598 # Offset: 1275
    000004fd: 	cmpq	%rbx, %rsi
    00000500: 	jbe	.Ltmp596 # Offset: 1280
.Ltmp597:
    00000506: 	movl	%edx, (%rsi)
    00000508: 	movl	%edi, (%rbx)
.Ltmp595:
    0000050a: 	movq	%rsi, %rbp
    0000050d: 	jmp	.Ltmp599 # Offset: 1293
.Ltmp546:
    0000050f: 	movq	%rbp, %rax
    00000512: 	subq	%r13, %rax
    00000515: 	cmpq	$0x4, %rax
    00000519: 	jle	.Ltmp600 # Offset: 1305
    0000051b: 	movl	(%r13), %esi
    0000051f: 	movq	%rbp, %r14
    00000522: 	movq	%r13, %rdx
    00000525: 	nopl	(%rax) # Size: 3
.Ltmp605:
    00000528: 	movl	-0x4(%r14), %r8d
    0000052c: 	leaq	-0x4(%r14), %rdi
    00000530: 	cmpl	%r8d, %esi
    00000533: 	jl	.Ltmp601 # Offset: 1331
    00000535: 	cmpq	%rdx, %rdi
    00000538: 	jbe	.Ltmp602 # Offset: 1336
    0000053a: 	movl	(%rdx), %ecx
    0000053c: 	cmpl	%esi, %ecx
    0000053e: 	jge	.Ltmp603 # Offset: 1342
    00000540: 	leaq	0x4(%rdx), %rax
    00000544: 	nopl	(%rax) # Size: 4
.Ltmp604:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movl	(%rax), %ecx
    0000054d: 	leaq	0x4(%rax), %rax
    00000551: 	cmpl	%ecx, %esi
    00000553: 	jg	.Ltmp604 # Offset: 1363
    00000555: 	cmpq	%rdx, %rdi
    00000558: 	jbe	.Ltmp602 # Offset: 1368
.Ltmp603:
    0000055a: 	movl	%ecx, (%rdi)
    0000055c: 	movl	%r8d, (%rdx)
.Ltmp601:
    0000055f: 	movq	%rdi, %r14
    00000562: 	jmp	.Ltmp605 # Offset: 1378
.Ltmp602:
    00000564: 	movq	%r14, %rsi
    00000567: 	movq	%r13, %rdi
    0000056a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1386
    0000056f: 	movq	%rbp, %rsi
    00000572: 	movq	%r14, %rdi
    00000575: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1397
.Ltmp600:
    0000057a: 	movq	%r12, %rax
    0000057d: 	movq	%rbp, %r8
    00000580: 	subq	%rbp, %rax
    00000583: 	cmpq	$0x4, %rax
    00000587: 	jle	.Ltmp537 # Offset: 1415
    0000058d: 	movl	(%rbp), %ecx
    00000590: 	movq	%r12, %r13
    00000593: 	nopl	(%rax,%rax) # Size: 5
.Ltmp610:
    00000598: 	movl	-0x4(%r13), %edi
    0000059c: 	leaq	-0x4(%r13), %rsi
    000005a0: 	cmpl	%edi, %ecx
    000005a2: 	jl	.Ltmp606 # Offset: 1442
    000005a4: 	cmpq	%rbp, %rsi
    000005a7: 	jbe	.Ltmp607 # Offset: 1447
    000005a9: 	movl	(%rbp), %edx
    000005ac: 	cmpl	%ecx, %edx
    000005ae: 	jge	.Ltmp608 # Offset: 1454
    000005b0: 	leaq	0x4(%rbp), %rax
    000005b4: 	nopl	(%rax) # Size: 4
.Ltmp609:
    000005b8: 	movq	%rax, %rbp
    000005bb: 	movl	(%rax), %edx
    000005bd: 	leaq	0x4(%rax), %rax
    000005c1: 	cmpl	%edx, %ecx
    000005c3: 	jg	.Ltmp609 # Offset: 1475
    000005c5: 	cmpq	%rbp, %rsi
    000005c8: 	jbe	.Ltmp607 # Offset: 1480
.Ltmp608:
    000005ca: 	movl	%edx, (%rsi)
    000005cc: 	movl	%edi, (%rbp)
.Ltmp606:
    000005cf: 	movq	%rsi, %r13
    000005d2: 	jmp	.Ltmp610 # Offset: 1490
.Ltmp607:
    000005d4: 	movq	%r13, %rsi
    000005d7: 	movq	%r8, %rdi
    000005da: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1498
    000005df: 	popq	%rbx
    000005e0: 	movq	%r12, %rsi
    000005e3: 	popq	%rbp
    000005e4: 	movq	%r13, %rdi
    000005e7: 	popq	%r12
    000005e9: 	popq	%r13
    000005eb: 	popq	%r14
    000005ed: 	jmp	.LBB058 # Offset: 1517
.Ltmp596:
    000005f2: 	movq	%rbp, %rsi
    000005f5: 	movq	%r8, %rdi
    000005f8: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1528
    000005fd: 	movq	%r13, %rsi
    00000600: 	movq	%rbp, %rdi
    00000603: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1539
    00000608: 	jmp	.Ltmp594 # Offset: 1544
.Ltmp584:
    0000060d: 	movq	%r13, %rsi
    00000610: 	movq	%r8, %rdi
    00000613: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1555
    00000618: 	movq	%rbp, %rsi
    0000061b: 	movq	%r13, %rdi
    0000061e: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1566
    00000623: 	jmp	.Ltmp529 # Offset: 1571
.Ltmp573:
    00000628: 	movq	%r14, %rsi
    0000062b: 	movq	%r8, %rdi
    0000062e: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1582
    00000633: 	movq	%r13, %rsi
    00000636: 	movq	%r14, %rdi
    00000639: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 1593
    0000063e: 	jmp	.Ltmp571 # Offset: 1598
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_"

Binary Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x5ba0
  Size        : 0xd2
  MaxSize     : 0xe0
  Offset      : 0x5ba0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x38, %rsp
    0000000e: 	movq	0x8(%rsi), %rbp
    00000012: 	movq	0x8(%rdi), %r9
    00000016: 	movq	%fs:0x28, %rax
    0000001f: 	movq	%rax, 0x28(%rsp)
    00000024: 	xorl	%eax, %eax
    00000026: 	movq	%rbp, %rax
    00000029: 	subq	%r9, %rax
    0000002c: 	cmpq	$0x4, %rax
    00000030: 	jle	.Ltmp611 # Offset: 48
    00000036: 	movl	(%r9), %esi
    00000039: 	movq	%rbp, %rbx
    0000003c: 	movq	%r9, %rdx
    0000003f: 	nop # Size: 1
.Ltmp616:
    00000040: 	movl	-0x4(%rbx), %r8d
    00000044: 	leaq	-0x4(%rbx), %rdi
    00000048: 	cmpl	%esi, %r8d
    0000004b: 	jg	.Ltmp612 # Offset: 75
    0000004d: 	cmpq	%rdx, %rdi
    00000050: 	jbe	.Ltmp613 # Offset: 80
    00000052: 	movl	(%rdx), %ecx
    00000054: 	cmpl	%ecx, %esi
    00000056: 	jle	.Ltmp614 # Offset: 86
    00000058: 	leaq	0x4(%rdx), %rax
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp615:
    00000060: 	movq	%rax, %rdx
    00000063: 	movl	(%rax), %ecx
    00000065: 	leaq	0x4(%rax), %rax
    00000069: 	cmpl	%esi, %ecx
    0000006b: 	jl	.Ltmp615 # Offset: 107
    0000006d: 	cmpq	%rdx, %rdi
    00000070: 	jbe	.Ltmp613 # Offset: 112
.Ltmp614:
    00000072: 	movl	%ecx, (%rdi)
    00000074: 	movl	%r8d, (%rdx)
.Ltmp612:
    00000077: 	movq	%rdi, %rbx
    0000007a: 	jmp	.Ltmp616 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp613:
    00000080: 	movq	%rsp, %r12
    00000083: 	leaq	0x10(%rsp), %r13
    00000088: 	movq	%rbx, 0x8(%rsp)
    0000008d: 	movq	%r12, %rsi
    00000090: 	movq	%r13, %rdi
    00000093: 	movq	%r9, 0x18(%rsp)
    00000098: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 152
    0000009d: 	movq	%r13, %rsi
    000000a0: 	movq	%r12, %rdi
    000000a3: 	movq	%rbp, 0x18(%rsp)
    000000a8: 	movq	%rbx, 0x8(%rsp)
    000000ad: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 173
.Ltmp611:
    000000b2: 	movq	0x28(%rsp), %rax
    000000b7: 	subq	%fs:0x28, %rax
    000000c0: 	jne	.Ltmp617 # Offset: 192
    000000c2: 	addq	$0x38, %rsp
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	popq	%r12
    000000ca: 	popq	%r13
    000000cc: 	retq # Offset: 204
.Ltmp617:
    000000cd: 	callq	__stack_chk_fail@PLT # Offset: 205
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x5c80
  Size        : 0xda
  MaxSize     : 0xe0
  Offset      : 0x5c80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x38, %rsp
    0000000e: 	movq	0x8(%rsi), %rbx
    00000012: 	movq	0x8(%rdi), %rdx
    00000016: 	movq	%fs:0x28, %rax
    0000001f: 	movq	%rax, 0x28(%rsp)
    00000024: 	xorl	%eax, %eax
    00000026: 	movq	%rbx, %rax
    00000029: 	subq	%rdx, %rax
    0000002c: 	cmpq	$0x4, %rax
    00000030: 	jle	.Ltmp618 # Offset: 48
    00000036: 	movq	%rsi, %rbp
    00000039: 	movl	(%rdx), %esi
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp623:
    00000040: 	movl	-0x4(%rbx), %r9d
    00000044: 	leaq	-0x4(%rbx), %r8
    00000048: 	cmpl	%esi, %r9d
    0000004b: 	jg	.Ltmp619 # Offset: 75
    0000004d: 	cmpq	%rdx, %r8
    00000050: 	jbe	.Ltmp620 # Offset: 80
    00000052: 	movl	(%rdx), %ecx
    00000054: 	cmpl	%ecx, %esi
    00000056: 	jle	.Ltmp621 # Offset: 86
    00000058: 	leaq	0x4(%rdx), %rax
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp622:
    00000060: 	movq	%rax, %rdx
    00000063: 	movl	(%rax), %ecx
    00000065: 	leaq	0x4(%rax), %rax
    00000069: 	cmpl	%esi, %ecx
    0000006b: 	jl	.Ltmp622 # Offset: 107
    0000006d: 	cmpq	%rdx, %r8
    00000070: 	jbe	.Ltmp620 # Offset: 112
.Ltmp621:
    00000072: 	movl	%ecx, (%r8)
    00000075: 	movl	%r9d, (%rdx)
.Ltmp619:
    00000078: 	movq	%r8, %rbx
    0000007b: 	jmp	.Ltmp623 # Offset: 123
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp620:
    00000080: 	movq	0x8(%rdi), %rax
    00000084: 	movq	%rsp, %r12
    00000087: 	leaq	0x10(%rsp), %r13
    0000008c: 	movq	%rbx, 0x8(%rsp)
    00000091: 	movq	%r12, %rsi
    00000094: 	movq	%r13, %rdi
    00000097: 	movq	%rax, 0x18(%rsp)
    0000009c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 156
    000000a1: 	movq	0x8(%rbp), %rax
    000000a5: 	movq	%r13, %rsi
    000000a8: 	movq	%r12, %rdi
    000000ab: 	movq	%rbx, 0x8(%rsp)
    000000b0: 	movq	%rax, 0x18(%rsp)
    000000b5: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 181
.Ltmp618:
    000000ba: 	movq	0x28(%rsp), %rax
    000000bf: 	subq	%fs:0x28, %rax
    000000c8: 	jne	.Ltmp624 # Offset: 200
    000000ca: 	addq	$0x38, %rsp
    000000ce: 	popq	%rbx
    000000cf: 	popq	%rbp
    000000d0: 	popq	%r12
    000000d2: 	popq	%r13
    000000d4: 	retq # Offset: 212
.Ltmp624:
    000000d5: 	callq	__stack_chk_fail@PLT # Offset: 213
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_"

Binary Function "_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_vector.cpp/1
  Number      : 62
  State       : disassembled
  Address     : 0x5d60
  Size        : 0xa56
  MaxSize     : 0xa60
  Offset      : 0x5d60
  Section     : .text
  Orc Section : .local.text._Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	xorl	%r14d, %r14d
    00000007: 	pushq	%r13
    00000009: 	movq	%rdi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x78, %rsp
    00000014: 	movq	%rsi, (%rsp)
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%rcx, 0x10(%rsp)
    00000022: 	movq	%r8, 0x18(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x68(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	movl	iterations(%rip), %eax
    00000049: 	testl	%eax, %eax
    0000004b: 	jle	.Ltmp625 # Offset: 75
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp638:
    00000058: 	movq	0x8(%rsp), %rax
    0000005d: 	movq	0x8(%r13), %rdx
    00000061: 	movq	0x8(%rax), %rbx
    00000065: 	movq	(%rsp), %rax
    00000069: 	movq	0x8(%rax), %r8
    0000006d: 	cmpq	%rdx, %r8
    00000070: 	je	.Ltmp626 # Offset: 112
    00000076: 	movq	%r8, %rdi
    00000079: 	leaq	0x4(%rdx), %r9
    0000007d: 	movq	%rbx, %rax
    00000080: 	subq	%rdx, %rdi
    00000083: 	subq	%r9, %rax
    00000086: 	leaq	-0x4(%rdi), %rsi
    0000008a: 	cmpq	$0x8, %rax
    0000008e: 	jbe	.Ltmp627 # Offset: 142
    00000094: 	cmpq	$0x8, %rsi
    00000098: 	jbe	.Ltmp627 # Offset: 152
    0000009e: 	shrq	$0x2, %rsi
    000000a2: 	xorl	%eax, %eax
    000000a4: 	addq	$0x1, %rsi
    000000a8: 	movq	%rsi, %rdi
    000000ab: 	shrq	$0x2, %rdi
    000000af: 	shlq	$0x4, %rdi
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp628:
    000000b8: 	movdqu	(%rdx,%rax), %xmm1
    000000bd: 	movups	%xmm1, (%rbx,%rax)
    000000c1: 	addq	$0x10, %rax
    000000c5: 	cmpq	%rax, %rdi
    000000c8: 	jne	.Ltmp628 # Offset: 200
    000000ca: 	movq	%rsi, %rdi
    000000cd: 	andq	$-0x4, %rdi
    000000d1: 	leaq	(,%rdi,4), %rax
    000000d9: 	addq	%rax, %rdx
    000000dc: 	addq	%rbx, %rax
    000000df: 	cmpq	%rsi, %rdi
    000000e2: 	je	.Ltmp626 # Offset: 226
    000000e4: 	movl	(%rdx), %esi
    000000e6: 	movl	%esi, (%rax)
    000000e8: 	leaq	0x4(%rdx), %rsi
    000000ec: 	cmpq	%rsi, %r8
    000000ef: 	je	.Ltmp626 # Offset: 239
    000000f1: 	movl	0x4(%rdx), %esi
    000000f4: 	movl	%esi, 0x4(%rax)
    000000f7: 	leaq	0x8(%rdx), %rsi
    000000fb: 	cmpq	%rsi, %r8
    000000fe: 	je	.Ltmp626 # Offset: 254
    00000100: 	movl	0x8(%rdx), %edx
    00000103: 	movl	%edx, 0x8(%rax)
.Ltmp626:
    00000106: 	movq	0x10(%rsp), %rax
    0000010b: 	movq	0x8(%rax), %r15
    0000010f: 	movq	%r15, %rax
    00000112: 	subq	%rbx, %rax
    00000115: 	cmpq	$0x4, %rax
    00000119: 	jle	.Ltmp629 # Offset: 281
    0000011f: 	movl	(%rbx), %r8d
    00000122: 	movq	%r15, %rbp
    00000125: 	movq	%rbx, %rsi
    00000128: 	nopl	(%rax,%rax) # Size: 8
.Ltmp634:
    00000130: 	movl	-0x4(%rbp), %eax
    00000133: 	leaq	-0x4(%rbp), %rdi
    00000137: 	cmpl	%eax, %r8d
    0000013a: 	jl	.Ltmp630 # Offset: 314
    0000013c: 	cmpq	%rsi, %rdi
    0000013f: 	jbe	.Ltmp631 # Offset: 319
    00000145: 	movl	(%rsi), %ecx
    00000147: 	cmpl	%ecx, %r8d
    0000014a: 	jle	.Ltmp632 # Offset: 330
    0000014c: 	leaq	0x4(%rsi), %rdx
.Ltmp633:
    00000150: 	movq	%rdx, %rsi
    00000153: 	movl	(%rdx), %ecx
    00000155: 	leaq	0x4(%rdx), %rdx
    00000159: 	cmpl	%ecx, %r8d
    0000015c: 	jg	.Ltmp633 # Offset: 348
    0000015e: 	cmpq	%rsi, %rdi
    00000161: 	jbe	.Ltmp631 # Offset: 353
.Ltmp632:
    00000167: 	movl	%ecx, (%rdi)
    00000169: 	movl	%eax, (%rsi)
.Ltmp630:
    0000016b: 	movq	%rdi, %rbp
    0000016e: 	jmp	.Ltmp634 # Offset: 366
.Ltmp703:
    00000170: 	movq	%rbp, 0x58(%rsp)
    00000175: 	leaq	0x50(%rsp), %rbp
    0000017a: 	leaq	0x40(%rsp), %rsi
    0000017f: 	movq	%rbp, %rdi
    00000182: 	movq	%rsi, 0x20(%rsp)
    00000187: 	movq	%r12, 0x48(%rsp)
    0000018c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 396
    00000191: 	movq	0x20(%rsp), %rsi
    00000196: 	movq	%rbp, %rdi
    00000199: 	movq	%r15, 0x48(%rsp)
    0000019e: 	movq	%r12, 0x58(%rsp)
    000001a3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 419
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp629:
    000001b0: 	addq	$0x4, %rbx
    000001b4: 	jmp	.Ltmp635 # Offset: 436
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp637:
    000001c0: 	addq	$0x4, %rbx
    000001c4: 	movl	-0x8(%rbx), %edi
    000001c7: 	cmpl	%edi, (%rax)
    000001c9: 	jl	.Ltmp636 # Offset: 457
.Ltmp635:
    000001cf: 	movq	%rbx, %rax
    000001d2: 	cmpq	%rbx, %r15
    000001d5: 	jne	.Ltmp637 # Offset: 469
    000001d7: 	addl	$0x1, %r14d
    000001db: 	cmpl	iterations(%rip), %r14d
    000001e2: 	jl	.Ltmp638 # Offset: 482
.Ltmp625:
    000001e8: 	callq	clock@PLT # Offset: 488
    000001ed: 	movq	%rax, end_time(%rip)
    000001f4: 	movq	0x68(%rsp), %rdx
    000001f9: 	subq	%fs:0x28, %rdx
    00000202: 	jne	.Ltmp639 # Offset: 514
    00000208: 	subq	start_time(%rip), %rax
    0000020f: 	pxor	%xmm0, %xmm0
    00000213: 	movq	0x18(%rsp), %rdi
    00000218: 	cvtsi2sd	%rax, %xmm0
    0000021d: 	divsd	DATAat0x15638(%rip), %xmm0
    00000225: 	addq	$0x78, %rsp
    00000229: 	popq	%rbx
    0000022a: 	popq	%rbp
    0000022b: 	popq	%r12
    0000022d: 	popq	%r13
    0000022f: 	popq	%r14
    00000231: 	popq	%r15
    00000233: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 563
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp631:
    00000240: 	movq	%rbp, %rdx
    00000243: 	subq	%rbx, %rdx
    00000246: 	cmpq	$0x4, %rdx
    0000024a: 	jle	.Ltmp640 # Offset: 586
    00000250: 	movl	(%rbx), %r8d
    00000253: 	movq	%rbp, %r12
    00000256: 	movq	%rbx, %rsi
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp645:
    00000260: 	leaq	-0x4(%r12), %rdi
    00000265: 	cmpl	%eax, %r8d
    00000268: 	jl	.Ltmp641 # Offset: 616
    0000026a: 	cmpq	%rsi, %rdi
    0000026d: 	jbe	.Ltmp642 # Offset: 621
    00000273: 	movl	(%rsi), %ecx
    00000275: 	cmpl	%ecx, %r8d
    00000278: 	jle	.Ltmp643 # Offset: 632
    0000027a: 	leaq	0x4(%rsi), %rdx
    0000027e: 	nop # Size: 2
.Ltmp644:
    00000280: 	movq	%rdx, %rsi
    00000283: 	movl	(%rdx), %ecx
    00000285: 	leaq	0x4(%rdx), %rdx
    00000289: 	cmpl	%ecx, %r8d
    0000028c: 	jg	.Ltmp644 # Offset: 652
    0000028e: 	cmpq	%rsi, %rdi
    00000291: 	jbe	.Ltmp642 # Offset: 657
.Ltmp643:
    00000297: 	movl	%ecx, (%rdi)
    00000299: 	movl	%eax, (%rsi)
.Ltmp641:
    0000029b: 	movl	-0x4(%rdi), %eax
    0000029e: 	movq	%rdi, %r12
    000002a1: 	jmp	.Ltmp645 # Offset: 673
.Ltmp681:
    000002a3: 	leaq	0x40(%rsp), %rsi
    000002a8: 	leaq	0x50(%rsp), %rdi
    000002ad: 	movq	%r12, 0x48(%rsp)
    000002b2: 	movq	%rsi, 0x28(%rsp)
    000002b7: 	movq	%rdi, 0x20(%rsp)
    000002bc: 	movq	%r8, 0x58(%rsp)
    000002c1: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 705
    000002c6: 	movq	0x28(%rsp), %rsi
    000002cb: 	movq	0x20(%rsp), %rdi
    000002d0: 	movq	%rbp, 0x48(%rsp)
    000002d5: 	movq	%r12, 0x58(%rsp)
    000002da: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 730
    000002df: 	nop # Size: 1
.Ltmp640:
    000002e0: 	movq	%r15, %rax
    000002e3: 	subq	%rbp, %rax
    000002e6: 	cmpq	$0x4, %rax
    000002ea: 	jle	.Ltmp629 # Offset: 746
    000002f0: 	movl	(%rbp), %r8d
    000002f4: 	movq	%r15, %r12
    000002f7: 	movq	%rbp, %rdx
    000002fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp650:
    00000300: 	movl	-0x4(%r12), %edi
    00000305: 	leaq	-0x4(%r12), %rsi
    0000030a: 	cmpl	%edi, %r8d
    0000030d: 	jl	.Ltmp646 # Offset: 781
    0000030f: 	cmpq	%rdx, %rsi
    00000312: 	jbe	.Ltmp647 # Offset: 786
    00000314: 	movl	(%rdx), %ecx
    00000316: 	cmpl	%r8d, %ecx
    00000319: 	jge	.Ltmp648 # Offset: 793
    0000031b: 	leaq	0x4(%rdx), %rax
    0000031f: 	nop # Size: 1
.Ltmp649:
    00000320: 	movq	%rax, %rdx
    00000323: 	movl	(%rax), %ecx
    00000325: 	leaq	0x4(%rax), %rax
    00000329: 	cmpl	%ecx, %r8d
    0000032c: 	jg	.Ltmp649 # Offset: 812
    0000032e: 	cmpq	%rdx, %rsi
    00000331: 	jbe	.Ltmp647 # Offset: 817
.Ltmp648:
    00000333: 	movl	%ecx, (%rsi)
    00000335: 	movl	%edi, (%rdx)
.Ltmp646:
    00000337: 	movq	%rsi, %r12
    0000033a: 	jmp	.Ltmp650 # Offset: 826
    0000033c: 	nopl	(%rax) # Size: 4
.Ltmp636:
    00000340: 	movq	0x18(%rsp), %rax
    00000345: 	leaq	DATAat0x151ba(%rip), %rsi
    0000034c: 	movl	$0x1, %edi
    00000351: 	addl	$0x1, %r14d
    00000355: 	movq	(%rax), %rdx
    00000358: 	xorl	%eax, %eax
    0000035a: 	callq	__printf_chk@PLT # Offset: 858
    0000035f: 	cmpl	iterations(%rip), %r14d
    00000366: 	jl	.Ltmp638 # Offset: 870
    0000036c: 	jmp	.Ltmp625 # Offset: 876
.Ltmp647:
    00000371: 	movq	%r12, %rax
    00000374: 	subq	%rbp, %rax
    00000377: 	cmpq	$0x4, %rax
    0000037b: 	jle	.Ltmp651 # Offset: 891
    00000381: 	movl	(%rbp), %r9d
    00000385: 	movq	%r12, %r8
    00000388: 	movq	%rbp, %rdx
    0000038b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp656:
    00000390: 	leaq	-0x4(%r8), %rsi
    00000394: 	cmpl	%r9d, %edi
    00000397: 	jg	.Ltmp652 # Offset: 919
    00000399: 	cmpq	%rdx, %rsi
    0000039c: 	jbe	.Ltmp653 # Offset: 924
    000003a2: 	movl	(%rdx), %ecx
    000003a4: 	cmpl	%r9d, %ecx
    000003a7: 	jge	.Ltmp654 # Offset: 935
    000003a9: 	leaq	0x4(%rdx), %rax
    000003ad: 	nopl	(%rax) # Size: 3
.Ltmp655:
    000003b0: 	movq	%rax, %rdx
    000003b3: 	movl	(%rax), %ecx
    000003b5: 	leaq	0x4(%rax), %rax
    000003b9: 	cmpl	%ecx, %r9d
    000003bc: 	jg	.Ltmp655 # Offset: 956
    000003be: 	cmpq	%rdx, %rsi
    000003c1: 	jbe	.Ltmp653 # Offset: 961
.Ltmp654:
    000003c7: 	movl	%ecx, (%rsi)
    000003c9: 	movl	%edi, (%rdx)
.Ltmp652:
    000003cb: 	movl	-0x4(%rsi), %edi
    000003ce: 	movq	%rsi, %r8
    000003d1: 	jmp	.Ltmp656 # Offset: 977
.Ltmp719:
    000003d3: 	movq	%r11, %rsi
    000003d6: 	movq	%rcx, %rdi
    000003d9: 	movq	%r8, 0x48(%rsp)
    000003de: 	movq	%r8, 0x30(%rsp)
    000003e3: 	movq	%rbp, 0x58(%rsp)
    000003e8: 	movq	%r11, 0x28(%rsp)
    000003ed: 	movq	%rcx, 0x20(%rsp)
    000003f2: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 1010
    000003f7: 	movq	0x30(%rsp), %r8
    000003fc: 	movq	0x28(%rsp), %rsi
    00000401: 	movq	%r12, 0x48(%rsp)
    00000406: 	movq	0x20(%rsp), %rdi
    0000040b: 	movq	%r8, 0x58(%rsp)
    00000410: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 1040
.Ltmp651:
    00000415: 	movq	%r15, %rax
    00000418: 	subq	%r12, %rax
    0000041b: 	cmpq	$0x4, %rax
    0000041f: 	jle	.Ltmp629 # Offset: 1055
    00000425: 	movl	(%r12), %edi
    00000429: 	movq	%r15, %rbp
    0000042c: 	movq	%r12, %rdx
    0000042f: 	nop # Size: 1
.Ltmp661:
    00000430: 	movl	-0x4(%rbp), %r8d
    00000434: 	leaq	-0x4(%rbp), %rsi
    00000438: 	cmpl	%r8d, %edi
    0000043b: 	jl	.Ltmp657 # Offset: 1083
    0000043d: 	cmpq	%rdx, %rsi
    00000440: 	jbe	.Ltmp658 # Offset: 1088
    00000446: 	movl	(%rdx), %ecx
    00000448: 	cmpl	%ecx, %edi
    0000044a: 	jle	.Ltmp659 # Offset: 1098
    0000044c: 	leaq	0x4(%rdx), %rax
.Ltmp660:
    00000450: 	movq	%rax, %rdx
    00000453: 	movl	(%rax), %ecx
    00000455: 	leaq	0x4(%rax), %rax
    00000459: 	cmpl	%ecx, %edi
    0000045b: 	jg	.Ltmp660 # Offset: 1115
    0000045d: 	cmpq	%rdx, %rsi
    00000460: 	jbe	.Ltmp658 # Offset: 1120
.Ltmp659:
    00000466: 	movl	%ecx, (%rsi)
    00000468: 	movl	%r8d, (%rdx)
.Ltmp657:
    0000046b: 	movq	%rsi, %rbp
    0000046e: 	jmp	.Ltmp661 # Offset: 1134
.Ltmp642:
    00000470: 	movq	%r12, %rdx
    00000473: 	subq	%rbx, %rdx
    00000476: 	cmpq	$0x4, %rdx
    0000047a: 	jle	.Ltmp662 # Offset: 1146
    00000480: 	movl	(%rbx), %r9d
    00000483: 	movq	%r12, %r8
    00000486: 	movq	%rbx, %rsi
    00000489: 	nopl	(%rax) # Size: 7
.Ltmp667:
    00000490: 	leaq	-0x4(%r8), %rdi
    00000494: 	cmpl	%eax, %r9d
    00000497: 	jl	.Ltmp663 # Offset: 1175
    00000499: 	cmpq	%rsi, %rdi
    0000049c: 	jbe	.Ltmp664 # Offset: 1180
    000004a2: 	movl	(%rsi), %ecx
    000004a4: 	cmpl	%r9d, %ecx
    000004a7: 	jge	.Ltmp665 # Offset: 1191
    000004a9: 	leaq	0x4(%rsi), %rdx
    000004ad: 	nopl	(%rax) # Size: 3
.Ltmp666:
    000004b0: 	movq	%rdx, %rsi
    000004b3: 	movl	(%rdx), %ecx
    000004b5: 	leaq	0x4(%rdx), %rdx
    000004b9: 	cmpl	%ecx, %r9d
    000004bc: 	jg	.Ltmp666 # Offset: 1212
    000004be: 	cmpq	%rsi, %rdi
    000004c1: 	jbe	.Ltmp664 # Offset: 1217
.Ltmp665:
    000004c7: 	movl	%ecx, (%rdi)
    000004c9: 	movl	%eax, (%rsi)
.Ltmp663:
    000004cb: 	movl	-0x4(%rdi), %eax
    000004ce: 	movq	%rdi, %r8
    000004d1: 	jmp	.Ltmp667 # Offset: 1233
.Ltmp692:
    000004d3: 	leaq	0x40(%rsp), %rsi
    000004d8: 	leaq	0x50(%rsp), %rdi
    000004dd: 	movq	%r9, 0x48(%rsp)
    000004e2: 	movq	%r9, 0x30(%rsp)
    000004e7: 	movq	%rsi, 0x28(%rsp)
    000004ec: 	movq	%rdi, 0x20(%rsp)
    000004f1: 	movq	%r8, 0x58(%rsp)
    000004f6: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 1270
    000004fb: 	movq	0x30(%rsp), %r9
    00000500: 	movq	0x28(%rsp), %rsi
    00000505: 	movq	%r12, 0x48(%rsp)
    0000050a: 	movq	0x20(%rsp), %rdi
    0000050f: 	movq	%r9, 0x58(%rsp)
    00000514: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 1300
.Ltmp662:
    00000519: 	movq	%rbp, %rax
    0000051c: 	subq	%r12, %rax
    0000051f: 	cmpq	$0x4, %rax
    00000523: 	jle	.Ltmp640 # Offset: 1315
    00000529: 	movl	(%r12), %edi
    0000052d: 	movq	%rbp, %r8
    00000530: 	movq	%r12, %rdx
    00000533: 	nopl	(%rax,%rax) # Size: 5
.Ltmp672:
    00000538: 	movl	-0x4(%r8), %r9d
    0000053c: 	leaq	-0x4(%r8), %rsi
    00000540: 	cmpl	%r9d, %edi
    00000543: 	jl	.Ltmp668 # Offset: 1347
    00000545: 	cmpq	%rdx, %rsi
    00000548: 	jbe	.Ltmp669 # Offset: 1352
    0000054a: 	movl	(%rdx), %ecx
    0000054c: 	cmpl	%ecx, %edi
    0000054e: 	jle	.Ltmp670 # Offset: 1358
    00000550: 	leaq	0x4(%rdx), %rax
    00000554: 	nopl	(%rax) # Size: 4
.Ltmp671:
    00000558: 	movq	%rax, %rdx
    0000055b: 	movl	(%rax), %ecx
    0000055d: 	leaq	0x4(%rax), %rax
    00000561: 	cmpl	%ecx, %edi
    00000563: 	jg	.Ltmp671 # Offset: 1379
    00000565: 	cmpq	%rdx, %rsi
    00000568: 	jbe	.Ltmp669 # Offset: 1384
.Ltmp670:
    0000056a: 	movl	%ecx, (%rsi)
    0000056c: 	movl	%r9d, (%rdx)
.Ltmp668:
    0000056f: 	movq	%rsi, %r8
    00000572: 	jmp	.Ltmp672 # Offset: 1394
.Ltmp627:
    00000574: 	xorl	%eax, %eax
    00000576: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp673:
    00000580: 	movl	(%rdx,%rax), %ecx
    00000583: 	movl	%ecx, (%rbx,%rax)
    00000586: 	addq	$0x4, %rax
    0000058a: 	cmpq	%rax, %rdi
    0000058d: 	jne	.Ltmp673 # Offset: 1421
    0000058f: 	jmp	.Ltmp626 # Offset: 1423
.Ltmp669:
    00000594: 	movq	%r8, %rax
    00000597: 	subq	%r12, %rax
    0000059a: 	cmpq	$0x4, %rax
    0000059e: 	jle	.Ltmp674 # Offset: 1438
    000005a4: 	movl	(%r12), %edi
    000005a8: 	movq	%r8, %r9
    000005ab: 	movq	%r12, %rdx
    000005ae: 	nop # Size: 2
.Ltmp679:
    000005b0: 	movl	-0x4(%r9), %r10d
    000005b4: 	leaq	-0x4(%r9), %rsi
    000005b8: 	cmpl	%r10d, %edi
    000005bb: 	jl	.Ltmp675 # Offset: 1467
    000005bd: 	cmpq	%rdx, %rsi
    000005c0: 	jbe	.Ltmp676 # Offset: 1472
    000005c2: 	movl	(%rdx), %ecx
    000005c4: 	cmpl	%edi, %ecx
    000005c6: 	jge	.Ltmp677 # Offset: 1478
    000005c8: 	leaq	0x4(%rdx), %rax
    000005cc: 	nopl	(%rax) # Size: 4
.Ltmp678:
    000005d0: 	movq	%rax, %rdx
    000005d3: 	movl	(%rax), %ecx
    000005d5: 	leaq	0x4(%rax), %rax
    000005d9: 	cmpl	%ecx, %edi
    000005db: 	jg	.Ltmp678 # Offset: 1499
    000005dd: 	cmpq	%rdx, %rsi
    000005e0: 	jbe	.Ltmp676 # Offset: 1504
.Ltmp677:
    000005e2: 	movl	%ecx, (%rsi)
    000005e4: 	movl	%r10d, (%rdx)
.Ltmp675:
    000005e7: 	movq	%rsi, %r9
    000005ea: 	jmp	.Ltmp679 # Offset: 1514
.Ltmp676:
    000005ec: 	movq	%r12, 0x58(%rsp)
    000005f1: 	leaq	0x50(%rsp), %r12
    000005f6: 	leaq	0x40(%rsp), %rsi
    000005fb: 	movq	%r12, %rdi
    000005fe: 	movq	%r8, 0x20(%rsp)
    00000603: 	movq	%r9, 0x48(%rsp)
    00000608: 	movq	%r9, 0x30(%rsp)
    0000060d: 	movq	%rsi, 0x28(%rsp)
    00000612: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 1554
    00000617: 	movq	0x20(%rsp), %r8
    0000061c: 	movq	0x30(%rsp), %r9
    00000621: 	movq	%r12, %rdi
    00000624: 	movq	0x28(%rsp), %rsi
    00000629: 	movq	%r8, 0x48(%rsp)
    0000062e: 	movq	%r9, 0x58(%rsp)
    00000633: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 1587
    00000638: 	movq	0x20(%rsp), %r8
.Ltmp674:
    0000063d: 	movq	%rbp, %rax
    00000640: 	subq	%r8, %rax
    00000643: 	cmpq	$0x4, %rax
    00000647: 	jle	.Ltmp640 # Offset: 1607
    0000064d: 	movl	(%r8), %edi
    00000650: 	movq	%rbp, %r12
    00000653: 	movq	%r8, %rdx
    00000656: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp684:
    00000660: 	movl	-0x4(%r12), %r9d
    00000665: 	leaq	-0x4(%r12), %rsi
    0000066a: 	cmpl	%r9d, %edi
    0000066d: 	jl	.Ltmp680 # Offset: 1645
    0000066f: 	cmpq	%rdx, %rsi
    00000672: 	jbe	.Ltmp681 # Offset: 1650
    00000678: 	movl	(%rdx), %ecx
    0000067a: 	cmpl	%ecx, %edi
    0000067c: 	jle	.Ltmp682 # Offset: 1660
    0000067e: 	leaq	0x4(%rdx), %rax
    00000682: 	nopw	(%rax,%rax) # Size: 6
.Ltmp683:
    00000688: 	movq	%rax, %rdx
    0000068b: 	movl	(%rax), %ecx
    0000068d: 	leaq	0x4(%rax), %rax
    00000691: 	cmpl	%ecx, %edi
    00000693: 	jg	.Ltmp683 # Offset: 1683
    00000695: 	cmpq	%rdx, %rsi
    00000698: 	jbe	.Ltmp681 # Offset: 1688
.Ltmp682:
    0000069e: 	movl	%ecx, (%rsi)
    000006a0: 	movl	%r9d, (%rdx)
.Ltmp680:
    000006a3: 	movq	%rsi, %r12
    000006a6: 	jmp	.Ltmp684 # Offset: 1702
.Ltmp664:
    000006a8: 	movq	%r8, %rax
    000006ab: 	subq	%rbx, %rax
    000006ae: 	cmpq	$0x4, %rax
    000006b2: 	jle	.Ltmp685 # Offset: 1714
    000006b8: 	movl	(%rbx), %edi
    000006ba: 	movq	%r8, %r9
    000006bd: 	movq	%rbx, %rdx
.Ltmp690:
    000006c0: 	movl	-0x4(%r9), %r10d
    000006c4: 	leaq	-0x4(%r9), %rsi
    000006c8: 	cmpl	%r10d, %edi
    000006cb: 	jl	.Ltmp686 # Offset: 1739
    000006cd: 	cmpq	%rdx, %rsi
    000006d0: 	jbe	.Ltmp687 # Offset: 1744
    000006d2: 	movl	(%rdx), %ecx
    000006d4: 	cmpl	%ecx, %edi
    000006d6: 	jle	.Ltmp688 # Offset: 1750
    000006d8: 	leaq	0x4(%rdx), %rax
    000006dc: 	nopl	(%rax) # Size: 4
.Ltmp689:
    000006e0: 	movq	%rax, %rdx
    000006e3: 	movl	(%rax), %ecx
    000006e5: 	leaq	0x4(%rax), %rax
    000006e9: 	cmpl	%ecx, %edi
    000006eb: 	jg	.Ltmp689 # Offset: 1771
    000006ed: 	cmpq	%rdx, %rsi
    000006f0: 	jbe	.Ltmp687 # Offset: 1776
.Ltmp688:
    000006f2: 	movl	%ecx, (%rsi)
    000006f4: 	movl	%r10d, (%rdx)
.Ltmp686:
    000006f7: 	movq	%rsi, %r9
    000006fa: 	jmp	.Ltmp690 # Offset: 1786
.Ltmp687:
    000006fc: 	leaq	0x40(%rsp), %rsi
    00000701: 	leaq	0x50(%rsp), %rdi
    00000706: 	movq	%r8, 0x20(%rsp)
    0000070b: 	movq	%r9, 0x48(%rsp)
    00000710: 	movq	%r9, 0x38(%rsp)
    00000715: 	movq	%rsi, 0x30(%rsp)
    0000071a: 	movq	%rdi, 0x28(%rsp)
    0000071f: 	movq	%rbx, 0x58(%rsp)
    00000724: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 1828
    00000729: 	movq	0x20(%rsp), %r8
    0000072e: 	movq	0x38(%rsp), %r9
    00000733: 	movq	0x30(%rsp), %rsi
    00000738: 	movq	0x28(%rsp), %rdi
    0000073d: 	movq	%r8, 0x48(%rsp)
    00000742: 	movq	%r9, 0x58(%rsp)
    00000747: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 1863
    0000074c: 	movq	0x20(%rsp), %r8
.Ltmp685:
    00000751: 	movq	%r12, %rax
    00000754: 	subq	%r8, %rax
    00000757: 	cmpq	$0x4, %rax
    0000075b: 	jle	.Ltmp662 # Offset: 1883
    00000761: 	movl	(%r8), %edi
    00000764: 	movq	%r12, %r9
    00000767: 	movq	%r8, %rdx
    0000076a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp695:
    00000770: 	movl	-0x4(%r9), %r10d
    00000774: 	leaq	-0x4(%r9), %rsi
    00000778: 	cmpl	%r10d, %edi
    0000077b: 	jl	.Ltmp691 # Offset: 1915
    0000077d: 	cmpq	%rdx, %rsi
    00000780: 	jbe	.Ltmp692 # Offset: 1920
    00000786: 	movl	(%rdx), %ecx
    00000788: 	cmpl	%ecx, %edi
    0000078a: 	jle	.Ltmp693 # Offset: 1930
    0000078c: 	leaq	0x4(%rdx), %rax
.Ltmp694:
    00000790: 	movq	%rax, %rdx
    00000793: 	movl	(%rax), %ecx
    00000795: 	leaq	0x4(%rax), %rax
    00000799: 	cmpl	%ecx, %edi
    0000079b: 	jg	.Ltmp694 # Offset: 1947
    0000079d: 	cmpq	%rdx, %rsi
    000007a0: 	jbe	.Ltmp692 # Offset: 1952
.Ltmp693:
    000007a6: 	movl	%ecx, (%rsi)
    000007a8: 	movl	%r10d, (%rdx)
.Ltmp691:
    000007ab: 	movq	%rsi, %r9
    000007ae: 	jmp	.Ltmp695 # Offset: 1966
.Ltmp658:
    000007b0: 	movq	%rbp, %rax
    000007b3: 	subq	%r12, %rax
    000007b6: 	cmpq	$0x4, %rax
    000007ba: 	jle	.Ltmp696 # Offset: 1978
    000007c0: 	movl	(%r12), %edi
    000007c4: 	movq	%rbp, %r8
    000007c7: 	movq	%r12, %rdx
    000007ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp701:
    000007d0: 	movl	-0x4(%r8), %r9d
    000007d4: 	leaq	-0x4(%r8), %rsi
    000007d8: 	cmpl	%r9d, %edi
    000007db: 	jl	.Ltmp697 # Offset: 2011
    000007dd: 	cmpq	%rdx, %rsi
    000007e0: 	jbe	.Ltmp698 # Offset: 2016
    000007e2: 	movl	(%rdx), %ecx
    000007e4: 	cmpl	%edi, %ecx
    000007e6: 	jge	.Ltmp699 # Offset: 2022
    000007e8: 	leaq	0x4(%rdx), %rax
    000007ec: 	nopl	(%rax) # Size: 4
.Ltmp700:
    000007f0: 	movq	%rax, %rdx
    000007f3: 	movl	(%rax), %ecx
    000007f5: 	leaq	0x4(%rax), %rax
    000007f9: 	cmpl	%ecx, %edi
    000007fb: 	jg	.Ltmp700 # Offset: 2043
    000007fd: 	cmpq	%rdx, %rsi
    00000800: 	jbe	.Ltmp698 # Offset: 2048
.Ltmp699:
    00000802: 	movl	%ecx, (%rsi)
    00000804: 	movl	%r9d, (%rdx)
.Ltmp697:
    00000807: 	movq	%rsi, %r8
    0000080a: 	jmp	.Ltmp701 # Offset: 2058
.Ltmp698:
    0000080c: 	movq	%r12, 0x58(%rsp)
    00000811: 	leaq	0x50(%rsp), %r12
    00000816: 	leaq	0x40(%rsp), %rsi
    0000081b: 	movq	%r12, %rdi
    0000081e: 	movq	%r8, 0x48(%rsp)
    00000823: 	movq	%r8, 0x28(%rsp)
    00000828: 	movq	%rsi, 0x20(%rsp)
    0000082d: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 2093
    00000832: 	movq	0x28(%rsp), %r8
    00000837: 	movq	0x20(%rsp), %rsi
    0000083c: 	movq	%r12, %rdi
    0000083f: 	movq	%rbp, 0x48(%rsp)
    00000844: 	movq	%r8, 0x58(%rsp)
    00000849: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 2121
.Ltmp696:
    0000084e: 	movq	%r15, %rax
    00000851: 	subq	%rbp, %rax
    00000854: 	cmpq	$0x4, %rax
    00000858: 	jle	.Ltmp629 # Offset: 2136
    0000085e: 	movl	(%rbp), %edi
    00000861: 	movq	%r15, %r12
    00000864: 	movq	%rbp, %rdx
    00000867: 	nopw	(%rax,%rax) # Size: 9
.Ltmp706:
    00000870: 	movl	-0x4(%r12), %r8d
    00000875: 	leaq	-0x4(%r12), %rsi
    0000087a: 	cmpl	%r8d, %edi
    0000087d: 	jl	.Ltmp702 # Offset: 2173
    0000087f: 	cmpq	%rdx, %rsi
    00000882: 	jbe	.Ltmp703 # Offset: 2178
    00000888: 	movl	(%rdx), %ecx
    0000088a: 	cmpl	%edi, %ecx
    0000088c: 	jge	.Ltmp704 # Offset: 2188
    0000088e: 	leaq	0x4(%rdx), %rax
    00000892: 	nopw	(%rax,%rax) # Size: 6
.Ltmp705:
    00000898: 	movq	%rax, %rdx
    0000089b: 	movl	(%rax), %ecx
    0000089d: 	leaq	0x4(%rax), %rax
    000008a1: 	cmpl	%ecx, %edi
    000008a3: 	jg	.Ltmp705 # Offset: 2211
    000008a5: 	cmpq	%rdx, %rsi
    000008a8: 	jbe	.Ltmp703 # Offset: 2216
.Ltmp704:
    000008ae: 	movl	%ecx, (%rsi)
    000008b0: 	movl	%r8d, (%rdx)
.Ltmp702:
    000008b3: 	movq	%rsi, %r12
    000008b6: 	jmp	.Ltmp706 # Offset: 2230
.Ltmp653:
    000008b8: 	movq	%r8, %rax
    000008bb: 	subq	%rbp, %rax
    000008be: 	cmpq	$0x4, %rax
    000008c2: 	jle	.Ltmp707 # Offset: 2242
    000008c8: 	movl	(%rbp), %edi
    000008cb: 	movq	%r8, %r9
    000008ce: 	movq	%rbp, %rdx
    000008d1: 	nopl	(%rax) # Size: 7
.Ltmp712:
    000008d8: 	movl	-0x4(%r9), %r10d
    000008dc: 	leaq	-0x4(%r9), %rsi
    000008e0: 	cmpl	%r10d, %edi
    000008e3: 	jl	.Ltmp708 # Offset: 2275
    000008e5: 	cmpq	%rdx, %rsi
    000008e8: 	jbe	.Ltmp709 # Offset: 2280
    000008ea: 	movl	(%rdx), %ecx
    000008ec: 	cmpl	%ecx, %edi
    000008ee: 	jle	.Ltmp710 # Offset: 2286
    000008f0: 	leaq	0x4(%rdx), %rax
    000008f4: 	nopl	(%rax) # Size: 4
.Ltmp711:
    000008f8: 	movq	%rax, %rdx
    000008fb: 	movl	(%rax), %ecx
    000008fd: 	leaq	0x4(%rax), %rax
    00000901: 	cmpl	%ecx, %edi
    00000903: 	jg	.Ltmp711 # Offset: 2307
    00000905: 	cmpq	%rdx, %rsi
    00000908: 	jbe	.Ltmp709 # Offset: 2312
.Ltmp710:
    0000090a: 	movl	%ecx, (%rsi)
    0000090c: 	movl	%r10d, (%rdx)
.Ltmp708:
    0000090f: 	movq	%rsi, %r9
    00000912: 	jmp	.Ltmp712 # Offset: 2322
.Ltmp709:
    00000914: 	movq	%rbp, 0x58(%rsp)
    00000919: 	leaq	0x50(%rsp), %rbp
    0000091e: 	leaq	0x40(%rsp), %rsi
    00000923: 	movq	%rbp, %rdi
    00000926: 	movq	%r8, 0x20(%rsp)
    0000092b: 	movq	%r9, 0x48(%rsp)
    00000930: 	movq	%r9, 0x30(%rsp)
    00000935: 	movq	%rsi, 0x28(%rsp)
    0000093a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 2362
    0000093f: 	movq	0x20(%rsp), %r8
    00000944: 	movq	0x30(%rsp), %r9
    00000949: 	movq	%rbp, %rdi
    0000094c: 	movq	0x28(%rsp), %rsi
    00000951: 	movq	%r8, 0x48(%rsp)
    00000956: 	movq	%r9, 0x58(%rsp)
    0000095b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 2395
    00000960: 	movq	0x20(%rsp), %r8
.Ltmp707:
    00000965: 	movq	%r12, %rax
    00000968: 	subq	%r8, %rax
    0000096b: 	cmpq	$0x4, %rax
    0000096f: 	jle	.Ltmp651 # Offset: 2415
    00000975: 	movl	(%r8), %edi
    00000978: 	movq	%r12, %rbp
    0000097b: 	movq	%r8, %rdx
    0000097e: 	nop # Size: 2
.Ltmp717:
    00000980: 	movl	-0x4(%rbp), %r9d
    00000984: 	leaq	-0x4(%rbp), %rsi
    00000988: 	cmpl	%r9d, %edi
    0000098b: 	jl	.Ltmp713 # Offset: 2443
    0000098d: 	cmpq	%rdx, %rsi
    00000990: 	jbe	.Ltmp714 # Offset: 2448
    00000992: 	movl	(%rdx), %ecx
    00000994: 	cmpl	%ecx, %edi
    00000996: 	jle	.Ltmp715 # Offset: 2454
    00000998: 	leaq	0x4(%rdx), %rax
    0000099c: 	nopl	(%rax) # Size: 4
.Ltmp716:
    000009a0: 	movq	%rax, %rdx
    000009a3: 	movl	(%rax), %ecx
    000009a5: 	leaq	0x4(%rax), %rax
    000009a9: 	cmpl	%ecx, %edi
    000009ab: 	jg	.Ltmp716 # Offset: 2475
    000009ad: 	cmpq	%rdx, %rsi
    000009b0: 	jbe	.Ltmp714 # Offset: 2480
.Ltmp715:
    000009b2: 	movl	%ecx, (%rsi)
    000009b4: 	movl	%r9d, (%rdx)
.Ltmp713:
    000009b7: 	movq	%rsi, %rbp
    000009ba: 	jmp	.Ltmp717 # Offset: 2490
.Ltmp714:
    000009bc: 	leaq	0x40(%rsp), %r11
    000009c1: 	leaq	0x50(%rsp), %rcx
    000009c6: 	movq	%rbp, 0x48(%rsp)
    000009cb: 	movq	%r11, %rsi
    000009ce: 	movq	%rcx, %rdi
    000009d1: 	movq	%r8, 0x58(%rsp)
    000009d6: 	movq	%r11, 0x28(%rsp)
    000009db: 	movq	%rcx, 0x20(%rsp)
    000009e0: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 2528
    000009e5: 	movq	%r12, %rax
    000009e8: 	subq	%rbp, %rax
    000009eb: 	cmpq	$0x4, %rax
    000009ef: 	jle	.Ltmp651 # Offset: 2543
    000009f5: 	movl	(%rbp), %edi
    000009f8: 	movq	0x28(%rsp), %r11
    000009fd: 	movq	%r12, %r8
    00000a00: 	movq	%rbp, %rdx
    00000a03: 	movq	0x20(%rsp), %rcx
    00000a08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp722:
    00000a10: 	movl	-0x4(%r8), %r10d
    00000a14: 	leaq	-0x4(%r8), %r9
    00000a18: 	cmpl	%r10d, %edi
    00000a1b: 	jl	.Ltmp718 # Offset: 2587
    00000a1d: 	cmpq	%rdx, %r9
    00000a20: 	jbe	.Ltmp719 # Offset: 2592
    00000a26: 	movl	(%rdx), %esi
    00000a28: 	cmpl	%esi, %edi
    00000a2a: 	jle	.Ltmp720 # Offset: 2602
    00000a2c: 	leaq	0x4(%rdx), %rax
.Ltmp721:
    00000a30: 	movq	%rax, %rdx
    00000a33: 	movl	(%rax), %esi
    00000a35: 	leaq	0x4(%rax), %rax
    00000a39: 	cmpl	%esi, %edi
    00000a3b: 	jg	.Ltmp721 # Offset: 2619
    00000a3d: 	cmpq	%rdx, %r9
    00000a40: 	jbe	.Ltmp719 # Offset: 2624
.Ltmp720:
    00000a46: 	movl	%esi, (%r9)
    00000a49: 	movl	%r10d, (%rdx)
.Ltmp718:
    00000a4c: 	movq	%r9, %r8
    00000a4f: 	jmp	.Ltmp722 # Offset: 2639
.Ltmp639:
    00000a51: 	callq	__stack_chk_fail@PLT # Offset: 2641
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x67c0
  Size        : 0x643
  MaxSize     : 0x650
  Offset      : 0x67c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x4, %rax
    0000000e: 	jle	.Ltmp723 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movl	(%rdi), %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp728:
    00000030: 	movl	-0x4(%rbp), %edi
    00000033: 	leaq	-0x4(%rbp), %r8
    00000037: 	cmpl	%esi, %edi
    00000039: 	jg	.Ltmp724 # Offset: 57
    0000003b: 	cmpq	%rdx, %r8
    0000003e: 	jbe	.Ltmp725 # Offset: 62
    00000040: 	movl	(%rdx), %ecx
    00000042: 	cmpl	%ecx, %esi
    00000044: 	jle	.Ltmp726 # Offset: 68
    00000046: 	leaq	0x4(%rdx), %rax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp727:
    00000050: 	movq	%rax, %rdx
    00000053: 	movl	(%rax), %ecx
    00000055: 	leaq	0x4(%rax), %rax
    00000059: 	cmpl	%esi, %ecx
    0000005b: 	jl	.Ltmp727 # Offset: 91
    0000005d: 	cmpq	%rdx, %r8
    00000060: 	jbe	.Ltmp725 # Offset: 96
.Ltmp726:
    00000062: 	movl	%ecx, (%r8)
    00000065: 	movl	%edi, (%rdx)
.Ltmp724:
    00000067: 	movq	%r8, %rbp
    0000006a: 	jmp	.Ltmp728 # Offset: 106
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp725:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x4, %rax
    0000007a: 	jle	.Ltmp729 # Offset: 122
    0000007c: 	movl	(%r9), %esi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp734:
    00000088: 	leaq	-0x4(%r13), %r8
    0000008c: 	cmpl	%edi, %esi
    0000008e: 	jl	.Ltmp730 # Offset: 142
    00000090: 	cmpq	%rdx, %r8
    00000093: 	jbe	.Ltmp731 # Offset: 147
    00000095: 	movl	(%rdx), %ecx
    00000097: 	cmpl	%ecx, %esi
    00000099: 	jle	.Ltmp732 # Offset: 153
    0000009b: 	leaq	0x4(%rdx), %rax
    0000009f: 	nop # Size: 1
.Ltmp733:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movl	(%rax), %ecx
    000000a5: 	leaq	0x4(%rax), %rax
    000000a9: 	cmpl	%ecx, %esi
    000000ab: 	jg	.Ltmp733 # Offset: 171
    000000ad: 	cmpq	%rdx, %r8
    000000b0: 	jbe	.Ltmp731 # Offset: 176
.Ltmp732:
    000000b2: 	movl	%ecx, (%r8)
    000000b5: 	movl	%edi, (%rdx)
.Ltmp730:
    000000b7: 	movl	-0x4(%r8), %edi
    000000bb: 	movq	%r8, %r13
    000000be: 	jmp	.Ltmp734 # Offset: 190
.Ltmp731:
    000000c0: 	movq	%r13, %rax
    000000c3: 	subq	%r9, %rax
    000000c6: 	cmpq	$0x4, %rax
    000000ca: 	jg	.Ltmp735 # Offset: 202
.Ltmp771:
    000000d0: 	movq	%rbp, %rax
    000000d3: 	subq	%r13, %rax
    000000d6: 	cmpq	$0x4, %rax
    000000da: 	jg	.Ltmp736 # Offset: 218
.Ltmp729:
    000000e0: 	movq	%r12, %rax
    000000e3: 	subq	%rbp, %rax
    000000e6: 	cmpq	$0x4, %rax
    000000ea: 	jle	.Ltmp737 # Offset: 234
    000000ec: 	movl	(%rbp), %esi
    000000ef: 	movq	%r12, %r13
    000000f2: 	movq	%rbp, %rdx
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp742:
    000000f8: 	movl	-0x4(%r13), %edi
    000000fc: 	leaq	-0x4(%r13), %r8
    00000100: 	cmpl	%edi, %esi
    00000102: 	jl	.Ltmp738 # Offset: 258
    00000104: 	cmpq	%rdx, %r8
    00000107: 	jbe	.Ltmp739 # Offset: 263
    00000109: 	movl	(%rdx), %ecx
    0000010b: 	cmpl	%ecx, %esi
    0000010d: 	jle	.Ltmp740 # Offset: 269
    0000010f: 	leaq	0x4(%rdx), %rax
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp741:
    00000118: 	movq	%rax, %rdx
    0000011b: 	movl	(%rax), %ecx
    0000011d: 	leaq	0x4(%rax), %rax
    00000121: 	cmpl	%ecx, %esi
    00000123: 	jg	.Ltmp741 # Offset: 291
    00000125: 	cmpq	%rdx, %r8
    00000128: 	jbe	.Ltmp739 # Offset: 296
.Ltmp740:
    0000012a: 	movl	%ecx, (%r8)
    0000012d: 	movl	%edi, (%rdx)
.Ltmp738:
    0000012f: 	movq	%r8, %r13
    00000132: 	jmp	.Ltmp742 # Offset: 306
.Ltmp739:
    00000134: 	movq	%r13, %rax
    00000137: 	subq	%rbp, %rax
    0000013a: 	cmpq	$0x4, %rax
    0000013e: 	jg	.Ltmp743 # Offset: 318
.Ltmp794:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%r13, %rax
    00000146: 	cmpq	$0x4, %rax
    0000014a: 	jg	.Ltmp744 # Offset: 330
.Ltmp737:
    0000014c: 	popq	%rbx
    0000014d: 	popq	%rbp
    0000014e: 	popq	%r12
    00000150: 	popq	%r13
    00000152: 	popq	%r14
    00000154: 	retq # Offset: 340
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp723:
    00000158: 	retq # Offset: 344
.Ltmp744:
    00000159: 	movl	(%r13), %esi
    0000015d: 	movq	%r12, %rbp
    00000160: 	movq	%r13, %rdx
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp749:
    00000168: 	movl	-0x4(%rbp), %r8d
    0000016c: 	leaq	-0x4(%rbp), %rdi
    00000170: 	cmpl	%r8d, %esi
    00000173: 	jl	.Ltmp745 # Offset: 371
    00000175: 	cmpq	%rdx, %rdi
    00000178: 	jbe	.Ltmp746 # Offset: 376
    0000017e: 	movl	(%rdx), %ecx
    00000180: 	cmpl	%esi, %ecx
    00000182: 	jge	.Ltmp747 # Offset: 386
    00000184: 	leaq	0x4(%rdx), %rax
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp748:
    00000190: 	movq	%rax, %rdx
    00000193: 	movl	(%rax), %ecx
    00000195: 	leaq	0x4(%rax), %rax
    00000199: 	cmpl	%ecx, %esi
    0000019b: 	jg	.Ltmp748 # Offset: 411
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	jbe	.Ltmp746 # Offset: 416
.Ltmp747:
    000001a6: 	movl	%ecx, (%rdi)
    000001a8: 	movl	%r8d, (%rdx)
.Ltmp745:
    000001ab: 	movq	%rdi, %rbp
    000001ae: 	jmp	.Ltmp749 # Offset: 430
.Ltmp743:
    000001b0: 	movl	(%rbp), %esi
    000001b3: 	movq	%r13, %rbx
    000001b6: 	movq	%rbp, %rdx
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp754:
    000001c0: 	leaq	-0x4(%rbx), %r8
    000001c4: 	cmpl	%edi, %esi
    000001c6: 	jl	.Ltmp750 # Offset: 454
    000001c8: 	cmpq	%rdx, %r8
    000001cb: 	jbe	.Ltmp751 # Offset: 459
    000001d1: 	movl	(%rdx), %ecx
    000001d3: 	cmpl	%esi, %ecx
    000001d5: 	jge	.Ltmp752 # Offset: 469
    000001d7: 	leaq	0x4(%rdx), %rax
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp753:
    000001e0: 	movq	%rax, %rdx
    000001e3: 	movl	(%rax), %ecx
    000001e5: 	leaq	0x4(%rax), %rax
    000001e9: 	cmpl	%ecx, %esi
    000001eb: 	jg	.Ltmp753 # Offset: 491
    000001ed: 	cmpq	%rdx, %r8
    000001f0: 	jbe	.Ltmp751 # Offset: 496
.Ltmp752:
    000001f6: 	movl	%ecx, (%r8)
    000001f9: 	movl	%edi, (%rdx)
.Ltmp750:
    000001fb: 	movl	-0x4(%r8), %edi
    000001ff: 	movq	%r8, %rbx
    00000202: 	jmp	.Ltmp754 # Offset: 514
.Ltmp736:
    00000204: 	movl	(%r13), %esi
    00000208: 	movq	%rbp, %rbx
    0000020b: 	movq	%r13, %rdx
    0000020e: 	nop # Size: 2
.Ltmp759:
    00000210: 	movl	-0x4(%rbx), %r8d
    00000214: 	leaq	-0x4(%rbx), %rdi
    00000218: 	cmpl	%r8d, %esi
    0000021b: 	jl	.Ltmp755 # Offset: 539
    0000021d: 	cmpq	%rdx, %rdi
    00000220: 	jbe	.Ltmp756 # Offset: 544
    00000226: 	movl	(%rdx), %ecx
    00000228: 	cmpl	%ecx, %esi
    0000022a: 	jle	.Ltmp757 # Offset: 554
    0000022c: 	leaq	0x4(%rdx), %rax
.Ltmp758:
    00000230: 	movq	%rax, %rdx
    00000233: 	movl	(%rax), %ecx
    00000235: 	leaq	0x4(%rax), %rax
    00000239: 	cmpl	%ecx, %esi
    0000023b: 	jg	.Ltmp758 # Offset: 571
    0000023d: 	cmpq	%rdx, %rdi
    00000240: 	jbe	.Ltmp756 # Offset: 576
.Ltmp757:
    00000246: 	movl	%ecx, (%rdi)
    00000248: 	movl	%r8d, (%rdx)
.Ltmp755:
    0000024b: 	movq	%rdi, %rbx
    0000024e: 	jmp	.Ltmp759 # Offset: 590
.Ltmp735:
    00000250: 	movl	(%r9), %esi
    00000253: 	movq	%r13, %rbx
    00000256: 	movq	%r9, %rdx
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp764:
    00000260: 	leaq	-0x4(%rbx), %r8
    00000264: 	cmpl	%edi, %esi
    00000266: 	jl	.Ltmp760 # Offset: 614
    00000268: 	cmpq	%rdx, %r8
    0000026b: 	jbe	.Ltmp761 # Offset: 619
    0000026d: 	movl	(%rdx), %ecx
    0000026f: 	cmpl	%ecx, %esi
    00000271: 	jle	.Ltmp762 # Offset: 625
    00000273: 	leaq	0x4(%rdx), %rax
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp763:
    00000280: 	movq	%rax, %rdx
    00000283: 	movl	(%rax), %ecx
    00000285: 	leaq	0x4(%rax), %rax
    00000289: 	cmpl	%ecx, %esi
    0000028b: 	jg	.Ltmp763 # Offset: 651
    0000028d: 	cmpq	%rdx, %r8
    00000290: 	jbe	.Ltmp761 # Offset: 656
.Ltmp762:
    00000292: 	movl	%ecx, (%r8)
    00000295: 	movl	%edi, (%rdx)
.Ltmp760:
    00000297: 	movl	-0x4(%r8), %edi
    0000029b: 	movq	%r8, %rbx
    0000029e: 	jmp	.Ltmp764 # Offset: 670
.Ltmp761:
    000002a0: 	movq	%rbx, %rax
    000002a3: 	subq	%r9, %rax
    000002a6: 	cmpq	$0x4, %rax
    000002aa: 	jle	.Ltmp765 # Offset: 682
    000002ac: 	movl	(%r9), %esi
    000002af: 	movq	%rbx, %r14
    000002b2: 	movq	%r9, %rdx
    000002b5: 	nopl	(%rax) # Size: 3
.Ltmp770:
    000002b8: 	movl	-0x4(%r14), %r8d
    000002bc: 	leaq	-0x4(%r14), %rdi
    000002c0: 	cmpl	%r8d, %esi
    000002c3: 	jl	.Ltmp766 # Offset: 707
    000002c5: 	cmpq	%rdx, %rdi
    000002c8: 	jbe	.Ltmp767 # Offset: 712
    000002ca: 	movl	(%rdx), %ecx
    000002cc: 	cmpl	%ecx, %esi
    000002ce: 	jle	.Ltmp768 # Offset: 718
    000002d0: 	leaq	0x4(%rdx), %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp769:
    000002d8: 	movq	%rax, %rdx
    000002db: 	movl	(%rax), %ecx
    000002dd: 	leaq	0x4(%rax), %rax
    000002e1: 	cmpl	%ecx, %esi
    000002e3: 	jg	.Ltmp769 # Offset: 739
    000002e5: 	cmpq	%rdx, %rdi
    000002e8: 	jbe	.Ltmp767 # Offset: 744
.Ltmp768:
    000002ea: 	movl	%ecx, (%rdi)
    000002ec: 	movl	%r8d, (%rdx)
.Ltmp766:
    000002ef: 	movq	%rdi, %r14
    000002f2: 	jmp	.Ltmp770 # Offset: 754
.Ltmp767:
    000002f4: 	movq	%r14, %rsi
    000002f7: 	movq	%r9, %rdi
    000002fa: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 762
    000002ff: 	movq	%rbx, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 773
.Ltmp765:
    0000030a: 	movq	%r13, %rax
    0000030d: 	movq	%rbx, %r8
    00000310: 	subq	%rbx, %rax
    00000313: 	cmpq	$0x4, %rax
    00000317: 	jle	.Ltmp771 # Offset: 791
    0000031d: 	movl	(%rbx), %ecx
    0000031f: 	movq	%r13, %r14
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp776:
    00000328: 	movl	-0x4(%r14), %edi
    0000032c: 	leaq	-0x4(%r14), %rsi
    00000330: 	cmpl	%edi, %ecx
    00000332: 	jl	.Ltmp772 # Offset: 818
    00000334: 	cmpq	%rbx, %rsi
    00000337: 	jbe	.Ltmp773 # Offset: 823
    0000033d: 	movl	(%rbx), %edx
    0000033f: 	cmpl	%ecx, %edx
    00000341: 	jge	.Ltmp774 # Offset: 833
    00000343: 	leaq	0x4(%rbx), %rax
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp775:
    00000350: 	movq	%rax, %rbx
    00000353: 	movl	(%rax), %edx
    00000355: 	leaq	0x4(%rax), %rax
    00000359: 	cmpl	%edx, %ecx
    0000035b: 	jg	.Ltmp775 # Offset: 859
    0000035d: 	cmpq	%rbx, %rsi
    00000360: 	jbe	.Ltmp773 # Offset: 864
.Ltmp774:
    00000366: 	movl	%edx, (%rsi)
    00000368: 	movl	%edi, (%rbx)
.Ltmp772:
    0000036a: 	movq	%rsi, %r14
    0000036d: 	jmp	.Ltmp776 # Offset: 877
.Ltmp756:
    0000036f: 	movq	%rbx, %rax
    00000372: 	subq	%r13, %rax
    00000375: 	cmpq	$0x4, %rax
    00000379: 	jle	.Ltmp777 # Offset: 889
    0000037b: 	movl	(%r13), %esi
    0000037f: 	movq	%rbx, %r14
    00000382: 	movq	%r13, %rdx
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp782:
    00000388: 	movl	-0x4(%r14), %r8d
    0000038c: 	leaq	-0x4(%r14), %rdi
    00000390: 	cmpl	%r8d, %esi
    00000393: 	jl	.Ltmp778 # Offset: 915
    00000395: 	cmpq	%rdx, %rdi
    00000398: 	jbe	.Ltmp779 # Offset: 920
    0000039a: 	movl	(%rdx), %ecx
    0000039c: 	cmpl	%esi, %ecx
    0000039e: 	jge	.Ltmp780 # Offset: 926
    000003a0: 	leaq	0x4(%rdx), %rax
    000003a4: 	nopl	(%rax) # Size: 4
.Ltmp781:
    000003a8: 	movq	%rax, %rdx
    000003ab: 	movl	(%rax), %ecx
    000003ad: 	leaq	0x4(%rax), %rax
    000003b1: 	cmpl	%ecx, %esi
    000003b3: 	jg	.Ltmp781 # Offset: 947
    000003b5: 	cmpq	%rdx, %rdi
    000003b8: 	jbe	.Ltmp779 # Offset: 952
.Ltmp780:
    000003ba: 	movl	%ecx, (%rdi)
    000003bc: 	movl	%r8d, (%rdx)
.Ltmp778:
    000003bf: 	movq	%rdi, %r14
    000003c2: 	jmp	.Ltmp782 # Offset: 962
.Ltmp779:
    000003c4: 	movq	%r14, %rsi
    000003c7: 	movq	%r13, %rdi
    000003ca: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 970
    000003cf: 	movq	%rbx, %rsi
    000003d2: 	movq	%r14, %rdi
    000003d5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 981
.Ltmp777:
    000003da: 	movq	%rbp, %rax
    000003dd: 	movq	%rbx, %r8
    000003e0: 	subq	%rbx, %rax
    000003e3: 	cmpq	$0x4, %rax
    000003e7: 	jle	.Ltmp729 # Offset: 999
    000003ed: 	movl	(%rbx), %ecx
    000003ef: 	movq	%rbp, %r13
    000003f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp787:
    000003f8: 	movl	-0x4(%r13), %edi
    000003fc: 	leaq	-0x4(%r13), %rsi
    00000400: 	cmpl	%edi, %ecx
    00000402: 	jl	.Ltmp783 # Offset: 1026
    00000404: 	cmpq	%rbx, %rsi
    00000407: 	jbe	.Ltmp784 # Offset: 1031
    0000040d: 	movl	(%rbx), %edx
    0000040f: 	cmpl	%edx, %ecx
    00000411: 	jle	.Ltmp785 # Offset: 1041
    00000413: 	leaq	0x4(%rbx), %rax
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp786:
    00000420: 	movq	%rax, %rbx
    00000423: 	movl	(%rax), %edx
    00000425: 	leaq	0x4(%rax), %rax
    00000429: 	cmpl	%edx, %ecx
    0000042b: 	jg	.Ltmp786 # Offset: 1067
    0000042d: 	cmpq	%rbx, %rsi
    00000430: 	jbe	.Ltmp784 # Offset: 1072
.Ltmp785:
    00000436: 	movl	%edx, (%rsi)
    00000438: 	movl	%edi, (%rbx)
.Ltmp783:
    0000043a: 	movq	%rsi, %r13
    0000043d: 	jmp	.Ltmp787 # Offset: 1085
.Ltmp751:
    0000043f: 	movq	%rbx, %rax
    00000442: 	subq	%rbp, %rax
    00000445: 	cmpq	$0x4, %rax
    00000449: 	jle	.Ltmp788 # Offset: 1097
    0000044b: 	movl	(%rbp), %esi
    0000044e: 	movq	%rbx, %r14
    00000451: 	movq	%rbp, %rdx
    00000454: 	nopl	(%rax) # Size: 4
.Ltmp793:
    00000458: 	movl	-0x4(%r14), %r8d
    0000045c: 	leaq	-0x4(%r14), %rdi
    00000460: 	cmpl	%r8d, %esi
    00000463: 	jl	.Ltmp789 # Offset: 1123
    00000465: 	cmpq	%rdx, %rdi
    00000468: 	jbe	.Ltmp790 # Offset: 1128
    0000046a: 	movl	(%rdx), %ecx
    0000046c: 	cmpl	%esi, %ecx
    0000046e: 	jge	.Ltmp791 # Offset: 1134
    00000470: 	leaq	0x4(%rdx), %rax
    00000474: 	nopl	(%rax) # Size: 4
.Ltmp792:
    00000478: 	movq	%rax, %rdx
    0000047b: 	movl	(%rax), %ecx
    0000047d: 	leaq	0x4(%rax), %rax
    00000481: 	cmpl	%ecx, %esi
    00000483: 	jg	.Ltmp792 # Offset: 1155
    00000485: 	cmpq	%rdx, %rdi
    00000488: 	jbe	.Ltmp790 # Offset: 1160
.Ltmp791:
    0000048a: 	movl	%ecx, (%rdi)
    0000048c: 	movl	%r8d, (%rdx)
.Ltmp789:
    0000048f: 	movq	%rdi, %r14
    00000492: 	jmp	.Ltmp793 # Offset: 1170
.Ltmp790:
    00000494: 	movq	%r14, %rsi
    00000497: 	movq	%rbp, %rdi
    0000049a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1178
    0000049f: 	movq	%rbx, %rsi
    000004a2: 	movq	%r14, %rdi
    000004a5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1189
.Ltmp788:
    000004aa: 	movq	%r13, %rax
    000004ad: 	movq	%rbx, %r8
    000004b0: 	subq	%rbx, %rax
    000004b3: 	cmpq	$0x4, %rax
    000004b7: 	jle	.Ltmp794 # Offset: 1207
    000004bd: 	movl	(%rbx), %ecx
    000004bf: 	movq	%r13, %rbp
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp799:
    000004c8: 	movl	-0x4(%rbp), %edi
    000004cb: 	leaq	-0x4(%rbp), %rsi
    000004cf: 	cmpl	%edi, %ecx
    000004d1: 	jl	.Ltmp795 # Offset: 1233
    000004d3: 	cmpq	%rbx, %rsi
    000004d6: 	jbe	.Ltmp796 # Offset: 1238
    000004dc: 	movl	(%rbx), %edx
    000004de: 	cmpl	%edx, %ecx
    000004e0: 	jle	.Ltmp797 # Offset: 1248
    000004e2: 	leaq	0x4(%rbx), %rax
    000004e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp798:
    000004f0: 	movq	%rax, %rbx
    000004f3: 	movl	(%rax), %edx
    000004f5: 	leaq	0x4(%rax), %rax
    000004f9: 	cmpl	%edx, %ecx
    000004fb: 	jg	.Ltmp798 # Offset: 1275
    000004fd: 	cmpq	%rbx, %rsi
    00000500: 	jbe	.Ltmp796 # Offset: 1280
.Ltmp797:
    00000506: 	movl	%edx, (%rsi)
    00000508: 	movl	%edi, (%rbx)
.Ltmp795:
    0000050a: 	movq	%rsi, %rbp
    0000050d: 	jmp	.Ltmp799 # Offset: 1293
.Ltmp746:
    0000050f: 	movq	%rbp, %rax
    00000512: 	subq	%r13, %rax
    00000515: 	cmpq	$0x4, %rax
    00000519: 	jle	.Ltmp800 # Offset: 1305
    0000051b: 	movl	(%r13), %esi
    0000051f: 	movq	%rbp, %r14
    00000522: 	movq	%r13, %rdx
    00000525: 	nopl	(%rax) # Size: 3
.Ltmp805:
    00000528: 	movl	-0x4(%r14), %r8d
    0000052c: 	leaq	-0x4(%r14), %rdi
    00000530: 	cmpl	%r8d, %esi
    00000533: 	jl	.Ltmp801 # Offset: 1331
    00000535: 	cmpq	%rdx, %rdi
    00000538: 	jbe	.Ltmp802 # Offset: 1336
    0000053a: 	movl	(%rdx), %ecx
    0000053c: 	cmpl	%esi, %ecx
    0000053e: 	jge	.Ltmp803 # Offset: 1342
    00000540: 	leaq	0x4(%rdx), %rax
    00000544: 	nopl	(%rax) # Size: 4
.Ltmp804:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movl	(%rax), %ecx
    0000054d: 	leaq	0x4(%rax), %rax
    00000551: 	cmpl	%ecx, %esi
    00000553: 	jg	.Ltmp804 # Offset: 1363
    00000555: 	cmpq	%rdx, %rdi
    00000558: 	jbe	.Ltmp802 # Offset: 1368
.Ltmp803:
    0000055a: 	movl	%ecx, (%rdi)
    0000055c: 	movl	%r8d, (%rdx)
.Ltmp801:
    0000055f: 	movq	%rdi, %r14
    00000562: 	jmp	.Ltmp805 # Offset: 1378
.Ltmp802:
    00000564: 	movq	%r14, %rsi
    00000567: 	movq	%r13, %rdi
    0000056a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1386
    0000056f: 	movq	%rbp, %rsi
    00000572: 	movq	%r14, %rdi
    00000575: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1397
.Ltmp800:
    0000057a: 	movq	%r12, %rax
    0000057d: 	movq	%rbp, %r8
    00000580: 	subq	%rbp, %rax
    00000583: 	cmpq	$0x4, %rax
    00000587: 	jle	.Ltmp737 # Offset: 1415
    0000058d: 	movl	(%rbp), %ecx
    00000590: 	movq	%r12, %r13
    00000593: 	nopl	(%rax,%rax) # Size: 5
.Ltmp810:
    00000598: 	movl	-0x4(%r13), %edi
    0000059c: 	leaq	-0x4(%r13), %rsi
    000005a0: 	cmpl	%edi, %ecx
    000005a2: 	jl	.Ltmp806 # Offset: 1442
    000005a4: 	cmpq	%rbp, %rsi
    000005a7: 	jbe	.Ltmp807 # Offset: 1447
    000005a9: 	movl	(%rbp), %edx
    000005ac: 	cmpl	%ecx, %edx
    000005ae: 	jge	.Ltmp808 # Offset: 1454
    000005b0: 	leaq	0x4(%rbp), %rax
    000005b4: 	nopl	(%rax) # Size: 4
.Ltmp809:
    000005b8: 	movq	%rax, %rbp
    000005bb: 	movl	(%rax), %edx
    000005bd: 	leaq	0x4(%rax), %rax
    000005c1: 	cmpl	%edx, %ecx
    000005c3: 	jg	.Ltmp809 # Offset: 1475
    000005c5: 	cmpq	%rbp, %rsi
    000005c8: 	jbe	.Ltmp807 # Offset: 1480
.Ltmp808:
    000005ca: 	movl	%edx, (%rsi)
    000005cc: 	movl	%edi, (%rbp)
.Ltmp806:
    000005cf: 	movq	%rsi, %r13
    000005d2: 	jmp	.Ltmp810 # Offset: 1490
.Ltmp807:
    000005d4: 	movq	%r13, %rsi
    000005d7: 	movq	%r8, %rdi
    000005da: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1498
    000005df: 	popq	%rbx
    000005e0: 	movq	%r12, %rsi
    000005e3: 	popq	%rbp
    000005e4: 	movq	%r13, %rdi
    000005e7: 	popq	%r12
    000005e9: 	popq	%r13
    000005eb: 	popq	%r14
    000005ed: 	jmp	.LBB062 # Offset: 1517
.Ltmp796:
    000005f2: 	movq	%rbp, %rsi
    000005f5: 	movq	%r8, %rdi
    000005f8: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1528
    000005fd: 	movq	%r13, %rsi
    00000600: 	movq	%rbp, %rdi
    00000603: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1539
    00000608: 	jmp	.Ltmp794 # Offset: 1544
.Ltmp784:
    0000060d: 	movq	%r13, %rsi
    00000610: 	movq	%r8, %rdi
    00000613: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1555
    00000618: 	movq	%rbp, %rsi
    0000061b: 	movq	%r13, %rdi
    0000061e: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1566
    00000623: 	jmp	.Ltmp729 # Offset: 1571
.Ltmp773:
    00000628: 	movq	%r14, %rsi
    0000062b: 	movq	%r8, %rdi
    0000062e: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1582
    00000633: 	movq	%r13, %rsi
    00000636: 	movq	%r14, %rdi
    00000639: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 1593
    0000063e: 	jmp	.Ltmp771 # Offset: 1598
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_"

Binary Function "_ZNSt6vectorImSaImEE17_M_default_appendEm" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x6e10
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x6e10
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorImSaImEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp811 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp812 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp813 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp814 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp815 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp822:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp816 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp816:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp817 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp818 # Offset: 200
.Ltmp820:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp812:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp819 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp819:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp811:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp817:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp821:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp820 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp818:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp821 # Offset: 392
.Ltmp815:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp823:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp822 # Offset: 445
.Ltmp814:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp823 # Offset: 460
.Ltmp813:
    000001ce: 	leaq	DATAat0x151e4(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorImSaImEE17_M_default_appendEm"

Binary Function "_ZN9benchmark9quicksortIPmEEvT_S2_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x6ff0
  Size        : 0x43a
  MaxSize     : 0x440
  Offset      : 0x6ff0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPmEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x8, %rax
    00000020: 	jle	.Ltmp824 # Offset: 32
.Ltmp836:
    00000022: 	movq	(%rdi), %r8
    00000025: 	movq	(%rsp), %r13
    00000029: 	movq	%rdi, %rdx
.Ltmp829:
    0000002c: 	movq	-0x8(%r13), %rax
    00000030: 	leaq	-0x8(%r13), %rcx
    00000034: 	cmpq	%r8, %rax
    00000037: 	ja	.Ltmp825 # Offset: 55
    00000039: 	cmpq	%rcx, %rdx
    0000003c: 	jae	.Ltmp826 # Offset: 60
    0000003e: 	movq	(%rdx), %rsi
    00000041: 	cmpq	%rsi, %r8
    00000044: 	jbe	.Ltmp827 # Offset: 68
.Ltmp828:
    00000046: 	movq	0x8(%rdx), %rsi
    0000004a: 	addq	$0x8, %rdx
    0000004e: 	cmpq	%r8, %rsi
    00000051: 	jb	.Ltmp828 # Offset: 81
    00000053: 	cmpq	%rdx, %rcx
    00000056: 	jbe	.Ltmp826 # Offset: 86
.Ltmp827:
    00000058: 	movq	%rsi, (%rcx)
    0000005b: 	movq	%rax, (%rdx)
.Ltmp825:
    0000005e: 	movq	%rcx, %r13
    00000061: 	jmp	.Ltmp829 # Offset: 97
.Ltmp824:
    00000063: 	addq	$0x28, %rsp
    00000067: 	popq	%rbx
    00000068: 	popq	%rbp
    00000069: 	popq	%r12
    0000006b: 	popq	%r13
    0000006d: 	popq	%r14
    0000006f: 	popq	%r15
    00000071: 	retq # Offset: 113
.Ltmp826:
    00000072: 	movq	%r13, %rdx
    00000075: 	movq	%r13, %r8
    00000078: 	subq	%rdi, %rdx
    0000007b: 	cmpq	$0x8, %rdx
    0000007f: 	jle	.Ltmp830 # Offset: 127
.Ltmp888:
    00000081: 	movq	(%rdi), %r9
    00000084: 	movq	%r8, %r14
    00000087: 	movq	%rdi, %rdx
.Ltmp835:
    0000008a: 	leaq	-0x8(%r14), %rcx
    0000008e: 	cmpq	%rax, %r9
    00000091: 	jb	.Ltmp831 # Offset: 145
    00000093: 	cmpq	%rdx, %rcx
    00000096: 	jbe	.Ltmp832 # Offset: 150
    00000098: 	movq	(%rdx), %rsi
    0000009b: 	cmpq	%rsi, %r9
    0000009e: 	jbe	.Ltmp833 # Offset: 158
.Ltmp834:
    000000a0: 	movq	0x8(%rdx), %rsi
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	cmpq	%rsi, %r9
    000000ab: 	ja	.Ltmp834 # Offset: 171
    000000ad: 	cmpq	%rdx, %rcx
    000000b0: 	jbe	.Ltmp832 # Offset: 176
.Ltmp833:
    000000b2: 	movq	%rsi, (%rcx)
    000000b5: 	movq	%rax, (%rdx)
.Ltmp831:
    000000b8: 	movq	-0x8(%rcx), %rax
    000000bc: 	movq	%rcx, %r14
    000000bf: 	jmp	.Ltmp835 # Offset: 191
.Ltmp887:
    000000c1: 	movq	%r8, %r13
.Ltmp830:
    000000c4: 	movq	(%rsp), %rax
    000000c8: 	subq	%r13, %rax
    000000cb: 	cmpq	$0x8, %rax
    000000cf: 	jle	.Ltmp824 # Offset: 207
    000000d1: 	movq	%r13, %rdi
    000000d4: 	jmp	.Ltmp836 # Offset: 212
.Ltmp832:
    000000d9: 	movq	%r14, %rdx
    000000dc: 	subq	%rdi, %rdx
    000000df: 	cmpq	$0x8, %rdx
    000000e3: 	jle	.Ltmp837 # Offset: 227
    000000e9: 	movq	%r8, 0x8(%rsp)
    000000ee: 	movq	%r14, %rbx
.Ltmp890:
    000000f1: 	movq	(%rdi), %r9
    000000f4: 	movq	%rbx, %r15
    000000f7: 	movq	%rdi, %rdx
.Ltmp842:
    000000fa: 	leaq	-0x8(%r15), %rcx
    000000fe: 	cmpq	%r9, %rax
    00000101: 	ja	.Ltmp838 # Offset: 257
    00000103: 	cmpq	%rdx, %rcx
    00000106: 	jbe	.Ltmp839 # Offset: 262
    00000108: 	movq	(%rdx), %rsi
    0000010b: 	cmpq	%rsi, %r9
    0000010e: 	jbe	.Ltmp840 # Offset: 270
.Ltmp841:
    00000110: 	movq	0x8(%rdx), %rsi
    00000114: 	addq	$0x8, %rdx
    00000118: 	cmpq	%rsi, %r9
    0000011b: 	ja	.Ltmp841 # Offset: 283
    0000011d: 	cmpq	%rdx, %rcx
    00000120: 	jbe	.Ltmp839 # Offset: 288
.Ltmp840:
    00000122: 	movq	%rsi, (%rcx)
    00000125: 	movq	%rax, (%rdx)
.Ltmp838:
    00000128: 	movq	-0x8(%rcx), %rax
    0000012c: 	movq	%rcx, %r15
    0000012f: 	jmp	.Ltmp842 # Offset: 303
.Ltmp839:
    00000131: 	movq	%r15, %rdx
    00000134: 	subq	%rdi, %rdx
    00000137: 	cmpq	$0x8, %rdx
    0000013b: 	jle	.Ltmp843 # Offset: 315
    00000141: 	movq	%rbx, 0x10(%rsp)
    00000146: 	movq	%r15, %rbx
.Ltmp886:
    00000149: 	movq	(%rdi), %r9
    0000014c: 	movq	%rbx, %r14
    0000014f: 	movq	%rdi, %rdx
.Ltmp848:
    00000152: 	leaq	-0x8(%r14), %rcx
    00000156: 	cmpq	%rax, %r9
    00000159: 	jb	.Ltmp844 # Offset: 345
    0000015b: 	cmpq	%rdx, %rcx
    0000015e: 	jbe	.Ltmp845 # Offset: 350
    00000160: 	movq	(%rdx), %rsi
    00000163: 	cmpq	%rsi, %r9
    00000166: 	jbe	.Ltmp846 # Offset: 358
.Ltmp847:
    00000168: 	movq	0x8(%rdx), %rsi
    0000016c: 	addq	$0x8, %rdx
    00000170: 	cmpq	%rsi, %r9
    00000173: 	ja	.Ltmp847 # Offset: 371
    00000175: 	cmpq	%rdx, %rcx
    00000178: 	jbe	.Ltmp845 # Offset: 376
.Ltmp846:
    0000017a: 	movq	%rsi, (%rcx)
    0000017d: 	movq	%rax, (%rdx)
.Ltmp844:
    00000180: 	movq	-0x8(%rcx), %rax
    00000184: 	movq	%rcx, %r14
    00000187: 	jmp	.Ltmp848 # Offset: 391
.Ltmp845:
    00000189: 	movq	%r14, %rdx
    0000018c: 	subq	%rdi, %rdx
    0000018f: 	cmpq	$0x8, %rdx
    00000193: 	jle	.Ltmp849 # Offset: 403
    00000199: 	movq	%rbx, 0x18(%rsp)
    0000019e: 	movq	%r14, %rbx
.Ltmp884:
    000001a1: 	movq	(%rdi), %r9
    000001a4: 	movq	%rbx, %r14
    000001a7: 	movq	%rdi, %rdx
.Ltmp854:
    000001aa: 	leaq	-0x8(%r14), %rcx
    000001ae: 	cmpq	%rax, %r9
    000001b1: 	jb	.Ltmp850 # Offset: 433
    000001b3: 	cmpq	%rdx, %rcx
    000001b6: 	jbe	.Ltmp851 # Offset: 438
    000001b8: 	movq	(%rdx), %rsi
    000001bb: 	cmpq	%rsi, %r9
    000001be: 	jbe	.Ltmp852 # Offset: 446
.Ltmp853:
    000001c0: 	movq	0x8(%rdx), %rsi
    000001c4: 	addq	$0x8, %rdx
    000001c8: 	cmpq	%rsi, %r9
    000001cb: 	ja	.Ltmp853 # Offset: 459
    000001cd: 	cmpq	%rdx, %rcx
    000001d0: 	jbe	.Ltmp851 # Offset: 464
.Ltmp852:
    000001d2: 	movq	%rsi, (%rcx)
    000001d5: 	movq	%rax, (%rdx)
.Ltmp850:
    000001d8: 	movq	-0x8(%rcx), %rax
    000001dc: 	movq	%rcx, %r14
    000001df: 	jmp	.Ltmp854 # Offset: 479
.Ltmp851:
    000001e1: 	movq	%r14, %rdx
    000001e4: 	subq	%rdi, %rdx
    000001e7: 	cmpq	$0x8, %rdx
    000001eb: 	jle	.Ltmp855 # Offset: 491
.Ltmp882:
    000001f1: 	movq	(%rdi), %r8
    000001f4: 	movq	%r14, %r15
    000001f7: 	movq	%rdi, %rdx
.Ltmp860:
    000001fa: 	leaq	-0x8(%r15), %rcx
    000001fe: 	cmpq	%rax, %r8
    00000201: 	jb	.Ltmp856 # Offset: 513
    00000203: 	cmpq	%rdx, %rcx
    00000206: 	jbe	.Ltmp857 # Offset: 518
    00000208: 	movq	(%rdx), %rsi
    0000020b: 	cmpq	%rsi, %r8
    0000020e: 	jbe	.Ltmp858 # Offset: 526
.Ltmp859:
    00000210: 	movq	0x8(%rdx), %rsi
    00000214: 	addq	$0x8, %rdx
    00000218: 	cmpq	%rsi, %r8
    0000021b: 	ja	.Ltmp859 # Offset: 539
    0000021d: 	cmpq	%rdx, %rcx
    00000220: 	jbe	.Ltmp857 # Offset: 544
.Ltmp858:
    00000222: 	movq	%rsi, (%rcx)
    00000225: 	movq	%rax, (%rdx)
.Ltmp856:
    00000228: 	movq	-0x8(%rcx), %rax
    0000022c: 	movq	%rcx, %r15
    0000022f: 	jmp	.Ltmp860 # Offset: 559
.Ltmp857:
    00000231: 	movq	%r15, %rdx
    00000234: 	subq	%rdi, %rdx
    00000237: 	cmpq	$0x8, %rdx
    0000023b: 	jle	.Ltmp861 # Offset: 571
.Ltmp881:
    00000241: 	movq	(%rdi), %r8
    00000244: 	movq	%r15, %r12
    00000247: 	movq	%rdi, %rdx
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp879:
    00000250: 	leaq	-0x8(%r12), %rsi
    00000255: 	cmpq	%rax, %r8
    00000258: 	jb	.Ltmp862 # Offset: 600
    0000025e: 	cmpq	%rdx, %rsi
    00000261: 	jbe	.Ltmp863 # Offset: 609
    00000263: 	movq	(%rdx), %rcx
    00000266: 	cmpq	%rcx, %r8
    00000269: 	jbe	.Ltmp864 # Offset: 617
    0000026f: 	nop # Size: 1
.Ltmp865:
    00000270: 	movq	0x8(%rdx), %rcx
    00000274: 	addq	$0x8, %rdx
    00000278: 	cmpq	%rcx, %r8
    0000027b: 	ja	.Ltmp865 # Offset: 635
    0000027d: 	cmpq	%rdx, %rsi
    00000280: 	ja	.Ltmp864 # Offset: 640
.Ltmp863:
    00000286: 	movq	%r12, %rdx
    00000289: 	subq	%rdi, %rdx
    0000028c: 	cmpq	$0x8, %rdx
    00000290: 	jle	.Ltmp866 # Offset: 656
.Ltmp878:
    00000296: 	movq	(%rdi), %rsi
    00000299: 	movq	%r12, %rbp
    0000029c: 	movq	%rdi, %rdx
    0000029f: 	nop # Size: 1
.Ltmp877:
    000002a0: 	leaq	-0x8(%rbp), %rcx
    000002a4: 	cmpq	%rsi, %rax
    000002a7: 	ja	.Ltmp867 # Offset: 679
    000002ad: 	cmpq	%rdx, %rcx
    000002b0: 	jbe	.Ltmp868 # Offset: 688
    000002b2: 	movq	(%rdx), %r8
    000002b5: 	cmpq	%r8, %rsi
    000002b8: 	jbe	.Ltmp869 # Offset: 696
    000002be: 	nop # Size: 2
.Ltmp870:
    000002c0: 	movq	0x8(%rdx), %r8
    000002c4: 	addq	$0x8, %rdx
    000002c8: 	cmpq	%r8, %rsi
    000002cb: 	ja	.Ltmp870 # Offset: 715
    000002cd: 	cmpq	%rdx, %rcx
    000002d0: 	ja	.Ltmp869 # Offset: 720
.Ltmp868:
    000002d2: 	movq	%rbp, %rax
    000002d5: 	subq	%rdi, %rax
    000002d8: 	cmpq	$0x8, %rax
    000002dc: 	jle	.Ltmp871 # Offset: 732
.Ltmp876:
    000002de: 	movq	(%rdi), %rcx
    000002e1: 	movq	%rbp, %r13
    000002e4: 	movq	%rdi, %rax
    000002e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp880:
    000002f0: 	movq	-0x8(%r13), %r8
    000002f4: 	leaq	-0x8(%r13), %rsi
    000002f8: 	cmpq	%r8, %rcx
    000002fb: 	jb	.Ltmp872 # Offset: 763
    00000301: 	cmpq	%rax, %rsi
    00000304: 	jbe	.Ltmp873 # Offset: 772
    00000306: 	movq	(%rax), %rdx
    00000309: 	cmpq	%rdx, %rcx
    0000030c: 	jbe	.Ltmp874 # Offset: 780
    0000030e: 	nop # Size: 2
.Ltmp875:
    00000310: 	movq	0x8(%rax), %rdx
    00000314: 	addq	$0x8, %rax
    00000318: 	cmpq	%rdx, %rcx
    0000031b: 	ja	.Ltmp875 # Offset: 795
    0000031d: 	cmpq	%rax, %rsi
    00000320: 	ja	.Ltmp874 # Offset: 800
.Ltmp873:
    00000322: 	movq	%r13, %rsi
    00000325: 	callq	_ZN9benchmark9quicksortIPmEEvT_S2_ # Offset: 805
    0000032a: 	movq	%rbp, %rax
    0000032d: 	subq	%r13, %rax
    00000330: 	cmpq	$0x8, %rax
    00000334: 	jle	.Ltmp871 # Offset: 820
    00000336: 	movq	%r13, %rdi
    00000339: 	jmp	.Ltmp876 # Offset: 825
.Ltmp869:
    0000033b: 	movq	%r8, (%rcx)
    0000033e: 	movq	%rax, (%rdx)
.Ltmp867:
    00000341: 	movq	-0x8(%rcx), %rax
    00000345: 	movq	%rcx, %rbp
    00000348: 	jmp	.Ltmp877 # Offset: 840
.Ltmp871:
    0000034d: 	movq	%r12, %rax
    00000350: 	subq	%rbp, %rax
    00000353: 	cmpq	$0x8, %rax
    00000357: 	jle	.Ltmp866 # Offset: 855
    00000359: 	movq	-0x8(%r12), %rax
    0000035e: 	movq	%rbp, %rdi
    00000361: 	jmp	.Ltmp878 # Offset: 865
.Ltmp864:
    00000366: 	movq	%rcx, (%rsi)
    00000369: 	movq	%rax, (%rdx)
.Ltmp862:
    0000036c: 	movq	-0x8(%rsi), %rax
    00000370: 	movq	%rsi, %r12
    00000373: 	jmp	.Ltmp879 # Offset: 883
    00000378: 	nopl	(%rax,%rax) # Size: 8
.Ltmp874:
    00000380: 	movq	%rdx, (%rsi)
    00000383: 	movq	%r8, (%rax)
.Ltmp872:
    00000386: 	movq	%rsi, %r13
    00000389: 	jmp	.Ltmp880 # Offset: 905
.Ltmp866:
    0000038e: 	movq	%r15, %rax
    00000391: 	subq	%r12, %rax
    00000394: 	cmpq	$0x8, %rax
    00000398: 	jle	.Ltmp861 # Offset: 920
    0000039a: 	movq	-0x8(%r15), %rax
    0000039e: 	movq	%r12, %rdi
    000003a1: 	jmp	.Ltmp881 # Offset: 929
.Ltmp861:
    000003a6: 	movq	%r14, %rax
    000003a9: 	subq	%r15, %rax
    000003ac: 	cmpq	$0x8, %rax
    000003b0: 	jle	.Ltmp855 # Offset: 944
    000003b2: 	movq	-0x8(%r14), %rax
    000003b6: 	movq	%r15, %rdi
    000003b9: 	jmp	.Ltmp882 # Offset: 953
.Ltmp855:
    000003be: 	movq	%rbx, %rax
    000003c1: 	subq	%r14, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp883 # Offset: 968
    000003ca: 	movq	-0x8(%rbx), %rax
    000003ce: 	movq	%r14, %rdi
    000003d1: 	jmp	.Ltmp884 # Offset: 977
.Ltmp883:
    000003d6: 	movq	%rbx, %r14
    000003d9: 	movq	0x18(%rsp), %rbx
.Ltmp849:
    000003de: 	movq	%rbx, %rax
    000003e1: 	subq	%r14, %rax
    000003e4: 	cmpq	$0x8, %rax
    000003e8: 	jle	.Ltmp885 # Offset: 1000
    000003ea: 	movq	-0x8(%rbx), %rax
    000003ee: 	movq	%r14, %rdi
    000003f1: 	jmp	.Ltmp886 # Offset: 1009
.Ltmp889:
    000003f6: 	movq	0x8(%rsp), %r8
    000003fb: 	movq	%rbx, %r14
.Ltmp837:
    000003fe: 	movq	%r8, %rax
    00000401: 	subq	%r14, %rax
    00000404: 	cmpq	$0x8, %rax
    00000408: 	jle	.Ltmp887 # Offset: 1032
    0000040e: 	movq	-0x8(%r8), %rax
    00000412: 	movq	%r14, %rdi
    00000415: 	jmp	.Ltmp888 # Offset: 1045
.Ltmp885:
    0000041a: 	movq	%rbx, %r15
    0000041d: 	movq	0x10(%rsp), %rbx
.Ltmp843:
    00000422: 	movq	%rbx, %rax
    00000425: 	subq	%r15, %rax
    00000428: 	cmpq	$0x8, %rax
    0000042c: 	jle	.Ltmp889 # Offset: 1068
    0000042e: 	movq	-0x8(%rbx), %rax
    00000432: 	movq	%r15, %rdi
    00000435: 	jmp	.Ltmp890 # Offset: 1077
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPmEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x7430
  Size        : 0x6af
  MaxSize     : 0x6b0
  Offset      : 0x7430
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp891 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movq	(%rdi), %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp896:
    00000030: 	movq	-0x8(%rbp), %rdi
    00000034: 	leaq	-0x8(%rbp), %r8
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	ja	.Ltmp892 # Offset: 59
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	jbe	.Ltmp893 # Offset: 64
    00000042: 	movq	(%rdx), %rcx
    00000045: 	cmpq	%rcx, %rsi
    00000048: 	jbe	.Ltmp894 # Offset: 72
    0000004a: 	leaq	0x8(%rdx), %rax
    0000004e: 	nop # Size: 2
.Ltmp895:
    00000050: 	movq	%rax, %rdx
    00000053: 	movq	(%rax), %rcx
    00000056: 	leaq	0x8(%rax), %rax
    0000005a: 	cmpq	%rsi, %rcx
    0000005d: 	jb	.Ltmp895 # Offset: 93
    0000005f: 	cmpq	%rdx, %r8
    00000062: 	jbe	.Ltmp893 # Offset: 98
.Ltmp894:
    00000064: 	movq	%rcx, (%r8)
    00000067: 	movq	%rdi, (%rdx)
.Ltmp892:
    0000006a: 	movq	%r8, %rbp
    0000006d: 	jmp	.Ltmp896 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp893:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x8, %rax
    0000007a: 	jle	.Ltmp897 # Offset: 122
    0000007c: 	movq	(%r9), %rsi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp902:
    00000088: 	leaq	-0x8(%r13), %r8
    0000008c: 	cmpq	%rdi, %rsi
    0000008f: 	jb	.Ltmp898 # Offset: 143
    00000091: 	cmpq	%rdx, %r8
    00000094: 	jbe	.Ltmp899 # Offset: 148
    00000096: 	movq	(%rdx), %rcx
    00000099: 	cmpq	%rcx, %rsi
    0000009c: 	jbe	.Ltmp900 # Offset: 156
    0000009e: 	leaq	0x8(%rdx), %rax
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp901:
    000000a8: 	movq	%rax, %rdx
    000000ab: 	movq	(%rax), %rcx
    000000ae: 	leaq	0x8(%rax), %rax
    000000b2: 	cmpq	%rcx, %rsi
    000000b5: 	ja	.Ltmp901 # Offset: 181
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jbe	.Ltmp899 # Offset: 186
.Ltmp900:
    000000bc: 	movq	%rcx, (%r8)
    000000bf: 	movq	%rdi, (%rdx)
.Ltmp898:
    000000c2: 	movq	-0x8(%r8), %rdi
    000000c6: 	movq	%r8, %r13
    000000c9: 	jmp	.Ltmp902 # Offset: 201
.Ltmp899:
    000000cb: 	movq	%r13, %rax
    000000ce: 	subq	%r9, %rax
    000000d1: 	cmpq	$0x8, %rax
    000000d5: 	jg	.Ltmp903 # Offset: 213
.Ltmp939:
    000000db: 	movq	%rbp, %rax
    000000de: 	subq	%r13, %rax
    000000e1: 	cmpq	$0x8, %rax
    000000e5: 	jg	.Ltmp904 # Offset: 229
.Ltmp897:
    000000eb: 	movq	%r12, %rax
    000000ee: 	subq	%rbp, %rax
    000000f1: 	cmpq	$0x8, %rax
    000000f5: 	jle	.Ltmp905 # Offset: 245
    000000f7: 	movq	(%rbp), %rsi
    000000fb: 	movq	%r12, %r13
    000000fe: 	movq	%rbp, %rdx
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp910:
    00000108: 	movq	-0x8(%r13), %rdi
    0000010c: 	leaq	-0x8(%r13), %r8
    00000110: 	cmpq	%rdi, %rsi
    00000113: 	jb	.Ltmp906 # Offset: 275
    00000115: 	cmpq	%rdx, %r8
    00000118: 	jbe	.Ltmp907 # Offset: 280
    0000011a: 	movq	(%rdx), %rcx
    0000011d: 	cmpq	%rcx, %rsi
    00000120: 	jbe	.Ltmp908 # Offset: 288
    00000122: 	leaq	0x8(%rdx), %rax
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp909:
    00000130: 	movq	%rax, %rdx
    00000133: 	movq	(%rax), %rcx
    00000136: 	leaq	0x8(%rax), %rax
    0000013a: 	cmpq	%rcx, %rsi
    0000013d: 	ja	.Ltmp909 # Offset: 317
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jbe	.Ltmp907 # Offset: 322
.Ltmp908:
    00000144: 	movq	%rcx, (%r8)
    00000147: 	movq	%rdi, (%rdx)
.Ltmp906:
    0000014a: 	movq	%r8, %r13
    0000014d: 	jmp	.Ltmp910 # Offset: 333
.Ltmp907:
    0000014f: 	movq	%r13, %rax
    00000152: 	subq	%rbp, %rax
    00000155: 	cmpq	$0x8, %rax
    00000159: 	jg	.Ltmp911 # Offset: 345
.Ltmp962:
    0000015b: 	movq	%r12, %rax
    0000015e: 	subq	%r13, %rax
    00000161: 	cmpq	$0x8, %rax
    00000165: 	jg	.Ltmp912 # Offset: 357
.Ltmp905:
    00000167: 	popq	%rbx
    00000168: 	popq	%rbp
    00000169: 	popq	%r12
    0000016b: 	popq	%r13
    0000016d: 	popq	%r14
    0000016f: 	retq # Offset: 367
.Ltmp891:
    00000170: 	retq # Offset: 368
.Ltmp912:
    00000171: 	movq	(%r13), %rsi
    00000175: 	movq	%r12, %rbp
    00000178: 	movq	%r13, %rdx
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp917:
    00000180: 	movq	-0x8(%rbp), %r8
    00000184: 	leaq	-0x8(%rbp), %rdi
    00000188: 	cmpq	%r8, %rsi
    0000018b: 	jb	.Ltmp913 # Offset: 395
    0000018d: 	cmpq	%rdx, %rdi
    00000190: 	jbe	.Ltmp914 # Offset: 400
    00000196: 	movq	(%rdx), %rcx
    00000199: 	cmpq	%rsi, %rcx
    0000019c: 	jae	.Ltmp915 # Offset: 412
    0000019e: 	leaq	0x8(%rdx), %rax
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp916:
    000001a8: 	movq	%rax, %rdx
    000001ab: 	movq	(%rax), %rcx
    000001ae: 	leaq	0x8(%rax), %rax
    000001b2: 	cmpq	%rcx, %rsi
    000001b5: 	ja	.Ltmp916 # Offset: 437
    000001b7: 	cmpq	%rdx, %rdi
    000001ba: 	jbe	.Ltmp914 # Offset: 442
.Ltmp915:
    000001c0: 	movq	%rcx, (%rdi)
    000001c3: 	movq	%r8, (%rdx)
.Ltmp913:
    000001c6: 	movq	%rdi, %rbp
    000001c9: 	jmp	.Ltmp917 # Offset: 457
.Ltmp911:
    000001cb: 	movq	(%rbp), %rsi
    000001cf: 	movq	%r13, %rbx
    000001d2: 	movq	%rbp, %rdx
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp922:
    000001d8: 	leaq	-0x8(%rbx), %r8
    000001dc: 	cmpq	%rdi, %rsi
    000001df: 	jb	.Ltmp918 # Offset: 479
    000001e1: 	cmpq	%rdx, %r8
    000001e4: 	jbe	.Ltmp919 # Offset: 484
    000001ea: 	movq	(%rdx), %rcx
    000001ed: 	cmpq	%rsi, %rcx
    000001f0: 	jae	.Ltmp920 # Offset: 496
    000001f2: 	leaq	0x8(%rdx), %rax
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp921:
    00000200: 	movq	%rax, %rdx
    00000203: 	movq	(%rax), %rcx
    00000206: 	leaq	0x8(%rax), %rax
    0000020a: 	cmpq	%rcx, %rsi
    0000020d: 	ja	.Ltmp921 # Offset: 525
    0000020f: 	cmpq	%rdx, %r8
    00000212: 	jbe	.Ltmp919 # Offset: 530
.Ltmp920:
    00000218: 	movq	%rcx, (%r8)
    0000021b: 	movq	%rdi, (%rdx)
.Ltmp918:
    0000021e: 	movq	-0x8(%r8), %rdi
    00000222: 	movq	%r8, %rbx
    00000225: 	jmp	.Ltmp922 # Offset: 549
.Ltmp904:
    00000227: 	movq	(%r13), %rsi
    0000022b: 	movq	%rbp, %rbx
    0000022e: 	movq	%r13, %rdx
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp927:
    00000238: 	movq	-0x8(%rbx), %r8
    0000023c: 	leaq	-0x8(%rbx), %rdi
    00000240: 	cmpq	%r8, %rsi
    00000243: 	jb	.Ltmp923 # Offset: 579
    00000245: 	cmpq	%rdx, %rdi
    00000248: 	jbe	.Ltmp924 # Offset: 584
    0000024e: 	movq	(%rdx), %rcx
    00000251: 	cmpq	%rcx, %rsi
    00000254: 	jbe	.Ltmp925 # Offset: 596
    00000256: 	leaq	0x8(%rdx), %rax
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp926:
    00000260: 	movq	%rax, %rdx
    00000263: 	movq	(%rax), %rcx
    00000266: 	leaq	0x8(%rax), %rax
    0000026a: 	cmpq	%rcx, %rsi
    0000026d: 	ja	.Ltmp926 # Offset: 621
    0000026f: 	cmpq	%rdx, %rdi
    00000272: 	jbe	.Ltmp924 # Offset: 626
.Ltmp925:
    00000278: 	movq	%rcx, (%rdi)
    0000027b: 	movq	%r8, (%rdx)
.Ltmp923:
    0000027e: 	movq	%rdi, %rbx
    00000281: 	jmp	.Ltmp927 # Offset: 641
.Ltmp903:
    00000283: 	movq	(%r9), %rsi
    00000286: 	movq	%r13, %rbx
    00000289: 	movq	%r9, %rdx
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp932:
    00000290: 	leaq	-0x8(%rbx), %r8
    00000294: 	cmpq	%rdi, %rsi
    00000297: 	jb	.Ltmp928 # Offset: 663
    00000299: 	cmpq	%rdx, %r8
    0000029c: 	jbe	.Ltmp929 # Offset: 668
    0000029e: 	movq	(%rdx), %rcx
    000002a1: 	cmpq	%rcx, %rsi
    000002a4: 	jbe	.Ltmp930 # Offset: 676
    000002a6: 	leaq	0x8(%rdx), %rax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp931:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movq	(%rax), %rcx
    000002b6: 	leaq	0x8(%rax), %rax
    000002ba: 	cmpq	%rcx, %rsi
    000002bd: 	ja	.Ltmp931 # Offset: 701
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	jbe	.Ltmp929 # Offset: 706
.Ltmp930:
    000002c4: 	movq	%rcx, (%r8)
    000002c7: 	movq	%rdi, (%rdx)
.Ltmp928:
    000002ca: 	movq	-0x8(%r8), %rdi
    000002ce: 	movq	%r8, %rbx
    000002d1: 	jmp	.Ltmp932 # Offset: 721
.Ltmp929:
    000002d3: 	movq	%rbx, %rax
    000002d6: 	subq	%r9, %rax
    000002d9: 	cmpq	$0x8, %rax
    000002dd: 	jle	.Ltmp933 # Offset: 733
    000002df: 	movq	(%r9), %rsi
    000002e2: 	movq	%rbx, %r14
    000002e5: 	movq	%r9, %rdx
    000002e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp938:
    000002f0: 	movq	-0x8(%r14), %r8
    000002f4: 	leaq	-0x8(%r14), %rdi
    000002f8: 	cmpq	%r8, %rsi
    000002fb: 	jb	.Ltmp934 # Offset: 763
    000002fd: 	cmpq	%rdx, %rdi
    00000300: 	jbe	.Ltmp935 # Offset: 768
    00000302: 	movq	(%rdx), %rcx
    00000305: 	cmpq	%rcx, %rsi
    00000308: 	jbe	.Ltmp936 # Offset: 776
    0000030a: 	leaq	0x8(%rdx), %rax
    0000030e: 	nop # Size: 2
.Ltmp937:
    00000310: 	movq	%rax, %rdx
    00000313: 	movq	(%rax), %rcx
    00000316: 	leaq	0x8(%rax), %rax
    0000031a: 	cmpq	%rcx, %rsi
    0000031d: 	ja	.Ltmp937 # Offset: 797
    0000031f: 	cmpq	%rdx, %rdi
    00000322: 	jbe	.Ltmp935 # Offset: 802
.Ltmp936:
    00000324: 	movq	%rcx, (%rdi)
    00000327: 	movq	%r8, (%rdx)
.Ltmp934:
    0000032a: 	movq	%rdi, %r14
    0000032d: 	jmp	.Ltmp938 # Offset: 813
.Ltmp935:
    0000032f: 	movq	%r14, %rsi
    00000332: 	movq	%r9, %rdi
    00000335: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 821
    0000033a: 	movq	%rbx, %rsi
    0000033d: 	movq	%r14, %rdi
    00000340: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 832
.Ltmp933:
    00000345: 	movq	%r13, %rax
    00000348: 	movq	%rbx, %r8
    0000034b: 	subq	%rbx, %rax
    0000034e: 	cmpq	$0x8, %rax
    00000352: 	jle	.Ltmp939 # Offset: 850
    00000358: 	movq	(%rbx), %rcx
    0000035b: 	movq	%r13, %r14
    0000035e: 	nop # Size: 2
.Ltmp944:
    00000360: 	movq	-0x8(%r14), %rdi
    00000364: 	leaq	-0x8(%r14), %rsi
    00000368: 	cmpq	%rdi, %rcx
    0000036b: 	jb	.Ltmp940 # Offset: 875
    0000036d: 	cmpq	%rbx, %rsi
    00000370: 	jbe	.Ltmp941 # Offset: 880
    00000376: 	movq	(%rbx), %rdx
    00000379: 	cmpq	%rcx, %rdx
    0000037c: 	jae	.Ltmp942 # Offset: 892
    0000037e: 	leaq	0x8(%rbx), %rax
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp943:
    00000388: 	movq	%rax, %rbx
    0000038b: 	movq	(%rax), %rdx
    0000038e: 	leaq	0x8(%rax), %rax
    00000392: 	cmpq	%rdx, %rcx
    00000395: 	ja	.Ltmp943 # Offset: 917
    00000397: 	cmpq	%rbx, %rsi
    0000039a: 	jbe	.Ltmp941 # Offset: 922
.Ltmp942:
    000003a0: 	movq	%rdx, (%rsi)
    000003a3: 	movq	%rdi, (%rbx)
.Ltmp940:
    000003a6: 	movq	%rsi, %r14
    000003a9: 	jmp	.Ltmp944 # Offset: 937
.Ltmp924:
    000003ab: 	movq	%rbx, %rax
    000003ae: 	subq	%r13, %rax
    000003b1: 	cmpq	$0x8, %rax
    000003b5: 	jle	.Ltmp945 # Offset: 949
    000003b7: 	movq	(%r13), %rsi
    000003bb: 	movq	%rbx, %r14
    000003be: 	movq	%r13, %rdx
    000003c1: 	nopl	(%rax) # Size: 7
.Ltmp950:
    000003c8: 	movq	-0x8(%r14), %r8
    000003cc: 	leaq	-0x8(%r14), %rdi
    000003d0: 	cmpq	%r8, %rsi
    000003d3: 	jb	.Ltmp946 # Offset: 979
    000003d5: 	cmpq	%rdx, %rdi
    000003d8: 	jbe	.Ltmp947 # Offset: 984
    000003da: 	movq	(%rdx), %rcx
    000003dd: 	cmpq	%rsi, %rcx
    000003e0: 	jae	.Ltmp948 # Offset: 992
    000003e2: 	leaq	0x8(%rdx), %rax
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp949:
    000003f0: 	movq	%rax, %rdx
    000003f3: 	movq	(%rax), %rcx
    000003f6: 	leaq	0x8(%rax), %rax
    000003fa: 	cmpq	%rcx, %rsi
    000003fd: 	ja	.Ltmp949 # Offset: 1021
    000003ff: 	cmpq	%rdx, %rdi
    00000402: 	jbe	.Ltmp947 # Offset: 1026
.Ltmp948:
    00000404: 	movq	%rcx, (%rdi)
    00000407: 	movq	%r8, (%rdx)
.Ltmp946:
    0000040a: 	movq	%rdi, %r14
    0000040d: 	jmp	.Ltmp950 # Offset: 1037
.Ltmp947:
    0000040f: 	movq	%r14, %rsi
    00000412: 	movq	%r13, %rdi
    00000415: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1045
    0000041a: 	movq	%rbx, %rsi
    0000041d: 	movq	%r14, %rdi
    00000420: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1056
.Ltmp945:
    00000425: 	movq	%rbp, %rax
    00000428: 	movq	%rbx, %r8
    0000042b: 	subq	%rbx, %rax
    0000042e: 	cmpq	$0x8, %rax
    00000432: 	jle	.Ltmp897 # Offset: 1074
    00000438: 	movq	(%rbx), %rcx
    0000043b: 	movq	%rbp, %r13
    0000043e: 	nop # Size: 2
.Ltmp955:
    00000440: 	movq	-0x8(%r13), %rdi
    00000444: 	leaq	-0x8(%r13), %rsi
    00000448: 	cmpq	%rdi, %rcx
    0000044b: 	jb	.Ltmp951 # Offset: 1099
    0000044d: 	cmpq	%rbx, %rsi
    00000450: 	jbe	.Ltmp952 # Offset: 1104
    00000456: 	movq	(%rbx), %rdx
    00000459: 	cmpq	%rdx, %rcx
    0000045c: 	jbe	.Ltmp953 # Offset: 1116
    0000045e: 	leaq	0x8(%rbx), %rax
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp954:
    00000468: 	movq	%rax, %rbx
    0000046b: 	movq	(%rax), %rdx
    0000046e: 	leaq	0x8(%rax), %rax
    00000472: 	cmpq	%rdx, %rcx
    00000475: 	ja	.Ltmp954 # Offset: 1141
    00000477: 	cmpq	%rbx, %rsi
    0000047a: 	jbe	.Ltmp952 # Offset: 1146
.Ltmp953:
    00000480: 	movq	%rdx, (%rsi)
    00000483: 	movq	%rdi, (%rbx)
.Ltmp951:
    00000486: 	movq	%rsi, %r13
    00000489: 	jmp	.Ltmp955 # Offset: 1161
.Ltmp919:
    0000048b: 	movq	%rbx, %rax
    0000048e: 	subq	%rbp, %rax
    00000491: 	cmpq	$0x8, %rax
    00000495: 	jle	.Ltmp956 # Offset: 1173
    00000497: 	movq	(%rbp), %rsi
    0000049b: 	movq	%rbx, %r14
    0000049e: 	movq	%rbp, %rdx
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp961:
    000004a8: 	movq	-0x8(%r14), %r8
    000004ac: 	leaq	-0x8(%r14), %rdi
    000004b0: 	cmpq	%r8, %rsi
    000004b3: 	jb	.Ltmp957 # Offset: 1203
    000004b5: 	cmpq	%rdx, %rdi
    000004b8: 	jbe	.Ltmp958 # Offset: 1208
    000004ba: 	movq	(%rdx), %rcx
    000004bd: 	cmpq	%rsi, %rcx
    000004c0: 	jae	.Ltmp959 # Offset: 1216
    000004c2: 	leaq	0x8(%rdx), %rax
    000004c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp960:
    000004d0: 	movq	%rax, %rdx
    000004d3: 	movq	(%rax), %rcx
    000004d6: 	leaq	0x8(%rax), %rax
    000004da: 	cmpq	%rcx, %rsi
    000004dd: 	ja	.Ltmp960 # Offset: 1245
    000004df: 	cmpq	%rdx, %rdi
    000004e2: 	jbe	.Ltmp958 # Offset: 1250
.Ltmp959:
    000004e4: 	movq	%rcx, (%rdi)
    000004e7: 	movq	%r8, (%rdx)
.Ltmp957:
    000004ea: 	movq	%rdi, %r14
    000004ed: 	jmp	.Ltmp961 # Offset: 1261
.Ltmp958:
    000004ef: 	movq	%r14, %rsi
    000004f2: 	movq	%rbp, %rdi
    000004f5: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1269
    000004fa: 	movq	%rbx, %rsi
    000004fd: 	movq	%r14, %rdi
    00000500: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1280
.Ltmp956:
    00000505: 	movq	%r13, %rax
    00000508: 	movq	%rbx, %r8
    0000050b: 	subq	%rbx, %rax
    0000050e: 	cmpq	$0x8, %rax
    00000512: 	jle	.Ltmp962 # Offset: 1298
    00000518: 	movq	(%rbx), %rcx
    0000051b: 	movq	%r13, %rbp
    0000051e: 	nop # Size: 2
.Ltmp967:
    00000520: 	movq	-0x8(%rbp), %rdi
    00000524: 	leaq	-0x8(%rbp), %rsi
    00000528: 	cmpq	%rdi, %rcx
    0000052b: 	jb	.Ltmp963 # Offset: 1323
    0000052d: 	cmpq	%rbx, %rsi
    00000530: 	jbe	.Ltmp964 # Offset: 1328
    00000536: 	movq	(%rbx), %rdx
    00000539: 	cmpq	%rdx, %rcx
    0000053c: 	jbe	.Ltmp965 # Offset: 1340
    0000053e: 	leaq	0x8(%rbx), %rax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp966:
    00000548: 	movq	%rax, %rbx
    0000054b: 	movq	(%rax), %rdx
    0000054e: 	leaq	0x8(%rax), %rax
    00000552: 	cmpq	%rdx, %rcx
    00000555: 	ja	.Ltmp966 # Offset: 1365
    00000557: 	cmpq	%rbx, %rsi
    0000055a: 	jbe	.Ltmp964 # Offset: 1370
.Ltmp965:
    00000560: 	movq	%rdx, (%rsi)
    00000563: 	movq	%rdi, (%rbx)
.Ltmp963:
    00000566: 	movq	%rsi, %rbp
    00000569: 	jmp	.Ltmp967 # Offset: 1385
.Ltmp914:
    0000056b: 	movq	%rbp, %rax
    0000056e: 	subq	%r13, %rax
    00000571: 	cmpq	$0x8, %rax
    00000575: 	jle	.Ltmp968 # Offset: 1397
    00000577: 	movq	(%r13), %rsi
    0000057b: 	movq	%rbp, %r14
    0000057e: 	movq	%r13, %rdx
    00000581: 	nopl	(%rax) # Size: 7
.Ltmp973:
    00000588: 	movq	-0x8(%r14), %r8
    0000058c: 	leaq	-0x8(%r14), %rdi
    00000590: 	cmpq	%r8, %rsi
    00000593: 	jb	.Ltmp969 # Offset: 1427
    00000595: 	cmpq	%rdx, %rdi
    00000598: 	jbe	.Ltmp970 # Offset: 1432
    0000059a: 	movq	(%rdx), %rcx
    0000059d: 	cmpq	%rsi, %rcx
    000005a0: 	jae	.Ltmp971 # Offset: 1440
    000005a2: 	leaq	0x8(%rdx), %rax
    000005a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp972:
    000005b0: 	movq	%rax, %rdx
    000005b3: 	movq	(%rax), %rcx
    000005b6: 	leaq	0x8(%rax), %rax
    000005ba: 	cmpq	%rcx, %rsi
    000005bd: 	ja	.Ltmp972 # Offset: 1469
    000005bf: 	cmpq	%rdx, %rdi
    000005c2: 	jbe	.Ltmp970 # Offset: 1474
.Ltmp971:
    000005c4: 	movq	%rcx, (%rdi)
    000005c7: 	movq	%r8, (%rdx)
.Ltmp969:
    000005ca: 	movq	%rdi, %r14
    000005cd: 	jmp	.Ltmp973 # Offset: 1485
.Ltmp970:
    000005cf: 	movq	%r14, %rsi
    000005d2: 	movq	%r13, %rdi
    000005d5: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1493
    000005da: 	movq	%rbp, %rsi
    000005dd: 	movq	%r14, %rdi
    000005e0: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1504
.Ltmp968:
    000005e5: 	movq	%r12, %rax
    000005e8: 	movq	%rbp, %r8
    000005eb: 	subq	%rbp, %rax
    000005ee: 	cmpq	$0x8, %rax
    000005f2: 	jle	.Ltmp905 # Offset: 1522
    000005f8: 	movq	(%rbp), %rcx
    000005fc: 	movq	%r12, %r13
    000005ff: 	nop # Size: 1
.Ltmp978:
    00000600: 	movq	-0x8(%r13), %rdi
    00000604: 	leaq	-0x8(%r13), %rsi
    00000608: 	cmpq	%rdi, %rcx
    0000060b: 	jb	.Ltmp974 # Offset: 1547
    0000060d: 	cmpq	%rbp, %rsi
    00000610: 	jbe	.Ltmp975 # Offset: 1552
    00000612: 	movq	(%rbp), %rdx
    00000616: 	cmpq	%rcx, %rdx
    00000619: 	jae	.Ltmp976 # Offset: 1561
    0000061b: 	leaq	0x8(%rbp), %rax
    0000061f: 	nop # Size: 1
.Ltmp977:
    00000620: 	movq	%rax, %rbp
    00000623: 	movq	(%rax), %rdx
    00000626: 	leaq	0x8(%rax), %rax
    0000062a: 	cmpq	%rdx, %rcx
    0000062d: 	ja	.Ltmp977 # Offset: 1581
    0000062f: 	cmpq	%rbp, %rsi
    00000632: 	jbe	.Ltmp975 # Offset: 1586
.Ltmp976:
    00000634: 	movq	%rdx, (%rsi)
    00000637: 	movq	%rdi, (%rbp)
.Ltmp974:
    0000063b: 	movq	%rsi, %r13
    0000063e: 	jmp	.Ltmp978 # Offset: 1598
.Ltmp975:
    00000640: 	movq	%r13, %rsi
    00000643: 	movq	%r8, %rdi
    00000646: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1606
    0000064b: 	popq	%rbx
    0000064c: 	movq	%r12, %rsi
    0000064f: 	popq	%rbp
    00000650: 	movq	%r13, %rdi
    00000653: 	popq	%r12
    00000655: 	popq	%r13
    00000657: 	popq	%r14
    00000659: 	jmp	.LBB065 # Offset: 1625
.Ltmp964:
    0000065e: 	movq	%rbp, %rsi
    00000661: 	movq	%r8, %rdi
    00000664: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1636
    00000669: 	movq	%r13, %rsi
    0000066c: 	movq	%rbp, %rdi
    0000066f: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1647
    00000674: 	jmp	.Ltmp962 # Offset: 1652
.Ltmp952:
    00000679: 	movq	%r13, %rsi
    0000067c: 	movq	%r8, %rdi
    0000067f: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1663
    00000684: 	movq	%rbp, %rsi
    00000687: 	movq	%r13, %rdi
    0000068a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1674
    0000068f: 	jmp	.Ltmp897 # Offset: 1679
.Ltmp941:
    00000694: 	movq	%r14, %rsi
    00000697: 	movq	%r8, %rdi
    0000069a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1690
    0000069f: 	movq	%r13, %rsi
    000006a2: 	movq	%r14, %rdi
    000006a5: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 1701
    000006aa: 	jmp	.Ltmp939 # Offset: 1706
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_"

Binary Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x7ae0
  Size        : 0xd2
  MaxSize     : 0xe0
  Offset      : 0x7ae0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x38, %rsp
    0000000e: 	movq	0x8(%rsi), %rbp
    00000012: 	movq	0x8(%rdi), %r9
    00000016: 	movq	%fs:0x28, %rax
    0000001f: 	movq	%rax, 0x28(%rsp)
    00000024: 	xorl	%eax, %eax
    00000026: 	movq	%rbp, %rax
    00000029: 	subq	%r9, %rax
    0000002c: 	cmpq	$0x8, %rax
    00000030: 	jle	.Ltmp979 # Offset: 48
    00000036: 	movq	(%r9), %rsi
    00000039: 	movq	%rbp, %rbx
    0000003c: 	movq	%r9, %rdx
    0000003f: 	nop # Size: 1
.Ltmp984:
    00000040: 	movq	-0x8(%rbx), %r8
    00000044: 	leaq	-0x8(%rbx), %rdi
    00000048: 	cmpq	%rsi, %r8
    0000004b: 	ja	.Ltmp980 # Offset: 75
    0000004d: 	cmpq	%rdx, %rdi
    00000050: 	jbe	.Ltmp981 # Offset: 80
    00000052: 	movq	(%rdx), %rcx
    00000055: 	cmpq	%rcx, %rsi
    00000058: 	jbe	.Ltmp982 # Offset: 88
    0000005a: 	leaq	0x8(%rdx), %rax
    0000005e: 	nop # Size: 2
.Ltmp983:
    00000060: 	movq	%rax, %rdx
    00000063: 	movq	(%rax), %rcx
    00000066: 	leaq	0x8(%rax), %rax
    0000006a: 	cmpq	%rsi, %rcx
    0000006d: 	jb	.Ltmp983 # Offset: 109
    0000006f: 	cmpq	%rdx, %rdi
    00000072: 	jbe	.Ltmp981 # Offset: 114
.Ltmp982:
    00000074: 	movq	%rcx, (%rdi)
    00000077: 	movq	%r8, (%rdx)
.Ltmp980:
    0000007a: 	movq	%rdi, %rbx
    0000007d: 	jmp	.Ltmp984 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp981:
    00000080: 	movq	%rsp, %r12
    00000083: 	leaq	0x10(%rsp), %r13
    00000088: 	movq	%rbx, 0x8(%rsp)
    0000008d: 	movq	%r12, %rsi
    00000090: 	movq	%r13, %rdi
    00000093: 	movq	%r9, 0x18(%rsp)
    00000098: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 152
    0000009d: 	movq	%r13, %rsi
    000000a0: 	movq	%r12, %rdi
    000000a3: 	movq	%rbp, 0x18(%rsp)
    000000a8: 	movq	%rbx, 0x8(%rsp)
    000000ad: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 173
.Ltmp979:
    000000b2: 	movq	0x28(%rsp), %rax
    000000b7: 	subq	%fs:0x28, %rax
    000000c0: 	jne	.Ltmp985 # Offset: 192
    000000c2: 	addq	$0x38, %rsp
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	popq	%r12
    000000ca: 	popq	%r13
    000000cc: 	retq # Offset: 204
.Ltmp985:
    000000cd: 	callq	__stack_chk_fail@PLT # Offset: 205
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x7bc0
  Size        : 0xda
  MaxSize     : 0xe0
  Offset      : 0x7bc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x38, %rsp
    0000000e: 	movq	0x8(%rsi), %rbx
    00000012: 	movq	0x8(%rdi), %rdx
    00000016: 	movq	%fs:0x28, %rax
    0000001f: 	movq	%rax, 0x28(%rsp)
    00000024: 	xorl	%eax, %eax
    00000026: 	movq	%rbx, %rax
    00000029: 	subq	%rdx, %rax
    0000002c: 	cmpq	$0x8, %rax
    00000030: 	jle	.Ltmp986 # Offset: 48
    00000036: 	movq	%rsi, %rbp
    00000039: 	movq	(%rdx), %rsi
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp991:
    00000040: 	movq	-0x8(%rbx), %r9
    00000044: 	leaq	-0x8(%rbx), %r8
    00000048: 	cmpq	%rsi, %r9
    0000004b: 	ja	.Ltmp987 # Offset: 75
    0000004d: 	cmpq	%rdx, %r8
    00000050: 	jbe	.Ltmp988 # Offset: 80
    00000052: 	movq	(%rdx), %rcx
    00000055: 	cmpq	%rcx, %rsi
    00000058: 	jbe	.Ltmp989 # Offset: 88
    0000005a: 	leaq	0x8(%rdx), %rax
    0000005e: 	nop # Size: 2
.Ltmp990:
    00000060: 	movq	%rax, %rdx
    00000063: 	movq	(%rax), %rcx
    00000066: 	leaq	0x8(%rax), %rax
    0000006a: 	cmpq	%rsi, %rcx
    0000006d: 	jb	.Ltmp990 # Offset: 109
    0000006f: 	cmpq	%rdx, %r8
    00000072: 	jbe	.Ltmp988 # Offset: 114
.Ltmp989:
    00000074: 	movq	%rcx, (%r8)
    00000077: 	movq	%r9, (%rdx)
.Ltmp987:
    0000007a: 	movq	%r8, %rbx
    0000007d: 	jmp	.Ltmp991 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp988:
    00000080: 	movq	0x8(%rdi), %rax
    00000084: 	movq	%rsp, %r12
    00000087: 	leaq	0x10(%rsp), %r13
    0000008c: 	movq	%rbx, 0x8(%rsp)
    00000091: 	movq	%r12, %rsi
    00000094: 	movq	%r13, %rdi
    00000097: 	movq	%rax, 0x18(%rsp)
    0000009c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 156
    000000a1: 	movq	0x8(%rbp), %rax
    000000a5: 	movq	%r13, %rsi
    000000a8: 	movq	%r12, %rdi
    000000ab: 	movq	%rbx, 0x8(%rsp)
    000000b0: 	movq	%rax, 0x18(%rsp)
    000000b5: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 181
.Ltmp986:
    000000ba: 	movq	0x28(%rsp), %rax
    000000bf: 	subq	%fs:0x28, %rax
    000000c8: 	jne	.Ltmp992 # Offset: 200
    000000ca: 	addq	$0x38, %rsp
    000000ce: 	popq	%rbx
    000000cf: 	popq	%rbp
    000000d0: 	popq	%r12
    000000d2: 	popq	%r13
    000000d4: 	retq # Offset: 212
.Ltmp992:
    000000d5: 	callq	__stack_chk_fail@PLT # Offset: 213
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_"

Binary Function "_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_vector.cpp/1
  Number      : 69
  State       : disassembled
  Address     : 0x7ca0
  Size        : 0xac0
  MaxSize     : 0xac0
  Offset      : 0x7ca0
  Section     : .text
  Orc Section : .local.text._Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	pushq	%r15
    00000002: 	xorl	%r15d, %r15d
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x88, %rsp
    00000017: 	movq	%rcx, 0x18(%rsp)
    0000001c: 	movq	%rsi, 0x8(%rsp)
    00000021: 	movq	%rdx, 0x10(%rsp)
    00000026: 	movq	%r8, 0x20(%rsp)
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x78(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movl	iterations(%rip), %ecx
    00000046: 	movq	%rax, start_time(%rip)
    0000004d: 	testl	%ecx, %ecx
    0000004f: 	jle	.Ltmp993 # Offset: 79
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1006:
    00000058: 	movq	0x10(%rsp), %rax
    0000005d: 	movq	0x8(%r13), %rdx
    00000061: 	movq	0x8(%rax), %rbx
    00000065: 	movq	0x8(%rsp), %rax
    0000006a: 	movq	0x8(%rax), %rsi
    0000006e: 	cmpq	%rdx, %rsi
    00000071: 	je	.Ltmp994 # Offset: 113
    00000073: 	subq	%rdx, %rsi
    00000076: 	leaq	0x8(%rdx), %rax
    0000007a: 	leaq	-0x8(%rsi), %rdi
    0000007e: 	cmpq	%rax, %rbx
    00000081: 	je	.Ltmp995 # Offset: 129
    00000087: 	cmpq	$0x10, %rdi
    0000008b: 	jbe	.Ltmp995 # Offset: 139
    00000091: 	shrq	$0x3, %rdi
    00000095: 	xorl	%eax, %eax
    00000097: 	addq	$0x1, %rdi
    0000009b: 	movq	%rdi, %rsi
    0000009e: 	shrq	%rsi
    000000a1: 	shlq	$0x4, %rsi
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp996:
    000000a8: 	movdqu	(%rdx,%rax), %xmm1
    000000ad: 	movups	%xmm1, (%rbx,%rax)
    000000b1: 	addq	$0x10, %rax
    000000b5: 	cmpq	%rax, %rsi
    000000b8: 	jne	.Ltmp996 # Offset: 184
    000000ba: 	movq	%rdi, %rax
    000000bd: 	andq	$-0x2, %rax
    000000c1: 	leaq	(,%rax,8), %rsi
    000000c9: 	addq	%rsi, %rdx
    000000cc: 	addq	%rbx, %rsi
    000000cf: 	cmpq	%rdi, %rax
    000000d2: 	je	.Ltmp994 # Offset: 210
    000000d4: 	movq	(%rdx), %rax
    000000d7: 	movq	%rax, (%rsi)
.Ltmp994:
    000000da: 	movq	0x18(%rsp), %rax
    000000df: 	movq	0x8(%rax), %r14
    000000e3: 	movq	%r14, %rax
    000000e6: 	subq	%rbx, %rax
    000000e9: 	cmpq	$0x8, %rax
    000000ed: 	jle	.Ltmp997 # Offset: 237
    000000f3: 	movq	(%rbx), %r8
    000000f6: 	movq	%r14, %rbp
    000000f9: 	movq	%rbx, %rsi
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1002:
    00000100: 	movq	-0x8(%rbp), %rax
    00000104: 	leaq	-0x8(%rbp), %r9
    00000108: 	cmpq	%rax, %r8
    0000010b: 	jb	.Ltmp998 # Offset: 267
    0000010d: 	cmpq	%rsi, %r9
    00000110: 	jbe	.Ltmp999 # Offset: 272
    00000116: 	movq	(%rsi), %rdi
    00000119: 	cmpq	%rdi, %r8
    0000011c: 	jbe	.Ltmp1000 # Offset: 284
    0000011e: 	leaq	0x8(%rsi), %rdx
    00000122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1001:
    00000128: 	movq	%rdx, %rsi
    0000012b: 	movq	(%rdx), %rdi
    0000012e: 	leaq	0x8(%rdx), %rdx
    00000132: 	cmpq	%rdi, %r8
    00000135: 	ja	.Ltmp1001 # Offset: 309
    00000137: 	cmpq	%rsi, %r9
    0000013a: 	jbe	.Ltmp999 # Offset: 314
.Ltmp1000:
    00000140: 	movq	%rdi, (%r9)
    00000143: 	movq	%rax, (%rsi)
.Ltmp998:
    00000146: 	movq	%r9, %rbp
    00000149: 	jmp	.Ltmp1002 # Offset: 329
.Ltmp1087:
    0000014b: 	movq	%r10, %rsi
    0000014e: 	movq	%r11, %rdi
    00000151: 	movl	%ecx, 0x38(%rsp)
    00000155: 	movq	%r10, 0x30(%rsp)
    0000015a: 	movq	%r11, 0x28(%rsp)
    0000015f: 	movq	%rbp, 0x58(%rsp)
    00000164: 	movq	%r12, 0x68(%rsp)
    00000169: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 361
    0000016e: 	movq	0x30(%rsp), %rsi
    00000173: 	movq	0x28(%rsp), %rdi
    00000178: 	movq	%r14, 0x58(%rsp)
    0000017d: 	movq	%rbp, 0x68(%rsp)
    00000182: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 386
    00000187: 	movl	0x38(%rsp), %ecx
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp997:
    00000190: 	addq	$0x8, %rbx
    00000194: 	jmp	.Ltmp1003 # Offset: 404
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1005:
    000001a0: 	addq	$0x8, %rbx
    000001a4: 	movq	-0x10(%rbx), %rdi
    000001a8: 	cmpq	%rdi, (%rax)
    000001ab: 	jb	.Ltmp1004 # Offset: 427
.Ltmp1003:
    000001b1: 	movq	%rbx, %rax
    000001b4: 	cmpq	%rbx, %r14
    000001b7: 	jne	.Ltmp1005 # Offset: 439
    000001b9: 	addl	$0x1, %r15d
    000001bd: 	cmpl	%ecx, %r15d
    000001c0: 	jl	.Ltmp1006 # Offset: 448
.Ltmp993:
    000001c6: 	callq	clock@PLT # Offset: 454
    000001cb: 	movq	%rax, end_time(%rip)
    000001d2: 	movq	0x78(%rsp), %rdx
    000001d7: 	subq	%fs:0x28, %rdx
    000001e0: 	jne	.Ltmp1007 # Offset: 480
    000001e6: 	subq	start_time(%rip), %rax
    000001ed: 	pxor	%xmm0, %xmm0
    000001f1: 	movq	0x20(%rsp), %rdi
    000001f6: 	cvtsi2sd	%rax, %xmm0
    000001fb: 	divsd	DATAat0x15638(%rip), %xmm0
    00000203: 	addq	$0x88, %rsp
    0000020a: 	popq	%rbx
    0000020b: 	popq	%rbp
    0000020c: 	popq	%r12
    0000020e: 	popq	%r13
    00000210: 	popq	%r14
    00000212: 	popq	%r15
    00000214: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp999:
    00000220: 	movq	%rbp, %rdx
    00000223: 	subq	%rbx, %rdx
    00000226: 	cmpq	$0x8, %rdx
    0000022a: 	jle	.Ltmp1008 # Offset: 554
    00000230: 	movq	(%rbx), %r8
    00000233: 	movq	%rbp, %r12
    00000236: 	movq	%rbx, %rsi
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp1013:
    00000240: 	leaq	-0x8(%r12), %r9
    00000245: 	cmpq	%rax, %r8
    00000248: 	jb	.Ltmp1009 # Offset: 584
    0000024a: 	cmpq	%rsi, %r9
    0000024d: 	jbe	.Ltmp1010 # Offset: 589
    00000253: 	movq	(%rsi), %rdi
    00000256: 	cmpq	%rdi, %r8
    00000259: 	jbe	.Ltmp1011 # Offset: 601
    0000025b: 	leaq	0x8(%rsi), %rdx
    0000025f: 	nop # Size: 1
.Ltmp1012:
    00000260: 	movq	%rdx, %rsi
    00000263: 	movq	(%rdx), %rdi
    00000266: 	leaq	0x8(%rdx), %rdx
    0000026a: 	cmpq	%rdi, %r8
    0000026d: 	ja	.Ltmp1012 # Offset: 621
    0000026f: 	cmpq	%rsi, %r9
    00000272: 	jbe	.Ltmp1010 # Offset: 626
.Ltmp1011:
    00000278: 	movq	%rdi, (%r9)
    0000027b: 	movq	%rax, (%rsi)
.Ltmp1009:
    0000027e: 	movq	-0x8(%r9), %rax
    00000282: 	movq	%r9, %r12
    00000285: 	jmp	.Ltmp1013 # Offset: 645
.Ltmp1049:
    00000287: 	leaq	0x50(%rsp), %rsi
    0000028c: 	leaq	0x60(%rsp), %rdi
    00000291: 	movl	%ecx, 0x38(%rsp)
    00000295: 	movq	%r8, 0x68(%rsp)
    0000029a: 	movq	%rsi, 0x30(%rsp)
    0000029f: 	movq	%rdi, 0x28(%rsp)
    000002a4: 	movq	%r12, 0x58(%rsp)
    000002a9: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 681
    000002ae: 	movq	0x30(%rsp), %rsi
    000002b3: 	movq	0x28(%rsp), %rdi
    000002b8: 	movq	%rbp, 0x58(%rsp)
    000002bd: 	movq	%r12, 0x68(%rsp)
    000002c2: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 706
    000002c7: 	movl	0x38(%rsp), %ecx
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1008:
    000002d0: 	movq	%r14, %rax
    000002d3: 	subq	%rbp, %rax
    000002d6: 	cmpq	$0x8, %rax
    000002da: 	jle	.Ltmp997 # Offset: 730
    000002e0: 	movq	(%rbp), %r8
    000002e4: 	movq	%r14, %r12
    000002e7: 	movq	%rbp, %rdx
    000002ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1018:
    000002f0: 	movq	-0x8(%r12), %rdi
    000002f5: 	leaq	-0x8(%r12), %r9
    000002fa: 	cmpq	%rdi, %r8
    000002fd: 	jb	.Ltmp1014 # Offset: 765
    000002ff: 	cmpq	%rdx, %r9
    00000302: 	jbe	.Ltmp1015 # Offset: 770
    00000304: 	movq	(%rdx), %rsi
    00000307: 	cmpq	%r8, %rsi
    0000030a: 	jae	.Ltmp1016 # Offset: 778
    0000030c: 	leaq	0x8(%rdx), %rax
.Ltmp1017:
    00000310: 	movq	%rax, %rdx
    00000313: 	movq	(%rax), %rsi
    00000316: 	leaq	0x8(%rax), %rax
    0000031a: 	cmpq	%rsi, %r8
    0000031d: 	ja	.Ltmp1017 # Offset: 797
    0000031f: 	cmpq	%rdx, %r9
    00000322: 	jbe	.Ltmp1015 # Offset: 802
.Ltmp1016:
    00000324: 	movq	%rsi, (%r9)
    00000327: 	movq	%rdi, (%rdx)
.Ltmp1014:
    0000032a: 	movq	%r9, %r12
    0000032d: 	jmp	.Ltmp1018 # Offset: 813
    0000032f: 	nop # Size: 1
.Ltmp1004:
    00000330: 	movq	0x20(%rsp), %rax
    00000335: 	leaq	DATAat0x151ba(%rip), %rsi
    0000033c: 	movl	$0x1, %edi
    00000341: 	addl	$0x1, %r15d
    00000345: 	movq	(%rax), %rdx
    00000348: 	xorl	%eax, %eax
    0000034a: 	callq	__printf_chk@PLT # Offset: 842
    0000034f: 	movl	iterations(%rip), %ecx
    00000355: 	cmpl	%ecx, %r15d
    00000358: 	jl	.Ltmp1006 # Offset: 856
    0000035e: 	jmp	.Ltmp993 # Offset: 862
.Ltmp1015:
    00000363: 	movq	%r12, %rax
    00000366: 	subq	%rbp, %rax
    00000369: 	cmpq	$0x8, %rax
    0000036d: 	jle	.Ltmp1019 # Offset: 877
    00000373: 	movq	(%rbp), %r9
    00000377: 	movq	%r12, %r8
    0000037a: 	movq	%rbp, %rdx
    0000037d: 	nopl	(%rax) # Size: 3
.Ltmp1024:
    00000380: 	leaq	-0x8(%r8), %r10
    00000384: 	cmpq	%r9, %rdi
    00000387: 	ja	.Ltmp1020 # Offset: 903
    00000389: 	cmpq	%rdx, %r10
    0000038c: 	jbe	.Ltmp1021 # Offset: 908
    00000392: 	movq	(%rdx), %rsi
    00000395: 	cmpq	%r9, %rsi
    00000398: 	jae	.Ltmp1022 # Offset: 920
    0000039a: 	leaq	0x8(%rdx), %rax
    0000039e: 	nop # Size: 2
.Ltmp1023:
    000003a0: 	movq	%rax, %rdx
    000003a3: 	movq	(%rax), %rsi
    000003a6: 	leaq	0x8(%rax), %rax
    000003aa: 	cmpq	%rsi, %r9
    000003ad: 	ja	.Ltmp1023 # Offset: 941
    000003af: 	cmpq	%rdx, %r10
    000003b2: 	jbe	.Ltmp1021 # Offset: 946
.Ltmp1022:
    000003b8: 	movq	%rsi, (%r10)
    000003bb: 	movq	%rdi, (%rdx)
.Ltmp1020:
    000003be: 	movq	-0x8(%r10), %rdi
    000003c2: 	movq	%r10, %r8
    000003c5: 	jmp	.Ltmp1024 # Offset: 965
.Ltmp1082:
    000003c7: 	leaq	0x50(%rsp), %rsi
    000003cc: 	leaq	0x60(%rsp), %rdi
    000003d1: 	movl	%ecx, 0x38(%rsp)
    000003d5: 	movq	%r8, 0x68(%rsp)
    000003da: 	movq	%rsi, 0x30(%rsp)
    000003df: 	movq	%rdi, 0x28(%rsp)
    000003e4: 	movq	%rbp, 0x58(%rsp)
    000003e9: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 1001
    000003ee: 	movq	0x30(%rsp), %rsi
    000003f3: 	movq	0x28(%rsp), %rdi
    000003f8: 	movq	%r12, 0x58(%rsp)
    000003fd: 	movq	%rbp, 0x68(%rsp)
    00000402: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 1026
    00000407: 	movl	0x38(%rsp), %ecx
.Ltmp1019:
    0000040b: 	movq	%r14, %rax
    0000040e: 	subq	%r12, %rax
    00000411: 	cmpq	$0x8, %rax
    00000415: 	jle	.Ltmp997 # Offset: 1045
    0000041b: 	movq	(%r12), %rdi
    0000041f: 	movq	%r14, %rbp
    00000422: 	movq	%r12, %rdx
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp1029:
    00000428: 	movq	-0x8(%rbp), %r9
    0000042c: 	leaq	-0x8(%rbp), %r8
    00000430: 	cmpq	%r9, %rdi
    00000433: 	jb	.Ltmp1025 # Offset: 1075
    00000435: 	cmpq	%rdx, %r8
    00000438: 	jbe	.Ltmp1026 # Offset: 1080
    0000043e: 	movq	(%rdx), %rsi
    00000441: 	cmpq	%rsi, %rdi
    00000444: 	jbe	.Ltmp1027 # Offset: 1092
    00000446: 	leaq	0x8(%rdx), %rax
    0000044a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1028:
    00000450: 	movq	%rax, %rdx
    00000453: 	movq	(%rax), %rsi
    00000456: 	leaq	0x8(%rax), %rax
    0000045a: 	cmpq	%rsi, %rdi
    0000045d: 	ja	.Ltmp1028 # Offset: 1117
    0000045f: 	cmpq	%rdx, %r8
    00000462: 	jbe	.Ltmp1026 # Offset: 1122
.Ltmp1027:
    00000468: 	movq	%rsi, (%r8)
    0000046b: 	movq	%r9, (%rdx)
.Ltmp1025:
    0000046e: 	movq	%r8, %rbp
    00000471: 	jmp	.Ltmp1029 # Offset: 1137
.Ltmp1010:
    00000473: 	movq	%r12, %rdx
    00000476: 	subq	%rbx, %rdx
    00000479: 	cmpq	$0x8, %rdx
    0000047d: 	jle	.Ltmp1030 # Offset: 1149
    00000483: 	movq	(%rbx), %r9
    00000486: 	movq	%r12, %r8
    00000489: 	movq	%rbx, %rsi
    0000048c: 	nopl	(%rax) # Size: 4
.Ltmp1035:
    00000490: 	leaq	-0x8(%r8), %r10
    00000494: 	cmpq	%rax, %r9
    00000497: 	jb	.Ltmp1031 # Offset: 1175
    00000499: 	cmpq	%rsi, %r10
    0000049c: 	jbe	.Ltmp1032 # Offset: 1180
    000004a2: 	movq	(%rsi), %rdi
    000004a5: 	cmpq	%rdi, %r9
    000004a8: 	jbe	.Ltmp1033 # Offset: 1192
    000004aa: 	leaq	0x8(%rsi), %rdx
    000004ae: 	nop # Size: 2
.Ltmp1034:
    000004b0: 	movq	%rdx, %rsi
    000004b3: 	movq	(%rdx), %rdi
    000004b6: 	leaq	0x8(%rdx), %rdx
    000004ba: 	cmpq	%rdi, %r9
    000004bd: 	ja	.Ltmp1034 # Offset: 1213
    000004bf: 	cmpq	%rsi, %r10
    000004c2: 	jbe	.Ltmp1032 # Offset: 1218
.Ltmp1033:
    000004c8: 	movq	%rdi, (%r10)
    000004cb: 	movq	%rax, (%rsi)
.Ltmp1031:
    000004ce: 	movq	-0x8(%r10), %rax
    000004d2: 	movq	%r10, %r8
    000004d5: 	jmp	.Ltmp1035 # Offset: 1237
.Ltmp1060:
    000004d7: 	leaq	0x50(%rsp), %rsi
    000004dc: 	leaq	0x60(%rsp), %rdi
    000004e1: 	movl	%ecx, 0x40(%rsp)
    000004e5: 	movq	%r9, 0x58(%rsp)
    000004ea: 	movq	%r9, 0x38(%rsp)
    000004ef: 	movq	%r8, 0x68(%rsp)
    000004f4: 	movq	%rsi, 0x30(%rsp)
    000004f9: 	movq	%rdi, 0x28(%rsp)
    000004fe: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 1278
    00000503: 	movq	0x38(%rsp), %r9
    00000508: 	movq	0x30(%rsp), %rsi
    0000050d: 	movq	%r12, 0x58(%rsp)
    00000512: 	movq	0x28(%rsp), %rdi
    00000517: 	movq	%r9, 0x68(%rsp)
    0000051c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 1308
    00000521: 	movl	0x40(%rsp), %ecx
.Ltmp1030:
    00000525: 	movq	%rbp, %rax
    00000528: 	subq	%r12, %rax
    0000052b: 	cmpq	$0x8, %rax
    0000052f: 	jle	.Ltmp1008 # Offset: 1327
    00000535: 	movq	(%r12), %rdi
    00000539: 	movq	%rbp, %r8
    0000053c: 	movq	%r12, %rdx
    0000053f: 	nop # Size: 1
.Ltmp1040:
    00000540: 	movq	-0x8(%r8), %r10
    00000544: 	leaq	-0x8(%r8), %r9
    00000548: 	cmpq	%r10, %rdi
    0000054b: 	jb	.Ltmp1036 # Offset: 1355
    0000054d: 	cmpq	%rdx, %r9
    00000550: 	jbe	.Ltmp1037 # Offset: 1360
    00000552: 	movq	(%rdx), %rsi
    00000555: 	cmpq	%rsi, %rdi
    00000558: 	jbe	.Ltmp1038 # Offset: 1368
    0000055a: 	leaq	0x8(%rdx), %rax
    0000055e: 	nop # Size: 2
.Ltmp1039:
    00000560: 	movq	%rax, %rdx
    00000563: 	movq	(%rax), %rsi
    00000566: 	leaq	0x8(%rax), %rax
    0000056a: 	cmpq	%rsi, %rdi
    0000056d: 	ja	.Ltmp1039 # Offset: 1389
    0000056f: 	cmpq	%rdx, %r9
    00000572: 	jbe	.Ltmp1037 # Offset: 1394
.Ltmp1038:
    00000574: 	movq	%rsi, (%r9)
    00000577: 	movq	%r10, (%rdx)
.Ltmp1036:
    0000057a: 	movq	%r9, %r8
    0000057d: 	jmp	.Ltmp1040 # Offset: 1405
.Ltmp995:
    0000057f: 	xorl	%eax, %eax
    00000581: 	nopl	(%rax) # Size: 7
.Ltmp1041:
    00000588: 	movq	(%rdx,%rax), %rdi
    0000058c: 	movq	%rdi, (%rbx,%rax)
    00000590: 	addq	$0x8, %rax
    00000594: 	cmpq	%rax, %rsi
    00000597: 	jne	.Ltmp1041 # Offset: 1431
    00000599: 	jmp	.Ltmp994 # Offset: 1433
.Ltmp1037:
    0000059e: 	movq	%r8, %rax
    000005a1: 	subq	%r12, %rax
    000005a4: 	cmpq	$0x8, %rax
    000005a8: 	jle	.Ltmp1042 # Offset: 1448
    000005ae: 	movq	(%r12), %rdi
    000005b2: 	movq	%r8, %r9
    000005b5: 	movq	%r12, %rdx
    000005b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1047:
    000005c0: 	movq	-0x8(%r9), %r11
    000005c4: 	leaq	-0x8(%r9), %r10
    000005c8: 	cmpq	%r11, %rdi
    000005cb: 	jb	.Ltmp1043 # Offset: 1483
    000005cd: 	cmpq	%rdx, %r10
    000005d0: 	jbe	.Ltmp1044 # Offset: 1488
    000005d2: 	movq	(%rdx), %rsi
    000005d5: 	cmpq	%rdi, %rsi
    000005d8: 	jae	.Ltmp1045 # Offset: 1496
    000005da: 	leaq	0x8(%rdx), %rax
    000005de: 	nop # Size: 2
.Ltmp1046:
    000005e0: 	movq	%rax, %rdx
    000005e3: 	movq	(%rax), %rsi
    000005e6: 	leaq	0x8(%rax), %rax
    000005ea: 	cmpq	%rsi, %rdi
    000005ed: 	ja	.Ltmp1046 # Offset: 1517
    000005ef: 	cmpq	%rdx, %r10
    000005f2: 	jbe	.Ltmp1044 # Offset: 1522
.Ltmp1045:
    000005f4: 	movq	%rsi, (%r10)
    000005f7: 	movq	%r11, (%rdx)
.Ltmp1043:
    000005fa: 	movq	%r10, %r9
    000005fd: 	jmp	.Ltmp1047 # Offset: 1533
.Ltmp1044:
    000005ff: 	movq	%r12, 0x68(%rsp)
    00000604: 	leaq	0x60(%rsp), %r12
    00000609: 	leaq	0x50(%rsp), %rsi
    0000060e: 	movq	%r12, %rdi
    00000611: 	movl	%ecx, 0x40(%rsp)
    00000615: 	movq	%r8, 0x28(%rsp)
    0000061a: 	movq	%r9, 0x58(%rsp)
    0000061f: 	movq	%r9, 0x38(%rsp)
    00000624: 	movq	%rsi, 0x30(%rsp)
    00000629: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 1577
    0000062e: 	movq	0x28(%rsp), %r8
    00000633: 	movq	0x38(%rsp), %r9
    00000638: 	movq	%r12, %rdi
    0000063b: 	movq	0x30(%rsp), %rsi
    00000640: 	movq	%r8, 0x58(%rsp)
    00000645: 	movq	%r9, 0x68(%rsp)
    0000064a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 1610
    0000064f: 	movl	0x40(%rsp), %ecx
    00000653: 	movq	0x28(%rsp), %r8
.Ltmp1042:
    00000658: 	movq	%rbp, %rax
    0000065b: 	subq	%r8, %rax
    0000065e: 	cmpq	$0x8, %rax
    00000662: 	jle	.Ltmp1008 # Offset: 1634
    00000668: 	movq	(%r8), %rdi
    0000066b: 	movq	%rbp, %r12
    0000066e: 	movq	%r8, %rdx
    00000671: 	nopl	(%rax) # Size: 7
.Ltmp1052:
    00000678: 	movq	-0x8(%r12), %r10
    0000067d: 	leaq	-0x8(%r12), %r9
    00000682: 	cmpq	%r10, %rdi
    00000685: 	jb	.Ltmp1048 # Offset: 1669
    00000687: 	cmpq	%rdx, %r9
    0000068a: 	jbe	.Ltmp1049 # Offset: 1674
    00000690: 	movq	(%rdx), %rsi
    00000693: 	cmpq	%rsi, %rdi
    00000696: 	jbe	.Ltmp1050 # Offset: 1686
    00000698: 	leaq	0x8(%rdx), %rax
    0000069c: 	nopl	(%rax) # Size: 4
.Ltmp1051:
    000006a0: 	movq	%rax, %rdx
    000006a3: 	movq	(%rax), %rsi
    000006a6: 	leaq	0x8(%rax), %rax
    000006aa: 	cmpq	%rsi, %rdi
    000006ad: 	ja	.Ltmp1051 # Offset: 1709
    000006af: 	cmpq	%rdx, %r9
    000006b2: 	jbe	.Ltmp1049 # Offset: 1714
.Ltmp1050:
    000006b8: 	movq	%rsi, (%r9)
    000006bb: 	movq	%r10, (%rdx)
.Ltmp1048:
    000006be: 	movq	%r9, %r12
    000006c1: 	jmp	.Ltmp1052 # Offset: 1729
.Ltmp1032:
    000006c3: 	movq	%r8, %rax
    000006c6: 	subq	%rbx, %rax
    000006c9: 	cmpq	$0x8, %rax
    000006cd: 	jle	.Ltmp1053 # Offset: 1741
    000006d3: 	movq	(%rbx), %rdi
    000006d6: 	movq	%r8, %r9
    000006d9: 	movq	%rbx, %rdx
    000006dc: 	nopl	(%rax) # Size: 4
.Ltmp1058:
    000006e0: 	movq	-0x8(%r9), %r11
    000006e4: 	leaq	-0x8(%r9), %r10
    000006e8: 	cmpq	%r11, %rdi
    000006eb: 	jb	.Ltmp1054 # Offset: 1771
    000006ed: 	cmpq	%rdx, %r10
    000006f0: 	jbe	.Ltmp1055 # Offset: 1776
    000006f2: 	movq	(%rdx), %rsi
    000006f5: 	cmpq	%rsi, %rdi
    000006f8: 	jbe	.Ltmp1056 # Offset: 1784
    000006fa: 	leaq	0x8(%rdx), %rax
    000006fe: 	nop # Size: 2
.Ltmp1057:
    00000700: 	movq	%rax, %rdx
    00000703: 	movq	(%rax), %rsi
    00000706: 	leaq	0x8(%rax), %rax
    0000070a: 	cmpq	%rsi, %rdi
    0000070d: 	ja	.Ltmp1057 # Offset: 1805
    0000070f: 	cmpq	%rdx, %r10
    00000712: 	jbe	.Ltmp1055 # Offset: 1810
.Ltmp1056:
    00000714: 	movq	%rsi, (%r10)
    00000717: 	movq	%r11, (%rdx)
.Ltmp1054:
    0000071a: 	movq	%r10, %r9
    0000071d: 	jmp	.Ltmp1058 # Offset: 1821
.Ltmp1055:
    0000071f: 	leaq	0x50(%rsp), %rsi
    00000724: 	leaq	0x60(%rsp), %rdi
    00000729: 	movl	%ecx, 0x4c(%rsp)
    0000072d: 	movq	%r8, 0x28(%rsp)
    00000732: 	movq	%r9, 0x58(%rsp)
    00000737: 	movq	%r9, 0x40(%rsp)
    0000073c: 	movq	%rsi, 0x38(%rsp)
    00000741: 	movq	%rdi, 0x30(%rsp)
    00000746: 	movq	%rbx, 0x68(%rsp)
    0000074b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 1867
    00000750: 	movq	0x28(%rsp), %r8
    00000755: 	movq	0x40(%rsp), %r9
    0000075a: 	movq	0x38(%rsp), %rsi
    0000075f: 	movq	0x30(%rsp), %rdi
    00000764: 	movq	%r8, 0x58(%rsp)
    00000769: 	movq	%r9, 0x68(%rsp)
    0000076e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 1902
    00000773: 	movl	0x4c(%rsp), %ecx
    00000777: 	movq	0x28(%rsp), %r8
.Ltmp1053:
    0000077c: 	movq	%r12, %rax
    0000077f: 	subq	%r8, %rax
    00000782: 	cmpq	$0x8, %rax
    00000786: 	jle	.Ltmp1030 # Offset: 1926
    0000078c: 	movq	(%r8), %rdi
    0000078f: 	movq	%r12, %r9
    00000792: 	movq	%r8, %rdx
    00000795: 	nopl	(%rax) # Size: 3
.Ltmp1063:
    00000798: 	movq	-0x8(%r9), %r11
    0000079c: 	leaq	-0x8(%r9), %r10
    000007a0: 	cmpq	%r11, %rdi
    000007a3: 	jb	.Ltmp1059 # Offset: 1955
    000007a5: 	cmpq	%rdx, %r10
    000007a8: 	jbe	.Ltmp1060 # Offset: 1960
    000007ae: 	movq	(%rdx), %rsi
    000007b1: 	cmpq	%rsi, %rdi
    000007b4: 	jbe	.Ltmp1061 # Offset: 1972
    000007b6: 	leaq	0x8(%rdx), %rax
    000007ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1062:
    000007c0: 	movq	%rax, %rdx
    000007c3: 	movq	(%rax), %rsi
    000007c6: 	leaq	0x8(%rax), %rax
    000007ca: 	cmpq	%rsi, %rdi
    000007cd: 	ja	.Ltmp1062 # Offset: 1997
    000007cf: 	cmpq	%rdx, %r10
    000007d2: 	jbe	.Ltmp1060 # Offset: 2002
.Ltmp1061:
    000007d8: 	movq	%rsi, (%r10)
    000007db: 	movq	%r11, (%rdx)
.Ltmp1059:
    000007de: 	movq	%r10, %r9
    000007e1: 	jmp	.Ltmp1063 # Offset: 2017
.Ltmp1026:
    000007e3: 	movq	%rbp, %rax
    000007e6: 	subq	%r12, %rax
    000007e9: 	cmpq	$0x8, %rax
    000007ed: 	jle	.Ltmp1064 # Offset: 2029
    000007f3: 	movq	(%r12), %rdi
    000007f7: 	movq	%rbp, %r8
    000007fa: 	movq	%r12, %rdx
    000007fd: 	nopl	(%rax) # Size: 3
.Ltmp1069:
    00000800: 	movq	-0x8(%r8), %r10
    00000804: 	leaq	-0x8(%r8), %r9
    00000808: 	cmpq	%r10, %rdi
    0000080b: 	jb	.Ltmp1065 # Offset: 2059
    0000080d: 	cmpq	%rdx, %r9
    00000810: 	jbe	.Ltmp1066 # Offset: 2064
    00000812: 	movq	(%rdx), %rsi
    00000815: 	cmpq	%rsi, %rdi
    00000818: 	jbe	.Ltmp1067 # Offset: 2072
    0000081a: 	leaq	0x8(%rdx), %rax
    0000081e: 	nop # Size: 2
.Ltmp1068:
    00000820: 	movq	%rax, %rdx
    00000823: 	movq	(%rax), %rsi
    00000826: 	leaq	0x8(%rax), %rax
    0000082a: 	cmpq	%rsi, %rdi
    0000082d: 	ja	.Ltmp1068 # Offset: 2093
    0000082f: 	cmpq	%rdx, %r9
    00000832: 	jbe	.Ltmp1066 # Offset: 2098
.Ltmp1067:
    00000834: 	movq	%rsi, (%r9)
    00000837: 	movq	%r10, (%rdx)
.Ltmp1065:
    0000083a: 	movq	%r9, %r8
    0000083d: 	jmp	.Ltmp1069 # Offset: 2109
.Ltmp1066:
    0000083f: 	movq	%r12, 0x68(%rsp)
    00000844: 	leaq	0x60(%rsp), %r12
    00000849: 	leaq	0x50(%rsp), %rsi
    0000084e: 	movq	%r12, %rdi
    00000851: 	movl	%ecx, 0x38(%rsp)
    00000855: 	movq	%r8, 0x58(%rsp)
    0000085a: 	movq	%r8, 0x30(%rsp)
    0000085f: 	movq	%rsi, 0x28(%rsp)
    00000864: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 2148
    00000869: 	movq	0x30(%rsp), %r8
    0000086e: 	movq	0x28(%rsp), %rsi
    00000873: 	movq	%r12, %rdi
    00000876: 	movq	%rbp, 0x58(%rsp)
    0000087b: 	movq	%r8, 0x68(%rsp)
    00000880: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 2176
    00000885: 	movl	0x38(%rsp), %ecx
.Ltmp1064:
    00000889: 	movq	%r14, %rax
    0000088c: 	subq	%rbp, %rax
    0000088f: 	cmpq	$0x8, %rax
    00000893: 	jle	.Ltmp997 # Offset: 2195
    00000899: 	movq	(%rbp), %rdi
    0000089d: 	movq	%r14, %r12
    000008a0: 	movq	%rbp, %rdx
    000008a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1074:
    000008a8: 	movq	-0x8(%r12), %r9
    000008ad: 	leaq	-0x8(%r12), %r8
    000008b2: 	cmpq	%r9, %rdi
    000008b5: 	jb	.Ltmp1070 # Offset: 2229
    000008b7: 	cmpq	%rdx, %r8
    000008ba: 	jbe	.Ltmp1071 # Offset: 2234
    000008c0: 	movq	(%rdx), %rsi
    000008c3: 	cmpq	%rsi, %rdi
    000008c6: 	jbe	.Ltmp1072 # Offset: 2246
    000008c8: 	leaq	0x8(%rdx), %rax
    000008cc: 	nopl	(%rax) # Size: 4
.Ltmp1073:
    000008d0: 	movq	%rax, %rdx
    000008d3: 	movq	(%rax), %rsi
    000008d6: 	leaq	0x8(%rax), %rax
    000008da: 	cmpq	%rsi, %rdi
    000008dd: 	ja	.Ltmp1073 # Offset: 2269
    000008df: 	cmpq	%rdx, %r8
    000008e2: 	jbe	.Ltmp1071 # Offset: 2274
.Ltmp1072:
    000008e8: 	movq	%rsi, (%r8)
    000008eb: 	movq	%r9, (%rdx)
.Ltmp1070:
    000008ee: 	movq	%r8, %r12
    000008f1: 	jmp	.Ltmp1074 # Offset: 2289
.Ltmp1021:
    000008f3: 	movq	%r8, %rax
    000008f6: 	subq	%rbp, %rax
    000008f9: 	cmpq	$0x8, %rax
    000008fd: 	jle	.Ltmp1075 # Offset: 2301
    00000903: 	movq	(%rbp), %rdi
    00000907: 	movq	%r8, %r9
    0000090a: 	movq	%rbp, %rdx
    0000090d: 	nopl	(%rax) # Size: 3
.Ltmp1080:
    00000910: 	movq	-0x8(%r9), %r11
    00000914: 	leaq	-0x8(%r9), %r10
    00000918: 	cmpq	%r11, %rdi
    0000091b: 	jb	.Ltmp1076 # Offset: 2331
    0000091d: 	cmpq	%rdx, %r10
    00000920: 	jbe	.Ltmp1077 # Offset: 2336
    00000922: 	movq	(%rdx), %rsi
    00000925: 	cmpq	%rdi, %rsi
    00000928: 	jae	.Ltmp1078 # Offset: 2344
    0000092a: 	leaq	0x8(%rdx), %rax
    0000092e: 	nop # Size: 2
.Ltmp1079:
    00000930: 	movq	%rax, %rdx
    00000933: 	movq	(%rax), %rsi
    00000936: 	leaq	0x8(%rax), %rax
    0000093a: 	cmpq	%rsi, %rdi
    0000093d: 	ja	.Ltmp1079 # Offset: 2365
    0000093f: 	cmpq	%rdx, %r10
    00000942: 	jbe	.Ltmp1077 # Offset: 2370
.Ltmp1078:
    00000944: 	movq	%rsi, (%r10)
    00000947: 	movq	%r11, (%rdx)
.Ltmp1076:
    0000094a: 	movq	%r10, %r9
    0000094d: 	jmp	.Ltmp1080 # Offset: 2381
.Ltmp1077:
    0000094f: 	movq	%rbp, 0x68(%rsp)
    00000954: 	leaq	0x60(%rsp), %rbp
    00000959: 	leaq	0x50(%rsp), %rsi
    0000095e: 	movq	%rbp, %rdi
    00000961: 	movl	%ecx, 0x40(%rsp)
    00000965: 	movq	%r8, 0x28(%rsp)
    0000096a: 	movq	%r9, 0x58(%rsp)
    0000096f: 	movq	%r9, 0x38(%rsp)
    00000974: 	movq	%rsi, 0x30(%rsp)
    00000979: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 2425
    0000097e: 	movq	0x28(%rsp), %r8
    00000983: 	movq	0x38(%rsp), %r9
    00000988: 	movq	%rbp, %rdi
    0000098b: 	movq	0x30(%rsp), %rsi
    00000990: 	movq	%r8, 0x58(%rsp)
    00000995: 	movq	%r9, 0x68(%rsp)
    0000099a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 2458
    0000099f: 	movl	0x40(%rsp), %ecx
    000009a3: 	movq	0x28(%rsp), %r8
.Ltmp1075:
    000009a8: 	movq	%r12, %rax
    000009ab: 	subq	%r8, %rax
    000009ae: 	cmpq	$0x8, %rax
    000009b2: 	jle	.Ltmp1019 # Offset: 2482
    000009b8: 	movq	(%r8), %rdi
    000009bb: 	movq	%r12, %rbp
    000009be: 	movq	%r8, %rdx
    000009c1: 	nopl	(%rax) # Size: 7
.Ltmp1085:
    000009c8: 	movq	-0x8(%rbp), %r10
    000009cc: 	leaq	-0x8(%rbp), %r9
    000009d0: 	cmpq	%r10, %rdi
    000009d3: 	jb	.Ltmp1081 # Offset: 2515
    000009d5: 	cmpq	%rdx, %r9
    000009d8: 	jbe	.Ltmp1082 # Offset: 2520
    000009de: 	movq	(%rdx), %rsi
    000009e1: 	cmpq	%rdi, %rsi
    000009e4: 	jae	.Ltmp1083 # Offset: 2532
    000009e6: 	leaq	0x8(%rdx), %rax
    000009ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1084:
    000009f0: 	movq	%rax, %rdx
    000009f3: 	movq	(%rax), %rsi
    000009f6: 	leaq	0x8(%rax), %rax
    000009fa: 	cmpq	%rsi, %rdi
    000009fd: 	ja	.Ltmp1084 # Offset: 2557
    000009ff: 	cmpq	%rdx, %r9
    00000a02: 	jbe	.Ltmp1082 # Offset: 2562
.Ltmp1083:
    00000a08: 	movq	%rsi, (%r9)
    00000a0b: 	movq	%r10, (%rdx)
.Ltmp1081:
    00000a0e: 	movq	%r9, %rbp
    00000a11: 	jmp	.Ltmp1085 # Offset: 2577
.Ltmp1071:
    00000a13: 	leaq	0x50(%rsp), %r10
    00000a18: 	leaq	0x60(%rsp), %r11
    00000a1d: 	movl	%ecx, 0x38(%rsp)
    00000a21: 	movq	%r10, %rsi
    00000a24: 	movq	%r11, %rdi
    00000a27: 	movq	%r12, 0x58(%rsp)
    00000a2c: 	movq	%rbp, 0x68(%rsp)
    00000a31: 	movq	%r10, 0x30(%rsp)
    00000a36: 	movq	%r11, 0x28(%rsp)
    00000a3b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 2619
    00000a40: 	movq	%r14, %rax
    00000a43: 	movl	0x38(%rsp), %ecx
    00000a47: 	subq	%r12, %rax
    00000a4a: 	cmpq	$0x8, %rax
    00000a4e: 	jle	.Ltmp997 # Offset: 2638
    00000a54: 	movq	(%r12), %rdi
    00000a58: 	movq	0x30(%rsp), %r10
    00000a5d: 	movq	%r14, %rbp
    00000a60: 	movq	%r12, %rdx
    00000a63: 	movq	0x28(%rsp), %r11
    00000a68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1090:
    00000a70: 	movq	-0x8(%rbp), %r9
    00000a74: 	leaq	-0x8(%rbp), %r8
    00000a78: 	cmpq	%r9, %rdi
    00000a7b: 	jb	.Ltmp1086 # Offset: 2683
    00000a7d: 	cmpq	%rdx, %r8
    00000a80: 	jbe	.Ltmp1087 # Offset: 2688
    00000a86: 	movq	(%rdx), %rsi
    00000a89: 	cmpq	%rdi, %rsi
    00000a8c: 	jae	.Ltmp1088 # Offset: 2700
    00000a8e: 	leaq	0x8(%rdx), %rax
    00000a92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1089:
    00000a98: 	movq	%rax, %rdx
    00000a9b: 	movq	(%rax), %rsi
    00000a9e: 	leaq	0x8(%rax), %rax
    00000aa2: 	cmpq	%rsi, %rdi
    00000aa5: 	ja	.Ltmp1089 # Offset: 2725
    00000aa7: 	cmpq	%rdx, %r8
    00000aaa: 	jbe	.Ltmp1087 # Offset: 2730
.Ltmp1088:
    00000ab0: 	movq	%rsi, (%r8)
    00000ab3: 	movq	%r9, (%rdx)
.Ltmp1086:
    00000ab6: 	movq	%r8, %rbp
    00000ab9: 	jmp	.Ltmp1090 # Offset: 2745
.Ltmp1007:
    00000abb: 	callq	__stack_chk_fail@PLT # Offset: 2747
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x8760
  Size        : 0x6af
  MaxSize     : 0x6b0
  Offset      : 0x8760
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp1091 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movq	(%rdi), %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1096:
    00000030: 	movq	-0x8(%rbp), %rdi
    00000034: 	leaq	-0x8(%rbp), %r8
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	ja	.Ltmp1092 # Offset: 59
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	jbe	.Ltmp1093 # Offset: 64
    00000042: 	movq	(%rdx), %rcx
    00000045: 	cmpq	%rcx, %rsi
    00000048: 	jbe	.Ltmp1094 # Offset: 72
    0000004a: 	leaq	0x8(%rdx), %rax
    0000004e: 	nop # Size: 2
.Ltmp1095:
    00000050: 	movq	%rax, %rdx
    00000053: 	movq	(%rax), %rcx
    00000056: 	leaq	0x8(%rax), %rax
    0000005a: 	cmpq	%rsi, %rcx
    0000005d: 	jb	.Ltmp1095 # Offset: 93
    0000005f: 	cmpq	%rdx, %r8
    00000062: 	jbe	.Ltmp1093 # Offset: 98
.Ltmp1094:
    00000064: 	movq	%rcx, (%r8)
    00000067: 	movq	%rdi, (%rdx)
.Ltmp1092:
    0000006a: 	movq	%r8, %rbp
    0000006d: 	jmp	.Ltmp1096 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp1093:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x8, %rax
    0000007a: 	jle	.Ltmp1097 # Offset: 122
    0000007c: 	movq	(%r9), %rsi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp1102:
    00000088: 	leaq	-0x8(%r13), %r8
    0000008c: 	cmpq	%rdi, %rsi
    0000008f: 	jb	.Ltmp1098 # Offset: 143
    00000091: 	cmpq	%rdx, %r8
    00000094: 	jbe	.Ltmp1099 # Offset: 148
    00000096: 	movq	(%rdx), %rcx
    00000099: 	cmpq	%rcx, %rsi
    0000009c: 	jbe	.Ltmp1100 # Offset: 156
    0000009e: 	leaq	0x8(%rdx), %rax
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1101:
    000000a8: 	movq	%rax, %rdx
    000000ab: 	movq	(%rax), %rcx
    000000ae: 	leaq	0x8(%rax), %rax
    000000b2: 	cmpq	%rcx, %rsi
    000000b5: 	ja	.Ltmp1101 # Offset: 181
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jbe	.Ltmp1099 # Offset: 186
.Ltmp1100:
    000000bc: 	movq	%rcx, (%r8)
    000000bf: 	movq	%rdi, (%rdx)
.Ltmp1098:
    000000c2: 	movq	-0x8(%r8), %rdi
    000000c6: 	movq	%r8, %r13
    000000c9: 	jmp	.Ltmp1102 # Offset: 201
.Ltmp1099:
    000000cb: 	movq	%r13, %rax
    000000ce: 	subq	%r9, %rax
    000000d1: 	cmpq	$0x8, %rax
    000000d5: 	jg	.Ltmp1103 # Offset: 213
.Ltmp1139:
    000000db: 	movq	%rbp, %rax
    000000de: 	subq	%r13, %rax
    000000e1: 	cmpq	$0x8, %rax
    000000e5: 	jg	.Ltmp1104 # Offset: 229
.Ltmp1097:
    000000eb: 	movq	%r12, %rax
    000000ee: 	subq	%rbp, %rax
    000000f1: 	cmpq	$0x8, %rax
    000000f5: 	jle	.Ltmp1105 # Offset: 245
    000000f7: 	movq	(%rbp), %rsi
    000000fb: 	movq	%r12, %r13
    000000fe: 	movq	%rbp, %rdx
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1110:
    00000108: 	movq	-0x8(%r13), %rdi
    0000010c: 	leaq	-0x8(%r13), %r8
    00000110: 	cmpq	%rdi, %rsi
    00000113: 	jb	.Ltmp1106 # Offset: 275
    00000115: 	cmpq	%rdx, %r8
    00000118: 	jbe	.Ltmp1107 # Offset: 280
    0000011a: 	movq	(%rdx), %rcx
    0000011d: 	cmpq	%rcx, %rsi
    00000120: 	jbe	.Ltmp1108 # Offset: 288
    00000122: 	leaq	0x8(%rdx), %rax
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1109:
    00000130: 	movq	%rax, %rdx
    00000133: 	movq	(%rax), %rcx
    00000136: 	leaq	0x8(%rax), %rax
    0000013a: 	cmpq	%rcx, %rsi
    0000013d: 	ja	.Ltmp1109 # Offset: 317
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jbe	.Ltmp1107 # Offset: 322
.Ltmp1108:
    00000144: 	movq	%rcx, (%r8)
    00000147: 	movq	%rdi, (%rdx)
.Ltmp1106:
    0000014a: 	movq	%r8, %r13
    0000014d: 	jmp	.Ltmp1110 # Offset: 333
.Ltmp1107:
    0000014f: 	movq	%r13, %rax
    00000152: 	subq	%rbp, %rax
    00000155: 	cmpq	$0x8, %rax
    00000159: 	jg	.Ltmp1111 # Offset: 345
.Ltmp1162:
    0000015b: 	movq	%r12, %rax
    0000015e: 	subq	%r13, %rax
    00000161: 	cmpq	$0x8, %rax
    00000165: 	jg	.Ltmp1112 # Offset: 357
.Ltmp1105:
    00000167: 	popq	%rbx
    00000168: 	popq	%rbp
    00000169: 	popq	%r12
    0000016b: 	popq	%r13
    0000016d: 	popq	%r14
    0000016f: 	retq # Offset: 367
.Ltmp1091:
    00000170: 	retq # Offset: 368
.Ltmp1112:
    00000171: 	movq	(%r13), %rsi
    00000175: 	movq	%r12, %rbp
    00000178: 	movq	%r13, %rdx
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1117:
    00000180: 	movq	-0x8(%rbp), %r8
    00000184: 	leaq	-0x8(%rbp), %rdi
    00000188: 	cmpq	%r8, %rsi
    0000018b: 	jb	.Ltmp1113 # Offset: 395
    0000018d: 	cmpq	%rdx, %rdi
    00000190: 	jbe	.Ltmp1114 # Offset: 400
    00000196: 	movq	(%rdx), %rcx
    00000199: 	cmpq	%rsi, %rcx
    0000019c: 	jae	.Ltmp1115 # Offset: 412
    0000019e: 	leaq	0x8(%rdx), %rax
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1116:
    000001a8: 	movq	%rax, %rdx
    000001ab: 	movq	(%rax), %rcx
    000001ae: 	leaq	0x8(%rax), %rax
    000001b2: 	cmpq	%rcx, %rsi
    000001b5: 	ja	.Ltmp1116 # Offset: 437
    000001b7: 	cmpq	%rdx, %rdi
    000001ba: 	jbe	.Ltmp1114 # Offset: 442
.Ltmp1115:
    000001c0: 	movq	%rcx, (%rdi)
    000001c3: 	movq	%r8, (%rdx)
.Ltmp1113:
    000001c6: 	movq	%rdi, %rbp
    000001c9: 	jmp	.Ltmp1117 # Offset: 457
.Ltmp1111:
    000001cb: 	movq	(%rbp), %rsi
    000001cf: 	movq	%r13, %rbx
    000001d2: 	movq	%rbp, %rdx
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp1122:
    000001d8: 	leaq	-0x8(%rbx), %r8
    000001dc: 	cmpq	%rdi, %rsi
    000001df: 	jb	.Ltmp1118 # Offset: 479
    000001e1: 	cmpq	%rdx, %r8
    000001e4: 	jbe	.Ltmp1119 # Offset: 484
    000001ea: 	movq	(%rdx), %rcx
    000001ed: 	cmpq	%rsi, %rcx
    000001f0: 	jae	.Ltmp1120 # Offset: 496
    000001f2: 	leaq	0x8(%rdx), %rax
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1121:
    00000200: 	movq	%rax, %rdx
    00000203: 	movq	(%rax), %rcx
    00000206: 	leaq	0x8(%rax), %rax
    0000020a: 	cmpq	%rcx, %rsi
    0000020d: 	ja	.Ltmp1121 # Offset: 525
    0000020f: 	cmpq	%rdx, %r8
    00000212: 	jbe	.Ltmp1119 # Offset: 530
.Ltmp1120:
    00000218: 	movq	%rcx, (%r8)
    0000021b: 	movq	%rdi, (%rdx)
.Ltmp1118:
    0000021e: 	movq	-0x8(%r8), %rdi
    00000222: 	movq	%r8, %rbx
    00000225: 	jmp	.Ltmp1122 # Offset: 549
.Ltmp1104:
    00000227: 	movq	(%r13), %rsi
    0000022b: 	movq	%rbp, %rbx
    0000022e: 	movq	%r13, %rdx
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp1127:
    00000238: 	movq	-0x8(%rbx), %r8
    0000023c: 	leaq	-0x8(%rbx), %rdi
    00000240: 	cmpq	%r8, %rsi
    00000243: 	jb	.Ltmp1123 # Offset: 579
    00000245: 	cmpq	%rdx, %rdi
    00000248: 	jbe	.Ltmp1124 # Offset: 584
    0000024e: 	movq	(%rdx), %rcx
    00000251: 	cmpq	%rcx, %rsi
    00000254: 	jbe	.Ltmp1125 # Offset: 596
    00000256: 	leaq	0x8(%rdx), %rax
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1126:
    00000260: 	movq	%rax, %rdx
    00000263: 	movq	(%rax), %rcx
    00000266: 	leaq	0x8(%rax), %rax
    0000026a: 	cmpq	%rcx, %rsi
    0000026d: 	ja	.Ltmp1126 # Offset: 621
    0000026f: 	cmpq	%rdx, %rdi
    00000272: 	jbe	.Ltmp1124 # Offset: 626
.Ltmp1125:
    00000278: 	movq	%rcx, (%rdi)
    0000027b: 	movq	%r8, (%rdx)
.Ltmp1123:
    0000027e: 	movq	%rdi, %rbx
    00000281: 	jmp	.Ltmp1127 # Offset: 641
.Ltmp1103:
    00000283: 	movq	(%r9), %rsi
    00000286: 	movq	%r13, %rbx
    00000289: 	movq	%r9, %rdx
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp1132:
    00000290: 	leaq	-0x8(%rbx), %r8
    00000294: 	cmpq	%rdi, %rsi
    00000297: 	jb	.Ltmp1128 # Offset: 663
    00000299: 	cmpq	%rdx, %r8
    0000029c: 	jbe	.Ltmp1129 # Offset: 668
    0000029e: 	movq	(%rdx), %rcx
    000002a1: 	cmpq	%rcx, %rsi
    000002a4: 	jbe	.Ltmp1130 # Offset: 676
    000002a6: 	leaq	0x8(%rdx), %rax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1131:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movq	(%rax), %rcx
    000002b6: 	leaq	0x8(%rax), %rax
    000002ba: 	cmpq	%rcx, %rsi
    000002bd: 	ja	.Ltmp1131 # Offset: 701
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	jbe	.Ltmp1129 # Offset: 706
.Ltmp1130:
    000002c4: 	movq	%rcx, (%r8)
    000002c7: 	movq	%rdi, (%rdx)
.Ltmp1128:
    000002ca: 	movq	-0x8(%r8), %rdi
    000002ce: 	movq	%r8, %rbx
    000002d1: 	jmp	.Ltmp1132 # Offset: 721
.Ltmp1129:
    000002d3: 	movq	%rbx, %rax
    000002d6: 	subq	%r9, %rax
    000002d9: 	cmpq	$0x8, %rax
    000002dd: 	jle	.Ltmp1133 # Offset: 733
    000002df: 	movq	(%r9), %rsi
    000002e2: 	movq	%rbx, %r14
    000002e5: 	movq	%r9, %rdx
    000002e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1138:
    000002f0: 	movq	-0x8(%r14), %r8
    000002f4: 	leaq	-0x8(%r14), %rdi
    000002f8: 	cmpq	%r8, %rsi
    000002fb: 	jb	.Ltmp1134 # Offset: 763
    000002fd: 	cmpq	%rdx, %rdi
    00000300: 	jbe	.Ltmp1135 # Offset: 768
    00000302: 	movq	(%rdx), %rcx
    00000305: 	cmpq	%rcx, %rsi
    00000308: 	jbe	.Ltmp1136 # Offset: 776
    0000030a: 	leaq	0x8(%rdx), %rax
    0000030e: 	nop # Size: 2
.Ltmp1137:
    00000310: 	movq	%rax, %rdx
    00000313: 	movq	(%rax), %rcx
    00000316: 	leaq	0x8(%rax), %rax
    0000031a: 	cmpq	%rcx, %rsi
    0000031d: 	ja	.Ltmp1137 # Offset: 797
    0000031f: 	cmpq	%rdx, %rdi
    00000322: 	jbe	.Ltmp1135 # Offset: 802
.Ltmp1136:
    00000324: 	movq	%rcx, (%rdi)
    00000327: 	movq	%r8, (%rdx)
.Ltmp1134:
    0000032a: 	movq	%rdi, %r14
    0000032d: 	jmp	.Ltmp1138 # Offset: 813
.Ltmp1135:
    0000032f: 	movq	%r14, %rsi
    00000332: 	movq	%r9, %rdi
    00000335: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 821
    0000033a: 	movq	%rbx, %rsi
    0000033d: 	movq	%r14, %rdi
    00000340: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 832
.Ltmp1133:
    00000345: 	movq	%r13, %rax
    00000348: 	movq	%rbx, %r8
    0000034b: 	subq	%rbx, %rax
    0000034e: 	cmpq	$0x8, %rax
    00000352: 	jle	.Ltmp1139 # Offset: 850
    00000358: 	movq	(%rbx), %rcx
    0000035b: 	movq	%r13, %r14
    0000035e: 	nop # Size: 2
.Ltmp1144:
    00000360: 	movq	-0x8(%r14), %rdi
    00000364: 	leaq	-0x8(%r14), %rsi
    00000368: 	cmpq	%rdi, %rcx
    0000036b: 	jb	.Ltmp1140 # Offset: 875
    0000036d: 	cmpq	%rbx, %rsi
    00000370: 	jbe	.Ltmp1141 # Offset: 880
    00000376: 	movq	(%rbx), %rdx
    00000379: 	cmpq	%rcx, %rdx
    0000037c: 	jae	.Ltmp1142 # Offset: 892
    0000037e: 	leaq	0x8(%rbx), %rax
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1143:
    00000388: 	movq	%rax, %rbx
    0000038b: 	movq	(%rax), %rdx
    0000038e: 	leaq	0x8(%rax), %rax
    00000392: 	cmpq	%rdx, %rcx
    00000395: 	ja	.Ltmp1143 # Offset: 917
    00000397: 	cmpq	%rbx, %rsi
    0000039a: 	jbe	.Ltmp1141 # Offset: 922
.Ltmp1142:
    000003a0: 	movq	%rdx, (%rsi)
    000003a3: 	movq	%rdi, (%rbx)
.Ltmp1140:
    000003a6: 	movq	%rsi, %r14
    000003a9: 	jmp	.Ltmp1144 # Offset: 937
.Ltmp1124:
    000003ab: 	movq	%rbx, %rax
    000003ae: 	subq	%r13, %rax
    000003b1: 	cmpq	$0x8, %rax
    000003b5: 	jle	.Ltmp1145 # Offset: 949
    000003b7: 	movq	(%r13), %rsi
    000003bb: 	movq	%rbx, %r14
    000003be: 	movq	%r13, %rdx
    000003c1: 	nopl	(%rax) # Size: 7
.Ltmp1150:
    000003c8: 	movq	-0x8(%r14), %r8
    000003cc: 	leaq	-0x8(%r14), %rdi
    000003d0: 	cmpq	%r8, %rsi
    000003d3: 	jb	.Ltmp1146 # Offset: 979
    000003d5: 	cmpq	%rdx, %rdi
    000003d8: 	jbe	.Ltmp1147 # Offset: 984
    000003da: 	movq	(%rdx), %rcx
    000003dd: 	cmpq	%rsi, %rcx
    000003e0: 	jae	.Ltmp1148 # Offset: 992
    000003e2: 	leaq	0x8(%rdx), %rax
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1149:
    000003f0: 	movq	%rax, %rdx
    000003f3: 	movq	(%rax), %rcx
    000003f6: 	leaq	0x8(%rax), %rax
    000003fa: 	cmpq	%rcx, %rsi
    000003fd: 	ja	.Ltmp1149 # Offset: 1021
    000003ff: 	cmpq	%rdx, %rdi
    00000402: 	jbe	.Ltmp1147 # Offset: 1026
.Ltmp1148:
    00000404: 	movq	%rcx, (%rdi)
    00000407: 	movq	%r8, (%rdx)
.Ltmp1146:
    0000040a: 	movq	%rdi, %r14
    0000040d: 	jmp	.Ltmp1150 # Offset: 1037
.Ltmp1147:
    0000040f: 	movq	%r14, %rsi
    00000412: 	movq	%r13, %rdi
    00000415: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1045
    0000041a: 	movq	%rbx, %rsi
    0000041d: 	movq	%r14, %rdi
    00000420: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1056
.Ltmp1145:
    00000425: 	movq	%rbp, %rax
    00000428: 	movq	%rbx, %r8
    0000042b: 	subq	%rbx, %rax
    0000042e: 	cmpq	$0x8, %rax
    00000432: 	jle	.Ltmp1097 # Offset: 1074
    00000438: 	movq	(%rbx), %rcx
    0000043b: 	movq	%rbp, %r13
    0000043e: 	nop # Size: 2
.Ltmp1155:
    00000440: 	movq	-0x8(%r13), %rdi
    00000444: 	leaq	-0x8(%r13), %rsi
    00000448: 	cmpq	%rdi, %rcx
    0000044b: 	jb	.Ltmp1151 # Offset: 1099
    0000044d: 	cmpq	%rbx, %rsi
    00000450: 	jbe	.Ltmp1152 # Offset: 1104
    00000456: 	movq	(%rbx), %rdx
    00000459: 	cmpq	%rdx, %rcx
    0000045c: 	jbe	.Ltmp1153 # Offset: 1116
    0000045e: 	leaq	0x8(%rbx), %rax
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1154:
    00000468: 	movq	%rax, %rbx
    0000046b: 	movq	(%rax), %rdx
    0000046e: 	leaq	0x8(%rax), %rax
    00000472: 	cmpq	%rdx, %rcx
    00000475: 	ja	.Ltmp1154 # Offset: 1141
    00000477: 	cmpq	%rbx, %rsi
    0000047a: 	jbe	.Ltmp1152 # Offset: 1146
.Ltmp1153:
    00000480: 	movq	%rdx, (%rsi)
    00000483: 	movq	%rdi, (%rbx)
.Ltmp1151:
    00000486: 	movq	%rsi, %r13
    00000489: 	jmp	.Ltmp1155 # Offset: 1161
.Ltmp1119:
    0000048b: 	movq	%rbx, %rax
    0000048e: 	subq	%rbp, %rax
    00000491: 	cmpq	$0x8, %rax
    00000495: 	jle	.Ltmp1156 # Offset: 1173
    00000497: 	movq	(%rbp), %rsi
    0000049b: 	movq	%rbx, %r14
    0000049e: 	movq	%rbp, %rdx
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp1161:
    000004a8: 	movq	-0x8(%r14), %r8
    000004ac: 	leaq	-0x8(%r14), %rdi
    000004b0: 	cmpq	%r8, %rsi
    000004b3: 	jb	.Ltmp1157 # Offset: 1203
    000004b5: 	cmpq	%rdx, %rdi
    000004b8: 	jbe	.Ltmp1158 # Offset: 1208
    000004ba: 	movq	(%rdx), %rcx
    000004bd: 	cmpq	%rsi, %rcx
    000004c0: 	jae	.Ltmp1159 # Offset: 1216
    000004c2: 	leaq	0x8(%rdx), %rax
    000004c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1160:
    000004d0: 	movq	%rax, %rdx
    000004d3: 	movq	(%rax), %rcx
    000004d6: 	leaq	0x8(%rax), %rax
    000004da: 	cmpq	%rcx, %rsi
    000004dd: 	ja	.Ltmp1160 # Offset: 1245
    000004df: 	cmpq	%rdx, %rdi
    000004e2: 	jbe	.Ltmp1158 # Offset: 1250
.Ltmp1159:
    000004e4: 	movq	%rcx, (%rdi)
    000004e7: 	movq	%r8, (%rdx)
.Ltmp1157:
    000004ea: 	movq	%rdi, %r14
    000004ed: 	jmp	.Ltmp1161 # Offset: 1261
.Ltmp1158:
    000004ef: 	movq	%r14, %rsi
    000004f2: 	movq	%rbp, %rdi
    000004f5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1269
    000004fa: 	movq	%rbx, %rsi
    000004fd: 	movq	%r14, %rdi
    00000500: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1280
.Ltmp1156:
    00000505: 	movq	%r13, %rax
    00000508: 	movq	%rbx, %r8
    0000050b: 	subq	%rbx, %rax
    0000050e: 	cmpq	$0x8, %rax
    00000512: 	jle	.Ltmp1162 # Offset: 1298
    00000518: 	movq	(%rbx), %rcx
    0000051b: 	movq	%r13, %rbp
    0000051e: 	nop # Size: 2
.Ltmp1167:
    00000520: 	movq	-0x8(%rbp), %rdi
    00000524: 	leaq	-0x8(%rbp), %rsi
    00000528: 	cmpq	%rdi, %rcx
    0000052b: 	jb	.Ltmp1163 # Offset: 1323
    0000052d: 	cmpq	%rbx, %rsi
    00000530: 	jbe	.Ltmp1164 # Offset: 1328
    00000536: 	movq	(%rbx), %rdx
    00000539: 	cmpq	%rdx, %rcx
    0000053c: 	jbe	.Ltmp1165 # Offset: 1340
    0000053e: 	leaq	0x8(%rbx), %rax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1166:
    00000548: 	movq	%rax, %rbx
    0000054b: 	movq	(%rax), %rdx
    0000054e: 	leaq	0x8(%rax), %rax
    00000552: 	cmpq	%rdx, %rcx
    00000555: 	ja	.Ltmp1166 # Offset: 1365
    00000557: 	cmpq	%rbx, %rsi
    0000055a: 	jbe	.Ltmp1164 # Offset: 1370
.Ltmp1165:
    00000560: 	movq	%rdx, (%rsi)
    00000563: 	movq	%rdi, (%rbx)
.Ltmp1163:
    00000566: 	movq	%rsi, %rbp
    00000569: 	jmp	.Ltmp1167 # Offset: 1385
.Ltmp1114:
    0000056b: 	movq	%rbp, %rax
    0000056e: 	subq	%r13, %rax
    00000571: 	cmpq	$0x8, %rax
    00000575: 	jle	.Ltmp1168 # Offset: 1397
    00000577: 	movq	(%r13), %rsi
    0000057b: 	movq	%rbp, %r14
    0000057e: 	movq	%r13, %rdx
    00000581: 	nopl	(%rax) # Size: 7
.Ltmp1173:
    00000588: 	movq	-0x8(%r14), %r8
    0000058c: 	leaq	-0x8(%r14), %rdi
    00000590: 	cmpq	%r8, %rsi
    00000593: 	jb	.Ltmp1169 # Offset: 1427
    00000595: 	cmpq	%rdx, %rdi
    00000598: 	jbe	.Ltmp1170 # Offset: 1432
    0000059a: 	movq	(%rdx), %rcx
    0000059d: 	cmpq	%rsi, %rcx
    000005a0: 	jae	.Ltmp1171 # Offset: 1440
    000005a2: 	leaq	0x8(%rdx), %rax
    000005a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1172:
    000005b0: 	movq	%rax, %rdx
    000005b3: 	movq	(%rax), %rcx
    000005b6: 	leaq	0x8(%rax), %rax
    000005ba: 	cmpq	%rcx, %rsi
    000005bd: 	ja	.Ltmp1172 # Offset: 1469
    000005bf: 	cmpq	%rdx, %rdi
    000005c2: 	jbe	.Ltmp1170 # Offset: 1474
.Ltmp1171:
    000005c4: 	movq	%rcx, (%rdi)
    000005c7: 	movq	%r8, (%rdx)
.Ltmp1169:
    000005ca: 	movq	%rdi, %r14
    000005cd: 	jmp	.Ltmp1173 # Offset: 1485
.Ltmp1170:
    000005cf: 	movq	%r14, %rsi
    000005d2: 	movq	%r13, %rdi
    000005d5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1493
    000005da: 	movq	%rbp, %rsi
    000005dd: 	movq	%r14, %rdi
    000005e0: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1504
.Ltmp1168:
    000005e5: 	movq	%r12, %rax
    000005e8: 	movq	%rbp, %r8
    000005eb: 	subq	%rbp, %rax
    000005ee: 	cmpq	$0x8, %rax
    000005f2: 	jle	.Ltmp1105 # Offset: 1522
    000005f8: 	movq	(%rbp), %rcx
    000005fc: 	movq	%r12, %r13
    000005ff: 	nop # Size: 1
.Ltmp1178:
    00000600: 	movq	-0x8(%r13), %rdi
    00000604: 	leaq	-0x8(%r13), %rsi
    00000608: 	cmpq	%rdi, %rcx
    0000060b: 	jb	.Ltmp1174 # Offset: 1547
    0000060d: 	cmpq	%rbp, %rsi
    00000610: 	jbe	.Ltmp1175 # Offset: 1552
    00000612: 	movq	(%rbp), %rdx
    00000616: 	cmpq	%rcx, %rdx
    00000619: 	jae	.Ltmp1176 # Offset: 1561
    0000061b: 	leaq	0x8(%rbp), %rax
    0000061f: 	nop # Size: 1
.Ltmp1177:
    00000620: 	movq	%rax, %rbp
    00000623: 	movq	(%rax), %rdx
    00000626: 	leaq	0x8(%rax), %rax
    0000062a: 	cmpq	%rdx, %rcx
    0000062d: 	ja	.Ltmp1177 # Offset: 1581
    0000062f: 	cmpq	%rbp, %rsi
    00000632: 	jbe	.Ltmp1175 # Offset: 1586
.Ltmp1176:
    00000634: 	movq	%rdx, (%rsi)
    00000637: 	movq	%rdi, (%rbp)
.Ltmp1174:
    0000063b: 	movq	%rsi, %r13
    0000063e: 	jmp	.Ltmp1178 # Offset: 1598
.Ltmp1175:
    00000640: 	movq	%r13, %rsi
    00000643: 	movq	%r8, %rdi
    00000646: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1606
    0000064b: 	popq	%rbx
    0000064c: 	movq	%r12, %rsi
    0000064f: 	popq	%rbp
    00000650: 	movq	%r13, %rdi
    00000653: 	popq	%r12
    00000655: 	popq	%r13
    00000657: 	popq	%r14
    00000659: 	jmp	.LBB069 # Offset: 1625
.Ltmp1164:
    0000065e: 	movq	%rbp, %rsi
    00000661: 	movq	%r8, %rdi
    00000664: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1636
    00000669: 	movq	%r13, %rsi
    0000066c: 	movq	%rbp, %rdi
    0000066f: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1647
    00000674: 	jmp	.Ltmp1162 # Offset: 1652
.Ltmp1152:
    00000679: 	movq	%r13, %rsi
    0000067c: 	movq	%r8, %rdi
    0000067f: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1663
    00000684: 	movq	%rbp, %rsi
    00000687: 	movq	%r13, %rdi
    0000068a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1674
    0000068f: 	jmp	.Ltmp1097 # Offset: 1679
.Ltmp1141:
    00000694: 	movq	%r14, %rsi
    00000697: 	movq	%r8, %rdi
    0000069a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1690
    0000069f: 	movq	%r13, %rsi
    000006a2: 	movq	%r14, %rdi
    000006a5: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 1701
    000006aa: 	jmp	.Ltmp1139 # Offset: 1706
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_"

Binary Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x8e10
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0x8e10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPddEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r9
    0000000c: 	movq	%rsi, %rcx
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp1179 # Offset: 21
    0000001b: 	movq	%rdx, %rdi
    0000001e: 	jmp	.Ltmp1180 # Offset: 30
.Ltmp1182:
    00000020: 	leaq	-0x1(%rax), %r10
    00000024: 	leaq	(%rax,%rax), %rsi
    00000028: 	movsd	%xmm2, (%rcx,%rdi,8)
    0000002d: 	leaq	(%rcx,%r10,8), %rdx
    00000031: 	movq	%r10, %rax
    00000034: 	cmpq	%rsi, %r9
    00000037: 	jle	.Ltmp1181 # Offset: 55
.Ltmp1183:
    00000039: 	movq	%rax, %rdi
    0000003c: 	movq	%rsi, %rax
.Ltmp1180:
    0000003f: 	leaq	(,%rax,8), %rdx
    00000047: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000004d: 	addq	%rcx, %rdx
    00000050: 	movsd	(%rdx), %xmm1
    00000054: 	comisd	%xmm2, %xmm1
    00000058: 	jbe	.Ltmp1182 # Offset: 88
    0000005a: 	leaq	0x2(%rax,%rax), %rsi
    0000005f: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000064: 	cmpq	%rsi, %r9
    00000067: 	jg	.Ltmp1183 # Offset: 103
.Ltmp1181:
    00000069: 	cmpq	%rsi, %r9
    0000006c: 	je	.Ltmp1184 # Offset: 108
.Ltmp1189:
    00000072: 	leaq	-0x1(%rax), %rdi
    00000076: 	movq	%rdi, %rsi
    00000079: 	shrq	$0x3f, %rsi
    0000007d: 	addq	%rdi, %rsi
    00000080: 	sarq	%rsi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1185 # Offset: 134
    00000088: 	jmp	.Ltmp1186 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1188:
    00000090: 	movsd	%xmm1, (%rdx)
    00000094: 	leaq	-0x1(%rsi), %rdx
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rsi, %rax
    000000ab: 	cmpq	%rsi, %r8
    000000ae: 	jge	.Ltmp1187 # Offset: 174
    000000b0: 	movq	%rdx, %rsi
.Ltmp1185:
    000000b3: 	leaq	(%rcx,%rsi,8), %rdi
    000000b7: 	leaq	(%rcx,%rax,8), %rdx
    000000bb: 	movsd	(%rdi), %xmm1
    000000bf: 	comisd	%xmm1, %xmm0
    000000c3: 	ja	.Ltmp1188 # Offset: 195
.Ltmp1186:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1187:
    000000d0: 	movq	%rdi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1179:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1186 # Offset: 228
    000000e6: 	movq	%rax, %rsi
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1184:
    000000f0: 	movsd	-0x8(%rcx,%rsi,8), %xmm1
    000000f6: 	leaq	-0x1(%rsi), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rcx,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1189 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x8f20
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x8f20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %rcx
    00000012: 	cmpq	%rdi, %rdx
    00000015: 	jge	.Ltmp1190 # Offset: 21
    0000001b: 	movq	%r8, %r9
    0000001e: 	jmp	.Ltmp1191 # Offset: 30
.Ltmp1193:
    00000020: 	movq	%rax, %r9
.Ltmp1191:
    00000023: 	leaq	-0x1(%rdx), %rax
    00000027: 	leaq	(,%rax,8), %rdi
    0000002f: 	leaq	(%rcx,%rdi), %rsi
    00000033: 	leaq	0x8(%rdi,%rcx), %rdi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	(%rdi), %xmm2
    00000040: 	comisd	%xmm1, %xmm2
    00000044: 	jbe	.Ltmp1192 # Offset: 68
    00000046: 	movq	%rdx, %rax
    00000049: 	movapd	%xmm2, %xmm1
    0000004d: 	movq	%rdi, %rsi
    00000050: 	addq	$0x1, %rdx
.Ltmp1192:
    00000054: 	addq	%rdx, %rdx
    00000057: 	movsd	%xmm1, (%rcx,%r9,8)
    0000005d: 	cmpq	%rdx, %r10
    00000060: 	jg	.Ltmp1193 # Offset: 96
    00000062: 	je	.Ltmp1194 # Offset: 98
.Ltmp1199:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1195 # Offset: 120
    0000007a: 	jmp	.Ltmp1196 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1198:
    00000080: 	leaq	-0x1(%rdi), %rdx
    00000084: 	movsd	%xmm1, (%rsi)
    00000088: 	movq	%rdx, %rax
    0000008b: 	shrq	$0x3f, %rax
    0000008f: 	addq	%rdx, %rax
    00000092: 	sarq	%rax
    00000095: 	movq	%rax, %rdx
    00000098: 	movq	%rdi, %rax
    0000009b: 	cmpq	%rdi, %r8
    0000009e: 	jge	.Ltmp1197 # Offset: 158
    000000a0: 	movq	%rdx, %rdi
.Ltmp1195:
    000000a3: 	leaq	(%rcx,%rdi,8), %r9
    000000a7: 	leaq	(%rcx,%rax,8), %rsi
    000000ab: 	movsd	(%r9), %xmm1
    000000b0: 	comisd	%xmm1, %xmm0
    000000b4: 	ja	.Ltmp1198 # Offset: 180
.Ltmp1196:
    000000b6: 	movsd	%xmm0, (%rsi)
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1197:
    000000c0: 	movq	%r9, %rsi
    000000c3: 	movsd	%xmm0, (%rsi)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1190:
    000000d0: 	leaq	(%rsi,%r8,8), %rsi
    000000d4: 	jne	.Ltmp1196 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1194:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp1199 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x9020
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x9020
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	0x8(%rsi), %rcx
    00000010: 	movq	%rdi, %r10
    00000013: 	cmpq	%rdi, %rdx
    00000016: 	jge	.Ltmp1200 # Offset: 22
    0000001c: 	movq	%r8, %r9
    0000001f: 	jmp	.Ltmp1201 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1203:
    00000028: 	movq	%rax, %r9
.Ltmp1201:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,8), %rdi
    00000037: 	leaq	(%rcx,%rdi), %rsi
    0000003b: 	leaq	0x8(%rcx,%rdi), %rdi
    00000040: 	movsd	(%rsi), %xmm1
    00000044: 	movsd	(%rdi), %xmm2
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp1202 # Offset: 76
    0000004e: 	movq	%rdx, %rax
    00000051: 	movapd	%xmm2, %xmm1
    00000055: 	movq	%rdi, %rsi
    00000058: 	addq	$0x1, %rdx
.Ltmp1202:
    0000005c: 	addq	%rdx, %rdx
    0000005f: 	movsd	%xmm1, (%rcx,%r9,8)
    00000065: 	cmpq	%rdx, %r10
    00000068: 	jg	.Ltmp1203 # Offset: 104
    0000006a: 	je	.Ltmp1204 # Offset: 106
.Ltmp1209:
    0000006c: 	leaq	-0x1(%rax), %rdx
    00000070: 	movq	%rdx, %rdi
    00000073: 	shrq	$0x3f, %rdi
    00000077: 	addq	%rdx, %rdi
    0000007a: 	sarq	%rdi
    0000007d: 	cmpq	%r8, %rax
    00000080: 	jg	.Ltmp1205 # Offset: 128
    00000082: 	jmp	.Ltmp1206 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1208:
    00000088: 	leaq	-0x1(%rdi), %rdx
    0000008c: 	movsd	%xmm1, (%rsi)
    00000090: 	movq	%rdx, %rax
    00000093: 	shrq	$0x3f, %rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	sarq	%rax
    0000009d: 	movq	%rax, %rdx
    000000a0: 	movq	%rdi, %rax
    000000a3: 	cmpq	%rdi, %r8
    000000a6: 	jge	.Ltmp1207 # Offset: 166
    000000a8: 	movq	%rdx, %rdi
.Ltmp1205:
    000000ab: 	leaq	(%rcx,%rdi,8), %r9
    000000af: 	leaq	(%rcx,%rax,8), %rsi
    000000b3: 	movsd	(%r9), %xmm1
    000000b8: 	comisd	%xmm1, %xmm0
    000000bc: 	ja	.Ltmp1208 # Offset: 188
.Ltmp1206:
    000000be: 	movsd	%xmm0, (%rsi)
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1207:
    000000c8: 	movq	%r9, %rsi
    000000cb: 	movsd	%xmm0, (%rsi)
    000000cf: 	retq # Offset: 207
.Ltmp1200:
    000000d0: 	leaq	(%rcx,%r8,8), %rsi
    000000d4: 	jne	.Ltmp1206 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1204:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp1209 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEEvlT_lT0_" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x9120
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x9120
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	0x8(%rsi), %rcx
    00000010: 	movq	%rdi, %r10
    00000013: 	cmpq	%rdi, %rdx
    00000016: 	jge	.Ltmp1210 # Offset: 22
    0000001c: 	movq	%r8, %r9
    0000001f: 	jmp	.Ltmp1211 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1213:
    00000028: 	movq	%rax, %r9
.Ltmp1211:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,8), %rdi
    00000037: 	leaq	(%rcx,%rdi), %rsi
    0000003b: 	leaq	0x8(%rcx,%rdi), %rdi
    00000040: 	movsd	(%rsi), %xmm1
    00000044: 	movsd	(%rdi), %xmm2
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp1212 # Offset: 76
    0000004e: 	movq	%rdx, %rax
    00000051: 	movapd	%xmm2, %xmm1
    00000055: 	movq	%rdi, %rsi
    00000058: 	addq	$0x1, %rdx
.Ltmp1212:
    0000005c: 	addq	%rdx, %rdx
    0000005f: 	movsd	%xmm1, (%rcx,%r9,8)
    00000065: 	cmpq	%rdx, %r10
    00000068: 	jg	.Ltmp1213 # Offset: 104
    0000006a: 	je	.Ltmp1214 # Offset: 106
.Ltmp1219:
    0000006c: 	leaq	-0x1(%rax), %rdx
    00000070: 	movq	%rdx, %rdi
    00000073: 	shrq	$0x3f, %rdi
    00000077: 	addq	%rdx, %rdi
    0000007a: 	sarq	%rdi
    0000007d: 	cmpq	%r8, %rax
    00000080: 	jg	.Ltmp1215 # Offset: 128
    00000082: 	jmp	.Ltmp1216 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1218:
    00000088: 	leaq	-0x1(%rdi), %rdx
    0000008c: 	movsd	%xmm1, (%rsi)
    00000090: 	movq	%rdx, %rax
    00000093: 	shrq	$0x3f, %rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	sarq	%rax
    0000009d: 	movq	%rax, %rdx
    000000a0: 	movq	%rdi, %rax
    000000a3: 	cmpq	%rdi, %r8
    000000a6: 	jge	.Ltmp1217 # Offset: 166
    000000a8: 	movq	%rdx, %rdi
.Ltmp1215:
    000000ab: 	leaq	(%rcx,%rdi,8), %r9
    000000af: 	leaq	(%rcx,%rax,8), %rsi
    000000b3: 	movsd	(%r9), %xmm1
    000000b8: 	comisd	%xmm1, %xmm0
    000000bc: 	ja	.Ltmp1218 # Offset: 188
.Ltmp1216:
    000000be: 	movsd	%xmm0, (%rsi)
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1217:
    000000c8: 	movq	%r9, %rsi
    000000cb: 	movsd	%xmm0, (%rsi)
    000000cf: 	retq # Offset: 207
.Ltmp1210:
    000000d0: 	leaq	(%rcx,%r8,8), %rsi
    000000d4: 	jne	.Ltmp1216 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1214:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp1219 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEEvlT_lT0_"

Binary Function "_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x9220
  Size        : 0xd0
  MaxSize     : 0xd0
  Offset      : 0x9220
  Section     : .text
  Orc Section : .local.text._ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rdi, %r13
    0000000b: 	pushq	%r12
    0000000d: 	pushq	%rbp
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x20, %rsp
    00000013: 	movq	0x8(%rdi), %r12
    00000017: 	movq	0x8(%rsi), %rbp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	subq	%r12, %rbp
    0000002e: 	movq	%rbp, %rbx
    00000031: 	shrq	$0x3f, %rbp
    00000035: 	sarq	$0x3, %rbx
    00000039: 	addq	%rbx, %rbp
    0000003c: 	sarq	%rbp
    0000003f: 	subq	$0x1, %rbp
    00000043: 	js	.Ltmp1220 # Offset: 67
    00000045: 	movq	%rsp, %r14
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1221:
    00000050: 	movsd	(%r12,%rbp,8), %xmm0
    00000056: 	movq	0x8(%r13), %rax
    0000005a: 	movq	%rbp, %rdx
    0000005d: 	movq	%r14, %rsi
    00000060: 	movq	%rbx, %rdi
    00000063: 	movq	%rax, 0x8(%rsp)
    00000068: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEEvlT_lT0_ # Offset: 104
    0000006d: 	subq	$0x1, %rbp
    00000071: 	jae	.Ltmp1221 # Offset: 113
.Ltmp1220:
    00000073: 	subq	$0x1, %rbx
    00000077: 	testq	%rbx, %rbx
    0000007a: 	jle	.Ltmp1222 # Offset: 122
    0000007c: 	movq	%rsp, %r14
    0000007f: 	nop # Size: 1
.Ltmp1223:
    00000080: 	movsd	(%r12), %xmm1
    00000086: 	movq	0x8(%r13), %rax
    0000008a: 	xorl	%edx, %edx
    0000008c: 	movq	%rbx, %rdi
    0000008f: 	movsd	(%r12,%rbx,8), %xmm0
    00000095: 	movq	%r14, %rsi
    00000098: 	movsd	%xmm1, (%r12,%rbx,8)
    0000009e: 	movq	%rax, 0x8(%rsp)
    000000a3: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEEvlT_lT0_ # Offset: 163
    000000a8: 	subq	$0x1, %rbx
    000000ac: 	jne	.Ltmp1223 # Offset: 172
.Ltmp1222:
    000000ae: 	movq	0x18(%rsp), %rax
    000000b3: 	subq	%fs:0x28, %rax
    000000bc: 	jne	.Ltmp1224 # Offset: 188
    000000be: 	addq	$0x20, %rsp
    000000c2: 	popq	%rbx
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	retq # Offset: 202
.Ltmp1224:
    000000cb: 	callq	__stack_chk_fail@PLT # Offset: 203
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_"

Binary Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_vector.cpp/1
  Number      : 76
  State       : disassembled
  Address     : 0x92f0
  Size        : 0x1e6
  MaxSize     : 0x1f0
  Offset      : 0x92f0
  Section     : .text
  Orc Section : .local.text._Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rcx, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	xorl	%ebx, %ebx
    00000012: 	subq	$0x58, %rsp
    00000016: 	movq	%rdi, 0x8(%rsp)
    0000001b: 	leaq	0x30(%rsp), %r15
    00000020: 	leaq	0x20(%rsp), %r14
    00000025: 	movq	%rsi, 0x10(%rsp)
    0000002a: 	movq	%r8, 0x18(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x48(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	movl	%eax, 0x4(%rsp)
    00000055: 	testl	%eax, %eax
    00000057: 	jle	.Ltmp1225 # Offset: 87
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1232:
    00000060: 	movq	0x10(%rsp), %rax
    00000065: 	movq	0x8(%r13), %rbp
    00000069: 	movq	0x8(%rax), %r8
    0000006d: 	movq	0x8(%rsp), %rax
    00000072: 	movq	0x8(%rax), %rsi
    00000076: 	cmpq	%rsi, %r8
    00000079: 	je	.Ltmp1226 # Offset: 121
    0000007b: 	subq	%rsi, %r8
    0000007e: 	leaq	0x8(%rsi), %rdx
    00000082: 	leaq	-0x8(%r8), %rdi
    00000086: 	cmpq	%rdx, %rbp
    00000089: 	je	.Ltmp1227 # Offset: 137
    0000008f: 	cmpq	$0x10, %rdi
    00000093: 	jbe	.Ltmp1227 # Offset: 147
    00000099: 	shrq	$0x3, %rdi
    0000009d: 	xorl	%edx, %edx
    0000009f: 	addq	$0x1, %rdi
    000000a3: 	movq	%rdi, %r8
    000000a6: 	shrq	%r8
    000000a9: 	shlq	$0x4, %r8
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp1228:
    000000b0: 	movupd	(%rsi,%rdx), %xmm1
    000000b5: 	movups	%xmm1, (%rbp,%rdx)
    000000ba: 	addq	$0x10, %rdx
    000000be: 	cmpq	%rdx, %r8
    000000c1: 	jne	.Ltmp1228 # Offset: 193
    000000c3: 	movq	%rdi, %r8
    000000c6: 	andq	$-0x2, %r8
    000000ca: 	leaq	(,%r8,8), %rdx
    000000d2: 	addq	%rdx, %rsi
    000000d5: 	addq	%rbp, %rdx
    000000d8: 	cmpq	%r8, %rdi
    000000db: 	je	.Ltmp1226 # Offset: 219
    000000dd: 	movsd	(%rsi), %xmm0
    000000e1: 	movsd	%xmm0, (%rdx)
.Ltmp1226:
    000000e5: 	movq	0x8(%r12), %rdx
    000000ea: 	movq	%r15, %rsi
    000000ed: 	movq	%r14, %rdi
    000000f0: 	movq	%rdx, 0x38(%rsp)
    000000f5: 	movq	0x8(%r13), %rdx
    000000f9: 	movq	%rdx, 0x28(%rsp)
    000000fe: 	callq	_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEEEvT_SB_ # Offset: 254
    00000103: 	movq	0x8(%r12), %rsi
    00000108: 	leaq	0x8(%rbp), %rax
    0000010c: 	jmp	.Ltmp1229 # Offset: 268
    0000010e: 	nop # Size: 2
.Ltmp1231:
    00000110: 	addq	$0x8, %rax
    00000114: 	movsd	-0x10(%rax), %xmm0
    00000119: 	comisd	(%rdx), %xmm0
    0000011d: 	ja	.Ltmp1230 # Offset: 285
.Ltmp1229:
    0000011f: 	movq	%rax, %rdx
    00000122: 	cmpq	%rax, %rsi
    00000125: 	jne	.Ltmp1231 # Offset: 293
    00000127: 	addl	$0x1, %ebx
    0000012a: 	cmpl	0x4(%rsp), %ebx
    0000012e: 	jl	.Ltmp1232 # Offset: 302
.Ltmp1225:
    00000134: 	callq	clock@PLT # Offset: 308
    00000139: 	movq	%rax, end_time(%rip)
    00000140: 	movq	0x48(%rsp), %rdx
    00000145: 	subq	%fs:0x28, %rdx
    0000014e: 	jne	.Ltmp1233 # Offset: 334
    00000154: 	subq	start_time(%rip), %rax
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	movq	0x18(%rsp), %rdi
    00000164: 	cvtsi2sd	%rax, %xmm0
    00000169: 	divsd	DATAat0x15638(%rip), %xmm0
    00000171: 	addq	$0x58, %rsp
    00000175: 	popq	%rbx
    00000176: 	popq	%rbp
    00000177: 	popq	%r12
    00000179: 	popq	%r13
    0000017b: 	popq	%r14
    0000017d: 	popq	%r15
    0000017f: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 383
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp1230:
    00000188: 	movq	0x18(%rsp), %rax
    0000018d: 	leaq	DATAat0x151ba(%rip), %rsi
    00000194: 	movl	$0x1, %edi
    00000199: 	addl	$0x1, %ebx
    0000019c: 	movq	(%rax), %rdx
    0000019f: 	xorl	%eax, %eax
    000001a1: 	callq	__printf_chk@PLT # Offset: 417
    000001a6: 	movl	iterations(%rip), %eax
    000001ac: 	movl	%eax, 0x4(%rsp)
    000001b0: 	cmpl	0x4(%rsp), %ebx
    000001b4: 	jl	.Ltmp1232 # Offset: 436
    000001ba: 	jmp	.Ltmp1225 # Offset: 442
    000001bf: 	nop # Size: 1
.Ltmp1227:
    000001c0: 	xorl	%edx, %edx
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1234:
    000001c8: 	movsd	(%rsi,%rdx), %xmm0
    000001cd: 	movsd	%xmm0, (%rbp,%rdx)
    000001d3: 	addq	$0x8, %rdx
    000001d7: 	cmpq	%r8, %rdx
    000001da: 	jne	.Ltmp1234 # Offset: 474
    000001dc: 	jmp	.Ltmp1226 # Offset: 476
.Ltmp1233:
    000001e1: 	callq	__stack_chk_fail@PLT # Offset: 481
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEdEEvlT_lT0_" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x94e0
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x94e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %rcx
    00000012: 	cmpq	%rdi, %rdx
    00000015: 	jge	.Ltmp1235 # Offset: 21
    0000001b: 	movq	%r8, %r9
    0000001e: 	jmp	.Ltmp1236 # Offset: 30
.Ltmp1238:
    00000020: 	movq	%rax, %r9
.Ltmp1236:
    00000023: 	leaq	-0x1(%rdx), %rax
    00000027: 	leaq	(,%rax,8), %rdi
    0000002f: 	leaq	(%rcx,%rdi), %rsi
    00000033: 	leaq	0x8(%rdi,%rcx), %rdi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	(%rdi), %xmm2
    00000040: 	comisd	%xmm1, %xmm2
    00000044: 	jbe	.Ltmp1237 # Offset: 68
    00000046: 	movq	%rdx, %rax
    00000049: 	movapd	%xmm2, %xmm1
    0000004d: 	movq	%rdi, %rsi
    00000050: 	addq	$0x1, %rdx
.Ltmp1237:
    00000054: 	addq	%rdx, %rdx
    00000057: 	movsd	%xmm1, (%rcx,%r9,8)
    0000005d: 	cmpq	%rdx, %r10
    00000060: 	jg	.Ltmp1238 # Offset: 96
    00000062: 	je	.Ltmp1239 # Offset: 98
.Ltmp1244:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1240 # Offset: 120
    0000007a: 	jmp	.Ltmp1241 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1243:
    00000080: 	leaq	-0x1(%rdi), %rdx
    00000084: 	movsd	%xmm1, (%rsi)
    00000088: 	movq	%rdx, %rax
    0000008b: 	shrq	$0x3f, %rax
    0000008f: 	addq	%rdx, %rax
    00000092: 	sarq	%rax
    00000095: 	movq	%rax, %rdx
    00000098: 	movq	%rdi, %rax
    0000009b: 	cmpq	%rdi, %r8
    0000009e: 	jge	.Ltmp1242 # Offset: 158
    000000a0: 	movq	%rdx, %rdi
.Ltmp1240:
    000000a3: 	leaq	(%rcx,%rdi,8), %r9
    000000a7: 	leaq	(%rcx,%rax,8), %rsi
    000000ab: 	movsd	(%r9), %xmm1
    000000b0: 	comisd	%xmm1, %xmm0
    000000b4: 	ja	.Ltmp1243 # Offset: 180
.Ltmp1241:
    000000b6: 	movsd	%xmm0, (%rsi)
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1242:
    000000c0: 	movq	%r9, %rsi
    000000c3: 	movsd	%xmm0, (%rsi)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1235:
    000000d0: 	leaq	(%rsi,%r8,8), %rsi
    000000d4: 	jne	.Ltmp1241 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1239:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp1244 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEdEEvlT_lT0_"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x95e0
  Size        : 0x33b9
  MaxSize     : 0x33c0
  Offset      : 0x95e0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp1245:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1245 # Offset: 37
    00000027: 	subq	$0xef8, %rsp
    0000002e: 	leaq	DATAat0x151fe(%rip), %rsi
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x7ee8(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	leaq	0x140(%rsp), %rax
    00000050: 	leaq	0x4060(%rsp), %r12
    00000058: 	movq	%rax, %rdi
    0000005b: 	movq	%rax, 0x20(%rsp)
    00000060: 	leaq	0x1e0(%rsp), %rbx
    00000068: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 104
    0000006d: 	leaq	0x120(%rsp), %rax
    00000075: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    0000007d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    00000085: 	movq	%rax, %rsi
    00000088: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000008f: 	movq	%rax, 0x48(%rsp)
    00000094: 	movaps	%xmm4, 0x120(%rsp)
    0000009c: 	movaps	%xmm5, 0x130(%rsp)
    000000a4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 164
    000000a9: 	movl	iterations(%rip), %eax
    000000af: 	movq	%r12, 0x50(%rsp)
    000000b4: 	movsd	init_value(%rip), %xmm0
    000000bc: 	movl	%eax, 0xbc(%rsp)
    000000c3: 	cvttsd2si	%xmm0, %eax
    000000c7: 	unpcklpd	%xmm0, %xmm0
    000000cb: 	addl	$0xea, %eax
    000000d0: 	cltq
    000000d2: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000d9: 	movq	%rbx, %rax
.Ltmp1246:
    000000dc: 	movaps	%xmm0, (%rax)
    000000df: 	addq	$0x10, %rax
    000000e3: 	cmpq	%r12, %rax
    000000e6: 	jne	.Ltmp1246 # Offset: 230
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	leaq	0x100(%rsp), %rdi
    000000f4: 	movl	$0x7d0, %esi
    000000f9: 	movq	$0x0, 0x110(%rsp)
    00000105: 	movaps	%xmm0, 0x100(%rsp)
    0000010d: 	callq	_ZNSt6vectorIdSaIdEE17_M_default_appendEm # Offset: 269
    00000112: 	movq	0x108(%rsp), %r15
    0000011a: 	movq	0x100(%rsp), %rbp
    00000122: 	movsd	init_value(%rip), %xmm0
    0000012a: 	cmpq	%r15, %rbp
    0000012d: 	je	.Ltmp1247 # Offset: 301
    0000012f: 	movq	%r15, %rcx
    00000132: 	movq	%rbp, %rax
    00000135: 	subq	%rbp, %rcx
    00000138: 	leaq	-0x8(%rcx), %rdx
    0000013c: 	shrq	$0x3, %rdx
    00000140: 	addq	$0x1, %rdx
    00000144: 	cmpq	$0x8, %rcx
    00000148: 	je	.Ltmp1248 # Offset: 328
    0000014a: 	movq	%rdx, %rcx
    0000014d: 	movapd	%xmm0, %xmm1
    00000151: 	shrq	%rcx
    00000154: 	unpcklpd	%xmm1, %xmm1
    00000158: 	shlq	$0x4, %rcx
    0000015c: 	addq	%rbp, %rcx
.Ltmp1249:
    0000015f: 	movups	%xmm1, (%rax)
    00000162: 	addq	$0x10, %rax
    00000166: 	cmpq	%rcx, %rax
    00000169: 	jne	.Ltmp1249 # Offset: 361
    0000016b: 	movq	%rdx, %rcx
    0000016e: 	andq	$-0x2, %rcx
    00000172: 	leaq	(%rbp,%rcx,8), %rax
    00000177: 	cmpq	%rdx, %rcx
    0000017a: 	je	.Ltmp1247 # Offset: 378
.Ltmp1248:
    0000017c: 	movsd	%xmm0, (%rax)
.Ltmp1247:
    00000180: 	movq	0x20(%rsp), %rsi
    00000185: 	leaq	DATAat0x15205(%rip), %rdx
    0000018c: 	movq	%r12, %rdi
    0000018f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 399
    00000194: 	callq	clock@PLT # Offset: 404
    00000199: 	movl	iterations(%rip), %edx
    0000019f: 	movq	%rax, start_time(%rip)
    000001a6: 	testl	%edx, %edx
    000001a8: 	jle	.Ltmp1250 # Offset: 424
    000001aa: 	movsd	DATAat0x15648(%rip), %xmm7
    000001b2: 	pxor	%xmm6, %xmm6
    000001b6: 	xorl	%r13d, %r13d
    000001b9: 	leaq	DATAat0x151bf(%rip), %r14
    000001c0: 	movsd	%xmm6, 0x8(%rsp)
    000001c6: 	movsd	%xmm7, 0x10(%rsp)
.Ltmp1253:
    000001cc: 	movq	%rbx, %rax
    000001cf: 	pxor	%xmm0, %xmm0
    000001d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1251:
    000001d8: 	movsd	(%rax), %xmm1
    000001dc: 	addq	$0x10, %rax
    000001e0: 	addsd	%xmm1, %xmm0
    000001e4: 	movsd	-0x8(%rax), %xmm1
    000001e9: 	addsd	%xmm1, %xmm0
    000001ed: 	cmpq	%rax, %r12
    000001f0: 	jne	.Ltmp1251 # Offset: 496
    000001f2: 	movsd	0x10(%rsp), %xmm1
    000001f8: 	mulsd	init_value(%rip), %xmm1
    00000200: 	ucomisd	%xmm1, %xmm0
    00000204: 	jp	.Ltmp1252 # Offset: 516
    0000020a: 	jne	.Ltmp1252 # Offset: 522
.Ltmp1480:
    00000210: 	addl	$0x1, %r13d
    00000214: 	cmpl	%edx, %r13d
    00000217: 	jl	.Ltmp1253 # Offset: 535
.Ltmp1250:
    00000219: 	callq	clock@PLT # Offset: 537
    0000021e: 	pxor	%xmm0, %xmm0
    00000222: 	movq	%r12, %rdi
    00000225: 	movq	%rax, end_time(%rip)
    0000022c: 	subq	start_time(%rip), %rax
    00000233: 	cvtsi2sd	%rax, %xmm0
    00000238: 	divsd	DATAat0x15638(%rip), %xmm0
    00000240: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 576
    00000245: 	movq	0x4060(%rsp), %rdi
    0000024d: 	leaq	0x4070(%rsp), %rax
    00000255: 	movq	%rax, 0x18(%rsp)
    0000025a: 	cmpq	%rax, %rdi
    0000025d: 	je	.Ltmp1254 # Offset: 605
    0000025f: 	movq	0x4070(%rsp), %rax
    00000267: 	leaq	0x1(%rax), %rsi
    0000026b: 	callq	_ZdlPvm@PLT # Offset: 619
.Ltmp1254:
    00000270: 	movq	0x20(%rsp), %rsi
    00000275: 	leaq	DATAat0x15221(%rip), %rdx
    0000027c: 	movq	%r12, %rdi
    0000027f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 639
    00000284: 	callq	clock@PLT # Offset: 644
    00000289: 	movl	iterations(%rip), %edx
    0000028f: 	movq	%rax, start_time(%rip)
    00000296: 	testl	%edx, %edx
    00000298: 	jle	.Ltmp1255 # Offset: 664
    0000029e: 	movq	%r15, %rsi
    000002a1: 	movsd	DATAat0x15648(%rip), %xmm5
    000002a9: 	movl	$0x0, 0x28(%rsp)
    000002b1: 	pxor	%xmm4, %xmm4
    000002b5: 	subq	%rbp, %rsi
    000002b8: 	movsd	%xmm4, 0x8(%rsp)
    000002be: 	leaq	-0x8(%rsi), %rax
    000002c2: 	movq	%rsi, 0x30(%rsp)
    000002c7: 	shrq	$0x3, %rax
    000002cb: 	movsd	%xmm5, 0x10(%rsp)
    000002d1: 	leaq	0x1(%rax), %rdi
    000002d5: 	movq	%rdi, %rax
    000002d8: 	movq	%rdi, 0x40(%rsp)
    000002dd: 	andq	$-0x2, %rdi
    000002e1: 	shrq	%rax
    000002e4: 	leaq	(%rbp,%rdi,8), %r13
    000002e9: 	movq	%rdi, 0x38(%rsp)
    000002ee: 	shlq	$0x4, %rax
    000002f2: 	cmpq	$0x8, %rsi
    000002f6: 	cmoveq	%rbp, %r13
    000002fa: 	leaq	(%rax,%rbp), %r14
.Ltmp1260:
    000002fe: 	pxor	%xmm0, %xmm0
    00000302: 	cmpq	%r15, %rbp
    00000305: 	je	.Ltmp1256 # Offset: 773
    00000307: 	cmpq	$0x8, 0x30(%rsp)
    0000030d: 	je	.Ltmp1257 # Offset: 781
    00000313: 	movq	%rbp, %rax
    00000316: 	pxor	%xmm0, %xmm0
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1258:
    00000320: 	movsd	(%rax), %xmm1
    00000324: 	addq	$0x10, %rax
    00000328: 	addsd	%xmm1, %xmm0
    0000032c: 	movsd	-0x8(%rax), %xmm1
    00000331: 	addsd	%xmm1, %xmm0
    00000335: 	cmpq	%rax, %r14
    00000338: 	jne	.Ltmp1258 # Offset: 824
    0000033a: 	movq	0x40(%rsp), %rdi
    0000033f: 	cmpq	%rdi, 0x38(%rsp)
    00000344: 	je	.Ltmp1256 # Offset: 836
.Ltmp1553:
    00000346: 	addsd	(%r13), %xmm0
.Ltmp1256:
    0000034c: 	movsd	0x10(%rsp), %xmm1
    00000352: 	mulsd	init_value(%rip), %xmm1
    0000035a: 	ucomisd	%xmm1, %xmm0
    0000035e: 	jp	.Ltmp1259 # Offset: 862
    00000364: 	jne	.Ltmp1259 # Offset: 868
.Ltmp1479:
    0000036a: 	addl	$0x1, 0x28(%rsp)
    0000036f: 	movl	0x28(%rsp), %eax
    00000373: 	cmpl	%edx, %eax
    00000375: 	jl	.Ltmp1260 # Offset: 885
.Ltmp1255:
    00000377: 	callq	clock@PLT # Offset: 887
    0000037c: 	pxor	%xmm0, %xmm0
    00000380: 	movq	%r12, %rdi
    00000383: 	movq	%rax, end_time(%rip)
    0000038a: 	subq	start_time(%rip), %rax
    00000391: 	cvtsi2sd	%rax, %xmm0
    00000396: 	divsd	DATAat0x15638(%rip), %xmm0
    0000039e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 926
    000003a3: 	movq	0x4060(%rsp), %rdi
    000003ab: 	cmpq	0x18(%rsp), %rdi
    000003b0: 	je	.Ltmp1261 # Offset: 944
    000003b2: 	movq	0x4070(%rsp), %rax
    000003ba: 	leaq	0x1(%rax), %rsi
    000003be: 	callq	_ZdlPvm@PLT # Offset: 958
.Ltmp1261:
    000003c3: 	movq	0x20(%rsp), %rsi
    000003c8: 	leaq	DATAat0x152f8(%rip), %rdx
    000003cf: 	movq	%r12, %rdi
    000003d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 978
    000003d7: 	callq	clock@PLT # Offset: 983
    000003dc: 	movl	iterations(%rip), %edx
    000003e2: 	movq	%rax, start_time(%rip)
    000003e9: 	testl	%edx, %edx
    000003eb: 	jle	.Ltmp1262 # Offset: 1003
    000003ed: 	movsd	DATAat0x15648(%rip), %xmm7
    000003f5: 	pxor	%xmm6, %xmm6
    000003f9: 	xorl	%r13d, %r13d
    000003fc: 	leaq	DATAat0x151bf(%rip), %r14
    00000403: 	movsd	%xmm6, 0x8(%rsp)
    00000409: 	movsd	%xmm7, 0x10(%rsp)
.Ltmp1265:
    0000040f: 	movq	%rbx, %rax
    00000412: 	pxor	%xmm0, %xmm0
    00000416: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1263:
    00000420: 	movsd	(%rax), %xmm1
    00000424: 	addq	$0x10, %rax
    00000428: 	addsd	%xmm1, %xmm0
    0000042c: 	movsd	-0x8(%rax), %xmm1
    00000431: 	addsd	%xmm1, %xmm0
    00000435: 	cmpq	%r12, %rax
    00000438: 	jne	.Ltmp1263 # Offset: 1080
    0000043a: 	movsd	0x10(%rsp), %xmm1
    00000440: 	mulsd	init_value(%rip), %xmm1
    00000448: 	ucomisd	%xmm1, %xmm0
    0000044c: 	jp	.Ltmp1264 # Offset: 1100
    00000452: 	jne	.Ltmp1264 # Offset: 1106
.Ltmp1478:
    00000458: 	addl	$0x1, %r13d
    0000045c: 	cmpl	%edx, %r13d
    0000045f: 	jl	.Ltmp1265 # Offset: 1119
.Ltmp1262:
    00000461: 	callq	clock@PLT # Offset: 1121
    00000466: 	pxor	%xmm0, %xmm0
    0000046a: 	movq	%r12, %rdi
    0000046d: 	movq	%rax, end_time(%rip)
    00000474: 	subq	start_time(%rip), %rax
    0000047b: 	cvtsi2sd	%rax, %xmm0
    00000480: 	divsd	DATAat0x15638(%rip), %xmm0
    00000488: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1160
    0000048d: 	movq	0x4060(%rsp), %rdi
    00000495: 	cmpq	0x18(%rsp), %rdi
    0000049a: 	je	.Ltmp1266 # Offset: 1178
    0000049c: 	movq	0x4070(%rsp), %rax
    000004a4: 	leaq	0x1(%rax), %rsi
    000004a8: 	callq	_ZdlPvm@PLT # Offset: 1192
.Ltmp1266:
    000004ad: 	movq	0x20(%rsp), %rsi
    000004b2: 	leaq	DATAat0x15320(%rip), %rdx
    000004b9: 	movq	%r12, %rdi
    000004bc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1212
    000004c1: 	callq	clock@PLT # Offset: 1217
    000004c6: 	movl	iterations(%rip), %edx
    000004cc: 	movq	%rax, start_time(%rip)
    000004d3: 	testl	%edx, %edx
    000004d5: 	jle	.Ltmp1267 # Offset: 1237
    000004db: 	movq	%r15, %rsi
    000004de: 	movsd	DATAat0x15648(%rip), %xmm5
    000004e6: 	movl	$0x0, 0x28(%rsp)
    000004ee: 	pxor	%xmm4, %xmm4
    000004f2: 	subq	%rbp, %rsi
    000004f5: 	movsd	%xmm4, 0x8(%rsp)
    000004fb: 	leaq	-0x8(%rsi), %rax
    000004ff: 	movq	%rsi, 0x30(%rsp)
    00000504: 	shrq	$0x3, %rax
    00000508: 	movsd	%xmm5, 0x10(%rsp)
    0000050e: 	leaq	0x1(%rax), %rdi
    00000512: 	movq	%rdi, %rax
    00000515: 	movq	%rdi, 0x40(%rsp)
    0000051a: 	andq	$-0x2, %rdi
    0000051e: 	shrq	%rax
    00000521: 	leaq	(%rbp,%rdi,8), %r13
    00000526: 	movq	%rdi, 0x38(%rsp)
    0000052b: 	shlq	$0x4, %rax
    0000052f: 	cmpq	$0x8, %rsi
    00000533: 	cmoveq	%rbp, %r13
    00000537: 	leaq	(%rax,%rbp), %r14
.Ltmp1272:
    0000053b: 	pxor	%xmm0, %xmm0
    0000053f: 	cmpq	%r15, %rbp
    00000542: 	je	.Ltmp1268 # Offset: 1346
    00000544: 	cmpq	$0x8, 0x30(%rsp)
    0000054a: 	je	.Ltmp1269 # Offset: 1354
    00000550: 	movq	%rbp, %rax
    00000553: 	pxor	%xmm0, %xmm0
    00000557: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1270:
    00000560: 	movsd	(%rax), %xmm1
    00000564: 	addq	$0x10, %rax
    00000568: 	addsd	%xmm1, %xmm0
    0000056c: 	movsd	-0x8(%rax), %xmm1
    00000571: 	addsd	%xmm1, %xmm0
    00000575: 	cmpq	%rax, %r14
    00000578: 	jne	.Ltmp1270 # Offset: 1400
    0000057a: 	movq	0x40(%rsp), %rdi
    0000057f: 	cmpq	%rdi, 0x38(%rsp)
    00000584: 	je	.Ltmp1268 # Offset: 1412
.Ltmp1556:
    00000586: 	addsd	(%r13), %xmm0
.Ltmp1268:
    0000058c: 	movsd	0x10(%rsp), %xmm1
    00000592: 	mulsd	init_value(%rip), %xmm1
    0000059a: 	ucomisd	%xmm1, %xmm0
    0000059e: 	jp	.Ltmp1271 # Offset: 1438
    000005a4: 	jne	.Ltmp1271 # Offset: 1444
.Ltmp1477:
    000005aa: 	addl	$0x1, 0x28(%rsp)
    000005af: 	movl	0x28(%rsp), %eax
    000005b3: 	cmpl	%eax, %edx
    000005b5: 	jg	.Ltmp1272 # Offset: 1461
.Ltmp1267:
    000005b7: 	callq	clock@PLT # Offset: 1463
    000005bc: 	pxor	%xmm0, %xmm0
    000005c0: 	movq	%r12, %rdi
    000005c3: 	movq	%rax, end_time(%rip)
    000005ca: 	subq	start_time(%rip), %rax
    000005d1: 	cvtsi2sd	%rax, %xmm0
    000005d6: 	divsd	DATAat0x15638(%rip), %xmm0
    000005de: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1502
    000005e3: 	movq	0x4060(%rsp), %rdi
    000005eb: 	cmpq	0x18(%rsp), %rdi
    000005f0: 	je	.Ltmp1273 # Offset: 1520
    000005f2: 	movq	0x4070(%rsp), %rax
    000005fa: 	leaq	0x1(%rax), %rsi
    000005fe: 	callq	_ZdlPvm@PLT # Offset: 1534
.Ltmp1273:
    00000603: 	movq	0x20(%rsp), %rsi
    00000608: 	leaq	DATAat0x15350(%rip), %rdx
    0000060f: 	movq	%r12, %rdi
    00000612: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1554
    00000617: 	callq	clock@PLT # Offset: 1559
    0000061c: 	movl	iterations(%rip), %edx
    00000622: 	movq	%rax, start_time(%rip)
    00000629: 	testl	%edx, %edx
    0000062b: 	jle	.Ltmp1274 # Offset: 1579
    00000631: 	movq	%r15, %rdi
    00000634: 	movsd	DATAat0x15648(%rip), %xmm7
    0000063c: 	movl	$0x0, 0x28(%rsp)
    00000644: 	pxor	%xmm6, %xmm6
    00000648: 	subq	%rbp, %rdi
    0000064b: 	movsd	%xmm6, 0x8(%rsp)
    00000651: 	leaq	-0x8(%rdi), %rax
    00000655: 	movq	%rdi, 0x30(%rsp)
    0000065a: 	shrq	$0x3, %rax
    0000065e: 	movsd	%xmm7, 0x10(%rsp)
    00000664: 	leaq	0x1(%rax), %rsi
    00000668: 	movq	%rsi, %rax
    0000066b: 	movq	%rsi, 0x40(%rsp)
    00000670: 	andq	$-0x2, %rsi
    00000674: 	shrq	%rax
    00000677: 	leaq	(%rbp,%rsi,8), %r13
    0000067c: 	movq	%rsi, 0x38(%rsp)
    00000681: 	shlq	$0x4, %rax
    00000685: 	cmpq	$0x8, %rdi
    00000689: 	cmoveq	%rbp, %r13
    0000068d: 	leaq	(%rax,%rbp), %r14
.Ltmp1279:
    00000691: 	pxor	%xmm0, %xmm0
    00000695: 	cmpq	%r15, %rbp
    00000698: 	je	.Ltmp1275 # Offset: 1688
    0000069a: 	cmpq	$0x8, 0x30(%rsp)
    000006a0: 	je	.Ltmp1276 # Offset: 1696
    000006a6: 	movq	%rbp, %rax
    000006a9: 	pxor	%xmm0, %xmm0
    000006ad: 	nopl	(%rax) # Size: 3
.Ltmp1277:
    000006b0: 	movsd	(%rax), %xmm1
    000006b4: 	addq	$0x10, %rax
    000006b8: 	addsd	%xmm1, %xmm0
    000006bc: 	movsd	-0x8(%rax), %xmm1
    000006c1: 	addsd	%xmm1, %xmm0
    000006c5: 	cmpq	%rax, %r14
    000006c8: 	jne	.Ltmp1277 # Offset: 1736
    000006ca: 	movq	0x40(%rsp), %rdi
    000006cf: 	cmpq	%rdi, 0x38(%rsp)
    000006d4: 	je	.Ltmp1275 # Offset: 1748
.Ltmp1554:
    000006d6: 	addsd	(%r13), %xmm0
.Ltmp1275:
    000006dc: 	movsd	0x10(%rsp), %xmm1
    000006e2: 	mulsd	init_value(%rip), %xmm1
    000006ea: 	ucomisd	%xmm0, %xmm1
    000006ee: 	jp	.Ltmp1278 # Offset: 1774
    000006f4: 	jne	.Ltmp1278 # Offset: 1780
.Ltmp1476:
    000006fa: 	addl	$0x1, 0x28(%rsp)
    000006ff: 	movl	0x28(%rsp), %eax
    00000703: 	cmpl	%edx, %eax
    00000705: 	jl	.Ltmp1279 # Offset: 1797
.Ltmp1274:
    00000707: 	callq	clock@PLT # Offset: 1799
    0000070c: 	pxor	%xmm0, %xmm0
    00000710: 	movq	%r12, %rdi
    00000713: 	movq	%rax, end_time(%rip)
    0000071a: 	subq	start_time(%rip), %rax
    00000721: 	cvtsi2sd	%rax, %xmm0
    00000726: 	divsd	DATAat0x15638(%rip), %xmm0
    0000072e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1838
    00000733: 	movq	0x4060(%rsp), %rdi
    0000073b: 	cmpq	0x18(%rsp), %rdi
    00000740: 	je	.Ltmp1280 # Offset: 1856
    00000742: 	movq	0x4070(%rsp), %rax
    0000074a: 	leaq	0x1(%rax), %rsi
    0000074e: 	callq	_ZdlPvm@PLT # Offset: 1870
.Ltmp1280:
    00000753: 	movq	0x20(%rsp), %rsi
    00000758: 	leaq	DATAat0x15380(%rip), %rdx
    0000075f: 	movq	%r12, %rdi
    00000762: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1890
    00000767: 	callq	clock@PLT # Offset: 1895
    0000076c: 	movl	iterations(%rip), %edx
    00000772: 	movq	%rax, start_time(%rip)
    00000779: 	testl	%edx, %edx
    0000077b: 	jle	.Ltmp1281 # Offset: 1915
    00000781: 	movq	%r15, %rsi
    00000784: 	movsd	DATAat0x15648(%rip), %xmm5
    0000078c: 	movl	$0x0, 0x28(%rsp)
    00000794: 	pxor	%xmm4, %xmm4
    00000798: 	subq	%rbp, %rsi
    0000079b: 	movsd	%xmm4, 0x8(%rsp)
    000007a1: 	leaq	-0x8(%rsi), %rax
    000007a5: 	movq	%rsi, 0x30(%rsp)
    000007aa: 	shrq	$0x3, %rax
    000007ae: 	movsd	%xmm5, 0x10(%rsp)
    000007b4: 	leaq	0x1(%rax), %rdi
    000007b8: 	movq	%rdi, %rax
    000007bb: 	movq	%rdi, 0x40(%rsp)
    000007c0: 	andq	$-0x2, %rdi
    000007c4: 	shrq	%rax
    000007c7: 	leaq	(%rbp,%rdi,8), %r13
    000007cc: 	movq	%rdi, 0x38(%rsp)
    000007d1: 	shlq	$0x4, %rax
    000007d5: 	cmpq	$0x8, %rsi
    000007d9: 	cmoveq	%rbp, %r13
    000007dd: 	leaq	(%rax,%rbp), %r14
.Ltmp1287:
    000007e1: 	cmpq	%r15, %rbp
    000007e4: 	je	.Ltmp1282 # Offset: 2020
    000007ea: 	cmpq	$0x8, 0x30(%rsp)
    000007f0: 	je	.Ltmp1283 # Offset: 2032
    000007f6: 	movq	%rbp, %rax
    000007f9: 	pxor	%xmm0, %xmm0
    000007fd: 	nopl	(%rax) # Size: 3
.Ltmp1284:
    00000800: 	movsd	(%rax), %xmm1
    00000804: 	addq	$0x10, %rax
    00000808: 	addsd	%xmm1, %xmm0
    0000080c: 	movsd	-0x8(%rax), %xmm1
    00000811: 	addsd	%xmm1, %xmm0
    00000815: 	cmpq	%rax, %r14
    00000818: 	jne	.Ltmp1284 # Offset: 2072
    0000081a: 	movq	0x40(%rsp), %rdi
    0000081f: 	cmpq	%rdi, 0x38(%rsp)
    00000824: 	je	.Ltmp1285 # Offset: 2084
.Ltmp1555:
    00000826: 	addsd	(%r13), %xmm0
.Ltmp1285:
    0000082c: 	movsd	0x10(%rsp), %xmm1
    00000832: 	mulsd	init_value(%rip), %xmm1
    0000083a: 	ucomisd	%xmm0, %xmm1
    0000083e: 	jp	.Ltmp1286 # Offset: 2110
    00000844: 	jne	.Ltmp1286 # Offset: 2116
.Ltmp1475:
    0000084a: 	addl	$0x1, 0x28(%rsp)
    0000084f: 	movl	0x28(%rsp), %eax
    00000853: 	cmpl	%eax, %edx
    00000855: 	jg	.Ltmp1287 # Offset: 2133
.Ltmp1281:
    00000857: 	callq	clock@PLT # Offset: 2135
    0000085c: 	pxor	%xmm0, %xmm0
    00000860: 	movq	%r12, %rdi
    00000863: 	movq	%rax, end_time(%rip)
    0000086a: 	subq	start_time(%rip), %rax
    00000871: 	cvtsi2sd	%rax, %xmm0
    00000876: 	divsd	DATAat0x15638(%rip), %xmm0
    0000087e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2174
    00000883: 	movq	0x4060(%rsp), %rdi
    0000088b: 	cmpq	0x18(%rsp), %rdi
    00000890: 	je	.Ltmp1288 # Offset: 2192
    00000892: 	movq	0x4070(%rsp), %rax
    0000089a: 	leaq	0x1(%rax), %rsi
    0000089e: 	callq	_ZdlPvm@PLT # Offset: 2206
.Ltmp1288:
    000008a3: 	movq	0x20(%rsp), %rsi
    000008a8: 	leaq	0x160(%rsp), %rdi
    000008b0: 	leaq	DATAat0x1523d(%rip), %rdx
    000008b7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2231
    000008bc: 	movl	iterations(%rip), %edx
    000008c2: 	movl	$0x1, %r8d
    000008c8: 	movl	$0x1, %ecx
    000008cd: 	movq	0x160(%rsp), %rdi
    000008d5: 	movl	$0x7d0, %esi
    000008da: 	callq	_Z9summarizePKciiii # Offset: 2266
    000008df: 	movslq	iterations(%rip), %rax
    000008e6: 	movq	0x48(%rsp), %rdi
    000008eb: 	pxor	%xmm0, %xmm0
    000008ef: 	movl	$0x7d0, %esi
    000008f4: 	movq	$0x0, 0x130(%rsp)
    00000900: 	movq	%rax, %rdx
    00000903: 	imulq	$0x10624dd3, %rax, %rax
    0000090a: 	movaps	%xmm0, 0x120(%rsp)
    00000912: 	sarl	$0x1f, %edx
    00000915: 	sarq	$0x27, %rax
    00000919: 	subl	%edx, %eax
    0000091b: 	movl	%eax, iterations(%rip)
    00000921: 	callq	_ZNSt6vectorIdSaIdEE17_M_default_appendEm # Offset: 2337
    00000926: 	movq	%r12, %rdx
    00000929: 	leaq	0x7ee0(%rsp), %rdi
    00000931: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000093b: 	movabsq	$0x14057b7ef767814f, %rcx
.Ltmp1289:
    00000945: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000094c: 	pxor	%xmm0, %xmm0
    00000950: 	addq	$0x8, %rdx
    00000954: 	imulq	%rsi, %rax
    00000958: 	addq	%rcx, %rax
    0000095b: 	movq	%rax, %r8
    0000095e: 	movq	%rax, %r9
    00000961: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000968: 	shrq	$0x14, %r8
    0000096c: 	shlq	$0x17, %r9
    00000970: 	xorq	%r9, %r8
    00000973: 	xorq	%r8, %rax
    00000976: 	sarq	$0x3, %rax
    0000097a: 	cvtsi2sd	%rax, %xmm0
    0000097f: 	movsd	%xmm0, -0x8(%rdx)
    00000984: 	cmpq	%rdi, %rdx
    00000987: 	jne	.Ltmp1289 # Offset: 2439
    00000989: 	movq	0x120(%rsp), %r13
    00000991: 	movl	$0x3e80, %edx
    00000996: 	movq	%r12, %rsi
    00000999: 	movq	%r13, %rdi
    0000099c: 	callq	memcpy@PLT # Offset: 2460
    000009a1: 	movq	0x128(%rsp), %rax
    000009a9: 	movq	0x20(%rsp), %rsi
    000009ae: 	leaq	DATAat0x153b0(%rip), %rdx
    000009b5: 	movq	%rax, 0x8(%rsp)
    000009ba: 	leaq	0x1c0(%rsp), %rax
    000009c2: 	movq	%rax, %rdi
    000009c5: 	movq	%rax, 0x18(%rsp)
    000009ca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2506
    000009cf: 	callq	clock@PLT # Offset: 2511
    000009d4: 	leaq	0x1e8(%rsp), %rdi
    000009dc: 	xorl	%r14d, %r14d
    000009df: 	movq	%rax, start_time(%rip)
    000009e6: 	movl	iterations(%rip), %eax
    000009ec: 	movq	%rdi, 0x28(%rsp)
    000009f1: 	movl	%eax, 0x10(%rsp)
    000009f5: 	testl	%eax, %eax
    000009f7: 	jle	.Ltmp1290 # Offset: 2551
.Ltmp1296:
    000009fd: 	movl	$0x3e80, %edx
    00000a02: 	movq	%r12, %rsi
    00000a05: 	movq	%rbx, %rdi
    00000a08: 	callq	memcpy@PLT # Offset: 2568
    00000a0d: 	movq	0x28(%rsp), %rcx
    00000a12: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1293:
    00000a18: 	movsd	(%rcx), %xmm1
    00000a1c: 	movq	%rcx, %rax
    00000a1f: 	nop # Size: 1
.Ltmp1292:
    00000a20: 	movq	%rax, %rdx
    00000a23: 	leaq	-0x8(%rax), %rax
    00000a27: 	movsd	-0x8(%rdx), %xmm0
    00000a2c: 	comisd	%xmm1, %xmm0
    00000a30: 	jbe	.Ltmp1291 # Offset: 2608
    00000a32: 	movsd	%xmm0, 0x8(%rax)
    00000a37: 	cmpq	%rbx, %rax
    00000a3a: 	jne	.Ltmp1292 # Offset: 2618
    00000a3c: 	movq	%rbx, %rdx
.Ltmp1291:
    00000a3f: 	addq	$0x8, %rcx
    00000a43: 	movsd	%xmm1, (%rdx)
    00000a47: 	cmpq	%r12, %rcx
    00000a4a: 	jne	.Ltmp1293 # Offset: 2634
    00000a4c: 	movsd	0x1e0(%rsp), %xmm0
    00000a55: 	movq	0x28(%rsp), %rax
    00000a5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1295:
    00000a60: 	addq	$0x8, %rax
    00000a64: 	movapd	%xmm0, %xmm1
    00000a68: 	movsd	-0x8(%rax), %xmm0
    00000a6d: 	comisd	%xmm0, %xmm1
    00000a71: 	ja	.Ltmp1294 # Offset: 2673
    00000a77: 	cmpq	%r12, %rax
    00000a7a: 	jne	.Ltmp1295 # Offset: 2682
    00000a7c: 	addl	$0x1, %r14d
    00000a80: 	cmpl	0x10(%rsp), %r14d
    00000a85: 	jl	.Ltmp1296 # Offset: 2693
.Ltmp1290:
    00000a8b: 	callq	clock@PLT # Offset: 2699
    00000a90: 	movq	0x18(%rsp), %rdi
    00000a95: 	pxor	%xmm0, %xmm0
    00000a99: 	movq	%rax, end_time(%rip)
    00000aa0: 	subq	start_time(%rip), %rax
    00000aa7: 	cvtsi2sd	%rax, %xmm0
    00000aac: 	divsd	DATAat0x15638(%rip), %xmm0
    00000ab4: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2740
    00000ab9: 	movq	0x1c0(%rsp), %rdi
    00000ac1: 	leaq	0x1d0(%rsp), %rax
    00000ac9: 	movq	%rax, 0x10(%rsp)
    00000ace: 	cmpq	%rax, %rdi
    00000ad1: 	je	.Ltmp1297 # Offset: 2769
    00000ad3: 	movq	0x1d0(%rsp), %rax
    00000adb: 	leaq	0x1(%rax), %rsi
    00000adf: 	callq	_ZdlPvm@PLT # Offset: 2783
.Ltmp1297:
    00000ae4: 	movq	0x20(%rsp), %rsi
    00000ae9: 	movq	0x18(%rsp), %rdi
    00000aee: 	leaq	DATAat0x153d0(%rip), %rdx
    00000af5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2805
    00000afa: 	callq	clock@PLT # Offset: 2810
    00000aff: 	movl	iterations(%rip), %esi
    00000b05: 	movq	%rax, start_time(%rip)
    00000b0c: 	testl	%esi, %esi
    00000b0e: 	jle	.Ltmp1298 # Offset: 2830
    00000b14: 	leaq	0x8(%rbp), %rax
    00000b18: 	leaq	0x8(%r13), %rdx
    00000b1c: 	movl	$0x0, 0x30(%rsp)
    00000b24: 	movq	%rax, 0x38(%rsp)
    00000b29: 	movq	0x8(%rsp), %rax
    00000b2e: 	subq	$0x8, %rax
    00000b32: 	subq	%r13, %rax
    00000b35: 	cmpq	%rdx, %rbp
    00000b38: 	setne	%cl
    00000b3b: 	cmpq	$0x10, %rax
    00000b3f: 	seta	%dl
    00000b42: 	shrq	$0x3, %rax
    00000b46: 	leaq	0x1(%rax), %rdi
    00000b4a: 	andl	%edx, %ecx
    00000b4c: 	movq	%rdi, %rax
    00000b4f: 	movq	%rdi, 0x60(%rsp)
    00000b54: 	andq	$-0x2, %rdi
    00000b58: 	shrq	%rax
    00000b5b: 	movb	%cl, 0x40(%rsp)
    00000b5f: 	shlq	$0x4, %rax
    00000b63: 	movq	%rdi, 0x58(%rsp)
    00000b68: 	movq	%rax, 0x48(%rsp)
    00000b6d: 	leaq	(,%rdi,8), %rax
    00000b75: 	leaq	(%r13,%rax), %r14
    00000b7a: 	addq	%rbp, %rax
    00000b7d: 	movq	%rax, 0x28(%rsp)
.Ltmp1310:
    00000b82: 	cmpq	%r13, 0x8(%rsp)
    00000b87: 	je	.Ltmp1299 # Offset: 2951
    00000b89: 	cmpb	$0x0, 0x40(%rsp)
    00000b8e: 	je	.Ltmp1300 # Offset: 2958
    00000b94: 	movq	0x48(%rsp), %rdx
    00000b99: 	xorl	%eax, %eax
    00000b9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1301:
    00000ba0: 	movupd	(%r13,%rax), %xmm3
    00000ba7: 	movups	%xmm3, (%rbp,%rax)
    00000bac: 	addq	$0x10, %rax
    00000bb0: 	cmpq	%rax, %rdx
    00000bb3: 	jne	.Ltmp1301 # Offset: 2995
    00000bb5: 	movq	0x60(%rsp), %rdi
    00000bba: 	cmpq	%rdi, 0x58(%rsp)
    00000bbf: 	je	.Ltmp1299 # Offset: 3007
    00000bc1: 	movsd	(%r14), %xmm0
    00000bc6: 	movq	0x28(%rsp), %rax
    00000bcb: 	movsd	%xmm0, (%rax)
.Ltmp1299:
    00000bcf: 	cmpq	%r15, %rbp
    00000bd2: 	je	.Ltmp1302 # Offset: 3026
    00000bd4: 	movq	0x38(%rsp), %rax
    00000bd9: 	cmpq	%rax, %r15
    00000bdc: 	je	.Ltmp1302 # Offset: 3036
    00000bde: 	movq	%rax, %rcx
    00000be1: 	nopl	(%rax) # Size: 7
.Ltmp1306:
    00000be8: 	movsd	(%rcx), %xmm1
    00000bec: 	movq	%rcx, %rax
    00000bef: 	cmpq	%rcx, %rbp
    00000bf2: 	jne	.Ltmp1303 # Offset: 3058
    00000bf4: 	jmp	.Ltmp1304 # Offset: 3060
    00000bf9: 	nopl	(%rax) # Size: 7
.Ltmp1305:
    00000c00: 	movsd	%xmm0, 0x8(%rax)
    00000c05: 	cmpq	%rax, %rbp
    00000c08: 	je	.Ltmp1304 # Offset: 3080
.Ltmp1303:
    00000c0e: 	movq	%rax, %rdx
    00000c11: 	leaq	-0x8(%rax), %rax
    00000c15: 	movsd	-0x8(%rdx), %xmm0
    00000c1a: 	comisd	%xmm1, %xmm0
    00000c1e: 	ja	.Ltmp1305 # Offset: 3102
    00000c20: 	addq	$0x8, %rcx
    00000c24: 	movsd	%xmm1, (%rdx)
    00000c28: 	cmpq	%rcx, %r15
    00000c2b: 	jne	.Ltmp1306 # Offset: 3115
.Ltmp1302:
    00000c2d: 	movq	0x38(%rsp), %rax
    00000c32: 	jmp	.Ltmp1307 # Offset: 3122
    00000c34: 	nopl	(%rax) # Size: 4
.Ltmp1309:
    00000c38: 	addq	$0x8, %rax
    00000c3c: 	movsd	-0x10(%rax), %xmm0
    00000c41: 	comisd	(%rdx), %xmm0
    00000c45: 	ja	.Ltmp1308 # Offset: 3141
.Ltmp1307:
    00000c4b: 	movq	%rax, %rdx
    00000c4e: 	cmpq	%rax, %r15
    00000c51: 	jne	.Ltmp1309 # Offset: 3153
    00000c53: 	addl	$0x1, 0x30(%rsp)
    00000c58: 	movl	0x30(%rsp), %eax
    00000c5c: 	cmpl	%eax, %esi
    00000c5e: 	jg	.Ltmp1310 # Offset: 3166
.Ltmp1298:
    00000c64: 	callq	clock@PLT # Offset: 3172
    00000c69: 	movq	0x18(%rsp), %rdi
    00000c6e: 	pxor	%xmm0, %xmm0
    00000c72: 	movq	%rax, end_time(%rip)
    00000c79: 	subq	start_time(%rip), %rax
    00000c80: 	cvtsi2sd	%rax, %xmm0
    00000c85: 	divsd	DATAat0x15638(%rip), %xmm0
    00000c8d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3213
    00000c92: 	movq	0x1c0(%rsp), %rdi
    00000c9a: 	cmpq	0x10(%rsp), %rdi
    00000c9f: 	je	.Ltmp1311 # Offset: 3231
    00000ca1: 	movq	0x1d0(%rsp), %rax
    00000ca9: 	leaq	0x1(%rax), %rsi
    00000cad: 	callq	_ZdlPvm@PLT # Offset: 3245
.Ltmp1311:
    00000cb2: 	movq	0x20(%rsp), %rsi
    00000cb7: 	movq	0x18(%rsp), %rdi
    00000cbc: 	leaq	DATAat0x153f0(%rip), %rdx
    00000cc3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3267
    00000cc8: 	callq	clock@PLT # Offset: 3272
    00000ccd: 	movl	iterations(%rip), %esi
    00000cd3: 	xorl	%r14d, %r14d
    00000cd6: 	movq	%rax, start_time(%rip)
    00000cdd: 	leaq	0x1e8(%rsp), %rax
    00000ce5: 	movq	%rax, 0x28(%rsp)
    00000cea: 	testl	%esi, %esi
    00000cec: 	jle	.Ltmp1312 # Offset: 3308
.Ltmp1318:
    00000cf2: 	movl	$0x3e80, %edx
    00000cf7: 	movq	%r12, %rsi
    00000cfa: 	movq	%rbx, %rdi
    00000cfd: 	callq	memcpy@PLT # Offset: 3325
    00000d02: 	movq	0x28(%rsp), %rcx
    00000d07: 	movq	%rcx, %rdx
    00000d0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1315:
    00000d10: 	movsd	(%rcx), %xmm1
    00000d14: 	movq	%rcx, %rax
    00000d17: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1314:
    00000d20: 	movsd	-0x8(%rax), %xmm0
    00000d25: 	comisd	%xmm1, %xmm0
    00000d29: 	jbe	.Ltmp1313 # Offset: 3369
    00000d2b: 	movsd	%xmm0, (%rax)
    00000d2f: 	subq	$0x8, %rax
    00000d33: 	cmpq	%rax, %rbx
    00000d36: 	jne	.Ltmp1314 # Offset: 3382
.Ltmp1313:
    00000d38: 	addq	$0x8, %rcx
    00000d3c: 	movsd	%xmm1, (%rax)
    00000d40: 	cmpq	%r12, %rcx
    00000d43: 	jne	.Ltmp1315 # Offset: 3395
    00000d45: 	movsd	0x1e0(%rsp), %xmm0
    00000d4e: 	nop # Size: 2
.Ltmp1317:
    00000d50: 	movapd	%xmm0, %xmm1
    00000d54: 	movsd	(%rdx), %xmm0
    00000d58: 	comisd	%xmm0, %xmm1
    00000d5c: 	ja	.Ltmp1316 # Offset: 3420
    00000d62: 	addq	$0x8, %rdx
    00000d66: 	cmpq	%r12, %rdx
    00000d69: 	jne	.Ltmp1317 # Offset: 3433
    00000d6b: 	addl	$0x1, %r14d
    00000d6f: 	cmpl	iterations(%rip), %r14d
    00000d76: 	jl	.Ltmp1318 # Offset: 3446
.Ltmp1312:
    00000d7c: 	callq	clock@PLT # Offset: 3452
    00000d81: 	movq	0x18(%rsp), %rdi
    00000d86: 	pxor	%xmm0, %xmm0
    00000d8a: 	movq	%rax, end_time(%rip)
    00000d91: 	subq	start_time(%rip), %rax
    00000d98: 	cvtsi2sd	%rax, %xmm0
    00000d9d: 	divsd	DATAat0x15638(%rip), %xmm0
    00000da5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3493
    00000daa: 	movq	0x1c0(%rsp), %rdi
    00000db2: 	cmpq	0x10(%rsp), %rdi
    00000db7: 	je	.Ltmp1319 # Offset: 3511
    00000db9: 	movq	0x1d0(%rsp), %rax
    00000dc1: 	leaq	0x1(%rax), %rsi
    00000dc5: 	callq	_ZdlPvm@PLT # Offset: 3525
.Ltmp1319:
    00000dca: 	movq	0x18(%rsp), %r14
    00000dcf: 	movq	0x20(%rsp), %rsi
    00000dd4: 	leaq	DATAat0x15418(%rip), %rdx
    00000ddb: 	movq	%r14, %rdi
    00000dde: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3550
    00000de3: 	movq	0x8(%rsp), %rax
    00000de8: 	leaq	0xf0(%rsp), %rcx
    00000df0: 	movq	%r14, %r8
    00000df3: 	leaq	0xe0(%rsp), %rdx
    00000dfb: 	leaq	0xc0(%rsp), %rdi
    00000e03: 	movq	%r15, 0xf8(%rsp)
    00000e0b: 	movq	%rax, 0xd8(%rsp)
    00000e13: 	leaq	0xd0(%rsp), %rax
    00000e1b: 	movq	%rax, %rsi
    00000e1e: 	movq	%rbp, 0xe8(%rsp)
    00000e26: 	movq	%r13, 0xc8(%rsp)
    00000e2e: 	movq	%rcx, 0x30(%rsp)
    00000e33: 	movq	%rdx, 0x40(%rsp)
    00000e38: 	movq	%rax, 0x60(%rsp)
    00000e3d: 	movq	%rdi, 0x58(%rsp)
    00000e42: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3650
    00000e47: 	movq	0x1c0(%rsp), %rdi
    00000e4f: 	cmpq	0x10(%rsp), %rdi
    00000e54: 	je	.Ltmp1320 # Offset: 3668
    00000e56: 	movq	0x1d0(%rsp), %rax
    00000e5e: 	leaq	0x1(%rax), %rsi
    00000e62: 	callq	_ZdlPvm@PLT # Offset: 3682
.Ltmp1320:
    00000e67: 	movq	0x18(%rsp), %r14
    00000e6c: 	movq	0x20(%rsp), %rsi
    00000e71: 	leaq	DATAat0x15448(%rip), %rdx
    00000e78: 	movq	%r14, %rdi
    00000e7b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3707
    00000e80: 	movq	0x8(%rsp), %rax
    00000e85: 	movq	0x30(%rsp), %rcx
    00000e8a: 	movq	%r14, %r8
    00000e8d: 	movq	%r15, 0xf8(%rsp)
    00000e95: 	movq	0x40(%rsp), %rdx
    00000e9a: 	movq	0x60(%rsp), %rsi
    00000e9f: 	movq	%rbp, 0xe8(%rsp)
    00000ea7: 	movq	0x58(%rsp), %rdi
    00000eac: 	movq	%rax, 0xd8(%rsp)
    00000eb4: 	movq	%r13, 0xc8(%rsp)
    00000ebc: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3772
    00000ec1: 	movq	0x1c0(%rsp), %rdi
    00000ec9: 	cmpq	0x10(%rsp), %rdi
    00000ece: 	je	.Ltmp1321 # Offset: 3790
    00000ed0: 	movq	0x1d0(%rsp), %rax
    00000ed8: 	leaq	0x1(%rax), %rsi
    00000edc: 	callq	_ZdlPvm@PLT # Offset: 3804
.Ltmp1321:
    00000ee1: 	movq	0x20(%rsp), %rsi
    00000ee6: 	movq	0x18(%rsp), %rdi
    00000eeb: 	leaq	DATAat0x15478(%rip), %rdx
    00000ef2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3826
    00000ef7: 	callq	clock@PLT # Offset: 3831
    00000efc: 	movl	iterations(%rip), %esi
    00000f02: 	movq	%rax, start_time(%rip)
    00000f09: 	testl	%esi, %esi
    00000f0b: 	jle	.Ltmp1322 # Offset: 3851
    00000f11: 	leaq	0x8(%rbp), %rax
    00000f15: 	leaq	0x8(%r13), %rdx
    00000f19: 	movl	$0x0, 0x38(%rsp)
    00000f21: 	movq	%rax, 0x48(%rsp)
    00000f26: 	movq	0x8(%rsp), %rax
    00000f2b: 	subq	$0x8, %rax
    00000f2f: 	subq	%r13, %rax
    00000f32: 	cmpq	%rdx, %rbp
    00000f35: 	setne	%cl
    00000f38: 	cmpq	$0x10, %rax
    00000f3c: 	seta	%dl
    00000f3f: 	shrq	$0x3, %rax
    00000f43: 	leaq	0x1(%rax), %rdi
    00000f47: 	andl	%edx, %ecx
    00000f49: 	movq	%rdi, %rax
    00000f4c: 	movq	%rdi, 0x80(%rsp)
    00000f54: 	andq	$-0x2, %rdi
    00000f58: 	shrq	%rax
    00000f5b: 	movb	%cl, 0x68(%rsp)
    00000f5f: 	shlq	$0x4, %rax
    00000f63: 	movq	%rdi, 0x78(%rsp)
    00000f68: 	movq	%rax, 0x70(%rsp)
    00000f6d: 	leaq	(,%rdi,8), %rax
    00000f75: 	leaq	(%r13,%rax), %r14
    00000f7a: 	addq	%rbp, %rax
    00000f7d: 	movq	%rax, 0x28(%rsp)
.Ltmp1334:
    00000f82: 	cmpq	%r13, 0x8(%rsp)
    00000f87: 	je	.Ltmp1323 # Offset: 3975
    00000f89: 	cmpb	$0x0, 0x68(%rsp)
    00000f8e: 	je	.Ltmp1324 # Offset: 3982
    00000f94: 	movq	0x70(%rsp), %rdx
    00000f99: 	xorl	%eax, %eax
    00000f9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1325:
    00000fa0: 	movupd	(%r13,%rax), %xmm4
    00000fa7: 	movups	%xmm4, (%rbp,%rax)
    00000fac: 	addq	$0x10, %rax
    00000fb0: 	cmpq	%rax, %rdx
    00000fb3: 	jne	.Ltmp1325 # Offset: 4019
    00000fb5: 	movq	0x80(%rsp), %rdi
    00000fbd: 	cmpq	%rdi, 0x78(%rsp)
    00000fc2: 	je	.Ltmp1323 # Offset: 4034
    00000fc4: 	movsd	(%r14), %xmm0
    00000fc9: 	movq	0x28(%rsp), %rax
    00000fce: 	movsd	%xmm0, (%rax)
.Ltmp1323:
    00000fd2: 	cmpq	%r15, %rbp
    00000fd5: 	je	.Ltmp1326 # Offset: 4053
    00000fd7: 	movq	0x48(%rsp), %rax
    00000fdc: 	cmpq	%rax, %r15
    00000fdf: 	je	.Ltmp1326 # Offset: 4063
    00000fe1: 	movq	%rax, %rcx
    00000fe4: 	nopl	(%rax) # Size: 4
.Ltmp1330:
    00000fe8: 	movsd	(%rcx), %xmm1
    00000fec: 	movq	%rcx, %rax
    00000fef: 	cmpq	%rcx, %rbp
    00000ff2: 	jne	.Ltmp1327 # Offset: 4082
    00000ff4: 	jmp	.Ltmp1328 # Offset: 4084
    00000ff9: 	nopl	(%rax) # Size: 7
.Ltmp1329:
    00001000: 	movsd	%xmm0, 0x8(%rax)
    00001005: 	cmpq	%rax, %rbp
    00001008: 	je	.Ltmp1328 # Offset: 4104
.Ltmp1327:
    0000100e: 	movq	%rax, %rdx
    00001011: 	leaq	-0x8(%rax), %rax
    00001015: 	movsd	-0x8(%rdx), %xmm0
    0000101a: 	comisd	%xmm1, %xmm0
    0000101e: 	ja	.Ltmp1329 # Offset: 4126
    00001020: 	addq	$0x8, %rcx
    00001024: 	movsd	%xmm1, (%rdx)
    00001028: 	cmpq	%rcx, %r15
    0000102b: 	jne	.Ltmp1330 # Offset: 4139
.Ltmp1326:
    0000102d: 	movq	0x48(%rsp), %rax
    00001032: 	jmp	.Ltmp1331 # Offset: 4146
    00001034: 	nopl	(%rax) # Size: 4
.Ltmp1333:
    00001038: 	addq	$0x8, %rax
    0000103c: 	movsd	-0x10(%rax), %xmm0
    00001041: 	comisd	(%rdx), %xmm0
    00001045: 	ja	.Ltmp1332 # Offset: 4165
.Ltmp1331:
    0000104b: 	movq	%rax, %rdx
    0000104e: 	cmpq	%rax, %r15
    00001051: 	jne	.Ltmp1333 # Offset: 4177
    00001053: 	addl	$0x1, 0x38(%rsp)
    00001058: 	movl	0x38(%rsp), %eax
    0000105c: 	cmpl	%esi, %eax
    0000105e: 	jl	.Ltmp1334 # Offset: 4190
.Ltmp1322:
    00001064: 	callq	clock@PLT # Offset: 4196
    00001069: 	movq	0x18(%rsp), %rdi
    0000106e: 	pxor	%xmm0, %xmm0
    00001072: 	movq	%rax, end_time(%rip)
    00001079: 	subq	start_time(%rip), %rax
    00001080: 	cvtsi2sd	%rax, %xmm0
    00001085: 	divsd	DATAat0x15638(%rip), %xmm0
    0000108d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4237
    00001092: 	movq	0x1c0(%rsp), %rdi
    0000109a: 	cmpq	0x10(%rsp), %rdi
    0000109f: 	je	.Ltmp1335 # Offset: 4255
    000010a1: 	movq	0x1d0(%rsp), %rax
    000010a9: 	leaq	0x1(%rax), %rsi
    000010ad: 	callq	_ZdlPvm@PLT # Offset: 4269
.Ltmp1335:
    000010b2: 	movq	0x20(%rsp), %r14
    000010b7: 	leaq	0x180(%rsp), %rdi
    000010bf: 	leaq	DATAat0x15250(%rip), %rdx
    000010c6: 	movq	%r14, %rsi
    000010c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4297
    000010ce: 	movl	iterations(%rip), %edx
    000010d4: 	movl	$0x1, %r8d
    000010da: 	movl	$0x1, %ecx
    000010df: 	movq	0x180(%rsp), %rdi
    000010e7: 	movl	$0x7d0, %esi
    000010ec: 	callq	_Z9summarizePKciiii # Offset: 4332
    000010f1: 	movq	0x18(%rsp), %rdi
    000010f6: 	leaq	DATAat0x15267(%rip), %rdx
    000010fd: 	movq	%r14, %rsi
    00001100: 	shll	$0x3, iterations(%rip)
    00001107: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4359
    0000110c: 	callq	clock@PLT # Offset: 4364
    00001111: 	movl	iterations(%rip), %ecx
    00001117: 	movl	$0x0, 0x38(%rsp)
    0000111f: 	movq	%rax, start_time(%rip)
    00001126: 	leaq	0x1e8(%rsp), %rax
    0000112e: 	movq	%rax, 0x28(%rsp)
    00001133: 	testl	%ecx, %ecx
    00001135: 	jle	.Ltmp1336 # Offset: 4405
.Ltmp1346:
    0000113b: 	movq	%rbx, %rdi
    0000113e: 	movl	$0x3e80, %edx
    00001143: 	movq	%r12, %rsi
    00001146: 	callq	memcpy@PLT # Offset: 4422
    0000114b: 	movq	%rbx, %rdi
.Ltmp1343:
    0000114e: 	movsd	(%rdi), %xmm1
    00001152: 	movq	%rdi, %rax
    00001155: 	movq	%r12, %r14
    00001158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1341:
    00001160: 	movsd	-0x8(%r14), %xmm2
    00001166: 	leaq	-0x8(%r14), %rdx
    0000116a: 	comisd	%xmm1, %xmm2
    0000116e: 	ja	.Ltmp1337 # Offset: 4462
    00001170: 	cmpq	%rax, %rdx
    00001173: 	jbe	.Ltmp1338 # Offset: 4467
    00001175: 	movsd	(%rax), %xmm0
    00001179: 	comisd	%xmm0, %xmm1
    0000117d: 	jbe	.Ltmp1339 # Offset: 4477
    0000117f: 	nop # Size: 1
.Ltmp1340:
    00001180: 	movsd	0x8(%rax), %xmm0
    00001185: 	addq	$0x8, %rax
    00001189: 	comisd	%xmm0, %xmm1
    0000118d: 	ja	.Ltmp1340 # Offset: 4493
    0000118f: 	cmpq	%rax, %rdx
    00001192: 	jbe	.Ltmp1338 # Offset: 4498
.Ltmp1339:
    00001194: 	movsd	%xmm0, (%rdx)
    00001198: 	movsd	%xmm2, (%rax)
.Ltmp1337:
    0000119c: 	movq	%rdx, %r14
    0000119f: 	jmp	.Ltmp1341 # Offset: 4511
    000011a1: 	nopl	(%rax) # Size: 7
.Ltmp1338:
    000011a8: 	movq	%r14, %rsi
    000011ab: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 4523
    000011b0: 	movq	%r12, %rax
    000011b3: 	subq	%r14, %rax
    000011b6: 	cmpq	$0x8, %rax
    000011ba: 	jle	.Ltmp1342 # Offset: 4538
    000011bc: 	movq	%r14, %rdi
    000011bf: 	jmp	.Ltmp1343 # Offset: 4543
    000011c1: 	nopl	(%rax) # Size: 7
.Ltmp1328:
    000011c8: 	movq	%rbp, %rdx
    000011cb: 	addq	$0x8, %rcx
    000011cf: 	movsd	%xmm1, (%rdx)
    000011d3: 	cmpq	%rcx, %r15
    000011d6: 	jne	.Ltmp1330 # Offset: 4566
    000011dc: 	jmp	.Ltmp1326 # Offset: 4572
    000011e1: 	nopl	(%rax) # Size: 7
.Ltmp1304:
    000011e8: 	movq	%rbp, %rdx
    000011eb: 	addq	$0x8, %rcx
    000011ef: 	movsd	%xmm1, (%rdx)
    000011f3: 	cmpq	%rcx, %r15
    000011f6: 	jne	.Ltmp1306 # Offset: 4598
    000011fc: 	jmp	.Ltmp1302 # Offset: 4604
.Ltmp1342:
    00001201: 	movsd	0x1e0(%rsp), %xmm0
    0000120a: 	movq	0x28(%rsp), %rax
    0000120f: 	nop # Size: 1
.Ltmp1345:
    00001210: 	addq	$0x8, %rax
    00001214: 	movapd	%xmm0, %xmm1
    00001218: 	movsd	-0x8(%rax), %xmm0
    0000121d: 	comisd	%xmm0, %xmm1
    00001221: 	ja	.Ltmp1344 # Offset: 4641
    00001227: 	cmpq	%r12, %rax
    0000122a: 	jne	.Ltmp1345 # Offset: 4650
.Ltmp1473:
    0000122c: 	addl	$0x1, 0x38(%rsp)
    00001231: 	movl	0x38(%rsp), %eax
    00001235: 	cmpl	iterations(%rip), %eax
    0000123b: 	jl	.Ltmp1346 # Offset: 4667
.Ltmp1336:
    00001241: 	callq	clock@PLT # Offset: 4673
    00001246: 	movq	0x18(%rsp), %rdi
    0000124b: 	pxor	%xmm0, %xmm0
    0000124f: 	movq	%rax, end_time(%rip)
    00001256: 	subq	start_time(%rip), %rax
    0000125d: 	cvtsi2sd	%rax, %xmm0
    00001262: 	divsd	DATAat0x15638(%rip), %xmm0
    0000126a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4714
    0000126f: 	movq	0x1c0(%rsp), %rdi
    00001277: 	cmpq	0x10(%rsp), %rdi
    0000127c: 	je	.Ltmp1347 # Offset: 4732
    0000127e: 	movq	0x1d0(%rsp), %rax
    00001286: 	leaq	0x1(%rax), %rsi
    0000128a: 	callq	_ZdlPvm@PLT # Offset: 4746
.Ltmp1347:
    0000128f: 	movq	0x20(%rsp), %rsi
    00001294: 	movq	0x18(%rsp), %rdi
    00001299: 	leaq	DATAat0x15282(%rip), %rdx
    000012a0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4768
    000012a5: 	callq	clock@PLT # Offset: 4773
    000012aa: 	movq	%rax, start_time(%rip)
    000012b1: 	movl	iterations(%rip), %eax
    000012b7: 	movl	%eax, 0x48(%rsp)
    000012bb: 	testl	%eax, %eax
    000012bd: 	jle	.Ltmp1348 # Offset: 4797
    000012c3: 	movq	%r15, %rax
    000012c6: 	leaq	0x8(%r13), %rdx
    000012ca: 	movl	$0x0, 0x38(%rsp)
    000012d2: 	subq	%rbp, %rax
    000012d5: 	movq	%rax, 0x70(%rsp)
    000012da: 	leaq	0x8(%rbp), %rax
    000012de: 	movq	%rax, 0x68(%rsp)
    000012e3: 	movq	0x8(%rsp), %rax
    000012e8: 	subq	$0x8, %rax
    000012ec: 	subq	%r13, %rax
    000012ef: 	cmpq	%rdx, %rbp
    000012f2: 	setne	%cl
    000012f5: 	cmpq	$0x10, %rax
    000012f9: 	seta	%dl
    000012fc: 	shrq	$0x3, %rax
    00001300: 	leaq	0x1(%rax), %rsi
    00001304: 	andl	%edx, %ecx
    00001306: 	movq	%rsi, %rax
    00001309: 	movq	%rsi, 0x90(%rsp)
    00001311: 	andq	$-0x2, %rsi
    00001315: 	shrq	%rax
    00001318: 	movb	%cl, 0x78(%rsp)
    0000131c: 	shlq	$0x4, %rax
    00001320: 	movq	%rsi, 0x88(%rsp)
    00001328: 	movq	%rax, 0x80(%rsp)
    00001330: 	leaq	(,%rsi,8), %rax
    00001338: 	leaq	(%r13,%rax), %r14
    0000133d: 	addq	%rbp, %rax
    00001340: 	movq	%rax, 0x28(%rsp)
.Ltmp1361:
    00001345: 	cmpq	%r13, 0x8(%rsp)
    0000134a: 	je	.Ltmp1349 # Offset: 4938
    0000134c: 	cmpb	$0x0, 0x78(%rsp)
    00001351: 	je	.Ltmp1350 # Offset: 4945
    00001357: 	movq	0x80(%rsp), %rdx
    0000135f: 	xorl	%eax, %eax
    00001361: 	nopl	(%rax) # Size: 7
.Ltmp1351:
    00001368: 	movupd	(%r13,%rax), %xmm5
    0000136f: 	movups	%xmm5, (%rbp,%rax)
    00001374: 	addq	$0x10, %rax
    00001378: 	cmpq	%rax, %rdx
    0000137b: 	jne	.Ltmp1351 # Offset: 4987
    0000137d: 	movq	0x90(%rsp), %rsi
    00001385: 	cmpq	%rsi, 0x88(%rsp)
    0000138d: 	je	.Ltmp1349 # Offset: 5005
    0000138f: 	movsd	(%r14), %xmm0
    00001394: 	movq	0x28(%rsp), %rax
    00001399: 	movsd	%xmm0, (%rax)
.Ltmp1349:
    0000139d: 	cmpq	$0x8, 0x70(%rsp)
    000013a3: 	jle	.Ltmp1352 # Offset: 5027
    000013a9: 	movsd	(%rbp), %xmm1
    000013ae: 	movq	%r15, %r8
    000013b1: 	movq	%rbp, %rdx
    000013b4: 	nopl	(%rax) # Size: 4
.Ltmp1357:
    000013b8: 	movsd	-0x8(%r8), %xmm2
    000013be: 	leaq	-0x8(%r8), %rcx
    000013c2: 	comisd	%xmm1, %xmm2
    000013c6: 	ja	.Ltmp1353 # Offset: 5062
    000013c8: 	cmpq	%rdx, %rcx
    000013cb: 	jbe	.Ltmp1354 # Offset: 5067
    000013d1: 	movsd	(%rdx), %xmm0
    000013d5: 	leaq	0x8(%rdx), %rax
    000013d9: 	comisd	%xmm0, %xmm1
    000013dd: 	jbe	.Ltmp1355 # Offset: 5085
    000013df: 	nop # Size: 1
.Ltmp1356:
    000013e0: 	movq	%rax, %rdx
    000013e3: 	movsd	(%rax), %xmm0
    000013e7: 	leaq	0x8(%rax), %rax
    000013eb: 	comisd	%xmm0, %xmm1
    000013ef: 	ja	.Ltmp1356 # Offset: 5103
    000013f1: 	cmpq	%rdx, %rcx
    000013f4: 	jbe	.Ltmp1354 # Offset: 5108
.Ltmp1355:
    000013fa: 	movsd	%xmm0, (%rcx)
    000013fe: 	movsd	%xmm2, (%rdx)
.Ltmp1353:
    00001402: 	movq	%rcx, %r8
    00001405: 	jmp	.Ltmp1357 # Offset: 5125
.Ltmp1499:
    00001407: 	movq	%r8, %rsi
    0000140a: 	movq	%r8, 0x98(%rsp)
    00001412: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 5138
    00001417: 	movq	0x98(%rsp), %rdi
    0000141f: 	movq	%r15, %rsi
    00001422: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 5154
.Ltmp1352:
    00001427: 	movq	0x68(%rsp), %rax
    0000142c: 	jmp	.Ltmp1358 # Offset: 5164
    0000142e: 	nop # Size: 2
.Ltmp1360:
    00001430: 	addq	$0x8, %rax
    00001434: 	movsd	-0x10(%rax), %xmm0
    00001439: 	comisd	(%rdx), %xmm0
    0000143d: 	ja	.Ltmp1359 # Offset: 5181
.Ltmp1358:
    00001443: 	movq	%rax, %rdx
    00001446: 	cmpq	%rax, %r15
    00001449: 	jne	.Ltmp1360 # Offset: 5193
    0000144b: 	addl	$0x1, 0x38(%rsp)
    00001450: 	movl	0x38(%rsp), %eax
    00001454: 	cmpl	0x48(%rsp), %eax
    00001458: 	jl	.Ltmp1361 # Offset: 5208
.Ltmp1348:
    0000145e: 	callq	clock@PLT # Offset: 5214
    00001463: 	movq	0x18(%rsp), %rdi
    00001468: 	pxor	%xmm0, %xmm0
    0000146c: 	movq	%rax, end_time(%rip)
    00001473: 	subq	start_time(%rip), %rax
    0000147a: 	cvtsi2sd	%rax, %xmm0
    0000147f: 	divsd	DATAat0x15638(%rip), %xmm0
    00001487: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5255
    0000148c: 	movq	0x1c0(%rsp), %rdi
    00001494: 	cmpq	0x10(%rsp), %rdi
    00001499: 	je	.Ltmp1362 # Offset: 5273
    0000149b: 	movq	0x1d0(%rsp), %rax
    000014a3: 	leaq	0x1(%rax), %rsi
    000014a7: 	callq	_ZdlPvm@PLT # Offset: 5287
.Ltmp1362:
    000014ac: 	movq	0x20(%rsp), %rsi
    000014b1: 	movq	0x18(%rsp), %rdi
    000014b6: 	leaq	DATAat0x154a8(%rip), %rdx
    000014bd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5309
    000014c2: 	callq	clock@PLT # Offset: 5314
    000014c7: 	movl	iterations(%rip), %edx
    000014cd: 	xorl	%r14d, %r14d
    000014d0: 	movq	%rax, start_time(%rip)
    000014d7: 	leaq	0x1e8(%rsp), %rax
    000014df: 	movq	%rax, 0x28(%rsp)
    000014e4: 	testl	%edx, %edx
    000014e6: 	jle	.Ltmp1363 # Offset: 5350
.Ltmp1383:
    000014ec: 	movl	$0x3e80, %edx
    000014f1: 	movq	%r12, %rsi
    000014f4: 	movq	%rbx, %rdi
    000014f7: 	callq	memcpy@PLT # Offset: 5367
    000014fc: 	leaq	0x4060(%rsp), %r12
    00001504: 	movsd	0x1e0(%rsp), %xmm1
    0000150d: 	movq	%r12, %rdx
.Ltmp1368:
    00001510: 	movsd	-0x8(%rdx), %xmm2
    00001515: 	leaq	-0x8(%rdx), %rcx
    00001519: 	comisd	%xmm1, %xmm2
    0000151d: 	ja	.Ltmp1364 # Offset: 5405
    0000151f: 	cmpq	%rax, %rcx
    00001522: 	jbe	.Ltmp1365 # Offset: 5410
    00001524: 	movsd	(%rax), %xmm0
    00001528: 	comisd	%xmm0, %xmm1
    0000152c: 	jbe	.Ltmp1366 # Offset: 5420
    0000152e: 	nop # Size: 2
.Ltmp1367:
    00001530: 	movsd	0x8(%rax), %xmm0
    00001535: 	addq	$0x8, %rax
    00001539: 	comisd	%xmm0, %xmm1
    0000153d: 	ja	.Ltmp1367 # Offset: 5437
    0000153f: 	cmpq	%rax, %rcx
    00001542: 	jbe	.Ltmp1365 # Offset: 5442
.Ltmp1366:
    00001544: 	movsd	%xmm0, (%rcx)
    00001548: 	movsd	%xmm2, (%rax)
.Ltmp1364:
    0000154c: 	movq	%rcx, %rdx
    0000154f: 	jmp	.Ltmp1368 # Offset: 5455
.Ltmp1365:
    00001551: 	movq	%rdx, %rax
    00001554: 	subq	%rbx, %rax
    00001557: 	cmpq	$0x8, %rax
    0000155b: 	jle	.Ltmp1369 # Offset: 5467
    00001561: 	movsd	0x1e0(%rsp), %xmm1
    0000156a: 	movq	%rdx, %r8
    0000156d: 	movq	%rbx, %rax
.Ltmp1374:
    00001570: 	comisd	%xmm1, %xmm2
    00001574: 	leaq	-0x8(%r8), %rcx
    00001578: 	ja	.Ltmp1370 # Offset: 5496
    0000157a: 	cmpq	%rax, %rcx
    0000157d: 	jbe	.Ltmp1371 # Offset: 5501
    00001583: 	movsd	(%rax), %xmm0
    00001587: 	comisd	%xmm0, %xmm1
    0000158b: 	jbe	.Ltmp1372 # Offset: 5515
    0000158d: 	nopl	(%rax) # Size: 3
.Ltmp1373:
    00001590: 	movsd	0x8(%rax), %xmm0
    00001595: 	addq	$0x8, %rax
    00001599: 	comisd	%xmm0, %xmm1
    0000159d: 	ja	.Ltmp1373 # Offset: 5533
    0000159f: 	cmpq	%rax, %rcx
    000015a2: 	jbe	.Ltmp1371 # Offset: 5538
.Ltmp1372:
    000015a8: 	movsd	%xmm0, (%rcx)
    000015ac: 	movsd	%xmm2, (%rax)
.Ltmp1370:
    000015b0: 	movsd	-0x8(%rcx), %xmm2
    000015b5: 	movq	%rcx, %r8
    000015b8: 	jmp	.Ltmp1374 # Offset: 5560
.Ltmp1510:
    000015ba: 	movq	0x40(%rsp), %rsi
    000015bf: 	movq	0x30(%rsp), %rdi
    000015c4: 	movq	%rdx, 0x38(%rsp)
    000015c9: 	movq	%r9, 0xe8(%rsp)
    000015d1: 	movq	%r9, 0x48(%rsp)
    000015d6: 	movq	%r8, 0xf8(%rsp)
    000015de: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 5598
    000015e3: 	movq	0x38(%rsp), %rdx
    000015e8: 	movq	0x48(%rsp), %r9
    000015ed: 	movq	0x40(%rsp), %rsi
    000015f2: 	movq	0x30(%rsp), %rdi
    000015f7: 	movq	%rdx, 0xe8(%rsp)
    000015ff: 	movq	%r9, 0xf8(%rsp)
    00001607: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 5639
    0000160c: 	movq	0x38(%rsp), %rdx
.Ltmp1369:
    00001611: 	movq	%r12, %rax
    00001614: 	subq	%rdx, %rax
    00001617: 	cmpq	$0x8, %rax
    0000161b: 	jle	.Ltmp1375 # Offset: 5659
    00001621: 	movsd	(%rdx), %xmm1
    00001625: 	movq	%rdx, %rax
    00001628: 	movq	%r12, %r8
    0000162b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1380:
    00001630: 	movsd	-0x8(%r8), %xmm2
    00001636: 	leaq	-0x8(%r8), %rcx
    0000163a: 	comisd	%xmm1, %xmm2
    0000163e: 	ja	.Ltmp1376 # Offset: 5694
    00001640: 	cmpq	%rax, %rcx
    00001643: 	jbe	.Ltmp1377 # Offset: 5699
    00001649: 	movsd	(%rax), %xmm0
    0000164d: 	comisd	%xmm0, %xmm1
    00001651: 	jbe	.Ltmp1378 # Offset: 5713
    00001653: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1379:
    00001658: 	movsd	0x8(%rax), %xmm0
    0000165d: 	addq	$0x8, %rax
    00001661: 	comisd	%xmm0, %xmm1
    00001665: 	ja	.Ltmp1379 # Offset: 5733
    00001667: 	cmpq	%rax, %rcx
    0000166a: 	jbe	.Ltmp1377 # Offset: 5738
.Ltmp1378:
    00001670: 	movsd	%xmm0, (%rcx)
    00001674: 	movsd	%xmm2, (%rax)
.Ltmp1376:
    00001678: 	movq	%rcx, %r8
    0000167b: 	jmp	.Ltmp1380 # Offset: 5755
.Ltmp1488:
    0000167d: 	movq	0x40(%rsp), %rsi
    00001682: 	movq	0x30(%rsp), %rdi
    00001687: 	movq	%rdx, 0xe8(%rsp)
    0000168f: 	movq	%rdx, 0x38(%rsp)
    00001694: 	movq	%r8, 0xf8(%rsp)
    0000169c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 5788
    000016a1: 	movq	0x38(%rsp), %rdx
    000016a6: 	movq	0x40(%rsp), %rsi
    000016ab: 	movq	%r12, 0xe8(%rsp)
    000016b3: 	movq	0x30(%rsp), %rdi
    000016b8: 	movq	%rdx, 0xf8(%rsp)
    000016c0: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 5824
.Ltmp1375:
    000016c5: 	movsd	0x1e0(%rsp), %xmm0
    000016ce: 	movq	0x28(%rsp), %rax
    000016d3: 	movq	0x50(%rsp), %rdx
    000016d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1382:
    000016e0: 	movapd	%xmm0, %xmm1
    000016e4: 	movsd	(%rax), %xmm0
    000016e8: 	comisd	%xmm0, %xmm1
    000016ec: 	ja	.Ltmp1381 # Offset: 5868
    000016f2: 	addq	$0x8, %rax
    000016f6: 	cmpq	%rax, %rdx
    000016f9: 	jne	.Ltmp1382 # Offset: 5881
    000016fb: 	addl	$0x1, %r14d
    000016ff: 	cmpl	iterations(%rip), %r14d
    00001706: 	jl	.Ltmp1383 # Offset: 5894
.Ltmp1363:
    0000170c: 	callq	clock@PLT # Offset: 5900
    00001711: 	movq	0x18(%rsp), %rdi
    00001716: 	pxor	%xmm0, %xmm0
    0000171a: 	movq	%rax, end_time(%rip)
    00001721: 	subq	start_time(%rip), %rax
    00001728: 	cvtsi2sd	%rax, %xmm0
    0000172d: 	divsd	DATAat0x15638(%rip), %xmm0
    00001735: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5941
    0000173a: 	movq	0x1c0(%rsp), %rdi
    00001742: 	cmpq	0x10(%rsp), %rdi
    00001747: 	je	.Ltmp1384 # Offset: 5959
    00001749: 	movq	0x1d0(%rsp), %rax
    00001751: 	leaq	0x1(%rax), %rsi
    00001755: 	callq	_ZdlPvm@PLT # Offset: 5973
.Ltmp1384:
    0000175a: 	movq	0x18(%rsp), %r14
    0000175f: 	movq	0x20(%rsp), %rsi
    00001764: 	leaq	DATAat0x154d0(%rip), %rdx
    0000176b: 	movq	%r14, %rdi
    0000176e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5998
    00001773: 	movq	0x8(%rsp), %rax
    00001778: 	movq	0x30(%rsp), %rcx
    0000177d: 	movq	%r14, %r8
    00001780: 	movq	%r15, 0xf8(%rsp)
    00001788: 	movq	0x40(%rsp), %rdx
    0000178d: 	movq	0x60(%rsp), %rsi
    00001792: 	movq	%rbp, 0xe8(%rsp)
    0000179a: 	movq	0x58(%rsp), %rdi
    0000179f: 	movq	%rax, 0xd8(%rsp)
    000017a7: 	movq	%r13, 0xc8(%rsp)
    000017af: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6063
    000017b4: 	movq	0x1c0(%rsp), %rdi
    000017bc: 	cmpq	0x10(%rsp), %rdi
    000017c1: 	je	.Ltmp1385 # Offset: 6081
    000017c3: 	movq	0x1d0(%rsp), %rax
    000017cb: 	leaq	0x1(%rax), %rsi
    000017cf: 	callq	_ZdlPvm@PLT # Offset: 6095
.Ltmp1385:
    000017d4: 	movq	0x18(%rsp), %r14
    000017d9: 	movq	0x20(%rsp), %rsi
    000017de: 	leaq	DATAat0x15500(%rip), %rdx
    000017e5: 	movq	%r14, %rdi
    000017e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6120
    000017ed: 	movq	0x8(%rsp), %rax
    000017f2: 	movq	0x30(%rsp), %rcx
    000017f7: 	movq	%r14, %r8
    000017fa: 	movq	%r15, 0xf8(%rsp)
    00001802: 	movq	0x40(%rsp), %rdx
    00001807: 	movq	0x60(%rsp), %rsi
    0000180c: 	movq	%rbp, 0xe8(%rsp)
    00001814: 	movq	0x58(%rsp), %rdi
    00001819: 	movq	%rax, 0xd8(%rsp)
    00001821: 	movq	%r13, 0xc8(%rsp)
    00001829: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6185
    0000182e: 	movq	0x1c0(%rsp), %rdi
    00001836: 	cmpq	0x10(%rsp), %rdi
    0000183b: 	je	.Ltmp1386 # Offset: 6203
    0000183d: 	movq	0x1d0(%rsp), %rax
    00001845: 	leaq	0x1(%rax), %rsi
    00001849: 	callq	_ZdlPvm@PLT # Offset: 6217
.Ltmp1386:
    0000184e: 	movq	0x20(%rsp), %rsi
    00001853: 	movq	0x18(%rsp), %rdi
    00001858: 	leaq	DATAat0x15530(%rip), %rdx
    0000185f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6239
    00001864: 	callq	clock@PLT # Offset: 6244
    00001869: 	movq	%rax, start_time(%rip)
    00001870: 	movl	iterations(%rip), %eax
    00001876: 	movl	%eax, 0x48(%rsp)
    0000187a: 	testl	%eax, %eax
    0000187c: 	jle	.Ltmp1387 # Offset: 6268
    00001882: 	movq	%r15, %rax
    00001885: 	leaq	0x8(%r13), %rdx
    00001889: 	movl	$0x0, 0x38(%rsp)
    00001891: 	subq	%rbp, %rax
    00001894: 	movq	%rax, 0x68(%rsp)
    00001899: 	leaq	0x8(%rbp), %rax
    0000189d: 	movq	%rax, 0x78(%rsp)
    000018a2: 	movq	0x8(%rsp), %rax
    000018a7: 	subq	$0x8, %rax
    000018ab: 	subq	%r13, %rax
    000018ae: 	cmpq	%rdx, %rbp
    000018b1: 	setne	%cl
    000018b4: 	cmpq	$0x10, %rax
    000018b8: 	seta	%dl
    000018bb: 	shrq	$0x3, %rax
    000018bf: 	leaq	0x1(%rax), %rsi
    000018c3: 	andl	%edx, %ecx
    000018c5: 	movq	%rsi, %rax
    000018c8: 	movq	%rsi, 0x90(%rsp)
    000018d0: 	andq	$-0x2, %rsi
    000018d4: 	shrq	%rax
    000018d7: 	movb	%cl, 0x70(%rsp)
    000018db: 	shlq	$0x4, %rax
    000018df: 	movq	%rsi, 0x88(%rsp)
    000018e7: 	movq	%rax, 0x80(%rsp)
    000018ef: 	leaq	(,%rsi,8), %rax
    000018f7: 	leaq	(%r13,%rax), %r14
    000018fc: 	addq	%rbp, %rax
    000018ff: 	movq	%rax, 0x28(%rsp)
.Ltmp1400:
    00001904: 	cmpq	%r13, 0x8(%rsp)
    00001909: 	je	.Ltmp1388 # Offset: 6409
    0000190b: 	cmpb	$0x0, 0x70(%rsp)
    00001910: 	je	.Ltmp1389 # Offset: 6416
    00001916: 	movq	0x80(%rsp), %rdx
    0000191e: 	xorl	%eax, %eax
.Ltmp1390:
    00001920: 	movupd	(%r13,%rax), %xmm6
    00001927: 	movups	%xmm6, (%rbp,%rax)
    0000192c: 	addq	$0x10, %rax
    00001930: 	cmpq	%rdx, %rax
    00001933: 	jne	.Ltmp1390 # Offset: 6451
    00001935: 	movq	0x90(%rsp), %rsi
    0000193d: 	cmpq	%rsi, 0x88(%rsp)
    00001945: 	je	.Ltmp1388 # Offset: 6469
    00001947: 	movsd	(%r14), %xmm0
    0000194c: 	movq	0x28(%rsp), %rax
    00001951: 	movsd	%xmm0, (%rax)
.Ltmp1388:
    00001955: 	cmpq	$0x8, 0x68(%rsp)
    0000195b: 	jle	.Ltmp1391 # Offset: 6491
    00001961: 	movsd	(%rbp), %xmm1
    00001966: 	movq	%r15, %r8
    00001969: 	movq	%rbp, %rax
    0000196c: 	nopl	(%rax) # Size: 4
.Ltmp1396:
    00001970: 	movsd	-0x8(%r8), %xmm2
    00001976: 	leaq	-0x8(%r8), %rdx
    0000197a: 	comisd	%xmm1, %xmm2
    0000197e: 	ja	.Ltmp1392 # Offset: 6526
    00001980: 	cmpq	%rax, %rdx
    00001983: 	jbe	.Ltmp1393 # Offset: 6531
    00001989: 	movsd	(%rax), %xmm0
    0000198d: 	comisd	%xmm0, %xmm1
    00001991: 	jbe	.Ltmp1394 # Offset: 6545
    00001993: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1395:
    00001998: 	movsd	0x8(%rax), %xmm0
    0000199d: 	addq	$0x8, %rax
    000019a1: 	comisd	%xmm0, %xmm1
    000019a5: 	ja	.Ltmp1395 # Offset: 6565
    000019a7: 	cmpq	%rax, %rdx
    000019aa: 	jbe	.Ltmp1393 # Offset: 6570
.Ltmp1394:
    000019b0: 	movsd	%xmm0, (%rdx)
    000019b4: 	movsd	%xmm2, (%rax)
.Ltmp1392:
    000019b8: 	movq	%rdx, %r8
    000019bb: 	jmp	.Ltmp1396 # Offset: 6587
.Ltmp1532:
    000019bd: 	movq	%r8, %rsi
    000019c0: 	movq	%r8, 0x98(%rsp)
    000019c8: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 6600
    000019cd: 	movq	0x98(%rsp), %rdi
    000019d5: 	movq	%r15, %rsi
    000019d8: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 6616
.Ltmp1391:
    000019dd: 	movq	0x78(%rsp), %rax
    000019e2: 	jmp	.Ltmp1397 # Offset: 6626
    000019e4: 	nopl	(%rax) # Size: 4
.Ltmp1399:
    000019e8: 	addq	$0x8, %rax
    000019ec: 	movsd	-0x10(%rax), %xmm0
    000019f1: 	comisd	(%rdx), %xmm0
    000019f5: 	ja	.Ltmp1398 # Offset: 6645
.Ltmp1397:
    000019fb: 	movq	%rax, %rdx
    000019fe: 	cmpq	%rax, %r15
    00001a01: 	jne	.Ltmp1399 # Offset: 6657
    00001a03: 	addl	$0x1, 0x38(%rsp)
    00001a08: 	movl	0x38(%rsp), %eax
    00001a0c: 	cmpl	0x48(%rsp), %eax
    00001a10: 	jl	.Ltmp1400 # Offset: 6672
.Ltmp1387:
    00001a16: 	callq	clock@PLT # Offset: 6678
    00001a1b: 	movq	0x18(%rsp), %rdi
    00001a20: 	pxor	%xmm0, %xmm0
    00001a24: 	movq	%rax, end_time(%rip)
    00001a2b: 	subq	start_time(%rip), %rax
    00001a32: 	cvtsi2sd	%rax, %xmm0
    00001a37: 	divsd	DATAat0x15638(%rip), %xmm0
    00001a3f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6719
    00001a44: 	movq	0x1c0(%rsp), %rdi
    00001a4c: 	cmpq	0x10(%rsp), %rdi
    00001a51: 	je	.Ltmp1401 # Offset: 6737
    00001a53: 	movq	0x1d0(%rsp), %rax
    00001a5b: 	leaq	0x1(%rax), %rsi
    00001a5f: 	callq	_ZdlPvm@PLT # Offset: 6751
.Ltmp1401:
    00001a64: 	movq	0x20(%rsp), %r14
    00001a69: 	leaq	0x1a0(%rsp), %rdi
    00001a71: 	leaq	DATAat0x1529d(%rip), %rdx
    00001a78: 	movq	%r14, %rsi
    00001a7b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6779
    00001a80: 	movl	iterations(%rip), %edx
    00001a86: 	movl	$0x1, %r8d
    00001a8c: 	movl	$0x1, %ecx
    00001a91: 	movq	0x1a0(%rsp), %rdi
    00001a99: 	movl	$0x7d0, %esi
    00001a9e: 	callq	_Z9summarizePKciiii # Offset: 6814
    00001aa3: 	movq	0x18(%rsp), %rdi
    00001aa8: 	leaq	DATAat0x152af(%rip), %rdx
    00001aaf: 	movq	%r14, %rsi
    00001ab2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6834
    00001ab7: 	callq	clock@PLT # Offset: 6839
    00001abc: 	leaq	0x1e8(%rsp), %rdi
    00001ac4: 	movl	$0x0, 0x38(%rsp)
    00001acc: 	movq	%rax, start_time(%rip)
    00001ad3: 	movl	iterations(%rip), %eax
    00001ad9: 	movq	%rdi, 0x28(%rsp)
    00001ade: 	movl	%eax, 0x48(%rsp)
    00001ae2: 	testl	%eax, %eax
    00001ae4: 	jle	.Ltmp1402 # Offset: 6884
.Ltmp1407:
    00001aea: 	movl	$0x3e80, %edx
    00001aef: 	movq	%r12, %rsi
    00001af2: 	movq	%rbx, %rdi
    00001af5: 	movl	$0x3e7, %r14d
    00001afb: 	callq	memcpy@PLT # Offset: 6907
.Ltmp1403:
    00001b00: 	movsd	(%rbx,%r14,8), %xmm0
    00001b06: 	movq	%r14, %rdx
    00001b09: 	movq	%rbx, %rsi
    00001b0c: 	movl	$0x7d0, %edi
    00001b11: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 6929
    00001b16: 	subq	$0x1, %r14
    00001b1a: 	jae	.Ltmp1403 # Offset: 6938
    00001b1c: 	movl	$0x7cf, %r14d
    00001b22: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1404:
    00001b28: 	movsd	(%rbx,%r14,8), %xmm0
    00001b2e: 	xorl	%edx, %edx
    00001b30: 	movq	%r14, %rdi
    00001b33: 	movq	%rbx, %rsi
    00001b36: 	movsd	0x1e0(%rsp), %xmm1
    00001b3f: 	movsd	%xmm1, (%rbx,%r14,8)
    00001b45: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 6981
    00001b4a: 	subq	$0x1, %r14
    00001b4e: 	jne	.Ltmp1404 # Offset: 6990
    00001b50: 	movsd	0x1e0(%rsp), %xmm0
    00001b59: 	movq	0x28(%rsp), %rax
    00001b5e: 	nop # Size: 2
.Ltmp1406:
    00001b60: 	addq	$0x8, %rax
    00001b64: 	movapd	%xmm0, %xmm1
    00001b68: 	movsd	-0x8(%rax), %xmm0
    00001b6d: 	comisd	%xmm0, %xmm1
    00001b71: 	ja	.Ltmp1405 # Offset: 7025
    00001b77: 	cmpq	%r12, %rax
    00001b7a: 	jne	.Ltmp1406 # Offset: 7034
    00001b7c: 	addl	$0x1, 0x38(%rsp)
    00001b81: 	movl	0x38(%rsp), %eax
    00001b85: 	cmpl	0x48(%rsp), %eax
    00001b89: 	jl	.Ltmp1407 # Offset: 7049
.Ltmp1402:
    00001b8f: 	callq	clock@PLT # Offset: 7055
    00001b94: 	movq	0x18(%rsp), %rdi
    00001b99: 	pxor	%xmm0, %xmm0
    00001b9d: 	movq	%rax, end_time(%rip)
    00001ba4: 	subq	start_time(%rip), %rax
    00001bab: 	cvtsi2sd	%rax, %xmm0
    00001bb0: 	divsd	DATAat0x15638(%rip), %xmm0
    00001bb8: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7096
    00001bbd: 	movq	0x1c0(%rsp), %rdi
    00001bc5: 	cmpq	0x10(%rsp), %rdi
    00001bca: 	je	.Ltmp1408 # Offset: 7114
    00001bcc: 	movq	0x1d0(%rsp), %rax
    00001bd4: 	leaq	0x1(%rax), %rsi
    00001bd8: 	callq	_ZdlPvm@PLT # Offset: 7128
.Ltmp1408:
    00001bdd: 	movq	0x20(%rsp), %rsi
    00001be2: 	movq	0x18(%rsp), %rdi
    00001be7: 	leaq	DATAat0x152ca(%rip), %rdx
    00001bee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7150
    00001bf3: 	callq	clock@PLT # Offset: 7155
    00001bf8: 	movq	%rax, start_time(%rip)
    00001bff: 	movl	iterations(%rip), %eax
    00001c05: 	movl	%eax, 0x70(%rsp)
    00001c09: 	testl	%eax, %eax
    00001c0b: 	jle	.Ltmp1409 # Offset: 7179
    00001c11: 	movq	%r15, %rax
    00001c14: 	leaq	0x8(%r13), %rdx
    00001c18: 	movl	$0x0, 0x48(%rsp)
    00001c20: 	subq	%rbp, %rax
    00001c23: 	movq	%rax, %rdi
    00001c26: 	shrq	$0x3f, %rax
    00001c2a: 	sarq	$0x3, %rdi
    00001c2e: 	addq	%rdi, %rax
    00001c31: 	movq	%rdi, 0x98(%rsp)
    00001c39: 	sarq	%rax
    00001c3c: 	subq	$0x1, %rax
    00001c40: 	movq	%rax, 0x78(%rsp)
    00001c45: 	leaq	-0x1(%rdi), %rax
    00001c49: 	movq	%rax, 0x80(%rsp)
    00001c51: 	leaq	0x8(%rbp), %rax
    00001c55: 	movq	%rax, 0x90(%rsp)
    00001c5d: 	movq	0x8(%rsp), %rax
    00001c62: 	subq	$0x8, %rax
    00001c66: 	subq	%r13, %rax
    00001c69: 	cmpq	%rdx, %rbp
    00001c6c: 	setne	%cl
    00001c6f: 	cmpq	$0x10, %rax
    00001c73: 	seta	%dl
    00001c76: 	shrq	$0x3, %rax
    00001c7a: 	leaq	0x1(%rax), %rsi
    00001c7e: 	andl	%edx, %ecx
    00001c80: 	movq	%rsi, %rax
    00001c83: 	movq	%rsi, 0xb0(%rsp)
    00001c8b: 	andq	$-0x2, %rsi
    00001c8f: 	shrq	%rax
    00001c92: 	movb	%cl, 0x88(%rsp)
    00001c99: 	shlq	$0x4, %rax
    00001c9d: 	movq	%rsi, 0xa8(%rsp)
    00001ca5: 	movq	%rax, 0xa0(%rsp)
    00001cad: 	leaq	(,%rsi,8), %rax
    00001cb5: 	leaq	(%r13,%rax), %rdi
    00001cba: 	addq	%rbp, %rax
    00001cbd: 	movq	%rdi, 0x38(%rsp)
    00001cc2: 	movq	%rax, 0x28(%rsp)
.Ltmp1420:
    00001cc7: 	cmpq	%r13, 0x8(%rsp)
    00001ccc: 	je	.Ltmp1410 # Offset: 7372
    00001cce: 	cmpb	$0x0, 0x88(%rsp)
    00001cd6: 	je	.Ltmp1411 # Offset: 7382
    00001cdc: 	movq	0xa0(%rsp), %rdx
    00001ce4: 	xorl	%eax, %eax
    00001ce6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1412:
    00001cf0: 	movupd	(%r13,%rax), %xmm7
    00001cf7: 	movups	%xmm7, (%rbp,%rax)
    00001cfc: 	addq	$0x10, %rax
    00001d00: 	cmpq	%rdx, %rax
    00001d03: 	jne	.Ltmp1412 # Offset: 7427
    00001d05: 	movq	0xb0(%rsp), %rdi
    00001d0d: 	cmpq	%rdi, 0xa8(%rsp)
    00001d15: 	je	.Ltmp1410 # Offset: 7445
    00001d17: 	movq	0x38(%rsp), %rax
    00001d1c: 	movsd	(%rax), %xmm0
    00001d20: 	movq	0x28(%rsp), %rax
    00001d25: 	movsd	%xmm0, (%rax)
.Ltmp1410:
    00001d29: 	movq	0x78(%rsp), %rax
    00001d2e: 	movq	%rax, %r14
    00001d31: 	testq	%rax, %rax
    00001d34: 	js	.Ltmp1413 # Offset: 7476
    00001d36: 	movq	%rbx, 0x68(%rsp)
    00001d3b: 	movq	0x98(%rsp), %rbx
    00001d43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1414:
    00001d48: 	movsd	(%rbp,%r14,8), %xmm0
    00001d4f: 	movq	%r14, %rdx
    00001d52: 	movq	%rbp, %rsi
    00001d55: 	movq	%rbx, %rdi
    00001d58: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_ # Offset: 7512
    00001d5d: 	subq	$0x1, %r14
    00001d61: 	jae	.Ltmp1414 # Offset: 7521
    00001d63: 	movq	0x68(%rsp), %rbx
.Ltmp1413:
    00001d68: 	movq	0x80(%rsp), %rax
    00001d70: 	movq	%rax, %r14
    00001d73: 	testq	%rax, %rax
    00001d76: 	jle	.Ltmp1415 # Offset: 7542
    00001d78: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1416:
    00001d80: 	movsd	(%rbp), %xmm1
    00001d85: 	xorl	%edx, %edx
    00001d87: 	movq	%r14, %rdi
    00001d8a: 	movq	%rbp, %rsi
    00001d8d: 	movsd	(%rbp,%r14,8), %xmm0
    00001d94: 	movsd	%xmm1, (%rbp,%r14,8)
    00001d9b: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_ # Offset: 7579
    00001da0: 	subq	$0x1, %r14
    00001da4: 	jne	.Ltmp1416 # Offset: 7588
.Ltmp1415:
    00001da6: 	movq	0x90(%rsp), %rax
    00001dae: 	jmp	.Ltmp1417 # Offset: 7598
.Ltmp1419:
    00001db0: 	addq	$0x8, %rax
    00001db4: 	movsd	-0x10(%rax), %xmm0
    00001db9: 	comisd	(%rdx), %xmm0
    00001dbd: 	ja	.Ltmp1418 # Offset: 7613
.Ltmp1417:
    00001dc3: 	movq	%rax, %rdx
    00001dc6: 	cmpq	%rax, %r15
    00001dc9: 	jne	.Ltmp1419 # Offset: 7625
    00001dcb: 	addl	$0x1, 0x48(%rsp)
    00001dd0: 	movl	0x48(%rsp), %eax
    00001dd4: 	cmpl	0x70(%rsp), %eax
    00001dd8: 	jl	.Ltmp1420 # Offset: 7640
.Ltmp1409:
    00001dde: 	callq	clock@PLT # Offset: 7646
    00001de3: 	movq	0x18(%rsp), %rdi
    00001de8: 	pxor	%xmm0, %xmm0
    00001dec: 	movq	%rax, end_time(%rip)
    00001df3: 	subq	start_time(%rip), %rax
    00001dfa: 	cvtsi2sd	%rax, %xmm0
    00001dff: 	divsd	DATAat0x15638(%rip), %xmm0
    00001e07: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7687
    00001e0c: 	movq	0x1c0(%rsp), %rdi
    00001e14: 	cmpq	0x10(%rsp), %rdi
    00001e19: 	je	.Ltmp1421 # Offset: 7705
    00001e1b: 	movq	0x1d0(%rsp), %rax
    00001e23: 	leaq	0x1(%rax), %rsi
    00001e27: 	callq	_ZdlPvm@PLT # Offset: 7719
.Ltmp1421:
    00001e2c: 	movq	0x20(%rsp), %rsi
    00001e31: 	movq	0x18(%rsp), %rdi
    00001e36: 	leaq	DATAat0x15560(%rip), %rdx
    00001e3d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7741
    00001e42: 	callq	clock@PLT # Offset: 7746
    00001e47: 	movl	$0x0, 0x38(%rsp)
    00001e4f: 	movq	%rax, start_time(%rip)
    00001e56: 	leaq	0x1e8(%rsp), %rax
    00001e5e: 	movq	%rax, 0x28(%rsp)
    00001e63: 	movl	iterations(%rip), %eax
    00001e69: 	testl	%eax, %eax
    00001e6b: 	jle	.Ltmp1422 # Offset: 7787
.Ltmp1427:
    00001e71: 	movq	%rbx, %rdi
    00001e74: 	movl	$0x3e80, %edx
    00001e79: 	movq	%r12, %rsi
    00001e7c: 	movl	$0x3e7, %r14d
    00001e82: 	callq	memcpy@PLT # Offset: 7810
    00001e87: 	movq	%rbp, 0x48(%rsp)
    00001e8c: 	movq	%rbx, %rbp
    00001e8f: 	movq	0x30(%rsp), %rbx
    00001e94: 	nopl	(%rax) # Size: 4
.Ltmp1423:
    00001e98: 	movsd	(%rbp,%r14,8), %xmm0
    00001e9f: 	movq	%r14, %rdx
    00001ea2: 	movq	%rbx, %rsi
    00001ea5: 	movl	$0x7d0, %edi
    00001eaa: 	movq	%rbp, 0xf8(%rsp)
    00001eb2: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_ # Offset: 7858
    00001eb7: 	subq	$0x1, %r14
    00001ebb: 	jae	.Ltmp1423 # Offset: 7867
    00001ebd: 	movq	0x30(%rsp), %rbx
    00001ec2: 	movl	$0x7cf, %r14d
    00001ec8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1424:
    00001ed0: 	movsd	(%rbp,%r14,8), %xmm0
    00001ed7: 	xorl	%edx, %edx
    00001ed9: 	movq	%r14, %rdi
    00001edc: 	movq	%rbx, %rsi
    00001edf: 	movsd	0x1e0(%rsp), %xmm1
    00001ee8: 	movq	%rbp, 0xf8(%rsp)
    00001ef0: 	movsd	%xmm1, (%rbp,%r14,8)
    00001ef7: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_ # Offset: 7927
    00001efc: 	subq	$0x1, %r14
    00001f00: 	jne	.Ltmp1424 # Offset: 7936
    00001f02: 	movq	%rbp, %rbx
    00001f05: 	movq	0x28(%rsp), %rax
    00001f0a: 	movq	0x48(%rsp), %rbp
    00001f0f: 	movsd	0x1e0(%rsp), %xmm0
    00001f18: 	movq	0x50(%rsp), %rdx
    00001f1d: 	nopl	(%rax) # Size: 3
.Ltmp1426:
    00001f20: 	movapd	%xmm0, %xmm1
    00001f24: 	movsd	(%rax), %xmm0
    00001f28: 	comisd	%xmm0, %xmm1
    00001f2c: 	ja	.Ltmp1425 # Offset: 7980
    00001f32: 	addq	$0x8, %rax
    00001f36: 	cmpq	%rax, %rdx
    00001f39: 	jne	.Ltmp1426 # Offset: 7993
.Ltmp1474:
    00001f3b: 	addl	$0x1, 0x38(%rsp)
    00001f40: 	movl	0x38(%rsp), %eax
    00001f44: 	cmpl	iterations(%rip), %eax
    00001f4a: 	jl	.Ltmp1427 # Offset: 8010
.Ltmp1422:
    00001f50: 	callq	clock@PLT # Offset: 8016
    00001f55: 	movq	0x18(%rsp), %rdi
    00001f5a: 	pxor	%xmm0, %xmm0
    00001f5e: 	movq	%rax, end_time(%rip)
    00001f65: 	subq	start_time(%rip), %rax
    00001f6c: 	cvtsi2sd	%rax, %xmm0
    00001f71: 	divsd	DATAat0x15638(%rip), %xmm0
    00001f79: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8057
    00001f7e: 	movq	0x1c0(%rsp), %rdi
    00001f86: 	cmpq	0x10(%rsp), %rdi
    00001f8b: 	je	.Ltmp1428 # Offset: 8075
    00001f8d: 	movq	0x1d0(%rsp), %rax
    00001f95: 	leaq	0x1(%rax), %rsi
    00001f99: 	callq	_ZdlPvm@PLT # Offset: 8089
.Ltmp1428:
    00001f9e: 	movq	0x18(%rsp), %rbx
    00001fa3: 	movq	0x20(%rsp), %rsi
    00001fa8: 	leaq	DATAat0x15588(%rip), %rdx
    00001faf: 	movq	%rbx, %rdi
    00001fb2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8114
    00001fb7: 	movq	0x8(%rsp), %rax
    00001fbc: 	movq	0x30(%rsp), %rcx
    00001fc1: 	movq	%rbx, %r8
    00001fc4: 	movq	%r15, 0xf8(%rsp)
    00001fcc: 	movq	0x40(%rsp), %rdx
    00001fd1: 	movq	0x60(%rsp), %rsi
    00001fd6: 	movq	%rbp, 0xe8(%rsp)
    00001fde: 	movq	0x58(%rsp), %rdi
    00001fe3: 	movq	%rax, 0xd8(%rsp)
    00001feb: 	movq	%r13, 0xc8(%rsp)
    00001ff3: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 8179
    00001ff8: 	movq	0x1c0(%rsp), %rdi
    00002000: 	cmpq	0x10(%rsp), %rdi
    00002005: 	je	.Ltmp1429 # Offset: 8197
    00002007: 	movq	0x1d0(%rsp), %rax
    0000200f: 	leaq	0x1(%rax), %rsi
    00002013: 	callq	_ZdlPvm@PLT # Offset: 8211
.Ltmp1429:
    00002018: 	movq	0x18(%rsp), %rbx
    0000201d: 	movq	0x20(%rsp), %rsi
    00002022: 	leaq	DATAat0x155b8(%rip), %rdx
    00002029: 	movq	%rbx, %rdi
    0000202c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8236
    00002031: 	movq	0x8(%rsp), %rax
    00002036: 	movq	0x30(%rsp), %rcx
    0000203b: 	movq	%rbx, %r8
    0000203e: 	movq	%r15, 0xf8(%rsp)
    00002046: 	movq	0x40(%rsp), %rdx
    0000204b: 	movq	0x60(%rsp), %rsi
    00002050: 	movq	%rbp, 0xe8(%rsp)
    00002058: 	movq	0x58(%rsp), %rdi
    0000205d: 	movq	%rax, 0xd8(%rsp)
    00002065: 	movq	%r13, 0xc8(%rsp)
    0000206d: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEdEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 8301
    00002072: 	movq	0x1c0(%rsp), %rdi
    0000207a: 	cmpq	0x10(%rsp), %rdi
    0000207f: 	je	.Ltmp1430 # Offset: 8319
    00002081: 	movq	0x1d0(%rsp), %rax
    00002089: 	leaq	0x1(%rax), %rsi
    0000208d: 	callq	_ZdlPvm@PLT # Offset: 8333
.Ltmp1430:
    00002092: 	movq	0x20(%rsp), %rsi
    00002097: 	movq	0x18(%rsp), %rdi
    0000209c: 	leaq	DATAat0x155e8(%rip), %rdx
    000020a3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8355
    000020a8: 	callq	clock@PLT # Offset: 8360
    000020ad: 	movq	%rax, start_time(%rip)
    000020b4: 	movl	iterations(%rip), %eax
    000020ba: 	movl	%eax, 0x38(%rsp)
    000020be: 	testl	%eax, %eax
    000020c0: 	jle	.Ltmp1431 # Offset: 8384
    000020c6: 	movq	%r15, %rax
    000020c9: 	leaq	0x8(%r13), %rdx
    000020cd: 	movl	$0x0, 0x30(%rsp)
    000020d5: 	subq	%rbp, %rax
    000020d8: 	movq	%rax, %rbx
    000020db: 	shrq	$0x3f, %rax
    000020df: 	sarq	$0x3, %rbx
    000020e3: 	addq	%rbx, %rax
    000020e6: 	sarq	%rax
    000020e9: 	subq	$0x1, %rax
    000020ed: 	movq	%rax, 0x40(%rsp)
    000020f2: 	leaq	-0x1(%rbx), %rax
    000020f6: 	movq	%rax, 0x48(%rsp)
    000020fb: 	leaq	0x8(%rbp), %rax
    000020ff: 	movq	%rax, 0x58(%rsp)
    00002104: 	movq	0x8(%rsp), %rax
    00002109: 	subq	$0x8, %rax
    0000210d: 	subq	%r13, %rax
    00002110: 	cmpq	%rdx, %rbp
    00002113: 	setne	%cl
    00002116: 	cmpq	$0x10, %rax
    0000211a: 	seta	%dl
    0000211d: 	shrq	$0x3, %rax
    00002121: 	leaq	0x1(%rax), %rdi
    00002125: 	andl	%edx, %ecx
    00002127: 	movq	%rdi, %rax
    0000212a: 	movq	%rdi, 0x70(%rsp)
    0000212f: 	andq	$-0x2, %rdi
    00002133: 	shrq	%rax
    00002136: 	movb	%cl, 0x50(%rsp)
    0000213a: 	shlq	$0x4, %rax
    0000213e: 	movq	%rdi, 0x60(%rsp)
    00002143: 	movq	%rax, 0x68(%rsp)
    00002148: 	leaq	(,%rdi,8), %rax
    00002150: 	leaq	(%r13,%rax), %r12
    00002155: 	addq	%rbp, %rax
    00002158: 	movq	%rax, 0x28(%rsp)
.Ltmp1442:
    0000215d: 	cmpq	%r13, 0x8(%rsp)
    00002162: 	je	.Ltmp1432 # Offset: 8546
    00002164: 	cmpb	$0x0, 0x50(%rsp)
    00002169: 	je	.Ltmp1433 # Offset: 8553
    0000216f: 	movq	0x68(%rsp), %rdx
    00002174: 	xorl	%eax, %eax
    00002176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1434:
    00002180: 	movupd	(%r13,%rax), %xmm3
    00002187: 	movups	%xmm3, (%rbp,%rax)
    0000218c: 	addq	$0x10, %rax
    00002190: 	cmpq	%rax, %rdx
    00002193: 	jne	.Ltmp1434 # Offset: 8595
    00002195: 	movq	0x70(%rsp), %rsi
    0000219a: 	cmpq	%rsi, 0x60(%rsp)
    0000219f: 	je	.Ltmp1432 # Offset: 8607
    000021a1: 	movsd	(%r12), %xmm0
    000021a7: 	movq	0x28(%rsp), %rax
    000021ac: 	movsd	%xmm0, (%rax)
.Ltmp1432:
    000021b0: 	movq	0x40(%rsp), %rax
    000021b5: 	movq	%rax, %r14
    000021b8: 	testq	%rax, %rax
    000021bb: 	js	.Ltmp1435 # Offset: 8635
    000021bd: 	nopl	(%rax) # Size: 3
.Ltmp1436:
    000021c0: 	movsd	(%rbp,%r14,8), %xmm0
    000021c7: 	movq	%r14, %rdx
    000021ca: 	movq	%rbp, %rsi
    000021cd: 	movq	%rbx, %rdi
    000021d0: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEdEEvlT_lT0_ # Offset: 8656
    000021d5: 	subq	$0x1, %r14
    000021d9: 	jae	.Ltmp1436 # Offset: 8665
.Ltmp1435:
    000021db: 	movq	0x48(%rsp), %rax
    000021e0: 	movq	%rax, %r14
    000021e3: 	testq	%rax, %rax
    000021e6: 	jle	.Ltmp1437 # Offset: 8678
    000021e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1438:
    000021f0: 	movsd	(%rbp), %xmm1
    000021f5: 	xorl	%edx, %edx
    000021f7: 	movq	%r14, %rdi
    000021fa: 	movq	%rbp, %rsi
    000021fd: 	movsd	(%rbp,%r14,8), %xmm0
    00002204: 	movsd	%xmm1, (%rbp,%r14,8)
    0000220b: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEdEEvlT_lT0_ # Offset: 8715
    00002210: 	subq	$0x1, %r14
    00002214: 	jne	.Ltmp1438 # Offset: 8724
.Ltmp1437:
    00002216: 	movq	0x58(%rsp), %rax
    0000221b: 	jmp	.Ltmp1439 # Offset: 8731
    0000221d: 	nopl	(%rax) # Size: 3
.Ltmp1441:
    00002220: 	addq	$0x8, %rax
    00002224: 	movsd	-0x10(%rax), %xmm0
    00002229: 	comisd	(%rdx), %xmm0
    0000222d: 	ja	.Ltmp1440 # Offset: 8749
.Ltmp1439:
    00002233: 	movq	%rax, %rdx
    00002236: 	cmpq	%rax, %r15
    00002239: 	jne	.Ltmp1441 # Offset: 8761
    0000223b: 	addl	$0x1, 0x30(%rsp)
    00002240: 	movl	0x30(%rsp), %eax
    00002244: 	cmpl	0x38(%rsp), %eax
    00002248: 	jl	.Ltmp1442 # Offset: 8776
.Ltmp1431:
    0000224e: 	callq	clock@PLT # Offset: 8782
    00002253: 	movq	0x18(%rsp), %rdi
    00002258: 	pxor	%xmm0, %xmm0
    0000225c: 	movq	%rax, end_time(%rip)
    00002263: 	subq	start_time(%rip), %rax
    0000226a: 	cvtsi2sd	%rax, %xmm0
    0000226f: 	divsd	DATAat0x15638(%rip), %xmm0
    00002277: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8823
    0000227c: 	movq	0x1c0(%rsp), %rdi
    00002284: 	cmpq	0x10(%rsp), %rdi
    00002289: 	je	.Ltmp1443 # Offset: 8841
    0000228b: 	movq	0x1d0(%rsp), %rax
    00002293: 	leaq	0x1(%rax), %rsi
    00002297: 	callq	_ZdlPvm@PLT # Offset: 8855
.Ltmp1443:
    0000229c: 	movq	0x20(%rsp), %rsi
    000022a1: 	movq	0x18(%rsp), %rdi
    000022a6: 	leaq	DATAat0x152e5(%rip), %rdx
    000022ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8877
    000022b2: 	movl	iterations(%rip), %edx
    000022b8: 	movl	$0x1, %r8d
    000022be: 	movl	$0x1, %ecx
    000022c3: 	movq	0x1c0(%rsp), %rdi
    000022cb: 	movl	$0x7d0, %esi
    000022d0: 	callq	_Z9summarizePKciiii # Offset: 8912
    000022d5: 	movl	0xbc(%rsp), %eax
    000022dc: 	movq	0x1c0(%rsp), %rdi
    000022e4: 	movl	%eax, iterations(%rip)
    000022ea: 	cmpq	0x10(%rsp), %rdi
    000022ef: 	je	.Ltmp1444 # Offset: 8943
    000022f1: 	movq	0x1d0(%rsp), %rax
    000022f9: 	leaq	0x1(%rax), %rsi
    000022fd: 	callq	_ZdlPvm@PLT # Offset: 8957
.Ltmp1444:
    00002302: 	movq	0x1a0(%rsp), %rdi
    0000230a: 	leaq	0x1b0(%rsp), %rax
    00002312: 	cmpq	%rax, %rdi
    00002315: 	je	.Ltmp1445 # Offset: 8981
    00002317: 	movq	0x1b0(%rsp), %rax
    0000231f: 	leaq	0x1(%rax), %rsi
    00002323: 	callq	_ZdlPvm@PLT # Offset: 8995
.Ltmp1445:
    00002328: 	movq	0x180(%rsp), %rdi
    00002330: 	leaq	0x190(%rsp), %rax
    00002338: 	cmpq	%rax, %rdi
    0000233b: 	je	.Ltmp1446 # Offset: 9019
    0000233d: 	movq	0x190(%rsp), %rax
    00002345: 	leaq	0x1(%rax), %rsi
    00002349: 	callq	_ZdlPvm@PLT # Offset: 9033
.Ltmp1446:
    0000234e: 	movq	0x130(%rsp), %rsi
    00002356: 	movq	%r13, %rdi
    00002359: 	subq	%r13, %rsi
    0000235c: 	callq	_ZdlPvm@PLT # Offset: 9052
    00002361: 	movq	0x160(%rsp), %rdi
    00002369: 	leaq	0x170(%rsp), %rax
    00002371: 	cmpq	%rax, %rdi
    00002374: 	je	.Ltmp1447 # Offset: 9076
    00002376: 	movq	0x170(%rsp), %rax
    0000237e: 	leaq	0x1(%rax), %rsi
    00002382: 	callq	_ZdlPvm@PLT # Offset: 9090
.Ltmp1447:
    00002387: 	testq	%rbp, %rbp
    0000238a: 	je	.Ltmp1448 # Offset: 9098
    0000238c: 	movq	0x110(%rsp), %rsi
    00002394: 	movq	%rbp, %rdi
    00002397: 	subq	%rbp, %rsi
    0000239a: 	callq	_ZdlPvm@PLT # Offset: 9114
.Ltmp1448:
    0000239f: 	movq	0x140(%rsp), %rdi
    000023a7: 	leaq	0x150(%rsp), %rax
    000023af: 	cmpq	%rax, %rdi
    000023b2: 	je	.Ltmp1449 # Offset: 9138
    000023b4: 	movq	0x150(%rsp), %rax
    000023bc: 	leaq	0x1(%rax), %rsi
    000023c0: 	callq	_ZdlPvm@PLT # Offset: 9152
.Ltmp1449:
    000023c5: 	movq	0x7ee8(%rsp), %rax
    000023cd: 	subq	%fs:0x28, %rax
    000023d6: 	jne	.Ltmp1450 # Offset: 9174
    000023dc: 	addq	$0x7ef8, %rsp
    000023e3: 	popq	%rbx
    000023e4: 	popq	%rbp
    000023e5: 	popq	%r12
    000023e7: 	popq	%r13
    000023e9: 	popq	%r14
    000023eb: 	popq	%r15
    000023ed: 	retq # Offset: 9197
.Ltmp1393:
    000023ee: 	movq	%r8, %rax
    000023f1: 	subq	%rbp, %rax
    000023f4: 	cmpq	$0x8, %rax
    000023f8: 	jle	.Ltmp1451 # Offset: 9208
    000023fe: 	movsd	(%rbp), %xmm1
    00002403: 	movq	%r8, %rcx
    00002406: 	movq	%rbp, %rdx
    00002409: 	nopl	(%rax) # Size: 7
.Ltmp1456:
    00002410: 	comisd	%xmm1, %xmm2
    00002414: 	leaq	-0x8(%rcx), %rsi
    00002418: 	ja	.Ltmp1452 # Offset: 9240
    0000241a: 	cmpq	%rdx, %rsi
    0000241d: 	jbe	.Ltmp1453 # Offset: 9245
    00002423: 	movsd	(%rdx), %xmm0
    00002427: 	leaq	0x8(%rdx), %rax
    0000242b: 	comisd	%xmm0, %xmm1
    0000242f: 	jbe	.Ltmp1454 # Offset: 9263
    00002431: 	nopl	(%rax) # Size: 7
.Ltmp1455:
    00002438: 	movq	%rax, %rdx
    0000243b: 	movsd	(%rax), %xmm0
    0000243f: 	leaq	0x8(%rax), %rax
    00002443: 	comisd	%xmm0, %xmm1
    00002447: 	ja	.Ltmp1455 # Offset: 9287
    00002449: 	cmpq	%rdx, %rsi
    0000244c: 	jbe	.Ltmp1453 # Offset: 9292
.Ltmp1454:
    00002452: 	movsd	%xmm0, (%rsi)
    00002456: 	movsd	%xmm2, (%rdx)
.Ltmp1452:
    0000245a: 	movsd	-0x8(%rsi), %xmm2
    0000245f: 	movq	%rsi, %rcx
    00002462: 	jmp	.Ltmp1456 # Offset: 9314
.Ltmp1543:
    00002464: 	movq	%r9, %rsi
    00002467: 	movq	%r8, 0x98(%rsp)
    0000246f: 	movq	%r9, 0xa0(%rsp)
    00002477: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 9335
    0000247c: 	movq	0x98(%rsp), %rsi
    00002484: 	movq	0xa0(%rsp), %rdi
    0000248c: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 9356
    00002491: 	movq	0x98(%rsp), %r8
.Ltmp1451:
    00002499: 	movq	%r15, %rax
    0000249c: 	subq	%r8, %rax
    0000249f: 	cmpq	$0x8, %rax
    000024a3: 	jle	.Ltmp1391 # Offset: 9379
    000024a9: 	movsd	(%r8), %xmm1
    000024ae: 	movq	%r15, %rcx
    000024b1: 	movq	%r8, %rdx
    000024b4: 	nopl	(%rax) # Size: 4
.Ltmp1461:
    000024b8: 	movsd	-0x8(%rcx), %xmm2
    000024bd: 	leaq	-0x8(%rcx), %rsi
    000024c1: 	comisd	%xmm1, %xmm2
    000024c5: 	ja	.Ltmp1457 # Offset: 9413
    000024c7: 	cmpq	%rdx, %rsi
    000024ca: 	jbe	.Ltmp1458 # Offset: 9418
    000024d0: 	movsd	(%rdx), %xmm0
    000024d4: 	leaq	0x8(%rdx), %rax
    000024d8: 	comisd	%xmm0, %xmm1
    000024dc: 	jbe	.Ltmp1459 # Offset: 9436
    000024de: 	nop # Size: 2
.Ltmp1460:
    000024e0: 	movq	%rax, %rdx
    000024e3: 	movsd	(%rax), %xmm0
    000024e7: 	leaq	0x8(%rax), %rax
    000024eb: 	comisd	%xmm0, %xmm1
    000024ef: 	ja	.Ltmp1460 # Offset: 9455
    000024f1: 	cmpq	%rdx, %rsi
    000024f4: 	jbe	.Ltmp1458 # Offset: 9460
.Ltmp1459:
    000024fa: 	movsd	%xmm0, (%rsi)
    000024fe: 	movsd	%xmm2, (%rdx)
.Ltmp1457:
    00002502: 	movq	%rsi, %rcx
    00002505: 	jmp	.Ltmp1461 # Offset: 9477
.Ltmp1354:
    00002507: 	movq	%r8, %rax
    0000250a: 	subq	%rbp, %rax
    0000250d: 	cmpq	$0x8, %rax
    00002511: 	jle	.Ltmp1462 # Offset: 9489
    00002517: 	movsd	(%rbp), %xmm1
    0000251c: 	movq	%r8, %rdx
    0000251f: 	movq	%rbp, %rax
    00002522: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1467:
    00002528: 	comisd	%xmm1, %xmm2
    0000252c: 	leaq	-0x8(%rdx), %rcx
    00002530: 	ja	.Ltmp1463 # Offset: 9520
    00002532: 	cmpq	%rax, %rcx
    00002535: 	jbe	.Ltmp1464 # Offset: 9525
    0000253b: 	movsd	(%rax), %xmm0
    0000253f: 	comisd	%xmm0, %xmm1
    00002543: 	jbe	.Ltmp1465 # Offset: 9539
    00002545: 	nopl	(%rax) # Size: 3
.Ltmp1466:
    00002548: 	movsd	0x8(%rax), %xmm0
    0000254d: 	addq	$0x8, %rax
    00002551: 	comisd	%xmm0, %xmm1
    00002555: 	ja	.Ltmp1466 # Offset: 9557
    00002557: 	cmpq	%rax, %rcx
    0000255a: 	jbe	.Ltmp1464 # Offset: 9562
.Ltmp1465:
    00002560: 	movsd	%xmm0, (%rcx)
    00002564: 	movsd	%xmm2, (%rax)
.Ltmp1463:
    00002568: 	movsd	-0x8(%rcx), %xmm2
    0000256d: 	movq	%rcx, %rdx
    00002570: 	jmp	.Ltmp1467 # Offset: 9584
.Ltmp1521:
    00002572: 	movq	%r9, %rsi
    00002575: 	movq	%r8, 0x98(%rsp)
    0000257d: 	movq	%r9, 0xa0(%rsp)
    00002585: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 9605
    0000258a: 	movq	0x98(%rsp), %rsi
    00002592: 	movq	0xa0(%rsp), %rdi
    0000259a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 9626
    0000259f: 	movq	0x98(%rsp), %r8
.Ltmp1462:
    000025a7: 	movq	%r15, %rax
    000025aa: 	subq	%r8, %rax
    000025ad: 	cmpq	$0x8, %rax
    000025b1: 	jle	.Ltmp1352 # Offset: 9649
    000025b7: 	movsd	(%r8), %xmm1
    000025bc: 	movq	%r15, %rdx
    000025bf: 	movq	%r8, %rax
    000025c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1472:
    000025c8: 	movsd	-0x8(%rdx), %xmm2
    000025cd: 	leaq	-0x8(%rdx), %rcx
    000025d1: 	comisd	%xmm1, %xmm2
    000025d5: 	ja	.Ltmp1468 # Offset: 9685
    000025d7: 	cmpq	%rax, %rcx
    000025da: 	jbe	.Ltmp1469 # Offset: 9690
    000025e0: 	movsd	(%rax), %xmm0
    000025e4: 	comisd	%xmm0, %xmm1
    000025e8: 	jbe	.Ltmp1470 # Offset: 9704
    000025ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1471:
    000025f0: 	movsd	0x8(%rax), %xmm0
    000025f5: 	addq	$0x8, %rax
    000025f9: 	comisd	%xmm0, %xmm1
    000025fd: 	ja	.Ltmp1471 # Offset: 9725
    000025ff: 	cmpq	%rax, %rcx
    00002602: 	jbe	.Ltmp1469 # Offset: 9730
.Ltmp1470:
    00002608: 	movsd	%xmm0, (%rcx)
    0000260c: 	movsd	%xmm2, (%rax)
.Ltmp1468:
    00002610: 	movq	%rcx, %rdx
    00002613: 	jmp	.Ltmp1472 # Offset: 9747
.Ltmp1359:
    00002615: 	movq	0x1c0(%rsp), %rdx
    0000261d: 	leaq	DATAat0x151ba(%rip), %rsi
    00002624: 	movl	$0x1, %edi
    00002629: 	xorl	%eax, %eax
    0000262b: 	callq	__printf_chk@PLT # Offset: 9771
    00002630: 	movl	iterations(%rip), %eax
    00002636: 	addl	$0x1, 0x38(%rsp)
    0000263b: 	movl	%eax, 0x48(%rsp)
    0000263f: 	movl	0x38(%rsp), %eax
    00002643: 	cmpl	0x48(%rsp), %eax
    00002647: 	jl	.Ltmp1361 # Offset: 9799
    0000264d: 	jmp	.Ltmp1348 # Offset: 9805
.Ltmp1440:
    00002652: 	movq	0x1c0(%rsp), %rdx
    0000265a: 	leaq	DATAat0x151ba(%rip), %rsi
    00002661: 	movl	$0x1, %edi
    00002666: 	xorl	%eax, %eax
    00002668: 	callq	__printf_chk@PLT # Offset: 9832
    0000266d: 	movl	iterations(%rip), %eax
    00002673: 	addl	$0x1, 0x30(%rsp)
    00002678: 	movl	%eax, 0x38(%rsp)
    0000267c: 	movl	0x30(%rsp), %eax
    00002680: 	cmpl	0x38(%rsp), %eax
    00002684: 	jl	.Ltmp1442 # Offset: 9860
    0000268a: 	jmp	.Ltmp1431 # Offset: 9866
.Ltmp1405:
    0000268f: 	movq	0x1c0(%rsp), %rdx
    00002697: 	leaq	DATAat0x151ba(%rip), %rsi
    0000269e: 	movl	$0x1, %edi
    000026a3: 	xorl	%eax, %eax
    000026a5: 	callq	__printf_chk@PLT # Offset: 9893
    000026aa: 	movl	iterations(%rip), %eax
    000026b0: 	addl	$0x1, 0x38(%rsp)
    000026b5: 	movl	%eax, 0x48(%rsp)
    000026b9: 	movl	0x38(%rsp), %eax
    000026bd: 	cmpl	0x48(%rsp), %eax
    000026c1: 	jl	.Ltmp1407 # Offset: 9921
    000026c7: 	jmp	.Ltmp1402 # Offset: 9927
.Ltmp1398:
    000026cc: 	movq	0x1c0(%rsp), %rdx
    000026d4: 	leaq	DATAat0x151ba(%rip), %rsi
    000026db: 	movl	$0x1, %edi
    000026e0: 	xorl	%eax, %eax
    000026e2: 	callq	__printf_chk@PLT # Offset: 9954
    000026e7: 	movl	iterations(%rip), %eax
    000026ed: 	addl	$0x1, 0x38(%rsp)
    000026f2: 	movl	%eax, 0x48(%rsp)
    000026f6: 	movl	0x38(%rsp), %eax
    000026fa: 	cmpl	0x48(%rsp), %eax
    000026fe: 	jl	.Ltmp1400 # Offset: 9982
    00002704: 	jmp	.Ltmp1387 # Offset: 9988
.Ltmp1344:
    00002709: 	movq	0x1c0(%rsp), %rdx
    00002711: 	leaq	DATAat0x151ba(%rip), %rsi
    00002718: 	movl	$0x1, %edi
    0000271d: 	xorl	%eax, %eax
    0000271f: 	callq	__printf_chk@PLT # Offset: 10015
    00002724: 	jmp	.Ltmp1473 # Offset: 10020
.Ltmp1425:
    00002729: 	movq	0x1c0(%rsp), %rdx
    00002731: 	leaq	DATAat0x151ba(%rip), %rsi
    00002738: 	movl	$0x1, %edi
    0000273d: 	xorl	%eax, %eax
    0000273f: 	callq	__printf_chk@PLT # Offset: 10047
    00002744: 	jmp	.Ltmp1474 # Offset: 10052
.Ltmp1418:
    00002749: 	movq	0x1c0(%rsp), %rdx
    00002751: 	leaq	DATAat0x151ba(%rip), %rsi
    00002758: 	movl	$0x1, %edi
    0000275d: 	xorl	%eax, %eax
    0000275f: 	callq	__printf_chk@PLT # Offset: 10079
    00002764: 	movl	iterations(%rip), %eax
    0000276a: 	addl	$0x1, 0x48(%rsp)
    0000276f: 	movl	%eax, 0x70(%rsp)
    00002773: 	movl	0x48(%rsp), %eax
    00002777: 	cmpl	0x70(%rsp), %eax
    0000277b: 	jl	.Ltmp1420 # Offset: 10107
    00002781: 	jmp	.Ltmp1409 # Offset: 10113
.Ltmp1381:
    00002786: 	movq	0x1c0(%rsp), %rdx
    0000278e: 	leaq	DATAat0x151ba(%rip), %rsi
    00002795: 	movl	$0x1, %edi
    0000279a: 	xorl	%eax, %eax
    0000279c: 	callq	__printf_chk@PLT # Offset: 10140
    000027a1: 	addl	$0x1, %r14d
    000027a5: 	cmpl	iterations(%rip), %r14d
    000027ac: 	jl	.Ltmp1383 # Offset: 10156
    000027b2: 	jmp	.Ltmp1363 # Offset: 10162
.Ltmp1316:
    000027b7: 	movq	0x1c0(%rsp), %rdx
    000027bf: 	leaq	DATAat0x151ba(%rip), %rsi
    000027c6: 	movl	$0x1, %edi
    000027cb: 	xorl	%eax, %eax
    000027cd: 	callq	__printf_chk@PLT # Offset: 10189
    000027d2: 	addl	$0x1, %r14d
    000027d6: 	cmpl	iterations(%rip), %r14d
    000027dd: 	jl	.Ltmp1318 # Offset: 10205
    000027e3: 	jmp	.Ltmp1312 # Offset: 10211
.Ltmp1332:
    000027e8: 	movq	0x1c0(%rsp), %rdx
    000027f0: 	leaq	DATAat0x151ba(%rip), %rsi
    000027f7: 	movl	$0x1, %edi
    000027fc: 	xorl	%eax, %eax
    000027fe: 	callq	__printf_chk@PLT # Offset: 10238
    00002803: 	addl	$0x1, 0x38(%rsp)
    00002808: 	movl	iterations(%rip), %esi
    0000280e: 	movl	0x38(%rsp), %eax
    00002812: 	cmpl	%esi, %eax
    00002814: 	jl	.Ltmp1334 # Offset: 10260
    0000281a: 	jmp	.Ltmp1322 # Offset: 10266
.Ltmp1308:
    0000281f: 	movq	0x1c0(%rsp), %rdx
    00002827: 	leaq	DATAat0x151ba(%rip), %rsi
    0000282e: 	movl	$0x1, %edi
    00002833: 	xorl	%eax, %eax
    00002835: 	callq	__printf_chk@PLT # Offset: 10293
    0000283a: 	addl	$0x1, 0x30(%rsp)
    0000283f: 	movl	iterations(%rip), %esi
    00002845: 	movl	0x30(%rsp), %eax
    00002849: 	cmpl	%eax, %esi
    0000284b: 	jg	.Ltmp1310 # Offset: 10315
    00002851: 	jmp	.Ltmp1298 # Offset: 10321
.Ltmp1294:
    00002856: 	movq	0x1c0(%rsp), %rdx
    0000285e: 	leaq	DATAat0x151ba(%rip), %rsi
    00002865: 	movl	$0x1, %edi
    0000286a: 	xorl	%eax, %eax
    0000286c: 	callq	__printf_chk@PLT # Offset: 10348
    00002871: 	movl	iterations(%rip), %eax
    00002877: 	addl	$0x1, %r14d
    0000287b: 	movl	%eax, 0x10(%rsp)
    0000287f: 	cmpl	0x10(%rsp), %r14d
    00002884: 	jl	.Ltmp1296 # Offset: 10372
    0000288a: 	jmp	.Ltmp1290 # Offset: 10378
.Ltmp1286:
    0000288f: 	movq	0x4060(%rsp), %rdx
    00002897: 	leaq	DATAat0x151bf(%rip), %rsi
    0000289e: 	movl	$0x1, %edi
    000028a3: 	xorl	%eax, %eax
    000028a5: 	callq	__printf_chk@PLT # Offset: 10405
    000028aa: 	movl	iterations(%rip), %edx
    000028b0: 	jmp	.Ltmp1475 # Offset: 10416
.Ltmp1278:
    000028b5: 	movq	0x4060(%rsp), %rdx
    000028bd: 	leaq	DATAat0x151bf(%rip), %rsi
    000028c4: 	movl	$0x1, %edi
    000028c9: 	xorl	%eax, %eax
    000028cb: 	callq	__printf_chk@PLT # Offset: 10443
    000028d0: 	movl	iterations(%rip), %edx
    000028d6: 	jmp	.Ltmp1476 # Offset: 10454
.Ltmp1271:
    000028db: 	movq	0x4060(%rsp), %rdx
    000028e3: 	leaq	DATAat0x151bf(%rip), %rsi
    000028ea: 	movl	$0x1, %edi
    000028ef: 	xorl	%eax, %eax
    000028f1: 	callq	__printf_chk@PLT # Offset: 10481
    000028f6: 	movl	iterations(%rip), %edx
    000028fc: 	jmp	.Ltmp1477 # Offset: 10492
.Ltmp1264:
    00002901: 	movq	0x4060(%rsp), %rdx
    00002909: 	movq	%r14, %rsi
    0000290c: 	movl	$0x1, %edi
    00002911: 	xorl	%eax, %eax
    00002913: 	callq	__printf_chk@PLT # Offset: 10515
    00002918: 	movl	iterations(%rip), %edx
    0000291e: 	jmp	.Ltmp1478 # Offset: 10526
.Ltmp1259:
    00002923: 	movq	0x4060(%rsp), %rdx
    0000292b: 	leaq	DATAat0x151bf(%rip), %rsi
    00002932: 	movl	$0x1, %edi
    00002937: 	xorl	%eax, %eax
    00002939: 	callq	__printf_chk@PLT # Offset: 10553
    0000293e: 	movl	iterations(%rip), %edx
    00002944: 	jmp	.Ltmp1479 # Offset: 10564
.Ltmp1252:
    00002949: 	movq	0x4060(%rsp), %rdx
    00002951: 	movq	%r14, %rsi
    00002954: 	movl	$0x1, %edi
    00002959: 	xorl	%eax, %eax
    0000295b: 	callq	__printf_chk@PLT # Offset: 10587
    00002960: 	movl	iterations(%rip), %edx
    00002966: 	jmp	.Ltmp1480 # Offset: 10598
.Ltmp1377:
    0000296b: 	movq	%r8, %rax
    0000296e: 	subq	%rdx, %rax
    00002971: 	cmpq	$0x8, %rax
    00002975: 	jle	.Ltmp1481 # Offset: 10613
    0000297b: 	movsd	(%rdx), %xmm1
    0000297f: 	movq	%r8, %r9
    00002982: 	movq	%rdx, %rcx
.Ltmp1486:
    00002985: 	movsd	-0x8(%r9), %xmm2
    0000298b: 	leaq	-0x8(%r9), %rsi
    0000298f: 	comisd	%xmm1, %xmm2
    00002993: 	ja	.Ltmp1482 # Offset: 10643
    00002995: 	cmpq	%rcx, %rsi
    00002998: 	jbe	.Ltmp1483 # Offset: 10648
    0000299a: 	movsd	(%rcx), %xmm0
    0000299e: 	leaq	0x8(%rcx), %rax
    000029a2: 	comisd	%xmm0, %xmm1
    000029a6: 	jbe	.Ltmp1484 # Offset: 10662
    000029a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1485:
    000029b0: 	movq	%rax, %rcx
    000029b3: 	movsd	(%rax), %xmm0
    000029b7: 	leaq	0x8(%rax), %rax
    000029bb: 	comisd	%xmm0, %xmm1
    000029bf: 	ja	.Ltmp1485 # Offset: 10687
    000029c1: 	cmpq	%rcx, %rsi
    000029c4: 	jbe	.Ltmp1483 # Offset: 10692
.Ltmp1484:
    000029c6: 	movsd	%xmm0, (%rsi)
    000029ca: 	movsd	%xmm2, (%rcx)
.Ltmp1482:
    000029ce: 	movq	%rsi, %r9
    000029d1: 	jmp	.Ltmp1486 # Offset: 10705
.Ltmp1483:
    000029d3: 	movq	0x40(%rsp), %rsi
    000029d8: 	movq	0x30(%rsp), %rdi
    000029dd: 	movq	%r8, 0x38(%rsp)
    000029e2: 	movq	%r9, 0xe8(%rsp)
    000029ea: 	movq	%r9, 0x48(%rsp)
    000029ef: 	movq	%rdx, 0xf8(%rsp)
    000029f7: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 10743
    000029fc: 	movq	0x38(%rsp), %r8
    00002a01: 	movq	0x48(%rsp), %r9
    00002a06: 	movq	0x40(%rsp), %rsi
    00002a0b: 	movq	0x30(%rsp), %rdi
    00002a10: 	movq	%r8, 0xe8(%rsp)
    00002a18: 	movq	%r9, 0xf8(%rsp)
    00002a20: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 10784
    00002a25: 	movq	0x38(%rsp), %r8
.Ltmp1481:
    00002a2a: 	movq	%r12, %rax
    00002a2d: 	subq	%r8, %rax
    00002a30: 	cmpq	$0x8, %rax
    00002a34: 	jle	.Ltmp1375 # Offset: 10804
    00002a3a: 	movsd	(%r8), %xmm1
    00002a3f: 	movq	%r8, %rax
    00002a42: 	movq	%r12, %rdx
.Ltmp1491:
    00002a45: 	movsd	-0x8(%rdx), %xmm2
    00002a4a: 	leaq	-0x8(%rdx), %rcx
    00002a4e: 	comisd	%xmm1, %xmm2
    00002a52: 	ja	.Ltmp1487 # Offset: 10834
    00002a54: 	cmpq	%rax, %rcx
    00002a57: 	jbe	.Ltmp1488 # Offset: 10839
    00002a5d: 	movsd	(%rax), %xmm0
    00002a61: 	comisd	%xmm0, %xmm1
    00002a65: 	jbe	.Ltmp1489 # Offset: 10853
    00002a67: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1490:
    00002a70: 	movsd	0x8(%rax), %xmm0
    00002a75: 	addq	$0x8, %rax
    00002a79: 	comisd	%xmm0, %xmm1
    00002a7d: 	ja	.Ltmp1490 # Offset: 10877
    00002a7f: 	cmpq	%rax, %rcx
    00002a82: 	jbe	.Ltmp1488 # Offset: 10882
.Ltmp1489:
    00002a88: 	movsd	%xmm0, (%rcx)
    00002a8c: 	movsd	%xmm2, (%rax)
.Ltmp1487:
    00002a90: 	movq	%rcx, %rdx
    00002a93: 	jmp	.Ltmp1491 # Offset: 10899
.Ltmp1469:
    00002a95: 	movq	%rdx, %rax
    00002a98: 	subq	%r8, %rax
    00002a9b: 	cmpq	$0x8, %rax
    00002a9f: 	jle	.Ltmp1492 # Offset: 10911
    00002aa5: 	movsd	(%r8), %xmm1
    00002aaa: 	movq	%rdx, %r9
    00002aad: 	movq	%r8, %rcx
.Ltmp1497:
    00002ab0: 	movsd	-0x8(%r9), %xmm2
    00002ab6: 	leaq	-0x8(%r9), %rsi
    00002aba: 	comisd	%xmm1, %xmm2
    00002abe: 	ja	.Ltmp1493 # Offset: 10942
    00002ac0: 	cmpq	%rcx, %rsi
    00002ac3: 	jbe	.Ltmp1494 # Offset: 10947
    00002ac5: 	movsd	(%rcx), %xmm0
    00002ac9: 	leaq	0x8(%rcx), %rax
    00002acd: 	comisd	%xmm0, %xmm1
    00002ad1: 	jbe	.Ltmp1495 # Offset: 10961
    00002ad3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1496:
    00002ad8: 	movq	%rax, %rcx
    00002adb: 	movsd	(%rax), %xmm0
    00002adf: 	leaq	0x8(%rax), %rax
    00002ae3: 	comisd	%xmm0, %xmm1
    00002ae7: 	ja	.Ltmp1496 # Offset: 10983
    00002ae9: 	cmpq	%rcx, %rsi
    00002aec: 	jbe	.Ltmp1494 # Offset: 10988
.Ltmp1495:
    00002aee: 	movsd	%xmm0, (%rsi)
    00002af2: 	movsd	%xmm2, (%rcx)
.Ltmp1493:
    00002af6: 	movq	%rsi, %r9
    00002af9: 	jmp	.Ltmp1497 # Offset: 11001
.Ltmp1494:
    00002afb: 	movq	%r9, %rsi
    00002afe: 	movq	%r8, %rdi
    00002b01: 	movq	%rdx, 0x98(%rsp)
    00002b09: 	movq	%r9, 0xa0(%rsp)
    00002b11: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 11025
    00002b16: 	movq	0x98(%rsp), %rsi
    00002b1e: 	movq	0xa0(%rsp), %rdi
    00002b26: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 11046
    00002b2b: 	movq	0x98(%rsp), %rdx
.Ltmp1492:
    00002b33: 	movq	%r15, %rax
    00002b36: 	movq	%rdx, %rdi
    00002b39: 	subq	%rdx, %rax
    00002b3c: 	cmpq	$0x8, %rax
    00002b40: 	jle	.Ltmp1352 # Offset: 11072
    00002b46: 	movsd	(%rdx), %xmm1
    00002b4a: 	movq	%r15, %r8
.Ltmp1502:
    00002b4d: 	movsd	-0x8(%r8), %xmm2
    00002b53: 	leaq	-0x8(%r8), %rcx
    00002b57: 	comisd	%xmm1, %xmm2
    00002b5b: 	ja	.Ltmp1498 # Offset: 11099
    00002b5d: 	cmpq	%rdx, %rcx
    00002b60: 	jbe	.Ltmp1499 # Offset: 11104
    00002b66: 	movsd	(%rdx), %xmm0
    00002b6a: 	leaq	0x8(%rdx), %rax
    00002b6e: 	comisd	%xmm0, %xmm1
    00002b72: 	jbe	.Ltmp1500 # Offset: 11122
    00002b74: 	nopl	(%rax) # Size: 4
.Ltmp1501:
    00002b78: 	movq	%rax, %rdx
    00002b7b: 	movsd	(%rax), %xmm0
    00002b7f: 	leaq	0x8(%rax), %rax
    00002b83: 	comisd	%xmm0, %xmm1
    00002b87: 	ja	.Ltmp1501 # Offset: 11143
    00002b89: 	cmpq	%rdx, %rcx
    00002b8c: 	jbe	.Ltmp1499 # Offset: 11148
.Ltmp1500:
    00002b92: 	movsd	%xmm0, (%rcx)
    00002b96: 	movsd	%xmm2, (%rdx)
.Ltmp1498:
    00002b9a: 	movq	%rcx, %r8
    00002b9d: 	jmp	.Ltmp1502 # Offset: 11165
.Ltmp1371:
    00002b9f: 	movq	%r8, %rax
    00002ba2: 	subq	%rbx, %rax
    00002ba5: 	cmpq	$0x8, %rax
    00002ba9: 	jle	.Ltmp1503 # Offset: 11177
    00002baf: 	movsd	0x1e0(%rsp), %xmm1
    00002bb8: 	movq	%r8, %r9
    00002bbb: 	movq	%rbx, %rcx
.Ltmp1508:
    00002bbe: 	movsd	-0x8(%r9), %xmm2
    00002bc4: 	leaq	-0x8(%r9), %rsi
    00002bc8: 	comisd	%xmm1, %xmm2
    00002bcc: 	ja	.Ltmp1504 # Offset: 11212
    00002bce: 	cmpq	%rcx, %rsi
    00002bd1: 	jbe	.Ltmp1505 # Offset: 11217
    00002bd3: 	movsd	(%rcx), %xmm0
    00002bd7: 	leaq	0x8(%rcx), %rax
    00002bdb: 	comisd	%xmm0, %xmm1
    00002bdf: 	jbe	.Ltmp1506 # Offset: 11231
    00002be1: 	nopl	(%rax) # Size: 7
.Ltmp1507:
    00002be8: 	movq	%rax, %rcx
    00002beb: 	movsd	(%rax), %xmm0
    00002bef: 	leaq	0x8(%rax), %rax
    00002bf3: 	comisd	%xmm0, %xmm1
    00002bf7: 	ja	.Ltmp1507 # Offset: 11255
    00002bf9: 	cmpq	%rcx, %rsi
    00002bfc: 	jbe	.Ltmp1505 # Offset: 11260
.Ltmp1506:
    00002bfe: 	movsd	%xmm0, (%rsi)
    00002c02: 	movsd	%xmm2, (%rcx)
.Ltmp1504:
    00002c06: 	movq	%rsi, %r9
    00002c09: 	jmp	.Ltmp1508 # Offset: 11273
.Ltmp1505:
    00002c0b: 	movq	0x40(%rsp), %rsi
    00002c10: 	movq	0x30(%rsp), %rdi
    00002c15: 	movq	%rdx, 0x68(%rsp)
    00002c1a: 	movq	%r8, 0x38(%rsp)
    00002c1f: 	movq	%r9, 0xe8(%rsp)
    00002c27: 	movq	%r9, 0x48(%rsp)
    00002c2c: 	movq	%rbx, 0xf8(%rsp)
    00002c34: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 11316
    00002c39: 	movq	0x38(%rsp), %r8
    00002c3e: 	movq	0x48(%rsp), %r9
    00002c43: 	movq	0x40(%rsp), %rsi
    00002c48: 	movq	0x30(%rsp), %rdi
    00002c4d: 	movq	%r8, 0xe8(%rsp)
    00002c55: 	movq	%r9, 0xf8(%rsp)
    00002c5d: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 11357
    00002c62: 	movq	0x68(%rsp), %rdx
    00002c67: 	movq	0x38(%rsp), %r8
.Ltmp1503:
    00002c6c: 	movq	%rdx, %rax
    00002c6f: 	subq	%r8, %rax
    00002c72: 	cmpq	$0x8, %rax
    00002c76: 	jle	.Ltmp1369 # Offset: 11382
    00002c7c: 	movsd	(%r8), %xmm1
    00002c81: 	movq	%rdx, %r9
    00002c84: 	movq	%r8, %rcx
.Ltmp1513:
    00002c87: 	movsd	-0x8(%r9), %xmm2
    00002c8d: 	leaq	-0x8(%r9), %rsi
    00002c91: 	comisd	%xmm1, %xmm2
    00002c95: 	ja	.Ltmp1509 # Offset: 11413
    00002c97: 	cmpq	%rcx, %rsi
    00002c9a: 	jbe	.Ltmp1510 # Offset: 11418
    00002ca0: 	movsd	(%rcx), %xmm0
    00002ca4: 	leaq	0x8(%rcx), %rax
    00002ca8: 	comisd	%xmm0, %xmm1
    00002cac: 	jbe	.Ltmp1511 # Offset: 11436
    00002cae: 	nop # Size: 2
.Ltmp1512:
    00002cb0: 	movq	%rax, %rcx
    00002cb3: 	movsd	(%rax), %xmm0
    00002cb7: 	leaq	0x8(%rax), %rax
    00002cbb: 	comisd	%xmm0, %xmm1
    00002cbf: 	ja	.Ltmp1512 # Offset: 11455
    00002cc1: 	cmpq	%rcx, %rsi
    00002cc4: 	jbe	.Ltmp1510 # Offset: 11460
.Ltmp1511:
    00002cca: 	movsd	%xmm0, (%rsi)
    00002cce: 	movsd	%xmm2, (%rcx)
.Ltmp1509:
    00002cd2: 	movq	%rsi, %r9
    00002cd5: 	jmp	.Ltmp1513 # Offset: 11477
.Ltmp1464:
    00002cd7: 	movq	%rdx, %rax
    00002cda: 	subq	%rbp, %rax
    00002cdd: 	cmpq	$0x8, %rax
    00002ce1: 	jle	.Ltmp1514 # Offset: 11489
    00002ce7: 	movsd	(%rbp), %xmm1
    00002cec: 	movq	%rdx, %r9
    00002cef: 	movq	%rbp, %rcx
.Ltmp1519:
    00002cf2: 	movsd	-0x8(%r9), %xmm2
    00002cf8: 	leaq	-0x8(%r9), %rsi
    00002cfc: 	comisd	%xmm1, %xmm2
    00002d00: 	ja	.Ltmp1515 # Offset: 11520
    00002d02: 	cmpq	%rcx, %rsi
    00002d05: 	jbe	.Ltmp1516 # Offset: 11525
    00002d07: 	movsd	(%rcx), %xmm0
    00002d0b: 	leaq	0x8(%rcx), %rax
    00002d0f: 	comisd	%xmm0, %xmm1
    00002d13: 	jbe	.Ltmp1517 # Offset: 11539
    00002d15: 	nopl	(%rax) # Size: 3
.Ltmp1518:
    00002d18: 	movq	%rax, %rcx
    00002d1b: 	movsd	(%rax), %xmm0
    00002d1f: 	leaq	0x8(%rax), %rax
    00002d23: 	comisd	%xmm0, %xmm1
    00002d27: 	ja	.Ltmp1518 # Offset: 11559
    00002d29: 	cmpq	%rcx, %rsi
    00002d2c: 	jbe	.Ltmp1516 # Offset: 11564
.Ltmp1517:
    00002d2e: 	movsd	%xmm0, (%rsi)
    00002d32: 	movsd	%xmm2, (%rcx)
.Ltmp1515:
    00002d36: 	movq	%rsi, %r9
    00002d39: 	jmp	.Ltmp1519 # Offset: 11577
.Ltmp1516:
    00002d3b: 	movq	%r9, %rsi
    00002d3e: 	movq	%rbp, %rdi
    00002d41: 	movq	%r8, 0xa8(%rsp)
    00002d49: 	movq	%rdx, 0x98(%rsp)
    00002d51: 	movq	%r9, 0xa0(%rsp)
    00002d59: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 11609
    00002d5e: 	movq	0x98(%rsp), %rsi
    00002d66: 	movq	0xa0(%rsp), %rdi
    00002d6e: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 11630
    00002d73: 	movq	0xa8(%rsp), %r8
    00002d7b: 	movq	0x98(%rsp), %rdx
.Ltmp1514:
    00002d83: 	movq	%r8, %rax
    00002d86: 	movq	%rdx, %rdi
    00002d89: 	subq	%rdx, %rax
    00002d8c: 	cmpq	$0x8, %rax
    00002d90: 	jle	.Ltmp1462 # Offset: 11664
    00002d96: 	movsd	(%rdx), %xmm1
    00002d9a: 	movq	%r8, %r9
.Ltmp1524:
    00002d9d: 	movsd	-0x8(%r9), %xmm2
    00002da3: 	leaq	-0x8(%r9), %rcx
    00002da7: 	comisd	%xmm1, %xmm2
    00002dab: 	ja	.Ltmp1520 # Offset: 11691
    00002dad: 	cmpq	%rdx, %rcx
    00002db0: 	jbe	.Ltmp1521 # Offset: 11696
    00002db6: 	movsd	(%rdx), %xmm0
    00002dba: 	leaq	0x8(%rdx), %rax
    00002dbe: 	comisd	%xmm0, %xmm1
    00002dc2: 	jbe	.Ltmp1522 # Offset: 11714
    00002dc4: 	nopl	(%rax) # Size: 4
.Ltmp1523:
    00002dc8: 	movq	%rax, %rdx
    00002dcb: 	movsd	(%rax), %xmm0
    00002dcf: 	leaq	0x8(%rax), %rax
    00002dd3: 	comisd	%xmm0, %xmm1
    00002dd7: 	ja	.Ltmp1523 # Offset: 11735
    00002dd9: 	cmpq	%rdx, %rcx
    00002ddc: 	jbe	.Ltmp1521 # Offset: 11740
.Ltmp1522:
    00002de2: 	movsd	%xmm0, (%rcx)
    00002de6: 	movsd	%xmm2, (%rdx)
.Ltmp1520:
    00002dea: 	movq	%rcx, %r9
    00002ded: 	jmp	.Ltmp1524 # Offset: 11757
.Ltmp1458:
    00002def: 	movq	%rcx, %rax
    00002df2: 	subq	%r8, %rax
    00002df5: 	cmpq	$0x8, %rax
    00002df9: 	jle	.Ltmp1525 # Offset: 11769
    00002dff: 	movsd	(%r8), %xmm1
    00002e04: 	movq	%rcx, %r9
    00002e07: 	movq	%r8, %rdx
.Ltmp1530:
    00002e0a: 	movsd	-0x8(%r9), %xmm2
    00002e10: 	leaq	-0x8(%r9), %rsi
    00002e14: 	comisd	%xmm1, %xmm2
    00002e18: 	ja	.Ltmp1526 # Offset: 11800
    00002e1a: 	cmpq	%rdx, %rsi
    00002e1d: 	jbe	.Ltmp1527 # Offset: 11805
    00002e1f: 	movsd	(%rdx), %xmm0
    00002e23: 	leaq	0x8(%rdx), %rax
    00002e27: 	comisd	%xmm0, %xmm1
    00002e2b: 	jbe	.Ltmp1528 # Offset: 11819
    00002e2d: 	nopl	(%rax) # Size: 3
.Ltmp1529:
    00002e30: 	movq	%rax, %rdx
    00002e33: 	movsd	(%rax), %xmm0
    00002e37: 	leaq	0x8(%rax), %rax
    00002e3b: 	comisd	%xmm0, %xmm1
    00002e3f: 	ja	.Ltmp1529 # Offset: 11839
    00002e41: 	cmpq	%rdx, %rsi
    00002e44: 	jbe	.Ltmp1527 # Offset: 11844
.Ltmp1528:
    00002e46: 	movsd	%xmm0, (%rsi)
    00002e4a: 	movsd	%xmm2, (%rdx)
.Ltmp1526:
    00002e4e: 	movq	%rsi, %r9
    00002e51: 	jmp	.Ltmp1530 # Offset: 11857
.Ltmp1527:
    00002e53: 	movq	%r9, %rsi
    00002e56: 	movq	%r8, %rdi
    00002e59: 	movq	%rcx, 0x98(%rsp)
    00002e61: 	movq	%r9, 0xa0(%rsp)
    00002e69: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 11881
    00002e6e: 	movq	0x98(%rsp), %rsi
    00002e76: 	movq	0xa0(%rsp), %rdi
    00002e7e: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 11902
    00002e83: 	movq	0x98(%rsp), %rcx
.Ltmp1525:
    00002e8b: 	movq	%r15, %rax
    00002e8e: 	movq	%rcx, %rdi
    00002e91: 	subq	%rcx, %rax
    00002e94: 	cmpq	$0x8, %rax
    00002e98: 	jle	.Ltmp1391 # Offset: 11928
    00002e9e: 	movsd	(%rcx), %xmm1
    00002ea2: 	movq	%r15, %r8
.Ltmp1535:
    00002ea5: 	movsd	-0x8(%r8), %xmm2
    00002eab: 	leaq	-0x8(%r8), %rdx
    00002eaf: 	comisd	%xmm1, %xmm2
    00002eb3: 	ja	.Ltmp1531 # Offset: 11955
    00002eb5: 	cmpq	%rcx, %rdx
    00002eb8: 	jbe	.Ltmp1532 # Offset: 11960
    00002ebe: 	movsd	(%rcx), %xmm0
    00002ec2: 	leaq	0x8(%rcx), %rax
    00002ec6: 	comisd	%xmm0, %xmm1
    00002eca: 	jbe	.Ltmp1533 # Offset: 11978
    00002ecc: 	nopl	(%rax) # Size: 4
.Ltmp1534:
    00002ed0: 	movq	%rax, %rcx
    00002ed3: 	movsd	(%rax), %xmm0
    00002ed7: 	leaq	0x8(%rax), %rax
    00002edb: 	comisd	%xmm0, %xmm1
    00002edf: 	ja	.Ltmp1534 # Offset: 11999
    00002ee1: 	cmpq	%rcx, %rdx
    00002ee4: 	jbe	.Ltmp1532 # Offset: 12004
.Ltmp1533:
    00002eea: 	movsd	%xmm0, (%rdx)
    00002eee: 	movsd	%xmm2, (%rcx)
.Ltmp1531:
    00002ef2: 	movq	%rdx, %r8
    00002ef5: 	jmp	.Ltmp1535 # Offset: 12021
.Ltmp1453:
    00002ef7: 	movq	%rcx, %rax
    00002efa: 	subq	%rbp, %rax
    00002efd: 	cmpq	$0x8, %rax
    00002f01: 	jle	.Ltmp1536 # Offset: 12033
    00002f07: 	movsd	(%rbp), %xmm1
    00002f0c: 	movq	%rcx, %r9
    00002f0f: 	movq	%rbp, %rdx
.Ltmp1541:
    00002f12: 	movsd	-0x8(%r9), %xmm2
    00002f18: 	leaq	-0x8(%r9), %rsi
    00002f1c: 	comisd	%xmm1, %xmm2
    00002f20: 	ja	.Ltmp1537 # Offset: 12064
    00002f22: 	cmpq	%rdx, %rsi
    00002f25: 	jbe	.Ltmp1538 # Offset: 12069
    00002f27: 	movsd	(%rdx), %xmm0
    00002f2b: 	leaq	0x8(%rdx), %rax
    00002f2f: 	comisd	%xmm0, %xmm1
    00002f33: 	jbe	.Ltmp1539 # Offset: 12083
    00002f35: 	nopl	(%rax) # Size: 3
.Ltmp1540:
    00002f38: 	movq	%rax, %rdx
    00002f3b: 	movsd	(%rax), %xmm0
    00002f3f: 	leaq	0x8(%rax), %rax
    00002f43: 	comisd	%xmm0, %xmm1
    00002f47: 	ja	.Ltmp1540 # Offset: 12103
    00002f49: 	cmpq	%rdx, %rsi
    00002f4c: 	jbe	.Ltmp1538 # Offset: 12108
.Ltmp1539:
    00002f4e: 	movsd	%xmm0, (%rsi)
    00002f52: 	movsd	%xmm2, (%rdx)
.Ltmp1537:
    00002f56: 	movq	%rsi, %r9
    00002f59: 	jmp	.Ltmp1541 # Offset: 12121
.Ltmp1538:
    00002f5b: 	movq	%r9, %rsi
    00002f5e: 	movq	%rbp, %rdi
    00002f61: 	movq	%rcx, 0x98(%rsp)
    00002f69: 	movq	%r8, 0xa8(%rsp)
    00002f71: 	movq	%r9, 0xa0(%rsp)
    00002f79: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 12153
    00002f7e: 	movq	0x98(%rsp), %rsi
    00002f86: 	movq	0xa0(%rsp), %rdi
    00002f8e: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEdEEEvT_SB_ # Offset: 12174
    00002f93: 	movq	0xa8(%rsp), %r8
    00002f9b: 	movq	0x98(%rsp), %rcx
.Ltmp1536:
    00002fa3: 	movq	%r8, %rax
    00002fa6: 	movq	%rcx, %rdi
    00002fa9: 	subq	%rcx, %rax
    00002fac: 	cmpq	$0x8, %rax
    00002fb0: 	jle	.Ltmp1451 # Offset: 12208
    00002fb6: 	movsd	(%rcx), %xmm1
    00002fba: 	movq	%r8, %r9
.Ltmp1546:
    00002fbd: 	movsd	-0x8(%r9), %xmm2
    00002fc3: 	leaq	-0x8(%r9), %rdx
    00002fc7: 	comisd	%xmm1, %xmm2
    00002fcb: 	ja	.Ltmp1542 # Offset: 12235
    00002fcd: 	cmpq	%rcx, %rdx
    00002fd0: 	jbe	.Ltmp1543 # Offset: 12240
    00002fd6: 	movsd	(%rcx), %xmm0
    00002fda: 	leaq	0x8(%rcx), %rax
    00002fde: 	comisd	%xmm0, %xmm1
    00002fe2: 	jbe	.Ltmp1544 # Offset: 12258
    00002fe4: 	nopl	(%rax) # Size: 4
.Ltmp1545:
    00002fe8: 	movq	%rax, %rcx
    00002feb: 	movsd	(%rax), %xmm0
    00002fef: 	leaq	0x8(%rax), %rax
    00002ff3: 	comisd	%xmm0, %xmm1
    00002ff7: 	ja	.Ltmp1545 # Offset: 12279
    00002ff9: 	cmpq	%rcx, %rdx
    00002ffc: 	jbe	.Ltmp1543 # Offset: 12284
.Ltmp1544:
    00003002: 	movsd	%xmm0, (%rdx)
    00003006: 	movsd	%xmm2, (%rcx)
.Ltmp1542:
    0000300a: 	movq	%rdx, %r9
    0000300d: 	jmp	.Ltmp1546 # Offset: 12301
.Ltmp1433:
    0000300f: 	movq	0x8(%rsp), %rdx
    00003014: 	xorl	%eax, %eax
    00003016: 	subq	%r13, %rdx
.Ltmp1547:
    00003019: 	movsd	(%r13,%rax), %xmm0
    00003020: 	movsd	%xmm0, (%rbp,%rax)
    00003026: 	addq	$0x8, %rax
    0000302a: 	cmpq	%rdx, %rax
    0000302d: 	jne	.Ltmp1547 # Offset: 12333
    0000302f: 	jmp	.Ltmp1432 # Offset: 12335
.Ltmp1350:
    00003034: 	movq	0x8(%rsp), %rdx
    00003039: 	xorl	%eax, %eax
    0000303b: 	subq	%r13, %rdx
.Ltmp1548:
    0000303e: 	movsd	(%r13,%rax), %xmm0
    00003045: 	movsd	%xmm0, (%rbp,%rax)
    0000304b: 	addq	$0x8, %rax
    0000304f: 	cmpq	%rax, %rdx
    00003052: 	jne	.Ltmp1548 # Offset: 12370
    00003054: 	jmp	.Ltmp1349 # Offset: 12372
.Ltmp1324:
    00003059: 	movq	0x8(%rsp), %rdx
    0000305e: 	xorl	%eax, %eax
    00003060: 	subq	%r13, %rdx
.Ltmp1549:
    00003063: 	movsd	(%r13,%rax), %xmm0
    0000306a: 	movsd	%xmm0, (%rbp,%rax)
    00003070: 	addq	$0x8, %rax
    00003074: 	cmpq	%rax, %rdx
    00003077: 	jne	.Ltmp1549 # Offset: 12407
    00003079: 	jmp	.Ltmp1323 # Offset: 12409
.Ltmp1389:
    0000307e: 	movq	0x8(%rsp), %rdx
    00003083: 	xorl	%eax, %eax
    00003085: 	subq	%r13, %rdx
.Ltmp1550:
    00003088: 	movsd	(%r13,%rax), %xmm0
    0000308f: 	movsd	%xmm0, (%rbp,%rax)
    00003095: 	addq	$0x8, %rax
    00003099: 	cmpq	%rax, %rdx
    0000309c: 	jne	.Ltmp1550 # Offset: 12444
    0000309e: 	jmp	.Ltmp1388 # Offset: 12446
.Ltmp1411:
    000030a3: 	movq	0x8(%rsp), %rdx
    000030a8: 	xorl	%eax, %eax
    000030aa: 	subq	%r13, %rdx
.Ltmp1551:
    000030ad: 	movsd	(%r13,%rax), %xmm0
    000030b4: 	movsd	%xmm0, (%rbp,%rax)
    000030ba: 	addq	$0x8, %rax
    000030be: 	cmpq	%rax, %rdx
    000030c1: 	jne	.Ltmp1551 # Offset: 12481
    000030c3: 	jmp	.Ltmp1410 # Offset: 12483
.Ltmp1300:
    000030c8: 	movq	0x8(%rsp), %rdx
    000030cd: 	xorl	%eax, %eax
    000030cf: 	subq	%r13, %rdx
.Ltmp1552:
    000030d2: 	movsd	(%r13,%rax), %xmm0
    000030d9: 	movsd	%xmm0, (%rbp,%rax)
    000030df: 	addq	$0x8, %rax
    000030e3: 	cmpq	%rax, %rdx
    000030e6: 	jne	.Ltmp1552 # Offset: 12518
    000030e8: 	jmp	.Ltmp1299 # Offset: 12520
.Ltmp1282:
    000030ed: 	pxor	%xmm0, %xmm0
    000030f1: 	jmp	.Ltmp1285 # Offset: 12529
.Ltmp1257:
    000030f6: 	pxor	%xmm0, %xmm0
    000030fa: 	jmp	.Ltmp1553 # Offset: 12538
.Ltmp1276:
    000030ff: 	pxor	%xmm0, %xmm0
    00003103: 	jmp	.Ltmp1554 # Offset: 12547
.Ltmp1283:
    00003108: 	pxor	%xmm0, %xmm0
    0000310c: 	jmp	.Ltmp1555 # Offset: 12556
.Ltmp1269:
    00003111: 	pxor	%xmm0, %xmm0
    00003115: 	jmp	.Ltmp1556 # Offset: 12565
.Ltmp1450:
    0000311a: 	callq	__stack_chk_fail@PLT # Offset: 12570
    0000311f: 	endbr64
.Ltmp1558:
    00003123: 	movq	%rax, %rbx
    00003126: 	jmp	.Ltmp1557 # Offset: 12582
    00003128: 	endbr64
    0000312c: 	jmp	.Ltmp1558 # Offset: 12588
    0000312e: 	endbr64
    00003132: 	jmp	.Ltmp1558 # Offset: 12594
    00003134: 	endbr64
    00003138: 	jmp	.Ltmp1558 # Offset: 12600
    0000313a: 	endbr64
    0000313e: 	jmp	.Ltmp1558 # Offset: 12606
    00003140: 	endbr64
    00003144: 	jmp	.Ltmp1558 # Offset: 12612
.Ltmp1557:
    00003146: 	movq	0x1c0(%rsp), %rdi
    0000314e: 	cmpq	0x10(%rsp), %rdi
    00003153: 	je	.Ltmp1559 # Offset: 12627
    00003155: 	movq	0x1d0(%rsp), %rax
    0000315d: 	leaq	0x1(%rax), %rsi
    00003161: 	callq	_ZdlPvm@PLT # Offset: 12641
.Ltmp1559:
    00003166: 	movq	0x1a0(%rsp), %rdi
    0000316e: 	leaq	0x1b0(%rsp), %rax
    00003176: 	cmpq	%rax, %rdi
    00003179: 	je	.Ltmp1560 # Offset: 12665
    0000317b: 	movq	0x1b0(%rsp), %rax
    00003183: 	leaq	0x1(%rax), %rsi
    00003187: 	callq	_ZdlPvm@PLT # Offset: 12679
.Ltmp1560:
    0000318c: 	movq	0x180(%rsp), %rdi
    00003194: 	leaq	0x190(%rsp), %rax
    0000319c: 	cmpq	%rax, %rdi
    0000319f: 	je	.Ltmp1561 # Offset: 12703
    000031a1: 	movq	0x190(%rsp), %rax
    000031a9: 	leaq	0x1(%rax), %rsi
    000031ad: 	callq	_ZdlPvm@PLT # Offset: 12717
.Ltmp1561:
    000031b2: 	movq	0x120(%rsp), %rdi
    000031ba: 	movq	0x130(%rsp), %rsi
    000031c2: 	subq	%rdi, %rsi
    000031c5: 	testq	%rdi, %rdi
    000031c8: 	je	.Ltmp1562 # Offset: 12744
    000031ca: 	callq	_ZdlPvm@PLT # Offset: 12746
.Ltmp1562:
    000031cf: 	movq	0x160(%rsp), %rdi
    000031d7: 	leaq	0x170(%rsp), %rax
    000031df: 	cmpq	%rax, %rdi
    000031e2: 	je	.Ltmp1563 # Offset: 12770
    000031e4: 	movq	0x170(%rsp), %rax
    000031ec: 	leaq	0x1(%rax), %rsi
    000031f0: 	callq	_ZdlPvm@PLT # Offset: 12784
.Ltmp1563:
    000031f5: 	movq	%rbx, %rbp
.Ltmp1574:
    000031f8: 	movq	0x100(%rsp), %rdi
    00003200: 	movq	0x110(%rsp), %rsi
    00003208: 	subq	%rdi, %rsi
    0000320b: 	testq	%rdi, %rdi
    0000320e: 	je	.Ltmp1564 # Offset: 12814
    00003210: 	callq	_ZdlPvm@PLT # Offset: 12816
.Ltmp1564:
    00003215: 	movq	0x140(%rsp), %rdi
    0000321d: 	leaq	0x150(%rsp), %rax
    00003225: 	cmpq	%rax, %rdi
    00003228: 	je	.Ltmp1565 # Offset: 12840
    0000322a: 	movq	0x150(%rsp), %rax
    00003232: 	leaq	0x1(%rax), %rsi
    00003236: 	callq	_ZdlPvm@PLT # Offset: 12854
.Ltmp1565:
    0000323b: 	movq	%rbp, %rdi
    0000323e: 	callq	_Unwind_Resume@PLT # Offset: 12862
    00003243: 	endbr64
    00003247: 	jmp	.Ltmp1558 # Offset: 12871
    0000324c: 	endbr64
    00003250: 	movq	%rax, %rbx
    00003253: 	jmp	.Ltmp1559 # Offset: 12883
    00003258: 	endbr64
.Ltmp1567:
    0000325c: 	movq	%rax, %rbx
    0000325f: 	jmp	.Ltmp1566 # Offset: 12895
    00003261: 	endbr64
    00003265: 	jmp	.Ltmp1567 # Offset: 12901
    00003267: 	endbr64
    0000326b: 	jmp	.Ltmp1567 # Offset: 12907
    0000326d: 	endbr64
    00003271: 	jmp	.Ltmp1567 # Offset: 12913
.Ltmp1566:
    00003273: 	movq	0x1c0(%rsp), %rdi
    0000327b: 	cmpq	0x10(%rsp), %rdi
    00003280: 	je	.Ltmp1560 # Offset: 12928
    00003286: 	movq	0x1d0(%rsp), %rax
    0000328e: 	leaq	0x1(%rax), %rsi
    00003292: 	callq	_ZdlPvm@PLT # Offset: 12946
    00003297: 	jmp	.Ltmp1560 # Offset: 12951
    0000329c: 	endbr64
    000032a0: 	jmp	.Ltmp1567 # Offset: 12960
    000032a2: 	endbr64
    000032a6: 	jmp	.Ltmp1567 # Offset: 12966
    000032a8: 	endbr64
    000032ac: 	movq	%rax, %rbx
    000032af: 	jmp	.Ltmp1560 # Offset: 12975
    000032b4: 	endbr64
.Ltmp1569:
    000032b8: 	movq	%rax, %rbx
    000032bb: 	jmp	.Ltmp1568 # Offset: 12987
    000032c0: 	endbr64
    000032c4: 	movq	%rax, %rbx
    000032c7: 	jmp	.Ltmp1562 # Offset: 12999
    000032cc: 	endbr64
    000032d0: 	jmp	.Ltmp1569 # Offset: 13008
    000032d2: 	endbr64
    000032d6: 	jmp	.Ltmp1569 # Offset: 13014
    000032d8: 	endbr64
    000032dc: 	movq	%rax, %rbx
    000032df: 	jmp	.Ltmp1570 # Offset: 13023
    000032e1: 	endbr64
    000032e5: 	movq	%rax, %rbx
    000032e8: 	jmp	.Ltmp1561 # Offset: 13032
.Ltmp1570:
    000032ed: 	movq	0x1c0(%rsp), %rdi
    000032f5: 	leaq	0x1d0(%rsp), %rax
    000032fd: 	cmpq	%rax, %rdi
    00003300: 	je	.Ltmp1561 # Offset: 13056
.Ltmp1576:
    00003306: 	movq	0x1d0(%rsp), %rax
    0000330e: 	leaq	0x1(%rax), %rsi
    00003312: 	callq	_ZdlPvm@PLT # Offset: 13074
    00003317: 	jmp	.Ltmp1561 # Offset: 13079
    0000331c: 	endbr64
    00003320: 	jmp	.Ltmp1569 # Offset: 13088
    00003322: 	endbr64
    00003326: 	jmp	.Ltmp1569 # Offset: 13094
    00003328: 	endbr64
.Ltmp1572:
    0000332c: 	movq	%rax, %rbp
    0000332f: 	jmp	.Ltmp1571 # Offset: 13103
    00003331: 	endbr64
    00003335: 	jmp	.Ltmp1572 # Offset: 13109
    00003337: 	endbr64
    0000333b: 	movq	%rax, %rbp
    0000333e: 	jmp	.Ltmp1573 # Offset: 13118
    00003340: 	endbr64
    00003344: 	movq	%rax, %rbp
    00003347: 	jmp	.Ltmp1574 # Offset: 13127
.Ltmp1571:
    0000334c: 	movq	0x4060(%rsp), %rdi
    00003354: 	cmpq	0x18(%rsp), %rdi
    00003359: 	je	.Ltmp1574 # Offset: 13145
.Ltmp1575:
    0000335f: 	movq	0x4070(%rsp), %rax
    00003367: 	leaq	0x1(%rax), %rsi
    0000336b: 	callq	_ZdlPvm@PLT # Offset: 13163
    00003370: 	jmp	.Ltmp1574 # Offset: 13168
.Ltmp1573:
    00003375: 	movq	0x4060(%rsp), %rdi
    0000337d: 	leaq	0x4070(%rsp), %rax
    00003385: 	cmpq	%rax, %rdi
    00003388: 	jne	.Ltmp1575 # Offset: 13192
    0000338a: 	jmp	.Ltmp1574 # Offset: 13194
    0000338f: 	endbr64
    00003393: 	jmp	.Ltmp1572 # Offset: 13203
    00003395: 	endbr64
    00003399: 	jmp	.Ltmp1572 # Offset: 13209
    0000339b: 	endbr64
    0000339f: 	jmp	.Ltmp1572 # Offset: 13215
.Ltmp1568:
    000033a1: 	movq	0x1c0(%rsp), %rdi
    000033a9: 	cmpq	0x10(%rsp), %rdi
    000033ae: 	jne	.Ltmp1576 # Offset: 13230
    000033b4: 	jmp	.Ltmp1561 # Offset: 13236
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_ZN9benchmark9__sift_inIPiiEEvlT_lT0_" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0xc9a0
  Size        : 0x103
  MaxSize     : 0x110
  Offset      : 0xc9a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPiiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rdi
    00000010: 	movq	%rdx, %r8
    00000013: 	movl	%ecx, %r9d
    00000016: 	cmpq	%r11, %rax
    00000019: 	jge	.Ltmp1577 # Offset: 25
    0000001f: 	movq	%rdx, %r10
    00000022: 	jmp	.Ltmp1578 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1580:
    00000028: 	leaq	-0x1(%rax), %rbx
    0000002c: 	leaq	(%rax,%rax), %rcx
    00000030: 	movl	%esi, (%rdi,%r10,4)
    00000034: 	leaq	(%rdi,%rbx,4), %rdx
    00000038: 	movq	%rbx, %rax
    0000003b: 	cmpq	%rcx, %r11
    0000003e: 	jle	.Ltmp1579 # Offset: 62
.Ltmp1581:
    00000040: 	movq	%rax, %r10
    00000043: 	movq	%rcx, %rax
.Ltmp1578:
    00000046: 	leaq	(,%rax,4), %rdx
    0000004e: 	movl	-0x4(%rdi,%rdx), %esi
    00000052: 	addq	%rdi, %rdx
    00000055: 	movl	(%rdx), %ecx
    00000057: 	cmpl	%ecx, %esi
    00000059: 	jge	.Ltmp1580 # Offset: 89
    0000005b: 	movl	%ecx, (%rdi,%r10,4)
    0000005f: 	leaq	0x2(%rax,%rax), %rcx
    00000064: 	cmpq	%rcx, %r11
    00000067: 	jg	.Ltmp1581 # Offset: 103
.Ltmp1579:
    00000069: 	cmpq	%rcx, %r11
    0000006c: 	je	.Ltmp1582 # Offset: 108
.Ltmp1587:
    00000072: 	leaq	-0x1(%rax), %rsi
    00000076: 	movq	%rsi, %rcx
    00000079: 	shrq	$0x3f, %rcx
    0000007d: 	addq	%rsi, %rcx
    00000080: 	sarq	%rcx
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1583 # Offset: 134
    00000088: 	jmp	.Ltmp1584 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1586:
    00000090: 	movl	%esi, (%rdx)
    00000092: 	leaq	-0x1(%rcx), %rdx
    00000096: 	movq	%rdx, %rax
    00000099: 	shrq	$0x3f, %rax
    0000009d: 	addq	%rdx, %rax
    000000a0: 	sarq	%rax
    000000a3: 	movq	%rax, %rdx
    000000a6: 	movq	%rcx, %rax
    000000a9: 	cmpq	%rcx, %r8
    000000ac: 	jge	.Ltmp1585 # Offset: 172
    000000ae: 	movq	%rdx, %rcx
.Ltmp1583:
    000000b1: 	leaq	(%rdi,%rcx,4), %r10
    000000b5: 	leaq	(%rdi,%rax,4), %rdx
    000000b9: 	movl	(%r10), %esi
    000000bc: 	cmpl	%r9d, %esi
    000000bf: 	jl	.Ltmp1586 # Offset: 191
.Ltmp1584:
    000000c1: 	movl	%r9d, (%rdx)
    000000c4: 	popq	%rbx
    000000c5: 	retq # Offset: 197
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1585:
    000000d0: 	movq	%r10, %rdx
    000000d3: 	movl	%r9d, (%rdx)
    000000d6: 	popq	%rbx
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1577:
    000000e0: 	leaq	(%rsi,%rdx,4), %rdx
    000000e4: 	jne	.Ltmp1584 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1582:
    000000f0: 	movl	-0x4(%rdi,%rcx,4), %eax
    000000f4: 	movl	%eax, (%rdx)
    000000f6: 	leaq	-0x1(%rcx), %rax
    000000fa: 	leaq	(%rdi,%rax,4), %rdx
    000000fe: 	jmp	.Ltmp1587 # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPiiEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvlT_lT0_" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0xcab0
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0xcab0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %r9d
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp1588 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp1589 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1591:
    00000028: 	movq	%rax, %rbx
.Ltmp1589:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,4), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x4(%r10,%rsi), %r10
    00000040: 	movl	(%rcx), %edi
    00000042: 	movl	(%r10), %r11d
    00000045: 	cmpl	%edi, %r11d
    00000048: 	jle	.Ltmp1590 # Offset: 72
    0000004a: 	movq	%rdx, %rax
    0000004d: 	movl	%r11d, %edi
    00000050: 	movq	%r10, %rcx
    00000053: 	addq	$0x1, %rdx
.Ltmp1590:
    00000057: 	addq	%rdx, %rdx
    0000005a: 	movl	%edi, (%rsi,%rbx,4)
    0000005d: 	cmpq	%rdx, %rbp
    00000060: 	jg	.Ltmp1591 # Offset: 96
    00000062: 	je	.Ltmp1592 # Offset: 98
.Ltmp1597:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1593 # Offset: 120
    0000007a: 	jmp	.Ltmp1594 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1596:
    00000080: 	movl	%edx, (%rcx)
    00000082: 	leaq	-0x1(%rdi), %rdx
    00000086: 	movq	%rdx, %rax
    00000089: 	shrq	$0x3f, %rax
    0000008d: 	addq	%rdx, %rax
    00000090: 	sarq	%rax
    00000093: 	movq	%rax, %rdx
    00000096: 	movq	%rdi, %rax
    00000099: 	cmpq	%rdi, %r8
    0000009c: 	jge	.Ltmp1595 # Offset: 156
    0000009e: 	movq	%rdx, %rdi
.Ltmp1593:
    000000a1: 	leaq	(%rsi,%rdi,4), %r10
    000000a5: 	leaq	(%rsi,%rax,4), %rcx
    000000a9: 	movl	(%r10), %edx
    000000ac: 	cmpl	%r9d, %edx
    000000af: 	jl	.Ltmp1596 # Offset: 175
.Ltmp1594:
    000000b1: 	movl	%r9d, (%rcx)
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1595:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movl	%r9d, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1588:
    000000d0: 	leaq	(%rsi,%r8,4), %rcx
    000000d4: 	jne	.Ltmp1594 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1592:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,4), %rdx
    000000e8: 	movl	(%rdx), %edi
    000000ea: 	movl	%edi, (%rcx)
    000000ec: 	movq	%rdx, %rcx
    000000ef: 	jmp	.Ltmp1597 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0xcbb0
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0xcbb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %r9d
    00000010: 	pushq	%rbx
    00000011: 	movq	0x8(%rsi), %rcx
    00000015: 	cmpq	%rdi, %rdx
    00000018: 	jge	.Ltmp1598 # Offset: 24
    0000001e: 	movq	%rdi, %rbp
    00000021: 	movq	%r8, %rbx
    00000024: 	jmp	.Ltmp1599 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1601:
    00000030: 	movq	%rax, %rbx
.Ltmp1599:
    00000033: 	leaq	-0x1(%rdx), %rax
    00000037: 	leaq	(,%rax,4), %r10
    0000003f: 	leaq	(%rcx,%r10), %rsi
    00000043: 	leaq	0x4(%rcx,%r10), %r10
    00000048: 	movl	(%rsi), %edi
    0000004a: 	movl	(%r10), %r11d
    0000004d: 	cmpl	%edi, %r11d
    00000050: 	jle	.Ltmp1600 # Offset: 80
    00000052: 	movq	%rdx, %rax
    00000055: 	movl	%r11d, %edi
    00000058: 	movq	%r10, %rsi
    0000005b: 	addq	$0x1, %rdx
.Ltmp1600:
    0000005f: 	addq	%rdx, %rdx
    00000062: 	movl	%edi, (%rcx,%rbx,4)
    00000065: 	cmpq	%rdx, %rbp
    00000068: 	jg	.Ltmp1601 # Offset: 104
    0000006a: 	je	.Ltmp1602 # Offset: 106
.Ltmp1607:
    0000006c: 	leaq	-0x1(%rax), %rdx
    00000070: 	movq	%rdx, %rdi
    00000073: 	shrq	$0x3f, %rdi
    00000077: 	addq	%rdx, %rdi
    0000007a: 	sarq	%rdi
    0000007d: 	cmpq	%r8, %rax
    00000080: 	jg	.Ltmp1603 # Offset: 128
    00000082: 	jmp	.Ltmp1604 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1606:
    00000088: 	movl	%edx, (%rsi)
    0000008a: 	leaq	-0x1(%rdi), %rdx
    0000008e: 	movq	%rdx, %rax
    00000091: 	shrq	$0x3f, %rax
    00000095: 	addq	%rdx, %rax
    00000098: 	sarq	%rax
    0000009b: 	movq	%rax, %rdx
    0000009e: 	movq	%rdi, %rax
    000000a1: 	cmpq	%rdi, %r8
    000000a4: 	jge	.Ltmp1605 # Offset: 164
    000000a6: 	movq	%rdx, %rdi
.Ltmp1603:
    000000a9: 	leaq	(%rcx,%rdi,4), %r10
    000000ad: 	leaq	(%rcx,%rax,4), %rsi
    000000b1: 	movl	(%r10), %edx
    000000b4: 	cmpl	%r9d, %edx
    000000b7: 	jl	.Ltmp1606 # Offset: 183
.Ltmp1604:
    000000b9: 	movl	%r9d, (%rsi)
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	retq # Offset: 190
    000000bf: 	nop # Size: 1
.Ltmp1605:
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movl	%r9d, (%rsi)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1598:
    000000d0: 	leaq	(%rcx,%r8,4), %rsi
    000000d4: 	jne	.Ltmp1604 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1602:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,4), %rdx
    000000e8: 	movl	(%rdx), %edi
    000000ea: 	movl	%edi, (%rsi)
    000000ec: 	movq	%rdx, %rsi
    000000ef: 	jmp	.Ltmp1607 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEEvlT_lT0_" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0xccb0
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0xccb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %r9d
    00000010: 	pushq	%rbx
    00000011: 	movq	0x8(%rsi), %rcx
    00000015: 	cmpq	%rdi, %rdx
    00000018: 	jge	.Ltmp1608 # Offset: 24
    0000001e: 	movq	%rdi, %rbp
    00000021: 	movq	%r8, %rbx
    00000024: 	jmp	.Ltmp1609 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1611:
    00000030: 	movq	%rax, %rbx
.Ltmp1609:
    00000033: 	leaq	-0x1(%rdx), %rax
    00000037: 	leaq	(,%rax,4), %r10
    0000003f: 	leaq	(%rcx,%r10), %rsi
    00000043: 	leaq	0x4(%rcx,%r10), %r10
    00000048: 	movl	(%rsi), %edi
    0000004a: 	movl	(%r10), %r11d
    0000004d: 	cmpl	%edi, %r11d
    00000050: 	jle	.Ltmp1610 # Offset: 80
    00000052: 	movq	%rdx, %rax
    00000055: 	movl	%r11d, %edi
    00000058: 	movq	%r10, %rsi
    0000005b: 	addq	$0x1, %rdx
.Ltmp1610:
    0000005f: 	addq	%rdx, %rdx
    00000062: 	movl	%edi, (%rcx,%rbx,4)
    00000065: 	cmpq	%rdx, %rbp
    00000068: 	jg	.Ltmp1611 # Offset: 104
    0000006a: 	je	.Ltmp1612 # Offset: 106
.Ltmp1617:
    0000006c: 	leaq	-0x1(%rax), %rdx
    00000070: 	movq	%rdx, %rdi
    00000073: 	shrq	$0x3f, %rdi
    00000077: 	addq	%rdx, %rdi
    0000007a: 	sarq	%rdi
    0000007d: 	cmpq	%r8, %rax
    00000080: 	jg	.Ltmp1613 # Offset: 128
    00000082: 	jmp	.Ltmp1614 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1616:
    00000088: 	movl	%edx, (%rsi)
    0000008a: 	leaq	-0x1(%rdi), %rdx
    0000008e: 	movq	%rdx, %rax
    00000091: 	shrq	$0x3f, %rax
    00000095: 	addq	%rdx, %rax
    00000098: 	sarq	%rax
    0000009b: 	movq	%rax, %rdx
    0000009e: 	movq	%rdi, %rax
    000000a1: 	cmpq	%rdi, %r8
    000000a4: 	jge	.Ltmp1615 # Offset: 164
    000000a6: 	movq	%rdx, %rdi
.Ltmp1613:
    000000a9: 	leaq	(%rcx,%rdi,4), %r10
    000000ad: 	leaq	(%rcx,%rax,4), %rsi
    000000b1: 	movl	(%r10), %edx
    000000b4: 	cmpl	%r9d, %edx
    000000b7: 	jl	.Ltmp1616 # Offset: 183
.Ltmp1614:
    000000b9: 	movl	%r9d, (%rsi)
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	retq # Offset: 190
    000000bf: 	nop # Size: 1
.Ltmp1615:
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movl	%r9d, (%rsi)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1608:
    000000d0: 	leaq	(%rcx,%r8,4), %rsi
    000000d4: 	jne	.Ltmp1614 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1612:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,4), %rdx
    000000e8: 	movl	(%rdx), %edi
    000000ea: 	movl	%edi, (%rsi)
    000000ec: 	movq	%rdx, %rsi
    000000ef: 	jmp	.Ltmp1617 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEEvlT_lT0_"

Binary Function "_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0xcdb0
  Size        : 0xca
  MaxSize     : 0xd0
  Offset      : 0xcdb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rdi, %r13
    0000000b: 	pushq	%r12
    0000000d: 	pushq	%rbp
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x20, %rsp
    00000013: 	movq	0x8(%rdi), %r12
    00000017: 	movq	0x8(%rsi), %rbp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	subq	%r12, %rbp
    0000002e: 	movq	%rbp, %rbx
    00000031: 	shrq	$0x3f, %rbp
    00000035: 	sarq	$0x2, %rbx
    00000039: 	addq	%rbx, %rbp
    0000003c: 	sarq	%rbp
    0000003f: 	subq	$0x1, %rbp
    00000043: 	js	.Ltmp1618 # Offset: 67
    00000045: 	movq	%rsp, %r14
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1619:
    00000050: 	movl	(%r12,%rbp,4), %ecx
    00000054: 	movq	0x8(%r13), %rax
    00000058: 	movq	%rbp, %rdx
    0000005b: 	movq	%r14, %rsi
    0000005e: 	movq	%rbx, %rdi
    00000061: 	movq	%rax, 0x8(%rsp)
    00000066: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEEvlT_lT0_ # Offset: 102
    0000006b: 	subq	$0x1, %rbp
    0000006f: 	jae	.Ltmp1619 # Offset: 111
.Ltmp1618:
    00000071: 	subq	$0x1, %rbx
    00000075: 	testq	%rbx, %rbx
    00000078: 	jle	.Ltmp1620 # Offset: 120
    0000007a: 	movq	%rsp, %r14
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp1621:
    00000080: 	movl	(%r12), %eax
    00000084: 	movl	(%r12,%rbx,4), %ecx
    00000088: 	xorl	%edx, %edx
    0000008a: 	movq	%rbx, %rdi
    0000008d: 	movq	%r14, %rsi
    00000090: 	movl	%eax, (%r12,%rbx,4)
    00000094: 	movq	0x8(%r13), %rax
    00000098: 	movq	%rax, 0x8(%rsp)
    0000009d: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEEvlT_lT0_ # Offset: 157
    000000a2: 	subq	$0x1, %rbx
    000000a6: 	jne	.Ltmp1621 # Offset: 166
.Ltmp1620:
    000000a8: 	movq	0x18(%rsp), %rax
    000000ad: 	subq	%fs:0x28, %rax
    000000b6: 	jne	.Ltmp1622 # Offset: 182
    000000b8: 	addq	$0x20, %rsp
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	popq	%r12
    000000c0: 	popq	%r13
    000000c2: 	popq	%r14
    000000c4: 	retq # Offset: 196
.Ltmp1622:
    000000c5: 	callq	__stack_chk_fail@PLT # Offset: 197
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_"

Binary Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_vector.cpp/1
  Number      : 84
  State       : disassembled
  Address     : 0xce80
  Size        : 0x202
  MaxSize     : 0x210
  Offset      : 0xce80
  Section     : .text
  Orc Section : .local.text._Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rcx, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x58, %rsp
    00000014: 	movq	%rdi, 0x8(%rsp)
    00000019: 	movq	%rsi, 0x10(%rsp)
    0000001e: 	movq	%r8, 0x18(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x48(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	movl	iterations(%rip), %eax
    00000045: 	testl	%eax, %eax
    00000047: 	jle	.Ltmp1623 # Offset: 71
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	leaq	0x30(%rsp), %r14
    00000055: 	leaq	0x20(%rsp), %r13
    0000005a: 	movq	%rbp, %rbx
    0000005d: 	movq	%r12, %rbp
    00000060: 	movl	%r15d, %r12d
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1630:
    00000068: 	movq	0x10(%rsp), %rax
    0000006d: 	movq	0x8(%rbx), %r15
    00000071: 	movq	0x8(%rax), %r10
    00000075: 	movq	0x8(%rsp), %rax
    0000007a: 	movq	0x8(%rax), %rdx
    0000007e: 	cmpq	%rdx, %r10
    00000081: 	je	.Ltmp1624 # Offset: 129
    00000087: 	movq	%r10, %rdi
    0000008a: 	leaq	0x4(%rdx), %r11
    0000008e: 	movq	%r15, %rax
    00000091: 	subq	%rdx, %rdi
    00000094: 	subq	%r11, %rax
    00000097: 	leaq	-0x4(%rdi), %rsi
    0000009b: 	cmpq	$0x8, %rax
    0000009f: 	jbe	.Ltmp1625 # Offset: 159
    000000a5: 	cmpq	$0x8, %rsi
    000000a9: 	jbe	.Ltmp1625 # Offset: 169
    000000af: 	shrq	$0x2, %rsi
    000000b3: 	xorl	%eax, %eax
    000000b5: 	addq	$0x1, %rsi
    000000b9: 	movq	%rsi, %rdi
    000000bc: 	shrq	$0x2, %rdi
    000000c0: 	shlq	$0x4, %rdi
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp1626:
    000000c8: 	movdqu	(%rdx,%rax), %xmm1
    000000cd: 	movups	%xmm1, (%r15,%rax)
    000000d2: 	addq	$0x10, %rax
    000000d6: 	cmpq	%rdi, %rax
    000000d9: 	jne	.Ltmp1626 # Offset: 217
    000000db: 	movq	%rsi, %rdi
    000000de: 	andq	$-0x4, %rdi
    000000e2: 	leaq	(,%rdi,4), %rax
    000000ea: 	addq	%rax, %rdx
    000000ed: 	addq	%r15, %rax
    000000f0: 	cmpq	%rdi, %rsi
    000000f3: 	je	.Ltmp1624 # Offset: 243
    000000f5: 	movl	(%rdx), %esi
    000000f7: 	movl	%esi, (%rax)
    000000f9: 	leaq	0x4(%rdx), %rsi
    000000fd: 	cmpq	%rsi, %r10
    00000100: 	je	.Ltmp1624 # Offset: 256
    00000102: 	movl	0x4(%rdx), %esi
    00000105: 	movl	%esi, 0x4(%rax)
    00000108: 	leaq	0x8(%rdx), %rsi
    0000010c: 	cmpq	%rsi, %r10
    0000010f: 	je	.Ltmp1624 # Offset: 271
    00000111: 	movl	0x8(%rdx), %edx
    00000114: 	movl	%edx, 0x8(%rax)
.Ltmp1624:
    00000117: 	movq	0x8(%rbp), %rax
    0000011b: 	movq	%r14, %rsi
    0000011e: 	movq	%r13, %rdi
    00000121: 	movq	%rax, 0x38(%rsp)
    00000126: 	movq	0x8(%rbx), %rax
    0000012a: 	movq	%rax, 0x28(%rsp)
    0000012f: 	callq	_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEEEvT_SB_ # Offset: 303
    00000134: 	movq	0x8(%rbp), %rsi
    00000138: 	leaq	0x4(%r15), %rax
    0000013c: 	jmp	.Ltmp1627 # Offset: 316
    0000013e: 	nop # Size: 2
.Ltmp1629:
    00000140: 	addq	$0x4, %rax
    00000144: 	movl	-0x8(%rax), %ecx
    00000147: 	cmpl	%ecx, (%rdx)
    00000149: 	jl	.Ltmp1628 # Offset: 329
.Ltmp1627:
    0000014b: 	movq	%rax, %rdx
    0000014e: 	cmpq	%rax, %rsi
    00000151: 	jne	.Ltmp1629 # Offset: 337
    00000153: 	addl	$0x1, %r12d
    00000157: 	cmpl	iterations(%rip), %r12d
    0000015e: 	jl	.Ltmp1630 # Offset: 350
.Ltmp1623:
    00000164: 	callq	clock@PLT # Offset: 356
    00000169: 	movq	%rax, end_time(%rip)
    00000170: 	movq	0x48(%rsp), %rdx
    00000175: 	subq	%fs:0x28, %rdx
    0000017e: 	jne	.Ltmp1631 # Offset: 382
    00000180: 	subq	start_time(%rip), %rax
    00000187: 	pxor	%xmm0, %xmm0
    0000018b: 	movq	0x18(%rsp), %rdi
    00000190: 	cvtsi2sd	%rax, %xmm0
    00000195: 	divsd	DATAat0x15638(%rip), %xmm0
    0000019d: 	addq	$0x58, %rsp
    000001a1: 	popq	%rbx
    000001a2: 	popq	%rbp
    000001a3: 	popq	%r12
    000001a5: 	popq	%r13
    000001a7: 	popq	%r14
    000001a9: 	popq	%r15
    000001ab: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 427
.Ltmp1628:
    000001b0: 	movq	0x18(%rsp), %rax
    000001b5: 	leaq	DATAat0x151ba(%rip), %rsi
    000001bc: 	movl	$0x1, %edi
    000001c1: 	addl	$0x1, %r12d
    000001c5: 	movq	(%rax), %rdx
    000001c8: 	xorl	%eax, %eax
    000001ca: 	callq	__printf_chk@PLT # Offset: 458
    000001cf: 	cmpl	iterations(%rip), %r12d
    000001d6: 	jl	.Ltmp1630 # Offset: 470
    000001dc: 	jmp	.Ltmp1623 # Offset: 476
    000001de: 	nop # Size: 2
.Ltmp1625:
    000001e0: 	xorl	%eax, %eax
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1632:
    000001e8: 	movl	(%rdx,%rax), %ecx
    000001eb: 	movl	%ecx, (%r15,%rax)
    000001ef: 	addq	$0x4, %rax
    000001f3: 	cmpq	%rax, %rdi
    000001f6: 	jne	.Ltmp1632 # Offset: 502
    000001f8: 	jmp	.Ltmp1624 # Offset: 504
.Ltmp1631:
    000001fd: 	callq	__stack_chk_fail@PLT # Offset: 509
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEiEEvlT_lT0_" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0xd090
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0xd090
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %r9d
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp1633 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp1634 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1636:
    00000028: 	movq	%rax, %rbx
.Ltmp1634:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,4), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x4(%r10,%rsi), %r10
    00000040: 	movl	(%rcx), %edi
    00000042: 	movl	(%r10), %r11d
    00000045: 	cmpl	%edi, %r11d
    00000048: 	jle	.Ltmp1635 # Offset: 72
    0000004a: 	movq	%rdx, %rax
    0000004d: 	movl	%r11d, %edi
    00000050: 	movq	%r10, %rcx
    00000053: 	addq	$0x1, %rdx
.Ltmp1635:
    00000057: 	addq	%rdx, %rdx
    0000005a: 	movl	%edi, (%rsi,%rbx,4)
    0000005d: 	cmpq	%rdx, %rbp
    00000060: 	jg	.Ltmp1636 # Offset: 96
    00000062: 	je	.Ltmp1637 # Offset: 98
.Ltmp1642:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1638 # Offset: 120
    0000007a: 	jmp	.Ltmp1639 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1641:
    00000080: 	movl	%edx, (%rcx)
    00000082: 	leaq	-0x1(%rdi), %rdx
    00000086: 	movq	%rdx, %rax
    00000089: 	shrq	$0x3f, %rax
    0000008d: 	addq	%rdx, %rax
    00000090: 	sarq	%rax
    00000093: 	movq	%rax, %rdx
    00000096: 	movq	%rdi, %rax
    00000099: 	cmpq	%rdi, %r8
    0000009c: 	jge	.Ltmp1640 # Offset: 156
    0000009e: 	movq	%rdx, %rdi
.Ltmp1638:
    000000a1: 	leaq	(%rsi,%rdi,4), %r10
    000000a5: 	leaq	(%rsi,%rax,4), %rcx
    000000a9: 	movl	(%r10), %edx
    000000ac: 	cmpl	%r9d, %edx
    000000af: 	jl	.Ltmp1641 # Offset: 175
.Ltmp1639:
    000000b1: 	movl	%r9d, (%rcx)
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1640:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movl	%r9d, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1633:
    000000d0: 	leaq	(%rsi,%r8,4), %rcx
    000000d4: 	jne	.Ltmp1639 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1637:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,4), %rdx
    000000e8: 	movl	(%rdx), %edi
    000000ea: 	movl	%edi, (%rcx)
    000000ec: 	movq	%rdx, %rcx
    000000ef: 	jmp	.Ltmp1642 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEiEEvlT_lT0_"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0xd190
  Size        : 0x330c
  MaxSize     : 0x3310
  Offset      : 0xd190
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x4000(%rsp), %r11
.Ltmp1643:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1643 # Offset: 37
    00000027: 	subq	$0x78, %rsp
    0000002b: 	leaq	DATAat0x15613(%rip), %rsi
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x4068(%rsp)
    00000043: 	xorl	%eax, %eax
    00000045: 	leaq	0x140(%rsp), %rax
    0000004d: 	leaq	0x2120(%rsp), %r13
    00000055: 	movq	%rax, %rdi
    00000058: 	movq	%rax, 0x18(%rsp)
    0000005d: 	leaq	0x1e0(%rsp), %rbx
    00000065: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 101
    0000006a: 	leaq	0x120(%rsp), %rax
    00000072: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    0000007a: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    00000082: 	movq	%rax, %rsi
    00000085: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000008c: 	movq	%rax, 0x50(%rsp)
    00000091: 	movaps	%xmm4, 0x120(%rsp)
    00000099: 	movaps	%xmm5, 0x130(%rsp)
    000000a1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 161
    000000a6: 	movl	iterations(%rip), %eax
    000000ac: 	movq	%r13, 0x38(%rsp)
    000000b1: 	movl	%eax, 0x9c(%rsp)
    000000b8: 	cvttsd2si	init_value(%rip), %eax
    000000c0: 	leal	0xea(%rax), %edx
    000000c6: 	movd	%eax, %xmm4
    000000ca: 	movq	%rbx, %rax
    000000cd: 	movslq	%edx, %rdx
    000000d0: 	pshufd	$0x0, %xmm4, %xmm0
    000000d5: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
.Ltmp1644:
    000000dc: 	movaps	%xmm0, (%rax)
    000000df: 	addq	$0x10, %rax
    000000e3: 	cmpq	%r13, %rax
    000000e6: 	jne	.Ltmp1644 # Offset: 230
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	leaq	0x100(%rsp), %rdi
    000000f4: 	movl	$0x7d0, %esi
    000000f9: 	movq	$0x0, 0x110(%rsp)
    00000105: 	movaps	%xmm0, 0x100(%rsp)
    0000010d: 	callq	_ZNSt6vectorIiSaIiEE17_M_default_appendEm # Offset: 269
    00000112: 	movq	0x108(%rsp), %r12
    0000011a: 	movq	0x100(%rsp), %rbp
    00000122: 	cvttsd2si	init_value(%rip), %esi
    0000012a: 	cmpq	%r12, %rbp
    0000012d: 	je	.Ltmp1645 # Offset: 301
    0000012f: 	leaq	-0x4(%r12), %rdx
    00000134: 	movq	%rbp, %rax
    00000137: 	subq	%rbp, %rdx
    0000013a: 	movq	%rdx, %rcx
    0000013d: 	shrq	$0x2, %rcx
    00000141: 	addq	$0x1, %rcx
    00000145: 	cmpq	$0x8, %rdx
    00000149: 	jbe	.Ltmp1646 # Offset: 329
    0000014b: 	movq	%rcx, %rdx
    0000014e: 	movd	%esi, %xmm5
    00000152: 	shrq	$0x2, %rdx
    00000156: 	pshufd	$0x0, %xmm5, %xmm0
    0000015b: 	shlq	$0x4, %rdx
    0000015f: 	addq	%rbp, %rdx
.Ltmp1647:
    00000162: 	movups	%xmm0, (%rax)
    00000165: 	addq	$0x10, %rax
    00000169: 	cmpq	%rdx, %rax
    0000016c: 	jne	.Ltmp1647 # Offset: 364
    0000016e: 	movq	%rcx, %rdx
    00000171: 	andq	$-0x4, %rdx
    00000175: 	leaq	(%rbp,%rdx,4), %rax
    0000017a: 	cmpq	%rcx, %rdx
    0000017d: 	je	.Ltmp1645 # Offset: 381
.Ltmp1646:
    0000017f: 	leaq	0x4(%rax), %rdx
    00000183: 	movl	%esi, (%rax)
    00000185: 	cmpq	%rdx, %r12
    00000188: 	je	.Ltmp1645 # Offset: 392
    0000018a: 	leaq	0x8(%rax), %rdx
    0000018e: 	movl	%esi, 0x4(%rax)
    00000191: 	cmpq	%rdx, %r12
    00000194: 	je	.Ltmp1645 # Offset: 404
    00000196: 	movl	%esi, 0x8(%rax)
.Ltmp1645:
    00000199: 	movq	0x18(%rsp), %rsi
    0000019e: 	leaq	DATAat0x15205(%rip), %rdx
    000001a5: 	movq	%r13, %rdi
    000001a8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 424
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	movsd	DATAat0x15648(%rip), %xmm4
    000001ba: 	xorl	%r14d, %r14d
    000001bd: 	movl	iterations(%rip), %edx
    000001c3: 	movq	%rax, start_time(%rip)
    000001ca: 	leaq	DATAat0x151bf(%rip), %r15
    000001d1: 	movsd	%xmm4, (%rsp)
    000001d6: 	testl	%edx, %edx
    000001d8: 	jle	.Ltmp1648 # Offset: 472
.Ltmp1651:
    000001da: 	movq	%rbx, %rax
    000001dd: 	pxor	%xmm0, %xmm0
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp1649:
    000001e8: 	paddd	(%rax), %xmm0
    000001ec: 	addq	$0x10, %rax
    000001f0: 	cmpq	%r13, %rax
    000001f3: 	jne	.Ltmp1649 # Offset: 499
    000001f5: 	movdqa	%xmm0, %xmm1
    000001f9: 	psrldq	$0x8, %xmm1
    000001fe: 	paddd	%xmm1, %xmm0
    00000202: 	movsd	(%rsp), %xmm1
    00000207: 	mulsd	init_value(%rip), %xmm1
    0000020f: 	cvttsd2si	%xmm1, %ecx
    00000213: 	movdqa	%xmm0, %xmm1
    00000217: 	psrldq	$0x4, %xmm1
    0000021c: 	paddd	%xmm1, %xmm0
    00000220: 	movd	%xmm0, %eax
    00000224: 	cmpl	%eax, %ecx
    00000226: 	je	.Ltmp1650 # Offset: 550
    00000228: 	movq	0x2120(%rsp), %rdx
    00000230: 	movq	%r15, %rsi
    00000233: 	movl	$0x1, %edi
    00000238: 	xorl	%eax, %eax
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	iterations(%rip), %edx
.Ltmp1650:
    00000245: 	addl	$0x1, %r14d
    00000249: 	cmpl	%edx, %r14d
    0000024c: 	jl	.Ltmp1651 # Offset: 588
.Ltmp1648:
    0000024e: 	callq	clock@PLT # Offset: 590
    00000253: 	pxor	%xmm0, %xmm0
    00000257: 	movq	%r13, %rdi
    0000025a: 	movq	%rax, end_time(%rip)
    00000261: 	subq	start_time(%rip), %rax
    00000268: 	cvtsi2sd	%rax, %xmm0
    0000026d: 	divsd	DATAat0x15638(%rip), %xmm0
    00000275: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 629
    0000027a: 	movq	0x2120(%rsp), %rdi
    00000282: 	leaq	0x2130(%rsp), %rax
    0000028a: 	movq	%rax, 0x8(%rsp)
    0000028f: 	cmpq	%rax, %rdi
    00000292: 	je	.Ltmp1652 # Offset: 658
    00000294: 	movq	0x2130(%rsp), %rax
    0000029c: 	leaq	0x1(%rax), %rsi
    000002a0: 	callq	_ZdlPvm@PLT # Offset: 672
.Ltmp1652:
    000002a5: 	movq	0x18(%rsp), %rsi
    000002aa: 	leaq	DATAat0x15221(%rip), %rdx
    000002b1: 	movq	%r13, %rdi
    000002b4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 692
    000002b9: 	callq	clock@PLT # Offset: 697
    000002be: 	movl	iterations(%rip), %edx
    000002c4: 	movq	%rax, start_time(%rip)
    000002cb: 	testl	%edx, %edx
    000002cd: 	jle	.Ltmp1653 # Offset: 717
    000002d3: 	leaq	-0x4(%r12), %rax
    000002d8: 	movsd	DATAat0x15648(%rip), %xmm5
    000002e0: 	subq	%rbp, %rax
    000002e3: 	movq	%rax, %rsi
    000002e6: 	movq	%rax, 0x10(%rsp)
    000002eb: 	shrq	$0x2, %rax
    000002ef: 	leaq	0x1(%rax), %rdi
    000002f3: 	movsd	%xmm5, (%rsp)
    000002f8: 	movq	%rdi, %rax
    000002fb: 	movq	%rdi, 0x48(%rsp)
    00000300: 	andq	$-0x4, %rdi
    00000304: 	shrq	$0x2, %rax
    00000308: 	movq	%rdi, 0x30(%rsp)
    0000030d: 	shlq	$0x4, %rax
    00000311: 	cmpq	$0x8, %rsi
    00000315: 	leaq	(%rax,%rbp), %r14
    00000319: 	leaq	(%rbp,%rdi,4), %rax
    0000031e: 	cmovbeq	%rbp, %rax
    00000322: 	xorl	%r15d, %r15d
    00000325: 	leaq	0x4(%rax), %rdi
    00000329: 	movq	%rax, 0x40(%rsp)
    0000032e: 	addq	$0x8, %rax
    00000332: 	movq	%rdi, 0x28(%rsp)
    00000337: 	movq	%rax, 0x20(%rsp)
.Ltmp1658:
    0000033c: 	xorl	%eax, %eax
    0000033e: 	cmpq	%r12, %rbp
    00000341: 	je	.Ltmp1654 # Offset: 833
    00000343: 	cmpq	$0x8, 0x10(%rsp)
    00000349: 	jbe	.Ltmp1655 # Offset: 841
    0000034f: 	movq	%rbp, %rax
    00000352: 	pxor	%xmm0, %xmm0
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1656:
    00000360: 	movdqu	(%rax), %xmm2
    00000364: 	addq	$0x10, %rax
    00000368: 	paddd	%xmm2, %xmm0
    0000036c: 	cmpq	%r14, %rax
    0000036f: 	jne	.Ltmp1656 # Offset: 879
    00000371: 	movdqa	%xmm0, %xmm1
    00000375: 	movq	0x48(%rsp), %rsi
    0000037a: 	psrldq	$0x8, %xmm1
    0000037f: 	paddd	%xmm1, %xmm0
    00000383: 	movdqa	%xmm0, %xmm1
    00000387: 	psrldq	$0x4, %xmm1
    0000038c: 	paddd	%xmm1, %xmm0
    00000390: 	movd	%xmm0, %eax
    00000394: 	cmpq	%rsi, 0x30(%rsp)
    00000399: 	je	.Ltmp1654 # Offset: 921
.Ltmp1956:
    0000039b: 	movq	0x40(%rsp), %rdi
    000003a0: 	addl	(%rdi), %eax
    000003a2: 	cmpq	0x28(%rsp), %r12
    000003a7: 	je	.Ltmp1654 # Offset: 935
    000003a9: 	addl	0x4(%rdi), %eax
    000003ac: 	cmpq	0x20(%rsp), %r12
    000003b1: 	je	.Ltmp1654 # Offset: 945
    000003b3: 	addl	0x8(%rdi), %eax
.Ltmp1654:
    000003b6: 	movsd	(%rsp), %xmm0
    000003bb: 	mulsd	init_value(%rip), %xmm0
    000003c3: 	cvttsd2si	%xmm0, %ecx
    000003c7: 	cmpl	%ecx, %eax
    000003c9: 	je	.Ltmp1657 # Offset: 969
    000003cb: 	movq	0x2120(%rsp), %rdx
    000003d3: 	leaq	DATAat0x151bf(%rip), %rsi
    000003da: 	movl	$0x1, %edi
    000003df: 	xorl	%eax, %eax
    000003e1: 	callq	__printf_chk@PLT # Offset: 993
    000003e6: 	movl	iterations(%rip), %edx
.Ltmp1657:
    000003ec: 	addl	$0x1, %r15d
    000003f0: 	cmpl	%edx, %r15d
    000003f3: 	jl	.Ltmp1658 # Offset: 1011
.Ltmp1653:
    000003f9: 	callq	clock@PLT # Offset: 1017
    000003fe: 	pxor	%xmm0, %xmm0
    00000402: 	movq	%r13, %rdi
    00000405: 	movq	%rax, end_time(%rip)
    0000040c: 	subq	start_time(%rip), %rax
    00000413: 	cvtsi2sd	%rax, %xmm0
    00000418: 	divsd	DATAat0x15638(%rip), %xmm0
    00000420: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1056
    00000425: 	movq	0x2120(%rsp), %rdi
    0000042d: 	cmpq	0x8(%rsp), %rdi
    00000432: 	je	.Ltmp1659 # Offset: 1074
    00000434: 	movq	0x2130(%rsp), %rax
    0000043c: 	leaq	0x1(%rax), %rsi
    00000440: 	callq	_ZdlPvm@PLT # Offset: 1088
.Ltmp1659:
    00000445: 	movq	0x18(%rsp), %rsi
    0000044a: 	leaq	DATAat0x152f8(%rip), %rdx
    00000451: 	movq	%r13, %rdi
    00000454: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1108
    00000459: 	callq	clock@PLT # Offset: 1113
    0000045e: 	movsd	DATAat0x15648(%rip), %xmm4
    00000466: 	xorl	%r14d, %r14d
    00000469: 	movl	iterations(%rip), %edx
    0000046f: 	movq	%rax, start_time(%rip)
    00000476: 	leaq	DATAat0x151bf(%rip), %r15
    0000047d: 	movsd	%xmm4, (%rsp)
    00000482: 	testl	%edx, %edx
    00000484: 	jle	.Ltmp1660 # Offset: 1156
.Ltmp1663:
    00000486: 	movq	%rbx, %rax
    00000489: 	pxor	%xmm0, %xmm0
    0000048d: 	nopl	(%rax) # Size: 3
.Ltmp1661:
    00000490: 	paddd	(%rax), %xmm0
    00000494: 	addq	$0x10, %rax
    00000498: 	cmpq	%r13, %rax
    0000049b: 	jne	.Ltmp1661 # Offset: 1179
    0000049d: 	movdqa	%xmm0, %xmm1
    000004a1: 	psrldq	$0x8, %xmm1
    000004a6: 	paddd	%xmm1, %xmm0
    000004aa: 	movsd	(%rsp), %xmm1
    000004af: 	mulsd	init_value(%rip), %xmm1
    000004b7: 	cvttsd2si	%xmm1, %ecx
    000004bb: 	movdqa	%xmm0, %xmm1
    000004bf: 	psrldq	$0x4, %xmm1
    000004c4: 	paddd	%xmm1, %xmm0
    000004c8: 	movd	%xmm0, %eax
    000004cc: 	cmpl	%eax, %ecx
    000004ce: 	je	.Ltmp1662 # Offset: 1230
    000004d0: 	movq	0x2120(%rsp), %rdx
    000004d8: 	movq	%r15, %rsi
    000004db: 	movl	$0x1, %edi
    000004e0: 	xorl	%eax, %eax
    000004e2: 	callq	__printf_chk@PLT # Offset: 1250
    000004e7: 	movl	iterations(%rip), %edx
.Ltmp1662:
    000004ed: 	addl	$0x1, %r14d
    000004f1: 	cmpl	%edx, %r14d
    000004f4: 	jl	.Ltmp1663 # Offset: 1268
.Ltmp1660:
    000004f6: 	callq	clock@PLT # Offset: 1270
    000004fb: 	pxor	%xmm0, %xmm0
    000004ff: 	movq	%r13, %rdi
    00000502: 	movq	%rax, end_time(%rip)
    00000509: 	subq	start_time(%rip), %rax
    00000510: 	cvtsi2sd	%rax, %xmm0
    00000515: 	divsd	DATAat0x15638(%rip), %xmm0
    0000051d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1309
    00000522: 	movq	0x2120(%rsp), %rdi
    0000052a: 	cmpq	0x8(%rsp), %rdi
    0000052f: 	je	.Ltmp1664 # Offset: 1327
    00000531: 	movq	0x2130(%rsp), %rax
    00000539: 	leaq	0x1(%rax), %rsi
    0000053d: 	callq	_ZdlPvm@PLT # Offset: 1341
.Ltmp1664:
    00000542: 	movq	0x18(%rsp), %rsi
    00000547: 	leaq	DATAat0x15320(%rip), %rdx
    0000054e: 	movq	%r13, %rdi
    00000551: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1361
    00000556: 	callq	clock@PLT # Offset: 1366
    0000055b: 	movl	iterations(%rip), %edx
    00000561: 	movq	%rax, start_time(%rip)
    00000568: 	testl	%edx, %edx
    0000056a: 	jle	.Ltmp1665 # Offset: 1386
    00000570: 	leaq	-0x4(%r12), %rax
    00000575: 	movsd	DATAat0x15648(%rip), %xmm5
    0000057d: 	subq	%rbp, %rax
    00000580: 	movq	%rax, %rsi
    00000583: 	movq	%rax, 0x10(%rsp)
    00000588: 	shrq	$0x2, %rax
    0000058c: 	leaq	0x1(%rax), %rdi
    00000590: 	movsd	%xmm5, (%rsp)
    00000595: 	movq	%rdi, %rax
    00000598: 	movq	%rdi, 0x48(%rsp)
    0000059d: 	andq	$-0x4, %rdi
    000005a1: 	shrq	$0x2, %rax
    000005a5: 	movq	%rdi, 0x30(%rsp)
    000005aa: 	shlq	$0x4, %rax
    000005ae: 	cmpq	$0x8, %rsi
    000005b2: 	leaq	(%rax,%rbp), %r14
    000005b6: 	leaq	(%rbp,%rdi,4), %rax
    000005bb: 	cmovbeq	%rbp, %rax
    000005bf: 	xorl	%r15d, %r15d
    000005c2: 	leaq	0x4(%rax), %rdi
    000005c6: 	movq	%rax, 0x40(%rsp)
    000005cb: 	addq	$0x8, %rax
    000005cf: 	movq	%rdi, 0x28(%rsp)
    000005d4: 	movq	%rax, 0x20(%rsp)
.Ltmp1670:
    000005d9: 	xorl	%eax, %eax
    000005db: 	cmpq	%r12, %rbp
    000005de: 	je	.Ltmp1666 # Offset: 1502
    000005e0: 	cmpq	$0x8, 0x10(%rsp)
    000005e6: 	jbe	.Ltmp1667 # Offset: 1510
    000005ec: 	movq	%rbp, %rax
    000005ef: 	pxor	%xmm0, %xmm0
    000005f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1668:
    000005f8: 	movdqu	(%rax), %xmm3
    000005fc: 	addq	$0x10, %rax
    00000600: 	paddd	%xmm3, %xmm0
    00000604: 	cmpq	%r14, %rax
    00000607: 	jne	.Ltmp1668 # Offset: 1543
    00000609: 	movdqa	%xmm0, %xmm1
    0000060d: 	movq	0x48(%rsp), %rsi
    00000612: 	psrldq	$0x8, %xmm1
    00000617: 	paddd	%xmm1, %xmm0
    0000061b: 	movdqa	%xmm0, %xmm1
    0000061f: 	psrldq	$0x4, %xmm1
    00000624: 	paddd	%xmm1, %xmm0
    00000628: 	movd	%xmm0, %eax
    0000062c: 	cmpq	%rsi, 0x30(%rsp)
    00000631: 	je	.Ltmp1666 # Offset: 1585
.Ltmp1955:
    00000633: 	movq	0x40(%rsp), %rdi
    00000638: 	addl	(%rdi), %eax
    0000063a: 	cmpq	0x28(%rsp), %r12
    0000063f: 	je	.Ltmp1666 # Offset: 1599
    00000641: 	addl	0x4(%rdi), %eax
    00000644: 	cmpq	0x20(%rsp), %r12
    00000649: 	je	.Ltmp1666 # Offset: 1609
    0000064b: 	addl	0x8(%rdi), %eax
.Ltmp1666:
    0000064e: 	movsd	(%rsp), %xmm0
    00000653: 	mulsd	init_value(%rip), %xmm0
    0000065b: 	cvttsd2si	%xmm0, %ecx
    0000065f: 	cmpl	%ecx, %eax
    00000661: 	je	.Ltmp1669 # Offset: 1633
    00000663: 	movq	0x2120(%rsp), %rdx
    0000066b: 	leaq	DATAat0x151bf(%rip), %rsi
    00000672: 	movl	$0x1, %edi
    00000677: 	xorl	%eax, %eax
    00000679: 	callq	__printf_chk@PLT # Offset: 1657
    0000067e: 	movl	iterations(%rip), %edx
.Ltmp1669:
    00000684: 	addl	$0x1, %r15d
    00000688: 	cmpl	%edx, %r15d
    0000068b: 	jl	.Ltmp1670 # Offset: 1675
.Ltmp1665:
    00000691: 	callq	clock@PLT # Offset: 1681
    00000696: 	pxor	%xmm0, %xmm0
    0000069a: 	movq	%r13, %rdi
    0000069d: 	movq	%rax, end_time(%rip)
    000006a4: 	subq	start_time(%rip), %rax
    000006ab: 	cvtsi2sd	%rax, %xmm0
    000006b0: 	divsd	DATAat0x15638(%rip), %xmm0
    000006b8: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1720
    000006bd: 	movq	0x2120(%rsp), %rdi
    000006c5: 	cmpq	0x8(%rsp), %rdi
    000006ca: 	je	.Ltmp1671 # Offset: 1738
    000006cc: 	movq	0x2130(%rsp), %rax
    000006d4: 	leaq	0x1(%rax), %rsi
    000006d8: 	callq	_ZdlPvm@PLT # Offset: 1752
.Ltmp1671:
    000006dd: 	movq	0x18(%rsp), %rsi
    000006e2: 	leaq	DATAat0x15350(%rip), %rdx
    000006e9: 	movq	%r13, %rdi
    000006ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1772
    000006f1: 	callq	clock@PLT # Offset: 1777
    000006f6: 	movl	iterations(%rip), %edx
    000006fc: 	movq	%rax, start_time(%rip)
    00000703: 	testl	%edx, %edx
    00000705: 	jle	.Ltmp1672 # Offset: 1797
    0000070b: 	leaq	-0x4(%r12), %rax
    00000710: 	movsd	DATAat0x15648(%rip), %xmm4
    00000718: 	subq	%rbp, %rax
    0000071b: 	movq	%rax, %rsi
    0000071e: 	movq	%rax, 0x10(%rsp)
    00000723: 	shrq	$0x2, %rax
    00000727: 	leaq	0x1(%rax), %rdi
    0000072b: 	movsd	%xmm4, (%rsp)
    00000730: 	movq	%rdi, %rax
    00000733: 	movq	%rdi, 0x48(%rsp)
    00000738: 	andq	$-0x4, %rdi
    0000073c: 	shrq	$0x2, %rax
    00000740: 	movq	%rdi, 0x30(%rsp)
    00000745: 	shlq	$0x4, %rax
    00000749: 	cmpq	$0x8, %rsi
    0000074d: 	leaq	(%rax,%rbp), %r14
    00000751: 	leaq	(%rbp,%rdi,4), %rax
    00000756: 	cmovbeq	%rbp, %rax
    0000075a: 	xorl	%r15d, %r15d
    0000075d: 	leaq	0x4(%rax), %rdi
    00000761: 	movq	%rax, 0x40(%rsp)
    00000766: 	addq	$0x8, %rax
    0000076a: 	movq	%rdi, 0x28(%rsp)
    0000076f: 	movq	%rax, 0x20(%rsp)
.Ltmp1677:
    00000774: 	xorl	%eax, %eax
    00000776: 	cmpq	%r12, %rbp
    00000779: 	je	.Ltmp1673 # Offset: 1913
    0000077b: 	cmpq	$0x8, 0x10(%rsp)
    00000781: 	jbe	.Ltmp1674 # Offset: 1921
    00000787: 	movq	%rbp, %rax
    0000078a: 	pxor	%xmm0, %xmm0
    0000078e: 	nop # Size: 2
.Ltmp1675:
    00000790: 	movdqu	(%rax), %xmm4
    00000794: 	addq	$0x10, %rax
    00000798: 	paddd	%xmm4, %xmm0
    0000079c: 	cmpq	%r14, %rax
    0000079f: 	jne	.Ltmp1675 # Offset: 1951
    000007a1: 	movdqa	%xmm0, %xmm1
    000007a5: 	movq	0x48(%rsp), %rsi
    000007aa: 	psrldq	$0x8, %xmm1
    000007af: 	paddd	%xmm1, %xmm0
    000007b3: 	movdqa	%xmm0, %xmm1
    000007b7: 	psrldq	$0x4, %xmm1
    000007bc: 	paddd	%xmm1, %xmm0
    000007c0: 	movd	%xmm0, %eax
    000007c4: 	cmpq	%rsi, 0x30(%rsp)
    000007c9: 	je	.Ltmp1673 # Offset: 1993
.Ltmp1953:
    000007cb: 	movq	0x40(%rsp), %rdi
    000007d0: 	addl	(%rdi), %eax
    000007d2: 	cmpq	0x28(%rsp), %r12
    000007d7: 	je	.Ltmp1673 # Offset: 2007
    000007d9: 	addl	0x4(%rdi), %eax
    000007dc: 	cmpq	0x20(%rsp), %r12
    000007e1: 	je	.Ltmp1673 # Offset: 2017
    000007e3: 	addl	0x8(%rdi), %eax
.Ltmp1673:
    000007e6: 	movsd	(%rsp), %xmm0
    000007eb: 	mulsd	init_value(%rip), %xmm0
    000007f3: 	cvttsd2si	%xmm0, %ecx
    000007f7: 	cmpl	%eax, %ecx
    000007f9: 	je	.Ltmp1676 # Offset: 2041
    000007fb: 	movq	0x2120(%rsp), %rdx
    00000803: 	leaq	DATAat0x151bf(%rip), %rsi
    0000080a: 	movl	$0x1, %edi
    0000080f: 	xorl	%eax, %eax
    00000811: 	callq	__printf_chk@PLT # Offset: 2065
    00000816: 	movl	iterations(%rip), %edx
.Ltmp1676:
    0000081c: 	addl	$0x1, %r15d
    00000820: 	cmpl	%edx, %r15d
    00000823: 	jl	.Ltmp1677 # Offset: 2083
.Ltmp1672:
    00000829: 	callq	clock@PLT # Offset: 2089
    0000082e: 	pxor	%xmm0, %xmm0
    00000832: 	movq	%r13, %rdi
    00000835: 	movq	%rax, end_time(%rip)
    0000083c: 	subq	start_time(%rip), %rax
    00000843: 	cvtsi2sd	%rax, %xmm0
    00000848: 	divsd	DATAat0x15638(%rip), %xmm0
    00000850: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2128
    00000855: 	movq	0x2120(%rsp), %rdi
    0000085d: 	cmpq	0x8(%rsp), %rdi
    00000862: 	je	.Ltmp1678 # Offset: 2146
    00000864: 	movq	0x2130(%rsp), %rax
    0000086c: 	leaq	0x1(%rax), %rsi
    00000870: 	callq	_ZdlPvm@PLT # Offset: 2160
.Ltmp1678:
    00000875: 	movq	0x18(%rsp), %rsi
    0000087a: 	leaq	DATAat0x15380(%rip), %rdx
    00000881: 	movq	%r13, %rdi
    00000884: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2180
    00000889: 	callq	clock@PLT # Offset: 2185
    0000088e: 	movl	iterations(%rip), %edx
    00000894: 	movq	%rax, start_time(%rip)
    0000089b: 	testl	%edx, %edx
    0000089d: 	jle	.Ltmp1679 # Offset: 2205
    000008a3: 	leaq	-0x4(%r12), %rax
    000008a8: 	movsd	DATAat0x15648(%rip), %xmm5
    000008b0: 	subq	%rbp, %rax
    000008b3: 	movq	%rax, %rsi
    000008b6: 	movq	%rax, 0x10(%rsp)
    000008bb: 	shrq	$0x2, %rax
    000008bf: 	leaq	0x1(%rax), %rdi
    000008c3: 	movsd	%xmm5, (%rsp)
    000008c8: 	movq	%rdi, %rax
    000008cb: 	movq	%rdi, 0x48(%rsp)
    000008d0: 	andq	$-0x4, %rdi
    000008d4: 	shrq	$0x2, %rax
    000008d8: 	movq	%rdi, 0x30(%rsp)
    000008dd: 	shlq	$0x4, %rax
    000008e1: 	cmpq	$0x8, %rsi
    000008e5: 	leaq	(%rax,%rbp), %r14
    000008e9: 	leaq	(%rbp,%rdi,4), %rax
    000008ee: 	cmovbeq	%rbp, %rax
    000008f2: 	xorl	%r15d, %r15d
    000008f5: 	leaq	0x4(%rax), %rdi
    000008f9: 	movq	%rax, 0x40(%rsp)
    000008fe: 	addq	$0x8, %rax
    00000902: 	movq	%rdi, 0x28(%rsp)
    00000907: 	movq	%rax, 0x20(%rsp)
.Ltmp1685:
    0000090c: 	cmpq	%r12, %rbp
    0000090f: 	je	.Ltmp1680 # Offset: 2319
    00000915: 	cmpq	$0x8, 0x10(%rsp)
    0000091b: 	jbe	.Ltmp1681 # Offset: 2331
    00000921: 	movq	%rbp, %rax
    00000924: 	pxor	%xmm0, %xmm0
    00000928: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1682:
    00000930: 	movdqu	(%rax), %xmm5
    00000934: 	addq	$0x10, %rax
    00000938: 	paddd	%xmm5, %xmm0
    0000093c: 	cmpq	%r14, %rax
    0000093f: 	jne	.Ltmp1682 # Offset: 2367
    00000941: 	movdqa	%xmm0, %xmm1
    00000945: 	movq	0x48(%rsp), %rsi
    0000094a: 	psrldq	$0x8, %xmm1
    0000094f: 	paddd	%xmm1, %xmm0
    00000953: 	movdqa	%xmm0, %xmm1
    00000957: 	psrldq	$0x4, %xmm1
    0000095c: 	paddd	%xmm1, %xmm0
    00000960: 	movd	%xmm0, %eax
    00000964: 	cmpq	%rsi, 0x30(%rsp)
    00000969: 	je	.Ltmp1683 # Offset: 2409
.Ltmp1954:
    0000096b: 	movq	0x40(%rsp), %rdi
    00000970: 	addl	(%rdi), %eax
    00000972: 	cmpq	0x28(%rsp), %r12
    00000977: 	je	.Ltmp1683 # Offset: 2423
    00000979: 	addl	0x4(%rdi), %eax
    0000097c: 	cmpq	0x20(%rsp), %r12
    00000981: 	je	.Ltmp1683 # Offset: 2433
    00000983: 	addl	0x8(%rdi), %eax
.Ltmp1683:
    00000986: 	movsd	(%rsp), %xmm0
    0000098b: 	mulsd	init_value(%rip), %xmm0
    00000993: 	cvttsd2si	%xmm0, %ecx
    00000997: 	cmpl	%eax, %ecx
    00000999: 	je	.Ltmp1684 # Offset: 2457
    0000099b: 	movq	0x2120(%rsp), %rdx
    000009a3: 	leaq	DATAat0x151bf(%rip), %rsi
    000009aa: 	movl	$0x1, %edi
    000009af: 	xorl	%eax, %eax
    000009b1: 	callq	__printf_chk@PLT # Offset: 2481
    000009b6: 	movl	iterations(%rip), %edx
.Ltmp1684:
    000009bc: 	addl	$0x1, %r15d
    000009c0: 	cmpl	%edx, %r15d
    000009c3: 	jl	.Ltmp1685 # Offset: 2499
.Ltmp1679:
    000009c9: 	callq	clock@PLT # Offset: 2505
    000009ce: 	pxor	%xmm0, %xmm0
    000009d2: 	movq	%r13, %rdi
    000009d5: 	movq	%rax, end_time(%rip)
    000009dc: 	subq	start_time(%rip), %rax
    000009e3: 	cvtsi2sd	%rax, %xmm0
    000009e8: 	divsd	DATAat0x15638(%rip), %xmm0
    000009f0: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2544
    000009f5: 	movq	0x2120(%rsp), %rdi
    000009fd: 	cmpq	0x8(%rsp), %rdi
    00000a02: 	je	.Ltmp1686 # Offset: 2562
    00000a04: 	movq	0x2130(%rsp), %rax
    00000a0c: 	leaq	0x1(%rax), %rsi
    00000a10: 	callq	_ZdlPvm@PLT # Offset: 2576
.Ltmp1686:
    00000a15: 	movq	0x18(%rsp), %rsi
    00000a1a: 	leaq	0x160(%rsp), %rdi
    00000a22: 	leaq	DATAat0x1523d(%rip), %rdx
    00000a29: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2601
    00000a2e: 	movl	iterations(%rip), %edx
    00000a34: 	movl	$0x1, %r8d
    00000a3a: 	movl	$0x1, %ecx
    00000a3f: 	movq	0x160(%rsp), %rdi
    00000a47: 	movl	$0x7d0, %esi
    00000a4c: 	callq	_Z9summarizePKciiii # Offset: 2636
    00000a51: 	movslq	iterations(%rip), %rax
    00000a58: 	movq	0x50(%rsp), %rdi
    00000a5d: 	pxor	%xmm0, %xmm0
    00000a61: 	movl	$0x7d0, %esi
    00000a66: 	movq	$0x0, 0x130(%rsp)
    00000a72: 	movq	%rax, %rdx
    00000a75: 	imulq	$0x10624dd3, %rax, %rax
    00000a7c: 	movaps	%xmm0, 0x120(%rsp)
    00000a84: 	sarl	$0x1f, %edx
    00000a87: 	sarq	$0x27, %rax
    00000a8b: 	subl	%edx, %eax
    00000a8d: 	movl	%eax, iterations(%rip)
    00000a93: 	callq	_ZNSt6vectorIiSaIiEE17_M_default_appendEm # Offset: 2707
    00000a98: 	movq	%r13, %rdx
    00000a9b: 	leaq	0x4060(%rsp), %rdi
    00000aa3: 	movabsq	$0x5851f42d4c957f2d, %rsi
    00000aad: 	movabsq	$0x14057b7ef767814f, %rcx
.Ltmp1687:
    00000ab7: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000abe: 	addq	$0x4, %rdx
    00000ac2: 	imulq	%rsi, %rax
    00000ac6: 	addq	%rcx, %rax
    00000ac9: 	movq	%rax, %r8
    00000acc: 	movq	%rax, %r9
    00000acf: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000ad6: 	shrq	$0x14, %r8
    00000ada: 	shlq	$0x17, %r9
    00000ade: 	xorq	%r9, %r8
    00000ae1: 	xorq	%r8, %rax
    00000ae4: 	sarq	$0x3, %rax
    00000ae8: 	movl	%eax, -0x4(%rdx)
    00000aeb: 	cmpq	%rdi, %rdx
    00000aee: 	jne	.Ltmp1687 # Offset: 2798
    00000af0: 	movq	(%r13), %rax
    00000af4: 	movq	0x120(%rsp), %r14
    00000afc: 	movq	%r13, %rsi
    00000aff: 	leaq	DATAat0x153b0(%rip), %rdx
    00000b06: 	movq	%rax, (%r14)
    00000b09: 	movq	0x4058(%rsp), %rax
    00000b11: 	leaq	0x8(%r14), %rdi
    00000b15: 	andq	$-0x8, %rdi
    00000b19: 	movq	%rax, 0x1f38(%r14)
    00000b20: 	movq	%r14, %rax
    00000b23: 	subq	%rdi, %rax
    00000b26: 	leal	0x1f40(%rax), %ecx
    00000b2c: 	subq	%rax, %rsi
    00000b2f: 	shrl	$0x3, %ecx
    00000b32: 	rep		movsq	(%rsi), %es:(%rdi)
    00000b35: 	movq	0x128(%rsp), %rax
    00000b3d: 	movq	0x18(%rsp), %rsi
    00000b42: 	movq	%rax, (%rsp)
    00000b46: 	leaq	0x1c0(%rsp), %rax
    00000b4e: 	movq	%rax, %rdi
    00000b51: 	movq	%rax, 0x10(%rsp)
    00000b56: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2902
    00000b5b: 	callq	clock@PLT # Offset: 2907
    00000b60: 	movl	iterations(%rip), %r8d
    00000b67: 	xorl	%r15d, %r15d
    00000b6a: 	movq	%rax, start_time(%rip)
    00000b71: 	leaq	0x1e4(%rsp), %rax
    00000b79: 	movq	%rax, 0x20(%rsp)
    00000b7e: 	testl	%r8d, %r8d
    00000b81: 	jle	.Ltmp1688 # Offset: 2945
.Ltmp1694:
    00000b83: 	movl	$0x3e8, %ecx
    00000b88: 	movq	%rbx, %rdi
    00000b8b: 	movq	%r13, %rsi
    00000b8e: 	rep		movsq	(%rsi), %es:(%rdi)
    00000b91: 	movq	0x20(%rsp), %rdi
    00000b96: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1691:
    00000ba0: 	movl	(%rdi), %esi
    00000ba2: 	movq	%rdi, %rax
    00000ba5: 	nopl	(%rax) # Size: 3
.Ltmp1690:
    00000ba8: 	movq	%rax, %rdx
    00000bab: 	leaq	-0x4(%rax), %rax
    00000baf: 	movl	-0x4(%rdx), %ecx
    00000bb2: 	cmpl	%ecx, %esi
    00000bb4: 	jge	.Ltmp1689 # Offset: 2996
    00000bb6: 	movl	%ecx, 0x4(%rax)
    00000bb9: 	cmpq	%rbx, %rax
    00000bbc: 	jne	.Ltmp1690 # Offset: 3004
    00000bbe: 	movq	%rbx, %rdx
.Ltmp1689:
    00000bc1: 	addq	$0x4, %rdi
    00000bc5: 	movl	%esi, (%rdx)
    00000bc7: 	cmpq	%r13, %rdi
    00000bca: 	jne	.Ltmp1691 # Offset: 3018
    00000bcc: 	movl	0x1e0(%rsp), %edx
    00000bd3: 	movq	0x20(%rsp), %rax
    00000bd8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1693:
    00000be0: 	addq	$0x4, %rax
    00000be4: 	movl	%edx, %ecx
    00000be6: 	movl	-0x4(%rax), %edx
    00000be9: 	cmpl	%ecx, %edx
    00000beb: 	jl	.Ltmp1692 # Offset: 3051
    00000bf1: 	cmpq	%r13, %rax
    00000bf4: 	jne	.Ltmp1693 # Offset: 3060
    00000bf6: 	addl	$0x1, %r15d
    00000bfa: 	cmpl	%r8d, %r15d
    00000bfd: 	jl	.Ltmp1694 # Offset: 3069
.Ltmp1688:
    00000bff: 	callq	clock@PLT # Offset: 3071
    00000c04: 	movq	0x10(%rsp), %rdi
    00000c09: 	pxor	%xmm0, %xmm0
    00000c0d: 	movq	%rax, end_time(%rip)
    00000c14: 	subq	start_time(%rip), %rax
    00000c1b: 	cvtsi2sd	%rax, %xmm0
    00000c20: 	divsd	DATAat0x15638(%rip), %xmm0
    00000c28: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3112
    00000c2d: 	movq	0x1c0(%rsp), %rdi
    00000c35: 	leaq	0x1d0(%rsp), %rax
    00000c3d: 	movq	%rax, 0x8(%rsp)
    00000c42: 	cmpq	%rax, %rdi
    00000c45: 	je	.Ltmp1695 # Offset: 3141
    00000c47: 	movq	0x1d0(%rsp), %rax
    00000c4f: 	leaq	0x1(%rax), %rsi
    00000c53: 	callq	_ZdlPvm@PLT # Offset: 3155
.Ltmp1695:
    00000c58: 	movq	0x18(%rsp), %rsi
    00000c5d: 	movq	0x10(%rsp), %rdi
    00000c62: 	leaq	DATAat0x153d0(%rip), %rdx
    00000c69: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3177
    00000c6e: 	callq	clock@PLT # Offset: 3182
    00000c73: 	movq	%rax, start_time(%rip)
    00000c7a: 	movl	iterations(%rip), %eax
    00000c80: 	testl	%eax, %eax
    00000c82: 	jle	.Ltmp1696 # Offset: 3202
    00000c88: 	leaq	0x4(%rbp), %rax
    00000c8c: 	leaq	0x4(%r14), %rcx
    00000c90: 	movq	%rbp, %rdx
    00000c93: 	movl	$0x0, 0x20(%rsp)
    00000c9b: 	movq	%rax, 0x28(%rsp)
    00000ca0: 	movq	(%rsp), %rax
    00000ca4: 	subq	%rcx, %rdx
    00000ca7: 	subq	$0x4, %rax
    00000cab: 	subq	%r14, %rax
    00000cae: 	cmpq	$0x8, %rdx
    00000cb2: 	seta	%cl
    00000cb5: 	cmpq	$0x8, %rax
    00000cb9: 	seta	%dl
    00000cbc: 	shrq	$0x2, %rax
    00000cc0: 	leaq	0x1(%rax), %rdi
    00000cc4: 	andl	%edx, %ecx
    00000cc6: 	movq	%rdi, %rax
    00000cc9: 	movq	%rdi, 0x48(%rsp)
    00000cce: 	andq	$-0x4, %rdi
    00000cd2: 	shrq	$0x2, %rax
    00000cd6: 	movq	%rdi, 0x40(%rsp)
    00000cdb: 	shlq	$0x4, %rax
    00000cdf: 	movb	%cl, 0x30(%rsp)
    00000ce3: 	movq	%rax, %r15
    00000ce6: 	leaq	(,%rdi,4), %rax
    00000cee: 	leaq	(%r14,%rax), %rdi
    00000cf2: 	addq	%rbp, %rax
    00000cf5: 	movq	%rax, 0x50(%rsp)
    00000cfa: 	movq	%rdi, %rax
    00000cfd: 	movq	%rdi, 0x58(%rsp)
    00000d02: 	addq	$0x8, %rax
    00000d06: 	leaq	0x4(%rdi), %rdi
    00000d0a: 	movq	%rdi, 0x68(%rsp)
    00000d0f: 	movq	%rax, 0x60(%rsp)
.Ltmp1708:
    00000d14: 	cmpq	%r14, (%rsp)
    00000d18: 	je	.Ltmp1697 # Offset: 3352
    00000d1a: 	cmpb	$0x0, 0x30(%rsp)
    00000d1f: 	je	.Ltmp1698 # Offset: 3359
    00000d25: 	xorl	%eax, %eax
    00000d27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1699:
    00000d30: 	movdqu	(%r14,%rax), %xmm6
    00000d36: 	movups	%xmm6, (%rbp,%rax)
    00000d3b: 	addq	$0x10, %rax
    00000d3f: 	cmpq	%r15, %rax
    00000d42: 	jne	.Ltmp1699 # Offset: 3394
    00000d44: 	movq	0x48(%rsp), %rdi
    00000d49: 	cmpq	%rdi, 0x40(%rsp)
    00000d4e: 	je	.Ltmp1697 # Offset: 3406
    00000d50: 	movq	0x58(%rsp), %rdi
    00000d55: 	movq	0x50(%rsp), %rsi
    00000d5a: 	movq	(%rsp), %rcx
    00000d5e: 	movl	(%rdi), %eax
    00000d60: 	movl	%eax, (%rsi)
    00000d62: 	movq	0x68(%rsp), %rax
    00000d67: 	cmpq	%rax, %rcx
    00000d6a: 	je	.Ltmp1697 # Offset: 3434
    00000d6c: 	movl	0x4(%rdi), %eax
    00000d6f: 	movl	%eax, 0x4(%rsi)
    00000d72: 	movq	0x60(%rsp), %rax
    00000d77: 	cmpq	%rax, %rcx
    00000d7a: 	je	.Ltmp1697 # Offset: 3450
    00000d7c: 	movl	0x8(%rdi), %eax
    00000d7f: 	movl	%eax, 0x8(%rsi)
.Ltmp1697:
    00000d82: 	cmpq	%r12, %rbp
    00000d85: 	je	.Ltmp1700 # Offset: 3461
    00000d87: 	movq	0x28(%rsp), %rax
    00000d8c: 	cmpq	%rax, %r12
    00000d8f: 	je	.Ltmp1700 # Offset: 3471
    00000d91: 	movq	%rax, %rdi
    00000d94: 	nopl	(%rax) # Size: 4
.Ltmp1704:
    00000d98: 	movl	(%rdi), %esi
    00000d9a: 	movq	%rdi, %rax
    00000d9d: 	cmpq	%rdi, %rbp
    00000da0: 	jne	.Ltmp1701 # Offset: 3488
    00000da2: 	jmp	.Ltmp1702 # Offset: 3490
    00000da7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1703:
    00000db0: 	movl	%ecx, 0x4(%rax)
    00000db3: 	cmpq	%rax, %rbp
    00000db6: 	je	.Ltmp1702 # Offset: 3510
.Ltmp1701:
    00000dbc: 	movq	%rax, %rdx
    00000dbf: 	leaq	-0x4(%rax), %rax
    00000dc3: 	movl	-0x4(%rdx), %ecx
    00000dc6: 	cmpl	%ecx, %esi
    00000dc8: 	jl	.Ltmp1703 # Offset: 3528
    00000dca: 	addq	$0x4, %rdi
    00000dce: 	movl	%esi, (%rdx)
    00000dd0: 	cmpq	%r12, %rdi
    00000dd3: 	jne	.Ltmp1704 # Offset: 3539
.Ltmp1700:
    00000dd5: 	movq	0x28(%rsp), %rax
    00000dda: 	jmp	.Ltmp1705 # Offset: 3546
    00000ddc: 	nopl	(%rax) # Size: 4
.Ltmp1707:
    00000de0: 	addq	$0x4, %rax
    00000de4: 	movl	-0x8(%rax), %edi
    00000de7: 	cmpl	%edi, (%rdx)
    00000de9: 	jl	.Ltmp1706 # Offset: 3561
.Ltmp1705:
    00000def: 	movq	%rax, %rdx
    00000df2: 	cmpq	%rax, %r12
    00000df5: 	jne	.Ltmp1707 # Offset: 3573
.Ltmp1880:
    00000df7: 	addl	$0x1, 0x20(%rsp)
    00000dfc: 	movl	0x20(%rsp), %eax
    00000e00: 	cmpl	iterations(%rip), %eax
    00000e06: 	jl	.Ltmp1708 # Offset: 3590
.Ltmp1696:
    00000e0c: 	callq	clock@PLT # Offset: 3596
    00000e11: 	movq	0x10(%rsp), %rdi
    00000e16: 	pxor	%xmm0, %xmm0
    00000e1a: 	movq	%rax, end_time(%rip)
    00000e21: 	subq	start_time(%rip), %rax
    00000e28: 	cvtsi2sd	%rax, %xmm0
    00000e2d: 	divsd	DATAat0x15638(%rip), %xmm0
    00000e35: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3637
    00000e3a: 	movq	0x1c0(%rsp), %rdi
    00000e42: 	cmpq	0x8(%rsp), %rdi
    00000e47: 	je	.Ltmp1709 # Offset: 3655
    00000e49: 	movq	0x1d0(%rsp), %rax
    00000e51: 	leaq	0x1(%rax), %rsi
    00000e55: 	callq	_ZdlPvm@PLT # Offset: 3669
.Ltmp1709:
    00000e5a: 	movq	0x18(%rsp), %rsi
    00000e5f: 	movq	0x10(%rsp), %rdi
    00000e64: 	leaq	DATAat0x153f0(%rip), %rdx
    00000e6b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3691
    00000e70: 	callq	clock@PLT # Offset: 3696
    00000e75: 	xorl	%r15d, %r15d
    00000e78: 	movq	%rax, start_time(%rip)
    00000e7f: 	leaq	0x1e4(%rsp), %rax
    00000e87: 	movq	%rax, 0x20(%rsp)
    00000e8c: 	movl	iterations(%rip), %eax
    00000e92: 	testl	%eax, %eax
    00000e94: 	jle	.Ltmp1710 # Offset: 3732
.Ltmp1716:
    00000e96: 	movl	$0x3e8, %ecx
    00000e9b: 	movq	%rbx, %rdi
    00000e9e: 	movq	%r13, %rsi
    00000ea1: 	rep		movsq	(%rsi), %es:(%rdi)
    00000ea4: 	movq	0x20(%rsp), %rdi
    00000ea9: 	movq	%rdi, %rsi
    00000eac: 	nopl	(%rax) # Size: 4
.Ltmp1713:
    00000eb0: 	movl	(%rdi), %ecx
    00000eb2: 	movq	%rdi, %rax
    00000eb5: 	nopl	(%rax) # Size: 3
.Ltmp1712:
    00000eb8: 	movl	-0x4(%rax), %edx
    00000ebb: 	cmpl	%edx, %ecx
    00000ebd: 	jge	.Ltmp1711 # Offset: 3773
    00000ebf: 	movl	%edx, (%rax)
    00000ec1: 	subq	$0x4, %rax
    00000ec5: 	cmpq	%rax, %rbx
    00000ec8: 	jne	.Ltmp1712 # Offset: 3784
.Ltmp1711:
    00000eca: 	addq	$0x4, %rdi
    00000ece: 	movl	%ecx, (%rax)
    00000ed0: 	cmpq	%r13, %rdi
    00000ed3: 	jne	.Ltmp1713 # Offset: 3795
    00000ed5: 	movl	0x1e0(%rsp), %eax
    00000edc: 	nopl	(%rax) # Size: 4
.Ltmp1715:
    00000ee0: 	movl	%eax, %edx
    00000ee2: 	movl	(%rsi), %eax
    00000ee4: 	cmpl	%edx, %eax
    00000ee6: 	jl	.Ltmp1714 # Offset: 3814
    00000eec: 	addq	$0x4, %rsi
    00000ef0: 	cmpq	%r13, %rsi
    00000ef3: 	jne	.Ltmp1715 # Offset: 3827
    00000ef5: 	addl	$0x1, %r15d
    00000ef9: 	cmpl	iterations(%rip), %r15d
    00000f00: 	jl	.Ltmp1716 # Offset: 3840
.Ltmp1710:
    00000f02: 	callq	clock@PLT # Offset: 3842
    00000f07: 	movq	0x10(%rsp), %rdi
    00000f0c: 	pxor	%xmm0, %xmm0
    00000f10: 	movq	%rax, end_time(%rip)
    00000f17: 	subq	start_time(%rip), %rax
    00000f1e: 	cvtsi2sd	%rax, %xmm0
    00000f23: 	divsd	DATAat0x15638(%rip), %xmm0
    00000f2b: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3883
    00000f30: 	movq	0x1c0(%rsp), %rdi
    00000f38: 	cmpq	0x8(%rsp), %rdi
    00000f3d: 	je	.Ltmp1717 # Offset: 3901
    00000f3f: 	movq	0x1d0(%rsp), %rax
    00000f47: 	leaq	0x1(%rax), %rsi
    00000f4b: 	callq	_ZdlPvm@PLT # Offset: 3915
.Ltmp1717:
    00000f50: 	movq	0x18(%rsp), %rsi
    00000f55: 	movq	0x10(%rsp), %rdi
    00000f5a: 	leaq	DATAat0x15418(%rip), %rdx
    00000f61: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3937
    00000f66: 	movq	(%rsp), %rax
    00000f6a: 	leaq	0xf0(%rsp), %r15
    00000f72: 	movq	0x10(%rsp), %r8
    00000f77: 	leaq	0xe0(%rsp), %rdx
    00000f7f: 	leaq	0xc0(%rsp), %rdi
    00000f87: 	movq	%r15, %rcx
    00000f8a: 	movq	%r12, 0xf8(%rsp)
    00000f92: 	movq	%rax, 0xd8(%rsp)
    00000f9a: 	leaq	0xd0(%rsp), %rax
    00000fa2: 	movq	%rax, %rsi
    00000fa5: 	movq	%rbp, 0xe8(%rsp)
    00000fad: 	movq	%r14, 0xc8(%rsp)
    00000fb5: 	movq	%rdx, 0x28(%rsp)
    00000fba: 	movq	%rax, 0x40(%rsp)
    00000fbf: 	movq	%rdi, 0x48(%rsp)
    00000fc4: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 4036
    00000fc9: 	movq	0x1c0(%rsp), %rdi
    00000fd1: 	cmpq	0x8(%rsp), %rdi
    00000fd6: 	je	.Ltmp1718 # Offset: 4054
    00000fd8: 	movq	0x1d0(%rsp), %rax
    00000fe0: 	leaq	0x1(%rax), %rsi
    00000fe4: 	callq	_ZdlPvm@PLT # Offset: 4068
.Ltmp1718:
    00000fe9: 	movq	0x18(%rsp), %rsi
    00000fee: 	movq	0x10(%rsp), %rdi
    00000ff3: 	leaq	DATAat0x15448(%rip), %rdx
    00000ffa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4090
    00000fff: 	movq	(%rsp), %rax
    00001003: 	movq	0x10(%rsp), %r8
    00001008: 	movq	%r15, %rcx
    0000100b: 	movq	%r12, 0xf8(%rsp)
    00001013: 	movq	0x28(%rsp), %rdx
    00001018: 	movq	0x40(%rsp), %rsi
    0000101d: 	movq	%rbp, 0xe8(%rsp)
    00001025: 	movq	0x48(%rsp), %rdi
    0000102a: 	movq	%rax, 0xd8(%rsp)
    00001032: 	movq	%r14, 0xc8(%rsp)
    0000103a: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 4154
    0000103f: 	movq	0x1c0(%rsp), %rdi
    00001047: 	cmpq	0x8(%rsp), %rdi
    0000104c: 	je	.Ltmp1719 # Offset: 4172
    0000104e: 	movq	0x1d0(%rsp), %rax
    00001056: 	leaq	0x1(%rax), %rsi
    0000105a: 	callq	_ZdlPvm@PLT # Offset: 4186
.Ltmp1719:
    0000105f: 	movq	0x18(%rsp), %rsi
    00001064: 	movq	0x10(%rsp), %rdi
    00001069: 	leaq	DATAat0x15478(%rip), %rdx
    00001070: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4208
    00001075: 	callq	clock@PLT # Offset: 4213
    0000107a: 	movl	iterations(%rip), %r11d
    00001081: 	movq	%rax, start_time(%rip)
    00001088: 	testl	%r11d, %r11d
    0000108b: 	jle	.Ltmp1720 # Offset: 4235
    00001091: 	leaq	0x4(%rbp), %rax
    00001095: 	leaq	0x4(%r14), %rcx
    00001099: 	movq	%rbp, %rdx
    0000109c: 	movl	$0x0, 0x20(%rsp)
    000010a4: 	movq	%rax, 0x30(%rsp)
    000010a9: 	movq	(%rsp), %rax
    000010ad: 	subq	%rcx, %rdx
    000010b0: 	subq	$0x4, %rax
    000010b4: 	subq	%r14, %rax
    000010b7: 	cmpq	$0x8, %rdx
    000010bb: 	seta	%cl
    000010be: 	cmpq	$0x8, %rax
    000010c2: 	seta	%dl
    000010c5: 	shrq	$0x2, %rax
    000010c9: 	leaq	0x1(%rax), %rdi
    000010cd: 	andl	%edx, %ecx
    000010cf: 	movq	%rdi, %rax
    000010d2: 	movq	%rdi, 0x68(%rsp)
    000010d7: 	andq	$-0x4, %rdi
    000010db: 	shrq	$0x2, %rax
    000010df: 	movq	%rdi, 0x60(%rsp)
    000010e4: 	shlq	$0x4, %rax
    000010e8: 	movb	%cl, 0x50(%rsp)
    000010ec: 	movq	%rax, 0x58(%rsp)
    000010f1: 	leaq	(,%rdi,4), %rax
    000010f9: 	leaq	(%r14,%rax), %rdi
    000010fd: 	addq	%rbp, %rax
    00001100: 	movq	%rax, 0x78(%rsp)
    00001105: 	movq	%rdi, %rax
    00001108: 	movq	%rdi, 0x80(%rsp)
    00001110: 	addq	$0x8, %rax
    00001114: 	leaq	0x4(%rdi), %rdi
    00001118: 	movq	%rdi, 0x70(%rsp)
    0000111d: 	movq	%rax, 0x88(%rsp)
.Ltmp1732:
    00001125: 	cmpq	%r14, (%rsp)
    00001129: 	je	.Ltmp1721 # Offset: 4393
    0000112b: 	cmpb	$0x0, 0x50(%rsp)
    00001130: 	je	.Ltmp1722 # Offset: 4400
    00001136: 	movq	0x58(%rsp), %rdx
    0000113b: 	xorl	%eax, %eax
    0000113d: 	nopl	(%rax) # Size: 3
.Ltmp1723:
    00001140: 	movdqu	(%r14,%rax), %xmm7
    00001146: 	movups	%xmm7, (%rbp,%rax)
    0000114b: 	addq	$0x10, %rax
    0000114f: 	cmpq	%rax, %rdx
    00001152: 	jne	.Ltmp1723 # Offset: 4434
    00001154: 	movq	0x68(%rsp), %rdi
    00001159: 	cmpq	%rdi, 0x60(%rsp)
    0000115e: 	je	.Ltmp1721 # Offset: 4446
    00001160: 	movq	0x80(%rsp), %rdi
    00001168: 	movq	0x78(%rsp), %rsi
    0000116d: 	movq	(%rsp), %rcx
    00001171: 	movl	(%rdi), %eax
    00001173: 	movl	%eax, (%rsi)
    00001175: 	movq	0x70(%rsp), %rax
    0000117a: 	cmpq	%rax, %rcx
    0000117d: 	je	.Ltmp1721 # Offset: 4477
    0000117f: 	movl	0x4(%rdi), %eax
    00001182: 	movl	%eax, 0x4(%rsi)
    00001185: 	movq	0x88(%rsp), %rax
    0000118d: 	cmpq	%rax, %rcx
    00001190: 	je	.Ltmp1721 # Offset: 4496
    00001192: 	movl	0x8(%rdi), %eax
    00001195: 	movl	%eax, 0x8(%rsi)
.Ltmp1721:
    00001198: 	cmpq	%r12, %rbp
    0000119b: 	je	.Ltmp1724 # Offset: 4507
    0000119d: 	movq	0x30(%rsp), %rax
    000011a2: 	cmpq	%rax, %r12
    000011a5: 	je	.Ltmp1724 # Offset: 4517
    000011a7: 	movq	%rax, %rdi
    000011aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1728:
    000011b0: 	movl	(%rdi), %esi
    000011b2: 	movq	%rdi, %rax
    000011b5: 	cmpq	%rdi, %rbp
    000011b8: 	jne	.Ltmp1725 # Offset: 4536
    000011ba: 	jmp	.Ltmp1726 # Offset: 4538
    000011bf: 	nop # Size: 1
.Ltmp1727:
    000011c0: 	movl	%ecx, 0x4(%rax)
    000011c3: 	cmpq	%rax, %rbp
    000011c6: 	je	.Ltmp1726 # Offset: 4550
.Ltmp1725:
    000011cc: 	movq	%rax, %rdx
    000011cf: 	leaq	-0x4(%rax), %rax
    000011d3: 	movl	-0x4(%rdx), %ecx
    000011d6: 	cmpl	%ecx, %esi
    000011d8: 	jl	.Ltmp1727 # Offset: 4568
    000011da: 	addq	$0x4, %rdi
    000011de: 	movl	%esi, (%rdx)
    000011e0: 	cmpq	%rdi, %r12
    000011e3: 	jne	.Ltmp1728 # Offset: 4579
.Ltmp1724:
    000011e5: 	movq	0x30(%rsp), %rax
    000011ea: 	jmp	.Ltmp1729 # Offset: 4586
    000011ec: 	nopl	(%rax) # Size: 4
.Ltmp1731:
    000011f0: 	addq	$0x4, %rax
    000011f4: 	movl	-0x8(%rax), %edi
    000011f7: 	cmpl	%edi, (%rdx)
    000011f9: 	jl	.Ltmp1730 # Offset: 4601
.Ltmp1729:
    000011ff: 	movq	%rax, %rdx
    00001202: 	cmpq	%r12, %rax
    00001205: 	jne	.Ltmp1731 # Offset: 4613
.Ltmp1879:
    00001207: 	addl	$0x1, 0x20(%rsp)
    0000120c: 	movl	0x20(%rsp), %eax
    00001210: 	cmpl	iterations(%rip), %eax
    00001216: 	jl	.Ltmp1732 # Offset: 4630
.Ltmp1720:
    0000121c: 	callq	clock@PLT # Offset: 4636
    00001221: 	movq	0x10(%rsp), %rdi
    00001226: 	pxor	%xmm0, %xmm0
    0000122a: 	movq	%rax, end_time(%rip)
    00001231: 	subq	start_time(%rip), %rax
    00001238: 	cvtsi2sd	%rax, %xmm0
    0000123d: 	divsd	DATAat0x15638(%rip), %xmm0
    00001245: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4677
    0000124a: 	movq	0x1c0(%rsp), %rdi
    00001252: 	cmpq	0x8(%rsp), %rdi
    00001257: 	je	.Ltmp1733 # Offset: 4695
    00001259: 	movq	0x1d0(%rsp), %rax
    00001261: 	leaq	0x1(%rax), %rsi
    00001265: 	callq	_ZdlPvm@PLT # Offset: 4709
.Ltmp1733:
    0000126a: 	movq	0x18(%rsp), %rsi
    0000126f: 	leaq	0x180(%rsp), %rdi
    00001277: 	leaq	DATAat0x15250(%rip), %rdx
    0000127e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4734
    00001283: 	movl	iterations(%rip), %edx
    00001289: 	movl	$0x1, %r8d
    0000128f: 	movl	$0x1, %ecx
    00001294: 	movq	0x180(%rsp), %rdi
    0000129c: 	movl	$0x7d0, %esi
    000012a1: 	callq	_Z9summarizePKciiii # Offset: 4769
    000012a6: 	movq	0x18(%rsp), %rsi
    000012ab: 	movq	0x10(%rsp), %rdi
    000012b0: 	leaq	DATAat0x15267(%rip), %rdx
    000012b7: 	shll	$0x3, iterations(%rip)
    000012be: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4798
    000012c3: 	callq	clock@PLT # Offset: 4803
    000012c8: 	movl	iterations(%rip), %r10d
    000012cf: 	movl	$0x0, 0x30(%rsp)
    000012d7: 	movq	%rax, start_time(%rip)
    000012de: 	leaq	0x1e4(%rsp), %rax
    000012e6: 	movq	%rax, 0x20(%rsp)
    000012eb: 	leaq	0x1e0(%rsp), %rax
    000012f3: 	movq	%rax, 0x58(%rsp)
    000012f8: 	testl	%r10d, %r10d
    000012fb: 	jle	.Ltmp1734 # Offset: 4859
.Ltmp1744:
    00001301: 	movq	%rbx, %rdi
    00001304: 	movl	$0x3e8, %ecx
    00001309: 	movq	%r13, %rsi
    0000130c: 	movq	0x58(%rsp), %r9
    00001311: 	rep		movsq	(%rsi), %es:(%rdi)
    00001314: 	movq	%r13, %rbx
    00001317: 	movq	%r9, 0x50(%rsp)
.Ltmp1741:
    0000131c: 	movl	(%r9), %esi
    0000131f: 	movq	%r9, %rax
    00001322: 	movq	%rbx, %r13
    00001325: 	nopl	(%rax) # Size: 3
.Ltmp1739:
    00001328: 	movl	-0x4(%r13), %edi
    0000132c: 	leaq	-0x4(%r13), %rcx
    00001330: 	cmpl	%edi, %esi
    00001332: 	jl	.Ltmp1735 # Offset: 4914
    00001334: 	cmpq	%rax, %rcx
    00001337: 	jbe	.Ltmp1736 # Offset: 4919
    00001339: 	movl	(%rax), %edx
    0000133b: 	cmpl	%esi, %edx
    0000133d: 	jge	.Ltmp1737 # Offset: 4925
    0000133f: 	nop # Size: 1
.Ltmp1738:
    00001340: 	movl	0x4(%rax), %edx
    00001343: 	addq	$0x4, %rax
    00001347: 	cmpl	%edx, %esi
    00001349: 	jg	.Ltmp1738 # Offset: 4937
    0000134b: 	cmpq	%rax, %rcx
    0000134e: 	jbe	.Ltmp1736 # Offset: 4942
.Ltmp1737:
    00001350: 	movl	%edx, (%rcx)
    00001352: 	movl	%edi, (%rax)
.Ltmp1735:
    00001354: 	movq	%rcx, %r13
    00001357: 	jmp	.Ltmp1739 # Offset: 4951
    00001359: 	nopl	(%rax) # Size: 7
.Ltmp1736:
    00001360: 	movq	%r13, %rsi
    00001363: 	movq	%r9, %rdi
    00001366: 	callq	_ZN9benchmark9quicksortIPiEEvT_S2_ # Offset: 4966
    0000136b: 	movq	%rbx, %rax
    0000136e: 	subq	%r13, %rax
    00001371: 	cmpq	$0x4, %rax
    00001375: 	jle	.Ltmp1740 # Offset: 4981
    00001377: 	movq	%r13, %r9
    0000137a: 	jmp	.Ltmp1741 # Offset: 4986
    0000137c: 	nopl	(%rax) # Size: 4
.Ltmp1726:
    00001380: 	movq	%rbp, %rdx
    00001383: 	addq	$0x4, %rdi
    00001387: 	movl	%esi, (%rdx)
    00001389: 	cmpq	%rdi, %r12
    0000138c: 	jne	.Ltmp1728 # Offset: 5004
    00001392: 	jmp	.Ltmp1724 # Offset: 5010
    00001397: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1702:
    000013a0: 	movq	%rbp, %rdx
    000013a3: 	addq	$0x4, %rdi
    000013a7: 	movl	%esi, (%rdx)
    000013a9: 	cmpq	%r12, %rdi
    000013ac: 	jne	.Ltmp1704 # Offset: 5036
    000013b2: 	jmp	.Ltmp1700 # Offset: 5042
.Ltmp1740:
    000013b7: 	movq	%rbx, %r13
    000013ba: 	movl	0x1e0(%rsp), %edx
    000013c1: 	movq	0x50(%rsp), %rbx
    000013c6: 	movq	0x20(%rsp), %rax
    000013cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1743:
    000013d0: 	addq	$0x4, %rax
    000013d4: 	movl	%edx, %ecx
    000013d6: 	movl	-0x4(%rax), %edx
    000013d9: 	cmpl	%ecx, %edx
    000013db: 	jl	.Ltmp1742 # Offset: 5083
    000013e1: 	cmpq	%r13, %rax
    000013e4: 	jne	.Ltmp1743 # Offset: 5092
.Ltmp1878:
    000013e6: 	addl	$0x1, 0x30(%rsp)
    000013eb: 	movl	0x30(%rsp), %eax
    000013ef: 	cmpl	iterations(%rip), %eax
    000013f5: 	jl	.Ltmp1744 # Offset: 5109
.Ltmp1734:
    000013fb: 	callq	clock@PLT # Offset: 5115
    00001400: 	movq	0x10(%rsp), %rdi
    00001405: 	pxor	%xmm0, %xmm0
    00001409: 	movq	%rax, end_time(%rip)
    00001410: 	subq	start_time(%rip), %rax
    00001417: 	cvtsi2sd	%rax, %xmm0
    0000141c: 	divsd	DATAat0x15638(%rip), %xmm0
    00001424: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5156
    00001429: 	movq	0x1c0(%rsp), %rdi
    00001431: 	cmpq	0x8(%rsp), %rdi
    00001436: 	je	.Ltmp1745 # Offset: 5174
    00001438: 	movq	0x1d0(%rsp), %rax
    00001440: 	leaq	0x1(%rax), %rsi
    00001444: 	callq	_ZdlPvm@PLT # Offset: 5188
.Ltmp1745:
    00001449: 	movq	0x18(%rsp), %rsi
    0000144e: 	movq	0x10(%rsp), %rdi
    00001453: 	leaq	DATAat0x15282(%rip), %rdx
    0000145a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5210
    0000145f: 	callq	clock@PLT # Offset: 5215
    00001464: 	movl	iterations(%rip), %r9d
    0000146b: 	movq	%rax, start_time(%rip)
    00001472: 	testl	%r9d, %r9d
    00001475: 	jle	.Ltmp1746 # Offset: 5237
    0000147b: 	movq	%r12, %rax
    0000147e: 	leaq	0x4(%r14), %rcx
    00001482: 	movq	%rbp, %rdx
    00001485: 	movl	$0x0, 0x20(%rsp)
    0000148d: 	subq	%rbp, %rax
    00001490: 	subq	%rcx, %rdx
    00001493: 	movq	%rax, 0x30(%rsp)
    00001498: 	leaq	0x4(%rbp), %rax
    0000149c: 	movq	%rax, 0x50(%rsp)
    000014a1: 	movq	(%rsp), %rax
    000014a5: 	subq	$0x4, %rax
    000014a9: 	subq	%r14, %rax
    000014ac: 	cmpq	$0x8, %rdx
    000014b0: 	seta	%cl
    000014b3: 	cmpq	$0x8, %rax
    000014b7: 	seta	%dl
    000014ba: 	shrq	$0x2, %rax
    000014be: 	leaq	0x1(%rax), %rdi
    000014c2: 	andl	%edx, %ecx
    000014c4: 	movq	%rdi, %rax
    000014c7: 	movq	%rdi, 0x70(%rsp)
    000014cc: 	andq	$-0x4, %rdi
    000014d0: 	shrq	$0x2, %rax
    000014d4: 	movq	%rdi, 0x68(%rsp)
    000014d9: 	shlq	$0x4, %rax
    000014dd: 	movb	%cl, 0x58(%rsp)
    000014e1: 	movq	%rax, 0x60(%rsp)
    000014e6: 	leaq	(,%rdi,4), %rax
    000014ee: 	leaq	(%r14,%rax), %rdi
    000014f2: 	addq	%rbp, %rax
    000014f5: 	movq	%rax, 0x80(%rsp)
    000014fd: 	movq	%rdi, %rax
    00001500: 	movq	%rdi, 0x88(%rsp)
    00001508: 	addq	$0x8, %rax
    0000150c: 	leaq	0x4(%rdi), %rdi
    00001510: 	movq	%rdi, 0x90(%rsp)
    00001518: 	movq	%rax, 0x78(%rsp)
.Ltmp1759:
    0000151d: 	cmpq	%r14, (%rsp)
    00001521: 	je	.Ltmp1747 # Offset: 5409
    00001523: 	cmpb	$0x0, 0x58(%rsp)
    00001528: 	je	.Ltmp1748 # Offset: 5416
    0000152e: 	movq	0x60(%rsp), %rdx
    00001533: 	xorl	%eax, %eax
    00001535: 	nopl	(%rax) # Size: 3
.Ltmp1749:
    00001538: 	movdqu	(%r14,%rax), %xmm6
    0000153e: 	movups	%xmm6, (%rbp,%rax)
    00001543: 	addq	$0x10, %rax
    00001547: 	cmpq	%rax, %rdx
    0000154a: 	jne	.Ltmp1749 # Offset: 5450
    0000154c: 	movq	0x70(%rsp), %rdi
    00001551: 	cmpq	%rdi, 0x68(%rsp)
    00001556: 	je	.Ltmp1747 # Offset: 5462
    00001558: 	movq	0x88(%rsp), %rdi
    00001560: 	movq	0x80(%rsp), %rsi
    00001568: 	movq	(%rsp), %rcx
    0000156c: 	movl	(%rdi), %eax
    0000156e: 	movl	%eax, (%rsi)
    00001570: 	movq	0x90(%rsp), %rax
    00001578: 	cmpq	%rax, %rcx
    0000157b: 	je	.Ltmp1747 # Offset: 5499
    0000157d: 	movl	0x4(%rdi), %eax
    00001580: 	movl	%eax, 0x4(%rsi)
    00001583: 	movq	0x78(%rsp), %rax
    00001588: 	cmpq	%rax, %rcx
    0000158b: 	je	.Ltmp1747 # Offset: 5515
    0000158d: 	movl	0x8(%rdi), %eax
    00001590: 	movl	%eax, 0x8(%rsi)
.Ltmp1747:
    00001593: 	cmpq	$0x4, 0x30(%rsp)
    00001599: 	jle	.Ltmp1750 # Offset: 5529
    0000159b: 	movl	(%rbp), %esi
    0000159e: 	movq	%r12, %r8
    000015a1: 	movq	%rbp, %rdx
    000015a4: 	nopl	(%rax) # Size: 4
.Ltmp1755:
    000015a8: 	movl	-0x4(%r8), %edi
    000015ac: 	leaq	-0x4(%r8), %r9
    000015b0: 	cmpl	%edi, %esi
    000015b2: 	jl	.Ltmp1751 # Offset: 5554
    000015b4: 	cmpq	%rdx, %r9
    000015b7: 	jbe	.Ltmp1752 # Offset: 5559
    000015bd: 	movl	(%rdx), %ecx
    000015bf: 	cmpl	%esi, %ecx
    000015c1: 	jge	.Ltmp1753 # Offset: 5569
    000015c3: 	leaq	0x4(%rdx), %rax
    000015c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1754:
    000015d0: 	movq	%rax, %rdx
    000015d3: 	movl	(%rax), %ecx
    000015d5: 	leaq	0x4(%rax), %rax
    000015d9: 	cmpl	%ecx, %esi
    000015db: 	jg	.Ltmp1754 # Offset: 5595
    000015dd: 	cmpq	%rdx, %r9
    000015e0: 	jbe	.Ltmp1752 # Offset: 5600
.Ltmp1753:
    000015e6: 	movl	%ecx, (%r9)
    000015e9: 	movl	%edi, (%rdx)
.Ltmp1751:
    000015eb: 	movq	%r9, %r8
    000015ee: 	jmp	.Ltmp1755 # Offset: 5614
.Ltmp1888:
    000015f0: 	movq	%r8, %rsi
    000015f3: 	movq	%r10, %rdi
    000015f6: 	movq	%r8, 0xa0(%rsp)
    000015fe: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 5630
    00001603: 	movq	0xa0(%rsp), %rdi
    0000160b: 	movq	%r12, %rsi
    0000160e: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 5646
.Ltmp1750:
    00001613: 	movq	0x50(%rsp), %rax
    00001618: 	jmp	.Ltmp1756 # Offset: 5656
    0000161a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1758:
    00001620: 	addq	$0x4, %rax
    00001624: 	movl	-0x8(%rax), %edi
    00001627: 	cmpl	%edi, (%rdx)
    00001629: 	jl	.Ltmp1757 # Offset: 5673
.Ltmp1756:
    0000162f: 	movq	%rax, %rdx
    00001632: 	cmpq	%rax, %r12
    00001635: 	jne	.Ltmp1758 # Offset: 5685
.Ltmp1871:
    00001637: 	addl	$0x1, 0x20(%rsp)
    0000163c: 	movl	0x20(%rsp), %eax
    00001640: 	cmpl	iterations(%rip), %eax
    00001646: 	jl	.Ltmp1759 # Offset: 5702
.Ltmp1746:
    0000164c: 	callq	clock@PLT # Offset: 5708
    00001651: 	movq	0x10(%rsp), %rdi
    00001656: 	pxor	%xmm0, %xmm0
    0000165a: 	movq	%rax, end_time(%rip)
    00001661: 	subq	start_time(%rip), %rax
    00001668: 	cvtsi2sd	%rax, %xmm0
    0000166d: 	divsd	DATAat0x15638(%rip), %xmm0
    00001675: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5749
    0000167a: 	movq	0x1c0(%rsp), %rdi
    00001682: 	cmpq	0x8(%rsp), %rdi
    00001687: 	je	.Ltmp1760 # Offset: 5767
    00001689: 	movq	0x1d0(%rsp), %rax
    00001691: 	leaq	0x1(%rax), %rsi
    00001695: 	callq	_ZdlPvm@PLT # Offset: 5781
.Ltmp1760:
    0000169a: 	movq	0x18(%rsp), %rsi
    0000169f: 	movq	0x10(%rsp), %rdi
    000016a4: 	leaq	DATAat0x154a8(%rip), %rdx
    000016ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5803
    000016b0: 	callq	clock@PLT # Offset: 5808
    000016b5: 	movl	iterations(%rip), %r8d
    000016bc: 	movl	$0x0, 0x30(%rsp)
    000016c4: 	movq	%rax, start_time(%rip)
    000016cb: 	leaq	0x1e4(%rsp), %rax
    000016d3: 	movq	%rax, 0x20(%rsp)
    000016d8: 	testl	%r8d, %r8d
    000016db: 	jle	.Ltmp1761 # Offset: 5851
.Ltmp1781:
    000016e1: 	movq	%rbx, %rdi
    000016e4: 	movq	%r13, %rsi
    000016e7: 	movl	$0x3e8, %ecx
    000016ec: 	rep		movsq	(%rsi), %es:(%rdi)
    000016ef: 	leaq	0x1e0(%rsp), %rbx
    000016f7: 	leaq	0x2120(%rsp), %r13
    000016ff: 	movq	%r13, %r8
    00001702: 	movq	%rbx, %rax
    00001705: 	movl	0x1e0(%rsp), %ecx
    0000170c: 	nopl	(%rax) # Size: 4
.Ltmp1766:
    00001710: 	movl	-0x4(%r8), %esi
    00001714: 	leaq	-0x4(%r8), %rdi
    00001718: 	cmpl	%esi, %ecx
    0000171a: 	jl	.Ltmp1762 # Offset: 5914
    0000171c: 	cmpq	%rax, %rdi
    0000171f: 	jbe	.Ltmp1763 # Offset: 5919
    00001721: 	movl	(%rax), %edx
    00001723: 	cmpl	%edx, %ecx
    00001725: 	jle	.Ltmp1764 # Offset: 5925
    00001727: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1765:
    00001730: 	movl	0x4(%rax), %edx
    00001733: 	addq	$0x4, %rax
    00001737: 	cmpl	%edx, %ecx
    00001739: 	jg	.Ltmp1765 # Offset: 5945
    0000173b: 	cmpq	%rax, %rdi
    0000173e: 	jbe	.Ltmp1763 # Offset: 5950
.Ltmp1764:
    00001740: 	movl	%edx, (%rdi)
    00001742: 	movl	%esi, (%rax)
.Ltmp1762:
    00001744: 	movq	%rdi, %r8
    00001747: 	jmp	.Ltmp1766 # Offset: 5959
.Ltmp1763:
    00001749: 	movq	%r8, %rax
    0000174c: 	subq	%rbx, %rax
    0000174f: 	cmpq	$0x4, %rax
    00001753: 	jle	.Ltmp1767 # Offset: 5971
    00001759: 	movl	0x1e0(%rsp), %edi
    00001760: 	movq	%r8, %rcx
    00001763: 	movq	%rbx, %rax
    00001766: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1772:
    00001770: 	leaq	-0x4(%rcx), %r9
    00001774: 	cmpl	%edi, %esi
    00001776: 	jg	.Ltmp1768 # Offset: 6006
    00001778: 	cmpq	%rax, %r9
    0000177b: 	jbe	.Ltmp1769 # Offset: 6011
    00001781: 	movl	(%rax), %edx
    00001783: 	cmpl	%edx, %edi
    00001785: 	jle	.Ltmp1770 # Offset: 6021
    00001787: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1771:
    00001790: 	movl	0x4(%rax), %edx
    00001793: 	addq	$0x4, %rax
    00001797: 	cmpl	%edx, %edi
    00001799: 	jg	.Ltmp1771 # Offset: 6041
    0000179b: 	cmpq	%rax, %r9
    0000179e: 	jbe	.Ltmp1769 # Offset: 6046
.Ltmp1770:
    000017a4: 	movl	%edx, (%r9)
    000017a7: 	movl	%esi, (%rax)
.Ltmp1768:
    000017a9: 	movl	-0x4(%r9), %esi
    000017ad: 	movq	%r9, %rcx
    000017b0: 	jmp	.Ltmp1772 # Offset: 6064
.Ltmp1921:
    000017b2: 	movq	0x28(%rsp), %rsi
    000017b7: 	movq	%r15, %rdi
    000017ba: 	movq	%r8, 0x50(%rsp)
    000017bf: 	movq	%r9, 0xe8(%rsp)
    000017c7: 	movq	%r9, 0x58(%rsp)
    000017cc: 	movq	%rcx, 0xf8(%rsp)
    000017d4: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 6100
    000017d9: 	movq	0x50(%rsp), %r8
    000017de: 	movq	0x58(%rsp), %r9
    000017e3: 	movq	%r15, %rdi
    000017e6: 	movq	0x28(%rsp), %rsi
    000017eb: 	movq	%r8, 0xe8(%rsp)
    000017f3: 	movq	%r9, 0xf8(%rsp)
    000017fb: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 6139
    00001800: 	movq	0x50(%rsp), %r8
.Ltmp1767:
    00001805: 	movq	%r13, %rax
    00001808: 	subq	%r8, %rax
    0000180b: 	cmpq	$0x4, %rax
    0000180f: 	jle	.Ltmp1773 # Offset: 6159
    00001815: 	movl	(%r8), %ecx
    00001818: 	movq	%r8, %rax
    0000181b: 	movq	%r13, %r9
    0000181e: 	nop # Size: 2
.Ltmp1778:
    00001820: 	movl	-0x4(%r9), %edi
    00001824: 	leaq	-0x4(%r9), %rsi
    00001828: 	cmpl	%edi, %ecx
    0000182a: 	jl	.Ltmp1774 # Offset: 6186
    0000182c: 	cmpq	%rax, %rsi
    0000182f: 	jbe	.Ltmp1775 # Offset: 6191
    00001835: 	movl	(%rax), %edx
    00001837: 	cmpl	%ecx, %edx
    00001839: 	jge	.Ltmp1776 # Offset: 6201
    0000183b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1777:
    00001840: 	movl	0x4(%rax), %edx
    00001843: 	addq	$0x4, %rax
    00001847: 	cmpl	%edx, %ecx
    00001849: 	jg	.Ltmp1777 # Offset: 6217
    0000184b: 	cmpq	%rax, %rsi
    0000184e: 	jbe	.Ltmp1775 # Offset: 6222
.Ltmp1776:
    00001854: 	movl	%edx, (%rsi)
    00001856: 	movl	%edi, (%rax)
.Ltmp1774:
    00001858: 	movq	%rsi, %r9
    0000185b: 	jmp	.Ltmp1778 # Offset: 6235
.Ltmp1910:
    0000185d: 	movq	0x28(%rsp), %rsi
    00001862: 	movq	%r15, %rdi
    00001865: 	movq	%r8, 0xe8(%rsp)
    0000186d: 	movq	%r8, 0x50(%rsp)
    00001872: 	movq	%r9, 0xf8(%rsp)
    0000187a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 6266
    0000187f: 	movq	0x50(%rsp), %r8
    00001884: 	movq	%r15, %rdi
    00001887: 	movq	0x28(%rsp), %rsi
    0000188c: 	movq	%r13, 0xe8(%rsp)
    00001894: 	movq	%r8, 0xf8(%rsp)
    0000189c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 6300
.Ltmp1773:
    000018a1: 	movl	0x1e0(%rsp), %edx
    000018a8: 	movq	0x20(%rsp), %rax
    000018ad: 	movq	0x38(%rsp), %rsi
    000018b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1780:
    000018b8: 	movl	%edx, %ecx
    000018ba: 	movl	(%rax), %edx
    000018bc: 	cmpl	%edx, %ecx
    000018be: 	jg	.Ltmp1779 # Offset: 6334
    000018c4: 	addq	$0x4, %rax
    000018c8: 	cmpq	%rsi, %rax
    000018cb: 	jne	.Ltmp1780 # Offset: 6347
.Ltmp1872:
    000018cd: 	addl	$0x1, 0x30(%rsp)
    000018d2: 	movl	0x30(%rsp), %eax
    000018d6: 	cmpl	iterations(%rip), %eax
    000018dc: 	jl	.Ltmp1781 # Offset: 6364
.Ltmp1761:
    000018e2: 	callq	clock@PLT # Offset: 6370
    000018e7: 	movq	0x10(%rsp), %rdi
    000018ec: 	pxor	%xmm0, %xmm0
    000018f0: 	movq	%rax, end_time(%rip)
    000018f7: 	subq	start_time(%rip), %rax
    000018fe: 	cvtsi2sd	%rax, %xmm0
    00001903: 	divsd	DATAat0x15638(%rip), %xmm0
    0000190b: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6411
    00001910: 	movq	0x1c0(%rsp), %rdi
    00001918: 	cmpq	0x8(%rsp), %rdi
    0000191d: 	je	.Ltmp1782 # Offset: 6429
    0000191f: 	movq	0x1d0(%rsp), %rax
    00001927: 	leaq	0x1(%rax), %rsi
    0000192b: 	callq	_ZdlPvm@PLT # Offset: 6443
.Ltmp1782:
    00001930: 	movq	0x18(%rsp), %rsi
    00001935: 	movq	0x10(%rsp), %rdi
    0000193a: 	leaq	DATAat0x154d0(%rip), %rdx
    00001941: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6465
    00001946: 	movq	(%rsp), %rax
    0000194a: 	movq	0x10(%rsp), %r8
    0000194f: 	movq	%r15, %rcx
    00001952: 	movq	%r12, 0xf8(%rsp)
    0000195a: 	movq	0x28(%rsp), %rdx
    0000195f: 	movq	0x40(%rsp), %rsi
    00001964: 	movq	%rbp, 0xe8(%rsp)
    0000196c: 	movq	0x48(%rsp), %rdi
    00001971: 	movq	%rax, 0xd8(%rsp)
    00001979: 	movq	%r14, 0xc8(%rsp)
    00001981: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6529
    00001986: 	movq	0x1c0(%rsp), %rdi
    0000198e: 	cmpq	0x8(%rsp), %rdi
    00001993: 	je	.Ltmp1783 # Offset: 6547
    00001995: 	movq	0x1d0(%rsp), %rax
    0000199d: 	leaq	0x1(%rax), %rsi
    000019a1: 	callq	_ZdlPvm@PLT # Offset: 6561
.Ltmp1783:
    000019a6: 	movq	0x18(%rsp), %rsi
    000019ab: 	movq	0x10(%rsp), %rdi
    000019b0: 	leaq	DATAat0x15500(%rip), %rdx
    000019b7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6583
    000019bc: 	movq	(%rsp), %rax
    000019c0: 	movq	0x10(%rsp), %r8
    000019c5: 	movq	%r15, %rcx
    000019c8: 	movq	%r12, 0xf8(%rsp)
    000019d0: 	movq	0x28(%rsp), %rdx
    000019d5: 	movq	0x40(%rsp), %rsi
    000019da: 	movq	%rbp, 0xe8(%rsp)
    000019e2: 	movq	0x48(%rsp), %rdi
    000019e7: 	movq	%rax, 0xd8(%rsp)
    000019ef: 	movq	%r14, 0xc8(%rsp)
    000019f7: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6647
    000019fc: 	movq	0x1c0(%rsp), %rdi
    00001a04: 	cmpq	0x8(%rsp), %rdi
    00001a09: 	je	.Ltmp1784 # Offset: 6665
    00001a0b: 	movq	0x1d0(%rsp), %rax
    00001a13: 	leaq	0x1(%rax), %rsi
    00001a17: 	callq	_ZdlPvm@PLT # Offset: 6679
.Ltmp1784:
    00001a1c: 	movq	0x18(%rsp), %rsi
    00001a21: 	movq	0x10(%rsp), %rdi
    00001a26: 	leaq	DATAat0x15530(%rip), %rdx
    00001a2d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6701
    00001a32: 	callq	clock@PLT # Offset: 6706
    00001a37: 	movl	iterations(%rip), %edi
    00001a3d: 	movq	%rax, start_time(%rip)
    00001a44: 	testl	%edi, %edi
    00001a46: 	jle	.Ltmp1785 # Offset: 6726
    00001a4c: 	movq	%r12, %rax
    00001a4f: 	leaq	0x4(%r14), %rcx
    00001a53: 	movq	%rbp, %rdx
    00001a56: 	movl	$0x0, 0x20(%rsp)
    00001a5e: 	subq	%rbp, %rax
    00001a61: 	subq	%rcx, %rdx
    00001a64: 	movq	%rax, 0x50(%rsp)
    00001a69: 	leaq	0x4(%rbp), %rax
    00001a6d: 	movq	%rax, 0x30(%rsp)
    00001a72: 	movq	(%rsp), %rax
    00001a76: 	subq	$0x4, %rax
    00001a7a: 	subq	%r14, %rax
    00001a7d: 	cmpq	$0x8, %rdx
    00001a81: 	seta	%cl
    00001a84: 	cmpq	$0x8, %rax
    00001a88: 	seta	%dl
    00001a8b: 	shrq	$0x2, %rax
    00001a8f: 	leaq	0x1(%rax), %rdi
    00001a93: 	andl	%edx, %ecx
    00001a95: 	movq	%rdi, %rax
    00001a98: 	movq	%rdi, 0x70(%rsp)
    00001a9d: 	andq	$-0x4, %rdi
    00001aa1: 	shrq	$0x2, %rax
    00001aa5: 	movq	%rdi, 0x68(%rsp)
    00001aaa: 	shlq	$0x4, %rax
    00001aae: 	movb	%cl, 0x58(%rsp)
    00001ab2: 	movq	%rax, 0x60(%rsp)
    00001ab7: 	leaq	(,%rdi,4), %rax
    00001abf: 	leaq	(%r14,%rax), %rdi
    00001ac3: 	addq	%rbp, %rax
    00001ac6: 	movq	%rax, 0x88(%rsp)
    00001ace: 	movq	%rdi, %rax
    00001ad1: 	movq	%rdi, 0x90(%rsp)
    00001ad9: 	addq	$0x8, %rax
    00001add: 	leaq	0x4(%rdi), %rdi
    00001ae1: 	movq	%rdi, 0x78(%rsp)
    00001ae6: 	movq	%rax, 0x80(%rsp)
.Ltmp1798:
    00001aee: 	cmpq	%r14, (%rsp)
    00001af2: 	je	.Ltmp1786 # Offset: 6898
    00001af4: 	cmpb	$0x0, 0x58(%rsp)
    00001af9: 	je	.Ltmp1787 # Offset: 6905
    00001aff: 	movq	0x60(%rsp), %rdx
    00001b04: 	xorl	%eax, %eax
    00001b06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1788:
    00001b10: 	movdqu	(%r14,%rax), %xmm7
    00001b16: 	movups	%xmm7, (%rbp,%rax)
    00001b1b: 	addq	$0x10, %rax
    00001b1f: 	cmpq	%rax, %rdx
    00001b22: 	jne	.Ltmp1788 # Offset: 6946
    00001b24: 	movq	0x70(%rsp), %rdi
    00001b29: 	cmpq	%rdi, 0x68(%rsp)
    00001b2e: 	je	.Ltmp1786 # Offset: 6958
    00001b30: 	movq	0x90(%rsp), %rdi
    00001b38: 	movq	0x88(%rsp), %rsi
    00001b40: 	movq	(%rsp), %rcx
    00001b44: 	movl	(%rdi), %eax
    00001b46: 	movl	%eax, (%rsi)
    00001b48: 	movq	0x78(%rsp), %rax
    00001b4d: 	cmpq	%rax, %rcx
    00001b50: 	je	.Ltmp1786 # Offset: 6992
    00001b52: 	movl	0x4(%rdi), %eax
    00001b55: 	movl	%eax, 0x4(%rsi)
    00001b58: 	movq	0x80(%rsp), %rax
    00001b60: 	cmpq	%rax, %rcx
    00001b63: 	je	.Ltmp1786 # Offset: 7011
    00001b65: 	movl	0x8(%rdi), %eax
    00001b68: 	movl	%eax, 0x8(%rsi)
.Ltmp1786:
    00001b6b: 	cmpq	$0x4, 0x50(%rsp)
    00001b71: 	jle	.Ltmp1789 # Offset: 7025
    00001b73: 	movl	(%rbp), %ecx
    00001b76: 	movq	%r12, %r8
    00001b79: 	movq	%rbp, %rax
    00001b7c: 	nopl	(%rax) # Size: 4
.Ltmp1794:
    00001b80: 	movl	-0x4(%r8), %esi
    00001b84: 	leaq	-0x4(%r8), %rdi
    00001b88: 	cmpl	%esi, %ecx
    00001b8a: 	jl	.Ltmp1790 # Offset: 7050
    00001b8c: 	cmpq	%rax, %rdi
    00001b8f: 	jbe	.Ltmp1791 # Offset: 7055
    00001b95: 	movl	(%rax), %edx
    00001b97: 	cmpl	%ecx, %edx
    00001b99: 	jge	.Ltmp1792 # Offset: 7065
    00001b9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1793:
    00001ba0: 	movl	0x4(%rax), %edx
    00001ba3: 	addq	$0x4, %rax
    00001ba7: 	cmpl	%edx, %ecx
    00001ba9: 	jg	.Ltmp1793 # Offset: 7081
    00001bab: 	cmpq	%rax, %rdi
    00001bae: 	jbe	.Ltmp1791 # Offset: 7086
.Ltmp1792:
    00001bb4: 	movl	%edx, (%rdi)
    00001bb6: 	movl	%esi, (%rax)
.Ltmp1790:
    00001bb8: 	movq	%rdi, %r8
    00001bbb: 	jmp	.Ltmp1794 # Offset: 7099
.Ltmp1932:
    00001bbd: 	movq	%r8, %rsi
    00001bc0: 	movq	%r10, %rdi
    00001bc3: 	movq	%r8, 0xa0(%rsp)
    00001bcb: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 7115
    00001bd0: 	movq	0xa0(%rsp), %rdi
    00001bd8: 	movq	%r12, %rsi
    00001bdb: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 7131
.Ltmp1789:
    00001be0: 	movq	0x30(%rsp), %rax
    00001be5: 	jmp	.Ltmp1795 # Offset: 7141
    00001be7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1797:
    00001bf0: 	addq	$0x4, %rax
    00001bf4: 	movl	-0x8(%rax), %edi
    00001bf7: 	cmpl	%edi, (%rdx)
    00001bf9: 	jl	.Ltmp1796 # Offset: 7161
.Ltmp1795:
    00001bff: 	movq	%rax, %rdx
    00001c02: 	cmpq	%rax, %r12
    00001c05: 	jne	.Ltmp1797 # Offset: 7173
.Ltmp1876:
    00001c07: 	addl	$0x1, 0x20(%rsp)
    00001c0c: 	movl	0x20(%rsp), %eax
    00001c10: 	cmpl	iterations(%rip), %eax
    00001c16: 	jl	.Ltmp1798 # Offset: 7190
.Ltmp1785:
    00001c1c: 	callq	clock@PLT # Offset: 7196
    00001c21: 	movq	0x10(%rsp), %rdi
    00001c26: 	pxor	%xmm0, %xmm0
    00001c2a: 	movq	%rax, end_time(%rip)
    00001c31: 	subq	start_time(%rip), %rax
    00001c38: 	cvtsi2sd	%rax, %xmm0
    00001c3d: 	divsd	DATAat0x15638(%rip), %xmm0
    00001c45: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7237
    00001c4a: 	movq	0x1c0(%rsp), %rdi
    00001c52: 	cmpq	0x8(%rsp), %rdi
    00001c57: 	je	.Ltmp1799 # Offset: 7255
    00001c59: 	movq	0x1d0(%rsp), %rax
    00001c61: 	leaq	0x1(%rax), %rsi
    00001c65: 	callq	_ZdlPvm@PLT # Offset: 7269
.Ltmp1799:
    00001c6a: 	movq	0x18(%rsp), %rsi
    00001c6f: 	leaq	0x1a0(%rsp), %rdi
    00001c77: 	leaq	DATAat0x1529d(%rip), %rdx
    00001c7e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7294
    00001c83: 	movl	iterations(%rip), %edx
    00001c89: 	movl	$0x1, %r8d
    00001c8f: 	movl	$0x1, %ecx
    00001c94: 	movq	0x1a0(%rsp), %rdi
    00001c9c: 	movl	$0x7d0, %esi
    00001ca1: 	callq	_Z9summarizePKciiii # Offset: 7329
    00001ca6: 	movq	0x18(%rsp), %rsi
    00001cab: 	movq	0x10(%rsp), %rdi
    00001cb0: 	leaq	DATAat0x152af(%rip), %rdx
    00001cb7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7351
    00001cbc: 	callq	clock@PLT # Offset: 7356
    00001cc1: 	movl	iterations(%rip), %esi
    00001cc7: 	movl	$0x0, 0x30(%rsp)
    00001ccf: 	movq	%rax, start_time(%rip)
    00001cd6: 	leaq	0x1e4(%rsp), %rax
    00001cde: 	movq	%rax, 0x20(%rsp)
    00001ce3: 	testl	%esi, %esi
    00001ce5: 	jle	.Ltmp1800 # Offset: 7397
.Ltmp1805:
    00001ceb: 	movq	%rbx, %rdi
    00001cee: 	movl	$0x3e8, %ecx
    00001cf3: 	movq	%r13, %rsi
    00001cf6: 	movl	$0x3e7, %eax
    00001cfb: 	rep		movsq	(%rsi), %es:(%rdi)
    00001cfe: 	movq	%rbp, 0x50(%rsp)
    00001d03: 	movq	%rbx, %rbp
    00001d06: 	movq	%rax, %rbx
    00001d09: 	nopl	(%rax) # Size: 7
.Ltmp1801:
    00001d10: 	movl	(%rbp,%rbx,4), %ecx
    00001d14: 	movq	%rbx, %rdx
    00001d17: 	movq	%rbp, %rsi
    00001d1a: 	movl	$0x7d0, %edi
    00001d1f: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 7455
    00001d24: 	subq	$0x1, %rbx
    00001d28: 	jae	.Ltmp1801 # Offset: 7464
    00001d2a: 	movl	$0x7cf, %eax
    00001d2f: 	movq	%rax, %rbx
    00001d32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1802:
    00001d38: 	movl	0x1e0(%rsp), %edx
    00001d3f: 	movl	(%rbp,%rbx,4), %ecx
    00001d43: 	movq	%rbx, %rdi
    00001d46: 	movq	%rbp, %rsi
    00001d49: 	movl	%edx, (%rbp,%rbx,4)
    00001d4d: 	xorl	%edx, %edx
    00001d4f: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 7503
    00001d54: 	subq	$0x1, %rbx
    00001d58: 	jne	.Ltmp1802 # Offset: 7512
    00001d5a: 	movq	%rbp, %rbx
    00001d5d: 	movl	0x1e0(%rsp), %edx
    00001d64: 	movq	0x50(%rsp), %rbp
    00001d69: 	movq	0x20(%rsp), %rax
    00001d6e: 	nop # Size: 2
.Ltmp1804:
    00001d70: 	addq	$0x4, %rax
    00001d74: 	movl	%edx, %ecx
    00001d76: 	movl	-0x4(%rax), %edx
    00001d79: 	cmpl	%ecx, %edx
    00001d7b: 	jl	.Ltmp1803 # Offset: 7547
    00001d81: 	cmpq	%r13, %rax
    00001d84: 	jne	.Ltmp1804 # Offset: 7556
.Ltmp1875:
    00001d86: 	addl	$0x1, 0x30(%rsp)
    00001d8b: 	movl	0x30(%rsp), %eax
    00001d8f: 	cmpl	iterations(%rip), %eax
    00001d95: 	jl	.Ltmp1805 # Offset: 7573
.Ltmp1800:
    00001d9b: 	callq	clock@PLT # Offset: 7579
    00001da0: 	movq	0x10(%rsp), %rdi
    00001da5: 	pxor	%xmm0, %xmm0
    00001da9: 	movq	%rax, end_time(%rip)
    00001db0: 	subq	start_time(%rip), %rax
    00001db7: 	cvtsi2sd	%rax, %xmm0
    00001dbc: 	divsd	DATAat0x15638(%rip), %xmm0
    00001dc4: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7620
    00001dc9: 	movq	0x1c0(%rsp), %rdi
    00001dd1: 	cmpq	0x8(%rsp), %rdi
    00001dd6: 	je	.Ltmp1806 # Offset: 7638
    00001dd8: 	movq	0x1d0(%rsp), %rax
    00001de0: 	leaq	0x1(%rax), %rsi
    00001de4: 	callq	_ZdlPvm@PLT # Offset: 7652
.Ltmp1806:
    00001de9: 	movq	0x18(%rsp), %rsi
    00001dee: 	movq	0x10(%rsp), %rdi
    00001df3: 	leaq	DATAat0x152ca(%rip), %rdx
    00001dfa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7674
    00001dff: 	callq	clock@PLT # Offset: 7679
    00001e04: 	movl	iterations(%rip), %ecx
    00001e0a: 	movq	%rax, start_time(%rip)
    00001e11: 	testl	%ecx, %ecx
    00001e13: 	jle	.Ltmp1807 # Offset: 7699
    00001e19: 	movq	%r12, %rax
    00001e1c: 	leaq	0x4(%r14), %rcx
    00001e20: 	movq	%rbp, %rdx
    00001e23: 	movl	$0x0, 0x20(%rsp)
    00001e2b: 	subq	%rbp, %rax
    00001e2e: 	subq	%rcx, %rdx
    00001e31: 	movq	%rax, %rdi
    00001e34: 	shrq	$0x3f, %rax
    00001e38: 	sarq	$0x2, %rdi
    00001e3c: 	addq	%rdi, %rax
    00001e3f: 	movq	%rdi, 0x78(%rsp)
    00001e44: 	sarq	%rax
    00001e47: 	subq	$0x1, %rax
    00001e4b: 	movq	%rax, 0x68(%rsp)
    00001e50: 	leaq	-0x1(%rdi), %rax
    00001e54: 	movq	%rax, 0x70(%rsp)
    00001e59: 	leaq	0x4(%rbp), %rax
    00001e5d: 	movq	%rax, 0x60(%rsp)
    00001e62: 	movq	(%rsp), %rax
    00001e66: 	subq	$0x4, %rax
    00001e6a: 	subq	%r14, %rax
    00001e6d: 	cmpq	$0x8, %rdx
    00001e71: 	seta	%cl
    00001e74: 	cmpq	$0x8, %rax
    00001e78: 	seta	%dl
    00001e7b: 	shrq	$0x2, %rax
    00001e7f: 	leaq	0x1(%rax), %rdi
    00001e83: 	andl	%edx, %ecx
    00001e85: 	movq	%rdi, %rax
    00001e88: 	movq	%rdi, 0x90(%rsp)
    00001e90: 	andq	$-0x4, %rdi
    00001e94: 	shrq	$0x2, %rax
    00001e98: 	movq	%rdi, 0x88(%rsp)
    00001ea0: 	shlq	$0x4, %rax
    00001ea4: 	movb	%cl, 0x58(%rsp)
    00001ea8: 	movq	%rax, 0x80(%rsp)
    00001eb0: 	leaq	(,%rdi,4), %rax
    00001eb8: 	leaq	(%r14,%rax), %rdi
    00001ebc: 	addq	%rbp, %rax
    00001ebf: 	movq	%rax, 0xb0(%rsp)
    00001ec7: 	movq	%rdi, %rax
    00001eca: 	movq	%rdi, 0xb8(%rsp)
    00001ed2: 	addq	$0x8, %rax
    00001ed6: 	leaq	0x4(%rdi), %rdi
    00001eda: 	movq	%rdi, 0xa0(%rsp)
    00001ee2: 	movq	%rax, 0xa8(%rsp)
.Ltmp1818:
    00001eea: 	cmpq	%r14, (%rsp)
    00001eee: 	je	.Ltmp1808 # Offset: 7918
    00001ef0: 	cmpb	$0x0, 0x58(%rsp)
    00001ef5: 	je	.Ltmp1809 # Offset: 7925
    00001efb: 	movq	0x80(%rsp), %rdx
    00001f03: 	xorl	%eax, %eax
    00001f05: 	nopl	(%rax) # Size: 3
.Ltmp1810:
    00001f08: 	movdqu	(%r14,%rax), %xmm2
    00001f0e: 	movups	%xmm2, (%rbp,%rax)
    00001f13: 	addq	$0x10, %rax
    00001f17: 	cmpq	%rax, %rdx
    00001f1a: 	jne	.Ltmp1810 # Offset: 7962
    00001f1c: 	movq	0x90(%rsp), %rdi
    00001f24: 	cmpq	%rdi, 0x88(%rsp)
    00001f2c: 	je	.Ltmp1808 # Offset: 7980
    00001f2e: 	movq	0xb8(%rsp), %rdi
    00001f36: 	movq	0xb0(%rsp), %rsi
    00001f3e: 	movq	(%rsp), %rcx
    00001f42: 	movl	(%rdi), %eax
    00001f44: 	movl	%eax, (%rsi)
    00001f46: 	movq	0xa0(%rsp), %rax
    00001f4e: 	cmpq	%rax, %rcx
    00001f51: 	je	.Ltmp1808 # Offset: 8017
    00001f53: 	movl	0x4(%rdi), %eax
    00001f56: 	movl	%eax, 0x4(%rsi)
    00001f59: 	movq	0xa8(%rsp), %rax
    00001f61: 	cmpq	%rax, %rcx
    00001f64: 	je	.Ltmp1808 # Offset: 8036
    00001f66: 	movl	0x8(%rdi), %eax
    00001f69: 	movl	%eax, 0x8(%rsi)
.Ltmp1808:
    00001f6c: 	movq	0x68(%rsp), %rdi
    00001f71: 	testq	%rdi, %rdi
    00001f74: 	js	.Ltmp1811 # Offset: 8052
    00001f76: 	movq	%rbx, 0x50(%rsp)
    00001f7b: 	movq	0x78(%rsp), %rbx
    00001f80: 	movq	%r12, 0x30(%rsp)
    00001f85: 	movq	%rdi, %r12
    00001f88: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1812:
    00001f90: 	movl	(%rbp,%r12,4), %ecx
    00001f95: 	movq	%r12, %rdx
    00001f98: 	movq	%rbp, %rsi
    00001f9b: 	movq	%rbx, %rdi
    00001f9e: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvlT_lT0_ # Offset: 8094
    00001fa3: 	subq	$0x1, %r12
    00001fa7: 	jae	.Ltmp1812 # Offset: 8103
    00001fa9: 	movq	0x30(%rsp), %r12
    00001fae: 	movq	0x50(%rsp), %rbx
.Ltmp1811:
    00001fb3: 	movq	0x70(%rsp), %rdi
    00001fb8: 	testq	%rdi, %rdi
    00001fbb: 	jle	.Ltmp1813 # Offset: 8123
    00001fbd: 	movq	%rbx, 0x30(%rsp)
    00001fc2: 	movq	%rdi, %rbx
    00001fc5: 	nopl	(%rax) # Size: 3
.Ltmp1814:
    00001fc8: 	movl	(%rbp), %edx
    00001fcb: 	movl	(%rbp,%rbx,4), %ecx
    00001fcf: 	movq	%rbx, %rdi
    00001fd2: 	movq	%rbp, %rsi
    00001fd5: 	movl	%edx, (%rbp,%rbx,4)
    00001fd9: 	xorl	%edx, %edx
    00001fdb: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvlT_lT0_ # Offset: 8155
    00001fe0: 	subq	$0x1, %rbx
    00001fe4: 	jne	.Ltmp1814 # Offset: 8164
    00001fe6: 	movq	0x30(%rsp), %rbx
.Ltmp1813:
    00001feb: 	movq	0x60(%rsp), %rax
    00001ff0: 	jmp	.Ltmp1815 # Offset: 8176
    00001ff2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1817:
    00001ff8: 	addq	$0x4, %rax
    00001ffc: 	movl	-0x8(%rax), %edi
    00001fff: 	cmpl	%edi, (%rdx)
    00002001: 	jl	.Ltmp1816 # Offset: 8193
.Ltmp1815:
    00002007: 	movq	%rax, %rdx
    0000200a: 	cmpq	%rax, %r12
    0000200d: 	jne	.Ltmp1817 # Offset: 8205
.Ltmp1877:
    0000200f: 	addl	$0x1, 0x20(%rsp)
    00002014: 	movl	0x20(%rsp), %eax
    00002018: 	cmpl	iterations(%rip), %eax
    0000201e: 	jl	.Ltmp1818 # Offset: 8222
.Ltmp1807:
    00002024: 	callq	clock@PLT # Offset: 8228
    00002029: 	movq	0x10(%rsp), %rdi
    0000202e: 	pxor	%xmm0, %xmm0
    00002032: 	movq	%rax, end_time(%rip)
    00002039: 	subq	start_time(%rip), %rax
    00002040: 	cvtsi2sd	%rax, %xmm0
    00002045: 	divsd	DATAat0x15638(%rip), %xmm0
    0000204d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8269
    00002052: 	movq	0x1c0(%rsp), %rdi
    0000205a: 	cmpq	0x8(%rsp), %rdi
    0000205f: 	je	.Ltmp1819 # Offset: 8287
    00002061: 	movq	0x1d0(%rsp), %rax
    00002069: 	leaq	0x1(%rax), %rsi
    0000206d: 	callq	_ZdlPvm@PLT # Offset: 8301
.Ltmp1819:
    00002072: 	movq	0x18(%rsp), %rsi
    00002077: 	movq	0x10(%rsp), %rdi
    0000207c: 	leaq	DATAat0x15560(%rip), %rdx
    00002083: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8323
    00002088: 	callq	clock@PLT # Offset: 8328
    0000208d: 	movl	iterations(%rip), %edx
    00002093: 	movl	$0x0, 0x30(%rsp)
    0000209b: 	movq	%rax, start_time(%rip)
    000020a2: 	leaq	0x1e4(%rsp), %rax
    000020aa: 	movq	%rax, 0x20(%rsp)
    000020af: 	testl	%edx, %edx
    000020b1: 	jle	.Ltmp1820 # Offset: 8369
.Ltmp1825:
    000020b7: 	movq	%rbx, %rdi
    000020ba: 	movl	$0x3e8, %ecx
    000020bf: 	movq	%r13, %rsi
    000020c2: 	movl	$0x3e7, %eax
    000020c7: 	rep		movsq	(%rsi), %es:(%rdi)
    000020ca: 	movq	%rbp, 0x50(%rsp)
    000020cf: 	movq	%rbx, %rbp
    000020d2: 	movq	%rax, %rbx
    000020d5: 	nopl	(%rax) # Size: 3
.Ltmp1821:
    000020d8: 	movl	(%rbp,%rbx,4), %ecx
    000020dc: 	movq	%rbx, %rdx
    000020df: 	movq	%r15, %rsi
    000020e2: 	movl	$0x7d0, %edi
    000020e7: 	movq	%rbp, 0xf8(%rsp)
    000020ef: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_ # Offset: 8431
    000020f4: 	subq	$0x1, %rbx
    000020f8: 	jae	.Ltmp1821 # Offset: 8440
    000020fa: 	movl	$0x7cf, %eax
    000020ff: 	movq	%rax, %rbx
    00002102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1822:
    00002108: 	movl	0x1e0(%rsp), %edx
    0000210f: 	movl	(%rbp,%rbx,4), %ecx
    00002113: 	movq	%rbx, %rdi
    00002116: 	movq	%r15, %rsi
    00002119: 	movq	%rbp, 0xf8(%rsp)
    00002121: 	movl	%edx, (%rbp,%rbx,4)
    00002125: 	xorl	%edx, %edx
    00002127: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_ # Offset: 8487
    0000212c: 	subq	$0x1, %rbx
    00002130: 	jne	.Ltmp1822 # Offset: 8496
    00002132: 	movq	%rbp, %rbx
    00002135: 	movq	0x20(%rsp), %rax
    0000213a: 	movq	0x50(%rsp), %rbp
    0000213f: 	movl	0x1e0(%rsp), %edx
    00002146: 	movq	0x38(%rsp), %rsi
    0000214b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1824:
    00002150: 	movl	%edx, %ecx
    00002152: 	movl	(%rax), %edx
    00002154: 	cmpl	%ecx, %edx
    00002156: 	jl	.Ltmp1823 # Offset: 8534
    0000215c: 	addq	$0x4, %rax
    00002160: 	cmpq	%rsi, %rax
    00002163: 	jne	.Ltmp1824 # Offset: 8547
.Ltmp1874:
    00002165: 	addl	$0x1, 0x30(%rsp)
    0000216a: 	movl	0x30(%rsp), %eax
    0000216e: 	cmpl	iterations(%rip), %eax
    00002174: 	jl	.Ltmp1825 # Offset: 8564
.Ltmp1820:
    0000217a: 	callq	clock@PLT # Offset: 8570
    0000217f: 	movq	0x10(%rsp), %rdi
    00002184: 	pxor	%xmm0, %xmm0
    00002188: 	movq	%rax, end_time(%rip)
    0000218f: 	subq	start_time(%rip), %rax
    00002196: 	cvtsi2sd	%rax, %xmm0
    0000219b: 	divsd	DATAat0x15638(%rip), %xmm0
    000021a3: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8611
    000021a8: 	movq	0x1c0(%rsp), %rdi
    000021b0: 	cmpq	0x8(%rsp), %rdi
    000021b5: 	je	.Ltmp1826 # Offset: 8629
    000021b7: 	movq	0x1d0(%rsp), %rax
    000021bf: 	leaq	0x1(%rax), %rsi
    000021c3: 	callq	_ZdlPvm@PLT # Offset: 8643
.Ltmp1826:
    000021c8: 	movq	0x10(%rsp), %rbx
    000021cd: 	movq	0x18(%rsp), %rsi
    000021d2: 	leaq	DATAat0x15588(%rip), %rdx
    000021d9: 	movq	%rbx, %rdi
    000021dc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8668
    000021e1: 	movq	(%rsp), %rax
    000021e5: 	movq	0x28(%rsp), %rdx
    000021ea: 	movq	%rbx, %r8
    000021ed: 	movq	%r15, %rcx
    000021f0: 	movq	0x40(%rsp), %rsi
    000021f5: 	movq	0x48(%rsp), %rdi
    000021fa: 	movq	%r12, 0xf8(%rsp)
    00002202: 	movq	%rbp, 0xe8(%rsp)
    0000220a: 	movq	%rax, 0xd8(%rsp)
    00002212: 	movq	%r14, 0xc8(%rsp)
    0000221a: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 8730
    0000221f: 	movq	0x1c0(%rsp), %rdi
    00002227: 	cmpq	0x8(%rsp), %rdi
    0000222c: 	je	.Ltmp1827 # Offset: 8748
    0000222e: 	movq	0x1d0(%rsp), %rax
    00002236: 	leaq	0x1(%rax), %rsi
    0000223a: 	callq	_ZdlPvm@PLT # Offset: 8762
.Ltmp1827:
    0000223f: 	movq	0x10(%rsp), %rbx
    00002244: 	movq	0x18(%rsp), %rsi
    00002249: 	leaq	DATAat0x155b8(%rip), %rdx
    00002250: 	movq	%rbx, %rdi
    00002253: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8787
    00002258: 	movq	(%rsp), %rax
    0000225c: 	movq	0x28(%rsp), %rdx
    00002261: 	movq	%rbx, %r8
    00002264: 	movq	%r15, %rcx
    00002267: 	movq	0x40(%rsp), %rsi
    0000226c: 	movq	0x48(%rsp), %rdi
    00002271: 	movq	%r12, 0xf8(%rsp)
    00002279: 	movq	%rbp, 0xe8(%rsp)
    00002281: 	movq	%rax, 0xd8(%rsp)
    00002289: 	movq	%r14, 0xc8(%rsp)
    00002291: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEiEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 8849
    00002296: 	movq	0x1c0(%rsp), %rdi
    0000229e: 	cmpq	0x8(%rsp), %rdi
    000022a3: 	je	.Ltmp1828 # Offset: 8867
    000022a5: 	movq	0x1d0(%rsp), %rax
    000022ad: 	leaq	0x1(%rax), %rsi
    000022b1: 	callq	_ZdlPvm@PLT # Offset: 8881
.Ltmp1828:
    000022b6: 	movq	0x18(%rsp), %rsi
    000022bb: 	movq	0x10(%rsp), %rdi
    000022c0: 	leaq	DATAat0x155e8(%rip), %rdx
    000022c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8903
    000022cc: 	callq	clock@PLT # Offset: 8908
    000022d1: 	movq	%rax, start_time(%rip)
    000022d8: 	movl	iterations(%rip), %eax
    000022de: 	testl	%eax, %eax
    000022e0: 	jle	.Ltmp1829 # Offset: 8928
    000022e6: 	movq	%r12, %rax
    000022e9: 	leaq	0x4(%r14), %rcx
    000022ed: 	movq	%rbp, %rdx
    000022f0: 	movl	$0x0, 0x20(%rsp)
    000022f8: 	subq	%rbp, %rax
    000022fb: 	subq	%rcx, %rdx
    000022fe: 	movq	%rax, %rbx
    00002301: 	shrq	$0x3f, %rax
    00002305: 	sarq	$0x2, %rbx
    00002309: 	addq	%rbx, %rax
    0000230c: 	sarq	%rax
    0000230f: 	subq	$0x1, %rax
    00002313: 	movq	%rax, 0x30(%rsp)
    00002318: 	leaq	-0x1(%rbx), %rax
    0000231c: 	movq	%rax, 0x38(%rsp)
    00002321: 	leaq	0x4(%rbp), %rax
    00002325: 	movq	%rax, 0x28(%rsp)
    0000232a: 	movq	(%rsp), %rax
    0000232e: 	subq	$0x4, %rax
    00002332: 	subq	%r14, %rax
    00002335: 	cmpq	$0x8, %rdx
    00002339: 	seta	%cl
    0000233c: 	cmpq	$0x8, %rax
    00002340: 	seta	%dl
    00002343: 	shrq	$0x2, %rax
    00002347: 	leaq	0x1(%rax), %rdi
    0000234b: 	andl	%edx, %ecx
    0000234d: 	movq	%rdi, %rax
    00002350: 	movq	%rdi, 0x50(%rsp)
    00002355: 	andq	$-0x4, %rdi
    00002359: 	shrq	$0x2, %rax
    0000235d: 	movq	%rdi, 0x48(%rsp)
    00002362: 	shlq	$0x4, %rax
    00002366: 	movb	%cl, 0x40(%rsp)
    0000236a: 	movq	%rax, %r13
    0000236d: 	leaq	(,%rdi,4), %rax
    00002375: 	leaq	(%r14,%rax), %rdi
    00002379: 	addq	%rbp, %rax
    0000237c: 	movq	%rax, 0x70(%rsp)
    00002381: 	movq	%rdi, %rax
    00002384: 	movq	%rdi, 0x58(%rsp)
    00002389: 	addq	$0x8, %rax
    0000238d: 	leaq	0x4(%rdi), %rdi
    00002391: 	movq	%rdi, 0x68(%rsp)
    00002396: 	movq	%rax, 0x60(%rsp)
.Ltmp1840:
    0000239b: 	cmpq	%r14, (%rsp)
    0000239f: 	je	.Ltmp1830 # Offset: 9119
    000023a1: 	cmpb	$0x0, 0x40(%rsp)
    000023a6: 	je	.Ltmp1831 # Offset: 9126
    000023ac: 	xorl	%eax, %eax
    000023ae: 	nop # Size: 2
.Ltmp1832:
    000023b0: 	movdqu	(%r14,%rax), %xmm3
    000023b6: 	movups	%xmm3, (%rbp,%rax)
    000023bb: 	addq	$0x10, %rax
    000023bf: 	cmpq	%rax, %r13
    000023c2: 	jne	.Ltmp1832 # Offset: 9154
    000023c4: 	movq	0x50(%rsp), %rdi
    000023c9: 	cmpq	%rdi, 0x48(%rsp)
    000023ce: 	je	.Ltmp1830 # Offset: 9166
    000023d0: 	movq	0x58(%rsp), %rdi
    000023d5: 	movq	0x70(%rsp), %rsi
    000023da: 	movq	(%rsp), %rcx
    000023de: 	movl	(%rdi), %eax
    000023e0: 	movl	%eax, (%rsi)
    000023e2: 	movq	0x68(%rsp), %rax
    000023e7: 	cmpq	%rax, %rcx
    000023ea: 	je	.Ltmp1830 # Offset: 9194
    000023ec: 	movl	0x4(%rdi), %eax
    000023ef: 	movl	%eax, 0x4(%rsi)
    000023f2: 	movq	0x60(%rsp), %rax
    000023f7: 	cmpq	%rax, %rcx
    000023fa: 	je	.Ltmp1830 # Offset: 9210
    000023fc: 	movl	0x8(%rdi), %eax
    000023ff: 	movl	%eax, 0x8(%rsi)
.Ltmp1830:
    00002402: 	movq	0x30(%rsp), %rax
    00002407: 	movq	%rax, %r15
    0000240a: 	testq	%rax, %rax
    0000240d: 	js	.Ltmp1833 # Offset: 9229
    0000240f: 	nop # Size: 1
.Ltmp1834:
    00002410: 	movl	(%rbp,%r15,4), %ecx
    00002415: 	movq	%r15, %rdx
    00002418: 	movq	%rbp, %rsi
    0000241b: 	movq	%rbx, %rdi
    0000241e: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEiEEvlT_lT0_ # Offset: 9246
    00002423: 	subq	$0x1, %r15
    00002427: 	jae	.Ltmp1834 # Offset: 9255
.Ltmp1833:
    00002429: 	movq	0x38(%rsp), %rax
    0000242e: 	movq	%rax, %r15
    00002431: 	testq	%rax, %rax
    00002434: 	jle	.Ltmp1835 # Offset: 9268
    00002436: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1836:
    00002440: 	movl	(%rbp), %eax
    00002443: 	movl	(%rbp,%r15,4), %ecx
    00002448: 	xorl	%edx, %edx
    0000244a: 	movq	%r15, %rdi
    0000244d: 	movq	%rbp, %rsi
    00002450: 	movl	%eax, (%rbp,%r15,4)
    00002455: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEiEEvlT_lT0_ # Offset: 9301
    0000245a: 	subq	$0x1, %r15
    0000245e: 	jne	.Ltmp1836 # Offset: 9310
.Ltmp1835:
    00002460: 	movq	0x28(%rsp), %rax
    00002465: 	jmp	.Ltmp1837 # Offset: 9317
    00002467: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1839:
    00002470: 	addq	$0x4, %rax
    00002474: 	movl	-0x8(%rax), %edi
    00002477: 	cmpl	%edi, (%rdx)
    00002479: 	jl	.Ltmp1838 # Offset: 9337
.Ltmp1837:
    0000247f: 	movq	%rax, %rdx
    00002482: 	cmpq	%rax, %r12
    00002485: 	jne	.Ltmp1839 # Offset: 9349
.Ltmp1873:
    00002487: 	addl	$0x1, 0x20(%rsp)
    0000248c: 	movl	0x20(%rsp), %eax
    00002490: 	cmpl	iterations(%rip), %eax
    00002496: 	jl	.Ltmp1840 # Offset: 9366
.Ltmp1829:
    0000249c: 	callq	clock@PLT # Offset: 9372
    000024a1: 	movq	0x10(%rsp), %rdi
    000024a6: 	pxor	%xmm0, %xmm0
    000024aa: 	movq	%rax, end_time(%rip)
    000024b1: 	subq	start_time(%rip), %rax
    000024b8: 	cvtsi2sd	%rax, %xmm0
    000024bd: 	divsd	DATAat0x15638(%rip), %xmm0
    000024c5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9413
    000024ca: 	movq	0x1c0(%rsp), %rdi
    000024d2: 	cmpq	0x8(%rsp), %rdi
    000024d7: 	je	.Ltmp1841 # Offset: 9431
    000024d9: 	movq	0x1d0(%rsp), %rax
    000024e1: 	leaq	0x1(%rax), %rsi
    000024e5: 	callq	_ZdlPvm@PLT # Offset: 9445
.Ltmp1841:
    000024ea: 	movq	0x18(%rsp), %rsi
    000024ef: 	movq	0x10(%rsp), %rdi
    000024f4: 	leaq	DATAat0x152e5(%rip), %rdx
    000024fb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9467
    00002500: 	movl	iterations(%rip), %edx
    00002506: 	movl	$0x1, %r8d
    0000250c: 	movl	$0x1, %ecx
    00002511: 	movq	0x1c0(%rsp), %rdi
    00002519: 	movl	$0x7d0, %esi
    0000251e: 	callq	_Z9summarizePKciiii # Offset: 9502
    00002523: 	movl	0x9c(%rsp), %eax
    0000252a: 	movq	0x1c0(%rsp), %rdi
    00002532: 	movl	%eax, iterations(%rip)
    00002538: 	cmpq	0x8(%rsp), %rdi
    0000253d: 	je	.Ltmp1842 # Offset: 9533
    0000253f: 	movq	0x1d0(%rsp), %rax
    00002547: 	leaq	0x1(%rax), %rsi
    0000254b: 	callq	_ZdlPvm@PLT # Offset: 9547
.Ltmp1842:
    00002550: 	movq	0x1a0(%rsp), %rdi
    00002558: 	leaq	0x1b0(%rsp), %rax
    00002560: 	cmpq	%rax, %rdi
    00002563: 	je	.Ltmp1843 # Offset: 9571
    00002565: 	movq	0x1b0(%rsp), %rax
    0000256d: 	leaq	0x1(%rax), %rsi
    00002571: 	callq	_ZdlPvm@PLT # Offset: 9585
.Ltmp1843:
    00002576: 	movq	0x180(%rsp), %rdi
    0000257e: 	leaq	0x190(%rsp), %rax
    00002586: 	cmpq	%rax, %rdi
    00002589: 	je	.Ltmp1844 # Offset: 9609
    0000258b: 	movq	0x190(%rsp), %rax
    00002593: 	leaq	0x1(%rax), %rsi
    00002597: 	callq	_ZdlPvm@PLT # Offset: 9623
.Ltmp1844:
    0000259c: 	movq	0x130(%rsp), %rsi
    000025a4: 	movq	%r14, %rdi
    000025a7: 	subq	%r14, %rsi
    000025aa: 	callq	_ZdlPvm@PLT # Offset: 9642
    000025af: 	movq	0x160(%rsp), %rdi
    000025b7: 	leaq	0x170(%rsp), %rax
    000025bf: 	cmpq	%rax, %rdi
    000025c2: 	je	.Ltmp1845 # Offset: 9666
    000025c4: 	movq	0x170(%rsp), %rax
    000025cc: 	leaq	0x1(%rax), %rsi
    000025d0: 	callq	_ZdlPvm@PLT # Offset: 9680
.Ltmp1845:
    000025d5: 	testq	%rbp, %rbp
    000025d8: 	je	.Ltmp1846 # Offset: 9688
    000025da: 	movq	0x110(%rsp), %rsi
    000025e2: 	movq	%rbp, %rdi
    000025e5: 	subq	%rbp, %rsi
    000025e8: 	callq	_ZdlPvm@PLT # Offset: 9704
.Ltmp1846:
    000025ed: 	movq	0x140(%rsp), %rdi
    000025f5: 	leaq	0x150(%rsp), %rax
    000025fd: 	cmpq	%rax, %rdi
    00002600: 	je	.Ltmp1847 # Offset: 9728
    00002602: 	movq	0x150(%rsp), %rax
    0000260a: 	leaq	0x1(%rax), %rsi
    0000260e: 	callq	_ZdlPvm@PLT # Offset: 9742
.Ltmp1847:
    00002613: 	movq	0x4068(%rsp), %rax
    0000261b: 	subq	%fs:0x28, %rax
    00002624: 	jne	.Ltmp1848 # Offset: 9764
    0000262a: 	addq	$0x4078, %rsp
    00002631: 	popq	%rbx
    00002632: 	popq	%rbp
    00002633: 	popq	%r12
    00002635: 	popq	%r13
    00002637: 	popq	%r14
    00002639: 	popq	%r15
    0000263b: 	retq # Offset: 9787
.Ltmp1791:
    0000263c: 	movq	%r8, %rax
    0000263f: 	subq	%rbp, %rax
    00002642: 	cmpq	$0x4, %rax
    00002646: 	jle	.Ltmp1849 # Offset: 9798
    0000264c: 	movl	(%rbp), %edi
    0000264f: 	movq	%r8, %r9
    00002652: 	movq	%rbp, %rdx
    00002655: 	nopl	(%rax) # Size: 3
.Ltmp1854:
    00002658: 	leaq	-0x4(%r9), %r10
    0000265c: 	cmpl	%edi, %esi
    0000265e: 	jg	.Ltmp1850 # Offset: 9822
    00002660: 	cmpq	%rdx, %r10
    00002663: 	jbe	.Ltmp1851 # Offset: 9827
    00002669: 	movl	(%rdx), %ecx
    0000266b: 	cmpl	%edi, %ecx
    0000266d: 	jge	.Ltmp1852 # Offset: 9837
    0000266f: 	leaq	0x4(%rdx), %rax
    00002673: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1853:
    00002678: 	movq	%rax, %rdx
    0000267b: 	movl	(%rax), %ecx
    0000267d: 	leaq	0x4(%rax), %rax
    00002681: 	cmpl	%ecx, %edi
    00002683: 	jg	.Ltmp1853 # Offset: 9859
    00002685: 	cmpq	%rdx, %r10
    00002688: 	jbe	.Ltmp1851 # Offset: 9864
.Ltmp1852:
    0000268e: 	movl	%ecx, (%r10)
    00002691: 	movl	%esi, (%rdx)
.Ltmp1850:
    00002693: 	movl	-0x4(%r10), %esi
    00002697: 	movq	%r10, %r9
    0000269a: 	jmp	.Ltmp1854 # Offset: 9882
.Ltmp1943:
    0000269c: 	movq	%r10, %rsi
    0000269f: 	movq	%r8, 0xa0(%rsp)
    000026a7: 	movq	%r10, 0xa8(%rsp)
    000026af: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 9903
    000026b4: 	movq	0xa0(%rsp), %rsi
    000026bc: 	movq	0xa8(%rsp), %rdi
    000026c4: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 9924
    000026c9: 	movq	0xa0(%rsp), %r8
.Ltmp1849:
    000026d1: 	movq	%r12, %rax
    000026d4: 	subq	%r8, %rax
    000026d7: 	cmpq	$0x4, %rax
    000026db: 	jle	.Ltmp1789 # Offset: 9947
    000026e1: 	movl	(%r8), %esi
    000026e4: 	movq	%r12, %r9
    000026e7: 	movq	%r8, %rdx
    000026ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1859:
    000026f0: 	movl	-0x4(%r9), %r10d
    000026f4: 	leaq	-0x4(%r9), %rdi
    000026f8: 	cmpl	%r10d, %esi
    000026fb: 	jl	.Ltmp1855 # Offset: 9979
    000026fd: 	cmpq	%rdx, %rdi
    00002700: 	jbe	.Ltmp1856 # Offset: 9984
    00002706: 	movl	(%rdx), %ecx
    00002708: 	cmpl	%esi, %ecx
    0000270a: 	jge	.Ltmp1857 # Offset: 9994
    0000270c: 	leaq	0x4(%rdx), %rax
.Ltmp1858:
    00002710: 	movq	%rax, %rdx
    00002713: 	movl	(%rax), %ecx
    00002715: 	leaq	0x4(%rax), %rax
    00002719: 	cmpl	%ecx, %esi
    0000271b: 	jg	.Ltmp1858 # Offset: 10011
    0000271d: 	cmpq	%rdx, %rdi
    00002720: 	jbe	.Ltmp1856 # Offset: 10016
.Ltmp1857:
    00002726: 	movl	%ecx, (%rdi)
    00002728: 	movl	%r10d, (%rdx)
.Ltmp1855:
    0000272b: 	movq	%rdi, %r9
    0000272e: 	jmp	.Ltmp1859 # Offset: 10030
.Ltmp1752:
    00002730: 	movq	%r8, %rax
    00002733: 	subq	%rbp, %rax
    00002736: 	cmpq	$0x4, %rax
    0000273a: 	jle	.Ltmp1860 # Offset: 10042
    0000273c: 	movl	(%rbp), %esi
    0000273f: 	movq	%r8, %rcx
    00002742: 	movq	%rbp, %rax
    00002745: 	nopl	(%rax) # Size: 3
.Ltmp1865:
    00002748: 	leaq	-0x4(%rcx), %r9
    0000274c: 	cmpl	%edi, %esi
    0000274e: 	jl	.Ltmp1861 # Offset: 10062
    00002750: 	cmpq	%rax, %r9
    00002753: 	jbe	.Ltmp1862 # Offset: 10067
    00002759: 	movl	(%rax), %edx
    0000275b: 	cmpl	%edx, %esi
    0000275d: 	jle	.Ltmp1863 # Offset: 10077
    0000275f: 	nop # Size: 1
.Ltmp1864:
    00002760: 	movl	0x4(%rax), %edx
    00002763: 	addq	$0x4, %rax
    00002767: 	cmpl	%edx, %esi
    00002769: 	jg	.Ltmp1864 # Offset: 10089
    0000276b: 	cmpq	%rax, %r9
    0000276e: 	jbe	.Ltmp1862 # Offset: 10094
.Ltmp1863:
    00002774: 	movl	%edx, (%r9)
    00002777: 	movl	%edi, (%rax)
.Ltmp1861:
    00002779: 	movl	-0x4(%r9), %edi
    0000277d: 	movq	%r9, %rcx
    00002780: 	jmp	.Ltmp1865 # Offset: 10112
.Ltmp1899:
    00002782: 	movq	%r9, %rsi
    00002785: 	movq	%r10, %rdi
    00002788: 	movq	%r8, 0xa0(%rsp)
    00002790: 	movq	%r9, 0xa8(%rsp)
    00002798: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 10136
    0000279d: 	movq	0xa0(%rsp), %rsi
    000027a5: 	movq	0xa8(%rsp), %rdi
    000027ad: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 10157
    000027b2: 	movq	0xa0(%rsp), %r8
.Ltmp1860:
    000027ba: 	movq	%r12, %rax
    000027bd: 	subq	%r8, %rax
    000027c0: 	cmpq	$0x4, %rax
    000027c4: 	jle	.Ltmp1750 # Offset: 10180
    000027ca: 	movl	(%r8), %esi
    000027cd: 	movq	%r12, %rcx
    000027d0: 	movq	%r8, %rax
    000027d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1870:
    000027d8: 	movl	-0x4(%rcx), %r9d
    000027dc: 	leaq	-0x4(%rcx), %rdi
    000027e0: 	cmpl	%r9d, %esi
    000027e3: 	jl	.Ltmp1866 # Offset: 10211
    000027e5: 	cmpq	%rax, %rdi
    000027e8: 	jbe	.Ltmp1867 # Offset: 10216
    000027ee: 	movl	(%rax), %edx
    000027f0: 	cmpl	%edx, %esi
    000027f2: 	jle	.Ltmp1868 # Offset: 10226
    000027f4: 	nopl	(%rax) # Size: 4
.Ltmp1869:
    000027f8: 	movl	0x4(%rax), %edx
    000027fb: 	addq	$0x4, %rax
    000027ff: 	cmpl	%edx, %esi
    00002801: 	jg	.Ltmp1869 # Offset: 10241
    00002803: 	cmpq	%rax, %rdi
    00002806: 	jbe	.Ltmp1867 # Offset: 10246
.Ltmp1868:
    0000280c: 	movl	%edx, (%rdi)
    0000280e: 	movl	%r9d, (%rax)
.Ltmp1866:
    00002811: 	movq	%rdi, %rcx
    00002814: 	jmp	.Ltmp1870 # Offset: 10260
.Ltmp1757:
    00002816: 	movq	0x1c0(%rsp), %rdx
    0000281e: 	leaq	DATAat0x151ba(%rip), %rsi
    00002825: 	movl	$0x1, %edi
    0000282a: 	xorl	%eax, %eax
    0000282c: 	callq	__printf_chk@PLT # Offset: 10284
    00002831: 	jmp	.Ltmp1871 # Offset: 10289
.Ltmp1779:
    00002836: 	movq	0x1c0(%rsp), %rdx
    0000283e: 	leaq	DATAat0x151ba(%rip), %rsi
    00002845: 	movl	$0x1, %edi
    0000284a: 	xorl	%eax, %eax
    0000284c: 	callq	__printf_chk@PLT # Offset: 10316
    00002851: 	jmp	.Ltmp1872 # Offset: 10321
.Ltmp1838:
    00002856: 	movq	0x1c0(%rsp), %rdx
    0000285e: 	leaq	DATAat0x151ba(%rip), %rsi
    00002865: 	movl	$0x1, %edi
    0000286a: 	xorl	%eax, %eax
    0000286c: 	callq	__printf_chk@PLT # Offset: 10348
    00002871: 	jmp	.Ltmp1873 # Offset: 10353
.Ltmp1823:
    00002876: 	movq	0x1c0(%rsp), %rdx
    0000287e: 	leaq	DATAat0x151ba(%rip), %rsi
    00002885: 	movl	$0x1, %edi
    0000288a: 	xorl	%eax, %eax
    0000288c: 	callq	__printf_chk@PLT # Offset: 10380
    00002891: 	jmp	.Ltmp1874 # Offset: 10385
.Ltmp1803:
    00002896: 	movq	0x1c0(%rsp), %rdx
    0000289e: 	leaq	DATAat0x151ba(%rip), %rsi
    000028a5: 	movl	$0x1, %edi
    000028aa: 	xorl	%eax, %eax
    000028ac: 	callq	__printf_chk@PLT # Offset: 10412
    000028b1: 	jmp	.Ltmp1875 # Offset: 10417
.Ltmp1796:
    000028b6: 	movq	0x1c0(%rsp), %rdx
    000028be: 	leaq	DATAat0x151ba(%rip), %rsi
    000028c5: 	movl	$0x1, %edi
    000028ca: 	xorl	%eax, %eax
    000028cc: 	callq	__printf_chk@PLT # Offset: 10444
    000028d1: 	jmp	.Ltmp1876 # Offset: 10449
.Ltmp1816:
    000028d6: 	movq	0x1c0(%rsp), %rdx
    000028de: 	leaq	DATAat0x151ba(%rip), %rsi
    000028e5: 	movl	$0x1, %edi
    000028ea: 	xorl	%eax, %eax
    000028ec: 	callq	__printf_chk@PLT # Offset: 10476
    000028f1: 	jmp	.Ltmp1877 # Offset: 10481
.Ltmp1742:
    000028f6: 	movq	0x1c0(%rsp), %rdx
    000028fe: 	leaq	DATAat0x151ba(%rip), %rsi
    00002905: 	movl	$0x1, %edi
    0000290a: 	xorl	%eax, %eax
    0000290c: 	callq	__printf_chk@PLT # Offset: 10508
    00002911: 	jmp	.Ltmp1878 # Offset: 10513
.Ltmp1714:
    00002916: 	movq	0x1c0(%rsp), %rdx
    0000291e: 	leaq	DATAat0x151ba(%rip), %rsi
    00002925: 	movl	$0x1, %edi
    0000292a: 	xorl	%eax, %eax
    0000292c: 	callq	__printf_chk@PLT # Offset: 10540
    00002931: 	addl	$0x1, %r15d
    00002935: 	cmpl	iterations(%rip), %r15d
    0000293c: 	jl	.Ltmp1716 # Offset: 10556
    00002942: 	jmp	.Ltmp1710 # Offset: 10562
.Ltmp1730:
    00002947: 	movq	0x1c0(%rsp), %rdx
    0000294f: 	leaq	DATAat0x151ba(%rip), %rsi
    00002956: 	movl	$0x1, %edi
    0000295b: 	xorl	%eax, %eax
    0000295d: 	callq	__printf_chk@PLT # Offset: 10589
    00002962: 	jmp	.Ltmp1879 # Offset: 10594
.Ltmp1706:
    00002967: 	movq	0x1c0(%rsp), %rdx
    0000296f: 	leaq	DATAat0x151ba(%rip), %rsi
    00002976: 	movl	$0x1, %edi
    0000297b: 	xorl	%eax, %eax
    0000297d: 	callq	__printf_chk@PLT # Offset: 10621
    00002982: 	jmp	.Ltmp1880 # Offset: 10626
.Ltmp1692:
    00002987: 	movq	0x1c0(%rsp), %rdx
    0000298f: 	leaq	DATAat0x151ba(%rip), %rsi
    00002996: 	movl	$0x1, %edi
    0000299b: 	xorl	%eax, %eax
    0000299d: 	callq	__printf_chk@PLT # Offset: 10653
    000029a2: 	movl	iterations(%rip), %r8d
    000029a9: 	addl	$0x1, %r15d
    000029ad: 	cmpl	%r8d, %r15d
    000029b0: 	jl	.Ltmp1694 # Offset: 10672
    000029b6: 	jmp	.Ltmp1688 # Offset: 10678
.Ltmp1867:
    000029bb: 	movq	%rcx, %rax
    000029be: 	subq	%r8, %rax
    000029c1: 	cmpq	$0x4, %rax
    000029c5: 	jle	.Ltmp1881 # Offset: 10693
    000029c7: 	movl	(%r8), %edi
    000029ca: 	movq	%rcx, %r9
    000029cd: 	movq	%r8, %rdx
.Ltmp1886:
    000029d0: 	movl	-0x4(%r9), %r11d
    000029d4: 	leaq	-0x4(%r9), %r10
    000029d8: 	cmpl	%r11d, %edi
    000029db: 	jl	.Ltmp1882 # Offset: 10715
    000029dd: 	cmpq	%rdx, %r10
    000029e0: 	jbe	.Ltmp1883 # Offset: 10720
    000029e2: 	movl	(%rdx), %esi
    000029e4: 	cmpl	%esi, %edi
    000029e6: 	jle	.Ltmp1884 # Offset: 10726
    000029e8: 	leaq	0x4(%rdx), %rax
    000029ec: 	nopl	(%rax) # Size: 4
.Ltmp1885:
    000029f0: 	movq	%rax, %rdx
    000029f3: 	movl	(%rax), %esi
    000029f5: 	leaq	0x4(%rax), %rax
    000029f9: 	cmpl	%esi, %edi
    000029fb: 	jg	.Ltmp1885 # Offset: 10747
    000029fd: 	cmpq	%rdx, %r10
    00002a00: 	jbe	.Ltmp1883 # Offset: 10752
.Ltmp1884:
    00002a02: 	movl	%esi, (%r10)
    00002a05: 	movl	%r11d, (%rdx)
.Ltmp1882:
    00002a08: 	movq	%r10, %r9
    00002a0b: 	jmp	.Ltmp1886 # Offset: 10763
.Ltmp1883:
    00002a0d: 	movq	%r9, %rsi
    00002a10: 	movq	%r8, %rdi
    00002a13: 	movq	%rcx, 0xa0(%rsp)
    00002a1b: 	movq	%r9, 0xa8(%rsp)
    00002a23: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 10787
    00002a28: 	movq	0xa0(%rsp), %rsi
    00002a30: 	movq	0xa8(%rsp), %rdi
    00002a38: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 10808
    00002a3d: 	movq	0xa0(%rsp), %rcx
.Ltmp1881:
    00002a45: 	movq	%r12, %rax
    00002a48: 	movq	%rcx, %r10
    00002a4b: 	subq	%rcx, %rax
    00002a4e: 	cmpq	$0x4, %rax
    00002a52: 	jle	.Ltmp1750 # Offset: 10834
    00002a58: 	movl	(%rcx), %esi
    00002a5a: 	movq	%r12, %r8
.Ltmp1891:
    00002a5d: 	movl	-0x4(%r8), %r9d
    00002a61: 	leaq	-0x4(%r8), %rdi
    00002a65: 	cmpl	%r9d, %esi
    00002a68: 	jl	.Ltmp1887 # Offset: 10856
    00002a6a: 	cmpq	%rcx, %rdi
    00002a6d: 	jbe	.Ltmp1888 # Offset: 10861
    00002a73: 	movl	(%rcx), %edx
    00002a75: 	cmpl	%edx, %esi
    00002a77: 	jle	.Ltmp1889 # Offset: 10871
    00002a79: 	leaq	0x4(%rcx), %rax
    00002a7d: 	nopl	(%rax) # Size: 3
.Ltmp1890:
    00002a80: 	movq	%rax, %rcx
    00002a83: 	movl	(%rax), %edx
    00002a85: 	leaq	0x4(%rax), %rax
    00002a89: 	cmpl	%edx, %esi
    00002a8b: 	jg	.Ltmp1890 # Offset: 10891
    00002a8d: 	cmpq	%rcx, %rdi
    00002a90: 	jbe	.Ltmp1888 # Offset: 10896
.Ltmp1889:
    00002a96: 	movl	%edx, (%rdi)
    00002a98: 	movl	%r9d, (%rcx)
.Ltmp1887:
    00002a9b: 	movq	%rdi, %r8
    00002a9e: 	jmp	.Ltmp1891 # Offset: 10910
.Ltmp1862:
    00002aa0: 	movq	%rcx, %rax
    00002aa3: 	subq	%rbp, %rax
    00002aa6: 	cmpq	$0x4, %rax
    00002aaa: 	jle	.Ltmp1892 # Offset: 10922
    00002ab0: 	movl	(%rbp), %edi
    00002ab3: 	movq	%rcx, %r9
    00002ab6: 	movq	%rbp, %rdx
.Ltmp1897:
    00002ab9: 	movl	-0x4(%r9), %r11d
    00002abd: 	leaq	-0x4(%r9), %r10
    00002ac1: 	cmpl	%r11d, %edi
    00002ac4: 	jl	.Ltmp1893 # Offset: 10948
    00002ac6: 	cmpq	%rdx, %r10
    00002ac9: 	jbe	.Ltmp1894 # Offset: 10953
    00002acb: 	movl	(%rdx), %esi
    00002acd: 	cmpl	%esi, %edi
    00002acf: 	jle	.Ltmp1895 # Offset: 10959
    00002ad1: 	leaq	0x4(%rdx), %rax
    00002ad5: 	nopl	(%rax) # Size: 3
.Ltmp1896:
    00002ad8: 	movq	%rax, %rdx
    00002adb: 	movl	(%rax), %esi
    00002add: 	leaq	0x4(%rax), %rax
    00002ae1: 	cmpl	%esi, %edi
    00002ae3: 	jg	.Ltmp1896 # Offset: 10979
    00002ae5: 	cmpq	%rdx, %r10
    00002ae8: 	jbe	.Ltmp1894 # Offset: 10984
.Ltmp1895:
    00002aea: 	movl	%esi, (%r10)
    00002aed: 	movl	%r11d, (%rdx)
.Ltmp1893:
    00002af0: 	movq	%r10, %r9
    00002af3: 	jmp	.Ltmp1897 # Offset: 10995
.Ltmp1894:
    00002af5: 	movq	%r9, %rsi
    00002af8: 	movq	%rbp, %rdi
    00002afb: 	movq	%r8, 0xb0(%rsp)
    00002b03: 	movq	%rcx, 0xa0(%rsp)
    00002b0b: 	movq	%r9, 0xa8(%rsp)
    00002b13: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 11027
    00002b18: 	movq	0xa0(%rsp), %rsi
    00002b20: 	movq	0xa8(%rsp), %rdi
    00002b28: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEEvT_S8_ # Offset: 11048
    00002b2d: 	movq	0xb0(%rsp), %r8
    00002b35: 	movq	0xa0(%rsp), %rcx
.Ltmp1892:
    00002b3d: 	movq	%r8, %rax
    00002b40: 	movq	%rcx, %r10
    00002b43: 	subq	%rcx, %rax
    00002b46: 	cmpq	$0x4, %rax
    00002b4a: 	jle	.Ltmp1860 # Offset: 11082
    00002b50: 	movl	(%rcx), %esi
    00002b52: 	movq	%r8, %r9
.Ltmp1902:
    00002b55: 	movl	-0x4(%r9), %r11d
    00002b59: 	leaq	-0x4(%r9), %rdi
    00002b5d: 	cmpl	%r11d, %esi
    00002b60: 	jl	.Ltmp1898 # Offset: 11104
    00002b62: 	cmpq	%rcx, %rdi
    00002b65: 	jbe	.Ltmp1899 # Offset: 11109
    00002b6b: 	movl	(%rcx), %edx
    00002b6d: 	cmpl	%edx, %esi
    00002b6f: 	jle	.Ltmp1900 # Offset: 11119
    00002b71: 	leaq	0x4(%rcx), %rax
    00002b75: 	nopl	(%rax) # Size: 3
.Ltmp1901:
    00002b78: 	movq	%rax, %rcx
    00002b7b: 	movl	(%rax), %edx
    00002b7d: 	leaq	0x4(%rax), %rax
    00002b81: 	cmpl	%edx, %esi
    00002b83: 	jg	.Ltmp1901 # Offset: 11139
    00002b85: 	cmpq	%rcx, %rdi
    00002b88: 	jbe	.Ltmp1899 # Offset: 11144
.Ltmp1900:
    00002b8e: 	movl	%edx, (%rdi)
    00002b90: 	movl	%r11d, (%rcx)
.Ltmp1898:
    00002b93: 	movq	%rdi, %r9
    00002b96: 	jmp	.Ltmp1902 # Offset: 11158
.Ltmp1775:
    00002b98: 	movq	%r9, %rax
    00002b9b: 	subq	%r8, %rax
    00002b9e: 	cmpq	$0x4, %rax
    00002ba2: 	jle	.Ltmp1903 # Offset: 11170
    00002ba8: 	movl	(%r8), %esi
    00002bab: 	movq	%r9, %r10
    00002bae: 	movq	%r8, %rdx
.Ltmp1908:
    00002bb1: 	movl	-0x4(%r10), %r11d
    00002bb5: 	leaq	-0x4(%r10), %rdi
    00002bb9: 	cmpl	%r11d, %esi
    00002bbc: 	jl	.Ltmp1904 # Offset: 11196
    00002bbe: 	cmpq	%rdx, %rdi
    00002bc1: 	jbe	.Ltmp1905 # Offset: 11201
    00002bc3: 	movl	(%rdx), %ecx
    00002bc5: 	cmpl	%esi, %ecx
    00002bc7: 	jge	.Ltmp1906 # Offset: 11207
    00002bc9: 	leaq	0x4(%rdx), %rax
    00002bcd: 	nopl	(%rax) # Size: 3
.Ltmp1907:
    00002bd0: 	movq	%rax, %rdx
    00002bd3: 	movl	(%rax), %ecx
    00002bd5: 	leaq	0x4(%rax), %rax
    00002bd9: 	cmpl	%ecx, %esi
    00002bdb: 	jg	.Ltmp1907 # Offset: 11227
    00002bdd: 	cmpq	%rdx, %rdi
    00002be0: 	jbe	.Ltmp1905 # Offset: 11232
.Ltmp1906:
    00002be2: 	movl	%ecx, (%rdi)
    00002be4: 	movl	%r11d, (%rdx)
.Ltmp1904:
    00002be7: 	movq	%rdi, %r10
    00002bea: 	jmp	.Ltmp1908 # Offset: 11242
.Ltmp1905:
    00002bec: 	movq	0x28(%rsp), %rsi
    00002bf1: 	movq	%r15, %rdi
    00002bf4: 	movq	%r9, 0x50(%rsp)
    00002bf9: 	movq	%r10, 0xe8(%rsp)
    00002c01: 	movq	%r10, 0x58(%rsp)
    00002c06: 	movq	%r8, 0xf8(%rsp)
    00002c0e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 11278
    00002c13: 	movq	0x50(%rsp), %r9
    00002c18: 	movq	0x58(%rsp), %r10
    00002c1d: 	movq	%r15, %rdi
    00002c20: 	movq	0x28(%rsp), %rsi
    00002c25: 	movq	%r9, 0xe8(%rsp)
    00002c2d: 	movq	%r10, 0xf8(%rsp)
    00002c35: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 11317
    00002c3a: 	movq	0x50(%rsp), %r9
.Ltmp1903:
    00002c3f: 	movq	%r13, %rax
    00002c42: 	subq	%r9, %rax
    00002c45: 	cmpq	$0x4, %rax
    00002c49: 	jle	.Ltmp1773 # Offset: 11337
    00002c4f: 	movl	(%r9), %ecx
    00002c52: 	movq	%r9, %rax
    00002c55: 	movq	%r13, %r8
.Ltmp1913:
    00002c58: 	movl	-0x4(%r8), %edi
    00002c5c: 	leaq	-0x4(%r8), %rsi
    00002c60: 	cmpl	%edi, %ecx
    00002c62: 	jl	.Ltmp1909 # Offset: 11362
    00002c64: 	cmpq	%rax, %rsi
    00002c67: 	jbe	.Ltmp1910 # Offset: 11367
    00002c6d: 	movl	(%rax), %edx
    00002c6f: 	cmpl	%ecx, %edx
    00002c71: 	jge	.Ltmp1911 # Offset: 11377
    00002c73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1912:
    00002c78: 	movl	0x4(%rax), %edx
    00002c7b: 	addq	$0x4, %rax
    00002c7f: 	cmpl	%edx, %ecx
    00002c81: 	jg	.Ltmp1912 # Offset: 11393
    00002c83: 	cmpq	%rax, %rsi
    00002c86: 	jbe	.Ltmp1910 # Offset: 11398
.Ltmp1911:
    00002c8c: 	movl	%edx, (%rsi)
    00002c8e: 	movl	%edi, (%rax)
.Ltmp1909:
    00002c90: 	movq	%rsi, %r8
    00002c93: 	jmp	.Ltmp1913 # Offset: 11411
.Ltmp1769:
    00002c95: 	movq	%rcx, %rax
    00002c98: 	subq	%rbx, %rax
    00002c9b: 	cmpq	$0x4, %rax
    00002c9f: 	jle	.Ltmp1914 # Offset: 11423
    00002ca5: 	movl	0x1e0(%rsp), %edi
    00002cac: 	movq	%rcx, %r9
    00002caf: 	movq	%rbx, %rdx
.Ltmp1919:
    00002cb2: 	movl	-0x4(%r9), %r11d
    00002cb6: 	leaq	-0x4(%r9), %r10
    00002cba: 	cmpl	%r11d, %edi
    00002cbd: 	jl	.Ltmp1915 # Offset: 11453
    00002cbf: 	cmpq	%rdx, %r10
    00002cc2: 	jbe	.Ltmp1916 # Offset: 11458
    00002cc4: 	movl	(%rdx), %esi
    00002cc6: 	cmpl	%esi, %edi
    00002cc8: 	jle	.Ltmp1917 # Offset: 11464
    00002cca: 	leaq	0x4(%rdx), %rax
    00002cce: 	nop # Size: 2
.Ltmp1918:
    00002cd0: 	movq	%rax, %rdx
    00002cd3: 	movl	(%rax), %esi
    00002cd5: 	leaq	0x4(%rax), %rax
    00002cd9: 	cmpl	%esi, %edi
    00002cdb: 	jg	.Ltmp1918 # Offset: 11483
    00002cdd: 	cmpq	%rdx, %r10
    00002ce0: 	jbe	.Ltmp1916 # Offset: 11488
.Ltmp1917:
    00002ce2: 	movl	%esi, (%r10)
    00002ce5: 	movl	%r11d, (%rdx)
.Ltmp1915:
    00002ce8: 	movq	%r10, %r9
    00002ceb: 	jmp	.Ltmp1919 # Offset: 11499
.Ltmp1916:
    00002ced: 	movq	0x28(%rsp), %rsi
    00002cf2: 	movq	%r15, %rdi
    00002cf5: 	movq	%r8, 0x60(%rsp)
    00002cfa: 	movq	%rcx, 0x50(%rsp)
    00002cff: 	movq	%r9, 0xe8(%rsp)
    00002d07: 	movq	%r9, 0x58(%rsp)
    00002d0c: 	movq	%rbx, 0xf8(%rsp)
    00002d14: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 11540
    00002d19: 	movq	0x50(%rsp), %rcx
    00002d1e: 	movq	0x58(%rsp), %r9
    00002d23: 	movq	%r15, %rdi
    00002d26: 	movq	0x28(%rsp), %rsi
    00002d2b: 	movq	%rcx, 0xe8(%rsp)
    00002d33: 	movq	%r9, 0xf8(%rsp)
    00002d3b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 11579
    00002d40: 	movq	0x60(%rsp), %r8
    00002d45: 	movq	0x50(%rsp), %rcx
.Ltmp1914:
    00002d4a: 	movq	%r8, %rax
    00002d4d: 	subq	%rcx, %rax
    00002d50: 	cmpq	$0x4, %rax
    00002d54: 	jle	.Ltmp1767 # Offset: 11604
    00002d5a: 	movl	(%rcx), %edi
    00002d5c: 	movq	%r8, %r9
    00002d5f: 	movq	%rcx, %rdx
.Ltmp1924:
    00002d62: 	movl	-0x4(%r9), %r11d
    00002d66: 	leaq	-0x4(%r9), %r10
    00002d6a: 	cmpl	%r11d, %edi
    00002d6d: 	jl	.Ltmp1920 # Offset: 11629
    00002d6f: 	cmpq	%rdx, %r10
    00002d72: 	jbe	.Ltmp1921 # Offset: 11634
    00002d78: 	movl	(%rdx), %esi
    00002d7a: 	cmpl	%esi, %edi
    00002d7c: 	jle	.Ltmp1922 # Offset: 11644
    00002d7e: 	leaq	0x4(%rdx), %rax
    00002d82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1923:
    00002d88: 	movq	%rax, %rdx
    00002d8b: 	movl	(%rax), %esi
    00002d8d: 	leaq	0x4(%rax), %rax
    00002d91: 	cmpl	%esi, %edi
    00002d93: 	jg	.Ltmp1923 # Offset: 11667
    00002d95: 	cmpq	%rdx, %r10
    00002d98: 	jbe	.Ltmp1921 # Offset: 11672
.Ltmp1922:
    00002d9e: 	movl	%esi, (%r10)
    00002da1: 	movl	%r11d, (%rdx)
.Ltmp1920:
    00002da4: 	movq	%r10, %r9
    00002da7: 	jmp	.Ltmp1924 # Offset: 11687
.Ltmp1856:
    00002da9: 	movq	%r9, %rax
    00002dac: 	subq	%r8, %rax
    00002daf: 	cmpq	$0x4, %rax
    00002db3: 	jle	.Ltmp1925 # Offset: 11699
    00002db5: 	movl	(%r8), %esi
    00002db8: 	movq	%r9, %r10
    00002dbb: 	movq	%r8, %rdx
.Ltmp1930:
    00002dbe: 	movl	-0x4(%r10), %r11d
    00002dc2: 	leaq	-0x4(%r10), %rdi
    00002dc6: 	cmpl	%r11d, %esi
    00002dc9: 	jl	.Ltmp1926 # Offset: 11721
    00002dcb: 	cmpq	%rdx, %rdi
    00002dce: 	jbe	.Ltmp1927 # Offset: 11726
    00002dd0: 	movl	(%rdx), %ecx
    00002dd2: 	cmpl	%esi, %ecx
    00002dd4: 	jge	.Ltmp1928 # Offset: 11732
    00002dd6: 	leaq	0x4(%rdx), %rax
    00002dda: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1929:
    00002de0: 	movq	%rax, %rdx
    00002de3: 	movl	(%rax), %ecx
    00002de5: 	leaq	0x4(%rax), %rax
    00002de9: 	cmpl	%ecx, %esi
    00002deb: 	jg	.Ltmp1929 # Offset: 11755
    00002ded: 	cmpq	%rdx, %rdi
    00002df0: 	jbe	.Ltmp1927 # Offset: 11760
.Ltmp1928:
    00002df2: 	movl	%ecx, (%rdi)
    00002df4: 	movl	%r11d, (%rdx)
.Ltmp1926:
    00002df7: 	movq	%rdi, %r10
    00002dfa: 	jmp	.Ltmp1930 # Offset: 11770
.Ltmp1927:
    00002dfc: 	movq	%r10, %rsi
    00002dff: 	movq	%r8, %rdi
    00002e02: 	movq	%r9, 0xa0(%rsp)
    00002e0a: 	movq	%r10, 0xa8(%rsp)
    00002e12: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 11794
    00002e17: 	movq	0xa0(%rsp), %rsi
    00002e1f: 	movq	0xa8(%rsp), %rdi
    00002e27: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 11815
    00002e2c: 	movq	0xa0(%rsp), %r9
.Ltmp1925:
    00002e34: 	movq	%r12, %rax
    00002e37: 	movq	%r9, %r10
    00002e3a: 	subq	%r9, %rax
    00002e3d: 	cmpq	$0x4, %rax
    00002e41: 	jle	.Ltmp1789 # Offset: 11841
    00002e47: 	movl	(%r9), %ecx
    00002e4a: 	movq	%r12, %r8
.Ltmp1935:
    00002e4d: 	movl	-0x4(%r8), %edi
    00002e51: 	leaq	-0x4(%r8), %rsi
    00002e55: 	cmpl	%edi, %ecx
    00002e57: 	jl	.Ltmp1931 # Offset: 11863
    00002e59: 	cmpq	%r9, %rsi
    00002e5c: 	jbe	.Ltmp1932 # Offset: 11868
    00002e62: 	movl	(%r9), %edx
    00002e65: 	cmpl	%ecx, %edx
    00002e67: 	jge	.Ltmp1933 # Offset: 11879
    00002e69: 	leaq	0x4(%r9), %rax
    00002e6d: 	nopl	(%rax) # Size: 3
.Ltmp1934:
    00002e70: 	movq	%rax, %r9
    00002e73: 	movl	(%rax), %edx
    00002e75: 	leaq	0x4(%rax), %rax
    00002e79: 	cmpl	%edx, %ecx
    00002e7b: 	jg	.Ltmp1934 # Offset: 11899
    00002e7d: 	cmpq	%r9, %rsi
    00002e80: 	jbe	.Ltmp1932 # Offset: 11904
.Ltmp1933:
    00002e86: 	movl	%edx, (%rsi)
    00002e88: 	movl	%edi, (%r9)
.Ltmp1931:
    00002e8b: 	movq	%rsi, %r8
    00002e8e: 	jmp	.Ltmp1935 # Offset: 11918
.Ltmp1851:
    00002e90: 	movq	%r9, %rax
    00002e93: 	subq	%rbp, %rax
    00002e96: 	cmpq	$0x4, %rax
    00002e9a: 	jle	.Ltmp1936 # Offset: 11930
    00002ea0: 	movl	(%rbp), %esi
    00002ea3: 	movq	%r9, %r10
    00002ea6: 	movq	%rbp, %rdx
.Ltmp1941:
    00002ea9: 	movl	-0x4(%r10), %r11d
    00002ead: 	leaq	-0x4(%r10), %rdi
    00002eb1: 	cmpl	%r11d, %esi
    00002eb4: 	jl	.Ltmp1937 # Offset: 11956
    00002eb6: 	cmpq	%rdx, %rdi
    00002eb9: 	jbe	.Ltmp1938 # Offset: 11961
    00002ebb: 	movl	(%rdx), %ecx
    00002ebd: 	cmpl	%esi, %ecx
    00002ebf: 	jge	.Ltmp1939 # Offset: 11967
    00002ec1: 	leaq	0x4(%rdx), %rax
    00002ec5: 	nopl	(%rax) # Size: 3
.Ltmp1940:
    00002ec8: 	movq	%rax, %rdx
    00002ecb: 	movl	(%rax), %ecx
    00002ecd: 	leaq	0x4(%rax), %rax
    00002ed1: 	cmpl	%ecx, %esi
    00002ed3: 	jg	.Ltmp1940 # Offset: 11987
    00002ed5: 	cmpq	%rdx, %rdi
    00002ed8: 	jbe	.Ltmp1938 # Offset: 11992
.Ltmp1939:
    00002eda: 	movl	%ecx, (%rdi)
    00002edc: 	movl	%r11d, (%rdx)
.Ltmp1937:
    00002edf: 	movq	%rdi, %r10
    00002ee2: 	jmp	.Ltmp1941 # Offset: 12002
.Ltmp1938:
    00002ee4: 	movq	%r10, %rsi
    00002ee7: 	movq	%rbp, %rdi
    00002eea: 	movq	%r9, 0xa0(%rsp)
    00002ef2: 	movq	%r8, 0xb0(%rsp)
    00002efa: 	movq	%r10, 0xa8(%rsp)
    00002f02: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 12034
    00002f07: 	movq	0xa0(%rsp), %rsi
    00002f0f: 	movq	0xa8(%rsp), %rdi
    00002f17: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEiEEEvT_SB_ # Offset: 12055
    00002f1c: 	movq	0xb0(%rsp), %r8
    00002f24: 	movq	0xa0(%rsp), %r9
.Ltmp1936:
    00002f2c: 	movq	%r8, %rax
    00002f2f: 	movq	%r9, %rdi
    00002f32: 	subq	%r9, %rax
    00002f35: 	cmpq	$0x4, %rax
    00002f39: 	jle	.Ltmp1849 # Offset: 12089
    00002f3f: 	movl	(%r9), %ecx
    00002f42: 	movq	%r8, %r10
.Ltmp1946:
    00002f45: 	movl	-0x4(%r10), %r11d
    00002f49: 	leaq	-0x4(%r10), %rsi
    00002f4d: 	cmpl	%r11d, %ecx
    00002f50: 	jl	.Ltmp1942 # Offset: 12112
    00002f52: 	cmpq	%r9, %rsi
    00002f55: 	jbe	.Ltmp1943 # Offset: 12117
    00002f5b: 	movl	(%r9), %edx
    00002f5e: 	cmpl	%edx, %ecx
    00002f60: 	jle	.Ltmp1944 # Offset: 12128
    00002f62: 	leaq	0x4(%r9), %rax
    00002f66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1945:
    00002f70: 	movq	%rax, %r9
    00002f73: 	movl	(%rax), %edx
    00002f75: 	leaq	0x4(%rax), %rax
    00002f79: 	cmpl	%edx, %ecx
    00002f7b: 	jg	.Ltmp1945 # Offset: 12155
    00002f7d: 	cmpq	%r9, %rsi
    00002f80: 	jbe	.Ltmp1943 # Offset: 12160
.Ltmp1944:
    00002f86: 	movl	%edx, (%rsi)
    00002f88: 	movl	%r11d, (%r9)
.Ltmp1942:
    00002f8b: 	movq	%rsi, %r10
    00002f8e: 	jmp	.Ltmp1946 # Offset: 12174
.Ltmp1831:
    00002f90: 	movq	(%rsp), %rcx
    00002f94: 	xorl	%eax, %eax
    00002f96: 	subq	%r14, %rcx
.Ltmp1947:
    00002f99: 	movl	(%r14,%rax), %edx
    00002f9d: 	movl	%edx, (%rbp,%rax)
    00002fa1: 	addq	$0x4, %rax
    00002fa5: 	cmpq	%rcx, %rax
    00002fa8: 	jne	.Ltmp1947 # Offset: 12200
    00002faa: 	jmp	.Ltmp1830 # Offset: 12202
.Ltmp1809:
    00002faf: 	movq	(%rsp), %rcx
    00002fb3: 	xorl	%eax, %eax
    00002fb5: 	subq	%r14, %rcx
.Ltmp1948:
    00002fb8: 	movl	(%r14,%rax), %edx
    00002fbc: 	movl	%edx, (%rbp,%rax)
    00002fc0: 	addq	$0x4, %rax
    00002fc4: 	cmpq	%rcx, %rax
    00002fc7: 	jne	.Ltmp1948 # Offset: 12231
    00002fc9: 	jmp	.Ltmp1808 # Offset: 12233
.Ltmp1787:
    00002fce: 	movq	(%rsp), %rcx
    00002fd2: 	xorl	%eax, %eax
    00002fd4: 	subq	%r14, %rcx
.Ltmp1949:
    00002fd7: 	movl	(%r14,%rax), %edx
    00002fdb: 	movl	%edx, (%rbp,%rax)
    00002fdf: 	addq	$0x4, %rax
    00002fe3: 	cmpq	%rax, %rcx
    00002fe6: 	jne	.Ltmp1949 # Offset: 12262
    00002fe8: 	jmp	.Ltmp1786 # Offset: 12264
.Ltmp1748:
    00002fed: 	movq	(%rsp), %rcx
    00002ff1: 	xorl	%eax, %eax
    00002ff3: 	subq	%r14, %rcx
.Ltmp1950:
    00002ff6: 	movl	(%r14,%rax), %edx
    00002ffa: 	movl	%edx, (%rbp,%rax)
    00002ffe: 	addq	$0x4, %rax
    00003002: 	cmpq	%rax, %rcx
    00003005: 	jne	.Ltmp1950 # Offset: 12293
    00003007: 	jmp	.Ltmp1747 # Offset: 12295
.Ltmp1722:
    0000300c: 	movq	(%rsp), %rcx
    00003010: 	xorl	%eax, %eax
    00003012: 	subq	%r14, %rcx
.Ltmp1951:
    00003015: 	movl	(%r14,%rax), %edx
    00003019: 	movl	%edx, (%rbp,%rax)
    0000301d: 	addq	$0x4, %rax
    00003021: 	cmpq	%rax, %rcx
    00003024: 	jne	.Ltmp1951 # Offset: 12324
    00003026: 	jmp	.Ltmp1721 # Offset: 12326
.Ltmp1698:
    0000302b: 	movq	(%rsp), %rcx
    0000302f: 	xorl	%eax, %eax
    00003031: 	subq	%r14, %rcx
.Ltmp1952:
    00003034: 	movl	(%r14,%rax), %edx
    00003038: 	movl	%edx, (%rbp,%rax)
    0000303c: 	addq	$0x4, %rax
    00003040: 	cmpq	%rcx, %rax
    00003043: 	jne	.Ltmp1952 # Offset: 12355
    00003045: 	jmp	.Ltmp1697 # Offset: 12357
.Ltmp1680:
    0000304a: 	xorl	%eax, %eax
    0000304c: 	jmp	.Ltmp1683 # Offset: 12364
.Ltmp1674:
    00003051: 	xorl	%eax, %eax
    00003053: 	jmp	.Ltmp1953 # Offset: 12371
.Ltmp1681:
    00003058: 	xorl	%eax, %eax
    0000305a: 	jmp	.Ltmp1954 # Offset: 12378
.Ltmp1667:
    0000305f: 	xorl	%eax, %eax
    00003061: 	jmp	.Ltmp1955 # Offset: 12385
.Ltmp1655:
    00003066: 	xorl	%eax, %eax
    00003068: 	jmp	.Ltmp1956 # Offset: 12392
.Ltmp1848:
    0000306d: 	callq	__stack_chk_fail@PLT # Offset: 12397
    00003072: 	endbr64
.Ltmp1958:
    00003076: 	movq	%rax, %rbx
    00003079: 	jmp	.Ltmp1957 # Offset: 12409
    0000307b: 	endbr64
    0000307f: 	jmp	.Ltmp1958 # Offset: 12415
    00003081: 	endbr64
    00003085: 	jmp	.Ltmp1958 # Offset: 12421
    00003087: 	endbr64
    0000308b: 	jmp	.Ltmp1958 # Offset: 12427
    0000308d: 	endbr64
    00003091: 	jmp	.Ltmp1958 # Offset: 12433
    00003093: 	endbr64
    00003097: 	jmp	.Ltmp1958 # Offset: 12439
.Ltmp1957:
    00003099: 	movq	0x1c0(%rsp), %rdi
    000030a1: 	cmpq	0x8(%rsp), %rdi
    000030a6: 	je	.Ltmp1959 # Offset: 12454
    000030a8: 	movq	0x1d0(%rsp), %rax
    000030b0: 	leaq	0x1(%rax), %rsi
    000030b4: 	callq	_ZdlPvm@PLT # Offset: 12468
.Ltmp1959:
    000030b9: 	movq	0x1a0(%rsp), %rdi
    000030c1: 	leaq	0x1b0(%rsp), %rax
    000030c9: 	cmpq	%rax, %rdi
    000030cc: 	je	.Ltmp1960 # Offset: 12492
    000030ce: 	movq	0x1b0(%rsp), %rax
    000030d6: 	leaq	0x1(%rax), %rsi
    000030da: 	callq	_ZdlPvm@PLT # Offset: 12506
.Ltmp1960:
    000030df: 	movq	0x180(%rsp), %rdi
    000030e7: 	leaq	0x190(%rsp), %rax
    000030ef: 	cmpq	%rax, %rdi
    000030f2: 	je	.Ltmp1961 # Offset: 12530
    000030f4: 	movq	0x190(%rsp), %rax
    000030fc: 	leaq	0x1(%rax), %rsi
    00003100: 	callq	_ZdlPvm@PLT # Offset: 12544
.Ltmp1961:
    00003105: 	movq	0x120(%rsp), %rdi
    0000310d: 	movq	0x130(%rsp), %rsi
    00003115: 	subq	%rdi, %rsi
    00003118: 	testq	%rdi, %rdi
    0000311b: 	je	.Ltmp1962 # Offset: 12571
    0000311d: 	callq	_ZdlPvm@PLT # Offset: 12573
.Ltmp1962:
    00003122: 	movq	0x160(%rsp), %rdi
    0000312a: 	leaq	0x170(%rsp), %rax
    00003132: 	cmpq	%rax, %rdi
    00003135: 	je	.Ltmp1963 # Offset: 12597
    00003137: 	movq	0x170(%rsp), %rax
    0000313f: 	leaq	0x1(%rax), %rsi
    00003143: 	callq	_ZdlPvm@PLT # Offset: 12611
.Ltmp1963:
    00003148: 	movq	%rbx, %rbp
.Ltmp1974:
    0000314b: 	movq	0x100(%rsp), %rdi
    00003153: 	movq	0x110(%rsp), %rsi
    0000315b: 	subq	%rdi, %rsi
    0000315e: 	testq	%rdi, %rdi
    00003161: 	je	.Ltmp1964 # Offset: 12641
    00003163: 	callq	_ZdlPvm@PLT # Offset: 12643
.Ltmp1964:
    00003168: 	movq	0x140(%rsp), %rdi
    00003170: 	leaq	0x150(%rsp), %rax
    00003178: 	cmpq	%rax, %rdi
    0000317b: 	je	.Ltmp1965 # Offset: 12667
    0000317d: 	movq	0x150(%rsp), %rax
    00003185: 	leaq	0x1(%rax), %rsi
    00003189: 	callq	_ZdlPvm@PLT # Offset: 12681
.Ltmp1965:
    0000318e: 	movq	%rbp, %rdi
    00003191: 	callq	_Unwind_Resume@PLT # Offset: 12689
    00003196: 	endbr64
    0000319a: 	jmp	.Ltmp1958 # Offset: 12698
    0000319f: 	endbr64
    000031a3: 	movq	%rax, %rbx
    000031a6: 	jmp	.Ltmp1959 # Offset: 12710
    000031ab: 	endbr64
.Ltmp1967:
    000031af: 	movq	%rax, %rbx
    000031b2: 	jmp	.Ltmp1966 # Offset: 12722
    000031b4: 	endbr64
    000031b8: 	jmp	.Ltmp1967 # Offset: 12728
    000031ba: 	endbr64
    000031be: 	jmp	.Ltmp1967 # Offset: 12734
    000031c0: 	endbr64
    000031c4: 	jmp	.Ltmp1967 # Offset: 12740
.Ltmp1966:
    000031c6: 	movq	0x1c0(%rsp), %rdi
    000031ce: 	cmpq	0x8(%rsp), %rdi
    000031d3: 	je	.Ltmp1960 # Offset: 12755
    000031d9: 	movq	0x1d0(%rsp), %rax
    000031e1: 	leaq	0x1(%rax), %rsi
    000031e5: 	callq	_ZdlPvm@PLT # Offset: 12773
    000031ea: 	jmp	.Ltmp1960 # Offset: 12778
    000031ef: 	endbr64
    000031f3: 	jmp	.Ltmp1967 # Offset: 12787
    000031f5: 	endbr64
    000031f9: 	jmp	.Ltmp1967 # Offset: 12793
    000031fb: 	endbr64
    000031ff: 	movq	%rax, %rbx
    00003202: 	jmp	.Ltmp1960 # Offset: 12802
    00003207: 	endbr64
.Ltmp1969:
    0000320b: 	movq	%rax, %rbx
    0000320e: 	jmp	.Ltmp1968 # Offset: 12814
    00003213: 	endbr64
    00003217: 	movq	%rax, %rbx
    0000321a: 	jmp	.Ltmp1962 # Offset: 12826
    0000321f: 	endbr64
    00003223: 	jmp	.Ltmp1969 # Offset: 12835
    00003225: 	endbr64
    00003229: 	jmp	.Ltmp1969 # Offset: 12841
    0000322b: 	endbr64
    0000322f: 	movq	%rax, %rbx
    00003232: 	jmp	.Ltmp1970 # Offset: 12850
    00003234: 	endbr64
    00003238: 	movq	%rax, %rbx
    0000323b: 	jmp	.Ltmp1961 # Offset: 12859
.Ltmp1970:
    00003240: 	movq	0x1c0(%rsp), %rdi
    00003248: 	leaq	0x1d0(%rsp), %rax
    00003250: 	cmpq	%rax, %rdi
    00003253: 	je	.Ltmp1961 # Offset: 12883
.Ltmp1976:
    00003259: 	movq	0x1d0(%rsp), %rax
    00003261: 	leaq	0x1(%rax), %rsi
    00003265: 	callq	_ZdlPvm@PLT # Offset: 12901
    0000326a: 	jmp	.Ltmp1961 # Offset: 12906
    0000326f: 	endbr64
    00003273: 	jmp	.Ltmp1969 # Offset: 12915
    00003275: 	endbr64
    00003279: 	jmp	.Ltmp1969 # Offset: 12921
    0000327b: 	endbr64
.Ltmp1972:
    0000327f: 	movq	%rax, %rbp
    00003282: 	jmp	.Ltmp1971 # Offset: 12930
    00003284: 	endbr64
    00003288: 	jmp	.Ltmp1972 # Offset: 12936
    0000328a: 	endbr64
    0000328e: 	movq	%rax, %rbp
    00003291: 	jmp	.Ltmp1973 # Offset: 12945
    00003293: 	endbr64
    00003297: 	movq	%rax, %rbp
    0000329a: 	jmp	.Ltmp1974 # Offset: 12954
.Ltmp1971:
    0000329f: 	movq	0x2120(%rsp), %rdi
    000032a7: 	cmpq	0x8(%rsp), %rdi
    000032ac: 	je	.Ltmp1974 # Offset: 12972
.Ltmp1975:
    000032b2: 	movq	0x2130(%rsp), %rax
    000032ba: 	leaq	0x1(%rax), %rsi
    000032be: 	callq	_ZdlPvm@PLT # Offset: 12990
    000032c3: 	jmp	.Ltmp1974 # Offset: 12995
.Ltmp1973:
    000032c8: 	movq	0x2120(%rsp), %rdi
    000032d0: 	leaq	0x2130(%rsp), %rax
    000032d8: 	cmpq	%rax, %rdi
    000032db: 	jne	.Ltmp1975 # Offset: 13019
    000032dd: 	jmp	.Ltmp1974 # Offset: 13021
    000032e2: 	endbr64
    000032e6: 	jmp	.Ltmp1972 # Offset: 13030
    000032e8: 	endbr64
    000032ec: 	jmp	.Ltmp1972 # Offset: 13036
    000032ee: 	endbr64
    000032f2: 	jmp	.Ltmp1972 # Offset: 13042
.Ltmp1968:
    000032f4: 	movq	0x1c0(%rsp), %rdi
    000032fc: 	cmpq	0x8(%rsp), %rdi
    00003301: 	jne	.Ltmp1976 # Offset: 13057
    00003307: 	jmp	.Ltmp1961 # Offset: 13063
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_ZN9benchmark9__sift_inIPmmEEvlT_lT0_" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x104a0
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x104a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPmmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rdi
    00000010: 	movq	%rdx, %r8
    00000013: 	movq	%rcx, %r9
    00000016: 	cmpq	%r11, %rax
    00000019: 	jge	.Ltmp1977 # Offset: 25
    0000001f: 	movq	%rdx, %r10
    00000022: 	jmp	.Ltmp1978 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1980:
    00000028: 	leaq	-0x1(%rax), %rbx
    0000002c: 	leaq	(%rax,%rax), %rcx
    00000030: 	movq	%rsi, (%rdi,%r10,8)
    00000034: 	leaq	(%rdi,%rbx,8), %rdx
    00000038: 	movq	%rbx, %rax
    0000003b: 	cmpq	%rcx, %r11
    0000003e: 	jle	.Ltmp1979 # Offset: 62
.Ltmp1981:
    00000040: 	movq	%rax, %r10
    00000043: 	movq	%rcx, %rax
.Ltmp1978:
    00000046: 	leaq	(,%rax,8), %rdx
    0000004e: 	movq	-0x8(%rdi,%rdx), %rsi
    00000053: 	addq	%rdi, %rdx
    00000056: 	movq	(%rdx), %rcx
    00000059: 	cmpq	%rcx, %rsi
    0000005c: 	jae	.Ltmp1980 # Offset: 92
    0000005e: 	movq	%rcx, (%rdi,%r10,8)
    00000062: 	leaq	0x2(%rax,%rax), %rcx
    00000067: 	cmpq	%rcx, %r11
    0000006a: 	jg	.Ltmp1981 # Offset: 106
.Ltmp1979:
    0000006c: 	cmpq	%rcx, %r11
    0000006f: 	je	.Ltmp1982 # Offset: 111
.Ltmp1987:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp1983 # Offset: 133
    00000087: 	jmp	.Ltmp1984 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1986:
    00000090: 	movq	%rsi, (%rdx)
    00000093: 	leaq	-0x1(%rcx), %rdx
    00000097: 	movq	%rdx, %rax
    0000009a: 	shrq	$0x3f, %rax
    0000009e: 	addq	%rdx, %rax
    000000a1: 	sarq	%rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	movq	%rcx, %rax
    000000aa: 	cmpq	%rcx, %r8
    000000ad: 	jge	.Ltmp1985 # Offset: 173
    000000af: 	movq	%rdx, %rcx
.Ltmp1983:
    000000b2: 	leaq	(%rdi,%rcx,8), %r10
    000000b6: 	leaq	(%rdi,%rax,8), %rdx
    000000ba: 	movq	(%r10), %rsi
    000000bd: 	cmpq	%r9, %rsi
    000000c0: 	jb	.Ltmp1986 # Offset: 192
.Ltmp1984:
    000000c2: 	movq	%r9, (%rdx)
    000000c5: 	popq	%rbx
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1985:
    000000d0: 	movq	%r10, %rdx
    000000d3: 	movq	%r9, (%rdx)
    000000d6: 	popq	%rbx
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1977:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1984 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1982:
    000000f0: 	movq	-0x8(%rdi,%rcx,8), %rax
    000000f5: 	movq	%rax, (%rdx)
    000000f8: 	leaq	-0x1(%rcx), %rax
    000000fc: 	leaq	(%rdi,%rax,8), %rdx
    00000100: 	jmp	.Ltmp1987 # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPmmEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEEvlT_lT0_" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x105b0
  Size        : 0xf6
  MaxSize     : 0x100
  Offset      : 0x105b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rcx, %r9
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp1988 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp1989 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1991:
    00000028: 	movq	%rax, %rbx
.Ltmp1989:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,8), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x8(%r10,%rsi), %r10
    00000040: 	movq	(%rcx), %rdi
    00000043: 	movq	(%r10), %r11
    00000046: 	cmpq	%rdi, %r11
    00000049: 	jbe	.Ltmp1990 # Offset: 73
    0000004b: 	movq	%rdx, %rax
    0000004e: 	movq	%r11, %rdi
    00000051: 	movq	%r10, %rcx
    00000054: 	addq	$0x1, %rdx
.Ltmp1990:
    00000058: 	addq	%rdx, %rdx
    0000005b: 	movq	%rdi, (%rsi,%rbx,8)
    0000005f: 	cmpq	%rdx, %rbp
    00000062: 	jg	.Ltmp1991 # Offset: 98
    00000064: 	je	.Ltmp1992 # Offset: 100
.Ltmp1997:
    00000066: 	leaq	-0x1(%rax), %rdx
    0000006a: 	movq	%rdx, %rdi
    0000006d: 	shrq	$0x3f, %rdi
    00000071: 	addq	%rdx, %rdi
    00000074: 	sarq	%rdi
    00000077: 	cmpq	%r8, %rax
    0000007a: 	jg	.Ltmp1993 # Offset: 122
    0000007c: 	jmp	.Ltmp1994 # Offset: 124
    0000007e: 	nop # Size: 2
.Ltmp1996:
    00000080: 	movq	%rdx, (%rcx)
    00000083: 	leaq	-0x1(%rdi), %rdx
    00000087: 	movq	%rdx, %rax
    0000008a: 	shrq	$0x3f, %rax
    0000008e: 	addq	%rdx, %rax
    00000091: 	sarq	%rax
    00000094: 	movq	%rax, %rdx
    00000097: 	movq	%rdi, %rax
    0000009a: 	cmpq	%rdi, %r8
    0000009d: 	jge	.Ltmp1995 # Offset: 157
    0000009f: 	movq	%rdx, %rdi
.Ltmp1993:
    000000a2: 	leaq	(%rsi,%rdi,8), %r10
    000000a6: 	leaq	(%rsi,%rax,8), %rcx
    000000aa: 	movq	(%r10), %rdx
    000000ad: 	cmpq	%r9, %rdx
    000000b0: 	jb	.Ltmp1996 # Offset: 176
.Ltmp1994:
    000000b2: 	movq	%r9, (%rcx)
    000000b5: 	popq	%rbx
    000000b6: 	popq	%rbp
    000000b7: 	retq # Offset: 183
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1995:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movq	%r9, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1988:
    000000d0: 	leaq	(%rsi,%r8,8), %rcx
    000000d4: 	jne	.Ltmp1994 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1992:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,8), %rdx
    000000e8: 	movq	(%rdx), %rdi
    000000eb: 	movq	%rdi, (%rcx)
    000000ee: 	movq	%rdx, %rcx
    000000f1: 	jmp	.Ltmp1997 # Offset: 241
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x106b0
  Size        : 0x106
  MaxSize     : 0x110
  Offset      : 0x106b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rcx, %r9
    00000010: 	pushq	%rbx
    00000011: 	movq	0x8(%rsi), %rcx
    00000015: 	cmpq	%rdi, %rdx
    00000018: 	jge	.Ltmp1998 # Offset: 24
    0000001e: 	movq	%rdi, %rbp
    00000021: 	movq	%r8, %rbx
    00000024: 	jmp	.Ltmp1999 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2001:
    00000030: 	movq	%rax, %rbx
.Ltmp1999:
    00000033: 	leaq	-0x1(%rdx), %rax
    00000037: 	leaq	(,%rax,8), %r10
    0000003f: 	leaq	(%rcx,%r10), %rsi
    00000043: 	leaq	0x8(%rcx,%r10), %r10
    00000048: 	movq	(%rsi), %rdi
    0000004b: 	movq	(%r10), %r11
    0000004e: 	cmpq	%rdi, %r11
    00000051: 	jbe	.Ltmp2000 # Offset: 81
    00000053: 	movq	%rdx, %rax
    00000056: 	movq	%r11, %rdi
    00000059: 	movq	%r10, %rsi
    0000005c: 	addq	$0x1, %rdx
.Ltmp2000:
    00000060: 	addq	%rdx, %rdx
    00000063: 	movq	%rdi, (%rcx,%rbx,8)
    00000067: 	cmpq	%rdx, %rbp
    0000006a: 	jg	.Ltmp2001 # Offset: 106
    0000006c: 	je	.Ltmp2002 # Offset: 108
.Ltmp2007:
    00000072: 	leaq	-0x1(%rax), %rdx
    00000076: 	movq	%rdx, %rdi
    00000079: 	shrq	$0x3f, %rdi
    0000007d: 	addq	%rdx, %rdi
    00000080: 	sarq	%rdi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp2003 # Offset: 134
    00000088: 	jmp	.Ltmp2004 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2006:
    00000090: 	movq	%rdx, (%rsi)
    00000093: 	leaq	-0x1(%rdi), %rdx
    00000097: 	movq	%rdx, %rax
    0000009a: 	shrq	$0x3f, %rax
    0000009e: 	addq	%rdx, %rax
    000000a1: 	sarq	%rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	movq	%rdi, %rax
    000000aa: 	cmpq	%rdi, %r8
    000000ad: 	jge	.Ltmp2005 # Offset: 173
    000000af: 	movq	%rdx, %rdi
.Ltmp2003:
    000000b2: 	leaq	(%rcx,%rdi,8), %r10
    000000b6: 	leaq	(%rcx,%rax,8), %rsi
    000000ba: 	movq	(%r10), %rdx
    000000bd: 	cmpq	%r9, %rdx
    000000c0: 	jb	.Ltmp2006 # Offset: 192
.Ltmp2004:
    000000c2: 	movq	%r9, (%rsi)
    000000c5: 	popq	%rbx
    000000c6: 	popq	%rbp
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2005:
    000000d0: 	movq	%r10, %rsi
    000000d3: 	movq	%r9, (%rsi)
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1998:
    000000e0: 	leaq	(%rcx,%r8,8), %rsi
    000000e4: 	jne	.Ltmp2004 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2002:
    000000f0: 	leaq	-0x1(%rdx), %rax
    000000f4: 	leaq	(%rcx,%rax,8), %rdx
    000000f8: 	movq	(%rdx), %rdi
    000000fb: 	movq	%rdi, (%rsi)
    000000fe: 	movq	%rdx, %rsi
    00000101: 	jmp	.Ltmp2007 # Offset: 257
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEEvlT_lT0_" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x107c0
  Size        : 0x106
  MaxSize     : 0x110
  Offset      : 0x107c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rcx, %r9
    00000010: 	pushq	%rbx
    00000011: 	movq	0x8(%rsi), %rcx
    00000015: 	cmpq	%rdi, %rdx
    00000018: 	jge	.Ltmp2008 # Offset: 24
    0000001e: 	movq	%rdi, %rbp
    00000021: 	movq	%r8, %rbx
    00000024: 	jmp	.Ltmp2009 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2011:
    00000030: 	movq	%rax, %rbx
.Ltmp2009:
    00000033: 	leaq	-0x1(%rdx), %rax
    00000037: 	leaq	(,%rax,8), %r10
    0000003f: 	leaq	(%rcx,%r10), %rsi
    00000043: 	leaq	0x8(%rcx,%r10), %r10
    00000048: 	movq	(%rsi), %rdi
    0000004b: 	movq	(%r10), %r11
    0000004e: 	cmpq	%rdi, %r11
    00000051: 	jbe	.Ltmp2010 # Offset: 81
    00000053: 	movq	%rdx, %rax
    00000056: 	movq	%r11, %rdi
    00000059: 	movq	%r10, %rsi
    0000005c: 	addq	$0x1, %rdx
.Ltmp2010:
    00000060: 	addq	%rdx, %rdx
    00000063: 	movq	%rdi, (%rcx,%rbx,8)
    00000067: 	cmpq	%rdx, %rbp
    0000006a: 	jg	.Ltmp2011 # Offset: 106
    0000006c: 	je	.Ltmp2012 # Offset: 108
.Ltmp2017:
    00000072: 	leaq	-0x1(%rax), %rdx
    00000076: 	movq	%rdx, %rdi
    00000079: 	shrq	$0x3f, %rdi
    0000007d: 	addq	%rdx, %rdi
    00000080: 	sarq	%rdi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp2013 # Offset: 134
    00000088: 	jmp	.Ltmp2014 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2016:
    00000090: 	movq	%rdx, (%rsi)
    00000093: 	leaq	-0x1(%rdi), %rdx
    00000097: 	movq	%rdx, %rax
    0000009a: 	shrq	$0x3f, %rax
    0000009e: 	addq	%rdx, %rax
    000000a1: 	sarq	%rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	movq	%rdi, %rax
    000000aa: 	cmpq	%rdi, %r8
    000000ad: 	jge	.Ltmp2015 # Offset: 173
    000000af: 	movq	%rdx, %rdi
.Ltmp2013:
    000000b2: 	leaq	(%rcx,%rdi,8), %r10
    000000b6: 	leaq	(%rcx,%rax,8), %rsi
    000000ba: 	movq	(%r10), %rdx
    000000bd: 	cmpq	%r9, %rdx
    000000c0: 	jb	.Ltmp2016 # Offset: 192
.Ltmp2014:
    000000c2: 	movq	%r9, (%rsi)
    000000c5: 	popq	%rbx
    000000c6: 	popq	%rbp
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2015:
    000000d0: 	movq	%r10, %rsi
    000000d3: 	movq	%r9, (%rsi)
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2008:
    000000e0: 	leaq	(%rcx,%r8,8), %rsi
    000000e4: 	jne	.Ltmp2014 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2012:
    000000f0: 	leaq	-0x1(%rdx), %rax
    000000f4: 	leaq	(%rcx,%rax,8), %rdx
    000000f8: 	movq	(%rdx), %rdi
    000000fb: 	movq	%rdi, (%rsi)
    000000fe: 	movq	%rdx, %rsi
    00000101: 	jmp	.Ltmp2017 # Offset: 257
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEEvlT_lT0_"

Binary Function "_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x108d0
  Size        : 0xca
  MaxSize     : 0xd0
  Offset      : 0x108d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rdi, %r13
    0000000b: 	pushq	%r12
    0000000d: 	pushq	%rbp
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x20, %rsp
    00000013: 	movq	0x8(%rdi), %r12
    00000017: 	movq	0x8(%rsi), %rbp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	subq	%r12, %rbp
    0000002e: 	movq	%rbp, %rbx
    00000031: 	shrq	$0x3f, %rbp
    00000035: 	sarq	$0x3, %rbx
    00000039: 	addq	%rbx, %rbp
    0000003c: 	sarq	%rbp
    0000003f: 	subq	$0x1, %rbp
    00000043: 	js	.Ltmp2018 # Offset: 67
    00000045: 	movq	%rsp, %r14
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2019:
    00000050: 	movq	(%r12,%rbp,8), %rcx
    00000054: 	movq	0x8(%r13), %rax
    00000058: 	movq	%rbp, %rdx
    0000005b: 	movq	%r14, %rsi
    0000005e: 	movq	%rbx, %rdi
    00000061: 	movq	%rax, 0x8(%rsp)
    00000066: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEEvlT_lT0_ # Offset: 102
    0000006b: 	subq	$0x1, %rbp
    0000006f: 	jae	.Ltmp2019 # Offset: 111
.Ltmp2018:
    00000071: 	subq	$0x1, %rbx
    00000075: 	testq	%rbx, %rbx
    00000078: 	jle	.Ltmp2020 # Offset: 120
    0000007a: 	movq	%rsp, %r14
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp2021:
    00000080: 	movq	(%r12), %rax
    00000084: 	movq	(%r12,%rbx,8), %rcx
    00000088: 	xorl	%edx, %edx
    0000008a: 	movq	%rbx, %rdi
    0000008d: 	movq	%r14, %rsi
    00000090: 	movq	%rax, (%r12,%rbx,8)
    00000094: 	movq	0x8(%r13), %rax
    00000098: 	movq	%rax, 0x8(%rsp)
    0000009d: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEEvlT_lT0_ # Offset: 157
    000000a2: 	subq	$0x1, %rbx
    000000a6: 	jne	.Ltmp2021 # Offset: 166
.Ltmp2020:
    000000a8: 	movq	0x18(%rsp), %rax
    000000ad: 	subq	%fs:0x28, %rax
    000000b6: 	jne	.Ltmp2022 # Offset: 182
    000000b8: 	addq	$0x20, %rsp
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	popq	%r12
    000000c0: 	popq	%r13
    000000c2: 	popq	%r14
    000000c4: 	retq # Offset: 196
.Ltmp2022:
    000000c5: 	callq	__stack_chk_fail@PLT # Offset: 197
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_"

Binary Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_vector.cpp/1
  Number      : 92
  State       : disassembled
  Address     : 0x109a0
  Size        : 0x1e4
  MaxSize     : 0x1f0
  Offset      : 0x109a0
  Section     : .text
  Orc Section : .local.text._Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rcx, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	xorl	%ebx, %ebx
    00000012: 	subq	$0x58, %rsp
    00000016: 	movq	%rdi, 0x8(%rsp)
    0000001b: 	leaq	0x30(%rsp), %r15
    00000020: 	leaq	0x20(%rsp), %r14
    00000025: 	movq	%rsi, 0x10(%rsp)
    0000002a: 	movq	%r8, 0x18(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x48(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	movl	%eax, 0x4(%rsp)
    00000055: 	testl	%eax, %eax
    00000057: 	jle	.Ltmp2023 # Offset: 87
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp2030:
    00000060: 	movq	0x10(%rsp), %rax
    00000065: 	movq	0x8(%r13), %rbp
    00000069: 	movq	0x8(%rax), %rdi
    0000006d: 	movq	0x8(%rsp), %rax
    00000072: 	movq	0x8(%rax), %rsi
    00000076: 	cmpq	%rsi, %rdi
    00000079: 	je	.Ltmp2024 # Offset: 121
    0000007b: 	subq	%rsi, %rdi
    0000007e: 	leaq	0x8(%rsi), %rdx
    00000082: 	leaq	-0x8(%rdi), %r8
    00000086: 	cmpq	%rdx, %rbp
    00000089: 	je	.Ltmp2025 # Offset: 137
    0000008f: 	cmpq	$0x10, %r8
    00000093: 	jbe	.Ltmp2025 # Offset: 147
    00000099: 	shrq	$0x3, %r8
    0000009d: 	xorl	%edx, %edx
    0000009f: 	addq	$0x1, %r8
    000000a3: 	movq	%r8, %rdi
    000000a6: 	shrq	%rdi
    000000a9: 	shlq	$0x4, %rdi
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp2026:
    000000b0: 	movdqu	(%rsi,%rdx), %xmm1
    000000b5: 	movups	%xmm1, (%rbp,%rdx)
    000000ba: 	addq	$0x10, %rdx
    000000be: 	cmpq	%rdx, %rdi
    000000c1: 	jne	.Ltmp2026 # Offset: 193
    000000c3: 	movq	%r8, %rdx
    000000c6: 	andq	$-0x2, %rdx
    000000ca: 	leaq	(,%rdx,8), %rdi
    000000d2: 	addq	%rdi, %rsi
    000000d5: 	addq	%rbp, %rdi
    000000d8: 	cmpq	%rdx, %r8
    000000db: 	je	.Ltmp2024 # Offset: 219
    000000dd: 	movq	(%rsi), %rdx
    000000e0: 	movq	%rdx, (%rdi)
.Ltmp2024:
    000000e3: 	movq	0x8(%r12), %rdx
    000000e8: 	movq	%r15, %rsi
    000000eb: 	movq	%r14, %rdi
    000000ee: 	movq	%rdx, 0x38(%rsp)
    000000f3: 	movq	0x8(%r13), %rdx
    000000f7: 	movq	%rdx, 0x28(%rsp)
    000000fc: 	callq	_ZN9benchmark8heapsortISt16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEEEvT_SB_ # Offset: 252
    00000101: 	movq	0x8(%r12), %rsi
    00000106: 	leaq	0x8(%rbp), %rax
    0000010a: 	jmp	.Ltmp2027 # Offset: 266
    0000010c: 	nopl	(%rax) # Size: 4
.Ltmp2029:
    00000110: 	addq	$0x8, %rax
    00000114: 	movq	-0x10(%rax), %rcx
    00000118: 	cmpq	%rcx, (%rdx)
    0000011b: 	jb	.Ltmp2028 # Offset: 283
.Ltmp2027:
    0000011d: 	movq	%rax, %rdx
    00000120: 	cmpq	%rax, %rsi
    00000123: 	jne	.Ltmp2029 # Offset: 291
    00000125: 	addl	$0x1, %ebx
    00000128: 	cmpl	0x4(%rsp), %ebx
    0000012c: 	jl	.Ltmp2030 # Offset: 300
.Ltmp2023:
    00000132: 	callq	clock@PLT # Offset: 306
    00000137: 	movq	%rax, end_time(%rip)
    0000013e: 	movq	0x48(%rsp), %rdx
    00000143: 	subq	%fs:0x28, %rdx
    0000014c: 	jne	.Ltmp2031 # Offset: 332
    00000152: 	subq	start_time(%rip), %rax
    00000159: 	pxor	%xmm0, %xmm0
    0000015d: 	movq	0x18(%rsp), %rdi
    00000162: 	cvtsi2sd	%rax, %xmm0
    00000167: 	divsd	DATAat0x15638(%rip), %xmm0
    0000016f: 	addq	$0x58, %rsp
    00000173: 	popq	%rbx
    00000174: 	popq	%rbp
    00000175: 	popq	%r12
    00000177: 	popq	%r13
    00000179: 	popq	%r14
    0000017b: 	popq	%r15
    0000017d: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 381
    00000182: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2028:
    00000188: 	movq	0x18(%rsp), %rax
    0000018d: 	leaq	DATAat0x151ba(%rip), %rsi
    00000194: 	movl	$0x1, %edi
    00000199: 	addl	$0x1, %ebx
    0000019c: 	movq	(%rax), %rdx
    0000019f: 	xorl	%eax, %eax
    000001a1: 	callq	__printf_chk@PLT # Offset: 417
    000001a6: 	movl	iterations(%rip), %eax
    000001ac: 	movl	%eax, 0x4(%rsp)
    000001b0: 	cmpl	0x4(%rsp), %ebx
    000001b4: 	jl	.Ltmp2030 # Offset: 436
    000001ba: 	jmp	.Ltmp2023 # Offset: 442
    000001bf: 	nop # Size: 1
.Ltmp2025:
    000001c0: 	xorl	%edx, %edx
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2032:
    000001c8: 	movq	(%rsi,%rdx), %r8
    000001cc: 	movq	%r8, (%rbp,%rdx)
    000001d1: 	addq	$0x8, %rdx
    000001d5: 	cmpq	%rdi, %rdx
    000001d8: 	jne	.Ltmp2032 # Offset: 472
    000001da: 	jmp	.Ltmp2024 # Offset: 474
.Ltmp2031:
    000001df: 	callq	__stack_chk_fail@PLT # Offset: 479
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEmEEvlT_lT0_" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x10b90
  Size        : 0xf6
  MaxSize     : 0x100
  Offset      : 0x10b90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rcx, %r9
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp2033 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp2034 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2036:
    00000028: 	movq	%rax, %rbx
.Ltmp2034:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,8), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x8(%r10,%rsi), %r10
    00000040: 	movq	(%rcx), %rdi
    00000043: 	movq	(%r10), %r11
    00000046: 	cmpq	%rdi, %r11
    00000049: 	jbe	.Ltmp2035 # Offset: 73
    0000004b: 	movq	%rdx, %rax
    0000004e: 	movq	%r11, %rdi
    00000051: 	movq	%r10, %rcx
    00000054: 	addq	$0x1, %rdx
.Ltmp2035:
    00000058: 	addq	%rdx, %rdx
    0000005b: 	movq	%rdi, (%rsi,%rbx,8)
    0000005f: 	cmpq	%rdx, %rbp
    00000062: 	jg	.Ltmp2036 # Offset: 98
    00000064: 	je	.Ltmp2037 # Offset: 100
.Ltmp2042:
    00000066: 	leaq	-0x1(%rax), %rdx
    0000006a: 	movq	%rdx, %rdi
    0000006d: 	shrq	$0x3f, %rdi
    00000071: 	addq	%rdx, %rdi
    00000074: 	sarq	%rdi
    00000077: 	cmpq	%r8, %rax
    0000007a: 	jg	.Ltmp2038 # Offset: 122
    0000007c: 	jmp	.Ltmp2039 # Offset: 124
    0000007e: 	nop # Size: 2
.Ltmp2041:
    00000080: 	movq	%rdx, (%rcx)
    00000083: 	leaq	-0x1(%rdi), %rdx
    00000087: 	movq	%rdx, %rax
    0000008a: 	shrq	$0x3f, %rax
    0000008e: 	addq	%rdx, %rax
    00000091: 	sarq	%rax
    00000094: 	movq	%rax, %rdx
    00000097: 	movq	%rdi, %rax
    0000009a: 	cmpq	%rdi, %r8
    0000009d: 	jge	.Ltmp2040 # Offset: 157
    0000009f: 	movq	%rdx, %rdi
.Ltmp2038:
    000000a2: 	leaq	(%rsi,%rdi,8), %r10
    000000a6: 	leaq	(%rsi,%rax,8), %rcx
    000000aa: 	movq	(%r10), %rdx
    000000ad: 	cmpq	%r9, %rdx
    000000b0: 	jb	.Ltmp2041 # Offset: 176
.Ltmp2039:
    000000b2: 	movq	%r9, (%rcx)
    000000b5: 	popq	%rbx
    000000b6: 	popq	%rbp
    000000b7: 	retq # Offset: 183
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2040:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movq	%r9, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp2033:
    000000d0: 	leaq	(%rsi,%r8,8), %rcx
    000000d4: 	jne	.Ltmp2039 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2037:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,8), %rdx
    000000e8: 	movq	(%rdx), %rdi
    000000eb: 	movq	%rdi, (%rcx)
    000000ee: 	movq	%rdx, %rcx
    000000f1: 	jmp	.Ltmp2042 # Offset: 241
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEmEEvlT_lT0_"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x10c90
  Size        : 0x336f
  MaxSize     : 0x336f
  Offset      : 0x10c90
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp2043:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp2043 # Offset: 37
    00000027: 	subq	$0xef8, %rsp
    0000002e: 	leaq	DATAat0x1561b(%rip), %rsi
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x7ee8(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	leaq	0x140(%rsp), %rax
    00000050: 	movq	%rax, %rdi
    00000053: 	movq	%rax, 0x20(%rsp)
    00000058: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 88
    0000005d: 	leaq	0x120(%rsp), %rax
    00000065: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    0000006d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    00000075: 	movq	%rax, %rsi
    00000078: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000007f: 	movq	%rax, 0x40(%rsp)
    00000084: 	movaps	%xmm4, 0x120(%rsp)
    0000008c: 	movaps	%xmm5, 0x130(%rsp)
    00000094: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 148
    00000099: 	movl	iterations(%rip), %eax
    0000009f: 	movsd	init_value(%rip), %xmm0
    000000a7: 	movl	%eax, 0xbc(%rsp)
    000000ae: 	cvttsd2si	%xmm0, %eax
    000000b2: 	addl	$0xea, %eax
    000000b7: 	comisd	DATAat0x15650(%rip), %xmm0
    000000bf: 	cltq
    000000c1: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000c8: 	jae	.Ltmp2044 # Offset: 200
    000000ce: 	cvttsd2si	%xmm0, %rax
.Ltmp2365:
    000000d3: 	leaq	0x4060(%rsp), %r12
    000000db: 	movq	%rax, %xmm0
    000000e0: 	leaq	0x1e0(%rsp), %rbx
    000000e8: 	movq	%r12, 0x50(%rsp)
    000000ed: 	punpcklqdq	%xmm0, %xmm0
    000000f1: 	movq	%rbx, %rax
.Ltmp2045:
    000000f4: 	movaps	%xmm0, (%rax)
    000000f7: 	addq	$0x10, %rax
    000000fb: 	cmpq	%rax, %r12
    000000fe: 	jne	.Ltmp2045 # Offset: 254
    00000100: 	pxor	%xmm0, %xmm0
    00000104: 	leaq	0x100(%rsp), %rdi
    0000010c: 	movl	$0x7d0, %esi
    00000111: 	movq	$0x0, 0x110(%rsp)
    0000011d: 	movaps	%xmm0, 0x100(%rsp)
    00000125: 	callq	_ZNSt6vectorImSaImEE17_M_default_appendEm # Offset: 293
    0000012a: 	movsd	init_value(%rip), %xmm0
    00000132: 	comisd	DATAat0x15650(%rip), %xmm0
    0000013a: 	jae	.Ltmp2046 # Offset: 314
    00000140: 	cvttsd2si	%xmm0, %rcx
.Ltmp2364:
    00000145: 	movq	0x108(%rsp), %r15
    0000014d: 	movq	0x100(%rsp), %rbp
    00000155: 	cmpq	%r15, %rbp
    00000158: 	je	.Ltmp2047 # Offset: 344
    0000015a: 	movq	%r15, %rsi
    0000015d: 	movq	%rbp, %rax
    00000160: 	subq	%rbp, %rsi
    00000163: 	leaq	-0x8(%rsi), %rdx
    00000167: 	shrq	$0x3, %rdx
    0000016b: 	addq	$0x1, %rdx
    0000016f: 	cmpq	$0x8, %rsi
    00000173: 	je	.Ltmp2048 # Offset: 371
    00000175: 	movq	%rdx, %rsi
    00000178: 	movq	%rcx, %xmm0
    0000017d: 	shrq	%rsi
    00000180: 	punpcklqdq	%xmm0, %xmm0
    00000184: 	shlq	$0x4, %rsi
    00000188: 	addq	%rbp, %rsi
.Ltmp2049:
    0000018b: 	movups	%xmm0, (%rax)
    0000018e: 	addq	$0x10, %rax
    00000192: 	cmpq	%rax, %rsi
    00000195: 	jne	.Ltmp2049 # Offset: 405
    00000197: 	movq	%rdx, %rsi
    0000019a: 	andq	$-0x2, %rsi
    0000019e: 	leaq	(%rbp,%rsi,8), %rax
    000001a3: 	cmpq	%rdx, %rsi
    000001a6: 	je	.Ltmp2047 # Offset: 422
.Ltmp2048:
    000001a8: 	movq	%rcx, (%rax)
.Ltmp2047:
    000001ab: 	movq	0x20(%rsp), %rsi
    000001b0: 	leaq	DATAat0x15205(%rip), %rdx
    000001b7: 	movq	%r12, %rdi
    000001ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 442
    000001bf: 	callq	clock@PLT # Offset: 447
    000001c4: 	movl	iterations(%rip), %ecx
    000001ca: 	xorl	%r13d, %r13d
    000001cd: 	movsd	DATAat0x15648(%rip), %xmm4
    000001d5: 	movq	%rax, start_time(%rip)
    000001dc: 	movabsq	$-0x8000000000000000, %r14
    000001e6: 	movsd	%xmm4, 0x8(%rsp)
    000001ec: 	testl	%ecx, %ecx
    000001ee: 	jle	.Ltmp2050 # Offset: 494
.Ltmp2054:
    000001f0: 	movq	%rbx, %rax
    000001f3: 	pxor	%xmm0, %xmm0
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2051:
    00000200: 	paddq	(%rax), %xmm0
    00000204: 	addq	$0x10, %rax
    00000208: 	cmpq	%rax, %r12
    0000020b: 	jne	.Ltmp2051 # Offset: 523
    0000020d: 	movsd	0x8(%rsp), %xmm1
    00000213: 	mulsd	init_value(%rip), %xmm1
    0000021b: 	comisd	DATAat0x15650(%rip), %xmm1
    00000223: 	jae	.Ltmp2052 # Offset: 547
    00000229: 	cvttsd2si	%xmm1, %rdx
.Ltmp2283:
    0000022e: 	movdqa	%xmm0, %xmm1
    00000232: 	psrldq	$0x8, %xmm1
    00000237: 	paddq	%xmm1, %xmm0
    0000023b: 	movq	%xmm0, %rax
    00000240: 	cmpq	%rax, %rdx
    00000243: 	je	.Ltmp2053 # Offset: 579
    00000245: 	movq	0x4060(%rsp), %rdx
    0000024d: 	leaq	DATAat0x151bf(%rip), %rsi
    00000254: 	movl	$0x1, %edi
    00000259: 	xorl	%eax, %eax
    0000025b: 	callq	__printf_chk@PLT # Offset: 603
    00000260: 	movl	iterations(%rip), %ecx
.Ltmp2053:
    00000266: 	addl	$0x1, %r13d
    0000026a: 	cmpl	%ecx, %r13d
    0000026d: 	jl	.Ltmp2054 # Offset: 621
.Ltmp2050:
    0000026f: 	callq	clock@PLT # Offset: 623
    00000274: 	pxor	%xmm0, %xmm0
    00000278: 	movq	%r12, %rdi
    0000027b: 	movq	%rax, end_time(%rip)
    00000282: 	subq	start_time(%rip), %rax
    00000289: 	cvtsi2sd	%rax, %xmm0
    0000028e: 	divsd	DATAat0x15638(%rip), %xmm0
    00000296: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 662
    0000029b: 	movq	0x4060(%rsp), %rdi
    000002a3: 	leaq	0x4070(%rsp), %rax
    000002ab: 	movq	%rax, 0x10(%rsp)
    000002b0: 	cmpq	%rax, %rdi
    000002b3: 	je	.Ltmp2055 # Offset: 691
    000002b5: 	movq	0x4070(%rsp), %rax
    000002bd: 	leaq	0x1(%rax), %rsi
    000002c1: 	callq	_ZdlPvm@PLT # Offset: 705
.Ltmp2055:
    000002c6: 	movq	0x20(%rsp), %rsi
    000002cb: 	leaq	DATAat0x15221(%rip), %rdx
    000002d2: 	movq	%r12, %rdi
    000002d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 725
    000002da: 	callq	clock@PLT # Offset: 730
    000002df: 	movl	iterations(%rip), %ecx
    000002e5: 	movq	%rax, start_time(%rip)
    000002ec: 	testl	%ecx, %ecx
    000002ee: 	jle	.Ltmp2056 # Offset: 750
    000002f4: 	movq	%r15, %rsi
    000002f7: 	movsd	DATAat0x15648(%rip), %xmm5
    000002ff: 	movl	$0x0, 0x18(%rsp)
    00000307: 	subq	%rbp, %rsi
    0000030a: 	leaq	-0x8(%rsi), %rax
    0000030e: 	movq	%rsi, 0x28(%rsp)
    00000313: 	shrq	$0x3, %rax
    00000317: 	movsd	%xmm5, 0x8(%rsp)
    0000031d: 	leaq	0x1(%rax), %rdi
    00000321: 	movq	%rdi, %rax
    00000324: 	movq	%rdi, 0x38(%rsp)
    00000329: 	andq	$-0x2, %rdi
    0000032d: 	shrq	%rax
    00000330: 	leaq	(%rbp,%rdi,8), %r13
    00000335: 	movq	%rdi, 0x30(%rsp)
    0000033a: 	shlq	$0x4, %rax
    0000033e: 	cmpq	$0x8, %rsi
    00000342: 	cmoveq	%rbp, %r13
    00000346: 	leaq	(%rax,%rbp), %r14
.Ltmp2062:
    0000034a: 	xorl	%eax, %eax
    0000034c: 	cmpq	%r15, %rbp
    0000034f: 	je	.Ltmp2057 # Offset: 847
    00000351: 	cmpq	$0x8, 0x28(%rsp)
    00000357: 	je	.Ltmp2058 # Offset: 855
    0000035d: 	movq	%rbp, %rax
    00000360: 	pxor	%xmm0, %xmm0
    00000364: 	nopl	(%rax) # Size: 4
.Ltmp2059:
    00000368: 	movdqu	(%rax), %xmm2
    0000036c: 	addq	$0x10, %rax
    00000370: 	paddq	%xmm2, %xmm0
    00000374: 	cmpq	%rax, %r14
    00000377: 	jne	.Ltmp2059 # Offset: 887
    00000379: 	movdqa	%xmm0, %xmm1
    0000037d: 	movq	0x38(%rsp), %rsi
    00000382: 	psrldq	$0x8, %xmm1
    00000387: 	paddq	%xmm1, %xmm0
    0000038b: 	movq	%xmm0, %rax
    00000390: 	cmpq	%rsi, 0x30(%rsp)
    00000395: 	je	.Ltmp2057 # Offset: 917
.Ltmp2363:
    00000397: 	addq	(%r13), %rax
.Ltmp2057:
    0000039b: 	movsd	0x8(%rsp), %xmm0
    000003a1: 	mulsd	init_value(%rip), %xmm0
    000003a9: 	comisd	DATAat0x15650(%rip), %xmm0
    000003b1: 	jae	.Ltmp2060 # Offset: 945
    000003b7: 	cvttsd2si	%xmm0, %rdx
.Ltmp2284:
    000003bc: 	cmpq	%rdx, %rax
    000003bf: 	je	.Ltmp2061 # Offset: 959
    000003c1: 	movq	0x4060(%rsp), %rdx
    000003c9: 	leaq	DATAat0x151bf(%rip), %rsi
    000003d0: 	movl	$0x1, %edi
    000003d5: 	xorl	%eax, %eax
    000003d7: 	callq	__printf_chk@PLT # Offset: 983
    000003dc: 	movl	iterations(%rip), %ecx
.Ltmp2061:
    000003e2: 	addl	$0x1, 0x18(%rsp)
    000003e7: 	movl	0x18(%rsp), %eax
    000003eb: 	cmpl	%ecx, %eax
    000003ed: 	jl	.Ltmp2062 # Offset: 1005
.Ltmp2056:
    000003f3: 	callq	clock@PLT # Offset: 1011
    000003f8: 	pxor	%xmm0, %xmm0
    000003fc: 	movq	%r12, %rdi
    000003ff: 	movq	%rax, end_time(%rip)
    00000406: 	subq	start_time(%rip), %rax
    0000040d: 	cvtsi2sd	%rax, %xmm0
    00000412: 	divsd	DATAat0x15638(%rip), %xmm0
    0000041a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1050
    0000041f: 	movq	0x4060(%rsp), %rdi
    00000427: 	cmpq	0x10(%rsp), %rdi
    0000042c: 	je	.Ltmp2063 # Offset: 1068
    0000042e: 	movq	0x4070(%rsp), %rax
    00000436: 	leaq	0x1(%rax), %rsi
    0000043a: 	callq	_ZdlPvm@PLT # Offset: 1082
.Ltmp2063:
    0000043f: 	movq	0x20(%rsp), %rsi
    00000444: 	leaq	DATAat0x152f8(%rip), %rdx
    0000044b: 	movq	%r12, %rdi
    0000044e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1102
    00000453: 	callq	clock@PLT # Offset: 1107
    00000458: 	movl	iterations(%rip), %ecx
    0000045e: 	xorl	%r13d, %r13d
    00000461: 	movsd	DATAat0x15648(%rip), %xmm4
    00000469: 	movq	%rax, start_time(%rip)
    00000470: 	movabsq	$-0x8000000000000000, %r14
    0000047a: 	movsd	%xmm4, 0x8(%rsp)
    00000480: 	testl	%ecx, %ecx
    00000482: 	jle	.Ltmp2064 # Offset: 1154
.Ltmp2068:
    00000484: 	movq	%rbx, %rax
    00000487: 	pxor	%xmm0, %xmm0
    0000048b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2065:
    00000490: 	paddq	(%rax), %xmm0
    00000494: 	addq	$0x10, %rax
    00000498: 	cmpq	%rax, %r12
    0000049b: 	jne	.Ltmp2065 # Offset: 1179
    0000049d: 	movsd	0x8(%rsp), %xmm1
    000004a3: 	mulsd	init_value(%rip), %xmm1
    000004ab: 	comisd	DATAat0x15650(%rip), %xmm1
    000004b3: 	jae	.Ltmp2066 # Offset: 1203
    000004b9: 	cvttsd2si	%xmm1, %rdx
.Ltmp2282:
    000004be: 	movdqa	%xmm0, %xmm1
    000004c2: 	psrldq	$0x8, %xmm1
    000004c7: 	paddq	%xmm1, %xmm0
    000004cb: 	movq	%xmm0, %rax
    000004d0: 	cmpq	%rax, %rdx
    000004d3: 	je	.Ltmp2067 # Offset: 1235
    000004d5: 	movq	0x4060(%rsp), %rdx
    000004dd: 	leaq	DATAat0x151bf(%rip), %rsi
    000004e4: 	movl	$0x1, %edi
    000004e9: 	xorl	%eax, %eax
    000004eb: 	callq	__printf_chk@PLT # Offset: 1259
    000004f0: 	movl	iterations(%rip), %ecx
.Ltmp2067:
    000004f6: 	addl	$0x1, %r13d
    000004fa: 	cmpl	%ecx, %r13d
    000004fd: 	jl	.Ltmp2068 # Offset: 1277
.Ltmp2064:
    000004ff: 	callq	clock@PLT # Offset: 1279
    00000504: 	pxor	%xmm0, %xmm0
    00000508: 	movq	%r12, %rdi
    0000050b: 	movq	%rax, end_time(%rip)
    00000512: 	subq	start_time(%rip), %rax
    00000519: 	cvtsi2sd	%rax, %xmm0
    0000051e: 	divsd	DATAat0x15638(%rip), %xmm0
    00000526: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1318
    0000052b: 	movq	0x4060(%rsp), %rdi
    00000533: 	cmpq	0x10(%rsp), %rdi
    00000538: 	je	.Ltmp2069 # Offset: 1336
    0000053a: 	movq	0x4070(%rsp), %rax
    00000542: 	leaq	0x1(%rax), %rsi
    00000546: 	callq	_ZdlPvm@PLT # Offset: 1350
.Ltmp2069:
    0000054b: 	movq	0x20(%rsp), %rsi
    00000550: 	leaq	DATAat0x15320(%rip), %rdx
    00000557: 	movq	%r12, %rdi
    0000055a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1370
    0000055f: 	callq	clock@PLT # Offset: 1375
    00000564: 	movl	iterations(%rip), %ecx
    0000056a: 	movq	%rax, start_time(%rip)
    00000571: 	testl	%ecx, %ecx
    00000573: 	jle	.Ltmp2070 # Offset: 1395
    00000579: 	movq	%r15, %rsi
    0000057c: 	movsd	DATAat0x15648(%rip), %xmm5
    00000584: 	movl	$0x0, 0x18(%rsp)
    0000058c: 	subq	%rbp, %rsi
    0000058f: 	leaq	-0x8(%rsi), %rax
    00000593: 	movq	%rsi, 0x28(%rsp)
    00000598: 	shrq	$0x3, %rax
    0000059c: 	movsd	%xmm5, 0x8(%rsp)
    000005a2: 	leaq	0x1(%rax), %rdi
    000005a6: 	movq	%rdi, %rax
    000005a9: 	movq	%rdi, 0x38(%rsp)
    000005ae: 	andq	$-0x2, %rdi
    000005b2: 	shrq	%rax
    000005b5: 	leaq	(%rbp,%rdi,8), %r13
    000005ba: 	movq	%rdi, 0x30(%rsp)
    000005bf: 	shlq	$0x4, %rax
    000005c3: 	cmpq	$0x8, %rsi
    000005c7: 	cmoveq	%rbp, %r13
    000005cb: 	leaq	(%rax,%rbp), %r14
.Ltmp2076:
    000005cf: 	xorl	%eax, %eax
    000005d1: 	cmpq	%r15, %rbp
    000005d4: 	je	.Ltmp2071 # Offset: 1492
    000005d6: 	cmpq	$0x8, 0x28(%rsp)
    000005dc: 	je	.Ltmp2072 # Offset: 1500
    000005e2: 	movq	%rbp, %rax
    000005e5: 	pxor	%xmm0, %xmm0
    000005e9: 	nopl	(%rax) # Size: 7
.Ltmp2073:
    000005f0: 	movdqu	(%rax), %xmm3
    000005f4: 	addq	$0x10, %rax
    000005f8: 	paddq	%xmm3, %xmm0
    000005fc: 	cmpq	%rax, %r14
    000005ff: 	jne	.Ltmp2073 # Offset: 1535
    00000601: 	movdqa	%xmm0, %xmm1
    00000605: 	movq	0x38(%rsp), %rsi
    0000060a: 	psrldq	$0x8, %xmm1
    0000060f: 	paddq	%xmm1, %xmm0
    00000613: 	movq	%xmm0, %rax
    00000618: 	cmpq	%rsi, 0x30(%rsp)
    0000061d: 	je	.Ltmp2071 # Offset: 1565
.Ltmp2362:
    0000061f: 	addq	(%r13), %rax
.Ltmp2071:
    00000623: 	movsd	0x8(%rsp), %xmm0
    00000629: 	mulsd	init_value(%rip), %xmm0
    00000631: 	comisd	DATAat0x15650(%rip), %xmm0
    00000639: 	jae	.Ltmp2074 # Offset: 1593
    0000063f: 	cvttsd2si	%xmm0, %rdx
.Ltmp2281:
    00000644: 	cmpq	%rdx, %rax
    00000647: 	je	.Ltmp2075 # Offset: 1607
    00000649: 	movq	0x4060(%rsp), %rdx
    00000651: 	leaq	DATAat0x151bf(%rip), %rsi
    00000658: 	movl	$0x1, %edi
    0000065d: 	xorl	%eax, %eax
    0000065f: 	callq	__printf_chk@PLT # Offset: 1631
    00000664: 	movl	iterations(%rip), %ecx
.Ltmp2075:
    0000066a: 	addl	$0x1, 0x18(%rsp)
    0000066f: 	movl	0x18(%rsp), %eax
    00000673: 	cmpl	%ecx, %eax
    00000675: 	jl	.Ltmp2076 # Offset: 1653
.Ltmp2070:
    0000067b: 	callq	clock@PLT # Offset: 1659
    00000680: 	pxor	%xmm0, %xmm0
    00000684: 	movq	%r12, %rdi
    00000687: 	movq	%rax, end_time(%rip)
    0000068e: 	subq	start_time(%rip), %rax
    00000695: 	cvtsi2sd	%rax, %xmm0
    0000069a: 	divsd	DATAat0x15638(%rip), %xmm0
    000006a2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1698
    000006a7: 	movq	0x4060(%rsp), %rdi
    000006af: 	cmpq	0x10(%rsp), %rdi
    000006b4: 	je	.Ltmp2077 # Offset: 1716
    000006b6: 	movq	0x4070(%rsp), %rax
    000006be: 	leaq	0x1(%rax), %rsi
    000006c2: 	callq	_ZdlPvm@PLT # Offset: 1730
.Ltmp2077:
    000006c7: 	movq	0x20(%rsp), %rsi
    000006cc: 	leaq	DATAat0x15350(%rip), %rdx
    000006d3: 	movq	%r12, %rdi
    000006d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1750
    000006db: 	callq	clock@PLT # Offset: 1755
    000006e0: 	movl	iterations(%rip), %ecx
    000006e6: 	movq	%rax, start_time(%rip)
    000006ed: 	testl	%ecx, %ecx
    000006ef: 	jle	.Ltmp2078 # Offset: 1775
    000006f5: 	movq	%r15, %rsi
    000006f8: 	movsd	DATAat0x15648(%rip), %xmm4
    00000700: 	movl	$0x0, 0x18(%rsp)
    00000708: 	subq	%rbp, %rsi
    0000070b: 	leaq	-0x8(%rsi), %rax
    0000070f: 	movq	%rsi, 0x28(%rsp)
    00000714: 	shrq	$0x3, %rax
    00000718: 	movsd	%xmm4, 0x8(%rsp)
    0000071e: 	leaq	0x1(%rax), %rdi
    00000722: 	movq	%rdi, %rax
    00000725: 	movq	%rdi, 0x38(%rsp)
    0000072a: 	andq	$-0x2, %rdi
    0000072e: 	shrq	%rax
    00000731: 	leaq	(%rbp,%rdi,8), %r13
    00000736: 	movq	%rdi, 0x30(%rsp)
    0000073b: 	shlq	$0x4, %rax
    0000073f: 	cmpq	$0x8, %rsi
    00000743: 	cmoveq	%rbp, %r13
    00000747: 	leaq	(%rax,%rbp), %r14
.Ltmp2084:
    0000074b: 	xorl	%eax, %eax
    0000074d: 	cmpq	%r15, %rbp
    00000750: 	je	.Ltmp2079 # Offset: 1872
    00000752: 	cmpq	$0x8, 0x28(%rsp)
    00000758: 	je	.Ltmp2080 # Offset: 1880
    0000075e: 	movq	%rbp, %rax
    00000761: 	pxor	%xmm0, %xmm0
    00000765: 	nopl	(%rax) # Size: 3
.Ltmp2081:
    00000768: 	movdqu	(%rax), %xmm4
    0000076c: 	addq	$0x10, %rax
    00000770: 	paddq	%xmm4, %xmm0
    00000774: 	cmpq	%rax, %r14
    00000777: 	jne	.Ltmp2081 # Offset: 1911
    00000779: 	movdqa	%xmm0, %xmm1
    0000077d: 	movq	0x38(%rsp), %rsi
    00000782: 	psrldq	$0x8, %xmm1
    00000787: 	paddq	%xmm1, %xmm0
    0000078b: 	movq	%xmm0, %rax
    00000790: 	cmpq	%rsi, 0x30(%rsp)
    00000795: 	je	.Ltmp2079 # Offset: 1941
.Ltmp2360:
    00000797: 	addq	(%r13), %rax
.Ltmp2079:
    0000079b: 	movsd	0x8(%rsp), %xmm0
    000007a1: 	mulsd	init_value(%rip), %xmm0
    000007a9: 	comisd	DATAat0x15650(%rip), %xmm0
    000007b1: 	jae	.Ltmp2082 # Offset: 1969
    000007b7: 	cvttsd2si	%xmm0, %rdx
.Ltmp2280:
    000007bc: 	cmpq	%rax, %rdx
    000007bf: 	je	.Ltmp2083 # Offset: 1983
    000007c1: 	movq	0x4060(%rsp), %rdx
    000007c9: 	leaq	DATAat0x151bf(%rip), %rsi
    000007d0: 	movl	$0x1, %edi
    000007d5: 	xorl	%eax, %eax
    000007d7: 	callq	__printf_chk@PLT # Offset: 2007
    000007dc: 	movl	iterations(%rip), %ecx
.Ltmp2083:
    000007e2: 	addl	$0x1, 0x18(%rsp)
    000007e7: 	movl	0x18(%rsp), %eax
    000007eb: 	cmpl	%ecx, %eax
    000007ed: 	jl	.Ltmp2084 # Offset: 2029
.Ltmp2078:
    000007f3: 	callq	clock@PLT # Offset: 2035
    000007f8: 	pxor	%xmm0, %xmm0
    000007fc: 	movq	%r12, %rdi
    000007ff: 	movq	%rax, end_time(%rip)
    00000806: 	subq	start_time(%rip), %rax
    0000080d: 	cvtsi2sd	%rax, %xmm0
    00000812: 	divsd	DATAat0x15638(%rip), %xmm0
    0000081a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2074
    0000081f: 	movq	0x4060(%rsp), %rdi
    00000827: 	cmpq	0x10(%rsp), %rdi
    0000082c: 	je	.Ltmp2085 # Offset: 2092
    0000082e: 	movq	0x4070(%rsp), %rax
    00000836: 	leaq	0x1(%rax), %rsi
    0000083a: 	callq	_ZdlPvm@PLT # Offset: 2106
.Ltmp2085:
    0000083f: 	movq	0x20(%rsp), %rsi
    00000844: 	leaq	DATAat0x15380(%rip), %rdx
    0000084b: 	movq	%r12, %rdi
    0000084e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2126
    00000853: 	callq	clock@PLT # Offset: 2131
    00000858: 	movl	iterations(%rip), %ecx
    0000085e: 	movq	%rax, start_time(%rip)
    00000865: 	testl	%ecx, %ecx
    00000867: 	jle	.Ltmp2086 # Offset: 2151
    0000086d: 	movq	%r15, %rsi
    00000870: 	movsd	DATAat0x15648(%rip), %xmm5
    00000878: 	movl	$0x0, 0x18(%rsp)
    00000880: 	subq	%rbp, %rsi
    00000883: 	leaq	-0x8(%rsi), %rax
    00000887: 	movq	%rsi, 0x28(%rsp)
    0000088c: 	shrq	$0x3, %rax
    00000890: 	movsd	%xmm5, 0x8(%rsp)
    00000896: 	leaq	0x1(%rax), %rdi
    0000089a: 	movq	%rdi, %rax
    0000089d: 	movq	%rdi, 0x38(%rsp)
    000008a2: 	andq	$-0x2, %rdi
    000008a6: 	shrq	%rax
    000008a9: 	leaq	(%rbp,%rdi,8), %r13
    000008ae: 	movq	%rdi, 0x30(%rsp)
    000008b3: 	shlq	$0x4, %rax
    000008b7: 	cmpq	$0x8, %rsi
    000008bb: 	cmoveq	%rbp, %r13
    000008bf: 	leaq	(%rax,%rbp), %r14
.Ltmp2093:
    000008c3: 	cmpq	%r15, %rbp
    000008c6: 	je	.Ltmp2087 # Offset: 2246
    000008cc: 	cmpq	$0x8, 0x28(%rsp)
    000008d2: 	je	.Ltmp2088 # Offset: 2258
    000008d8: 	movq	%rbp, %rax
    000008db: 	pxor	%xmm0, %xmm0
    000008df: 	nop # Size: 1
.Ltmp2089:
    000008e0: 	movdqu	(%rax), %xmm5
    000008e4: 	addq	$0x10, %rax
    000008e8: 	paddq	%xmm5, %xmm0
    000008ec: 	cmpq	%rax, %r14
    000008ef: 	jne	.Ltmp2089 # Offset: 2287
    000008f1: 	movdqa	%xmm0, %xmm1
    000008f5: 	movq	0x38(%rsp), %rsi
    000008fa: 	psrldq	$0x8, %xmm1
    000008ff: 	paddq	%xmm1, %xmm0
    00000903: 	movq	%xmm0, %rax
    00000908: 	cmpq	%rsi, 0x30(%rsp)
    0000090d: 	je	.Ltmp2090 # Offset: 2317
.Ltmp2361:
    0000090f: 	addq	(%r13), %rax
.Ltmp2090:
    00000913: 	movsd	0x8(%rsp), %xmm0
    00000919: 	mulsd	init_value(%rip), %xmm0
    00000921: 	comisd	DATAat0x15650(%rip), %xmm0
    00000929: 	jae	.Ltmp2091 # Offset: 2345
    0000092f: 	cvttsd2si	%xmm0, %rdx
.Ltmp2279:
    00000934: 	cmpq	%rax, %rdx
    00000937: 	je	.Ltmp2092 # Offset: 2359
    00000939: 	movq	0x4060(%rsp), %rdx
    00000941: 	leaq	DATAat0x151bf(%rip), %rsi
    00000948: 	movl	$0x1, %edi
    0000094d: 	xorl	%eax, %eax
    0000094f: 	callq	__printf_chk@PLT # Offset: 2383
    00000954: 	movl	iterations(%rip), %ecx
.Ltmp2092:
    0000095a: 	addl	$0x1, 0x18(%rsp)
    0000095f: 	movl	0x18(%rsp), %eax
    00000963: 	cmpl	%ecx, %eax
    00000965: 	jl	.Ltmp2093 # Offset: 2405
.Ltmp2086:
    0000096b: 	callq	clock@PLT # Offset: 2411
    00000970: 	pxor	%xmm0, %xmm0
    00000974: 	movq	%r12, %rdi
    00000977: 	movq	%rax, end_time(%rip)
    0000097e: 	subq	start_time(%rip), %rax
    00000985: 	cvtsi2sd	%rax, %xmm0
    0000098a: 	divsd	DATAat0x15638(%rip), %xmm0
    00000992: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2450
    00000997: 	movq	0x4060(%rsp), %rdi
    0000099f: 	cmpq	0x10(%rsp), %rdi
    000009a4: 	je	.Ltmp2094 # Offset: 2468
    000009a6: 	movq	0x4070(%rsp), %rax
    000009ae: 	leaq	0x1(%rax), %rsi
    000009b2: 	callq	_ZdlPvm@PLT # Offset: 2482
.Ltmp2094:
    000009b7: 	movq	0x20(%rsp), %rsi
    000009bc: 	leaq	0x160(%rsp), %rdi
    000009c4: 	leaq	DATAat0x1523d(%rip), %rdx
    000009cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2507
    000009d0: 	movl	iterations(%rip), %edx
    000009d6: 	movl	$0x1, %r8d
    000009dc: 	movl	$0x1, %ecx
    000009e1: 	movq	0x160(%rsp), %rdi
    000009e9: 	movl	$0x7d0, %esi
    000009ee: 	callq	_Z9summarizePKciiii # Offset: 2542
    000009f3: 	movslq	iterations(%rip), %rax
    000009fa: 	movq	0x40(%rsp), %rdi
    000009ff: 	pxor	%xmm0, %xmm0
    00000a03: 	movl	$0x7d0, %esi
    00000a08: 	movq	$0x0, 0x130(%rsp)
    00000a14: 	movq	%rax, %rdx
    00000a17: 	imulq	$0x10624dd3, %rax, %rax
    00000a1e: 	movaps	%xmm0, 0x120(%rsp)
    00000a26: 	sarl	$0x1f, %edx
    00000a29: 	sarq	$0x27, %rax
    00000a2d: 	subl	%edx, %eax
    00000a2f: 	movl	%eax, iterations(%rip)
    00000a35: 	callq	_ZNSt6vectorImSaImEE17_M_default_appendEm # Offset: 2613
    00000a3a: 	movq	%r12, %rdx
    00000a3d: 	leaq	0x7ee0(%rsp), %rdi
    00000a45: 	movabsq	$0x5851f42d4c957f2d, %rsi
    00000a4f: 	movabsq	$0x14057b7ef767814f, %rcx
.Ltmp2095:
    00000a59: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000a60: 	addq	$0x8, %rdx
    00000a64: 	imulq	%rsi, %rax
    00000a68: 	addq	%rcx, %rax
    00000a6b: 	movq	%rax, %r8
    00000a6e: 	movq	%rax, %r9
    00000a71: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000a78: 	shrq	$0x14, %r8
    00000a7c: 	shlq	$0x17, %r9
    00000a80: 	xorq	%r9, %r8
    00000a83: 	xorq	%r8, %rax
    00000a86: 	sarq	$0x3, %rax
    00000a8a: 	movq	%rax, -0x8(%rdx)
    00000a8e: 	cmpq	%rdi, %rdx
    00000a91: 	jne	.Ltmp2095 # Offset: 2705
    00000a93: 	movq	0x120(%rsp), %r13
    00000a9b: 	movl	$0x3e80, %edx
    00000aa0: 	movq	%r12, %rsi
    00000aa3: 	movq	%r13, %rdi
    00000aa6: 	callq	memcpy@PLT # Offset: 2726
    00000aab: 	movq	0x128(%rsp), %rax
    00000ab3: 	movq	0x20(%rsp), %rsi
    00000ab8: 	leaq	DATAat0x153b0(%rip), %rdx
    00000abf: 	movq	%rax, 0x8(%rsp)
    00000ac4: 	leaq	0x1c0(%rsp), %rax
    00000acc: 	movq	%rax, %rdi
    00000acf: 	movq	%rax, 0x18(%rsp)
    00000ad4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2772
    00000ad9: 	callq	clock@PLT # Offset: 2777
    00000ade: 	leaq	0x1e8(%rsp), %rdi
    00000ae6: 	xorl	%r14d, %r14d
    00000ae9: 	movq	%rax, start_time(%rip)
    00000af0: 	movl	iterations(%rip), %eax
    00000af6: 	movq	%rdi, 0x28(%rsp)
    00000afb: 	movl	%eax, 0x10(%rsp)
    00000aff: 	testl	%eax, %eax
    00000b01: 	jle	.Ltmp2096 # Offset: 2817
.Ltmp2102:
    00000b07: 	movq	%rbx, %rdi
    00000b0a: 	movl	$0x3e80, %edx
    00000b0f: 	movq	%r12, %rsi
    00000b12: 	callq	memcpy@PLT # Offset: 2834
    00000b17: 	movq	0x28(%rsp), %rdi
    00000b1c: 	nopl	(%rax) # Size: 4
.Ltmp2099:
    00000b20: 	movq	(%rdi), %rsi
    00000b23: 	movq	%rdi, %rax
    00000b26: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2098:
    00000b30: 	movq	%rax, %rdx
    00000b33: 	leaq	-0x8(%rax), %rax
    00000b37: 	movq	-0x8(%rdx), %rcx
    00000b3b: 	cmpq	%rcx, %rsi
    00000b3e: 	jae	.Ltmp2097 # Offset: 2878
    00000b40: 	movq	%rcx, 0x8(%rax)
    00000b44: 	cmpq	%rbx, %rax
    00000b47: 	jne	.Ltmp2098 # Offset: 2887
    00000b49: 	movq	%rbx, %rdx
.Ltmp2097:
    00000b4c: 	addq	$0x8, %rdi
    00000b50: 	movq	%rsi, (%rdx)
    00000b53: 	cmpq	%r12, %rdi
    00000b56: 	jne	.Ltmp2099 # Offset: 2902
    00000b58: 	movq	0x1e0(%rsp), %rdx
    00000b60: 	movq	0x28(%rsp), %rax
    00000b65: 	nopl	(%rax) # Size: 3
.Ltmp2101:
    00000b68: 	addq	$0x8, %rax
    00000b6c: 	movq	%rdx, %rcx
    00000b6f: 	movq	-0x8(%rax), %rdx
    00000b73: 	cmpq	%rcx, %rdx
    00000b76: 	jb	.Ltmp2100 # Offset: 2934
    00000b7c: 	cmpq	%r12, %rax
    00000b7f: 	jne	.Ltmp2101 # Offset: 2943
    00000b81: 	addl	$0x1, %r14d
    00000b85: 	cmpl	0x10(%rsp), %r14d
    00000b8a: 	jl	.Ltmp2102 # Offset: 2954
.Ltmp2096:
    00000b90: 	callq	clock@PLT # Offset: 2960
    00000b95: 	movq	0x18(%rsp), %rdi
    00000b9a: 	pxor	%xmm0, %xmm0
    00000b9e: 	movq	%rax, end_time(%rip)
    00000ba5: 	subq	start_time(%rip), %rax
    00000bac: 	cvtsi2sd	%rax, %xmm0
    00000bb1: 	divsd	DATAat0x15638(%rip), %xmm0
    00000bb9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3001
    00000bbe: 	movq	0x1c0(%rsp), %rdi
    00000bc6: 	leaq	0x1d0(%rsp), %rax
    00000bce: 	movq	%rax, 0x10(%rsp)
    00000bd3: 	cmpq	%rax, %rdi
    00000bd6: 	je	.Ltmp2103 # Offset: 3030
    00000bd8: 	movq	0x1d0(%rsp), %rax
    00000be0: 	leaq	0x1(%rax), %rsi
    00000be4: 	callq	_ZdlPvm@PLT # Offset: 3044
.Ltmp2103:
    00000be9: 	movq	0x20(%rsp), %rsi
    00000bee: 	movq	0x18(%rsp), %rdi
    00000bf3: 	leaq	DATAat0x153d0(%rip), %rdx
    00000bfa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3066
    00000bff: 	callq	clock@PLT # Offset: 3071
    00000c04: 	movl	iterations(%rip), %r8d
    00000c0b: 	movq	%rax, start_time(%rip)
    00000c12: 	testl	%r8d, %r8d
    00000c15: 	jle	.Ltmp2104 # Offset: 3093
    00000c1b: 	leaq	0x8(%rbp), %rax
    00000c1f: 	leaq	0x8(%r13), %rdx
    00000c23: 	movl	$0x0, 0x30(%rsp)
    00000c2b: 	movq	%rax, 0x38(%rsp)
    00000c30: 	movq	0x8(%rsp), %rax
    00000c35: 	subq	$0x8, %rax
    00000c39: 	subq	%r13, %rax
    00000c3c: 	cmpq	%rdx, %rbp
    00000c3f: 	setne	%cl
    00000c42: 	cmpq	$0x10, %rax
    00000c46: 	seta	%dl
    00000c49: 	shrq	$0x3, %rax
    00000c4d: 	leaq	0x1(%rax), %rdi
    00000c51: 	andl	%edx, %ecx
    00000c53: 	movq	%rdi, %rax
    00000c56: 	movq	%rdi, 0x60(%rsp)
    00000c5b: 	andq	$-0x2, %rdi
    00000c5f: 	shrq	%rax
    00000c62: 	movb	%cl, 0x40(%rsp)
    00000c66: 	shlq	$0x4, %rax
    00000c6a: 	movq	%rdi, 0x58(%rsp)
    00000c6f: 	movq	%rax, 0x48(%rsp)
    00000c74: 	leaq	(,%rdi,8), %rax
    00000c7c: 	leaq	(%r13,%rax), %r14
    00000c81: 	addq	%rbp, %rax
    00000c84: 	movq	%rax, 0x28(%rsp)
.Ltmp2116:
    00000c89: 	cmpq	%r13, 0x8(%rsp)
    00000c8e: 	je	.Ltmp2105 # Offset: 3214
    00000c90: 	cmpb	$0x0, 0x40(%rsp)
    00000c95: 	je	.Ltmp2106 # Offset: 3221
    00000c9b: 	movq	0x48(%rsp), %rdx
    00000ca0: 	xorl	%eax, %eax
    00000ca2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2107:
    00000ca8: 	movdqu	(%r13,%rax), %xmm6
    00000caf: 	movups	%xmm6, (%rbp,%rax)
    00000cb4: 	addq	$0x10, %rax
    00000cb8: 	cmpq	%rax, %rdx
    00000cbb: 	jne	.Ltmp2107 # Offset: 3259
    00000cbd: 	movq	0x60(%rsp), %rdi
    00000cc2: 	cmpq	%rdi, 0x58(%rsp)
    00000cc7: 	je	.Ltmp2105 # Offset: 3271
    00000cc9: 	movq	(%r14), %rax
    00000ccc: 	movq	0x28(%rsp), %rdi
    00000cd1: 	movq	%rax, (%rdi)
.Ltmp2105:
    00000cd4: 	cmpq	%r15, %rbp
    00000cd7: 	je	.Ltmp2108 # Offset: 3287
    00000cd9: 	movq	0x38(%rsp), %rax
    00000cde: 	cmpq	%rax, %r15
    00000ce1: 	je	.Ltmp2108 # Offset: 3297
    00000ce3: 	movq	%rax, %rdi
    00000ce6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2112:
    00000cf0: 	movq	(%rdi), %rsi
    00000cf3: 	movq	%rdi, %rax
    00000cf6: 	cmpq	%rdi, %rbp
    00000cf9: 	jne	.Ltmp2109 # Offset: 3321
    00000cfb: 	jmp	.Ltmp2110 # Offset: 3323
.Ltmp2111:
    00000d00: 	movq	%rcx, 0x8(%rax)
    00000d04: 	cmpq	%rax, %rbp
    00000d07: 	je	.Ltmp2110 # Offset: 3335
.Ltmp2109:
    00000d0d: 	movq	%rax, %rdx
    00000d10: 	leaq	-0x8(%rax), %rax
    00000d14: 	movq	-0x8(%rdx), %rcx
    00000d18: 	cmpq	%rcx, %rsi
    00000d1b: 	jb	.Ltmp2111 # Offset: 3355
    00000d1d: 	addq	$0x8, %rdi
    00000d21: 	movq	%rsi, (%rdx)
    00000d24: 	cmpq	%rdi, %r15
    00000d27: 	jne	.Ltmp2112 # Offset: 3367
.Ltmp2108:
    00000d29: 	movq	0x38(%rsp), %rax
    00000d2e: 	jmp	.Ltmp2113 # Offset: 3374
.Ltmp2115:
    00000d30: 	addq	$0x8, %rax
    00000d34: 	movq	-0x10(%rax), %rdi
    00000d38: 	cmpq	%rdi, (%rdx)
    00000d3b: 	jb	.Ltmp2114 # Offset: 3387
.Ltmp2113:
    00000d41: 	movq	%rax, %rdx
    00000d44: 	cmpq	%rax, %r15
    00000d47: 	jne	.Ltmp2115 # Offset: 3399
    00000d49: 	addl	$0x1, 0x30(%rsp)
    00000d4e: 	movl	0x30(%rsp), %eax
    00000d52: 	cmpl	%r8d, %eax
    00000d55: 	jl	.Ltmp2116 # Offset: 3413
.Ltmp2104:
    00000d5b: 	callq	clock@PLT # Offset: 3419
    00000d60: 	movq	0x18(%rsp), %rdi
    00000d65: 	pxor	%xmm0, %xmm0
    00000d69: 	movq	%rax, end_time(%rip)
    00000d70: 	subq	start_time(%rip), %rax
    00000d77: 	cvtsi2sd	%rax, %xmm0
    00000d7c: 	divsd	DATAat0x15638(%rip), %xmm0
    00000d84: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3460
    00000d89: 	movq	0x1c0(%rsp), %rdi
    00000d91: 	cmpq	0x10(%rsp), %rdi
    00000d96: 	je	.Ltmp2117 # Offset: 3478
    00000d98: 	movq	0x1d0(%rsp), %rax
    00000da0: 	leaq	0x1(%rax), %rsi
    00000da4: 	callq	_ZdlPvm@PLT # Offset: 3492
.Ltmp2117:
    00000da9: 	movq	0x20(%rsp), %rsi
    00000dae: 	movq	0x18(%rsp), %rdi
    00000db3: 	leaq	DATAat0x153f0(%rip), %rdx
    00000dba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3514
    00000dbf: 	callq	clock@PLT # Offset: 3519
    00000dc4: 	movl	iterations(%rip), %esi
    00000dca: 	xorl	%r14d, %r14d
    00000dcd: 	movq	%rax, start_time(%rip)
    00000dd4: 	leaq	0x1e8(%rsp), %rax
    00000ddc: 	movq	%rax, 0x28(%rsp)
    00000de1: 	testl	%esi, %esi
    00000de3: 	jle	.Ltmp2118 # Offset: 3555
.Ltmp2124:
    00000de9: 	movq	%r12, %rsi
    00000dec: 	movq	%rbx, %rdi
    00000def: 	movl	$0x3e80, %edx
    00000df4: 	callq	memcpy@PLT # Offset: 3572
    00000df9: 	movq	0x28(%rsp), %rdi
    00000dfe: 	movq	%rdi, %rsi
    00000e01: 	nopl	(%rax) # Size: 7
.Ltmp2121:
    00000e08: 	movq	(%rdi), %rcx
    00000e0b: 	movq	%rdi, %rax
    00000e0e: 	nop # Size: 2
.Ltmp2120:
    00000e10: 	movq	-0x8(%rax), %rdx
    00000e14: 	cmpq	%rdx, %rcx
    00000e17: 	jae	.Ltmp2119 # Offset: 3607
    00000e19: 	movq	%rdx, (%rax)
    00000e1c: 	subq	$0x8, %rax
    00000e20: 	cmpq	%rax, %rbx
    00000e23: 	jne	.Ltmp2120 # Offset: 3619
.Ltmp2119:
    00000e25: 	addq	$0x8, %rdi
    00000e29: 	movq	%rcx, (%rax)
    00000e2c: 	cmpq	%rdi, %r12
    00000e2f: 	jne	.Ltmp2121 # Offset: 3631
    00000e31: 	movq	0x1e0(%rsp), %rax
    00000e39: 	nopl	(%rax) # Size: 7
.Ltmp2123:
    00000e40: 	movq	%rax, %rdx
    00000e43: 	movq	(%rsi), %rax
    00000e46: 	cmpq	%rdx, %rax
    00000e49: 	jb	.Ltmp2122 # Offset: 3657
    00000e4f: 	addq	$0x8, %rsi
    00000e53: 	cmpq	%rsi, %r12
    00000e56: 	jne	.Ltmp2123 # Offset: 3670
    00000e58: 	addl	$0x1, %r14d
    00000e5c: 	cmpl	iterations(%rip), %r14d
    00000e63: 	jl	.Ltmp2124 # Offset: 3683
.Ltmp2118:
    00000e65: 	callq	clock@PLT # Offset: 3685
    00000e6a: 	movq	0x18(%rsp), %rdi
    00000e6f: 	pxor	%xmm0, %xmm0
    00000e73: 	movq	%rax, end_time(%rip)
    00000e7a: 	subq	start_time(%rip), %rax
    00000e81: 	cvtsi2sd	%rax, %xmm0
    00000e86: 	divsd	DATAat0x15638(%rip), %xmm0
    00000e8e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3726
    00000e93: 	movq	0x1c0(%rsp), %rdi
    00000e9b: 	cmpq	0x10(%rsp), %rdi
    00000ea0: 	je	.Ltmp2125 # Offset: 3744
    00000ea2: 	movq	0x1d0(%rsp), %rax
    00000eaa: 	leaq	0x1(%rax), %rsi
    00000eae: 	callq	_ZdlPvm@PLT # Offset: 3758
.Ltmp2125:
    00000eb3: 	movq	0x18(%rsp), %r14
    00000eb8: 	movq	0x20(%rsp), %rsi
    00000ebd: 	leaq	DATAat0x15418(%rip), %rdx
    00000ec4: 	movq	%r14, %rdi
    00000ec7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3783
    00000ecc: 	movq	0x8(%rsp), %rax
    00000ed1: 	leaq	0xf0(%rsp), %rcx
    00000ed9: 	movq	%r14, %r8
    00000edc: 	leaq	0xe0(%rsp), %rdx
    00000ee4: 	leaq	0xc0(%rsp), %rdi
    00000eec: 	movq	%r15, 0xf8(%rsp)
    00000ef4: 	movq	%rax, 0xd8(%rsp)
    00000efc: 	leaq	0xd0(%rsp), %rax
    00000f04: 	movq	%rax, %rsi
    00000f07: 	movq	%rbp, 0xe8(%rsp)
    00000f0f: 	movq	%r13, 0xc8(%rsp)
    00000f17: 	movq	%rcx, 0x30(%rsp)
    00000f1c: 	movq	%rdx, 0x40(%rsp)
    00000f21: 	movq	%rax, 0x60(%rsp)
    00000f26: 	movq	%rdi, 0x58(%rsp)
    00000f2b: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3883
    00000f30: 	movq	0x1c0(%rsp), %rdi
    00000f38: 	cmpq	0x10(%rsp), %rdi
    00000f3d: 	je	.Ltmp2126 # Offset: 3901
    00000f3f: 	movq	0x1d0(%rsp), %rax
    00000f47: 	leaq	0x1(%rax), %rsi
    00000f4b: 	callq	_ZdlPvm@PLT # Offset: 3915
.Ltmp2126:
    00000f50: 	movq	0x18(%rsp), %r14
    00000f55: 	movq	0x20(%rsp), %rsi
    00000f5a: 	leaq	DATAat0x15448(%rip), %rdx
    00000f61: 	movq	%r14, %rdi
    00000f64: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3940
    00000f69: 	movq	0x8(%rsp), %rax
    00000f6e: 	movq	0x30(%rsp), %rcx
    00000f73: 	movq	%r14, %r8
    00000f76: 	movq	%r15, 0xf8(%rsp)
    00000f7e: 	movq	0x40(%rsp), %rdx
    00000f83: 	movq	0x60(%rsp), %rsi
    00000f88: 	movq	%rbp, 0xe8(%rsp)
    00000f90: 	movq	0x58(%rsp), %rdi
    00000f95: 	movq	%rax, 0xd8(%rsp)
    00000f9d: 	movq	%r13, 0xc8(%rsp)
    00000fa5: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 4005
    00000faa: 	movq	0x1c0(%rsp), %rdi
    00000fb2: 	cmpq	0x10(%rsp), %rdi
    00000fb7: 	je	.Ltmp2127 # Offset: 4023
    00000fb9: 	movq	0x1d0(%rsp), %rax
    00000fc1: 	leaq	0x1(%rax), %rsi
    00000fc5: 	callq	_ZdlPvm@PLT # Offset: 4037
.Ltmp2127:
    00000fca: 	movq	0x20(%rsp), %rsi
    00000fcf: 	movq	0x18(%rsp), %rdi
    00000fd4: 	leaq	DATAat0x15478(%rip), %rdx
    00000fdb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4059
    00000fe0: 	callq	clock@PLT # Offset: 4064
    00000fe5: 	movl	iterations(%rip), %r8d
    00000fec: 	movq	%rax, start_time(%rip)
    00000ff3: 	testl	%r8d, %r8d
    00000ff6: 	jle	.Ltmp2128 # Offset: 4086
    00000ffc: 	leaq	0x8(%rbp), %rax
    00001000: 	leaq	0x8(%r13), %rdx
    00001004: 	movl	$0x0, 0x38(%rsp)
    0000100c: 	movq	%rax, 0x48(%rsp)
    00001011: 	movq	0x8(%rsp), %rax
    00001016: 	subq	$0x8, %rax
    0000101a: 	subq	%r13, %rax
    0000101d: 	cmpq	%rdx, %rbp
    00001020: 	setne	%cl
    00001023: 	cmpq	$0x10, %rax
    00001027: 	seta	%dl
    0000102a: 	shrq	$0x3, %rax
    0000102e: 	leaq	0x1(%rax), %rdi
    00001032: 	andl	%edx, %ecx
    00001034: 	movq	%rdi, %rax
    00001037: 	movq	%rdi, 0x80(%rsp)
    0000103f: 	andq	$-0x2, %rdi
    00001043: 	shrq	%rax
    00001046: 	movb	%cl, 0x68(%rsp)
    0000104a: 	shlq	$0x4, %rax
    0000104e: 	movq	%rdi, 0x78(%rsp)
    00001053: 	movq	%rax, 0x70(%rsp)
    00001058: 	leaq	(,%rdi,8), %rax
    00001060: 	leaq	(%r13,%rax), %r14
    00001065: 	addq	%rbp, %rax
    00001068: 	movq	%rax, 0x28(%rsp)
.Ltmp2140:
    0000106d: 	cmpq	%r13, 0x8(%rsp)
    00001072: 	je	.Ltmp2129 # Offset: 4210
    00001074: 	cmpb	$0x0, 0x68(%rsp)
    00001079: 	je	.Ltmp2130 # Offset: 4217
    0000107f: 	movq	0x70(%rsp), %rdx
    00001084: 	xorl	%eax, %eax
    00001086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2131:
    00001090: 	movdqu	(%r13,%rax), %xmm7
    00001097: 	movups	%xmm7, (%rbp,%rax)
    0000109c: 	addq	$0x10, %rax
    000010a0: 	cmpq	%rax, %rdx
    000010a3: 	jne	.Ltmp2131 # Offset: 4259
    000010a5: 	movq	0x80(%rsp), %rdi
    000010ad: 	cmpq	%rdi, 0x78(%rsp)
    000010b2: 	je	.Ltmp2129 # Offset: 4274
    000010b4: 	movq	(%r14), %rax
    000010b7: 	movq	0x28(%rsp), %rdi
    000010bc: 	movq	%rax, (%rdi)
.Ltmp2129:
    000010bf: 	cmpq	%r15, %rbp
    000010c2: 	je	.Ltmp2132 # Offset: 4290
    000010c4: 	movq	0x48(%rsp), %rax
    000010c9: 	cmpq	%rax, %r15
    000010cc: 	je	.Ltmp2132 # Offset: 4300
    000010ce: 	movq	%rax, %rdi
    000010d1: 	nopl	(%rax) # Size: 7
.Ltmp2136:
    000010d8: 	movq	(%rdi), %rsi
    000010db: 	movq	%rdi, %rax
    000010de: 	cmpq	%rdi, %rbp
    000010e1: 	jne	.Ltmp2133 # Offset: 4321
    000010e3: 	jmp	.Ltmp2134 # Offset: 4323
    000010e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2135:
    000010f0: 	movq	%rcx, 0x8(%rax)
    000010f4: 	cmpq	%rax, %rbp
    000010f7: 	je	.Ltmp2134 # Offset: 4343
.Ltmp2133:
    000010fd: 	movq	%rax, %rdx
    00001100: 	leaq	-0x8(%rax), %rax
    00001104: 	movq	-0x8(%rdx), %rcx
    00001108: 	cmpq	%rcx, %rsi
    0000110b: 	jb	.Ltmp2135 # Offset: 4363
    0000110d: 	addq	$0x8, %rdi
    00001111: 	movq	%rsi, (%rdx)
    00001114: 	cmpq	%rdi, %r15
    00001117: 	jne	.Ltmp2136 # Offset: 4375
.Ltmp2132:
    00001119: 	movq	0x48(%rsp), %rax
    0000111e: 	jmp	.Ltmp2137 # Offset: 4382
.Ltmp2139:
    00001120: 	addq	$0x8, %rax
    00001124: 	movq	-0x10(%rax), %rdi
    00001128: 	cmpq	%rdi, (%rdx)
    0000112b: 	jb	.Ltmp2138 # Offset: 4395
.Ltmp2137:
    00001131: 	movq	%rax, %rdx
    00001134: 	cmpq	%rax, %r15
    00001137: 	jne	.Ltmp2139 # Offset: 4407
    00001139: 	addl	$0x1, 0x38(%rsp)
    0000113e: 	movl	0x38(%rsp), %eax
    00001142: 	cmpl	%r8d, %eax
    00001145: 	jl	.Ltmp2140 # Offset: 4421
.Ltmp2128:
    0000114b: 	callq	clock@PLT # Offset: 4427
    00001150: 	movq	0x18(%rsp), %rdi
    00001155: 	pxor	%xmm0, %xmm0
    00001159: 	movq	%rax, end_time(%rip)
    00001160: 	subq	start_time(%rip), %rax
    00001167: 	cvtsi2sd	%rax, %xmm0
    0000116c: 	divsd	DATAat0x15638(%rip), %xmm0
    00001174: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4468
    00001179: 	movq	0x1c0(%rsp), %rdi
    00001181: 	cmpq	0x10(%rsp), %rdi
    00001186: 	je	.Ltmp2141 # Offset: 4486
    00001188: 	movq	0x1d0(%rsp), %rax
    00001190: 	leaq	0x1(%rax), %rsi
    00001194: 	callq	_ZdlPvm@PLT # Offset: 4500
.Ltmp2141:
    00001199: 	movq	0x20(%rsp), %r14
    0000119e: 	leaq	0x180(%rsp), %rdi
    000011a6: 	leaq	DATAat0x15250(%rip), %rdx
    000011ad: 	movq	%r14, %rsi
    000011b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4528
    000011b5: 	movl	iterations(%rip), %edx
    000011bb: 	movl	$0x1, %r8d
    000011c1: 	movl	$0x1, %ecx
    000011c6: 	movq	0x180(%rsp), %rdi
    000011ce: 	movl	$0x7d0, %esi
    000011d3: 	callq	_Z9summarizePKciiii # Offset: 4563
    000011d8: 	movq	0x18(%rsp), %rdi
    000011dd: 	leaq	DATAat0x15267(%rip), %rdx
    000011e4: 	movq	%r14, %rsi
    000011e7: 	shll	$0x3, iterations(%rip)
    000011ee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4590
    000011f3: 	callq	clock@PLT # Offset: 4595
    000011f8: 	movl	iterations(%rip), %ecx
    000011fe: 	movl	$0x0, 0x38(%rsp)
    00001206: 	movq	%rax, start_time(%rip)
    0000120d: 	leaq	0x1e8(%rsp), %rax
    00001215: 	movq	%rax, 0x28(%rsp)
    0000121a: 	testl	%ecx, %ecx
    0000121c: 	jle	.Ltmp2142 # Offset: 4636
.Ltmp2152:
    00001222: 	movl	$0x3e80, %edx
    00001227: 	movq	%r12, %rsi
    0000122a: 	movq	%rbx, %rdi
    0000122d: 	callq	memcpy@PLT # Offset: 4653
    00001232: 	movq	%rbx, %r9
.Ltmp2149:
    00001235: 	movq	(%r9), %rsi
    00001238: 	movq	%r9, %rax
    0000123b: 	movq	%r12, %r14
    0000123e: 	nop # Size: 2
.Ltmp2147:
    00001240: 	movq	-0x8(%r14), %rdi
    00001244: 	leaq	-0x8(%r14), %rcx
    00001248: 	cmpq	%rdi, %rsi
    0000124b: 	jb	.Ltmp2143 # Offset: 4683
    0000124d: 	cmpq	%rax, %rcx
    00001250: 	jbe	.Ltmp2144 # Offset: 4688
    00001252: 	movq	(%rax), %rdx
    00001255: 	cmpq	%rsi, %rdx
    00001258: 	jae	.Ltmp2145 # Offset: 4696
    0000125a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2146:
    00001260: 	movq	0x8(%rax), %rdx
    00001264: 	addq	$0x8, %rax
    00001268: 	cmpq	%rdx, %rsi
    0000126b: 	ja	.Ltmp2146 # Offset: 4715
    0000126d: 	cmpq	%rax, %rcx
    00001270: 	jbe	.Ltmp2144 # Offset: 4720
.Ltmp2145:
    00001272: 	movq	%rdx, (%rcx)
    00001275: 	movq	%rdi, (%rax)
.Ltmp2143:
    00001278: 	movq	%rcx, %r14
    0000127b: 	jmp	.Ltmp2147 # Offset: 4731
    0000127d: 	nopl	(%rax) # Size: 3
.Ltmp2144:
    00001280: 	movq	%r14, %rsi
    00001283: 	movq	%r9, %rdi
    00001286: 	callq	_ZN9benchmark9quicksortIPmEEvT_S2_ # Offset: 4742
    0000128b: 	movq	%r12, %rax
    0000128e: 	subq	%r14, %rax
    00001291: 	cmpq	$0x8, %rax
    00001295: 	jle	.Ltmp2148 # Offset: 4757
    00001297: 	movq	%r14, %r9
    0000129a: 	jmp	.Ltmp2149 # Offset: 4762
    0000129c: 	nopl	(%rax) # Size: 4
.Ltmp2110:
    000012a0: 	movq	%rbp, %rdx
    000012a3: 	addq	$0x8, %rdi
    000012a7: 	movq	%rsi, (%rdx)
    000012aa: 	cmpq	%rdi, %r15
    000012ad: 	jne	.Ltmp2112 # Offset: 4781
    000012b3: 	jmp	.Ltmp2108 # Offset: 4787
    000012b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2134:
    000012c0: 	movq	%rbp, %rdx
    000012c3: 	addq	$0x8, %rdi
    000012c7: 	movq	%rsi, (%rdx)
    000012ca: 	cmpq	%rdi, %r15
    000012cd: 	jne	.Ltmp2136 # Offset: 4813
    000012d3: 	jmp	.Ltmp2132 # Offset: 4819
.Ltmp2148:
    000012d8: 	movq	0x1e0(%rsp), %rdx
    000012e0: 	movq	0x28(%rsp), %rax
    000012e5: 	nopl	(%rax) # Size: 3
.Ltmp2151:
    000012e8: 	addq	$0x8, %rax
    000012ec: 	movq	%rdx, %rcx
    000012ef: 	movq	-0x8(%rax), %rdx
    000012f3: 	cmpq	%rcx, %rdx
    000012f6: 	jb	.Ltmp2150 # Offset: 4854
    000012fc: 	cmpq	%r12, %rax
    000012ff: 	jne	.Ltmp2151 # Offset: 4863
.Ltmp2286:
    00001301: 	addl	$0x1, 0x38(%rsp)
    00001306: 	movl	0x38(%rsp), %eax
    0000130a: 	cmpl	iterations(%rip), %eax
    00001310: 	jl	.Ltmp2152 # Offset: 4880
.Ltmp2142:
    00001316: 	callq	clock@PLT # Offset: 4886
    0000131b: 	movq	0x18(%rsp), %rdi
    00001320: 	pxor	%xmm0, %xmm0
    00001324: 	movq	%rax, end_time(%rip)
    0000132b: 	subq	start_time(%rip), %rax
    00001332: 	cvtsi2sd	%rax, %xmm0
    00001337: 	divsd	DATAat0x15638(%rip), %xmm0
    0000133f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4927
    00001344: 	movq	0x1c0(%rsp), %rdi
    0000134c: 	cmpq	0x10(%rsp), %rdi
    00001351: 	je	.Ltmp2153 # Offset: 4945
    00001353: 	movq	0x1d0(%rsp), %rax
    0000135b: 	leaq	0x1(%rax), %rsi
    0000135f: 	callq	_ZdlPvm@PLT # Offset: 4959
.Ltmp2153:
    00001364: 	movq	0x20(%rsp), %rsi
    00001369: 	movq	0x18(%rsp), %rdi
    0000136e: 	leaq	DATAat0x15282(%rip), %rdx
    00001375: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4981
    0000137a: 	callq	clock@PLT # Offset: 4986
    0000137f: 	movq	%rax, start_time(%rip)
    00001386: 	movl	iterations(%rip), %eax
    0000138c: 	movl	%eax, 0x48(%rsp)
    00001390: 	testl	%eax, %eax
    00001392: 	jle	.Ltmp2154 # Offset: 5010
    00001398: 	movq	%r15, %rax
    0000139b: 	leaq	0x8(%r13), %rdx
    0000139f: 	movl	$0x0, 0x38(%rsp)
    000013a7: 	subq	%rbp, %rax
    000013aa: 	movq	%rax, 0x68(%rsp)
    000013af: 	leaq	0x8(%rbp), %rax
    000013b3: 	movq	%rax, 0x70(%rsp)
    000013b8: 	movq	0x8(%rsp), %rax
    000013bd: 	subq	$0x8, %rax
    000013c1: 	subq	%r13, %rax
    000013c4: 	cmpq	%rdx, %rbp
    000013c7: 	setne	%cl
    000013ca: 	cmpq	$0x10, %rax
    000013ce: 	seta	%dl
    000013d1: 	shrq	$0x3, %rax
    000013d5: 	leaq	0x1(%rax), %rdi
    000013d9: 	andl	%edx, %ecx
    000013db: 	movq	%rdi, %rax
    000013de: 	movq	%rdi, 0x90(%rsp)
    000013e6: 	andq	$-0x2, %rdi
    000013ea: 	shrq	%rax
    000013ed: 	movb	%cl, 0x78(%rsp)
    000013f1: 	shlq	$0x4, %rax
    000013f5: 	movq	%rdi, 0x88(%rsp)
    000013fd: 	movq	%rax, 0x80(%rsp)
    00001405: 	leaq	(,%rdi,8), %rax
    0000140d: 	leaq	(%r13,%rax), %r14
    00001412: 	addq	%rbp, %rax
    00001415: 	movq	%rax, 0x28(%rsp)
.Ltmp2167:
    0000141a: 	cmpq	%r13, 0x8(%rsp)
    0000141f: 	je	.Ltmp2155 # Offset: 5151
    00001421: 	cmpb	$0x0, 0x78(%rsp)
    00001426: 	je	.Ltmp2156 # Offset: 5158
    0000142c: 	movq	0x80(%rsp), %rdx
    00001434: 	xorl	%eax, %eax
    00001436: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2157:
    00001440: 	movdqu	(%r13,%rax), %xmm6
    00001447: 	movups	%xmm6, (%rbp,%rax)
    0000144c: 	addq	$0x10, %rax
    00001450: 	cmpq	%rax, %rdx
    00001453: 	jne	.Ltmp2157 # Offset: 5203
    00001455: 	movq	0x90(%rsp), %rdi
    0000145d: 	cmpq	%rdi, 0x88(%rsp)
    00001465: 	je	.Ltmp2155 # Offset: 5221
    00001467: 	movq	(%r14), %rax
    0000146a: 	movq	0x28(%rsp), %rdi
    0000146f: 	movq	%rax, (%rdi)
.Ltmp2155:
    00001472: 	cmpq	$0x8, 0x68(%rsp)
    00001478: 	jle	.Ltmp2158 # Offset: 5240
    0000147a: 	movq	(%rbp), %rsi
    0000147e: 	movq	%r15, %r8
    00001481: 	movq	%rbp, %rdx
    00001484: 	nopl	(%rax) # Size: 4
.Ltmp2163:
    00001488: 	movq	-0x8(%r8), %rdi
    0000148c: 	leaq	-0x8(%r8), %r9
    00001490: 	cmpq	%rdi, %rsi
    00001493: 	jb	.Ltmp2159 # Offset: 5267
    00001495: 	cmpq	%rdx, %r9
    00001498: 	jbe	.Ltmp2160 # Offset: 5272
    0000149e: 	movq	(%rdx), %rcx
    000014a1: 	cmpq	%rsi, %rcx
    000014a4: 	jae	.Ltmp2161 # Offset: 5284
    000014a6: 	leaq	0x8(%rdx), %rax
    000014aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2162:
    000014b0: 	movq	%rax, %rdx
    000014b3: 	movq	(%rax), %rcx
    000014b6: 	leaq	0x8(%rax), %rax
    000014ba: 	cmpq	%rcx, %rsi
    000014bd: 	ja	.Ltmp2162 # Offset: 5309
    000014bf: 	cmpq	%rdx, %r9
    000014c2: 	jbe	.Ltmp2160 # Offset: 5314
.Ltmp2161:
    000014c8: 	movq	%rcx, (%r9)
    000014cb: 	movq	%rdi, (%rdx)
.Ltmp2159:
    000014ce: 	movq	%r9, %r8
    000014d1: 	jmp	.Ltmp2163 # Offset: 5329
.Ltmp2339:
    000014d3: 	movq	%r8, %rsi
    000014d6: 	movq	%r10, %rdi
    000014d9: 	movq	%r8, 0x98(%rsp)
    000014e1: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 5345
    000014e6: 	movq	0x98(%rsp), %rdi
    000014ee: 	movq	%r15, %rsi
    000014f1: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 5361
.Ltmp2158:
    000014f6: 	movq	0x70(%rsp), %rax
    000014fb: 	jmp	.Ltmp2164 # Offset: 5371
    000014fd: 	nopl	(%rax) # Size: 3
.Ltmp2166:
    00001500: 	addq	$0x8, %rax
    00001504: 	movq	-0x10(%rax), %rdi
    00001508: 	cmpq	%rdi, (%rdx)
    0000150b: 	jb	.Ltmp2165 # Offset: 5387
.Ltmp2164:
    00001511: 	movq	%rax, %rdx
    00001514: 	cmpq	%rax, %r15
    00001517: 	jne	.Ltmp2166 # Offset: 5399
    00001519: 	addl	$0x1, 0x38(%rsp)
    0000151e: 	movl	0x38(%rsp), %eax
    00001522: 	cmpl	%eax, 0x48(%rsp)
    00001526: 	jg	.Ltmp2167 # Offset: 5414
.Ltmp2154:
    0000152c: 	callq	clock@PLT # Offset: 5420
    00001531: 	movq	0x18(%rsp), %rdi
    00001536: 	pxor	%xmm0, %xmm0
    0000153a: 	movq	%rax, end_time(%rip)
    00001541: 	subq	start_time(%rip), %rax
    00001548: 	cvtsi2sd	%rax, %xmm0
    0000154d: 	divsd	DATAat0x15638(%rip), %xmm0
    00001555: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5461
    0000155a: 	movq	0x1c0(%rsp), %rdi
    00001562: 	cmpq	0x10(%rsp), %rdi
    00001567: 	je	.Ltmp2168 # Offset: 5479
    00001569: 	movq	0x1d0(%rsp), %rax
    00001571: 	leaq	0x1(%rax), %rsi
    00001575: 	callq	_ZdlPvm@PLT # Offset: 5493
.Ltmp2168:
    0000157a: 	movq	0x20(%rsp), %rsi
    0000157f: 	movq	0x18(%rsp), %rdi
    00001584: 	leaq	DATAat0x154a8(%rip), %rdx
    0000158b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5515
    00001590: 	callq	clock@PLT # Offset: 5520
    00001595: 	movl	iterations(%rip), %edx
    0000159b: 	movl	$0x0, 0x38(%rsp)
    000015a3: 	movq	%rax, start_time(%rip)
    000015aa: 	leaq	0x1e8(%rsp), %rax
    000015b2: 	movq	%rax, 0x28(%rsp)
    000015b7: 	testl	%edx, %edx
    000015b9: 	jle	.Ltmp2169 # Offset: 5561
.Ltmp2189:
    000015bf: 	movq	%r12, %rsi
    000015c2: 	movl	$0x3e80, %edx
    000015c7: 	movq	%rbx, %rdi
    000015ca: 	callq	memcpy@PLT # Offset: 5578
    000015cf: 	leaq	0x4060(%rsp), %r12
    000015d7: 	movq	0x1e0(%rsp), %rcx
    000015df: 	movq	%r12, %r8
    000015e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2174:
    000015e8: 	movq	-0x8(%r8), %rsi
    000015ec: 	leaq	-0x8(%r8), %rdi
    000015f0: 	cmpq	%rsi, %rcx
    000015f3: 	jb	.Ltmp2170 # Offset: 5619
    000015f5: 	cmpq	%rax, %rdi
    000015f8: 	jbe	.Ltmp2171 # Offset: 5624
    000015fa: 	movq	(%rax), %rdx
    000015fd: 	cmpq	%rdx, %rcx
    00001600: 	jbe	.Ltmp2172 # Offset: 5632
    00001602: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2173:
    00001608: 	movq	0x8(%rax), %rdx
    0000160c: 	addq	$0x8, %rax
    00001610: 	cmpq	%rdx, %rcx
    00001613: 	ja	.Ltmp2173 # Offset: 5651
    00001615: 	cmpq	%rax, %rdi
    00001618: 	jbe	.Ltmp2171 # Offset: 5656
.Ltmp2172:
    0000161a: 	movq	%rdx, (%rdi)
    0000161d: 	movq	%rsi, (%rax)
.Ltmp2170:
    00001620: 	movq	%rdi, %r8
    00001623: 	jmp	.Ltmp2174 # Offset: 5667
.Ltmp2171:
    00001625: 	movq	%r8, %rax
    00001628: 	subq	%rbx, %rax
    0000162b: 	cmpq	$0x8, %rax
    0000162f: 	jle	.Ltmp2175 # Offset: 5679
    00001635: 	movq	0x1e0(%rsp), %rdi
    0000163d: 	movq	%r8, %rcx
    00001640: 	movq	%rbx, %rax
    00001643: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2180:
    00001648: 	leaq	-0x8(%rcx), %r9
    0000164c: 	cmpq	%rdi, %rsi
    0000164f: 	ja	.Ltmp2176 # Offset: 5711
    00001651: 	cmpq	%rax, %r9
    00001654: 	jbe	.Ltmp2177 # Offset: 5716
    0000165a: 	movq	(%rax), %rdx
    0000165d: 	cmpq	%rdx, %rdi
    00001660: 	jbe	.Ltmp2178 # Offset: 5728
    00001662: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2179:
    00001668: 	movq	0x8(%rax), %rdx
    0000166c: 	addq	$0x8, %rax
    00001670: 	cmpq	%rdx, %rdi
    00001673: 	ja	.Ltmp2179 # Offset: 5747
    00001675: 	cmpq	%rax, %r9
    00001678: 	jbe	.Ltmp2177 # Offset: 5752
.Ltmp2178:
    0000167e: 	movq	%rdx, (%r9)
    00001681: 	movq	%rsi, (%rax)
.Ltmp2176:
    00001684: 	movq	-0x8(%r9), %rsi
    00001688: 	movq	%r9, %rcx
    0000168b: 	jmp	.Ltmp2180 # Offset: 5771
.Ltmp2328:
    0000168d: 	movq	0x40(%rsp), %rsi
    00001692: 	movq	0x30(%rsp), %rdi
    00001697: 	movq	%r8, 0x48(%rsp)
    0000169c: 	movq	%rcx, 0xf8(%rsp)
    000016a4: 	movq	%r14, 0xe8(%rsp)
    000016ac: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 5804
    000016b1: 	movq	0x48(%rsp), %r8
    000016b6: 	movq	0x40(%rsp), %rsi
    000016bb: 	movq	%r14, 0xf8(%rsp)
    000016c3: 	movq	0x30(%rsp), %rdi
    000016c8: 	movq	%r8, 0xe8(%rsp)
    000016d0: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 5840
    000016d5: 	movq	0x48(%rsp), %r8
.Ltmp2175:
    000016da: 	movq	%r12, %rax
    000016dd: 	subq	%r8, %rax
    000016e0: 	cmpq	$0x8, %rax
    000016e4: 	jle	.Ltmp2181 # Offset: 5860
    000016ea: 	movq	(%r8), %rcx
    000016ed: 	movq	%r8, %rax
    000016f0: 	movq	%r12, %r9
    000016f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2186:
    000016f8: 	movq	-0x8(%r9), %rdi
    000016fc: 	leaq	-0x8(%r9), %rsi
    00001700: 	cmpq	%rdi, %rcx
    00001703: 	jb	.Ltmp2182 # Offset: 5891
    00001705: 	cmpq	%rax, %rsi
    00001708: 	jbe	.Ltmp2183 # Offset: 5896
    0000170e: 	movq	(%rax), %rdx
    00001711: 	cmpq	%rcx, %rdx
    00001714: 	jae	.Ltmp2184 # Offset: 5908
    00001716: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2185:
    00001720: 	movq	0x8(%rax), %rdx
    00001724: 	addq	$0x8, %rax
    00001728: 	cmpq	%rdx, %rcx
    0000172b: 	ja	.Ltmp2185 # Offset: 5931
    0000172d: 	cmpq	%rax, %rsi
    00001730: 	jbe	.Ltmp2183 # Offset: 5936
.Ltmp2184:
    00001736: 	movq	%rdx, (%rsi)
    00001739: 	movq	%rdi, (%rax)
.Ltmp2182:
    0000173c: 	movq	%rsi, %r9
    0000173f: 	jmp	.Ltmp2186 # Offset: 5951
.Ltmp2317:
    00001741: 	movq	0x40(%rsp), %rsi
    00001746: 	movq	0x30(%rsp), %rdi
    0000174b: 	movq	%r14, 0xe8(%rsp)
    00001753: 	movq	%r9, 0xf8(%rsp)
    0000175b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 5979
    00001760: 	movq	0x40(%rsp), %rsi
    00001765: 	movq	0x30(%rsp), %rdi
    0000176a: 	movq	%r12, 0xe8(%rsp)
    00001772: 	movq	%r14, 0xf8(%rsp)
    0000177a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 6010
.Ltmp2181:
    0000177f: 	movq	0x1e0(%rsp), %rdx
    00001787: 	movq	0x28(%rsp), %rax
    0000178c: 	movq	0x50(%rsp), %rsi
    00001791: 	nopl	(%rax) # Size: 7
.Ltmp2188:
    00001798: 	movq	%rdx, %rcx
    0000179b: 	movq	(%rax), %rdx
    0000179e: 	cmpq	%rdx, %rcx
    000017a1: 	ja	.Ltmp2187 # Offset: 6049
    000017a7: 	addq	$0x8, %rax
    000017ab: 	cmpq	%rax, %rsi
    000017ae: 	jne	.Ltmp2188 # Offset: 6062
.Ltmp2287:
    000017b0: 	addl	$0x1, 0x38(%rsp)
    000017b5: 	movl	0x38(%rsp), %eax
    000017b9: 	cmpl	iterations(%rip), %eax
    000017bf: 	jl	.Ltmp2189 # Offset: 6079
.Ltmp2169:
    000017c5: 	callq	clock@PLT # Offset: 6085
    000017ca: 	movq	0x18(%rsp), %rdi
    000017cf: 	pxor	%xmm0, %xmm0
    000017d3: 	movq	%rax, end_time(%rip)
    000017da: 	subq	start_time(%rip), %rax
    000017e1: 	cvtsi2sd	%rax, %xmm0
    000017e6: 	divsd	DATAat0x15638(%rip), %xmm0
    000017ee: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6126
    000017f3: 	movq	0x1c0(%rsp), %rdi
    000017fb: 	cmpq	0x10(%rsp), %rdi
    00001800: 	je	.Ltmp2190 # Offset: 6144
    00001802: 	movq	0x1d0(%rsp), %rax
    0000180a: 	leaq	0x1(%rax), %rsi
    0000180e: 	callq	_ZdlPvm@PLT # Offset: 6158
.Ltmp2190:
    00001813: 	movq	0x18(%rsp), %r14
    00001818: 	movq	0x20(%rsp), %rsi
    0000181d: 	leaq	DATAat0x154d0(%rip), %rdx
    00001824: 	movq	%r14, %rdi
    00001827: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6183
    0000182c: 	movq	0x8(%rsp), %rax
    00001831: 	movq	0x30(%rsp), %rcx
    00001836: 	movq	%r14, %r8
    00001839: 	movq	%r15, 0xf8(%rsp)
    00001841: 	movq	0x40(%rsp), %rdx
    00001846: 	movq	0x60(%rsp), %rsi
    0000184b: 	movq	%rbp, 0xe8(%rsp)
    00001853: 	movq	0x58(%rsp), %rdi
    00001858: 	movq	%rax, 0xd8(%rsp)
    00001860: 	movq	%r13, 0xc8(%rsp)
    00001868: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6248
    0000186d: 	movq	0x1c0(%rsp), %rdi
    00001875: 	cmpq	0x10(%rsp), %rdi
    0000187a: 	je	.Ltmp2191 # Offset: 6266
    0000187c: 	movq	0x1d0(%rsp), %rax
    00001884: 	leaq	0x1(%rax), %rsi
    00001888: 	callq	_ZdlPvm@PLT # Offset: 6280
.Ltmp2191:
    0000188d: 	movq	0x18(%rsp), %r14
    00001892: 	movq	0x20(%rsp), %rsi
    00001897: 	leaq	DATAat0x15500(%rip), %rdx
    0000189e: 	movq	%r14, %rdi
    000018a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6305
    000018a6: 	movq	0x8(%rsp), %rax
    000018ab: 	movq	0x30(%rsp), %rcx
    000018b0: 	movq	%r14, %r8
    000018b3: 	movq	%r15, 0xf8(%rsp)
    000018bb: 	movq	0x40(%rsp), %rdx
    000018c0: 	movq	0x60(%rsp), %rsi
    000018c5: 	movq	%rbp, 0xe8(%rsp)
    000018cd: 	movq	0x58(%rsp), %rdi
    000018d2: 	movq	%rax, 0xd8(%rsp)
    000018da: 	movq	%r13, 0xc8(%rsp)
    000018e2: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6370
    000018e7: 	movq	0x1c0(%rsp), %rdi
    000018ef: 	cmpq	0x10(%rsp), %rdi
    000018f4: 	je	.Ltmp2192 # Offset: 6388
    000018f6: 	movq	0x1d0(%rsp), %rax
    000018fe: 	leaq	0x1(%rax), %rsi
    00001902: 	callq	_ZdlPvm@PLT # Offset: 6402
.Ltmp2192:
    00001907: 	movq	0x20(%rsp), %rsi
    0000190c: 	movq	0x18(%rsp), %rdi
    00001911: 	leaq	DATAat0x15530(%rip), %rdx
    00001918: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6424
    0000191d: 	callq	clock@PLT # Offset: 6429
    00001922: 	movq	%rax, start_time(%rip)
    00001929: 	movl	iterations(%rip), %eax
    0000192f: 	movl	%eax, 0x48(%rsp)
    00001933: 	testl	%eax, %eax
    00001935: 	jle	.Ltmp2193 # Offset: 6453
    0000193b: 	movq	%r15, %rax
    0000193e: 	leaq	0x8(%r13), %rdx
    00001942: 	movl	$0x0, 0x38(%rsp)
    0000194a: 	subq	%rbp, %rax
    0000194d: 	movq	%rax, 0x70(%rsp)
    00001952: 	leaq	0x8(%rbp), %rax
    00001956: 	movq	%rax, 0x68(%rsp)
    0000195b: 	movq	0x8(%rsp), %rax
    00001960: 	subq	$0x8, %rax
    00001964: 	subq	%r13, %rax
    00001967: 	cmpq	%rdx, %rbp
    0000196a: 	setne	%cl
    0000196d: 	cmpq	$0x10, %rax
    00001971: 	seta	%dl
    00001974: 	shrq	$0x3, %rax
    00001978: 	leaq	0x1(%rax), %rdi
    0000197c: 	andl	%edx, %ecx
    0000197e: 	movq	%rdi, %rax
    00001981: 	movq	%rdi, 0x90(%rsp)
    00001989: 	andq	$-0x2, %rdi
    0000198d: 	shrq	%rax
    00001990: 	movb	%cl, 0x78(%rsp)
    00001994: 	shlq	$0x4, %rax
    00001998: 	movq	%rdi, 0x88(%rsp)
    000019a0: 	movq	%rax, 0x80(%rsp)
    000019a8: 	leaq	(,%rdi,8), %rax
    000019b0: 	leaq	(%r13,%rax), %r14
    000019b5: 	addq	%rbp, %rax
    000019b8: 	movq	%rax, 0x28(%rsp)
.Ltmp2206:
    000019bd: 	cmpq	%r13, 0x8(%rsp)
    000019c2: 	je	.Ltmp2194 # Offset: 6594
    000019c4: 	cmpb	$0x0, 0x78(%rsp)
    000019c9: 	je	.Ltmp2195 # Offset: 6601
    000019cf: 	movq	0x80(%rsp), %rdx
    000019d7: 	xorl	%eax, %eax
    000019d9: 	nopl	(%rax) # Size: 7
.Ltmp2196:
    000019e0: 	movdqu	(%r13,%rax), %xmm7
    000019e7: 	movups	%xmm7, (%rbp,%rax)
    000019ec: 	addq	$0x10, %rax
    000019f0: 	cmpq	%rdx, %rax
    000019f3: 	jne	.Ltmp2196 # Offset: 6643
    000019f5: 	movq	0x90(%rsp), %rdi
    000019fd: 	cmpq	%rdi, 0x88(%rsp)
    00001a05: 	je	.Ltmp2194 # Offset: 6661
    00001a07: 	movq	(%r14), %rax
    00001a0a: 	movq	0x28(%rsp), %rdi
    00001a0f: 	movq	%rax, (%rdi)
.Ltmp2194:
    00001a12: 	cmpq	$0x8, 0x70(%rsp)
    00001a18: 	jle	.Ltmp2197 # Offset: 6680
    00001a1a: 	movq	(%rbp), %rcx
    00001a1e: 	movq	%r15, %r8
    00001a21: 	movq	%rbp, %rax
    00001a24: 	nopl	(%rax) # Size: 4
.Ltmp2202:
    00001a28: 	movq	-0x8(%r8), %rsi
    00001a2c: 	leaq	-0x8(%r8), %rdi
    00001a30: 	cmpq	%rsi, %rcx
    00001a33: 	jb	.Ltmp2198 # Offset: 6707
    00001a35: 	cmpq	%rax, %rdi
    00001a38: 	jbe	.Ltmp2199 # Offset: 6712
    00001a3e: 	movq	(%rax), %rdx
    00001a41: 	cmpq	%rcx, %rdx
    00001a44: 	jae	.Ltmp2200 # Offset: 6724
    00001a46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2201:
    00001a50: 	movq	0x8(%rax), %rdx
    00001a54: 	addq	$0x8, %rax
    00001a58: 	cmpq	%rdx, %rcx
    00001a5b: 	ja	.Ltmp2201 # Offset: 6747
    00001a5d: 	cmpq	%rax, %rdi
    00001a60: 	jbe	.Ltmp2199 # Offset: 6752
.Ltmp2200:
    00001a66: 	movq	%rdx, (%rdi)
    00001a69: 	movq	%rsi, (%rax)
.Ltmp2198:
    00001a6c: 	movq	%rdi, %r8
    00001a6f: 	jmp	.Ltmp2202 # Offset: 6767
.Ltmp2295:
    00001a71: 	movq	%r8, %rsi
    00001a74: 	movq	%r10, %rdi
    00001a77: 	movq	%r8, 0x98(%rsp)
    00001a7f: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 6783
    00001a84: 	movq	0x98(%rsp), %rdi
    00001a8c: 	movq	%r15, %rsi
    00001a8f: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 6799
.Ltmp2197:
    00001a94: 	movq	0x68(%rsp), %rax
    00001a99: 	jmp	.Ltmp2203 # Offset: 6809
    00001a9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2205:
    00001aa0: 	addq	$0x8, %rax
    00001aa4: 	movq	-0x10(%rax), %rdi
    00001aa8: 	cmpq	%rdi, (%rdx)
    00001aab: 	jb	.Ltmp2204 # Offset: 6827
.Ltmp2203:
    00001ab1: 	movq	%rax, %rdx
    00001ab4: 	cmpq	%rax, %r15
    00001ab7: 	jne	.Ltmp2205 # Offset: 6839
    00001ab9: 	addl	$0x1, 0x38(%rsp)
    00001abe: 	movl	0x38(%rsp), %eax
    00001ac2: 	cmpl	0x48(%rsp), %eax
    00001ac6: 	jl	.Ltmp2206 # Offset: 6854
.Ltmp2193:
    00001acc: 	callq	clock@PLT # Offset: 6860
    00001ad1: 	movq	0x18(%rsp), %rdi
    00001ad6: 	pxor	%xmm0, %xmm0
    00001ada: 	movq	%rax, end_time(%rip)
    00001ae1: 	subq	start_time(%rip), %rax
    00001ae8: 	cvtsi2sd	%rax, %xmm0
    00001aed: 	divsd	DATAat0x15638(%rip), %xmm0
    00001af5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6901
    00001afa: 	movq	0x1c0(%rsp), %rdi
    00001b02: 	cmpq	0x10(%rsp), %rdi
    00001b07: 	je	.Ltmp2207 # Offset: 6919
    00001b09: 	movq	0x1d0(%rsp), %rax
    00001b11: 	leaq	0x1(%rax), %rsi
    00001b15: 	callq	_ZdlPvm@PLT # Offset: 6933
.Ltmp2207:
    00001b1a: 	movq	0x20(%rsp), %r14
    00001b1f: 	leaq	0x1a0(%rsp), %rdi
    00001b27: 	leaq	DATAat0x1529d(%rip), %rdx
    00001b2e: 	movq	%r14, %rsi
    00001b31: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6961
    00001b36: 	movl	iterations(%rip), %edx
    00001b3c: 	movl	$0x1, %r8d
    00001b42: 	movl	$0x1, %ecx
    00001b47: 	movq	0x1a0(%rsp), %rdi
    00001b4f: 	movl	$0x7d0, %esi
    00001b54: 	callq	_Z9summarizePKciiii # Offset: 6996
    00001b59: 	movq	0x18(%rsp), %rdi
    00001b5e: 	leaq	DATAat0x152af(%rip), %rdx
    00001b65: 	movq	%r14, %rsi
    00001b68: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7016
    00001b6d: 	callq	clock@PLT # Offset: 7021
    00001b72: 	leaq	0x1e8(%rsp), %rdi
    00001b7a: 	movl	$0x0, 0x38(%rsp)
    00001b82: 	movq	%rax, start_time(%rip)
    00001b89: 	movl	iterations(%rip), %eax
    00001b8f: 	movq	%rdi, 0x28(%rsp)
    00001b94: 	movl	%eax, 0x48(%rsp)
    00001b98: 	testl	%eax, %eax
    00001b9a: 	jle	.Ltmp2208 # Offset: 7066
.Ltmp2213:
    00001ba0: 	movl	$0x3e80, %edx
    00001ba5: 	movq	%r12, %rsi
    00001ba8: 	movq	%rbx, %rdi
    00001bab: 	movl	$0x3e7, %r14d
    00001bb1: 	callq	memcpy@PLT # Offset: 7089
    00001bb6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2209:
    00001bc0: 	movq	(%rbx,%r14,8), %rcx
    00001bc4: 	movq	%r14, %rdx
    00001bc7: 	movq	%rbx, %rsi
    00001bca: 	movl	$0x7d0, %edi
    00001bcf: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 7119
    00001bd4: 	subq	$0x1, %r14
    00001bd8: 	jae	.Ltmp2209 # Offset: 7128
    00001bda: 	movl	$0x7cf, %r14d
.Ltmp2210:
    00001be0: 	movq	0x1e0(%rsp), %rax
    00001be8: 	xorl	%edx, %edx
    00001bea: 	movq	%r14, %rdi
    00001bed: 	movq	%rbx, %rsi
    00001bf0: 	movq	(%rbx,%r14,8), %rcx
    00001bf4: 	movq	%rax, (%rbx,%r14,8)
    00001bf8: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 7160
    00001bfd: 	subq	$0x1, %r14
    00001c01: 	jne	.Ltmp2210 # Offset: 7169
    00001c03: 	movq	0x1e0(%rsp), %rdx
    00001c0b: 	movq	0x28(%rsp), %rax
.Ltmp2212:
    00001c10: 	addq	$0x8, %rax
    00001c14: 	movq	%rdx, %rcx
    00001c17: 	movq	-0x8(%rax), %rdx
    00001c1b: 	cmpq	%rcx, %rdx
    00001c1e: 	jb	.Ltmp2211 # Offset: 7198
    00001c24: 	cmpq	%r12, %rax
    00001c27: 	jne	.Ltmp2212 # Offset: 7207
    00001c29: 	addl	$0x1, 0x38(%rsp)
    00001c2e: 	movl	0x38(%rsp), %eax
    00001c32: 	cmpl	%eax, 0x48(%rsp)
    00001c36: 	jg	.Ltmp2213 # Offset: 7222
.Ltmp2208:
    00001c3c: 	callq	clock@PLT # Offset: 7228
    00001c41: 	movq	0x18(%rsp), %rdi
    00001c46: 	pxor	%xmm0, %xmm0
    00001c4a: 	movq	%rax, end_time(%rip)
    00001c51: 	subq	start_time(%rip), %rax
    00001c58: 	cvtsi2sd	%rax, %xmm0
    00001c5d: 	divsd	DATAat0x15638(%rip), %xmm0
    00001c65: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7269
    00001c6a: 	movq	0x1c0(%rsp), %rdi
    00001c72: 	cmpq	0x10(%rsp), %rdi
    00001c77: 	je	.Ltmp2214 # Offset: 7287
    00001c79: 	movq	0x1d0(%rsp), %rax
    00001c81: 	leaq	0x1(%rax), %rsi
    00001c85: 	callq	_ZdlPvm@PLT # Offset: 7301
.Ltmp2214:
    00001c8a: 	movq	0x20(%rsp), %rsi
    00001c8f: 	movq	0x18(%rsp), %rdi
    00001c94: 	leaq	DATAat0x152ca(%rip), %rdx
    00001c9b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7323
    00001ca0: 	callq	clock@PLT # Offset: 7328
    00001ca5: 	movq	%rax, start_time(%rip)
    00001cac: 	movl	iterations(%rip), %eax
    00001cb2: 	movl	%eax, 0x70(%rsp)
    00001cb6: 	testl	%eax, %eax
    00001cb8: 	jle	.Ltmp2215 # Offset: 7352
    00001cbe: 	movq	%r15, %rax
    00001cc1: 	leaq	0x8(%r13), %rdx
    00001cc5: 	movl	$0x0, 0x48(%rsp)
    00001ccd: 	subq	%rbp, %rax
    00001cd0: 	movq	%rax, %rdi
    00001cd3: 	shrq	$0x3f, %rax
    00001cd7: 	sarq	$0x3, %rdi
    00001cdb: 	addq	%rdi, %rax
    00001cde: 	movq	%rdi, 0x98(%rsp)
    00001ce6: 	sarq	%rax
    00001ce9: 	subq	$0x1, %rax
    00001ced: 	movq	%rax, 0x80(%rsp)
    00001cf5: 	leaq	-0x1(%rdi), %rax
    00001cf9: 	movq	%rax, 0x88(%rsp)
    00001d01: 	leaq	0x8(%rbp), %rax
    00001d05: 	movq	%rax, 0x78(%rsp)
    00001d0a: 	movq	0x8(%rsp), %rax
    00001d0f: 	subq	$0x8, %rax
    00001d13: 	subq	%r13, %rax
    00001d16: 	cmpq	%rdx, %rbp
    00001d19: 	setne	%cl
    00001d1c: 	cmpq	$0x10, %rax
    00001d20: 	seta	%dl
    00001d23: 	shrq	$0x3, %rax
    00001d27: 	leaq	0x1(%rax), %rdi
    00001d2b: 	andl	%edx, %ecx
    00001d2d: 	movq	%rdi, %rax
    00001d30: 	movq	%rdi, 0xb0(%rsp)
    00001d38: 	andq	$-0x2, %rdi
    00001d3c: 	shrq	%rax
    00001d3f: 	movq	%rdi, 0xa8(%rsp)
    00001d47: 	shlq	$0x4, %rax
    00001d4b: 	movb	%cl, 0x90(%rsp)
    00001d52: 	movq	%rax, 0xa0(%rsp)
    00001d5a: 	leaq	(,%rdi,8), %rax
    00001d62: 	leaq	(%r13,%rax), %rdi
    00001d67: 	addq	%rbp, %rax
    00001d6a: 	movq	%rdi, 0x38(%rsp)
    00001d6f: 	movq	%rax, 0x28(%rsp)
.Ltmp2226:
    00001d74: 	cmpq	%r13, 0x8(%rsp)
    00001d79: 	je	.Ltmp2216 # Offset: 7545
    00001d7b: 	cmpb	$0x0, 0x90(%rsp)
    00001d83: 	je	.Ltmp2217 # Offset: 7555
    00001d89: 	movq	0xa0(%rsp), %rdx
    00001d91: 	xorl	%eax, %eax
    00001d93: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2218:
    00001d98: 	movdqu	(%r13,%rax), %xmm2
    00001d9f: 	movups	%xmm2, (%rbp,%rax)
    00001da4: 	addq	$0x10, %rax
    00001da8: 	cmpq	%rdx, %rax
    00001dab: 	jne	.Ltmp2218 # Offset: 7595
    00001dad: 	movq	0xb0(%rsp), %rdi
    00001db5: 	cmpq	%rdi, 0xa8(%rsp)
    00001dbd: 	je	.Ltmp2216 # Offset: 7613
    00001dbf: 	movq	0x38(%rsp), %rax
    00001dc4: 	movq	0x28(%rsp), %rdi
    00001dc9: 	movq	(%rax), %rax
    00001dcc: 	movq	%rax, (%rdi)
.Ltmp2216:
    00001dcf: 	movq	0x80(%rsp), %rax
    00001dd7: 	movq	%rax, %r14
    00001dda: 	testq	%rax, %rax
    00001ddd: 	js	.Ltmp2219 # Offset: 7645
    00001ddf: 	movq	%rbx, 0x68(%rsp)
    00001de4: 	movq	0x98(%rsp), %rbx
    00001dec: 	nopl	(%rax) # Size: 4
.Ltmp2220:
    00001df0: 	movq	(%rbp,%r14,8), %rcx
    00001df5: 	movq	%r14, %rdx
    00001df8: 	movq	%rbp, %rsi
    00001dfb: 	movq	%rbx, %rdi
    00001dfe: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEEvlT_lT0_ # Offset: 7678
    00001e03: 	subq	$0x1, %r14
    00001e07: 	jae	.Ltmp2220 # Offset: 7687
    00001e09: 	movq	0x68(%rsp), %rbx
.Ltmp2219:
    00001e0e: 	movq	0x88(%rsp), %rax
    00001e16: 	movq	%rax, %r14
    00001e19: 	testq	%rax, %rax
    00001e1c: 	jle	.Ltmp2221 # Offset: 7708
    00001e1e: 	nop # Size: 2
.Ltmp2222:
    00001e20: 	movq	(%rbp), %rax
    00001e24: 	movq	(%rbp,%r14,8), %rcx
    00001e29: 	xorl	%edx, %edx
    00001e2b: 	movq	%r14, %rdi
    00001e2e: 	movq	%rbp, %rsi
    00001e31: 	movq	%rax, (%rbp,%r14,8)
    00001e36: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEEvlT_lT0_ # Offset: 7734
    00001e3b: 	subq	$0x1, %r14
    00001e3f: 	jne	.Ltmp2222 # Offset: 7743
.Ltmp2221:
    00001e41: 	movq	0x78(%rsp), %rax
    00001e46: 	jmp	.Ltmp2223 # Offset: 7750
    00001e48: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2225:
    00001e50: 	addq	$0x8, %rax
    00001e54: 	movq	-0x10(%rax), %rdi
    00001e58: 	cmpq	%rdi, (%rdx)
    00001e5b: 	jb	.Ltmp2224 # Offset: 7771
.Ltmp2223:
    00001e61: 	movq	%rax, %rdx
    00001e64: 	cmpq	%rax, %r15
    00001e67: 	jne	.Ltmp2225 # Offset: 7783
    00001e69: 	addl	$0x1, 0x48(%rsp)
    00001e6e: 	movl	0x48(%rsp), %eax
    00001e72: 	cmpl	0x70(%rsp), %eax
    00001e76: 	jl	.Ltmp2226 # Offset: 7798
.Ltmp2215:
    00001e7c: 	callq	clock@PLT # Offset: 7804
    00001e81: 	movq	0x18(%rsp), %rdi
    00001e86: 	pxor	%xmm0, %xmm0
    00001e8a: 	movq	%rax, end_time(%rip)
    00001e91: 	subq	start_time(%rip), %rax
    00001e98: 	cvtsi2sd	%rax, %xmm0
    00001e9d: 	divsd	DATAat0x15638(%rip), %xmm0
    00001ea5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7845
    00001eaa: 	movq	0x1c0(%rsp), %rdi
    00001eb2: 	cmpq	0x10(%rsp), %rdi
    00001eb7: 	je	.Ltmp2227 # Offset: 7863
    00001eb9: 	movq	0x1d0(%rsp), %rax
    00001ec1: 	leaq	0x1(%rax), %rsi
    00001ec5: 	callq	_ZdlPvm@PLT # Offset: 7877
.Ltmp2227:
    00001eca: 	movq	0x20(%rsp), %rsi
    00001ecf: 	movq	0x18(%rsp), %rdi
    00001ed4: 	leaq	DATAat0x15560(%rip), %rdx
    00001edb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7899
    00001ee0: 	callq	clock@PLT # Offset: 7904
    00001ee5: 	movl	$0x0, 0x38(%rsp)
    00001eed: 	movq	%rax, start_time(%rip)
    00001ef4: 	leaq	0x1e8(%rsp), %rax
    00001efc: 	movq	%rax, 0x28(%rsp)
    00001f01: 	movl	iterations(%rip), %eax
    00001f07: 	testl	%eax, %eax
    00001f09: 	jle	.Ltmp2228 # Offset: 7945
.Ltmp2233:
    00001f0f: 	movq	%rbx, %rdi
    00001f12: 	movl	$0x3e80, %edx
    00001f17: 	movq	%r12, %rsi
    00001f1a: 	movl	$0x3e7, %r14d
    00001f20: 	callq	memcpy@PLT # Offset: 7968
    00001f25: 	movq	%rbp, 0x48(%rsp)
    00001f2a: 	movq	%rbx, %rbp
    00001f2d: 	movq	0x30(%rsp), %rbx
    00001f32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2229:
    00001f38: 	movq	(%rbp,%r14,8), %rcx
    00001f3d: 	movq	%r14, %rdx
    00001f40: 	movq	%rbx, %rsi
    00001f43: 	movl	$0x7d0, %edi
    00001f48: 	movq	%rbp, 0xf8(%rsp)
    00001f50: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_ # Offset: 8016
    00001f55: 	subq	$0x1, %r14
    00001f59: 	jae	.Ltmp2229 # Offset: 8025
    00001f5b: 	movq	0x30(%rsp), %rbx
    00001f60: 	movl	$0x7cf, %r14d
    00001f66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2230:
    00001f70: 	movq	0x1e0(%rsp), %rdx
    00001f78: 	movq	(%rbp,%r14,8), %rcx
    00001f7d: 	movq	%r14, %rdi
    00001f80: 	movq	%rbx, %rsi
    00001f83: 	movq	%rbp, 0xf8(%rsp)
    00001f8b: 	movq	%rdx, (%rbp,%r14,8)
    00001f90: 	xorl	%edx, %edx
    00001f92: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_ # Offset: 8082
    00001f97: 	subq	$0x1, %r14
    00001f9b: 	jne	.Ltmp2230 # Offset: 8091
    00001f9d: 	movq	%rbp, %rbx
    00001fa0: 	movq	0x28(%rsp), %rax
    00001fa5: 	movq	0x48(%rsp), %rbp
    00001faa: 	movq	0x1e0(%rsp), %rdx
    00001fb2: 	movq	0x50(%rsp), %rsi
    00001fb7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2232:
    00001fc0: 	movq	%rdx, %rcx
    00001fc3: 	movq	(%rax), %rdx
    00001fc6: 	cmpq	%rcx, %rdx
    00001fc9: 	jb	.Ltmp2231 # Offset: 8137
    00001fcf: 	addq	$0x8, %rax
    00001fd3: 	cmpq	%rax, %rsi
    00001fd6: 	jne	.Ltmp2232 # Offset: 8150
.Ltmp2285:
    00001fd8: 	addl	$0x1, 0x38(%rsp)
    00001fdd: 	movl	0x38(%rsp), %eax
    00001fe1: 	cmpl	iterations(%rip), %eax
    00001fe7: 	jl	.Ltmp2233 # Offset: 8167
.Ltmp2228:
    00001fed: 	callq	clock@PLT # Offset: 8173
    00001ff2: 	movq	0x18(%rsp), %rdi
    00001ff7: 	pxor	%xmm0, %xmm0
    00001ffb: 	movq	%rax, end_time(%rip)
    00002002: 	subq	start_time(%rip), %rax
    00002009: 	cvtsi2sd	%rax, %xmm0
    0000200e: 	divsd	DATAat0x15638(%rip), %xmm0
    00002016: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8214
    0000201b: 	movq	0x1c0(%rsp), %rdi
    00002023: 	cmpq	0x10(%rsp), %rdi
    00002028: 	je	.Ltmp2234 # Offset: 8232
    0000202a: 	movq	0x1d0(%rsp), %rax
    00002032: 	leaq	0x1(%rax), %rsi
    00002036: 	callq	_ZdlPvm@PLT # Offset: 8246
.Ltmp2234:
    0000203b: 	movq	0x18(%rsp), %rbx
    00002040: 	movq	0x20(%rsp), %rsi
    00002045: 	leaq	DATAat0x15588(%rip), %rdx
    0000204c: 	movq	%rbx, %rdi
    0000204f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8271
    00002054: 	movq	0x8(%rsp), %rax
    00002059: 	movq	0x30(%rsp), %rcx
    0000205e: 	movq	%rbx, %r8
    00002061: 	movq	%r15, 0xf8(%rsp)
    00002069: 	movq	0x40(%rsp), %rdx
    0000206e: 	movq	0x60(%rsp), %rsi
    00002073: 	movq	%rbp, 0xe8(%rsp)
    0000207b: 	movq	0x58(%rsp), %rdi
    00002080: 	movq	%rax, 0xd8(%rsp)
    00002088: 	movq	%r13, 0xc8(%rsp)
    00002090: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 8336
    00002095: 	movq	0x1c0(%rsp), %rdi
    0000209d: 	cmpq	0x10(%rsp), %rdi
    000020a2: 	je	.Ltmp2235 # Offset: 8354
    000020a4: 	movq	0x1d0(%rsp), %rax
    000020ac: 	leaq	0x1(%rax), %rsi
    000020b0: 	callq	_ZdlPvm@PLT # Offset: 8368
.Ltmp2235:
    000020b5: 	movq	0x18(%rsp), %rbx
    000020ba: 	movq	0x20(%rsp), %rsi
    000020bf: 	leaq	DATAat0x155b8(%rip), %rdx
    000020c6: 	movq	%rbx, %rdi
    000020c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8393
    000020ce: 	movq	0x8(%rsp), %rax
    000020d3: 	movq	0x30(%rsp), %rcx
    000020d8: 	movq	%rbx, %r8
    000020db: 	movq	%r15, 0xf8(%rsp)
    000020e3: 	movq	0x40(%rsp), %rdx
    000020e8: 	movq	0x60(%rsp), %rsi
    000020ed: 	movq	%rbp, 0xe8(%rsp)
    000020f5: 	movq	0x58(%rsp), %rdi
    000020fa: 	movq	%rax, 0xd8(%rsp)
    00002102: 	movq	%r13, 0xc8(%rsp)
    0000210a: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEmEvT_SA_SA_SA_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 8458
    0000210f: 	movq	0x1c0(%rsp), %rdi
    00002117: 	cmpq	0x10(%rsp), %rdi
    0000211c: 	je	.Ltmp2236 # Offset: 8476
    0000211e: 	movq	0x1d0(%rsp), %rax
    00002126: 	leaq	0x1(%rax), %rsi
    0000212a: 	callq	_ZdlPvm@PLT # Offset: 8490
.Ltmp2236:
    0000212f: 	movq	0x20(%rsp), %rsi
    00002134: 	movq	0x18(%rsp), %rdi
    00002139: 	leaq	DATAat0x155e8(%rip), %rdx
    00002140: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8512
    00002145: 	callq	clock@PLT # Offset: 8517
    0000214a: 	movq	%rax, start_time(%rip)
    00002151: 	movl	iterations(%rip), %eax
    00002157: 	movl	%eax, 0x38(%rsp)
    0000215b: 	testl	%eax, %eax
    0000215d: 	jle	.Ltmp2237 # Offset: 8541
    00002163: 	movq	%r15, %rax
    00002166: 	leaq	0x8(%r13), %rdx
    0000216a: 	movl	$0x0, 0x30(%rsp)
    00002172: 	subq	%rbp, %rax
    00002175: 	movq	%rax, %rbx
    00002178: 	shrq	$0x3f, %rax
    0000217c: 	sarq	$0x3, %rbx
    00002180: 	addq	%rbx, %rax
    00002183: 	sarq	%rax
    00002186: 	subq	$0x1, %rax
    0000218a: 	movq	%rax, 0x40(%rsp)
    0000218f: 	leaq	-0x1(%rbx), %rax
    00002193: 	movq	%rax, 0x48(%rsp)
    00002198: 	leaq	0x8(%rbp), %rax
    0000219c: 	movq	%rax, 0x58(%rsp)
    000021a1: 	movq	0x8(%rsp), %rax
    000021a6: 	subq	$0x8, %rax
    000021aa: 	subq	%r13, %rax
    000021ad: 	cmpq	%rdx, %rbp
    000021b0: 	setne	%cl
    000021b3: 	cmpq	$0x10, %rax
    000021b7: 	seta	%dl
    000021ba: 	shrq	$0x3, %rax
    000021be: 	leaq	0x1(%rax), %rdi
    000021c2: 	andl	%edx, %ecx
    000021c4: 	movq	%rdi, %rax
    000021c7: 	movq	%rdi, 0x70(%rsp)
    000021cc: 	andq	$-0x2, %rdi
    000021d0: 	shrq	%rax
    000021d3: 	movb	%cl, 0x50(%rsp)
    000021d7: 	shlq	$0x4, %rax
    000021db: 	movq	%rdi, 0x60(%rsp)
    000021e0: 	movq	%rax, 0x68(%rsp)
    000021e5: 	leaq	(,%rdi,8), %rax
    000021ed: 	leaq	(%r13,%rax), %r12
    000021f2: 	addq	%rbp, %rax
    000021f5: 	movq	%rax, 0x28(%rsp)
.Ltmp2248:
    000021fa: 	cmpq	%r13, 0x8(%rsp)
    000021ff: 	je	.Ltmp2238 # Offset: 8703
    00002201: 	cmpb	$0x0, 0x50(%rsp)
    00002206: 	je	.Ltmp2239 # Offset: 8710
    0000220c: 	movq	0x68(%rsp), %rdx
    00002211: 	xorl	%eax, %eax
    00002213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2240:
    00002218: 	movdqu	(%r13,%rax), %xmm3
    0000221f: 	movups	%xmm3, (%rbp,%rax)
    00002224: 	addq	$0x10, %rax
    00002228: 	cmpq	%rax, %rdx
    0000222b: 	jne	.Ltmp2240 # Offset: 8747
    0000222d: 	movq	0x70(%rsp), %rdi
    00002232: 	cmpq	%rdi, 0x60(%rsp)
    00002237: 	je	.Ltmp2238 # Offset: 8759
    00002239: 	movq	(%r12), %rax
    0000223d: 	movq	0x28(%rsp), %rdi
    00002242: 	movq	%rax, (%rdi)
.Ltmp2238:
    00002245: 	movq	0x40(%rsp), %rax
    0000224a: 	movq	%rax, %r14
    0000224d: 	testq	%rax, %rax
    00002250: 	js	.Ltmp2241 # Offset: 8784
    00002252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2242:
    00002258: 	movq	(%rbp,%r14,8), %rcx
    0000225d: 	movq	%r14, %rdx
    00002260: 	movq	%rbp, %rsi
    00002263: 	movq	%rbx, %rdi
    00002266: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEmEEvlT_lT0_ # Offset: 8806
    0000226b: 	subq	$0x1, %r14
    0000226f: 	jae	.Ltmp2242 # Offset: 8815
.Ltmp2241:
    00002271: 	movq	0x48(%rsp), %rax
    00002276: 	movq	%rax, %r14
    00002279: 	testq	%rax, %rax
    0000227c: 	jle	.Ltmp2243 # Offset: 8828
    0000227e: 	nop # Size: 2
.Ltmp2244:
    00002280: 	movq	(%rbp), %rax
    00002284: 	movq	(%rbp,%r14,8), %rcx
    00002289: 	xorl	%edx, %edx
    0000228b: 	movq	%r14, %rdi
    0000228e: 	movq	%rbp, %rsi
    00002291: 	movq	%rax, (%rbp,%r14,8)
    00002296: 	callq	_ZN9benchmark9__sift_inI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEmEEvlT_lT0_ # Offset: 8854
    0000229b: 	subq	$0x1, %r14
    0000229f: 	jne	.Ltmp2244 # Offset: 8863
.Ltmp2243:
    000022a1: 	movq	0x58(%rsp), %rax
    000022a6: 	jmp	.Ltmp2245 # Offset: 8870
    000022a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2247:
    000022b0: 	addq	$0x8, %rax
    000022b4: 	movq	-0x10(%rax), %rdi
    000022b8: 	cmpq	%rdi, (%rdx)
    000022bb: 	jb	.Ltmp2246 # Offset: 8891
.Ltmp2245:
    000022c1: 	movq	%rax, %rdx
    000022c4: 	cmpq	%rax, %r15
    000022c7: 	jne	.Ltmp2247 # Offset: 8903
    000022c9: 	addl	$0x1, 0x30(%rsp)
    000022ce: 	movl	0x30(%rsp), %eax
    000022d2: 	cmpl	0x38(%rsp), %eax
    000022d6: 	jl	.Ltmp2248 # Offset: 8918
.Ltmp2237:
    000022dc: 	callq	clock@PLT # Offset: 8924
    000022e1: 	movq	0x18(%rsp), %rdi
    000022e6: 	pxor	%xmm0, %xmm0
    000022ea: 	movq	%rax, end_time(%rip)
    000022f1: 	subq	start_time(%rip), %rax
    000022f8: 	cvtsi2sd	%rax, %xmm0
    000022fd: 	divsd	DATAat0x15638(%rip), %xmm0
    00002305: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8965
    0000230a: 	movq	0x1c0(%rsp), %rdi
    00002312: 	cmpq	0x10(%rsp), %rdi
    00002317: 	je	.Ltmp2249 # Offset: 8983
    00002319: 	movq	0x1d0(%rsp), %rax
    00002321: 	leaq	0x1(%rax), %rsi
    00002325: 	callq	_ZdlPvm@PLT # Offset: 8997
.Ltmp2249:
    0000232a: 	movq	0x20(%rsp), %rsi
    0000232f: 	movq	0x18(%rsp), %rdi
    00002334: 	leaq	DATAat0x152e5(%rip), %rdx
    0000233b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9019
    00002340: 	movl	iterations(%rip), %edx
    00002346: 	movl	$0x1, %r8d
    0000234c: 	movl	$0x1, %ecx
    00002351: 	movq	0x1c0(%rsp), %rdi
    00002359: 	movl	$0x7d0, %esi
    0000235e: 	callq	_Z9summarizePKciiii # Offset: 9054
    00002363: 	movl	0xbc(%rsp), %eax
    0000236a: 	movq	0x1c0(%rsp), %rdi
    00002372: 	movl	%eax, iterations(%rip)
    00002378: 	cmpq	0x10(%rsp), %rdi
    0000237d: 	je	.Ltmp2250 # Offset: 9085
    0000237f: 	movq	0x1d0(%rsp), %rax
    00002387: 	leaq	0x1(%rax), %rsi
    0000238b: 	callq	_ZdlPvm@PLT # Offset: 9099
.Ltmp2250:
    00002390: 	movq	0x1a0(%rsp), %rdi
    00002398: 	leaq	0x1b0(%rsp), %rax
    000023a0: 	cmpq	%rax, %rdi
    000023a3: 	je	.Ltmp2251 # Offset: 9123
    000023a5: 	movq	0x1b0(%rsp), %rax
    000023ad: 	leaq	0x1(%rax), %rsi
    000023b1: 	callq	_ZdlPvm@PLT # Offset: 9137
.Ltmp2251:
    000023b6: 	movq	0x180(%rsp), %rdi
    000023be: 	leaq	0x190(%rsp), %rax
    000023c6: 	cmpq	%rax, %rdi
    000023c9: 	je	.Ltmp2252 # Offset: 9161
    000023cb: 	movq	0x190(%rsp), %rax
    000023d3: 	leaq	0x1(%rax), %rsi
    000023d7: 	callq	_ZdlPvm@PLT # Offset: 9175
.Ltmp2252:
    000023dc: 	movq	0x130(%rsp), %rsi
    000023e4: 	movq	%r13, %rdi
    000023e7: 	subq	%r13, %rsi
    000023ea: 	callq	_ZdlPvm@PLT # Offset: 9194
    000023ef: 	movq	0x160(%rsp), %rdi
    000023f7: 	leaq	0x170(%rsp), %rax
    000023ff: 	cmpq	%rax, %rdi
    00002402: 	je	.Ltmp2253 # Offset: 9218
    00002404: 	movq	0x170(%rsp), %rax
    0000240c: 	leaq	0x1(%rax), %rsi
    00002410: 	callq	_ZdlPvm@PLT # Offset: 9232
.Ltmp2253:
    00002415: 	testq	%rbp, %rbp
    00002418: 	je	.Ltmp2254 # Offset: 9240
    0000241a: 	movq	0x110(%rsp), %rsi
    00002422: 	movq	%rbp, %rdi
    00002425: 	subq	%rbp, %rsi
    00002428: 	callq	_ZdlPvm@PLT # Offset: 9256
.Ltmp2254:
    0000242d: 	movq	0x140(%rsp), %rdi
    00002435: 	leaq	0x150(%rsp), %rax
    0000243d: 	cmpq	%rax, %rdi
    00002440: 	je	.Ltmp2255 # Offset: 9280
    00002442: 	movq	0x150(%rsp), %rax
    0000244a: 	leaq	0x1(%rax), %rsi
    0000244e: 	callq	_ZdlPvm@PLT # Offset: 9294
.Ltmp2255:
    00002453: 	movq	0x7ee8(%rsp), %rax
    0000245b: 	subq	%fs:0x28, %rax
    00002464: 	jne	.Ltmp2256 # Offset: 9316
    0000246a: 	addq	$0x7ef8, %rsp
    00002471: 	popq	%rbx
    00002472: 	popq	%rbp
    00002473: 	popq	%r12
    00002475: 	popq	%r13
    00002477: 	popq	%r14
    00002479: 	popq	%r15
    0000247b: 	retq # Offset: 9339
.Ltmp2199:
    0000247c: 	movq	%r8, %rax
    0000247f: 	subq	%rbp, %rax
    00002482: 	cmpq	$0x8, %rax
    00002486: 	jle	.Ltmp2257 # Offset: 9350
    0000248c: 	movq	(%rbp), %rdi
    00002490: 	movq	%r8, %r9
    00002493: 	movq	%rbp, %rdx
    00002496: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2262:
    000024a0: 	leaq	-0x8(%r9), %r10
    000024a4: 	cmpq	%rdi, %rsi
    000024a7: 	ja	.Ltmp2258 # Offset: 9383
    000024a9: 	cmpq	%rdx, %r10
    000024ac: 	jbe	.Ltmp2259 # Offset: 9388
    000024b2: 	movq	(%rdx), %rcx
    000024b5: 	cmpq	%rdi, %rcx
    000024b8: 	jae	.Ltmp2260 # Offset: 9400
    000024ba: 	leaq	0x8(%rdx), %rax
    000024be: 	nop # Size: 2
.Ltmp2261:
    000024c0: 	movq	%rax, %rdx
    000024c3: 	movq	(%rax), %rcx
    000024c6: 	leaq	0x8(%rax), %rax
    000024ca: 	cmpq	%rcx, %rdi
    000024cd: 	ja	.Ltmp2261 # Offset: 9421
    000024cf: 	cmpq	%rdx, %r10
    000024d2: 	jbe	.Ltmp2259 # Offset: 9426
.Ltmp2260:
    000024d8: 	movq	%rcx, (%r10)
    000024db: 	movq	%rsi, (%rdx)
.Ltmp2258:
    000024de: 	movq	-0x8(%r10), %rsi
    000024e2: 	movq	%r10, %r9
    000024e5: 	jmp	.Ltmp2262 # Offset: 9445
.Ltmp2306:
    000024e7: 	movq	%r10, %rsi
    000024ea: 	movq	%r8, 0x98(%rsp)
    000024f2: 	movq	%r10, 0xa0(%rsp)
    000024fa: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 9466
    000024ff: 	movq	0x98(%rsp), %rsi
    00002507: 	movq	0xa0(%rsp), %rdi
    0000250f: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 9487
    00002514: 	movq	0x98(%rsp), %r8
.Ltmp2257:
    0000251c: 	movq	%r15, %rax
    0000251f: 	subq	%r8, %rax
    00002522: 	cmpq	$0x8, %rax
    00002526: 	jle	.Ltmp2197 # Offset: 9510
    0000252c: 	movq	(%r8), %rsi
    0000252f: 	movq	%r15, %r9
    00002532: 	movq	%r8, %rdx
    00002535: 	nopl	(%rax) # Size: 3
.Ltmp2267:
    00002538: 	movq	-0x8(%r9), %r10
    0000253c: 	leaq	-0x8(%r9), %rdi
    00002540: 	cmpq	%r10, %rsi
    00002543: 	jb	.Ltmp2263 # Offset: 9539
    00002545: 	cmpq	%rdx, %rdi
    00002548: 	jbe	.Ltmp2264 # Offset: 9544
    0000254e: 	movq	(%rdx), %rcx
    00002551: 	cmpq	%rsi, %rcx
    00002554: 	jae	.Ltmp2265 # Offset: 9556
    00002556: 	leaq	0x8(%rdx), %rax
    0000255a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2266:
    00002560: 	movq	%rax, %rdx
    00002563: 	movq	(%rax), %rcx
    00002566: 	leaq	0x8(%rax), %rax
    0000256a: 	cmpq	%rcx, %rsi
    0000256d: 	ja	.Ltmp2266 # Offset: 9581
    0000256f: 	cmpq	%rdx, %rdi
    00002572: 	jbe	.Ltmp2264 # Offset: 9586
.Ltmp2265:
    00002578: 	movq	%rcx, (%rdi)
    0000257b: 	movq	%r10, (%rdx)
.Ltmp2263:
    0000257e: 	movq	%rdi, %r9
    00002581: 	jmp	.Ltmp2267 # Offset: 9601
.Ltmp2160:
    00002583: 	movq	%r8, %rax
    00002586: 	subq	%rbp, %rax
    00002589: 	cmpq	$0x8, %rax
    0000258d: 	jle	.Ltmp2268 # Offset: 9613
    00002593: 	movq	(%rbp), %rsi
    00002597: 	movq	%r8, %rcx
    0000259a: 	movq	%rbp, %rax
    0000259d: 	nopl	(%rax) # Size: 3
.Ltmp2273:
    000025a0: 	leaq	-0x8(%rcx), %r9
    000025a4: 	cmpq	%rdi, %rsi
    000025a7: 	jb	.Ltmp2269 # Offset: 9639
    000025a9: 	cmpq	%rax, %r9
    000025ac: 	jbe	.Ltmp2270 # Offset: 9644
    000025b2: 	movq	(%rax), %rdx
    000025b5: 	cmpq	%rdx, %rsi
    000025b8: 	jbe	.Ltmp2271 # Offset: 9656
    000025ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2272:
    000025c0: 	movq	0x8(%rax), %rdx
    000025c4: 	addq	$0x8, %rax
    000025c8: 	cmpq	%rdx, %rsi
    000025cb: 	ja	.Ltmp2272 # Offset: 9675
    000025cd: 	cmpq	%rax, %r9
    000025d0: 	jbe	.Ltmp2270 # Offset: 9680
.Ltmp2271:
    000025d6: 	movq	%rdx, (%r9)
    000025d9: 	movq	%rdi, (%rax)
.Ltmp2269:
    000025dc: 	movq	-0x8(%r9), %rdi
    000025e0: 	movq	%r9, %rcx
    000025e3: 	jmp	.Ltmp2273 # Offset: 9699
.Ltmp2350:
    000025e5: 	movq	%r9, %rsi
    000025e8: 	movq	%r10, %rdi
    000025eb: 	movq	%r8, 0x98(%rsp)
    000025f3: 	movq	%r9, 0xa0(%rsp)
    000025fb: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 9723
    00002600: 	movq	0x98(%rsp), %rsi
    00002608: 	movq	0xa0(%rsp), %rdi
    00002610: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 9744
    00002615: 	movq	0x98(%rsp), %r8
.Ltmp2268:
    0000261d: 	movq	%r15, %rax
    00002620: 	subq	%r8, %rax
    00002623: 	cmpq	$0x8, %rax
    00002627: 	jle	.Ltmp2158 # Offset: 9767
    0000262d: 	movq	(%r8), %rsi
    00002630: 	movq	%r15, %rcx
    00002633: 	movq	%r8, %rax
    00002636: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2278:
    00002640: 	movq	-0x8(%rcx), %r9
    00002644: 	leaq	-0x8(%rcx), %rdi
    00002648: 	cmpq	%r9, %rsi
    0000264b: 	jb	.Ltmp2274 # Offset: 9803
    0000264d: 	cmpq	%rax, %rdi
    00002650: 	jbe	.Ltmp2275 # Offset: 9808
    00002656: 	movq	(%rax), %rdx
    00002659: 	cmpq	%rdx, %rsi
    0000265c: 	jbe	.Ltmp2276 # Offset: 9820
    0000265e: 	nop # Size: 2
.Ltmp2277:
    00002660: 	movq	0x8(%rax), %rdx
    00002664: 	addq	$0x8, %rax
    00002668: 	cmpq	%rdx, %rsi
    0000266b: 	ja	.Ltmp2277 # Offset: 9835
    0000266d: 	cmpq	%rax, %rdi
    00002670: 	jbe	.Ltmp2275 # Offset: 9840
.Ltmp2276:
    00002676: 	movq	%rdx, (%rdi)
    00002679: 	movq	%r9, (%rax)
.Ltmp2274:
    0000267c: 	movq	%rdi, %rcx
    0000267f: 	jmp	.Ltmp2278 # Offset: 9855
.Ltmp2091:
    00002681: 	subsd	DATAat0x15650(%rip), %xmm0
    00002689: 	movabsq	$-0x8000000000000000, %rdi
    00002693: 	cvttsd2si	%xmm0, %rdx
    00002698: 	xorq	%rdi, %rdx
    0000269b: 	jmp	.Ltmp2279 # Offset: 9883
.Ltmp2082:
    000026a0: 	subsd	DATAat0x15650(%rip), %xmm0
    000026a8: 	movabsq	$-0x8000000000000000, %rdi
    000026b2: 	cvttsd2si	%xmm0, %rdx
    000026b7: 	xorq	%rdi, %rdx
    000026ba: 	jmp	.Ltmp2280 # Offset: 9914
.Ltmp2074:
    000026bf: 	subsd	DATAat0x15650(%rip), %xmm0
    000026c7: 	movabsq	$-0x8000000000000000, %rdi
    000026d1: 	cvttsd2si	%xmm0, %rdx
    000026d6: 	xorq	%rdi, %rdx
    000026d9: 	jmp	.Ltmp2281 # Offset: 9945
.Ltmp2066:
    000026de: 	subsd	DATAat0x15650(%rip), %xmm1
    000026e6: 	cvttsd2si	%xmm1, %rdx
    000026eb: 	xorq	%r14, %rdx
    000026ee: 	jmp	.Ltmp2282 # Offset: 9966
.Ltmp2052:
    000026f3: 	subsd	DATAat0x15650(%rip), %xmm1
    000026fb: 	cvttsd2si	%xmm1, %rdx
    00002700: 	xorq	%r14, %rdx
    00002703: 	jmp	.Ltmp2283 # Offset: 9987
.Ltmp2060:
    00002708: 	subsd	DATAat0x15650(%rip), %xmm0
    00002710: 	movabsq	$-0x8000000000000000, %rdi
    0000271a: 	cvttsd2si	%xmm0, %rdx
    0000271f: 	xorq	%rdi, %rdx
    00002722: 	jmp	.Ltmp2284 # Offset: 10018
.Ltmp2224:
    00002727: 	movq	0x1c0(%rsp), %rdx
    0000272f: 	leaq	DATAat0x151ba(%rip), %rsi
    00002736: 	movl	$0x1, %edi
    0000273b: 	xorl	%eax, %eax
    0000273d: 	callq	__printf_chk@PLT # Offset: 10045
    00002742: 	movl	iterations(%rip), %eax
    00002748: 	addl	$0x1, 0x48(%rsp)
    0000274d: 	movl	%eax, 0x70(%rsp)
    00002751: 	movl	0x48(%rsp), %eax
    00002755: 	cmpl	0x70(%rsp), %eax
    00002759: 	jl	.Ltmp2226 # Offset: 10073
    0000275f: 	jmp	.Ltmp2215 # Offset: 10079
.Ltmp2231:
    00002764: 	movq	0x1c0(%rsp), %rdx
    0000276c: 	leaq	DATAat0x151ba(%rip), %rsi
    00002773: 	movl	$0x1, %edi
    00002778: 	xorl	%eax, %eax
    0000277a: 	callq	__printf_chk@PLT # Offset: 10106
    0000277f: 	jmp	.Ltmp2285 # Offset: 10111
.Ltmp2100:
    00002784: 	movq	0x1c0(%rsp), %rdx
    0000278c: 	leaq	DATAat0x151ba(%rip), %rsi
    00002793: 	movl	$0x1, %edi
    00002798: 	xorl	%eax, %eax
    0000279a: 	callq	__printf_chk@PLT # Offset: 10138
    0000279f: 	movl	iterations(%rip), %eax
    000027a5: 	addl	$0x1, %r14d
    000027a9: 	movl	%eax, 0x10(%rsp)
    000027ad: 	cmpl	0x10(%rsp), %r14d
    000027b2: 	jl	.Ltmp2102 # Offset: 10162
    000027b8: 	jmp	.Ltmp2096 # Offset: 10168
.Ltmp2165:
    000027bd: 	movq	0x1c0(%rsp), %rdx
    000027c5: 	leaq	DATAat0x151ba(%rip), %rsi
    000027cc: 	movl	$0x1, %edi
    000027d1: 	xorl	%eax, %eax
    000027d3: 	callq	__printf_chk@PLT # Offset: 10195
    000027d8: 	movl	iterations(%rip), %eax
    000027de: 	addl	$0x1, 0x38(%rsp)
    000027e3: 	movl	%eax, 0x48(%rsp)
    000027e7: 	movl	0x38(%rsp), %eax
    000027eb: 	cmpl	%eax, 0x48(%rsp)
    000027ef: 	jg	.Ltmp2167 # Offset: 10223
    000027f5: 	jmp	.Ltmp2154 # Offset: 10229
.Ltmp2150:
    000027fa: 	movq	0x1c0(%rsp), %rdx
    00002802: 	leaq	DATAat0x151ba(%rip), %rsi
    00002809: 	movl	$0x1, %edi
    0000280e: 	xorl	%eax, %eax
    00002810: 	callq	__printf_chk@PLT # Offset: 10256
    00002815: 	jmp	.Ltmp2286 # Offset: 10261
.Ltmp2122:
    0000281a: 	movq	0x1c0(%rsp), %rdx
    00002822: 	leaq	DATAat0x151ba(%rip), %rsi
    00002829: 	movl	$0x1, %edi
    0000282e: 	xorl	%eax, %eax
    00002830: 	callq	__printf_chk@PLT # Offset: 10288
    00002835: 	addl	$0x1, %r14d
    00002839: 	cmpl	iterations(%rip), %r14d
    00002840: 	jl	.Ltmp2124 # Offset: 10304
    00002846: 	jmp	.Ltmp2118 # Offset: 10310
.Ltmp2246:
    0000284b: 	movq	0x1c0(%rsp), %rdx
    00002853: 	leaq	DATAat0x151ba(%rip), %rsi
    0000285a: 	movl	$0x1, %edi
    0000285f: 	xorl	%eax, %eax
    00002861: 	callq	__printf_chk@PLT # Offset: 10337
    00002866: 	movl	iterations(%rip), %eax
    0000286c: 	addl	$0x1, 0x30(%rsp)
    00002871: 	movl	%eax, 0x38(%rsp)
    00002875: 	movl	0x30(%rsp), %eax
    00002879: 	cmpl	0x38(%rsp), %eax
    0000287d: 	jl	.Ltmp2248 # Offset: 10365
    00002883: 	jmp	.Ltmp2237 # Offset: 10371
.Ltmp2187:
    00002888: 	movq	0x1c0(%rsp), %rdx
    00002890: 	leaq	DATAat0x151ba(%rip), %rsi
    00002897: 	movl	$0x1, %edi
    0000289c: 	xorl	%eax, %eax
    0000289e: 	callq	__printf_chk@PLT # Offset: 10398
    000028a3: 	jmp	.Ltmp2287 # Offset: 10403
.Ltmp2114:
    000028a8: 	movq	0x1c0(%rsp), %rdx
    000028b0: 	leaq	DATAat0x151ba(%rip), %rsi
    000028b7: 	movl	$0x1, %edi
    000028bc: 	xorl	%eax, %eax
    000028be: 	callq	__printf_chk@PLT # Offset: 10430
    000028c3: 	addl	$0x1, 0x30(%rsp)
    000028c8: 	movl	iterations(%rip), %r8d
    000028cf: 	movl	0x30(%rsp), %eax
    000028d3: 	cmpl	%r8d, %eax
    000028d6: 	jl	.Ltmp2116 # Offset: 10454
    000028dc: 	jmp	.Ltmp2104 # Offset: 10460
.Ltmp2138:
    000028e1: 	movq	0x1c0(%rsp), %rdx
    000028e9: 	leaq	DATAat0x151ba(%rip), %rsi
    000028f0: 	movl	$0x1, %edi
    000028f5: 	xorl	%eax, %eax
    000028f7: 	callq	__printf_chk@PLT # Offset: 10487
    000028fc: 	addl	$0x1, 0x38(%rsp)
    00002901: 	movl	iterations(%rip), %r8d
    00002908: 	movl	0x38(%rsp), %eax
    0000290c: 	cmpl	%r8d, %eax
    0000290f: 	jl	.Ltmp2140 # Offset: 10511
    00002915: 	jmp	.Ltmp2128 # Offset: 10517
.Ltmp2204:
    0000291a: 	movq	0x1c0(%rsp), %rdx
    00002922: 	leaq	DATAat0x151ba(%rip), %rsi
    00002929: 	movl	$0x1, %edi
    0000292e: 	xorl	%eax, %eax
    00002930: 	callq	__printf_chk@PLT # Offset: 10544
    00002935: 	movl	iterations(%rip), %eax
    0000293b: 	addl	$0x1, 0x38(%rsp)
    00002940: 	movl	%eax, 0x48(%rsp)
    00002944: 	movl	0x38(%rsp), %eax
    00002948: 	cmpl	0x48(%rsp), %eax
    0000294c: 	jl	.Ltmp2206 # Offset: 10572
    00002952: 	jmp	.Ltmp2193 # Offset: 10578
.Ltmp2211:
    00002957: 	movq	0x1c0(%rsp), %rdx
    0000295f: 	leaq	DATAat0x151ba(%rip), %rsi
    00002966: 	movl	$0x1, %edi
    0000296b: 	xorl	%eax, %eax
    0000296d: 	callq	__printf_chk@PLT # Offset: 10605
    00002972: 	movl	iterations(%rip), %eax
    00002978: 	addl	$0x1, 0x38(%rsp)
    0000297d: 	movl	%eax, 0x48(%rsp)
    00002981: 	movl	0x38(%rsp), %eax
    00002985: 	cmpl	%eax, 0x48(%rsp)
    00002989: 	jg	.Ltmp2213 # Offset: 10633
    0000298f: 	jmp	.Ltmp2208 # Offset: 10639
.Ltmp2264:
    00002994: 	movq	%r9, %rax
    00002997: 	subq	%r8, %rax
    0000299a: 	cmpq	$0x8, %rax
    0000299e: 	jle	.Ltmp2288 # Offset: 10654
    000029a4: 	movq	(%r8), %rsi
    000029a7: 	movq	%r9, %r10
    000029aa: 	movq	%r8, %rdx
.Ltmp2293:
    000029ad: 	movq	-0x8(%r10), %r11
    000029b1: 	leaq	-0x8(%r10), %rdi
    000029b5: 	cmpq	%r11, %rsi
    000029b8: 	jb	.Ltmp2289 # Offset: 10680
    000029ba: 	cmpq	%rdx, %rdi
    000029bd: 	jbe	.Ltmp2290 # Offset: 10685
    000029bf: 	movq	(%rdx), %rcx
    000029c2: 	cmpq	%rsi, %rcx
    000029c5: 	jae	.Ltmp2291 # Offset: 10693
    000029c7: 	leaq	0x8(%rdx), %rax
    000029cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2292:
    000029d0: 	movq	%rax, %rdx
    000029d3: 	movq	(%rax), %rcx
    000029d6: 	leaq	0x8(%rax), %rax
    000029da: 	cmpq	%rcx, %rsi
    000029dd: 	ja	.Ltmp2292 # Offset: 10717
    000029df: 	cmpq	%rdx, %rdi
    000029e2: 	jbe	.Ltmp2290 # Offset: 10722
.Ltmp2291:
    000029e4: 	movq	%rcx, (%rdi)
    000029e7: 	movq	%r11, (%rdx)
.Ltmp2289:
    000029ea: 	movq	%rdi, %r10
    000029ed: 	jmp	.Ltmp2293 # Offset: 10733
.Ltmp2290:
    000029ef: 	movq	%r10, %rsi
    000029f2: 	movq	%r8, %rdi
    000029f5: 	movq	%r9, 0x98(%rsp)
    000029fd: 	movq	%r10, 0xa0(%rsp)
    00002a05: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 10757
    00002a0a: 	movq	0x98(%rsp), %rsi
    00002a12: 	movq	0xa0(%rsp), %rdi
    00002a1a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 10778
    00002a1f: 	movq	0x98(%rsp), %r9
.Ltmp2288:
    00002a27: 	movq	%r15, %rax
    00002a2a: 	movq	%r9, %r10
    00002a2d: 	subq	%r9, %rax
    00002a30: 	cmpq	$0x8, %rax
    00002a34: 	jle	.Ltmp2197 # Offset: 10804
    00002a3a: 	movq	(%r9), %rcx
    00002a3d: 	movq	%r15, %r8
.Ltmp2298:
    00002a40: 	movq	-0x8(%r8), %rdi
    00002a44: 	leaq	-0x8(%r8), %rsi
    00002a48: 	cmpq	%rdi, %rcx
    00002a4b: 	jb	.Ltmp2294 # Offset: 10827
    00002a4d: 	cmpq	%r9, %rsi
    00002a50: 	jbe	.Ltmp2295 # Offset: 10832
    00002a56: 	movq	(%r9), %rdx
    00002a59: 	cmpq	%rcx, %rdx
    00002a5c: 	jae	.Ltmp2296 # Offset: 10844
    00002a5e: 	leaq	0x8(%r9), %rax
    00002a62: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2297:
    00002a68: 	movq	%rax, %r9
    00002a6b: 	movq	(%rax), %rdx
    00002a6e: 	leaq	0x8(%rax), %rax
    00002a72: 	cmpq	%rdx, %rcx
    00002a75: 	ja	.Ltmp2297 # Offset: 10869
    00002a77: 	cmpq	%r9, %rsi
    00002a7a: 	jbe	.Ltmp2295 # Offset: 10874
.Ltmp2296:
    00002a80: 	movq	%rdx, (%rsi)
    00002a83: 	movq	%rdi, (%r9)
.Ltmp2294:
    00002a86: 	movq	%rsi, %r8
    00002a89: 	jmp	.Ltmp2298 # Offset: 10889
.Ltmp2259:
    00002a8b: 	movq	%r9, %rax
    00002a8e: 	subq	%rbp, %rax
    00002a91: 	cmpq	$0x8, %rax
    00002a95: 	jle	.Ltmp2299 # Offset: 10901
    00002a9b: 	movq	(%rbp), %rsi
    00002a9f: 	movq	%r9, %r10
    00002aa2: 	movq	%rbp, %rdx
.Ltmp2304:
    00002aa5: 	movq	-0x8(%r10), %r11
    00002aa9: 	leaq	-0x8(%r10), %rdi
    00002aad: 	cmpq	%r11, %rsi
    00002ab0: 	jb	.Ltmp2300 # Offset: 10928
    00002ab2: 	cmpq	%rdx, %rdi
    00002ab5: 	jbe	.Ltmp2301 # Offset: 10933
    00002ab7: 	movq	(%rdx), %rcx
    00002aba: 	cmpq	%rsi, %rcx
    00002abd: 	jae	.Ltmp2302 # Offset: 10941
    00002abf: 	leaq	0x8(%rdx), %rax
    00002ac3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2303:
    00002ac8: 	movq	%rax, %rdx
    00002acb: 	movq	(%rax), %rcx
    00002ace: 	leaq	0x8(%rax), %rax
    00002ad2: 	cmpq	%rcx, %rsi
    00002ad5: 	ja	.Ltmp2303 # Offset: 10965
    00002ad7: 	cmpq	%rdx, %rdi
    00002ada: 	jbe	.Ltmp2301 # Offset: 10970
.Ltmp2302:
    00002adc: 	movq	%rcx, (%rdi)
    00002adf: 	movq	%r11, (%rdx)
.Ltmp2300:
    00002ae2: 	movq	%rdi, %r10
    00002ae5: 	jmp	.Ltmp2304 # Offset: 10981
.Ltmp2301:
    00002ae7: 	movq	%r10, %rsi
    00002aea: 	movq	%rbp, %rdi
    00002aed: 	movq	%r9, 0x98(%rsp)
    00002af5: 	movq	%r8, 0xa8(%rsp)
    00002afd: 	movq	%r10, 0xa0(%rsp)
    00002b05: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 11013
    00002b0a: 	movq	0x98(%rsp), %rsi
    00002b12: 	movq	0xa0(%rsp), %rdi
    00002b1a: 	callq	_ZN9benchmark9quicksortI16reverse_iteratorIS1_IN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEmEEEvT_SB_ # Offset: 11034
    00002b1f: 	movq	0xa8(%rsp), %r8
    00002b27: 	movq	0x98(%rsp), %r9
.Ltmp2299:
    00002b2f: 	movq	%r8, %rax
    00002b32: 	movq	%r9, %rdi
    00002b35: 	subq	%r9, %rax
    00002b38: 	cmpq	$0x8, %rax
    00002b3c: 	jle	.Ltmp2257 # Offset: 11068
    00002b42: 	movq	(%r9), %rcx
    00002b45: 	movq	%r8, %r10
.Ltmp2309:
    00002b48: 	movq	-0x8(%r10), %r11
    00002b4c: 	leaq	-0x8(%r10), %rsi
    00002b50: 	cmpq	%r11, %rcx
    00002b53: 	jb	.Ltmp2305 # Offset: 11091
    00002b55: 	cmpq	%r9, %rsi
    00002b58: 	jbe	.Ltmp2306 # Offset: 11096
    00002b5e: 	movq	(%r9), %rdx
    00002b61: 	cmpq	%rdx, %rcx
    00002b64: 	jbe	.Ltmp2307 # Offset: 11108
    00002b66: 	leaq	0x8(%r9), %rax
    00002b6a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2308:
    00002b70: 	movq	%rax, %r9
    00002b73: 	movq	(%rax), %rdx
    00002b76: 	leaq	0x8(%rax), %rax
    00002b7a: 	cmpq	%rdx, %rcx
    00002b7d: 	ja	.Ltmp2308 # Offset: 11133
    00002b7f: 	cmpq	%r9, %rsi
    00002b82: 	jbe	.Ltmp2306 # Offset: 11138
.Ltmp2307:
    00002b88: 	movq	%rdx, (%rsi)
    00002b8b: 	movq	%r11, (%r9)
.Ltmp2305:
    00002b8e: 	movq	%rsi, %r10
    00002b91: 	jmp	.Ltmp2309 # Offset: 11153
.Ltmp2183:
    00002b93: 	movq	%r9, %rax
    00002b96: 	subq	%r8, %rax
    00002b99: 	cmpq	$0x8, %rax
    00002b9d: 	jle	.Ltmp2310 # Offset: 11165
    00002ba3: 	movq	(%r8), %rsi
    00002ba6: 	movq	%r9, %r14
    00002ba9: 	movq	%r8, %rdx
.Ltmp2315:
    00002bac: 	movq	-0x8(%r14), %r10
    00002bb0: 	leaq	-0x8(%r14), %rdi
    00002bb4: 	cmpq	%r10, %rsi
    00002bb7: 	jb	.Ltmp2311 # Offset: 11191
    00002bb9: 	cmpq	%rdx, %rdi
    00002bbc: 	jbe	.Ltmp2312 # Offset: 11196
    00002bbe: 	movq	(%rdx), %rcx
    00002bc1: 	cmpq	%rsi, %rcx
    00002bc4: 	jae	.Ltmp2313 # Offset: 11204
    00002bc6: 	leaq	0x8(%rdx), %rax
    00002bca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2314:
    00002bd0: 	movq	%rax, %rdx
    00002bd3: 	movq	(%rax), %rcx
    00002bd6: 	leaq	0x8(%rax), %rax
    00002bda: 	cmpq	%rcx, %rsi
    00002bdd: 	ja	.Ltmp2314 # Offset: 11229
    00002bdf: 	cmpq	%rdx, %rdi
    00002be2: 	jbe	.Ltmp2312 # Offset: 11234
.Ltmp2313:
    00002be4: 	movq	%rcx, (%rdi)
    00002be7: 	movq	%r10, (%rdx)
.Ltmp2311:
    00002bea: 	movq	%rdi, %r14
    00002bed: 	jmp	.Ltmp2315 # Offset: 11245
.Ltmp2312:
    00002bef: 	movq	0x40(%rsp), %rsi
    00002bf4: 	movq	0x30(%rsp), %rdi
    00002bf9: 	movq	%r9, 0x48(%rsp)
    00002bfe: 	movq	%r8, 0xf8(%rsp)
    00002c06: 	movq	%r14, 0xe8(%rsp)
    00002c0e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 11278
    00002c13: 	movq	0x48(%rsp), %r9
    00002c18: 	movq	0x40(%rsp), %rsi
    00002c1d: 	movq	%r14, 0xf8(%rsp)
    00002c25: 	movq	0x30(%rsp), %rdi
    00002c2a: 	movq	%r9, 0xe8(%rsp)
    00002c32: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 11314
    00002c37: 	movq	0x48(%rsp), %r9
.Ltmp2310:
    00002c3c: 	movq	%r12, %rax
    00002c3f: 	subq	%r9, %rax
    00002c42: 	cmpq	$0x8, %rax
    00002c46: 	jle	.Ltmp2181 # Offset: 11334
    00002c4c: 	movq	(%r9), %rcx
    00002c4f: 	movq	%r9, %rax
    00002c52: 	movq	%r12, %r14
.Ltmp2320:
    00002c55: 	movq	-0x8(%r14), %rdi
    00002c59: 	leaq	-0x8(%r14), %rsi
    00002c5d: 	cmpq	%rdi, %rcx
    00002c60: 	jb	.Ltmp2316 # Offset: 11360
    00002c62: 	cmpq	%rax, %rsi
    00002c65: 	jbe	.Ltmp2317 # Offset: 11365
    00002c6b: 	movq	(%rax), %rdx
    00002c6e: 	cmpq	%rcx, %rdx
    00002c71: 	jae	.Ltmp2318 # Offset: 11377
    00002c73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2319:
    00002c78: 	movq	0x8(%rax), %rdx
    00002c7c: 	addq	$0x8, %rax
    00002c80: 	cmpq	%rdx, %rcx
    00002c83: 	ja	.Ltmp2319 # Offset: 11395
    00002c85: 	cmpq	%rax, %rsi
    00002c88: 	jbe	.Ltmp2317 # Offset: 11400
.Ltmp2318:
    00002c8e: 	movq	%rdx, (%rsi)
    00002c91: 	movq	%rdi, (%rax)
.Ltmp2316:
    00002c94: 	movq	%rsi, %r14
    00002c97: 	jmp	.Ltmp2320 # Offset: 11415
.Ltmp2177:
    00002c99: 	movq	%rcx, %rax
    00002c9c: 	subq	%rbx, %rax
    00002c9f: 	cmpq	$0x8, %rax
    00002ca3: 	jle	.Ltmp2321 # Offset: 11427
    00002ca9: 	movq	0x1e0(%rsp), %rdi
    00002cb1: 	movq	%rcx, %r14
    00002cb4: 	movq	%rbx, %rdx
.Ltmp2326:
    00002cb7: 	movq	-0x8(%r14), %r10
    00002cbb: 	leaq	-0x8(%r14), %r9
    00002cbf: 	cmpq	%r10, %rdi
    00002cc2: 	jb	.Ltmp2322 # Offset: 11458
    00002cc4: 	cmpq	%rdx, %r9
    00002cc7: 	jbe	.Ltmp2323 # Offset: 11463
    00002cc9: 	movq	(%rdx), %rsi
    00002ccc: 	cmpq	%rsi, %rdi
    00002ccf: 	jbe	.Ltmp2324 # Offset: 11471
    00002cd1: 	leaq	0x8(%rdx), %rax
    00002cd5: 	nopl	(%rax) # Size: 3
.Ltmp2325:
    00002cd8: 	movq	%rax, %rdx
    00002cdb: 	movq	(%rax), %rsi
    00002cde: 	leaq	0x8(%rax), %rax
    00002ce2: 	cmpq	%rsi, %rdi
    00002ce5: 	ja	.Ltmp2325 # Offset: 11493
    00002ce7: 	cmpq	%rdx, %r9
    00002cea: 	jbe	.Ltmp2323 # Offset: 11498
.Ltmp2324:
    00002cec: 	movq	%rsi, (%r9)
    00002cef: 	movq	%r10, (%rdx)
.Ltmp2322:
    00002cf2: 	movq	%r9, %r14
    00002cf5: 	jmp	.Ltmp2326 # Offset: 11509
.Ltmp2323:
    00002cf7: 	movq	0x40(%rsp), %rsi
    00002cfc: 	movq	0x30(%rsp), %rdi
    00002d01: 	movq	%r8, 0x68(%rsp)
    00002d06: 	movq	%rcx, 0x48(%rsp)
    00002d0b: 	movq	%r14, 0xe8(%rsp)
    00002d13: 	movq	%rbx, 0xf8(%rsp)
    00002d1b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 11547
    00002d20: 	movq	0x48(%rsp), %rcx
    00002d25: 	movq	0x40(%rsp), %rsi
    00002d2a: 	movq	%r14, 0xf8(%rsp)
    00002d32: 	movq	0x30(%rsp), %rdi
    00002d37: 	movq	%rcx, 0xe8(%rsp)
    00002d3f: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 11583
    00002d44: 	movq	0x68(%rsp), %r8
    00002d49: 	movq	0x48(%rsp), %rcx
.Ltmp2321:
    00002d4e: 	movq	%r8, %rax
    00002d51: 	subq	%rcx, %rax
    00002d54: 	cmpq	$0x8, %rax
    00002d58: 	jle	.Ltmp2175 # Offset: 11608
    00002d5e: 	movq	(%rcx), %rdi
    00002d61: 	movq	%r8, %r14
    00002d64: 	movq	%rcx, %rdx
.Ltmp2331:
    00002d67: 	movq	-0x8(%r14), %r10
    00002d6b: 	leaq	-0x8(%r14), %r9
    00002d6f: 	cmpq	%r10, %rdi
    00002d72: 	jb	.Ltmp2327 # Offset: 11634
    00002d74: 	cmpq	%rdx, %r9
    00002d77: 	jbe	.Ltmp2328 # Offset: 11639
    00002d7d: 	movq	(%rdx), %rsi
    00002d80: 	cmpq	%rsi, %rdi
    00002d83: 	jbe	.Ltmp2329 # Offset: 11651
    00002d85: 	leaq	0x8(%rdx), %rax
    00002d89: 	nopl	(%rax) # Size: 7
.Ltmp2330:
    00002d90: 	movq	%rax, %rdx
    00002d93: 	movq	(%rax), %rsi
    00002d96: 	leaq	0x8(%rax), %rax
    00002d9a: 	cmpq	%rsi, %rdi
    00002d9d: 	ja	.Ltmp2330 # Offset: 11677
    00002d9f: 	cmpq	%rdx, %r9
    00002da2: 	jbe	.Ltmp2328 # Offset: 11682
.Ltmp2329:
    00002da8: 	movq	%rsi, (%r9)
    00002dab: 	movq	%r10, (%rdx)
.Ltmp2327:
    00002dae: 	movq	%r9, %r14
    00002db1: 	jmp	.Ltmp2331 # Offset: 11697
.Ltmp2275:
    00002db3: 	movq	%rcx, %rax
    00002db6: 	subq	%r8, %rax
    00002db9: 	cmpq	$0x8, %rax
    00002dbd: 	jle	.Ltmp2332 # Offset: 11709
    00002dc3: 	movq	(%r8), %rdi
    00002dc6: 	movq	%rcx, %r9
    00002dc9: 	movq	%r8, %rdx
.Ltmp2337:
    00002dcc: 	movq	-0x8(%r9), %r11
    00002dd0: 	leaq	-0x8(%r9), %r10
    00002dd4: 	cmpq	%r11, %rdi
    00002dd7: 	jb	.Ltmp2333 # Offset: 11735
    00002dd9: 	cmpq	%rdx, %r10
    00002ddc: 	jbe	.Ltmp2334 # Offset: 11740
    00002dde: 	movq	(%rdx), %rsi
    00002de1: 	cmpq	%rsi, %rdi
    00002de4: 	jbe	.Ltmp2335 # Offset: 11748
    00002de6: 	leaq	0x8(%rdx), %rax
    00002dea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2336:
    00002df0: 	movq	%rax, %rdx
    00002df3: 	movq	(%rax), %rsi
    00002df6: 	leaq	0x8(%rax), %rax
    00002dfa: 	cmpq	%rsi, %rdi
    00002dfd: 	ja	.Ltmp2336 # Offset: 11773
    00002dff: 	cmpq	%rdx, %r10
    00002e02: 	jbe	.Ltmp2334 # Offset: 11778
.Ltmp2335:
    00002e04: 	movq	%rsi, (%r10)
    00002e07: 	movq	%r11, (%rdx)
.Ltmp2333:
    00002e0a: 	movq	%r10, %r9
    00002e0d: 	jmp	.Ltmp2337 # Offset: 11789
.Ltmp2334:
    00002e0f: 	movq	%r9, %rsi
    00002e12: 	movq	%r8, %rdi
    00002e15: 	movq	%rcx, 0x98(%rsp)
    00002e1d: 	movq	%r9, 0xa0(%rsp)
    00002e25: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 11813
    00002e2a: 	movq	0x98(%rsp), %rsi
    00002e32: 	movq	0xa0(%rsp), %rdi
    00002e3a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 11834
    00002e3f: 	movq	0x98(%rsp), %rcx
.Ltmp2332:
    00002e47: 	movq	%r15, %rax
    00002e4a: 	movq	%rcx, %r10
    00002e4d: 	subq	%rcx, %rax
    00002e50: 	cmpq	$0x8, %rax
    00002e54: 	jle	.Ltmp2158 # Offset: 11860
    00002e5a: 	movq	(%rcx), %rsi
    00002e5d: 	movq	%r15, %r8
.Ltmp2342:
    00002e60: 	movq	-0x8(%r8), %r9
    00002e64: 	leaq	-0x8(%r8), %rdi
    00002e68: 	cmpq	%r9, %rsi
    00002e6b: 	jb	.Ltmp2338 # Offset: 11883
    00002e6d: 	cmpq	%rcx, %rdi
    00002e70: 	jbe	.Ltmp2339 # Offset: 11888
    00002e76: 	movq	(%rcx), %rdx
    00002e79: 	cmpq	%rdx, %rsi
    00002e7c: 	jbe	.Ltmp2340 # Offset: 11900
    00002e7e: 	leaq	0x8(%rcx), %rax
    00002e82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2341:
    00002e88: 	movq	%rax, %rcx
    00002e8b: 	movq	(%rax), %rdx
    00002e8e: 	leaq	0x8(%rax), %rax
    00002e92: 	cmpq	%rdx, %rsi
    00002e95: 	ja	.Ltmp2341 # Offset: 11925
    00002e97: 	cmpq	%rcx, %rdi
    00002e9a: 	jbe	.Ltmp2339 # Offset: 11930
.Ltmp2340:
    00002ea0: 	movq	%rdx, (%rdi)
    00002ea3: 	movq	%r9, (%rcx)
.Ltmp2338:
    00002ea6: 	movq	%rdi, %r8
    00002ea9: 	jmp	.Ltmp2342 # Offset: 11945
.Ltmp2270:
    00002eab: 	movq	%rcx, %rax
    00002eae: 	subq	%rbp, %rax
    00002eb1: 	cmpq	$0x8, %rax
    00002eb5: 	jle	.Ltmp2343 # Offset: 11957
    00002ebb: 	movq	(%rbp), %rdi
    00002ebf: 	movq	%rcx, %r9
    00002ec2: 	movq	%rbp, %rdx
.Ltmp2348:
    00002ec5: 	movq	-0x8(%r9), %r11
    00002ec9: 	leaq	-0x8(%r9), %r10
    00002ecd: 	cmpq	%r11, %rdi
    00002ed0: 	jb	.Ltmp2344 # Offset: 11984
    00002ed2: 	cmpq	%rdx, %r10
    00002ed5: 	jbe	.Ltmp2345 # Offset: 11989
    00002ed7: 	movq	(%rdx), %rsi
    00002eda: 	cmpq	%rsi, %rdi
    00002edd: 	jbe	.Ltmp2346 # Offset: 11997
    00002edf: 	leaq	0x8(%rdx), %rax
    00002ee3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2347:
    00002ee8: 	movq	%rax, %rdx
    00002eeb: 	movq	(%rax), %rsi
    00002eee: 	leaq	0x8(%rax), %rax
    00002ef2: 	cmpq	%rsi, %rdi
    00002ef5: 	ja	.Ltmp2347 # Offset: 12021
    00002ef7: 	cmpq	%rdx, %r10
    00002efa: 	jbe	.Ltmp2345 # Offset: 12026
.Ltmp2346:
    00002efc: 	movq	%rsi, (%r10)
    00002eff: 	movq	%r11, (%rdx)
.Ltmp2344:
    00002f02: 	movq	%r10, %r9
    00002f05: 	jmp	.Ltmp2348 # Offset: 12037
.Ltmp2345:
    00002f07: 	movq	%r9, %rsi
    00002f0a: 	movq	%rbp, %rdi
    00002f0d: 	movq	%r8, 0xa8(%rsp)
    00002f15: 	movq	%rcx, 0x98(%rsp)
    00002f1d: 	movq	%r9, 0xa0(%rsp)
    00002f25: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 12069
    00002f2a: 	movq	0x98(%rsp), %rsi
    00002f32: 	movq	0xa0(%rsp), %rdi
    00002f3a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S8_ # Offset: 12090
    00002f3f: 	movq	0xa8(%rsp), %r8
    00002f47: 	movq	0x98(%rsp), %rcx
.Ltmp2343:
    00002f4f: 	movq	%r8, %rax
    00002f52: 	movq	%rcx, %r10
    00002f55: 	subq	%rcx, %rax
    00002f58: 	cmpq	$0x8, %rax
    00002f5c: 	jle	.Ltmp2268 # Offset: 12124
    00002f62: 	movq	(%rcx), %rsi
    00002f65: 	movq	%r8, %r9
.Ltmp2353:
    00002f68: 	movq	-0x8(%r9), %r11
    00002f6c: 	leaq	-0x8(%r9), %rdi
    00002f70: 	cmpq	%r11, %rsi
    00002f73: 	jb	.Ltmp2349 # Offset: 12147
    00002f75: 	cmpq	%rcx, %rdi
    00002f78: 	jbe	.Ltmp2350 # Offset: 12152
    00002f7e: 	movq	(%rcx), %rdx
    00002f81: 	cmpq	%rdx, %rsi
    00002f84: 	jbe	.Ltmp2351 # Offset: 12164
    00002f86: 	leaq	0x8(%rcx), %rax
    00002f8a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2352:
    00002f90: 	movq	%rax, %rcx
    00002f93: 	movq	(%rax), %rdx
    00002f96: 	leaq	0x8(%rax), %rax
    00002f9a: 	cmpq	%rdx, %rsi
    00002f9d: 	ja	.Ltmp2352 # Offset: 12189
    00002f9f: 	cmpq	%rcx, %rdi
    00002fa2: 	jbe	.Ltmp2350 # Offset: 12194
.Ltmp2351:
    00002fa8: 	movq	%rdx, (%rdi)
    00002fab: 	movq	%r11, (%rcx)
.Ltmp2349:
    00002fae: 	movq	%rdi, %r9
    00002fb1: 	jmp	.Ltmp2353 # Offset: 12209
.Ltmp2239:
    00002fb3: 	movq	0x8(%rsp), %rcx
    00002fb8: 	xorl	%eax, %eax
    00002fba: 	subq	%r13, %rcx
.Ltmp2354:
    00002fbd: 	movq	(%r13,%rax), %rdx
    00002fc2: 	movq	%rdx, (%rbp,%rax)
    00002fc7: 	addq	$0x8, %rax
    00002fcb: 	cmpq	%rcx, %rax
    00002fce: 	jne	.Ltmp2354 # Offset: 12238
    00002fd0: 	jmp	.Ltmp2238 # Offset: 12240
.Ltmp2217:
    00002fd5: 	movq	0x8(%rsp), %rcx
    00002fda: 	xorl	%eax, %eax
    00002fdc: 	subq	%r13, %rcx
.Ltmp2355:
    00002fdf: 	movq	(%r13,%rax), %rdx
    00002fe4: 	movq	%rdx, (%rbp,%rax)
    00002fe9: 	addq	$0x8, %rax
    00002fed: 	cmpq	%rax, %rcx
    00002ff0: 	jne	.Ltmp2355 # Offset: 12272
    00002ff2: 	jmp	.Ltmp2216 # Offset: 12274
.Ltmp2156:
    00002ff7: 	movq	0x8(%rsp), %rcx
    00002ffc: 	xorl	%eax, %eax
    00002ffe: 	subq	%r13, %rcx
.Ltmp2356:
    00003001: 	movq	(%r13,%rax), %rdx
    00003006: 	movq	%rdx, (%rbp,%rax)
    0000300b: 	addq	$0x8, %rax
    0000300f: 	cmpq	%rcx, %rax
    00003012: 	jne	.Ltmp2356 # Offset: 12306
    00003014: 	jmp	.Ltmp2155 # Offset: 12308
.Ltmp2130:
    00003019: 	movq	0x8(%rsp), %rcx
    0000301e: 	xorl	%eax, %eax
    00003020: 	subq	%r13, %rcx
.Ltmp2357:
    00003023: 	movq	(%r13,%rax), %rdx
    00003028: 	movq	%rdx, (%rbp,%rax)
    0000302d: 	addq	$0x8, %rax
    00003031: 	cmpq	%rax, %rcx
    00003034: 	jne	.Ltmp2357 # Offset: 12340
    00003036: 	jmp	.Ltmp2129 # Offset: 12342
.Ltmp2195:
    0000303b: 	movq	0x8(%rsp), %rcx
    00003040: 	xorl	%eax, %eax
    00003042: 	subq	%r13, %rcx
.Ltmp2358:
    00003045: 	movq	(%r13,%rax), %rdx
    0000304a: 	movq	%rdx, (%rbp,%rax)
    0000304f: 	addq	$0x8, %rax
    00003053: 	cmpq	%rcx, %rax
    00003056: 	jne	.Ltmp2358 # Offset: 12374
    00003058: 	jmp	.Ltmp2194 # Offset: 12376
.Ltmp2106:
    0000305d: 	movq	0x8(%rsp), %rcx
    00003062: 	xorl	%eax, %eax
    00003064: 	subq	%r13, %rcx
.Ltmp2359:
    00003067: 	movq	(%r13,%rax), %rdx
    0000306c: 	movq	%rdx, (%rbp,%rax)
    00003071: 	addq	$0x8, %rax
    00003075: 	cmpq	%rax, %rcx
    00003078: 	jne	.Ltmp2359 # Offset: 12408
    0000307a: 	jmp	.Ltmp2105 # Offset: 12410
.Ltmp2087:
    0000307f: 	xorl	%eax, %eax
    00003081: 	jmp	.Ltmp2090 # Offset: 12417
.Ltmp2080:
    00003086: 	xorl	%eax, %eax
    00003088: 	jmp	.Ltmp2360 # Offset: 12424
.Ltmp2088:
    0000308d: 	xorl	%eax, %eax
    0000308f: 	jmp	.Ltmp2361 # Offset: 12431
.Ltmp2072:
    00003094: 	xorl	%eax, %eax
    00003096: 	jmp	.Ltmp2362 # Offset: 12438
.Ltmp2058:
    0000309b: 	xorl	%eax, %eax
    0000309d: 	jmp	.Ltmp2363 # Offset: 12445
.Ltmp2046:
    000030a2: 	subsd	DATAat0x15650(%rip), %xmm0
    000030aa: 	cvttsd2si	%xmm0, %rcx
    000030af: 	btcq	$0x3f, %rcx
    000030b4: 	jmp	.Ltmp2364 # Offset: 12468
.Ltmp2044:
    000030b9: 	subsd	DATAat0x15650(%rip), %xmm0
    000030c1: 	cvttsd2si	%xmm0, %rax
    000030c6: 	btcq	$0x3f, %rax
    000030cb: 	jmp	.Ltmp2365 # Offset: 12491
.Ltmp2256:
    000030d0: 	callq	__stack_chk_fail@PLT # Offset: 12496
    000030d5: 	endbr64
.Ltmp2367:
    000030d9: 	movq	%rax, %rbx
    000030dc: 	jmp	.Ltmp2366 # Offset: 12508
    000030de: 	endbr64
    000030e2: 	jmp	.Ltmp2367 # Offset: 12514
    000030e4: 	endbr64
    000030e8: 	jmp	.Ltmp2367 # Offset: 12520
    000030ea: 	endbr64
    000030ee: 	jmp	.Ltmp2367 # Offset: 12526
    000030f0: 	endbr64
    000030f4: 	jmp	.Ltmp2367 # Offset: 12532
    000030f6: 	endbr64
    000030fa: 	jmp	.Ltmp2367 # Offset: 12538
.Ltmp2366:
    000030fc: 	movq	0x1c0(%rsp), %rdi
    00003104: 	cmpq	0x10(%rsp), %rdi
    00003109: 	je	.Ltmp2368 # Offset: 12553
    0000310b: 	movq	0x1d0(%rsp), %rax
    00003113: 	leaq	0x1(%rax), %rsi
    00003117: 	callq	_ZdlPvm@PLT # Offset: 12567
.Ltmp2368:
    0000311c: 	movq	0x1a0(%rsp), %rdi
    00003124: 	leaq	0x1b0(%rsp), %rax
    0000312c: 	cmpq	%rax, %rdi
    0000312f: 	je	.Ltmp2369 # Offset: 12591
    00003131: 	movq	0x1b0(%rsp), %rax
    00003139: 	leaq	0x1(%rax), %rsi
    0000313d: 	callq	_ZdlPvm@PLT # Offset: 12605
.Ltmp2369:
    00003142: 	movq	0x180(%rsp), %rdi
    0000314a: 	leaq	0x190(%rsp), %rax
    00003152: 	cmpq	%rax, %rdi
    00003155: 	je	.Ltmp2370 # Offset: 12629
    00003157: 	movq	0x190(%rsp), %rax
    0000315f: 	leaq	0x1(%rax), %rsi
    00003163: 	callq	_ZdlPvm@PLT # Offset: 12643
.Ltmp2370:
    00003168: 	movq	0x120(%rsp), %rdi
    00003170: 	movq	0x130(%rsp), %rsi
    00003178: 	subq	%rdi, %rsi
    0000317b: 	testq	%rdi, %rdi
    0000317e: 	je	.Ltmp2371 # Offset: 12670
    00003180: 	callq	_ZdlPvm@PLT # Offset: 12672
.Ltmp2371:
    00003185: 	movq	0x160(%rsp), %rdi
    0000318d: 	leaq	0x170(%rsp), %rax
    00003195: 	cmpq	%rax, %rdi
    00003198: 	je	.Ltmp2372 # Offset: 12696
    0000319a: 	movq	0x170(%rsp), %rax
    000031a2: 	leaq	0x1(%rax), %rsi
    000031a6: 	callq	_ZdlPvm@PLT # Offset: 12710
.Ltmp2372:
    000031ab: 	movq	%rbx, %rbp
.Ltmp2383:
    000031ae: 	movq	0x100(%rsp), %rdi
    000031b6: 	movq	0x110(%rsp), %rsi
    000031be: 	subq	%rdi, %rsi
    000031c1: 	testq	%rdi, %rdi
    000031c4: 	je	.Ltmp2373 # Offset: 12740
    000031c6: 	callq	_ZdlPvm@PLT # Offset: 12742
.Ltmp2373:
    000031cb: 	movq	0x140(%rsp), %rdi
    000031d3: 	leaq	0x150(%rsp), %rax
    000031db: 	cmpq	%rax, %rdi
    000031de: 	je	.Ltmp2374 # Offset: 12766
    000031e0: 	movq	0x150(%rsp), %rax
    000031e8: 	leaq	0x1(%rax), %rsi
    000031ec: 	callq	_ZdlPvm@PLT # Offset: 12780
.Ltmp2374:
    000031f1: 	movq	%rbp, %rdi
    000031f4: 	callq	_Unwind_Resume@PLT # Offset: 12788
    000031f9: 	endbr64
    000031fd: 	jmp	.Ltmp2367 # Offset: 12797
    00003202: 	endbr64
    00003206: 	movq	%rax, %rbx
    00003209: 	jmp	.Ltmp2368 # Offset: 12809
    0000320e: 	endbr64
.Ltmp2376:
    00003212: 	movq	%rax, %rbx
    00003215: 	jmp	.Ltmp2375 # Offset: 12821
    00003217: 	endbr64
    0000321b: 	jmp	.Ltmp2376 # Offset: 12827
    0000321d: 	endbr64
    00003221: 	jmp	.Ltmp2376 # Offset: 12833
    00003223: 	endbr64
    00003227: 	jmp	.Ltmp2376 # Offset: 12839
.Ltmp2375:
    00003229: 	movq	0x1c0(%rsp), %rdi
    00003231: 	cmpq	0x10(%rsp), %rdi
    00003236: 	je	.Ltmp2369 # Offset: 12854
    0000323c: 	movq	0x1d0(%rsp), %rax
    00003244: 	leaq	0x1(%rax), %rsi
    00003248: 	callq	_ZdlPvm@PLT # Offset: 12872
    0000324d: 	jmp	.Ltmp2369 # Offset: 12877
    00003252: 	endbr64
    00003256: 	jmp	.Ltmp2376 # Offset: 12886
    00003258: 	endbr64
    0000325c: 	jmp	.Ltmp2376 # Offset: 12892
    0000325e: 	endbr64
    00003262: 	movq	%rax, %rbx
    00003265: 	jmp	.Ltmp2369 # Offset: 12901
    0000326a: 	endbr64
.Ltmp2378:
    0000326e: 	movq	%rax, %rbx
    00003271: 	jmp	.Ltmp2377 # Offset: 12913
    00003276: 	endbr64
    0000327a: 	movq	%rax, %rbx
    0000327d: 	jmp	.Ltmp2371 # Offset: 12925
    00003282: 	endbr64
    00003286: 	jmp	.Ltmp2378 # Offset: 12934
    00003288: 	endbr64
    0000328c: 	jmp	.Ltmp2378 # Offset: 12940
    0000328e: 	endbr64
    00003292: 	movq	%rax, %rbx
    00003295: 	jmp	.Ltmp2379 # Offset: 12949
    00003297: 	endbr64
    0000329b: 	movq	%rax, %rbx
    0000329e: 	jmp	.Ltmp2370 # Offset: 12958
.Ltmp2379:
    000032a3: 	movq	0x1c0(%rsp), %rdi
    000032ab: 	leaq	0x1d0(%rsp), %rax
    000032b3: 	cmpq	%rax, %rdi
    000032b6: 	je	.Ltmp2370 # Offset: 12982
.Ltmp2385:
    000032bc: 	movq	0x1d0(%rsp), %rax
    000032c4: 	leaq	0x1(%rax), %rsi
    000032c8: 	callq	_ZdlPvm@PLT # Offset: 13000
    000032cd: 	jmp	.Ltmp2370 # Offset: 13005
    000032d2: 	endbr64
    000032d6: 	jmp	.Ltmp2378 # Offset: 13014
    000032d8: 	endbr64
    000032dc: 	jmp	.Ltmp2378 # Offset: 13020
    000032de: 	endbr64
.Ltmp2381:
    000032e2: 	movq	%rax, %rbp
    000032e5: 	jmp	.Ltmp2380 # Offset: 13029
    000032e7: 	endbr64
    000032eb: 	jmp	.Ltmp2381 # Offset: 13035
    000032ed: 	endbr64
    000032f1: 	movq	%rax, %rbp
    000032f4: 	jmp	.Ltmp2382 # Offset: 13044
    000032f6: 	endbr64
    000032fa: 	movq	%rax, %rbp
    000032fd: 	jmp	.Ltmp2383 # Offset: 13053
.Ltmp2380:
    00003302: 	movq	0x4060(%rsp), %rdi
    0000330a: 	cmpq	0x10(%rsp), %rdi
    0000330f: 	je	.Ltmp2383 # Offset: 13071
.Ltmp2384:
    00003315: 	movq	0x4070(%rsp), %rax
    0000331d: 	leaq	0x1(%rax), %rsi
    00003321: 	callq	_ZdlPvm@PLT # Offset: 13089
    00003326: 	jmp	.Ltmp2383 # Offset: 13094
.Ltmp2382:
    0000332b: 	movq	0x4060(%rsp), %rdi
    00003333: 	leaq	0x4070(%rsp), %rax
    0000333b: 	cmpq	%rax, %rdi
    0000333e: 	jne	.Ltmp2384 # Offset: 13118
    00003340: 	jmp	.Ltmp2383 # Offset: 13120
    00003345: 	endbr64
    00003349: 	jmp	.Ltmp2381 # Offset: 13129
    0000334b: 	endbr64
    0000334f: 	jmp	.Ltmp2381 # Offset: 13135
    00003351: 	endbr64
    00003355: 	jmp	.Ltmp2381 # Offset: 13141
.Ltmp2377:
    00003357: 	movq	0x1c0(%rsp), %rdi
    0000335f: 	cmpq	0x10(%rsp), %rdi
    00003364: 	jne	.Ltmp2385 # Offset: 13156
    0000336a: 	jmp	.Ltmp2370 # Offset: 13162
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_fini" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x14000
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x14000
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 96 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 981 instructions were shortened
BOLT-INFO: removed 279 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 89 out of 124 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x202d18
