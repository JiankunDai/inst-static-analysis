BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0xa018, which lies outside .bss
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x9fe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 2
  State       : disassembled
  Address     : 0x1160
  Size        : 0x1668
  MaxSize     : 0x1670
  Offset      : 0x1160
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB01:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	testl	%edi, %edi
    00000014: 	jle	.Ltmp1 # Offset: 20
    0000001a: 	leal	-0x1(%rdi), %eax
    0000001d: 	movl	%edi, %ebp
    0000001f: 	movq	%rsi, %rbx
    00000022: 	movq	%rsi, %r12
    00000025: 	leaq	0x8(%rsi,%rax,8), %r14
    0000002a: 	leaq	DATAat0x79d0(%rip), %r13
.Ltmp2:
    00000031: 	movq	(%r12), %rdx
    00000035: 	movq	%r13, %rsi
    00000038: 	movl	$0x1, %edi
    0000003d: 	xorl	%eax, %eax
    0000003f: 	addq	$0x8, %r12
    00000043: 	callq	__printf_chk@PLT # Offset: 67
    00000048: 	cmpq	%r14, %r12
    0000004b: 	jne	.Ltmp2 # Offset: 75
    0000004d: 	xorl	%eax, %eax
    0000004f: 	leaq	DATAat0x79b6(%rip), %rsi
    00000056: 	movl	$0x1, %edi
    0000005b: 	callq	__printf_chk@PLT # Offset: 91
    00000060: 	cmpl	$0x1, %ebp
    00000063: 	jg	.Ltmp3 # Offset: 99
.Ltmp101:
    00000069: 	movd	init_value(%rip), %xmm6
    00000071: 	leaq	data32_B(%rip), %rbp
    00000078: 	movq	%rbp, %rax
    0000007b: 	pshufd	$0x0, %xmm6, %xmm0
.Ltmp4:
    00000080: 	movaps	%xmm0, (%rax)
    00000083: 	leaq	DATAat0x1313b0(%rip), %rbx
    0000008a: 	addq	$0x10, %rax
    0000008e: 	cmpq	%rbx, %rax
    00000091: 	jne	.Ltmp4 # Offset: 145
    00000093: 	callq	clock@PLT # Offset: 147
    00000098: 	leaq	end_time(%rip), %rcx
    0000009f: 	xorl	%ebx, %ebx
    000000a1: 	leaq	DATAat0x79d4(%rip), %r12
    000000a8: 	movq	%rax, start_time(%rip)
    000000af: 	movl	iterations(%rip), %eax
    000000b5: 	movq	%rcx, %r13
    000000b8: 	testl	%eax, %eax
    000000ba: 	jle	.Ltmp5 # Offset: 186
.Ltmp12:
    000000c0: 	movl	init_value(%rip), %edi
    000000c6: 	leaq	data32_A(%rip), %rsi
    000000cd: 	movq	%rsi, %r15
    000000d0: 	movq	%rsi, %rax
    000000d3: 	movd	%edi, %xmm5
    000000d7: 	pshufd	$0x0, %xmm5, %xmm0
.Ltmp6:
    000000dc: 	movaps	%xmm0, (%rax)
    000000df: 	addq	$0x10, %rax
    000000e3: 	cmpq	%r13, %rax
    000000e6: 	jne	.Ltmp6 # Offset: 230
    000000e8: 	leaq	data32_A(%rip), %rdx
.Ltmp8:
    000000ef: 	movdqa	(%rdx), %xmm0
    000000f3: 	movq	%rbp, %rax
.Ltmp7:
    000000f6: 	movd	(%rax), %xmm5
    000000fa: 	leaq	DATAat0x1313b0(%rip), %rcx
    00000101: 	addq	$0x4, %rax
    00000105: 	pshufd	$0x0, %xmm5, %xmm1
    0000010a: 	paddd	%xmm1, %xmm0
    0000010e: 	cmpq	%rcx, %rax
    00000111: 	jne	.Ltmp7 # Offset: 273
    00000113: 	movaps	%xmm0, (%rdx)
    00000116: 	addq	$0x10, %rdx
    0000011a: 	cmpq	%r13, %rdx
    0000011d: 	jne	.Ltmp8 # Offset: 285
    0000011f: 	imull	$0x12d, %edi, %edi
    00000125: 	jmp	.Ltmp9 # Offset: 293
.Ltmp11:
    00000127: 	addq	$0x4, %rsi
    0000012b: 	cmpq	%r13, %rsi
    0000012e: 	je	.Ltmp10 # Offset: 302
.Ltmp9:
    00000130: 	cmpl	(%rsi), %edi
    00000132: 	je	.Ltmp11 # Offset: 306
    00000134: 	movl	current_test(%rip), %edx
    0000013a: 	movq	%r12, %rsi
    0000013d: 	movl	$0x1, %edi
    00000142: 	xorl	%eax, %eax
    00000144: 	callq	__printf_chk@PLT # Offset: 324
.Ltmp10:
    00000149: 	addl	$0x1, %ebx
    0000014c: 	cmpl	iterations(%rip), %ebx
    00000152: 	jl	.Ltmp12 # Offset: 338
.Ltmp102:
    00000158: 	callq	clock@PLT # Offset: 344
    0000015d: 	leaq	DATAat0x7118(%rip), %rdi
    00000164: 	pxor	%xmm0, %xmm0
    00000168: 	xorl	%ebx, %ebx
    0000016a: 	movq	%rax, end_time(%rip)
    00000171: 	subq	start_time(%rip), %rax
    00000178: 	leaq	DATAat0x79d4(%rip), %r12
    0000017f: 	cvtsi2sd	%rax, %xmm0
    00000184: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000018c: 	callq	_Z13record_resultdPKc # Offset: 396
    00000191: 	leaq	DATAat0x7150(%rip), %rdx
    00000198: 	movq	%rbp, %rsi
    0000019b: 	movq	%r15, %rdi
    0000019e: 	callq	_Z25test_array_reduction_opt2IiEvPT_PKS0_PKc # Offset: 414
    000001a3: 	leaq	DATAat0x7188(%rip), %rdx
    000001aa: 	movq	%rbp, %rsi
    000001ad: 	movq	%r15, %rdi
    000001b0: 	callq	_Z25test_array_reduction_opt3IiEvPT_PKS0_PKc # Offset: 432
    000001b5: 	leaq	DATAat0x71c0(%rip), %rdx
    000001bc: 	movq	%rbp, %rsi
    000001bf: 	movq	%r15, %rdi
    000001c2: 	callq	_Z25test_array_reduction_opt4IiEvPT_PKS0_PKc # Offset: 450
    000001c7: 	callq	clock@PLT # Offset: 455
    000001cc: 	leaq	end_time(%rip), %rcx
    000001d3: 	movq	%rax, start_time(%rip)
    000001da: 	movl	iterations(%rip), %eax
    000001e0: 	movq	%rcx, %r13
    000001e3: 	testl	%eax, %eax
    000001e5: 	jle	.Ltmp13 # Offset: 485
.Ltmp20:
    000001eb: 	movl	init_value(%rip), %edi
    000001f1: 	leaq	data32_A(%rip), %rsi
    000001f8: 	movq	%rsi, %r15
    000001fb: 	movq	%rsi, %rax
    000001fe: 	movd	%edi, %xmm6
    00000202: 	pshufd	$0x0, %xmm6, %xmm0
.Ltmp14:
    00000207: 	movaps	%xmm0, (%rax)
    0000020a: 	addq	$0x10, %rax
    0000020e: 	cmpq	%r13, %rax
    00000211: 	jne	.Ltmp14 # Offset: 529
    00000213: 	leaq	data32_A(%rip), %rdx
.Ltmp16:
    0000021a: 	movdqa	(%rdx), %xmm0
    0000021e: 	movq	%rbp, %rax
.Ltmp15:
    00000221: 	movd	(%rax), %xmm6
    00000225: 	leaq	DATAat0x1313b0(%rip), %rcx
    0000022c: 	addq	$0x4, %rax
    00000230: 	pshufd	$0x0, %xmm6, %xmm1
    00000235: 	paddd	%xmm1, %xmm0
    00000239: 	cmpq	%rcx, %rax
    0000023c: 	jne	.Ltmp15 # Offset: 572
    0000023e: 	movaps	%xmm0, (%rdx)
    00000241: 	addq	$0x10, %rdx
    00000245: 	cmpq	%r13, %rdx
    00000248: 	jne	.Ltmp16 # Offset: 584
    0000024a: 	imull	$0x12d, %edi, %edi
    00000250: 	jmp	.Ltmp17 # Offset: 592
.Ltmp19:
    00000252: 	addq	$0x4, %rsi
    00000256: 	cmpq	%r13, %rsi
    00000259: 	je	.Ltmp18 # Offset: 601
.Ltmp17:
    0000025b: 	cmpl	(%rsi), %edi
    0000025d: 	je	.Ltmp19 # Offset: 605
    0000025f: 	movl	current_test(%rip), %edx
    00000265: 	movq	%r12, %rsi
    00000268: 	movl	$0x1, %edi
    0000026d: 	xorl	%eax, %eax
    0000026f: 	callq	__printf_chk@PLT # Offset: 623
.Ltmp18:
    00000274: 	addl	$0x1, %ebx
    00000277: 	cmpl	iterations(%rip), %ebx
    0000027d: 	jl	.Ltmp20 # Offset: 637
.Ltmp13:
    00000283: 	callq	clock@PLT # Offset: 643
    00000288: 	leaq	DATAat0x71f8(%rip), %r12
    0000028f: 	pxor	%xmm0, %xmm0
    00000293: 	leaq	data64_B(%rip), %rbx
    0000029a: 	movq	%rax, end_time(%rip)
    000002a1: 	movq	%r12, %rdi
    000002a4: 	subq	start_time(%rip), %rax
    000002ab: 	cvtsi2sd	%rax, %xmm0
    000002b0: 	divsd	DATAat0x79f8(%rip), %xmm0
    000002b8: 	callq	_Z13record_resultdPKc # Offset: 696
    000002bd: 	movl	iterations(%rip), %edx
    000002c3: 	xorl	%r8d, %r8d
    000002c6: 	xorl	%ecx, %ecx
    000002c8: 	movl	$0xea60, %esi
    000002cd: 	movq	%r12, %rdi
    000002d0: 	callq	_Z9summarizePKciiii # Offset: 720
    000002d5: 	movslq	init_value(%rip), %rax
    000002dc: 	movq	%rax, %xmm0
    000002e1: 	movq	%rbx, %rax
    000002e4: 	punpcklqdq	%xmm0, %xmm0
.Ltmp21:
    000002e8: 	movaps	%xmm0, (%rax)
    000002eb: 	leaq	data64_A(%rip), %rdi
    000002f2: 	addq	$0x10, %rax
    000002f6: 	cmpq	%rax, %rdi
    000002f9: 	jne	.Ltmp21 # Offset: 761
    000002fb: 	callq	clock@PLT # Offset: 763
    00000300: 	movl	iterations(%rip), %r14d
    00000307: 	xorl	%r12d, %r12d
    0000030a: 	leaq	data32_Matrix(%rip), %rcx
    00000311: 	movq	%rax, start_time(%rip)
    00000318: 	leaq	DATAat0x79d4(%rip), %r13
    0000031f: 	testl	%r14d, %r14d
    00000322: 	jle	.Ltmp22 # Offset: 802
    00000328: 	movq	%r15, 0x8(%rsp)
    0000032d: 	movl	%r12d, %r14d
    00000330: 	movq	%rcx, %r12
.Ltmp29:
    00000333: 	movslq	init_value(%rip), %rax
    0000033a: 	leaq	data64_A(%rip), %rsi
    00000341: 	movq	%rsi, %r15
    00000344: 	movq	%rax, %xmm0
    00000349: 	movq	%rax, %rcx
    0000034c: 	movq	%rsi, %rax
    0000034f: 	punpcklqdq	%xmm0, %xmm0
.Ltmp23:
    00000353: 	movaps	%xmm0, (%rax)
    00000356: 	addq	$0x10, %rax
    0000035a: 	cmpq	%rax, %r12
    0000035d: 	jne	.Ltmp23 # Offset: 861
    0000035f: 	leaq	data64_A(%rip), %rdx
.Ltmp25:
    00000366: 	movdqa	(%rdx), %xmm0
    0000036a: 	movq	%rbx, %rax
.Ltmp24:
    0000036d: 	movq	(%rax), %xmm1
    00000371: 	leaq	data64_A(%rip), %rdi
    00000378: 	addq	$0x8, %rax
    0000037c: 	punpcklqdq	%xmm1, %xmm1
    00000380: 	paddq	%xmm1, %xmm0
    00000384: 	cmpq	%rdi, %rax
    00000387: 	jne	.Ltmp24 # Offset: 903
    00000389: 	movaps	%xmm0, (%rdx)
    0000038c: 	addq	$0x10, %rdx
    00000390: 	cmpq	%rdx, %r12
    00000393: 	jne	.Ltmp25 # Offset: 915
    00000395: 	imull	$0x12d, %ecx, %eax
    0000039b: 	cltq
    0000039d: 	jmp	.Ltmp26 # Offset: 925
.Ltmp28:
    0000039f: 	addq	$0x8, %rsi
    000003a3: 	cmpq	%rsi, %r12
    000003a6: 	je	.Ltmp27 # Offset: 934
.Ltmp26:
    000003a8: 	cmpq	(%rsi), %rax
    000003ab: 	je	.Ltmp28 # Offset: 939
    000003ad: 	movl	current_test(%rip), %edx
    000003b3: 	movq	%r13, %rsi
    000003b6: 	movl	$0x1, %edi
    000003bb: 	xorl	%eax, %eax
    000003bd: 	callq	__printf_chk@PLT # Offset: 957
.Ltmp27:
    000003c2: 	addl	$0x1, %r14d
    000003c6: 	cmpl	iterations(%rip), %r14d
    000003cd: 	jl	.Ltmp29 # Offset: 973
    000003d3: 	movq	%r15, %r14
    000003d6: 	movq	0x8(%rsp), %r15
.Ltmp103:
    000003db: 	callq	clock@PLT # Offset: 987
    000003e0: 	leaq	DATAat0x7228(%rip), %rdi
    000003e7: 	pxor	%xmm0, %xmm0
    000003eb: 	xorl	%r12d, %r12d
    000003ee: 	movq	%rax, end_time(%rip)
    000003f5: 	subq	start_time(%rip), %rax
    000003fc: 	leaq	DATAat0x79d4(%rip), %r13
    00000403: 	cvtsi2sd	%rax, %xmm0
    00000408: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000410: 	callq	_Z13record_resultdPKc # Offset: 1040
    00000415: 	leaq	DATAat0x7260(%rip), %rdx
    0000041c: 	movq	%rbx, %rsi
    0000041f: 	movq	%r14, %rdi
    00000422: 	callq	_Z25test_array_reduction_opt2ImEvPT_PKS0_PKc # Offset: 1058
    00000427: 	leaq	DATAat0x7298(%rip), %rdx
    0000042e: 	movq	%rbx, %rsi
    00000431: 	movq	%r14, %rdi
    00000434: 	callq	_Z25test_array_reduction_opt3ImEvPT_PKS0_PKc # Offset: 1076
    00000439: 	leaq	DATAat0x72d0(%rip), %rdx
    00000440: 	movq	%rbx, %rsi
    00000443: 	movq	%r14, %rdi
    00000446: 	callq	_Z25test_array_reduction_opt4ImEvPT_PKS0_PKc # Offset: 1094
    0000044b: 	callq	clock@PLT # Offset: 1099
    00000450: 	movl	iterations(%rip), %r11d
    00000457: 	leaq	data32_Matrix(%rip), %rcx
    0000045e: 	movq	%rax, start_time(%rip)
    00000465: 	testl	%r11d, %r11d
    00000468: 	jle	.Ltmp30 # Offset: 1128
    0000046e: 	movq	%r15, 0x8(%rsp)
    00000473: 	movl	%r12d, %r14d
    00000476: 	movq	%rcx, %r12
.Ltmp37:
    00000479: 	movslq	init_value(%rip), %rax
    00000480: 	leaq	data64_A(%rip), %rsi
    00000487: 	movq	%rsi, %r15
    0000048a: 	movq	%rax, %xmm0
    0000048f: 	movq	%rax, %rcx
    00000492: 	movq	%rsi, %rax
    00000495: 	punpcklqdq	%xmm0, %xmm0
.Ltmp31:
    00000499: 	movaps	%xmm0, (%rax)
    0000049c: 	addq	$0x10, %rax
    000004a0: 	cmpq	%rax, %r12
    000004a3: 	jne	.Ltmp31 # Offset: 1187
    000004a5: 	leaq	data64_A(%rip), %rdx
.Ltmp33:
    000004ac: 	movdqa	(%rdx), %xmm0
    000004b0: 	movq	%rbx, %rax
.Ltmp32:
    000004b3: 	movq	(%rax), %xmm1
    000004b7: 	leaq	data64_A(%rip), %rdi
    000004be: 	addq	$0x8, %rax
    000004c2: 	punpcklqdq	%xmm1, %xmm1
    000004c6: 	paddq	%xmm1, %xmm0
    000004ca: 	cmpq	%rax, %rdi
    000004cd: 	jne	.Ltmp32 # Offset: 1229
    000004cf: 	movaps	%xmm0, (%rdx)
    000004d2: 	addq	$0x10, %rdx
    000004d6: 	cmpq	%rdx, %r12
    000004d9: 	jne	.Ltmp33 # Offset: 1241
    000004db: 	imull	$0x12d, %ecx, %eax
    000004e1: 	cltq
    000004e3: 	jmp	.Ltmp34 # Offset: 1251
.Ltmp36:
    000004e5: 	addq	$0x8, %rsi
    000004e9: 	cmpq	%rsi, %r12
    000004ec: 	je	.Ltmp35 # Offset: 1260
.Ltmp34:
    000004ee: 	cmpq	(%rsi), %rax
    000004f1: 	je	.Ltmp36 # Offset: 1265
    000004f3: 	movl	current_test(%rip), %edx
    000004f9: 	movq	%r13, %rsi
    000004fc: 	movl	$0x1, %edi
    00000501: 	xorl	%eax, %eax
    00000503: 	callq	__printf_chk@PLT # Offset: 1283
.Ltmp35:
    00000508: 	addl	$0x1, %r14d
    0000050c: 	cmpl	iterations(%rip), %r14d
    00000513: 	jl	.Ltmp37 # Offset: 1299
    00000519: 	movq	%r15, %r14
    0000051c: 	movq	0x8(%rsp), %r15
.Ltmp30:
    00000521: 	callq	clock@PLT # Offset: 1313
    00000526: 	leaq	DATAat0x7308(%rip), %r12
    0000052d: 	pxor	%xmm0, %xmm0
    00000531: 	movq	%rax, end_time(%rip)
    00000538: 	movq	%r12, %rdi
    0000053b: 	subq	start_time(%rip), %rax
    00000542: 	cvtsi2sd	%rax, %xmm0
    00000547: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000054f: 	callq	_Z13record_resultdPKc # Offset: 1359
    00000554: 	movl	iterations(%rip), %edx
    0000055a: 	xorl	%r8d, %r8d
    0000055d: 	xorl	%ecx, %ecx
    0000055f: 	movl	$0xea60, %esi
    00000564: 	movq	%r12, %rdi
    00000567: 	callq	_Z9summarizePKciiii # Offset: 1383
    0000056c: 	pxor	%xmm0, %xmm0
    00000570: 	leaq	dataDouble_B(%rip), %rax
    00000577: 	cvtsi2sdl	init_value(%rip), %xmm0
    0000057f: 	movq	%rax, 0x18(%rsp)
    00000584: 	movq	%rax, %r13
    00000587: 	unpcklpd	%xmm0, %xmm0
.Ltmp38:
    0000058b: 	movaps	%xmm0, (%rax)
    0000058e: 	leaq	dataDouble_A(%rip), %rdi
    00000595: 	addq	$0x10, %rax
    00000599: 	cmpq	%rdi, %rax
    0000059c: 	jne	.Ltmp38 # Offset: 1436
    0000059e: 	leaq	dataDouble_A(%rip), %r12
    000005a5: 	leaq	DATAat0x7338(%rip), %rdx
    000005ac: 	movq	%r13, %rsi
    000005af: 	movq	%r12, %rdi
    000005b2: 	callq	_Z25test_array_reduction_opt1IdEvPT_PKS0_PKc # Offset: 1458
    000005b7: 	leaq	DATAat0x7370(%rip), %rdx
    000005be: 	movq	%r13, %rsi
    000005c1: 	movq	%r12, %rdi
    000005c4: 	callq	_Z25test_array_reduction_opt2IdEvPT_PKS0_PKc # Offset: 1476
    000005c9: 	leaq	DATAat0x73a8(%rip), %rdx
    000005d0: 	movq	%r13, %rsi
    000005d3: 	movq	%r12, %rdi
    000005d6: 	callq	_Z25test_array_reduction_opt3IdEvPT_PKS0_PKc # Offset: 1494
    000005db: 	leaq	DATAat0x73e0(%rip), %rdx
    000005e2: 	movq	%r13, %rsi
    000005e5: 	movq	%r12, %rdi
    000005e8: 	callq	_Z25test_array_reduction_opt4IdEvPT_PKS0_PKc # Offset: 1512
    000005ed: 	leaq	DATAat0x7418(%rip), %r9
    000005f4: 	movq	%r13, %rsi
    000005f7: 	movq	%r12, %rdi
    000005fa: 	movq	%r9, %rdx
    000005fd: 	callq	_Z20test_array_reductionIdEvPT_PKS0_PKc # Offset: 1533
    00000602: 	movl	iterations(%rip), %edx
    00000608: 	xorl	%r8d, %r8d
    0000060b: 	xorl	%ecx, %ecx
    0000060d: 	leaq	DATAat0x7418(%rip), %r9
    00000614: 	movl	$0xea60, %esi
    00000619: 	movq	%r9, %rdi
    0000061c: 	callq	_Z9summarizePKciiii # Offset: 1564
    00000621: 	movd	init_value(%rip), %xmm5
    00000629: 	leaq	data32_B(%rip), %rax
    00000630: 	pshufd	$0x0, %xmm5, %xmm0
.Ltmp39:
    00000635: 	movaps	%xmm0, (%rax)
    00000638: 	leaq	DATAat0x1313b0(%rip), %rdi
    0000063f: 	addq	$0x10, %rax
    00000643: 	cmpq	%rdi, %rax
    00000646: 	jne	.Ltmp39 # Offset: 1606
    00000648: 	leaq	data32_B(%rip), %rdx
    0000064f: 	leaq	-0x3a980(%rdx), %rax
.Ltmp40:
    00000656: 	movaps	%xmm0, (%rax)
    00000659: 	addq	$0x10, %rax
    0000065d: 	cmpq	%rax, %rdx
    00000660: 	jne	.Ltmp40 # Offset: 1632
    00000662: 	callq	clock@PLT # Offset: 1634
    00000667: 	movl	iterations(%rip), %r10d
    0000066e: 	movl	$0x0, 0x8(%rsp)
    00000676: 	leaq	end_time(%rip), %rcx
    0000067d: 	movq	%rax, start_time(%rip)
    00000684: 	leaq	data32_Matrix(%rip), %rax
    0000068b: 	addq	$0x320, %rax
    00000691: 	movq	%rax, 0x10(%rsp)
    00000696: 	testl	%r10d, %r10d
    00000699: 	jle	.Ltmp41 # Offset: 1689
    0000069f: 	movq	%r14, %r8
    000006a2: 	movq	%rcx, %r14
.Ltmp50:
    000006a5: 	movl	init_value(%rip), %esi
    000006ab: 	leaq	data32_A(%rip), %rax
    000006b2: 	movq	%rax, %r15
    000006b5: 	movq	%rax, %rdx
    000006b8: 	movd	%esi, %xmm6
    000006bc: 	pshufd	$0x0, %xmm6, %xmm0
.Ltmp42:
    000006c1: 	movaps	%xmm0, (%rdx)
    000006c4: 	addq	$0x10, %rdx
    000006c8: 	cmpq	%rdx, %r14
    000006cb: 	jne	.Ltmp42 # Offset: 1739
    000006cd: 	leaq	data32_Matrix(%rip), %rcx
    000006d4: 	movq	%rbp, %r9
    000006d7: 	movl	$0x1, %edi
.Ltmp44:
    000006dc: 	movd	(%r9), %xmm5
    000006e1: 	leaq	0x320(%rcx), %r11
    000006e8: 	movq	%rax, %r10
    000006eb: 	xorl	%edx, %edx
    000006ed: 	pshufd	$0x0, %xmm5, %xmm4
    000006f2: 	movd	0x4(%r9), %xmm5
    000006f8: 	movdqa	%xmm4, %xmm6
    000006fc: 	pshufd	$0x0, %xmm5, %xmm3
    00000701: 	psrlq	$0x20, %xmm6
    00000706: 	movdqa	%xmm3, %xmm5
    0000070a: 	psrlq	$0x20, %xmm5
.Ltmp43:
    0000070f: 	movdqa	(%rcx,%rdx), %xmm1
    00000714: 	movdqa	%xmm4, %xmm0
    00000718: 	movdqa	%xmm3, %xmm2
    0000071c: 	addq	$0x10, %r10
    00000720: 	pmuludq	(%rcx,%rdx), %xmm0
    00000725: 	pshufd	$0x8, %xmm0, %xmm0
    0000072a: 	pmuludq	(%r11,%rdx), %xmm2
    00000730: 	pshufd	$0x8, %xmm2, %xmm2
    00000735: 	psrlq	$0x20, %xmm1
    0000073a: 	pmuludq	%xmm6, %xmm1
    0000073e: 	pshufd	$0x8, %xmm1, %xmm1
    00000743: 	punpckldq	%xmm1, %xmm0
    00000747: 	movdqa	(%r11,%rdx), %xmm1
    0000074d: 	paddd	-0x10(%r10), %xmm0
    00000753: 	addq	$0x10, %rdx
    00000757: 	psrlq	$0x20, %xmm1
    0000075c: 	pmuludq	%xmm5, %xmm1
    00000760: 	pshufd	$0x8, %xmm1, %xmm1
    00000765: 	punpckldq	%xmm1, %xmm2
    00000769: 	paddd	%xmm2, %xmm0
    0000076d: 	movaps	%xmm0, -0x10(%r10)
    00000772: 	cmpq	$0x320, %rdx
    00000779: 	jne	.Ltmp43 # Offset: 1913
    0000077b: 	leal	0x1(%rdi), %edx
    0000077e: 	addl	$0x2, %edi
    00000781: 	addq	$0x8, %r9
    00000785: 	addq	$0x640, %rcx
    0000078c: 	cmpl	$0x12b, %edi
    00000792: 	jne	.Ltmp44 # Offset: 1938
    00000798: 	movslq	%edx, %rcx
    0000079b: 	leaq	data32_Matrix(%rip), %r11
    000007a2: 	imulq	$0x320, %rcx, %rdx
    000007a9: 	leaq	0x1(%rcx), %r10
    000007ad: 	imulq	$0x320, %r10, %r10
    000007b4: 	leaq	(%rbp,%rcx,4), %rdi
    000007b9: 	addq	0x10(%rsp), %r10
    000007be: 	addq	%r11, %rdx
.Ltmp46:
    000007c1: 	movd	(%rdi), %xmm6
    000007c5: 	movq	%rdx, %r9
    000007c8: 	movq	%rax, %rcx
    000007cb: 	pshufd	$0x0, %xmm6, %xmm2
    000007d0: 	movdqa	%xmm2, %xmm3
    000007d4: 	psrlq	$0x20, %xmm3
.Ltmp45:
    000007d9: 	movdqa	(%r9), %xmm1
    000007de: 	movdqa	%xmm2, %xmm0
    000007e2: 	addq	$0x10, %rcx
    000007e6: 	addq	$0x10, %r9
    000007ea: 	pmuludq	-0x10(%r9), %xmm0
    000007f0: 	pshufd	$0x8, %xmm0, %xmm0
    000007f5: 	psrlq	$0x20, %xmm1
    000007fa: 	pmuludq	%xmm3, %xmm1
    000007fe: 	pshufd	$0x8, %xmm1, %xmm1
    00000803: 	punpckldq	%xmm1, %xmm0
    00000807: 	paddd	-0x10(%rcx), %xmm0
    0000080c: 	movaps	%xmm0, -0x10(%rcx)
    00000810: 	cmpq	%rcx, %r14
    00000813: 	jne	.Ltmp45 # Offset: 2067
    00000815: 	addq	$0x320, %rdx
    0000081c: 	addq	$0x4, %rdi
    00000820: 	cmpq	%r10, %rdx
    00000823: 	jne	.Ltmp46 # Offset: 2083
    00000825: 	movl	%esi, %edx
    00000827: 	imull	%esi, %edx
    0000082a: 	imull	$0x12c, %edx, %edx
    00000830: 	addl	%esi, %edx
    00000832: 	jmp	.Ltmp47 # Offset: 2098
.Ltmp49:
    00000834: 	addq	$0x4, %rax
    00000838: 	cmpq	%rax, %r14
    0000083b: 	je	.Ltmp48 # Offset: 2107
.Ltmp47:
    0000083d: 	cmpl	(%rax), %edx
    0000083f: 	je	.Ltmp49 # Offset: 2111
    00000841: 	movl	current_test(%rip), %edx
    00000847: 	leaq	DATAat0x79d4(%rip), %rsi
    0000084e: 	movl	$0x1, %edi
    00000853: 	xorl	%eax, %eax
    00000855: 	movq	%r8, 0x20(%rsp)
    0000085a: 	callq	__printf_chk@PLT # Offset: 2138
    0000085f: 	movq	0x20(%rsp), %r8
.Ltmp48:
    00000864: 	addl	$0x1, 0x8(%rsp)
    00000869: 	movl	0x8(%rsp), %eax
    0000086d: 	cmpl	iterations(%rip), %eax
    00000873: 	jl	.Ltmp50 # Offset: 2163
    00000879: 	movq	%r8, %r14
.Ltmp41:
    0000087c: 	callq	clock@PLT # Offset: 2172
    00000881: 	leaq	DATAat0x7448(%rip), %rdi
    00000888: 	pxor	%xmm0, %xmm0
    0000088c: 	movq	%rax, end_time(%rip)
    00000893: 	subq	start_time(%rip), %rax
    0000089a: 	cvtsi2sd	%rax, %xmm0
    0000089f: 	divsd	DATAat0x79f8(%rip), %xmm0
    000008a7: 	callq	_Z13record_resultdPKc # Offset: 2215
    000008ac: 	leaq	DATAat0x7478(%rip), %rcx
    000008b3: 	movq	%rbp, %rsi
    000008b6: 	movq	%r15, %rdi
    000008b9: 	leaq	data32_Matrix(%rip), %rdx
    000008c0: 	callq	_Z21test_array_dmxpy_opt2IiEvPT_PKS0_PA200_S2_PKc # Offset: 2240
    000008c5: 	leaq	DATAat0x74a8(%rip), %rcx
    000008cc: 	movq	%rbp, %rsi
    000008cf: 	movq	%r15, %rdi
    000008d2: 	leaq	data32_Matrix(%rip), %rdx
    000008d9: 	callq	_Z21test_array_dmxpy_opt3IiEvPT_PKS0_PA200_S2_PKc # Offset: 2265
    000008de: 	leaq	DATAat0x74d8(%rip), %rcx
    000008e5: 	movq	%rbp, %rsi
    000008e8: 	movq	%r15, %rdi
    000008eb: 	leaq	data32_Matrix(%rip), %rdx
    000008f2: 	callq	_Z21test_array_dmxpy_opt4IiEvPT_PKS0_PA200_S2_PKc # Offset: 2290
    000008f7: 	callq	clock@PLT # Offset: 2295
    000008fc: 	movl	iterations(%rip), %r9d
    00000903: 	xorl	%r8d, %r8d
    00000906: 	leaq	end_time(%rip), %rcx
    0000090d: 	movq	%rax, start_time(%rip)
    00000914: 	testl	%r9d, %r9d
    00000917: 	jle	.Ltmp51 # Offset: 2327
    0000091d: 	movl	%r8d, %r15d
    00000920: 	movq	%r14, %r8
    00000923: 	movq	%rcx, %r14
.Ltmp58:
    00000926: 	movl	init_value(%rip), %r11d
    0000092d: 	leaq	data32_A(%rip), %rdi
    00000934: 	movq	%rdi, %rcx
    00000937: 	movq	%rdi, %rax
    0000093a: 	movd	%r11d, %xmm6
    0000093f: 	pshufd	$0x0, %xmm6, %xmm0
.Ltmp52:
    00000944: 	movaps	%xmm0, (%rax)
    00000947: 	addq	$0x10, %rax
    0000094b: 	cmpq	%rax, %r14
    0000094e: 	jne	.Ltmp52 # Offset: 2382
    00000950: 	leaq	data32_Matrix(%rip), %r10
    00000957: 	leaq	data32_A(%rip), %rsi
.Ltmp54:
    0000095e: 	movdqa	(%rsi), %xmm3
    00000962: 	movq	%r10, %rdx
    00000965: 	movq	%rbp, %rax
.Ltmp53:
    00000968: 	movd	(%rax), %xmm5
    0000096c: 	movdqa	(%rdx), %xmm2
    00000970: 	addq	$0x4, %rax
    00000974: 	leaq	DATAat0x1313b0(%rip), %r9
    0000097b: 	addq	$0x320, %rdx
    00000982: 	pshufd	$0x0, %xmm5, %xmm0
    00000987: 	psrlq	$0x20, %xmm2
    0000098c: 	movdqa	%xmm0, %xmm1
    00000990: 	psrlq	$0x20, %xmm0
    00000995: 	pmuludq	-0x320(%rdx), %xmm1
    0000099d: 	pshufd	$0x8, %xmm1, %xmm1
    000009a2: 	pmuludq	%xmm2, %xmm0
    000009a6: 	pshufd	$0x8, %xmm0, %xmm0
    000009ab: 	punpckldq	%xmm0, %xmm1
    000009af: 	paddd	%xmm1, %xmm3
    000009b3: 	cmpq	%r9, %rax
    000009b6: 	jne	.Ltmp53 # Offset: 2486
    000009b8: 	movaps	%xmm3, (%rsi)
    000009bb: 	addq	$0x10, %rsi
    000009bf: 	addq	$0x10, %r10
    000009c3: 	cmpq	%rsi, %r14
    000009c6: 	jne	.Ltmp54 # Offset: 2502
    000009c8: 	movl	%r11d, %eax
    000009cb: 	imull	%r11d, %eax
    000009cf: 	imull	$0x12c, %eax, %eax
    000009d5: 	addl	%r11d, %eax
    000009d8: 	jmp	.Ltmp55 # Offset: 2520
.Ltmp57:
    000009da: 	addq	$0x4, %rdi
    000009de: 	cmpq	%rdi, %r14
    000009e1: 	je	.Ltmp56 # Offset: 2529
.Ltmp55:
    000009e3: 	cmpl	(%rdi), %eax
    000009e5: 	je	.Ltmp57 # Offset: 2533
    000009e7: 	movl	current_test(%rip), %edx
    000009ed: 	leaq	DATAat0x79d4(%rip), %rsi
    000009f4: 	movl	$0x1, %edi
    000009f9: 	xorl	%eax, %eax
    000009fb: 	movq	%rcx, 0x10(%rsp)
    00000a00: 	movq	%r8, 0x8(%rsp)
    00000a05: 	callq	__printf_chk@PLT # Offset: 2565
    00000a0a: 	movq	0x8(%rsp), %r8
    00000a0f: 	movq	0x10(%rsp), %rcx
.Ltmp56:
    00000a14: 	addl	$0x1, %r15d
    00000a18: 	cmpl	iterations(%rip), %r15d
    00000a1f: 	jl	.Ltmp58 # Offset: 2591
    00000a25: 	movq	%rcx, %r15
    00000a28: 	movq	%r8, %r14
.Ltmp51:
    00000a2b: 	callq	clock@PLT # Offset: 2603
    00000a30: 	leaq	DATAat0x7508(%rip), %rdi
    00000a37: 	pxor	%xmm0, %xmm0
    00000a3b: 	movq	%rax, end_time(%rip)
    00000a42: 	subq	start_time(%rip), %rax
    00000a49: 	cvtsi2sd	%rax, %xmm0
    00000a4e: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000a56: 	callq	_Z13record_resultdPKc # Offset: 2646
    00000a5b: 	movq	%r15, %rdi
    00000a5e: 	leaq	DATAat0x7538(%rip), %rcx
    00000a65: 	movq	%rbp, %rsi
    00000a68: 	leaq	data32_Matrix(%rip), %rdx
    00000a6f: 	callq	_Z21test_array_dmxpy_opt6IiEvPT_PKS0_PA200_S2_PKc # Offset: 2671
    00000a74: 	movq	%r15, %rdi
    00000a77: 	leaq	DATAat0x7568(%rip), %rcx
    00000a7e: 	movq	%rbp, %rsi
    00000a81: 	leaq	data32_Matrix(%rip), %rdx
    00000a88: 	callq	_Z21test_array_dmxpy_opt7IiEvPT_PKS0_PA200_S2_PKc # Offset: 2696
    00000a8d: 	movq	%r15, %rdi
    00000a90: 	movq	%rbp, %rsi
    00000a93: 	xorl	%r15d, %r15d
    00000a96: 	leaq	DATAat0x7598(%rip), %rcx
    00000a9d: 	leaq	data32_Matrix(%rip), %rdx
    00000aa4: 	callq	_Z21test_array_dmxpy_opt8IiEvPT_PKS0_PA200_S2_PKc # Offset: 2724
    00000aa9: 	callq	clock@PLT # Offset: 2729
    00000aae: 	movl	iterations(%rip), %edi
    00000ab4: 	leaq	end_time(%rip), %rcx
    00000abb: 	movq	%rax, start_time(%rip)
    00000ac2: 	leaq	data32_Matrix(%rip), %rax
    00000ac9: 	addq	$0x320, %rax
    00000acf: 	movq	%rax, 0x10(%rsp)
    00000ad4: 	testl	%edi, %edi
    00000ad6: 	jle	.Ltmp59 # Offset: 2774
    00000adc: 	movq	%rcx, %rax
    00000adf: 	movq	%r14, %rcx
    00000ae2: 	movq	%rax, %r14
.Ltmp68:
    00000ae5: 	movl	init_value(%rip), %r10d
    00000aec: 	leaq	data32_A(%rip), %r9
    00000af3: 	movq	%r9, %rax
    00000af6: 	movd	%r10d, %xmm6
    00000afb: 	pshufd	$0x0, %xmm6, %xmm0
.Ltmp60:
    00000b00: 	movaps	%xmm0, (%rax)
    00000b03: 	addq	$0x10, %rax
    00000b07: 	cmpq	%rax, %r14
    00000b0a: 	jne	.Ltmp60 # Offset: 2826
    00000b0c: 	leaq	data32_Matrix(%rip), %rsi
    00000b13: 	movq	%rbp, %r8
    00000b16: 	movl	$0x1, %edi
.Ltmp62:
    00000b1b: 	movd	(%r8), %xmm5
    00000b20: 	leaq	0x320(%rsi), %r11
    00000b27: 	movq	%r9, %rdx
    00000b2a: 	xorl	%eax, %eax
    00000b2c: 	pshufd	$0x0, %xmm5, %xmm4
    00000b31: 	movd	0x4(%r8), %xmm5
    00000b37: 	movdqa	%xmm4, %xmm6
    00000b3b: 	pshufd	$0x0, %xmm5, %xmm3
    00000b40: 	psrlq	$0x20, %xmm6
    00000b45: 	movdqa	%xmm3, %xmm5
    00000b49: 	psrlq	$0x20, %xmm5
.Ltmp61:
    00000b4e: 	movdqa	(%rsi,%rax), %xmm1
    00000b53: 	movdqa	%xmm4, %xmm0
    00000b57: 	movdqa	%xmm3, %xmm2
    00000b5b: 	addq	$0x10, %rdx
    00000b5f: 	pmuludq	(%rsi,%rax), %xmm0
    00000b64: 	pshufd	$0x8, %xmm0, %xmm0
    00000b69: 	pmuludq	(%r11,%rax), %xmm2
    00000b6f: 	pshufd	$0x8, %xmm2, %xmm2
    00000b74: 	psrlq	$0x20, %xmm1
    00000b79: 	pmuludq	%xmm6, %xmm1
    00000b7d: 	pshufd	$0x8, %xmm1, %xmm1
    00000b82: 	punpckldq	%xmm1, %xmm0
    00000b86: 	movdqa	(%r11,%rax), %xmm1
    00000b8c: 	paddd	-0x10(%rdx), %xmm0
    00000b91: 	addq	$0x10, %rax
    00000b95: 	psrlq	$0x20, %xmm1
    00000b9a: 	pmuludq	%xmm5, %xmm1
    00000b9e: 	pshufd	$0x8, %xmm1, %xmm1
    00000ba3: 	punpckldq	%xmm1, %xmm2
    00000ba7: 	paddd	%xmm2, %xmm0
    00000bab: 	movaps	%xmm0, -0x10(%rdx)
    00000baf: 	cmpq	$0x320, %rax
    00000bb5: 	jne	.Ltmp61 # Offset: 2997
    00000bb7: 	leal	0x1(%rdi), %edx
    00000bba: 	addl	$0x2, %edi
    00000bbd: 	addq	$0x8, %r8
    00000bc1: 	addq	$0x640, %rsi
    00000bc8: 	cmpl	$0x12b, %edi
    00000bce: 	jne	.Ltmp62 # Offset: 3022
    00000bd4: 	movslq	%edx, %rdx
    00000bd7: 	leaq	data32_Matrix(%rip), %rdi
    00000bde: 	imulq	$0x320, %rdx, %rax
    00000be5: 	leaq	0x1(%rdx), %r8
    00000be9: 	imulq	$0x320, %r8, %r8
    00000bf0: 	leaq	(%rbp,%rdx,4), %rsi
    00000bf5: 	addq	0x10(%rsp), %r8
    00000bfa: 	addq	%rdi, %rax
.Ltmp64:
    00000bfd: 	movd	(%rsi), %xmm7
    00000c01: 	movq	%rax, %rdi
    00000c04: 	movq	%r9, %rdx
    00000c07: 	pshufd	$0x0, %xmm7, %xmm2
    00000c0c: 	movdqa	%xmm2, %xmm3
    00000c10: 	psrlq	$0x20, %xmm3
.Ltmp63:
    00000c15: 	movdqa	(%rdi), %xmm1
    00000c19: 	movdqa	%xmm2, %xmm0
    00000c1d: 	pmuludq	(%rdi), %xmm0
    00000c21: 	addq	$0x10, %rdx
    00000c25: 	pshufd	$0x8, %xmm0, %xmm0
    00000c2a: 	addq	$0x10, %rdi
    00000c2e: 	psrlq	$0x20, %xmm1
    00000c33: 	pmuludq	%xmm3, %xmm1
    00000c37: 	pshufd	$0x8, %xmm1, %xmm1
    00000c3c: 	punpckldq	%xmm1, %xmm0
    00000c40: 	paddd	-0x10(%rdx), %xmm0
    00000c45: 	movaps	%xmm0, -0x10(%rdx)
    00000c49: 	cmpq	%r14, %rdx
    00000c4c: 	jne	.Ltmp63 # Offset: 3148
    00000c4e: 	addq	$0x320, %rax
    00000c54: 	addq	$0x4, %rsi
    00000c58: 	cmpq	%r8, %rax
    00000c5b: 	jne	.Ltmp64 # Offset: 3163
    00000c5d: 	movl	%r10d, %eax
    00000c60: 	imull	%r10d, %eax
    00000c64: 	imull	$0x12c, %eax, %eax
    00000c6a: 	addl	%r10d, %eax
    00000c6d: 	jmp	.Ltmp65 # Offset: 3181
.Ltmp67:
    00000c6f: 	addq	$0x4, %r9
    00000c73: 	cmpq	%r9, %r14
    00000c76: 	je	.Ltmp66 # Offset: 3190
.Ltmp65:
    00000c78: 	cmpl	(%r9), %eax
    00000c7b: 	je	.Ltmp67 # Offset: 3195
    00000c7d: 	movl	current_test(%rip), %edx
    00000c83: 	leaq	DATAat0x79d4(%rip), %rsi
    00000c8a: 	movl	$0x1, %edi
    00000c8f: 	xorl	%eax, %eax
    00000c91: 	movq	%rcx, 0x8(%rsp)
    00000c96: 	callq	__printf_chk@PLT # Offset: 3222
    00000c9b: 	movq	0x8(%rsp), %rcx
.Ltmp66:
    00000ca0: 	addl	$0x1, %r15d
    00000ca4: 	cmpl	iterations(%rip), %r15d
    00000cab: 	jl	.Ltmp68 # Offset: 3243
    00000cb1: 	movq	%rcx, %r14
.Ltmp59:
    00000cb4: 	callq	clock@PLT # Offset: 3252
    00000cb9: 	leaq	DATAat0x75c8(%rip), %rbp
    00000cc0: 	pxor	%xmm0, %xmm0
    00000cc4: 	movq	%rax, end_time(%rip)
    00000ccb: 	movq	%rbp, %rdi
    00000cce: 	subq	start_time(%rip), %rax
    00000cd5: 	cvtsi2sd	%rax, %xmm0
    00000cda: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000ce2: 	callq	_Z13record_resultdPKc # Offset: 3298
    00000ce7: 	movl	iterations(%rip), %edx
    00000ced: 	xorl	%r8d, %r8d
    00000cf0: 	xorl	%ecx, %ecx
    00000cf2: 	movl	$0xea60, %esi
    00000cf7: 	movq	%rbp, %rdi
    00000cfa: 	callq	_Z9summarizePKciiii # Offset: 3322
    00000cff: 	movslq	init_value(%rip), %rax
    00000d06: 	movq	%rax, %xmm0
    00000d0b: 	leaq	data64_B(%rip), %rax
    00000d12: 	punpcklqdq	%xmm0, %xmm0
.Ltmp69:
    00000d16: 	movaps	%xmm0, (%rax)
    00000d19: 	leaq	data64_A(%rip), %rdi
    00000d20: 	addq	$0x10, %rax
    00000d24: 	cmpq	%rdi, %rax
    00000d27: 	jne	.Ltmp69 # Offset: 3367
    00000d29: 	leaq	data64_Matrix(%rip), %rbp
    00000d30: 	leaq	0x75300(%rbp), %rdx
    00000d37: 	movq	%rbp, %rax
.Ltmp70:
    00000d3a: 	movaps	%xmm0, (%rax)
    00000d3d: 	addq	$0x10, %rax
    00000d41: 	cmpq	%rax, %rdx
    00000d44: 	jne	.Ltmp70 # Offset: 3396
    00000d46: 	callq	clock@PLT # Offset: 3398
    00000d4b: 	leaq	data64_Matrix+479984(%rip), %r15
    00000d52: 	xorl	%r11d, %r11d
    00000d55: 	movl	iterations(%rip), %esi
    00000d5b: 	movq	%rax, start_time(%rip)
    00000d62: 	leaq	0x8(%r15), %rax
    00000d66: 	leaq	data32_Matrix(%rip), %rcx
    00000d6d: 	movq	%rax, 0x8(%rsp)
    00000d72: 	leaq	0x640(%rbp), %rax
    00000d79: 	movq	%rax, 0x10(%rsp)
    00000d7e: 	testl	%esi, %esi
    00000d80: 	jle	.Ltmp71 # Offset: 3456
    00000d86: 	movq	%rcx, %r14
    00000d89: 	movq	%r15, %rcx
    00000d8c: 	movl	%r11d, %r15d
.Ltmp80:
    00000d8f: 	movslq	init_value(%rip), %rax
    00000d96: 	leaq	data64_A(%rip), %r10
    00000d9d: 	movq	%r10, %r8
    00000da0: 	movq	%rax, %xmm0
    00000da5: 	movq	%rax, %r11
    00000da8: 	movq	%r10, %rax
    00000dab: 	punpcklqdq	%xmm0, %xmm0
.Ltmp72:
    00000daf: 	movaps	%xmm0, (%rax)
    00000db2: 	addq	$0x10, %rax
    00000db6: 	cmpq	%r14, %rax
    00000db9: 	jne	.Ltmp72 # Offset: 3513
    00000dbb: 	movq	%rbp, %rdi
    00000dbe: 	movl	$0x2, %esi
.Ltmp74:
    00000dc3: 	movq	0x8(%rsp), %rax
    00000dc8: 	movq	(%rcx,%rsi,8), %xmm4
    00000dcd: 	leaq	0x640(%rdi), %r9
    00000dd4: 	movq	%r10, %rdx
    00000dd7: 	movq	(%rax,%rsi,8), %xmm3
    00000ddc: 	punpcklqdq	%xmm4, %xmm4
    00000de0: 	xorl	%eax, %eax
    00000de2: 	movdqa	%xmm4, %xmm6
    00000de6: 	punpcklqdq	%xmm3, %xmm3
    00000dea: 	psrlq	$0x20, %xmm6
    00000def: 	movdqa	%xmm3, %xmm5
    00000df3: 	psrlq	$0x20, %xmm5
.Ltmp73:
    00000df8: 	movdqa	0x10(%rdi,%rax), %xmm0
    00000dfe: 	movdqa	%xmm4, %xmm1
    00000e02: 	addq	$0x20, %rdx
    00000e06: 	movdqa	%xmm0, %xmm2
    00000e0a: 	pmuludq	%xmm0, %xmm1
    00000e0e: 	psrlq	$0x20, %xmm2
    00000e13: 	pmuludq	%xmm6, %xmm0
    00000e17: 	pmuludq	%xmm4, %xmm2
    00000e1b: 	paddq	%xmm2, %xmm0
    00000e1f: 	movdqa	%xmm3, %xmm2
    00000e23: 	psllq	$0x20, %xmm0
    00000e28: 	paddq	%xmm0, %xmm1
    00000e2c: 	movdqa	0x10(%r9,%rax), %xmm0
    00000e33: 	paddq	-0x10(%rdx), %xmm1
    00000e38: 	movdqa	%xmm0, %xmm7
    00000e3c: 	pmuludq	%xmm0, %xmm2
    00000e40: 	psrlq	$0x20, %xmm7
    00000e45: 	pmuludq	%xmm5, %xmm0
    00000e49: 	pmuludq	%xmm3, %xmm7
    00000e4d: 	paddq	%xmm7, %xmm0
    00000e51: 	psllq	$0x20, %xmm0
    00000e56: 	paddq	%xmm2, %xmm0
    00000e5a: 	movdqa	%xmm4, %xmm2
    00000e5e: 	paddq	%xmm0, %xmm1
    00000e62: 	movdqa	(%rdi,%rax), %xmm0
    00000e67: 	movaps	%xmm1, -0x10(%rdx)
    00000e6b: 	movdqa	%xmm0, %xmm7
    00000e6f: 	pmuludq	%xmm0, %xmm2
    00000e73: 	psrlq	$0x20, %xmm7
    00000e78: 	pmuludq	%xmm6, %xmm0
    00000e7c: 	pmuludq	%xmm4, %xmm7
    00000e80: 	paddq	%xmm7, %xmm0
    00000e84: 	movdqa	%xmm3, %xmm7
    00000e88: 	psllq	$0x20, %xmm0
    00000e8d: 	paddq	%xmm2, %xmm0
    00000e91: 	movdqa	-0x20(%rdx), %xmm2
    00000e96: 	paddq	%xmm0, %xmm2
    00000e9a: 	movdqa	(%r9,%rax), %xmm0
    00000ea0: 	addq	$0x20, %rax
    00000ea4: 	movdqa	%xmm0, %xmm8
    00000ea9: 	pmuludq	%xmm0, %xmm7
    00000ead: 	psrlq	$0x20, %xmm8
    00000eb3: 	pmuludq	%xmm5, %xmm0
    00000eb7: 	pmuludq	%xmm3, %xmm8
    00000ebc: 	paddq	%xmm8, %xmm0
    00000ec1: 	psllq	$0x20, %xmm0
    00000ec6: 	paddq	%xmm7, %xmm0
    00000eca: 	paddq	%xmm2, %xmm0
    00000ece: 	movaps	%xmm0, -0x20(%rdx)
    00000ed2: 	cmpq	$0x640, %rax
    00000ed8: 	jne	.Ltmp73 # Offset: 3800
    00000ede: 	movslq	%esi, %rdx
    00000ee1: 	addq	$0x2, %rsi
    00000ee5: 	addq	$0xc80, %rdi
    00000eec: 	cmpq	$0x12c, %rsi
    00000ef3: 	jne	.Ltmp74 # Offset: 3827
    00000ef9: 	imulq	$0x640, %rdx, %rax
    00000f00: 	leaq	0x1(%rdx), %r9
    00000f04: 	imulq	$0x640, %r9, %r9
    00000f0b: 	leaq	(%rbx,%rdx,8), %rsi
    00000f0f: 	addq	0x10(%rsp), %r9
    00000f14: 	addq	%rbp, %rax
.Ltmp76:
    00000f17: 	movq	(%rsi), %xmm1
    00000f1b: 	movq	%rax, %rdi
    00000f1e: 	movq	%r10, %rdx
    00000f21: 	punpcklqdq	%xmm1, %xmm1
    00000f25: 	movdqa	%xmm1, %xmm4
    00000f29: 	psrlq	$0x20, %xmm4
.Ltmp75:
    00000f2e: 	movdqa	(%rdi), %xmm0
    00000f32: 	movdqa	%xmm1, %xmm2
    00000f36: 	addq	$0x10, %rdx
    00000f3a: 	addq	$0x10, %rdi
    00000f3e: 	movdqa	%xmm0, %xmm3
    00000f42: 	pmuludq	%xmm0, %xmm2
    00000f46: 	psrlq	$0x20, %xmm3
    00000f4b: 	pmuludq	%xmm4, %xmm0
    00000f4f: 	pmuludq	%xmm1, %xmm3
    00000f53: 	paddq	%xmm3, %xmm0
    00000f57: 	psllq	$0x20, %xmm0
    00000f5c: 	paddq	%xmm2, %xmm0
    00000f60: 	paddq	-0x10(%rdx), %xmm0
    00000f65: 	movaps	%xmm0, -0x10(%rdx)
    00000f69: 	cmpq	%r14, %rdx
    00000f6c: 	jne	.Ltmp75 # Offset: 3948
    00000f6e: 	addq	$0x640, %rax
    00000f74: 	addq	$0x8, %rsi
    00000f78: 	cmpq	%rax, %r9
    00000f7b: 	jne	.Ltmp76 # Offset: 3963
    00000f7d: 	movl	%r11d, %eax
    00000f80: 	imull	%r11d, %eax
    00000f84: 	imull	$0x12c, %eax, %eax
    00000f8a: 	addl	%r11d, %eax
    00000f8d: 	cltq
    00000f8f: 	jmp	.Ltmp77 # Offset: 3983
.Ltmp79:
    00000f91: 	addq	$0x8, %r10
    00000f95: 	cmpq	%r14, %r10
    00000f98: 	je	.Ltmp78 # Offset: 3992
.Ltmp77:
    00000f9a: 	cmpq	(%r10), %rax
    00000f9d: 	je	.Ltmp79 # Offset: 3997
    00000f9f: 	movl	current_test(%rip), %edx
    00000fa5: 	leaq	DATAat0x79d4(%rip), %rsi
    00000fac: 	movl	$0x1, %edi
    00000fb1: 	xorl	%eax, %eax
    00000fb3: 	movq	%rcx, 0x28(%rsp)
    00000fb8: 	movq	%r8, 0x20(%rsp)
    00000fbd: 	callq	__printf_chk@PLT # Offset: 4029
    00000fc2: 	movq	0x20(%rsp), %r8
    00000fc7: 	movq	0x28(%rsp), %rcx
.Ltmp78:
    00000fcc: 	addl	$0x1, %r15d
    00000fd0: 	cmpl	iterations(%rip), %r15d
    00000fd7: 	jl	.Ltmp80 # Offset: 4055
    00000fdd: 	movq	%r8, %r14
.Ltmp71:
    00000fe0: 	callq	clock@PLT # Offset: 4064
    00000fe5: 	leaq	DATAat0x75f8(%rip), %rdi
    00000fec: 	pxor	%xmm0, %xmm0
    00000ff0: 	xorl	%r15d, %r15d
    00000ff3: 	movq	%rax, end_time(%rip)
    00000ffa: 	subq	start_time(%rip), %rax
    00001001: 	cvtsi2sd	%rax, %xmm0
    00001006: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000100e: 	callq	_Z13record_resultdPKc # Offset: 4110
    00001013: 	movq	%rbp, %rdx
    00001016: 	movq	%rbx, %rsi
    00001019: 	movq	%r14, %rdi
    0000101c: 	leaq	DATAat0x7630(%rip), %rcx
    00001023: 	callq	_Z21test_array_dmxpy_opt2ImEvPT_PKS0_PA200_S2_PKc # Offset: 4131
    00001028: 	movq	%rbp, %rdx
    0000102b: 	movq	%rbx, %rsi
    0000102e: 	movq	%r14, %rdi
    00001031: 	leaq	DATAat0x7668(%rip), %rcx
    00001038: 	callq	_Z21test_array_dmxpy_opt3ImEvPT_PKS0_PA200_S2_PKc # Offset: 4152
    0000103d: 	movq	%rbp, %rdx
    00001040: 	movq	%rbx, %rsi
    00001043: 	movq	%r14, %rdi
    00001046: 	leaq	DATAat0x76a0(%rip), %rcx
    0000104d: 	callq	_Z21test_array_dmxpy_opt4ImEvPT_PKS0_PA200_S2_PKc # Offset: 4173
    00001052: 	callq	clock@PLT # Offset: 4178
    00001057: 	movl	iterations(%rip), %edx
    0000105d: 	leaq	data32_Matrix(%rip), %rcx
    00001064: 	leaq	DATAat0x79d4(%rip), %r8
    0000106b: 	movq	%rax, start_time(%rip)
    00001072: 	testl	%edx, %edx
    00001074: 	jle	.Ltmp81 # Offset: 4212
    0000107a: 	movq	%rcx, %r14
.Ltmp88:
    0000107d: 	movslq	init_value(%rip), %rax
    00001084: 	leaq	data64_A(%rip), %r9
    0000108b: 	movq	%r9, %rcx
    0000108e: 	movq	%rax, %xmm0
    00001093: 	movq	%rax, %r10
    00001096: 	movq	%r9, %rax
    00001099: 	punpcklqdq	%xmm0, %xmm0
.Ltmp82:
    0000109d: 	movaps	%xmm0, (%rax)
    000010a0: 	addq	$0x10, %rax
    000010a4: 	cmpq	%rax, %r14
    000010a7: 	jne	.Ltmp82 # Offset: 4263
    000010a9: 	movq	%rbp, %rdi
    000010ac: 	leaq	data64_A(%rip), %rdx
.Ltmp84:
    000010b3: 	movdqa	(%rdx), %xmm5
    000010b7: 	movq	%rdi, %rsi
    000010ba: 	movq	%rbx, %rax
.Ltmp83:
    000010bd: 	movq	(%rax), %xmm3
    000010c1: 	movdqa	(%rsi), %xmm4
    000010c5: 	addq	$0x8, %rax
    000010c9: 	leaq	data64_A(%rip), %r11
    000010d0: 	addq	$0x640, %rsi
    000010d7: 	punpcklqdq	%xmm3, %xmm3
    000010db: 	movdqa	%xmm4, %xmm2
    000010df: 	movdqa	%xmm3, %xmm0
    000010e3: 	psrlq	$0x20, %xmm2
    000010e8: 	movdqa	%xmm3, %xmm1
    000010ec: 	psrlq	$0x20, %xmm0
    000010f1: 	pmuludq	%xmm3, %xmm2
    000010f5: 	pmuludq	%xmm4, %xmm0
    000010f9: 	pmuludq	%xmm4, %xmm1
    000010fd: 	paddq	%xmm2, %xmm0
    00001101: 	psllq	$0x20, %xmm0
    00001106: 	paddq	%xmm1, %xmm0
    0000110a: 	paddq	%xmm0, %xmm5
    0000110e: 	cmpq	%r11, %rax
    00001111: 	jne	.Ltmp83 # Offset: 4369
    00001113: 	movaps	%xmm5, (%rdx)
    00001116: 	addq	$0x10, %rdx
    0000111a: 	addq	$0x10, %rdi
    0000111e: 	cmpq	%rdx, %r14
    00001121: 	jne	.Ltmp84 # Offset: 4385
    00001123: 	movl	%r10d, %eax
    00001126: 	imull	%r10d, %eax
    0000112a: 	imull	$0x12c, %eax, %eax
    00001130: 	addl	%r10d, %eax
    00001133: 	cltq
    00001135: 	jmp	.Ltmp85 # Offset: 4405
.Ltmp87:
    00001137: 	addq	$0x8, %r9
    0000113b: 	cmpq	%r9, %r14
    0000113e: 	je	.Ltmp86 # Offset: 4414
.Ltmp85:
    00001140: 	cmpq	(%r9), %rax
    00001143: 	je	.Ltmp87 # Offset: 4419
    00001145: 	movl	current_test(%rip), %edx
    0000114b: 	movq	%r8, %rsi
    0000114e: 	movl	$0x1, %edi
    00001153: 	xorl	%eax, %eax
    00001155: 	movq	%rcx, 0x8(%rsp)
    0000115a: 	callq	__printf_chk@PLT # Offset: 4442
    0000115f: 	movq	0x8(%rsp), %rcx
    00001164: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp86:
    0000116b: 	addl	$0x1, %r15d
    0000116f: 	cmpl	iterations(%rip), %r15d
    00001176: 	jl	.Ltmp88 # Offset: 4470
    0000117c: 	movq	%rcx, %r14
.Ltmp81:
    0000117f: 	callq	clock@PLT # Offset: 4479
    00001184: 	leaq	DATAat0x76d8(%rip), %rdi
    0000118b: 	pxor	%xmm0, %xmm0
    0000118f: 	leaq	data64_Matrix+479984(%rip), %r15
    00001196: 	movq	%rax, end_time(%rip)
    0000119d: 	subq	start_time(%rip), %rax
    000011a4: 	cvtsi2sd	%rax, %xmm0
    000011a9: 	divsd	DATAat0x79f8(%rip), %xmm0
    000011b1: 	callq	_Z13record_resultdPKc # Offset: 4529
    000011b6: 	movq	%r14, %rdi
    000011b9: 	movq	%rbp, %rdx
    000011bc: 	movq	%rbx, %rsi
    000011bf: 	leaq	DATAat0x7710(%rip), %rcx
    000011c6: 	callq	_Z21test_array_dmxpy_opt6ImEvPT_PKS0_PA200_S2_PKc # Offset: 4550
    000011cb: 	movq	%r14, %rdi
    000011ce: 	movq	%rbp, %rdx
    000011d1: 	movq	%rbx, %rsi
    000011d4: 	leaq	DATAat0x7748(%rip), %rcx
    000011db: 	callq	_Z21test_array_dmxpy_opt7ImEvPT_PKS0_PA200_S2_PKc # Offset: 4571
    000011e0: 	movq	%r14, %rdi
    000011e3: 	movq	%rbp, %rdx
    000011e6: 	movq	%rbx, %rsi
    000011e9: 	leaq	DATAat0x7780(%rip), %rcx
    000011f0: 	xorl	%r14d, %r14d
    000011f3: 	callq	_Z21test_array_dmxpy_opt8ImEvPT_PKS0_PA200_S2_PKc # Offset: 4595
    000011f8: 	callq	clock@PLT # Offset: 4600
    000011fd: 	leaq	data32_Matrix(%rip), %rcx
    00001204: 	leaq	DATAat0x79d4(%rip), %r11
    0000120b: 	movq	%rax, start_time(%rip)
    00001212: 	leaq	0x8(%r15), %rax
    00001216: 	movq	%rax, 0x8(%rsp)
    0000121b: 	leaq	0x640(%rbp), %rax
    00001222: 	movq	%rax, 0x10(%rsp)
    00001227: 	movl	iterations(%rip), %eax
    0000122d: 	testl	%eax, %eax
    0000122f: 	jle	.Ltmp89 # Offset: 4655
    00001235: 	movq	%rcx, %rax
    00001238: 	movq	%r15, %rcx
    0000123b: 	movl	%r14d, %r15d
    0000123e: 	movq	%rax, %r14
.Ltmp98:
    00001241: 	movslq	init_value(%rip), %rax
    00001248: 	leaq	data64_A(%rip), %r9
    0000124f: 	movq	%rax, %xmm0
    00001254: 	movq	%rax, %r10
    00001257: 	movq	%r9, %rax
    0000125a: 	punpcklqdq	%xmm0, %xmm0
.Ltmp90:
    0000125e: 	movaps	%xmm0, (%rax)
    00001261: 	addq	$0x10, %rax
    00001265: 	cmpq	%rax, %r14
    00001268: 	jne	.Ltmp90 # Offset: 4712
    0000126a: 	movq	%rbp, %rdi
    0000126d: 	movl	$0x2, %esi
.Ltmp92:
    00001272: 	movq	0x8(%rsp), %rax
    00001277: 	movq	(%rcx,%rsi,8), %xmm4
    0000127c: 	leaq	0x640(%rdi), %r8
    00001283: 	movq	%r9, %rdx
    00001286: 	movq	(%rax,%rsi,8), %xmm3
    0000128b: 	punpcklqdq	%xmm4, %xmm4
    0000128f: 	xorl	%eax, %eax
    00001291: 	movdqa	%xmm4, %xmm6
    00001295: 	punpcklqdq	%xmm3, %xmm3
    00001299: 	psrlq	$0x20, %xmm6
    0000129e: 	movdqa	%xmm3, %xmm5
    000012a2: 	psrlq	$0x20, %xmm5
.Ltmp91:
    000012a7: 	movdqa	0x10(%rdi,%rax), %xmm0
    000012ad: 	movdqa	%xmm4, %xmm1
    000012b1: 	addq	$0x20, %rdx
    000012b5: 	movdqa	%xmm0, %xmm2
    000012b9: 	pmuludq	%xmm0, %xmm1
    000012bd: 	psrlq	$0x20, %xmm2
    000012c2: 	pmuludq	%xmm6, %xmm0
    000012c6: 	pmuludq	%xmm4, %xmm2
    000012ca: 	paddq	%xmm2, %xmm0
    000012ce: 	movdqa	%xmm3, %xmm2
    000012d2: 	psllq	$0x20, %xmm0
    000012d7: 	paddq	%xmm0, %xmm1
    000012db: 	movdqa	0x10(%r8,%rax), %xmm0
    000012e2: 	paddq	-0x10(%rdx), %xmm1
    000012e7: 	movdqa	%xmm0, %xmm7
    000012eb: 	pmuludq	%xmm0, %xmm2
    000012ef: 	psrlq	$0x20, %xmm7
    000012f4: 	pmuludq	%xmm5, %xmm0
    000012f8: 	pmuludq	%xmm3, %xmm7
    000012fc: 	paddq	%xmm7, %xmm0
    00001300: 	psllq	$0x20, %xmm0
    00001305: 	paddq	%xmm2, %xmm0
    00001309: 	movdqa	%xmm4, %xmm2
    0000130d: 	paddq	%xmm0, %xmm1
    00001311: 	movdqa	(%rdi,%rax), %xmm0
    00001316: 	movaps	%xmm1, -0x10(%rdx)
    0000131a: 	movdqa	%xmm0, %xmm7
    0000131e: 	pmuludq	%xmm0, %xmm2
    00001322: 	psrlq	$0x20, %xmm7
    00001327: 	pmuludq	%xmm6, %xmm0
    0000132b: 	pmuludq	%xmm4, %xmm7
    0000132f: 	paddq	%xmm7, %xmm0
    00001333: 	movdqa	%xmm3, %xmm7
    00001337: 	psllq	$0x20, %xmm0
    0000133c: 	paddq	%xmm2, %xmm0
    00001340: 	movdqa	-0x20(%rdx), %xmm2
    00001345: 	paddq	%xmm0, %xmm2
    00001349: 	movdqa	(%r8,%rax), %xmm0
    0000134f: 	addq	$0x20, %rax
    00001353: 	movdqa	%xmm0, %xmm8
    00001358: 	pmuludq	%xmm0, %xmm7
    0000135c: 	psrlq	$0x20, %xmm8
    00001362: 	pmuludq	%xmm5, %xmm0
    00001366: 	pmuludq	%xmm3, %xmm8
    0000136b: 	paddq	%xmm8, %xmm0
    00001370: 	psllq	$0x20, %xmm0
    00001375: 	paddq	%xmm7, %xmm0
    00001379: 	paddq	%xmm2, %xmm0
    0000137d: 	movaps	%xmm0, -0x20(%rdx)
    00001381: 	cmpq	$0x640, %rax
    00001387: 	jne	.Ltmp91 # Offset: 4999
    0000138d: 	movslq	%esi, %rdx
    00001390: 	addq	$0x2, %rsi
    00001394: 	addq	$0xc80, %rdi
    0000139b: 	cmpq	$0x12c, %rsi
    000013a2: 	jne	.Ltmp92 # Offset: 5026
    000013a8: 	imulq	$0x640, %rdx, %rax
    000013af: 	leaq	0x1(%rdx), %r8
    000013b3: 	imulq	$0x640, %r8, %r8
    000013ba: 	leaq	(%rbx,%rdx,8), %rsi
    000013be: 	addq	0x10(%rsp), %r8
    000013c3: 	addq	%rbp, %rax
.Ltmp94:
    000013c6: 	movq	(%rsi), %xmm1
    000013ca: 	movq	%rax, %rdi
    000013cd: 	movq	%r9, %rdx
    000013d0: 	punpcklqdq	%xmm1, %xmm1
    000013d4: 	movdqa	%xmm1, %xmm4
    000013d8: 	psrlq	$0x20, %xmm4
.Ltmp93:
    000013dd: 	movdqa	(%rdi), %xmm0
    000013e1: 	movdqa	%xmm1, %xmm2
    000013e5: 	addq	$0x10, %rdx
    000013e9: 	addq	$0x10, %rdi
    000013ed: 	movdqa	%xmm0, %xmm3
    000013f1: 	pmuludq	%xmm0, %xmm2
    000013f5: 	psrlq	$0x20, %xmm3
    000013fa: 	pmuludq	%xmm4, %xmm0
    000013fe: 	pmuludq	%xmm1, %xmm3
    00001402: 	paddq	%xmm3, %xmm0
    00001406: 	psllq	$0x20, %xmm0
    0000140b: 	paddq	%xmm2, %xmm0
    0000140f: 	paddq	-0x10(%rdx), %xmm0
    00001414: 	movaps	%xmm0, -0x10(%rdx)
    00001418: 	cmpq	%r14, %rdx
    0000141b: 	jne	.Ltmp93 # Offset: 5147
    0000141d: 	addq	$0x640, %rax
    00001423: 	addq	$0x8, %rsi
    00001427: 	cmpq	%r8, %rax
    0000142a: 	jne	.Ltmp94 # Offset: 5162
    0000142c: 	movl	%r10d, %eax
    0000142f: 	imull	%r10d, %eax
    00001433: 	imull	$0x12c, %eax, %eax
    00001439: 	addl	%r10d, %eax
    0000143c: 	cltq
    0000143e: 	jmp	.Ltmp95 # Offset: 5182
.Ltmp97:
    00001440: 	addq	$0x8, %r9
    00001444: 	cmpq	%r14, %r9
    00001447: 	je	.Ltmp96 # Offset: 5191
.Ltmp95:
    00001449: 	cmpq	(%r9), %rax
    0000144c: 	je	.Ltmp97 # Offset: 5196
    0000144e: 	movl	current_test(%rip), %edx
    00001454: 	movq	%r11, %rsi
    00001457: 	movl	$0x1, %edi
    0000145c: 	xorl	%eax, %eax
    0000145e: 	movq	%rcx, 0x20(%rsp)
    00001463: 	callq	__printf_chk@PLT # Offset: 5219
    00001468: 	movq	0x20(%rsp), %rcx
    0000146d: 	leaq	DATAat0x79d4(%rip), %r11
.Ltmp96:
    00001474: 	addl	$0x1, %r15d
    00001478: 	cmpl	iterations(%rip), %r15d
    0000147f: 	jl	.Ltmp98 # Offset: 5247
.Ltmp89:
    00001485: 	callq	clock@PLT # Offset: 5253
    0000148a: 	leaq	DATAat0x77b8(%rip), %rbp
    00001491: 	pxor	%xmm0, %xmm0
    00001495: 	movq	%rax, end_time(%rip)
    0000149c: 	movq	%rbp, %rdi
    0000149f: 	subq	start_time(%rip), %rax
    000014a6: 	cvtsi2sd	%rax, %xmm0
    000014ab: 	divsd	DATAat0x79f8(%rip), %xmm0
    000014b3: 	callq	_Z13record_resultdPKc # Offset: 5299
    000014b8: 	movl	iterations(%rip), %edx
    000014be: 	xorl	%r8d, %r8d
    000014c1: 	xorl	%ecx, %ecx
    000014c3: 	movl	$0xea60, %esi
    000014c8: 	movq	%rbp, %rdi
    000014cb: 	callq	_Z9summarizePKciiii # Offset: 5323
    000014d0: 	pxor	%xmm0, %xmm0
    000014d4: 	movq	0x18(%rsp), %rax
    000014d9: 	cvtsi2sdl	init_value(%rip), %xmm0
    000014e1: 	unpcklpd	%xmm0, %xmm0
.Ltmp99:
    000014e5: 	movaps	%xmm0, (%rax)
    000014e8: 	leaq	dataDouble_A(%rip), %rbx
    000014ef: 	addq	$0x10, %rax
    000014f3: 	cmpq	%rbx, %rax
    000014f6: 	jne	.Ltmp99 # Offset: 5366
    000014f8: 	leaq	dataDouble_Matrix(%rip), %r14
    000014ff: 	movq	%r14, %rax
    00001502: 	leaq	0x75300(%r14), %rdx
.Ltmp100:
    00001509: 	movaps	%xmm0, (%rax)
    0000150c: 	addq	$0x10, %rax
    00001510: 	cmpq	%rax, %rdx
    00001513: 	jne	.Ltmp100 # Offset: 5395
    00001515: 	movq	%r14, %rdx
    00001518: 	movq	%r13, %rsi
    0000151b: 	leaq	DATAat0x77e8(%rip), %rcx
    00001522: 	movq	%r12, %rdi
    00001525: 	callq	_Z21test_array_dmxpy_opt1IdEvPT_PKS0_PA200_S2_PKc # Offset: 5413
    0000152a: 	movq	%r14, %rdx
    0000152d: 	movq	%r13, %rsi
    00001530: 	movq	%r12, %rdi
    00001533: 	leaq	DATAat0x7818(%rip), %rcx
    0000153a: 	leaq	DATAat0x7968(%rip), %rbp
    00001541: 	callq	_Z21test_array_dmxpy_opt2IdEvPT_PKS0_PA200_S2_PKc # Offset: 5441
    00001546: 	movq	%r14, %rdx
    00001549: 	movq	%r13, %rsi
    0000154c: 	movq	%r12, %rdi
    0000154f: 	leaq	DATAat0x7848(%rip), %rcx
    00001556: 	callq	_Z21test_array_dmxpy_opt3IdEvPT_PKS0_PA200_S2_PKc # Offset: 5462
    0000155b: 	movq	%r14, %rdx
    0000155e: 	movq	%r13, %rsi
    00001561: 	movq	%r12, %rdi
    00001564: 	leaq	DATAat0x7878(%rip), %rcx
    0000156b: 	callq	_Z21test_array_dmxpy_opt4IdEvPT_PKS0_PA200_S2_PKc # Offset: 5483
    00001570: 	movq	%r14, %rdx
    00001573: 	movq	%r13, %rsi
    00001576: 	movq	%r12, %rdi
    00001579: 	leaq	DATAat0x78a8(%rip), %rcx
    00001580: 	callq	_Z21test_array_dmxpy_opt5IdEvPT_PKS0_PA200_S2_PKc # Offset: 5504
    00001585: 	movq	%r14, %rdx
    00001588: 	movq	%r13, %rsi
    0000158b: 	movq	%r12, %rdi
    0000158e: 	leaq	DATAat0x78d8(%rip), %rcx
    00001595: 	callq	_Z21test_array_dmxpy_opt6IdEvPT_PKS0_PA200_S2_PKc # Offset: 5525
    0000159a: 	movq	%r14, %rdx
    0000159d: 	movq	%r13, %rsi
    000015a0: 	movq	%r12, %rdi
    000015a3: 	leaq	DATAat0x7908(%rip), %rcx
    000015aa: 	callq	_Z21test_array_dmxpy_opt7IdEvPT_PKS0_PA200_S2_PKc # Offset: 5546
    000015af: 	movq	%r14, %rdx
    000015b2: 	movq	%r13, %rsi
    000015b5: 	movq	%r12, %rdi
    000015b8: 	leaq	DATAat0x7938(%rip), %rcx
    000015bf: 	callq	_Z21test_array_dmxpy_opt8IdEvPT_PKS0_PA200_S2_PKc # Offset: 5567
    000015c4: 	movq	%rbp, %rcx
    000015c7: 	movq	%r14, %rdx
    000015ca: 	movq	%r13, %rsi
    000015cd: 	movq	%r12, %rdi
    000015d0: 	callq	_Z16test_array_dmxpyIdEvPT_PKS0_PA200_S2_PKc # Offset: 5584
    000015d5: 	movl	iterations(%rip), %edx
    000015db: 	movq	%rbp, %rdi
    000015de: 	xorl	%ecx, %ecx
    000015e0: 	xorl	%r8d, %r8d
    000015e3: 	movl	$0xea60, %esi
    000015e8: 	callq	_Z9summarizePKciiii # Offset: 5608
    000015ed: 	addq	$0x38, %rsp
    000015f1: 	xorl	%eax, %eax
    000015f3: 	popq	%rbx
    000015f4: 	popq	%rbp
    000015f5: 	popq	%r12
    000015f7: 	popq	%r13
    000015f9: 	popq	%r14
    000015fb: 	popq	%r15
    000015fd: 	retq # Offset: 5629
.Ltmp3:
    000015fe: 	movq	0x8(%rbx), %rdi
    00001602: 	movl	$0xa, %edx
    00001607: 	xorl	%esi, %esi
    00001609: 	callq	strtol@PLT # Offset: 5641
    0000160e: 	movl	%eax, iterations(%rip)
    00001614: 	cmpl	$0x2, %ebp
    00001617: 	jle	.Ltmp101 # Offset: 5655
    0000161d: 	movq	0x10(%rbx), %rdi
    00001621: 	movl	$0xa, %edx
    00001626: 	xorl	%esi, %esi
    00001628: 	callq	strtol@PLT # Offset: 5672
    0000162d: 	movl	%eax, init_value(%rip)
    00001633: 	jmp	.Ltmp101 # Offset: 5683
.Ltmp1:
    00001638: 	leaq	DATAat0x79b6(%rip), %rsi
    0000163f: 	movl	$0x1, %edi
    00001644: 	xorl	%eax, %eax
    00001646: 	callq	__printf_chk@PLT # Offset: 5702
    0000164b: 	jmp	.Ltmp101 # Offset: 5707
.Ltmp5:
    00001650: 	leaq	-0x320(%rcx), %r15
    00001657: 	jmp	.Ltmp102 # Offset: 5719
.Ltmp22:
    0000165c: 	leaq	-0x640(%rcx), %r14
    00001663: 	jmp	.Ltmp103 # Offset: 5731
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x27d0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x27d0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x9fd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 4
  State       : disassembled
  Address     : 0x2800
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2800
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp104 # Offset: 17
    00000013: 	movq	DATAat0x9fe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp104 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp104:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x2830
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2830
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp105 # Offset: 34
    00000024: 	movq	DATAat0x9ff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp105 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp105:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x2870
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2870
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp106 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp107 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp107:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp106:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x28b0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x28b0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 8
  State       : disassembled
  Address     : 0x28c0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x28c0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp108 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp109 # Offset: 38
.Ltmp108:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp110 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp109:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp110:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x7008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x2960
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x2960
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp111 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp112 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp113:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp113 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp126:
    00000069: 	leaq	DATAat0x79d2(%rip), %rbp
    00000070: 	leaq	DATAat0x7028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x7068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp114 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x7a00(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x7098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x79f8(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp115 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp119:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp116 # Offset: 244
    000000fa: 	movq	DATAat0x79e8(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp120:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x79e8(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp117 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp117:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x79b7(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x7a00(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp118 # Offset: 398
.Ltmp115:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp119 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp120 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp116:
    000001c8: 	movq	DATAat0x79f0(%rip), %rsi
    000001cf: 	movq	DATAat0x79e8(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp117 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp118:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp114 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp121 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp122:
    00000210: 	addq	$0x10, %rax
.Ltmp121:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp122 # Offset: 542
.Ltmp127:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x70c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp123 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp124 # Offset: 592
.Ltmp123:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp111:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp124:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp125:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp125 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x7992(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp111 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp112:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp126 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp114:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp127 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x2c90
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x2c90
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp128 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp129 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp130:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp130 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp135:
    0000006a: 	leaq	DATAat0x79d2(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x70f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x79b8(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x79d2(%rip), %r8
    000000a1: 	leaq	DATAat0x79a6(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp131 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp132:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x79b7(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp132 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp131 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp133 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp134:
    00000140: 	addq	$0x10, %rax
.Ltmp133:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp134 # Offset: 334
.Ltmp136:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x70c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp128:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp129:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp135 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp131:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp136 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x2e40
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x2e40
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x2e60
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2e60
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_Z25test_array_reduction_opt2IiEvPT_PKS0_PKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x2ea0
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x2ea0
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt2IiEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp137 # Offset: 47
    00000035: 	xorl	%r15d, %r15d
    00000038: 	leaq	0x320(%r14), %r13
    0000003f: 	leaq	0x4b0(%r12), %rbx
    00000047: 	leaq	DATAat0x79d4(%rip), %rcx
.Ltmp144:
    0000004e: 	movd	init_value(%rip), %xmm3
    00000056: 	movq	%r14, %rdi
    00000059: 	movq	%r14, %rax
    0000005c: 	pshufd	$0x0, %xmm3, %xmm0
.Ltmp138:
    00000061: 	movups	%xmm0, (%rax)
    00000064: 	addq	$0x10, %rax
    00000068: 	cmpq	%rax, %r13
    0000006b: 	jne	.Ltmp138 # Offset: 107
    0000006d: 	movq	%r14, %rsi
.Ltmp140:
    00000070: 	movd	(%rsi), %xmm0
    00000074: 	movq	%r12, %rax
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp139:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	paddd	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %rbx
    0000008f: 	jne	.Ltmp139 # Offset: 143
    00000091: 	pshufd	$0x55, %xmm0, %xmm1
    00000096: 	movd	%xmm0, %edx
    0000009a: 	addq	$0x4, %rsi
    0000009e: 	movd	%xmm1, %eax
    000000a2: 	movdqa	%xmm0, %xmm1
    000000a6: 	punpckhdq	%xmm0, %xmm1
    000000aa: 	addl	%edx, %eax
    000000ac: 	pshufd	$0xff, %xmm0, %xmm0
    000000b1: 	movd	%xmm1, %edx
    000000b5: 	addl	%eax, %edx
    000000b7: 	movd	%xmm0, %eax
    000000bb: 	addl	%edx, %eax
    000000bd: 	movl	%eax, -0x4(%rsi)
    000000c0: 	cmpq	%r13, %rsi
    000000c3: 	jne	.Ltmp140 # Offset: 195
    000000c5: 	imull	$0x12d, init_value(%rip), %eax
    000000cf: 	jmp	.Ltmp141 # Offset: 207
.Ltmp143:
    000000d1: 	addq	$0x4, %rdi
    000000d5: 	cmpq	%rdi, %r13
    000000d8: 	je	.Ltmp142 # Offset: 216
.Ltmp141:
    000000da: 	cmpl	(%rdi), %eax
    000000dc: 	je	.Ltmp143 # Offset: 220
    000000de: 	movl	current_test(%rip), %edx
    000000e4: 	movq	%rcx, %rsi
    000000e7: 	movl	$0x1, %edi
    000000ec: 	xorl	%eax, %eax
    000000ee: 	callq	__printf_chk@PLT # Offset: 238
    000000f3: 	leaq	DATAat0x79d4(%rip), %rcx
.Ltmp142:
    000000fa: 	addl	$0x1, %r15d
    000000fe: 	cmpl	%r15d, iterations(%rip)
    00000105: 	jg	.Ltmp144 # Offset: 261
.Ltmp137:
    0000010b: 	callq	clock@PLT # Offset: 267
    00000110: 	pxor	%xmm0, %xmm0
    00000114: 	movq	%rbp, %rdi
    00000117: 	movq	%rax, end_time(%rip)
    0000011e: 	subq	start_time(%rip), %rax
    00000125: 	cvtsi2sd	%rax, %xmm0
    0000012a: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000132: 	addq	$0x8, %rsp
    00000136: 	popq	%rbx
    00000137: 	popq	%rbp
    00000138: 	popq	%r12
    0000013a: 	popq	%r13
    0000013c: 	popq	%r14
    0000013e: 	popq	%r15
    00000140: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt2IiEvPT_PKS0_PKc"

Binary Function "_Z25test_array_reduction_opt3IiEvPT_PKS0_PKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x2ff0
  Size        : 0x124
  MaxSize     : 0x130
  Offset      : 0x2ff0
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt3IiEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp145 # Offset: 47
    00000035: 	xorl	%r15d, %r15d
    00000038: 	leaq	0x320(%rbp), %r14
    0000003f: 	leaq	0x4b0(%r13), %rbx
    00000046: 	leaq	DATAat0x79d4(%rip), %rsi
.Ltmp151:
    0000004d: 	movq	%rbp, %rdi
    00000050: 	movq	%rbp, %rdx
.Ltmp147:
    00000053: 	movl	init_value(%rip), %ecx
    00000059: 	movq	%r13, %rax
    0000005c: 	pxor	%xmm0, %xmm0
.Ltmp146:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddd	%xmm2, %xmm0
    0000006c: 	cmpq	%rbx, %rax
    0000006f: 	jne	.Ltmp146 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	addq	$0x10, %rdx
    00000079: 	psrldq	$0x8, %xmm1
    0000007e: 	paddd	%xmm1, %xmm0
    00000082: 	movdqa	%xmm0, %xmm1
    00000086: 	psrldq	$0x4, %xmm1
    0000008b: 	paddd	%xmm1, %xmm0
    0000008f: 	movd	%xmm0, %eax
    00000093: 	addl	%ecx, %eax
    00000095: 	movd	%eax, %xmm3
    00000099: 	pshufd	$0x0, %xmm3, %xmm0
    0000009e: 	movups	%xmm0, -0x10(%rdx)
    000000a2: 	cmpq	%r14, %rdx
    000000a5: 	jne	.Ltmp147 # Offset: 165
    000000a7: 	imull	$0x12d, init_value(%rip), %eax
    000000b1: 	jmp	.Ltmp148 # Offset: 177
.Ltmp150:
    000000b3: 	addq	$0x4, %rdi
    000000b7: 	cmpq	%r14, %rdi
    000000ba: 	je	.Ltmp149 # Offset: 186
.Ltmp148:
    000000bc: 	cmpl	(%rdi), %eax
    000000be: 	je	.Ltmp150 # Offset: 190
    000000c0: 	movl	current_test(%rip), %edx
    000000c6: 	movl	$0x1, %edi
    000000cb: 	xorl	%eax, %eax
    000000cd: 	callq	__printf_chk@PLT # Offset: 205
    000000d2: 	leaq	DATAat0x79d4(%rip), %rsi
.Ltmp149:
    000000d9: 	addl	$0x1, %r15d
    000000dd: 	cmpl	%r15d, iterations(%rip)
    000000e4: 	jg	.Ltmp151 # Offset: 228
.Ltmp145:
    000000ea: 	callq	clock@PLT # Offset: 234
    000000ef: 	pxor	%xmm0, %xmm0
    000000f3: 	movq	%r12, %rdi
    000000f6: 	movq	%rax, end_time(%rip)
    000000fd: 	subq	start_time(%rip), %rax
    00000104: 	cvtsi2sd	%rax, %xmm0
    00000109: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000111: 	addq	$0x8, %rsp
    00000115: 	popq	%rbx
    00000116: 	popq	%rbp
    00000117: 	popq	%r12
    00000119: 	popq	%r13
    0000011b: 	popq	%r14
    0000011d: 	popq	%r15
    0000011f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt3IiEvPT_PKS0_PKc"

Binary Function "_Z25test_array_reduction_opt4IiEvPT_PKS0_PKc" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x3120
  Size        : 0x13f
  MaxSize     : 0x140
  Offset      : 0x3120
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt4IiEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp152 # Offset: 49
    00000037: 	xorl	%r15d, %r15d
    0000003a: 	leaq	0x4b0(%rbx), %r13
    00000041: 	leaq	0x320(%r12), %r14
    00000049: 	leaq	DATAat0x79d4(%rip), %rbp
.Ltmp158:
    00000050: 	movd	init_value(%rip), %xmm0
    00000058: 	movq	%rbx, %rax
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp153:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddd	%xmm2, %xmm0
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp153 # Offset: 111
    00000071: 	pshufd	$0x55, %xmm0, %xmm1
    00000076: 	movd	%xmm0, %eax
    0000007a: 	movd	%xmm1, %edx
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	punpckhdq	%xmm0, %xmm1
    00000086: 	addl	%eax, %edx
    00000088: 	pshufd	$0xff, %xmm0, %xmm0
    0000008d: 	movd	%xmm1, %eax
    00000091: 	addl	%eax, %edx
    00000093: 	movd	%xmm0, %eax
    00000097: 	addl	%eax, %edx
    00000099: 	movq	%r12, %rax
    0000009c: 	movd	%edx, %xmm3
    000000a0: 	movq	%r12, %rdx
    000000a3: 	pshufd	$0x0, %xmm3, %xmm0
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp154:
    000000b0: 	movups	%xmm0, (%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%r14, %rax
    000000ba: 	jne	.Ltmp154 # Offset: 186
    000000bc: 	imull	$0x12d, init_value(%rip), %eax
    000000c6: 	jmp	.Ltmp155 # Offset: 198
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp157:
    000000d0: 	addq	$0x4, %rdx
    000000d4: 	cmpq	%rdx, %r14
    000000d7: 	je	.Ltmp156 # Offset: 215
.Ltmp155:
    000000d9: 	cmpl	(%rdx), %eax
    000000db: 	je	.Ltmp157 # Offset: 219
    000000dd: 	movl	current_test(%rip), %edx
    000000e3: 	movq	%rbp, %rsi
    000000e6: 	movl	$0x1, %edi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	callq	__printf_chk@PLT # Offset: 237
.Ltmp156:
    000000f2: 	addl	$0x1, %r15d
    000000f6: 	cmpl	%r15d, iterations(%rip)
    000000fd: 	jg	.Ltmp158 # Offset: 253
.Ltmp152:
    00000103: 	callq	clock@PLT # Offset: 259
    00000108: 	pxor	%xmm0, %xmm0
    0000010c: 	movq	0x8(%rsp), %rdi
    00000111: 	movq	%rax, end_time(%rip)
    00000118: 	subq	start_time(%rip), %rax
    0000011f: 	cvtsi2sd	%rax, %xmm0
    00000124: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000012c: 	addq	$0x18, %rsp
    00000130: 	popq	%rbx
    00000131: 	popq	%rbp
    00000132: 	popq	%r12
    00000134: 	popq	%r13
    00000136: 	popq	%r14
    00000138: 	popq	%r15
    0000013a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 314
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt4IiEvPT_PKS0_PKc"

Binary Function "_Z25test_array_reduction_opt2ImEvPT_PKS0_PKc" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x3260
  Size        : 0x14e
  MaxSize     : 0x150
  Offset      : 0x3260
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt2ImEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp159 # Offset: 47
    00000035: 	xorl	%r15d, %r15d
    00000038: 	leaq	0x640(%r14), %r13
    0000003f: 	leaq	0x960(%r12), %rbx
    00000047: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp166:
    0000004e: 	movslq	init_value(%rip), %rax
    00000055: 	movq	%r14, %r9
    00000058: 	movq	%rax, %xmm0
    0000005d: 	movq	%rax, %rdi
    00000060: 	movq	%r14, %rax
    00000063: 	punpcklqdq	%xmm0, %xmm0
.Ltmp160:
    00000067: 	movups	%xmm0, (%rax)
    0000006a: 	addq	$0x10, %rax
    0000006e: 	cmpq	%r13, %rax
    00000071: 	jne	.Ltmp160 # Offset: 113
    00000073: 	movq	%r14, %rsi
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp162:
    00000080: 	movq	(%rsi), %xmm2
    00000084: 	movq	%r12, %rax
    00000087: 	pxor	%xmm1, %xmm1
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp161:
    00000090: 	movdqu	0x10(%rax), %xmm4
    00000095: 	movdqu	(%rax), %xmm3
    00000099: 	addq	$0x20, %rax
    0000009d: 	paddq	%xmm4, %xmm1
    000000a1: 	paddq	%xmm3, %xmm2
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	paddq	%xmm2, %xmm0
    000000ad: 	movhlps	%xmm0, %xmm5
    000000b0: 	movq	%xmm0, %rcx
    000000b5: 	movq	%xmm5, %rdx
    000000ba: 	cmpq	%rax, %rbx
    000000bd: 	jne	.Ltmp161 # Offset: 189
    000000bf: 	addq	%rdx, %rcx
    000000c2: 	addq	$0x8, %rsi
    000000c6: 	movq	%rcx, -0x8(%rsi)
    000000ca: 	cmpq	%r13, %rsi
    000000cd: 	jne	.Ltmp162 # Offset: 205
    000000cf: 	imull	$0x12d, %edi, %eax
    000000d5: 	cltq
    000000d7: 	jmp	.Ltmp163 # Offset: 215
.Ltmp165:
    000000d9: 	addq	$0x8, %r9
    000000dd: 	cmpq	%r9, %r13
    000000e0: 	je	.Ltmp164 # Offset: 224
.Ltmp163:
    000000e2: 	cmpq	(%r9), %rax
    000000e5: 	je	.Ltmp165 # Offset: 229
    000000e7: 	movl	current_test(%rip), %edx
    000000ed: 	movq	%r8, %rsi
    000000f0: 	movl	$0x1, %edi
    000000f5: 	xorl	%eax, %eax
    000000f7: 	callq	__printf_chk@PLT # Offset: 247
    000000fc: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp164:
    00000103: 	addl	$0x1, %r15d
    00000107: 	cmpl	%r15d, iterations(%rip)
    0000010e: 	jg	.Ltmp166 # Offset: 270
.Ltmp159:
    00000114: 	callq	clock@PLT # Offset: 276
    00000119: 	pxor	%xmm0, %xmm0
    0000011d: 	movq	%rbp, %rdi
    00000120: 	movq	%rax, end_time(%rip)
    00000127: 	subq	start_time(%rip), %rax
    0000012e: 	cvtsi2sd	%rax, %xmm0
    00000133: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000013b: 	addq	$0x8, %rsp
    0000013f: 	popq	%rbx
    00000140: 	popq	%rbp
    00000141: 	popq	%r12
    00000143: 	popq	%r13
    00000145: 	popq	%r14
    00000147: 	popq	%r15
    00000149: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 329
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt2ImEvPT_PKS0_PKc"

Binary Function "_Z25test_array_reduction_opt3ImEvPT_PKS0_PKc" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x33b0
  Size        : 0x125
  MaxSize     : 0x130
  Offset      : 0x33b0
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt3ImEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp167 # Offset: 47
    00000035: 	xorl	%r15d, %r15d
    00000038: 	leaq	0x640(%rbp), %r14
    0000003f: 	leaq	0x960(%r13), %rbx
    00000046: 	leaq	DATAat0x79d4(%rip), %rsi
.Ltmp173:
    0000004d: 	movslq	init_value(%rip), %rcx
    00000054: 	movq	%rbp, %rdi
    00000057: 	movq	%rbp, %rdx
    0000005a: 	movq	%rcx, %r8
.Ltmp169:
    0000005d: 	movq	%r13, %rax
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp168:
    00000068: 	movdqu	(%rax), %xmm2
    0000006c: 	addq	$0x10, %rax
    00000070: 	paddq	%xmm2, %xmm0
    00000074: 	cmpq	%rbx, %rax
    00000077: 	jne	.Ltmp168 # Offset: 119
    00000079: 	movdqa	%xmm0, %xmm1
    0000007d: 	addq	$0x20, %rdx
    00000081: 	psrldq	$0x8, %xmm1
    00000086: 	paddq	%xmm1, %xmm0
    0000008a: 	movq	%xmm0, %rax
    0000008f: 	addq	%rcx, %rax
    00000092: 	movq	%rax, %xmm0
    00000097: 	punpcklqdq	%xmm0, %xmm0
    0000009b: 	movups	%xmm0, -0x20(%rdx)
    0000009f: 	movups	%xmm0, -0x10(%rdx)
    000000a3: 	cmpq	%rdx, %r14
    000000a6: 	jne	.Ltmp169 # Offset: 166
    000000a8: 	imull	$0x12d, %r8d, %eax
    000000af: 	cltq
    000000b1: 	jmp	.Ltmp170 # Offset: 177
.Ltmp172:
    000000b3: 	addq	$0x8, %rdi
    000000b7: 	cmpq	%rdi, %r14
    000000ba: 	je	.Ltmp171 # Offset: 186
.Ltmp170:
    000000bc: 	cmpq	(%rdi), %rax
    000000bf: 	je	.Ltmp172 # Offset: 191
    000000c1: 	movl	current_test(%rip), %edx
    000000c7: 	movl	$0x1, %edi
    000000cc: 	xorl	%eax, %eax
    000000ce: 	callq	__printf_chk@PLT # Offset: 206
    000000d3: 	leaq	DATAat0x79d4(%rip), %rsi
.Ltmp171:
    000000da: 	addl	$0x1, %r15d
    000000de: 	cmpl	%r15d, iterations(%rip)
    000000e5: 	jg	.Ltmp173 # Offset: 229
.Ltmp167:
    000000eb: 	callq	clock@PLT # Offset: 235
    000000f0: 	pxor	%xmm0, %xmm0
    000000f4: 	movq	%r12, %rdi
    000000f7: 	movq	%rax, end_time(%rip)
    000000fe: 	subq	start_time(%rip), %rax
    00000105: 	cvtsi2sd	%rax, %xmm0
    0000010a: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000112: 	addq	$0x8, %rsp
    00000116: 	popq	%rbx
    00000117: 	popq	%rbp
    00000118: 	popq	%r12
    0000011a: 	popq	%r13
    0000011c: 	popq	%r14
    0000011e: 	popq	%r15
    00000120: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 288
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt3ImEvPT_PKS0_PKc"

Binary Function "_Z25test_array_reduction_opt4ImEvPT_PKS0_PKc" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x34e0
  Size        : 0x140
  MaxSize     : 0x140
  Offset      : 0x34e0
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt4ImEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp174 # Offset: 49
    00000037: 	xorl	%r15d, %r15d
    0000003a: 	leaq	0x960(%rbx), %r13
    00000041: 	leaq	0x640(%r12), %r14
    00000049: 	leaq	DATAat0x79d4(%rip), %rbp
.Ltmp180:
    00000050: 	movslq	init_value(%rip), %rax
    00000057: 	pxor	%xmm2, %xmm2
    0000005b: 	movq	%rax, %rdi
    0000005e: 	movq	%rax, %xmm1
    00000063: 	movq	%rbx, %rax
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp175:
    00000070: 	movdqu	0x10(%rax), %xmm4
    00000075: 	movdqu	(%rax), %xmm3
    00000079: 	addq	$0x20, %rax
    0000007d: 	paddq	%xmm4, %xmm2
    00000081: 	paddq	%xmm3, %xmm1
    00000085: 	movdqa	%xmm2, %xmm0
    00000089: 	paddq	%xmm1, %xmm0
    0000008d: 	movhlps	%xmm0, %xmm5
    00000090: 	movq	%xmm0, %rsi
    00000095: 	movq	%xmm5, %rdx
    0000009a: 	cmpq	%r13, %rax
    0000009d: 	jne	.Ltmp175 # Offset: 157
    0000009f: 	leaq	(%rsi,%rdx), %rax
    000000a3: 	movq	%r12, %rdx
    000000a6: 	movq	%rax, %xmm0
    000000ab: 	movq	%r12, %rax
    000000ae: 	punpcklqdq	%xmm0, %xmm0
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp176:
    000000b8: 	movups	%xmm0, (%rax)
    000000bb: 	addq	$0x10, %rax
    000000bf: 	cmpq	%r14, %rax
    000000c2: 	jne	.Ltmp176 # Offset: 194
    000000c4: 	imull	$0x12d, %edi, %eax
    000000ca: 	cltq
    000000cc: 	jmp	.Ltmp177 # Offset: 204
    000000ce: 	nop # Size: 2
.Ltmp179:
    000000d0: 	addq	$0x8, %rdx
    000000d4: 	cmpq	%rdx, %r14
    000000d7: 	je	.Ltmp178 # Offset: 215
.Ltmp177:
    000000d9: 	cmpq	(%rdx), %rax
    000000dc: 	je	.Ltmp179 # Offset: 220
    000000de: 	movl	current_test(%rip), %edx
    000000e4: 	movq	%rbp, %rsi
    000000e7: 	movl	$0x1, %edi
    000000ec: 	xorl	%eax, %eax
    000000ee: 	callq	__printf_chk@PLT # Offset: 238
.Ltmp178:
    000000f3: 	addl	$0x1, %r15d
    000000f7: 	cmpl	%r15d, iterations(%rip)
    000000fe: 	jg	.Ltmp180 # Offset: 254
.Ltmp174:
    00000104: 	callq	clock@PLT # Offset: 260
    00000109: 	pxor	%xmm0, %xmm0
    0000010d: 	movq	0x8(%rsp), %rdi
    00000112: 	movq	%rax, end_time(%rip)
    00000119: 	subq	start_time(%rip), %rax
    00000120: 	cvtsi2sd	%rax, %xmm0
    00000125: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000012d: 	addq	$0x18, %rsp
    00000131: 	popq	%rbx
    00000132: 	popq	%rbp
    00000133: 	popq	%r12
    00000135: 	popq	%r13
    00000137: 	popq	%r14
    00000139: 	popq	%r15
    0000013b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 315
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt4ImEvPT_PKS0_PKc"

Binary Function "_Z25test_array_reduction_opt1IdEvPT_PKS0_PKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x3620
  Size        : 0x12f
  MaxSize     : 0x130
  Offset      : 0x3620
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt1IdEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp181 # Offset: 47
    00000035: 	xorl	%r15d, %r15d
    00000038: 	leaq	0x640(%r14), %r12
    0000003f: 	leaq	0x960(%rbp), %rbx
    00000046: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp189:
    0000004d: 	movl	init_value(%rip), %ecx
    00000053: 	pxor	%xmm0, %xmm0
    00000057: 	movq	%r14, %rsi
    0000005a: 	movq	%r14, %rax
    0000005d: 	cvtsi2sd	%ecx, %xmm0
    00000061: 	unpcklpd	%xmm0, %xmm0
.Ltmp182:
    00000065: 	movups	%xmm0, (%rax)
    00000068: 	addq	$0x10, %rax
    0000006c: 	cmpq	%r12, %rax
    0000006f: 	jne	.Ltmp182 # Offset: 111
    00000071: 	movq	%r14, %rdx
.Ltmp184:
    00000074: 	movsd	(%rdx), %xmm0
    00000078: 	movq	%rbp, %rax
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp183:
    00000080: 	movsd	(%rax), %xmm1
    00000084: 	addq	$0x10, %rax
    00000088: 	addsd	%xmm0, %xmm1
    0000008c: 	movsd	-0x8(%rax), %xmm0
    00000091: 	addsd	%xmm1, %xmm0
    00000095: 	cmpq	%rbx, %rax
    00000098: 	jne	.Ltmp183 # Offset: 152
    0000009a: 	movsd	%xmm0, (%rdx)
    0000009e: 	addq	$0x8, %rdx
    000000a2: 	cmpq	%r12, %rdx
    000000a5: 	jne	.Ltmp184 # Offset: 165
    000000a7: 	imull	$0x12d, %ecx, %ecx
    000000ad: 	pxor	%xmm0, %xmm0
    000000b1: 	cvtsi2sd	%ecx, %xmm0
    000000b5: 	jmp	.Ltmp185 # Offset: 181
.Ltmp188:
    000000b7: 	addq	$0x8, %rsi
    000000bb: 	cmpq	%r12, %rsi
    000000be: 	je	.Ltmp186 # Offset: 190
.Ltmp185:
    000000c0: 	ucomisd	(%rsi), %xmm0
    000000c4: 	jp	.Ltmp187 # Offset: 196
    000000c6: 	je	.Ltmp188 # Offset: 198
.Ltmp187:
    000000c8: 	movl	current_test(%rip), %edx
    000000ce: 	movq	%r8, %rsi
    000000d1: 	movl	$0x1, %edi
    000000d6: 	xorl	%eax, %eax
    000000d8: 	callq	__printf_chk@PLT # Offset: 216
    000000dd: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp186:
    000000e4: 	addl	$0x1, %r15d
    000000e8: 	cmpl	%r15d, iterations(%rip)
    000000ef: 	jg	.Ltmp189 # Offset: 239
.Ltmp181:
    000000f5: 	callq	clock@PLT # Offset: 245
    000000fa: 	pxor	%xmm0, %xmm0
    000000fe: 	movq	%r13, %rdi
    00000101: 	movq	%rax, end_time(%rip)
    00000108: 	subq	start_time(%rip), %rax
    0000010f: 	cvtsi2sd	%rax, %xmm0
    00000114: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000011c: 	addq	$0x8, %rsp
    00000120: 	popq	%rbx
    00000121: 	popq	%rbp
    00000122: 	popq	%r12
    00000124: 	popq	%r13
    00000126: 	popq	%r14
    00000128: 	popq	%r15
    0000012a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 298
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt1IdEvPT_PKS0_PKc"

Binary Function "_Z25test_array_reduction_opt2IdEvPT_PKS0_PKc" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x3750
  Size        : 0x150
  MaxSize     : 0x150
  Offset      : 0x3750
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt2IdEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp190 # Offset: 47
    00000035: 	xorl	%r15d, %r15d
    00000038: 	leaq	0x640(%r14), %r13
    0000003f: 	leaq	0x960(%rbp), %rbx
    00000046: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp198:
    0000004d: 	movl	init_value(%rip), %esi
    00000053: 	pxor	%xmm0, %xmm0
    00000057: 	movq	%r14, %rcx
    0000005a: 	movq	%r14, %rax
    0000005d: 	cvtsi2sd	%esi, %xmm0
    00000061: 	unpcklpd	%xmm0, %xmm0
.Ltmp191:
    00000065: 	movups	%xmm0, (%rax)
    00000068: 	addq	$0x10, %rax
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp191 # Offset: 111
    00000071: 	movq	%r14, %rdx
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp193:
    00000078: 	movq	(%rdx), %xmm1
    0000007c: 	movq	%rbp, %rax
    0000007f: 	pxor	%xmm0, %xmm0
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp192:
    00000088: 	movupd	(%rax), %xmm3
    0000008c: 	movupd	0x10(%rax), %xmm4
    00000091: 	addq	$0x20, %rax
    00000095: 	addpd	%xmm3, %xmm1
    00000099: 	addpd	%xmm4, %xmm0
    0000009d: 	cmpq	%rax, %rbx
    000000a0: 	jne	.Ltmp192 # Offset: 160
    000000a2: 	movapd	%xmm1, %xmm5
    000000a6: 	addq	$0x8, %rdx
    000000aa: 	unpckhpd	%xmm5, %xmm5
    000000ae: 	addsd	%xmm5, %xmm1
    000000b2: 	addsd	%xmm0, %xmm1
    000000b6: 	unpckhpd	%xmm0, %xmm0
    000000ba: 	addsd	%xmm0, %xmm1
    000000be: 	movsd	%xmm1, -0x8(%rdx)
    000000c3: 	cmpq	%r13, %rdx
    000000c6: 	jne	.Ltmp193 # Offset: 198
    000000c8: 	imull	$0x12d, %esi, %esi
    000000ce: 	pxor	%xmm0, %xmm0
    000000d2: 	cvtsi2sd	%esi, %xmm0
    000000d6: 	jmp	.Ltmp194 # Offset: 214
.Ltmp197:
    000000d8: 	addq	$0x8, %rcx
    000000dc: 	cmpq	%rcx, %r13
    000000df: 	je	.Ltmp195 # Offset: 223
.Ltmp194:
    000000e1: 	ucomisd	(%rcx), %xmm0
    000000e5: 	jp	.Ltmp196 # Offset: 229
    000000e7: 	je	.Ltmp197 # Offset: 231
.Ltmp196:
    000000e9: 	movl	current_test(%rip), %edx
    000000ef: 	movq	%r8, %rsi
    000000f2: 	movl	$0x1, %edi
    000000f7: 	xorl	%eax, %eax
    000000f9: 	callq	__printf_chk@PLT # Offset: 249
    000000fe: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp195:
    00000105: 	addl	$0x1, %r15d
    00000109: 	cmpl	%r15d, iterations(%rip)
    00000110: 	jg	.Ltmp198 # Offset: 272
.Ltmp190:
    00000116: 	callq	clock@PLT # Offset: 278
    0000011b: 	pxor	%xmm0, %xmm0
    0000011f: 	movq	%r12, %rdi
    00000122: 	movq	%rax, end_time(%rip)
    00000129: 	subq	start_time(%rip), %rax
    00000130: 	cvtsi2sd	%rax, %xmm0
    00000135: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000013d: 	addq	$0x8, %rsp
    00000141: 	popq	%rbx
    00000142: 	popq	%rbp
    00000143: 	popq	%r12
    00000145: 	popq	%r13
    00000147: 	popq	%r14
    00000149: 	popq	%r15
    0000014b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 331
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt2IdEvPT_PKS0_PKc"

Binary Function "_Z25test_array_reduction_opt3IdEvPT_PKS0_PKc" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x38a0
  Size        : 0x127
  MaxSize     : 0x130
  Offset      : 0x38a0
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt3IdEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp199 # Offset: 47
    00000035: 	xorl	%r15d, %r15d
    00000038: 	leaq	0x640(%r12), %r14
    00000040: 	leaq	0x960(%rbp), %rbx
    00000047: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp206:
    0000004e: 	movl	init_value(%rip), %esi
    00000054: 	pxor	%xmm2, %xmm2
    00000058: 	movq	%r12, %rcx
    0000005b: 	movq	%r12, %rdx
    0000005e: 	cvtsi2sd	%esi, %xmm2
.Ltmp201:
    00000062: 	movq	%rbp, %rax
    00000065: 	movapd	%xmm2, %xmm0
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp200:
    00000070: 	movsd	(%rax), %xmm1
    00000074: 	addq	$0x10, %rax
    00000078: 	addsd	%xmm0, %xmm1
    0000007c: 	movsd	-0x8(%rax), %xmm0
    00000081: 	addsd	%xmm1, %xmm0
    00000085: 	cmpq	%rbx, %rax
    00000088: 	jne	.Ltmp200 # Offset: 136
    0000008a: 	unpcklpd	%xmm0, %xmm0
    0000008e: 	addq	$0x20, %rdx
    00000092: 	movups	%xmm0, -0x20(%rdx)
    00000096: 	movups	%xmm0, -0x10(%rdx)
    0000009a: 	cmpq	%rdx, %r14
    0000009d: 	jne	.Ltmp201 # Offset: 157
    0000009f: 	imull	$0x12d, %esi, %esi
    000000a5: 	pxor	%xmm0, %xmm0
    000000a9: 	cvtsi2sd	%esi, %xmm0
    000000ad: 	jmp	.Ltmp202 # Offset: 173
.Ltmp205:
    000000af: 	addq	$0x8, %rcx
    000000b3: 	cmpq	%r14, %rcx
    000000b6: 	je	.Ltmp203 # Offset: 182
.Ltmp202:
    000000b8: 	ucomisd	(%rcx), %xmm0
    000000bc: 	jp	.Ltmp204 # Offset: 188
    000000be: 	je	.Ltmp205 # Offset: 190
.Ltmp204:
    000000c0: 	movl	current_test(%rip), %edx
    000000c6: 	movq	%r8, %rsi
    000000c9: 	movl	$0x1, %edi
    000000ce: 	xorl	%eax, %eax
    000000d0: 	callq	__printf_chk@PLT # Offset: 208
    000000d5: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp203:
    000000dc: 	addl	$0x1, %r15d
    000000e0: 	cmpl	%r15d, iterations(%rip)
    000000e7: 	jg	.Ltmp206 # Offset: 231
.Ltmp199:
    000000ed: 	callq	clock@PLT # Offset: 237
    000000f2: 	pxor	%xmm0, %xmm0
    000000f6: 	movq	%r13, %rdi
    000000f9: 	movq	%rax, end_time(%rip)
    00000100: 	subq	start_time(%rip), %rax
    00000107: 	cvtsi2sd	%rax, %xmm0
    0000010c: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000114: 	addq	$0x8, %rsp
    00000118: 	popq	%rbx
    00000119: 	popq	%rbp
    0000011a: 	popq	%r12
    0000011c: 	popq	%r13
    0000011e: 	popq	%r14
    00000120: 	popq	%r15
    00000122: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 290
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt3IdEvPT_PKS0_PKc"

Binary Function "_Z25test_array_reduction_opt4IdEvPT_PKS0_PKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x39d0
  Size        : 0x143
  MaxSize     : 0x150
  Offset      : 0x39d0
  Section     : .text
  Orc Section : .local.text._Z25test_array_reduction_opt4IdEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp207 # Offset: 49
    00000037: 	xorl	%r15d, %r15d
    0000003a: 	leaq	0x960(%rbp), %rbx
    00000041: 	leaq	0x640(%r13), %r14
    00000048: 	leaq	DATAat0x79d4(%rip), %r12
.Ltmp214:
    0000004f: 	movl	init_value(%rip), %esi
    00000055: 	pxor	%xmm0, %xmm0
    00000059: 	movq	%rbp, %rax
    0000005c: 	pxor	%xmm1, %xmm1
    00000060: 	cvtsi2sd	%esi, %xmm0
    00000064: 	movq	%xmm0, %xmm0
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp208:
    00000070: 	movupd	(%rax), %xmm3
    00000074: 	movupd	0x10(%rax), %xmm4
    00000079: 	addq	$0x20, %rax
    0000007d: 	addpd	%xmm3, %xmm0
    00000081: 	addpd	%xmm4, %xmm1
    00000085: 	cmpq	%rbx, %rax
    00000088: 	jne	.Ltmp208 # Offset: 136
    0000008a: 	movapd	%xmm0, %xmm5
    0000008e: 	movq	%r13, %rdx
    00000091: 	movq	%r13, %rax
    00000094: 	unpckhpd	%xmm5, %xmm5
    00000098: 	addsd	%xmm5, %xmm0
    0000009c: 	addsd	%xmm1, %xmm0
    000000a0: 	unpckhpd	%xmm1, %xmm1
    000000a4: 	addsd	%xmm1, %xmm0
    000000a8: 	unpcklpd	%xmm0, %xmm0
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp209:
    000000b0: 	movups	%xmm0, (%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%r14, %rax
    000000ba: 	jne	.Ltmp209 # Offset: 186
    000000bc: 	imull	$0x12d, %esi, %esi
    000000c2: 	pxor	%xmm0, %xmm0
    000000c6: 	cvtsi2sd	%esi, %xmm0
    000000ca: 	jmp	.Ltmp210 # Offset: 202
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp213:
    000000d0: 	addq	$0x8, %rdx
    000000d4: 	cmpq	%rdx, %r14
    000000d7: 	je	.Ltmp211 # Offset: 215
.Ltmp210:
    000000d9: 	ucomisd	(%rdx), %xmm0
    000000dd: 	jp	.Ltmp212 # Offset: 221
    000000df: 	je	.Ltmp213 # Offset: 223
.Ltmp212:
    000000e1: 	movl	current_test(%rip), %edx
    000000e7: 	movq	%r12, %rsi
    000000ea: 	movl	$0x1, %edi
    000000ef: 	xorl	%eax, %eax
    000000f1: 	callq	__printf_chk@PLT # Offset: 241
.Ltmp211:
    000000f6: 	addl	$0x1, %r15d
    000000fa: 	cmpl	%r15d, iterations(%rip)
    00000101: 	jg	.Ltmp214 # Offset: 257
.Ltmp207:
    00000107: 	callq	clock@PLT # Offset: 263
    0000010c: 	pxor	%xmm0, %xmm0
    00000110: 	movq	0x8(%rsp), %rdi
    00000115: 	movq	%rax, end_time(%rip)
    0000011c: 	subq	start_time(%rip), %rax
    00000123: 	cvtsi2sd	%rax, %xmm0
    00000128: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000130: 	addq	$0x18, %rsp
    00000134: 	popq	%rbx
    00000135: 	popq	%rbp
    00000136: 	popq	%r12
    00000138: 	popq	%r13
    0000013a: 	popq	%r14
    0000013c: 	popq	%r15
    0000013e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 318
DWARF CFI Instructions:
    <empty>
End of Function "_Z25test_array_reduction_opt4IdEvPT_PKS0_PKc"

Binary Function "_Z20test_array_reductionIdEvPT_PKS0_PKc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x3b20
  Size        : 0x11f
  MaxSize     : 0x120
  Offset      : 0x3b20
  Section     : .text
  Orc Section : .local.text._Z20test_array_reductionIdEvPT_PKS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp215 # Offset: 47
    00000035: 	xorl	%r15d, %r15d
    00000038: 	leaq	0x640(%r14), %r13
    0000003f: 	leaq	0x960(%rbp), %rbx
    00000046: 	leaq	DATAat0x79d4(%rip), %rsi
.Ltmp223:
    0000004d: 	movl	init_value(%rip), %ecx
    00000053: 	pxor	%xmm0, %xmm0
    00000057: 	movq	%r14, %rdi
    0000005a: 	movq	%r14, %rax
    0000005d: 	cvtsi2sd	%ecx, %xmm0
    00000061: 	unpcklpd	%xmm0, %xmm0
.Ltmp216:
    00000065: 	movups	%xmm0, (%rax)
    00000068: 	addq	$0x10, %rax
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp216 # Offset: 111
    00000071: 	movq	%r14, %rdx
.Ltmp218:
    00000074: 	movsd	(%rdx), %xmm0
    00000078: 	movq	%rbp, %rax
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp217:
    00000080: 	addsd	(%rax), %xmm0
    00000084: 	addq	$0x8, %rax
    00000088: 	movsd	%xmm0, (%rdx)
    0000008c: 	cmpq	%rax, %rbx
    0000008f: 	jne	.Ltmp217 # Offset: 143
    00000091: 	addq	$0x8, %rdx
    00000095: 	cmpq	%r13, %rdx
    00000098: 	jne	.Ltmp218 # Offset: 152
    0000009a: 	imull	$0x12d, %ecx, %ecx
    000000a0: 	pxor	%xmm0, %xmm0
    000000a4: 	cvtsi2sd	%ecx, %xmm0
    000000a8: 	jmp	.Ltmp219 # Offset: 168
.Ltmp222:
    000000aa: 	addq	$0x8, %rdi
    000000ae: 	cmpq	%r13, %rdi
    000000b1: 	je	.Ltmp220 # Offset: 177
.Ltmp219:
    000000b3: 	ucomisd	(%rdi), %xmm0
    000000b7: 	jp	.Ltmp221 # Offset: 183
    000000b9: 	je	.Ltmp222 # Offset: 185
.Ltmp221:
    000000bb: 	movl	current_test(%rip), %edx
    000000c1: 	movl	$0x1, %edi
    000000c6: 	xorl	%eax, %eax
    000000c8: 	callq	__printf_chk@PLT # Offset: 200
    000000cd: 	leaq	DATAat0x79d4(%rip), %rsi
.Ltmp220:
    000000d4: 	addl	$0x1, %r15d
    000000d8: 	cmpl	%r15d, iterations(%rip)
    000000df: 	jg	.Ltmp223 # Offset: 223
.Ltmp215:
    000000e5: 	callq	clock@PLT # Offset: 229
    000000ea: 	pxor	%xmm0, %xmm0
    000000ee: 	movq	%r12, %rdi
    000000f1: 	movq	%rax, end_time(%rip)
    000000f8: 	subq	start_time(%rip), %rax
    000000ff: 	cvtsi2sd	%rax, %xmm0
    00000104: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000010c: 	addq	$0x8, %rsp
    00000110: 	popq	%rbx
    00000111: 	popq	%rbp
    00000112: 	popq	%r12
    00000114: 	popq	%r13
    00000116: 	popq	%r14
    00000118: 	popq	%r15
    0000011a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 282
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_array_reductionIdEvPT_PKS0_PKc"

Binary Function "_Z21test_array_dmxpy_opt2IiEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x3c40
  Size        : 0x172
  MaxSize     : 0x180
  Offset      : 0x3c40
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt2IiEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rcx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rsi, (%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp224 # Offset: 51
    00000039: 	xorl	%r8d, %r8d
    0000003c: 	leaq	0x320(%rbx), %r15
    00000043: 	leaq	0x3a980(%rbp), %r14
    0000004a: 	leaq	DATAat0x79d4(%rip), %r13
.Ltmp231:
    00000051: 	movd	init_value(%rip), %xmm5
    00000059: 	movq	%rbx, %rsi
    0000005c: 	movq	%rbx, %rax
    0000005f: 	pshufd	$0x0, %xmm5, %xmm0
.Ltmp225:
    00000064: 	movups	%xmm0, (%rax)
    00000067: 	addq	$0x10, %rax
    0000006b: 	cmpq	%r15, %rax
    0000006e: 	jne	.Ltmp225 # Offset: 110
    00000070: 	movq	(%rsp), %rcx
    00000074: 	movq	%rbp, %rdx
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp227:
    00000080: 	movd	(%rcx), %xmm4
    00000084: 	xorl	%eax, %eax
    00000086: 	pshufd	$0x0, %xmm4, %xmm2
    0000008b: 	movdqa	%xmm2, %xmm3
    0000008f: 	psrlq	$0x20, %xmm3
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp226:
    00000098: 	movdqu	(%rdx,%rax), %xmm0
    0000009d: 	movdqu	(%rdx,%rax), %xmm1
    000000a2: 	psrlq	$0x20, %xmm0
    000000a7: 	pmuludq	%xmm2, %xmm1
    000000ab: 	pmuludq	%xmm3, %xmm0
    000000af: 	pshufd	$0x8, %xmm1, %xmm1
    000000b4: 	pshufd	$0x8, %xmm0, %xmm0
    000000b9: 	punpckldq	%xmm0, %xmm1
    000000bd: 	movdqu	(%rbx,%rax), %xmm0
    000000c2: 	paddd	%xmm1, %xmm0
    000000c6: 	movups	%xmm0, (%rbx,%rax)
    000000ca: 	addq	$0x10, %rax
    000000ce: 	cmpq	$0x320, %rax
    000000d4: 	jne	.Ltmp226 # Offset: 212
    000000d6: 	addq	$0x320, %rdx
    000000dd: 	addq	$0x4, %rcx
    000000e1: 	cmpq	%r14, %rdx
    000000e4: 	jne	.Ltmp227 # Offset: 228
    000000e6: 	movl	init_value(%rip), %edx
    000000ec: 	movl	%edx, %eax
    000000ee: 	imull	%edx, %eax
    000000f1: 	imull	$0x12c, %eax, %eax
    000000f7: 	addl	%edx, %eax
    000000f9: 	jmp	.Ltmp228 # Offset: 249
.Ltmp230:
    000000fb: 	addq	$0x4, %rsi
    000000ff: 	cmpq	%rsi, %r15
    00000102: 	je	.Ltmp229 # Offset: 258
.Ltmp228:
    00000104: 	cmpl	(%rsi), %eax
    00000106: 	je	.Ltmp230 # Offset: 262
    00000108: 	movl	current_test(%rip), %edx
    0000010e: 	movq	%r13, %rsi
    00000111: 	movl	$0x1, %edi
    00000116: 	xorl	%eax, %eax
    00000118: 	movl	%r8d, 0xc(%rsp)
    0000011d: 	callq	__printf_chk@PLT # Offset: 285
    00000122: 	movl	0xc(%rsp), %r8d
.Ltmp229:
    00000127: 	addl	$0x1, %r8d
    0000012b: 	cmpl	%r8d, iterations(%rip)
    00000132: 	jg	.Ltmp231 # Offset: 306
.Ltmp224:
    00000138: 	callq	clock@PLT # Offset: 312
    0000013d: 	pxor	%xmm0, %xmm0
    00000141: 	movq	%r12, %rdi
    00000144: 	movq	%rax, end_time(%rip)
    0000014b: 	subq	start_time(%rip), %rax
    00000152: 	cvtsi2sd	%rax, %xmm0
    00000157: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000015f: 	addq	$0x18, %rsp
    00000163: 	popq	%rbx
    00000164: 	popq	%rbp
    00000165: 	popq	%r12
    00000167: 	popq	%r13
    00000169: 	popq	%r14
    0000016b: 	popq	%r15
    0000016d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 365
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt2IiEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt3IiEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x3dc0
  Size        : 0x2fc
  MaxSize     : 0x300
  Offset      : 0x3dc0
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt3IiEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x48, %rsp
    00000018: 	movq	%rsi, 0x10(%rsp)
    0000001d: 	movq	%rcx, 0x18(%rsp)
    00000022: 	callq	clock@PLT # Offset: 34
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	movl	iterations(%rip), %eax
    00000034: 	testl	%eax, %eax
    00000036: 	jle	.Ltmp232 # Offset: 54
    0000003c: 	leaq	0x320(%rbx), %rax
    00000043: 	movl	$0x0, 0x4(%rsp)
    0000004b: 	leaq	0x3a980(%r14), %rbp
    00000052: 	movq	%rax, 0x8(%rsp)
    00000057: 	leaq	0x320(%r14), %rax
    0000005e: 	movq	%rax, 0x20(%rsp)
    00000063: 	leaq	0x640(%r14), %rax
    0000006a: 	movq	%rax, 0x28(%rsp)
    0000006f: 	leaq	0x960(%r14), %rax
    00000076: 	movq	%rax, 0x30(%rsp)
    0000007b: 	movq	%r14, 0x38(%rsp)
.Ltmp240:
    00000080: 	movd	init_value(%rip), %xmm4
    00000088: 	movq	%rbx, %r14
    0000008b: 	movq	%rbx, %rax
    0000008e: 	pshufd	$0x0, %xmm4, %xmm0
.Ltmp233:
    00000093: 	movups	%xmm0, (%rax)
    00000096: 	addq	$0x10, %rax
    0000009a: 	cmpq	0x8(%rsp), %rax
    0000009f: 	jne	.Ltmp233 # Offset: 159
    000000a1: 	movq	0x10(%rsp), %r13
    000000a6: 	movq	0x38(%rsp), %rcx
    000000ab: 	movq	0x20(%rsp), %r12
    000000b0: 	movq	0x28(%rsp), %r11
    000000b5: 	movq	0x30(%rsp), %r10
.Ltmp236:
    000000ba: 	leaq	0x4(%rcx), %rdx
    000000be: 	movq	%rbx, %rax
    000000c1: 	movl	(%r13), %esi
    000000c5: 	movl	0x4(%r13), %edi
    000000c9: 	subq	%rdx, %rax
    000000cc: 	movl	0x8(%r13), %r8d
    000000d0: 	movl	0xc(%r13), %r9d
    000000d4: 	cmpq	$0x968, %rax
    000000da: 	jbe	.Ltmp234 # Offset: 218
    000000e0: 	movd	%esi, %xmm2
    000000e4: 	movd	%edi, %xmm3
    000000e8: 	movd	%r9d, %xmm6
    000000ed: 	xorl	%eax, %eax
    000000ef: 	pshufd	$0x0, %xmm2, %xmm4
    000000f4: 	movd	%r8d, %xmm2
    000000f9: 	pshufd	$0x0, %xmm3, %xmm5
    000000fe: 	pshufd	$0x0, %xmm2, %xmm3
    00000103: 	pshufd	$0x0, %xmm6, %xmm2
    00000108: 	movdqa	%xmm5, %xmm9
    0000010d: 	movdqa	%xmm4, %xmm8
    00000112: 	movdqa	%xmm3, %xmm7
    00000116: 	movdqa	%xmm2, %xmm6
    0000011a: 	psrlq	$0x20, %xmm9
    00000120: 	psrlq	$0x20, %xmm8
    00000126: 	psrlq	$0x20, %xmm7
    0000012b: 	psrlq	$0x20, %xmm6
.Ltmp235:
    00000130: 	movdqu	(%r12,%rax), %xmm1
    00000136: 	movdqu	(%r12,%rax), %xmm0
    0000013c: 	movdqu	(%rcx,%rax), %xmm10
    00000142: 	psrlq	$0x20, %xmm1
    00000147: 	pmuludq	%xmm5, %xmm0
    0000014b: 	pmuludq	%xmm9, %xmm1
    00000150: 	pmuludq	%xmm4, %xmm10
    00000155: 	pshufd	$0x8, %xmm0, %xmm0
    0000015a: 	pshufd	$0x8, %xmm1, %xmm1
    0000015f: 	pshufd	$0x8, %xmm10, %xmm10
    00000165: 	punpckldq	%xmm1, %xmm0
    00000169: 	movdqu	(%rcx,%rax), %xmm1
    0000016e: 	psrlq	$0x20, %xmm1
    00000173: 	pmuludq	%xmm8, %xmm1
    00000178: 	pshufd	$0x8, %xmm1, %xmm1
    0000017d: 	punpckldq	%xmm1, %xmm10
    00000182: 	movdqu	(%r11,%rax), %xmm1
    00000188: 	paddd	%xmm10, %xmm0
    0000018d: 	movdqu	(%r11,%rax), %xmm10
    00000193: 	psrlq	$0x20, %xmm1
    00000198: 	pmuludq	%xmm3, %xmm10
    0000019d: 	pmuludq	%xmm7, %xmm1
    000001a1: 	pshufd	$0x8, %xmm10, %xmm10
    000001a7: 	pshufd	$0x8, %xmm1, %xmm1
    000001ac: 	punpckldq	%xmm1, %xmm10
    000001b1: 	movdqu	(%r10,%rax), %xmm1
    000001b7: 	paddd	%xmm10, %xmm0
    000001bc: 	movdqu	(%r10,%rax), %xmm10
    000001c2: 	psrlq	$0x20, %xmm1
    000001c7: 	pmuludq	%xmm2, %xmm10
    000001cc: 	pmuludq	%xmm6, %xmm1
    000001d0: 	pshufd	$0x8, %xmm10, %xmm10
    000001d6: 	pshufd	$0x8, %xmm1, %xmm1
    000001db: 	punpckldq	%xmm1, %xmm10
    000001e0: 	movdqu	(%rbx,%rax), %xmm1
    000001e5: 	paddd	%xmm10, %xmm0
    000001ea: 	paddd	%xmm1, %xmm0
    000001ee: 	movups	%xmm0, (%rbx,%rax)
    000001f2: 	addq	$0x10, %rax
    000001f6: 	cmpq	$0x320, %rax
    000001fc: 	jne	.Ltmp235 # Offset: 508
.Ltmp242:
    00000202: 	addq	$0xc80, %rcx
    00000209: 	addq	$0x10, %r13
    0000020d: 	addq	$0xc80, %r12
    00000214: 	addq	$0xc80, %r11
    0000021b: 	addq	$0xc80, %r10
    00000222: 	cmpq	%rbp, %rcx
    00000225: 	jne	.Ltmp236 # Offset: 549
    0000022b: 	movl	init_value(%rip), %edx
    00000231: 	movl	%edx, %eax
    00000233: 	imull	%edx, %eax
    00000236: 	imull	$0x12c, %eax, %eax
    0000023c: 	addl	%edx, %eax
    0000023e: 	jmp	.Ltmp237 # Offset: 574
.Ltmp239:
    00000240: 	addq	$0x4, %r14
    00000244: 	cmpq	0x8(%rsp), %r14
    00000249: 	je	.Ltmp238 # Offset: 585
.Ltmp237:
    0000024b: 	cmpl	(%r14), %eax
    0000024e: 	je	.Ltmp239 # Offset: 590
    00000250: 	movl	current_test(%rip), %edx
    00000256: 	leaq	DATAat0x79d4(%rip), %rsi
    0000025d: 	movl	$0x1, %edi
    00000262: 	xorl	%eax, %eax
    00000264: 	callq	__printf_chk@PLT # Offset: 612
.Ltmp238:
    00000269: 	addl	$0x1, 0x4(%rsp)
    0000026e: 	movl	0x4(%rsp), %eax
    00000272: 	cmpl	%eax, iterations(%rip)
    00000278: 	jg	.Ltmp240 # Offset: 632
.Ltmp232:
    0000027e: 	callq	clock@PLT # Offset: 638
    00000283: 	pxor	%xmm0, %xmm0
    00000287: 	movq	0x18(%rsp), %rdi
    0000028c: 	movq	%rax, end_time(%rip)
    00000293: 	subq	start_time(%rip), %rax
    0000029a: 	cvtsi2sd	%rax, %xmm0
    0000029f: 	divsd	DATAat0x79f8(%rip), %xmm0
    000002a7: 	addq	$0x48, %rsp
    000002ab: 	popq	%rbx
    000002ac: 	popq	%rbp
    000002ad: 	popq	%r12
    000002af: 	popq	%r13
    000002b1: 	popq	%r14
    000002b3: 	popq	%r15
    000002b5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 693
.Ltmp234:
    000002ba: 	xorl	%eax, %eax
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp241:
    000002c0: 	movl	(%r12,%rax), %edx
    000002c4: 	movl	(%rcx,%rax), %r15d
    000002c8: 	imull	%edi, %edx
    000002cb: 	imull	%esi, %r15d
    000002cf: 	addl	%r15d, %edx
    000002d2: 	movl	(%r11,%rax), %r15d
    000002d6: 	imull	%r8d, %r15d
    000002da: 	addl	%r15d, %edx
    000002dd: 	movl	(%r10,%rax), %r15d
    000002e1: 	imull	%r9d, %r15d
    000002e5: 	addl	%r15d, %edx
    000002e8: 	addl	%edx, (%rbx,%rax)
    000002eb: 	addq	$0x4, %rax
    000002ef: 	cmpq	$0x320, %rax
    000002f5: 	jne	.Ltmp241 # Offset: 757
    000002f7: 	jmp	.Ltmp242 # Offset: 759
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt3IiEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt4IiEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x40c0
  Size        : 0x25f
  MaxSize     : 0x260
  Offset      : 0x40c0
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt4IiEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rcx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rsi, (%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp243 # Offset: 51
    00000039: 	xorl	%r8d, %r8d
    0000003c: 	leaq	0x320(%rbx), %r15
    00000043: 	leaq	0x3a980(%rbp), %r14
    0000004a: 	leaq	DATAat0x79d4(%rip), %r13
.Ltmp250:
    00000051: 	movd	init_value(%rip), %xmm4
    00000059: 	movq	%rbx, %r11
    0000005c: 	movq	%rbx, %rax
    0000005f: 	pshufd	$0x0, %xmm4, %xmm0
.Ltmp244:
    00000064: 	movups	%xmm0, (%rax)
    00000067: 	addq	$0x10, %rax
    0000006b: 	cmpq	%r15, %rax
    0000006e: 	jne	.Ltmp244 # Offset: 110
    00000070: 	movq	(%rsp), %r10
    00000074: 	movq	%rbp, %rdx
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp246:
    00000080: 	movd	(%r10), %xmm2
    00000085: 	movd	0x4(%r10), %xmm3
    0000008b: 	xorl	%eax, %eax
    0000008d: 	leaq	0x320(%rdx), %rdi
    00000094: 	movd	0xc(%r10), %xmm6
    0000009a: 	leaq	0x640(%rdx), %rsi
    000000a1: 	leaq	0x960(%rdx), %rcx
    000000a8: 	pshufd	$0x0, %xmm2, %xmm4
    000000ad: 	movd	0x8(%r10), %xmm2
    000000b3: 	pshufd	$0x0, %xmm3, %xmm5
    000000b8: 	movdqa	%xmm5, %xmm9
    000000bd: 	movdqa	%xmm4, %xmm8
    000000c2: 	pshufd	$0x0, %xmm2, %xmm3
    000000c7: 	pshufd	$0x0, %xmm6, %xmm2
    000000cc: 	movdqa	%xmm3, %xmm7
    000000d0: 	psrlq	$0x20, %xmm9
    000000d6: 	movdqa	%xmm2, %xmm6
    000000da: 	psrlq	$0x20, %xmm8
    000000e0: 	psrlq	$0x20, %xmm7
    000000e5: 	psrlq	$0x20, %xmm6
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp245:
    000000f0: 	movdqu	(%rdi,%rax), %xmm1
    000000f5: 	movdqu	(%rdi,%rax), %xmm0
    000000fa: 	movdqu	(%rdx,%rax), %xmm10
    00000100: 	psrlq	$0x20, %xmm1
    00000105: 	pmuludq	%xmm5, %xmm0
    00000109: 	pmuludq	%xmm9, %xmm1
    0000010e: 	pmuludq	%xmm4, %xmm10
    00000113: 	pshufd	$0x8, %xmm0, %xmm0
    00000118: 	pshufd	$0x8, %xmm1, %xmm1
    0000011d: 	pshufd	$0x8, %xmm10, %xmm10
    00000123: 	punpckldq	%xmm1, %xmm0
    00000127: 	movdqu	(%rdx,%rax), %xmm1
    0000012c: 	psrlq	$0x20, %xmm1
    00000131: 	pmuludq	%xmm8, %xmm1
    00000136: 	pshufd	$0x8, %xmm1, %xmm1
    0000013b: 	punpckldq	%xmm1, %xmm10
    00000140: 	movdqu	(%rsi,%rax), %xmm1
    00000145: 	paddd	%xmm10, %xmm0
    0000014a: 	movdqu	(%rsi,%rax), %xmm10
    00000150: 	psrlq	$0x20, %xmm1
    00000155: 	pmuludq	%xmm3, %xmm10
    0000015a: 	pmuludq	%xmm7, %xmm1
    0000015e: 	pshufd	$0x8, %xmm10, %xmm10
    00000164: 	pshufd	$0x8, %xmm1, %xmm1
    00000169: 	punpckldq	%xmm1, %xmm10
    0000016e: 	movdqu	(%rcx,%rax), %xmm1
    00000173: 	paddd	%xmm10, %xmm0
    00000178: 	movdqu	(%rcx,%rax), %xmm10
    0000017e: 	psrlq	$0x20, %xmm1
    00000183: 	pmuludq	%xmm2, %xmm10
    00000188: 	pmuludq	%xmm6, %xmm1
    0000018c: 	pshufd	$0x8, %xmm10, %xmm10
    00000192: 	pshufd	$0x8, %xmm1, %xmm1
    00000197: 	punpckldq	%xmm1, %xmm10
    0000019c: 	movdqu	(%rbx,%rax), %xmm1
    000001a1: 	paddd	%xmm10, %xmm0
    000001a6: 	paddd	%xmm1, %xmm0
    000001aa: 	movups	%xmm0, (%rbx,%rax)
    000001ae: 	addq	$0x10, %rax
    000001b2: 	cmpq	$0x320, %rax
    000001b8: 	jne	.Ltmp245 # Offset: 440
    000001be: 	addq	$0xc80, %rdx
    000001c5: 	addq	$0x10, %r10
    000001c9: 	cmpq	%rdx, %r14
    000001cc: 	jne	.Ltmp246 # Offset: 460
    000001d2: 	movl	init_value(%rip), %edx
    000001d8: 	movl	%edx, %eax
    000001da: 	imull	%edx, %eax
    000001dd: 	imull	$0x12c, %eax, %eax
    000001e3: 	addl	%edx, %eax
    000001e5: 	jmp	.Ltmp247 # Offset: 485
.Ltmp249:
    000001e7: 	addq	$0x4, %r11
    000001eb: 	cmpq	%r11, %r15
    000001ee: 	je	.Ltmp248 # Offset: 494
.Ltmp247:
    000001f0: 	cmpl	(%r11), %eax
    000001f3: 	je	.Ltmp249 # Offset: 499
    000001f5: 	movl	current_test(%rip), %edx
    000001fb: 	movq	%r13, %rsi
    000001fe: 	movl	$0x1, %edi
    00000203: 	xorl	%eax, %eax
    00000205: 	movl	%r8d, 0xc(%rsp)
    0000020a: 	callq	__printf_chk@PLT # Offset: 522
    0000020f: 	movl	0xc(%rsp), %r8d
.Ltmp248:
    00000214: 	addl	$0x1, %r8d
    00000218: 	cmpl	%r8d, iterations(%rip)
    0000021f: 	jg	.Ltmp250 # Offset: 543
.Ltmp243:
    00000225: 	callq	clock@PLT # Offset: 549
    0000022a: 	pxor	%xmm0, %xmm0
    0000022e: 	movq	%r12, %rdi
    00000231: 	movq	%rax, end_time(%rip)
    00000238: 	subq	start_time(%rip), %rax
    0000023f: 	cvtsi2sd	%rax, %xmm0
    00000244: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000024c: 	addq	$0x18, %rsp
    00000250: 	popq	%rbx
    00000251: 	popq	%rbp
    00000252: 	popq	%r12
    00000254: 	popq	%r13
    00000256: 	popq	%r14
    00000258: 	popq	%r15
    0000025a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 602
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt4IiEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt6IiEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x4320
  Size        : 0x17a
  MaxSize     : 0x180
  Offset      : 0x4320
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt6IiEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	movl	iterations(%rip), %eax
    00000030: 	testl	%eax, %eax
    00000032: 	jle	.Ltmp251 # Offset: 50
    00000038: 	leaq	0x3a980(%r12), %rax
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	0x320(%r13), %r15
    0000004a: 	addq	$0x3aca0, %r12
    00000051: 	movq	%rax, 0x8(%rsp)
    00000056: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp258:
    0000005d: 	movd	init_value(%rip), %xmm1
    00000065: 	movq	%r13, %r10
    00000068: 	movq	%r13, %rax
    0000006b: 	pshufd	$0x0, %xmm1, %xmm0
.Ltmp252:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rax, %r15
    0000007a: 	jne	.Ltmp252 # Offset: 122
    0000007c: 	movq	0x8(%rsp), %rdi
    00000081: 	movq	%r13, %r9
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp254:
    00000088: 	movl	(%r9), %esi
    0000008b: 	movq	%rbx, %rcx
    0000008e: 	leaq	-0x3a980(%rdi), %rdx
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp253:
    00000098: 	movl	(%rcx), %eax
    0000009a: 	movl	0x4(%rcx), %r11d
    0000009e: 	addq	$0xc80, %rdx
    000000a5: 	addq	$0x10, %rcx
    000000a9: 	imull	-0x960(%rdx), %r11d
    000000b1: 	imull	-0xc80(%rdx), %eax
    000000b8: 	addl	%r11d, %eax
    000000bb: 	movl	-0x8(%rcx), %r11d
    000000bf: 	imull	-0x640(%rdx), %r11d
    000000c7: 	addl	%r11d, %eax
    000000ca: 	movl	-0x4(%rcx), %r11d
    000000ce: 	imull	-0x320(%rdx), %r11d
    000000d6: 	addl	%r11d, %eax
    000000d9: 	addl	%eax, %esi
    000000db: 	cmpq	%rdx, %rdi
    000000de: 	jne	.Ltmp253 # Offset: 222
    000000e0: 	addq	$0x4, %rdi
    000000e4: 	movl	%esi, (%r9)
    000000e7: 	addq	$0x4, %r9
    000000eb: 	cmpq	%rdi, %r12
    000000ee: 	jne	.Ltmp254 # Offset: 238
    000000f0: 	movl	init_value(%rip), %edx
    000000f6: 	movl	%edx, %eax
    000000f8: 	imull	%edx, %eax
    000000fb: 	imull	$0x12c, %eax, %eax
    00000101: 	addl	%edx, %eax
    00000103: 	jmp	.Ltmp255 # Offset: 259
.Ltmp257:
    00000105: 	addq	$0x4, %r10
    00000109: 	cmpq	%r10, %r15
    0000010c: 	je	.Ltmp256 # Offset: 268
.Ltmp255:
    0000010e: 	cmpl	(%r10), %eax
    00000111: 	je	.Ltmp257 # Offset: 273
    00000113: 	movl	current_test(%rip), %edx
    00000119: 	movq	%r8, %rsi
    0000011c: 	movl	$0x1, %edi
    00000121: 	xorl	%eax, %eax
    00000123: 	callq	__printf_chk@PLT # Offset: 291
    00000128: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp256:
    0000012f: 	addl	$0x1, %r14d
    00000133: 	cmpl	%r14d, iterations(%rip)
    0000013a: 	jg	.Ltmp258 # Offset: 314
.Ltmp251:
    00000140: 	callq	clock@PLT # Offset: 320
    00000145: 	pxor	%xmm0, %xmm0
    00000149: 	movq	%rbp, %rdi
    0000014c: 	movq	%rax, end_time(%rip)
    00000153: 	subq	start_time(%rip), %rax
    0000015a: 	cvtsi2sd	%rax, %xmm0
    0000015f: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000167: 	addq	$0x18, %rsp
    0000016b: 	popq	%rbx
    0000016c: 	popq	%rbp
    0000016d: 	popq	%r12
    0000016f: 	popq	%r13
    00000171: 	popq	%r14
    00000173: 	popq	%r15
    00000175: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 373
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt6IiEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt7IiEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x44a0
  Size        : 0x173
  MaxSize     : 0x180
  Offset      : 0x44a0
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt7IiEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	leaq	0x320(%r13), %r14
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rcx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdx, %rbx
    00000024: 	subq	$0x18, %rsp
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	leaq	0x3a980(%rbx), %rax
    0000003b: 	leaq	DATAat0x79d4(%rip), %rbx
    00000042: 	movq	%rax, 0x8(%rsp)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp259 # Offset: 79
.Ltmp266:
    00000055: 	movd	init_value(%rip), %xmm5
    0000005d: 	movq	%r13, %r9
    00000060: 	movq	%r13, %rax
    00000063: 	pshufd	$0x0, %xmm5, %xmm0
.Ltmp260:
    00000068: 	movups	%xmm0, (%rax)
    0000006b: 	addq	$0x10, %rax
    0000006f: 	cmpq	%rax, %r14
    00000072: 	jne	.Ltmp260 # Offset: 114
    00000074: 	movq	0x8(%rsp), %rcx
    00000079: 	movq	%r13, %rsi
    0000007c: 	xorl	%edi, %edi
.Ltmp262:
    0000007e: 	movdqu	(%rsi), %xmm3
    00000082: 	movq	%r12, %rdx
    00000085: 	leaq	-0x3a980(%rcx), %rax
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp261:
    00000090: 	movd	(%rdx), %xmm4
    00000094: 	movdqu	(%rax), %xmm1
    00000098: 	addq	$0x320, %rax
    0000009e: 	addq	$0x4, %rdx
    000000a2: 	movdqu	-0x320(%rax), %xmm0
    000000aa: 	pshufd	$0x0, %xmm4, %xmm2
    000000af: 	pmuludq	%xmm2, %xmm1
    000000b3: 	psrlq	$0x20, %xmm0
    000000b8: 	psrlq	$0x20, %xmm2
    000000bd: 	pmuludq	%xmm2, %xmm0
    000000c1: 	pshufd	$0x8, %xmm1, %xmm1
    000000c6: 	pshufd	$0x8, %xmm0, %xmm0
    000000cb: 	punpckldq	%xmm0, %xmm1
    000000cf: 	paddd	%xmm1, %xmm3
    000000d3: 	cmpq	%rcx, %rax
    000000d6: 	jne	.Ltmp261 # Offset: 214
    000000d8: 	addq	$0x4, %rdi
    000000dc: 	movups	%xmm3, (%rsi)
    000000df: 	leaq	0x10(%rax), %rcx
    000000e3: 	addq	$0x10, %rsi
    000000e7: 	cmpq	$0xc8, %rdi
    000000ee: 	jne	.Ltmp262 # Offset: 238
    000000f0: 	movl	init_value(%rip), %edx
    000000f6: 	movl	%edx, %eax
    000000f8: 	imull	%edx, %eax
    000000fb: 	imull	$0x12c, %eax, %eax
    00000101: 	addl	%edx, %eax
    00000103: 	jmp	.Ltmp263 # Offset: 259
.Ltmp265:
    00000105: 	addq	$0x4, %r9
    00000109: 	cmpq	%r9, %r14
    0000010c: 	je	.Ltmp264 # Offset: 268
.Ltmp263:
    0000010e: 	cmpl	(%r9), %eax
    00000111: 	je	.Ltmp265 # Offset: 273
    00000113: 	movl	current_test(%rip), %edx
    00000119: 	movq	%rbx, %rsi
    0000011c: 	movl	$0x1, %edi
    00000121: 	xorl	%eax, %eax
    00000123: 	callq	__printf_chk@PLT # Offset: 291
.Ltmp264:
    00000128: 	addl	$0x1, %r15d
    0000012c: 	cmpl	%r15d, iterations(%rip)
    00000133: 	jg	.Ltmp266 # Offset: 307
.Ltmp259:
    00000139: 	callq	clock@PLT # Offset: 313
    0000013e: 	pxor	%xmm0, %xmm0
    00000142: 	movq	%rbp, %rdi
    00000145: 	movq	%rax, end_time(%rip)
    0000014c: 	subq	start_time(%rip), %rax
    00000153: 	cvtsi2sd	%rax, %xmm0
    00000158: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000160: 	addq	$0x18, %rsp
    00000164: 	popq	%rbx
    00000165: 	popq	%rbp
    00000166: 	popq	%r12
    00000168: 	popq	%r13
    0000016a: 	popq	%r14
    0000016c: 	popq	%r15
    0000016e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 366
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt7IiEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt8IiEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x4620
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x4620
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt8IiEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	leaq	0x320(%r13), %r14
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rcx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdx, %rbx
    00000024: 	subq	$0x18, %rsp
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	leaq	0x3a980(%rbx), %rax
    0000003b: 	leaq	DATAat0x79d4(%rip), %rbx
    00000042: 	movq	%rax, 0x8(%rsp)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp267 # Offset: 79
.Ltmp274:
    00000055: 	movd	init_value(%rip), %xmm5
    0000005d: 	movq	%r13, %r9
    00000060: 	movq	%r13, %rax
    00000063: 	pshufd	$0x0, %xmm5, %xmm0
.Ltmp268:
    00000068: 	movups	%xmm0, (%rax)
    0000006b: 	addq	$0x10, %rax
    0000006f: 	cmpq	%rax, %r14
    00000072: 	jne	.Ltmp268 # Offset: 114
    00000074: 	movq	0x8(%rsp), %rcx
    00000079: 	movq	%r13, %rsi
    0000007c: 	xorl	%edi, %edi
    0000007e: 	nop # Size: 2
.Ltmp270:
    00000080: 	movdqu	(%rsi), %xmm3
    00000084: 	movq	%r12, %rdx
    00000087: 	leaq	-0x3a980(%rcx), %rax
    0000008e: 	nop # Size: 2
.Ltmp269:
    00000090: 	movdqu	(%rdx), %xmm1
    00000094: 	movdqu	(%rax), %xmm0
    00000098: 	addq	$0xc80, %rax
    0000009e: 	addq	$0x10, %rdx
    000000a2: 	movdqu	-0xc80(%rax), %xmm4
    000000aa: 	pshufd	$0x0, %xmm1, %xmm2
    000000af: 	pmuludq	%xmm2, %xmm0
    000000b3: 	psrlq	$0x20, %xmm4
    000000b8: 	psrlq	$0x20, %xmm2
    000000bd: 	pmuludq	%xmm4, %xmm2
    000000c1: 	movdqu	-0x960(%rax), %xmm4
    000000c9: 	psrlq	$0x20, %xmm4
    000000ce: 	pshufd	$0x8, %xmm0, %xmm0
    000000d3: 	pshufd	$0x8, %xmm2, %xmm2
    000000d8: 	punpckldq	%xmm2, %xmm0
    000000dc: 	pshufd	$0x55, %xmm1, %xmm2
    000000e1: 	paddd	%xmm3, %xmm0
    000000e5: 	movdqu	-0x960(%rax), %xmm3
    000000ed: 	pmuludq	%xmm2, %xmm3
    000000f1: 	psrlq	$0x20, %xmm2
    000000f6: 	pmuludq	%xmm4, %xmm2
    000000fa: 	movdqu	-0x640(%rax), %xmm4
    00000102: 	psrlq	$0x20, %xmm4
    00000107: 	pshufd	$0x8, %xmm3, %xmm3
    0000010c: 	pshufd	$0x8, %xmm2, %xmm2
    00000111: 	punpckldq	%xmm2, %xmm3
    00000115: 	pshufd	$0xaa, %xmm1, %xmm2
    0000011a: 	pshufd	$0xff, %xmm1, %xmm1
    0000011f: 	paddd	%xmm3, %xmm0
    00000123: 	movdqu	-0x640(%rax), %xmm3
    0000012b: 	pmuludq	%xmm2, %xmm3
    0000012f: 	psrlq	$0x20, %xmm2
    00000134: 	pmuludq	%xmm4, %xmm2
    00000138: 	pshufd	$0x8, %xmm3, %xmm3
    0000013d: 	pshufd	$0x8, %xmm2, %xmm2
    00000142: 	punpckldq	%xmm2, %xmm3
    00000146: 	movdqu	-0x320(%rax), %xmm2
    0000014e: 	paddd	%xmm3, %xmm0
    00000152: 	movdqu	-0x320(%rax), %xmm3
    0000015a: 	psrlq	$0x20, %xmm2
    0000015f: 	pmuludq	%xmm1, %xmm3
    00000163: 	psrlq	$0x20, %xmm1
    00000168: 	pmuludq	%xmm2, %xmm1
    0000016c: 	pshufd	$0x8, %xmm3, %xmm3
    00000171: 	pshufd	$0x8, %xmm1, %xmm1
    00000176: 	punpckldq	%xmm1, %xmm3
    0000017a: 	paddd	%xmm0, %xmm3
    0000017e: 	cmpq	%rcx, %rax
    00000181: 	jne	.Ltmp269 # Offset: 385
    00000187: 	addl	$0x4, %edi
    0000018a: 	movups	%xmm3, (%rsi)
    0000018d: 	leaq	0x10(%rax), %rcx
    00000191: 	addq	$0x10, %rsi
    00000195: 	cmpl	$0xc8, %edi
    0000019b: 	jne	.Ltmp270 # Offset: 411
    000001a1: 	movl	init_value(%rip), %edx
    000001a7: 	movl	%edx, %eax
    000001a9: 	imull	%edx, %eax
    000001ac: 	imull	$0x12c, %eax, %eax
    000001b2: 	addl	%edx, %eax
    000001b4: 	jmp	.Ltmp271 # Offset: 436
.Ltmp273:
    000001b6: 	addq	$0x4, %r9
    000001ba: 	cmpq	%r9, %r14
    000001bd: 	je	.Ltmp272 # Offset: 445
.Ltmp271:
    000001bf: 	cmpl	(%r9), %eax
    000001c2: 	je	.Ltmp273 # Offset: 450
    000001c4: 	movl	current_test(%rip), %edx
    000001ca: 	movq	%rbx, %rsi
    000001cd: 	movl	$0x1, %edi
    000001d2: 	xorl	%eax, %eax
    000001d4: 	callq	__printf_chk@PLT # Offset: 468
.Ltmp272:
    000001d9: 	addl	$0x1, %r15d
    000001dd: 	cmpl	%r15d, iterations(%rip)
    000001e4: 	jg	.Ltmp274 # Offset: 484
.Ltmp267:
    000001ea: 	callq	clock@PLT # Offset: 490
    000001ef: 	pxor	%xmm0, %xmm0
    000001f3: 	movq	%rbp, %rdi
    000001f6: 	movq	%rax, end_time(%rip)
    000001fd: 	subq	start_time(%rip), %rax
    00000204: 	cvtsi2sd	%rax, %xmm0
    00000209: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000211: 	addq	$0x18, %rsp
    00000215: 	popq	%rbx
    00000216: 	popq	%rbp
    00000217: 	popq	%r12
    00000219: 	popq	%r13
    0000021b: 	popq	%r14
    0000021d: 	popq	%r15
    0000021f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt8IiEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt2ImEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x4850
  Size        : 0x1bb
  MaxSize     : 0x1c0
  Offset      : 0x4850
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt2ImEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rsi, (%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp275 # Offset: 51
    00000039: 	xorl	%r8d, %r8d
    0000003c: 	leaq	0x640(%r14), %rbx
    00000043: 	leaq	0x75300(%rbp), %r15
    0000004a: 	leaq	DATAat0x79d4(%rip), %r13
.Ltmp282:
    00000051: 	movslq	init_value(%rip), %rax
    00000058: 	movq	%r14, %rdi
    0000005b: 	movq	%rax, %xmm0
    00000060: 	movq	%rax, %r10
    00000063: 	movq	%r14, %rax
    00000066: 	punpcklqdq	%xmm0, %xmm0
.Ltmp276:
    0000006a: 	movups	%xmm0, (%rax)
    0000006d: 	addq	$0x10, %rax
    00000071: 	cmpq	%rbx, %rax
    00000074: 	jne	.Ltmp276 # Offset: 116
    00000076: 	movq	(%rsp), %rsi
    0000007a: 	movq	%rbp, %rcx
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp278:
    00000080: 	movq	(%rsi), %xmm4
    00000084: 	movq	%rcx, %rdx
    00000087: 	movq	%r14, %rax
    0000008a: 	punpcklqdq	%xmm4, %xmm4
    0000008e: 	movdqa	%xmm4, %xmm5
    00000092: 	psrlq	$0x20, %xmm5
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp277:
    000000a0: 	movdqu	(%rdx), %xmm3
    000000a4: 	movdqu	(%rax), %xmm7
    000000a8: 	addq	$0x20, %rax
    000000ac: 	addq	$0x20, %rdx
    000000b0: 	movdqu	-0x10(%rdx), %xmm2
    000000b5: 	movdqu	-0x10(%rax), %xmm6
    000000ba: 	movdqa	%xmm2, %xmm0
    000000be: 	movdqa	%xmm2, %xmm1
    000000c2: 	psrlq	$0x20, %xmm0
    000000c7: 	pmuludq	%xmm5, %xmm2
    000000cb: 	pmuludq	%xmm4, %xmm0
    000000cf: 	pmuludq	%xmm4, %xmm1
    000000d3: 	paddq	%xmm2, %xmm0
    000000d7: 	movdqa	%xmm3, %xmm2
    000000db: 	psllq	$0x20, %xmm0
    000000e0: 	pmuludq	%xmm4, %xmm2
    000000e4: 	paddq	%xmm0, %xmm1
    000000e8: 	movdqa	%xmm3, %xmm0
    000000ec: 	psrlq	$0x20, %xmm0
    000000f1: 	pmuludq	%xmm5, %xmm3
    000000f5: 	paddq	%xmm6, %xmm1
    000000f9: 	pmuludq	%xmm4, %xmm0
    000000fd: 	movups	%xmm1, -0x10(%rax)
    00000101: 	paddq	%xmm3, %xmm0
    00000105: 	psllq	$0x20, %xmm0
    0000010a: 	paddq	%xmm2, %xmm0
    0000010e: 	paddq	%xmm7, %xmm0
    00000112: 	movups	%xmm0, -0x20(%rax)
    00000116: 	cmpq	%rax, %rbx
    00000119: 	jne	.Ltmp277 # Offset: 281
    0000011b: 	addq	$0x640, %rcx
    00000122: 	addq	$0x8, %rsi
    00000126: 	cmpq	%rcx, %r15
    00000129: 	jne	.Ltmp278 # Offset: 297
    0000012f: 	movl	%r10d, %eax
    00000132: 	imull	%r10d, %eax
    00000136: 	imull	$0x12c, %eax, %eax
    0000013c: 	addl	%r10d, %eax
    0000013f: 	cltq
    00000141: 	jmp	.Ltmp279 # Offset: 321
.Ltmp281:
    00000143: 	addq	$0x8, %rdi
    00000147: 	cmpq	%rdi, %rbx
    0000014a: 	je	.Ltmp280 # Offset: 330
.Ltmp279:
    0000014c: 	cmpq	(%rdi), %rax
    0000014f: 	je	.Ltmp281 # Offset: 335
    00000151: 	movl	current_test(%rip), %edx
    00000157: 	movq	%r13, %rsi
    0000015a: 	movl	$0x1, %edi
    0000015f: 	xorl	%eax, %eax
    00000161: 	movl	%r8d, 0xc(%rsp)
    00000166: 	callq	__printf_chk@PLT # Offset: 358
    0000016b: 	movl	0xc(%rsp), %r8d
.Ltmp280:
    00000170: 	addl	$0x1, %r8d
    00000174: 	cmpl	%r8d, iterations(%rip)
    0000017b: 	jg	.Ltmp282 # Offset: 379
.Ltmp275:
    00000181: 	callq	clock@PLT # Offset: 385
    00000186: 	pxor	%xmm0, %xmm0
    0000018a: 	movq	%r12, %rdi
    0000018d: 	movq	%rax, end_time(%rip)
    00000194: 	subq	start_time(%rip), %rax
    0000019b: 	cvtsi2sd	%rax, %xmm0
    000001a0: 	divsd	DATAat0x79f8(%rip), %xmm0
    000001a8: 	addq	$0x18, %rsp
    000001ac: 	popq	%rbx
    000001ad: 	popq	%rbp
    000001ae: 	popq	%r12
    000001b0: 	popq	%r13
    000001b2: 	popq	%r14
    000001b4: 	popq	%r15
    000001b6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 438
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt2ImEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt3ImEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x4a10
  Size        : 0x19e
  MaxSize     : 0x1a0
  Offset      : 0x4a10
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt3ImEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	addq	$0x75300, %r14
    00000014: 	pushq	%r12
    00000016: 	pushq	%rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdi, %rbx
    0000001b: 	subq	$0x38, %rsp
    0000001f: 	movq	%rsi, 0x18(%rsp)
    00000024: 	movq	%rdx, 0x20(%rsp)
    00000029: 	movq	%rcx, 0x28(%rsp)
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movl	$0x0, 0x10(%rsp)
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	leaq	0x640(%rbx), %rax
    00000049: 	movq	%rax, 0x8(%rsp)
    0000004e: 	movl	iterations(%rip), %eax
    00000054: 	testl	%eax, %eax
    00000056: 	jle	.Ltmp283 # Offset: 86
.Ltmp290:
    0000005c: 	movslq	init_value(%rip), %rax
    00000063: 	movq	%rbx, %r13
    00000066: 	movq	%rax, %xmm0
    0000006b: 	movl	%eax, 0x14(%rsp)
    0000006f: 	movq	%rbx, %rax
    00000072: 	punpcklqdq	%xmm0, %xmm0
.Ltmp284:
    00000076: 	movups	%xmm0, (%rax)
    00000079: 	addq	$0x10, %rax
    0000007d: 	cmpq	%rax, 0x8(%rsp)
    00000082: 	jne	.Ltmp284 # Offset: 130
    00000084: 	movq	0x18(%rsp), %r12
    00000089: 	movq	0x20(%rsp), %rcx
.Ltmp286:
    0000008e: 	movq	(%r12), %rbp
    00000092: 	movq	0x8(%r12), %r11
    00000097: 	xorl	%edx, %edx
    00000099: 	leaq	0x640(%rcx), %r8
    000000a0: 	movq	0x10(%r12), %r10
    000000a5: 	movq	0x18(%r12), %r9
    000000aa: 	leaq	0x12c0(%rcx), %rdi
    000000b1: 	leaq	0xc80(%rcx), %rsi
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp285:
    000000c0: 	movq	(%rcx,%rdx), %rax
    000000c4: 	movq	(%r8,%rdx), %r15
    000000c8: 	imulq	%rbp, %rax
    000000cc: 	imulq	%r11, %r15
    000000d0: 	addq	%r15, %rax
    000000d3: 	movq	(%rdi,%rdx), %r15
    000000d7: 	addq	(%rbx,%rdx), %rax
    000000db: 	imulq	%r9, %r15
    000000df: 	addq	%r15, %rax
    000000e2: 	movq	(%rsi,%rdx), %r15
    000000e6: 	imulq	%r10, %r15
    000000ea: 	addq	%r15, %rax
    000000ed: 	movq	%rax, (%rbx,%rdx)
    000000f1: 	addq	$0x8, %rdx
    000000f5: 	cmpq	$0x640, %rdx
    000000fc: 	jne	.Ltmp285 # Offset: 252
    000000fe: 	addq	$0x1900, %rcx
    00000105: 	addq	$0x20, %r12
    00000109: 	cmpq	%rcx, %r14
    0000010c: 	jne	.Ltmp286 # Offset: 268
    0000010e: 	movl	0x14(%rsp), %esi
    00000112: 	movl	%esi, %eax
    00000114: 	imull	%esi, %eax
    00000117: 	imull	$0x12c, %eax, %eax
    0000011d: 	addl	%esi, %eax
    0000011f: 	cltq
    00000121: 	jmp	.Ltmp287 # Offset: 289
.Ltmp289:
    00000123: 	addq	$0x8, %r13
    00000127: 	cmpq	%r13, 0x8(%rsp)
    0000012c: 	je	.Ltmp288 # Offset: 300
.Ltmp287:
    0000012e: 	cmpq	(%r13), %rax
    00000132: 	je	.Ltmp289 # Offset: 306
    00000134: 	movl	current_test(%rip), %edx
    0000013a: 	leaq	DATAat0x79d4(%rip), %rsi
    00000141: 	movl	$0x1, %edi
    00000146: 	xorl	%eax, %eax
    00000148: 	callq	__printf_chk@PLT # Offset: 328
.Ltmp288:
    0000014d: 	addl	$0x1, 0x10(%rsp)
    00000152: 	movl	0x10(%rsp), %eax
    00000156: 	cmpl	%eax, iterations(%rip)
    0000015c: 	jg	.Ltmp290 # Offset: 348
.Ltmp283:
    00000162: 	callq	clock@PLT # Offset: 354
    00000167: 	pxor	%xmm0, %xmm0
    0000016b: 	movq	0x28(%rsp), %rdi
    00000170: 	movq	%rax, end_time(%rip)
    00000177: 	subq	start_time(%rip), %rax
    0000017e: 	cvtsi2sd	%rax, %xmm0
    00000183: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000018b: 	addq	$0x38, %rsp
    0000018f: 	popq	%rbx
    00000190: 	popq	%rbp
    00000191: 	popq	%r12
    00000193: 	popq	%r13
    00000195: 	popq	%r14
    00000197: 	popq	%r15
    00000199: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 409
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt3ImEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt4ImEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x4bb0
  Size        : 0x272
  MaxSize     : 0x280
  Offset      : 0x4bb0
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt4ImEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movq	%rdi, 0x10(%rsp)
    0000001d: 	movq	%rsi, 0x38(%rsp)
    00000022: 	movq	%rdx, 0x40(%rsp)
    00000027: 	movq	%rcx, 0x48(%rsp)
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	$0x0, 0x28(%rsp)
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	leaq	0x640(%rbx), %rax
    00000047: 	movq	%rax, 0x20(%rsp)
    0000004c: 	leaq	0x75300(%r14), %rax
    00000053: 	movq	%rax, 0x18(%rsp)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp291 # Offset: 96
.Ltmp298:
    00000066: 	movslq	init_value(%rip), %rax
    0000006d: 	movq	%rax, %xmm0
    00000072: 	movl	%eax, 0x2c(%rsp)
    00000076: 	movq	0x10(%rsp), %rax
    0000007b: 	punpcklqdq	%xmm0, %xmm0
    0000007f: 	movq	%rax, 0x30(%rsp)
.Ltmp292:
    00000084: 	movups	%xmm0, (%rax)
    00000087: 	addq	$0x10, %rax
    0000008b: 	cmpq	%rax, 0x20(%rsp)
    00000090: 	jne	.Ltmp292 # Offset: 144
    00000092: 	movq	0x38(%rsp), %rax
    00000097: 	movq	0x40(%rsp), %rdi
    0000009c: 	movq	%rax, 0x8(%rsp)
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp294:
    000000a8: 	movq	0x8(%rsp), %rax
    000000ad: 	movq	0x10(%rsp), %rdx
    000000b2: 	leaq	0x640(%rdi), %r10
    000000b9: 	leaq	0x12c0(%rdi), %r9
    000000c0: 	leaq	0xc80(%rdi), %r8
    000000c7: 	movq	(%rax), %r12
    000000ca: 	movq	0x8(%rax), %rbp
    000000ce: 	movq	0x10(%rax), %rbx
    000000d2: 	movq	0x18(%rax), %r11
    000000d6: 	xorl	%eax, %eax
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp293:
    000000e0: 	movq	(%r10,%rax), %rsi
    000000e4: 	movq	(%rdi,%rax), %rcx
    000000e8: 	movq	0x8(%r10,%rax), %r13
    000000ed: 	movq	0x8(%r8,%rax), %r14
    000000f2: 	imulq	%rbp, %rsi
    000000f6: 	movq	0x18(%r10,%rax), %r15
    000000fb: 	imulq	%r12, %rcx
    000000ff: 	addq	(%rdx), %rcx
    00000102: 	imulq	%rbp, %r13
    00000106: 	addq	%rsi, %rcx
    00000109: 	movq	(%r9,%rax), %rsi
    0000010d: 	imulq	%rbx, %r14
    00000111: 	imulq	%rbp, %r15
    00000115: 	imulq	%r11, %rsi
    00000119: 	addq	%rsi, %rcx
    0000011c: 	movq	0x8(%rdi,%rax), %rsi
    00000121: 	imulq	%r12, %rsi
    00000125: 	addq	0x8(%rdx), %rsi
    00000129: 	addq	%r13, %rsi
    0000012c: 	movq	0x8(%r9,%rax), %r13
    00000131: 	imulq	%r11, %r13
    00000135: 	addq	%r13, %rsi
    00000138: 	movq	0x10(%r10,%rax), %r13
    0000013d: 	addq	%rsi, %r14
    00000140: 	movq	0x10(%rdi,%rax), %rsi
    00000145: 	imulq	%rbp, %r13
    00000149: 	imulq	%r12, %rsi
    0000014d: 	addq	0x10(%rdx), %rsi
    00000151: 	addq	%r13, %rsi
    00000154: 	movq	0x10(%r9,%rax), %r13
    00000159: 	imulq	%r11, %r13
    0000015d: 	addq	%r13, %rsi
    00000160: 	movq	0x10(%r8,%rax), %r13
    00000165: 	imulq	%rbx, %r13
    00000169: 	addq	%rsi, %r13
    0000016c: 	movq	0x18(%rdi,%rax), %rsi
    00000171: 	imulq	%r12, %rsi
    00000175: 	addq	0x18(%rdx), %rsi
    00000179: 	addq	%r15, %rsi
    0000017c: 	movq	0x18(%r9,%rax), %r15
    00000181: 	imulq	%r11, %r15
    00000185: 	addq	%r15, %rsi
    00000188: 	movq	0x18(%r8,%rax), %r15
    0000018d: 	imulq	%rbx, %r15
    00000191: 	addq	%r15, %rsi
    00000194: 	movq	(%r8,%rax), %r15
    00000198: 	movq	%r14, 0x8(%rdx)
    0000019c: 	movq	%r13, 0x10(%rdx)
    000001a0: 	imulq	%rbx, %r15
    000001a4: 	movq	%rsi, 0x18(%rdx)
    000001a8: 	addq	%r15, %rcx
    000001ab: 	addq	$0x20, %rdx
    000001af: 	movq	%rcx, -0x20(%rdx)
    000001b3: 	addq	$0x20, %rax
    000001b7: 	cmpq	$0x640, %rax
    000001bd: 	jne	.Ltmp293 # Offset: 445
    000001c3: 	addq	$0x20, 0x8(%rsp)
    000001c9: 	addq	$0x1900, %rdi
    000001d0: 	cmpq	%rdi, 0x18(%rsp)
    000001d5: 	jne	.Ltmp294 # Offset: 469
    000001db: 	movl	0x2c(%rsp), %ebx
    000001df: 	movq	0x30(%rsp), %rdx
    000001e4: 	movq	0x20(%rsp), %rcx
    000001e9: 	movl	%ebx, %eax
    000001eb: 	imull	%ebx, %eax
    000001ee: 	imull	$0x12c, %eax, %eax
    000001f4: 	addl	%ebx, %eax
    000001f6: 	cltq
    000001f8: 	jmp	.Ltmp295 # Offset: 504
.Ltmp297:
    000001fa: 	addq	$0x8, %rdx
    000001fe: 	cmpq	%rdx, %rcx
    00000201: 	je	.Ltmp296 # Offset: 513
.Ltmp295:
    00000203: 	cmpq	(%rdx), %rax
    00000206: 	je	.Ltmp297 # Offset: 518
    00000208: 	movl	current_test(%rip), %edx
    0000020e: 	leaq	DATAat0x79d4(%rip), %rsi
    00000215: 	movl	$0x1, %edi
    0000021a: 	xorl	%eax, %eax
    0000021c: 	callq	__printf_chk@PLT # Offset: 540
.Ltmp296:
    00000221: 	addl	$0x1, 0x28(%rsp)
    00000226: 	movl	0x28(%rsp), %eax
    0000022a: 	cmpl	%eax, iterations(%rip)
    00000230: 	jg	.Ltmp298 # Offset: 560
.Ltmp291:
    00000236: 	callq	clock@PLT # Offset: 566
    0000023b: 	pxor	%xmm0, %xmm0
    0000023f: 	movq	0x48(%rsp), %rdi
    00000244: 	movq	%rax, end_time(%rip)
    0000024b: 	subq	start_time(%rip), %rax
    00000252: 	cvtsi2sd	%rax, %xmm0
    00000257: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000025f: 	addq	$0x58, %rsp
    00000263: 	popq	%rbx
    00000264: 	popq	%rbp
    00000265: 	popq	%r12
    00000267: 	popq	%r13
    00000269: 	popq	%r14
    0000026b: 	popq	%r15
    0000026d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 621
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt4ImEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt6ImEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x4e30
  Size        : 0x17e
  MaxSize     : 0x180
  Offset      : 0x4e30
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt6ImEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rsi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rcx, (%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp299 # Offset: 51
    00000039: 	leaq	0x75300(%rbp), %rax
    00000040: 	xorl	%r13d, %r13d
    00000043: 	leaq	0x640(%r12), %r14
    0000004b: 	addq	$0x75940, %rbp
    00000052: 	movq	%rax, 0x8(%rsp)
    00000057: 	leaq	DATAat0x79d4(%rip), %r15
.Ltmp306:
    0000005e: 	movslq	init_value(%rip), %rax
    00000065: 	movq	%r12, %r9
    00000068: 	movq	%rax, %xmm0
    0000006d: 	movq	%rax, %r10
    00000070: 	movq	%r12, %rax
    00000073: 	punpcklqdq	%xmm0, %xmm0
.Ltmp300:
    00000077: 	movups	%xmm0, (%rax)
    0000007a: 	addq	$0x10, %rax
    0000007e: 	cmpq	%rax, %r14
    00000081: 	jne	.Ltmp300 # Offset: 129
    00000083: 	movq	0x8(%rsp), %rdi
    00000088: 	movq	%r12, %r8
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp302:
    00000090: 	movq	(%r8), %rsi
    00000093: 	movq	%rbx, %rcx
    00000096: 	leaq	-0x75300(%rdi), %rdx
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp301:
    000000a0: 	movq	(%rcx), %rax
    000000a3: 	movq	0x8(%rcx), %r11
    000000a7: 	addq	$0x1900, %rdx
    000000ae: 	addq	$0x20, %rcx
    000000b2: 	imulq	-0x12c0(%rdx), %r11
    000000ba: 	imulq	-0x1900(%rdx), %rax
    000000c2: 	addq	%r11, %rax
    000000c5: 	movq	-0x8(%rcx), %r11
    000000c9: 	imulq	-0x640(%rdx), %r11
    000000d1: 	addq	%r11, %rax
    000000d4: 	movq	-0x10(%rcx), %r11
    000000d8: 	imulq	-0xc80(%rdx), %r11
    000000e0: 	addq	%r11, %rax
    000000e3: 	addq	%rax, %rsi
    000000e6: 	cmpq	%rdx, %rdi
    000000e9: 	jne	.Ltmp301 # Offset: 233
    000000eb: 	addq	$0x8, %rdi
    000000ef: 	movq	%rsi, (%r8)
    000000f2: 	addq	$0x8, %r8
    000000f6: 	cmpq	%rdi, %rbp
    000000f9: 	jne	.Ltmp302 # Offset: 249
    000000fb: 	movl	%r10d, %eax
    000000fe: 	imull	%r10d, %eax
    00000102: 	imull	$0x12c, %eax, %eax
    00000108: 	addl	%r10d, %eax
    0000010b: 	cltq
    0000010d: 	jmp	.Ltmp303 # Offset: 269
.Ltmp305:
    0000010f: 	addq	$0x8, %r9
    00000113: 	cmpq	%r9, %r14
    00000116: 	je	.Ltmp304 # Offset: 278
.Ltmp303:
    00000118: 	cmpq	(%r9), %rax
    0000011b: 	je	.Ltmp305 # Offset: 283
    0000011d: 	movl	current_test(%rip), %edx
    00000123: 	movq	%r15, %rsi
    00000126: 	movl	$0x1, %edi
    0000012b: 	xorl	%eax, %eax
    0000012d: 	callq	__printf_chk@PLT # Offset: 301
.Ltmp304:
    00000132: 	addl	$0x1, %r13d
    00000136: 	cmpl	%r13d, iterations(%rip)
    0000013d: 	jg	.Ltmp306 # Offset: 317
.Ltmp299:
    00000143: 	callq	clock@PLT # Offset: 323
    00000148: 	pxor	%xmm0, %xmm0
    0000014c: 	movq	(%rsp), %rdi
    00000150: 	movq	%rax, end_time(%rip)
    00000157: 	subq	start_time(%rip), %rax
    0000015e: 	cvtsi2sd	%rax, %xmm0
    00000163: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000016b: 	addq	$0x18, %rsp
    0000016f: 	popq	%rbx
    00000170: 	popq	%rbp
    00000171: 	popq	%r12
    00000173: 	popq	%r13
    00000175: 	popq	%r14
    00000177: 	popq	%r15
    00000179: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 377
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt6ImEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt7ImEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x4fb0
  Size        : 0x1ef
  MaxSize     : 0x1f0
  Offset      : 0x4fb0
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt7ImEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdx, %rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movq	%rdi, 0x28(%rsp)
    0000001d: 	movq	%rsi, 0x18(%rsp)
    00000022: 	movq	%rcx, 0x40(%rsp)
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	$0x0, 0x30(%rsp)
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	leaq	0x640(%r15), %rax
    00000042: 	movq	%rax, 0x20(%rsp)
    00000047: 	leaq	0x75300(%rbx), %rax
    0000004e: 	movq	%rax, 0x48(%rsp)
    00000053: 	movl	iterations(%rip), %eax
    00000059: 	testl	%eax, %eax
    0000005b: 	jle	.Ltmp307 # Offset: 91
.Ltmp314:
    00000061: 	movslq	init_value(%rip), %rax
    00000068: 	movq	%rax, %xmm0
    0000006d: 	movl	%eax, 0x34(%rsp)
    00000071: 	movq	0x28(%rsp), %rax
    00000076: 	punpcklqdq	%xmm0, %xmm0
    0000007a: 	movq	%rax, 0x38(%rsp)
.Ltmp308:
    0000007f: 	movups	%xmm0, (%rax)
    00000082: 	addq	$0x10, %rax
    00000086: 	cmpq	%rax, 0x20(%rsp)
    0000008b: 	jne	.Ltmp308 # Offset: 139
    0000008d: 	movq	0x48(%rsp), %r11
    00000092: 	movq	0x28(%rsp), %r13
    00000097: 	movl	$0x3, %r15d
    0000009d: 	xorl	%r14d, %r14d
    000000a0: 	movq	$0x2, 0x8(%rsp)
    000000a9: 	movq	$0x1, 0x10(%rsp)
.Ltmp310:
    000000b2: 	movq	0x10(%rsp), %r12
    000000b7: 	movq	0x8(%rsp), %rbp
    000000bc: 	movq	%r15, %rbx
    000000bf: 	leaq	-0x75300(%r11), %rax
    000000c6: 	movq	(%r13), %r9
    000000ca: 	movq	0x8(%r13), %r8
    000000ce: 	subq	%r14, %rbx
    000000d1: 	movq	0x10(%r13), %rdi
    000000d5: 	movq	0x18(%r13), %rsi
    000000d9: 	subq	%r14, %r12
    000000dc: 	subq	%r14, %rbp
    000000df: 	movq	0x18(%rsp), %rcx
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp309:
    000000e8: 	movq	(%rcx), %rdx
    000000eb: 	movq	(%rax), %r10
    000000ee: 	addq	$0x8, %rcx
    000000f2: 	imulq	%rdx, %r10
    000000f6: 	addq	%r10, %r9
    000000f9: 	movq	(%rax,%r12,8), %r10
    000000fd: 	imulq	%rdx, %r10
    00000101: 	addq	%r10, %r8
    00000104: 	movq	(%rax,%rbp,8), %r10
    00000108: 	imulq	%rdx, %r10
    0000010c: 	imulq	(%rax,%rbx,8), %rdx
    00000111: 	addq	$0x640, %rax
    00000117: 	addq	%r10, %rdi
    0000011a: 	addq	%rdx, %rsi
    0000011d: 	cmpq	%rax, %r11
    00000120: 	jne	.Ltmp309 # Offset: 288
    00000122: 	addq	$0x4, %r14
    00000126: 	movq	%r9, (%r13)
    0000012a: 	addq	$0x4, %r15
    0000012e: 	addq	$0x20, %r13
    00000132: 	movq	%r8, -0x18(%r13)
    00000136: 	addq	$0x20, %r11
    0000013a: 	movq	%rdi, -0x10(%r13)
    0000013e: 	movq	%rsi, -0x8(%r13)
    00000142: 	addq	$0x4, 0x10(%rsp)
    00000148: 	addq	$0x4, 0x8(%rsp)
    0000014e: 	cmpq	$0xc8, %r14
    00000155: 	jne	.Ltmp310 # Offset: 341
    0000015b: 	movl	0x34(%rsp), %ebx
    0000015f: 	movq	0x38(%rsp), %rdx
    00000164: 	movl	%ebx, %eax
    00000166: 	imull	%ebx, %eax
    00000169: 	imull	$0x12c, %eax, %eax
    0000016f: 	addl	%ebx, %eax
    00000171: 	cltq
    00000173: 	jmp	.Ltmp311 # Offset: 371
.Ltmp313:
    00000175: 	addq	$0x8, %rdx
    00000179: 	cmpq	%rdx, 0x20(%rsp)
    0000017e: 	je	.Ltmp312 # Offset: 382
.Ltmp311:
    00000180: 	cmpq	(%rdx), %rax
    00000183: 	je	.Ltmp313 # Offset: 387
    00000185: 	movl	current_test(%rip), %edx
    0000018b: 	leaq	DATAat0x79d4(%rip), %rsi
    00000192: 	movl	$0x1, %edi
    00000197: 	xorl	%eax, %eax
    00000199: 	callq	__printf_chk@PLT # Offset: 409
.Ltmp312:
    0000019e: 	addl	$0x1, 0x30(%rsp)
    000001a3: 	movl	0x30(%rsp), %eax
    000001a7: 	cmpl	%eax, iterations(%rip)
    000001ad: 	jg	.Ltmp314 # Offset: 429
.Ltmp307:
    000001b3: 	callq	clock@PLT # Offset: 435
    000001b8: 	pxor	%xmm0, %xmm0
    000001bc: 	movq	0x40(%rsp), %rdi
    000001c1: 	movq	%rax, end_time(%rip)
    000001c8: 	subq	start_time(%rip), %rax
    000001cf: 	cvtsi2sd	%rax, %xmm0
    000001d4: 	divsd	DATAat0x79f8(%rip), %xmm0
    000001dc: 	addq	$0x58, %rsp
    000001e0: 	popq	%rbx
    000001e1: 	popq	%rbp
    000001e2: 	popq	%r12
    000001e4: 	popq	%r13
    000001e6: 	popq	%r14
    000001e8: 	popq	%r15
    000001ea: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 490
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt7ImEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt8ImEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x51a0
  Size        : 0x2b5
  MaxSize     : 0x2c0
  Offset      : 0x51a0
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt8ImEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	subq	$0x58, %rsp
    00000015: 	movq	%rdi, 0x20(%rsp)
    0000001a: 	movq	%rsi, 0x10(%rsp)
    0000001f: 	movq	%rcx, 0x40(%rsp)
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	movl	iterations(%rip), %eax
    00000036: 	testl	%eax, %eax
    00000038: 	jle	.Ltmp315 # Offset: 56
    0000003e: 	movq	0x20(%rsp), %rax
    00000043: 	movl	$0x0, 0x30(%rsp)
    0000004b: 	addq	$0x640, %rax
    00000051: 	movq	%rax, 0x28(%rsp)
    00000056: 	leaq	0x75300(%rbx), %rax
    0000005d: 	movq	%rax, 0x48(%rsp)
    00000062: 	leaq	0x75940(%rbx), %rax
    00000069: 	movq	%rax, 0x18(%rsp)
.Ltmp322:
    0000006e: 	movslq	init_value(%rip), %rax
    00000075: 	movq	%rax, %xmm0
    0000007a: 	movl	%eax, 0x34(%rsp)
    0000007e: 	movq	0x20(%rsp), %rax
    00000083: 	punpcklqdq	%xmm0, %xmm0
    00000087: 	movq	%rax, 0x38(%rsp)
.Ltmp316:
    0000008c: 	movups	%xmm0, (%rax)
    0000008f: 	addq	$0x10, %rax
    00000093: 	cmpq	%rax, 0x28(%rsp)
    00000098: 	jne	.Ltmp316 # Offset: 152
    0000009a: 	movq	0x48(%rsp), %rax
    0000009f: 	movq	%rax, (%rsp)
    000000a3: 	movq	0x20(%rsp), %rax
    000000a8: 	movq	%rax, 0x8(%rsp)
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp318:
    000000b0: 	movq	0x8(%rsp), %rax
    000000b5: 	movq	0x10(%rsp), %r11
    000000ba: 	movq	(%rax), %r14
    000000bd: 	movq	0x8(%rax), %r13
    000000c1: 	movq	0x10(%rax), %r12
    000000c5: 	movq	0x18(%rax), %rbp
    000000c9: 	movq	(%rsp), %rax
    000000cd: 	leaq	-0x75300(%rax), %rcx
    000000d4: 	leaq	-0x752f8(%rax), %r10
    000000db: 	leaq	-0x752f0(%rax), %r9
    000000e2: 	leaq	-0x752e8(%rax), %r8
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp317:
    000000f0: 	movq	(%r11), %rax
    000000f3: 	movq	0x8(%r11), %rdi
    000000f7: 	movq	(%rcx), %rbx
    000000fa: 	movq	0x640(%rcx), %r15
    00000101: 	movq	0x10(%r11), %rsi
    00000105: 	movq	0x18(%r11), %rdx
    00000109: 	imulq	%rax, %rbx
    0000010d: 	imulq	%rdi, %r15
    00000111: 	addq	%rbx, %r15
    00000114: 	movq	0xc80(%rcx), %rbx
    0000011b: 	imulq	%rsi, %rbx
    0000011f: 	addq	%r15, %rbx
    00000122: 	movq	0x12c0(%rcx), %r15
    00000129: 	imulq	%rdx, %r15
    0000012d: 	addq	%r15, %rbx
    00000130: 	movq	0x640(%r10), %r15
    00000137: 	addq	%rbx, %r14
    0000013a: 	movq	(%r10), %rbx
    0000013d: 	imulq	%rdi, %r15
    00000141: 	imulq	%rax, %rbx
    00000145: 	addq	%rbx, %r15
    00000148: 	movq	0xc80(%r10), %rbx
    0000014f: 	imulq	%rsi, %rbx
    00000153: 	addq	%r15, %rbx
    00000156: 	movq	0x12c0(%r10), %r15
    0000015d: 	imulq	%rdx, %r15
    00000161: 	addq	%r15, %rbx
    00000164: 	movq	0x640(%r9), %r15
    0000016b: 	addq	%rbx, %r13
    0000016e: 	movq	(%r9), %rbx
    00000171: 	imulq	%rdi, %r15
    00000175: 	imulq	%rax, %rbx
    00000179: 	imulq	0x640(%r8), %rdi
    00000181: 	imulq	(%r8), %rax
    00000185: 	addq	%rbx, %r15
    00000188: 	movq	0xc80(%r9), %rbx
    0000018f: 	imulq	%rsi, %rbx
    00000193: 	addq	%rdi, %rax
    00000196: 	imulq	0xc80(%r8), %rsi
    0000019e: 	addq	%r15, %rbx
    000001a1: 	movq	0x12c0(%r9), %r15
    000001a8: 	addq	%rax, %rsi
    000001ab: 	imulq	%rdx, %r15
    000001af: 	imulq	0x12c0(%r8), %rdx
    000001b7: 	addq	%r15, %rbx
    000001ba: 	addq	%rsi, %rdx
    000001bd: 	addq	%rbx, %r12
    000001c0: 	addq	%rdx, %rbp
    000001c3: 	addq	$0x20, %r11
    000001c7: 	addq	$0x1900, %rcx
    000001ce: 	addq	$0x1900, %r10
    000001d5: 	addq	$0x1900, %r9
    000001dc: 	addq	$0x1900, %r8
    000001e3: 	cmpq	%rcx, (%rsp)
    000001e7: 	jne	.Ltmp317 # Offset: 487
    000001ed: 	movq	0x8(%rsp), %rax
    000001f2: 	addq	$0x20, (%rsp)
    000001f7: 	movq	%r14, (%rax)
    000001fa: 	addq	$0x20, %rax
    000001fe: 	movq	%r13, -0x18(%rax)
    00000202: 	movq	%r12, -0x10(%rax)
    00000206: 	movq	%rbp, -0x8(%rax)
    0000020a: 	movq	%rax, 0x8(%rsp)
    0000020f: 	movq	(%rsp), %rax
    00000213: 	cmpq	%rax, 0x18(%rsp)
    00000218: 	jne	.Ltmp318 # Offset: 536
    0000021e: 	movl	0x34(%rsp), %ecx
    00000222: 	movq	0x38(%rsp), %rdx
    00000227: 	movl	%ecx, %eax
    00000229: 	imull	%ecx, %eax
    0000022c: 	imull	$0x12c, %eax, %eax
    00000232: 	addl	%ecx, %eax
    00000234: 	movq	0x28(%rsp), %rcx
    00000239: 	cltq
    0000023b: 	jmp	.Ltmp319 # Offset: 571
.Ltmp321:
    0000023d: 	addq	$0x8, %rdx
    00000241: 	cmpq	%rdx, %rcx
    00000244: 	je	.Ltmp320 # Offset: 580
.Ltmp319:
    00000246: 	cmpq	(%rdx), %rax
    00000249: 	je	.Ltmp321 # Offset: 585
    0000024b: 	movl	current_test(%rip), %edx
    00000251: 	leaq	DATAat0x79d4(%rip), %rsi
    00000258: 	movl	$0x1, %edi
    0000025d: 	xorl	%eax, %eax
    0000025f: 	callq	__printf_chk@PLT # Offset: 607
.Ltmp320:
    00000264: 	addl	$0x1, 0x30(%rsp)
    00000269: 	movl	0x30(%rsp), %eax
    0000026d: 	cmpl	%eax, iterations(%rip)
    00000273: 	jg	.Ltmp322 # Offset: 627
.Ltmp315:
    00000279: 	callq	clock@PLT # Offset: 633
    0000027e: 	pxor	%xmm0, %xmm0
    00000282: 	movq	0x40(%rsp), %rdi
    00000287: 	movq	%rax, end_time(%rip)
    0000028e: 	subq	start_time(%rip), %rax
    00000295: 	cvtsi2sd	%rax, %xmm0
    0000029a: 	divsd	DATAat0x79f8(%rip), %xmm0
    000002a2: 	addq	$0x58, %rsp
    000002a6: 	popq	%rbx
    000002a7: 	popq	%rbp
    000002a8: 	popq	%r12
    000002aa: 	popq	%r13
    000002ac: 	popq	%r14
    000002ae: 	popq	%r15
    000002b0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 688
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt8ImEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt1IdEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x5460
  Size        : 0x1a0
  MaxSize     : 0x1a0
  Offset      : 0x5460
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt1IdEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rcx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rsi, (%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp323 # Offset: 51
    00000039: 	xorl	%r15d, %r15d
    0000003c: 	leaq	0x640(%rbx), %rcx
    00000043: 	leaq	0x75300(%rbp), %r14
    0000004a: 	leaq	DATAat0x79d4(%rip), %r13
.Ltmp332:
    00000051: 	movl	init_value(%rip), %r8d
    00000058: 	pxor	%xmm0, %xmm0
    0000005c: 	movq	%rbx, %r9
    0000005f: 	movq	%rbx, %rax
    00000062: 	cvtsi2sd	%r8d, %xmm0
    00000067: 	unpcklpd	%xmm0, %xmm0
.Ltmp324:
    0000006b: 	movups	%xmm0, (%rax)
    0000006e: 	addq	$0x10, %rax
    00000072: 	cmpq	%rcx, %rax
    00000075: 	jne	.Ltmp324 # Offset: 117
    00000077: 	movq	(%rsp), %rdi
    0000007b: 	movq	%rbp, %rdx
.Ltmp327:
    0000007e: 	leaq	0x8(%rdx), %rax
    00000082: 	movsd	(%rdi), %xmm1
    00000086: 	cmpq	%rax, %rbx
    00000089: 	je	.Ltmp325 # Offset: 137
    0000008f: 	unpcklpd	%xmm1, %xmm1
    00000093: 	xorl	%eax, %eax
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp326:
    00000098: 	movupd	(%rdx,%rax), %xmm0
    0000009d: 	movupd	(%rbx,%rax), %xmm2
    000000a2: 	mulpd	%xmm1, %xmm0
    000000a6: 	addpd	%xmm2, %xmm0
    000000aa: 	movups	%xmm0, (%rbx,%rax)
    000000ae: 	addq	$0x10, %rax
    000000b2: 	cmpq	$0x640, %rax
    000000b8: 	jne	.Ltmp326 # Offset: 184
    000000ba: 	addq	$0x640, %rdx
    000000c1: 	addq	$0x8, %rdi
    000000c5: 	cmpq	%r14, %rdx
    000000c8: 	jne	.Ltmp327 # Offset: 200
.Ltmp334:
    000000ca: 	movl	%r8d, %eax
    000000cd: 	pxor	%xmm0, %xmm0
    000000d1: 	imull	%r8d, %eax
    000000d5: 	imull	$0x12c, %eax, %eax
    000000db: 	addl	%r8d, %eax
    000000de: 	cvtsi2sd	%eax, %xmm0
    000000e2: 	jmp	.Ltmp328 # Offset: 226
.Ltmp331:
    000000e4: 	addq	$0x8, %r9
    000000e8: 	cmpq	%rcx, %r9
    000000eb: 	je	.Ltmp329 # Offset: 235
.Ltmp328:
    000000ed: 	ucomisd	(%r9), %xmm0
    000000f2: 	jp	.Ltmp330 # Offset: 242
    000000f4: 	je	.Ltmp331 # Offset: 244
.Ltmp330:
    000000f6: 	movl	current_test(%rip), %edx
    000000fc: 	movq	%r13, %rsi
    000000ff: 	movl	$0x1, %edi
    00000104: 	xorl	%eax, %eax
    00000106: 	movq	%rcx, 0x8(%rsp)
    0000010b: 	callq	__printf_chk@PLT # Offset: 267
    00000110: 	movq	0x8(%rsp), %rcx
.Ltmp329:
    00000115: 	addl	$0x1, %r15d
    00000119: 	cmpl	%r15d, iterations(%rip)
    00000120: 	jg	.Ltmp332 # Offset: 288
.Ltmp323:
    00000126: 	callq	clock@PLT # Offset: 294
    0000012b: 	pxor	%xmm0, %xmm0
    0000012f: 	movq	%r12, %rdi
    00000132: 	movq	%rax, end_time(%rip)
    00000139: 	subq	start_time(%rip), %rax
    00000140: 	cvtsi2sd	%rax, %xmm0
    00000145: 	divsd	DATAat0x79f8(%rip), %xmm0
    0000014d: 	addq	$0x18, %rsp
    00000151: 	popq	%rbx
    00000152: 	popq	%rbp
    00000153: 	popq	%r12
    00000155: 	popq	%r13
    00000157: 	popq	%r14
    00000159: 	popq	%r15
    0000015b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 347
.Ltmp325:
    00000160: 	xorl	%eax, %eax
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp333:
    00000168: 	movsd	(%rdx,%rax), %xmm0
    0000016d: 	mulsd	%xmm1, %xmm0
    00000171: 	addsd	(%rbx,%rax), %xmm0
    00000176: 	movsd	%xmm0, (%rbx,%rax)
    0000017b: 	addq	$0x8, %rax
    0000017f: 	cmpq	$0x640, %rax
    00000185: 	jne	.Ltmp333 # Offset: 389
    00000187: 	addq	$0x640, %rdx
    0000018e: 	addq	$0x8, %rdi
    00000192: 	cmpq	%r14, %rdx
    00000195: 	jne	.Ltmp327 # Offset: 405
    0000019b: 	jmp	.Ltmp334 # Offset: 411
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt1IdEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt2IdEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x5600
  Size        : 0x16c
  MaxSize     : 0x170
  Offset      : 0x5600
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt2IdEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rsi, (%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp335 # Offset: 51
    00000039: 	xorl	%r8d, %r8d
    0000003c: 	leaq	0x640(%r14), %rbx
    00000043: 	leaq	0x75300(%rbp), %r15
    0000004a: 	leaq	DATAat0x79d4(%rip), %r13
.Ltmp343:
    00000051: 	movl	init_value(%rip), %r10d
    00000058: 	pxor	%xmm0, %xmm0
    0000005c: 	movq	%r14, %rdi
    0000005f: 	movq	%r14, %rax
    00000062: 	cvtsi2sd	%r10d, %xmm0
    00000067: 	unpcklpd	%xmm0, %xmm0
.Ltmp336:
    0000006b: 	movups	%xmm0, (%rax)
    0000006e: 	addq	$0x10, %rax
    00000072: 	cmpq	%rbx, %rax
    00000075: 	jne	.Ltmp336 # Offset: 117
    00000077: 	movq	(%rsp), %rsi
    0000007b: 	movq	%rbp, %rcx
    0000007e: 	nop # Size: 2
.Ltmp338:
    00000080: 	movsd	(%rsi), %xmm2
    00000084: 	movq	%rcx, %rdx
    00000087: 	movq	%r14, %rax
    0000008a: 	unpcklpd	%xmm2, %xmm2
    0000008e: 	nop # Size: 2
.Ltmp337:
    00000090: 	movupd	(%rdx), %xmm1
    00000094: 	movupd	(%rax), %xmm4
    00000098: 	addq	$0x20, %rax
    0000009c: 	addq	$0x20, %rdx
    000000a0: 	movupd	-0x10(%rdx), %xmm0
    000000a5: 	movupd	-0x10(%rax), %xmm3
    000000aa: 	mulpd	%xmm2, %xmm1
    000000ae: 	mulpd	%xmm2, %xmm0
    000000b2: 	addpd	%xmm4, %xmm1
    000000b6: 	addpd	%xmm3, %xmm0
    000000ba: 	movups	%xmm1, -0x20(%rax)
    000000be: 	movups	%xmm0, -0x10(%rax)
    000000c2: 	cmpq	%rax, %rbx
    000000c5: 	jne	.Ltmp337 # Offset: 197
    000000c7: 	addq	$0x640, %rcx
    000000ce: 	addq	$0x8, %rsi
    000000d2: 	cmpq	%rcx, %r15
    000000d5: 	jne	.Ltmp338 # Offset: 213
    000000d7: 	movl	%r10d, %eax
    000000da: 	pxor	%xmm0, %xmm0
    000000de: 	imull	%r10d, %eax
    000000e2: 	imull	$0x12c, %eax, %eax
    000000e8: 	addl	%r10d, %eax
    000000eb: 	cvtsi2sd	%eax, %xmm0
    000000ef: 	jmp	.Ltmp339 # Offset: 239
.Ltmp342:
    000000f1: 	addq	$0x8, %rdi
    000000f5: 	cmpq	%rdi, %rbx
    000000f8: 	je	.Ltmp340 # Offset: 248
.Ltmp339:
    000000fa: 	ucomisd	(%rdi), %xmm0
    000000fe: 	jp	.Ltmp341 # Offset: 254
    00000100: 	je	.Ltmp342 # Offset: 256
.Ltmp341:
    00000102: 	movl	current_test(%rip), %edx
    00000108: 	movq	%r13, %rsi
    0000010b: 	movl	$0x1, %edi
    00000110: 	xorl	%eax, %eax
    00000112: 	movl	%r8d, 0xc(%rsp)
    00000117: 	callq	__printf_chk@PLT # Offset: 279
    0000011c: 	movl	0xc(%rsp), %r8d
.Ltmp340:
    00000121: 	addl	$0x1, %r8d
    00000125: 	cmpl	%r8d, iterations(%rip)
    0000012c: 	jg	.Ltmp343 # Offset: 300
.Ltmp335:
    00000132: 	callq	clock@PLT # Offset: 306
    00000137: 	pxor	%xmm0, %xmm0
    0000013b: 	movq	%r12, %rdi
    0000013e: 	movq	%rax, end_time(%rip)
    00000145: 	subq	start_time(%rip), %rax
    0000014c: 	cvtsi2sd	%rax, %xmm0
    00000151: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000159: 	addq	$0x18, %rsp
    0000015d: 	popq	%rbx
    0000015e: 	popq	%rbp
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 359
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt2IdEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt3IdEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x5770
  Size        : 0x253
  MaxSize     : 0x260
  Offset      : 0x5770
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt3IdEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	movq	%rcx, 0x10(%rsp)
    00000022: 	callq	clock@PLT # Offset: 34
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	movl	iterations(%rip), %eax
    00000034: 	testl	%eax, %eax
    00000036: 	jle	.Ltmp344 # Offset: 54
    0000003c: 	leaq	0x640(%r12), %rax
    00000044: 	xorl	%r13d, %r13d
    00000047: 	leaq	0x640(%rbx), %r14
    0000004e: 	movq	%rax, 0x28(%rsp)
    00000053: 	leaq	0xc80(%r12), %rax
    0000005b: 	leaq	0x75300(%r12), %rbp
    00000063: 	movq	%rax, 0x18(%rsp)
    00000068: 	leaq	0x12c0(%r12), %rax
    00000070: 	leaq	DATAat0x79d4(%rip), %r15
    00000077: 	movq	%rax, 0x20(%rsp)
.Ltmp353:
    0000007c: 	movl	init_value(%rip), %r10d
    00000083: 	pxor	%xmm0, %xmm0
    00000087: 	movq	%rbx, %r9
    0000008a: 	movq	%rbx, %rax
    0000008d: 	cvtsi2sd	%r10d, %xmm0
    00000092: 	unpcklpd	%xmm0, %xmm0
.Ltmp345:
    00000096: 	movups	%xmm0, (%rax)
    00000099: 	addq	$0x10, %rax
    0000009d: 	cmpq	%rax, %r14
    000000a0: 	jne	.Ltmp345 # Offset: 160
    000000a2: 	movq	0x8(%rsp), %r8
    000000a7: 	movq	0x28(%rsp), %rdi
    000000ac: 	movq	%r12, %rdx
    000000af: 	movq	0x18(%rsp), %rsi
    000000b4: 	movq	0x20(%rsp), %rcx
.Ltmp348:
    000000b9: 	leaq	0x8(%rdx), %r11
    000000bd: 	movq	%rbx, %rax
    000000c0: 	movsd	(%r8), %xmm2
    000000c5: 	movsd	0x8(%r8), %xmm3
    000000cb: 	subq	%r11, %rax
    000000ce: 	movsd	0x10(%r8), %xmm4
    000000d4: 	movsd	0x18(%r8), %xmm5
    000000da: 	cmpq	$0x12c0, %rax
    000000e0: 	jbe	.Ltmp346 # Offset: 224
    000000e6: 	unpcklpd	%xmm2, %xmm2
    000000ea: 	unpcklpd	%xmm3, %xmm3
    000000ee: 	unpcklpd	%xmm4, %xmm4
    000000f2: 	xorl	%eax, %eax
    000000f4: 	unpcklpd	%xmm5, %xmm5
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp347:
    00000100: 	movupd	(%rdi,%rax), %xmm0
    00000105: 	movupd	(%rdx,%rax), %xmm1
    0000010a: 	movupd	(%rbx,%rax), %xmm6
    0000010f: 	mulpd	%xmm2, %xmm1
    00000113: 	mulpd	%xmm3, %xmm0
    00000117: 	addpd	%xmm1, %xmm0
    0000011b: 	movupd	(%rsi,%rax), %xmm1
    00000120: 	mulpd	%xmm4, %xmm1
    00000124: 	addpd	%xmm1, %xmm0
    00000128: 	movupd	(%rcx,%rax), %xmm1
    0000012d: 	mulpd	%xmm5, %xmm1
    00000131: 	addpd	%xmm1, %xmm0
    00000135: 	addpd	%xmm6, %xmm0
    00000139: 	movups	%xmm0, (%rbx,%rax)
    0000013d: 	addq	$0x10, %rax
    00000141: 	cmpq	$0x640, %rax
    00000147: 	jne	.Ltmp347 # Offset: 327
.Ltmp355:
    00000149: 	addq	$0x1900, %rdx
    00000150: 	addq	$0x20, %r8
    00000154: 	addq	$0x1900, %rdi
    0000015b: 	addq	$0x1900, %rsi
    00000162: 	addq	$0x1900, %rcx
    00000169: 	cmpq	%rbp, %rdx
    0000016c: 	jne	.Ltmp348 # Offset: 364
    00000172: 	movl	%r10d, %eax
    00000175: 	pxor	%xmm0, %xmm0
    00000179: 	imull	%r10d, %eax
    0000017d: 	imull	$0x12c, %eax, %eax
    00000183: 	addl	%r10d, %eax
    00000186: 	cvtsi2sd	%eax, %xmm0
    0000018a: 	jmp	.Ltmp349 # Offset: 394
.Ltmp352:
    0000018c: 	addq	$0x8, %r9
    00000190: 	cmpq	%r9, %r14
    00000193: 	je	.Ltmp350 # Offset: 403
.Ltmp349:
    00000195: 	ucomisd	(%r9), %xmm0
    0000019a: 	jp	.Ltmp351 # Offset: 410
    0000019c: 	je	.Ltmp352 # Offset: 412
.Ltmp351:
    0000019e: 	movl	current_test(%rip), %edx
    000001a4: 	movq	%r15, %rsi
    000001a7: 	movl	$0x1, %edi
    000001ac: 	xorl	%eax, %eax
    000001ae: 	callq	__printf_chk@PLT # Offset: 430
.Ltmp350:
    000001b3: 	addl	$0x1, %r13d
    000001b7: 	cmpl	%r13d, iterations(%rip)
    000001be: 	jg	.Ltmp353 # Offset: 446
.Ltmp344:
    000001c4: 	callq	clock@PLT # Offset: 452
    000001c9: 	pxor	%xmm0, %xmm0
    000001cd: 	movq	0x10(%rsp), %rdi
    000001d2: 	movq	%rax, end_time(%rip)
    000001d9: 	subq	start_time(%rip), %rax
    000001e0: 	cvtsi2sd	%rax, %xmm0
    000001e5: 	divsd	DATAat0x79f8(%rip), %xmm0
    000001ed: 	addq	$0x38, %rsp
    000001f1: 	popq	%rbx
    000001f2: 	popq	%rbp
    000001f3: 	popq	%r12
    000001f5: 	popq	%r13
    000001f7: 	popq	%r14
    000001f9: 	popq	%r15
    000001fb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 507
.Ltmp346:
    00000200: 	xorl	%eax, %eax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp354:
    00000208: 	movsd	(%rdi,%rax), %xmm0
    0000020d: 	movsd	(%rdx,%rax), %xmm1
    00000212: 	mulsd	%xmm3, %xmm0
    00000216: 	mulsd	%xmm2, %xmm1
    0000021a: 	addsd	%xmm1, %xmm0
    0000021e: 	movsd	(%rsi,%rax), %xmm1
    00000223: 	mulsd	%xmm4, %xmm1
    00000227: 	addsd	%xmm1, %xmm0
    0000022b: 	movsd	(%rcx,%rax), %xmm1
    00000230: 	mulsd	%xmm5, %xmm1
    00000234: 	addsd	%xmm1, %xmm0
    00000238: 	addsd	(%rbx,%rax), %xmm0
    0000023d: 	movsd	%xmm0, (%rbx,%rax)
    00000242: 	addq	$0x8, %rax
    00000246: 	cmpq	$0x640, %rax
    0000024c: 	jne	.Ltmp354 # Offset: 588
    0000024e: 	jmp	.Ltmp355 # Offset: 590
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt3IdEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt4IdEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x59d0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x59d0
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt4IdEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rcx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rsi, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	movl	iterations(%rip), %eax
    00000032: 	testl	%eax, %eax
    00000034: 	jle	.Ltmp356 # Offset: 52
    0000003a: 	xorl	%r15d, %r15d
    0000003d: 	leaq	0x640(%rbx), %r14
    00000044: 	leaq	0x75300(%rbp), %r13
    0000004b: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp364:
    00000052: 	movl	init_value(%rip), %r11d
    00000059: 	pxor	%xmm0, %xmm0
    0000005d: 	movq	%rbx, %r10
    00000060: 	movq	%rbx, %rax
    00000063: 	cvtsi2sd	%r11d, %xmm0
    00000068: 	unpcklpd	%xmm0, %xmm0
.Ltmp357:
    0000006c: 	movups	%xmm0, (%rax)
    0000006f: 	addq	$0x10, %rax
    00000073: 	cmpq	%r14, %rax
    00000076: 	jne	.Ltmp357 # Offset: 118
    00000078: 	movq	0x8(%rsp), %r9
    0000007d: 	movq	%rbp, %rdx
.Ltmp359:
    00000080: 	movsd	(%r9), %xmm6
    00000085: 	movsd	0x8(%r9), %xmm5
    0000008b: 	xorl	%eax, %eax
    0000008d: 	leaq	0x640(%rdx), %rdi
    00000094: 	movsd	0x10(%r9), %xmm4
    0000009a: 	movsd	0x18(%r9), %xmm3
    000000a0: 	leaq	0xc80(%rdx), %rsi
    000000a7: 	leaq	0x12c0(%rdx), %rcx
    000000ae: 	unpcklpd	%xmm6, %xmm6
    000000b2: 	unpcklpd	%xmm5, %xmm5
    000000b6: 	unpcklpd	%xmm4, %xmm4
    000000ba: 	unpcklpd	%xmm3, %xmm3
    000000be: 	nop # Size: 2
.Ltmp358:
    000000c0: 	movupd	0x10(%rdi,%rax), %xmm0
    000000c6: 	movupd	0x10(%rdx,%rax), %xmm1
    000000cc: 	movupd	(%rdx,%rax), %xmm2
    000000d1: 	movupd	0x10(%rbx,%rax), %xmm7
    000000d7: 	mulpd	%xmm6, %xmm1
    000000db: 	mulpd	%xmm5, %xmm0
    000000df: 	mulpd	%xmm6, %xmm2
    000000e3: 	addpd	%xmm1, %xmm0
    000000e7: 	movupd	0x10(%rsi,%rax), %xmm1
    000000ed: 	mulpd	%xmm4, %xmm1
    000000f1: 	addpd	%xmm1, %xmm0
    000000f5: 	movupd	0x10(%rcx,%rax), %xmm1
    000000fb: 	mulpd	%xmm3, %xmm1
    000000ff: 	addpd	%xmm1, %xmm0
    00000103: 	movupd	(%rdi,%rax), %xmm1
    00000108: 	mulpd	%xmm5, %xmm1
    0000010c: 	addpd	%xmm7, %xmm0
    00000110: 	movupd	(%rbx,%rax), %xmm7
    00000115: 	addpd	%xmm2, %xmm1
    00000119: 	movupd	(%rsi,%rax), %xmm2
    0000011e: 	mulpd	%xmm4, %xmm2
    00000122: 	addpd	%xmm2, %xmm1
    00000126: 	movupd	(%rcx,%rax), %xmm2
    0000012b: 	movups	%xmm0, 0x10(%rbx,%rax)
    00000130: 	mulpd	%xmm3, %xmm2
    00000134: 	addpd	%xmm2, %xmm1
    00000138: 	addpd	%xmm7, %xmm1
    0000013c: 	movups	%xmm1, (%rbx,%rax)
    00000140: 	addq	$0x20, %rax
    00000144: 	cmpq	$0x640, %rax
    0000014a: 	jne	.Ltmp358 # Offset: 330
    00000150: 	addq	$0x1900, %rdx
    00000157: 	addq	$0x20, %r9
    0000015b: 	cmpq	%rdx, %r13
    0000015e: 	jne	.Ltmp359 # Offset: 350
    00000164: 	movl	%r11d, %eax
    00000167: 	pxor	%xmm0, %xmm0
    0000016b: 	imull	%r11d, %eax
    0000016f: 	imull	$0x12c, %eax, %eax
    00000175: 	addl	%r11d, %eax
    00000178: 	cvtsi2sd	%eax, %xmm0
    0000017c: 	jmp	.Ltmp360 # Offset: 380
.Ltmp363:
    0000017e: 	addq	$0x8, %r10
    00000182: 	cmpq	%r10, %r14
    00000185: 	je	.Ltmp361 # Offset: 389
.Ltmp360:
    00000187: 	ucomisd	(%r10), %xmm0
    0000018c: 	jp	.Ltmp362 # Offset: 396
    0000018e: 	je	.Ltmp363 # Offset: 398
.Ltmp362:
    00000190: 	movl	current_test(%rip), %edx
    00000196: 	movq	%r8, %rsi
    00000199: 	movl	$0x1, %edi
    0000019e: 	xorl	%eax, %eax
    000001a0: 	callq	__printf_chk@PLT # Offset: 416
    000001a5: 	leaq	DATAat0x79d4(%rip), %r8
.Ltmp361:
    000001ac: 	addl	$0x1, %r15d
    000001b0: 	cmpl	%r15d, iterations(%rip)
    000001b7: 	jg	.Ltmp364 # Offset: 439
.Ltmp356:
    000001bd: 	callq	clock@PLT # Offset: 445
    000001c2: 	pxor	%xmm0, %xmm0
    000001c6: 	movq	%r12, %rdi
    000001c9: 	movq	%rax, end_time(%rip)
    000001d0: 	subq	start_time(%rip), %rax
    000001d7: 	cvtsi2sd	%rax, %xmm0
    000001dc: 	divsd	DATAat0x79f8(%rip), %xmm0
    000001e4: 	addq	$0x18, %rsp
    000001e8: 	popq	%rbx
    000001e9: 	popq	%rbp
    000001ea: 	popq	%r12
    000001ec: 	popq	%r13
    000001ee: 	popq	%r14
    000001f0: 	popq	%r15
    000001f2: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 498
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt4IdEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt5IdEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x5bd0
  Size        : 0x18c
  MaxSize     : 0x190
  Offset      : 0x5bd0
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt5IdEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdx, %rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	movl	iterations(%rip), %eax
    00000030: 	testl	%eax, %eax
    00000032: 	jle	.Ltmp365 # Offset: 50
    00000038: 	leaq	0x75300(%rbx), %rax
    0000003f: 	leaq	0x640(%r14), %r8
    00000046: 	xorl	%r15d, %r15d
    00000049: 	movq	%rax, (%rsp)
    0000004d: 	movq	%r8, %rax
    00000050: 	leaq	0x75940(%rbx), %r13
    00000057: 	movq	%rbp, %r8
    0000005a: 	leaq	DATAat0x79d4(%rip), %r9
    00000061: 	movq	%rbx, %rbp
    00000064: 	movq	%rax, %rbx
.Ltmp373:
    00000067: 	movl	init_value(%rip), %r11d
    0000006e: 	pxor	%xmm0, %xmm0
    00000072: 	movq	%r14, %r10
    00000075: 	movq	%r14, %rax
    00000078: 	cvtsi2sd	%r11d, %xmm0
    0000007d: 	unpcklpd	%xmm0, %xmm0
.Ltmp366:
    00000081: 	movups	%xmm0, (%rax)
    00000084: 	addq	$0x10, %rax
    00000088: 	cmpq	%rbx, %rax
    0000008b: 	jne	.Ltmp366 # Offset: 139
    0000008d: 	movq	(%rsp), %rcx
    00000091: 	movq	%rbp, %rdi
    00000094: 	movq	%r14, %rsi
.Ltmp368:
    00000097: 	movsd	(%rsi), %xmm1
    0000009b: 	movq	%r12, %rdx
    0000009e: 	movq	%rdi, %rax
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp367:
    000000a8: 	movsd	(%rax), %xmm0
    000000ac: 	movupd	(%rdx), %xmm3
    000000b0: 	addq	$0xc80, %rax
    000000b6: 	addq	$0x10, %rdx
    000000ba: 	movhpd	-0x640(%rax), %xmm0
    000000c2: 	mulpd	%xmm3, %xmm0
    000000c6: 	addsd	%xmm0, %xmm1
    000000ca: 	unpckhpd	%xmm0, %xmm0
    000000ce: 	addsd	%xmm0, %xmm1
    000000d2: 	cmpq	%rax, %rcx
    000000d5: 	jne	.Ltmp367 # Offset: 213
    000000d7: 	addq	$0x8, %rcx
    000000db: 	movsd	%xmm1, (%rsi)
    000000df: 	addq	$0x8, %rdi
    000000e3: 	addq	$0x8, %rsi
    000000e7: 	cmpq	%rcx, %r13
    000000ea: 	jne	.Ltmp368 # Offset: 234
    000000ec: 	movl	%r11d, %eax
    000000ef: 	pxor	%xmm0, %xmm0
    000000f3: 	imull	%r11d, %eax
    000000f7: 	imull	$0x12c, %eax, %eax
    000000fd: 	addl	%r11d, %eax
    00000100: 	cvtsi2sd	%eax, %xmm0
    00000104: 	jmp	.Ltmp369 # Offset: 260
.Ltmp372:
    00000106: 	addq	$0x8, %r10
    0000010a: 	cmpq	%rbx, %r10
    0000010d: 	je	.Ltmp370 # Offset: 269
.Ltmp369:
    0000010f: 	ucomisd	(%r10), %xmm0
    00000114: 	jp	.Ltmp371 # Offset: 276
    00000116: 	je	.Ltmp372 # Offset: 278
.Ltmp371:
    00000118: 	movl	current_test(%rip), %edx
    0000011e: 	movq	%r9, %rsi
    00000121: 	movl	$0x1, %edi
    00000126: 	xorl	%eax, %eax
    00000128: 	movq	%r8, 0x8(%rsp)
    0000012d: 	callq	__printf_chk@PLT # Offset: 301
    00000132: 	movq	0x8(%rsp), %r8
    00000137: 	leaq	DATAat0x79d4(%rip), %r9
.Ltmp370:
    0000013e: 	addl	$0x1, %r15d
    00000142: 	cmpl	%r15d, iterations(%rip)
    00000149: 	jg	.Ltmp373 # Offset: 329
    0000014f: 	movq	%r8, %rbp
.Ltmp365:
    00000152: 	callq	clock@PLT # Offset: 338
    00000157: 	pxor	%xmm0, %xmm0
    0000015b: 	movq	%rbp, %rdi
    0000015e: 	movq	%rax, end_time(%rip)
    00000165: 	subq	start_time(%rip), %rax
    0000016c: 	cvtsi2sd	%rax, %xmm0
    00000171: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000179: 	addq	$0x18, %rsp
    0000017d: 	popq	%rbx
    0000017e: 	popq	%rbp
    0000017f: 	popq	%r12
    00000181: 	popq	%r13
    00000183: 	popq	%r14
    00000185: 	popq	%r15
    00000187: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 391
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt5IdEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt6IdEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x5d60
  Size        : 0x198
  MaxSize     : 0x1a0
  Offset      : 0x5d60
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt6IdEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	movl	iterations(%rip), %eax
    00000030: 	testl	%eax, %eax
    00000032: 	jle	.Ltmp374 # Offset: 50
    00000038: 	leaq	0x75300(%r13), %rax
    0000003f: 	xorl	%r15d, %r15d
    00000042: 	leaq	0x640(%r14), %r8
    00000049: 	addq	$0x75940, %r13
    00000050: 	movq	%rax, (%rsp)
    00000054: 	leaq	DATAat0x79d4(%rip), %rbx
.Ltmp382:
    0000005b: 	movl	init_value(%rip), %r10d
    00000062: 	pxor	%xmm0, %xmm0
    00000066: 	movq	%r14, %rdi
    00000069: 	movq	%r14, %rax
    0000006c: 	cvtsi2sd	%r10d, %xmm0
    00000071: 	unpcklpd	%xmm0, %xmm0
.Ltmp375:
    00000075: 	movups	%xmm0, (%rax)
    00000078: 	addq	$0x10, %rax
    0000007c: 	cmpq	%rax, %r8
    0000007f: 	jne	.Ltmp375 # Offset: 127
    00000081: 	movq	(%rsp), %rcx
    00000085: 	movq	%r14, %rsi
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp377:
    00000090: 	movsd	(%rsi), %xmm2
    00000094: 	movq	%r12, %rdx
    00000097: 	leaq	-0x75300(%rcx), %rax
    0000009e: 	nop # Size: 2
.Ltmp376:
    000000a0: 	movsd	(%rdx), %xmm0
    000000a4: 	movsd	0x8(%rdx), %xmm1
    000000a9: 	addq	$0x1900, %rax
    000000af: 	addq	$0x20, %rdx
    000000b3: 	mulsd	-0x12c0(%rax), %xmm1
    000000bb: 	mulsd	-0x1900(%rax), %xmm0
    000000c3: 	addsd	%xmm1, %xmm0
    000000c7: 	movsd	-0x10(%rdx), %xmm1
    000000cc: 	mulsd	-0xc80(%rax), %xmm1
    000000d4: 	addsd	%xmm1, %xmm0
    000000d8: 	movsd	-0x8(%rdx), %xmm1
    000000dd: 	mulsd	-0x640(%rax), %xmm1
    000000e5: 	addsd	%xmm1, %xmm0
    000000e9: 	addsd	%xmm0, %xmm2
    000000ed: 	cmpq	%rax, %rcx
    000000f0: 	jne	.Ltmp376 # Offset: 240
    000000f2: 	addq	$0x8, %rcx
    000000f6: 	movsd	%xmm2, (%rsi)
    000000fa: 	addq	$0x8, %rsi
    000000fe: 	cmpq	%rcx, %r13
    00000101: 	jne	.Ltmp377 # Offset: 257
    00000103: 	movl	%r10d, %eax
    00000106: 	pxor	%xmm0, %xmm0
    0000010a: 	imull	%r10d, %eax
    0000010e: 	imull	$0x12c, %eax, %eax
    00000114: 	addl	%r10d, %eax
    00000117: 	cvtsi2sd	%eax, %xmm0
    0000011b: 	jmp	.Ltmp378 # Offset: 283
.Ltmp381:
    0000011d: 	addq	$0x8, %rdi
    00000121: 	cmpq	%rdi, %r8
    00000124: 	je	.Ltmp379 # Offset: 292
.Ltmp378:
    00000126: 	ucomisd	(%rdi), %xmm0
    0000012a: 	jp	.Ltmp380 # Offset: 298
    0000012c: 	je	.Ltmp381 # Offset: 300
.Ltmp380:
    0000012e: 	movl	current_test(%rip), %edx
    00000134: 	movq	%rbx, %rsi
    00000137: 	movl	$0x1, %edi
    0000013c: 	xorl	%eax, %eax
    0000013e: 	movq	%r8, 0x8(%rsp)
    00000143: 	callq	__printf_chk@PLT # Offset: 323
    00000148: 	movq	0x8(%rsp), %r8
.Ltmp379:
    0000014d: 	addl	$0x1, %r15d
    00000151: 	cmpl	%r15d, iterations(%rip)
    00000158: 	jg	.Ltmp382 # Offset: 344
.Ltmp374:
    0000015e: 	callq	clock@PLT # Offset: 350
    00000163: 	pxor	%xmm0, %xmm0
    00000167: 	movq	%rbp, %rdi
    0000016a: 	movq	%rax, end_time(%rip)
    00000171: 	subq	start_time(%rip), %rax
    00000178: 	cvtsi2sd	%rax, %xmm0
    0000017d: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000185: 	addq	$0x18, %rsp
    00000189: 	popq	%rbx
    0000018a: 	popq	%rbp
    0000018b: 	popq	%r12
    0000018d: 	popq	%r13
    0000018f: 	popq	%r14
    00000191: 	popq	%r15
    00000193: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 403
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt6IdEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt7IdEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x5f00
  Size        : 0x17b
  MaxSize     : 0x180
  Offset      : 0x5f00
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt7IdEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	leaq	0x640(%r13), %r14
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rcx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdx, %rbx
    00000024: 	subq	$0x18, %rsp
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	leaq	0x75300(%rbx), %rax
    0000003b: 	leaq	DATAat0x79d4(%rip), %rbx
    00000042: 	movq	%rax, 0x8(%rsp)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp383 # Offset: 79
.Ltmp391:
    00000055: 	movl	init_value(%rip), %r10d
    0000005c: 	pxor	%xmm0, %xmm0
    00000060: 	movq	%r13, %r9
    00000063: 	movq	%r13, %rax
    00000066: 	cvtsi2sd	%r10d, %xmm0
    0000006b: 	unpcklpd	%xmm0, %xmm0
.Ltmp384:
    0000006f: 	movups	%xmm0, (%rax)
    00000072: 	addq	$0x10, %rax
    00000076: 	cmpq	%rax, %r14
    00000079: 	jne	.Ltmp384 # Offset: 121
    0000007b: 	movq	0x8(%rsp), %rcx
    00000080: 	movq	%r13, %rsi
    00000083: 	xorl	%edi, %edi
.Ltmp386:
    00000085: 	movupd	(%rsi), %xmm3
    00000089: 	movupd	0x10(%rsi), %xmm2
    0000008e: 	movq	%r12, %rdx
    00000091: 	leaq	-0x75300(%rcx), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp385:
    000000a0: 	movsd	(%rdx), %xmm1
    000000a4: 	movupd	(%rax), %xmm0
    000000a8: 	addq	$0x640, %rax
    000000ae: 	addq	$0x8, %rdx
    000000b2: 	unpcklpd	%xmm1, %xmm1
    000000b6: 	mulpd	%xmm1, %xmm0
    000000ba: 	addpd	%xmm0, %xmm3
    000000be: 	movupd	-0x630(%rax), %xmm0
    000000c6: 	mulpd	%xmm1, %xmm0
    000000ca: 	addpd	%xmm0, %xmm2
    000000ce: 	cmpq	%rcx, %rax
    000000d1: 	jne	.Ltmp385 # Offset: 209
    000000d3: 	addq	$0x4, %rdi
    000000d7: 	movups	%xmm3, (%rsi)
    000000da: 	leaq	0x20(%rax), %rcx
    000000de: 	addq	$0x20, %rsi
    000000e2: 	movups	%xmm2, -0x10(%rsi)
    000000e6: 	cmpq	$0xc8, %rdi
    000000ed: 	jne	.Ltmp386 # Offset: 237
    000000ef: 	movl	%r10d, %eax
    000000f2: 	pxor	%xmm0, %xmm0
    000000f6: 	imull	%r10d, %eax
    000000fa: 	imull	$0x12c, %eax, %eax
    00000100: 	addl	%r10d, %eax
    00000103: 	cvtsi2sd	%eax, %xmm0
    00000107: 	jmp	.Ltmp387 # Offset: 263
.Ltmp390:
    00000109: 	addq	$0x8, %r9
    0000010d: 	cmpq	%r9, %r14
    00000110: 	je	.Ltmp388 # Offset: 272
.Ltmp387:
    00000112: 	ucomisd	(%r9), %xmm0
    00000117: 	jp	.Ltmp389 # Offset: 279
    00000119: 	je	.Ltmp390 # Offset: 281
.Ltmp389:
    0000011b: 	movl	current_test(%rip), %edx
    00000121: 	movq	%rbx, %rsi
    00000124: 	movl	$0x1, %edi
    00000129: 	xorl	%eax, %eax
    0000012b: 	callq	__printf_chk@PLT # Offset: 299
.Ltmp388:
    00000130: 	addl	$0x1, %r15d
    00000134: 	cmpl	%r15d, iterations(%rip)
    0000013b: 	jg	.Ltmp391 # Offset: 315
.Ltmp383:
    00000141: 	callq	clock@PLT # Offset: 321
    00000146: 	pxor	%xmm0, %xmm0
    0000014a: 	movq	%rbp, %rdi
    0000014d: 	movq	%rax, end_time(%rip)
    00000154: 	subq	start_time(%rip), %rax
    0000015b: 	cvtsi2sd	%rax, %xmm0
    00000160: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000168: 	addq	$0x18, %rsp
    0000016c: 	popq	%rbx
    0000016d: 	popq	%rbp
    0000016e: 	popq	%r12
    00000170: 	popq	%r13
    00000172: 	popq	%r14
    00000174: 	popq	%r15
    00000176: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 374
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt7IdEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z21test_array_dmxpy_opt8IdEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x6080
  Size        : 0x336
  MaxSize     : 0x340
  Offset      : 0x6080
  Section     : .text
  Orc Section : .local.text._Z21test_array_dmxpy_opt8IdEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdx, %rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	movl	iterations(%rip), %eax
    00000030: 	testl	%eax, %eax
    00000032: 	jle	.Ltmp392 # Offset: 50
    00000038: 	leaq	0x73a00(%rbx), %rax
    0000003f: 	xorl	%r8d, %r8d
    00000042: 	leaq	0x74040(%rbx), %r13
    00000049: 	movq	%rax, (%rsp)
    0000004d: 	movq	%rbp, %rax
    00000050: 	leaq	0x640(%r14), %r15
    00000057: 	movq	%rbx, %rbp
    0000005a: 	leaq	DATAat0x79d4(%rip), %r9
    00000061: 	movl	%r8d, %ebx
    00000064: 	movq	%rax, %r8
.Ltmp400:
    00000067: 	movl	init_value(%rip), %r11d
    0000006e: 	pxor	%xmm0, %xmm0
    00000072: 	movq	%r14, %r10
    00000075: 	movq	%r14, %rax
    00000078: 	cvtsi2sd	%r11d, %xmm0
    0000007d: 	unpcklpd	%xmm0, %xmm0
.Ltmp393:
    00000081: 	movups	%xmm0, (%rax)
    00000084: 	addq	$0x10, %rax
    00000088: 	cmpq	%r15, %rax
    0000008b: 	jne	.Ltmp393 # Offset: 139
    0000008d: 	movq	(%rsp), %rsi
    00000091: 	movq	%rbp, %rdi
    00000094: 	movq	%r14, %rdx
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp395:
    000000a0: 	movupd	(%rdx), %xmm2
    000000a4: 	movupd	0x10(%rdx), %xmm1
    000000a9: 	movq	%r12, %rcx
    000000ac: 	movq	%rdi, %rax
    000000af: 	nop # Size: 1
.Ltmp394:
    000000b0: 	movupd	(%rax), %xmm10
    000000b5: 	movupd	(%rcx), %xmm3
    000000b9: 	addq	$0x1900, %rax
    000000bf: 	addq	$0x20, %rcx
    000000c3: 	movupd	-0x12c0(%rax), %xmm6
    000000cb: 	movupd	-0x10(%rcx), %xmm0
    000000d0: 	movlpd	-0x18f8(%rax), %xmm6
    000000d8: 	movupd	-0x12b0(%rax), %xmm4
    000000e0: 	movhpd	-0x12c0(%rax), %xmm10
    000000e9: 	mulpd	%xmm3, %xmm10
    000000ee: 	movupd	-0x18f0(%rax), %xmm8
    000000f7: 	movlpd	-0x18e8(%rax), %xmm4
    000000ff: 	mulpd	%xmm3, %xmm6
    00000103: 	movupd	-0xc70(%rax), %xmm7
    0000010b: 	movupd	-0xc80(%rax), %xmm9
    00000114: 	mulpd	%xmm3, %xmm4
    00000118: 	movupd	-0x640(%rax), %xmm5
    00000120: 	movhpd	-0x12b0(%rax), %xmm8
    00000129: 	movlpd	-0xc78(%rax), %xmm5
    00000131: 	mulpd	%xmm3, %xmm8
    00000136: 	movupd	-0x630(%rax), %xmm3
    0000013e: 	movlpd	-0xc68(%rax), %xmm3
    00000146: 	movhpd	-0x640(%rax), %xmm9
    0000014f: 	mulpd	%xmm0, %xmm9
    00000154: 	movhpd	-0x630(%rax), %xmm7
    0000015c: 	mulpd	%xmm0, %xmm5
    00000160: 	mulpd	%xmm0, %xmm7
    00000164: 	mulpd	%xmm0, %xmm3
    00000168: 	movapd	%xmm10, %xmm0
    0000016d: 	unpckhpd	%xmm6, %xmm10
    00000172: 	unpcklpd	%xmm6, %xmm0
    00000176: 	addpd	%xmm0, %xmm2
    0000017a: 	movapd	%xmm9, %xmm0
    0000017f: 	unpcklpd	%xmm5, %xmm0
    00000183: 	unpckhpd	%xmm5, %xmm9
    00000188: 	addpd	%xmm10, %xmm2
    0000018d: 	addpd	%xmm0, %xmm2
    00000191: 	movapd	%xmm8, %xmm0
    00000196: 	unpckhpd	%xmm4, %xmm8
    0000019b: 	unpcklpd	%xmm4, %xmm0
    0000019f: 	addpd	%xmm0, %xmm1
    000001a3: 	movapd	%xmm7, %xmm0
    000001a7: 	unpckhpd	%xmm3, %xmm7
    000001ab: 	unpcklpd	%xmm3, %xmm0
    000001af: 	addpd	%xmm9, %xmm2
    000001b4: 	addpd	%xmm8, %xmm1
    000001b9: 	addpd	%xmm0, %xmm1
    000001bd: 	addpd	%xmm7, %xmm1
    000001c1: 	cmpq	%rsi, %rax
    000001c4: 	jne	.Ltmp394 # Offset: 452
    000001ca: 	movupd	0x10(%rax), %xmm0
    000001cf: 	leaq	0x20(%rax), %rsi
    000001d3: 	movupd	0x940(%r12), %xmm6
    000001dd: 	addq	$0x20, %rdx
    000001e1: 	movupd	0x940(%r12), %xmm4
    000001eb: 	addq	$0x20, %rdi
    000001ef: 	movupd	0x950(%r12), %xmm5
    000001f9: 	movupd	0x950(%r12), %xmm3
    00000203: 	unpcklpd	%xmm6, %xmm6
    00000207: 	mulpd	%xmm6, %xmm0
    0000020b: 	unpckhpd	%xmm4, %xmm4
    0000020f: 	unpcklpd	%xmm5, %xmm5
    00000213: 	unpckhpd	%xmm3, %xmm3
    00000217: 	addpd	%xmm1, %xmm0
    0000021b: 	movupd	0x650(%rax), %xmm1
    00000223: 	mulpd	%xmm4, %xmm1
    00000227: 	addpd	%xmm1, %xmm0
    0000022b: 	movupd	0xc90(%rax), %xmm1
    00000233: 	mulpd	%xmm5, %xmm1
    00000237: 	addpd	%xmm1, %xmm0
    0000023b: 	movupd	0x12d0(%rax), %xmm1
    00000243: 	mulpd	%xmm3, %xmm1
    00000247: 	addpd	%xmm1, %xmm0
    0000024b: 	movupd	(%rax), %xmm1
    0000024f: 	mulpd	%xmm6, %xmm1
    00000253: 	addpd	%xmm2, %xmm1
    00000257: 	movupd	0x640(%rax), %xmm2
    0000025f: 	mulpd	%xmm4, %xmm2
    00000263: 	addpd	%xmm2, %xmm1
    00000267: 	movupd	0xc80(%rax), %xmm2
    0000026f: 	mulpd	%xmm5, %xmm2
    00000273: 	addpd	%xmm2, %xmm1
    00000277: 	movupd	0x12c0(%rax), %xmm2
    0000027f: 	movups	%xmm0, -0x10(%rdx)
    00000283: 	mulpd	%xmm3, %xmm2
    00000287: 	addpd	%xmm2, %xmm1
    0000028b: 	movups	%xmm1, -0x20(%rdx)
    0000028f: 	cmpq	%r13, %rsi
    00000292: 	jne	.Ltmp395 # Offset: 658
    00000298: 	movl	%r11d, %eax
    0000029b: 	pxor	%xmm0, %xmm0
    0000029f: 	imull	%r11d, %eax
    000002a3: 	imull	$0x12c, %eax, %eax
    000002a9: 	addl	%r11d, %eax
    000002ac: 	cvtsi2sd	%eax, %xmm0
    000002b0: 	jmp	.Ltmp396 # Offset: 688
.Ltmp399:
    000002b2: 	addq	$0x8, %r10
    000002b6: 	cmpq	%r15, %r10
    000002b9: 	je	.Ltmp397 # Offset: 697
.Ltmp396:
    000002bb: 	ucomisd	(%r10), %xmm0
    000002c0: 	jp	.Ltmp398 # Offset: 704
    000002c2: 	je	.Ltmp399 # Offset: 706
.Ltmp398:
    000002c4: 	movl	current_test(%rip), %edx
    000002ca: 	movq	%r9, %rsi
    000002cd: 	movl	$0x1, %edi
    000002d2: 	xorl	%eax, %eax
    000002d4: 	movq	%r8, 0x8(%rsp)
    000002d9: 	callq	__printf_chk@PLT # Offset: 729
    000002de: 	movq	0x8(%rsp), %r8
    000002e3: 	leaq	DATAat0x79d4(%rip), %r9
.Ltmp397:
    000002ea: 	addl	$0x1, %ebx
    000002ed: 	cmpl	%ebx, iterations(%rip)
    000002f3: 	jg	.Ltmp400 # Offset: 755
    000002f9: 	movq	%r8, %rbp
.Ltmp392:
    000002fc: 	callq	clock@PLT # Offset: 764
    00000301: 	pxor	%xmm0, %xmm0
    00000305: 	movq	%rbp, %rdi
    00000308: 	movq	%rax, end_time(%rip)
    0000030f: 	subq	start_time(%rip), %rax
    00000316: 	cvtsi2sd	%rax, %xmm0
    0000031b: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000323: 	addq	$0x18, %rsp
    00000327: 	popq	%rbx
    00000328: 	popq	%rbp
    00000329: 	popq	%r12
    0000032b: 	popq	%r13
    0000032d: 	popq	%r14
    0000032f: 	popq	%r15
    00000331: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 817
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_array_dmxpy_opt8IdEvPT_PKS0_PA200_S2_PKc"

Binary Function "_Z16test_array_dmxpyIdEvPT_PKS0_PA200_S2_PKc" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x63c0
  Size        : 0x1b5
  MaxSize     : 0x1b5
  Offset      : 0x63c0
  Section     : .text
  Orc Section : .local.text._Z16test_array_dmxpyIdEvPT_PKS0_PA200_S2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rcx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rsi, (%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp401 # Offset: 51
    00000039: 	xorl	%ecx, %ecx
    0000003b: 	leaq	0x640(%rbx), %r14
    00000042: 	leaq	0x75300(%rbp), %r15
    00000049: 	leaq	DATAat0x79d4(%rip), %r13
.Ltmp410:
    00000050: 	movl	init_value(%rip), %r8d
    00000057: 	pxor	%xmm0, %xmm0
    0000005b: 	movq	%rbx, %r9
    0000005e: 	movq	%rbx, %rax
    00000061: 	cvtsi2sd	%r8d, %xmm0
    00000066: 	unpcklpd	%xmm0, %xmm0
.Ltmp402:
    0000006a: 	movups	%xmm0, (%rax)
    0000006d: 	addq	$0x10, %rax
    00000071: 	cmpq	%r14, %rax
    00000074: 	jne	.Ltmp402 # Offset: 116
    00000076: 	movq	(%rsp), %rdi
    0000007a: 	movq	%rbp, %rdx
.Ltmp405:
    0000007d: 	movq	%rdi, %r10
    00000080: 	addq	$0x8, %rdi
    00000084: 	cmpq	%r14, %r10
    00000087: 	setae	%al
    0000008a: 	cmpq	%rdi, %rbx
    0000008d: 	setae	%r11b
    00000091: 	orb	%r11b, %al
    00000094: 	je	.Ltmp403 # Offset: 148
    0000009a: 	leaq	0x8(%rdx), %rax
    0000009e: 	cmpq	%rax, %rbx
    000000a1: 	je	.Ltmp403 # Offset: 161
    000000a7: 	movsd	(%r10), %xmm1
    000000ac: 	xorl	%eax, %eax
    000000ae: 	unpcklpd	%xmm1, %xmm1
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp404:
    000000b8: 	movupd	(%rdx,%rax), %xmm0
    000000bd: 	movupd	(%rbx,%rax), %xmm2
    000000c2: 	mulpd	%xmm1, %xmm0
    000000c6: 	addpd	%xmm2, %xmm0
    000000ca: 	movups	%xmm0, (%rbx,%rax)
    000000ce: 	addq	$0x10, %rax
    000000d2: 	cmpq	$0x640, %rax
    000000d8: 	jne	.Ltmp404 # Offset: 216
    000000da: 	addq	$0x640, %rdx
    000000e1: 	cmpq	%r15, %rdx
    000000e4: 	jne	.Ltmp405 # Offset: 228
.Ltmp412:
    000000e6: 	movl	%r8d, %eax
    000000e9: 	pxor	%xmm0, %xmm0
    000000ed: 	imull	%r8d, %eax
    000000f1: 	imull	$0x12c, %eax, %eax
    000000f7: 	addl	%r8d, %eax
    000000fa: 	cvtsi2sd	%eax, %xmm0
    000000fe: 	jmp	.Ltmp406 # Offset: 254
.Ltmp409:
    00000100: 	addq	$0x8, %r9
    00000104: 	cmpq	%r14, %r9
    00000107: 	je	.Ltmp407 # Offset: 263
.Ltmp406:
    00000109: 	ucomisd	(%r9), %xmm0
    0000010e: 	jp	.Ltmp408 # Offset: 270
    00000110: 	je	.Ltmp409 # Offset: 272
.Ltmp408:
    00000112: 	movl	current_test(%rip), %edx
    00000118: 	movq	%r13, %rsi
    0000011b: 	movl	$0x1, %edi
    00000120: 	xorl	%eax, %eax
    00000122: 	movl	%ecx, 0xc(%rsp)
    00000126: 	callq	__printf_chk@PLT # Offset: 294
    0000012b: 	movl	0xc(%rsp), %ecx
.Ltmp407:
    0000012f: 	addl	$0x1, %ecx
    00000132: 	cmpl	%ecx, iterations(%rip)
    00000138: 	jg	.Ltmp410 # Offset: 312
.Ltmp401:
    0000013e: 	callq	clock@PLT # Offset: 318
    00000143: 	pxor	%xmm0, %xmm0
    00000147: 	movq	%r12, %rdi
    0000014a: 	movq	%rax, end_time(%rip)
    00000151: 	subq	start_time(%rip), %rax
    00000158: 	cvtsi2sd	%rax, %xmm0
    0000015d: 	divsd	DATAat0x79f8(%rip), %xmm0
    00000165: 	addq	$0x18, %rsp
    00000169: 	popq	%rbx
    0000016a: 	popq	%rbp
    0000016b: 	popq	%r12
    0000016d: 	popq	%r13
    0000016f: 	popq	%r14
    00000171: 	popq	%r15
    00000173: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 371
.Ltmp403:
    00000178: 	xorl	%eax, %eax
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp411:
    00000180: 	movsd	(%rdx,%rax), %xmm0
    00000185: 	mulsd	(%r10), %xmm0
    0000018a: 	addsd	(%rbx,%rax), %xmm0
    0000018f: 	movsd	%xmm0, (%rbx,%rax)
    00000194: 	addq	$0x8, %rax
    00000198: 	cmpq	$0x640, %rax
    0000019e: 	jne	.Ltmp411 # Offset: 414
    000001a0: 	addq	$0x640, %rdx
    000001a7: 	cmpq	%r15, %rdx
    000001aa: 	jne	.Ltmp405 # Offset: 426
    000001b0: 	jmp	.Ltmp412 # Offset: 432
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_array_dmxpyIdEvPT_PKS0_PA200_S2_PKc"

Binary Function "_fini" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x6578
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x6578
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 46 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 142 instructions were shortened
BOLT-INFO: removed 17 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 43 out of 56 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x2019c4
