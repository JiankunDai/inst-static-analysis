BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: split function detected on input : main.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0xaff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "_start" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x1c00
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1c00
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0xafe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x1c30
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1c30
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp56 # Offset: 17
    00000013: 	movq	DATAat0xafe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp56 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp56:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1c60
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1c60
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp57 # Offset: 34
    00000024: 	movq	DATAat0xaff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp57 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp57:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1ca0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1ca0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp58 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp59 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp59:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp58:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1ce0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x1ce0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z19less_than_function1PKvS0_" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x1cf0
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x1cf0
  Section     : .text
  Orc Section : .local.text._Z19less_than_function1PKvS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	movsd	(%rdi), %xmm1
    00000008: 	movsd	(%rsi), %xmm0
    0000000c: 	movl	$0xffffffff, %eax
    00000011: 	comisd	%xmm1, %xmm0
    00000015: 	ja	.Ltmp60 # Offset: 21
    00000017: 	xorl	%eax, %eax
    00000019: 	comisd	%xmm0, %xmm1
    0000001d: 	seta	%al
.Ltmp60:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z19less_than_function1PKvS0_"

Binary Function "_Z19less_than_function2dd" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x1d20
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1d20
  Section     : .text
  Orc Section : .local.text._Z19less_than_function2dd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	comisd	%xmm0, %xmm1
    00000008: 	seta	%al
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_Z19less_than_function2dd"

Binary Function "_Z18quicksort_functionPdS_PFbddE" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x1d30
  Size        : 0xca
  MaxSize     : 0xd0
  Offset      : 0x1d30
  Section     : .text
  Orc Section : .local.text._Z18quicksort_functionPdS_PFbddE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp61 # Offset: 14
    00000014: 	pushq	%r15
    00000016: 	pushq	%r14
    00000018: 	movq	%rsi, %r14
    0000001b: 	pushq	%r13
    0000001d: 	movq	%rdi, %r13
    00000020: 	pushq	%r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rdx, %rbx
    00000027: 	subq	$0x18, %rsp
.Ltmp68:
    0000002b: 	movsd	(%r13), %xmm2
    00000031: 	movq	%r14, %r12
    00000034: 	movq	%r13, %r15
    00000037: 	movsd	%xmm2, 0x8(%rsp)
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp66:
    00000040: 	movsd	-0x8(%r12), %xmm1
    00000047: 	movsd	0x8(%rsp), %xmm0
    0000004d: 	leaq	-0x8(%r12), %rbp
    00000052: 	callq	*%rbx # Offset: 82
    00000054: 	testb	%al, %al
    00000056: 	jne	.Ltmp62 # Offset: 86
    00000058: 	cmpq	%rbp, %r15
    0000005b: 	jb	.Ltmp63 # Offset: 91
    0000005d: 	jmp	.Ltmp64 # Offset: 93
    0000005f: 	nop # Size: 1
.Ltmp65:
    00000060: 	addq	$0x8, %r15
.Ltmp63:
    00000064: 	movsd	0x8(%rsp), %xmm1
    0000006a: 	movsd	(%r15), %xmm0
    0000006f: 	callq	*%rbx # Offset: 111
    00000071: 	testb	%al, %al
    00000073: 	jne	.Ltmp65 # Offset: 115
    00000075: 	cmpq	%rbp, %r15
    00000078: 	jae	.Ltmp64 # Offset: 120
    0000007a: 	movsd	(%rbp), %xmm0
    0000007f: 	movsd	(%r15), %xmm1
    00000084: 	movsd	%xmm1, (%rbp)
    00000089: 	movsd	%xmm0, (%r15)
.Ltmp62:
    0000008e: 	movq	%rbp, %r12
    00000091: 	jmp	.Ltmp66 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp64:
    00000098: 	movq	%rbx, %rdx
    0000009b: 	movq	%r12, %rsi
    0000009e: 	movq	%r13, %rdi
    000000a1: 	callq	_Z18quicksort_functionPdS_PFbddE # Offset: 161
    000000a6: 	movq	%r14, %rax
    000000a9: 	subq	%r12, %rax
    000000ac: 	cmpq	$0x8, %rax
    000000b0: 	jle	.Ltmp67 # Offset: 176
    000000b2: 	movq	%r12, %r13
    000000b5: 	jmp	.Ltmp68 # Offset: 181
.Ltmp67:
    000000ba: 	addq	$0x18, %rsp
    000000be: 	popq	%rbx
    000000bf: 	popq	%rbp
    000000c0: 	popq	%r12
    000000c2: 	popq	%r13
    000000c4: 	popq	%r14
    000000c6: 	popq	%r15
    000000c8: 	retq # Offset: 200
.Ltmp61:
    000000c9: 	retq # Offset: 201
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort_functionPdS_PFbddE"

Binary Function "_ZZ4mainENUlddE_4_FUNEdd/1(*2)" after disassembly {
  All names   : _ZZ4mainENUlddE_4_FUNEdd/1
                _ZZ4mainENUlddE_4_FUNEdd/functionobjects.cpp/1
  Number      : 12
  State       : disassembled
  Address     : 0x1e00
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1e00
  Section     : .text
  Orc Section : .local.text._ZZ4mainENUlddE_4_FUNEdd/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	comisd	%xmm0, %xmm1
    00000008: 	seta	%al
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZZ4mainENUlddE_4_FUNEdd/1(*2)"

Binary Function "_ZZ4mainENUlddE0_4_FUNEdd/1(*2)" after disassembly {
  All names   : _ZZ4mainENUlddE0_4_FUNEdd/1
                _ZZ4mainENUlddE0_4_FUNEdd/functionobjects.cpp/1
  Number      : 13
  State       : disassembled
  Address     : 0x1e10
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1e10
  Section     : .text
  Orc Section : .local.text._ZZ4mainENUlddE0_4_FUNEdd/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	comisd	%xmm0, %xmm1
    00000008: 	seta	%al
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZZ4mainENUlddE0_4_FUNEdd/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1e20
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x1e20
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp69 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp70 # Offset: 38
.Ltmp69:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp71 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp70:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp71:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x8008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z11TestOneSortIPdPFvS0_S0_St4lessIdEES2_EvT_S5_iiT0_T1_PKc.isra.0/1(*2)" after disassembly {
  All names   : _Z11TestOneSortIPdPFvS0_S0_St4lessIdEES2_EvT_S5_iiT0_T1_PKc.isra.0/1
                _Z11TestOneSortIPdPFvS0_S0_St4lessIdEES2_EvT_S5_iiT0_T1_PKc.isra.0/functionobjects.cpp/1
  Number      : 15
  State       : disassembled
  Address     : 0x1ec0
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x1ec0
  Section     : .text
  Orc Section : .local.text._Z11TestOneSortIPdPFvS0_S0_St4lessIdEES2_EvT_S5_iiT0_T1_PKc.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	pushq	%r15
    00000002: 	movq	%r9, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rsi, %r12
    00000011: 	pushq	%rbp
    00000012: 	movl	%ecx, %ebp
    00000014: 	pushq	%rbx
    00000015: 	movslq	%edx, %rbx
    00000018: 	subq	$0x28, %rsp
    0000001c: 	movq	%rdi, 0x18(%rsp)
    00000021: 	movl	%ecx, 0xc(%rsp)
    00000025: 	callq	clock@PLT # Offset: 37
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%ebp, %ebp
    00000033: 	jle	.Ltmp72 # Offset: 51
    00000035: 	leaq	0x8(%r12), %rax
    0000003a: 	leaq	(,%rbx,8), %rbp
    00000042: 	xorl	%ebx, %ebx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	leaq	(%r12,%rbp), %r13
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp77:
    00000050: 	testq	%rbp, %rbp
    00000053: 	je	.Ltmp73 # Offset: 83
    00000055: 	movq	0x18(%rsp), %rsi
    0000005a: 	movq	%rbp, %rdx
    0000005d: 	movq	%r12, %rdi
    00000060: 	callq	memmove@PLT # Offset: 96
.Ltmp73:
    00000065: 	movq	%r13, %rsi
    00000068: 	movq	%r12, %rdi
    0000006b: 	callq	*%r14 # Offset: 107
    0000006e: 	movq	0x10(%rsp), %rax
    00000073: 	jmp	.Ltmp74 # Offset: 115
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp76:
    00000078: 	addq	$0x8, %rax
    0000007c: 	movsd	-0x10(%rax), %xmm0
    00000081: 	comisd	-0x8(%rax), %xmm0
    00000086: 	ja	.Ltmp75 # Offset: 134
.Ltmp74:
    00000088: 	cmpq	%rax, %r13
    0000008b: 	jne	.Ltmp76 # Offset: 139
    0000008d: 	addl	$0x1, %ebx
    00000090: 	cmpl	0xc(%rsp), %ebx
    00000094: 	jne	.Ltmp77 # Offset: 148
.Ltmp72:
    00000096: 	callq	clock@PLT # Offset: 150
    0000009b: 	pxor	%xmm0, %xmm0
    0000009f: 	movq	%r15, %rdi
    000000a2: 	movq	%rax, end_time(%rip)
    000000a9: 	subq	start_time(%rip), %rax
    000000b0: 	cvtsi2sd	%rax, %xmm0
    000000b5: 	divsd	DATAat0x84b0(%rip), %xmm0
    000000bd: 	addq	$0x28, %rsp
    000000c1: 	popq	%rbx
    000000c2: 	popq	%rbp
    000000c3: 	popq	%r12
    000000c5: 	popq	%r13
    000000c7: 	popq	%r14
    000000c9: 	popq	%r15
    000000cb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 203
.Ltmp75:
    000000d0: 	movq	%r15, %rdx
    000000d3: 	leaq	DATAat0x8447(%rip), %rsi
    000000da: 	xorl	%eax, %eax
    000000dc: 	addl	$0x1, %ebx
    000000df: 	movl	$0x1, %edi
    000000e4: 	callq	__printf_chk@PLT # Offset: 228
    000000e9: 	cmpl	0xc(%rsp), %ebx
    000000ed: 	jne	.Ltmp77 # Offset: 237
    000000f3: 	jmp	.Ltmp72 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneSortIPdPFvS0_S0_St4lessIdEES2_EvT_S5_iiT0_T1_PKc.isra.0/1(*2)"

Binary Function "_Z11TestOneSortIPdPFvS0_S0_24inline_less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/1(*2)" after disassembly {
  All names   : _Z11TestOneSortIPdPFvS0_S0_24inline_less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/1
                _Z11TestOneSortIPdPFvS0_S0_24inline_less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/functionobjects.cpp/1
  Number      : 16
  State       : disassembled
  Address     : 0x1fc0
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x1fc0
  Section     : .text
  Orc Section : .local.text._Z11TestOneSortIPdPFvS0_S0_24inline_less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	pushq	%r15
    00000002: 	movq	%r9, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rsi, %r12
    00000011: 	pushq	%rbp
    00000012: 	movl	%ecx, %ebp
    00000014: 	pushq	%rbx
    00000015: 	movslq	%edx, %rbx
    00000018: 	subq	$0x28, %rsp
    0000001c: 	movq	%rdi, 0x18(%rsp)
    00000021: 	movl	%ecx, 0xc(%rsp)
    00000025: 	callq	clock@PLT # Offset: 37
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%ebp, %ebp
    00000033: 	jle	.Ltmp78 # Offset: 51
    00000035: 	leaq	0x8(%r12), %rax
    0000003a: 	leaq	(,%rbx,8), %rbp
    00000042: 	xorl	%ebx, %ebx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	leaq	(%r12,%rbp), %r13
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp83:
    00000050: 	testq	%rbp, %rbp
    00000053: 	je	.Ltmp79 # Offset: 83
    00000055: 	movq	0x18(%rsp), %rsi
    0000005a: 	movq	%rbp, %rdx
    0000005d: 	movq	%r12, %rdi
    00000060: 	callq	memmove@PLT # Offset: 96
.Ltmp79:
    00000065: 	movq	%r13, %rsi
    00000068: 	movq	%r12, %rdi
    0000006b: 	callq	*%r14 # Offset: 107
    0000006e: 	movq	0x10(%rsp), %rax
    00000073: 	jmp	.Ltmp80 # Offset: 115
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp82:
    00000078: 	addq	$0x8, %rax
    0000007c: 	movsd	-0x10(%rax), %xmm0
    00000081: 	comisd	-0x8(%rax), %xmm0
    00000086: 	ja	.Ltmp81 # Offset: 134
.Ltmp80:
    00000088: 	cmpq	%rax, %r13
    0000008b: 	jne	.Ltmp82 # Offset: 139
    0000008d: 	addl	$0x1, %ebx
    00000090: 	cmpl	0xc(%rsp), %ebx
    00000094: 	jne	.Ltmp83 # Offset: 148
.Ltmp78:
    00000096: 	callq	clock@PLT # Offset: 150
    0000009b: 	pxor	%xmm0, %xmm0
    0000009f: 	movq	%r15, %rdi
    000000a2: 	movq	%rax, end_time(%rip)
    000000a9: 	subq	start_time(%rip), %rax
    000000b0: 	cvtsi2sd	%rax, %xmm0
    000000b5: 	divsd	DATAat0x84b0(%rip), %xmm0
    000000bd: 	addq	$0x28, %rsp
    000000c1: 	popq	%rbx
    000000c2: 	popq	%rbp
    000000c3: 	popq	%r12
    000000c5: 	popq	%r13
    000000c7: 	popq	%r14
    000000c9: 	popq	%r15
    000000cb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 203
.Ltmp81:
    000000d0: 	movq	%r15, %rdx
    000000d3: 	leaq	DATAat0x8447(%rip), %rsi
    000000da: 	xorl	%eax, %eax
    000000dc: 	addl	$0x1, %ebx
    000000df: 	movl	$0x1, %edi
    000000e4: 	callq	__printf_chk@PLT # Offset: 228
    000000e9: 	cmpl	0xc(%rsp), %ebx
    000000ed: 	jne	.Ltmp83 # Offset: 237
    000000f3: 	jmp	.Ltmp78 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneSortIPdPFvS0_S0_24inline_less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/1(*2)"

Binary Function "_Z11TestOneSortIPdPFvS0_S0_17less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/1(*2)" after disassembly {
  All names   : _Z11TestOneSortIPdPFvS0_S0_17less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/1
                _Z11TestOneSortIPdPFvS0_S0_17less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/functionobjects.cpp/1
  Number      : 17
  State       : disassembled
  Address     : 0x20c0
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x20c0
  Section     : .text
  Orc Section : .local.text._Z11TestOneSortIPdPFvS0_S0_17less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	pushq	%r15
    00000002: 	movq	%r9, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rsi, %r12
    00000011: 	pushq	%rbp
    00000012: 	movl	%ecx, %ebp
    00000014: 	pushq	%rbx
    00000015: 	movslq	%edx, %rbx
    00000018: 	subq	$0x28, %rsp
    0000001c: 	movq	%rdi, 0x18(%rsp)
    00000021: 	movl	%ecx, 0xc(%rsp)
    00000025: 	callq	clock@PLT # Offset: 37
    0000002a: 	movq	%rax, start_time(%rip)
    00000031: 	testl	%ebp, %ebp
    00000033: 	jle	.Ltmp84 # Offset: 51
    00000035: 	leaq	0x8(%r12), %rax
    0000003a: 	leaq	(,%rbx,8), %rbp
    00000042: 	xorl	%ebx, %ebx
    00000044: 	movq	%rax, 0x10(%rsp)
    00000049: 	leaq	(%r12,%rbp), %r13
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp89:
    00000050: 	testq	%rbp, %rbp
    00000053: 	je	.Ltmp85 # Offset: 83
    00000055: 	movq	0x18(%rsp), %rsi
    0000005a: 	movq	%rbp, %rdx
    0000005d: 	movq	%r12, %rdi
    00000060: 	callq	memmove@PLT # Offset: 96
.Ltmp85:
    00000065: 	movq	%r13, %rsi
    00000068: 	movq	%r12, %rdi
    0000006b: 	callq	*%r14 # Offset: 107
    0000006e: 	movq	0x10(%rsp), %rax
    00000073: 	jmp	.Ltmp86 # Offset: 115
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp88:
    00000078: 	addq	$0x8, %rax
    0000007c: 	movsd	-0x10(%rax), %xmm0
    00000081: 	comisd	-0x8(%rax), %xmm0
    00000086: 	ja	.Ltmp87 # Offset: 134
.Ltmp86:
    00000088: 	cmpq	%rax, %r13
    0000008b: 	jne	.Ltmp88 # Offset: 139
    0000008d: 	addl	$0x1, %ebx
    00000090: 	cmpl	0xc(%rsp), %ebx
    00000094: 	jne	.Ltmp89 # Offset: 148
.Ltmp84:
    00000096: 	callq	clock@PLT # Offset: 150
    0000009b: 	pxor	%xmm0, %xmm0
    0000009f: 	movq	%r15, %rdi
    000000a2: 	movq	%rax, end_time(%rip)
    000000a9: 	subq	start_time(%rip), %rax
    000000b0: 	cvtsi2sd	%rax, %xmm0
    000000b5: 	divsd	DATAat0x84b0(%rip), %xmm0
    000000bd: 	addq	$0x28, %rsp
    000000c1: 	popq	%rbx
    000000c2: 	popq	%rbp
    000000c3: 	popq	%r12
    000000c5: 	popq	%r13
    000000c7: 	popq	%r14
    000000c9: 	popq	%r15
    000000cb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 203
.Ltmp87:
    000000d0: 	movq	%r15, %rdx
    000000d3: 	leaq	DATAat0x8447(%rip), %rsi
    000000da: 	xorl	%eax, %eax
    000000dc: 	addl	$0x1, %ebx
    000000df: 	movl	$0x1, %edi
    000000e4: 	callq	__printf_chk@PLT # Offset: 228
    000000e9: 	cmpl	0xc(%rsp), %ebx
    000000ed: 	jne	.Ltmp89 # Offset: 237
    000000f3: 	jmp	.Ltmp84 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneSortIPdPFvS0_S0_17less_than_functorES1_EvT_S4_iiT0_T1_PKc.isra.0/1(*2)"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x21c0
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x21c0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp90 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp91 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp92:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp92 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp105:
    00000069: 	leaq	DATAat0x8497(%rip), %rbp
    00000070: 	leaq	DATAat0x8028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x8068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp93 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x84c8(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x8098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x84b0(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp94 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp98:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp95 # Offset: 244
    000000fa: 	movq	DATAat0x84b8(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp99:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x84b8(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp96 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp96:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x847c(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x84c8(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp97 # Offset: 398
.Ltmp94:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp98 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp99 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp95:
    000001c8: 	movq	DATAat0x84c0(%rip), %rsi
    000001cf: 	movq	DATAat0x84b8(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp96 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp97:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp93 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp100 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp101:
    00000210: 	addq	$0x10, %rax
.Ltmp100:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp101 # Offset: 542
.Ltmp106:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x80c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp102 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp103 # Offset: 592
.Ltmp102:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp90:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp103:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp104:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp104 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x8457(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp90 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp91:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp105 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp93:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp106 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x24f0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x24f0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp107 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp108 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp109:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp109 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp114:
    0000006a: 	leaq	DATAat0x8497(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x80f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x847d(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x8497(%rip), %r8
    000000a1: 	leaq	DATAat0x846b(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp110 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp111:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x847c(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp111 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp110 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp112 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp113:
    00000140: 	addq	$0x10, %rax
.Ltmp112:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp113 # Offset: 334
.Ltmp115:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x80c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp107:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp108:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp114 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp110:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp115 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x26a0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x26a0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x26c0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x26c0
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x84b0(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x2700
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x2700
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x2710
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x2710
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x2760
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x2760
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZNK17less_than_functorclERKdS1_" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x27b0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x27b0
  Section     : .text
  Orc Section : .local.text._ZNK17less_than_functorclERKdS1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	movsd	(%rdx), %xmm0
    00000008: 	comisd	(%rsi), %xmm0
    0000000c: 	seta	%al
    0000000f: 	retq # Offset: 15
DWARF CFI Instructions:
    <empty>
End of Function "_ZNK17less_than_functorclERKdS1_"

Binary Function "_Z11qsort_innerPhS_mPFiPKvS1_E" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x27c0
  Size        : 0x345
  MaxSize     : 0x350
  Offset      : 0x27c0
  Section     : .text
  Orc Section : .local.text._Z11qsort_innerPhS_mPFiPKvS1_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movq	%rdi, 0x8(%rsp)
    0000001d: 	movq	%rsi, 0x20(%rsp)
    00000022: 	cmpq	%rax, %rdx
    00000025: 	jae	.Ltmp116 # Offset: 37
    0000002b: 	movq	%rcx, %rbp
    0000002e: 	movq	%rdx, %rcx
    00000031: 	leaq	-0x1(%rdx), %rax
    00000035: 	movq	%rdx, %r13
    00000038: 	andq	$-0x8, %rcx
    0000003c: 	movq	%rax, 0x28(%rsp)
    00000041: 	movq	%rdx, %rax
    00000044: 	movq	%rdx, %r12
    00000047: 	movq	%rcx, 0x48(%rsp)
    0000004c: 	movq	%rdx, %rcx
    0000004f: 	andq	$-0x10, %rax
    00000053: 	negq	%r13
    00000056: 	andl	$0xf, %ecx
    00000059: 	movq	%rax, 0x38(%rsp)
    0000005e: 	movq	%rdx, %rax
    00000061: 	movq	%rdi, %r15
    00000064: 	movq	%rcx, 0x40(%rsp)
    00000069: 	movq	%rdx, %rcx
    0000006c: 	andq	$-0x10, %rax
    00000070: 	andl	$0x8, %ecx
    00000073: 	movq	%rax, 0x30(%rsp)
    00000078: 	addq	%rcx, %rax
    0000007b: 	movq	%rcx, 0x10(%rsp)
    00000080: 	movq	%rax, 0x18(%rsp)
.Ltmp130:
    00000085: 	movq	0x20(%rsp), %r14
    0000008a: 	movq	%r15, %rbx
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp117:
    00000090: 	addq	%r13, %r14
    00000093: 	movq	%rbx, %rdi
    00000096: 	movq	%r14, %rsi
    00000099: 	callq	*%rbp # Offset: 153
    0000009b: 	testl	%eax, %eax
    0000009d: 	js	.Ltmp117 # Offset: 157
    0000009f: 	cmpq	%r14, %r15
    000000a2: 	jb	.Ltmp118 # Offset: 162
    000000a4: 	jmp	.Ltmp119 # Offset: 164
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp120:
    000000b0: 	addq	%r12, %r15
.Ltmp118:
    000000b3: 	movq	%rbx, %rsi
    000000b6: 	movq	%r15, %rdi
    000000b9: 	callq	*%rbp # Offset: 185
    000000bb: 	testl	%eax, %eax
    000000bd: 	js	.Ltmp120 # Offset: 189
    000000bf: 	cmpq	%r14, %r15
    000000c2: 	jae	.Ltmp119 # Offset: 194
    000000c8: 	cmpq	%rbx, %r15
    000000cb: 	je	.Ltmp121 # Offset: 203
    000000d1: 	cmpq	%rbx, %r14
    000000d4: 	cmoveq	%r15, %rbx
    000000d8: 	cmpq	$0x4, %r12
    000000dc: 	je	.Ltmp122 # Offset: 220
.Ltmp129:
    000000e2: 	cmpq	$0x8, %r12
    000000e6: 	je	.Ltmp123 # Offset: 230
    000000ec: 	cmpq	$0x2, %r12
    000000f0: 	je	.Ltmp124 # Offset: 240
    000000f6: 	testq	%r12, %r12
    000000f9: 	je	.Ltmp117 # Offset: 249
    000000fb: 	leaq	0xf(%r15), %rax
    000000ff: 	subq	%r14, %rax
    00000102: 	cmpq	$0x1e, %rax
    00000106: 	jbe	.Ltmp125 # Offset: 262
    0000010c: 	movq	0x28(%rsp), %rax
    00000111: 	cmpq	$0x6, %rax
    00000115: 	jbe	.Ltmp125 # Offset: 277
    0000011b: 	cmpq	$0xe, %rax
    0000011f: 	jbe	.Ltmp126 # Offset: 287
    00000125: 	movq	0x38(%rsp), %rdx
    0000012a: 	xorl	%eax, %eax
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp127:
    00000130: 	movdqu	(%r14,%rax), %xmm0
    00000136: 	movdqu	(%r15,%rax), %xmm1
    0000013c: 	movups	%xmm1, (%r14,%rax)
    00000141: 	movups	%xmm0, (%r15,%rax)
    00000146: 	addq	$0x10, %rax
    0000014a: 	cmpq	%rdx, %rax
    0000014d: 	jne	.Ltmp127 # Offset: 333
    0000014f: 	movq	0x30(%rsp), %rcx
    00000154: 	cmpq	%rcx, %r12
    00000157: 	je	.Ltmp117 # Offset: 343
    0000015d: 	movq	0x40(%rsp), %rdi
    00000162: 	leaq	-0x1(%rdi), %rax
    00000166: 	cmpq	$0x6, %rax
    0000016a: 	jbe	.Ltmp128 # Offset: 362
    00000170: 	leaq	(%r15,%rcx), %rax
    00000174: 	leaq	(%r14,%rcx), %rdx
    00000178: 	movq	(%rdx), %rcx
    0000017b: 	movq	(%rax), %rsi
    0000017e: 	movq	%rsi, (%rdx)
    00000181: 	movq	%rcx, (%rax)
    00000184: 	movq	0x10(%rsp), %rcx
    00000189: 	movq	0x18(%rsp), %rax
    0000018e: 	cmpq	%rcx, %rdi
    00000191: 	je	.Ltmp117 # Offset: 401
.Ltmp132:
    00000197: 	leaq	(%r15,%rax), %rdx
    0000019b: 	leaq	(%r14,%rax), %rcx
    0000019f: 	movzbl	(%rdx), %edi
    000001a2: 	movzbl	(%rcx), %esi
    000001a5: 	movb	%dil, (%rcx)
    000001a8: 	movb	%sil, (%rdx)
    000001ab: 	leaq	0x1(%rax), %rdx
    000001af: 	cmpq	%rdx, %r12
    000001b2: 	jbe	.Ltmp117 # Offset: 434
    000001b8: 	leaq	(%r14,%rdx), %rcx
    000001bc: 	addq	%r15, %rdx
    000001bf: 	movzbl	(%rdx), %edi
    000001c2: 	movzbl	(%rcx), %esi
    000001c5: 	movb	%dil, (%rcx)
    000001c8: 	movb	%sil, (%rdx)
    000001cb: 	leaq	0x2(%rax), %rdx
    000001cf: 	cmpq	%rdx, %r12
    000001d2: 	jbe	.Ltmp117 # Offset: 466
    000001d8: 	leaq	(%r14,%rdx), %rcx
    000001dc: 	addq	%r15, %rdx
    000001df: 	movzbl	(%rdx), %edi
    000001e2: 	movzbl	(%rcx), %esi
    000001e5: 	movb	%dil, (%rcx)
    000001e8: 	movb	%sil, (%rdx)
    000001eb: 	leaq	0x3(%rax), %rdx
    000001ef: 	cmpq	%rdx, %r12
    000001f2: 	jbe	.Ltmp117 # Offset: 498
    000001f8: 	leaq	(%r14,%rdx), %rcx
    000001fc: 	addq	%r15, %rdx
    000001ff: 	movzbl	(%rdx), %edi
    00000202: 	movzbl	(%rcx), %esi
    00000205: 	movb	%dil, (%rcx)
    00000208: 	movb	%sil, (%rdx)
    0000020b: 	leaq	0x4(%rax), %rdx
    0000020f: 	cmpq	%rdx, %r12
    00000212: 	jbe	.Ltmp117 # Offset: 530
    00000218: 	leaq	(%r14,%rdx), %rcx
    0000021c: 	addq	%r15, %rdx
    0000021f: 	movzbl	(%rdx), %edi
    00000222: 	movzbl	(%rcx), %esi
    00000225: 	movb	%dil, (%rcx)
    00000228: 	movb	%sil, (%rdx)
    0000022b: 	leaq	0x5(%rax), %rdx
    0000022f: 	cmpq	%rdx, %r12
    00000232: 	jbe	.Ltmp117 # Offset: 562
    00000238: 	leaq	(%r14,%rdx), %rcx
    0000023c: 	addq	%r15, %rdx
    0000023f: 	addq	$0x6, %rax
    00000243: 	movzbl	(%rcx), %esi
    00000246: 	movzbl	(%rdx), %edi
    00000249: 	movb	%dil, (%rcx)
    0000024c: 	movb	%sil, (%rdx)
    0000024f: 	cmpq	%rax, %r12
    00000252: 	jbe	.Ltmp117 # Offset: 594
    00000258: 	leaq	(%r14,%rax), %rdx
    0000025c: 	addq	%r15, %rax
    0000025f: 	movzbl	(%rdx), %ecx
    00000262: 	movzbl	(%rax), %esi
    00000265: 	movb	%sil, (%rdx)
    00000268: 	movb	%cl, (%rax)
    0000026a: 	jmp	.Ltmp117 # Offset: 618
    0000026f: 	nop # Size: 1
.Ltmp121:
    00000270: 	movq	%r14, %rbx
    00000273: 	cmpq	$0x4, %r12
    00000277: 	jne	.Ltmp129 # Offset: 631
.Ltmp122:
    0000027d: 	movl	(%r14), %eax
    00000280: 	movl	(%r15), %edx
    00000283: 	movl	%edx, (%r14)
    00000286: 	movl	%eax, (%r15)
    00000289: 	jmp	.Ltmp117 # Offset: 649
    0000028e: 	nop # Size: 2
.Ltmp124:
    00000290: 	movzwl	(%r14), %eax
    00000294: 	movzwl	(%r15), %edx
    00000298: 	movw	%dx, (%r14)
    0000029c: 	movw	%ax, (%r15)
    000002a0: 	jmp	.Ltmp117 # Offset: 672
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp123:
    000002a8: 	movq	(%r14), %rax
    000002ab: 	movq	(%r15), %rdx
    000002ae: 	movq	%rdx, (%r14)
    000002b1: 	movq	%rax, (%r15)
    000002b4: 	jmp	.Ltmp117 # Offset: 692
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp119:
    000002c0: 	addq	%r12, %r14
    000002c3: 	movq	0x8(%rsp), %rdi
    000002c8: 	movq	%rbp, %rcx
    000002cb: 	movq	%r12, %rdx
    000002ce: 	movq	%r14, %rsi
    000002d1: 	callq	_Z11qsort_innerPhS_mPFiPKvS1_E # Offset: 721
    000002d6: 	movq	0x20(%rsp), %rax
    000002db: 	subq	%r14, %rax
    000002de: 	cmpq	%r12, %rax
    000002e1: 	jbe	.Ltmp116 # Offset: 737
    000002e3: 	movq	%r14, 0x8(%rsp)
    000002e8: 	movq	%r14, %r15
    000002eb: 	jmp	.Ltmp130 # Offset: 747
.Ltmp125:
    000002f0: 	xorl	%eax, %eax
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp131:
    000002f8: 	movzbl	(%r14,%rax), %edx
    000002fd: 	movzbl	(%r15,%rax), %ecx
    00000302: 	movb	%cl, (%r14,%rax)
    00000306: 	movb	%dl, (%r15,%rax)
    0000030a: 	addq	$0x1, %rax
    0000030e: 	cmpq	%rax, %r12
    00000311: 	jne	.Ltmp131 # Offset: 785
    00000313: 	jmp	.Ltmp117 # Offset: 787
.Ltmp116:
    00000318: 	addq	$0x58, %rsp
    0000031c: 	popq	%rbx
    0000031d: 	popq	%rbp
    0000031e: 	popq	%r12
    00000320: 	popq	%r13
    00000322: 	popq	%r14
    00000324: 	popq	%r15
    00000326: 	retq # Offset: 806
.Ltmp126:
    00000327: 	movq	(%r14), %rax
    0000032a: 	movq	(%r15), %rdx
    0000032d: 	movq	%rdx, (%r14)
    00000330: 	movq	%rax, (%r15)
    00000333: 	movq	0x48(%rsp), %rax
    00000338: 	jmp	.Ltmp132 # Offset: 824
.Ltmp128:
    0000033d: 	movq	%rcx, %rax
    00000340: 	jmp	.Ltmp132 # Offset: 832
DWARF CFI Instructions:
    <empty>
End of Function "_Z11qsort_innerPhS_mPFiPKvS1_E"

Binary Function "_Z12simple_qsortPvmmPFiPKvS1_E" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x2b10
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x2b10
  Section     : .text
  Orc Section : .local.text._Z12simple_qsortPvmmPFiPKvS1_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	imulq	%rdx, %rsi
    00000008: 	addq	%rdi, %rsi
    0000000b: 	jmp	_Z11qsort_innerPhS_mPFiPKvS1_E # TAILCALL  # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_Z12simple_qsortPvmmPFiPKvS1_E"

Binary Function "_Z10qsort_funcIdEvPT_S1_" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x2b20
  Size        : 0x1c
  MaxSize     : 0x20
  Offset      : 0x2b20
  Section     : .text
  Orc Section : .local.text._Z10qsort_funcIdEvPT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	leaq	_Z19less_than_function1PKvS0_(%rip), %rcx
    0000000e: 	movl	$0x8, %edx
    00000013: 	sarq	$0x3, %rsi
    00000017: 	jmp	qsort@PLT # TAILCALL  # Offset: 23
DWARF CFI Instructions:
    <empty>
End of Function "_Z10qsort_funcIdEvPT_S1_"

Binary Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/functionobjects.cpp/1
  Number      : 29
  State       : disassembled
  Address     : 0x2b40
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0x2b40
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %rcx
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movq	%rax, %r9
    00000010: 	movq	%rdx, %r10
    00000013: 	andl	$0x1, %r11d
    00000017: 	shrq	$0x3f, %r9
    0000001b: 	addq	%rax, %r9
    0000001e: 	sarq	%r9
    00000021: 	cmpq	%r9, %rsi
    00000024: 	jge	.Ltmp133 # Offset: 36
    0000002a: 	movq	%rsi, %rdi
    0000002d: 	jmp	.Ltmp134 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp136:
    00000030: 	subq	$0x1, %rax
    00000034: 	leaq	(%rcx,%rax,8), %rsi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000041: 	cmpq	%r9, %rax
    00000044: 	jge	.Ltmp135 # Offset: 68
.Ltmp137:
    00000046: 	movq	%rax, %rdi
.Ltmp134:
    00000049: 	leaq	0x1(%rdi), %rdx
    0000004d: 	leaq	(%rdx,%rdx), %rax
    00000051: 	shlq	$0x4, %rdx
    00000055: 	leaq	(%rcx,%rdx), %rsi
    00000059: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000005f: 	movsd	(%rsi), %xmm1
    00000063: 	comisd	%xmm1, %xmm2
    00000067: 	ja	.Ltmp136 # Offset: 103
    00000069: 	movsd	%xmm1, (%rcx,%rdi,8)
    0000006e: 	cmpq	%r9, %rax
    00000071: 	jl	.Ltmp137 # Offset: 113
.Ltmp135:
    00000073: 	testq	%r11, %r11
    00000076: 	je	.Ltmp138 # Offset: 118
.Ltmp143:
    00000078: 	leaq	-0x1(%rax), %rdx
    0000007c: 	movq	%rdx, %rdi
    0000007f: 	shrq	$0x3f, %rdi
    00000083: 	addq	%rdx, %rdi
    00000086: 	sarq	%rdi
    00000089: 	cmpq	%r8, %rax
    0000008c: 	jg	.Ltmp139 # Offset: 140
    0000008e: 	jmp	.Ltmp140 # Offset: 142
.Ltmp142:
    00000090: 	leaq	-0x1(%rdi), %rdx
    00000094: 	movsd	%xmm1, (%rsi)
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rdi, %rax
    000000ab: 	cmpq	%rdi, %r8
    000000ae: 	jge	.Ltmp141 # Offset: 174
    000000b0: 	movq	%rdx, %rdi
.Ltmp139:
    000000b3: 	leaq	(%rcx,%rdi,8), %r9
    000000b7: 	leaq	(%rcx,%rax,8), %rsi
    000000bb: 	movsd	(%r9), %xmm1
    000000c0: 	comisd	%xmm1, %xmm0
    000000c4: 	ja	.Ltmp142 # Offset: 196
.Ltmp140:
    000000c6: 	movsd	%xmm0, (%rsi)
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp133:
    000000d0: 	leaq	(%rdi,%rsi,8), %rsi
    000000d4: 	testq	%r11, %r11
    000000d7: 	jne	.Ltmp140 # Offset: 215
    000000d9: 	movq	%r8, %rax
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp138:
    000000e0: 	subq	$0x2, %r10
    000000e4: 	movq	%r10, %rdx
    000000e7: 	shrq	$0x3f, %rdx
    000000eb: 	addq	%r10, %rdx
    000000ee: 	sarq	%rdx
    000000f1: 	cmpq	%rdx, %rax
    000000f4: 	jne	.Ltmp143 # Offset: 244
    000000f6: 	leaq	0x2(%rax,%rax), %rax
    000000fb: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    00000101: 	subq	$0x1, %rax
    00000105: 	movsd	%xmm1, (%rsi)
    00000109: 	leaq	(%rcx,%rax,8), %rsi
    0000010d: 	jmp	.Ltmp143 # Offset: 269
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp141:
    00000118: 	movq	%r9, %rsi
    0000011b: 	movsd	%xmm0, (%rsi)
    0000011f: 	retq # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_T0_S8_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_T0_S8_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_T0_S8_T1_T2_.isra.0/functionobjects.cpp/1
  Number      : 30
  State       : disassembled
  Address     : 0x2c60
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0x2c60
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_T0_S8_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %rcx
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movq	%rax, %r9
    00000010: 	movq	%rdx, %r10
    00000013: 	andl	$0x1, %r11d
    00000017: 	shrq	$0x3f, %r9
    0000001b: 	addq	%rax, %r9
    0000001e: 	sarq	%r9
    00000021: 	cmpq	%r9, %rsi
    00000024: 	jge	.Ltmp144 # Offset: 36
    0000002a: 	movq	%rsi, %rdi
    0000002d: 	jmp	.Ltmp145 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp147:
    00000030: 	subq	$0x1, %rax
    00000034: 	leaq	(%rcx,%rax,8), %rsi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000041: 	cmpq	%r9, %rax
    00000044: 	jge	.Ltmp146 # Offset: 68
.Ltmp148:
    00000046: 	movq	%rax, %rdi
.Ltmp145:
    00000049: 	leaq	0x1(%rdi), %rdx
    0000004d: 	leaq	(%rdx,%rdx), %rax
    00000051: 	shlq	$0x4, %rdx
    00000055: 	leaq	(%rcx,%rdx), %rsi
    00000059: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000005f: 	movsd	(%rsi), %xmm1
    00000063: 	comisd	%xmm1, %xmm2
    00000067: 	ja	.Ltmp147 # Offset: 103
    00000069: 	movsd	%xmm1, (%rcx,%rdi,8)
    0000006e: 	cmpq	%r9, %rax
    00000071: 	jl	.Ltmp148 # Offset: 113
.Ltmp146:
    00000073: 	testq	%r11, %r11
    00000076: 	je	.Ltmp149 # Offset: 118
.Ltmp154:
    00000078: 	leaq	-0x1(%rax), %rdx
    0000007c: 	movq	%rdx, %rdi
    0000007f: 	shrq	$0x3f, %rdi
    00000083: 	addq	%rdx, %rdi
    00000086: 	sarq	%rdi
    00000089: 	cmpq	%r8, %rax
    0000008c: 	jg	.Ltmp150 # Offset: 140
    0000008e: 	jmp	.Ltmp151 # Offset: 142
.Ltmp153:
    00000090: 	leaq	-0x1(%rdi), %rdx
    00000094: 	movsd	%xmm1, (%rsi)
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rdi, %rax
    000000ab: 	cmpq	%rdi, %r8
    000000ae: 	jge	.Ltmp152 # Offset: 174
    000000b0: 	movq	%rdx, %rdi
.Ltmp150:
    000000b3: 	leaq	(%rcx,%rdi,8), %r9
    000000b7: 	leaq	(%rcx,%rax,8), %rsi
    000000bb: 	movsd	(%r9), %xmm1
    000000c0: 	comisd	%xmm1, %xmm0
    000000c4: 	ja	.Ltmp153 # Offset: 196
.Ltmp151:
    000000c6: 	movsd	%xmm0, (%rsi)
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp144:
    000000d0: 	leaq	(%rdi,%rsi,8), %rsi
    000000d4: 	testq	%r11, %r11
    000000d7: 	jne	.Ltmp151 # Offset: 215
    000000d9: 	movq	%r8, %rax
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp149:
    000000e0: 	subq	$0x2, %r10
    000000e4: 	movq	%r10, %rdx
    000000e7: 	shrq	$0x3f, %rdx
    000000eb: 	addq	%r10, %rdx
    000000ee: 	sarq	%rdx
    000000f1: 	cmpq	%rdx, %rax
    000000f4: 	jne	.Ltmp154 # Offset: 244
    000000f6: 	leaq	0x2(%rax,%rax), %rax
    000000fb: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    00000101: 	subq	$0x1, %rax
    00000105: 	movsd	%xmm1, (%rsi)
    00000109: 	leaq	(%rcx,%rax,8), %rsi
    0000010d: 	jmp	.Ltmp154 # Offset: 269
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp152:
    00000118: 	movq	%r9, %rsi
    0000011b: 	movsd	%xmm0, (%rsi)
    0000011f: 	retq # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_T0_S8_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/functionobjects.cpp/1
  Number      : 31
  State       : disassembled
  Address     : 0x2d80
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0x2d80
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %rcx
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movq	%rax, %r9
    00000010: 	movq	%rdx, %r10
    00000013: 	andl	$0x1, %r11d
    00000017: 	shrq	$0x3f, %r9
    0000001b: 	addq	%rax, %r9
    0000001e: 	sarq	%r9
    00000021: 	cmpq	%r9, %rsi
    00000024: 	jge	.Ltmp155 # Offset: 36
    0000002a: 	movq	%rsi, %rdi
    0000002d: 	jmp	.Ltmp156 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp158:
    00000030: 	subq	$0x1, %rax
    00000034: 	leaq	(%rcx,%rax,8), %rsi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000041: 	cmpq	%r9, %rax
    00000044: 	jge	.Ltmp157 # Offset: 68
.Ltmp159:
    00000046: 	movq	%rax, %rdi
.Ltmp156:
    00000049: 	leaq	0x1(%rdi), %rdx
    0000004d: 	leaq	(%rdx,%rdx), %rax
    00000051: 	shlq	$0x4, %rdx
    00000055: 	leaq	(%rcx,%rdx), %rsi
    00000059: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000005f: 	movsd	(%rsi), %xmm1
    00000063: 	comisd	%xmm1, %xmm2
    00000067: 	ja	.Ltmp158 # Offset: 103
    00000069: 	movsd	%xmm1, (%rcx,%rdi,8)
    0000006e: 	cmpq	%r9, %rax
    00000071: 	jl	.Ltmp159 # Offset: 113
.Ltmp157:
    00000073: 	testq	%r11, %r11
    00000076: 	je	.Ltmp160 # Offset: 118
.Ltmp165:
    00000078: 	leaq	-0x1(%rax), %rdx
    0000007c: 	movq	%rdx, %rdi
    0000007f: 	shrq	$0x3f, %rdi
    00000083: 	addq	%rdx, %rdi
    00000086: 	sarq	%rdi
    00000089: 	cmpq	%r8, %rax
    0000008c: 	jg	.Ltmp161 # Offset: 140
    0000008e: 	jmp	.Ltmp162 # Offset: 142
.Ltmp164:
    00000090: 	leaq	-0x1(%rdi), %rdx
    00000094: 	movsd	%xmm1, (%rsi)
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rdi, %rax
    000000ab: 	cmpq	%rdi, %r8
    000000ae: 	jge	.Ltmp163 # Offset: 174
    000000b0: 	movq	%rdx, %rdi
.Ltmp161:
    000000b3: 	leaq	(%rcx,%rdi,8), %r9
    000000b7: 	leaq	(%rcx,%rax,8), %rsi
    000000bb: 	movsd	(%r9), %xmm1
    000000c0: 	comisd	%xmm1, %xmm0
    000000c4: 	ja	.Ltmp164 # Offset: 196
.Ltmp162:
    000000c6: 	movsd	%xmm0, (%rsi)
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp155:
    000000d0: 	leaq	(%rdi,%rsi,8), %rsi
    000000d4: 	testq	%r11, %r11
    000000d7: 	jne	.Ltmp162 # Offset: 215
    000000d9: 	movq	%r8, %rax
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp160:
    000000e0: 	subq	$0x2, %r10
    000000e4: 	movq	%r10, %rdx
    000000e7: 	shrq	$0x3f, %rdx
    000000eb: 	addq	%r10, %rdx
    000000ee: 	sarq	%rdx
    000000f1: 	cmpq	%rdx, %rax
    000000f4: 	jne	.Ltmp165 # Offset: 244
    000000f6: 	leaq	0x2(%rax,%rax), %rax
    000000fb: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    00000101: 	subq	$0x1, %rax
    00000105: 	movsd	%xmm1, (%rsi)
    00000109: 	leaq	(%rcx,%rax,8), %rsi
    0000010d: 	jmp	.Ltmp165 # Offset: 269
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp163:
    00000118: 	movq	%r9, %rsi
    0000011b: 	movsd	%xmm0, (%rsi)
    0000011f: 	retq # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/functionobjects.cpp/1
  Number      : 32
  State       : disassembled
  Address     : 0x2ea0
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0x2ea0
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %rcx
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movq	%rax, %r9
    00000010: 	movq	%rdx, %r10
    00000013: 	andl	$0x1, %r11d
    00000017: 	shrq	$0x3f, %r9
    0000001b: 	addq	%rax, %r9
    0000001e: 	sarq	%r9
    00000021: 	cmpq	%r9, %rsi
    00000024: 	jge	.Ltmp166 # Offset: 36
    0000002a: 	movq	%rsi, %rdi
    0000002d: 	jmp	.Ltmp167 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp169:
    00000030: 	subq	$0x1, %rax
    00000034: 	leaq	(%rcx,%rax,8), %rsi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000041: 	cmpq	%r9, %rax
    00000044: 	jge	.Ltmp168 # Offset: 68
.Ltmp170:
    00000046: 	movq	%rax, %rdi
.Ltmp167:
    00000049: 	leaq	0x1(%rdi), %rdx
    0000004d: 	leaq	(%rdx,%rdx), %rax
    00000051: 	shlq	$0x4, %rdx
    00000055: 	leaq	(%rcx,%rdx), %rsi
    00000059: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000005f: 	movsd	(%rsi), %xmm1
    00000063: 	comisd	%xmm1, %xmm2
    00000067: 	ja	.Ltmp169 # Offset: 103
    00000069: 	movsd	%xmm1, (%rcx,%rdi,8)
    0000006e: 	cmpq	%r9, %rax
    00000071: 	jl	.Ltmp170 # Offset: 113
.Ltmp168:
    00000073: 	testq	%r11, %r11
    00000076: 	je	.Ltmp171 # Offset: 118
.Ltmp176:
    00000078: 	leaq	-0x1(%rax), %rdx
    0000007c: 	movq	%rdx, %rdi
    0000007f: 	shrq	$0x3f, %rdi
    00000083: 	addq	%rdx, %rdi
    00000086: 	sarq	%rdi
    00000089: 	cmpq	%r8, %rax
    0000008c: 	jg	.Ltmp172 # Offset: 140
    0000008e: 	jmp	.Ltmp173 # Offset: 142
.Ltmp175:
    00000090: 	leaq	-0x1(%rdi), %rdx
    00000094: 	movsd	%xmm1, (%rsi)
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rdi, %rax
    000000ab: 	cmpq	%rdi, %r8
    000000ae: 	jge	.Ltmp174 # Offset: 174
    000000b0: 	movq	%rdx, %rdi
.Ltmp172:
    000000b3: 	leaq	(%rcx,%rdi,8), %r9
    000000b7: 	leaq	(%rcx,%rax,8), %rsi
    000000bb: 	movsd	(%r9), %xmm1
    000000c0: 	comisd	%xmm1, %xmm0
    000000c4: 	ja	.Ltmp175 # Offset: 196
.Ltmp173:
    000000c6: 	movsd	%xmm0, (%rsi)
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp166:
    000000d0: 	leaq	(%rdi,%rsi,8), %rsi
    000000d4: 	testq	%r11, %r11
    000000d7: 	jne	.Ltmp173 # Offset: 215
    000000d9: 	movq	%r8, %rax
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp171:
    000000e0: 	subq	$0x2, %r10
    000000e4: 	movq	%r10, %rdx
    000000e7: 	shrq	$0x3f, %rdx
    000000eb: 	addq	%r10, %rdx
    000000ee: 	sarq	%rdx
    000000f1: 	cmpq	%rdx, %rax
    000000f4: 	jne	.Ltmp176 # Offset: 244
    000000f6: 	leaq	0x2(%rax,%rax), %rax
    000000fb: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    00000101: 	subq	$0x1, %rax
    00000105: 	movsd	%xmm1, (%rsi)
    00000109: 	leaq	(%rcx,%rax,8), %rsi
    0000010d: 	jmp	.Ltmp176 # Offset: 269
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp174:
    00000118: 	movq	%r9, %rsi
    0000011b: 	movsd	%xmm0, (%rsi)
    0000011f: 	retq # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/functionobjects.cpp/1
  Number      : 33
  State       : disassembled
  Address     : 0x2fc0
  Size        : 0x1d2
  MaxSize     : 0x1e0
  Offset      : 0x2fc0
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	movq	%rsi, %rax
    00000003: 	subq	%rdi, %rax
    00000006: 	cmpq	$0x80, %rax
    0000000c: 	jle	.Ltmp177 # Offset: 12
    00000012: 	pushq	%r13
    00000014: 	movq	%rdx, %r13
    00000017: 	pushq	%r12
    00000019: 	leaq	0x8(%rdi), %r12
    0000001d: 	pushq	%rbp
    0000001e: 	movq	%rdi, %rbp
    00000021: 	pushq	%rbx
    00000022: 	subq	$0x8, %rsp
    00000026: 	testq	%rdx, %rdx
    00000029: 	je	.Ltmp178 # Offset: 41
.Ltmp191:
    0000002f: 	movupd	(%rbp), %xmm0
    00000034: 	sarq	$0x4, %rax
    00000038: 	subq	$0x1, %r13
    0000003c: 	movsd	-0x8(%rsi), %xmm3
    00000041: 	leaq	(%rbp,%rax,8), %rax
    00000046: 	movapd	%xmm0, %xmm4
    0000004a: 	movsd	(%rax), %xmm2
    0000004e: 	movapd	%xmm0, %xmm1
    00000052: 	shufpd	$0x1, %xmm0, %xmm4
    00000057: 	unpckhpd	%xmm0, %xmm0
    0000005b: 	comisd	%xmm0, %xmm2
    0000005f: 	jbe	.Ltmp179 # Offset: 95
    00000061: 	comisd	%xmm2, %xmm3
    00000065: 	ja	.Ltmp180 # Offset: 101
    0000006b: 	comisd	%xmm0, %xmm3
    0000006f: 	ja	.Ltmp181 # Offset: 111
.Ltmp187:
    00000071: 	movups	%xmm4, (%rbp)
    00000075: 	movsd	-0x8(%rsi), %xmm2
.Ltmp188:
    0000007a: 	movq	%rsi, %rax
    0000007d: 	movq	%r12, %rbx
    00000080: 	jmp	.Ltmp182 # Offset: 128
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp183:
    00000088: 	movsd	0x8(%rbx), %xmm1
    0000008d: 	addq	$0x8, %rbx
.Ltmp182:
    00000091: 	comisd	%xmm1, %xmm0
    00000095: 	ja	.Ltmp183 # Offset: 149
    00000097: 	subq	$0x8, %rax
    0000009b: 	comisd	%xmm0, %xmm2
    0000009f: 	jbe	.Ltmp184 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp185:
    000000a8: 	movsd	-0x8(%rax), %xmm2
    000000ad: 	subq	$0x8, %rax
    000000b1: 	comisd	%xmm0, %xmm2
    000000b5: 	ja	.Ltmp185 # Offset: 181
.Ltmp184:
    000000b7: 	cmpq	%rbx, %rax
    000000ba: 	jbe	.Ltmp186 # Offset: 186
    000000bc: 	movsd	%xmm2, (%rbx)
    000000c0: 	addq	$0x8, %rbx
    000000c4: 	movsd	-0x8(%rax), %xmm2
    000000c9: 	movsd	%xmm1, (%rax)
    000000cd: 	movsd	(%rbx), %xmm1
    000000d1: 	movsd	(%rbp), %xmm0
    000000d6: 	jmp	.Ltmp182 # Offset: 214
.Ltmp179:
    000000d8: 	comisd	%xmm0, %xmm3
    000000dc: 	ja	.Ltmp187 # Offset: 220
    000000de: 	comisd	%xmm2, %xmm3
    000000e2: 	jbe	.Ltmp180 # Offset: 226
.Ltmp181:
    000000e4: 	movsd	%xmm3, (%rbp)
    000000e9: 	movapd	%xmm1, %xmm2
    000000ed: 	movsd	%xmm1, -0x8(%rsi)
    000000f2: 	movsd	(%rbp), %xmm0
    000000f7: 	movsd	0x8(%rbp), %xmm1
    000000fc: 	jmp	.Ltmp188 # Offset: 252
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp186:
    00000108: 	movq	%r13, %rdx
    0000010b: 	movq	%rbx, %rdi
    0000010e: 	callq	"_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 270
    00000113: 	movq	%rbx, %rax
    00000116: 	subq	%rbp, %rax
    00000119: 	cmpq	$0x80, %rax
    0000011f: 	jle	.Ltmp189 # Offset: 287
    00000125: 	testq	%r13, %r13
    00000128: 	je	.Ltmp190 # Offset: 296
    0000012a: 	movq	%rbx, %rsi
    0000012d: 	jmp	.Ltmp191 # Offset: 301
.Ltmp180:
    00000132: 	movsd	%xmm2, (%rbp)
    00000137: 	movsd	%xmm1, (%rax)
    0000013b: 	movsd	0x8(%rbp), %xmm1
    00000140: 	movsd	(%rbp), %xmm0
    00000145: 	movsd	-0x8(%rsi), %xmm2
    0000014a: 	jmp	.Ltmp188 # Offset: 330
.Ltmp178:
    0000014f: 	movq	%rsi, %rbx
.Ltmp190:
    00000152: 	sarq	$0x3, %rax
    00000156: 	movq	%rbp, %rdi
    00000159: 	leaq	-0x2(%rax), %r13
    0000015d: 	movq	%rax, %rdx
    00000160: 	movq	%rax, %r12
    00000163: 	sarq	%r13
    00000166: 	movsd	(%rbp,%r13,8), %xmm0
    0000016d: 	movq	%r13, %rsi
    00000170: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 368
.Ltmp192:
    00000175: 	subq	$0x1, %r13
    00000179: 	movq	%r12, %rdx
    0000017c: 	movq	%rbp, %rdi
    0000017f: 	movsd	(%rbp,%r13,8), %xmm0
    00000186: 	movq	%r13, %rsi
    00000189: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 393
    0000018e: 	testq	%r13, %r13
    00000191: 	jne	.Ltmp192 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp193:
    00000198: 	subq	$0x8, %rbx
    0000019c: 	movsd	(%rbp), %xmm1
    000001a1: 	movsd	(%rbx), %xmm0
    000001a5: 	xorl	%esi, %esi
    000001a7: 	movq	%rbx, %r12
    000001aa: 	movq	%rbp, %rdi
    000001ad: 	subq	%rbp, %r12
    000001b0: 	movsd	%xmm1, (%rbx)
    000001b4: 	movq	%r12, %rdx
    000001b7: 	sarq	$0x3, %rdx
    000001bb: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 443
    000001c0: 	cmpq	$0x8, %r12
    000001c4: 	jg	.Ltmp193 # Offset: 452
.Ltmp189:
    000001c6: 	addq	$0x8, %rsp
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	retq # Offset: 464
.Ltmp177:
    000001d1: 	retq # Offset: 465
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)"

Binary Function "_Z11qsort_innerPhS_mPFiPKvS1_E.constprop.0/1(*2)" after disassembly {
  All names   : _Z11qsort_innerPhS_mPFiPKvS1_E.constprop.0/1
                _Z11qsort_innerPhS_mPFiPKvS1_E.constprop.0/functionobjects.cpp/1
  Number      : 34
  State       : disassembled
  Address     : 0x31a0
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x31a0
  Section     : .text
  Orc Section : .local.text._Z11qsort_innerPhS_mPFiPKvS1_E.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	movq	%rsi, %rax
    00000003: 	subq	%rdi, %rax
    00000006: 	cmpq	$0x8, %rax
    0000000a: 	jbe	.Ltmp194 # Offset: 10
    00000010: 	pushq	%rbp
    00000011: 	movq	%rsi, %rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x8, %rsp
.Ltmp203:
    00000019: 	movsd	(%rdi), %xmm1
    0000001d: 	movq	%rdi, %rcx
    00000020: 	movq	%rbp, %rbx
    00000023: 	movq	%rdi, %rdx
    00000026: 	jmp	.Ltmp195 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp200:
    00000030: 	cmpq	%rdx, %rcx
    00000033: 	je	.Ltmp196 # Offset: 51
    00000039: 	cmpq	%rax, %rcx
    0000003c: 	je	.Ltmp197 # Offset: 60
.Ltmp205:
    00000042: 	movq	(%rax), %rsi
    00000045: 	movq	(%rdx), %r8
    00000048: 	movq	%rax, %rbx
    0000004b: 	movq	%r8, (%rax)
    0000004e: 	movq	%rsi, (%rdx)
.Ltmp195:
    00000051: 	movsd	-0x8(%rbx), %xmm0
    00000056: 	leaq	-0x8(%rbx), %rax
    0000005a: 	comisd	%xmm1, %xmm0
    0000005e: 	ja	.Ltmp198 # Offset: 94
.Ltmp204:
    00000060: 	cmpq	%rax, %rdx
    00000063: 	jae	.Ltmp199 # Offset: 99
    00000065: 	movsd	(%rdx), %xmm0
    00000069: 	comisd	%xmm0, %xmm1
    0000006d: 	jbe	.Ltmp200 # Offset: 109
.Ltmp201:
    0000006f: 	movsd	0x8(%rdx), %xmm0
    00000074: 	addq	$0x8, %rdx
    00000078: 	comisd	%xmm0, %xmm1
    0000007c: 	ja	.Ltmp201 # Offset: 124
    0000007e: 	cmpq	%rax, %rdx
    00000081: 	jb	.Ltmp200 # Offset: 129
.Ltmp199:
    00000083: 	movq	%rbx, %rsi
    00000086: 	callq	"_Z11qsort_innerPhS_mPFiPKvS1_E.constprop.0/1" # Offset: 134
    0000008b: 	movq	%rbp, %rax
    0000008e: 	subq	%rbx, %rax
    00000091: 	cmpq	$0x8, %rax
    00000095: 	jbe	.Ltmp202 # Offset: 149
    00000097: 	movq	%rbx, %rdi
    0000009a: 	jmp	.Ltmp203 # Offset: 154
    0000009f: 	nop # Size: 1
.Ltmp198:
    000000a0: 	movq	%rax, %rbx
    000000a3: 	movsd	-0x8(%rax), %xmm0
    000000a8: 	subq	$0x8, %rax
    000000ac: 	comisd	%xmm1, %xmm0
    000000b0: 	jbe	.Ltmp204 # Offset: 176
    000000b2: 	jmp	.Ltmp198 # Offset: 178
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp196:
    000000b8: 	movsd	(%rax), %xmm1
    000000bc: 	movq	%rax, %rcx
    000000bf: 	jmp	.Ltmp205 # Offset: 191
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp197:
    000000c8: 	movapd	%xmm0, %xmm1
    000000cc: 	movq	%rdx, %rcx
    000000cf: 	jmp	.Ltmp205 # Offset: 207
.Ltmp202:
    000000d4: 	addq	$0x8, %rsp
    000000d8: 	popq	%rbx
    000000d9: 	popq	%rbp
    000000da: 	retq # Offset: 218
.Ltmp194:
    000000db: 	retq # Offset: 219
DWARF CFI Instructions:
    <empty>
End of Function "_Z11qsort_innerPhS_mPFiPKvS1_E.constprop.0/1(*2)"

Binary Function "_Z17simple_qsort_funcIdEvPT_S1_" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x3280
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x3280
  Section     : .text
  Orc Section : .local.text._Z17simple_qsort_funcIdEvPT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	jmp	"_Z11qsort_innerPhS_mPFiPKvS1_E.constprop.0/1" # TAILCALL  # Offset: 4
DWARF CFI Instructions:
    <empty>
End of Function "_Z17simple_qsort_funcIdEvPT_S1_"

Binary Function "_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1(*2)" after disassembly {
  All names   : _Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1
                _Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/functionobjects.cpp/1
  Number      : 36
  State       : disassembled
  Address     : 0x3290
  Size        : 0x7c3
  MaxSize     : 0x7d0
  Offset      : 0x3290
  Section     : .text
  Orc Section : .local.text._Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp299:
    00000014: 	movsd	(%r13), %xmm1
    0000001a: 	movq	%rbx, %rbp
    0000001d: 	movq	%r13, %rax
.Ltmp210:
    00000020: 	movsd	-0x8(%rbp), %xmm2
    00000025: 	leaq	-0x8(%rbp), %rdx
    00000029: 	comisd	%xmm1, %xmm2
    0000002d: 	ja	.Ltmp206 # Offset: 45
    0000002f: 	cmpq	%rax, %rdx
    00000032: 	jbe	.Ltmp207 # Offset: 50
    00000034: 	movsd	(%rax), %xmm0
    00000038: 	comisd	%xmm0, %xmm1
    0000003c: 	jbe	.Ltmp208 # Offset: 60
    0000003e: 	nop # Size: 2
.Ltmp209:
    00000040: 	movsd	0x8(%rax), %xmm0
    00000045: 	addq	$0x8, %rax
    00000049: 	comisd	%xmm0, %xmm1
    0000004d: 	ja	.Ltmp209 # Offset: 77
    0000004f: 	cmpq	%rax, %rdx
    00000052: 	jbe	.Ltmp207 # Offset: 82
.Ltmp208:
    00000054: 	movsd	%xmm0, (%rdx)
    00000058: 	movsd	%xmm2, (%rax)
.Ltmp206:
    0000005c: 	movq	%rdx, %rbp
    0000005f: 	jmp	.Ltmp210 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp207:
    00000068: 	movq	%rbp, %rax
    0000006b: 	subq	%r13, %rax
    0000006e: 	cmpq	$0x8, %rax
    00000072: 	jle	.Ltmp211 # Offset: 114
    00000074: 	movsd	(%r13), %xmm1
    0000007a: 	movq	%rbp, %r12
    0000007d: 	movq	%r13, %rax
.Ltmp216:
    00000080: 	comisd	%xmm1, %xmm2
    00000084: 	leaq	-0x8(%r12), %rdx
    00000089: 	ja	.Ltmp212 # Offset: 137
    0000008b: 	cmpq	%rax, %rdx
    0000008e: 	jbe	.Ltmp213 # Offset: 142
    00000090: 	movsd	(%rax), %xmm0
    00000094: 	comisd	%xmm0, %xmm1
    00000098: 	jbe	.Ltmp214 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp215:
    000000a0: 	movsd	0x8(%rax), %xmm0
    000000a5: 	addq	$0x8, %rax
    000000a9: 	comisd	%xmm0, %xmm1
    000000ad: 	ja	.Ltmp215 # Offset: 173
    000000af: 	cmpq	%rax, %rdx
    000000b2: 	jbe	.Ltmp213 # Offset: 178
.Ltmp214:
    000000b4: 	movsd	%xmm0, (%rdx)
    000000b8: 	movsd	%xmm2, (%rax)
.Ltmp212:
    000000bc: 	movsd	-0x8(%rdx), %xmm2
    000000c1: 	movq	%rdx, %r12
    000000c4: 	jmp	.Ltmp216 # Offset: 196
.Ltmp213:
    000000c6: 	movq	%r12, %rax
    000000c9: 	subq	%r13, %rax
    000000cc: 	cmpq	$0x8, %rax
    000000d0: 	jg	.Ltmp217 # Offset: 208
.Ltmp279:
    000000d6: 	movq	%rbp, %rax
    000000d9: 	subq	%r12, %rax
    000000dc: 	cmpq	$0x8, %rax
    000000e0: 	jg	.Ltmp218 # Offset: 224
.Ltmp211:
    000000e6: 	movq	%rbx, %rax
    000000e9: 	subq	%rbp, %rax
    000000ec: 	cmpq	$0x8, %rax
    000000f0: 	jle	.Ltmp219 # Offset: 240
    000000f2: 	movsd	(%rbp), %xmm1
    000000f7: 	movq	%rbx, %r12
    000000fa: 	movq	%rbp, %rax
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp224:
    00000100: 	movsd	-0x8(%r12), %xmm2
    00000107: 	leaq	-0x8(%r12), %rdx
    0000010c: 	comisd	%xmm1, %xmm2
    00000110: 	ja	.Ltmp220 # Offset: 272
    00000112: 	cmpq	%rax, %rdx
    00000115: 	jbe	.Ltmp221 # Offset: 277
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	comisd	%xmm0, %xmm1
    0000011f: 	jbe	.Ltmp222 # Offset: 287
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp223:
    00000128: 	movsd	0x8(%rax), %xmm0
    0000012d: 	addq	$0x8, %rax
    00000131: 	comisd	%xmm0, %xmm1
    00000135: 	ja	.Ltmp223 # Offset: 309
    00000137: 	cmpq	%rax, %rdx
    0000013a: 	jbe	.Ltmp221 # Offset: 314
.Ltmp222:
    0000013c: 	movsd	%xmm0, (%rdx)
    00000140: 	movsd	%xmm2, (%rax)
.Ltmp220:
    00000144: 	movq	%rdx, %r12
    00000147: 	jmp	.Ltmp224 # Offset: 327
.Ltmp221:
    00000149: 	movq	%r12, %rax
    0000014c: 	subq	%rbp, %rax
    0000014f: 	cmpq	$0x8, %rax
    00000153: 	jg	.Ltmp225 # Offset: 339
.Ltmp254:
    00000159: 	movq	%rbx, %rax
    0000015c: 	subq	%r12, %rax
    0000015f: 	cmpq	$0x8, %rax
    00000163: 	jg	.Ltmp226 # Offset: 355
.Ltmp219:
    00000169: 	addq	$0x8, %rsp
    0000016d: 	popq	%rbx
    0000016e: 	popq	%rbp
    0000016f: 	popq	%r12
    00000171: 	popq	%r13
    00000173: 	popq	%r14
    00000175: 	popq	%r15
    00000177: 	retq # Offset: 375
.Ltmp218:
    00000178: 	movsd	(%r12), %xmm1
    0000017e: 	movq	%rbp, %r13
    00000181: 	movq	%r12, %rax
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp231:
    00000188: 	movsd	-0x8(%r13), %xmm2
    0000018e: 	leaq	-0x8(%r13), %rdx
    00000192: 	comisd	%xmm1, %xmm2
    00000196: 	ja	.Ltmp227 # Offset: 406
    00000198: 	cmpq	%rax, %rdx
    0000019b: 	jbe	.Ltmp228 # Offset: 411
    000001a1: 	movsd	(%rax), %xmm0
    000001a5: 	comisd	%xmm0, %xmm1
    000001a9: 	jbe	.Ltmp229 # Offset: 425
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp230:
    000001b0: 	movsd	0x8(%rax), %xmm0
    000001b5: 	addq	$0x8, %rax
    000001b9: 	comisd	%xmm0, %xmm1
    000001bd: 	ja	.Ltmp230 # Offset: 445
    000001bf: 	cmpq	%rax, %rdx
    000001c2: 	jbe	.Ltmp228 # Offset: 450
.Ltmp229:
    000001c8: 	movsd	%xmm0, (%rdx)
    000001cc: 	movsd	%xmm2, (%rax)
.Ltmp227:
    000001d0: 	movq	%rdx, %r13
    000001d3: 	jmp	.Ltmp231 # Offset: 467
.Ltmp217:
    000001d5: 	movsd	(%r13), %xmm1
    000001db: 	movq	%r12, %r14
    000001de: 	movq	%r13, %rax
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp236:
    000001e8: 	comisd	%xmm1, %xmm2
    000001ec: 	leaq	-0x8(%r14), %rdx
    000001f0: 	ja	.Ltmp232 # Offset: 496
    000001f2: 	cmpq	%rax, %rdx
    000001f5: 	jbe	.Ltmp233 # Offset: 501
    000001fb: 	movsd	(%rax), %xmm0
    000001ff: 	comisd	%xmm0, %xmm1
    00000203: 	jbe	.Ltmp234 # Offset: 515
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp235:
    00000208: 	movsd	0x8(%rax), %xmm0
    0000020d: 	addq	$0x8, %rax
    00000211: 	comisd	%xmm0, %xmm1
    00000215: 	ja	.Ltmp235 # Offset: 533
    00000217: 	cmpq	%rax, %rdx
    0000021a: 	jbe	.Ltmp233 # Offset: 538
.Ltmp234:
    00000220: 	movsd	%xmm0, (%rdx)
    00000224: 	movsd	%xmm2, (%rax)
.Ltmp232:
    00000228: 	movsd	-0x8(%rdx), %xmm2
    0000022d: 	movq	%rdx, %r14
    00000230: 	jmp	.Ltmp236 # Offset: 560
.Ltmp226:
    00000232: 	movsd	(%r12), %xmm1
    00000238: 	movq	%rbx, %rbp
    0000023b: 	movq	%r12, %rax
    0000023e: 	nop # Size: 2
.Ltmp241:
    00000240: 	movsd	-0x8(%rbp), %xmm2
    00000245: 	leaq	-0x8(%rbp), %rdx
    00000249: 	comisd	%xmm1, %xmm2
    0000024d: 	ja	.Ltmp237 # Offset: 589
    0000024f: 	cmpq	%rax, %rdx
    00000252: 	jbe	.Ltmp238 # Offset: 594
    00000258: 	movsd	(%rax), %xmm0
    0000025c: 	comisd	%xmm0, %xmm1
    00000260: 	jbe	.Ltmp239 # Offset: 608
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp240:
    00000268: 	movsd	0x8(%rax), %xmm0
    0000026d: 	addq	$0x8, %rax
    00000271: 	comisd	%xmm0, %xmm1
    00000275: 	ja	.Ltmp240 # Offset: 629
    00000277: 	cmpq	%rax, %rdx
    0000027a: 	jbe	.Ltmp238 # Offset: 634
.Ltmp239:
    00000280: 	movsd	%xmm0, (%rdx)
    00000284: 	movsd	%xmm2, (%rax)
.Ltmp237:
    00000288: 	movq	%rdx, %rbp
    0000028b: 	jmp	.Ltmp241 # Offset: 651
.Ltmp225:
    0000028d: 	movsd	(%rbp), %xmm1
    00000292: 	movq	%r12, %r13
    00000295: 	movq	%rbp, %rax
    00000298: 	nopl	(%rax,%rax) # Size: 8
.Ltmp246:
    000002a0: 	comisd	%xmm1, %xmm2
    000002a4: 	leaq	-0x8(%r13), %rdx
    000002a8: 	ja	.Ltmp242 # Offset: 680
    000002aa: 	cmpq	%rax, %rdx
    000002ad: 	jbe	.Ltmp243 # Offset: 685
    000002af: 	movsd	(%rax), %xmm0
    000002b3: 	comisd	%xmm0, %xmm1
    000002b7: 	jbe	.Ltmp244 # Offset: 695
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp245:
    000002c0: 	movsd	0x8(%rax), %xmm0
    000002c5: 	addq	$0x8, %rax
    000002c9: 	comisd	%xmm0, %xmm1
    000002cd: 	ja	.Ltmp245 # Offset: 717
    000002cf: 	cmpq	%rax, %rdx
    000002d2: 	jbe	.Ltmp243 # Offset: 722
.Ltmp244:
    000002d4: 	movsd	%xmm0, (%rdx)
    000002d8: 	movsd	%xmm2, (%rax)
.Ltmp242:
    000002dc: 	movsd	-0x8(%rdx), %xmm2
    000002e1: 	movq	%rdx, %r13
    000002e4: 	jmp	.Ltmp246 # Offset: 740
.Ltmp243:
    000002e6: 	movq	%r13, %rax
    000002e9: 	subq	%rbp, %rax
    000002ec: 	cmpq	$0x8, %rax
    000002f0: 	jle	.Ltmp247 # Offset: 752
    000002f2: 	movsd	(%rbp), %xmm1
    000002f7: 	movq	%r13, %r14
    000002fa: 	movq	%rbp, %rax
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp252:
    00000300: 	movsd	-0x8(%r14), %xmm2
    00000306: 	leaq	-0x8(%r14), %rdx
    0000030a: 	comisd	%xmm1, %xmm2
    0000030e: 	ja	.Ltmp248 # Offset: 782
    00000310: 	cmpq	%rax, %rdx
    00000313: 	jbe	.Ltmp249 # Offset: 787
    00000315: 	movsd	(%rax), %xmm0
    00000319: 	comisd	%xmm0, %xmm1
    0000031d: 	jbe	.Ltmp250 # Offset: 797
    0000031f: 	nop # Size: 1
.Ltmp251:
    00000320: 	movsd	0x8(%rax), %xmm0
    00000325: 	addq	$0x8, %rax
    00000329: 	comisd	%xmm0, %xmm1
    0000032d: 	ja	.Ltmp251 # Offset: 813
    0000032f: 	cmpq	%rax, %rdx
    00000332: 	jbe	.Ltmp249 # Offset: 818
.Ltmp250:
    00000334: 	movsd	%xmm0, (%rdx)
    00000338: 	movsd	%xmm2, (%rax)
.Ltmp248:
    0000033c: 	movq	%rdx, %r14
    0000033f: 	jmp	.Ltmp252 # Offset: 831
.Ltmp249:
    00000341: 	movq	%r14, %rax
    00000344: 	subq	%rbp, %rax
    00000347: 	cmpq	$0x8, %rax
    0000034b: 	jle	.Ltmp253 # Offset: 843
    0000034d: 	movq	%r14, %rsi
    00000350: 	movq	%rbp, %rdi
    00000353: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 851
.Ltmp253:
    00000358: 	movq	%r13, %rax
    0000035b: 	subq	%r14, %rax
    0000035e: 	cmpq	$0x8, %rax
    00000362: 	jle	.Ltmp247 # Offset: 866
    00000364: 	movq	%r13, %rsi
    00000367: 	movq	%r14, %rdi
    0000036a: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 874
.Ltmp247:
    0000036f: 	movq	%r12, %rax
    00000372: 	subq	%r13, %rax
    00000375: 	cmpq	$0x8, %rax
    00000379: 	jle	.Ltmp254 # Offset: 889
    0000037f: 	movsd	(%r13), %xmm1
    00000385: 	movq	%r12, %rbp
    00000388: 	movq	%r13, %rax
    0000038b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp259:
    00000390: 	movsd	-0x8(%rbp), %xmm2
    00000395: 	leaq	-0x8(%rbp), %rdx
    00000399: 	comisd	%xmm1, %xmm2
    0000039d: 	ja	.Ltmp255 # Offset: 925
    0000039f: 	cmpq	%rax, %rdx
    000003a2: 	jbe	.Ltmp256 # Offset: 930
    000003a8: 	movsd	(%rax), %xmm0
    000003ac: 	comisd	%xmm0, %xmm1
    000003b0: 	jbe	.Ltmp257 # Offset: 944
    000003b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp258:
    000003b8: 	movsd	0x8(%rax), %xmm0
    000003bd: 	addq	$0x8, %rax
    000003c1: 	comisd	%xmm0, %xmm1
    000003c5: 	ja	.Ltmp258 # Offset: 965
    000003c7: 	cmpq	%rax, %rdx
    000003ca: 	jbe	.Ltmp256 # Offset: 970
.Ltmp257:
    000003d0: 	movsd	%xmm0, (%rdx)
    000003d4: 	movsd	%xmm2, (%rax)
.Ltmp255:
    000003d8: 	movq	%rdx, %rbp
    000003db: 	jmp	.Ltmp259 # Offset: 987
.Ltmp238:
    000003dd: 	movq	%rbp, %rax
    000003e0: 	subq	%r12, %rax
    000003e3: 	cmpq	$0x8, %rax
    000003e7: 	jle	.Ltmp260 # Offset: 999
    000003ed: 	movsd	(%r12), %xmm1
    000003f3: 	movq	%rbp, %r13
    000003f6: 	movq	%r12, %rax
    000003f9: 	nopl	(%rax) # Size: 7
.Ltmp265:
    00000400: 	movsd	-0x8(%r13), %xmm2
    00000406: 	leaq	-0x8(%r13), %rdx
    0000040a: 	comisd	%xmm1, %xmm2
    0000040e: 	ja	.Ltmp261 # Offset: 1038
    00000410: 	cmpq	%rax, %rdx
    00000413: 	jbe	.Ltmp262 # Offset: 1043
    00000415: 	movsd	(%rax), %xmm0
    00000419: 	comisd	%xmm0, %xmm1
    0000041d: 	jbe	.Ltmp263 # Offset: 1053
    0000041f: 	nop # Size: 1
.Ltmp264:
    00000420: 	movsd	0x8(%rax), %xmm0
    00000425: 	addq	$0x8, %rax
    00000429: 	comisd	%xmm0, %xmm1
    0000042d: 	ja	.Ltmp264 # Offset: 1069
    0000042f: 	cmpq	%rax, %rdx
    00000432: 	jbe	.Ltmp262 # Offset: 1074
.Ltmp263:
    00000434: 	movsd	%xmm0, (%rdx)
    00000438: 	movsd	%xmm2, (%rax)
.Ltmp261:
    0000043c: 	movq	%rdx, %r13
    0000043f: 	jmp	.Ltmp265 # Offset: 1087
.Ltmp262:
    00000441: 	movq	%r13, %rax
    00000444: 	subq	%r12, %rax
    00000447: 	cmpq	$0x8, %rax
    0000044b: 	jle	.Ltmp266 # Offset: 1099
    0000044d: 	movq	%r13, %rsi
    00000450: 	movq	%r12, %rdi
    00000453: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1107
.Ltmp266:
    00000458: 	movq	%rbp, %rax
    0000045b: 	subq	%r13, %rax
    0000045e: 	cmpq	$0x8, %rax
    00000462: 	jle	.Ltmp260 # Offset: 1122
    00000464: 	movq	%rbp, %rsi
    00000467: 	movq	%r13, %rdi
    0000046a: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1130
.Ltmp260:
    0000046f: 	movq	%rbx, %rax
    00000472: 	subq	%rbp, %rax
    00000475: 	cmpq	$0x8, %rax
    00000479: 	jle	.Ltmp219 # Offset: 1145
    0000047f: 	movsd	(%rbp), %xmm1
    00000484: 	movq	%rbx, %r13
    00000487: 	movq	%rbp, %rax
    0000048a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp271:
    00000490: 	movsd	-0x8(%r13), %xmm2
    00000496: 	leaq	-0x8(%r13), %rdx
    0000049a: 	comisd	%xmm1, %xmm2
    0000049e: 	ja	.Ltmp267 # Offset: 1182
    000004a0: 	cmpq	%rax, %rdx
    000004a3: 	jbe	.Ltmp268 # Offset: 1187
    000004a9: 	movsd	(%rax), %xmm0
    000004ad: 	comisd	%xmm0, %xmm1
    000004b1: 	jbe	.Ltmp269 # Offset: 1201
    000004b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp270:
    000004b8: 	movsd	0x8(%rax), %xmm0
    000004bd: 	addq	$0x8, %rax
    000004c1: 	comisd	%xmm0, %xmm1
    000004c5: 	ja	.Ltmp270 # Offset: 1221
    000004c7: 	cmpq	%rax, %rdx
    000004ca: 	jbe	.Ltmp268 # Offset: 1226
.Ltmp269:
    000004d0: 	movsd	%xmm0, (%rdx)
    000004d4: 	movsd	%xmm2, (%rax)
.Ltmp267:
    000004d8: 	movq	%rdx, %r13
    000004db: 	jmp	.Ltmp271 # Offset: 1243
.Ltmp233:
    000004dd: 	movq	%r14, %rax
    000004e0: 	subq	%r13, %rax
    000004e3: 	cmpq	$0x8, %rax
    000004e7: 	jle	.Ltmp272 # Offset: 1255
    000004ed: 	movsd	(%r13), %xmm1
    000004f3: 	movq	%r14, %r15
    000004f6: 	movq	%r13, %rax
    000004f9: 	nopl	(%rax) # Size: 7
.Ltmp277:
    00000500: 	movsd	-0x8(%r15), %xmm2
    00000506: 	leaq	-0x8(%r15), %rdx
    0000050a: 	comisd	%xmm1, %xmm2
    0000050e: 	ja	.Ltmp273 # Offset: 1294
    00000510: 	cmpq	%rax, %rdx
    00000513: 	jbe	.Ltmp274 # Offset: 1299
    00000515: 	movsd	(%rax), %xmm0
    00000519: 	comisd	%xmm0, %xmm1
    0000051d: 	jbe	.Ltmp275 # Offset: 1309
    0000051f: 	nop # Size: 1
.Ltmp276:
    00000520: 	movsd	0x8(%rax), %xmm0
    00000525: 	addq	$0x8, %rax
    00000529: 	comisd	%xmm0, %xmm1
    0000052d: 	ja	.Ltmp276 # Offset: 1325
    0000052f: 	cmpq	%rax, %rdx
    00000532: 	jbe	.Ltmp274 # Offset: 1330
.Ltmp275:
    00000534: 	movsd	%xmm0, (%rdx)
    00000538: 	movsd	%xmm2, (%rax)
.Ltmp273:
    0000053c: 	movq	%rdx, %r15
    0000053f: 	jmp	.Ltmp277 # Offset: 1343
.Ltmp274:
    00000541: 	movq	%r15, %rax
    00000544: 	subq	%r13, %rax
    00000547: 	cmpq	$0x8, %rax
    0000054b: 	jle	.Ltmp278 # Offset: 1355
    0000054d: 	movq	%r15, %rsi
    00000550: 	movq	%r13, %rdi
    00000553: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1363
.Ltmp278:
    00000558: 	movq	%r14, %rax
    0000055b: 	subq	%r15, %rax
    0000055e: 	cmpq	$0x8, %rax
    00000562: 	jle	.Ltmp272 # Offset: 1378
    00000564: 	movq	%r14, %rsi
    00000567: 	movq	%r15, %rdi
    0000056a: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1386
.Ltmp272:
    0000056f: 	movq	%r12, %rax
    00000572: 	subq	%r14, %rax
    00000575: 	cmpq	$0x8, %rax
    00000579: 	jle	.Ltmp279 # Offset: 1401
    0000057f: 	movsd	(%r14), %xmm1
    00000584: 	movq	%r12, %r13
    00000587: 	movq	%r14, %rax
    0000058a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp284:
    00000590: 	movsd	-0x8(%r13), %xmm2
    00000596: 	leaq	-0x8(%r13), %rdx
    0000059a: 	comisd	%xmm1, %xmm2
    0000059e: 	ja	.Ltmp280 # Offset: 1438
    000005a0: 	cmpq	%rax, %rdx
    000005a3: 	jbe	.Ltmp281 # Offset: 1443
    000005a9: 	movsd	(%rax), %xmm0
    000005ad: 	comisd	%xmm0, %xmm1
    000005b1: 	jbe	.Ltmp282 # Offset: 1457
    000005b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp283:
    000005b8: 	movsd	0x8(%rax), %xmm0
    000005bd: 	addq	$0x8, %rax
    000005c1: 	comisd	%xmm0, %xmm1
    000005c5: 	ja	.Ltmp283 # Offset: 1477
    000005c7: 	cmpq	%rax, %rdx
    000005ca: 	jbe	.Ltmp281 # Offset: 1482
.Ltmp282:
    000005d0: 	movsd	%xmm0, (%rdx)
    000005d4: 	movsd	%xmm2, (%rax)
.Ltmp280:
    000005d8: 	movq	%rdx, %r13
    000005db: 	jmp	.Ltmp284 # Offset: 1499
.Ltmp228:
    000005dd: 	movq	%r13, %rax
    000005e0: 	subq	%r12, %rax
    000005e3: 	cmpq	$0x8, %rax
    000005e7: 	jle	.Ltmp285 # Offset: 1511
    000005ed: 	movsd	(%r12), %xmm1
    000005f3: 	movq	%r13, %r14
    000005f6: 	movq	%r12, %rax
    000005f9: 	nopl	(%rax) # Size: 7
.Ltmp290:
    00000600: 	movsd	-0x8(%r14), %xmm2
    00000606: 	leaq	-0x8(%r14), %rdx
    0000060a: 	comisd	%xmm1, %xmm2
    0000060e: 	ja	.Ltmp286 # Offset: 1550
    00000610: 	cmpq	%rax, %rdx
    00000613: 	jbe	.Ltmp287 # Offset: 1555
    00000615: 	movsd	(%rax), %xmm0
    00000619: 	comisd	%xmm0, %xmm1
    0000061d: 	jbe	.Ltmp288 # Offset: 1565
    0000061f: 	nop # Size: 1
.Ltmp289:
    00000620: 	movsd	0x8(%rax), %xmm0
    00000625: 	addq	$0x8, %rax
    00000629: 	comisd	%xmm0, %xmm1
    0000062d: 	ja	.Ltmp289 # Offset: 1581
    0000062f: 	cmpq	%rax, %rdx
    00000632: 	jbe	.Ltmp287 # Offset: 1586
.Ltmp288:
    00000634: 	movsd	%xmm0, (%rdx)
    00000638: 	movsd	%xmm2, (%rax)
.Ltmp286:
    0000063c: 	movq	%rdx, %r14
    0000063f: 	jmp	.Ltmp290 # Offset: 1599
.Ltmp287:
    00000641: 	movq	%r14, %rax
    00000644: 	subq	%r12, %rax
    00000647: 	cmpq	$0x8, %rax
    0000064b: 	jle	.Ltmp291 # Offset: 1611
    0000064d: 	movq	%r14, %rsi
    00000650: 	movq	%r12, %rdi
    00000653: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1619
.Ltmp291:
    00000658: 	movq	%r13, %rax
    0000065b: 	subq	%r14, %rax
    0000065e: 	cmpq	$0x8, %rax
    00000662: 	jle	.Ltmp285 # Offset: 1634
    00000664: 	movq	%r13, %rsi
    00000667: 	movq	%r14, %rdi
    0000066a: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1642
.Ltmp285:
    0000066f: 	movq	%rbp, %rax
    00000672: 	subq	%r13, %rax
    00000675: 	cmpq	$0x8, %rax
    00000679: 	jle	.Ltmp211 # Offset: 1657
    0000067f: 	movsd	(%r13), %xmm1
    00000685: 	movq	%rbp, %r12
    00000688: 	movq	%r13, %rax
    0000068b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp296:
    00000690: 	movsd	-0x8(%r12), %xmm2
    00000697: 	leaq	-0x8(%r12), %rdx
    0000069c: 	comisd	%xmm1, %xmm2
    000006a0: 	ja	.Ltmp292 # Offset: 1696
    000006a2: 	cmpq	%rax, %rdx
    000006a5: 	jbe	.Ltmp293 # Offset: 1701
    000006ab: 	movsd	(%rax), %xmm0
    000006af: 	comisd	%xmm0, %xmm1
    000006b3: 	jbe	.Ltmp294 # Offset: 1715
    000006b5: 	nopl	(%rax) # Size: 3
.Ltmp295:
    000006b8: 	movsd	0x8(%rax), %xmm0
    000006bd: 	addq	$0x8, %rax
    000006c1: 	comisd	%xmm0, %xmm1
    000006c5: 	ja	.Ltmp295 # Offset: 1733
    000006c7: 	cmpq	%rax, %rdx
    000006ca: 	jbe	.Ltmp293 # Offset: 1738
.Ltmp294:
    000006cc: 	movsd	%xmm0, (%rdx)
    000006d0: 	movsd	%xmm2, (%rax)
.Ltmp292:
    000006d4: 	movq	%rdx, %r12
    000006d7: 	jmp	.Ltmp296 # Offset: 1751
.Ltmp256:
    000006d9: 	movq	%rbp, %rax
    000006dc: 	subq	%r13, %rax
    000006df: 	cmpq	$0x8, %rax
    000006e3: 	jle	.Ltmp297 # Offset: 1763
    000006e5: 	movq	%rbp, %rsi
    000006e8: 	movq	%r13, %rdi
    000006eb: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1771
.Ltmp297:
    000006f0: 	movq	%r12, %rax
    000006f3: 	subq	%rbp, %rax
    000006f6: 	cmpq	$0x8, %rax
    000006fa: 	jle	.Ltmp254 # Offset: 1786
    00000700: 	movq	%r12, %rsi
    00000703: 	movq	%rbp, %rdi
    00000706: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1798
    0000070b: 	jmp	.Ltmp254 # Offset: 1803
.Ltmp268:
    00000710: 	movq	%r13, %rax
    00000713: 	subq	%rbp, %rax
    00000716: 	cmpq	$0x8, %rax
    0000071a: 	jle	.Ltmp298 # Offset: 1818
    00000720: 	movq	%r13, %rsi
    00000723: 	movq	%rbp, %rdi
    00000726: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1830
    0000072b: 	movq	%rbx, %rax
    0000072e: 	subq	%r13, %rax
    00000731: 	cmpq	$0x8, %rax
    00000735: 	jg	.Ltmp299 # Offset: 1845
    0000073b: 	jmp	.Ltmp219 # Offset: 1851
.Ltmp293:
    00000740: 	movq	%r12, %rax
    00000743: 	subq	%r13, %rax
    00000746: 	cmpq	$0x8, %rax
    0000074a: 	jle	.Ltmp300 # Offset: 1866
    0000074c: 	movq	%r12, %rsi
    0000074f: 	movq	%r13, %rdi
    00000752: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1874
.Ltmp300:
    00000757: 	movq	%rbp, %rax
    0000075a: 	subq	%r12, %rax
    0000075d: 	cmpq	$0x8, %rax
    00000761: 	jle	.Ltmp211 # Offset: 1889
    00000767: 	movq	%rbp, %rsi
    0000076a: 	movq	%r12, %rdi
    0000076d: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1901
    00000772: 	jmp	.Ltmp211 # Offset: 1906
.Ltmp281:
    00000777: 	movq	%r13, %rax
    0000077a: 	subq	%r14, %rax
    0000077d: 	cmpq	$0x8, %rax
    00000781: 	jle	.Ltmp301 # Offset: 1921
    00000783: 	movq	%r13, %rsi
    00000786: 	movq	%r14, %rdi
    00000789: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1929
.Ltmp301:
    0000078e: 	movq	%r12, %rax
    00000791: 	subq	%r13, %rax
    00000794: 	cmpq	$0x8, %rax
    00000798: 	jle	.Ltmp279 # Offset: 1944
    0000079e: 	movq	%r12, %rsi
    000007a1: 	movq	%r13, %rdi
    000007a4: 	callq	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1956
    000007a9: 	jmp	.Ltmp279 # Offset: 1961
.Ltmp298:
    000007ae: 	movq	%rbx, %rax
    000007b1: 	subq	%r13, %rax
    000007b4: 	cmpq	$0x8, %rax
    000007b8: 	jg	.Ltmp299 # Offset: 1976
    000007be: 	jmp	.Ltmp219 # Offset: 1982
DWARF CFI Instructions:
    <empty>
End of Function "_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1(*2)"

Binary Function "_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x3a60
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x3a60
  Section     : .text
  Orc Section : .local.text._Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp302 # Offset: 14
    00000010: 	jmp	"_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_.part.0/1" # TAILCALL  # Offset: 16
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp302:
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z10quicksort1IPd24inline_less_than_functorEvT_S2_T0_"

Binary Function "_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1(*2)" after disassembly {
  All names   : _Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1
                _Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/functionobjects.cpp/1
  Number      : 38
  State       : disassembled
  Address     : 0x3a80
  Size        : 0x7c3
  MaxSize     : 0x7d0
  Offset      : 0x3a80
  Section     : .text
  Orc Section : .local.text._Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp396:
    00000014: 	movsd	(%r13), %xmm1
    0000001a: 	movq	%rbx, %rbp
    0000001d: 	movq	%r13, %rax
.Ltmp307:
    00000020: 	movsd	-0x8(%rbp), %xmm2
    00000025: 	leaq	-0x8(%rbp), %rdx
    00000029: 	comisd	%xmm1, %xmm2
    0000002d: 	ja	.Ltmp303 # Offset: 45
    0000002f: 	cmpq	%rax, %rdx
    00000032: 	jbe	.Ltmp304 # Offset: 50
    00000034: 	movsd	(%rax), %xmm0
    00000038: 	comisd	%xmm0, %xmm1
    0000003c: 	jbe	.Ltmp305 # Offset: 60
    0000003e: 	nop # Size: 2
.Ltmp306:
    00000040: 	movsd	0x8(%rax), %xmm0
    00000045: 	addq	$0x8, %rax
    00000049: 	comisd	%xmm0, %xmm1
    0000004d: 	ja	.Ltmp306 # Offset: 77
    0000004f: 	cmpq	%rax, %rdx
    00000052: 	jbe	.Ltmp304 # Offset: 82
.Ltmp305:
    00000054: 	movsd	%xmm0, (%rdx)
    00000058: 	movsd	%xmm2, (%rax)
.Ltmp303:
    0000005c: 	movq	%rdx, %rbp
    0000005f: 	jmp	.Ltmp307 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp304:
    00000068: 	movq	%rbp, %rax
    0000006b: 	subq	%r13, %rax
    0000006e: 	cmpq	$0x8, %rax
    00000072: 	jle	.Ltmp308 # Offset: 114
    00000074: 	movsd	(%r13), %xmm1
    0000007a: 	movq	%rbp, %r12
    0000007d: 	movq	%r13, %rax
.Ltmp313:
    00000080: 	comisd	%xmm1, %xmm2
    00000084: 	leaq	-0x8(%r12), %rdx
    00000089: 	ja	.Ltmp309 # Offset: 137
    0000008b: 	cmpq	%rax, %rdx
    0000008e: 	jbe	.Ltmp310 # Offset: 142
    00000090: 	movsd	(%rax), %xmm0
    00000094: 	comisd	%xmm0, %xmm1
    00000098: 	jbe	.Ltmp311 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp312:
    000000a0: 	movsd	0x8(%rax), %xmm0
    000000a5: 	addq	$0x8, %rax
    000000a9: 	comisd	%xmm0, %xmm1
    000000ad: 	ja	.Ltmp312 # Offset: 173
    000000af: 	cmpq	%rax, %rdx
    000000b2: 	jbe	.Ltmp310 # Offset: 178
.Ltmp311:
    000000b4: 	movsd	%xmm0, (%rdx)
    000000b8: 	movsd	%xmm2, (%rax)
.Ltmp309:
    000000bc: 	movsd	-0x8(%rdx), %xmm2
    000000c1: 	movq	%rdx, %r12
    000000c4: 	jmp	.Ltmp313 # Offset: 196
.Ltmp310:
    000000c6: 	movq	%r12, %rax
    000000c9: 	subq	%r13, %rax
    000000cc: 	cmpq	$0x8, %rax
    000000d0: 	jg	.Ltmp314 # Offset: 208
.Ltmp376:
    000000d6: 	movq	%rbp, %rax
    000000d9: 	subq	%r12, %rax
    000000dc: 	cmpq	$0x8, %rax
    000000e0: 	jg	.Ltmp315 # Offset: 224
.Ltmp308:
    000000e6: 	movq	%rbx, %rax
    000000e9: 	subq	%rbp, %rax
    000000ec: 	cmpq	$0x8, %rax
    000000f0: 	jle	.Ltmp316 # Offset: 240
    000000f2: 	movsd	(%rbp), %xmm1
    000000f7: 	movq	%rbx, %r12
    000000fa: 	movq	%rbp, %rax
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp321:
    00000100: 	movsd	-0x8(%r12), %xmm2
    00000107: 	leaq	-0x8(%r12), %rdx
    0000010c: 	comisd	%xmm1, %xmm2
    00000110: 	ja	.Ltmp317 # Offset: 272
    00000112: 	cmpq	%rax, %rdx
    00000115: 	jbe	.Ltmp318 # Offset: 277
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	comisd	%xmm0, %xmm1
    0000011f: 	jbe	.Ltmp319 # Offset: 287
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp320:
    00000128: 	movsd	0x8(%rax), %xmm0
    0000012d: 	addq	$0x8, %rax
    00000131: 	comisd	%xmm0, %xmm1
    00000135: 	ja	.Ltmp320 # Offset: 309
    00000137: 	cmpq	%rax, %rdx
    0000013a: 	jbe	.Ltmp318 # Offset: 314
.Ltmp319:
    0000013c: 	movsd	%xmm0, (%rdx)
    00000140: 	movsd	%xmm2, (%rax)
.Ltmp317:
    00000144: 	movq	%rdx, %r12
    00000147: 	jmp	.Ltmp321 # Offset: 327
.Ltmp318:
    00000149: 	movq	%r12, %rax
    0000014c: 	subq	%rbp, %rax
    0000014f: 	cmpq	$0x8, %rax
    00000153: 	jg	.Ltmp322 # Offset: 339
.Ltmp351:
    00000159: 	movq	%rbx, %rax
    0000015c: 	subq	%r12, %rax
    0000015f: 	cmpq	$0x8, %rax
    00000163: 	jg	.Ltmp323 # Offset: 355
.Ltmp316:
    00000169: 	addq	$0x8, %rsp
    0000016d: 	popq	%rbx
    0000016e: 	popq	%rbp
    0000016f: 	popq	%r12
    00000171: 	popq	%r13
    00000173: 	popq	%r14
    00000175: 	popq	%r15
    00000177: 	retq # Offset: 375
.Ltmp315:
    00000178: 	movsd	(%r12), %xmm1
    0000017e: 	movq	%rbp, %r13
    00000181: 	movq	%r12, %rax
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp328:
    00000188: 	movsd	-0x8(%r13), %xmm2
    0000018e: 	leaq	-0x8(%r13), %rdx
    00000192: 	comisd	%xmm1, %xmm2
    00000196: 	ja	.Ltmp324 # Offset: 406
    00000198: 	cmpq	%rax, %rdx
    0000019b: 	jbe	.Ltmp325 # Offset: 411
    000001a1: 	movsd	(%rax), %xmm0
    000001a5: 	comisd	%xmm0, %xmm1
    000001a9: 	jbe	.Ltmp326 # Offset: 425
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp327:
    000001b0: 	movsd	0x8(%rax), %xmm0
    000001b5: 	addq	$0x8, %rax
    000001b9: 	comisd	%xmm0, %xmm1
    000001bd: 	ja	.Ltmp327 # Offset: 445
    000001bf: 	cmpq	%rax, %rdx
    000001c2: 	jbe	.Ltmp325 # Offset: 450
.Ltmp326:
    000001c8: 	movsd	%xmm0, (%rdx)
    000001cc: 	movsd	%xmm2, (%rax)
.Ltmp324:
    000001d0: 	movq	%rdx, %r13
    000001d3: 	jmp	.Ltmp328 # Offset: 467
.Ltmp314:
    000001d5: 	movsd	(%r13), %xmm1
    000001db: 	movq	%r12, %r14
    000001de: 	movq	%r13, %rax
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp333:
    000001e8: 	comisd	%xmm1, %xmm2
    000001ec: 	leaq	-0x8(%r14), %rdx
    000001f0: 	ja	.Ltmp329 # Offset: 496
    000001f2: 	cmpq	%rax, %rdx
    000001f5: 	jbe	.Ltmp330 # Offset: 501
    000001fb: 	movsd	(%rax), %xmm0
    000001ff: 	comisd	%xmm0, %xmm1
    00000203: 	jbe	.Ltmp331 # Offset: 515
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp332:
    00000208: 	movsd	0x8(%rax), %xmm0
    0000020d: 	addq	$0x8, %rax
    00000211: 	comisd	%xmm0, %xmm1
    00000215: 	ja	.Ltmp332 # Offset: 533
    00000217: 	cmpq	%rax, %rdx
    0000021a: 	jbe	.Ltmp330 # Offset: 538
.Ltmp331:
    00000220: 	movsd	%xmm0, (%rdx)
    00000224: 	movsd	%xmm2, (%rax)
.Ltmp329:
    00000228: 	movsd	-0x8(%rdx), %xmm2
    0000022d: 	movq	%rdx, %r14
    00000230: 	jmp	.Ltmp333 # Offset: 560
.Ltmp323:
    00000232: 	movsd	(%r12), %xmm1
    00000238: 	movq	%rbx, %rbp
    0000023b: 	movq	%r12, %rax
    0000023e: 	nop # Size: 2
.Ltmp338:
    00000240: 	movsd	-0x8(%rbp), %xmm2
    00000245: 	leaq	-0x8(%rbp), %rdx
    00000249: 	comisd	%xmm1, %xmm2
    0000024d: 	ja	.Ltmp334 # Offset: 589
    0000024f: 	cmpq	%rax, %rdx
    00000252: 	jbe	.Ltmp335 # Offset: 594
    00000258: 	movsd	(%rax), %xmm0
    0000025c: 	comisd	%xmm0, %xmm1
    00000260: 	jbe	.Ltmp336 # Offset: 608
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp337:
    00000268: 	movsd	0x8(%rax), %xmm0
    0000026d: 	addq	$0x8, %rax
    00000271: 	comisd	%xmm0, %xmm1
    00000275: 	ja	.Ltmp337 # Offset: 629
    00000277: 	cmpq	%rax, %rdx
    0000027a: 	jbe	.Ltmp335 # Offset: 634
.Ltmp336:
    00000280: 	movsd	%xmm0, (%rdx)
    00000284: 	movsd	%xmm2, (%rax)
.Ltmp334:
    00000288: 	movq	%rdx, %rbp
    0000028b: 	jmp	.Ltmp338 # Offset: 651
.Ltmp322:
    0000028d: 	movsd	(%rbp), %xmm1
    00000292: 	movq	%r12, %r13
    00000295: 	movq	%rbp, %rax
    00000298: 	nopl	(%rax,%rax) # Size: 8
.Ltmp343:
    000002a0: 	comisd	%xmm1, %xmm2
    000002a4: 	leaq	-0x8(%r13), %rdx
    000002a8: 	ja	.Ltmp339 # Offset: 680
    000002aa: 	cmpq	%rax, %rdx
    000002ad: 	jbe	.Ltmp340 # Offset: 685
    000002af: 	movsd	(%rax), %xmm0
    000002b3: 	comisd	%xmm0, %xmm1
    000002b7: 	jbe	.Ltmp341 # Offset: 695
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp342:
    000002c0: 	movsd	0x8(%rax), %xmm0
    000002c5: 	addq	$0x8, %rax
    000002c9: 	comisd	%xmm0, %xmm1
    000002cd: 	ja	.Ltmp342 # Offset: 717
    000002cf: 	cmpq	%rax, %rdx
    000002d2: 	jbe	.Ltmp340 # Offset: 722
.Ltmp341:
    000002d4: 	movsd	%xmm0, (%rdx)
    000002d8: 	movsd	%xmm2, (%rax)
.Ltmp339:
    000002dc: 	movsd	-0x8(%rdx), %xmm2
    000002e1: 	movq	%rdx, %r13
    000002e4: 	jmp	.Ltmp343 # Offset: 740
.Ltmp340:
    000002e6: 	movq	%r13, %rax
    000002e9: 	subq	%rbp, %rax
    000002ec: 	cmpq	$0x8, %rax
    000002f0: 	jle	.Ltmp344 # Offset: 752
    000002f2: 	movsd	(%rbp), %xmm1
    000002f7: 	movq	%r13, %r14
    000002fa: 	movq	%rbp, %rax
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp349:
    00000300: 	movsd	-0x8(%r14), %xmm2
    00000306: 	leaq	-0x8(%r14), %rdx
    0000030a: 	comisd	%xmm1, %xmm2
    0000030e: 	ja	.Ltmp345 # Offset: 782
    00000310: 	cmpq	%rax, %rdx
    00000313: 	jbe	.Ltmp346 # Offset: 787
    00000315: 	movsd	(%rax), %xmm0
    00000319: 	comisd	%xmm0, %xmm1
    0000031d: 	jbe	.Ltmp347 # Offset: 797
    0000031f: 	nop # Size: 1
.Ltmp348:
    00000320: 	movsd	0x8(%rax), %xmm0
    00000325: 	addq	$0x8, %rax
    00000329: 	comisd	%xmm0, %xmm1
    0000032d: 	ja	.Ltmp348 # Offset: 813
    0000032f: 	cmpq	%rax, %rdx
    00000332: 	jbe	.Ltmp346 # Offset: 818
.Ltmp347:
    00000334: 	movsd	%xmm0, (%rdx)
    00000338: 	movsd	%xmm2, (%rax)
.Ltmp345:
    0000033c: 	movq	%rdx, %r14
    0000033f: 	jmp	.Ltmp349 # Offset: 831
.Ltmp346:
    00000341: 	movq	%r14, %rax
    00000344: 	subq	%rbp, %rax
    00000347: 	cmpq	$0x8, %rax
    0000034b: 	jle	.Ltmp350 # Offset: 843
    0000034d: 	movq	%r14, %rsi
    00000350: 	movq	%rbp, %rdi
    00000353: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 851
.Ltmp350:
    00000358: 	movq	%r13, %rax
    0000035b: 	subq	%r14, %rax
    0000035e: 	cmpq	$0x8, %rax
    00000362: 	jle	.Ltmp344 # Offset: 866
    00000364: 	movq	%r13, %rsi
    00000367: 	movq	%r14, %rdi
    0000036a: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 874
.Ltmp344:
    0000036f: 	movq	%r12, %rax
    00000372: 	subq	%r13, %rax
    00000375: 	cmpq	$0x8, %rax
    00000379: 	jle	.Ltmp351 # Offset: 889
    0000037f: 	movsd	(%r13), %xmm1
    00000385: 	movq	%r12, %rbp
    00000388: 	movq	%r13, %rax
    0000038b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp356:
    00000390: 	movsd	-0x8(%rbp), %xmm2
    00000395: 	leaq	-0x8(%rbp), %rdx
    00000399: 	comisd	%xmm1, %xmm2
    0000039d: 	ja	.Ltmp352 # Offset: 925
    0000039f: 	cmpq	%rax, %rdx
    000003a2: 	jbe	.Ltmp353 # Offset: 930
    000003a8: 	movsd	(%rax), %xmm0
    000003ac: 	comisd	%xmm0, %xmm1
    000003b0: 	jbe	.Ltmp354 # Offset: 944
    000003b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp355:
    000003b8: 	movsd	0x8(%rax), %xmm0
    000003bd: 	addq	$0x8, %rax
    000003c1: 	comisd	%xmm0, %xmm1
    000003c5: 	ja	.Ltmp355 # Offset: 965
    000003c7: 	cmpq	%rax, %rdx
    000003ca: 	jbe	.Ltmp353 # Offset: 970
.Ltmp354:
    000003d0: 	movsd	%xmm0, (%rdx)
    000003d4: 	movsd	%xmm2, (%rax)
.Ltmp352:
    000003d8: 	movq	%rdx, %rbp
    000003db: 	jmp	.Ltmp356 # Offset: 987
.Ltmp335:
    000003dd: 	movq	%rbp, %rax
    000003e0: 	subq	%r12, %rax
    000003e3: 	cmpq	$0x8, %rax
    000003e7: 	jle	.Ltmp357 # Offset: 999
    000003ed: 	movsd	(%r12), %xmm1
    000003f3: 	movq	%rbp, %r13
    000003f6: 	movq	%r12, %rax
    000003f9: 	nopl	(%rax) # Size: 7
.Ltmp362:
    00000400: 	movsd	-0x8(%r13), %xmm2
    00000406: 	leaq	-0x8(%r13), %rdx
    0000040a: 	comisd	%xmm1, %xmm2
    0000040e: 	ja	.Ltmp358 # Offset: 1038
    00000410: 	cmpq	%rax, %rdx
    00000413: 	jbe	.Ltmp359 # Offset: 1043
    00000415: 	movsd	(%rax), %xmm0
    00000419: 	comisd	%xmm0, %xmm1
    0000041d: 	jbe	.Ltmp360 # Offset: 1053
    0000041f: 	nop # Size: 1
.Ltmp361:
    00000420: 	movsd	0x8(%rax), %xmm0
    00000425: 	addq	$0x8, %rax
    00000429: 	comisd	%xmm0, %xmm1
    0000042d: 	ja	.Ltmp361 # Offset: 1069
    0000042f: 	cmpq	%rax, %rdx
    00000432: 	jbe	.Ltmp359 # Offset: 1074
.Ltmp360:
    00000434: 	movsd	%xmm0, (%rdx)
    00000438: 	movsd	%xmm2, (%rax)
.Ltmp358:
    0000043c: 	movq	%rdx, %r13
    0000043f: 	jmp	.Ltmp362 # Offset: 1087
.Ltmp359:
    00000441: 	movq	%r13, %rax
    00000444: 	subq	%r12, %rax
    00000447: 	cmpq	$0x8, %rax
    0000044b: 	jle	.Ltmp363 # Offset: 1099
    0000044d: 	movq	%r13, %rsi
    00000450: 	movq	%r12, %rdi
    00000453: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1107
.Ltmp363:
    00000458: 	movq	%rbp, %rax
    0000045b: 	subq	%r13, %rax
    0000045e: 	cmpq	$0x8, %rax
    00000462: 	jle	.Ltmp357 # Offset: 1122
    00000464: 	movq	%rbp, %rsi
    00000467: 	movq	%r13, %rdi
    0000046a: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1130
.Ltmp357:
    0000046f: 	movq	%rbx, %rax
    00000472: 	subq	%rbp, %rax
    00000475: 	cmpq	$0x8, %rax
    00000479: 	jle	.Ltmp316 # Offset: 1145
    0000047f: 	movsd	(%rbp), %xmm1
    00000484: 	movq	%rbx, %r13
    00000487: 	movq	%rbp, %rax
    0000048a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp368:
    00000490: 	movsd	-0x8(%r13), %xmm2
    00000496: 	leaq	-0x8(%r13), %rdx
    0000049a: 	comisd	%xmm1, %xmm2
    0000049e: 	ja	.Ltmp364 # Offset: 1182
    000004a0: 	cmpq	%rax, %rdx
    000004a3: 	jbe	.Ltmp365 # Offset: 1187
    000004a9: 	movsd	(%rax), %xmm0
    000004ad: 	comisd	%xmm0, %xmm1
    000004b1: 	jbe	.Ltmp366 # Offset: 1201
    000004b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp367:
    000004b8: 	movsd	0x8(%rax), %xmm0
    000004bd: 	addq	$0x8, %rax
    000004c1: 	comisd	%xmm0, %xmm1
    000004c5: 	ja	.Ltmp367 # Offset: 1221
    000004c7: 	cmpq	%rax, %rdx
    000004ca: 	jbe	.Ltmp365 # Offset: 1226
.Ltmp366:
    000004d0: 	movsd	%xmm0, (%rdx)
    000004d4: 	movsd	%xmm2, (%rax)
.Ltmp364:
    000004d8: 	movq	%rdx, %r13
    000004db: 	jmp	.Ltmp368 # Offset: 1243
.Ltmp330:
    000004dd: 	movq	%r14, %rax
    000004e0: 	subq	%r13, %rax
    000004e3: 	cmpq	$0x8, %rax
    000004e7: 	jle	.Ltmp369 # Offset: 1255
    000004ed: 	movsd	(%r13), %xmm1
    000004f3: 	movq	%r14, %r15
    000004f6: 	movq	%r13, %rax
    000004f9: 	nopl	(%rax) # Size: 7
.Ltmp374:
    00000500: 	movsd	-0x8(%r15), %xmm2
    00000506: 	leaq	-0x8(%r15), %rdx
    0000050a: 	comisd	%xmm1, %xmm2
    0000050e: 	ja	.Ltmp370 # Offset: 1294
    00000510: 	cmpq	%rax, %rdx
    00000513: 	jbe	.Ltmp371 # Offset: 1299
    00000515: 	movsd	(%rax), %xmm0
    00000519: 	comisd	%xmm0, %xmm1
    0000051d: 	jbe	.Ltmp372 # Offset: 1309
    0000051f: 	nop # Size: 1
.Ltmp373:
    00000520: 	movsd	0x8(%rax), %xmm0
    00000525: 	addq	$0x8, %rax
    00000529: 	comisd	%xmm0, %xmm1
    0000052d: 	ja	.Ltmp373 # Offset: 1325
    0000052f: 	cmpq	%rax, %rdx
    00000532: 	jbe	.Ltmp371 # Offset: 1330
.Ltmp372:
    00000534: 	movsd	%xmm0, (%rdx)
    00000538: 	movsd	%xmm2, (%rax)
.Ltmp370:
    0000053c: 	movq	%rdx, %r15
    0000053f: 	jmp	.Ltmp374 # Offset: 1343
.Ltmp371:
    00000541: 	movq	%r15, %rax
    00000544: 	subq	%r13, %rax
    00000547: 	cmpq	$0x8, %rax
    0000054b: 	jle	.Ltmp375 # Offset: 1355
    0000054d: 	movq	%r15, %rsi
    00000550: 	movq	%r13, %rdi
    00000553: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1363
.Ltmp375:
    00000558: 	movq	%r14, %rax
    0000055b: 	subq	%r15, %rax
    0000055e: 	cmpq	$0x8, %rax
    00000562: 	jle	.Ltmp369 # Offset: 1378
    00000564: 	movq	%r14, %rsi
    00000567: 	movq	%r15, %rdi
    0000056a: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1386
.Ltmp369:
    0000056f: 	movq	%r12, %rax
    00000572: 	subq	%r14, %rax
    00000575: 	cmpq	$0x8, %rax
    00000579: 	jle	.Ltmp376 # Offset: 1401
    0000057f: 	movsd	(%r14), %xmm1
    00000584: 	movq	%r12, %r13
    00000587: 	movq	%r14, %rax
    0000058a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp381:
    00000590: 	movsd	-0x8(%r13), %xmm2
    00000596: 	leaq	-0x8(%r13), %rdx
    0000059a: 	comisd	%xmm1, %xmm2
    0000059e: 	ja	.Ltmp377 # Offset: 1438
    000005a0: 	cmpq	%rax, %rdx
    000005a3: 	jbe	.Ltmp378 # Offset: 1443
    000005a9: 	movsd	(%rax), %xmm0
    000005ad: 	comisd	%xmm0, %xmm1
    000005b1: 	jbe	.Ltmp379 # Offset: 1457
    000005b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp380:
    000005b8: 	movsd	0x8(%rax), %xmm0
    000005bd: 	addq	$0x8, %rax
    000005c1: 	comisd	%xmm0, %xmm1
    000005c5: 	ja	.Ltmp380 # Offset: 1477
    000005c7: 	cmpq	%rax, %rdx
    000005ca: 	jbe	.Ltmp378 # Offset: 1482
.Ltmp379:
    000005d0: 	movsd	%xmm0, (%rdx)
    000005d4: 	movsd	%xmm2, (%rax)
.Ltmp377:
    000005d8: 	movq	%rdx, %r13
    000005db: 	jmp	.Ltmp381 # Offset: 1499
.Ltmp325:
    000005dd: 	movq	%r13, %rax
    000005e0: 	subq	%r12, %rax
    000005e3: 	cmpq	$0x8, %rax
    000005e7: 	jle	.Ltmp382 # Offset: 1511
    000005ed: 	movsd	(%r12), %xmm1
    000005f3: 	movq	%r13, %r14
    000005f6: 	movq	%r12, %rax
    000005f9: 	nopl	(%rax) # Size: 7
.Ltmp387:
    00000600: 	movsd	-0x8(%r14), %xmm2
    00000606: 	leaq	-0x8(%r14), %rdx
    0000060a: 	comisd	%xmm1, %xmm2
    0000060e: 	ja	.Ltmp383 # Offset: 1550
    00000610: 	cmpq	%rax, %rdx
    00000613: 	jbe	.Ltmp384 # Offset: 1555
    00000615: 	movsd	(%rax), %xmm0
    00000619: 	comisd	%xmm0, %xmm1
    0000061d: 	jbe	.Ltmp385 # Offset: 1565
    0000061f: 	nop # Size: 1
.Ltmp386:
    00000620: 	movsd	0x8(%rax), %xmm0
    00000625: 	addq	$0x8, %rax
    00000629: 	comisd	%xmm0, %xmm1
    0000062d: 	ja	.Ltmp386 # Offset: 1581
    0000062f: 	cmpq	%rax, %rdx
    00000632: 	jbe	.Ltmp384 # Offset: 1586
.Ltmp385:
    00000634: 	movsd	%xmm0, (%rdx)
    00000638: 	movsd	%xmm2, (%rax)
.Ltmp383:
    0000063c: 	movq	%rdx, %r14
    0000063f: 	jmp	.Ltmp387 # Offset: 1599
.Ltmp384:
    00000641: 	movq	%r14, %rax
    00000644: 	subq	%r12, %rax
    00000647: 	cmpq	$0x8, %rax
    0000064b: 	jle	.Ltmp388 # Offset: 1611
    0000064d: 	movq	%r14, %rsi
    00000650: 	movq	%r12, %rdi
    00000653: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1619
.Ltmp388:
    00000658: 	movq	%r13, %rax
    0000065b: 	subq	%r14, %rax
    0000065e: 	cmpq	$0x8, %rax
    00000662: 	jle	.Ltmp382 # Offset: 1634
    00000664: 	movq	%r13, %rsi
    00000667: 	movq	%r14, %rdi
    0000066a: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1642
.Ltmp382:
    0000066f: 	movq	%rbp, %rax
    00000672: 	subq	%r13, %rax
    00000675: 	cmpq	$0x8, %rax
    00000679: 	jle	.Ltmp308 # Offset: 1657
    0000067f: 	movsd	(%r13), %xmm1
    00000685: 	movq	%rbp, %r12
    00000688: 	movq	%r13, %rax
    0000068b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp393:
    00000690: 	movsd	-0x8(%r12), %xmm2
    00000697: 	leaq	-0x8(%r12), %rdx
    0000069c: 	comisd	%xmm1, %xmm2
    000006a0: 	ja	.Ltmp389 # Offset: 1696
    000006a2: 	cmpq	%rax, %rdx
    000006a5: 	jbe	.Ltmp390 # Offset: 1701
    000006ab: 	movsd	(%rax), %xmm0
    000006af: 	comisd	%xmm0, %xmm1
    000006b3: 	jbe	.Ltmp391 # Offset: 1715
    000006b5: 	nopl	(%rax) # Size: 3
.Ltmp392:
    000006b8: 	movsd	0x8(%rax), %xmm0
    000006bd: 	addq	$0x8, %rax
    000006c1: 	comisd	%xmm0, %xmm1
    000006c5: 	ja	.Ltmp392 # Offset: 1733
    000006c7: 	cmpq	%rax, %rdx
    000006ca: 	jbe	.Ltmp390 # Offset: 1738
.Ltmp391:
    000006cc: 	movsd	%xmm0, (%rdx)
    000006d0: 	movsd	%xmm2, (%rax)
.Ltmp389:
    000006d4: 	movq	%rdx, %r12
    000006d7: 	jmp	.Ltmp393 # Offset: 1751
.Ltmp353:
    000006d9: 	movq	%rbp, %rax
    000006dc: 	subq	%r13, %rax
    000006df: 	cmpq	$0x8, %rax
    000006e3: 	jle	.Ltmp394 # Offset: 1763
    000006e5: 	movq	%rbp, %rsi
    000006e8: 	movq	%r13, %rdi
    000006eb: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1771
.Ltmp394:
    000006f0: 	movq	%r12, %rax
    000006f3: 	subq	%rbp, %rax
    000006f6: 	cmpq	$0x8, %rax
    000006fa: 	jle	.Ltmp351 # Offset: 1786
    00000700: 	movq	%r12, %rsi
    00000703: 	movq	%rbp, %rdi
    00000706: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1798
    0000070b: 	jmp	.Ltmp351 # Offset: 1803
.Ltmp365:
    00000710: 	movq	%r13, %rax
    00000713: 	subq	%rbp, %rax
    00000716: 	cmpq	$0x8, %rax
    0000071a: 	jle	.Ltmp395 # Offset: 1818
    00000720: 	movq	%r13, %rsi
    00000723: 	movq	%rbp, %rdi
    00000726: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1830
    0000072b: 	movq	%rbx, %rax
    0000072e: 	subq	%r13, %rax
    00000731: 	cmpq	$0x8, %rax
    00000735: 	jg	.Ltmp396 # Offset: 1845
    0000073b: 	jmp	.Ltmp316 # Offset: 1851
.Ltmp390:
    00000740: 	movq	%r12, %rax
    00000743: 	subq	%r13, %rax
    00000746: 	cmpq	$0x8, %rax
    0000074a: 	jle	.Ltmp397 # Offset: 1866
    0000074c: 	movq	%r12, %rsi
    0000074f: 	movq	%r13, %rdi
    00000752: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1874
.Ltmp397:
    00000757: 	movq	%rbp, %rax
    0000075a: 	subq	%r12, %rax
    0000075d: 	cmpq	$0x8, %rax
    00000761: 	jle	.Ltmp308 # Offset: 1889
    00000767: 	movq	%rbp, %rsi
    0000076a: 	movq	%r12, %rdi
    0000076d: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1901
    00000772: 	jmp	.Ltmp308 # Offset: 1906
.Ltmp378:
    00000777: 	movq	%r13, %rax
    0000077a: 	subq	%r14, %rax
    0000077d: 	cmpq	$0x8, %rax
    00000781: 	jle	.Ltmp398 # Offset: 1921
    00000783: 	movq	%r13, %rsi
    00000786: 	movq	%r14, %rdi
    00000789: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1929
.Ltmp398:
    0000078e: 	movq	%r12, %rax
    00000791: 	subq	%r13, %rax
    00000794: 	cmpq	$0x8, %rax
    00000798: 	jle	.Ltmp376 # Offset: 1944
    0000079e: 	movq	%r12, %rsi
    000007a1: 	movq	%r13, %rdi
    000007a4: 	callq	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # Offset: 1956
    000007a9: 	jmp	.Ltmp376 # Offset: 1961
.Ltmp395:
    000007ae: 	movq	%rbx, %rax
    000007b1: 	subq	%r13, %rax
    000007b4: 	cmpq	$0x8, %rax
    000007b8: 	jg	.Ltmp396 # Offset: 1976
    000007be: 	jmp	.Ltmp316 # Offset: 1982
DWARF CFI Instructions:
    <empty>
End of Function "_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1(*2)"

Binary Function "_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x4250
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x4250
  Section     : .text
  Orc Section : .local.text._Z10quicksort1IPdSt4lessIdEEvT_S3_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp399 # Offset: 14
    00000010: 	jmp	"_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_.part.0/1" # TAILCALL  # Offset: 16
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp399:
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z10quicksort1IPdSt4lessIdEEvT_S3_T0_"

Binary Function "_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1(*2)" after disassembly {
  All names   : _Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1
                _Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/functionobjects.cpp/1
  Number      : 40
  State       : disassembled
  Address     : 0x4270
  Size        : 0x7c3
  MaxSize     : 0x7d0
  Offset      : 0x4270
  Section     : .text
  Orc Section : .local.text._Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp493:
    00000014: 	movsd	(%r13), %xmm1
    0000001a: 	movq	%rbx, %rbp
    0000001d: 	movq	%r13, %rax
.Ltmp404:
    00000020: 	movsd	-0x8(%rbp), %xmm2
    00000025: 	leaq	-0x8(%rbp), %rdx
    00000029: 	comisd	%xmm1, %xmm2
    0000002d: 	ja	.Ltmp400 # Offset: 45
    0000002f: 	cmpq	%rax, %rdx
    00000032: 	jbe	.Ltmp401 # Offset: 50
    00000034: 	movsd	(%rax), %xmm0
    00000038: 	comisd	%xmm0, %xmm1
    0000003c: 	jbe	.Ltmp402 # Offset: 60
    0000003e: 	nop # Size: 2
.Ltmp403:
    00000040: 	movsd	0x8(%rax), %xmm0
    00000045: 	addq	$0x8, %rax
    00000049: 	comisd	%xmm0, %xmm1
    0000004d: 	ja	.Ltmp403 # Offset: 77
    0000004f: 	cmpq	%rax, %rdx
    00000052: 	jbe	.Ltmp401 # Offset: 82
.Ltmp402:
    00000054: 	movsd	%xmm0, (%rdx)
    00000058: 	movsd	%xmm2, (%rax)
.Ltmp400:
    0000005c: 	movq	%rdx, %rbp
    0000005f: 	jmp	.Ltmp404 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp401:
    00000068: 	movq	%rbp, %rax
    0000006b: 	subq	%r13, %rax
    0000006e: 	cmpq	$0x8, %rax
    00000072: 	jle	.Ltmp405 # Offset: 114
    00000074: 	movsd	(%r13), %xmm1
    0000007a: 	movq	%rbp, %r12
    0000007d: 	movq	%r13, %rax
.Ltmp410:
    00000080: 	comisd	%xmm1, %xmm2
    00000084: 	leaq	-0x8(%r12), %rdx
    00000089: 	ja	.Ltmp406 # Offset: 137
    0000008b: 	cmpq	%rax, %rdx
    0000008e: 	jbe	.Ltmp407 # Offset: 142
    00000090: 	movsd	(%rax), %xmm0
    00000094: 	comisd	%xmm0, %xmm1
    00000098: 	jbe	.Ltmp408 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp409:
    000000a0: 	movsd	0x8(%rax), %xmm0
    000000a5: 	addq	$0x8, %rax
    000000a9: 	comisd	%xmm0, %xmm1
    000000ad: 	ja	.Ltmp409 # Offset: 173
    000000af: 	cmpq	%rax, %rdx
    000000b2: 	jbe	.Ltmp407 # Offset: 178
.Ltmp408:
    000000b4: 	movsd	%xmm0, (%rdx)
    000000b8: 	movsd	%xmm2, (%rax)
.Ltmp406:
    000000bc: 	movsd	-0x8(%rdx), %xmm2
    000000c1: 	movq	%rdx, %r12
    000000c4: 	jmp	.Ltmp410 # Offset: 196
.Ltmp407:
    000000c6: 	movq	%r12, %rax
    000000c9: 	subq	%r13, %rax
    000000cc: 	cmpq	$0x8, %rax
    000000d0: 	jg	.Ltmp411 # Offset: 208
.Ltmp473:
    000000d6: 	movq	%rbp, %rax
    000000d9: 	subq	%r12, %rax
    000000dc: 	cmpq	$0x8, %rax
    000000e0: 	jg	.Ltmp412 # Offset: 224
.Ltmp405:
    000000e6: 	movq	%rbx, %rax
    000000e9: 	subq	%rbp, %rax
    000000ec: 	cmpq	$0x8, %rax
    000000f0: 	jle	.Ltmp413 # Offset: 240
    000000f2: 	movsd	(%rbp), %xmm1
    000000f7: 	movq	%rbx, %r12
    000000fa: 	movq	%rbp, %rax
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp418:
    00000100: 	movsd	-0x8(%r12), %xmm2
    00000107: 	leaq	-0x8(%r12), %rdx
    0000010c: 	comisd	%xmm1, %xmm2
    00000110: 	ja	.Ltmp414 # Offset: 272
    00000112: 	cmpq	%rax, %rdx
    00000115: 	jbe	.Ltmp415 # Offset: 277
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	comisd	%xmm0, %xmm1
    0000011f: 	jbe	.Ltmp416 # Offset: 287
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp417:
    00000128: 	movsd	0x8(%rax), %xmm0
    0000012d: 	addq	$0x8, %rax
    00000131: 	comisd	%xmm0, %xmm1
    00000135: 	ja	.Ltmp417 # Offset: 309
    00000137: 	cmpq	%rax, %rdx
    0000013a: 	jbe	.Ltmp415 # Offset: 314
.Ltmp416:
    0000013c: 	movsd	%xmm0, (%rdx)
    00000140: 	movsd	%xmm2, (%rax)
.Ltmp414:
    00000144: 	movq	%rdx, %r12
    00000147: 	jmp	.Ltmp418 # Offset: 327
.Ltmp415:
    00000149: 	movq	%r12, %rax
    0000014c: 	subq	%rbp, %rax
    0000014f: 	cmpq	$0x8, %rax
    00000153: 	jg	.Ltmp419 # Offset: 339
.Ltmp448:
    00000159: 	movq	%rbx, %rax
    0000015c: 	subq	%r12, %rax
    0000015f: 	cmpq	$0x8, %rax
    00000163: 	jg	.Ltmp420 # Offset: 355
.Ltmp413:
    00000169: 	addq	$0x8, %rsp
    0000016d: 	popq	%rbx
    0000016e: 	popq	%rbp
    0000016f: 	popq	%r12
    00000171: 	popq	%r13
    00000173: 	popq	%r14
    00000175: 	popq	%r15
    00000177: 	retq # Offset: 375
.Ltmp412:
    00000178: 	movsd	(%r12), %xmm1
    0000017e: 	movq	%rbp, %r13
    00000181: 	movq	%r12, %rax
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp425:
    00000188: 	movsd	-0x8(%r13), %xmm2
    0000018e: 	leaq	-0x8(%r13), %rdx
    00000192: 	comisd	%xmm1, %xmm2
    00000196: 	ja	.Ltmp421 # Offset: 406
    00000198: 	cmpq	%rax, %rdx
    0000019b: 	jbe	.Ltmp422 # Offset: 411
    000001a1: 	movsd	(%rax), %xmm0
    000001a5: 	comisd	%xmm0, %xmm1
    000001a9: 	jbe	.Ltmp423 # Offset: 425
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp424:
    000001b0: 	movsd	0x8(%rax), %xmm0
    000001b5: 	addq	$0x8, %rax
    000001b9: 	comisd	%xmm0, %xmm1
    000001bd: 	ja	.Ltmp424 # Offset: 445
    000001bf: 	cmpq	%rax, %rdx
    000001c2: 	jbe	.Ltmp422 # Offset: 450
.Ltmp423:
    000001c8: 	movsd	%xmm0, (%rdx)
    000001cc: 	movsd	%xmm2, (%rax)
.Ltmp421:
    000001d0: 	movq	%rdx, %r13
    000001d3: 	jmp	.Ltmp425 # Offset: 467
.Ltmp411:
    000001d5: 	movsd	(%r13), %xmm1
    000001db: 	movq	%r12, %r14
    000001de: 	movq	%r13, %rax
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp430:
    000001e8: 	comisd	%xmm1, %xmm2
    000001ec: 	leaq	-0x8(%r14), %rdx
    000001f0: 	ja	.Ltmp426 # Offset: 496
    000001f2: 	cmpq	%rax, %rdx
    000001f5: 	jbe	.Ltmp427 # Offset: 501
    000001fb: 	movsd	(%rax), %xmm0
    000001ff: 	comisd	%xmm0, %xmm1
    00000203: 	jbe	.Ltmp428 # Offset: 515
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp429:
    00000208: 	movsd	0x8(%rax), %xmm0
    0000020d: 	addq	$0x8, %rax
    00000211: 	comisd	%xmm0, %xmm1
    00000215: 	ja	.Ltmp429 # Offset: 533
    00000217: 	cmpq	%rax, %rdx
    0000021a: 	jbe	.Ltmp427 # Offset: 538
.Ltmp428:
    00000220: 	movsd	%xmm0, (%rdx)
    00000224: 	movsd	%xmm2, (%rax)
.Ltmp426:
    00000228: 	movsd	-0x8(%rdx), %xmm2
    0000022d: 	movq	%rdx, %r14
    00000230: 	jmp	.Ltmp430 # Offset: 560
.Ltmp420:
    00000232: 	movsd	(%r12), %xmm1
    00000238: 	movq	%rbx, %rbp
    0000023b: 	movq	%r12, %rax
    0000023e: 	nop # Size: 2
.Ltmp435:
    00000240: 	movsd	-0x8(%rbp), %xmm2
    00000245: 	leaq	-0x8(%rbp), %rdx
    00000249: 	comisd	%xmm1, %xmm2
    0000024d: 	ja	.Ltmp431 # Offset: 589
    0000024f: 	cmpq	%rax, %rdx
    00000252: 	jbe	.Ltmp432 # Offset: 594
    00000258: 	movsd	(%rax), %xmm0
    0000025c: 	comisd	%xmm0, %xmm1
    00000260: 	jbe	.Ltmp433 # Offset: 608
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp434:
    00000268: 	movsd	0x8(%rax), %xmm0
    0000026d: 	addq	$0x8, %rax
    00000271: 	comisd	%xmm0, %xmm1
    00000275: 	ja	.Ltmp434 # Offset: 629
    00000277: 	cmpq	%rax, %rdx
    0000027a: 	jbe	.Ltmp432 # Offset: 634
.Ltmp433:
    00000280: 	movsd	%xmm0, (%rdx)
    00000284: 	movsd	%xmm2, (%rax)
.Ltmp431:
    00000288: 	movq	%rdx, %rbp
    0000028b: 	jmp	.Ltmp435 # Offset: 651
.Ltmp419:
    0000028d: 	movsd	(%rbp), %xmm1
    00000292: 	movq	%r12, %r13
    00000295: 	movq	%rbp, %rax
    00000298: 	nopl	(%rax,%rax) # Size: 8
.Ltmp440:
    000002a0: 	comisd	%xmm1, %xmm2
    000002a4: 	leaq	-0x8(%r13), %rdx
    000002a8: 	ja	.Ltmp436 # Offset: 680
    000002aa: 	cmpq	%rax, %rdx
    000002ad: 	jbe	.Ltmp437 # Offset: 685
    000002af: 	movsd	(%rax), %xmm0
    000002b3: 	comisd	%xmm0, %xmm1
    000002b7: 	jbe	.Ltmp438 # Offset: 695
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp439:
    000002c0: 	movsd	0x8(%rax), %xmm0
    000002c5: 	addq	$0x8, %rax
    000002c9: 	comisd	%xmm0, %xmm1
    000002cd: 	ja	.Ltmp439 # Offset: 717
    000002cf: 	cmpq	%rax, %rdx
    000002d2: 	jbe	.Ltmp437 # Offset: 722
.Ltmp438:
    000002d4: 	movsd	%xmm0, (%rdx)
    000002d8: 	movsd	%xmm2, (%rax)
.Ltmp436:
    000002dc: 	movsd	-0x8(%rdx), %xmm2
    000002e1: 	movq	%rdx, %r13
    000002e4: 	jmp	.Ltmp440 # Offset: 740
.Ltmp437:
    000002e6: 	movq	%r13, %rax
    000002e9: 	subq	%rbp, %rax
    000002ec: 	cmpq	$0x8, %rax
    000002f0: 	jle	.Ltmp441 # Offset: 752
    000002f2: 	movsd	(%rbp), %xmm1
    000002f7: 	movq	%r13, %r14
    000002fa: 	movq	%rbp, %rax
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp446:
    00000300: 	movsd	-0x8(%r14), %xmm2
    00000306: 	leaq	-0x8(%r14), %rdx
    0000030a: 	comisd	%xmm1, %xmm2
    0000030e: 	ja	.Ltmp442 # Offset: 782
    00000310: 	cmpq	%rax, %rdx
    00000313: 	jbe	.Ltmp443 # Offset: 787
    00000315: 	movsd	(%rax), %xmm0
    00000319: 	comisd	%xmm0, %xmm1
    0000031d: 	jbe	.Ltmp444 # Offset: 797
    0000031f: 	nop # Size: 1
.Ltmp445:
    00000320: 	movsd	0x8(%rax), %xmm0
    00000325: 	addq	$0x8, %rax
    00000329: 	comisd	%xmm0, %xmm1
    0000032d: 	ja	.Ltmp445 # Offset: 813
    0000032f: 	cmpq	%rax, %rdx
    00000332: 	jbe	.Ltmp443 # Offset: 818
.Ltmp444:
    00000334: 	movsd	%xmm0, (%rdx)
    00000338: 	movsd	%xmm2, (%rax)
.Ltmp442:
    0000033c: 	movq	%rdx, %r14
    0000033f: 	jmp	.Ltmp446 # Offset: 831
.Ltmp443:
    00000341: 	movq	%r14, %rax
    00000344: 	subq	%rbp, %rax
    00000347: 	cmpq	$0x8, %rax
    0000034b: 	jle	.Ltmp447 # Offset: 843
    0000034d: 	movq	%r14, %rsi
    00000350: 	movq	%rbp, %rdi
    00000353: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 851
.Ltmp447:
    00000358: 	movq	%r13, %rax
    0000035b: 	subq	%r14, %rax
    0000035e: 	cmpq	$0x8, %rax
    00000362: 	jle	.Ltmp441 # Offset: 866
    00000364: 	movq	%r13, %rsi
    00000367: 	movq	%r14, %rdi
    0000036a: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 874
.Ltmp441:
    0000036f: 	movq	%r12, %rax
    00000372: 	subq	%r13, %rax
    00000375: 	cmpq	$0x8, %rax
    00000379: 	jle	.Ltmp448 # Offset: 889
    0000037f: 	movsd	(%r13), %xmm1
    00000385: 	movq	%r12, %rbp
    00000388: 	movq	%r13, %rax
    0000038b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp453:
    00000390: 	movsd	-0x8(%rbp), %xmm2
    00000395: 	leaq	-0x8(%rbp), %rdx
    00000399: 	comisd	%xmm1, %xmm2
    0000039d: 	ja	.Ltmp449 # Offset: 925
    0000039f: 	cmpq	%rax, %rdx
    000003a2: 	jbe	.Ltmp450 # Offset: 930
    000003a8: 	movsd	(%rax), %xmm0
    000003ac: 	comisd	%xmm0, %xmm1
    000003b0: 	jbe	.Ltmp451 # Offset: 944
    000003b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp452:
    000003b8: 	movsd	0x8(%rax), %xmm0
    000003bd: 	addq	$0x8, %rax
    000003c1: 	comisd	%xmm0, %xmm1
    000003c5: 	ja	.Ltmp452 # Offset: 965
    000003c7: 	cmpq	%rax, %rdx
    000003ca: 	jbe	.Ltmp450 # Offset: 970
.Ltmp451:
    000003d0: 	movsd	%xmm0, (%rdx)
    000003d4: 	movsd	%xmm2, (%rax)
.Ltmp449:
    000003d8: 	movq	%rdx, %rbp
    000003db: 	jmp	.Ltmp453 # Offset: 987
.Ltmp432:
    000003dd: 	movq	%rbp, %rax
    000003e0: 	subq	%r12, %rax
    000003e3: 	cmpq	$0x8, %rax
    000003e7: 	jle	.Ltmp454 # Offset: 999
    000003ed: 	movsd	(%r12), %xmm1
    000003f3: 	movq	%rbp, %r13
    000003f6: 	movq	%r12, %rax
    000003f9: 	nopl	(%rax) # Size: 7
.Ltmp459:
    00000400: 	movsd	-0x8(%r13), %xmm2
    00000406: 	leaq	-0x8(%r13), %rdx
    0000040a: 	comisd	%xmm1, %xmm2
    0000040e: 	ja	.Ltmp455 # Offset: 1038
    00000410: 	cmpq	%rax, %rdx
    00000413: 	jbe	.Ltmp456 # Offset: 1043
    00000415: 	movsd	(%rax), %xmm0
    00000419: 	comisd	%xmm0, %xmm1
    0000041d: 	jbe	.Ltmp457 # Offset: 1053
    0000041f: 	nop # Size: 1
.Ltmp458:
    00000420: 	movsd	0x8(%rax), %xmm0
    00000425: 	addq	$0x8, %rax
    00000429: 	comisd	%xmm0, %xmm1
    0000042d: 	ja	.Ltmp458 # Offset: 1069
    0000042f: 	cmpq	%rax, %rdx
    00000432: 	jbe	.Ltmp456 # Offset: 1074
.Ltmp457:
    00000434: 	movsd	%xmm0, (%rdx)
    00000438: 	movsd	%xmm2, (%rax)
.Ltmp455:
    0000043c: 	movq	%rdx, %r13
    0000043f: 	jmp	.Ltmp459 # Offset: 1087
.Ltmp456:
    00000441: 	movq	%r13, %rax
    00000444: 	subq	%r12, %rax
    00000447: 	cmpq	$0x8, %rax
    0000044b: 	jle	.Ltmp460 # Offset: 1099
    0000044d: 	movq	%r13, %rsi
    00000450: 	movq	%r12, %rdi
    00000453: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1107
.Ltmp460:
    00000458: 	movq	%rbp, %rax
    0000045b: 	subq	%r13, %rax
    0000045e: 	cmpq	$0x8, %rax
    00000462: 	jle	.Ltmp454 # Offset: 1122
    00000464: 	movq	%rbp, %rsi
    00000467: 	movq	%r13, %rdi
    0000046a: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1130
.Ltmp454:
    0000046f: 	movq	%rbx, %rax
    00000472: 	subq	%rbp, %rax
    00000475: 	cmpq	$0x8, %rax
    00000479: 	jle	.Ltmp413 # Offset: 1145
    0000047f: 	movsd	(%rbp), %xmm1
    00000484: 	movq	%rbx, %r13
    00000487: 	movq	%rbp, %rax
    0000048a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp465:
    00000490: 	movsd	-0x8(%r13), %xmm2
    00000496: 	leaq	-0x8(%r13), %rdx
    0000049a: 	comisd	%xmm1, %xmm2
    0000049e: 	ja	.Ltmp461 # Offset: 1182
    000004a0: 	cmpq	%rax, %rdx
    000004a3: 	jbe	.Ltmp462 # Offset: 1187
    000004a9: 	movsd	(%rax), %xmm0
    000004ad: 	comisd	%xmm0, %xmm1
    000004b1: 	jbe	.Ltmp463 # Offset: 1201
    000004b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp464:
    000004b8: 	movsd	0x8(%rax), %xmm0
    000004bd: 	addq	$0x8, %rax
    000004c1: 	comisd	%xmm0, %xmm1
    000004c5: 	ja	.Ltmp464 # Offset: 1221
    000004c7: 	cmpq	%rax, %rdx
    000004ca: 	jbe	.Ltmp462 # Offset: 1226
.Ltmp463:
    000004d0: 	movsd	%xmm0, (%rdx)
    000004d4: 	movsd	%xmm2, (%rax)
.Ltmp461:
    000004d8: 	movq	%rdx, %r13
    000004db: 	jmp	.Ltmp465 # Offset: 1243
.Ltmp427:
    000004dd: 	movq	%r14, %rax
    000004e0: 	subq	%r13, %rax
    000004e3: 	cmpq	$0x8, %rax
    000004e7: 	jle	.Ltmp466 # Offset: 1255
    000004ed: 	movsd	(%r13), %xmm1
    000004f3: 	movq	%r14, %r15
    000004f6: 	movq	%r13, %rax
    000004f9: 	nopl	(%rax) # Size: 7
.Ltmp471:
    00000500: 	movsd	-0x8(%r15), %xmm2
    00000506: 	leaq	-0x8(%r15), %rdx
    0000050a: 	comisd	%xmm1, %xmm2
    0000050e: 	ja	.Ltmp467 # Offset: 1294
    00000510: 	cmpq	%rax, %rdx
    00000513: 	jbe	.Ltmp468 # Offset: 1299
    00000515: 	movsd	(%rax), %xmm0
    00000519: 	comisd	%xmm0, %xmm1
    0000051d: 	jbe	.Ltmp469 # Offset: 1309
    0000051f: 	nop # Size: 1
.Ltmp470:
    00000520: 	movsd	0x8(%rax), %xmm0
    00000525: 	addq	$0x8, %rax
    00000529: 	comisd	%xmm0, %xmm1
    0000052d: 	ja	.Ltmp470 # Offset: 1325
    0000052f: 	cmpq	%rax, %rdx
    00000532: 	jbe	.Ltmp468 # Offset: 1330
.Ltmp469:
    00000534: 	movsd	%xmm0, (%rdx)
    00000538: 	movsd	%xmm2, (%rax)
.Ltmp467:
    0000053c: 	movq	%rdx, %r15
    0000053f: 	jmp	.Ltmp471 # Offset: 1343
.Ltmp468:
    00000541: 	movq	%r15, %rax
    00000544: 	subq	%r13, %rax
    00000547: 	cmpq	$0x8, %rax
    0000054b: 	jle	.Ltmp472 # Offset: 1355
    0000054d: 	movq	%r15, %rsi
    00000550: 	movq	%r13, %rdi
    00000553: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1363
.Ltmp472:
    00000558: 	movq	%r14, %rax
    0000055b: 	subq	%r15, %rax
    0000055e: 	cmpq	$0x8, %rax
    00000562: 	jle	.Ltmp466 # Offset: 1378
    00000564: 	movq	%r14, %rsi
    00000567: 	movq	%r15, %rdi
    0000056a: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1386
.Ltmp466:
    0000056f: 	movq	%r12, %rax
    00000572: 	subq	%r14, %rax
    00000575: 	cmpq	$0x8, %rax
    00000579: 	jle	.Ltmp473 # Offset: 1401
    0000057f: 	movsd	(%r14), %xmm1
    00000584: 	movq	%r12, %r13
    00000587: 	movq	%r14, %rax
    0000058a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp478:
    00000590: 	movsd	-0x8(%r13), %xmm2
    00000596: 	leaq	-0x8(%r13), %rdx
    0000059a: 	comisd	%xmm1, %xmm2
    0000059e: 	ja	.Ltmp474 # Offset: 1438
    000005a0: 	cmpq	%rax, %rdx
    000005a3: 	jbe	.Ltmp475 # Offset: 1443
    000005a9: 	movsd	(%rax), %xmm0
    000005ad: 	comisd	%xmm0, %xmm1
    000005b1: 	jbe	.Ltmp476 # Offset: 1457
    000005b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp477:
    000005b8: 	movsd	0x8(%rax), %xmm0
    000005bd: 	addq	$0x8, %rax
    000005c1: 	comisd	%xmm0, %xmm1
    000005c5: 	ja	.Ltmp477 # Offset: 1477
    000005c7: 	cmpq	%rax, %rdx
    000005ca: 	jbe	.Ltmp475 # Offset: 1482
.Ltmp476:
    000005d0: 	movsd	%xmm0, (%rdx)
    000005d4: 	movsd	%xmm2, (%rax)
.Ltmp474:
    000005d8: 	movq	%rdx, %r13
    000005db: 	jmp	.Ltmp478 # Offset: 1499
.Ltmp422:
    000005dd: 	movq	%r13, %rax
    000005e0: 	subq	%r12, %rax
    000005e3: 	cmpq	$0x8, %rax
    000005e7: 	jle	.Ltmp479 # Offset: 1511
    000005ed: 	movsd	(%r12), %xmm1
    000005f3: 	movq	%r13, %r14
    000005f6: 	movq	%r12, %rax
    000005f9: 	nopl	(%rax) # Size: 7
.Ltmp484:
    00000600: 	movsd	-0x8(%r14), %xmm2
    00000606: 	leaq	-0x8(%r14), %rdx
    0000060a: 	comisd	%xmm1, %xmm2
    0000060e: 	ja	.Ltmp480 # Offset: 1550
    00000610: 	cmpq	%rax, %rdx
    00000613: 	jbe	.Ltmp481 # Offset: 1555
    00000615: 	movsd	(%rax), %xmm0
    00000619: 	comisd	%xmm0, %xmm1
    0000061d: 	jbe	.Ltmp482 # Offset: 1565
    0000061f: 	nop # Size: 1
.Ltmp483:
    00000620: 	movsd	0x8(%rax), %xmm0
    00000625: 	addq	$0x8, %rax
    00000629: 	comisd	%xmm0, %xmm1
    0000062d: 	ja	.Ltmp483 # Offset: 1581
    0000062f: 	cmpq	%rax, %rdx
    00000632: 	jbe	.Ltmp481 # Offset: 1586
.Ltmp482:
    00000634: 	movsd	%xmm0, (%rdx)
    00000638: 	movsd	%xmm2, (%rax)
.Ltmp480:
    0000063c: 	movq	%rdx, %r14
    0000063f: 	jmp	.Ltmp484 # Offset: 1599
.Ltmp481:
    00000641: 	movq	%r14, %rax
    00000644: 	subq	%r12, %rax
    00000647: 	cmpq	$0x8, %rax
    0000064b: 	jle	.Ltmp485 # Offset: 1611
    0000064d: 	movq	%r14, %rsi
    00000650: 	movq	%r12, %rdi
    00000653: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1619
.Ltmp485:
    00000658: 	movq	%r13, %rax
    0000065b: 	subq	%r14, %rax
    0000065e: 	cmpq	$0x8, %rax
    00000662: 	jle	.Ltmp479 # Offset: 1634
    00000664: 	movq	%r13, %rsi
    00000667: 	movq	%r14, %rdi
    0000066a: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1642
.Ltmp479:
    0000066f: 	movq	%rbp, %rax
    00000672: 	subq	%r13, %rax
    00000675: 	cmpq	$0x8, %rax
    00000679: 	jle	.Ltmp405 # Offset: 1657
    0000067f: 	movsd	(%r13), %xmm1
    00000685: 	movq	%rbp, %r12
    00000688: 	movq	%r13, %rax
    0000068b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp490:
    00000690: 	movsd	-0x8(%r12), %xmm2
    00000697: 	leaq	-0x8(%r12), %rdx
    0000069c: 	comisd	%xmm1, %xmm2
    000006a0: 	ja	.Ltmp486 # Offset: 1696
    000006a2: 	cmpq	%rax, %rdx
    000006a5: 	jbe	.Ltmp487 # Offset: 1701
    000006ab: 	movsd	(%rax), %xmm0
    000006af: 	comisd	%xmm0, %xmm1
    000006b3: 	jbe	.Ltmp488 # Offset: 1715
    000006b5: 	nopl	(%rax) # Size: 3
.Ltmp489:
    000006b8: 	movsd	0x8(%rax), %xmm0
    000006bd: 	addq	$0x8, %rax
    000006c1: 	comisd	%xmm0, %xmm1
    000006c5: 	ja	.Ltmp489 # Offset: 1733
    000006c7: 	cmpq	%rax, %rdx
    000006ca: 	jbe	.Ltmp487 # Offset: 1738
.Ltmp488:
    000006cc: 	movsd	%xmm0, (%rdx)
    000006d0: 	movsd	%xmm2, (%rax)
.Ltmp486:
    000006d4: 	movq	%rdx, %r12
    000006d7: 	jmp	.Ltmp490 # Offset: 1751
.Ltmp450:
    000006d9: 	movq	%rbp, %rax
    000006dc: 	subq	%r13, %rax
    000006df: 	cmpq	$0x8, %rax
    000006e3: 	jle	.Ltmp491 # Offset: 1763
    000006e5: 	movq	%rbp, %rsi
    000006e8: 	movq	%r13, %rdi
    000006eb: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1771
.Ltmp491:
    000006f0: 	movq	%r12, %rax
    000006f3: 	subq	%rbp, %rax
    000006f6: 	cmpq	$0x8, %rax
    000006fa: 	jle	.Ltmp448 # Offset: 1786
    00000700: 	movq	%r12, %rsi
    00000703: 	movq	%rbp, %rdi
    00000706: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1798
    0000070b: 	jmp	.Ltmp448 # Offset: 1803
.Ltmp462:
    00000710: 	movq	%r13, %rax
    00000713: 	subq	%rbp, %rax
    00000716: 	cmpq	$0x8, %rax
    0000071a: 	jle	.Ltmp492 # Offset: 1818
    00000720: 	movq	%r13, %rsi
    00000723: 	movq	%rbp, %rdi
    00000726: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1830
    0000072b: 	movq	%rbx, %rax
    0000072e: 	subq	%r13, %rax
    00000731: 	cmpq	$0x8, %rax
    00000735: 	jg	.Ltmp493 # Offset: 1845
    0000073b: 	jmp	.Ltmp413 # Offset: 1851
.Ltmp487:
    00000740: 	movq	%r12, %rax
    00000743: 	subq	%r13, %rax
    00000746: 	cmpq	$0x8, %rax
    0000074a: 	jle	.Ltmp494 # Offset: 1866
    0000074c: 	movq	%r12, %rsi
    0000074f: 	movq	%r13, %rdi
    00000752: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1874
.Ltmp494:
    00000757: 	movq	%rbp, %rax
    0000075a: 	subq	%r12, %rax
    0000075d: 	cmpq	$0x8, %rax
    00000761: 	jle	.Ltmp405 # Offset: 1889
    00000767: 	movq	%rbp, %rsi
    0000076a: 	movq	%r12, %rdi
    0000076d: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1901
    00000772: 	jmp	.Ltmp405 # Offset: 1906
.Ltmp475:
    00000777: 	movq	%r13, %rax
    0000077a: 	subq	%r14, %rax
    0000077d: 	cmpq	$0x8, %rax
    00000781: 	jle	.Ltmp495 # Offset: 1921
    00000783: 	movq	%r13, %rsi
    00000786: 	movq	%r14, %rdi
    00000789: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1929
.Ltmp495:
    0000078e: 	movq	%r12, %rax
    00000791: 	subq	%r13, %rax
    00000794: 	cmpq	$0x8, %rax
    00000798: 	jle	.Ltmp473 # Offset: 1944
    0000079e: 	movq	%r12, %rsi
    000007a1: 	movq	%r13, %rdi
    000007a4: 	callq	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # Offset: 1956
    000007a9: 	jmp	.Ltmp473 # Offset: 1961
.Ltmp492:
    000007ae: 	movq	%rbx, %rax
    000007b1: 	subq	%r13, %rax
    000007b4: 	cmpq	$0x8, %rax
    000007b8: 	jg	.Ltmp493 # Offset: 1976
    000007be: 	jmp	.Ltmp413 # Offset: 1982
DWARF CFI Instructions:
    <empty>
End of Function "_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1(*2)"

Binary Function "_Z10quicksort1IPd17less_than_functorEvT_S2_T0_" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x4a40
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x4a40
  Section     : .text
  Orc Section : .local.text._Z10quicksort1IPd17less_than_functorEvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp496 # Offset: 14
    00000010: 	jmp	"_Z10quicksort1IPd17less_than_functorEvT_S2_T0_.part.0/1" # TAILCALL  # Offset: 16
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp496:
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z10quicksort1IPd17less_than_functorEvT_S2_T0_"

Binary Function "_Z10plain_sortIPdEvT_S1_" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x4a60
  Size        : 0x1fe
  MaxSize     : 0x200
  Offset      : 0x4a60
  Section     : .text
  Orc Section : .local.text._Z10plain_sortIPdEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp497 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	movl	$0x3f, %edx
    00000014: 	pushq	%r13
    00000016: 	movq	%rsi, %r13
    00000019: 	pushq	%r12
    0000001b: 	movq	%rsi, %r12
    0000001e: 	pushq	%rbp
    0000001f: 	subq	%rdi, %r12
    00000022: 	movq	%rdi, %rbp
    00000025: 	pushq	%rbx
    00000026: 	movq	%r12, %rax
    00000029: 	leaq	0x8(%rbp), %rbx
    0000002d: 	sarq	$0x3, %rax
    00000031: 	subq	$0x10, %rsp
    00000035: 	bsrq	%rax, %rax
    00000039: 	xorq	$0x3f, %rax
    0000003d: 	subl	%eax, %edx
    0000003f: 	movslq	%edx, %rdx
    00000042: 	addq	%rdx, %rdx
    00000045: 	callq	"_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 69
    0000004a: 	cmpq	$0x80, %r12
    00000051: 	jle	.Ltmp498 # Offset: 81
    00000057: 	leaq	0x80(%rbp), %r12
    0000005e: 	movl	$0x8, %r14d
    00000064: 	jmp	.Ltmp499 # Offset: 100
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp502:
    00000070: 	cmpq	%rbx, %rbp
    00000073: 	je	.Ltmp500 # Offset: 115
    00000075: 	movq	%rbx, %rdx
    00000078: 	leaq	(%rbp,%r14), %rdi
    0000007d: 	movq	%rbp, %rsi
    00000080: 	movsd	%xmm1, 0x8(%rsp)
    00000086: 	subq	%rbp, %rdx
    00000089: 	callq	memmove@PLT # Offset: 137
    0000008e: 	movsd	0x8(%rsp), %xmm1
.Ltmp500:
    00000094: 	addq	$0x8, %rbx
    00000098: 	movsd	%xmm1, (%rbp)
    0000009d: 	cmpq	%rbx, %r12
    000000a0: 	je	.Ltmp501 # Offset: 160
.Ltmp499:
    000000a2: 	movsd	(%rbx), %xmm1
    000000a6: 	movsd	(%rbp), %xmm0
    000000ab: 	comisd	%xmm1, %xmm0
    000000af: 	ja	.Ltmp502 # Offset: 175
    000000b1: 	movsd	-0x8(%rbx), %xmm0
    000000b6: 	leaq	-0x8(%rbx), %rax
    000000ba: 	comisd	%xmm1, %xmm0
    000000be: 	jbe	.Ltmp503 # Offset: 190
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp504:
    000000c8: 	movsd	%xmm0, 0x8(%rax)
    000000cd: 	movq	%rax, %rdx
    000000d0: 	movsd	-0x8(%rax), %xmm0
    000000d5: 	subq	$0x8, %rax
    000000d9: 	comisd	%xmm1, %xmm0
    000000dd: 	ja	.Ltmp504 # Offset: 221
.Ltmp516:
    000000df: 	addq	$0x8, %rbx
    000000e3: 	movsd	%xmm1, (%rdx)
    000000e7: 	cmpq	%rbx, %r12
    000000ea: 	jne	.Ltmp499 # Offset: 234
.Ltmp501:
    000000ec: 	cmpq	%r12, %r13
    000000ef: 	je	.Ltmp505 # Offset: 239
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp508:
    000000f8: 	movsd	(%r12), %xmm1
    000000fe: 	movsd	-0x8(%r12), %xmm0
    00000105: 	leaq	-0x8(%r12), %rax
    0000010a: 	comisd	%xmm1, %xmm0
    0000010e: 	jbe	.Ltmp506 # Offset: 270
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp507:
    00000118: 	movsd	%xmm0, 0x8(%rax)
    0000011d: 	movq	%rax, %rdx
    00000120: 	movsd	-0x8(%rax), %xmm0
    00000125: 	subq	$0x8, %rax
    00000129: 	comisd	%xmm1, %xmm0
    0000012d: 	ja	.Ltmp507 # Offset: 301
    0000012f: 	addq	$0x8, %r12
    00000133: 	movsd	%xmm1, (%rdx)
    00000137: 	cmpq	%r12, %r13
    0000013a: 	jne	.Ltmp508 # Offset: 314
.Ltmp505:
    0000013c: 	addq	$0x10, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp498:
    00000150: 	cmpq	%rbx, %r13
    00000153: 	je	.Ltmp505 # Offset: 339
    00000155: 	movl	$0x8, %r12d
    0000015b: 	jmp	.Ltmp509 # Offset: 347
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp511:
    00000160: 	cmpq	%rbx, %rbp
    00000163: 	je	.Ltmp510 # Offset: 355
    00000165: 	movq	%rbx, %rdx
    00000168: 	leaq	(%rbp,%r12), %rdi
    0000016d: 	movq	%rbp, %rsi
    00000170: 	movsd	%xmm1, 0x8(%rsp)
    00000176: 	subq	%rbp, %rdx
    00000179: 	callq	memmove@PLT # Offset: 377
    0000017e: 	movsd	0x8(%rsp), %xmm1
.Ltmp510:
    00000184: 	movsd	%xmm1, (%rbp)
.Ltmp514:
    00000189: 	addq	$0x8, %rbx
    0000018d: 	cmpq	%rbx, %r13
    00000190: 	je	.Ltmp505 # Offset: 400
.Ltmp509:
    00000192: 	movsd	(%rbx), %xmm1
    00000196: 	movsd	(%rbp), %xmm0
    0000019b: 	comisd	%xmm1, %xmm0
    0000019f: 	ja	.Ltmp511 # Offset: 415
    000001a1: 	movsd	-0x8(%rbx), %xmm0
    000001a6: 	leaq	-0x8(%rbx), %rax
    000001aa: 	comisd	%xmm1, %xmm0
    000001ae: 	jbe	.Ltmp512 # Offset: 430
.Ltmp513:
    000001b0: 	movsd	%xmm0, 0x8(%rax)
    000001b5: 	movq	%rax, %rdx
    000001b8: 	movsd	-0x8(%rax), %xmm0
    000001bd: 	subq	$0x8, %rax
    000001c1: 	comisd	%xmm1, %xmm0
    000001c5: 	ja	.Ltmp513 # Offset: 453
.Ltmp515:
    000001c7: 	movsd	%xmm1, (%rdx)
    000001cb: 	jmp	.Ltmp514 # Offset: 459
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp497:
    000001d0: 	retq # Offset: 464
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp506:
    000001d8: 	movq	%r12, %rdx
    000001db: 	addq	$0x8, %r12
    000001df: 	movsd	%xmm1, (%rdx)
    000001e3: 	cmpq	%r12, %r13
    000001e6: 	jne	.Ltmp508 # Offset: 486
    000001ec: 	jmp	.Ltmp505 # Offset: 492
.Ltmp512:
    000001f1: 	movq	%rbx, %rdx
    000001f4: 	jmp	.Ltmp515 # Offset: 500
.Ltmp503:
    000001f6: 	movq	%rbx, %rdx
    000001f9: 	jmp	.Ltmp516 # Offset: 505
DWARF CFI Instructions:
    <empty>
End of Function "_Z10plain_sortIPdEvT_S1_"

Binary Function "_Z10quicksort2IPdXadL_Z19less_than_function2ddEEEvT_S1_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x4c60
  Size        : 0x4a0
  MaxSize     : 0x4a0
  Offset      : 0x4c60
  Section     : .text
  Orc Section : .local.text._Z10quicksort2IPdXadL_Z19less_than_function2ddEEEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, 0x18(%rsp)
    0000001d: 	cmpq	$0x8, %rax
    00000021: 	jle	.Ltmp517 # Offset: 33
.Ltmp529:
    00000023: 	movsd	(%rdi), %xmm2
    00000027: 	movq	0x18(%rsp), %r13
    0000002c: 	movq	%rdi, %rax
.Ltmp522:
    0000002f: 	movsd	-0x8(%r13), %xmm0
    00000035: 	leaq	-0x8(%r13), %rdx
    00000039: 	comisd	%xmm2, %xmm0
    0000003d: 	ja	.Ltmp518 # Offset: 61
    0000003f: 	cmpq	%rdx, %rax
    00000042: 	jae	.Ltmp519 # Offset: 66
    00000044: 	movsd	(%rax), %xmm1
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp520 # Offset: 76
.Ltmp521:
    0000004e: 	movsd	0x8(%rax), %xmm1
    00000053: 	addq	$0x8, %rax
    00000057: 	comisd	%xmm1, %xmm2
    0000005b: 	ja	.Ltmp521 # Offset: 91
    0000005d: 	cmpq	%rax, %rdx
    00000060: 	jbe	.Ltmp519 # Offset: 96
.Ltmp520:
    00000062: 	movsd	%xmm1, (%rdx)
    00000066: 	movsd	%xmm0, (%rax)
.Ltmp518:
    0000006a: 	movq	%rdx, %r13
    0000006d: 	jmp	.Ltmp522 # Offset: 109
.Ltmp517:
    0000006f: 	addq	$0x28, %rsp
    00000073: 	popq	%rbx
    00000074: 	popq	%rbp
    00000075: 	popq	%r12
    00000077: 	popq	%r13
    00000079: 	popq	%r14
    0000007b: 	popq	%r15
    0000007d: 	retq # Offset: 125
.Ltmp519:
    0000007e: 	movq	%r13, %rax
    00000081: 	subq	%rdi, %rax
    00000084: 	cmpq	$0x8, %rax
    00000088: 	jle	.Ltmp523 # Offset: 136
.Ltmp579:
    0000008a: 	movsd	(%rdi), %xmm2
    0000008e: 	movq	%r13, %r14
    00000091: 	movq	%rdi, %rax
.Ltmp528:
    00000094: 	comisd	%xmm2, %xmm0
    00000098: 	leaq	-0x8(%r14), %rdx
    0000009c: 	ja	.Ltmp524 # Offset: 156
    0000009e: 	cmpq	%rax, %rdx
    000000a1: 	jbe	.Ltmp525 # Offset: 161
    000000a3: 	movsd	(%rax), %xmm1
    000000a7: 	comisd	%xmm1, %xmm2
    000000ab: 	jbe	.Ltmp526 # Offset: 171
.Ltmp527:
    000000ad: 	movsd	0x8(%rax), %xmm1
    000000b2: 	addq	$0x8, %rax
    000000b6: 	comisd	%xmm1, %xmm2
    000000ba: 	ja	.Ltmp527 # Offset: 186
    000000bc: 	cmpq	%rax, %rdx
    000000bf: 	jbe	.Ltmp525 # Offset: 191
.Ltmp526:
    000000c1: 	movsd	%xmm1, (%rdx)
    000000c5: 	movsd	%xmm0, (%rax)
.Ltmp524:
    000000c9: 	movsd	-0x8(%rdx), %xmm0
    000000ce: 	movq	%rdx, %r14
    000000d1: 	jmp	.Ltmp528 # Offset: 209
.Ltmp523:
    000000d3: 	movq	0x18(%rsp), %rax
    000000d8: 	subq	%r13, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jle	.Ltmp517 # Offset: 223
    000000e1: 	movq	%r13, %rdi
    000000e4: 	jmp	.Ltmp529 # Offset: 228
.Ltmp525:
    000000e9: 	movq	%r14, %rax
    000000ec: 	subq	%rdi, %rax
    000000ef: 	cmpq	$0x8, %rax
    000000f3: 	jle	.Ltmp530 # Offset: 243
.Ltmp578:
    000000f9: 	movsd	(%rdi), %xmm2
    000000fd: 	movq	%r14, %r15
    00000100: 	movq	%rdi, %rax
.Ltmp535:
    00000103: 	comisd	%xmm2, %xmm0
    00000107: 	leaq	-0x8(%r15), %rdx
    0000010b: 	ja	.Ltmp531 # Offset: 267
    0000010d: 	cmpq	%rax, %rdx
    00000110: 	jbe	.Ltmp532 # Offset: 272
    00000112: 	movsd	(%rax), %xmm1
    00000116: 	comisd	%xmm1, %xmm2
    0000011a: 	jbe	.Ltmp533 # Offset: 282
.Ltmp534:
    0000011c: 	movsd	0x8(%rax), %xmm1
    00000121: 	addq	$0x8, %rax
    00000125: 	comisd	%xmm1, %xmm2
    00000129: 	ja	.Ltmp534 # Offset: 297
    0000012b: 	cmpq	%rax, %rdx
    0000012e: 	jbe	.Ltmp532 # Offset: 302
.Ltmp533:
    00000130: 	movsd	%xmm1, (%rdx)
    00000134: 	movsd	%xmm0, (%rax)
.Ltmp531:
    00000138: 	movsd	-0x8(%rdx), %xmm0
    0000013d: 	movq	%rdx, %r15
    00000140: 	jmp	.Ltmp535 # Offset: 320
.Ltmp532:
    00000142: 	movq	%r15, %rax
    00000145: 	subq	%rdi, %rax
    00000148: 	cmpq	$0x8, %rax
    0000014c: 	jle	.Ltmp536 # Offset: 332
.Ltmp577:
    00000152: 	movsd	(%rdi), %xmm2
    00000156: 	movq	%r15, %rbx
    00000159: 	movq	%rdi, %rax
.Ltmp541:
    0000015c: 	comisd	%xmm2, %xmm0
    00000160: 	leaq	-0x8(%rbx), %rcx
    00000164: 	ja	.Ltmp537 # Offset: 356
    00000166: 	cmpq	%rax, %rcx
    00000169: 	jbe	.Ltmp538 # Offset: 361
    0000016b: 	movsd	(%rax), %xmm1
    0000016f: 	comisd	%xmm1, %xmm2
    00000173: 	jbe	.Ltmp539 # Offset: 371
.Ltmp540:
    00000175: 	movsd	0x8(%rax), %xmm1
    0000017a: 	addq	$0x8, %rax
    0000017e: 	comisd	%xmm1, %xmm2
    00000182: 	ja	.Ltmp540 # Offset: 386
    00000184: 	cmpq	%rax, %rcx
    00000187: 	jbe	.Ltmp538 # Offset: 391
.Ltmp539:
    00000189: 	movsd	%xmm1, (%rcx)
    0000018d: 	movsd	%xmm0, (%rax)
.Ltmp537:
    00000191: 	movsd	-0x8(%rcx), %xmm0
    00000196: 	movq	%rcx, %rbx
    00000199: 	jmp	.Ltmp541 # Offset: 409
.Ltmp538:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	subq	%rdi, %rax
    000001a1: 	cmpq	$0x8, %rax
    000001a5: 	jle	.Ltmp542 # Offset: 421
.Ltmp576:
    000001ab: 	movsd	(%rdi), %xmm2
    000001af: 	movq	%rbx, %rcx
    000001b2: 	movq	%rdi, %rax
.Ltmp547:
    000001b5: 	comisd	%xmm2, %xmm0
    000001b9: 	leaq	-0x8(%rcx), %rsi
    000001bd: 	ja	.Ltmp543 # Offset: 445
    000001bf: 	cmpq	%rax, %rsi
    000001c2: 	jbe	.Ltmp544 # Offset: 450
    000001c4: 	movsd	(%rax), %xmm1
    000001c8: 	comisd	%xmm1, %xmm2
    000001cc: 	jbe	.Ltmp545 # Offset: 460
.Ltmp546:
    000001ce: 	movsd	0x8(%rax), %xmm1
    000001d3: 	addq	$0x8, %rax
    000001d7: 	comisd	%xmm1, %xmm2
    000001db: 	ja	.Ltmp546 # Offset: 475
    000001dd: 	cmpq	%rax, %rsi
    000001e0: 	jbe	.Ltmp544 # Offset: 480
.Ltmp545:
    000001e2: 	movsd	%xmm1, (%rsi)
    000001e6: 	movsd	%xmm0, (%rax)
.Ltmp543:
    000001ea: 	movsd	-0x8(%rsi), %xmm0
    000001ef: 	movq	%rsi, %rcx
    000001f2: 	jmp	.Ltmp547 # Offset: 498
.Ltmp544:
    000001f4: 	movq	%rcx, %rax
    000001f7: 	subq	%rdi, %rax
    000001fa: 	cmpq	$0x8, %rax
    000001fe: 	jle	.Ltmp548 # Offset: 510
.Ltmp575:
    00000204: 	movsd	(%rdi), %xmm2
    00000208: 	movq	%rcx, %r12
    0000020b: 	movq	%rdi, %rax
.Ltmp553:
    0000020e: 	comisd	%xmm2, %xmm0
    00000212: 	leaq	-0x8(%r12), %rsi
    00000217: 	ja	.Ltmp549 # Offset: 535
    00000219: 	cmpq	%rax, %rsi
    0000021c: 	jbe	.Ltmp550 # Offset: 540
    0000021e: 	movsd	(%rax), %xmm1
    00000222: 	comisd	%xmm1, %xmm2
    00000226: 	jbe	.Ltmp551 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp552:
    00000230: 	movsd	0x8(%rax), %xmm1
    00000235: 	addq	$0x8, %rax
    00000239: 	comisd	%xmm1, %xmm2
    0000023d: 	ja	.Ltmp552 # Offset: 573
    0000023f: 	cmpq	%rax, %rsi
    00000242: 	jbe	.Ltmp550 # Offset: 578
.Ltmp551:
    00000244: 	movsd	%xmm1, (%rsi)
    00000248: 	movsd	%xmm0, (%rax)
.Ltmp549:
    0000024c: 	movsd	-0x8(%rsi), %xmm0
    00000251: 	movq	%rsi, %r12
    00000254: 	jmp	.Ltmp553 # Offset: 596
.Ltmp550:
    00000256: 	movq	%r12, %rax
    00000259: 	subq	%rdi, %rax
    0000025c: 	cmpq	$0x8, %rax
    00000260: 	jle	.Ltmp554 # Offset: 608
.Ltmp574:
    00000266: 	movsd	(%rdi), %xmm2
    0000026a: 	movq	%r12, %r8
    0000026d: 	movq	%rdi, %rax
.Ltmp572:
    00000270: 	comisd	%xmm2, %xmm0
    00000274: 	leaq	-0x8(%r8), %rsi
    00000278: 	ja	.Ltmp555 # Offset: 632
    0000027e: 	cmpq	%rax, %rsi
    00000281: 	jbe	.Ltmp556 # Offset: 641
    00000283: 	movsd	(%rax), %xmm1
    00000287: 	comisd	%xmm1, %xmm2
    0000028b: 	jbe	.Ltmp557 # Offset: 651
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp558:
    00000298: 	movsd	0x8(%rax), %xmm1
    0000029d: 	addq	$0x8, %rax
    000002a1: 	comisd	%xmm1, %xmm2
    000002a5: 	ja	.Ltmp558 # Offset: 677
    000002a7: 	cmpq	%rax, %rsi
    000002aa: 	ja	.Ltmp557 # Offset: 682
.Ltmp556:
    000002b0: 	movq	%r8, %rax
    000002b3: 	subq	%rdi, %rax
    000002b6: 	cmpq	$0x8, %rax
    000002ba: 	jle	.Ltmp559 # Offset: 698
.Ltmp571:
    000002c0: 	movsd	(%rdi), %xmm1
    000002c4: 	movq	%r8, %rbp
    000002c7: 	movq	%rdi, %rax
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp570:
    000002d0: 	comisd	%xmm1, %xmm0
    000002d4: 	leaq	-0x8(%rbp), %rsi
    000002d8: 	ja	.Ltmp560 # Offset: 728
    000002de: 	cmpq	%rax, %rsi
    000002e1: 	jbe	.Ltmp561 # Offset: 737
    000002e3: 	movsd	(%rax), %xmm2
    000002e7: 	comisd	%xmm2, %xmm1
    000002eb: 	jbe	.Ltmp562 # Offset: 747
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp563:
    000002f8: 	movsd	0x8(%rax), %xmm2
    000002fd: 	addq	$0x8, %rax
    00000301: 	comisd	%xmm2, %xmm1
    00000305: 	ja	.Ltmp563 # Offset: 773
    00000307: 	cmpq	%rax, %rsi
    0000030a: 	ja	.Ltmp562 # Offset: 778
.Ltmp561:
    00000310: 	movq	%rbp, %rax
    00000313: 	subq	%rdi, %rax
    00000316: 	cmpq	$0x8, %rax
    0000031a: 	jle	.Ltmp564 # Offset: 794
.Ltmp569:
    00000320: 	movsd	(%rdi), %xmm1
    00000324: 	movq	%rbp, %rsi
    00000327: 	movq	%rdi, %rax
    0000032a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp573:
    00000330: 	movsd	-0x8(%rsi), %xmm2
    00000335: 	leaq	-0x8(%rsi), %r9
    00000339: 	comisd	%xmm1, %xmm2
    0000033d: 	ja	.Ltmp565 # Offset: 829
    00000343: 	cmpq	%rax, %r9
    00000346: 	jbe	.Ltmp566 # Offset: 838
    00000348: 	movsd	(%rax), %xmm0
    0000034c: 	comisd	%xmm0, %xmm1
    00000350: 	jbe	.Ltmp567 # Offset: 848
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp568:
    00000360: 	movsd	0x8(%rax), %xmm0
    00000365: 	addq	$0x8, %rax
    00000369: 	comisd	%xmm0, %xmm1
    0000036d: 	ja	.Ltmp568 # Offset: 877
    0000036f: 	cmpq	%rax, %r9
    00000372: 	ja	.Ltmp567 # Offset: 882
.Ltmp566:
    00000374: 	movq	%r8, 0x10(%rsp)
    00000379: 	movq	%rcx, 0x8(%rsp)
    0000037e: 	movq	%rsi, (%rsp)
    00000382: 	callq	_Z10quicksort2IPdXadL_Z19less_than_function2ddEEEvT_S1_ # Offset: 898
    00000387: 	movq	(%rsp), %rsi
    0000038b: 	movq	%rbp, %rax
    0000038e: 	movq	0x8(%rsp), %rcx
    00000393: 	movq	0x10(%rsp), %r8
    00000398: 	subq	%rsi, %rax
    0000039b: 	cmpq	$0x8, %rax
    0000039f: 	jle	.Ltmp564 # Offset: 927
    000003a1: 	movq	%rsi, %rdi
    000003a4: 	jmp	.Ltmp569 # Offset: 932
.Ltmp562:
    000003a9: 	movsd	%xmm2, (%rsi)
    000003ad: 	movsd	%xmm0, (%rax)
.Ltmp560:
    000003b1: 	movsd	-0x8(%rsi), %xmm0
    000003b6: 	movq	%rsi, %rbp
    000003b9: 	jmp	.Ltmp570 # Offset: 953
.Ltmp564:
    000003be: 	movq	%r8, %rax
    000003c1: 	subq	%rbp, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp559 # Offset: 968
    000003ca: 	movsd	-0x8(%r8), %xmm0
    000003d0: 	movq	%rbp, %rdi
    000003d3: 	jmp	.Ltmp571 # Offset: 979
.Ltmp557:
    000003d8: 	movsd	%xmm1, (%rsi)
    000003dc: 	movsd	%xmm0, (%rax)
.Ltmp555:
    000003e0: 	movsd	-0x8(%rsi), %xmm0
    000003e5: 	movq	%rsi, %r8
    000003e8: 	jmp	.Ltmp572 # Offset: 1000
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp567:
    000003f0: 	movsd	%xmm0, (%r9)
    000003f5: 	movsd	%xmm2, (%rax)
.Ltmp565:
    000003f9: 	movq	%r9, %rsi
    000003fc: 	jmp	.Ltmp573 # Offset: 1020
.Ltmp559:
    00000401: 	movq	%r12, %rax
    00000404: 	subq	%r8, %rax
    00000407: 	cmpq	$0x8, %rax
    0000040b: 	jle	.Ltmp554 # Offset: 1035
    0000040d: 	movsd	-0x8(%r12), %xmm0
    00000414: 	movq	%r8, %rdi
    00000417: 	jmp	.Ltmp574 # Offset: 1047
.Ltmp554:
    0000041c: 	movq	%rcx, %rax
    0000041f: 	subq	%r12, %rax
    00000422: 	cmpq	$0x8, %rax
    00000426: 	jle	.Ltmp548 # Offset: 1062
    00000428: 	movsd	-0x8(%rcx), %xmm0
    0000042d: 	movq	%r12, %rdi
    00000430: 	jmp	.Ltmp575 # Offset: 1072
.Ltmp548:
    00000435: 	movq	%rbx, %rax
    00000438: 	subq	%rcx, %rax
    0000043b: 	cmpq	$0x8, %rax
    0000043f: 	jle	.Ltmp542 # Offset: 1087
    00000441: 	movsd	-0x8(%rbx), %xmm0
    00000446: 	movq	%rcx, %rdi
    00000449: 	jmp	.Ltmp576 # Offset: 1097
.Ltmp542:
    0000044e: 	movq	%r15, %rax
    00000451: 	subq	%rbx, %rax
    00000454: 	cmpq	$0x8, %rax
    00000458: 	jle	.Ltmp536 # Offset: 1112
    0000045a: 	movsd	-0x8(%r15), %xmm0
    00000460: 	movq	%rbx, %rdi
    00000463: 	jmp	.Ltmp577 # Offset: 1123
.Ltmp536:
    00000468: 	movq	%r14, %rax
    0000046b: 	subq	%r15, %rax
    0000046e: 	cmpq	$0x8, %rax
    00000472: 	jle	.Ltmp530 # Offset: 1138
    00000474: 	movsd	-0x8(%r14), %xmm0
    0000047a: 	movq	%r15, %rdi
    0000047d: 	jmp	.Ltmp578 # Offset: 1149
.Ltmp530:
    00000482: 	movq	%r13, %rax
    00000485: 	subq	%r14, %rax
    00000488: 	cmpq	$0x8, %rax
    0000048c: 	jle	.Ltmp523 # Offset: 1164
    00000492: 	movsd	-0x8(%r13), %xmm0
    00000498: 	movq	%r14, %rdi
    0000049b: 	jmp	.Ltmp579 # Offset: 1179
DWARF CFI Instructions:
    <empty>
End of Function "_Z10quicksort2IPdXadL_Z19less_than_function2ddEEEvT_S1_"

Binary Function "_ZN9benchmark9quicksortIPdEEvT_S2_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x5100
  Size        : 0x4a0
  MaxSize     : 0x4a0
  Offset      : 0x5100
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, 0x18(%rsp)
    0000001d: 	cmpq	$0x8, %rax
    00000021: 	jle	.Ltmp580 # Offset: 33
.Ltmp592:
    00000023: 	movsd	(%rdi), %xmm2
    00000027: 	movq	0x18(%rsp), %r13
    0000002c: 	movq	%rdi, %rax
.Ltmp585:
    0000002f: 	movsd	-0x8(%r13), %xmm0
    00000035: 	leaq	-0x8(%r13), %rdx
    00000039: 	comisd	%xmm2, %xmm0
    0000003d: 	ja	.Ltmp581 # Offset: 61
    0000003f: 	cmpq	%rdx, %rax
    00000042: 	jae	.Ltmp582 # Offset: 66
    00000044: 	movsd	(%rax), %xmm1
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp583 # Offset: 76
.Ltmp584:
    0000004e: 	movsd	0x8(%rax), %xmm1
    00000053: 	addq	$0x8, %rax
    00000057: 	comisd	%xmm1, %xmm2
    0000005b: 	ja	.Ltmp584 # Offset: 91
    0000005d: 	cmpq	%rax, %rdx
    00000060: 	jbe	.Ltmp582 # Offset: 96
.Ltmp583:
    00000062: 	movsd	%xmm1, (%rdx)
    00000066: 	movsd	%xmm0, (%rax)
.Ltmp581:
    0000006a: 	movq	%rdx, %r13
    0000006d: 	jmp	.Ltmp585 # Offset: 109
.Ltmp580:
    0000006f: 	addq	$0x28, %rsp
    00000073: 	popq	%rbx
    00000074: 	popq	%rbp
    00000075: 	popq	%r12
    00000077: 	popq	%r13
    00000079: 	popq	%r14
    0000007b: 	popq	%r15
    0000007d: 	retq # Offset: 125
.Ltmp582:
    0000007e: 	movq	%r13, %rax
    00000081: 	subq	%rdi, %rax
    00000084: 	cmpq	$0x8, %rax
    00000088: 	jle	.Ltmp586 # Offset: 136
.Ltmp642:
    0000008a: 	movsd	(%rdi), %xmm2
    0000008e: 	movq	%r13, %r14
    00000091: 	movq	%rdi, %rax
.Ltmp591:
    00000094: 	comisd	%xmm2, %xmm0
    00000098: 	leaq	-0x8(%r14), %rdx
    0000009c: 	ja	.Ltmp587 # Offset: 156
    0000009e: 	cmpq	%rax, %rdx
    000000a1: 	jbe	.Ltmp588 # Offset: 161
    000000a3: 	movsd	(%rax), %xmm1
    000000a7: 	comisd	%xmm1, %xmm2
    000000ab: 	jbe	.Ltmp589 # Offset: 171
.Ltmp590:
    000000ad: 	movsd	0x8(%rax), %xmm1
    000000b2: 	addq	$0x8, %rax
    000000b6: 	comisd	%xmm1, %xmm2
    000000ba: 	ja	.Ltmp590 # Offset: 186
    000000bc: 	cmpq	%rax, %rdx
    000000bf: 	jbe	.Ltmp588 # Offset: 191
.Ltmp589:
    000000c1: 	movsd	%xmm1, (%rdx)
    000000c5: 	movsd	%xmm0, (%rax)
.Ltmp587:
    000000c9: 	movsd	-0x8(%rdx), %xmm0
    000000ce: 	movq	%rdx, %r14
    000000d1: 	jmp	.Ltmp591 # Offset: 209
.Ltmp586:
    000000d3: 	movq	0x18(%rsp), %rax
    000000d8: 	subq	%r13, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jle	.Ltmp580 # Offset: 223
    000000e1: 	movq	%r13, %rdi
    000000e4: 	jmp	.Ltmp592 # Offset: 228
.Ltmp588:
    000000e9: 	movq	%r14, %rax
    000000ec: 	subq	%rdi, %rax
    000000ef: 	cmpq	$0x8, %rax
    000000f3: 	jle	.Ltmp593 # Offset: 243
.Ltmp641:
    000000f9: 	movsd	(%rdi), %xmm2
    000000fd: 	movq	%r14, %r15
    00000100: 	movq	%rdi, %rax
.Ltmp598:
    00000103: 	comisd	%xmm2, %xmm0
    00000107: 	leaq	-0x8(%r15), %rdx
    0000010b: 	ja	.Ltmp594 # Offset: 267
    0000010d: 	cmpq	%rax, %rdx
    00000110: 	jbe	.Ltmp595 # Offset: 272
    00000112: 	movsd	(%rax), %xmm1
    00000116: 	comisd	%xmm1, %xmm2
    0000011a: 	jbe	.Ltmp596 # Offset: 282
.Ltmp597:
    0000011c: 	movsd	0x8(%rax), %xmm1
    00000121: 	addq	$0x8, %rax
    00000125: 	comisd	%xmm1, %xmm2
    00000129: 	ja	.Ltmp597 # Offset: 297
    0000012b: 	cmpq	%rax, %rdx
    0000012e: 	jbe	.Ltmp595 # Offset: 302
.Ltmp596:
    00000130: 	movsd	%xmm1, (%rdx)
    00000134: 	movsd	%xmm0, (%rax)
.Ltmp594:
    00000138: 	movsd	-0x8(%rdx), %xmm0
    0000013d: 	movq	%rdx, %r15
    00000140: 	jmp	.Ltmp598 # Offset: 320
.Ltmp595:
    00000142: 	movq	%r15, %rax
    00000145: 	subq	%rdi, %rax
    00000148: 	cmpq	$0x8, %rax
    0000014c: 	jle	.Ltmp599 # Offset: 332
.Ltmp640:
    00000152: 	movsd	(%rdi), %xmm2
    00000156: 	movq	%r15, %rbx
    00000159: 	movq	%rdi, %rax
.Ltmp604:
    0000015c: 	comisd	%xmm2, %xmm0
    00000160: 	leaq	-0x8(%rbx), %rcx
    00000164: 	ja	.Ltmp600 # Offset: 356
    00000166: 	cmpq	%rax, %rcx
    00000169: 	jbe	.Ltmp601 # Offset: 361
    0000016b: 	movsd	(%rax), %xmm1
    0000016f: 	comisd	%xmm1, %xmm2
    00000173: 	jbe	.Ltmp602 # Offset: 371
.Ltmp603:
    00000175: 	movsd	0x8(%rax), %xmm1
    0000017a: 	addq	$0x8, %rax
    0000017e: 	comisd	%xmm1, %xmm2
    00000182: 	ja	.Ltmp603 # Offset: 386
    00000184: 	cmpq	%rax, %rcx
    00000187: 	jbe	.Ltmp601 # Offset: 391
.Ltmp602:
    00000189: 	movsd	%xmm1, (%rcx)
    0000018d: 	movsd	%xmm0, (%rax)
.Ltmp600:
    00000191: 	movsd	-0x8(%rcx), %xmm0
    00000196: 	movq	%rcx, %rbx
    00000199: 	jmp	.Ltmp604 # Offset: 409
.Ltmp601:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	subq	%rdi, %rax
    000001a1: 	cmpq	$0x8, %rax
    000001a5: 	jle	.Ltmp605 # Offset: 421
.Ltmp639:
    000001ab: 	movsd	(%rdi), %xmm2
    000001af: 	movq	%rbx, %rcx
    000001b2: 	movq	%rdi, %rax
.Ltmp610:
    000001b5: 	comisd	%xmm2, %xmm0
    000001b9: 	leaq	-0x8(%rcx), %rsi
    000001bd: 	ja	.Ltmp606 # Offset: 445
    000001bf: 	cmpq	%rax, %rsi
    000001c2: 	jbe	.Ltmp607 # Offset: 450
    000001c4: 	movsd	(%rax), %xmm1
    000001c8: 	comisd	%xmm1, %xmm2
    000001cc: 	jbe	.Ltmp608 # Offset: 460
.Ltmp609:
    000001ce: 	movsd	0x8(%rax), %xmm1
    000001d3: 	addq	$0x8, %rax
    000001d7: 	comisd	%xmm1, %xmm2
    000001db: 	ja	.Ltmp609 # Offset: 475
    000001dd: 	cmpq	%rax, %rsi
    000001e0: 	jbe	.Ltmp607 # Offset: 480
.Ltmp608:
    000001e2: 	movsd	%xmm1, (%rsi)
    000001e6: 	movsd	%xmm0, (%rax)
.Ltmp606:
    000001ea: 	movsd	-0x8(%rsi), %xmm0
    000001ef: 	movq	%rsi, %rcx
    000001f2: 	jmp	.Ltmp610 # Offset: 498
.Ltmp607:
    000001f4: 	movq	%rcx, %rax
    000001f7: 	subq	%rdi, %rax
    000001fa: 	cmpq	$0x8, %rax
    000001fe: 	jle	.Ltmp611 # Offset: 510
.Ltmp638:
    00000204: 	movsd	(%rdi), %xmm2
    00000208: 	movq	%rcx, %r12
    0000020b: 	movq	%rdi, %rax
.Ltmp616:
    0000020e: 	comisd	%xmm2, %xmm0
    00000212: 	leaq	-0x8(%r12), %rsi
    00000217: 	ja	.Ltmp612 # Offset: 535
    00000219: 	cmpq	%rax, %rsi
    0000021c: 	jbe	.Ltmp613 # Offset: 540
    0000021e: 	movsd	(%rax), %xmm1
    00000222: 	comisd	%xmm1, %xmm2
    00000226: 	jbe	.Ltmp614 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp615:
    00000230: 	movsd	0x8(%rax), %xmm1
    00000235: 	addq	$0x8, %rax
    00000239: 	comisd	%xmm1, %xmm2
    0000023d: 	ja	.Ltmp615 # Offset: 573
    0000023f: 	cmpq	%rax, %rsi
    00000242: 	jbe	.Ltmp613 # Offset: 578
.Ltmp614:
    00000244: 	movsd	%xmm1, (%rsi)
    00000248: 	movsd	%xmm0, (%rax)
.Ltmp612:
    0000024c: 	movsd	-0x8(%rsi), %xmm0
    00000251: 	movq	%rsi, %r12
    00000254: 	jmp	.Ltmp616 # Offset: 596
.Ltmp613:
    00000256: 	movq	%r12, %rax
    00000259: 	subq	%rdi, %rax
    0000025c: 	cmpq	$0x8, %rax
    00000260: 	jle	.Ltmp617 # Offset: 608
.Ltmp637:
    00000266: 	movsd	(%rdi), %xmm2
    0000026a: 	movq	%r12, %r8
    0000026d: 	movq	%rdi, %rax
.Ltmp635:
    00000270: 	comisd	%xmm2, %xmm0
    00000274: 	leaq	-0x8(%r8), %rsi
    00000278: 	ja	.Ltmp618 # Offset: 632
    0000027e: 	cmpq	%rax, %rsi
    00000281: 	jbe	.Ltmp619 # Offset: 641
    00000283: 	movsd	(%rax), %xmm1
    00000287: 	comisd	%xmm1, %xmm2
    0000028b: 	jbe	.Ltmp620 # Offset: 651
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp621:
    00000298: 	movsd	0x8(%rax), %xmm1
    0000029d: 	addq	$0x8, %rax
    000002a1: 	comisd	%xmm1, %xmm2
    000002a5: 	ja	.Ltmp621 # Offset: 677
    000002a7: 	cmpq	%rax, %rsi
    000002aa: 	ja	.Ltmp620 # Offset: 682
.Ltmp619:
    000002b0: 	movq	%r8, %rax
    000002b3: 	subq	%rdi, %rax
    000002b6: 	cmpq	$0x8, %rax
    000002ba: 	jle	.Ltmp622 # Offset: 698
.Ltmp634:
    000002c0: 	movsd	(%rdi), %xmm1
    000002c4: 	movq	%r8, %rbp
    000002c7: 	movq	%rdi, %rax
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp633:
    000002d0: 	comisd	%xmm1, %xmm0
    000002d4: 	leaq	-0x8(%rbp), %rsi
    000002d8: 	ja	.Ltmp623 # Offset: 728
    000002de: 	cmpq	%rax, %rsi
    000002e1: 	jbe	.Ltmp624 # Offset: 737
    000002e3: 	movsd	(%rax), %xmm2
    000002e7: 	comisd	%xmm2, %xmm1
    000002eb: 	jbe	.Ltmp625 # Offset: 747
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp626:
    000002f8: 	movsd	0x8(%rax), %xmm2
    000002fd: 	addq	$0x8, %rax
    00000301: 	comisd	%xmm2, %xmm1
    00000305: 	ja	.Ltmp626 # Offset: 773
    00000307: 	cmpq	%rax, %rsi
    0000030a: 	ja	.Ltmp625 # Offset: 778
.Ltmp624:
    00000310: 	movq	%rbp, %rax
    00000313: 	subq	%rdi, %rax
    00000316: 	cmpq	$0x8, %rax
    0000031a: 	jle	.Ltmp627 # Offset: 794
.Ltmp632:
    00000320: 	movsd	(%rdi), %xmm1
    00000324: 	movq	%rbp, %rsi
    00000327: 	movq	%rdi, %rax
    0000032a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp636:
    00000330: 	movsd	-0x8(%rsi), %xmm2
    00000335: 	leaq	-0x8(%rsi), %r9
    00000339: 	comisd	%xmm1, %xmm2
    0000033d: 	ja	.Ltmp628 # Offset: 829
    00000343: 	cmpq	%rax, %r9
    00000346: 	jbe	.Ltmp629 # Offset: 838
    00000348: 	movsd	(%rax), %xmm0
    0000034c: 	comisd	%xmm0, %xmm1
    00000350: 	jbe	.Ltmp630 # Offset: 848
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp631:
    00000360: 	movsd	0x8(%rax), %xmm0
    00000365: 	addq	$0x8, %rax
    00000369: 	comisd	%xmm0, %xmm1
    0000036d: 	ja	.Ltmp631 # Offset: 877
    0000036f: 	cmpq	%rax, %r9
    00000372: 	ja	.Ltmp630 # Offset: 882
.Ltmp629:
    00000374: 	movq	%r8, 0x10(%rsp)
    00000379: 	movq	%rcx, 0x8(%rsp)
    0000037e: 	movq	%rsi, (%rsp)
    00000382: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 898
    00000387: 	movq	(%rsp), %rsi
    0000038b: 	movq	%rbp, %rax
    0000038e: 	movq	0x8(%rsp), %rcx
    00000393: 	movq	0x10(%rsp), %r8
    00000398: 	subq	%rsi, %rax
    0000039b: 	cmpq	$0x8, %rax
    0000039f: 	jle	.Ltmp627 # Offset: 927
    000003a1: 	movq	%rsi, %rdi
    000003a4: 	jmp	.Ltmp632 # Offset: 932
.Ltmp625:
    000003a9: 	movsd	%xmm2, (%rsi)
    000003ad: 	movsd	%xmm0, (%rax)
.Ltmp623:
    000003b1: 	movsd	-0x8(%rsi), %xmm0
    000003b6: 	movq	%rsi, %rbp
    000003b9: 	jmp	.Ltmp633 # Offset: 953
.Ltmp627:
    000003be: 	movq	%r8, %rax
    000003c1: 	subq	%rbp, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp622 # Offset: 968
    000003ca: 	movsd	-0x8(%r8), %xmm0
    000003d0: 	movq	%rbp, %rdi
    000003d3: 	jmp	.Ltmp634 # Offset: 979
.Ltmp620:
    000003d8: 	movsd	%xmm1, (%rsi)
    000003dc: 	movsd	%xmm0, (%rax)
.Ltmp618:
    000003e0: 	movsd	-0x8(%rsi), %xmm0
    000003e5: 	movq	%rsi, %r8
    000003e8: 	jmp	.Ltmp635 # Offset: 1000
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp630:
    000003f0: 	movsd	%xmm0, (%r9)
    000003f5: 	movsd	%xmm2, (%rax)
.Ltmp628:
    000003f9: 	movq	%r9, %rsi
    000003fc: 	jmp	.Ltmp636 # Offset: 1020
.Ltmp622:
    00000401: 	movq	%r12, %rax
    00000404: 	subq	%r8, %rax
    00000407: 	cmpq	$0x8, %rax
    0000040b: 	jle	.Ltmp617 # Offset: 1035
    0000040d: 	movsd	-0x8(%r12), %xmm0
    00000414: 	movq	%r8, %rdi
    00000417: 	jmp	.Ltmp637 # Offset: 1047
.Ltmp617:
    0000041c: 	movq	%rcx, %rax
    0000041f: 	subq	%r12, %rax
    00000422: 	cmpq	$0x8, %rax
    00000426: 	jle	.Ltmp611 # Offset: 1062
    00000428: 	movsd	-0x8(%rcx), %xmm0
    0000042d: 	movq	%r12, %rdi
    00000430: 	jmp	.Ltmp638 # Offset: 1072
.Ltmp611:
    00000435: 	movq	%rbx, %rax
    00000438: 	subq	%rcx, %rax
    0000043b: 	cmpq	$0x8, %rax
    0000043f: 	jle	.Ltmp605 # Offset: 1087
    00000441: 	movsd	-0x8(%rbx), %xmm0
    00000446: 	movq	%rcx, %rdi
    00000449: 	jmp	.Ltmp639 # Offset: 1097
.Ltmp605:
    0000044e: 	movq	%r15, %rax
    00000451: 	subq	%rbx, %rax
    00000454: 	cmpq	$0x8, %rax
    00000458: 	jle	.Ltmp599 # Offset: 1112
    0000045a: 	movsd	-0x8(%r15), %xmm0
    00000460: 	movq	%rbx, %rdi
    00000463: 	jmp	.Ltmp640 # Offset: 1123
.Ltmp599:
    00000468: 	movq	%r14, %rax
    0000046b: 	subq	%r15, %rax
    0000046e: 	cmpq	$0x8, %rax
    00000472: 	jle	.Ltmp593 # Offset: 1138
    00000474: 	movsd	-0x8(%r14), %xmm0
    0000047a: 	movq	%r15, %rdi
    0000047d: 	jmp	.Ltmp641 # Offset: 1149
.Ltmp593:
    00000482: 	movq	%r13, %rax
    00000485: 	subq	%r14, %rax
    00000488: 	cmpq	$0x8, %rax
    0000048c: 	jle	.Ltmp586 # Offset: 1164
    00000492: 	movsd	-0x8(%r13), %xmm0
    00000498: 	movq	%r14, %rdi
    0000049b: 	jmp	.Ltmp642 # Offset: 1179
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPdEEvT_S2_"

Binary Function "_Z11TestOneSortIPdPFvS0_S0_EEvT_S3_iiT0_PKc" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x55a0
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x55a0
  Section     : .text
  Orc Section : .local.text._Z11TestOneSortIPdPFvS0_S0_EEvT_S3_iiT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r9, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movslq	%edx, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdi, 0x18(%rsp)
    00000025: 	movl	%ecx, 0xc(%rsp)
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movq	%rax, start_time(%rip)
    00000035: 	testl	%ebp, %ebp
    00000037: 	jle	.Ltmp643 # Offset: 55
    00000039: 	leaq	0x8(%r12), %rax
    0000003e: 	leaq	(,%rbx,8), %rbp
    00000046: 	xorl	%ebx, %ebx
    00000048: 	movq	%rax, 0x10(%rsp)
    0000004d: 	leaq	(%r12,%rbp), %r13
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp648:
    00000058: 	testq	%rbp, %rbp
    0000005b: 	je	.Ltmp644 # Offset: 91
    0000005d: 	movq	0x18(%rsp), %rsi
    00000062: 	movq	%rbp, %rdx
    00000065: 	movq	%r12, %rdi
    00000068: 	callq	memmove@PLT # Offset: 104
.Ltmp644:
    0000006d: 	movq	%r13, %rsi
    00000070: 	movq	%r12, %rdi
    00000073: 	callq	*%r14 # Offset: 115
    00000076: 	movq	0x10(%rsp), %rax
    0000007b: 	jmp	.Ltmp645 # Offset: 123
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp647:
    00000080: 	addq	$0x8, %rax
    00000084: 	movsd	-0x10(%rax), %xmm0
    00000089: 	comisd	-0x8(%rax), %xmm0
    0000008e: 	ja	.Ltmp646 # Offset: 142
.Ltmp645:
    00000090: 	cmpq	%rax, %r13
    00000093: 	jne	.Ltmp647 # Offset: 147
    00000095: 	addl	$0x1, %ebx
    00000098: 	cmpl	%ebx, 0xc(%rsp)
    0000009c: 	jne	.Ltmp648 # Offset: 156
.Ltmp643:
    0000009e: 	callq	clock@PLT # Offset: 158
    000000a3: 	pxor	%xmm0, %xmm0
    000000a7: 	movq	%r15, %rdi
    000000aa: 	movq	%rax, end_time(%rip)
    000000b1: 	subq	start_time(%rip), %rax
    000000b8: 	cvtsi2sd	%rax, %xmm0
    000000bd: 	divsd	DATAat0x84b0(%rip), %xmm0
    000000c5: 	addq	$0x28, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 211
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp646:
    000000e0: 	movq	%r15, %rdx
    000000e3: 	leaq	DATAat0x8447(%rip), %rsi
    000000ea: 	xorl	%eax, %eax
    000000ec: 	addl	$0x1, %ebx
    000000ef: 	movl	$0x1, %edi
    000000f4: 	callq	__printf_chk@PLT # Offset: 244
    000000f9: 	cmpl	%ebx, 0xc(%rsp)
    000000fd: 	jne	.Ltmp648 # Offset: 253
    00000103: 	jmp	.Ltmp643 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneSortIPdPFvS0_S0_EEvT_S3_iiT0_PKc"

Binary Function "_Z11TestOneSortIPdPFvS0_S0_PFbddEES2_EvT_S5_iiT0_T1_PKc" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x56b0
  Size        : 0x115
  MaxSize     : 0x120
  Offset      : 0x56b0
  Section     : .text
  Orc Section : .local.text._Z11TestOneSortIPdPFvS0_S0_PFbddEES2_EvT_S5_iiT0_T1_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r9, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%ecx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movslq	%edx, %rbx
    00000019: 	subq	$0x28, %rsp
    0000001d: 	movq	%rdi, 0x18(%rsp)
    00000022: 	movq	0x60(%rsp), %r15
    00000027: 	movl	%ecx, 0x4(%rsp)
    0000002b: 	movq	%r8, 0x8(%rsp)
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	testl	%ebp, %ebp
    0000003e: 	jle	.Ltmp649 # Offset: 62
    00000040: 	leaq	0x8(%r12), %rax
    00000045: 	leaq	(,%rbx,8), %rbp
    0000004d: 	xorl	%ebx, %ebx
    0000004f: 	movq	%rax, 0x10(%rsp)
    00000054: 	leaq	(%r12,%rbp), %r13
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp654:
    00000060: 	testq	%rbp, %rbp
    00000063: 	je	.Ltmp650 # Offset: 99
    00000065: 	movq	0x18(%rsp), %rsi
    0000006a: 	movq	%rbp, %rdx
    0000006d: 	movq	%r12, %rdi
    00000070: 	callq	memmove@PLT # Offset: 112
.Ltmp650:
    00000075: 	movq	0x8(%rsp), %rax
    0000007a: 	movq	%r14, %rdx
    0000007d: 	movq	%r13, %rsi
    00000080: 	movq	%r12, %rdi
    00000083: 	callq	*%rax # Offset: 131
    00000085: 	movq	0x10(%rsp), %rax
    0000008a: 	jmp	.Ltmp651 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp653:
    00000090: 	addq	$0x8, %rax
    00000094: 	movsd	-0x10(%rax), %xmm0
    00000099: 	comisd	-0x8(%rax), %xmm0
    0000009e: 	ja	.Ltmp652 # Offset: 158
.Ltmp651:
    000000a0: 	cmpq	%rax, %r13
    000000a3: 	jne	.Ltmp653 # Offset: 163
    000000a5: 	addl	$0x1, %ebx
    000000a8: 	cmpl	%ebx, 0x4(%rsp)
    000000ac: 	jne	.Ltmp654 # Offset: 172
.Ltmp649:
    000000ae: 	callq	clock@PLT # Offset: 174
    000000b3: 	pxor	%xmm0, %xmm0
    000000b7: 	movq	%r15, %rdi
    000000ba: 	movq	%rax, end_time(%rip)
    000000c1: 	subq	start_time(%rip), %rax
    000000c8: 	cvtsi2sd	%rax, %xmm0
    000000cd: 	divsd	DATAat0x84b0(%rip), %xmm0
    000000d5: 	addq	$0x28, %rsp
    000000d9: 	popq	%rbx
    000000da: 	popq	%rbp
    000000db: 	popq	%r12
    000000dd: 	popq	%r13
    000000df: 	popq	%r14
    000000e1: 	popq	%r15
    000000e3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 227
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp652:
    000000f0: 	movq	%r15, %rdx
    000000f3: 	leaq	DATAat0x8447(%rip), %rsi
    000000fa: 	xorl	%eax, %eax
    000000fc: 	addl	$0x1, %ebx
    000000ff: 	movl	$0x1, %edi
    00000104: 	callq	__printf_chk@PLT # Offset: 260
    00000109: 	cmpl	%ebx, 0x4(%rsp)
    0000010d: 	jne	.Ltmp654 # Offset: 269
    00000113: 	jmp	.Ltmp649 # Offset: 275
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneSortIPdPFvS0_S0_PFbddEES2_EvT_S5_iiT0_T1_PKc"

Binary Function "_Z10quicksort1IPdPFbddEEvT_S3_T0_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x57d0
  Size        : 0xca
  MaxSize     : 0xd0
  Offset      : 0x57d0
  Section     : .text
  Orc Section : .local.text._Z10quicksort1IPdPFbddEEvT_S3_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp655 # Offset: 14
    00000014: 	pushq	%r15
    00000016: 	pushq	%r14
    00000018: 	movq	%rsi, %r14
    0000001b: 	pushq	%r13
    0000001d: 	movq	%rdi, %r13
    00000020: 	pushq	%r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rdx, %rbx
    00000027: 	subq	$0x18, %rsp
.Ltmp662:
    0000002b: 	movsd	(%r13), %xmm2
    00000031: 	movq	%r14, %r12
    00000034: 	movq	%r13, %r15
    00000037: 	movsd	%xmm2, 0x8(%rsp)
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp660:
    00000040: 	movsd	-0x8(%r12), %xmm1
    00000047: 	movsd	0x8(%rsp), %xmm0
    0000004d: 	leaq	-0x8(%r12), %rbp
    00000052: 	callq	*%rbx # Offset: 82
    00000054: 	testb	%al, %al
    00000056: 	jne	.Ltmp656 # Offset: 86
    00000058: 	cmpq	%rbp, %r15
    0000005b: 	jb	.Ltmp657 # Offset: 91
    0000005d: 	jmp	.Ltmp658 # Offset: 93
    0000005f: 	nop # Size: 1
.Ltmp659:
    00000060: 	addq	$0x8, %r15
.Ltmp657:
    00000064: 	movsd	0x8(%rsp), %xmm1
    0000006a: 	movsd	(%r15), %xmm0
    0000006f: 	callq	*%rbx # Offset: 111
    00000071: 	testb	%al, %al
    00000073: 	jne	.Ltmp659 # Offset: 115
    00000075: 	cmpq	%rbp, %r15
    00000078: 	jae	.Ltmp658 # Offset: 120
    0000007a: 	movsd	(%rbp), %xmm0
    0000007f: 	movsd	(%r15), %xmm1
    00000084: 	movsd	%xmm1, (%rbp)
    00000089: 	movsd	%xmm0, (%r15)
.Ltmp656:
    0000008e: 	movq	%rbp, %r12
    00000091: 	jmp	.Ltmp660 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp658:
    00000098: 	movq	%rbx, %rdx
    0000009b: 	movq	%r12, %rsi
    0000009e: 	movq	%r13, %rdi
    000000a1: 	callq	_Z10quicksort1IPdPFbddEEvT_S3_T0_ # Offset: 161
    000000a6: 	movq	%r14, %rax
    000000a9: 	subq	%r12, %rax
    000000ac: 	cmpq	$0x8, %rax
    000000b0: 	jle	.Ltmp661 # Offset: 176
    000000b2: 	movq	%r12, %r13
    000000b5: 	jmp	.Ltmp662 # Offset: 181
.Ltmp661:
    000000ba: 	addq	$0x18, %rsp
    000000be: 	popq	%rbx
    000000bf: 	popq	%rbp
    000000c0: 	popq	%r12
    000000c2: 	popq	%r13
    000000c4: 	popq	%r14
    000000c6: 	popq	%r15
    000000c8: 	retq # Offset: 200
.Ltmp655:
    000000c9: 	retq # Offset: 201
DWARF CFI Instructions:
    <empty>
End of Function "_Z10quicksort1IPdPFbddEEvT_S3_T0_"

Binary Function "_Z10quicksort1IPdFbddEEvT_S2_T0_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x58a0
  Size        : 0xc9
  MaxSize     : 0xd0
  Offset      : 0x58a0
  Section     : .text
  Orc Section : .local.text._Z10quicksort1IPdFbddEEvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp663 # Offset: 14
    00000014: 	pushq	%r15
    00000016: 	movq	%rdi, %r15
    00000019: 	pushq	%r14
    0000001b: 	movq	%rsi, %r14
    0000001e: 	pushq	%r13
    00000020: 	movq	%rdi, %r13
    00000023: 	pushq	%r12
    00000025: 	movq	%rdx, %r12
    00000028: 	pushq	%rbp
    00000029: 	movq	%rsi, %rbp
    0000002c: 	pushq	%rbx
    0000002d: 	subq	$0x18, %rsp
    00000031: 	movsd	(%rdi), %xmm2
    00000035: 	movsd	%xmm2, 0x8(%rsp)
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp668:
    00000040: 	movsd	-0x8(%rbp), %xmm1
    00000045: 	movsd	0x8(%rsp), %xmm0
    0000004b: 	leaq	-0x8(%rbp), %rbx
    0000004f: 	callq	*%r12 # Offset: 79
    00000052: 	testb	%al, %al
    00000054: 	jne	.Ltmp664 # Offset: 84
    00000056: 	cmpq	%r15, %rbx
    00000059: 	ja	.Ltmp665 # Offset: 89
    0000005b: 	jmp	.Ltmp666 # Offset: 91
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp667:
    00000060: 	addq	$0x8, %r15
.Ltmp665:
    00000064: 	movsd	0x8(%rsp), %xmm1
    0000006a: 	movsd	(%r15), %xmm0
    0000006f: 	callq	*%r12 # Offset: 111
    00000072: 	testb	%al, %al
    00000074: 	jne	.Ltmp667 # Offset: 116
    00000076: 	cmpq	%r15, %rbx
    00000079: 	jbe	.Ltmp666 # Offset: 121
    0000007b: 	movsd	(%rbx), %xmm0
    0000007f: 	movsd	(%r15), %xmm1
    00000084: 	movsd	%xmm1, (%rbx)
    00000088: 	movsd	%xmm0, (%r15)
.Ltmp664:
    0000008d: 	movq	%rbx, %rbp
    00000090: 	jmp	.Ltmp668 # Offset: 144
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp666:
    00000098: 	movq	%r12, %rdx
    0000009b: 	movq	%rbp, %rsi
    0000009e: 	movq	%r13, %rdi
    000000a1: 	callq	_Z10quicksort1IPdPFbddEEvT_S3_T0_ # Offset: 161
    000000a6: 	addq	$0x18, %rsp
    000000aa: 	movq	%r12, %rdx
    000000ad: 	movq	%r14, %rsi
    000000b0: 	popq	%rbx
    000000b1: 	movq	%rbp, %rdi
    000000b4: 	popq	%rbp
    000000b5: 	popq	%r12
    000000b7: 	popq	%r13
    000000b9: 	popq	%r14
    000000bb: 	popq	%r15
    000000bd: 	jmp	_Z10quicksort1IPdPFbddEEvT_S3_T0_ # TAILCALL  # Offset: 189
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp663:
    000000c8: 	retq # Offset: 200
DWARF CFI Instructions:
    <empty>
End of Function "_Z10quicksort1IPdFbddEEvT_S2_T0_"

Binary Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_S6_T0_T1_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x5970
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x5970
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_S6_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x80, %rax
    00000010: 	jle	.Ltmp669 # Offset: 16
    00000016: 	pushq	%r13
    00000018: 	movq	%rdx, %r13
    0000001b: 	pushq	%r12
    0000001d: 	leaq	0x8(%rdi), %r12
    00000021: 	pushq	%rbp
    00000022: 	movq	%rdi, %rbp
    00000025: 	pushq	%rbx
    00000026: 	subq	$0x8, %rsp
    0000002a: 	testq	%rdx, %rdx
    0000002d: 	je	.Ltmp670 # Offset: 45
.Ltmp683:
    00000033: 	movupd	(%rbp), %xmm0
    00000038: 	sarq	$0x4, %rax
    0000003c: 	subq	$0x1, %r13
    00000040: 	movsd	-0x8(%rsi), %xmm3
    00000045: 	leaq	(%rbp,%rax,8), %rax
    0000004a: 	movapd	%xmm0, %xmm4
    0000004e: 	movsd	(%rax), %xmm2
    00000052: 	movapd	%xmm0, %xmm1
    00000056: 	shufpd	$0x1, %xmm0, %xmm4
    0000005b: 	unpckhpd	%xmm0, %xmm0
    0000005f: 	comisd	%xmm0, %xmm2
    00000063: 	jbe	.Ltmp671 # Offset: 99
    00000065: 	comisd	%xmm2, %xmm3
    00000069: 	ja	.Ltmp672 # Offset: 105
    0000006f: 	comisd	%xmm0, %xmm3
    00000073: 	ja	.Ltmp673 # Offset: 115
.Ltmp679:
    00000075: 	movups	%xmm4, (%rbp)
    00000079: 	movsd	-0x8(%rsi), %xmm2
.Ltmp680:
    0000007e: 	movq	%rsi, %rax
    00000081: 	movq	%r12, %rbx
    00000084: 	jmp	.Ltmp674 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp675:
    00000090: 	movsd	0x8(%rbx), %xmm1
    00000095: 	addq	$0x8, %rbx
.Ltmp674:
    00000099: 	comisd	%xmm1, %xmm0
    0000009d: 	ja	.Ltmp675 # Offset: 157
    0000009f: 	subq	$0x8, %rax
    000000a3: 	comisd	%xmm0, %xmm2
    000000a7: 	jbe	.Ltmp676 # Offset: 167
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp677:
    000000b0: 	movsd	-0x8(%rax), %xmm2
    000000b5: 	subq	$0x8, %rax
    000000b9: 	comisd	%xmm0, %xmm2
    000000bd: 	ja	.Ltmp677 # Offset: 189
.Ltmp676:
    000000bf: 	cmpq	%rbx, %rax
    000000c2: 	jbe	.Ltmp678 # Offset: 194
    000000c4: 	movsd	%xmm2, (%rbx)
    000000c8: 	addq	$0x8, %rbx
    000000cc: 	movsd	-0x8(%rax), %xmm2
    000000d1: 	movsd	%xmm1, (%rax)
    000000d5: 	movsd	(%rbx), %xmm1
    000000d9: 	movsd	(%rbp), %xmm0
    000000de: 	jmp	.Ltmp674 # Offset: 222
.Ltmp671:
    000000e0: 	comisd	%xmm0, %xmm3
    000000e4: 	ja	.Ltmp679 # Offset: 228
    000000e6: 	comisd	%xmm2, %xmm3
    000000ea: 	jbe	.Ltmp672 # Offset: 234
.Ltmp673:
    000000ec: 	movsd	%xmm3, (%rbp)
    000000f1: 	movapd	%xmm1, %xmm2
    000000f5: 	movsd	%xmm1, -0x8(%rsi)
    000000fa: 	movsd	(%rbp), %xmm0
    000000ff: 	movsd	0x8(%rbp), %xmm1
    00000104: 	jmp	.Ltmp680 # Offset: 260
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp678:
    00000110: 	movq	%r13, %rdx
    00000113: 	movq	%rbx, %rdi
    00000116: 	callq	_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_S6_T0_T1_ # Offset: 278
    0000011b: 	movq	%rbx, %rax
    0000011e: 	subq	%rbp, %rax
    00000121: 	cmpq	$0x80, %rax
    00000127: 	jle	.Ltmp681 # Offset: 295
    0000012d: 	testq	%r13, %r13
    00000130: 	je	.Ltmp682 # Offset: 304
    00000132: 	movq	%rbx, %rsi
    00000135: 	jmp	.Ltmp683 # Offset: 309
.Ltmp672:
    0000013a: 	movsd	%xmm2, (%rbp)
    0000013f: 	movsd	%xmm1, (%rax)
    00000143: 	movsd	0x8(%rbp), %xmm1
    00000148: 	movsd	(%rbp), %xmm0
    0000014d: 	movsd	-0x8(%rsi), %xmm2
    00000152: 	jmp	.Ltmp680 # Offset: 338
.Ltmp670:
    00000157: 	movq	%rsi, %rbx
.Ltmp682:
    0000015a: 	sarq	$0x3, %rax
    0000015e: 	movq	%rbp, %rdi
    00000161: 	leaq	-0x2(%rax), %r13
    00000165: 	movq	%rax, %rdx
    00000168: 	movq	%rax, %r12
    0000016b: 	sarq	%r13
    0000016e: 	movsd	(%rbp,%r13,8), %xmm0
    00000175: 	movq	%r13, %rsi
    00000178: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1" # Offset: 376
.Ltmp684:
    0000017d: 	subq	$0x1, %r13
    00000181: 	movq	%r12, %rdx
    00000184: 	movq	%rbp, %rdi
    00000187: 	movsd	(%rbp,%r13,8), %xmm0
    0000018e: 	movq	%r13, %rsi
    00000191: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1" # Offset: 401
    00000196: 	testq	%r13, %r13
    00000199: 	jne	.Ltmp684 # Offset: 409
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp685:
    000001a0: 	subq	$0x8, %rbx
    000001a4: 	movsd	(%rbp), %xmm1
    000001a9: 	movsd	(%rbx), %xmm0
    000001ad: 	xorl	%esi, %esi
    000001af: 	movq	%rbx, %r12
    000001b2: 	movq	%rbp, %rdi
    000001b5: 	subq	%rbp, %r12
    000001b8: 	movsd	%xmm1, (%rbx)
    000001bc: 	movq	%r12, %rdx
    000001bf: 	sarq	$0x3, %rdx
    000001c3: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1" # Offset: 451
    000001c8: 	cmpq	$0x8, %r12
    000001cc: 	jg	.Ltmp685 # Offset: 460
.Ltmp681:
    000001ce: 	addq	$0x8, %rsp
    000001d2: 	popq	%rbx
    000001d3: 	popq	%rbp
    000001d4: 	popq	%r12
    000001d6: 	popq	%r13
    000001d8: 	retq # Offset: 472
.Ltmp669:
    000001d9: 	retq # Offset: 473
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_S6_T0_T1_"

Binary Function "_Z12compare_sortIPd17less_than_functorEvT_S2_T0_" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x5b50
  Size        : 0x1fe
  MaxSize     : 0x200
  Offset      : 0x5b50
  Section     : .text
  Orc Section : .local.text._Z12compare_sortIPd17less_than_functorEvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp686 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	movl	$0x3f, %edx
    00000014: 	pushq	%r13
    00000016: 	movq	%rsi, %r13
    00000019: 	pushq	%r12
    0000001b: 	movq	%rsi, %r12
    0000001e: 	pushq	%rbp
    0000001f: 	subq	%rdi, %r12
    00000022: 	movq	%rdi, %rbp
    00000025: 	pushq	%rbx
    00000026: 	movq	%r12, %rax
    00000029: 	leaq	0x8(%rbp), %rbx
    0000002d: 	sarq	$0x3, %rax
    00000031: 	subq	$0x10, %rsp
    00000035: 	bsrq	%rax, %rax
    00000039: 	xorq	$0x3f, %rax
    0000003d: 	subl	%eax, %edx
    0000003f: 	movslq	%edx, %rdx
    00000042: 	addq	%rdx, %rdx
    00000045: 	callq	_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI17less_than_functorEEEvT_S6_T0_T1_ # Offset: 69
    0000004a: 	cmpq	$0x80, %r12
    00000051: 	jle	.Ltmp687 # Offset: 81
    00000057: 	leaq	0x80(%rbp), %r12
    0000005e: 	movl	$0x8, %r14d
    00000064: 	jmp	.Ltmp688 # Offset: 100
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp691:
    00000070: 	cmpq	%rbx, %rbp
    00000073: 	je	.Ltmp689 # Offset: 115
    00000075: 	movq	%rbx, %rdx
    00000078: 	leaq	(%rbp,%r14), %rdi
    0000007d: 	movq	%rbp, %rsi
    00000080: 	movsd	%xmm1, 0x8(%rsp)
    00000086: 	subq	%rbp, %rdx
    00000089: 	callq	memmove@PLT # Offset: 137
    0000008e: 	movsd	0x8(%rsp), %xmm1
.Ltmp689:
    00000094: 	addq	$0x8, %rbx
    00000098: 	movsd	%xmm1, (%rbp)
    0000009d: 	cmpq	%rbx, %r12
    000000a0: 	je	.Ltmp690 # Offset: 160
.Ltmp688:
    000000a2: 	movsd	(%rbx), %xmm1
    000000a6: 	movsd	(%rbp), %xmm0
    000000ab: 	comisd	%xmm1, %xmm0
    000000af: 	ja	.Ltmp691 # Offset: 175
    000000b1: 	movsd	-0x8(%rbx), %xmm0
    000000b6: 	leaq	-0x8(%rbx), %rax
    000000ba: 	comisd	%xmm1, %xmm0
    000000be: 	jbe	.Ltmp692 # Offset: 190
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp693:
    000000c8: 	movsd	%xmm0, 0x8(%rax)
    000000cd: 	movq	%rax, %rdx
    000000d0: 	movsd	-0x8(%rax), %xmm0
    000000d5: 	subq	$0x8, %rax
    000000d9: 	comisd	%xmm1, %xmm0
    000000dd: 	ja	.Ltmp693 # Offset: 221
.Ltmp705:
    000000df: 	addq	$0x8, %rbx
    000000e3: 	movsd	%xmm1, (%rdx)
    000000e7: 	cmpq	%rbx, %r12
    000000ea: 	jne	.Ltmp688 # Offset: 234
.Ltmp690:
    000000ec: 	cmpq	%r12, %r13
    000000ef: 	je	.Ltmp694 # Offset: 239
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp697:
    000000f8: 	movsd	(%r12), %xmm1
    000000fe: 	movsd	-0x8(%r12), %xmm0
    00000105: 	leaq	-0x8(%r12), %rax
    0000010a: 	comisd	%xmm1, %xmm0
    0000010e: 	jbe	.Ltmp695 # Offset: 270
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp696:
    00000118: 	movsd	%xmm0, 0x8(%rax)
    0000011d: 	movq	%rax, %rdx
    00000120: 	movsd	-0x8(%rax), %xmm0
    00000125: 	subq	$0x8, %rax
    00000129: 	comisd	%xmm1, %xmm0
    0000012d: 	ja	.Ltmp696 # Offset: 301
    0000012f: 	addq	$0x8, %r12
    00000133: 	movsd	%xmm1, (%rdx)
    00000137: 	cmpq	%r12, %r13
    0000013a: 	jne	.Ltmp697 # Offset: 314
.Ltmp694:
    0000013c: 	addq	$0x10, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp687:
    00000150: 	cmpq	%rbx, %r13
    00000153: 	je	.Ltmp694 # Offset: 339
    00000155: 	movl	$0x8, %r12d
    0000015b: 	jmp	.Ltmp698 # Offset: 347
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp700:
    00000160: 	cmpq	%rbx, %rbp
    00000163: 	je	.Ltmp699 # Offset: 355
    00000165: 	movq	%rbx, %rdx
    00000168: 	leaq	(%rbp,%r12), %rdi
    0000016d: 	movq	%rbp, %rsi
    00000170: 	movsd	%xmm1, 0x8(%rsp)
    00000176: 	subq	%rbp, %rdx
    00000179: 	callq	memmove@PLT # Offset: 377
    0000017e: 	movsd	0x8(%rsp), %xmm1
.Ltmp699:
    00000184: 	movsd	%xmm1, (%rbp)
.Ltmp703:
    00000189: 	addq	$0x8, %rbx
    0000018d: 	cmpq	%rbx, %r13
    00000190: 	je	.Ltmp694 # Offset: 400
.Ltmp698:
    00000192: 	movsd	(%rbx), %xmm1
    00000196: 	movsd	(%rbp), %xmm0
    0000019b: 	comisd	%xmm1, %xmm0
    0000019f: 	ja	.Ltmp700 # Offset: 415
    000001a1: 	movsd	-0x8(%rbx), %xmm0
    000001a6: 	leaq	-0x8(%rbx), %rax
    000001aa: 	comisd	%xmm1, %xmm0
    000001ae: 	jbe	.Ltmp701 # Offset: 430
.Ltmp702:
    000001b0: 	movsd	%xmm0, 0x8(%rax)
    000001b5: 	movq	%rax, %rdx
    000001b8: 	movsd	-0x8(%rax), %xmm0
    000001bd: 	subq	$0x8, %rax
    000001c1: 	comisd	%xmm1, %xmm0
    000001c5: 	ja	.Ltmp702 # Offset: 453
.Ltmp704:
    000001c7: 	movsd	%xmm1, (%rdx)
    000001cb: 	jmp	.Ltmp703 # Offset: 459
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp686:
    000001d0: 	retq # Offset: 464
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp695:
    000001d8: 	movq	%r12, %rdx
    000001db: 	addq	$0x8, %r12
    000001df: 	movsd	%xmm1, (%rdx)
    000001e3: 	cmpq	%r12, %r13
    000001e6: 	jne	.Ltmp697 # Offset: 486
    000001ec: 	jmp	.Ltmp694 # Offset: 492
.Ltmp701:
    000001f1: 	movq	%rbx, %rdx
    000001f4: 	jmp	.Ltmp704 # Offset: 500
.Ltmp692:
    000001f6: 	movq	%rbx, %rdx
    000001f9: 	jmp	.Ltmp705 # Offset: 505
DWARF CFI Instructions:
    <empty>
End of Function "_Z12compare_sortIPd17less_than_functorEvT_S2_T0_"

Binary Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_S6_T0_T1_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x5d50
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x5d50
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_S6_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x80, %rax
    00000010: 	jle	.Ltmp706 # Offset: 16
    00000016: 	pushq	%r13
    00000018: 	movq	%rdx, %r13
    0000001b: 	pushq	%r12
    0000001d: 	leaq	0x8(%rdi), %r12
    00000021: 	pushq	%rbp
    00000022: 	movq	%rdi, %rbp
    00000025: 	pushq	%rbx
    00000026: 	subq	$0x8, %rsp
    0000002a: 	testq	%rdx, %rdx
    0000002d: 	je	.Ltmp707 # Offset: 45
.Ltmp720:
    00000033: 	movupd	(%rbp), %xmm0
    00000038: 	sarq	$0x4, %rax
    0000003c: 	subq	$0x1, %r13
    00000040: 	movsd	-0x8(%rsi), %xmm3
    00000045: 	leaq	(%rbp,%rax,8), %rax
    0000004a: 	movapd	%xmm0, %xmm4
    0000004e: 	movsd	(%rax), %xmm2
    00000052: 	movapd	%xmm0, %xmm1
    00000056: 	shufpd	$0x1, %xmm0, %xmm4
    0000005b: 	unpckhpd	%xmm0, %xmm0
    0000005f: 	comisd	%xmm0, %xmm2
    00000063: 	jbe	.Ltmp708 # Offset: 99
    00000065: 	comisd	%xmm2, %xmm3
    00000069: 	ja	.Ltmp709 # Offset: 105
    0000006f: 	comisd	%xmm0, %xmm3
    00000073: 	ja	.Ltmp710 # Offset: 115
.Ltmp716:
    00000075: 	movups	%xmm4, (%rbp)
    00000079: 	movsd	-0x8(%rsi), %xmm2
.Ltmp717:
    0000007e: 	movq	%rsi, %rax
    00000081: 	movq	%r12, %rbx
    00000084: 	jmp	.Ltmp711 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp712:
    00000090: 	movsd	0x8(%rbx), %xmm1
    00000095: 	addq	$0x8, %rbx
.Ltmp711:
    00000099: 	comisd	%xmm1, %xmm0
    0000009d: 	ja	.Ltmp712 # Offset: 157
    0000009f: 	subq	$0x8, %rax
    000000a3: 	comisd	%xmm0, %xmm2
    000000a7: 	jbe	.Ltmp713 # Offset: 167
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp714:
    000000b0: 	movsd	-0x8(%rax), %xmm2
    000000b5: 	subq	$0x8, %rax
    000000b9: 	comisd	%xmm0, %xmm2
    000000bd: 	ja	.Ltmp714 # Offset: 189
.Ltmp713:
    000000bf: 	cmpq	%rbx, %rax
    000000c2: 	jbe	.Ltmp715 # Offset: 194
    000000c4: 	movsd	%xmm2, (%rbx)
    000000c8: 	addq	$0x8, %rbx
    000000cc: 	movsd	-0x8(%rax), %xmm2
    000000d1: 	movsd	%xmm1, (%rax)
    000000d5: 	movsd	(%rbx), %xmm1
    000000d9: 	movsd	(%rbp), %xmm0
    000000de: 	jmp	.Ltmp711 # Offset: 222
.Ltmp708:
    000000e0: 	comisd	%xmm0, %xmm3
    000000e4: 	ja	.Ltmp716 # Offset: 228
    000000e6: 	comisd	%xmm2, %xmm3
    000000ea: 	jbe	.Ltmp709 # Offset: 234
.Ltmp710:
    000000ec: 	movsd	%xmm3, (%rbp)
    000000f1: 	movapd	%xmm1, %xmm2
    000000f5: 	movsd	%xmm1, -0x8(%rsi)
    000000fa: 	movsd	(%rbp), %xmm0
    000000ff: 	movsd	0x8(%rbp), %xmm1
    00000104: 	jmp	.Ltmp717 # Offset: 260
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp715:
    00000110: 	movq	%r13, %rdx
    00000113: 	movq	%rbx, %rdi
    00000116: 	callq	_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_S6_T0_T1_ # Offset: 278
    0000011b: 	movq	%rbx, %rax
    0000011e: 	subq	%rbp, %rax
    00000121: 	cmpq	$0x80, %rax
    00000127: 	jle	.Ltmp718 # Offset: 295
    0000012d: 	testq	%r13, %r13
    00000130: 	je	.Ltmp719 # Offset: 304
    00000132: 	movq	%rbx, %rsi
    00000135: 	jmp	.Ltmp720 # Offset: 309
.Ltmp709:
    0000013a: 	movsd	%xmm2, (%rbp)
    0000013f: 	movsd	%xmm1, (%rax)
    00000143: 	movsd	0x8(%rbp), %xmm1
    00000148: 	movsd	(%rbp), %xmm0
    0000014d: 	movsd	-0x8(%rsi), %xmm2
    00000152: 	jmp	.Ltmp717 # Offset: 338
.Ltmp707:
    00000157: 	movq	%rsi, %rbx
.Ltmp719:
    0000015a: 	sarq	$0x3, %rax
    0000015e: 	movq	%rbp, %rdi
    00000161: 	leaq	-0x2(%rax), %r13
    00000165: 	movq	%rax, %rdx
    00000168: 	movq	%rax, %r12
    0000016b: 	sarq	%r13
    0000016e: 	movsd	(%rbp,%r13,8), %xmm0
    00000175: 	movq	%r13, %rsi
    00000178: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1" # Offset: 376
.Ltmp721:
    0000017d: 	subq	$0x1, %r13
    00000181: 	movq	%r12, %rdx
    00000184: 	movq	%rbp, %rdi
    00000187: 	movsd	(%rbp,%r13,8), %xmm0
    0000018e: 	movq	%r13, %rsi
    00000191: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1" # Offset: 401
    00000196: 	testq	%r13, %r13
    00000199: 	jne	.Ltmp721 # Offset: 409
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp722:
    000001a0: 	subq	$0x8, %rbx
    000001a4: 	movsd	(%rbp), %xmm1
    000001a9: 	movsd	(%rbx), %xmm0
    000001ad: 	xorl	%esi, %esi
    000001af: 	movq	%rbx, %r12
    000001b2: 	movq	%rbp, %rdi
    000001b5: 	subq	%rbp, %r12
    000001b8: 	movsd	%xmm1, (%rbx)
    000001bc: 	movq	%r12, %rdx
    000001bf: 	sarq	$0x3, %rdx
    000001c3: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_T0_S7_T1_T2_.isra.0/1" # Offset: 451
    000001c8: 	cmpq	$0x8, %r12
    000001cc: 	jg	.Ltmp722 # Offset: 460
.Ltmp718:
    000001ce: 	addq	$0x8, %rsp
    000001d2: 	popq	%rbx
    000001d3: 	popq	%rbp
    000001d4: 	popq	%r12
    000001d6: 	popq	%r13
    000001d8: 	retq # Offset: 472
.Ltmp706:
    000001d9: 	retq # Offset: 473
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_S6_T0_T1_"

Binary Function "_Z12compare_sortIPd24inline_less_than_functorEvT_S2_T0_" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x5f30
  Size        : 0x1fe
  MaxSize     : 0x200
  Offset      : 0x5f30
  Section     : .text
  Orc Section : .local.text._Z12compare_sortIPd24inline_less_than_functorEvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp723 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	movl	$0x3f, %edx
    00000014: 	pushq	%r13
    00000016: 	movq	%rsi, %r13
    00000019: 	pushq	%r12
    0000001b: 	movq	%rsi, %r12
    0000001e: 	pushq	%rbp
    0000001f: 	subq	%rdi, %r12
    00000022: 	movq	%rdi, %rbp
    00000025: 	pushq	%rbx
    00000026: 	movq	%r12, %rax
    00000029: 	leaq	0x8(%rbp), %rbx
    0000002d: 	sarq	$0x3, %rax
    00000031: 	subq	$0x10, %rsp
    00000035: 	bsrq	%rax, %rax
    00000039: 	xorq	$0x3f, %rax
    0000003d: 	subl	%eax, %edx
    0000003f: 	movslq	%edx, %rdx
    00000042: 	addq	%rdx, %rdx
    00000045: 	callq	_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterI24inline_less_than_functorEEEvT_S6_T0_T1_ # Offset: 69
    0000004a: 	cmpq	$0x80, %r12
    00000051: 	jle	.Ltmp724 # Offset: 81
    00000057: 	leaq	0x80(%rbp), %r12
    0000005e: 	movl	$0x8, %r14d
    00000064: 	jmp	.Ltmp725 # Offset: 100
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp728:
    00000070: 	cmpq	%rbx, %rbp
    00000073: 	je	.Ltmp726 # Offset: 115
    00000075: 	movq	%rbx, %rdx
    00000078: 	leaq	(%rbp,%r14), %rdi
    0000007d: 	movq	%rbp, %rsi
    00000080: 	movsd	%xmm1, 0x8(%rsp)
    00000086: 	subq	%rbp, %rdx
    00000089: 	callq	memmove@PLT # Offset: 137
    0000008e: 	movsd	0x8(%rsp), %xmm1
.Ltmp726:
    00000094: 	addq	$0x8, %rbx
    00000098: 	movsd	%xmm1, (%rbp)
    0000009d: 	cmpq	%rbx, %r12
    000000a0: 	je	.Ltmp727 # Offset: 160
.Ltmp725:
    000000a2: 	movsd	(%rbx), %xmm1
    000000a6: 	movsd	(%rbp), %xmm0
    000000ab: 	comisd	%xmm1, %xmm0
    000000af: 	ja	.Ltmp728 # Offset: 175
    000000b1: 	movsd	-0x8(%rbx), %xmm0
    000000b6: 	leaq	-0x8(%rbx), %rax
    000000ba: 	comisd	%xmm1, %xmm0
    000000be: 	jbe	.Ltmp729 # Offset: 190
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp730:
    000000c8: 	movsd	%xmm0, 0x8(%rax)
    000000cd: 	movq	%rax, %rdx
    000000d0: 	movsd	-0x8(%rax), %xmm0
    000000d5: 	subq	$0x8, %rax
    000000d9: 	comisd	%xmm1, %xmm0
    000000dd: 	ja	.Ltmp730 # Offset: 221
.Ltmp742:
    000000df: 	addq	$0x8, %rbx
    000000e3: 	movsd	%xmm1, (%rdx)
    000000e7: 	cmpq	%rbx, %r12
    000000ea: 	jne	.Ltmp725 # Offset: 234
.Ltmp727:
    000000ec: 	cmpq	%r12, %r13
    000000ef: 	je	.Ltmp731 # Offset: 239
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp734:
    000000f8: 	movsd	(%r12), %xmm1
    000000fe: 	movsd	-0x8(%r12), %xmm0
    00000105: 	leaq	-0x8(%r12), %rax
    0000010a: 	comisd	%xmm1, %xmm0
    0000010e: 	jbe	.Ltmp732 # Offset: 270
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp733:
    00000118: 	movsd	%xmm0, 0x8(%rax)
    0000011d: 	movq	%rax, %rdx
    00000120: 	movsd	-0x8(%rax), %xmm0
    00000125: 	subq	$0x8, %rax
    00000129: 	comisd	%xmm1, %xmm0
    0000012d: 	ja	.Ltmp733 # Offset: 301
    0000012f: 	addq	$0x8, %r12
    00000133: 	movsd	%xmm1, (%rdx)
    00000137: 	cmpq	%r12, %r13
    0000013a: 	jne	.Ltmp734 # Offset: 314
.Ltmp731:
    0000013c: 	addq	$0x10, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp724:
    00000150: 	cmpq	%rbx, %r13
    00000153: 	je	.Ltmp731 # Offset: 339
    00000155: 	movl	$0x8, %r12d
    0000015b: 	jmp	.Ltmp735 # Offset: 347
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp737:
    00000160: 	cmpq	%rbx, %rbp
    00000163: 	je	.Ltmp736 # Offset: 355
    00000165: 	movq	%rbx, %rdx
    00000168: 	leaq	(%rbp,%r12), %rdi
    0000016d: 	movq	%rbp, %rsi
    00000170: 	movsd	%xmm1, 0x8(%rsp)
    00000176: 	subq	%rbp, %rdx
    00000179: 	callq	memmove@PLT # Offset: 377
    0000017e: 	movsd	0x8(%rsp), %xmm1
.Ltmp736:
    00000184: 	movsd	%xmm1, (%rbp)
.Ltmp740:
    00000189: 	addq	$0x8, %rbx
    0000018d: 	cmpq	%rbx, %r13
    00000190: 	je	.Ltmp731 # Offset: 400
.Ltmp735:
    00000192: 	movsd	(%rbx), %xmm1
    00000196: 	movsd	(%rbp), %xmm0
    0000019b: 	comisd	%xmm1, %xmm0
    0000019f: 	ja	.Ltmp737 # Offset: 415
    000001a1: 	movsd	-0x8(%rbx), %xmm0
    000001a6: 	leaq	-0x8(%rbx), %rax
    000001aa: 	comisd	%xmm1, %xmm0
    000001ae: 	jbe	.Ltmp738 # Offset: 430
.Ltmp739:
    000001b0: 	movsd	%xmm0, 0x8(%rax)
    000001b5: 	movq	%rax, %rdx
    000001b8: 	movsd	-0x8(%rax), %xmm0
    000001bd: 	subq	$0x8, %rax
    000001c1: 	comisd	%xmm1, %xmm0
    000001c5: 	ja	.Ltmp739 # Offset: 453
.Ltmp741:
    000001c7: 	movsd	%xmm1, (%rdx)
    000001cb: 	jmp	.Ltmp740 # Offset: 459
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp723:
    000001d0: 	retq # Offset: 464
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp732:
    000001d8: 	movq	%r12, %rdx
    000001db: 	addq	$0x8, %r12
    000001df: 	movsd	%xmm1, (%rdx)
    000001e3: 	cmpq	%r12, %r13
    000001e6: 	jne	.Ltmp734 # Offset: 486
    000001ec: 	jmp	.Ltmp731 # Offset: 492
.Ltmp738:
    000001f1: 	movq	%rbx, %rdx
    000001f4: 	jmp	.Ltmp741 # Offset: 500
.Ltmp729:
    000001f6: 	movq	%rbx, %rdx
    000001f9: 	jmp	.Ltmp742 # Offset: 505
DWARF CFI Instructions:
    <empty>
End of Function "_Z12compare_sortIPd24inline_less_than_functorEvT_S2_T0_"

Binary Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_S7_T0_T1_" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x6130
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x6130
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x80, %rax
    00000010: 	jle	.Ltmp743 # Offset: 16
    00000016: 	pushq	%r13
    00000018: 	movq	%rdx, %r13
    0000001b: 	pushq	%r12
    0000001d: 	leaq	0x8(%rdi), %r12
    00000021: 	pushq	%rbp
    00000022: 	movq	%rdi, %rbp
    00000025: 	pushq	%rbx
    00000026: 	subq	$0x8, %rsp
    0000002a: 	testq	%rdx, %rdx
    0000002d: 	je	.Ltmp744 # Offset: 45
.Ltmp757:
    00000033: 	movupd	(%rbp), %xmm0
    00000038: 	sarq	$0x4, %rax
    0000003c: 	subq	$0x1, %r13
    00000040: 	movsd	-0x8(%rsi), %xmm3
    00000045: 	leaq	(%rbp,%rax,8), %rax
    0000004a: 	movapd	%xmm0, %xmm4
    0000004e: 	movsd	(%rax), %xmm2
    00000052: 	movapd	%xmm0, %xmm1
    00000056: 	shufpd	$0x1, %xmm0, %xmm4
    0000005b: 	unpckhpd	%xmm0, %xmm0
    0000005f: 	comisd	%xmm0, %xmm2
    00000063: 	jbe	.Ltmp745 # Offset: 99
    00000065: 	comisd	%xmm2, %xmm3
    00000069: 	ja	.Ltmp746 # Offset: 105
    0000006f: 	comisd	%xmm0, %xmm3
    00000073: 	ja	.Ltmp747 # Offset: 115
.Ltmp753:
    00000075: 	movups	%xmm4, (%rbp)
    00000079: 	movsd	-0x8(%rsi), %xmm2
.Ltmp754:
    0000007e: 	movq	%rsi, %rax
    00000081: 	movq	%r12, %rbx
    00000084: 	jmp	.Ltmp748 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp749:
    00000090: 	movsd	0x8(%rbx), %xmm1
    00000095: 	addq	$0x8, %rbx
.Ltmp748:
    00000099: 	comisd	%xmm1, %xmm0
    0000009d: 	ja	.Ltmp749 # Offset: 157
    0000009f: 	subq	$0x8, %rax
    000000a3: 	comisd	%xmm0, %xmm2
    000000a7: 	jbe	.Ltmp750 # Offset: 167
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp751:
    000000b0: 	movsd	-0x8(%rax), %xmm2
    000000b5: 	subq	$0x8, %rax
    000000b9: 	comisd	%xmm0, %xmm2
    000000bd: 	ja	.Ltmp751 # Offset: 189
.Ltmp750:
    000000bf: 	cmpq	%rbx, %rax
    000000c2: 	jbe	.Ltmp752 # Offset: 194
    000000c4: 	movsd	%xmm2, (%rbx)
    000000c8: 	addq	$0x8, %rbx
    000000cc: 	movsd	-0x8(%rax), %xmm2
    000000d1: 	movsd	%xmm1, (%rax)
    000000d5: 	movsd	(%rbx), %xmm1
    000000d9: 	movsd	(%rbp), %xmm0
    000000de: 	jmp	.Ltmp748 # Offset: 222
.Ltmp745:
    000000e0: 	comisd	%xmm0, %xmm3
    000000e4: 	ja	.Ltmp753 # Offset: 228
    000000e6: 	comisd	%xmm2, %xmm3
    000000ea: 	jbe	.Ltmp746 # Offset: 234
.Ltmp747:
    000000ec: 	movsd	%xmm3, (%rbp)
    000000f1: 	movapd	%xmm1, %xmm2
    000000f5: 	movsd	%xmm1, -0x8(%rsi)
    000000fa: 	movsd	(%rbp), %xmm0
    000000ff: 	movsd	0x8(%rbp), %xmm1
    00000104: 	jmp	.Ltmp754 # Offset: 260
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp752:
    00000110: 	movq	%r13, %rdx
    00000113: 	movq	%rbx, %rdi
    00000116: 	callq	_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_S7_T0_T1_ # Offset: 278
    0000011b: 	movq	%rbx, %rax
    0000011e: 	subq	%rbp, %rax
    00000121: 	cmpq	$0x80, %rax
    00000127: 	jle	.Ltmp755 # Offset: 295
    0000012d: 	testq	%r13, %r13
    00000130: 	je	.Ltmp756 # Offset: 304
    00000132: 	movq	%rbx, %rsi
    00000135: 	jmp	.Ltmp757 # Offset: 309
.Ltmp746:
    0000013a: 	movsd	%xmm2, (%rbp)
    0000013f: 	movsd	%xmm1, (%rax)
    00000143: 	movsd	0x8(%rbp), %xmm1
    00000148: 	movsd	(%rbp), %xmm0
    0000014d: 	movsd	-0x8(%rsi), %xmm2
    00000152: 	jmp	.Ltmp754 # Offset: 338
.Ltmp744:
    00000157: 	movq	%rsi, %rbx
.Ltmp756:
    0000015a: 	sarq	$0x3, %rax
    0000015e: 	movq	%rbp, %rdi
    00000161: 	leaq	-0x2(%rax), %r13
    00000165: 	movq	%rax, %rdx
    00000168: 	movq	%rax, %r12
    0000016b: 	sarq	%r13
    0000016e: 	movsd	(%rbp,%r13,8), %xmm0
    00000175: 	movq	%r13, %rsi
    00000178: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_T0_S8_T1_T2_.isra.0/1" # Offset: 376
.Ltmp758:
    0000017d: 	subq	$0x1, %r13
    00000181: 	movq	%r12, %rdx
    00000184: 	movq	%rbp, %rdi
    00000187: 	movsd	(%rbp,%r13,8), %xmm0
    0000018e: 	movq	%r13, %rsi
    00000191: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_T0_S8_T1_T2_.isra.0/1" # Offset: 401
    00000196: 	testq	%r13, %r13
    00000199: 	jne	.Ltmp758 # Offset: 409
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp759:
    000001a0: 	subq	$0x8, %rbx
    000001a4: 	movsd	(%rbp), %xmm1
    000001a9: 	movsd	(%rbx), %xmm0
    000001ad: 	xorl	%esi, %esi
    000001af: 	movq	%rbx, %r12
    000001b2: 	movq	%rbp, %rdi
    000001b5: 	subq	%rbp, %r12
    000001b8: 	movsd	%xmm1, (%rbx)
    000001bc: 	movq	%r12, %rdx
    000001bf: 	sarq	$0x3, %rdx
    000001c3: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_T0_S8_T1_T2_.isra.0/1" # Offset: 451
    000001c8: 	cmpq	$0x8, %r12
    000001cc: 	jg	.Ltmp759 # Offset: 460
.Ltmp755:
    000001ce: 	addq	$0x8, %rsp
    000001d2: 	popq	%rbx
    000001d3: 	popq	%rbp
    000001d4: 	popq	%r12
    000001d6: 	popq	%r13
    000001d8: 	retq # Offset: 472
.Ltmp743:
    000001d9: 	retq # Offset: 473
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_S7_T0_T1_"

Binary Function "_Z12compare_sortIPdSt4lessIdEEvT_S3_T0_" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x6310
  Size        : 0x1fe
  MaxSize     : 0x200
  Offset      : 0x6310
  Section     : .text
  Orc Section : .local.text._Z12compare_sortIPdSt4lessIdEEvT_S3_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp760 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	movl	$0x3f, %edx
    00000014: 	pushq	%r13
    00000016: 	movq	%rsi, %r13
    00000019: 	pushq	%r12
    0000001b: 	movq	%rsi, %r12
    0000001e: 	pushq	%rbp
    0000001f: 	subq	%rdi, %r12
    00000022: 	movq	%rdi, %rbp
    00000025: 	pushq	%rbx
    00000026: 	movq	%r12, %rax
    00000029: 	leaq	0x8(%rbp), %rbx
    0000002d: 	sarq	$0x3, %rax
    00000031: 	subq	$0x10, %rsp
    00000035: 	bsrq	%rax, %rax
    00000039: 	xorq	$0x3f, %rax
    0000003d: 	subl	%eax, %edx
    0000003f: 	movslq	%edx, %rdx
    00000042: 	addq	%rdx, %rdx
    00000045: 	callq	_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterISt4lessIdEEEEvT_S7_T0_T1_ # Offset: 69
    0000004a: 	cmpq	$0x80, %r12
    00000051: 	jle	.Ltmp761 # Offset: 81
    00000057: 	leaq	0x80(%rbp), %r12
    0000005e: 	movl	$0x8, %r14d
    00000064: 	jmp	.Ltmp762 # Offset: 100
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp765:
    00000070: 	cmpq	%rbx, %rbp
    00000073: 	je	.Ltmp763 # Offset: 115
    00000075: 	movq	%rbx, %rdx
    00000078: 	leaq	(%rbp,%r14), %rdi
    0000007d: 	movq	%rbp, %rsi
    00000080: 	movsd	%xmm1, 0x8(%rsp)
    00000086: 	subq	%rbp, %rdx
    00000089: 	callq	memmove@PLT # Offset: 137
    0000008e: 	movsd	0x8(%rsp), %xmm1
.Ltmp763:
    00000094: 	addq	$0x8, %rbx
    00000098: 	movsd	%xmm1, (%rbp)
    0000009d: 	cmpq	%rbx, %r12
    000000a0: 	je	.Ltmp764 # Offset: 160
.Ltmp762:
    000000a2: 	movsd	(%rbx), %xmm1
    000000a6: 	movsd	(%rbp), %xmm0
    000000ab: 	comisd	%xmm1, %xmm0
    000000af: 	ja	.Ltmp765 # Offset: 175
    000000b1: 	movsd	-0x8(%rbx), %xmm0
    000000b6: 	leaq	-0x8(%rbx), %rax
    000000ba: 	comisd	%xmm1, %xmm0
    000000be: 	jbe	.Ltmp766 # Offset: 190
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp767:
    000000c8: 	movsd	%xmm0, 0x8(%rax)
    000000cd: 	movq	%rax, %rdx
    000000d0: 	movsd	-0x8(%rax), %xmm0
    000000d5: 	subq	$0x8, %rax
    000000d9: 	comisd	%xmm1, %xmm0
    000000dd: 	ja	.Ltmp767 # Offset: 221
.Ltmp779:
    000000df: 	addq	$0x8, %rbx
    000000e3: 	movsd	%xmm1, (%rdx)
    000000e7: 	cmpq	%rbx, %r12
    000000ea: 	jne	.Ltmp762 # Offset: 234
.Ltmp764:
    000000ec: 	cmpq	%r12, %r13
    000000ef: 	je	.Ltmp768 # Offset: 239
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp771:
    000000f8: 	movsd	(%r12), %xmm1
    000000fe: 	movsd	-0x8(%r12), %xmm0
    00000105: 	leaq	-0x8(%r12), %rax
    0000010a: 	comisd	%xmm1, %xmm0
    0000010e: 	jbe	.Ltmp769 # Offset: 270
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp770:
    00000118: 	movsd	%xmm0, 0x8(%rax)
    0000011d: 	movq	%rax, %rdx
    00000120: 	movsd	-0x8(%rax), %xmm0
    00000125: 	subq	$0x8, %rax
    00000129: 	comisd	%xmm1, %xmm0
    0000012d: 	ja	.Ltmp770 # Offset: 301
    0000012f: 	addq	$0x8, %r12
    00000133: 	movsd	%xmm1, (%rdx)
    00000137: 	cmpq	%r12, %r13
    0000013a: 	jne	.Ltmp771 # Offset: 314
.Ltmp768:
    0000013c: 	addq	$0x10, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp761:
    00000150: 	cmpq	%rbx, %r13
    00000153: 	je	.Ltmp768 # Offset: 339
    00000155: 	movl	$0x8, %r12d
    0000015b: 	jmp	.Ltmp772 # Offset: 347
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp774:
    00000160: 	cmpq	%rbx, %rbp
    00000163: 	je	.Ltmp773 # Offset: 355
    00000165: 	movq	%rbx, %rdx
    00000168: 	leaq	(%rbp,%r12), %rdi
    0000016d: 	movq	%rbp, %rsi
    00000170: 	movsd	%xmm1, 0x8(%rsp)
    00000176: 	subq	%rbp, %rdx
    00000179: 	callq	memmove@PLT # Offset: 377
    0000017e: 	movsd	0x8(%rsp), %xmm1
.Ltmp773:
    00000184: 	movsd	%xmm1, (%rbp)
.Ltmp777:
    00000189: 	addq	$0x8, %rbx
    0000018d: 	cmpq	%rbx, %r13
    00000190: 	je	.Ltmp768 # Offset: 400
.Ltmp772:
    00000192: 	movsd	(%rbx), %xmm1
    00000196: 	movsd	(%rbp), %xmm0
    0000019b: 	comisd	%xmm1, %xmm0
    0000019f: 	ja	.Ltmp774 # Offset: 415
    000001a1: 	movsd	-0x8(%rbx), %xmm0
    000001a6: 	leaq	-0x8(%rbx), %rax
    000001aa: 	comisd	%xmm1, %xmm0
    000001ae: 	jbe	.Ltmp775 # Offset: 430
.Ltmp776:
    000001b0: 	movsd	%xmm0, 0x8(%rax)
    000001b5: 	movq	%rax, %rdx
    000001b8: 	movsd	-0x8(%rax), %xmm0
    000001bd: 	subq	$0x8, %rax
    000001c1: 	comisd	%xmm1, %xmm0
    000001c5: 	ja	.Ltmp776 # Offset: 453
.Ltmp778:
    000001c7: 	movsd	%xmm1, (%rdx)
    000001cb: 	jmp	.Ltmp777 # Offset: 459
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp760:
    000001d0: 	retq # Offset: 464
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp769:
    000001d8: 	movq	%r12, %rdx
    000001db: 	addq	$0x8, %r12
    000001df: 	movsd	%xmm1, (%rdx)
    000001e3: 	cmpq	%r12, %r13
    000001e6: 	jne	.Ltmp771 # Offset: 486
    000001ec: 	jmp	.Ltmp768 # Offset: 492
.Ltmp775:
    000001f1: 	movq	%rbx, %rdx
    000001f4: 	jmp	.Ltmp778 # Offset: 500
.Ltmp766:
    000001f6: 	movq	%rbx, %rdx
    000001f9: 	jmp	.Ltmp779 # Offset: 505
DWARF CFI Instructions:
    <empty>
End of Function "_Z12compare_sortIPdSt4lessIdEEvT_S3_T0_"

Binary Function "_ZSt16__insertion_sortIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x6510
  Size        : 0xe9
  MaxSize     : 0xf0
  Offset      : 0x6510
  Section     : .text
  Orc Section : .local.text._ZSt16__insertion_sortIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp780 # Offset: 7
    0000000d: 	pushq	%r15
    0000000f: 	pushq	%r14
    00000011: 	movq	%rsi, %r14
    00000014: 	pushq	%r13
    00000016: 	pushq	%r12
    00000018: 	movq	%rdx, %r12
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	leaq	0x8(%rdi), %rbx
    00000024: 	subq	$0x18, %rsp
    00000028: 	cmpq	%rbx, %rsi
    0000002b: 	jne	.Ltmp781 # Offset: 43
    0000002d: 	jmp	.Ltmp782 # Offset: 45
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp784:
    00000038: 	movsd	(%rbx), %xmm0
    0000003c: 	cmpq	%rbx, %rbp
    0000003f: 	je	.Ltmp783 # Offset: 63
    00000041: 	movl	$0x8, %eax
    00000046: 	movq	%rbx, %rdx
    00000049: 	movq	%rbp, %rsi
    0000004c: 	movsd	%xmm0, 0x8(%rsp)
    00000052: 	subq	%rbp, %rdx
    00000055: 	leaq	(%rbp,%rax), %rdi
    0000005a: 	callq	memmove@PLT # Offset: 90
    0000005f: 	movsd	0x8(%rsp), %xmm0
.Ltmp783:
    00000065: 	addq	$0x8, %rbx
    00000069: 	movsd	%xmm0, (%rbp)
    0000006e: 	cmpq	%rbx, %r14
    00000071: 	je	.Ltmp782 # Offset: 113
.Ltmp781:
    00000073: 	movsd	(%rbp), %xmm1
    00000078: 	movsd	(%rbx), %xmm0
    0000007c: 	callq	*%r12 # Offset: 124
    0000007f: 	testb	%al, %al
    00000081: 	jne	.Ltmp784 # Offset: 129
    00000083: 	movsd	(%rbx), %xmm2
    00000087: 	movq	%rbx, %r15
    0000008a: 	movsd	%xmm2, 0x8(%rsp)
    00000090: 	jmp	.Ltmp785 # Offset: 144
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp786:
    00000098: 	movsd	(%r15), %xmm0
    0000009d: 	movsd	%xmm0, 0x8(%r15)
.Ltmp785:
    000000a3: 	movsd	-0x8(%r15), %xmm1
    000000a9: 	movsd	0x8(%rsp), %xmm0
    000000af: 	movq	%r15, %r13
    000000b2: 	subq	$0x8, %r15
    000000b6: 	callq	*%r12 # Offset: 182
    000000b9: 	testb	%al, %al
    000000bb: 	jne	.Ltmp786 # Offset: 187
    000000bd: 	movsd	0x8(%rsp), %xmm3
    000000c3: 	addq	$0x8, %rbx
    000000c7: 	movsd	%xmm3, (%r13)
    000000cd: 	cmpq	%rbx, %r14
    000000d0: 	jne	.Ltmp781 # Offset: 208
.Ltmp782:
    000000d2: 	addq	$0x18, %rsp
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	popq	%r12
    000000da: 	popq	%r13
    000000dc: 	popq	%r14
    000000de: 	popq	%r15
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp780:
    000000e8: 	retq # Offset: 232
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__insertion_sortIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_"

Binary Function "_ZSt22__move_median_to_firstIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_S7_T0_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x6600
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0x6600
  Section     : .text
  Orc Section : .local.text._ZSt22__move_median_to_firstIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	movsd	(%rdx), %xmm1
    00000008: 	movsd	(%rsi), %xmm0
    0000000c: 	pushq	%r14
    0000000e: 	movq	%rcx, %r14
    00000011: 	pushq	%r13
    00000013: 	movq	%rdi, %r13
    00000016: 	pushq	%r12
    00000018: 	movq	%rsi, %r12
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%r8, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdx, %rbx
    00000023: 	callq	*%r8 # Offset: 35
    00000026: 	movsd	(%r14), %xmm1
    0000002b: 	testb	%al, %al
    0000002d: 	je	.Ltmp787 # Offset: 45
    0000002f: 	movsd	(%rbx), %xmm0
    00000033: 	callq	*%rbp # Offset: 51
    00000035: 	testb	%al, %al
    00000037: 	je	.Ltmp788 # Offset: 55
    0000003d: 	movsd	(%r13), %xmm0
    00000043: 	movsd	(%rbx), %xmm1
    00000047: 	movsd	%xmm1, (%r13)
    0000004d: 	movsd	%xmm0, (%rbx)
    00000051: 	popq	%rbx
    00000052: 	popq	%rbp
    00000053: 	popq	%r12
    00000055: 	popq	%r13
    00000057: 	popq	%r14
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp787:
    00000060: 	movsd	(%r12), %xmm0
    00000066: 	callq	*%rbp # Offset: 102
    00000068: 	testb	%al, %al
    0000006a: 	je	.Ltmp789 # Offset: 106
    0000006c: 	movsd	(%r13), %xmm0
.Ltmp791:
    00000072: 	movsd	(%r12), %xmm1
    00000078: 	popq	%rbx
    00000079: 	popq	%rbp
    0000007a: 	movsd	%xmm1, (%r13)
    00000080: 	movsd	%xmm0, (%r12)
    00000086: 	popq	%r12
    00000088: 	popq	%r13
    0000008a: 	popq	%r14
    0000008c: 	retq # Offset: 140
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp789:
    00000090: 	movsd	(%rbx), %xmm0
    00000094: 	movsd	(%r14), %xmm1
    00000099: 	callq	*%rbp # Offset: 153
    0000009b: 	movsd	(%r13), %xmm0
    000000a1: 	testb	%al, %al
    000000a3: 	je	.Ltmp790 # Offset: 163
    000000a5: 	movsd	(%r14), %xmm1
    000000aa: 	movsd	%xmm1, (%r13)
    000000b0: 	movsd	%xmm0, (%r14)
.Ltmp792:
    000000b5: 	popq	%rbx
    000000b6: 	popq	%rbp
    000000b7: 	popq	%r12
    000000b9: 	popq	%r13
    000000bb: 	popq	%r14
    000000bd: 	retq # Offset: 189
    000000be: 	nop # Size: 2
.Ltmp788:
    000000c0: 	movsd	(%r12), %xmm0
    000000c6: 	movsd	(%r14), %xmm1
    000000cb: 	callq	*%rbp # Offset: 203
    000000cd: 	movsd	(%r13), %xmm0
    000000d3: 	testb	%al, %al
    000000d5: 	je	.Ltmp791 # Offset: 213
    000000d7: 	movsd	(%r14), %xmm1
    000000dc: 	movsd	%xmm1, (%r13)
    000000e2: 	movsd	%xmm0, (%r14)
    000000e7: 	jmp	.Ltmp792 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp790:
    000000f0: 	movsd	(%rbx), %xmm1
    000000f4: 	movsd	%xmm1, (%r13)
    000000fa: 	movsd	%xmm0, (%rbx)
    000000fe: 	popq	%rbx
    000000ff: 	popq	%rbp
    00000100: 	popq	%r12
    00000102: 	popq	%r13
    00000104: 	popq	%r14
    00000106: 	retq # Offset: 262
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt22__move_median_to_firstIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_S7_T0_"

Binary Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_T0_S8_T1_T2_" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x6710
  Size        : 0x195
  MaxSize     : 0x1a0
  Offset      : 0x6710
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_T0_S8_T1_T2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdx), %rax
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rax, %r12
    00000013: 	pushq	%rbp
    00000014: 	shrq	$0x3f, %r12
    00000018: 	movq	%rdi, %rbp
    0000001b: 	movq	%rdx, %rdi
    0000001e: 	pushq	%rbx
    0000001f: 	addq	%rax, %r12
    00000022: 	andl	$0x1, %edi
    00000025: 	movq	%rcx, %rbx
    00000028: 	sarq	%r12
    0000002b: 	subq	$0x28, %rsp
    0000002f: 	movq	%rsi, 0x8(%rsp)
    00000034: 	movq	%rdx, 0x18(%rsp)
    00000039: 	movq	%rdi, 0x10(%rsp)
    0000003e: 	movsd	%xmm0, (%rsp)
    00000043: 	cmpq	%r12, %rsi
    00000046: 	jge	.Ltmp793 # Offset: 70
    0000004c: 	movq	%rsi, %r13
    0000004f: 	jmp	.Ltmp794 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp796:
    00000058: 	subq	$0x1, %r15
    0000005c: 	leaq	(%rbp,%r15,8), %r14
    00000061: 	movsd	(%r14), %xmm0
    00000066: 	movsd	%xmm0, (%rbp,%r13,8)
    0000006d: 	cmpq	%r12, %r15
    00000070: 	jge	.Ltmp795 # Offset: 112
.Ltmp797:
    00000072: 	movq	%r15, %r13
.Ltmp794:
    00000075: 	leaq	0x1(%r13), %rax
    00000079: 	leaq	(%rax,%rax), %r15
    0000007d: 	shlq	$0x4, %rax
    00000081: 	leaq	(%rbp,%rax), %r14
    00000086: 	movsd	-0x8(%rbp,%rax), %xmm1
    0000008c: 	movsd	(%r14), %xmm0
    00000091: 	callq	*%rbx # Offset: 145
    00000093: 	testb	%al, %al
    00000095: 	jne	.Ltmp796 # Offset: 149
    00000097: 	movsd	(%r14), %xmm0
    0000009c: 	movsd	%xmm0, (%rbp,%r13,8)
    000000a3: 	cmpq	%r12, %r15
    000000a6: 	jl	.Ltmp797 # Offset: 166
.Ltmp795:
    000000a8: 	cmpq	$0x0, 0x10(%rsp)
    000000ae: 	je	.Ltmp798 # Offset: 174
.Ltmp803:
    000000b4: 	leaq	-0x1(%r15), %rax
    000000b8: 	movq	%rax, %r12
    000000bb: 	shrq	$0x3f, %r12
    000000bf: 	addq	%rax, %r12
    000000c2: 	sarq	%r12
    000000c5: 	cmpq	0x8(%rsp), %r15
    000000ca: 	jg	.Ltmp799 # Offset: 202
    000000cc: 	jmp	.Ltmp800 # Offset: 204
    000000ce: 	nop # Size: 2
.Ltmp802:
    000000d0: 	leaq	-0x1(%r12), %rdx
    000000d5: 	movsd	(%r13), %xmm0
    000000db: 	movq	%r12, %r15
    000000de: 	movq	%rdx, %rax
    000000e1: 	shrq	$0x3f, %rax
    000000e5: 	movsd	%xmm0, (%r14)
    000000ea: 	addq	%rdx, %rax
    000000ed: 	sarq	%rax
    000000f0: 	cmpq	%r12, 0x8(%rsp)
    000000f5: 	jge	.Ltmp801 # Offset: 245
    000000fb: 	movq	%rax, %r12
.Ltmp799:
    000000fe: 	leaq	(%rbp,%r12,8), %r13
    00000103: 	movsd	(%rsp), %xmm1
    00000108: 	leaq	(%rbp,%r15,8), %r14
    0000010d: 	movsd	(%r13), %xmm0
    00000113: 	callq	*%rbx # Offset: 275
    00000115: 	testb	%al, %al
    00000117: 	jne	.Ltmp802 # Offset: 279
.Ltmp800:
    00000119: 	movsd	(%rsp), %xmm2
    0000011e: 	movsd	%xmm2, (%r14)
    00000123: 	addq	$0x28, %rsp
    00000127: 	popq	%rbx
    00000128: 	popq	%rbp
    00000129: 	popq	%r12
    0000012b: 	popq	%r13
    0000012d: 	popq	%r14
    0000012f: 	popq	%r15
    00000131: 	retq # Offset: 305
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp793:
    00000138: 	cmpq	$0x0, 0x10(%rsp)
    0000013e: 	movq	%rsi, %rax
    00000141: 	leaq	(%rbp,%rsi,8), %r14
    00000146: 	jne	.Ltmp800 # Offset: 326
    00000148: 	movq	%rax, %r15
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp798:
    00000150: 	movq	0x18(%rsp), %r13
    00000155: 	subq	$0x2, %r13
    00000159: 	movq	%r13, %rax
    0000015c: 	shrq	$0x3f, %rax
    00000160: 	addq	%r13, %rax
    00000163: 	sarq	%rax
    00000166: 	cmpq	%r15, %rax
    00000169: 	jne	.Ltmp803 # Offset: 361
    0000016f: 	leaq	0x2(%r15,%r15), %r15
    00000174: 	movsd	-0x8(%rbp,%r15,8), %xmm0
    0000017b: 	subq	$0x1, %r15
    0000017f: 	movsd	%xmm0, (%r14)
    00000184: 	leaq	(%rbp,%r15,8), %r14
    00000189: 	jmp	.Ltmp803 # Offset: 393
    0000018e: 	nop # Size: 2
.Ltmp801:
    00000190: 	movq	%r13, %r14
    00000193: 	jmp	.Ltmp800 # Offset: 403
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_T0_S8_T1_T2_"

Binary Function "_ZSt13__heap_selectIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_T0_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x68b0
  Size        : 0xd7
  MaxSize     : 0xe0
  Offset      : 0x68b0
  Section     : .text
  Orc Section : .local.text._ZSt13__heap_selectIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rcx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdi, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rsi, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%rax, 0x8(%rsp)
    00000029: 	cmpq	$0x8, %rax
    0000002d: 	jle	.Ltmp804 # Offset: 45
    0000002f: 	movq	%rax, %r15
    00000032: 	sarq	$0x3, %r15
    00000036: 	leaq	-0x2(%r15), %rdx
    0000003a: 	movq	%rdx, %rax
    0000003d: 	shrq	$0x3f, %rax
    00000041: 	addq	%rdx, %rax
    00000044: 	sarq	%rax
    00000047: 	movq	%rax, %r14
    0000004a: 	jmp	.Ltmp805 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp806:
    00000050: 	subq	$0x1, %r14
.Ltmp805:
    00000054: 	movsd	(%rbp,%r14,8), %xmm0
    0000005b: 	movq	%r12, %rcx
    0000005e: 	movq	%r15, %rdx
    00000061: 	movq	%r14, %rsi
    00000064: 	movq	%rbp, %rdi
    00000067: 	callq	_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_T0_S8_T1_T2_ # Offset: 103
    0000006c: 	testq	%r14, %r14
    0000006f: 	jne	.Ltmp806 # Offset: 111
.Ltmp804:
    00000071: 	movq	0x8(%rsp), %r14
    00000076: 	sarq	$0x3, %r14
    0000007a: 	cmpq	%r13, %rbx
    0000007d: 	jb	.Ltmp807 # Offset: 125
    0000007f: 	jmp	.Ltmp808 # Offset: 127
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp809:
    00000088: 	addq	$0x8, %rbx
    0000008c: 	cmpq	%rbx, %r13
    0000008f: 	jbe	.Ltmp808 # Offset: 143
.Ltmp807:
    00000091: 	movsd	(%rbp), %xmm1
    00000096: 	movsd	(%rbx), %xmm0
    0000009a: 	callq	*%r12 # Offset: 154
    0000009d: 	testb	%al, %al
    0000009f: 	je	.Ltmp809 # Offset: 159
    000000a1: 	movsd	(%rbp), %xmm1
    000000a6: 	movsd	(%rbx), %xmm0
    000000aa: 	movq	%r12, %rcx
    000000ad: 	movq	%r14, %rdx
    000000b0: 	xorl	%esi, %esi
    000000b2: 	movq	%rbp, %rdi
    000000b5: 	addq	$0x8, %rbx
    000000b9: 	movsd	%xmm1, -0x8(%rbx)
    000000be: 	callq	_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_T0_S8_T1_T2_ # Offset: 190
    000000c3: 	cmpq	%rbx, %r13
    000000c6: 	ja	.Ltmp807 # Offset: 198
.Ltmp808:
    000000c8: 	addq	$0x18, %rsp
    000000cc: 	popq	%rbx
    000000cd: 	popq	%rbp
    000000ce: 	popq	%r12
    000000d0: 	popq	%r13
    000000d2: 	popq	%r14
    000000d4: 	popq	%r15
    000000d6: 	retq # Offset: 214
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__heap_selectIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_T0_"

Binary Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_.constprop.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_.constprop.0/1
                _ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_.constprop.0/functionobjects.cpp/1
  Number      : 59
  State       : disassembled
  Address     : 0x6990
  Size        : 0x1a3
  MaxSize     : 0x1b0
  Offset      : 0x6990
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	movq	%rsi, %rax
    00000003: 	subq	%rdi, %rax
    00000006: 	cmpq	$0x80, %rax
    0000000c: 	jle	.Ltmp810 # Offset: 12
    00000012: 	pushq	%r14
    00000014: 	movq	%rdx, %r14
    00000017: 	pushq	%r13
    00000019: 	leaq	0x8(%rdi), %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	movq	%rdi, %rbp
    00000026: 	pushq	%rbx
    00000027: 	testq	%rdx, %rdx
    0000002a: 	je	.Ltmp811 # Offset: 42
.Ltmp824:
    00000030: 	movupd	(%rbp), %xmm0
    00000035: 	sarq	$0x4, %rax
    00000039: 	subq	$0x1, %r14
    0000003d: 	movsd	-0x8(%rsi), %xmm3
    00000042: 	leaq	(%rbp,%rax,8), %rax
    00000047: 	movapd	%xmm0, %xmm4
    0000004b: 	movsd	(%rax), %xmm2
    0000004f: 	movapd	%xmm0, %xmm1
    00000053: 	shufpd	$0x1, %xmm0, %xmm4
    00000058: 	unpckhpd	%xmm0, %xmm0
    0000005c: 	comisd	%xmm0, %xmm2
    00000060: 	jbe	.Ltmp812 # Offset: 96
    00000062: 	comisd	%xmm2, %xmm3
    00000066: 	ja	.Ltmp813 # Offset: 102
    0000006c: 	comisd	%xmm0, %xmm3
    00000070: 	ja	.Ltmp814 # Offset: 112
.Ltmp820:
    00000072: 	movups	%xmm4, (%rbp)
    00000076: 	movsd	-0x8(%rsi), %xmm2
.Ltmp821:
    0000007b: 	movq	%rsi, %rax
    0000007e: 	movq	%r13, %rbx
    00000081: 	jmp	.Ltmp815 # Offset: 129
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp816:
    00000088: 	movsd	0x8(%rbx), %xmm1
    0000008d: 	addq	$0x8, %rbx
.Ltmp815:
    00000091: 	comisd	%xmm1, %xmm0
    00000095: 	ja	.Ltmp816 # Offset: 149
    00000097: 	subq	$0x8, %rax
    0000009b: 	comisd	%xmm0, %xmm2
    0000009f: 	jbe	.Ltmp817 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp818:
    000000a8: 	movsd	-0x8(%rax), %xmm2
    000000ad: 	subq	$0x8, %rax
    000000b1: 	comisd	%xmm0, %xmm2
    000000b5: 	ja	.Ltmp818 # Offset: 181
.Ltmp817:
    000000b7: 	cmpq	%rax, %rbx
    000000ba: 	jae	.Ltmp819 # Offset: 186
    000000bc: 	movsd	%xmm2, (%rbx)
    000000c0: 	addq	$0x8, %rbx
    000000c4: 	movsd	-0x8(%rax), %xmm2
    000000c9: 	movsd	%xmm1, (%rax)
    000000cd: 	movsd	(%rbx), %xmm1
    000000d1: 	movsd	(%rbp), %xmm0
    000000d6: 	jmp	.Ltmp815 # Offset: 214
.Ltmp812:
    000000d8: 	comisd	%xmm0, %xmm3
    000000dc: 	ja	.Ltmp820 # Offset: 220
    000000de: 	comisd	%xmm2, %xmm3
    000000e2: 	jbe	.Ltmp813 # Offset: 226
.Ltmp814:
    000000e4: 	movsd	%xmm3, (%rbp)
    000000e9: 	movapd	%xmm1, %xmm2
    000000ed: 	movsd	%xmm1, -0x8(%rsi)
    000000f2: 	movsd	(%rbp), %xmm0
    000000f7: 	movsd	0x8(%rbp), %xmm1
    000000fc: 	jmp	.Ltmp821 # Offset: 252
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp819:
    00000108: 	movq	%r12, %rcx
    0000010b: 	movq	%r14, %rdx
    0000010e: 	movq	%rbx, %rdi
    00000111: 	callq	"_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_.constprop.0/1" # Offset: 273
    00000116: 	movq	%rbx, %rax
    00000119: 	subq	%rbp, %rax
    0000011c: 	cmpq	$0x80, %rax
    00000122: 	jle	.Ltmp822 # Offset: 290
    00000124: 	testq	%r14, %r14
    00000127: 	je	.Ltmp823 # Offset: 295
    00000129: 	movq	%rbx, %rsi
    0000012c: 	jmp	.Ltmp824 # Offset: 300
.Ltmp813:
    00000131: 	movsd	%xmm2, (%rbp)
    00000136: 	movsd	%xmm1, (%rax)
    0000013a: 	movsd	(%rbp), %xmm0
    0000013f: 	movsd	0x8(%rbp), %xmm1
    00000144: 	movsd	-0x8(%rsi), %xmm2
    00000149: 	jmp	.Ltmp821 # Offset: 329
.Ltmp811:
    0000014e: 	movq	%rsi, %rbx
.Ltmp823:
    00000151: 	movq	%r12, %rcx
    00000154: 	movq	%rbx, %rdx
    00000157: 	movq	%rbx, %rsi
    0000015a: 	movq	%rbp, %rdi
    0000015d: 	callq	_ZSt13__heap_selectIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_T0_ # Offset: 349
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp825:
    00000168: 	subq	$0x8, %rbx
    0000016c: 	movsd	(%rbp), %xmm1
    00000171: 	movsd	(%rbx), %xmm0
    00000175: 	xorl	%esi, %esi
    00000177: 	movq	%rbx, %r13
    0000017a: 	movq	%r12, %rcx
    0000017d: 	movq	%rbp, %rdi
    00000180: 	subq	%rbp, %r13
    00000183: 	movsd	%xmm1, (%rbx)
    00000187: 	movq	%r13, %rdx
    0000018a: 	sarq	$0x3, %rdx
    0000018e: 	callq	_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_T0_S8_T1_T2_ # Offset: 398
    00000193: 	cmpq	$0x8, %r13
    00000197: 	jg	.Ltmp825 # Offset: 407
.Ltmp822:
    00000199: 	popq	%rbx
    0000019a: 	popq	%rbp
    0000019b: 	popq	%r12
    0000019d: 	popq	%r13
    0000019f: 	popq	%r14
    000001a1: 	retq # Offset: 417
.Ltmp810:
    000001a2: 	retq # Offset: 418
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_.constprop.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x6b40
  Size        : 0x142
  MaxSize     : 0x150
  Offset      : 0x6b40
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x80, %rax
    00000010: 	jle	.Ltmp826 # Offset: 16
    00000016: 	pushq	%r15
    00000018: 	movq	%rdx, %r15
    0000001b: 	pushq	%r14
    0000001d: 	movq	%rsi, %r14
    00000020: 	pushq	%r13
    00000022: 	movq	%rcx, %r13
    00000025: 	pushq	%r12
    00000027: 	movq	%rdi, %r12
    0000002a: 	pushq	%rbp
    0000002b: 	pushq	%rbx
    0000002c: 	subq	$0x18, %rsp
    00000030: 	testq	%rdx, %rdx
    00000033: 	je	.Ltmp827 # Offset: 51
    00000039: 	leaq	0x8(%r12), %rsi
    0000003e: 	movq	%rsi, 0x8(%rsp)
.Ltmp834:
    00000043: 	movq	0x8(%rsp), %rbx
    00000048: 	sarq	$0x4, %rax
    0000004c: 	leaq	-0x8(%r14), %rcx
    00000050: 	movq	%r13, %r8
    00000053: 	leaq	(%r12,%rax,8), %rdx
    00000057: 	movq	%r12, %rdi
    0000005a: 	subq	$0x1, %r15
    0000005e: 	movq	%r14, %rbp
    00000061: 	movq	%rbx, %rsi
    00000064: 	callq	_ZSt22__move_median_to_firstIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_S7_T0_ # Offset: 100
    00000069: 	jmp	.Ltmp828 # Offset: 105
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp829:
    00000070: 	addq	$0x8, %rbx
.Ltmp828:
    00000074: 	movsd	(%r12), %xmm1
    0000007a: 	movsd	(%rbx), %xmm0
    0000007e: 	callq	*%r13 # Offset: 126
    00000081: 	testb	%al, %al
    00000083: 	jne	.Ltmp829 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp830:
    00000088: 	subq	$0x8, %rbp
    0000008c: 	movsd	(%r12), %xmm0
    00000092: 	movsd	(%rbp), %xmm1
    00000097: 	callq	*%r13 # Offset: 151
    0000009a: 	testb	%al, %al
    0000009c: 	jne	.Ltmp830 # Offset: 156
    0000009e: 	cmpq	%rbp, %rbx
    000000a1: 	jae	.Ltmp831 # Offset: 161
    000000a3: 	movsd	(%rbx), %xmm0
    000000a7: 	movsd	(%rbp), %xmm1
    000000ac: 	addq	$0x8, %rbx
    000000b0: 	movsd	%xmm1, -0x8(%rbx)
    000000b5: 	movsd	%xmm0, (%rbp)
    000000ba: 	jmp	.Ltmp828 # Offset: 186
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp831:
    000000c0: 	movq	%r13, %rcx
    000000c3: 	movq	%r15, %rdx
    000000c6: 	movq	%r14, %rsi
    000000c9: 	movq	%rbx, %rdi
    000000cc: 	callq	_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_ # Offset: 204
    000000d1: 	movq	%rbx, %rax
    000000d4: 	subq	%r12, %rax
    000000d7: 	cmpq	$0x80, %rax
    000000dd: 	jle	.Ltmp832 # Offset: 221
    000000df: 	testq	%r15, %r15
    000000e2: 	je	.Ltmp833 # Offset: 226
    000000e4: 	movq	%rbx, %r14
    000000e7: 	jmp	.Ltmp834 # Offset: 231
.Ltmp827:
    000000ec: 	movq	%rsi, %rbx
.Ltmp833:
    000000ef: 	movq	%r13, %rcx
    000000f2: 	movq	%rbx, %rdx
    000000f5: 	movq	%rbx, %rsi
    000000f8: 	movq	%r12, %rdi
    000000fb: 	callq	_ZSt13__heap_selectIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_T0_ # Offset: 251
.Ltmp835:
    00000100: 	subq	$0x8, %rbx
    00000104: 	movsd	(%r12), %xmm1
    0000010a: 	movsd	(%rbx), %xmm0
    0000010e: 	xorl	%esi, %esi
    00000110: 	movq	%rbx, %rbp
    00000113: 	movq	%r13, %rcx
    00000116: 	movq	%r12, %rdi
    00000119: 	subq	%r12, %rbp
    0000011c: 	movsd	%xmm1, (%rbx)
    00000120: 	movq	%rbp, %rdx
    00000123: 	sarq	$0x3, %rdx
    00000127: 	callq	_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_T0_S8_T1_T2_ # Offset: 295
    0000012c: 	cmpq	$0x8, %rbp
    00000130: 	jg	.Ltmp835 # Offset: 304
.Ltmp832:
    00000132: 	addq	$0x18, %rsp
    00000136: 	popq	%rbx
    00000137: 	popq	%rbp
    00000138: 	popq	%r12
    0000013a: 	popq	%r13
    0000013c: 	popq	%r14
    0000013e: 	popq	%r15
    00000140: 	retq # Offset: 320
.Ltmp826:
    00000141: 	retq # Offset: 321
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_"

Binary Function "_Z12compare_sortIPdFbddEEvT_S2_T0_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x6c90
  Size        : 0xf1
  MaxSize     : 0x100
  Offset      : 0x6c90
  Section     : .text
  Orc Section : .local.text._Z12compare_sortIPdFbddEEvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp836 # Offset: 7
    0000000d: 	pushq	%r15
    0000000f: 	pushq	%r14
    00000011: 	movq	%rsi, %r14
    00000014: 	pushq	%r13
    00000016: 	pushq	%r12
    00000018: 	movq	%rdx, %r12
    0000001b: 	movl	$0x3f, %edx
    00000020: 	pushq	%rbp
    00000021: 	movq	%r12, %rcx
    00000024: 	movq	%rdi, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movq	%rsi, %rbx
    0000002b: 	subq	%rdi, %rbx
    0000002e: 	movq	%rbx, %rax
    00000031: 	sarq	$0x3, %rax
    00000035: 	subq	$0x8, %rsp
    00000039: 	bsrq	%rax, %rax
    0000003d: 	xorq	$0x3f, %rax
    00000041: 	subl	%eax, %edx
    00000043: 	movslq	%edx, %rdx
    00000046: 	addq	%rdx, %rdx
    00000049: 	callq	_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_ # Offset: 73
    0000004e: 	cmpq	$0x80, %rbx
    00000055: 	jle	.Ltmp837 # Offset: 85
    00000057: 	leaq	0x80(%rbp), %r13
    0000005e: 	movq	%r12, %rdx
    00000061: 	movq	%rbp, %rdi
    00000064: 	movq	%r13, %rsi
    00000067: 	callq	_ZSt16__insertion_sortIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_ # Offset: 103
    0000006c: 	cmpq	%r13, %r14
    0000006f: 	je	.Ltmp838 # Offset: 111
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp841:
    00000078: 	movsd	(%r13), %xmm2
    0000007e: 	movq	%r13, %rbx
    00000081: 	movq	%xmm2, %r15
    00000086: 	jmp	.Ltmp839 # Offset: 134
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp840:
    00000090: 	movsd	(%rbx), %xmm0
    00000094: 	movsd	%xmm0, 0x8(%rbx)
.Ltmp839:
    00000099: 	movsd	-0x8(%rbx), %xmm1
    0000009e: 	movq	%r15, %xmm0
    000000a3: 	movq	%rbx, %rbp
    000000a6: 	subq	$0x8, %rbx
    000000aa: 	callq	*%r12 # Offset: 170
    000000ad: 	testb	%al, %al
    000000af: 	jne	.Ltmp840 # Offset: 175
    000000b1: 	addq	$0x8, %r13
    000000b5: 	movq	%r15, (%rbp)
    000000b9: 	cmpq	%r13, %r14
    000000bc: 	jne	.Ltmp841 # Offset: 188
.Ltmp838:
    000000be: 	addq	$0x8, %rsp
    000000c2: 	popq	%rbx
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	popq	%r15
    000000cc: 	retq # Offset: 204
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp837:
    000000d0: 	addq	$0x8, %rsp
    000000d4: 	movq	%r12, %rdx
    000000d7: 	movq	%r14, %rsi
    000000da: 	movq	%rbp, %rdi
    000000dd: 	popq	%rbx
    000000de: 	popq	%rbp
    000000df: 	popq	%r12
    000000e1: 	popq	%r13
    000000e3: 	popq	%r14
    000000e5: 	popq	%r15
    000000e7: 	jmp	_ZSt16__insertion_sortIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_ # TAILCALL  # Offset: 231
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp836:
    000000f0: 	retq # Offset: 240
DWARF CFI Instructions:
    <empty>
End of Function "_Z12compare_sortIPdFbddEEvT_S2_T0_"

Binary Function "_Z13compare_sort2IPdXadL_Z19less_than_function2ddEEEvT_S1_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x6d90
  Size        : 0x38b
  MaxSize     : 0x38b
  Offset      : 0x6d90
  Section     : .text
  Orc Section : .local.text._Z13compare_sort2IPdXadL_Z19less_than_function2ddEEEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp842 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	pushq	%r15
    00000012: 	movl	$0x3f, %r15d
    00000018: 	pushq	%r14
    0000001a: 	subq	%rdi, %rax
    0000001d: 	leaq	0x8(%rdi), %r14
    00000021: 	pushq	%r13
    00000023: 	movq	%rax, %rdx
    00000026: 	movq	%rdi, %r13
    00000029: 	pushq	%r12
    0000002b: 	sarq	$0x3, %rdx
    0000002f: 	leaq	_Z19less_than_function2dd(%rip), %r12
    00000036: 	pushq	%rbp
    00000037: 	movq	%rsi, %rbp
    0000003a: 	pushq	%rbx
    0000003b: 	subq	$0x18, %rsp
    0000003f: 	bsrq	%rdx, %rdx
    00000043: 	xorq	$0x3f, %rdx
    00000047: 	subl	%edx, %r15d
    0000004a: 	movslq	%r15d, %r15
    0000004d: 	addq	%r15, %r15
    00000050: 	cmpq	$0x80, %rax
    00000056: 	jle	.Ltmp843 # Offset: 86
.Ltmp858:
    0000005c: 	movupd	(%r13), %xmm0
    00000062: 	sarq	$0x4, %rax
    00000066: 	subq	$0x1, %r15
    0000006a: 	movsd	-0x8(%rsi), %xmm3
    0000006f: 	leaq	(%r13,%rax,8), %rax
    00000074: 	movapd	%xmm0, %xmm4
    00000078: 	movsd	(%rax), %xmm2
    0000007c: 	movapd	%xmm0, %xmm1
    00000080: 	shufpd	$0x1, %xmm0, %xmm4
    00000085: 	unpckhpd	%xmm0, %xmm0
    00000089: 	comisd	%xmm0, %xmm2
    0000008d: 	jbe	.Ltmp844 # Offset: 141
    00000093: 	comisd	%xmm2, %xmm3
    00000097: 	ja	.Ltmp845 # Offset: 151
    0000009d: 	comisd	%xmm0, %xmm3
    000000a1: 	ja	.Ltmp846 # Offset: 161
.Ltmp854:
    000000a7: 	movups	%xmm4, (%r13)
    000000ac: 	movsd	-0x8(%rsi), %xmm2
.Ltmp855:
    000000b1: 	comisd	%xmm1, %xmm0
    000000b5: 	movq	%rsi, %rax
    000000b8: 	movq	%r14, %rdx
    000000bb: 	ja	.Ltmp847 # Offset: 187
    000000bd: 	jmp	.Ltmp848 # Offset: 189
    000000bf: 	nop # Size: 1
.Ltmp849:
    000000c0: 	movq	%rbx, %rdx
.Ltmp847:
    000000c3: 	movsd	0x8(%rdx), %xmm1
    000000c8: 	leaq	0x8(%rdx), %rbx
    000000cc: 	comisd	%xmm1, %xmm0
    000000d0: 	ja	.Ltmp849 # Offset: 208
.Ltmp853:
    000000d2: 	subq	$0x8, %rax
    000000d6: 	comisd	%xmm0, %xmm2
    000000da: 	jbe	.Ltmp850 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp851:
    000000e0: 	movsd	-0x8(%rax), %xmm2
    000000e5: 	subq	$0x8, %rax
    000000e9: 	comisd	%xmm0, %xmm2
    000000ed: 	ja	.Ltmp851 # Offset: 237
.Ltmp850:
    000000ef: 	cmpq	%rax, %rbx
    000000f2: 	jae	.Ltmp852 # Offset: 242
    000000f4: 	movsd	%xmm2, (%rbx)
    000000f8: 	leaq	0x8(%rbx), %rdx
    000000fc: 	movsd	-0x8(%rax), %xmm2
    00000101: 	movsd	%xmm1, (%rax)
    00000105: 	movsd	0x8(%rbx), %xmm1
    0000010a: 	movsd	(%r13), %xmm0
    00000110: 	comisd	%xmm1, %xmm0
    00000114: 	ja	.Ltmp847 # Offset: 276
.Ltmp848:
    00000116: 	movq	%rdx, %rbx
    00000119: 	jmp	.Ltmp853 # Offset: 281
.Ltmp844:
    0000011b: 	comisd	%xmm0, %xmm3
    0000011f: 	ja	.Ltmp854 # Offset: 287
    00000125: 	comisd	%xmm2, %xmm3
    00000129: 	jbe	.Ltmp845 # Offset: 297
.Ltmp846:
    0000012b: 	movsd	%xmm3, (%r13)
    00000131: 	movapd	%xmm1, %xmm2
    00000135: 	movsd	%xmm1, -0x8(%rsi)
    0000013a: 	movsd	(%r13), %xmm0
    00000140: 	movsd	0x8(%r13), %xmm1
    00000146: 	jmp	.Ltmp855 # Offset: 326
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp852:
    00000150: 	movq	%r12, %rcx
    00000153: 	movq	%r15, %rdx
    00000156: 	movq	%rbx, %rdi
    00000159: 	callq	"_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_T0_T1_.constprop.0/1" # Offset: 345
    0000015e: 	movq	%rbx, %rax
    00000161: 	subq	%r13, %rax
    00000164: 	cmpq	$0x80, %rax
    0000016a: 	jle	.Ltmp856 # Offset: 362
    00000170: 	testq	%r15, %r15
    00000173: 	je	.Ltmp857 # Offset: 371
    00000179: 	movq	%rbx, %rsi
    0000017c: 	jmp	.Ltmp858 # Offset: 380
.Ltmp845:
    00000181: 	movsd	%xmm2, (%r13)
    00000187: 	movsd	%xmm1, (%rax)
    0000018b: 	movsd	(%r13), %xmm0
    00000191: 	movsd	0x8(%r13), %xmm1
    00000197: 	movsd	-0x8(%rsi), %xmm2
    0000019c: 	jmp	.Ltmp855 # Offset: 412
.Ltmp843:
    000001a1: 	movl	$0x8, %ebx
    000001a6: 	cmpq	%r14, %rsi
    000001a9: 	jne	.Ltmp859 # Offset: 425
    000001ab: 	jmp	.Ltmp860 # Offset: 427
.Ltmp862:
    000001b0: 	cmpq	%r14, %r13
    000001b3: 	je	.Ltmp861 # Offset: 435
    000001b5: 	movq	%r14, %rdx
    000001b8: 	leaq	(%r13,%rbx), %rdi
    000001bd: 	movq	%r13, %rsi
    000001c0: 	movsd	%xmm1, 0x8(%rsp)
    000001c6: 	subq	%r13, %rdx
    000001c9: 	callq	memmove@PLT # Offset: 457
    000001ce: 	movsd	0x8(%rsp), %xmm1
.Ltmp861:
    000001d4: 	addq	$0x8, %r14
    000001d8: 	movsd	%xmm1, (%r13)
    000001de: 	cmpq	%r14, %rbp
    000001e1: 	je	.Ltmp860 # Offset: 481
.Ltmp859:
    000001e3: 	movsd	(%r14), %xmm1
    000001e8: 	movsd	(%r13), %xmm0
    000001ee: 	comisd	%xmm1, %xmm0
    000001f2: 	ja	.Ltmp862 # Offset: 498
    000001f4: 	movsd	-0x8(%r14), %xmm0
    000001fa: 	leaq	-0x8(%r14), %rax
    000001fe: 	comisd	%xmm1, %xmm0
    00000202: 	jbe	.Ltmp863 # Offset: 514
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp864:
    00000210: 	movsd	%xmm0, 0x8(%rax)
    00000215: 	movq	%rax, %rdx
    00000218: 	movsd	-0x8(%rax), %xmm0
    0000021d: 	subq	$0x8, %rax
    00000221: 	comisd	%xmm1, %xmm0
    00000225: 	ja	.Ltmp864 # Offset: 549
.Ltmp875:
    00000227: 	addq	$0x8, %r14
    0000022b: 	movsd	%xmm1, (%rdx)
    0000022f: 	cmpq	%r14, %rbp
    00000232: 	jne	.Ltmp859 # Offset: 562
.Ltmp860:
    00000234: 	addq	$0x18, %rsp
    00000238: 	popq	%rbx
    00000239: 	popq	%rbp
    0000023a: 	popq	%r12
    0000023c: 	popq	%r13
    0000023e: 	popq	%r14
    00000240: 	popq	%r15
    00000242: 	retq # Offset: 578
.Ltmp842:
    00000243: 	retq # Offset: 579
.Ltmp857:
    00000244: 	movq	%r12, %rcx
    00000247: 	movq	%rbx, %rdx
    0000024a: 	movq	%rbx, %rsi
    0000024d: 	movq	%r13, %rdi
    00000250: 	callq	_ZSt13__heap_selectIPdN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_S7_S7_T0_ # Offset: 592
    00000255: 	nopl	(%rax) # Size: 3
.Ltmp865:
    00000258: 	subq	$0x8, %rbx
    0000025c: 	movsd	(%r13), %xmm1
    00000262: 	movsd	(%rbx), %xmm0
    00000266: 	xorl	%esi, %esi
    00000268: 	movq	%rbx, %r15
    0000026b: 	movq	%r12, %rcx
    0000026e: 	movq	%r13, %rdi
    00000271: 	subq	%r13, %r15
    00000274: 	movsd	%xmm1, (%rbx)
    00000278: 	movq	%r15, %rdx
    0000027b: 	sarq	$0x3, %rdx
    0000027f: 	callq	_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_comp_iterIPFbddEEEEvT_T0_S8_T1_T2_ # Offset: 639
    00000284: 	cmpq	$0x8, %r15
    00000288: 	jg	.Ltmp865 # Offset: 648
.Ltmp856:
    0000028a: 	leaq	0x80(%r13), %rbx
    00000291: 	movl	$0x8, %r12d
    00000297: 	jmp	.Ltmp866 # Offset: 663
.Ltmp869:
    00000299: 	cmpq	%r14, %r13
    0000029c: 	je	.Ltmp867 # Offset: 668
    0000029e: 	movq	%r14, %rdx
    000002a1: 	leaq	(%r13,%r12), %rdi
    000002a6: 	movq	%r13, %rsi
    000002a9: 	movsd	%xmm1, 0x8(%rsp)
    000002af: 	subq	%r13, %rdx
    000002b2: 	callq	memmove@PLT # Offset: 690
    000002b7: 	movsd	0x8(%rsp), %xmm1
.Ltmp867:
    000002bd: 	addq	$0x8, %r14
    000002c1: 	movsd	%xmm1, (%r13)
    000002c7: 	cmpq	%r14, %rbx
    000002ca: 	je	.Ltmp868 # Offset: 714
.Ltmp866:
    000002cc: 	movsd	(%r14), %xmm1
    000002d1: 	movsd	(%r13), %xmm0
    000002d7: 	comisd	%xmm1, %xmm0
    000002db: 	ja	.Ltmp869 # Offset: 731
    000002dd: 	movsd	-0x8(%r14), %xmm0
    000002e3: 	leaq	-0x8(%r14), %rax
    000002e7: 	comisd	%xmm1, %xmm0
    000002eb: 	jbe	.Ltmp870 # Offset: 747
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp871:
    000002f8: 	movsd	%xmm0, 0x8(%rax)
    000002fd: 	movq	%rax, %rdx
    00000300: 	movsd	-0x8(%rax), %xmm0
    00000305: 	subq	$0x8, %rax
    00000309: 	comisd	%xmm1, %xmm0
    0000030d: 	ja	.Ltmp871 # Offset: 781
.Ltmp876:
    0000030f: 	addq	$0x8, %r14
    00000313: 	movsd	%xmm1, (%rdx)
    00000317: 	cmpq	%r14, %rbx
    0000031a: 	jne	.Ltmp866 # Offset: 794
.Ltmp868:
    0000031c: 	cmpq	%rbx, %rbp
    0000031f: 	je	.Ltmp860 # Offset: 799
    00000325: 	nopl	(%rax) # Size: 3
.Ltmp874:
    00000328: 	movsd	(%rbx), %xmm1
    0000032c: 	movsd	-0x8(%rbx), %xmm0
    00000331: 	leaq	-0x8(%rbx), %rax
    00000335: 	comisd	%xmm1, %xmm0
    00000339: 	jbe	.Ltmp872 # Offset: 825
    0000033b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp873:
    00000340: 	movsd	%xmm0, 0x8(%rax)
    00000345: 	movq	%rax, %rdx
    00000348: 	movsd	-0x8(%rax), %xmm0
    0000034d: 	subq	$0x8, %rax
    00000351: 	comisd	%xmm1, %xmm0
    00000355: 	ja	.Ltmp873 # Offset: 853
    00000357: 	addq	$0x8, %rbx
    0000035b: 	movsd	%xmm1, (%rdx)
    0000035f: 	cmpq	%rbx, %rbp
    00000362: 	jne	.Ltmp874 # Offset: 866
    00000364: 	jmp	.Ltmp860 # Offset: 868
.Ltmp872:
    00000369: 	movq	%rbx, %rdx
    0000036c: 	addq	$0x8, %rbx
    00000370: 	movsd	%xmm1, (%rdx)
    00000374: 	cmpq	%rbx, %rbp
    00000377: 	jne	.Ltmp874 # Offset: 887
    00000379: 	jmp	.Ltmp860 # Offset: 889
.Ltmp863:
    0000037e: 	movq	%r14, %rdx
    00000381: 	jmp	.Ltmp875 # Offset: 897
.Ltmp870:
    00000386: 	movq	%r14, %rdx
    00000389: 	jmp	.Ltmp876 # Offset: 905
DWARF CFI Instructions:
    <empty>
End of Function "_Z13compare_sort2IPdXadL_Z19less_than_function2ddEEEvT_S1_"

Binary Function "_fini" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x711c
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x711c
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 64 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 322 instructions were shortened
BOLT-INFO: removed 188 empty blocks
BOLT-INFO: SCTC: patched 3 tail calls (3 forward) tail calls (0 backward) from a total of 3 while removing 0 double jumps and removing 3 basic blocks totalling 15 bytes of code. CTCs total execution count is 0 and the number of times CTCs are taken is 0
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 59 out of 81 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x201c98
