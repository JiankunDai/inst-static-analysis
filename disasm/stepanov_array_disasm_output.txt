BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x16030, which lies outside .bss
BOLT-WARNING: split function detected on input : _Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x15ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x1420
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x1420
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x131b6(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x1319c(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIdEvv # Offset: 100
    00000069: 	movl	iterations(%rip), %eax
    0000006f: 	leal	(%rax,%rax,2), %eax
    00000072: 	movl	%eax, iterations(%rip)
    00000078: 	callq	_Z11TestOneTypeIiEvv # Offset: 120
    0000007d: 	callq	_Z11TestOneTypeImEvv # Offset: 125
    00000082: 	popq	%rbx
    00000083: 	xorl	%eax, %eax
    00000085: 	popq	%rbp
    00000086: 	popq	%r12
    00000088: 	popq	%r13
    0000008a: 	popq	%r14
    0000008c: 	retq # Offset: 140
.Ltmp3:
    0000008d: 	movq	0x8(%r14), %rdi
    00000091: 	movl	$0xa, %edx
    00000096: 	xorl	%esi, %esi
    00000098: 	callq	strtol@PLT # Offset: 152
    0000009d: 	movl	%eax, iterations(%rip)
    000000a3: 	cmpl	$0x2, %r13d
    000000a7: 	jle	.Ltmp4 # Offset: 167
    000000a9: 	movq	0x10(%r14), %rdi
    000000ad: 	xorl	%esi, %esi
    000000af: 	callq	strtod@PLT # Offset: 175
    000000b4: 	movsd	%xmm0, init_value(%rip)
    000000bc: 	jmp	.Ltmp4 # Offset: 188
.Ltmp1:
    000000be: 	leaq	DATAat0x1319c(%rip), %rsi
    000000c5: 	movl	$0x1, %edi
    000000ca: 	xorl	%eax, %eax
    000000cc: 	callq	__printf_chk@PLT # Offset: 204
    000000d1: 	jmp	.Ltmp4 # Offset: 209
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 6
  State       : disassembled
  Address     : 0x15e0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15e0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x15fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1610
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1610
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x15fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1640
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1640
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x15ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x1680
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1680
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 10
  State       : disassembled
  Address     : 0x16c0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16c0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x16d0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x16d0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp9 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp10 # Offset: 38
.Ltmp9:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp11 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp10:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp11:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x13008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1770
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1770
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp12 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp13 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp14:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp14 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp27:
    00000069: 	leaq	DATAat0x131b8(%rip), %rbp
    00000070: 	leaq	DATAat0x13028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x13068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp15 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x13608(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x13098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x13600(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp16 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp20:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp17 # Offset: 244
    000000fa: 	movq	DATAat0x135f0(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp21:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x135f0(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp18 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp18:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x1319d(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x13608(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp19 # Offset: 398
.Ltmp16:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp20 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp21 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp17:
    000001c8: 	movq	DATAat0x135f8(%rip), %rsi
    000001cf: 	movq	DATAat0x135f0(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp18 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp19:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp15 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp22 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp23:
    00000210: 	addq	$0x10, %rax
.Ltmp22:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp23 # Offset: 542
.Ltmp28:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x130c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp24 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp25 # Offset: 592
.Ltmp24:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp12:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp25:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp26:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp26 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x13178(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp12 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp13:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp27 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp15:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp28 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1aa0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1aa0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp29 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp30 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp31:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp31 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp36:
    0000006a: 	leaq	DATAat0x131b8(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x130f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x1319e(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x131b8(%rip), %r8
    000000a1: 	leaq	DATAat0x1318c(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp32 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp33:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x1319d(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp33 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp32 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp34 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp35:
    00000140: 	addq	$0x10, %rax
.Ltmp34:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp35 # Offset: 334
.Ltmp37:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x130c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp29:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp30:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp36 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp32:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp37 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1c50
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1c50
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1c70
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1c70
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x13600(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1cb0
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1cb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1cc0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1cc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1d10
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1d10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1d60
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1d60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1d90
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1d90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1dc0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1dc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1df0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1df0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1e20
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1e20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1e50
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1e50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1e80
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1e80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1eb0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1eb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1ee0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1ee0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x1f10
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1f10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x1f40
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1f40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x1f70
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x1f70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x1fb0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1fb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x1fe0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1fe0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x2010
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2010
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2040
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2070
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2070
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x20a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x20d0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x2100
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2100
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x2130
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2130
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2160
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2160
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2190
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2190
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 43
  State       : disassembled
  Address     : 0x2690
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x2690
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp67 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp70:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp69:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp68 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp69 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp70 # Offset: 142
.Ltmp67:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp71 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp72 # Offset: 164
.Ltmp75:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp73 # Offset: 177
.Ltmp74:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp72 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp74 # Offset: 214
.Ltmp73:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp75 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp76 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp78:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp77 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp77:
    0000010a: 	addq	$0x20, %r13
.Ltmp72:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp78 # Offset: 275
.Ltmp76:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp79 # Offset: 283
.Ltmp85:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp80 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp81:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp81 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp80:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp68:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp69 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp70 # Offset: 389
    0000018b: 	jmp	.Ltmp67 # Offset: 395
.Ltmp71:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp76 # Offset: 405
.Ltmp84:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp82 # Offset: 422
.Ltmp83:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp76 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp83 # Offset: 463
.Ltmp82:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp84 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp85 # Offset: 482
.Ltmp79:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z19test_insertion_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z19test_insertion_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_array.cpp/1
  Number      : 44
  State       : disassembled
  Address     : 0x2890
  Size        : 0x1de
  MaxSize     : 0x1e0
  Offset      : 0x2890
  Section     : .text
  Orc Section : .local.text._Z19test_insertion_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	pushq	%r15
    00000002: 	leaq	DATAat0x131ba(%rip), %r15
    00000009: 	pushq	%r14
    0000000b: 	xorl	%r14d, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movq	%rcx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rdi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rsi, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdx, %rbx
    00000020: 	subq	$0x18, %rsp
    00000024: 	movq	%r8, 0x8(%rsp)
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %r11d
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	testl	%r11d, %r11d
    0000003f: 	jle	.Ltmp86 # Offset: 63
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp97:
    00000048: 	movq	0x8(%rbp), %rcx
    0000004c: 	movq	0x8(%r12), %rdx
    00000051: 	movq	0x8(%rbx), %rsi
    00000055: 	cmpq	%rdx, %rcx
    00000058: 	je	.Ltmp87 # Offset: 88
    0000005a: 	subq	%rdx, %rcx
    0000005d: 	leaq	0x8(%rdx), %rax
    00000061: 	leaq	-0x8(%rcx), %rdi
    00000065: 	cmpq	%rax, %rsi
    00000068: 	je	.Ltmp88 # Offset: 104
    0000006e: 	cmpq	$0x10, %rdi
    00000072: 	jbe	.Ltmp88 # Offset: 114
    00000078: 	shrq	$0x3, %rdi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	addq	$0x1, %rdi
    00000082: 	movq	%rdi, %rcx
    00000085: 	shrq	%rcx
    00000088: 	shlq	$0x4, %rcx
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp89:
    00000090: 	movdqu	(%rdx,%rax), %xmm1
    00000095: 	movups	%xmm1, (%rsi,%rax)
    00000099: 	addq	$0x10, %rax
    0000009d: 	cmpq	%rcx, %rax
    000000a0: 	jne	.Ltmp89 # Offset: 160
    000000a2: 	movq	%rdi, %rax
    000000a5: 	andq	$-0x2, %rax
    000000a9: 	leaq	(,%rax,8), %rcx
    000000b1: 	addq	%rcx, %rdx
    000000b4: 	addq	%rsi, %rcx
    000000b7: 	cmpq	%rax, %rdi
    000000ba: 	je	.Ltmp87 # Offset: 186
    000000bc: 	movq	(%rdx), %rax
    000000bf: 	movq	%rax, (%rcx)
.Ltmp87:
    000000c2: 	movq	0x8(%r13), %r10
    000000c6: 	leaq	0x8(%rsi), %r8
    000000ca: 	cmpq	%r10, %rsi
    000000cd: 	je	.Ltmp90 # Offset: 205
    000000cf: 	cmpq	%r8, %r10
    000000d2: 	je	.Ltmp90 # Offset: 210
    000000d4: 	movq	%r8, %r9
    000000d7: 	movq	(%r9), %rdi
    000000da: 	movq	%r9, %rax
    000000dd: 	cmpq	%r9, %rsi
    000000e0: 	jne	.Ltmp91 # Offset: 224
    000000e2: 	jmp	.Ltmp92 # Offset: 226
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp93:
    000000e8: 	movq	%rcx, 0x8(%rax)
    000000ec: 	cmpq	%rax, %rsi
    000000ef: 	je	.Ltmp92 # Offset: 239
.Ltmp91:
    000000f1: 	movq	%rax, %rdx
    000000f4: 	leaq	-0x8(%rax), %rax
    000000f8: 	movq	-0x8(%rdx), %rcx
    000000fc: 	cmpq	%rcx, %rdi
    000000ff: 	jb	.Ltmp93 # Offset: 255
    00000101: 	addq	$0x8, %r9
    00000105: 	movq	%rdi, (%rdx)
    00000108: 	cmpq	%r10, %r9
    0000010b: 	je	.Ltmp90 # Offset: 267
.Ltmp94:
    0000010d: 	movq	(%r9), %rdi
    00000110: 	movq	%r9, %rax
    00000113: 	cmpq	%r9, %rsi
    00000116: 	jne	.Ltmp91 # Offset: 278
    00000118: 	nopl	(%rax,%rax) # Size: 8
.Ltmp92:
    00000120: 	movq	%rsi, %rdx
    00000123: 	addq	$0x8, %r9
    00000127: 	movq	%rdi, (%rdx)
    0000012a: 	cmpq	%r10, %r9
    0000012d: 	jne	.Ltmp94 # Offset: 301
    0000012f: 	jmp	.Ltmp90 # Offset: 303
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp96:
    00000138: 	addq	$0x8, %r8
    0000013c: 	movq	-0x10(%r8), %rsi
    00000140: 	cmpq	%rsi, (%rax)
    00000143: 	jb	.Ltmp95 # Offset: 323
.Ltmp90:
    00000145: 	movq	%r8, %rax
    00000148: 	cmpq	%r8, %r10
    0000014b: 	jne	.Ltmp96 # Offset: 331
    0000014d: 	addl	$0x1, %r14d
    00000151: 	cmpl	%r11d, %r14d
    00000154: 	jl	.Ltmp97 # Offset: 340
.Ltmp86:
    0000015a: 	callq	clock@PLT # Offset: 346
    0000015f: 	pxor	%xmm0, %xmm0
    00000163: 	movq	0x8(%rsp), %rdi
    00000168: 	movq	%rax, end_time(%rip)
    0000016f: 	subq	start_time(%rip), %rax
    00000176: 	cvtsi2sd	%rax, %xmm0
    0000017b: 	divsd	DATAat0x13600(%rip), %xmm0
    00000183: 	addq	$0x18, %rsp
    00000187: 	popq	%rbx
    00000188: 	popq	%rbp
    00000189: 	popq	%r12
    0000018b: 	popq	%r13
    0000018d: 	popq	%r14
    0000018f: 	popq	%r15
    00000191: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 401
.Ltmp95:
    00000196: 	movq	0x8(%rsp), %rax
    0000019b: 	movq	%r15, %rsi
    0000019e: 	movl	$0x1, %edi
    000001a3: 	addl	$0x1, %r14d
    000001a7: 	movq	(%rax), %rdx
    000001aa: 	xorl	%eax, %eax
    000001ac: 	callq	__printf_chk@PLT # Offset: 428
    000001b1: 	movl	iterations(%rip), %r11d
    000001b8: 	cmpl	%r11d, %r14d
    000001bb: 	jl	.Ltmp97 # Offset: 443
    000001c1: 	jmp	.Ltmp86 # Offset: 449
.Ltmp88:
    000001c3: 	xorl	%eax, %eax
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp98:
    000001c8: 	movq	(%rdx,%rax), %rdi
    000001cc: 	movq	%rdi, (%rsi,%rax)
    000001d0: 	addq	$0x8, %rax
    000001d4: 	cmpq	%rax, %rcx
    000001d7: 	jne	.Ltmp98 # Offset: 471
    000001d9: 	jmp	.Ltmp87 # Offset: 473
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z19test_insertion_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z19test_insertion_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_array.cpp/1
  Number      : 45
  State       : disassembled
  Address     : 0x2a70
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x2a70
  Section     : .text
  Orc Section : .local.text._Z19test_insertion_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	pushq	%r15
    00000002: 	xorl	%r15d, %r15d
    00000005: 	pushq	%r14
    00000007: 	movq	%rcx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdi, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rsi, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%r8, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdx, %rbx
    0000001c: 	subq	$0x8, %rsp
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	leaq	DATAat0x131ba(%rip), %r8
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp99 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp111:
    00000048: 	movq	0x8(%r12), %r9
    0000004d: 	movq	0x8(%r13), %rdx
    00000051: 	movq	0x8(%rbx), %rsi
    00000055: 	cmpq	%rdx, %r9
    00000058: 	je	.Ltmp100 # Offset: 88
    0000005e: 	movq	%r9, %rdi
    00000061: 	leaq	0x4(%rdx), %r10
    00000065: 	movq	%rsi, %rax
    00000068: 	subq	%rdx, %rdi
    0000006b: 	subq	%r10, %rax
    0000006e: 	leaq	-0x4(%rdi), %rcx
    00000072: 	cmpq	$0x8, %rax
    00000076: 	jbe	.Ltmp101 # Offset: 118
    0000007c: 	cmpq	$0x8, %rcx
    00000080: 	jbe	.Ltmp101 # Offset: 128
    00000086: 	shrq	$0x2, %rcx
    0000008a: 	xorl	%eax, %eax
    0000008c: 	addq	$0x1, %rcx
    00000090: 	movq	%rcx, %rdi
    00000093: 	shrq	$0x2, %rdi
    00000097: 	shlq	$0x4, %rdi
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp102:
    000000a0: 	movdqu	(%rdx,%rax), %xmm1
    000000a5: 	movups	%xmm1, (%rsi,%rax)
    000000a9: 	addq	$0x10, %rax
    000000ad: 	cmpq	%rdi, %rax
    000000b0: 	jne	.Ltmp102 # Offset: 176
    000000b2: 	movq	%rcx, %rax
    000000b5: 	andq	$-0x4, %rax
    000000b9: 	leaq	(,%rax,4), %rdi
    000000c1: 	addq	%rdi, %rdx
    000000c4: 	addq	%rsi, %rdi
    000000c7: 	cmpq	%rax, %rcx
    000000ca: 	je	.Ltmp100 # Offset: 202
    000000cc: 	movl	(%rdx), %eax
    000000ce: 	movl	%eax, (%rdi)
    000000d0: 	leaq	0x4(%rdx), %rax
    000000d4: 	cmpq	%rax, %r9
    000000d7: 	je	.Ltmp100 # Offset: 215
    000000d9: 	movl	0x4(%rdx), %eax
    000000dc: 	movl	%eax, 0x4(%rdi)
    000000df: 	leaq	0x8(%rdx), %rax
    000000e3: 	cmpq	%rax, %r9
    000000e6: 	je	.Ltmp100 # Offset: 230
    000000e8: 	movl	0x8(%rdx), %eax
    000000eb: 	movl	%eax, 0x8(%rdi)
.Ltmp100:
    000000ee: 	movq	0x8(%r14), %r10
    000000f2: 	leaq	0x4(%rsi), %r9
    000000f6: 	cmpq	%r10, %rsi
    000000f9: 	je	.Ltmp103 # Offset: 249
    000000fb: 	cmpq	%r9, %r10
    000000fe: 	je	.Ltmp103 # Offset: 254
    00000100: 	movq	%r9, %r11
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp107:
    00000108: 	movl	(%r11), %edi
    0000010b: 	movq	%r11, %rax
    0000010e: 	cmpq	%r11, %rsi
    00000111: 	jne	.Ltmp104 # Offset: 273
    00000113: 	jmp	.Ltmp105 # Offset: 275
    00000118: 	nopl	(%rax,%rax) # Size: 8
.Ltmp106:
    00000120: 	movl	%ecx, 0x4(%rax)
    00000123: 	cmpq	%rax, %rsi
    00000126: 	je	.Ltmp105 # Offset: 294
.Ltmp104:
    0000012c: 	movq	%rax, %rdx
    0000012f: 	leaq	-0x4(%rax), %rax
    00000133: 	movl	-0x4(%rdx), %ecx
    00000136: 	cmpl	%ecx, %edi
    00000138: 	jl	.Ltmp106 # Offset: 312
    0000013a: 	addq	$0x4, %r11
    0000013e: 	movl	%edi, (%rdx)
    00000140: 	cmpq	%r10, %r11
    00000143: 	jne	.Ltmp107 # Offset: 323
.Ltmp103:
    00000145: 	movq	%r9, %rax
    00000148: 	jmp	.Ltmp108 # Offset: 328
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp110:
    00000150: 	addq	$0x4, %rax
    00000154: 	movl	-0x8(%rax), %esi
    00000157: 	cmpl	%esi, (%rdx)
    00000159: 	jl	.Ltmp109 # Offset: 345
.Ltmp108:
    0000015b: 	movq	%rax, %rdx
    0000015e: 	cmpq	%rax, %r10
    00000161: 	jne	.Ltmp110 # Offset: 353
    00000163: 	addl	$0x1, %r15d
    00000167: 	cmpl	iterations(%rip), %r15d
    0000016e: 	jl	.Ltmp111 # Offset: 366
.Ltmp99:
    00000174: 	callq	clock@PLT # Offset: 372
    00000179: 	pxor	%xmm0, %xmm0
    0000017d: 	movq	%rbp, %rdi
    00000180: 	movq	%rax, end_time(%rip)
    00000187: 	subq	start_time(%rip), %rax
    0000018e: 	cvtsi2sd	%rax, %xmm0
    00000193: 	divsd	DATAat0x13600(%rip), %xmm0
    0000019b: 	addq	$0x8, %rsp
    0000019f: 	popq	%rbx
    000001a0: 	popq	%rbp
    000001a1: 	popq	%r12
    000001a3: 	popq	%r13
    000001a5: 	popq	%r14
    000001a7: 	popq	%r15
    000001a9: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 425
    000001ae: 	nop # Size: 2
.Ltmp105:
    000001b0: 	movq	%rsi, %rdx
    000001b3: 	addq	$0x4, %r11
    000001b7: 	movl	%edi, (%rdx)
    000001b9: 	cmpq	%r10, %r11
    000001bc: 	jne	.Ltmp107 # Offset: 444
    000001c2: 	jmp	.Ltmp103 # Offset: 450
.Ltmp109:
    000001c7: 	movq	(%rbp), %rdx
    000001cb: 	movq	%r8, %rsi
    000001ce: 	xorl	%eax, %eax
    000001d0: 	movl	$0x1, %edi
    000001d5: 	addl	$0x1, %r15d
    000001d9: 	callq	__printf_chk@PLT # Offset: 473
    000001de: 	cmpl	iterations(%rip), %r15d
    000001e5: 	leaq	DATAat0x131ba(%rip), %r8
    000001ec: 	jl	.Ltmp111 # Offset: 492
    000001f2: 	jmp	.Ltmp99 # Offset: 498
.Ltmp101:
    000001f4: 	xorl	%eax, %eax
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp112:
    00000200: 	movl	(%rdx,%rax), %ecx
    00000203: 	movl	%ecx, (%rsi,%rax)
    00000206: 	addq	$0x4, %rax
    0000020a: 	cmpq	%rax, %rdi
    0000020d: 	jne	.Ltmp112 # Offset: 525
    0000020f: 	jmp	.Ltmp100 # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z19test_insertion_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z19test_insertion_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_array.cpp/1
  Number      : 46
  State       : disassembled
  Address     : 0x2c90
  Size        : 0x1f8
  MaxSize     : 0x200
  Offset      : 0x2c90
  Section     : .text
  Orc Section : .local.text._Z19test_insertion_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	pushq	%r15
    00000002: 	xorl	%r15d, %r15d
    00000005: 	pushq	%r14
    00000007: 	movq	%rcx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdi, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rsi, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%r8, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdx, %rbx
    0000001c: 	subq	$0x8, %rsp
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %r9d
    0000002c: 	leaq	DATAat0x131ba(%rip), %rsi
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	testl	%r9d, %r9d
    0000003d: 	jle	.Ltmp113 # Offset: 61
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp125:
    00000048: 	movq	0x8(%r12), %r8
    0000004d: 	movq	0x8(%r13), %rdx
    00000051: 	movq	0x8(%rbx), %rcx
    00000055: 	cmpq	%rdx, %r8
    00000058: 	je	.Ltmp114 # Offset: 88
    0000005a: 	subq	%rdx, %r8
    0000005d: 	leaq	0x8(%rdx), %rax
    00000061: 	leaq	-0x8(%r8), %rdi
    00000065: 	cmpq	%rax, %rcx
    00000068: 	je	.Ltmp115 # Offset: 104
    0000006e: 	cmpq	$0x10, %rdi
    00000072: 	jbe	.Ltmp115 # Offset: 114
    00000078: 	shrq	$0x3, %rdi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	addq	$0x1, %rdi
    00000082: 	movq	%rdi, %r8
    00000085: 	shrq	%r8
    00000088: 	shlq	$0x4, %r8
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp116:
    00000090: 	movupd	(%rdx,%rax), %xmm2
    00000095: 	movups	%xmm2, (%rcx,%rax)
    00000099: 	addq	$0x10, %rax
    0000009d: 	cmpq	%r8, %rax
    000000a0: 	jne	.Ltmp116 # Offset: 160
    000000a2: 	movq	%rdi, %r8
    000000a5: 	andq	$-0x2, %r8
    000000a9: 	leaq	(,%r8,8), %rax
    000000b1: 	addq	%rax, %rdx
    000000b4: 	addq	%rcx, %rax
    000000b7: 	cmpq	%r8, %rdi
    000000ba: 	je	.Ltmp114 # Offset: 186
    000000bc: 	movsd	(%rdx), %xmm0
    000000c0: 	movsd	%xmm0, (%rax)
.Ltmp114:
    000000c4: 	movq	0x8(%r14), %r8
    000000c8: 	leaq	0x8(%rcx), %rdi
    000000cc: 	cmpq	%r8, %rcx
    000000cf: 	je	.Ltmp117 # Offset: 207
    000000d1: 	cmpq	%rdi, %r8
    000000d4: 	je	.Ltmp117 # Offset: 212
    000000d6: 	movq	%rdi, %r10
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp121:
    000000e0: 	movsd	(%r10), %xmm1
    000000e5: 	movq	%r10, %rax
    000000e8: 	cmpq	%r10, %rcx
    000000eb: 	jne	.Ltmp118 # Offset: 235
    000000ed: 	jmp	.Ltmp119 # Offset: 237
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp120:
    000000f8: 	movsd	%xmm0, 0x8(%rax)
    000000fd: 	cmpq	%rax, %rcx
    00000100: 	je	.Ltmp119 # Offset: 256
.Ltmp118:
    00000106: 	movq	%rax, %rdx
    00000109: 	leaq	-0x8(%rax), %rax
    0000010d: 	movsd	-0x8(%rdx), %xmm0
    00000112: 	comisd	%xmm1, %xmm0
    00000116: 	ja	.Ltmp120 # Offset: 278
    00000118: 	addq	$0x8, %r10
    0000011c: 	movsd	%xmm1, (%rdx)
    00000120: 	cmpq	%r8, %r10
    00000123: 	jne	.Ltmp121 # Offset: 291
.Ltmp117:
    00000125: 	movq	%rdi, %rax
    00000128: 	jmp	.Ltmp122 # Offset: 296
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp124:
    00000130: 	addq	$0x8, %rax
    00000134: 	movsd	-0x10(%rax), %xmm0
    00000139: 	comisd	(%rdx), %xmm0
    0000013d: 	ja	.Ltmp123 # Offset: 317
.Ltmp122:
    0000013f: 	movq	%rax, %rdx
    00000142: 	cmpq	%rax, %r8
    00000145: 	jne	.Ltmp124 # Offset: 325
    00000147: 	addl	$0x1, %r15d
    0000014b: 	cmpl	%r9d, %r15d
    0000014e: 	jl	.Ltmp125 # Offset: 334
.Ltmp113:
    00000154: 	callq	clock@PLT # Offset: 340
    00000159: 	pxor	%xmm0, %xmm0
    0000015d: 	movq	%rbp, %rdi
    00000160: 	movq	%rax, end_time(%rip)
    00000167: 	subq	start_time(%rip), %rax
    0000016e: 	cvtsi2sd	%rax, %xmm0
    00000173: 	divsd	DATAat0x13600(%rip), %xmm0
    0000017b: 	addq	$0x8, %rsp
    0000017f: 	popq	%rbx
    00000180: 	popq	%rbp
    00000181: 	popq	%r12
    00000183: 	popq	%r13
    00000185: 	popq	%r14
    00000187: 	popq	%r15
    00000189: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 393
    0000018e: 	nop # Size: 2
.Ltmp119:
    00000190: 	movq	%rcx, %rdx
    00000193: 	addq	$0x8, %r10
    00000197: 	movsd	%xmm1, (%rdx)
    0000019b: 	cmpq	%r8, %r10
    0000019e: 	jne	.Ltmp121 # Offset: 414
    000001a4: 	jmp	.Ltmp117 # Offset: 420
.Ltmp123:
    000001a9: 	movq	(%rbp), %rdx
    000001ad: 	movl	$0x1, %edi
    000001b2: 	xorl	%eax, %eax
    000001b4: 	addl	$0x1, %r15d
    000001b8: 	callq	__printf_chk@PLT # Offset: 440
    000001bd: 	movl	iterations(%rip), %r9d
    000001c4: 	leaq	DATAat0x131ba(%rip), %rsi
    000001cb: 	cmpl	%r9d, %r15d
    000001ce: 	jl	.Ltmp125 # Offset: 462
    000001d4: 	jmp	.Ltmp113 # Offset: 468
.Ltmp115:
    000001d9: 	xorl	%eax, %eax
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp126:
    000001e0: 	movsd	(%rdx,%rax), %xmm0
    000001e5: 	movsd	%xmm0, (%rcx,%rax)
    000001ea: 	addq	$0x8, %rax
    000001ee: 	cmpq	%rax, %r8
    000001f1: 	jne	.Ltmp126 # Offset: 497
    000001f3: 	jmp	.Ltmp114 # Offset: 499
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_insertion_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x2e90
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x2e90
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp127 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp128 # Offset: 63
.Ltmp127:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp129 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp130 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp134:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp131 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp132 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp130:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp133 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp134 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp129:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp135:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp134 # Offset: 248
.Ltmp128:
    000000fd: 	leaq	DATAat0x13118(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp131:
    00000109: 	leaq	DATAat0x131cf(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp132:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp133:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp135 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp136 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp136:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZN9benchmark9quicksortIPdEEvT_S2_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x2fe0
  Size        : 0x4a0
  MaxSize     : 0x4a0
  Offset      : 0x2fe0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, 0x18(%rsp)
    0000001d: 	cmpq	$0x8, %rax
    00000021: 	jle	.Ltmp137 # Offset: 33
.Ltmp149:
    00000023: 	movsd	(%rdi), %xmm2
    00000027: 	movq	0x18(%rsp), %r13
    0000002c: 	movq	%rdi, %rax
.Ltmp142:
    0000002f: 	movsd	-0x8(%r13), %xmm0
    00000035: 	leaq	-0x8(%r13), %rdx
    00000039: 	comisd	%xmm2, %xmm0
    0000003d: 	ja	.Ltmp138 # Offset: 61
    0000003f: 	cmpq	%rdx, %rax
    00000042: 	jae	.Ltmp139 # Offset: 66
    00000044: 	movsd	(%rax), %xmm1
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp140 # Offset: 76
.Ltmp141:
    0000004e: 	movsd	0x8(%rax), %xmm1
    00000053: 	addq	$0x8, %rax
    00000057: 	comisd	%xmm1, %xmm2
    0000005b: 	ja	.Ltmp141 # Offset: 91
    0000005d: 	cmpq	%rax, %rdx
    00000060: 	jbe	.Ltmp139 # Offset: 96
.Ltmp140:
    00000062: 	movsd	%xmm1, (%rdx)
    00000066: 	movsd	%xmm0, (%rax)
.Ltmp138:
    0000006a: 	movq	%rdx, %r13
    0000006d: 	jmp	.Ltmp142 # Offset: 109
.Ltmp137:
    0000006f: 	addq	$0x28, %rsp
    00000073: 	popq	%rbx
    00000074: 	popq	%rbp
    00000075: 	popq	%r12
    00000077: 	popq	%r13
    00000079: 	popq	%r14
    0000007b: 	popq	%r15
    0000007d: 	retq # Offset: 125
.Ltmp139:
    0000007e: 	movq	%r13, %rax
    00000081: 	subq	%rdi, %rax
    00000084: 	cmpq	$0x8, %rax
    00000088: 	jle	.Ltmp143 # Offset: 136
.Ltmp199:
    0000008a: 	movsd	(%rdi), %xmm2
    0000008e: 	movq	%r13, %r14
    00000091: 	movq	%rdi, %rax
.Ltmp148:
    00000094: 	comisd	%xmm2, %xmm0
    00000098: 	leaq	-0x8(%r14), %rdx
    0000009c: 	ja	.Ltmp144 # Offset: 156
    0000009e: 	cmpq	%rax, %rdx
    000000a1: 	jbe	.Ltmp145 # Offset: 161
    000000a3: 	movsd	(%rax), %xmm1
    000000a7: 	comisd	%xmm1, %xmm2
    000000ab: 	jbe	.Ltmp146 # Offset: 171
.Ltmp147:
    000000ad: 	movsd	0x8(%rax), %xmm1
    000000b2: 	addq	$0x8, %rax
    000000b6: 	comisd	%xmm1, %xmm2
    000000ba: 	ja	.Ltmp147 # Offset: 186
    000000bc: 	cmpq	%rax, %rdx
    000000bf: 	jbe	.Ltmp145 # Offset: 191
.Ltmp146:
    000000c1: 	movsd	%xmm1, (%rdx)
    000000c5: 	movsd	%xmm0, (%rax)
.Ltmp144:
    000000c9: 	movsd	-0x8(%rdx), %xmm0
    000000ce: 	movq	%rdx, %r14
    000000d1: 	jmp	.Ltmp148 # Offset: 209
.Ltmp143:
    000000d3: 	movq	0x18(%rsp), %rax
    000000d8: 	subq	%r13, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jle	.Ltmp137 # Offset: 223
    000000e1: 	movq	%r13, %rdi
    000000e4: 	jmp	.Ltmp149 # Offset: 228
.Ltmp145:
    000000e9: 	movq	%r14, %rax
    000000ec: 	subq	%rdi, %rax
    000000ef: 	cmpq	$0x8, %rax
    000000f3: 	jle	.Ltmp150 # Offset: 243
.Ltmp198:
    000000f9: 	movsd	(%rdi), %xmm2
    000000fd: 	movq	%r14, %r15
    00000100: 	movq	%rdi, %rax
.Ltmp155:
    00000103: 	comisd	%xmm2, %xmm0
    00000107: 	leaq	-0x8(%r15), %rdx
    0000010b: 	ja	.Ltmp151 # Offset: 267
    0000010d: 	cmpq	%rax, %rdx
    00000110: 	jbe	.Ltmp152 # Offset: 272
    00000112: 	movsd	(%rax), %xmm1
    00000116: 	comisd	%xmm1, %xmm2
    0000011a: 	jbe	.Ltmp153 # Offset: 282
.Ltmp154:
    0000011c: 	movsd	0x8(%rax), %xmm1
    00000121: 	addq	$0x8, %rax
    00000125: 	comisd	%xmm1, %xmm2
    00000129: 	ja	.Ltmp154 # Offset: 297
    0000012b: 	cmpq	%rax, %rdx
    0000012e: 	jbe	.Ltmp152 # Offset: 302
.Ltmp153:
    00000130: 	movsd	%xmm1, (%rdx)
    00000134: 	movsd	%xmm0, (%rax)
.Ltmp151:
    00000138: 	movsd	-0x8(%rdx), %xmm0
    0000013d: 	movq	%rdx, %r15
    00000140: 	jmp	.Ltmp155 # Offset: 320
.Ltmp152:
    00000142: 	movq	%r15, %rax
    00000145: 	subq	%rdi, %rax
    00000148: 	cmpq	$0x8, %rax
    0000014c: 	jle	.Ltmp156 # Offset: 332
.Ltmp197:
    00000152: 	movsd	(%rdi), %xmm2
    00000156: 	movq	%r15, %rbx
    00000159: 	movq	%rdi, %rax
.Ltmp161:
    0000015c: 	comisd	%xmm2, %xmm0
    00000160: 	leaq	-0x8(%rbx), %rcx
    00000164: 	ja	.Ltmp157 # Offset: 356
    00000166: 	cmpq	%rax, %rcx
    00000169: 	jbe	.Ltmp158 # Offset: 361
    0000016b: 	movsd	(%rax), %xmm1
    0000016f: 	comisd	%xmm1, %xmm2
    00000173: 	jbe	.Ltmp159 # Offset: 371
.Ltmp160:
    00000175: 	movsd	0x8(%rax), %xmm1
    0000017a: 	addq	$0x8, %rax
    0000017e: 	comisd	%xmm1, %xmm2
    00000182: 	ja	.Ltmp160 # Offset: 386
    00000184: 	cmpq	%rax, %rcx
    00000187: 	jbe	.Ltmp158 # Offset: 391
.Ltmp159:
    00000189: 	movsd	%xmm1, (%rcx)
    0000018d: 	movsd	%xmm0, (%rax)
.Ltmp157:
    00000191: 	movsd	-0x8(%rcx), %xmm0
    00000196: 	movq	%rcx, %rbx
    00000199: 	jmp	.Ltmp161 # Offset: 409
.Ltmp158:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	subq	%rdi, %rax
    000001a1: 	cmpq	$0x8, %rax
    000001a5: 	jle	.Ltmp162 # Offset: 421
.Ltmp196:
    000001ab: 	movsd	(%rdi), %xmm2
    000001af: 	movq	%rbx, %rcx
    000001b2: 	movq	%rdi, %rax
.Ltmp167:
    000001b5: 	comisd	%xmm2, %xmm0
    000001b9: 	leaq	-0x8(%rcx), %rsi
    000001bd: 	ja	.Ltmp163 # Offset: 445
    000001bf: 	cmpq	%rax, %rsi
    000001c2: 	jbe	.Ltmp164 # Offset: 450
    000001c4: 	movsd	(%rax), %xmm1
    000001c8: 	comisd	%xmm1, %xmm2
    000001cc: 	jbe	.Ltmp165 # Offset: 460
.Ltmp166:
    000001ce: 	movsd	0x8(%rax), %xmm1
    000001d3: 	addq	$0x8, %rax
    000001d7: 	comisd	%xmm1, %xmm2
    000001db: 	ja	.Ltmp166 # Offset: 475
    000001dd: 	cmpq	%rax, %rsi
    000001e0: 	jbe	.Ltmp164 # Offset: 480
.Ltmp165:
    000001e2: 	movsd	%xmm1, (%rsi)
    000001e6: 	movsd	%xmm0, (%rax)
.Ltmp163:
    000001ea: 	movsd	-0x8(%rsi), %xmm0
    000001ef: 	movq	%rsi, %rcx
    000001f2: 	jmp	.Ltmp167 # Offset: 498
.Ltmp164:
    000001f4: 	movq	%rcx, %rax
    000001f7: 	subq	%rdi, %rax
    000001fa: 	cmpq	$0x8, %rax
    000001fe: 	jle	.Ltmp168 # Offset: 510
.Ltmp195:
    00000204: 	movsd	(%rdi), %xmm2
    00000208: 	movq	%rcx, %r12
    0000020b: 	movq	%rdi, %rax
.Ltmp173:
    0000020e: 	comisd	%xmm2, %xmm0
    00000212: 	leaq	-0x8(%r12), %rsi
    00000217: 	ja	.Ltmp169 # Offset: 535
    00000219: 	cmpq	%rax, %rsi
    0000021c: 	jbe	.Ltmp170 # Offset: 540
    0000021e: 	movsd	(%rax), %xmm1
    00000222: 	comisd	%xmm1, %xmm2
    00000226: 	jbe	.Ltmp171 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp172:
    00000230: 	movsd	0x8(%rax), %xmm1
    00000235: 	addq	$0x8, %rax
    00000239: 	comisd	%xmm1, %xmm2
    0000023d: 	ja	.Ltmp172 # Offset: 573
    0000023f: 	cmpq	%rax, %rsi
    00000242: 	jbe	.Ltmp170 # Offset: 578
.Ltmp171:
    00000244: 	movsd	%xmm1, (%rsi)
    00000248: 	movsd	%xmm0, (%rax)
.Ltmp169:
    0000024c: 	movsd	-0x8(%rsi), %xmm0
    00000251: 	movq	%rsi, %r12
    00000254: 	jmp	.Ltmp173 # Offset: 596
.Ltmp170:
    00000256: 	movq	%r12, %rax
    00000259: 	subq	%rdi, %rax
    0000025c: 	cmpq	$0x8, %rax
    00000260: 	jle	.Ltmp174 # Offset: 608
.Ltmp194:
    00000266: 	movsd	(%rdi), %xmm2
    0000026a: 	movq	%r12, %r8
    0000026d: 	movq	%rdi, %rax
.Ltmp192:
    00000270: 	comisd	%xmm2, %xmm0
    00000274: 	leaq	-0x8(%r8), %rsi
    00000278: 	ja	.Ltmp175 # Offset: 632
    0000027e: 	cmpq	%rax, %rsi
    00000281: 	jbe	.Ltmp176 # Offset: 641
    00000283: 	movsd	(%rax), %xmm1
    00000287: 	comisd	%xmm1, %xmm2
    0000028b: 	jbe	.Ltmp177 # Offset: 651
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp178:
    00000298: 	movsd	0x8(%rax), %xmm1
    0000029d: 	addq	$0x8, %rax
    000002a1: 	comisd	%xmm1, %xmm2
    000002a5: 	ja	.Ltmp178 # Offset: 677
    000002a7: 	cmpq	%rax, %rsi
    000002aa: 	ja	.Ltmp177 # Offset: 682
.Ltmp176:
    000002b0: 	movq	%r8, %rax
    000002b3: 	subq	%rdi, %rax
    000002b6: 	cmpq	$0x8, %rax
    000002ba: 	jle	.Ltmp179 # Offset: 698
.Ltmp191:
    000002c0: 	movsd	(%rdi), %xmm1
    000002c4: 	movq	%r8, %rbp
    000002c7: 	movq	%rdi, %rax
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp190:
    000002d0: 	comisd	%xmm1, %xmm0
    000002d4: 	leaq	-0x8(%rbp), %rsi
    000002d8: 	ja	.Ltmp180 # Offset: 728
    000002de: 	cmpq	%rax, %rsi
    000002e1: 	jbe	.Ltmp181 # Offset: 737
    000002e3: 	movsd	(%rax), %xmm2
    000002e7: 	comisd	%xmm2, %xmm1
    000002eb: 	jbe	.Ltmp182 # Offset: 747
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp183:
    000002f8: 	movsd	0x8(%rax), %xmm2
    000002fd: 	addq	$0x8, %rax
    00000301: 	comisd	%xmm2, %xmm1
    00000305: 	ja	.Ltmp183 # Offset: 773
    00000307: 	cmpq	%rax, %rsi
    0000030a: 	ja	.Ltmp182 # Offset: 778
.Ltmp181:
    00000310: 	movq	%rbp, %rax
    00000313: 	subq	%rdi, %rax
    00000316: 	cmpq	$0x8, %rax
    0000031a: 	jle	.Ltmp184 # Offset: 794
.Ltmp189:
    00000320: 	movsd	(%rdi), %xmm1
    00000324: 	movq	%rbp, %rsi
    00000327: 	movq	%rdi, %rax
    0000032a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp193:
    00000330: 	movsd	-0x8(%rsi), %xmm2
    00000335: 	leaq	-0x8(%rsi), %r9
    00000339: 	comisd	%xmm1, %xmm2
    0000033d: 	ja	.Ltmp185 # Offset: 829
    00000343: 	cmpq	%rax, %r9
    00000346: 	jbe	.Ltmp186 # Offset: 838
    00000348: 	movsd	(%rax), %xmm0
    0000034c: 	comisd	%xmm0, %xmm1
    00000350: 	jbe	.Ltmp187 # Offset: 848
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp188:
    00000360: 	movsd	0x8(%rax), %xmm0
    00000365: 	addq	$0x8, %rax
    00000369: 	comisd	%xmm0, %xmm1
    0000036d: 	ja	.Ltmp188 # Offset: 877
    0000036f: 	cmpq	%rax, %r9
    00000372: 	ja	.Ltmp187 # Offset: 882
.Ltmp186:
    00000374: 	movq	%r8, 0x10(%rsp)
    00000379: 	movq	%rcx, 0x8(%rsp)
    0000037e: 	movq	%rsi, (%rsp)
    00000382: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 898
    00000387: 	movq	(%rsp), %rsi
    0000038b: 	movq	%rbp, %rax
    0000038e: 	movq	0x8(%rsp), %rcx
    00000393: 	movq	0x10(%rsp), %r8
    00000398: 	subq	%rsi, %rax
    0000039b: 	cmpq	$0x8, %rax
    0000039f: 	jle	.Ltmp184 # Offset: 927
    000003a1: 	movq	%rsi, %rdi
    000003a4: 	jmp	.Ltmp189 # Offset: 932
.Ltmp182:
    000003a9: 	movsd	%xmm2, (%rsi)
    000003ad: 	movsd	%xmm0, (%rax)
.Ltmp180:
    000003b1: 	movsd	-0x8(%rsi), %xmm0
    000003b6: 	movq	%rsi, %rbp
    000003b9: 	jmp	.Ltmp190 # Offset: 953
.Ltmp184:
    000003be: 	movq	%r8, %rax
    000003c1: 	subq	%rbp, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp179 # Offset: 968
    000003ca: 	movsd	-0x8(%r8), %xmm0
    000003d0: 	movq	%rbp, %rdi
    000003d3: 	jmp	.Ltmp191 # Offset: 979
.Ltmp177:
    000003d8: 	movsd	%xmm1, (%rsi)
    000003dc: 	movsd	%xmm0, (%rax)
.Ltmp175:
    000003e0: 	movsd	-0x8(%rsi), %xmm0
    000003e5: 	movq	%rsi, %r8
    000003e8: 	jmp	.Ltmp192 # Offset: 1000
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp187:
    000003f0: 	movsd	%xmm0, (%r9)
    000003f5: 	movsd	%xmm2, (%rax)
.Ltmp185:
    000003f9: 	movq	%r9, %rsi
    000003fc: 	jmp	.Ltmp193 # Offset: 1020
.Ltmp179:
    00000401: 	movq	%r12, %rax
    00000404: 	subq	%r8, %rax
    00000407: 	cmpq	$0x8, %rax
    0000040b: 	jle	.Ltmp174 # Offset: 1035
    0000040d: 	movsd	-0x8(%r12), %xmm0
    00000414: 	movq	%r8, %rdi
    00000417: 	jmp	.Ltmp194 # Offset: 1047
.Ltmp174:
    0000041c: 	movq	%rcx, %rax
    0000041f: 	subq	%r12, %rax
    00000422: 	cmpq	$0x8, %rax
    00000426: 	jle	.Ltmp168 # Offset: 1062
    00000428: 	movsd	-0x8(%rcx), %xmm0
    0000042d: 	movq	%r12, %rdi
    00000430: 	jmp	.Ltmp195 # Offset: 1072
.Ltmp168:
    00000435: 	movq	%rbx, %rax
    00000438: 	subq	%rcx, %rax
    0000043b: 	cmpq	$0x8, %rax
    0000043f: 	jle	.Ltmp162 # Offset: 1087
    00000441: 	movsd	-0x8(%rbx), %xmm0
    00000446: 	movq	%rcx, %rdi
    00000449: 	jmp	.Ltmp196 # Offset: 1097
.Ltmp162:
    0000044e: 	movq	%r15, %rax
    00000451: 	subq	%rbx, %rax
    00000454: 	cmpq	$0x8, %rax
    00000458: 	jle	.Ltmp156 # Offset: 1112
    0000045a: 	movsd	-0x8(%r15), %xmm0
    00000460: 	movq	%rbx, %rdi
    00000463: 	jmp	.Ltmp197 # Offset: 1123
.Ltmp156:
    00000468: 	movq	%r14, %rax
    0000046b: 	subq	%r15, %rax
    0000046e: 	cmpq	$0x8, %rax
    00000472: 	jle	.Ltmp150 # Offset: 1138
    00000474: 	movsd	-0x8(%r14), %xmm0
    0000047a: 	movq	%r15, %rdi
    0000047d: 	jmp	.Ltmp198 # Offset: 1149
.Ltmp150:
    00000482: 	movq	%r13, %rax
    00000485: 	subq	%r14, %rax
    00000488: 	cmpq	$0x8, %rax
    0000048c: 	jle	.Ltmp143 # Offset: 1164
    00000492: 	movsd	-0x8(%r13), %xmm0
    00000498: 	movq	%r14, %rdi
    0000049b: 	jmp	.Ltmp199 # Offset: 1179
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPdEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x3480
  Size        : 0x88a
  MaxSize     : 0x890
  Offset      : 0x3480
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x48, %rsp
    00000012: 	movq	0x8(%rsi), %rbp
    00000016: 	movq	0x8(%rdi), %rsi
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x38(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	movq	%rbp, %rax
    0000002d: 	subq	%rsi, %rax
    00000030: 	cmpq	$0x8, %rax
    00000034: 	jle	.Ltmp200 # Offset: 52
    00000036: 	movsd	(%rsi), %xmm1
    0000003a: 	movq	%rbp, %rbx
    0000003d: 	movq	%rsi, %rdx
.Ltmp205:
    00000040: 	movsd	-0x8(%rbx), %xmm2
    00000045: 	leaq	-0x8(%rbx), %rcx
    00000049: 	comisd	%xmm1, %xmm2
    0000004d: 	ja	.Ltmp201 # Offset: 77
    0000004f: 	cmpq	%rdx, %rcx
    00000052: 	jbe	.Ltmp202 # Offset: 82
    00000054: 	movsd	(%rdx), %xmm0
    00000058: 	leaq	0x8(%rdx), %rax
    0000005c: 	comisd	%xmm0, %xmm1
    00000060: 	jbe	.Ltmp203 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp204:
    00000068: 	movq	%rax, %rdx
    0000006b: 	movsd	(%rax), %xmm0
    0000006f: 	leaq	0x8(%rax), %rax
    00000073: 	comisd	%xmm0, %xmm1
    00000077: 	ja	.Ltmp204 # Offset: 119
    00000079: 	cmpq	%rdx, %rcx
    0000007c: 	jbe	.Ltmp202 # Offset: 124
.Ltmp203:
    0000007e: 	movsd	%xmm0, (%rcx)
    00000082: 	movsd	%xmm2, (%rdx)
.Ltmp201:
    00000086: 	movq	%rcx, %rbx
    00000089: 	jmp	.Ltmp205 # Offset: 137
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp202:
    00000090: 	movq	%rbx, %rax
    00000093: 	subq	%rsi, %rax
    00000096: 	cmpq	$0x8, %rax
    0000009a: 	jg	.Ltmp206 # Offset: 154
.Ltmp225:
    000000a0: 	movq	%rbp, %rax
    000000a3: 	subq	%rbx, %rax
    000000a6: 	cmpq	$0x8, %rax
    000000aa: 	jg	.Ltmp207 # Offset: 170
.Ltmp200:
    000000ac: 	movq	0x38(%rsp), %rax
    000000b1: 	subq	%fs:0x28, %rax
    000000ba: 	jne	.Ltmp208 # Offset: 186
    000000c0: 	addq	$0x48, %rsp
    000000c4: 	popq	%rbx
    000000c5: 	popq	%rbp
    000000c6: 	popq	%r12
    000000c8: 	popq	%r13
    000000ca: 	popq	%r14
    000000cc: 	popq	%r15
    000000ce: 	retq # Offset: 206
.Ltmp207:
    000000cf: 	movsd	(%rbx), %xmm1
    000000d3: 	movq	%rbp, %r12
    000000d6: 	movq	%rbx, %rdx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp213:
    000000e0: 	movsd	-0x8(%r12), %xmm2
    000000e7: 	leaq	-0x8(%r12), %rcx
    000000ec: 	comisd	%xmm1, %xmm2
    000000f0: 	ja	.Ltmp209 # Offset: 240
    000000f2: 	cmpq	%rdx, %rcx
    000000f5: 	jbe	.Ltmp210 # Offset: 245
    000000fb: 	movsd	(%rdx), %xmm0
    000000ff: 	leaq	0x8(%rdx), %rax
    00000103: 	comisd	%xmm0, %xmm1
    00000107: 	jbe	.Ltmp211 # Offset: 263
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp212:
    00000110: 	movq	%rax, %rdx
    00000113: 	movsd	(%rax), %xmm0
    00000117: 	leaq	0x8(%rax), %rax
    0000011b: 	comisd	%xmm0, %xmm1
    0000011f: 	ja	.Ltmp212 # Offset: 287
    00000121: 	cmpq	%rdx, %rcx
    00000124: 	jbe	.Ltmp210 # Offset: 292
.Ltmp211:
    0000012a: 	movsd	%xmm0, (%rcx)
    0000012e: 	movsd	%xmm2, (%rdx)
.Ltmp209:
    00000132: 	movq	%rcx, %r12
    00000135: 	jmp	.Ltmp213 # Offset: 309
.Ltmp206:
    00000137: 	movsd	(%rsi), %xmm1
    0000013b: 	movq	%rbx, %r12
    0000013e: 	movq	%rsi, %rdx
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp218:
    00000148: 	comisd	%xmm1, %xmm2
    0000014c: 	leaq	-0x8(%r12), %rcx
    00000151: 	ja	.Ltmp214 # Offset: 337
    00000153: 	cmpq	%rdx, %rcx
    00000156: 	jbe	.Ltmp215 # Offset: 342
    00000158: 	movsd	(%rdx), %xmm0
    0000015c: 	leaq	0x8(%rdx), %rax
    00000160: 	comisd	%xmm0, %xmm1
    00000164: 	jbe	.Ltmp216 # Offset: 356
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp217:
    00000170: 	movq	%rax, %rdx
    00000173: 	movsd	(%rax), %xmm0
    00000177: 	leaq	0x8(%rax), %rax
    0000017b: 	comisd	%xmm0, %xmm1
    0000017f: 	ja	.Ltmp217 # Offset: 383
    00000181: 	cmpq	%rdx, %rcx
    00000184: 	jbe	.Ltmp215 # Offset: 388
.Ltmp216:
    00000186: 	movsd	%xmm0, (%rcx)
    0000018a: 	movsd	%xmm2, (%rdx)
.Ltmp214:
    0000018e: 	movsd	-0x8(%rcx), %xmm2
    00000193: 	movq	%rcx, %r12
    00000196: 	jmp	.Ltmp218 # Offset: 406
.Ltmp215:
    00000198: 	movq	%r12, %rax
    0000019b: 	subq	%rsi, %rax
    0000019e: 	cmpq	$0x8, %rax
    000001a2: 	jle	.Ltmp219 # Offset: 418
    000001a8: 	movsd	(%rsi), %xmm1
    000001ac: 	movq	%r12, %r13
    000001af: 	movq	%rsi, %rax
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp224:
    000001b8: 	comisd	%xmm1, %xmm2
    000001bc: 	leaq	-0x8(%r13), %rdx
    000001c0: 	ja	.Ltmp220 # Offset: 448
    000001c2: 	cmpq	%rax, %rdx
    000001c5: 	jbe	.Ltmp221 # Offset: 453
    000001cb: 	movsd	(%rax), %xmm0
    000001cf: 	comisd	%xmm0, %xmm1
    000001d3: 	jbe	.Ltmp222 # Offset: 467
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp223:
    000001d8: 	movsd	0x8(%rax), %xmm0
    000001dd: 	addq	$0x8, %rax
    000001e1: 	comisd	%xmm0, %xmm1
    000001e5: 	ja	.Ltmp223 # Offset: 485
    000001e7: 	cmpq	%rax, %rdx
    000001ea: 	jbe	.Ltmp221 # Offset: 490
.Ltmp222:
    000001f0: 	movsd	%xmm0, (%rdx)
    000001f4: 	movsd	%xmm2, (%rax)
.Ltmp220:
    000001f8: 	movsd	-0x8(%rdx), %xmm2
    000001fd: 	movq	%rdx, %r13
    00000200: 	jmp	.Ltmp224 # Offset: 512
.Ltmp249:
    00000202: 	movq	%r13, 0x28(%rsp)
    00000207: 	leaq	0x10(%rsp), %r15
    0000020c: 	leaq	0x20(%rsp), %r13
    00000211: 	movq	%r15, %rsi
    00000214: 	movq	%r13, %rdi
    00000217: 	movq	%r14, 0x18(%rsp)
    0000021c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 540
    00000221: 	movq	%r15, %rsi
    00000224: 	movq	%r13, %rdi
    00000227: 	movq	%r12, 0x18(%rsp)
    0000022c: 	movq	%r14, 0x28(%rsp)
    00000231: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 561
.Ltmp219:
    00000236: 	movq	%rbx, %rax
    00000239: 	subq	%r12, %rax
    0000023c: 	cmpq	$0x8, %rax
    00000240: 	jle	.Ltmp225 # Offset: 576
    00000246: 	movsd	(%r12), %xmm1
    0000024c: 	movq	%rbx, %r13
    0000024f: 	movq	%r12, %rdx
    00000252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp230:
    00000258: 	movsd	-0x8(%r13), %xmm2
    0000025e: 	leaq	-0x8(%r13), %rcx
    00000262: 	comisd	%xmm1, %xmm2
    00000266: 	ja	.Ltmp226 # Offset: 614
    00000268: 	cmpq	%rdx, %rcx
    0000026b: 	jbe	.Ltmp227 # Offset: 619
    00000271: 	movsd	(%rdx), %xmm0
    00000275: 	leaq	0x8(%rdx), %rax
    00000279: 	comisd	%xmm0, %xmm1
    0000027d: 	jbe	.Ltmp228 # Offset: 637
    0000027f: 	nop # Size: 1
.Ltmp229:
    00000280: 	movq	%rax, %rdx
    00000283: 	movsd	(%rax), %xmm0
    00000287: 	leaq	0x8(%rax), %rax
    0000028b: 	comisd	%xmm0, %xmm1
    0000028f: 	ja	.Ltmp229 # Offset: 655
    00000291: 	cmpq	%rdx, %rcx
    00000294: 	jbe	.Ltmp227 # Offset: 660
.Ltmp228:
    0000029a: 	movsd	%xmm0, (%rcx)
    0000029e: 	movsd	%xmm2, (%rdx)
.Ltmp226:
    000002a2: 	movq	%rcx, %r13
    000002a5: 	jmp	.Ltmp230 # Offset: 677
.Ltmp210:
    000002a7: 	movq	%r12, %rax
    000002aa: 	subq	%rbx, %rax
    000002ad: 	cmpq	$0x8, %rax
    000002b1: 	jle	.Ltmp231 # Offset: 689
    000002b7: 	movsd	(%rbx), %xmm1
    000002bb: 	movq	%r12, %r13
    000002be: 	movq	%rbx, %rdx
    000002c1: 	nopl	(%rax) # Size: 7
.Ltmp236:
    000002c8: 	comisd	%xmm1, %xmm2
    000002cc: 	leaq	-0x8(%r13), %rcx
    000002d0: 	ja	.Ltmp232 # Offset: 720
    000002d2: 	cmpq	%rdx, %rcx
    000002d5: 	jbe	.Ltmp233 # Offset: 725
    000002db: 	movsd	(%rdx), %xmm0
    000002df: 	leaq	0x8(%rdx), %rax
    000002e3: 	comisd	%xmm0, %xmm1
    000002e7: 	jbe	.Ltmp234 # Offset: 743
    000002e9: 	nopl	(%rax) # Size: 7
.Ltmp235:
    000002f0: 	movq	%rax, %rdx
    000002f3: 	movsd	(%rax), %xmm0
    000002f7: 	leaq	0x8(%rax), %rax
    000002fb: 	comisd	%xmm0, %xmm1
    000002ff: 	ja	.Ltmp235 # Offset: 767
    00000301: 	cmpq	%rdx, %rcx
    00000304: 	jbe	.Ltmp233 # Offset: 772
.Ltmp234:
    0000030a: 	movsd	%xmm0, (%rcx)
    0000030e: 	movsd	%xmm2, (%rdx)
.Ltmp232:
    00000312: 	movsd	-0x8(%rcx), %xmm2
    00000317: 	movq	%rcx, %r13
    0000031a: 	jmp	.Ltmp236 # Offset: 794
.Ltmp271:
    0000031c: 	movq	%r13, 0x28(%rsp)
    00000321: 	leaq	0x10(%rsp), %r14
    00000326: 	leaq	0x20(%rsp), %r13
    0000032b: 	movq	%r14, %rsi
    0000032e: 	movq	%r13, %rdi
    00000331: 	movq	%rbx, 0x18(%rsp)
    00000336: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 822
    0000033b: 	movq	%r14, %rsi
    0000033e: 	movq	%r13, %rdi
    00000341: 	movq	%r12, 0x18(%rsp)
    00000346: 	movq	%rbx, 0x28(%rsp)
    0000034b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 843
.Ltmp231:
    00000350: 	movq	%rbp, %rax
    00000353: 	subq	%r12, %rax
    00000356: 	cmpq	$0x8, %rax
    0000035a: 	jle	.Ltmp200 # Offset: 858
    00000360: 	movsd	(%r12), %xmm1
    00000366: 	movq	%rbp, %rbx
    00000369: 	movq	%r12, %rdx
    0000036c: 	nopl	(%rax) # Size: 4
.Ltmp241:
    00000370: 	movsd	-0x8(%rbx), %xmm2
    00000375: 	leaq	-0x8(%rbx), %rcx
    00000379: 	comisd	%xmm1, %xmm2
    0000037d: 	ja	.Ltmp237 # Offset: 893
    0000037f: 	cmpq	%rdx, %rcx
    00000382: 	jbe	.Ltmp238 # Offset: 898
    00000388: 	movsd	(%rdx), %xmm0
    0000038c: 	leaq	0x8(%rdx), %rax
    00000390: 	comisd	%xmm0, %xmm1
    00000394: 	jbe	.Ltmp239 # Offset: 916
    00000396: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp240:
    000003a0: 	movq	%rax, %rdx
    000003a3: 	movsd	(%rax), %xmm0
    000003a7: 	leaq	0x8(%rax), %rax
    000003ab: 	comisd	%xmm0, %xmm1
    000003af: 	ja	.Ltmp240 # Offset: 943
    000003b1: 	cmpq	%rdx, %rcx
    000003b4: 	jbe	.Ltmp238 # Offset: 948
.Ltmp239:
    000003ba: 	movsd	%xmm0, (%rcx)
    000003be: 	movsd	%xmm2, (%rdx)
.Ltmp237:
    000003c2: 	movq	%rcx, %rbx
    000003c5: 	jmp	.Ltmp241 # Offset: 965
.Ltmp221:
    000003c7: 	movq	%r13, %rax
    000003ca: 	subq	%rsi, %rax
    000003cd: 	cmpq	$0x8, %rax
    000003d1: 	jle	.Ltmp242 # Offset: 977
    000003d7: 	movsd	(%rsi), %xmm1
    000003db: 	movq	%r13, %r14
    000003de: 	movq	%rsi, %rdx
    000003e1: 	nopl	(%rax) # Size: 7
.Ltmp247:
    000003e8: 	movsd	-0x8(%r14), %xmm2
    000003ee: 	leaq	-0x8(%r14), %rcx
    000003f2: 	comisd	%xmm1, %xmm2
    000003f6: 	ja	.Ltmp243 # Offset: 1014
    000003f8: 	cmpq	%rdx, %rcx
    000003fb: 	jbe	.Ltmp244 # Offset: 1019
    000003fd: 	movsd	(%rdx), %xmm0
    00000401: 	leaq	0x8(%rdx), %rax
    00000405: 	comisd	%xmm0, %xmm1
    00000409: 	jbe	.Ltmp245 # Offset: 1033
    0000040b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp246:
    00000410: 	movq	%rax, %rdx
    00000413: 	movsd	(%rax), %xmm0
    00000417: 	leaq	0x8(%rax), %rax
    0000041b: 	comisd	%xmm0, %xmm1
    0000041f: 	ja	.Ltmp246 # Offset: 1055
    00000421: 	cmpq	%rdx, %rcx
    00000424: 	jbe	.Ltmp244 # Offset: 1060
.Ltmp245:
    00000426: 	movsd	%xmm0, (%rcx)
    0000042a: 	movsd	%xmm2, (%rdx)
.Ltmp243:
    0000042e: 	movq	%rcx, %r14
    00000431: 	jmp	.Ltmp247 # Offset: 1073
.Ltmp244:
    00000433: 	leaq	0x20(%rsp), %r15
    00000438: 	movq	%rsi, 0x28(%rsp)
    0000043d: 	leaq	0x10(%rsp), %rsi
    00000442: 	movq	%r15, %rdi
    00000445: 	movq	%rsi, 0x8(%rsp)
    0000044a: 	movq	%r14, 0x18(%rsp)
    0000044f: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1103
    00000454: 	movq	0x8(%rsp), %rsi
    00000459: 	movq	%r15, %rdi
    0000045c: 	movq	%r13, 0x18(%rsp)
    00000461: 	movq	%r14, 0x28(%rsp)
    00000466: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1126
.Ltmp242:
    0000046b: 	movq	%r12, %rax
    0000046e: 	subq	%r13, %rax
    00000471: 	cmpq	$0x8, %rax
    00000475: 	jle	.Ltmp219 # Offset: 1141
    0000047b: 	movsd	(%r13), %xmm1
    00000481: 	movq	%r12, %r14
    00000484: 	movq	%r13, %rax
    00000487: 	nopw	(%rax,%rax) # Size: 9
.Ltmp252:
    00000490: 	movsd	-0x8(%r14), %xmm2
    00000496: 	leaq	-0x8(%r14), %rdx
    0000049a: 	comisd	%xmm1, %xmm2
    0000049e: 	ja	.Ltmp248 # Offset: 1182
    000004a0: 	cmpq	%rax, %rdx
    000004a3: 	jbe	.Ltmp249 # Offset: 1187
    000004a9: 	movsd	(%rax), %xmm0
    000004ad: 	comisd	%xmm0, %xmm1
    000004b1: 	jbe	.Ltmp250 # Offset: 1201
    000004b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp251:
    000004b8: 	movsd	0x8(%rax), %xmm0
    000004bd: 	addq	$0x8, %rax
    000004c1: 	comisd	%xmm0, %xmm1
    000004c5: 	ja	.Ltmp251 # Offset: 1221
    000004c7: 	cmpq	%rax, %rdx
    000004ca: 	jbe	.Ltmp249 # Offset: 1226
.Ltmp250:
    000004d0: 	movsd	%xmm0, (%rdx)
    000004d4: 	movsd	%xmm2, (%rax)
.Ltmp248:
    000004d8: 	movq	%rdx, %r14
    000004db: 	jmp	.Ltmp252 # Offset: 1243
.Ltmp227:
    000004dd: 	movq	%r13, %rax
    000004e0: 	subq	%r12, %rax
    000004e3: 	cmpq	$0x8, %rax
    000004e7: 	jle	.Ltmp253 # Offset: 1255
    000004ed: 	movsd	(%r12), %xmm1
    000004f3: 	movq	%r13, %r14
    000004f6: 	movq	%r12, %rdx
    000004f9: 	nopl	(%rax) # Size: 7
.Ltmp258:
    00000500: 	movsd	-0x8(%r14), %xmm2
    00000506: 	leaq	-0x8(%r14), %rcx
    0000050a: 	comisd	%xmm1, %xmm2
    0000050e: 	ja	.Ltmp254 # Offset: 1294
    00000510: 	cmpq	%rdx, %rcx
    00000513: 	jbe	.Ltmp255 # Offset: 1299
    00000515: 	movsd	(%rdx), %xmm0
    00000519: 	leaq	0x8(%rdx), %rax
    0000051d: 	comisd	%xmm0, %xmm1
    00000521: 	jbe	.Ltmp256 # Offset: 1313
    00000523: 	nopl	(%rax,%rax) # Size: 5
.Ltmp257:
    00000528: 	movq	%rax, %rdx
    0000052b: 	movsd	(%rax), %xmm0
    0000052f: 	leaq	0x8(%rax), %rax
    00000533: 	comisd	%xmm0, %xmm1
    00000537: 	ja	.Ltmp257 # Offset: 1335
    00000539: 	cmpq	%rdx, %rcx
    0000053c: 	jbe	.Ltmp255 # Offset: 1340
.Ltmp256:
    0000053e: 	movsd	%xmm0, (%rcx)
    00000542: 	movsd	%xmm2, (%rdx)
.Ltmp254:
    00000546: 	movq	%rcx, %r14
    00000549: 	jmp	.Ltmp258 # Offset: 1353
.Ltmp255:
    0000054b: 	movq	%r12, 0x28(%rsp)
    00000550: 	leaq	0x10(%rsp), %r15
    00000555: 	leaq	0x20(%rsp), %r12
    0000055a: 	movq	%r15, %rsi
    0000055d: 	movq	%r12, %rdi
    00000560: 	movq	%r14, 0x18(%rsp)
    00000565: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1381
    0000056a: 	movq	%r15, %rsi
    0000056d: 	movq	%r12, %rdi
    00000570: 	movq	%r13, 0x18(%rsp)
    00000575: 	movq	%r14, 0x28(%rsp)
    0000057a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1402
.Ltmp253:
    0000057f: 	movq	%rbx, %rax
    00000582: 	subq	%r13, %rax
    00000585: 	cmpq	$0x8, %rax
    00000589: 	jle	.Ltmp225 # Offset: 1417
    0000058f: 	movsd	(%r13), %xmm1
    00000595: 	movq	%rbx, %r12
    00000598: 	movq	%r13, %rdx
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp263:
    000005a0: 	movsd	-0x8(%r12), %xmm2
    000005a7: 	leaq	-0x8(%r12), %rcx
    000005ac: 	comisd	%xmm1, %xmm2
    000005b0: 	ja	.Ltmp259 # Offset: 1456
    000005b2: 	cmpq	%rdx, %rcx
    000005b5: 	jbe	.Ltmp260 # Offset: 1461
    000005bb: 	movsd	(%rdx), %xmm0
    000005bf: 	leaq	0x8(%rdx), %rax
    000005c3: 	comisd	%xmm0, %xmm1
    000005c7: 	jbe	.Ltmp261 # Offset: 1479
    000005c9: 	nopl	(%rax) # Size: 7
.Ltmp262:
    000005d0: 	movq	%rax, %rdx
    000005d3: 	movsd	(%rax), %xmm0
    000005d7: 	leaq	0x8(%rax), %rax
    000005db: 	comisd	%xmm0, %xmm1
    000005df: 	ja	.Ltmp262 # Offset: 1503
    000005e1: 	cmpq	%rdx, %rcx
    000005e4: 	jbe	.Ltmp260 # Offset: 1508
.Ltmp261:
    000005ea: 	movsd	%xmm0, (%rcx)
    000005ee: 	movsd	%xmm2, (%rdx)
.Ltmp259:
    000005f2: 	movq	%rcx, %r12
    000005f5: 	jmp	.Ltmp263 # Offset: 1525
.Ltmp233:
    000005f7: 	movq	%r13, %rax
    000005fa: 	subq	%rbx, %rax
    000005fd: 	cmpq	$0x8, %rax
    00000601: 	jle	.Ltmp264 # Offset: 1537
    00000607: 	movsd	(%rbx), %xmm1
    0000060b: 	movq	%r13, %r14
    0000060e: 	movq	%rbx, %rdx
    00000611: 	nopl	(%rax) # Size: 7
.Ltmp269:
    00000618: 	movsd	-0x8(%r14), %xmm2
    0000061e: 	leaq	-0x8(%r14), %rcx
    00000622: 	comisd	%xmm1, %xmm2
    00000626: 	ja	.Ltmp265 # Offset: 1574
    00000628: 	cmpq	%rdx, %rcx
    0000062b: 	jbe	.Ltmp266 # Offset: 1579
    0000062d: 	movsd	(%rdx), %xmm0
    00000631: 	leaq	0x8(%rdx), %rax
    00000635: 	comisd	%xmm0, %xmm1
    00000639: 	jbe	.Ltmp267 # Offset: 1593
    0000063b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp268:
    00000640: 	movq	%rax, %rdx
    00000643: 	movsd	(%rax), %xmm0
    00000647: 	leaq	0x8(%rax), %rax
    0000064b: 	comisd	%xmm0, %xmm1
    0000064f: 	ja	.Ltmp268 # Offset: 1615
    00000651: 	cmpq	%rdx, %rcx
    00000654: 	jbe	.Ltmp266 # Offset: 1620
.Ltmp267:
    00000656: 	movsd	%xmm0, (%rcx)
    0000065a: 	movsd	%xmm2, (%rdx)
.Ltmp265:
    0000065e: 	movq	%rcx, %r14
    00000661: 	jmp	.Ltmp269 # Offset: 1633
.Ltmp266:
    00000663: 	movq	%rbx, 0x28(%rsp)
    00000668: 	leaq	0x20(%rsp), %r15
    0000066d: 	leaq	0x10(%rsp), %rbx
    00000672: 	movq	%rbx, %rsi
    00000675: 	movq	%r15, %rdi
    00000678: 	movq	%r14, 0x18(%rsp)
    0000067d: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1661
    00000682: 	movq	%rbx, %rsi
    00000685: 	movq	%r15, %rdi
    00000688: 	movq	%r13, 0x18(%rsp)
    0000068d: 	movq	%r14, 0x28(%rsp)
    00000692: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1682
.Ltmp264:
    00000697: 	movq	%r12, %rax
    0000069a: 	subq	%r13, %rax
    0000069d: 	cmpq	$0x8, %rax
    000006a1: 	jle	.Ltmp231 # Offset: 1697
    000006a7: 	movsd	(%r13), %xmm1
    000006ad: 	movq	%r12, %rbx
    000006b0: 	movq	%r13, %rdx
    000006b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp274:
    000006b8: 	movsd	-0x8(%rbx), %xmm2
    000006bd: 	leaq	-0x8(%rbx), %rcx
    000006c1: 	comisd	%xmm1, %xmm2
    000006c5: 	ja	.Ltmp270 # Offset: 1733
    000006c7: 	cmpq	%rdx, %rcx
    000006ca: 	jbe	.Ltmp271 # Offset: 1738
    000006d0: 	movsd	(%rdx), %xmm0
    000006d4: 	leaq	0x8(%rdx), %rax
    000006d8: 	comisd	%xmm0, %xmm1
    000006dc: 	jbe	.Ltmp272 # Offset: 1756
    000006de: 	nop # Size: 2
.Ltmp273:
    000006e0: 	movq	%rax, %rdx
    000006e3: 	movsd	(%rax), %xmm0
    000006e7: 	leaq	0x8(%rax), %rax
    000006eb: 	comisd	%xmm0, %xmm1
    000006ef: 	ja	.Ltmp273 # Offset: 1775
    000006f1: 	cmpq	%rdx, %rcx
    000006f4: 	jbe	.Ltmp271 # Offset: 1780
.Ltmp272:
    000006fa: 	movsd	%xmm0, (%rcx)
    000006fe: 	movsd	%xmm2, (%rdx)
.Ltmp270:
    00000702: 	movq	%rcx, %rbx
    00000705: 	jmp	.Ltmp274 # Offset: 1797
.Ltmp238:
    00000707: 	movq	%rbx, %rax
    0000070a: 	subq	%r12, %rax
    0000070d: 	cmpq	$0x8, %rax
    00000711: 	jle	.Ltmp275 # Offset: 1809
    00000717: 	movsd	(%r12), %xmm1
    0000071d: 	movq	%rbx, %r13
    00000720: 	movq	%r12, %rdx
    00000723: 	nopl	(%rax,%rax) # Size: 5
.Ltmp280:
    00000728: 	movsd	-0x8(%r13), %xmm2
    0000072e: 	leaq	-0x8(%r13), %rcx
    00000732: 	comisd	%xmm1, %xmm2
    00000736: 	ja	.Ltmp276 # Offset: 1846
    00000738: 	cmpq	%rdx, %rcx
    0000073b: 	jbe	.Ltmp277 # Offset: 1851
    0000073d: 	movsd	(%rdx), %xmm0
    00000741: 	leaq	0x8(%rdx), %rax
    00000745: 	comisd	%xmm0, %xmm1
    00000749: 	jbe	.Ltmp278 # Offset: 1865
    0000074b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp279:
    00000750: 	movq	%rax, %rdx
    00000753: 	movsd	(%rax), %xmm0
    00000757: 	leaq	0x8(%rax), %rax
    0000075b: 	comisd	%xmm0, %xmm1
    0000075f: 	ja	.Ltmp279 # Offset: 1887
    00000761: 	cmpq	%rdx, %rcx
    00000764: 	jbe	.Ltmp277 # Offset: 1892
.Ltmp278:
    00000766: 	movsd	%xmm0, (%rcx)
    0000076a: 	movsd	%xmm2, (%rdx)
.Ltmp276:
    0000076e: 	movq	%rcx, %r13
    00000771: 	jmp	.Ltmp280 # Offset: 1905
.Ltmp277:
    00000773: 	movq	%r12, 0x28(%rsp)
    00000778: 	leaq	0x10(%rsp), %r14
    0000077d: 	leaq	0x20(%rsp), %r12
    00000782: 	movq	%r14, %rsi
    00000785: 	movq	%r12, %rdi
    00000788: 	movq	%r13, 0x18(%rsp)
    0000078d: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1933
    00000792: 	movq	%r14, %rsi
    00000795: 	movq	%r12, %rdi
    00000798: 	movq	%rbx, 0x18(%rsp)
    0000079d: 	movq	%r13, 0x28(%rsp)
    000007a2: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1954
.Ltmp275:
    000007a7: 	movq	%rbp, %rax
    000007aa: 	subq	%rbx, %rax
    000007ad: 	cmpq	$0x8, %rax
    000007b1: 	jle	.Ltmp200 # Offset: 1969
    000007b7: 	movsd	(%rbx), %xmm1
    000007bb: 	movq	%rbp, %r12
    000007be: 	movq	%rbx, %rdx
    000007c1: 	nopl	(%rax) # Size: 7
.Ltmp285:
    000007c8: 	movsd	-0x8(%r12), %xmm2
    000007cf: 	leaq	-0x8(%r12), %rcx
    000007d4: 	comisd	%xmm1, %xmm2
    000007d8: 	ja	.Ltmp281 # Offset: 2008
    000007da: 	cmpq	%rdx, %rcx
    000007dd: 	jbe	.Ltmp282 # Offset: 2013
    000007df: 	movsd	(%rdx), %xmm0
    000007e3: 	leaq	0x8(%rdx), %rax
    000007e7: 	comisd	%xmm0, %xmm1
    000007eb: 	jbe	.Ltmp283 # Offset: 2027
    000007ed: 	nopl	(%rax) # Size: 3
.Ltmp284:
    000007f0: 	movq	%rax, %rdx
    000007f3: 	movsd	(%rax), %xmm0
    000007f7: 	leaq	0x8(%rax), %rax
    000007fb: 	comisd	%xmm0, %xmm1
    000007ff: 	ja	.Ltmp284 # Offset: 2047
    00000801: 	cmpq	%rdx, %rcx
    00000804: 	jbe	.Ltmp282 # Offset: 2052
.Ltmp283:
    00000806: 	movsd	%xmm0, (%rcx)
    0000080a: 	movsd	%xmm2, (%rdx)
.Ltmp281:
    0000080e: 	movq	%rcx, %r12
    00000811: 	jmp	.Ltmp285 # Offset: 2065
.Ltmp282:
    00000813: 	leaq	0x10(%rsp), %r14
    00000818: 	leaq	0x20(%rsp), %r13
    0000081d: 	movq	%r12, 0x18(%rsp)
    00000822: 	movq	%r14, %rsi
    00000825: 	movq	%r13, %rdi
    00000828: 	movq	%rbx, 0x28(%rsp)
    0000082d: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2093
    00000832: 	movq	%r14, %rsi
    00000835: 	movq	%r13, %rdi
    00000838: 	movq	%rbp, 0x18(%rsp)
    0000083d: 	movq	%r12, 0x28(%rsp)
    00000842: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2114
    00000847: 	jmp	.Ltmp200 # Offset: 2119
.Ltmp260:
    0000084c: 	movq	%r13, 0x28(%rsp)
    00000851: 	leaq	0x10(%rsp), %r14
    00000856: 	leaq	0x20(%rsp), %r13
    0000085b: 	movq	%r14, %rsi
    0000085e: 	movq	%r13, %rdi
    00000861: 	movq	%r12, 0x18(%rsp)
    00000866: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2150
    0000086b: 	movq	%r14, %rsi
    0000086e: 	movq	%r13, %rdi
    00000871: 	movq	%rbx, 0x18(%rsp)
    00000876: 	movq	%r12, 0x28(%rsp)
    0000087b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2171
    00000880: 	jmp	.Ltmp225 # Offset: 2176
.Ltmp208:
    00000885: 	callq	__stack_chk_fail@PLT # Offset: 2181
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_"

Binary Function "_Z14test_quicksortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_quicksortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_quicksortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_array.cpp/1
  Number      : 50
  State       : disassembled
  Address     : 0x3d10
  Size        : 0x14c2
  MaxSize     : 0x14d0
  Offset      : 0x3d10
  Section     : .text
  Orc Section : .local.text._Z14test_quicksortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	xorl	%r12d, %r12d
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdx, %rbx
    00000010: 	movq	%rbx, %r15
    00000013: 	subq	$0x88, %rsp
    0000001a: 	movq	%rdi, (%rsp)
    0000001e: 	movq	%rsi, 0x8(%rsp)
    00000023: 	movq	%rcx, 0x10(%rsp)
    00000028: 	movq	%r8, 0x18(%rsp)
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x78(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movl	iterations(%rip), %r13d
    00000049: 	movq	%rax, start_time(%rip)
    00000050: 	testl	%r13d, %r13d
    00000053: 	jle	.Ltmp286 # Offset: 83
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp299:
    00000060: 	movq	0x8(%rsp), %rax
    00000065: 	movq	0x8(%r15), %rbx
    00000069: 	movq	0x8(%rax), %rsi
    0000006d: 	movq	(%rsp), %rax
    00000071: 	movq	0x8(%rax), %rdx
    00000075: 	cmpq	%rdx, %rsi
    00000078: 	je	.Ltmp287 # Offset: 120
    0000007a: 	subq	%rdx, %rsi
    0000007d: 	leaq	0x8(%rdx), %rax
    00000081: 	leaq	-0x8(%rsi), %rcx
    00000085: 	cmpq	%rax, %rbx
    00000088: 	je	.Ltmp288 # Offset: 136
    0000008e: 	cmpq	$0x10, %rcx
    00000092: 	jbe	.Ltmp288 # Offset: 146
    00000098: 	shrq	$0x3, %rcx
    0000009c: 	xorl	%eax, %eax
    0000009e: 	addq	$0x1, %rcx
    000000a2: 	movq	%rcx, %rsi
    000000a5: 	shrq	%rsi
    000000a8: 	shlq	$0x4, %rsi
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp289:
    000000b0: 	movupd	(%rdx,%rax), %xmm3
    000000b5: 	movups	%xmm3, (%rbx,%rax)
    000000b9: 	addq	$0x10, %rax
    000000bd: 	cmpq	%rsi, %rax
    000000c0: 	jne	.Ltmp289 # Offset: 192
    000000c2: 	movq	%rcx, %rsi
    000000c5: 	andq	$-0x2, %rsi
    000000c9: 	leaq	(,%rsi,8), %rax
    000000d1: 	addq	%rax, %rdx
    000000d4: 	addq	%rbx, %rax
    000000d7: 	cmpq	%rcx, %rsi
    000000da: 	je	.Ltmp287 # Offset: 218
    000000dc: 	movsd	(%rdx), %xmm0
    000000e0: 	movsd	%xmm0, (%rax)
.Ltmp287:
    000000e4: 	movq	0x10(%rsp), %rax
    000000e9: 	movq	0x8(%rax), %r14
    000000ed: 	movq	%r14, %rax
    000000f0: 	subq	%rbx, %rax
    000000f3: 	cmpq	$0x8, %rax
    000000f7: 	jle	.Ltmp290 # Offset: 247
    000000fd: 	movsd	(%rbx), %xmm1
    00000101: 	movq	%r14, %rbp
    00000104: 	movq	%rbx, %rcx
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp295:
    00000110: 	movsd	-0x8(%rbp), %xmm2
    00000115: 	leaq	-0x8(%rbp), %rdx
    00000119: 	comisd	%xmm1, %xmm2
    0000011d: 	ja	.Ltmp291 # Offset: 285
    0000011f: 	cmpq	%rcx, %rdx
    00000122: 	jbe	.Ltmp292 # Offset: 290
    00000128: 	movsd	(%rcx), %xmm0
    0000012c: 	leaq	0x8(%rcx), %rax
    00000130: 	comisd	%xmm0, %xmm1
    00000134: 	jbe	.Ltmp293 # Offset: 308
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp294:
    00000140: 	movq	%rax, %rcx
    00000143: 	movsd	(%rax), %xmm0
    00000147: 	leaq	0x8(%rax), %rax
    0000014b: 	comisd	%xmm0, %xmm1
    0000014f: 	ja	.Ltmp294 # Offset: 335
    00000151: 	cmpq	%rcx, %rdx
    00000154: 	jbe	.Ltmp292 # Offset: 340
.Ltmp293:
    0000015a: 	movsd	%xmm0, (%rdx)
    0000015e: 	movsd	%xmm2, (%rcx)
.Ltmp291:
    00000162: 	movq	%rdx, %rbp
    00000165: 	jmp	.Ltmp295 # Offset: 357
.Ltmp410:
    00000167: 	leaq	0x50(%rsp), %rsi
    0000016c: 	leaq	0x60(%rsp), %rdi
    00000171: 	movq	%rbp, 0x58(%rsp)
    00000176: 	movq	%rsi, 0x28(%rsp)
    0000017b: 	movq	%rdi, 0x20(%rsp)
    00000180: 	movq	%r9, 0x68(%rsp)
    00000185: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 389
    0000018a: 	movq	0x28(%rsp), %rsi
    0000018f: 	movq	0x20(%rsp), %rdi
    00000194: 	movq	%r14, 0x58(%rsp)
    00000199: 	movq	%rbp, 0x68(%rsp)
    0000019e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 414
    000001a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp290:
    000001a8: 	addq	$0x8, %rbx
    000001ac: 	jmp	.Ltmp296 # Offset: 428
    000001ae: 	nop # Size: 2
.Ltmp298:
    000001b0: 	addq	$0x8, %rbx
    000001b4: 	movsd	-0x10(%rbx), %xmm0
    000001b9: 	comisd	(%rax), %xmm0
    000001bd: 	ja	.Ltmp297 # Offset: 445
.Ltmp296:
    000001c3: 	movq	%rbx, %rax
    000001c6: 	cmpq	%rbx, %r14
    000001c9: 	jne	.Ltmp298 # Offset: 457
    000001cb: 	addl	$0x1, %r12d
    000001cf: 	cmpl	%r13d, %r12d
    000001d2: 	jl	.Ltmp299 # Offset: 466
.Ltmp286:
    000001d8: 	callq	clock@PLT # Offset: 472
    000001dd: 	movq	%rax, end_time(%rip)
    000001e4: 	movq	0x78(%rsp), %rdx
    000001e9: 	subq	%fs:0x28, %rdx
    000001f2: 	jne	.Ltmp300 # Offset: 498
    000001f8: 	subq	start_time(%rip), %rax
    000001ff: 	pxor	%xmm0, %xmm0
    00000203: 	movq	0x18(%rsp), %rdi
    00000208: 	cvtsi2sd	%rax, %xmm0
    0000020d: 	divsd	DATAat0x13600(%rip), %xmm0
    00000215: 	addq	$0x88, %rsp
    0000021c: 	popq	%rbx
    0000021d: 	popq	%rbp
    0000021e: 	popq	%r12
    00000220: 	popq	%r13
    00000222: 	popq	%r14
    00000224: 	popq	%r15
    00000226: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp292:
    00000230: 	movq	%rbp, %rax
    00000233: 	subq	%rbx, %rax
    00000236: 	cmpq	$0x8, %rax
    0000023a: 	jle	.Ltmp301 # Offset: 570
    00000240: 	movsd	(%rbx), %xmm1
    00000244: 	movq	%rbp, %rax
    00000247: 	movq	%rbx, %rsi
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp306:
    00000250: 	comisd	%xmm1, %xmm2
    00000254: 	leaq	-0x8(%rax), %rcx
    00000258: 	ja	.Ltmp302 # Offset: 600
    0000025a: 	cmpq	%rsi, %rcx
    0000025d: 	jbe	.Ltmp303 # Offset: 605
    00000263: 	movsd	(%rsi), %xmm0
    00000267: 	leaq	0x8(%rsi), %rdx
    0000026b: 	comisd	%xmm0, %xmm1
    0000026f: 	jbe	.Ltmp304 # Offset: 623
    00000271: 	nopl	(%rax) # Size: 7
.Ltmp305:
    00000278: 	movq	%rdx, %rsi
    0000027b: 	movsd	(%rdx), %xmm0
    0000027f: 	leaq	0x8(%rdx), %rdx
    00000283: 	comisd	%xmm0, %xmm1
    00000287: 	ja	.Ltmp305 # Offset: 647
    00000289: 	cmpq	%rsi, %rcx
    0000028c: 	jbe	.Ltmp303 # Offset: 652
.Ltmp304:
    00000292: 	movsd	%xmm0, (%rcx)
    00000296: 	movsd	%xmm2, (%rsi)
.Ltmp302:
    0000029a: 	movsd	-0x8(%rcx), %xmm2
    0000029f: 	movq	%rcx, %rax
    000002a2: 	jmp	.Ltmp306 # Offset: 674
.Ltmp443:
    000002a4: 	leaq	0x50(%rsp), %rsi
    000002a9: 	leaq	0x60(%rsp), %rdi
    000002ae: 	movq	%rcx, 0x58(%rsp)
    000002b3: 	movq	%rcx, 0x30(%rsp)
    000002b8: 	movq	%rsi, 0x28(%rsp)
    000002bd: 	movq	%rdi, 0x20(%rsp)
    000002c2: 	movq	%r9, 0x68(%rsp)
    000002c7: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 711
    000002cc: 	movq	0x30(%rsp), %rcx
    000002d1: 	movq	0x28(%rsp), %rsi
    000002d6: 	movq	%rbp, 0x58(%rsp)
    000002db: 	movq	0x20(%rsp), %rdi
    000002e0: 	movq	%rcx, 0x68(%rsp)
    000002e5: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 741
    000002ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp301:
    000002f0: 	movq	%r14, %rax
    000002f3: 	subq	%rbp, %rax
    000002f6: 	cmpq	$0x8, %rax
    000002fa: 	jle	.Ltmp290 # Offset: 762
    00000300: 	movsd	(%rbp), %xmm1
    00000305: 	movq	%r14, %rax
    00000308: 	movq	%rbp, %rsi
    0000030b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp311:
    00000310: 	movsd	-0x8(%rax), %xmm2
    00000315: 	leaq	-0x8(%rax), %rcx
    00000319: 	comisd	%xmm1, %xmm2
    0000031d: 	ja	.Ltmp307 # Offset: 797
    0000031f: 	cmpq	%rsi, %rcx
    00000322: 	jbe	.Ltmp308 # Offset: 802
    00000324: 	movsd	(%rsi), %xmm0
    00000328: 	leaq	0x8(%rsi), %rdx
    0000032c: 	comisd	%xmm0, %xmm1
    00000330: 	jbe	.Ltmp309 # Offset: 816
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp310:
    00000338: 	movq	%rdx, %rsi
    0000033b: 	movsd	(%rdx), %xmm0
    0000033f: 	leaq	0x8(%rdx), %rdx
    00000343: 	comisd	%xmm0, %xmm1
    00000347: 	ja	.Ltmp310 # Offset: 839
    00000349: 	cmpq	%rsi, %rcx
    0000034c: 	jbe	.Ltmp308 # Offset: 844
.Ltmp309:
    0000034e: 	movsd	%xmm0, (%rcx)
    00000352: 	movsd	%xmm2, (%rsi)
.Ltmp307:
    00000356: 	movq	%rcx, %rax
    00000359: 	jmp	.Ltmp311 # Offset: 857
    0000035b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp297:
    00000360: 	movq	0x18(%rsp), %rax
    00000365: 	leaq	DATAat0x131ba(%rip), %rsi
    0000036c: 	movl	$0x1, %edi
    00000371: 	addl	$0x1, %r12d
    00000375: 	movq	(%rax), %rdx
    00000378: 	xorl	%eax, %eax
    0000037a: 	callq	__printf_chk@PLT # Offset: 890
    0000037f: 	movl	iterations(%rip), %r13d
    00000386: 	cmpl	%r13d, %r12d
    00000389: 	jl	.Ltmp299 # Offset: 905
    0000038f: 	jmp	.Ltmp286 # Offset: 911
.Ltmp308:
    00000394: 	movq	%rax, %rcx
    00000397: 	subq	%rbp, %rcx
    0000039a: 	cmpq	$0x8, %rcx
    0000039e: 	jle	.Ltmp312 # Offset: 926
    000003a4: 	movsd	(%rbp), %xmm1
    000003a9: 	movq	%rax, %r9
    000003ac: 	movq	%rbp, %rsi
    000003af: 	nop # Size: 1
.Ltmp317:
    000003b0: 	comisd	%xmm1, %xmm2
    000003b4: 	leaq	-0x8(%r9), %rcx
    000003b8: 	ja	.Ltmp313 # Offset: 952
    000003ba: 	cmpq	%rsi, %rcx
    000003bd: 	jbe	.Ltmp314 # Offset: 957
    000003c3: 	movsd	(%rsi), %xmm0
    000003c7: 	leaq	0x8(%rsi), %rdx
    000003cb: 	comisd	%xmm0, %xmm1
    000003cf: 	jbe	.Ltmp315 # Offset: 975
    000003d1: 	nopl	(%rax) # Size: 7
.Ltmp316:
    000003d8: 	movq	%rdx, %rsi
    000003db: 	movsd	(%rdx), %xmm0
    000003df: 	leaq	0x8(%rdx), %rdx
    000003e3: 	comisd	%xmm0, %xmm1
    000003e7: 	ja	.Ltmp316 # Offset: 999
    000003e9: 	cmpq	%rsi, %rcx
    000003ec: 	jbe	.Ltmp314 # Offset: 1004
.Ltmp315:
    000003f2: 	movsd	%xmm0, (%rcx)
    000003f6: 	movsd	%xmm2, (%rsi)
.Ltmp313:
    000003fa: 	movsd	-0x8(%rcx), %xmm2
    000003ff: 	movq	%rcx, %r9
    00000402: 	jmp	.Ltmp317 # Offset: 1026
.Ltmp388:
    00000404: 	movq	%rbp, 0x68(%rsp)
    00000409: 	leaq	0x60(%rsp), %rbp
    0000040e: 	leaq	0x50(%rsp), %rsi
    00000413: 	movq	%rbp, %rdi
    00000416: 	movq	%rax, 0x20(%rsp)
    0000041b: 	movq	%r9, 0x58(%rsp)
    00000420: 	movq	%r9, 0x30(%rsp)
    00000425: 	movq	%rsi, 0x28(%rsp)
    0000042a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1066
    0000042f: 	movq	0x20(%rsp), %rax
    00000434: 	movq	0x30(%rsp), %r9
    00000439: 	movq	%rbp, %rdi
    0000043c: 	movq	0x28(%rsp), %rsi
    00000441: 	movq	%rax, 0x58(%rsp)
    00000446: 	movq	%r9, 0x68(%rsp)
    0000044b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1099
    00000450: 	movq	0x20(%rsp), %rax
.Ltmp312:
    00000455: 	movq	%r14, %rcx
    00000458: 	subq	%rax, %rcx
    0000045b: 	cmpq	$0x8, %rcx
    0000045f: 	jle	.Ltmp290 # Offset: 1119
    00000465: 	movsd	(%rax), %xmm1
    00000469: 	movq	%r14, %rbp
    0000046c: 	movq	%rax, %rsi
    0000046f: 	nop # Size: 1
.Ltmp322:
    00000470: 	movsd	-0x8(%rbp), %xmm2
    00000475: 	leaq	-0x8(%rbp), %rcx
    00000479: 	comisd	%xmm1, %xmm2
    0000047d: 	ja	.Ltmp318 # Offset: 1149
    0000047f: 	cmpq	%rsi, %rcx
    00000482: 	jbe	.Ltmp319 # Offset: 1154
    00000488: 	movsd	(%rsi), %xmm0
    0000048c: 	leaq	0x8(%rsi), %rdx
    00000490: 	comisd	%xmm0, %xmm1
    00000494: 	jbe	.Ltmp320 # Offset: 1172
    00000496: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp321:
    000004a0: 	movq	%rdx, %rsi
    000004a3: 	movsd	(%rdx), %xmm0
    000004a7: 	leaq	0x8(%rdx), %rdx
    000004ab: 	comisd	%xmm0, %xmm1
    000004af: 	ja	.Ltmp321 # Offset: 1199
    000004b1: 	cmpq	%rsi, %rcx
    000004b4: 	jbe	.Ltmp319 # Offset: 1204
.Ltmp320:
    000004ba: 	movsd	%xmm0, (%rcx)
    000004be: 	movsd	%xmm2, (%rsi)
.Ltmp318:
    000004c2: 	movq	%rcx, %rbp
    000004c5: 	jmp	.Ltmp322 # Offset: 1221
.Ltmp303:
    000004c7: 	movq	%rax, %rcx
    000004ca: 	subq	%rbx, %rcx
    000004cd: 	cmpq	$0x8, %rcx
    000004d1: 	jle	.Ltmp323 # Offset: 1233
    000004d7: 	movsd	(%rbx), %xmm1
    000004db: 	movq	%rax, %r9
    000004de: 	movq	%rbx, %rsi
    000004e1: 	nopl	(%rax) # Size: 7
.Ltmp328:
    000004e8: 	comisd	%xmm1, %xmm2
    000004ec: 	leaq	-0x8(%r9), %rcx
    000004f0: 	ja	.Ltmp324 # Offset: 1264
    000004f2: 	cmpq	%rsi, %rcx
    000004f5: 	jbe	.Ltmp325 # Offset: 1269
    000004fb: 	movsd	(%rsi), %xmm0
    000004ff: 	leaq	0x8(%rsi), %rdx
    00000503: 	comisd	%xmm0, %xmm1
    00000507: 	jbe	.Ltmp326 # Offset: 1287
    00000509: 	nopl	(%rax) # Size: 7
.Ltmp327:
    00000510: 	movq	%rdx, %rsi
    00000513: 	movsd	(%rdx), %xmm0
    00000517: 	leaq	0x8(%rdx), %rdx
    0000051b: 	comisd	%xmm0, %xmm1
    0000051f: 	ja	.Ltmp327 # Offset: 1311
    00000521: 	cmpq	%rsi, %rcx
    00000524: 	jbe	.Ltmp325 # Offset: 1316
.Ltmp326:
    0000052a: 	movsd	%xmm0, (%rcx)
    0000052e: 	movsd	%xmm2, (%rsi)
.Ltmp324:
    00000532: 	movsd	-0x8(%rcx), %xmm2
    00000537: 	movq	%rcx, %r9
    0000053a: 	jmp	.Ltmp328 # Offset: 1338
.Ltmp432:
    0000053c: 	leaq	0x50(%rsp), %rsi
    00000541: 	leaq	0x60(%rsp), %rdi
    00000546: 	movq	%rax, 0x20(%rsp)
    0000054b: 	movq	%r9, 0x58(%rsp)
    00000550: 	movq	%r9, 0x38(%rsp)
    00000555: 	movq	%r10, 0x68(%rsp)
    0000055a: 	movq	%rsi, 0x30(%rsp)
    0000055f: 	movq	%rdi, 0x28(%rsp)
    00000564: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1380
    00000569: 	movq	0x20(%rsp), %rax
    0000056e: 	movq	0x38(%rsp), %r9
    00000573: 	movq	0x30(%rsp), %rsi
    00000578: 	movq	0x28(%rsp), %rdi
    0000057d: 	movq	%rax, 0x58(%rsp)
    00000582: 	movq	%r9, 0x68(%rsp)
    00000587: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1415
    0000058c: 	movq	0x20(%rsp), %rax
.Ltmp323:
    00000591: 	movq	%rbp, %rcx
    00000594: 	subq	%rax, %rcx
    00000597: 	cmpq	$0x8, %rcx
    0000059b: 	jle	.Ltmp301 # Offset: 1435
    000005a1: 	movsd	(%rax), %xmm1
    000005a5: 	movq	%rbp, %rcx
    000005a8: 	movq	%rax, %rdi
    000005ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp333:
    000005b0: 	movsd	-0x8(%rcx), %xmm2
    000005b5: 	leaq	-0x8(%rcx), %rsi
    000005b9: 	comisd	%xmm1, %xmm2
    000005bd: 	ja	.Ltmp329 # Offset: 1469
    000005bf: 	cmpq	%rdi, %rsi
    000005c2: 	jbe	.Ltmp330 # Offset: 1474
    000005c4: 	movsd	(%rdi), %xmm0
    000005c8: 	leaq	0x8(%rdi), %rdx
    000005cc: 	comisd	%xmm0, %xmm1
    000005d0: 	jbe	.Ltmp331 # Offset: 1488
    000005d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp332:
    000005d8: 	movq	%rdx, %rdi
    000005db: 	movsd	(%rdx), %xmm0
    000005df: 	leaq	0x8(%rdx), %rdx
    000005e3: 	comisd	%xmm0, %xmm1
    000005e7: 	ja	.Ltmp332 # Offset: 1511
    000005e9: 	cmpq	%rdi, %rsi
    000005ec: 	jbe	.Ltmp330 # Offset: 1516
.Ltmp331:
    000005ee: 	movsd	%xmm0, (%rsi)
    000005f2: 	movsd	%xmm2, (%rdi)
.Ltmp329:
    000005f6: 	movq	%rsi, %rcx
    000005f9: 	jmp	.Ltmp333 # Offset: 1529
.Ltmp288:
    000005fb: 	xorl	%eax, %eax
    000005fd: 	nopl	(%rax) # Size: 3
.Ltmp334:
    00000600: 	movsd	(%rdx,%rax), %xmm0
    00000605: 	movsd	%xmm0, (%rbx,%rax)
    0000060a: 	addq	$0x8, %rax
    0000060e: 	cmpq	%rax, %rsi
    00000611: 	jne	.Ltmp334 # Offset: 1553
    00000613: 	jmp	.Ltmp287 # Offset: 1555
.Ltmp330:
    00000618: 	movq	%rcx, %rsi
    0000061b: 	subq	%rax, %rsi
    0000061e: 	cmpq	$0x8, %rsi
    00000622: 	jle	.Ltmp335 # Offset: 1570
    00000628: 	movsd	(%rax), %xmm1
    0000062c: 	movq	%rcx, %r9
    0000062f: 	movq	%rax, %rdi
    00000632: 	nopw	(%rax,%rax) # Size: 6
.Ltmp340:
    00000638: 	comisd	%xmm1, %xmm2
    0000063c: 	leaq	-0x8(%r9), %rsi
    00000640: 	ja	.Ltmp336 # Offset: 1600
    00000642: 	cmpq	%rdi, %rsi
    00000645: 	jbe	.Ltmp337 # Offset: 1605
    0000064b: 	movsd	(%rdi), %xmm0
    0000064f: 	leaq	0x8(%rdi), %rdx
    00000653: 	comisd	%xmm0, %xmm1
    00000657: 	jbe	.Ltmp338 # Offset: 1623
    00000659: 	nopl	(%rax) # Size: 7
.Ltmp339:
    00000660: 	movq	%rdx, %rdi
    00000663: 	movsd	(%rdx), %xmm0
    00000667: 	leaq	0x8(%rdx), %rdx
    0000066b: 	comisd	%xmm0, %xmm1
    0000066f: 	ja	.Ltmp339 # Offset: 1647
    00000671: 	cmpq	%rdi, %rsi
    00000674: 	jbe	.Ltmp337 # Offset: 1652
.Ltmp338:
    0000067a: 	movsd	%xmm0, (%rsi)
    0000067e: 	movsd	%xmm2, (%rdi)
.Ltmp336:
    00000682: 	movsd	-0x8(%rsi), %xmm2
    00000687: 	movq	%rsi, %r9
    0000068a: 	jmp	.Ltmp340 # Offset: 1674
.Ltmp454:
    0000068c: 	leaq	0x50(%rsp), %rsi
    00000691: 	leaq	0x60(%rsp), %rdi
    00000696: 	movq	%rcx, 0x20(%rsp)
    0000069b: 	movq	%r10, 0x58(%rsp)
    000006a0: 	movq	%r10, 0x38(%rsp)
    000006a5: 	movq	%r9, 0x68(%rsp)
    000006aa: 	movq	%rsi, 0x30(%rsp)
    000006af: 	movq	%rdi, 0x28(%rsp)
    000006b4: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1716
    000006b9: 	movq	0x20(%rsp), %rcx
    000006be: 	movq	0x38(%rsp), %r10
    000006c3: 	movq	0x30(%rsp), %rsi
    000006c8: 	movq	0x28(%rsp), %rdi
    000006cd: 	movq	%rcx, 0x58(%rsp)
    000006d2: 	movq	%r10, 0x68(%rsp)
    000006d7: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 1751
    000006dc: 	movq	0x20(%rsp), %rcx
.Ltmp335:
    000006e1: 	movq	%rbp, %rax
    000006e4: 	subq	%rcx, %rax
    000006e7: 	cmpq	$0x8, %rax
    000006eb: 	jle	.Ltmp301 # Offset: 1771
    000006f1: 	movsd	(%rcx), %xmm1
    000006f5: 	movq	%rbp, %r9
    000006f8: 	movq	%rcx, %rsi
    000006fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp345:
    00000700: 	movsd	-0x8(%r9), %xmm2
    00000706: 	leaq	-0x8(%r9), %rdx
    0000070a: 	comisd	%xmm1, %xmm2
    0000070e: 	ja	.Ltmp341 # Offset: 1806
    00000710: 	cmpq	%rsi, %rdx
    00000713: 	jbe	.Ltmp342 # Offset: 1811
    00000719: 	movsd	(%rsi), %xmm0
    0000071d: 	leaq	0x8(%rsi), %rax
    00000721: 	comisd	%xmm0, %xmm1
    00000725: 	jbe	.Ltmp343 # Offset: 1829
    00000727: 	nopw	(%rax,%rax) # Size: 9
.Ltmp344:
    00000730: 	movq	%rax, %rsi
    00000733: 	movsd	(%rax), %xmm0
    00000737: 	leaq	0x8(%rax), %rax
    0000073b: 	comisd	%xmm0, %xmm1
    0000073f: 	ja	.Ltmp344 # Offset: 1855
    00000741: 	cmpq	%rsi, %rdx
    00000744: 	jbe	.Ltmp342 # Offset: 1860
.Ltmp343:
    0000074a: 	movsd	%xmm0, (%rdx)
    0000074e: 	movsd	%xmm2, (%rsi)
.Ltmp341:
    00000752: 	movq	%rdx, %r9
    00000755: 	jmp	.Ltmp345 # Offset: 1877
.Ltmp325:
    00000757: 	movq	%r9, %rcx
    0000075a: 	subq	%rbx, %rcx
    0000075d: 	cmpq	$0x8, %rcx
    00000761: 	jle	.Ltmp346 # Offset: 1889
    00000763: 	movsd	(%rbx), %xmm1
    00000767: 	movq	%r9, %r10
    0000076a: 	movq	%rbx, %rcx
    0000076d: 	nopl	(%rax) # Size: 3
.Ltmp351:
    00000770: 	comisd	%xmm1, %xmm2
    00000774: 	leaq	-0x8(%r10), %rdx
    00000778: 	ja	.Ltmp347 # Offset: 1912
    0000077a: 	cmpq	%rcx, %rdx
    0000077d: 	jbe	.Ltmp348 # Offset: 1917
    0000077f: 	movsd	(%rcx), %xmm0
    00000783: 	comisd	%xmm0, %xmm1
    00000787: 	jbe	.Ltmp349 # Offset: 1927
    00000789: 	nopl	(%rax) # Size: 7
.Ltmp350:
    00000790: 	movsd	0x8(%rcx), %xmm0
    00000795: 	addq	$0x8, %rcx
    00000799: 	comisd	%xmm0, %xmm1
    0000079d: 	ja	.Ltmp350 # Offset: 1949
    0000079f: 	cmpq	%rcx, %rdx
    000007a2: 	jbe	.Ltmp348 # Offset: 1954
.Ltmp349:
    000007a4: 	movsd	%xmm0, (%rdx)
    000007a8: 	movsd	%xmm2, (%rcx)
.Ltmp347:
    000007ac: 	movsd	-0x8(%rdx), %xmm2
    000007b1: 	movq	%rdx, %r10
    000007b4: 	jmp	.Ltmp351 # Offset: 1972
.Ltmp348:
    000007b6: 	movq	%r10, %rcx
    000007b9: 	subq	%rbx, %rcx
    000007bc: 	cmpq	$0x8, %rcx
    000007c0: 	jg	.Ltmp352 # Offset: 1984
    000007c6: 	movq	%r9, %rcx
    000007c9: 	subq	%r10, %rcx
    000007cc: 	cmpq	$0x8, %rcx
    000007d0: 	jg	.Ltmp353 # Offset: 2000
.Ltmp346:
    000007d6: 	movq	%rax, %rcx
    000007d9: 	subq	%r9, %rcx
    000007dc: 	cmpq	$0x8, %rcx
    000007e0: 	jle	.Ltmp323 # Offset: 2016
    000007e6: 	movsd	(%r9), %xmm1
    000007eb: 	movq	%rax, %r10
    000007ee: 	movq	%r9, %rcx
    000007f1: 	nopl	(%rax) # Size: 7
.Ltmp358:
    000007f8: 	movsd	-0x8(%r10), %xmm2
    000007fe: 	leaq	-0x8(%r10), %rdx
    00000802: 	comisd	%xmm1, %xmm2
    00000806: 	ja	.Ltmp354 # Offset: 2054
    00000808: 	cmpq	%rcx, %rdx
    0000080b: 	jbe	.Ltmp355 # Offset: 2059
    00000811: 	movsd	(%rcx), %xmm0
    00000815: 	comisd	%xmm0, %xmm1
    00000819: 	jbe	.Ltmp356 # Offset: 2073
    0000081b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp357:
    00000820: 	movsd	0x8(%rcx), %xmm0
    00000825: 	addq	$0x8, %rcx
    00000829: 	comisd	%xmm0, %xmm1
    0000082d: 	ja	.Ltmp357 # Offset: 2093
    0000082f: 	cmpq	%rcx, %rdx
    00000832: 	jbe	.Ltmp355 # Offset: 2098
.Ltmp356:
    00000838: 	movsd	%xmm0, (%rdx)
    0000083c: 	movsd	%xmm2, (%rcx)
.Ltmp354:
    00000840: 	movq	%rdx, %r10
    00000843: 	jmp	.Ltmp358 # Offset: 2115
.Ltmp319:
    00000845: 	movq	%rbp, %rcx
    00000848: 	subq	%rax, %rcx
    0000084b: 	cmpq	$0x8, %rcx
    0000084f: 	jle	.Ltmp359 # Offset: 2127
    00000855: 	movsd	(%rax), %xmm1
    00000859: 	movq	%rbp, %r9
    0000085c: 	movq	%rax, %rsi
    0000085f: 	nop # Size: 1
.Ltmp364:
    00000860: 	comisd	%xmm1, %xmm2
    00000864: 	leaq	-0x8(%r9), %rcx
    00000868: 	ja	.Ltmp360 # Offset: 2152
    0000086a: 	cmpq	%rsi, %rcx
    0000086d: 	jbe	.Ltmp361 # Offset: 2157
    00000873: 	movsd	(%rsi), %xmm0
    00000877: 	leaq	0x8(%rsi), %rdx
    0000087b: 	comisd	%xmm0, %xmm1
    0000087f: 	jbe	.Ltmp362 # Offset: 2175
    00000881: 	nopl	(%rax) # Size: 7
.Ltmp363:
    00000888: 	movq	%rdx, %rsi
    0000088b: 	movsd	(%rdx), %xmm0
    0000088f: 	leaq	0x8(%rdx), %rdx
    00000893: 	comisd	%xmm0, %xmm1
    00000897: 	ja	.Ltmp363 # Offset: 2199
    00000899: 	cmpq	%rsi, %rcx
    0000089c: 	jbe	.Ltmp361 # Offset: 2204
.Ltmp362:
    000008a2: 	movsd	%xmm0, (%rcx)
    000008a6: 	movsd	%xmm2, (%rsi)
.Ltmp360:
    000008aa: 	movsd	-0x8(%rcx), %xmm2
    000008af: 	movq	%rcx, %r9
    000008b2: 	jmp	.Ltmp364 # Offset: 2226
.Ltmp421:
    000008b4: 	leaq	0x50(%rsp), %rsi
    000008b9: 	leaq	0x60(%rsp), %rdi
    000008be: 	movq	%rcx, 0x58(%rsp)
    000008c3: 	movq	%rcx, 0x30(%rsp)
    000008c8: 	movq	%rsi, 0x28(%rsp)
    000008cd: 	movq	%rdi, 0x20(%rsp)
    000008d2: 	movq	%r9, 0x68(%rsp)
    000008d7: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2263
    000008dc: 	movq	0x30(%rsp), %rcx
    000008e1: 	movq	0x28(%rsp), %rsi
    000008e6: 	movq	%rbp, 0x58(%rsp)
    000008eb: 	movq	0x20(%rsp), %rdi
    000008f0: 	movq	%rcx, 0x68(%rsp)
    000008f5: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2293
.Ltmp359:
    000008fa: 	movq	%r14, %rax
    000008fd: 	subq	%rbp, %rax
    00000900: 	cmpq	$0x8, %rax
    00000904: 	jle	.Ltmp290 # Offset: 2308
    0000090a: 	movsd	(%rbp), %xmm1
    0000090f: 	movq	%r14, %r9
    00000912: 	movq	%rbp, %rcx
    00000915: 	nopl	(%rax) # Size: 3
.Ltmp369:
    00000918: 	movsd	-0x8(%r9), %xmm2
    0000091e: 	leaq	-0x8(%r9), %rdx
    00000922: 	comisd	%xmm1, %xmm2
    00000926: 	ja	.Ltmp365 # Offset: 2342
    00000928: 	cmpq	%rcx, %rdx
    0000092b: 	jbe	.Ltmp366 # Offset: 2347
    00000931: 	movsd	(%rcx), %xmm0
    00000935: 	leaq	0x8(%rcx), %rax
    00000939: 	comisd	%xmm0, %xmm1
    0000093d: 	jbe	.Ltmp367 # Offset: 2365
    0000093f: 	nop # Size: 1
.Ltmp368:
    00000940: 	movq	%rax, %rcx
    00000943: 	movsd	(%rax), %xmm0
    00000947: 	leaq	0x8(%rax), %rax
    0000094b: 	comisd	%xmm0, %xmm1
    0000094f: 	ja	.Ltmp368 # Offset: 2383
    00000951: 	cmpq	%rcx, %rdx
    00000954: 	jbe	.Ltmp366 # Offset: 2388
.Ltmp367:
    0000095a: 	movsd	%xmm0, (%rdx)
    0000095e: 	movsd	%xmm2, (%rcx)
.Ltmp365:
    00000962: 	movq	%rdx, %r9
    00000965: 	jmp	.Ltmp369 # Offset: 2405
.Ltmp314:
    00000967: 	movq	%r9, %rcx
    0000096a: 	subq	%rbp, %rcx
    0000096d: 	cmpq	$0x8, %rcx
    00000971: 	jle	.Ltmp370 # Offset: 2417
    00000977: 	movsd	(%rbp), %xmm1
    0000097c: 	movq	%r9, %r10
    0000097f: 	movq	%rbp, %rsi
    00000982: 	nopw	(%rax,%rax) # Size: 6
.Ltmp375:
    00000988: 	comisd	%xmm1, %xmm2
    0000098c: 	leaq	-0x8(%r10), %rcx
    00000990: 	ja	.Ltmp371 # Offset: 2448
    00000992: 	cmpq	%rsi, %rcx
    00000995: 	jbe	.Ltmp372 # Offset: 2453
    0000099b: 	movsd	(%rsi), %xmm0
    0000099f: 	leaq	0x8(%rsi), %rdx
    000009a3: 	comisd	%xmm0, %xmm1
    000009a7: 	jbe	.Ltmp373 # Offset: 2471
    000009a9: 	nopl	(%rax) # Size: 7
.Ltmp374:
    000009b0: 	movq	%rdx, %rsi
    000009b3: 	movsd	(%rdx), %xmm0
    000009b7: 	leaq	0x8(%rdx), %rdx
    000009bb: 	comisd	%xmm0, %xmm1
    000009bf: 	ja	.Ltmp374 # Offset: 2495
    000009c1: 	cmpq	%rsi, %rcx
    000009c4: 	jbe	.Ltmp372 # Offset: 2500
.Ltmp373:
    000009ca: 	movsd	%xmm0, (%rcx)
    000009ce: 	movsd	%xmm2, (%rsi)
.Ltmp371:
    000009d2: 	movsd	-0x8(%rcx), %xmm2
    000009d7: 	movq	%rcx, %r10
    000009da: 	jmp	.Ltmp375 # Offset: 2522
.Ltmp399:
    000009dc: 	leaq	0x50(%rsp), %rsi
    000009e1: 	leaq	0x60(%rsp), %rdi
    000009e6: 	movq	%rax, 0x38(%rsp)
    000009eb: 	movq	%r9, 0x20(%rsp)
    000009f0: 	movq	%r10, 0x68(%rsp)
    000009f5: 	movq	%rsi, 0x30(%rsp)
    000009fa: 	movq	%rdi, 0x28(%rsp)
    000009ff: 	movq	%rbp, 0x58(%rsp)
    00000a04: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2564
    00000a09: 	movq	0x20(%rsp), %r9
    00000a0e: 	movq	0x30(%rsp), %rsi
    00000a13: 	movq	%rbp, 0x68(%rsp)
    00000a18: 	movq	0x28(%rsp), %rdi
    00000a1d: 	movq	%r9, 0x58(%rsp)
    00000a22: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2594
    00000a27: 	movq	0x38(%rsp), %rax
    00000a2c: 	movq	0x20(%rsp), %r9
.Ltmp370:
    00000a31: 	movq	%rax, %rcx
    00000a34: 	subq	%r9, %rcx
    00000a37: 	cmpq	$0x8, %rcx
    00000a3b: 	jle	.Ltmp312 # Offset: 2619
    00000a41: 	movsd	(%r9), %xmm1
    00000a46: 	movq	%rax, %rbp
    00000a49: 	movq	%r9, %rsi
    00000a4c: 	nopl	(%rax) # Size: 4
.Ltmp380:
    00000a50: 	movsd	-0x8(%rbp), %xmm2
    00000a55: 	leaq	-0x8(%rbp), %rcx
    00000a59: 	comisd	%xmm1, %xmm2
    00000a5d: 	ja	.Ltmp376 # Offset: 2653
    00000a5f: 	cmpq	%rsi, %rcx
    00000a62: 	jbe	.Ltmp377 # Offset: 2658
    00000a64: 	movsd	(%rsi), %xmm0
    00000a68: 	leaq	0x8(%rsi), %rdx
    00000a6c: 	comisd	%xmm0, %xmm1
    00000a70: 	jbe	.Ltmp378 # Offset: 2672
    00000a72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp379:
    00000a78: 	movq	%rdx, %rsi
    00000a7b: 	movsd	(%rdx), %xmm0
    00000a7f: 	leaq	0x8(%rdx), %rdx
    00000a83: 	comisd	%xmm0, %xmm1
    00000a87: 	ja	.Ltmp379 # Offset: 2695
    00000a89: 	cmpq	%rsi, %rcx
    00000a8c: 	jbe	.Ltmp377 # Offset: 2700
.Ltmp378:
    00000a8e: 	movsd	%xmm0, (%rcx)
    00000a92: 	movsd	%xmm2, (%rsi)
.Ltmp376:
    00000a96: 	movq	%rcx, %rbp
    00000a99: 	jmp	.Ltmp380 # Offset: 2713
.Ltmp377:
    00000a9b: 	movq	%rbp, %rcx
    00000a9e: 	subq	%r9, %rcx
    00000aa1: 	cmpq	$0x8, %rcx
    00000aa5: 	jle	.Ltmp381 # Offset: 2725
    00000aab: 	movsd	(%r9), %xmm1
    00000ab0: 	movq	%rbp, %r10
    00000ab3: 	movq	%r9, %rsi
    00000ab6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp386:
    00000ac0: 	movsd	-0x8(%r10), %xmm2
    00000ac6: 	leaq	-0x8(%r10), %rcx
    00000aca: 	comisd	%xmm1, %xmm2
    00000ace: 	ja	.Ltmp382 # Offset: 2766
    00000ad0: 	cmpq	%rsi, %rcx
    00000ad3: 	jbe	.Ltmp383 # Offset: 2771
    00000ad5: 	movsd	(%rsi), %xmm0
    00000ad9: 	leaq	0x8(%rsi), %rdx
    00000add: 	comisd	%xmm0, %xmm1
    00000ae1: 	jbe	.Ltmp384 # Offset: 2785
    00000ae3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp385:
    00000ae8: 	movq	%rdx, %rsi
    00000aeb: 	movsd	(%rdx), %xmm0
    00000aef: 	leaq	0x8(%rdx), %rdx
    00000af3: 	comisd	%xmm0, %xmm1
    00000af7: 	ja	.Ltmp385 # Offset: 2807
    00000af9: 	cmpq	%rsi, %rcx
    00000afc: 	jbe	.Ltmp383 # Offset: 2812
.Ltmp384:
    00000afe: 	movsd	%xmm0, (%rcx)
    00000b02: 	movsd	%xmm2, (%rsi)
.Ltmp382:
    00000b06: 	movq	%rcx, %r10
    00000b09: 	jmp	.Ltmp386 # Offset: 2825
.Ltmp383:
    00000b0b: 	leaq	0x50(%rsp), %rsi
    00000b10: 	leaq	0x60(%rsp), %rdi
    00000b15: 	movq	%rax, 0x38(%rsp)
    00000b1a: 	movq	%r10, 0x58(%rsp)
    00000b1f: 	movq	%r10, 0x30(%rsp)
    00000b24: 	movq	%r9, 0x68(%rsp)
    00000b29: 	movq	%rsi, 0x28(%rsp)
    00000b2e: 	movq	%rdi, 0x20(%rsp)
    00000b33: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2867
    00000b38: 	movq	0x30(%rsp), %r10
    00000b3d: 	movq	0x28(%rsp), %rsi
    00000b42: 	movq	%rbp, 0x58(%rsp)
    00000b47: 	movq	0x20(%rsp), %rdi
    00000b4c: 	movq	%r10, 0x68(%rsp)
    00000b51: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 2897
    00000b56: 	movq	0x38(%rsp), %rax
.Ltmp381:
    00000b5b: 	movq	%rax, %rcx
    00000b5e: 	subq	%rbp, %rcx
    00000b61: 	cmpq	$0x8, %rcx
    00000b65: 	jle	.Ltmp312 # Offset: 2917
    00000b6b: 	movsd	(%rbp), %xmm1
    00000b70: 	movq	%rax, %r9
    00000b73: 	movq	%rbp, %rsi
    00000b76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp391:
    00000b80: 	movsd	-0x8(%r9), %xmm2
    00000b86: 	leaq	-0x8(%r9), %rcx
    00000b8a: 	comisd	%xmm1, %xmm2
    00000b8e: 	ja	.Ltmp387 # Offset: 2958
    00000b90: 	cmpq	%rsi, %rcx
    00000b93: 	jbe	.Ltmp388 # Offset: 2963
    00000b99: 	movsd	(%rsi), %xmm0
    00000b9d: 	leaq	0x8(%rsi), %rdx
    00000ba1: 	comisd	%xmm0, %xmm1
    00000ba5: 	jbe	.Ltmp389 # Offset: 2981
    00000ba7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp390:
    00000bb0: 	movq	%rdx, %rsi
    00000bb3: 	movsd	(%rdx), %xmm0
    00000bb7: 	leaq	0x8(%rdx), %rdx
    00000bbb: 	comisd	%xmm0, %xmm1
    00000bbf: 	ja	.Ltmp390 # Offset: 3007
    00000bc1: 	cmpq	%rsi, %rcx
    00000bc4: 	jbe	.Ltmp388 # Offset: 3012
.Ltmp389:
    00000bca: 	movsd	%xmm0, (%rcx)
    00000bce: 	movsd	%xmm2, (%rsi)
.Ltmp387:
    00000bd2: 	movq	%rcx, %r9
    00000bd5: 	jmp	.Ltmp391 # Offset: 3029
.Ltmp372:
    00000bd7: 	movq	%r10, %rcx
    00000bda: 	subq	%rbp, %rcx
    00000bdd: 	cmpq	$0x8, %rcx
    00000be1: 	jle	.Ltmp392 # Offset: 3041
    00000be7: 	movsd	(%rbp), %xmm1
    00000bec: 	movq	%r10, %r11
    00000bef: 	movq	%rbp, %rsi
    00000bf2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp397:
    00000bf8: 	movsd	-0x8(%r11), %xmm2
    00000bfe: 	leaq	-0x8(%r11), %rcx
    00000c02: 	comisd	%xmm1, %xmm2
    00000c06: 	ja	.Ltmp393 # Offset: 3078
    00000c08: 	cmpq	%rsi, %rcx
    00000c0b: 	jbe	.Ltmp394 # Offset: 3083
    00000c0d: 	movsd	(%rsi), %xmm0
    00000c11: 	leaq	0x8(%rsi), %rdx
    00000c15: 	comisd	%xmm0, %xmm1
    00000c19: 	jbe	.Ltmp395 # Offset: 3097
    00000c1b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp396:
    00000c20: 	movq	%rdx, %rsi
    00000c23: 	movsd	(%rdx), %xmm0
    00000c27: 	leaq	0x8(%rdx), %rdx
    00000c2b: 	comisd	%xmm0, %xmm1
    00000c2f: 	ja	.Ltmp396 # Offset: 3119
    00000c31: 	cmpq	%rsi, %rcx
    00000c34: 	jbe	.Ltmp394 # Offset: 3124
.Ltmp395:
    00000c36: 	movsd	%xmm0, (%rcx)
    00000c3a: 	movsd	%xmm2, (%rsi)
.Ltmp393:
    00000c3e: 	movq	%rcx, %r11
    00000c41: 	jmp	.Ltmp397 # Offset: 3137
.Ltmp394:
    00000c43: 	movq	%rbp, 0x68(%rsp)
    00000c48: 	leaq	0x60(%rsp), %rbp
    00000c4d: 	leaq	0x50(%rsp), %rsi
    00000c52: 	movq	%rbp, %rdi
    00000c55: 	movq	%rax, 0x40(%rsp)
    00000c5a: 	movq	%r9, 0x38(%rsp)
    00000c5f: 	movq	%r10, 0x20(%rsp)
    00000c64: 	movq	%r11, 0x58(%rsp)
    00000c69: 	movq	%r11, 0x30(%rsp)
    00000c6e: 	movq	%rsi, 0x28(%rsp)
    00000c73: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 3187
    00000c78: 	movq	0x20(%rsp), %r10
    00000c7d: 	movq	0x30(%rsp), %r11
    00000c82: 	movq	%rbp, %rdi
    00000c85: 	movq	0x28(%rsp), %rsi
    00000c8a: 	movq	%r10, 0x58(%rsp)
    00000c8f: 	movq	%r11, 0x68(%rsp)
    00000c94: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 3220
    00000c99: 	movq	0x40(%rsp), %rax
    00000c9e: 	movq	0x38(%rsp), %r9
    00000ca3: 	movq	0x20(%rsp), %r10
.Ltmp392:
    00000ca8: 	movq	%r9, %rcx
    00000cab: 	subq	%r10, %rcx
    00000cae: 	cmpq	$0x8, %rcx
    00000cb2: 	jle	.Ltmp370 # Offset: 3250
    00000cb8: 	movsd	(%r10), %xmm1
    00000cbd: 	movq	%r9, %rbp
    00000cc0: 	movq	%r10, %rsi
    00000cc3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp402:
    00000cc8: 	movsd	-0x8(%rbp), %xmm2
    00000ccd: 	leaq	-0x8(%rbp), %rcx
    00000cd1: 	comisd	%xmm1, %xmm2
    00000cd5: 	ja	.Ltmp398 # Offset: 3285
    00000cd7: 	cmpq	%rsi, %rcx
    00000cda: 	jbe	.Ltmp399 # Offset: 3290
    00000ce0: 	movsd	(%rsi), %xmm0
    00000ce4: 	leaq	0x8(%rsi), %rdx
    00000ce8: 	comisd	%xmm0, %xmm1
    00000cec: 	jbe	.Ltmp400 # Offset: 3308
    00000cee: 	nop # Size: 2
.Ltmp401:
    00000cf0: 	movq	%rdx, %rsi
    00000cf3: 	movsd	(%rdx), %xmm0
    00000cf7: 	leaq	0x8(%rdx), %rdx
    00000cfb: 	comisd	%xmm0, %xmm1
    00000cff: 	ja	.Ltmp401 # Offset: 3327
    00000d01: 	cmpq	%rsi, %rcx
    00000d04: 	jbe	.Ltmp399 # Offset: 3332
.Ltmp400:
    00000d0a: 	movsd	%xmm0, (%rcx)
    00000d0e: 	movsd	%xmm2, (%rsi)
.Ltmp398:
    00000d12: 	movq	%rcx, %rbp
    00000d15: 	jmp	.Ltmp402 # Offset: 3349
.Ltmp366:
    00000d17: 	movq	%r9, %rax
    00000d1a: 	subq	%rbp, %rax
    00000d1d: 	cmpq	$0x8, %rax
    00000d21: 	jle	.Ltmp403 # Offset: 3361
    00000d27: 	movsd	(%rbp), %xmm1
    00000d2c: 	movq	%r9, %rcx
    00000d2f: 	movq	%rbp, %rsi
    00000d32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp408:
    00000d38: 	movsd	-0x8(%rcx), %xmm2
    00000d3d: 	leaq	-0x8(%rcx), %rdx
    00000d41: 	comisd	%xmm1, %xmm2
    00000d45: 	ja	.Ltmp404 # Offset: 3397
    00000d47: 	cmpq	%rsi, %rdx
    00000d4a: 	jbe	.Ltmp405 # Offset: 3402
    00000d4c: 	movsd	(%rsi), %xmm0
    00000d50: 	leaq	0x8(%rsi), %rax
    00000d54: 	comisd	%xmm0, %xmm1
    00000d58: 	jbe	.Ltmp406 # Offset: 3416
    00000d5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp407:
    00000d60: 	movq	%rax, %rsi
    00000d63: 	movsd	(%rax), %xmm0
    00000d67: 	leaq	0x8(%rax), %rax
    00000d6b: 	comisd	%xmm0, %xmm1
    00000d6f: 	ja	.Ltmp407 # Offset: 3439
    00000d71: 	cmpq	%rsi, %rdx
    00000d74: 	jbe	.Ltmp405 # Offset: 3444
.Ltmp406:
    00000d76: 	movsd	%xmm0, (%rdx)
    00000d7a: 	movsd	%xmm2, (%rsi)
.Ltmp404:
    00000d7e: 	movq	%rdx, %rcx
    00000d81: 	jmp	.Ltmp408 # Offset: 3457
.Ltmp405:
    00000d83: 	movq	%rbp, 0x68(%rsp)
    00000d88: 	leaq	0x60(%rsp), %rbp
    00000d8d: 	leaq	0x50(%rsp), %rsi
    00000d92: 	movq	%rbp, %rdi
    00000d95: 	movq	%r9, 0x20(%rsp)
    00000d9a: 	movq	%rcx, 0x58(%rsp)
    00000d9f: 	movq	%rcx, 0x30(%rsp)
    00000da4: 	movq	%rsi, 0x28(%rsp)
    00000da9: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 3497
    00000dae: 	movq	0x20(%rsp), %r9
    00000db3: 	movq	0x30(%rsp), %rcx
    00000db8: 	movq	%rbp, %rdi
    00000dbb: 	movq	0x28(%rsp), %rsi
    00000dc0: 	movq	%r9, 0x58(%rsp)
    00000dc5: 	movq	%rcx, 0x68(%rsp)
    00000dca: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 3530
    00000dcf: 	movq	0x20(%rsp), %r9
.Ltmp403:
    00000dd4: 	movq	%r14, %rax
    00000dd7: 	subq	%r9, %rax
    00000dda: 	cmpq	$0x8, %rax
    00000dde: 	jle	.Ltmp290 # Offset: 3550
    00000de4: 	movsd	(%r9), %xmm1
    00000de9: 	movq	%r14, %rbp
    00000dec: 	movq	%r9, %rcx
    00000def: 	nop # Size: 1
.Ltmp413:
    00000df0: 	movsd	-0x8(%rbp), %xmm2
    00000df5: 	leaq	-0x8(%rbp), %rdx
    00000df9: 	comisd	%xmm1, %xmm2
    00000dfd: 	ja	.Ltmp409 # Offset: 3581
    00000dff: 	cmpq	%rcx, %rdx
    00000e02: 	jbe	.Ltmp410 # Offset: 3586
    00000e08: 	movsd	(%rcx), %xmm0
    00000e0c: 	leaq	0x8(%rcx), %rax
    00000e10: 	comisd	%xmm0, %xmm1
    00000e14: 	jbe	.Ltmp411 # Offset: 3604
    00000e16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp412:
    00000e20: 	movq	%rax, %rcx
    00000e23: 	movsd	(%rax), %xmm0
    00000e27: 	leaq	0x8(%rax), %rax
    00000e2b: 	comisd	%xmm0, %xmm1
    00000e2f: 	ja	.Ltmp412 # Offset: 3631
    00000e31: 	cmpq	%rcx, %rdx
    00000e34: 	jbe	.Ltmp410 # Offset: 3636
.Ltmp411:
    00000e3a: 	movsd	%xmm0, (%rdx)
    00000e3e: 	movsd	%xmm2, (%rcx)
.Ltmp409:
    00000e42: 	movq	%rdx, %rbp
    00000e45: 	jmp	.Ltmp413 # Offset: 3653
.Ltmp361:
    00000e47: 	movq	%r9, %rcx
    00000e4a: 	subq	%rax, %rcx
    00000e4d: 	cmpq	$0x8, %rcx
    00000e51: 	jle	.Ltmp414 # Offset: 3665
    00000e57: 	movsd	(%rax), %xmm1
    00000e5b: 	movq	%r9, %rcx
    00000e5e: 	movq	%rax, %rsi
    00000e61: 	nopl	(%rax) # Size: 7
.Ltmp419:
    00000e68: 	movsd	-0x8(%rcx), %xmm2
    00000e6d: 	leaq	-0x8(%rcx), %rdx
    00000e71: 	comisd	%xmm1, %xmm2
    00000e75: 	ja	.Ltmp415 # Offset: 3701
    00000e77: 	cmpq	%rsi, %rdx
    00000e7a: 	jbe	.Ltmp416 # Offset: 3706
    00000e7c: 	movsd	(%rsi), %xmm0
    00000e80: 	comisd	%xmm0, %xmm1
    00000e84: 	jbe	.Ltmp417 # Offset: 3716
    00000e86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp418:
    00000e90: 	movsd	0x8(%rsi), %xmm0
    00000e95: 	addq	$0x8, %rsi
    00000e99: 	comisd	%xmm0, %xmm1
    00000e9d: 	ja	.Ltmp418 # Offset: 3741
    00000e9f: 	cmpq	%rsi, %rdx
    00000ea2: 	jbe	.Ltmp416 # Offset: 3746
.Ltmp417:
    00000ea4: 	movsd	%xmm0, (%rdx)
    00000ea8: 	movsd	%xmm2, (%rsi)
.Ltmp415:
    00000eac: 	movq	%rdx, %rcx
    00000eaf: 	jmp	.Ltmp419 # Offset: 3759
.Ltmp416:
    00000eb1: 	leaq	0x50(%rsp), %rsi
    00000eb6: 	leaq	0x60(%rsp), %rdi
    00000ebb: 	movq	%r9, 0x20(%rsp)
    00000ec0: 	movq	%rcx, 0x58(%rsp)
    00000ec5: 	movq	%rcx, 0x38(%rsp)
    00000eca: 	movq	%rax, 0x68(%rsp)
    00000ecf: 	movq	%rsi, 0x30(%rsp)
    00000ed4: 	movq	%rdi, 0x28(%rsp)
    00000ed9: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 3801
    00000ede: 	movq	0x20(%rsp), %r9
    00000ee3: 	movq	0x38(%rsp), %rcx
    00000ee8: 	movq	0x30(%rsp), %rsi
    00000eed: 	movq	0x28(%rsp), %rdi
    00000ef2: 	movq	%r9, 0x58(%rsp)
    00000ef7: 	movq	%rcx, 0x68(%rsp)
    00000efc: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 3836
    00000f01: 	movq	0x20(%rsp), %r9
.Ltmp414:
    00000f06: 	movq	%rbp, %rax
    00000f09: 	subq	%r9, %rax
    00000f0c: 	cmpq	$0x8, %rax
    00000f10: 	jle	.Ltmp359 # Offset: 3856
    00000f16: 	movsd	(%r9), %xmm1
    00000f1b: 	movq	%rbp, %rcx
    00000f1e: 	movq	%r9, %rsi
    00000f21: 	nopl	(%rax) # Size: 7
.Ltmp424:
    00000f28: 	movsd	-0x8(%rcx), %xmm2
    00000f2d: 	leaq	-0x8(%rcx), %rdx
    00000f31: 	comisd	%xmm1, %xmm2
    00000f35: 	ja	.Ltmp420 # Offset: 3893
    00000f37: 	cmpq	%rsi, %rdx
    00000f3a: 	jbe	.Ltmp421 # Offset: 3898
    00000f40: 	movsd	(%rsi), %xmm0
    00000f44: 	leaq	0x8(%rsi), %rax
    00000f48: 	comisd	%xmm0, %xmm1
    00000f4c: 	jbe	.Ltmp422 # Offset: 3916
    00000f4e: 	nop # Size: 2
.Ltmp423:
    00000f50: 	movq	%rax, %rsi
    00000f53: 	movsd	(%rax), %xmm0
    00000f57: 	leaq	0x8(%rax), %rax
    00000f5b: 	comisd	%xmm0, %xmm1
    00000f5f: 	ja	.Ltmp423 # Offset: 3935
    00000f61: 	cmpq	%rsi, %rdx
    00000f64: 	jbe	.Ltmp421 # Offset: 3940
.Ltmp422:
    00000f6a: 	movsd	%xmm0, (%rdx)
    00000f6e: 	movsd	%xmm2, (%rsi)
.Ltmp420:
    00000f72: 	movq	%rdx, %rcx
    00000f75: 	jmp	.Ltmp424 # Offset: 3957
.Ltmp355:
    00000f77: 	movq	%r10, %rcx
    00000f7a: 	subq	%r9, %rcx
    00000f7d: 	cmpq	$0x8, %rcx
    00000f81: 	jle	.Ltmp425 # Offset: 3969
    00000f87: 	movsd	(%r9), %xmm1
    00000f8c: 	movq	%r10, %r11
    00000f8f: 	movq	%r9, %rsi
    00000f92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp430:
    00000f98: 	movsd	-0x8(%r11), %xmm2
    00000f9e: 	leaq	-0x8(%r11), %rcx
    00000fa2: 	comisd	%xmm1, %xmm2
    00000fa6: 	ja	.Ltmp426 # Offset: 4006
    00000fa8: 	cmpq	%rsi, %rcx
    00000fab: 	jbe	.Ltmp427 # Offset: 4011
    00000fad: 	movsd	(%rsi), %xmm0
    00000fb1: 	leaq	0x8(%rsi), %rdx
    00000fb5: 	comisd	%xmm0, %xmm1
    00000fb9: 	jbe	.Ltmp428 # Offset: 4025
    00000fbb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp429:
    00000fc0: 	movq	%rdx, %rsi
    00000fc3: 	movsd	(%rdx), %xmm0
    00000fc7: 	leaq	0x8(%rdx), %rdx
    00000fcb: 	comisd	%xmm0, %xmm1
    00000fcf: 	ja	.Ltmp429 # Offset: 4047
    00000fd1: 	cmpq	%rsi, %rcx
    00000fd4: 	jbe	.Ltmp427 # Offset: 4052
.Ltmp428:
    00000fd6: 	movsd	%xmm0, (%rcx)
    00000fda: 	movsd	%xmm2, (%rsi)
.Ltmp426:
    00000fde: 	movq	%rcx, %r11
    00000fe1: 	jmp	.Ltmp430 # Offset: 4065
.Ltmp427:
    00000fe3: 	leaq	0x50(%rsp), %rsi
    00000fe8: 	leaq	0x60(%rsp), %rdi
    00000fed: 	movq	%rax, 0x40(%rsp)
    00000ff2: 	movq	%r10, 0x20(%rsp)
    00000ff7: 	movq	%r11, 0x58(%rsp)
    00000ffc: 	movq	%r11, 0x38(%rsp)
    00001001: 	movq	%r9, 0x68(%rsp)
    00001006: 	movq	%rsi, 0x30(%rsp)
    0000100b: 	movq	%rdi, 0x28(%rsp)
    00001010: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 4112
    00001015: 	movq	0x20(%rsp), %r10
    0000101a: 	movq	0x38(%rsp), %r11
    0000101f: 	movq	0x30(%rsp), %rsi
    00001024: 	movq	0x28(%rsp), %rdi
    00001029: 	movq	%r10, 0x58(%rsp)
    0000102e: 	movq	%r11, 0x68(%rsp)
    00001033: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 4147
    00001038: 	movq	0x40(%rsp), %rax
    0000103d: 	movq	0x20(%rsp), %r10
.Ltmp425:
    00001042: 	movq	%rax, %rcx
    00001045: 	subq	%r10, %rcx
    00001048: 	cmpq	$0x8, %rcx
    0000104c: 	jle	.Ltmp323 # Offset: 4172
    00001052: 	movsd	(%r10), %xmm1
    00001057: 	movq	%rax, %r9
    0000105a: 	movq	%r10, %rsi
    0000105d: 	nopl	(%rax) # Size: 3
.Ltmp435:
    00001060: 	movsd	-0x8(%r9), %xmm2
    00001066: 	leaq	-0x8(%r9), %rcx
    0000106a: 	comisd	%xmm1, %xmm2
    0000106e: 	ja	.Ltmp431 # Offset: 4206
    00001070: 	cmpq	%rsi, %rcx
    00001073: 	jbe	.Ltmp432 # Offset: 4211
    00001079: 	movsd	(%rsi), %xmm0
    0000107d: 	leaq	0x8(%rsi), %rdx
    00001081: 	comisd	%xmm0, %xmm1
    00001085: 	jbe	.Ltmp433 # Offset: 4229
    00001087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp434:
    00001090: 	movq	%rdx, %rsi
    00001093: 	movsd	(%rdx), %xmm0
    00001097: 	leaq	0x8(%rdx), %rdx
    0000109b: 	comisd	%xmm0, %xmm1
    0000109f: 	ja	.Ltmp434 # Offset: 4255
    000010a1: 	cmpq	%rsi, %rcx
    000010a4: 	jbe	.Ltmp432 # Offset: 4260
.Ltmp433:
    000010aa: 	movsd	%xmm0, (%rcx)
    000010ae: 	movsd	%xmm2, (%rsi)
.Ltmp431:
    000010b2: 	movq	%rcx, %r9
    000010b5: 	jmp	.Ltmp435 # Offset: 4277
.Ltmp342:
    000010b7: 	movq	%r9, %rax
    000010ba: 	subq	%rcx, %rax
    000010bd: 	cmpq	$0x8, %rax
    000010c1: 	jle	.Ltmp436 # Offset: 4289
    000010c7: 	movsd	(%rcx), %xmm1
    000010cb: 	movq	%r9, %r10
    000010ce: 	movq	%rcx, %rsi
    000010d1: 	nopl	(%rax) # Size: 7
.Ltmp441:
    000010d8: 	movsd	-0x8(%r10), %xmm2
    000010de: 	leaq	-0x8(%r10), %rdx
    000010e2: 	comisd	%xmm1, %xmm2
    000010e6: 	ja	.Ltmp437 # Offset: 4326
    000010e8: 	cmpq	%rsi, %rdx
    000010eb: 	jbe	.Ltmp438 # Offset: 4331
    000010ed: 	movsd	(%rsi), %xmm0
    000010f1: 	leaq	0x8(%rsi), %rax
    000010f5: 	comisd	%xmm0, %xmm1
    000010f9: 	jbe	.Ltmp439 # Offset: 4345
    000010fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp440:
    00001100: 	movq	%rax, %rsi
    00001103: 	movsd	(%rax), %xmm0
    00001107: 	leaq	0x8(%rax), %rax
    0000110b: 	comisd	%xmm0, %xmm1
    0000110f: 	ja	.Ltmp440 # Offset: 4367
    00001111: 	cmpq	%rsi, %rdx
    00001114: 	jbe	.Ltmp438 # Offset: 4372
.Ltmp439:
    00001116: 	movsd	%xmm0, (%rdx)
    0000111a: 	movsd	%xmm2, (%rsi)
.Ltmp437:
    0000111e: 	movq	%rdx, %r10
    00001121: 	jmp	.Ltmp441 # Offset: 4385
.Ltmp438:
    00001123: 	leaq	0x50(%rsp), %rsi
    00001128: 	leaq	0x60(%rsp), %rdi
    0000112d: 	movq	%r9, 0x20(%rsp)
    00001132: 	movq	%r10, 0x58(%rsp)
    00001137: 	movq	%r10, 0x38(%rsp)
    0000113c: 	movq	%rcx, 0x68(%rsp)
    00001141: 	movq	%rsi, 0x30(%rsp)
    00001146: 	movq	%rdi, 0x28(%rsp)
    0000114b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 4427
    00001150: 	movq	0x20(%rsp), %r9
    00001155: 	movq	0x38(%rsp), %r10
    0000115a: 	movq	0x30(%rsp), %rsi
    0000115f: 	movq	0x28(%rsp), %rdi
    00001164: 	movq	%r9, 0x58(%rsp)
    00001169: 	movq	%r10, 0x68(%rsp)
    0000116e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 4462
    00001173: 	movq	0x20(%rsp), %r9
.Ltmp436:
    00001178: 	movq	%rbp, %rax
    0000117b: 	subq	%r9, %rax
    0000117e: 	cmpq	$0x8, %rax
    00001182: 	jle	.Ltmp301 # Offset: 4482
    00001188: 	movsd	(%r9), %xmm1
    0000118d: 	movq	%rbp, %rcx
    00001190: 	movq	%r9, %rsi
    00001193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp446:
    00001198: 	movsd	-0x8(%rcx), %xmm2
    0000119d: 	leaq	-0x8(%rcx), %rdx
    000011a1: 	comisd	%xmm1, %xmm2
    000011a5: 	ja	.Ltmp442 # Offset: 4517
    000011a7: 	cmpq	%rsi, %rdx
    000011aa: 	jbe	.Ltmp443 # Offset: 4522
    000011b0: 	movsd	(%rsi), %xmm0
    000011b4: 	leaq	0x8(%rsi), %rax
    000011b8: 	comisd	%xmm0, %xmm1
    000011bc: 	jbe	.Ltmp444 # Offset: 4540
    000011be: 	nop # Size: 2
.Ltmp445:
    000011c0: 	movq	%rax, %rsi
    000011c3: 	movsd	(%rax), %xmm0
    000011c7: 	leaq	0x8(%rax), %rax
    000011cb: 	comisd	%xmm0, %xmm1
    000011cf: 	ja	.Ltmp445 # Offset: 4559
    000011d1: 	cmpq	%rsi, %rdx
    000011d4: 	jbe	.Ltmp443 # Offset: 4564
.Ltmp444:
    000011da: 	movsd	%xmm0, (%rdx)
    000011de: 	movsd	%xmm2, (%rsi)
.Ltmp442:
    000011e2: 	movq	%rdx, %rcx
    000011e5: 	jmp	.Ltmp446 # Offset: 4581
.Ltmp337:
    000011e7: 	movq	%r9, %rsi
    000011ea: 	subq	%rax, %rsi
    000011ed: 	cmpq	$0x8, %rsi
    000011f1: 	jle	.Ltmp447 # Offset: 4593
    000011f7: 	movsd	(%rax), %xmm1
    000011fb: 	movq	%r9, %r10
    000011fe: 	movq	%rax, %rdi
    00001201: 	nopl	(%rax) # Size: 7
.Ltmp452:
    00001208: 	movsd	-0x8(%r10), %xmm2
    0000120e: 	leaq	-0x8(%r10), %rsi
    00001212: 	comisd	%xmm1, %xmm2
    00001216: 	ja	.Ltmp448 # Offset: 4630
    00001218: 	cmpq	%rdi, %rsi
    0000121b: 	jbe	.Ltmp449 # Offset: 4635
    0000121d: 	movsd	(%rdi), %xmm0
    00001221: 	leaq	0x8(%rdi), %rdx
    00001225: 	comisd	%xmm0, %xmm1
    00001229: 	jbe	.Ltmp450 # Offset: 4649
    0000122b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp451:
    00001230: 	movq	%rdx, %rdi
    00001233: 	movsd	(%rdx), %xmm0
    00001237: 	leaq	0x8(%rdx), %rdx
    0000123b: 	comisd	%xmm0, %xmm1
    0000123f: 	ja	.Ltmp451 # Offset: 4671
    00001241: 	cmpq	%rdi, %rsi
    00001244: 	jbe	.Ltmp449 # Offset: 4676
.Ltmp450:
    00001246: 	movsd	%xmm0, (%rsi)
    0000124a: 	movsd	%xmm2, (%rdi)
.Ltmp448:
    0000124e: 	movq	%rsi, %r10
    00001251: 	jmp	.Ltmp452 # Offset: 4689
.Ltmp449:
    00001253: 	leaq	0x50(%rsp), %rsi
    00001258: 	leaq	0x60(%rsp), %rdi
    0000125d: 	movq	%rcx, 0x40(%rsp)
    00001262: 	movq	%r9, 0x20(%rsp)
    00001267: 	movq	%r10, 0x58(%rsp)
    0000126c: 	movq	%r10, 0x38(%rsp)
    00001271: 	movq	%rax, 0x68(%rsp)
    00001276: 	movq	%rsi, 0x30(%rsp)
    0000127b: 	movq	%rdi, 0x28(%rsp)
    00001280: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 4736
    00001285: 	movq	0x20(%rsp), %r9
    0000128a: 	movq	0x38(%rsp), %r10
    0000128f: 	movq	0x30(%rsp), %rsi
    00001294: 	movq	0x28(%rsp), %rdi
    00001299: 	movq	%r9, 0x58(%rsp)
    0000129e: 	movq	%r10, 0x68(%rsp)
    000012a3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 4771
    000012a8: 	movq	0x40(%rsp), %rcx
    000012ad: 	movq	0x20(%rsp), %r9
.Ltmp447:
    000012b2: 	movq	%rcx, %rax
    000012b5: 	subq	%r9, %rax
    000012b8: 	cmpq	$0x8, %rax
    000012bc: 	jle	.Ltmp335 # Offset: 4796
    000012c2: 	movsd	(%r9), %xmm1
    000012c7: 	movq	%rcx, %r10
    000012ca: 	movq	%r9, %rsi
    000012cd: 	nopl	(%rax) # Size: 3
.Ltmp457:
    000012d0: 	movsd	-0x8(%r10), %xmm2
    000012d6: 	leaq	-0x8(%r10), %rdx
    000012da: 	comisd	%xmm1, %xmm2
    000012de: 	ja	.Ltmp453 # Offset: 4830
    000012e0: 	cmpq	%rsi, %rdx
    000012e3: 	jbe	.Ltmp454 # Offset: 4835
    000012e9: 	movsd	(%rsi), %xmm0
    000012ed: 	leaq	0x8(%rsi), %rax
    000012f1: 	comisd	%xmm0, %xmm1
    000012f5: 	jbe	.Ltmp455 # Offset: 4853
    000012f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp456:
    00001300: 	movq	%rax, %rsi
    00001303: 	movsd	(%rax), %xmm0
    00001307: 	leaq	0x8(%rax), %rax
    0000130b: 	comisd	%xmm0, %xmm1
    0000130f: 	ja	.Ltmp456 # Offset: 4879
    00001311: 	cmpq	%rsi, %rdx
    00001314: 	jbe	.Ltmp454 # Offset: 4884
.Ltmp455:
    0000131a: 	movsd	%xmm0, (%rdx)
    0000131e: 	movsd	%xmm2, (%rsi)
.Ltmp453:
    00001322: 	movq	%rdx, %r10
    00001325: 	jmp	.Ltmp457 # Offset: 4901
.Ltmp353:
    00001327: 	movsd	(%r10), %xmm1
    0000132c: 	movq	%r9, %rcx
    0000132f: 	movq	%r10, %rsi
    00001332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp462:
    00001338: 	movsd	-0x8(%rcx), %xmm2
    0000133d: 	leaq	-0x8(%rcx), %rdx
    00001341: 	comisd	%xmm1, %xmm2
    00001345: 	ja	.Ltmp458 # Offset: 4933
    00001347: 	cmpq	%rsi, %rdx
    0000134a: 	jbe	.Ltmp459 # Offset: 4938
    00001350: 	movsd	(%rsi), %xmm0
    00001354: 	comisd	%xmm0, %xmm1
    00001358: 	jbe	.Ltmp460 # Offset: 4952
    0000135a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp461:
    00001360: 	movsd	0x8(%rsi), %xmm0
    00001365: 	addq	$0x8, %rsi
    00001369: 	comisd	%xmm0, %xmm1
    0000136d: 	ja	.Ltmp461 # Offset: 4973
    0000136f: 	cmpq	%rsi, %rdx
    00001372: 	jbe	.Ltmp459 # Offset: 4978
.Ltmp460:
    00001378: 	movsd	%xmm0, (%rdx)
    0000137c: 	movsd	%xmm2, (%rsi)
.Ltmp458:
    00001380: 	movq	%rdx, %rcx
    00001383: 	jmp	.Ltmp462 # Offset: 4995
.Ltmp352:
    00001385: 	movsd	(%rbx), %xmm1
    00001389: 	movq	%r10, %r11
    0000138c: 	movq	%rbx, %rsi
    0000138f: 	nop # Size: 1
.Ltmp467:
    00001390: 	movsd	-0x8(%r11), %xmm2
    00001396: 	leaq	-0x8(%r11), %rcx
    0000139a: 	comisd	%xmm1, %xmm2
    0000139e: 	ja	.Ltmp463 # Offset: 5022
    000013a0: 	cmpq	%rsi, %rcx
    000013a3: 	jbe	.Ltmp464 # Offset: 5027
    000013a5: 	movsd	(%rsi), %xmm0
    000013a9: 	leaq	0x8(%rsi), %rdx
    000013ad: 	comisd	%xmm0, %xmm1
    000013b1: 	jbe	.Ltmp465 # Offset: 5041
    000013b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp466:
    000013b8: 	movq	%rdx, %rsi
    000013bb: 	movsd	(%rdx), %xmm0
    000013bf: 	leaq	0x8(%rdx), %rdx
    000013c3: 	comisd	%xmm0, %xmm1
    000013c7: 	ja	.Ltmp466 # Offset: 5063
    000013c9: 	cmpq	%rsi, %rcx
    000013cc: 	jbe	.Ltmp464 # Offset: 5068
.Ltmp465:
    000013ce: 	movsd	%xmm0, (%rcx)
    000013d2: 	movsd	%xmm2, (%rsi)
.Ltmp463:
    000013d6: 	movq	%rcx, %r11
    000013d9: 	jmp	.Ltmp467 # Offset: 5081
.Ltmp464:
    000013db: 	leaq	0x50(%rsp), %rsi
    000013e0: 	leaq	0x60(%rsp), %rdi
    000013e5: 	movq	%rax, 0x48(%rsp)
    000013ea: 	movq	%r9, 0x40(%rsp)
    000013ef: 	movq	%r10, 0x20(%rsp)
    000013f4: 	movq	%r11, 0x58(%rsp)
    000013f9: 	movq	%r11, 0x38(%rsp)
    000013fe: 	movq	%rsi, 0x30(%rsp)
    00001403: 	movq	%rdi, 0x28(%rsp)
    00001408: 	movq	%rbx, 0x68(%rsp)
    0000140d: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 5133
    00001412: 	movq	0x20(%rsp), %r10
    00001417: 	movq	0x38(%rsp), %r11
    0000141c: 	movq	0x30(%rsp), %rsi
    00001421: 	movq	0x28(%rsp), %rdi
    00001426: 	movq	%r10, 0x58(%rsp)
    0000142b: 	movq	%r11, 0x68(%rsp)
    00001430: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 5168
    00001435: 	movq	0x40(%rsp), %r9
    0000143a: 	movq	0x20(%rsp), %r10
    0000143f: 	movq	0x48(%rsp), %rax
    00001444: 	movq	%r9, %rcx
    00001447: 	subq	%r10, %rcx
    0000144a: 	cmpq	$0x8, %rcx
    0000144e: 	jle	.Ltmp346 # Offset: 5198
    00001454: 	jmp	.Ltmp353 # Offset: 5204
.Ltmp459:
    00001459: 	leaq	0x50(%rsp), %rsi
    0000145e: 	leaq	0x60(%rsp), %rdi
    00001463: 	movq	%rax, 0x40(%rsp)
    00001468: 	movq	%r9, 0x20(%rsp)
    0000146d: 	movq	%rcx, 0x58(%rsp)
    00001472: 	movq	%rcx, 0x38(%rsp)
    00001477: 	movq	%r10, 0x68(%rsp)
    0000147c: 	movq	%rsi, 0x30(%rsp)
    00001481: 	movq	%rdi, 0x28(%rsp)
    00001486: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 5254
    0000148b: 	movq	0x20(%rsp), %r9
    00001490: 	movq	0x38(%rsp), %rcx
    00001495: 	movq	0x30(%rsp), %rsi
    0000149a: 	movq	0x28(%rsp), %rdi
    0000149f: 	movq	%r9, 0x58(%rsp)
    000014a4: 	movq	%rcx, 0x68(%rsp)
    000014a9: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPdEEEEvT_S5_ # Offset: 5289
    000014ae: 	movq	0x40(%rsp), %rax
    000014b3: 	movq	0x20(%rsp), %r9
    000014b8: 	jmp	.Ltmp346 # Offset: 5304
.Ltmp300:
    000014bd: 	callq	__stack_chk_fail@PLT # Offset: 5309
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_quicksortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x51e0
  Size        : 0x73f
  MaxSize     : 0x740
  Offset      : 0x51e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp468 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %rdx
    00000019: 	pushq	%r13
    0000001b: 	pushq	%r12
    0000001d: 	movq	%rsi, %r12
    00000020: 	pushq	%rbp
    00000021: 	movq	%rsi, %rbp
    00000024: 	pushq	%rbx
    00000025: 	movsd	(%rdi), %xmm1
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp473:
    00000030: 	movsd	-0x8(%rbp), %xmm2
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm1, %xmm2
    0000003d: 	ja	.Ltmp469 # Offset: 61
    0000003f: 	cmpq	%rdx, %rcx
    00000042: 	jbe	.Ltmp470 # Offset: 66
    00000044: 	movsd	(%rdx), %xmm0
    00000048: 	leaq	0x8(%rdx), %rax
    0000004c: 	comisd	%xmm0, %xmm1
    00000050: 	jbe	.Ltmp471 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp472:
    00000058: 	movq	%rax, %rdx
    0000005b: 	movsd	(%rax), %xmm0
    0000005f: 	leaq	0x8(%rax), %rax
    00000063: 	comisd	%xmm0, %xmm1
    00000067: 	ja	.Ltmp472 # Offset: 103
    00000069: 	cmpq	%rdx, %rcx
    0000006c: 	jbe	.Ltmp470 # Offset: 108
.Ltmp471:
    0000006e: 	movsd	%xmm0, (%rcx)
    00000072: 	movsd	%xmm2, (%rdx)
.Ltmp469:
    00000076: 	movq	%rcx, %rbp
    00000079: 	jmp	.Ltmp473 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp470:
    00000080: 	movq	%rbp, %rax
    00000083: 	subq	%rdi, %rax
    00000086: 	cmpq	$0x8, %rax
    0000008a: 	jle	.Ltmp474 # Offset: 138
    0000008c: 	movsd	(%rdi), %xmm1
    00000090: 	movq	%rbp, %r13
    00000093: 	movq	%rdi, %rdx
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp479:
    000000a0: 	comisd	%xmm1, %xmm2
    000000a4: 	leaq	-0x8(%r13), %rcx
    000000a8: 	ja	.Ltmp475 # Offset: 168
    000000aa: 	cmpq	%rdx, %rcx
    000000ad: 	jbe	.Ltmp476 # Offset: 173
    000000af: 	movsd	(%rdx), %xmm0
    000000b3: 	leaq	0x8(%rdx), %rax
    000000b7: 	comisd	%xmm0, %xmm1
    000000bb: 	jbe	.Ltmp477 # Offset: 187
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp478:
    000000c0: 	movq	%rax, %rdx
    000000c3: 	movsd	(%rax), %xmm0
    000000c7: 	leaq	0x8(%rax), %rax
    000000cb: 	comisd	%xmm0, %xmm1
    000000cf: 	ja	.Ltmp478 # Offset: 207
    000000d1: 	cmpq	%rdx, %rcx
    000000d4: 	jbe	.Ltmp476 # Offset: 212
.Ltmp477:
    000000d6: 	movsd	%xmm0, (%rcx)
    000000da: 	movsd	%xmm2, (%rdx)
.Ltmp475:
    000000de: 	movsd	-0x8(%rcx), %xmm2
    000000e3: 	movq	%rcx, %r13
    000000e6: 	jmp	.Ltmp479 # Offset: 230
.Ltmp476:
    000000e8: 	movq	%r13, %rax
    000000eb: 	subq	%rdi, %rax
    000000ee: 	cmpq	$0x8, %rax
    000000f2: 	jg	.Ltmp480 # Offset: 242
.Ltmp516:
    000000f8: 	movq	%rbp, %rax
    000000fb: 	subq	%r13, %rax
    000000fe: 	cmpq	$0x8, %rax
    00000102: 	jg	.Ltmp481 # Offset: 258
.Ltmp474:
    00000108: 	movq	%r12, %rax
    0000010b: 	subq	%rbp, %rax
    0000010e: 	cmpq	$0x8, %rax
    00000112: 	jle	.Ltmp482 # Offset: 274
    00000114: 	movsd	(%rbp), %xmm1
    00000119: 	movq	%r12, %r13
    0000011c: 	movq	%rbp, %rdx
    0000011f: 	nop # Size: 1
.Ltmp487:
    00000120: 	movsd	-0x8(%r13), %xmm2
    00000126: 	leaq	-0x8(%r13), %rcx
    0000012a: 	comisd	%xmm1, %xmm2
    0000012e: 	ja	.Ltmp483 # Offset: 302
    00000130: 	cmpq	%rdx, %rcx
    00000133: 	jbe	.Ltmp484 # Offset: 307
    00000135: 	movsd	(%rdx), %xmm0
    00000139: 	leaq	0x8(%rdx), %rax
    0000013d: 	comisd	%xmm0, %xmm1
    00000141: 	jbe	.Ltmp485 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp486:
    00000148: 	movq	%rax, %rdx
    0000014b: 	movsd	(%rax), %xmm0
    0000014f: 	leaq	0x8(%rax), %rax
    00000153: 	comisd	%xmm0, %xmm1
    00000157: 	ja	.Ltmp486 # Offset: 343
    00000159: 	cmpq	%rdx, %rcx
    0000015c: 	jbe	.Ltmp484 # Offset: 348
.Ltmp485:
    0000015e: 	movsd	%xmm0, (%rcx)
    00000162: 	movsd	%xmm2, (%rdx)
.Ltmp483:
    00000166: 	movq	%rcx, %r13
    00000169: 	jmp	.Ltmp487 # Offset: 361
.Ltmp484:
    0000016b: 	movq	%r13, %rax
    0000016e: 	subq	%rbp, %rax
    00000171: 	cmpq	$0x8, %rax
    00000175: 	jg	.Ltmp488 # Offset: 373
.Ltmp539:
    0000017b: 	movq	%r12, %rax
    0000017e: 	subq	%r13, %rax
    00000181: 	cmpq	$0x8, %rax
    00000185: 	jg	.Ltmp489 # Offset: 389
.Ltmp482:
    00000187: 	popq	%rbx
    00000188: 	popq	%rbp
    00000189: 	popq	%r12
    0000018b: 	popq	%r13
    0000018d: 	popq	%r14
    0000018f: 	retq # Offset: 399
.Ltmp468:
    00000190: 	retq # Offset: 400
.Ltmp489:
    00000191: 	movsd	(%r13), %xmm1
    00000197: 	movq	%r12, %rbp
    0000019a: 	movq	%r13, %rdx
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp494:
    000001a0: 	movsd	-0x8(%rbp), %xmm2
    000001a5: 	leaq	-0x8(%rbp), %rcx
    000001a9: 	comisd	%xmm1, %xmm2
    000001ad: 	ja	.Ltmp490 # Offset: 429
    000001af: 	cmpq	%rdx, %rcx
    000001b2: 	jbe	.Ltmp491 # Offset: 434
    000001b8: 	movsd	(%rdx), %xmm0
    000001bc: 	leaq	0x8(%rdx), %rax
    000001c0: 	comisd	%xmm0, %xmm1
    000001c4: 	jbe	.Ltmp492 # Offset: 452
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp493:
    000001d0: 	movq	%rax, %rdx
    000001d3: 	movsd	(%rax), %xmm0
    000001d7: 	leaq	0x8(%rax), %rax
    000001db: 	comisd	%xmm0, %xmm1
    000001df: 	ja	.Ltmp493 # Offset: 479
    000001e1: 	cmpq	%rdx, %rcx
    000001e4: 	jbe	.Ltmp491 # Offset: 484
.Ltmp492:
    000001ea: 	movsd	%xmm0, (%rcx)
    000001ee: 	movsd	%xmm2, (%rdx)
.Ltmp490:
    000001f2: 	movq	%rcx, %rbp
    000001f5: 	jmp	.Ltmp494 # Offset: 501
.Ltmp488:
    000001f7: 	movsd	(%rbp), %xmm1
    000001fc: 	movq	%r13, %rbx
    000001ff: 	movq	%rbp, %rdx
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp499:
    00000208: 	comisd	%xmm1, %xmm2
    0000020c: 	leaq	-0x8(%rbx), %rcx
    00000210: 	ja	.Ltmp495 # Offset: 528
    00000212: 	cmpq	%rdx, %rcx
    00000215: 	jbe	.Ltmp496 # Offset: 533
    0000021b: 	movsd	(%rdx), %xmm0
    0000021f: 	leaq	0x8(%rdx), %rax
    00000223: 	comisd	%xmm0, %xmm1
    00000227: 	jbe	.Ltmp497 # Offset: 551
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp498:
    00000230: 	movq	%rax, %rdx
    00000233: 	movsd	(%rax), %xmm0
    00000237: 	leaq	0x8(%rax), %rax
    0000023b: 	comisd	%xmm0, %xmm1
    0000023f: 	ja	.Ltmp498 # Offset: 575
    00000241: 	cmpq	%rdx, %rcx
    00000244: 	jbe	.Ltmp496 # Offset: 580
.Ltmp497:
    0000024a: 	movsd	%xmm0, (%rcx)
    0000024e: 	movsd	%xmm2, (%rdx)
.Ltmp495:
    00000252: 	movsd	-0x8(%rcx), %xmm2
    00000257: 	movq	%rcx, %rbx
    0000025a: 	jmp	.Ltmp499 # Offset: 602
.Ltmp481:
    0000025c: 	movsd	(%r13), %xmm1
    00000262: 	movq	%rbp, %rbx
    00000265: 	movq	%r13, %rdx
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp504:
    00000270: 	movsd	-0x8(%rbx), %xmm2
    00000275: 	leaq	-0x8(%rbx), %rcx
    00000279: 	comisd	%xmm1, %xmm2
    0000027d: 	ja	.Ltmp500 # Offset: 637
    0000027f: 	cmpq	%rdx, %rcx
    00000282: 	jbe	.Ltmp501 # Offset: 642
    00000288: 	movsd	(%rdx), %xmm0
    0000028c: 	leaq	0x8(%rdx), %rax
    00000290: 	comisd	%xmm0, %xmm1
    00000294: 	jbe	.Ltmp502 # Offset: 660
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp503:
    000002a0: 	movq	%rax, %rdx
    000002a3: 	movsd	(%rax), %xmm0
    000002a7: 	leaq	0x8(%rax), %rax
    000002ab: 	comisd	%xmm0, %xmm1
    000002af: 	ja	.Ltmp503 # Offset: 687
    000002b1: 	cmpq	%rdx, %rcx
    000002b4: 	jbe	.Ltmp501 # Offset: 692
.Ltmp502:
    000002ba: 	movsd	%xmm0, (%rcx)
    000002be: 	movsd	%xmm2, (%rdx)
.Ltmp500:
    000002c2: 	movq	%rcx, %rbx
    000002c5: 	jmp	.Ltmp504 # Offset: 709
.Ltmp480:
    000002c7: 	movsd	(%rdi), %xmm1
    000002cb: 	movq	%r13, %rbx
    000002ce: 	movq	%rdi, %rdx
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp509:
    000002d8: 	comisd	%xmm1, %xmm2
    000002dc: 	leaq	-0x8(%rbx), %rcx
    000002e0: 	ja	.Ltmp505 # Offset: 736
    000002e2: 	cmpq	%rdx, %rcx
    000002e5: 	jbe	.Ltmp506 # Offset: 741
    000002e7: 	movsd	(%rdx), %xmm0
    000002eb: 	leaq	0x8(%rdx), %rax
    000002ef: 	comisd	%xmm0, %xmm1
    000002f3: 	jbe	.Ltmp507 # Offset: 755
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp508:
    000002f8: 	movq	%rax, %rdx
    000002fb: 	movsd	(%rax), %xmm0
    000002ff: 	leaq	0x8(%rax), %rax
    00000303: 	comisd	%xmm0, %xmm1
    00000307: 	ja	.Ltmp508 # Offset: 775
    00000309: 	cmpq	%rdx, %rcx
    0000030c: 	jbe	.Ltmp506 # Offset: 780
.Ltmp507:
    0000030e: 	movsd	%xmm0, (%rcx)
    00000312: 	movsd	%xmm2, (%rdx)
.Ltmp505:
    00000316: 	movsd	-0x8(%rcx), %xmm2
    0000031b: 	movq	%rcx, %rbx
    0000031e: 	jmp	.Ltmp509 # Offset: 798
.Ltmp506:
    00000320: 	movq	%rbx, %rax
    00000323: 	subq	%rdi, %rax
    00000326: 	cmpq	$0x8, %rax
    0000032a: 	jle	.Ltmp510 # Offset: 810
    0000032c: 	movsd	(%rdi), %xmm1
    00000330: 	movq	%rbx, %r14
    00000333: 	movq	%rdi, %rdx
    00000336: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp515:
    00000340: 	movsd	-0x8(%r14), %xmm2
    00000346: 	leaq	-0x8(%r14), %rcx
    0000034a: 	comisd	%xmm1, %xmm2
    0000034e: 	ja	.Ltmp511 # Offset: 846
    00000350: 	cmpq	%rdx, %rcx
    00000353: 	jbe	.Ltmp512 # Offset: 851
    00000355: 	movsd	(%rdx), %xmm0
    00000359: 	leaq	0x8(%rdx), %rax
    0000035d: 	comisd	%xmm0, %xmm1
    00000361: 	jbe	.Ltmp513 # Offset: 865
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp514:
    00000368: 	movq	%rax, %rdx
    0000036b: 	movsd	(%rax), %xmm0
    0000036f: 	leaq	0x8(%rax), %rax
    00000373: 	comisd	%xmm0, %xmm1
    00000377: 	ja	.Ltmp514 # Offset: 887
    00000379: 	cmpq	%rdx, %rcx
    0000037c: 	jbe	.Ltmp512 # Offset: 892
.Ltmp513:
    0000037e: 	movsd	%xmm0, (%rcx)
    00000382: 	movsd	%xmm2, (%rdx)
.Ltmp511:
    00000386: 	movq	%rcx, %r14
    00000389: 	jmp	.Ltmp515 # Offset: 905
.Ltmp512:
    0000038b: 	movq	%r14, %rsi
    0000038e: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 910
    00000393: 	movq	%rbx, %rsi
    00000396: 	movq	%r14, %rdi
    00000399: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 921
.Ltmp510:
    0000039e: 	movq	%r13, %rax
    000003a1: 	movq	%rbx, %rdi
    000003a4: 	subq	%rbx, %rax
    000003a7: 	cmpq	$0x8, %rax
    000003ab: 	jle	.Ltmp516 # Offset: 939
    000003b1: 	movsd	(%rbx), %xmm1
    000003b5: 	movq	%r13, %r14
    000003b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp521:
    000003c0: 	movsd	-0x8(%r14), %xmm2
    000003c6: 	leaq	-0x8(%r14), %rdx
    000003ca: 	comisd	%xmm1, %xmm2
    000003ce: 	ja	.Ltmp517 # Offset: 974
    000003d0: 	cmpq	%rbx, %rdx
    000003d3: 	jbe	.Ltmp518 # Offset: 979
    000003d9: 	movsd	(%rbx), %xmm0
    000003dd: 	leaq	0x8(%rbx), %rax
    000003e1: 	comisd	%xmm0, %xmm1
    000003e5: 	jbe	.Ltmp519 # Offset: 997
    000003e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp520:
    000003f0: 	movq	%rax, %rbx
    000003f3: 	movsd	(%rax), %xmm0
    000003f7: 	leaq	0x8(%rax), %rax
    000003fb: 	comisd	%xmm0, %xmm1
    000003ff: 	ja	.Ltmp520 # Offset: 1023
    00000401: 	cmpq	%rbx, %rdx
    00000404: 	jbe	.Ltmp518 # Offset: 1028
.Ltmp519:
    0000040a: 	movsd	%xmm0, (%rdx)
    0000040e: 	movsd	%xmm2, (%rbx)
.Ltmp517:
    00000412: 	movq	%rdx, %r14
    00000415: 	jmp	.Ltmp521 # Offset: 1045
.Ltmp501:
    00000417: 	movq	%rbx, %rax
    0000041a: 	subq	%r13, %rax
    0000041d: 	cmpq	$0x8, %rax
    00000421: 	jle	.Ltmp522 # Offset: 1057
    00000423: 	movsd	(%r13), %xmm1
    00000429: 	movq	%rbx, %r14
    0000042c: 	movq	%r13, %rdx
    0000042f: 	nop # Size: 1
.Ltmp527:
    00000430: 	movsd	-0x8(%r14), %xmm2
    00000436: 	leaq	-0x8(%r14), %rcx
    0000043a: 	comisd	%xmm1, %xmm2
    0000043e: 	ja	.Ltmp523 # Offset: 1086
    00000440: 	cmpq	%rdx, %rcx
    00000443: 	jbe	.Ltmp524 # Offset: 1091
    00000445: 	movsd	(%rdx), %xmm0
    00000449: 	leaq	0x8(%rdx), %rax
    0000044d: 	comisd	%xmm0, %xmm1
    00000451: 	jbe	.Ltmp525 # Offset: 1105
    00000453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp526:
    00000458: 	movq	%rax, %rdx
    0000045b: 	movsd	(%rax), %xmm0
    0000045f: 	leaq	0x8(%rax), %rax
    00000463: 	comisd	%xmm0, %xmm1
    00000467: 	ja	.Ltmp526 # Offset: 1127
    00000469: 	cmpq	%rdx, %rcx
    0000046c: 	jbe	.Ltmp524 # Offset: 1132
.Ltmp525:
    0000046e: 	movsd	%xmm0, (%rcx)
    00000472: 	movsd	%xmm2, (%rdx)
.Ltmp523:
    00000476: 	movq	%rcx, %r14
    00000479: 	jmp	.Ltmp527 # Offset: 1145
.Ltmp524:
    0000047b: 	movq	%r14, %rsi
    0000047e: 	movq	%r13, %rdi
    00000481: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1153
    00000486: 	movq	%rbx, %rsi
    00000489: 	movq	%r14, %rdi
    0000048c: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1164
.Ltmp522:
    00000491: 	movq	%rbp, %rax
    00000494: 	movq	%rbx, %rdi
    00000497: 	subq	%rbx, %rax
    0000049a: 	cmpq	$0x8, %rax
    0000049e: 	jle	.Ltmp474 # Offset: 1182
    000004a4: 	movsd	(%rbx), %xmm1
    000004a8: 	movq	%rbp, %r13
    000004ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp532:
    000004b0: 	movsd	-0x8(%r13), %xmm2
    000004b6: 	leaq	-0x8(%r13), %rdx
    000004ba: 	comisd	%xmm1, %xmm2
    000004be: 	ja	.Ltmp528 # Offset: 1214
    000004c0: 	cmpq	%rbx, %rdx
    000004c3: 	jbe	.Ltmp529 # Offset: 1219
    000004c9: 	movsd	(%rbx), %xmm0
    000004cd: 	leaq	0x8(%rbx), %rax
    000004d1: 	comisd	%xmm0, %xmm1
    000004d5: 	jbe	.Ltmp530 # Offset: 1237
    000004d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp531:
    000004e0: 	movq	%rax, %rbx
    000004e3: 	movsd	(%rax), %xmm0
    000004e7: 	leaq	0x8(%rax), %rax
    000004eb: 	comisd	%xmm0, %xmm1
    000004ef: 	ja	.Ltmp531 # Offset: 1263
    000004f1: 	cmpq	%rbx, %rdx
    000004f4: 	jbe	.Ltmp529 # Offset: 1268
.Ltmp530:
    000004fa: 	movsd	%xmm0, (%rdx)
    000004fe: 	movsd	%xmm2, (%rbx)
.Ltmp528:
    00000502: 	movq	%rdx, %r13
    00000505: 	jmp	.Ltmp532 # Offset: 1285
.Ltmp496:
    00000507: 	movq	%rbx, %rax
    0000050a: 	subq	%rbp, %rax
    0000050d: 	cmpq	$0x8, %rax
    00000511: 	jle	.Ltmp533 # Offset: 1297
    00000513: 	movsd	(%rbp), %xmm1
    00000518: 	movq	%rbx, %r14
    0000051b: 	movq	%rbp, %rdx
    0000051e: 	nop # Size: 2
.Ltmp538:
    00000520: 	movsd	-0x8(%r14), %xmm2
    00000526: 	leaq	-0x8(%r14), %rcx
    0000052a: 	comisd	%xmm1, %xmm2
    0000052e: 	ja	.Ltmp534 # Offset: 1326
    00000530: 	cmpq	%rdx, %rcx
    00000533: 	jbe	.Ltmp535 # Offset: 1331
    00000535: 	movsd	(%rdx), %xmm0
    00000539: 	leaq	0x8(%rdx), %rax
    0000053d: 	comisd	%xmm0, %xmm1
    00000541: 	jbe	.Ltmp536 # Offset: 1345
    00000543: 	nopl	(%rax,%rax) # Size: 5
.Ltmp537:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movsd	(%rax), %xmm0
    0000054f: 	leaq	0x8(%rax), %rax
    00000553: 	comisd	%xmm0, %xmm1
    00000557: 	ja	.Ltmp537 # Offset: 1367
    00000559: 	cmpq	%rdx, %rcx
    0000055c: 	jbe	.Ltmp535 # Offset: 1372
.Ltmp536:
    0000055e: 	movsd	%xmm0, (%rcx)
    00000562: 	movsd	%xmm2, (%rdx)
.Ltmp534:
    00000566: 	movq	%rcx, %r14
    00000569: 	jmp	.Ltmp538 # Offset: 1385
.Ltmp535:
    0000056b: 	movq	%r14, %rsi
    0000056e: 	movq	%rbp, %rdi
    00000571: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1393
    00000576: 	movq	%rbx, %rsi
    00000579: 	movq	%r14, %rdi
    0000057c: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1404
.Ltmp533:
    00000581: 	movq	%r13, %rax
    00000584: 	movq	%rbx, %rdi
    00000587: 	subq	%rbx, %rax
    0000058a: 	cmpq	$0x8, %rax
    0000058e: 	jle	.Ltmp539 # Offset: 1422
    00000594: 	movsd	(%rbx), %xmm1
    00000598: 	movq	%r13, %rbp
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp544:
    000005a0: 	movsd	-0x8(%rbp), %xmm2
    000005a5: 	leaq	-0x8(%rbp), %rdx
    000005a9: 	comisd	%xmm1, %xmm2
    000005ad: 	ja	.Ltmp540 # Offset: 1453
    000005af: 	cmpq	%rbx, %rdx
    000005b2: 	jbe	.Ltmp541 # Offset: 1458
    000005b8: 	movsd	(%rbx), %xmm0
    000005bc: 	leaq	0x8(%rbx), %rax
    000005c0: 	comisd	%xmm0, %xmm1
    000005c4: 	jbe	.Ltmp542 # Offset: 1476
    000005c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp543:
    000005d0: 	movq	%rax, %rbx
    000005d3: 	movsd	(%rax), %xmm0
    000005d7: 	leaq	0x8(%rax), %rax
    000005db: 	comisd	%xmm0, %xmm1
    000005df: 	ja	.Ltmp543 # Offset: 1503
    000005e1: 	cmpq	%rbx, %rdx
    000005e4: 	jbe	.Ltmp541 # Offset: 1508
.Ltmp542:
    000005ea: 	movsd	%xmm0, (%rdx)
    000005ee: 	movsd	%xmm2, (%rbx)
.Ltmp540:
    000005f2: 	movq	%rdx, %rbp
    000005f5: 	jmp	.Ltmp544 # Offset: 1525
.Ltmp491:
    000005f7: 	movq	%rbp, %rax
    000005fa: 	subq	%r13, %rax
    000005fd: 	cmpq	$0x8, %rax
    00000601: 	jle	.Ltmp545 # Offset: 1537
    00000603: 	movsd	(%r13), %xmm1
    00000609: 	movq	%rbp, %r14
    0000060c: 	movq	%r13, %rdx
    0000060f: 	nop # Size: 1
.Ltmp550:
    00000610: 	movsd	-0x8(%r14), %xmm2
    00000616: 	leaq	-0x8(%r14), %rcx
    0000061a: 	comisd	%xmm1, %xmm2
    0000061e: 	ja	.Ltmp546 # Offset: 1566
    00000620: 	cmpq	%rdx, %rcx
    00000623: 	jbe	.Ltmp547 # Offset: 1571
    00000625: 	movsd	(%rdx), %xmm0
    00000629: 	leaq	0x8(%rdx), %rax
    0000062d: 	comisd	%xmm0, %xmm1
    00000631: 	jbe	.Ltmp548 # Offset: 1585
    00000633: 	nopl	(%rax,%rax) # Size: 5
.Ltmp549:
    00000638: 	movq	%rax, %rdx
    0000063b: 	movsd	(%rax), %xmm0
    0000063f: 	leaq	0x8(%rax), %rax
    00000643: 	comisd	%xmm0, %xmm1
    00000647: 	ja	.Ltmp549 # Offset: 1607
    00000649: 	cmpq	%rdx, %rcx
    0000064c: 	jbe	.Ltmp547 # Offset: 1612
.Ltmp548:
    0000064e: 	movsd	%xmm0, (%rcx)
    00000652: 	movsd	%xmm2, (%rdx)
.Ltmp546:
    00000656: 	movq	%rcx, %r14
    00000659: 	jmp	.Ltmp550 # Offset: 1625
.Ltmp547:
    0000065b: 	movq	%r14, %rsi
    0000065e: 	movq	%r13, %rdi
    00000661: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1633
    00000666: 	movq	%rbp, %rsi
    00000669: 	movq	%r14, %rdi
    0000066c: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1644
.Ltmp545:
    00000671: 	movq	%r12, %rax
    00000674: 	movq	%rbp, %rdi
    00000677: 	subq	%rbp, %rax
    0000067a: 	cmpq	$0x8, %rax
    0000067e: 	jle	.Ltmp482 # Offset: 1662
    00000684: 	movsd	(%rbp), %xmm1
    00000689: 	movq	%r12, %r13
    0000068c: 	nopl	(%rax) # Size: 4
.Ltmp555:
    00000690: 	movsd	-0x8(%r13), %xmm2
    00000696: 	leaq	-0x8(%r13), %rdx
    0000069a: 	comisd	%xmm1, %xmm2
    0000069e: 	ja	.Ltmp551 # Offset: 1694
    000006a0: 	cmpq	%rbp, %rdx
    000006a3: 	jbe	.Ltmp552 # Offset: 1699
    000006a5: 	movsd	(%rbp), %xmm0
    000006aa: 	leaq	0x8(%rbp), %rax
    000006ae: 	comisd	%xmm0, %xmm1
    000006b2: 	jbe	.Ltmp553 # Offset: 1714
    000006b4: 	nopl	(%rax) # Size: 4
.Ltmp554:
    000006b8: 	movq	%rax, %rbp
    000006bb: 	movsd	(%rax), %xmm0
    000006bf: 	leaq	0x8(%rax), %rax
    000006c3: 	comisd	%xmm0, %xmm1
    000006c7: 	ja	.Ltmp554 # Offset: 1735
    000006c9: 	cmpq	%rbp, %rdx
    000006cc: 	jbe	.Ltmp552 # Offset: 1740
.Ltmp553:
    000006ce: 	movsd	%xmm0, (%rdx)
    000006d2: 	movsd	%xmm2, (%rbp)
.Ltmp551:
    000006d7: 	movq	%rdx, %r13
    000006da: 	jmp	.Ltmp555 # Offset: 1754
.Ltmp552:
    000006dc: 	movq	%r13, %rsi
    000006df: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1759
    000006e4: 	popq	%rbx
    000006e5: 	movq	%r12, %rsi
    000006e8: 	popq	%rbp
    000006e9: 	movq	%r13, %rdi
    000006ec: 	popq	%r12
    000006ee: 	popq	%r13
    000006f0: 	popq	%r14
    000006f2: 	jmp	.LBB050 # Offset: 1778
.Ltmp541:
    000006f7: 	movq	%rbp, %rsi
    000006fa: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1786
    000006ff: 	movq	%r13, %rsi
    00000702: 	movq	%rbp, %rdi
    00000705: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1797
    0000070a: 	jmp	.Ltmp539 # Offset: 1802
.Ltmp529:
    0000070f: 	movq	%r13, %rsi
    00000712: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1810
    00000717: 	movq	%rbp, %rsi
    0000071a: 	movq	%r13, %rdi
    0000071d: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1821
    00000722: 	jmp	.Ltmp474 # Offset: 1826
.Ltmp518:
    00000727: 	movq	%r14, %rsi
    0000072a: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1834
    0000072f: 	movq	%r13, %rsi
    00000732: 	movq	%r14, %rdi
    00000735: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 1845
    0000073a: 	jmp	.Ltmp516 # Offset: 1850
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortIPiEEvT_S2_" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x5920
  Size        : 0x41e
  MaxSize     : 0x420
  Offset      : 0x5920
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPiEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x4, %rax
    00000020: 	jle	.Ltmp556 # Offset: 32
.Ltmp568:
    00000022: 	movl	(%rdi), %r8d
    00000025: 	movq	(%rsp), %r13
    00000029: 	movq	%rdi, %rdx
.Ltmp561:
    0000002c: 	movl	-0x4(%r13), %eax
    00000030: 	leaq	-0x4(%r13), %rcx
    00000034: 	cmpl	%r8d, %eax
    00000037: 	jg	.Ltmp557 # Offset: 55
    00000039: 	cmpq	%rcx, %rdx
    0000003c: 	jae	.Ltmp558 # Offset: 60
    0000003e: 	movl	(%rdx), %esi
    00000040: 	cmpl	%esi, %r8d
    00000043: 	jle	.Ltmp559 # Offset: 67
.Ltmp560:
    00000045: 	movl	0x4(%rdx), %esi
    00000048: 	addq	$0x4, %rdx
    0000004c: 	cmpl	%r8d, %esi
    0000004f: 	jl	.Ltmp560 # Offset: 79
    00000051: 	cmpq	%rdx, %rcx
    00000054: 	jbe	.Ltmp558 # Offset: 84
.Ltmp559:
    00000056: 	movl	%esi, (%rcx)
    00000058: 	movl	%eax, (%rdx)
.Ltmp557:
    0000005a: 	movq	%rcx, %r13
    0000005d: 	jmp	.Ltmp561 # Offset: 93
.Ltmp556:
    0000005f: 	addq	$0x28, %rsp
    00000063: 	popq	%rbx
    00000064: 	popq	%rbp
    00000065: 	popq	%r12
    00000067: 	popq	%r13
    00000069: 	popq	%r14
    0000006b: 	popq	%r15
    0000006d: 	retq # Offset: 109
.Ltmp558:
    0000006e: 	movq	%r13, %rdx
    00000071: 	movq	%r13, %r8
    00000074: 	subq	%rdi, %rdx
    00000077: 	cmpq	$0x4, %rdx
    0000007b: 	jle	.Ltmp562 # Offset: 123
.Ltmp620:
    0000007d: 	movl	(%rdi), %r9d
    00000080: 	movq	%r8, %r14
    00000083: 	movq	%rdi, %rdx
.Ltmp567:
    00000086: 	leaq	-0x4(%r14), %rcx
    0000008a: 	cmpl	%eax, %r9d
    0000008d: 	jl	.Ltmp563 # Offset: 141
    0000008f: 	cmpq	%rdx, %rcx
    00000092: 	jbe	.Ltmp564 # Offset: 146
    00000094: 	movl	(%rdx), %esi
    00000096: 	cmpl	%esi, %r9d
    00000099: 	jle	.Ltmp565 # Offset: 153
.Ltmp566:
    0000009b: 	movl	0x4(%rdx), %esi
    0000009e: 	addq	$0x4, %rdx
    000000a2: 	cmpl	%esi, %r9d
    000000a5: 	jg	.Ltmp566 # Offset: 165
    000000a7: 	cmpq	%rdx, %rcx
    000000aa: 	jbe	.Ltmp564 # Offset: 170
.Ltmp565:
    000000ac: 	movl	%esi, (%rcx)
    000000ae: 	movl	%eax, (%rdx)
.Ltmp563:
    000000b0: 	movl	-0x4(%rcx), %eax
    000000b3: 	movq	%rcx, %r14
    000000b6: 	jmp	.Ltmp567 # Offset: 182
.Ltmp619:
    000000b8: 	movq	%r8, %r13
.Ltmp562:
    000000bb: 	movq	(%rsp), %rax
    000000bf: 	subq	%r13, %rax
    000000c2: 	cmpq	$0x4, %rax
    000000c6: 	jle	.Ltmp556 # Offset: 198
    000000c8: 	movq	%r13, %rdi
    000000cb: 	jmp	.Ltmp568 # Offset: 203
.Ltmp564:
    000000d0: 	movq	%r14, %rdx
    000000d3: 	subq	%rdi, %rdx
    000000d6: 	cmpq	$0x4, %rdx
    000000da: 	jle	.Ltmp569 # Offset: 218
    000000e0: 	movq	%r8, 0x8(%rsp)
    000000e5: 	movq	%r14, %rbx
.Ltmp622:
    000000e8: 	movl	(%rdi), %r9d
    000000eb: 	movq	%rbx, %r15
    000000ee: 	movq	%rdi, %rdx
.Ltmp574:
    000000f1: 	leaq	-0x4(%r15), %rcx
    000000f5: 	cmpl	%r9d, %eax
    000000f8: 	jg	.Ltmp570 # Offset: 248
    000000fa: 	cmpq	%rdx, %rcx
    000000fd: 	jbe	.Ltmp571 # Offset: 253
    000000ff: 	movl	(%rdx), %esi
    00000101: 	cmpl	%esi, %r9d
    00000104: 	jle	.Ltmp572 # Offset: 260
.Ltmp573:
    00000106: 	movl	0x4(%rdx), %esi
    00000109: 	addq	$0x4, %rdx
    0000010d: 	cmpl	%esi, %r9d
    00000110: 	jg	.Ltmp573 # Offset: 272
    00000112: 	cmpq	%rdx, %rcx
    00000115: 	jbe	.Ltmp571 # Offset: 277
.Ltmp572:
    00000117: 	movl	%esi, (%rcx)
    00000119: 	movl	%eax, (%rdx)
.Ltmp570:
    0000011b: 	movl	-0x4(%rcx), %eax
    0000011e: 	movq	%rcx, %r15
    00000121: 	jmp	.Ltmp574 # Offset: 289
.Ltmp571:
    00000123: 	movq	%r15, %rdx
    00000126: 	subq	%rdi, %rdx
    00000129: 	cmpq	$0x4, %rdx
    0000012d: 	jle	.Ltmp575 # Offset: 301
    00000133: 	movq	%rbx, 0x10(%rsp)
    00000138: 	movq	%r15, %rbx
.Ltmp618:
    0000013b: 	movl	(%rdi), %r9d
    0000013e: 	movq	%rbx, %r14
    00000141: 	movq	%rdi, %rdx
.Ltmp580:
    00000144: 	leaq	-0x4(%r14), %rcx
    00000148: 	cmpl	%eax, %r9d
    0000014b: 	jl	.Ltmp576 # Offset: 331
    0000014d: 	cmpq	%rdx, %rcx
    00000150: 	jbe	.Ltmp577 # Offset: 336
    00000152: 	movl	(%rdx), %esi
    00000154: 	cmpl	%esi, %r9d
    00000157: 	jle	.Ltmp578 # Offset: 343
.Ltmp579:
    00000159: 	movl	0x4(%rdx), %esi
    0000015c: 	addq	$0x4, %rdx
    00000160: 	cmpl	%esi, %r9d
    00000163: 	jg	.Ltmp579 # Offset: 355
    00000165: 	cmpq	%rdx, %rcx
    00000168: 	jbe	.Ltmp577 # Offset: 360
.Ltmp578:
    0000016a: 	movl	%esi, (%rcx)
    0000016c: 	movl	%eax, (%rdx)
.Ltmp576:
    0000016e: 	movl	-0x4(%rcx), %eax
    00000171: 	movq	%rcx, %r14
    00000174: 	jmp	.Ltmp580 # Offset: 372
.Ltmp577:
    00000176: 	movq	%r14, %rdx
    00000179: 	subq	%rdi, %rdx
    0000017c: 	cmpq	$0x4, %rdx
    00000180: 	jle	.Ltmp581 # Offset: 384
    00000186: 	movq	%rbx, 0x18(%rsp)
    0000018b: 	movq	%r14, %rbx
.Ltmp616:
    0000018e: 	movl	(%rdi), %r9d
    00000191: 	movq	%rbx, %r14
    00000194: 	movq	%rdi, %rdx
.Ltmp586:
    00000197: 	leaq	-0x4(%r14), %rcx
    0000019b: 	cmpl	%eax, %r9d
    0000019e: 	jl	.Ltmp582 # Offset: 414
    000001a0: 	cmpq	%rdx, %rcx
    000001a3: 	jbe	.Ltmp583 # Offset: 419
    000001a5: 	movl	(%rdx), %esi
    000001a7: 	cmpl	%esi, %r9d
    000001aa: 	jle	.Ltmp584 # Offset: 426
.Ltmp585:
    000001ac: 	movl	0x4(%rdx), %esi
    000001af: 	addq	$0x4, %rdx
    000001b3: 	cmpl	%esi, %r9d
    000001b6: 	jg	.Ltmp585 # Offset: 438
    000001b8: 	cmpq	%rdx, %rcx
    000001bb: 	jbe	.Ltmp583 # Offset: 443
.Ltmp584:
    000001bd: 	movl	%esi, (%rcx)
    000001bf: 	movl	%eax, (%rdx)
.Ltmp582:
    000001c1: 	movl	-0x4(%rcx), %eax
    000001c4: 	movq	%rcx, %r14
    000001c7: 	jmp	.Ltmp586 # Offset: 455
.Ltmp583:
    000001c9: 	movq	%r14, %rdx
    000001cc: 	subq	%rdi, %rdx
    000001cf: 	cmpq	$0x4, %rdx
    000001d3: 	jle	.Ltmp587 # Offset: 467
.Ltmp614:
    000001d9: 	movl	(%rdi), %r8d
    000001dc: 	movq	%r14, %r15
    000001df: 	movq	%rdi, %rdx
.Ltmp592:
    000001e2: 	leaq	-0x4(%r15), %rcx
    000001e6: 	cmpl	%eax, %r8d
    000001e9: 	jl	.Ltmp588 # Offset: 489
    000001eb: 	cmpq	%rdx, %rcx
    000001ee: 	jbe	.Ltmp589 # Offset: 494
    000001f0: 	movl	(%rdx), %esi
    000001f2: 	cmpl	%esi, %r8d
    000001f5: 	jle	.Ltmp590 # Offset: 501
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp591:
    00000200: 	movl	0x4(%rdx), %esi
    00000203: 	addq	$0x4, %rdx
    00000207: 	cmpl	%esi, %r8d
    0000020a: 	jg	.Ltmp591 # Offset: 522
    0000020c: 	cmpq	%rdx, %rcx
    0000020f: 	jbe	.Ltmp589 # Offset: 527
.Ltmp590:
    00000211: 	movl	%esi, (%rcx)
    00000213: 	movl	%eax, (%rdx)
.Ltmp588:
    00000215: 	movl	-0x4(%rcx), %eax
    00000218: 	movq	%rcx, %r15
    0000021b: 	jmp	.Ltmp592 # Offset: 539
.Ltmp589:
    0000021d: 	movq	%r15, %rdx
    00000220: 	subq	%rdi, %rdx
    00000223: 	cmpq	$0x4, %rdx
    00000227: 	jle	.Ltmp593 # Offset: 551
.Ltmp613:
    0000022d: 	movl	(%rdi), %r8d
    00000230: 	movq	%r15, %r12
    00000233: 	movq	%rdi, %rdx
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp611:
    00000240: 	leaq	-0x4(%r12), %rsi
    00000245: 	cmpl	%eax, %r8d
    00000248: 	jl	.Ltmp594 # Offset: 584
    0000024e: 	cmpq	%rdx, %rsi
    00000251: 	jbe	.Ltmp595 # Offset: 593
    00000253: 	movl	(%rdx), %ecx
    00000255: 	cmpl	%ecx, %r8d
    00000258: 	jle	.Ltmp596 # Offset: 600
    0000025e: 	nop # Size: 2
.Ltmp597:
    00000260: 	movl	0x4(%rdx), %ecx
    00000263: 	addq	$0x4, %rdx
    00000267: 	cmpl	%ecx, %r8d
    0000026a: 	jg	.Ltmp597 # Offset: 618
    0000026c: 	cmpq	%rdx, %rsi
    0000026f: 	ja	.Ltmp596 # Offset: 623
.Ltmp595:
    00000275: 	movq	%r12, %rdx
    00000278: 	subq	%rdi, %rdx
    0000027b: 	cmpq	$0x4, %rdx
    0000027f: 	jle	.Ltmp598 # Offset: 639
.Ltmp610:
    00000285: 	movl	(%rdi), %esi
    00000287: 	movq	%r12, %rbp
    0000028a: 	movq	%rdi, %rdx
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp609:
    00000290: 	leaq	-0x4(%rbp), %rcx
    00000294: 	cmpl	%esi, %eax
    00000296: 	jg	.Ltmp599 # Offset: 662
    0000029c: 	cmpq	%rdx, %rcx
    0000029f: 	jbe	.Ltmp600 # Offset: 671
    000002a1: 	movl	(%rdx), %r8d
    000002a4: 	cmpl	%r8d, %esi
    000002a7: 	jle	.Ltmp601 # Offset: 679
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp602:
    000002b0: 	movl	0x4(%rdx), %r8d
    000002b4: 	addq	$0x4, %rdx
    000002b8: 	cmpl	%r8d, %esi
    000002bb: 	jg	.Ltmp602 # Offset: 699
    000002bd: 	cmpq	%rdx, %rcx
    000002c0: 	ja	.Ltmp601 # Offset: 704
.Ltmp600:
    000002c2: 	movq	%rbp, %rax
    000002c5: 	subq	%rdi, %rax
    000002c8: 	cmpq	$0x4, %rax
    000002cc: 	jle	.Ltmp603 # Offset: 716
.Ltmp608:
    000002ce: 	movl	(%rdi), %ecx
    000002d0: 	movq	%rbp, %r13
    000002d3: 	movq	%rdi, %rax
    000002d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp612:
    000002e0: 	movl	-0x4(%r13), %r8d
    000002e4: 	leaq	-0x4(%r13), %rsi
    000002e8: 	cmpl	%r8d, %ecx
    000002eb: 	jl	.Ltmp604 # Offset: 747
    000002f1: 	cmpq	%rax, %rsi
    000002f4: 	jbe	.Ltmp605 # Offset: 756
    000002f6: 	movl	(%rax), %edx
    000002f8: 	cmpl	%edx, %ecx
    000002fa: 	jle	.Ltmp606 # Offset: 762
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp607:
    00000300: 	movl	0x4(%rax), %edx
    00000303: 	addq	$0x4, %rax
    00000307: 	cmpl	%edx, %ecx
    00000309: 	jg	.Ltmp607 # Offset: 777
    0000030b: 	cmpq	%rax, %rsi
    0000030e: 	ja	.Ltmp606 # Offset: 782
.Ltmp605:
    00000310: 	movq	%r13, %rsi
    00000313: 	callq	_ZN9benchmark9quicksortIPiEEvT_S2_ # Offset: 787
    00000318: 	movq	%rbp, %rax
    0000031b: 	subq	%r13, %rax
    0000031e: 	cmpq	$0x4, %rax
    00000322: 	jle	.Ltmp603 # Offset: 802
    00000324: 	movq	%r13, %rdi
    00000327: 	jmp	.Ltmp608 # Offset: 807
.Ltmp601:
    00000329: 	movl	%r8d, (%rcx)
    0000032c: 	movl	%eax, (%rdx)
.Ltmp599:
    0000032e: 	movl	-0x4(%rcx), %eax
    00000331: 	movq	%rcx, %rbp
    00000334: 	jmp	.Ltmp609 # Offset: 820
.Ltmp603:
    00000339: 	movq	%r12, %rax
    0000033c: 	subq	%rbp, %rax
    0000033f: 	cmpq	$0x4, %rax
    00000343: 	jle	.Ltmp598 # Offset: 835
    00000345: 	movl	-0x4(%r12), %eax
    0000034a: 	movq	%rbp, %rdi
    0000034d: 	jmp	.Ltmp610 # Offset: 845
.Ltmp596:
    00000352: 	movl	%ecx, (%rsi)
    00000354: 	movl	%eax, (%rdx)
.Ltmp594:
    00000356: 	movl	-0x4(%rsi), %eax
    00000359: 	movq	%rsi, %r12
    0000035c: 	jmp	.Ltmp611 # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp606:
    00000368: 	movl	%edx, (%rsi)
    0000036a: 	movl	%r8d, (%rax)
.Ltmp604:
    0000036d: 	movq	%rsi, %r13
    00000370: 	jmp	.Ltmp612 # Offset: 880
.Ltmp598:
    00000375: 	movq	%r15, %rax
    00000378: 	subq	%r12, %rax
    0000037b: 	cmpq	$0x4, %rax
    0000037f: 	jle	.Ltmp593 # Offset: 895
    00000381: 	movl	-0x4(%r15), %eax
    00000385: 	movq	%r12, %rdi
    00000388: 	jmp	.Ltmp613 # Offset: 904
.Ltmp593:
    0000038d: 	movq	%r14, %rax
    00000390: 	subq	%r15, %rax
    00000393: 	cmpq	$0x4, %rax
    00000397: 	jle	.Ltmp587 # Offset: 919
    00000399: 	movl	-0x4(%r14), %eax
    0000039d: 	movq	%r15, %rdi
    000003a0: 	jmp	.Ltmp614 # Offset: 928
.Ltmp587:
    000003a5: 	movq	%rbx, %rax
    000003a8: 	subq	%r14, %rax
    000003ab: 	cmpq	$0x4, %rax
    000003af: 	jle	.Ltmp615 # Offset: 943
    000003b1: 	movl	-0x4(%rbx), %eax
    000003b4: 	movq	%r14, %rdi
    000003b7: 	jmp	.Ltmp616 # Offset: 951
.Ltmp615:
    000003bc: 	movq	%rbx, %r14
    000003bf: 	movq	0x18(%rsp), %rbx
.Ltmp581:
    000003c4: 	movq	%rbx, %rax
    000003c7: 	subq	%r14, %rax
    000003ca: 	cmpq	$0x4, %rax
    000003ce: 	jle	.Ltmp617 # Offset: 974
    000003d0: 	movl	-0x4(%rbx), %eax
    000003d3: 	movq	%r14, %rdi
    000003d6: 	jmp	.Ltmp618 # Offset: 982
.Ltmp621:
    000003db: 	movq	0x8(%rsp), %r8
    000003e0: 	movq	%rbx, %r14
.Ltmp569:
    000003e3: 	movq	%r8, %rax
    000003e6: 	subq	%r14, %rax
    000003e9: 	cmpq	$0x4, %rax
    000003ed: 	jle	.Ltmp619 # Offset: 1005
    000003f3: 	movl	-0x4(%r8), %eax
    000003f7: 	movq	%r14, %rdi
    000003fa: 	jmp	.Ltmp620 # Offset: 1018
.Ltmp617:
    000003ff: 	movq	%rbx, %r15
    00000402: 	movq	0x10(%rsp), %rbx
.Ltmp575:
    00000407: 	movq	%rbx, %rax
    0000040a: 	subq	%r15, %rax
    0000040d: 	cmpq	$0x4, %rax
    00000411: 	jle	.Ltmp621 # Offset: 1041
    00000413: 	movl	-0x4(%rbx), %eax
    00000416: 	movq	%r15, %rdi
    00000419: 	jmp	.Ltmp622 # Offset: 1049
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPiEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x5d40
  Size        : 0x773
  MaxSize     : 0x780
  Offset      : 0x5d40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x48, %rsp
    00000012: 	movq	0x8(%rsi), %rbp
    00000016: 	movq	0x8(%rdi), %r9
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x38(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	movq	%rbp, %rax
    0000002d: 	subq	%r9, %rax
    00000030: 	cmpq	$0x4, %rax
    00000034: 	jle	.Ltmp623 # Offset: 52
    00000036: 	movl	(%r9), %esi
    00000039: 	movq	%rbp, %rbx
    0000003c: 	movq	%r9, %rdx
    0000003f: 	nop # Size: 1
.Ltmp628:
    00000040: 	movl	-0x4(%rbx), %edi
    00000043: 	leaq	-0x4(%rbx), %r8
    00000047: 	cmpl	%esi, %edi
    00000049: 	jg	.Ltmp624 # Offset: 73
    0000004b: 	cmpq	%rdx, %r8
    0000004e: 	jbe	.Ltmp625 # Offset: 78
    00000050: 	movl	(%rdx), %ecx
    00000052: 	cmpl	%ecx, %esi
    00000054: 	jle	.Ltmp626 # Offset: 84
    00000056: 	leaq	0x4(%rdx), %rax
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp627:
    00000060: 	movq	%rax, %rdx
    00000063: 	movl	(%rax), %ecx
    00000065: 	leaq	0x4(%rax), %rax
    00000069: 	cmpl	%esi, %ecx
    0000006b: 	jl	.Ltmp627 # Offset: 107
    0000006d: 	cmpq	%rdx, %r8
    00000070: 	jbe	.Ltmp625 # Offset: 112
.Ltmp626:
    00000072: 	movl	%ecx, (%r8)
    00000075: 	movl	%edi, (%rdx)
.Ltmp624:
    00000077: 	movq	%r8, %rbx
    0000007a: 	jmp	.Ltmp628 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp625:
    00000080: 	movq	%rbx, %rax
    00000083: 	subq	%r9, %rax
    00000086: 	cmpq	$0x4, %rax
    0000008a: 	jg	.Ltmp629 # Offset: 138
.Ltmp648:
    00000090: 	movq	%rbp, %rax
    00000093: 	subq	%rbx, %rax
    00000096: 	cmpq	$0x4, %rax
    0000009a: 	jg	.Ltmp630 # Offset: 154
.Ltmp623:
    0000009c: 	movq	0x38(%rsp), %rax
    000000a1: 	subq	%fs:0x28, %rax
    000000aa: 	jne	.Ltmp631 # Offset: 170
    000000b0: 	addq	$0x48, %rsp
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	popq	%r12
    000000b8: 	popq	%r13
    000000ba: 	popq	%r14
    000000bc: 	popq	%r15
    000000be: 	retq # Offset: 190
.Ltmp630:
    000000bf: 	movl	(%rbx), %esi
    000000c1: 	movq	%rbp, %r12
    000000c4: 	movq	%rbx, %rdx
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp636:
    000000d0: 	movl	-0x4(%r12), %edi
    000000d5: 	leaq	-0x4(%r12), %r8
    000000da: 	cmpl	%edi, %esi
    000000dc: 	jl	.Ltmp632 # Offset: 220
    000000de: 	cmpq	%rdx, %r8
    000000e1: 	jbe	.Ltmp633 # Offset: 225
    000000e7: 	movl	(%rdx), %ecx
    000000e9: 	cmpl	%ecx, %esi
    000000eb: 	jle	.Ltmp634 # Offset: 235
    000000ed: 	leaq	0x4(%rdx), %rax
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp635:
    000000f8: 	movq	%rax, %rdx
    000000fb: 	movl	(%rax), %ecx
    000000fd: 	leaq	0x4(%rax), %rax
    00000101: 	cmpl	%ecx, %esi
    00000103: 	jg	.Ltmp635 # Offset: 259
    00000105: 	cmpq	%rdx, %r8
    00000108: 	jbe	.Ltmp633 # Offset: 264
.Ltmp634:
    0000010e: 	movl	%ecx, (%r8)
    00000111: 	movl	%edi, (%rdx)
.Ltmp632:
    00000113: 	movq	%r8, %r12
    00000116: 	jmp	.Ltmp636 # Offset: 278
.Ltmp629:
    00000118: 	movl	(%r9), %esi
    0000011b: 	movq	%rbx, %r12
    0000011e: 	movq	%r9, %rdx
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp641:
    00000128: 	leaq	-0x4(%r12), %r8
    0000012d: 	cmpl	%edi, %esi
    0000012f: 	jl	.Ltmp637 # Offset: 303
    00000131: 	cmpq	%rdx, %r8
    00000134: 	jbe	.Ltmp638 # Offset: 308
    00000136: 	movl	(%rdx), %ecx
    00000138: 	cmpl	%ecx, %esi
    0000013a: 	jle	.Ltmp639 # Offset: 314
    0000013c: 	leaq	0x4(%rdx), %rax
.Ltmp640:
    00000140: 	movq	%rax, %rdx
    00000143: 	movl	(%rax), %ecx
    00000145: 	leaq	0x4(%rax), %rax
    00000149: 	cmpl	%ecx, %esi
    0000014b: 	jg	.Ltmp640 # Offset: 331
    0000014d: 	cmpq	%rdx, %r8
    00000150: 	jbe	.Ltmp638 # Offset: 336
.Ltmp639:
    00000152: 	movl	%ecx, (%r8)
    00000155: 	movl	%edi, (%rdx)
.Ltmp637:
    00000157: 	movl	-0x4(%r8), %edi
    0000015b: 	movq	%r8, %r12
    0000015e: 	jmp	.Ltmp641 # Offset: 350
.Ltmp638:
    00000160: 	movq	%r12, %rax
    00000163: 	subq	%r9, %rax
    00000166: 	cmpq	$0x4, %rax
    0000016a: 	jle	.Ltmp642 # Offset: 362
    0000016c: 	movl	(%r9), %ecx
    0000016f: 	movq	%r12, %r13
    00000172: 	movq	%r9, %rax
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp647:
    00000178: 	leaq	-0x4(%r13), %rsi
    0000017c: 	cmpl	%edi, %ecx
    0000017e: 	jl	.Ltmp643 # Offset: 382
    00000180: 	cmpq	%rax, %rsi
    00000183: 	jbe	.Ltmp644 # Offset: 387
    00000189: 	movl	(%rax), %edx
    0000018b: 	cmpl	%edx, %ecx
    0000018d: 	jle	.Ltmp645 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp646:
    00000190: 	movl	0x4(%rax), %edx
    00000193: 	addq	$0x4, %rax
    00000197: 	cmpl	%edx, %ecx
    00000199: 	jg	.Ltmp646 # Offset: 409
    0000019b: 	cmpq	%rax, %rsi
    0000019e: 	jbe	.Ltmp644 # Offset: 414
.Ltmp645:
    000001a4: 	movl	%edx, (%rsi)
    000001a6: 	movl	%edi, (%rax)
.Ltmp643:
    000001a8: 	movl	-0x4(%rsi), %edi
    000001ab: 	movq	%rsi, %r13
    000001ae: 	jmp	.Ltmp647 # Offset: 430
.Ltmp672:
    000001b0: 	movq	%r13, 0x28(%rsp)
    000001b5: 	leaq	0x10(%rsp), %r15
    000001ba: 	leaq	0x20(%rsp), %r13
    000001bf: 	movq	%r15, %rsi
    000001c2: 	movq	%r13, %rdi
    000001c5: 	movq	%r14, 0x18(%rsp)
    000001ca: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 458
    000001cf: 	movq	%r15, %rsi
    000001d2: 	movq	%r13, %rdi
    000001d5: 	movq	%r12, 0x18(%rsp)
    000001da: 	movq	%r14, 0x28(%rsp)
    000001df: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 479
.Ltmp642:
    000001e4: 	movq	%rbx, %rax
    000001e7: 	subq	%r12, %rax
    000001ea: 	cmpq	$0x4, %rax
    000001ee: 	jle	.Ltmp648 # Offset: 494
    000001f4: 	movl	(%r12), %esi
    000001f8: 	movq	%rbx, %r13
    000001fb: 	movq	%r12, %rdx
    000001fe: 	nop # Size: 2
.Ltmp653:
    00000200: 	movl	-0x4(%r13), %r8d
    00000204: 	leaq	-0x4(%r13), %rdi
    00000208: 	cmpl	%r8d, %esi
    0000020b: 	jl	.Ltmp649 # Offset: 523
    0000020d: 	cmpq	%rdx, %rdi
    00000210: 	jbe	.Ltmp650 # Offset: 528
    00000216: 	movl	(%rdx), %ecx
    00000218: 	cmpl	%esi, %ecx
    0000021a: 	jge	.Ltmp651 # Offset: 538
    0000021c: 	leaq	0x4(%rdx), %rax
.Ltmp652:
    00000220: 	movq	%rax, %rdx
    00000223: 	movl	(%rax), %ecx
    00000225: 	leaq	0x4(%rax), %rax
    00000229: 	cmpl	%ecx, %esi
    0000022b: 	jg	.Ltmp652 # Offset: 555
    0000022d: 	cmpq	%rdx, %rdi
    00000230: 	jbe	.Ltmp650 # Offset: 560
.Ltmp651:
    00000236: 	movl	%ecx, (%rdi)
    00000238: 	movl	%r8d, (%rdx)
.Ltmp649:
    0000023b: 	movq	%rdi, %r13
    0000023e: 	jmp	.Ltmp653 # Offset: 574
.Ltmp633:
    00000240: 	movq	%r12, %rax
    00000243: 	subq	%rbx, %rax
    00000246: 	cmpq	$0x4, %rax
    0000024a: 	jle	.Ltmp654 # Offset: 586
    00000250: 	movl	(%rbx), %esi
    00000252: 	movq	%r12, %r13
    00000255: 	movq	%rbx, %rdx
    00000258: 	nopl	(%rax,%rax) # Size: 8
.Ltmp659:
    00000260: 	leaq	-0x4(%r13), %r8
    00000264: 	cmpl	%esi, %edi
    00000266: 	jg	.Ltmp655 # Offset: 614
    00000268: 	cmpq	%rdx, %r8
    0000026b: 	jbe	.Ltmp656 # Offset: 619
    00000271: 	movl	(%rdx), %ecx
    00000273: 	cmpl	%ecx, %esi
    00000275: 	jle	.Ltmp657 # Offset: 629
    00000277: 	leaq	0x4(%rdx), %rax
    0000027b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp658:
    00000280: 	movq	%rax, %rdx
    00000283: 	movl	(%rax), %ecx
    00000285: 	leaq	0x4(%rax), %rax
    00000289: 	cmpl	%ecx, %esi
    0000028b: 	jg	.Ltmp658 # Offset: 651
    0000028d: 	cmpq	%rdx, %r8
    00000290: 	jbe	.Ltmp656 # Offset: 656
.Ltmp657:
    00000296: 	movl	%ecx, (%r8)
    00000299: 	movl	%edi, (%rdx)
.Ltmp655:
    0000029b: 	movl	-0x4(%r8), %edi
    0000029f: 	movq	%r8, %r13
    000002a2: 	jmp	.Ltmp659 # Offset: 674
.Ltmp694:
    000002a4: 	movq	%r13, 0x28(%rsp)
    000002a9: 	leaq	0x10(%rsp), %r14
    000002ae: 	leaq	0x20(%rsp), %r13
    000002b3: 	movq	%r14, %rsi
    000002b6: 	movq	%r13, %rdi
    000002b9: 	movq	%rbx, 0x18(%rsp)
    000002be: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 702
    000002c3: 	movq	%r14, %rsi
    000002c6: 	movq	%r13, %rdi
    000002c9: 	movq	%r12, 0x18(%rsp)
    000002ce: 	movq	%rbx, 0x28(%rsp)
    000002d3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 723
.Ltmp654:
    000002d8: 	movq	%rbp, %rax
    000002db: 	subq	%r12, %rax
    000002de: 	cmpq	$0x4, %rax
    000002e2: 	jle	.Ltmp623 # Offset: 738
    000002e8: 	movl	(%r12), %esi
    000002ec: 	movq	%rbp, %rbx
    000002ef: 	movq	%r12, %rdx
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp664:
    000002f8: 	movl	-0x4(%rbx), %r8d
    000002fc: 	leaq	-0x4(%rbx), %rdi
    00000300: 	cmpl	%r8d, %esi
    00000303: 	jl	.Ltmp660 # Offset: 771
    00000305: 	cmpq	%rdx, %rdi
    00000308: 	jbe	.Ltmp661 # Offset: 776
    0000030e: 	movl	(%rdx), %ecx
    00000310: 	cmpl	%ecx, %esi
    00000312: 	jle	.Ltmp662 # Offset: 786
    00000314: 	leaq	0x4(%rdx), %rax
    00000318: 	nopl	(%rax,%rax) # Size: 8
.Ltmp663:
    00000320: 	movq	%rax, %rdx
    00000323: 	movl	(%rax), %ecx
    00000325: 	leaq	0x4(%rax), %rax
    00000329: 	cmpl	%ecx, %esi
    0000032b: 	jg	.Ltmp663 # Offset: 811
    0000032d: 	cmpq	%rdx, %rdi
    00000330: 	jbe	.Ltmp661 # Offset: 816
.Ltmp662:
    00000336: 	movl	%ecx, (%rdi)
    00000338: 	movl	%r8d, (%rdx)
.Ltmp660:
    0000033b: 	movq	%rdi, %rbx
    0000033e: 	jmp	.Ltmp664 # Offset: 830
.Ltmp644:
    00000340: 	movq	%r13, %rax
    00000343: 	subq	%r9, %rax
    00000346: 	cmpq	$0x4, %rax
    0000034a: 	jle	.Ltmp665 # Offset: 842
    00000350: 	movl	(%r9), %esi
    00000353: 	movq	%r13, %r14
    00000356: 	movq	%r9, %rdx
    00000359: 	nopl	(%rax) # Size: 7
.Ltmp670:
    00000360: 	movl	-0x4(%r14), %r8d
    00000364: 	leaq	-0x4(%r14), %rdi
    00000368: 	cmpl	%r8d, %esi
    0000036b: 	jl	.Ltmp666 # Offset: 875
    0000036d: 	cmpq	%rdx, %rdi
    00000370: 	jbe	.Ltmp667 # Offset: 880
    00000372: 	movl	(%rdx), %ecx
    00000374: 	cmpl	%esi, %ecx
    00000376: 	jge	.Ltmp668 # Offset: 886
    00000378: 	leaq	0x4(%rdx), %rax
    0000037c: 	nopl	(%rax) # Size: 4
.Ltmp669:
    00000380: 	movq	%rax, %rdx
    00000383: 	movl	(%rax), %ecx
    00000385: 	leaq	0x4(%rax), %rax
    00000389: 	cmpl	%ecx, %esi
    0000038b: 	jg	.Ltmp669 # Offset: 907
    0000038d: 	cmpq	%rdx, %rdi
    00000390: 	jbe	.Ltmp667 # Offset: 912
.Ltmp668:
    00000392: 	movl	%ecx, (%rdi)
    00000394: 	movl	%r8d, (%rdx)
.Ltmp666:
    00000397: 	movq	%rdi, %r14
    0000039a: 	jmp	.Ltmp670 # Offset: 922
.Ltmp667:
    0000039c: 	leaq	0x20(%rsp), %r15
    000003a1: 	leaq	0x10(%rsp), %rsi
    000003a6: 	movq	%r14, 0x18(%rsp)
    000003ab: 	movq	%r15, %rdi
    000003ae: 	movq	%rsi, 0x8(%rsp)
    000003b3: 	movq	%r9, 0x28(%rsp)
    000003b8: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 952
    000003bd: 	movq	0x8(%rsp), %rsi
    000003c2: 	movq	%r15, %rdi
    000003c5: 	movq	%r13, 0x18(%rsp)
    000003ca: 	movq	%r14, 0x28(%rsp)
    000003cf: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 975
.Ltmp665:
    000003d4: 	movq	%r12, %rax
    000003d7: 	subq	%r13, %rax
    000003da: 	cmpq	$0x4, %rax
    000003de: 	jle	.Ltmp642 # Offset: 990
    000003e4: 	movl	(%r13), %ecx
    000003e8: 	movq	%r12, %r14
    000003eb: 	movq	%r13, %rax
    000003ee: 	nop # Size: 2
.Ltmp675:
    000003f0: 	movl	-0x4(%r14), %edi
    000003f4: 	leaq	-0x4(%r14), %rsi
    000003f8: 	cmpl	%edi, %ecx
    000003fa: 	jl	.Ltmp671 # Offset: 1018
    000003fc: 	cmpq	%rax, %rsi
    000003ff: 	jbe	.Ltmp672 # Offset: 1023
    00000405: 	movl	(%rax), %edx
    00000407: 	cmpl	%ecx, %edx
    00000409: 	jge	.Ltmp673 # Offset: 1033
    0000040b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp674:
    00000410: 	movl	0x4(%rax), %edx
    00000413: 	addq	$0x4, %rax
    00000417: 	cmpl	%edx, %ecx
    00000419: 	jg	.Ltmp674 # Offset: 1049
    0000041b: 	cmpq	%rax, %rsi
    0000041e: 	jbe	.Ltmp672 # Offset: 1054
.Ltmp673:
    00000424: 	movl	%edx, (%rsi)
    00000426: 	movl	%edi, (%rax)
.Ltmp671:
    00000428: 	movq	%rsi, %r14
    0000042b: 	jmp	.Ltmp675 # Offset: 1067
.Ltmp650:
    0000042d: 	movq	%r13, %rax
    00000430: 	subq	%r12, %rax
    00000433: 	cmpq	$0x4, %rax
    00000437: 	jle	.Ltmp676 # Offset: 1079
    00000439: 	movl	(%r12), %esi
    0000043d: 	movq	%r13, %r14
    00000440: 	movq	%r12, %rdx
    00000443: 	nopl	(%rax,%rax) # Size: 5
.Ltmp681:
    00000448: 	movl	-0x4(%r14), %r8d
    0000044c: 	leaq	-0x4(%r14), %rdi
    00000450: 	cmpl	%r8d, %esi
    00000453: 	jl	.Ltmp677 # Offset: 1107
    00000455: 	cmpq	%rdx, %rdi
    00000458: 	jbe	.Ltmp678 # Offset: 1112
    0000045a: 	movl	(%rdx), %ecx
    0000045c: 	cmpl	%esi, %ecx
    0000045e: 	jge	.Ltmp679 # Offset: 1118
    00000460: 	leaq	0x4(%rdx), %rax
    00000464: 	nopl	(%rax) # Size: 4
.Ltmp680:
    00000468: 	movq	%rax, %rdx
    0000046b: 	movl	(%rax), %ecx
    0000046d: 	leaq	0x4(%rax), %rax
    00000471: 	cmpl	%ecx, %esi
    00000473: 	jg	.Ltmp680 # Offset: 1139
    00000475: 	cmpq	%rdx, %rdi
    00000478: 	jbe	.Ltmp678 # Offset: 1144
.Ltmp679:
    0000047a: 	movl	%ecx, (%rdi)
    0000047c: 	movl	%r8d, (%rdx)
.Ltmp677:
    0000047f: 	movq	%rdi, %r14
    00000482: 	jmp	.Ltmp681 # Offset: 1154
.Ltmp678:
    00000484: 	movq	%r12, 0x28(%rsp)
    00000489: 	leaq	0x10(%rsp), %r15
    0000048e: 	leaq	0x20(%rsp), %r12
    00000493: 	movq	%r15, %rsi
    00000496: 	movq	%r12, %rdi
    00000499: 	movq	%r14, 0x18(%rsp)
    0000049e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1182
    000004a3: 	movq	%r15, %rsi
    000004a6: 	movq	%r12, %rdi
    000004a9: 	movq	%r13, 0x18(%rsp)
    000004ae: 	movq	%r14, 0x28(%rsp)
    000004b3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1203
.Ltmp676:
    000004b8: 	movq	%rbx, %rax
    000004bb: 	subq	%r13, %rax
    000004be: 	cmpq	$0x4, %rax
    000004c2: 	jle	.Ltmp648 # Offset: 1218
    000004c8: 	movl	(%r13), %esi
    000004cc: 	movq	%rbx, %r12
    000004cf: 	movq	%r13, %rdx
    000004d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp686:
    000004d8: 	movl	-0x4(%r12), %r8d
    000004dd: 	leaq	-0x4(%r12), %rdi
    000004e2: 	cmpl	%r8d, %esi
    000004e5: 	jl	.Ltmp682 # Offset: 1253
    000004e7: 	cmpq	%rdx, %rdi
    000004ea: 	jbe	.Ltmp683 # Offset: 1258
    000004f0: 	movl	(%rdx), %ecx
    000004f2: 	cmpl	%esi, %ecx
    000004f4: 	jge	.Ltmp684 # Offset: 1268
    000004f6: 	leaq	0x4(%rdx), %rax
    000004fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp685:
    00000500: 	movq	%rax, %rdx
    00000503: 	movl	(%rax), %ecx
    00000505: 	leaq	0x4(%rax), %rax
    00000509: 	cmpl	%ecx, %esi
    0000050b: 	jg	.Ltmp685 # Offset: 1291
    0000050d: 	cmpq	%rdx, %rdi
    00000510: 	jbe	.Ltmp683 # Offset: 1296
.Ltmp684:
    00000516: 	movl	%ecx, (%rdi)
    00000518: 	movl	%r8d, (%rdx)
.Ltmp682:
    0000051b: 	movq	%rdi, %r12
    0000051e: 	jmp	.Ltmp686 # Offset: 1310
.Ltmp656:
    00000520: 	movq	%r13, %rax
    00000523: 	subq	%rbx, %rax
    00000526: 	cmpq	$0x4, %rax
    0000052a: 	jle	.Ltmp687 # Offset: 1322
    0000052c: 	movl	(%rbx), %esi
    0000052e: 	movq	%r13, %r14
    00000531: 	movq	%rbx, %rdx
    00000534: 	nopl	(%rax) # Size: 4
.Ltmp692:
    00000538: 	movl	-0x4(%r14), %r8d
    0000053c: 	leaq	-0x4(%r14), %rdi
    00000540: 	cmpl	%r8d, %esi
    00000543: 	jl	.Ltmp688 # Offset: 1347
    00000545: 	cmpq	%rdx, %rdi
    00000548: 	jbe	.Ltmp689 # Offset: 1352
    0000054a: 	movl	(%rdx), %ecx
    0000054c: 	cmpl	%esi, %ecx
    0000054e: 	jge	.Ltmp690 # Offset: 1358
    00000550: 	leaq	0x4(%rdx), %rax
    00000554: 	nopl	(%rax) # Size: 4
.Ltmp691:
    00000558: 	movq	%rax, %rdx
    0000055b: 	movl	(%rax), %ecx
    0000055d: 	leaq	0x4(%rax), %rax
    00000561: 	cmpl	%ecx, %esi
    00000563: 	jg	.Ltmp691 # Offset: 1379
    00000565: 	cmpq	%rdx, %rdi
    00000568: 	jbe	.Ltmp689 # Offset: 1384
.Ltmp690:
    0000056a: 	movl	%ecx, (%rdi)
    0000056c: 	movl	%r8d, (%rdx)
.Ltmp688:
    0000056f: 	movq	%rdi, %r14
    00000572: 	jmp	.Ltmp692 # Offset: 1394
.Ltmp689:
    00000574: 	movq	%rbx, 0x28(%rsp)
    00000579: 	leaq	0x20(%rsp), %r15
    0000057e: 	leaq	0x10(%rsp), %rbx
    00000583: 	movq	%rbx, %rsi
    00000586: 	movq	%r15, %rdi
    00000589: 	movq	%r14, 0x18(%rsp)
    0000058e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1422
    00000593: 	movq	%rbx, %rsi
    00000596: 	movq	%r15, %rdi
    00000599: 	movq	%r13, 0x18(%rsp)
    0000059e: 	movq	%r14, 0x28(%rsp)
    000005a3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1443
.Ltmp687:
    000005a8: 	movq	%r12, %rax
    000005ab: 	subq	%r13, %rax
    000005ae: 	cmpq	$0x4, %rax
    000005b2: 	jle	.Ltmp654 # Offset: 1458
    000005b8: 	movl	(%r13), %esi
    000005bc: 	movq	%r12, %rbx
    000005bf: 	movq	%r13, %rdx
    000005c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp697:
    000005c8: 	movl	-0x4(%rbx), %r8d
    000005cc: 	leaq	-0x4(%rbx), %rdi
    000005d0: 	cmpl	%r8d, %esi
    000005d3: 	jl	.Ltmp693 # Offset: 1491
    000005d5: 	cmpq	%rdx, %rdi
    000005d8: 	jbe	.Ltmp694 # Offset: 1496
    000005de: 	movl	(%rdx), %ecx
    000005e0: 	cmpl	%ecx, %esi
    000005e2: 	jle	.Ltmp695 # Offset: 1506
    000005e4: 	leaq	0x4(%rdx), %rax
    000005e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp696:
    000005f0: 	movq	%rax, %rdx
    000005f3: 	movl	(%rax), %ecx
    000005f5: 	leaq	0x4(%rax), %rax
    000005f9: 	cmpl	%ecx, %esi
    000005fb: 	jg	.Ltmp696 # Offset: 1531
    000005fd: 	cmpq	%rdx, %rdi
    00000600: 	jbe	.Ltmp694 # Offset: 1536
.Ltmp695:
    00000606: 	movl	%ecx, (%rdi)
    00000608: 	movl	%r8d, (%rdx)
.Ltmp693:
    0000060b: 	movq	%rdi, %rbx
    0000060e: 	jmp	.Ltmp697 # Offset: 1550
.Ltmp661:
    00000610: 	movq	%rbx, %rax
    00000613: 	subq	%r12, %rax
    00000616: 	cmpq	$0x4, %rax
    0000061a: 	jle	.Ltmp698 # Offset: 1562
    00000620: 	movl	(%r12), %esi
    00000624: 	movq	%rbx, %r13
    00000627: 	movq	%r12, %rdx
    0000062a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp703:
    00000630: 	movl	-0x4(%r13), %r8d
    00000634: 	leaq	-0x4(%r13), %rdi
    00000638: 	cmpl	%r8d, %esi
    0000063b: 	jl	.Ltmp699 # Offset: 1595
    0000063d: 	cmpq	%rdx, %rdi
    00000640: 	jbe	.Ltmp700 # Offset: 1600
    00000642: 	movl	(%rdx), %ecx
    00000644: 	cmpl	%esi, %ecx
    00000646: 	jge	.Ltmp701 # Offset: 1606
    00000648: 	leaq	0x4(%rdx), %rax
    0000064c: 	nopl	(%rax) # Size: 4
.Ltmp702:
    00000650: 	movq	%rax, %rdx
    00000653: 	movl	(%rax), %ecx
    00000655: 	leaq	0x4(%rax), %rax
    00000659: 	cmpl	%ecx, %esi
    0000065b: 	jg	.Ltmp702 # Offset: 1627
    0000065d: 	cmpq	%rdx, %rdi
    00000660: 	jbe	.Ltmp700 # Offset: 1632
.Ltmp701:
    00000662: 	movl	%ecx, (%rdi)
    00000664: 	movl	%r8d, (%rdx)
.Ltmp699:
    00000667: 	movq	%rdi, %r13
    0000066a: 	jmp	.Ltmp703 # Offset: 1642
.Ltmp700:
    0000066c: 	movq	%r12, 0x28(%rsp)
    00000671: 	leaq	0x10(%rsp), %r14
    00000676: 	leaq	0x20(%rsp), %r12
    0000067b: 	movq	%r14, %rsi
    0000067e: 	movq	%r12, %rdi
    00000681: 	movq	%r13, 0x18(%rsp)
    00000686: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1670
    0000068b: 	movq	%r14, %rsi
    0000068e: 	movq	%r12, %rdi
    00000691: 	movq	%rbx, 0x18(%rsp)
    00000696: 	movq	%r13, 0x28(%rsp)
    0000069b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1691
.Ltmp698:
    000006a0: 	movq	%rbp, %rax
    000006a3: 	subq	%rbx, %rax
    000006a6: 	cmpq	$0x4, %rax
    000006aa: 	jle	.Ltmp623 # Offset: 1706
    000006b0: 	movl	(%rbx), %esi
    000006b2: 	movq	%rbp, %r12
    000006b5: 	movq	%rbx, %rdx
    000006b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp708:
    000006c0: 	movl	-0x4(%r12), %r8d
    000006c5: 	leaq	-0x4(%r12), %rdi
    000006ca: 	cmpl	%r8d, %esi
    000006cd: 	jl	.Ltmp704 # Offset: 1741
    000006cf: 	cmpq	%rdx, %rdi
    000006d2: 	jbe	.Ltmp705 # Offset: 1746
    000006d4: 	movl	(%rdx), %ecx
    000006d6: 	cmpl	%esi, %ecx
    000006d8: 	jge	.Ltmp706 # Offset: 1752
    000006da: 	leaq	0x4(%rdx), %rax
    000006de: 	nop # Size: 2
.Ltmp707:
    000006e0: 	movq	%rax, %rdx
    000006e3: 	movl	(%rax), %ecx
    000006e5: 	leaq	0x4(%rax), %rax
    000006e9: 	cmpl	%ecx, %esi
    000006eb: 	jg	.Ltmp707 # Offset: 1771
    000006ed: 	cmpq	%rdx, %rdi
    000006f0: 	jbe	.Ltmp705 # Offset: 1776
.Ltmp706:
    000006f2: 	movl	%ecx, (%rdi)
    000006f4: 	movl	%r8d, (%rdx)
.Ltmp704:
    000006f7: 	movq	%rdi, %r12
    000006fa: 	jmp	.Ltmp708 # Offset: 1786
.Ltmp705:
    000006fc: 	leaq	0x10(%rsp), %r14
    00000701: 	leaq	0x20(%rsp), %r13
    00000706: 	movq	%r12, 0x18(%rsp)
    0000070b: 	movq	%r14, %rsi
    0000070e: 	movq	%r13, %rdi
    00000711: 	movq	%rbx, 0x28(%rsp)
    00000716: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1814
    0000071b: 	movq	%r14, %rsi
    0000071e: 	movq	%r13, %rdi
    00000721: 	movq	%rbp, 0x18(%rsp)
    00000726: 	movq	%r12, 0x28(%rsp)
    0000072b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1835
    00000730: 	jmp	.Ltmp623 # Offset: 1840
.Ltmp683:
    00000735: 	movq	%r13, 0x28(%rsp)
    0000073a: 	leaq	0x10(%rsp), %r14
    0000073f: 	leaq	0x20(%rsp), %r13
    00000744: 	movq	%r14, %rsi
    00000747: 	movq	%r13, %rdi
    0000074a: 	movq	%r12, 0x18(%rsp)
    0000074f: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1871
    00000754: 	movq	%r14, %rsi
    00000757: 	movq	%r13, %rdi
    0000075a: 	movq	%rbx, 0x18(%rsp)
    0000075f: 	movq	%r12, 0x28(%rsp)
    00000764: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1892
    00000769: 	jmp	.Ltmp648 # Offset: 1897
.Ltmp631:
    0000076e: 	callq	__stack_chk_fail@PLT # Offset: 1902
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_"

Binary Function "_Z14test_quicksortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_quicksortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_quicksortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_array.cpp/1
  Number      : 54
  State       : disassembled
  Address     : 0x64c0
  Size        : 0x11b6
  MaxSize     : 0x11c0
  Offset      : 0x64c0
  Section     : .text
  Orc Section : .local.text._Z14test_quicksortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	pushq	%r15
    00000002: 	xorl	%r15d, %r15d
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x88, %rsp
    00000014: 	movq	%rdi, 0x8(%rsp)
    00000019: 	movq	%rsi, 0x10(%rsp)
    0000001e: 	movq	%rdx, 0x18(%rsp)
    00000023: 	movq	%rcx, 0x20(%rsp)
    00000028: 	movq	%r8, 0x28(%rsp)
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x78(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp709 # Offset: 81
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp722:
    00000060: 	movq	0x18(%rsp), %rax
    00000065: 	movq	0x8(%rax), %rbx
    00000069: 	movq	0x10(%rsp), %rax
    0000006e: 	movq	0x8(%rax), %r8
    00000072: 	movq	0x8(%rsp), %rax
    00000077: 	movq	0x8(%rax), %rdx
    0000007b: 	cmpq	%rdx, %r8
    0000007e: 	je	.Ltmp710 # Offset: 126
    00000084: 	movq	%r8, %rdi
    00000087: 	leaq	0x4(%rdx), %r9
    0000008b: 	movq	%rbx, %rax
    0000008e: 	subq	%rdx, %rdi
    00000091: 	subq	%r9, %rax
    00000094: 	leaq	-0x4(%rdi), %rsi
    00000098: 	cmpq	$0x8, %rax
    0000009c: 	jbe	.Ltmp711 # Offset: 156
    000000a2: 	cmpq	$0x8, %rsi
    000000a6: 	jbe	.Ltmp711 # Offset: 166
    000000ac: 	shrq	$0x2, %rsi
    000000b0: 	xorl	%eax, %eax
    000000b2: 	addq	$0x1, %rsi
    000000b6: 	movq	%rsi, %rdi
    000000b9: 	shrq	$0x2, %rdi
    000000bd: 	shlq	$0x4, %rdi
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp712:
    000000c8: 	movdqu	(%rdx,%rax), %xmm1
    000000cd: 	movups	%xmm1, (%rbx,%rax)
    000000d1: 	addq	$0x10, %rax
    000000d5: 	cmpq	%rdi, %rax
    000000d8: 	jne	.Ltmp712 # Offset: 216
    000000da: 	movq	%rsi, %rdi
    000000dd: 	andq	$-0x4, %rdi
    000000e1: 	leaq	(,%rdi,4), %rax
    000000e9: 	addq	%rax, %rdx
    000000ec: 	addq	%rbx, %rax
    000000ef: 	cmpq	%rsi, %rdi
    000000f2: 	je	.Ltmp710 # Offset: 242
    000000f4: 	movl	(%rdx), %esi
    000000f6: 	movl	%esi, (%rax)
    000000f8: 	leaq	0x4(%rdx), %rsi
    000000fc: 	cmpq	%rsi, %r8
    000000ff: 	je	.Ltmp710 # Offset: 255
    00000101: 	movl	0x4(%rdx), %esi
    00000104: 	movl	%esi, 0x4(%rax)
    00000107: 	leaq	0x8(%rdx), %rsi
    0000010b: 	cmpq	%rsi, %r8
    0000010e: 	je	.Ltmp710 # Offset: 270
    00000110: 	movl	0x8(%rdx), %edx
    00000113: 	movl	%edx, 0x8(%rax)
.Ltmp710:
    00000116: 	movq	0x20(%rsp), %rax
    0000011b: 	movq	0x8(%rax), %r13
    0000011f: 	movq	%r13, %rax
    00000122: 	subq	%rbx, %rax
    00000125: 	cmpq	$0x4, %rax
    00000129: 	jle	.Ltmp713 # Offset: 297
    0000012f: 	movl	(%rbx), %r8d
    00000132: 	movq	%r13, %rbp
    00000135: 	movq	%rbx, %rsi
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp718:
    00000140: 	movl	-0x4(%rbp), %eax
    00000143: 	leaq	-0x4(%rbp), %rdi
    00000147: 	cmpl	%eax, %r8d
    0000014a: 	jl	.Ltmp714 # Offset: 330
    0000014c: 	cmpq	%rsi, %rdi
    0000014f: 	jbe	.Ltmp715 # Offset: 335
    00000155: 	movl	(%rsi), %ecx
    00000157: 	cmpl	%ecx, %r8d
    0000015a: 	jle	.Ltmp716 # Offset: 346
    0000015c: 	leaq	0x4(%rsi), %rdx
.Ltmp717:
    00000160: 	movq	%rdx, %rsi
    00000163: 	movl	(%rdx), %ecx
    00000165: 	leaq	0x4(%rdx), %rdx
    00000169: 	cmpl	%ecx, %r8d
    0000016c: 	jg	.Ltmp717 # Offset: 364
    0000016e: 	cmpq	%rsi, %rdi
    00000171: 	jbe	.Ltmp715 # Offset: 369
.Ltmp716:
    00000177: 	movl	%ecx, (%rdi)
    00000179: 	movl	%eax, (%rsi)
.Ltmp714:
    0000017b: 	movq	%rdi, %rbp
    0000017e: 	jmp	.Ltmp718 # Offset: 382
.Ltmp833:
    00000180: 	movq	%r12, 0x68(%rsp)
    00000185: 	leaq	0x50(%rsp), %r14
    0000018a: 	leaq	0x60(%rsp), %r12
    0000018f: 	movq	%r14, %rsi
    00000192: 	movq	%r12, %rdi
    00000195: 	movq	%rbp, 0x58(%rsp)
    0000019a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 410
    0000019f: 	movq	%r14, %rsi
    000001a2: 	movq	%r12, %rdi
    000001a5: 	movq	%r13, 0x58(%rsp)
    000001aa: 	movq	%rbp, 0x68(%rsp)
    000001af: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp713:
    000001b8: 	addq	$0x4, %rbx
    000001bc: 	jmp	.Ltmp719 # Offset: 444
    000001be: 	nop # Size: 2
.Ltmp721:
    000001c0: 	addq	$0x4, %rbx
    000001c4: 	movl	-0x8(%rbx), %edi
    000001c7: 	cmpl	%edi, (%rax)
    000001c9: 	jl	.Ltmp720 # Offset: 457
.Ltmp719:
    000001cf: 	movq	%rbx, %rax
    000001d2: 	cmpq	%rbx, %r13
    000001d5: 	jne	.Ltmp721 # Offset: 469
    000001d7: 	addl	$0x1, %r15d
    000001db: 	cmpl	iterations(%rip), %r15d
    000001e2: 	jl	.Ltmp722 # Offset: 482
.Ltmp709:
    000001e8: 	callq	clock@PLT # Offset: 488
    000001ed: 	movq	%rax, end_time(%rip)
    000001f4: 	movq	0x78(%rsp), %rdx
    000001f9: 	subq	%fs:0x28, %rdx
    00000202: 	jne	.Ltmp723 # Offset: 514
    00000208: 	subq	start_time(%rip), %rax
    0000020f: 	pxor	%xmm0, %xmm0
    00000213: 	movq	0x28(%rsp), %rdi
    00000218: 	cvtsi2sd	%rax, %xmm0
    0000021d: 	divsd	DATAat0x13600(%rip), %xmm0
    00000225: 	addq	$0x88, %rsp
    0000022c: 	popq	%rbx
    0000022d: 	popq	%rbp
    0000022e: 	popq	%r12
    00000230: 	popq	%r13
    00000232: 	popq	%r14
    00000234: 	popq	%r15
    00000236: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 566
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp715:
    00000240: 	movq	%rbp, %rdx
    00000243: 	subq	%rbx, %rdx
    00000246: 	cmpq	$0x4, %rdx
    0000024a: 	jle	.Ltmp724 # Offset: 586
    00000250: 	movl	(%rbx), %r8d
    00000253: 	movq	%rbp, %r12
    00000256: 	movq	%rbx, %rsi
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp729:
    00000260: 	leaq	-0x4(%r12), %rdi
    00000265: 	cmpl	%eax, %r8d
    00000268: 	jl	.Ltmp725 # Offset: 616
    0000026a: 	cmpq	%rsi, %rdi
    0000026d: 	jbe	.Ltmp726 # Offset: 621
    00000273: 	movl	(%rsi), %ecx
    00000275: 	cmpl	%ecx, %r8d
    00000278: 	jle	.Ltmp727 # Offset: 632
    0000027a: 	leaq	0x4(%rsi), %rdx
    0000027e: 	nop # Size: 2
.Ltmp728:
    00000280: 	movq	%rdx, %rsi
    00000283: 	movl	(%rdx), %ecx
    00000285: 	leaq	0x4(%rdx), %rdx
    00000289: 	cmpl	%ecx, %r8d
    0000028c: 	jg	.Ltmp728 # Offset: 652
    0000028e: 	cmpq	%rsi, %rdi
    00000291: 	jbe	.Ltmp726 # Offset: 657
.Ltmp727:
    00000297: 	movl	%ecx, (%rdi)
    00000299: 	movl	%eax, (%rsi)
.Ltmp725:
    0000029b: 	movl	-0x4(%rdi), %eax
    0000029e: 	movq	%rdi, %r12
    000002a1: 	jmp	.Ltmp729 # Offset: 673
.Ltmp866:
    000002a3: 	movq	%r12, 0x68(%rsp)
    000002a8: 	leaq	0x60(%rsp), %r12
    000002ad: 	leaq	0x50(%rsp), %rsi
    000002b2: 	movq	%r12, %rdi
    000002b5: 	movq	%rsi, 0x30(%rsp)
    000002ba: 	movq	%r14, 0x58(%rsp)
    000002bf: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 703
    000002c4: 	movq	0x30(%rsp), %rsi
    000002c9: 	movq	%r12, %rdi
    000002cc: 	movq	%rbp, 0x58(%rsp)
    000002d1: 	movq	%r14, 0x68(%rsp)
    000002d6: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 726
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp724:
    000002e0: 	movq	%r13, %rax
    000002e3: 	subq	%rbp, %rax
    000002e6: 	cmpq	$0x4, %rax
    000002ea: 	jle	.Ltmp713 # Offset: 746
    000002f0: 	movl	(%rbp), %r8d
    000002f4: 	movq	%r13, %r12
    000002f7: 	movq	%rbp, %rsi
    000002fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp734:
    00000300: 	movl	-0x4(%r12), %eax
    00000305: 	leaq	-0x4(%r12), %rdi
    0000030a: 	cmpl	%eax, %r8d
    0000030d: 	jl	.Ltmp730 # Offset: 781
    0000030f: 	cmpq	%rsi, %rdi
    00000312: 	jbe	.Ltmp731 # Offset: 786
    00000314: 	movl	(%rsi), %ecx
    00000316: 	cmpl	%ecx, %r8d
    00000319: 	jle	.Ltmp732 # Offset: 793
    0000031b: 	leaq	0x4(%rsi), %rdx
    0000031f: 	nop # Size: 1
.Ltmp733:
    00000320: 	movq	%rdx, %rsi
    00000323: 	movl	(%rdx), %ecx
    00000325: 	leaq	0x4(%rdx), %rdx
    00000329: 	cmpl	%ecx, %r8d
    0000032c: 	jg	.Ltmp733 # Offset: 812
    0000032e: 	cmpq	%rsi, %rdi
    00000331: 	jbe	.Ltmp731 # Offset: 817
.Ltmp732:
    00000333: 	movl	%ecx, (%rdi)
    00000335: 	movl	%eax, (%rsi)
.Ltmp730:
    00000337: 	movq	%rdi, %r12
    0000033a: 	jmp	.Ltmp734 # Offset: 826
    0000033c: 	nopl	(%rax) # Size: 4
.Ltmp720:
    00000340: 	movq	0x28(%rsp), %rax
    00000345: 	leaq	DATAat0x131ba(%rip), %rsi
    0000034c: 	movl	$0x1, %edi
    00000351: 	addl	$0x1, %r15d
    00000355: 	movq	(%rax), %rdx
    00000358: 	xorl	%eax, %eax
    0000035a: 	callq	__printf_chk@PLT # Offset: 858
    0000035f: 	cmpl	iterations(%rip), %r15d
    00000366: 	jl	.Ltmp722 # Offset: 870
    0000036c: 	jmp	.Ltmp709 # Offset: 876
.Ltmp731:
    00000371: 	movq	%r12, %rdx
    00000374: 	subq	%rbp, %rdx
    00000377: 	cmpq	$0x4, %rdx
    0000037b: 	jle	.Ltmp735 # Offset: 891
    00000381: 	movl	(%rbp), %r8d
    00000385: 	movq	%r12, %r14
    00000388: 	movq	%rbp, %rsi
    0000038b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp740:
    00000390: 	leaq	-0x4(%r14), %rdi
    00000394: 	cmpl	%r8d, %eax
    00000397: 	jg	.Ltmp736 # Offset: 919
    00000399: 	cmpq	%rsi, %rdi
    0000039c: 	jbe	.Ltmp737 # Offset: 924
    000003a2: 	movl	(%rsi), %ecx
    000003a4: 	cmpl	%r8d, %ecx
    000003a7: 	jge	.Ltmp738 # Offset: 935
    000003a9: 	leaq	0x4(%rsi), %rdx
    000003ad: 	nopl	(%rax) # Size: 3
.Ltmp739:
    000003b0: 	movq	%rdx, %rsi
    000003b3: 	movl	(%rdx), %ecx
    000003b5: 	leaq	0x4(%rdx), %rdx
    000003b9: 	cmpl	%ecx, %r8d
    000003bc: 	jg	.Ltmp739 # Offset: 956
    000003be: 	cmpq	%rsi, %rdi
    000003c1: 	jbe	.Ltmp737 # Offset: 961
.Ltmp738:
    000003c7: 	movl	%ecx, (%rdi)
    000003c9: 	movl	%eax, (%rsi)
.Ltmp736:
    000003cb: 	movl	-0x4(%rdi), %eax
    000003ce: 	movq	%rdi, %r14
    000003d1: 	jmp	.Ltmp740 # Offset: 977
.Ltmp811:
    000003d3: 	movq	%rbp, 0x68(%rsp)
    000003d8: 	leaq	0x60(%rsp), %rbp
    000003dd: 	leaq	0x50(%rsp), %rsi
    000003e2: 	movq	%rbp, %rdi
    000003e5: 	movq	%rsi, 0x30(%rsp)
    000003ea: 	movq	%r14, 0x58(%rsp)
    000003ef: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1007
    000003f4: 	movq	0x30(%rsp), %rsi
    000003f9: 	movq	%rbp, %rdi
    000003fc: 	movq	%r12, 0x58(%rsp)
    00000401: 	movq	%r14, 0x68(%rsp)
    00000406: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1030
.Ltmp735:
    0000040b: 	movq	%r13, %rax
    0000040e: 	subq	%r12, %rax
    00000411: 	cmpq	$0x4, %rax
    00000415: 	jle	.Ltmp713 # Offset: 1045
    0000041b: 	movl	(%r12), %r8d
    0000041f: 	movq	%r13, %rbp
    00000422: 	movq	%r12, %rdx
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp745:
    00000428: 	movl	-0x4(%rbp), %edi
    0000042b: 	leaq	-0x4(%rbp), %rsi
    0000042f: 	cmpl	%edi, %r8d
    00000432: 	jl	.Ltmp741 # Offset: 1074
    00000434: 	cmpq	%rdx, %rsi
    00000437: 	jbe	.Ltmp742 # Offset: 1079
    0000043d: 	movl	(%rdx), %ecx
    0000043f: 	cmpl	%ecx, %r8d
    00000442: 	jle	.Ltmp743 # Offset: 1090
    00000444: 	leaq	0x4(%rdx), %rax
    00000448: 	nopl	(%rax,%rax) # Size: 8
.Ltmp744:
    00000450: 	movq	%rax, %rdx
    00000453: 	movl	(%rax), %ecx
    00000455: 	leaq	0x4(%rax), %rax
    00000459: 	cmpl	%ecx, %r8d
    0000045c: 	jg	.Ltmp744 # Offset: 1116
    0000045e: 	cmpq	%rdx, %rsi
    00000461: 	jbe	.Ltmp742 # Offset: 1121
.Ltmp743:
    00000467: 	movl	%ecx, (%rsi)
    00000469: 	movl	%edi, (%rdx)
.Ltmp741:
    0000046b: 	movq	%rsi, %rbp
    0000046e: 	jmp	.Ltmp745 # Offset: 1134
.Ltmp726:
    00000470: 	movq	%r12, %rdx
    00000473: 	subq	%rbx, %rdx
    00000476: 	cmpq	$0x4, %rdx
    0000047a: 	jle	.Ltmp746 # Offset: 1146
    00000480: 	movl	(%rbx), %r8d
    00000483: 	movq	%r12, %r14
    00000486: 	movq	%rbx, %rsi
    00000489: 	nopl	(%rax) # Size: 7
.Ltmp751:
    00000490: 	leaq	-0x4(%r14), %rdi
    00000494: 	cmpl	%r8d, %eax
    00000497: 	jg	.Ltmp747 # Offset: 1175
    00000499: 	cmpq	%rsi, %rdi
    0000049c: 	jbe	.Ltmp748 # Offset: 1180
    000004a2: 	movl	(%rsi), %ecx
    000004a4: 	cmpl	%ecx, %r8d
    000004a7: 	jle	.Ltmp749 # Offset: 1191
    000004a9: 	leaq	0x4(%rsi), %rdx
    000004ad: 	nopl	(%rax) # Size: 3
.Ltmp750:
    000004b0: 	movq	%rdx, %rsi
    000004b3: 	movl	(%rdx), %ecx
    000004b5: 	leaq	0x4(%rdx), %rdx
    000004b9: 	cmpl	%ecx, %r8d
    000004bc: 	jg	.Ltmp750 # Offset: 1212
    000004be: 	cmpq	%rsi, %rdi
    000004c1: 	jbe	.Ltmp748 # Offset: 1217
.Ltmp749:
    000004c7: 	movl	%ecx, (%rdi)
    000004c9: 	movl	%eax, (%rsi)
.Ltmp747:
    000004cb: 	movl	-0x4(%rdi), %eax
    000004ce: 	movq	%rdi, %r14
    000004d1: 	jmp	.Ltmp751 # Offset: 1233
.Ltmp855:
    000004d3: 	leaq	0x50(%rsp), %rsi
    000004d8: 	leaq	0x60(%rsp), %rdi
    000004dd: 	movq	%r14, 0x58(%rsp)
    000004e2: 	movq	%rsi, 0x38(%rsp)
    000004e7: 	movq	%rdi, 0x30(%rsp)
    000004ec: 	movq	%r8, 0x68(%rsp)
    000004f1: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1265
    000004f6: 	movq	0x38(%rsp), %rsi
    000004fb: 	movq	0x30(%rsp), %rdi
    00000500: 	movq	%r12, 0x58(%rsp)
    00000505: 	movq	%r14, 0x68(%rsp)
    0000050a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1290
.Ltmp746:
    0000050f: 	movq	%rbp, %rax
    00000512: 	subq	%r12, %rax
    00000515: 	cmpq	$0x4, %rax
    00000519: 	jle	.Ltmp724 # Offset: 1305
    0000051f: 	movl	(%r12), %r8d
    00000523: 	movq	%rbp, %r14
    00000526: 	movq	%r12, %rdx
    00000529: 	nopl	(%rax) # Size: 7
.Ltmp756:
    00000530: 	movl	-0x4(%r14), %edi
    00000534: 	leaq	-0x4(%r14), %rsi
    00000538: 	cmpl	%edi, %r8d
    0000053b: 	jl	.Ltmp752 # Offset: 1339
    0000053d: 	cmpq	%rdx, %rsi
    00000540: 	jbe	.Ltmp753 # Offset: 1344
    00000542: 	movl	(%rdx), %ecx
    00000544: 	cmpl	%r8d, %ecx
    00000547: 	jge	.Ltmp754 # Offset: 1351
    00000549: 	leaq	0x4(%rdx), %rax
    0000054d: 	nopl	(%rax) # Size: 3
.Ltmp755:
    00000550: 	movq	%rax, %rdx
    00000553: 	movl	(%rax), %ecx
    00000555: 	leaq	0x4(%rax), %rax
    00000559: 	cmpl	%ecx, %r8d
    0000055c: 	jg	.Ltmp755 # Offset: 1372
    0000055e: 	cmpq	%rdx, %rsi
    00000561: 	jbe	.Ltmp753 # Offset: 1377
.Ltmp754:
    00000563: 	movl	%ecx, (%rsi)
    00000565: 	movl	%edi, (%rdx)
.Ltmp752:
    00000567: 	movq	%rsi, %r14
    0000056a: 	jmp	.Ltmp756 # Offset: 1386
.Ltmp711:
    0000056c: 	xorl	%eax, %eax
    0000056e: 	nop # Size: 2
.Ltmp757:
    00000570: 	movl	(%rdx,%rax), %ecx
    00000573: 	movl	%ecx, (%rbx,%rax)
    00000576: 	addq	$0x4, %rax
    0000057a: 	cmpq	%rax, %rdi
    0000057d: 	jne	.Ltmp757 # Offset: 1405
    0000057f: 	jmp	.Ltmp710 # Offset: 1407
.Ltmp753:
    00000584: 	movq	%r14, %rax
    00000587: 	subq	%r12, %rax
    0000058a: 	cmpq	$0x4, %rax
    0000058e: 	jle	.Ltmp758 # Offset: 1422
    00000594: 	movl	(%r12), %r9d
    00000598: 	movq	%r14, %r8
    0000059b: 	movq	%r12, %rdx
    0000059e: 	nop # Size: 2
.Ltmp763:
    000005a0: 	leaq	-0x4(%r8), %rsi
    000005a4: 	cmpl	%edi, %r9d
    000005a7: 	jl	.Ltmp759 # Offset: 1447
    000005a9: 	cmpq	%rdx, %rsi
    000005ac: 	jbe	.Ltmp760 # Offset: 1452
    000005b2: 	movl	(%rdx), %ecx
    000005b4: 	cmpl	%ecx, %r9d
    000005b7: 	jle	.Ltmp761 # Offset: 1463
    000005b9: 	leaq	0x4(%rdx), %rax
    000005bd: 	nopl	(%rax) # Size: 3
.Ltmp762:
    000005c0: 	movq	%rax, %rdx
    000005c3: 	movl	(%rax), %ecx
    000005c5: 	leaq	0x4(%rax), %rax
    000005c9: 	cmpl	%ecx, %r9d
    000005cc: 	jg	.Ltmp762 # Offset: 1484
    000005ce: 	cmpq	%rdx, %rsi
    000005d1: 	jbe	.Ltmp760 # Offset: 1489
.Ltmp761:
    000005d7: 	movl	%ecx, (%rsi)
    000005d9: 	movl	%edi, (%rdx)
.Ltmp759:
    000005db: 	movl	-0x4(%rsi), %edi
    000005de: 	movq	%rsi, %r8
    000005e1: 	jmp	.Ltmp763 # Offset: 1505
.Ltmp877:
    000005e3: 	leaq	0x50(%rsp), %rsi
    000005e8: 	leaq	0x60(%rsp), %rdi
    000005ed: 	movq	%r12, 0x58(%rsp)
    000005f2: 	movq	%rsi, 0x38(%rsp)
    000005f7: 	movq	%rdi, 0x30(%rsp)
    000005fc: 	movq	%r8, 0x68(%rsp)
    00000601: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1537
    00000606: 	movq	0x38(%rsp), %rsi
    0000060b: 	movq	0x30(%rsp), %rdi
    00000610: 	movq	%r14, 0x58(%rsp)
    00000615: 	movq	%r12, 0x68(%rsp)
    0000061a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1562
.Ltmp758:
    0000061f: 	movq	%rbp, %rax
    00000622: 	subq	%r14, %rax
    00000625: 	cmpq	$0x4, %rax
    00000629: 	jle	.Ltmp724 # Offset: 1577
    0000062f: 	movl	(%r14), %edi
    00000632: 	movq	%rbp, %r12
    00000635: 	movq	%r14, %rdx
    00000638: 	nopl	(%rax,%rax) # Size: 8
.Ltmp768:
    00000640: 	movl	-0x4(%r12), %r8d
    00000645: 	leaq	-0x4(%r12), %rsi
    0000064a: 	cmpl	%r8d, %edi
    0000064d: 	jl	.Ltmp764 # Offset: 1613
    0000064f: 	cmpq	%rdx, %rsi
    00000652: 	jbe	.Ltmp765 # Offset: 1618
    00000658: 	movl	(%rdx), %ecx
    0000065a: 	cmpl	%ecx, %edi
    0000065c: 	jle	.Ltmp766 # Offset: 1628
    0000065e: 	leaq	0x4(%rdx), %rax
    00000662: 	nopw	(%rax,%rax) # Size: 6
.Ltmp767:
    00000668: 	movq	%rax, %rdx
    0000066b: 	movl	(%rax), %ecx
    0000066d: 	leaq	0x4(%rax), %rax
    00000671: 	cmpl	%ecx, %edi
    00000673: 	jg	.Ltmp767 # Offset: 1651
    00000675: 	cmpq	%rdx, %rsi
    00000678: 	jbe	.Ltmp765 # Offset: 1656
.Ltmp766:
    0000067e: 	movl	%ecx, (%rsi)
    00000680: 	movl	%r8d, (%rdx)
.Ltmp764:
    00000683: 	movq	%rsi, %r12
    00000686: 	jmp	.Ltmp768 # Offset: 1670
.Ltmp748:
    00000688: 	movq	%r14, %rdx
    0000068b: 	subq	%rbx, %rdx
    0000068e: 	cmpq	$0x4, %rdx
    00000692: 	jle	.Ltmp769 # Offset: 1682
    00000694: 	movl	(%rbx), %edi
    00000696: 	movq	%r14, %r8
    00000699: 	movq	%rbx, %rdx
    0000069c: 	nopl	(%rax) # Size: 4
.Ltmp774:
    000006a0: 	leaq	-0x4(%r8), %rsi
    000006a4: 	cmpl	%edi, %eax
    000006a6: 	jg	.Ltmp770 # Offset: 1702
    000006a8: 	cmpq	%rdx, %rsi
    000006ab: 	jbe	.Ltmp771 # Offset: 1707
    000006ad: 	movl	(%rdx), %ecx
    000006af: 	cmpl	%ecx, %edi
    000006b1: 	jle	.Ltmp772 # Offset: 1713
    000006b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp773:
    000006b8: 	movl	0x4(%rdx), %ecx
    000006bb: 	addq	$0x4, %rdx
    000006bf: 	cmpl	%ecx, %edi
    000006c1: 	jg	.Ltmp773 # Offset: 1729
    000006c3: 	cmpq	%rdx, %rsi
    000006c6: 	jbe	.Ltmp771 # Offset: 1734
.Ltmp772:
    000006c8: 	movl	%ecx, (%rsi)
    000006ca: 	movl	%eax, (%rdx)
.Ltmp770:
    000006cc: 	movl	-0x4(%rsi), %eax
    000006cf: 	movq	%rsi, %r8
    000006d2: 	jmp	.Ltmp774 # Offset: 1746
.Ltmp771:
    000006d4: 	movq	%r8, %rax
    000006d7: 	subq	%rbx, %rax
    000006da: 	cmpq	$0x4, %rax
    000006de: 	jg	.Ltmp775 # Offset: 1758
    000006e4: 	movq	%r14, %rax
    000006e7: 	subq	%r8, %rax
    000006ea: 	cmpq	$0x4, %rax
    000006ee: 	jg	.Ltmp776 # Offset: 1774
.Ltmp769:
    000006f4: 	movq	%r12, %rax
    000006f7: 	subq	%r14, %rax
    000006fa: 	cmpq	$0x4, %rax
    000006fe: 	jle	.Ltmp746 # Offset: 1790
    00000704: 	movl	(%r14), %esi
    00000707: 	movq	%r12, %r8
    0000070a: 	movq	%r14, %rax
    0000070d: 	nopl	(%rax) # Size: 3
.Ltmp781:
    00000710: 	movl	-0x4(%r8), %edi
    00000714: 	leaq	-0x4(%r8), %rcx
    00000718: 	cmpl	%edi, %esi
    0000071a: 	jl	.Ltmp777 # Offset: 1818
    0000071c: 	cmpq	%rax, %rcx
    0000071f: 	jbe	.Ltmp778 # Offset: 1823
    00000725: 	movl	(%rax), %edx
    00000727: 	cmpl	%edx, %esi
    00000729: 	jle	.Ltmp779 # Offset: 1833
    0000072b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp780:
    00000730: 	movl	0x4(%rax), %edx
    00000733: 	addq	$0x4, %rax
    00000737: 	cmpl	%edx, %esi
    00000739: 	jg	.Ltmp780 # Offset: 1849
    0000073b: 	cmpq	%rax, %rcx
    0000073e: 	jbe	.Ltmp778 # Offset: 1854
.Ltmp779:
    00000744: 	movl	%edx, (%rcx)
    00000746: 	movl	%edi, (%rax)
.Ltmp777:
    00000748: 	movq	%rcx, %r8
    0000074b: 	jmp	.Ltmp781 # Offset: 1867
.Ltmp742:
    0000074d: 	movq	%rbp, %rax
    00000750: 	subq	%r12, %rax
    00000753: 	cmpq	$0x4, %rax
    00000757: 	jle	.Ltmp782 # Offset: 1879
    0000075d: 	movl	(%r12), %r8d
    00000761: 	movq	%rbp, %r14
    00000764: 	movq	%r12, %rdx
    00000767: 	nopw	(%rax,%rax) # Size: 9
.Ltmp787:
    00000770: 	leaq	-0x4(%r14), %rsi
    00000774: 	cmpl	%r8d, %edi
    00000777: 	jg	.Ltmp783 # Offset: 1911
    00000779: 	cmpq	%rdx, %rsi
    0000077c: 	jbe	.Ltmp784 # Offset: 1916
    00000782: 	movl	(%rdx), %ecx
    00000784: 	cmpl	%r8d, %ecx
    00000787: 	jge	.Ltmp785 # Offset: 1927
    00000789: 	leaq	0x4(%rdx), %rax
    0000078d: 	nopl	(%rax) # Size: 3
.Ltmp786:
    00000790: 	movq	%rax, %rdx
    00000793: 	movl	(%rax), %ecx
    00000795: 	leaq	0x4(%rax), %rax
    00000799: 	cmpl	%ecx, %r8d
    0000079c: 	jg	.Ltmp786 # Offset: 1948
    0000079e: 	cmpq	%rdx, %rsi
    000007a1: 	jbe	.Ltmp784 # Offset: 1953
.Ltmp785:
    000007a7: 	movl	%ecx, (%rsi)
    000007a9: 	movl	%edi, (%rdx)
.Ltmp783:
    000007ab: 	movl	-0x4(%rsi), %edi
    000007ae: 	movq	%rsi, %r14
    000007b1: 	jmp	.Ltmp787 # Offset: 1969
.Ltmp844:
    000007b3: 	movq	%r14, 0x68(%rsp)
    000007b8: 	leaq	0x60(%rsp), %r14
    000007bd: 	leaq	0x50(%rsp), %rsi
    000007c2: 	movq	%r14, %rdi
    000007c5: 	movq	%rsi, 0x30(%rsp)
    000007ca: 	movq	%r12, 0x58(%rsp)
    000007cf: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 1999
    000007d4: 	movq	0x30(%rsp), %rsi
    000007d9: 	movq	%r14, %rdi
    000007dc: 	movq	%rbp, 0x58(%rsp)
    000007e1: 	movq	%r12, 0x68(%rsp)
    000007e6: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 2022
.Ltmp782:
    000007eb: 	movq	%r13, %rax
    000007ee: 	subq	%rbp, %rax
    000007f1: 	cmpq	$0x4, %rax
    000007f5: 	jle	.Ltmp713 # Offset: 2037
    000007fb: 	movl	(%rbp), %edi
    000007fe: 	movq	%r13, %r12
    00000801: 	movq	%rbp, %rdx
    00000804: 	nopl	(%rax) # Size: 4
.Ltmp792:
    00000808: 	movl	-0x4(%r12), %r8d
    0000080d: 	leaq	-0x4(%r12), %rsi
    00000812: 	cmpl	%r8d, %edi
    00000815: 	jl	.Ltmp788 # Offset: 2069
    00000817: 	cmpq	%rdx, %rsi
    0000081a: 	jbe	.Ltmp789 # Offset: 2074
    00000820: 	movl	(%rdx), %ecx
    00000822: 	cmpl	%edi, %ecx
    00000824: 	jge	.Ltmp790 # Offset: 2084
    00000826: 	leaq	0x4(%rdx), %rax
    0000082a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp791:
    00000830: 	movq	%rax, %rdx
    00000833: 	movl	(%rax), %ecx
    00000835: 	leaq	0x4(%rax), %rax
    00000839: 	cmpl	%ecx, %edi
    0000083b: 	jg	.Ltmp791 # Offset: 2107
    0000083d: 	cmpq	%rdx, %rsi
    00000840: 	jbe	.Ltmp789 # Offset: 2112
.Ltmp790:
    00000846: 	movl	%ecx, (%rsi)
    00000848: 	movl	%r8d, (%rdx)
.Ltmp788:
    0000084b: 	movq	%rsi, %r12
    0000084e: 	jmp	.Ltmp792 # Offset: 2126
.Ltmp737:
    00000850: 	movq	%r14, %rdx
    00000853: 	subq	%rbp, %rdx
    00000856: 	cmpq	$0x4, %rdx
    0000085a: 	jle	.Ltmp793 # Offset: 2138
    00000860: 	movl	(%rbp), %r9d
    00000864: 	movq	%r14, %r8
    00000867: 	movq	%rbp, %rsi
    0000086a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp798:
    00000870: 	leaq	-0x4(%r8), %rdi
    00000874: 	cmpl	%eax, %r9d
    00000877: 	jl	.Ltmp794 # Offset: 2167
    00000879: 	cmpq	%rsi, %rdi
    0000087c: 	jbe	.Ltmp795 # Offset: 2172
    00000882: 	movl	(%rsi), %ecx
    00000884: 	cmpl	%ecx, %r9d
    00000887: 	jle	.Ltmp796 # Offset: 2183
    00000889: 	leaq	0x4(%rsi), %rdx
    0000088d: 	nopl	(%rax) # Size: 3
.Ltmp797:
    00000890: 	movq	%rdx, %rsi
    00000893: 	movl	(%rdx), %ecx
    00000895: 	leaq	0x4(%rdx), %rdx
    00000899: 	cmpl	%ecx, %r9d
    0000089c: 	jg	.Ltmp797 # Offset: 2204
    0000089e: 	cmpq	%rsi, %rdi
    000008a1: 	jbe	.Ltmp795 # Offset: 2209
.Ltmp796:
    000008a7: 	movl	%ecx, (%rdi)
    000008a9: 	movl	%eax, (%rsi)
.Ltmp794:
    000008ab: 	movl	-0x4(%rdi), %eax
    000008ae: 	movq	%rdi, %r8
    000008b1: 	jmp	.Ltmp798 # Offset: 2225
.Ltmp822:
    000008b3: 	leaq	0x50(%rsp), %rsi
    000008b8: 	leaq	0x60(%rsp), %rdi
    000008bd: 	movq	%rbp, 0x58(%rsp)
    000008c2: 	movq	%rsi, 0x38(%rsp)
    000008c7: 	movq	%rdi, 0x30(%rsp)
    000008cc: 	movq	%r8, 0x68(%rsp)
    000008d1: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 2257
    000008d6: 	movq	0x38(%rsp), %rsi
    000008db: 	movq	0x30(%rsp), %rdi
    000008e0: 	movq	%r14, 0x58(%rsp)
    000008e5: 	movq	%rbp, 0x68(%rsp)
    000008ea: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 2282
.Ltmp793:
    000008ef: 	movq	%r12, %rax
    000008f2: 	subq	%r14, %rax
    000008f5: 	cmpq	$0x4, %rax
    000008f9: 	jle	.Ltmp735 # Offset: 2297
    000008ff: 	movl	(%r14), %edi
    00000902: 	movq	%r12, %rbp
    00000905: 	movq	%r14, %rdx
    00000908: 	nopl	(%rax,%rax) # Size: 8
.Ltmp803:
    00000910: 	movl	-0x4(%rbp), %r8d
    00000914: 	leaq	-0x4(%rbp), %rsi
    00000918: 	cmpl	%r8d, %edi
    0000091b: 	jl	.Ltmp799 # Offset: 2331
    0000091d: 	cmpq	%rdx, %rsi
    00000920: 	jbe	.Ltmp800 # Offset: 2336
    00000922: 	movl	(%rdx), %ecx
    00000924: 	cmpl	%ecx, %edi
    00000926: 	jle	.Ltmp801 # Offset: 2342
    00000928: 	leaq	0x4(%rdx), %rax
    0000092c: 	nopl	(%rax) # Size: 4
.Ltmp802:
    00000930: 	movq	%rax, %rdx
    00000933: 	movl	(%rax), %ecx
    00000935: 	leaq	0x4(%rax), %rax
    00000939: 	cmpl	%ecx, %edi
    0000093b: 	jg	.Ltmp802 # Offset: 2363
    0000093d: 	cmpq	%rdx, %rsi
    00000940: 	jbe	.Ltmp800 # Offset: 2368
.Ltmp801:
    00000942: 	movl	%ecx, (%rsi)
    00000944: 	movl	%r8d, (%rdx)
.Ltmp799:
    00000947: 	movq	%rsi, %rbp
    0000094a: 	jmp	.Ltmp803 # Offset: 2378
.Ltmp800:
    0000094c: 	movq	%rbp, %rax
    0000094f: 	subq	%r14, %rax
    00000952: 	cmpq	$0x4, %rax
    00000956: 	jle	.Ltmp804 # Offset: 2390
    0000095c: 	movl	(%r14), %edi
    0000095f: 	movq	%rbp, %r8
    00000962: 	movq	%r14, %rdx
    00000965: 	nopl	(%rax) # Size: 3
.Ltmp809:
    00000968: 	movl	-0x4(%r8), %r9d
    0000096c: 	leaq	-0x4(%r8), %rsi
    00000970: 	cmpl	%r9d, %edi
    00000973: 	jl	.Ltmp805 # Offset: 2419
    00000975: 	cmpq	%rdx, %rsi
    00000978: 	jbe	.Ltmp806 # Offset: 2424
    0000097a: 	movl	(%rdx), %ecx
    0000097c: 	cmpl	%edi, %ecx
    0000097e: 	jge	.Ltmp807 # Offset: 2430
    00000980: 	leaq	0x4(%rdx), %rax
    00000984: 	nopl	(%rax) # Size: 4
.Ltmp808:
    00000988: 	movq	%rax, %rdx
    0000098b: 	movl	(%rax), %ecx
    0000098d: 	leaq	0x4(%rax), %rax
    00000991: 	cmpl	%ecx, %edi
    00000993: 	jg	.Ltmp808 # Offset: 2451
    00000995: 	cmpq	%rdx, %rsi
    00000998: 	jbe	.Ltmp806 # Offset: 2456
.Ltmp807:
    0000099a: 	movl	%ecx, (%rsi)
    0000099c: 	movl	%r9d, (%rdx)
.Ltmp805:
    0000099f: 	movq	%rsi, %r8
    000009a2: 	jmp	.Ltmp809 # Offset: 2466
.Ltmp806:
    000009a4: 	movq	%r14, 0x68(%rsp)
    000009a9: 	leaq	0x60(%rsp), %r14
    000009ae: 	leaq	0x50(%rsp), %rsi
    000009b3: 	movq	%r14, %rdi
    000009b6: 	movq	%r8, 0x58(%rsp)
    000009bb: 	movq	%r8, 0x38(%rsp)
    000009c0: 	movq	%rsi, 0x30(%rsp)
    000009c5: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 2501
    000009ca: 	movq	0x38(%rsp), %r8
    000009cf: 	movq	0x30(%rsp), %rsi
    000009d4: 	movq	%r14, %rdi
    000009d7: 	movq	%rbp, 0x58(%rsp)
    000009dc: 	movq	%r8, 0x68(%rsp)
    000009e1: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 2529
.Ltmp804:
    000009e6: 	movq	%r12, %rax
    000009e9: 	subq	%rbp, %rax
    000009ec: 	cmpq	$0x4, %rax
    000009f0: 	jle	.Ltmp735 # Offset: 2544
    000009f6: 	movl	(%rbp), %edi
    000009f9: 	movq	%r12, %r14
    000009fc: 	movq	%rbp, %rdx
    000009ff: 	nop # Size: 1
.Ltmp814:
    00000a00: 	movl	-0x4(%r14), %r8d
    00000a04: 	leaq	-0x4(%r14), %rsi
    00000a08: 	cmpl	%r8d, %edi
    00000a0b: 	jl	.Ltmp810 # Offset: 2571
    00000a0d: 	cmpq	%rdx, %rsi
    00000a10: 	jbe	.Ltmp811 # Offset: 2576
    00000a16: 	movl	(%rdx), %ecx
    00000a18: 	cmpl	%ecx, %edi
    00000a1a: 	jle	.Ltmp812 # Offset: 2586
    00000a1c: 	leaq	0x4(%rdx), %rax
.Ltmp813:
    00000a20: 	movq	%rax, %rdx
    00000a23: 	movl	(%rax), %ecx
    00000a25: 	leaq	0x4(%rax), %rax
    00000a29: 	cmpl	%ecx, %edi
    00000a2b: 	jg	.Ltmp813 # Offset: 2603
    00000a2d: 	cmpq	%rdx, %rsi
    00000a30: 	jbe	.Ltmp811 # Offset: 2608
.Ltmp812:
    00000a36: 	movl	%ecx, (%rsi)
    00000a38: 	movl	%r8d, (%rdx)
.Ltmp810:
    00000a3b: 	movq	%rsi, %r14
    00000a3e: 	jmp	.Ltmp814 # Offset: 2622
.Ltmp795:
    00000a40: 	movq	%r8, %rax
    00000a43: 	subq	%rbp, %rax
    00000a46: 	cmpq	$0x4, %rax
    00000a4a: 	jle	.Ltmp815 # Offset: 2634
    00000a50: 	movl	(%rbp), %edi
    00000a53: 	movq	%r8, %r9
    00000a56: 	movq	%rbp, %rdx
    00000a59: 	nopl	(%rax) # Size: 7
.Ltmp820:
    00000a60: 	movl	-0x4(%r9), %r10d
    00000a64: 	leaq	-0x4(%r9), %rsi
    00000a68: 	cmpl	%r10d, %edi
    00000a6b: 	jl	.Ltmp816 # Offset: 2667
    00000a6d: 	cmpq	%rdx, %rsi
    00000a70: 	jbe	.Ltmp817 # Offset: 2672
    00000a72: 	movl	(%rdx), %ecx
    00000a74: 	cmpl	%ecx, %edi
    00000a76: 	jle	.Ltmp818 # Offset: 2678
    00000a78: 	leaq	0x4(%rdx), %rax
    00000a7c: 	nopl	(%rax) # Size: 4
.Ltmp819:
    00000a80: 	movq	%rax, %rdx
    00000a83: 	movl	(%rax), %ecx
    00000a85: 	leaq	0x4(%rax), %rax
    00000a89: 	cmpl	%ecx, %edi
    00000a8b: 	jg	.Ltmp819 # Offset: 2699
    00000a8d: 	cmpq	%rdx, %rsi
    00000a90: 	jbe	.Ltmp817 # Offset: 2704
.Ltmp818:
    00000a92: 	movl	%ecx, (%rsi)
    00000a94: 	movl	%r10d, (%rdx)
.Ltmp816:
    00000a97: 	movq	%rsi, %r9
    00000a9a: 	jmp	.Ltmp820 # Offset: 2714
.Ltmp817:
    00000a9c: 	movq	%rbp, 0x68(%rsp)
    00000aa1: 	leaq	0x60(%rsp), %rbp
    00000aa6: 	leaq	0x50(%rsp), %rsi
    00000aab: 	movq	%rbp, %rdi
    00000aae: 	movq	%r8, 0x30(%rsp)
    00000ab3: 	movq	%r9, 0x58(%rsp)
    00000ab8: 	movq	%r9, 0x40(%rsp)
    00000abd: 	movq	%rsi, 0x38(%rsp)
    00000ac2: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 2754
    00000ac7: 	movq	0x30(%rsp), %r8
    00000acc: 	movq	0x40(%rsp), %r9
    00000ad1: 	movq	%rbp, %rdi
    00000ad4: 	movq	0x38(%rsp), %rsi
    00000ad9: 	movq	%r8, 0x58(%rsp)
    00000ade: 	movq	%r9, 0x68(%rsp)
    00000ae3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 2787
    00000ae8: 	movq	0x30(%rsp), %r8
.Ltmp815:
    00000aed: 	movq	%r14, %rax
    00000af0: 	subq	%r8, %rax
    00000af3: 	cmpq	$0x4, %rax
    00000af7: 	jle	.Ltmp793 # Offset: 2807
    00000afd: 	movl	(%r8), %edi
    00000b00: 	movq	%r14, %rbp
    00000b03: 	movq	%r8, %rdx
    00000b06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp825:
    00000b10: 	movl	-0x4(%rbp), %r9d
    00000b14: 	leaq	-0x4(%rbp), %rsi
    00000b18: 	cmpl	%r9d, %edi
    00000b1b: 	jl	.Ltmp821 # Offset: 2843
    00000b1d: 	cmpq	%rdx, %rsi
    00000b20: 	jbe	.Ltmp822 # Offset: 2848
    00000b26: 	movl	(%rdx), %ecx
    00000b28: 	cmpl	%edi, %ecx
    00000b2a: 	jge	.Ltmp823 # Offset: 2858
    00000b2c: 	leaq	0x4(%rdx), %rax
.Ltmp824:
    00000b30: 	movq	%rax, %rdx
    00000b33: 	movl	(%rax), %ecx
    00000b35: 	leaq	0x4(%rax), %rax
    00000b39: 	cmpl	%ecx, %edi
    00000b3b: 	jg	.Ltmp824 # Offset: 2875
    00000b3d: 	cmpq	%rdx, %rsi
    00000b40: 	jbe	.Ltmp822 # Offset: 2880
.Ltmp823:
    00000b46: 	movl	%ecx, (%rsi)
    00000b48: 	movl	%r9d, (%rdx)
.Ltmp821:
    00000b4b: 	movq	%rsi, %rbp
    00000b4e: 	jmp	.Ltmp825 # Offset: 2894
.Ltmp789:
    00000b50: 	movq	%r12, %rax
    00000b53: 	subq	%rbp, %rax
    00000b56: 	cmpq	$0x4, %rax
    00000b5a: 	jle	.Ltmp826 # Offset: 2906
    00000b60: 	movl	(%rbp), %edi
    00000b63: 	movq	%r12, %r14
    00000b66: 	movq	%rbp, %rdx
    00000b69: 	nopl	(%rax) # Size: 7
.Ltmp831:
    00000b70: 	movl	-0x4(%r14), %r8d
    00000b74: 	leaq	-0x4(%r14), %rsi
    00000b78: 	cmpl	%r8d, %edi
    00000b7b: 	jl	.Ltmp827 # Offset: 2939
    00000b7d: 	cmpq	%rdx, %rsi
    00000b80: 	jbe	.Ltmp828 # Offset: 2944
    00000b82: 	movl	(%rdx), %ecx
    00000b84: 	cmpl	%edi, %ecx
    00000b86: 	jge	.Ltmp829 # Offset: 2950
    00000b88: 	leaq	0x4(%rdx), %rax
    00000b8c: 	nopl	(%rax) # Size: 4
.Ltmp830:
    00000b90: 	movq	%rax, %rdx
    00000b93: 	movl	(%rax), %ecx
    00000b95: 	leaq	0x4(%rax), %rax
    00000b99: 	cmpl	%ecx, %edi
    00000b9b: 	jg	.Ltmp830 # Offset: 2971
    00000b9d: 	cmpq	%rdx, %rsi
    00000ba0: 	jbe	.Ltmp828 # Offset: 2976
.Ltmp829:
    00000ba2: 	movl	%ecx, (%rsi)
    00000ba4: 	movl	%r8d, (%rdx)
.Ltmp827:
    00000ba7: 	movq	%rsi, %r14
    00000baa: 	jmp	.Ltmp831 # Offset: 2986
.Ltmp828:
    00000bac: 	movq	%rbp, 0x68(%rsp)
    00000bb1: 	leaq	0x60(%rsp), %rbp
    00000bb6: 	leaq	0x50(%rsp), %rsi
    00000bbb: 	movq	%rbp, %rdi
    00000bbe: 	movq	%rsi, 0x30(%rsp)
    00000bc3: 	movq	%r14, 0x58(%rsp)
    00000bc8: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 3016
    00000bcd: 	movq	0x30(%rsp), %rsi
    00000bd2: 	movq	%rbp, %rdi
    00000bd5: 	movq	%r12, 0x58(%rsp)
    00000bda: 	movq	%r14, 0x68(%rsp)
    00000bdf: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 3039
.Ltmp826:
    00000be4: 	movq	%r13, %rax
    00000be7: 	subq	%r12, %rax
    00000bea: 	cmpq	$0x4, %rax
    00000bee: 	jle	.Ltmp713 # Offset: 3054
    00000bf4: 	movl	(%r12), %edi
    00000bf8: 	movq	%r13, %rbp
    00000bfb: 	movq	%r12, %rdx
    00000bfe: 	nop # Size: 2
.Ltmp836:
    00000c00: 	movl	-0x4(%rbp), %r8d
    00000c04: 	leaq	-0x4(%rbp), %rsi
    00000c08: 	cmpl	%r8d, %edi
    00000c0b: 	jl	.Ltmp832 # Offset: 3083
    00000c0d: 	cmpq	%rdx, %rsi
    00000c10: 	jbe	.Ltmp833 # Offset: 3088
    00000c16: 	movl	(%rdx), %ecx
    00000c18: 	cmpl	%edi, %ecx
    00000c1a: 	jge	.Ltmp834 # Offset: 3098
    00000c1c: 	leaq	0x4(%rdx), %rax
.Ltmp835:
    00000c20: 	movq	%rax, %rdx
    00000c23: 	movl	(%rax), %ecx
    00000c25: 	leaq	0x4(%rax), %rax
    00000c29: 	cmpl	%ecx, %edi
    00000c2b: 	jg	.Ltmp835 # Offset: 3115
    00000c2d: 	cmpq	%rdx, %rsi
    00000c30: 	jbe	.Ltmp833 # Offset: 3120
.Ltmp834:
    00000c36: 	movl	%ecx, (%rsi)
    00000c38: 	movl	%r8d, (%rdx)
.Ltmp832:
    00000c3b: 	movq	%rsi, %rbp
    00000c3e: 	jmp	.Ltmp836 # Offset: 3134
.Ltmp784:
    00000c40: 	movq	%r14, %rax
    00000c43: 	subq	%r12, %rax
    00000c46: 	cmpq	$0x4, %rax
    00000c4a: 	jle	.Ltmp837 # Offset: 3146
    00000c50: 	movl	(%r12), %esi
    00000c54: 	movq	%r14, %r8
    00000c57: 	movq	%r12, %rax
    00000c5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp842:
    00000c60: 	movl	-0x4(%r8), %edi
    00000c64: 	leaq	-0x4(%r8), %rcx
    00000c68: 	cmpl	%edi, %esi
    00000c6a: 	jl	.Ltmp838 # Offset: 3178
    00000c6c: 	cmpq	%rax, %rcx
    00000c6f: 	jbe	.Ltmp839 # Offset: 3183
    00000c71: 	movl	(%rax), %edx
    00000c73: 	cmpl	%edx, %esi
    00000c75: 	jle	.Ltmp840 # Offset: 3189
    00000c77: 	nopw	(%rax,%rax) # Size: 9
.Ltmp841:
    00000c80: 	movl	0x4(%rax), %edx
    00000c83: 	addq	$0x4, %rax
    00000c87: 	cmpl	%edx, %esi
    00000c89: 	jg	.Ltmp841 # Offset: 3209
    00000c8b: 	cmpq	%rax, %rcx
    00000c8e: 	jbe	.Ltmp839 # Offset: 3214
.Ltmp840:
    00000c90: 	movl	%edx, (%rcx)
    00000c92: 	movl	%edi, (%rax)
.Ltmp838:
    00000c94: 	movq	%rcx, %r8
    00000c97: 	jmp	.Ltmp842 # Offset: 3223
.Ltmp839:
    00000c99: 	movq	%r12, 0x68(%rsp)
    00000c9e: 	leaq	0x60(%rsp), %r12
    00000ca3: 	leaq	0x50(%rsp), %rsi
    00000ca8: 	movq	%r12, %rdi
    00000cab: 	movq	%r8, 0x58(%rsp)
    00000cb0: 	movq	%r8, 0x38(%rsp)
    00000cb5: 	movq	%rsi, 0x30(%rsp)
    00000cba: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 3258
    00000cbf: 	movq	0x38(%rsp), %r8
    00000cc4: 	movq	0x30(%rsp), %rsi
    00000cc9: 	movq	%r12, %rdi
    00000ccc: 	movq	%r14, 0x58(%rsp)
    00000cd1: 	movq	%r8, 0x68(%rsp)
    00000cd6: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 3286
.Ltmp837:
    00000cdb: 	movq	%rbp, %rax
    00000cde: 	subq	%r14, %rax
    00000ce1: 	cmpq	$0x4, %rax
    00000ce5: 	jle	.Ltmp782 # Offset: 3301
    00000ceb: 	movl	(%r14), %edi
    00000cee: 	movq	%rbp, %r12
    00000cf1: 	movq	%r14, %rdx
    00000cf4: 	nopl	(%rax) # Size: 4
.Ltmp847:
    00000cf8: 	movl	-0x4(%r12), %r8d
    00000cfd: 	leaq	-0x4(%r12), %rsi
    00000d02: 	cmpl	%r8d, %edi
    00000d05: 	jl	.Ltmp843 # Offset: 3333
    00000d07: 	cmpq	%rdx, %rsi
    00000d0a: 	jbe	.Ltmp844 # Offset: 3338
    00000d10: 	movl	(%rdx), %ecx
    00000d12: 	cmpl	%edi, %ecx
    00000d14: 	jge	.Ltmp845 # Offset: 3348
    00000d16: 	leaq	0x4(%rdx), %rax
    00000d1a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp846:
    00000d20: 	movq	%rax, %rdx
    00000d23: 	movl	(%rax), %ecx
    00000d25: 	leaq	0x4(%rax), %rax
    00000d29: 	cmpl	%ecx, %edi
    00000d2b: 	jg	.Ltmp846 # Offset: 3371
    00000d2d: 	cmpq	%rdx, %rsi
    00000d30: 	jbe	.Ltmp844 # Offset: 3376
.Ltmp845:
    00000d36: 	movl	%ecx, (%rsi)
    00000d38: 	movl	%r8d, (%rdx)
.Ltmp843:
    00000d3b: 	movq	%rsi, %r12
    00000d3e: 	jmp	.Ltmp847 # Offset: 3390
.Ltmp778:
    00000d40: 	movq	%r8, %rax
    00000d43: 	subq	%r14, %rax
    00000d46: 	cmpq	$0x4, %rax
    00000d4a: 	jle	.Ltmp848 # Offset: 3402
    00000d50: 	movl	(%r14), %edi
    00000d53: 	movq	%r8, %r9
    00000d56: 	movq	%r14, %rdx
    00000d59: 	nopl	(%rax) # Size: 7
.Ltmp853:
    00000d60: 	movl	-0x4(%r9), %r10d
    00000d64: 	leaq	-0x4(%r9), %rsi
    00000d68: 	cmpl	%r10d, %edi
    00000d6b: 	jl	.Ltmp849 # Offset: 3435
    00000d6d: 	cmpq	%rdx, %rsi
    00000d70: 	jbe	.Ltmp850 # Offset: 3440
    00000d72: 	movl	(%rdx), %ecx
    00000d74: 	cmpl	%ecx, %edi
    00000d76: 	jle	.Ltmp851 # Offset: 3446
    00000d78: 	leaq	0x4(%rdx), %rax
    00000d7c: 	nopl	(%rax) # Size: 4
.Ltmp852:
    00000d80: 	movq	%rax, %rdx
    00000d83: 	movl	(%rax), %ecx
    00000d85: 	leaq	0x4(%rax), %rax
    00000d89: 	cmpl	%ecx, %edi
    00000d8b: 	jg	.Ltmp852 # Offset: 3467
    00000d8d: 	cmpq	%rdx, %rsi
    00000d90: 	jbe	.Ltmp850 # Offset: 3472
.Ltmp851:
    00000d92: 	movl	%ecx, (%rsi)
    00000d94: 	movl	%r10d, (%rdx)
.Ltmp849:
    00000d97: 	movq	%rsi, %r9
    00000d9a: 	jmp	.Ltmp853 # Offset: 3482
.Ltmp850:
    00000d9c: 	movq	%r14, 0x68(%rsp)
    00000da1: 	leaq	0x60(%rsp), %r14
    00000da6: 	leaq	0x50(%rsp), %rsi
    00000dab: 	movq	%r14, %rdi
    00000dae: 	movq	%r8, 0x30(%rsp)
    00000db3: 	movq	%r9, 0x58(%rsp)
    00000db8: 	movq	%r9, 0x40(%rsp)
    00000dbd: 	movq	%rsi, 0x38(%rsp)
    00000dc2: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 3522
    00000dc7: 	movq	0x30(%rsp), %r8
    00000dcc: 	movq	0x40(%rsp), %r9
    00000dd1: 	movq	%r14, %rdi
    00000dd4: 	movq	0x38(%rsp), %rsi
    00000dd9: 	movq	%r8, 0x58(%rsp)
    00000dde: 	movq	%r9, 0x68(%rsp)
    00000de3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 3555
    00000de8: 	movq	0x30(%rsp), %r8
.Ltmp848:
    00000ded: 	movq	%r12, %rax
    00000df0: 	subq	%r8, %rax
    00000df3: 	cmpq	$0x4, %rax
    00000df7: 	jle	.Ltmp746 # Offset: 3575
    00000dfd: 	movl	(%r8), %edi
    00000e00: 	movq	%r12, %r14
    00000e03: 	movq	%r8, %rdx
    00000e06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp858:
    00000e10: 	movl	-0x4(%r14), %r9d
    00000e14: 	leaq	-0x4(%r14), %rsi
    00000e18: 	cmpl	%r9d, %edi
    00000e1b: 	jl	.Ltmp854 # Offset: 3611
    00000e1d: 	cmpq	%rdx, %rsi
    00000e20: 	jbe	.Ltmp855 # Offset: 3616
    00000e26: 	movl	(%rdx), %ecx
    00000e28: 	cmpl	%ecx, %edi
    00000e2a: 	jle	.Ltmp856 # Offset: 3626
    00000e2c: 	leaq	0x4(%rdx), %rax
.Ltmp857:
    00000e30: 	movq	%rax, %rdx
    00000e33: 	movl	(%rax), %ecx
    00000e35: 	leaq	0x4(%rax), %rax
    00000e39: 	cmpl	%ecx, %edi
    00000e3b: 	jg	.Ltmp857 # Offset: 3643
    00000e3d: 	cmpq	%rdx, %rsi
    00000e40: 	jbe	.Ltmp855 # Offset: 3648
.Ltmp856:
    00000e46: 	movl	%ecx, (%rsi)
    00000e48: 	movl	%r9d, (%rdx)
.Ltmp854:
    00000e4b: 	movq	%rsi, %r14
    00000e4e: 	jmp	.Ltmp858 # Offset: 3662
.Ltmp765:
    00000e50: 	movq	%r12, %rax
    00000e53: 	subq	%r14, %rax
    00000e56: 	cmpq	$0x4, %rax
    00000e5a: 	jle	.Ltmp859 # Offset: 3674
    00000e60: 	movl	(%r14), %edi
    00000e63: 	movq	%r12, %r8
    00000e66: 	movq	%r14, %rdx
    00000e69: 	nopl	(%rax) # Size: 7
.Ltmp864:
    00000e70: 	movl	-0x4(%r8), %r9d
    00000e74: 	leaq	-0x4(%r8), %rsi
    00000e78: 	cmpl	%r9d, %edi
    00000e7b: 	jl	.Ltmp860 # Offset: 3707
    00000e7d: 	cmpq	%rdx, %rsi
    00000e80: 	jbe	.Ltmp861 # Offset: 3712
    00000e82: 	movl	(%rdx), %ecx
    00000e84: 	cmpl	%ecx, %edi
    00000e86: 	jle	.Ltmp862 # Offset: 3718
    00000e88: 	leaq	0x4(%rdx), %rax
    00000e8c: 	nopl	(%rax) # Size: 4
.Ltmp863:
    00000e90: 	movq	%rax, %rdx
    00000e93: 	movl	(%rax), %ecx
    00000e95: 	leaq	0x4(%rax), %rax
    00000e99: 	cmpl	%ecx, %edi
    00000e9b: 	jg	.Ltmp863 # Offset: 3739
    00000e9d: 	cmpq	%rdx, %rsi
    00000ea0: 	jbe	.Ltmp861 # Offset: 3744
.Ltmp862:
    00000ea2: 	movl	%ecx, (%rsi)
    00000ea4: 	movl	%r9d, (%rdx)
.Ltmp860:
    00000ea7: 	movq	%rsi, %r8
    00000eaa: 	jmp	.Ltmp864 # Offset: 3754
.Ltmp861:
    00000eac: 	movq	%r14, 0x68(%rsp)
    00000eb1: 	leaq	0x60(%rsp), %r14
    00000eb6: 	leaq	0x50(%rsp), %rsi
    00000ebb: 	movq	%r14, %rdi
    00000ebe: 	movq	%r8, 0x58(%rsp)
    00000ec3: 	movq	%r8, 0x38(%rsp)
    00000ec8: 	movq	%rsi, 0x30(%rsp)
    00000ecd: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 3789
    00000ed2: 	movq	0x38(%rsp), %r8
    00000ed7: 	movq	0x30(%rsp), %rsi
    00000edc: 	movq	%r14, %rdi
    00000edf: 	movq	%r12, 0x58(%rsp)
    00000ee4: 	movq	%r8, 0x68(%rsp)
    00000ee9: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 3817
.Ltmp859:
    00000eee: 	movq	%rbp, %rax
    00000ef1: 	subq	%r12, %rax
    00000ef4: 	cmpq	$0x4, %rax
    00000ef8: 	jle	.Ltmp724 # Offset: 3832
    00000efe: 	movl	(%r12), %edi
    00000f02: 	movq	%rbp, %r14
    00000f05: 	movq	%r12, %rdx
    00000f08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp869:
    00000f10: 	movl	-0x4(%r14), %r8d
    00000f14: 	leaq	-0x4(%r14), %rsi
    00000f18: 	cmpl	%r8d, %edi
    00000f1b: 	jl	.Ltmp865 # Offset: 3867
    00000f1d: 	cmpq	%rdx, %rsi
    00000f20: 	jbe	.Ltmp866 # Offset: 3872
    00000f26: 	movl	(%rdx), %ecx
    00000f28: 	cmpl	%edi, %ecx
    00000f2a: 	jge	.Ltmp867 # Offset: 3882
    00000f2c: 	leaq	0x4(%rdx), %rax
.Ltmp868:
    00000f30: 	movq	%rax, %rdx
    00000f33: 	movl	(%rax), %ecx
    00000f35: 	leaq	0x4(%rax), %rax
    00000f39: 	cmpl	%ecx, %edi
    00000f3b: 	jg	.Ltmp868 # Offset: 3899
    00000f3d: 	cmpq	%rdx, %rsi
    00000f40: 	jbe	.Ltmp866 # Offset: 3904
.Ltmp867:
    00000f46: 	movl	%ecx, (%rsi)
    00000f48: 	movl	%r8d, (%rdx)
.Ltmp865:
    00000f4b: 	movq	%rsi, %r14
    00000f4e: 	jmp	.Ltmp869 # Offset: 3918
.Ltmp760:
    00000f50: 	movq	%r8, %rax
    00000f53: 	subq	%r12, %rax
    00000f56: 	cmpq	$0x4, %rax
    00000f5a: 	jle	.Ltmp870 # Offset: 3930
    00000f60: 	movl	(%r12), %edi
    00000f64: 	movq	%r8, %r9
    00000f67: 	movq	%r12, %rdx
    00000f6a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp875:
    00000f70: 	movl	-0x4(%r9), %r10d
    00000f74: 	leaq	-0x4(%r9), %rsi
    00000f78: 	cmpl	%r10d, %edi
    00000f7b: 	jl	.Ltmp871 # Offset: 3963
    00000f7d: 	cmpq	%rdx, %rsi
    00000f80: 	jbe	.Ltmp872 # Offset: 3968
    00000f82: 	movl	(%rdx), %ecx
    00000f84: 	cmpl	%edi, %ecx
    00000f86: 	jge	.Ltmp873 # Offset: 3974
    00000f88: 	leaq	0x4(%rdx), %rax
    00000f8c: 	nopl	(%rax) # Size: 4
.Ltmp874:
    00000f90: 	movq	%rax, %rdx
    00000f93: 	movl	(%rax), %ecx
    00000f95: 	leaq	0x4(%rax), %rax
    00000f99: 	cmpl	%ecx, %edi
    00000f9b: 	jg	.Ltmp874 # Offset: 3995
    00000f9d: 	cmpq	%rdx, %rsi
    00000fa0: 	jbe	.Ltmp872 # Offset: 4000
.Ltmp873:
    00000fa2: 	movl	%ecx, (%rsi)
    00000fa4: 	movl	%r10d, (%rdx)
.Ltmp871:
    00000fa7: 	movq	%rsi, %r9
    00000faa: 	jmp	.Ltmp875 # Offset: 4010
.Ltmp872:
    00000fac: 	movq	%r12, 0x68(%rsp)
    00000fb1: 	leaq	0x60(%rsp), %r12
    00000fb6: 	leaq	0x50(%rsp), %rsi
    00000fbb: 	movq	%r12, %rdi
    00000fbe: 	movq	%r8, 0x30(%rsp)
    00000fc3: 	movq	%r9, 0x58(%rsp)
    00000fc8: 	movq	%r9, 0x40(%rsp)
    00000fcd: 	movq	%rsi, 0x38(%rsp)
    00000fd2: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 4050
    00000fd7: 	movq	0x30(%rsp), %r8
    00000fdc: 	movq	0x40(%rsp), %r9
    00000fe1: 	movq	%r12, %rdi
    00000fe4: 	movq	0x38(%rsp), %rsi
    00000fe9: 	movq	%r8, 0x58(%rsp)
    00000fee: 	movq	%r9, 0x68(%rsp)
    00000ff3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 4083
    00000ff8: 	movq	0x30(%rsp), %r8
.Ltmp870:
    00000ffd: 	movq	%r14, %rax
    00001000: 	subq	%r8, %rax
    00001003: 	cmpq	$0x4, %rax
    00001007: 	jle	.Ltmp758 # Offset: 4103
    0000100d: 	movl	(%r8), %edi
    00001010: 	movq	%r14, %r12
    00001013: 	movq	%r8, %rdx
    00001016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp880:
    00001020: 	movl	-0x4(%r12), %r9d
    00001025: 	leaq	-0x4(%r12), %rsi
    0000102a: 	cmpl	%r9d, %edi
    0000102d: 	jl	.Ltmp876 # Offset: 4141
    0000102f: 	cmpq	%rdx, %rsi
    00001032: 	jbe	.Ltmp877 # Offset: 4146
    00001038: 	movl	(%rdx), %ecx
    0000103a: 	cmpl	%ecx, %edi
    0000103c: 	jle	.Ltmp878 # Offset: 4156
    0000103e: 	leaq	0x4(%rdx), %rax
    00001042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp879:
    00001048: 	movq	%rax, %rdx
    0000104b: 	movl	(%rax), %ecx
    0000104d: 	leaq	0x4(%rax), %rax
    00001051: 	cmpl	%ecx, %edi
    00001053: 	jg	.Ltmp879 # Offset: 4179
    00001055: 	cmpq	%rdx, %rsi
    00001058: 	jbe	.Ltmp877 # Offset: 4184
.Ltmp878:
    0000105e: 	movl	%ecx, (%rsi)
    00001060: 	movl	%r9d, (%rdx)
.Ltmp876:
    00001063: 	movq	%rsi, %r12
    00001066: 	jmp	.Ltmp880 # Offset: 4198
.Ltmp776:
    00001068: 	movl	(%r8), %esi
    0000106b: 	movq	%r14, %r9
    0000106e: 	movq	%r8, %rax
    00001071: 	nopl	(%rax) # Size: 7
.Ltmp885:
    00001078: 	movl	-0x4(%r9), %edi
    0000107c: 	leaq	-0x4(%r9), %rcx
    00001080: 	cmpl	%edi, %esi
    00001082: 	jl	.Ltmp881 # Offset: 4226
    00001084: 	cmpq	%rax, %rcx
    00001087: 	jbe	.Ltmp882 # Offset: 4231
    0000108d: 	movl	(%rax), %edx
    0000108f: 	cmpl	%edx, %esi
    00001091: 	jle	.Ltmp883 # Offset: 4241
    00001093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp884:
    00001098: 	movl	0x4(%rax), %edx
    0000109b: 	addq	$0x4, %rax
    0000109f: 	cmpl	%edx, %esi
    000010a1: 	jg	.Ltmp884 # Offset: 4257
    000010a3: 	cmpq	%rax, %rcx
    000010a6: 	jbe	.Ltmp882 # Offset: 4262
.Ltmp883:
    000010ac: 	movl	%edx, (%rcx)
    000010ae: 	movl	%edi, (%rax)
.Ltmp881:
    000010b0: 	movq	%rcx, %r9
    000010b3: 	jmp	.Ltmp885 # Offset: 4275
.Ltmp775:
    000010b5: 	movl	(%rbx), %edi
    000010b7: 	movq	%r8, %r9
    000010ba: 	movq	%rbx, %rdx
    000010bd: 	nopl	(%rax) # Size: 3
.Ltmp890:
    000010c0: 	movl	-0x4(%r9), %r10d
    000010c4: 	leaq	-0x4(%r9), %rsi
    000010c8: 	cmpl	%r10d, %edi
    000010cb: 	jl	.Ltmp886 # Offset: 4299
    000010cd: 	cmpq	%rdx, %rsi
    000010d0: 	jbe	.Ltmp887 # Offset: 4304
    000010d2: 	movl	(%rdx), %ecx
    000010d4: 	cmpl	%ecx, %edi
    000010d6: 	jle	.Ltmp888 # Offset: 4310
    000010d8: 	leaq	0x4(%rdx), %rax
    000010dc: 	nopl	(%rax) # Size: 4
.Ltmp889:
    000010e0: 	movq	%rax, %rdx
    000010e3: 	movl	(%rax), %ecx
    000010e5: 	leaq	0x4(%rax), %rax
    000010e9: 	cmpl	%ecx, %edi
    000010eb: 	jg	.Ltmp889 # Offset: 4331
    000010ed: 	cmpq	%rdx, %rsi
    000010f0: 	jbe	.Ltmp887 # Offset: 4336
.Ltmp888:
    000010f2: 	movl	%ecx, (%rsi)
    000010f4: 	movl	%r10d, (%rdx)
.Ltmp886:
    000010f7: 	movq	%rsi, %r9
    000010fa: 	jmp	.Ltmp890 # Offset: 4346
.Ltmp887:
    000010fc: 	leaq	0x50(%rsp), %rsi
    00001101: 	leaq	0x60(%rsp), %rdi
    00001106: 	movq	%r8, 0x30(%rsp)
    0000110b: 	movq	%r9, 0x58(%rsp)
    00001110: 	movq	%r9, 0x48(%rsp)
    00001115: 	movq	%rsi, 0x40(%rsp)
    0000111a: 	movq	%rdi, 0x38(%rsp)
    0000111f: 	movq	%rbx, 0x68(%rsp)
    00001124: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 4388
    00001129: 	movq	0x30(%rsp), %r8
    0000112e: 	movq	0x48(%rsp), %r9
    00001133: 	movq	0x40(%rsp), %rsi
    00001138: 	movq	0x38(%rsp), %rdi
    0000113d: 	movq	%r8, 0x58(%rsp)
    00001142: 	movq	%r9, 0x68(%rsp)
    00001147: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 4423
    0000114c: 	movq	0x30(%rsp), %r8
    00001151: 	movq	%r14, %rax
    00001154: 	subq	%r8, %rax
    00001157: 	cmpq	$0x4, %rax
    0000115b: 	jle	.Ltmp769 # Offset: 4443
    00001161: 	jmp	.Ltmp776 # Offset: 4449
.Ltmp882:
    00001166: 	leaq	0x50(%rsp), %rsi
    0000116b: 	leaq	0x60(%rsp), %rdi
    00001170: 	movq	%r9, 0x58(%rsp)
    00001175: 	movq	%r9, 0x40(%rsp)
    0000117a: 	movq	%rsi, 0x38(%rsp)
    0000117f: 	movq	%rdi, 0x30(%rsp)
    00001184: 	movq	%r8, 0x68(%rsp)
    00001189: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 4489
    0000118e: 	movq	0x40(%rsp), %r9
    00001193: 	movq	0x38(%rsp), %rsi
    00001198: 	movq	%r14, 0x58(%rsp)
    0000119d: 	movq	0x30(%rsp), %rdi
    000011a2: 	movq	%r9, 0x68(%rsp)
    000011a7: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPiEEEEvT_S5_ # Offset: 4519
    000011ac: 	jmp	.Ltmp769 # Offset: 4524
.Ltmp723:
    000011b1: 	callq	__stack_chk_fail@PLT # Offset: 4529
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_quicksortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x7680
  Size        : 0x643
  MaxSize     : 0x650
  Offset      : 0x7680
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x4, %rax
    0000000e: 	jle	.Ltmp891 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movl	(%rdi), %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp896:
    00000030: 	movl	-0x4(%rbp), %edi
    00000033: 	leaq	-0x4(%rbp), %r8
    00000037: 	cmpl	%esi, %edi
    00000039: 	jg	.Ltmp892 # Offset: 57
    0000003b: 	cmpq	%rdx, %r8
    0000003e: 	jbe	.Ltmp893 # Offset: 62
    00000040: 	movl	(%rdx), %ecx
    00000042: 	cmpl	%ecx, %esi
    00000044: 	jle	.Ltmp894 # Offset: 68
    00000046: 	leaq	0x4(%rdx), %rax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp895:
    00000050: 	movq	%rax, %rdx
    00000053: 	movl	(%rax), %ecx
    00000055: 	leaq	0x4(%rax), %rax
    00000059: 	cmpl	%esi, %ecx
    0000005b: 	jl	.Ltmp895 # Offset: 91
    0000005d: 	cmpq	%rdx, %r8
    00000060: 	jbe	.Ltmp893 # Offset: 96
.Ltmp894:
    00000062: 	movl	%ecx, (%r8)
    00000065: 	movl	%edi, (%rdx)
.Ltmp892:
    00000067: 	movq	%r8, %rbp
    0000006a: 	jmp	.Ltmp896 # Offset: 106
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp893:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x4, %rax
    0000007a: 	jle	.Ltmp897 # Offset: 122
    0000007c: 	movl	(%r9), %esi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp902:
    00000088: 	leaq	-0x4(%r13), %r8
    0000008c: 	cmpl	%edi, %esi
    0000008e: 	jl	.Ltmp898 # Offset: 142
    00000090: 	cmpq	%rdx, %r8
    00000093: 	jbe	.Ltmp899 # Offset: 147
    00000095: 	movl	(%rdx), %ecx
    00000097: 	cmpl	%ecx, %esi
    00000099: 	jle	.Ltmp900 # Offset: 153
    0000009b: 	leaq	0x4(%rdx), %rax
    0000009f: 	nop # Size: 1
.Ltmp901:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movl	(%rax), %ecx
    000000a5: 	leaq	0x4(%rax), %rax
    000000a9: 	cmpl	%ecx, %esi
    000000ab: 	jg	.Ltmp901 # Offset: 171
    000000ad: 	cmpq	%rdx, %r8
    000000b0: 	jbe	.Ltmp899 # Offset: 176
.Ltmp900:
    000000b2: 	movl	%ecx, (%r8)
    000000b5: 	movl	%edi, (%rdx)
.Ltmp898:
    000000b7: 	movl	-0x4(%r8), %edi
    000000bb: 	movq	%r8, %r13
    000000be: 	jmp	.Ltmp902 # Offset: 190
.Ltmp899:
    000000c0: 	movq	%r13, %rax
    000000c3: 	subq	%r9, %rax
    000000c6: 	cmpq	$0x4, %rax
    000000ca: 	jg	.Ltmp903 # Offset: 202
.Ltmp939:
    000000d0: 	movq	%rbp, %rax
    000000d3: 	subq	%r13, %rax
    000000d6: 	cmpq	$0x4, %rax
    000000da: 	jg	.Ltmp904 # Offset: 218
.Ltmp897:
    000000e0: 	movq	%r12, %rax
    000000e3: 	subq	%rbp, %rax
    000000e6: 	cmpq	$0x4, %rax
    000000ea: 	jle	.Ltmp905 # Offset: 234
    000000ec: 	movl	(%rbp), %esi
    000000ef: 	movq	%r12, %r13
    000000f2: 	movq	%rbp, %rdx
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp910:
    000000f8: 	movl	-0x4(%r13), %edi
    000000fc: 	leaq	-0x4(%r13), %r8
    00000100: 	cmpl	%edi, %esi
    00000102: 	jl	.Ltmp906 # Offset: 258
    00000104: 	cmpq	%rdx, %r8
    00000107: 	jbe	.Ltmp907 # Offset: 263
    00000109: 	movl	(%rdx), %ecx
    0000010b: 	cmpl	%ecx, %esi
    0000010d: 	jle	.Ltmp908 # Offset: 269
    0000010f: 	leaq	0x4(%rdx), %rax
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp909:
    00000118: 	movq	%rax, %rdx
    0000011b: 	movl	(%rax), %ecx
    0000011d: 	leaq	0x4(%rax), %rax
    00000121: 	cmpl	%ecx, %esi
    00000123: 	jg	.Ltmp909 # Offset: 291
    00000125: 	cmpq	%rdx, %r8
    00000128: 	jbe	.Ltmp907 # Offset: 296
.Ltmp908:
    0000012a: 	movl	%ecx, (%r8)
    0000012d: 	movl	%edi, (%rdx)
.Ltmp906:
    0000012f: 	movq	%r8, %r13
    00000132: 	jmp	.Ltmp910 # Offset: 306
.Ltmp907:
    00000134: 	movq	%r13, %rax
    00000137: 	subq	%rbp, %rax
    0000013a: 	cmpq	$0x4, %rax
    0000013e: 	jg	.Ltmp911 # Offset: 318
.Ltmp962:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%r13, %rax
    00000146: 	cmpq	$0x4, %rax
    0000014a: 	jg	.Ltmp912 # Offset: 330
.Ltmp905:
    0000014c: 	popq	%rbx
    0000014d: 	popq	%rbp
    0000014e: 	popq	%r12
    00000150: 	popq	%r13
    00000152: 	popq	%r14
    00000154: 	retq # Offset: 340
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp891:
    00000158: 	retq # Offset: 344
.Ltmp912:
    00000159: 	movl	(%r13), %esi
    0000015d: 	movq	%r12, %rbp
    00000160: 	movq	%r13, %rdx
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp917:
    00000168: 	movl	-0x4(%rbp), %r8d
    0000016c: 	leaq	-0x4(%rbp), %rdi
    00000170: 	cmpl	%r8d, %esi
    00000173: 	jl	.Ltmp913 # Offset: 371
    00000175: 	cmpq	%rdx, %rdi
    00000178: 	jbe	.Ltmp914 # Offset: 376
    0000017e: 	movl	(%rdx), %ecx
    00000180: 	cmpl	%esi, %ecx
    00000182: 	jge	.Ltmp915 # Offset: 386
    00000184: 	leaq	0x4(%rdx), %rax
    00000188: 	nopl	(%rax,%rax) # Size: 8
.Ltmp916:
    00000190: 	movq	%rax, %rdx
    00000193: 	movl	(%rax), %ecx
    00000195: 	leaq	0x4(%rax), %rax
    00000199: 	cmpl	%ecx, %esi
    0000019b: 	jg	.Ltmp916 # Offset: 411
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	jbe	.Ltmp914 # Offset: 416
.Ltmp915:
    000001a6: 	movl	%ecx, (%rdi)
    000001a8: 	movl	%r8d, (%rdx)
.Ltmp913:
    000001ab: 	movq	%rdi, %rbp
    000001ae: 	jmp	.Ltmp917 # Offset: 430
.Ltmp911:
    000001b0: 	movl	(%rbp), %esi
    000001b3: 	movq	%r13, %rbx
    000001b6: 	movq	%rbp, %rdx
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp922:
    000001c0: 	leaq	-0x4(%rbx), %r8
    000001c4: 	cmpl	%edi, %esi
    000001c6: 	jl	.Ltmp918 # Offset: 454
    000001c8: 	cmpq	%rdx, %r8
    000001cb: 	jbe	.Ltmp919 # Offset: 459
    000001d1: 	movl	(%rdx), %ecx
    000001d3: 	cmpl	%esi, %ecx
    000001d5: 	jge	.Ltmp920 # Offset: 469
    000001d7: 	leaq	0x4(%rdx), %rax
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp921:
    000001e0: 	movq	%rax, %rdx
    000001e3: 	movl	(%rax), %ecx
    000001e5: 	leaq	0x4(%rax), %rax
    000001e9: 	cmpl	%ecx, %esi
    000001eb: 	jg	.Ltmp921 # Offset: 491
    000001ed: 	cmpq	%rdx, %r8
    000001f0: 	jbe	.Ltmp919 # Offset: 496
.Ltmp920:
    000001f6: 	movl	%ecx, (%r8)
    000001f9: 	movl	%edi, (%rdx)
.Ltmp918:
    000001fb: 	movl	-0x4(%r8), %edi
    000001ff: 	movq	%r8, %rbx
    00000202: 	jmp	.Ltmp922 # Offset: 514
.Ltmp904:
    00000204: 	movl	(%r13), %esi
    00000208: 	movq	%rbp, %rbx
    0000020b: 	movq	%r13, %rdx
    0000020e: 	nop # Size: 2
.Ltmp927:
    00000210: 	movl	-0x4(%rbx), %r8d
    00000214: 	leaq	-0x4(%rbx), %rdi
    00000218: 	cmpl	%r8d, %esi
    0000021b: 	jl	.Ltmp923 # Offset: 539
    0000021d: 	cmpq	%rdx, %rdi
    00000220: 	jbe	.Ltmp924 # Offset: 544
    00000226: 	movl	(%rdx), %ecx
    00000228: 	cmpl	%ecx, %esi
    0000022a: 	jle	.Ltmp925 # Offset: 554
    0000022c: 	leaq	0x4(%rdx), %rax
.Ltmp926:
    00000230: 	movq	%rax, %rdx
    00000233: 	movl	(%rax), %ecx
    00000235: 	leaq	0x4(%rax), %rax
    00000239: 	cmpl	%ecx, %esi
    0000023b: 	jg	.Ltmp926 # Offset: 571
    0000023d: 	cmpq	%rdx, %rdi
    00000240: 	jbe	.Ltmp924 # Offset: 576
.Ltmp925:
    00000246: 	movl	%ecx, (%rdi)
    00000248: 	movl	%r8d, (%rdx)
.Ltmp923:
    0000024b: 	movq	%rdi, %rbx
    0000024e: 	jmp	.Ltmp927 # Offset: 590
.Ltmp903:
    00000250: 	movl	(%r9), %esi
    00000253: 	movq	%r13, %rbx
    00000256: 	movq	%r9, %rdx
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp932:
    00000260: 	leaq	-0x4(%rbx), %r8
    00000264: 	cmpl	%edi, %esi
    00000266: 	jl	.Ltmp928 # Offset: 614
    00000268: 	cmpq	%rdx, %r8
    0000026b: 	jbe	.Ltmp929 # Offset: 619
    0000026d: 	movl	(%rdx), %ecx
    0000026f: 	cmpl	%ecx, %esi
    00000271: 	jle	.Ltmp930 # Offset: 625
    00000273: 	leaq	0x4(%rdx), %rax
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp931:
    00000280: 	movq	%rax, %rdx
    00000283: 	movl	(%rax), %ecx
    00000285: 	leaq	0x4(%rax), %rax
    00000289: 	cmpl	%ecx, %esi
    0000028b: 	jg	.Ltmp931 # Offset: 651
    0000028d: 	cmpq	%rdx, %r8
    00000290: 	jbe	.Ltmp929 # Offset: 656
.Ltmp930:
    00000292: 	movl	%ecx, (%r8)
    00000295: 	movl	%edi, (%rdx)
.Ltmp928:
    00000297: 	movl	-0x4(%r8), %edi
    0000029b: 	movq	%r8, %rbx
    0000029e: 	jmp	.Ltmp932 # Offset: 670
.Ltmp929:
    000002a0: 	movq	%rbx, %rax
    000002a3: 	subq	%r9, %rax
    000002a6: 	cmpq	$0x4, %rax
    000002aa: 	jle	.Ltmp933 # Offset: 682
    000002ac: 	movl	(%r9), %esi
    000002af: 	movq	%rbx, %r14
    000002b2: 	movq	%r9, %rdx
    000002b5: 	nopl	(%rax) # Size: 3
.Ltmp938:
    000002b8: 	movl	-0x4(%r14), %r8d
    000002bc: 	leaq	-0x4(%r14), %rdi
    000002c0: 	cmpl	%r8d, %esi
    000002c3: 	jl	.Ltmp934 # Offset: 707
    000002c5: 	cmpq	%rdx, %rdi
    000002c8: 	jbe	.Ltmp935 # Offset: 712
    000002ca: 	movl	(%rdx), %ecx
    000002cc: 	cmpl	%ecx, %esi
    000002ce: 	jle	.Ltmp936 # Offset: 718
    000002d0: 	leaq	0x4(%rdx), %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp937:
    000002d8: 	movq	%rax, %rdx
    000002db: 	movl	(%rax), %ecx
    000002dd: 	leaq	0x4(%rax), %rax
    000002e1: 	cmpl	%ecx, %esi
    000002e3: 	jg	.Ltmp937 # Offset: 739
    000002e5: 	cmpq	%rdx, %rdi
    000002e8: 	jbe	.Ltmp935 # Offset: 744
.Ltmp936:
    000002ea: 	movl	%ecx, (%rdi)
    000002ec: 	movl	%r8d, (%rdx)
.Ltmp934:
    000002ef: 	movq	%rdi, %r14
    000002f2: 	jmp	.Ltmp938 # Offset: 754
.Ltmp935:
    000002f4: 	movq	%r14, %rsi
    000002f7: 	movq	%r9, %rdi
    000002fa: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 762
    000002ff: 	movq	%rbx, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 773
.Ltmp933:
    0000030a: 	movq	%r13, %rax
    0000030d: 	movq	%rbx, %r8
    00000310: 	subq	%rbx, %rax
    00000313: 	cmpq	$0x4, %rax
    00000317: 	jle	.Ltmp939 # Offset: 791
    0000031d: 	movl	(%rbx), %ecx
    0000031f: 	movq	%r13, %r14
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp944:
    00000328: 	movl	-0x4(%r14), %edi
    0000032c: 	leaq	-0x4(%r14), %rsi
    00000330: 	cmpl	%edi, %ecx
    00000332: 	jl	.Ltmp940 # Offset: 818
    00000334: 	cmpq	%rbx, %rsi
    00000337: 	jbe	.Ltmp941 # Offset: 823
    0000033d: 	movl	(%rbx), %edx
    0000033f: 	cmpl	%ecx, %edx
    00000341: 	jge	.Ltmp942 # Offset: 833
    00000343: 	leaq	0x4(%rbx), %rax
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp943:
    00000350: 	movq	%rax, %rbx
    00000353: 	movl	(%rax), %edx
    00000355: 	leaq	0x4(%rax), %rax
    00000359: 	cmpl	%edx, %ecx
    0000035b: 	jg	.Ltmp943 # Offset: 859
    0000035d: 	cmpq	%rbx, %rsi
    00000360: 	jbe	.Ltmp941 # Offset: 864
.Ltmp942:
    00000366: 	movl	%edx, (%rsi)
    00000368: 	movl	%edi, (%rbx)
.Ltmp940:
    0000036a: 	movq	%rsi, %r14
    0000036d: 	jmp	.Ltmp944 # Offset: 877
.Ltmp924:
    0000036f: 	movq	%rbx, %rax
    00000372: 	subq	%r13, %rax
    00000375: 	cmpq	$0x4, %rax
    00000379: 	jle	.Ltmp945 # Offset: 889
    0000037b: 	movl	(%r13), %esi
    0000037f: 	movq	%rbx, %r14
    00000382: 	movq	%r13, %rdx
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp950:
    00000388: 	movl	-0x4(%r14), %r8d
    0000038c: 	leaq	-0x4(%r14), %rdi
    00000390: 	cmpl	%r8d, %esi
    00000393: 	jl	.Ltmp946 # Offset: 915
    00000395: 	cmpq	%rdx, %rdi
    00000398: 	jbe	.Ltmp947 # Offset: 920
    0000039a: 	movl	(%rdx), %ecx
    0000039c: 	cmpl	%esi, %ecx
    0000039e: 	jge	.Ltmp948 # Offset: 926
    000003a0: 	leaq	0x4(%rdx), %rax
    000003a4: 	nopl	(%rax) # Size: 4
.Ltmp949:
    000003a8: 	movq	%rax, %rdx
    000003ab: 	movl	(%rax), %ecx
    000003ad: 	leaq	0x4(%rax), %rax
    000003b1: 	cmpl	%ecx, %esi
    000003b3: 	jg	.Ltmp949 # Offset: 947
    000003b5: 	cmpq	%rdx, %rdi
    000003b8: 	jbe	.Ltmp947 # Offset: 952
.Ltmp948:
    000003ba: 	movl	%ecx, (%rdi)
    000003bc: 	movl	%r8d, (%rdx)
.Ltmp946:
    000003bf: 	movq	%rdi, %r14
    000003c2: 	jmp	.Ltmp950 # Offset: 962
.Ltmp947:
    000003c4: 	movq	%r14, %rsi
    000003c7: 	movq	%r13, %rdi
    000003ca: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 970
    000003cf: 	movq	%rbx, %rsi
    000003d2: 	movq	%r14, %rdi
    000003d5: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 981
.Ltmp945:
    000003da: 	movq	%rbp, %rax
    000003dd: 	movq	%rbx, %r8
    000003e0: 	subq	%rbx, %rax
    000003e3: 	cmpq	$0x4, %rax
    000003e7: 	jle	.Ltmp897 # Offset: 999
    000003ed: 	movl	(%rbx), %ecx
    000003ef: 	movq	%rbp, %r13
    000003f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp955:
    000003f8: 	movl	-0x4(%r13), %edi
    000003fc: 	leaq	-0x4(%r13), %rsi
    00000400: 	cmpl	%edi, %ecx
    00000402: 	jl	.Ltmp951 # Offset: 1026
    00000404: 	cmpq	%rbx, %rsi
    00000407: 	jbe	.Ltmp952 # Offset: 1031
    0000040d: 	movl	(%rbx), %edx
    0000040f: 	cmpl	%edx, %ecx
    00000411: 	jle	.Ltmp953 # Offset: 1041
    00000413: 	leaq	0x4(%rbx), %rax
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp954:
    00000420: 	movq	%rax, %rbx
    00000423: 	movl	(%rax), %edx
    00000425: 	leaq	0x4(%rax), %rax
    00000429: 	cmpl	%edx, %ecx
    0000042b: 	jg	.Ltmp954 # Offset: 1067
    0000042d: 	cmpq	%rbx, %rsi
    00000430: 	jbe	.Ltmp952 # Offset: 1072
.Ltmp953:
    00000436: 	movl	%edx, (%rsi)
    00000438: 	movl	%edi, (%rbx)
.Ltmp951:
    0000043a: 	movq	%rsi, %r13
    0000043d: 	jmp	.Ltmp955 # Offset: 1085
.Ltmp919:
    0000043f: 	movq	%rbx, %rax
    00000442: 	subq	%rbp, %rax
    00000445: 	cmpq	$0x4, %rax
    00000449: 	jle	.Ltmp956 # Offset: 1097
    0000044b: 	movl	(%rbp), %esi
    0000044e: 	movq	%rbx, %r14
    00000451: 	movq	%rbp, %rdx
    00000454: 	nopl	(%rax) # Size: 4
.Ltmp961:
    00000458: 	movl	-0x4(%r14), %r8d
    0000045c: 	leaq	-0x4(%r14), %rdi
    00000460: 	cmpl	%r8d, %esi
    00000463: 	jl	.Ltmp957 # Offset: 1123
    00000465: 	cmpq	%rdx, %rdi
    00000468: 	jbe	.Ltmp958 # Offset: 1128
    0000046a: 	movl	(%rdx), %ecx
    0000046c: 	cmpl	%esi, %ecx
    0000046e: 	jge	.Ltmp959 # Offset: 1134
    00000470: 	leaq	0x4(%rdx), %rax
    00000474: 	nopl	(%rax) # Size: 4
.Ltmp960:
    00000478: 	movq	%rax, %rdx
    0000047b: 	movl	(%rax), %ecx
    0000047d: 	leaq	0x4(%rax), %rax
    00000481: 	cmpl	%ecx, %esi
    00000483: 	jg	.Ltmp960 # Offset: 1155
    00000485: 	cmpq	%rdx, %rdi
    00000488: 	jbe	.Ltmp958 # Offset: 1160
.Ltmp959:
    0000048a: 	movl	%ecx, (%rdi)
    0000048c: 	movl	%r8d, (%rdx)
.Ltmp957:
    0000048f: 	movq	%rdi, %r14
    00000492: 	jmp	.Ltmp961 # Offset: 1170
.Ltmp958:
    00000494: 	movq	%r14, %rsi
    00000497: 	movq	%rbp, %rdi
    0000049a: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1178
    0000049f: 	movq	%rbx, %rsi
    000004a2: 	movq	%r14, %rdi
    000004a5: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1189
.Ltmp956:
    000004aa: 	movq	%r13, %rax
    000004ad: 	movq	%rbx, %r8
    000004b0: 	subq	%rbx, %rax
    000004b3: 	cmpq	$0x4, %rax
    000004b7: 	jle	.Ltmp962 # Offset: 1207
    000004bd: 	movl	(%rbx), %ecx
    000004bf: 	movq	%r13, %rbp
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp967:
    000004c8: 	movl	-0x4(%rbp), %edi
    000004cb: 	leaq	-0x4(%rbp), %rsi
    000004cf: 	cmpl	%edi, %ecx
    000004d1: 	jl	.Ltmp963 # Offset: 1233
    000004d3: 	cmpq	%rbx, %rsi
    000004d6: 	jbe	.Ltmp964 # Offset: 1238
    000004dc: 	movl	(%rbx), %edx
    000004de: 	cmpl	%edx, %ecx
    000004e0: 	jle	.Ltmp965 # Offset: 1248
    000004e2: 	leaq	0x4(%rbx), %rax
    000004e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp966:
    000004f0: 	movq	%rax, %rbx
    000004f3: 	movl	(%rax), %edx
    000004f5: 	leaq	0x4(%rax), %rax
    000004f9: 	cmpl	%edx, %ecx
    000004fb: 	jg	.Ltmp966 # Offset: 1275
    000004fd: 	cmpq	%rbx, %rsi
    00000500: 	jbe	.Ltmp964 # Offset: 1280
.Ltmp965:
    00000506: 	movl	%edx, (%rsi)
    00000508: 	movl	%edi, (%rbx)
.Ltmp963:
    0000050a: 	movq	%rsi, %rbp
    0000050d: 	jmp	.Ltmp967 # Offset: 1293
.Ltmp914:
    0000050f: 	movq	%rbp, %rax
    00000512: 	subq	%r13, %rax
    00000515: 	cmpq	$0x4, %rax
    00000519: 	jle	.Ltmp968 # Offset: 1305
    0000051b: 	movl	(%r13), %esi
    0000051f: 	movq	%rbp, %r14
    00000522: 	movq	%r13, %rdx
    00000525: 	nopl	(%rax) # Size: 3
.Ltmp973:
    00000528: 	movl	-0x4(%r14), %r8d
    0000052c: 	leaq	-0x4(%r14), %rdi
    00000530: 	cmpl	%r8d, %esi
    00000533: 	jl	.Ltmp969 # Offset: 1331
    00000535: 	cmpq	%rdx, %rdi
    00000538: 	jbe	.Ltmp970 # Offset: 1336
    0000053a: 	movl	(%rdx), %ecx
    0000053c: 	cmpl	%esi, %ecx
    0000053e: 	jge	.Ltmp971 # Offset: 1342
    00000540: 	leaq	0x4(%rdx), %rax
    00000544: 	nopl	(%rax) # Size: 4
.Ltmp972:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movl	(%rax), %ecx
    0000054d: 	leaq	0x4(%rax), %rax
    00000551: 	cmpl	%ecx, %esi
    00000553: 	jg	.Ltmp972 # Offset: 1363
    00000555: 	cmpq	%rdx, %rdi
    00000558: 	jbe	.Ltmp970 # Offset: 1368
.Ltmp971:
    0000055a: 	movl	%ecx, (%rdi)
    0000055c: 	movl	%r8d, (%rdx)
.Ltmp969:
    0000055f: 	movq	%rdi, %r14
    00000562: 	jmp	.Ltmp973 # Offset: 1378
.Ltmp970:
    00000564: 	movq	%r14, %rsi
    00000567: 	movq	%r13, %rdi
    0000056a: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1386
    0000056f: 	movq	%rbp, %rsi
    00000572: 	movq	%r14, %rdi
    00000575: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1397
.Ltmp968:
    0000057a: 	movq	%r12, %rax
    0000057d: 	movq	%rbp, %r8
    00000580: 	subq	%rbp, %rax
    00000583: 	cmpq	$0x4, %rax
    00000587: 	jle	.Ltmp905 # Offset: 1415
    0000058d: 	movl	(%rbp), %ecx
    00000590: 	movq	%r12, %r13
    00000593: 	nopl	(%rax,%rax) # Size: 5
.Ltmp978:
    00000598: 	movl	-0x4(%r13), %edi
    0000059c: 	leaq	-0x4(%r13), %rsi
    000005a0: 	cmpl	%edi, %ecx
    000005a2: 	jl	.Ltmp974 # Offset: 1442
    000005a4: 	cmpq	%rbp, %rsi
    000005a7: 	jbe	.Ltmp975 # Offset: 1447
    000005a9: 	movl	(%rbp), %edx
    000005ac: 	cmpl	%ecx, %edx
    000005ae: 	jge	.Ltmp976 # Offset: 1454
    000005b0: 	leaq	0x4(%rbp), %rax
    000005b4: 	nopl	(%rax) # Size: 4
.Ltmp977:
    000005b8: 	movq	%rax, %rbp
    000005bb: 	movl	(%rax), %edx
    000005bd: 	leaq	0x4(%rax), %rax
    000005c1: 	cmpl	%edx, %ecx
    000005c3: 	jg	.Ltmp977 # Offset: 1475
    000005c5: 	cmpq	%rbp, %rsi
    000005c8: 	jbe	.Ltmp975 # Offset: 1480
.Ltmp976:
    000005ca: 	movl	%edx, (%rsi)
    000005cc: 	movl	%edi, (%rbp)
.Ltmp974:
    000005cf: 	movq	%rsi, %r13
    000005d2: 	jmp	.Ltmp978 # Offset: 1490
.Ltmp975:
    000005d4: 	movq	%r13, %rsi
    000005d7: 	movq	%r8, %rdi
    000005da: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1498
    000005df: 	popq	%rbx
    000005e0: 	movq	%r12, %rsi
    000005e3: 	popq	%rbp
    000005e4: 	movq	%r13, %rdi
    000005e7: 	popq	%r12
    000005e9: 	popq	%r13
    000005eb: 	popq	%r14
    000005ed: 	jmp	.LBB054 # Offset: 1517
.Ltmp964:
    000005f2: 	movq	%rbp, %rsi
    000005f5: 	movq	%r8, %rdi
    000005f8: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1528
    000005fd: 	movq	%r13, %rsi
    00000600: 	movq	%rbp, %rdi
    00000603: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1539
    00000608: 	jmp	.Ltmp962 # Offset: 1544
.Ltmp952:
    0000060d: 	movq	%r13, %rsi
    00000610: 	movq	%r8, %rdi
    00000613: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1555
    00000618: 	movq	%rbp, %rsi
    0000061b: 	movq	%r13, %rdi
    0000061e: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1566
    00000623: 	jmp	.Ltmp897 # Offset: 1571
.Ltmp941:
    00000628: 	movq	%r14, %rsi
    0000062b: 	movq	%r8, %rdi
    0000062e: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1582
    00000633: 	movq	%r13, %rsi
    00000636: 	movq	%r14, %rdi
    00000639: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 1593
    0000063e: 	jmp	.Ltmp939 # Offset: 1598
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_"

Binary Function "_ZN9benchmark9quicksortIPmEEvT_S2_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x7cd0
  Size        : 0x43a
  MaxSize     : 0x440
  Offset      : 0x7cd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPmEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x8, %rax
    00000020: 	jle	.Ltmp979 # Offset: 32
.Ltmp991:
    00000022: 	movq	(%rdi), %r8
    00000025: 	movq	(%rsp), %r13
    00000029: 	movq	%rdi, %rdx
.Ltmp984:
    0000002c: 	movq	-0x8(%r13), %rax
    00000030: 	leaq	-0x8(%r13), %rcx
    00000034: 	cmpq	%r8, %rax
    00000037: 	ja	.Ltmp980 # Offset: 55
    00000039: 	cmpq	%rcx, %rdx
    0000003c: 	jae	.Ltmp981 # Offset: 60
    0000003e: 	movq	(%rdx), %rsi
    00000041: 	cmpq	%rsi, %r8
    00000044: 	jbe	.Ltmp982 # Offset: 68
.Ltmp983:
    00000046: 	movq	0x8(%rdx), %rsi
    0000004a: 	addq	$0x8, %rdx
    0000004e: 	cmpq	%r8, %rsi
    00000051: 	jb	.Ltmp983 # Offset: 81
    00000053: 	cmpq	%rdx, %rcx
    00000056: 	jbe	.Ltmp981 # Offset: 86
.Ltmp982:
    00000058: 	movq	%rsi, (%rcx)
    0000005b: 	movq	%rax, (%rdx)
.Ltmp980:
    0000005e: 	movq	%rcx, %r13
    00000061: 	jmp	.Ltmp984 # Offset: 97
.Ltmp979:
    00000063: 	addq	$0x28, %rsp
    00000067: 	popq	%rbx
    00000068: 	popq	%rbp
    00000069: 	popq	%r12
    0000006b: 	popq	%r13
    0000006d: 	popq	%r14
    0000006f: 	popq	%r15
    00000071: 	retq # Offset: 113
.Ltmp981:
    00000072: 	movq	%r13, %rdx
    00000075: 	movq	%r13, %r8
    00000078: 	subq	%rdi, %rdx
    0000007b: 	cmpq	$0x8, %rdx
    0000007f: 	jle	.Ltmp985 # Offset: 127
.Ltmp1043:
    00000081: 	movq	(%rdi), %r9
    00000084: 	movq	%r8, %r14
    00000087: 	movq	%rdi, %rdx
.Ltmp990:
    0000008a: 	leaq	-0x8(%r14), %rcx
    0000008e: 	cmpq	%rax, %r9
    00000091: 	jb	.Ltmp986 # Offset: 145
    00000093: 	cmpq	%rdx, %rcx
    00000096: 	jbe	.Ltmp987 # Offset: 150
    00000098: 	movq	(%rdx), %rsi
    0000009b: 	cmpq	%rsi, %r9
    0000009e: 	jbe	.Ltmp988 # Offset: 158
.Ltmp989:
    000000a0: 	movq	0x8(%rdx), %rsi
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	cmpq	%rsi, %r9
    000000ab: 	ja	.Ltmp989 # Offset: 171
    000000ad: 	cmpq	%rdx, %rcx
    000000b0: 	jbe	.Ltmp987 # Offset: 176
.Ltmp988:
    000000b2: 	movq	%rsi, (%rcx)
    000000b5: 	movq	%rax, (%rdx)
.Ltmp986:
    000000b8: 	movq	-0x8(%rcx), %rax
    000000bc: 	movq	%rcx, %r14
    000000bf: 	jmp	.Ltmp990 # Offset: 191
.Ltmp1042:
    000000c1: 	movq	%r8, %r13
.Ltmp985:
    000000c4: 	movq	(%rsp), %rax
    000000c8: 	subq	%r13, %rax
    000000cb: 	cmpq	$0x8, %rax
    000000cf: 	jle	.Ltmp979 # Offset: 207
    000000d1: 	movq	%r13, %rdi
    000000d4: 	jmp	.Ltmp991 # Offset: 212
.Ltmp987:
    000000d9: 	movq	%r14, %rdx
    000000dc: 	subq	%rdi, %rdx
    000000df: 	cmpq	$0x8, %rdx
    000000e3: 	jle	.Ltmp992 # Offset: 227
    000000e9: 	movq	%r8, 0x8(%rsp)
    000000ee: 	movq	%r14, %rbx
.Ltmp1045:
    000000f1: 	movq	(%rdi), %r9
    000000f4: 	movq	%rbx, %r15
    000000f7: 	movq	%rdi, %rdx
.Ltmp997:
    000000fa: 	leaq	-0x8(%r15), %rcx
    000000fe: 	cmpq	%r9, %rax
    00000101: 	ja	.Ltmp993 # Offset: 257
    00000103: 	cmpq	%rdx, %rcx
    00000106: 	jbe	.Ltmp994 # Offset: 262
    00000108: 	movq	(%rdx), %rsi
    0000010b: 	cmpq	%rsi, %r9
    0000010e: 	jbe	.Ltmp995 # Offset: 270
.Ltmp996:
    00000110: 	movq	0x8(%rdx), %rsi
    00000114: 	addq	$0x8, %rdx
    00000118: 	cmpq	%rsi, %r9
    0000011b: 	ja	.Ltmp996 # Offset: 283
    0000011d: 	cmpq	%rdx, %rcx
    00000120: 	jbe	.Ltmp994 # Offset: 288
.Ltmp995:
    00000122: 	movq	%rsi, (%rcx)
    00000125: 	movq	%rax, (%rdx)
.Ltmp993:
    00000128: 	movq	-0x8(%rcx), %rax
    0000012c: 	movq	%rcx, %r15
    0000012f: 	jmp	.Ltmp997 # Offset: 303
.Ltmp994:
    00000131: 	movq	%r15, %rdx
    00000134: 	subq	%rdi, %rdx
    00000137: 	cmpq	$0x8, %rdx
    0000013b: 	jle	.Ltmp998 # Offset: 315
    00000141: 	movq	%rbx, 0x10(%rsp)
    00000146: 	movq	%r15, %rbx
.Ltmp1041:
    00000149: 	movq	(%rdi), %r9
    0000014c: 	movq	%rbx, %r14
    0000014f: 	movq	%rdi, %rdx
.Ltmp1003:
    00000152: 	leaq	-0x8(%r14), %rcx
    00000156: 	cmpq	%rax, %r9
    00000159: 	jb	.Ltmp999 # Offset: 345
    0000015b: 	cmpq	%rdx, %rcx
    0000015e: 	jbe	.Ltmp1000 # Offset: 350
    00000160: 	movq	(%rdx), %rsi
    00000163: 	cmpq	%rsi, %r9
    00000166: 	jbe	.Ltmp1001 # Offset: 358
.Ltmp1002:
    00000168: 	movq	0x8(%rdx), %rsi
    0000016c: 	addq	$0x8, %rdx
    00000170: 	cmpq	%rsi, %r9
    00000173: 	ja	.Ltmp1002 # Offset: 371
    00000175: 	cmpq	%rdx, %rcx
    00000178: 	jbe	.Ltmp1000 # Offset: 376
.Ltmp1001:
    0000017a: 	movq	%rsi, (%rcx)
    0000017d: 	movq	%rax, (%rdx)
.Ltmp999:
    00000180: 	movq	-0x8(%rcx), %rax
    00000184: 	movq	%rcx, %r14
    00000187: 	jmp	.Ltmp1003 # Offset: 391
.Ltmp1000:
    00000189: 	movq	%r14, %rdx
    0000018c: 	subq	%rdi, %rdx
    0000018f: 	cmpq	$0x8, %rdx
    00000193: 	jle	.Ltmp1004 # Offset: 403
    00000199: 	movq	%rbx, 0x18(%rsp)
    0000019e: 	movq	%r14, %rbx
.Ltmp1039:
    000001a1: 	movq	(%rdi), %r9
    000001a4: 	movq	%rbx, %r14
    000001a7: 	movq	%rdi, %rdx
.Ltmp1009:
    000001aa: 	leaq	-0x8(%r14), %rcx
    000001ae: 	cmpq	%rax, %r9
    000001b1: 	jb	.Ltmp1005 # Offset: 433
    000001b3: 	cmpq	%rdx, %rcx
    000001b6: 	jbe	.Ltmp1006 # Offset: 438
    000001b8: 	movq	(%rdx), %rsi
    000001bb: 	cmpq	%rsi, %r9
    000001be: 	jbe	.Ltmp1007 # Offset: 446
.Ltmp1008:
    000001c0: 	movq	0x8(%rdx), %rsi
    000001c4: 	addq	$0x8, %rdx
    000001c8: 	cmpq	%rsi, %r9
    000001cb: 	ja	.Ltmp1008 # Offset: 459
    000001cd: 	cmpq	%rdx, %rcx
    000001d0: 	jbe	.Ltmp1006 # Offset: 464
.Ltmp1007:
    000001d2: 	movq	%rsi, (%rcx)
    000001d5: 	movq	%rax, (%rdx)
.Ltmp1005:
    000001d8: 	movq	-0x8(%rcx), %rax
    000001dc: 	movq	%rcx, %r14
    000001df: 	jmp	.Ltmp1009 # Offset: 479
.Ltmp1006:
    000001e1: 	movq	%r14, %rdx
    000001e4: 	subq	%rdi, %rdx
    000001e7: 	cmpq	$0x8, %rdx
    000001eb: 	jle	.Ltmp1010 # Offset: 491
.Ltmp1037:
    000001f1: 	movq	(%rdi), %r8
    000001f4: 	movq	%r14, %r15
    000001f7: 	movq	%rdi, %rdx
.Ltmp1015:
    000001fa: 	leaq	-0x8(%r15), %rcx
    000001fe: 	cmpq	%rax, %r8
    00000201: 	jb	.Ltmp1011 # Offset: 513
    00000203: 	cmpq	%rdx, %rcx
    00000206: 	jbe	.Ltmp1012 # Offset: 518
    00000208: 	movq	(%rdx), %rsi
    0000020b: 	cmpq	%rsi, %r8
    0000020e: 	jbe	.Ltmp1013 # Offset: 526
.Ltmp1014:
    00000210: 	movq	0x8(%rdx), %rsi
    00000214: 	addq	$0x8, %rdx
    00000218: 	cmpq	%rsi, %r8
    0000021b: 	ja	.Ltmp1014 # Offset: 539
    0000021d: 	cmpq	%rdx, %rcx
    00000220: 	jbe	.Ltmp1012 # Offset: 544
.Ltmp1013:
    00000222: 	movq	%rsi, (%rcx)
    00000225: 	movq	%rax, (%rdx)
.Ltmp1011:
    00000228: 	movq	-0x8(%rcx), %rax
    0000022c: 	movq	%rcx, %r15
    0000022f: 	jmp	.Ltmp1015 # Offset: 559
.Ltmp1012:
    00000231: 	movq	%r15, %rdx
    00000234: 	subq	%rdi, %rdx
    00000237: 	cmpq	$0x8, %rdx
    0000023b: 	jle	.Ltmp1016 # Offset: 571
.Ltmp1036:
    00000241: 	movq	(%rdi), %r8
    00000244: 	movq	%r15, %r12
    00000247: 	movq	%rdi, %rdx
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1034:
    00000250: 	leaq	-0x8(%r12), %rsi
    00000255: 	cmpq	%rax, %r8
    00000258: 	jb	.Ltmp1017 # Offset: 600
    0000025e: 	cmpq	%rdx, %rsi
    00000261: 	jbe	.Ltmp1018 # Offset: 609
    00000263: 	movq	(%rdx), %rcx
    00000266: 	cmpq	%rcx, %r8
    00000269: 	jbe	.Ltmp1019 # Offset: 617
    0000026f: 	nop # Size: 1
.Ltmp1020:
    00000270: 	movq	0x8(%rdx), %rcx
    00000274: 	addq	$0x8, %rdx
    00000278: 	cmpq	%rcx, %r8
    0000027b: 	ja	.Ltmp1020 # Offset: 635
    0000027d: 	cmpq	%rdx, %rsi
    00000280: 	ja	.Ltmp1019 # Offset: 640
.Ltmp1018:
    00000286: 	movq	%r12, %rdx
    00000289: 	subq	%rdi, %rdx
    0000028c: 	cmpq	$0x8, %rdx
    00000290: 	jle	.Ltmp1021 # Offset: 656
.Ltmp1033:
    00000296: 	movq	(%rdi), %rsi
    00000299: 	movq	%r12, %rbp
    0000029c: 	movq	%rdi, %rdx
    0000029f: 	nop # Size: 1
.Ltmp1032:
    000002a0: 	leaq	-0x8(%rbp), %rcx
    000002a4: 	cmpq	%rsi, %rax
    000002a7: 	ja	.Ltmp1022 # Offset: 679
    000002ad: 	cmpq	%rdx, %rcx
    000002b0: 	jbe	.Ltmp1023 # Offset: 688
    000002b2: 	movq	(%rdx), %r8
    000002b5: 	cmpq	%r8, %rsi
    000002b8: 	jbe	.Ltmp1024 # Offset: 696
    000002be: 	nop # Size: 2
.Ltmp1025:
    000002c0: 	movq	0x8(%rdx), %r8
    000002c4: 	addq	$0x8, %rdx
    000002c8: 	cmpq	%r8, %rsi
    000002cb: 	ja	.Ltmp1025 # Offset: 715
    000002cd: 	cmpq	%rdx, %rcx
    000002d0: 	ja	.Ltmp1024 # Offset: 720
.Ltmp1023:
    000002d2: 	movq	%rbp, %rax
    000002d5: 	subq	%rdi, %rax
    000002d8: 	cmpq	$0x8, %rax
    000002dc: 	jle	.Ltmp1026 # Offset: 732
.Ltmp1031:
    000002de: 	movq	(%rdi), %rcx
    000002e1: 	movq	%rbp, %r13
    000002e4: 	movq	%rdi, %rax
    000002e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1035:
    000002f0: 	movq	-0x8(%r13), %r8
    000002f4: 	leaq	-0x8(%r13), %rsi
    000002f8: 	cmpq	%r8, %rcx
    000002fb: 	jb	.Ltmp1027 # Offset: 763
    00000301: 	cmpq	%rax, %rsi
    00000304: 	jbe	.Ltmp1028 # Offset: 772
    00000306: 	movq	(%rax), %rdx
    00000309: 	cmpq	%rdx, %rcx
    0000030c: 	jbe	.Ltmp1029 # Offset: 780
    0000030e: 	nop # Size: 2
.Ltmp1030:
    00000310: 	movq	0x8(%rax), %rdx
    00000314: 	addq	$0x8, %rax
    00000318: 	cmpq	%rdx, %rcx
    0000031b: 	ja	.Ltmp1030 # Offset: 795
    0000031d: 	cmpq	%rax, %rsi
    00000320: 	ja	.Ltmp1029 # Offset: 800
.Ltmp1028:
    00000322: 	movq	%r13, %rsi
    00000325: 	callq	_ZN9benchmark9quicksortIPmEEvT_S2_ # Offset: 805
    0000032a: 	movq	%rbp, %rax
    0000032d: 	subq	%r13, %rax
    00000330: 	cmpq	$0x8, %rax
    00000334: 	jle	.Ltmp1026 # Offset: 820
    00000336: 	movq	%r13, %rdi
    00000339: 	jmp	.Ltmp1031 # Offset: 825
.Ltmp1024:
    0000033b: 	movq	%r8, (%rcx)
    0000033e: 	movq	%rax, (%rdx)
.Ltmp1022:
    00000341: 	movq	-0x8(%rcx), %rax
    00000345: 	movq	%rcx, %rbp
    00000348: 	jmp	.Ltmp1032 # Offset: 840
.Ltmp1026:
    0000034d: 	movq	%r12, %rax
    00000350: 	subq	%rbp, %rax
    00000353: 	cmpq	$0x8, %rax
    00000357: 	jle	.Ltmp1021 # Offset: 855
    00000359: 	movq	-0x8(%r12), %rax
    0000035e: 	movq	%rbp, %rdi
    00000361: 	jmp	.Ltmp1033 # Offset: 865
.Ltmp1019:
    00000366: 	movq	%rcx, (%rsi)
    00000369: 	movq	%rax, (%rdx)
.Ltmp1017:
    0000036c: 	movq	-0x8(%rsi), %rax
    00000370: 	movq	%rsi, %r12
    00000373: 	jmp	.Ltmp1034 # Offset: 883
    00000378: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1029:
    00000380: 	movq	%rdx, (%rsi)
    00000383: 	movq	%r8, (%rax)
.Ltmp1027:
    00000386: 	movq	%rsi, %r13
    00000389: 	jmp	.Ltmp1035 # Offset: 905
.Ltmp1021:
    0000038e: 	movq	%r15, %rax
    00000391: 	subq	%r12, %rax
    00000394: 	cmpq	$0x8, %rax
    00000398: 	jle	.Ltmp1016 # Offset: 920
    0000039a: 	movq	-0x8(%r15), %rax
    0000039e: 	movq	%r12, %rdi
    000003a1: 	jmp	.Ltmp1036 # Offset: 929
.Ltmp1016:
    000003a6: 	movq	%r14, %rax
    000003a9: 	subq	%r15, %rax
    000003ac: 	cmpq	$0x8, %rax
    000003b0: 	jle	.Ltmp1010 # Offset: 944
    000003b2: 	movq	-0x8(%r14), %rax
    000003b6: 	movq	%r15, %rdi
    000003b9: 	jmp	.Ltmp1037 # Offset: 953
.Ltmp1010:
    000003be: 	movq	%rbx, %rax
    000003c1: 	subq	%r14, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp1038 # Offset: 968
    000003ca: 	movq	-0x8(%rbx), %rax
    000003ce: 	movq	%r14, %rdi
    000003d1: 	jmp	.Ltmp1039 # Offset: 977
.Ltmp1038:
    000003d6: 	movq	%rbx, %r14
    000003d9: 	movq	0x18(%rsp), %rbx
.Ltmp1004:
    000003de: 	movq	%rbx, %rax
    000003e1: 	subq	%r14, %rax
    000003e4: 	cmpq	$0x8, %rax
    000003e8: 	jle	.Ltmp1040 # Offset: 1000
    000003ea: 	movq	-0x8(%rbx), %rax
    000003ee: 	movq	%r14, %rdi
    000003f1: 	jmp	.Ltmp1041 # Offset: 1009
.Ltmp1044:
    000003f6: 	movq	0x8(%rsp), %r8
    000003fb: 	movq	%rbx, %r14
.Ltmp992:
    000003fe: 	movq	%r8, %rax
    00000401: 	subq	%r14, %rax
    00000404: 	cmpq	$0x8, %rax
    00000408: 	jle	.Ltmp1042 # Offset: 1032
    0000040e: 	movq	-0x8(%r8), %rax
    00000412: 	movq	%r14, %rdi
    00000415: 	jmp	.Ltmp1043 # Offset: 1045
.Ltmp1040:
    0000041a: 	movq	%rbx, %r15
    0000041d: 	movq	0x10(%rsp), %rbx
.Ltmp998:
    00000422: 	movq	%rbx, %rax
    00000425: 	subq	%r15, %rax
    00000428: 	cmpq	$0x8, %rax
    0000042c: 	jle	.Ltmp1044 # Offset: 1068
    0000042e: 	movq	-0x8(%rbx), %rax
    00000432: 	movq	%r15, %rdi
    00000435: 	jmp	.Ltmp1045 # Offset: 1077
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPmEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x8110
  Size        : 0x7c6
  MaxSize     : 0x7d0
  Offset      : 0x8110
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x48, %rsp
    00000012: 	movq	0x8(%rsi), %rbp
    00000016: 	movq	0x8(%rdi), %r9
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x38(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	movq	%rbp, %rax
    0000002d: 	subq	%r9, %rax
    00000030: 	cmpq	$0x8, %rax
    00000034: 	jle	.Ltmp1046 # Offset: 52
    00000036: 	movq	(%r9), %rsi
    00000039: 	movq	%rbp, %rbx
    0000003c: 	movq	%r9, %rdx
    0000003f: 	nop # Size: 1
.Ltmp1051:
    00000040: 	movq	-0x8(%rbx), %rdi
    00000044: 	leaq	-0x8(%rbx), %r8
    00000048: 	cmpq	%rsi, %rdi
    0000004b: 	ja	.Ltmp1047 # Offset: 75
    0000004d: 	cmpq	%rdx, %r8
    00000050: 	jbe	.Ltmp1048 # Offset: 80
    00000052: 	movq	(%rdx), %rcx
    00000055: 	cmpq	%rcx, %rsi
    00000058: 	jbe	.Ltmp1049 # Offset: 88
    0000005a: 	leaq	0x8(%rdx), %rax
    0000005e: 	nop # Size: 2
.Ltmp1050:
    00000060: 	movq	%rax, %rdx
    00000063: 	movq	(%rax), %rcx
    00000066: 	leaq	0x8(%rax), %rax
    0000006a: 	cmpq	%rsi, %rcx
    0000006d: 	jb	.Ltmp1050 # Offset: 109
    0000006f: 	cmpq	%rdx, %r8
    00000072: 	jbe	.Ltmp1048 # Offset: 114
.Ltmp1049:
    00000074: 	movq	%rcx, (%r8)
    00000077: 	movq	%rdi, (%rdx)
.Ltmp1047:
    0000007a: 	movq	%r8, %rbx
    0000007d: 	jmp	.Ltmp1051 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp1048:
    00000080: 	movq	%rbx, %rax
    00000083: 	subq	%r9, %rax
    00000086: 	cmpq	$0x8, %rax
    0000008a: 	jg	.Ltmp1052 # Offset: 138
.Ltmp1071:
    00000090: 	movq	%rbp, %rax
    00000093: 	subq	%rbx, %rax
    00000096: 	cmpq	$0x8, %rax
    0000009a: 	jg	.Ltmp1053 # Offset: 154
.Ltmp1046:
    0000009c: 	movq	0x38(%rsp), %rax
    000000a1: 	subq	%fs:0x28, %rax
    000000aa: 	jne	.Ltmp1054 # Offset: 170
    000000b0: 	addq	$0x48, %rsp
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	popq	%r12
    000000b8: 	popq	%r13
    000000ba: 	popq	%r14
    000000bc: 	popq	%r15
    000000be: 	retq # Offset: 190
.Ltmp1053:
    000000bf: 	movq	(%rbx), %rsi
    000000c2: 	movq	%rbp, %r12
    000000c5: 	movq	%rbx, %rdx
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1059:
    000000d0: 	movq	-0x8(%r12), %rdi
    000000d5: 	leaq	-0x8(%r12), %r8
    000000da: 	cmpq	%rdi, %rsi
    000000dd: 	jb	.Ltmp1055 # Offset: 221
    000000df: 	cmpq	%rdx, %r8
    000000e2: 	jbe	.Ltmp1056 # Offset: 226
    000000e8: 	movq	(%rdx), %rcx
    000000eb: 	cmpq	%rcx, %rsi
    000000ee: 	jbe	.Ltmp1057 # Offset: 238
    000000f0: 	leaq	0x8(%rdx), %rax
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp1058:
    000000f8: 	movq	%rax, %rdx
    000000fb: 	movq	(%rax), %rcx
    000000fe: 	leaq	0x8(%rax), %rax
    00000102: 	cmpq	%rcx, %rsi
    00000105: 	ja	.Ltmp1058 # Offset: 261
    00000107: 	cmpq	%rdx, %r8
    0000010a: 	jbe	.Ltmp1056 # Offset: 266
.Ltmp1057:
    00000110: 	movq	%rcx, (%r8)
    00000113: 	movq	%rdi, (%rdx)
.Ltmp1055:
    00000116: 	movq	%r8, %r12
    00000119: 	jmp	.Ltmp1059 # Offset: 281
.Ltmp1052:
    0000011b: 	movq	(%r9), %rsi
    0000011e: 	movq	%rbx, %r12
    00000121: 	movq	%r9, %rdx
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp1064:
    00000128: 	leaq	-0x8(%r12), %r8
    0000012d: 	cmpq	%rdi, %rsi
    00000130: 	jb	.Ltmp1060 # Offset: 304
    00000132: 	cmpq	%rdx, %r8
    00000135: 	jbe	.Ltmp1061 # Offset: 309
    00000137: 	movq	(%rdx), %rcx
    0000013a: 	cmpq	%rcx, %rsi
    0000013d: 	jbe	.Ltmp1062 # Offset: 317
    0000013f: 	leaq	0x8(%rdx), %rax
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1063:
    00000148: 	movq	%rax, %rdx
    0000014b: 	movq	(%rax), %rcx
    0000014e: 	leaq	0x8(%rax), %rax
    00000152: 	cmpq	%rcx, %rsi
    00000155: 	ja	.Ltmp1063 # Offset: 341
    00000157: 	cmpq	%rdx, %r8
    0000015a: 	jbe	.Ltmp1061 # Offset: 346
.Ltmp1062:
    0000015c: 	movq	%rcx, (%r8)
    0000015f: 	movq	%rdi, (%rdx)
.Ltmp1060:
    00000162: 	movq	-0x8(%r8), %rdi
    00000166: 	movq	%r8, %r12
    00000169: 	jmp	.Ltmp1064 # Offset: 361
.Ltmp1061:
    0000016b: 	movq	%r12, %rax
    0000016e: 	subq	%r9, %rax
    00000171: 	cmpq	$0x8, %rax
    00000175: 	jle	.Ltmp1065 # Offset: 373
    0000017b: 	movq	(%r9), %rcx
    0000017e: 	movq	%r12, %r13
    00000181: 	movq	%r9, %rax
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp1070:
    00000188: 	leaq	-0x8(%r13), %rsi
    0000018c: 	cmpq	%rdi, %rcx
    0000018f: 	jb	.Ltmp1066 # Offset: 399
    00000191: 	cmpq	%rax, %rsi
    00000194: 	jbe	.Ltmp1067 # Offset: 404
    0000019a: 	movq	(%rax), %rdx
    0000019d: 	cmpq	%rdx, %rcx
    000001a0: 	jbe	.Ltmp1068 # Offset: 416
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1069:
    000001a8: 	movq	0x8(%rax), %rdx
    000001ac: 	addq	$0x8, %rax
    000001b0: 	cmpq	%rdx, %rcx
    000001b3: 	ja	.Ltmp1069 # Offset: 435
    000001b5: 	cmpq	%rax, %rsi
    000001b8: 	jbe	.Ltmp1067 # Offset: 440
.Ltmp1068:
    000001be: 	movq	%rdx, (%rsi)
    000001c1: 	movq	%rdi, (%rax)
.Ltmp1066:
    000001c4: 	movq	-0x8(%rsi), %rdi
    000001c8: 	movq	%rsi, %r13
    000001cb: 	jmp	.Ltmp1070 # Offset: 459
.Ltmp1095:
    000001cd: 	movq	%r13, 0x28(%rsp)
    000001d2: 	leaq	0x10(%rsp), %r15
    000001d7: 	leaq	0x20(%rsp), %r13
    000001dc: 	movq	%r15, %rsi
    000001df: 	movq	%r13, %rdi
    000001e2: 	movq	%r14, 0x18(%rsp)
    000001e7: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 487
    000001ec: 	movq	%r15, %rsi
    000001ef: 	movq	%r13, %rdi
    000001f2: 	movq	%r12, 0x18(%rsp)
    000001f7: 	movq	%r14, 0x28(%rsp)
    000001fc: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 508
.Ltmp1065:
    00000201: 	movq	%rbx, %rax
    00000204: 	subq	%r12, %rax
    00000207: 	cmpq	$0x8, %rax
    0000020b: 	jle	.Ltmp1071 # Offset: 523
    00000211: 	movq	(%r12), %rsi
    00000215: 	movq	%rbx, %r13
    00000218: 	movq	%r12, %rdx
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1076:
    00000220: 	movq	-0x8(%r13), %r8
    00000224: 	leaq	-0x8(%r13), %rdi
    00000228: 	cmpq	%r8, %rsi
    0000022b: 	jb	.Ltmp1072 # Offset: 555
    0000022d: 	cmpq	%rdx, %rdi
    00000230: 	jbe	.Ltmp1073 # Offset: 560
    00000236: 	movq	(%rdx), %rcx
    00000239: 	cmpq	%rsi, %rcx
    0000023c: 	jae	.Ltmp1074 # Offset: 572
    0000023e: 	leaq	0x8(%rdx), %rax
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1075:
    00000248: 	movq	%rax, %rdx
    0000024b: 	movq	(%rax), %rcx
    0000024e: 	leaq	0x8(%rax), %rax
    00000252: 	cmpq	%rcx, %rsi
    00000255: 	ja	.Ltmp1075 # Offset: 597
    00000257: 	cmpq	%rdx, %rdi
    0000025a: 	jbe	.Ltmp1073 # Offset: 602
.Ltmp1074:
    00000260: 	movq	%rcx, (%rdi)
    00000263: 	movq	%r8, (%rdx)
.Ltmp1072:
    00000266: 	movq	%rdi, %r13
    00000269: 	jmp	.Ltmp1076 # Offset: 617
.Ltmp1056:
    0000026b: 	movq	%r12, %rax
    0000026e: 	subq	%rbx, %rax
    00000271: 	cmpq	$0x8, %rax
    00000275: 	jle	.Ltmp1077 # Offset: 629
    0000027b: 	movq	(%rbx), %rsi
    0000027e: 	movq	%r12, %r13
    00000281: 	movq	%rbx, %rdx
    00000284: 	nopl	(%rax) # Size: 4
.Ltmp1082:
    00000288: 	leaq	-0x8(%r13), %r8
    0000028c: 	cmpq	%rsi, %rdi
    0000028f: 	ja	.Ltmp1078 # Offset: 655
    00000291: 	cmpq	%rdx, %r8
    00000294: 	jbe	.Ltmp1079 # Offset: 660
    0000029a: 	movq	(%rdx), %rcx
    0000029d: 	cmpq	%rcx, %rsi
    000002a0: 	jbe	.Ltmp1080 # Offset: 672
    000002a2: 	leaq	0x8(%rdx), %rax
    000002a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1081:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movq	(%rax), %rcx
    000002b6: 	leaq	0x8(%rax), %rax
    000002ba: 	cmpq	%rcx, %rsi
    000002bd: 	ja	.Ltmp1081 # Offset: 701
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	jbe	.Ltmp1079 # Offset: 706
.Ltmp1080:
    000002c8: 	movq	%rcx, (%r8)
    000002cb: 	movq	%rdi, (%rdx)
.Ltmp1078:
    000002ce: 	movq	-0x8(%r8), %rdi
    000002d2: 	movq	%r8, %r13
    000002d5: 	jmp	.Ltmp1082 # Offset: 725
.Ltmp1117:
    000002d7: 	movq	%r13, 0x28(%rsp)
    000002dc: 	leaq	0x10(%rsp), %r14
    000002e1: 	leaq	0x20(%rsp), %r13
    000002e6: 	movq	%r14, %rsi
    000002e9: 	movq	%r13, %rdi
    000002ec: 	movq	%rbx, 0x18(%rsp)
    000002f1: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 753
    000002f6: 	movq	%r14, %rsi
    000002f9: 	movq	%r13, %rdi
    000002fc: 	movq	%r12, 0x18(%rsp)
    00000301: 	movq	%rbx, 0x28(%rsp)
    00000306: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 774
.Ltmp1077:
    0000030b: 	movq	%rbp, %rax
    0000030e: 	subq	%r12, %rax
    00000311: 	cmpq	$0x8, %rax
    00000315: 	jle	.Ltmp1046 # Offset: 789
    0000031b: 	movq	(%r12), %rsi
    0000031f: 	movq	%rbp, %rbx
    00000322: 	movq	%r12, %rdx
    00000325: 	nopl	(%rax) # Size: 3
.Ltmp1087:
    00000328: 	movq	-0x8(%rbx), %r8
    0000032c: 	leaq	-0x8(%rbx), %rdi
    00000330: 	cmpq	%r8, %rsi
    00000333: 	jb	.Ltmp1083 # Offset: 819
    00000335: 	cmpq	%rdx, %rdi
    00000338: 	jbe	.Ltmp1084 # Offset: 824
    0000033e: 	movq	(%rdx), %rcx
    00000341: 	cmpq	%rcx, %rsi
    00000344: 	jbe	.Ltmp1085 # Offset: 836
    00000346: 	leaq	0x8(%rdx), %rax
    0000034a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1086:
    00000350: 	movq	%rax, %rdx
    00000353: 	movq	(%rax), %rcx
    00000356: 	leaq	0x8(%rax), %rax
    0000035a: 	cmpq	%rcx, %rsi
    0000035d: 	ja	.Ltmp1086 # Offset: 861
    0000035f: 	cmpq	%rdx, %rdi
    00000362: 	jbe	.Ltmp1084 # Offset: 866
.Ltmp1085:
    00000368: 	movq	%rcx, (%rdi)
    0000036b: 	movq	%r8, (%rdx)
.Ltmp1083:
    0000036e: 	movq	%rdi, %rbx
    00000371: 	jmp	.Ltmp1087 # Offset: 881
.Ltmp1067:
    00000373: 	movq	%r13, %rax
    00000376: 	subq	%r9, %rax
    00000379: 	cmpq	$0x8, %rax
    0000037d: 	jle	.Ltmp1088 # Offset: 893
    00000383: 	movq	(%r9), %rsi
    00000386: 	movq	%r13, %r14
    00000389: 	movq	%r9, %rdx
    0000038c: 	nopl	(%rax) # Size: 4
.Ltmp1093:
    00000390: 	movq	-0x8(%r14), %r8
    00000394: 	leaq	-0x8(%r14), %rdi
    00000398: 	cmpq	%r8, %rsi
    0000039b: 	jb	.Ltmp1089 # Offset: 923
    0000039d: 	cmpq	%rdx, %rdi
    000003a0: 	jbe	.Ltmp1090 # Offset: 928
    000003a2: 	movq	(%rdx), %rcx
    000003a5: 	cmpq	%rsi, %rcx
    000003a8: 	jae	.Ltmp1091 # Offset: 936
    000003aa: 	leaq	0x8(%rdx), %rax
    000003ae: 	nop # Size: 2
.Ltmp1092:
    000003b0: 	movq	%rax, %rdx
    000003b3: 	movq	(%rax), %rcx
    000003b6: 	leaq	0x8(%rax), %rax
    000003ba: 	cmpq	%rcx, %rsi
    000003bd: 	ja	.Ltmp1092 # Offset: 957
    000003bf: 	cmpq	%rdx, %rdi
    000003c2: 	jbe	.Ltmp1090 # Offset: 962
.Ltmp1091:
    000003c4: 	movq	%rcx, (%rdi)
    000003c7: 	movq	%r8, (%rdx)
.Ltmp1089:
    000003ca: 	movq	%rdi, %r14
    000003cd: 	jmp	.Ltmp1093 # Offset: 973
.Ltmp1090:
    000003cf: 	leaq	0x20(%rsp), %r15
    000003d4: 	leaq	0x10(%rsp), %rsi
    000003d9: 	movq	%r14, 0x18(%rsp)
    000003de: 	movq	%r15, %rdi
    000003e1: 	movq	%rsi, 0x8(%rsp)
    000003e6: 	movq	%r9, 0x28(%rsp)
    000003eb: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1003
    000003f0: 	movq	0x8(%rsp), %rsi
    000003f5: 	movq	%r15, %rdi
    000003f8: 	movq	%r13, 0x18(%rsp)
    000003fd: 	movq	%r14, 0x28(%rsp)
    00000402: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1026
.Ltmp1088:
    00000407: 	movq	%r12, %rax
    0000040a: 	subq	%r13, %rax
    0000040d: 	cmpq	$0x8, %rax
    00000411: 	jle	.Ltmp1065 # Offset: 1041
    00000417: 	movq	(%r13), %rcx
    0000041b: 	movq	%r12, %r14
    0000041e: 	movq	%r13, %rax
    00000421: 	nopl	(%rax) # Size: 7
.Ltmp1098:
    00000428: 	movq	-0x8(%r14), %rdi
    0000042c: 	leaq	-0x8(%r14), %rsi
    00000430: 	cmpq	%rdi, %rcx
    00000433: 	jb	.Ltmp1094 # Offset: 1075
    00000435: 	cmpq	%rax, %rsi
    00000438: 	jbe	.Ltmp1095 # Offset: 1080
    0000043e: 	movq	(%rax), %rdx
    00000441: 	cmpq	%rcx, %rdx
    00000444: 	jae	.Ltmp1096 # Offset: 1092
    00000446: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1097:
    00000450: 	movq	0x8(%rax), %rdx
    00000454: 	addq	$0x8, %rax
    00000458: 	cmpq	%rdx, %rcx
    0000045b: 	ja	.Ltmp1097 # Offset: 1115
    0000045d: 	cmpq	%rax, %rsi
    00000460: 	jbe	.Ltmp1095 # Offset: 1120
.Ltmp1096:
    00000466: 	movq	%rdx, (%rsi)
    00000469: 	movq	%rdi, (%rax)
.Ltmp1094:
    0000046c: 	movq	%rsi, %r14
    0000046f: 	jmp	.Ltmp1098 # Offset: 1135
.Ltmp1073:
    00000471: 	movq	%r13, %rax
    00000474: 	subq	%r12, %rax
    00000477: 	cmpq	$0x8, %rax
    0000047b: 	jle	.Ltmp1099 # Offset: 1147
    00000481: 	movq	(%r12), %rsi
    00000485: 	movq	%r13, %r14
    00000488: 	movq	%r12, %rdx
    0000048b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1104:
    00000490: 	movq	-0x8(%r14), %r8
    00000494: 	leaq	-0x8(%r14), %rdi
    00000498: 	cmpq	%r8, %rsi
    0000049b: 	jb	.Ltmp1100 # Offset: 1179
    0000049d: 	cmpq	%rdx, %rdi
    000004a0: 	jbe	.Ltmp1101 # Offset: 1184
    000004a2: 	movq	(%rdx), %rcx
    000004a5: 	cmpq	%rsi, %rcx
    000004a8: 	jae	.Ltmp1102 # Offset: 1192
    000004aa: 	leaq	0x8(%rdx), %rax
    000004ae: 	nop # Size: 2
.Ltmp1103:
    000004b0: 	movq	%rax, %rdx
    000004b3: 	movq	(%rax), %rcx
    000004b6: 	leaq	0x8(%rax), %rax
    000004ba: 	cmpq	%rcx, %rsi
    000004bd: 	ja	.Ltmp1103 # Offset: 1213
    000004bf: 	cmpq	%rdx, %rdi
    000004c2: 	jbe	.Ltmp1101 # Offset: 1218
.Ltmp1102:
    000004c4: 	movq	%rcx, (%rdi)
    000004c7: 	movq	%r8, (%rdx)
.Ltmp1100:
    000004ca: 	movq	%rdi, %r14
    000004cd: 	jmp	.Ltmp1104 # Offset: 1229
.Ltmp1101:
    000004cf: 	movq	%r12, 0x28(%rsp)
    000004d4: 	leaq	0x10(%rsp), %r15
    000004d9: 	leaq	0x20(%rsp), %r12
    000004de: 	movq	%r15, %rsi
    000004e1: 	movq	%r12, %rdi
    000004e4: 	movq	%r14, 0x18(%rsp)
    000004e9: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1257
    000004ee: 	movq	%r15, %rsi
    000004f1: 	movq	%r12, %rdi
    000004f4: 	movq	%r13, 0x18(%rsp)
    000004f9: 	movq	%r14, 0x28(%rsp)
    000004fe: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1278
.Ltmp1099:
    00000503: 	movq	%rbx, %rax
    00000506: 	subq	%r13, %rax
    00000509: 	cmpq	$0x8, %rax
    0000050d: 	jle	.Ltmp1071 # Offset: 1293
    00000513: 	movq	(%r13), %rsi
    00000517: 	movq	%rbx, %r12
    0000051a: 	movq	%r13, %rdx
    0000051d: 	nopl	(%rax) # Size: 3
.Ltmp1109:
    00000520: 	movq	-0x8(%r12), %r8
    00000525: 	leaq	-0x8(%r12), %rdi
    0000052a: 	cmpq	%r8, %rsi
    0000052d: 	jb	.Ltmp1105 # Offset: 1325
    0000052f: 	cmpq	%rdx, %rdi
    00000532: 	jbe	.Ltmp1106 # Offset: 1330
    00000538: 	movq	(%rdx), %rcx
    0000053b: 	cmpq	%rsi, %rcx
    0000053e: 	jae	.Ltmp1107 # Offset: 1342
    00000540: 	leaq	0x8(%rdx), %rax
    00000544: 	nopl	(%rax) # Size: 4
.Ltmp1108:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movq	(%rax), %rcx
    0000054e: 	leaq	0x8(%rax), %rax
    00000552: 	cmpq	%rcx, %rsi
    00000555: 	ja	.Ltmp1108 # Offset: 1365
    00000557: 	cmpq	%rdx, %rdi
    0000055a: 	jbe	.Ltmp1106 # Offset: 1370
.Ltmp1107:
    00000560: 	movq	%rcx, (%rdi)
    00000563: 	movq	%r8, (%rdx)
.Ltmp1105:
    00000566: 	movq	%rdi, %r12
    00000569: 	jmp	.Ltmp1109 # Offset: 1385
.Ltmp1079:
    0000056b: 	movq	%r13, %rax
    0000056e: 	subq	%rbx, %rax
    00000571: 	cmpq	$0x8, %rax
    00000575: 	jle	.Ltmp1110 # Offset: 1397
    00000577: 	movq	(%rbx), %rsi
    0000057a: 	movq	%r13, %r14
    0000057d: 	movq	%rbx, %rdx
.Ltmp1115:
    00000580: 	movq	-0x8(%r14), %r8
    00000584: 	leaq	-0x8(%r14), %rdi
    00000588: 	cmpq	%r8, %rsi
    0000058b: 	jb	.Ltmp1111 # Offset: 1419
    0000058d: 	cmpq	%rdx, %rdi
    00000590: 	jbe	.Ltmp1112 # Offset: 1424
    00000592: 	movq	(%rdx), %rcx
    00000595: 	cmpq	%rsi, %rcx
    00000598: 	jae	.Ltmp1113 # Offset: 1432
    0000059a: 	leaq	0x8(%rdx), %rax
    0000059e: 	nop # Size: 2
.Ltmp1114:
    000005a0: 	movq	%rax, %rdx
    000005a3: 	movq	(%rax), %rcx
    000005a6: 	leaq	0x8(%rax), %rax
    000005aa: 	cmpq	%rcx, %rsi
    000005ad: 	ja	.Ltmp1114 # Offset: 1453
    000005af: 	cmpq	%rdx, %rdi
    000005b2: 	jbe	.Ltmp1112 # Offset: 1458
.Ltmp1113:
    000005b4: 	movq	%rcx, (%rdi)
    000005b7: 	movq	%r8, (%rdx)
.Ltmp1111:
    000005ba: 	movq	%rdi, %r14
    000005bd: 	jmp	.Ltmp1115 # Offset: 1469
.Ltmp1112:
    000005bf: 	movq	%rbx, 0x28(%rsp)
    000005c4: 	leaq	0x20(%rsp), %r15
    000005c9: 	leaq	0x10(%rsp), %rbx
    000005ce: 	movq	%rbx, %rsi
    000005d1: 	movq	%r15, %rdi
    000005d4: 	movq	%r14, 0x18(%rsp)
    000005d9: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1497
    000005de: 	movq	%rbx, %rsi
    000005e1: 	movq	%r15, %rdi
    000005e4: 	movq	%r13, 0x18(%rsp)
    000005e9: 	movq	%r14, 0x28(%rsp)
    000005ee: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1518
.Ltmp1110:
    000005f3: 	movq	%r12, %rax
    000005f6: 	subq	%r13, %rax
    000005f9: 	cmpq	$0x8, %rax
    000005fd: 	jle	.Ltmp1077 # Offset: 1533
    00000603: 	movq	(%r13), %rsi
    00000607: 	movq	%r12, %rbx
    0000060a: 	movq	%r13, %rdx
    0000060d: 	nopl	(%rax) # Size: 3
.Ltmp1120:
    00000610: 	movq	-0x8(%rbx), %r8
    00000614: 	leaq	-0x8(%rbx), %rdi
    00000618: 	cmpq	%r8, %rsi
    0000061b: 	jb	.Ltmp1116 # Offset: 1563
    0000061d: 	cmpq	%rdx, %rdi
    00000620: 	jbe	.Ltmp1117 # Offset: 1568
    00000626: 	movq	(%rdx), %rcx
    00000629: 	cmpq	%rcx, %rsi
    0000062c: 	jbe	.Ltmp1118 # Offset: 1580
    0000062e: 	leaq	0x8(%rdx), %rax
    00000632: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1119:
    00000638: 	movq	%rax, %rdx
    0000063b: 	movq	(%rax), %rcx
    0000063e: 	leaq	0x8(%rax), %rax
    00000642: 	cmpq	%rcx, %rsi
    00000645: 	ja	.Ltmp1119 # Offset: 1605
    00000647: 	cmpq	%rdx, %rdi
    0000064a: 	jbe	.Ltmp1117 # Offset: 1610
.Ltmp1118:
    00000650: 	movq	%rcx, (%rdi)
    00000653: 	movq	%r8, (%rdx)
.Ltmp1116:
    00000656: 	movq	%rdi, %rbx
    00000659: 	jmp	.Ltmp1120 # Offset: 1625
.Ltmp1084:
    0000065b: 	movq	%rbx, %rax
    0000065e: 	subq	%r12, %rax
    00000661: 	cmpq	$0x8, %rax
    00000665: 	jle	.Ltmp1121 # Offset: 1637
    0000066b: 	movq	(%r12), %rsi
    0000066f: 	movq	%rbx, %r13
    00000672: 	movq	%r12, %rdx
    00000675: 	nopl	(%rax) # Size: 3
.Ltmp1126:
    00000678: 	movq	-0x8(%r13), %r8
    0000067c: 	leaq	-0x8(%r13), %rdi
    00000680: 	cmpq	%r8, %rsi
    00000683: 	jb	.Ltmp1122 # Offset: 1667
    00000685: 	cmpq	%rdx, %rdi
    00000688: 	jbe	.Ltmp1123 # Offset: 1672
    0000068a: 	movq	(%rdx), %rcx
    0000068d: 	cmpq	%rsi, %rcx
    00000690: 	jae	.Ltmp1124 # Offset: 1680
    00000692: 	leaq	0x8(%rdx), %rax
    00000696: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1125:
    000006a0: 	movq	%rax, %rdx
    000006a3: 	movq	(%rax), %rcx
    000006a6: 	leaq	0x8(%rax), %rax
    000006aa: 	cmpq	%rcx, %rsi
    000006ad: 	ja	.Ltmp1125 # Offset: 1709
    000006af: 	cmpq	%rdx, %rdi
    000006b2: 	jbe	.Ltmp1123 # Offset: 1714
.Ltmp1124:
    000006b4: 	movq	%rcx, (%rdi)
    000006b7: 	movq	%r8, (%rdx)
.Ltmp1122:
    000006ba: 	movq	%rdi, %r13
    000006bd: 	jmp	.Ltmp1126 # Offset: 1725
.Ltmp1123:
    000006bf: 	movq	%r12, 0x28(%rsp)
    000006c4: 	leaq	0x10(%rsp), %r14
    000006c9: 	leaq	0x20(%rsp), %r12
    000006ce: 	movq	%r14, %rsi
    000006d1: 	movq	%r12, %rdi
    000006d4: 	movq	%r13, 0x18(%rsp)
    000006d9: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1753
    000006de: 	movq	%r14, %rsi
    000006e1: 	movq	%r12, %rdi
    000006e4: 	movq	%rbx, 0x18(%rsp)
    000006e9: 	movq	%r13, 0x28(%rsp)
    000006ee: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1774
.Ltmp1121:
    000006f3: 	movq	%rbp, %rax
    000006f6: 	subq	%rbx, %rax
    000006f9: 	cmpq	$0x8, %rax
    000006fd: 	jle	.Ltmp1046 # Offset: 1789
    00000703: 	movq	(%rbx), %rsi
    00000706: 	movq	%rbp, %r12
    00000709: 	movq	%rbx, %rdx
    0000070c: 	nopl	(%rax) # Size: 4
.Ltmp1131:
    00000710: 	movq	-0x8(%r12), %r8
    00000715: 	leaq	-0x8(%r12), %rdi
    0000071a: 	cmpq	%r8, %rsi
    0000071d: 	jb	.Ltmp1127 # Offset: 1821
    0000071f: 	cmpq	%rdx, %rdi
    00000722: 	jbe	.Ltmp1128 # Offset: 1826
    00000724: 	movq	(%rdx), %rcx
    00000727: 	cmpq	%rsi, %rcx
    0000072a: 	jae	.Ltmp1129 # Offset: 1834
    0000072c: 	leaq	0x8(%rdx), %rax
.Ltmp1130:
    00000730: 	movq	%rax, %rdx
    00000733: 	movq	(%rax), %rcx
    00000736: 	leaq	0x8(%rax), %rax
    0000073a: 	cmpq	%rcx, %rsi
    0000073d: 	ja	.Ltmp1130 # Offset: 1853
    0000073f: 	cmpq	%rdx, %rdi
    00000742: 	jbe	.Ltmp1128 # Offset: 1858
.Ltmp1129:
    00000744: 	movq	%rcx, (%rdi)
    00000747: 	movq	%r8, (%rdx)
.Ltmp1127:
    0000074a: 	movq	%rdi, %r12
    0000074d: 	jmp	.Ltmp1131 # Offset: 1869
.Ltmp1128:
    0000074f: 	leaq	0x10(%rsp), %r14
    00000754: 	leaq	0x20(%rsp), %r13
    00000759: 	movq	%r12, 0x18(%rsp)
    0000075e: 	movq	%r14, %rsi
    00000761: 	movq	%r13, %rdi
    00000764: 	movq	%rbx, 0x28(%rsp)
    00000769: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1897
    0000076e: 	movq	%r14, %rsi
    00000771: 	movq	%r13, %rdi
    00000774: 	movq	%rbp, 0x18(%rsp)
    00000779: 	movq	%r12, 0x28(%rsp)
    0000077e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1918
    00000783: 	jmp	.Ltmp1046 # Offset: 1923
.Ltmp1106:
    00000788: 	movq	%r13, 0x28(%rsp)
    0000078d: 	leaq	0x10(%rsp), %r14
    00000792: 	leaq	0x20(%rsp), %r13
    00000797: 	movq	%r14, %rsi
    0000079a: 	movq	%r13, %rdi
    0000079d: 	movq	%r12, 0x18(%rsp)
    000007a2: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1954
    000007a7: 	movq	%r14, %rsi
    000007aa: 	movq	%r13, %rdi
    000007ad: 	movq	%rbx, 0x18(%rsp)
    000007b2: 	movq	%r12, 0x28(%rsp)
    000007b7: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1975
    000007bc: 	jmp	.Ltmp1071 # Offset: 1980
.Ltmp1054:
    000007c1: 	callq	__stack_chk_fail@PLT # Offset: 1985
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_"

Binary Function "_Z14test_quicksortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_quicksortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_quicksortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_array.cpp/1
  Number      : 58
  State       : disassembled
  Address     : 0x88e0
  Size        : 0x1269
  MaxSize     : 0x1270
  Offset      : 0x88e0
  Section     : .text
  Orc Section : .local.text._Z14test_quicksortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x88, %rsp
    00000011: 	movq	%rcx, 0x20(%rsp)
    00000016: 	movq	%rdi, 0x8(%rsp)
    0000001b: 	movq	%rsi, 0x10(%rsp)
    00000020: 	movq	%rdx, 0x18(%rsp)
    00000025: 	movq	%r8, 0x28(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x78(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movl	iterations(%rip), %ecx
    00000045: 	movq	%rax, start_time(%rip)
    0000004c: 	testl	%ecx, %ecx
    0000004e: 	jle	.Ltmp1132 # Offset: 78
    00000054: 	movl	%ecx, 0x4(%rsp)
    00000058: 	xorl	%r15d, %r15d
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1145:
    00000060: 	movq	0x18(%rsp), %rax
    00000065: 	movq	0x8(%rax), %rbx
    00000069: 	movq	0x10(%rsp), %rax
    0000006e: 	movq	0x8(%rax), %rsi
    00000072: 	movq	0x8(%rsp), %rax
    00000077: 	movq	0x8(%rax), %rdx
    0000007b: 	cmpq	%rdx, %rsi
    0000007e: 	je	.Ltmp1133 # Offset: 126
    00000080: 	subq	%rdx, %rsi
    00000083: 	leaq	0x8(%rdx), %rax
    00000087: 	leaq	-0x8(%rsi), %rdi
    0000008b: 	cmpq	%rax, %rbx
    0000008e: 	je	.Ltmp1134 # Offset: 142
    00000094: 	cmpq	$0x10, %rdi
    00000098: 	jbe	.Ltmp1134 # Offset: 152
    0000009e: 	shrq	$0x3, %rdi
    000000a2: 	xorl	%eax, %eax
    000000a4: 	addq	$0x1, %rdi
    000000a8: 	movq	%rdi, %rsi
    000000ab: 	shrq	%rsi
    000000ae: 	shlq	$0x4, %rsi
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1135:
    000000b8: 	movdqu	(%rdx,%rax), %xmm1
    000000bd: 	movups	%xmm1, (%rbx,%rax)
    000000c1: 	addq	$0x10, %rax
    000000c5: 	cmpq	%rax, %rsi
    000000c8: 	jne	.Ltmp1135 # Offset: 200
    000000ca: 	movq	%rdi, %rax
    000000cd: 	andq	$-0x2, %rax
    000000d1: 	leaq	(,%rax,8), %rsi
    000000d9: 	addq	%rsi, %rdx
    000000dc: 	addq	%rbx, %rsi
    000000df: 	cmpq	%rdi, %rax
    000000e2: 	je	.Ltmp1133 # Offset: 226
    000000e4: 	movq	(%rdx), %rax
    000000e7: 	movq	%rax, (%rsi)
.Ltmp1133:
    000000ea: 	movq	0x20(%rsp), %rax
    000000ef: 	movq	0x8(%rax), %r13
    000000f3: 	movq	%r13, %rax
    000000f6: 	subq	%rbx, %rax
    000000f9: 	cmpq	$0x8, %rax
    000000fd: 	jle	.Ltmp1136 # Offset: 253
    00000103: 	movq	(%rbx), %r8
    00000106: 	movq	%r13, %rbp
    00000109: 	movq	%rbx, %rsi
    0000010c: 	nopl	(%rax) # Size: 4
.Ltmp1141:
    00000110: 	movq	-0x8(%rbp), %rax
    00000114: 	leaq	-0x8(%rbp), %rdi
    00000118: 	cmpq	%rax, %r8
    0000011b: 	jb	.Ltmp1137 # Offset: 283
    0000011d: 	cmpq	%rsi, %rdi
    00000120: 	jbe	.Ltmp1138 # Offset: 288
    00000126: 	movq	(%rsi), %rcx
    00000129: 	cmpq	%rcx, %r8
    0000012c: 	jbe	.Ltmp1139 # Offset: 300
    0000012e: 	leaq	0x8(%rsi), %rdx
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1140:
    00000138: 	movq	%rdx, %rsi
    0000013b: 	movq	(%rdx), %rcx
    0000013e: 	leaq	0x8(%rdx), %rdx
    00000142: 	cmpq	%rcx, %r8
    00000145: 	ja	.Ltmp1140 # Offset: 325
    00000147: 	cmpq	%rsi, %rdi
    0000014a: 	jbe	.Ltmp1138 # Offset: 330
.Ltmp1139:
    00000150: 	movq	%rcx, (%rdi)
    00000153: 	movq	%rax, (%rsi)
.Ltmp1137:
    00000156: 	movq	%rdi, %rbp
    00000159: 	jmp	.Ltmp1141 # Offset: 345
.Ltmp1256:
    0000015b: 	movq	%r12, 0x68(%rsp)
    00000160: 	leaq	0x50(%rsp), %r14
    00000165: 	leaq	0x60(%rsp), %r12
    0000016a: 	movq	%r14, %rsi
    0000016d: 	movq	%r12, %rdi
    00000170: 	movq	%rbp, 0x58(%rsp)
    00000175: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 373
    0000017a: 	movq	%r14, %rsi
    0000017d: 	movq	%r12, %rdi
    00000180: 	movq	%r13, 0x58(%rsp)
    00000185: 	movq	%rbp, 0x68(%rsp)
    0000018a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 394
    0000018f: 	nop # Size: 1
.Ltmp1136:
    00000190: 	addq	$0x8, %rbx
    00000194: 	jmp	.Ltmp1142 # Offset: 404
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1144:
    000001a0: 	addq	$0x8, %rbx
    000001a4: 	movq	-0x10(%rbx), %rdi
    000001a8: 	cmpq	%rdi, (%rax)
    000001ab: 	jb	.Ltmp1143 # Offset: 427
.Ltmp1142:
    000001b1: 	movq	%rbx, %rax
    000001b4: 	cmpq	%rbx, %r13
    000001b7: 	jne	.Ltmp1144 # Offset: 439
    000001b9: 	addl	$0x1, %r15d
    000001bd: 	cmpl	0x4(%rsp), %r15d
    000001c2: 	jl	.Ltmp1145 # Offset: 450
.Ltmp1132:
    000001c8: 	callq	clock@PLT # Offset: 456
    000001cd: 	movq	%rax, end_time(%rip)
    000001d4: 	movq	0x78(%rsp), %rdx
    000001d9: 	subq	%fs:0x28, %rdx
    000001e2: 	jne	.Ltmp1146 # Offset: 482
    000001e8: 	subq	start_time(%rip), %rax
    000001ef: 	pxor	%xmm0, %xmm0
    000001f3: 	movq	0x28(%rsp), %rdi
    000001f8: 	cvtsi2sd	%rax, %xmm0
    000001fd: 	divsd	DATAat0x13600(%rip), %xmm0
    00000205: 	addq	$0x88, %rsp
    0000020c: 	popq	%rbx
    0000020d: 	popq	%rbp
    0000020e: 	popq	%r12
    00000210: 	popq	%r13
    00000212: 	popq	%r14
    00000214: 	popq	%r15
    00000216: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1138:
    00000220: 	movq	%rbp, %rdx
    00000223: 	subq	%rbx, %rdx
    00000226: 	cmpq	$0x8, %rdx
    0000022a: 	jle	.Ltmp1147 # Offset: 554
    00000230: 	movq	(%rbx), %r8
    00000233: 	movq	%rbp, %r12
    00000236: 	movq	%rbx, %rsi
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp1152:
    00000240: 	leaq	-0x8(%r12), %rdi
    00000245: 	cmpq	%rax, %r8
    00000248: 	jb	.Ltmp1148 # Offset: 584
    0000024a: 	cmpq	%rsi, %rdi
    0000024d: 	jbe	.Ltmp1149 # Offset: 589
    00000253: 	movq	(%rsi), %rcx
    00000256: 	cmpq	%rcx, %r8
    00000259: 	jbe	.Ltmp1150 # Offset: 601
    0000025b: 	leaq	0x8(%rsi), %rdx
    0000025f: 	nop # Size: 1
.Ltmp1151:
    00000260: 	movq	%rdx, %rsi
    00000263: 	movq	(%rdx), %rcx
    00000266: 	leaq	0x8(%rdx), %rdx
    0000026a: 	cmpq	%rcx, %r8
    0000026d: 	ja	.Ltmp1151 # Offset: 621
    0000026f: 	cmpq	%rsi, %rdi
    00000272: 	jbe	.Ltmp1149 # Offset: 626
.Ltmp1150:
    00000278: 	movq	%rcx, (%rdi)
    0000027b: 	movq	%rax, (%rsi)
.Ltmp1148:
    0000027e: 	movq	-0x8(%rdi), %rax
    00000282: 	movq	%rdi, %r12
    00000285: 	jmp	.Ltmp1152 # Offset: 645
.Ltmp1289:
    00000287: 	movq	%r12, 0x68(%rsp)
    0000028c: 	leaq	0x60(%rsp), %r12
    00000291: 	leaq	0x50(%rsp), %rsi
    00000296: 	movq	%r12, %rdi
    00000299: 	movq	%rsi, 0x30(%rsp)
    0000029e: 	movq	%r14, 0x58(%rsp)
    000002a3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 675
    000002a8: 	movq	0x30(%rsp), %rsi
    000002ad: 	movq	%r12, %rdi
    000002b0: 	movq	%rbp, 0x58(%rsp)
    000002b5: 	movq	%r14, 0x68(%rsp)
    000002ba: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1147:
    000002c0: 	movq	%r13, %rax
    000002c3: 	subq	%rbp, %rax
    000002c6: 	cmpq	$0x8, %rax
    000002ca: 	jle	.Ltmp1136 # Offset: 714
    000002d0: 	movq	(%rbp), %r8
    000002d4: 	movq	%r13, %r12
    000002d7: 	movq	%rbp, %rsi
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1157:
    000002e0: 	movq	-0x8(%r12), %rax
    000002e5: 	leaq	-0x8(%r12), %rdi
    000002ea: 	cmpq	%rax, %r8
    000002ed: 	jb	.Ltmp1153 # Offset: 749
    000002ef: 	cmpq	%rsi, %rdi
    000002f2: 	jbe	.Ltmp1154 # Offset: 754
    000002f4: 	movq	(%rsi), %rcx
    000002f7: 	cmpq	%rcx, %r8
    000002fa: 	jbe	.Ltmp1155 # Offset: 762
    000002fc: 	leaq	0x8(%rsi), %rdx
.Ltmp1156:
    00000300: 	movq	%rdx, %rsi
    00000303: 	movq	(%rdx), %rcx
    00000306: 	leaq	0x8(%rdx), %rdx
    0000030a: 	cmpq	%rcx, %r8
    0000030d: 	ja	.Ltmp1156 # Offset: 781
    0000030f: 	cmpq	%rsi, %rdi
    00000312: 	jbe	.Ltmp1154 # Offset: 786
.Ltmp1155:
    00000314: 	movq	%rcx, (%rdi)
    00000317: 	movq	%rax, (%rsi)
.Ltmp1153:
    0000031a: 	movq	%rdi, %r12
    0000031d: 	jmp	.Ltmp1157 # Offset: 797
    0000031f: 	nop # Size: 1
.Ltmp1143:
    00000320: 	movq	0x28(%rsp), %rax
    00000325: 	leaq	DATAat0x131ba(%rip), %rsi
    0000032c: 	movl	$0x1, %edi
    00000331: 	addl	$0x1, %r15d
    00000335: 	movq	(%rax), %rdx
    00000338: 	xorl	%eax, %eax
    0000033a: 	callq	__printf_chk@PLT # Offset: 826
    0000033f: 	movl	iterations(%rip), %eax
    00000345: 	movl	%eax, 0x4(%rsp)
    00000349: 	cmpl	0x4(%rsp), %r15d
    0000034e: 	jl	.Ltmp1145 # Offset: 846
    00000354: 	jmp	.Ltmp1132 # Offset: 852
.Ltmp1154:
    00000359: 	movq	%r12, %rdx
    0000035c: 	subq	%rbp, %rdx
    0000035f: 	cmpq	$0x8, %rdx
    00000363: 	jle	.Ltmp1158 # Offset: 867
    00000369: 	movq	(%rbp), %r8
    0000036d: 	movq	%r12, %r14
    00000370: 	movq	%rbp, %rsi
    00000373: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1163:
    00000378: 	leaq	-0x8(%r14), %rdi
    0000037c: 	cmpq	%r8, %rax
    0000037f: 	ja	.Ltmp1159 # Offset: 895
    00000381: 	cmpq	%rsi, %rdi
    00000384: 	jbe	.Ltmp1160 # Offset: 900
    0000038a: 	movq	(%rsi), %rcx
    0000038d: 	cmpq	%r8, %rcx
    00000390: 	jae	.Ltmp1161 # Offset: 912
    00000392: 	leaq	0x8(%rsi), %rdx
    00000396: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1162:
    000003a0: 	movq	%rdx, %rsi
    000003a3: 	movq	(%rdx), %rcx
    000003a6: 	leaq	0x8(%rdx), %rdx
    000003aa: 	cmpq	%rcx, %r8
    000003ad: 	ja	.Ltmp1162 # Offset: 941
    000003af: 	cmpq	%rsi, %rdi
    000003b2: 	jbe	.Ltmp1160 # Offset: 946
.Ltmp1161:
    000003b8: 	movq	%rcx, (%rdi)
    000003bb: 	movq	%rax, (%rsi)
.Ltmp1159:
    000003be: 	movq	-0x8(%rdi), %rax
    000003c2: 	movq	%rdi, %r14
    000003c5: 	jmp	.Ltmp1163 # Offset: 965
.Ltmp1234:
    000003c7: 	movq	%rbp, 0x68(%rsp)
    000003cc: 	leaq	0x60(%rsp), %rbp
    000003d1: 	leaq	0x50(%rsp), %rsi
    000003d6: 	movq	%rbp, %rdi
    000003d9: 	movq	%rsi, 0x30(%rsp)
    000003de: 	movq	%r14, 0x58(%rsp)
    000003e3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 995
    000003e8: 	movq	0x30(%rsp), %rsi
    000003ed: 	movq	%rbp, %rdi
    000003f0: 	movq	%r12, 0x58(%rsp)
    000003f5: 	movq	%r14, 0x68(%rsp)
    000003fa: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1018
.Ltmp1158:
    000003ff: 	movq	%r13, %rax
    00000402: 	subq	%r12, %rax
    00000405: 	cmpq	$0x8, %rax
    00000409: 	jle	.Ltmp1136 # Offset: 1033
    0000040f: 	movq	(%r12), %r8
    00000413: 	movq	%r13, %rbp
    00000416: 	movq	%r12, %rdx
    00000419: 	nopl	(%rax) # Size: 7
.Ltmp1168:
    00000420: 	movq	-0x8(%rbp), %rdi
    00000424: 	leaq	-0x8(%rbp), %rsi
    00000428: 	cmpq	%rdi, %r8
    0000042b: 	jb	.Ltmp1164 # Offset: 1067
    0000042d: 	cmpq	%rdx, %rsi
    00000430: 	jbe	.Ltmp1165 # Offset: 1072
    00000436: 	movq	(%rdx), %rcx
    00000439: 	cmpq	%rcx, %r8
    0000043c: 	jbe	.Ltmp1166 # Offset: 1084
    0000043e: 	leaq	0x8(%rdx), %rax
    00000442: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1167:
    00000448: 	movq	%rax, %rdx
    0000044b: 	movq	(%rax), %rcx
    0000044e: 	leaq	0x8(%rax), %rax
    00000452: 	cmpq	%rcx, %r8
    00000455: 	ja	.Ltmp1167 # Offset: 1109
    00000457: 	cmpq	%rdx, %rsi
    0000045a: 	jbe	.Ltmp1165 # Offset: 1114
.Ltmp1166:
    00000460: 	movq	%rcx, (%rsi)
    00000463: 	movq	%rdi, (%rdx)
.Ltmp1164:
    00000466: 	movq	%rsi, %rbp
    00000469: 	jmp	.Ltmp1168 # Offset: 1129
.Ltmp1149:
    0000046b: 	movq	%r12, %rdx
    0000046e: 	subq	%rbx, %rdx
    00000471: 	cmpq	$0x8, %rdx
    00000475: 	jle	.Ltmp1169 # Offset: 1141
    0000047b: 	movq	(%rbx), %r8
    0000047e: 	movq	%r12, %r14
    00000481: 	movq	%rbx, %rsi
    00000484: 	nopl	(%rax) # Size: 4
.Ltmp1174:
    00000488: 	leaq	-0x8(%r14), %rdi
    0000048c: 	cmpq	%r8, %rax
    0000048f: 	ja	.Ltmp1170 # Offset: 1167
    00000491: 	cmpq	%rsi, %rdi
    00000494: 	jbe	.Ltmp1171 # Offset: 1172
    0000049a: 	movq	(%rsi), %rcx
    0000049d: 	cmpq	%rcx, %r8
    000004a0: 	jbe	.Ltmp1172 # Offset: 1184
    000004a2: 	leaq	0x8(%rsi), %rdx
    000004a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1173:
    000004b0: 	movq	%rdx, %rsi
    000004b3: 	movq	(%rdx), %rcx
    000004b6: 	leaq	0x8(%rdx), %rdx
    000004ba: 	cmpq	%rcx, %r8
    000004bd: 	ja	.Ltmp1173 # Offset: 1213
    000004bf: 	cmpq	%rsi, %rdi
    000004c2: 	jbe	.Ltmp1171 # Offset: 1218
.Ltmp1172:
    000004c8: 	movq	%rcx, (%rdi)
    000004cb: 	movq	%rax, (%rsi)
.Ltmp1170:
    000004ce: 	movq	-0x8(%rdi), %rax
    000004d2: 	movq	%rdi, %r14
    000004d5: 	jmp	.Ltmp1174 # Offset: 1237
.Ltmp1278:
    000004d7: 	leaq	0x50(%rsp), %rsi
    000004dc: 	leaq	0x60(%rsp), %rdi
    000004e1: 	movq	%r14, 0x58(%rsp)
    000004e6: 	movq	%rsi, 0x38(%rsp)
    000004eb: 	movq	%rdi, 0x30(%rsp)
    000004f0: 	movq	%r8, 0x68(%rsp)
    000004f5: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1269
    000004fa: 	movq	0x38(%rsp), %rsi
    000004ff: 	movq	0x30(%rsp), %rdi
    00000504: 	movq	%r12, 0x58(%rsp)
    00000509: 	movq	%r14, 0x68(%rsp)
    0000050e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1294
.Ltmp1169:
    00000513: 	movq	%rbp, %rax
    00000516: 	subq	%r12, %rax
    00000519: 	cmpq	$0x8, %rax
    0000051d: 	jle	.Ltmp1147 # Offset: 1309
    00000523: 	movq	(%r12), %r8
    00000527: 	movq	%rbp, %r14
    0000052a: 	movq	%r12, %rdx
    0000052d: 	nopl	(%rax) # Size: 3
.Ltmp1179:
    00000530: 	movq	-0x8(%r14), %rdi
    00000534: 	leaq	-0x8(%r14), %rsi
    00000538: 	cmpq	%rdi, %r8
    0000053b: 	jb	.Ltmp1175 # Offset: 1339
    0000053d: 	cmpq	%rdx, %rsi
    00000540: 	jbe	.Ltmp1176 # Offset: 1344
    00000542: 	movq	(%rdx), %rcx
    00000545: 	cmpq	%r8, %rcx
    00000548: 	jae	.Ltmp1177 # Offset: 1352
    0000054a: 	leaq	0x8(%rdx), %rax
    0000054e: 	nop # Size: 2
.Ltmp1178:
    00000550: 	movq	%rax, %rdx
    00000553: 	movq	(%rax), %rcx
    00000556: 	leaq	0x8(%rax), %rax
    0000055a: 	cmpq	%rcx, %r8
    0000055d: 	ja	.Ltmp1178 # Offset: 1373
    0000055f: 	cmpq	%rdx, %rsi
    00000562: 	jbe	.Ltmp1176 # Offset: 1378
.Ltmp1177:
    00000564: 	movq	%rcx, (%rsi)
    00000567: 	movq	%rdi, (%rdx)
.Ltmp1175:
    0000056a: 	movq	%rsi, %r14
    0000056d: 	jmp	.Ltmp1179 # Offset: 1389
.Ltmp1134:
    0000056f: 	xorl	%eax, %eax
    00000571: 	nopl	(%rax) # Size: 7
.Ltmp1180:
    00000578: 	movq	(%rdx,%rax), %rcx
    0000057c: 	movq	%rcx, (%rbx,%rax)
    00000580: 	addq	$0x8, %rax
    00000584: 	cmpq	%rax, %rsi
    00000587: 	jne	.Ltmp1180 # Offset: 1415
    00000589: 	jmp	.Ltmp1133 # Offset: 1417
.Ltmp1176:
    0000058e: 	movq	%r14, %rax
    00000591: 	subq	%r12, %rax
    00000594: 	cmpq	$0x8, %rax
    00000598: 	jle	.Ltmp1181 # Offset: 1432
    0000059e: 	movq	(%r12), %r9
    000005a2: 	movq	%r14, %r8
    000005a5: 	movq	%r12, %rdx
    000005a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1186:
    000005b0: 	leaq	-0x8(%r8), %rsi
    000005b4: 	cmpq	%rdi, %r9
    000005b7: 	jb	.Ltmp1182 # Offset: 1463
    000005b9: 	cmpq	%rdx, %rsi
    000005bc: 	jbe	.Ltmp1183 # Offset: 1468
    000005c2: 	movq	(%rdx), %rcx
    000005c5: 	cmpq	%rcx, %r9
    000005c8: 	jbe	.Ltmp1184 # Offset: 1480
    000005ca: 	leaq	0x8(%rdx), %rax
    000005ce: 	nop # Size: 2
.Ltmp1185:
    000005d0: 	movq	%rax, %rdx
    000005d3: 	movq	(%rax), %rcx
    000005d6: 	leaq	0x8(%rax), %rax
    000005da: 	cmpq	%rcx, %r9
    000005dd: 	ja	.Ltmp1185 # Offset: 1501
    000005df: 	cmpq	%rdx, %rsi
    000005e2: 	jbe	.Ltmp1183 # Offset: 1506
.Ltmp1184:
    000005e8: 	movq	%rcx, (%rsi)
    000005eb: 	movq	%rdi, (%rdx)
.Ltmp1182:
    000005ee: 	movq	-0x8(%rsi), %rdi
    000005f2: 	movq	%rsi, %r8
    000005f5: 	jmp	.Ltmp1186 # Offset: 1525
.Ltmp1300:
    000005f7: 	leaq	0x50(%rsp), %rsi
    000005fc: 	leaq	0x60(%rsp), %rdi
    00000601: 	movq	%r12, 0x58(%rsp)
    00000606: 	movq	%rsi, 0x38(%rsp)
    0000060b: 	movq	%rdi, 0x30(%rsp)
    00000610: 	movq	%r8, 0x68(%rsp)
    00000615: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1557
    0000061a: 	movq	0x38(%rsp), %rsi
    0000061f: 	movq	0x30(%rsp), %rdi
    00000624: 	movq	%r14, 0x58(%rsp)
    00000629: 	movq	%r12, 0x68(%rsp)
    0000062e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 1582
.Ltmp1181:
    00000633: 	movq	%rbp, %rax
    00000636: 	subq	%r14, %rax
    00000639: 	cmpq	$0x8, %rax
    0000063d: 	jle	.Ltmp1147 # Offset: 1597
    00000643: 	movq	(%r14), %rdi
    00000646: 	movq	%rbp, %r12
    00000649: 	movq	%r14, %rdx
    0000064c: 	nopl	(%rax) # Size: 4
.Ltmp1191:
    00000650: 	movq	-0x8(%r12), %r8
    00000655: 	leaq	-0x8(%r12), %rsi
    0000065a: 	cmpq	%r8, %rdi
    0000065d: 	jb	.Ltmp1187 # Offset: 1629
    0000065f: 	cmpq	%rdx, %rsi
    00000662: 	jbe	.Ltmp1188 # Offset: 1634
    00000668: 	movq	(%rdx), %rcx
    0000066b: 	cmpq	%rcx, %rdi
    0000066e: 	jbe	.Ltmp1189 # Offset: 1646
    00000670: 	leaq	0x8(%rdx), %rax
    00000674: 	nopl	(%rax) # Size: 4
.Ltmp1190:
    00000678: 	movq	%rax, %rdx
    0000067b: 	movq	(%rax), %rcx
    0000067e: 	leaq	0x8(%rax), %rax
    00000682: 	cmpq	%rcx, %rdi
    00000685: 	ja	.Ltmp1190 # Offset: 1669
    00000687: 	cmpq	%rdx, %rsi
    0000068a: 	jbe	.Ltmp1188 # Offset: 1674
.Ltmp1189:
    00000690: 	movq	%rcx, (%rsi)
    00000693: 	movq	%r8, (%rdx)
.Ltmp1187:
    00000696: 	movq	%rsi, %r12
    00000699: 	jmp	.Ltmp1191 # Offset: 1689
.Ltmp1171:
    0000069b: 	movq	%r14, %rdx
    0000069e: 	subq	%rbx, %rdx
    000006a1: 	cmpq	$0x8, %rdx
    000006a5: 	jle	.Ltmp1192 # Offset: 1701
    000006a7: 	movq	(%rbx), %rdi
    000006aa: 	movq	%r14, %r8
    000006ad: 	movq	%rbx, %rdx
.Ltmp1197:
    000006b0: 	leaq	-0x8(%r8), %rsi
    000006b4: 	cmpq	%rdi, %rax
    000006b7: 	ja	.Ltmp1193 # Offset: 1719
    000006b9: 	cmpq	%rdx, %rsi
    000006bc: 	jbe	.Ltmp1194 # Offset: 1724
    000006be: 	movq	(%rdx), %rcx
    000006c1: 	cmpq	%rcx, %rdi
    000006c4: 	jbe	.Ltmp1195 # Offset: 1732
    000006c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1196:
    000006d0: 	movq	0x8(%rdx), %rcx
    000006d4: 	addq	$0x8, %rdx
    000006d8: 	cmpq	%rcx, %rdi
    000006db: 	ja	.Ltmp1196 # Offset: 1755
    000006dd: 	cmpq	%rdx, %rsi
    000006e0: 	jbe	.Ltmp1194 # Offset: 1760
.Ltmp1195:
    000006e2: 	movq	%rcx, (%rsi)
    000006e5: 	movq	%rax, (%rdx)
.Ltmp1193:
    000006e8: 	movq	-0x8(%rsi), %rax
    000006ec: 	movq	%rsi, %r8
    000006ef: 	jmp	.Ltmp1197 # Offset: 1775
.Ltmp1194:
    000006f1: 	movq	%r8, %rax
    000006f4: 	subq	%rbx, %rax
    000006f7: 	cmpq	$0x8, %rax
    000006fb: 	jg	.Ltmp1198 # Offset: 1787
    00000701: 	movq	%r14, %rax
    00000704: 	subq	%r8, %rax
    00000707: 	cmpq	$0x8, %rax
    0000070b: 	jg	.Ltmp1199 # Offset: 1803
.Ltmp1192:
    00000711: 	movq	%r12, %rax
    00000714: 	subq	%r14, %rax
    00000717: 	cmpq	$0x8, %rax
    0000071b: 	jle	.Ltmp1169 # Offset: 1819
    00000721: 	movq	(%r14), %rsi
    00000724: 	movq	%r12, %r8
    00000727: 	movq	%r14, %rax
    0000072a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1204:
    00000730: 	movq	-0x8(%r8), %rdi
    00000734: 	leaq	-0x8(%r8), %rcx
    00000738: 	cmpq	%rdi, %rsi
    0000073b: 	jb	.Ltmp1200 # Offset: 1851
    0000073d: 	cmpq	%rax, %rcx
    00000740: 	jbe	.Ltmp1201 # Offset: 1856
    00000746: 	movq	(%rax), %rdx
    00000749: 	cmpq	%rdx, %rsi
    0000074c: 	jbe	.Ltmp1202 # Offset: 1868
    0000074e: 	nop # Size: 2
.Ltmp1203:
    00000750: 	movq	0x8(%rax), %rdx
    00000754: 	addq	$0x8, %rax
    00000758: 	cmpq	%rdx, %rsi
    0000075b: 	ja	.Ltmp1203 # Offset: 1883
    0000075d: 	cmpq	%rax, %rcx
    00000760: 	jbe	.Ltmp1201 # Offset: 1888
.Ltmp1202:
    00000766: 	movq	%rdx, (%rcx)
    00000769: 	movq	%rdi, (%rax)
.Ltmp1200:
    0000076c: 	movq	%rcx, %r8
    0000076f: 	jmp	.Ltmp1204 # Offset: 1903
.Ltmp1165:
    00000771: 	movq	%rbp, %rax
    00000774: 	subq	%r12, %rax
    00000777: 	cmpq	$0x8, %rax
    0000077b: 	jle	.Ltmp1205 # Offset: 1915
    00000781: 	movq	(%r12), %r8
    00000785: 	movq	%rbp, %r14
    00000788: 	movq	%r12, %rdx
    0000078b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1210:
    00000790: 	leaq	-0x8(%r14), %rsi
    00000794: 	cmpq	%r8, %rdi
    00000797: 	ja	.Ltmp1206 # Offset: 1943
    00000799: 	cmpq	%rdx, %rsi
    0000079c: 	jbe	.Ltmp1207 # Offset: 1948
    000007a2: 	movq	(%rdx), %rcx
    000007a5: 	cmpq	%r8, %rcx
    000007a8: 	jae	.Ltmp1208 # Offset: 1960
    000007aa: 	leaq	0x8(%rdx), %rax
    000007ae: 	nop # Size: 2
.Ltmp1209:
    000007b0: 	movq	%rax, %rdx
    000007b3: 	movq	(%rax), %rcx
    000007b6: 	leaq	0x8(%rax), %rax
    000007ba: 	cmpq	%rcx, %r8
    000007bd: 	ja	.Ltmp1209 # Offset: 1981
    000007bf: 	cmpq	%rdx, %rsi
    000007c2: 	jbe	.Ltmp1207 # Offset: 1986
.Ltmp1208:
    000007c8: 	movq	%rcx, (%rsi)
    000007cb: 	movq	%rdi, (%rdx)
.Ltmp1206:
    000007ce: 	movq	-0x8(%rsi), %rdi
    000007d2: 	movq	%rsi, %r14
    000007d5: 	jmp	.Ltmp1210 # Offset: 2005
.Ltmp1267:
    000007d7: 	movq	%r14, 0x68(%rsp)
    000007dc: 	leaq	0x60(%rsp), %r14
    000007e1: 	leaq	0x50(%rsp), %rsi
    000007e6: 	movq	%r14, %rdi
    000007e9: 	movq	%rsi, 0x30(%rsp)
    000007ee: 	movq	%r12, 0x58(%rsp)
    000007f3: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 2035
    000007f8: 	movq	0x30(%rsp), %rsi
    000007fd: 	movq	%r14, %rdi
    00000800: 	movq	%rbp, 0x58(%rsp)
    00000805: 	movq	%r12, 0x68(%rsp)
    0000080a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 2058
.Ltmp1205:
    0000080f: 	movq	%r13, %rax
    00000812: 	subq	%rbp, %rax
    00000815: 	cmpq	$0x8, %rax
    00000819: 	jle	.Ltmp1136 # Offset: 2073
    0000081f: 	movq	(%rbp), %rdi
    00000823: 	movq	%r13, %r12
    00000826: 	movq	%rbp, %rdx
    00000829: 	nopl	(%rax) # Size: 7
.Ltmp1215:
    00000830: 	movq	-0x8(%r12), %r8
    00000835: 	leaq	-0x8(%r12), %rsi
    0000083a: 	cmpq	%r8, %rdi
    0000083d: 	jb	.Ltmp1211 # Offset: 2109
    0000083f: 	cmpq	%rdx, %rsi
    00000842: 	jbe	.Ltmp1212 # Offset: 2114
    00000848: 	movq	(%rdx), %rcx
    0000084b: 	cmpq	%rdi, %rcx
    0000084e: 	jae	.Ltmp1213 # Offset: 2126
    00000850: 	leaq	0x8(%rdx), %rax
    00000854: 	nopl	(%rax) # Size: 4
.Ltmp1214:
    00000858: 	movq	%rax, %rdx
    0000085b: 	movq	(%rax), %rcx
    0000085e: 	leaq	0x8(%rax), %rax
    00000862: 	cmpq	%rcx, %rdi
    00000865: 	ja	.Ltmp1214 # Offset: 2149
    00000867: 	cmpq	%rdx, %rsi
    0000086a: 	jbe	.Ltmp1212 # Offset: 2154
.Ltmp1213:
    00000870: 	movq	%rcx, (%rsi)
    00000873: 	movq	%r8, (%rdx)
.Ltmp1211:
    00000876: 	movq	%rsi, %r12
    00000879: 	jmp	.Ltmp1215 # Offset: 2169
.Ltmp1160:
    0000087b: 	movq	%r14, %rdx
    0000087e: 	subq	%rbp, %rdx
    00000881: 	cmpq	$0x8, %rdx
    00000885: 	jle	.Ltmp1216 # Offset: 2181
    0000088b: 	movq	(%rbp), %r9
    0000088f: 	movq	%r14, %r8
    00000892: 	movq	%rbp, %rsi
    00000895: 	nopl	(%rax) # Size: 3
.Ltmp1221:
    00000898: 	leaq	-0x8(%r8), %rdi
    0000089c: 	cmpq	%rax, %r9
    0000089f: 	jb	.Ltmp1217 # Offset: 2207
    000008a1: 	cmpq	%rsi, %rdi
    000008a4: 	jbe	.Ltmp1218 # Offset: 2212
    000008aa: 	movq	(%rsi), %rcx
    000008ad: 	cmpq	%rcx, %r9
    000008b0: 	jbe	.Ltmp1219 # Offset: 2224
    000008b2: 	leaq	0x8(%rsi), %rdx
    000008b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1220:
    000008c0: 	movq	%rdx, %rsi
    000008c3: 	movq	(%rdx), %rcx
    000008c6: 	leaq	0x8(%rdx), %rdx
    000008ca: 	cmpq	%rcx, %r9
    000008cd: 	ja	.Ltmp1220 # Offset: 2253
    000008cf: 	cmpq	%rsi, %rdi
    000008d2: 	jbe	.Ltmp1218 # Offset: 2258
.Ltmp1219:
    000008d8: 	movq	%rcx, (%rdi)
    000008db: 	movq	%rax, (%rsi)
.Ltmp1217:
    000008de: 	movq	-0x8(%rdi), %rax
    000008e2: 	movq	%rdi, %r8
    000008e5: 	jmp	.Ltmp1221 # Offset: 2277
.Ltmp1245:
    000008e7: 	leaq	0x50(%rsp), %rsi
    000008ec: 	leaq	0x60(%rsp), %rdi
    000008f1: 	movq	%rbp, 0x58(%rsp)
    000008f6: 	movq	%rsi, 0x38(%rsp)
    000008fb: 	movq	%rdi, 0x30(%rsp)
    00000900: 	movq	%r8, 0x68(%rsp)
    00000905: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 2309
    0000090a: 	movq	0x38(%rsp), %rsi
    0000090f: 	movq	0x30(%rsp), %rdi
    00000914: 	movq	%r14, 0x58(%rsp)
    00000919: 	movq	%rbp, 0x68(%rsp)
    0000091e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 2334
.Ltmp1216:
    00000923: 	movq	%r12, %rax
    00000926: 	subq	%r14, %rax
    00000929: 	cmpq	$0x8, %rax
    0000092d: 	jle	.Ltmp1158 # Offset: 2349
    00000933: 	movq	(%r14), %rdi
    00000936: 	movq	%r12, %rbp
    00000939: 	movq	%r14, %rdx
    0000093c: 	nopl	(%rax) # Size: 4
.Ltmp1226:
    00000940: 	movq	-0x8(%rbp), %r8
    00000944: 	leaq	-0x8(%rbp), %rsi
    00000948: 	cmpq	%r8, %rdi
    0000094b: 	jb	.Ltmp1222 # Offset: 2379
    0000094d: 	cmpq	%rdx, %rsi
    00000950: 	jbe	.Ltmp1223 # Offset: 2384
    00000952: 	movq	(%rdx), %rcx
    00000955: 	cmpq	%rcx, %rdi
    00000958: 	jbe	.Ltmp1224 # Offset: 2392
    0000095a: 	leaq	0x8(%rdx), %rax
    0000095e: 	nop # Size: 2
.Ltmp1225:
    00000960: 	movq	%rax, %rdx
    00000963: 	movq	(%rax), %rcx
    00000966: 	leaq	0x8(%rax), %rax
    0000096a: 	cmpq	%rcx, %rdi
    0000096d: 	ja	.Ltmp1225 # Offset: 2413
    0000096f: 	cmpq	%rdx, %rsi
    00000972: 	jbe	.Ltmp1223 # Offset: 2418
.Ltmp1224:
    00000974: 	movq	%rcx, (%rsi)
    00000977: 	movq	%r8, (%rdx)
.Ltmp1222:
    0000097a: 	movq	%rsi, %rbp
    0000097d: 	jmp	.Ltmp1226 # Offset: 2429
.Ltmp1223:
    0000097f: 	movq	%rbp, %rax
    00000982: 	subq	%r14, %rax
    00000985: 	cmpq	$0x8, %rax
    00000989: 	jle	.Ltmp1227 # Offset: 2441
    0000098f: 	movq	(%r14), %rdi
    00000992: 	movq	%rbp, %r8
    00000995: 	movq	%r14, %rdx
    00000998: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1232:
    000009a0: 	movq	-0x8(%r8), %r9
    000009a4: 	leaq	-0x8(%r8), %rsi
    000009a8: 	cmpq	%r9, %rdi
    000009ab: 	jb	.Ltmp1228 # Offset: 2475
    000009ad: 	cmpq	%rdx, %rsi
    000009b0: 	jbe	.Ltmp1229 # Offset: 2480
    000009b2: 	movq	(%rdx), %rcx
    000009b5: 	cmpq	%rdi, %rcx
    000009b8: 	jae	.Ltmp1230 # Offset: 2488
    000009ba: 	leaq	0x8(%rdx), %rax
    000009be: 	nop # Size: 2
.Ltmp1231:
    000009c0: 	movq	%rax, %rdx
    000009c3: 	movq	(%rax), %rcx
    000009c6: 	leaq	0x8(%rax), %rax
    000009ca: 	cmpq	%rcx, %rdi
    000009cd: 	ja	.Ltmp1231 # Offset: 2509
    000009cf: 	cmpq	%rdx, %rsi
    000009d2: 	jbe	.Ltmp1229 # Offset: 2514
.Ltmp1230:
    000009d4: 	movq	%rcx, (%rsi)
    000009d7: 	movq	%r9, (%rdx)
.Ltmp1228:
    000009da: 	movq	%rsi, %r8
    000009dd: 	jmp	.Ltmp1232 # Offset: 2525
.Ltmp1229:
    000009df: 	movq	%r14, 0x68(%rsp)
    000009e4: 	leaq	0x60(%rsp), %r14
    000009e9: 	leaq	0x50(%rsp), %rsi
    000009ee: 	movq	%r14, %rdi
    000009f1: 	movq	%r8, 0x58(%rsp)
    000009f6: 	movq	%r8, 0x38(%rsp)
    000009fb: 	movq	%rsi, 0x30(%rsp)
    00000a00: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 2560
    00000a05: 	movq	0x38(%rsp), %r8
    00000a0a: 	movq	0x30(%rsp), %rsi
    00000a0f: 	movq	%r14, %rdi
    00000a12: 	movq	%rbp, 0x58(%rsp)
    00000a17: 	movq	%r8, 0x68(%rsp)
    00000a1c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 2588
.Ltmp1227:
    00000a21: 	movq	%r12, %rax
    00000a24: 	subq	%rbp, %rax
    00000a27: 	cmpq	$0x8, %rax
    00000a2b: 	jle	.Ltmp1158 # Offset: 2603
    00000a31: 	movq	(%rbp), %rdi
    00000a35: 	movq	%r12, %r14
    00000a38: 	movq	%rbp, %rdx
    00000a3b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1237:
    00000a40: 	movq	-0x8(%r14), %r8
    00000a44: 	leaq	-0x8(%r14), %rsi
    00000a48: 	cmpq	%r8, %rdi
    00000a4b: 	jb	.Ltmp1233 # Offset: 2635
    00000a4d: 	cmpq	%rdx, %rsi
    00000a50: 	jbe	.Ltmp1234 # Offset: 2640
    00000a56: 	movq	(%rdx), %rcx
    00000a59: 	cmpq	%rcx, %rdi
    00000a5c: 	jbe	.Ltmp1235 # Offset: 2652
    00000a5e: 	leaq	0x8(%rdx), %rax
    00000a62: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1236:
    00000a68: 	movq	%rax, %rdx
    00000a6b: 	movq	(%rax), %rcx
    00000a6e: 	leaq	0x8(%rax), %rax
    00000a72: 	cmpq	%rcx, %rdi
    00000a75: 	ja	.Ltmp1236 # Offset: 2677
    00000a77: 	cmpq	%rdx, %rsi
    00000a7a: 	jbe	.Ltmp1234 # Offset: 2682
.Ltmp1235:
    00000a80: 	movq	%rcx, (%rsi)
    00000a83: 	movq	%r8, (%rdx)
.Ltmp1233:
    00000a86: 	movq	%rsi, %r14
    00000a89: 	jmp	.Ltmp1237 # Offset: 2697
.Ltmp1218:
    00000a8b: 	movq	%r8, %rax
    00000a8e: 	subq	%rbp, %rax
    00000a91: 	cmpq	$0x8, %rax
    00000a95: 	jle	.Ltmp1238 # Offset: 2709
    00000a9b: 	movq	(%rbp), %rdi
    00000a9f: 	movq	%r8, %r9
    00000aa2: 	movq	%rbp, %rdx
    00000aa5: 	nopl	(%rax) # Size: 3
.Ltmp1243:
    00000aa8: 	movq	-0x8(%r9), %r10
    00000aac: 	leaq	-0x8(%r9), %rsi
    00000ab0: 	cmpq	%r10, %rdi
    00000ab3: 	jb	.Ltmp1239 # Offset: 2739
    00000ab5: 	cmpq	%rdx, %rsi
    00000ab8: 	jbe	.Ltmp1240 # Offset: 2744
    00000aba: 	movq	(%rdx), %rcx
    00000abd: 	cmpq	%rcx, %rdi
    00000ac0: 	jbe	.Ltmp1241 # Offset: 2752
    00000ac2: 	leaq	0x8(%rdx), %rax
    00000ac6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1242:
    00000ad0: 	movq	%rax, %rdx
    00000ad3: 	movq	(%rax), %rcx
    00000ad6: 	leaq	0x8(%rax), %rax
    00000ada: 	cmpq	%rcx, %rdi
    00000add: 	ja	.Ltmp1242 # Offset: 2781
    00000adf: 	cmpq	%rdx, %rsi
    00000ae2: 	jbe	.Ltmp1240 # Offset: 2786
.Ltmp1241:
    00000ae4: 	movq	%rcx, (%rsi)
    00000ae7: 	movq	%r10, (%rdx)
.Ltmp1239:
    00000aea: 	movq	%rsi, %r9
    00000aed: 	jmp	.Ltmp1243 # Offset: 2797
.Ltmp1240:
    00000aef: 	movq	%rbp, 0x68(%rsp)
    00000af4: 	leaq	0x60(%rsp), %rbp
    00000af9: 	leaq	0x50(%rsp), %rsi
    00000afe: 	movq	%rbp, %rdi
    00000b01: 	movq	%r8, 0x30(%rsp)
    00000b06: 	movq	%r9, 0x58(%rsp)
    00000b0b: 	movq	%r9, 0x40(%rsp)
    00000b10: 	movq	%rsi, 0x38(%rsp)
    00000b15: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 2837
    00000b1a: 	movq	0x30(%rsp), %r8
    00000b1f: 	movq	0x40(%rsp), %r9
    00000b24: 	movq	%rbp, %rdi
    00000b27: 	movq	0x38(%rsp), %rsi
    00000b2c: 	movq	%r8, 0x58(%rsp)
    00000b31: 	movq	%r9, 0x68(%rsp)
    00000b36: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 2870
    00000b3b: 	movq	0x30(%rsp), %r8
.Ltmp1238:
    00000b40: 	movq	%r14, %rax
    00000b43: 	subq	%r8, %rax
    00000b46: 	cmpq	$0x8, %rax
    00000b4a: 	jle	.Ltmp1216 # Offset: 2890
    00000b50: 	movq	(%r8), %rdi
    00000b53: 	movq	%r14, %rbp
    00000b56: 	movq	%r8, %rdx
    00000b59: 	nopl	(%rax) # Size: 7
.Ltmp1248:
    00000b60: 	movq	-0x8(%rbp), %r9
    00000b64: 	leaq	-0x8(%rbp), %rsi
    00000b68: 	cmpq	%r9, %rdi
    00000b6b: 	jb	.Ltmp1244 # Offset: 2923
    00000b6d: 	cmpq	%rdx, %rsi
    00000b70: 	jbe	.Ltmp1245 # Offset: 2928
    00000b76: 	movq	(%rdx), %rcx
    00000b79: 	cmpq	%rdi, %rcx
    00000b7c: 	jae	.Ltmp1246 # Offset: 2940
    00000b7e: 	leaq	0x8(%rdx), %rax
    00000b82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1247:
    00000b88: 	movq	%rax, %rdx
    00000b8b: 	movq	(%rax), %rcx
    00000b8e: 	leaq	0x8(%rax), %rax
    00000b92: 	cmpq	%rcx, %rdi
    00000b95: 	ja	.Ltmp1247 # Offset: 2965
    00000b97: 	cmpq	%rdx, %rsi
    00000b9a: 	jbe	.Ltmp1245 # Offset: 2970
.Ltmp1246:
    00000ba0: 	movq	%rcx, (%rsi)
    00000ba3: 	movq	%r9, (%rdx)
.Ltmp1244:
    00000ba6: 	movq	%rsi, %rbp
    00000ba9: 	jmp	.Ltmp1248 # Offset: 2985
.Ltmp1212:
    00000bab: 	movq	%r12, %rax
    00000bae: 	subq	%rbp, %rax
    00000bb1: 	cmpq	$0x8, %rax
    00000bb5: 	jle	.Ltmp1249 # Offset: 2997
    00000bbb: 	movq	(%rbp), %rdi
    00000bbf: 	movq	%r12, %r14
    00000bc2: 	movq	%rbp, %rdx
    00000bc5: 	nopl	(%rax) # Size: 3
.Ltmp1254:
    00000bc8: 	movq	-0x8(%r14), %r8
    00000bcc: 	leaq	-0x8(%r14), %rsi
    00000bd0: 	cmpq	%r8, %rdi
    00000bd3: 	jb	.Ltmp1250 # Offset: 3027
    00000bd5: 	cmpq	%rdx, %rsi
    00000bd8: 	jbe	.Ltmp1251 # Offset: 3032
    00000bda: 	movq	(%rdx), %rcx
    00000bdd: 	cmpq	%rdi, %rcx
    00000be0: 	jae	.Ltmp1252 # Offset: 3040
    00000be2: 	leaq	0x8(%rdx), %rax
    00000be6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1253:
    00000bf0: 	movq	%rax, %rdx
    00000bf3: 	movq	(%rax), %rcx
    00000bf6: 	leaq	0x8(%rax), %rax
    00000bfa: 	cmpq	%rcx, %rdi
    00000bfd: 	ja	.Ltmp1253 # Offset: 3069
    00000bff: 	cmpq	%rdx, %rsi
    00000c02: 	jbe	.Ltmp1251 # Offset: 3074
.Ltmp1252:
    00000c04: 	movq	%rcx, (%rsi)
    00000c07: 	movq	%r8, (%rdx)
.Ltmp1250:
    00000c0a: 	movq	%rsi, %r14
    00000c0d: 	jmp	.Ltmp1254 # Offset: 3085
.Ltmp1251:
    00000c0f: 	movq	%rbp, 0x68(%rsp)
    00000c14: 	leaq	0x60(%rsp), %rbp
    00000c19: 	leaq	0x50(%rsp), %rsi
    00000c1e: 	movq	%rbp, %rdi
    00000c21: 	movq	%rsi, 0x30(%rsp)
    00000c26: 	movq	%r14, 0x58(%rsp)
    00000c2b: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 3115
    00000c30: 	movq	0x30(%rsp), %rsi
    00000c35: 	movq	%rbp, %rdi
    00000c38: 	movq	%r12, 0x58(%rsp)
    00000c3d: 	movq	%r14, 0x68(%rsp)
    00000c42: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 3138
.Ltmp1249:
    00000c47: 	movq	%r13, %rax
    00000c4a: 	subq	%r12, %rax
    00000c4d: 	cmpq	$0x8, %rax
    00000c51: 	jle	.Ltmp1136 # Offset: 3153
    00000c57: 	movq	(%r12), %rdi
    00000c5b: 	movq	%r13, %rbp
    00000c5e: 	movq	%r12, %rdx
    00000c61: 	nopl	(%rax) # Size: 7
.Ltmp1259:
    00000c68: 	movq	-0x8(%rbp), %r8
    00000c6c: 	leaq	-0x8(%rbp), %rsi
    00000c70: 	cmpq	%r8, %rdi
    00000c73: 	jb	.Ltmp1255 # Offset: 3187
    00000c75: 	cmpq	%rdx, %rsi
    00000c78: 	jbe	.Ltmp1256 # Offset: 3192
    00000c7e: 	movq	(%rdx), %rcx
    00000c81: 	cmpq	%rdi, %rcx
    00000c84: 	jae	.Ltmp1257 # Offset: 3204
    00000c86: 	leaq	0x8(%rdx), %rax
    00000c8a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1258:
    00000c90: 	movq	%rax, %rdx
    00000c93: 	movq	(%rax), %rcx
    00000c96: 	leaq	0x8(%rax), %rax
    00000c9a: 	cmpq	%rcx, %rdi
    00000c9d: 	ja	.Ltmp1258 # Offset: 3229
    00000c9f: 	cmpq	%rdx, %rsi
    00000ca2: 	jbe	.Ltmp1256 # Offset: 3234
.Ltmp1257:
    00000ca8: 	movq	%rcx, (%rsi)
    00000cab: 	movq	%r8, (%rdx)
.Ltmp1255:
    00000cae: 	movq	%rsi, %rbp
    00000cb1: 	jmp	.Ltmp1259 # Offset: 3249
.Ltmp1207:
    00000cb3: 	movq	%r14, %rax
    00000cb6: 	subq	%r12, %rax
    00000cb9: 	cmpq	$0x8, %rax
    00000cbd: 	jle	.Ltmp1260 # Offset: 3261
    00000cc3: 	movq	(%r12), %rsi
    00000cc7: 	movq	%r14, %r8
    00000cca: 	movq	%r12, %rax
    00000ccd: 	nopl	(%rax) # Size: 3
.Ltmp1265:
    00000cd0: 	movq	-0x8(%r8), %rdi
    00000cd4: 	leaq	-0x8(%r8), %rcx
    00000cd8: 	cmpq	%rdi, %rsi
    00000cdb: 	jb	.Ltmp1261 # Offset: 3291
    00000cdd: 	cmpq	%rax, %rcx
    00000ce0: 	jbe	.Ltmp1262 # Offset: 3296
    00000ce2: 	movq	(%rax), %rdx
    00000ce5: 	cmpq	%rdx, %rsi
    00000ce8: 	jbe	.Ltmp1263 # Offset: 3304
    00000cea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1264:
    00000cf0: 	movq	0x8(%rax), %rdx
    00000cf4: 	addq	$0x8, %rax
    00000cf8: 	cmpq	%rdx, %rsi
    00000cfb: 	ja	.Ltmp1264 # Offset: 3323
    00000cfd: 	cmpq	%rax, %rcx
    00000d00: 	jbe	.Ltmp1262 # Offset: 3328
.Ltmp1263:
    00000d02: 	movq	%rdx, (%rcx)
    00000d05: 	movq	%rdi, (%rax)
.Ltmp1261:
    00000d08: 	movq	%rcx, %r8
    00000d0b: 	jmp	.Ltmp1265 # Offset: 3339
.Ltmp1262:
    00000d0d: 	movq	%r12, 0x68(%rsp)
    00000d12: 	leaq	0x60(%rsp), %r12
    00000d17: 	leaq	0x50(%rsp), %rsi
    00000d1c: 	movq	%r12, %rdi
    00000d1f: 	movq	%r8, 0x58(%rsp)
    00000d24: 	movq	%r8, 0x38(%rsp)
    00000d29: 	movq	%rsi, 0x30(%rsp)
    00000d2e: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 3374
    00000d33: 	movq	0x38(%rsp), %r8
    00000d38: 	movq	0x30(%rsp), %rsi
    00000d3d: 	movq	%r12, %rdi
    00000d40: 	movq	%r14, 0x58(%rsp)
    00000d45: 	movq	%r8, 0x68(%rsp)
    00000d4a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 3402
.Ltmp1260:
    00000d4f: 	movq	%rbp, %rax
    00000d52: 	subq	%r14, %rax
    00000d55: 	cmpq	$0x8, %rax
    00000d59: 	jle	.Ltmp1205 # Offset: 3417
    00000d5f: 	movq	(%r14), %rdi
    00000d62: 	movq	%rbp, %r12
    00000d65: 	movq	%r14, %rdx
    00000d68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1270:
    00000d70: 	movq	-0x8(%r12), %r8
    00000d75: 	leaq	-0x8(%r12), %rsi
    00000d7a: 	cmpq	%r8, %rdi
    00000d7d: 	jb	.Ltmp1266 # Offset: 3453
    00000d7f: 	cmpq	%rdx, %rsi
    00000d82: 	jbe	.Ltmp1267 # Offset: 3458
    00000d88: 	movq	(%rdx), %rcx
    00000d8b: 	cmpq	%rdi, %rcx
    00000d8e: 	jae	.Ltmp1268 # Offset: 3470
    00000d90: 	leaq	0x8(%rdx), %rax
    00000d94: 	nopl	(%rax) # Size: 4
.Ltmp1269:
    00000d98: 	movq	%rax, %rdx
    00000d9b: 	movq	(%rax), %rcx
    00000d9e: 	leaq	0x8(%rax), %rax
    00000da2: 	cmpq	%rcx, %rdi
    00000da5: 	ja	.Ltmp1269 # Offset: 3493
    00000da7: 	cmpq	%rdx, %rsi
    00000daa: 	jbe	.Ltmp1267 # Offset: 3498
.Ltmp1268:
    00000db0: 	movq	%rcx, (%rsi)
    00000db3: 	movq	%r8, (%rdx)
.Ltmp1266:
    00000db6: 	movq	%rsi, %r12
    00000db9: 	jmp	.Ltmp1270 # Offset: 3513
.Ltmp1201:
    00000dbb: 	movq	%r8, %rax
    00000dbe: 	subq	%r14, %rax
    00000dc1: 	cmpq	$0x8, %rax
    00000dc5: 	jle	.Ltmp1271 # Offset: 3525
    00000dcb: 	movq	(%r14), %rdi
    00000dce: 	movq	%r8, %r9
    00000dd1: 	movq	%r14, %rdx
    00000dd4: 	nopl	(%rax) # Size: 4
.Ltmp1276:
    00000dd8: 	movq	-0x8(%r9), %r10
    00000ddc: 	leaq	-0x8(%r9), %rsi
    00000de0: 	cmpq	%r10, %rdi
    00000de3: 	jb	.Ltmp1272 # Offset: 3555
    00000de5: 	cmpq	%rdx, %rsi
    00000de8: 	jbe	.Ltmp1273 # Offset: 3560
    00000dea: 	movq	(%rdx), %rcx
    00000ded: 	cmpq	%rcx, %rdi
    00000df0: 	jbe	.Ltmp1274 # Offset: 3568
    00000df2: 	leaq	0x8(%rdx), %rax
    00000df6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1275:
    00000e00: 	movq	%rax, %rdx
    00000e03: 	movq	(%rax), %rcx
    00000e06: 	leaq	0x8(%rax), %rax
    00000e0a: 	cmpq	%rcx, %rdi
    00000e0d: 	ja	.Ltmp1275 # Offset: 3597
    00000e0f: 	cmpq	%rdx, %rsi
    00000e12: 	jbe	.Ltmp1273 # Offset: 3602
.Ltmp1274:
    00000e14: 	movq	%rcx, (%rsi)
    00000e17: 	movq	%r10, (%rdx)
.Ltmp1272:
    00000e1a: 	movq	%rsi, %r9
    00000e1d: 	jmp	.Ltmp1276 # Offset: 3613
.Ltmp1273:
    00000e1f: 	movq	%r14, 0x68(%rsp)
    00000e24: 	leaq	0x60(%rsp), %r14
    00000e29: 	leaq	0x50(%rsp), %rsi
    00000e2e: 	movq	%r14, %rdi
    00000e31: 	movq	%r8, 0x30(%rsp)
    00000e36: 	movq	%r9, 0x58(%rsp)
    00000e3b: 	movq	%r9, 0x40(%rsp)
    00000e40: 	movq	%rsi, 0x38(%rsp)
    00000e45: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 3653
    00000e4a: 	movq	0x30(%rsp), %r8
    00000e4f: 	movq	0x40(%rsp), %r9
    00000e54: 	movq	%r14, %rdi
    00000e57: 	movq	0x38(%rsp), %rsi
    00000e5c: 	movq	%r8, 0x58(%rsp)
    00000e61: 	movq	%r9, 0x68(%rsp)
    00000e66: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 3686
    00000e6b: 	movq	0x30(%rsp), %r8
.Ltmp1271:
    00000e70: 	movq	%r12, %rax
    00000e73: 	subq	%r8, %rax
    00000e76: 	cmpq	$0x8, %rax
    00000e7a: 	jle	.Ltmp1169 # Offset: 3706
    00000e80: 	movq	(%r8), %rdi
    00000e83: 	movq	%r12, %r14
    00000e86: 	movq	%r8, %rdx
    00000e89: 	nopl	(%rax) # Size: 7
.Ltmp1281:
    00000e90: 	movq	-0x8(%r14), %r9
    00000e94: 	leaq	-0x8(%r14), %rsi
    00000e98: 	cmpq	%r9, %rdi
    00000e9b: 	jb	.Ltmp1277 # Offset: 3739
    00000e9d: 	cmpq	%rdx, %rsi
    00000ea0: 	jbe	.Ltmp1278 # Offset: 3744
    00000ea6: 	movq	(%rdx), %rcx
    00000ea9: 	cmpq	%rcx, %rdi
    00000eac: 	jbe	.Ltmp1279 # Offset: 3756
    00000eae: 	leaq	0x8(%rdx), %rax
    00000eb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1280:
    00000eb8: 	movq	%rax, %rdx
    00000ebb: 	movq	(%rax), %rcx
    00000ebe: 	leaq	0x8(%rax), %rax
    00000ec2: 	cmpq	%rcx, %rdi
    00000ec5: 	ja	.Ltmp1280 # Offset: 3781
    00000ec7: 	cmpq	%rdx, %rsi
    00000eca: 	jbe	.Ltmp1278 # Offset: 3786
.Ltmp1279:
    00000ed0: 	movq	%rcx, (%rsi)
    00000ed3: 	movq	%r9, (%rdx)
.Ltmp1277:
    00000ed6: 	movq	%rsi, %r14
    00000ed9: 	jmp	.Ltmp1281 # Offset: 3801
.Ltmp1188:
    00000edb: 	movq	%r12, %rax
    00000ede: 	subq	%r14, %rax
    00000ee1: 	cmpq	$0x8, %rax
    00000ee5: 	jle	.Ltmp1282 # Offset: 3813
    00000eeb: 	movq	(%r14), %rdi
    00000eee: 	movq	%r12, %r8
    00000ef1: 	movq	%r14, %rdx
    00000ef4: 	nopl	(%rax) # Size: 4
.Ltmp1287:
    00000ef8: 	movq	-0x8(%r8), %r9
    00000efc: 	leaq	-0x8(%r8), %rsi
    00000f00: 	cmpq	%r9, %rdi
    00000f03: 	jb	.Ltmp1283 # Offset: 3843
    00000f05: 	cmpq	%rdx, %rsi
    00000f08: 	jbe	.Ltmp1284 # Offset: 3848
    00000f0a: 	movq	(%rdx), %rcx
    00000f0d: 	cmpq	%rcx, %rdi
    00000f10: 	jbe	.Ltmp1285 # Offset: 3856
    00000f12: 	leaq	0x8(%rdx), %rax
    00000f16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1286:
    00000f20: 	movq	%rax, %rdx
    00000f23: 	movq	(%rax), %rcx
    00000f26: 	leaq	0x8(%rax), %rax
    00000f2a: 	cmpq	%rcx, %rdi
    00000f2d: 	ja	.Ltmp1286 # Offset: 3885
    00000f2f: 	cmpq	%rdx, %rsi
    00000f32: 	jbe	.Ltmp1284 # Offset: 3890
.Ltmp1285:
    00000f34: 	movq	%rcx, (%rsi)
    00000f37: 	movq	%r9, (%rdx)
.Ltmp1283:
    00000f3a: 	movq	%rsi, %r8
    00000f3d: 	jmp	.Ltmp1287 # Offset: 3901
.Ltmp1284:
    00000f3f: 	movq	%r14, 0x68(%rsp)
    00000f44: 	leaq	0x60(%rsp), %r14
    00000f49: 	leaq	0x50(%rsp), %rsi
    00000f4e: 	movq	%r14, %rdi
    00000f51: 	movq	%r8, 0x58(%rsp)
    00000f56: 	movq	%r8, 0x38(%rsp)
    00000f5b: 	movq	%rsi, 0x30(%rsp)
    00000f60: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 3936
    00000f65: 	movq	0x38(%rsp), %r8
    00000f6a: 	movq	0x30(%rsp), %rsi
    00000f6f: 	movq	%r14, %rdi
    00000f72: 	movq	%r12, 0x58(%rsp)
    00000f77: 	movq	%r8, 0x68(%rsp)
    00000f7c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 3964
.Ltmp1282:
    00000f81: 	movq	%rbp, %rax
    00000f84: 	subq	%r12, %rax
    00000f87: 	cmpq	$0x8, %rax
    00000f8b: 	jle	.Ltmp1147 # Offset: 3979
    00000f91: 	movq	(%r12), %rdi
    00000f95: 	movq	%rbp, %r14
    00000f98: 	movq	%r12, %rdx
    00000f9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1292:
    00000fa0: 	movq	-0x8(%r14), %r8
    00000fa4: 	leaq	-0x8(%r14), %rsi
    00000fa8: 	cmpq	%r8, %rdi
    00000fab: 	jb	.Ltmp1288 # Offset: 4011
    00000fad: 	cmpq	%rdx, %rsi
    00000fb0: 	jbe	.Ltmp1289 # Offset: 4016
    00000fb6: 	movq	(%rdx), %rcx
    00000fb9: 	cmpq	%rdi, %rcx
    00000fbc: 	jae	.Ltmp1290 # Offset: 4028
    00000fbe: 	leaq	0x8(%rdx), %rax
    00000fc2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1291:
    00000fc8: 	movq	%rax, %rdx
    00000fcb: 	movq	(%rax), %rcx
    00000fce: 	leaq	0x8(%rax), %rax
    00000fd2: 	cmpq	%rcx, %rdi
    00000fd5: 	ja	.Ltmp1291 # Offset: 4053
    00000fd7: 	cmpq	%rdx, %rsi
    00000fda: 	jbe	.Ltmp1289 # Offset: 4058
.Ltmp1290:
    00000fe0: 	movq	%rcx, (%rsi)
    00000fe3: 	movq	%r8, (%rdx)
.Ltmp1288:
    00000fe6: 	movq	%rsi, %r14
    00000fe9: 	jmp	.Ltmp1292 # Offset: 4073
.Ltmp1183:
    00000feb: 	movq	%r8, %rax
    00000fee: 	subq	%r12, %rax
    00000ff1: 	cmpq	$0x8, %rax
    00000ff5: 	jle	.Ltmp1293 # Offset: 4085
    00000ffb: 	movq	(%r12), %rdi
    00000fff: 	movq	%r8, %r9
    00001002: 	movq	%r12, %rdx
    00001005: 	nopl	(%rax) # Size: 3
.Ltmp1298:
    00001008: 	movq	-0x8(%r9), %r10
    0000100c: 	leaq	-0x8(%r9), %rsi
    00001010: 	cmpq	%r10, %rdi
    00001013: 	jb	.Ltmp1294 # Offset: 4115
    00001015: 	cmpq	%rdx, %rsi
    00001018: 	jbe	.Ltmp1295 # Offset: 4120
    0000101a: 	movq	(%rdx), %rcx
    0000101d: 	cmpq	%rdi, %rcx
    00001020: 	jae	.Ltmp1296 # Offset: 4128
    00001022: 	leaq	0x8(%rdx), %rax
    00001026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1297:
    00001030: 	movq	%rax, %rdx
    00001033: 	movq	(%rax), %rcx
    00001036: 	leaq	0x8(%rax), %rax
    0000103a: 	cmpq	%rcx, %rdi
    0000103d: 	ja	.Ltmp1297 # Offset: 4157
    0000103f: 	cmpq	%rdx, %rsi
    00001042: 	jbe	.Ltmp1295 # Offset: 4162
.Ltmp1296:
    00001044: 	movq	%rcx, (%rsi)
    00001047: 	movq	%r10, (%rdx)
.Ltmp1294:
    0000104a: 	movq	%rsi, %r9
    0000104d: 	jmp	.Ltmp1298 # Offset: 4173
.Ltmp1295:
    0000104f: 	movq	%r12, 0x68(%rsp)
    00001054: 	leaq	0x60(%rsp), %r12
    00001059: 	leaq	0x50(%rsp), %rsi
    0000105e: 	movq	%r12, %rdi
    00001061: 	movq	%r8, 0x30(%rsp)
    00001066: 	movq	%r9, 0x58(%rsp)
    0000106b: 	movq	%r9, 0x40(%rsp)
    00001070: 	movq	%rsi, 0x38(%rsp)
    00001075: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 4213
    0000107a: 	movq	0x30(%rsp), %r8
    0000107f: 	movq	0x40(%rsp), %r9
    00001084: 	movq	%r12, %rdi
    00001087: 	movq	0x38(%rsp), %rsi
    0000108c: 	movq	%r8, 0x58(%rsp)
    00001091: 	movq	%r9, 0x68(%rsp)
    00001096: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 4246
    0000109b: 	movq	0x30(%rsp), %r8
.Ltmp1293:
    000010a0: 	movq	%r14, %rax
    000010a3: 	subq	%r8, %rax
    000010a6: 	cmpq	$0x8, %rax
    000010aa: 	jle	.Ltmp1181 # Offset: 4266
    000010b0: 	movq	(%r8), %rdi
    000010b3: 	movq	%r14, %r12
    000010b6: 	movq	%r8, %rdx
    000010b9: 	nopl	(%rax) # Size: 7
.Ltmp1303:
    000010c0: 	movq	-0x8(%r12), %r9
    000010c5: 	leaq	-0x8(%r12), %rsi
    000010ca: 	cmpq	%r9, %rdi
    000010cd: 	jb	.Ltmp1299 # Offset: 4301
    000010cf: 	cmpq	%rdx, %rsi
    000010d2: 	jbe	.Ltmp1300 # Offset: 4306
    000010d8: 	movq	(%rdx), %rcx
    000010db: 	cmpq	%rcx, %rdi
    000010de: 	jbe	.Ltmp1301 # Offset: 4318
    000010e0: 	leaq	0x8(%rdx), %rax
    000010e4: 	nopl	(%rax) # Size: 4
.Ltmp1302:
    000010e8: 	movq	%rax, %rdx
    000010eb: 	movq	(%rax), %rcx
    000010ee: 	leaq	0x8(%rax), %rax
    000010f2: 	cmpq	%rcx, %rdi
    000010f5: 	ja	.Ltmp1302 # Offset: 4341
    000010f7: 	cmpq	%rdx, %rsi
    000010fa: 	jbe	.Ltmp1300 # Offset: 4346
.Ltmp1301:
    00001100: 	movq	%rcx, (%rsi)
    00001103: 	movq	%r9, (%rdx)
.Ltmp1299:
    00001106: 	movq	%rsi, %r12
    00001109: 	jmp	.Ltmp1303 # Offset: 4361
.Ltmp1199:
    0000110b: 	movq	(%r8), %rsi
    0000110e: 	movq	%r14, %r9
    00001111: 	movq	%r8, %rax
    00001114: 	nopl	(%rax) # Size: 4
.Ltmp1308:
    00001118: 	movq	-0x8(%r9), %rdi
    0000111c: 	leaq	-0x8(%r9), %rcx
    00001120: 	cmpq	%rdi, %rsi
    00001123: 	jb	.Ltmp1304 # Offset: 4387
    00001125: 	cmpq	%rax, %rcx
    00001128: 	jbe	.Ltmp1305 # Offset: 4392
    0000112e: 	movq	(%rax), %rdx
    00001131: 	cmpq	%rdx, %rsi
    00001134: 	jbe	.Ltmp1306 # Offset: 4404
    00001136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1307:
    00001140: 	movq	0x8(%rax), %rdx
    00001144: 	addq	$0x8, %rax
    00001148: 	cmpq	%rdx, %rsi
    0000114b: 	ja	.Ltmp1307 # Offset: 4427
    0000114d: 	cmpq	%rax, %rcx
    00001150: 	jbe	.Ltmp1305 # Offset: 4432
.Ltmp1306:
    00001156: 	movq	%rdx, (%rcx)
    00001159: 	movq	%rdi, (%rax)
.Ltmp1304:
    0000115c: 	movq	%rcx, %r9
    0000115f: 	jmp	.Ltmp1308 # Offset: 4447
.Ltmp1198:
    00001161: 	movq	(%rbx), %rdi
    00001164: 	movq	%r8, %r9
    00001167: 	movq	%rbx, %rdx
    0000116a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1313:
    00001170: 	movq	-0x8(%r9), %r10
    00001174: 	leaq	-0x8(%r9), %rsi
    00001178: 	cmpq	%r10, %rdi
    0000117b: 	jb	.Ltmp1309 # Offset: 4475
    0000117d: 	cmpq	%rdx, %rsi
    00001180: 	jbe	.Ltmp1310 # Offset: 4480
    00001182: 	movq	(%rdx), %rcx
    00001185: 	cmpq	%rcx, %rdi
    00001188: 	jbe	.Ltmp1311 # Offset: 4488
    0000118a: 	leaq	0x8(%rdx), %rax
    0000118e: 	nop # Size: 2
.Ltmp1312:
    00001190: 	movq	%rax, %rdx
    00001193: 	movq	(%rax), %rcx
    00001196: 	leaq	0x8(%rax), %rax
    0000119a: 	cmpq	%rcx, %rdi
    0000119d: 	ja	.Ltmp1312 # Offset: 4509
    0000119f: 	cmpq	%rdx, %rsi
    000011a2: 	jbe	.Ltmp1310 # Offset: 4514
.Ltmp1311:
    000011a4: 	movq	%rcx, (%rsi)
    000011a7: 	movq	%r10, (%rdx)
.Ltmp1309:
    000011aa: 	movq	%rsi, %r9
    000011ad: 	jmp	.Ltmp1313 # Offset: 4525
.Ltmp1310:
    000011af: 	leaq	0x50(%rsp), %rsi
    000011b4: 	leaq	0x60(%rsp), %rdi
    000011b9: 	movq	%r8, 0x30(%rsp)
    000011be: 	movq	%r9, 0x58(%rsp)
    000011c3: 	movq	%r9, 0x48(%rsp)
    000011c8: 	movq	%rsi, 0x40(%rsp)
    000011cd: 	movq	%rdi, 0x38(%rsp)
    000011d2: 	movq	%rbx, 0x68(%rsp)
    000011d7: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 4567
    000011dc: 	movq	0x30(%rsp), %r8
    000011e1: 	movq	0x48(%rsp), %r9
    000011e6: 	movq	0x40(%rsp), %rsi
    000011eb: 	movq	0x38(%rsp), %rdi
    000011f0: 	movq	%r8, 0x58(%rsp)
    000011f5: 	movq	%r9, 0x68(%rsp)
    000011fa: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 4602
    000011ff: 	movq	0x30(%rsp), %r8
    00001204: 	movq	%r14, %rax
    00001207: 	subq	%r8, %rax
    0000120a: 	cmpq	$0x8, %rax
    0000120e: 	jle	.Ltmp1192 # Offset: 4622
    00001214: 	jmp	.Ltmp1199 # Offset: 4628
.Ltmp1305:
    00001219: 	leaq	0x50(%rsp), %rsi
    0000121e: 	leaq	0x60(%rsp), %rdi
    00001223: 	movq	%r9, 0x58(%rsp)
    00001228: 	movq	%r9, 0x40(%rsp)
    0000122d: 	movq	%rsi, 0x38(%rsp)
    00001232: 	movq	%rdi, 0x30(%rsp)
    00001237: 	movq	%r8, 0x68(%rsp)
    0000123c: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 4668
    00001241: 	movq	0x40(%rsp), %r9
    00001246: 	movq	0x38(%rsp), %rsi
    0000124b: 	movq	%r14, 0x58(%rsp)
    00001250: 	movq	0x30(%rsp), %rdi
    00001255: 	movq	%r9, 0x68(%rsp)
    0000125a: 	callq	_ZN9benchmark9quicksortISt16reverse_iteratorIS1_IPmEEEEvT_S5_ # Offset: 4698
    0000125f: 	jmp	.Ltmp1192 # Offset: 4703
.Ltmp1146:
    00001264: 	callq	__stack_chk_fail@PLT # Offset: 4708
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_quicksortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x9b50
  Size        : 0x6af
  MaxSize     : 0x6b0
  Offset      : 0x9b50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp1314 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movq	(%rdi), %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1319:
    00000030: 	movq	-0x8(%rbp), %rdi
    00000034: 	leaq	-0x8(%rbp), %r8
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	ja	.Ltmp1315 # Offset: 59
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	jbe	.Ltmp1316 # Offset: 64
    00000042: 	movq	(%rdx), %rcx
    00000045: 	cmpq	%rcx, %rsi
    00000048: 	jbe	.Ltmp1317 # Offset: 72
    0000004a: 	leaq	0x8(%rdx), %rax
    0000004e: 	nop # Size: 2
.Ltmp1318:
    00000050: 	movq	%rax, %rdx
    00000053: 	movq	(%rax), %rcx
    00000056: 	leaq	0x8(%rax), %rax
    0000005a: 	cmpq	%rsi, %rcx
    0000005d: 	jb	.Ltmp1318 # Offset: 93
    0000005f: 	cmpq	%rdx, %r8
    00000062: 	jbe	.Ltmp1316 # Offset: 98
.Ltmp1317:
    00000064: 	movq	%rcx, (%r8)
    00000067: 	movq	%rdi, (%rdx)
.Ltmp1315:
    0000006a: 	movq	%r8, %rbp
    0000006d: 	jmp	.Ltmp1319 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp1316:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x8, %rax
    0000007a: 	jle	.Ltmp1320 # Offset: 122
    0000007c: 	movq	(%r9), %rsi
    0000007f: 	movq	%rbp, %r13
    00000082: 	movq	%r9, %rdx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp1325:
    00000088: 	leaq	-0x8(%r13), %r8
    0000008c: 	cmpq	%rdi, %rsi
    0000008f: 	jb	.Ltmp1321 # Offset: 143
    00000091: 	cmpq	%rdx, %r8
    00000094: 	jbe	.Ltmp1322 # Offset: 148
    00000096: 	movq	(%rdx), %rcx
    00000099: 	cmpq	%rcx, %rsi
    0000009c: 	jbe	.Ltmp1323 # Offset: 156
    0000009e: 	leaq	0x8(%rdx), %rax
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1324:
    000000a8: 	movq	%rax, %rdx
    000000ab: 	movq	(%rax), %rcx
    000000ae: 	leaq	0x8(%rax), %rax
    000000b2: 	cmpq	%rcx, %rsi
    000000b5: 	ja	.Ltmp1324 # Offset: 181
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	jbe	.Ltmp1322 # Offset: 186
.Ltmp1323:
    000000bc: 	movq	%rcx, (%r8)
    000000bf: 	movq	%rdi, (%rdx)
.Ltmp1321:
    000000c2: 	movq	-0x8(%r8), %rdi
    000000c6: 	movq	%r8, %r13
    000000c9: 	jmp	.Ltmp1325 # Offset: 201
.Ltmp1322:
    000000cb: 	movq	%r13, %rax
    000000ce: 	subq	%r9, %rax
    000000d1: 	cmpq	$0x8, %rax
    000000d5: 	jg	.Ltmp1326 # Offset: 213
.Ltmp1362:
    000000db: 	movq	%rbp, %rax
    000000de: 	subq	%r13, %rax
    000000e1: 	cmpq	$0x8, %rax
    000000e5: 	jg	.Ltmp1327 # Offset: 229
.Ltmp1320:
    000000eb: 	movq	%r12, %rax
    000000ee: 	subq	%rbp, %rax
    000000f1: 	cmpq	$0x8, %rax
    000000f5: 	jle	.Ltmp1328 # Offset: 245
    000000f7: 	movq	(%rbp), %rsi
    000000fb: 	movq	%r12, %r13
    000000fe: 	movq	%rbp, %rdx
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1333:
    00000108: 	movq	-0x8(%r13), %rdi
    0000010c: 	leaq	-0x8(%r13), %r8
    00000110: 	cmpq	%rdi, %rsi
    00000113: 	jb	.Ltmp1329 # Offset: 275
    00000115: 	cmpq	%rdx, %r8
    00000118: 	jbe	.Ltmp1330 # Offset: 280
    0000011a: 	movq	(%rdx), %rcx
    0000011d: 	cmpq	%rcx, %rsi
    00000120: 	jbe	.Ltmp1331 # Offset: 288
    00000122: 	leaq	0x8(%rdx), %rax
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1332:
    00000130: 	movq	%rax, %rdx
    00000133: 	movq	(%rax), %rcx
    00000136: 	leaq	0x8(%rax), %rax
    0000013a: 	cmpq	%rcx, %rsi
    0000013d: 	ja	.Ltmp1332 # Offset: 317
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jbe	.Ltmp1330 # Offset: 322
.Ltmp1331:
    00000144: 	movq	%rcx, (%r8)
    00000147: 	movq	%rdi, (%rdx)
.Ltmp1329:
    0000014a: 	movq	%r8, %r13
    0000014d: 	jmp	.Ltmp1333 # Offset: 333
.Ltmp1330:
    0000014f: 	movq	%r13, %rax
    00000152: 	subq	%rbp, %rax
    00000155: 	cmpq	$0x8, %rax
    00000159: 	jg	.Ltmp1334 # Offset: 345
.Ltmp1385:
    0000015b: 	movq	%r12, %rax
    0000015e: 	subq	%r13, %rax
    00000161: 	cmpq	$0x8, %rax
    00000165: 	jg	.Ltmp1335 # Offset: 357
.Ltmp1328:
    00000167: 	popq	%rbx
    00000168: 	popq	%rbp
    00000169: 	popq	%r12
    0000016b: 	popq	%r13
    0000016d: 	popq	%r14
    0000016f: 	retq # Offset: 367
.Ltmp1314:
    00000170: 	retq # Offset: 368
.Ltmp1335:
    00000171: 	movq	(%r13), %rsi
    00000175: 	movq	%r12, %rbp
    00000178: 	movq	%r13, %rdx
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1340:
    00000180: 	movq	-0x8(%rbp), %r8
    00000184: 	leaq	-0x8(%rbp), %rdi
    00000188: 	cmpq	%r8, %rsi
    0000018b: 	jb	.Ltmp1336 # Offset: 395
    0000018d: 	cmpq	%rdx, %rdi
    00000190: 	jbe	.Ltmp1337 # Offset: 400
    00000196: 	movq	(%rdx), %rcx
    00000199: 	cmpq	%rsi, %rcx
    0000019c: 	jae	.Ltmp1338 # Offset: 412
    0000019e: 	leaq	0x8(%rdx), %rax
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1339:
    000001a8: 	movq	%rax, %rdx
    000001ab: 	movq	(%rax), %rcx
    000001ae: 	leaq	0x8(%rax), %rax
    000001b2: 	cmpq	%rcx, %rsi
    000001b5: 	ja	.Ltmp1339 # Offset: 437
    000001b7: 	cmpq	%rdx, %rdi
    000001ba: 	jbe	.Ltmp1337 # Offset: 442
.Ltmp1338:
    000001c0: 	movq	%rcx, (%rdi)
    000001c3: 	movq	%r8, (%rdx)
.Ltmp1336:
    000001c6: 	movq	%rdi, %rbp
    000001c9: 	jmp	.Ltmp1340 # Offset: 457
.Ltmp1334:
    000001cb: 	movq	(%rbp), %rsi
    000001cf: 	movq	%r13, %rbx
    000001d2: 	movq	%rbp, %rdx
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp1345:
    000001d8: 	leaq	-0x8(%rbx), %r8
    000001dc: 	cmpq	%rdi, %rsi
    000001df: 	jb	.Ltmp1341 # Offset: 479
    000001e1: 	cmpq	%rdx, %r8
    000001e4: 	jbe	.Ltmp1342 # Offset: 484
    000001ea: 	movq	(%rdx), %rcx
    000001ed: 	cmpq	%rsi, %rcx
    000001f0: 	jae	.Ltmp1343 # Offset: 496
    000001f2: 	leaq	0x8(%rdx), %rax
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1344:
    00000200: 	movq	%rax, %rdx
    00000203: 	movq	(%rax), %rcx
    00000206: 	leaq	0x8(%rax), %rax
    0000020a: 	cmpq	%rcx, %rsi
    0000020d: 	ja	.Ltmp1344 # Offset: 525
    0000020f: 	cmpq	%rdx, %r8
    00000212: 	jbe	.Ltmp1342 # Offset: 530
.Ltmp1343:
    00000218: 	movq	%rcx, (%r8)
    0000021b: 	movq	%rdi, (%rdx)
.Ltmp1341:
    0000021e: 	movq	-0x8(%r8), %rdi
    00000222: 	movq	%r8, %rbx
    00000225: 	jmp	.Ltmp1345 # Offset: 549
.Ltmp1327:
    00000227: 	movq	(%r13), %rsi
    0000022b: 	movq	%rbp, %rbx
    0000022e: 	movq	%r13, %rdx
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp1350:
    00000238: 	movq	-0x8(%rbx), %r8
    0000023c: 	leaq	-0x8(%rbx), %rdi
    00000240: 	cmpq	%r8, %rsi
    00000243: 	jb	.Ltmp1346 # Offset: 579
    00000245: 	cmpq	%rdx, %rdi
    00000248: 	jbe	.Ltmp1347 # Offset: 584
    0000024e: 	movq	(%rdx), %rcx
    00000251: 	cmpq	%rcx, %rsi
    00000254: 	jbe	.Ltmp1348 # Offset: 596
    00000256: 	leaq	0x8(%rdx), %rax
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1349:
    00000260: 	movq	%rax, %rdx
    00000263: 	movq	(%rax), %rcx
    00000266: 	leaq	0x8(%rax), %rax
    0000026a: 	cmpq	%rcx, %rsi
    0000026d: 	ja	.Ltmp1349 # Offset: 621
    0000026f: 	cmpq	%rdx, %rdi
    00000272: 	jbe	.Ltmp1347 # Offset: 626
.Ltmp1348:
    00000278: 	movq	%rcx, (%rdi)
    0000027b: 	movq	%r8, (%rdx)
.Ltmp1346:
    0000027e: 	movq	%rdi, %rbx
    00000281: 	jmp	.Ltmp1350 # Offset: 641
.Ltmp1326:
    00000283: 	movq	(%r9), %rsi
    00000286: 	movq	%r13, %rbx
    00000289: 	movq	%r9, %rdx
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp1355:
    00000290: 	leaq	-0x8(%rbx), %r8
    00000294: 	cmpq	%rdi, %rsi
    00000297: 	jb	.Ltmp1351 # Offset: 663
    00000299: 	cmpq	%rdx, %r8
    0000029c: 	jbe	.Ltmp1352 # Offset: 668
    0000029e: 	movq	(%rdx), %rcx
    000002a1: 	cmpq	%rcx, %rsi
    000002a4: 	jbe	.Ltmp1353 # Offset: 676
    000002a6: 	leaq	0x8(%rdx), %rax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1354:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movq	(%rax), %rcx
    000002b6: 	leaq	0x8(%rax), %rax
    000002ba: 	cmpq	%rcx, %rsi
    000002bd: 	ja	.Ltmp1354 # Offset: 701
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	jbe	.Ltmp1352 # Offset: 706
.Ltmp1353:
    000002c4: 	movq	%rcx, (%r8)
    000002c7: 	movq	%rdi, (%rdx)
.Ltmp1351:
    000002ca: 	movq	-0x8(%r8), %rdi
    000002ce: 	movq	%r8, %rbx
    000002d1: 	jmp	.Ltmp1355 # Offset: 721
.Ltmp1352:
    000002d3: 	movq	%rbx, %rax
    000002d6: 	subq	%r9, %rax
    000002d9: 	cmpq	$0x8, %rax
    000002dd: 	jle	.Ltmp1356 # Offset: 733
    000002df: 	movq	(%r9), %rsi
    000002e2: 	movq	%rbx, %r14
    000002e5: 	movq	%r9, %rdx
    000002e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1361:
    000002f0: 	movq	-0x8(%r14), %r8
    000002f4: 	leaq	-0x8(%r14), %rdi
    000002f8: 	cmpq	%r8, %rsi
    000002fb: 	jb	.Ltmp1357 # Offset: 763
    000002fd: 	cmpq	%rdx, %rdi
    00000300: 	jbe	.Ltmp1358 # Offset: 768
    00000302: 	movq	(%rdx), %rcx
    00000305: 	cmpq	%rcx, %rsi
    00000308: 	jbe	.Ltmp1359 # Offset: 776
    0000030a: 	leaq	0x8(%rdx), %rax
    0000030e: 	nop # Size: 2
.Ltmp1360:
    00000310: 	movq	%rax, %rdx
    00000313: 	movq	(%rax), %rcx
    00000316: 	leaq	0x8(%rax), %rax
    0000031a: 	cmpq	%rcx, %rsi
    0000031d: 	ja	.Ltmp1360 # Offset: 797
    0000031f: 	cmpq	%rdx, %rdi
    00000322: 	jbe	.Ltmp1358 # Offset: 802
.Ltmp1359:
    00000324: 	movq	%rcx, (%rdi)
    00000327: 	movq	%r8, (%rdx)
.Ltmp1357:
    0000032a: 	movq	%rdi, %r14
    0000032d: 	jmp	.Ltmp1361 # Offset: 813
.Ltmp1358:
    0000032f: 	movq	%r14, %rsi
    00000332: 	movq	%r9, %rdi
    00000335: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 821
    0000033a: 	movq	%rbx, %rsi
    0000033d: 	movq	%r14, %rdi
    00000340: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 832
.Ltmp1356:
    00000345: 	movq	%r13, %rax
    00000348: 	movq	%rbx, %r8
    0000034b: 	subq	%rbx, %rax
    0000034e: 	cmpq	$0x8, %rax
    00000352: 	jle	.Ltmp1362 # Offset: 850
    00000358: 	movq	(%rbx), %rcx
    0000035b: 	movq	%r13, %r14
    0000035e: 	nop # Size: 2
.Ltmp1367:
    00000360: 	movq	-0x8(%r14), %rdi
    00000364: 	leaq	-0x8(%r14), %rsi
    00000368: 	cmpq	%rdi, %rcx
    0000036b: 	jb	.Ltmp1363 # Offset: 875
    0000036d: 	cmpq	%rbx, %rsi
    00000370: 	jbe	.Ltmp1364 # Offset: 880
    00000376: 	movq	(%rbx), %rdx
    00000379: 	cmpq	%rcx, %rdx
    0000037c: 	jae	.Ltmp1365 # Offset: 892
    0000037e: 	leaq	0x8(%rbx), %rax
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1366:
    00000388: 	movq	%rax, %rbx
    0000038b: 	movq	(%rax), %rdx
    0000038e: 	leaq	0x8(%rax), %rax
    00000392: 	cmpq	%rdx, %rcx
    00000395: 	ja	.Ltmp1366 # Offset: 917
    00000397: 	cmpq	%rbx, %rsi
    0000039a: 	jbe	.Ltmp1364 # Offset: 922
.Ltmp1365:
    000003a0: 	movq	%rdx, (%rsi)
    000003a3: 	movq	%rdi, (%rbx)
.Ltmp1363:
    000003a6: 	movq	%rsi, %r14
    000003a9: 	jmp	.Ltmp1367 # Offset: 937
.Ltmp1347:
    000003ab: 	movq	%rbx, %rax
    000003ae: 	subq	%r13, %rax
    000003b1: 	cmpq	$0x8, %rax
    000003b5: 	jle	.Ltmp1368 # Offset: 949
    000003b7: 	movq	(%r13), %rsi
    000003bb: 	movq	%rbx, %r14
    000003be: 	movq	%r13, %rdx
    000003c1: 	nopl	(%rax) # Size: 7
.Ltmp1373:
    000003c8: 	movq	-0x8(%r14), %r8
    000003cc: 	leaq	-0x8(%r14), %rdi
    000003d0: 	cmpq	%r8, %rsi
    000003d3: 	jb	.Ltmp1369 # Offset: 979
    000003d5: 	cmpq	%rdx, %rdi
    000003d8: 	jbe	.Ltmp1370 # Offset: 984
    000003da: 	movq	(%rdx), %rcx
    000003dd: 	cmpq	%rsi, %rcx
    000003e0: 	jae	.Ltmp1371 # Offset: 992
    000003e2: 	leaq	0x8(%rdx), %rax
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1372:
    000003f0: 	movq	%rax, %rdx
    000003f3: 	movq	(%rax), %rcx
    000003f6: 	leaq	0x8(%rax), %rax
    000003fa: 	cmpq	%rcx, %rsi
    000003fd: 	ja	.Ltmp1372 # Offset: 1021
    000003ff: 	cmpq	%rdx, %rdi
    00000402: 	jbe	.Ltmp1370 # Offset: 1026
.Ltmp1371:
    00000404: 	movq	%rcx, (%rdi)
    00000407: 	movq	%r8, (%rdx)
.Ltmp1369:
    0000040a: 	movq	%rdi, %r14
    0000040d: 	jmp	.Ltmp1373 # Offset: 1037
.Ltmp1370:
    0000040f: 	movq	%r14, %rsi
    00000412: 	movq	%r13, %rdi
    00000415: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1045
    0000041a: 	movq	%rbx, %rsi
    0000041d: 	movq	%r14, %rdi
    00000420: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1056
.Ltmp1368:
    00000425: 	movq	%rbp, %rax
    00000428: 	movq	%rbx, %r8
    0000042b: 	subq	%rbx, %rax
    0000042e: 	cmpq	$0x8, %rax
    00000432: 	jle	.Ltmp1320 # Offset: 1074
    00000438: 	movq	(%rbx), %rcx
    0000043b: 	movq	%rbp, %r13
    0000043e: 	nop # Size: 2
.Ltmp1378:
    00000440: 	movq	-0x8(%r13), %rdi
    00000444: 	leaq	-0x8(%r13), %rsi
    00000448: 	cmpq	%rdi, %rcx
    0000044b: 	jb	.Ltmp1374 # Offset: 1099
    0000044d: 	cmpq	%rbx, %rsi
    00000450: 	jbe	.Ltmp1375 # Offset: 1104
    00000456: 	movq	(%rbx), %rdx
    00000459: 	cmpq	%rdx, %rcx
    0000045c: 	jbe	.Ltmp1376 # Offset: 1116
    0000045e: 	leaq	0x8(%rbx), %rax
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1377:
    00000468: 	movq	%rax, %rbx
    0000046b: 	movq	(%rax), %rdx
    0000046e: 	leaq	0x8(%rax), %rax
    00000472: 	cmpq	%rdx, %rcx
    00000475: 	ja	.Ltmp1377 # Offset: 1141
    00000477: 	cmpq	%rbx, %rsi
    0000047a: 	jbe	.Ltmp1375 # Offset: 1146
.Ltmp1376:
    00000480: 	movq	%rdx, (%rsi)
    00000483: 	movq	%rdi, (%rbx)
.Ltmp1374:
    00000486: 	movq	%rsi, %r13
    00000489: 	jmp	.Ltmp1378 # Offset: 1161
.Ltmp1342:
    0000048b: 	movq	%rbx, %rax
    0000048e: 	subq	%rbp, %rax
    00000491: 	cmpq	$0x8, %rax
    00000495: 	jle	.Ltmp1379 # Offset: 1173
    00000497: 	movq	(%rbp), %rsi
    0000049b: 	movq	%rbx, %r14
    0000049e: 	movq	%rbp, %rdx
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp1384:
    000004a8: 	movq	-0x8(%r14), %r8
    000004ac: 	leaq	-0x8(%r14), %rdi
    000004b0: 	cmpq	%r8, %rsi
    000004b3: 	jb	.Ltmp1380 # Offset: 1203
    000004b5: 	cmpq	%rdx, %rdi
    000004b8: 	jbe	.Ltmp1381 # Offset: 1208
    000004ba: 	movq	(%rdx), %rcx
    000004bd: 	cmpq	%rsi, %rcx
    000004c0: 	jae	.Ltmp1382 # Offset: 1216
    000004c2: 	leaq	0x8(%rdx), %rax
    000004c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1383:
    000004d0: 	movq	%rax, %rdx
    000004d3: 	movq	(%rax), %rcx
    000004d6: 	leaq	0x8(%rax), %rax
    000004da: 	cmpq	%rcx, %rsi
    000004dd: 	ja	.Ltmp1383 # Offset: 1245
    000004df: 	cmpq	%rdx, %rdi
    000004e2: 	jbe	.Ltmp1381 # Offset: 1250
.Ltmp1382:
    000004e4: 	movq	%rcx, (%rdi)
    000004e7: 	movq	%r8, (%rdx)
.Ltmp1380:
    000004ea: 	movq	%rdi, %r14
    000004ed: 	jmp	.Ltmp1384 # Offset: 1261
.Ltmp1381:
    000004ef: 	movq	%r14, %rsi
    000004f2: 	movq	%rbp, %rdi
    000004f5: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1269
    000004fa: 	movq	%rbx, %rsi
    000004fd: 	movq	%r14, %rdi
    00000500: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1280
.Ltmp1379:
    00000505: 	movq	%r13, %rax
    00000508: 	movq	%rbx, %r8
    0000050b: 	subq	%rbx, %rax
    0000050e: 	cmpq	$0x8, %rax
    00000512: 	jle	.Ltmp1385 # Offset: 1298
    00000518: 	movq	(%rbx), %rcx
    0000051b: 	movq	%r13, %rbp
    0000051e: 	nop # Size: 2
.Ltmp1390:
    00000520: 	movq	-0x8(%rbp), %rdi
    00000524: 	leaq	-0x8(%rbp), %rsi
    00000528: 	cmpq	%rdi, %rcx
    0000052b: 	jb	.Ltmp1386 # Offset: 1323
    0000052d: 	cmpq	%rbx, %rsi
    00000530: 	jbe	.Ltmp1387 # Offset: 1328
    00000536: 	movq	(%rbx), %rdx
    00000539: 	cmpq	%rdx, %rcx
    0000053c: 	jbe	.Ltmp1388 # Offset: 1340
    0000053e: 	leaq	0x8(%rbx), %rax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1389:
    00000548: 	movq	%rax, %rbx
    0000054b: 	movq	(%rax), %rdx
    0000054e: 	leaq	0x8(%rax), %rax
    00000552: 	cmpq	%rdx, %rcx
    00000555: 	ja	.Ltmp1389 # Offset: 1365
    00000557: 	cmpq	%rbx, %rsi
    0000055a: 	jbe	.Ltmp1387 # Offset: 1370
.Ltmp1388:
    00000560: 	movq	%rdx, (%rsi)
    00000563: 	movq	%rdi, (%rbx)
.Ltmp1386:
    00000566: 	movq	%rsi, %rbp
    00000569: 	jmp	.Ltmp1390 # Offset: 1385
.Ltmp1337:
    0000056b: 	movq	%rbp, %rax
    0000056e: 	subq	%r13, %rax
    00000571: 	cmpq	$0x8, %rax
    00000575: 	jle	.Ltmp1391 # Offset: 1397
    00000577: 	movq	(%r13), %rsi
    0000057b: 	movq	%rbp, %r14
    0000057e: 	movq	%r13, %rdx
    00000581: 	nopl	(%rax) # Size: 7
.Ltmp1396:
    00000588: 	movq	-0x8(%r14), %r8
    0000058c: 	leaq	-0x8(%r14), %rdi
    00000590: 	cmpq	%r8, %rsi
    00000593: 	jb	.Ltmp1392 # Offset: 1427
    00000595: 	cmpq	%rdx, %rdi
    00000598: 	jbe	.Ltmp1393 # Offset: 1432
    0000059a: 	movq	(%rdx), %rcx
    0000059d: 	cmpq	%rsi, %rcx
    000005a0: 	jae	.Ltmp1394 # Offset: 1440
    000005a2: 	leaq	0x8(%rdx), %rax
    000005a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1395:
    000005b0: 	movq	%rax, %rdx
    000005b3: 	movq	(%rax), %rcx
    000005b6: 	leaq	0x8(%rax), %rax
    000005ba: 	cmpq	%rcx, %rsi
    000005bd: 	ja	.Ltmp1395 # Offset: 1469
    000005bf: 	cmpq	%rdx, %rdi
    000005c2: 	jbe	.Ltmp1393 # Offset: 1474
.Ltmp1394:
    000005c4: 	movq	%rcx, (%rdi)
    000005c7: 	movq	%r8, (%rdx)
.Ltmp1392:
    000005ca: 	movq	%rdi, %r14
    000005cd: 	jmp	.Ltmp1396 # Offset: 1485
.Ltmp1393:
    000005cf: 	movq	%r14, %rsi
    000005d2: 	movq	%r13, %rdi
    000005d5: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1493
    000005da: 	movq	%rbp, %rsi
    000005dd: 	movq	%r14, %rdi
    000005e0: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1504
.Ltmp1391:
    000005e5: 	movq	%r12, %rax
    000005e8: 	movq	%rbp, %r8
    000005eb: 	subq	%rbp, %rax
    000005ee: 	cmpq	$0x8, %rax
    000005f2: 	jle	.Ltmp1328 # Offset: 1522
    000005f8: 	movq	(%rbp), %rcx
    000005fc: 	movq	%r12, %r13
    000005ff: 	nop # Size: 1
.Ltmp1401:
    00000600: 	movq	-0x8(%r13), %rdi
    00000604: 	leaq	-0x8(%r13), %rsi
    00000608: 	cmpq	%rdi, %rcx
    0000060b: 	jb	.Ltmp1397 # Offset: 1547
    0000060d: 	cmpq	%rbp, %rsi
    00000610: 	jbe	.Ltmp1398 # Offset: 1552
    00000612: 	movq	(%rbp), %rdx
    00000616: 	cmpq	%rcx, %rdx
    00000619: 	jae	.Ltmp1399 # Offset: 1561
    0000061b: 	leaq	0x8(%rbp), %rax
    0000061f: 	nop # Size: 1
.Ltmp1400:
    00000620: 	movq	%rax, %rbp
    00000623: 	movq	(%rax), %rdx
    00000626: 	leaq	0x8(%rax), %rax
    0000062a: 	cmpq	%rdx, %rcx
    0000062d: 	ja	.Ltmp1400 # Offset: 1581
    0000062f: 	cmpq	%rbp, %rsi
    00000632: 	jbe	.Ltmp1398 # Offset: 1586
.Ltmp1399:
    00000634: 	movq	%rdx, (%rsi)
    00000637: 	movq	%rdi, (%rbp)
.Ltmp1397:
    0000063b: 	movq	%rsi, %r13
    0000063e: 	jmp	.Ltmp1401 # Offset: 1598
.Ltmp1398:
    00000640: 	movq	%r13, %rsi
    00000643: 	movq	%r8, %rdi
    00000646: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1606
    0000064b: 	popq	%rbx
    0000064c: 	movq	%r12, %rsi
    0000064f: 	popq	%rbp
    00000650: 	movq	%r13, %rdi
    00000653: 	popq	%r12
    00000655: 	popq	%r13
    00000657: 	popq	%r14
    00000659: 	jmp	.LBB058 # Offset: 1625
.Ltmp1387:
    0000065e: 	movq	%rbp, %rsi
    00000661: 	movq	%r8, %rdi
    00000664: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1636
    00000669: 	movq	%r13, %rsi
    0000066c: 	movq	%rbp, %rdi
    0000066f: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1647
    00000674: 	jmp	.Ltmp1385 # Offset: 1652
.Ltmp1375:
    00000679: 	movq	%r13, %rsi
    0000067c: 	movq	%r8, %rdi
    0000067f: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1663
    00000684: 	movq	%rbp, %rsi
    00000687: 	movq	%r13, %rdi
    0000068a: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1674
    0000068f: 	jmp	.Ltmp1320 # Offset: 1679
.Ltmp1364:
    00000694: 	movq	%r14, %rsi
    00000697: 	movq	%r8, %rdi
    0000069a: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1690
    0000069f: 	movq	%r13, %rsi
    000006a2: 	movq	%r14, %rdi
    000006a5: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 1701
    000006aa: 	jmp	.Ltmp1362 # Offset: 1706
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_"

Binary Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0xa200
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0xa200
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPddEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r9
    0000000c: 	movq	%rsi, %rcx
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp1402 # Offset: 21
    0000001b: 	movq	%rdx, %rdi
    0000001e: 	jmp	.Ltmp1403 # Offset: 30
.Ltmp1405:
    00000020: 	leaq	-0x1(%rax), %r10
    00000024: 	leaq	(%rax,%rax), %rsi
    00000028: 	movsd	%xmm2, (%rcx,%rdi,8)
    0000002d: 	leaq	(%rcx,%r10,8), %rdx
    00000031: 	movq	%r10, %rax
    00000034: 	cmpq	%rsi, %r9
    00000037: 	jle	.Ltmp1404 # Offset: 55
.Ltmp1406:
    00000039: 	movq	%rax, %rdi
    0000003c: 	movq	%rsi, %rax
.Ltmp1403:
    0000003f: 	leaq	(,%rax,8), %rdx
    00000047: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000004d: 	addq	%rcx, %rdx
    00000050: 	movsd	(%rdx), %xmm1
    00000054: 	comisd	%xmm2, %xmm1
    00000058: 	jbe	.Ltmp1405 # Offset: 88
    0000005a: 	leaq	0x2(%rax,%rax), %rsi
    0000005f: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000064: 	cmpq	%rsi, %r9
    00000067: 	jg	.Ltmp1406 # Offset: 103
.Ltmp1404:
    00000069: 	cmpq	%rsi, %r9
    0000006c: 	je	.Ltmp1407 # Offset: 108
.Ltmp1412:
    00000072: 	leaq	-0x1(%rax), %rdi
    00000076: 	movq	%rdi, %rsi
    00000079: 	shrq	$0x3f, %rsi
    0000007d: 	addq	%rdi, %rsi
    00000080: 	sarq	%rsi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1408 # Offset: 134
    00000088: 	jmp	.Ltmp1409 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1411:
    00000090: 	movsd	%xmm1, (%rdx)
    00000094: 	leaq	-0x1(%rsi), %rdx
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rsi, %rax
    000000ab: 	cmpq	%rsi, %r8
    000000ae: 	jge	.Ltmp1410 # Offset: 174
    000000b0: 	movq	%rdx, %rsi
.Ltmp1408:
    000000b3: 	leaq	(%rcx,%rsi,8), %rdi
    000000b7: 	leaq	(%rcx,%rax,8), %rdx
    000000bb: 	movsd	(%rdi), %xmm1
    000000bf: 	comisd	%xmm1, %xmm0
    000000c3: 	ja	.Ltmp1411 # Offset: 195
.Ltmp1409:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1410:
    000000d0: 	movq	%rdi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1402:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1409 # Offset: 228
    000000e6: 	movq	%rax, %rsi
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1407:
    000000f0: 	movsd	-0x8(%rcx,%rsi,8), %xmm1
    000000f6: 	leaq	-0x1(%rsi), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rcx,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1412 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0xa310
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0xa310
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	0x8(%rsi), %rcx
    00000010: 	movq	%rdi, %r10
    00000013: 	cmpq	%rdi, %rdx
    00000016: 	jge	.Ltmp1413 # Offset: 22
    0000001c: 	movq	%r8, %r9
    0000001f: 	jmp	.Ltmp1414 # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1416:
    00000028: 	movq	%rax, %r9
.Ltmp1414:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,8), %rdi
    00000037: 	leaq	(%rcx,%rdi), %rsi
    0000003b: 	leaq	0x8(%rcx,%rdi), %rdi
    00000040: 	movsd	(%rsi), %xmm1
    00000044: 	movsd	(%rdi), %xmm2
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp1415 # Offset: 76
    0000004e: 	movq	%rdx, %rax
    00000051: 	movapd	%xmm2, %xmm1
    00000055: 	movq	%rdi, %rsi
    00000058: 	addq	$0x1, %rdx
.Ltmp1415:
    0000005c: 	addq	%rdx, %rdx
    0000005f: 	movsd	%xmm1, (%rcx,%r9,8)
    00000065: 	cmpq	%rdx, %r10
    00000068: 	jg	.Ltmp1416 # Offset: 104
    0000006a: 	je	.Ltmp1417 # Offset: 106
.Ltmp1422:
    0000006c: 	leaq	-0x1(%rax), %rdx
    00000070: 	movq	%rdx, %rdi
    00000073: 	shrq	$0x3f, %rdi
    00000077: 	addq	%rdx, %rdi
    0000007a: 	sarq	%rdi
    0000007d: 	cmpq	%r8, %rax
    00000080: 	jg	.Ltmp1418 # Offset: 128
    00000082: 	jmp	.Ltmp1419 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1421:
    00000088: 	leaq	-0x1(%rdi), %rdx
    0000008c: 	movsd	%xmm1, (%rsi)
    00000090: 	movq	%rdx, %rax
    00000093: 	shrq	$0x3f, %rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	sarq	%rax
    0000009d: 	movq	%rax, %rdx
    000000a0: 	movq	%rdi, %rax
    000000a3: 	cmpq	%rdi, %r8
    000000a6: 	jge	.Ltmp1420 # Offset: 166
    000000a8: 	movq	%rdx, %rdi
.Ltmp1418:
    000000ab: 	leaq	(%rcx,%rdi,8), %r9
    000000af: 	leaq	(%rcx,%rax,8), %rsi
    000000b3: 	movsd	(%r9), %xmm1
    000000b8: 	comisd	%xmm1, %xmm0
    000000bc: 	ja	.Ltmp1421 # Offset: 188
.Ltmp1419:
    000000be: 	movsd	%xmm0, (%rsi)
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1420:
    000000c8: 	movq	%r9, %rsi
    000000cb: 	movsd	%xmm0, (%rsi)
    000000cf: 	retq # Offset: 207
.Ltmp1413:
    000000d0: 	leaq	(%rcx,%r8,8), %rsi
    000000d4: 	jne	.Ltmp1419 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1417:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp1422 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_"

Binary Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_heap_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_heap_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_array.cpp/1
  Number      : 62
  State       : disassembled
  Address     : 0xa410
  Size        : 0x266
  MaxSize     : 0x270
  Offset      : 0xa410
  Section     : .text
  Orc Section : .local.text._Z14test_heap_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	xorl	%r13d, %r13d
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x58, %rsp
    00000011: 	movq	%rdi, 0x8(%rsp)
    00000016: 	leaq	0x30(%rsp), %rbp
    0000001b: 	movq	%rsi, 0x10(%rsp)
    00000020: 	movq	%rdx, 0x18(%rsp)
    00000025: 	movq	%rcx, 0x20(%rsp)
    0000002a: 	movq	%r8, 0x28(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x48(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	movl	%eax, 0x4(%rsp)
    00000055: 	testl	%eax, %eax
    00000057: 	jle	.Ltmp1423 # Offset: 87
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1434:
    00000060: 	movq	0x18(%rsp), %rax
    00000065: 	movq	0x8(%rax), %r15
    00000069: 	movq	0x10(%rsp), %rax
    0000006e: 	movq	0x8(%rax), %rdi
    00000072: 	movq	0x8(%rsp), %rax
    00000077: 	movq	0x8(%rax), %rcx
    0000007b: 	cmpq	%rcx, %rdi
    0000007e: 	je	.Ltmp1424 # Offset: 126
    00000080: 	subq	%rcx, %rdi
    00000083: 	leaq	0x8(%rcx), %rdx
    00000087: 	leaq	-0x8(%rdi), %rsi
    0000008b: 	cmpq	%rdx, %r15
    0000008e: 	je	.Ltmp1425 # Offset: 142
    00000094: 	cmpq	$0x10, %rsi
    00000098: 	jbe	.Ltmp1425 # Offset: 152
    0000009e: 	shrq	$0x3, %rsi
    000000a2: 	xorl	%edx, %edx
    000000a4: 	addq	$0x1, %rsi
    000000a8: 	movq	%rsi, %rdi
    000000ab: 	shrq	%rdi
    000000ae: 	shlq	$0x4, %rdi
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1426:
    000000b8: 	movupd	(%rcx,%rdx), %xmm2
    000000bd: 	movups	%xmm2, (%r15,%rdx)
    000000c2: 	addq	$0x10, %rdx
    000000c6: 	cmpq	%rdi, %rdx
    000000c9: 	jne	.Ltmp1426 # Offset: 201
    000000cb: 	movq	%rsi, %rdi
    000000ce: 	andq	$-0x2, %rdi
    000000d2: 	leaq	(,%rdi,8), %rdx
    000000da: 	addq	%rdx, %rcx
    000000dd: 	addq	%r15, %rdx
    000000e0: 	cmpq	%rsi, %rdi
    000000e3: 	je	.Ltmp1424 # Offset: 227
    000000e5: 	movsd	(%rcx), %xmm0
    000000e9: 	movsd	%xmm0, (%rdx)
.Ltmp1424:
    000000ed: 	movq	0x20(%rsp), %rax
    000000f2: 	movq	0x8(%rax), %r12
    000000f6: 	movq	%r12, %rdx
    000000f9: 	subq	%r15, %rdx
    000000fc: 	movq	%rdx, %rbx
    000000ff: 	shrq	$0x3f, %rdx
    00000103: 	sarq	$0x3, %rbx
    00000107: 	addq	%rbx, %rdx
    0000010a: 	sarq	%rdx
    0000010d: 	subq	$0x1, %rdx
    00000111: 	movq	%rdx, %r14
    00000114: 	js	.Ltmp1427 # Offset: 276
    00000116: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1428:
    00000120: 	movsd	(%r15,%r14,8), %xmm0
    00000126: 	movq	%r14, %rdx
    00000129: 	movq	%rbp, %rsi
    0000012c: 	movq	%rbx, %rdi
    0000012f: 	movq	%r15, 0x38(%rsp)
    00000134: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_ # Offset: 308
    00000139: 	subq	$0x1, %r14
    0000013d: 	jae	.Ltmp1428 # Offset: 317
.Ltmp1427:
    0000013f: 	subq	$0x1, %rbx
    00000143: 	testq	%rbx, %rbx
    00000146: 	jle	.Ltmp1429 # Offset: 326
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1430:
    00000150: 	movsd	(%r15), %xmm1
    00000155: 	movsd	(%r15,%rbx,8), %xmm0
    0000015b: 	xorl	%edx, %edx
    0000015d: 	movq	%rbx, %rdi
    00000160: 	movq	%rbp, %rsi
    00000163: 	movq	%r15, 0x38(%rsp)
    00000168: 	movsd	%xmm1, (%r15,%rbx,8)
    0000016e: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPdEEdEEvlT_lT0_ # Offset: 366
    00000173: 	subq	$0x1, %rbx
    00000177: 	jne	.Ltmp1430 # Offset: 375
.Ltmp1429:
    00000179: 	leaq	0x8(%r15), %rax
    0000017d: 	jmp	.Ltmp1431 # Offset: 381
    0000017f: 	nop # Size: 1
.Ltmp1433:
    00000180: 	addq	$0x8, %rax
    00000184: 	movsd	-0x10(%rax), %xmm0
    00000189: 	comisd	(%rdx), %xmm0
    0000018d: 	ja	.Ltmp1432 # Offset: 397
.Ltmp1431:
    0000018f: 	movq	%rax, %rdx
    00000192: 	cmpq	%rax, %r12
    00000195: 	jne	.Ltmp1433 # Offset: 405
    00000197: 	addl	$0x1, %r13d
    0000019b: 	cmpl	0x4(%rsp), %r13d
    000001a0: 	jl	.Ltmp1434 # Offset: 416
.Ltmp1423:
    000001a6: 	callq	clock@PLT # Offset: 422
    000001ab: 	movq	%rax, end_time(%rip)
    000001b2: 	movq	0x48(%rsp), %rdx
    000001b7: 	subq	%fs:0x28, %rdx
    000001c0: 	jne	.Ltmp1435 # Offset: 448
    000001c6: 	subq	start_time(%rip), %rax
    000001cd: 	pxor	%xmm0, %xmm0
    000001d1: 	movq	0x28(%rsp), %rdi
    000001d6: 	cvtsi2sd	%rax, %xmm0
    000001db: 	divsd	DATAat0x13600(%rip), %xmm0
    000001e3: 	addq	$0x58, %rsp
    000001e7: 	popq	%rbx
    000001e8: 	popq	%rbp
    000001e9: 	popq	%r12
    000001eb: 	popq	%r13
    000001ed: 	popq	%r14
    000001ef: 	popq	%r15
    000001f1: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 497
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1432:
    00000200: 	movq	0x28(%rsp), %rax
    00000205: 	leaq	DATAat0x131ba(%rip), %rsi
    0000020c: 	movl	$0x1, %edi
    00000211: 	addl	$0x1, %r13d
    00000215: 	movq	(%rax), %rdx
    00000218: 	xorl	%eax, %eax
    0000021a: 	callq	__printf_chk@PLT # Offset: 538
    0000021f: 	movl	iterations(%rip), %eax
    00000225: 	movl	%eax, 0x4(%rsp)
    00000229: 	cmpl	0x4(%rsp), %r13d
    0000022e: 	jl	.Ltmp1434 # Offset: 558
    00000234: 	jmp	.Ltmp1423 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp1425:
    00000240: 	xorl	%edx, %edx
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1436:
    00000248: 	movsd	(%rcx,%rdx), %xmm0
    0000024d: 	movsd	%xmm0, (%r15,%rdx)
    00000253: 	addq	$0x8, %rdx
    00000257: 	cmpq	%rdi, %rdx
    0000025a: 	jne	.Ltmp1436 # Offset: 602
    0000025c: 	jmp	.Ltmp1424 # Offset: 604
.Ltmp1435:
    00000261: 	callq	__stack_chk_fail@PLT # Offset: 609
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPddEEdEEdEEvlT_lT0_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0xa680
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0xa680
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPddEEdEEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %rcx
    00000012: 	cmpq	%rdi, %rdx
    00000015: 	jge	.Ltmp1437 # Offset: 21
    0000001b: 	movq	%r8, %r9
    0000001e: 	jmp	.Ltmp1438 # Offset: 30
.Ltmp1440:
    00000020: 	movq	%rax, %r9
.Ltmp1438:
    00000023: 	leaq	-0x1(%rdx), %rax
    00000027: 	leaq	(,%rax,8), %rdi
    0000002f: 	leaq	(%rcx,%rdi), %rsi
    00000033: 	leaq	0x8(%rdi,%rcx), %rdi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	(%rdi), %xmm2
    00000040: 	comisd	%xmm1, %xmm2
    00000044: 	jbe	.Ltmp1439 # Offset: 68
    00000046: 	movq	%rdx, %rax
    00000049: 	movapd	%xmm2, %xmm1
    0000004d: 	movq	%rdi, %rsi
    00000050: 	addq	$0x1, %rdx
.Ltmp1439:
    00000054: 	addq	%rdx, %rdx
    00000057: 	movsd	%xmm1, (%rcx,%r9,8)
    0000005d: 	cmpq	%rdx, %r10
    00000060: 	jg	.Ltmp1440 # Offset: 96
    00000062: 	je	.Ltmp1441 # Offset: 98
.Ltmp1446:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1442 # Offset: 120
    0000007a: 	jmp	.Ltmp1443 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1445:
    00000080: 	leaq	-0x1(%rdi), %rdx
    00000084: 	movsd	%xmm1, (%rsi)
    00000088: 	movq	%rdx, %rax
    0000008b: 	shrq	$0x3f, %rax
    0000008f: 	addq	%rdx, %rax
    00000092: 	sarq	%rax
    00000095: 	movq	%rax, %rdx
    00000098: 	movq	%rdi, %rax
    0000009b: 	cmpq	%rdi, %r8
    0000009e: 	jge	.Ltmp1444 # Offset: 158
    000000a0: 	movq	%rdx, %rdi
.Ltmp1442:
    000000a3: 	leaq	(%rcx,%rdi,8), %r9
    000000a7: 	leaq	(%rcx,%rax,8), %rsi
    000000ab: 	movsd	(%r9), %xmm1
    000000b0: 	comisd	%xmm1, %xmm0
    000000b4: 	ja	.Ltmp1445 # Offset: 180
.Ltmp1443:
    000000b6: 	movsd	%xmm0, (%rsi)
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1444:
    000000c0: 	movq	%r9, %rsi
    000000c3: 	movsd	%xmm0, (%rsi)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1437:
    000000d0: 	leaq	(%rsi,%r8,8), %rsi
    000000d4: 	jne	.Ltmp1443 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1441:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp1446 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPddEEdEEdEEvlT_lT0_"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0xa780
  Size        : 0x25bc
  MaxSize     : 0x25c0
  Offset      : 0xa780
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp1447:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1447 # Offset: 37
    00000027: 	subq	$0xb88, %rsp
    0000002e: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    00000036: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    0000003e: 	movl	$0x656c, %ecx
    00000043: 	movq	"_ZL7gLabels/1"+56(%rip), %r13
    0000004a: 	movhlps	%xmm3, %xmm5
    0000004d: 	movq	%xmm4, %rbp
    00000052: 	movq	%xmm5, %rsi
    00000057: 	leaq	0x8(%rsi), %r12
    0000005b: 	movq	%r12, %r14
    0000005e: 	movq	%fs:0x28, %rax
    00000067: 	movq	%rax, 0xfb78(%rsp)
    0000006f: 	xorl	%eax, %eax
    00000071: 	leaq	0xe0(%rsp), %rax
    00000079: 	movw	%cx, 0xe4(%rsp)
    00000081: 	movq	%rax, 0x60(%rsp)
    00000086: 	movq	%rax, 0xd0(%rsp)
    0000008e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000095: 	movl	$0x62756f64, 0xe0(%rsp)
    000000a0: 	movq	%rax, (%rsp)
    000000a4: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000ab: 	movq	$0x6, 0xd8(%rsp)
    000000b7: 	movb	$0x0, 0xe6(%rsp)
    000000bf: 	movq	%rax, 0x8(%rsp)
    000000c4: 	movaps	%xmm4, 0x20(%rsp)
    000000c9: 	movaps	%xmm3, 0x10(%rsp)
    000000ce: 	movq	%xmm5, 0x38(%rsp)
    000000d4: 	movq	%xmm3, 0x30(%rsp)
    000000da: 	cmpq	%r12, %rax
    000000dd: 	jbe	.Ltmp1448 # Offset: 221
.Ltmp1451:
    000000df: 	movq	(%r14), %r15
    000000e2: 	leaq	0x200(%r15), %rbx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1450:
    000000f0: 	movq	(%r15), %rdi
    000000f3: 	leaq	0x10(%r15), %rdx
    000000f7: 	cmpq	%rdx, %rdi
    000000fa: 	je	.Ltmp1449 # Offset: 250
    00000100: 	movq	0x10(%r15), %rax
    00000104: 	addq	$0x20, %r15
    00000108: 	leaq	0x1(%rax), %rsi
    0000010c: 	callq	_ZdlPvm@PLT # Offset: 268
    00000111: 	cmpq	%rbx, %r15
    00000114: 	jne	.Ltmp1450 # Offset: 276
    00000116: 	addq	$0x8, %r14
    0000011a: 	cmpq	%r14, 0x8(%rsp)
    0000011f: 	ja	.Ltmp1451 # Offset: 287
.Ltmp1448:
    00000121: 	movq	0x38(%rsp), %rsi
    00000126: 	cmpq	%rsi, 0x8(%rsp)
    0000012b: 	jne	.Ltmp1452 # Offset: 299
    0000012d: 	jmp	.Ltmp1453 # Offset: 301
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1455:
    00000138: 	movq	0x10(%rbp), %rax
    0000013c: 	addq	$0x20, %rbp
    00000140: 	leaq	0x1(%rax), %rsi
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
.Ltmp1452:
    00000149: 	cmpq	%rbp, 0x30(%rsp)
    0000014e: 	je	.Ltmp1454 # Offset: 334
.Ltmp1456:
    00000150: 	movq	(%rbp), %rdi
    00000154: 	leaq	0x10(%rbp), %rax
    00000158: 	cmpq	%rax, %rdi
    0000015b: 	jne	.Ltmp1455 # Offset: 347
    0000015d: 	addq	$0x20, %rbp
    00000161: 	cmpq	0x30(%rsp), %rbp
    00000166: 	jne	.Ltmp1456 # Offset: 358
    00000168: 	cmpq	%r13, (%rsp)
    0000016c: 	je	.Ltmp1457 # Offset: 364
.Ltmp1459:
    0000016e: 	movq	(%r13), %rdi
    00000172: 	leaq	0x10(%r13), %rax
    00000176: 	cmpq	%rax, %rdi
    00000179: 	je	.Ltmp1458 # Offset: 377
    0000017b: 	movq	0x10(%r13), %rax
    0000017f: 	leaq	0x1(%rax), %rsi
    00000183: 	callq	_ZdlPvm@PLT # Offset: 387
.Ltmp1458:
    00000188: 	addq	$0x20, %r13
.Ltmp1454:
    0000018c: 	cmpq	%r13, (%rsp)
    00000190: 	jne	.Ltmp1459 # Offset: 400
.Ltmp1457:
    00000192: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00000199: 	leaq	0x8(%rax), %rbx
    0000019d: 	cmpq	%r12, %rbx
    000001a0: 	jbe	.Ltmp1460 # Offset: 416
.Ltmp1461:
    000001a2: 	movq	(%r12), %rdi
    000001a6: 	movl	$0x200, %esi
    000001ab: 	addq	$0x8, %r12
    000001af: 	callq	_ZdlPvm@PLT # Offset: 431
    000001b4: 	cmpq	%r12, %rbx
    000001b7: 	ja	.Ltmp1461 # Offset: 439
.Ltmp1460:
    000001b9: 	movl	iterations(%rip), %eax
    000001bf: 	movsd	init_value(%rip), %xmm0
    000001c7: 	leaq	0x170(%rsp), %rbp
    000001cf: 	leaq	0x3ff0(%rsp), %r15
    000001d7: 	movdqa	0x20(%rsp), %xmm5
    000001dd: 	movdqa	0x10(%rsp), %xmm6
    000001e3: 	movl	%eax, 0x6c(%rsp)
    000001e7: 	cvttsd2si	%xmm0, %eax
    000001eb: 	unpcklpd	%xmm0, %xmm0
    000001ef: 	movaps	%xmm5, "_ZL7gLabels/1"+48(%rip)
    000001f6: 	movaps	%xmm6, "_ZL7gLabels/1"+64(%rip)
    000001fd: 	addl	$0x1c8, %eax
    00000202: 	cltq
    00000204: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000020b: 	movq	%rbp, %rax
.Ltmp1462:
    0000020e: 	movaps	%xmm0, (%rax)
    00000211: 	addq	$0x10, %rax
    00000215: 	cmpq	%rax, %r15
    00000218: 	jne	.Ltmp1462 # Offset: 536
    0000021a: 	leaq	0xbcf0(%rsp), %r12
    00000222: 	leaq	0x7e70(%rsp), %rbx
    0000022a: 	movq	%r12, 0x50(%rsp)
    0000022f: 	movq	%rbx, %rax
.Ltmp1463:
    00000232: 	movaps	%xmm0, (%rax)
    00000235: 	addq	$0x10, %rax
    00000239: 	cmpq	%rax, %r12
    0000023c: 	jne	.Ltmp1463 # Offset: 572
    0000023e: 	leaq	0xd0(%rsp), %rax
    00000246: 	leaq	DATAat0x131e4(%rip), %rdx
    0000024d: 	movq	%r12, %rdi
    00000250: 	movq	%rax, %rsi
    00000253: 	movq	%rax, 0x30(%rsp)
    00000258: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 600
    0000025d: 	callq	clock@PLT # Offset: 605
    00000262: 	movl	iterations(%rip), %edx
    00000268: 	movq	%rax, start_time(%rip)
    0000026f: 	testl	%edx, %edx
    00000271: 	jle	.Ltmp1464 # Offset: 625
    00000273: 	movsd	DATAat0x13610(%rip), %xmm5
    0000027b: 	pxor	%xmm7, %xmm7
    0000027f: 	xorl	%r13d, %r13d
    00000282: 	leaq	DATAat0x131bf(%rip), %r14
    00000289: 	movsd	%xmm7, (%rsp)
    0000028e: 	movsd	%xmm5, 0x8(%rsp)
.Ltmp1467:
    00000294: 	movq	%rbp, %rax
    00000297: 	pxor	%xmm0, %xmm0
    0000029b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1465:
    000002a0: 	movsd	(%rax), %xmm1
    000002a4: 	addq	$0x10, %rax
    000002a8: 	addsd	%xmm1, %xmm0
    000002ac: 	movsd	-0x8(%rax), %xmm1
    000002b1: 	addsd	%xmm1, %xmm0
    000002b5: 	cmpq	%rax, %r15
    000002b8: 	jne	.Ltmp1465 # Offset: 696
    000002ba: 	movsd	0x8(%rsp), %xmm1
    000002c0: 	mulsd	init_value(%rip), %xmm1
    000002c8: 	ucomisd	%xmm1, %xmm0
    000002cc: 	jp	.Ltmp1466 # Offset: 716
    000002d2: 	jne	.Ltmp1466 # Offset: 722
.Ltmp1562:
    000002d8: 	addl	$0x1, %r13d
    000002dc: 	cmpl	%edx, %r13d
    000002df: 	jl	.Ltmp1467 # Offset: 735
.Ltmp1464:
    000002e1: 	callq	clock@PLT # Offset: 737
    000002e6: 	pxor	%xmm0, %xmm0
    000002ea: 	movq	%r12, %rdi
    000002ed: 	movq	%rax, end_time(%rip)
    000002f4: 	subq	start_time(%rip), %rax
    000002fb: 	cvtsi2sd	%rax, %xmm0
    00000300: 	divsd	DATAat0x13600(%rip), %xmm0
    00000308: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 776
    0000030d: 	movq	0xbcf0(%rsp), %rdi
    00000315: 	leaq	0xbd00(%rsp), %r13
    0000031d: 	cmpq	%r13, %rdi
    00000320: 	je	.Ltmp1468 # Offset: 800
    00000322: 	movq	0xbd00(%rsp), %rax
    0000032a: 	leaq	0x1(%rax), %rsi
    0000032e: 	callq	_ZdlPvm@PLT # Offset: 814
.Ltmp1468:
    00000333: 	movq	0x30(%rsp), %rsi
    00000338: 	leaq	DATAat0x13200(%rip), %rdx
    0000033f: 	movq	%r12, %rdi
    00000342: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 834
    00000347: 	callq	clock@PLT # Offset: 839
    0000034c: 	movl	iterations(%rip), %edx
    00000352: 	movq	%rax, start_time(%rip)
    00000359: 	testl	%edx, %edx
    0000035b: 	jle	.Ltmp1469 # Offset: 859
    0000035d: 	movsd	DATAat0x13610(%rip), %xmm7
    00000365: 	pxor	%xmm6, %xmm6
    00000369: 	xorl	%r14d, %r14d
    0000036c: 	movsd	%xmm6, (%rsp)
    00000371: 	movsd	%xmm7, 0x8(%rsp)
.Ltmp1472:
    00000377: 	movq	%rbx, %rax
    0000037a: 	pxor	%xmm0, %xmm0
    0000037e: 	nop # Size: 2
.Ltmp1470:
    00000380: 	movsd	(%rax), %xmm1
    00000384: 	addq	$0x10, %rax
    00000388: 	addsd	%xmm1, %xmm0
    0000038c: 	movsd	-0x8(%rax), %xmm1
    00000391: 	addsd	%xmm1, %xmm0
    00000395: 	cmpq	%rax, %r12
    00000398: 	jne	.Ltmp1470 # Offset: 920
    0000039a: 	movsd	0x8(%rsp), %xmm1
    000003a0: 	mulsd	init_value(%rip), %xmm1
    000003a8: 	ucomisd	%xmm1, %xmm0
    000003ac: 	jp	.Ltmp1471 # Offset: 940
    000003b2: 	jne	.Ltmp1471 # Offset: 946
.Ltmp1564:
    000003b8: 	addl	$0x1, %r14d
    000003bc: 	cmpl	%edx, %r14d
    000003bf: 	jl	.Ltmp1472 # Offset: 959
.Ltmp1469:
    000003c1: 	callq	clock@PLT # Offset: 961
    000003c6: 	pxor	%xmm0, %xmm0
    000003ca: 	movq	%r12, %rdi
    000003cd: 	movq	%rax, end_time(%rip)
    000003d4: 	subq	start_time(%rip), %rax
    000003db: 	cvtsi2sd	%rax, %xmm0
    000003e0: 	divsd	DATAat0x13600(%rip), %xmm0
    000003e8: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1000
    000003ed: 	movq	0xbcf0(%rsp), %rdi
    000003f5: 	cmpq	%r13, %rdi
    000003f8: 	je	.Ltmp1473 # Offset: 1016
    000003fa: 	movq	0xbd00(%rsp), %rax
    00000402: 	leaq	0x1(%rax), %rsi
    00000406: 	callq	_ZdlPvm@PLT # Offset: 1030
.Ltmp1473:
    0000040b: 	movq	0x30(%rsp), %rsi
    00000410: 	leaq	DATAat0x132d0(%rip), %rdx
    00000417: 	movq	%r12, %rdi
    0000041a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1050
    0000041f: 	callq	clock@PLT # Offset: 1055
    00000424: 	movl	iterations(%rip), %edx
    0000042a: 	movq	%rax, start_time(%rip)
    00000431: 	testl	%edx, %edx
    00000433: 	jle	.Ltmp1474 # Offset: 1075
    00000435: 	movsd	DATAat0x13610(%rip), %xmm6
    0000043d: 	pxor	%xmm5, %xmm5
    00000441: 	xorl	%r14d, %r14d
    00000444: 	movsd	%xmm5, (%rsp)
    00000449: 	movsd	%xmm6, 0x8(%rsp)
.Ltmp1477:
    0000044f: 	movq	%rbp, %rax
    00000452: 	pxor	%xmm0, %xmm0
    00000456: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1475:
    00000460: 	movsd	(%rax), %xmm1
    00000464: 	addq	$0x10, %rax
    00000468: 	addsd	%xmm1, %xmm0
    0000046c: 	movsd	-0x8(%rax), %xmm1
    00000471: 	addsd	%xmm1, %xmm0
    00000475: 	cmpq	%rax, %r15
    00000478: 	jne	.Ltmp1475 # Offset: 1144
    0000047a: 	movsd	0x8(%rsp), %xmm1
    00000480: 	mulsd	init_value(%rip), %xmm1
    00000488: 	ucomisd	%xmm1, %xmm0
    0000048c: 	jp	.Ltmp1476 # Offset: 1164
    00000492: 	jne	.Ltmp1476 # Offset: 1170
.Ltmp1563:
    00000498: 	addl	$0x1, %r14d
    0000049c: 	cmpl	%edx, %r14d
    0000049f: 	jl	.Ltmp1477 # Offset: 1183
.Ltmp1474:
    000004a1: 	callq	clock@PLT # Offset: 1185
    000004a6: 	pxor	%xmm0, %xmm0
    000004aa: 	movq	%r12, %rdi
    000004ad: 	movq	%rax, end_time(%rip)
    000004b4: 	subq	start_time(%rip), %rax
    000004bb: 	cvtsi2sd	%rax, %xmm0
    000004c0: 	divsd	DATAat0x13600(%rip), %xmm0
    000004c8: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1224
    000004cd: 	movq	0xbcf0(%rsp), %rdi
    000004d5: 	cmpq	%r13, %rdi
    000004d8: 	je	.Ltmp1478 # Offset: 1240
    000004da: 	movq	0xbd00(%rsp), %rax
    000004e2: 	leaq	0x1(%rax), %rsi
    000004e6: 	callq	_ZdlPvm@PLT # Offset: 1254
.Ltmp1478:
    000004eb: 	movq	0x30(%rsp), %rsi
    000004f0: 	leaq	DATAat0x132f8(%rip), %rdx
    000004f7: 	movq	%r12, %rdi
    000004fa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1274
    000004ff: 	callq	clock@PLT # Offset: 1279
    00000504: 	movl	iterations(%rip), %edx
    0000050a: 	movq	%rax, start_time(%rip)
    00000511: 	testl	%edx, %edx
    00000513: 	jle	.Ltmp1479 # Offset: 1299
    00000515: 	movsd	DATAat0x13610(%rip), %xmm4
    0000051d: 	pxor	%xmm7, %xmm7
    00000521: 	xorl	%r14d, %r14d
    00000524: 	movsd	%xmm7, (%rsp)
    00000529: 	movsd	%xmm4, 0x8(%rsp)
.Ltmp1482:
    0000052f: 	movq	%rbx, %rax
    00000532: 	pxor	%xmm0, %xmm0
    00000536: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1480:
    00000540: 	movsd	(%rax), %xmm1
    00000544: 	addq	$0x10, %rax
    00000548: 	addsd	%xmm1, %xmm0
    0000054c: 	movsd	-0x8(%rax), %xmm1
    00000551: 	addsd	%xmm1, %xmm0
    00000555: 	cmpq	%rax, %r12
    00000558: 	jne	.Ltmp1480 # Offset: 1368
    0000055a: 	movsd	0x8(%rsp), %xmm1
    00000560: 	mulsd	init_value(%rip), %xmm1
    00000568: 	ucomisd	%xmm1, %xmm0
    0000056c: 	jp	.Ltmp1481 # Offset: 1388
    00000572: 	jne	.Ltmp1481 # Offset: 1394
.Ltmp1561:
    00000578: 	addl	$0x1, %r14d
    0000057c: 	cmpl	%edx, %r14d
    0000057f: 	jl	.Ltmp1482 # Offset: 1407
.Ltmp1479:
    00000581: 	callq	clock@PLT # Offset: 1409
    00000586: 	pxor	%xmm0, %xmm0
    0000058a: 	movq	%r12, %rdi
    0000058d: 	movq	%rax, end_time(%rip)
    00000594: 	subq	start_time(%rip), %rax
    0000059b: 	cvtsi2sd	%rax, %xmm0
    000005a0: 	divsd	DATAat0x13600(%rip), %xmm0
    000005a8: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1448
    000005ad: 	movq	0xbcf0(%rsp), %rdi
    000005b5: 	cmpq	%r13, %rdi
    000005b8: 	je	.Ltmp1483 # Offset: 1464
    000005ba: 	movq	0xbd00(%rsp), %rax
    000005c2: 	leaq	0x1(%rax), %rsi
    000005c6: 	callq	_ZdlPvm@PLT # Offset: 1478
.Ltmp1483:
    000005cb: 	movq	0x30(%rsp), %rsi
    000005d0: 	leaq	DATAat0x13328(%rip), %rdx
    000005d7: 	movq	%r12, %rdi
    000005da: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1498
    000005df: 	callq	clock@PLT # Offset: 1503
    000005e4: 	movl	iterations(%rip), %edx
    000005ea: 	movq	%rax, start_time(%rip)
    000005f1: 	testl	%edx, %edx
    000005f3: 	jle	.Ltmp1484 # Offset: 1523
    000005f5: 	movsd	DATAat0x13610(%rip), %xmm6
    000005fd: 	pxor	%xmm5, %xmm5
    00000601: 	xorl	%r14d, %r14d
    00000604: 	movsd	%xmm5, (%rsp)
    00000609: 	movsd	%xmm6, 0x8(%rsp)
.Ltmp1487:
    0000060f: 	movq	%rbx, %rax
    00000612: 	pxor	%xmm0, %xmm0
    00000616: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1485:
    00000620: 	movsd	(%rax), %xmm1
    00000624: 	addq	$0x10, %rax
    00000628: 	addsd	%xmm1, %xmm0
    0000062c: 	movsd	-0x8(%rax), %xmm1
    00000631: 	addsd	%xmm1, %xmm0
    00000635: 	cmpq	%rax, %r12
    00000638: 	jne	.Ltmp1485 # Offset: 1592
    0000063a: 	movsd	0x8(%rsp), %xmm1
    00000640: 	mulsd	init_value(%rip), %xmm1
    00000648: 	ucomisd	%xmm1, %xmm0
    0000064c: 	jp	.Ltmp1486 # Offset: 1612
    00000652: 	jne	.Ltmp1486 # Offset: 1618
.Ltmp1560:
    00000658: 	addl	$0x1, %r14d
    0000065c: 	cmpl	%edx, %r14d
    0000065f: 	jl	.Ltmp1487 # Offset: 1631
.Ltmp1484:
    00000661: 	callq	clock@PLT # Offset: 1633
    00000666: 	pxor	%xmm0, %xmm0
    0000066a: 	movq	%r12, %rdi
    0000066d: 	movq	%rax, end_time(%rip)
    00000674: 	subq	start_time(%rip), %rax
    0000067b: 	cvtsi2sd	%rax, %xmm0
    00000680: 	divsd	DATAat0x13600(%rip), %xmm0
    00000688: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1672
    0000068d: 	movq	0xbcf0(%rsp), %rdi
    00000695: 	cmpq	%r13, %rdi
    00000698: 	je	.Ltmp1488 # Offset: 1688
    0000069a: 	movq	0xbd00(%rsp), %rax
    000006a2: 	leaq	0x1(%rax), %rsi
    000006a6: 	callq	_ZdlPvm@PLT # Offset: 1702
.Ltmp1488:
    000006ab: 	movq	0x30(%rsp), %rsi
    000006b0: 	leaq	DATAat0x13358(%rip), %rdx
    000006b7: 	movq	%r12, %rdi
    000006ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1722
    000006bf: 	callq	clock@PLT # Offset: 1727
    000006c4: 	movl	iterations(%rip), %edx
    000006ca: 	movq	%rax, start_time(%rip)
    000006d1: 	testl	%edx, %edx
    000006d3: 	jle	.Ltmp1489 # Offset: 1747
    000006d5: 	movsd	DATAat0x13610(%rip), %xmm4
    000006dd: 	pxor	%xmm7, %xmm7
    000006e1: 	xorl	%r14d, %r14d
    000006e4: 	movsd	%xmm7, (%rsp)
    000006e9: 	movsd	%xmm4, 0x8(%rsp)
.Ltmp1492:
    000006ef: 	movq	%rbx, %rax
    000006f2: 	pxor	%xmm0, %xmm0
    000006f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1490:
    00000700: 	movsd	(%rax), %xmm1
    00000704: 	addq	$0x10, %rax
    00000708: 	addsd	%xmm1, %xmm0
    0000070c: 	movsd	-0x8(%rax), %xmm1
    00000711: 	addsd	%xmm1, %xmm0
    00000715: 	cmpq	%rax, %r12
    00000718: 	jne	.Ltmp1490 # Offset: 1816
    0000071a: 	movsd	0x8(%rsp), %xmm1
    00000720: 	mulsd	init_value(%rip), %xmm1
    00000728: 	ucomisd	%xmm1, %xmm0
    0000072c: 	jp	.Ltmp1491 # Offset: 1836
    00000732: 	jne	.Ltmp1491 # Offset: 1842
.Ltmp1559:
    00000738: 	addl	$0x1, %r14d
    0000073c: 	cmpl	%edx, %r14d
    0000073f: 	jl	.Ltmp1492 # Offset: 1855
.Ltmp1489:
    00000741: 	callq	clock@PLT # Offset: 1857
    00000746: 	pxor	%xmm0, %xmm0
    0000074a: 	movq	%r12, %rdi
    0000074d: 	movq	%rax, end_time(%rip)
    00000754: 	subq	start_time(%rip), %rax
    0000075b: 	cvtsi2sd	%rax, %xmm0
    00000760: 	divsd	DATAat0x13600(%rip), %xmm0
    00000768: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1896
    0000076d: 	movq	0xbcf0(%rsp), %rdi
    00000775: 	cmpq	%r13, %rdi
    00000778: 	je	.Ltmp1493 # Offset: 1912
    0000077a: 	movq	0xbd00(%rsp), %rax
    00000782: 	leaq	0x1(%rax), %rsi
    00000786: 	callq	_ZdlPvm@PLT # Offset: 1926
.Ltmp1493:
    0000078b: 	movq	0x30(%rsp), %rsi
    00000790: 	leaq	0xf0(%rsp), %rdi
    00000798: 	leaq	DATAat0x1321b(%rip), %rdx
    0000079f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1951
    000007a4: 	movl	iterations(%rip), %edx
    000007aa: 	movl	$0x1, %r8d
    000007b0: 	movl	$0x1, %ecx
    000007b5: 	movq	0xf0(%rsp), %rdi
    000007bd: 	movl	$0x7d0, %esi
    000007c2: 	callq	_Z9summarizePKciiii # Offset: 1986
    000007c7: 	movslq	iterations(%rip), %rax
    000007ce: 	movabsq	$0x5851f42d4c957f2d, %rdi
    000007d8: 	movabsq	$0x14057b7ef767814f, %rsi
    000007e2: 	movq	%rax, %rdx
    000007e5: 	imulq	$0x10624dd3, %rax, %rax
    000007ec: 	sarl	$0x1f, %edx
    000007ef: 	sarq	$0x27, %rax
    000007f3: 	subl	%edx, %eax
    000007f5: 	movq	%r15, %rdx
    000007f8: 	movl	%eax, iterations(%rip)
.Ltmp1494:
    000007fe: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000805: 	pxor	%xmm0, %xmm0
    00000809: 	addq	$0x8, %rdx
    0000080d: 	imulq	%rdi, %rax
    00000811: 	addq	%rsi, %rax
    00000814: 	movq	%rax, %rcx
    00000817: 	movq	%rax, %r8
    0000081a: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000821: 	shrq	$0x14, %rcx
    00000825: 	shlq	$0x17, %r8
    00000829: 	xorq	%r8, %rcx
    0000082c: 	xorq	%rcx, %rax
    0000082f: 	sarq	$0x3, %rax
    00000833: 	cvtsi2sd	%rax, %xmm0
    00000838: 	movsd	%xmm0, -0x8(%rdx)
    0000083d: 	cmpq	%rbx, %rdx
    00000840: 	jne	.Ltmp1494 # Offset: 2112
    00000842: 	movl	$0x3e80, %edx
    00000847: 	movq	%r15, %rsi
    0000084a: 	movq	%r12, %rdi
    0000084d: 	callq	memcpy@PLT # Offset: 2125
    00000852: 	leaq	0x150(%rsp), %r14
    0000085a: 	movq	0x30(%rsp), %rsi
    0000085f: 	leaq	DATAat0x13388(%rip), %rdx
    00000866: 	movq	%r14, %rdi
    00000869: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2153
    0000086e: 	callq	clock@PLT # Offset: 2158
    00000873: 	leaq	0x178(%rsp), %rsi
    0000087b: 	xorl	%r13d, %r13d
    0000087e: 	movq	%rax, start_time(%rip)
    00000885: 	movl	iterations(%rip), %eax
    0000088b: 	movq	%rsi, 0x8(%rsp)
    00000890: 	movl	%eax, (%rsp)
    00000893: 	testl	%eax, %eax
    00000895: 	jle	.Ltmp1495 # Offset: 2197
.Ltmp1501:
    0000089b: 	movl	$0x3e80, %edx
    000008a0: 	movq	%r15, %rsi
    000008a3: 	movq	%rbp, %rdi
    000008a6: 	callq	memcpy@PLT # Offset: 2214
    000008ab: 	movq	0x8(%rsp), %rcx
.Ltmp1498:
    000008b0: 	movsd	(%rcx), %xmm1
    000008b4: 	movq	%rcx, %rax
    000008b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1497:
    000008c0: 	movq	%rax, %rdx
    000008c3: 	leaq	-0x8(%rax), %rax
    000008c7: 	movsd	-0x8(%rdx), %xmm0
    000008cc: 	comisd	%xmm1, %xmm0
    000008d0: 	jbe	.Ltmp1496 # Offset: 2256
    000008d2: 	movsd	%xmm0, 0x8(%rax)
    000008d7: 	cmpq	%rbp, %rax
    000008da: 	jne	.Ltmp1497 # Offset: 2266
    000008dc: 	movq	%rbp, %rdx
.Ltmp1496:
    000008df: 	addq	$0x8, %rcx
    000008e3: 	movsd	%xmm1, (%rdx)
    000008e7: 	cmpq	%r15, %rcx
    000008ea: 	jne	.Ltmp1498 # Offset: 2282
    000008ec: 	movsd	0x170(%rsp), %xmm0
    000008f5: 	movq	0x8(%rsp), %rax
    000008fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1500:
    00000900: 	addq	$0x8, %rax
    00000904: 	movapd	%xmm0, %xmm1
    00000908: 	movsd	-0x8(%rax), %xmm0
    0000090d: 	comisd	%xmm0, %xmm1
    00000911: 	ja	.Ltmp1499 # Offset: 2321
    00000917: 	cmpq	%r15, %rax
    0000091a: 	jne	.Ltmp1500 # Offset: 2330
    0000091c: 	addl	$0x1, %r13d
    00000920: 	cmpl	(%rsp), %r13d
    00000924: 	jl	.Ltmp1501 # Offset: 2340
.Ltmp1495:
    0000092a: 	callq	clock@PLT # Offset: 2346
    0000092f: 	pxor	%xmm0, %xmm0
    00000933: 	movq	%r14, %rdi
    00000936: 	movq	%rax, end_time(%rip)
    0000093d: 	subq	start_time(%rip), %rax
    00000944: 	cvtsi2sd	%rax, %xmm0
    00000949: 	divsd	DATAat0x13600(%rip), %xmm0
    00000951: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2385
    00000956: 	movq	0x150(%rsp), %rdi
    0000095e: 	leaq	0x160(%rsp), %rax
    00000966: 	movq	%rax, (%rsp)
    0000096a: 	cmpq	%rax, %rdi
    0000096d: 	je	.Ltmp1502 # Offset: 2413
    0000096f: 	movq	0x160(%rsp), %rax
    00000977: 	leaq	0x1(%rax), %rsi
    0000097b: 	callq	_ZdlPvm@PLT # Offset: 2427
.Ltmp1502:
    00000980: 	movq	0x30(%rsp), %rsi
    00000985: 	leaq	DATAat0x133a8(%rip), %rdx
    0000098c: 	movq	%r14, %rdi
    0000098f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2447
    00000994: 	callq	clock@PLT # Offset: 2452
    00000999: 	leaq	0x7e78(%rsp), %rsi
    000009a1: 	xorl	%r13d, %r13d
    000009a4: 	movq	%rax, start_time(%rip)
    000009ab: 	movl	iterations(%rip), %eax
    000009b1: 	movq	%rsi, 0x8(%rsp)
    000009b6: 	movl	%eax, 0x10(%rsp)
    000009ba: 	testl	%eax, %eax
    000009bc: 	jle	.Ltmp1503 # Offset: 2492
.Ltmp1509:
    000009c2: 	movl	$0x3e80, %edx
    000009c7: 	movq	%r12, %rsi
    000009ca: 	movq	%rbx, %rdi
    000009cd: 	callq	memcpy@PLT # Offset: 2509
    000009d2: 	movq	0x8(%rsp), %rcx
    000009d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1506:
    000009e0: 	movsd	(%rcx), %xmm1
    000009e4: 	movq	%rcx, %rax
    000009e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1505:
    000009f0: 	movq	%rax, %rdx
    000009f3: 	leaq	-0x8(%rax), %rax
    000009f7: 	movsd	-0x8(%rdx), %xmm0
    000009fc: 	comisd	%xmm1, %xmm0
    00000a00: 	jbe	.Ltmp1504 # Offset: 2560
    00000a02: 	movsd	%xmm0, 0x8(%rax)
    00000a07: 	cmpq	%rbx, %rax
    00000a0a: 	jne	.Ltmp1505 # Offset: 2570
    00000a0c: 	movq	%rbx, %rdx
.Ltmp1504:
    00000a0f: 	addq	$0x8, %rcx
    00000a13: 	movsd	%xmm1, (%rdx)
    00000a17: 	cmpq	%r12, %rcx
    00000a1a: 	jne	.Ltmp1506 # Offset: 2586
    00000a1c: 	movsd	0x7e70(%rsp), %xmm0
    00000a25: 	movq	0x8(%rsp), %rax
    00000a2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1508:
    00000a30: 	addq	$0x8, %rax
    00000a34: 	movapd	%xmm0, %xmm1
    00000a38: 	movsd	-0x8(%rax), %xmm0
    00000a3d: 	comisd	%xmm0, %xmm1
    00000a41: 	ja	.Ltmp1507 # Offset: 2625
    00000a47: 	cmpq	%r12, %rax
    00000a4a: 	jne	.Ltmp1508 # Offset: 2634
    00000a4c: 	addl	$0x1, %r13d
    00000a50: 	cmpl	0x10(%rsp), %r13d
    00000a55: 	jl	.Ltmp1509 # Offset: 2645
.Ltmp1503:
    00000a5b: 	callq	clock@PLT # Offset: 2651
    00000a60: 	pxor	%xmm0, %xmm0
    00000a64: 	movq	%r14, %rdi
    00000a67: 	movq	%rax, end_time(%rip)
    00000a6e: 	subq	start_time(%rip), %rax
    00000a75: 	cvtsi2sd	%rax, %xmm0
    00000a7a: 	divsd	DATAat0x13600(%rip), %xmm0
    00000a82: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2690
    00000a87: 	movq	0x150(%rsp), %rdi
    00000a8f: 	cmpq	(%rsp), %rdi
    00000a93: 	je	.Ltmp1510 # Offset: 2707
    00000a95: 	movq	0x160(%rsp), %rax
    00000a9d: 	leaq	0x1(%rax), %rsi
    00000aa1: 	callq	_ZdlPvm@PLT # Offset: 2721
.Ltmp1510:
    00000aa6: 	movq	0x30(%rsp), %rsi
    00000aab: 	leaq	DATAat0x133c8(%rip), %rdx
    00000ab2: 	movq	%r14, %rdi
    00000ab5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2741
    00000aba: 	leaq	0xa0(%rsp), %rax
    00000ac2: 	leaq	0xc0(%rsp), %rcx
    00000aca: 	movq	%r14, %r8
    00000acd: 	movq	%r15, 0xc8(%rsp)
    00000ad5: 	leaq	0xb0(%rsp), %rdx
    00000add: 	movq	%rax, %rsi
    00000ae0: 	leaq	0x90(%rsp), %rdi
    00000ae8: 	movq	%rbp, 0xb8(%rsp)
    00000af0: 	movq	%rbx, 0xa8(%rsp)
    00000af8: 	movq	%r15, 0x98(%rsp)
    00000b00: 	movq	%rcx, 0x10(%rsp)
    00000b05: 	movq	%rdx, 0x48(%rsp)
    00000b0a: 	movq	%rax, 0x40(%rsp)
    00000b0f: 	movq	%rdi, 0x38(%rsp)
    00000b14: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 2836
    00000b19: 	movq	0x150(%rsp), %rdi
    00000b21: 	cmpq	(%rsp), %rdi
    00000b25: 	je	.Ltmp1511 # Offset: 2853
    00000b27: 	movq	0x160(%rsp), %rax
    00000b2f: 	leaq	0x1(%rax), %rsi
    00000b33: 	callq	_ZdlPvm@PLT # Offset: 2867
.Ltmp1511:
    00000b38: 	movq	0x30(%rsp), %rsi
    00000b3d: 	leaq	DATAat0x133f0(%rip), %rdx
    00000b44: 	movq	%r14, %rdi
    00000b47: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2887
    00000b4c: 	movq	0x10(%rsp), %rcx
    00000b51: 	movq	0x48(%rsp), %rdx
    00000b56: 	movq	%r14, %r8
    00000b59: 	leaq	0xfb70(%rsp), %rax
    00000b61: 	movq	0x40(%rsp), %rsi
    00000b66: 	movq	0x38(%rsp), %rdi
    00000b6b: 	movq	%r12, 0xc8(%rsp)
    00000b73: 	movq	%rbx, 0xb8(%rsp)
    00000b7b: 	movq	%rax, 0x58(%rsp)
    00000b80: 	movq	%rax, 0xa8(%rsp)
    00000b88: 	movq	%r12, 0x98(%rsp)
    00000b90: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 2960
    00000b95: 	movq	0x150(%rsp), %rdi
    00000b9d: 	cmpq	(%rsp), %rdi
    00000ba1: 	je	.Ltmp1512 # Offset: 2977
    00000ba3: 	movq	0x160(%rsp), %rax
    00000bab: 	leaq	0x1(%rax), %rsi
    00000baf: 	callq	_ZdlPvm@PLT # Offset: 2991
.Ltmp1512:
    00000bb4: 	movq	0x30(%rsp), %rsi
    00000bb9: 	leaq	DATAat0x13420(%rip), %rdx
    00000bc0: 	movq	%r14, %rdi
    00000bc3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3011
    00000bc8: 	movq	0x58(%rsp), %rax
    00000bcd: 	movq	0x10(%rsp), %rcx
    00000bd2: 	movq	%r14, %r8
    00000bd5: 	movq	%r12, 0xc8(%rsp)
    00000bdd: 	movq	0x48(%rsp), %rdx
    00000be2: 	movq	0x40(%rsp), %rsi
    00000be7: 	movq	%rbx, 0xb8(%rsp)
    00000bef: 	movq	0x38(%rsp), %rdi
    00000bf4: 	movq	%rax, 0xa8(%rsp)
    00000bfc: 	movq	%r12, 0x98(%rsp)
    00000c04: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3076
    00000c09: 	movq	0x150(%rsp), %rdi
    00000c11: 	cmpq	(%rsp), %rdi
    00000c15: 	je	.Ltmp1513 # Offset: 3093
    00000c17: 	movq	0x160(%rsp), %rax
    00000c1f: 	leaq	0x1(%rax), %rsi
    00000c23: 	callq	_ZdlPvm@PLT # Offset: 3107
.Ltmp1513:
    00000c28: 	movq	0x30(%rsp), %rsi
    00000c2d: 	leaq	DATAat0x13450(%rip), %rdx
    00000c34: 	movq	%r14, %rdi
    00000c37: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3127
    00000c3c: 	callq	clock@PLT # Offset: 3132
    00000c41: 	leaq	0x7e78(%rsp), %rsi
    00000c49: 	xorl	%r13d, %r13d
    00000c4c: 	movq	%rax, start_time(%rip)
    00000c53: 	movl	iterations(%rip), %eax
    00000c59: 	movq	%rsi, 0x8(%rsp)
    00000c5e: 	movl	%eax, 0x20(%rsp)
    00000c62: 	testl	%eax, %eax
    00000c64: 	jle	.Ltmp1514 # Offset: 3172
.Ltmp1522:
    00000c6a: 	movl	$0x3e80, %edx
    00000c6f: 	movq	%r12, %rsi
    00000c72: 	movq	%rbx, %rdi
    00000c75: 	callq	memcpy@PLT # Offset: 3189
    00000c7a: 	movq	0x8(%rsp), %rdx
    00000c7f: 	movq	%rdx, %rcx
    00000c82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1519:
    00000c88: 	movsd	(%rdx), %xmm1
    00000c8c: 	cmpq	%rbx, %rdx
    00000c8f: 	je	.Ltmp1515 # Offset: 3215
    00000c95: 	movq	%rdx, %rax
    00000c98: 	jmp	.Ltmp1516 # Offset: 3224
    00000c9a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1518:
    00000ca0: 	movsd	%xmm0, (%rax)
    00000ca4: 	subq	$0x8, %rax
    00000ca8: 	cmpq	%rax, %rbx
    00000cab: 	je	.Ltmp1517 # Offset: 3243
.Ltmp1516:
    00000cad: 	movsd	-0x8(%rax), %xmm0
    00000cb2: 	comisd	%xmm1, %xmm0
    00000cb6: 	ja	.Ltmp1518 # Offset: 3254
.Ltmp1517:
    00000cb8: 	addq	$0x8, %rdx
    00000cbc: 	movsd	%xmm1, (%rax)
    00000cc0: 	cmpq	%rdx, %r12
    00000cc3: 	jne	.Ltmp1519 # Offset: 3267
    00000cc5: 	movsd	0x7e70(%rsp), %xmm0
    00000cce: 	nop # Size: 2
.Ltmp1521:
    00000cd0: 	movapd	%xmm0, %xmm1
    00000cd4: 	movsd	(%rcx), %xmm0
    00000cd8: 	comisd	%xmm0, %xmm1
    00000cdc: 	ja	.Ltmp1520 # Offset: 3292
    00000ce2: 	addq	$0x8, %rcx
    00000ce6: 	cmpq	%rcx, %r12
    00000ce9: 	jne	.Ltmp1521 # Offset: 3305
    00000ceb: 	addl	$0x1, %r13d
    00000cef: 	cmpl	0x20(%rsp), %r13d
    00000cf4: 	jl	.Ltmp1522 # Offset: 3316
.Ltmp1514:
    00000cfa: 	callq	clock@PLT # Offset: 3322
    00000cff: 	pxor	%xmm0, %xmm0
    00000d03: 	movq	%r14, %rdi
    00000d06: 	movq	%rax, end_time(%rip)
    00000d0d: 	subq	start_time(%rip), %rax
    00000d14: 	cvtsi2sd	%rax, %xmm0
    00000d19: 	divsd	DATAat0x13600(%rip), %xmm0
    00000d21: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3361
    00000d26: 	movq	0x150(%rsp), %rdi
    00000d2e: 	cmpq	(%rsp), %rdi
    00000d32: 	je	.Ltmp1523 # Offset: 3378
    00000d34: 	movq	0x160(%rsp), %rax
    00000d3c: 	leaq	0x1(%rax), %rsi
    00000d40: 	callq	_ZdlPvm@PLT # Offset: 3392
.Ltmp1523:
    00000d45: 	movq	0x30(%rsp), %r13
    00000d4a: 	leaq	0x110(%rsp), %rdi
    00000d52: 	leaq	DATAat0x1322d(%rip), %rdx
    00000d59: 	movq	%r13, %rsi
    00000d5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3420
    00000d61: 	movl	iterations(%rip), %edx
    00000d67: 	movl	$0x1, %r8d
    00000d6d: 	movl	$0x1, %ecx
    00000d72: 	movq	0x110(%rsp), %rdi
    00000d7a: 	movl	$0x7d0, %esi
    00000d7f: 	callq	_Z9summarizePKciiii # Offset: 3455
    00000d84: 	leaq	DATAat0x13243(%rip), %rdx
    00000d8b: 	movq	%r13, %rsi
    00000d8e: 	movq	%r14, %rdi
    00000d91: 	shll	$0x3, iterations(%rip)
    00000d98: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3480
    00000d9d: 	callq	clock@PLT # Offset: 3485
    00000da2: 	movl	iterations(%rip), %edx
    00000da8: 	movl	$0x0, 0x20(%rsp)
    00000db0: 	movq	%rax, start_time(%rip)
    00000db7: 	leaq	0x178(%rsp), %rax
    00000dbf: 	movq	%rax, 0x8(%rsp)
    00000dc4: 	testl	%edx, %edx
    00000dc6: 	jle	.Ltmp1524 # Offset: 3526
.Ltmp1536:
    00000dcc: 	movq	%rbp, %rdi
    00000dcf: 	movl	$0x3e80, %edx
    00000dd4: 	movq	%r15, %rsi
    00000dd7: 	callq	memcpy@PLT # Offset: 3543
    00000ddc: 	movq	%rbp, %rdi
.Ltmp1533:
    00000ddf: 	movsd	(%rdi), %xmm1
    00000de3: 	movq	%rdi, %rax
    00000de6: 	movq	%r15, %r13
    00000de9: 	nopl	(%rax) # Size: 7
.Ltmp1529:
    00000df0: 	movsd	-0x8(%r13), %xmm2
    00000df6: 	leaq	-0x8(%r13), %rdx
    00000dfa: 	comisd	%xmm1, %xmm2
    00000dfe: 	ja	.Ltmp1525 # Offset: 3582
    00000e00: 	cmpq	%rax, %rdx
    00000e03: 	jbe	.Ltmp1526 # Offset: 3587
    00000e09: 	movsd	(%rax), %xmm0
    00000e0d: 	comisd	%xmm0, %xmm1
    00000e11: 	jbe	.Ltmp1527 # Offset: 3601
    00000e13: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1528:
    00000e18: 	movsd	0x8(%rax), %xmm0
    00000e1d: 	addq	$0x8, %rax
    00000e21: 	comisd	%xmm0, %xmm1
    00000e25: 	ja	.Ltmp1528 # Offset: 3621
    00000e27: 	cmpq	%rax, %rdx
    00000e2a: 	jbe	.Ltmp1526 # Offset: 3626
.Ltmp1527:
    00000e2c: 	movsd	%xmm0, (%rdx)
    00000e30: 	movsd	%xmm2, (%rax)
.Ltmp1525:
    00000e34: 	movq	%rdx, %r13
    00000e37: 	jmp	.Ltmp1529 # Offset: 3639
.Ltmp1530:
    00000e39: 	addq	$0x20, %rbp
.Ltmp1453:
    00000e3d: 	cmpq	%rbp, (%rsp)
    00000e41: 	je	.Ltmp1457 # Offset: 3649
.Ltmp1531:
    00000e47: 	movq	(%rbp), %rdi
    00000e4b: 	leaq	0x10(%rbp), %rax
    00000e4f: 	cmpq	%rax, %rdi
    00000e52: 	je	.Ltmp1530 # Offset: 3666
    00000e54: 	movq	0x10(%rbp), %rax
    00000e58: 	addq	$0x20, %rbp
    00000e5c: 	leaq	0x1(%rax), %rsi
    00000e60: 	callq	_ZdlPvm@PLT # Offset: 3680
    00000e65: 	cmpq	%rbp, (%rsp)
    00000e69: 	jne	.Ltmp1531 # Offset: 3689
    00000e6b: 	jmp	.Ltmp1457 # Offset: 3691
.Ltmp1449:
    00000e70: 	addq	$0x20, %r15
    00000e74: 	cmpq	%rbx, %r15
    00000e77: 	jne	.Ltmp1450 # Offset: 3703
    00000e7d: 	addq	$0x8, %r14
    00000e81: 	cmpq	%r14, 0x8(%rsp)
    00000e86: 	ja	.Ltmp1451 # Offset: 3718
    00000e8c: 	jmp	.Ltmp1448 # Offset: 3724
    00000e91: 	nopl	(%rax) # Size: 7
.Ltmp1526:
    00000e98: 	movq	%r13, %rsi
    00000e9b: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 3739
    00000ea0: 	movq	%r15, %rax
    00000ea3: 	subq	%r13, %rax
    00000ea6: 	cmpq	$0x8, %rax
    00000eaa: 	jle	.Ltmp1532 # Offset: 3754
    00000eac: 	movq	%r13, %rdi
    00000eaf: 	jmp	.Ltmp1533 # Offset: 3759
.Ltmp1532:
    00000eb4: 	movsd	0x170(%rsp), %xmm0
    00000ebd: 	movq	0x8(%rsp), %rax
    00000ec2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1535:
    00000ec8: 	addq	$0x8, %rax
    00000ecc: 	movapd	%xmm0, %xmm1
    00000ed0: 	movsd	-0x8(%rax), %xmm0
    00000ed5: 	comisd	%xmm0, %xmm1
    00000ed9: 	ja	.Ltmp1534 # Offset: 3801
    00000edf: 	cmpq	%r15, %rax
    00000ee2: 	jne	.Ltmp1535 # Offset: 3810
.Ltmp1557:
    00000ee4: 	addl	$0x1, 0x20(%rsp)
    00000ee9: 	movl	0x20(%rsp), %eax
    00000eed: 	cmpl	iterations(%rip), %eax
    00000ef3: 	jl	.Ltmp1536 # Offset: 3827
.Ltmp1524:
    00000ef9: 	callq	clock@PLT # Offset: 3833
    00000efe: 	pxor	%xmm0, %xmm0
    00000f02: 	movq	%r14, %rdi
    00000f05: 	movq	%rax, end_time(%rip)
    00000f0c: 	subq	start_time(%rip), %rax
    00000f13: 	cvtsi2sd	%rax, %xmm0
    00000f18: 	divsd	DATAat0x13600(%rip), %xmm0
    00000f20: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3872
    00000f25: 	movq	0x150(%rsp), %rdi
    00000f2d: 	cmpq	(%rsp), %rdi
    00000f31: 	je	.Ltmp1537 # Offset: 3889
    00000f33: 	movq	0x160(%rsp), %rax
    00000f3b: 	leaq	0x1(%rax), %rsi
    00000f3f: 	callq	_ZdlPvm@PLT # Offset: 3903
.Ltmp1537:
    00000f44: 	movq	0x30(%rsp), %rsi
    00000f49: 	leaq	DATAat0x1325e(%rip), %rdx
    00000f50: 	movq	%r14, %rdi
    00000f53: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3923
    00000f58: 	callq	clock@PLT # Offset: 3928
    00000f5d: 	movl	$0x0, 0x20(%rsp)
    00000f65: 	movq	%rax, start_time(%rip)
    00000f6c: 	leaq	0x7e78(%rsp), %rax
    00000f74: 	movq	%rax, 0x8(%rsp)
    00000f79: 	movl	iterations(%rip), %eax
    00000f7f: 	testl	%eax, %eax
    00000f81: 	jle	.Ltmp1538 # Offset: 3969
.Ltmp1548:
    00000f87: 	movq	%rbx, %rdi
    00000f8a: 	movl	$0x3e80, %edx
    00000f8f: 	movq	%r12, %rsi
    00000f92: 	callq	memcpy@PLT # Offset: 3986
    00000f97: 	movq	%rbx, %rdi
.Ltmp1545:
    00000f9a: 	movsd	(%rdi), %xmm1
    00000f9e: 	movq	%rdi, %rax
    00000fa1: 	movq	%r12, %r13
    00000fa4: 	nopl	(%rax) # Size: 4
.Ltmp1543:
    00000fa8: 	movsd	-0x8(%r13), %xmm2
    00000fae: 	leaq	-0x8(%r13), %rdx
    00000fb2: 	comisd	%xmm1, %xmm2
    00000fb6: 	ja	.Ltmp1539 # Offset: 4022
    00000fb8: 	cmpq	%rax, %rdx
    00000fbb: 	jbe	.Ltmp1540 # Offset: 4027
    00000fbd: 	movsd	(%rax), %xmm0
    00000fc1: 	comisd	%xmm0, %xmm1
    00000fc5: 	jbe	.Ltmp1541 # Offset: 4037
    00000fc7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1542:
    00000fd0: 	movsd	0x8(%rax), %xmm0
    00000fd5: 	addq	$0x8, %rax
    00000fd9: 	comisd	%xmm0, %xmm1
    00000fdd: 	ja	.Ltmp1542 # Offset: 4061
    00000fdf: 	cmpq	%rax, %rdx
    00000fe2: 	jbe	.Ltmp1540 # Offset: 4066
.Ltmp1541:
    00000fe4: 	movsd	%xmm0, (%rdx)
    00000fe8: 	movsd	%xmm2, (%rax)
.Ltmp1539:
    00000fec: 	movq	%rdx, %r13
    00000fef: 	jmp	.Ltmp1543 # Offset: 4079
    00000ff1: 	nopl	(%rax) # Size: 7
.Ltmp1540:
    00000ff8: 	movq	%r13, %rsi
    00000ffb: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 4091
    00001000: 	movq	%r12, %rax
    00001003: 	subq	%r13, %rax
    00001006: 	cmpq	$0x8, %rax
    0000100a: 	jle	.Ltmp1544 # Offset: 4106
    0000100c: 	movq	%r13, %rdi
    0000100f: 	jmp	.Ltmp1545 # Offset: 4111
.Ltmp1544:
    00001011: 	movsd	0x7e70(%rsp), %xmm0
    0000101a: 	movq	0x8(%rsp), %rax
    0000101f: 	nop # Size: 1
.Ltmp1547:
    00001020: 	addq	$0x8, %rax
    00001024: 	movapd	%xmm0, %xmm1
    00001028: 	movsd	-0x8(%rax), %xmm0
    0000102d: 	comisd	%xmm0, %xmm1
    00001031: 	ja	.Ltmp1546 # Offset: 4145
    00001037: 	cmpq	%r12, %rax
    0000103a: 	jne	.Ltmp1547 # Offset: 4154
.Ltmp1558:
    0000103c: 	addl	$0x1, 0x20(%rsp)
    00001041: 	movl	0x20(%rsp), %eax
    00001045: 	cmpl	iterations(%rip), %eax
    0000104b: 	jl	.Ltmp1548 # Offset: 4171
.Ltmp1538:
    00001051: 	callq	clock@PLT # Offset: 4177
    00001056: 	pxor	%xmm0, %xmm0
    0000105a: 	movq	%r14, %rdi
    0000105d: 	movq	%rax, end_time(%rip)
    00001064: 	subq	start_time(%rip), %rax
    0000106b: 	cvtsi2sd	%rax, %xmm0
    00001070: 	divsd	DATAat0x13600(%rip), %xmm0
    00001078: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4216
    0000107d: 	movq	0x150(%rsp), %rdi
    00001085: 	cmpq	(%rsp), %rdi
    00001089: 	je	.Ltmp1549 # Offset: 4233
    0000108b: 	movq	0x160(%rsp), %rax
    00001093: 	leaq	0x1(%rax), %rsi
    00001097: 	callq	_ZdlPvm@PLT # Offset: 4247
.Ltmp1549:
    0000109c: 	movq	0x30(%rsp), %rsi
    000010a1: 	leaq	DATAat0x13480(%rip), %rdx
    000010a8: 	movq	%r14, %rdi
    000010ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4267
    000010b0: 	movq	0x10(%rsp), %rcx
    000010b5: 	movq	0x48(%rsp), %rdx
    000010ba: 	movq	%r14, %r8
    000010bd: 	movq	%r15, 0xc8(%rsp)
    000010c5: 	movq	0x40(%rsp), %rsi
    000010ca: 	movq	0x38(%rsp), %rdi
    000010cf: 	movq	%rbp, 0xb8(%rsp)
    000010d7: 	movq	%rbx, 0xa8(%rsp)
    000010df: 	movq	%r15, 0x98(%rsp)
    000010e7: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 4327
    000010ec: 	movq	0x150(%rsp), %rdi
    000010f4: 	cmpq	(%rsp), %rdi
    000010f8: 	je	.Ltmp1550 # Offset: 4344
    000010fa: 	movq	0x160(%rsp), %rax
    00001102: 	leaq	0x1(%rax), %rsi
    00001106: 	callq	_ZdlPvm@PLT # Offset: 4358
.Ltmp1550:
    0000110b: 	movq	0x30(%rsp), %rsi
    00001110: 	leaq	DATAat0x134a8(%rip), %rdx
    00001117: 	movq	%r14, %rdi
    0000111a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4378
    0000111f: 	movq	0x58(%rsp), %rax
    00001124: 	movq	0x10(%rsp), %rcx
    00001129: 	movq	%r14, %r8
    0000112c: 	movq	%r12, 0xc8(%rsp)
    00001134: 	movq	0x48(%rsp), %rdx
    00001139: 	movq	0x40(%rsp), %rsi
    0000113e: 	movq	%rbx, 0xb8(%rsp)
    00001146: 	movq	0x38(%rsp), %rdi
    0000114b: 	movq	%rax, 0xa8(%rsp)
    00001153: 	movq	%r12, 0x98(%rsp)
    0000115b: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 4443
    00001160: 	movq	0x150(%rsp), %rdi
    00001168: 	cmpq	(%rsp), %rdi
    0000116c: 	je	.Ltmp1551 # Offset: 4460
    0000116e: 	movq	0x160(%rsp), %rax
    00001176: 	leaq	0x1(%rax), %rsi
    0000117a: 	callq	_ZdlPvm@PLT # Offset: 4474
.Ltmp1551:
    0000117f: 	movq	(%rsp), %rax
    00001183: 	movq	0xd8(%rsp), %r13
    0000118b: 	movq	%rax, 0x150(%rsp)
    00001193: 	movq	0xd0(%rsp), %rax
    0000119b: 	movq	%rax, 0x8(%rsp)
    000011a0: 	movq	%rax, %rsi
    000011a3: 	addq	%r13, %rax
    000011a6: 	je	.Ltmp1552 # Offset: 4518
    000011a8: 	testq	%rsi, %rsi
    000011ab: 	je	.Ltmp1553 # Offset: 4523
.Ltmp1552:
    000011b1: 	movq	%r13, 0xc0(%rsp)
    000011b9: 	cmpq	$0xf, %r13
    000011bd: 	ja	.Ltmp1554 # Offset: 4541
    000011c3: 	cmpq	$0x1, %r13
    000011c7: 	jne	.Ltmp1555 # Offset: 4551
    000011cd: 	movq	0x8(%rsp), %rax
    000011d2: 	movzbl	(%rax), %eax
    000011d5: 	movb	%al, 0x160(%rsp)
    000011dc: 	movq	(%rsp), %rax
    000011e0: 	jmp	.Ltmp1556 # Offset: 4576
.Ltmp1515:
    000011e5: 	movsd	%xmm1, 0x7e70(%rsp)
    000011ee: 	leaq	0x8(%rbx), %rdx
    000011f2: 	jmp	.Ltmp1519 # Offset: 4594
.Ltmp1520:
    000011f7: 	movq	0x150(%rsp), %rdx
    000011ff: 	leaq	DATAat0x131ba(%rip), %rsi
    00001206: 	movl	$0x1, %edi
    0000120b: 	xorl	%eax, %eax
    0000120d: 	callq	__printf_chk@PLT # Offset: 4621
    00001212: 	movl	iterations(%rip), %eax
    00001218: 	addl	$0x1, %r13d
    0000121c: 	movl	%eax, 0x20(%rsp)
    00001220: 	cmpl	0x20(%rsp), %r13d
    00001225: 	jl	.Ltmp1522 # Offset: 4645
    0000122b: 	jmp	.Ltmp1514 # Offset: 4651
.Ltmp1534:
    00001230: 	movq	0x150(%rsp), %rdx
    00001238: 	leaq	DATAat0x131ba(%rip), %rsi
    0000123f: 	movl	$0x1, %edi
    00001244: 	xorl	%eax, %eax
    00001246: 	callq	__printf_chk@PLT # Offset: 4678
    0000124b: 	jmp	.Ltmp1557 # Offset: 4683
.Ltmp1546:
    00001250: 	movq	0x150(%rsp), %rdx
    00001258: 	leaq	DATAat0x131ba(%rip), %rsi
    0000125f: 	movl	$0x1, %edi
    00001264: 	xorl	%eax, %eax
    00001266: 	callq	__printf_chk@PLT # Offset: 4710
    0000126b: 	jmp	.Ltmp1558 # Offset: 4715
.Ltmp1507:
    00001270: 	movq	0x150(%rsp), %rdx
    00001278: 	leaq	DATAat0x131ba(%rip), %rsi
    0000127f: 	movl	$0x1, %edi
    00001284: 	xorl	%eax, %eax
    00001286: 	callq	__printf_chk@PLT # Offset: 4742
    0000128b: 	movl	iterations(%rip), %eax
    00001291: 	addl	$0x1, %r13d
    00001295: 	movl	%eax, 0x10(%rsp)
    00001299: 	cmpl	0x10(%rsp), %r13d
    0000129e: 	jl	.Ltmp1509 # Offset: 4766
    000012a4: 	jmp	.Ltmp1503 # Offset: 4772
.Ltmp1499:
    000012a9: 	movq	0x150(%rsp), %rdx
    000012b1: 	leaq	DATAat0x131ba(%rip), %rsi
    000012b8: 	movl	$0x1, %edi
    000012bd: 	xorl	%eax, %eax
    000012bf: 	callq	__printf_chk@PLT # Offset: 4799
    000012c4: 	movl	iterations(%rip), %eax
    000012ca: 	addl	$0x1, %r13d
    000012ce: 	movl	%eax, (%rsp)
    000012d1: 	cmpl	(%rsp), %r13d
    000012d5: 	jl	.Ltmp1501 # Offset: 4821
    000012db: 	jmp	.Ltmp1495 # Offset: 4827
.Ltmp1491:
    000012e0: 	movq	0xbcf0(%rsp), %rdx
    000012e8: 	leaq	DATAat0x131bf(%rip), %rsi
    000012ef: 	movl	$0x1, %edi
    000012f4: 	xorl	%eax, %eax
    000012f6: 	callq	__printf_chk@PLT # Offset: 4854
    000012fb: 	movl	iterations(%rip), %edx
    00001301: 	jmp	.Ltmp1559 # Offset: 4865
.Ltmp1486:
    00001306: 	movq	0xbcf0(%rsp), %rdx
    0000130e: 	leaq	DATAat0x131bf(%rip), %rsi
    00001315: 	movl	$0x1, %edi
    0000131a: 	xorl	%eax, %eax
    0000131c: 	callq	__printf_chk@PLT # Offset: 4892
    00001321: 	movl	iterations(%rip), %edx
    00001327: 	jmp	.Ltmp1560 # Offset: 4903
.Ltmp1481:
    0000132c: 	movq	0xbcf0(%rsp), %rdx
    00001334: 	leaq	DATAat0x131bf(%rip), %rsi
    0000133b: 	movl	$0x1, %edi
    00001340: 	xorl	%eax, %eax
    00001342: 	callq	__printf_chk@PLT # Offset: 4930
    00001347: 	movl	iterations(%rip), %edx
    0000134d: 	jmp	.Ltmp1561 # Offset: 4941
.Ltmp1466:
    00001352: 	movq	0xbcf0(%rsp), %rdx
    0000135a: 	movq	%r14, %rsi
    0000135d: 	movl	$0x1, %edi
    00001362: 	xorl	%eax, %eax
    00001364: 	callq	__printf_chk@PLT # Offset: 4964
    00001369: 	movl	iterations(%rip), %edx
    0000136f: 	jmp	.Ltmp1562 # Offset: 4975
.Ltmp1476:
    00001374: 	movq	0xbcf0(%rsp), %rdx
    0000137c: 	leaq	DATAat0x131bf(%rip), %rsi
    00001383: 	movl	$0x1, %edi
    00001388: 	xorl	%eax, %eax
    0000138a: 	callq	__printf_chk@PLT # Offset: 5002
    0000138f: 	movl	iterations(%rip), %edx
    00001395: 	jmp	.Ltmp1563 # Offset: 5013
.Ltmp1471:
    0000139a: 	movq	0xbcf0(%rsp), %rdx
    000013a2: 	leaq	DATAat0x131bf(%rip), %rsi
    000013a9: 	movl	$0x1, %edi
    000013ae: 	xorl	%eax, %eax
    000013b0: 	callq	__printf_chk@PLT # Offset: 5040
    000013b5: 	movl	iterations(%rip), %edx
    000013bb: 	jmp	.Ltmp1564 # Offset: 5051
.Ltmp1555:
    000013c0: 	testq	%r13, %r13
    000013c3: 	jne	.Ltmp1565 # Offset: 5059
    000013c9: 	movq	(%rsp), %rax
.Ltmp1556:
    000013cd: 	movq	%r13, 0x158(%rsp)
    000013d5: 	movb	$0x0, (%rax,%r13)
    000013da: 	movabsq	$0x3fffffffffffffff, %rax
    000013e4: 	subq	0x158(%rsp), %rax
    000013ec: 	cmpq	$0x28, %rax
    000013f0: 	jbe	.Ltmp1566 # Offset: 5104
    000013f6: 	movl	$0x29, %edx
    000013fb: 	leaq	DATAat0x134d8(%rip), %rsi
    00001402: 	movq	%r14, %rdi
    00001405: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5125
    0000140a: 	movq	0x58(%rsp), %rax
    0000140f: 	movq	0x10(%rsp), %rcx
    00001414: 	movq	%r14, %r8
    00001417: 	movq	%r12, 0xc8(%rsp)
    0000141f: 	movq	0x48(%rsp), %rdx
    00001424: 	movq	0x40(%rsp), %rsi
    00001429: 	movq	%rbx, 0xb8(%rsp)
    00001431: 	movq	0x38(%rsp), %rdi
    00001436: 	movq	%rax, 0xa8(%rsp)
    0000143e: 	movq	%r12, 0x98(%rsp)
    00001446: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 5190
    0000144b: 	movq	0x150(%rsp), %rdi
    00001453: 	cmpq	(%rsp), %rdi
    00001457: 	je	.Ltmp1567 # Offset: 5207
    00001459: 	movq	0x160(%rsp), %rax
    00001461: 	leaq	0x1(%rax), %rsi
    00001465: 	callq	_ZdlPvm@PLT # Offset: 5221
.Ltmp1567:
    0000146a: 	movq	(%rsp), %rax
    0000146e: 	movq	0xd8(%rsp), %r13
    00001476: 	movq	%rax, 0x150(%rsp)
    0000147e: 	movq	0xd0(%rsp), %rax
    00001486: 	movq	%rax, 0x8(%rsp)
    0000148b: 	movq	%rax, %rsi
    0000148e: 	addq	%r13, %rax
    00001491: 	je	.Ltmp1568 # Offset: 5265
    00001493: 	testq	%rsi, %rsi
    00001496: 	je	.Ltmp1569 # Offset: 5270
.Ltmp1568:
    0000149c: 	movq	%r13, 0xc0(%rsp)
    000014a4: 	cmpq	$0xf, %r13
    000014a8: 	ja	.Ltmp1570 # Offset: 5288
    000014ae: 	cmpq	$0x1, %r13
    000014b2: 	jne	.Ltmp1571 # Offset: 5298
    000014b8: 	movq	0x8(%rsp), %rax
    000014bd: 	movzbl	(%rax), %eax
    000014c0: 	movb	%al, 0x160(%rsp)
    000014c7: 	movq	(%rsp), %rax
.Ltmp1659:
    000014cb: 	movq	%r13, 0x158(%rsp)
    000014d3: 	movb	$0x0, (%rax,%r13)
    000014d8: 	movabsq	$0x3fffffffffffffff, %rax
    000014e2: 	subq	0x158(%rsp), %rax
    000014ea: 	cmpq	$0x29, %rax
    000014ee: 	jbe	.Ltmp1572 # Offset: 5358
    000014f4: 	movl	$0x2a, %edx
    000014f9: 	leaq	DATAat0x13508(%rip), %rsi
    00001500: 	movq	%r14, %rdi
    00001503: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5379
    00001508: 	callq	clock@PLT # Offset: 5384
    0000150d: 	leaq	0x7e78(%rsp), %rsi
    00001515: 	movl	$0x0, 0x20(%rsp)
    0000151d: 	leaq	0xbcf0(%rsp), %r13
    00001525: 	movq	%rax, start_time(%rip)
    0000152c: 	movl	iterations(%rip), %eax
    00001532: 	movq	%rsi, 0x8(%rsp)
    00001537: 	movl	%eax, 0x68(%rsp)
    0000153b: 	testl	%eax, %eax
    0000153d: 	jle	.Ltmp1573 # Offset: 5437
.Ltmp1593:
    00001543: 	movl	$0x3e80, %edx
    00001548: 	movq	%r12, %rsi
    0000154b: 	movq	%rbx, %rdi
    0000154e: 	movq	%r13, %r12
    00001551: 	callq	memcpy@PLT # Offset: 5457
    00001556: 	movq	%r13, %r8
    00001559: 	movq	%rbx, %rdx
    0000155c: 	movsd	0x7e70(%rsp), %xmm1
    00001565: 	nopl	(%rax) # Size: 3
.Ltmp1578:
    00001568: 	movsd	-0x8(%r8), %xmm2
    0000156e: 	leaq	-0x8(%r8), %rcx
    00001572: 	comisd	%xmm1, %xmm2
    00001576: 	ja	.Ltmp1574 # Offset: 5494
    00001578: 	cmpq	%rdx, %rcx
    0000157b: 	jbe	.Ltmp1575 # Offset: 5499
    0000157d: 	movsd	(%rdx), %xmm0
    00001581: 	leaq	0x8(%rdx), %rax
    00001585: 	comisd	%xmm0, %xmm1
    00001589: 	jbe	.Ltmp1576 # Offset: 5513
    0000158b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1577:
    00001590: 	movq	%rax, %rdx
    00001593: 	movsd	(%rax), %xmm0
    00001597: 	leaq	0x8(%rax), %rax
    0000159b: 	comisd	%xmm0, %xmm1
    0000159f: 	ja	.Ltmp1577 # Offset: 5535
    000015a1: 	cmpq	%rdx, %rcx
    000015a4: 	jbe	.Ltmp1575 # Offset: 5540
.Ltmp1576:
    000015a6: 	movsd	%xmm0, (%rcx)
    000015aa: 	movsd	%xmm2, (%rdx)
.Ltmp1574:
    000015ae: 	movq	%rcx, %r8
    000015b1: 	jmp	.Ltmp1578 # Offset: 5553
.Ltmp1575:
    000015b3: 	movq	%r8, %rax
    000015b6: 	subq	%rbx, %rax
    000015b9: 	cmpq	$0x8, %rax
    000015bd: 	jle	.Ltmp1579 # Offset: 5565
    000015c3: 	movsd	0x7e70(%rsp), %xmm1
    000015cc: 	movq	%r8, %rcx
    000015cf: 	movq	%rbx, %rdx
    000015d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1584:
    000015d8: 	comisd	%xmm1, %xmm2
    000015dc: 	leaq	-0x8(%rcx), %rsi
    000015e0: 	ja	.Ltmp1580 # Offset: 5600
    000015e2: 	cmpq	%rdx, %rsi
    000015e5: 	jbe	.Ltmp1581 # Offset: 5605
    000015eb: 	movsd	(%rdx), %xmm0
    000015ef: 	leaq	0x8(%rdx), %rax
    000015f3: 	comisd	%xmm0, %xmm1
    000015f7: 	jbe	.Ltmp1582 # Offset: 5623
    000015f9: 	nopl	(%rax) # Size: 7
.Ltmp1583:
    00001600: 	movq	%rax, %rdx
    00001603: 	movsd	(%rax), %xmm0
    00001607: 	leaq	0x8(%rax), %rax
    0000160b: 	comisd	%xmm0, %xmm1
    0000160f: 	ja	.Ltmp1583 # Offset: 5647
    00001611: 	cmpq	%rdx, %rsi
    00001614: 	jbe	.Ltmp1581 # Offset: 5652
.Ltmp1582:
    0000161a: 	movsd	%xmm0, (%rsi)
    0000161e: 	movsd	%xmm2, (%rdx)
.Ltmp1580:
    00001622: 	movsd	-0x8(%rsi), %xmm2
    00001627: 	movq	%rsi, %rcx
    0000162a: 	jmp	.Ltmp1584 # Offset: 5674
.Ltmp1648:
    0000162c: 	movq	%r9, %rsi
    0000162f: 	movq	%r8, 0x70(%rsp)
    00001634: 	movq	%r9, 0x78(%rsp)
    00001639: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 5689
    0000163e: 	movq	0x70(%rsp), %rsi
    00001643: 	movq	0x78(%rsp), %rdi
    00001648: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 5704
    0000164d: 	movq	0x70(%rsp), %r8
.Ltmp1579:
    00001652: 	movq	%r13, %rax
    00001655: 	subq	%r8, %rax
    00001658: 	cmpq	$0x8, %rax
    0000165c: 	jle	.Ltmp1585 # Offset: 5724
    00001662: 	movsd	(%r8), %xmm1
    00001667: 	movq	%r8, %rcx
    0000166a: 	movq	%r13, %rdx
    0000166d: 	nopl	(%rax) # Size: 3
.Ltmp1590:
    00001670: 	movsd	-0x8(%rdx), %xmm2
    00001675: 	leaq	-0x8(%rdx), %rsi
    00001679: 	comisd	%xmm1, %xmm2
    0000167d: 	ja	.Ltmp1586 # Offset: 5757
    0000167f: 	cmpq	%rcx, %rsi
    00001682: 	jbe	.Ltmp1587 # Offset: 5762
    00001688: 	movsd	(%rcx), %xmm0
    0000168c: 	leaq	0x8(%rcx), %rax
    00001690: 	comisd	%xmm0, %xmm1
    00001694: 	jbe	.Ltmp1588 # Offset: 5780
    00001696: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1589:
    000016a0: 	movq	%rax, %rcx
    000016a3: 	movsd	(%rax), %xmm0
    000016a7: 	leaq	0x8(%rax), %rax
    000016ab: 	comisd	%xmm0, %xmm1
    000016af: 	ja	.Ltmp1589 # Offset: 5807
    000016b1: 	cmpq	%rcx, %rsi
    000016b4: 	jbe	.Ltmp1587 # Offset: 5812
.Ltmp1588:
    000016ba: 	movsd	%xmm0, (%rsi)
    000016be: 	movsd	%xmm2, (%rcx)
.Ltmp1586:
    000016c2: 	movq	%rsi, %rdx
    000016c5: 	jmp	.Ltmp1590 # Offset: 5829
.Ltmp1637:
    000016c7: 	movq	%r8, %rsi
    000016ca: 	movq	%r8, 0x70(%rsp)
    000016cf: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 5839
    000016d4: 	movq	0x70(%rsp), %rdi
    000016d9: 	movq	%r13, %rsi
    000016dc: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 5852
.Ltmp1585:
    000016e1: 	movsd	0x7e70(%rsp), %xmm0
    000016ea: 	movq	0x8(%rsp), %rax
    000016ef: 	movq	0x50(%rsp), %rdx
    000016f4: 	nopl	(%rax) # Size: 4
.Ltmp1592:
    000016f8: 	movapd	%xmm0, %xmm1
    000016fc: 	movsd	(%rax), %xmm0
    00001700: 	comisd	%xmm0, %xmm1
    00001704: 	ja	.Ltmp1591 # Offset: 5892
    0000170a: 	addq	$0x8, %rax
    0000170e: 	cmpq	%rdx, %rax
    00001711: 	jne	.Ltmp1592 # Offset: 5905
    00001713: 	addl	$0x1, 0x20(%rsp)
    00001718: 	movl	0x20(%rsp), %eax
    0000171c: 	cmpl	0x68(%rsp), %eax
    00001720: 	jl	.Ltmp1593 # Offset: 5920
.Ltmp1573:
    00001726: 	callq	clock@PLT # Offset: 5926
    0000172b: 	pxor	%xmm0, %xmm0
    0000172f: 	movq	%r14, %rdi
    00001732: 	movq	%rax, end_time(%rip)
    00001739: 	subq	start_time(%rip), %rax
    00001740: 	cvtsi2sd	%rax, %xmm0
    00001745: 	divsd	DATAat0x13600(%rip), %xmm0
    0000174d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5965
    00001752: 	movq	0x150(%rsp), %rdi
    0000175a: 	cmpq	(%rsp), %rdi
    0000175e: 	je	.Ltmp1594 # Offset: 5982
    00001760: 	movq	0x160(%rsp), %rax
    00001768: 	leaq	0x1(%rax), %rsi
    0000176c: 	callq	_ZdlPvm@PLT # Offset: 5996
.Ltmp1594:
    00001771: 	movq	0x30(%rsp), %r13
    00001776: 	leaq	0x130(%rsp), %rdi
    0000177e: 	leaq	DATAat0x13278(%rip), %rdx
    00001785: 	movq	%r13, %rsi
    00001788: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6024
    0000178d: 	movl	iterations(%rip), %edx
    00001793: 	movl	$0x1, %r8d
    00001799: 	movl	$0x1, %ecx
    0000179e: 	movq	0x130(%rsp), %rdi
    000017a6: 	movl	$0x7d0, %esi
    000017ab: 	callq	_Z9summarizePKciiii # Offset: 6059
    000017b0: 	leaq	DATAat0x13289(%rip), %rdx
    000017b7: 	movq	%r13, %rsi
    000017ba: 	movq	%r14, %rdi
    000017bd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6077
    000017c2: 	callq	clock@PLT # Offset: 6082
    000017c7: 	leaq	0x178(%rsp), %rsi
    000017cf: 	movl	$0x0, 0x20(%rsp)
    000017d7: 	movq	%rax, start_time(%rip)
    000017de: 	movl	iterations(%rip), %eax
    000017e4: 	movq	%rsi, 0x8(%rsp)
    000017e9: 	movl	%eax, 0x68(%rsp)
    000017ed: 	testl	%eax, %eax
    000017ef: 	jle	.Ltmp1595 # Offset: 6127
.Ltmp1600:
    000017f5: 	movl	$0x3e80, %edx
    000017fa: 	movq	%r15, %rsi
    000017fd: 	movq	%rbp, %rdi
    00001800: 	movl	$0x3e7, %r13d
    00001806: 	callq	memcpy@PLT # Offset: 6150
    0000180b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1596:
    00001810: 	movsd	(%rbp,%r13,8), %xmm0
    00001817: 	movq	%r13, %rdx
    0000181a: 	movq	%rbp, %rsi
    0000181d: 	movl	$0x7d0, %edi
    00001822: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 6178
    00001827: 	subq	$0x1, %r13
    0000182b: 	jae	.Ltmp1596 # Offset: 6187
    0000182d: 	movl	$0x7cf, %r13d
    00001833: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1597:
    00001838: 	movsd	(%rbp,%r13,8), %xmm0
    0000183f: 	xorl	%edx, %edx
    00001841: 	movq	%r13, %rdi
    00001844: 	movq	%rbp, %rsi
    00001847: 	movsd	0x170(%rsp), %xmm1
    00001850: 	movsd	%xmm1, (%rbp,%r13,8)
    00001857: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 6231
    0000185c: 	subq	$0x1, %r13
    00001860: 	jne	.Ltmp1597 # Offset: 6240
    00001862: 	movsd	0x170(%rsp), %xmm0
    0000186b: 	movq	0x8(%rsp), %rax
.Ltmp1599:
    00001870: 	addq	$0x8, %rax
    00001874: 	movapd	%xmm0, %xmm1
    00001878: 	movsd	-0x8(%rax), %xmm0
    0000187d: 	comisd	%xmm0, %xmm1
    00001881: 	ja	.Ltmp1598 # Offset: 6273
    00001887: 	cmpq	%r15, %rax
    0000188a: 	jne	.Ltmp1599 # Offset: 6282
    0000188c: 	addl	$0x1, 0x20(%rsp)
    00001891: 	movl	0x20(%rsp), %eax
    00001895: 	cmpl	0x68(%rsp), %eax
    00001899: 	jl	.Ltmp1600 # Offset: 6297
.Ltmp1595:
    0000189f: 	callq	clock@PLT # Offset: 6303
    000018a4: 	pxor	%xmm0, %xmm0
    000018a8: 	movq	%r14, %rdi
    000018ab: 	movq	%rax, end_time(%rip)
    000018b2: 	subq	start_time(%rip), %rax
    000018b9: 	cvtsi2sd	%rax, %xmm0
    000018be: 	divsd	DATAat0x13600(%rip), %xmm0
    000018c6: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6342
    000018cb: 	movq	0x150(%rsp), %rdi
    000018d3: 	cmpq	(%rsp), %rdi
    000018d7: 	je	.Ltmp1601 # Offset: 6359
    000018d9: 	movq	0x160(%rsp), %rax
    000018e1: 	leaq	0x1(%rax), %rsi
    000018e5: 	callq	_ZdlPvm@PLT # Offset: 6373
.Ltmp1601:
    000018ea: 	movq	0x30(%rsp), %rsi
    000018ef: 	leaq	DATAat0x132a4(%rip), %rdx
    000018f6: 	movq	%r14, %rdi
    000018f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6393
    000018fe: 	callq	clock@PLT # Offset: 6398
    00001903: 	leaq	0x7e78(%rsp), %rsi
    0000190b: 	movl	$0x0, 0x20(%rsp)
    00001913: 	movq	%rax, start_time(%rip)
    0000191a: 	movl	iterations(%rip), %eax
    00001920: 	movq	%rsi, 0x8(%rsp)
    00001925: 	movl	%eax, 0x68(%rsp)
    00001929: 	testl	%eax, %eax
    0000192b: 	jle	.Ltmp1602 # Offset: 6443
.Ltmp1607:
    00001931: 	movl	$0x3e80, %edx
    00001936: 	movq	%r12, %rsi
    00001939: 	movq	%rbx, %rdi
    0000193c: 	movl	$0x3e7, %r13d
    00001942: 	callq	memcpy@PLT # Offset: 6466
    00001947: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1603:
    00001950: 	movsd	(%rbx,%r13,8), %xmm0
    00001956: 	movq	%r13, %rdx
    00001959: 	movq	%rbx, %rsi
    0000195c: 	movl	$0x7d0, %edi
    00001961: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 6497
    00001966: 	subq	$0x1, %r13
    0000196a: 	jae	.Ltmp1603 # Offset: 6506
    0000196c: 	movl	$0x7cf, %r13d
    00001972: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1604:
    00001978: 	movsd	(%rbx,%r13,8), %xmm0
    0000197e: 	xorl	%edx, %edx
    00001980: 	movq	%r13, %rdi
    00001983: 	movq	%rbx, %rsi
    00001986: 	movsd	0x7e70(%rsp), %xmm1
    0000198f: 	movsd	%xmm1, (%rbx,%r13,8)
    00001995: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 6549
    0000199a: 	subq	$0x1, %r13
    0000199e: 	jne	.Ltmp1604 # Offset: 6558
    000019a0: 	movsd	0x7e70(%rsp), %xmm0
    000019a9: 	movq	0x8(%rsp), %rax
    000019ae: 	nop # Size: 2
.Ltmp1606:
    000019b0: 	addq	$0x8, %rax
    000019b4: 	movapd	%xmm0, %xmm1
    000019b8: 	movsd	-0x8(%rax), %xmm0
    000019bd: 	comisd	%xmm0, %xmm1
    000019c1: 	ja	.Ltmp1605 # Offset: 6593
    000019c7: 	cmpq	%r12, %rax
    000019ca: 	jne	.Ltmp1606 # Offset: 6602
    000019cc: 	addl	$0x1, 0x20(%rsp)
    000019d1: 	movl	0x20(%rsp), %eax
    000019d5: 	cmpl	0x68(%rsp), %eax
    000019d9: 	jl	.Ltmp1607 # Offset: 6617
.Ltmp1602:
    000019df: 	callq	clock@PLT # Offset: 6623
    000019e4: 	pxor	%xmm0, %xmm0
    000019e8: 	movq	%r14, %rdi
    000019eb: 	movq	%rax, end_time(%rip)
    000019f2: 	subq	start_time(%rip), %rax
    000019f9: 	cvtsi2sd	%rax, %xmm0
    000019fe: 	divsd	DATAat0x13600(%rip), %xmm0
    00001a06: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6662
    00001a0b: 	movq	0x150(%rsp), %rdi
    00001a13: 	cmpq	(%rsp), %rdi
    00001a17: 	je	.Ltmp1608 # Offset: 6679
    00001a19: 	movq	0x160(%rsp), %rax
    00001a21: 	leaq	0x1(%rax), %rsi
    00001a25: 	callq	_ZdlPvm@PLT # Offset: 6693
.Ltmp1608:
    00001a2a: 	movq	0x30(%rsp), %rsi
    00001a2f: 	leaq	DATAat0x13538(%rip), %rdx
    00001a36: 	movq	%r14, %rdi
    00001a39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6713
    00001a3e: 	movq	0x10(%rsp), %rcx
    00001a43: 	movq	0x48(%rsp), %rdx
    00001a48: 	movq	%r14, %r8
    00001a4b: 	movq	%r15, 0xc8(%rsp)
    00001a53: 	movq	0x40(%rsp), %rsi
    00001a58: 	movq	0x38(%rsp), %rdi
    00001a5d: 	movq	%rbp, 0xb8(%rsp)
    00001a65: 	movq	%rbx, 0xa8(%rsp)
    00001a6d: 	movq	%r15, 0x98(%rsp)
    00001a75: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6773
    00001a7a: 	movq	0x150(%rsp), %rdi
    00001a82: 	cmpq	(%rsp), %rdi
    00001a86: 	je	.Ltmp1609 # Offset: 6790
    00001a88: 	movq	0x160(%rsp), %rax
    00001a90: 	leaq	0x1(%rax), %rsi
    00001a94: 	callq	_ZdlPvm@PLT # Offset: 6804
.Ltmp1609:
    00001a99: 	movq	0x30(%rsp), %rsi
    00001a9e: 	leaq	DATAat0x13560(%rip), %rdx
    00001aa5: 	movq	%r14, %rdi
    00001aa8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6824
    00001aad: 	movq	0x58(%rsp), %rax
    00001ab2: 	movq	0x10(%rsp), %rcx
    00001ab7: 	movq	%r14, %r8
    00001aba: 	movq	%r12, 0xc8(%rsp)
    00001ac2: 	movq	0x48(%rsp), %rdx
    00001ac7: 	movq	0x40(%rsp), %rsi
    00001acc: 	movq	%rbx, 0xb8(%rsp)
    00001ad4: 	movq	0x38(%rsp), %rdi
    00001ad9: 	movq	%rax, 0xa8(%rsp)
    00001ae1: 	movq	%r12, 0x98(%rsp)
    00001ae9: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6889
    00001aee: 	movq	0x150(%rsp), %rdi
    00001af6: 	cmpq	(%rsp), %rdi
    00001afa: 	je	.Ltmp1610 # Offset: 6906
    00001afc: 	movq	0x160(%rsp), %rax
    00001b04: 	leaq	0x1(%rax), %rsi
    00001b08: 	callq	_ZdlPvm@PLT # Offset: 6920
.Ltmp1610:
    00001b0d: 	movq	(%rsp), %rax
    00001b11: 	movq	0xd0(%rsp), %rbp
    00001b19: 	movq	0xd8(%rsp), %r13
    00001b21: 	movq	%rax, 0x150(%rsp)
    00001b29: 	movq	%rbp, %rax
    00001b2c: 	addq	%r13, %rax
    00001b2f: 	je	.Ltmp1611 # Offset: 6959
    00001b31: 	testq	%rbp, %rbp
    00001b34: 	je	.Ltmp1612 # Offset: 6964
.Ltmp1611:
    00001b3a: 	movq	%r13, 0xc0(%rsp)
    00001b42: 	cmpq	$0xf, %r13
    00001b46: 	ja	.Ltmp1613 # Offset: 6982
    00001b4c: 	cmpq	$0x1, %r13
    00001b50: 	jne	.Ltmp1614 # Offset: 6992
    00001b56: 	movzbl	(%rbp), %eax
    00001b5a: 	movb	%al, 0x160(%rsp)
    00001b61: 	movq	(%rsp), %rax
.Ltmp1661:
    00001b65: 	movq	%r13, 0x158(%rsp)
    00001b6d: 	movb	$0x0, (%rax,%r13)
    00001b72: 	movabsq	$0x3fffffffffffffff, %rax
    00001b7c: 	subq	0x158(%rsp), %rax
    00001b84: 	cmpq	$0x28, %rax
    00001b88: 	jbe	.Ltmp1615 # Offset: 7048
    00001b8e: 	movl	$0x29, %edx
    00001b93: 	leaq	DATAat0x13590(%rip), %rsi
    00001b9a: 	movq	%r14, %rdi
    00001b9d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7069
    00001ba2: 	movq	0x58(%rsp), %rax
    00001ba7: 	movq	0x10(%rsp), %rcx
    00001bac: 	movq	%r14, %r8
    00001baf: 	movq	%r12, 0xc8(%rsp)
    00001bb7: 	movq	0x48(%rsp), %rdx
    00001bbc: 	movq	0x40(%rsp), %rsi
    00001bc1: 	movq	%rbx, 0xb8(%rsp)
    00001bc9: 	movq	0x38(%rsp), %rdi
    00001bce: 	movq	%rax, 0xa8(%rsp)
    00001bd6: 	movq	%r12, 0x98(%rsp)
    00001bde: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IPdEEdEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 7134
    00001be3: 	movq	0x150(%rsp), %rdi
    00001beb: 	cmpq	(%rsp), %rdi
    00001bef: 	je	.Ltmp1616 # Offset: 7151
    00001bf1: 	movq	0x160(%rsp), %rax
    00001bf9: 	leaq	0x1(%rax), %rsi
    00001bfd: 	callq	_ZdlPvm@PLT # Offset: 7165
.Ltmp1616:
    00001c02: 	movq	0x30(%rsp), %rsi
    00001c07: 	leaq	DATAat0x135c0(%rip), %rdx
    00001c0e: 	movq	%r14, %rdi
    00001c11: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7185
    00001c16: 	callq	clock@PLT # Offset: 7190
    00001c1b: 	movl	iterations(%rip), %r13d
    00001c22: 	xorl	%ebp, %ebp
    00001c24: 	movq	%rax, start_time(%rip)
    00001c2b: 	leaq	0x7e78(%rsp), %rax
    00001c33: 	movq	%rax, 0x8(%rsp)
    00001c38: 	testl	%r13d, %r13d
    00001c3b: 	jle	.Ltmp1617 # Offset: 7227
.Ltmp1622:
    00001c41: 	movl	$0x3e80, %edx
    00001c46: 	movq	%r12, %rsi
    00001c49: 	movq	%rbx, %rdi
    00001c4c: 	movl	$0x3e7, %r15d
    00001c52: 	callq	memcpy@PLT # Offset: 7250
    00001c57: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1618:
    00001c60: 	movsd	(%rbx,%r15,8), %xmm0
    00001c66: 	movq	%r15, %rdx
    00001c69: 	movq	%rbx, %rsi
    00001c6c: 	movl	$0x7d0, %edi
    00001c71: 	callq	_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPddEEdEEdEEvlT_lT0_ # Offset: 7281
    00001c76: 	subq	$0x1, %r15
    00001c7a: 	jae	.Ltmp1618 # Offset: 7290
    00001c7c: 	movl	$0x7cf, %r15d
    00001c82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1619:
    00001c88: 	movsd	(%rbx,%r15,8), %xmm0
    00001c8e: 	xorl	%edx, %edx
    00001c90: 	movq	%r15, %rdi
    00001c93: 	movq	%rbx, %rsi
    00001c96: 	movsd	0x7e70(%rsp), %xmm1
    00001c9f: 	movsd	%xmm1, (%rbx,%r15,8)
    00001ca5: 	callq	_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPddEEdEEdEEvlT_lT0_ # Offset: 7333
    00001caa: 	subq	$0x1, %r15
    00001cae: 	jne	.Ltmp1619 # Offset: 7342
    00001cb0: 	movsd	0x7e70(%rsp), %xmm0
    00001cb9: 	movq	0x8(%rsp), %rax
    00001cbe: 	movq	0x50(%rsp), %rdx
    00001cc3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1621:
    00001cc8: 	movapd	%xmm0, %xmm1
    00001ccc: 	movsd	(%rax), %xmm0
    00001cd0: 	comisd	%xmm0, %xmm1
    00001cd4: 	ja	.Ltmp1620 # Offset: 7380
    00001cda: 	addq	$0x8, %rax
    00001cde: 	cmpq	%rdx, %rax
    00001ce1: 	jne	.Ltmp1621 # Offset: 7393
    00001ce3: 	addl	$0x1, %ebp
    00001ce6: 	cmpl	%r13d, %ebp
    00001ce9: 	jl	.Ltmp1622 # Offset: 7401
.Ltmp1617:
    00001cef: 	callq	clock@PLT # Offset: 7407
    00001cf4: 	pxor	%xmm0, %xmm0
    00001cf8: 	movq	%r14, %rdi
    00001cfb: 	movq	%rax, end_time(%rip)
    00001d02: 	subq	start_time(%rip), %rax
    00001d09: 	cvtsi2sd	%rax, %xmm0
    00001d0e: 	divsd	DATAat0x13600(%rip), %xmm0
    00001d16: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7446
    00001d1b: 	movq	0x150(%rsp), %rdi
    00001d23: 	cmpq	(%rsp), %rdi
    00001d27: 	je	.Ltmp1623 # Offset: 7463
    00001d29: 	movq	0x160(%rsp), %rax
    00001d31: 	leaq	0x1(%rax), %rsi
    00001d35: 	callq	_ZdlPvm@PLT # Offset: 7477
.Ltmp1623:
    00001d3a: 	movq	0x30(%rsp), %rsi
    00001d3f: 	leaq	DATAat0x132be(%rip), %rdx
    00001d46: 	movq	%r14, %rdi
    00001d49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7497
    00001d4e: 	movl	iterations(%rip), %edx
    00001d54: 	movl	$0x1, %r8d
    00001d5a: 	movl	$0x1, %ecx
    00001d5f: 	movq	0x150(%rsp), %rdi
    00001d67: 	movl	$0x7d0, %esi
    00001d6c: 	callq	_Z9summarizePKciiii # Offset: 7532
    00001d71: 	movl	0x6c(%rsp), %eax
    00001d75: 	movq	0x150(%rsp), %rdi
    00001d7d: 	movl	%eax, iterations(%rip)
    00001d83: 	cmpq	(%rsp), %rdi
    00001d87: 	je	.Ltmp1624 # Offset: 7559
    00001d89: 	movq	0x160(%rsp), %rax
    00001d91: 	leaq	0x1(%rax), %rsi
    00001d95: 	callq	_ZdlPvm@PLT # Offset: 7573
.Ltmp1624:
    00001d9a: 	movq	0x130(%rsp), %rdi
    00001da2: 	leaq	0x140(%rsp), %rax
    00001daa: 	cmpq	%rax, %rdi
    00001dad: 	je	.Ltmp1625 # Offset: 7597
    00001daf: 	movq	0x140(%rsp), %rax
    00001db7: 	leaq	0x1(%rax), %rsi
    00001dbb: 	callq	_ZdlPvm@PLT # Offset: 7611
.Ltmp1625:
    00001dc0: 	movq	0x110(%rsp), %rdi
    00001dc8: 	leaq	0x120(%rsp), %rax
    00001dd0: 	cmpq	%rax, %rdi
    00001dd3: 	je	.Ltmp1626 # Offset: 7635
    00001dd5: 	movq	0x120(%rsp), %rax
    00001ddd: 	leaq	0x1(%rax), %rsi
    00001de1: 	callq	_ZdlPvm@PLT # Offset: 7649
.Ltmp1626:
    00001de6: 	movq	0xf0(%rsp), %rdi
    00001dee: 	leaq	0x100(%rsp), %rax
    00001df6: 	cmpq	%rax, %rdi
    00001df9: 	je	.Ltmp1627 # Offset: 7673
    00001dfb: 	movq	0x100(%rsp), %rax
    00001e03: 	leaq	0x1(%rax), %rsi
    00001e07: 	callq	_ZdlPvm@PLT # Offset: 7687
.Ltmp1627:
    00001e0c: 	movq	0xd0(%rsp), %rdi
    00001e14: 	cmpq	0x60(%rsp), %rdi
    00001e19: 	je	.Ltmp1628 # Offset: 7705
    00001e1b: 	movq	0xe0(%rsp), %rax
    00001e23: 	leaq	0x1(%rax), %rsi
    00001e27: 	callq	_ZdlPvm@PLT # Offset: 7719
.Ltmp1628:
    00001e2c: 	movq	0xfb78(%rsp), %rax
    00001e34: 	subq	%fs:0x28, %rax
    00001e3d: 	jne	.Ltmp1629 # Offset: 7741
    00001e43: 	addq	$0xfb88, %rsp
    00001e4a: 	popq	%rbx
    00001e4b: 	popq	%rbp
    00001e4c: 	popq	%r12
    00001e4e: 	popq	%r13
    00001e50: 	popq	%r14
    00001e52: 	popq	%r15
    00001e54: 	retq # Offset: 7764
.Ltmp1620:
    00001e55: 	movq	0x150(%rsp), %rdx
    00001e5d: 	leaq	DATAat0x131ba(%rip), %rsi
    00001e64: 	movl	$0x1, %edi
    00001e69: 	xorl	%eax, %eax
    00001e6b: 	callq	__printf_chk@PLT # Offset: 7787
    00001e70: 	movl	iterations(%rip), %r13d
    00001e77: 	addl	$0x1, %ebp
    00001e7a: 	cmpl	%r13d, %ebp
    00001e7d: 	jl	.Ltmp1622 # Offset: 7805
    00001e83: 	jmp	.Ltmp1617 # Offset: 7811
.Ltmp1605:
    00001e88: 	movq	0x150(%rsp), %rdx
    00001e90: 	leaq	DATAat0x131ba(%rip), %rsi
    00001e97: 	movl	$0x1, %edi
    00001e9c: 	xorl	%eax, %eax
    00001e9e: 	callq	__printf_chk@PLT # Offset: 7838
    00001ea3: 	movl	iterations(%rip), %eax
    00001ea9: 	addl	$0x1, 0x20(%rsp)
    00001eae: 	movl	%eax, 0x68(%rsp)
    00001eb2: 	movl	0x20(%rsp), %eax
    00001eb6: 	cmpl	0x68(%rsp), %eax
    00001eba: 	jl	.Ltmp1607 # Offset: 7866
    00001ec0: 	jmp	.Ltmp1602 # Offset: 7872
.Ltmp1598:
    00001ec5: 	movq	0x150(%rsp), %rdx
    00001ecd: 	leaq	DATAat0x131ba(%rip), %rsi
    00001ed4: 	movl	$0x1, %edi
    00001ed9: 	xorl	%eax, %eax
    00001edb: 	callq	__printf_chk@PLT # Offset: 7899
    00001ee0: 	movl	iterations(%rip), %eax
    00001ee6: 	addl	$0x1, 0x20(%rsp)
    00001eeb: 	movl	%eax, 0x68(%rsp)
    00001eef: 	movl	0x20(%rsp), %eax
    00001ef3: 	cmpl	0x68(%rsp), %eax
    00001ef7: 	jl	.Ltmp1600 # Offset: 7927
    00001efd: 	jmp	.Ltmp1595 # Offset: 7933
.Ltmp1591:
    00001f02: 	movq	0x150(%rsp), %rdx
    00001f0a: 	leaq	DATAat0x131ba(%rip), %rsi
    00001f11: 	movl	$0x1, %edi
    00001f16: 	xorl	%eax, %eax
    00001f18: 	callq	__printf_chk@PLT # Offset: 7960
    00001f1d: 	movl	iterations(%rip), %eax
    00001f23: 	addl	$0x1, 0x20(%rsp)
    00001f28: 	movl	%eax, 0x68(%rsp)
    00001f2c: 	movl	0x20(%rsp), %eax
    00001f30: 	cmpl	0x68(%rsp), %eax
    00001f34: 	jl	.Ltmp1593 # Offset: 7988
    00001f3a: 	jmp	.Ltmp1573 # Offset: 7994
.Ltmp1587:
    00001f3f: 	movq	%rdx, %rax
    00001f42: 	subq	%r8, %rax
    00001f45: 	cmpq	$0x8, %rax
    00001f49: 	jle	.Ltmp1630 # Offset: 8009
    00001f4b: 	movsd	(%r8), %xmm1
    00001f50: 	movq	%rdx, %r9
    00001f53: 	movq	%r8, %rax
.Ltmp1635:
    00001f56: 	movsd	-0x8(%r9), %xmm2
    00001f5c: 	leaq	-0x8(%r9), %rcx
    00001f60: 	comisd	%xmm1, %xmm2
    00001f64: 	ja	.Ltmp1631 # Offset: 8036
    00001f66: 	cmpq	%rax, %rcx
    00001f69: 	jbe	.Ltmp1632 # Offset: 8041
    00001f6b: 	movsd	(%rax), %xmm0
    00001f6f: 	comisd	%xmm0, %xmm1
    00001f73: 	jbe	.Ltmp1633 # Offset: 8051
    00001f75: 	nopl	(%rax) # Size: 3
.Ltmp1634:
    00001f78: 	movsd	0x8(%rax), %xmm0
    00001f7d: 	addq	$0x8, %rax
    00001f81: 	comisd	%xmm0, %xmm1
    00001f85: 	ja	.Ltmp1634 # Offset: 8069
    00001f87: 	cmpq	%rax, %rcx
    00001f8a: 	jbe	.Ltmp1632 # Offset: 8074
.Ltmp1633:
    00001f8c: 	movsd	%xmm0, (%rcx)
    00001f90: 	movsd	%xmm2, (%rax)
.Ltmp1631:
    00001f94: 	movq	%rcx, %r9
    00001f97: 	jmp	.Ltmp1635 # Offset: 8087
.Ltmp1632:
    00001f99: 	movq	%r9, %rsi
    00001f9c: 	movq	%r8, %rdi
    00001f9f: 	movq	%rdx, 0x70(%rsp)
    00001fa4: 	movq	%r9, 0x78(%rsp)
    00001fa9: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 8105
    00001fae: 	movq	0x70(%rsp), %rsi
    00001fb3: 	movq	0x78(%rsp), %rdi
    00001fb8: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 8120
    00001fbd: 	movq	0x70(%rsp), %rdx
.Ltmp1630:
    00001fc2: 	movq	%r13, %rax
    00001fc5: 	movq	%rdx, %rdi
    00001fc8: 	subq	%rdx, %rax
    00001fcb: 	cmpq	$0x8, %rax
    00001fcf: 	jle	.Ltmp1585 # Offset: 8143
    00001fd5: 	movsd	(%rdx), %xmm1
    00001fd9: 	movq	%r13, %r8
.Ltmp1640:
    00001fdc: 	movsd	-0x8(%r8), %xmm2
    00001fe2: 	leaq	-0x8(%r8), %rax
    00001fe6: 	comisd	%xmm1, %xmm2
    00001fea: 	ja	.Ltmp1636 # Offset: 8170
    00001fec: 	cmpq	%rdx, %rax
    00001fef: 	jbe	.Ltmp1637 # Offset: 8175
    00001ff5: 	movsd	(%rdx), %xmm0
    00001ff9: 	comisd	%xmm0, %xmm1
    00001ffd: 	jbe	.Ltmp1638 # Offset: 8189
    00001fff: 	nop # Size: 1
.Ltmp1639:
    00002000: 	movsd	0x8(%rdx), %xmm0
    00002005: 	addq	$0x8, %rdx
    00002009: 	comisd	%xmm0, %xmm1
    0000200d: 	ja	.Ltmp1639 # Offset: 8205
    0000200f: 	cmpq	%rdx, %rax
    00002012: 	jbe	.Ltmp1637 # Offset: 8210
.Ltmp1638:
    00002018: 	movsd	%xmm0, (%rax)
    0000201c: 	movsd	%xmm2, (%rdx)
.Ltmp1636:
    00002020: 	movq	%rax, %r8
    00002023: 	jmp	.Ltmp1640 # Offset: 8227
.Ltmp1581:
    00002025: 	movq	%rcx, %rax
    00002028: 	subq	%rbx, %rax
    0000202b: 	cmpq	$0x8, %rax
    0000202f: 	jle	.Ltmp1641 # Offset: 8239
    00002035: 	movsd	0x7e70(%rsp), %xmm1
    0000203e: 	movq	%rcx, %r9
    00002041: 	movq	%rbx, %rax
.Ltmp1646:
    00002044: 	comisd	%xmm1, %xmm2
    00002048: 	leaq	-0x8(%r9), %rdx
    0000204c: 	ja	.Ltmp1642 # Offset: 8268
    0000204e: 	cmpq	%rax, %rdx
    00002051: 	jbe	.Ltmp1643 # Offset: 8273
    00002057: 	movsd	(%rax), %xmm0
    0000205b: 	comisd	%xmm0, %xmm1
    0000205f: 	jbe	.Ltmp1644 # Offset: 8287
    00002061: 	nopl	(%rax) # Size: 7
.Ltmp1645:
    00002068: 	movsd	0x8(%rax), %xmm0
    0000206d: 	addq	$0x8, %rax
    00002071: 	comisd	%xmm0, %xmm1
    00002075: 	ja	.Ltmp1645 # Offset: 8309
    00002077: 	cmpq	%rax, %rdx
    0000207a: 	jbe	.Ltmp1643 # Offset: 8314
.Ltmp1644:
    00002080: 	movsd	%xmm0, (%rdx)
    00002084: 	movsd	%xmm2, (%rax)
.Ltmp1642:
    00002088: 	movsd	-0x8(%rdx), %xmm2
    0000208d: 	movq	%rdx, %r9
    00002090: 	jmp	.Ltmp1646 # Offset: 8336
.Ltmp1654:
    00002092: 	movq	%r10, %rsi
    00002095: 	movq	%rbx, %rdi
    00002098: 	movq	%rcx, 0x88(%rsp)
    000020a0: 	movq	%r8, 0x80(%rsp)
    000020a8: 	movq	%r9, 0x70(%rsp)
    000020ad: 	movq	%r10, 0x78(%rsp)
    000020b2: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 8370
    000020b7: 	movq	0x70(%rsp), %rsi
    000020bc: 	movq	0x78(%rsp), %rdi
    000020c1: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 8385
    000020c6: 	movq	0x88(%rsp), %rcx
    000020ce: 	movq	0x70(%rsp), %r9
    000020d3: 	movq	0x80(%rsp), %r8
.Ltmp1652:
    000020db: 	movq	%rcx, %rsi
    000020de: 	movq	%r9, %rdi
    000020e1: 	movq	%r8, 0x78(%rsp)
    000020e6: 	movq	%rcx, 0x70(%rsp)
    000020eb: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPddEEdEEEEvT_S5_ # Offset: 8427
    000020f0: 	movq	0x78(%rsp), %r8
    000020f5: 	movq	0x70(%rsp), %rcx
.Ltmp1641:
    000020fa: 	movq	%r8, %rax
    000020fd: 	movq	%rcx, %rdi
    00002100: 	subq	%rcx, %rax
    00002103: 	cmpq	$0x8, %rax
    00002107: 	jle	.Ltmp1579 # Offset: 8455
    0000210d: 	movsd	(%rcx), %xmm1
    00002111: 	movq	%r8, %r9
.Ltmp1651:
    00002114: 	movsd	-0x8(%r9), %xmm2
    0000211a: 	leaq	-0x8(%r9), %rax
    0000211e: 	comisd	%xmm1, %xmm2
    00002122: 	ja	.Ltmp1647 # Offset: 8482
    00002124: 	cmpq	%rcx, %rax
    00002127: 	jbe	.Ltmp1648 # Offset: 8487
    0000212d: 	movsd	(%rcx), %xmm0
    00002131: 	comisd	%xmm0, %xmm1
    00002135: 	jbe	.Ltmp1649 # Offset: 8501
    00002137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1650:
    00002140: 	movsd	0x8(%rcx), %xmm0
    00002145: 	addq	$0x8, %rcx
    00002149: 	comisd	%xmm0, %xmm1
    0000214d: 	ja	.Ltmp1650 # Offset: 8525
    0000214f: 	cmpq	%rcx, %rax
    00002152: 	jbe	.Ltmp1648 # Offset: 8530
.Ltmp1649:
    00002158: 	movsd	%xmm0, (%rax)
    0000215c: 	movsd	%xmm2, (%rcx)
.Ltmp1647:
    00002160: 	movq	%rax, %r9
    00002163: 	jmp	.Ltmp1651 # Offset: 8547
.Ltmp1643:
    00002165: 	movq	%r9, %rax
    00002168: 	subq	%rbx, %rax
    0000216b: 	cmpq	$0x8, %rax
    0000216f: 	jle	.Ltmp1652 # Offset: 8559
    00002175: 	movsd	0x7e70(%rsp), %xmm1
    0000217e: 	movq	%r9, %r10
    00002181: 	movq	%rbx, %rax
.Ltmp1657:
    00002184: 	movsd	-0x8(%r10), %xmm2
    0000218a: 	leaq	-0x8(%r10), %rdx
    0000218e: 	comisd	%xmm1, %xmm2
    00002192: 	ja	.Ltmp1653 # Offset: 8594
    00002194: 	cmpq	%rax, %rdx
    00002197: 	jbe	.Ltmp1654 # Offset: 8599
    0000219d: 	movsd	(%rax), %xmm0
    000021a1: 	comisd	%xmm0, %xmm1
    000021a5: 	jbe	.Ltmp1655 # Offset: 8613
    000021a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1656:
    000021b0: 	movsd	0x8(%rax), %xmm0
    000021b5: 	addq	$0x8, %rax
    000021b9: 	comisd	%xmm0, %xmm1
    000021bd: 	ja	.Ltmp1656 # Offset: 8637
    000021bf: 	cmpq	%rax, %rdx
    000021c2: 	jbe	.Ltmp1654 # Offset: 8642
.Ltmp1655:
    000021c8: 	movsd	%xmm0, (%rdx)
    000021cc: 	movsd	%xmm2, (%rax)
.Ltmp1653:
    000021d0: 	movq	%rdx, %r10
    000021d3: 	jmp	.Ltmp1657 # Offset: 8659
.Ltmp1554:
    000021d5: 	movq	0x10(%rsp), %rsi
    000021da: 	xorl	%edx, %edx
    000021dc: 	movq	%r14, %rdi
    000021df: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8671
    000021e4: 	movq	%rax, 0x150(%rsp)
    000021ec: 	movq	%rax, %rdi
    000021ef: 	movq	0xc0(%rsp), %rax
    000021f7: 	movq	%rax, 0x160(%rsp)
.Ltmp1662:
    000021ff: 	movq	0x8(%rsp), %rsi
    00002204: 	movq	%r13, %rdx
    00002207: 	callq	memcpy@PLT # Offset: 8711
    0000220c: 	movq	0xc0(%rsp), %r13
    00002214: 	movq	0x150(%rsp), %rax
    0000221c: 	jmp	.Ltmp1556 # Offset: 8732
.Ltmp1571:
    00002221: 	testq	%r13, %r13
    00002224: 	jne	.Ltmp1658 # Offset: 8740
    0000222a: 	movq	(%rsp), %rax
    0000222e: 	jmp	.Ltmp1659 # Offset: 8750
.Ltmp1570:
    00002233: 	movq	0x10(%rsp), %rsi
    00002238: 	xorl	%edx, %edx
    0000223a: 	movq	%r14, %rdi
    0000223d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8765
    00002242: 	movq	%rax, 0x150(%rsp)
    0000224a: 	movq	%rax, %rdi
    0000224d: 	movq	0xc0(%rsp), %rax
    00002255: 	movq	%rax, 0x160(%rsp)
.Ltmp1663:
    0000225d: 	movq	0x8(%rsp), %rsi
    00002262: 	movq	%r13, %rdx
    00002265: 	callq	memcpy@PLT # Offset: 8805
    0000226a: 	movq	0xc0(%rsp), %r13
    00002272: 	movq	0x150(%rsp), %rax
    0000227a: 	jmp	.Ltmp1659 # Offset: 8826
.Ltmp1614:
    0000227f: 	testq	%r13, %r13
    00002282: 	jne	.Ltmp1660 # Offset: 8834
    00002288: 	movq	(%rsp), %rax
    0000228c: 	jmp	.Ltmp1661 # Offset: 8844
.Ltmp1613:
    00002291: 	movq	0x10(%rsp), %rsi
    00002296: 	xorl	%edx, %edx
    00002298: 	movq	%r14, %rdi
    0000229b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8859
    000022a0: 	movq	%rax, 0x150(%rsp)
    000022a8: 	movq	%rax, %rdi
    000022ab: 	movq	0xc0(%rsp), %rax
    000022b3: 	movq	%rax, 0x160(%rsp)
.Ltmp1664:
    000022bb: 	movq	%r13, %rdx
    000022be: 	movq	%rbp, %rsi
    000022c1: 	callq	memcpy@PLT # Offset: 8897
    000022c6: 	movq	0xc0(%rsp), %r13
    000022ce: 	movq	0x150(%rsp), %rax
    000022d6: 	jmp	.Ltmp1661 # Offset: 8918
.Ltmp1565:
    000022db: 	movq	(%rsp), %rdi
    000022df: 	jmp	.Ltmp1662 # Offset: 8927
.Ltmp1566:
    000022e4: 	leaq	DATAat0x131cf(%rip), %rdi
    000022eb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8939
.Ltmp1569:
    000022f0: 	leaq	DATAat0x13118(%rip), %rdi
    000022f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8951
.Ltmp1572:
    000022fc: 	leaq	DATAat0x131cf(%rip), %rdi
    00002303: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8963
.Ltmp1612:
    00002308: 	leaq	DATAat0x13118(%rip), %rdi
    0000230f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8975
.Ltmp1615:
    00002314: 	leaq	DATAat0x131cf(%rip), %rdi
    0000231b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8987
.Ltmp1629:
    00002320: 	callq	__stack_chk_fail@PLT # Offset: 8992
.Ltmp1658:
    00002325: 	movq	(%rsp), %rdi
    00002329: 	jmp	.Ltmp1663 # Offset: 9001
.Ltmp1660:
    0000232e: 	movq	(%rsp), %rdi
    00002332: 	jmp	.Ltmp1664 # Offset: 9010
.Ltmp1553:
    00002334: 	leaq	DATAat0x13118(%rip), %rdi
    0000233b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9019
    00002340: 	endbr64
.Ltmp1671:
    00002344: 	movq	%rax, %rbx
    00002347: 	jmp	.Ltmp1665 # Offset: 9031
    00002349: 	endbr64
    0000234d: 	movq	%rax, %rbx
    00002350: 	jmp	.Ltmp1666 # Offset: 9040
.Ltmp1665:
    00002352: 	movq	0x150(%rsp), %rdi
    0000235a: 	cmpq	(%rsp), %rdi
    0000235e: 	je	.Ltmp1666 # Offset: 9054
    00002360: 	movq	0x160(%rsp), %rax
    00002368: 	leaq	0x1(%rax), %rsi
    0000236c: 	callq	_ZdlPvm@PLT # Offset: 9068
.Ltmp1666:
    00002371: 	movq	0x110(%rsp), %rdi
    00002379: 	leaq	0x120(%rsp), %rax
    00002381: 	cmpq	%rax, %rdi
    00002384: 	je	.Ltmp1667 # Offset: 9092
    00002386: 	movq	0x120(%rsp), %rax
    0000238e: 	leaq	0x1(%rax), %rsi
    00002392: 	callq	_ZdlPvm@PLT # Offset: 9106
.Ltmp1667:
    00002397: 	movq	0xf0(%rsp), %rdi
    0000239f: 	leaq	0x100(%rsp), %rax
    000023a7: 	cmpq	%rax, %rdi
    000023aa: 	je	.Ltmp1668 # Offset: 9130
    000023ac: 	movq	0x100(%rsp), %rax
    000023b4: 	leaq	0x1(%rax), %rsi
    000023b8: 	callq	_ZdlPvm@PLT # Offset: 9144
.Ltmp1668:
    000023bd: 	movq	%rbx, %rbp
.Ltmp1677:
    000023c0: 	movq	0xd0(%rsp), %rdi
    000023c8: 	cmpq	0x60(%rsp), %rdi
    000023cd: 	je	.Ltmp1669 # Offset: 9165
    000023cf: 	movq	0xe0(%rsp), %rax
    000023d7: 	leaq	0x1(%rax), %rsi
    000023db: 	callq	_ZdlPvm@PLT # Offset: 9179
.Ltmp1669:
    000023e0: 	movq	%rbp, %rdi
    000023e3: 	callq	_Unwind_Resume@PLT # Offset: 9187
    000023e8: 	endbr64
    000023ec: 	movq	%rax, %rbx
    000023ef: 	jmp	.Ltmp1667 # Offset: 9199
    000023f1: 	endbr64
.Ltmp1675:
    000023f5: 	movq	%rax, %rbp
    000023f8: 	jmp	.Ltmp1670 # Offset: 9208
    000023fd: 	endbr64
    00002401: 	jmp	.Ltmp1671 # Offset: 9217
    00002406: 	endbr64
.Ltmp1673:
    0000240a: 	movq	%rax, %rbx
    0000240d: 	jmp	.Ltmp1672 # Offset: 9229
    0000240f: 	endbr64
    00002413: 	jmp	.Ltmp1673 # Offset: 9235
    00002415: 	endbr64
    00002419: 	jmp	.Ltmp1673 # Offset: 9241
    0000241b: 	endbr64
    0000241f: 	jmp	.Ltmp1673 # Offset: 9247
.Ltmp1672:
    00002421: 	movq	0x150(%rsp), %rdi
    00002429: 	cmpq	(%rsp), %rdi
    0000242d: 	je	.Ltmp1674 # Offset: 9261
    0000242f: 	movq	0x160(%rsp), %rax
    00002437: 	leaq	0x1(%rax), %rsi
    0000243b: 	callq	_ZdlPvm@PLT # Offset: 9275
.Ltmp1674:
    00002440: 	movq	0x130(%rsp), %rdi
    00002448: 	leaq	0x140(%rsp), %rax
    00002450: 	cmpq	%rax, %rdi
    00002453: 	je	.Ltmp1666 # Offset: 9299
    00002459: 	movq	0x140(%rsp), %rax
    00002461: 	leaq	0x1(%rax), %rsi
    00002465: 	callq	_ZdlPvm@PLT # Offset: 9317
    0000246a: 	jmp	.Ltmp1666 # Offset: 9322
    0000246f: 	endbr64
    00002473: 	jmp	.Ltmp1673 # Offset: 9331
    00002475: 	endbr64
    00002479: 	jmp	.Ltmp1671 # Offset: 9337
    0000247e: 	endbr64
    00002482: 	jmp	.Ltmp1671 # Offset: 9346
    00002487: 	endbr64
    0000248b: 	jmp	.Ltmp1671 # Offset: 9355
    00002490: 	endbr64
    00002494: 	jmp	.Ltmp1675 # Offset: 9364
    00002499: 	endbr64
    0000249d: 	jmp	.Ltmp1675 # Offset: 9373
    000024a2: 	endbr64
    000024a6: 	movq	%rax, %rbp
    000024a9: 	jmp	.Ltmp1676 # Offset: 9385
    000024ab: 	endbr64
    000024af: 	jmp	.Ltmp1673 # Offset: 9391
.Ltmp1676:
    000024b4: 	movq	0xbcf0(%rsp), %rdi
    000024bc: 	leaq	0xbd00(%rsp), %rax
    000024c4: 	cmpq	%rax, %rdi
    000024c7: 	je	.Ltmp1677 # Offset: 9415
.Ltmp1682:
    000024cd: 	movq	0xbd00(%rsp), %rax
    000024d5: 	leaq	0x1(%rax), %rsi
    000024d9: 	callq	_ZdlPvm@PLT # Offset: 9433
    000024de: 	jmp	.Ltmp1677 # Offset: 9438
    000024e3: 	endbr64
    000024e7: 	jmp	.Ltmp1675 # Offset: 9447
    000024ec: 	endbr64
    000024f0: 	jmp	.Ltmp1675 # Offset: 9456
    000024f5: 	endbr64
.Ltmp1679:
    000024f9: 	movq	%rax, %rbx
    000024fc: 	jmp	.Ltmp1678 # Offset: 9468
    000024fe: 	endbr64
    00002502: 	jmp	.Ltmp1679 # Offset: 9474
    00002504: 	endbr64
    00002508: 	jmp	.Ltmp1679 # Offset: 9480
    0000250a: 	endbr64
    0000250e: 	movq	%rax, %rbx
    00002511: 	jmp	.Ltmp1680 # Offset: 9489
.Ltmp1678:
    00002513: 	movq	0x150(%rsp), %rdi
    0000251b: 	cmpq	(%rsp), %rdi
    0000251f: 	je	.Ltmp1667 # Offset: 9503
.Ltmp1681:
    00002525: 	movq	0x160(%rsp), %rax
    0000252d: 	leaq	0x1(%rax), %rsi
    00002531: 	callq	_ZdlPvm@PLT # Offset: 9521
    00002536: 	jmp	.Ltmp1667 # Offset: 9526
.Ltmp1680:
    0000253b: 	movq	0x150(%rsp), %rdi
    00002543: 	leaq	0x160(%rsp), %rax
    0000254b: 	cmpq	%rax, %rdi
    0000254e: 	jne	.Ltmp1681 # Offset: 9550
    00002550: 	jmp	.Ltmp1667 # Offset: 9552
    00002555: 	endbr64
    00002559: 	jmp	.Ltmp1679 # Offset: 9561
    0000255b: 	endbr64
    0000255f: 	jmp	.Ltmp1679 # Offset: 9567
    00002561: 	endbr64
    00002565: 	movq	%rax, %rbx
    00002568: 	jmp	.Ltmp1674 # Offset: 9576
    0000256d: 	endbr64
    00002571: 	jmp	.Ltmp1671 # Offset: 9585
    00002576: 	endbr64
    0000257a: 	movq	%rax, %rbp
    0000257d: 	jmp	.Ltmp1677 # Offset: 9597
    00002582: 	endbr64
    00002586: 	jmp	.Ltmp1673 # Offset: 9606
    0000258b: 	endbr64
    0000258f: 	jmp	.Ltmp1673 # Offset: 9615
    00002594: 	endbr64
    00002598: 	jmp	.Ltmp1671 # Offset: 9624
    0000259d: 	endbr64
    000025a1: 	jmp	.Ltmp1671 # Offset: 9633
.Ltmp1670:
    000025a6: 	movq	0xbcf0(%rsp), %rdi
    000025ae: 	cmpq	%r13, %rdi
    000025b1: 	jne	.Ltmp1682 # Offset: 9649
    000025b7: 	jmp	.Ltmp1677 # Offset: 9655
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_ZN9benchmark9__sift_inIPiiEEvlT_lT0_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0xcd40
  Size        : 0x103
  MaxSize     : 0x110
  Offset      : 0xcd40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPiiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rdi
    00000010: 	movq	%rdx, %r8
    00000013: 	movl	%ecx, %r9d
    00000016: 	cmpq	%r11, %rax
    00000019: 	jge	.Ltmp1683 # Offset: 25
    0000001f: 	movq	%rdx, %r10
    00000022: 	jmp	.Ltmp1684 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1686:
    00000028: 	leaq	-0x1(%rax), %rbx
    0000002c: 	leaq	(%rax,%rax), %rcx
    00000030: 	movl	%esi, (%rdi,%r10,4)
    00000034: 	leaq	(%rdi,%rbx,4), %rdx
    00000038: 	movq	%rbx, %rax
    0000003b: 	cmpq	%rcx, %r11
    0000003e: 	jle	.Ltmp1685 # Offset: 62
.Ltmp1687:
    00000040: 	movq	%rax, %r10
    00000043: 	movq	%rcx, %rax
.Ltmp1684:
    00000046: 	leaq	(,%rax,4), %rdx
    0000004e: 	movl	-0x4(%rdi,%rdx), %esi
    00000052: 	addq	%rdi, %rdx
    00000055: 	movl	(%rdx), %ecx
    00000057: 	cmpl	%ecx, %esi
    00000059: 	jge	.Ltmp1686 # Offset: 89
    0000005b: 	movl	%ecx, (%rdi,%r10,4)
    0000005f: 	leaq	0x2(%rax,%rax), %rcx
    00000064: 	cmpq	%rcx, %r11
    00000067: 	jg	.Ltmp1687 # Offset: 103
.Ltmp1685:
    00000069: 	cmpq	%rcx, %r11
    0000006c: 	je	.Ltmp1688 # Offset: 108
.Ltmp1693:
    00000072: 	leaq	-0x1(%rax), %rsi
    00000076: 	movq	%rsi, %rcx
    00000079: 	shrq	$0x3f, %rcx
    0000007d: 	addq	%rsi, %rcx
    00000080: 	sarq	%rcx
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1689 # Offset: 134
    00000088: 	jmp	.Ltmp1690 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1692:
    00000090: 	movl	%esi, (%rdx)
    00000092: 	leaq	-0x1(%rcx), %rdx
    00000096: 	movq	%rdx, %rax
    00000099: 	shrq	$0x3f, %rax
    0000009d: 	addq	%rdx, %rax
    000000a0: 	sarq	%rax
    000000a3: 	movq	%rax, %rdx
    000000a6: 	movq	%rcx, %rax
    000000a9: 	cmpq	%rcx, %r8
    000000ac: 	jge	.Ltmp1691 # Offset: 172
    000000ae: 	movq	%rdx, %rcx
.Ltmp1689:
    000000b1: 	leaq	(%rdi,%rcx,4), %r10
    000000b5: 	leaq	(%rdi,%rax,4), %rdx
    000000b9: 	movl	(%r10), %esi
    000000bc: 	cmpl	%r9d, %esi
    000000bf: 	jl	.Ltmp1692 # Offset: 191
.Ltmp1690:
    000000c1: 	movl	%r9d, (%rdx)
    000000c4: 	popq	%rbx
    000000c5: 	retq # Offset: 197
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1691:
    000000d0: 	movq	%r10, %rdx
    000000d3: 	movl	%r9d, (%rdx)
    000000d6: 	popq	%rbx
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1683:
    000000e0: 	leaq	(%rsi,%rdx,4), %rdx
    000000e4: 	jne	.Ltmp1690 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1688:
    000000f0: 	movl	-0x4(%rdi,%rcx,4), %eax
    000000f4: 	movl	%eax, (%rdx)
    000000f6: 	leaq	-0x1(%rcx), %rax
    000000fa: 	leaq	(%rdi,%rax,4), %rdx
    000000fe: 	jmp	.Ltmp1693 # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPiiEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0xce50
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0xce50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %r9d
    00000010: 	pushq	%rbx
    00000011: 	movq	0x8(%rsi), %rcx
    00000015: 	cmpq	%rdi, %rdx
    00000018: 	jge	.Ltmp1694 # Offset: 24
    0000001e: 	movq	%rdi, %rbp
    00000021: 	movq	%r8, %rbx
    00000024: 	jmp	.Ltmp1695 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1697:
    00000030: 	movq	%rax, %rbx
.Ltmp1695:
    00000033: 	leaq	-0x1(%rdx), %rax
    00000037: 	leaq	(,%rax,4), %r10
    0000003f: 	leaq	(%rcx,%r10), %rsi
    00000043: 	leaq	0x4(%rcx,%r10), %r10
    00000048: 	movl	(%rsi), %edi
    0000004a: 	movl	(%r10), %r11d
    0000004d: 	cmpl	%edi, %r11d
    00000050: 	jle	.Ltmp1696 # Offset: 80
    00000052: 	movq	%rdx, %rax
    00000055: 	movl	%r11d, %edi
    00000058: 	movq	%r10, %rsi
    0000005b: 	addq	$0x1, %rdx
.Ltmp1696:
    0000005f: 	addq	%rdx, %rdx
    00000062: 	movl	%edi, (%rcx,%rbx,4)
    00000065: 	cmpq	%rdx, %rbp
    00000068: 	jg	.Ltmp1697 # Offset: 104
    0000006a: 	je	.Ltmp1698 # Offset: 106
.Ltmp1703:
    0000006c: 	leaq	-0x1(%rax), %rdx
    00000070: 	movq	%rdx, %rdi
    00000073: 	shrq	$0x3f, %rdi
    00000077: 	addq	%rdx, %rdi
    0000007a: 	sarq	%rdi
    0000007d: 	cmpq	%r8, %rax
    00000080: 	jg	.Ltmp1699 # Offset: 128
    00000082: 	jmp	.Ltmp1700 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1702:
    00000088: 	movl	%edx, (%rsi)
    0000008a: 	leaq	-0x1(%rdi), %rdx
    0000008e: 	movq	%rdx, %rax
    00000091: 	shrq	$0x3f, %rax
    00000095: 	addq	%rdx, %rax
    00000098: 	sarq	%rax
    0000009b: 	movq	%rax, %rdx
    0000009e: 	movq	%rdi, %rax
    000000a1: 	cmpq	%rdi, %r8
    000000a4: 	jge	.Ltmp1701 # Offset: 164
    000000a6: 	movq	%rdx, %rdi
.Ltmp1699:
    000000a9: 	leaq	(%rcx,%rdi,4), %r10
    000000ad: 	leaq	(%rcx,%rax,4), %rsi
    000000b1: 	movl	(%r10), %edx
    000000b4: 	cmpl	%r9d, %edx
    000000b7: 	jl	.Ltmp1702 # Offset: 183
.Ltmp1700:
    000000b9: 	movl	%r9d, (%rsi)
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	retq # Offset: 190
    000000bf: 	nop # Size: 1
.Ltmp1701:
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movl	%r9d, (%rsi)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1694:
    000000d0: 	leaq	(%rcx,%r8,4), %rsi
    000000d4: 	jne	.Ltmp1700 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1698:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,4), %rdx
    000000e8: 	movl	(%rdx), %edi
    000000ea: 	movl	%edi, (%rsi)
    000000ec: 	movq	%rdx, %rsi
    000000ef: 	jmp	.Ltmp1703 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_"

Binary Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_heap_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_heap_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_array.cpp/1
  Number      : 67
  State       : disassembled
  Address     : 0xcf50
  Size        : 0x272
  MaxSize     : 0x280
  Offset      : 0xcf50
  Section     : .text
  Orc Section : .local.text._Z14test_heap_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x58, %rsp
    0000000e: 	movq	%rdi, 0x8(%rsp)
    00000013: 	movq	%rsi, 0x10(%rsp)
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	movq	%rcx, 0x20(%rsp)
    00000022: 	movq	%r8, 0x28(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x48(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	movl	iterations(%rip), %eax
    00000049: 	testl	%eax, %eax
    0000004b: 	jle	.Ltmp1704 # Offset: 75
    00000051: 	xorl	%r13d, %r13d
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1715:
    00000058: 	movq	0x18(%rsp), %rax
    0000005d: 	movq	0x8(%rax), %r14
    00000061: 	movq	0x10(%rsp), %rax
    00000066: 	movq	0x8(%rax), %r8
    0000006a: 	movq	0x8(%rsp), %rax
    0000006f: 	movq	0x8(%rax), %rcx
    00000073: 	cmpq	%rcx, %r8
    00000076: 	je	.Ltmp1705 # Offset: 118
    0000007c: 	movq	%r8, %rdi
    0000007f: 	leaq	0x4(%rcx), %r9
    00000083: 	movq	%r14, %rdx
    00000086: 	subq	%rcx, %rdi
    00000089: 	subq	%r9, %rdx
    0000008c: 	leaq	-0x4(%rdi), %rsi
    00000090: 	cmpq	$0x8, %rdx
    00000094: 	jbe	.Ltmp1706 # Offset: 148
    0000009a: 	cmpq	$0x8, %rsi
    0000009e: 	jbe	.Ltmp1706 # Offset: 158
    000000a4: 	shrq	$0x2, %rsi
    000000a8: 	xorl	%edx, %edx
    000000aa: 	addq	$0x1, %rsi
    000000ae: 	movq	%rsi, %rdi
    000000b1: 	shrq	$0x2, %rdi
    000000b5: 	shlq	$0x4, %rdi
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp1707:
    000000c0: 	movdqu	(%rcx,%rdx), %xmm1
    000000c5: 	movups	%xmm1, (%r14,%rdx)
    000000ca: 	addq	$0x10, %rdx
    000000ce: 	cmpq	%rdi, %rdx
    000000d1: 	jne	.Ltmp1707 # Offset: 209
    000000d3: 	movq	%rsi, %rdi
    000000d6: 	andq	$-0x4, %rdi
    000000da: 	leaq	(,%rdi,4), %rdx
    000000e2: 	addq	%rdx, %rcx
    000000e5: 	addq	%r14, %rdx
    000000e8: 	cmpq	%rsi, %rdi
    000000eb: 	je	.Ltmp1705 # Offset: 235
    000000ed: 	movl	(%rcx), %esi
    000000ef: 	movl	%esi, (%rdx)
    000000f1: 	leaq	0x4(%rcx), %rsi
    000000f5: 	cmpq	%rsi, %r8
    000000f8: 	je	.Ltmp1705 # Offset: 248
    000000fa: 	movl	0x4(%rcx), %esi
    000000fd: 	movl	%esi, 0x4(%rdx)
    00000100: 	leaq	0x8(%rcx), %rsi
    00000104: 	cmpq	%rsi, %r8
    00000107: 	je	.Ltmp1705 # Offset: 263
    00000109: 	movl	0x8(%rcx), %ecx
    0000010c: 	movl	%ecx, 0x8(%rdx)
.Ltmp1705:
    0000010f: 	movq	0x20(%rsp), %rax
    00000114: 	movq	0x8(%rax), %r12
    00000118: 	movq	%r12, %rdx
    0000011b: 	subq	%r14, %rdx
    0000011e: 	movq	%rdx, %rbx
    00000121: 	shrq	$0x3f, %rdx
    00000125: 	sarq	$0x2, %rbx
    00000129: 	addq	%rbx, %rdx
    0000012c: 	sarq	%rdx
    0000012f: 	subq	$0x1, %rdx
    00000133: 	movq	%rdx, %r15
    00000136: 	js	.Ltmp1708 # Offset: 310
    00000138: 	leaq	0x30(%rsp), %rbp
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp1709:
    00000140: 	movl	(%r14,%r15,4), %ecx
    00000144: 	movq	%r15, %rdx
    00000147: 	movq	%rbp, %rsi
    0000014a: 	movq	%rbx, %rdi
    0000014d: 	movq	%r14, 0x38(%rsp)
    00000152: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_ # Offset: 338
    00000157: 	subq	$0x1, %r15
    0000015b: 	jae	.Ltmp1709 # Offset: 347
.Ltmp1708:
    0000015d: 	subq	$0x1, %rbx
    00000161: 	testq	%rbx, %rbx
    00000164: 	jle	.Ltmp1710 # Offset: 356
    00000166: 	leaq	0x30(%rsp), %rbp
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1711:
    00000170: 	movl	(%r14), %eax
    00000173: 	movl	(%r14,%rbx,4), %ecx
    00000177: 	xorl	%edx, %edx
    00000179: 	movq	%rbx, %rdi
    0000017c: 	movq	%rbp, %rsi
    0000017f: 	movq	%r14, 0x38(%rsp)
    00000184: 	movl	%eax, (%r14,%rbx,4)
    00000188: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPiEEiEEvlT_lT0_ # Offset: 392
    0000018d: 	subq	$0x1, %rbx
    00000191: 	jne	.Ltmp1711 # Offset: 401
.Ltmp1710:
    00000193: 	leaq	0x4(%r14), %rax
    00000197: 	jmp	.Ltmp1712 # Offset: 407
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp1714:
    000001a0: 	addq	$0x4, %rax
    000001a4: 	movl	-0x8(%rax), %esi
    000001a7: 	cmpl	%esi, (%rdx)
    000001a9: 	jl	.Ltmp1713 # Offset: 425
.Ltmp1712:
    000001ab: 	movq	%rax, %rdx
    000001ae: 	cmpq	%r12, %rax
    000001b1: 	jne	.Ltmp1714 # Offset: 433
    000001b3: 	addl	$0x1, %r13d
    000001b7: 	cmpl	iterations(%rip), %r13d
    000001be: 	jl	.Ltmp1715 # Offset: 446
.Ltmp1704:
    000001c4: 	callq	clock@PLT # Offset: 452
    000001c9: 	movq	%rax, end_time(%rip)
    000001d0: 	movq	0x48(%rsp), %rdx
    000001d5: 	subq	%fs:0x28, %rdx
    000001de: 	jne	.Ltmp1716 # Offset: 478
    000001e4: 	subq	start_time(%rip), %rax
    000001eb: 	pxor	%xmm0, %xmm0
    000001ef: 	movq	0x28(%rsp), %rdi
    000001f4: 	cvtsi2sd	%rax, %xmm0
    000001f9: 	divsd	DATAat0x13600(%rip), %xmm0
    00000201: 	addq	$0x58, %rsp
    00000205: 	popq	%rbx
    00000206: 	popq	%rbp
    00000207: 	popq	%r12
    00000209: 	popq	%r13
    0000020b: 	popq	%r14
    0000020d: 	popq	%r15
    0000020f: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 527
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp1713:
    00000218: 	movq	0x28(%rsp), %rax
    0000021d: 	leaq	DATAat0x131ba(%rip), %rsi
    00000224: 	movl	$0x1, %edi
    00000229: 	addl	$0x1, %r13d
    0000022d: 	movq	(%rax), %rdx
    00000230: 	xorl	%eax, %eax
    00000232: 	callq	__printf_chk@PLT # Offset: 562
    00000237: 	cmpl	iterations(%rip), %r13d
    0000023e: 	jl	.Ltmp1715 # Offset: 574
    00000244: 	jmp	.Ltmp1704 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1706:
    00000250: 	xorl	%edx, %edx
    00000252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1717:
    00000258: 	movl	(%rcx,%rdx), %eax
    0000025b: 	movl	%eax, (%r14,%rdx)
    0000025f: 	addq	$0x4, %rdx
    00000263: 	cmpq	%rdx, %rdi
    00000266: 	jne	.Ltmp1717 # Offset: 614
    00000268: 	jmp	.Ltmp1705 # Offset: 616
.Ltmp1716:
    0000026d: 	callq	__stack_chk_fail@PLT # Offset: 621
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPiiEEiEEiEEvlT_lT0_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0xd1d0
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0xd1d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPiiEEiEEiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %r9d
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp1718 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp1719 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1721:
    00000028: 	movq	%rax, %rbx
.Ltmp1719:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,4), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x4(%r10,%rsi), %r10
    00000040: 	movl	(%rcx), %edi
    00000042: 	movl	(%r10), %r11d
    00000045: 	cmpl	%edi, %r11d
    00000048: 	jle	.Ltmp1720 # Offset: 72
    0000004a: 	movq	%rdx, %rax
    0000004d: 	movl	%r11d, %edi
    00000050: 	movq	%r10, %rcx
    00000053: 	addq	$0x1, %rdx
.Ltmp1720:
    00000057: 	addq	%rdx, %rdx
    0000005a: 	movl	%edi, (%rsi,%rbx,4)
    0000005d: 	cmpq	%rdx, %rbp
    00000060: 	jg	.Ltmp1721 # Offset: 96
    00000062: 	je	.Ltmp1722 # Offset: 98
.Ltmp1727:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp1723 # Offset: 120
    0000007a: 	jmp	.Ltmp1724 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1726:
    00000080: 	movl	%edx, (%rcx)
    00000082: 	leaq	-0x1(%rdi), %rdx
    00000086: 	movq	%rdx, %rax
    00000089: 	shrq	$0x3f, %rax
    0000008d: 	addq	%rdx, %rax
    00000090: 	sarq	%rax
    00000093: 	movq	%rax, %rdx
    00000096: 	movq	%rdi, %rax
    00000099: 	cmpq	%rdi, %r8
    0000009c: 	jge	.Ltmp1725 # Offset: 156
    0000009e: 	movq	%rdx, %rdi
.Ltmp1723:
    000000a1: 	leaq	(%rsi,%rdi,4), %r10
    000000a5: 	leaq	(%rsi,%rax,4), %rcx
    000000a9: 	movl	(%r10), %edx
    000000ac: 	cmpl	%r9d, %edx
    000000af: 	jl	.Ltmp1726 # Offset: 175
.Ltmp1724:
    000000b1: 	movl	%r9d, (%rcx)
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1725:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movl	%r9d, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1718:
    000000d0: 	leaq	(%rsi,%r8,4), %rcx
    000000d4: 	jne	.Ltmp1724 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1722:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,4), %rdx
    000000e8: 	movl	(%rdx), %edi
    000000ea: 	movl	%edi, (%rcx)
    000000ec: 	movq	%rdx, %rcx
    000000ef: 	jmp	.Ltmp1727 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPiiEEiEEiEEvlT_lT0_"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0xd2d0
  Size        : 0x23cd
  MaxSize     : 0x23d0
  Offset      : 0xd2d0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp1728:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1728 # Offset: 37
    00000027: 	subq	$0xe88, %rsp
    0000002e: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm2
    00000036: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm3
    0000003e: 	movl	$0x5f32, %r9d
    00000044: 	movq	"_ZL7gLabels/1"+56(%rip), %r13
    0000004b: 	movhlps	%xmm2, %xmm5
    0000004e: 	movq	%xmm3, %rbp
    00000053: 	movq	%xmm5, %rbx
    00000058: 	leaq	0x8(%rbx), %r12
    0000005c: 	movq	%r12, %r14
    0000005f: 	movq	%fs:0x28, %rax
    00000068: 	movq	%rax, 0x7e78(%rsp)
    00000070: 	xorl	%eax, %eax
    00000072: 	leaq	0xe0(%rsp), %rax
    0000007a: 	movb	$0x74, 0xe6(%rsp)
    00000082: 	movq	%rax, 0x70(%rsp)
    00000087: 	movq	%rax, 0xd0(%rsp)
    0000008f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000096: 	movl	$0x33746e69, 0xe0(%rsp)
    000000a1: 	movq	%rax, (%rsp)
    000000a5: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000ac: 	movw	%r9w, 0xe4(%rsp)
    000000b5: 	movq	$0x7, 0xd8(%rsp)
    000000c1: 	movb	$0x0, 0xe7(%rsp)
    000000c9: 	movq	%rax, 0x8(%rsp)
    000000ce: 	movaps	%xmm3, 0x10(%rsp)
    000000d3: 	movaps	%xmm2, 0x30(%rsp)
    000000d8: 	movq	%xmm5, 0x28(%rsp)
    000000de: 	movq	%xmm2, 0x20(%rsp)
    000000e4: 	cmpq	%r12, %rax
    000000e7: 	jbe	.Ltmp1729 # Offset: 231
.Ltmp1732:
    000000e9: 	movq	(%r14), %r15
    000000ec: 	leaq	0x200(%r15), %rbx
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1731:
    000000f8: 	movq	(%r15), %rdi
    000000fb: 	leaq	0x10(%r15), %rdx
    000000ff: 	cmpq	%rdx, %rdi
    00000102: 	je	.Ltmp1730 # Offset: 258
    00000108: 	movq	0x10(%r15), %rax
    0000010c: 	addq	$0x20, %r15
    00000110: 	leaq	0x1(%rax), %rsi
    00000114: 	callq	_ZdlPvm@PLT # Offset: 276
    00000119: 	cmpq	%rbx, %r15
    0000011c: 	jne	.Ltmp1731 # Offset: 284
    0000011e: 	addq	$0x8, %r14
    00000122: 	cmpq	%r14, 0x8(%rsp)
    00000127: 	ja	.Ltmp1732 # Offset: 295
.Ltmp1729:
    00000129: 	movq	0x28(%rsp), %rbx
    0000012e: 	cmpq	%rbx, 0x8(%rsp)
    00000133: 	jne	.Ltmp1733 # Offset: 307
    00000135: 	jmp	.Ltmp1734 # Offset: 309
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1736:
    00000140: 	movq	0x10(%rbp), %rax
    00000144: 	addq	$0x20, %rbp
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
.Ltmp1733:
    00000151: 	cmpq	%rbp, 0x20(%rsp)
    00000156: 	je	.Ltmp1735 # Offset: 342
.Ltmp1737:
    00000158: 	movq	(%rbp), %rdi
    0000015c: 	leaq	0x10(%rbp), %rax
    00000160: 	cmpq	%rax, %rdi
    00000163: 	jne	.Ltmp1736 # Offset: 355
    00000165: 	addq	$0x20, %rbp
    00000169: 	cmpq	0x20(%rsp), %rbp
    0000016e: 	jne	.Ltmp1737 # Offset: 366
    00000170: 	cmpq	%r13, (%rsp)
    00000174: 	je	.Ltmp1738 # Offset: 372
.Ltmp1740:
    00000176: 	movq	(%r13), %rdi
    0000017a: 	leaq	0x10(%r13), %rax
    0000017e: 	cmpq	%rax, %rdi
    00000181: 	je	.Ltmp1739 # Offset: 385
    00000183: 	movq	0x10(%r13), %rax
    00000187: 	leaq	0x1(%rax), %rsi
    0000018b: 	callq	_ZdlPvm@PLT # Offset: 395
.Ltmp1739:
    00000190: 	addq	$0x20, %r13
.Ltmp1735:
    00000194: 	cmpq	%r13, (%rsp)
    00000198: 	jne	.Ltmp1740 # Offset: 408
.Ltmp1738:
    0000019a: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001a1: 	leaq	0x8(%rax), %rbx
    000001a5: 	cmpq	%r12, %rbx
    000001a8: 	jbe	.Ltmp1741 # Offset: 424
.Ltmp1742:
    000001aa: 	movq	(%r12), %rdi
    000001ae: 	movl	$0x200, %esi
    000001b3: 	addq	$0x8, %r12
    000001b7: 	callq	_ZdlPvm@PLT # Offset: 439
    000001bc: 	cmpq	%r12, %rbx
    000001bf: 	ja	.Ltmp1742 # Offset: 447
.Ltmp1741:
    000001c1: 	movl	iterations(%rip), %eax
    000001c7: 	movdqa	0x10(%rsp), %xmm4
    000001cd: 	leaq	0x170(%rsp), %rbp
    000001d5: 	leaq	0x20b0(%rsp), %r15
    000001dd: 	movdqa	0x30(%rsp), %xmm5
    000001e3: 	movl	%eax, 0x7c(%rsp)
    000001e7: 	cvttsd2si	init_value(%rip), %eax
    000001ef: 	movaps	%xmm4, "_ZL7gLabels/1"+48(%rip)
    000001f6: 	movaps	%xmm5, "_ZL7gLabels/1"+64(%rip)
    000001fd: 	leal	0x1c8(%rax), %edx
    00000203: 	movd	%eax, %xmm6
    00000207: 	movq	%rbp, %rax
    0000020a: 	movslq	%edx, %rdx
    0000020d: 	pshufd	$0x0, %xmm6, %xmm0
    00000212: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
.Ltmp1743:
    00000219: 	movaps	%xmm0, (%rax)
    0000021c: 	addq	$0x10, %rax
    00000220: 	cmpq	%rax, %r15
    00000223: 	jne	.Ltmp1743 # Offset: 547
    00000225: 	leaq	0x5f30(%rsp), %r12
    0000022d: 	leaq	0x3ff0(%rsp), %rbx
    00000235: 	movq	%r12, 0x50(%rsp)
    0000023a: 	movq	%rbx, %rax
.Ltmp1744:
    0000023d: 	movaps	%xmm0, (%rax)
    00000240: 	addq	$0x10, %rax
    00000244: 	cmpq	%rax, %r12
    00000247: 	jne	.Ltmp1744 # Offset: 583
    00000249: 	leaq	0xd0(%rsp), %rax
    00000251: 	leaq	DATAat0x131e4(%rip), %rdx
    00000258: 	movq	%r12, %rdi
    0000025b: 	movq	%rax, %rsi
    0000025e: 	movq	%rax, 0x20(%rsp)
    00000263: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 611
    00000268: 	callq	clock@PLT # Offset: 616
    0000026d: 	movsd	DATAat0x13610(%rip), %xmm7
    00000275: 	xorl	%r13d, %r13d
    00000278: 	movl	iterations(%rip), %edx
    0000027e: 	movq	%rax, start_time(%rip)
    00000285: 	leaq	DATAat0x131bf(%rip), %r14
    0000028c: 	movsd	%xmm7, (%rsp)
    00000291: 	testl	%edx, %edx
    00000293: 	jle	.Ltmp1745 # Offset: 659
.Ltmp1748:
    00000295: 	movq	%rbp, %rax
    00000298: 	pxor	%xmm0, %xmm0
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp1746:
    000002a0: 	paddd	(%rax), %xmm0
    000002a4: 	addq	$0x10, %rax
    000002a8: 	cmpq	%rax, %r15
    000002ab: 	jne	.Ltmp1746 # Offset: 683
    000002ad: 	movdqa	%xmm0, %xmm1
    000002b1: 	psrldq	$0x8, %xmm1
    000002b6: 	paddd	%xmm1, %xmm0
    000002ba: 	movsd	(%rsp), %xmm1
    000002bf: 	mulsd	init_value(%rip), %xmm1
    000002c7: 	cvttsd2si	%xmm1, %ecx
    000002cb: 	movdqa	%xmm0, %xmm1
    000002cf: 	psrldq	$0x4, %xmm1
    000002d4: 	paddd	%xmm1, %xmm0
    000002d8: 	movd	%xmm0, %eax
    000002dc: 	cmpl	%eax, %ecx
    000002de: 	je	.Ltmp1747 # Offset: 734
    000002e0: 	movq	0x5f30(%rsp), %rdx
    000002e8: 	movq	%r14, %rsi
    000002eb: 	movl	$0x1, %edi
    000002f0: 	xorl	%eax, %eax
    000002f2: 	callq	__printf_chk@PLT # Offset: 754
    000002f7: 	movl	iterations(%rip), %edx
.Ltmp1747:
    000002fd: 	addl	$0x1, %r13d
    00000301: 	cmpl	%edx, %r13d
    00000304: 	jl	.Ltmp1748 # Offset: 772
.Ltmp1745:
    00000306: 	callq	clock@PLT # Offset: 774
    0000030b: 	pxor	%xmm0, %xmm0
    0000030f: 	movq	%r12, %rdi
    00000312: 	movq	%rax, end_time(%rip)
    00000319: 	subq	start_time(%rip), %rax
    00000320: 	cvtsi2sd	%rax, %xmm0
    00000325: 	divsd	DATAat0x13600(%rip), %xmm0
    0000032d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 813
    00000332: 	movq	0x5f30(%rsp), %rdi
    0000033a: 	leaq	0x5f40(%rsp), %r13
    00000342: 	cmpq	%r13, %rdi
    00000345: 	je	.Ltmp1749 # Offset: 837
    00000347: 	movq	0x5f40(%rsp), %rax
    0000034f: 	leaq	0x1(%rax), %rsi
    00000353: 	callq	_ZdlPvm@PLT # Offset: 851
.Ltmp1749:
    00000358: 	movq	0x20(%rsp), %rsi
    0000035d: 	leaq	DATAat0x13200(%rip), %rdx
    00000364: 	movq	%r12, %rdi
    00000367: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 871
    0000036c: 	callq	clock@PLT # Offset: 876
    00000371: 	movsd	DATAat0x13610(%rip), %xmm4
    00000379: 	movl	iterations(%rip), %edx
    0000037f: 	xorl	%r14d, %r14d
    00000382: 	movq	%rax, start_time(%rip)
    00000389: 	movsd	%xmm4, (%rsp)
    0000038e: 	testl	%edx, %edx
    00000390: 	jle	.Ltmp1750 # Offset: 912
.Ltmp1753:
    00000392: 	movq	%rbx, %rax
    00000395: 	pxor	%xmm0, %xmm0
    00000399: 	nopl	(%rax) # Size: 7
.Ltmp1751:
    000003a0: 	paddd	(%rax), %xmm0
    000003a4: 	addq	$0x10, %rax
    000003a8: 	cmpq	%rax, %r12
    000003ab: 	jne	.Ltmp1751 # Offset: 939
    000003ad: 	movdqa	%xmm0, %xmm1
    000003b1: 	psrldq	$0x8, %xmm1
    000003b6: 	paddd	%xmm1, %xmm0
    000003ba: 	movsd	(%rsp), %xmm1
    000003bf: 	mulsd	init_value(%rip), %xmm1
    000003c7: 	cvttsd2si	%xmm1, %ecx
    000003cb: 	movdqa	%xmm0, %xmm1
    000003cf: 	psrldq	$0x4, %xmm1
    000003d4: 	paddd	%xmm1, %xmm0
    000003d8: 	movd	%xmm0, %eax
    000003dc: 	cmpl	%eax, %ecx
    000003de: 	je	.Ltmp1752 # Offset: 990
    000003e0: 	movq	0x5f30(%rsp), %rdx
    000003e8: 	leaq	DATAat0x131bf(%rip), %rsi
    000003ef: 	movl	$0x1, %edi
    000003f4: 	xorl	%eax, %eax
    000003f6: 	callq	__printf_chk@PLT # Offset: 1014
    000003fb: 	movl	iterations(%rip), %edx
.Ltmp1752:
    00000401: 	addl	$0x1, %r14d
    00000405: 	cmpl	%edx, %r14d
    00000408: 	jl	.Ltmp1753 # Offset: 1032
.Ltmp1750:
    0000040a: 	callq	clock@PLT # Offset: 1034
    0000040f: 	pxor	%xmm0, %xmm0
    00000413: 	movq	%r12, %rdi
    00000416: 	movq	%rax, end_time(%rip)
    0000041d: 	subq	start_time(%rip), %rax
    00000424: 	cvtsi2sd	%rax, %xmm0
    00000429: 	divsd	DATAat0x13600(%rip), %xmm0
    00000431: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1073
    00000436: 	movq	0x5f30(%rsp), %rdi
    0000043e: 	cmpq	%r13, %rdi
    00000441: 	je	.Ltmp1754 # Offset: 1089
    00000443: 	movq	0x5f40(%rsp), %rax
    0000044b: 	leaq	0x1(%rax), %rsi
    0000044f: 	callq	_ZdlPvm@PLT # Offset: 1103
.Ltmp1754:
    00000454: 	movq	0xd0(%rsp), %rax
    0000045c: 	movq	0xd8(%rsp), %r14
    00000464: 	movq	%r13, 0x5f30(%rsp)
    0000046c: 	movq	%rax, (%rsp)
    00000470: 	movq	%rax, %rdi
    00000473: 	addq	%r14, %rax
    00000476: 	je	.Ltmp1755 # Offset: 1142
    00000478: 	testq	%rdi, %rdi
    0000047b: 	je	.Ltmp1756 # Offset: 1147
.Ltmp1755:
    00000481: 	movq	%r14, 0xc0(%rsp)
    00000489: 	cmpq	$0xf, %r14
    0000048d: 	ja	.Ltmp1757 # Offset: 1165
    00000493: 	cmpq	$0x1, %r14
    00000497: 	jne	.Ltmp1758 # Offset: 1175
    00000499: 	movq	(%rsp), %rax
    0000049d: 	movzbl	(%rax), %eax
    000004a0: 	movb	%al, 0x5f40(%rsp)
    000004a7: 	movq	%r13, %rax
    000004aa: 	jmp	.Ltmp1759 # Offset: 1194
.Ltmp1760:
    000004ac: 	addq	$0x20, %rbp
.Ltmp1734:
    000004b0: 	cmpq	%rbp, (%rsp)
    000004b4: 	je	.Ltmp1738 # Offset: 1204
.Ltmp1761:
    000004ba: 	movq	(%rbp), %rdi
    000004be: 	leaq	0x10(%rbp), %rax
    000004c2: 	cmpq	%rax, %rdi
    000004c5: 	je	.Ltmp1760 # Offset: 1221
    000004c7: 	movq	0x10(%rbp), %rax
    000004cb: 	addq	$0x20, %rbp
    000004cf: 	leaq	0x1(%rax), %rsi
    000004d3: 	callq	_ZdlPvm@PLT # Offset: 1235
    000004d8: 	cmpq	%rbp, (%rsp)
    000004dc: 	jne	.Ltmp1761 # Offset: 1244
    000004de: 	jmp	.Ltmp1738 # Offset: 1246
    000004e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1730:
    000004e8: 	addq	$0x20, %r15
    000004ec: 	cmpq	%rbx, %r15
    000004ef: 	jne	.Ltmp1731 # Offset: 1263
    000004f5: 	addq	$0x8, %r14
    000004f9: 	cmpq	%r14, 0x8(%rsp)
    000004fe: 	ja	.Ltmp1732 # Offset: 1278
    00000504: 	jmp	.Ltmp1729 # Offset: 1284
.Ltmp1758:
    00000509: 	testq	%r14, %r14
    0000050c: 	jne	.Ltmp1762 # Offset: 1292
    00000512: 	movq	%r13, %rax
.Ltmp1759:
    00000515: 	movq	%r14, 0x5f38(%rsp)
    0000051d: 	movb	$0x0, (%rax,%r14)
    00000522: 	movabsq	$0x3fffffffffffffff, %rax
    0000052c: 	subq	0x5f38(%rsp), %rax
    00000534: 	cmpq	$0x22, %rax
    00000538: 	jbe	.Ltmp1763 # Offset: 1336
    0000053e: 	movl	$0x23, %edx
    00000543: 	leaq	DATAat0x132d0(%rip), %rsi
    0000054a: 	movq	%r12, %rdi
    0000054d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1357
    00000552: 	callq	clock@PLT # Offset: 1362
    00000557: 	movsd	DATAat0x13610(%rip), %xmm5
    0000055f: 	movl	iterations(%rip), %edx
    00000565: 	xorl	%r14d, %r14d
    00000568: 	movq	%rax, start_time(%rip)
    0000056f: 	movsd	%xmm5, (%rsp)
    00000574: 	testl	%edx, %edx
    00000576: 	jle	.Ltmp1764 # Offset: 1398
.Ltmp1767:
    00000578: 	movq	%rbp, %rax
    0000057b: 	pxor	%xmm0, %xmm0
    0000057f: 	nop # Size: 1
.Ltmp1765:
    00000580: 	paddd	(%rax), %xmm0
    00000584: 	addq	$0x10, %rax
    00000588: 	cmpq	%rax, %r15
    0000058b: 	jne	.Ltmp1765 # Offset: 1419
    0000058d: 	movdqa	%xmm0, %xmm1
    00000591: 	psrldq	$0x8, %xmm1
    00000596: 	paddd	%xmm1, %xmm0
    0000059a: 	movsd	(%rsp), %xmm1
    0000059f: 	mulsd	init_value(%rip), %xmm1
    000005a7: 	cvttsd2si	%xmm1, %ecx
    000005ab: 	movdqa	%xmm0, %xmm1
    000005af: 	psrldq	$0x4, %xmm1
    000005b4: 	paddd	%xmm1, %xmm0
    000005b8: 	movd	%xmm0, %eax
    000005bc: 	cmpl	%eax, %ecx
    000005be: 	je	.Ltmp1766 # Offset: 1470
    000005c0: 	movq	0x5f30(%rsp), %rdx
    000005c8: 	leaq	DATAat0x131bf(%rip), %rsi
    000005cf: 	movl	$0x1, %edi
    000005d4: 	xorl	%eax, %eax
    000005d6: 	callq	__printf_chk@PLT # Offset: 1494
    000005db: 	movl	iterations(%rip), %edx
.Ltmp1766:
    000005e1: 	addl	$0x1, %r14d
    000005e5: 	cmpl	%edx, %r14d
    000005e8: 	jl	.Ltmp1767 # Offset: 1512
.Ltmp1764:
    000005ea: 	callq	clock@PLT # Offset: 1514
    000005ef: 	pxor	%xmm0, %xmm0
    000005f3: 	movq	%r12, %rdi
    000005f6: 	movq	%rax, end_time(%rip)
    000005fd: 	subq	start_time(%rip), %rax
    00000604: 	cvtsi2sd	%rax, %xmm0
    00000609: 	divsd	DATAat0x13600(%rip), %xmm0
    00000611: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1553
    00000616: 	movq	0x5f30(%rsp), %rdi
    0000061e: 	cmpq	%r13, %rdi
    00000621: 	je	.Ltmp1768 # Offset: 1569
    00000623: 	movq	0x5f40(%rsp), %rax
    0000062b: 	leaq	0x1(%rax), %rsi
    0000062f: 	callq	_ZdlPvm@PLT # Offset: 1583
.Ltmp1768:
    00000634: 	movq	0x20(%rsp), %rsi
    00000639: 	leaq	DATAat0x132f8(%rip), %rdx
    00000640: 	movq	%r12, %rdi
    00000643: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1603
    00000648: 	callq	clock@PLT # Offset: 1608
    0000064d: 	movsd	DATAat0x13610(%rip), %xmm6
    00000655: 	movl	iterations(%rip), %edx
    0000065b: 	xorl	%r14d, %r14d
    0000065e: 	movq	%rax, start_time(%rip)
    00000665: 	movsd	%xmm6, (%rsp)
    0000066a: 	testl	%edx, %edx
    0000066c: 	jle	.Ltmp1769 # Offset: 1644
.Ltmp1772:
    0000066e: 	movq	%rbx, %rax
    00000671: 	pxor	%xmm0, %xmm0
    00000675: 	nopl	(%rax) # Size: 3
.Ltmp1770:
    00000678: 	paddd	(%rax), %xmm0
    0000067c: 	addq	$0x10, %rax
    00000680: 	cmpq	%rax, %r12
    00000683: 	jne	.Ltmp1770 # Offset: 1667
    00000685: 	movdqa	%xmm0, %xmm1
    00000689: 	psrldq	$0x8, %xmm1
    0000068e: 	paddd	%xmm1, %xmm0
    00000692: 	movsd	(%rsp), %xmm1
    00000697: 	mulsd	init_value(%rip), %xmm1
    0000069f: 	cvttsd2si	%xmm1, %ecx
    000006a3: 	movdqa	%xmm0, %xmm1
    000006a7: 	psrldq	$0x4, %xmm1
    000006ac: 	paddd	%xmm1, %xmm0
    000006b0: 	movd	%xmm0, %eax
    000006b4: 	cmpl	%eax, %ecx
    000006b6: 	je	.Ltmp1771 # Offset: 1718
    000006b8: 	movq	0x5f30(%rsp), %rdx
    000006c0: 	leaq	DATAat0x131bf(%rip), %rsi
    000006c7: 	movl	$0x1, %edi
    000006cc: 	xorl	%eax, %eax
    000006ce: 	callq	__printf_chk@PLT # Offset: 1742
    000006d3: 	movl	iterations(%rip), %edx
.Ltmp1771:
    000006d9: 	addl	$0x1, %r14d
    000006dd: 	cmpl	%edx, %r14d
    000006e0: 	jl	.Ltmp1772 # Offset: 1760
.Ltmp1769:
    000006e2: 	callq	clock@PLT # Offset: 1762
    000006e7: 	pxor	%xmm0, %xmm0
    000006eb: 	movq	%r12, %rdi
    000006ee: 	movq	%rax, end_time(%rip)
    000006f5: 	subq	start_time(%rip), %rax
    000006fc: 	cvtsi2sd	%rax, %xmm0
    00000701: 	divsd	DATAat0x13600(%rip), %xmm0
    00000709: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1801
    0000070e: 	movq	0x5f30(%rsp), %rdi
    00000716: 	cmpq	%r13, %rdi
    00000719: 	je	.Ltmp1773 # Offset: 1817
    0000071b: 	movq	0x5f40(%rsp), %rax
    00000723: 	leaq	0x1(%rax), %rsi
    00000727: 	callq	_ZdlPvm@PLT # Offset: 1831
.Ltmp1773:
    0000072c: 	movq	0x20(%rsp), %rsi
    00000731: 	leaq	DATAat0x13328(%rip), %rdx
    00000738: 	movq	%r12, %rdi
    0000073b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1851
    00000740: 	callq	clock@PLT # Offset: 1856
    00000745: 	movsd	DATAat0x13610(%rip), %xmm7
    0000074d: 	movl	iterations(%rip), %edx
    00000753: 	xorl	%r14d, %r14d
    00000756: 	movq	%rax, start_time(%rip)
    0000075d: 	movsd	%xmm7, (%rsp)
    00000762: 	testl	%edx, %edx
    00000764: 	jle	.Ltmp1774 # Offset: 1892
.Ltmp1777:
    00000766: 	movq	%rbx, %rax
    00000769: 	pxor	%xmm0, %xmm0
    0000076d: 	nopl	(%rax) # Size: 3
.Ltmp1775:
    00000770: 	paddd	(%rax), %xmm0
    00000774: 	addq	$0x10, %rax
    00000778: 	cmpq	%rax, %r12
    0000077b: 	jne	.Ltmp1775 # Offset: 1915
    0000077d: 	movdqa	%xmm0, %xmm1
    00000781: 	psrldq	$0x8, %xmm1
    00000786: 	paddd	%xmm1, %xmm0
    0000078a: 	movsd	(%rsp), %xmm1
    0000078f: 	mulsd	init_value(%rip), %xmm1
    00000797: 	cvttsd2si	%xmm1, %ecx
    0000079b: 	movdqa	%xmm0, %xmm1
    0000079f: 	psrldq	$0x4, %xmm1
    000007a4: 	paddd	%xmm1, %xmm0
    000007a8: 	movd	%xmm0, %eax
    000007ac: 	cmpl	%eax, %ecx
    000007ae: 	je	.Ltmp1776 # Offset: 1966
    000007b0: 	movq	0x5f30(%rsp), %rdx
    000007b8: 	leaq	DATAat0x131bf(%rip), %rsi
    000007bf: 	movl	$0x1, %edi
    000007c4: 	xorl	%eax, %eax
    000007c6: 	callq	__printf_chk@PLT # Offset: 1990
    000007cb: 	movl	iterations(%rip), %edx
.Ltmp1776:
    000007d1: 	addl	$0x1, %r14d
    000007d5: 	cmpl	%edx, %r14d
    000007d8: 	jl	.Ltmp1777 # Offset: 2008
.Ltmp1774:
    000007da: 	callq	clock@PLT # Offset: 2010
    000007df: 	pxor	%xmm0, %xmm0
    000007e3: 	movq	%r12, %rdi
    000007e6: 	movq	%rax, end_time(%rip)
    000007ed: 	subq	start_time(%rip), %rax
    000007f4: 	cvtsi2sd	%rax, %xmm0
    000007f9: 	divsd	DATAat0x13600(%rip), %xmm0
    00000801: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2049
    00000806: 	movq	0x5f30(%rsp), %rdi
    0000080e: 	cmpq	%r13, %rdi
    00000811: 	je	.Ltmp1778 # Offset: 2065
    00000813: 	movq	0x5f40(%rsp), %rax
    0000081b: 	leaq	0x1(%rax), %rsi
    0000081f: 	callq	_ZdlPvm@PLT # Offset: 2079
.Ltmp1778:
    00000824: 	movq	0x20(%rsp), %rsi
    00000829: 	leaq	DATAat0x13358(%rip), %rdx
    00000830: 	movq	%r12, %rdi
    00000833: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2099
    00000838: 	callq	clock@PLT # Offset: 2104
    0000083d: 	movsd	DATAat0x13610(%rip), %xmm4
    00000845: 	movl	iterations(%rip), %edx
    0000084b: 	xorl	%r14d, %r14d
    0000084e: 	movq	%rax, start_time(%rip)
    00000855: 	movsd	%xmm4, (%rsp)
    0000085a: 	testl	%edx, %edx
    0000085c: 	jle	.Ltmp1779 # Offset: 2140
.Ltmp1782:
    0000085e: 	movq	%rbx, %rax
    00000861: 	pxor	%xmm0, %xmm0
    00000865: 	nopl	(%rax) # Size: 3
.Ltmp1780:
    00000868: 	paddd	(%rax), %xmm0
    0000086c: 	addq	$0x10, %rax
    00000870: 	cmpq	%rax, %r12
    00000873: 	jne	.Ltmp1780 # Offset: 2163
    00000875: 	movdqa	%xmm0, %xmm1
    00000879: 	psrldq	$0x8, %xmm1
    0000087e: 	paddd	%xmm1, %xmm0
    00000882: 	movsd	(%rsp), %xmm1
    00000887: 	mulsd	init_value(%rip), %xmm1
    0000088f: 	cvttsd2si	%xmm1, %ecx
    00000893: 	movdqa	%xmm0, %xmm1
    00000897: 	psrldq	$0x4, %xmm1
    0000089c: 	paddd	%xmm1, %xmm0
    000008a0: 	movd	%xmm0, %eax
    000008a4: 	cmpl	%eax, %ecx
    000008a6: 	je	.Ltmp1781 # Offset: 2214
    000008a8: 	movq	0x5f30(%rsp), %rdx
    000008b0: 	leaq	DATAat0x131bf(%rip), %rsi
    000008b7: 	movl	$0x1, %edi
    000008bc: 	xorl	%eax, %eax
    000008be: 	callq	__printf_chk@PLT # Offset: 2238
    000008c3: 	movl	iterations(%rip), %edx
.Ltmp1781:
    000008c9: 	addl	$0x1, %r14d
    000008cd: 	cmpl	%edx, %r14d
    000008d0: 	jl	.Ltmp1782 # Offset: 2256
.Ltmp1779:
    000008d2: 	callq	clock@PLT # Offset: 2258
    000008d7: 	pxor	%xmm0, %xmm0
    000008db: 	movq	%r12, %rdi
    000008de: 	movq	%rax, end_time(%rip)
    000008e5: 	subq	start_time(%rip), %rax
    000008ec: 	cvtsi2sd	%rax, %xmm0
    000008f1: 	divsd	DATAat0x13600(%rip), %xmm0
    000008f9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2297
    000008fe: 	movq	0x5f30(%rsp), %rdi
    00000906: 	cmpq	%r13, %rdi
    00000909: 	je	.Ltmp1783 # Offset: 2313
    0000090b: 	movq	0x5f40(%rsp), %rax
    00000913: 	leaq	0x1(%rax), %rsi
    00000917: 	callq	_ZdlPvm@PLT # Offset: 2327
.Ltmp1783:
    0000091c: 	movq	0x20(%rsp), %rsi
    00000921: 	leaq	0xf0(%rsp), %rdi
    00000929: 	leaq	DATAat0x1321b(%rip), %rdx
    00000930: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2352
    00000935: 	movl	iterations(%rip), %edx
    0000093b: 	movl	$0x1, %r8d
    00000941: 	movl	$0x1, %ecx
    00000946: 	movq	0xf0(%rsp), %rdi
    0000094e: 	movl	$0x7d0, %esi
    00000953: 	callq	_Z9summarizePKciiii # Offset: 2387
    00000958: 	movslq	iterations(%rip), %rax
    0000095f: 	movabsq	$0x5851f42d4c957f2d, %rdi
    00000969: 	movabsq	$0x14057b7ef767814f, %rsi
    00000973: 	movq	%rax, %rdx
    00000976: 	imulq	$0x10624dd3, %rax, %rax
    0000097d: 	sarl	$0x1f, %edx
    00000980: 	sarq	$0x27, %rax
    00000984: 	subl	%edx, %eax
    00000986: 	movq	%r15, %rdx
    00000989: 	movl	%eax, iterations(%rip)
.Ltmp1784:
    0000098f: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000996: 	addq	$0x4, %rdx
    0000099a: 	imulq	%rdi, %rax
    0000099e: 	addq	%rsi, %rax
    000009a1: 	movq	%rax, %rcx
    000009a4: 	movq	%rax, %r8
    000009a7: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000009ae: 	shrq	$0x14, %rcx
    000009b2: 	shlq	$0x17, %r8
    000009b6: 	xorq	%r8, %rcx
    000009b9: 	xorq	%rcx, %rax
    000009bc: 	sarq	$0x3, %rax
    000009c0: 	movl	%eax, -0x4(%rdx)
    000009c3: 	cmpq	%rbx, %rdx
    000009c6: 	jne	.Ltmp1784 # Offset: 2502
    000009c8: 	movl	$0x3e8, %ecx
    000009cd: 	movq	%r12, %rdi
    000009d0: 	movq	%r15, %rsi
    000009d3: 	rep		movsq	(%rsi), %es:(%rdi)
    000009d6: 	leaq	0x150(%rsp), %r13
    000009de: 	movq	0x20(%rsp), %rsi
    000009e3: 	leaq	DATAat0x13388(%rip), %rdx
    000009ea: 	movq	%r13, %rdi
    000009ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2541
    000009f2: 	callq	clock@PLT # Offset: 2546
    000009f7: 	movl	iterations(%rip), %r8d
    000009fe: 	xorl	%r14d, %r14d
    00000a01: 	movq	%rax, start_time(%rip)
    00000a08: 	leaq	0x174(%rsp), %rax
    00000a10: 	movq	%rax, 0x8(%rsp)
    00000a15: 	testl	%r8d, %r8d
    00000a18: 	jle	.Ltmp1785 # Offset: 2584
.Ltmp1791:
    00000a1a: 	movl	$0x3e8, %ecx
    00000a1f: 	movq	%rbp, %rdi
    00000a22: 	movq	%r15, %rsi
    00000a25: 	rep		movsq	(%rsi), %es:(%rdi)
    00000a28: 	movq	0x8(%rsp), %rdi
    00000a2d: 	nopl	(%rax) # Size: 3
.Ltmp1788:
    00000a30: 	movl	(%rdi), %esi
    00000a32: 	movq	%rdi, %rax
    00000a35: 	nopl	(%rax) # Size: 3
.Ltmp1787:
    00000a38: 	movq	%rax, %rdx
    00000a3b: 	leaq	-0x4(%rax), %rax
    00000a3f: 	movl	-0x4(%rdx), %ecx
    00000a42: 	cmpl	%ecx, %esi
    00000a44: 	jge	.Ltmp1786 # Offset: 2628
    00000a46: 	movl	%ecx, 0x4(%rax)
    00000a49: 	cmpq	%rbp, %rax
    00000a4c: 	jne	.Ltmp1787 # Offset: 2636
    00000a4e: 	movq	%rbp, %rdx
.Ltmp1786:
    00000a51: 	addq	$0x4, %rdi
    00000a55: 	movl	%esi, (%rdx)
    00000a57: 	cmpq	%r15, %rdi
    00000a5a: 	jne	.Ltmp1788 # Offset: 2650
    00000a5c: 	movl	0x170(%rsp), %edx
    00000a63: 	movq	0x8(%rsp), %rax
    00000a68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1790:
    00000a70: 	addq	$0x4, %rax
    00000a74: 	movl	%edx, %ecx
    00000a76: 	movl	-0x4(%rax), %edx
    00000a79: 	cmpl	%ecx, %edx
    00000a7b: 	jl	.Ltmp1789 # Offset: 2683
    00000a81: 	cmpq	%r15, %rax
    00000a84: 	jne	.Ltmp1790 # Offset: 2692
    00000a86: 	addl	$0x1, %r14d
    00000a8a: 	cmpl	%r8d, %r14d
    00000a8d: 	jl	.Ltmp1791 # Offset: 2701
.Ltmp1785:
    00000a8f: 	callq	clock@PLT # Offset: 2703
    00000a94: 	pxor	%xmm0, %xmm0
    00000a98: 	movq	%r13, %rdi
    00000a9b: 	movq	%rax, end_time(%rip)
    00000aa2: 	subq	start_time(%rip), %rax
    00000aa9: 	cvtsi2sd	%rax, %xmm0
    00000aae: 	divsd	DATAat0x13600(%rip), %xmm0
    00000ab6: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2742
    00000abb: 	movq	0x150(%rsp), %rdi
    00000ac3: 	leaq	0x160(%rsp), %rax
    00000acb: 	movq	%rax, (%rsp)
    00000acf: 	cmpq	%rax, %rdi
    00000ad2: 	je	.Ltmp1792 # Offset: 2770
    00000ad4: 	movq	0x160(%rsp), %rax
    00000adc: 	leaq	0x1(%rax), %rsi
    00000ae0: 	callq	_ZdlPvm@PLT # Offset: 2784
.Ltmp1792:
    00000ae5: 	movq	0x20(%rsp), %rsi
    00000aea: 	leaq	DATAat0x133a8(%rip), %rdx
    00000af1: 	movq	%r13, %rdi
    00000af4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2804
    00000af9: 	callq	clock@PLT # Offset: 2809
    00000afe: 	movl	iterations(%rip), %r8d
    00000b05: 	xorl	%r14d, %r14d
    00000b08: 	movq	%rax, start_time(%rip)
    00000b0f: 	leaq	0x3ff4(%rsp), %rax
    00000b17: 	movq	%rax, 0x8(%rsp)
    00000b1c: 	testl	%r8d, %r8d
    00000b1f: 	jle	.Ltmp1793 # Offset: 2847
.Ltmp1799:
    00000b21: 	movl	$0x3e8, %ecx
    00000b26: 	movq	%rbx, %rdi
    00000b29: 	movq	%r12, %rsi
    00000b2c: 	rep		movsq	(%rsi), %es:(%rdi)
    00000b2f: 	movq	0x8(%rsp), %rdi
    00000b34: 	nopl	(%rax) # Size: 4
.Ltmp1796:
    00000b38: 	movl	(%rdi), %esi
    00000b3a: 	movq	%rdi, %rax
    00000b3d: 	nopl	(%rax) # Size: 3
.Ltmp1795:
    00000b40: 	movq	%rax, %rdx
    00000b43: 	leaq	-0x4(%rax), %rax
    00000b47: 	movl	-0x4(%rdx), %ecx
    00000b4a: 	cmpl	%ecx, %esi
    00000b4c: 	jge	.Ltmp1794 # Offset: 2892
    00000b4e: 	movl	%ecx, 0x4(%rax)
    00000b51: 	cmpq	%rbx, %rax
    00000b54: 	jne	.Ltmp1795 # Offset: 2900
    00000b56: 	movq	%rbx, %rdx
.Ltmp1794:
    00000b59: 	addq	$0x4, %rdi
    00000b5d: 	movl	%esi, (%rdx)
    00000b5f: 	cmpq	%r12, %rdi
    00000b62: 	jne	.Ltmp1796 # Offset: 2914
    00000b64: 	movl	0x3ff0(%rsp), %edx
    00000b6b: 	movq	0x8(%rsp), %rax
.Ltmp1798:
    00000b70: 	addq	$0x4, %rax
    00000b74: 	movl	%edx, %ecx
    00000b76: 	movl	-0x4(%rax), %edx
    00000b79: 	cmpl	%ecx, %edx
    00000b7b: 	jl	.Ltmp1797 # Offset: 2939
    00000b81: 	cmpq	%r12, %rax
    00000b84: 	jne	.Ltmp1798 # Offset: 2948
    00000b86: 	addl	$0x1, %r14d
    00000b8a: 	cmpl	%r8d, %r14d
    00000b8d: 	jl	.Ltmp1799 # Offset: 2957
.Ltmp1793:
    00000b8f: 	callq	clock@PLT # Offset: 2959
    00000b94: 	pxor	%xmm0, %xmm0
    00000b98: 	movq	%r13, %rdi
    00000b9b: 	movq	%rax, end_time(%rip)
    00000ba2: 	subq	start_time(%rip), %rax
    00000ba9: 	cvtsi2sd	%rax, %xmm0
    00000bae: 	divsd	DATAat0x13600(%rip), %xmm0
    00000bb6: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2998
    00000bbb: 	movq	0x150(%rsp), %rdi
    00000bc3: 	cmpq	(%rsp), %rdi
    00000bc7: 	je	.Ltmp1800 # Offset: 3015
    00000bc9: 	movq	0x160(%rsp), %rax
    00000bd1: 	leaq	0x1(%rax), %rsi
    00000bd5: 	callq	_ZdlPvm@PLT # Offset: 3029
.Ltmp1800:
    00000bda: 	movq	0x20(%rsp), %rsi
    00000bdf: 	leaq	DATAat0x133c8(%rip), %rdx
    00000be6: 	movq	%r13, %rdi
    00000be9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3049
    00000bee: 	leaq	0xa0(%rsp), %rax
    00000bf6: 	leaq	0xc0(%rsp), %rcx
    00000bfe: 	movq	%r13, %r8
    00000c01: 	movq	%r15, 0xc8(%rsp)
    00000c09: 	leaq	0xb0(%rsp), %rdx
    00000c11: 	movq	%rax, %rsi
    00000c14: 	leaq	0x90(%rsp), %rdi
    00000c1c: 	movq	%rbp, 0xb8(%rsp)
    00000c24: 	movq	%rbx, 0xa8(%rsp)
    00000c2c: 	movq	%r15, 0x98(%rsp)
    00000c34: 	movq	%rcx, 0x10(%rsp)
    00000c39: 	movq	%rdx, 0x48(%rsp)
    00000c3e: 	movq	%rax, 0x40(%rsp)
    00000c43: 	movq	%rdi, 0x30(%rsp)
    00000c48: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3144
    00000c4d: 	movq	0x150(%rsp), %rdi
    00000c55: 	cmpq	(%rsp), %rdi
    00000c59: 	je	.Ltmp1801 # Offset: 3161
    00000c5b: 	movq	0x160(%rsp), %rax
    00000c63: 	leaq	0x1(%rax), %rsi
    00000c67: 	callq	_ZdlPvm@PLT # Offset: 3175
.Ltmp1801:
    00000c6c: 	movq	0x20(%rsp), %rsi
    00000c71: 	leaq	DATAat0x133f0(%rip), %rdx
    00000c78: 	movq	%r13, %rdi
    00000c7b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3195
    00000c80: 	movq	0x10(%rsp), %rcx
    00000c85: 	movq	0x48(%rsp), %rdx
    00000c8a: 	movq	%r13, %r8
    00000c8d: 	leaq	0x7e70(%rsp), %rax
    00000c95: 	movq	0x40(%rsp), %rsi
    00000c9a: 	movq	0x30(%rsp), %rdi
    00000c9f: 	movq	%r12, 0xc8(%rsp)
    00000ca7: 	movq	%rbx, 0xb8(%rsp)
    00000caf: 	movq	%rax, 0x68(%rsp)
    00000cb4: 	movq	%rax, 0xa8(%rsp)
    00000cbc: 	movq	%r12, 0x98(%rsp)
    00000cc4: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3268
    00000cc9: 	movq	0x150(%rsp), %rdi
    00000cd1: 	cmpq	(%rsp), %rdi
    00000cd5: 	je	.Ltmp1802 # Offset: 3285
    00000cd7: 	movq	0x160(%rsp), %rax
    00000cdf: 	leaq	0x1(%rax), %rsi
    00000ce3: 	callq	_ZdlPvm@PLT # Offset: 3299
.Ltmp1802:
    00000ce8: 	movq	0x20(%rsp), %rsi
    00000ced: 	leaq	DATAat0x13420(%rip), %rdx
    00000cf4: 	movq	%r13, %rdi
    00000cf7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3319
    00000cfc: 	movq	0x68(%rsp), %rax
    00000d01: 	movq	0x10(%rsp), %rcx
    00000d06: 	movq	%r13, %r8
    00000d09: 	movq	%r12, 0xc8(%rsp)
    00000d11: 	movq	0x48(%rsp), %rdx
    00000d16: 	movq	0x40(%rsp), %rsi
    00000d1b: 	movq	%rbx, 0xb8(%rsp)
    00000d23: 	movq	0x30(%rsp), %rdi
    00000d28: 	movq	%rax, 0xa8(%rsp)
    00000d30: 	movq	%r12, 0x98(%rsp)
    00000d38: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3384
    00000d3d: 	movq	0x150(%rsp), %rdi
    00000d45: 	cmpq	(%rsp), %rdi
    00000d49: 	je	.Ltmp1803 # Offset: 3401
    00000d4b: 	movq	0x160(%rsp), %rax
    00000d53: 	leaq	0x1(%rax), %rsi
    00000d57: 	callq	_ZdlPvm@PLT # Offset: 3415
.Ltmp1803:
    00000d5c: 	movq	0x20(%rsp), %rsi
    00000d61: 	leaq	DATAat0x13450(%rip), %rdx
    00000d68: 	movq	%r13, %rdi
    00000d6b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3435
    00000d70: 	callq	clock@PLT # Offset: 3440
    00000d75: 	movl	iterations(%rip), %r8d
    00000d7c: 	xorl	%r14d, %r14d
    00000d7f: 	movq	%rax, start_time(%rip)
    00000d86: 	leaq	0x3ff4(%rsp), %rax
    00000d8e: 	movq	%rax, 0x8(%rsp)
    00000d93: 	testl	%r8d, %r8d
    00000d96: 	jle	.Ltmp1804 # Offset: 3478
.Ltmp1812:
    00000d98: 	movl	$0x3e8, %ecx
    00000d9d: 	movq	%rbx, %rdi
    00000da0: 	movq	%r12, %rsi
    00000da3: 	rep		movsq	(%rsi), %es:(%rdi)
    00000da6: 	movq	0x8(%rsp), %rsi
    00000dab: 	movq	%rsi, %rdi
    00000dae: 	nop # Size: 2
.Ltmp1809:
    00000db0: 	movl	(%rsi), %ecx
    00000db2: 	cmpq	%rbx, %rsi
    00000db5: 	je	.Ltmp1805 # Offset: 3509
    00000dbb: 	movq	%rsi, %rax
    00000dbe: 	jmp	.Ltmp1806 # Offset: 3518
.Ltmp1808:
    00000dc0: 	movl	%edx, (%rax)
    00000dc2: 	subq	$0x4, %rax
    00000dc6: 	cmpq	%rax, %rbx
    00000dc9: 	je	.Ltmp1807 # Offset: 3529
.Ltmp1806:
    00000dcb: 	movl	-0x4(%rax), %edx
    00000dce: 	cmpl	%edx, %ecx
    00000dd0: 	jl	.Ltmp1808 # Offset: 3536
.Ltmp1807:
    00000dd2: 	addq	$0x4, %rsi
    00000dd6: 	movl	%ecx, (%rax)
    00000dd8: 	cmpq	%rsi, %r12
    00000ddb: 	jne	.Ltmp1809 # Offset: 3547
    00000ddd: 	movl	0x3ff0(%rsp), %eax
    00000de4: 	nopl	(%rax) # Size: 4
.Ltmp1811:
    00000de8: 	movl	%eax, %edx
    00000dea: 	movl	(%rdi), %eax
    00000dec: 	cmpl	%edx, %eax
    00000dee: 	jl	.Ltmp1810 # Offset: 3566
    00000df4: 	addq	$0x4, %rdi
    00000df8: 	cmpq	%rdi, %r12
    00000dfb: 	jne	.Ltmp1811 # Offset: 3579
    00000dfd: 	movl	%r14d, %eax
    00000e00: 	addl	$0x1, %eax
    00000e03: 	movl	%eax, %r14d
    00000e06: 	cmpl	%r8d, %eax
    00000e09: 	jl	.Ltmp1812 # Offset: 3593
.Ltmp1804:
    00000e0b: 	callq	clock@PLT # Offset: 3595
    00000e10: 	pxor	%xmm0, %xmm0
    00000e14: 	movq	%r13, %rdi
    00000e17: 	movq	%rax, end_time(%rip)
    00000e1e: 	subq	start_time(%rip), %rax
    00000e25: 	cvtsi2sd	%rax, %xmm0
    00000e2a: 	divsd	DATAat0x13600(%rip), %xmm0
    00000e32: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3634
    00000e37: 	movq	0x150(%rsp), %rdi
    00000e3f: 	cmpq	(%rsp), %rdi
    00000e43: 	je	.Ltmp1813 # Offset: 3651
    00000e45: 	movq	0x160(%rsp), %rax
    00000e4d: 	leaq	0x1(%rax), %rsi
    00000e51: 	callq	_ZdlPvm@PLT # Offset: 3665
.Ltmp1813:
    00000e56: 	movq	0x20(%rsp), %r14
    00000e5b: 	leaq	0x110(%rsp), %rdi
    00000e63: 	leaq	DATAat0x1322d(%rip), %rdx
    00000e6a: 	movq	%r14, %rsi
    00000e6d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3693
    00000e72: 	movl	iterations(%rip), %edx
    00000e78: 	movl	$0x1, %r8d
    00000e7e: 	movl	$0x1, %ecx
    00000e83: 	movq	0x110(%rsp), %rdi
    00000e8b: 	movl	$0x7d0, %esi
    00000e90: 	callq	_Z9summarizePKciiii # Offset: 3728
    00000e95: 	leaq	DATAat0x13243(%rip), %rdx
    00000e9c: 	movq	%r14, %rsi
    00000e9f: 	movq	%r13, %rdi
    00000ea2: 	shll	$0x3, iterations(%rip)
    00000ea9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3753
    00000eae: 	callq	clock@PLT # Offset: 3758
    00000eb3: 	movl	iterations(%rip), %r8d
    00000eba: 	movl	$0x0, 0x28(%rsp)
    00000ec2: 	movq	%rax, start_time(%rip)
    00000ec9: 	leaq	0x174(%rsp), %rax
    00000ed1: 	movq	%rax, 0x8(%rsp)
    00000ed6: 	leaq	0x170(%rsp), %rax
    00000ede: 	movq	%rax, 0x58(%rsp)
    00000ee3: 	testl	%r8d, %r8d
    00000ee6: 	jle	.Ltmp1814 # Offset: 3814
.Ltmp1824:
    00000eec: 	movq	%rbp, %rdi
    00000eef: 	movl	$0x3e8, %ecx
    00000ef4: 	movq	%r15, %rsi
    00000ef7: 	movq	0x58(%rsp), %r9
    00000efc: 	rep		movsq	(%rsi), %es:(%rdi)
    00000eff: 	movq	%r9, %rbp
.Ltmp1821:
    00000f02: 	movl	(%r9), %esi
    00000f05: 	movq	%r9, %rax
    00000f08: 	movq	%r15, %r14
    00000f0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1819:
    00000f10: 	movl	-0x4(%r14), %edi
    00000f14: 	leaq	-0x4(%r14), %rcx
    00000f18: 	cmpl	%edi, %esi
    00000f1a: 	jl	.Ltmp1815 # Offset: 3866
    00000f1c: 	cmpq	%rax, %rcx
    00000f1f: 	jbe	.Ltmp1816 # Offset: 3871
    00000f21: 	movl	(%rax), %edx
    00000f23: 	cmpl	%edx, %esi
    00000f25: 	jle	.Ltmp1817 # Offset: 3877
    00000f27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1818:
    00000f30: 	movl	0x4(%rax), %edx
    00000f33: 	addq	$0x4, %rax
    00000f37: 	cmpl	%edx, %esi
    00000f39: 	jg	.Ltmp1818 # Offset: 3897
    00000f3b: 	cmpq	%rax, %rcx
    00000f3e: 	jbe	.Ltmp1816 # Offset: 3902
.Ltmp1817:
    00000f40: 	movl	%edx, (%rcx)
    00000f42: 	movl	%edi, (%rax)
.Ltmp1815:
    00000f44: 	movq	%rcx, %r14
    00000f47: 	jmp	.Ltmp1819 # Offset: 3911
    00000f49: 	nopl	(%rax) # Size: 7
.Ltmp1816:
    00000f50: 	movq	%r14, %rsi
    00000f53: 	movq	%r9, %rdi
    00000f56: 	callq	_ZN9benchmark9quicksortIPiEEvT_S2_ # Offset: 3926
    00000f5b: 	movq	%r15, %rax
    00000f5e: 	subq	%r14, %rax
    00000f61: 	cmpq	$0x4, %rax
    00000f65: 	jle	.Ltmp1820 # Offset: 3941
    00000f67: 	movq	%r14, %r9
    00000f6a: 	jmp	.Ltmp1821 # Offset: 3946
.Ltmp1820:
    00000f6c: 	movl	0x170(%rsp), %edx
    00000f73: 	movq	0x8(%rsp), %rax
    00000f78: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1823:
    00000f80: 	addq	$0x4, %rax
    00000f84: 	movl	%edx, %ecx
    00000f86: 	movl	-0x4(%rax), %edx
    00000f89: 	cmpl	%ecx, %edx
    00000f8b: 	jl	.Ltmp1822 # Offset: 3979
    00000f91: 	cmpq	%r15, %rax
    00000f94: 	jne	.Ltmp1823 # Offset: 3988
.Ltmp1904:
    00000f96: 	addl	$0x1, 0x28(%rsp)
    00000f9b: 	movl	0x28(%rsp), %eax
    00000f9f: 	cmpl	iterations(%rip), %eax
    00000fa5: 	jl	.Ltmp1824 # Offset: 4005
.Ltmp1814:
    00000fab: 	callq	clock@PLT # Offset: 4011
    00000fb0: 	pxor	%xmm0, %xmm0
    00000fb4: 	movq	%r13, %rdi
    00000fb7: 	movq	%rax, end_time(%rip)
    00000fbe: 	subq	start_time(%rip), %rax
    00000fc5: 	cvtsi2sd	%rax, %xmm0
    00000fca: 	divsd	DATAat0x13600(%rip), %xmm0
    00000fd2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4050
    00000fd7: 	movq	0x150(%rsp), %rdi
    00000fdf: 	cmpq	(%rsp), %rdi
    00000fe3: 	je	.Ltmp1825 # Offset: 4067
    00000fe5: 	movq	0x160(%rsp), %rax
    00000fed: 	leaq	0x1(%rax), %rsi
    00000ff1: 	callq	_ZdlPvm@PLT # Offset: 4081
.Ltmp1825:
    00000ff6: 	movq	0x20(%rsp), %rsi
    00000ffb: 	leaq	DATAat0x1325e(%rip), %rdx
    00001002: 	movq	%r13, %rdi
    00001005: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4101
    0000100a: 	callq	clock@PLT # Offset: 4106
    0000100f: 	movl	iterations(%rip), %edi
    00001015: 	movl	$0x0, 0x28(%rsp)
    0000101d: 	movq	%rax, start_time(%rip)
    00001024: 	leaq	0x3ff4(%rsp), %rax
    0000102c: 	movq	%rax, 0x8(%rsp)
    00001031: 	leaq	0x3ff0(%rsp), %rax
    00001039: 	movq	%rax, 0x58(%rsp)
    0000103e: 	testl	%edi, %edi
    00001040: 	jle	.Ltmp1826 # Offset: 4160
.Ltmp1836:
    00001046: 	movq	%rbx, %rdi
    00001049: 	movl	$0x3e8, %ecx
    0000104e: 	movq	%r12, %rsi
    00001051: 	movq	0x58(%rsp), %r9
    00001056: 	rep		movsq	(%rsi), %es:(%rdi)
    00001059: 	movq	%r9, %rbx
.Ltmp1833:
    0000105c: 	movl	(%r9), %esi
    0000105f: 	movq	%r9, %rax
    00001062: 	movq	%r12, %r14
    00001065: 	nopl	(%rax) # Size: 3
.Ltmp1831:
    00001068: 	movl	-0x4(%r14), %edi
    0000106c: 	leaq	-0x4(%r14), %rcx
    00001070: 	cmpl	%edi, %esi
    00001072: 	jl	.Ltmp1827 # Offset: 4210
    00001074: 	cmpq	%rax, %rcx
    00001077: 	jbe	.Ltmp1828 # Offset: 4215
    00001079: 	movl	(%rax), %edx
    0000107b: 	cmpl	%edx, %esi
    0000107d: 	jle	.Ltmp1829 # Offset: 4221
    0000107f: 	nop # Size: 1
.Ltmp1830:
    00001080: 	movl	0x4(%rax), %edx
    00001083: 	addq	$0x4, %rax
    00001087: 	cmpl	%edx, %esi
    00001089: 	jg	.Ltmp1830 # Offset: 4233
    0000108b: 	cmpq	%rax, %rcx
    0000108e: 	jbe	.Ltmp1828 # Offset: 4238
.Ltmp1829:
    00001090: 	movl	%edx, (%rcx)
    00001092: 	movl	%edi, (%rax)
.Ltmp1827:
    00001094: 	movq	%rcx, %r14
    00001097: 	jmp	.Ltmp1831 # Offset: 4247
    00001099: 	nopl	(%rax) # Size: 7
.Ltmp1828:
    000010a0: 	movq	%r14, %rsi
    000010a3: 	movq	%r9, %rdi
    000010a6: 	callq	_ZN9benchmark9quicksortIPiEEvT_S2_ # Offset: 4262
    000010ab: 	movq	%r12, %rax
    000010ae: 	subq	%r14, %rax
    000010b1: 	cmpq	$0x4, %rax
    000010b5: 	jle	.Ltmp1832 # Offset: 4277
    000010b7: 	movq	%r14, %r9
    000010ba: 	jmp	.Ltmp1833 # Offset: 4282
.Ltmp1832:
    000010bc: 	movl	0x3ff0(%rsp), %edx
    000010c3: 	movq	0x8(%rsp), %rax
    000010c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1835:
    000010d0: 	addq	$0x4, %rax
    000010d4: 	movl	%edx, %ecx
    000010d6: 	movl	-0x4(%rax), %edx
    000010d9: 	cmpl	%edx, %ecx
    000010db: 	jg	.Ltmp1834 # Offset: 4315
    000010e1: 	cmpq	%r12, %rax
    000010e4: 	jne	.Ltmp1835 # Offset: 4324
.Ltmp1903:
    000010e6: 	addl	$0x1, 0x28(%rsp)
    000010eb: 	movl	0x28(%rsp), %eax
    000010ef: 	cmpl	iterations(%rip), %eax
    000010f5: 	jl	.Ltmp1836 # Offset: 4341
.Ltmp1826:
    000010fb: 	callq	clock@PLT # Offset: 4347
    00001100: 	pxor	%xmm0, %xmm0
    00001104: 	movq	%r13, %rdi
    00001107: 	movq	%rax, end_time(%rip)
    0000110e: 	subq	start_time(%rip), %rax
    00001115: 	cvtsi2sd	%rax, %xmm0
    0000111a: 	divsd	DATAat0x13600(%rip), %xmm0
    00001122: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4386
    00001127: 	movq	0x150(%rsp), %rdi
    0000112f: 	cmpq	(%rsp), %rdi
    00001133: 	je	.Ltmp1837 # Offset: 4403
    00001135: 	movq	0x160(%rsp), %rax
    0000113d: 	leaq	0x1(%rax), %rsi
    00001141: 	callq	_ZdlPvm@PLT # Offset: 4417
.Ltmp1837:
    00001146: 	movq	(%rsp), %rax
    0000114a: 	movq	0xd8(%rsp), %r14
    00001152: 	movq	%rax, 0x150(%rsp)
    0000115a: 	movq	0xd0(%rsp), %rax
    00001162: 	movq	%rax, 0x8(%rsp)
    00001167: 	movq	%rax, %rdi
    0000116a: 	addq	%r14, %rax
    0000116d: 	je	.Ltmp1838 # Offset: 4461
    0000116f: 	testq	%rdi, %rdi
    00001172: 	je	.Ltmp1839 # Offset: 4466
.Ltmp1838:
    00001178: 	movq	%r14, 0xc0(%rsp)
    00001180: 	cmpq	$0xf, %r14
    00001184: 	ja	.Ltmp1840 # Offset: 4484
    0000118a: 	cmpq	$0x1, %r14
    0000118e: 	jne	.Ltmp1841 # Offset: 4494
    00001194: 	movq	0x8(%rsp), %rax
    00001199: 	movzbl	(%rax), %eax
    0000119c: 	movb	%al, 0x160(%rsp)
    000011a3: 	movq	(%rsp), %rax
.Ltmp1937:
    000011a7: 	movq	%r14, 0x158(%rsp)
    000011af: 	movb	$0x0, (%rax,%r14)
    000011b4: 	movabsq	$0x3fffffffffffffff, %rax
    000011be: 	subq	0x158(%rsp), %rax
    000011c6: 	cmpq	$0x21, %rax
    000011ca: 	jbe	.Ltmp1842 # Offset: 4554
    000011d0: 	movl	$0x22, %edx
    000011d5: 	leaq	DATAat0x13480(%rip), %rsi
    000011dc: 	movq	%r13, %rdi
    000011df: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4575
    000011e4: 	movq	0x10(%rsp), %rcx
    000011e9: 	movq	0x48(%rsp), %rdx
    000011ee: 	movq	%r13, %r8
    000011f1: 	movq	%r15, 0xc8(%rsp)
    000011f9: 	movq	0x40(%rsp), %rsi
    000011fe: 	movq	0x30(%rsp), %rdi
    00001203: 	movq	%rbp, 0xb8(%rsp)
    0000120b: 	movq	%rbx, 0xa8(%rsp)
    00001213: 	movq	%r15, 0x98(%rsp)
    0000121b: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 4635
    00001220: 	movq	0x150(%rsp), %rdi
    00001228: 	cmpq	(%rsp), %rdi
    0000122c: 	je	.Ltmp1843 # Offset: 4652
    0000122e: 	movq	0x160(%rsp), %rax
    00001236: 	leaq	0x1(%rax), %rsi
    0000123a: 	callq	_ZdlPvm@PLT # Offset: 4666
.Ltmp1843:
    0000123f: 	movq	0x20(%rsp), %rsi
    00001244: 	leaq	DATAat0x134a8(%rip), %rdx
    0000124b: 	movq	%r13, %rdi
    0000124e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4686
    00001253: 	movq	0x68(%rsp), %rax
    00001258: 	movq	0x10(%rsp), %rcx
    0000125d: 	movq	%r13, %r8
    00001260: 	movq	%r12, 0xc8(%rsp)
    00001268: 	movq	0x48(%rsp), %rdx
    0000126d: 	movq	0x40(%rsp), %rsi
    00001272: 	movq	%rbx, 0xb8(%rsp)
    0000127a: 	movq	0x30(%rsp), %rdi
    0000127f: 	movq	%rax, 0xa8(%rsp)
    00001287: 	movq	%r12, 0x98(%rsp)
    0000128f: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 4751
    00001294: 	movq	0x150(%rsp), %rdi
    0000129c: 	cmpq	(%rsp), %rdi
    000012a0: 	je	.Ltmp1844 # Offset: 4768
    000012a2: 	movq	0x160(%rsp), %rax
    000012aa: 	leaq	0x1(%rax), %rsi
    000012ae: 	callq	_ZdlPvm@PLT # Offset: 4782
.Ltmp1844:
    000012b3: 	movq	(%rsp), %rax
    000012b7: 	movq	0xd8(%rsp), %r14
    000012bf: 	movq	%rax, 0x150(%rsp)
    000012c7: 	movq	0xd0(%rsp), %rax
    000012cf: 	movq	%rax, 0x8(%rsp)
    000012d4: 	movq	%rax, %rdi
    000012d7: 	addq	%r14, %rax
    000012da: 	je	.Ltmp1845 # Offset: 4826
    000012dc: 	testq	%rdi, %rdi
    000012df: 	je	.Ltmp1846 # Offset: 4831
.Ltmp1845:
    000012e5: 	movq	%r14, 0xc0(%rsp)
    000012ed: 	cmpq	$0xf, %r14
    000012f1: 	ja	.Ltmp1847 # Offset: 4849
    000012f7: 	cmpq	$0x1, %r14
    000012fb: 	jne	.Ltmp1848 # Offset: 4859
    00001301: 	movq	0x8(%rsp), %rax
    00001306: 	movzbl	(%rax), %eax
    00001309: 	movb	%al, 0x160(%rsp)
    00001310: 	movq	(%rsp), %rax
.Ltmp1939:
    00001314: 	movq	%r14, 0x158(%rsp)
    0000131c: 	movb	$0x0, (%rax,%r14)
    00001321: 	movabsq	$0x3fffffffffffffff, %rax
    0000132b: 	subq	0x158(%rsp), %rax
    00001333: 	cmpq	$0x28, %rax
    00001337: 	jbe	.Ltmp1849 # Offset: 4919
    0000133d: 	movl	$0x29, %edx
    00001342: 	leaq	DATAat0x134d8(%rip), %rsi
    00001349: 	movq	%r13, %rdi
    0000134c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4940
    00001351: 	movq	0x68(%rsp), %rax
    00001356: 	movq	0x10(%rsp), %rcx
    0000135b: 	movq	%r13, %r8
    0000135e: 	movq	%r12, 0xc8(%rsp)
    00001366: 	movq	0x48(%rsp), %rdx
    0000136b: 	movq	0x40(%rsp), %rsi
    00001370: 	movq	%rbx, 0xb8(%rsp)
    00001378: 	movq	0x30(%rsp), %rdi
    0000137d: 	movq	%rax, 0xa8(%rsp)
    00001385: 	movq	%r12, 0x98(%rsp)
    0000138d: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 5005
    00001392: 	movq	0x150(%rsp), %rdi
    0000139a: 	cmpq	(%rsp), %rdi
    0000139e: 	je	.Ltmp1850 # Offset: 5022
    000013a0: 	movq	0x160(%rsp), %rax
    000013a8: 	leaq	0x1(%rax), %rsi
    000013ac: 	callq	_ZdlPvm@PLT # Offset: 5036
.Ltmp1850:
    000013b1: 	movq	0x20(%rsp), %rsi
    000013b6: 	leaq	DATAat0x13508(%rip), %rdx
    000013bd: 	movq	%r13, %rdi
    000013c0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5056
    000013c5: 	callq	clock@PLT # Offset: 5061
    000013ca: 	movl	iterations(%rip), %esi
    000013d0: 	movl	$0x0, 0x28(%rsp)
    000013d8: 	movq	%rax, start_time(%rip)
    000013df: 	leaq	0x3ff4(%rsp), %rax
    000013e7: 	movq	%rax, 0x8(%rsp)
    000013ec: 	leaq	0x3ff0(%rsp), %rax
    000013f4: 	movq	%rax, 0x58(%rsp)
    000013f9: 	leaq	0x5f30(%rsp), %rax
    00001401: 	movq	%rax, 0x60(%rsp)
    00001406: 	testl	%esi, %esi
    00001408: 	jle	.Ltmp1851 # Offset: 5128
.Ltmp1871:
    0000140e: 	movq	%rbx, %rdi
    00001411: 	movq	%r12, %rsi
    00001414: 	movl	$0x3e8, %ecx
    00001419: 	movq	0x58(%rsp), %rdx
    0000141e: 	rep		movsq	(%rsi), %es:(%rdi)
    00001421: 	movq	0x60(%rsp), %r8
    00001426: 	movq	%rdx, %rbx
    00001429: 	movl	0x3ff0(%rsp), %esi
    00001430: 	movq	%r8, %r12
    00001433: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1856:
    00001438: 	movl	-0x4(%r8), %edi
    0000143c: 	leaq	-0x4(%r8), %r9
    00001440: 	cmpl	%edi, %esi
    00001442: 	jl	.Ltmp1852 # Offset: 5186
    00001444: 	cmpq	%rdx, %r9
    00001447: 	jbe	.Ltmp1853 # Offset: 5191
    00001449: 	movl	(%rdx), %ecx
    0000144b: 	cmpl	%ecx, %esi
    0000144d: 	jle	.Ltmp1854 # Offset: 5197
    0000144f: 	leaq	0x4(%rdx), %rax
    00001453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1855:
    00001458: 	movq	%rax, %rdx
    0000145b: 	movl	(%rax), %ecx
    0000145d: 	leaq	0x4(%rax), %rax
    00001461: 	cmpl	%ecx, %esi
    00001463: 	jg	.Ltmp1855 # Offset: 5219
    00001465: 	cmpq	%rdx, %r9
    00001468: 	jbe	.Ltmp1853 # Offset: 5224
.Ltmp1854:
    0000146a: 	movl	%ecx, (%r9)
    0000146d: 	movl	%edi, (%rdx)
.Ltmp1852:
    0000146f: 	movq	%r9, %r8
    00001472: 	jmp	.Ltmp1856 # Offset: 5234
.Ltmp1853:
    00001474: 	movq	0x58(%rsp), %rdx
    00001479: 	movq	%r8, %rax
    0000147c: 	subq	%rdx, %rax
    0000147f: 	cmpq	$0x4, %rax
    00001483: 	jle	.Ltmp1857 # Offset: 5251
    00001485: 	movl	0x3ff0(%rsp), %esi
    0000148c: 	movq	%r8, %r9
    0000148f: 	nop # Size: 1
.Ltmp1862:
    00001490: 	leaq	-0x4(%r9), %r10
    00001494: 	cmpl	%edi, %esi
    00001496: 	jl	.Ltmp1858 # Offset: 5270
    00001498: 	cmpq	%rdx, %r10
    0000149b: 	jbe	.Ltmp1859 # Offset: 5275
    000014a1: 	movl	(%rdx), %ecx
    000014a3: 	cmpl	%ecx, %esi
    000014a5: 	jle	.Ltmp1860 # Offset: 5285
    000014a7: 	leaq	0x4(%rdx), %rax
    000014ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1861:
    000014b0: 	movq	%rax, %rdx
    000014b3: 	movl	(%rax), %ecx
    000014b5: 	leaq	0x4(%rax), %rax
    000014b9: 	cmpl	%ecx, %esi
    000014bb: 	jg	.Ltmp1861 # Offset: 5307
    000014bd: 	cmpq	%rdx, %r10
    000014c0: 	jbe	.Ltmp1859 # Offset: 5312
.Ltmp1860:
    000014c6: 	movl	%ecx, (%r10)
    000014c9: 	movl	%edi, (%rdx)
.Ltmp1858:
    000014cb: 	movl	-0x4(%r10), %edi
    000014cf: 	movq	%r10, %r9
    000014d2: 	jmp	.Ltmp1862 # Offset: 5330
.Ltmp1926:
    000014d4: 	movq	%r14, %rsi
    000014d7: 	movq	%r8, 0x80(%rsp)
    000014df: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 5343
    000014e4: 	movq	0x80(%rsp), %rsi
    000014ec: 	movq	%r14, %rdi
    000014ef: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 5359
    000014f4: 	movq	0x80(%rsp), %r8
.Ltmp1857:
    000014fc: 	movq	0x60(%rsp), %rdx
    00001501: 	movq	%rdx, %rax
    00001504: 	subq	%r8, %rax
    00001507: 	cmpq	$0x4, %rax
    0000150b: 	jle	.Ltmp1863 # Offset: 5387
    0000150d: 	movl	(%r8), %edi
    00001510: 	movq	%r8, %rcx
    00001513: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1868:
    00001518: 	movl	-0x4(%rdx), %r9d
    0000151c: 	leaq	-0x4(%rdx), %r10
    00001520: 	cmpl	%r9d, %edi
    00001523: 	jl	.Ltmp1864 # Offset: 5411
    00001525: 	cmpq	%rcx, %r10
    00001528: 	jbe	.Ltmp1865 # Offset: 5416
    0000152e: 	movl	(%rcx), %esi
    00001530: 	cmpl	%edi, %esi
    00001532: 	jge	.Ltmp1866 # Offset: 5426
    00001534: 	leaq	0x4(%rcx), %rax
    00001538: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1867:
    00001540: 	movq	%rax, %rcx
    00001543: 	movl	(%rax), %esi
    00001545: 	leaq	0x4(%rax), %rax
    00001549: 	cmpl	%esi, %edi
    0000154b: 	jg	.Ltmp1867 # Offset: 5451
    0000154d: 	cmpq	%rcx, %r10
    00001550: 	jbe	.Ltmp1865 # Offset: 5456
.Ltmp1866:
    00001556: 	movl	%esi, (%r10)
    00001559: 	movl	%r9d, (%rcx)
.Ltmp1864:
    0000155c: 	movq	%r10, %rdx
    0000155f: 	jmp	.Ltmp1868 # Offset: 5471
.Ltmp1915:
    00001561: 	movq	%r14, %rsi
    00001564: 	movq	%r9, %rdi
    00001567: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 5479
    0000156c: 	movq	0x60(%rsp), %rsi
    00001571: 	movq	%r14, %rdi
    00001574: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 5492
.Ltmp1863:
    00001579: 	movl	0x3ff0(%rsp), %edx
    00001580: 	movq	0x8(%rsp), %rax
    00001585: 	movq	0x50(%rsp), %rsi
    0000158a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1870:
    00001590: 	movl	%edx, %ecx
    00001592: 	movl	(%rax), %edx
    00001594: 	cmpl	%ecx, %edx
    00001596: 	jl	.Ltmp1869 # Offset: 5526
    0000159c: 	addq	$0x4, %rax
    000015a0: 	cmpq	%rsi, %rax
    000015a3: 	jne	.Ltmp1870 # Offset: 5539
.Ltmp1907:
    000015a5: 	addl	$0x1, 0x28(%rsp)
    000015aa: 	movl	0x28(%rsp), %eax
    000015ae: 	cmpl	iterations(%rip), %eax
    000015b4: 	jl	.Ltmp1871 # Offset: 5556
.Ltmp1851:
    000015ba: 	callq	clock@PLT # Offset: 5562
    000015bf: 	pxor	%xmm0, %xmm0
    000015c3: 	movq	%r13, %rdi
    000015c6: 	movq	%rax, end_time(%rip)
    000015cd: 	subq	start_time(%rip), %rax
    000015d4: 	cvtsi2sd	%rax, %xmm0
    000015d9: 	divsd	DATAat0x13600(%rip), %xmm0
    000015e1: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5601
    000015e6: 	movq	0x150(%rsp), %rdi
    000015ee: 	cmpq	(%rsp), %rdi
    000015f2: 	je	.Ltmp1872 # Offset: 5618
    000015f4: 	movq	0x160(%rsp), %rax
    000015fc: 	leaq	0x1(%rax), %rsi
    00001600: 	callq	_ZdlPvm@PLT # Offset: 5632
.Ltmp1872:
    00001605: 	movq	0x20(%rsp), %r14
    0000160a: 	leaq	0x130(%rsp), %rdi
    00001612: 	leaq	DATAat0x13278(%rip), %rdx
    00001619: 	movq	%r14, %rsi
    0000161c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5660
    00001621: 	movl	iterations(%rip), %edx
    00001627: 	movl	$0x1, %r8d
    0000162d: 	movl	$0x1, %ecx
    00001632: 	movq	0x130(%rsp), %rdi
    0000163a: 	movl	$0x7d0, %esi
    0000163f: 	callq	_Z9summarizePKciiii # Offset: 5695
    00001644: 	leaq	DATAat0x13289(%rip), %rdx
    0000164b: 	movq	%r14, %rsi
    0000164e: 	movq	%r13, %rdi
    00001651: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5713
    00001656: 	callq	clock@PLT # Offset: 5718
    0000165b: 	movl	iterations(%rip), %ecx
    00001661: 	movl	$0x0, 0x28(%rsp)
    00001669: 	movq	%rax, start_time(%rip)
    00001670: 	leaq	0x174(%rsp), %rax
    00001678: 	movq	%rax, 0x8(%rsp)
    0000167d: 	testl	%ecx, %ecx
    0000167f: 	jle	.Ltmp1873 # Offset: 5759
.Ltmp1878:
    00001685: 	movl	$0x3e8, %ecx
    0000168a: 	movq	%rbp, %rdi
    0000168d: 	movq	%r15, %rsi
    00001690: 	movl	$0x3e7, %r14d
    00001696: 	rep		movsq	(%rsi), %es:(%rdi)
    00001699: 	nopl	(%rax) # Size: 7
.Ltmp1874:
    000016a0: 	movl	(%rbp,%r14,4), %ecx
    000016a5: 	movq	%r14, %rdx
    000016a8: 	movq	%rbp, %rsi
    000016ab: 	movl	$0x7d0, %edi
    000016b0: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 5808
    000016b5: 	subq	$0x1, %r14
    000016b9: 	jae	.Ltmp1874 # Offset: 5817
    000016bb: 	movl	$0x7cf, %r14d
    000016c1: 	nopl	(%rax) # Size: 7
.Ltmp1875:
    000016c8: 	movl	0x170(%rsp), %eax
    000016cf: 	xorl	%edx, %edx
    000016d1: 	movq	%r14, %rdi
    000016d4: 	movq	%rbp, %rsi
    000016d7: 	movl	(%rbp,%r14,4), %ecx
    000016dc: 	movl	%eax, (%rbp,%r14,4)
    000016e1: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 5857
    000016e6: 	subq	$0x1, %r14
    000016ea: 	jne	.Ltmp1875 # Offset: 5866
    000016ec: 	movl	0x170(%rsp), %edx
    000016f3: 	movq	0x8(%rsp), %rax
    000016f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1877:
    00001700: 	addq	$0x4, %rax
    00001704: 	movl	%edx, %ecx
    00001706: 	movl	-0x4(%rax), %edx
    00001709: 	cmpl	%edx, %ecx
    0000170b: 	jg	.Ltmp1876 # Offset: 5899
    00001711: 	cmpq	%r15, %rax
    00001714: 	jne	.Ltmp1877 # Offset: 5908
.Ltmp1906:
    00001716: 	addl	$0x1, 0x28(%rsp)
    0000171b: 	movl	0x28(%rsp), %eax
    0000171f: 	cmpl	iterations(%rip), %eax
    00001725: 	jl	.Ltmp1878 # Offset: 5925
.Ltmp1873:
    0000172b: 	callq	clock@PLT # Offset: 5931
    00001730: 	pxor	%xmm0, %xmm0
    00001734: 	movq	%r13, %rdi
    00001737: 	movq	%rax, end_time(%rip)
    0000173e: 	subq	start_time(%rip), %rax
    00001745: 	cvtsi2sd	%rax, %xmm0
    0000174a: 	divsd	DATAat0x13600(%rip), %xmm0
    00001752: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5970
    00001757: 	movq	0x150(%rsp), %rdi
    0000175f: 	cmpq	(%rsp), %rdi
    00001763: 	je	.Ltmp1879 # Offset: 5987
    00001765: 	movq	0x160(%rsp), %rax
    0000176d: 	leaq	0x1(%rax), %rsi
    00001771: 	callq	_ZdlPvm@PLT # Offset: 6001
.Ltmp1879:
    00001776: 	movq	0x20(%rsp), %rsi
    0000177b: 	leaq	DATAat0x132a4(%rip), %rdx
    00001782: 	movq	%r13, %rdi
    00001785: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6021
    0000178a: 	callq	clock@PLT # Offset: 6026
    0000178f: 	movl	iterations(%rip), %edx
    00001795: 	movl	$0x0, 0x28(%rsp)
    0000179d: 	movq	%rax, start_time(%rip)
    000017a4: 	leaq	0x3ff4(%rsp), %rax
    000017ac: 	movq	%rax, 0x8(%rsp)
    000017b1: 	testl	%edx, %edx
    000017b3: 	jle	.Ltmp1880 # Offset: 6067
.Ltmp1885:
    000017b9: 	movl	$0x3e8, %ecx
    000017be: 	movq	%rbx, %rdi
    000017c1: 	movq	%r12, %rsi
    000017c4: 	movl	$0x3e7, %r14d
    000017ca: 	rep		movsq	(%rsi), %es:(%rdi)
    000017cd: 	nopl	(%rax) # Size: 3
.Ltmp1881:
    000017d0: 	movl	(%rbx,%r14,4), %ecx
    000017d4: 	movq	%r14, %rdx
    000017d7: 	movq	%rbx, %rsi
    000017da: 	movl	$0x7d0, %edi
    000017df: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 6111
    000017e4: 	subq	$0x1, %r14
    000017e8: 	jae	.Ltmp1881 # Offset: 6120
    000017ea: 	movl	$0x7cf, %r14d
.Ltmp1882:
    000017f0: 	movl	0x3ff0(%rsp), %eax
    000017f7: 	movl	(%rbx,%r14,4), %ecx
    000017fb: 	xorl	%edx, %edx
    000017fd: 	movq	%r14, %rdi
    00001800: 	movq	%rbx, %rsi
    00001803: 	movl	%eax, (%rbx,%r14,4)
    00001807: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 6151
    0000180c: 	subq	$0x1, %r14
    00001810: 	jne	.Ltmp1882 # Offset: 6160
    00001812: 	movl	0x3ff0(%rsp), %edx
    00001819: 	movq	0x8(%rsp), %rax
    0000181e: 	nop # Size: 2
.Ltmp1884:
    00001820: 	addq	$0x4, %rax
    00001824: 	movl	%edx, %ecx
    00001826: 	movl	-0x4(%rax), %edx
    00001829: 	cmpl	%ecx, %edx
    0000182b: 	jl	.Ltmp1883 # Offset: 6187
    00001831: 	cmpq	%r12, %rax
    00001834: 	jne	.Ltmp1884 # Offset: 6196
.Ltmp1905:
    00001836: 	addl	$0x1, 0x28(%rsp)
    0000183b: 	movl	0x28(%rsp), %eax
    0000183f: 	cmpl	iterations(%rip), %eax
    00001845: 	jl	.Ltmp1885 # Offset: 6213
.Ltmp1880:
    0000184b: 	callq	clock@PLT # Offset: 6219
    00001850: 	pxor	%xmm0, %xmm0
    00001854: 	movq	%r13, %rdi
    00001857: 	movq	%rax, end_time(%rip)
    0000185e: 	subq	start_time(%rip), %rax
    00001865: 	cvtsi2sd	%rax, %xmm0
    0000186a: 	divsd	DATAat0x13600(%rip), %xmm0
    00001872: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6258
    00001877: 	movq	0x150(%rsp), %rdi
    0000187f: 	cmpq	(%rsp), %rdi
    00001883: 	je	.Ltmp1886 # Offset: 6275
    00001885: 	movq	0x160(%rsp), %rax
    0000188d: 	leaq	0x1(%rax), %rsi
    00001891: 	callq	_ZdlPvm@PLT # Offset: 6289
.Ltmp1886:
    00001896: 	movq	0x20(%rsp), %rsi
    0000189b: 	leaq	DATAat0x13538(%rip), %rdx
    000018a2: 	movq	%r13, %rdi
    000018a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6309
    000018aa: 	movq	0x10(%rsp), %rcx
    000018af: 	movq	0x48(%rsp), %rdx
    000018b4: 	movq	%r13, %r8
    000018b7: 	movq	%r15, 0xc8(%rsp)
    000018bf: 	movq	0x40(%rsp), %rsi
    000018c4: 	movq	0x30(%rsp), %rdi
    000018c9: 	movq	%rbp, 0xb8(%rsp)
    000018d1: 	movq	%rbx, 0xa8(%rsp)
    000018d9: 	movq	%r15, 0x98(%rsp)
    000018e1: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6369
    000018e6: 	movq	0x150(%rsp), %rdi
    000018ee: 	cmpq	(%rsp), %rdi
    000018f2: 	je	.Ltmp1887 # Offset: 6386
    000018f4: 	movq	0x160(%rsp), %rax
    000018fc: 	leaq	0x1(%rax), %rsi
    00001900: 	callq	_ZdlPvm@PLT # Offset: 6400
.Ltmp1887:
    00001905: 	movq	0x20(%rsp), %rsi
    0000190a: 	leaq	DATAat0x13560(%rip), %rdx
    00001911: 	movq	%r13, %rdi
    00001914: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6420
    00001919: 	movq	0x68(%rsp), %rax
    0000191e: 	movq	0x10(%rsp), %rcx
    00001923: 	movq	%r13, %r8
    00001926: 	movq	%r12, 0xc8(%rsp)
    0000192e: 	movq	0x48(%rsp), %rdx
    00001933: 	movq	0x40(%rsp), %rsi
    00001938: 	movq	%rbx, 0xb8(%rsp)
    00001940: 	movq	0x30(%rsp), %rdi
    00001945: 	movq	%rax, 0xa8(%rsp)
    0000194d: 	movq	%r12, 0x98(%rsp)
    00001955: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6485
    0000195a: 	movq	0x150(%rsp), %rdi
    00001962: 	cmpq	(%rsp), %rdi
    00001966: 	je	.Ltmp1888 # Offset: 6502
    00001968: 	movq	0x160(%rsp), %rax
    00001970: 	leaq	0x1(%rax), %rsi
    00001974: 	callq	_ZdlPvm@PLT # Offset: 6516
.Ltmp1888:
    00001979: 	movq	0x20(%rsp), %rsi
    0000197e: 	leaq	DATAat0x13590(%rip), %rdx
    00001985: 	movq	%r13, %rdi
    00001988: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6536
    0000198d: 	movq	0x68(%rsp), %rax
    00001992: 	movq	0x10(%rsp), %rcx
    00001997: 	movq	%r13, %r8
    0000199a: 	movq	%r12, 0xc8(%rsp)
    000019a2: 	movq	0x48(%rsp), %rdx
    000019a7: 	movq	0x40(%rsp), %rsi
    000019ac: 	movq	%rbx, 0xb8(%rsp)
    000019b4: 	movq	0x30(%rsp), %rdi
    000019b9: 	movq	%rax, 0xa8(%rsp)
    000019c1: 	movq	%r12, 0x98(%rsp)
    000019c9: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IPiEEiEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6601
    000019ce: 	movq	0x150(%rsp), %rdi
    000019d6: 	cmpq	(%rsp), %rdi
    000019da: 	je	.Ltmp1889 # Offset: 6618
    000019dc: 	movq	0x160(%rsp), %rax
    000019e4: 	leaq	0x1(%rax), %rsi
    000019e8: 	callq	_ZdlPvm@PLT # Offset: 6632
.Ltmp1889:
    000019ed: 	movq	0x20(%rsp), %rsi
    000019f2: 	leaq	DATAat0x135c0(%rip), %rdx
    000019f9: 	movq	%r13, %rdi
    000019fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6652
    00001a01: 	callq	clock@PLT # Offset: 6657
    00001a06: 	xorl	%ebp, %ebp
    00001a08: 	leaq	DATAat0x131ba(%rip), %r14
    00001a0f: 	movq	%rax, start_time(%rip)
    00001a16: 	leaq	0x3ff4(%rsp), %rax
    00001a1e: 	movq	%rax, 0x8(%rsp)
    00001a23: 	movl	iterations(%rip), %eax
    00001a29: 	testl	%eax, %eax
    00001a2b: 	jle	.Ltmp1890 # Offset: 6699
.Ltmp1895:
    00001a31: 	movl	$0x3e8, %ecx
    00001a36: 	movq	%rbx, %rdi
    00001a39: 	movq	%r12, %rsi
    00001a3c: 	movl	$0x3e7, %r15d
    00001a42: 	rep		movsq	(%rsi), %es:(%rdi)
    00001a45: 	nopl	(%rax) # Size: 3
.Ltmp1891:
    00001a48: 	movl	(%rbx,%r15,4), %ecx
    00001a4c: 	movq	%r15, %rdx
    00001a4f: 	movq	%rbx, %rsi
    00001a52: 	movl	$0x7d0, %edi
    00001a57: 	callq	_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPiiEEiEEiEEvlT_lT0_ # Offset: 6743
    00001a5c: 	subq	$0x1, %r15
    00001a60: 	jae	.Ltmp1891 # Offset: 6752
    00001a62: 	movl	$0x7cf, %r15d
    00001a68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1892:
    00001a70: 	movl	0x3ff0(%rsp), %eax
    00001a77: 	movl	(%rbx,%r15,4), %ecx
    00001a7b: 	xorl	%edx, %edx
    00001a7d: 	movq	%r15, %rdi
    00001a80: 	movq	%rbx, %rsi
    00001a83: 	movl	%eax, (%rbx,%r15,4)
    00001a87: 	callq	_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPiiEEiEEiEEvlT_lT0_ # Offset: 6791
    00001a8c: 	subq	$0x1, %r15
    00001a90: 	jne	.Ltmp1892 # Offset: 6800
    00001a92: 	movl	0x3ff0(%rsp), %edx
    00001a99: 	movq	0x8(%rsp), %rax
    00001a9e: 	movq	0x50(%rsp), %rsi
    00001aa3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1894:
    00001aa8: 	movl	%edx, %ecx
    00001aaa: 	movl	(%rax), %edx
    00001aac: 	cmpl	%ecx, %edx
    00001aae: 	jl	.Ltmp1893 # Offset: 6830
    00001ab4: 	addq	$0x4, %rax
    00001ab8: 	cmpq	%rsi, %rax
    00001abb: 	jne	.Ltmp1894 # Offset: 6843
    00001abd: 	addl	$0x1, %ebp
    00001ac0: 	cmpl	iterations(%rip), %ebp
    00001ac6: 	jl	.Ltmp1895 # Offset: 6854
.Ltmp1890:
    00001acc: 	callq	clock@PLT # Offset: 6860
    00001ad1: 	pxor	%xmm0, %xmm0
    00001ad5: 	movq	%r13, %rdi
    00001ad8: 	movq	%rax, end_time(%rip)
    00001adf: 	subq	start_time(%rip), %rax
    00001ae6: 	cvtsi2sd	%rax, %xmm0
    00001aeb: 	divsd	DATAat0x13600(%rip), %xmm0
    00001af3: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6899
    00001af8: 	movq	0x150(%rsp), %rdi
    00001b00: 	cmpq	(%rsp), %rdi
    00001b04: 	je	.Ltmp1896 # Offset: 6916
    00001b06: 	movq	0x160(%rsp), %rax
    00001b0e: 	leaq	0x1(%rax), %rsi
    00001b12: 	callq	_ZdlPvm@PLT # Offset: 6930
.Ltmp1896:
    00001b17: 	movq	0x20(%rsp), %rsi
    00001b1c: 	leaq	DATAat0x132be(%rip), %rdx
    00001b23: 	movq	%r13, %rdi
    00001b26: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6950
    00001b2b: 	movl	iterations(%rip), %edx
    00001b31: 	movl	$0x1, %r8d
    00001b37: 	movl	$0x1, %ecx
    00001b3c: 	movq	0x150(%rsp), %rdi
    00001b44: 	movl	$0x7d0, %esi
    00001b49: 	callq	_Z9summarizePKciiii # Offset: 6985
    00001b4e: 	movl	0x7c(%rsp), %eax
    00001b52: 	movq	0x150(%rsp), %rdi
    00001b5a: 	movl	%eax, iterations(%rip)
    00001b60: 	cmpq	(%rsp), %rdi
    00001b64: 	je	.Ltmp1897 # Offset: 7012
    00001b66: 	movq	0x160(%rsp), %rax
    00001b6e: 	leaq	0x1(%rax), %rsi
    00001b72: 	callq	_ZdlPvm@PLT # Offset: 7026
.Ltmp1897:
    00001b77: 	movq	0x130(%rsp), %rdi
    00001b7f: 	leaq	0x140(%rsp), %rax
    00001b87: 	cmpq	%rax, %rdi
    00001b8a: 	je	.Ltmp1898 # Offset: 7050
    00001b8c: 	movq	0x140(%rsp), %rax
    00001b94: 	leaq	0x1(%rax), %rsi
    00001b98: 	callq	_ZdlPvm@PLT # Offset: 7064
.Ltmp1898:
    00001b9d: 	movq	0x110(%rsp), %rdi
    00001ba5: 	leaq	0x120(%rsp), %rax
    00001bad: 	cmpq	%rax, %rdi
    00001bb0: 	je	.Ltmp1899 # Offset: 7088
    00001bb2: 	movq	0x120(%rsp), %rax
    00001bba: 	leaq	0x1(%rax), %rsi
    00001bbe: 	callq	_ZdlPvm@PLT # Offset: 7102
.Ltmp1899:
    00001bc3: 	movq	0xf0(%rsp), %rdi
    00001bcb: 	leaq	0x100(%rsp), %rax
    00001bd3: 	cmpq	%rax, %rdi
    00001bd6: 	je	.Ltmp1900 # Offset: 7126
    00001bd8: 	movq	0x100(%rsp), %rax
    00001be0: 	leaq	0x1(%rax), %rsi
    00001be4: 	callq	_ZdlPvm@PLT # Offset: 7140
.Ltmp1900:
    00001be9: 	movq	0xd0(%rsp), %rdi
    00001bf1: 	cmpq	0x70(%rsp), %rdi
    00001bf6: 	je	.Ltmp1901 # Offset: 7158
    00001bf8: 	movq	0xe0(%rsp), %rax
    00001c00: 	leaq	0x1(%rax), %rsi
    00001c04: 	callq	_ZdlPvm@PLT # Offset: 7172
.Ltmp1901:
    00001c09: 	movq	0x7e78(%rsp), %rax
    00001c11: 	subq	%fs:0x28, %rax
    00001c1a: 	jne	.Ltmp1902 # Offset: 7194
    00001c20: 	addq	$0x7e88, %rsp
    00001c27: 	popq	%rbx
    00001c28: 	popq	%rbp
    00001c29: 	popq	%r12
    00001c2b: 	popq	%r13
    00001c2d: 	popq	%r14
    00001c2f: 	popq	%r15
    00001c31: 	retq # Offset: 7217
.Ltmp1805:
    00001c32: 	movl	%ecx, 0x3ff0(%rsp)
    00001c39: 	leaq	0x4(%rbx), %rsi
    00001c3d: 	jmp	.Ltmp1809 # Offset: 7229
.Ltmp1810:
    00001c42: 	movq	0x150(%rsp), %rdx
    00001c4a: 	leaq	DATAat0x131ba(%rip), %rsi
    00001c51: 	movl	$0x1, %edi
    00001c56: 	xorl	%eax, %eax
    00001c58: 	callq	__printf_chk@PLT # Offset: 7256
    00001c5d: 	movl	%r14d, %eax
    00001c60: 	movl	iterations(%rip), %r8d
    00001c67: 	addl	$0x1, %eax
    00001c6a: 	movl	%eax, %r14d
    00001c6d: 	cmpl	%r8d, %eax
    00001c70: 	jl	.Ltmp1812 # Offset: 7280
    00001c76: 	jmp	.Ltmp1804 # Offset: 7286
.Ltmp1893:
    00001c7b: 	movq	0x150(%rsp), %rdx
    00001c83: 	movq	%r14, %rsi
    00001c86: 	movl	$0x1, %edi
    00001c8b: 	xorl	%eax, %eax
    00001c8d: 	callq	__printf_chk@PLT # Offset: 7309
    00001c92: 	addl	$0x1, %ebp
    00001c95: 	cmpl	iterations(%rip), %ebp
    00001c9b: 	jl	.Ltmp1895 # Offset: 7323
    00001ca1: 	jmp	.Ltmp1890 # Offset: 7329
.Ltmp1834:
    00001ca6: 	movq	0x150(%rsp), %rdx
    00001cae: 	leaq	DATAat0x131ba(%rip), %rsi
    00001cb5: 	movl	$0x1, %edi
    00001cba: 	xorl	%eax, %eax
    00001cbc: 	callq	__printf_chk@PLT # Offset: 7356
    00001cc1: 	jmp	.Ltmp1903 # Offset: 7361
.Ltmp1822:
    00001cc6: 	movq	0x150(%rsp), %rdx
    00001cce: 	leaq	DATAat0x131ba(%rip), %rsi
    00001cd5: 	movl	$0x1, %edi
    00001cda: 	xorl	%eax, %eax
    00001cdc: 	callq	__printf_chk@PLT # Offset: 7388
    00001ce1: 	jmp	.Ltmp1904 # Offset: 7393
.Ltmp1789:
    00001ce6: 	movq	0x150(%rsp), %rdx
    00001cee: 	leaq	DATAat0x131ba(%rip), %rsi
    00001cf5: 	movl	$0x1, %edi
    00001cfa: 	xorl	%eax, %eax
    00001cfc: 	callq	__printf_chk@PLT # Offset: 7420
    00001d01: 	movl	iterations(%rip), %r8d
    00001d08: 	addl	$0x1, %r14d
    00001d0c: 	cmpl	%r8d, %r14d
    00001d0f: 	jl	.Ltmp1791 # Offset: 7439
    00001d15: 	jmp	.Ltmp1785 # Offset: 7445
.Ltmp1797:
    00001d1a: 	movq	0x150(%rsp), %rdx
    00001d22: 	leaq	DATAat0x131ba(%rip), %rsi
    00001d29: 	movl	$0x1, %edi
    00001d2e: 	xorl	%eax, %eax
    00001d30: 	callq	__printf_chk@PLT # Offset: 7472
    00001d35: 	movl	iterations(%rip), %r8d
    00001d3c: 	addl	$0x1, %r14d
    00001d40: 	cmpl	%r8d, %r14d
    00001d43: 	jl	.Ltmp1799 # Offset: 7491
    00001d49: 	jmp	.Ltmp1793 # Offset: 7497
.Ltmp1883:
    00001d4e: 	movq	0x150(%rsp), %rdx
    00001d56: 	leaq	DATAat0x131ba(%rip), %rsi
    00001d5d: 	movl	$0x1, %edi
    00001d62: 	xorl	%eax, %eax
    00001d64: 	callq	__printf_chk@PLT # Offset: 7524
    00001d69: 	jmp	.Ltmp1905 # Offset: 7529
.Ltmp1876:
    00001d6e: 	movq	0x150(%rsp), %rdx
    00001d76: 	leaq	DATAat0x131ba(%rip), %rsi
    00001d7d: 	movl	$0x1, %edi
    00001d82: 	xorl	%eax, %eax
    00001d84: 	callq	__printf_chk@PLT # Offset: 7556
    00001d89: 	jmp	.Ltmp1906 # Offset: 7561
.Ltmp1869:
    00001d8e: 	movq	0x150(%rsp), %rdx
    00001d96: 	leaq	DATAat0x131ba(%rip), %rsi
    00001d9d: 	movl	$0x1, %edi
    00001da2: 	xorl	%eax, %eax
    00001da4: 	callq	__printf_chk@PLT # Offset: 7588
    00001da9: 	jmp	.Ltmp1907 # Offset: 7593
.Ltmp1865:
    00001dae: 	movq	%rdx, %rax
    00001db1: 	subq	%r8, %rax
    00001db4: 	cmpq	$0x4, %rax
    00001db8: 	jle	.Ltmp1908 # Offset: 7608
    00001dbe: 	movl	(%r8), %esi
    00001dc1: 	movq	%rdx, %r14
    00001dc4: 	movq	%r8, %rax
.Ltmp1913:
    00001dc7: 	leaq	-0x4(%r14), %rdi
    00001dcb: 	cmpl	%r9d, %esi
    00001dce: 	jl	.Ltmp1909 # Offset: 7630
    00001dd0: 	cmpq	%rax, %rdi
    00001dd3: 	jbe	.Ltmp1910 # Offset: 7635
    00001dd9: 	movl	(%rax), %ecx
    00001ddb: 	cmpl	%esi, %ecx
    00001ddd: 	jge	.Ltmp1911 # Offset: 7645
    00001ddf: 	nop # Size: 1
.Ltmp1912:
    00001de0: 	movl	0x4(%rax), %ecx
    00001de3: 	addq	$0x4, %rax
    00001de7: 	cmpl	%ecx, %esi
    00001de9: 	jg	.Ltmp1912 # Offset: 7657
    00001deb: 	cmpq	%rax, %rdi
    00001dee: 	jbe	.Ltmp1910 # Offset: 7662
.Ltmp1911:
    00001df4: 	movl	%ecx, (%rdi)
    00001df6: 	movl	%r9d, (%rax)
.Ltmp1909:
    00001df9: 	movl	-0x4(%rdi), %r9d
    00001dfd: 	movq	%rdi, %r14
    00001e00: 	jmp	.Ltmp1913 # Offset: 7680
.Ltmp1932:
    00001e02: 	movq	%r9, %rsi
    00001e05: 	movq	%r8, %rdi
    00001e08: 	movq	%rdx, 0x88(%rsp)
    00001e10: 	movq	%r9, 0x80(%rsp)
    00001e18: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 7704
    00001e1d: 	movq	0x80(%rsp), %rdi
    00001e25: 	movq	%r14, %rsi
    00001e28: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 7720
    00001e2d: 	movq	0x88(%rsp), %rdx
.Ltmp1930:
    00001e35: 	movq	%rdx, %rsi
    00001e38: 	movq	%r14, %rdi
    00001e3b: 	movq	%rdx, 0x80(%rsp)
    00001e43: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 7747
    00001e48: 	movq	0x80(%rsp), %rdx
.Ltmp1908:
    00001e50: 	movq	0x60(%rsp), %r14
    00001e55: 	movq	%rdx, %r9
    00001e58: 	movq	%r14, %rax
    00001e5b: 	subq	%rdx, %rax
    00001e5e: 	cmpq	$0x4, %rax
    00001e62: 	jle	.Ltmp1863 # Offset: 7778
    00001e68: 	movl	(%rdx), %ecx
.Ltmp1918:
    00001e6a: 	movl	-0x4(%r14), %edi
    00001e6e: 	leaq	-0x4(%r14), %rsi
    00001e72: 	cmpl	%edi, %ecx
    00001e74: 	jl	.Ltmp1914 # Offset: 7796
    00001e76: 	cmpq	%rdx, %rsi
    00001e79: 	jbe	.Ltmp1915 # Offset: 7801
    00001e7f: 	movl	(%rdx), %eax
    00001e81: 	cmpl	%ecx, %eax
    00001e83: 	jge	.Ltmp1916 # Offset: 7811
    00001e85: 	nopl	(%rax) # Size: 3
.Ltmp1917:
    00001e88: 	movl	0x4(%rdx), %eax
    00001e8b: 	addq	$0x4, %rdx
    00001e8f: 	cmpl	%eax, %ecx
    00001e91: 	jg	.Ltmp1917 # Offset: 7825
    00001e93: 	cmpq	%rdx, %rsi
    00001e96: 	jbe	.Ltmp1915 # Offset: 7830
.Ltmp1916:
    00001e9c: 	movl	%eax, (%rsi)
    00001e9e: 	movl	%edi, (%rdx)
.Ltmp1914:
    00001ea0: 	movq	%rsi, %r14
    00001ea3: 	jmp	.Ltmp1918 # Offset: 7843
.Ltmp1859:
    00001ea5: 	movq	0x58(%rsp), %rdi
    00001eaa: 	movq	%r9, %rax
    00001ead: 	subq	%rdi, %rax
    00001eb0: 	cmpq	$0x4, %rax
    00001eb4: 	jle	.Ltmp1919 # Offset: 7860
    00001eba: 	movl	0x3ff0(%rsp), %ecx
    00001ec1: 	movq	%r9, %r14
    00001ec4: 	movq	%rdi, %rax
.Ltmp1924:
    00001ec7: 	movl	-0x4(%r14), %edi
    00001ecb: 	leaq	-0x4(%r14), %rsi
    00001ecf: 	cmpl	%edi, %ecx
    00001ed1: 	jl	.Ltmp1920 # Offset: 7889
    00001ed3: 	cmpq	%rax, %rsi
    00001ed6: 	jbe	.Ltmp1921 # Offset: 7894
    00001ed8: 	movl	(%rax), %edx
    00001eda: 	cmpl	%ecx, %edx
    00001edc: 	jge	.Ltmp1922 # Offset: 7900
    00001ede: 	nop # Size: 2
.Ltmp1923:
    00001ee0: 	movl	0x4(%rax), %edx
    00001ee3: 	addq	$0x4, %rax
    00001ee7: 	cmpl	%edx, %ecx
    00001ee9: 	jg	.Ltmp1923 # Offset: 7913
    00001eeb: 	cmpq	%rax, %rsi
    00001eee: 	jbe	.Ltmp1921 # Offset: 7918
.Ltmp1922:
    00001ef0: 	movl	%edx, (%rsi)
    00001ef2: 	movl	%edi, (%rax)
.Ltmp1920:
    00001ef4: 	movq	%rsi, %r14
    00001ef7: 	jmp	.Ltmp1924 # Offset: 7927
.Ltmp1921:
    00001ef9: 	movq	0x58(%rsp), %rdi
    00001efe: 	movq	%r14, %rsi
    00001f01: 	movq	%r9, 0x80(%rsp)
    00001f09: 	movq	%r8, 0x88(%rsp)
    00001f11: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 7953
    00001f16: 	movq	0x80(%rsp), %rsi
    00001f1e: 	movq	%r14, %rdi
    00001f21: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPiiEEiEEEEvT_S5_ # Offset: 7969
    00001f26: 	movq	0x88(%rsp), %r8
    00001f2e: 	movq	0x80(%rsp), %r9
.Ltmp1919:
    00001f36: 	movq	%r8, %rax
    00001f39: 	movq	%r9, %rdi
    00001f3c: 	subq	%r9, %rax
    00001f3f: 	cmpq	$0x4, %rax
    00001f43: 	jle	.Ltmp1857 # Offset: 8003
    00001f49: 	movl	(%r9), %edx
    00001f4c: 	movq	%r8, %r14
.Ltmp1929:
    00001f4f: 	movl	-0x4(%r14), %esi
    00001f53: 	leaq	-0x4(%r14), %rcx
    00001f57: 	cmpl	%esi, %edx
    00001f59: 	jl	.Ltmp1925 # Offset: 8025
    00001f5b: 	cmpq	%r9, %rcx
    00001f5e: 	jbe	.Ltmp1926 # Offset: 8030
    00001f64: 	movl	(%r9), %eax
    00001f67: 	cmpl	%edx, %eax
    00001f69: 	jge	.Ltmp1927 # Offset: 8041
    00001f6b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1928:
    00001f70: 	movl	0x4(%r9), %eax
    00001f74: 	addq	$0x4, %r9
    00001f78: 	cmpl	%eax, %edx
    00001f7a: 	jg	.Ltmp1928 # Offset: 8058
    00001f7c: 	cmpq	%r9, %rcx
    00001f7f: 	jbe	.Ltmp1926 # Offset: 8063
.Ltmp1927:
    00001f85: 	movl	%eax, (%rcx)
    00001f87: 	movl	%esi, (%r9)
.Ltmp1925:
    00001f8a: 	movq	%rcx, %r14
    00001f8d: 	jmp	.Ltmp1929 # Offset: 8077
.Ltmp1910:
    00001f8f: 	movq	%r14, %rax
    00001f92: 	subq	%r8, %rax
    00001f95: 	cmpq	$0x4, %rax
    00001f99: 	jle	.Ltmp1930 # Offset: 8089
    00001f9f: 	movl	(%r8), %esi
    00001fa2: 	movq	%r14, %r9
    00001fa5: 	movq	%r8, %rax
.Ltmp1935:
    00001fa8: 	movl	-0x4(%r9), %r10d
    00001fac: 	leaq	-0x4(%r9), %rdi
    00001fb0: 	cmpl	%r10d, %esi
    00001fb3: 	jl	.Ltmp1931 # Offset: 8115
    00001fb5: 	cmpq	%rax, %rdi
    00001fb8: 	jbe	.Ltmp1932 # Offset: 8120
    00001fbe: 	movl	(%rax), %ecx
    00001fc0: 	cmpl	%esi, %ecx
    00001fc2: 	jge	.Ltmp1933 # Offset: 8130
    00001fc4: 	nopl	(%rax) # Size: 4
.Ltmp1934:
    00001fc8: 	movl	0x4(%rax), %ecx
    00001fcb: 	addq	$0x4, %rax
    00001fcf: 	cmpl	%ecx, %esi
    00001fd1: 	jg	.Ltmp1934 # Offset: 8145
    00001fd3: 	cmpq	%rax, %rdi
    00001fd6: 	jbe	.Ltmp1932 # Offset: 8150
.Ltmp1933:
    00001fdc: 	movl	%ecx, (%rdi)
    00001fde: 	movl	%r10d, (%rax)
.Ltmp1931:
    00001fe1: 	movq	%rdi, %r9
    00001fe4: 	jmp	.Ltmp1935 # Offset: 8164
.Ltmp1757:
    00001fe6: 	leaq	0xc0(%rsp), %rsi
    00001fee: 	xorl	%edx, %edx
    00001ff0: 	movq	%r12, %rdi
    00001ff3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8179
    00001ff8: 	movq	%rax, 0x5f30(%rsp)
    00002000: 	movq	%rax, %rdi
    00002003: 	movq	0xc0(%rsp), %rax
    0000200b: 	movq	%rax, 0x5f40(%rsp)
.Ltmp1940:
    00002013: 	movq	(%rsp), %rsi
    00002017: 	movq	%r14, %rdx
    0000201a: 	callq	memcpy@PLT # Offset: 8218
    0000201f: 	movq	0xc0(%rsp), %r14
    00002027: 	movq	0x5f30(%rsp), %rax
    0000202f: 	jmp	.Ltmp1759 # Offset: 8239
.Ltmp1841:
    00002034: 	testq	%r14, %r14
    00002037: 	jne	.Ltmp1936 # Offset: 8247
    0000203d: 	movq	(%rsp), %rax
    00002041: 	jmp	.Ltmp1937 # Offset: 8257
.Ltmp1840:
    00002046: 	movq	0x10(%rsp), %rsi
    0000204b: 	xorl	%edx, %edx
    0000204d: 	movq	%r13, %rdi
    00002050: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8272
    00002055: 	movq	%rax, 0x150(%rsp)
    0000205d: 	movq	%rax, %rdi
    00002060: 	movq	0xc0(%rsp), %rax
    00002068: 	movq	%rax, 0x160(%rsp)
.Ltmp1941:
    00002070: 	movq	0x8(%rsp), %rsi
    00002075: 	movq	%r14, %rdx
    00002078: 	callq	memcpy@PLT # Offset: 8312
    0000207d: 	movq	0xc0(%rsp), %r14
    00002085: 	movq	0x150(%rsp), %rax
    0000208d: 	jmp	.Ltmp1937 # Offset: 8333
.Ltmp1848:
    00002092: 	testq	%r14, %r14
    00002095: 	jne	.Ltmp1938 # Offset: 8341
    0000209b: 	movq	(%rsp), %rax
    0000209f: 	jmp	.Ltmp1939 # Offset: 8351
.Ltmp1847:
    000020a4: 	movq	0x10(%rsp), %rsi
    000020a9: 	xorl	%edx, %edx
    000020ab: 	movq	%r13, %rdi
    000020ae: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8366
    000020b3: 	movq	%rax, 0x150(%rsp)
    000020bb: 	movq	%rax, %rdi
    000020be: 	movq	0xc0(%rsp), %rax
    000020c6: 	movq	%rax, 0x160(%rsp)
.Ltmp1942:
    000020ce: 	movq	0x8(%rsp), %rsi
    000020d3: 	movq	%r14, %rdx
    000020d6: 	callq	memcpy@PLT # Offset: 8406
    000020db: 	movq	0xc0(%rsp), %r14
    000020e3: 	movq	0x150(%rsp), %rax
    000020eb: 	jmp	.Ltmp1939 # Offset: 8427
.Ltmp1762:
    000020f0: 	movq	%r13, %rdi
    000020f3: 	jmp	.Ltmp1940 # Offset: 8435
.Ltmp1763:
    000020f8: 	leaq	DATAat0x131cf(%rip), %rdi
    000020ff: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8447
.Ltmp1839:
    00002104: 	leaq	DATAat0x13118(%rip), %rdi
    0000210b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8459
.Ltmp1842:
    00002110: 	leaq	DATAat0x131cf(%rip), %rdi
    00002117: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8471
.Ltmp1846:
    0000211c: 	leaq	DATAat0x13118(%rip), %rdi
    00002123: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8483
.Ltmp1849:
    00002128: 	leaq	DATAat0x131cf(%rip), %rdi
    0000212f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8495
.Ltmp1902:
    00002134: 	callq	__stack_chk_fail@PLT # Offset: 8500
.Ltmp1936:
    00002139: 	movq	(%rsp), %rdi
    0000213d: 	jmp	.Ltmp1941 # Offset: 8509
.Ltmp1938:
    00002142: 	movq	(%rsp), %rdi
    00002146: 	jmp	.Ltmp1942 # Offset: 8518
.Ltmp1756:
    00002148: 	leaq	DATAat0x13118(%rip), %rdi
    0000214f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8527
    00002154: 	endbr64
.Ltmp1950:
    00002158: 	movq	%rax, %rbx
    0000215b: 	jmp	.Ltmp1943 # Offset: 8539
    0000215d: 	endbr64
    00002161: 	movq	%rax, %rbx
    00002164: 	jmp	.Ltmp1944 # Offset: 8548
.Ltmp1947:
    00002166: 	movq	0x150(%rsp), %rdi
    0000216e: 	cmpq	(%rsp), %rdi
    00002172: 	je	.Ltmp1944 # Offset: 8562
    00002174: 	movq	0x160(%rsp), %rax
    0000217c: 	leaq	0x1(%rax), %rsi
    00002180: 	callq	_ZdlPvm@PLT # Offset: 8576
.Ltmp1944:
    00002185: 	movq	0x130(%rsp), %rdi
    0000218d: 	leaq	0x140(%rsp), %rax
    00002195: 	cmpq	%rax, %rdi
    00002198: 	je	.Ltmp1945 # Offset: 8600
    0000219a: 	movq	0x140(%rsp), %rax
    000021a2: 	leaq	0x1(%rax), %rsi
    000021a6: 	callq	_ZdlPvm@PLT # Offset: 8614
.Ltmp1945:
    000021ab: 	movq	0x110(%rsp), %rdi
    000021b3: 	leaq	0x120(%rsp), %rax
    000021bb: 	cmpq	%rax, %rdi
    000021be: 	je	.Ltmp1946 # Offset: 8638
    000021c4: 	movq	0x120(%rsp), %rax
    000021cc: 	leaq	0x1(%rax), %rsi
    000021d0: 	callq	_ZdlPvm@PLT # Offset: 8656
    000021d5: 	jmp	.Ltmp1946 # Offset: 8661
.Ltmp1943:
    000021da: 	movq	0x150(%rsp), %rdi
    000021e2: 	cmpq	(%rsp), %rdi
    000021e6: 	je	.Ltmp1945 # Offset: 8678
    000021e8: 	movq	0x160(%rsp), %rax
    000021f0: 	leaq	0x1(%rax), %rsi
    000021f4: 	callq	_ZdlPvm@PLT # Offset: 8692
    000021f9: 	jmp	.Ltmp1945 # Offset: 8697
    000021fb: 	endbr64
.Ltmp1954:
    000021ff: 	movq	%rax, %rbx
    00002202: 	jmp	.Ltmp1947 # Offset: 8706
    00002207: 	endbr64
.Ltmp1951:
    0000220b: 	movq	%rax, %rbp
    0000220e: 	movq	0x5f30(%rsp), %rdi
    00002216: 	cmpq	%r13, %rdi
    00002219: 	je	.Ltmp1948 # Offset: 8729
.Ltmp1959:
    0000221b: 	movq	0x5f40(%rsp), %rax
    00002223: 	leaq	0x1(%rax), %rsi
    00002227: 	callq	_ZdlPvm@PLT # Offset: 8743
.Ltmp1948:
    0000222c: 	movq	0xd0(%rsp), %rdi
    00002234: 	cmpq	0x70(%rsp), %rdi
    00002239: 	je	.Ltmp1949 # Offset: 8761
    0000223b: 	movq	0xe0(%rsp), %rax
    00002243: 	leaq	0x1(%rax), %rsi
    00002247: 	callq	_ZdlPvm@PLT # Offset: 8775
.Ltmp1949:
    0000224c: 	movq	%rbp, %rdi
    0000224f: 	callq	_Unwind_Resume@PLT # Offset: 8783
    00002254: 	endbr64
    00002258: 	jmp	.Ltmp1950 # Offset: 8792
    0000225d: 	endbr64
    00002261: 	jmp	.Ltmp1950 # Offset: 8801
    00002266: 	endbr64
    0000226a: 	jmp	.Ltmp1951 # Offset: 8810
    0000226c: 	endbr64
    00002270: 	jmp	.Ltmp1951 # Offset: 8816
    00002272: 	endbr64
    00002276: 	jmp	.Ltmp1951 # Offset: 8822
    00002278: 	endbr64
    0000227c: 	movq	%rax, %rbx
    0000227f: 	jmp	.Ltmp1946 # Offset: 8831
    00002281: 	endbr64
    00002285: 	movq	%rax, %rbx
    00002288: 	jmp	.Ltmp1952 # Offset: 8840
    0000228a: 	endbr64
    0000228e: 	jmp	.Ltmp1951 # Offset: 8846
.Ltmp1952:
    00002293: 	movq	0x150(%rsp), %rdi
    0000229b: 	leaq	0x160(%rsp), %rax
    000022a3: 	cmpq	%rax, %rdi
    000022a6: 	je	.Ltmp1946 # Offset: 8870
.Ltmp1957:
    000022a8: 	movq	0x160(%rsp), %rax
    000022b0: 	leaq	0x1(%rax), %rsi
    000022b4: 	callq	_ZdlPvm@PLT # Offset: 8884
.Ltmp1946:
    000022b9: 	movq	0xf0(%rsp), %rdi
    000022c1: 	leaq	0x100(%rsp), %rax
    000022c9: 	cmpq	%rax, %rdi
    000022cc: 	je	.Ltmp1953 # Offset: 8908
    000022ce: 	movq	0x100(%rsp), %rax
    000022d6: 	leaq	0x1(%rax), %rsi
    000022da: 	callq	_ZdlPvm@PLT # Offset: 8922
.Ltmp1953:
    000022df: 	movq	%rbx, %rbp
    000022e2: 	jmp	.Ltmp1948 # Offset: 8930
    000022e7: 	endbr64
    000022eb: 	jmp	.Ltmp1954 # Offset: 8939
    000022f0: 	endbr64
    000022f4: 	jmp	.Ltmp1954 # Offset: 8948
    000022f9: 	endbr64
    000022fd: 	jmp	.Ltmp1954 # Offset: 8957
    00002302: 	endbr64
    00002306: 	jmp	.Ltmp1954 # Offset: 8966
    0000230b: 	endbr64
    0000230f: 	jmp	.Ltmp1954 # Offset: 8975
    00002314: 	endbr64
    00002318: 	jmp	.Ltmp1954 # Offset: 8984
    0000231d: 	endbr64
.Ltmp1956:
    00002321: 	movq	%rax, %rbx
    00002324: 	jmp	.Ltmp1955 # Offset: 8996
    00002326: 	endbr64
    0000232a: 	jmp	.Ltmp1956 # Offset: 9002
    0000232c: 	endbr64
    00002330: 	jmp	.Ltmp1956 # Offset: 9008
    00002332: 	endbr64
    00002336: 	jmp	.Ltmp1956 # Offset: 9014
.Ltmp1955:
    00002338: 	movq	0x150(%rsp), %rdi
    00002340: 	cmpq	(%rsp), %rdi
    00002344: 	jne	.Ltmp1957 # Offset: 9028
    0000234a: 	jmp	.Ltmp1946 # Offset: 9034
    0000234f: 	endbr64
    00002353: 	movq	%rax, %rbx
    00002356: 	jmp	.Ltmp1945 # Offset: 9046
    0000235b: 	endbr64
    0000235f: 	jmp	.Ltmp1950 # Offset: 9055
    00002364: 	endbr64
    00002368: 	jmp	.Ltmp1950 # Offset: 9064
    0000236d: 	endbr64
    00002371: 	jmp	.Ltmp1951 # Offset: 9073
    00002376: 	endbr64
    0000237a: 	jmp	.Ltmp1950 # Offset: 9082
    0000237f: 	endbr64
    00002383: 	jmp	.Ltmp1950 # Offset: 9091
    00002388: 	endbr64
    0000238c: 	movq	%rax, %rbp
    0000238f: 	jmp	.Ltmp1958 # Offset: 9103
    00002391: 	endbr64
    00002395: 	jmp	.Ltmp1950 # Offset: 9109
.Ltmp1958:
    0000239a: 	movq	0x5f30(%rsp), %rdi
    000023a2: 	leaq	0x5f40(%rsp), %rax
    000023aa: 	cmpq	%rax, %rdi
    000023ad: 	jne	.Ltmp1959 # Offset: 9133
    000023b3: 	jmp	.Ltmp1948 # Offset: 9139
    000023b8: 	endbr64
    000023bc: 	movq	%rax, %rbp
    000023bf: 	jmp	.Ltmp1948 # Offset: 9151
    000023c4: 	endbr64
    000023c8: 	jmp	.Ltmp1956 # Offset: 9160
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_ZN9benchmark9__sift_inIPmmEEvlT_lT0_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0xf6a0
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0xf6a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPmmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rdi
    00000010: 	movq	%rdx, %r8
    00000013: 	movq	%rcx, %r9
    00000016: 	cmpq	%r11, %rax
    00000019: 	jge	.Ltmp1960 # Offset: 25
    0000001f: 	movq	%rdx, %r10
    00000022: 	jmp	.Ltmp1961 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1963:
    00000028: 	leaq	-0x1(%rax), %rbx
    0000002c: 	leaq	(%rax,%rax), %rcx
    00000030: 	movq	%rsi, (%rdi,%r10,8)
    00000034: 	leaq	(%rdi,%rbx,8), %rdx
    00000038: 	movq	%rbx, %rax
    0000003b: 	cmpq	%rcx, %r11
    0000003e: 	jle	.Ltmp1962 # Offset: 62
.Ltmp1964:
    00000040: 	movq	%rax, %r10
    00000043: 	movq	%rcx, %rax
.Ltmp1961:
    00000046: 	leaq	(,%rax,8), %rdx
    0000004e: 	movq	-0x8(%rdi,%rdx), %rsi
    00000053: 	addq	%rdi, %rdx
    00000056: 	movq	(%rdx), %rcx
    00000059: 	cmpq	%rcx, %rsi
    0000005c: 	jae	.Ltmp1963 # Offset: 92
    0000005e: 	movq	%rcx, (%rdi,%r10,8)
    00000062: 	leaq	0x2(%rax,%rax), %rcx
    00000067: 	cmpq	%rcx, %r11
    0000006a: 	jg	.Ltmp1964 # Offset: 106
.Ltmp1962:
    0000006c: 	cmpq	%rcx, %r11
    0000006f: 	je	.Ltmp1965 # Offset: 111
.Ltmp1970:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp1966 # Offset: 133
    00000087: 	jmp	.Ltmp1967 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1969:
    00000090: 	movq	%rsi, (%rdx)
    00000093: 	leaq	-0x1(%rcx), %rdx
    00000097: 	movq	%rdx, %rax
    0000009a: 	shrq	$0x3f, %rax
    0000009e: 	addq	%rdx, %rax
    000000a1: 	sarq	%rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	movq	%rcx, %rax
    000000aa: 	cmpq	%rcx, %r8
    000000ad: 	jge	.Ltmp1968 # Offset: 173
    000000af: 	movq	%rdx, %rcx
.Ltmp1966:
    000000b2: 	leaq	(%rdi,%rcx,8), %r10
    000000b6: 	leaq	(%rdi,%rax,8), %rdx
    000000ba: 	movq	(%r10), %rsi
    000000bd: 	cmpq	%r9, %rsi
    000000c0: 	jb	.Ltmp1969 # Offset: 192
.Ltmp1967:
    000000c2: 	movq	%r9, (%rdx)
    000000c5: 	popq	%rbx
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1968:
    000000d0: 	movq	%r10, %rdx
    000000d3: 	movq	%r9, (%rdx)
    000000d6: 	popq	%rbx
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1960:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1967 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1965:
    000000f0: 	movq	-0x8(%rdi,%rcx,8), %rax
    000000f5: 	movq	%rax, (%rdx)
    000000f8: 	leaq	-0x1(%rcx), %rax
    000000fc: 	leaq	(%rdi,%rax,8), %rdx
    00000100: 	jmp	.Ltmp1970 # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPmmEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0xf7b0
  Size        : 0x106
  MaxSize     : 0x110
  Offset      : 0xf7b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rcx, %r9
    00000010: 	pushq	%rbx
    00000011: 	movq	0x8(%rsi), %rcx
    00000015: 	cmpq	%rdi, %rdx
    00000018: 	jge	.Ltmp1971 # Offset: 24
    0000001e: 	movq	%rdi, %rbp
    00000021: 	movq	%r8, %rbx
    00000024: 	jmp	.Ltmp1972 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1974:
    00000030: 	movq	%rax, %rbx
.Ltmp1972:
    00000033: 	leaq	-0x1(%rdx), %rax
    00000037: 	leaq	(,%rax,8), %r10
    0000003f: 	leaq	(%rcx,%r10), %rsi
    00000043: 	leaq	0x8(%rcx,%r10), %r10
    00000048: 	movq	(%rsi), %rdi
    0000004b: 	movq	(%r10), %r11
    0000004e: 	cmpq	%rdi, %r11
    00000051: 	jbe	.Ltmp1973 # Offset: 81
    00000053: 	movq	%rdx, %rax
    00000056: 	movq	%r11, %rdi
    00000059: 	movq	%r10, %rsi
    0000005c: 	addq	$0x1, %rdx
.Ltmp1973:
    00000060: 	addq	%rdx, %rdx
    00000063: 	movq	%rdi, (%rcx,%rbx,8)
    00000067: 	cmpq	%rdx, %rbp
    0000006a: 	jg	.Ltmp1974 # Offset: 106
    0000006c: 	je	.Ltmp1975 # Offset: 108
.Ltmp1980:
    00000072: 	leaq	-0x1(%rax), %rdx
    00000076: 	movq	%rdx, %rdi
    00000079: 	shrq	$0x3f, %rdi
    0000007d: 	addq	%rdx, %rdi
    00000080: 	sarq	%rdi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1976 # Offset: 134
    00000088: 	jmp	.Ltmp1977 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1979:
    00000090: 	movq	%rdx, (%rsi)
    00000093: 	leaq	-0x1(%rdi), %rdx
    00000097: 	movq	%rdx, %rax
    0000009a: 	shrq	$0x3f, %rax
    0000009e: 	addq	%rdx, %rax
    000000a1: 	sarq	%rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	movq	%rdi, %rax
    000000aa: 	cmpq	%rdi, %r8
    000000ad: 	jge	.Ltmp1978 # Offset: 173
    000000af: 	movq	%rdx, %rdi
.Ltmp1976:
    000000b2: 	leaq	(%rcx,%rdi,8), %r10
    000000b6: 	leaq	(%rcx,%rax,8), %rsi
    000000ba: 	movq	(%r10), %rdx
    000000bd: 	cmpq	%r9, %rdx
    000000c0: 	jb	.Ltmp1979 # Offset: 192
.Ltmp1977:
    000000c2: 	movq	%r9, (%rsi)
    000000c5: 	popq	%rbx
    000000c6: 	popq	%rbp
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1978:
    000000d0: 	movq	%r10, %rsi
    000000d3: 	movq	%r9, (%rsi)
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1971:
    000000e0: 	leaq	(%rcx,%r8,8), %rsi
    000000e4: 	jne	.Ltmp1977 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1975:
    000000f0: 	leaq	-0x1(%rdx), %rax
    000000f4: 	leaq	(%rcx,%rax,8), %rdx
    000000f8: 	movq	(%rdx), %rdi
    000000fb: 	movq	%rdi, (%rsi)
    000000fe: 	movq	%rdx, %rsi
    00000101: 	jmp	.Ltmp1980 # Offset: 257
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_"

Binary Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z14test_heap_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z14test_heap_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/stepanov_array.cpp/1
  Number      : 72
  State       : disassembled
  Address     : 0xf8c0
  Size        : 0x24b
  MaxSize     : 0x250
  Offset      : 0xf8c0
  Section     : .text
  Orc Section : .local.text._Z14test_heap_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	xorl	%r13d, %r13d
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x58, %rsp
    00000011: 	movq	%rdi, 0x8(%rsp)
    00000016: 	leaq	0x30(%rsp), %rbp
    0000001b: 	movq	%rsi, 0x10(%rsp)
    00000020: 	movq	%rdx, 0x18(%rsp)
    00000025: 	movq	%rcx, 0x20(%rsp)
    0000002a: 	movq	%r8, 0x28(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x48(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	movl	%eax, 0x4(%rsp)
    00000055: 	testl	%eax, %eax
    00000057: 	jle	.Ltmp1981 # Offset: 87
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1992:
    00000060: 	movq	0x18(%rsp), %rax
    00000065: 	movq	0x8(%rax), %r15
    00000069: 	movq	0x10(%rsp), %rax
    0000006e: 	movq	0x8(%rax), %rsi
    00000072: 	movq	0x8(%rsp), %rax
    00000077: 	movq	0x8(%rax), %rcx
    0000007b: 	cmpq	%rcx, %rsi
    0000007e: 	je	.Ltmp1982 # Offset: 126
    00000080: 	subq	%rcx, %rsi
    00000083: 	leaq	0x8(%rcx), %rdx
    00000087: 	leaq	-0x8(%rsi), %rdi
    0000008b: 	cmpq	%rdx, %r15
    0000008e: 	je	.Ltmp1983 # Offset: 142
    00000094: 	cmpq	$0x10, %rdi
    00000098: 	jbe	.Ltmp1983 # Offset: 152
    0000009e: 	shrq	$0x3, %rdi
    000000a2: 	xorl	%edx, %edx
    000000a4: 	addq	$0x1, %rdi
    000000a8: 	movq	%rdi, %rsi
    000000ab: 	shrq	%rsi
    000000ae: 	shlq	$0x4, %rsi
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1984:
    000000b8: 	movdqu	(%rcx,%rdx), %xmm1
    000000bd: 	movups	%xmm1, (%r15,%rdx)
    000000c2: 	addq	$0x10, %rdx
    000000c6: 	cmpq	%rsi, %rdx
    000000c9: 	jne	.Ltmp1984 # Offset: 201
    000000cb: 	movq	%rdi, %rdx
    000000ce: 	andq	$-0x2, %rdx
    000000d2: 	leaq	(,%rdx,8), %rsi
    000000da: 	addq	%rsi, %rcx
    000000dd: 	addq	%r15, %rsi
    000000e0: 	cmpq	%rdi, %rdx
    000000e3: 	je	.Ltmp1982 # Offset: 227
    000000e5: 	movq	(%rcx), %rdx
    000000e8: 	movq	%rdx, (%rsi)
.Ltmp1982:
    000000eb: 	movq	0x20(%rsp), %rax
    000000f0: 	movq	0x8(%rax), %r12
    000000f4: 	movq	%r12, %rdx
    000000f7: 	subq	%r15, %rdx
    000000fa: 	movq	%rdx, %rbx
    000000fd: 	shrq	$0x3f, %rdx
    00000101: 	sarq	$0x3, %rbx
    00000105: 	addq	%rbx, %rdx
    00000108: 	sarq	%rdx
    0000010b: 	subq	$0x1, %rdx
    0000010f: 	movq	%rdx, %r14
    00000112: 	js	.Ltmp1985 # Offset: 274
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp1986:
    00000118: 	movq	(%r15,%r14,8), %rcx
    0000011c: 	movq	%r14, %rdx
    0000011f: 	movq	%rbp, %rsi
    00000122: 	movq	%rbx, %rdi
    00000125: 	movq	%r15, 0x38(%rsp)
    0000012a: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_ # Offset: 298
    0000012f: 	subq	$0x1, %r14
    00000133: 	jae	.Ltmp1986 # Offset: 307
.Ltmp1985:
    00000135: 	subq	$0x1, %rbx
    00000139: 	testq	%rbx, %rbx
    0000013c: 	jle	.Ltmp1987 # Offset: 316
    0000013e: 	nop # Size: 2
.Ltmp1988:
    00000140: 	movq	(%r15), %rax
    00000143: 	movq	(%r15,%rbx,8), %rcx
    00000147: 	xorl	%edx, %edx
    00000149: 	movq	%rbx, %rdi
    0000014c: 	movq	%rbp, %rsi
    0000014f: 	movq	%r15, 0x38(%rsp)
    00000154: 	movq	%rax, (%r15,%rbx,8)
    00000158: 	callq	_ZN9benchmark9__sift_inISt16reverse_iteratorIS1_IPmEEmEEvlT_lT0_ # Offset: 344
    0000015d: 	subq	$0x1, %rbx
    00000161: 	jne	.Ltmp1988 # Offset: 353
.Ltmp1987:
    00000163: 	leaq	0x8(%r15), %rax
    00000167: 	jmp	.Ltmp1989 # Offset: 359
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp1991:
    00000170: 	addq	$0x8, %rax
    00000174: 	movq	-0x10(%rax), %rdi
    00000178: 	cmpq	%rdi, (%rdx)
    0000017b: 	jb	.Ltmp1990 # Offset: 379
.Ltmp1989:
    0000017d: 	movq	%rax, %rdx
    00000180: 	cmpq	%rax, %r12
    00000183: 	jne	.Ltmp1991 # Offset: 387
    00000185: 	addl	$0x1, %r13d
    00000189: 	cmpl	0x4(%rsp), %r13d
    0000018e: 	jl	.Ltmp1992 # Offset: 398
.Ltmp1981:
    00000194: 	callq	clock@PLT # Offset: 404
    00000199: 	movq	%rax, end_time(%rip)
    000001a0: 	movq	0x48(%rsp), %rdx
    000001a5: 	subq	%fs:0x28, %rdx
    000001ae: 	jne	.Ltmp1993 # Offset: 430
    000001b4: 	subq	start_time(%rip), %rax
    000001bb: 	pxor	%xmm0, %xmm0
    000001bf: 	movq	0x28(%rsp), %rdi
    000001c4: 	cvtsi2sd	%rax, %xmm0
    000001c9: 	divsd	DATAat0x13600(%rip), %xmm0
    000001d1: 	addq	$0x58, %rsp
    000001d5: 	popq	%rbx
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	popq	%r14
    000001dd: 	popq	%r15
    000001df: 	jmp	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # TAILCALL  # Offset: 479
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp1990:
    000001e8: 	movq	0x28(%rsp), %rax
    000001ed: 	leaq	DATAat0x131ba(%rip), %rsi
    000001f4: 	movl	$0x1, %edi
    000001f9: 	addl	$0x1, %r13d
    000001fd: 	movq	(%rax), %rdx
    00000200: 	xorl	%eax, %eax
    00000202: 	callq	__printf_chk@PLT # Offset: 514
    00000207: 	movl	iterations(%rip), %eax
    0000020d: 	movl	%eax, 0x4(%rsp)
    00000211: 	cmpl	0x4(%rsp), %r13d
    00000216: 	jl	.Ltmp1992 # Offset: 534
    0000021c: 	jmp	.Ltmp1981 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp1983:
    00000228: 	xorl	%edx, %edx
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1994:
    00000230: 	movq	(%rcx,%rdx), %rax
    00000234: 	movq	%rax, (%r15,%rdx)
    00000238: 	addq	$0x8, %rdx
    0000023c: 	cmpq	%rsi, %rdx
    0000023f: 	jne	.Ltmp1994 # Offset: 575
    00000241: 	jmp	.Ltmp1982 # Offset: 577
.Ltmp1993:
    00000246: 	callq	__stack_chk_fail@PLT # Offset: 582
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_heap_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPmmEEmEEmEEvlT_lT0_" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0xfb10
  Size        : 0xf6
  MaxSize     : 0x100
  Offset      : 0xfb10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPmmEEmEEmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rcx, %r9
    00000010: 	pushq	%rbx
    00000011: 	cmpq	%rdi, %rdx
    00000014: 	jge	.Ltmp1995 # Offset: 20
    0000001a: 	movq	%rdi, %rbp
    0000001d: 	movq	%r8, %rbx
    00000020: 	jmp	.Ltmp1996 # Offset: 32
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1998:
    00000028: 	movq	%rax, %rbx
.Ltmp1996:
    0000002b: 	leaq	-0x1(%rdx), %rax
    0000002f: 	leaq	(,%rax,8), %r10
    00000037: 	leaq	(%rsi,%r10), %rcx
    0000003b: 	leaq	0x8(%r10,%rsi), %r10
    00000040: 	movq	(%rcx), %rdi
    00000043: 	movq	(%r10), %r11
    00000046: 	cmpq	%rdi, %r11
    00000049: 	jbe	.Ltmp1997 # Offset: 73
    0000004b: 	movq	%rdx, %rax
    0000004e: 	movq	%r11, %rdi
    00000051: 	movq	%r10, %rcx
    00000054: 	addq	$0x1, %rdx
.Ltmp1997:
    00000058: 	addq	%rdx, %rdx
    0000005b: 	movq	%rdi, (%rsi,%rbx,8)
    0000005f: 	cmpq	%rdx, %rbp
    00000062: 	jg	.Ltmp1998 # Offset: 98
    00000064: 	je	.Ltmp1999 # Offset: 100
.Ltmp2004:
    00000066: 	leaq	-0x1(%rax), %rdx
    0000006a: 	movq	%rdx, %rdi
    0000006d: 	shrq	$0x3f, %rdi
    00000071: 	addq	%rdx, %rdi
    00000074: 	sarq	%rdi
    00000077: 	cmpq	%r8, %rax
    0000007a: 	jg	.Ltmp2000 # Offset: 122
    0000007c: 	jmp	.Ltmp2001 # Offset: 124
    0000007e: 	nop # Size: 2
.Ltmp2003:
    00000080: 	movq	%rdx, (%rcx)
    00000083: 	leaq	-0x1(%rdi), %rdx
    00000087: 	movq	%rdx, %rax
    0000008a: 	shrq	$0x3f, %rax
    0000008e: 	addq	%rdx, %rax
    00000091: 	sarq	%rax
    00000094: 	movq	%rax, %rdx
    00000097: 	movq	%rdi, %rax
    0000009a: 	cmpq	%rdi, %r8
    0000009d: 	jge	.Ltmp2002 # Offset: 157
    0000009f: 	movq	%rdx, %rdi
.Ltmp2000:
    000000a2: 	leaq	(%rsi,%rdi,8), %r10
    000000a6: 	leaq	(%rsi,%rax,8), %rcx
    000000aa: 	movq	(%r10), %rdx
    000000ad: 	cmpq	%r9, %rdx
    000000b0: 	jb	.Ltmp2003 # Offset: 176
.Ltmp2001:
    000000b2: 	movq	%r9, (%rcx)
    000000b5: 	popq	%rbx
    000000b6: 	popq	%rbp
    000000b7: 	retq # Offset: 183
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2002:
    000000c0: 	movq	%r10, %rcx
    000000c3: 	movq	%r9, (%rcx)
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1995:
    000000d0: 	leaq	(%rsi,%r8,8), %rcx
    000000d4: 	jne	.Ltmp2001 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1999:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,8), %rdx
    000000e8: 	movq	(%rdx), %rdi
    000000eb: 	movq	%rdi, (%rcx)
    000000ee: 	movq	%rdx, %rcx
    000000f1: 	jmp	.Ltmp2004 # Offset: 241
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPmmEEmEEmEEvlT_lT0_"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0xfc10
  Size        : 0x2634
  MaxSize     : 0x2634
  Offset      : 0xfc10
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp2005:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp2005 # Offset: 37
    00000027: 	subq	$0xb88, %rsp
    0000002e: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm2
    00000036: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm3
    0000003e: 	movq	"_ZL7gLabels/1"+56(%rip), %r13
    00000045: 	movhlps	%xmm2, %xmm4
    00000048: 	movq	%xmm3, %rbp
    0000004d: 	movq	%xmm4, %rbx
    00000052: 	leaq	0x8(%rbx), %r12
    00000056: 	movq	%r12, %r14
    00000059: 	movq	%fs:0x28, %rax
    00000062: 	movq	%rax, 0xfb78(%rsp)
    0000006a: 	xorl	%eax, %eax
    0000006c: 	leaq	0xe0(%rsp), %rax
    00000074: 	movb	$0x0, 0xe8(%rsp)
    0000007c: 	movq	%rax, 0x70(%rsp)
    00000081: 	movq	%rax, 0xd0(%rsp)
    00000089: 	movabsq	$0x745f3436746e6975, %rax
    00000093: 	movq	%rax, 0xe0(%rsp)
    0000009b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000a2: 	movq	$0x8, 0xd8(%rsp)
    000000ae: 	movq	%rax, (%rsp)
    000000b2: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000b9: 	movaps	%xmm3, 0x10(%rsp)
    000000be: 	movq	%rax, 0x8(%rsp)
    000000c3: 	movaps	%xmm2, 0x30(%rsp)
    000000c8: 	movq	%xmm4, 0x28(%rsp)
    000000ce: 	movq	%xmm2, 0x20(%rsp)
    000000d4: 	cmpq	%r12, %rax
    000000d7: 	jbe	.Ltmp2006 # Offset: 215
.Ltmp2009:
    000000d9: 	movq	(%r14), %r15
    000000dc: 	leaq	0x200(%r15), %rbx
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2008:
    000000e8: 	movq	(%r15), %rdi
    000000eb: 	leaq	0x10(%r15), %rdx
    000000ef: 	cmpq	%rdx, %rdi
    000000f2: 	je	.Ltmp2007 # Offset: 242
    000000f8: 	movq	0x10(%r15), %rax
    000000fc: 	addq	$0x20, %r15
    00000100: 	leaq	0x1(%rax), %rsi
    00000104: 	callq	_ZdlPvm@PLT # Offset: 260
    00000109: 	cmpq	%rbx, %r15
    0000010c: 	jne	.Ltmp2008 # Offset: 268
    0000010e: 	addq	$0x8, %r14
    00000112: 	cmpq	%r14, 0x8(%rsp)
    00000117: 	ja	.Ltmp2009 # Offset: 279
.Ltmp2006:
    00000119: 	movq	0x28(%rsp), %rbx
    0000011e: 	cmpq	%rbx, 0x8(%rsp)
    00000123: 	jne	.Ltmp2010 # Offset: 291
    00000125: 	jmp	.Ltmp2011 # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2013:
    00000130: 	movq	0x10(%rbp), %rax
    00000134: 	addq	$0x20, %rbp
    00000138: 	leaq	0x1(%rax), %rsi
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
.Ltmp2010:
    00000141: 	cmpq	%rbp, 0x20(%rsp)
    00000146: 	je	.Ltmp2012 # Offset: 326
.Ltmp2014:
    00000148: 	movq	(%rbp), %rdi
    0000014c: 	leaq	0x10(%rbp), %rax
    00000150: 	cmpq	%rax, %rdi
    00000153: 	jne	.Ltmp2013 # Offset: 339
    00000155: 	addq	$0x20, %rbp
    00000159: 	cmpq	0x20(%rsp), %rbp
    0000015e: 	jne	.Ltmp2014 # Offset: 350
    00000160: 	cmpq	%r13, (%rsp)
    00000164: 	je	.Ltmp2015 # Offset: 356
.Ltmp2017:
    00000166: 	movq	(%r13), %rdi
    0000016a: 	leaq	0x10(%r13), %rax
    0000016e: 	cmpq	%rax, %rdi
    00000171: 	je	.Ltmp2016 # Offset: 369
    00000173: 	movq	0x10(%r13), %rax
    00000177: 	leaq	0x1(%rax), %rsi
    0000017b: 	callq	_ZdlPvm@PLT # Offset: 379
.Ltmp2016:
    00000180: 	addq	$0x20, %r13
.Ltmp2012:
    00000184: 	cmpq	%r13, (%rsp)
    00000188: 	jne	.Ltmp2017 # Offset: 392
.Ltmp2015:
    0000018a: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00000191: 	leaq	0x8(%rax), %rbx
    00000195: 	cmpq	%r12, %rbx
    00000198: 	jbe	.Ltmp2018 # Offset: 408
.Ltmp2019:
    0000019a: 	movq	(%r12), %rdi
    0000019e: 	movl	$0x200, %esi
    000001a3: 	addq	$0x8, %r12
    000001a7: 	callq	_ZdlPvm@PLT # Offset: 423
    000001ac: 	cmpq	%r12, %rbx
    000001af: 	ja	.Ltmp2019 # Offset: 431
.Ltmp2018:
    000001b1: 	movl	iterations(%rip), %eax
    000001b7: 	movsd	init_value(%rip), %xmm0
    000001bf: 	movdqa	0x10(%rsp), %xmm4
    000001c5: 	movdqa	0x30(%rsp), %xmm5
    000001cb: 	movl	%eax, 0x7c(%rsp)
    000001cf: 	cvttsd2si	%xmm0, %eax
    000001d3: 	movaps	%xmm4, "_ZL7gLabels/1"+48(%rip)
    000001da: 	movaps	%xmm5, "_ZL7gLabels/1"+64(%rip)
    000001e1: 	addl	$0x1c8, %eax
    000001e6: 	comisd	DATAat0x13618(%rip), %xmm0
    000001ee: 	cltq
    000001f0: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000001f7: 	jae	.Ltmp2020 # Offset: 503
    000001fd: 	cvttsd2si	%xmm0, %rax
.Ltmp2030:
    00000202: 	movq	%rax, %xmm0
    00000207: 	leaq	0x170(%rsp), %rbp
    0000020f: 	leaq	0x3ff0(%rsp), %r12
    00000217: 	punpcklqdq	%xmm0, %xmm0
    0000021b: 	movq	%rbp, %rax
.Ltmp2021:
    0000021e: 	movaps	%xmm0, (%rax)
    00000221: 	addq	$0x10, %rax
    00000225: 	cmpq	%rax, %r12
    00000228: 	jne	.Ltmp2021 # Offset: 552
    0000022a: 	leaq	0xbcf0(%rsp), %r15
    00000232: 	leaq	0x7e70(%rsp), %rbx
    0000023a: 	movq	%r15, 0x50(%rsp)
    0000023f: 	movq	%rbx, %rax
.Ltmp2022:
    00000242: 	movaps	%xmm0, (%rax)
    00000245: 	addq	$0x10, %rax
    00000249: 	cmpq	%rax, %r15
    0000024c: 	jne	.Ltmp2022 # Offset: 588
    0000024e: 	movq	0xd0(%rsp), %r14
    00000256: 	leaq	0xbd00(%rsp), %rax
    0000025e: 	movq	0xd8(%rsp), %r13
    00000266: 	movq	%rax, 0x8(%rsp)
    0000026b: 	movq	%rax, 0xbcf0(%rsp)
    00000273: 	movq	%r14, %rax
    00000276: 	addq	%r13, %rax
    00000279: 	je	.Ltmp2023 # Offset: 633
    0000027b: 	testq	%r14, %r14
    0000027e: 	je	.Ltmp2024 # Offset: 638
.Ltmp2023:
    00000284: 	movq	%r13, 0xc0(%rsp)
    0000028c: 	cmpq	$0xf, %r13
    00000290: 	ja	.Ltmp2025 # Offset: 656
    00000296: 	cmpq	$0x1, %r13
    0000029a: 	jne	.Ltmp2026 # Offset: 666
    000002a0: 	movzbl	(%r14), %eax
    000002a4: 	movb	%al, 0xbd00(%rsp)
    000002ab: 	movq	0x8(%rsp), %rax
    000002b0: 	jmp	.Ltmp2027 # Offset: 688
.Ltmp2028:
    000002b5: 	addq	$0x20, %rbp
.Ltmp2011:
    000002b9: 	cmpq	%rbp, (%rsp)
    000002bd: 	je	.Ltmp2015 # Offset: 701
.Ltmp2029:
    000002c3: 	movq	(%rbp), %rdi
    000002c7: 	leaq	0x10(%rbp), %rax
    000002cb: 	cmpq	%rax, %rdi
    000002ce: 	je	.Ltmp2028 # Offset: 718
    000002d0: 	movq	0x10(%rbp), %rax
    000002d4: 	addq	$0x20, %rbp
    000002d8: 	leaq	0x1(%rax), %rsi
    000002dc: 	callq	_ZdlPvm@PLT # Offset: 732
    000002e1: 	cmpq	%rbp, (%rsp)
    000002e5: 	jne	.Ltmp2029 # Offset: 741
    000002e7: 	jmp	.Ltmp2015 # Offset: 743
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp2007:
    000002f0: 	addq	$0x20, %r15
    000002f4: 	cmpq	%rbx, %r15
    000002f7: 	jne	.Ltmp2008 # Offset: 759
    000002fd: 	addq	$0x8, %r14
    00000301: 	cmpq	%r14, 0x8(%rsp)
    00000306: 	ja	.Ltmp2009 # Offset: 774
    0000030c: 	jmp	.Ltmp2006 # Offset: 780
.Ltmp2020:
    00000311: 	subsd	DATAat0x13618(%rip), %xmm0
    00000319: 	cvttsd2si	%xmm0, %rax
    0000031e: 	btcq	$0x3f, %rax
    00000323: 	jmp	.Ltmp2030 # Offset: 803
.Ltmp2026:
    00000328: 	testq	%r13, %r13
    0000032b: 	jne	.Ltmp2031 # Offset: 811
    00000331: 	movq	0x8(%rsp), %rax
.Ltmp2027:
    00000336: 	movq	%r13, 0xbcf8(%rsp)
    0000033e: 	movb	$0x0, (%rax,%r13)
    00000343: 	movabsq	$0x3fffffffffffffff, %rax
    0000034d: 	subq	0xbcf8(%rsp), %rax
    00000355: 	cmpq	$0x1a, %rax
    00000359: 	jbe	.Ltmp2032 # Offset: 857
    0000035f: 	movl	$0x1b, %edx
    00000364: 	leaq	DATAat0x131e4(%rip), %rsi
    0000036b: 	movq	%r15, %rdi
    0000036e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 878
    00000373: 	callq	clock@PLT # Offset: 883
    00000378: 	movsd	DATAat0x13610(%rip), %xmm6
    00000380: 	xorl	%r13d, %r13d
    00000383: 	movl	iterations(%rip), %ecx
    00000389: 	movq	%rax, start_time(%rip)
    00000390: 	leaq	DATAat0x131bf(%rip), %r14
    00000397: 	movsd	%xmm6, (%rsp)
    0000039c: 	testl	%ecx, %ecx
    0000039e: 	jle	.Ltmp2033 # Offset: 926
.Ltmp2037:
    000003a0: 	movq	%rbp, %rax
    000003a3: 	pxor	%xmm0, %xmm0
    000003a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2034:
    000003b0: 	paddq	(%rax), %xmm0
    000003b4: 	addq	$0x10, %rax
    000003b8: 	cmpq	%rax, %r12
    000003bb: 	jne	.Ltmp2034 # Offset: 955
    000003bd: 	movsd	(%rsp), %xmm1
    000003c2: 	mulsd	init_value(%rip), %xmm1
    000003ca: 	comisd	DATAat0x13618(%rip), %xmm1
    000003d2: 	jae	.Ltmp2035 # Offset: 978
    000003d8: 	cvttsd2si	%xmm1, %rdx
.Ltmp2193:
    000003dd: 	movdqa	%xmm0, %xmm1
    000003e1: 	psrldq	$0x8, %xmm1
    000003e6: 	paddq	%xmm1, %xmm0
    000003ea: 	movq	%xmm0, %rax
    000003ef: 	cmpq	%rax, %rdx
    000003f2: 	je	.Ltmp2036 # Offset: 1010
    000003f4: 	movq	0xbcf0(%rsp), %rdx
    000003fc: 	movq	%r14, %rsi
    000003ff: 	movl	$0x1, %edi
    00000404: 	xorl	%eax, %eax
    00000406: 	callq	__printf_chk@PLT # Offset: 1030
    0000040b: 	movl	iterations(%rip), %ecx
.Ltmp2036:
    00000411: 	addl	$0x1, %r13d
    00000415: 	cmpl	%ecx, %r13d
    00000418: 	jl	.Ltmp2037 # Offset: 1048
.Ltmp2033:
    0000041a: 	callq	clock@PLT # Offset: 1050
    0000041f: 	pxor	%xmm0, %xmm0
    00000423: 	movq	%r15, %rdi
    00000426: 	movq	%rax, end_time(%rip)
    0000042d: 	subq	start_time(%rip), %rax
    00000434: 	cvtsi2sd	%rax, %xmm0
    00000439: 	divsd	DATAat0x13600(%rip), %xmm0
    00000441: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1089
    00000446: 	movq	0xbcf0(%rsp), %rdi
    0000044e: 	cmpq	0x8(%rsp), %rdi
    00000453: 	je	.Ltmp2038 # Offset: 1107
    00000455: 	movq	0xbd00(%rsp), %rax
    0000045d: 	leaq	0x1(%rax), %rsi
    00000461: 	callq	_ZdlPvm@PLT # Offset: 1121
.Ltmp2038:
    00000466: 	leaq	0xd0(%rsp), %rax
    0000046e: 	leaq	DATAat0x13200(%rip), %rdx
    00000475: 	movq	%r15, %rdi
    00000478: 	movq	%rax, %rsi
    0000047b: 	movq	%rax, 0x20(%rsp)
    00000480: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1152
    00000485: 	callq	clock@PLT # Offset: 1157
    0000048a: 	movsd	DATAat0x13610(%rip), %xmm7
    00000492: 	xorl	%r13d, %r13d
    00000495: 	movl	iterations(%rip), %ecx
    0000049b: 	movq	%rax, start_time(%rip)
    000004a2: 	leaq	DATAat0x131bf(%rip), %r14
    000004a9: 	movsd	%xmm7, (%rsp)
    000004ae: 	testl	%ecx, %ecx
    000004b0: 	jle	.Ltmp2039 # Offset: 1200
.Ltmp2043:
    000004b2: 	movq	%rbx, %rax
    000004b5: 	pxor	%xmm0, %xmm0
    000004b9: 	nopl	(%rax) # Size: 7
.Ltmp2040:
    000004c0: 	paddq	(%rax), %xmm0
    000004c4: 	addq	$0x10, %rax
    000004c8: 	cmpq	%rax, %r15
    000004cb: 	jne	.Ltmp2040 # Offset: 1227
    000004cd: 	movsd	(%rsp), %xmm1
    000004d2: 	mulsd	init_value(%rip), %xmm1
    000004da: 	comisd	DATAat0x13618(%rip), %xmm1
    000004e2: 	jae	.Ltmp2041 # Offset: 1250
    000004e8: 	cvttsd2si	%xmm1, %rdx
.Ltmp2197:
    000004ed: 	movdqa	%xmm0, %xmm1
    000004f1: 	psrldq	$0x8, %xmm1
    000004f6: 	paddq	%xmm1, %xmm0
    000004fa: 	movq	%xmm0, %rax
    000004ff: 	cmpq	%rax, %rdx
    00000502: 	je	.Ltmp2042 # Offset: 1282
    00000504: 	movq	0xbcf0(%rsp), %rdx
    0000050c: 	movq	%r14, %rsi
    0000050f: 	movl	$0x1, %edi
    00000514: 	xorl	%eax, %eax
    00000516: 	callq	__printf_chk@PLT # Offset: 1302
    0000051b: 	movl	iterations(%rip), %ecx
.Ltmp2042:
    00000521: 	addl	$0x1, %r13d
    00000525: 	cmpl	%ecx, %r13d
    00000528: 	jl	.Ltmp2043 # Offset: 1320
.Ltmp2039:
    0000052a: 	callq	clock@PLT # Offset: 1322
    0000052f: 	pxor	%xmm0, %xmm0
    00000533: 	movq	%r15, %rdi
    00000536: 	movq	%rax, end_time(%rip)
    0000053d: 	subq	start_time(%rip), %rax
    00000544: 	cvtsi2sd	%rax, %xmm0
    00000549: 	divsd	DATAat0x13600(%rip), %xmm0
    00000551: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1361
    00000556: 	movq	0xbcf0(%rsp), %rdi
    0000055e: 	cmpq	0x8(%rsp), %rdi
    00000563: 	je	.Ltmp2044 # Offset: 1379
    00000565: 	movq	0xbd00(%rsp), %rax
    0000056d: 	leaq	0x1(%rax), %rsi
    00000571: 	callq	_ZdlPvm@PLT # Offset: 1393
.Ltmp2044:
    00000576: 	movq	0x20(%rsp), %rsi
    0000057b: 	leaq	DATAat0x132d0(%rip), %rdx
    00000582: 	movq	%r15, %rdi
    00000585: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1413
    0000058a: 	callq	clock@PLT # Offset: 1418
    0000058f: 	movsd	DATAat0x13610(%rip), %xmm4
    00000597: 	xorl	%r13d, %r13d
    0000059a: 	movl	iterations(%rip), %ecx
    000005a0: 	movq	%rax, start_time(%rip)
    000005a7: 	leaq	DATAat0x131bf(%rip), %r14
    000005ae: 	movsd	%xmm4, (%rsp)
    000005b3: 	testl	%ecx, %ecx
    000005b5: 	jle	.Ltmp2045 # Offset: 1461
.Ltmp2049:
    000005b7: 	movq	%rbp, %rax
    000005ba: 	pxor	%xmm0, %xmm0
    000005be: 	nop # Size: 2
.Ltmp2046:
    000005c0: 	paddq	(%rax), %xmm0
    000005c4: 	addq	$0x10, %rax
    000005c8: 	cmpq	%rax, %r12
    000005cb: 	jne	.Ltmp2046 # Offset: 1483
    000005cd: 	movsd	(%rsp), %xmm1
    000005d2: 	mulsd	init_value(%rip), %xmm1
    000005da: 	comisd	DATAat0x13618(%rip), %xmm1
    000005e2: 	jae	.Ltmp2047 # Offset: 1506
    000005e8: 	cvttsd2si	%xmm1, %rdx
.Ltmp2198:
    000005ed: 	movdqa	%xmm0, %xmm1
    000005f1: 	psrldq	$0x8, %xmm1
    000005f6: 	paddq	%xmm1, %xmm0
    000005fa: 	movq	%xmm0, %rax
    000005ff: 	cmpq	%rax, %rdx
    00000602: 	je	.Ltmp2048 # Offset: 1538
    00000604: 	movq	0xbcf0(%rsp), %rdx
    0000060c: 	movq	%r14, %rsi
    0000060f: 	movl	$0x1, %edi
    00000614: 	xorl	%eax, %eax
    00000616: 	callq	__printf_chk@PLT # Offset: 1558
    0000061b: 	movl	iterations(%rip), %ecx
.Ltmp2048:
    00000621: 	addl	$0x1, %r13d
    00000625: 	cmpl	%ecx, %r13d
    00000628: 	jl	.Ltmp2049 # Offset: 1576
.Ltmp2045:
    0000062a: 	callq	clock@PLT # Offset: 1578
    0000062f: 	pxor	%xmm0, %xmm0
    00000633: 	movq	%r15, %rdi
    00000636: 	movq	%rax, end_time(%rip)
    0000063d: 	subq	start_time(%rip), %rax
    00000644: 	cvtsi2sd	%rax, %xmm0
    00000649: 	divsd	DATAat0x13600(%rip), %xmm0
    00000651: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1617
    00000656: 	movq	0xbcf0(%rsp), %rdi
    0000065e: 	cmpq	0x8(%rsp), %rdi
    00000663: 	je	.Ltmp2050 # Offset: 1635
    00000665: 	movq	0xbd00(%rsp), %rax
    0000066d: 	leaq	0x1(%rax), %rsi
    00000671: 	callq	_ZdlPvm@PLT # Offset: 1649
.Ltmp2050:
    00000676: 	movq	0x20(%rsp), %rsi
    0000067b: 	leaq	DATAat0x132f8(%rip), %rdx
    00000682: 	movq	%r15, %rdi
    00000685: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1669
    0000068a: 	callq	clock@PLT # Offset: 1674
    0000068f: 	movsd	DATAat0x13610(%rip), %xmm5
    00000697: 	xorl	%r13d, %r13d
    0000069a: 	movl	iterations(%rip), %ecx
    000006a0: 	movq	%rax, start_time(%rip)
    000006a7: 	leaq	DATAat0x131bf(%rip), %r14
    000006ae: 	movsd	%xmm5, (%rsp)
    000006b3: 	testl	%ecx, %ecx
    000006b5: 	jle	.Ltmp2051 # Offset: 1717
.Ltmp2055:
    000006b7: 	movq	%rbx, %rax
    000006ba: 	pxor	%xmm0, %xmm0
    000006be: 	nop # Size: 2
.Ltmp2052:
    000006c0: 	paddq	(%rax), %xmm0
    000006c4: 	addq	$0x10, %rax
    000006c8: 	cmpq	%rax, %r15
    000006cb: 	jne	.Ltmp2052 # Offset: 1739
    000006cd: 	movsd	(%rsp), %xmm1
    000006d2: 	mulsd	init_value(%rip), %xmm1
    000006da: 	comisd	DATAat0x13618(%rip), %xmm1
    000006e2: 	jae	.Ltmp2053 # Offset: 1762
    000006e8: 	cvttsd2si	%xmm1, %rdx
.Ltmp2194:
    000006ed: 	movdqa	%xmm0, %xmm1
    000006f1: 	psrldq	$0x8, %xmm1
    000006f6: 	paddq	%xmm1, %xmm0
    000006fa: 	movq	%xmm0, %rax
    000006ff: 	cmpq	%rax, %rdx
    00000702: 	je	.Ltmp2054 # Offset: 1794
    00000704: 	movq	0xbcf0(%rsp), %rdx
    0000070c: 	movq	%r14, %rsi
    0000070f: 	movl	$0x1, %edi
    00000714: 	xorl	%eax, %eax
    00000716: 	callq	__printf_chk@PLT # Offset: 1814
    0000071b: 	movl	iterations(%rip), %ecx
.Ltmp2054:
    00000721: 	addl	$0x1, %r13d
    00000725: 	cmpl	%ecx, %r13d
    00000728: 	jl	.Ltmp2055 # Offset: 1832
.Ltmp2051:
    0000072a: 	callq	clock@PLT # Offset: 1834
    0000072f: 	pxor	%xmm0, %xmm0
    00000733: 	movq	%r15, %rdi
    00000736: 	movq	%rax, end_time(%rip)
    0000073d: 	subq	start_time(%rip), %rax
    00000744: 	cvtsi2sd	%rax, %xmm0
    00000749: 	divsd	DATAat0x13600(%rip), %xmm0
    00000751: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1873
    00000756: 	movq	0xbcf0(%rsp), %rdi
    0000075e: 	cmpq	0x8(%rsp), %rdi
    00000763: 	je	.Ltmp2056 # Offset: 1891
    00000765: 	movq	0xbd00(%rsp), %rax
    0000076d: 	leaq	0x1(%rax), %rsi
    00000771: 	callq	_ZdlPvm@PLT # Offset: 1905
.Ltmp2056:
    00000776: 	movq	0x20(%rsp), %rsi
    0000077b: 	leaq	DATAat0x13328(%rip), %rdx
    00000782: 	movq	%r15, %rdi
    00000785: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1925
    0000078a: 	callq	clock@PLT # Offset: 1930
    0000078f: 	movsd	DATAat0x13610(%rip), %xmm6
    00000797: 	xorl	%r13d, %r13d
    0000079a: 	movl	iterations(%rip), %ecx
    000007a0: 	movq	%rax, start_time(%rip)
    000007a7: 	leaq	DATAat0x131bf(%rip), %r14
    000007ae: 	movsd	%xmm6, (%rsp)
    000007b3: 	testl	%ecx, %ecx
    000007b5: 	jle	.Ltmp2057 # Offset: 1973
.Ltmp2061:
    000007b7: 	movq	%rbx, %rax
    000007ba: 	pxor	%xmm0, %xmm0
    000007be: 	nop # Size: 2
.Ltmp2058:
    000007c0: 	paddq	(%rax), %xmm0
    000007c4: 	addq	$0x10, %rax
    000007c8: 	cmpq	%rax, %r15
    000007cb: 	jne	.Ltmp2058 # Offset: 1995
    000007cd: 	movsd	(%rsp), %xmm1
    000007d2: 	mulsd	init_value(%rip), %xmm1
    000007da: 	comisd	DATAat0x13618(%rip), %xmm1
    000007e2: 	jae	.Ltmp2059 # Offset: 2018
    000007e8: 	cvttsd2si	%xmm1, %rdx
.Ltmp2195:
    000007ed: 	movdqa	%xmm0, %xmm1
    000007f1: 	psrldq	$0x8, %xmm1
    000007f6: 	paddq	%xmm1, %xmm0
    000007fa: 	movq	%xmm0, %rax
    000007ff: 	cmpq	%rax, %rdx
    00000802: 	je	.Ltmp2060 # Offset: 2050
    00000804: 	movq	0xbcf0(%rsp), %rdx
    0000080c: 	movq	%r14, %rsi
    0000080f: 	movl	$0x1, %edi
    00000814: 	xorl	%eax, %eax
    00000816: 	callq	__printf_chk@PLT # Offset: 2070
    0000081b: 	movl	iterations(%rip), %ecx
.Ltmp2060:
    00000821: 	addl	$0x1, %r13d
    00000825: 	cmpl	%ecx, %r13d
    00000828: 	jl	.Ltmp2061 # Offset: 2088
.Ltmp2057:
    0000082a: 	callq	clock@PLT # Offset: 2090
    0000082f: 	pxor	%xmm0, %xmm0
    00000833: 	movq	%r15, %rdi
    00000836: 	movq	%rax, end_time(%rip)
    0000083d: 	subq	start_time(%rip), %rax
    00000844: 	cvtsi2sd	%rax, %xmm0
    00000849: 	divsd	DATAat0x13600(%rip), %xmm0
    00000851: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2129
    00000856: 	movq	0xbcf0(%rsp), %rdi
    0000085e: 	cmpq	0x8(%rsp), %rdi
    00000863: 	je	.Ltmp2062 # Offset: 2147
    00000865: 	movq	0xbd00(%rsp), %rax
    0000086d: 	leaq	0x1(%rax), %rsi
    00000871: 	callq	_ZdlPvm@PLT # Offset: 2161
.Ltmp2062:
    00000876: 	movq	0x20(%rsp), %rsi
    0000087b: 	leaq	DATAat0x13358(%rip), %rdx
    00000882: 	movq	%r15, %rdi
    00000885: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2181
    0000088a: 	callq	clock@PLT # Offset: 2186
    0000088f: 	movsd	DATAat0x13610(%rip), %xmm7
    00000897: 	xorl	%r13d, %r13d
    0000089a: 	movl	iterations(%rip), %ecx
    000008a0: 	movq	%rax, start_time(%rip)
    000008a7: 	leaq	DATAat0x131bf(%rip), %r14
    000008ae: 	movsd	%xmm7, (%rsp)
    000008b3: 	testl	%ecx, %ecx
    000008b5: 	jle	.Ltmp2063 # Offset: 2229
.Ltmp2067:
    000008b7: 	movq	%rbx, %rax
    000008ba: 	pxor	%xmm0, %xmm0
    000008be: 	nop # Size: 2
.Ltmp2064:
    000008c0: 	paddq	(%rax), %xmm0
    000008c4: 	addq	$0x10, %rax
    000008c8: 	cmpq	%rax, %r15
    000008cb: 	jne	.Ltmp2064 # Offset: 2251
    000008cd: 	movsd	(%rsp), %xmm1
    000008d2: 	mulsd	init_value(%rip), %xmm1
    000008da: 	comisd	DATAat0x13618(%rip), %xmm1
    000008e2: 	jae	.Ltmp2065 # Offset: 2274
    000008e8: 	cvttsd2si	%xmm1, %rdx
.Ltmp2196:
    000008ed: 	movdqa	%xmm0, %xmm1
    000008f1: 	psrldq	$0x8, %xmm1
    000008f6: 	paddq	%xmm1, %xmm0
    000008fa: 	movq	%xmm0, %rax
    000008ff: 	cmpq	%rax, %rdx
    00000902: 	je	.Ltmp2066 # Offset: 2306
    00000904: 	movq	0xbcf0(%rsp), %rdx
    0000090c: 	movq	%r14, %rsi
    0000090f: 	movl	$0x1, %edi
    00000914: 	xorl	%eax, %eax
    00000916: 	callq	__printf_chk@PLT # Offset: 2326
    0000091b: 	movl	iterations(%rip), %ecx
.Ltmp2066:
    00000921: 	addl	$0x1, %r13d
    00000925: 	cmpl	%ecx, %r13d
    00000928: 	jl	.Ltmp2067 # Offset: 2344
.Ltmp2063:
    0000092a: 	callq	clock@PLT # Offset: 2346
    0000092f: 	pxor	%xmm0, %xmm0
    00000933: 	movq	%r15, %rdi
    00000936: 	movq	%rax, end_time(%rip)
    0000093d: 	subq	start_time(%rip), %rax
    00000944: 	cvtsi2sd	%rax, %xmm0
    00000949: 	divsd	DATAat0x13600(%rip), %xmm0
    00000951: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2385
    00000956: 	movq	0xbcf0(%rsp), %rdi
    0000095e: 	cmpq	0x8(%rsp), %rdi
    00000963: 	je	.Ltmp2068 # Offset: 2403
    00000965: 	movq	0xbd00(%rsp), %rax
    0000096d: 	leaq	0x1(%rax), %rsi
    00000971: 	callq	_ZdlPvm@PLT # Offset: 2417
.Ltmp2068:
    00000976: 	movq	0x20(%rsp), %rsi
    0000097b: 	leaq	0xf0(%rsp), %rdi
    00000983: 	leaq	DATAat0x1321b(%rip), %rdx
    0000098a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2442
    0000098f: 	movl	iterations(%rip), %edx
    00000995: 	movl	$0x1, %r8d
    0000099b: 	movl	$0x1, %ecx
    000009a0: 	movq	0xf0(%rsp), %rdi
    000009a8: 	movl	$0x7d0, %esi
    000009ad: 	callq	_Z9summarizePKciiii # Offset: 2477
    000009b2: 	movslq	iterations(%rip), %rax
    000009b9: 	movabsq	$0x5851f42d4c957f2d, %rdi
    000009c3: 	movabsq	$0x14057b7ef767814f, %rsi
    000009cd: 	movq	%rax, %rdx
    000009d0: 	imulq	$0x10624dd3, %rax, %rax
    000009d7: 	sarl	$0x1f, %edx
    000009da: 	sarq	$0x27, %rax
    000009de: 	subl	%edx, %eax
    000009e0: 	movq	%r12, %rdx
    000009e3: 	movl	%eax, iterations(%rip)
.Ltmp2069:
    000009e9: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000009f0: 	addq	$0x8, %rdx
    000009f4: 	imulq	%rdi, %rax
    000009f8: 	addq	%rsi, %rax
    000009fb: 	movq	%rax, %rcx
    000009fe: 	movq	%rax, %r8
    00000a01: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000a08: 	shrq	$0x14, %rcx
    00000a0c: 	shlq	$0x17, %r8
    00000a10: 	xorq	%r8, %rcx
    00000a13: 	xorq	%rcx, %rax
    00000a16: 	sarq	$0x3, %rax
    00000a1a: 	movq	%rax, -0x8(%rdx)
    00000a1e: 	cmpq	%rbx, %rdx
    00000a21: 	jne	.Ltmp2069 # Offset: 2593
    00000a23: 	movl	$0x3e80, %edx
    00000a28: 	movq	%r12, %rsi
    00000a2b: 	movq	%r15, %rdi
    00000a2e: 	callq	memcpy@PLT # Offset: 2606
    00000a33: 	movq	0xd0(%rsp), %r13
    00000a3b: 	leaq	0x160(%rsp), %rax
    00000a43: 	movq	0xd8(%rsp), %r14
    00000a4b: 	movq	%rax, (%rsp)
    00000a4f: 	movq	%rax, 0x150(%rsp)
    00000a57: 	movq	%r13, %rax
    00000a5a: 	addq	%r14, %rax
    00000a5d: 	je	.Ltmp2070 # Offset: 2653
    00000a5f: 	testq	%r13, %r13
    00000a62: 	je	.Ltmp2071 # Offset: 2658
.Ltmp2070:
    00000a68: 	movq	%r14, 0xc0(%rsp)
    00000a70: 	cmpq	$0xf, %r14
    00000a74: 	ja	.Ltmp2072 # Offset: 2676
    00000a7a: 	cmpq	$0x1, %r14
    00000a7e: 	jne	.Ltmp2073 # Offset: 2686
    00000a84: 	movzbl	(%r13), %eax
    00000a89: 	movb	%al, 0x160(%rsp)
    00000a90: 	movq	(%rsp), %rax
.Ltmp2228:
    00000a94: 	movq	%r14, 0x158(%rsp)
    00000a9c: 	movb	$0x0, (%rax,%r14)
    00000aa1: 	movabsq	$0x3fffffffffffffff, %rax
    00000aab: 	subq	0x158(%rsp), %rax
    00000ab3: 	cmpq	$0x1e, %rax
    00000ab7: 	jbe	.Ltmp2074 # Offset: 2743
    00000abd: 	leaq	0x150(%rsp), %r14
    00000ac5: 	movl	$0x1f, %edx
    00000aca: 	leaq	DATAat0x13388(%rip), %rsi
    00000ad1: 	movq	%r14, %rdi
    00000ad4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2772
    00000ad9: 	callq	clock@PLT # Offset: 2777
    00000ade: 	leaq	0x178(%rsp), %rdi
    00000ae6: 	xorl	%r13d, %r13d
    00000ae9: 	movq	%rax, start_time(%rip)
    00000af0: 	movl	iterations(%rip), %eax
    00000af6: 	movq	%rdi, 0x8(%rsp)
    00000afb: 	movl	%eax, 0x10(%rsp)
    00000aff: 	testl	%eax, %eax
    00000b01: 	jle	.Ltmp2075 # Offset: 2817
.Ltmp2081:
    00000b07: 	movq	%rbp, %rdi
    00000b0a: 	movl	$0x3e80, %edx
    00000b0f: 	movq	%r12, %rsi
    00000b12: 	callq	memcpy@PLT # Offset: 2834
    00000b17: 	movq	0x8(%rsp), %rdi
    00000b1c: 	nopl	(%rax) # Size: 4
.Ltmp2078:
    00000b20: 	movq	(%rdi), %rsi
    00000b23: 	movq	%rdi, %rax
    00000b26: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2077:
    00000b30: 	movq	%rax, %rdx
    00000b33: 	leaq	-0x8(%rax), %rax
    00000b37: 	movq	-0x8(%rdx), %rcx
    00000b3b: 	cmpq	%rcx, %rsi
    00000b3e: 	jae	.Ltmp2076 # Offset: 2878
    00000b40: 	movq	%rcx, 0x8(%rax)
    00000b44: 	cmpq	%rbp, %rax
    00000b47: 	jne	.Ltmp2077 # Offset: 2887
    00000b49: 	movq	%rbp, %rdx
.Ltmp2076:
    00000b4c: 	addq	$0x8, %rdi
    00000b50: 	movq	%rsi, (%rdx)
    00000b53: 	cmpq	%r12, %rdi
    00000b56: 	jne	.Ltmp2078 # Offset: 2902
    00000b58: 	movq	0x170(%rsp), %rdx
    00000b60: 	movq	0x8(%rsp), %rax
    00000b65: 	nopl	(%rax) # Size: 3
.Ltmp2080:
    00000b68: 	addq	$0x8, %rax
    00000b6c: 	movq	%rdx, %rcx
    00000b6f: 	movq	-0x8(%rax), %rdx
    00000b73: 	cmpq	%rcx, %rdx
    00000b76: 	jb	.Ltmp2079 # Offset: 2934
    00000b7c: 	cmpq	%r12, %rax
    00000b7f: 	jne	.Ltmp2080 # Offset: 2943
    00000b81: 	addl	$0x1, %r13d
    00000b85: 	cmpl	0x10(%rsp), %r13d
    00000b8a: 	jl	.Ltmp2081 # Offset: 2954
.Ltmp2075:
    00000b90: 	callq	clock@PLT # Offset: 2960
    00000b95: 	pxor	%xmm0, %xmm0
    00000b99: 	movq	%r14, %rdi
    00000b9c: 	movq	%rax, end_time(%rip)
    00000ba3: 	subq	start_time(%rip), %rax
    00000baa: 	cvtsi2sd	%rax, %xmm0
    00000baf: 	divsd	DATAat0x13600(%rip), %xmm0
    00000bb7: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2999
    00000bbc: 	movq	0x150(%rsp), %rdi
    00000bc4: 	cmpq	(%rsp), %rdi
    00000bc8: 	je	.Ltmp2082 # Offset: 3016
    00000bca: 	movq	0x160(%rsp), %rax
    00000bd2: 	leaq	0x1(%rax), %rsi
    00000bd6: 	callq	_ZdlPvm@PLT # Offset: 3030
.Ltmp2082:
    00000bdb: 	movq	0x20(%rsp), %rsi
    00000be0: 	leaq	DATAat0x133a8(%rip), %rdx
    00000be7: 	movq	%r14, %rdi
    00000bea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3050
    00000bef: 	callq	clock@PLT # Offset: 3055
    00000bf4: 	leaq	0x7e78(%rsp), %rdi
    00000bfc: 	xorl	%r13d, %r13d
    00000bff: 	movq	%rax, start_time(%rip)
    00000c06: 	movl	iterations(%rip), %eax
    00000c0c: 	movq	%rdi, 0x8(%rsp)
    00000c11: 	movl	%eax, 0x10(%rsp)
    00000c15: 	testl	%eax, %eax
    00000c17: 	jle	.Ltmp2083 # Offset: 3095
.Ltmp2089:
    00000c1d: 	movq	%rbx, %rdi
    00000c20: 	movl	$0x3e80, %edx
    00000c25: 	movq	%r15, %rsi
    00000c28: 	callq	memcpy@PLT # Offset: 3112
    00000c2d: 	movq	0x8(%rsp), %rdi
    00000c32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2086:
    00000c38: 	movq	(%rdi), %rsi
    00000c3b: 	movq	%rdi, %rax
    00000c3e: 	nop # Size: 2
.Ltmp2085:
    00000c40: 	movq	%rax, %rdx
    00000c43: 	leaq	-0x8(%rax), %rax
    00000c47: 	movq	-0x8(%rdx), %rcx
    00000c4b: 	cmpq	%rcx, %rsi
    00000c4e: 	jae	.Ltmp2084 # Offset: 3150
    00000c50: 	movq	%rcx, 0x8(%rax)
    00000c54: 	cmpq	%rbx, %rax
    00000c57: 	jne	.Ltmp2085 # Offset: 3159
    00000c59: 	movq	%rbx, %rdx
.Ltmp2084:
    00000c5c: 	addq	$0x8, %rdi
    00000c60: 	movq	%rsi, (%rdx)
    00000c63: 	cmpq	%r15, %rdi
    00000c66: 	jne	.Ltmp2086 # Offset: 3174
    00000c68: 	movq	0x7e70(%rsp), %rdx
    00000c70: 	movq	0x8(%rsp), %rax
    00000c75: 	nopl	(%rax) # Size: 3
.Ltmp2088:
    00000c78: 	addq	$0x8, %rax
    00000c7c: 	movq	%rdx, %rcx
    00000c7f: 	movq	-0x8(%rax), %rdx
    00000c83: 	cmpq	%rcx, %rdx
    00000c86: 	jb	.Ltmp2087 # Offset: 3206
    00000c8c: 	cmpq	%r15, %rax
    00000c8f: 	jne	.Ltmp2088 # Offset: 3215
    00000c91: 	addl	$0x1, %r13d
    00000c95: 	cmpl	0x10(%rsp), %r13d
    00000c9a: 	jl	.Ltmp2089 # Offset: 3226
.Ltmp2083:
    00000ca0: 	callq	clock@PLT # Offset: 3232
    00000ca5: 	pxor	%xmm0, %xmm0
    00000ca9: 	movq	%r14, %rdi
    00000cac: 	movq	%rax, end_time(%rip)
    00000cb3: 	subq	start_time(%rip), %rax
    00000cba: 	cvtsi2sd	%rax, %xmm0
    00000cbf: 	divsd	DATAat0x13600(%rip), %xmm0
    00000cc7: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3271
    00000ccc: 	movq	0x150(%rsp), %rdi
    00000cd4: 	cmpq	(%rsp), %rdi
    00000cd8: 	je	.Ltmp2090 # Offset: 3288
    00000cda: 	movq	0x160(%rsp), %rax
    00000ce2: 	leaq	0x1(%rax), %rsi
    00000ce6: 	callq	_ZdlPvm@PLT # Offset: 3302
.Ltmp2090:
    00000ceb: 	movq	(%rsp), %rax
    00000cef: 	movq	0xd8(%rsp), %r13
    00000cf7: 	movq	%rax, 0x150(%rsp)
    00000cff: 	movq	0xd0(%rsp), %rax
    00000d07: 	movq	%rax, 0x8(%rsp)
    00000d0c: 	movq	%rax, %rdi
    00000d0f: 	addq	%r13, %rax
    00000d12: 	je	.Ltmp2091 # Offset: 3346
    00000d14: 	testq	%rdi, %rdi
    00000d17: 	je	.Ltmp2092 # Offset: 3351
.Ltmp2091:
    00000d1d: 	movq	%r13, 0xc0(%rsp)
    00000d25: 	cmpq	$0xf, %r13
    00000d29: 	ja	.Ltmp2093 # Offset: 3369
    00000d2f: 	cmpq	$0x1, %r13
    00000d33: 	jne	.Ltmp2094 # Offset: 3379
    00000d39: 	movq	0x8(%rsp), %rax
    00000d3e: 	movzbl	(%rax), %eax
    00000d41: 	movb	%al, 0x160(%rsp)
    00000d48: 	movq	(%rsp), %rax
.Ltmp2226:
    00000d4c: 	movq	%r13, 0x158(%rsp)
    00000d54: 	movb	$0x0, (%rax,%r13)
    00000d59: 	movabsq	$0x3fffffffffffffff, %rax
    00000d63: 	subq	0x158(%rsp), %rax
    00000d6b: 	cmpq	$0x26, %rax
    00000d6f: 	jbe	.Ltmp2095 # Offset: 3439
    00000d75: 	movl	$0x27, %edx
    00000d7a: 	leaq	DATAat0x133c8(%rip), %rsi
    00000d81: 	movq	%r14, %rdi
    00000d84: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3460
    00000d89: 	leaq	0xa0(%rsp), %rax
    00000d91: 	leaq	0xc0(%rsp), %rcx
    00000d99: 	movq	%r14, %r8
    00000d9c: 	movq	%r12, 0xc8(%rsp)
    00000da4: 	leaq	0xb0(%rsp), %rdx
    00000dac: 	movq	%rax, %rsi
    00000daf: 	leaq	0x90(%rsp), %rdi
    00000db7: 	movq	%rbp, 0xb8(%rsp)
    00000dbf: 	movq	%rbx, 0xa8(%rsp)
    00000dc7: 	movq	%r12, 0x98(%rsp)
    00000dcf: 	movq	%rcx, 0x28(%rsp)
    00000dd4: 	movq	%rdx, 0x48(%rsp)
    00000dd9: 	movq	%rax, 0x40(%rsp)
    00000dde: 	movq	%rdi, 0x30(%rsp)
    00000de3: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3555
    00000de8: 	movq	0x150(%rsp), %rdi
    00000df0: 	cmpq	(%rsp), %rdi
    00000df4: 	je	.Ltmp2096 # Offset: 3572
    00000df6: 	movq	0x160(%rsp), %rax
    00000dfe: 	leaq	0x1(%rax), %rsi
    00000e02: 	callq	_ZdlPvm@PLT # Offset: 3586
.Ltmp2096:
    00000e07: 	movq	0x20(%rsp), %rsi
    00000e0c: 	leaq	DATAat0x133f0(%rip), %rdx
    00000e13: 	movq	%r14, %rdi
    00000e16: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3606
    00000e1b: 	movq	0x28(%rsp), %rcx
    00000e20: 	movq	0x48(%rsp), %rdx
    00000e25: 	movq	%r14, %r8
    00000e28: 	leaq	0xfb70(%rsp), %rax
    00000e30: 	movq	0x40(%rsp), %rsi
    00000e35: 	movq	0x30(%rsp), %rdi
    00000e3a: 	movq	%r15, 0xc8(%rsp)
    00000e42: 	movq	%rbx, 0xb8(%rsp)
    00000e4a: 	movq	%rax, 0x68(%rsp)
    00000e4f: 	movq	%rax, 0xa8(%rsp)
    00000e57: 	movq	%r15, 0x98(%rsp)
    00000e5f: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3679
    00000e64: 	movq	0x150(%rsp), %rdi
    00000e6c: 	cmpq	(%rsp), %rdi
    00000e70: 	je	.Ltmp2097 # Offset: 3696
    00000e72: 	movq	0x160(%rsp), %rax
    00000e7a: 	leaq	0x1(%rax), %rsi
    00000e7e: 	callq	_ZdlPvm@PLT # Offset: 3710
.Ltmp2097:
    00000e83: 	movq	0x20(%rsp), %rsi
    00000e88: 	leaq	DATAat0x13420(%rip), %rdx
    00000e8f: 	movq	%r14, %rdi
    00000e92: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3730
    00000e97: 	movq	0x68(%rsp), %rax
    00000e9c: 	movq	0x28(%rsp), %rcx
    00000ea1: 	movq	%r14, %r8
    00000ea4: 	movq	%r15, 0xc8(%rsp)
    00000eac: 	movq	0x48(%rsp), %rdx
    00000eb1: 	movq	0x40(%rsp), %rsi
    00000eb6: 	movq	%rbx, 0xb8(%rsp)
    00000ebe: 	movq	0x30(%rsp), %rdi
    00000ec3: 	movq	%rax, 0xa8(%rsp)
    00000ecb: 	movq	%r15, 0x98(%rsp)
    00000ed3: 	callq	"_Z19test_insertion_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 3795
    00000ed8: 	movq	0x150(%rsp), %rdi
    00000ee0: 	cmpq	(%rsp), %rdi
    00000ee4: 	je	.Ltmp2098 # Offset: 3812
    00000ee6: 	movq	0x160(%rsp), %rax
    00000eee: 	leaq	0x1(%rax), %rsi
    00000ef2: 	callq	_ZdlPvm@PLT # Offset: 3826
.Ltmp2098:
    00000ef7: 	movq	0x20(%rsp), %rsi
    00000efc: 	leaq	DATAat0x13450(%rip), %rdx
    00000f03: 	movq	%r14, %rdi
    00000f06: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3846
    00000f0b: 	callq	clock@PLT # Offset: 3851
    00000f10: 	leaq	0x7e78(%rsp), %rdi
    00000f18: 	xorl	%r13d, %r13d
    00000f1b: 	movq	%rax, start_time(%rip)
    00000f22: 	movl	iterations(%rip), %eax
    00000f28: 	movq	%rdi, 0x8(%rsp)
    00000f2d: 	movl	%eax, 0x10(%rsp)
    00000f31: 	testl	%eax, %eax
    00000f33: 	jle	.Ltmp2099 # Offset: 3891
.Ltmp2107:
    00000f39: 	movq	%r15, %rsi
    00000f3c: 	movq	%rbx, %rdi
    00000f3f: 	movl	$0x3e80, %edx
    00000f44: 	callq	memcpy@PLT # Offset: 3908
    00000f49: 	movq	0x8(%rsp), %rsi
    00000f4e: 	movq	%rsi, %rdi
    00000f51: 	nopl	(%rax) # Size: 7
.Ltmp2104:
    00000f58: 	movq	(%rsi), %rcx
    00000f5b: 	cmpq	%rbx, %rsi
    00000f5e: 	je	.Ltmp2100 # Offset: 3934
    00000f64: 	movq	%rsi, %rax
    00000f67: 	jmp	.Ltmp2101 # Offset: 3943
    00000f69: 	nopl	(%rax) # Size: 7
.Ltmp2103:
    00000f70: 	movq	%rdx, (%rax)
    00000f73: 	subq	$0x8, %rax
    00000f77: 	cmpq	%rax, %rbx
    00000f7a: 	je	.Ltmp2102 # Offset: 3962
.Ltmp2101:
    00000f7c: 	movq	-0x8(%rax), %rdx
    00000f80: 	cmpq	%rdx, %rcx
    00000f83: 	jb	.Ltmp2103 # Offset: 3971
.Ltmp2102:
    00000f85: 	addq	$0x8, %rsi
    00000f89: 	movq	%rcx, (%rax)
    00000f8c: 	cmpq	%rsi, %r15
    00000f8f: 	jne	.Ltmp2104 # Offset: 3983
    00000f91: 	movq	0x7e70(%rsp), %rax
    00000f99: 	nopl	(%rax) # Size: 7
.Ltmp2106:
    00000fa0: 	movq	%rax, %rdx
    00000fa3: 	movq	(%rdi), %rax
    00000fa6: 	cmpq	%rdx, %rax
    00000fa9: 	jb	.Ltmp2105 # Offset: 4009
    00000faf: 	addq	$0x8, %rdi
    00000fb3: 	cmpq	%rdi, %r15
    00000fb6: 	jne	.Ltmp2106 # Offset: 4022
    00000fb8: 	movl	%r13d, %eax
    00000fbb: 	addl	$0x1, %eax
    00000fbe: 	movl	%eax, %r13d
    00000fc1: 	cmpl	0x10(%rsp), %eax
    00000fc5: 	jl	.Ltmp2107 # Offset: 4037
.Ltmp2099:
    00000fcb: 	callq	clock@PLT # Offset: 4043
    00000fd0: 	pxor	%xmm0, %xmm0
    00000fd4: 	movq	%r14, %rdi
    00000fd7: 	movq	%rax, end_time(%rip)
    00000fde: 	subq	start_time(%rip), %rax
    00000fe5: 	cvtsi2sd	%rax, %xmm0
    00000fea: 	divsd	DATAat0x13600(%rip), %xmm0
    00000ff2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4082
    00000ff7: 	movq	0x150(%rsp), %rdi
    00000fff: 	cmpq	(%rsp), %rdi
    00001003: 	je	.Ltmp2108 # Offset: 4099
    00001005: 	movq	0x160(%rsp), %rax
    0000100d: 	leaq	0x1(%rax), %rsi
    00001011: 	callq	_ZdlPvm@PLT # Offset: 4113
.Ltmp2108:
    00001016: 	leaq	0x120(%rsp), %rax
    0000101e: 	movq	0xd8(%rsp), %r13
    00001026: 	movq	%rax, 0x58(%rsp)
    0000102b: 	movq	%rax, 0x110(%rsp)
    00001033: 	movq	0xd0(%rsp), %rax
    0000103b: 	movq	%rax, 0x8(%rsp)
    00001040: 	movq	%rax, %rdi
    00001043: 	addq	%r13, %rax
    00001046: 	je	.Ltmp2109 # Offset: 4166
    00001048: 	testq	%rdi, %rdi
    0000104b: 	je	.Ltmp2110 # Offset: 4171
.Ltmp2109:
    00001051: 	movq	%r13, 0xc0(%rsp)
    00001059: 	cmpq	$0xf, %r13
    0000105d: 	ja	.Ltmp2111 # Offset: 4189
    00001063: 	cmpq	$0x1, %r13
    00001067: 	jne	.Ltmp2112 # Offset: 4199
    0000106d: 	movq	0x8(%rsp), %rax
    00001072: 	movzbl	(%rax), %eax
    00001075: 	movb	%al, 0x120(%rsp)
    0000107c: 	movq	0x58(%rsp), %rax
.Ltmp2224:
    00001081: 	movq	%r13, 0x118(%rsp)
    00001089: 	movb	$0x0, (%rax,%r13)
    0000108e: 	movabsq	$0x3fffffffffffffff, %rax
    00001098: 	subq	0x118(%rsp), %rax
    000010a0: 	cmpq	$0x14, %rax
    000010a4: 	jbe	.Ltmp2113 # Offset: 4260
    000010aa: 	leaq	0x110(%rsp), %rdi
    000010b2: 	movl	$0x15, %edx
    000010b7: 	leaq	DATAat0x1322d(%rip), %rsi
    000010be: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4286
    000010c3: 	movl	iterations(%rip), %edx
    000010c9: 	movl	$0x1, %r8d
    000010cf: 	movl	$0x1, %ecx
    000010d4: 	movq	0x110(%rsp), %rdi
    000010dc: 	movl	$0x7d0, %esi
    000010e1: 	callq	_Z9summarizePKciiii # Offset: 4321
    000010e6: 	movq	0x20(%rsp), %rsi
    000010eb: 	leaq	DATAat0x13243(%rip), %rdx
    000010f2: 	movq	%r14, %rdi
    000010f5: 	shll	$0x3, iterations(%rip)
    000010fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4348
    00001101: 	callq	clock@PLT # Offset: 4353
    00001106: 	movl	iterations(%rip), %edx
    0000110c: 	movl	$0x0, 0x10(%rsp)
    00001114: 	movq	%rax, start_time(%rip)
    0000111b: 	leaq	0x178(%rsp), %rax
    00001123: 	movq	%rax, 0x8(%rsp)
    00001128: 	testl	%edx, %edx
    0000112a: 	jle	.Ltmp2114 # Offset: 4394
.Ltmp2124:
    00001130: 	movl	$0x3e80, %edx
    00001135: 	movq	%r12, %rsi
    00001138: 	movq	%rbp, %rdi
    0000113b: 	callq	memcpy@PLT # Offset: 4411
    00001140: 	movq	%rbp, %r9
.Ltmp2121:
    00001143: 	movq	(%r9), %rsi
    00001146: 	movq	%r9, %rax
    00001149: 	movq	%r12, %r13
    0000114c: 	nopl	(%rax) # Size: 4
.Ltmp2119:
    00001150: 	movq	-0x8(%r13), %rdi
    00001154: 	leaq	-0x8(%r13), %rcx
    00001158: 	cmpq	%rdi, %rsi
    0000115b: 	jb	.Ltmp2115 # Offset: 4443
    0000115d: 	cmpq	%rax, %rcx
    00001160: 	jbe	.Ltmp2116 # Offset: 4448
    00001162: 	movq	(%rax), %rdx
    00001165: 	cmpq	%rdx, %rsi
    00001168: 	jbe	.Ltmp2117 # Offset: 4456
    0000116a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2118:
    00001170: 	movq	0x8(%rax), %rdx
    00001174: 	addq	$0x8, %rax
    00001178: 	cmpq	%rdx, %rsi
    0000117b: 	ja	.Ltmp2118 # Offset: 4475
    0000117d: 	cmpq	%rax, %rcx
    00001180: 	jbe	.Ltmp2116 # Offset: 4480
.Ltmp2117:
    00001182: 	movq	%rdx, (%rcx)
    00001185: 	movq	%rdi, (%rax)
.Ltmp2115:
    00001188: 	movq	%rcx, %r13
    0000118b: 	jmp	.Ltmp2119 # Offset: 4491
    0000118d: 	nopl	(%rax) # Size: 3
.Ltmp2116:
    00001190: 	movq	%r13, %rsi
    00001193: 	movq	%r9, %rdi
    00001196: 	callq	_ZN9benchmark9quicksortIPmEEvT_S2_ # Offset: 4502
    0000119b: 	movq	%r12, %rax
    0000119e: 	subq	%r13, %rax
    000011a1: 	cmpq	$0x8, %rax
    000011a5: 	jle	.Ltmp2120 # Offset: 4517
    000011a7: 	movq	%r13, %r9
    000011aa: 	jmp	.Ltmp2121 # Offset: 4522
.Ltmp2120:
    000011ac: 	movq	0x170(%rsp), %rdx
    000011b4: 	movq	0x8(%rsp), %rax
    000011b9: 	nopl	(%rax) # Size: 7
.Ltmp2123:
    000011c0: 	addq	$0x8, %rax
    000011c4: 	movq	%rdx, %rcx
    000011c7: 	movq	-0x8(%rax), %rdx
    000011cb: 	cmpq	%rcx, %rdx
    000011ce: 	jb	.Ltmp2122 # Offset: 4558
    000011d4: 	cmpq	%r12, %rax
    000011d7: 	jne	.Ltmp2123 # Offset: 4567
.Ltmp2200:
    000011d9: 	addl	$0x1, 0x10(%rsp)
    000011de: 	movl	0x10(%rsp), %eax
    000011e2: 	cmpl	iterations(%rip), %eax
    000011e8: 	jl	.Ltmp2124 # Offset: 4584
.Ltmp2114:
    000011ee: 	callq	clock@PLT # Offset: 4590
    000011f3: 	pxor	%xmm0, %xmm0
    000011f7: 	movq	%r14, %rdi
    000011fa: 	movq	%rax, end_time(%rip)
    00001201: 	subq	start_time(%rip), %rax
    00001208: 	cvtsi2sd	%rax, %xmm0
    0000120d: 	divsd	DATAat0x13600(%rip), %xmm0
    00001215: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4629
    0000121a: 	movq	0x150(%rsp), %rdi
    00001222: 	cmpq	(%rsp), %rdi
    00001226: 	je	.Ltmp2125 # Offset: 4646
    00001228: 	movq	0x160(%rsp), %rax
    00001230: 	leaq	0x1(%rax), %rsi
    00001234: 	callq	_ZdlPvm@PLT # Offset: 4660
.Ltmp2125:
    00001239: 	movq	0x20(%rsp), %rsi
    0000123e: 	leaq	DATAat0x1325e(%rip), %rdx
    00001245: 	movq	%r14, %rdi
    00001248: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4680
    0000124d: 	callq	clock@PLT # Offset: 4685
    00001252: 	movl	$0x0, 0x10(%rsp)
    0000125a: 	movq	%rax, start_time(%rip)
    00001261: 	leaq	0x7e78(%rsp), %rax
    00001269: 	movq	%rax, 0x8(%rsp)
    0000126e: 	movl	iterations(%rip), %eax
    00001274: 	testl	%eax, %eax
    00001276: 	jle	.Ltmp2126 # Offset: 4726
.Ltmp2136:
    0000127c: 	movl	$0x3e80, %edx
    00001281: 	movq	%r15, %rsi
    00001284: 	movq	%rbx, %rdi
    00001287: 	callq	memcpy@PLT # Offset: 4743
    0000128c: 	movq	%rbx, %r9
.Ltmp2133:
    0000128f: 	movq	(%r9), %rsi
    00001292: 	movq	%r9, %rax
    00001295: 	movq	%r15, %r13
    00001298: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2131:
    000012a0: 	movq	-0x8(%r13), %rdi
    000012a4: 	leaq	-0x8(%r13), %rcx
    000012a8: 	cmpq	%rdi, %rsi
    000012ab: 	jb	.Ltmp2127 # Offset: 4779
    000012ad: 	cmpq	%rax, %rcx
    000012b0: 	jbe	.Ltmp2128 # Offset: 4784
    000012b2: 	movq	(%rax), %rdx
    000012b5: 	cmpq	%rsi, %rdx
    000012b8: 	jae	.Ltmp2129 # Offset: 4792
    000012ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2130:
    000012c0: 	movq	0x8(%rax), %rdx
    000012c4: 	addq	$0x8, %rax
    000012c8: 	cmpq	%rdx, %rsi
    000012cb: 	ja	.Ltmp2130 # Offset: 4811
    000012cd: 	cmpq	%rax, %rcx
    000012d0: 	jbe	.Ltmp2128 # Offset: 4816
.Ltmp2129:
    000012d2: 	movq	%rdx, (%rcx)
    000012d5: 	movq	%rdi, (%rax)
.Ltmp2127:
    000012d8: 	movq	%rcx, %r13
    000012db: 	jmp	.Ltmp2131 # Offset: 4827
    000012dd: 	nopl	(%rax) # Size: 3
.Ltmp2128:
    000012e0: 	movq	%r13, %rsi
    000012e3: 	movq	%r9, %rdi
    000012e6: 	callq	_ZN9benchmark9quicksortIPmEEvT_S2_ # Offset: 4838
    000012eb: 	movq	%r15, %rax
    000012ee: 	subq	%r13, %rax
    000012f1: 	cmpq	$0x8, %rax
    000012f5: 	jle	.Ltmp2132 # Offset: 4853
    000012f7: 	movq	%r13, %r9
    000012fa: 	jmp	.Ltmp2133 # Offset: 4858
.Ltmp2132:
    000012fc: 	movq	0x7e70(%rsp), %rdx
    00001304: 	movq	0x8(%rsp), %rax
    00001309: 	nopl	(%rax) # Size: 7
.Ltmp2135:
    00001310: 	addq	$0x8, %rax
    00001314: 	movq	%rdx, %rcx
    00001317: 	movq	-0x8(%rax), %rdx
    0000131b: 	cmpq	%rdx, %rcx
    0000131e: 	ja	.Ltmp2134 # Offset: 4894
    00001324: 	cmpq	%r15, %rax
    00001327: 	jne	.Ltmp2135 # Offset: 4903
.Ltmp2199:
    00001329: 	addl	$0x1, 0x10(%rsp)
    0000132e: 	movl	0x10(%rsp), %eax
    00001332: 	cmpl	iterations(%rip), %eax
    00001338: 	jl	.Ltmp2136 # Offset: 4920
.Ltmp2126:
    0000133e: 	callq	clock@PLT # Offset: 4926
    00001343: 	pxor	%xmm0, %xmm0
    00001347: 	movq	%r14, %rdi
    0000134a: 	movq	%rax, end_time(%rip)
    00001351: 	subq	start_time(%rip), %rax
    00001358: 	cvtsi2sd	%rax, %xmm0
    0000135d: 	divsd	DATAat0x13600(%rip), %xmm0
    00001365: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4965
    0000136a: 	movq	0x150(%rsp), %rdi
    00001372: 	cmpq	(%rsp), %rdi
    00001376: 	je	.Ltmp2137 # Offset: 4982
    00001378: 	movq	0x160(%rsp), %rax
    00001380: 	leaq	0x1(%rax), %rsi
    00001384: 	callq	_ZdlPvm@PLT # Offset: 4996
.Ltmp2137:
    00001389: 	movq	0x20(%rsp), %rsi
    0000138e: 	leaq	DATAat0x13480(%rip), %rdx
    00001395: 	movq	%r14, %rdi
    00001398: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5016
    0000139d: 	movq	0x28(%rsp), %rcx
    000013a2: 	movq	0x48(%rsp), %rdx
    000013a7: 	movq	%r14, %r8
    000013aa: 	movq	%r12, 0xc8(%rsp)
    000013b2: 	movq	0x40(%rsp), %rsi
    000013b7: 	movq	0x30(%rsp), %rdi
    000013bc: 	movq	%rbp, 0xb8(%rsp)
    000013c4: 	movq	%rbx, 0xa8(%rsp)
    000013cc: 	movq	%r12, 0x98(%rsp)
    000013d4: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 5076
    000013d9: 	movq	0x150(%rsp), %rdi
    000013e1: 	cmpq	(%rsp), %rdi
    000013e5: 	je	.Ltmp2138 # Offset: 5093
    000013e7: 	movq	0x160(%rsp), %rax
    000013ef: 	leaq	0x1(%rax), %rsi
    000013f3: 	callq	_ZdlPvm@PLT # Offset: 5107
.Ltmp2138:
    000013f8: 	movq	0x20(%rsp), %rsi
    000013fd: 	leaq	DATAat0x134a8(%rip), %rdx
    00001404: 	movq	%r14, %rdi
    00001407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5127
    0000140c: 	movq	0x68(%rsp), %rax
    00001411: 	movq	0x28(%rsp), %rcx
    00001416: 	movq	%r14, %r8
    00001419: 	movq	%r15, 0xc8(%rsp)
    00001421: 	movq	0x48(%rsp), %rdx
    00001426: 	movq	0x40(%rsp), %rsi
    0000142b: 	movq	%rbx, 0xb8(%rsp)
    00001433: 	movq	0x30(%rsp), %rdi
    00001438: 	movq	%rax, 0xa8(%rsp)
    00001440: 	movq	%r15, 0x98(%rsp)
    00001448: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 5192
    0000144d: 	movq	0x150(%rsp), %rdi
    00001455: 	cmpq	(%rsp), %rdi
    00001459: 	je	.Ltmp2139 # Offset: 5209
    0000145b: 	movq	0x160(%rsp), %rax
    00001463: 	leaq	0x1(%rax), %rsi
    00001467: 	callq	_ZdlPvm@PLT # Offset: 5223
.Ltmp2139:
    0000146c: 	movq	0x20(%rsp), %rsi
    00001471: 	leaq	DATAat0x134d8(%rip), %rdx
    00001478: 	movq	%r14, %rdi
    0000147b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5243
    00001480: 	movq	0x68(%rsp), %rax
    00001485: 	movq	0x28(%rsp), %rcx
    0000148a: 	movq	%r14, %r8
    0000148d: 	movq	%r15, 0xc8(%rsp)
    00001495: 	movq	0x48(%rsp), %rdx
    0000149a: 	movq	0x40(%rsp), %rsi
    0000149f: 	movq	%rbx, 0xb8(%rsp)
    000014a7: 	movq	0x30(%rsp), %rdi
    000014ac: 	movq	%rax, 0xa8(%rsp)
    000014b4: 	movq	%r15, 0x98(%rsp)
    000014bc: 	callq	"_Z14test_quicksortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 5308
    000014c1: 	movq	0x150(%rsp), %rdi
    000014c9: 	cmpq	(%rsp), %rdi
    000014cd: 	je	.Ltmp2140 # Offset: 5325
    000014cf: 	movq	0x160(%rsp), %rax
    000014d7: 	leaq	0x1(%rax), %rsi
    000014db: 	callq	_ZdlPvm@PLT # Offset: 5339
.Ltmp2140:
    000014e0: 	movq	0x20(%rsp), %rsi
    000014e5: 	leaq	DATAat0x13508(%rip), %rdx
    000014ec: 	movq	%r14, %rdi
    000014ef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5359
    000014f4: 	callq	clock@PLT # Offset: 5364
    000014f9: 	leaq	0x7e78(%rsp), %rdi
    00001501: 	movl	$0x0, 0x10(%rsp)
    00001509: 	movq	%rax, start_time(%rip)
    00001510: 	movl	iterations(%rip), %eax
    00001516: 	movq	%rdi, 0x8(%rsp)
    0000151b: 	leaq	0xbcf0(%rsp), %rdi
    00001523: 	movl	%eax, 0x78(%rsp)
    00001527: 	movq	%rdi, 0x60(%rsp)
    0000152c: 	testl	%eax, %eax
    0000152e: 	jle	.Ltmp2141 # Offset: 5422
.Ltmp2161:
    00001534: 	movq	%r15, %rsi
    00001537: 	movl	$0x3e80, %edx
    0000153c: 	movq	%rbx, %rdi
    0000153f: 	callq	memcpy@PLT # Offset: 5439
    00001544: 	movq	0x60(%rsp), %r8
    00001549: 	movq	0x7e70(%rsp), %rsi
    00001551: 	movq	%rbx, %rdx
    00001554: 	movq	%r8, %r15
    00001557: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2146:
    00001560: 	movq	-0x8(%r8), %rdi
    00001564: 	leaq	-0x8(%r8), %r9
    00001568: 	cmpq	%rdi, %rsi
    0000156b: 	jb	.Ltmp2142 # Offset: 5483
    0000156d: 	cmpq	%rdx, %r9
    00001570: 	jbe	.Ltmp2143 # Offset: 5488
    00001572: 	movq	(%rdx), %rcx
    00001575: 	cmpq	%rsi, %rcx
    00001578: 	jae	.Ltmp2144 # Offset: 5496
    0000157a: 	leaq	0x8(%rdx), %rax
    0000157e: 	nop # Size: 2
.Ltmp2145:
    00001580: 	movq	%rax, %rdx
    00001583: 	movq	(%rax), %rcx
    00001586: 	leaq	0x8(%rax), %rax
    0000158a: 	cmpq	%rcx, %rsi
    0000158d: 	ja	.Ltmp2145 # Offset: 5517
    0000158f: 	cmpq	%rdx, %r9
    00001592: 	jbe	.Ltmp2143 # Offset: 5522
.Ltmp2144:
    00001594: 	movq	%rcx, (%r9)
    00001597: 	movq	%rdi, (%rdx)
.Ltmp2142:
    0000159a: 	movq	%r9, %r8
    0000159d: 	jmp	.Ltmp2146 # Offset: 5533
.Ltmp2143:
    0000159f: 	movq	%r8, %rax
    000015a2: 	subq	%rbx, %rax
    000015a5: 	cmpq	$0x8, %rax
    000015a9: 	jle	.Ltmp2147 # Offset: 5545
    000015af: 	movq	0x7e70(%rsp), %rsi
    000015b7: 	movq	%r8, %r9
    000015ba: 	movq	%rbx, %rdx
    000015bd: 	nopl	(%rax) # Size: 3
.Ltmp2152:
    000015c0: 	leaq	-0x8(%r9), %r10
    000015c4: 	cmpq	%rdi, %rsi
    000015c7: 	jb	.Ltmp2148 # Offset: 5575
    000015c9: 	cmpq	%rdx, %r10
    000015cc: 	jbe	.Ltmp2149 # Offset: 5580
    000015d2: 	movq	(%rdx), %rcx
    000015d5: 	cmpq	%rsi, %rcx
    000015d8: 	jae	.Ltmp2150 # Offset: 5592
    000015da: 	leaq	0x8(%rdx), %rax
    000015de: 	nop # Size: 2
.Ltmp2151:
    000015e0: 	movq	%rax, %rdx
    000015e3: 	movq	(%rax), %rcx
    000015e6: 	leaq	0x8(%rax), %rax
    000015ea: 	cmpq	%rcx, %rsi
    000015ed: 	ja	.Ltmp2151 # Offset: 5613
    000015ef: 	cmpq	%rdx, %r10
    000015f2: 	jbe	.Ltmp2149 # Offset: 5618
.Ltmp2150:
    000015f8: 	movq	%rcx, (%r10)
    000015fb: 	movq	%rdi, (%rdx)
.Ltmp2148:
    000015fe: 	movq	-0x8(%r10), %rdi
    00001602: 	movq	%r10, %r9
    00001605: 	jmp	.Ltmp2152 # Offset: 5637
.Ltmp2208:
    00001607: 	movq	%r13, %rsi
    0000160a: 	movq	%r8, 0x80(%rsp)
    00001612: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 5650
    00001617: 	movq	0x80(%rsp), %rsi
    0000161f: 	movq	%r13, %rdi
    00001622: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 5666
    00001627: 	movq	0x80(%rsp), %r8
.Ltmp2147:
    0000162f: 	movq	0x60(%rsp), %rdx
    00001634: 	movq	%rdx, %rax
    00001637: 	subq	%r8, %rax
    0000163a: 	cmpq	$0x8, %rax
    0000163e: 	jle	.Ltmp2153 # Offset: 5694
    00001640: 	movq	(%r8), %rdi
    00001643: 	movq	%r8, %rcx
    00001646: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2158:
    00001650: 	movq	-0x8(%rdx), %r10
    00001654: 	leaq	-0x8(%rdx), %r9
    00001658: 	cmpq	%r10, %rdi
    0000165b: 	jb	.Ltmp2154 # Offset: 5723
    0000165d: 	cmpq	%rcx, %r9
    00001660: 	jbe	.Ltmp2155 # Offset: 5728
    00001666: 	movq	(%rcx), %rsi
    00001669: 	cmpq	%rdi, %rsi
    0000166c: 	jae	.Ltmp2156 # Offset: 5740
    0000166e: 	leaq	0x8(%rcx), %rax
    00001672: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2157:
    00001678: 	movq	%rax, %rcx
    0000167b: 	movq	(%rax), %rsi
    0000167e: 	leaq	0x8(%rax), %rax
    00001682: 	cmpq	%rsi, %rdi
    00001685: 	ja	.Ltmp2157 # Offset: 5765
    00001687: 	cmpq	%rcx, %r9
    0000168a: 	jbe	.Ltmp2155 # Offset: 5770
.Ltmp2156:
    00001690: 	movq	%rsi, (%r9)
    00001693: 	movq	%r10, (%rcx)
.Ltmp2154:
    00001696: 	movq	%r9, %rdx
    00001699: 	jmp	.Ltmp2158 # Offset: 5785
.Ltmp2219:
    0000169b: 	movq	%r13, %rsi
    0000169e: 	movq	%r9, %rdi
    000016a1: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 5793
    000016a6: 	movq	0x60(%rsp), %rsi
    000016ab: 	movq	%r13, %rdi
    000016ae: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 5806
.Ltmp2153:
    000016b3: 	movq	0x7e70(%rsp), %rdx
    000016bb: 	movq	0x8(%rsp), %rax
    000016c0: 	movq	0x50(%rsp), %rsi
    000016c5: 	nopl	(%rax) # Size: 3
.Ltmp2160:
    000016c8: 	movq	%rdx, %rcx
    000016cb: 	movq	(%rax), %rdx
    000016ce: 	cmpq	%rcx, %rdx
    000016d1: 	jb	.Ltmp2159 # Offset: 5841
    000016d7: 	addq	$0x8, %rax
    000016db: 	cmpq	%rsi, %rax
    000016de: 	jne	.Ltmp2160 # Offset: 5854
    000016e0: 	addl	$0x1, 0x10(%rsp)
    000016e5: 	movl	0x10(%rsp), %eax
    000016e9: 	cmpl	0x78(%rsp), %eax
    000016ed: 	jl	.Ltmp2161 # Offset: 5869
.Ltmp2141:
    000016f3: 	callq	clock@PLT # Offset: 5875
    000016f8: 	pxor	%xmm0, %xmm0
    000016fc: 	movq	%r14, %rdi
    000016ff: 	movq	%rax, end_time(%rip)
    00001706: 	subq	start_time(%rip), %rax
    0000170d: 	cvtsi2sd	%rax, %xmm0
    00001712: 	divsd	DATAat0x13600(%rip), %xmm0
    0000171a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5914
    0000171f: 	movq	0x150(%rsp), %rdi
    00001727: 	cmpq	(%rsp), %rdi
    0000172b: 	je	.Ltmp2162 # Offset: 5931
    0000172d: 	movq	0x160(%rsp), %rax
    00001735: 	leaq	0x1(%rax), %rsi
    00001739: 	callq	_ZdlPvm@PLT # Offset: 5945
.Ltmp2162:
    0000173e: 	movq	0x20(%rsp), %r13
    00001743: 	leaq	0x130(%rsp), %rdi
    0000174b: 	leaq	DATAat0x13278(%rip), %rdx
    00001752: 	movq	%r13, %rsi
    00001755: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5973
    0000175a: 	movl	iterations(%rip), %edx
    00001760: 	movl	$0x1, %r8d
    00001766: 	movl	$0x1, %ecx
    0000176b: 	movq	0x130(%rsp), %rdi
    00001773: 	movl	$0x7d0, %esi
    00001778: 	callq	_Z9summarizePKciiii # Offset: 6008
    0000177d: 	leaq	DATAat0x13289(%rip), %rdx
    00001784: 	movq	%r13, %rsi
    00001787: 	movq	%r14, %rdi
    0000178a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6026
    0000178f: 	callq	clock@PLT # Offset: 6031
    00001794: 	leaq	0x178(%rsp), %rdi
    0000179c: 	movl	$0x0, 0x10(%rsp)
    000017a4: 	movq	%rax, start_time(%rip)
    000017ab: 	movl	iterations(%rip), %eax
    000017b1: 	movq	%rdi, 0x8(%rsp)
    000017b6: 	movl	%eax, 0x60(%rsp)
    000017ba: 	testl	%eax, %eax
    000017bc: 	jle	.Ltmp2163 # Offset: 6076
.Ltmp2168:
    000017c2: 	movl	$0x3e80, %edx
    000017c7: 	movq	%r12, %rsi
    000017ca: 	movq	%rbp, %rdi
    000017cd: 	movl	$0x3e7, %r13d
    000017d3: 	callq	memcpy@PLT # Offset: 6099
    000017d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2164:
    000017e0: 	movq	(%rbp,%r13,8), %rcx
    000017e5: 	movq	%r13, %rdx
    000017e8: 	movq	%rbp, %rsi
    000017eb: 	movl	$0x7d0, %edi
    000017f0: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 6128
    000017f5: 	subq	$0x1, %r13
    000017f9: 	jae	.Ltmp2164 # Offset: 6137
    000017fb: 	movl	$0x7cf, %r13d
    00001801: 	nopl	(%rax) # Size: 7
.Ltmp2165:
    00001808: 	movq	0x170(%rsp), %rax
    00001810: 	xorl	%edx, %edx
    00001812: 	movq	%r13, %rdi
    00001815: 	movq	%rbp, %rsi
    00001818: 	movq	(%rbp,%r13,8), %rcx
    0000181d: 	movq	%rax, (%rbp,%r13,8)
    00001822: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 6178
    00001827: 	subq	$0x1, %r13
    0000182b: 	jne	.Ltmp2165 # Offset: 6187
    0000182d: 	movq	0x170(%rsp), %rdx
    00001835: 	movq	0x8(%rsp), %rax
    0000183a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2167:
    00001840: 	addq	$0x8, %rax
    00001844: 	movq	%rdx, %rcx
    00001847: 	movq	-0x8(%rax), %rdx
    0000184b: 	cmpq	%rdx, %rcx
    0000184e: 	ja	.Ltmp2166 # Offset: 6222
    00001854: 	cmpq	%r12, %rax
    00001857: 	jne	.Ltmp2167 # Offset: 6231
    00001859: 	addl	$0x1, 0x10(%rsp)
    0000185e: 	movl	0x10(%rsp), %eax
    00001862: 	cmpl	0x60(%rsp), %eax
    00001866: 	jl	.Ltmp2168 # Offset: 6246
.Ltmp2163:
    0000186c: 	callq	clock@PLT # Offset: 6252
    00001871: 	pxor	%xmm0, %xmm0
    00001875: 	movq	%r14, %rdi
    00001878: 	movq	%rax, end_time(%rip)
    0000187f: 	subq	start_time(%rip), %rax
    00001886: 	cvtsi2sd	%rax, %xmm0
    0000188b: 	divsd	DATAat0x13600(%rip), %xmm0
    00001893: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6291
    00001898: 	movq	0x150(%rsp), %rdi
    000018a0: 	cmpq	(%rsp), %rdi
    000018a4: 	je	.Ltmp2169 # Offset: 6308
    000018a6: 	movq	0x160(%rsp), %rax
    000018ae: 	leaq	0x1(%rax), %rsi
    000018b2: 	callq	_ZdlPvm@PLT # Offset: 6322
.Ltmp2169:
    000018b7: 	movq	0x20(%rsp), %rsi
    000018bc: 	leaq	DATAat0x132a4(%rip), %rdx
    000018c3: 	movq	%r14, %rdi
    000018c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6342
    000018cb: 	callq	clock@PLT # Offset: 6347
    000018d0: 	leaq	0x7e78(%rsp), %rdi
    000018d8: 	movl	$0x0, 0x10(%rsp)
    000018e0: 	movq	%rax, start_time(%rip)
    000018e7: 	movl	iterations(%rip), %eax
    000018ed: 	movq	%rdi, 0x8(%rsp)
    000018f2: 	movl	%eax, 0x60(%rsp)
    000018f6: 	testl	%eax, %eax
    000018f8: 	jle	.Ltmp2170 # Offset: 6392
.Ltmp2175:
    000018fe: 	movl	$0x3e80, %edx
    00001903: 	movq	%r15, %rsi
    00001906: 	movq	%rbx, %rdi
    00001909: 	movl	$0x3e7, %r13d
    0000190f: 	callq	memcpy@PLT # Offset: 6415
    00001914: 	nopl	(%rax) # Size: 4
.Ltmp2171:
    00001918: 	movq	(%rbx,%r13,8), %rcx
    0000191c: 	movq	%r13, %rdx
    0000191f: 	movq	%rbx, %rsi
    00001922: 	movl	$0x7d0, %edi
    00001927: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 6439
    0000192c: 	subq	$0x1, %r13
    00001930: 	jae	.Ltmp2171 # Offset: 6448
    00001932: 	movl	$0x7cf, %r13d
    00001938: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2172:
    00001940: 	movq	0x7e70(%rsp), %rax
    00001948: 	xorl	%edx, %edx
    0000194a: 	movq	%r13, %rdi
    0000194d: 	movq	%rbx, %rsi
    00001950: 	movq	(%rbx,%r13,8), %rcx
    00001954: 	movq	%rax, (%rbx,%r13,8)
    00001958: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 6488
    0000195d: 	subq	$0x1, %r13
    00001961: 	jne	.Ltmp2172 # Offset: 6497
    00001963: 	movq	0x7e70(%rsp), %rdx
    0000196b: 	movq	0x8(%rsp), %rax
.Ltmp2174:
    00001970: 	addq	$0x8, %rax
    00001974: 	movq	%rdx, %rcx
    00001977: 	movq	-0x8(%rax), %rdx
    0000197b: 	cmpq	%rcx, %rdx
    0000197e: 	jb	.Ltmp2173 # Offset: 6526
    00001984: 	cmpq	%r15, %rax
    00001987: 	jne	.Ltmp2174 # Offset: 6535
    00001989: 	addl	$0x1, 0x10(%rsp)
    0000198e: 	movl	0x10(%rsp), %eax
    00001992: 	cmpl	0x60(%rsp), %eax
    00001996: 	jl	.Ltmp2175 # Offset: 6550
.Ltmp2170:
    0000199c: 	callq	clock@PLT # Offset: 6556
    000019a1: 	pxor	%xmm0, %xmm0
    000019a5: 	movq	%r14, %rdi
    000019a8: 	movq	%rax, end_time(%rip)
    000019af: 	subq	start_time(%rip), %rax
    000019b6: 	cvtsi2sd	%rax, %xmm0
    000019bb: 	divsd	DATAat0x13600(%rip), %xmm0
    000019c3: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6595
    000019c8: 	movq	0x150(%rsp), %rdi
    000019d0: 	cmpq	(%rsp), %rdi
    000019d4: 	je	.Ltmp2176 # Offset: 6612
    000019d6: 	movq	0x160(%rsp), %rax
    000019de: 	leaq	0x1(%rax), %rsi
    000019e2: 	callq	_ZdlPvm@PLT # Offset: 6626
.Ltmp2176:
    000019e7: 	movq	0x20(%rsp), %rsi
    000019ec: 	leaq	DATAat0x13538(%rip), %rdx
    000019f3: 	movq	%r14, %rdi
    000019f6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6646
    000019fb: 	movq	0x28(%rsp), %rcx
    00001a00: 	movq	0x48(%rsp), %rdx
    00001a05: 	movq	%r14, %r8
    00001a08: 	movq	%r12, 0xc8(%rsp)
    00001a10: 	movq	0x40(%rsp), %rsi
    00001a15: 	movq	0x30(%rsp), %rdi
    00001a1a: 	movq	%rbp, 0xb8(%rsp)
    00001a22: 	movq	%rbx, 0xa8(%rsp)
    00001a2a: 	movq	%r12, 0x98(%rsp)
    00001a32: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6706
    00001a37: 	movq	0x150(%rsp), %rdi
    00001a3f: 	cmpq	(%rsp), %rdi
    00001a43: 	je	.Ltmp2177 # Offset: 6723
    00001a45: 	movq	0x160(%rsp), %rax
    00001a4d: 	leaq	0x1(%rax), %rsi
    00001a51: 	callq	_ZdlPvm@PLT # Offset: 6737
.Ltmp2177:
    00001a56: 	movq	0x20(%rsp), %rsi
    00001a5b: 	leaq	DATAat0x13560(%rip), %rdx
    00001a62: 	movq	%r14, %rdi
    00001a65: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6757
    00001a6a: 	movq	0x68(%rsp), %rax
    00001a6f: 	movq	0x28(%rsp), %rcx
    00001a74: 	movq	%r14, %r8
    00001a77: 	movq	%r15, 0xc8(%rsp)
    00001a7f: 	movq	0x48(%rsp), %rdx
    00001a84: 	movq	0x40(%rsp), %rsi
    00001a89: 	movq	%rbx, 0xb8(%rsp)
    00001a91: 	movq	0x30(%rsp), %rdi
    00001a96: 	movq	%rax, 0xa8(%rsp)
    00001a9e: 	movq	%r15, 0x98(%rsp)
    00001aa6: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6822
    00001aab: 	movq	0x150(%rsp), %rdi
    00001ab3: 	cmpq	(%rsp), %rdi
    00001ab7: 	je	.Ltmp2178 # Offset: 6839
    00001ab9: 	movq	0x160(%rsp), %rax
    00001ac1: 	leaq	0x1(%rax), %rsi
    00001ac5: 	callq	_ZdlPvm@PLT # Offset: 6853
.Ltmp2178:
    00001aca: 	movq	0x20(%rsp), %rsi
    00001acf: 	leaq	DATAat0x13590(%rip), %rdx
    00001ad6: 	movq	%r14, %rdi
    00001ad9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6873
    00001ade: 	movq	0x68(%rsp), %rax
    00001ae3: 	movq	0x28(%rsp), %rcx
    00001ae8: 	movq	%r14, %r8
    00001aeb: 	movq	%r15, 0xc8(%rsp)
    00001af3: 	movq	0x48(%rsp), %rdx
    00001af8: 	movq	0x40(%rsp), %rsi
    00001afd: 	movq	%rbx, 0xb8(%rsp)
    00001b05: 	movq	0x30(%rsp), %rdi
    00001b0a: 	movq	%rax, 0xa8(%rsp)
    00001b12: 	movq	%r15, 0x98(%rsp)
    00001b1a: 	callq	"_Z14test_heap_sortISt16reverse_iteratorIS0_IPmEEmEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 6938
    00001b1f: 	movq	0x150(%rsp), %rdi
    00001b27: 	cmpq	(%rsp), %rdi
    00001b2b: 	je	.Ltmp2179 # Offset: 6955
    00001b2d: 	movq	0x160(%rsp), %rax
    00001b35: 	leaq	0x1(%rax), %rsi
    00001b39: 	callq	_ZdlPvm@PLT # Offset: 6969
.Ltmp2179:
    00001b3e: 	movq	0x20(%rsp), %rsi
    00001b43: 	leaq	DATAat0x135c0(%rip), %rdx
    00001b4a: 	movq	%r14, %rdi
    00001b4d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6989
    00001b52: 	callq	clock@PLT # Offset: 6994
    00001b57: 	movl	iterations(%rip), %r13d
    00001b5e: 	xorl	%ebp, %ebp
    00001b60: 	movq	%rax, start_time(%rip)
    00001b67: 	leaq	0x7e78(%rsp), %rax
    00001b6f: 	movq	%rax, 0x8(%rsp)
    00001b74: 	testl	%r13d, %r13d
    00001b77: 	jle	.Ltmp2180 # Offset: 7031
.Ltmp2185:
    00001b7d: 	movl	$0x3e80, %edx
    00001b82: 	movq	%r15, %rsi
    00001b85: 	movq	%rbx, %rdi
    00001b88: 	movl	$0x3e7, %r12d
    00001b8e: 	callq	memcpy@PLT # Offset: 7054
    00001b93: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2181:
    00001b98: 	movq	(%rbx,%r12,8), %rcx
    00001b9c: 	movq	%r12, %rdx
    00001b9f: 	movq	%rbx, %rsi
    00001ba2: 	movl	$0x7d0, %edi
    00001ba7: 	callq	_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPmmEEmEEmEEvlT_lT0_ # Offset: 7079
    00001bac: 	subq	$0x1, %r12
    00001bb0: 	jae	.Ltmp2181 # Offset: 7088
    00001bb2: 	movl	$0x7cf, %r12d
    00001bb8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2182:
    00001bc0: 	movq	0x7e70(%rsp), %rax
    00001bc8: 	xorl	%edx, %edx
    00001bca: 	movq	%r12, %rdi
    00001bcd: 	movq	%rbx, %rsi
    00001bd0: 	movq	(%rbx,%r12,8), %rcx
    00001bd4: 	movq	%rax, (%rbx,%r12,8)
    00001bd8: 	callq	_ZN9benchmark9__sift_inINS_16reverse_iteratorINS1_IPmmEEmEEmEEvlT_lT0_ # Offset: 7128
    00001bdd: 	subq	$0x1, %r12
    00001be1: 	jne	.Ltmp2182 # Offset: 7137
    00001be3: 	movq	0x7e70(%rsp), %rdx
    00001beb: 	movq	0x8(%rsp), %rax
    00001bf0: 	movq	0x50(%rsp), %rsi
    00001bf5: 	nopl	(%rax) # Size: 3
.Ltmp2184:
    00001bf8: 	movq	%rdx, %rcx
    00001bfb: 	movq	(%rax), %rdx
    00001bfe: 	cmpq	%rcx, %rdx
    00001c01: 	jb	.Ltmp2183 # Offset: 7169
    00001c07: 	addq	$0x8, %rax
    00001c0b: 	cmpq	%rsi, %rax
    00001c0e: 	jne	.Ltmp2184 # Offset: 7182
    00001c10: 	addl	$0x1, %ebp
    00001c13: 	cmpl	%r13d, %ebp
    00001c16: 	jl	.Ltmp2185 # Offset: 7190
.Ltmp2180:
    00001c1c: 	callq	clock@PLT # Offset: 7196
    00001c21: 	pxor	%xmm0, %xmm0
    00001c25: 	movq	%r14, %rdi
    00001c28: 	movq	%rax, end_time(%rip)
    00001c2f: 	subq	start_time(%rip), %rax
    00001c36: 	cvtsi2sd	%rax, %xmm0
    00001c3b: 	divsd	DATAat0x13600(%rip), %xmm0
    00001c43: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7235
    00001c48: 	movq	0x150(%rsp), %rdi
    00001c50: 	cmpq	(%rsp), %rdi
    00001c54: 	je	.Ltmp2186 # Offset: 7252
    00001c56: 	movq	0x160(%rsp), %rax
    00001c5e: 	leaq	0x1(%rax), %rsi
    00001c62: 	callq	_ZdlPvm@PLT # Offset: 7266
.Ltmp2186:
    00001c67: 	movq	0x20(%rsp), %rsi
    00001c6c: 	leaq	DATAat0x132be(%rip), %rdx
    00001c73: 	movq	%r14, %rdi
    00001c76: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7286
    00001c7b: 	movl	iterations(%rip), %edx
    00001c81: 	movl	$0x1, %r8d
    00001c87: 	movl	$0x1, %ecx
    00001c8c: 	movq	0x150(%rsp), %rdi
    00001c94: 	movl	$0x7d0, %esi
    00001c99: 	callq	_Z9summarizePKciiii # Offset: 7321
    00001c9e: 	movl	0x7c(%rsp), %eax
    00001ca2: 	movq	0x150(%rsp), %rdi
    00001caa: 	movl	%eax, iterations(%rip)
    00001cb0: 	cmpq	(%rsp), %rdi
    00001cb4: 	je	.Ltmp2187 # Offset: 7348
    00001cb6: 	movq	0x160(%rsp), %rax
    00001cbe: 	leaq	0x1(%rax), %rsi
    00001cc2: 	callq	_ZdlPvm@PLT # Offset: 7362
.Ltmp2187:
    00001cc7: 	movq	0x130(%rsp), %rdi
    00001ccf: 	leaq	0x140(%rsp), %rax
    00001cd7: 	cmpq	%rax, %rdi
    00001cda: 	je	.Ltmp2188 # Offset: 7386
    00001cdc: 	movq	0x140(%rsp), %rax
    00001ce4: 	leaq	0x1(%rax), %rsi
    00001ce8: 	callq	_ZdlPvm@PLT # Offset: 7400
.Ltmp2188:
    00001ced: 	movq	0x110(%rsp), %rdi
    00001cf5: 	cmpq	0x58(%rsp), %rdi
    00001cfa: 	je	.Ltmp2189 # Offset: 7418
    00001cfc: 	movq	0x120(%rsp), %rax
    00001d04: 	leaq	0x1(%rax), %rsi
    00001d08: 	callq	_ZdlPvm@PLT # Offset: 7432
.Ltmp2189:
    00001d0d: 	movq	0xf0(%rsp), %rdi
    00001d15: 	leaq	0x100(%rsp), %rax
    00001d1d: 	cmpq	%rax, %rdi
    00001d20: 	je	.Ltmp2190 # Offset: 7456
    00001d22: 	movq	0x100(%rsp), %rax
    00001d2a: 	leaq	0x1(%rax), %rsi
    00001d2e: 	callq	_ZdlPvm@PLT # Offset: 7470
.Ltmp2190:
    00001d33: 	movq	0xd0(%rsp), %rdi
    00001d3b: 	cmpq	0x70(%rsp), %rdi
    00001d40: 	je	.Ltmp2191 # Offset: 7488
    00001d42: 	movq	0xe0(%rsp), %rax
    00001d4a: 	leaq	0x1(%rax), %rsi
    00001d4e: 	callq	_ZdlPvm@PLT # Offset: 7502
.Ltmp2191:
    00001d53: 	movq	0xfb78(%rsp), %rax
    00001d5b: 	subq	%fs:0x28, %rax
    00001d64: 	jne	.Ltmp2192 # Offset: 7524
    00001d6a: 	addq	$0xfb88, %rsp
    00001d71: 	popq	%rbx
    00001d72: 	popq	%rbp
    00001d73: 	popq	%r12
    00001d75: 	popq	%r13
    00001d77: 	popq	%r14
    00001d79: 	popq	%r15
    00001d7b: 	retq # Offset: 7547
.Ltmp2035:
    00001d7c: 	subsd	DATAat0x13618(%rip), %xmm1
    00001d84: 	movabsq	$-0x8000000000000000, %rax
    00001d8e: 	cvttsd2si	%xmm1, %rdx
    00001d93: 	xorq	%rax, %rdx
    00001d96: 	jmp	.Ltmp2193 # Offset: 7574
.Ltmp2053:
    00001d9b: 	subsd	DATAat0x13618(%rip), %xmm1
    00001da3: 	movabsq	$-0x8000000000000000, %rax
    00001dad: 	cvttsd2si	%xmm1, %rdx
    00001db2: 	xorq	%rax, %rdx
    00001db5: 	jmp	.Ltmp2194 # Offset: 7605
.Ltmp2059:
    00001dba: 	subsd	DATAat0x13618(%rip), %xmm1
    00001dc2: 	movabsq	$-0x8000000000000000, %rax
    00001dcc: 	cvttsd2si	%xmm1, %rdx
    00001dd1: 	xorq	%rax, %rdx
    00001dd4: 	jmp	.Ltmp2195 # Offset: 7636
.Ltmp2065:
    00001dd9: 	subsd	DATAat0x13618(%rip), %xmm1
    00001de1: 	movabsq	$-0x8000000000000000, %rax
    00001deb: 	cvttsd2si	%xmm1, %rdx
    00001df0: 	xorq	%rax, %rdx
    00001df3: 	jmp	.Ltmp2196 # Offset: 7667
.Ltmp2041:
    00001df8: 	subsd	DATAat0x13618(%rip), %xmm1
    00001e00: 	movabsq	$-0x8000000000000000, %rax
    00001e0a: 	cvttsd2si	%xmm1, %rdx
    00001e0f: 	xorq	%rax, %rdx
    00001e12: 	jmp	.Ltmp2197 # Offset: 7698
.Ltmp2047:
    00001e17: 	subsd	DATAat0x13618(%rip), %xmm1
    00001e1f: 	movabsq	$-0x8000000000000000, %rax
    00001e29: 	cvttsd2si	%xmm1, %rdx
    00001e2e: 	xorq	%rax, %rdx
    00001e31: 	jmp	.Ltmp2198 # Offset: 7729
.Ltmp2100:
    00001e36: 	movq	%rcx, 0x7e70(%rsp)
    00001e3e: 	leaq	0x8(%rbx), %rsi
    00001e42: 	jmp	.Ltmp2104 # Offset: 7746
.Ltmp2105:
    00001e47: 	movq	0x150(%rsp), %rdx
    00001e4f: 	leaq	DATAat0x131ba(%rip), %rsi
    00001e56: 	movl	$0x1, %edi
    00001e5b: 	xorl	%eax, %eax
    00001e5d: 	callq	__printf_chk@PLT # Offset: 7773
    00001e62: 	movl	iterations(%rip), %eax
    00001e68: 	movl	%eax, 0x10(%rsp)
    00001e6c: 	movl	%r13d, %eax
    00001e6f: 	addl	$0x1, %eax
    00001e72: 	movl	%eax, %r13d
    00001e75: 	cmpl	0x10(%rsp), %eax
    00001e79: 	jl	.Ltmp2107 # Offset: 7801
    00001e7f: 	jmp	.Ltmp2099 # Offset: 7807
.Ltmp2079:
    00001e84: 	movq	0x150(%rsp), %rdx
    00001e8c: 	leaq	DATAat0x131ba(%rip), %rsi
    00001e93: 	movl	$0x1, %edi
    00001e98: 	xorl	%eax, %eax
    00001e9a: 	callq	__printf_chk@PLT # Offset: 7834
    00001e9f: 	movl	iterations(%rip), %eax
    00001ea5: 	addl	$0x1, %r13d
    00001ea9: 	movl	%eax, 0x10(%rsp)
    00001ead: 	cmpl	0x10(%rsp), %r13d
    00001eb2: 	jl	.Ltmp2081 # Offset: 7858
    00001eb8: 	jmp	.Ltmp2075 # Offset: 7864
.Ltmp2087:
    00001ebd: 	movq	0x150(%rsp), %rdx
    00001ec5: 	leaq	DATAat0x131ba(%rip), %rsi
    00001ecc: 	movl	$0x1, %edi
    00001ed1: 	xorl	%eax, %eax
    00001ed3: 	callq	__printf_chk@PLT # Offset: 7891
    00001ed8: 	movl	iterations(%rip), %eax
    00001ede: 	addl	$0x1, %r13d
    00001ee2: 	movl	%eax, 0x10(%rsp)
    00001ee6: 	cmpl	0x10(%rsp), %r13d
    00001eeb: 	jl	.Ltmp2089 # Offset: 7915
    00001ef1: 	jmp	.Ltmp2083 # Offset: 7921
.Ltmp2183:
    00001ef6: 	movq	0x150(%rsp), %rdx
    00001efe: 	leaq	DATAat0x131ba(%rip), %rsi
    00001f05: 	movl	$0x1, %edi
    00001f0a: 	xorl	%eax, %eax
    00001f0c: 	callq	__printf_chk@PLT # Offset: 7948
    00001f11: 	movl	iterations(%rip), %r13d
    00001f18: 	addl	$0x1, %ebp
    00001f1b: 	cmpl	%r13d, %ebp
    00001f1e: 	jl	.Ltmp2185 # Offset: 7966
    00001f24: 	jmp	.Ltmp2180 # Offset: 7972
.Ltmp2159:
    00001f29: 	movq	0x150(%rsp), %rdx
    00001f31: 	leaq	DATAat0x131ba(%rip), %rsi
    00001f38: 	movl	$0x1, %edi
    00001f3d: 	xorl	%eax, %eax
    00001f3f: 	callq	__printf_chk@PLT # Offset: 7999
    00001f44: 	movl	iterations(%rip), %eax
    00001f4a: 	addl	$0x1, 0x10(%rsp)
    00001f4f: 	movl	%eax, 0x78(%rsp)
    00001f53: 	movl	0x10(%rsp), %eax
    00001f57: 	cmpl	0x78(%rsp), %eax
    00001f5b: 	jl	.Ltmp2161 # Offset: 8027
    00001f61: 	jmp	.Ltmp2141 # Offset: 8033
.Ltmp2134:
    00001f66: 	movq	0x150(%rsp), %rdx
    00001f6e: 	leaq	DATAat0x131ba(%rip), %rsi
    00001f75: 	movl	$0x1, %edi
    00001f7a: 	xorl	%eax, %eax
    00001f7c: 	callq	__printf_chk@PLT # Offset: 8060
    00001f81: 	jmp	.Ltmp2199 # Offset: 8065
.Ltmp2122:
    00001f86: 	movq	0x150(%rsp), %rdx
    00001f8e: 	leaq	DATAat0x131ba(%rip), %rsi
    00001f95: 	movl	$0x1, %edi
    00001f9a: 	xorl	%eax, %eax
    00001f9c: 	callq	__printf_chk@PLT # Offset: 8092
    00001fa1: 	jmp	.Ltmp2200 # Offset: 8097
.Ltmp2166:
    00001fa6: 	movq	0x150(%rsp), %rdx
    00001fae: 	leaq	DATAat0x131ba(%rip), %rsi
    00001fb5: 	movl	$0x1, %edi
    00001fba: 	xorl	%eax, %eax
    00001fbc: 	callq	__printf_chk@PLT # Offset: 8124
    00001fc1: 	movl	iterations(%rip), %eax
    00001fc7: 	addl	$0x1, 0x10(%rsp)
    00001fcc: 	movl	%eax, 0x60(%rsp)
    00001fd0: 	movl	0x10(%rsp), %eax
    00001fd4: 	cmpl	0x60(%rsp), %eax
    00001fd8: 	jl	.Ltmp2168 # Offset: 8152
    00001fde: 	jmp	.Ltmp2163 # Offset: 8158
.Ltmp2173:
    00001fe3: 	movq	0x150(%rsp), %rdx
    00001feb: 	leaq	DATAat0x131ba(%rip), %rsi
    00001ff2: 	movl	$0x1, %edi
    00001ff7: 	xorl	%eax, %eax
    00001ff9: 	callq	__printf_chk@PLT # Offset: 8185
    00001ffe: 	movl	iterations(%rip), %eax
    00002004: 	addl	$0x1, 0x10(%rsp)
    00002009: 	movl	%eax, 0x60(%rsp)
    0000200d: 	movl	0x10(%rsp), %eax
    00002011: 	cmpl	0x60(%rsp), %eax
    00002015: 	jl	.Ltmp2175 # Offset: 8213
    0000201b: 	jmp	.Ltmp2170 # Offset: 8219
.Ltmp2149:
    00002020: 	movq	%r9, %rax
    00002023: 	subq	%rbx, %rax
    00002026: 	cmpq	$0x8, %rax
    0000202a: 	jle	.Ltmp2201 # Offset: 8234
    00002030: 	movq	0x7e70(%rsp), %rcx
    00002038: 	movq	%r9, %r13
    0000203b: 	movq	%rbx, %rax
.Ltmp2206:
    0000203e: 	movq	-0x8(%r13), %rdi
    00002042: 	leaq	-0x8(%r13), %rsi
    00002046: 	cmpq	%rdi, %rcx
    00002049: 	jb	.Ltmp2202 # Offset: 8265
    0000204b: 	cmpq	%rax, %rsi
    0000204e: 	jbe	.Ltmp2203 # Offset: 8270
    00002050: 	movq	(%rax), %rdx
    00002053: 	cmpq	%rdx, %rcx
    00002056: 	jbe	.Ltmp2204 # Offset: 8278
    00002058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2205:
    00002060: 	movq	0x8(%rax), %rdx
    00002064: 	addq	$0x8, %rax
    00002068: 	cmpq	%rdx, %rcx
    0000206b: 	ja	.Ltmp2205 # Offset: 8299
    0000206d: 	cmpq	%rax, %rsi
    00002070: 	jbe	.Ltmp2203 # Offset: 8304
.Ltmp2204:
    00002072: 	movq	%rdx, (%rsi)
    00002075: 	movq	%rdi, (%rax)
.Ltmp2202:
    00002078: 	movq	%rsi, %r13
    0000207b: 	jmp	.Ltmp2206 # Offset: 8315
.Ltmp2203:
    0000207d: 	movq	%r13, %rsi
    00002080: 	movq	%rbx, %rdi
    00002083: 	movq	%r9, 0x80(%rsp)
    0000208b: 	movq	%r8, 0x88(%rsp)
    00002093: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 8339
    00002098: 	movq	0x80(%rsp), %rsi
    000020a0: 	movq	%r13, %rdi
    000020a3: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 8355
    000020a8: 	movq	0x88(%rsp), %r8
    000020b0: 	movq	0x80(%rsp), %r9
.Ltmp2201:
    000020b8: 	movq	%r8, %rax
    000020bb: 	movq	%r9, %rdi
    000020be: 	subq	%r9, %rax
    000020c1: 	cmpq	$0x8, %rax
    000020c5: 	jle	.Ltmp2147 # Offset: 8389
    000020cb: 	movq	(%r9), %rdx
    000020ce: 	movq	%r8, %r13
.Ltmp2211:
    000020d1: 	movq	-0x8(%r13), %rsi
    000020d5: 	leaq	-0x8(%r13), %rcx
    000020d9: 	cmpq	%rsi, %rdx
    000020dc: 	jb	.Ltmp2207 # Offset: 8412
    000020de: 	cmpq	%r9, %rcx
    000020e1: 	jbe	.Ltmp2208 # Offset: 8417
    000020e7: 	movq	(%r9), %rax
    000020ea: 	cmpq	%rax, %rdx
    000020ed: 	jbe	.Ltmp2209 # Offset: 8429
    000020ef: 	nop # Size: 1
.Ltmp2210:
    000020f0: 	movq	0x8(%r9), %rax
    000020f4: 	addq	$0x8, %r9
    000020f8: 	cmpq	%rax, %rdx
    000020fb: 	ja	.Ltmp2210 # Offset: 8443
    000020fd: 	cmpq	%r9, %rcx
    00002100: 	jbe	.Ltmp2208 # Offset: 8448
.Ltmp2209:
    00002106: 	movq	%rax, (%rcx)
    00002109: 	movq	%rsi, (%r9)
.Ltmp2207:
    0000210c: 	movq	%rcx, %r13
    0000210f: 	jmp	.Ltmp2211 # Offset: 8463
.Ltmp2155:
    00002111: 	movq	%rdx, %rax
    00002114: 	subq	%r8, %rax
    00002117: 	cmpq	$0x8, %rax
    0000211b: 	jle	.Ltmp2212 # Offset: 8475
    0000211d: 	movq	(%r8), %rsi
    00002120: 	movq	%rdx, %r13
    00002123: 	movq	%r8, %rax
.Ltmp2217:
    00002126: 	movq	-0x8(%r13), %r9
    0000212a: 	leaq	-0x8(%r13), %rdi
    0000212e: 	cmpq	%r9, %rsi
    00002131: 	jb	.Ltmp2213 # Offset: 8497
    00002133: 	cmpq	%rax, %rdi
    00002136: 	jbe	.Ltmp2214 # Offset: 8502
    00002138: 	movq	(%rax), %rcx
    0000213b: 	cmpq	%rsi, %rcx
    0000213e: 	jae	.Ltmp2215 # Offset: 8510
.Ltmp2216:
    00002140: 	movq	0x8(%rax), %rcx
    00002144: 	addq	$0x8, %rax
    00002148: 	cmpq	%rcx, %rsi
    0000214b: 	ja	.Ltmp2216 # Offset: 8523
    0000214d: 	cmpq	%rax, %rdi
    00002150: 	jbe	.Ltmp2214 # Offset: 8528
.Ltmp2215:
    00002152: 	movq	%rcx, (%rdi)
    00002155: 	movq	%r9, (%rax)
.Ltmp2213:
    00002158: 	movq	%rdi, %r13
    0000215b: 	jmp	.Ltmp2217 # Offset: 8539
.Ltmp2214:
    0000215d: 	movq	%r8, %rdi
    00002160: 	movq	%r13, %rsi
    00002163: 	movq	%rdx, 0x80(%rsp)
    0000216b: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 8555
    00002170: 	movq	0x80(%rsp), %rsi
    00002178: 	movq	%r13, %rdi
    0000217b: 	callq	_ZN9benchmark9quicksortINS_16reverse_iteratorINS1_IPmmEEmEEEEvT_S5_ # Offset: 8571
    00002180: 	movq	0x80(%rsp), %rdx
.Ltmp2212:
    00002188: 	movq	0x60(%rsp), %r13
    0000218d: 	movq	%rdx, %r9
    00002190: 	movq	%r13, %rax
    00002193: 	subq	%rdx, %rax
    00002196: 	cmpq	$0x8, %rax
    0000219a: 	jle	.Ltmp2153 # Offset: 8602
    000021a0: 	movq	(%rdx), %rcx
.Ltmp2222:
    000021a3: 	movq	-0x8(%r13), %rdi
    000021a7: 	leaq	-0x8(%r13), %rsi
    000021ab: 	cmpq	%rdi, %rcx
    000021ae: 	jb	.Ltmp2218 # Offset: 8622
    000021b0: 	cmpq	%rdx, %rsi
    000021b3: 	jbe	.Ltmp2219 # Offset: 8627
    000021b9: 	movq	(%rdx), %rax
    000021bc: 	cmpq	%rcx, %rax
    000021bf: 	jae	.Ltmp2220 # Offset: 8639
    000021c1: 	nopl	(%rax) # Size: 7
.Ltmp2221:
    000021c8: 	movq	0x8(%rdx), %rax
    000021cc: 	addq	$0x8, %rdx
    000021d0: 	cmpq	%rax, %rcx
    000021d3: 	ja	.Ltmp2221 # Offset: 8659
    000021d5: 	cmpq	%rdx, %rsi
    000021d8: 	jbe	.Ltmp2219 # Offset: 8664
.Ltmp2220:
    000021de: 	movq	%rax, (%rsi)
    000021e1: 	movq	%rdi, (%rdx)
.Ltmp2218:
    000021e4: 	movq	%rsi, %r13
    000021e7: 	jmp	.Ltmp2222 # Offset: 8679
.Ltmp2112:
    000021e9: 	testq	%r13, %r13
    000021ec: 	jne	.Ltmp2223 # Offset: 8684
    000021f2: 	movq	0x58(%rsp), %rax
    000021f7: 	jmp	.Ltmp2224 # Offset: 8695
.Ltmp2111:
    000021fc: 	movq	0x28(%rsp), %rsi
    00002201: 	leaq	0x110(%rsp), %rdi
    00002209: 	xorl	%edx, %edx
    0000220b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8715
    00002210: 	movq	%rax, 0x110(%rsp)
    00002218: 	movq	%rax, %rdi
    0000221b: 	movq	0xc0(%rsp), %rax
    00002223: 	movq	%rax, 0x120(%rsp)
.Ltmp2230:
    0000222b: 	movq	0x8(%rsp), %rsi
    00002230: 	movq	%r13, %rdx
    00002233: 	callq	memcpy@PLT # Offset: 8755
    00002238: 	movq	0xc0(%rsp), %r13
    00002240: 	movq	0x110(%rsp), %rax
    00002248: 	jmp	.Ltmp2224 # Offset: 8776
.Ltmp2094:
    0000224d: 	testq	%r13, %r13
    00002250: 	jne	.Ltmp2225 # Offset: 8784
    00002256: 	movq	(%rsp), %rax
    0000225a: 	jmp	.Ltmp2226 # Offset: 8794
.Ltmp2093:
    0000225f: 	leaq	0xc0(%rsp), %rsi
    00002267: 	xorl	%edx, %edx
    00002269: 	movq	%r14, %rdi
    0000226c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8812
    00002271: 	movq	%rax, 0x150(%rsp)
    00002279: 	movq	%rax, %rdi
    0000227c: 	movq	0xc0(%rsp), %rax
    00002284: 	movq	%rax, 0x160(%rsp)
.Ltmp2231:
    0000228c: 	movq	0x8(%rsp), %rsi
    00002291: 	movq	%r13, %rdx
    00002294: 	callq	memcpy@PLT # Offset: 8852
    00002299: 	movq	0xc0(%rsp), %r13
    000022a1: 	movq	0x150(%rsp), %rax
    000022a9: 	jmp	.Ltmp2226 # Offset: 8873
.Ltmp2073:
    000022ae: 	testq	%r14, %r14
    000022b1: 	jne	.Ltmp2227 # Offset: 8881
    000022b7: 	movq	(%rsp), %rax
    000022bb: 	jmp	.Ltmp2228 # Offset: 8891
.Ltmp2072:
    000022c0: 	leaq	0xc0(%rsp), %rsi
    000022c8: 	leaq	0x150(%rsp), %rdi
    000022d0: 	xorl	%edx, %edx
    000022d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8914
    000022d7: 	movq	%rax, 0x150(%rsp)
    000022df: 	movq	%rax, %rdi
    000022e2: 	movq	0xc0(%rsp), %rax
    000022ea: 	movq	%rax, 0x160(%rsp)
.Ltmp2232:
    000022f2: 	movq	%r14, %rdx
    000022f5: 	movq	%r13, %rsi
    000022f8: 	callq	memcpy@PLT # Offset: 8952
    000022fd: 	movq	0xc0(%rsp), %r14
    00002305: 	movq	0x150(%rsp), %rax
    0000230d: 	jmp	.Ltmp2228 # Offset: 8973
.Ltmp2025:
    00002312: 	leaq	0xc0(%rsp), %rsi
    0000231a: 	xorl	%edx, %edx
    0000231c: 	movq	%r15, %rdi
    0000231f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8991
    00002324: 	movq	%rax, 0xbcf0(%rsp)
    0000232c: 	movq	%rax, %rdi
    0000232f: 	movq	0xc0(%rsp), %rax
    00002337: 	movq	%rax, 0xbd00(%rsp)
.Ltmp2229:
    0000233f: 	movq	%r13, %rdx
    00002342: 	movq	%r14, %rsi
    00002345: 	callq	memcpy@PLT # Offset: 9029
    0000234a: 	movq	0xc0(%rsp), %r13
    00002352: 	movq	0xbcf0(%rsp), %rax
    0000235a: 	jmp	.Ltmp2027 # Offset: 9050
.Ltmp2031:
    0000235f: 	movq	0x8(%rsp), %rdi
    00002364: 	jmp	.Ltmp2229 # Offset: 9060
.Ltmp2032:
    00002366: 	leaq	DATAat0x131cf(%rip), %rdi
    0000236d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9069
.Ltmp2071:
    00002372: 	leaq	DATAat0x13118(%rip), %rdi
    00002379: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9081
.Ltmp2074:
    0000237e: 	leaq	DATAat0x131cf(%rip), %rdi
    00002385: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9093
.Ltmp2092:
    0000238a: 	leaq	DATAat0x13118(%rip), %rdi
    00002391: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9105
.Ltmp2095:
    00002396: 	leaq	DATAat0x131cf(%rip), %rdi
    0000239d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9117
.Ltmp2110:
    000023a2: 	leaq	DATAat0x13118(%rip), %rdi
    000023a9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9129
.Ltmp2113:
    000023ae: 	leaq	DATAat0x131cf(%rip), %rdi
    000023b5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9141
.Ltmp2192:
    000023ba: 	callq	__stack_chk_fail@PLT # Offset: 9146
.Ltmp2223:
    000023bf: 	movq	0x58(%rsp), %rdi
    000023c4: 	jmp	.Ltmp2230 # Offset: 9156
.Ltmp2225:
    000023c9: 	movq	(%rsp), %rdi
    000023cd: 	jmp	.Ltmp2231 # Offset: 9165
.Ltmp2227:
    000023d2: 	movq	(%rsp), %rdi
    000023d6: 	jmp	.Ltmp2232 # Offset: 9174
.Ltmp2024:
    000023db: 	leaq	DATAat0x13118(%rip), %rdi
    000023e2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9186
    000023e7: 	endbr64
.Ltmp2236:
    000023eb: 	movq	%rax, %rbx
    000023ee: 	jmp	.Ltmp2233 # Offset: 9198
    000023f3: 	endbr64
.Ltmp2245:
    000023f7: 	movq	%rax, %rbx
    000023fa: 	jmp	.Ltmp2234 # Offset: 9210
    000023ff: 	endbr64
.Ltmp2244:
    00002403: 	movq	%rax, %rbx
    00002406: 	jmp	.Ltmp2235 # Offset: 9222
    0000240b: 	endbr64
    0000240f: 	jmp	.Ltmp2236 # Offset: 9231
    00002411: 	endbr64
.Ltmp2238:
    00002415: 	movq	%rax, %rbx
    00002418: 	jmp	.Ltmp2237 # Offset: 9240
    0000241a: 	endbr64
    0000241e: 	jmp	.Ltmp2238 # Offset: 9246
    00002420: 	endbr64
    00002424: 	jmp	.Ltmp2238 # Offset: 9252
    00002426: 	endbr64
.Ltmp2243:
    0000242a: 	movq	%rax, %rbx
    0000242d: 	jmp	.Ltmp2239 # Offset: 9261
.Ltmp2237:
    0000242f: 	movq	0x150(%rsp), %rdi
    00002437: 	cmpq	(%rsp), %rdi
    0000243b: 	je	.Ltmp2240 # Offset: 9275
    0000243d: 	movq	0x160(%rsp), %rax
    00002445: 	leaq	0x1(%rax), %rsi
    00002449: 	callq	_ZdlPvm@PLT # Offset: 9289
.Ltmp2240:
    0000244e: 	movq	0xf0(%rsp), %rdi
    00002456: 	leaq	0x100(%rsp), %rax
    0000245e: 	cmpq	%rax, %rdi
    00002461: 	je	.Ltmp2241 # Offset: 9313
    00002463: 	movq	0x100(%rsp), %rax
    0000246b: 	leaq	0x1(%rax), %rsi
    0000246f: 	callq	_ZdlPvm@PLT # Offset: 9327
.Ltmp2241:
    00002474: 	movq	0xd0(%rsp), %rdi
    0000247c: 	cmpq	0x70(%rsp), %rdi
    00002481: 	je	.Ltmp2242 # Offset: 9345
    00002483: 	movq	0xe0(%rsp), %rax
    0000248b: 	leaq	0x1(%rax), %rsi
    0000248f: 	callq	_ZdlPvm@PLT # Offset: 9359
.Ltmp2242:
    00002494: 	movq	%rbx, %rdi
    00002497: 	callq	_Unwind_Resume@PLT # Offset: 9367
.Ltmp2239:
    0000249c: 	movq	0xbcf0(%rsp), %rdi
    000024a4: 	cmpq	0x8(%rsp), %rdi
    000024a9: 	je	.Ltmp2241 # Offset: 9385
    000024ab: 	movq	0xbd00(%rsp), %rax
    000024b3: 	leaq	0x1(%rax), %rsi
    000024b7: 	callq	_ZdlPvm@PLT # Offset: 9399
    000024bc: 	jmp	.Ltmp2241 # Offset: 9404
    000024be: 	endbr64
    000024c2: 	jmp	.Ltmp2243 # Offset: 9410
    000024c7: 	endbr64
    000024cb: 	jmp	.Ltmp2243 # Offset: 9419
    000024d0: 	endbr64
    000024d4: 	jmp	.Ltmp2243 # Offset: 9428
    000024d9: 	endbr64
    000024dd: 	jmp	.Ltmp2243 # Offset: 9437
    000024e2: 	endbr64
    000024e6: 	jmp	.Ltmp2238 # Offset: 9446
    000024eb: 	endbr64
    000024ef: 	jmp	.Ltmp2238 # Offset: 9455
    000024f4: 	endbr64
    000024f8: 	jmp	.Ltmp2238 # Offset: 9464
    000024fd: 	endbr64
    00002501: 	jmp	.Ltmp2238 # Offset: 9473
    00002506: 	endbr64
    0000250a: 	jmp	.Ltmp2244 # Offset: 9482
    0000250f: 	endbr64
    00002513: 	jmp	.Ltmp2238 # Offset: 9491
    00002518: 	endbr64
    0000251c: 	jmp	.Ltmp2244 # Offset: 9500
    00002521: 	endbr64
    00002525: 	jmp	.Ltmp2244 # Offset: 9509
    0000252a: 	endbr64
    0000252e: 	movq	%rax, %rbx
    00002531: 	jmp	.Ltmp2241 # Offset: 9521
    00002536: 	endbr64
    0000253a: 	jmp	.Ltmp2243 # Offset: 9530
    0000253f: 	endbr64
    00002543: 	movq	%rax, %rbx
    00002546: 	jmp	.Ltmp2240 # Offset: 9542
    0000254b: 	endbr64
    0000254f: 	jmp	.Ltmp2243 # Offset: 9551
    00002554: 	endbr64
    00002558: 	jmp	.Ltmp2245 # Offset: 9560
    0000255d: 	endbr64
    00002561: 	jmp	.Ltmp2245 # Offset: 9569
    00002566: 	endbr64
    0000256a: 	jmp	.Ltmp2245 # Offset: 9578
    0000256f: 	endbr64
    00002573: 	jmp	.Ltmp2245 # Offset: 9587
    00002578: 	endbr64
    0000257c: 	jmp	.Ltmp2244 # Offset: 9596
    00002581: 	endbr64
    00002585: 	jmp	.Ltmp2244 # Offset: 9605
    0000258a: 	endbr64
    0000258e: 	jmp	.Ltmp2244 # Offset: 9614
.Ltmp2234:
    00002593: 	movq	0x150(%rsp), %rdi
    0000259b: 	cmpq	(%rsp), %rdi
    0000259f: 	je	.Ltmp2233 # Offset: 9631
    000025a1: 	movq	0x160(%rsp), %rax
    000025a9: 	leaq	0x1(%rax), %rsi
    000025ad: 	callq	_ZdlPvm@PLT # Offset: 9645
    000025b2: 	jmp	.Ltmp2233 # Offset: 9650
    000025b4: 	endbr64
    000025b8: 	jmp	.Ltmp2245 # Offset: 9656
    000025bd: 	endbr64
    000025c1: 	movq	%rax, %rbx
    000025c4: 	jmp	.Ltmp2246 # Offset: 9668
.Ltmp2235:
    000025c6: 	movq	0x150(%rsp), %rdi
    000025ce: 	cmpq	(%rsp), %rdi
    000025d2: 	je	.Ltmp2246 # Offset: 9682
    000025d4: 	movq	0x160(%rsp), %rax
    000025dc: 	leaq	0x1(%rax), %rsi
    000025e0: 	callq	_ZdlPvm@PLT # Offset: 9696
.Ltmp2246:
    000025e5: 	movq	0x130(%rsp), %rdi
    000025ed: 	leaq	0x140(%rsp), %rax
    000025f5: 	cmpq	%rax, %rdi
    000025f8: 	je	.Ltmp2233 # Offset: 9720
    000025fa: 	movq	0x140(%rsp), %rax
    00002602: 	leaq	0x1(%rax), %rsi
    00002606: 	callq	_ZdlPvm@PLT # Offset: 9734
.Ltmp2233:
    0000260b: 	movq	0x110(%rsp), %rdi
    00002613: 	cmpq	0x58(%rsp), %rdi
    00002618: 	je	.Ltmp2240 # Offset: 9752
    0000261e: 	movq	0x120(%rsp), %rax
    00002626: 	leaq	0x1(%rax), %rsi
    0000262a: 	callq	_ZdlPvm@PLT # Offset: 9770
    0000262f: 	jmp	.Ltmp2240 # Offset: 9775
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_fini" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x12244
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x12244
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 76 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 969 instructions were shortened
BOLT-INFO: removed 226 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 69 out of 103 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x20230c
