BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0xc200000, offset 0xc200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x9030, which lies outside .bss
BOLT-WARNING: split function detected on input : main.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x8ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "_start" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x1c30
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1c30
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x8fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x1c60
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1c60
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp16 # Offset: 17
    00000013: 	movq	DATAat0x8fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp16 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp16:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1c90
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1c90
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp17 # Offset: 34
    00000024: 	movq	DATAat0x8ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp17 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp17:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1cd0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1cd0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp18 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp19 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp19:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp18:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1d10
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x1d10
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0/memmove.cpp/1
  Number      : 9
  State       : disassembled
  Address     : 0x1d20
  Size        : 0xbf
  MaxSize     : 0xc0
  Offset      : 0x1d20
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	pushq	%r13
    00000002: 	leaq	0x10(%rdi), %r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r13, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp20 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r12
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp21 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp22 # Offset: 73
    0000004b: 	movzbl	(%rbp), %eax
    0000004f: 	movb	%al, 0x10(%rbx)
.Ltmp24:
    00000052: 	movq	(%rsp), %rax
    00000056: 	movq	(%rbx), %rdx
    00000059: 	movq	%rax, 0x8(%rbx)
    0000005d: 	movb	$0x0, (%rdx,%rax)
    00000061: 	movq	0x8(%rsp), %rax
    00000066: 	subq	%fs:0x28, %rax
    0000006f: 	jne	.Ltmp23 # Offset: 111
    00000071: 	addq	$0x18, %rsp
    00000075: 	popq	%rbx
    00000076: 	popq	%rbp
    00000077: 	popq	%r12
    00000079: 	popq	%r13
    0000007b: 	retq # Offset: 123
.Ltmp22:
    0000007c: 	testq	%rax, %rax
    0000007f: 	je	.Ltmp24 # Offset: 127
    00000081: 	jmp	.Ltmp25 # Offset: 129
.Ltmp21:
    00000083: 	movq	%rsp, %rsi
    00000086: 	xorl	%edx, %edx
    00000088: 	movq	%rbx, %rdi
    0000008b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 139
    00000090: 	movq	%rax, (%rbx)
    00000093: 	movq	%rax, %r13
    00000096: 	movq	(%rsp), %rax
    0000009a: 	movq	%rax, 0x10(%rbx)
.Ltmp25:
    0000009e: 	movq	%r12, %rdx
    000000a1: 	movq	%rbp, %rsi
    000000a4: 	movq	%r13, %rdi
    000000a7: 	callq	memcpy@PLT # Offset: 167
    000000ac: 	jmp	.Ltmp24 # Offset: 172
.Ltmp23:
    000000ae: 	callq	__stack_chk_fail@PLT # Offset: 174
.Ltmp20:
    000000b3: 	leaq	DATAat0x6008(%rip), %rdi
    000000ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 186
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x1de0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x1de0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp26 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp27 # Offset: 38
.Ltmp26:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp28 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp27:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp28:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x6038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z12test_memmoveIhPFPvS0_PKvmEEvPT_PKS5_iT0_PKc.constprop.0/1(*2)" after disassembly {
  All names   : _Z12test_memmoveIhPFPvS0_PKvmEEvPT_PKS5_iT0_PKc.constprop.0/1
                _Z12test_memmoveIhPFPvS0_PKvmEEvPT_PKS5_iT0_PKc.constprop.0/memmove.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x1e80
  Size        : 0x136
  MaxSize     : 0x140
  Offset      : 0x1e80
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIhPFPvS0_PKvmEEvPT_PKS5_iT0_PKc.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r15
    00000002: 	movq	%rcx, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	movslq	%edx, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rsi, %r12
    00000011: 	movq	%r13, %r14
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdi, %rbp
    00000018: 	pushq	%rbx
    00000019: 	xorl	%ebx, %ebx
    0000001b: 	subq	$0x8, %rsp
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp29 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp30:
    00000038: 	movq	%r13, %rdx
    0000003b: 	movq	%r12, %rsi
    0000003e: 	movq	%rbp, %rdi
    00000041: 	addl	$0x1, %ebx
    00000044: 	callq	memmove@PLT # Offset: 68
    00000049: 	cmpl	iterations(%rip), %ebx
    0000004f: 	jl	.Ltmp30 # Offset: 79
.Ltmp29:
    00000051: 	movl	current_test(%rip), %edx
    00000057: 	cmpl	$0x64, %edx
    0000005a: 	ja	.Ltmp31 # Offset: 90
    00000060: 	movl	allocated_results(%rip), %edx
    00000066: 	cmpl	$0x64, %edx
    00000069: 	ja	.Ltmp32 # Offset: 105
    0000006f: 	callq	clock@PLT # Offset: 111
    00000074: 	pxor	%xmm0, %xmm0
    00000078: 	movq	%r15, %rdi
    0000007b: 	movq	%rax, end_time(%rip)
    00000082: 	subq	start_time(%rip), %rax
    00000089: 	cvtsi2sd	%rax, %xmm0
    0000008e: 	divsd	DATAat0x6b78(%rip), %xmm0
    00000096: 	callq	_Z13record_resultdPKc # Offset: 150
    0000009b: 	movq	%rbp, %rdx
    0000009e: 	subq	%r12, %rdx
    000000a1: 	movq	%rdx, %rax
    000000a4: 	negq	%rax
    000000a7: 	cmovsq	%rdx, %rax
    000000ab: 	movslq	%r14d, %rdx
    000000ae: 	cmpq	%rdx, %rax
    000000b1: 	jl	.Ltmp33 # Offset: 177
    000000b3: 	movq	%r12, %rsi
    000000b6: 	movq	%rbp, %rdi
    000000b9: 	callq	memcmp@PLT # Offset: 185
    000000be: 	testl	%eax, %eax
    000000c0: 	jne	.Ltmp34 # Offset: 192
.Ltmp33:
    000000c2: 	addq	$0x8, %rsp
    000000c6: 	popq	%rbx
    000000c7: 	popq	%rbp
    000000c8: 	popq	%r12
    000000ca: 	popq	%r13
    000000cc: 	popq	%r14
    000000ce: 	popq	%r15
    000000d0: 	retq # Offset: 208
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp34:
    000000d8: 	addq	$0x8, %rsp
    000000dc: 	movq	%r15, %rdx
    000000df: 	leaq	DATAat0x6726(%rip), %rsi
    000000e6: 	xorl	%eax, %eax
    000000e8: 	popq	%rbx
    000000e9: 	movl	$0x1, %edi
    000000ee: 	popq	%rbp
    000000ef: 	popq	%r12
    000000f1: 	popq	%r13
    000000f3: 	popq	%r14
    000000f5: 	popq	%r15
    000000f7: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 247
.Ltmp31:
    000000fc: 	movl	$0x1, %edi
    00000101: 	leaq	DATAat0x6058(%rip), %rsi
    00000108: 	xorl	%eax, %eax
    0000010a: 	callq	__printf_chk@PLT # Offset: 266
    0000010f: 	movl	$0xfffffffc, %edi
    00000114: 	callq	exit@PLT # Offset: 276
.Ltmp32:
    00000119: 	movl	$0x1, %edi
    0000011e: 	leaq	DATAat0x6088(%rip), %rsi
    00000125: 	xorl	%eax, %eax
    00000127: 	callq	__printf_chk@PLT # Offset: 295
    0000012c: 	movl	$0xfffffffe, %edi
    00000131: 	callq	exit@PLT # Offset: 305
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIhPFPvS0_PKvmEEvPT_PKS5_iT0_PKc.constprop.0/1(*2)"

Binary Function "_Z12test_memmoveIh17iterator_memmove2EvPT_PKS1_iT0_PKc.isra.0/1(*2)" after disassembly {
  All names   : _Z12test_memmoveIh17iterator_memmove2EvPT_PKS1_iT0_PKc.isra.0/1
                _Z12test_memmoveIh17iterator_memmove2EvPT_PKS1_iT0_PKc.isra.0/memmove.cpp/1
  Number      : 12
  State       : disassembled
  Address     : 0x1fc0
  Size        : 0x340
  MaxSize     : 0x340
  Offset      : 0x1fc0
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIh17iterator_memmove2EvPT_PKS1_iT0_PKc.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x48, %rsp
    00000014: 	movq	%rcx, 0x38(%rsp)
    00000019: 	movl	%edx, 0xc(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %ecx
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%ecx, %ecx
    00000031: 	jle	.Ltmp35 # Offset: 49
    00000037: 	movslq	0xc(%rsp), %r9
    0000003c: 	cmpq	%r12, %rbp
    0000003f: 	sete	%bl
    00000042: 	testq	%r9, %r9
    00000045: 	leaq	(%r12,%r9), %rsi
    00000049: 	leaq	-0x1(%r9), %r15
    0000004d: 	movq	%r9, %r11
    00000050: 	sete	%al
    00000053: 	movq	%r9, %r10
    00000056: 	movq	%r15, 0x10(%rsp)
    0000005b: 	orl	%eax, %ebx
    0000005d: 	cmpq	%rsi, %rbp
    00000060: 	leaq	(%rbp,%r9), %rax
    00000065: 	setb	%r14b
    00000069: 	cmpq	%r12, %rbp
    0000006c: 	leaq	-0x1(%rax), %rdi
    00000070: 	seta	%dl
    00000073: 	movq	%rdi, (%rsp)
    00000077: 	leaq	0x1(%r12), %rdi
    0000007c: 	andl	%edx, %r14d
    0000007f: 	movq	%rbp, %rdx
    00000082: 	subq	%rdi, %rdx
    00000085: 	cmpq	$0xe, %rdx
    00000089: 	seta	%dil
    0000008d: 	cmpq	$0x6, %r15
    00000091: 	seta	%dl
    00000094: 	andq	$-0x10, %r11
    00000098: 	andl	%edx, %edi
    0000009a: 	subq	%r11, %r10
    0000009d: 	movq	%r11, %r15
    000000a0: 	xorl	%edx, %edx
    000000a2: 	movb	%dil, 0xb(%rsp)
    000000a7: 	leaq	-0x1(%r10), %r8
    000000ab: 	leaq	(%r12,%r11), %rdi
    000000af: 	movq	%rdi, 0x28(%rsp)
    000000b4: 	leaq	(%rbp,%r11), %rdi
    000000b9: 	movq	%r10, 0x18(%rsp)
    000000be: 	movq	%r8, 0x20(%rsp)
    000000c3: 	movq	%rdi, 0x30(%rsp)
    000000c8: 	movq	%r9, %rdi
    000000cb: 	negq	%rdi
    000000ce: 	nop # Size: 2
.Ltmp43:
    000000d0: 	testb	%bl, %bl
    000000d2: 	jne	.Ltmp36 # Offset: 210
    000000d8: 	testb	%r14b, %r14b
    000000db: 	jne	.Ltmp37 # Offset: 219
    000000e1: 	cmpq	%rax, %rbp
    000000e4: 	je	.Ltmp36 # Offset: 228
    000000ea: 	cmpb	$0x0, 0xb(%rsp)
    000000ef: 	je	.Ltmp38 # Offset: 239
    000000f5: 	cmpq	$0xe, 0x10(%rsp)
    000000fb: 	jbe	.Ltmp39 # Offset: 251
    00000101: 	xorl	%ecx, %ecx
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp40:
    00000108: 	movdqu	(%r12,%rcx), %xmm1
    0000010e: 	movups	%xmm1, (%rbp,%rcx)
    00000113: 	addq	$0x10, %rcx
    00000117: 	cmpq	%r11, %rcx
    0000011a: 	jne	.Ltmp40 # Offset: 282
    0000011c: 	cmpq	%r15, %r9
    0000011f: 	je	.Ltmp41 # Offset: 287
    00000125: 	cmpq	$0x6, 0x20(%rsp)
    0000012b: 	movq	0x18(%rsp), %r13
    00000130: 	jbe	.Ltmp42 # Offset: 304
    00000136: 	movq	0x30(%rsp), %rcx
    0000013b: 	movq	0x28(%rsp), %r8
    00000140: 	movq	%r15, %r10
.Ltmp50:
    00000143: 	movq	(%r12,%r10), %xmm0
    00000149: 	movq	%xmm0, (%rbp,%r10)
    00000150: 	movq	%r13, %r10
    00000153: 	andq	$-0x8, %r10
    00000157: 	addq	%r10, %r8
    0000015a: 	addq	%r10, %rcx
    0000015d: 	cmpq	%r10, %r13
    00000160: 	je	.Ltmp41 # Offset: 352
.Ltmp51:
    00000162: 	movzbl	(%r8), %r10d
    00000166: 	movb	%r10b, (%rcx)
    00000169: 	leaq	0x1(%rcx), %r10
    0000016d: 	cmpq	%r10, %rax
    00000170: 	je	.Ltmp41 # Offset: 368
    00000172: 	movzbl	0x1(%r8), %r10d
    00000177: 	movb	%r10b, 0x1(%rcx)
    0000017b: 	leaq	0x2(%rcx), %r10
    0000017f: 	cmpq	%r10, %rax
    00000182: 	je	.Ltmp41 # Offset: 386
    00000184: 	movzbl	0x2(%r8), %r10d
    00000189: 	movb	%r10b, 0x2(%rcx)
    0000018d: 	leaq	0x3(%rcx), %r10
    00000191: 	cmpq	%r10, %rax
    00000194: 	je	.Ltmp41 # Offset: 404
    00000196: 	movzbl	0x3(%r8), %r10d
    0000019b: 	movb	%r10b, 0x3(%rcx)
    0000019f: 	leaq	0x4(%rcx), %r10
    000001a3: 	cmpq	%r10, %rax
    000001a6: 	je	.Ltmp41 # Offset: 422
    000001a8: 	movzbl	0x4(%r8), %r10d
    000001ad: 	movb	%r10b, 0x4(%rcx)
    000001b1: 	leaq	0x5(%rcx), %r10
    000001b5: 	cmpq	%r10, %rax
    000001b8: 	je	.Ltmp41 # Offset: 440
    000001ba: 	movzbl	0x5(%r8), %r10d
    000001bf: 	movb	%r10b, 0x5(%rcx)
    000001c3: 	leaq	0x6(%rcx), %r10
    000001c7: 	cmpq	%r10, %rax
    000001ca: 	je	.Ltmp41 # Offset: 458
    000001cc: 	movzbl	0x6(%r8), %r8d
    000001d1: 	movb	%r8b, 0x6(%rcx)
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp41:
    000001d8: 	movl	iterations(%rip), %ecx
.Ltmp36:
    000001de: 	addl	$0x1, %edx
    000001e1: 	cmpl	%ecx, %edx
    000001e3: 	jl	.Ltmp43 # Offset: 483
.Ltmp35:
    000001e9: 	movl	current_test(%rip), %edx
    000001ef: 	cmpl	$0x64, %edx
    000001f2: 	ja	.Ltmp44 # Offset: 498
    000001f8: 	movl	allocated_results(%rip), %edx
    000001fe: 	cmpl	$0x64, %edx
    00000201: 	ja	.Ltmp45 # Offset: 513
    00000207: 	callq	clock@PLT # Offset: 519
    0000020c: 	movq	0x38(%rsp), %rdi
    00000211: 	pxor	%xmm0, %xmm0
    00000215: 	movq	%rax, end_time(%rip)
    0000021c: 	subq	start_time(%rip), %rax
    00000223: 	cvtsi2sd	%rax, %xmm0
    00000228: 	divsd	DATAat0x6b78(%rip), %xmm0
    00000230: 	callq	_Z13record_resultdPKc # Offset: 560
    00000235: 	movq	%rbp, %rdx
    00000238: 	subq	%r12, %rdx
    0000023b: 	movq	%rdx, %rax
    0000023e: 	negq	%rax
    00000241: 	cmovsq	%rdx, %rax
    00000245: 	movslq	0xc(%rsp), %rdx
    0000024a: 	cmpq	%rdx, %rax
    0000024d: 	jl	.Ltmp46 # Offset: 589
    0000024f: 	movq	%r12, %rsi
    00000252: 	movq	%rbp, %rdi
    00000255: 	callq	memcmp@PLT # Offset: 597
    0000025a: 	testl	%eax, %eax
    0000025c: 	jne	.Ltmp47 # Offset: 604
.Ltmp46:
    0000025e: 	addq	$0x48, %rsp
    00000262: 	popq	%rbx
    00000263: 	popq	%rbp
    00000264: 	popq	%r12
    00000266: 	popq	%r13
    00000268: 	popq	%r14
    0000026a: 	popq	%r15
    0000026c: 	retq # Offset: 620
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp37:
    00000270: 	cmpq	(%rsp), %rbp
    00000274: 	je	.Ltmp36 # Offset: 628
    0000027a: 	movq	$-0x1, %rcx
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp48:
    00000288: 	movzbl	(%rsi,%rcx), %r8d
    0000028d: 	movb	%r8b, (%rax,%rcx)
    00000291: 	subq	$0x1, %rcx
    00000295: 	cmpq	%rcx, %rdi
    00000298: 	jne	.Ltmp48 # Offset: 664
    0000029a: 	jmp	.Ltmp41 # Offset: 666
    0000029f: 	nop # Size: 1
.Ltmp38:
    000002a0: 	xorl	%ecx, %ecx
    000002a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp49:
    000002a8: 	movzbl	(%r12,%rcx), %r8d
    000002ad: 	movb	%r8b, (%rbp,%rcx)
    000002b2: 	addq	$0x1, %rcx
    000002b6: 	cmpq	%rcx, %r9
    000002b9: 	jne	.Ltmp49 # Offset: 697
    000002bb: 	jmp	.Ltmp41 # Offset: 699
.Ltmp47:
    000002c0: 	movq	0x38(%rsp), %rdx
    000002c5: 	addq	$0x48, %rsp
    000002c9: 	leaq	DATAat0x6726(%rip), %rsi
    000002d0: 	xorl	%eax, %eax
    000002d2: 	popq	%rbx
    000002d3: 	movl	$0x1, %edi
    000002d8: 	popq	%rbp
    000002d9: 	popq	%r12
    000002db: 	popq	%r13
    000002dd: 	popq	%r14
    000002df: 	popq	%r15
    000002e1: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 737
.Ltmp39:
    000002e6: 	movq	%r9, %r13
    000002e9: 	movq	%rbp, %rcx
    000002ec: 	movq	%r12, %r8
    000002ef: 	xorl	%r10d, %r10d
    000002f2: 	jmp	.Ltmp50 # Offset: 754
.Ltmp42:
    000002f7: 	movq	0x30(%rsp), %rcx
    000002fc: 	movq	0x28(%rsp), %r8
    00000301: 	jmp	.Ltmp51 # Offset: 769
.Ltmp44:
    00000306: 	movl	$0x1, %edi
    0000030b: 	leaq	DATAat0x6058(%rip), %rsi
    00000312: 	xorl	%eax, %eax
    00000314: 	callq	__printf_chk@PLT # Offset: 788
    00000319: 	movl	$0xfffffffc, %edi
    0000031e: 	callq	exit@PLT # Offset: 798
.Ltmp45:
    00000323: 	movl	$0x1, %edi
    00000328: 	leaq	DATAat0x6088(%rip), %rsi
    0000032f: 	xorl	%eax, %eax
    00000331: 	callq	__printf_chk@PLT # Offset: 817
    00000336: 	movl	$0xfffffffe, %edi
    0000033b: 	callq	exit@PLT # Offset: 827
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIh17iterator_memmove2EvPT_PKS1_iT0_PKc.isra.0/1(*2)"

Binary Function "_Z12test_memmoveIh16iterator_memmoveEvPT_PKS1_iT0_PKc.isra.0/1(*2)" after disassembly {
  All names   : _Z12test_memmoveIh16iterator_memmoveEvPT_PKS1_iT0_PKc.isra.0/1
                _Z12test_memmoveIh16iterator_memmoveEvPT_PKS1_iT0_PKc.isra.0/memmove.cpp/1
  Number      : 13
  State       : disassembled
  Address     : 0x2300
  Size        : 0x330
  MaxSize     : 0x330
  Offset      : 0x2300
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIh16iterator_memmoveEvPT_PKS1_iT0_PKc.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x48, %rsp
    00000014: 	movl	%edx, 0x14(%rsp)
    00000018: 	movq	%rcx, 0x38(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp52 # Offset: 49
    00000037: 	movslq	0x14(%rsp), %r10
    0000003c: 	leaq	0x1(%r12), %rcx
    00000041: 	movq	%rbp, %rdx
    00000044: 	testq	%r10, %r10
    00000047: 	leaq	-0x1(%r10), %r15
    0000004b: 	movq	%r10, %r11
    0000004e: 	movq	%r10, %r9
    00000051: 	sete	%bl
    00000054: 	cmpq	%r12, %rbp
    00000057: 	sete	%al
    0000005a: 	subq	%rcx, %rdx
    0000005d: 	orl	%eax, %ebx
    0000005f: 	cmpq	$0xe, %rdx
    00000063: 	leaq	(%rbp,%r10), %rax
    00000068: 	seta	%cl
    0000006b: 	cmpq	$0x6, %r15
    0000006f: 	leaq	-0x1(%rax), %rdi
    00000073: 	seta	%dl
    00000076: 	andq	$-0x10, %r11
    0000007a: 	movq	%rdi, 0x8(%rsp)
    0000007f: 	subq	%r11, %r9
    00000082: 	andl	%edx, %ecx
    00000084: 	leaq	(%r12,%r11), %rdi
    00000088: 	movq	%r11, %r14
    0000008b: 	leaq	-0x1(%r9), %r8
    0000008f: 	movq	%r9, 0x18(%rsp)
    00000094: 	xorl	%edx, %edx
    00000096: 	movq	%r8, 0x20(%rsp)
    0000009b: 	movb	%cl, 0x13(%rsp)
    0000009f: 	leaq	0x1(%rbp), %rcx
    000000a3: 	movq	%rdi, 0x28(%rsp)
    000000a8: 	leaq	(%rbp,%r11), %rdi
    000000ad: 	subq	%rax, %rcx
    000000b0: 	movq	%rdi, 0x30(%rsp)
    000000b5: 	leaq	(%r12,%r15), %rdi
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp60:
    000000c0: 	testb	%bl, %bl
    000000c2: 	jne	.Ltmp53 # Offset: 194
    000000c8: 	cmpq	%r12, %rbp
    000000cb: 	jae	.Ltmp54 # Offset: 203
    000000d1: 	cmpq	%rax, %rbp
    000000d4: 	je	.Ltmp53 # Offset: 212
    000000da: 	cmpb	$0x0, 0x13(%rsp)
    000000df: 	je	.Ltmp55 # Offset: 223
    000000e5: 	cmpq	$0xe, %r15
    000000e9: 	jbe	.Ltmp56 # Offset: 233
    000000ef: 	xorl	%esi, %esi
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp57:
    000000f8: 	movdqu	(%r12,%rsi), %xmm1
    000000fe: 	movups	%xmm1, (%rbp,%rsi)
    00000103: 	addq	$0x10, %rsi
    00000107: 	cmpq	%r11, %rsi
    0000010a: 	jne	.Ltmp57 # Offset: 266
    0000010c: 	cmpq	%r14, %r10
    0000010f: 	je	.Ltmp58 # Offset: 271
    00000115: 	cmpq	$0x6, 0x20(%rsp)
    0000011b: 	movq	0x18(%rsp), %r13
    00000120: 	jbe	.Ltmp59 # Offset: 288
    00000126: 	movq	0x30(%rsp), %rsi
    0000012b: 	movq	0x28(%rsp), %r8
    00000130: 	movq	%r14, %r9
.Ltmp67:
    00000133: 	movq	(%r12,%r9), %xmm0
    00000139: 	movq	%xmm0, (%rbp,%r9)
    00000140: 	movq	%r13, %r9
    00000143: 	andq	$-0x8, %r9
    00000147: 	addq	%r9, %r8
    0000014a: 	addq	%r9, %rsi
    0000014d: 	cmpq	%r9, %r13
    00000150: 	je	.Ltmp58 # Offset: 336
.Ltmp68:
    00000152: 	movzbl	(%r8), %r9d
    00000156: 	movb	%r9b, (%rsi)
    00000159: 	leaq	0x1(%rsi), %r9
    0000015d: 	cmpq	%r9, %rax
    00000160: 	je	.Ltmp58 # Offset: 352
    00000162: 	movzbl	0x1(%r8), %r9d
    00000167: 	movb	%r9b, 0x1(%rsi)
    0000016b: 	leaq	0x2(%rsi), %r9
    0000016f: 	cmpq	%r9, %rax
    00000172: 	je	.Ltmp58 # Offset: 370
    00000174: 	movzbl	0x2(%r8), %r9d
    00000179: 	movb	%r9b, 0x2(%rsi)
    0000017d: 	leaq	0x3(%rsi), %r9
    00000181: 	cmpq	%r9, %rax
    00000184: 	je	.Ltmp58 # Offset: 388
    00000186: 	movzbl	0x3(%r8), %r9d
    0000018b: 	movb	%r9b, 0x3(%rsi)
    0000018f: 	leaq	0x4(%rsi), %r9
    00000193: 	cmpq	%r9, %rax
    00000196: 	je	.Ltmp58 # Offset: 406
    00000198: 	movzbl	0x4(%r8), %r9d
    0000019d: 	movb	%r9b, 0x4(%rsi)
    000001a1: 	leaq	0x5(%rsi), %r9
    000001a5: 	cmpq	%r9, %rax
    000001a8: 	je	.Ltmp58 # Offset: 424
    000001aa: 	movzbl	0x5(%r8), %r9d
    000001af: 	movb	%r9b, 0x5(%rsi)
    000001b3: 	leaq	0x6(%rsi), %r9
    000001b7: 	cmpq	%r9, %rax
    000001ba: 	je	.Ltmp58 # Offset: 442
    000001bc: 	movzbl	0x6(%r8), %r8d
    000001c1: 	movb	%r8b, 0x6(%rsi)
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp58:
    000001c8: 	movl	iterations(%rip), %esi
.Ltmp53:
    000001ce: 	addl	$0x1, %edx
    000001d1: 	cmpl	%esi, %edx
    000001d3: 	jl	.Ltmp60 # Offset: 467
.Ltmp52:
    000001d9: 	movl	current_test(%rip), %edx
    000001df: 	cmpl	$0x64, %edx
    000001e2: 	ja	.Ltmp61 # Offset: 482
    000001e8: 	movl	allocated_results(%rip), %edx
    000001ee: 	cmpl	$0x64, %edx
    000001f1: 	ja	.Ltmp62 # Offset: 497
    000001f7: 	callq	clock@PLT # Offset: 503
    000001fc: 	movq	0x38(%rsp), %rdi
    00000201: 	pxor	%xmm0, %xmm0
    00000205: 	movq	%rax, end_time(%rip)
    0000020c: 	subq	start_time(%rip), %rax
    00000213: 	cvtsi2sd	%rax, %xmm0
    00000218: 	divsd	DATAat0x6b78(%rip), %xmm0
    00000220: 	callq	_Z13record_resultdPKc # Offset: 544
    00000225: 	movq	%rbp, %rdx
    00000228: 	subq	%r12, %rdx
    0000022b: 	movq	%rdx, %rax
    0000022e: 	negq	%rax
    00000231: 	cmovsq	%rdx, %rax
    00000235: 	movslq	0x14(%rsp), %rdx
    0000023a: 	cmpq	%rdx, %rax
    0000023d: 	jl	.Ltmp63 # Offset: 573
    0000023f: 	movq	%r12, %rsi
    00000242: 	movq	%rbp, %rdi
    00000245: 	callq	memcmp@PLT # Offset: 581
    0000024a: 	testl	%eax, %eax
    0000024c: 	jne	.Ltmp64 # Offset: 588
.Ltmp63:
    0000024e: 	addq	$0x48, %rsp
    00000252: 	popq	%rbx
    00000253: 	popq	%rbp
    00000254: 	popq	%r12
    00000256: 	popq	%r13
    00000258: 	popq	%r14
    0000025a: 	popq	%r15
    0000025c: 	retq # Offset: 604
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp54:
    00000260: 	cmpq	0x8(%rsp), %rbp
    00000265: 	je	.Ltmp53 # Offset: 613
    0000026b: 	xorl	%esi, %esi
    0000026d: 	nopl	(%rax) # Size: 3
.Ltmp65:
    00000270: 	movzbl	(%rdi,%rsi), %r8d
    00000275: 	movb	%r8b, -0x1(%rax,%rsi)
    0000027a: 	subq	$0x1, %rsi
    0000027e: 	cmpq	%rcx, %rsi
    00000281: 	jne	.Ltmp65 # Offset: 641
    00000283: 	jmp	.Ltmp58 # Offset: 643
    00000288: 	nopl	(%rax,%rax) # Size: 8
.Ltmp55:
    00000290: 	xorl	%esi, %esi
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp66:
    00000298: 	movzbl	(%r12,%rsi), %r8d
    0000029d: 	movb	%r8b, (%rbp,%rsi)
    000002a2: 	addq	$0x1, %rsi
    000002a6: 	cmpq	%rsi, %r10
    000002a9: 	jne	.Ltmp66 # Offset: 681
    000002ab: 	jmp	.Ltmp58 # Offset: 683
.Ltmp64:
    000002b0: 	movq	0x38(%rsp), %rdx
    000002b5: 	addq	$0x48, %rsp
    000002b9: 	leaq	DATAat0x6726(%rip), %rsi
    000002c0: 	xorl	%eax, %eax
    000002c2: 	popq	%rbx
    000002c3: 	movl	$0x1, %edi
    000002c8: 	popq	%rbp
    000002c9: 	popq	%r12
    000002cb: 	popq	%r13
    000002cd: 	popq	%r14
    000002cf: 	popq	%r15
    000002d1: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 721
.Ltmp56:
    000002d6: 	movq	%r10, %r13
    000002d9: 	movq	%rbp, %rsi
    000002dc: 	movq	%r12, %r8
    000002df: 	xorl	%r9d, %r9d
    000002e2: 	jmp	.Ltmp67 # Offset: 738
.Ltmp59:
    000002e7: 	movq	0x30(%rsp), %rsi
    000002ec: 	movq	0x28(%rsp), %r8
    000002f1: 	jmp	.Ltmp68 # Offset: 753
.Ltmp61:
    000002f6: 	movl	$0x1, %edi
    000002fb: 	leaq	DATAat0x6058(%rip), %rsi
    00000302: 	xorl	%eax, %eax
    00000304: 	callq	__printf_chk@PLT # Offset: 772
    00000309: 	movl	$0xfffffffc, %edi
    0000030e: 	callq	exit@PLT # Offset: 782
.Ltmp62:
    00000313: 	movl	$0x1, %edi
    00000318: 	leaq	DATAat0x6088(%rip), %rsi
    0000031f: 	xorl	%eax, %eax
    00000321: 	callq	__printf_chk@PLT # Offset: 801
    00000326: 	movl	$0xfffffffe, %edi
    0000032b: 	callq	exit@PLT # Offset: 811
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIh16iterator_memmoveEvPT_PKS1_iT0_PKc.isra.0/1(*2)"

Binary Function "_Z12test_memmoveIh8std_moveEvPT_PKS1_iT0_PKc.isra.0/1(*2)" after disassembly {
  All names   : _Z12test_memmoveIh8std_moveEvPT_PKS1_iT0_PKc.isra.0/1
                _Z12test_memmoveIh8std_moveEvPT_PKS1_iT0_PKc.isra.0/memmove.cpp/1
  Number      : 14
  State       : disassembled
  Address     : 0x2630
  Size        : 0x14e
  MaxSize     : 0x150
  Offset      : 0x2630
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIh8std_moveEvPT_PKS1_iT0_PKc.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rcx, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rsi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdi, %r12
    00000011: 	pushq	%rbp
    00000012: 	movl	%edx, %ebp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x8, %rsp
    00000019: 	callq	clock@PLT # Offset: 25
    0000001e: 	movq	%rax, start_time(%rip)
    00000025: 	movl	iterations(%rip), %eax
    0000002b: 	testl	%eax, %eax
    0000002d: 	jle	.Ltmp69 # Offset: 45
    0000002f: 	movslq	%ebp, %r15
    00000032: 	testl	%ebp, %ebp
    00000034: 	jne	.Ltmp70 # Offset: 52
.Ltmp69:
    0000003a: 	movl	current_test(%rip), %edx
    00000040: 	cmpl	$0x64, %edx
    00000043: 	ja	.Ltmp71 # Offset: 67
    00000049: 	movl	allocated_results(%rip), %edx
    0000004f: 	cmpl	$0x64, %edx
    00000052: 	ja	.Ltmp72 # Offset: 82
    00000058: 	callq	clock@PLT # Offset: 88
    0000005d: 	pxor	%xmm0, %xmm0
    00000061: 	movq	%r14, %rdi
    00000064: 	movq	%rax, end_time(%rip)
    0000006b: 	subq	start_time(%rip), %rax
    00000072: 	cvtsi2sd	%rax, %xmm0
    00000077: 	divsd	DATAat0x6b78(%rip), %xmm0
    0000007f: 	callq	_Z13record_resultdPKc # Offset: 127
    00000084: 	movq	%r12, %rdx
    00000087: 	subq	%r13, %rdx
    0000008a: 	movq	%rdx, %rax
    0000008d: 	negq	%rax
    00000090: 	cmovsq	%rdx, %rax
    00000094: 	movslq	%ebp, %rdx
    00000097: 	cmpq	%rdx, %rax
    0000009a: 	jl	.Ltmp73 # Offset: 154
    0000009c: 	movq	%r13, %rsi
    0000009f: 	movq	%r12, %rdi
    000000a2: 	callq	memcmp@PLT # Offset: 162
    000000a7: 	testl	%eax, %eax
    000000a9: 	jne	.Ltmp74 # Offset: 169
.Ltmp73:
    000000ab: 	addq	$0x8, %rsp
    000000af: 	popq	%rbx
    000000b0: 	popq	%rbp
    000000b1: 	popq	%r12
    000000b3: 	popq	%r13
    000000b5: 	popq	%r14
    000000b7: 	popq	%r15
    000000b9: 	retq # Offset: 185
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp70:
    000000c0: 	xorl	%ebx, %ebx
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp75:
    000000c8: 	movq	%r15, %rdx
    000000cb: 	movq	%r13, %rsi
    000000ce: 	movq	%r12, %rdi
    000000d1: 	addl	$0x1, %ebx
    000000d4: 	callq	memmove@PLT # Offset: 212
    000000d9: 	cmpl	iterations(%rip), %ebx
    000000df: 	jl	.Ltmp75 # Offset: 223
    000000e1: 	jmp	.Ltmp69 # Offset: 225
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp74:
    000000f0: 	addq	$0x8, %rsp
    000000f4: 	movq	%r14, %rdx
    000000f7: 	leaq	DATAat0x6726(%rip), %rsi
    000000fe: 	xorl	%eax, %eax
    00000100: 	popq	%rbx
    00000101: 	movl	$0x1, %edi
    00000106: 	popq	%rbp
    00000107: 	popq	%r12
    00000109: 	popq	%r13
    0000010b: 	popq	%r14
    0000010d: 	popq	%r15
    0000010f: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 271
.Ltmp71:
    00000114: 	movl	$0x1, %edi
    00000119: 	leaq	DATAat0x6058(%rip), %rsi
    00000120: 	xorl	%eax, %eax
    00000122: 	callq	__printf_chk@PLT # Offset: 290
    00000127: 	movl	$0xfffffffc, %edi
    0000012c: 	callq	exit@PLT # Offset: 300
.Ltmp72:
    00000131: 	movl	$0x1, %edi
    00000136: 	leaq	DATAat0x6088(%rip), %rsi
    0000013d: 	xorl	%eax, %eax
    0000013f: 	callq	__printf_chk@PLT # Offset: 319
    00000144: 	movl	$0xfffffffe, %edi
    00000149: 	callq	exit@PLT # Offset: 329
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIh8std_moveEvPT_PKS1_iT0_PKc.isra.0/1(*2)"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x2780
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x2780
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp76 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp77 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp78:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp78 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp91:
    00000069: 	leaq	DATAat0x6aa8(%rip), %rbp
    00000070: 	leaq	DATAat0x60c0(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x6100(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp79 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x6b90(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x6130(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x6b78(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp80 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp84:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp81 # Offset: 244
    000000fa: 	movq	DATAat0x6b80(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp85:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x6b80(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp82 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp82:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x675b(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x6b90(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp83 # Offset: 398
.Ltmp80:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp84 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp85 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp81:
    000001c8: 	movq	DATAat0x6b88(%rip), %rsi
    000001cf: 	movq	DATAat0x6b80(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp82 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp83:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp79 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp86 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp87:
    00000210: 	addq	$0x10, %rax
.Ltmp86:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp87 # Offset: 542
.Ltmp92:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x6160(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp88 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp89 # Offset: 592
.Ltmp88:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp76:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp89:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp90:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp90 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x6736(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp76 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp77:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp91 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp79:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp92 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x2ab0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x2ab0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp93 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp94 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp95:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp95 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp100:
    0000006a: 	leaq	DATAat0x6aa8(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x6188(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x675c(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x6aa8(%rip), %r8
    000000a1: 	leaq	DATAat0x674a(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp96 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp97:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x675b(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp97 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp96 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp98 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp99:
    00000140: 	addq	$0x10, %rax
.Ltmp98:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp99 # Offset: 334
.Ltmp101:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x6160(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp93:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp94:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp100 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp96:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp101 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x2c60
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x2c60
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x2c80
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2c80
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x6b78(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x2cc0
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x2cc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x2cd0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x2cd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x2d20
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x2d20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_Z12test_memmoveIh15forloop_memmoveEvPT_PKS1_iT0_PKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x2d70
  Size        : 0x2b1
  MaxSize     : 0x2c0
  Offset      : 0x2d70
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIh15forloop_memmoveEvPT_PKS1_iT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	movq	%rcx, %r13
    0000000b: 	pushq	%r12
    0000000d: 	movq	%rsi, %r12
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdi, %rbp
    00000014: 	pushq	%rbx
    00000015: 	movl	%edx, %ebx
    00000017: 	callq	clock@PLT # Offset: 23
    0000001c: 	movq	%rax, start_time(%rip)
    00000023: 	movl	iterations(%rip), %eax
    00000029: 	testl	%eax, %eax
    0000002b: 	jle	.Ltmp102 # Offset: 43
    00000031: 	movslq	%ebx, %rcx
    00000034: 	leaq	0x1(%r12), %rdi
    00000039: 	movl	$0x1, %r9d
    0000003f: 	testq	%rcx, %rcx
    00000042: 	sete	%dl
    00000045: 	cmpq	%r12, %rbp
    00000048: 	sete	%sil
    0000004c: 	orl	%esi, %edx
    0000004e: 	movq	%rbp, %rsi
    00000051: 	subq	%rdi, %rsi
    00000054: 	cmpq	$0xe, %rsi
    00000058: 	seta	%r10b
    0000005c: 	cmpl	$0x7, %ebx
    0000005f: 	seta	%sil
    00000063: 	andl	%esi, %r10d
    00000066: 	testl	%ebx, %ebx
    00000068: 	cmovneq	%rcx, %r9
    0000006c: 	xorl	%edi, %edi
    0000006e: 	movq	%r9, %r8
    00000071: 	andq	$-0x10, %r8
    00000075: 	movq	%r8, %r11
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp110:
    00000080: 	testb	%dl, %dl
    00000082: 	jne	.Ltmp103 # Offset: 130
    00000088: 	cmpq	%r12, %rbp
    0000008b: 	ja	.Ltmp104 # Offset: 139
    00000091: 	xorl	%eax, %eax
    00000093: 	testb	%r10b, %r10b
    00000096: 	je	.Ltmp105 # Offset: 150
    0000009c: 	cmpl	$0xf, %ebx
    0000009f: 	jbe	.Ltmp106 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp107:
    000000a8: 	movdqu	(%r12,%rax), %xmm1
    000000ae: 	movups	%xmm1, (%rbp,%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%r8, %rax
    000000ba: 	jne	.Ltmp107 # Offset: 186
    000000bc: 	cmpq	%r11, %r9
    000000bf: 	je	.Ltmp108 # Offset: 191
    000000c5: 	movq	%r11, %rax
.Ltmp106:
    000000c8: 	movq	%r9, %rsi
    000000cb: 	subq	%rax, %rsi
    000000ce: 	leaq	-0x1(%rsi), %r14
    000000d2: 	cmpq	$0x6, %r14
    000000d6: 	jbe	.Ltmp109 # Offset: 214
    000000d8: 	movq	(%r12,%rax), %r14
    000000dc: 	movq	%r14, (%rbp,%rax)
    000000e1: 	movq	%rsi, %r14
    000000e4: 	andq	$-0x8, %r14
    000000e8: 	addq	%r14, %rax
    000000eb: 	cmpq	%r14, %rsi
    000000ee: 	je	.Ltmp108 # Offset: 238
.Ltmp109:
    000000f4: 	movzbl	(%r12,%rax), %esi
    000000f9: 	movb	%sil, (%rbp,%rax)
    000000fe: 	leaq	0x1(%rax), %rsi
    00000102: 	cmpq	%rsi, %rcx
    00000105: 	jbe	.Ltmp108 # Offset: 261
    00000107: 	movzbl	0x1(%r12,%rax), %esi
    0000010d: 	movb	%sil, 0x1(%rbp,%rax)
    00000112: 	leaq	0x2(%rax), %rsi
    00000116: 	cmpq	%rsi, %rcx
    00000119: 	jbe	.Ltmp108 # Offset: 281
    0000011b: 	movzbl	0x2(%r12,%rax), %esi
    00000121: 	movb	%sil, 0x2(%rbp,%rax)
    00000126: 	leaq	0x3(%rax), %rsi
    0000012a: 	cmpq	%rsi, %rcx
    0000012d: 	jbe	.Ltmp108 # Offset: 301
    0000012f: 	movzbl	0x3(%r12,%rax), %esi
    00000135: 	movb	%sil, 0x3(%rbp,%rax)
    0000013a: 	leaq	0x4(%rax), %rsi
    0000013e: 	cmpq	%rsi, %rcx
    00000141: 	jbe	.Ltmp108 # Offset: 321
    00000143: 	movzbl	0x4(%r12,%rax), %esi
    00000149: 	movb	%sil, 0x4(%rbp,%rax)
    0000014e: 	leaq	0x5(%rax), %rsi
    00000152: 	cmpq	%rsi, %rcx
    00000155: 	jbe	.Ltmp108 # Offset: 341
    00000157: 	movzbl	0x5(%r12,%rax), %esi
    0000015d: 	movb	%sil, 0x5(%rbp,%rax)
    00000162: 	leaq	0x6(%rax), %rsi
    00000166: 	cmpq	%rsi, %rcx
    00000169: 	jbe	.Ltmp108 # Offset: 361
    0000016b: 	movzbl	0x6(%r12,%rax), %esi
    00000171: 	movb	%sil, 0x6(%rbp,%rax)
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp108:
    00000180: 	movl	iterations(%rip), %eax
.Ltmp103:
    00000186: 	addl	$0x1, %edi
    00000189: 	cmpl	%eax, %edi
    0000018b: 	jl	.Ltmp110 # Offset: 395
.Ltmp102:
    00000191: 	movl	current_test(%rip), %edx
    00000197: 	cmpl	$0x64, %edx
    0000019a: 	ja	.Ltmp111 # Offset: 410
    000001a0: 	movl	allocated_results(%rip), %edx
    000001a6: 	cmpl	$0x64, %edx
    000001a9: 	ja	.Ltmp112 # Offset: 425
    000001af: 	callq	clock@PLT # Offset: 431
    000001b4: 	pxor	%xmm0, %xmm0
    000001b8: 	movq	%r13, %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x6b78(%rip), %xmm0
    000001d6: 	callq	_Z13record_resultdPKc # Offset: 470
    000001db: 	movq	%rbp, %rcx
    000001de: 	movslq	%ebx, %rdx
    000001e1: 	subq	%r12, %rcx
    000001e4: 	movq	%rcx, %rax
    000001e7: 	negq	%rax
    000001ea: 	cmovsq	%rcx, %rax
    000001ee: 	cmpq	%rax, %rdx
    000001f1: 	jg	.Ltmp113 # Offset: 497
    000001f3: 	movq	%r12, %rsi
    000001f6: 	movq	%rbp, %rdi
    000001f9: 	callq	memcmp@PLT # Offset: 505
    000001fe: 	testl	%eax, %eax
    00000200: 	jne	.Ltmp114 # Offset: 512
.Ltmp113:
    00000202: 	popq	%rbx
    00000203: 	popq	%rbp
    00000204: 	popq	%r12
    00000206: 	popq	%r13
    00000208: 	popq	%r14
    0000020a: 	retq # Offset: 522
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp105:
    00000210: 	movzbl	(%r12,%rax), %esi
    00000215: 	movb	%sil, (%rbp,%rax)
    0000021a: 	addq	$0x1, %rax
    0000021e: 	cmpq	%rax, %rcx
    00000221: 	ja	.Ltmp105 # Offset: 545
    00000223: 	jmp	.Ltmp108 # Offset: 547
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp104:
    00000230: 	leaq	-0x1(%rcx), %rax
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp115:
    00000238: 	movzbl	(%r12,%rax), %esi
    0000023d: 	movq	%rax, %r14
    00000240: 	movb	%sil, (%rbp,%rax)
    00000245: 	movq	%rcx, %rsi
    00000248: 	subq	$0x1, %rax
    0000024c: 	subq	%r14, %rsi
    0000024f: 	cmpq	%rsi, %rcx
    00000252: 	ja	.Ltmp115 # Offset: 594
    00000254: 	jmp	.Ltmp108 # Offset: 596
.Ltmp114:
    00000259: 	popq	%rbx
    0000025a: 	movq	%r13, %rdx
    0000025d: 	popq	%rbp
    0000025e: 	movl	$0x1, %edi
    00000263: 	popq	%r12
    00000265: 	leaq	DATAat0x6726(%rip), %rsi
    0000026c: 	popq	%r13
    0000026e: 	xorl	%eax, %eax
    00000270: 	popq	%r14
    00000272: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 626
.Ltmp111:
    00000277: 	movl	$0x1, %edi
    0000027c: 	leaq	DATAat0x6058(%rip), %rsi
    00000283: 	xorl	%eax, %eax
    00000285: 	callq	__printf_chk@PLT # Offset: 645
    0000028a: 	movl	$0xfffffffc, %edi
    0000028f: 	callq	exit@PLT # Offset: 655
.Ltmp112:
    00000294: 	movl	$0x1, %edi
    00000299: 	leaq	DATAat0x6088(%rip), %rsi
    000002a0: 	xorl	%eax, %eax
    000002a2: 	callq	__printf_chk@PLT # Offset: 674
    000002a7: 	movl	$0xfffffffe, %edi
    000002ac: 	callq	exit@PLT # Offset: 684
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIh15forloop_memmoveEvPT_PKS1_iT0_PKc"

Binary Function "_Z12test_memmoveIh16forloop_memmove2EvPT_PKS1_iT0_PKc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x3030
  Size        : 0x2d6
  MaxSize     : 0x2e0
  Offset      : 0x3030
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIh16forloop_memmove2EvPT_PKS1_iT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rcx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rsi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x8, %rsp
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movq	%rax, start_time(%rip)
    00000029: 	movl	iterations(%rip), %eax
    0000002f: 	testl	%eax, %eax
    00000031: 	jle	.Ltmp116 # Offset: 49
    00000037: 	movslq	%ebx, %rcx
    0000003a: 	cmpq	%r12, %rbp
    0000003d: 	leaq	0x1(%r12), %rdi
    00000042: 	movl	$0x1, %r8d
    00000048: 	sete	%dl
    0000004b: 	testq	%rcx, %rcx
    0000004e: 	sete	%sil
    00000052: 	orl	%esi, %edx
    00000054: 	leaq	(%r12,%rcx), %rsi
    00000058: 	cmpq	%rsi, %rbp
    0000005b: 	setb	%r9b
    0000005f: 	cmpq	%r12, %rbp
    00000062: 	seta	%sil
    00000066: 	andl	%esi, %r9d
    00000069: 	movq	%rbp, %rsi
    0000006c: 	subq	%rdi, %rsi
    0000006f: 	cmpq	$0xe, %rsi
    00000073: 	seta	%r10b
    00000077: 	cmpl	$0x7, %ebx
    0000007a: 	seta	%sil
    0000007e: 	andl	%esi, %r10d
    00000081: 	testl	%ebx, %ebx
    00000083: 	cmovneq	%rcx, %r8
    00000087: 	xorl	%esi, %esi
    00000089: 	movq	%r8, %rdi
    0000008c: 	andq	$-0x10, %rdi
    00000090: 	movq	%rdi, %r11
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp120:
    00000098: 	testb	%dl, %dl
    0000009a: 	jne	.Ltmp117 # Offset: 154
    0000009c: 	testb	%r9b, %r9b
    0000009f: 	je	.Ltmp118 # Offset: 159
    000000a5: 	leaq	-0x1(%rcx), %rax
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp119:
    000000b0: 	movzbl	(%r12,%rax), %r14d
    000000b5: 	movq	%rax, %r15
    000000b8: 	movb	%r14b, (%rbp,%rax)
    000000bd: 	movq	%rcx, %r14
    000000c0: 	subq	$0x1, %rax
    000000c4: 	subq	%r15, %r14
    000000c7: 	cmpq	%r14, %rcx
    000000ca: 	ja	.Ltmp119 # Offset: 202
.Ltmp128:
    000000cc: 	movl	iterations(%rip), %eax
.Ltmp117:
    000000d2: 	addl	$0x1, %esi
    000000d5: 	cmpl	%eax, %esi
    000000d7: 	jl	.Ltmp120 # Offset: 215
.Ltmp116:
    000000d9: 	movl	current_test(%rip), %edx
    000000df: 	cmpl	$0x64, %edx
    000000e2: 	ja	.Ltmp121 # Offset: 226
    000000e8: 	movl	allocated_results(%rip), %edx
    000000ee: 	cmpl	$0x64, %edx
    000000f1: 	ja	.Ltmp122 # Offset: 241
    000000f7: 	callq	clock@PLT # Offset: 247
    000000fc: 	pxor	%xmm0, %xmm0
    00000100: 	movq	%r13, %rdi
    00000103: 	movq	%rax, end_time(%rip)
    0000010a: 	subq	start_time(%rip), %rax
    00000111: 	cvtsi2sd	%rax, %xmm0
    00000116: 	divsd	DATAat0x6b78(%rip), %xmm0
    0000011e: 	callq	_Z13record_resultdPKc # Offset: 286
    00000123: 	movq	%rbp, %rcx
    00000126: 	movslq	%ebx, %rdx
    00000129: 	subq	%r12, %rcx
    0000012c: 	movq	%rcx, %rax
    0000012f: 	negq	%rax
    00000132: 	cmovsq	%rcx, %rax
    00000136: 	cmpq	%rax, %rdx
    00000139: 	jg	.Ltmp123 # Offset: 313
    0000013b: 	movq	%r12, %rsi
    0000013e: 	movq	%rbp, %rdi
    00000141: 	callq	memcmp@PLT # Offset: 321
    00000146: 	testl	%eax, %eax
    00000148: 	jne	.Ltmp124 # Offset: 328
.Ltmp123:
    0000014e: 	addq	$0x8, %rsp
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	popq	%r12
    00000156: 	popq	%r13
    00000158: 	popq	%r14
    0000015a: 	popq	%r15
    0000015c: 	retq # Offset: 348
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp118:
    00000160: 	xorl	%eax, %eax
    00000162: 	testb	%r10b, %r10b
    00000165: 	je	.Ltmp125 # Offset: 357
    0000016b: 	cmpl	$0xf, %ebx
    0000016e: 	jbe	.Ltmp126 # Offset: 366
.Ltmp127:
    00000170: 	movdqu	(%r12,%rax), %xmm1
    00000176: 	movups	%xmm1, (%rbp,%rax)
    0000017b: 	addq	$0x10, %rax
    0000017f: 	cmpq	%rdi, %rax
    00000182: 	jne	.Ltmp127 # Offset: 386
    00000184: 	cmpq	%r11, %r8
    00000187: 	je	.Ltmp128 # Offset: 391
    0000018d: 	movq	%r11, %rax
.Ltmp126:
    00000190: 	movq	%r8, %r14
    00000193: 	subq	%rax, %r14
    00000196: 	leaq	-0x1(%r14), %r15
    0000019a: 	cmpq	$0x6, %r15
    0000019e: 	jbe	.Ltmp129 # Offset: 414
    000001a0: 	movq	(%r12,%rax), %r15
    000001a4: 	movq	%r15, (%rbp,%rax)
    000001a9: 	movq	%r14, %r15
    000001ac: 	andq	$-0x8, %r15
    000001b0: 	addq	%r15, %rax
    000001b3: 	cmpq	%r15, %r14
    000001b6: 	je	.Ltmp128 # Offset: 438
.Ltmp129:
    000001bc: 	movzbl	(%r12,%rax), %r14d
    000001c1: 	movb	%r14b, (%rbp,%rax)
    000001c6: 	leaq	0x1(%rax), %r14
    000001ca: 	cmpq	%r14, %rcx
    000001cd: 	jbe	.Ltmp128 # Offset: 461
    000001d3: 	movzbl	0x1(%r12,%rax), %r14d
    000001d9: 	movb	%r14b, 0x1(%rbp,%rax)
    000001de: 	leaq	0x2(%rax), %r14
    000001e2: 	cmpq	%r14, %rcx
    000001e5: 	jbe	.Ltmp128 # Offset: 485
    000001eb: 	movzbl	0x2(%r12,%rax), %r14d
    000001f1: 	movb	%r14b, 0x2(%rbp,%rax)
    000001f6: 	leaq	0x3(%rax), %r14
    000001fa: 	cmpq	%r14, %rcx
    000001fd: 	jbe	.Ltmp128 # Offset: 509
    00000203: 	movzbl	0x3(%r12,%rax), %r14d
    00000209: 	movb	%r14b, 0x3(%rbp,%rax)
    0000020e: 	leaq	0x4(%rax), %r14
    00000212: 	cmpq	%r14, %rcx
    00000215: 	jbe	.Ltmp128 # Offset: 533
    0000021b: 	movzbl	0x4(%r12,%rax), %r14d
    00000221: 	movb	%r14b, 0x4(%rbp,%rax)
    00000226: 	leaq	0x5(%rax), %r14
    0000022a: 	cmpq	%r14, %rcx
    0000022d: 	jbe	.Ltmp128 # Offset: 557
    00000233: 	movzbl	0x5(%r12,%rax), %r14d
    00000239: 	movb	%r14b, 0x5(%rbp,%rax)
    0000023e: 	leaq	0x6(%rax), %r14
    00000242: 	cmpq	%r14, %rcx
    00000245: 	jbe	.Ltmp128 # Offset: 581
    0000024b: 	movzbl	0x6(%r12,%rax), %r14d
    00000251: 	movb	%r14b, 0x6(%rbp,%rax)
    00000256: 	jmp	.Ltmp128 # Offset: 598
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp125:
    00000260: 	movzbl	(%r12,%rax), %r14d
    00000265: 	movb	%r14b, (%rbp,%rax)
    0000026a: 	addq	$0x1, %rax
    0000026e: 	cmpq	%rax, %rcx
    00000271: 	ja	.Ltmp125 # Offset: 625
    00000273: 	jmp	.Ltmp128 # Offset: 627
.Ltmp124:
    00000278: 	addq	$0x8, %rsp
    0000027c: 	movq	%r13, %rdx
    0000027f: 	leaq	DATAat0x6726(%rip), %rsi
    00000286: 	xorl	%eax, %eax
    00000288: 	popq	%rbx
    00000289: 	movl	$0x1, %edi
    0000028e: 	popq	%rbp
    0000028f: 	popq	%r12
    00000291: 	popq	%r13
    00000293: 	popq	%r14
    00000295: 	popq	%r15
    00000297: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 663
.Ltmp121:
    0000029c: 	movl	$0x1, %edi
    000002a1: 	leaq	DATAat0x6058(%rip), %rsi
    000002a8: 	xorl	%eax, %eax
    000002aa: 	callq	__printf_chk@PLT # Offset: 682
    000002af: 	movl	$0xfffffffc, %edi
    000002b4: 	callq	exit@PLT # Offset: 692
.Ltmp122:
    000002b9: 	movl	$0x1, %edi
    000002be: 	leaq	DATAat0x6088(%rip), %rsi
    000002c5: 	xorl	%eax, %eax
    000002c7: 	callq	__printf_chk@PLT # Offset: 711
    000002cc: 	movl	$0xfffffffe, %edi
    000002d1: 	callq	exit@PLT # Offset: 721
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIh16forloop_memmove2EvPT_PKS1_iT0_PKc"

Binary Function "_Z12test_memmoveIh22forloop_unroll_memmoveEvPT_PKS1_iT0_PKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x3310
  Size        : 0x521
  MaxSize     : 0x530
  Offset      : 0x3310
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIh22forloop_unroll_memmoveEvPT_PKS1_iT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x58, %rsp
    00000018: 	movl	%edx, 0x1c(%rsp)
    0000001c: 	movq	%rcx, 0x30(%rsp)
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp130 # Offset: 53
    0000003b: 	movslq	0x1c(%rsp), %rdi
    00000040: 	cmpq	%rbp, %r12
    00000043: 	sete	%r10b
    00000047: 	testq	%rdi, %rdi
    0000004a: 	leaq	(%rbp,%rdi), %rsi
    0000004f: 	leaq	-0x4(%rdi), %rbx
    00000053: 	sete	%dl
    00000056: 	leaq	(%r12,%rdi), %r9
    0000005a: 	leaq	-0x3(%rdi), %r14
    0000005e: 	orl	%edx, %r10d
    00000061: 	cmpq	%rsi, %r12
    00000064: 	setb	%cl
    00000067: 	cmpq	%rbp, %r12
    0000006a: 	seta	%dl
    0000006d: 	andl	%edx, %ecx
    0000006f: 	cmpq	$0x3, %rbx
    00000073: 	leaq	0xf(%r12), %rdx
    00000078: 	movb	%cl, 0x19(%rsp)
    0000007c: 	seta	%cl
    0000007f: 	subq	%rbp, %rdx
    00000082: 	cmpq	$0x1e, %rdx
    00000086: 	seta	%dl
    00000089: 	andl	%ecx, %edx
    0000008b: 	movb	%dl, 0x1b(%rsp)
    0000008f: 	movq	%rbx, %rdx
    00000092: 	shrq	$0x2, %rdx
    00000096: 	leaq	0x1(%rdx), %r11
    0000009a: 	movq	%rdx, 0x8(%rsp)
    0000009f: 	movq	%r11, %r13
    000000a2: 	movq	%r11, %r8
    000000a5: 	andq	$-0x4, %r13
    000000a9: 	shrq	$0x2, %r8
    000000ad: 	leaq	(,%r13,4), %rdx
    000000b5: 	shlq	$0x4, %r8
    000000b9: 	movq	%rdx, 0x10(%rsp)
    000000be: 	leaq	(,%r11,4), %rdx
    000000c6: 	movq	%rdx, (%rsp)
    000000ca: 	leaq	-0x10(%rdi), %rdx
    000000ce: 	leaq	(%r12,%rdx), %r15
    000000d2: 	addq	%rbp, %rdx
    000000d5: 	cmpq	%r9, %rdx
    000000d8: 	movq	%r15, 0x20(%rsp)
    000000dd: 	setae	%dl
    000000e0: 	cmpq	%r15, %rsi
    000000e3: 	leaq	-0x8(%rbp,%rdi), %r15
    000000e8: 	setbe	%sil
    000000ec: 	orl	%esi, %edx
    000000ee: 	leaq	(%rbp,%rbx), %rsi
    000000f3: 	andl	%ecx, %edx
    000000f5: 	movq	%rbx, %rcx
    000000f8: 	movq	%rsi, %r9
    000000fb: 	movq	%rsi, 0x28(%rsp)
    00000100: 	andq	$-0x4, %rcx
    00000104: 	movb	%dl, 0x1a(%rsp)
    00000108: 	subq	%r8, %r9
    0000010b: 	xorl	%esi, %esi
    0000010d: 	subq	%rcx, %r15
    00000110: 	leaq	0x4(%rbp,%rcx), %rcx
    00000115: 	leaq	-0x1(%rdi), %rdx
    00000119: 	movq	%r15, 0x38(%rsp)
    0000011e: 	movq	%rcx, 0x40(%rsp)
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp140:
    00000128: 	testb	%r10b, %r10b
    0000012b: 	jne	.Ltmp131 # Offset: 299
    00000131: 	cmpb	$0x0, 0x19(%rsp)
    00000136: 	jne	.Ltmp132 # Offset: 310
    0000013c: 	xorl	%eax, %eax
    0000013e: 	testq	%r14, %r14
    00000141: 	jle	.Ltmp133 # Offset: 321
    00000147: 	cmpb	$0x0, 0x1b(%rsp)
    0000014c: 	je	.Ltmp134 # Offset: 332
    00000152: 	cmpq	$0xb, %rbx
    00000156: 	jbe	.Ltmp135 # Offset: 342
    0000015c: 	xorl	%eax, %eax
    0000015e: 	nop # Size: 2
.Ltmp136:
    00000160: 	movdqu	(%rbp,%rax), %xmm2
    00000166: 	movups	%xmm2, (%r12,%rax)
    0000016b: 	addq	$0x10, %rax
    0000016f: 	cmpq	%r8, %rax
    00000172: 	jne	.Ltmp136 # Offset: 370
    00000174: 	cmpq	%r13, %r11
    00000177: 	je	.Ltmp137 # Offset: 375
    00000179: 	movq	0x10(%rsp), %rax
    0000017e: 	movq	%r13, %rcx
.Ltmp155:
    00000181: 	movq	%r11, %r15
    00000184: 	subq	%rcx, %r15
    00000187: 	cmpq	%rcx, 0x8(%rsp)
    0000018c: 	je	.Ltmp138 # Offset: 396
    0000018e: 	movq	(%rbp,%rcx,4), %xmm0
    00000194: 	movq	%xmm0, (%r12,%rcx,4)
    0000019a: 	movq	%r15, %rcx
    0000019d: 	andq	$-0x2, %rcx
    000001a1: 	leaq	(%rax,%rcx,4), %rax
    000001a5: 	cmpq	%rcx, %r15
    000001a8: 	je	.Ltmp137 # Offset: 424
.Ltmp138:
    000001aa: 	movzbl	(%rbp,%rax), %ecx
    000001af: 	movb	%cl, (%r12,%rax)
    000001b3: 	movzbl	0x1(%rbp,%rax), %ecx
    000001b8: 	movb	%cl, 0x1(%r12,%rax)
    000001bd: 	movzbl	0x2(%rbp,%rax), %ecx
    000001c2: 	movb	%cl, 0x2(%r12,%rax)
    000001c7: 	movzbl	0x3(%rbp,%rax), %ecx
    000001cc: 	movb	%cl, 0x3(%r12,%rax)
.Ltmp137:
    000001d1: 	movq	(%rsp), %rax
.Ltmp133:
    000001d5: 	cmpq	%rax, %rdi
    000001d8: 	jle	.Ltmp139 # Offset: 472
    000001da: 	movzbl	(%rbp,%rax), %ecx
    000001df: 	movb	%cl, (%r12,%rax)
    000001e3: 	leaq	0x1(%rax), %rcx
    000001e7: 	cmpq	%rcx, %rdi
    000001ea: 	jle	.Ltmp139 # Offset: 490
    000001ec: 	movzbl	0x1(%rbp,%rax), %ecx
    000001f1: 	movb	%cl, 0x1(%r12,%rax)
    000001f6: 	leaq	0x2(%rax), %rcx
    000001fa: 	cmpq	%rcx, %rdi
    000001fd: 	jle	.Ltmp139 # Offset: 509
    000001ff: 	movzbl	0x2(%rbp,%rax), %ecx
    00000204: 	movb	%cl, 0x2(%r12,%rax)
    00000209: 	leaq	0x3(%rax), %rcx
    0000020d: 	cmpq	%rcx, %rdi
    00000210: 	jle	.Ltmp139 # Offset: 528
    00000212: 	movzbl	0x3(%rbp,%rax), %ecx
    00000217: 	movb	%cl, 0x3(%r12,%rax)
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp139:
    00000220: 	movl	iterations(%rip), %eax
.Ltmp131:
    00000226: 	addl	$0x1, %esi
    00000229: 	cmpl	%eax, %esi
    0000022b: 	jl	.Ltmp140 # Offset: 555
.Ltmp130:
    00000231: 	movl	current_test(%rip), %edx
    00000237: 	cmpl	$0x64, %edx
    0000023a: 	ja	.Ltmp141 # Offset: 570
    00000240: 	movl	allocated_results(%rip), %edx
    00000246: 	cmpl	$0x64, %edx
    00000249: 	ja	.Ltmp142 # Offset: 585
    0000024f: 	callq	clock@PLT # Offset: 591
    00000254: 	movq	0x30(%rsp), %rdi
    00000259: 	pxor	%xmm0, %xmm0
    0000025d: 	movq	%rax, end_time(%rip)
    00000264: 	subq	start_time(%rip), %rax
    0000026b: 	cvtsi2sd	%rax, %xmm0
    00000270: 	divsd	DATAat0x6b78(%rip), %xmm0
    00000278: 	callq	_Z13record_resultdPKc # Offset: 632
    0000027d: 	movq	%r12, %rcx
    00000280: 	movslq	0x1c(%rsp), %rdx
    00000285: 	subq	%rbp, %rcx
    00000288: 	movq	%rcx, %rax
    0000028b: 	negq	%rax
    0000028e: 	cmovsq	%rcx, %rax
    00000292: 	cmpq	%rax, %rdx
    00000295: 	jg	.Ltmp143 # Offset: 661
    00000297: 	movq	%rbp, %rsi
    0000029a: 	movq	%r12, %rdi
    0000029d: 	callq	memcmp@PLT # Offset: 669
    000002a2: 	testl	%eax, %eax
    000002a4: 	jne	.Ltmp144 # Offset: 676
.Ltmp143:
    000002aa: 	addq	$0x58, %rsp
    000002ae: 	popq	%rbx
    000002af: 	popq	%rbp
    000002b0: 	popq	%r12
    000002b2: 	popq	%r13
    000002b4: 	popq	%r14
    000002b6: 	popq	%r15
    000002b8: 	retq # Offset: 696
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp132:
    000002c0: 	testq	%r14, %r14
    000002c3: 	jle	.Ltmp145 # Offset: 707
    000002c9: 	cmpb	$0x0, 0x1a(%rsp)
    000002ce: 	je	.Ltmp146 # Offset: 718
    000002d4: 	cmpq	$0xb, %rbx
    000002d8: 	jbe	.Ltmp147 # Offset: 728
    000002de: 	movq	0x20(%rsp), %rcx
    000002e3: 	movq	0x28(%rsp), %rax
    000002e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp148:
    000002f0: 	movdqu	-0xc(%rax), %xmm1
    000002f5: 	subq	$0x10, %rax
    000002f9: 	subq	$0x10, %rcx
    000002fd: 	movups	%xmm1, 0x10(%rcx)
    00000301: 	cmpq	%r9, %rax
    00000304: 	jne	.Ltmp148 # Offset: 772
    00000306: 	cmpq	%r13, %r11
    00000309: 	je	.Ltmp149 # Offset: 777
    0000030f: 	movq	0x10(%rsp), %rax
    00000314: 	movq	%r13, %rcx
.Ltmp154:
    00000317: 	movq	%r11, %r15
    0000031a: 	subq	%rcx, %r15
    0000031d: 	cmpq	0x8(%rsp), %rcx
    00000322: 	je	.Ltmp150 # Offset: 802
    00000324: 	notq	%rcx
    00000327: 	leaq	(%rdi,%rcx,4), %rcx
    0000032b: 	movq	-0x4(%rbp,%rcx), %xmm0
    00000331: 	movq	%xmm0, -0x4(%r12,%rcx)
    00000338: 	movq	%r15, %rcx
    0000033b: 	andq	$-0x2, %rcx
    0000033f: 	leaq	(%rax,%rcx,4), %rax
    00000343: 	cmpq	%rcx, %r15
    00000346: 	je	.Ltmp149 # Offset: 838
.Ltmp150:
    00000348: 	movq	%rdx, %rcx
    0000034b: 	subq	%rax, %rcx
    0000034e: 	movzbl	(%rbp,%rcx), %r15d
    00000354: 	movb	%r15b, (%r12,%rcx)
    00000358: 	leaq	0x1(%rax), %r15
    0000035c: 	movq	%rdx, %rcx
    0000035f: 	subq	%r15, %rcx
    00000362: 	movzbl	(%rbp,%rcx), %r15d
    00000368: 	movb	%r15b, (%r12,%rcx)
    0000036c: 	leaq	0x2(%rax), %r15
    00000370: 	movq	%rdx, %rcx
    00000373: 	addq	$0x3, %rax
    00000377: 	subq	%r15, %rcx
    0000037a: 	movzbl	(%rbp,%rcx), %r15d
    00000380: 	movb	%r15b, (%r12,%rcx)
    00000384: 	movq	%rdx, %rcx
    00000387: 	subq	%rax, %rcx
    0000038a: 	movzbl	(%rbp,%rcx), %eax
    0000038f: 	movb	%al, (%r12,%rcx)
.Ltmp149:
    00000393: 	movq	(%rsp), %rax
.Ltmp153:
    00000397: 	cmpq	%rax, %rdi
    0000039a: 	jle	.Ltmp139 # Offset: 922
    000003a0: 	movq	%rdx, %rcx
    000003a3: 	subq	%rax, %rcx
    000003a6: 	movzbl	(%rbp,%rcx), %r15d
    000003ac: 	movb	%r15b, (%r12,%rcx)
    000003b0: 	leaq	0x1(%rax), %rcx
    000003b4: 	cmpq	%rcx, %rdi
    000003b7: 	jle	.Ltmp139 # Offset: 951
    000003bd: 	movq	%rdx, %r15
    000003c0: 	subq	%rcx, %r15
    000003c3: 	movzbl	(%rbp,%r15), %ecx
    000003c9: 	movb	%cl, (%r12,%r15)
    000003cd: 	leaq	0x2(%rax), %rcx
    000003d1: 	cmpq	%rcx, %rdi
    000003d4: 	jle	.Ltmp139 # Offset: 980
    000003da: 	movq	%rdx, %r15
    000003dd: 	addq	$0x3, %rax
    000003e1: 	subq	%rcx, %r15
    000003e4: 	movzbl	(%rbp,%r15), %ecx
    000003ea: 	movb	%cl, (%r12,%r15)
    000003ee: 	cmpq	%rax, %rdi
    000003f1: 	jle	.Ltmp139 # Offset: 1009
    000003f7: 	movq	%rdx, %rcx
    000003fa: 	subq	%rax, %rcx
    000003fd: 	movzbl	(%rbp,%rcx), %eax
    00000402: 	movb	%al, (%r12,%rcx)
    00000406: 	jmp	.Ltmp139 # Offset: 1030
    0000040b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp134:
    00000410: 	movq	%rdx, 0x48(%rsp)
    00000415: 	movq	0x40(%rsp), %r15
    0000041a: 	movq	%rbp, %rax
    0000041d: 	movq	%r12, %rcx
.Ltmp151:
    00000420: 	movzbl	(%rax), %edx
    00000423: 	addq	$0x4, %rax
    00000427: 	addq	$0x4, %rcx
    0000042b: 	movb	%dl, -0x4(%rcx)
    0000042e: 	movzbl	-0x3(%rax), %edx
    00000432: 	movb	%dl, -0x3(%rcx)
    00000435: 	movzbl	-0x2(%rax), %edx
    00000439: 	movb	%dl, -0x2(%rcx)
    0000043c: 	movzbl	-0x1(%rax), %edx
    00000440: 	movb	%dl, -0x1(%rcx)
    00000443: 	cmpq	%rax, %r15
    00000446: 	jne	.Ltmp151 # Offset: 1094
    00000448: 	movq	0x48(%rsp), %rdx
    0000044d: 	jmp	.Ltmp137 # Offset: 1101
    00000452: 	nopw	(%rax,%rax) # Size: 6
.Ltmp146:
    00000458: 	movq	%rdx, 0x48(%rsp)
    0000045d: 	movq	0x38(%rsp), %r15
    00000462: 	leaq	(%rbp,%rbx), %rax
    00000467: 	leaq	(%r12,%rbx), %rcx
    0000046b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp152:
    00000470: 	movzbl	0x3(%rax), %edx
    00000474: 	subq	$0x4, %rax
    00000478: 	subq	$0x4, %rcx
    0000047c: 	movb	%dl, 0x7(%rcx)
    0000047f: 	movzbl	0x6(%rax), %edx
    00000483: 	movb	%dl, 0x6(%rcx)
    00000486: 	movzbl	0x5(%rax), %edx
    0000048a: 	movb	%dl, 0x5(%rcx)
    0000048d: 	movzbl	0x4(%rax), %edx
    00000491: 	movb	%dl, 0x4(%rcx)
    00000494: 	cmpq	%rax, %r15
    00000497: 	jne	.Ltmp152 # Offset: 1175
    00000499: 	movq	0x48(%rsp), %rdx
    0000049e: 	jmp	.Ltmp149 # Offset: 1182
    000004a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp145:
    000004a8: 	xorl	%eax, %eax
    000004aa: 	jmp	.Ltmp153 # Offset: 1194
.Ltmp144:
    000004af: 	movq	0x30(%rsp), %rdx
    000004b4: 	addq	$0x58, %rsp
    000004b8: 	leaq	DATAat0x6726(%rip), %rsi
    000004bf: 	xorl	%eax, %eax
    000004c1: 	popq	%rbx
    000004c2: 	movl	$0x1, %edi
    000004c7: 	popq	%rbp
    000004c8: 	popq	%r12
    000004ca: 	popq	%r13
    000004cc: 	popq	%r14
    000004ce: 	popq	%r15
    000004d0: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1232
.Ltmp147:
    000004d5: 	xorl	%ecx, %ecx
    000004d7: 	xorl	%eax, %eax
    000004d9: 	jmp	.Ltmp154 # Offset: 1241
.Ltmp135:
    000004de: 	xorl	%ecx, %ecx
    000004e0: 	xorl	%eax, %eax
    000004e2: 	jmp	.Ltmp155 # Offset: 1250
.Ltmp142:
    000004e7: 	movl	$0x1, %edi
    000004ec: 	leaq	DATAat0x6088(%rip), %rsi
    000004f3: 	xorl	%eax, %eax
    000004f5: 	callq	__printf_chk@PLT # Offset: 1269
    000004fa: 	movl	$0xfffffffe, %edi
    000004ff: 	callq	exit@PLT # Offset: 1279
.Ltmp141:
    00000504: 	movl	$0x1, %edi
    00000509: 	leaq	DATAat0x6058(%rip), %rsi
    00000510: 	xorl	%eax, %eax
    00000512: 	callq	__printf_chk@PLT # Offset: 1298
    00000517: 	movl	$0xfffffffc, %edi
    0000051c: 	callq	exit@PLT # Offset: 1308
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIh22forloop_unroll_memmoveEvPT_PKS1_iT0_PKc"

Binary Function "_Z12test_memmoveIh24forloop_unroll32_memmoveEvPT_PKS1_iT0_PKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x3840
  Size        : 0x578
  MaxSize     : 0x580
  Offset      : 0x3840
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIh24forloop_unroll32_memmoveEvPT_PKS1_iT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movl	%edx, 0x14(%rsp)
    0000001c: 	movq	%rcx, 0x18(%rsp)
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp156 # Offset: 53
    0000003b: 	movslq	0x14(%rsp), %rdx
    00000040: 	cmpq	%r12, %rbp
    00000043: 	sete	%r10b
    00000047: 	testq	%rdx, %rdx
    0000004a: 	leaq	-0x10(%rdx), %rbx
    0000004e: 	leaq	-0x1(%rdx), %r13
    00000052: 	sete	%cl
    00000055: 	movq	%rbx, 0x8(%rsp)
    0000005a: 	leaq	0x10(%r12), %rbx
    0000005f: 	orl	%ecx, %r10d
    00000062: 	leaq	(%r12,%rdx), %rcx
    00000066: 	movq	%rbx, 0x20(%rsp)
    0000006b: 	leaq	-0xf(%rdx), %rbx
    0000006f: 	cmpq	%rcx, %rbp
    00000072: 	movq	%rbx, (%rsp)
    00000076: 	leaq	-0x10(%r12,%rdx), %rbx
    0000007b: 	setb	%r11b
    0000007f: 	cmpq	%r12, %rbp
    00000082: 	movq	%rbx, 0x28(%rsp)
    00000087: 	seta	%sil
    0000008b: 	subq	%rbp, %rcx
    0000008e: 	andl	%esi, %r11d
    00000091: 	cmpq	$0x10, %rcx
    00000095: 	setg	%sil
    00000099: 	cmpq	$0x40, %rdx
    0000009d: 	setg	%cl
    000000a0: 	andl	%ecx, %esi
    000000a2: 	xorl	%ecx, %ecx
    000000a4: 	movb	%sil, 0x13(%rsp)
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp167:
    000000b0: 	testb	%r10b, %r10b
    000000b3: 	jne	.Ltmp157 # Offset: 179
    000000b9: 	testb	%r11b, %r11b
    000000bc: 	je	.Ltmp158 # Offset: 188
    000000c2: 	cmpb	$0x0, 0x13(%rsp)
    000000c7: 	je	.Ltmp159 # Offset: 199
    000000cd: 	leaq	(%r12,%r13), %rdi
    000000d1: 	leaq	(%rbp,%r13), %rsi
    000000d6: 	xorl	%eax, %eax
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp161:
    000000e0: 	movq	%rsi, %r8
    000000e3: 	andl	$0x3, %r8d
    000000e7: 	cmpq	$0x3, %r8
    000000eb: 	je	.Ltmp160 # Offset: 235
    000000f1: 	movzbl	(%rdi), %r8d
    000000f5: 	addq	$0x1, %rax
    000000f9: 	subq	$0x1, %rdi
    000000fd: 	subq	$0x1, %rsi
    00000101: 	movb	%r8b, 0x1(%rsi)
    00000105: 	cmpq	%rax, %rdx
    00000108: 	jg	.Ltmp161 # Offset: 264
    0000010a: 	cmpq	(%rsp), %rax
    0000010e: 	jge	.Ltmp162 # Offset: 270
.Ltmp185:
    00000110: 	movq	%rdx, %rdi
    00000113: 	subq	%rax, %rdi
    00000116: 	leaq	-0x10(%rdi), %r14
    0000011a: 	leaq	(%r12,%rdi), %rsi
    0000011e: 	addq	%rbp, %rdi
    00000121: 	leaq	(%r12,%r14), %r9
    00000125: 	leaq	(%rbp,%r14), %rbx
    0000012a: 	cmpq	%rdi, %r9
    0000012d: 	jae	.Ltmp163 # Offset: 301
    0000012f: 	cmpq	%rsi, %rbx
    00000132: 	jb	.Ltmp164 # Offset: 306
.Ltmp163:
    00000138: 	movq	%r14, %r8
    0000013b: 	xorl	%esi, %esi
    0000013d: 	xorl	%edi, %edi
    0000013f: 	shrq	$0x4, %r8
    00000143: 	addq	$0x1, %r8
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp165:
    00000150: 	movdqu	(%r9,%rsi), %xmm2
    00000156: 	addq	$0x1, %rdi
    0000015a: 	movups	%xmm2, (%rbx,%rsi)
    0000015e: 	subq	$0x10, %rsi
    00000162: 	cmpq	%r8, %rdi
    00000165: 	jb	.Ltmp165 # Offset: 357
.Ltmp187:
    00000167: 	andq	$-0x10, %r14
    0000016b: 	leaq	0x10(%rax,%r14), %rax
.Ltmp183:
    00000170: 	movq	%r13, %rsi
    00000173: 	subq	%rax, %rsi
    00000176: 	cmpq	%rax, %rdx
    00000179: 	jle	.Ltmp162 # Offset: 377
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp166:
    00000180: 	movzbl	(%r12,%rsi), %eax
    00000185: 	movb	%al, (%rbp,%rsi)
    00000189: 	subq	$0x1, %rsi
    0000018d: 	jae	.Ltmp166 # Offset: 397
.Ltmp162:
    0000018f: 	movl	iterations(%rip), %eax
.Ltmp157:
    00000195: 	addl	$0x1, %ecx
    00000198: 	cmpl	%eax, %ecx
    0000019a: 	jl	.Ltmp167 # Offset: 410
.Ltmp156:
    000001a0: 	movl	current_test(%rip), %edx
    000001a6: 	cmpl	$0x64, %edx
    000001a9: 	ja	.Ltmp168 # Offset: 425
    000001af: 	movl	allocated_results(%rip), %edx
    000001b5: 	cmpl	$0x64, %edx
    000001b8: 	ja	.Ltmp169 # Offset: 440
    000001be: 	callq	clock@PLT # Offset: 446
    000001c3: 	movq	0x18(%rsp), %rdi
    000001c8: 	pxor	%xmm0, %xmm0
    000001cc: 	movq	%rax, end_time(%rip)
    000001d3: 	subq	start_time(%rip), %rax
    000001da: 	cvtsi2sd	%rax, %xmm0
    000001df: 	divsd	DATAat0x6b78(%rip), %xmm0
    000001e7: 	callq	_Z13record_resultdPKc # Offset: 487
    000001ec: 	movq	%rbp, %rcx
    000001ef: 	movslq	0x14(%rsp), %rdx
    000001f4: 	subq	%r12, %rcx
    000001f7: 	movq	%rcx, %rax
    000001fa: 	negq	%rax
    000001fd: 	cmovsq	%rcx, %rax
    00000201: 	cmpq	%rax, %rdx
    00000204: 	jg	.Ltmp170 # Offset: 516
    00000206: 	movq	%r12, %rsi
    00000209: 	movq	%rbp, %rdi
    0000020c: 	callq	memcmp@PLT # Offset: 524
    00000211: 	testl	%eax, %eax
    00000213: 	jne	.Ltmp171 # Offset: 531
.Ltmp170:
    00000219: 	addq	$0x38, %rsp
    0000021d: 	popq	%rbx
    0000021e: 	popq	%rbp
    0000021f: 	popq	%r12
    00000221: 	popq	%r13
    00000223: 	popq	%r14
    00000225: 	popq	%r15
    00000227: 	retq # Offset: 551
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp158:
    00000230: 	xorl	%eax, %eax
    00000232: 	cmpq	$0x40, %rdx
    00000236: 	jg	.Ltmp172 # Offset: 566
.Ltmp181:
    0000023c: 	cmpq	%rax, %rdx
    0000023f: 	jle	.Ltmp162 # Offset: 575
    00000245: 	leaq	(%rbp,%rax), %r9
    0000024a: 	leaq	0x1(%rax), %rdi
    0000024e: 	movq	%rdx, %rsi
    00000251: 	movq	%rax, %r8
    00000254: 	leaq	(%r12,%rdi), %r15
    00000258: 	movq	%r9, %r14
    0000025b: 	subq	%rax, %rsi
    0000025e: 	subq	%r15, %r14
    00000261: 	leaq	-0x1(%rsi), %rbx
    00000265: 	cmpq	$0xe, %r14
    00000269: 	jbe	.Ltmp173 # Offset: 617
    0000026f: 	cmpq	$0x6, %rbx
    00000273: 	jbe	.Ltmp173 # Offset: 627
    00000279: 	cmpq	$0xe, %rbx
    0000027d: 	jbe	.Ltmp174 # Offset: 637
    00000283: 	movq	%rsi, %rbx
    00000286: 	leaq	(%r12,%rax), %r14
    0000028a: 	xorl	%edi, %edi
    0000028c: 	andq	$-0x10, %rbx
.Ltmp175:
    00000290: 	movdqu	(%r14,%rdi), %xmm1
    00000296: 	movups	%xmm1, (%r9,%rdi)
    0000029b: 	addq	$0x10, %rdi
    0000029f: 	cmpq	%rdi, %rbx
    000002a2: 	jne	.Ltmp175 # Offset: 674
    000002a4: 	movq	%rsi, %rdi
    000002a7: 	andq	$-0x10, %rdi
    000002ab: 	addq	%rdi, %rax
    000002ae: 	cmpq	%rdi, %rsi
    000002b1: 	je	.Ltmp162 # Offset: 689
    000002b7: 	subq	%rdi, %rsi
    000002ba: 	leaq	-0x1(%rsi), %r9
    000002be: 	cmpq	$0x6, %r9
    000002c2: 	jbe	.Ltmp176 # Offset: 706
.Ltmp190:
    000002c4: 	addq	%rdi, %r8
    000002c7: 	movq	(%r12,%r8), %rdi
    000002cb: 	movq	%rdi, (%rbp,%r8)
    000002d0: 	movq	%rsi, %rdi
    000002d3: 	andq	$-0x8, %rdi
    000002d7: 	addq	%rdi, %rax
    000002da: 	cmpq	%rdi, %rsi
    000002dd: 	je	.Ltmp162 # Offset: 733
.Ltmp176:
    000002e3: 	movzbl	(%r12,%rax), %esi
    000002e8: 	movb	%sil, (%rbp,%rax)
    000002ed: 	leaq	0x1(%rax), %rsi
    000002f1: 	cmpq	%rsi, %rdx
    000002f4: 	jle	.Ltmp162 # Offset: 756
    000002fa: 	movzbl	0x1(%r12,%rax), %esi
    00000300: 	movb	%sil, 0x1(%rbp,%rax)
    00000305: 	leaq	0x2(%rax), %rsi
    00000309: 	cmpq	%rsi, %rdx
    0000030c: 	jle	.Ltmp162 # Offset: 780
    00000312: 	movzbl	0x2(%r12,%rax), %esi
    00000318: 	movb	%sil, 0x2(%rbp,%rax)
    0000031d: 	leaq	0x3(%rax), %rsi
    00000321: 	cmpq	%rsi, %rdx
    00000324: 	jle	.Ltmp162 # Offset: 804
    0000032a: 	movzbl	0x3(%r12,%rax), %esi
    00000330: 	movb	%sil, 0x3(%rbp,%rax)
    00000335: 	leaq	0x4(%rax), %rsi
    00000339: 	cmpq	%rsi, %rdx
    0000033c: 	jle	.Ltmp162 # Offset: 828
    00000342: 	movzbl	0x4(%r12,%rax), %esi
    00000348: 	movb	%sil, 0x4(%rbp,%rax)
    0000034d: 	leaq	0x5(%rax), %rsi
    00000351: 	cmpq	%rsi, %rdx
    00000354: 	jle	.Ltmp162 # Offset: 852
    0000035a: 	movzbl	0x5(%r12,%rax), %esi
    00000360: 	movb	%sil, 0x5(%rbp,%rax)
    00000365: 	leaq	0x6(%rax), %rsi
    00000369: 	cmpq	%rsi, %rdx
    0000036c: 	jle	.Ltmp162 # Offset: 876
    00000372: 	movzbl	0x6(%r12,%rax), %esi
    00000378: 	movb	%sil, 0x6(%rbp,%rax)
    0000037d: 	jmp	.Ltmp162 # Offset: 893
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp172:
    00000388: 	leaq	(%rbp,%rax), %rsi
    0000038d: 	testb	$0x3, %sil
    00000391: 	je	.Ltmp177 # Offset: 913
    00000397: 	movzbl	(%r12,%rax), %esi
    0000039c: 	movb	%sil, (%rbp,%rax)
    000003a1: 	addq	$0x1, %rax
    000003a5: 	cmpq	%rax, %rdx
    000003a8: 	jne	.Ltmp172 # Offset: 936
    000003aa: 	leaq	(%rbp,%rdx), %rsi
    000003af: 	cmpq	%rdx, (%rsp)
    000003b3: 	jle	.Ltmp162 # Offset: 947
.Ltmp184:
    000003b9: 	leaq	0x10(%rax), %r14
    000003bd: 	leaq	(%r12,%rax), %r9
    000003c1: 	leaq	(%r12,%r14), %rdi
    000003c5: 	cmpq	%rdi, %rsi
    000003c8: 	jae	.Ltmp178 # Offset: 968
    000003ca: 	leaq	(%rbp,%r14), %rdi
    000003cf: 	cmpq	%rdi, %r9
    000003d2: 	jb	.Ltmp179 # Offset: 978
.Ltmp178:
    000003d8: 	movq	0x8(%rsp), %rbx
    000003dd: 	xorl	%edi, %edi
    000003df: 	xorl	%r8d, %r8d
    000003e2: 	subq	%rax, %rbx
    000003e5: 	shrq	$0x4, %rbx
    000003e9: 	addq	$0x1, %rbx
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp180:
    000003f0: 	movdqu	(%r9,%rdi), %xmm3
    000003f6: 	addq	$0x1, %r8
    000003fa: 	movups	%xmm3, (%rsi,%rdi)
    000003fe: 	addq	$0x10, %rdi
    00000402: 	cmpq	%r8, %rbx
    00000405: 	ja	.Ltmp180 # Offset: 1029
.Ltmp189:
    00000407: 	movq	0x8(%rsp), %rsi
    0000040c: 	subq	%rax, %rsi
    0000040f: 	movq	%rsi, %rax
    00000412: 	andq	$-0x10, %rax
    00000416: 	addq	%r14, %rax
    00000419: 	jmp	.Ltmp181 # Offset: 1049
    0000041e: 	nop # Size: 2
.Ltmp182:
    00000420: 	addq	$0x1, %rdi
.Ltmp173:
    00000424: 	movzbl	(%r12,%rax), %esi
    00000429: 	movb	%sil, (%rbp,%rax)
    0000042e: 	movq	%rdi, %rax
    00000431: 	cmpq	%rdi, %rdx
    00000434: 	jne	.Ltmp182 # Offset: 1076
    00000436: 	jmp	.Ltmp162 # Offset: 1078
    0000043b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp159:
    00000440: 	xorl	%eax, %eax
    00000442: 	jmp	.Ltmp183 # Offset: 1090
    00000447: 	nopw	(%rax,%rax) # Size: 9
.Ltmp177:
    00000450: 	cmpq	%rax, (%rsp)
    00000454: 	jg	.Ltmp184 # Offset: 1108
    0000045a: 	jmp	.Ltmp181 # Offset: 1114
    0000045f: 	nop # Size: 1
.Ltmp160:
    00000460: 	cmpq	%rax, (%rsp)
    00000464: 	jg	.Ltmp185 # Offset: 1124
    0000046a: 	jmp	.Ltmp183 # Offset: 1130
.Ltmp164:
    0000046f: 	movq	0x8(%rsp), %r9
    00000474: 	movq	0x28(%rsp), %r8
    00000479: 	subq	%rax, %r9
    0000047c: 	subq	%rax, %r8
    0000047f: 	leaq	(%rbp,%r9), %rdi
    00000484: 	andq	$-0x10, %r9
    00000488: 	subq	%r9, %r8
    0000048b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp186:
    00000490: 	movl	-0x4(%rsi), %r9d
    00000494: 	subq	$0x10, %rsi
    00000498: 	subq	$0x10, %rdi
    0000049c: 	movl	%r9d, 0x1c(%rdi)
    000004a0: 	movl	0x8(%rsi), %r9d
    000004a4: 	movl	%r9d, 0x18(%rdi)
    000004a8: 	movl	0x4(%rsi), %r9d
    000004ac: 	movl	%r9d, 0x14(%rdi)
    000004b0: 	movl	(%rsi), %r9d
    000004b3: 	movl	%r9d, 0x10(%rdi)
    000004b7: 	cmpq	%rsi, %r8
    000004ba: 	jne	.Ltmp186 # Offset: 1210
    000004bc: 	jmp	.Ltmp187 # Offset: 1212
.Ltmp179:
    000004c1: 	movq	0x8(%rsp), %rdi
    000004c6: 	movq	0x20(%rsp), %rbx
    000004cb: 	subq	%rax, %rdi
    000004ce: 	leaq	(%rbx,%rax), %r8
    000004d2: 	andq	$-0x10, %rdi
    000004d6: 	addq	%r8, %rdi
    000004d9: 	nopl	(%rax) # Size: 7
.Ltmp188:
    000004e0: 	movl	(%r9), %r8d
    000004e3: 	addq	$0x10, %r9
    000004e7: 	addq	$0x10, %rsi
    000004eb: 	movl	%r8d, -0x10(%rsi)
    000004ef: 	movl	-0xc(%r9), %r8d
    000004f3: 	movl	%r8d, -0xc(%rsi)
    000004f7: 	movl	-0x8(%r9), %r8d
    000004fb: 	movl	%r8d, -0x8(%rsi)
    000004ff: 	movl	-0x4(%r9), %r8d
    00000503: 	movl	%r8d, -0x4(%rsi)
    00000507: 	cmpq	%r9, %rdi
    0000050a: 	jne	.Ltmp188 # Offset: 1290
    0000050c: 	jmp	.Ltmp189 # Offset: 1292
.Ltmp171:
    00000511: 	movq	0x18(%rsp), %rdx
    00000516: 	addq	$0x38, %rsp
    0000051a: 	leaq	DATAat0x6726(%rip), %rsi
    00000521: 	xorl	%eax, %eax
    00000523: 	popq	%rbx
    00000524: 	movl	$0x1, %edi
    00000529: 	popq	%rbp
    0000052a: 	popq	%r12
    0000052c: 	popq	%r13
    0000052e: 	popq	%r14
    00000530: 	popq	%r15
    00000532: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1330
.Ltmp174:
    00000537: 	xorl	%edi, %edi
    00000539: 	jmp	.Ltmp190 # Offset: 1337
.Ltmp168:
    0000053e: 	movl	$0x1, %edi
    00000543: 	leaq	DATAat0x6058(%rip), %rsi
    0000054a: 	xorl	%eax, %eax
    0000054c: 	callq	__printf_chk@PLT # Offset: 1356
    00000551: 	movl	$0xfffffffc, %edi
    00000556: 	callq	exit@PLT # Offset: 1366
.Ltmp169:
    0000055b: 	movl	$0x1, %edi
    00000560: 	leaq	DATAat0x6088(%rip), %rsi
    00000567: 	xorl	%eax, %eax
    00000569: 	callq	__printf_chk@PLT # Offset: 1385
    0000056e: 	movl	$0xfffffffe, %edi
    00000573: 	callq	exit@PLT # Offset: 1395
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIh24forloop_unroll32_memmoveEvPT_PKS1_iT0_PKc"

Binary Function "_Z12test_memmoveIh24forloop_unroll64_memmoveEvPT_PKS1_iT0_PKc" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x3dc0
  Size        : 0x518
  MaxSize     : 0x520
  Offset      : 0x3dc0
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIh24forloop_unroll64_memmoveEvPT_PKS1_iT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x38, %rsp
    00000018: 	movl	%edx, 0x14(%rsp)
    0000001c: 	movq	%rcx, 0x18(%rsp)
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp191 # Offset: 53
    0000003b: 	movslq	0x14(%rsp), %rdx
    00000040: 	cmpq	%r12, %rbp
    00000043: 	sete	%r10b
    00000047: 	testq	%rdx, %rdx
    0000004a: 	leaq	-0x20(%rdx), %rbx
    0000004e: 	leaq	-0x1(%rdx), %r13
    00000052: 	sete	%cl
    00000055: 	movq	%rbx, (%rsp)
    00000059: 	leaq	0x20(%r12), %rbx
    0000005e: 	orl	%ecx, %r10d
    00000061: 	leaq	(%r12,%rdx), %rcx
    00000065: 	movq	%rbx, 0x28(%rsp)
    0000006a: 	leaq	-0x1f(%rdx), %rbx
    0000006e: 	cmpq	%rcx, %rbp
    00000071: 	movq	%rbx, 0x8(%rsp)
    00000076: 	leaq	-0x20(%r12,%rdx), %rbx
    0000007b: 	setb	%r11b
    0000007f: 	cmpq	%r12, %rbp
    00000082: 	movq	%rbx, 0x20(%rsp)
    00000087: 	seta	%sil
    0000008b: 	subq	%rbp, %rcx
    0000008e: 	andl	%esi, %r11d
    00000091: 	cmpq	$0x20, %rcx
    00000095: 	setg	%sil
    00000099: 	cmpq	$0x40, %rdx
    0000009d: 	setg	%cl
    000000a0: 	andl	%ecx, %esi
    000000a2: 	xorl	%ecx, %ecx
    000000a4: 	movb	%sil, 0x13(%rsp)
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp200:
    000000b0: 	testb	%r10b, %r10b
    000000b3: 	jne	.Ltmp192 # Offset: 179
    000000b9: 	testb	%r11b, %r11b
    000000bc: 	je	.Ltmp193 # Offset: 188
    000000c2: 	xorl	%edi, %edi
    000000c4: 	cmpb	$0x0, 0x13(%rsp)
    000000c9: 	je	.Ltmp194 # Offset: 201
    000000cf: 	leaq	(%r12,%r13), %rsi
    000000d3: 	leaq	(%rbp,%r13), %rax
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp196:
    000000e0: 	movq	%rax, %r8
    000000e3: 	andl	$0x7, %r8d
    000000e7: 	cmpq	$0x7, %r8
    000000eb: 	je	.Ltmp195 # Offset: 235
    000000ed: 	movzbl	(%rsi), %r8d
    000000f1: 	addq	$0x1, %rdi
    000000f5: 	subq	$0x1, %rsi
    000000f9: 	subq	$0x1, %rax
    000000fd: 	movb	%r8b, 0x1(%rax)
    00000101: 	cmpq	%rdi, %rdx
    00000104: 	jg	.Ltmp196 # Offset: 260
.Ltmp195:
    00000106: 	cmpq	%rdi, 0x8(%rsp)
    0000010b: 	jle	.Ltmp194 # Offset: 267
    0000010d: 	movq	(%rsp), %r9
    00000111: 	movq	0x20(%rsp), %r8
    00000116: 	movq	%rdx, %rax
    00000119: 	subq	%rdi, %rax
    0000011c: 	subq	%rdi, %r9
    0000011f: 	subq	%rdi, %r8
    00000122: 	addq	%r12, %rax
    00000125: 	movq	%r9, %rbx
    00000128: 	leaq	(%rbp,%r9), %rsi
    0000012d: 	andq	$-0x20, %rbx
    00000131: 	subq	%rbx, %r8
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp197:
    00000138: 	movq	-0x8(%rax), %rbx
    0000013c: 	subq	$0x20, %rax
    00000140: 	subq	$0x20, %rsi
    00000144: 	movq	%rbx, 0x38(%rsi)
    00000148: 	movq	0x10(%rax), %rbx
    0000014c: 	movq	%rbx, 0x30(%rsi)
    00000150: 	movq	0x8(%rax), %rbx
    00000154: 	movq	%rbx, 0x28(%rsi)
    00000158: 	movq	(%rax), %rbx
    0000015b: 	movq	%rbx, 0x20(%rsi)
    0000015f: 	cmpq	%rax, %r8
    00000162: 	jne	.Ltmp197 # Offset: 354
    00000164: 	andq	$-0x20, %r9
    00000168: 	leaq	0x20(%rdi,%r9), %rdi
.Ltmp194:
    0000016d: 	movq	%r13, %rax
    00000170: 	subq	%rdi, %rax
    00000173: 	cmpq	%rdi, %rdx
    00000176: 	jle	.Ltmp198 # Offset: 374
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp199:
    00000180: 	movzbl	(%r12,%rax), %esi
    00000185: 	movb	%sil, (%rbp,%rax)
    0000018a: 	subq	$0x1, %rax
    0000018e: 	jae	.Ltmp199 # Offset: 398
.Ltmp198:
    00000190: 	movl	iterations(%rip), %eax
.Ltmp192:
    00000196: 	addl	$0x1, %ecx
    00000199: 	cmpl	%eax, %ecx
    0000019b: 	jl	.Ltmp200 # Offset: 411
.Ltmp191:
    000001a1: 	movl	current_test(%rip), %edx
    000001a7: 	cmpl	$0x64, %edx
    000001aa: 	ja	.Ltmp201 # Offset: 426
    000001b0: 	movl	allocated_results(%rip), %edx
    000001b6: 	cmpl	$0x64, %edx
    000001b9: 	ja	.Ltmp202 # Offset: 441
    000001bf: 	callq	clock@PLT # Offset: 447
    000001c4: 	movq	0x18(%rsp), %rdi
    000001c9: 	pxor	%xmm0, %xmm0
    000001cd: 	movq	%rax, end_time(%rip)
    000001d4: 	subq	start_time(%rip), %rax
    000001db: 	cvtsi2sd	%rax, %xmm0
    000001e0: 	divsd	DATAat0x6b78(%rip), %xmm0
    000001e8: 	callq	_Z13record_resultdPKc # Offset: 488
    000001ed: 	movq	%rbp, %rcx
    000001f0: 	movslq	0x14(%rsp), %rdx
    000001f5: 	subq	%r12, %rcx
    000001f8: 	movq	%rcx, %rax
    000001fb: 	negq	%rax
    000001fe: 	cmovsq	%rcx, %rax
    00000202: 	cmpq	%rax, %rdx
    00000205: 	jg	.Ltmp203 # Offset: 517
    00000207: 	movq	%r12, %rsi
    0000020a: 	movq	%rbp, %rdi
    0000020d: 	callq	memcmp@PLT # Offset: 525
    00000212: 	testl	%eax, %eax
    00000214: 	jne	.Ltmp204 # Offset: 532
.Ltmp203:
    0000021a: 	addq	$0x38, %rsp
    0000021e: 	popq	%rbx
    0000021f: 	popq	%rbp
    00000220: 	popq	%r12
    00000222: 	popq	%r13
    00000224: 	popq	%r14
    00000226: 	popq	%r15
    00000228: 	retq # Offset: 552
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp193:
    00000230: 	xorl	%eax, %eax
    00000232: 	cmpq	$0x40, %rdx
    00000236: 	jg	.Ltmp205 # Offset: 566
.Ltmp214:
    0000023c: 	cmpq	%rax, %rdx
    0000023f: 	jle	.Ltmp198 # Offset: 575
    00000245: 	leaq	(%rbp,%rax), %r9
    0000024a: 	leaq	0x1(%rax), %rdi
    0000024e: 	movq	%rdx, %rsi
    00000251: 	movq	%rax, %r8
    00000254: 	leaq	(%r12,%rdi), %r15
    00000258: 	movq	%r9, %r14
    0000025b: 	subq	%rax, %rsi
    0000025e: 	subq	%r15, %r14
    00000261: 	leaq	-0x1(%rsi), %rbx
    00000265: 	cmpq	$0xe, %r14
    00000269: 	jbe	.Ltmp206 # Offset: 617
    0000026f: 	cmpq	$0x6, %rbx
    00000273: 	jbe	.Ltmp206 # Offset: 627
    00000279: 	cmpq	$0xe, %rbx
    0000027d: 	jbe	.Ltmp207 # Offset: 637
    00000283: 	movq	%rsi, %rbx
    00000286: 	leaq	(%r12,%rax), %r14
    0000028a: 	xorl	%edi, %edi
    0000028c: 	andq	$-0x10, %rbx
.Ltmp208:
    00000290: 	movdqu	(%r14,%rdi), %xmm1
    00000296: 	movups	%xmm1, (%r9,%rdi)
    0000029b: 	addq	$0x10, %rdi
    0000029f: 	cmpq	%rbx, %rdi
    000002a2: 	jne	.Ltmp208 # Offset: 674
    000002a4: 	movq	%rsi, %rdi
    000002a7: 	andq	$-0x10, %rdi
    000002ab: 	addq	%rdi, %rax
    000002ae: 	cmpq	%rsi, %rdi
    000002b1: 	je	.Ltmp198 # Offset: 689
    000002b7: 	subq	%rdi, %rsi
    000002ba: 	leaq	-0x1(%rsi), %r9
    000002be: 	cmpq	$0x6, %r9
    000002c2: 	jbe	.Ltmp209 # Offset: 706
.Ltmp219:
    000002c4: 	addq	%rdi, %r8
    000002c7: 	movq	(%r12,%r8), %rdi
    000002cb: 	movq	%rdi, (%rbp,%r8)
    000002d0: 	movq	%rsi, %rdi
    000002d3: 	andq	$-0x8, %rdi
    000002d7: 	addq	%rdi, %rax
    000002da: 	cmpq	%rsi, %rdi
    000002dd: 	je	.Ltmp198 # Offset: 733
.Ltmp209:
    000002e3: 	movzbl	(%r12,%rax), %esi
    000002e8: 	movb	%sil, (%rbp,%rax)
    000002ed: 	leaq	0x1(%rax), %rsi
    000002f1: 	cmpq	%rsi, %rdx
    000002f4: 	jle	.Ltmp198 # Offset: 756
    000002fa: 	movzbl	0x1(%r12,%rax), %esi
    00000300: 	movb	%sil, 0x1(%rbp,%rax)
    00000305: 	leaq	0x2(%rax), %rsi
    00000309: 	cmpq	%rsi, %rdx
    0000030c: 	jle	.Ltmp198 # Offset: 780
    00000312: 	movzbl	0x2(%r12,%rax), %esi
    00000318: 	movb	%sil, 0x2(%rbp,%rax)
    0000031d: 	leaq	0x3(%rax), %rsi
    00000321: 	cmpq	%rsi, %rdx
    00000324: 	jle	.Ltmp198 # Offset: 804
    0000032a: 	movzbl	0x3(%r12,%rax), %esi
    00000330: 	movb	%sil, 0x3(%rbp,%rax)
    00000335: 	leaq	0x4(%rax), %rsi
    00000339: 	cmpq	%rsi, %rdx
    0000033c: 	jle	.Ltmp198 # Offset: 828
    00000342: 	movzbl	0x4(%r12,%rax), %esi
    00000348: 	movb	%sil, 0x4(%rbp,%rax)
    0000034d: 	leaq	0x5(%rax), %rsi
    00000351: 	cmpq	%rsi, %rdx
    00000354: 	jle	.Ltmp198 # Offset: 852
    0000035a: 	movzbl	0x5(%r12,%rax), %esi
    00000360: 	movb	%sil, 0x5(%rbp,%rax)
    00000365: 	leaq	0x6(%rax), %rsi
    00000369: 	cmpq	%rsi, %rdx
    0000036c: 	jle	.Ltmp198 # Offset: 876
    00000372: 	movzbl	0x6(%r12,%rax), %esi
    00000378: 	movb	%sil, 0x6(%rbp,%rax)
    0000037d: 	jmp	.Ltmp198 # Offset: 893
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp205:
    00000388: 	leaq	(%rbp,%rax), %rsi
    0000038d: 	testb	$0x7, %sil
    00000391: 	je	.Ltmp210 # Offset: 913
    00000397: 	movzbl	(%r12,%rax), %esi
    0000039c: 	movb	%sil, (%rbp,%rax)
    000003a1: 	addq	$0x1, %rax
    000003a5: 	cmpq	%rax, %rdx
    000003a8: 	jne	.Ltmp205 # Offset: 936
    000003aa: 	leaq	(%rbp,%rdx), %rsi
    000003af: 	cmpq	0x8(%rsp), %rdx
    000003b4: 	jge	.Ltmp198 # Offset: 948
.Ltmp216:
    000003ba: 	leaq	0x20(%rax), %r14
    000003be: 	leaq	(%r12,%rax), %r8
    000003c2: 	leaq	(%r12,%r14), %rdi
    000003c6: 	cmpq	%rdi, %rsi
    000003c9: 	jae	.Ltmp211 # Offset: 969
    000003cb: 	leaq	(%rbp,%r14), %rdi
    000003d0: 	cmpq	%rdi, %r8
    000003d3: 	jb	.Ltmp212 # Offset: 979
.Ltmp211:
    000003d9: 	movq	(%rsp), %rbx
    000003dd: 	xorl	%edi, %edi
    000003df: 	xorl	%r9d, %r9d
    000003e2: 	subq	%rax, %rbx
    000003e5: 	shrq	$0x5, %rbx
    000003e9: 	addq	$0x1, %rbx
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp213:
    000003f0: 	movdqu	0x10(%r8,%rdi), %xmm0
    000003f7: 	movdqu	(%r8,%rdi), %xmm2
    000003fd: 	addq	$0x1, %r9
    00000401: 	movups	%xmm2, (%rsi,%rdi)
    00000405: 	movups	%xmm0, 0x10(%rsi,%rdi)
    0000040a: 	addq	$0x20, %rdi
    0000040e: 	cmpq	%r9, %rbx
    00000411: 	ja	.Ltmp213 # Offset: 1041
.Ltmp218:
    00000413: 	movq	(%rsp), %rsi
    00000417: 	subq	%rax, %rsi
    0000041a: 	movq	%rsi, %rax
    0000041d: 	andq	$-0x20, %rax
    00000421: 	addq	%r14, %rax
    00000424: 	jmp	.Ltmp214 # Offset: 1060
    00000429: 	nopl	(%rax) # Size: 7
.Ltmp215:
    00000430: 	addq	$0x1, %rdi
.Ltmp206:
    00000434: 	movzbl	(%r12,%rax), %esi
    00000439: 	movb	%sil, (%rbp,%rax)
    0000043e: 	movq	%rdi, %rax
    00000441: 	cmpq	%rdi, %rdx
    00000444: 	jne	.Ltmp215 # Offset: 1092
    00000446: 	jmp	.Ltmp198 # Offset: 1094
    0000044b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp210:
    00000450: 	cmpq	%rax, 0x8(%rsp)
    00000455: 	jg	.Ltmp216 # Offset: 1109
    0000045b: 	jmp	.Ltmp214 # Offset: 1115
.Ltmp212:
    00000460: 	movq	(%rsp), %rdi
    00000464: 	movq	0x28(%rsp), %rbx
    00000469: 	subq	%rax, %rdi
    0000046c: 	leaq	(%rbx,%rax), %r9
    00000470: 	andq	$-0x20, %rdi
    00000474: 	addq	%r9, %rdi
    00000477: 	nopw	(%rax,%rax) # Size: 9
.Ltmp217:
    00000480: 	movq	(%r8), %r9
    00000483: 	addq	$0x20, %r8
    00000487: 	addq	$0x20, %rsi
    0000048b: 	movq	%r9, -0x20(%rsi)
    0000048f: 	movq	-0x18(%r8), %r9
    00000493: 	movq	%r9, -0x18(%rsi)
    00000497: 	movq	-0x10(%r8), %r9
    0000049b: 	movq	%r9, -0x10(%rsi)
    0000049f: 	movq	-0x8(%r8), %r9
    000004a3: 	movq	%r9, -0x8(%rsi)
    000004a7: 	cmpq	%rdi, %r8
    000004aa: 	jne	.Ltmp217 # Offset: 1194
    000004ac: 	jmp	.Ltmp218 # Offset: 1196
.Ltmp204:
    000004b1: 	movq	0x18(%rsp), %rdx
    000004b6: 	addq	$0x38, %rsp
    000004ba: 	leaq	DATAat0x6726(%rip), %rsi
    000004c1: 	xorl	%eax, %eax
    000004c3: 	popq	%rbx
    000004c4: 	movl	$0x1, %edi
    000004c9: 	popq	%rbp
    000004ca: 	popq	%r12
    000004cc: 	popq	%r13
    000004ce: 	popq	%r14
    000004d0: 	popq	%r15
    000004d2: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1234
.Ltmp207:
    000004d7: 	xorl	%edi, %edi
    000004d9: 	jmp	.Ltmp219 # Offset: 1241
.Ltmp201:
    000004de: 	movl	$0x1, %edi
    000004e3: 	leaq	DATAat0x6058(%rip), %rsi
    000004ea: 	xorl	%eax, %eax
    000004ec: 	callq	__printf_chk@PLT # Offset: 1260
    000004f1: 	movl	$0xfffffffc, %edi
    000004f6: 	callq	exit@PLT # Offset: 1270
.Ltmp202:
    000004fb: 	movl	$0x1, %edi
    00000500: 	leaq	DATAat0x6088(%rip), %rsi
    00000507: 	xorl	%eax, %eax
    00000509: 	callq	__printf_chk@PLT # Offset: 1289
    0000050e: 	movl	$0xfffffffe, %edi
    00000513: 	callq	exit@PLT # Offset: 1299
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIh24forloop_unroll64_memmoveEvPT_PKS1_iT0_PKc"

Binary Function "_Z12test_memmoveIh34forloop_unroll64_cacheline_memmoveEvPT_PKS1_iT0_PKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x42e0
  Size        : 0x5b3
  MaxSize     : 0x5c0
  Offset      : 0x42e0
  Section     : .text
  Orc Section : .local.text._Z12test_memmoveIh34forloop_unroll64_cacheline_memmoveEvPT_PKS1_iT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rsi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x48, %rsp
    00000018: 	movl	%edx, 0x14(%rsp)
    0000001c: 	movq	%rcx, 0x28(%rsp)
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	testl	%eax, %eax
    00000035: 	jle	.Ltmp220 # Offset: 53
    0000003b: 	movslq	0x14(%rsp), %rdx
    00000040: 	cmpq	%r12, %rbp
    00000043: 	leaq	0x40(%r12), %rbx
    00000048: 	sete	%sil
    0000004c: 	movq	%rbx, 0x38(%rsp)
    00000051: 	testq	%rdx, %rdx
    00000054: 	leaq	-0x1(%rdx), %rbx
    00000058: 	movq	%rdx, %r8
    0000005b: 	sete	%cl
    0000005e: 	movq	%rbx, 0x20(%rsp)
    00000063: 	orl	%ecx, %esi
    00000065: 	leaq	(%r12,%rdx), %rcx
    00000069: 	subq	%rbp, %rcx
    0000006c: 	movl	%esi, %r15d
    0000006f: 	testq	%rcx, %rcx
    00000072: 	setg	%dil
    00000076: 	cmpq	%r12, %rbp
    00000079: 	seta	%sil
    0000007d: 	andl	%esi, %edi
    0000007f: 	cmpq	$0x80, %rdx
    00000086: 	setg	%sil
    0000008a: 	cmpq	$0x40, %rcx
    0000008e: 	movb	%dil, 0x12(%rsp)
    00000093: 	leaq	-0x40(%rdx), %rdi
    00000097: 	setg	%cl
    0000009a: 	movq	%rdi, (%rsp)
    0000009e: 	leaq	-0x3f(%rdx), %rdi
    000000a2: 	negq	%r8
    000000a5: 	andl	%ecx, %esi
    000000a7: 	movq	%rdi, 0x8(%rsp)
    000000ac: 	leaq	(%rbp,%rbx), %rdi
    000000b1: 	xorl	%ecx, %ecx
    000000b3: 	movb	%sil, 0x13(%rsp)
    000000b8: 	leaq	(%r12,%rbx), %rsi
    000000bc: 	leaq	-0x7f(%rsi), %rbx
    000000c0: 	movq	%rbx, 0x30(%rsp)
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp229:
    000000c8: 	testb	%r15b, %r15b
    000000cb: 	jne	.Ltmp221 # Offset: 203
    000000d1: 	cmpb	$0x0, 0x12(%rsp)
    000000d6: 	je	.Ltmp222 # Offset: 214
    000000dc: 	xorl	%r10d, %r10d
    000000df: 	cmpb	$0x0, 0x13(%rsp)
    000000e4: 	je	.Ltmp223 # Offset: 228
    000000ea: 	movq	0x20(%rsp), %rax
    000000ef: 	leaq	(%r12,%rax), %r9
    000000f3: 	addq	%rbp, %rax
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp225:
    00000100: 	movq	%rax, %r11
    00000103: 	andl	$0x7, %r11d
    00000107: 	cmpq	$0x7, %r11
    0000010b: 	je	.Ltmp224 # Offset: 267
    0000010d: 	movzbl	(%r9), %r11d
    00000111: 	addq	$0x1, %r10
    00000115: 	subq	$0x1, %r9
    00000119: 	subq	$0x1, %rax
    0000011d: 	movb	%r11b, 0x1(%rax)
    00000121: 	cmpq	%r10, %rdx
    00000124: 	jg	.Ltmp225 # Offset: 292
.Ltmp224:
    00000126: 	cmpq	%r10, 0x8(%rsp)
    0000012b: 	jle	.Ltmp223 # Offset: 299
    00000131: 	movq	(%rsp), %rbx
    00000135: 	movq	0x30(%rsp), %r11
    0000013a: 	movq	$-0x3f, %r9
    00000141: 	subq	%r10, %r9
    00000144: 	subq	%r10, %rbx
    00000147: 	subq	%r10, %r11
    0000014a: 	leaq	(%rsi,%r9), %rax
    0000014e: 	addq	%rdi, %r9
    00000151: 	movq	%rbx, %r13
    00000154: 	andq	$-0x40, %r13
    00000158: 	subq	%r13, %r11
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp226:
    00000160: 	movq	0x38(%rax), %r13
    00000164: 	subq	$0x40, %rax
    00000168: 	subq	$0x40, %r9
    0000016c: 	movq	%r13, 0x78(%r9)
    00000170: 	movq	0x70(%rax), %r13
    00000174: 	movq	%r13, 0x70(%r9)
    00000178: 	movq	0x68(%rax), %r13
    0000017c: 	movq	%r13, 0x68(%r9)
    00000180: 	movq	0x60(%rax), %r13
    00000184: 	movq	%r13, 0x60(%r9)
    00000188: 	movq	0x58(%rax), %r13
    0000018c: 	movq	%r13, 0x58(%r9)
    00000190: 	movq	0x50(%rax), %r13
    00000194: 	movq	%r13, 0x50(%r9)
    00000198: 	movq	0x48(%rax), %r13
    0000019c: 	movq	%r13, 0x48(%r9)
    000001a0: 	movq	0x40(%rax), %r13
    000001a4: 	movq	%r13, 0x40(%r9)
    000001a8: 	cmpq	%rax, %r11
    000001ab: 	jne	.Ltmp226 # Offset: 427
    000001ad: 	andq	$-0x40, %rbx
    000001b1: 	leaq	0x40(%r10,%rbx), %r10
.Ltmp223:
    000001b6: 	movq	%r10, %rax
    000001b9: 	negq	%rax
    000001bc: 	cmpq	%r10, %rdx
    000001bf: 	jle	.Ltmp227 # Offset: 447
    000001c1: 	nopl	(%rax) # Size: 7
.Ltmp228:
    000001c8: 	movzbl	(%rsi,%rax), %r9d
    000001cd: 	movb	%r9b, (%rdi,%rax)
    000001d1: 	subq	$0x1, %rax
    000001d5: 	cmpq	%rax, %r8
    000001d8: 	jne	.Ltmp228 # Offset: 472
.Ltmp227:
    000001da: 	movl	iterations(%rip), %eax
.Ltmp221:
    000001e0: 	addl	$0x1, %ecx
    000001e3: 	cmpl	%eax, %ecx
    000001e5: 	jl	.Ltmp229 # Offset: 485
.Ltmp220:
    000001eb: 	movl	current_test(%rip), %edx
    000001f1: 	cmpl	$0x64, %edx
    000001f4: 	ja	.Ltmp230 # Offset: 500
    000001fa: 	movl	allocated_results(%rip), %edx
    00000200: 	cmpl	$0x64, %edx
    00000203: 	ja	.Ltmp231 # Offset: 515
    00000209: 	callq	clock@PLT # Offset: 521
    0000020e: 	movq	0x28(%rsp), %rdi
    00000213: 	pxor	%xmm0, %xmm0
    00000217: 	movq	%rax, end_time(%rip)
    0000021e: 	subq	start_time(%rip), %rax
    00000225: 	cvtsi2sd	%rax, %xmm0
    0000022a: 	divsd	DATAat0x6b78(%rip), %xmm0
    00000232: 	callq	_Z13record_resultdPKc # Offset: 562
    00000237: 	movq	%rbp, %rcx
    0000023a: 	movslq	0x14(%rsp), %rdx
    0000023f: 	subq	%r12, %rcx
    00000242: 	movq	%rcx, %rax
    00000245: 	negq	%rax
    00000248: 	cmovsq	%rcx, %rax
    0000024c: 	cmpq	%rax, %rdx
    0000024f: 	jg	.Ltmp232 # Offset: 591
    00000251: 	movq	%r12, %rsi
    00000254: 	movq	%rbp, %rdi
    00000257: 	callq	memcmp@PLT # Offset: 599
    0000025c: 	testl	%eax, %eax
    0000025e: 	jne	.Ltmp233 # Offset: 606
.Ltmp232:
    00000264: 	addq	$0x48, %rsp
    00000268: 	popq	%rbx
    00000269: 	popq	%rbp
    0000026a: 	popq	%r12
    0000026c: 	popq	%r13
    0000026e: 	popq	%r14
    00000270: 	popq	%r15
    00000272: 	retq # Offset: 626
    00000273: 	nopl	(%rax,%rax) # Size: 5
.Ltmp222:
    00000278: 	xorl	%eax, %eax
    0000027a: 	cmpq	$0x80, %rdx
    00000281: 	jg	.Ltmp234 # Offset: 641
.Ltmp243:
    00000287: 	cmpq	%rax, %rdx
    0000028a: 	jle	.Ltmp227 # Offset: 650
    00000290: 	leaq	0x1(%rax), %r14
    00000294: 	leaq	(%rbp,%rax), %rbx
    00000299: 	movq	%rdx, %r9
    0000029c: 	movq	%rax, %r11
    0000029f: 	movq	%r14, 0x18(%rsp)
    000002a4: 	movq	%rbx, %r10
    000002a7: 	addq	%r12, %r14
    000002aa: 	subq	%rax, %r9
    000002ad: 	subq	%r14, %r10
    000002b0: 	leaq	-0x1(%r9), %r13
    000002b4: 	cmpq	$0xe, %r10
    000002b8: 	jbe	.Ltmp235 # Offset: 696
    000002be: 	cmpq	$0x6, %r13
    000002c2: 	jbe	.Ltmp235 # Offset: 706
    000002c8: 	cmpq	$0xe, %r13
    000002cc: 	jbe	.Ltmp236 # Offset: 716
    000002d2: 	movq	%r9, %r13
    000002d5: 	leaq	(%r12,%rax), %r14
    000002d9: 	xorl	%r10d, %r10d
    000002dc: 	andq	$-0x10, %r13
.Ltmp237:
    000002e0: 	movdqu	(%r14,%r10), %xmm3
    000002e6: 	movups	%xmm3, (%rbx,%r10)
    000002eb: 	addq	$0x10, %r10
    000002ef: 	cmpq	%r13, %r10
    000002f2: 	jne	.Ltmp237 # Offset: 754
    000002f4: 	movq	%r9, %r10
    000002f7: 	andq	$-0x10, %r10
    000002fb: 	addq	%r10, %rax
    000002fe: 	cmpq	%r9, %r10
    00000301: 	je	.Ltmp227 # Offset: 769
    00000307: 	subq	%r10, %r9
    0000030a: 	leaq	-0x1(%r9), %rbx
    0000030e: 	cmpq	$0x6, %rbx
    00000312: 	jbe	.Ltmp238 # Offset: 786
.Ltmp248:
    00000314: 	addq	%r10, %r11
    00000317: 	movq	(%r12,%r11), %r10
    0000031b: 	movq	%r10, (%rbp,%r11)
    00000320: 	movq	%r9, %r10
    00000323: 	andq	$-0x8, %r10
    00000327: 	addq	%r10, %rax
    0000032a: 	cmpq	%r9, %r10
    0000032d: 	je	.Ltmp227 # Offset: 813
.Ltmp238:
    00000333: 	movzbl	(%r12,%rax), %r9d
    00000338: 	movb	%r9b, (%rbp,%rax)
    0000033d: 	leaq	0x1(%rax), %r9
    00000341: 	cmpq	%r9, %rdx
    00000344: 	jle	.Ltmp227 # Offset: 836
    0000034a: 	movzbl	0x1(%r12,%rax), %r9d
    00000350: 	movb	%r9b, 0x1(%rbp,%rax)
    00000355: 	leaq	0x2(%rax), %r9
    00000359: 	cmpq	%r9, %rdx
    0000035c: 	jle	.Ltmp227 # Offset: 860
    00000362: 	movzbl	0x2(%r12,%rax), %r9d
    00000368: 	movb	%r9b, 0x2(%rbp,%rax)
    0000036d: 	leaq	0x3(%rax), %r9
    00000371: 	cmpq	%r9, %rdx
    00000374: 	jle	.Ltmp227 # Offset: 884
    0000037a: 	movzbl	0x3(%r12,%rax), %r9d
    00000380: 	movb	%r9b, 0x3(%rbp,%rax)
    00000385: 	leaq	0x4(%rax), %r9
    00000389: 	cmpq	%r9, %rdx
    0000038c: 	jle	.Ltmp227 # Offset: 908
    00000392: 	movzbl	0x4(%r12,%rax), %r9d
    00000398: 	movb	%r9b, 0x4(%rbp,%rax)
    0000039d: 	leaq	0x5(%rax), %r9
    000003a1: 	cmpq	%r9, %rdx
    000003a4: 	jle	.Ltmp227 # Offset: 932
    000003aa: 	movzbl	0x5(%r12,%rax), %r9d
    000003b0: 	movb	%r9b, 0x5(%rbp,%rax)
    000003b5: 	leaq	0x6(%rax), %r9
    000003b9: 	cmpq	%r9, %rdx
    000003bc: 	jle	.Ltmp227 # Offset: 956
    000003c2: 	movzbl	0x6(%r12,%rax), %r9d
    000003c8: 	movb	%r9b, 0x6(%rbp,%rax)
    000003cd: 	jmp	.Ltmp227 # Offset: 973
    000003d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp234:
    000003d8: 	leaq	(%rbp,%rax), %r9
    000003dd: 	testb	$0x7, %r9b
    000003e1: 	je	.Ltmp239 # Offset: 993
    000003e7: 	movzbl	(%r12,%rax), %r9d
    000003ec: 	movb	%r9b, (%rbp,%rax)
    000003f1: 	addq	$0x1, %rax
    000003f5: 	cmpq	%rax, %rdx
    000003f8: 	jne	.Ltmp234 # Offset: 1016
    000003fa: 	leaq	(%rbp,%rdx), %r9
    000003ff: 	cmpq	0x8(%rsp), %rdx
    00000404: 	jge	.Ltmp227 # Offset: 1028
.Ltmp244:
    0000040a: 	leaq	0x40(%rax), %r11
    0000040e: 	leaq	(%r12,%rax), %r10
    00000412: 	leaq	(%r12,%r11), %rbx
    00000416: 	cmpq	%rbx, %r9
    00000419: 	jae	.Ltmp240 # Offset: 1049
    0000041b: 	leaq	(%rbp,%r11), %rbx
    00000420: 	cmpq	%rbx, %r10
    00000423: 	jb	.Ltmp241 # Offset: 1059
.Ltmp240:
    00000429: 	movq	(%rsp), %rbx
    0000042d: 	xorl	%r13d, %r13d
    00000430: 	subq	%rax, %rbx
    00000433: 	shrq	$0x6, %rbx
    00000437: 	addq	$0x1, %rbx
    0000043b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp242:
    00000440: 	movdqu	0x10(%r10), %xmm2
    00000446: 	movdqu	0x20(%r10), %xmm1
    0000044c: 	addq	$0x1, %r13
    00000450: 	addq	$0x40, %r10
    00000454: 	movdqu	-0x10(%r10), %xmm0
    0000045a: 	movdqu	-0x40(%r10), %xmm4
    00000460: 	addq	$0x40, %r9
    00000464: 	movups	%xmm2, -0x30(%r9)
    00000469: 	movups	%xmm4, -0x40(%r9)
    0000046e: 	movups	%xmm1, -0x20(%r9)
    00000473: 	movups	%xmm0, -0x10(%r9)
    00000478: 	cmpq	%r13, %rbx
    0000047b: 	ja	.Ltmp242 # Offset: 1147
    0000047d: 	movq	(%rsp), %r9
    00000481: 	subq	%rax, %r9
    00000484: 	andq	$-0x40, %r9
    00000488: 	leaq	(%r9,%r11), %rax
    0000048c: 	jmp	.Ltmp243 # Offset: 1164
    00000491: 	nopl	(%rax) # Size: 7
.Ltmp239:
    00000498: 	cmpq	%rax, 0x8(%rsp)
    0000049d: 	jg	.Ltmp244 # Offset: 1181
    000004a3: 	jmp	.Ltmp243 # Offset: 1187
.Ltmp241:
    000004a8: 	movq	(%rsp), %rbx
    000004ac: 	movq	0x38(%rsp), %r14
    000004b1: 	subq	%rax, %rbx
    000004b4: 	leaq	(%r14,%rax), %r13
    000004b8: 	andq	$-0x40, %rbx
    000004bc: 	addq	%r13, %rbx
    000004bf: 	nop # Size: 1
.Ltmp245:
    000004c0: 	movq	(%r10), %r13
    000004c3: 	addq	$0x40, %r10
    000004c7: 	addq	$0x40, %r9
    000004cb: 	movq	%r13, -0x40(%r9)
    000004cf: 	movq	-0x38(%r10), %r13
    000004d3: 	movq	%r13, -0x38(%r9)
    000004d7: 	movq	-0x30(%r10), %r13
    000004db: 	movq	%r13, -0x30(%r9)
    000004df: 	movq	-0x28(%r10), %r13
    000004e3: 	movq	%r13, -0x28(%r9)
    000004e7: 	movq	-0x20(%r10), %r13
    000004eb: 	movq	%r13, -0x20(%r9)
    000004ef: 	movq	-0x18(%r10), %r13
    000004f3: 	movq	%r13, -0x18(%r9)
    000004f7: 	movq	-0x10(%r10), %r13
    000004fb: 	movq	%r13, -0x10(%r9)
    000004ff: 	movq	-0x8(%r10), %r13
    00000503: 	movq	%r13, -0x8(%r9)
    00000507: 	cmpq	%rbx, %r10
    0000050a: 	jne	.Ltmp245 # Offset: 1290
    0000050c: 	movq	(%rsp), %r9
    00000510: 	subq	%rax, %r9
    00000513: 	andq	$-0x40, %r9
    00000517: 	leaq	(%r9,%r11), %rax
    0000051b: 	jmp	.Ltmp243 # Offset: 1307
.Ltmp235:
    00000520: 	movq	0x18(%rsp), %r10
    00000525: 	jmp	.Ltmp246 # Offset: 1317
    00000527: 	nopw	(%rax,%rax) # Size: 9
.Ltmp247:
    00000530: 	addq	$0x1, %r10
.Ltmp246:
    00000534: 	movzbl	(%r12,%rax), %r9d
    00000539: 	movb	%r9b, (%rbp,%rax)
    0000053e: 	movq	%r10, %rax
    00000541: 	cmpq	%r10, %rdx
    00000544: 	jne	.Ltmp247 # Offset: 1348
    00000546: 	jmp	.Ltmp227 # Offset: 1350
.Ltmp233:
    0000054b: 	movq	0x28(%rsp), %rdx
    00000550: 	addq	$0x48, %rsp
    00000554: 	leaq	DATAat0x6726(%rip), %rsi
    0000055b: 	xorl	%eax, %eax
    0000055d: 	popq	%rbx
    0000055e: 	movl	$0x1, %edi
    00000563: 	popq	%rbp
    00000564: 	popq	%r12
    00000566: 	popq	%r13
    00000568: 	popq	%r14
    0000056a: 	popq	%r15
    0000056c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1388
.Ltmp236:
    00000571: 	xorl	%r10d, %r10d
    00000574: 	jmp	.Ltmp248 # Offset: 1396
.Ltmp230:
    00000579: 	movl	$0x1, %edi
    0000057e: 	leaq	DATAat0x6058(%rip), %rsi
    00000585: 	xorl	%eax, %eax
    00000587: 	callq	__printf_chk@PLT # Offset: 1415
    0000058c: 	movl	$0xfffffffc, %edi
    00000591: 	callq	exit@PLT # Offset: 1425
.Ltmp231:
    00000596: 	movl	$0x1, %edi
    0000059b: 	leaq	DATAat0x6088(%rip), %rsi
    000005a2: 	xorl	%eax, %eax
    000005a4: 	callq	__printf_chk@PLT # Offset: 1444
    000005a9: 	movl	$0xfffffffe, %edi
    000005ae: 	callq	exit@PLT # Offset: 1454
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_memmoveIh34forloop_unroll64_cacheline_memmoveEvPT_PKS1_iT0_PKc"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x48a0
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x48a0
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	movq	%rsi, %rdi
    00000010: 	pushq	%rbp
    00000011: 	leaq	0x10(%r12), %r14
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	callq	strlen@PLT # Offset: 29
    00000022: 	movb	$0x0, 0x10(%r12)
    00000028: 	movq	%r12, %rdi
    0000002b: 	movq	$0x0, 0x8(%r12)
    00000034: 	movq	0x8(%rbx), %rsi
    00000038: 	movq	%rax, %r13
    0000003b: 	movq	%r14, (%r12)
    0000003f: 	addq	%rax, %rsi
    00000042: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@PLT # Offset: 66
    00000047: 	movabsq	$0x3fffffffffffffff, %rax
    00000051: 	subq	0x8(%r12), %rax
    00000056: 	cmpq	%rax, %r13
    00000059: 	ja	.Ltmp249 # Offset: 89
    0000005b: 	movq	%r13, %rdx
    0000005e: 	movq	%rbp, %rsi
    00000061: 	movq	%r12, %rdi
    00000064: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 100
    00000069: 	movq	0x8(%rbx), %rdx
    0000006d: 	movq	(%rbx), %rsi
    00000070: 	movq	%r12, %rdi
    00000073: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 115
    00000078: 	popq	%rbx
    00000079: 	movq	%r12, %rax
    0000007c: 	popq	%rbp
    0000007d: 	popq	%r12
    0000007f: 	popq	%r13
    00000081: 	popq	%r14
    00000083: 	retq # Offset: 131
.Ltmp249:
    00000084: 	leaq	DATAat0x6a15(%rip), %rdi
    0000008b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 139
    00000090: 	endbr64
    00000094: 	movq	%rax, %rbp
    00000097: 	movq	(%r12), %rdi
    0000009b: 	cmpq	%rdi, %r14
    0000009e: 	je	.Ltmp250 # Offset: 158
    000000a0: 	movq	0x10(%r12), %rsi
    000000a5: 	addq	$0x1, %rsi
    000000a9: 	callq	_ZdlPvm@PLT # Offset: 169
.Ltmp250:
    000000ae: 	movq	%rbp, %rdi
    000000b1: 	callq	_Unwind_Resume@PLT # Offset: 177
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_"

Binary Function "_Z9TestSizesIhEvPT_PKS0_iiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x4960
  Size        : 0x125d
  MaxSize     : 0x125d
  Offset      : 0x4960
  Section     : .text
  Orc Section : .local.text._Z9TestSizesIhEvPT_PKS0_iiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x68, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	leaq	0x30(%rsp), %rdi
    00000022: 	leaq	DATAat0x6a2a(%rip), %rsi
    00000029: 	movl	%edx, 0x28(%rsp)
    0000002d: 	movq	%r8, %rdx
    00000030: 	movq	%r8, 0x18(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x58(%rsp)
    00000043: 	xorl	%eax, %eax
    00000045: 	movq	%rdi, 0x20(%rsp)
    0000004a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 74
    0000004f: 	movl	iterations(%rip), %ebx
    00000055: 	leaq	DATAat0x6ac8(%rip), %rsi
    0000005c: 	xorl	%eax, %eax
    0000005e: 	movl	$0x1, %edi
    00000063: 	movl	%ebx, 0x10(%rsp)
    00000067: 	callq	__printf_chk@PLT # Offset: 103
    0000006c: 	leaq	DATAat0x6af8(%rip), %rsi
    00000073: 	movl	$0x1, %edi
    00000078: 	xorl	%eax, %eax
    0000007a: 	callq	__printf_chk@PLT # Offset: 122
    0000007f: 	xorl	%ebp, %ebp
    00000081: 	cmpl	$0x3, 0x28(%rsp)
    00000086: 	movslq	%ebx, %r12
    00000089: 	movl	$0x4, %ebx
    0000008e: 	leaq	DATAat0x6b28(%rip), %r13
    00000095: 	jg	.Ltmp251 # Offset: 149
    0000009b: 	jmp	.Ltmp252 # Offset: 155
.Ltmp256:
    000000a0: 	cmpl	$-0x1, %r15d
    000000a4: 	jne	.Ltmp253 # Offset: 164
    000000aa: 	movl	%ebx, %eax
    000000ac: 	movslq	%ebx, %rdi
    000000af: 	movq	%r14, %rsi
    000000b2: 	sarl	$0x2, %eax
    000000b5: 	cltq
    000000b7: 	subq	%rax, %rdi
    000000ba: 	addq	%r14, %rdi
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp257:
    000000c0: 	movq	0x30(%rsp), %rcx
    000000c5: 	movl	%ebx, %edx
    000000c7: 	callq	"_Z12test_memmoveIhPFPvS0_PKvmEEvPT_PKS5_iT0_PKc.constprop.0/1" # Offset: 199
    000000cc: 	pxor	%xmm1, %xmm1
    000000d0: 	pxor	%xmm2, %xmm2
    000000d4: 	movq	0x30(%rsp), %rcx
    000000d9: 	movl	%ebx, %r8d
    000000dc: 	cvtsi2sd	%ebx, %xmm2
    000000e0: 	movq	results(%rip), %rax
    000000e7: 	movl	%ebp, %edx
    000000e9: 	movq	%r13, %rsi
    000000ec: 	cvtsi2sdl	iterations(%rip), %xmm1
    000000f4: 	movl	$0x1, %edi
    000000f9: 	movsd	(%rax), %xmm0
    000000fd: 	movl	$0x2, %eax
    00000102: 	mulsd	%xmm2, %xmm1
    00000106: 	divsd	DATAat0x6b78(%rip), %xmm1
    0000010e: 	divsd	%xmm0, %xmm1
    00000112: 	callq	__printf_chk@PLT # Offset: 274
    00000117: 	movl	$0x0, current_test(%rip)
    00000121: 	addl	%ebx, %ebx
    00000123: 	addl	$0x1, %ebp
    00000126: 	cmpl	%ebx, 0x28(%rsp)
    0000012a: 	jl	.Ltmp252 # Offset: 298
.Ltmp251:
    00000130: 	movl	$0x4000000, %eax
    00000135: 	cltd
    00000136: 	idivl	%ebx
    00000138: 	movl	$0x4, %edx
    0000013d: 	cltq
    0000013f: 	imulq	%r12, %rax
    00000143: 	cmpq	%rdx, %rax
    00000146: 	cmovlq	%rdx, %rax
    0000014a: 	movl	$0x70000000, %edx
    0000014f: 	cmpq	%rdx, %rax
    00000152: 	cmovgq	%rdx, %rax
    00000156: 	movl	%eax, iterations(%rip)
    0000015c: 	cmpl	$0x1, %r15d
    00000160: 	je	.Ltmp254 # Offset: 352
    00000162: 	jg	.Ltmp255 # Offset: 354
    00000164: 	cmpl	$-0x2, %r15d
    00000168: 	jne	.Ltmp256 # Offset: 360
    0000016e: 	movl	%ebx, %edi
    00000170: 	movq	%r14, %rsi
    00000173: 	sarl	$0x2, %edi
    00000176: 	movslq	%edi, %rdi
    00000179: 	addq	%r14, %rdi
    0000017c: 	jmp	.Ltmp257 # Offset: 380
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp255:
    00000188: 	cmpl	$0x2, %r15d
    0000018c: 	jne	.Ltmp253 # Offset: 396
    0000018e: 	movl	%ebx, %esi
    00000190: 	movq	%r14, %rdi
    00000193: 	sarl	$0x2, %esi
    00000196: 	movslq	%esi, %rsi
    00000199: 	addq	%r14, %rsi
    0000019c: 	jmp	.Ltmp257 # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp253:
    000001a8: 	movq	0x8(%rsp), %rsi
    000001ad: 	movq	%r14, %rdi
    000001b0: 	jmp	.Ltmp257 # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp254:
    000001b8: 	movl	%ebx, %eax
    000001ba: 	movslq	%ebx, %rsi
    000001bd: 	movq	%r14, %rdi
    000001c0: 	sarl	$0x2, %eax
    000001c3: 	cltq
    000001c5: 	subq	%rax, %rsi
    000001c8: 	addq	%r14, %rsi
    000001cb: 	jmp	.Ltmp257 # Offset: 459
.Ltmp252:
    000001d0: 	movl	0x10(%rsp), %eax
    000001d4: 	movq	0x30(%rsp), %rdi
    000001d9: 	movl	%eax, iterations(%rip)
    000001df: 	leaq	0x40(%rsp), %rax
    000001e4: 	movq	%rax, 0x10(%rsp)
    000001e9: 	cmpq	%rax, %rdi
    000001ec: 	je	.Ltmp258 # Offset: 492
    000001ee: 	movq	0x40(%rsp), %rax
    000001f3: 	leaq	0x1(%rax), %rsi
    000001f7: 	callq	_ZdlPvm@PLT # Offset: 503
.Ltmp258:
    000001fc: 	movq	0x20(%rsp), %rdi
    00000201: 	movq	0x18(%rsp), %rdx
    00000206: 	leaq	DATAat0x6a33(%rip), %rsi
    0000020d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 525
    00000212: 	movl	iterations(%rip), %ebx
    00000218: 	leaq	DATAat0x6ac8(%rip), %rsi
    0000021f: 	xorl	%eax, %eax
    00000221: 	movl	$0x1, %edi
    00000226: 	movl	%ebx, 0x2c(%rsp)
    0000022a: 	callq	__printf_chk@PLT # Offset: 554
    0000022f: 	leaq	DATAat0x6af8(%rip), %rsi
    00000236: 	movl	$0x1, %edi
    0000023b: 	xorl	%eax, %eax
    0000023d: 	callq	__printf_chk@PLT # Offset: 573
    00000242: 	xorl	%ebp, %ebp
    00000244: 	cmpl	$0x3, 0x28(%rsp)
    00000249: 	movslq	%ebx, %r13
    0000024c: 	movl	$0x4, %ebx
    00000251: 	leaq	DATAat0x6b28(%rip), %r12
    00000258: 	jg	.Ltmp259 # Offset: 600
    0000025e: 	jmp	.Ltmp260 # Offset: 606
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp264:
    00000268: 	cmpl	$-0x1, %r15d
    0000026c: 	jne	.Ltmp261 # Offset: 620
    00000272: 	movl	%ebx, %eax
    00000274: 	movslq	%ebx, %rdi
    00000277: 	movq	%r14, %rsi
    0000027a: 	sarl	$0x2, %eax
    0000027d: 	cltq
    0000027f: 	subq	%rax, %rdi
    00000282: 	addq	%r14, %rdi
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp265:
    00000288: 	movq	0x30(%rsp), %rcx
    0000028d: 	movl	%ebx, %edx
    0000028f: 	callq	"_Z12test_memmoveIh8std_moveEvPT_PKS1_iT0_PKc.isra.0/1" # Offset: 655
    00000294: 	pxor	%xmm1, %xmm1
    00000298: 	pxor	%xmm2, %xmm2
    0000029c: 	movq	0x30(%rsp), %rcx
    000002a1: 	movl	%ebx, %r8d
    000002a4: 	cvtsi2sd	%ebx, %xmm2
    000002a8: 	movq	results(%rip), %rax
    000002af: 	movl	%ebp, %edx
    000002b1: 	movq	%r12, %rsi
    000002b4: 	cvtsi2sdl	iterations(%rip), %xmm1
    000002bc: 	movl	$0x1, %edi
    000002c1: 	movsd	(%rax), %xmm0
    000002c5: 	movl	$0x2, %eax
    000002ca: 	mulsd	%xmm2, %xmm1
    000002ce: 	divsd	DATAat0x6b78(%rip), %xmm1
    000002d6: 	divsd	%xmm0, %xmm1
    000002da: 	callq	__printf_chk@PLT # Offset: 730
    000002df: 	movl	$0x0, current_test(%rip)
    000002e9: 	addl	%ebx, %ebx
    000002eb: 	addl	$0x1, %ebp
    000002ee: 	cmpl	%ebx, 0x28(%rsp)
    000002f2: 	jl	.Ltmp260 # Offset: 754
.Ltmp259:
    000002f8: 	movl	$0x4000000, %eax
    000002fd: 	cltd
    000002fe: 	idivl	%ebx
    00000300: 	movl	$0x4, %edx
    00000305: 	cltq
    00000307: 	imulq	%r13, %rax
    0000030b: 	cmpq	%rdx, %rax
    0000030e: 	cmovlq	%rdx, %rax
    00000312: 	movl	$0x70000000, %edx
    00000317: 	cmpq	%rdx, %rax
    0000031a: 	cmovgq	%rdx, %rax
    0000031e: 	movl	%eax, iterations(%rip)
    00000324: 	cmpl	$0x1, %r15d
    00000328: 	je	.Ltmp262 # Offset: 808
    0000032a: 	jg	.Ltmp263 # Offset: 810
    0000032c: 	cmpl	$-0x2, %r15d
    00000330: 	jne	.Ltmp264 # Offset: 816
    00000336: 	movl	%ebx, %edi
    00000338: 	movq	%r14, %rsi
    0000033b: 	sarl	$0x2, %edi
    0000033e: 	movslq	%edi, %rdi
    00000341: 	addq	%r14, %rdi
    00000344: 	jmp	.Ltmp265 # Offset: 836
    00000349: 	nopl	(%rax) # Size: 7
.Ltmp263:
    00000350: 	cmpl	$0x2, %r15d
    00000354: 	jne	.Ltmp261 # Offset: 852
    00000356: 	movl	%ebx, %esi
    00000358: 	movq	%r14, %rdi
    0000035b: 	sarl	$0x2, %esi
    0000035e: 	movslq	%esi, %rsi
    00000361: 	addq	%r14, %rsi
    00000364: 	jmp	.Ltmp265 # Offset: 868
    00000369: 	nopl	(%rax) # Size: 7
.Ltmp261:
    00000370: 	movq	0x8(%rsp), %rsi
    00000375: 	movq	%r14, %rdi
    00000378: 	jmp	.Ltmp265 # Offset: 888
    0000037d: 	nopl	(%rax) # Size: 3
.Ltmp262:
    00000380: 	movl	%ebx, %eax
    00000382: 	movslq	%ebx, %rsi
    00000385: 	movq	%r14, %rdi
    00000388: 	sarl	$0x2, %eax
    0000038b: 	cltq
    0000038d: 	subq	%rax, %rsi
    00000390: 	addq	%r14, %rsi
    00000393: 	jmp	.Ltmp265 # Offset: 915
    00000398: 	nopl	(%rax,%rax) # Size: 8
.Ltmp260:
    000003a0: 	movl	0x2c(%rsp), %eax
    000003a4: 	movq	0x30(%rsp), %rdi
    000003a9: 	movl	%eax, iterations(%rip)
    000003af: 	cmpq	0x10(%rsp), %rdi
    000003b4: 	je	.Ltmp266 # Offset: 948
    000003b6: 	movq	0x40(%rsp), %rax
    000003bb: 	leaq	0x1(%rax), %rsi
    000003bf: 	callq	_ZdlPvm@PLT # Offset: 959
.Ltmp266:
    000003c4: 	movq	0x20(%rsp), %rdi
    000003c9: 	movq	0x18(%rsp), %rdx
    000003ce: 	leaq	DATAat0x6a3e(%rip), %rsi
    000003d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 981
    000003da: 	movl	iterations(%rip), %ebx
    000003e0: 	leaq	DATAat0x6ac8(%rip), %rsi
    000003e7: 	xorl	%eax, %eax
    000003e9: 	movl	$0x1, %edi
    000003ee: 	movl	%ebx, 0x2c(%rsp)
    000003f2: 	callq	__printf_chk@PLT # Offset: 1010
    000003f7: 	leaq	DATAat0x6af8(%rip), %rsi
    000003fe: 	movl	$0x1, %edi
    00000403: 	xorl	%eax, %eax
    00000405: 	callq	__printf_chk@PLT # Offset: 1029
    0000040a: 	xorl	%ebp, %ebp
    0000040c: 	cmpl	$0x3, 0x28(%rsp)
    00000411: 	movslq	%ebx, %r13
    00000414: 	movl	$0x4, %ebx
    00000419: 	leaq	DATAat0x6b28(%rip), %r12
    00000420: 	jg	.Ltmp267 # Offset: 1056
    00000426: 	jmp	.Ltmp268 # Offset: 1062
    0000042b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp272:
    00000430: 	cmpl	$-0x1, %r15d
    00000434: 	jne	.Ltmp269 # Offset: 1076
    0000043a: 	movl	%ebx, %eax
    0000043c: 	movslq	%ebx, %rdi
    0000043f: 	movq	%r14, %rsi
    00000442: 	sarl	$0x2, %eax
    00000445: 	cltq
    00000447: 	subq	%rax, %rdi
    0000044a: 	addq	%r14, %rdi
    0000044d: 	nopl	(%rax) # Size: 3
.Ltmp273:
    00000450: 	movq	0x30(%rsp), %rcx
    00000455: 	movl	%ebx, %edx
    00000457: 	callq	"_Z12test_memmoveIh16iterator_memmoveEvPT_PKS1_iT0_PKc.isra.0/1" # Offset: 1111
    0000045c: 	pxor	%xmm1, %xmm1
    00000460: 	pxor	%xmm2, %xmm2
    00000464: 	movq	0x30(%rsp), %rcx
    00000469: 	movl	%ebx, %r8d
    0000046c: 	cvtsi2sd	%ebx, %xmm2
    00000470: 	movq	results(%rip), %rax
    00000477: 	movl	%ebp, %edx
    00000479: 	movq	%r12, %rsi
    0000047c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000484: 	movl	$0x1, %edi
    00000489: 	movsd	(%rax), %xmm0
    0000048d: 	movl	$0x2, %eax
    00000492: 	mulsd	%xmm2, %xmm1
    00000496: 	divsd	DATAat0x6b78(%rip), %xmm1
    0000049e: 	divsd	%xmm0, %xmm1
    000004a2: 	callq	__printf_chk@PLT # Offset: 1186
    000004a7: 	movl	$0x0, current_test(%rip)
    000004b1: 	addl	%ebx, %ebx
    000004b3: 	addl	$0x1, %ebp
    000004b6: 	cmpl	%ebx, 0x28(%rsp)
    000004ba: 	jl	.Ltmp268 # Offset: 1210
.Ltmp267:
    000004c0: 	movl	$0x4000000, %eax
    000004c5: 	cltd
    000004c6: 	idivl	%ebx
    000004c8: 	movl	$0x4, %edx
    000004cd: 	cltq
    000004cf: 	imulq	%r13, %rax
    000004d3: 	cmpq	%rdx, %rax
    000004d6: 	cmovlq	%rdx, %rax
    000004da: 	movl	$0x70000000, %edx
    000004df: 	cmpq	%rdx, %rax
    000004e2: 	cmovgq	%rdx, %rax
    000004e6: 	movl	%eax, iterations(%rip)
    000004ec: 	cmpl	$0x1, %r15d
    000004f0: 	je	.Ltmp270 # Offset: 1264
    000004f2: 	jg	.Ltmp271 # Offset: 1266
    000004f4: 	cmpl	$-0x2, %r15d
    000004f8: 	jne	.Ltmp272 # Offset: 1272
    000004fe: 	movl	%ebx, %edi
    00000500: 	movq	%r14, %rsi
    00000503: 	sarl	$0x2, %edi
    00000506: 	movslq	%edi, %rdi
    00000509: 	addq	%r14, %rdi
    0000050c: 	jmp	.Ltmp273 # Offset: 1292
    00000511: 	nopl	(%rax) # Size: 7
.Ltmp271:
    00000518: 	cmpl	$0x2, %r15d
    0000051c: 	jne	.Ltmp269 # Offset: 1308
    0000051e: 	movl	%ebx, %esi
    00000520: 	movq	%r14, %rdi
    00000523: 	sarl	$0x2, %esi
    00000526: 	movslq	%esi, %rsi
    00000529: 	addq	%r14, %rsi
    0000052c: 	jmp	.Ltmp273 # Offset: 1324
    00000531: 	nopl	(%rax) # Size: 7
.Ltmp269:
    00000538: 	movq	0x8(%rsp), %rsi
    0000053d: 	movq	%r14, %rdi
    00000540: 	jmp	.Ltmp273 # Offset: 1344
    00000545: 	nopl	(%rax) # Size: 3
.Ltmp270:
    00000548: 	movl	%ebx, %eax
    0000054a: 	movslq	%ebx, %rsi
    0000054d: 	movq	%r14, %rdi
    00000550: 	sarl	$0x2, %eax
    00000553: 	cltq
    00000555: 	subq	%rax, %rsi
    00000558: 	addq	%r14, %rsi
    0000055b: 	jmp	.Ltmp273 # Offset: 1371
.Ltmp268:
    00000560: 	movl	0x2c(%rsp), %eax
    00000564: 	movq	0x30(%rsp), %rdi
    00000569: 	movl	%eax, iterations(%rip)
    0000056f: 	cmpq	0x10(%rsp), %rdi
    00000574: 	je	.Ltmp274 # Offset: 1396
    00000576: 	movq	0x40(%rsp), %rax
    0000057b: 	leaq	0x1(%rax), %rsi
    0000057f: 	callq	_ZdlPvm@PLT # Offset: 1407
.Ltmp274:
    00000584: 	movq	0x20(%rsp), %rdi
    00000589: 	movq	0x18(%rsp), %rdx
    0000058e: 	leaq	DATAat0x6a4d(%rip), %rsi
    00000595: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 1429
    0000059a: 	movl	iterations(%rip), %ebx
    000005a0: 	leaq	DATAat0x6ac8(%rip), %rsi
    000005a7: 	xorl	%eax, %eax
    000005a9: 	movl	$0x1, %edi
    000005ae: 	movl	%ebx, 0x2c(%rsp)
    000005b2: 	callq	__printf_chk@PLT # Offset: 1458
    000005b7: 	leaq	DATAat0x6af8(%rip), %rsi
    000005be: 	movl	$0x1, %edi
    000005c3: 	xorl	%eax, %eax
    000005c5: 	callq	__printf_chk@PLT # Offset: 1477
    000005ca: 	xorl	%ebp, %ebp
    000005cc: 	cmpl	$0x3, 0x28(%rsp)
    000005d1: 	movslq	%ebx, %r13
    000005d4: 	movl	$0x4, %ebx
    000005d9: 	leaq	DATAat0x6b28(%rip), %r12
    000005e0: 	jg	.Ltmp275 # Offset: 1504
    000005e6: 	jmp	.Ltmp276 # Offset: 1510
    000005eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp280:
    000005f0: 	cmpl	$-0x1, %r15d
    000005f4: 	jne	.Ltmp277 # Offset: 1524
    000005fa: 	movl	%ebx, %eax
    000005fc: 	movslq	%ebx, %rdi
    000005ff: 	movq	%r14, %rsi
    00000602: 	sarl	$0x2, %eax
    00000605: 	cltq
    00000607: 	subq	%rax, %rdi
    0000060a: 	addq	%r14, %rdi
    0000060d: 	nopl	(%rax) # Size: 3
.Ltmp281:
    00000610: 	movq	0x30(%rsp), %rcx
    00000615: 	movl	%ebx, %edx
    00000617: 	callq	"_Z12test_memmoveIh17iterator_memmove2EvPT_PKS1_iT0_PKc.isra.0/1" # Offset: 1559
    0000061c: 	pxor	%xmm1, %xmm1
    00000620: 	pxor	%xmm2, %xmm2
    00000624: 	movq	0x30(%rsp), %rcx
    00000629: 	movl	%ebx, %r8d
    0000062c: 	cvtsi2sd	%ebx, %xmm2
    00000630: 	movq	results(%rip), %rax
    00000637: 	movl	%ebp, %edx
    00000639: 	movq	%r12, %rsi
    0000063c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000644: 	movl	$0x1, %edi
    00000649: 	movsd	(%rax), %xmm0
    0000064d: 	movl	$0x2, %eax
    00000652: 	mulsd	%xmm2, %xmm1
    00000656: 	divsd	DATAat0x6b78(%rip), %xmm1
    0000065e: 	divsd	%xmm0, %xmm1
    00000662: 	callq	__printf_chk@PLT # Offset: 1634
    00000667: 	movl	$0x0, current_test(%rip)
    00000671: 	addl	%ebx, %ebx
    00000673: 	addl	$0x1, %ebp
    00000676: 	cmpl	%ebx, 0x28(%rsp)
    0000067a: 	jl	.Ltmp276 # Offset: 1658
.Ltmp275:
    00000680: 	movl	$0x4000000, %eax
    00000685: 	cltd
    00000686: 	idivl	%ebx
    00000688: 	movl	$0x4, %edx
    0000068d: 	cltq
    0000068f: 	imulq	%r13, %rax
    00000693: 	cmpq	%rdx, %rax
    00000696: 	cmovlq	%rdx, %rax
    0000069a: 	movl	$0x70000000, %edx
    0000069f: 	cmpq	%rdx, %rax
    000006a2: 	cmovgq	%rdx, %rax
    000006a6: 	movl	%eax, iterations(%rip)
    000006ac: 	cmpl	$0x1, %r15d
    000006b0: 	je	.Ltmp278 # Offset: 1712
    000006b2: 	jg	.Ltmp279 # Offset: 1714
    000006b4: 	cmpl	$-0x2, %r15d
    000006b8: 	jne	.Ltmp280 # Offset: 1720
    000006be: 	movl	%ebx, %edi
    000006c0: 	movq	%r14, %rsi
    000006c3: 	sarl	$0x2, %edi
    000006c6: 	movslq	%edi, %rdi
    000006c9: 	addq	%r14, %rdi
    000006cc: 	jmp	.Ltmp281 # Offset: 1740
    000006d1: 	nopl	(%rax) # Size: 7
.Ltmp279:
    000006d8: 	cmpl	$0x2, %r15d
    000006dc: 	jne	.Ltmp277 # Offset: 1756
    000006de: 	movl	%ebx, %esi
    000006e0: 	movq	%r14, %rdi
    000006e3: 	sarl	$0x2, %esi
    000006e6: 	movslq	%esi, %rsi
    000006e9: 	addq	%r14, %rsi
    000006ec: 	jmp	.Ltmp281 # Offset: 1772
    000006f1: 	nopl	(%rax) # Size: 7
.Ltmp277:
    000006f8: 	movq	0x8(%rsp), %rsi
    000006fd: 	movq	%r14, %rdi
    00000700: 	jmp	.Ltmp281 # Offset: 1792
    00000705: 	nopl	(%rax) # Size: 3
.Ltmp278:
    00000708: 	movl	%ebx, %eax
    0000070a: 	movslq	%ebx, %rsi
    0000070d: 	movq	%r14, %rdi
    00000710: 	sarl	$0x2, %eax
    00000713: 	cltq
    00000715: 	subq	%rax, %rsi
    00000718: 	addq	%r14, %rsi
    0000071b: 	jmp	.Ltmp281 # Offset: 1819
.Ltmp276:
    00000720: 	movl	0x2c(%rsp), %eax
    00000724: 	movq	0x30(%rsp), %rdi
    00000729: 	movl	%eax, iterations(%rip)
    0000072f: 	cmpq	0x10(%rsp), %rdi
    00000734: 	je	.Ltmp282 # Offset: 1844
    00000736: 	movq	0x40(%rsp), %rax
    0000073b: 	leaq	0x1(%rax), %rsi
    0000073f: 	callq	_ZdlPvm@PLT # Offset: 1855
.Ltmp282:
    00000744: 	movq	0x20(%rsp), %rdi
    00000749: 	movq	0x18(%rsp), %rdx
    0000074e: 	leaq	DATAat0x6a5d(%rip), %rsi
    00000755: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 1877
    0000075a: 	movl	iterations(%rip), %ebx
    00000760: 	leaq	DATAat0x6ac8(%rip), %rsi
    00000767: 	xorl	%eax, %eax
    00000769: 	movl	$0x1, %edi
    0000076e: 	movl	%ebx, 0x2c(%rsp)
    00000772: 	callq	__printf_chk@PLT # Offset: 1906
    00000777: 	leaq	DATAat0x6af8(%rip), %rsi
    0000077e: 	movl	$0x1, %edi
    00000783: 	xorl	%eax, %eax
    00000785: 	callq	__printf_chk@PLT # Offset: 1925
    0000078a: 	xorl	%ebp, %ebp
    0000078c: 	cmpl	$0x3, 0x28(%rsp)
    00000791: 	movslq	%ebx, %r13
    00000794: 	movl	$0x4, %ebx
    00000799: 	leaq	DATAat0x6b28(%rip), %r12
    000007a0: 	jg	.Ltmp283 # Offset: 1952
    000007a6: 	jmp	.Ltmp284 # Offset: 1958
    000007ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp288:
    000007b0: 	cmpl	$-0x1, %r15d
    000007b4: 	jne	.Ltmp285 # Offset: 1972
    000007ba: 	movl	%ebx, %eax
    000007bc: 	movslq	%ebx, %rdi
    000007bf: 	movq	%r14, %rsi
    000007c2: 	sarl	$0x2, %eax
    000007c5: 	cltq
    000007c7: 	subq	%rax, %rdi
    000007ca: 	addq	%r14, %rdi
    000007cd: 	nopl	(%rax) # Size: 3
.Ltmp289:
    000007d0: 	movq	0x30(%rsp), %rcx
    000007d5: 	movl	%ebx, %edx
    000007d7: 	callq	_Z12test_memmoveIh15forloop_memmoveEvPT_PKS1_iT0_PKc # Offset: 2007
    000007dc: 	pxor	%xmm1, %xmm1
    000007e0: 	pxor	%xmm2, %xmm2
    000007e4: 	movq	0x30(%rsp), %rcx
    000007e9: 	movl	%ebx, %r8d
    000007ec: 	cvtsi2sd	%ebx, %xmm2
    000007f0: 	movq	results(%rip), %rax
    000007f7: 	movl	%ebp, %edx
    000007f9: 	movq	%r12, %rsi
    000007fc: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000804: 	movl	$0x1, %edi
    00000809: 	movsd	(%rax), %xmm0
    0000080d: 	movl	$0x2, %eax
    00000812: 	mulsd	%xmm2, %xmm1
    00000816: 	divsd	DATAat0x6b78(%rip), %xmm1
    0000081e: 	divsd	%xmm0, %xmm1
    00000822: 	callq	__printf_chk@PLT # Offset: 2082
    00000827: 	movl	$0x0, current_test(%rip)
    00000831: 	addl	%ebx, %ebx
    00000833: 	addl	$0x1, %ebp
    00000836: 	cmpl	%ebx, 0x28(%rsp)
    0000083a: 	jl	.Ltmp284 # Offset: 2106
.Ltmp283:
    00000840: 	movl	$0x4000000, %eax
    00000845: 	cltd
    00000846: 	idivl	%ebx
    00000848: 	movl	$0x4, %edx
    0000084d: 	cltq
    0000084f: 	imulq	%r13, %rax
    00000853: 	cmpq	%rdx, %rax
    00000856: 	cmovlq	%rdx, %rax
    0000085a: 	movl	$0x70000000, %edx
    0000085f: 	cmpq	%rdx, %rax
    00000862: 	cmovgq	%rdx, %rax
    00000866: 	movl	%eax, iterations(%rip)
    0000086c: 	cmpl	$0x1, %r15d
    00000870: 	je	.Ltmp286 # Offset: 2160
    00000872: 	jg	.Ltmp287 # Offset: 2162
    00000874: 	cmpl	$-0x2, %r15d
    00000878: 	jne	.Ltmp288 # Offset: 2168
    0000087e: 	movl	%ebx, %edi
    00000880: 	movq	%r14, %rsi
    00000883: 	sarl	$0x2, %edi
    00000886: 	movslq	%edi, %rdi
    00000889: 	addq	%r14, %rdi
    0000088c: 	jmp	.Ltmp289 # Offset: 2188
    00000891: 	nopl	(%rax) # Size: 7
.Ltmp287:
    00000898: 	cmpl	$0x2, %r15d
    0000089c: 	jne	.Ltmp285 # Offset: 2204
    0000089e: 	movl	%ebx, %esi
    000008a0: 	movq	%r14, %rdi
    000008a3: 	sarl	$0x2, %esi
    000008a6: 	movslq	%esi, %rsi
    000008a9: 	addq	%r14, %rsi
    000008ac: 	jmp	.Ltmp289 # Offset: 2220
    000008b1: 	nopl	(%rax) # Size: 7
.Ltmp285:
    000008b8: 	movq	0x8(%rsp), %rsi
    000008bd: 	movq	%r14, %rdi
    000008c0: 	jmp	.Ltmp289 # Offset: 2240
    000008c5: 	nopl	(%rax) # Size: 3
.Ltmp286:
    000008c8: 	movl	%ebx, %eax
    000008ca: 	movslq	%ebx, %rsi
    000008cd: 	movq	%r14, %rdi
    000008d0: 	sarl	$0x2, %eax
    000008d3: 	cltq
    000008d5: 	subq	%rax, %rsi
    000008d8: 	addq	%r14, %rsi
    000008db: 	jmp	.Ltmp289 # Offset: 2267
.Ltmp284:
    000008e0: 	movl	0x2c(%rsp), %eax
    000008e4: 	movq	0x30(%rsp), %rdi
    000008e9: 	movl	%eax, iterations(%rip)
    000008ef: 	cmpq	0x10(%rsp), %rdi
    000008f4: 	je	.Ltmp290 # Offset: 2292
    000008f6: 	movq	0x40(%rsp), %rax
    000008fb: 	leaq	0x1(%rax), %rsi
    000008ff: 	callq	_ZdlPvm@PLT # Offset: 2303
.Ltmp290:
    00000904: 	movq	0x20(%rsp), %rdi
    00000909: 	movq	0x18(%rsp), %rdx
    0000090e: 	leaq	DATAat0x6a6c(%rip), %rsi
    00000915: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 2325
    0000091a: 	movl	iterations(%rip), %ebx
    00000920: 	leaq	DATAat0x6ac8(%rip), %rsi
    00000927: 	xorl	%eax, %eax
    00000929: 	movl	$0x1, %edi
    0000092e: 	movl	%ebx, 0x2c(%rsp)
    00000932: 	callq	__printf_chk@PLT # Offset: 2354
    00000937: 	leaq	DATAat0x6af8(%rip), %rsi
    0000093e: 	movl	$0x1, %edi
    00000943: 	xorl	%eax, %eax
    00000945: 	callq	__printf_chk@PLT # Offset: 2373
    0000094a: 	xorl	%ebp, %ebp
    0000094c: 	cmpl	$0x3, 0x28(%rsp)
    00000951: 	movslq	%ebx, %r13
    00000954: 	movl	$0x4, %ebx
    00000959: 	leaq	DATAat0x6b28(%rip), %r12
    00000960: 	jg	.Ltmp291 # Offset: 2400
    00000966: 	jmp	.Ltmp292 # Offset: 2406
    0000096b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp296:
    00000970: 	cmpl	$-0x1, %r15d
    00000974: 	jne	.Ltmp293 # Offset: 2420
    0000097a: 	movl	%ebx, %eax
    0000097c: 	movslq	%ebx, %rdi
    0000097f: 	movq	%r14, %rsi
    00000982: 	sarl	$0x2, %eax
    00000985: 	cltq
    00000987: 	subq	%rax, %rdi
    0000098a: 	addq	%r14, %rdi
    0000098d: 	nopl	(%rax) # Size: 3
.Ltmp297:
    00000990: 	movq	0x30(%rsp), %rcx
    00000995: 	movl	%ebx, %edx
    00000997: 	callq	_Z12test_memmoveIh16forloop_memmove2EvPT_PKS1_iT0_PKc # Offset: 2455
    0000099c: 	pxor	%xmm1, %xmm1
    000009a0: 	pxor	%xmm2, %xmm2
    000009a4: 	movq	0x30(%rsp), %rcx
    000009a9: 	movl	%ebx, %r8d
    000009ac: 	cvtsi2sd	%ebx, %xmm2
    000009b0: 	movq	results(%rip), %rax
    000009b7: 	movl	%ebp, %edx
    000009b9: 	movq	%r12, %rsi
    000009bc: 	cvtsi2sdl	iterations(%rip), %xmm1
    000009c4: 	movl	$0x1, %edi
    000009c9: 	movsd	(%rax), %xmm0
    000009cd: 	movl	$0x2, %eax
    000009d2: 	mulsd	%xmm2, %xmm1
    000009d6: 	divsd	DATAat0x6b78(%rip), %xmm1
    000009de: 	divsd	%xmm0, %xmm1
    000009e2: 	callq	__printf_chk@PLT # Offset: 2530
    000009e7: 	movl	$0x0, current_test(%rip)
    000009f1: 	addl	%ebx, %ebx
    000009f3: 	addl	$0x1, %ebp
    000009f6: 	cmpl	%ebx, 0x28(%rsp)
    000009fa: 	jl	.Ltmp292 # Offset: 2554
.Ltmp291:
    00000a00: 	movl	$0x4000000, %eax
    00000a05: 	cltd
    00000a06: 	idivl	%ebx
    00000a08: 	movl	$0x4, %edx
    00000a0d: 	cltq
    00000a0f: 	imulq	%r13, %rax
    00000a13: 	cmpq	%rdx, %rax
    00000a16: 	cmovlq	%rdx, %rax
    00000a1a: 	movl	$0x70000000, %edx
    00000a1f: 	cmpq	%rdx, %rax
    00000a22: 	cmovgq	%rdx, %rax
    00000a26: 	movl	%eax, iterations(%rip)
    00000a2c: 	cmpl	$0x1, %r15d
    00000a30: 	je	.Ltmp294 # Offset: 2608
    00000a32: 	jg	.Ltmp295 # Offset: 2610
    00000a34: 	cmpl	$-0x2, %r15d
    00000a38: 	jne	.Ltmp296 # Offset: 2616
    00000a3e: 	movl	%ebx, %edi
    00000a40: 	movq	%r14, %rsi
    00000a43: 	sarl	$0x2, %edi
    00000a46: 	movslq	%edi, %rdi
    00000a49: 	addq	%r14, %rdi
    00000a4c: 	jmp	.Ltmp297 # Offset: 2636
    00000a51: 	nopl	(%rax) # Size: 7
.Ltmp295:
    00000a58: 	cmpl	$0x2, %r15d
    00000a5c: 	jne	.Ltmp293 # Offset: 2652
    00000a5e: 	movl	%ebx, %esi
    00000a60: 	movq	%r14, %rdi
    00000a63: 	sarl	$0x2, %esi
    00000a66: 	movslq	%esi, %rsi
    00000a69: 	addq	%r14, %rsi
    00000a6c: 	jmp	.Ltmp297 # Offset: 2668
    00000a71: 	nopl	(%rax) # Size: 7
.Ltmp293:
    00000a78: 	movq	0x8(%rsp), %rsi
    00000a7d: 	movq	%r14, %rdi
    00000a80: 	jmp	.Ltmp297 # Offset: 2688
    00000a85: 	nopl	(%rax) # Size: 3
.Ltmp294:
    00000a88: 	movl	%ebx, %eax
    00000a8a: 	movslq	%ebx, %rsi
    00000a8d: 	movq	%r14, %rdi
    00000a90: 	sarl	$0x2, %eax
    00000a93: 	cltq
    00000a95: 	subq	%rax, %rsi
    00000a98: 	addq	%r14, %rsi
    00000a9b: 	jmp	.Ltmp297 # Offset: 2715
.Ltmp292:
    00000aa0: 	movl	0x2c(%rsp), %eax
    00000aa4: 	movq	0x30(%rsp), %rdi
    00000aa9: 	movl	%eax, iterations(%rip)
    00000aaf: 	cmpq	0x10(%rsp), %rdi
    00000ab4: 	je	.Ltmp298 # Offset: 2740
    00000ab6: 	movq	0x40(%rsp), %rax
    00000abb: 	leaq	0x1(%rax), %rsi
    00000abf: 	callq	_ZdlPvm@PLT # Offset: 2751
.Ltmp298:
    00000ac4: 	movq	0x20(%rsp), %rdi
    00000ac9: 	movq	0x18(%rsp), %rdx
    00000ace: 	leaq	DATAat0x6a7c(%rip), %rsi
    00000ad5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 2773
    00000ada: 	movl	iterations(%rip), %ebx
    00000ae0: 	leaq	DATAat0x6ac8(%rip), %rsi
    00000ae7: 	xorl	%eax, %eax
    00000ae9: 	movl	$0x1, %edi
    00000aee: 	movl	%ebx, 0x2c(%rsp)
    00000af2: 	callq	__printf_chk@PLT # Offset: 2802
    00000af7: 	leaq	DATAat0x6af8(%rip), %rsi
    00000afe: 	movl	$0x1, %edi
    00000b03: 	xorl	%eax, %eax
    00000b05: 	callq	__printf_chk@PLT # Offset: 2821
    00000b0a: 	xorl	%ebp, %ebp
    00000b0c: 	cmpl	$0x3, 0x28(%rsp)
    00000b11: 	movslq	%ebx, %r13
    00000b14: 	movl	$0x4, %ebx
    00000b19: 	leaq	DATAat0x6b28(%rip), %r12
    00000b20: 	jg	.Ltmp299 # Offset: 2848
    00000b26: 	jmp	.Ltmp300 # Offset: 2854
    00000b2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp304:
    00000b30: 	cmpl	$-0x1, %r15d
    00000b34: 	jne	.Ltmp301 # Offset: 2868
    00000b3a: 	movl	%ebx, %eax
    00000b3c: 	movslq	%ebx, %rdi
    00000b3f: 	movq	%r14, %rsi
    00000b42: 	sarl	$0x2, %eax
    00000b45: 	cltq
    00000b47: 	subq	%rax, %rdi
    00000b4a: 	addq	%r14, %rdi
    00000b4d: 	nopl	(%rax) # Size: 3
.Ltmp305:
    00000b50: 	movq	0x30(%rsp), %rcx
    00000b55: 	movl	%ebx, %edx
    00000b57: 	callq	_Z12test_memmoveIh22forloop_unroll_memmoveEvPT_PKS1_iT0_PKc # Offset: 2903
    00000b5c: 	pxor	%xmm1, %xmm1
    00000b60: 	pxor	%xmm2, %xmm2
    00000b64: 	movq	0x30(%rsp), %rcx
    00000b69: 	movl	%ebx, %r8d
    00000b6c: 	cvtsi2sd	%ebx, %xmm2
    00000b70: 	movq	results(%rip), %rax
    00000b77: 	movl	%ebp, %edx
    00000b79: 	movq	%r12, %rsi
    00000b7c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000b84: 	movl	$0x1, %edi
    00000b89: 	movsd	(%rax), %xmm0
    00000b8d: 	movl	$0x2, %eax
    00000b92: 	mulsd	%xmm2, %xmm1
    00000b96: 	divsd	DATAat0x6b78(%rip), %xmm1
    00000b9e: 	divsd	%xmm0, %xmm1
    00000ba2: 	callq	__printf_chk@PLT # Offset: 2978
    00000ba7: 	movl	$0x0, current_test(%rip)
    00000bb1: 	addl	%ebx, %ebx
    00000bb3: 	addl	$0x1, %ebp
    00000bb6: 	cmpl	%ebx, 0x28(%rsp)
    00000bba: 	jl	.Ltmp300 # Offset: 3002
.Ltmp299:
    00000bc0: 	movl	$0x4000000, %eax
    00000bc5: 	cltd
    00000bc6: 	idivl	%ebx
    00000bc8: 	movl	$0x4, %edx
    00000bcd: 	cltq
    00000bcf: 	imulq	%r13, %rax
    00000bd3: 	cmpq	%rdx, %rax
    00000bd6: 	cmovlq	%rdx, %rax
    00000bda: 	movl	$0x70000000, %edx
    00000bdf: 	cmpq	%rdx, %rax
    00000be2: 	cmovgq	%rdx, %rax
    00000be6: 	movl	%eax, iterations(%rip)
    00000bec: 	cmpl	$0x1, %r15d
    00000bf0: 	je	.Ltmp302 # Offset: 3056
    00000bf2: 	jg	.Ltmp303 # Offset: 3058
    00000bf4: 	cmpl	$-0x2, %r15d
    00000bf8: 	jne	.Ltmp304 # Offset: 3064
    00000bfe: 	movl	%ebx, %edi
    00000c00: 	movq	%r14, %rsi
    00000c03: 	sarl	$0x2, %edi
    00000c06: 	movslq	%edi, %rdi
    00000c09: 	addq	%r14, %rdi
    00000c0c: 	jmp	.Ltmp305 # Offset: 3084
    00000c11: 	nopl	(%rax) # Size: 7
.Ltmp303:
    00000c18: 	cmpl	$0x2, %r15d
    00000c1c: 	jne	.Ltmp301 # Offset: 3100
    00000c1e: 	movl	%ebx, %esi
    00000c20: 	movq	%r14, %rdi
    00000c23: 	sarl	$0x2, %esi
    00000c26: 	movslq	%esi, %rsi
    00000c29: 	addq	%r14, %rsi
    00000c2c: 	jmp	.Ltmp305 # Offset: 3116
    00000c31: 	nopl	(%rax) # Size: 7
.Ltmp301:
    00000c38: 	movq	0x8(%rsp), %rsi
    00000c3d: 	movq	%r14, %rdi
    00000c40: 	jmp	.Ltmp305 # Offset: 3136
    00000c45: 	nopl	(%rax) # Size: 3
.Ltmp302:
    00000c48: 	movl	%ebx, %eax
    00000c4a: 	movslq	%ebx, %rsi
    00000c4d: 	movq	%r14, %rdi
    00000c50: 	sarl	$0x2, %eax
    00000c53: 	cltq
    00000c55: 	subq	%rax, %rsi
    00000c58: 	addq	%r14, %rsi
    00000c5b: 	jmp	.Ltmp305 # Offset: 3163
.Ltmp300:
    00000c60: 	movl	0x2c(%rsp), %eax
    00000c64: 	movq	0x30(%rsp), %rdi
    00000c69: 	movl	%eax, iterations(%rip)
    00000c6f: 	cmpq	0x10(%rsp), %rdi
    00000c74: 	je	.Ltmp306 # Offset: 3188
    00000c76: 	movq	0x40(%rsp), %rax
    00000c7b: 	leaq	0x1(%rax), %rsi
    00000c7f: 	callq	_ZdlPvm@PLT # Offset: 3199
.Ltmp306:
    00000c84: 	movq	0x20(%rsp), %rdi
    00000c89: 	movq	0x18(%rsp), %rdx
    00000c8e: 	leaq	DATAat0x6a92(%rip), %rsi
    00000c95: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 3221
    00000c9a: 	movl	iterations(%rip), %ebx
    00000ca0: 	leaq	DATAat0x6ac8(%rip), %rsi
    00000ca7: 	xorl	%eax, %eax
    00000ca9: 	movl	$0x1, %edi
    00000cae: 	movl	%ebx, 0x2c(%rsp)
    00000cb2: 	callq	__printf_chk@PLT # Offset: 3250
    00000cb7: 	leaq	DATAat0x6af8(%rip), %rsi
    00000cbe: 	movl	$0x1, %edi
    00000cc3: 	xorl	%eax, %eax
    00000cc5: 	callq	__printf_chk@PLT # Offset: 3269
    00000cca: 	xorl	%ebp, %ebp
    00000ccc: 	cmpl	$0x3, 0x28(%rsp)
    00000cd1: 	movslq	%ebx, %r13
    00000cd4: 	movl	$0x4, %ebx
    00000cd9: 	leaq	DATAat0x6b28(%rip), %r12
    00000ce0: 	jg	.Ltmp307 # Offset: 3296
    00000ce6: 	jmp	.Ltmp308 # Offset: 3302
    00000ceb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp312:
    00000cf0: 	cmpl	$-0x1, %r15d
    00000cf4: 	jne	.Ltmp309 # Offset: 3316
    00000cfa: 	movl	%ebx, %eax
    00000cfc: 	movslq	%ebx, %rdi
    00000cff: 	movq	%r14, %rsi
    00000d02: 	sarl	$0x2, %eax
    00000d05: 	cltq
    00000d07: 	subq	%rax, %rdi
    00000d0a: 	addq	%r14, %rdi
    00000d0d: 	nopl	(%rax) # Size: 3
.Ltmp313:
    00000d10: 	movq	0x30(%rsp), %rcx
    00000d15: 	movl	%ebx, %edx
    00000d17: 	callq	_Z12test_memmoveIh24forloop_unroll32_memmoveEvPT_PKS1_iT0_PKc # Offset: 3351
    00000d1c: 	pxor	%xmm1, %xmm1
    00000d20: 	pxor	%xmm2, %xmm2
    00000d24: 	movq	0x30(%rsp), %rcx
    00000d29: 	movl	%ebx, %r8d
    00000d2c: 	cvtsi2sd	%ebx, %xmm2
    00000d30: 	movq	results(%rip), %rax
    00000d37: 	movl	%ebp, %edx
    00000d39: 	movq	%r12, %rsi
    00000d3c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000d44: 	movl	$0x1, %edi
    00000d49: 	movsd	(%rax), %xmm0
    00000d4d: 	movl	$0x2, %eax
    00000d52: 	mulsd	%xmm2, %xmm1
    00000d56: 	divsd	DATAat0x6b78(%rip), %xmm1
    00000d5e: 	divsd	%xmm0, %xmm1
    00000d62: 	callq	__printf_chk@PLT # Offset: 3426
    00000d67: 	movl	$0x0, current_test(%rip)
    00000d71: 	addl	%ebx, %ebx
    00000d73: 	addl	$0x1, %ebp
    00000d76: 	cmpl	%ebx, 0x28(%rsp)
    00000d7a: 	jl	.Ltmp308 # Offset: 3450
.Ltmp307:
    00000d80: 	movl	$0x4000000, %eax
    00000d85: 	cltd
    00000d86: 	idivl	%ebx
    00000d88: 	movl	$0x4, %edx
    00000d8d: 	cltq
    00000d8f: 	imulq	%r13, %rax
    00000d93: 	cmpq	%rdx, %rax
    00000d96: 	cmovlq	%rdx, %rax
    00000d9a: 	movl	$0x70000000, %edx
    00000d9f: 	cmpq	%rdx, %rax
    00000da2: 	cmovgq	%rdx, %rax
    00000da6: 	movl	%eax, iterations(%rip)
    00000dac: 	cmpl	$0x1, %r15d
    00000db0: 	je	.Ltmp310 # Offset: 3504
    00000db2: 	jg	.Ltmp311 # Offset: 3506
    00000db4: 	cmpl	$-0x2, %r15d
    00000db8: 	jne	.Ltmp312 # Offset: 3512
    00000dbe: 	movl	%ebx, %edi
    00000dc0: 	movq	%r14, %rsi
    00000dc3: 	sarl	$0x2, %edi
    00000dc6: 	movslq	%edi, %rdi
    00000dc9: 	addq	%r14, %rdi
    00000dcc: 	jmp	.Ltmp313 # Offset: 3532
    00000dd1: 	nopl	(%rax) # Size: 7
.Ltmp311:
    00000dd8: 	cmpl	$0x2, %r15d
    00000ddc: 	jne	.Ltmp309 # Offset: 3548
    00000dde: 	movl	%ebx, %esi
    00000de0: 	movq	%r14, %rdi
    00000de3: 	sarl	$0x2, %esi
    00000de6: 	movslq	%esi, %rsi
    00000de9: 	addq	%r14, %rsi
    00000dec: 	jmp	.Ltmp313 # Offset: 3564
    00000df1: 	nopl	(%rax) # Size: 7
.Ltmp309:
    00000df8: 	movq	0x8(%rsp), %rsi
    00000dfd: 	movq	%r14, %rdi
    00000e00: 	jmp	.Ltmp313 # Offset: 3584
    00000e05: 	nopl	(%rax) # Size: 3
.Ltmp310:
    00000e08: 	movl	%ebx, %eax
    00000e0a: 	movslq	%ebx, %rsi
    00000e0d: 	movq	%r14, %rdi
    00000e10: 	sarl	$0x2, %eax
    00000e13: 	cltq
    00000e15: 	subq	%rax, %rsi
    00000e18: 	addq	%r14, %rsi
    00000e1b: 	jmp	.Ltmp313 # Offset: 3611
.Ltmp308:
    00000e20: 	movl	0x2c(%rsp), %eax
    00000e24: 	movq	0x30(%rsp), %rdi
    00000e29: 	movl	%eax, iterations(%rip)
    00000e2f: 	cmpq	0x10(%rsp), %rdi
    00000e34: 	je	.Ltmp314 # Offset: 3636
    00000e36: 	movq	0x40(%rsp), %rax
    00000e3b: 	leaq	0x1(%rax), %rsi
    00000e3f: 	callq	_ZdlPvm@PLT # Offset: 3647
.Ltmp314:
    00000e44: 	movq	0x20(%rsp), %rdi
    00000e49: 	movq	0x18(%rsp), %rdx
    00000e4e: 	leaq	DATAat0x6aaa(%rip), %rsi
    00000e55: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 3669
    00000e5a: 	movl	iterations(%rip), %ebx
    00000e60: 	leaq	DATAat0x6ac8(%rip), %rsi
    00000e67: 	xorl	%eax, %eax
    00000e69: 	movl	$0x1, %edi
    00000e6e: 	movl	%ebx, 0x2c(%rsp)
    00000e72: 	callq	__printf_chk@PLT # Offset: 3698
    00000e77: 	leaq	DATAat0x6af8(%rip), %rsi
    00000e7e: 	movl	$0x1, %edi
    00000e83: 	xorl	%eax, %eax
    00000e85: 	callq	__printf_chk@PLT # Offset: 3717
    00000e8a: 	xorl	%ebp, %ebp
    00000e8c: 	cmpl	$0x3, 0x28(%rsp)
    00000e91: 	movslq	%ebx, %r13
    00000e94: 	movl	$0x4, %ebx
    00000e99: 	leaq	DATAat0x6b28(%rip), %r12
    00000ea0: 	jg	.Ltmp315 # Offset: 3744
    00000ea6: 	jmp	.Ltmp316 # Offset: 3750
    00000eab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp320:
    00000eb0: 	cmpl	$-0x1, %r15d
    00000eb4: 	jne	.Ltmp317 # Offset: 3764
    00000eba: 	movl	%ebx, %eax
    00000ebc: 	movslq	%ebx, %rdi
    00000ebf: 	movq	%r14, %rsi
    00000ec2: 	sarl	$0x2, %eax
    00000ec5: 	cltq
    00000ec7: 	subq	%rax, %rdi
    00000eca: 	addq	%r14, %rdi
    00000ecd: 	nopl	(%rax) # Size: 3
.Ltmp321:
    00000ed0: 	movq	0x30(%rsp), %rcx
    00000ed5: 	movl	%ebx, %edx
    00000ed7: 	callq	_Z12test_memmoveIh24forloop_unroll64_memmoveEvPT_PKS1_iT0_PKc # Offset: 3799
    00000edc: 	pxor	%xmm1, %xmm1
    00000ee0: 	pxor	%xmm2, %xmm2
    00000ee4: 	movq	0x30(%rsp), %rcx
    00000ee9: 	movl	%ebx, %r8d
    00000eec: 	cvtsi2sd	%ebx, %xmm2
    00000ef0: 	movq	results(%rip), %rax
    00000ef7: 	movl	%ebp, %edx
    00000ef9: 	movq	%r12, %rsi
    00000efc: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000f04: 	movl	$0x1, %edi
    00000f09: 	movsd	(%rax), %xmm0
    00000f0d: 	movl	$0x2, %eax
    00000f12: 	mulsd	%xmm2, %xmm1
    00000f16: 	divsd	DATAat0x6b78(%rip), %xmm1
    00000f1e: 	divsd	%xmm0, %xmm1
    00000f22: 	callq	__printf_chk@PLT # Offset: 3874
    00000f27: 	movl	$0x0, current_test(%rip)
    00000f31: 	addl	%ebx, %ebx
    00000f33: 	addl	$0x1, %ebp
    00000f36: 	cmpl	%ebx, 0x28(%rsp)
    00000f3a: 	jl	.Ltmp316 # Offset: 3898
.Ltmp315:
    00000f40: 	movl	$0x4000000, %eax
    00000f45: 	cltd
    00000f46: 	idivl	%ebx
    00000f48: 	movl	$0x4, %edx
    00000f4d: 	cltq
    00000f4f: 	imulq	%r13, %rax
    00000f53: 	cmpq	%rdx, %rax
    00000f56: 	cmovlq	%rdx, %rax
    00000f5a: 	movl	$0x70000000, %edx
    00000f5f: 	cmpq	%rdx, %rax
    00000f62: 	cmovgq	%rdx, %rax
    00000f66: 	movl	%eax, iterations(%rip)
    00000f6c: 	cmpl	$0x1, %r15d
    00000f70: 	je	.Ltmp318 # Offset: 3952
    00000f72: 	jg	.Ltmp319 # Offset: 3954
    00000f74: 	cmpl	$-0x2, %r15d
    00000f78: 	jne	.Ltmp320 # Offset: 3960
    00000f7e: 	movl	%ebx, %edi
    00000f80: 	movq	%r14, %rsi
    00000f83: 	sarl	$0x2, %edi
    00000f86: 	movslq	%edi, %rdi
    00000f89: 	addq	%r14, %rdi
    00000f8c: 	jmp	.Ltmp321 # Offset: 3980
    00000f91: 	nopl	(%rax) # Size: 7
.Ltmp319:
    00000f98: 	cmpl	$0x2, %r15d
    00000f9c: 	jne	.Ltmp317 # Offset: 3996
    00000f9e: 	movl	%ebx, %esi
    00000fa0: 	movq	%r14, %rdi
    00000fa3: 	sarl	$0x2, %esi
    00000fa6: 	movslq	%esi, %rsi
    00000fa9: 	addq	%r14, %rsi
    00000fac: 	jmp	.Ltmp321 # Offset: 4012
    00000fb1: 	nopl	(%rax) # Size: 7
.Ltmp317:
    00000fb8: 	movq	0x8(%rsp), %rsi
    00000fbd: 	movq	%r14, %rdi
    00000fc0: 	jmp	.Ltmp321 # Offset: 4032
    00000fc5: 	nopl	(%rax) # Size: 3
.Ltmp318:
    00000fc8: 	movl	%ebx, %eax
    00000fca: 	movslq	%ebx, %rsi
    00000fcd: 	movq	%r14, %rdi
    00000fd0: 	sarl	$0x2, %eax
    00000fd3: 	cltq
    00000fd5: 	subq	%rax, %rsi
    00000fd8: 	addq	%r14, %rsi
    00000fdb: 	jmp	.Ltmp321 # Offset: 4059
.Ltmp316:
    00000fe0: 	movl	0x2c(%rsp), %eax
    00000fe4: 	movq	0x30(%rsp), %rdi
    00000fe9: 	movl	%eax, iterations(%rip)
    00000fef: 	cmpq	0x10(%rsp), %rdi
    00000ff4: 	je	.Ltmp322 # Offset: 4084
    00000ff6: 	movq	0x40(%rsp), %rax
    00000ffb: 	leaq	0x1(%rax), %rsi
    00000fff: 	callq	_ZdlPvm@PLT # Offset: 4095
.Ltmp322:
    00001004: 	movq	0x20(%rsp), %rdi
    00001009: 	movq	0x18(%rsp), %rdx
    0000100e: 	leaq	DATAat0x6b50(%rip), %rsi
    00001015: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ # Offset: 4117
    0000101a: 	movl	iterations(%rip), %ebx
    00001020: 	leaq	DATAat0x6ac8(%rip), %rsi
    00001027: 	xorl	%eax, %eax
    00001029: 	movl	$0x1, %edi
    0000102e: 	movl	%ebx, 0x18(%rsp)
    00001032: 	callq	__printf_chk@PLT # Offset: 4146
    00001037: 	leaq	DATAat0x6af8(%rip), %rsi
    0000103e: 	movl	$0x1, %edi
    00001043: 	xorl	%eax, %eax
    00001045: 	callq	__printf_chk@PLT # Offset: 4165
    0000104a: 	xorl	%ebp, %ebp
    0000104c: 	cmpl	$0x3, 0x28(%rsp)
    00001051: 	movslq	%ebx, %r13
    00001054: 	movl	$0x4, %ebx
    00001059: 	leaq	DATAat0x6b28(%rip), %r12
    00001060: 	jg	.Ltmp323 # Offset: 4192
    00001066: 	jmp	.Ltmp324 # Offset: 4198
    0000106b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp328:
    00001070: 	cmpl	$-0x1, %r15d
    00001074: 	jne	.Ltmp325 # Offset: 4212
    0000107a: 	movl	%ebx, %eax
    0000107c: 	movslq	%ebx, %rdi
    0000107f: 	movq	%r14, %rsi
    00001082: 	sarl	$0x2, %eax
    00001085: 	cltq
    00001087: 	subq	%rax, %rdi
    0000108a: 	addq	%r14, %rdi
    0000108d: 	nopl	(%rax) # Size: 3
.Ltmp329:
    00001090: 	movq	0x30(%rsp), %rcx
    00001095: 	movl	%ebx, %edx
    00001097: 	callq	_Z12test_memmoveIh34forloop_unroll64_cacheline_memmoveEvPT_PKS1_iT0_PKc # Offset: 4247
    0000109c: 	pxor	%xmm1, %xmm1
    000010a0: 	pxor	%xmm2, %xmm2
    000010a4: 	movq	0x30(%rsp), %rcx
    000010a9: 	movl	%ebx, %r8d
    000010ac: 	cvtsi2sd	%ebx, %xmm2
    000010b0: 	movq	results(%rip), %rax
    000010b7: 	movl	%ebp, %edx
    000010b9: 	movq	%r12, %rsi
    000010bc: 	cvtsi2sdl	iterations(%rip), %xmm1
    000010c4: 	movl	$0x1, %edi
    000010c9: 	movsd	(%rax), %xmm0
    000010cd: 	movl	$0x2, %eax
    000010d2: 	mulsd	%xmm2, %xmm1
    000010d6: 	divsd	DATAat0x6b78(%rip), %xmm1
    000010de: 	divsd	%xmm0, %xmm1
    000010e2: 	callq	__printf_chk@PLT # Offset: 4322
    000010e7: 	movl	$0x0, current_test(%rip)
    000010f1: 	addl	%ebx, %ebx
    000010f3: 	addl	$0x1, %ebp
    000010f6: 	cmpl	%ebx, 0x28(%rsp)
    000010fa: 	jl	.Ltmp324 # Offset: 4346
.Ltmp323:
    00001100: 	movl	$0x4000000, %eax
    00001105: 	cltd
    00001106: 	idivl	%ebx
    00001108: 	movl	$0x4, %edx
    0000110d: 	cltq
    0000110f: 	imulq	%r13, %rax
    00001113: 	cmpq	%rdx, %rax
    00001116: 	cmovlq	%rdx, %rax
    0000111a: 	movl	$0x70000000, %edx
    0000111f: 	cmpq	%rdx, %rax
    00001122: 	cmovgq	%rdx, %rax
    00001126: 	movl	%eax, iterations(%rip)
    0000112c: 	cmpl	$0x1, %r15d
    00001130: 	je	.Ltmp326 # Offset: 4400
    00001132: 	jg	.Ltmp327 # Offset: 4402
    00001134: 	cmpl	$-0x2, %r15d
    00001138: 	jne	.Ltmp328 # Offset: 4408
    0000113e: 	movl	%ebx, %edi
    00001140: 	movq	%r14, %rsi
    00001143: 	sarl	$0x2, %edi
    00001146: 	movslq	%edi, %rdi
    00001149: 	addq	%r14, %rdi
    0000114c: 	jmp	.Ltmp329 # Offset: 4428
    00001151: 	nopl	(%rax) # Size: 7
.Ltmp327:
    00001158: 	cmpl	$0x2, %r15d
    0000115c: 	jne	.Ltmp325 # Offset: 4444
    0000115e: 	movl	%ebx, %esi
    00001160: 	movq	%r14, %rdi
    00001163: 	sarl	$0x2, %esi
    00001166: 	movslq	%esi, %rsi
    00001169: 	addq	%r14, %rsi
    0000116c: 	jmp	.Ltmp329 # Offset: 4460
    00001171: 	nopl	(%rax) # Size: 7
.Ltmp325:
    00001178: 	movq	0x8(%rsp), %rsi
    0000117d: 	movq	%r14, %rdi
    00001180: 	jmp	.Ltmp329 # Offset: 4480
    00001185: 	nopl	(%rax) # Size: 3
.Ltmp326:
    00001188: 	movl	%ebx, %eax
    0000118a: 	movslq	%ebx, %rsi
    0000118d: 	movq	%r14, %rdi
    00001190: 	sarl	$0x2, %eax
    00001193: 	cltq
    00001195: 	subq	%rax, %rsi
    00001198: 	addq	%r14, %rsi
    0000119b: 	jmp	.Ltmp329 # Offset: 4507
.Ltmp324:
    000011a0: 	movl	0x18(%rsp), %eax
    000011a4: 	movq	0x30(%rsp), %rdi
    000011a9: 	movl	%eax, iterations(%rip)
    000011af: 	cmpq	0x10(%rsp), %rdi
    000011b4: 	je	.Ltmp330 # Offset: 4532
    000011b6: 	movq	0x40(%rsp), %rax
    000011bb: 	leaq	0x1(%rax), %rsi
    000011bf: 	callq	_ZdlPvm@PLT # Offset: 4543
.Ltmp330:
    000011c4: 	movq	0x58(%rsp), %rax
    000011c9: 	subq	%fs:0x28, %rax
    000011d2: 	jne	.Ltmp331 # Offset: 4562
    000011d4: 	addq	$0x68, %rsp
    000011d8: 	popq	%rbx
    000011d9: 	popq	%rbp
    000011da: 	popq	%r12
    000011dc: 	popq	%r13
    000011de: 	popq	%r14
    000011e0: 	popq	%r15
    000011e2: 	retq # Offset: 4578
.Ltmp331:
    000011e3: 	callq	__stack_chk_fail@PLT # Offset: 4579
    000011e8: 	endbr64
.Ltmp333:
    000011ec: 	movq	%rax, %rbp
    000011ef: 	jmp	.Ltmp332 # Offset: 4591
    000011f1: 	endbr64
    000011f5: 	jmp	.Ltmp333 # Offset: 4597
    000011f7: 	endbr64
    000011fb: 	jmp	.Ltmp333 # Offset: 4603
    000011fd: 	endbr64
    00001201: 	jmp	.Ltmp333 # Offset: 4609
    00001203: 	endbr64
    00001207: 	jmp	.Ltmp333 # Offset: 4615
    00001209: 	endbr64
    0000120d: 	jmp	.Ltmp333 # Offset: 4621
    0000120f: 	endbr64
    00001213: 	movq	%rax, %rbp
    00001216: 	jmp	.Ltmp334 # Offset: 4630
    00001218: 	endbr64
    0000121c: 	jmp	.Ltmp333 # Offset: 4636
    0000121e: 	endbr64
    00001222: 	jmp	.Ltmp333 # Offset: 4642
.Ltmp332:
    00001224: 	movq	0x30(%rsp), %rdi
    00001229: 	cmpq	0x10(%rsp), %rdi
    0000122e: 	je	.Ltmp335 # Offset: 4654
.Ltmp336:
    00001230: 	movq	0x40(%rsp), %rax
    00001235: 	leaq	0x1(%rax), %rsi
    00001239: 	callq	_ZdlPvm@PLT # Offset: 4665
.Ltmp335:
    0000123e: 	movq	%rbp, %rdi
    00001241: 	callq	_Unwind_Resume@PLT # Offset: 4673
    00001246: 	endbr64
    0000124a: 	jmp	.Ltmp333 # Offset: 4682
.Ltmp334:
    0000124c: 	movq	0x30(%rsp), %rdi
    00001251: 	leaq	0x40(%rsp), %rax
    00001256: 	cmpq	%rax, %rdi
    00001259: 	jne	.Ltmp336 # Offset: 4697
    0000125b: 	jmp	.Ltmp335 # Offset: 4699
DWARF CFI Instructions:
    <empty>
End of Function "_Z9TestSizesIhEvPT_PKS0_iiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_fini" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x5bc0
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x5bc0
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 31 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 297 instructions were shortened
BOLT-INFO: removed 88 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 26 out of 52 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0xc20118c
